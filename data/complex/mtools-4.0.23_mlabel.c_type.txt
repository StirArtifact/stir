static	O
void	O
_label_name	(*(struct),*(char),int,*(int),*(struct(array(char),array(char),char)),int)->(void)
(	O
doscp_t	struct
*	O
cp	*(struct)
,	O
const	O
char	O
*	O
filename	*(char)
,	O
int	O
verbose	int
UNUSEDP	O
,	O
int	O
*	O
mangled	*(int)
,	O
dos_name_t	struct
*	O
ans	*(char)
,	O
int	O
preserve_case	int
)	O
{	O
int	O
len	long
;	O
int	O
i	int
;	O
int	O
have_lower	int
,	O
have_upper	int
;	O
wchar_t	int
wbuffer	array(int)
[	O
12	int
]	O
;	O
memset	(*(void),int,long)->(*(void))
(	O
ans	*(char)
,	O
' '	O
,	O
sizeof	O
(	O
*	O
ans	*(char)
)	O
-	O
1	int
)	O
;	O
ans	*(char)
->	O
sentinel	char
=	O
'\0'	O
;	O
len	long
=	O
native_to_wchar	(*(char),*(int),long,*(char),*(int))->(int)
(	O
filename	*(char)
,	O
wbuffer	array(int)
,	O
11	int
,	O
0	int
,	O
0	int
)	O
;	O
if	O
(	O
len	long
>	O
11	int
)	O
{	O
*	O
mangled	*(int)
=	O
1	int
;	O
len	long
=	O
11	int
;	O
}	O
else	O
*	O
mangled	*(int)
=	O
0	int
;	O
have_lower	int
=	O
have_upper	int
=	O
0	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
len	long
;	O
i	int
++	O
)	O
{	O
if	O
(	O
islower	(int)->(int)
(	O
wbuffer	array(int)
[	O
i	int
]	O
)	O
)	O
have_lower	int
=	O
1	int
;	O
if	O
(	O
isupper	(int)->(int)
(	O
wbuffer	array(int)
[	O
i	int
]	O
)	O
)	O
have_upper	int
=	O
1	int
;	O
if	O
(	O
!	O
preserve_case	int
)	O
wbuffer	array(int)
[	O
i	int
]	O
=	O
ch_towupper	(int)->(int)
(	O
wbuffer	array(int)
[	O
i	int
]	O
)	O
;	O
if	O
(	O
wcschr	(*(int),int)->(*(int))
(	O
L"^+=/[]:,?*\\<>|\"."	O
,	O
wbuffer	array(int)
[	O
i	int
]	O
)	O
)	O
{	O
*	O
mangled	*(int)
=	O
1	int
;	O
wbuffer	array(int)
[	O
i	int
]	O
=	O
'~'	O
;	O
}	O
}	O
if	O
(	O
have_lower	int
&&	O
have_upper	int
)	O
*	O
mangled	*(int)
=	O
1	int
;	O
wchar_to_dos	(*(struct),*(int),*(char),long,*(int))->(void)
(	O
cp	*(struct)
,	O
wbuffer	array(int)
,	O
ans	*(char)
->	O
base	int
,	O
len	long
,	O
mangled	*(int)
)	O
;	O
}	O
void	O
label_name_uc	(*(struct),*(char),int,*(int),*(struct))->(void)
(	O
doscp_t	struct
*	O
cp	*(struct)
,	O
const	O
char	O
*	O
filename	*(char)
,	O
int	O
verbose	int
,	O
int	O
*	O
mangled	*(int)
,	O
dos_name_t	struct
*	O
ans	*(char)
)	O
{	O
_label_name	(*(struct),*(char),int,*(int),*(struct(array(char),array(char),char)),int)->(void)
(	O
cp	*(struct)
,	O
filename	*(char)
,	O
verbose	int
,	O
mangled	*(int)
,	O
ans	*(char)
,	O
0	int
)	O
;	O
}	O
void	O
label_name_pc	(*(struct),*(char),int,*(int),*(struct))->(void)
(	O
doscp_t	struct
*	O
cp	*(struct)
,	O
const	O
char	O
*	O
filename	*(char)
,	O
int	O
verbose	int
,	O
int	O
*	O
mangled	*(int)
,	O
dos_name_t	struct
*	O
ans	*(char)
)	O
{	O
_label_name	(*(struct),*(char),int,*(int),*(struct(array(char),array(char),char)),int)->(void)
(	O
cp	*(struct)
,	O
filename	*(char)
,	O
verbose	int
,	O
mangled	*(int)
,	O
ans	*(char)
,	O
1	int
)	O
;	O
}	O
int	O
labelit	(*(struct),*(char),*(void),*(struct(*(struct(*`,int,*`,*`)),int,struct(array(char),array(char),char,char,char,array(char),array(char),array(char),array(char),array(char),array(char),array(char),array(char)),array(int),int,int)))->(int)
(	O
struct	O
dos_name_t	struct
*	O
dosname	*(struct)
,	O
char	O
*	O
longname	*(char)
UNUSEDP	O
,	O
void	O
*	O
arg0	*(void)
UNUSEDP	O
,	O
direntry_t	struct(*(struct(*(struct(*((*`,*`,long,long)->(int)),*((*`,*`,long,long)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`,*`,int,*`)->(int)),*((*`,*`,*`,*`,*`)->(int)),*((*`,long)->(int)),*((*`)->(*`)),*((*`)->(int)))),int,*(struct(*(struct`),int,*(struct`),*(struct`))),*(struct(*(struct`),int,*(struct`),*(struct`))))),int,struct(array(char),array(char),char,char,char,array(char),array(char),array(char),array(char),array(char),array(char),array(char),array(char)),array(int),int,int)
*	O
entry	int
)	O
{	O
time_t	long
now	*(long)
;	O
getTimeNow	(*(long))->(long)
(	O
&	O
now	*(long)
)	O
;	O
mk_entry	(*(struct),char,int,long,long,*(struct(array(char),array(char),char,char,char,array(char),array(char),array(char),array(char),array(char),array(char),array(char),array(char))))->(*(struct(array(char),array(char),char,char,char,array(char),array(char),array(char),array(char),array(char),array(char),array(char),array(char))))
(	O
dosname	*(struct)
,	O
0x8	int
,	O
0	int
,	O
0	int
,	O
now	*(long)
,	O
&	O
entry	int
->	O
dir	*(struct(array(char),array(char),char,char,char,array(char),array(char),array(char),array(char),array(char),array(char),array(char),array(char)))
)	O
;	O
return	O
0	int
;	O
}	O
static	O
void	O
usage	(int)->(void)
(	O
int	O
ret	int
)	O
NORETURN	O
;	O
static	O
void	O
usage	(int)->(void)
(	O
int	O
ret	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"Mtools version %s, dated %s\n"	*(char)
,	O
mversion	*(char)
,	O
mdate	*(char)
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"Usage: %s [-vscVn] [-N serial] drive:\n"	*(char)
,	O
progname	*(char)
)	O
;	O
exit	(int)->(void)
(	O
ret	int
)	O
;	O
}	O
void	O
mlabel	(int,*(*(char)),int)->(void)
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	*(*(char))
,	O
int	O
type	enum(int,int,int,int)
UNUSEDP	O
)	O
NORETURN	O
;	O
void	O
mlabel	(int,*(*(char)),int)->(void)
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	*(*(char))
,	O
int	O
type	enum(int,int,int,int)
UNUSEDP	O
)	O
{	O
const	O
char	O
*	O
newLabel	*(char)
=	O
""	*(char)
;	O
int	O
verbose	int
,	O
clear	int
,	O
interactive	int
,	O
show	int
;	O
direntry_t	struct(*(struct(*(struct(*((*`,*`,long,long)->(int)),*((*`,*`,long,long)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`,*`,int,*`)->(int)),*((*`,*`,*`,*`,*`)->(int)),*((*`,long)->(int)),*((*`)->(*`)),*((*`)->(int)))),int,*(struct(*(struct`),int,*(struct`),*(struct`))),*(struct(*(struct`),int,*(struct`),*(struct`))))),int,struct(array(char),array(char),char,char,char,array(char),array(char),array(char),array(char),array(char),array(char),array(char),array(char)),array(int),int,int)
entry	int
;	O
int	O
result	int
=	O
0	int
;	O
char	O
longname	*(char)
[	O
VBUFSIZE	O
]	O
;	O
char	O
shortname	*(char)
[	O
45	int
]	O
;	O
ClashHandling_t	struct(array(enum(int,int,int,int,int,int,int,int,int,int)),array(enum(int,int,int,int,int,int,int,int,int,int)),int,int,int,*(char),*(char),int,int,int,int,int,*((*(struct),*(char),int,*(int),*(struct))->(void)),int)
ch	char
;	O
struct	O
MainParam_t	struct(*((*(struct(*(struct`),int,*(struct`),*(struct`))),*(struct(*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*(void),int,int,int,struct(*`,long),struct(*`,long),*(struct`),*(struct`),*(char),*(struct`),*(char),*(char),*(char),int,array(char),*(char),array(char))),*(char))->(int)),*((*(struct(*(struct`),int,struct(array(char),array(char),char,char,char,array(char),array(char),array(char),array(char),array(char),array(char),array(char),array(char)),array(int),int,int)),*(struct(*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*(void),int,int,int,struct(*`,long),struct(*`,long),*(struct`),*(struct`),*(char),*(struct`),*(char),*(char),*(char),int,array(char),*(char),array(char))))->(int)),*((*(struct(*(struct`),int,struct(array(char),array(char),char,char,char,array(char),array(char),array(char),array(char),array(char),array(char),array(char),array(char)),array(int),int,int)),*(struct(*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*(void),int,int,int,struct(*`,long),struct(*`,long),*(struct`),*(struct`),*(char),*(struct`),*(char),*(char),*(char),int,array(char),*(char),array(char))))->(int)),*((*(struct(*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*(void),int,int,int,struct(*`,long),struct(*`,long),*(struct`),*(struct`),*(char),*(struct`),*(char),*(char),*(char),int,array(char),*(char),array(char))))->(int)),*(void),int,int,int,struct(*(char),long),struct(*(char),long),*(struct(*(struct(*((*`,*`,long,long)->(int)),*((*`,*`,long,long)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`,*`,int,*`)->(int)),*((*`,*`,*`,*`,*`)->(int)),*((*`,long)->(int)),*((*`)->(*`)),*((*`)->(int)))),int,*(struct(*(struct`),int,*(struct`),*(struct`))),*(struct(*(struct`),int,*(struct`),*(struct`))))),*(struct(*(struct(*(struct`),int,*(struct`),*(struct`))),int,struct(array(char),array(char),char,char,char,array(char),array(char),array(char),array(char),array(char),array(char),array(char),array(char)),array(int),int,int)),*(char),*(struct(*(struct(*((*`,*`,long,long)->(int)),*((*`,*`,long,long)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`,*`,int,*`)->(int)),*((*`,*`,*`,*`,*`)->(int)),*((*`,long)->(int)),*((*`)->(*`)),*((*`)->(int)))),int,*(struct(*(struct`),int,*(struct`),*(struct`))),*(struct(*(struct`),int,*(struct`),*(struct`))))),*(char),*(char),*(char),int,array(char),*(char),array(char))
mp	*(struct)
;	O
Stream_t	struct(*(struct),int,*(struct(*(struct),int,*(struct(*(struct`),int,*(struct`),*(struct`))),*(struct(*(struct`),int,*(struct`),*(struct`))))),*(struct(*(struct),int,*(struct(*(struct`),int,*(struct`),*(struct`))),*(struct(*(struct`),int,*(struct`),*(struct`))))))
*	O
RootDir	*(struct(*(struct(*((*`,*`,long,long)->(int)),*((*`,*`,long,long)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`,*`,int,*`)->(int)),*((*`,*`,*`,*`,*`)->(int)),*((*`,long)->(int)),*((*`)->(*`)),*((*`)->(int)))),int,*(struct(*(struct`),int,*(struct`),*(struct`))),*(struct(*(struct`),int,*(struct`),*(struct`)))))
;	O
int	O
c	char
;	O
int	O
mangled	*(int)
;	O
enum	O
{	O
SER_NONE	int
,	O
SER_RANDOM	int
,	O
SER_SET	int
}	O
set_serial	enum(int,int,int)
=	O
SER_NONE	int
;	O
unsigned	O
long	O
serial	array(char)
=	O
0	int
;	O
int	O
need_write_boot	int
=	O
0	int
;	O
int	O
have_boot	int
=	O
0	int
;	O
char	O
*	O
eptr	*(char)
;	O
union	O
bootsector	union(array(char),array(char),struct(array(char),array(char),array(char),char,array(char),char,array(char),array(char),char,array(char),array(char),array(char),array(char),array(char),union(struct(array(char),array(char),array(char),array(char),array(char),array(char),array(char),array(char),struct(char,char,char,array(char),array(char),array(char))),struct(struct(char,char,char,array(char),array(char),array(char)),char,char,char,char,char,char,array(char),array(char),array(char),array(char),array(char),array(char),array(char)))))
boot	struct(array(char),array(char),array(char),char,array(char),char,array(char),array(char),char,array(char),array(char),array(char),array(char),array(char),union(struct(array(char),array(char),array(char),array(char),array(char),array(char),array(char),array(char),struct(char,char,char,array(char),array(char),array(char))),struct(struct(char,char,char,array(char),array(char),array(char)),char,char,char,char,char,char,array(char),array(char),array(char),array(char),array(char),array(char),array(char))))
;	O
Stream_t	struct(*(struct),int,*(struct(*(struct),int,*(struct(*(struct`),int,*(struct`),*(struct`))),*(struct(*(struct`),int,*(struct`),*(struct`))))),*(struct(*(struct),int,*(struct(*(struct`),int,*(struct`),*(struct`))),*(struct(*(struct`),int,*(struct`),*(struct`))))))
*	O
Fs	*(struct(*(struct),int,*(struct(*(struct`),int,*(struct`),*(struct`))),*(struct(*(struct`),int,*(struct`),*(struct`)))))
=	O
0	int
;	O
int	O
r	int
;	O
struct	O
label_blk_t	struct(char,char,char,array(char),array(char),array(char))
*	O
labelBlock	struct(char,char,char,array(char),array(char),array(char))
;	O
int	O
isRo	int
=	O
0	int
;	O
int	O
*	O
isRop	*(int)
=	O
NULL	O
;	O
char	O
drive	char
;	O
init_clash_handling	(*(struct(array(enum(int,int,int,int,int,int,int,int,int,int)),array(enum(int,int,int,int,int,int,int,int,int,int)),int,int,int,*(char),*(char),int,int,int,int,int,*((*`,*`,int,*`,*`)->(void)),int)))->(void)
(	O
&	O
ch	char
)	O
;	O
ch	char
.	O
name_converter	*((*(struct),*(char),int,*(int),*(struct))->(void))
=	O
label_name_uc	(*(struct),*(char),int,*(int),*(struct))->(void)
;	O
ch	char
.	O
ignore_entry	int
=	O
-	O
2	int
;	O
ch	char
.	O
is_label	int
=	O
1	int
;	O
verbose	int
=	O
0	int
;	O
clear	int
=	O
0	int
;	O
show	int
=	O
0	int
;	O
if	O
(	O
helpFlag	(int,*(*(char)))->(int)
(	O
argc	int
,	O
argv	*(*(char))
)	O
)	O
usage	(int)->(void)
(	O
0	int
)	O
;	O
while	O
(	O
(	O
c	char
=	O
getopt	(int,*(*(char)),*(char))->(int)
(	O
argc	int
,	O
argv	*(*(char))
,	O
"i:vcsnN:h"	*(char)
)	O
)	O
!=	O
EOF	O
)	O
{	O
switch	O
(	O
c	char
)	O
{	O
case	O
'i'	O
:	O
set_cmd_line_image	(*(char))->(void)
(	O
optarg	*(char)
)	O
;	O
break	O
;	O
case	O
'v'	O
:	O
verbose	int
=	O
1	int
;	O
break	O
;	O
case	O
'c'	O
:	O
clear	int
=	O
1	int
;	O
break	O
;	O
case	O
's'	O
:	O
show	int
=	O
1	int
;	O
break	O
;	O
case	O
'n'	O
:	O
set_serial	enum(int,int,int)
=	O
SER_RANDOM	int
;	O
init_random	()->(void)
(	O
)	O
;	O
serial	array(char)
=	O
random	()->(long)
(	O
)	O
;	O
break	O
;	O
case	O
'N'	O
:	O
set_serial	enum(int,int,int)
=	O
SER_SET	int
;	O
serial	array(char)
=	O
strtoul	(*(char),*(*(char)),int)->(long)
(	O
optarg	*(char)
,	O
&	O
eptr	*(char)
,	O
16	int
)	O
;	O
if	O
(	O
*	O
eptr	*(char)
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s not a valid serial number\n"	*(char)
,	O
optarg	*(char)
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
break	O
;	O
case	O
'h'	O
:	O
usage	(int)->(void)
(	O
0	int
)	O
;	O
default	O
:	O
usage	(int)->(void)
(	O
1	int
)	O
;	O
}	O
}	O
if	O
(	O
argc	int
-	O
optind	int
>	O
1	int
)	O
usage	(int)->(void)
(	O
1	int
)	O
;	O
if	O
(	O
argc	int
-	O
optind	int
==	O
1	int
)	O
{	O
if	O
(	O
!	O
argv	*(*(char))
[	O
optind	int
]	O
[	O
0	int
]	O
||	O
argv	*(*(char))
[	O
optind	int
]	O
[	O
1	int
]	O
!=	O
':'	O
)	O
usage	(int)->(void)
(	O
1	int
)	O
;	O
drive	char
=	O
ch_toupper	(char)->(char)
(	O
argv	*(*(char))
[	O
argc	int
-	O
1	int
]	O
[	O
0	int
]	O
)	O
;	O
newLabel	*(char)
=	O
argv	*(*(char))
[	O
optind	int
]	O
+	O
2	int
;	O
}	O
else	O
{	O
drive	char
=	O
get_default_drive	()->(char)
(	O
)	O
;	O
}	O
init_mp	(*(struct(*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*(void),int,int,int,struct(*(char),long),struct(*(char),long),*(struct(*`,int,*`,*`)),*(struct(*`,int,struct`,array(int),int,int)),*(char),*(struct(*`,int,*`,*`)),*(char),*(char),*(char),int,array(char),*(char),array(char))))->(void)
(	O
&	O
mp	*(struct)
)	O
;	O
if	O
(	O
strlen	(*(char))->(long)
(	O
newLabel	*(char)
)	O
>	O
VBUFSIZE	O
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"Label too long\n"	*(char)
)	O
;	O
FREE	O
(	O
&	O
RootDir	*(struct(*(struct(*((*`,*`,long,long)->(int)),*((*`,*`,long,long)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`,*`,int,*`)->(int)),*((*`,*`,*`,*`,*`)->(int)),*((*`,long)->(int)),*((*`)->(*`)),*((*`)->(int)))),int,*(struct(*(struct`),int,*(struct`),*(struct`))),*(struct(*(struct`),int,*(struct`),*(struct`)))))
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
interactive	int
=	O
!	O
show	int
&&	O
!	O
clear	int
&&	O
!	O
newLabel	*(char)
[	O
0	int
]	O
&&	O
(	O
set_serial	enum(int,int,int)
==	O
SER_NONE	int
)	O
;	O
if	O
(	O
!	O
clear	int
&&	O
!	O
newLabel	*(char)
[	O
0	int
]	O
)	O
{	O
isRop	*(int)
=	O
&	O
isRo	int
;	O
}	O
if	O
(	O
clear	int
&&	O
newLabel	*(char)
[	O
0	int
]	O
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"Both clear and new label specified\n"	*(char)
)	O
;	O
FREE	O
(	O
&	O
RootDir	*(struct(*(struct(*((*`,*`,long,long)->(int)),*((*`,*`,long,long)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`,*`,int,*`)->(int)),*((*`,*`,*`,*`,*`)->(int)),*((*`,long)->(int)),*((*`)->(*`)),*((*`)->(int)))),int,*(struct(*(struct`),int,*(struct`),*(struct`))),*(struct(*(struct`),int,*(struct`),*(struct`)))))
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
RootDir	*(struct(*(struct(*((*`,*`,long,long)->(int)),*((*`,*`,long,long)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`,*`,int,*`)->(int)),*((*`,*`,*`,*`,*`)->(int)),*((*`,long)->(int)),*((*`)->(*`)),*((*`)->(int)))),int,*(struct(*(struct`),int,*(struct`),*(struct`))),*(struct(*(struct`),int,*(struct`),*(struct`)))))
=	O
open_root_dir	(char,int,*(int))->(*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`)),int,*(struct(*`,int,*`,*`)),*(struct(*`,int,*`,*`)))))
(	O
drive	char
,	O
isRop	*(int)
?	O
0	int
:	O
O_RDWR	int
,	O
isRop	*(int)
)	O
;	O
if	O
(	O
isRo	int
)	O
{	O
show	int
=	O
1	int
;	O
interactive	int
=	O
0	int
;	O
}	O
if	O
(	O
!	O
RootDir	*(struct(*(struct(*((*`,*`,long,long)->(int)),*((*`,*`,long,long)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`,*`,int,*`)->(int)),*((*`,*`,*`,*`,*`)->(int)),*((*`,long)->(int)),*((*`)->(*`)),*((*`)->(int)))),int,*(struct(*(struct`),int,*(struct`),*(struct`))),*(struct(*(struct`),int,*(struct`),*(struct`)))))
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s: Cannot initialize drive\n"	*(char)
,	O
argv	*(*(char))
[	O
0	int
]	O
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
initializeDirentry	(*(struct(*(struct(*`,int,*`,*`)),int,struct(array(char),array(char),char,char,char,array(char),array(char),array(char),array(char),array(char),array(char),array(char),array(char)),array(int),int,int)),*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`)),int,*(struct(*`,int,*`,*`)),*(struct(*`,int,*`,*`)))))->(void)
(	O
&	O
entry	int
,	O
RootDir	*(struct(*(struct(*((*`,*`,long,long)->(int)),*((*`,*`,long,long)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`,*`,int,*`)->(int)),*((*`,*`,*`,*`,*`)->(int)),*((*`,long)->(int)),*((*`)->(*`)),*((*`)->(int)))),int,*(struct(*(struct`),int,*(struct`),*(struct`))),*(struct(*(struct`),int,*(struct`),*(struct`)))))
)	O
;	O
r	int
=	O
vfat_lookup	(*(struct(*(struct(*`,int,*`,*`)),int,struct(array(char),array(char),char,char,char,array(char),array(char),array(char),array(char),array(char),array(char),array(char),array(char)),array(int),int,int)),*(char),int,int,*(char),long,*(char),long)->(int)
(	O
&	O
entry	int
,	O
0	int
,	O
0	int
,	O
ACCEPT_LABEL	int
|	O
MATCH_ANY	int
,	O
shortname	*(char)
,	O
sizeof	O
(	O
shortname	*(char)
)	O
,	O
longname	*(char)
,	O
sizeof	O
(	O
longname	*(char)
)	O
)	O
;	O
if	O
(	O
r	int
==	O
-	O
2	int
)	O
{	O
FREE	O
(	O
&	O
RootDir	*(struct(*(struct(*((*`,*`,long,long)->(int)),*((*`,*`,long,long)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`,*`,int,*`)->(int)),*((*`,*`,*`,*`,*`)->(int)),*((*`,long)->(int)),*((*`)->(*`)),*((*`)->(int)))),int,*(struct(*(struct`),int,*(struct`),*(struct`))),*(struct(*(struct`),int,*(struct`),*(struct`)))))
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
if	O
(	O
show	int
||	O
interactive	int
)	O
{	O
if	O
(	O
isNotFound	(*(struct(*(struct(*`,int,*`,*`)),int,struct(array(char),array(char),char,char,char,array(char),array(char),array(char),array(char),array(char),array(char),array(char),array(char)),array(int),int,int)))->(int)
(	O
&	O
entry	int
)	O
)	O
printf	(*(char))->(int)
(	O
" Volume has no label\n"	*(char)
)	O
;	O
else	O
if	O
(	O
*	O
longname	*(char)
)	O
printf	(*(char))->(int)
(	O
" Volume label is %s (abbr=%s)\n"	*(char)
,	O
longname	*(char)
,	O
shortname	*(char)
)	O
;	O
else	O
printf	(*(char))->(int)
(	O
" Volume label is %s\n"	*(char)
,	O
shortname	*(char)
)	O
;	O
}	O
if	O
(	O
interactive	int
)	O
{	O
saved_sig_state	struct(array(struct(union(*((int)->(void)),*((int,*(struct`),*(void))->(void))),struct(array(long)),int,*(()->(void)))))
ss	*(struct(array(struct(union(*((int)->(void)),*((int,*(struct`),*(void))->(void))),struct(array(long)),int,*(()->(void))))))
;	O
newLabel	*(char)
=	O
longname	*(char)
;	O
allow_interrupts	(*(struct(array(struct(union(*((int)->(void)),*((int,*(struct`),*(void))->(void))),struct(array(long)),int,*(()->(void)))))))->(void)
(	O
&	O
ss	*(struct(array(struct(union(*((int)->(void)),*((int,*(struct`),*(void))->(void))),struct(array(long)),int,*(()->(void))))))
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"Enter the new volume label : "	*(char)
)	O
;	O
if	O
(	O
fgets	(*(char),int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(*(char))
(	O
longname	*(char)
,	O
VBUFSIZE	O
,	O
stdin	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
==	O
NULL	O
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"\n"	*(char)
)	O
;	O
if	O
(	O
errno	O
==	O
EINTR	int
)	O
{	O
FREE	O
(	O
&	O
RootDir	*(struct(*(struct(*((*`,*`,long,long)->(int)),*((*`,*`,long,long)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`,*`,int,*`)->(int)),*((*`,*`,*`,*`,*`)->(int)),*((*`,long)->(int)),*((*`)->(*`)),*((*`)->(int)))),int,*(struct(*(struct`),int,*(struct`),*(struct`))),*(struct(*(struct`),int,*(struct`),*(struct`)))))
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
longname	*(char)
[	O
0	int
]	O
=	O
'\0'	O
;	O
}	O
if	O
(	O
longname	*(char)
[	O
0	int
]	O
)	O
longname	*(char)
[	O
strlen	(*(char))->(long)
(	O
newLabel	*(char)
)	O
-	O
1	int
]	O
=	O
'\0'	O
;	O
}	O
if	O
(	O
strlen	(*(char))->(long)
(	O
newLabel	*(char)
)	O
>	O
11	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"New label too long\n"	*(char)
)	O
;	O
FREE	O
(	O
&	O
RootDir	*(struct(*(struct(*((*`,*`,long,long)->(int)),*((*`,*`,long,long)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`,*`,int,*`)->(int)),*((*`,*`,*`,*`,*`)->(int)),*((*`,long)->(int)),*((*`)->(*`)),*((*`)->(int)))),int,*(struct(*(struct`),int,*(struct`),*(struct`))),*(struct(*(struct`),int,*(struct`),*(struct`)))))
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
if	O
(	O
(	O
!	O
show	int
||	O
newLabel	*(char)
[	O
0	int
]	O
)	O
&&	O
!	O
isNotFound	(*(struct(*(struct(*`,int,*`,*`)),int,struct(array(char),array(char),char,char,char,array(char),array(char),array(char),array(char),array(char),array(char),array(char),array(char)),array(int),int,int)))->(int)
(	O
&	O
entry	int
)	O
)	O
{	O
if	O
(	O
interactive	int
&&	O
newLabel	*(char)
[	O
0	int
]	O
==	O
'\0'	O
)	O
if	O
(	O
ask_confirmation	(*(char))->(int)
(	O
"Delete volume label (y/n): "	*(char)
)	O
)	O
{	O
FREE	O
(	O
&	O
RootDir	*(struct(*(struct(*((*`,*`,long,long)->(int)),*((*`,*`,long,long)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`,*`,int,*`)->(int)),*((*`,*`,*`,*`,*`)->(int)),*((*`,long)->(int)),*((*`)->(*`)),*((*`)->(int)))),int,*(struct(*(struct`),int,*(struct`),*(struct`))),*(struct(*(struct`),int,*(struct`),*(struct`)))))
)	O
;	O
exit	(int)->(void)
(	O
0	int
)	O
;	O
}	O
entry	int
.	O
dir	*(struct(array(char),array(char),char,char,char,array(char),array(char),array(char),array(char),array(char),array(char),array(char),array(char)))
.	O
attr	char
=	O
0	int
;	O
wipeEntry	(*(struct(*(struct(*`,int,*`,*`)),int,struct(array(char),array(char),char,char,char,array(char),array(char),array(char),array(char),array(char),array(char),array(char),array(char)),array(int),int,int)))->(void)
(	O
&	O
entry	int
)	O
;	O
}	O
if	O
(	O
newLabel	*(char)
[	O
0	int
]	O
!=	O
'\0'	O
)	O
{	O
ch	char
.	O
ignore_entry	int
=	O
1	int
;	O
result	int
=	O
mwrite_one	(*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`)),int,*(struct(*`,int,*`,*`)),*(struct(*`,int,*`,*`)))),*(char),*(char),*((*(struct),*(char),*(void),*(struct(*`,int,struct`,array(int),int,int)))->(int)),*(void),*(struct(array(enum(int,int,int,int,int,int,int,int,int,int)),array(enum(int,int,int,int,int,int,int,int,int,int)),int,int,int,*(char),*(char),int,int,int,int,int,*((*`,*`,int,*`,*`)->(void)),int)))->(int)
(	O
RootDir	*(struct(*(struct(*((*`,*`,long,long)->(int)),*((*`,*`,long,long)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`,*`,int,*`)->(int)),*((*`,*`,*`,*`,*`)->(int)),*((*`,long)->(int)),*((*`)->(*`)),*((*`)->(int)))),int,*(struct(*(struct`),int,*(struct`),*(struct`))),*(struct(*(struct`),int,*(struct`),*(struct`)))))
,	O
newLabel	*(char)
,	O
0	int
,	O
labelit	(*(struct),*(char),*(void),*(struct(*(struct(*`,int,*`,*`)),int,struct(array(char),array(char),char,char,char,array(char),array(char),array(char),array(char),array(char),array(char),array(char),array(char)),array(int),int,int)))->(int)
,	O
NULL	O
,	O
&	O
ch	char
)	O
?	O
0	int
:	O
1	int
;	O
}	O
have_boot	int
=	O
0	int
;	O
if	O
(	O
(	O
!	O
show	int
||	O
newLabel	*(char)
[	O
0	int
]	O
)	O
||	O
set_serial	enum(int,int,int)
!=	O
SER_NONE	int
)	O
{	O
Fs	*(struct(*(struct),int,*(struct(*(struct`),int,*(struct`),*(struct`))),*(struct(*(struct`),int,*(struct`),*(struct`)))))
=	O
GetFs	(*(struct(*(struct),int,*(struct(*`,int,*`,*`)),*(struct(*`,int,*`,*`)))))->(*(struct(*(struct),int,*(struct(*`,int,*`,*`)),*(struct(*`,int,*`,*`)))))
(	O
RootDir	*(struct(*(struct(*((*`,*`,long,long)->(int)),*((*`,*`,long,long)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`,*`,int,*`)->(int)),*((*`,*`,*`,*`,*`)->(int)),*((*`,long)->(int)),*((*`)->(*`)),*((*`)->(int)))),int,*(struct(*(struct`),int,*(struct`),*(struct`))),*(struct(*(struct`),int,*(struct`),*(struct`)))))
)	O
;	O
have_boot	int
=	O
(	O
force_read	(*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`)),int,*(struct(*`,int,*`,*`)),*(struct(*`,int,*`,*`)))),*(char),long,long)->(int)
(	O
Fs	*(struct(*(struct),int,*(struct(*(struct`),int,*(struct`),*(struct`))),*(struct(*(struct`),int,*(struct`),*(struct`)))))
,	O
boot	struct(array(char),array(char),array(char),char,array(char),char,array(char),array(char),char,array(char),array(char),array(char),array(char),array(char),union(struct(array(char),array(char),array(char),array(char),array(char),array(char),array(char),array(char),struct(char,char,char,array(char),array(char),array(char))),struct(struct(char,char,char,array(char),array(char),array(char)),char,char,char,char,char,char,array(char),array(char),array(char),array(char),array(char),array(char),array(char))))
.	O
characters	array(char)
,	O
0	int
,	O
sizeof	O
(	O
boot	struct(array(char),array(char),array(char),char,array(char),char,array(char),array(char),char,array(char),array(char),array(char),array(char),array(char),union(struct(array(char),array(char),array(char),array(char),array(char),array(char),array(char),array(char),struct(char,char,char,array(char),array(char),array(char))),struct(struct(char,char,char,array(char),array(char),array(char)),char,char,char,char,char,char,array(char),array(char),array(char),array(char),array(char),array(char),array(char))))
)	O
)	O
==	O
sizeof	O
(	O
boot	struct(array(char),array(char),array(char),char,array(char),char,array(char),array(char),char,array(char),array(char),array(char),array(char),array(char),union(struct(array(char),array(char),array(char),array(char),array(char),array(char),array(char),array(char),struct(char,char,char,array(char),array(char),array(char))),struct(struct(char,char,char,array(char),array(char),array(char)),char,char,char,char,char,char,array(char),array(char),array(char),array(char),array(char),array(char),array(char))))
)	O
)	O
;	O
}	O
if	O
(	O
WORD_S	O
(	O
fatlen	array(char)
)	O
)	O
{	O
labelBlock	struct(char,char,char,array(char),array(char),array(char))
=	O
&	O
boot	struct(array(char),array(char),array(char),char,array(char),char,array(char),array(char),char,array(char),array(char),array(char),array(char),array(char),union(struct(array(char),array(char),array(char),array(char),array(char),array(char),array(char),array(char),struct(char,char,char,array(char),array(char),array(char))),struct(struct(char,char,char,array(char),array(char),array(char)),char,char,char,char,char,char,array(char),array(char),array(char),array(char),array(char),array(char),array(char))))
.	O
boot	struct(array(char),array(char),array(char),char,array(char),char,array(char),array(char),char,array(char),array(char),array(char),array(char),array(char),union(struct(array(char),array(char),array(char),array(char),array(char),array(char),array(char),array(char),struct(char,char,char,array(char),array(char),array(char))),struct(struct(char,char,char,array(char),array(char),array(char)),char,char,char,char,char,char,array(char),array(char),array(char),array(char),array(char),array(char),array(char))))
.	O
ext	array(char)
.	O
old	struct(struct(char,char,char,array(char),array(char),array(char)),char,char,char,char,char,char,array(char),array(char),array(char),array(char),array(char),array(char),array(char))
.	O
labelBlock	struct(char,char,char,array(char),array(char),array(char))
;	O
}	O
else	O
{	O
labelBlock	struct(char,char,char,array(char),array(char),array(char))
=	O
&	O
boot	struct(array(char),array(char),array(char),char,array(char),char,array(char),array(char),char,array(char),array(char),array(char),array(char),array(char),union(struct(array(char),array(char),array(char),array(char),array(char),array(char),array(char),array(char),struct(char,char,char,array(char),array(char),array(char))),struct(struct(char,char,char,array(char),array(char),array(char)),char,char,char,char,char,char,array(char),array(char),array(char),array(char),array(char),array(char),array(char))))
.	O
boot	struct(array(char),array(char),array(char),char,array(char),char,array(char),array(char),char,array(char),array(char),array(char),array(char),array(char),union(struct(array(char),array(char),array(char),array(char),array(char),array(char),array(char),array(char),struct(char,char,char,array(char),array(char),array(char))),struct(struct(char,char,char,array(char),array(char),array(char)),char,char,char,char,char,char,array(char),array(char),array(char),array(char),array(char),array(char),array(char))))
.	O
ext	array(char)
.	O
fat32	struct(array(char),array(char),array(char),array(char),array(char),array(char),array(char),array(char),struct(char,char,char,array(char),array(char),array(char)))
.	O
labelBlock	struct(char,char,char,array(char),array(char),array(char))
;	O
}	O
if	O
(	O
!	O
show	int
||	O
newLabel	*(char)
[	O
0	int
]	O
)	O
{	O
dos_name_t	struct
dosname	*(struct)
;	O
const	O
char	O
*	O
shrtLabel	*(char)
;	O
doscp_t	struct
*	O
cp	*(struct)
;	O
if	O
(	O
!	O
newLabel	*(char)
[	O
0	int
]	O
)	O
shrtLabel	*(char)
=	O
"NO NAME    "	*(char)
;	O
else	O
shrtLabel	*(char)
=	O
newLabel	*(char)
;	O
cp	*(struct)
=	O
GET_DOSCONVERT	O
(	O
Fs	*(struct(*(struct),int,*(struct(*(struct`),int,*(struct`),*(struct`))),*(struct(*(struct`),int,*(struct`),*(struct`)))))
)	O
;	O
label_name_pc	(*(struct),*(char),int,*(int),*(struct))->(void)
(	O
cp	*(struct)
,	O
shrtLabel	*(char)
,	O
verbose	int
,	O
&	O
mangled	*(int)
,	O
&	O
dosname	*(struct)
)	O
;	O
if	O
(	O
have_boot	int
&&	O
boot	struct(array(char),array(char),array(char),char,array(char),char,array(char),array(char),char,array(char),array(char),array(char),array(char),array(char),union(struct(array(char),array(char),array(char),array(char),array(char),array(char),array(char),array(char),struct(char,char,char,array(char),array(char),array(char))),struct(struct(char,char,char,array(char),array(char),array(char)),char,char,char,char,char,char,array(char),array(char),array(char),array(char),array(char),array(char),array(char))))
.	O
boot	struct(array(char),array(char),array(char),char,array(char),char,array(char),array(char),char,array(char),array(char),array(char),array(char),array(char),union(struct(array(char),array(char),array(char),array(char),array(char),array(char),array(char),array(char),struct(char,char,char,array(char),array(char),array(char))),struct(struct(char,char,char,array(char),array(char),array(char)),char,char,char,char,char,char,array(char),array(char),array(char),array(char),array(char),array(char),array(char))))
.	O
descr	char
>=	O
0xf0	int
&&	O
has_BPB4	O
)	O
{	O
strncpy	(*(char),*(char),long)->(*(char))
(	O
labelBlock	struct(char,char,char,array(char),array(char),array(char))
->	O
label	array(char)
,	O
dosname	*(struct)
.	O
base	int
,	O
8	int
)	O
;	O
strncpy	(*(char),*(char),long)->(*(char))
(	O
labelBlock	struct(char,char,char,array(char),array(char),array(char))
->	O
label	array(char)
+	O
8	int
,	O
dosname	*(struct)
.	O
ext	array(char)
,	O
3	int
)	O
;	O
need_write_boot	int
=	O
1	int
;	O
}	O
}	O
if	O
(	O
(	O
set_serial	enum(int,int,int)
!=	O
SER_NONE	int
)	O
&	O
have_boot	int
)	O
{	O
if	O
(	O
have_boot	int
&&	O
boot	struct(array(char),array(char),array(char),char,array(char),char,array(char),array(char),char,array(char),array(char),array(char),array(char),array(char),union(struct(array(char),array(char),array(char),array(char),array(char),array(char),array(char),array(char),struct(char,char,char,array(char),array(char),array(char))),struct(struct(char,char,char,array(char),array(char),array(char)),char,char,char,char,char,char,array(char),array(char),array(char),array(char),array(char),array(char),array(char))))
.	O
boot	struct(array(char),array(char),array(char),char,array(char),char,array(char),array(char),char,array(char),array(char),array(char),array(char),array(char),union(struct(array(char),array(char),array(char),array(char),array(char),array(char),array(char),array(char),struct(char,char,char,array(char),array(char),array(char))),struct(struct(char,char,char,array(char),array(char),array(char)),char,char,char,char,char,char,array(char),array(char),array(char),array(char),array(char),array(char),array(char))))
.	O
descr	char
>=	O
0xf0	int
&&	O
has_BPB4	O
)	O
{	O
set_dword	(*(char),int)->(void)
(	O
labelBlock	struct(char,char,char,array(char),array(char),array(char))
->	O
serial	array(char)
,	O
serial	array(char)
)	O
;	O
need_write_boot	int
=	O
1	int
;	O
}	O
}	O
if	O
(	O
need_write_boot	int
)	O
{	O
force_write	(*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`)),int,*(struct(*`,int,*`,*`)),*(struct(*`,int,*`,*`)))),*(char),long,long)->(int)
(	O
Fs	*(struct(*(struct),int,*(struct(*(struct`),int,*(struct`),*(struct`))),*(struct(*(struct`),int,*(struct`),*(struct`)))))
,	O
(	O
char	O
*	O
)	O
&	O
boot	struct(array(char),array(char),array(char),char,array(char),char,array(char),array(char),char,array(char),array(char),array(char),array(char),array(char),union(struct(array(char),array(char),array(char),array(char),array(char),array(char),array(char),array(char),struct(char,char,char,array(char),array(char),array(char))),struct(struct(char,char,char,array(char),array(char),array(char)),char,char,char,char,char,char,array(char),array(char),array(char),array(char),array(char),array(char),array(char))))
,	O
0	int
,	O
sizeof	O
(	O
boot	struct(array(char),array(char),array(char),char,array(char),char,array(char),array(char),char,array(char),array(char),array(char),array(char),array(char),union(struct(array(char),array(char),array(char),array(char),array(char),array(char),array(char),array(char),struct(char,char,char,array(char),array(char),array(char))),struct(struct(char,char,char,array(char),array(char),array(char)),char,char,char,char,char,char,array(char),array(char),array(char),array(char),array(char),array(char),array(char))))
)	O
)	O
;	O
if	O
(	O
!	O
WORD_S	O
(	O
fatlen	array(char)
)	O
)	O
{	O
int	O
backupBoot	array(char)
=	O
WORD_S	O
(	O
ext	array(char)
.	O
fat32	struct(array(char),array(char),array(char),array(char),array(char),array(char),array(char),array(char),struct(char,char,char,array(char),array(char),array(char)))
.	O
backupBoot	array(char)
)	O
;	O
force_write	(*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`)),int,*(struct(*`,int,*`,*`)),*(struct(*`,int,*`,*`)))),*(char),long,long)->(int)
(	O
Fs	*(struct(*(struct),int,*(struct(*(struct`),int,*(struct`),*(struct`))),*(struct(*(struct`),int,*(struct`),*(struct`)))))
,	O
(	O
char	O
*	O
)	O
&	O
boot	struct(array(char),array(char),array(char),char,array(char),char,array(char),array(char),char,array(char),array(char),array(char),array(char),array(char),union(struct(array(char),array(char),array(char),array(char),array(char),array(char),array(char),array(char),struct(char,char,char,array(char),array(char),array(char))),struct(struct(char,char,char,array(char),array(char),array(char)),char,char,char,char,char,char,array(char),array(char),array(char),array(char),array(char),array(char),array(char))))
,	O
backupBoot	array(char)
*	O
WORD_S	O
(	O
secsiz	array(char)
)	O
,	O
sizeof	O
(	O
boot	struct(array(char),array(char),array(char),char,array(char),char,array(char),array(char),char,array(char),array(char),array(char),array(char),array(char),union(struct(array(char),array(char),array(char),array(char),array(char),array(char),array(char),array(char),struct(char,char,char,array(char),array(char),array(char))),struct(struct(char,char,char,array(char),array(char),array(char)),char,char,char,char,char,char,array(char),array(char),array(char),array(char),array(char),array(char),array(char))))
)	O
)	O
;	O
}	O
}	O
FREE	O
(	O
&	O
RootDir	*(struct(*(struct(*((*`,*`,long,long)->(int)),*((*`,*`,long,long)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`,*`,int,*`)->(int)),*((*`,*`,*`,*`,*`)->(int)),*((*`,long)->(int)),*((*`)->(*`)),*((*`)->(int)))),int,*(struct(*(struct`),int,*(struct`),*(struct`))),*(struct(*(struct`),int,*(struct`),*(struct`)))))
)	O
;	O
exit	(int)->(void)
(	O
result	int
)	O
;	O
}	O
