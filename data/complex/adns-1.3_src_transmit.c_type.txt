static	O
adns_status	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
mkquery_header	(*(struct(enum(int,int,int,int,int,int,int,int,int,int,int),*((*`,*`,*`,array(struct(int,int,*(void),*(void))))->(void)),*(void),int,struct(*(struct`),*(struct`)),struct(*(struct`),*(struct`)),struct(*(struct`),*(struct`)),struct(*(struct`),*(struct`)),*(struct(*`,enum(int,int,int,int),*`,*`,*`,struct`,struct`,struct`,int,int,*`,*`,*`,int,struct`,*`,*`,int,int,struct`,int,int,int,int,int,int,int,long,struct`,long,struct`)),int,int,int,struct(int,int,*(char)),struct(int,int,*(char)),int,int,int,int,int,int,enum(int,int,int,int),struct(long,long),struct(union(*`,*`),struct(array(long)),int,*(()->(void))),struct(array(long)),array(struct(int,short,short)),array(struct(struct(int))),array(struct(struct(int),struct(int))),*(*(char)),array(short))),*(struct(int,int,*(char))),*(int),int)->(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int))
(	O
adns_state	*(struct)
ads	*(struct)
,	O
vbuf	struct(int,int,*(char))
*	O
vb	*(struct(int,int,*(char)))
,	O
int	O
*	O
id_r	*(int)
,	O
int	O
qdlen	int
)	O
{	O
int	O
id	int
;	O
byte	char
*	O
rqp	*(char)
;	O
if	O
(	O
!	O
adns__vbuf_ensure	(*(struct(int,int,*(char))),int)->(int)
(	O
vb	*(struct(int,int,*(char)))
,	O
DNS_HDRSIZE	int
+	O
qdlen	int
+	O
4	int
)	O
)	O
return	O
adns_s_nomemory	int
;	O
vb	*(struct(int,int,*(char)))
->	O
used	int
=	O
0	int
;	O
MKQUERY_START	O
(	O
vb	*(struct(int,int,*(char)))
)	O
;	O
*	O
id_r	*(int)
=	O
id	int
=	O
(	O
ads	*(struct)
->	O
nextid	int
++	O
)	O
&	O
0x0ffff	int
;	O
MKQUERY_ADDW	O
(	O
id	int
)	O
;	O
MKQUERY_ADDB	O
(	O
0x01	int
)	O
;	O
MKQUERY_ADDB	O
(	O
0x00	int
)	O
;	O
MKQUERY_ADDW	O
(	O
1	int
)	O
;	O
MKQUERY_ADDW	O
(	O
0	int
)	O
;	O
MKQUERY_ADDW	O
(	O
0	int
)	O
;	O
MKQUERY_ADDW	O
(	O
0	int
)	O
;	O
MKQUERY_STOP	O
(	O
vb	*(struct(int,int,*(char)))
)	O
;	O
return	O
adns_s_ok	int
;	O
}	O
static	O
adns_status	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
mkquery_footer	(*(struct(int,int,*(char))),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int))->(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int))
(	O
vbuf	struct(int,int,*(char))
*	O
vb	*(struct(int,int,*(char)))
,	O
adns_rrtype	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
type	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
)	O
{	O
byte	char
*	O
rqp	*(char)
;	O
MKQUERY_START	O
(	O
vb	*(struct(int,int,*(char)))
)	O
;	O
MKQUERY_ADDW	O
(	O
type	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
&	O
adns_rrt_typemask	int
)	O
;	O
MKQUERY_ADDW	O
(	O
DNS_CLASS_IN	int
)	O
;	O
MKQUERY_STOP	O
(	O
vb	*(struct(int,int,*(char)))
)	O
;	O
assert	O
(	O
vb	*(struct(int,int,*(char)))
->	O
used	int
<=	O
vb	*(struct(int,int,*(char)))
->	O
avail	int
)	O
;	O
return	O
adns_s_ok	int
;	O
}	O
adns_status	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
adns__qdpl_normal	(*(struct),*(*(char)),*(char),int,array(char),*(int),enum(int,int,int,int,int,int,int,int,int,int,int),*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(char),int,*((*`,*`)->(void)),*((*`,*`)->(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int))),*((*`,int,int,*`)->(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int))),*((*`,*`,*`)->(int)),*((*`,*`,*`,int,array(char),*`,enum(int,int,int,int,int,int,int,int,int,int,int),*`)->(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int))),*((*`,*`,int,*`)->(void)))))->(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int))
(	O
adns_state	*(struct)
ads	*(struct)
,	O
const	O
char	O
*	O
*	O
p_io	*(*(char))
,	O
const	O
char	O
*	O
pe	*(char)
,	O
int	O
labelnum	int
,	O
char	O
label_r	array(char)
[	O
]	O
,	O
int	O
*	O
ll_io	*(int)
,	O
adns_queryflags	enum(int,int,int,int,int,int,int,int,int,int,int)
flags	enum(int,int,int,int,int,int,int,int,int,int,int)
,	O
const	O
typeinfo	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(char),int,*((*(struct),*(void))->(void)),*((*(struct(int,int,*(char))),*(void))->(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int))),*((*(struct(*(struct`),*(struct`),int,*(char),int,int,int,int,struct(long,long))),int,int,*(void))->(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int))),*((*(struct),*(void),*(void))->(int)),*((*(struct),*(*(char)),*(char),int,array(char),*(int),enum(int,int,int,int,int,int,int,int,int,int,int),*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(char),int,*((*`,*`)->(void)),*((*`,*`)->(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int))),*((*`,int,int,*`)->(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int))),*((*`,*`,*`)->(int)),*((*`,*`,*`,int,array(char),*`,enum(int,int,int,int,int,int,int,int,int,int,int),*`)->(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int))),*((*`,*`,int,*`)->(void)))))->(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int))),*((*(struct),*(void),int,*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(char),int,*((*`,*`)->(void)),*((*`,*`)->(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int))),*((*`,int,int,*`)->(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int))),*((*`,*`,*`)->(int)),*((*`,*`,*`,int,array(char),*`,enum(int,int,int,int,int,int,int,int,int,int,int),*`)->(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int))),*((*`,*`,int,*`)->(void)))))->(void)))
*	O
typei	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(char),int,*((*(struct`),*(void))->(void)),*((*(struct`),*(void))->(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int))),*((*(struct`),int,int,*(void))->(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int))),*((*(struct`),*(void),*(void))->(int))))
)	O
{	O
int	O
ll	int
,	O
c	int
;	O
const	O
char	O
*	O
p	*(void)
;	O
ll	int
=	O
0	int
;	O
p	*(void)
=	O
*	O
p_io	*(*(char))
;	O
while	O
(	O
p	*(void)
!=	O
pe	*(char)
&&	O
(	O
c	int
=	O
*	O
p	*(void)
++	O
)	O
!=	O
'.'	O
)	O
{	O
if	O
(	O
c	int
==	O
'\\'	O
)	O
{	O
if	O
(	O
!	O
(	O
flags	enum(int,int,int,int,int,int,int,int,int,int,int)
&	O
adns_qf_quoteok_query	int
)	O
)	O
return	O
adns_s_querydomaininvalid	int
;	O
if	O
(	O
ctype_digit	(int)->(int)
(	O
p	*(void)
[	O
0	int
]	O
)	O
)	O
{	O
if	O
(	O
p	*(void)
+	O
1	int
==	O
pe	*(char)
||	O
p	*(void)
+	O
2	int
==	O
pe	*(char)
)	O
return	O
adns_s_querydomaininvalid	int
;	O
if	O
(	O
ctype_digit	(int)->(int)
(	O
p	*(void)
[	O
1	int
]	O
)	O
&&	O
ctype_digit	(int)->(int)
(	O
p	*(void)
[	O
2	int
]	O
)	O
)	O
{	O
c	int
=	O
(	O
*	O
p	*(void)
++	O
-	O
'0'	O
)	O
*	O
100	int
;	O
c	int
+=	O
(	O
*	O
p	*(void)
++	O
-	O
'0'	O
)	O
*	O
10	int
;	O
c	int
+=	O
(	O
*	O
p	*(void)
++	O
-	O
'0'	O
)	O
;	O
if	O
(	O
c	int
>=	O
256	int
)	O
return	O
adns_s_querydomaininvalid	int
;	O
}	O
else	O
{	O
return	O
adns_s_querydomaininvalid	int
;	O
}	O
}	O
else	O
if	O
(	O
!	O
(	O
c	int
=	O
*	O
p	*(void)
++	O
)	O
)	O
{	O
return	O
adns_s_querydomaininvalid	int
;	O
}	O
}	O
if	O
(	O
!	O
(	O
flags	enum(int,int,int,int,int,int,int,int,int,int,int)
&	O
adns_qf_quoteok_query	int
)	O
)	O
{	O
if	O
(	O
c	int
==	O
'-'	O
)	O
{	O
if	O
(	O
!	O
ll	int
)	O
return	O
adns_s_querydomaininvalid	int
;	O
}	O
else	O
if	O
(	O
!	O
ctype_alpha	(int)->(int)
(	O
c	int
)	O
&&	O
!	O
ctype_digit	(int)->(int)
(	O
c	int
)	O
)	O
{	O
return	O
adns_s_querydomaininvalid	int
;	O
}	O
}	O
if	O
(	O
ll	int
==	O
*	O
ll_io	*(int)
)	O
return	O
adns_s_querydomaininvalid	int
;	O
label_r	array(char)
[	O
ll	int
++	O
]	O
=	O
c	int
;	O
}	O
*	O
p_io	*(*(char))
=	O
p	*(void)
;	O
*	O
ll_io	*(int)
=	O
ll	int
;	O
return	O
adns_s_ok	int
;	O
}	O
adns_status	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
adns__mkquery	(*(struct(enum(int,int,int,int,int,int,int,int,int,int,int),*((*`,*`,*`,array(struct(int,int,*(void),*(void))))->(void)),*(void),int,struct(*(struct`),*(struct`)),struct(*(struct`),*(struct`)),struct(*(struct`),*(struct`)),struct(*(struct`),*(struct`)),*(struct(*`,enum(int,int,int,int),*`,*`,*`,struct`,struct`,struct`,int,int,*`,*`,*`,int,struct`,*`,*`,int,int,struct`,int,int,int,int,int,int,int,long,struct`,long,struct`)),int,int,int,struct(int,int,*(char)),struct(int,int,*(char)),int,int,int,int,int,int,enum(int,int,int,int),struct(long,long),struct(union(*`,*`),struct(array(long)),int,*(()->(void))),struct(array(long)),array(struct(int,short,short)),array(struct(struct(int))),array(struct(struct(int),struct(int))),*(*(char)),array(short))),*(struct(int,int,*(char))),*(int),*(char),int,*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(char),int,*((*`,*`)->(void)),*((*`,*`)->(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int))),*((*`,int,int,*`)->(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int))),*((*`,*`,*`)->(int)),*((*`,*`,*`,int,array(char),*`,enum(int,int,int,int,int,int,int,int,int,int,int),*`)->(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int))),*((*`,*`,int,*`)->(void)))),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int))->(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int))
(	O
adns_state	*(struct)
ads	*(struct)
,	O
vbuf	struct(int,int,*(char))
*	O
vb	*(struct(int,int,*(char)))
,	O
int	O
*	O
id_r	*(int)
,	O
const	O
char	O
*	O
owner	*(char)
,	O
int	O
ol	int
,	O
const	O
typeinfo	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(char),int,*((*(struct),*(void))->(void)),*((*(struct(int,int,*(char))),*(void))->(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int))),*((*(struct(*(struct`),*(struct`),int,*(char),int,int,int,int,struct(long,long))),int,int,*(void))->(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int))),*((*(struct),*(void),*(void))->(int)),*((*(struct),*(*(char)),*(char),int,array(char),*(int),enum(int,int,int,int,int,int,int,int,int,int,int),*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(char),int,*((*`,*`)->(void)),*((*`,*`)->(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int))),*((*`,int,int,*`)->(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int))),*((*`,*`,*`)->(int)),*((*`,*`,*`,int,array(char),*`,enum(int,int,int,int,int,int,int,int,int,int,int),*`)->(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int))),*((*`,*`,int,*`)->(void)))))->(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int))),*((*(struct),*(void),int,*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(char),int,*((*`,*`)->(void)),*((*`,*`)->(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int))),*((*`,int,int,*`)->(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int))),*((*`,*`,*`)->(int)),*((*`,*`,*`,int,array(char),*`,enum(int,int,int,int,int,int,int,int,int,int,int),*`)->(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int))),*((*`,*`,int,*`)->(void)))))->(void)))
*	O
typei	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(char),int,*((*(struct`),*(void))->(void)),*((*(struct`),*(void))->(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int))),*((*(struct`),int,int,*(void))->(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int))),*((*(struct`),*(void),*(void))->(int))))
,	O
adns_rrtype	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
type	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
,	O
adns_queryflags	enum(int,int,int,int,int,int,int,int,int,int,int)
flags	enum(int,int,int,int,int,int,int,int,int,int,int)
)	O
{	O
int	O
labelnum	int
,	O
ll	int
,	O
nbytes	int
;	O
byte	char
label	array(char)
[	O
255	int
]	O
;	O
byte	char
*	O
rqp	*(char)
;	O
const	O
char	O
*	O
p	*(void)
,	O
*	O
pe	*(char)
;	O
adns_status	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
st	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
;	O
st	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
=	O
mkquery_header	(*(struct(enum(int,int,int,int,int,int,int,int,int,int,int),*((*`,*`,*`,array(struct(int,int,*(void),*(void))))->(void)),*(void),int,struct(*(struct`),*(struct`)),struct(*(struct`),*(struct`)),struct(*(struct`),*(struct`)),struct(*(struct`),*(struct`)),*(struct(*`,enum(int,int,int,int),*`,*`,*`,struct`,struct`,struct`,int,int,*`,*`,*`,int,struct`,*`,*`,int,int,struct`,int,int,int,int,int,int,int,long,struct`,long,struct`)),int,int,int,struct(int,int,*(char)),struct(int,int,*(char)),int,int,int,int,int,int,enum(int,int,int,int),struct(long,long),struct(union(*`,*`),struct(array(long)),int,*(()->(void))),struct(array(long)),array(struct(int,short,short)),array(struct(struct(int))),array(struct(struct(int),struct(int))),*(*(char)),array(short))),*(struct(int,int,*(char))),*(int),int)->(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int))
(	O
ads	*(struct)
,	O
vb	*(struct(int,int,*(char)))
,	O
id_r	*(int)
,	O
ol	int
+	O
2	int
)	O
;	O
if	O
(	O
st	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
)	O
return	O
st	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
;	O
MKQUERY_START	O
(	O
vb	*(struct(int,int,*(char)))
)	O
;	O
p	*(void)
=	O
owner	*(char)
;	O
pe	*(char)
=	O
owner	*(char)
+	O
ol	int
;	O
nbytes	int
=	O
0	int
;	O
labelnum	int
=	O
0	int
;	O
while	O
(	O
p	*(void)
!=	O
pe	*(char)
)	O
{	O
ll	int
=	O
sizeof	O
(	O
label	array(char)
)	O
;	O
st	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
=	O
typei	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(char),int,*((*(struct`),*(void))->(void)),*((*(struct`),*(void))->(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int))),*((*(struct`),int,int,*(void))->(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int))),*((*(struct`),*(void),*(void))->(int))))
->	O
qdparselabel	*((*(struct),*(*(char)),*(char),int,array(char),*(int),enum(int,int,int,int,int,int,int,int,int,int,int),*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(char),int,*((*`,*`)->(void)),*((*`,*`)->(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int))),*((*`,int,int,*`)->(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int))),*((*`,*`,*`)->(int)),*((*`,*`,*`,int,array(char),*`,enum(int,int,int,int,int,int,int,int,int,int,int),*`)->(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int))),*((*`,*`,int,*`)->(void)))))->(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)))
(	O
ads	*(struct)
,	O
&	O
p	*(void)
,	O
pe	*(char)
,	O
labelnum	int
++	O
,	O
label	array(char)
,	O
&	O
ll	int
,	O
flags	enum(int,int,int,int,int,int,int,int,int,int,int)
,	O
typei	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(char),int,*((*(struct`),*(void))->(void)),*((*(struct`),*(void))->(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int))),*((*(struct`),int,int,*(void))->(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int))),*((*(struct`),*(void),*(void))->(int))))
)	O
;	O
if	O
(	O
st	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
)	O
return	O
st	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
;	O
if	O
(	O
!	O
ll	int
)	O
return	O
adns_s_querydomaininvalid	int
;	O
if	O
(	O
ll	int
>	O
DNS_MAXLABEL	int
)	O
return	O
adns_s_querydomaintoolong	int
;	O
nbytes	int
+=	O
ll	int
+	O
1	int
;	O
if	O
(	O
nbytes	int
>=	O
DNS_MAXDOMAIN	int
)	O
return	O
adns_s_querydomaintoolong	int
;	O
MKQUERY_ADDB	O
(	O
ll	int
)	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
rqp	*(char)
,	O
label	array(char)
,	O
ll	int
)	O
;	O
rqp	*(char)
+=	O
ll	int
;	O
}	O
MKQUERY_ADDB	O
(	O
0	int
)	O
;	O
MKQUERY_STOP	O
(	O
vb	*(struct(int,int,*(char)))
)	O
;	O
st	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
=	O
mkquery_footer	(*(struct(int,int,*(char))),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int))->(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int))
(	O
vb	*(struct(int,int,*(char)))
,	O
type	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
)	O
;	O
return	O
adns_s_ok	int
;	O
}	O
adns_status	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
adns__mkquery_frdgram	(*(struct(enum(int,int,int,int,int,int,int,int,int,int,int),*((*`,*`,*`,array(struct(int,int,*(void),*(void))))->(void)),*(void),int,struct(*(struct`),*(struct`)),struct(*(struct`),*(struct`)),struct(*(struct`),*(struct`)),struct(*(struct`),*(struct`)),*(struct(*`,enum(int,int,int,int),*`,*`,*`,struct`,struct`,struct`,int,int,*`,*`,*`,int,struct`,*`,*`,int,int,struct`,int,int,int,int,int,int,int,long,struct`,long,struct`)),int,int,int,struct(int,int,*(char)),struct(int,int,*(char)),int,int,int,int,int,int,enum(int,int,int,int),struct(long,long),struct(union(*`,*`),struct(array(long)),int,*(()->(void))),struct(array(long)),array(struct(int,short,short)),array(struct(struct(int))),array(struct(struct(int),struct(int))),*(*(char)),array(short))),*(struct(int,int,*(char))),*(int),*(char),int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int))->(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int))
(	O
adns_state	*(struct)
ads	*(struct)
,	O
vbuf	struct(int,int,*(char))
*	O
vb	*(struct(int,int,*(char)))
,	O
int	O
*	O
id_r	*(int)
,	O
const	O
byte	char
*	O
qd_dgram	*(char)
,	O
int	O
qd_dglen	int
,	O
int	O
qd_begin	int
,	O
adns_rrtype	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
type	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
,	O
adns_queryflags	enum(int,int,int,int,int,int,int,int,int,int,int)
flags	enum(int,int,int,int,int,int,int,int,int,int,int)
)	O
{	O
byte	char
*	O
rqp	*(char)
;	O
findlabel_state	struct(*(struct(enum(int,int,int,int,int,int,int,int,int,int,int),*((*`,*`,*`,array(struct(int,int,*(void),*(void))))->(void)),*(void),int,struct(*(struct`),*(struct`)),struct(*(struct`),*(struct`)),struct(*(struct`),*(struct`)),struct(*(struct`),*(struct`)),*(struct(*`,enum(int,int,int,int),*`,*`,*`,struct`,struct`,struct`,int,int,*`,*`,*`,int,struct`,*`,*`,int,int,struct`,int,int,int,int,int,int,int,long,struct`,long,struct`)),int,int,int,struct(int,int,*(char)),struct(int,int,*(char)),int,int,int,int,int,int,enum(int,int,int,int),struct(long,long),struct(union(*`,*`),struct(array(long)),int,*(()->(void))),struct(array(long)),array(struct(int,short,short)),array(struct(struct(int))),array(struct(struct(int),struct(int))),*(*(char)),array(short))),*(struct(*(struct(enum(int,int,int,int,int,int,int,int,int,int,int),*`,*`,int,struct`,struct`,struct`,struct`,*`,int,int,int,struct`,struct`,int,int,int,int,int,int,enum(int,int,int,int),struct`,struct`,struct`,array(struct(int,short,short)),array(struct(struct(int))),array(struct(struct(int),struct(int))),*`,array(short))),enum(int,int,int,int),*(struct(*`,enum(int,int,int,int),*`,*`,*`,struct`,struct`,struct`,int,int,*`,*`,*`,int,struct`,*`,*`,int,int,struct`,int,int,int,int,int,int,int,long,struct`,long,struct`)),*(struct(*`,enum(int,int,int,int),*`,*`,*`,struct`,struct`,struct`,int,int,*`,*`,*`,int,struct`,*`,*`,int,int,struct`,int,int,int,int,int,int,int,long,struct`,long,struct`)),*(struct(*`,enum(int,int,int,int),*`,*`,*`,struct`,struct`,struct`,int,int,*`,*`,*`,int,struct`,*`,*`,int,int,struct`,int,int,int,int,int,int,int,long,struct`,long,struct`)),struct(*(struct`),*(struct`)),struct(*(struct`),*(struct`)),struct(*(struct`),*(struct`)),int,int,*(void),*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,int,*`,*`,*`,*`,*`,*`)),*(char),int,struct(int,int,*(char)),*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),long,int,int,union`)),*(char),int,int,struct(int,int,*(char)),int,int,int,int,int,int,int,long,struct(long,long),long,struct(*(void),*((*`,*`)->(void)),union(struct`,*`)))),int,*(char),int,int,int,int,*(int))
fls	*(struct(*(struct(enum(int,int,int,int,int,int,int,int,int,int,int),*((*`,*`,*`,array(struct(int,int,*(void),*(void))))->(void)),*(void),int,struct(*`,*`),struct(*`,*`),struct(*`,*`),struct(*`,*`),*(struct`),int,int,int,struct(int,int,*`),struct(int,int,*`),int,int,int,int,int,int,enum(int,int,int,int),struct(long,long),struct(union`,struct`,int,*`),struct(array(long)),array(struct(int,short,short)),array(struct(struct(int))),array(struct(struct(int),struct(int))),*(*`),array(short))),*(struct(*(struct`),enum(int,int,int,int),*(struct`),*(struct`),*(struct`),struct(*`,*`),struct(*`,*`),struct(*`,*`),int,int,*(void),*(struct`),*(char),int,struct(int,int,*`),*(struct`),*(char),int,int,struct(int,int,*`),int,int,int,int,int,int,int,long,struct(long,long),long,struct(*`,*`,union`))),int,*(char),int,int,int,int,*(int)))
;	O
int	O
lablen	int
,	O
labstart	int
;	O
adns_status	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
st	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
;	O
st	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
=	O
mkquery_header	(*(struct(enum(int,int,int,int,int,int,int,int,int,int,int),*((*`,*`,*`,array(struct(int,int,*(void),*(void))))->(void)),*(void),int,struct(*(struct`),*(struct`)),struct(*(struct`),*(struct`)),struct(*(struct`),*(struct`)),struct(*(struct`),*(struct`)),*(struct(*`,enum(int,int,int,int),*`,*`,*`,struct`,struct`,struct`,int,int,*`,*`,*`,int,struct`,*`,*`,int,int,struct`,int,int,int,int,int,int,int,long,struct`,long,struct`)),int,int,int,struct(int,int,*(char)),struct(int,int,*(char)),int,int,int,int,int,int,enum(int,int,int,int),struct(long,long),struct(union(*`,*`),struct(array(long)),int,*(()->(void))),struct(array(long)),array(struct(int,short,short)),array(struct(struct(int))),array(struct(struct(int),struct(int))),*(*(char)),array(short))),*(struct(int,int,*(char))),*(int),int)->(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int))
(	O
ads	*(struct)
,	O
vb	*(struct(int,int,*(char)))
,	O
id_r	*(int)
,	O
qd_dglen	int
)	O
;	O
if	O
(	O
st	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
)	O
return	O
st	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
;	O
MKQUERY_START	O
(	O
vb	*(struct(int,int,*(char)))
)	O
;	O
adns__findlabel_start	(*(struct(*(struct(enum(int,int,int,int,int,int,int,int,int,int,int),*`,*`,int,struct`,struct`,struct`,struct`,*`,int,int,int,struct`,struct`,int,int,int,int,int,int,enum(int,int,int,int),struct`,struct`,struct`,array(struct(int,short,short)),array(struct(struct(int))),array(struct(struct(int),struct(int))),*`,array(short))),*(struct(*`,enum(int,int,int,int),*`,*`,*`,struct`,struct`,struct`,int,int,*`,*`,*`,int,struct`,*`,*`,int,int,struct`,int,int,int,int,int,int,int,long,struct`,long,struct`)),int,*(char),int,int,int,int,*(int))),*(struct(enum(int,int,int,int,int,int,int,int,int,int,int),*((*`,*`,*`,array(struct(int,int,*(void),*(void))))->(void)),*(void),int,struct(*(struct`),*(struct`)),struct(*(struct`),*(struct`)),struct(*(struct`),*(struct`)),struct(*(struct`),*(struct`)),*(struct(*`,enum(int,int,int,int),*`,*`,*`,struct`,struct`,struct`,int,int,*`,*`,*`,int,struct`,*`,*`,int,int,struct`,int,int,int,int,int,int,int,long,struct`,long,struct`)),int,int,int,struct(int,int,*(char)),struct(int,int,*(char)),int,int,int,int,int,int,enum(int,int,int,int),struct(long,long),struct(union(*`,*`),struct(array(long)),int,*(()->(void))),struct(array(long)),array(struct(int,short,short)),array(struct(struct(int))),array(struct(struct(int),struct(int))),*(*(char)),array(short))),int,*(struct(*(struct(enum(int,int,int,int,int,int,int,int,int,int,int),*`,*`,int,struct`,struct`,struct`,struct`,*`,int,int,int,struct`,struct`,int,int,int,int,int,int,enum(int,int,int,int),struct`,struct`,struct`,array(struct(int,short,short)),array(struct(struct(int))),array(struct(struct(int),struct(int))),*`,array(short))),enum(int,int,int,int),*(struct(*`,enum(int,int,int,int),*`,*`,*`,struct`,struct`,struct`,int,int,*`,*`,*`,int,struct`,*`,*`,int,int,struct`,int,int,int,int,int,int,int,long,struct`,long,struct`)),*(struct(*`,enum(int,int,int,int),*`,*`,*`,struct`,struct`,struct`,int,int,*`,*`,*`,int,struct`,*`,*`,int,int,struct`,int,int,int,int,int,int,int,long,struct`,long,struct`)),*(struct(*`,enum(int,int,int,int),*`,*`,*`,struct`,struct`,struct`,int,int,*`,*`,*`,int,struct`,*`,*`,int,int,struct`,int,int,int,int,int,int,int,long,struct`,long,struct`)),struct(*(struct`),*(struct`)),struct(*(struct`),*(struct`)),struct(*(struct`),*(struct`)),int,int,*(void),*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,int,*`,*`,*`,*`,*`,*`)),*(char),int,struct(int,int,*(char)),*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),long,int,int,union`)),*(char),int,int,struct(int,int,*(char)),int,int,int,int,int,int,int,long,struct(long,long),long,struct(*(void),*((*`,*`)->(void)),union(struct`,*`)))),*(char),int,int,int,*(int))->(void)
(	O
&	O
fls	*(struct(*(struct(enum(int,int,int,int,int,int,int,int,int,int,int),*((*`,*`,*`,array(struct(int,int,*(void),*(void))))->(void)),*(void),int,struct(*`,*`),struct(*`,*`),struct(*`,*`),struct(*`,*`),*(struct`),int,int,int,struct(int,int,*`),struct(int,int,*`),int,int,int,int,int,int,enum(int,int,int,int),struct(long,long),struct(union`,struct`,int,*`),struct(array(long)),array(struct(int,short,short)),array(struct(struct(int))),array(struct(struct(int),struct(int))),*(*`),array(short))),*(struct(*(struct`),enum(int,int,int,int),*(struct`),*(struct`),*(struct`),struct(*`,*`),struct(*`,*`),struct(*`,*`),int,int,*(void),*(struct`),*(char),int,struct(int,int,*`),*(struct`),*(char),int,int,struct(int,int,*`),int,int,int,int,int,int,int,long,struct(long,long),long,struct(*`,*`,union`))),int,*(char),int,int,int,int,*(int)))
,	O
ads	*(struct)
,	O
-	O
1	int
,	O
0	int
,	O
qd_dgram	*(char)
,	O
qd_dglen	int
,	O
qd_dglen	int
,	O
qd_begin	int
,	O
0	int
)	O
;	O
for	O
(	O
;	O
;	O
)	O
{	O
st	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
=	O
adns__findlabel_next	(*(struct(*(struct(enum(int,int,int,int,int,int,int,int,int,int,int),*`,*`,int,struct`,struct`,struct`,struct`,*`,int,int,int,struct`,struct`,int,int,int,int,int,int,enum(int,int,int,int),struct`,struct`,struct`,array(struct(int,short,short)),array(struct(struct(int))),array(struct(struct(int),struct(int))),*`,array(short))),*(struct(*`,enum(int,int,int,int),*`,*`,*`,struct`,struct`,struct`,int,int,*`,*`,*`,int,struct`,*`,*`,int,int,struct`,int,int,int,int,int,int,int,long,struct`,long,struct`)),int,*(char),int,int,int,int,*(int))),*(int),*(int))->(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int))
(	O
&	O
fls	*(struct(*(struct(enum(int,int,int,int,int,int,int,int,int,int,int),*((*`,*`,*`,array(struct(int,int,*(void),*(void))))->(void)),*(void),int,struct(*`,*`),struct(*`,*`),struct(*`,*`),struct(*`,*`),*(struct`),int,int,int,struct(int,int,*`),struct(int,int,*`),int,int,int,int,int,int,enum(int,int,int,int),struct(long,long),struct(union`,struct`,int,*`),struct(array(long)),array(struct(int,short,short)),array(struct(struct(int))),array(struct(struct(int),struct(int))),*(*`),array(short))),*(struct(*(struct`),enum(int,int,int,int),*(struct`),*(struct`),*(struct`),struct(*`,*`),struct(*`,*`),struct(*`,*`),int,int,*(void),*(struct`),*(char),int,struct(int,int,*`),*(struct`),*(char),int,int,struct(int,int,*`),int,int,int,int,int,int,int,long,struct(long,long),long,struct(*`,*`,union`))),int,*(char),int,int,int,int,*(int)))
,	O
&	O
lablen	int
,	O
&	O
labstart	int
)	O
;	O
assert	O
(	O
!	O
st	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
)	O
;	O
if	O
(	O
!	O
lablen	int
)	O
break	O
;	O
assert	O
(	O
lablen	int
<	O
255	int
)	O
;	O
MKQUERY_ADDB	O
(	O
lablen	int
)	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
rqp	*(char)
,	O
qd_dgram	*(char)
+	O
labstart	int
,	O
lablen	int
)	O
;	O
rqp	*(char)
+=	O
lablen	int
;	O
}	O
MKQUERY_ADDB	O
(	O
0	int
)	O
;	O
MKQUERY_STOP	O
(	O
vb	*(struct(int,int,*(char)))
)	O
;	O
st	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
=	O
mkquery_footer	(*(struct(int,int,*(char))),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int))->(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int))
(	O
vb	*(struct(int,int,*(char)))
,	O
type	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
)	O
;	O
return	O
adns_s_ok	int
;	O
}	O
void	O
adns__querysend_tcp	(*(struct(*(struct(enum(int,int,int,int,int,int,int,int,int,int,int),*`,*`,int,struct`,struct`,struct`,struct`,*`,int,int,int,struct`,struct`,int,int,int,int,int,int,enum(int,int,int,int),struct`,struct`,struct`,array(struct(int,short,short)),array(struct(struct(int))),array(struct(struct(int),struct(int))),*`,array(short))),enum(int,int,int,int),*(struct(*`,enum(int,int,int,int),*`,*`,*`,struct`,struct`,struct`,int,int,*`,*`,*`,int,struct`,*`,*`,int,int,struct`,int,int,int,int,int,int,int,long,struct`,long,struct`)),*(struct(*`,enum(int,int,int,int),*`,*`,*`,struct`,struct`,struct`,int,int,*`,*`,*`,int,struct`,*`,*`,int,int,struct`,int,int,int,int,int,int,int,long,struct`,long,struct`)),*(struct(*`,enum(int,int,int,int),*`,*`,*`,struct`,struct`,struct`,int,int,*`,*`,*`,int,struct`,*`,*`,int,int,struct`,int,int,int,int,int,int,int,long,struct`,long,struct`)),struct(*(struct`),*(struct`)),struct(*(struct`),*(struct`)),struct(*(struct`),*(struct`)),int,int,*(void),*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,int,*`,*`,*`,*`,*`,*`)),*(char),int,struct(int,int,*(char)),*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),long,int,int,union`)),*(char),int,int,struct(int,int,*(char)),int,int,int,int,int,int,int,long,struct(long,long),long,struct(*(void),*((*`,*`)->(void)),union(struct`,*`)))),struct(long,long))->(void)
(	O
adns_query	*(struct)
qu	*(struct)
,	O
struct	O
timeval	struct(long,long)
now	*(struct(long,long))
)	O
{	O
byte	char
length	array(char)
[	O
2	int
]	O
;	O
struct	O
iovec	struct(*(void),long)
iov	array(struct(*(void),long))
[	O
2	int
]	O
;	O
int	O
wr	int
,	O
r	int
;	O
adns_state	*(struct)
ads	*(struct)
;	O
if	O
(	O
qu	*(struct)
->	O
ads	*(struct)
->	O
tcpstate	enum(int,int,int,int)
!=	O
server_ok	int
)	O
return	O
;	O
assert	O
(	O
qu	*(struct)
->	O
state	*(int)
==	O
query_tcpw	int
)	O
;	O
length	array(char)
[	O
0	int
]	O
=	O
(	O
qu	*(struct)
->	O
query_dglen	int
&	O
0x0ff00U	int
)	O
>>	O
8	int
;	O
length	array(char)
[	O
1	int
]	O
=	O
(	O
qu	*(struct)
->	O
query_dglen	int
&	O
0x0ff	int
)	O
;	O
ads	*(struct)
=	O
qu	*(struct)
->	O
ads	*(struct)
;	O
if	O
(	O
!	O
adns__vbuf_ensure	(*(struct(int,int,*(char))),int)->(int)
(	O
&	O
ads	*(struct)
->	O
tcpsend	struct(int,int,*(char))
,	O
ads	*(struct)
->	O
tcpsend	struct(int,int,*(char))
.	O
used	int
+	O
qu	*(struct)
->	O
query_dglen	int
+	O
2	int
)	O
)	O
return	O
;	O
qu	*(struct)
->	O
retries	int
++	O
;	O
ads	*(struct)
->	O
tcptimeout	struct(long,long)
.	O
tv_sec	long
=	O
ads	*(struct)
->	O
tcptimeout	struct(long,long)
.	O
tv_usec	long
=	O
0	int
;	O
if	O
(	O
ads	*(struct)
->	O
tcpsend	struct(int,int,*(char))
.	O
used	int
)	O
{	O
wr	int
=	O
0	int
;	O
}	O
else	O
{	O
iov	array(struct(*(void),long))
[	O
0	int
]	O
.	O
iov_base	*(void)
=	O
length	array(char)
;	O
iov	array(struct(*(void),long))
[	O
0	int
]	O
.	O
iov_len	long
=	O
2	int
;	O
iov	array(struct(*(void),long))
[	O
1	int
]	O
.	O
iov_base	*(void)
=	O
qu	*(struct)
->	O
query_dgram	*(char)
;	O
iov	array(struct(*(void),long))
[	O
1	int
]	O
.	O
iov_len	long
=	O
qu	*(struct)
->	O
query_dglen	int
;	O
adns__sigpipe_protect	(*(struct(enum(int,int,int,int,int,int,int,int,int,int,int),*((*`,*`,*`,array(struct(int,int,*(void),*(void))))->(void)),*(void),int,struct(*(struct`),*(struct`)),struct(*(struct`),*(struct`)),struct(*(struct`),*(struct`)),struct(*(struct`),*(struct`)),*(struct(*`,enum(int,int,int,int),*`,*`,*`,struct`,struct`,struct`,int,int,*`,*`,*`,int,struct`,*`,*`,int,int,struct`,int,int,int,int,int,int,int,long,struct`,long,struct`)),int,int,int,struct(int,int,*(char)),struct(int,int,*(char)),int,int,int,int,int,int,enum(int,int,int,int),struct(long,long),struct(union(*`,*`),struct(array(long)),int,*(()->(void))),struct(array(long)),array(struct(int,short,short)),array(struct(struct(int))),array(struct(struct(int),struct(int))),*(*(char)),array(short))))->(void)
(	O
qu	*(struct)
->	O
ads	*(struct)
)	O
;	O
wr	int
=	O
writev	(int,*(struct(*(void),long)),int)->(long)
(	O
qu	*(struct)
->	O
ads	*(struct)
->	O
tcpsocket	int
,	O
iov	array(struct(*(void),long))
,	O
2	int
)	O
;	O
adns__sigpipe_unprotect	(*(struct(enum(int,int,int,int,int,int,int,int,int,int,int),*((*`,*`,*`,array(struct(int,int,*(void),*(void))))->(void)),*(void),int,struct(*(struct`),*(struct`)),struct(*(struct`),*(struct`)),struct(*(struct`),*(struct`)),struct(*(struct`),*(struct`)),*(struct(*`,enum(int,int,int,int),*`,*`,*`,struct`,struct`,struct`,int,int,*`,*`,*`,int,struct`,*`,*`,int,int,struct`,int,int,int,int,int,int,int,long,struct`,long,struct`)),int,int,int,struct(int,int,*(char)),struct(int,int,*(char)),int,int,int,int,int,int,enum(int,int,int,int),struct(long,long),struct(union(*`,*`),struct(array(long)),int,*(()->(void))),struct(array(long)),array(struct(int,short,short)),array(struct(struct(int))),array(struct(struct(int),struct(int))),*(*(char)),array(short))))->(void)
(	O
qu	*(struct)
->	O
ads	*(struct)
)	O
;	O
if	O
(	O
wr	int
<	O
0	int
)	O
{	O
if	O
(	O
!	O
(	O
errno	O
==	O
EAGAIN	int
||	O
errno	O
==	O
EINTR	int
||	O
errno	O
==	O
ENOSPC	int
||	O
errno	O
==	O
ENOBUFS	int
||	O
errno	O
==	O
ENOMEM	int
)	O
)	O
{	O
adns__tcp_broken	(*(struct(enum(int,int,int,int,int,int,int,int,int,int,int),*((*`,*`,*`,array(struct(int,int,*(void),*(void))))->(void)),*(void),int,struct(*(struct`),*(struct`)),struct(*(struct`),*(struct`)),struct(*(struct`),*(struct`)),struct(*(struct`),*(struct`)),*(struct(*`,enum(int,int,int,int),*`,*`,*`,struct`,struct`,struct`,int,int,*`,*`,*`,int,struct`,*`,*`,int,int,struct`,int,int,int,int,int,int,int,long,struct`,long,struct`)),int,int,int,struct(int,int,*(char)),struct(int,int,*(char)),int,int,int,int,int,int,enum(int,int,int,int),struct(long,long),struct(union(*`,*`),struct(array(long)),int,*(()->(void))),struct(array(long)),array(struct(int,short,short)),array(struct(struct(int))),array(struct(struct(int),struct(int))),*(*(char)),array(short))),*(char),*(char))->(void)
(	O
ads	*(struct)
,	O
"write"	*(char)
,	O
strerror	(int)->(*(char))
(	O
errno	O
)	O
)	O
;	O
return	O
;	O
}	O
wr	int
=	O
0	int
;	O
}	O
}	O
if	O
(	O
wr	int
<	O
2	int
)	O
{	O
r	int
=	O
adns__vbuf_append	(*(struct(int,int,*(char))),*(char),int)->(int)
(	O
&	O
ads	*(struct)
->	O
tcpsend	struct(int,int,*(char))
,	O
length	array(char)
,	O
2	int
-	O
wr	int
)	O
;	O
assert	O
(	O
r	int
)	O
;	O
wr	int
=	O
0	int
;	O
}	O
else	O
{	O
wr	int
-=	O
2	int
;	O
}	O
if	O
(	O
wr	int
<	O
qu	*(struct)
->	O
query_dglen	int
)	O
{	O
r	int
=	O
adns__vbuf_append	(*(struct(int,int,*(char))),*(char),int)->(int)
(	O
&	O
ads	*(struct)
->	O
tcpsend	struct(int,int,*(char))
,	O
qu	*(struct)
->	O
query_dgram	*(char)
+	O
wr	int
,	O
qu	*(struct)
->	O
query_dglen	int
-	O
wr	int
)	O
;	O
assert	O
(	O
r	int
)	O
;	O
}	O
}	O
static	O
void	O
query_usetcp	(*(struct(*(struct(enum(int,int,int,int,int,int,int,int,int,int,int),*`,*`,int,struct`,struct`,struct`,struct`,*`,int,int,int,struct`,struct`,int,int,int,int,int,int,enum(int,int,int,int),struct`,struct`,struct`,array(struct(int,short,short)),array(struct(struct(int))),array(struct(struct(int),struct(int))),*`,array(short))),enum(int,int,int,int),*(struct(*`,enum(int,int,int,int),*`,*`,*`,struct`,struct`,struct`,int,int,*`,*`,*`,int,struct`,*`,*`,int,int,struct`,int,int,int,int,int,int,int,long,struct`,long,struct`)),*(struct(*`,enum(int,int,int,int),*`,*`,*`,struct`,struct`,struct`,int,int,*`,*`,*`,int,struct`,*`,*`,int,int,struct`,int,int,int,int,int,int,int,long,struct`,long,struct`)),*(struct(*`,enum(int,int,int,int),*`,*`,*`,struct`,struct`,struct`,int,int,*`,*`,*`,int,struct`,*`,*`,int,int,struct`,int,int,int,int,int,int,int,long,struct`,long,struct`)),struct(*(struct`),*(struct`)),struct(*(struct`),*(struct`)),struct(*(struct`),*(struct`)),int,int,*(void),*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,int,*`,*`,*`,*`,*`,*`)),*(char),int,struct(int,int,*(char)),*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),long,int,int,union`)),*(char),int,int,struct(int,int,*(char)),int,int,int,int,int,int,int,long,struct(long,long),long,struct(*(void),*((*`,*`)->(void)),union(struct`,*`)))),struct(long,long))->(void)
(	O
adns_query	*(struct)
qu	*(struct)
,	O
struct	O
timeval	struct(long,long)
now	*(struct(long,long))
)	O
{	O
qu	*(struct)
->	O
state	*(int)
=	O
query_tcpw	int
;	O
qu	*(struct)
->	O
timeout	struct(long,long)
=	O
now	*(struct(long,long))
;	O
timevaladd	(*(struct(long,long)),long)->(void)
(	O
&	O
qu	*(struct)
->	O
timeout	struct(long,long)
,	O
TCPWAITMS	int
)	O
;	O
LIST_LINK_TAIL	O
(	O
qu	*(struct)
->	O
ads	*(struct)
->	O
tcpw	struct(*(struct(*(struct(enum(int,int,int,int,int,int,int,int,int,int,int),*`,*`,int,struct`,struct`,struct`,struct`,*`,int,int,int,struct`,struct`,int,int,int,int,int,int,enum(int,int,int,int),struct`,struct`,struct`,array(struct(int,short,short)),array(struct(struct(int))),array(struct(struct(int),struct(int))),*`,array(short))),enum(int,int,int,int),*(struct(*`,enum(int,int,int,int),*`,*`,*`,struct`,struct`,struct`,int,int,*`,*`,*`,int,struct`,*`,*`,int,int,struct`,int,int,int,int,int,int,int,long,struct`,long,struct`)),*(struct(*`,enum(int,int,int,int),*`,*`,*`,struct`,struct`,struct`,int,int,*`,*`,*`,int,struct`,*`,*`,int,int,struct`,int,int,int,int,int,int,int,long,struct`,long,struct`)),*(struct(*`,enum(int,int,int,int),*`,*`,*`,struct`,struct`,struct`,int,int,*`,*`,*`,int,struct`,*`,*`,int,int,struct`,int,int,int,int,int,int,int,long,struct`,long,struct`)),struct(*(struct`),*(struct`)),struct(*(struct`),*(struct`)),struct(*(struct`),*(struct`)),int,int,*(void),*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,int,*`,*`,*`,*`,*`,*`)),*(char),int,struct(int,int,*(char)),*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),long,int,int,union`)),*(char),int,int,struct(int,int,*(char)),int,int,int,int,int,int,int,long,struct(long,long),long,struct(*(void),*((*`,*`)->(void)),union(struct`,*`)))),*(struct(*(struct(enum(int,int,int,int,int,int,int,int,int,int,int),*`,*`,int,struct`,struct`,struct`,struct`,*`,int,int,int,struct`,struct`,int,int,int,int,int,int,enum(int,int,int,int),struct`,struct`,struct`,array(struct(int,short,short)),array(struct(struct(int))),array(struct(struct(int),struct(int))),*`,array(short))),enum(int,int,int,int),*(struct(*`,enum(int,int,int,int),*`,*`,*`,struct`,struct`,struct`,int,int,*`,*`,*`,int,struct`,*`,*`,int,int,struct`,int,int,int,int,int,int,int,long,struct`,long,struct`)),*(struct(*`,enum(int,int,int,int),*`,*`,*`,struct`,struct`,struct`,int,int,*`,*`,*`,int,struct`,*`,*`,int,int,struct`,int,int,int,int,int,int,int,long,struct`,long,struct`)),*(struct(*`,enum(int,int,int,int),*`,*`,*`,struct`,struct`,struct`,int,int,*`,*`,*`,int,struct`,*`,*`,int,int,struct`,int,int,int,int,int,int,int,long,struct`,long,struct`)),struct(*(struct`),*(struct`)),struct(*(struct`),*(struct`)),struct(*(struct`),*(struct`)),int,int,*(void),*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,int,*`,*`,*`,*`,*`,*`)),*(char),int,struct(int,int,*(char)),*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),long,int,int,union`)),*(char),int,int,struct(int,int,*(char)),int,int,int,int,int,int,int,long,struct(long,long),long,struct(*(void),*((*`,*`)->(void)),union(struct`,*`)))))
,	O
qu	*(struct)
)	O
;	O
adns__querysend_tcp	(*(struct(*(struct(enum(int,int,int,int,int,int,int,int,int,int,int),*`,*`,int,struct`,struct`,struct`,struct`,*`,int,int,int,struct`,struct`,int,int,int,int,int,int,enum(int,int,int,int),struct`,struct`,struct`,array(struct(int,short,short)),array(struct(struct(int))),array(struct(struct(int),struct(int))),*`,array(short))),enum(int,int,int,int),*(struct(*`,enum(int,int,int,int),*`,*`,*`,struct`,struct`,struct`,int,int,*`,*`,*`,int,struct`,*`,*`,int,int,struct`,int,int,int,int,int,int,int,long,struct`,long,struct`)),*(struct(*`,enum(int,int,int,int),*`,*`,*`,struct`,struct`,struct`,int,int,*`,*`,*`,int,struct`,*`,*`,int,int,struct`,int,int,int,int,int,int,int,long,struct`,long,struct`)),*(struct(*`,enum(int,int,int,int),*`,*`,*`,struct`,struct`,struct`,int,int,*`,*`,*`,int,struct`,*`,*`,int,int,struct`,int,int,int,int,int,int,int,long,struct`,long,struct`)),struct(*(struct`),*(struct`)),struct(*(struct`),*(struct`)),struct(*(struct`),*(struct`)),int,int,*(void),*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,int,*`,*`,*`,*`,*`,*`)),*(char),int,struct(int,int,*(char)),*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),long,int,int,union`)),*(char),int,int,struct(int,int,*(char)),int,int,int,int,int,int,int,long,struct(long,long),long,struct(*(void),*((*`,*`)->(void)),union(struct`,*`)))),struct(long,long))->(void)
(	O
qu	*(struct)
,	O
now	*(struct(long,long))
)	O
;	O
adns__tcp_tryconnect	(*(struct(enum(int,int,int,int,int,int,int,int,int,int,int),*((*`,*`,*`,array(struct(int,int,*(void),*(void))))->(void)),*(void),int,struct(*(struct`),*(struct`)),struct(*(struct`),*(struct`)),struct(*(struct`),*(struct`)),struct(*(struct`),*(struct`)),*(struct(*`,enum(int,int,int,int),*`,*`,*`,struct`,struct`,struct`,int,int,*`,*`,*`,int,struct`,*`,*`,int,int,struct`,int,int,int,int,int,int,int,long,struct`,long,struct`)),int,int,int,struct(int,int,*(char)),struct(int,int,*(char)),int,int,int,int,int,int,enum(int,int,int,int),struct(long,long),struct(union(*`,*`),struct(array(long)),int,*(()->(void))),struct(array(long)),array(struct(int,short,short)),array(struct(struct(int))),array(struct(struct(int),struct(int))),*(*(char)),array(short))),struct(long,long))->(void)
(	O
qu	*(struct)
->	O
ads	*(struct)
,	O
now	*(struct(long,long))
)	O
;	O
}	O
void	O
adns__query_send	(*(struct(*(struct(enum(int,int,int,int,int,int,int,int,int,int,int),*`,*`,int,struct`,struct`,struct`,struct`,*`,int,int,int,struct`,struct`,int,int,int,int,int,int,enum(int,int,int,int),struct`,struct`,struct`,array(struct(int,short,short)),array(struct(struct(int))),array(struct(struct(int),struct(int))),*`,array(short))),enum(int,int,int,int),*(struct(*`,enum(int,int,int,int),*`,*`,*`,struct`,struct`,struct`,int,int,*`,*`,*`,int,struct`,*`,*`,int,int,struct`,int,int,int,int,int,int,int,long,struct`,long,struct`)),*(struct(*`,enum(int,int,int,int),*`,*`,*`,struct`,struct`,struct`,int,int,*`,*`,*`,int,struct`,*`,*`,int,int,struct`,int,int,int,int,int,int,int,long,struct`,long,struct`)),*(struct(*`,enum(int,int,int,int),*`,*`,*`,struct`,struct`,struct`,int,int,*`,*`,*`,int,struct`,*`,*`,int,int,struct`,int,int,int,int,int,int,int,long,struct`,long,struct`)),struct(*(struct`),*(struct`)),struct(*(struct`),*(struct`)),struct(*(struct`),*(struct`)),int,int,*(void),*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,int,*`,*`,*`,*`,*`,*`)),*(char),int,struct(int,int,*(char)),*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),long,int,int,union`)),*(char),int,int,struct(int,int,*(char)),int,int,int,int,int,int,int,long,struct(long,long),long,struct(*(void),*((*`,*`)->(void)),union(struct`,*`)))),struct(long,long))->(void)
(	O
adns_query	*(struct)
qu	*(struct)
,	O
struct	O
timeval	struct(long,long)
now	*(struct(long,long))
)	O
{	O
struct	O
sockaddr_in	struct(short,short,struct(int),array(char))
servaddr	struct(short,short,struct(int),array(char))
;	O
int	O
serv	int
,	O
r	int
;	O
adns_state	*(struct)
ads	*(struct)
;	O
assert	O
(	O
qu	*(struct)
->	O
state	*(int)
==	O
query_tosend	int
)	O
;	O
if	O
(	O
(	O
qu	*(struct)
->	O
flags	enum(int,int,int,int,int,int,int,int,int,int,int)
&	O
adns_qf_usevc	int
)	O
||	O
(	O
qu	*(struct)
->	O
query_dglen	int
>	O
DNS_MAXUDP	int
)	O
)	O
{	O
query_usetcp	(*(struct(*(struct(enum(int,int,int,int,int,int,int,int,int,int,int),*`,*`,int,struct`,struct`,struct`,struct`,*`,int,int,int,struct`,struct`,int,int,int,int,int,int,enum(int,int,int,int),struct`,struct`,struct`,array(struct(int,short,short)),array(struct(struct(int))),array(struct(struct(int),struct(int))),*`,array(short))),enum(int,int,int,int),*(struct(*`,enum(int,int,int,int),*`,*`,*`,struct`,struct`,struct`,int,int,*`,*`,*`,int,struct`,*`,*`,int,int,struct`,int,int,int,int,int,int,int,long,struct`,long,struct`)),*(struct(*`,enum(int,int,int,int),*`,*`,*`,struct`,struct`,struct`,int,int,*`,*`,*`,int,struct`,*`,*`,int,int,struct`,int,int,int,int,int,int,int,long,struct`,long,struct`)),*(struct(*`,enum(int,int,int,int),*`,*`,*`,struct`,struct`,struct`,int,int,*`,*`,*`,int,struct`,*`,*`,int,int,struct`,int,int,int,int,int,int,int,long,struct`,long,struct`)),struct(*(struct`),*(struct`)),struct(*(struct`),*(struct`)),struct(*(struct`),*(struct`)),int,int,*(void),*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,int,*`,*`,*`,*`,*`,*`)),*(char),int,struct(int,int,*(char)),*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),long,int,int,union`)),*(char),int,int,struct(int,int,*(char)),int,int,int,int,int,int,int,long,struct(long,long),long,struct(*(void),*((*`,*`)->(void)),union(struct`,*`)))),struct(long,long))->(void)
(	O
qu	*(struct)
,	O
now	*(struct(long,long))
)	O
;	O
return	O
;	O
}	O
if	O
(	O
qu	*(struct)
->	O
retries	int
>=	O
UDPMAXRETRIES	int
)	O
{	O
adns__query_fail	(*(struct(*(struct(enum(int,int,int,int,int,int,int,int,int,int,int),*`,*`,int,struct`,struct`,struct`,struct`,*`,int,int,int,struct`,struct`,int,int,int,int,int,int,enum(int,int,int,int),struct`,struct`,struct`,array(struct(int,short,short)),array(struct(struct(int))),array(struct(struct(int),struct(int))),*`,array(short))),enum(int,int,int,int),*(struct(*`,enum(int,int,int,int),*`,*`,*`,struct`,struct`,struct`,int,int,*`,*`,*`,int,struct`,*`,*`,int,int,struct`,int,int,int,int,int,int,int,long,struct`,long,struct`)),*(struct(*`,enum(int,int,int,int),*`,*`,*`,struct`,struct`,struct`,int,int,*`,*`,*`,int,struct`,*`,*`,int,int,struct`,int,int,int,int,int,int,int,long,struct`,long,struct`)),*(struct(*`,enum(int,int,int,int),*`,*`,*`,struct`,struct`,struct`,int,int,*`,*`,*`,int,struct`,*`,*`,int,int,struct`,int,int,int,int,int,int,int,long,struct`,long,struct`)),struct(*(struct`),*(struct`)),struct(*(struct`),*(struct`)),struct(*(struct`),*(struct`)),int,int,*(void),*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,int,*`,*`,*`,*`,*`,*`)),*(char),int,struct(int,int,*(char)),*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),long,int,int,union`)),*(char),int,int,struct(int,int,*(char)),int,int,int,int,int,int,int,long,struct(long,long),long,struct(*(void),*((*`,*`)->(void)),union(struct`,*`)))),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int))->(void)
(	O
qu	*(struct)
,	O
adns_s_timeout	int
)	O
;	O
return	O
;	O
}	O
serv	int
=	O
qu	*(struct)
->	O
udpnextserver	int
;	O
memset	(*(void),int,long)->(*(void))
(	O
&	O
servaddr	struct(short,short,struct(int),array(char))
,	O
0	int
,	O
sizeof	O
(	O
servaddr	struct(short,short,struct(int),array(char))
)	O
)	O
;	O
ads	*(struct)
=	O
qu	*(struct)
->	O
ads	*(struct)
;	O
servaddr	struct(short,short,struct(int),array(char))
.	O
sin_family	short
=	O
AF_INET	O
;	O
servaddr	struct(short,short,struct(int),array(char))
.	O
sin_addr	struct(int)
=	O
ads	*(struct)
->	O
servers	array(struct(struct(int)))
[	O
serv	int
]	O
.	O
addr	union(struct(short,array(char)),struct(short,short,struct(int),array(char)))
;	O
servaddr	struct(short,short,struct(int),array(char))
.	O
sin_port	short
=	O
htons	(short)->(short)
(	O
DNS_PORT	int
)	O
;	O
r	int
=	O
sendto	(int,*(void),long,int,*(struct(short,array(char))),int)->(long)
(	O
ads	*(struct)
->	O
udpsocket	int
,	O
qu	*(struct)
->	O
query_dgram	*(char)
,	O
qu	*(struct)
->	O
query_dglen	int
,	O
0	int
,	O
(	O
const	O
struct	O
sockaddr	struct(short,array(char))
*	O
)	O
&	O
servaddr	struct(short,short,struct(int),array(char))
,	O
sizeof	O
(	O
servaddr	struct(short,short,struct(int),array(char))
)	O
)	O
;	O
if	O
(	O
r	int
<	O
0	int
&&	O
errno	O
==	O
EMSGSIZE	int
)	O
{	O
qu	*(struct)
->	O
retries	int
=	O
0	int
;	O
query_usetcp	(*(struct(*(struct(enum(int,int,int,int,int,int,int,int,int,int,int),*`,*`,int,struct`,struct`,struct`,struct`,*`,int,int,int,struct`,struct`,int,int,int,int,int,int,enum(int,int,int,int),struct`,struct`,struct`,array(struct(int,short,short)),array(struct(struct(int))),array(struct(struct(int),struct(int))),*`,array(short))),enum(int,int,int,int),*(struct(*`,enum(int,int,int,int),*`,*`,*`,struct`,struct`,struct`,int,int,*`,*`,*`,int,struct`,*`,*`,int,int,struct`,int,int,int,int,int,int,int,long,struct`,long,struct`)),*(struct(*`,enum(int,int,int,int),*`,*`,*`,struct`,struct`,struct`,int,int,*`,*`,*`,int,struct`,*`,*`,int,int,struct`,int,int,int,int,int,int,int,long,struct`,long,struct`)),*(struct(*`,enum(int,int,int,int),*`,*`,*`,struct`,struct`,struct`,int,int,*`,*`,*`,int,struct`,*`,*`,int,int,struct`,int,int,int,int,int,int,int,long,struct`,long,struct`)),struct(*(struct`),*(struct`)),struct(*(struct`),*(struct`)),struct(*(struct`),*(struct`)),int,int,*(void),*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,int,*`,*`,*`,*`,*`,*`)),*(char),int,struct(int,int,*(char)),*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),long,int,int,union`)),*(char),int,int,struct(int,int,*(char)),int,int,int,int,int,int,int,long,struct(long,long),long,struct(*(void),*((*`,*`)->(void)),union(struct`,*`)))),struct(long,long))->(void)
(	O
qu	*(struct)
,	O
now	*(struct(long,long))
)	O
;	O
return	O
;	O
}	O
if	O
(	O
r	int
<	O
0	int
&&	O
errno	O
!=	O
EAGAIN	int
)	O
adns__warn	(*(struct(enum(int,int,int,int,int,int,int,int,int,int,int),*((*`,*`,*`,array(struct(int,int,*(void),*(void))))->(void)),*(void),int,struct(*(struct`),*(struct`)),struct(*(struct`),*(struct`)),struct(*(struct`),*(struct`)),struct(*(struct`),*(struct`)),*(struct(*`,enum(int,int,int,int),*`,*`,*`,struct`,struct`,struct`,int,int,*`,*`,*`,int,struct`,*`,*`,int,int,struct`,int,int,int,int,int,int,int,long,struct`,long,struct`)),int,int,int,struct(int,int,*(char)),struct(int,int,*(char)),int,int,int,int,int,int,enum(int,int,int,int),struct(long,long),struct(union(*`,*`),struct(array(long)),int,*(()->(void))),struct(array(long)),array(struct(int,short,short)),array(struct(struct(int))),array(struct(struct(int),struct(int))),*(*(char)),array(short))),int,*(struct(*(struct(enum(int,int,int,int,int,int,int,int,int,int,int),*`,*`,int,struct`,struct`,struct`,struct`,*`,int,int,int,struct`,struct`,int,int,int,int,int,int,enum(int,int,int,int),struct`,struct`,struct`,array(struct(int,short,short)),array(struct(struct(int))),array(struct(struct(int),struct(int))),*`,array(short))),enum(int,int,int,int),*(struct(*`,enum(int,int,int,int),*`,*`,*`,struct`,struct`,struct`,int,int,*`,*`,*`,int,struct`,*`,*`,int,int,struct`,int,int,int,int,int,int,int,long,struct`,long,struct`)),*(struct(*`,enum(int,int,int,int),*`,*`,*`,struct`,struct`,struct`,int,int,*`,*`,*`,int,struct`,*`,*`,int,int,struct`,int,int,int,int,int,int,int,long,struct`,long,struct`)),*(struct(*`,enum(int,int,int,int),*`,*`,*`,struct`,struct`,struct`,int,int,*`,*`,*`,int,struct`,*`,*`,int,int,struct`,int,int,int,int,int,int,int,long,struct`,long,struct`)),struct(*(struct`),*(struct`)),struct(*(struct`),*(struct`)),struct(*(struct`),*(struct`)),int,int,*(void),*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,int,*`,*`,*`,*`,*`,*`)),*(char),int,struct(int,int,*(char)),*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),long,int,int,union`)),*(char),int,int,struct(int,int,*(char)),int,int,int,int,int,int,int,long,struct(long,long),long,struct(*(void),*((*`,*`)->(void)),union(struct`,*`)))),*(char))->(void)
(	O
ads	*(struct)
,	O
serv	int
,	O
0	int
,	O
"sendto failed: %s"	*(char)
,	O
strerror	(int)->(*(char))
(	O
errno	O
)	O
)	O
;	O
qu	*(struct)
->	O
timeout	struct(long,long)
=	O
now	*(struct(long,long))
;	O
timevaladd	(*(struct(long,long)),long)->(void)
(	O
&	O
qu	*(struct)
->	O
timeout	struct(long,long)
,	O
UDPRETRYMS	int
)	O
;	O
qu	*(struct)
->	O
udpsent	long
|=	O
(	O
1	int
<<	O
serv	int
)	O
;	O
qu	*(struct)
->	O
udpnextserver	int
=	O
(	O
serv	int
+	O
1	int
)	O
%	O
ads	*(struct)
->	O
nservers	int
;	O
qu	*(struct)
->	O
retries	int
++	O
;	O
LIST_LINK_TAIL	O
(	O
ads	*(struct)
->	O
udpw	struct(*(struct(*(struct(enum(int,int,int,int,int,int,int,int,int,int,int),*`,*`,int,struct`,struct`,struct`,struct`,*`,int,int,int,struct`,struct`,int,int,int,int,int,int,enum(int,int,int,int),struct`,struct`,struct`,array(struct(int,short,short)),array(struct(struct(int))),array(struct(struct(int),struct(int))),*`,array(short))),enum(int,int,int,int),*(struct(*`,enum(int,int,int,int),*`,*`,*`,struct`,struct`,struct`,int,int,*`,*`,*`,int,struct`,*`,*`,int,int,struct`,int,int,int,int,int,int,int,long,struct`,long,struct`)),*(struct(*`,enum(int,int,int,int),*`,*`,*`,struct`,struct`,struct`,int,int,*`,*`,*`,int,struct`,*`,*`,int,int,struct`,int,int,int,int,int,int,int,long,struct`,long,struct`)),*(struct(*`,enum(int,int,int,int),*`,*`,*`,struct`,struct`,struct`,int,int,*`,*`,*`,int,struct`,*`,*`,int,int,struct`,int,int,int,int,int,int,int,long,struct`,long,struct`)),struct(*(struct`),*(struct`)),struct(*(struct`),*(struct`)),struct(*(struct`),*(struct`)),int,int,*(void),*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,int,*`,*`,*`,*`,*`,*`)),*(char),int,struct(int,int,*(char)),*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),long,int,int,union`)),*(char),int,int,struct(int,int,*(char)),int,int,int,int,int,int,int,long,struct(long,long),long,struct(*(void),*((*`,*`)->(void)),union(struct`,*`)))),*(struct(*(struct(enum(int,int,int,int,int,int,int,int,int,int,int),*`,*`,int,struct`,struct`,struct`,struct`,*`,int,int,int,struct`,struct`,int,int,int,int,int,int,enum(int,int,int,int),struct`,struct`,struct`,array(struct(int,short,short)),array(struct(struct(int))),array(struct(struct(int),struct(int))),*`,array(short))),enum(int,int,int,int),*(struct(*`,enum(int,int,int,int),*`,*`,*`,struct`,struct`,struct`,int,int,*`,*`,*`,int,struct`,*`,*`,int,int,struct`,int,int,int,int,int,int,int,long,struct`,long,struct`)),*(struct(*`,enum(int,int,int,int),*`,*`,*`,struct`,struct`,struct`,int,int,*`,*`,*`,int,struct`,*`,*`,int,int,struct`,int,int,int,int,int,int,int,long,struct`,long,struct`)),*(struct(*`,enum(int,int,int,int),*`,*`,*`,struct`,struct`,struct`,int,int,*`,*`,*`,int,struct`,*`,*`,int,int,struct`,int,int,int,int,int,int,int,long,struct`,long,struct`)),struct(*(struct`),*(struct`)),struct(*(struct`),*(struct`)),struct(*(struct`),*(struct`)),int,int,*(void),*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,int,*`,*`,*`,*`,*`,*`)),*(char),int,struct(int,int,*(char)),*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),long,int,int,union`)),*(char),int,int,struct(int,int,*(char)),int,int,int,int,int,int,int,long,struct(long,long),long,struct(*(void),*((*`,*`)->(void)),union(struct`,*`)))))
,	O
qu	*(struct)
)	O
;	O
}	O
