typedef	O
struct	O
{	O
int	O
cnt	int
;	O
char	O
*	O
buf	*(char)
;	O
}	O
BUF	struct(int,*(char))
;	O
BUF	struct(int,*(char))
*	O
allocbuf	(*(struct(int,*(char))),int,int)->(*(struct(int,*(char))))
(	O
BUF	struct(int,*(char))
*	O
,	O
int	O
,	O
int	O
)	O
;	O
char	O
*	O
colon	(*(char))->(*(char))
(	O
char	O
*	O
)	O
;	O
void	O
lostconn	(int)->(void)
(	O
int	O
)	O
;	O
void	O
nospace	()->(void)
(	O
void	O
)	O
;	O
int	O
okname	(*(char))->(int)
(	O
char	O
*	O
)	O
;	O
void	O
run_err	(*(char))->(void)
(	O
const	O
char	O
*	O
,	O
...	O
)	O
;	O
int	O
susystem	(*(char),int)->(int)
(	O
char	O
*	O
,	O
int	O
)	O
;	O
void	O
verifydir	(*(char))->(void)
(	O
char	O
*	O
)	O
;	O
const	O
char	O
doc	*(char)
[	O
]	O
=	O
"Remote copy SOURCE to DEST, or multiple SOURCE(s) to DIRECTORY."	*(char)
;	O
const	O
char	O
arg_doc	array(char)
[	O
]	O
=	O
"SOURCE DEST\n"	*(char)
"SOURCE... DIRECTORY\n"	*(char)
"--target-directory=DIRECTORY SOURCE..."	*(char)
;	O
int	O
preserve_option	int
;	O
int	O
from_option	int
,	O
to_option	int
;	O
int	O
iamremote	int
,	O
iamrecursive	int
,	O
targetshouldbedirectory	int
;	O
static	O
struct	O
argp_option	struct(*(char),int,*(char),int,*(char),int)
options	*(struct(*(char),int,*(char),int,*(char),int))
[	O
]	O
=	O
{	O
{	O
"recursive"	*(char)
,	O
'r'	O
,	O
NULL	O
,	O
0	int
,	O
"if any of the source files are directories, copies"	*(char)
" each subtree rooted at that name; in this case the"	*(char)
" destination must be a directory"	*(char)
,	O
GRID	int
+	O
1	int
}	O
,	O
{	O
"preserve"	*(char)
,	O
'p'	O
,	O
NULL	O
,	O
0	int
,	O
"attempt to preserve (duplicate) in its copies the"	*(char)
" modification times and modes of the source files"	*(char)
,	O
GRID	int
+	O
1	int
}	O
,	O
{	O
"target-directory"	*(char)
,	O
'd'	O
,	O
"DIRECTORY"	*(char)
,	O
0	int
,	O
"copy all SOURCE arguments into DIRECTORY"	*(char)
,	O
GRID	int
+	O
1	int
}	O
,	O
{	O
"from"	*(char)
,	O
'f'	O
,	O
NULL	O
,	O
0	int
,	O
"copying from remote host"	*(char)
,	O
GRID	int
+	O
1	int
}	O
,	O
{	O
"to"	*(char)
,	O
't'	O
,	O
NULL	O
,	O
0	int
,	O
"copying to remote host"	*(char)
,	O
GRID	int
+	O
1	int
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
static	O
error_t	int
parse_opt	(int,*(char),*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`)),int,*(*(char)),int,int,int,int,*(void),*(*(void)),*(void),*(char),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void))))->(int)
(	O
int	O
key	int
,	O
char	O
*	O
arg	*(char)
,	O
struct	O
argp_state	struct(*(struct(*(struct(*(char),int,*(char),int,*(char),int)),*((int,*(char),*(struct`))->(int)),*(char),*(char),*(struct(*(struct`),int,*(char),int)),*((int,*(char),*(void))->(*(char))),*(char))),int,*(*(char)),int,int,int,int,*(void),*(*(void)),*(void),*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char))),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char))),*(void))
*	O
state	*(int)
)	O
{	O
switch	O
(	O
key	int
)	O
{	O
case	O
'p'	O
:	O
preserve_option	int
=	O
1	int
;	O
break	O
;	O
case	O
'r'	O
:	O
iamrecursive	int
=	O
1	int
;	O
break	O
;	O
case	O
'd'	O
:	O
targetshouldbedirectory	int
=	O
1	int
;	O
break	O
;	O
case	O
'f'	O
:	O
iamremote	int
=	O
1	int
;	O
from_option	int
=	O
1	int
;	O
break	O
;	O
case	O
't'	O
:	O
iamremote	int
=	O
1	int
;	O
to_option	int
=	O
1	int
;	O
break	O
;	O
default	O
:	O
return	O
ARGP_ERR_UNKNOWN	O
;	O
}	O
return	O
0	int
;	O
}	O
static	O
struct	O
argp	struct(*(struct(*(char),int,*(char),int,*(char),int)),*((int,*(char),*(struct))->(int)),*(char),*(char),*(struct),*((int,*(char),*(void))->(*(char))),*(char))
argp	struct(*(struct(*(char),int,*(char),int,*(char),int)),*((int,*(char),*(struct))->(int)),*(char),*(char),*(struct),*((int,*(char),*(void))->(*(char))),*(char))
=	O
{	O
options	*(struct(*(char),int,*(char),int,*(char),int))
,	O
parse_opt	(int,*(char),*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`)),int,*(*(char)),int,int,int,int,*(void),*(*(void)),*(void),*(char),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void))))->(int)
,	O
arg_doc	array(char)
,	O
doc	*(char)
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
}	O
;	O
struct	O
passwd	struct(*(char),*(char),int,int,*(char),*(char),*(char))
*	O
pwd	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
;	O
unsigned	O
short	O
port	short
;	O
uid_t	int
userid	int
;	O
int	O
errs	int
,	O
rem	int
;	O
char	O
*	O
command	*(char)
;	O
int	O
response	()->(int)
(	O
void	O
)	O
;	O
void	O
rsource	(*(char),*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))))->(void)
(	O
char	O
*	O
,	O
struct	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
*	O
)	O
;	O
void	O
sink	(int,array(*(char)))->(void)
(	O
int	O
,	O
char	O
*	O
[	O
]	O
)	O
;	O
void	O
source	(int,array(*(char)))->(void)
(	O
int	O
,	O
char	O
*	O
[	O
]	O
)	O
;	O
void	O
tolocal	(int,array(*(char)))->(void)
(	O
int	O
,	O
char	O
*	O
[	O
]	O
)	O
;	O
void	O
toremote	(*(char),int,array(*(char)))->(void)
(	O
char	O
*	O
,	O
int	O
,	O
char	O
*	O
[	O
]	O
)	O
;	O
int	O
main	(int,array(*(char)))->(int)
(	O
int	O
argc	int
,	O
char	O
*	O
argv	*(*(char))
[	O
]	O
)	O
{	O
struct	O
servent	struct(*(char),*(*(char)),int,*(char))
*	O
sp	*(struct(*(char),*(*(char)),int,*(char)))
;	O
char	O
*	O
targ	*(char)
;	O
const	O
char	O
*	O
shell	*(char)
;	O
int	O
index	(*(char),int)->(*(char))
,	O
rc	int
;	O
set_program_name	(*(char))->(void)
(	O
argv	*(*(char))
[	O
0	int
]	O
)	O
;	O
from_option	int
=	O
to_option	int
=	O
0	int
;	O
iu_argp_init	O
(	O
"rcp"	*(char)
,	O
default_program_authors	array(*(char))
)	O
;	O
argp_parse	(*(struct(*(struct(*`,int,*`,int,*`,int)),*((int,*`,*`)->(int)),*(char),*(char),*(struct(*`,int,*`,int)),*((int,*`,*`)->(*`)),*(char))),int,*(*(char)),int,*(int),*(void))->(int)
(	O
&	O
argp	struct(*(struct(*(char),int,*(char),int,*(char),int)),*((int,*(char),*(struct))->(int)),*(char),*(char),*(struct),*((int,*(char),*(void))->(*(char))),*(char))
,	O
argc	int
,	O
argv	*(*(char))
,	O
0	int
,	O
&	O
index	(*(char),int)->(*(char))
,	O
NULL	O
)	O
;	O
argc	int
-=	O
index	(*(char),int)->(*(char))
;	O
argv	*(*(char))
+=	O
index	(*(char),int)->(*(char))
;	O
sp	*(struct(*(char),*(*(char)),int,*(char)))
=	O
getservbyname	(*(char),*(char))->(*(struct(*(char),*(*(char)),int,*(char))))
(	O
shell	*(char)
=	O
"shell"	*(char)
,	O
"tcp"	*(char)
)	O
;	O
if	O
(	O
sp	*(struct(*(char),*(*(char)),int,*(char)))
==	O
NULL	O
)	O
error	(int,int,*(char))->(void)
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
"%s/tcp: unknown service"	*(char)
,	O
shell	*(char)
)	O
;	O
port	short
=	O
sp	*(struct(*(char),*(*(char)),int,*(char)))
->	O
s_port	int
;	O
if	O
(	O
(	O
pwd	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
=	O
getpwuid	(int)->(*(struct(*(char),*(char),int,int,*(char),*(char),*(char))))
(	O
userid	int
=	O
getuid	()->(int)
(	O
)	O
)	O
)	O
==	O
NULL	O
)	O
error	(int,int,*(char))->(void)
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
"unknown user %d"	*(char)
,	O
(	O
int	O
)	O
userid	int
)	O
;	O
rem	int
=	O
STDIN_FILENO	int
;	O
if	O
(	O
from_option	int
)	O
{	O
response	()->(int)
(	O
)	O
;	O
setuid	(int)->(int)
(	O
userid	int
)	O
;	O
source	(int,array(*(char)))->(void)
(	O
argc	int
,	O
argv	*(*(char))
)	O
;	O
exit	(int)->(void)
(	O
errs	int
)	O
;	O
}	O
if	O
(	O
to_option	int
)	O
{	O
setuid	(int)->(int)
(	O
userid	int
)	O
;	O
sink	(int,array(*(char)))->(void)
(	O
argc	int
,	O
argv	*(*(char))
)	O
;	O
exit	(int)->(void)
(	O
errs	int
)	O
;	O
}	O
if	O
(	O
argc	int
<	O
2	int
)	O
error	(int,int,*(char))->(void)
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
"not enough arguments"	*(char)
)	O
;	O
if	O
(	O
argc	int
>	O
2	int
)	O
targetshouldbedirectory	int
=	O
1	int
;	O
if	O
(	O
geteuid	()->(int)
(	O
)	O
)	O
error	(int,int,*(char))->(void)
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
"must be setuid root."	*(char)
)	O
;	O
rc	int
=	O
asprintf	(*(*(char)),*(char))->(int)
(	O
&	O
command	*(char)
,	O
"rcp%s%s%s"	*(char)
,	O
iamrecursive	int
?	O
" -r"	*(char)
:	O
""	*(char)
,	O
preserve_option	int
?	O
" -p"	*(char)
:	O
""	*(char)
,	O
targetshouldbedirectory	int
?	O
" -d"	*(char)
:	O
""	*(char)
)	O
;	O
if	O
(	O
rc	int
<	O
0	int
)	O
xalloc_die	()->(void)
(	O
)	O
;	O
rem	int
=	O
-	O
1	int
;	O
signal	(int,*((int)->(void)))->(*((int)->(void)))
(	O
SIGPIPE	int
,	O
lostconn	(int)->(void)
)	O
;	O
targ	*(char)
=	O
colon	(*(char))->(*(char))
(	O
argv	*(*(char))
[	O
argc	int
-	O
1	int
]	O
)	O
;	O
if	O
(	O
targ	*(char)
)	O
toremote	(*(char),int,array(*(char)))->(void)
(	O
targ	*(char)
,	O
argc	int
,	O
argv	*(*(char))
)	O
;	O
else	O
{	O
tolocal	(int,array(*(char)))->(void)
(	O
argc	int
,	O
argv	*(*(char))
)	O
;	O
if	O
(	O
targetshouldbedirectory	int
)	O
verifydir	(*(char))->(void)
(	O
argv	*(*(char))
[	O
argc	int
-	O
1	int
]	O
)	O
;	O
}	O
exit	(int)->(void)
(	O
errs	int
)	O
;	O
}	O
void	O
toremote	(*(char),int,array(*(char)))->(void)
(	O
char	O
*	O
targ	*(char)
,	O
int	O
argc	int
,	O
char	O
*	O
argv	*(*(char))
[	O
]	O
)	O
{	O
int	O
i	int
,	O
tos	char
;	O
char	O
*	O
bp	*(char)
,	O
*	O
host	*(char)
,	O
*	O
src	*(char)
,	O
*	O
suser	*(char)
,	O
*	O
thost	*(char)
,	O
*	O
tuser	*(char)
;	O
*	O
targ	*(char)
++	O
=	O
0	int
;	O
if	O
(	O
*	O
targ	*(char)
==	O
0	int
)	O
targ	*(char)
=	O
"."	*(char)
;	O
thost	*(char)
=	O
strchr	(*(char),int)->(*(char))
(	O
argv	*(*(char))
[	O
argc	int
-	O
1	int
]	O
,	O
'@'	O
)	O
;	O
if	O
(	O
thost	*(char)
)	O
{	O
*	O
thost	*(char)
++	O
=	O
0	int
;	O
tuser	*(char)
=	O
argv	*(*(char))
[	O
argc	int
-	O
1	int
]	O
;	O
if	O
(	O
*	O
tuser	*(char)
==	O
'\0'	O
)	O
tuser	*(char)
=	O
NULL	O
;	O
else	O
if	O
(	O
!	O
okname	(*(char))->(int)
(	O
tuser	*(char)
)	O
)	O
exit	(int)->(void)
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
else	O
{	O
thost	*(char)
=	O
argv	*(*(char))
[	O
argc	int
-	O
1	int
]	O
;	O
tuser	*(char)
=	O
NULL	O
;	O
}	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
argc	int
-	O
1	int
;	O
i	int
++	O
)	O
{	O
src	*(char)
=	O
colon	(*(char))->(*(char))
(	O
argv	*(*(char))
[	O
i	int
]	O
)	O
;	O
if	O
(	O
src	*(char)
)	O
{	O
*	O
src	*(char)
++	O
=	O
0	int
;	O
if	O
(	O
*	O
src	*(char)
==	O
0	int
)	O
src	*(char)
=	O
"."	*(char)
;	O
host	*(char)
=	O
strchr	(*(char),int)->(*(char))
(	O
argv	*(*(char))
[	O
i	int
]	O
,	O
'@'	O
)	O
;	O
if	O
(	O
host	*(char)
)	O
{	O
*	O
host	*(char)
++	O
=	O
0	int
;	O
suser	*(char)
=	O
argv	*(*(char))
[	O
i	int
]	O
;	O
if	O
(	O
*	O
suser	*(char)
==	O
'\0'	O
)	O
suser	*(char)
=	O
pwd	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
->	O
pw_name	*(char)
;	O
else	O
if	O
(	O
!	O
okname	(*(char))->(int)
(	O
suser	*(char)
)	O
)	O
continue	O
;	O
if	O
(	O
asprintf	(*(*(char)),*(char))->(int)
(	O
&	O
bp	*(char)
,	O
"%s %s -l %s -n %s %s '%s%s%s:%s'"	*(char)
,	O
PATH_RSH	O
,	O
host	*(char)
,	O
suser	*(char)
,	O
command	*(char)
,	O
src	*(char)
,	O
tuser	*(char)
?	O
tuser	*(char)
:	O
""	*(char)
,	O
tuser	*(char)
?	O
"@"	*(char)
:	O
""	*(char)
,	O
thost	*(char)
,	O
targ	*(char)
)	O
<	O
0	int
)	O
xalloc_die	()->(void)
(	O
)	O
;	O
}	O
else	O
{	O
if	O
(	O
asprintf	(*(*(char)),*(char))->(int)
(	O
&	O
bp	*(char)
,	O
"exec %s %s -n %s %s '%s%s%s:%s'"	*(char)
,	O
PATH_RSH	O
,	O
argv	*(*(char))
[	O
i	int
]	O
,	O
command	*(char)
,	O
src	*(char)
,	O
tuser	*(char)
?	O
tuser	*(char)
:	O
""	*(char)
,	O
tuser	*(char)
?	O
"@"	*(char)
:	O
""	*(char)
,	O
thost	*(char)
,	O
targ	*(char)
)	O
<	O
0	int
)	O
xalloc_die	()->(void)
(	O
)	O
;	O
}	O
susystem	(*(char),int)->(int)
(	O
bp	*(char)
,	O
userid	int
)	O
;	O
free	(*(void))->(void)
(	O
bp	*(char)
)	O
;	O
}	O
else	O
{	O
if	O
(	O
rem	int
==	O
-	O
1	int
)	O
{	O
if	O
(	O
asprintf	(*(*(char)),*(char))->(int)
(	O
&	O
bp	*(char)
,	O
"%s -t %s"	*(char)
,	O
command	*(char)
,	O
targ	*(char)
)	O
<	O
0	int
)	O
xalloc_die	()->(void)
(	O
)	O
;	O
host	*(char)
=	O
thost	*(char)
;	O
rem	int
=	O
rcmd	(*(*(char)),short,*(char),*(char),*(char),*(int))->(int)
(	O
&	O
host	*(char)
,	O
port	short
,	O
pwd	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
->	O
pw_name	*(char)
,	O
tuser	*(char)
?	O
tuser	*(char)
:	O
pwd	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
->	O
pw_name	*(char)
,	O
bp	*(char)
,	O
0	int
)	O
;	O
if	O
(	O
rem	int
<	O
0	int
)	O
exit	(int)->(void)
(	O
EXIT_FAILURE	int
)	O
;	O
tos	char
=	O
IPTOS_THROUGHPUT	int
;	O
if	O
(	O
setsockopt	(int,int,int,*(void),int)->(int)
(	O
rem	int
,	O
IPPROTO_IP	int
,	O
IP_TOS	int
,	O
(	O
char	O
*	O
)	O
&	O
tos	char
,	O
sizeof	O
(	O
int	O
)	O
)	O
<	O
0	int
)	O
if	O
(	O
errno	O
!=	O
ENOPROTOOPT	int
)	O
error	(int,int,*(char))->(void)
(	O
0	int
,	O
errno	O
,	O
"TOS (ignored)"	*(char)
)	O
;	O
if	O
(	O
response	()->(int)
(	O
)	O
<	O
0	int
)	O
exit	(int)->(void)
(	O
EXIT_FAILURE	int
)	O
;	O
free	(*(void))->(void)
(	O
bp	*(char)
)	O
;	O
setuid	(int)->(int)
(	O
userid	int
)	O
;	O
}	O
source	(int,array(*(char)))->(void)
(	O
1	int
,	O
argv	*(*(char))
+	O
i	int
)	O
;	O
}	O
}	O
}	O
void	O
tolocal	(int,array(*(char)))->(void)
(	O
int	O
argc	int
,	O
char	O
*	O
argv	*(*(char))
[	O
]	O
)	O
{	O
int	O
i	int
,	O
len	char
,	O
tos	char
;	O
char	O
*	O
bp	*(char)
,	O
*	O
host	*(char)
,	O
*	O
src	*(char)
,	O
*	O
suser	*(char)
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
argc	int
-	O
1	int
;	O
i	int
++	O
)	O
{	O
if	O
(	O
!	O
(	O
src	*(char)
=	O
colon	(*(char))->(*(char))
(	O
argv	*(*(char))
[	O
i	int
]	O
)	O
)	O
)	O
{	O
len	char
=	O
strlen	(*(char))->(long)
(	O
PATH_CP	O
)	O
+	O
strlen	(*(char))->(long)
(	O
argv	*(*(char))
[	O
i	int
]	O
)	O
+	O
strlen	(*(char))->(long)
(	O
argv	*(*(char))
[	O
argc	int
-	O
1	int
]	O
)	O
+	O
20	int
;	O
if	O
(	O
asprintf	(*(*(char)),*(char))->(int)
(	O
&	O
bp	*(char)
,	O
"exec %s%s%s %s %s"	*(char)
,	O
PATH_CP	O
,	O
iamrecursive	int
?	O
" -r"	*(char)
:	O
""	*(char)
,	O
preserve_option	int
?	O
" -p"	*(char)
:	O
""	*(char)
,	O
argv	*(*(char))
[	O
i	int
]	O
,	O
argv	*(*(char))
[	O
argc	int
-	O
1	int
]	O
)	O
<	O
0	int
)	O
xalloc_die	()->(void)
(	O
)	O
;	O
if	O
(	O
susystem	(*(char),int)->(int)
(	O
bp	*(char)
,	O
userid	int
)	O
)	O
++	O
errs	int
;	O
free	(*(void))->(void)
(	O
bp	*(char)
)	O
;	O
continue	O
;	O
}	O
*	O
src	*(char)
++	O
=	O
0	int
;	O
if	O
(	O
*	O
src	*(char)
==	O
0	int
)	O
src	*(char)
=	O
"."	*(char)
;	O
if	O
(	O
(	O
host	*(char)
=	O
strchr	(*(char),int)->(*(char))
(	O
argv	*(*(char))
[	O
i	int
]	O
,	O
'@'	O
)	O
)	O
==	O
NULL	O
)	O
{	O
host	*(char)
=	O
argv	*(*(char))
[	O
i	int
]	O
;	O
suser	*(char)
=	O
pwd	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
->	O
pw_name	*(char)
;	O
}	O
else	O
{	O
*	O
host	*(char)
++	O
=	O
0	int
;	O
suser	*(char)
=	O
argv	*(*(char))
[	O
i	int
]	O
;	O
if	O
(	O
*	O
suser	*(char)
==	O
'\0'	O
)	O
suser	*(char)
=	O
pwd	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
->	O
pw_name	*(char)
;	O
else	O
if	O
(	O
!	O
okname	(*(char))->(int)
(	O
suser	*(char)
)	O
)	O
continue	O
;	O
}	O
if	O
(	O
asprintf	(*(*(char)),*(char))->(int)
(	O
&	O
bp	*(char)
,	O
"%s -f %s"	*(char)
,	O
command	*(char)
,	O
src	*(char)
)	O
<	O
0	int
)	O
xalloc_die	()->(void)
(	O
)	O
;	O
rem	int
=	O
rcmd	(*(*(char)),short,*(char),*(char),*(char),*(int))->(int)
(	O
&	O
host	*(char)
,	O
port	short
,	O
pwd	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
->	O
pw_name	*(char)
,	O
suser	*(char)
,	O
bp	*(char)
,	O
0	int
)	O
;	O
free	(*(void))->(void)
(	O
bp	*(char)
)	O
;	O
if	O
(	O
rem	int
<	O
0	int
)	O
{	O
++	O
errs	int
;	O
continue	O
;	O
}	O
seteuid	(int)->(int)
(	O
userid	int
)	O
;	O
tos	char
=	O
IPTOS_THROUGHPUT	int
;	O
if	O
(	O
setsockopt	(int,int,int,*(void),int)->(int)
(	O
rem	int
,	O
IPPROTO_IP	int
,	O
IP_TOS	int
,	O
(	O
char	O
*	O
)	O
&	O
tos	char
,	O
sizeof	O
(	O
int	O
)	O
)	O
<	O
0	int
)	O
if	O
(	O
errno	O
!=	O
ENOPROTOOPT	int
)	O
error	(int,int,*(char))->(void)
(	O
0	int
,	O
errno	O
,	O
"TOS (ignored)"	*(char)
)	O
;	O
sink	(int,array(*(char)))->(void)
(	O
1	int
,	O
argv	*(*(char))
+	O
argc	int
-	O
1	int
)	O
;	O
seteuid	(int)->(int)
(	O
0	int
)	O
;	O
close	*((*(void))->(int))
(	O
rem	int
)	O
;	O
rem	int
=	O
-	O
1	int
;	O
}	O
}	O
static	O
int	O
write_stat_time	(int,*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))))->(int)
(	O
int	O
fd	int
,	O
struct	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
*	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
)	O
{	O
char	O
buf	*(char)
[	O
4	int
*	O
sizeof	O
(	O
long	O
)	O
*	O
3	int
+	O
2	int
]	O
;	O
time_t	long
a_sec	long
,	O
m_sec	long
;	O
long	O
a_usec	long
=	O
0	int
,	O
m_usec	long
=	O
0	int
;	O
a_sec	long
=	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
->	O
st_atime	O
;	O
m_sec	long
=	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
->	O
st_mtime	O
;	O
snprintf	(*(char),long,*(char))->(int)
(	O
buf	*(char)
,	O
sizeof	O
(	O
buf	*(char)
)	O
,	O
"T%ld %ld %ld %ld\n"	*(char)
,	O
m_sec	long
,	O
m_usec	long
,	O
a_sec	long
,	O
a_usec	long
)	O
;	O
return	O
write	*((*(void),*(char),long)->(long))
(	O
fd	int
,	O
buf	*(char)
,	O
strlen	(*(char))->(long)
(	O
buf	*(char)
)	O
)	O
;	O
}	O
void	O
source	(int,array(*(char)))->(void)
(	O
int	O
argc	int
,	O
char	O
*	O
argv	*(*(char))
[	O
]	O
)	O
{	O
struct	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
stb	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
;	O
static	O
BUF	struct(int,*(char))
buffer	struct(int,*(char))
;	O
BUF	struct(int,*(char))
*	O
bp	*(char)
;	O
off_t	long
i	int
;	O
int	O
amt	int
,	O
fd	int
,	O
haderr	int
,	O
indx	int
,	O
result	int
;	O
char	O
*	O
last	*(char)
,	O
*	O
name	*(char)
,	O
buf	*(char)
[	O
BUFSIZ	int
]	O
;	O
for	O
(	O
indx	int
=	O
0	int
;	O
indx	int
<	O
argc	int
;	O
++	O
indx	int
)	O
{	O
name	*(char)
=	O
argv	*(*(char))
[	O
indx	int
]	O
;	O
if	O
(	O
(	O
fd	int
=	O
open	(*(char),int)->(int)
(	O
name	*(char)
,	O
O_RDONLY	int
,	O
0	int
)	O
)	O
<	O
0	int
)	O
goto	O
syserr	O
;	O
if	O
(	O
fstat	(int,*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))))->(int)
(	O
fd	int
,	O
&	O
stb	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
)	O
)	O
{	O
syserr	O
:	O
run_err	(*(char))->(void)
(	O
"%s: %s"	*(char)
,	O
name	*(char)
,	O
strerror	(int)->(*(char))
(	O
errno	O
)	O
)	O
;	O
goto	O
next	int
;	O
}	O
switch	O
(	O
stb	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_mode	int
&	O
S_IFMT	O
)	O
{	O
case	O
S_IFREG	O
:	O
break	O
;	O
case	O
S_IFDIR	O
:	O
if	O
(	O
iamrecursive	int
)	O
{	O
rsource	(*(char),*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))))->(void)
(	O
name	*(char)
,	O
&	O
stb	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
)	O
;	O
goto	O
next	int
;	O
}	O
default	O
:	O
run_err	(*(char))->(void)
(	O
"%s: not a regular file"	*(char)
,	O
name	*(char)
)	O
;	O
goto	O
next	int
;	O
}	O
if	O
(	O
(	O
last	*(char)
=	O
strrchr	(*(char),int)->(*(char))
(	O
name	*(char)
,	O
'/'	O
)	O
)	O
==	O
NULL	O
)	O
last	*(char)
=	O
name	*(char)
;	O
else	O
++	O
last	*(char)
;	O
if	O
(	O
preserve_option	int
)	O
{	O
write_stat_time	(int,*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))))->(int)
(	O
rem	int
,	O
&	O
stb	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
)	O
;	O
if	O
(	O
response	()->(int)
(	O
)	O
<	O
0	int
)	O
goto	O
next	int
;	O
}	O
snprintf	(*(char),long,*(char))->(int)
(	O
buf	*(char)
,	O
sizeof	O
buf	*(char)
,	O
(	O
sizeof	O
(	O
stb	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_size	long
)	O
>	O
sizeof	O
(	O
long	O
)	O
?	O
"C%04o %lld %s\n"	*(char)
:	O
"C%04o %ld %s\n"	*(char)
)	O
,	O
stb	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_mode	int
&	O
RCP_MODEMASK	O
,	O
stb	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_size	long
,	O
last	*(char)
)	O
;	O
write	*((*(void),*(char),long)->(long))
(	O
rem	int
,	O
buf	*(char)
,	O
strlen	(*(char))->(long)
(	O
buf	*(char)
)	O
)	O
;	O
if	O
(	O
response	()->(int)
(	O
)	O
<	O
0	int
)	O
goto	O
next	int
;	O
if	O
(	O
(	O
bp	*(char)
=	O
allocbuf	(*(struct(int,*(char))),int,int)->(*(struct(int,*(char))))
(	O
&	O
buffer	struct(int,*(char))
,	O
fd	int
,	O
BUFSIZ	int
)	O
)	O
==	O
NULL	O
)	O
{	O
next	int
:	O
close	*((*(void))->(int))
(	O
fd	int
)	O
;	O
continue	O
;	O
}	O
for	O
(	O
haderr	int
=	O
i	int
=	O
0	int
;	O
i	int
<	O
stb	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_size	long
;	O
i	int
+=	O
bp	*(char)
->	O
cnt	int
)	O
{	O
amt	int
=	O
bp	*(char)
->	O
cnt	int
;	O
if	O
(	O
i	int
+	O
amt	int
>	O
stb	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_size	long
)	O
amt	int
=	O
stb	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_size	long
-	O
i	int
;	O
if	O
(	O
!	O
haderr	int
)	O
{	O
result	int
=	O
read	*((*(void),*(char),long)->(long))
(	O
fd	int
,	O
bp	*(char)
->	O
buf	*(char)
,	O
amt	int
)	O
;	O
if	O
(	O
result	int
!=	O
amt	int
)	O
haderr	int
=	O
result	int
>=	O
0	int
?	O
EIO	int
:	O
errno	O
;	O
}	O
if	O
(	O
haderr	int
)	O
write	*((*(void),*(char),long)->(long))
(	O
rem	int
,	O
bp	*(char)
->	O
buf	*(char)
,	O
amt	int
)	O
;	O
else	O
{	O
result	int
=	O
write	*((*(void),*(char),long)->(long))
(	O
rem	int
,	O
bp	*(char)
->	O
buf	*(char)
,	O
amt	int
)	O
;	O
if	O
(	O
result	int
!=	O
amt	int
)	O
haderr	int
=	O
result	int
>=	O
0	int
?	O
EIO	int
:	O
errno	O
;	O
}	O
}	O
if	O
(	O
close	*((*(void))->(int))
(	O
fd	int
)	O
&&	O
!	O
haderr	int
)	O
haderr	int
=	O
errno	O
;	O
if	O
(	O
!	O
haderr	int
)	O
write	*((*(void),*(char),long)->(long))
(	O
rem	int
,	O
""	*(char)
,	O
1	int
)	O
;	O
else	O
run_err	(*(char))->(void)
(	O
"%s: %s"	*(char)
,	O
name	*(char)
,	O
strerror	(int)->(*(char))
(	O
haderr	int
)	O
)	O
;	O
response	()->(int)
(	O
)	O
;	O
}	O
}	O
void	O
rsource	(*(char),*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))))->(void)
(	O
char	O
*	O
name	*(char)
,	O
struct	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
*	O
statp	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
)	O
{	O
DIR	struct
*	O
dirp	*(struct)
;	O
struct	O
dirent	struct(long,long,short,char,array(char))
*	O
dp	*(struct(long,long,short,char,array(char)))
;	O
char	O
*	O
last	*(char)
,	O
*	O
vect	array(*(char))
[	O
1	int
]	O
;	O
char	O
*	O
buf	*(char)
;	O
int	O
buf_len	int
;	O
if	O
(	O
!	O
(	O
dirp	*(struct)
=	O
opendir	(*(char))->(*(struct))
(	O
name	*(char)
)	O
)	O
)	O
{	O
run_err	(*(char))->(void)
(	O
"%s: %s"	*(char)
,	O
name	*(char)
,	O
strerror	(int)->(*(char))
(	O
errno	O
)	O
)	O
;	O
return	O
;	O
}	O
last	*(char)
=	O
strrchr	(*(char),int)->(*(char))
(	O
name	*(char)
,	O
'/'	O
)	O
;	O
if	O
(	O
last	*(char)
==	O
0	int
)	O
last	*(char)
=	O
name	*(char)
;	O
else	O
last	*(char)
++	O
;	O
if	O
(	O
preserve_option	int
)	O
{	O
write_stat_time	(int,*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))))->(int)
(	O
rem	int
,	O
statp	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
)	O
;	O
if	O
(	O
response	()->(int)
(	O
)	O
<	O
0	int
)	O
{	O
closedir	(*(struct))->(int)
(	O
dirp	*(struct)
)	O
;	O
return	O
;	O
}	O
}	O
buf_len	int
=	O
1	int
+	O
sizeof	O
(	O
int	O
)	O
*	O
3	int
+	O
1	int
+	O
sizeof	O
(	O
int	O
)	O
*	O
3	int
+	O
1	int
+	O
strlen	(*(char))->(long)
(	O
last	*(char)
)	O
+	O
2	int
;	O
buf	*(char)
=	O
malloc	(long)->(*(void))
(	O
buf_len	int
)	O
;	O
if	O
(	O
!	O
buf	*(char)
)	O
{	O
run_err	(*(char))->(void)
(	O
"malloc failed for %d bytes"	*(char)
,	O
buf_len	int
)	O
;	O
closedir	(*(struct))->(int)
(	O
dirp	*(struct)
)	O
;	O
return	O
;	O
}	O
sprintf	(*(char),*(char))->(int)
(	O
buf	*(char)
,	O
"D%04o %d %s\n"	*(char)
,	O
statp	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
->	O
st_mode	int
&	O
RCP_MODEMASK	O
,	O
0	int
,	O
last	*(char)
)	O
;	O
write	*((*(void),*(char),long)->(long))
(	O
rem	int
,	O
buf	*(char)
,	O
strlen	(*(char))->(long)
(	O
buf	*(char)
)	O
)	O
;	O
free	(*(void))->(void)
(	O
buf	*(char)
)	O
;	O
if	O
(	O
response	()->(int)
(	O
)	O
<	O
0	int
)	O
{	O
closedir	(*(struct))->(int)
(	O
dirp	*(struct)
)	O
;	O
return	O
;	O
}	O
while	O
(	O
(	O
dp	*(struct(long,long,short,char,array(char)))
=	O
readdir	(*(struct))->(*(struct(long,long,short,char,array(char))))
(	O
dirp	*(struct)
)	O
)	O
)	O
{	O
if	O
(	O
!	O
strcmp	(*(char),*(char))->(int)
(	O
dp	*(struct(long,long,short,char,array(char)))
->	O
d_name	array(char)
,	O
"."	*(char)
)	O
||	O
!	O
strcmp	(*(char),*(char))->(int)
(	O
dp	*(struct(long,long,short,char,array(char)))
->	O
d_name	array(char)
,	O
".."	*(char)
)	O
)	O
continue	O
;	O
buf_len	int
=	O
strlen	(*(char))->(long)
(	O
name	*(char)
)	O
+	O
1	int
+	O
strlen	(*(char))->(long)
(	O
dp	*(struct(long,long,short,char,array(char)))
->	O
d_name	array(char)
)	O
+	O
1	int
;	O
buf	*(char)
=	O
malloc	(long)->(*(void))
(	O
buf_len	int
)	O
;	O
if	O
(	O
!	O
buf	*(char)
)	O
{	O
run_err	(*(char))->(void)
(	O
"malloc_failed for %d bytes"	*(char)
,	O
buf_len	int
)	O
;	O
continue	O
;	O
}	O
sprintf	(*(char),*(char))->(int)
(	O
buf	*(char)
,	O
"%s/%s"	*(char)
,	O
name	*(char)
,	O
dp	*(struct(long,long,short,char,array(char)))
->	O
d_name	array(char)
)	O
;	O
vect	array(*(char))
[	O
0	int
]	O
=	O
buf	*(char)
;	O
source	(int,array(*(char)))->(void)
(	O
1	int
,	O
vect	array(*(char))
)	O
;	O
free	(*(void))->(void)
(	O
buf	*(char)
)	O
;	O
}	O
closedir	(*(struct))->(int)
(	O
dirp	*(struct)
)	O
;	O
write	*((*(void),*(char),long)->(long))
(	O
rem	int
,	O
"E\n"	*(char)
,	O
2	int
)	O
;	O
response	()->(int)
(	O
)	O
;	O
}	O
void	O
sink	(int,array(*(char)))->(void)
(	O
int	O
argc	int
,	O
char	O
*	O
argv	*(*(char))
[	O
]	O
)	O
{	O
static	O
BUF	struct(int,*(char))
buffer	struct(int,*(char))
;	O
struct	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
stb	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
;	O
struct	O
timeval	struct(long,long)
tv	array(struct(long,long))
[	O
2	int
]	O
;	O
enum	O
{	O
YES	int
,	O
NO	int
,	O
DISPLAYED	int
}	O
wrerr	enum(int,int,int)
;	O
BUF	struct(int,*(char))
*	O
bp	*(char)
;	O
off_t	long
i	int
,	O
j	long
;	O
int	O
amt	int
,	O
count	int
,	O
exists	int
,	O
first	int
,	O
mask	int
,	O
mode	int
,	O
ofd	int
,	O
omode	int
;	O
int	O
setimes	int
,	O
size	int
,	O
targisdir	int
,	O
wrerrno	int
;	O
char	O
ch	char
,	O
*	O
cp	*(char)
,	O
*	O
np	*(char)
,	O
*	O
targ	*(char)
,	O
*	O
vect	array(*(char))
[	O
1	int
]	O
,	O
buf	*(char)
[	O
BUFSIZ	int
]	O
;	O
const	O
char	O
*	O
why	*(char)
;	O
setimes	int
=	O
targisdir	int
=	O
0	int
;	O
mask	int
=	O
umask	(int)->(int)
(	O
0	int
)	O
;	O
if	O
(	O
!	O
preserve_option	int
)	O
umask	(int)->(int)
(	O
mask	int
)	O
;	O
if	O
(	O
argc	int
!=	O
1	int
)	O
{	O
run_err	(*(char))->(void)
(	O
"ambiguous target"	*(char)
)	O
;	O
exit	(int)->(void)
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
targ	*(char)
=	O
*	O
argv	*(*(char))
;	O
if	O
(	O
targetshouldbedirectory	int
)	O
verifydir	(*(char))->(void)
(	O
targ	*(char)
)	O
;	O
write	*((*(void),*(char),long)->(long))
(	O
rem	int
,	O
""	*(char)
,	O
1	int
)	O
;	O
if	O
(	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
(	O
targ	*(char)
,	O
&	O
stb	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
)	O
==	O
0	int
&&	O
S_ISDIR	O
(	O
stb	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_mode	int
)	O
)	O
targisdir	int
=	O
1	int
;	O
for	O
(	O
first	int
=	O
1	int
;	O
;	O
first	int
=	O
0	int
)	O
{	O
cp	*(char)
=	O
buf	*(char)
;	O
if	O
(	O
read	*((*(void),*(char),long)->(long))
(	O
rem	int
,	O
cp	*(char)
,	O
1	int
)	O
<=	O
0	int
)	O
return	O
;	O
if	O
(	O
*	O
cp	*(char)
++	O
==	O
'\n'	O
)	O
SCREWUP	O
(	O
"unexpected <newline>"	*(char)
)	O
;	O
do	O
{	O
if	O
(	O
read	*((*(void),*(char),long)->(long))
(	O
rem	int
,	O
&	O
ch	char
,	O
sizeof	O
ch	char
)	O
!=	O
sizeof	O
ch	char
)	O
SCREWUP	O
(	O
"lost connection"	*(char)
)	O
;	O
*	O
cp	*(char)
++	O
=	O
ch	char
;	O
}	O
while	O
(	O
cp	*(char)
<	O
&	O
buf	*(char)
[	O
BUFSIZ	int
-	O
1	int
]	O
&&	O
ch	char
!=	O
'\n'	O
)	O
;	O
*	O
cp	*(char)
=	O
0	int
;	O
if	O
(	O
buf	*(char)
[	O
0	int
]	O
==	O
'\01'	O
||	O
buf	*(char)
[	O
0	int
]	O
==	O
'\02'	O
)	O
{	O
if	O
(	O
iamremote	int
==	O
0	int
)	O
write	*((*(void),*(char),long)->(long))
(	O
STDERR_FILENO	int
,	O
buf	*(char)
+	O
1	int
,	O
strlen	(*(char))->(long)
(	O
buf	*(char)
+	O
1	int
)	O
)	O
;	O
if	O
(	O
buf	*(char)
[	O
0	int
]	O
==	O
'\02'	O
)	O
exit	(int)->(void)
(	O
EXIT_FAILURE	int
)	O
;	O
++	O
errs	int
;	O
continue	O
;	O
}	O
if	O
(	O
buf	*(char)
[	O
0	int
]	O
==	O
'E'	O
)	O
{	O
write	*((*(void),*(char),long)->(long))
(	O
rem	int
,	O
""	*(char)
,	O
1	int
)	O
;	O
return	O
;	O
}	O
if	O
(	O
ch	char
==	O
'\n'	O
)	O
*	O
--	O
cp	*(char)
=	O
0	int
;	O
cp	*(char)
=	O
buf	*(char)
;	O
if	O
(	O
*	O
cp	*(char)
==	O
'T'	O
)	O
{	O
setimes	int
++	O
;	O
cp	*(char)
++	O
;	O
getnum	O
(	O
mtime	O
.	O
tv_sec	long
)	O
;	O
if	O
(	O
*	O
cp	*(char)
++	O
!=	O
' '	O
)	O
SCREWUP	O
(	O
"mtime.sec not delimited"	*(char)
)	O
;	O
getnum	O
(	O
mtime	O
.	O
tv_usec	long
)	O
;	O
if	O
(	O
*	O
cp	*(char)
++	O
!=	O
' '	O
)	O
SCREWUP	O
(	O
"mtime.usec not delimited"	*(char)
)	O
;	O
getnum	O
(	O
atime	O
.	O
tv_sec	long
)	O
;	O
if	O
(	O
*	O
cp	*(char)
++	O
!=	O
' '	O
)	O
SCREWUP	O
(	O
"atime.sec not delimited"	*(char)
)	O
;	O
getnum	O
(	O
atime	O
.	O
tv_usec	long
)	O
;	O
if	O
(	O
*	O
cp	*(char)
++	O
!=	O
'\0'	O
)	O
SCREWUP	O
(	O
"atime.usec not delimited"	*(char)
)	O
;	O
write	*((*(void),*(char),long)->(long))
(	O
rem	int
,	O
""	*(char)
,	O
1	int
)	O
;	O
continue	O
;	O
}	O
if	O
(	O
*	O
cp	*(char)
!=	O
'C'	O
&&	O
*	O
cp	*(char)
!=	O
'D'	O
)	O
{	O
if	O
(	O
first	int
)	O
{	O
run_err	(*(char))->(void)
(	O
"%s"	*(char)
,	O
cp	*(char)
)	O
;	O
exit	(int)->(void)
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
SCREWUP	O
(	O
"expected control record"	*(char)
)	O
;	O
}	O
mode	int
=	O
0	int
;	O
for	O
(	O
++	O
cp	*(char)
;	O
cp	*(char)
<	O
buf	*(char)
+	O
5	int
;	O
cp	*(char)
++	O
)	O
{	O
if	O
(	O
*	O
cp	*(char)
<	O
'0'	O
||	O
*	O
cp	*(char)
>	O
'7'	O
)	O
SCREWUP	O
(	O
"bad mode"	*(char)
)	O
;	O
mode	int
=	O
(	O
mode	int
<<	O
3	int
)	O
|	O
(	O
*	O
cp	*(char)
-	O
'0'	O
)	O
;	O
}	O
if	O
(	O
*	O
cp	*(char)
++	O
!=	O
' '	O
)	O
SCREWUP	O
(	O
"mode not delimited"	*(char)
)	O
;	O
for	O
(	O
size	int
=	O
0	int
;	O
isdigit	(int)->(int)
(	O
*	O
cp	*(char)
)	O
;	O
)	O
size	int
=	O
size	int
*	O
10	int
+	O
(	O
*	O
cp	*(char)
++	O
-	O
'0'	O
)	O
;	O
if	O
(	O
*	O
cp	*(char)
++	O
!=	O
' '	O
)	O
SCREWUP	O
(	O
"size not delimited"	*(char)
)	O
;	O
if	O
(	O
targisdir	int
)	O
{	O
static	O
char	O
*	O
namebuf	*(char)
;	O
static	O
int	O
cursize	int
;	O
size_t	long
need	long
;	O
need	long
=	O
strlen	(*(char))->(long)
(	O
targ	*(char)
)	O
+	O
strlen	(*(char))->(long)
(	O
cp	*(char)
)	O
+	O
250	int
;	O
if	O
(	O
need	long
>	O
cursize	int
)	O
{	O
if	O
(	O
!	O
(	O
namebuf	*(char)
=	O
malloc	(long)->(*(void))
(	O
need	long
)	O
)	O
)	O
run_err	(*(char))->(void)
(	O
"%s"	*(char)
,	O
strerror	(int)->(*(char))
(	O
errno	O
)	O
)	O
;	O
}	O
snprintf	(*(char),long,*(char))->(int)
(	O
namebuf	*(char)
,	O
need	long
,	O
"%s%s%s"	*(char)
,	O
targ	*(char)
,	O
*	O
targ	*(char)
?	O
"/"	*(char)
:	O
""	*(char)
,	O
cp	*(char)
)	O
;	O
np	*(char)
=	O
namebuf	*(char)
;	O
}	O
else	O
np	*(char)
=	O
targ	*(char)
;	O
exists	int
=	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
(	O
np	*(char)
,	O
&	O
stb	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
)	O
==	O
0	int
;	O
if	O
(	O
buf	*(char)
[	O
0	int
]	O
==	O
'D'	O
)	O
{	O
int	O
mod_flag	int
=	O
preserve_option	int
;	O
if	O
(	O
exists	int
)	O
{	O
if	O
(	O
!	O
S_ISDIR	O
(	O
stb	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_mode	int
)	O
)	O
{	O
errno	O
=	O
ENOTDIR	int
;	O
goto	O
bad	O
;	O
}	O
if	O
(	O
preserve_option	int
)	O
chmod	(*(char),int)->(int)
(	O
np	*(char)
,	O
mode	int
)	O
;	O
}	O
else	O
{	O
mod_flag	int
=	O
1	int
;	O
if	O
(	O
mkdir	(*(char),int)->(int)
(	O
np	*(char)
,	O
mode	int
|	O
S_IRWXU	O
)	O
<	O
0	int
)	O
goto	O
bad	O
;	O
}	O
vect	array(*(char))
[	O
0	int
]	O
=	O
np	*(char)
;	O
sink	(int,array(*(char)))->(void)
(	O
1	int
,	O
vect	array(*(char))
)	O
;	O
if	O
(	O
setimes	int
)	O
{	O
setimes	int
=	O
0	int
;	O
if	O
(	O
utimes	(*(char),array(struct(long,long)))->(int)
(	O
np	*(char)
,	O
tv	array(struct(long,long))
)	O
<	O
0	int
)	O
run_err	(*(char))->(void)
(	O
"%s: set times: %s"	*(char)
,	O
np	*(char)
,	O
strerror	(int)->(*(char))
(	O
errno	O
)	O
)	O
;	O
}	O
if	O
(	O
mod_flag	int
)	O
chmod	(*(char),int)->(int)
(	O
np	*(char)
,	O
mode	int
)	O
;	O
continue	O
;	O
}	O
omode	int
=	O
mode	int
;	O
mode	int
|=	O
S_IWRITE	O
;	O
if	O
(	O
(	O
ofd	int
=	O
open	(*(char),int)->(int)
(	O
np	*(char)
,	O
O_WRONLY	int
|	O
O_CREAT	int
,	O
mode	int
)	O
)	O
<	O
0	int
)	O
{	O
bad	O
:	O
run_err	(*(char))->(void)
(	O
"%s: %s"	*(char)
,	O
np	*(char)
,	O
strerror	(int)->(*(char))
(	O
errno	O
)	O
)	O
;	O
continue	O
;	O
}	O
write	*((*(void),*(char),long)->(long))
(	O
rem	int
,	O
""	*(char)
,	O
1	int
)	O
;	O
if	O
(	O
(	O
bp	*(char)
=	O
allocbuf	(*(struct(int,*(char))),int,int)->(*(struct(int,*(char))))
(	O
&	O
buffer	struct(int,*(char))
,	O
ofd	int
,	O
BUFSIZ	int
)	O
)	O
==	O
NULL	O
)	O
{	O
close	*((*(void))->(int))
(	O
ofd	int
)	O
;	O
continue	O
;	O
}	O
cp	*(char)
=	O
bp	*(char)
->	O
buf	*(char)
;	O
wrerr	enum(int,int,int)
=	O
NO	int
;	O
for	O
(	O
count	int
=	O
i	int
=	O
0	int
;	O
i	int
<	O
size	int
;	O
i	int
+=	O
BUFSIZ	int
)	O
{	O
amt	int
=	O
BUFSIZ	int
;	O
if	O
(	O
i	int
+	O
amt	int
>	O
size	int
)	O
amt	int
=	O
size	int
-	O
i	int
;	O
count	int
+=	O
amt	int
;	O
do	O
{	O
j	long
=	O
read	*((*(void),*(char),long)->(long))
(	O
rem	int
,	O
cp	*(char)
,	O
amt	int
)	O
;	O
if	O
(	O
j	long
<=	O
0	int
)	O
{	O
run_err	(*(char))->(void)
(	O
"%s"	*(char)
,	O
j	long
?	O
strerror	(int)->(*(char))
(	O
errno	O
)	O
:	O
"dropped connection"	*(char)
)	O
;	O
exit	(int)->(void)
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
amt	int
-=	O
j	long
;	O
cp	*(char)
+=	O
j	long
;	O
}	O
while	O
(	O
amt	int
>	O
0	int
)	O
;	O
if	O
(	O
count	int
==	O
bp	*(char)
->	O
cnt	int
)	O
{	O
if	O
(	O
wrerr	enum(int,int,int)
==	O
NO	int
)	O
{	O
j	long
=	O
write	*((*(void),*(char),long)->(long))
(	O
ofd	int
,	O
bp	*(char)
->	O
buf	*(char)
,	O
count	int
)	O
;	O
if	O
(	O
j	long
!=	O
count	int
)	O
{	O
wrerr	enum(int,int,int)
=	O
YES	int
;	O
wrerrno	int
=	O
j	long
>=	O
0	int
?	O
EIO	int
:	O
errno	O
;	O
}	O
}	O
count	int
=	O
0	int
;	O
cp	*(char)
=	O
bp	*(char)
->	O
buf	*(char)
;	O
}	O
}	O
if	O
(	O
count	int
!=	O
0	int
&&	O
wrerr	enum(int,int,int)
==	O
NO	int
&&	O
(	O
j	long
=	O
write	*((*(void),*(char),long)->(long))
(	O
ofd	int
,	O
bp	*(char)
->	O
buf	*(char)
,	O
count	int
)	O
)	O
!=	O
count	int
)	O
{	O
wrerr	enum(int,int,int)
=	O
YES	int
;	O
wrerrno	int
=	O
j	long
>=	O
0	int
?	O
EIO	int
:	O
errno	O
;	O
}	O
if	O
(	O
ftruncate	(int,long)->(int)
(	O
ofd	int
,	O
size	int
)	O
)	O
{	O
run_err	(*(char))->(void)
(	O
"%s: truncate: %s"	*(char)
,	O
np	*(char)
,	O
strerror	(int)->(*(char))
(	O
errno	O
)	O
)	O
;	O
wrerr	enum(int,int,int)
=	O
DISPLAYED	int
;	O
}	O
if	O
(	O
preserve_option	int
)	O
{	O
if	O
(	O
exists	int
||	O
omode	int
!=	O
mode	int
)	O
if	O
(	O
fchmod	(int,int)->(int)
(	O
ofd	int
,	O
omode	int
)	O
)	O
run_err	(*(char))->(void)
(	O
"%s: set mode: %s"	*(char)
,	O
np	*(char)
,	O
strerror	(int)->(*(char))
(	O
errno	O
)	O
)	O
;	O
}	O
else	O
{	O
if	O
(	O
!	O
exists	int
&&	O
omode	int
!=	O
mode	int
)	O
if	O
(	O
fchmod	(int,int)->(int)
(	O
ofd	int
,	O
omode	int
&	O
~	O
mask	int
)	O
)	O
run_err	(*(char))->(void)
(	O
"%s: set mode: %s"	*(char)
,	O
np	*(char)
,	O
strerror	(int)->(*(char))
(	O
errno	O
)	O
)	O
;	O
}	O
close	*((*(void))->(int))
(	O
ofd	int
)	O
;	O
response	()->(int)
(	O
)	O
;	O
if	O
(	O
setimes	int
&&	O
wrerr	enum(int,int,int)
==	O
NO	int
)	O
{	O
setimes	int
=	O
0	int
;	O
if	O
(	O
utimes	(*(char),array(struct(long,long)))->(int)
(	O
np	*(char)
,	O
tv	array(struct(long,long))
)	O
<	O
0	int
)	O
{	O
run_err	(*(char))->(void)
(	O
"%s: set times: %s"	*(char)
,	O
np	*(char)
,	O
strerror	(int)->(*(char))
(	O
errno	O
)	O
)	O
;	O
wrerr	enum(int,int,int)
=	O
DISPLAYED	int
;	O
}	O
}	O
switch	O
(	O
wrerr	enum(int,int,int)
)	O
{	O
case	O
YES	int
:	O
run_err	(*(char))->(void)
(	O
"%s: %s"	*(char)
,	O
np	*(char)
,	O
strerror	(int)->(*(char))
(	O
wrerrno	int
)	O
)	O
;	O
break	O
;	O
case	O
NO	int
:	O
write	*((*(void),*(char),long)->(long))
(	O
rem	int
,	O
""	*(char)
,	O
1	int
)	O
;	O
break	O
;	O
case	O
DISPLAYED	int
:	O
break	O
;	O
}	O
}	O
screwup	O
:	O
run_err	(*(char))->(void)
(	O
"protocol error: %s"	*(char)
,	O
why	*(char)
)	O
;	O
exit	(int)->(void)
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
int	O
response	()->(int)
(	O
void	O
)	O
{	O
char	O
ch	char
,	O
*	O
cp	*(char)
,	O
resp	char
,	O
rbuf	array(char)
[	O
BUFSIZ	int
]	O
;	O
if	O
(	O
read	*((*(void),*(char),long)->(long))
(	O
rem	int
,	O
&	O
resp	char
,	O
sizeof	O
resp	char
)	O
!=	O
sizeof	O
resp	char
)	O
lostconn	(int)->(void)
(	O
0	int
)	O
;	O
cp	*(char)
=	O
rbuf	array(char)
;	O
switch	O
(	O
resp	char
)	O
{	O
case	O
0	int
:	O
return	O
0	int
;	O
default	O
:	O
*	O
cp	*(char)
++	O
=	O
resp	char
;	O
case	O
1	int
:	O
case	O
2	int
:	O
do	O
{	O
if	O
(	O
read	*((*(void),*(char),long)->(long))
(	O
rem	int
,	O
&	O
ch	char
,	O
sizeof	O
(	O
ch	char
)	O
)	O
!=	O
sizeof	O
(	O
ch	char
)	O
)	O
lostconn	(int)->(void)
(	O
0	int
)	O
;	O
*	O
cp	*(char)
++	O
=	O
ch	char
;	O
}	O
while	O
(	O
cp	*(char)
<	O
&	O
rbuf	array(char)
[	O
BUFSIZ	int
]	O
&&	O
ch	char
!=	O
'\n'	O
)	O
;	O
if	O
(	O
!	O
iamremote	int
)	O
write	*((*(void),*(char),long)->(long))
(	O
STDERR_FILENO	int
,	O
rbuf	array(char)
,	O
cp	*(char)
-	O
rbuf	array(char)
)	O
;	O
++	O
errs	int
;	O
if	O
(	O
resp	char
==	O
1	int
)	O
return	O
-	O
1	int
;	O
exit	(int)->(void)
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
}	O
void	O
run_err	(*(char))->(void)
(	O
const	O
char	O
*	O
fmt	*(char)
,	O
...	O
)	O
{	O
static	O
FILE	struct
*	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
;	O
va_list	array(struct(int,int,*(void),*(void)))
ap	array(struct(int,int,*(void),*(void)))
;	O
va_start	O
(	O
ap	array(struct(int,int,*(void),*(void)))
,	O
fmt	*(char)
)	O
;	O
++	O
errs	int
;	O
if	O
(	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
==	O
NULL	O
&&	O
!	O
(	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
=	O
fdopen	(int,*(char))->(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))
(	O
rem	int
,	O
"w"	*(char)
)	O
)	O
)	O
return	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%c"	*(char)
,	O
0x01	int
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"rcp: "	*(char)
)	O
;	O
vfprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char),array(struct(int,int,*(void),*(void))))->(int)
(	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
fmt	*(char)
,	O
ap	array(struct(int,int,*(void),*(void)))
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"\n"	*(char)
)	O
;	O
fflush	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
if	O
(	O
!	O
iamremote	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s: "	*(char)
,	O
program_invocation_name	*(char)
)	O
;	O
vfprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char),array(struct(int,int,*(void),*(void))))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
fmt	*(char)
,	O
ap	array(struct(int,int,*(void),*(void)))
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"\n"	*(char)
)	O
;	O
}	O
va_end	O
(	O
ap	array(struct(int,int,*(void),*(void)))
)	O
;	O
}	O
char	O
*	O
colon	(*(char))->(*(char))
(	O
char	O
*	O
cp	*(char)
)	O
{	O
if	O
(	O
*	O
cp	*(char)
==	O
':'	O
)	O
return	O
(	O
0	int
)	O
;	O
for	O
(	O
;	O
*	O
cp	*(char)
;	O
++	O
cp	*(char)
)	O
{	O
if	O
(	O
*	O
cp	*(char)
==	O
':'	O
)	O
return	O
(	O
cp	*(char)
)	O
;	O
if	O
(	O
*	O
cp	*(char)
==	O
'/'	O
)	O
return	O
(	O
0	int
)	O
;	O
}	O
return	O
(	O
0	int
)	O
;	O
}	O
void	O
verifydir	(*(char))->(void)
(	O
char	O
*	O
cp	*(char)
)	O
{	O
struct	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
stb	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
;	O
if	O
(	O
!	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
(	O
cp	*(char)
,	O
&	O
stb	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
)	O
)	O
{	O
if	O
(	O
S_ISDIR	O
(	O
stb	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_mode	int
)	O
)	O
return	O
;	O
errno	O
=	O
ENOTDIR	int
;	O
}	O
run_err	(*(char))->(void)
(	O
"%s: %s"	*(char)
,	O
cp	*(char)
,	O
strerror	(int)->(*(char))
(	O
errno	O
)	O
)	O
;	O
exit	(int)->(void)
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
int	O
okname	(*(char))->(int)
(	O
char	O
*	O
cp0	*(char)
)	O
{	O
int	O
c	int
;	O
char	O
*	O
cp	*(char)
;	O
cp	*(char)
=	O
cp0	*(char)
;	O
do	O
{	O
c	int
=	O
*	O
cp	*(char)
;	O
if	O
(	O
c	int
&	O
0200	int
)	O
goto	O
bad	O
;	O
if	O
(	O
!	O
isalpha	(int)->(int)
(	O
c	int
)	O
&&	O
!	O
isdigit	(int)->(int)
(	O
c	int
)	O
&&	O
c	int
!=	O
'_'	O
&&	O
c	int
!=	O
'-'	O
)	O
goto	O
bad	O
;	O
}	O
while	O
(	O
*	O
++	O
cp	*(char)
)	O
;	O
return	O
(	O
1	int
)	O
;	O
bad	O
:	O
error	(int,int,*(char))->(void)
(	O
0	int
,	O
0	int
,	O
"%s: invalid user name"	*(char)
,	O
cp0	*(char)
)	O
;	O
return	O
(	O
0	int
)	O
;	O
}	O
int	O
susystem	(*(char),int)->(int)
(	O
char	O
*	O
s	long
,	O
int	O
userid	int
)	O
{	O
sighandler_t	*((int)->(void))
istat	*((int)->(void))
,	O
qstat	*((int)->(void))
;	O
int	O
status	int
;	O
pid_t	int
pid	int
;	O
pid	int
=	O
vfork	()->(int)
(	O
)	O
;	O
switch	O
(	O
pid	int
)	O
{	O
case	O
-	O
1	int
:	O
return	O
(	O
127	int
)	O
;	O
case	O
0	int
:	O
setuid	(int)->(int)
(	O
userid	int
)	O
;	O
execl	(*(char),*(char))->(int)
(	O
PATH_BSHELL	O
,	O
"sh"	*(char)
,	O
"-c"	*(char)
,	O
s	long
,	O
NULL	O
)	O
;	O
_exit	(int)->(void)
(	O
127	int
)	O
;	O
}	O
istat	*((int)->(void))
=	O
signal	(int,*((int)->(void)))->(*((int)->(void)))
(	O
SIGINT	int
,	O
SIG_IGN	O
)	O
;	O
qstat	*((int)->(void))
=	O
signal	(int,*((int)->(void)))->(*((int)->(void)))
(	O
SIGQUIT	int
,	O
SIG_IGN	O
)	O
;	O
if	O
(	O
waitpid	(int,*(int),int)->(int)
(	O
pid	int
,	O
&	O
status	int
,	O
0	int
)	O
<	O
0	int
)	O
status	int
=	O
-	O
1	int
;	O
signal	(int,*((int)->(void)))->(*((int)->(void)))
(	O
SIGINT	int
,	O
istat	*((int)->(void))
)	O
;	O
signal	(int,*((int)->(void)))->(*((int)->(void)))
(	O
SIGQUIT	int
,	O
qstat	*((int)->(void))
)	O
;	O
return	O
(	O
status	int
)	O
;	O
}	O
BUF	struct(int,*(char))
*	O
allocbuf	(*(struct(int,*(char))),int,int)->(*(struct(int,*(char))))
(	O
BUF	struct(int,*(char))
*	O
bp	*(char)
,	O
int	O
fd	int
,	O
int	O
blksize	int
)	O
{	O
struct	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
stb	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
;	O
size_t	long
size	int
;	O
if	O
(	O
fstat	(int,*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))))->(int)
(	O
fd	int
,	O
&	O
stb	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
)	O
<	O
0	int
)	O
{	O
run_err	(*(char))->(void)
(	O
"fstat: %s"	*(char)
,	O
strerror	(int)->(*(char))
(	O
errno	O
)	O
)	O
;	O
return	O
(	O
0	int
)	O
;	O
}	O
size	int
=	O
roundup	O
(	O
BUFSIZ	int
,	O
blksize	int
)	O
;	O
if	O
(	O
size	int
==	O
0	int
)	O
size	int
=	O
blksize	int
;	O
if	O
(	O
bp	*(char)
->	O
cnt	int
>=	O
size	int
)	O
return	O
(	O
bp	*(char)
)	O
;	O
if	O
(	O
(	O
bp	*(char)
->	O
buf	*(char)
=	O
realloc	(*(void),long)->(*(void))
(	O
bp	*(char)
->	O
buf	*(char)
,	O
size	int
)	O
)	O
==	O
NULL	O
)	O
{	O
bp	*(char)
->	O
cnt	int
=	O
0	int
;	O
run_err	(*(char))->(void)
(	O
"%s"	*(char)
,	O
strerror	(int)->(*(char))
(	O
errno	O
)	O
)	O
;	O
return	O
(	O
0	int
)	O
;	O
}	O
bp	*(char)
->	O
cnt	int
=	O
size	int
;	O
return	O
(	O
bp	*(char)
)	O
;	O
}	O
void	O
lostconn	(int)->(void)
(	O
int	O
signo	int
)	O
{	O
if	O
(	O
!	O
iamremote	int
)	O
error	(int,int,*(char))->(void)
(	O
0	int
,	O
0	int
,	O
"lost connection"	*(char)
)	O
;	O
exit	(int)->(void)
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
