static	O
int	O
get_received_date	(*(struct(int,*(void),*(struct),*(struct),*(struct),int,*(struct),*(struct),*(struct),*(struct(*`,*`,int,int)),*(struct),*(struct),*(struct),long,*((*`,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,int)->(int)),*((*`,*`)->(int)))),*(struct(int,int,int,int,int,int,int,int,int,long,*(char))),*(struct(int,*(char))))->(int)
(	O
mu_message_t	*(struct)
msg	*(struct)
,	O
struct	O
tm	struct(int,int,int,int,int,int,int,int,int,long,*(char))
*	O
tm	struct(int,int,int,int,int,int,int,int,int,long,*(char))
,	O
struct	O
mu_timezone	struct(int,*(char))
*	O
tz	*(struct(int,*(char)))
)	O
{	O
mu_header_t	*(struct)
hdr	*(struct)
;	O
int	O
rc	int
;	O
char	O
*	O
val	array(int)
;	O
char	O
*	O
p	*(char)
;	O
rc	int
=	O
mu_message_get_header	(*(struct),*(*(struct)))->(int)
(	O
msg	*(struct)
,	O
&	O
hdr	*(struct)
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
rc	int
=	O
mu_header_aget_value_unfold_n	(*(struct),*(char),int,*(*(char)))->(int)
(	O
hdr	*(struct)
,	O
MU_HEADER_RECEIVED	*(char)
,	O
-	O
1	int
,	O
&	O
val	array(int)
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
rc	int
=	O
MU_ERR_NOENT	O
;	O
p	*(char)
=	O
strchr	(*(char),int)->(*(char))
(	O
val	array(int)
,	O
';'	O
)	O
;	O
if	O
(	O
*	O
p	*(char)
)	O
{	O
p	*(char)
=	O
mu_str_skip_class	(*(char),int)->(*(char))
(	O
p	*(char)
+	O
1	int
,	O
MU_CTYPE_SPACE	int
)	O
;	O
if	O
(	O
*	O
p	*(char)
&&	O
mu_scan_datetime	(*(char),*(char),*(struct(int,int,int,int,int,int,int,int,int,long,*(char))),*(struct(int,*(char))),*(*(char)))->(int)
(	O
p	*(char)
,	O
MU_DATETIME_SCAN_RFC822	*(char)
,	O
tm	struct(int,int,int,int,int,int,int,int,int,long,*(char))
,	O
tz	*(struct(int,*(char)))
,	O
NULL	O
)	O
==	O
0	int
)	O
rc	int
=	O
0	int
;	O
}	O
free	(*(void))->(void)
(	O
val	array(int)
)	O
;	O
return	O
rc	int
;	O
}	O
static	O
int	O
message_envelope_date	(*(struct),*(char),long,*(long))->(int)
(	O
mu_envelope_t	*(struct)
envelope	*(struct)
,	O
char	O
*	O
buf	*(struct)
,	O
size_t	long
len	int
,	O
size_t	long
*	O
pnwrite	*(long)
)	O
{	O
mu_message_t	*(struct)
msg	*(struct)
=	O
mu_envelope_get_owner	(*(struct))->(*(void))
(	O
envelope	*(struct)
)	O
;	O
size_t	long
n	long
;	O
int	O
rc	int
=	O
0	int
;	O
if	O
(	O
msg	*(struct)
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
if	O
(	O
buf	*(struct)
==	O
NULL	O
||	O
len	int
==	O
0	int
)	O
{	O
n	long
=	O
MU_DATETIME_FROM_LENGTH	int
;	O
}	O
else	O
{	O
struct	O
tm	struct(int,int,int,int,int,int,int,int,int,long,*(char))
tm	struct(int,int,int,int,int,int,int,int,int,long,*(char))
;	O
struct	O
mu_timezone	struct(int,*(char))
tz	*(struct(int,*(char)))
;	O
time_t	long
t	long
;	O
char	O
tmpbuf	array(char)
[	O
MU_DATETIME_FROM_LENGTH	int
+	O
1	int
]	O
;	O
mu_stream_t	*(struct)
str	*(struct)
;	O
mu_off_t	long
size	long
;	O
rc	int
=	O
get_received_date	(*(struct(int,*(void),*(struct),*(struct),*(struct),int,*(struct),*(struct),*(struct),*(struct(*`,*`,int,int)),*(struct),*(struct),*(struct),long,*((*`,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,int)->(int)),*((*`,*`)->(int)))),*(struct(int,int,int,int,int,int,int,int,int,long,*(char))),*(struct(int,*(char))))->(int)
(	O
msg	*(struct)
,	O
&	O
tm	struct(int,int,int,int,int,int,int,int,int,long,*(char))
,	O
&	O
tz	*(struct(int,*(char)))
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
t	long
=	O
mu_datetime_to_utc	(*(struct(int,int,int,int,int,int,int,int,int,long,*(char))),*(struct(int,*(char))))->(long)
(	O
&	O
tm	struct(int,int,int,int,int,int,int,int,int,long,*(char))
,	O
&	O
tz	*(struct(int,*(char)))
)	O
;	O
rc	int
=	O
mu_fixed_memory_stream_create	(*(*(struct)),*(void),long,int)->(int)
(	O
&	O
str	*(struct)
,	O
tmpbuf	array(char)
,	O
sizeof	O
(	O
tmpbuf	array(char)
)	O
,	O
MU_STREAM_RDWR	O
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
rc	int
=	O
mu_c_streamftime	(*(struct),*(char),*(struct(int,int,int,int,int,int,int,int,int,long,*(char))),*(struct(int,*(char))))->(int)
(	O
str	*(struct)
,	O
MU_DATETIME_FROM	*(char)
,	O
gmtime	(*(long))->(*(struct(int,int,int,int,int,int,int,int,int,long,*(char))))
(	O
&	O
t	long
)	O
,	O
NULL	O
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_stream_unref	(*(struct))->(void)
(	O
str	*(struct)
)	O
;	O
return	O
rc	int
;	O
}	O
rc	int
=	O
mu_stream_seek	(*(struct),long,int,*(long))->(int)
(	O
str	*(struct)
,	O
0	int
,	O
MU_SEEK_CUR	int
,	O
&	O
size	long
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_stream_unref	(*(struct))->(void)
(	O
str	*(struct)
)	O
;	O
return	O
rc	int
;	O
}	O
if	O
(	O
size	long
>	O
len	int
)	O
size	long
=	O
len	int
;	O
mu_stream_seek	(*(struct),long,int,*(long))->(int)
(	O
str	*(struct)
,	O
0	int
,	O
MU_SEEK_SET	int
,	O
NULL	O
)	O
;	O
rc	int
=	O
mu_stream_read	(*(struct),*(void),long,*(long))->(int)
(	O
str	*(struct)
,	O
buf	*(struct)
,	O
size	long
,	O
&	O
n	long
)	O
;	O
if	O
(	O
n	long
<	O
len	int
)	O
buf	*(struct)
[	O
n	long
]	O
=	O
0	int
;	O
mu_stream_unref	(*(struct))->(void)
(	O
str	*(struct)
)	O
;	O
}	O
if	O
(	O
pnwrite	*(long)
)	O
*	O
pnwrite	*(long)
=	O
n	long
;	O
return	O
rc	int
;	O
}	O
static	O
int	O
message_envelope_sender	(*(struct),*(char),long,*(long))->(int)
(	O
mu_envelope_t	*(struct)
envelope	*(struct)
,	O
char	O
*	O
buf	*(struct)
,	O
size_t	long
len	int
,	O
size_t	long
*	O
pnwrite	*(long)
)	O
{	O
mu_message_t	*(struct)
msg	*(struct)
=	O
mu_envelope_get_owner	(*(struct))->(*(void))
(	O
envelope	*(struct)
)	O
;	O
mu_header_t	*(struct)
header	*(struct)
;	O
int	O
status	int
;	O
const	O
char	O
*	O
sender	*(struct)
;	O
struct	O
mu_auth_data	struct(*(char),*(char),*(char),int,int,*(char),*(char),*(char),*(char),long,int,int)
*	O
auth	*(*(struct(*(char),*(char),*(char),int,int,*(char),*(char),*(char),*(char),long,int,int)))
=	O
NULL	O
;	O
static	O
char	O
*	O
hdrnames	array(*(char))
[	O
]	O
=	O
{	O
"Return-Path"	*(char)
,	O
"X-Envelope-Sender"	*(char)
,	O
"X-Envelope-From"	*(char)
,	O
"X-Original-Sender"	*(char)
,	O
"From"	*(char)
,	O
NULL	O
}	O
;	O
mu_address_t	*(struct)
address	array(char)
=	O
NULL	O
;	O
if	O
(	O
msg	*(struct)
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
status	int
=	O
mu_message_get_header	(*(struct),*(*(struct)))->(int)
(	O
msg	*(struct)
,	O
&	O
header	*(struct)
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
status	int
=	O
mu_header_sget_firstof	(*(struct),*(*(char)),*(*(char)),*(int))->(int)
(	O
header	*(struct)
,	O
hdrnames	array(*(char))
,	O
&	O
sender	*(struct)
,	O
NULL	O
)	O
;	O
if	O
(	O
status	int
)	O
{	O
auth	*(*(struct(*(char),*(char),*(char),int,int,*(char),*(char),*(char),*(char),long,int,int)))
=	O
mu_get_auth_by_uid	(int)->(*(struct(*(char),*(char),*(char),int,int,*(char),*(char),*(char),*(char),long,int,int)))
(	O
getuid	()->(int)
(	O
)	O
)	O
;	O
if	O
(	O
!	O
auth	*(*(struct(*(char),*(char),*(char),int,int,*(char),*(char),*(char),*(char),long,int,int)))
)	O
return	O
MU_ERR_NOENT	O
;	O
sender	*(struct)
=	O
auth	*(*(struct(*(char),*(char),*(char),int,int,*(char),*(char),*(char),*(char),long,int,int)))
->	O
name	*(char)
;	O
}	O
status	int
=	O
mu_address_create	(*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))),*(char))->(int)
(	O
&	O
address	array(char)
,	O
sender	*(struct)
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
{	O
status	int
=	O
mu_address_sget_email	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))),long,*(*(char)))->(int)
(	O
address	array(char)
,	O
1	int
,	O
&	O
sender	*(struct)
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
{	O
if	O
(	O
sender	*(struct)
==	O
NULL	O
)	O
status	int
=	O
MU_ERR_NOENT	O
;	O
else	O
{	O
size_t	long
n	long
=	O
strlen	(*(char))->(long)
(	O
sender	*(struct)
)	O
;	O
if	O
(	O
buf	*(struct)
&&	O
len	int
>	O
0	int
)	O
{	O
len	int
--	O
;	O
n	long
=	O
(	O
n	long
<	O
len	int
)	O
?	O
n	long
:	O
len	int
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
buf	*(struct)
,	O
sender	*(struct)
,	O
n	long
)	O
;	O
buf	*(struct)
[	O
n	long
]	O
=	O
'\0'	O
;	O
}	O
if	O
(	O
pnwrite	*(long)
)	O
*	O
pnwrite	*(long)
=	O
n	long
;	O
}	O
}	O
mu_address_destroy	(*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))->(void)
(	O
&	O
address	array(char)
)	O
;	O
}	O
if	O
(	O
auth	*(*(struct(*(char),*(char),*(char),int,int,*(char),*(char),*(char),*(char),long,int,int)))
)	O
mu_auth_data_free	(*(struct(*(char),*(char),*(char),int,int,*(char),*(char),*(char),*(char),long,int,int)))->(void)
(	O
auth	*(*(struct(*(char),*(char),*(char),int,int,*(char),*(char),*(char),*(char),long,int,int)))
)	O
;	O
return	O
status	int
;	O
}	O
int	O
mu_message_get_envelope	(*(struct),*(*(struct)))->(int)
(	O
mu_message_t	*(struct)
msg	*(struct)
,	O
mu_envelope_t	*(struct)
*	O
penvelope	*(*(struct))
)	O
{	O
if	O
(	O
msg	*(struct)
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
if	O
(	O
penvelope	*(*(struct))
==	O
NULL	O
)	O
return	O
MU_ERR_OUT_PTR_NULL	O
;	O
if	O
(	O
msg	*(struct)
->	O
envelope	*(struct)
==	O
NULL	O
)	O
{	O
mu_envelope_t	*(struct)
envelope	*(struct)
;	O
int	O
status	int
=	O
mu_envelope_create	(*(*(struct)),*(void))->(int)
(	O
&	O
envelope	*(struct)
,	O
msg	*(struct)
)	O
;	O
if	O
(	O
status	int
!=	O
0	int
)	O
return	O
status	int
;	O
mu_envelope_set_sender	(*(struct),*((*(struct),*(char),long,*(long))->(int)),*(void))->(int)
(	O
envelope	*(struct)
,	O
message_envelope_sender	(*(struct),*(char),long,*(long))->(int)
,	O
msg	*(struct)
)	O
;	O
mu_envelope_set_date	(*(struct),*((*(struct),*(char),long,*(long))->(int)),*(void))->(int)
(	O
envelope	*(struct)
,	O
message_envelope_date	(*(struct),*(char),long,*(long))->(int)
,	O
msg	*(struct)
)	O
;	O
msg	*(struct)
->	O
envelope	*(struct)
=	O
envelope	*(struct)
;	O
}	O
*	O
penvelope	*(*(struct))
=	O
msg	*(struct)
->	O
envelope	*(struct)
;	O
return	O
0	int
;	O
}	O
int	O
mu_message_set_envelope	(*(struct),*(struct),*(void))->(int)
(	O
mu_message_t	*(struct)
msg	*(struct)
,	O
mu_envelope_t	*(struct)
envelope	*(struct)
,	O
void	O
*	O
owner	*(void)
)	O
{	O
if	O
(	O
msg	*(struct)
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
if	O
(	O
msg	*(struct)
->	O
owner	*(void)
!=	O
owner	*(void)
)	O
return	O
EACCES	int
;	O
if	O
(	O
msg	*(struct)
->	O
envelope	*(struct)
)	O
mu_envelope_destroy	(*(*(struct)),*(void))->(void)
(	O
&	O
msg	*(struct)
->	O
envelope	*(struct)
,	O
msg	*(struct)
)	O
;	O
msg	*(struct)
->	O
envelope	*(struct)
=	O
envelope	*(struct)
;	O
msg	*(struct)
->	O
flags	int
|=	O
MESSAGE_MODIFIED	int
;	O
return	O
0	int
;	O
}	O
