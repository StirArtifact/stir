struct	O
gss_status_codes	struct(int,*(char),*(char))
{	O
gss_uint32	int
err	int
;	O
const	O
char	O
*	O
name	*(*(struct))
;	O
const	O
char	O
*	O
text	*(char)
;	O
}	O
;	O
static	O
struct	O
gss_status_codes	struct(int,*(char),*(char))
gss_calling_errors	array(struct(int,*(char),*(char)))
[	O
]	O
=	O
{	O
{	O
GSS_S_CALL_INACCESSIBLE_READ	O
,	O
"GSS_S_CALL_INACCESSIBLE_READ"	*(char)
,	O
N_	O
(	O
"A required input parameter could not be read"	*(char)
)	O
}	O
,	O
{	O
GSS_S_CALL_INACCESSIBLE_WRITE	O
,	O
"GSS_S_CALL_INACCESSIBLE_WRITE"	*(char)
,	O
N_	O
(	O
"A required output parameter could not be written"	*(char)
)	O
}	O
,	O
{	O
GSS_S_CALL_BAD_STRUCTURE	O
,	O
"GSS_S_CALL_BAD_STRUCTURE"	*(char)
,	O
N_	O
(	O
"A parameter was malformed"	*(char)
)	O
}	O
}	O
;	O
static	O
struct	O
gss_status_codes	struct(int,*(char),*(char))
gss_routine_errors	array(struct(int,*(char),*(char)))
[	O
]	O
=	O
{	O
{	O
GSS_S_BAD_MECH	O
,	O
"GSS_S_BAD_MECH"	*(char)
,	O
N_	O
(	O
"An unsupported mechanism was requested"	*(char)
)	O
}	O
,	O
{	O
GSS_S_BAD_NAME	O
,	O
"GSS_S_BAD_NAME"	*(char)
,	O
N_	O
(	O
"An invalid name was supplied"	*(char)
)	O
}	O
,	O
{	O
GSS_S_BAD_NAMETYPE	O
,	O
"GSS_S_BAD_NAMETYPE"	*(char)
,	O
N_	O
(	O
"A supplied name was of an unsupported type"	*(char)
)	O
}	O
,	O
{	O
GSS_S_BAD_BINDINGS	O
,	O
"GSS_S_BAD_BINDINGS"	*(char)
,	O
N_	O
(	O
"Incorrect channel bindings were supplied"	*(char)
)	O
}	O
,	O
{	O
GSS_S_BAD_STATUS	O
,	O
"GSS_S_BAD_STATUS"	*(char)
,	O
N_	O
(	O
"An invalid status code was supplied"	*(char)
)	O
}	O
,	O
{	O
GSS_S_BAD_SIG	O
,	O
"GSS_S_BAD_SIG"	*(char)
,	O
N_	O
(	O
"A token had an invalid MIC"	*(char)
)	O
}	O
,	O
{	O
GSS_S_NO_CRED	O
,	O
"GSS_S_NO_CRED"	*(char)
,	O
N_	O
(	O
"No credentials were supplied, or the credentials were unavailable "	*(char)
"or inaccessible"	*(char)
)	O
}	O
,	O
{	O
GSS_S_NO_CONTEXT	O
,	O
"GSS_S_NO_CONTEXT"	*(char)
,	O
N_	O
(	O
"No context has been established"	*(char)
)	O
}	O
,	O
{	O
GSS_S_DEFECTIVE_TOKEN	O
,	O
"GSS_S_DEFECTIVE_TOKEN"	*(char)
,	O
N_	O
(	O
"A token was invalid"	*(char)
)	O
}	O
,	O
{	O
GSS_S_DEFECTIVE_CREDENTIAL	O
,	O
"GSS_S_DEFECTIVE_CREDENTIAL"	*(char)
,	O
N_	O
(	O
"A credential was invalid"	*(char)
)	O
}	O
,	O
{	O
GSS_S_CREDENTIALS_EXPIRED	O
,	O
"GSS_S_CREDENTIALS_EXPIRED"	*(char)
,	O
N_	O
(	O
"The referenced credentials have expired"	*(char)
)	O
}	O
,	O
{	O
GSS_S_CONTEXT_EXPIRED	O
,	O
"GSS_S_CONTEXT_EXPIRED"	*(char)
,	O
N_	O
(	O
"The context has expired"	*(char)
)	O
}	O
,	O
{	O
GSS_S_FAILURE	O
,	O
"GSS_S_FAILURE"	*(char)
,	O
N_	O
(	O
"Unspecified error in underlying mechanism"	*(char)
)	O
}	O
,	O
{	O
GSS_S_BAD_QOP	O
,	O
"GSS_S_BAD_QOP"	*(char)
,	O
N_	O
(	O
"The quality-of-protection requested could not be provided"	*(char)
)	O
}	O
,	O
{	O
GSS_S_UNAUTHORIZED	O
,	O
"GSS_S_UNAUTHORIZED"	*(char)
,	O
N_	O
(	O
"The operation is forbidden by local security policy"	*(char)
)	O
}	O
,	O
{	O
GSS_S_UNAVAILABLE	O
,	O
"GSS_S_UNAVAILABLE"	*(char)
,	O
N_	O
(	O
"The operation or option is unavailable"	*(char)
)	O
}	O
,	O
{	O
GSS_S_DUPLICATE_ELEMENT	O
,	O
"GSS_S_DUPLICATE_ELEMENT"	*(char)
,	O
N_	O
(	O
"The requested credential element already exists"	*(char)
)	O
}	O
,	O
{	O
GSS_S_NAME_NOT_MN	O
,	O
"GSS_S_NAME_NOT_MN"	*(char)
,	O
N_	O
(	O
"The provided name was not a mechanism name"	*(char)
)	O
}	O
}	O
;	O
static	O
struct	O
gss_status_codes	struct(int,*(char),*(char))
gss_supplementary_errors	array(struct(int,*(char),*(char)))
[	O
]	O
=	O
{	O
{	O
GSS_S_CONTINUE_NEEDED	O
,	O
"GSS_S_CONTINUE_NEEDED"	*(char)
,	O
N_	O
(	O
"The gss_init_sec_context() or gss_accept_sec_context() function "	*(char)
"must be called again to complete its function"	*(char)
)	O
}	O
,	O
{	O
GSS_S_DUPLICATE_TOKEN	O
,	O
"GSS_S_DUPLICATE_TOKEN"	*(char)
,	O
N_	O
(	O
"The token was a duplicate of an earlier token"	*(char)
)	O
}	O
,	O
{	O
GSS_S_OLD_TOKEN	O
,	O
"GSS_S_OLD_TOKEN"	*(char)
,	O
N_	O
(	O
"The token's validity period has expired"	*(char)
)	O
}	O
,	O
{	O
GSS_S_UNSEQ_TOKEN	O
,	O
"GSS_S_UNSEQ_TOKEN"	*(char)
,	O
N_	O
(	O
"A later token has already been processed"	*(char)
)	O
}	O
,	O
{	O
GSS_S_GAP_TOKEN	O
,	O
"GSS_S_GAP_TOKEN"	*(char)
,	O
N_	O
(	O
"An expected per-message token was not received"	*(char)
)	O
}	O
}	O
;	O
OM_uint32	int
gss_display_status	(*(int),int,int,*(struct(int,*(void))),*(int),*(struct(long,*(void))))->(int)
(	O
OM_uint32	int
*	O
minor_status	*(int)
,	O
OM_uint32	int
status_value	int
,	O
int	O
status_type	int
,	O
const	O
gss_OID	*(struct(int,*(void)))
mech_type	*(struct(int,*(void)))
,	O
OM_uint32	int
*	O
message_context	*(int)
,	O
gss_buffer_t	*(struct(long,*(void)))
status_string	*(struct(long,*(void)))
)	O
{	O
size_t	long
i	long
;	O
bindtextdomain	(*(char),*(char))->(*(char))
(	O
PACKAGE	*(char)
PO_SUFFIX	*(char)
,	O
LOCALEDIR	O
)	O
;	O
if	O
(	O
minor_status	*(int)
)	O
*	O
minor_status	*(int)
=	O
0	int
;	O
if	O
(	O
message_context	*(int)
)	O
status_value	int
&=	O
~	O
*	O
message_context	*(int)
;	O
switch	O
(	O
status_type	int
)	O
{	O
case	O
GSS_C_GSS_CODE	int
:	O
if	O
(	O
message_context	*(int)
)	O
{	O
*	O
message_context	*(int)
|=	O
GSS_C_ROUTINE_ERROR_MASK	int
<<	O
GSS_C_ROUTINE_ERROR_OFFSET	int
;	O
if	O
(	O
(	O
status_value	int
&	O
~	O
*	O
message_context	*(int)
)	O
==	O
0	int
)	O
*	O
message_context	*(int)
=	O
0	int
;	O
}	O
switch	O
(	O
GSS_ROUTINE_ERROR	O
(	O
status_value	int
)	O
)	O
{	O
case	O
0	int
:	O
break	O
;	O
case	O
GSS_S_BAD_MECH	O
:	O
case	O
GSS_S_BAD_NAME	O
:	O
case	O
GSS_S_BAD_NAMETYPE	O
:	O
case	O
GSS_S_BAD_BINDINGS	O
:	O
case	O
GSS_S_BAD_STATUS	O
:	O
case	O
GSS_S_BAD_SIG	O
:	O
case	O
GSS_S_NO_CRED	O
:	O
case	O
GSS_S_NO_CONTEXT	O
:	O
case	O
GSS_S_DEFECTIVE_TOKEN	O
:	O
case	O
GSS_S_DEFECTIVE_CREDENTIAL	O
:	O
case	O
GSS_S_CREDENTIALS_EXPIRED	O
:	O
case	O
GSS_S_CONTEXT_EXPIRED	O
:	O
case	O
GSS_S_FAILURE	O
:	O
case	O
GSS_S_BAD_QOP	O
:	O
case	O
GSS_S_UNAUTHORIZED	O
:	O
case	O
GSS_S_UNAVAILABLE	O
:	O
case	O
GSS_S_DUPLICATE_ELEMENT	O
:	O
case	O
GSS_S_NAME_NOT_MN	O
:	O
status_string	*(struct(long,*(void)))
->	O
value	*(void)
=	O
strdup	(*(char))->(*(char))
(	O
_	O
(	O
gss_routine_errors	array(struct(int,*(char),*(char)))
[	O
(	O
GSS_ROUTINE_ERROR	O
(	O
status_value	int
)	O
>>	O
GSS_C_ROUTINE_ERROR_OFFSET	int
)	O
-	O
1	int
]	O
.	O
text	*(char)
)	O
)	O
;	O
if	O
(	O
!	O
status_string	*(struct(long,*(void)))
->	O
value	*(void)
)	O
{	O
if	O
(	O
minor_status	*(int)
)	O
*	O
minor_status	*(int)
=	O
ENOMEM	int
;	O
return	O
GSS_S_FAILURE	O
;	O
}	O
status_string	*(struct(long,*(void)))
->	O
length	int
=	O
strlen	(*(char))->(long)
(	O
status_string	*(struct(long,*(void)))
->	O
value	*(void)
)	O
;	O
return	O
GSS_S_COMPLETE	int
;	O
break	O
;	O
default	O
:	O
return	O
GSS_S_BAD_STATUS	O
;	O
break	O
;	O
}	O
if	O
(	O
message_context	*(int)
)	O
{	O
*	O
message_context	*(int)
|=	O
GSS_C_CALLING_ERROR_MASK	int
<<	O
GSS_C_CALLING_ERROR_OFFSET	int
;	O
if	O
(	O
(	O
status_value	int
&	O
~	O
*	O
message_context	*(int)
)	O
==	O
0	int
)	O
*	O
message_context	*(int)
=	O
0	int
;	O
}	O
switch	O
(	O
GSS_CALLING_ERROR	O
(	O
status_value	int
)	O
)	O
{	O
case	O
0	int
:	O
break	O
;	O
case	O
GSS_S_CALL_INACCESSIBLE_READ	O
:	O
case	O
GSS_S_CALL_INACCESSIBLE_WRITE	O
:	O
case	O
GSS_S_CALL_BAD_STRUCTURE	O
:	O
status_string	*(struct(long,*(void)))
->	O
value	*(void)
=	O
strdup	(*(char))->(*(char))
(	O
_	O
(	O
gss_calling_errors	array(struct(int,*(char),*(char)))
[	O
(	O
GSS_CALLING_ERROR	O
(	O
status_value	int
)	O
>>	O
GSS_C_CALLING_ERROR_OFFSET	int
)	O
-	O
1	int
]	O
.	O
text	*(char)
)	O
)	O
;	O
if	O
(	O
!	O
status_string	*(struct(long,*(void)))
->	O
value	*(void)
)	O
{	O
if	O
(	O
minor_status	*(int)
)	O
*	O
minor_status	*(int)
=	O
ENOMEM	int
;	O
return	O
GSS_S_FAILURE	O
;	O
}	O
status_string	*(struct(long,*(void)))
->	O
length	int
=	O
strlen	(*(char))->(long)
(	O
status_string	*(struct(long,*(void)))
->	O
value	*(void)
)	O
;	O
return	O
GSS_S_COMPLETE	int
;	O
break	O
;	O
default	O
:	O
return	O
GSS_S_BAD_STATUS	O
;	O
break	O
;	O
}	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
sizeof	O
(	O
gss_supplementary_errors	array(struct(int,*(char),*(char)))
)	O
/	O
sizeof	O
(	O
gss_supplementary_errors	array(struct(int,*(char),*(char)))
[	O
0	int
]	O
)	O
;	O
i	long
++	O
)	O
if	O
(	O
gss_supplementary_errors	array(struct(int,*(char),*(char)))
[	O
i	long
]	O
.	O
err	int
&	O
GSS_SUPPLEMENTARY_INFO	O
(	O
status_value	int
)	O
)	O
{	O
status_string	*(struct(long,*(void)))
->	O
value	*(void)
=	O
strdup	(*(char))->(*(char))
(	O
_	O
(	O
gss_supplementary_errors	array(struct(int,*(char),*(char)))
[	O
i	long
]	O
.	O
text	*(char)
)	O
)	O
;	O
if	O
(	O
!	O
status_string	*(struct(long,*(void)))
->	O
value	*(void)
)	O
{	O
if	O
(	O
minor_status	*(int)
)	O
*	O
minor_status	*(int)
=	O
ENOMEM	int
;	O
return	O
GSS_S_FAILURE	O
;	O
}	O
status_string	*(struct(long,*(void)))
->	O
length	int
=	O
strlen	(*(char))->(long)
(	O
status_string	*(struct(long,*(void)))
->	O
value	*(void)
)	O
;	O
*	O
message_context	*(int)
|=	O
gss_supplementary_errors	array(struct(int,*(char),*(char)))
[	O
i	long
]	O
.	O
err	int
;	O
if	O
(	O
(	O
status_value	int
&	O
~	O
*	O
message_context	*(int)
)	O
==	O
0	int
)	O
*	O
message_context	*(int)
=	O
0	int
;	O
return	O
GSS_S_COMPLETE	int
;	O
}	O
if	O
(	O
GSS_SUPPLEMENTARY_INFO	O
(	O
status_value	int
)	O
)	O
return	O
GSS_S_BAD_STATUS	O
;	O
if	O
(	O
message_context	*(int)
)	O
*	O
message_context	*(int)
=	O
0	int
;	O
status_string	*(struct(long,*(void)))
->	O
value	*(void)
=	O
strdup	(*(char))->(*(char))
(	O
_	O
(	O
"No error"	*(char)
)	O
)	O
;	O
if	O
(	O
!	O
status_string	*(struct(long,*(void)))
->	O
value	*(void)
)	O
{	O
if	O
(	O
minor_status	*(int)
)	O
*	O
minor_status	*(int)
=	O
ENOMEM	int
;	O
return	O
GSS_S_FAILURE	O
;	O
}	O
status_string	*(struct(long,*(void)))
->	O
length	int
=	O
strlen	(*(char))->(long)
(	O
status_string	*(struct(long,*(void)))
->	O
value	*(void)
)	O
;	O
break	O
;	O
case	O
GSS_C_MECH_CODE	int
:	O
{	O
_gss_mech_api_t	*(struct(*(struct(int,*(void))),*(char),*(char),*(char),array(*(struct(int,*(void)))),*((*(int),*(struct`),*(*`),*(struct`),*(struct`),int,int,*(struct`),*(struct`),*(*`),*(struct`),*(int),*(int))->(int)),*((*(int),*(struct`),*(struct`),*(*`))->(int)),*((*(int),*(struct`),*(struct`))->(int)),*((*(int),*(struct`),int,int,*(struct`),*(int),*(struct`))->(int)),*((*(int),*(struct`),*(struct`),*(struct`),*(int),*(int))->(int)),*((*(int),*(struct`),int,*(struct`),*(struct`))->(int)),*((*(int),*(struct`),*(struct`),*(struct`),*(int))->(int)),*((*(int),int,int,*(struct`),*(int),*(struct`))->(int)),*((*(int),*(struct`),int,*(struct`),int,*(*`),*(*`),*(int))->(int)),*((*(int),*(*`))->(int)),*((*(int),*(*`),*(struct`),*(struct`),*(struct`),*(*`),*(*`),*(struct`),*(int),*(int),*(*`))->(int)),*((*(int),*(*`),*(struct`))->(int)),*((*(int),*(struct`),*(int))->(int)),*((*(int),*(struct`),*(*`),*(int),*(int),*(*`))->(int)),*((*(int),*(struct`),*(struct`),*(*`),*(int),*(int),*(int))->(int))))
mech	*(struct(int,*(void)))
;	O
mech	*(struct(int,*(void)))
=	O
_gss_find_mech	(*(struct(int,*(void))))->(*(struct(*(struct(int,*`)),*(char),*(char),*(char),array(*(struct(int,*(void)))),*((*`,*`,*`,*`,*`,int,int,*`,*`,*`,*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,int,int,*`,*`,*`)->(int)),*((*`,*`,*`,*`,*`,*`)->(int)),*((*`,*`,int,*`,*`)->(int)),*((*`,*`,*`,*`,*`)->(int)),*((*`,int,int,*`,*`,*`)->(int)),*((*`,*`,int,*`,int,*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,*`,*`,*`,*`)->(int)),*((*`,*`,*`,*`,*`,*`,*`)->(int)))))
(	O
mech_type	*(struct(int,*(void)))
)	O
;	O
return	O
mech	*(struct(int,*(void)))
->	O
display_status	*((*(int),int,int,*(struct(int,*(void))),*(int),*(struct(long,*(void))))->(int))
(	O
minor_status	*(int)
,	O
status_value	int
,	O
status_type	int
,	O
mech_type	*(struct(int,*(void)))
,	O
message_context	*(int)
,	O
status_string	*(struct(long,*(void)))
)	O
;	O
}	O
break	O
;	O
default	O
:	O
return	O
GSS_S_BAD_STATUS	O
;	O
}	O
return	O
GSS_S_COMPLETE	int
;	O
}	O
