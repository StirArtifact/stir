mp_bitcnt_t	long
mpz_remove	O
(	O
mpz_ptr	*(struct(int,int,*(long)))
dest	*(struct(int,int,*(long)))
,	O
mpz_srcptr	*(struct(int,int,*(long)))
src	*(struct(int,int,*(long)))
,	O
mpz_srcptr	*(struct(int,int,*(long)))
f	*(struct(int,int,*(long)))
)	O
{	O
mp_bitcnt_t	long
pwr	long
;	O
mp_srcptr	*(long)
fp	*(long)
;	O
mp_size_t	long
sn	long
,	O
fn	long
,	O
afn	long
;	O
mp_limb_t	long
fp0	long
;	O
sn	long
=	O
SIZ	O
(	O
src	*(struct(int,int,*(long)))
)	O
;	O
fn	long
=	O
SIZ	O
(	O
f	*(struct(int,int,*(long)))
)	O
;	O
fp	*(long)
=	O
PTR	O
(	O
f	*(struct(int,int,*(long)))
)	O
;	O
afn	long
=	O
ABS	O
(	O
fn	long
)	O
;	O
fp0	long
=	O
fp	*(long)
[	O
0	int
]	O
;	O
if	O
(	O
UNLIKELY	O
(	O
(	O
afn	long
<=	O
(	O
fp0	long
==	O
1	int
)	O
)	O
|	O
(	O
sn	long
==	O
0	int
)	O
)	O
)	O
{	O
if	O
(	O
afn	long
==	O
0	int
)	O
DIVIDE_BY_ZERO	O
;	O
mpz_set	O
(	O
dest	*(struct(int,int,*(long)))
,	O
src	*(struct(int,int,*(long)))
)	O
;	O
return	O
0	int
;	O
}	O
if	O
(	O
(	O
fp0	long
&	O
1	int
)	O
!=	O
0	int
)	O
{	O
mp_ptr	*(long)
dp	*(long)
;	O
mp_size_t	long
dn	long
;	O
dn	long
=	O
ABS	O
(	O
sn	long
)	O
;	O
dp	*(long)
=	O
MPZ_REALLOC	O
(	O
dest	*(struct(int,int,*(long)))
,	O
dn	long
)	O
;	O
pwr	long
=	O
mpn_remove	O
(	O
dp	*(long)
,	O
&	O
dn	long
,	O
PTR	O
(	O
src	*(struct(int,int,*(long)))
)	O
,	O
dn	long
,	O
PTR	O
(	O
f	*(struct(int,int,*(long)))
)	O
,	O
afn	long
,	O
~	O
(	O
mp_bitcnt_t	long
)	O
0	int
)	O
;	O
SIZ	O
(	O
dest	*(struct(int,int,*(long)))
)	O
=	O
(	O
(	O
pwr	long
&	O
(	O
fn	long
<	O
0	int
)	O
)	O
^	O
(	O
sn	long
<	O
0	int
)	O
)	O
?	O
-	O
dn	long
:	O
dn	long
;	O
}	O
else	O
if	O
(	O
afn	long
==	O
(	O
fp0	long
==	O
2	int
)	O
)	O
{	O
pwr	long
=	O
mpz_scan1	O
(	O
src	*(struct(int,int,*(long)))
,	O
0	int
)	O
;	O
mpz_div_2exp	O
(	O
dest	*(struct(int,int,*(long)))
,	O
src	*(struct(int,int,*(long)))
,	O
pwr	long
)	O
;	O
if	O
(	O
pwr	long
&	O
(	O
fn	long
<	O
0	int
)	O
)	O
mpz_neg	O
(	O
dest	*(struct(int,int,*(long)))
,	O
dest	*(struct(int,int,*(long)))
)	O
;	O
}	O
else	O
{	O
mpz_t	array(struct(int,int,*(long)))
fpow	array(array(struct(int,int,*(long))))
[	O
GMP_LIMB_BITS	int
]	O
;	O
mpz_t	array(struct(int,int,*(long)))
x	array(struct(int,int,*(long)))
,	O
rem	long
;	O
int	O
p	*(char)
;	O
mpz_init	O
(	O
rem	long
)	O
;	O
mpz_init	O
(	O
x	array(struct(int,int,*(long)))
)	O
;	O
pwr	long
=	O
0	int
;	O
mpz_init_set	O
(	O
fpow	array(array(struct(int,int,*(long))))
[	O
0	int
]	O
,	O
f	*(struct(int,int,*(long)))
)	O
;	O
mpz_set	O
(	O
dest	*(struct(int,int,*(long)))
,	O
src	*(struct(int,int,*(long)))
)	O
;	O
for	O
(	O
p	*(char)
=	O
0	int
;	O
;	O
p	*(char)
++	O
)	O
{	O
mpz_tdiv_qr	O
(	O
x	array(struct(int,int,*(long)))
,	O
rem	long
,	O
dest	*(struct(int,int,*(long)))
,	O
fpow	array(array(struct(int,int,*(long))))
[	O
p	*(char)
]	O
)	O
;	O
if	O
(	O
SIZ	O
(	O
rem	long
)	O
!=	O
0	int
)	O
break	O
;	O
mpz_init	O
(	O
fpow	array(array(struct(int,int,*(long))))
[	O
p	*(char)
+	O
1	int
]	O
)	O
;	O
mpz_mul	O
(	O
fpow	array(array(struct(int,int,*(long))))
[	O
p	*(char)
+	O
1	int
]	O
,	O
fpow	array(array(struct(int,int,*(long))))
[	O
p	*(char)
]	O
,	O
fpow	array(array(struct(int,int,*(long))))
[	O
p	*(char)
]	O
)	O
;	O
mpz_set	O
(	O
dest	*(struct(int,int,*(long)))
,	O
x	array(struct(int,int,*(long)))
)	O
;	O
}	O
pwr	long
=	O
(	O
(	O
mp_bitcnt_t	long
)	O
1	int
<<	O
p	*(char)
)	O
-	O
1	int
;	O
mpz_clear	O
(	O
fpow	array(array(struct(int,int,*(long))))
[	O
p	*(char)
]	O
)	O
;	O
while	O
(	O
--	O
p	*(char)
>=	O
0	int
)	O
{	O
mpz_tdiv_qr	O
(	O
x	array(struct(int,int,*(long)))
,	O
rem	long
,	O
dest	*(struct(int,int,*(long)))
,	O
fpow	array(array(struct(int,int,*(long))))
[	O
p	*(char)
]	O
)	O
;	O
if	O
(	O
SIZ	O
(	O
rem	long
)	O
==	O
0	int
)	O
{	O
pwr	long
+=	O
(	O
mp_bitcnt_t	long
)	O
1	int
<<	O
p	*(char)
;	O
mpz_set	O
(	O
dest	*(struct(int,int,*(long)))
,	O
x	array(struct(int,int,*(long)))
)	O
;	O
}	O
mpz_clear	O
(	O
fpow	array(array(struct(int,int,*(long))))
[	O
p	*(char)
]	O
)	O
;	O
}	O
mpz_clear	O
(	O
x	array(struct(int,int,*(long)))
)	O
;	O
mpz_clear	O
(	O
rem	long
)	O
;	O
}	O
return	O
pwr	long
;	O
}	O
