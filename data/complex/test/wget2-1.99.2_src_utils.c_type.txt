void	O
mkdir_path	(*(char),bool)->(void)
(	O
const	O
char	O
*	O
_fname	*(char)
,	O
bool	bool
is_file	bool
)	O
{	O
const	O
char	O
*	O
p1	*(char)
;	O
char	O
*	O
p2	*(char)
,	O
*	O
fname	*(char)
;	O
char	O
buf	*(char)
[	O
1024	int
]	O
;	O
size_t	long
len	long
=	O
strlen	(*(char))->(long)
(	O
_fname	*(char)
)	O
;	O
if	O
(	O
len	long
<	O
sizeof	O
(	O
buf	*(char)
)	O
)	O
{	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
buf	*(char)
,	O
_fname	*(char)
,	O
len	long
+	O
1	int
)	O
;	O
fname	*(char)
=	O
buf	*(char)
;	O
}	O
else	O
fname	*(char)
=	O
wget_strdup	(*(char))->(*(char))
(	O
_fname	*(char)
)	O
;	O
for	O
(	O
p1	*(char)
=	O
fname	*(char)
+	O
1	int
;	O
*	O
p1	*(char)
&&	O
(	O
p2	*(char)
=	O
strchr	(*(char),int)->(*(char))
(	O
p1	*(char)
,	O
'/'	O
)	O
)	O
;	O
p1	*(char)
=	O
p2	*(char)
+	O
1	int
)	O
{	O
int	O
rc	int
;	O
*	O
p2	*(char)
=	O
0	int
;	O
if	O
(	O
*	O
p1	*(char)
==	O
'.'	O
&&	O
p1	*(char)
[	O
1	int
]	O
==	O
'.'	O
)	O
error_printf_exit	O
(	O
_	O
(	O
"Internal error: Unexpected relative path: '%s'\n"	*(char)
)	O
,	O
fname	*(char)
)	O
;	O
rc	int
=	O
mkdir	(*(char),int)->(int)
(	O
fname	*(char)
,	O
0755	int
)	O
;	O
debug_printf	O
(	O
"mkdir(%s)=%d errno=%d\n"	*(char)
,	O
fname	*(char)
,	O
rc	int
,	O
errno	O
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
struct	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
st	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
;	O
if	O
(	O
errno	O
==	O
EEXIST	int
&&	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
(	O
fname	*(char)
,	O
&	O
st	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
)	O
==	O
0	int
&&	O
(	O
st	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_mode	int
&	O
S_IFMT	O
)	O
==	O
S_IFREG	O
)	O
{	O
int	O
renamed	int
=	O
0	int
;	O
for	O
(	O
int	O
fnum	int
=	O
1	int
;	O
fnum	int
<=	O
999	int
&&	O
!	O
renamed	int
;	O
fnum	int
++	O
)	O
{	O
char	O
dst	*(char)
[	O
strlen	(*(char))->(long)
(	O
fname	*(char)
)	O
+	O
1	int
+	O
32	int
]	O
;	O
wget_snprintf	(*(char),long,*(char))->(long)
(	O
dst	*(char)
,	O
sizeof	O
(	O
dst	*(char)
)	O
,	O
"%s.%d"	*(char)
,	O
fname	*(char)
,	O
fnum	int
)	O
;	O
if	O
(	O
access	(*(char),int)->(int)
(	O
dst	*(char)
,	O
F_OK	int
)	O
!=	O
0	int
&&	O
rename	(*(char),*(char))->(int)
(	O
fname	*(char)
,	O
dst	*(char)
)	O
==	O
0	int
)	O
renamed	int
=	O
1	int
;	O
}	O
if	O
(	O
renamed	int
)	O
{	O
rc	int
=	O
mkdir	(*(char),int)->(int)
(	O
fname	*(char)
,	O
0755	int
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
error_printf	O
(	O
_	O
(	O
"Failed to make directory '%s' (errno=%d)\n"	*(char)
)	O
,	O
fname	*(char)
,	O
errno	O
)	O
;	O
*	O
p2	*(char)
=	O
'/'	O
;	O
break	O
;	O
}	O
}	O
else	O
error_printf	O
(	O
_	O
(	O
"Failed to rename '%s' (errno=%d)\n"	*(char)
)	O
,	O
fname	*(char)
,	O
errno	O
)	O
;	O
}	O
else	O
if	O
(	O
errno	O
!=	O
EEXIST	int
)	O
{	O
error_printf	O
(	O
_	O
(	O
"Failed to make directory '%s' (errno=%d)\n"	*(char)
)	O
,	O
fname	*(char)
,	O
errno	O
)	O
;	O
*	O
p2	*(char)
=	O
'/'	O
;	O
break	O
;	O
}	O
}	O
else	O
debug_printf	O
(	O
"created dir %s\n"	*(char)
,	O
fname	*(char)
)	O
;	O
*	O
p2	*(char)
=	O
'/'	O
;	O
}	O
if	O
(	O
fname	*(char)
!=	O
buf	*(char)
)	O
xfree	O
(	O
fname	*(char)
)	O
;	O
if	O
(	O
!	O
is_file	bool
)	O
{	O
int	O
rc	int
=	O
mkdir	(*(char),int)->(int)
(	O
_fname	*(char)
,	O
0755	int
)	O
;	O
debug_printf	O
(	O
"mkdir(%s)=%d errno=%d\n"	*(char)
,	O
_fname	*(char)
,	O
rc	int
,	O
errno	O
)	O
;	O
}	O
}	O
char	O
*	O
shell_expand	(*(char))->(*(char))
(	O
const	O
char	O
*	O
fname	*(char)
)	O
{	O
char	O
*	O
expanded_str	*(char)
=	O
NULL	O
;	O
if	O
(	O
*	O
fname	*(char)
==	O
'~'	O
)	O
{	O
char	O
*	O
slash	*(char)
=	O
strchrnul	(*(char),int)->(*(char))
(	O
fname	*(char)
,	O
'/'	O
)	O
;	O
expanded_str	*(char)
=	O
wget_strnglob	(*(char),long,int)->(*(char))
(	O
fname	*(char)
,	O
slash	*(char)
-	O
fname	*(char)
,	O
GLOB_TILDE	O
|	O
GLOB_ONLYDIR	O
|	O
GLOB_NOCHECK	O
)	O
;	O
}	O
return	O
expanded_str	*(char)
?	O
expanded_str	*(char)
:	O
wget_strdup	(*(char))->(*(char))
(	O
fname	*(char)
)	O
;	O
}	O
char	O
*	O
wget_restrict_file_name	(*(char),*(char),int)->(*(char))
(	O
const	O
char	O
*	O
fname	*(char)
,	O
char	O
*	O
esc	*(char)
,	O
int	O
mode	int
)	O
{	O
signed	O
char	O
*	O
s	*(char)
;	O
char	O
*	O
dst	*(char)
,	O
c	char
;	O
int	O
escaped	int
;	O
if	O
(	O
!	O
fname	*(char)
||	O
!	O
esc	*(char)
)	O
return	O
(	O
char	O
*	O
)	O
fname	*(char)
;	O
switch	O
(	O
mode	int
)	O
{	O
case	O
WGET_RESTRICT_NAMES_WINDOWS	O
:	O
for	O
(	O
escaped	int
=	O
0	int
,	O
dst	*(char)
=	O
esc	*(char)
,	O
s	*(char)
=	O
(	O
signed	O
char	O
*	O
)	O
fname	*(char)
;	O
*	O
s	*(char)
;	O
s	*(char)
++	O
)	O
{	O
if	O
(	O
*	O
s	*(char)
<	O
32	int
||	O
strchr	(*(char),int)->(*(char))
(	O
"\\<>:\"|?*"	*(char)
,	O
*	O
s	*(char)
)	O
)	O
{	O
*	O
dst	*(char)
++	O
=	O
'%'	O
;	O
*	O
dst	*(char)
++	O
=	O
(	O
c	char
=	O
(	O
(	O
unsigned	O
char	O
)	O
*	O
s	*(char)
>>	O
4	int
)	O
)	O
>=	O
10	int
?	O
c	char
+	O
'A'	O
-	O
10	int
:	O
c	char
+	O
'0'	O
;	O
*	O
dst	*(char)
++	O
=	O
(	O
c	char
=	O
(	O
*	O
s	*(char)
&	O
0xf	int
)	O
)	O
>=	O
10	int
?	O
c	char
+	O
'A'	O
-	O
10	int
:	O
c	char
+	O
'0'	O
;	O
escaped	int
=	O
1	int
;	O
}	O
else	O
*	O
dst	*(char)
++	O
=	O
*	O
s	*(char)
;	O
}	O
*	O
dst	*(char)
=	O
0	int
;	O
if	O
(	O
escaped	int
)	O
return	O
esc	*(char)
;	O
break	O
;	O
case	O
WGET_RESTRICT_NAMES_NOCONTROL	O
:	O
break	O
;	O
case	O
WGET_RESTRICT_NAMES_ASCII	O
:	O
for	O
(	O
escaped	int
=	O
0	int
,	O
dst	*(char)
=	O
esc	*(char)
,	O
s	*(char)
=	O
(	O
signed	O
char	O
*	O
)	O
fname	*(char)
;	O
*	O
s	*(char)
;	O
s	*(char)
++	O
)	O
{	O
if	O
(	O
*	O
s	*(char)
<	O
32	int
)	O
{	O
*	O
dst	*(char)
++	O
=	O
'%'	O
;	O
*	O
dst	*(char)
++	O
=	O
(	O
c	char
=	O
(	O
(	O
unsigned	O
char	O
)	O
*	O
s	*(char)
>>	O
4	int
)	O
)	O
>=	O
10	int
?	O
c	char
+	O
'A'	O
-	O
10	int
:	O
c	char
+	O
'0'	O
;	O
*	O
dst	*(char)
++	O
=	O
(	O
c	char
=	O
(	O
*	O
s	*(char)
&	O
0xf	int
)	O
)	O
>=	O
10	int
?	O
c	char
+	O
'A'	O
-	O
10	int
:	O
c	char
+	O
'0'	O
;	O
escaped	int
=	O
1	int
;	O
}	O
else	O
*	O
dst	*(char)
++	O
=	O
*	O
s	*(char)
;	O
}	O
*	O
dst	*(char)
=	O
0	int
;	O
if	O
(	O
escaped	int
)	O
return	O
esc	*(char)
;	O
break	O
;	O
case	O
WGET_RESTRICT_NAMES_UPPERCASE	O
:	O
for	O
(	O
s	*(char)
=	O
(	O
signed	O
char	O
*	O
)	O
fname	*(char)
;	O
*	O
s	*(char)
;	O
s	*(char)
++	O
)	O
if	O
(	O
*	O
s	*(char)
>=	O
'a'	O
&&	O
*	O
s	*(char)
<=	O
'z'	O
)	O
*	O
s	*(char)
&=	O
~	O
0x20	int
;	O
break	O
;	O
case	O
WGET_RESTRICT_NAMES_LOWERCASE	O
:	O
for	O
(	O
s	*(char)
=	O
(	O
signed	O
char	O
*	O
)	O
fname	*(char)
;	O
*	O
s	*(char)
;	O
s	*(char)
++	O
)	O
if	O
(	O
*	O
s	*(char)
>=	O
'A'	O
&&	O
*	O
s	*(char)
<=	O
'Z'	O
)	O
*	O
s	*(char)
|=	O
0x20	int
;	O
break	O
;	O
case	O
WGET_RESTRICT_NAMES_UNIX	O
:	O
default	O
:	O
for	O
(	O
escaped	int
=	O
0	int
,	O
dst	*(char)
=	O
esc	*(char)
,	O
s	*(char)
=	O
(	O
signed	O
char	O
*	O
)	O
fname	*(char)
;	O
*	O
s	*(char)
;	O
s	*(char)
++	O
)	O
{	O
if	O
(	O
*	O
s	*(char)
>=	O
1	int
&&	O
*	O
s	*(char)
<=	O
31	int
)	O
{	O
*	O
dst	*(char)
++	O
=	O
'%'	O
;	O
*	O
dst	*(char)
++	O
=	O
(	O
c	char
=	O
(	O
(	O
unsigned	O
char	O
)	O
*	O
s	*(char)
>>	O
4	int
)	O
)	O
>=	O
10	int
?	O
c	char
+	O
'A'	O
-	O
10	int
:	O
c	char
+	O
'0'	O
;	O
*	O
dst	*(char)
++	O
=	O
(	O
c	char
=	O
(	O
*	O
s	*(char)
&	O
0xf	int
)	O
)	O
>=	O
10	int
?	O
c	char
+	O
'A'	O
-	O
10	int
:	O
c	char
+	O
'0'	O
;	O
escaped	int
=	O
1	int
;	O
}	O
else	O
*	O
dst	*(char)
++	O
=	O
*	O
s	*(char)
;	O
}	O
*	O
dst	*(char)
=	O
0	int
;	O
if	O
(	O
escaped	int
)	O
return	O
esc	*(char)
;	O
break	O
;	O
}	O
return	O
(	O
char	O
*	O
)	O
fname	*(char)
;	O
}	O
