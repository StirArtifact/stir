static	O
__inline__	O
uint32_t	int
rol	(int,int)->(int)
(	O
uint32_t	int
arg	int
,	O
int	O
shift	int
)	O
{	O
arg	int
&=	O
0xffffffff	int
;	O
return	O
(	O
arg	int
<<	O
shift	int
)	O
|	O
(	O
arg	int
>>	O
(	O
32	int
-	O
shift	int
)	O
)	O
;	O
}	O
static	O
uint32_t	int
calcHash	(*(int))->(int)
(	O
wchar_t	int
*	O
name	*(char)
)	O
{	O
uint32_t	int
hash	int
;	O
unsigned	O
int	O
i	int
;	O
wint_t	int
c	int
;	O
hash	int
=	O
0	int
;	O
i	int
=	O
0	int
;	O
while	O
(	O
*	O
name	*(char)
)	O
{	O
hash	int
=	O
rol	(int,int)->(int)
(	O
hash	int
,	O
5	int
)	O
;	O
c	int
=	O
towupper	(int)->(int)
(	O
(	O
wint_t	int
)	O
*	O
name	*(char)
)	O
;	O
hash	int
^=	O
(	O
c	int
*	O
(	O
c	int
+	O
2	int
)	O
)	O
^	O
(	O
i	int
*	O
(	O
i	int
+	O
2	int
)	O
)	O
;	O
hash	int
&=	O
0xffffffff	int
;	O
i	int
++	O
,	O
name	*(char)
++	O
;	O
}	O
hash	int
=	O
hash	int
*	O
(	O
hash	int
+	O
2	int
)	O
;	O
hash	int
^=	O
(	O
hash	int
&	O
0xfff	int
)	O
<<	O
12	int
;	O
hash	int
^=	O
(	O
hash	int
&	O
0xff000	int
)	O
<<	O
24	int
;	O
return	O
hash	int
;	O
}	O
static	O
unsigned	O
int	O
addBit	(*(int),int,int)->(int)
(	O
unsigned	O
int	O
*	O
bitmap	*(int)
,	O
unsigned	O
int	O
hash	int
,	O
int	O
checkOnly	int
)	O
{	O
unsigned	O
int	O
bit	int
;	O
int	O
entry	int
;	O
bit	int
=	O
1u	int
<<	O
(	O
hash	int
%	O
BITS_PER_INT	O
)	O
;	O
entry	int
=	O
(	O
hash	int
/	O
BITS_PER_INT	O
)	O
%	O
DC_BITMAP_SIZE	int
;	O
if	O
(	O
checkOnly	int
)	O
return	O
bitmap	*(int)
[	O
entry	int
]	O
&	O
bit	int
;	O
else	O
{	O
bitmap	*(int)
[	O
entry	int
]	O
|=	O
bit	int
;	O
return	O
1	int
;	O
}	O
}	O
static	O
int	O
_addHash	(*(struct(*(*(struct`)),int,int,array(int),array(int),array(int))),int,int)->(int)
(	O
dirCache_t	struct(*(*(struct)),int,int,array(int),array(int),array(int))
*	O
cache	*(struct(*(*(struct)),int,int,array(int),array(int),array(int)))
,	O
unsigned	O
int	O
hash	int
,	O
int	O
checkOnly	int
)	O
{	O
return	O
addBit	(*(int),int,int)->(int)
(	O
cache	*(struct(*(*(struct)),int,int,array(int),array(int),array(int)))
->	O
bm0	array(int)
,	O
hash	int
,	O
checkOnly	int
)	O
&&	O
addBit	(*(int),int,int)->(int)
(	O
cache	*(struct(*(*(struct)),int,int,array(int),array(int),array(int)))
->	O
bm1	array(int)
,	O
rol	(int,int)->(int)
(	O
hash	int
,	O
12	int
)	O
,	O
checkOnly	int
)	O
&&	O
addBit	(*(int),int,int)->(int)
(	O
cache	*(struct(*(*(struct)),int,int,array(int),array(int),array(int)))
->	O
bm2	array(int)
,	O
rol	(int,int)->(int)
(	O
hash	int
,	O
24	int
)	O
,	O
checkOnly	int
)	O
;	O
}	O
static	O
void	O
addNameToHash	(*(struct(*(*(struct`)),int,int,array(int),array(int),array(int))),*(int))->(void)
(	O
dirCache_t	struct(*(*(struct)),int,int,array(int),array(int),array(int))
*	O
cache	*(struct(*(*(struct)),int,int,array(int),array(int),array(int)))
,	O
wchar_t	int
*	O
name	*(char)
)	O
{	O
_addHash	(*(struct(*(*(struct`)),int,int,array(int),array(int),array(int))),int,int)->(int)
(	O
cache	*(struct(*(*(struct)),int,int,array(int),array(int),array(int)))
,	O
calcHash	(*(int))->(int)
(	O
name	*(char)
)	O
,	O
0	int
)	O
;	O
}	O
static	O
void	O
hashDce	(*(struct(*(*(struct`)),int,int,array(int),array(int),array(int))),*(struct(enum(int,int,int),int,int,*(int),*(int),struct(array(char),array(char),char,char,char,array(char),array(char),array(char),array(char),array(char),array(char),array(char),array(char)),int)))->(void)
(	O
dirCache_t	struct(*(*(struct)),int,int,array(int),array(int),array(int))
*	O
cache	*(struct(*(*(struct)),int,int,array(int),array(int),array(int)))
,	O
dirCacheEntry_t	struct
*	O
dce	*(struct(enum(int,int,int),int,int,*(int),*(int),struct(array(char),array(char),char,char,char,array(char),array(char),array(char),array(char),array(char),array(char),array(char),array(char)),int))
)	O
{	O
if	O
(	O
dce	*(struct(enum(int,int,int),int,int,*(int),*(int),struct(array(char),array(char),char,char,char,array(char),array(char),array(char),array(char),array(char),array(char),array(char),array(char)),int))
->	O
beginSlot	int
!=	O
cache	*(struct(*(*(struct)),int,int,array(int),array(int),array(int)))
->	O
nrHashed	int
)	O
return	O
;	O
cache	*(struct(*(*(struct)),int,int,array(int),array(int),array(int)))
->	O
nrHashed	int
=	O
dce	*(struct(enum(int,int,int),int,int,*(int),*(int),struct(array(char),array(char),char,char,char,array(char),array(char),array(char),array(char),array(char),array(char),array(char),array(char)),int))
->	O
endSlot	int
;	O
if	O
(	O
dce	*(struct(enum(int,int,int),int,int,*(int),*(int),struct(array(char),array(char),char,char,char,array(char),array(char),array(char),array(char),array(char),array(char),array(char),array(char)),int))
->	O
longName	*(int)
)	O
addNameToHash	(*(struct(*(*(struct`)),int,int,array(int),array(int),array(int))),*(int))->(void)
(	O
cache	*(struct(*(*(struct)),int,int,array(int),array(int),array(int)))
,	O
dce	*(struct(enum(int,int,int),int,int,*(int),*(int),struct(array(char),array(char),char,char,char,array(char),array(char),array(char),array(char),array(char),array(char),array(char),array(char)),int))
->	O
longName	*(int)
)	O
;	O
addNameToHash	(*(struct(*(*(struct`)),int,int,array(int),array(int),array(int))),*(int))->(void)
(	O
cache	*(struct(*(*(struct)),int,int,array(int),array(int),array(int)))
,	O
dce	*(struct(enum(int,int,int),int,int,*(int),*(int),struct(array(char),array(char),char,char,char,array(char),array(char),array(char),array(char),array(char),array(char),array(char),array(char)),int))
->	O
shortName	*(int)
)	O
;	O
}	O
int	O
isHashed	(*(struct(*(*(struct`)),int,int,array(int),array(int),array(int))),*(int))->(int)
(	O
dirCache_t	struct(*(*(struct)),int,int,array(int),array(int),array(int))
*	O
cache	*(struct(*(*(struct)),int,int,array(int),array(int),array(int)))
,	O
wchar_t	int
*	O
name	*(char)
)	O
{	O
int	O
ret	int
;	O
ret	int
=	O
_addHash	(*(struct(*(*(struct`)),int,int,array(int),array(int),array(int))),int,int)->(int)
(	O
cache	*(struct(*(*(struct)),int,int,array(int),array(int),array(int)))
,	O
calcHash	(*(int))->(int)
(	O
name	*(char)
)	O
,	O
1	int
)	O
;	O
return	O
ret	int
;	O
}	O
int	O
growDirCache	(*(struct(*(*(struct`)),int,int,array(int),array(int),array(int))),int)->(int)
(	O
dirCache_t	struct(*(*(struct)),int,int,array(int),array(int),array(int))
*	O
cache	*(struct(*(*(struct)),int,int,array(int),array(int),array(int)))
,	O
unsigned	O
int	O
slot	int
)	O
{	O
if	O
(	O
(	O
int	O
)	O
slot	int
<	O
0	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"Bad slot %d\n"	*(char)
,	O
slot	int
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
if	O
(	O
cache	*(struct(*(*(struct)),int,int,array(int),array(int),array(int)))
->	O
nr_entries	int
<=	O
slot	int
)	O
{	O
unsigned	O
int	O
i	int
;	O
cache	*(struct(*(*(struct)),int,int,array(int),array(int),array(int)))
->	O
entries	*(*(struct))
=	O
realloc	(*(void),long)->(*(void))
(	O
cache	*(struct(*(*(struct)),int,int,array(int),array(int),array(int)))
->	O
entries	*(*(struct))
,	O
(	O
slot	int
+	O
1	int
)	O
*	O
2	int
*	O
sizeof	O
(	O
dirCacheEntry_t	struct
*	O
)	O
)	O
;	O
if	O
(	O
!	O
cache	*(struct(*(*(struct)),int,int,array(int),array(int),array(int)))
->	O
entries	*(*(struct))
)	O
return	O
-	O
1	int
;	O
for	O
(	O
i	int
=	O
cache	*(struct(*(*(struct)),int,int,array(int),array(int),array(int)))
->	O
nr_entries	int
;	O
i	int
<	O
(	O
slot	int
+	O
1	int
)	O
*	O
2	int
;	O
i	int
++	O
)	O
{	O
cache	*(struct(*(*(struct)),int,int,array(int),array(int),array(int)))
->	O
entries	*(*(struct))
[	O
i	int
]	O
=	O
0	int
;	O
}	O
cache	*(struct(*(*(struct)),int,int,array(int),array(int),array(int)))
->	O
nr_entries	int
=	O
(	O
slot	int
+	O
1	int
)	O
*	O
2	int
;	O
}	O
return	O
0	int
;	O
}	O
dirCache_t	struct(*(*(struct)),int,int,array(int),array(int),array(int))
*	O
allocDirCache	(*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`)),int,*(struct(*`,int,*`,*`)),*(struct(*`,int,*`,*`)))),int)->(*(struct(*(*(struct`)),int,int,array(int),array(int),array(int))))
(	O
Stream_t	struct(*(struct),int,*(struct(*(struct),int,*(struct(*(struct`),int,*(struct`),*(struct`))),*(struct(*(struct`),int,*(struct`),*(struct`))))),*(struct(*(struct),int,*(struct(*(struct`),int,*(struct`),*(struct`))),*(struct(*(struct`),int,*(struct`),*(struct`))))))
*	O
Stream	*(struct(*(struct),int,*(struct(*(struct`),int,*(struct`),*(struct`))),*(struct(*(struct`),int,*(struct`),*(struct`)))))
,	O
unsigned	O
int	O
slot	int
)	O
{	O
dirCache_t	struct(*(*(struct)),int,int,array(int),array(int),array(int))
*	O
*	O
dcp	*(*(struct(*(*(struct`)),int,int,array(int),array(int),array(int))))
;	O
if	O
(	O
(	O
int	O
)	O
slot	int
<	O
0	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"Bad slot %d\n"	*(char)
,	O
slot	int
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
dcp	*(*(struct(*(*(struct`)),int,int,array(int),array(int),array(int))))
=	O
getDirCacheP	(*(struct(*(struct),int,*(struct(*`,int,*`,*`)),*(struct(*`,int,*`,*`)))))->(*(*(struct)))
(	O
Stream	*(struct(*(struct),int,*(struct(*(struct`),int,*(struct`),*(struct`))),*(struct(*(struct`),int,*(struct`),*(struct`)))))
)	O
;	O
if	O
(	O
!	O
*	O
dcp	*(*(struct(*(*(struct`)),int,int,array(int),array(int),array(int))))
)	O
{	O
*	O
dcp	*(*(struct(*(*(struct`)),int,int,array(int),array(int),array(int))))
=	O
New	O
(	O
dirCache_t	struct(*(*(struct)),int,int,array(int),array(int),array(int))
)	O
;	O
if	O
(	O
!	O
*	O
dcp	*(*(struct(*(*(struct`)),int,int,array(int),array(int),array(int))))
)	O
return	O
0	int
;	O
(	O
*	O
dcp	*(*(struct(*(*(struct`)),int,int,array(int),array(int),array(int))))
)	O
->	O
entries	*(*(struct))
=	O
NewArray	O
(	O
(	O
slot	int
+	O
1	int
)	O
*	O
2	int
+	O
5	int
,	O
dirCacheEntry_t	struct
*	O
)	O
;	O
if	O
(	O
!	O
(	O
*	O
dcp	*(*(struct(*(*(struct`)),int,int,array(int),array(int),array(int))))
)	O
->	O
entries	*(*(struct))
)	O
{	O
free	(*(void))->(void)
(	O
*	O
dcp	*(*(struct(*(*(struct`)),int,int,array(int),array(int),array(int))))
)	O
;	O
return	O
0	int
;	O
}	O
(	O
*	O
dcp	*(*(struct(*(*(struct`)),int,int,array(int),array(int),array(int))))
)	O
->	O
nr_entries	int
=	O
(	O
slot	int
+	O
1	int
)	O
*	O
2	int
;	O
memset	(*(void),int,long)->(*(void))
(	O
(	O
*	O
dcp	*(*(struct(*(*(struct`)),int,int,array(int),array(int),array(int))))
)	O
->	O
bm0	array(int)
,	O
0	int
,	O
sizeof	O
(	O
(	O
*	O
dcp	*(*(struct(*(*(struct`)),int,int,array(int),array(int),array(int))))
)	O
->	O
bm0	array(int)
)	O
)	O
;	O
memset	(*(void),int,long)->(*(void))
(	O
(	O
*	O
dcp	*(*(struct(*(*(struct`)),int,int,array(int),array(int),array(int))))
)	O
->	O
bm1	array(int)
,	O
0	int
,	O
sizeof	O
(	O
(	O
*	O
dcp	*(*(struct(*(*(struct`)),int,int,array(int),array(int),array(int))))
)	O
->	O
bm1	array(int)
)	O
)	O
;	O
memset	(*(void),int,long)->(*(void))
(	O
(	O
*	O
dcp	*(*(struct(*(*(struct`)),int,int,array(int),array(int),array(int))))
)	O
->	O
bm2	array(int)
,	O
0	int
,	O
sizeof	O
(	O
(	O
*	O
dcp	*(*(struct(*(*(struct`)),int,int,array(int),array(int),array(int))))
)	O
->	O
bm1	array(int)
)	O
)	O
;	O
(	O
*	O
dcp	*(*(struct(*(*(struct`)),int,int,array(int),array(int),array(int))))
)	O
->	O
nrHashed	int
=	O
0	int
;	O
}	O
else	O
if	O
(	O
growDirCache	(*(struct(*(*(struct`)),int,int,array(int),array(int),array(int))),int)->(int)
(	O
*	O
dcp	*(*(struct(*(*(struct`)),int,int,array(int),array(int),array(int))))
,	O
slot	int
)	O
<	O
0	int
)	O
return	O
0	int
;	O
return	O
*	O
dcp	*(*(struct(*(*(struct`)),int,int,array(int),array(int),array(int))))
;	O
}	O
static	O
int	O
freeDirCacheRange	(*(struct(*(*(struct`)),int,int,array(int),array(int),array(int))),int,int)->(int)
(	O
dirCache_t	struct(*(*(struct)),int,int,array(int),array(int),array(int))
*	O
cache	*(struct(*(*(struct)),int,int,array(int),array(int),array(int)))
,	O
unsigned	O
int	O
beginSlot	int
,	O
unsigned	O
int	O
endSlot	int
)	O
{	O
dirCacheEntry_t	struct
*	O
entry	int
;	O
unsigned	O
int	O
clearBegin	int
;	O
unsigned	O
int	O
clearEnd	int
;	O
unsigned	O
int	O
i	int
;	O
if	O
(	O
endSlot	int
<	O
beginSlot	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"Bad slots %d %d in free range\n"	*(char)
,	O
beginSlot	int
,	O
endSlot	int
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
while	O
(	O
beginSlot	int
<	O
endSlot	int
)	O
{	O
entry	int
=	O
cache	*(struct(*(*(struct)),int,int,array(int),array(int),array(int)))
->	O
entries	*(*(struct))
[	O
beginSlot	int
]	O
;	O
if	O
(	O
!	O
entry	int
)	O
{	O
beginSlot	int
++	O
;	O
continue	O
;	O
}	O
assert	O
(	O
entry	int
->	O
beginSlot	int
==	O
beginSlot	int
)	O
;	O
clearEnd	int
=	O
entry	int
->	O
endSlot	int
;	O
if	O
(	O
clearEnd	int
>	O
endSlot	int
)	O
clearEnd	int
=	O
endSlot	int
;	O
clearBegin	int
=	O
beginSlot	int
;	O
for	O
(	O
i	int
=	O
clearBegin	int
;	O
i	int
<	O
clearEnd	int
;	O
i	int
++	O
)	O
cache	*(struct(*(*(struct)),int,int,array(int),array(int),array(int)))
->	O
entries	*(*(struct))
[	O
i	int
]	O
=	O
0	int
;	O
entry	int
->	O
beginSlot	int
=	O
clearEnd	int
;	O
if	O
(	O
entry	int
->	O
beginSlot	int
==	O
entry	int
->	O
endSlot	int
)	O
{	O
int	O
needWriteEnd	int
=	O
0	int
;	O
if	O
(	O
entry	int
->	O
endMarkPos	int
!=	O
-	O
1	int
&&	O
entry	int
->	O
endMarkPos	int
<	O
(	O
int	O
)	O
beginSlot	int
)	O
needWriteEnd	int
=	O
1	int
;	O
if	O
(	O
entry	int
->	O
longName	*(int)
)	O
free	(*(void))->(void)
(	O
entry	int
->	O
longName	*(int)
)	O
;	O
if	O
(	O
entry	int
->	O
shortName	*(int)
)	O
free	(*(void))->(void)
(	O
entry	int
->	O
shortName	*(int)
)	O
;	O
free	(*(void))->(void)
(	O
entry	int
)	O
;	O
if	O
(	O
needWriteEnd	int
)	O
{	O
return	O
(	O
int	O
)	O
beginSlot	int
;	O
}	O
}	O
beginSlot	int
=	O
clearEnd	int
;	O
}	O
return	O
-	O
1	int
;	O
}	O
static	O
dirCacheEntry_t	struct
*	O
allocDirCacheEntry	(*(struct(*(*(struct`)),int,int,array(int),array(int),array(int))),int,int,enum(int,int,int))->(*(struct(enum(int,int,int),int,int,*(int),*(int),struct(array(char),array(char),char,char,char,array(char),array(char),array(char),array(char),array(char),array(char),array(char),array(char)),int)))
(	O
dirCache_t	struct(*(*(struct)),int,int,array(int),array(int),array(int))
*	O
cache	*(struct(*(*(struct)),int,int,array(int),array(int),array(int)))
,	O
unsigned	O
int	O
beginSlot	int
,	O
unsigned	O
int	O
endSlot	int
,	O
dirCacheEntryType_t	enum(int,int,int)
type	enum(int,int,int,int)
)	O
{	O
dirCacheEntry_t	struct
*	O
entry	int
;	O
unsigned	O
int	O
i	int
;	O
if	O
(	O
growDirCache	(*(struct(*(*(struct`)),int,int,array(int),array(int),array(int))),int)->(int)
(	O
cache	*(struct(*(*(struct)),int,int,array(int),array(int),array(int)))
,	O
endSlot	int
)	O
<	O
0	int
)	O
return	O
0	int
;	O
entry	int
=	O
New	O
(	O
dirCacheEntry_t	struct
)	O
;	O
if	O
(	O
!	O
entry	int
)	O
return	O
0	int
;	O
entry	int
->	O
type	enum(int,int,int,int)
=	O
type	enum(int,int,int,int)
;	O
entry	int
->	O
longName	*(int)
=	O
0	int
;	O
entry	int
->	O
shortName	*(int)
=	O
0	int
;	O
entry	int
->	O
beginSlot	int
=	O
beginSlot	int
;	O
entry	int
->	O
endSlot	int
=	O
endSlot	int
;	O
entry	int
->	O
endMarkPos	int
=	O
-	O
1	int
;	O
freeDirCacheRange	(*(struct(*(*(struct`)),int,int,array(int),array(int),array(int))),int,int)->(int)
(	O
cache	*(struct(*(*(struct)),int,int,array(int),array(int),array(int)))
,	O
beginSlot	int
,	O
endSlot	int
)	O
;	O
for	O
(	O
i	int
=	O
beginSlot	int
;	O
i	int
<	O
endSlot	int
;	O
i	int
++	O
)	O
{	O
cache	*(struct(*(*(struct)),int,int,array(int),array(int),array(int)))
->	O
entries	*(*(struct))
[	O
i	int
]	O
=	O
entry	int
;	O
}	O
return	O
entry	int
;	O
}	O
dirCacheEntry_t	struct
*	O
addUsedEntry	(*(struct(*(*(struct`)),int,int,array(int),array(int),array(int))),int,int,*(int),*(int),*(struct(array(char),array(char),char,char,char,array(char),array(char),array(char),array(char),array(char),array(char),array(char),array(char))))->(*(struct))
(	O
dirCache_t	struct(*(*(struct)),int,int,array(int),array(int),array(int))
*	O
cache	*(struct(*(*(struct)),int,int,array(int),array(int),array(int)))
,	O
unsigned	O
int	O
beginSlot	int
,	O
unsigned	O
int	O
endSlot	int
,	O
wchar_t	int
*	O
longName	*(int)
,	O
wchar_t	int
*	O
shortName	*(int)
,	O
struct	O
directory	struct(array(char),array(char),char,char,char,array(char),array(char),array(char),array(char),array(char),array(char),array(char),array(char))
*	O
dir	*(struct(array(char),array(char),char,char,char,array(char),array(char),array(char),array(char),array(char),array(char),array(char),array(char)))
)	O
{	O
dirCacheEntry_t	struct
*	O
entry	int
;	O
if	O
(	O
endSlot	int
<	O
beginSlot	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"Bad slots %d %d in add used entry\n"	*(char)
,	O
beginSlot	int
,	O
endSlot	int
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
entry	int
=	O
allocDirCacheEntry	(*(struct(*(*(struct`)),int,int,array(int),array(int),array(int))),int,int,enum(int,int,int))->(*(struct(enum(int,int,int),int,int,*(int),*(int),struct(array(char),array(char),char,char,char,array(char),array(char),array(char),array(char),array(char),array(char),array(char),array(char)),int)))
(	O
cache	*(struct(*(*(struct)),int,int,array(int),array(int),array(int)))
,	O
beginSlot	int
,	O
endSlot	int
,	O
DCET_USED	int
)	O
;	O
if	O
(	O
!	O
entry	int
)	O
return	O
0	int
;	O
entry	int
->	O
beginSlot	int
=	O
beginSlot	int
;	O
entry	int
->	O
endSlot	int
=	O
endSlot	int
;	O
if	O
(	O
longName	*(int)
)	O
entry	int
->	O
longName	*(int)
=	O
wcsdup	(*(int))->(*(int))
(	O
longName	*(int)
)	O
;	O
entry	int
->	O
shortName	*(int)
=	O
wcsdup	(*(int))->(*(int))
(	O
shortName	*(int)
)	O
;	O
entry	int
->	O
dir	*(struct(array(char),array(char),char,char,char,array(char),array(char),array(char),array(char),array(char),array(char),array(char),array(char)))
=	O
*	O
dir	*(struct(array(char),array(char),char,char,char,array(char),array(char),array(char),array(char),array(char),array(char),array(char),array(char)))
;	O
hashDce	(*(struct(*(*(struct`)),int,int,array(int),array(int),array(int))),*(struct(enum(int,int,int),int,int,*(int),*(int),struct(array(char),array(char),char,char,char,array(char),array(char),array(char),array(char),array(char),array(char),array(char),array(char)),int)))->(void)
(	O
cache	*(struct(*(*(struct)),int,int,array(int),array(int),array(int)))
,	O
entry	int
)	O
;	O
return	O
entry	int
;	O
}	O
static	O
void	O
mergeFreeSlots	(*(struct(*(*(struct`)),int,int,array(int),array(int),array(int))),int)->(void)
(	O
dirCache_t	struct(*(*(struct)),int,int,array(int),array(int),array(int))
*	O
cache	*(struct(*(*(struct)),int,int,array(int),array(int),array(int)))
,	O
unsigned	O
int	O
slot	int
)	O
{	O
dirCacheEntry_t	struct
*	O
previous	*(struct(enum(int,int,int),int,int,*(int),*(int),struct(array(char),array(char),char,char,char,array(char),array(char),array(char),array(char),array(char),array(char),array(char),array(char)),int))
,	O
*	O
next	*(struct(enum(int,int,int),int,int,*(int),*(int),struct(array(char),array(char),char,char,char,array(char),array(char),array(char),array(char),array(char),array(char),array(char),array(char)),int))
;	O
unsigned	O
int	O
i	int
;	O
if	O
(	O
slot	int
==	O
0	int
)	O
return	O
;	O
previous	*(struct(enum(int,int,int),int,int,*(int),*(int),struct(array(char),array(char),char,char,char,array(char),array(char),array(char),array(char),array(char),array(char),array(char),array(char)),int))
=	O
cache	*(struct(*(*(struct)),int,int,array(int),array(int),array(int)))
->	O
entries	*(*(struct))
[	O
slot	int
-	O
1	int
]	O
;	O
next	*(struct(enum(int,int,int),int,int,*(int),*(int),struct(array(char),array(char),char,char,char,array(char),array(char),array(char),array(char),array(char),array(char),array(char),array(char)),int))
=	O
cache	*(struct(*(*(struct)),int,int,array(int),array(int),array(int)))
->	O
entries	*(*(struct))
[	O
slot	int
]	O
;	O
if	O
(	O
next	*(struct(enum(int,int,int),int,int,*(int),*(int),struct(array(char),array(char),char,char,char,array(char),array(char),array(char),array(char),array(char),array(char),array(char),array(char)),int))
&&	O
next	*(struct(enum(int,int,int),int,int,*(int),*(int),struct(array(char),array(char),char,char,char,array(char),array(char),array(char),array(char),array(char),array(char),array(char),array(char)),int))
->	O
type	enum(int,int,int,int)
==	O
DCET_FREE	int
&&	O
previous	*(struct(enum(int,int,int),int,int,*(int),*(int),struct(array(char),array(char),char,char,char,array(char),array(char),array(char),array(char),array(char),array(char),array(char),array(char)),int))
&&	O
previous	*(struct(enum(int,int,int),int,int,*(int),*(int),struct(array(char),array(char),char,char,char,array(char),array(char),array(char),array(char),array(char),array(char),array(char),array(char)),int))
->	O
type	enum(int,int,int,int)
==	O
DCET_FREE	int
)	O
{	O
for	O
(	O
i	int
=	O
next	*(struct(enum(int,int,int),int,int,*(int),*(int),struct(array(char),array(char),char,char,char,array(char),array(char),array(char),array(char),array(char),array(char),array(char),array(char)),int))
->	O
beginSlot	int
;	O
i	int
<	O
next	*(struct(enum(int,int,int),int,int,*(int),*(int),struct(array(char),array(char),char,char,char,array(char),array(char),array(char),array(char),array(char),array(char),array(char),array(char)),int))
->	O
endSlot	int
;	O
i	int
++	O
)	O
cache	*(struct(*(*(struct)),int,int,array(int),array(int),array(int)))
->	O
entries	*(*(struct))
[	O
i	int
]	O
=	O
previous	*(struct(enum(int,int,int),int,int,*(int),*(int),struct(array(char),array(char),char,char,char,array(char),array(char),array(char),array(char),array(char),array(char),array(char),array(char)),int))
;	O
previous	*(struct(enum(int,int,int),int,int,*(int),*(int),struct(array(char),array(char),char,char,char,array(char),array(char),array(char),array(char),array(char),array(char),array(char),array(char)),int))
->	O
endSlot	int
=	O
next	*(struct(enum(int,int,int),int,int,*(int),*(int),struct(array(char),array(char),char,char,char,array(char),array(char),array(char),array(char),array(char),array(char),array(char),array(char)),int))
->	O
endSlot	int
;	O
previous	*(struct(enum(int,int,int),int,int,*(int),*(int),struct(array(char),array(char),char,char,char,array(char),array(char),array(char),array(char),array(char),array(char),array(char),array(char)),int))
->	O
endMarkPos	int
=	O
next	*(struct(enum(int,int,int),int,int,*(int),*(int),struct(array(char),array(char),char,char,char,array(char),array(char),array(char),array(char),array(char),array(char),array(char),array(char)),int))
->	O
endMarkPos	int
;	O
free	(*(void))->(void)
(	O
next	*(struct(enum(int,int,int),int,int,*(int),*(int),struct(array(char),array(char),char,char,char,array(char),array(char),array(char),array(char),array(char),array(char),array(char),array(char)),int))
)	O
;	O
}	O
}	O
dirCacheEntry_t	struct
*	O
addFreeEndEntry	(*(struct(*(*(struct`)),int,int,array(int),array(int),array(int))),int,int,int)->(*(struct))
(	O
dirCache_t	struct(*(*(struct)),int,int,array(int),array(int),array(int))
*	O
cache	*(struct(*(*(struct)),int,int,array(int),array(int),array(int)))
,	O
unsigned	O
int	O
beginSlot	int
,	O
unsigned	O
int	O
endSlot	int
,	O
int	O
isAtEnd	int
)	O
{	O
dirCacheEntry_t	struct
*	O
entry	int
;	O
if	O
(	O
beginSlot	int
<	O
cache	*(struct(*(*(struct)),int,int,array(int),array(int),array(int)))
->	O
nrHashed	int
)	O
cache	*(struct(*(*(struct)),int,int,array(int),array(int),array(int)))
->	O
nrHashed	int
=	O
beginSlot	int
;	O
if	O
(	O
endSlot	int
<	O
beginSlot	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"Bad slots %d %d in add free entry\n"	*(char)
,	O
beginSlot	int
,	O
endSlot	int
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
if	O
(	O
endSlot	int
==	O
beginSlot	int
)	O
return	O
0	int
;	O
entry	int
=	O
allocDirCacheEntry	(*(struct(*(*(struct`)),int,int,array(int),array(int),array(int))),int,int,enum(int,int,int))->(*(struct(enum(int,int,int),int,int,*(int),*(int),struct(array(char),array(char),char,char,char,array(char),array(char),array(char),array(char),array(char),array(char),array(char),array(char)),int)))
(	O
cache	*(struct(*(*(struct)),int,int,array(int),array(int),array(int)))
,	O
beginSlot	int
,	O
endSlot	int
,	O
DCET_FREE	int
)	O
;	O
if	O
(	O
isAtEnd	int
)	O
entry	int
->	O
endMarkPos	int
=	O
(	O
int	O
)	O
beginSlot	int
;	O
mergeFreeSlots	(*(struct(*(*(struct`)),int,int,array(int),array(int),array(int))),int)->(void)
(	O
cache	*(struct(*(*(struct)),int,int,array(int),array(int),array(int)))
,	O
beginSlot	int
)	O
;	O
mergeFreeSlots	(*(struct(*(*(struct`)),int,int,array(int),array(int),array(int))),int)->(void)
(	O
cache	*(struct(*(*(struct)),int,int,array(int),array(int),array(int)))
,	O
endSlot	int
)	O
;	O
return	O
cache	*(struct(*(*(struct)),int,int,array(int),array(int),array(int)))
->	O
entries	*(*(struct))
[	O
beginSlot	int
]	O
;	O
}	O
dirCacheEntry_t	struct
*	O
addFreeEntry	(*(struct(*(*(struct`)),int,int,array(int),array(int),array(int))),int,int)->(*(struct))
(	O
dirCache_t	struct(*(*(struct)),int,int,array(int),array(int),array(int))
*	O
cache	*(struct(*(*(struct)),int,int,array(int),array(int),array(int)))
,	O
unsigned	O
int	O
beginSlot	int
,	O
unsigned	O
int	O
endSlot	int
)	O
{	O
return	O
addFreeEndEntry	(*(struct(*(*(struct`)),int,int,array(int),array(int),array(int))),int,int,int)->(*(struct))
(	O
cache	*(struct(*(*(struct)),int,int,array(int),array(int),array(int)))
,	O
beginSlot	int
,	O
endSlot	int
,	O
0	int
)	O
;	O
}	O
dirCacheEntry_t	struct
*	O
addEndEntry	(*(struct(*(*(struct`)),int,int,array(int),array(int),array(int))),int)->(*(struct))
(	O
dirCache_t	struct(*(*(struct)),int,int,array(int),array(int),array(int))
*	O
cache	*(struct(*(*(struct)),int,int,array(int),array(int),array(int)))
,	O
unsigned	O
int	O
pos	array(char)
)	O
{	O
return	O
allocDirCacheEntry	(*(struct(*(*(struct`)),int,int,array(int),array(int),array(int))),int,int,enum(int,int,int))->(*(struct(enum(int,int,int),int,int,*(int),*(int),struct(array(char),array(char),char,char,char,array(char),array(char),array(char),array(char),array(char),array(char),array(char),array(char)),int)))
(	O
cache	*(struct(*(*(struct)),int,int,array(int),array(int),array(int)))
,	O
pos	array(char)
,	O
pos	array(char)
+	O
1u	int
,	O
DCET_END	int
)	O
;	O
}	O
dirCacheEntry_t	struct
*	O
lookupInDircache	(*(struct(*(*(struct`)),int,int,array(int),array(int),array(int))),int)->(*(struct))
(	O
dirCache_t	struct(*(*(struct)),int,int,array(int),array(int),array(int))
*	O
cache	*(struct(*(*(struct)),int,int,array(int),array(int),array(int)))
,	O
unsigned	O
int	O
pos	array(char)
)	O
{	O
if	O
(	O
growDirCache	(*(struct(*(*(struct`)),int,int,array(int),array(int),array(int))),int)->(int)
(	O
cache	*(struct(*(*(struct)),int,int,array(int),array(int),array(int)))
,	O
pos	array(char)
+	O
1	int
)	O
<	O
0	int
)	O
return	O
0	int
;	O
return	O
cache	*(struct(*(*(struct)),int,int,array(int),array(int),array(int)))
->	O
entries	*(*(struct))
[	O
pos	array(char)
]	O
;	O
}	O
void	O
freeDirCache	(*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`)),int,*(struct(*`,int,*`,*`)),*(struct(*`,int,*`,*`)))))->(void)
(	O
Stream_t	struct(*(struct),int,*(struct(*(struct),int,*(struct(*(struct`),int,*(struct`),*(struct`))),*(struct(*(struct`),int,*(struct`),*(struct`))))),*(struct(*(struct),int,*(struct(*(struct`),int,*(struct`),*(struct`))),*(struct(*(struct`),int,*(struct`),*(struct`))))))
*	O
Stream	*(struct(*(struct),int,*(struct(*(struct`),int,*(struct`),*(struct`))),*(struct(*(struct`),int,*(struct`),*(struct`)))))
)	O
{	O
dirCache_t	struct(*(*(struct)),int,int,array(int),array(int),array(int))
*	O
cache	*(struct(*(*(struct)),int,int,array(int),array(int),array(int)))
,	O
*	O
*	O
dcp	*(*(struct(*(*(struct`)),int,int,array(int),array(int),array(int))))
;	O
dcp	*(*(struct(*(*(struct`)),int,int,array(int),array(int),array(int))))
=	O
getDirCacheP	(*(struct(*(struct),int,*(struct(*`,int,*`,*`)),*(struct(*`,int,*`,*`)))))->(*(*(struct)))
(	O
Stream	*(struct(*(struct),int,*(struct(*(struct`),int,*(struct`),*(struct`))),*(struct(*(struct`),int,*(struct`),*(struct`)))))
)	O
;	O
cache	*(struct(*(*(struct)),int,int,array(int),array(int),array(int)))
=	O
*	O
dcp	*(*(struct(*(*(struct`)),int,int,array(int),array(int),array(int))))
;	O
if	O
(	O
cache	*(struct(*(*(struct)),int,int,array(int),array(int),array(int)))
)	O
{	O
int	O
n	*(struct)
;	O
n	*(struct)
=	O
freeDirCacheRange	(*(struct(*(*(struct`)),int,int,array(int),array(int),array(int))),int,int)->(int)
(	O
cache	*(struct(*(*(struct)),int,int,array(int),array(int),array(int)))
,	O
0	int
,	O
cache	*(struct(*(*(struct)),int,int,array(int),array(int),array(int)))
->	O
nr_entries	int
)	O
;	O
if	O
(	O
n	*(struct)
>=	O
0	int
)	O
low_level_dir_write_end	(*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`)),int,*(struct(*`,int,*`,*`)),*(struct(*`,int,*`,*`)))),int)->(void)
(	O
Stream	*(struct(*(struct),int,*(struct(*(struct`),int,*(struct`),*(struct`))),*(struct(*(struct`),int,*(struct`),*(struct`)))))
,	O
n	*(struct)
)	O
;	O
free	(*(void))->(void)
(	O
cache	*(struct(*(*(struct)),int,int,array(int),array(int),array(int)))
)	O
;	O
*	O
dcp	*(*(struct(*(*(struct`)),int,int,array(int),array(int),array(int))))
=	O
0	int
;	O
}	O
}	O
