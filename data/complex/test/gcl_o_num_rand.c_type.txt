static	O
object	O
rando	(int,int)->(int)
(	O
object	O
x	int
,	O
object	O
rs	int
)	O
{	O
enum	O
type	O
tx	enum
;	O
object	O
base	O
,	O
out	O
,	O
z	O
;	O
fixnum	O
fbase	O
;	O
double	O
d	double
;	O
tx	enum
=	O
type_of	()->(int)
(	O
x	int
)	O
;	O
if	O
(	O
number_compare	()->(int)
(	O
x	int
,	O
small_fixnum	()->(int)
(	O
0	int
)	O
)	O
!=	O
1	int
)	O
FEwrong_type_argument	()->(int)
(	O
TSpositive_number	O
,	O
x	int
)	O
;	O
if	O
(	O
tx	enum
==	O
t_bignum	O
)	O
{	O
out	O
=	O
new_bignum	()->(int)
(	O
)	O
;	O
base	O
=	O
x	int
;	O
fbase	O
=	O
-	O
1	int
;	O
}	O
else	O
{	O
out	O
=	O
big_fixnum1	O
;	O
fbase	O
=	O
tx	enum
==	O
t_fixnum	O
?	O
fix	()->(int)
(	O
x	int
)	O
:	O
MOST_POSITIVE_FIX	O
;	O
mpz_set_si	()->(int)
(	O
MP	()->(int)
(	O
big_fixnum2	O
)	O
,	O
fbase	O
)	O
;	O
base	O
=	O
big_fixnum2	O
;	O
}	O
mpz_urandomm	()->(int)
(	O
MP	()->(int)
(	O
out	O
)	O
,	O
&	O
rs	int
->	O
rnd	O
.	O
rnd_state	O
,	O
MP	()->(int)
(	O
base	O
)	O
)	O
;	O
switch	O
(	O
tx	enum
)	O
{	O
case	O
t_fixnum	O
:	O
return	O
make_fixnum	()->(int)
(	O
mpz_get_si	()->(int)
(	O
MP	()->(int)
(	O
out	O
)	O
)	O
)	O
;	O
case	O
t_bignum	O
:	O
return	O
normalize_big	()->(int)
(	O
out	O
)	O
;	O
case	O
t_shortfloat	O
:	O
case	O
t_longfloat	O
:	O
d	double
=	O
mpz_get_d	()->(int)
(	O
MP	()->(int)
(	O
out	O
)	O
)	O
;	O
d	double
/=	O
(	O
double	O
)	O
fbase	O
;	O
z	O
=	O
alloc_object	()->(int)
(	O
tx	enum
)	O
;	O
if	O
(	O
tx	enum
==	O
t_shortfloat	O
)	O
sf	()->(int)
(	O
z	O
)	O
=	O
sf	()->(int)
(	O
x	int
)	O
*	O
d	double
;	O
else	O
lf	()->(int)
(	O
z	O
)	O
=	O
lf	()->(int)
(	O
x	int
)	O
*	O
d	double
;	O
return	O
z	O
;	O
default	O
:	O
FEerror	()->(int)
(	O
"~S is not an integer nor a floating-point number."	*(char)
,	O
1	int
,	O
x	int
)	O
;	O
return	O
(	O
Cnil	O
)	O
;	O
}	O
}	O
void	O
reinit_gmp	()->(void)
(	O
)	O
{	O
}	O
void	O
init_gmp_rnd_state	(*(int))->(void)
(	O
__gmp_randstate_struct	O
*	O
x	int
)	O
{	O
static	O
int	O
n	int
;	O
bzero	(*(void),long)->(void)
(	O
x	int
,	O
sizeof	O
(	O
*	O
x	int
)	O
)	O
;	O
gmp_randinit_default	()->(int)
(	O
x	int
)	O
;	O
}	O
static	O
object	O
make_random_state	(int)->(int)
(	O
object	O
rs	int
)	O
{	O
object	O
z	O
;	O
if	O
(	O
rs	int
==	O
Cnil	O
)	O
rs	int
=	O
symbol_value	()->(int)
(	O
Vrandom_state	O
)	O
;	O
if	O
(	O
rs	int
!=	O
Ct	O
&&	O
type_of	()->(int)
(	O
rs	int
)	O
!=	O
t_random	O
)	O
{	O
FEwrong_type_argument	()->(int)
(	O
sLrandom_state	O
,	O
rs	int
)	O
;	O
return	O
(	O
Cnil	O
)	O
;	O
}	O
z	O
=	O
alloc_object	()->(int)
(	O
t_random	O
)	O
;	O
init_gmp_rnd_state	(*(int))->(void)
(	O
&	O
z	O
->	O
rnd	O
.	O
rnd_state	O
)	O
;	O
if	O
(	O
rs	int
==	O
Ct	O
)	O
gmp_randseed_ui	()->(int)
(	O
&	O
z	O
->	O
rnd	O
.	O
rnd_state	O
,	O
RS_DEF_INIT	int
)	O
;	O
else	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
z	O
->	O
rnd	O
.	O
rnd_state	O
.	O
_mp_seed	O
->	O
_mp_d	O
,	O
rs	int
->	O
rnd	O
.	O
rnd_state	O
.	O
_mp_seed	O
->	O
_mp_d	O
,	O
rs	int
->	O
rnd	O
.	O
rnd_state	O
.	O
_mp_seed	O
->	O
_mp_alloc	O
*	O
sizeof	O
(	O
*	O
z	O
->	O
rnd	O
.	O
rnd_state	O
.	O
_mp_seed	O
->	O
_mp_d	O
)	O
)	O
;	O
return	O
(	O
z	O
)	O
;	O
}	O
LFD	(int)->(int)
(	O
Lrandom	int
)	O
(	O
void	O
)	O
{	O
int	O
j	int
;	O
object	O
x	int
;	O
j	int
=	O
vs_top	O
-	O
vs_base	O
;	O
if	O
(	O
j	int
==	O
1	int
)	O
vs_push	()->(int)
(	O
symbol_value	()->(int)
(	O
Vrandom_state	O
)	O
)	O
;	O
check_arg	()->(int)
(	O
2	int
)	O
;	O
check_type_random_state	()->(int)
(	O
&	O
vs_base	O
[	O
1	int
]	O
)	O
;	O
x	int
=	O
rando	(int,int)->(int)
(	O
vs_base	O
[	O
0	int
]	O
,	O
vs_base	O
[	O
1	int
]	O
)	O
;	O
vs_top	O
=	O
vs_base	O
;	O
vs_push	()->(int)
(	O
x	int
)	O
;	O
}	O
LFD	(int)->(int)
(	O
Lmake_random_state	int
)	O
(	O
void	O
)	O
{	O
int	O
j	int
;	O
object	O
x	int
;	O
j	int
=	O
vs_top	O
-	O
vs_base	O
;	O
if	O
(	O
j	int
==	O
0	int
)	O
vs_push	()->(int)
(	O
Cnil	O
)	O
;	O
check_arg	()->(int)
(	O
1	int
)	O
;	O
x	int
=	O
make_random_state	(int)->(int)
(	O
vs_head	O
)	O
;	O
vs_top	O
=	O
vs_base	O
;	O
vs_push	()->(int)
(	O
x	int
)	O
;	O
}	O
LFD	(int)->(int)
(	O
Lrandom_state_p	int
)	O
(	O
void	O
)	O
{	O
check_arg	()->(int)
(	O
1	int
)	O
;	O
if	O
(	O
type_of	()->(int)
(	O
vs_pop	O
)	O
==	O
t_random	O
)	O
vs_push	()->(int)
(	O
Ct	O
)	O
;	O
else	O
vs_push	()->(int)
(	O
Cnil	O
)	O
;	O
}	O
void	O
gcl_init_num_rand	()->(void)
(	O
void	O
)	O
{	O
Vrandom_state	O
=	O
make_special	()->(int)
(	O
"*RANDOM-STATE*"	*(char)
,	O
make_random_state	(int)->(int)
(	O
Ct	O
)	O
)	O
;	O
make_function	()->(int)
(	O
"RANDOM"	*(char)
,	O
Lrandom	int
)	O
;	O
make_function	()->(int)
(	O
"MAKE-RANDOM-STATE"	*(char)
,	O
Lmake_random_state	int
)	O
;	O
make_function	()->(int)
(	O
"RANDOM-STATE-P"	*(char)
,	O
Lrandom_state_p	int
)	O
;	O
}	O
