static	O
int	O
debug_flag	int
=	O
0	int
;	O
static	O
int	O
debug_error	int
=	O
0	int
;	O
static	O
char	O
*	O
menu	*(*(struct(*(char),int,int,int,int,*(struct(char,*`,int,*`)),int,*(char))))
=	O
NULL	O
;	O
int	O
check_format_view	(*(char))->(int)
(	O
const	O
char	O
*	O
p	*(void)
)	O
{	O
const	O
char	O
*	O
q	*(char)
=	O
p	*(void)
;	O
if	O
(	O
!	O
strncmp	(*(char),*(char),long)->(int)
(	O
p	*(void)
,	O
"view"	*(char)
,	O
4	int
)	O
)	O
{	O
q	*(char)
+=	O
4	int
;	O
if	O
(	O
*	O
q	*(char)
==	O
'{'	O
)	O
{	O
for	O
(	O
q	*(char)
++	O
;	O
*	O
q	*(char)
&&	O
*	O
q	*(char)
!=	O
'}'	O
;	O
q	*(char)
++	O
)	O
{	O
if	O
(	O
!	O
strncmp	(*(char),*(char),long)->(int)
(	O
q	*(char)
,	O
"ascii"	*(char)
,	O
5	int
)	O
)	O
{	O
default_hex_mode	int
=	O
0	int
;	O
q	*(char)
+=	O
4	int
;	O
}	O
else	O
if	O
(	O
!	O
strncmp	(*(char),*(char),long)->(int)
(	O
q	*(char)
,	O
"hex"	*(char)
,	O
3	int
)	O
)	O
{	O
default_hex_mode	int
=	O
1	int
;	O
q	*(char)
+=	O
2	int
;	O
}	O
else	O
if	O
(	O
!	O
strncmp	(*(char),*(char),long)->(int)
(	O
q	*(char)
,	O
"nroff"	*(char)
,	O
5	int
)	O
)	O
{	O
default_nroff_flag	int
=	O
1	int
;	O
q	*(char)
+=	O
4	int
;	O
}	O
else	O
if	O
(	O
!	O
strncmp	(*(char),*(char),long)->(int)
(	O
q	*(char)
,	O
"unform"	*(char)
,	O
6	int
)	O
)	O
{	O
default_nroff_flag	int
=	O
0	int
;	O
q	*(char)
+=	O
5	int
;	O
}	O
}	O
if	O
(	O
*	O
q	*(char)
==	O
'}'	O
)	O
q	*(char)
++	O
;	O
}	O
return	O
q	*(char)
-	O
p	*(void)
;	O
}	O
return	O
0	int
;	O
}	O
int	O
check_format_cd	(*(char))->(int)
(	O
const	O
char	O
*	O
p	*(void)
)	O
{	O
return	O
(	O
strncmp	(*(char),*(char),long)->(int)
(	O
p	*(void)
,	O
"cd"	*(char)
,	O
2	int
)	O
)	O
?	O
0	int
:	O
3	int
;	O
}	O
int	O
check_format_var	(*(char),*(*(char)))->(int)
(	O
const	O
char	O
*	O
p	*(void)
,	O
char	O
*	O
*	O
v	*(void)
)	O
{	O
const	O
char	O
*	O
q	*(char)
=	O
p	*(void)
;	O
char	O
*	O
var_name	*(char)
;	O
const	O
char	O
*	O
value	*(void)
;	O
const	O
char	O
*	O
dots	*(char)
=	O
0	int
;	O
*	O
v	*(void)
=	O
0	int
;	O
if	O
(	O
!	O
strncmp	(*(char),*(char),long)->(int)
(	O
p	*(void)
,	O
"var{"	*(char)
,	O
4	int
)	O
)	O
{	O
for	O
(	O
q	*(char)
+=	O
4	int
;	O
*	O
q	*(char)
&&	O
*	O
q	*(char)
!=	O
'}'	O
;	O
q	*(char)
++	O
)	O
{	O
if	O
(	O
*	O
q	*(char)
==	O
':'	O
)	O
dots	*(char)
=	O
q	*(char)
+	O
1	int
;	O
}	O
if	O
(	O
!	O
*	O
q	*(char)
)	O
return	O
0	int
;	O
if	O
(	O
!	O
dots	*(char)
||	O
dots	*(char)
==	O
q	*(char)
+	O
5	int
)	O
{	O
message	*(char)
(	O
1	int
,	O
_	O
(	O
" Format error on file Extensions File "	*(char)
)	O
,	O
!	O
dots	*(char)
?	O
_	O
(	O
" The %%var macro has no default "	*(char)
)	O
:	O
_	O
(	O
" The %%var macro has no variable "	*(char)
)	O
)	O
;	O
return	O
0	int
;	O
}	O
var_name	*(char)
=	O
g_strndup	(*(char),long)->(*(char))
(	O
p	*(void)
+	O
4	int
,	O
dots	*(char)
-	O
2	int
-	O
(	O
p	*(void)
+	O
3	int
)	O
)	O
;	O
value	*(void)
=	O
getenv	(*(char))->(*(char))
(	O
var_name	*(char)
)	O
;	O
g_free	(*(void))->(void)
(	O
var_name	*(char)
)	O
;	O
if	O
(	O
value	*(void)
)	O
{	O
*	O
v	*(void)
=	O
g_strdup	(*(char))->(*(char))
(	O
value	*(void)
)	O
;	O
return	O
q	*(char)
-	O
p	*(void)
;	O
}	O
var_name	*(char)
=	O
g_strndup	(*(char),long)->(*(char))
(	O
dots	*(char)
,	O
q	*(char)
-	O
dots	*(char)
)	O
;	O
*	O
v	*(void)
=	O
var_name	*(char)
;	O
return	O
q	*(char)
-	O
p	*(void)
;	O
}	O
return	O
0	int
;	O
}	O
static	O
char	O
*	O
strip_ext	(*(char))->(*(char))
(	O
char	O
*	O
ss	*(char)
)	O
{	O
register	O
char	O
*	O
s	*(char)
=	O
ss	*(char)
;	O
char	O
*	O
e	*(struct)
=	O
NULL	O
;	O
while	O
(	O
*	O
s	*(char)
)	O
{	O
if	O
(	O
*	O
s	*(char)
==	O
'.'	O
)	O
e	*(struct)
=	O
s	*(char)
;	O
if	O
(	O
*	O
s	*(char)
==	O
PATH_SEP	char
&&	O
e	*(struct)
)	O
e	*(struct)
=	O
NULL	O
;	O
s	*(char)
++	O
;	O
}	O
if	O
(	O
e	*(struct)
)	O
*	O
e	*(struct)
=	O
0	int
;	O
return	O
ss	*(char)
;	O
}	O
char	O
*	O
expand_format	(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),int,int,*(char),*(char),long,long,array(*(char)),array(*(char)),long,int,long,long,long,long,long,long,long,int,int,int,int,int,int,int,int,long,long,long,long,long,long,int,int,long,int,array(int),array(long),*(struct(int,int,*`,*`)),long,*(long),long,long,long,int,struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,*(struct),*(*(struct`)),long,struct(short,char,char,char,char),*(char),*(struct),int,int,array(struct(short,short)),*(struct(long,long)),*(struct(long,long)),int,array(*(char)))),char,int)->(*(char))
(	O
struct	O
WEdit	struct
*	O
edit_widget	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,int,*(char),*(char),long,long,array(*(char)),array(*(char)),long,int,long,long,long,long,long,long,long,int,int,int,int,int,int,int,int,long,long,long,long,long,long,int,int,long,int,array(int),array(long),*(struct(int,int,*(struct`),*(struct`))),long,*(long),long,long,long,int,struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,*(struct),*(*(struct)),long,struct(short,char,char,char,char),*(char),*(struct),int,int,array(struct(short,short)),*(struct(long,long)),*(struct(long,long)),int,array(*(char))))
,	O
char	O
c	int
,	O
int	O
quote	int
)	O
{	O
WPanel	struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))),*(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))),*((*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*(struct(int,int,int,enum(int,int,int,int,int,int,int,int,int))),*(void))->(int)),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))))),struct(*(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),struct(int,int,int,int))),int),int,int,array(char),array(char),*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`))))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char))
*	O
panel	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),struct(*(struct(int,*`,struct`,struct`)),int),int,int,array(char),array(char),*(struct(*(void),*(struct`),*(struct`))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char)))
=	O
NULL	O
;	O
char	O
*	O
(	O
*	O
quote_func	*((*(char),int)->(*(char)))
)	O
(	O
const	O
char	O
*	O
,	O
int	O
)	O
;	O
char	O
*	O
fname	*(char)
;	O
char	O
*	O
result	long
;	O
char	O
c_lc	char
;	O
if	O
(	O
c	int
==	O
'%'	O
)	O
return	O
g_strdup	(*(char))->(*(char))
(	O
"%"	*(char)
)	O
;	O
if	O
(	O
edit_one_file	*(char)
!=	O
NULL	O
)	O
fname	*(char)
=	O
edit_widget	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,int,*(char),*(char),long,long,array(*(char)),array(*(char)),long,int,long,long,long,long,long,long,long,int,int,int,int,int,int,int,int,long,long,long,long,long,long,int,int,long,int,array(int),array(long),*(struct(int,int,*(struct`),*(struct`))),long,*(long),long,long,long,int,struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,*(struct),*(*(struct)),long,struct(short,char,char,char,char),*(char),*(struct),int,int,array(struct(short,short)),*(struct(long,long)),*(struct(long,long)),int,array(*(char))))
->	O
filename	*(char)
;	O
else	O
{	O
if	O
(	O
islower	(int)->(int)
(	O
(	O
unsigned	O
char	O
)	O
c	int
)	O
)	O
panel	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),struct(*(struct(int,*`,struct`,struct`)),int),int,int,array(char),array(char),*(struct(*(void),*(struct`),*(struct`))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char)))
=	O
current_panel	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),struct(*(struct(int,*`,struct`,struct`)),int),int,int,array(char),array(char),*(struct(*(void),*(struct`),*(struct`))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char)))
;	O
else	O
{	O
if	O
(	O
get_other_type	()->(int)
(	O
)	O
!=	O
view_listing	int
)	O
return	O
g_strdup	(*(char))->(*(char))
(	O
""	*(char)
)	O
;	O
panel	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),struct(*(struct(int,*`,struct`,struct`)),int),int,int,array(char),array(char),*(struct(*(void),*(struct`),*(struct`))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char)))
=	O
other_panel	O
;	O
}	O
fname	*(char)
=	O
panel	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),struct(*(struct(int,*`,struct`,struct`)),int),int,int,array(char),array(char),*(struct(*(void),*(struct`),*(struct`))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char)))
->	O
dir	*(struct)
.	O
list	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
[	O
panel	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),struct(*(struct(int,*`,struct`,struct`)),int),int,int,array(char),array(char),*(struct(*(void),*(struct`),*(struct`))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char)))
->	O
selected	int
]	O
.	O
fname	*(char)
;	O
}	O
if	O
(	O
quote	int
)	O
quote_func	*((*(char),int)->(*(char)))
=	O
name_quote	(*(char),int)->(*(char))
;	O
else	O
quote_func	*((*(char),int)->(*(char)))
=	O
fake_name_quote	(*(char),int)->(*(char))
;	O
c_lc	char
=	O
tolower	(int)->(int)
(	O
(	O
unsigned	O
char	O
)	O
c	int
)	O
;	O
switch	O
(	O
c_lc	char
)	O
{	O
case	O
'f'	O
:	O
case	O
'p'	O
:	O
return	O
(	O
*	O
quote_func	*((*(char),int)->(*(char)))
)	O
(	O
fname	*(char)
,	O
0	int
)	O
;	O
case	O
'x'	O
:	O
return	O
(	O
*	O
quote_func	*((*(char),int)->(*(char)))
)	O
(	O
extension	(*(char))->(*(char))
(	O
fname	*(char)
)	O
,	O
0	int
)	O
;	O
case	O
'd'	O
:	O
{	O
char	O
*	O
cwd	short
;	O
char	O
*	O
qstr	*(char)
;	O
cwd	short
=	O
g_malloc	(long)->(*(void))
(	O
MC_MAXPATHLEN	O
+	O
1	int
)	O
;	O
if	O
(	O
panel	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),struct(*(struct(int,*`,struct`,struct`)),int),int,int,array(char),array(char),*(struct(*(void),*(struct`),*(struct`))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char)))
)	O
g_strlcpy	(*(char),*(char),long)->(long)
(	O
cwd	short
,	O
panel	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),struct(*(struct(int,*`,struct`,struct`)),int),int,int,array(char),array(char),*(struct(*(void),*(struct`),*(struct`))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char)))
->	O
cwd	short
,	O
MC_MAXPATHLEN	O
+	O
1	int
)	O
;	O
else	O
mc_get_current_wd	(*(char),int)->(*(char))
(	O
cwd	short
,	O
MC_MAXPATHLEN	O
+	O
1	int
)	O
;	O
qstr	*(char)
=	O
(	O
*	O
quote_func	*((*(char),int)->(*(char)))
)	O
(	O
cwd	short
,	O
0	int
)	O
;	O
g_free	(*(void))->(void)
(	O
cwd	short
)	O
;	O
return	O
qstr	*(char)
;	O
}	O
case	O
'i'	O
:	O
if	O
(	O
edit_widget	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,int,*(char),*(char),long,long,array(*(char)),array(*(char)),long,int,long,long,long,long,long,long,long,int,int,int,int,int,int,int,int,long,long,long,long,long,long,int,int,long,int,array(int),array(long),*(struct(int,int,*(struct`),*(struct`))),long,*(long),long,long,long,int,struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,*(struct),*(*(struct)),long,struct(short,char,char,char,char),*(char),*(struct),int,int,array(struct(short,short)),*(struct(long,long)),*(struct(long,long)),int,array(*(char))))
)	O
return	O
g_strnfill	(long,char)->(*(char))
(	O
edit_widget	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,int,*(char),*(char),long,long,array(*(char)),array(*(char)),long,int,long,long,long,long,long,long,long,int,int,int,int,int,int,int,int,long,long,long,long,long,long,int,int,long,int,array(int),array(long),*(struct(int,int,*(struct`),*(struct`))),long,*(long),long,long,long,int,struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,*(struct),*(*(struct)),long,struct(short,char,char,char,char),*(char),*(struct),int,int,array(struct(short,short)),*(struct(long,long)),*(struct(long,long)),int,array(*(char))))
->	O
curs_col	long
,	O
' '	O
)	O
;	O
break	O
;	O
case	O
'y'	O
:	O
if	O
(	O
edit_widget	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,int,*(char),*(char),long,long,array(*(char)),array(*(char)),long,int,long,long,long,long,long,long,long,int,int,int,int,int,int,int,int,long,long,long,long,long,long,int,int,long,int,array(int),array(long),*(struct(int,int,*(struct`),*(struct`))),long,*(long),long,long,long,int,struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,*(struct),*(*(struct)),long,struct(short,char,char,char,char),*(char),*(struct),int,int,array(struct(short,short)),*(struct(long,long)),*(struct(long,long)),int,array(*(char))))
&&	O
edit_widget	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,int,*(char),*(char),long,long,array(*(char)),array(*(char)),long,int,long,long,long,long,long,long,long,int,int,int,int,int,int,int,int,long,long,long,long,long,long,int,int,long,int,array(int),array(long),*(struct(int,int,*(struct`),*(struct`))),long,*(long),long,long,long,int,struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,*(struct),*(*(struct)),long,struct(short,char,char,char,char),*(char),*(struct),int,int,array(struct(short,short)),*(struct(long,long)),*(struct(long,long)),int,array(*(char))))
->	O
syntax_type	*(char)
)	O
return	O
g_strdup	(*(char))->(*(char))
(	O
edit_widget	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,int,*(char),*(char),long,long,array(*(char)),array(*(char)),long,int,long,long,long,long,long,long,long,int,int,int,int,int,int,int,int,long,long,long,long,long,long,int,int,long,int,array(int),array(long),*(struct(int,int,*(struct`),*(struct`))),long,*(long),long,long,long,int,struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,*(struct),*(*(struct)),long,struct(short,char,char,char,char),*(char),*(struct),int,int,array(struct(short,short)),*(struct(long,long)),*(struct(long,long)),int,array(*(char))))
->	O
syntax_type	*(char)
)	O
;	O
break	O
;	O
case	O
'k'	O
:	O
case	O
'b'	O
:	O
{	O
if	O
(	O
edit_widget	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,int,*(char),*(char),long,long,array(*(char)),array(*(char)),long,int,long,long,long,long,long,long,long,int,int,int,int,int,int,int,int,long,long,long,long,long,long,int,int,long,int,array(int),array(long),*(struct(int,int,*(struct`),*(struct`))),long,*(long),long,long,long,int,struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,*(struct),*(*(struct)),long,struct(short,char,char,char,char),*(char),*(struct),int,int,array(struct(short,short)),*(struct(long,long)),*(struct(long,long)),int,array(*(char))))
)	O
{	O
char	O
*	O
file	*(char)
=	O
g_strconcat	(*(char))->(*(char))
(	O
home_dir	*(char)
,	O
PATH_SEP_STR	*(char)
BLOCK_FILE	O
,	O
(	O
char	O
*	O
)	O
NULL	O
)	O
;	O
fname	*(char)
=	O
(	O
*	O
quote_func	*((*(char),int)->(*(char)))
)	O
(	O
file	*(char)
,	O
0	int
)	O
;	O
g_free	(*(void))->(void)
(	O
file	*(char)
)	O
;	O
return	O
fname	*(char)
;	O
}	O
else	O
if	O
(	O
c_lc	char
==	O
'b'	O
)	O
{	O
return	O
strip_ext	(*(char))->(*(char))
(	O
(	O
*	O
quote_func	*((*(char),int)->(*(char)))
)	O
(	O
fname	*(char)
,	O
0	int
)	O
)	O
;	O
}	O
break	O
;	O
}	O
case	O
'n'	O
:	O
if	O
(	O
edit_widget	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,int,*(char),*(char),long,long,array(*(char)),array(*(char)),long,int,long,long,long,long,long,long,long,int,int,int,int,int,int,int,int,long,long,long,long,long,long,int,int,long,int,array(int),array(long),*(struct(int,int,*(struct`),*(struct`))),long,*(long),long,long,long,int,struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,*(struct),*(*(struct)),long,struct(short,char,char,char,char),*(char),*(struct),int,int,array(struct(short,short)),*(struct(long,long)),*(struct(long,long)),int,array(*(char))))
)	O
return	O
strip_ext	(*(char))->(*(char))
(	O
(	O
*	O
quote_func	*((*(char),int)->(*(char)))
)	O
(	O
fname	*(char)
,	O
0	int
)	O
)	O
;	O
break	O
;	O
case	O
'm'	O
:	O
if	O
(	O
menu	*(*(struct(*(char),int,int,int,int,*(struct(char,*`,int,*`)),int,*(char))))
)	O
return	O
(	O
*	O
quote_func	*((*(char),int)->(*(char)))
)	O
(	O
menu	*(*(struct(*(char),int,int,int,int,*(struct(char,*`,int,*`)),int,*(char))))
,	O
0	int
)	O
;	O
break	O
;	O
case	O
's'	O
:	O
if	O
(	O
!	O
panel	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),struct(*(struct(int,*`,struct`,struct`)),int),int,int,array(char),array(char),*(struct(*(void),*(struct`),*(struct`))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char)))
||	O
!	O
panel	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),struct(*(struct(int,*`,struct`,struct`)),int),int,int,array(char),array(char),*(struct(*(void),*(struct`),*(struct`))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char)))
->	O
marked	int
)	O
return	O
(	O
*	O
quote_func	*((*(char),int)->(*(char)))
)	O
(	O
fname	*(char)
,	O
0	int
)	O
;	O
case	O
't'	O
:	O
case	O
'u'	O
:	O
{	O
int	O
length	int
=	O
2	int
,	O
i	array(int)
;	O
char	O
*	O
block	int
,	O
*	O
tmp	*(char)
;	O
if	O
(	O
!	O
panel	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),struct(*(struct(int,*`,struct`,struct`)),int),int,int,array(char),array(char),*(struct(*(void),*(struct`),*(struct`))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char)))
)	O
return	O
g_strdup	(*(char))->(*(char))
(	O
""	*(char)
)	O
;	O
for	O
(	O
i	array(int)
=	O
0	int
;	O
i	array(int)
<	O
panel	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),struct(*(struct(int,*`,struct`,struct`)),int),int,int,array(char),array(char),*(struct(*(void),*(struct`),*(struct`))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char)))
->	O
count	int
;	O
i	array(int)
++	O
)	O
if	O
(	O
panel	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),struct(*(struct(int,*`,struct`,struct`)),int),int,int,array(char),array(char),*(struct(*(void),*(struct`),*(struct`))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char)))
->	O
dir	*(struct)
.	O
list	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
[	O
i	array(int)
]	O
.	O
f	float
.	O
marked	int
)	O
length	int
+=	O
strlen	(*(char))->(long)
(	O
panel	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),struct(*(struct(int,*`,struct`,struct`)),int),int,int,array(char),array(char),*(struct(*(void),*(struct`),*(struct`))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char)))
->	O
dir	*(struct)
.	O
list	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
[	O
i	array(int)
]	O
.	O
fname	*(char)
)	O
+	O
1	int
;	O
block	int
=	O
g_malloc	(long)->(*(void))
(	O
length	int
*	O
2	int
+	O
1	int
)	O
;	O
*	O
block	int
=	O
0	int
;	O
for	O
(	O
i	array(int)
=	O
0	int
;	O
i	array(int)
<	O
panel	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),struct(*(struct(int,*`,struct`,struct`)),int),int,int,array(char),array(char),*(struct(*(void),*(struct`),*(struct`))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char)))
->	O
count	int
;	O
i	array(int)
++	O
)	O
if	O
(	O
panel	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),struct(*(struct(int,*`,struct`,struct`)),int),int,int,array(char),array(char),*(struct(*(void),*(struct`),*(struct`))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char)))
->	O
dir	*(struct)
.	O
list	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
[	O
i	array(int)
]	O
.	O
f	float
.	O
marked	int
)	O
{	O
strcat	(*(char),*(char))->(*(char))
(	O
block	int
,	O
tmp	*(char)
=	O
(	O
*	O
quote_func	*((*(char),int)->(*(char)))
)	O
(	O
panel	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),struct(*(struct(int,*`,struct`,struct`)),int),int,int,array(char),array(char),*(struct(*(void),*(struct`),*(struct`))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char)))
->	O
dir	*(struct)
.	O
list	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
[	O
i	array(int)
]	O
.	O
fname	*(char)
,	O
0	int
)	O
)	O
;	O
g_free	(*(void))->(void)
(	O
tmp	*(char)
)	O
;	O
strcat	(*(char),*(char))->(*(char))
(	O
block	int
,	O
" "	*(char)
)	O
;	O
if	O
(	O
c_lc	char
==	O
'u'	O
)	O
do_file_mark	(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),struct(*(struct`),int),int,int,array(char),array(char),*(struct(*`,*`,*`)),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*`,*`)->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char))),int,int)->(void)
(	O
panel	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),struct(*(struct(int,*`,struct`,struct`)),int),int,int,array(char),array(char),*(struct(*(void),*(struct`),*(struct`))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char)))
,	O
i	array(int)
,	O
0	int
)	O
;	O
}	O
return	O
block	int
;	O
}	O
}	O
result	long
=	O
g_strdup	(*(char))->(*(char))
(	O
"% "	*(char)
)	O
;	O
result	long
[	O
1	int
]	O
=	O
c	int
;	O
return	O
result	long
;	O
}	O
static	O
char	O
*	O
check_patterns	(*(char))->(*(char))
(	O
char	O
*	O
p	*(void)
)	O
{	O
static	O
const	O
char	O
def_name	array(char)
[	O
]	O
=	O
"shell_patterns="	*(char)
;	O
char	O
*	O
p0	*(char)
=	O
p	*(void)
;	O
if	O
(	O
strncmp	(*(char),*(char),long)->(int)
(	O
p	*(void)
,	O
def_name	array(char)
,	O
sizeof	O
(	O
def_name	array(char)
)	O
-	O
1	int
)	O
!=	O
0	int
)	O
return	O
p0	*(char)
;	O
p	*(void)
+=	O
sizeof	O
(	O
def_name	array(char)
)	O
-	O
1	int
;	O
if	O
(	O
*	O
p	*(void)
==	O
'1'	O
)	O
easy_patterns	int
=	O
1	int
;	O
else	O
if	O
(	O
*	O
p	*(void)
==	O
'0'	O
)	O
easy_patterns	int
=	O
0	int
;	O
else	O
return	O
p0	*(char)
;	O
p	*(void)
++	O
;	O
while	O
(	O
*	O
p	*(void)
==	O
'\n'	O
||	O
*	O
p	*(void)
==	O
'\t'	O
||	O
*	O
p	*(void)
==	O
' '	O
)	O
p	*(void)
++	O
;	O
return	O
p	*(void)
;	O
}	O
static	O
char	O
*	O
extract_arg	(*(char),*(char),int)->(*(char))
(	O
char	O
*	O
p	*(void)
,	O
char	O
*	O
arg	*(void)
,	O
int	O
size	long
)	O
{	O
while	O
(	O
*	O
p	*(void)
&&	O
(	O
*	O
p	*(void)
==	O
' '	O
||	O
*	O
p	*(void)
==	O
'\t'	O
||	O
*	O
p	*(void)
==	O
'\n'	O
)	O
)	O
p	*(void)
++	O
;	O
while	O
(	O
size	long
>	O
1	int
&&	O
*	O
p	*(void)
&&	O
(	O
*	O
p	*(void)
!=	O
' '	O
||	O
*	O
(	O
p	*(void)
-	O
1	int
)	O
==	O
'\\'	O
)	O
&&	O
*	O
p	*(void)
!=	O
'\t'	O
&&	O
*	O
p	*(void)
!=	O
'\n'	O
)	O
{	O
*	O
arg	*(void)
++	O
=	O
*	O
p	*(void)
++	O
;	O
size	long
--	O
;	O
}	O
*	O
arg	*(void)
=	O
0	int
;	O
if	O
(	O
!	O
*	O
p	*(void)
||	O
*	O
p	*(void)
==	O
'\n'	O
)	O
p	*(void)
--	O
;	O
return	O
p	*(void)
;	O
}	O
static	O
int	O
test_type	(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),struct(*(struct`),int),int,int,array(char),array(char),*(struct(*`,*`,*`)),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*`,*`)->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char))),*(char))->(int)
(	O
WPanel	struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))),*(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))),*((*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*(struct(int,int,int,enum(int,int,int,int,int,int,int,int,int))),*(void))->(int)),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))))),struct(*(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),struct(int,int,int,int))),int),int,int,array(char),array(char),*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`))))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char))
*	O
panel	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),struct(*(struct(int,*`,struct`,struct`)),int),int,int,array(char),array(char),*(struct(*(void),*(struct`),*(struct`))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char)))
,	O
char	O
*	O
arg	*(void)
)	O
{	O
int	O
result	long
=	O
0	int
;	O
int	O
st_mode	int
=	O
panel	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),struct(*(struct(int,*`,struct`,struct`)),int),int,int,array(char),array(char),*(struct(*(void),*(struct`),*(struct`))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char)))
->	O
dir	*(struct)
.	O
list	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
[	O
panel	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),struct(*(struct(int,*`,struct`,struct`)),int),int,int,array(char),array(char),*(struct(*(void),*(struct`),*(struct`))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char)))
->	O
selected	int
]	O
.	O
st	*(struct)
.	O
st_mode	int
;	O
for	O
(	O
;	O
*	O
arg	*(void)
!=	O
0	int
;	O
arg	*(void)
++	O
)	O
{	O
switch	O
(	O
*	O
arg	*(void)
)	O
{	O
case	O
'n'	O
:	O
result	long
|=	O
!	O
S_ISDIR	O
(	O
st_mode	int
)	O
;	O
break	O
;	O
case	O
'r'	O
:	O
result	long
|=	O
S_ISREG	O
(	O
st_mode	int
)	O
;	O
break	O
;	O
case	O
'd'	O
:	O
result	long
|=	O
S_ISDIR	O
(	O
st_mode	int
)	O
;	O
break	O
;	O
case	O
'l'	O
:	O
result	long
|=	O
S_ISLNK	O
(	O
st_mode	int
)	O
;	O
break	O
;	O
case	O
'c'	O
:	O
result	long
|=	O
S_ISCHR	O
(	O
st_mode	int
)	O
;	O
break	O
;	O
case	O
'b'	O
:	O
result	long
|=	O
S_ISBLK	O
(	O
st_mode	int
)	O
;	O
break	O
;	O
case	O
'f'	O
:	O
result	long
|=	O
S_ISFIFO	O
(	O
st_mode	int
)	O
;	O
break	O
;	O
case	O
's'	O
:	O
result	long
|=	O
S_ISSOCK	O
(	O
st_mode	int
)	O
;	O
break	O
;	O
case	O
'x'	O
:	O
result	long
|=	O
(	O
st_mode	int
&	O
0111	int
)	O
?	O
1	int
:	O
0	int
;	O
break	O
;	O
case	O
't'	O
:	O
result	long
|=	O
panel	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),struct(*(struct(int,*`,struct`,struct`)),int),int,int,array(char),array(char),*(struct(*(void),*(struct`),*(struct`))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char)))
->	O
marked	int
?	O
1	int
:	O
0	int
;	O
break	O
;	O
default	O
:	O
debug_error	int
=	O
1	int
;	O
break	O
;	O
}	O
}	O
return	O
result	long
;	O
}	O
static	O
char	O
*	O
test_condition	(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),int,int,*(char),*(char),long,long,array(*(char)),array(*(char)),long,int,long,long,long,long,long,long,long,int,int,int,int,int,int,int,int,long,long,long,long,long,long,int,int,long,int,array(int),array(long),*(struct(int,int,*`,*`)),long,*(long),long,long,long,int,struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,*(struct),*(*(struct`)),long,struct(short,char,char,char,char),*(char),*(struct),int,int,array(struct(short,short)),*(struct(long,long)),*(struct(long,long)),int,array(*(char)))),*(char),*(int))->(*(char))
(	O
WEdit	struct
*	O
edit_widget	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,int,*(char),*(char),long,long,array(*(char)),array(*(char)),long,int,long,long,long,long,long,long,long,int,int,int,int,int,int,int,int,long,long,long,long,long,long,int,int,long,int,array(int),array(long),*(struct(int,int,*(struct`),*(struct`))),long,*(long),long,long,long,int,struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,*(struct),*(*(struct)),long,struct(short,char,char,char,char),*(char),*(struct),int,int,array(struct(short,short)),*(struct(long,long)),*(struct(long,long)),int,array(*(char))))
,	O
char	O
*	O
p	*(void)
,	O
int	O
*	O
condition	enum(int,int,int,int,int,int)
)	O
{	O
WPanel	struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))),*(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))),*((*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*(struct(int,int,int,enum(int,int,int,int,int,int,int,int,int))),*(void))->(int)),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))))),struct(*(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),struct(int,int,int,int))),int),int,int,array(char),array(char),*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`))))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char))
*	O
panel	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),struct(*(struct(int,*`,struct`,struct`)),int),int,int,array(char),array(char),*(struct(*(void),*(struct`),*(struct`))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char)))
;	O
char	O
arg	*(void)
[	O
256	int
]	O
;	O
for	O
(	O
;	O
*	O
p	*(void)
!=	O
'\n'	O
&&	O
*	O
p	*(void)
!=	O
'&'	O
&&	O
*	O
p	*(void)
!=	O
'|'	O
;	O
p	*(void)
++	O
)	O
{	O
if	O
(	O
(	O
*	O
p	*(void)
==	O
' '	O
&&	O
*	O
(	O
p	*(void)
-	O
1	int
)	O
!=	O
'\\'	O
)	O
||	O
*	O
p	*(void)
==	O
'\t'	O
)	O
continue	O
;	O
if	O
(	O
*	O
p	*(void)
>=	O
'a'	O
)	O
panel	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),struct(*(struct(int,*`,struct`,struct`)),int),int,int,array(char),array(char),*(struct(*(void),*(struct`),*(struct`))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char)))
=	O
current_panel	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),struct(*(struct(int,*`,struct`,struct`)),int),int,int,array(char),array(char),*(struct(*(void),*(struct`),*(struct`))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char)))
;	O
else	O
{	O
if	O
(	O
get_other_type	()->(int)
(	O
)	O
==	O
view_listing	int
)	O
panel	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),struct(*(struct(int,*`,struct`,struct`)),int),int,int,array(char),array(char),*(struct(*(void),*(struct`),*(struct`))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char)))
=	O
other_panel	O
;	O
else	O
panel	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),struct(*(struct(int,*`,struct`,struct`)),int),int,int,array(char),array(char),*(struct(*(void),*(struct`),*(struct`))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char)))
=	O
NULL	O
;	O
}	O
*	O
p	*(void)
|=	O
0x20	int
;	O
switch	O
(	O
*	O
p	*(void)
++	O
)	O
{	O
case	O
'!'	O
:	O
p	*(void)
=	O
test_condition	(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),int,int,*(char),*(char),long,long,array(*(char)),array(*(char)),long,int,long,long,long,long,long,long,long,int,int,int,int,int,int,int,int,long,long,long,long,long,long,int,int,long,int,array(int),array(long),*(struct(int,int,*`,*`)),long,*(long),long,long,long,int,struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,*(struct),*(*(struct`)),long,struct(short,char,char,char,char),*(char),*(struct),int,int,array(struct(short,short)),*(struct(long,long)),*(struct(long,long)),int,array(*(char)))),*(char),*(int))->(*(char))
(	O
edit_widget	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,int,*(char),*(char),long,long,array(*(char)),array(*(char)),long,int,long,long,long,long,long,long,long,int,int,int,int,int,int,int,int,long,long,long,long,long,long,int,int,long,int,array(int),array(long),*(struct(int,int,*(struct`),*(struct`))),long,*(long),long,long,long,int,struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,*(struct),*(*(struct)),long,struct(short,char,char,char,char),*(char),*(struct),int,int,array(struct(short,short)),*(struct(long,long)),*(struct(long,long)),int,array(*(char))))
,	O
p	*(void)
,	O
condition	enum(int,int,int,int,int,int)
)	O
;	O
*	O
condition	enum(int,int,int,int,int,int)
=	O
!	O
*	O
condition	enum(int,int,int,int,int,int)
;	O
p	*(void)
--	O
;	O
break	O
;	O
case	O
'f'	O
:	O
p	*(void)
=	O
extract_arg	(*(char),*(char),int)->(*(char))
(	O
p	*(void)
,	O
arg	*(void)
,	O
sizeof	O
(	O
arg	*(void)
)	O
)	O
;	O
*	O
condition	enum(int,int,int,int,int,int)
=	O
panel	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),struct(*(struct(int,*`,struct`,struct`)),int),int,int,array(char),array(char),*(struct(*(void),*(struct`),*(struct`))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char)))
&&	O
regexp_match	(*(char),*(char),int)->(int)
(	O
arg	*(void)
,	O
panel	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),struct(*(struct(int,*`,struct`,struct`)),int),int,int,array(char),array(char),*(struct(*(void),*(struct`),*(struct`))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char)))
->	O
dir	*(struct)
.	O
list	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
[	O
panel	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),struct(*(struct(int,*`,struct`,struct`)),int),int,int,array(char),array(char),*(struct(*(void),*(struct`),*(struct`))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char)))
->	O
selected	int
]	O
.	O
fname	*(char)
,	O
match_file	int
)	O
;	O
break	O
;	O
case	O
'y'	O
:	O
if	O
(	O
edit_widget	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,int,*(char),*(char),long,long,array(*(char)),array(*(char)),long,int,long,long,long,long,long,long,long,int,int,int,int,int,int,int,int,long,long,long,long,long,long,int,int,long,int,array(int),array(long),*(struct(int,int,*(struct`),*(struct`))),long,*(long),long,long,long,int,struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,*(struct),*(*(struct)),long,struct(short,char,char,char,char),*(char),*(struct),int,int,array(struct(short,short)),*(struct(long,long)),*(struct(long,long)),int,array(*(char))))
&&	O
edit_widget	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,int,*(char),*(char),long,long,array(*(char)),array(*(char)),long,int,long,long,long,long,long,long,long,int,int,int,int,int,int,int,int,long,long,long,long,long,long,int,int,long,int,array(int),array(long),*(struct(int,int,*(struct`),*(struct`))),long,*(long),long,long,long,int,struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,*(struct),*(*(struct)),long,struct(short,char,char,char,char),*(char),*(struct),int,int,array(struct(short,short)),*(struct(long,long)),*(struct(long,long)),int,array(*(char))))
->	O
syntax_type	*(char)
)	O
{	O
p	*(void)
=	O
extract_arg	(*(char),*(char),int)->(*(char))
(	O
p	*(void)
,	O
arg	*(void)
,	O
sizeof	O
(	O
arg	*(void)
)	O
)	O
;	O
*	O
condition	enum(int,int,int,int,int,int)
=	O
panel	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),struct(*(struct(int,*`,struct`,struct`)),int),int,int,array(char),array(char),*(struct(*(void),*(struct`),*(struct`))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char)))
&&	O
regexp_match	(*(char),*(char),int)->(int)
(	O
arg	*(void)
,	O
edit_widget	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,int,*(char),*(char),long,long,array(*(char)),array(*(char)),long,int,long,long,long,long,long,long,long,int,int,int,int,int,int,int,int,long,long,long,long,long,long,int,int,long,int,array(int),array(long),*(struct(int,int,*(struct`),*(struct`))),long,*(long),long,long,long,int,struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,*(struct),*(*(struct)),long,struct(short,char,char,char,char),*(char),*(struct),int,int,array(struct(short,short)),*(struct(long,long)),*(struct(long,long)),int,array(*(char))))
->	O
syntax_type	*(char)
,	O
match_normal	int
)	O
;	O
}	O
break	O
;	O
case	O
'd'	O
:	O
p	*(void)
=	O
extract_arg	(*(char),*(char),int)->(*(char))
(	O
p	*(void)
,	O
arg	*(void)
,	O
sizeof	O
(	O
arg	*(void)
)	O
)	O
;	O
*	O
condition	enum(int,int,int,int,int,int)
=	O
panel	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),struct(*(struct(int,*`,struct`,struct`)),int),int,int,array(char),array(char),*(struct(*(void),*(struct`),*(struct`))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char)))
&&	O
regexp_match	(*(char),*(char),int)->(int)
(	O
arg	*(void)
,	O
panel	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),struct(*(struct(int,*`,struct`,struct`)),int),int,int,array(char),array(char),*(struct(*(void),*(struct`),*(struct`))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char)))
->	O
cwd	short
,	O
match_file	int
)	O
;	O
break	O
;	O
case	O
't'	O
:	O
p	*(void)
=	O
extract_arg	(*(char),*(char),int)->(*(char))
(	O
p	*(void)
,	O
arg	*(void)
,	O
sizeof	O
(	O
arg	*(void)
)	O
)	O
;	O
*	O
condition	enum(int,int,int,int,int,int)
=	O
panel	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),struct(*(struct(int,*`,struct`,struct`)),int),int,int,array(char),array(char),*(struct(*(void),*(struct`),*(struct`))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char)))
&&	O
test_type	(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),struct(*(struct`),int),int,int,array(char),array(char),*(struct(*`,*`,*`)),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*`,*`)->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char))),*(char))->(int)
(	O
panel	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),struct(*(struct(int,*`,struct`,struct`)),int),int,int,array(char),array(char),*(struct(*(void),*(struct`),*(struct`))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char)))
,	O
arg	*(void)
)	O
;	O
break	O
;	O
case	O
'x'	O
:	O
{	O
struct	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
status	int
;	O
p	*(void)
=	O
extract_arg	(*(char),*(char),int)->(*(char))
(	O
p	*(void)
,	O
arg	*(void)
,	O
sizeof	O
(	O
arg	*(void)
)	O
)	O
;	O
if	O
(	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
(	O
arg	*(void)
,	O
&	O
status	int
)	O
==	O
0	int
)	O
*	O
condition	enum(int,int,int,int,int,int)
=	O
is_exe	(int)->(int)
(	O
status	int
.	O
st_mode	int
)	O
;	O
else	O
*	O
condition	enum(int,int,int,int,int,int)
=	O
0	int
;	O
break	O
;	O
}	O
default	O
:	O
debug_error	int
=	O
1	int
;	O
break	O
;	O
}	O
}	O
return	O
p	*(void)
;	O
}	O
static	O
void	O
debug_out	(*(char),*(char),int)->(void)
(	O
char	O
*	O
start	*(int)
,	O
char	O
*	O
end	*(struct)
,	O
int	O
cond	*(struct(*(void),array(int)))
)	O
{	O
static	O
char	O
*	O
msg	*(char)
;	O
int	O
len	int
;	O
if	O
(	O
start	*(int)
==	O
NULL	O
&&	O
end	*(struct)
==	O
NULL	O
)	O
{	O
if	O
(	O
debug_flag	int
&&	O
msg	*(char)
)	O
{	O
len	int
=	O
strlen	(*(char))->(long)
(	O
msg	*(char)
)	O
;	O
if	O
(	O
len	int
)	O
msg	*(char)
[	O
len	int
-	O
1	int
]	O
=	O
0	int
;	O
message	*(char)
(	O
0	int
,	O
_	O
(	O
" Debug "	*(char)
)	O
,	O
"%s"	*(char)
,	O
msg	*(char)
)	O
;	O
}	O
debug_flag	int
=	O
0	int
;	O
g_free	(*(void))->(void)
(	O
msg	*(char)
)	O
;	O
msg	*(char)
=	O
NULL	O
;	O
}	O
else	O
{	O
const	O
char	O
*	O
type	enum(int,int,int,int)
;	O
char	O
*	O
p	*(void)
;	O
if	O
(	O
!	O
debug_flag	int
)	O
return	O
;	O
if	O
(	O
debug_error	int
)	O
{	O
type	enum(int,int,int,int)
=	O
_	O
(	O
" ERROR: "	*(char)
)	O
;	O
debug_error	int
=	O
0	int
;	O
}	O
else	O
if	O
(	O
cond	*(struct(*(void),array(int)))
)	O
type	enum(int,int,int,int)
=	O
_	O
(	O
" True:  "	*(char)
)	O
;	O
else	O
type	enum(int,int,int,int)
=	O
_	O
(	O
" False: "	*(char)
)	O
;	O
if	O
(	O
end	*(struct)
==	O
NULL	O
)	O
p	*(void)
=	O
g_strdup_printf	(*(char))->(*(char))
(	O
"%s%s%c \n"	*(char)
,	O
msg	*(char)
?	O
msg	*(char)
:	O
""	*(char)
,	O
type	enum(int,int,int,int)
,	O
*	O
start	*(int)
)	O
;	O
else	O
p	*(void)
=	O
g_strdup_printf	(*(char))->(*(char))
(	O
"%s%s%.*s \n"	*(char)
,	O
msg	*(char)
?	O
msg	*(char)
:	O
""	*(char)
,	O
type	enum(int,int,int,int)
,	O
(	O
int	O
)	O
(	O
end	*(struct)
-	O
start	*(int)
)	O
,	O
start	*(int)
)	O
;	O
g_free	(*(void))->(void)
(	O
msg	*(char)
)	O
;	O
msg	*(char)
=	O
p	*(void)
;	O
}	O
}	O
static	O
char	O
*	O
test_line	(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),int,int,*(char),*(char),long,long,array(*(char)),array(*(char)),long,int,long,long,long,long,long,long,long,int,int,int,int,int,int,int,int,long,long,long,long,long,long,int,int,long,int,array(int),array(long),*(struct(int,int,*`,*`)),long,*(long),long,long,long,int,struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,*(struct),*(*(struct`)),long,struct(short,char,char,char,char),*(char),*(struct),int,int,array(struct(short,short)),*(struct(long,long)),*(struct(long,long)),int,array(*(char)))),*(char),*(int))->(*(char))
(	O
WEdit	struct
*	O
edit_widget	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,int,*(char),*(char),long,long,array(*(char)),array(*(char)),long,int,long,long,long,long,long,long,long,int,int,int,int,int,int,int,int,long,long,long,long,long,long,int,int,long,int,array(int),array(long),*(struct(int,int,*(struct`),*(struct`))),long,*(long),long,long,long,int,struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,*(struct),*(*(struct)),long,struct(short,char,char,char,char),*(char),*(struct),int,int,array(struct(short,short)),*(struct(long,long)),*(struct(long,long)),int,array(*(char))))
,	O
char	O
*	O
p	*(void)
,	O
int	O
*	O
result	long
)	O
{	O
int	O
condition	enum(int,int,int,int,int,int)
;	O
char	O
operator	char
;	O
char	O
*	O
debug_start	*(char)
,	O
*	O
debug_end	*(char)
;	O
while	O
(	O
*	O
p	*(void)
&&	O
*	O
p	*(void)
!=	O
'\n'	O
)	O
{	O
while	O
(	O
(	O
*	O
p	*(void)
==	O
' '	O
&&	O
*	O
(	O
p	*(void)
-	O
1	int
)	O
!=	O
'\\'	O
)	O
||	O
*	O
p	*(void)
==	O
'\t'	O
)	O
p	*(void)
++	O
;	O
if	O
(	O
!	O
*	O
p	*(void)
||	O
*	O
p	*(void)
==	O
'\n'	O
)	O
break	O
;	O
operator	char
=	O
*	O
p	*(void)
++	O
;	O
if	O
(	O
*	O
p	*(void)
==	O
'?'	O
)	O
{	O
debug_flag	int
=	O
1	int
;	O
p	*(void)
++	O
;	O
}	O
while	O
(	O
(	O
*	O
p	*(void)
==	O
' '	O
&&	O
*	O
(	O
p	*(void)
-	O
1	int
)	O
!=	O
'\\'	O
)	O
||	O
*	O
p	*(void)
==	O
'\t'	O
)	O
p	*(void)
++	O
;	O
if	O
(	O
!	O
*	O
p	*(void)
||	O
*	O
p	*(void)
==	O
'\n'	O
)	O
break	O
;	O
condition	enum(int,int,int,int,int,int)
=	O
1	int
;	O
debug_start	*(char)
=	O
p	*(void)
;	O
p	*(void)
=	O
test_condition	(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),int,int,*(char),*(char),long,long,array(*(char)),array(*(char)),long,int,long,long,long,long,long,long,long,int,int,int,int,int,int,int,int,long,long,long,long,long,long,int,int,long,int,array(int),array(long),*(struct(int,int,*`,*`)),long,*(long),long,long,long,int,struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,*(struct),*(*(struct`)),long,struct(short,char,char,char,char),*(char),*(struct),int,int,array(struct(short,short)),*(struct(long,long)),*(struct(long,long)),int,array(*(char)))),*(char),*(int))->(*(char))
(	O
edit_widget	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,int,*(char),*(char),long,long,array(*(char)),array(*(char)),long,int,long,long,long,long,long,long,long,int,int,int,int,int,int,int,int,long,long,long,long,long,long,int,int,long,int,array(int),array(long),*(struct(int,int,*(struct`),*(struct`))),long,*(long),long,long,long,int,struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,*(struct),*(*(struct)),long,struct(short,char,char,char,char),*(char),*(struct),int,int,array(struct(short,short)),*(struct(long,long)),*(struct(long,long)),int,array(*(char))))
,	O
p	*(void)
,	O
&	O
condition	enum(int,int,int,int,int,int)
)	O
;	O
debug_end	*(char)
=	O
p	*(void)
;	O
debug_out	(*(char),*(char),int)->(void)
(	O
debug_start	*(char)
,	O
debug_end	*(char)
,	O
condition	enum(int,int,int,int,int,int)
)	O
;	O
switch	O
(	O
operator	char
)	O
{	O
case	O
'+'	O
:	O
case	O
'='	O
:	O
*	O
result	long
=	O
condition	enum(int,int,int,int,int,int)
;	O
break	O
;	O
case	O
'&'	O
:	O
*	O
result	long
&=	O
condition	enum(int,int,int,int,int,int)
;	O
break	O
;	O
case	O
'|'	O
:	O
*	O
result	long
|=	O
condition	enum(int,int,int,int,int,int)
;	O
break	O
;	O
default	O
:	O
debug_error	int
=	O
1	int
;	O
break	O
;	O
}	O
debug_out	(*(char),*(char),int)->(void)
(	O
&	O
operator	char
,	O
NULL	O
,	O
*	O
result	long
)	O
;	O
}	O
debug_out	(*(char),*(char),int)->(void)
(	O
NULL	O
,	O
NULL	O
,	O
1	int
)	O
;	O
if	O
(	O
!	O
*	O
p	*(void)
||	O
*	O
p	*(void)
==	O
'\n'	O
)	O
p	*(void)
--	O
;	O
return	O
p	*(void)
;	O
}	O
static	O
void	O
execute_menu_command	(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),int,int,*(char),*(char),long,long,array(*(char)),array(*(char)),long,int,long,long,long,long,long,long,long,int,int,int,int,int,int,int,int,long,long,long,long,long,long,int,int,long,int,array(int),array(long),*(struct(int,int,*`,*`)),long,*(long),long,long,long,int,struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,*(struct),*(*(struct`)),long,struct(short,char,char,char,char),*(char),*(struct),int,int,array(struct(short,short)),*(struct(long,long)),*(struct(long,long)),int,array(*(char)))),*(char))->(void)
(	O
WEdit	struct
*	O
edit_widget	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,int,*(char),*(char),long,long,array(*(char)),array(*(char)),long,int,long,long,long,long,long,long,long,int,int,int,int,int,int,int,int,long,long,long,long,long,long,int,int,long,int,array(int),array(long),*(struct(int,int,*(struct`),*(struct`))),long,*(long),long,long,long,int,struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,*(struct),*(*(struct)),long,struct(short,char,char,char,char),*(char),*(struct),int,int,array(struct(short,short)),*(struct(long,long)),*(struct(long,long)),int,array(*(char))))
,	O
const	O
char	O
*	O
commands	*(char)
)	O
{	O
FILE	struct
*	O
cmd_file	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
;	O
int	O
cmd_file_fd	int
;	O
int	O
expand_prefix_found	int
=	O
0	int
;	O
char	O
*	O
parameter	*(char)
=	O
0	int
;	O
int	O
do_quote	int
=	O
0	int
;	O
char	O
prompt	*(char)
[	O
80	int
]	O
;	O
int	O
col	int
;	O
char	O
*	O
file_name	*(char)
;	O
int	O
run_view	int
=	O
0	int
;	O
commands	*(char)
=	O
strchr	(*(char),int)->(*(char))
(	O
commands	*(char)
,	O
'\n'	O
)	O
;	O
if	O
(	O
!	O
commands	*(char)
)	O
{	O
return	O
;	O
}	O
cmd_file_fd	int
=	O
mc_mkstemps	(*(*(char)),*(char),*(char))->(int)
(	O
&	O
file_name	*(char)
,	O
"mcusr"	*(char)
,	O
SCRIPT_SUFFIX	*(char)
)	O
;	O
if	O
(	O
cmd_file_fd	int
==	O
-	O
1	int
)	O
{	O
message	*(char)
(	O
1	int
,	O
MSG_ERROR	O
,	O
_	O
(	O
" Cannot create temporary command file \n %s "	*(char)
)	O
,	O
unix_error_string	(int)->(*(char))
(	O
errno	O
)	O
)	O
;	O
return	O
;	O
}	O
cmd_file	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
=	O
fdopen	(int,*(char))->(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))
(	O
cmd_file_fd	int
,	O
"w"	*(char)
)	O
;	O
fputs	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
"#! /bin/sh\n"	*(char)
,	O
cmd_file	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
commands	*(char)
++	O
;	O
for	O
(	O
col	int
=	O
0	int
;	O
*	O
commands	*(char)
;	O
commands	*(char)
++	O
)	O
{	O
if	O
(	O
col	int
==	O
0	int
)	O
{	O
if	O
(	O
*	O
commands	*(char)
!=	O
' '	O
&&	O
*	O
commands	*(char)
!=	O
'\t'	O
)	O
break	O
;	O
while	O
(	O
*	O
commands	*(char)
==	O
' '	O
||	O
*	O
commands	*(char)
==	O
'\t'	O
)	O
commands	*(char)
++	O
;	O
if	O
(	O
*	O
commands	*(char)
==	O
0	int
)	O
break	O
;	O
}	O
col	int
++	O
;	O
if	O
(	O
*	O
commands	*(char)
==	O
'\n'	O
)	O
col	int
=	O
0	int
;	O
if	O
(	O
parameter	*(char)
)	O
{	O
if	O
(	O
*	O
commands	*(char)
==	O
'}'	O
)	O
{	O
char	O
*	O
tmp	*(char)
;	O
*	O
parameter	*(char)
=	O
0	int
;	O
parameter	*(char)
=	O
input_dialog	(*(char),*(char),*(char))->(*(char))
(	O
_	O
(	O
" Parameter "	*(char)
)	O
,	O
prompt	*(char)
,	O
""	*(char)
)	O
;	O
if	O
(	O
!	O
parameter	*(char)
||	O
!	O
*	O
parameter	*(char)
)	O
{	O
fclose	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
cmd_file	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
unlink	(*(char))->(int)
(	O
file_name	*(char)
)	O
;	O
g_free	(*(void))->(void)
(	O
file_name	*(char)
)	O
;	O
return	O
;	O
}	O
if	O
(	O
do_quote	int
)	O
{	O
fputs	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
tmp	*(char)
=	O
name_quote	(*(char),int)->(*(char))
(	O
parameter	*(char)
,	O
0	int
)	O
,	O
cmd_file	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
g_free	(*(void))->(void)
(	O
tmp	*(char)
)	O
;	O
}	O
else	O
fputs	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
parameter	*(char)
,	O
cmd_file	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
g_free	(*(void))->(void)
(	O
parameter	*(char)
)	O
;	O
parameter	*(char)
=	O
0	int
;	O
}	O
else	O
{	O
if	O
(	O
parameter	*(char)
<	O
&	O
prompt	*(char)
[	O
sizeof	O
(	O
prompt	*(char)
)	O
-	O
1	int
]	O
)	O
{	O
*	O
parameter	*(char)
++	O
=	O
*	O
commands	*(char)
;	O
}	O
}	O
}	O
else	O
if	O
(	O
expand_prefix_found	int
)	O
{	O
expand_prefix_found	int
=	O
0	int
;	O
if	O
(	O
isdigit	(int)->(int)
(	O
(	O
unsigned	O
char	O
)	O
*	O
commands	*(char)
)	O
)	O
{	O
do_quote	int
=	O
atoi	(*(char))->(int)
(	O
commands	*(char)
)	O
;	O
while	O
(	O
isdigit	(int)->(int)
(	O
(	O
unsigned	O
char	O
)	O
*	O
commands	*(char)
)	O
)	O
commands	*(char)
++	O
;	O
}	O
if	O
(	O
*	O
commands	*(char)
==	O
'{'	O
)	O
parameter	*(char)
=	O
prompt	*(char)
;	O
else	O
{	O
char	O
*	O
text	*(char)
=	O
expand_format	(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),int,int,*(char),*(char),long,long,array(*(char)),array(*(char)),long,int,long,long,long,long,long,long,long,int,int,int,int,int,int,int,int,long,long,long,long,long,long,int,int,long,int,array(int),array(long),*(struct(int,int,*`,*`)),long,*(long),long,long,long,int,struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,*(struct),*(*(struct`)),long,struct(short,char,char,char,char),*(char),*(struct),int,int,array(struct(short,short)),*(struct(long,long)),*(struct(long,long)),int,array(*(char)))),char,int)->(*(char))
(	O
edit_widget	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,int,*(char),*(char),long,long,array(*(char)),array(*(char)),long,int,long,long,long,long,long,long,long,int,int,int,int,int,int,int,int,long,long,long,long,long,long,int,int,long,int,array(int),array(long),*(struct(int,int,*(struct`),*(struct`))),long,*(long),long,long,long,int,struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,*(struct),*(*(struct)),long,struct(short,char,char,char,char),*(char),*(struct),int,int,array(struct(short,short)),*(struct(long,long)),*(struct(long,long)),int,array(*(char))))
,	O
*	O
commands	*(char)
,	O
do_quote	int
)	O
;	O
fputs	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
text	*(char)
,	O
cmd_file	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
g_free	(*(void))->(void)
(	O
text	*(char)
)	O
;	O
}	O
}	O
else	O
{	O
if	O
(	O
*	O
commands	*(char)
==	O
'%'	O
)	O
{	O
int	O
i	array(int)
=	O
check_format_view	(*(char))->(int)
(	O
commands	*(char)
+	O
1	int
)	O
;	O
if	O
(	O
i	array(int)
)	O
{	O
commands	*(char)
+=	O
i	array(int)
;	O
run_view	int
=	O
1	int
;	O
}	O
else	O
{	O
do_quote	int
=	O
1	int
;	O
expand_prefix_found	int
=	O
1	int
;	O
}	O
}	O
else	O
fputc	(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
*	O
commands	*(char)
,	O
cmd_file	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
}	O
}	O
fclose	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
cmd_file	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
chmod	(*(char),int)->(int)
(	O
file_name	*(char)
,	O
S_IRWXU	O
)	O
;	O
if	O
(	O
run_view	int
)	O
{	O
run_view	int
=	O
0	int
;	O
mc_internal_viewer	(*(char),*(char),*(int),int)->(int)
(	O
file_name	*(char)
,	O
NULL	O
,	O
&	O
run_view	int
,	O
0	int
)	O
;	O
}	O
else	O
{	O
char	O
*	O
cmd	*(char)
=	O
g_strconcat	(*(char))->(*(char))
(	O
"/bin/sh "	*(char)
,	O
file_name	*(char)
,	O
(	O
char	O
*	O
)	O
NULL	O
)	O
;	O
shell_execute	(*(char),int)->(void)
(	O
cmd	*(char)
,	O
EXECUTE_HIDE	O
)	O
;	O
g_free	(*(void))->(void)
(	O
cmd	*(char)
)	O
;	O
}	O
unlink	(*(char))->(int)
(	O
file_name	*(char)
)	O
;	O
g_free	(*(void))->(void)
(	O
file_name	*(char)
)	O
;	O
}	O
static	O
int	O
menu_file_own	(*(char))->(int)
(	O
char	O
*	O
path	*(char)
)	O
{	O
struct	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
st	*(struct)
;	O
if	O
(	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
(	O
path	*(char)
,	O
&	O
st	*(struct)
)	O
==	O
0	int
&&	O
(	O
!	O
st	*(struct)
.	O
st_uid	int
||	O
(	O
st	*(struct)
.	O
st_uid	int
==	O
geteuid	()->(int)
(	O
)	O
)	O
)	O
&&	O
(	O
(	O
st	*(struct)
.	O
st_mode	int
&	O
(	O
S_IWGRP	O
|	O
S_IWOTH	O
)	O
)	O
==	O
0	int
)	O
)	O
{	O
return	O
1	int
;	O
}	O
if	O
(	O
verbose	int
)	O
{	O
message	*(char)
(	O
0	int
,	O
_	O
(	O
" Warning -- ignoring file "	*(char)
)	O
,	O
_	O
(	O
"File %s is not owned by root or you or is world writable.\n"	*(char)
"Using it may compromise your security"	*(char)
)	O
,	O
path	*(char)
)	O
;	O
}	O
return	O
0	int
;	O
}	O
void	O
user_menu_cmd	(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),int,int,*(char),*(char),long,long,array(*(char)),array(*(char)),long,int,long,long,long,long,long,long,long,int,int,int,int,int,int,int,int,long,long,long,long,long,long,int,int,long,int,array(int),array(long),*(struct(int,int,*`,*`)),long,*(long),long,long,long,int,struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,*(struct),*(*(struct`)),long,struct(short,char,char,char,char),*(char),*(struct),int,int,array(struct(short,short)),*(struct(long,long)),*(struct(long,long)),int,array(*(char)))))->(void)
(	O
struct	O
WEdit	struct
*	O
edit_widget	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,int,*(char),*(char),long,long,array(*(char)),array(*(char)),long,int,long,long,long,long,long,long,long,int,int,int,int,int,int,int,int,long,long,long,long,long,long,int,int,long,int,array(int),array(long),*(struct(int,int,*(struct`),*(struct`))),long,*(long),long,long,long,int,struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,*(struct),*(*(struct)),long,struct(short,char,char,char,char),*(char),*(struct),int,int,array(struct(short,short)),*(struct(long,long)),*(struct(long,long)),int,array(*(char))))
)	O
{	O
char	O
*	O
p	*(void)
;	O
char	O
*	O
data	*(void)
,	O
*	O
*	O
entries	*(struct(*(char),char,int,enum(int,int,int,int,int,int,int,int,int),*(void),*(char),*(char)))
;	O
int	O
max_cols	int
,	O
menu_lines	int
,	O
menu_limit	int
;	O
int	O
col	int
,	O
i	array(int)
,	O
accept_entry	int
=	O
1	int
;	O
int	O
selected	int
,	O
old_patterns	int
;	O
Listbox	struct(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))),*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),*(struct(*`,int,*`,*`,*`)),*(struct(*`,int,*`,*`,*`)),*(struct(*`,int,*`,*`,*`)),int,int,int,int,int,int,*((*`)->(int)),int,int)))
*	O
listbox	*(struct(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`))),*(struct(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`),*(struct`),*(struct`),*(struct`),int,int,int,int,int,int,*((*`)->(int)),int,int))))
;	O
if	O
(	O
!	O
vfs_current_is_local	()->(int)
(	O
)	O
)	O
{	O
message	*(char)
(	O
1	int
,	O
MSG_ERROR	O
,	O
_	O
(	O
" Cannot execute commands on non-local filesystems"	*(char)
)	O
)	O
;	O
return	O
;	O
}	O
menu	*(*(struct(*(char),int,int,int,int,*(struct(char,*`,int,*`)),int,*(char))))
=	O
g_strdup	(*(char))->(*(char))
(	O
edit_widget	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,int,*(char),*(char),long,long,array(*(char)),array(*(char)),long,int,long,long,long,long,long,long,long,int,int,int,int,int,int,int,int,long,long,long,long,long,long,int,int,long,int,array(int),array(long),*(struct(int,int,*(struct`),*(struct`))),long,*(long),long,long,long,int,struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,*(struct),*(*(struct)),long,struct(short,char,char,char,char),*(char),*(struct),int,int,array(struct(short,short)),*(struct(long,long)),*(struct(long,long)),int,array(*(char))))
?	O
CEDIT_LOCAL_MENU	*(char)
:	O
MC_LOCAL_MENU	*(char)
)	O
;	O
if	O
(	O
!	O
exist_file	(*(char))->(int)
(	O
menu	*(*(struct(*(char),int,int,int,int,*(struct(char,*`,int,*`)),int,*(char))))
)	O
||	O
!	O
menu_file_own	(*(char))->(int)
(	O
menu	*(*(struct(*(char),int,int,int,int,*(struct(char,*`,int,*`)),int,*(char))))
)	O
)	O
{	O
g_free	(*(void))->(void)
(	O
menu	*(*(struct(*(char),int,int,int,int,*(struct(char,*`,int,*`)),int,*(char))))
)	O
;	O
menu	*(*(struct(*(char),int,int,int,int,*(struct(char,*`,int,*`)),int,*(char))))
=	O
concat_dir_and_file	(*(char),*(char))->(*(char))
(	O
home_dir	*(char)
,	O
edit_widget	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,int,*(char),*(char),long,long,array(*(char)),array(*(char)),long,int,long,long,long,long,long,long,long,int,int,int,int,int,int,int,int,long,long,long,long,long,long,int,int,long,int,array(int),array(long),*(struct(int,int,*(struct`),*(struct`))),long,*(long),long,long,long,int,struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,*(struct),*(*(struct)),long,struct(short,char,char,char,char),*(char),*(struct),int,int,array(struct(short,short)),*(struct(long,long)),*(struct(long,long)),int,array(*(char))))
?	O
CEDIT_HOME_MENU	*(char)
:	O
MC_HOME_MENU	*(char)
)	O
;	O
if	O
(	O
!	O
exist_file	(*(char))->(int)
(	O
menu	*(*(struct(*(char),int,int,int,int,*(struct(char,*`,int,*`)),int,*(char))))
)	O
)	O
{	O
g_free	(*(void))->(void)
(	O
menu	*(*(struct(*(char),int,int,int,int,*(struct(char,*`,int,*`)),int,*(char))))
)	O
;	O
menu	*(*(struct(*(char),int,int,int,int,*(struct(char,*`,int,*`)),int,*(char))))
=	O
concat_dir_and_file	(*(char),*(char))->(*(char))
(	O
mc_home	*(char)
,	O
edit_widget	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,int,*(char),*(char),long,long,array(*(char)),array(*(char)),long,int,long,long,long,long,long,long,long,int,int,int,int,int,int,int,int,long,long,long,long,long,long,int,int,long,int,array(int),array(long),*(struct(int,int,*(struct`),*(struct`))),long,*(long),long,long,long,int,struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,*(struct),*(*(struct)),long,struct(short,char,char,char,char),*(char),*(struct),int,int,array(struct(short,short)),*(struct(long,long)),*(struct(long,long)),int,array(*(char))))
?	O
CEDIT_GLOBAL_MENU	*(char)
:	O
MC_GLOBAL_MENU	*(char)
)	O
;	O
}	O
}	O
if	O
(	O
(	O
data	*(void)
=	O
load_file	(*(char))->(*(char))
(	O
menu	*(*(struct(*(char),int,int,int,int,*(struct(char,*`,int,*`)),int,*(char))))
)	O
)	O
==	O
NULL	O
)	O
{	O
message	*(char)
(	O
1	int
,	O
MSG_ERROR	O
,	O
_	O
(	O
" Cannot open file %s \n %s "	*(char)
)	O
,	O
menu	*(*(struct(*(char),int,int,int,int,*(struct(char,*`,int,*`)),int,*(char))))
,	O
unix_error_string	(int)->(*(char))
(	O
errno	O
)	O
)	O
;	O
g_free	(*(void))->(void)
(	O
menu	*(*(struct(*(char),int,int,int,int,*(struct(char,*`,int,*`)),int,*(char))))
)	O
;	O
menu	*(*(struct(*(char),int,int,int,int,*(struct(char,*`,int,*`)),int,*(char))))
=	O
NULL	O
;	O
return	O
;	O
}	O
max_cols	int
=	O
0	int
;	O
selected	int
=	O
0	int
;	O
menu_limit	int
=	O
0	int
;	O
entries	*(struct(*(char),char,int,enum(int,int,int,int,int,int,int,int,int),*(void),*(char),*(char)))
=	O
0	int
;	O
old_patterns	int
=	O
easy_patterns	int
;	O
p	*(void)
=	O
check_patterns	(*(char))->(*(char))
(	O
data	*(void)
)	O
;	O
for	O
(	O
menu_lines	int
=	O
col	int
=	O
0	int
;	O
*	O
p	*(void)
;	O
p	*(void)
++	O
)	O
{	O
if	O
(	O
menu_lines	int
>=	O
menu_limit	int
)	O
{	O
char	O
*	O
*	O
new_entries	*(*(char))
;	O
menu_limit	int
+=	O
MAX_ENTRIES	int
;	O
new_entries	*(*(char))
=	O
g_realloc	(*(void),long)->(*(void))
(	O
entries	*(struct(*(char),char,int,enum(int,int,int,int,int,int,int,int,int),*(void),*(char),*(char)))
,	O
sizeof	O
(	O
new_entries	*(*(char))
[	O
0	int
]	O
)	O
*	O
menu_limit	int
)	O
;	O
if	O
(	O
new_entries	*(*(char))
==	O
0	int
)	O
break	O
;	O
entries	*(struct(*(char),char,int,enum(int,int,int,int,int,int,int,int,int),*(void),*(char),*(char)))
=	O
new_entries	*(*(char))
;	O
new_entries	*(*(char))
+=	O
menu_limit	int
;	O
while	O
(	O
--	O
new_entries	*(*(char))
>=	O
&	O
entries	*(struct(*(char),char,int,enum(int,int,int,int,int,int,int,int,int),*(void),*(char),*(char)))
[	O
menu_lines	int
]	O
)	O
*	O
new_entries	*(*(char))
=	O
0	int
;	O
}	O
if	O
(	O
col	int
==	O
0	int
&&	O
!	O
entries	*(struct(*(char),char,int,enum(int,int,int,int,int,int,int,int,int),*(void),*(char),*(char)))
[	O
menu_lines	int
]	O
)	O
{	O
if	O
(	O
*	O
p	*(void)
==	O
'#'	O
)	O
{	O
accept_entry	int
=	O
1	int
;	O
}	O
else	O
if	O
(	O
*	O
p	*(void)
==	O
'+'	O
)	O
{	O
if	O
(	O
*	O
(	O
p	*(void)
+	O
1	int
)	O
==	O
'='	O
)	O
{	O
p	*(void)
=	O
test_line	(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),int,int,*(char),*(char),long,long,array(*(char)),array(*(char)),long,int,long,long,long,long,long,long,long,int,int,int,int,int,int,int,int,long,long,long,long,long,long,int,int,long,int,array(int),array(long),*(struct(int,int,*`,*`)),long,*(long),long,long,long,int,struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,*(struct),*(*(struct`)),long,struct(short,char,char,char,char),*(char),*(struct),int,int,array(struct(short,short)),*(struct(long,long)),*(struct(long,long)),int,array(*(char)))),*(char),*(int))->(*(char))
(	O
edit_widget	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,int,*(char),*(char),long,long,array(*(char)),array(*(char)),long,int,long,long,long,long,long,long,long,int,int,int,int,int,int,int,int,long,long,long,long,long,long,int,int,long,int,array(int),array(long),*(struct(int,int,*(struct`),*(struct`))),long,*(long),long,long,long,int,struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,*(struct),*(*(struct)),long,struct(short,char,char,char,char),*(char),*(struct),int,int,array(struct(short,short)),*(struct(long,long)),*(struct(long,long)),int,array(*(char))))
,	O
p	*(void)
+	O
1	int
,	O
&	O
accept_entry	int
)	O
;	O
if	O
(	O
selected	int
==	O
0	int
&&	O
accept_entry	int
)	O
selected	int
=	O
menu_lines	int
;	O
}	O
else	O
{	O
p	*(void)
=	O
test_line	(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),int,int,*(char),*(char),long,long,array(*(char)),array(*(char)),long,int,long,long,long,long,long,long,long,int,int,int,int,int,int,int,int,long,long,long,long,long,long,int,int,long,int,array(int),array(long),*(struct(int,int,*`,*`)),long,*(long),long,long,long,int,struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,*(struct),*(*(struct`)),long,struct(short,char,char,char,char),*(char),*(struct),int,int,array(struct(short,short)),*(struct(long,long)),*(struct(long,long)),int,array(*(char)))),*(char),*(int))->(*(char))
(	O
edit_widget	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,int,*(char),*(char),long,long,array(*(char)),array(*(char)),long,int,long,long,long,long,long,long,long,int,int,int,int,int,int,int,int,long,long,long,long,long,long,int,int,long,int,array(int),array(long),*(struct(int,int,*(struct`),*(struct`))),long,*(long),long,long,long,int,struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,*(struct),*(*(struct)),long,struct(short,char,char,char,char),*(char),*(struct),int,int,array(struct(short,short)),*(struct(long,long)),*(struct(long,long)),int,array(*(char))))
,	O
p	*(void)
,	O
&	O
accept_entry	int
)	O
;	O
}	O
}	O
else	O
if	O
(	O
*	O
p	*(void)
==	O
'='	O
)	O
{	O
if	O
(	O
*	O
(	O
p	*(void)
+	O
1	int
)	O
==	O
'+'	O
)	O
{	O
p	*(void)
=	O
test_line	(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),int,int,*(char),*(char),long,long,array(*(char)),array(*(char)),long,int,long,long,long,long,long,long,long,int,int,int,int,int,int,int,int,long,long,long,long,long,long,int,int,long,int,array(int),array(long),*(struct(int,int,*`,*`)),long,*(long),long,long,long,int,struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,*(struct),*(*(struct`)),long,struct(short,char,char,char,char),*(char),*(struct),int,int,array(struct(short,short)),*(struct(long,long)),*(struct(long,long)),int,array(*(char)))),*(char),*(int))->(*(char))
(	O
edit_widget	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,int,*(char),*(char),long,long,array(*(char)),array(*(char)),long,int,long,long,long,long,long,long,long,int,int,int,int,int,int,int,int,long,long,long,long,long,long,int,int,long,int,array(int),array(long),*(struct(int,int,*(struct`),*(struct`))),long,*(long),long,long,long,int,struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,*(struct),*(*(struct)),long,struct(short,char,char,char,char),*(char),*(struct),int,int,array(struct(short,short)),*(struct(long,long)),*(struct(long,long)),int,array(*(char))))
,	O
p	*(void)
+	O
1	int
,	O
&	O
accept_entry	int
)	O
;	O
if	O
(	O
selected	int
==	O
0	int
&&	O
accept_entry	int
)	O
selected	int
=	O
menu_lines	int
;	O
}	O
else	O
{	O
i	array(int)
=	O
1	int
;	O
p	*(void)
=	O
test_line	(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),int,int,*(char),*(char),long,long,array(*(char)),array(*(char)),long,int,long,long,long,long,long,long,long,int,int,int,int,int,int,int,int,long,long,long,long,long,long,int,int,long,int,array(int),array(long),*(struct(int,int,*`,*`)),long,*(long),long,long,long,int,struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,*(struct),*(*(struct`)),long,struct(short,char,char,char,char),*(char),*(struct),int,int,array(struct(short,short)),*(struct(long,long)),*(struct(long,long)),int,array(*(char)))),*(char),*(int))->(*(char))
(	O
edit_widget	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,int,*(char),*(char),long,long,array(*(char)),array(*(char)),long,int,long,long,long,long,long,long,long,int,int,int,int,int,int,int,int,long,long,long,long,long,long,int,int,long,int,array(int),array(long),*(struct(int,int,*(struct`),*(struct`))),long,*(long),long,long,long,int,struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,*(struct),*(*(struct)),long,struct(short,char,char,char,char),*(char),*(struct),int,int,array(struct(short,short)),*(struct(long,long)),*(struct(long,long)),int,array(*(char))))
,	O
p	*(void)
,	O
&	O
i	array(int)
)	O
;	O
if	O
(	O
selected	int
==	O
0	int
&&	O
i	array(int)
)	O
selected	int
=	O
menu_lines	int
;	O
}	O
}	O
else	O
if	O
(	O
*	O
p	*(void)
!=	O
' '	O
&&	O
*	O
p	*(void)
!=	O
'\t'	O
&&	O
is_printable	(int)->(int)
(	O
*	O
p	*(void)
)	O
)	O
{	O
if	O
(	O
accept_entry	int
)	O
entries	*(struct(*(char),char,int,enum(int,int,int,int,int,int,int,int,int),*(void),*(char),*(char)))
[	O
menu_lines	int
]	O
=	O
p	*(void)
;	O
else	O
accept_entry	int
=	O
1	int
;	O
}	O
}	O
if	O
(	O
*	O
p	*(void)
==	O
'\n'	O
)	O
{	O
if	O
(	O
entries	*(struct(*(char),char,int,enum(int,int,int,int,int,int,int,int,int),*(void),*(char),*(char)))
[	O
menu_lines	int
]	O
)	O
{	O
menu_lines	int
++	O
;	O
accept_entry	int
=	O
1	int
;	O
}	O
max_cols	int
=	O
max	long
(	O
max_cols	int
,	O
col	int
)	O
;	O
col	int
=	O
0	int
;	O
}	O
else	O
{	O
if	O
(	O
*	O
p	*(void)
==	O
'\t'	O
)	O
*	O
p	*(void)
=	O
' '	O
;	O
col	int
++	O
;	O
}	O
}	O
if	O
(	O
menu_lines	int
==	O
0	int
)	O
{	O
message	*(char)
(	O
1	int
,	O
MSG_ERROR	O
,	O
_	O
(	O
" No suitable entries found in %s "	*(char)
)	O
,	O
menu	*(*(struct(*(char),int,int,int,int,*(struct(char,*`,int,*`)),int,*(char))))
)	O
;	O
}	O
else	O
{	O
max_cols	int
=	O
min	long
(	O
max	long
(	O
max_cols	int
,	O
col	int
)	O
,	O
MAX_ENTRY_LEN	int
)	O
;	O
listbox	*(struct(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`))),*(struct(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`),*(struct`),*(struct`),*(struct`),int,int,int,int,int,int,*((*`)->(int)),int,int))))
=	O
create_listbox_window	(int,int,*(char),*(char))->(*(struct(*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)),*(struct(struct`,*`,*`,*`,int,int,int,int,int,int,*`,int,int)))))
(	O
max_cols	int
+	O
2	int
,	O
menu_lines	int
,	O
_	O
(	O
" User menu "	*(char)
)	O
,	O
"[Menu File Edit]"	*(char)
)	O
;	O
for	O
(	O
i	array(int)
=	O
0	int
;	O
i	array(int)
<	O
menu_lines	int
;	O
i	array(int)
++	O
)	O
{	O
p	*(void)
=	O
entries	*(struct(*(char),char,int,enum(int,int,int,int,int,int,int,int,int),*(void),*(char),*(char)))
[	O
i	array(int)
]	O
;	O
LISTBOX_APPEND_TEXT	O
(	O
listbox	*(struct(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`))),*(struct(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`),*(struct`),*(struct`),*(struct`),int,int,int,int,int,int,*((*`)->(int)),int,int))))
,	O
(	O
unsigned	O
char	O
)	O
p	*(void)
[	O
0	int
]	O
,	O
extract_line	(*(char),*(char))->(*(char))
(	O
p	*(void)
,	O
p	*(void)
+	O
MAX_ENTRY_LEN	int
)	O
,	O
p	*(void)
)	O
;	O
}	O
listbox_select_by_number	(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),*(struct(*`,int,*`,*`,*`)),*(struct(*`,int,*`,*`,*`)),*(struct(*`,int,*`,*`,*`)),int,int,int,int,int,int,*((*`)->(int)),int,int)),int)->(void)
(	O
listbox	*(struct(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`))),*(struct(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`),*(struct`),*(struct`),*(struct`),int,int,int,int,int,int,*((*`)->(int)),int,int))))
->	O
list	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
,	O
selected	int
)	O
;	O
selected	int
=	O
run_listbox	(*(struct(*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)),*(struct(struct`,*`,*`,*`,int,int,int,int,int,int,*`,int,int)))))->(int)
(	O
listbox	*(struct(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`))),*(struct(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`),*(struct`),*(struct`),*(struct`),int,int,int,int,int,int,*((*`)->(int)),int,int))))
)	O
;	O
if	O
(	O
selected	int
>=	O
0	int
)	O
execute_menu_command	(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),int,int,*(char),*(char),long,long,array(*(char)),array(*(char)),long,int,long,long,long,long,long,long,long,int,int,int,int,int,int,int,int,long,long,long,long,long,long,int,int,long,int,array(int),array(long),*(struct(int,int,*`,*`)),long,*(long),long,long,long,int,struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,*(struct),*(*(struct`)),long,struct(short,char,char,char,char),*(char),*(struct),int,int,array(struct(short,short)),*(struct(long,long)),*(struct(long,long)),int,array(*(char)))),*(char))->(void)
(	O
edit_widget	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,int,*(char),*(char),long,long,array(*(char)),array(*(char)),long,int,long,long,long,long,long,long,long,int,int,int,int,int,int,int,int,long,long,long,long,long,long,int,int,long,int,array(int),array(long),*(struct(int,int,*(struct`),*(struct`))),long,*(long),long,long,long,int,struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,*(struct),*(*(struct)),long,struct(short,char,char,char,char),*(char),*(struct),int,int,array(struct(short,short)),*(struct(long,long)),*(struct(long,long)),int,array(*(char))))
,	O
entries	*(struct(*(char),char,int,enum(int,int,int,int,int,int,int,int,int),*(void),*(char),*(char)))
[	O
selected	int
]	O
)	O
;	O
do_refresh	()->(void)
(	O
)	O
;	O
}	O
easy_patterns	int
=	O
old_patterns	int
;	O
g_free	(*(void))->(void)
(	O
menu	*(*(struct(*(char),int,int,int,int,*(struct(char,*`,int,*`)),int,*(char))))
)	O
;	O
menu	*(*(struct(*(char),int,int,int,int,*(struct(char,*`,int,*`)),int,*(char))))
=	O
NULL	O
;	O
g_free	(*(void))->(void)
(	O
entries	*(struct(*(char),char,int,enum(int,int,int,int,int,int,int,int,int),*(void),*(char),*(char)))
)	O
;	O
g_free	(*(void))->(void)
(	O
data	*(void)
)	O
;	O
}	O
