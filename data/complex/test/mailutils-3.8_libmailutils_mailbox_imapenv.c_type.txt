void	O
mu_message_imapenvelope_free	(*(struct(struct(int,int,int,int,int,int,int,int,int,long,*(char)),struct(int,*(char)),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(char),*(char))))->(void)
(	O
struct	O
mu_imapenvelope	struct(struct(int,int,int,int,int,int,int,int,int,long,*(char)),struct(int,*(char)),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))))),*(char),*(char))
*	O
env	*(struct)
)	O
{	O
if	O
(	O
!	O
env	*(struct)
)	O
return	O
;	O
free	(*(void))->(void)
(	O
env	*(struct)
->	O
subject	*(char)
)	O
;	O
mu_address_destroy	(*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))->(void)
(	O
&	O
env	*(struct)
->	O
from	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))))
)	O
;	O
mu_address_destroy	(*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))->(void)
(	O
&	O
env	*(struct)
->	O
sender	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
)	O
;	O
mu_address_destroy	(*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))->(void)
(	O
&	O
env	*(struct)
->	O
reply_to	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
)	O
;	O
mu_address_destroy	(*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))->(void)
(	O
&	O
env	*(struct)
->	O
to	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
)	O
;	O
mu_address_destroy	(*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))->(void)
(	O
&	O
env	*(struct)
->	O
cc	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
)	O
;	O
mu_address_destroy	(*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))->(void)
(	O
&	O
env	*(struct)
->	O
bcc	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
)	O
;	O
free	(*(void))->(void)
(	O
env	*(struct)
->	O
in_reply_to	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
env	*(struct)
->	O
message_id	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
env	*(struct)
)	O
;	O
}	O
int	O
mu_message_get_imapenvelope	(*(struct),*(*(struct(struct(int,int,int,int,int,int,int,int,int,long,*`),struct(int,*`),*(char),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),*(char)))))->(int)
(	O
mu_message_t	*(struct)
msg	*(struct)
,	O
struct	O
mu_imapenvelope	struct(struct(int,int,int,int,int,int,int,int,int,long,*(char)),struct(int,*(char)),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))))),*(char),*(char))
*	O
*	O
pimapenvelope	*(*(struct(struct(int,int,int,int,int,int,int,int,int,long,*(char)),struct(int,*(char)),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(char),*(char))))
)	O
{	O
struct	O
mu_imapenvelope	struct(struct(int,int,int,int,int,int,int,int,int,long,*(char)),struct(int,*(char)),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))))),*(char),*(char))
*	O
imapenvelope	*(struct(struct(int,int,int,int,int,int,int,int,int,long,*(char)),struct(int,*(char)),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(char),*(char)))
;	O
int	O
rc	int
;	O
if	O
(	O
msg	*(struct)
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
if	O
(	O
pimapenvelope	*(*(struct(struct(int,int,int,int,int,int,int,int,int,long,*(char)),struct(int,*(char)),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(char),*(char))))
==	O
NULL	O
)	O
return	O
MU_ERR_OUT_PTR_NULL	O
;	O
if	O
(	O
msg	*(struct)
->	O
_imapenvelope	*((*(struct),*(*(struct(struct`,struct`,*`,*`,*`,*`,*`,*`,*`,*`,*`))))->(int))
)	O
return	O
msg	*(struct)
->	O
_imapenvelope	*((*(struct),*(*(struct(struct`,struct`,*`,*`,*`,*`,*`,*`,*`,*`,*`))))->(int))
(	O
msg	*(struct)
,	O
pimapenvelope	*(*(struct(struct(int,int,int,int,int,int,int,int,int,long,*(char)),struct(int,*(char)),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(char),*(char))))
)	O
;	O
imapenvelope	*(struct(struct(int,int,int,int,int,int,int,int,int,long,*(char)),struct(int,*(char)),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(char),*(char)))
=	O
calloc	(long,long)->(*(void))
(	O
1	int
,	O
sizeof	O
(	O
imapenvelope	*(struct(struct(int,int,int,int,int,int,int,int,int,long,*(char)),struct(int,*(char)),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(char),*(char)))
[	O
0	int
]	O
)	O
)	O
;	O
if	O
(	O
!	O
imapenvelope	*(struct(struct(int,int,int,int,int,int,int,int,int,long,*(char)),struct(int,*(char)),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(char),*(char)))
)	O
return	O
ENOMEM	int
;	O
do	O
{	O
mu_header_t	*(struct)
hdr	*(struct)
;	O
mu_envelope_t	*(struct)
env	*(struct)
;	O
const	O
char	O
*	O
s	*(char)
;	O
if	O
(	O
(	O
rc	int
=	O
mu_message_get_envelope	(*(struct),*(*(struct)))->(int)
(	O
msg	*(struct)
,	O
&	O
env	*(struct)
)	O
)	O
)	O
break	O
;	O
if	O
(	O
(	O
rc	int
=	O
mu_envelope_sget_date	(*(struct),*(*(char)))->(int)
(	O
env	*(struct)
,	O
&	O
s	*(char)
)	O
)	O
)	O
break	O
;	O
if	O
(	O
(	O
rc	int
=	O
mu_scan_datetime	(*(char),*(char),*(struct(int,int,int,int,int,int,int,int,int,long,*(char))),*(struct(int,*(char))),*(*(char)))->(int)
(	O
s	*(char)
,	O
MU_DATETIME_FROM	*(char)
,	O
&	O
imapenvelope	*(struct(struct(int,int,int,int,int,int,int,int,int,long,*(char)),struct(int,*(char)),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(char),*(char)))
->	O
date	struct(int,int,int,int,int,int,int,int,int,long,*(char))
,	O
&	O
imapenvelope	*(struct(struct(int,int,int,int,int,int,int,int,int,long,*(char)),struct(int,*(char)),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(char),*(char)))
->	O
tz	*(struct(int,*(char)))
,	O
NULL	O
)	O
)	O
)	O
break	O
;	O
if	O
(	O
(	O
rc	int
=	O
mu_message_get_header	(*(struct),*(*(struct)))->(int)
(	O
msg	*(struct)
,	O
&	O
hdr	*(struct)
)	O
)	O
)	O
break	O
;	O
rc	int
=	O
mu_header_get_address	O
(	O
hdr	*(struct)
,	O
MU_HEADER_FROM	*(char)
,	O
&	O
imapenvelope	*(struct(struct(int,int,int,int,int,int,int,int,int,long,*(char)),struct(int,*(char)),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(char),*(char)))
->	O
from	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))))
)	O
;	O
if	O
(	O
rc	int
&&	O
rc	int
!=	O
MU_ERR_NOENT	O
)	O
break	O
;	O
rc	int
=	O
mu_header_get_address	O
(	O
hdr	*(struct)
,	O
MU_HEADER_SENDER	*(char)
,	O
&	O
imapenvelope	*(struct(struct(int,int,int,int,int,int,int,int,int,long,*(char)),struct(int,*(char)),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(char),*(char)))
->	O
sender	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
)	O
;	O
if	O
(	O
rc	int
&&	O
rc	int
!=	O
MU_ERR_NOENT	O
)	O
break	O
;	O
rc	int
=	O
mu_header_get_address	O
(	O
hdr	*(struct)
,	O
MU_HEADER_REPLY_TO	*(char)
,	O
&	O
imapenvelope	*(struct(struct(int,int,int,int,int,int,int,int,int,long,*(char)),struct(int,*(char)),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(char),*(char)))
->	O
reply_to	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
)	O
;	O
if	O
(	O
rc	int
&&	O
rc	int
!=	O
MU_ERR_NOENT	O
)	O
break	O
;	O
rc	int
=	O
mu_header_get_address	O
(	O
hdr	*(struct)
,	O
MU_HEADER_TO	*(char)
,	O
&	O
imapenvelope	*(struct(struct(int,int,int,int,int,int,int,int,int,long,*(char)),struct(int,*(char)),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(char),*(char)))
->	O
to	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
)	O
;	O
if	O
(	O
rc	int
&&	O
rc	int
!=	O
MU_ERR_NOENT	O
)	O
break	O
;	O
rc	int
=	O
mu_header_get_address	O
(	O
hdr	*(struct)
,	O
MU_HEADER_CC	*(char)
,	O
&	O
imapenvelope	*(struct(struct(int,int,int,int,int,int,int,int,int,long,*(char)),struct(int,*(char)),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(char),*(char)))
->	O
cc	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
)	O
;	O
if	O
(	O
rc	int
&&	O
rc	int
!=	O
MU_ERR_NOENT	O
)	O
break	O
;	O
rc	int
=	O
mu_header_get_address	O
(	O
hdr	*(struct)
,	O
MU_HEADER_BCC	*(char)
,	O
&	O
imapenvelope	*(struct(struct(int,int,int,int,int,int,int,int,int,long,*(char)),struct(int,*(char)),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(char),*(char)))
->	O
bcc	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
)	O
;	O
if	O
(	O
rc	int
&&	O
rc	int
!=	O
MU_ERR_NOENT	O
)	O
break	O
;	O
rc	int
=	O
mu_header_aget_value_unfold	O
(	O
hdr	*(struct)
,	O
MU_HEADER_SUBJECT	*(char)
,	O
&	O
imapenvelope	*(struct(struct(int,int,int,int,int,int,int,int,int,long,*(char)),struct(int,*(char)),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(char),*(char)))
->	O
subject	*(char)
)	O
;	O
if	O
(	O
rc	int
&&	O
rc	int
!=	O
MU_ERR_NOENT	O
)	O
break	O
;	O
rc	int
=	O
mu_header_aget_value_unfold	O
(	O
hdr	*(struct)
,	O
MU_HEADER_IN_REPLY_TO	*(char)
,	O
&	O
imapenvelope	*(struct(struct(int,int,int,int,int,int,int,int,int,long,*(char)),struct(int,*(char)),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(char),*(char)))
->	O
in_reply_to	*(char)
)	O
;	O
if	O
(	O
rc	int
&&	O
rc	int
!=	O
MU_ERR_NOENT	O
)	O
break	O
;	O
rc	int
=	O
mu_header_aget_value_unfold	O
(	O
hdr	*(struct)
,	O
MU_HEADER_MESSAGE_ID	*(char)
,	O
&	O
imapenvelope	*(struct(struct(int,int,int,int,int,int,int,int,int,long,*(char)),struct(int,*(char)),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(char),*(char)))
->	O
message_id	*(char)
)	O
;	O
}	O
while	O
(	O
0	int
)	O
;	O
if	O
(	O
rc	int
)	O
mu_message_imapenvelope_free	(*(struct(struct(int,int,int,int,int,int,int,int,int,long,*(char)),struct(int,*(char)),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(char),*(char))))->(void)
(	O
imapenvelope	*(struct(struct(int,int,int,int,int,int,int,int,int,long,*(char)),struct(int,*(char)),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(char),*(char)))
)	O
;	O
else	O
*	O
pimapenvelope	*(*(struct(struct(int,int,int,int,int,int,int,int,int,long,*(char)),struct(int,*(char)),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(char),*(char))))
=	O
imapenvelope	*(struct(struct(int,int,int,int,int,int,int,int,int,long,*(char)),struct(int,*(char)),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(char),*(char)))
;	O
return	O
rc	int
;	O
}	O
int	O
mu_message_set_imapenvelope	(*(struct),*((*(struct),*(*(struct`)))->(int)),*(void))->(int)
(	O
mu_message_t	*(struct)
msg	*(struct)
,	O
int	O
(	O
*	O
_imapenvelope	*((*(struct),*(*(struct(struct`,struct`,*`,*`,*`,*`,*`,*`,*`,*`,*`))))->(int))
)	O
(	O
mu_message_t	*(struct)
,	O
struct	O
mu_imapenvelope	struct(struct(int,int,int,int,int,int,int,int,int,long,*(char)),struct(int,*(char)),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))))),*(char),*(char))
*	O
*	O
)	O
,	O
void	O
*	O
owner	*(void)
)	O
{	O
if	O
(	O
msg	*(struct)
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
if	O
(	O
msg	*(struct)
->	O
owner	*(void)
!=	O
owner	*(void)
)	O
return	O
EACCES	int
;	O
msg	*(struct)
->	O
_imapenvelope	*((*(struct),*(*(struct(struct`,struct`,*`,*`,*`,*`,*`,*`,*`,*`,*`))))->(int))
=	O
_imapenvelope	*((*(struct),*(*(struct(struct`,struct`,*`,*`,*`,*`,*`,*`,*`,*`,*`))))->(int))
;	O
return	O
0	int
;	O
}	O
