static	O
void	O
dotmail_destroy	(*(struct(*(struct),*(struct),*(struct),*(struct),*(struct),int,*(struct),*(struct(*`,*`,int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))))->(void)
(	O
mu_mailbox_t	*(struct)
mailbox	*(struct)
)	O
{	O
size_t	long
i	long
;	O
struct	O
mu_dotmail_mailbox	struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*(struct),*(struct(*`,*`,long,long,long,int,*`,long,long)),long))),long,long)
*	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
=	O
mailbox	*(struct)
->	O
data	*(void)
;	O
if	O
(	O
!	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
)	O
return	O
;	O
mu_debug	O
(	O
MU_DEBCAT_MAILBOX	int
,	O
MU_DEBUG_TRACE1	int
,	O
(	O
"%s (%s)"	*(char)
,	O
__func__	O
,	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
->	O
name	*(char)
)	O
)	O
;	O
mu_monitor_wrlock	(*(struct(*(void),*(void),int,int)))->(int)
(	O
mailbox	*(struct)
->	O
monitor	*(struct(*(void),*(void),int,int))
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
->	O
mesg_count	long
;	O
i	long
++	O
)	O
{	O
mu_dotmail_message_free	(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*(struct),*(struct(*`,*`,long,long,long,int,*`,long,long)),long)))->(void)
(	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
->	O
mesg	*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*(struct),*(struct(*`,*`,long,long,long,int,*`,long,long)),long)))
[	O
i	long
]	O
)	O
;	O
}	O
free	(*(void))->(void)
(	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
->	O
mesg	*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*(struct),*(struct(*`,*`,long,long,long,int,*`,long,long)),long)))
)	O
;	O
free	(*(void))->(void)
(	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
->	O
name	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
)	O
;	O
mailbox	*(struct)
->	O
data	*(void)
=	O
NULL	O
;	O
mu_monitor_unlock	(*(struct(*(void),*(void),int,int)))->(int)
(	O
mailbox	*(struct)
->	O
monitor	*(struct(*(void),*(void),int,int))
)	O
;	O
}	O
static	O
int	O
dotmail_mailbox_init_stream	(*(struct(*(char),*(struct(*`,*`,*`,*`,*`,int,*`,*`,*`,*`,int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),long,long,long,int,*(*(struct`)),long,long)))->(int)
(	O
struct	O
mu_dotmail_mailbox	struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*(struct),*(struct(*`,*`,long,long,long,int,*`,long,long)),long))),long,long)
*	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
)	O
{	O
int	O
rc	int
;	O
mu_mailbox_t	*(struct)
mailbox	*(struct)
=	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
->	O
mailbox	*(struct)
;	O
rc	int
=	O
mu_mapfile_stream_create	(*(*(struct)),*(char),int)->(int)
(	O
&	O
mailbox	*(struct)
->	O
stream	*(struct)
,	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
->	O
name	*(char)
,	O
mailbox	*(struct)
->	O
flags	int
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_debug	O
(	O
MU_DEBCAT_MAILBOX	int
,	O
MU_DEBUG_ERROR	int
,	O
(	O
"%s:%s (%s): %s"	*(char)
,	O
__func__	O
,	O
"mu_mapfile_stream_create"	*(char)
,	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
->	O
name	*(char)
,	O
mu_strerror	(int)->(*(char))
(	O
rc	int
)	O
)	O
)	O
;	O
rc	int
=	O
mu_file_stream_create	(*(*(struct)),*(char),int)->(int)
(	O
&	O
mailbox	*(struct)
->	O
stream	*(struct)
,	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
->	O
name	*(char)
,	O
mailbox	*(struct)
->	O
flags	int
)	O
;	O
mu_debug	O
(	O
MU_DEBCAT_MAILBOX	int
,	O
MU_DEBUG_ERROR	int
,	O
(	O
"%s:%s (%s): %s"	*(char)
,	O
__func__	O
,	O
"mu_file_stream_create"	*(char)
,	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
->	O
name	*(char)
,	O
mu_strerror	(int)->(*(char))
(	O
rc	int
)	O
)	O
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
}	O
mu_stream_set_buffer	(*(struct),enum(int,int,int),long)->(int)
(	O
mailbox	*(struct)
->	O
stream	*(struct)
,	O
mu_buffer_full	int
,	O
0	int
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
dotmail_open	(*(struct(*(struct),*(struct),*(struct),*(struct),*(struct),int,*(struct),*(struct(*`,*`,int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))),int)->(int)
(	O
mu_mailbox_t	*(struct)
mailbox	*(struct)
,	O
int	O
flags	int
)	O
{	O
struct	O
mu_dotmail_mailbox	struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*(struct),*(struct(*`,*`,long,long,long,int,*`,long,long)),long))),long,long)
*	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
=	O
mailbox	*(struct)
->	O
data	*(void)
;	O
int	O
rc	int
;	O
if	O
(	O
!	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
)	O
return	O
EINVAL	int
;	O
mu_debug	O
(	O
MU_DEBCAT_MAILBOX	int
,	O
MU_DEBUG_TRACE1	int
,	O
(	O
"%s(%s, 0x%x)"	*(char)
,	O
__func__	O
,	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
->	O
name	*(char)
,	O
mailbox	*(struct)
->	O
flags	int
)	O
)	O
;	O
mailbox	*(struct)
->	O
flags	int
=	O
flags	int
;	O
rc	int
=	O
dotmail_mailbox_init_stream	(*(struct(*(char),*(struct(*`,*`,*`,*`,*`,int,*`,*`,*`,*`,int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),long,long,long,int,*(*(struct`)),long,long)))->(int)
(	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
)	O
;	O
if	O
(	O
mailbox	*(struct)
->	O
locker	*(struct)
==	O
NULL	O
&&	O
(	O
flags	int
&	O
(	O
MU_STREAM_WRITE	int
|	O
MU_STREAM_APPEND	int
|	O
MU_STREAM_CREAT	int
)	O
)	O
)	O
{	O
rc	int
=	O
mu_locker_create	(*(*(struct)),*(char),int)->(int)
(	O
&	O
mailbox	*(struct)
->	O
locker	*(struct)
,	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
->	O
name	*(char)
,	O
0	int
)	O
;	O
if	O
(	O
rc	int
)	O
mu_debug	O
(	O
MU_DEBCAT_MAILBOX	int
,	O
MU_DEBUG_ERROR	int
,	O
(	O
"%s:%s (%s): %s"	*(char)
,	O
__func__	O
,	O
"mu_locker_create"	*(char)
,	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
->	O
name	*(char)
,	O
mu_strerror	(int)->(*(char))
(	O
rc	int
)	O
)	O
)	O
;	O
}	O
return	O
rc	int
;	O
}	O
static	O
int	O
dotmail_close	(*(struct(*(struct),*(struct),*(struct),*(struct),*(struct),int,*(struct),*(struct(*`,*`,int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))))->(int)
(	O
mu_mailbox_t	*(struct)
mailbox	*(struct)
)	O
{	O
struct	O
mu_dotmail_mailbox	struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*(struct),*(struct(*`,*`,long,long,long,int,*`,long,long)),long))),long,long)
*	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
=	O
mailbox	*(struct)
->	O
data	*(void)
;	O
size_t	long
i	long
;	O
if	O
(	O
!	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
)	O
return	O
EINVAL	int
;	O
mu_debug	O
(	O
MU_DEBCAT_MAILBOX	int
,	O
MU_DEBUG_TRACE1	int
,	O
(	O
"%s (%s)"	*(char)
,	O
__func__	O
,	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
->	O
name	*(char)
)	O
)	O
;	O
mu_locker_unlock	(*(struct))->(int)
(	O
mailbox	*(struct)
->	O
locker	*(struct)
)	O
;	O
mu_monitor_wrlock	(*(struct(*(void),*(void),int,int)))->(int)
(	O
mailbox	*(struct)
->	O
monitor	*(struct(*(void),*(void),int,int))
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
->	O
mesg_count	long
;	O
i	long
++	O
)	O
{	O
mu_dotmail_message_free	(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*(struct),*(struct(*`,*`,long,long,long,int,*`,long,long)),long)))->(void)
(	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
->	O
mesg	*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*(struct),*(struct(*`,*`,long,long,long,int,*`,long,long)),long)))
[	O
i	long
]	O
)	O
;	O
}	O
free	(*(void))->(void)
(	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
->	O
mesg	*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*(struct),*(struct(*`,*`,long,long,long,int,*`,long,long)),long)))
)	O
;	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
->	O
mesg	*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*(struct),*(struct(*`,*`,long,long,long,int,*`,long,long)),long)))
=	O
NULL	O
;	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
->	O
mesg_count	long
=	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
->	O
mesg_max	long
=	O
0	int
;	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
->	O
size	long
=	O
0	int
;	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
->	O
uidvalidity	long
=	O
0	int
;	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
->	O
uidnext	long
=	O
0	int
;	O
mu_monitor_unlock	(*(struct(*(void),*(void),int,int)))->(int)
(	O
mailbox	*(struct)
->	O
monitor	*(struct(*(void),*(void),int,int))
)	O
;	O
mu_stream_destroy	(*(*(struct)))->(void)
(	O
&	O
mailbox	*(struct)
->	O
stream	*(struct)
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
dotmail_remove	(*(struct(*(struct),*(struct),*(struct),*(struct),*(struct),int,*(struct),*(struct(*`,*`,int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))))->(int)
(	O
mu_mailbox_t	*(struct)
mailbox	*(struct)
)	O
{	O
struct	O
mu_dotmail_mailbox	struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*(struct),*(struct(*`,*`,long,long,long,int,*`,long,long)),long))),long,long)
*	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
=	O
mailbox	*(struct)
->	O
data	*(void)
;	O
if	O
(	O
!	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
)	O
return	O
EINVAL	int
;	O
mu_debug	O
(	O
MU_DEBCAT_MAILBOX	int
,	O
MU_DEBUG_TRACE1	int
,	O
(	O
"%s (%s)"	*(char)
,	O
__func__	O
,	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
->	O
name	*(char)
)	O
)	O
;	O
if	O
(	O
unlink	(*(char))->(int)
(	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
->	O
name	*(char)
)	O
)	O
return	O
errno	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
dotmail_is_updated	(*(struct(*(struct),*(struct),*(struct),*(struct),*(struct),int,*(struct),*(struct(*`,*`,int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))))->(int)
(	O
mu_mailbox_t	*(struct)
mailbox	*(struct)
)	O
{	O
struct	O
mu_dotmail_mailbox	struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*(struct),*(struct(*`,*`,long,long,long,int,*`,long,long)),long))),long,long)
*	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
=	O
mailbox	*(struct)
->	O
data	*(void)
;	O
mu_off_t	long
size	long
=	O
0	int
;	O
if	O
(	O
!	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
)	O
return	O
0	int
;	O
if	O
(	O
mu_stream_size	(*(struct),*(long))->(int)
(	O
mailbox	*(struct)
->	O
stream	*(struct)
,	O
&	O
size	long
)	O
!=	O
0	int
)	O
return	O
1	int
;	O
if	O
(	O
size	long
<	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
->	O
size	long
)	O
{	O
mu_observable_notify	(*(struct),int,*(void))->(int)
(	O
mailbox	*(struct)
->	O
observable	*(struct)
,	O
MU_EVT_MAILBOX_CORRUPT	int
,	O
mailbox	*(struct)
)	O
;	O
mu_diag_output	(int,*(char))->(void)
(	O
MU_DIAG_EMERG	O
,	O
_	O
(	O
"mailbox corrupted, shrank in size"	*(char)
)	O
)	O
;	O
return	O
0	int
;	O
}	O
return	O
(	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
->	O
size	long
==	O
size	long
)	O
;	O
}	O
void	O
dotmail_cleanup	(*(void))->(void)
(	O
void	O
*	O
arg	*(char)
)	O
{	O
mu_mailbox_t	*(struct)
mailbox	*(struct)
=	O
arg	*(char)
;	O
mu_monitor_unlock	(*(struct(*(void),*(void),int,int)))->(int)
(	O
mailbox	*(struct)
->	O
monitor	*(struct(*(void),*(void),int,int))
)	O
;	O
mu_locker_unlock	(*(struct))->(int)
(	O
mailbox	*(struct)
->	O
locker	*(struct)
)	O
;	O
}	O
static	O
int	O
dotmail_alloc_message	(*(struct(*(char),*(struct(*`,*`,*`,*`,*`,int,*`,*`,*`,*`,int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),long,long,long,int,*(*(struct`)),long,long)),*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*(struct`),*(struct`),long))))->(int)
(	O
struct	O
mu_dotmail_mailbox	struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*(struct),*(struct(*`,*`,long,long,long,int,*`,long,long)),long))),long,long)
*	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
,	O
struct	O
mu_dotmail_message	struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*(struct),*(struct),long)
*	O
*	O
dmsg_ptr	*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*(struct(int,*`,*`,*`,*`,int,*`,*`,*`,*`,*`,*`,*`,long,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,long,long,long,int,*`,long,long)),long)))
)	O
{	O
struct	O
mu_dotmail_message	struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*(struct),*(struct),long)
*	O
dmsg	*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*(struct),*(struct(*(char),*(struct`),long,long,long,int,*(*`),long,long)),long))
;	O
if	O
(	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
->	O
mesg_count	long
==	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
->	O
mesg_max	long
)	O
{	O
size_t	long
n	int
=	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
->	O
mesg_max	long
;	O
void	O
*	O
p	*(char)
;	O
if	O
(	O
n	int
==	O
0	int
)	O
n	int
=	O
64	int
;	O
else	O
{	O
if	O
(	O
(	O
size_t	long
)	O
-	O
1	int
/	O
3	int
*	O
2	int
/	O
sizeof	O
(	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
->	O
mesg	*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*(struct),*(struct(*`,*`,long,long,long,int,*`,long,long)),long)))
[	O
0	int
]	O
)	O
<=	O
n	int
)	O
return	O
ENOMEM	int
;	O
n	int
+=	O
(	O
n	int
+	O
1	int
)	O
/	O
2	int
;	O
}	O
p	*(char)
=	O
realloc	(*(void),long)->(*(void))
(	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
->	O
mesg	*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*(struct),*(struct(*`,*`,long,long,long,int,*`,long,long)),long)))
,	O
n	int
*	O
sizeof	O
(	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
->	O
mesg	*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*(struct),*(struct(*`,*`,long,long,long,int,*`,long,long)),long)))
[	O
0	int
]	O
)	O
)	O
;	O
if	O
(	O
!	O
p	*(char)
)	O
return	O
ENOMEM	int
;	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
->	O
mesg	*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*(struct),*(struct(*`,*`,long,long,long,int,*`,long,long)),long)))
=	O
p	*(char)
;	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
->	O
mesg_max	long
=	O
n	int
;	O
}	O
dmsg	*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*(struct),*(struct(*(char),*(struct`),long,long,long,int,*(*`),long,long)),long))
=	O
calloc	(long,long)->(*(void))
(	O
1	int
,	O
sizeof	O
(	O
*	O
dmsg	*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*(struct),*(struct(*(char),*(struct`),long,long,long,int,*(*`),long,long)),long))
)	O
)	O
;	O
if	O
(	O
!	O
dmsg	*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*(struct),*(struct(*(char),*(struct`),long,long,long,int,*(*`),long,long)),long))
)	O
return	O
ENOMEM	int
;	O
dmsg	*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*(struct),*(struct(*(char),*(struct`),long,long,long,int,*(*`),long,long)),long))
->	O
mbox	*(struct)
=	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
;	O
dmsg	*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*(struct),*(struct(*(char),*(struct`),long,long,long,int,*(*`),long,long)),long))
->	O
num	long
=	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
->	O
mesg_count	long
;	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
->	O
mesg	*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*(struct),*(struct(*`,*`,long,long,long,int,*`,long,long)),long)))
[	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
->	O
mesg_count	long
++	O
]	O
=	O
dmsg	*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*(struct),*(struct(*(char),*(struct`),long,long,long,int,*(*`),long,long)),long))
;	O
*	O
dmsg_ptr	*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*(struct(int,*`,*`,*`,*`,int,*`,*`,*`,*`,*`,*`,*`,long,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,long,long,long,int,*`,long,long)),long)))
=	O
dmsg	*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*(struct),*(struct(*(char),*(struct`),long,long,long,int,*(*`),long,long)),long))
;	O
return	O
0	int
;	O
}	O
static	O
int	O
dotmail_dispatch	(*(struct(*(struct),*(struct),*(struct),*(struct),*(struct),int,*(struct),*(struct(*`,*`,int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))),int,*(void))->(int)
(	O
mu_mailbox_t	*(struct)
mailbox	*(struct)
,	O
int	O
evt	int
,	O
void	O
*	O
data	*(void)
)	O
{	O
if	O
(	O
!	O
mailbox	*(struct)
->	O
observable	*(struct)
)	O
return	O
0	int
;	O
mu_monitor_unlock	(*(struct(*(void),*(void),int,int)))->(int)
(	O
mailbox	*(struct)
->	O
monitor	*(struct(*(void),*(void),int,int))
)	O
;	O
if	O
(	O
mu_observable_notify	(*(struct),int,*(void))->(int)
(	O
mailbox	*(struct)
->	O
observable	*(struct)
,	O
evt	int
,	O
data	*(void)
)	O
)	O
{	O
if	O
(	O
mailbox	*(struct)
->	O
locker	*(struct)
)	O
mu_locker_unlock	(*(struct))->(int)
(	O
mailbox	*(struct)
->	O
locker	*(struct)
)	O
;	O
return	O
EINTR	int
;	O
}	O
mu_monitor_wrlock	(*(struct(*(void),*(void),int,int)))->(int)
(	O
mailbox	*(struct)
->	O
monitor	*(struct(*(void),*(void),int,int))
)	O
;	O
return	O
0	int
;	O
}	O
static	O
unsigned	O
long	O
dotmail_alloc_next_uid	(*(struct(*(char),*(struct(*`,*`,*`,*`,*`,int,*`,*`,*`,*`,int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),long,long,long,int,*(*(struct`)),long,long)))->(long)
(	O
struct	O
mu_dotmail_mailbox	struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*(struct),*(struct(*`,*`,long,long,long,int,*`,long,long)),long))),long,long)
*	O
mbox	*(struct)
)	O
{	O
mbox	*(struct)
->	O
mesg	*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*(struct),*(struct(*`,*`,long,long,long,int,*`,long,long)),long)))
[	O
0	int
]	O
->	O
uid_modified	int
=	O
1	int
;	O
return	O
mbox	*(struct)
->	O
uidnext	long
++	O
;	O
}	O
static	O
void	O
dotmail_message_alloc_uid	(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*(struct(int,*`,*`,*`,*`,int,*`,*`,*`,*`,*`,*`,*`,long,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,long,long,long,int,*`,long,long)),long)))->(void)
(	O
struct	O
mu_dotmail_message	struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*(struct),*(struct),long)
*	O
dmsg	*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*(struct),*(struct(*(char),*(struct`),long,long,long,int,*(*`),long,long)),long))
)	O
{	O
free	(*(void))->(void)
(	O
dmsg	*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*(struct),*(struct(*(char),*(struct`),long,long,long,int,*(*`),long,long)),long))
->	O
hdr	array(*(char))
[	O
mu_dotmail_hdr_x_uid	int
]	O
)	O
;	O
dmsg	*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*(struct),*(struct(*(char),*(struct`),long,long,long,int,*(*`),long,long)),long))
->	O
hdr	array(*(char))
[	O
mu_dotmail_hdr_x_uid	int
]	O
=	O
NULL	O
;	O
dmsg	*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*(struct),*(struct(*(char),*(struct`),long,long,long,int,*(*`),long,long)),long))
->	O
uid	long
=	O
dotmail_alloc_next_uid	(*(struct(*(char),*(struct(*`,*`,*`,*`,*`,int,*`,*`,*`,*`,int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),long,long,long,int,*(*(struct`)),long,long)))->(long)
(	O
dmsg	*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*(struct),*(struct(*(char),*(struct`),long,long,long,int,*(*`),long,long)),long))
->	O
mbox	*(struct)
)	O
;	O
dmsg	*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*(struct),*(struct(*(char),*(struct`),long,long,long,int,*(*`),long,long)),long))
->	O
uid_modified	int
=	O
1	int
;	O
}	O
static	O
int	O
dotmail_rescan_unlocked	(*(struct(*(struct),*(struct),*(struct),*(struct),*(struct),int,*(struct),*(struct(*`,*`,int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))),long)->(int)
(	O
mu_mailbox_t	*(struct)
mailbox	*(struct)
,	O
mu_off_t	long
offset	long
)	O
{	O
struct	O
mu_dotmail_mailbox	struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*(struct),*(struct(*`,*`,long,long,long,int,*`,long,long)),long))),long,long)
*	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
=	O
mailbox	*(struct)
->	O
data	*(void)
;	O
mu_stream_t	*(struct)
stream	*(struct)
;	O
char	O
cur	char
;	O
size_t	long
n	int
;	O
enum	O
dotmail_scan_state	enum(int,int,int,int,int,int,int)
{	O
dotmail_scan_init	int
,	O
dotmail_scan_header	int
,	O
dotmail_scan_header_newline	int
,	O
dotmail_scan_header_expect	int
,	O
dotmail_scan_body	int
,	O
dotmail_scan_body_newline	int
,	O
dotmail_scan_dot	int
}	O
state	*(int)
=	O
dotmail_scan_init	int
;	O
struct	O
mu_dotmail_message	struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*(struct),*(struct),long)
*	O
dmsg	*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*(struct),*(struct(*(char),*(struct`),long,long,long,int,*(*`),long,long)),long))
;	O
size_t	long
lines	long
=	O
0	int
;	O
int	O
rc	int
;	O
static	O
char	O
*	O
expect	array(*(char))
[	O
]	O
=	O
{	O
"status:    "	*(char)
,	O
"x-imapbase:"	*(char)
,	O
"x-uid:     "	*(char)
,	O
}	O
;	O
int	O
i	long
,	O
j	int
;	O
int	O
force_init_uids	int
=	O
0	int
;	O
rc	int
=	O
mu_streamref_create	(*(*(struct)),*(struct))->(int)
(	O
&	O
stream	*(struct)
,	O
mailbox	*(struct)
->	O
stream	*(struct)
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_debug	O
(	O
MU_DEBCAT_MAILBOX	int
,	O
MU_DEBUG_ERROR	int
,	O
(	O
"%s:%s (%s): %s"	*(char)
,	O
__func__	O
,	O
"mu_streamref_create"	*(char)
,	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
->	O
name	*(char)
,	O
mu_strerror	(int)->(*(char))
(	O
rc	int
)	O
)	O
)	O
;	O
return	O
rc	int
;	O
}	O
rc	int
=	O
mu_stream_seek	(*(struct),long,int,*(long))->(int)
(	O
stream	*(struct)
,	O
offset	long
,	O
MU_SEEK_SET	int
,	O
NULL	O
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_debug	O
(	O
MU_DEBCAT_MAILBOX	int
,	O
MU_DEBUG_ERROR	int
,	O
(	O
"%s:%s (%s): %s"	*(char)
,	O
__func__	O
,	O
"mu_stream_seek"	*(char)
,	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
->	O
name	*(char)
,	O
mu_strerror	(int)->(*(char))
(	O
rc	int
)	O
)	O
)	O
;	O
return	O
rc	int
;	O
}	O
while	O
(	O
(	O
rc	int
=	O
mu_stream_read	(*(struct),*(void),long,*(long))->(int)
(	O
stream	*(struct)
,	O
&	O
cur	char
,	O
1	int
,	O
&	O
n	int
)	O
)	O
==	O
0	int
)	O
{	O
if	O
(	O
n	int
==	O
0	int
)	O
{	O
if	O
(	O
state	*(int)
!=	O
dotmail_scan_init	int
&&	O
state	*(int)
!=	O
dotmail_scan_dot	int
)	O
{	O
mu_debug	O
(	O
MU_DEBCAT_MAILBOX	int
,	O
MU_DEBUG_ERROR	int
,	O
(	O
"%s (%s): message %lu ended prematurely"	*(char)
,	O
__func__	O
,	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
->	O
name	*(char)
,	O
(	O
unsigned	O
long	O
)	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
->	O
mesg_count	long
)	O
)	O
;	O
--	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
->	O
mesg_count	long
;	O
}	O
break	O
;	O
}	O
if	O
(	O
cur	char
==	O
'\n'	O
)	O
{	O
if	O
(	O
(	O
(	O
lines	long
+	O
1	int
)	O
%	O
1000	int
)	O
==	O
0	int
)	O
dotmail_dispatch	(*(struct(*(struct),*(struct),*(struct),*(struct),*(struct),int,*(struct),*(struct(*`,*`,int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))),int,*(void))->(int)
(	O
mailbox	*(struct)
,	O
MU_EVT_MAILBOX_PROGRESS	int
,	O
NULL	O
)	O
;	O
}	O
switch	O
(	O
state	*(int)
)	O
{	O
case	O
dotmail_scan_init	int
:	O
rc	int
=	O
dotmail_alloc_message	(*(struct(*(char),*(struct(*`,*`,*`,*`,*`,int,*`,*`,*`,*`,int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),long,long,long,int,*(*(struct`)),long,long)),*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*(struct`),*(struct`),long))))->(int)
(	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
,	O
&	O
dmsg	*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*(struct),*(struct(*(char),*(struct`),long,long,long,int,*(*`),long,long)),long))
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_debug	O
(	O
MU_DEBCAT_MAILBOX	int
,	O
MU_DEBUG_ERROR	int
,	O
(	O
"%s:%s (%s): %s"	*(char)
,	O
__func__	O
,	O
"dotmail_alloc_message"	*(char)
,	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
->	O
name	*(char)
,	O
mu_strerror	(int)->(*(char))
(	O
rc	int
)	O
)	O
)	O
;	O
return	O
rc	int
;	O
}	O
rc	int
=	O
mu_stream_seek	(*(struct),long,int,*(long))->(int)
(	O
stream	*(struct)
,	O
0	int
,	O
MU_SEEK_CUR	int
,	O
&	O
dmsg	*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*(struct),*(struct(*(char),*(struct`),long,long,long,int,*(*`),long,long)),long))
->	O
message_start	long
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_debug	O
(	O
MU_DEBCAT_MAILBOX	int
,	O
MU_DEBUG_ERROR	int
,	O
(	O
"%s:%s (%s): %s"	*(char)
,	O
__func__	O
,	O
"mu_stream_seek"	*(char)
,	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
->	O
name	*(char)
,	O
mu_strerror	(int)->(*(char))
(	O
rc	int
)	O
)	O
)	O
;	O
return	O
rc	int
;	O
}	O
--	O
dmsg	*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*(struct),*(struct(*(char),*(struct`),long,long,long,int,*(*`),long,long)),long))
->	O
message_start	long
;	O
state	*(int)
=	O
dotmail_scan_header_newline	int
;	O
i	long
=	O
j	int
=	O
0	int
;	O
break	O
;	O
case	O
dotmail_scan_header	int
:	O
if	O
(	O
cur	char
==	O
'\n'	O
)	O
{	O
state	*(int)
=	O
dotmail_scan_header_newline	int
;	O
}	O
break	O
;	O
case	O
dotmail_scan_header_newline	int
:	O
if	O
(	O
cur	char
==	O
'\n'	O
)	O
{	O
rc	int
=	O
mu_stream_seek	(*(struct),long,int,*(long))->(int)
(	O
stream	*(struct)
,	O
0	int
,	O
MU_SEEK_CUR	int
,	O
&	O
dmsg	*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*(struct),*(struct(*(char),*(struct`),long,long,long,int,*(*`),long,long)),long))
->	O
body_start	long
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_debug	O
(	O
MU_DEBCAT_MAILBOX	int
,	O
MU_DEBUG_ERROR	int
,	O
(	O
"%s:%s (%s): %s"	*(char)
,	O
__func__	O
,	O
"mu_stream_seek"	*(char)
,	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
->	O
name	*(char)
,	O
mu_strerror	(int)->(*(char))
(	O
rc	int
)	O
)	O
)	O
;	O
return	O
rc	int
;	O
}	O
state	*(int)
=	O
dotmail_scan_body_newline	int
;	O
}	O
else	O
{	O
state	*(int)
=	O
dotmail_scan_header	int
;	O
j	int
=	O
0	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
MU_DOTMAIL_HDR_MAX	int
;	O
i	long
++	O
)	O
{	O
if	O
(	O
expect	array(*(char))
[	O
i	long
]	O
[	O
j	int
]	O
==	O
mu_tolower	O
(	O
cur	char
)	O
)	O
{	O
j	int
++	O
;	O
state	*(int)
=	O
dotmail_scan_header_expect	int
;	O
break	O
;	O
}	O
}	O
}	O
break	O
;	O
case	O
dotmail_scan_header_expect	int
:	O
if	O
(	O
cur	char
==	O
'\n'	O
)	O
{	O
state	*(int)
=	O
dotmail_scan_header_newline	int
;	O
}	O
else	O
{	O
int	O
c	int
=	O
mu_tolower	O
(	O
cur	char
)	O
;	O
if	O
(	O
expect	array(*(char))
[	O
i	long
]	O
[	O
j	int
]	O
!=	O
c	int
)	O
{	O
if	O
(	O
++	O
i	long
==	O
MU_DOTMAIL_HDR_MAX	int
||	O
memcmp	(*(void),*(void),long)->(int)
(	O
expect	array(*(char))
[	O
i	long
-	O
1	int
]	O
,	O
expect	array(*(char))
[	O
i	long
]	O
,	O
j	int
)	O
||	O
expect	array(*(char))
[	O
i	long
]	O
[	O
j	int
]	O
!=	O
c	int
)	O
{	O
state	*(int)
=	O
dotmail_scan_header	int
;	O
break	O
;	O
}	O
}	O
if	O
(	O
c	int
==	O
':'	O
)	O
{	O
char	O
*	O
buf	*(struct)
=	O
NULL	O
;	O
size_t	long
size	long
=	O
0	int
;	O
size_t	long
n	int
;	O
rc	int
=	O
mu_stream_getline	(*(struct),*(*(char)),*(long),*(long))->(int)
(	O
stream	*(struct)
,	O
&	O
buf	*(struct)
,	O
&	O
size	long
,	O
&	O
n	int
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_debug	O
(	O
MU_DEBCAT_MAILBOX	int
,	O
MU_DEBUG_ERROR	int
,	O
(	O
"%s:%s (%s): %s"	*(char)
,	O
__func__	O
,	O
"mu_stream_getline"	*(char)
,	O
dmsg	*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*(struct),*(struct(*(char),*(struct`),long,long,long,int,*(*`),long,long)),long))
->	O
mbox	*(struct)
->	O
name	*(char)
,	O
mu_strerror	(int)->(*(char))
(	O
rc	int
)	O
)	O
)	O
;	O
return	O
rc	int
;	O
}	O
if	O
(	O
n	int
>	O
0	int
)	O
{	O
buf	*(struct)
[	O
n	int
-	O
1	int
]	O
=	O
0	int
;	O
dmsg	*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*(struct),*(struct(*(char),*(struct`),long,long,long,int,*(*`),long,long)),long))
->	O
hdr	array(*(char))
[	O
i	long
]	O
=	O
buf	*(struct)
;	O
}	O
else	O
free	(*(void))->(void)
(	O
buf	*(struct)
)	O
;	O
state	*(int)
=	O
dotmail_scan_header_newline	int
;	O
}	O
else	O
{	O
j	int
++	O
;	O
if	O
(	O
expect	array(*(char))
[	O
i	long
]	O
[	O
j	int
]	O
==	O
0	int
)	O
state	*(int)
=	O
dotmail_scan_header_newline	int
;	O
}	O
}	O
break	O
;	O
case	O
dotmail_scan_body	int
:	O
dmsg	*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*(struct),*(struct(*(char),*(struct`),long,long,long,int,*(*`),long,long)),long))
->	O
body_size	long
++	O
;	O
if	O
(	O
cur	char
==	O
'\n'	O
)	O
{	O
dmsg	*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*(struct),*(struct(*(char),*(struct`),long,long,long,int,*(*`),long,long)),long))
->	O
body_lines	long
++	O
;	O
state	*(int)
=	O
dotmail_scan_body_newline	int
;	O
}	O
break	O
;	O
case	O
dotmail_scan_body_newline	int
:	O
dmsg	*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*(struct),*(struct(*(char),*(struct`),long,long,long,int,*(*`),long,long)),long))
->	O
body_size	long
++	O
;	O
if	O
(	O
cur	char
==	O
'.'	O
)	O
state	*(int)
=	O
dotmail_scan_dot	int
;	O
else	O
if	O
(	O
cur	char
==	O
'\n'	O
)	O
;	O
else	O
state	*(int)
=	O
dotmail_scan_body	int
;	O
break	O
;	O
case	O
dotmail_scan_dot	int
:	O
if	O
(	O
cur	char
==	O
'\n'	O
)	O
{	O
size_t	long
count	*(long)
;	O
dmsg	*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*(struct),*(struct(*(char),*(struct`),long,long,long,int,*(*`),long,long)),long))
->	O
body_lines_scanned	int
=	O
1	int
;	O
rc	int
=	O
mu_stream_seek	(*(struct),long,int,*(long))->(int)
(	O
stream	*(struct)
,	O
0	int
,	O
MU_SEEK_CUR	int
,	O
&	O
dmsg	*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*(struct),*(struct(*(char),*(struct`),long,long,long,int,*(*`),long,long)),long))
->	O
message_end	long
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_debug	O
(	O
MU_DEBCAT_MAILBOX	int
,	O
MU_DEBUG_ERROR	int
,	O
(	O
"%s:%s (%s): %s"	*(char)
,	O
__func__	O
,	O
"mu_stream_seek"	*(char)
,	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
->	O
name	*(char)
,	O
mu_strerror	(int)->(*(char))
(	O
rc	int
)	O
)	O
)	O
;	O
return	O
rc	int
;	O
}	O
dmsg	*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*(struct),*(struct(*(char),*(struct`),long,long,long,int,*(*`),long,long)),long))
->	O
message_end	long
-=	O
2	int
;	O
dmsg	*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*(struct),*(struct(*(char),*(struct`),long,long,long,int,*(*`),long,long)),long))
->	O
body_size	long
--	O
;	O
if	O
(	O
dmsg	*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*(struct),*(struct(*(char),*(struct`),long,long,long,int,*(*`),long,long)),long))
->	O
num	long
==	O
0	int
)	O
{	O
if	O
(	O
dmsg	*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*(struct),*(struct(*(char),*(struct`),long,long,long,int,*(*`),long,long)),long))
->	O
hdr	array(*(char))
[	O
mu_dotmail_hdr_x_imapbase	int
]	O
&&	O
sscanf	(*(char),*(char))->(int)
(	O
dmsg	*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*(struct),*(struct(*(char),*(struct`),long,long,long,int,*(*`),long,long)),long))
->	O
hdr	array(*(char))
[	O
mu_dotmail_hdr_x_imapbase	int
]	O
,	O
"%lu %lu"	*(char)
,	O
&	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
->	O
uidvalidity	long
,	O
&	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
->	O
uidnext	long
)	O
==	O
2	int
)	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
->	O
uidvalidity_scanned	int
=	O
1	int
;	O
}	O
if	O
(	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
->	O
uidvalidity_scanned	int
)	O
{	O
if	O
(	O
!	O
(	O
!	O
force_init_uids	int
&&	O
dmsg	*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*(struct),*(struct(*(char),*(struct`),long,long,long,int,*(*`),long,long)),long))
->	O
hdr	array(*(char))
[	O
mu_dotmail_hdr_x_uid	int
]	O
&&	O
sscanf	(*(char),*(char))->(int)
(	O
dmsg	*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*(struct),*(struct(*(char),*(struct`),long,long,long,int,*(*`),long,long)),long))
->	O
hdr	array(*(char))
[	O
mu_dotmail_hdr_x_uid	int
]	O
,	O
"%lu"	*(char)
,	O
&	O
dmsg	*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*(struct),*(struct(*(char),*(struct`),long,long,long,int,*(*`),long,long)),long))
->	O
uid	long
)	O
==	O
1	int
)	O
)	O
force_init_uids	int
=	O
1	int
;	O
if	O
(	O
force_init_uids	int
)	O
dotmail_message_alloc_uid	(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*(struct(int,*`,*`,*`,*`,int,*`,*`,*`,*`,*`,*`,*`,long,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,long,long,long,int,*`,long,long)),long)))->(void)
(	O
dmsg	*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*(struct),*(struct(*(char),*(struct`),long,long,long,int,*(*`),long,long)),long))
)	O
;	O
}	O
if	O
(	O
mailbox	*(struct)
->	O
locker	*(struct)
&&	O
(	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
->	O
mesg_count	long
%	O
100	int
)	O
==	O
0	int
)	O
mu_locker_touchlock	(*(struct))->(int)
(	O
mailbox	*(struct)
->	O
locker	*(struct)
)	O
;	O
count	*(long)
=	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
->	O
mesg_count	long
;	O
dotmail_dispatch	(*(struct(*(struct),*(struct),*(struct),*(struct),*(struct),int,*(struct),*(struct(*`,*`,int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))),int,*(void))->(int)
(	O
mailbox	*(struct)
,	O
MU_EVT_MESSAGE_ADD	int
,	O
&	O
count	*(long)
)	O
;	O
state	*(int)
=	O
dotmail_scan_init	int
;	O
}	O
else	O
{	O
if	O
(	O
cur	char
==	O
'.'	O
)	O
dmsg	*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*(struct),*(struct(*(char),*(struct`),long,long,long,int,*(*`),long,long)),long))
->	O
body_dot_stuffed	int
=	O
1	int
;	O
else	O
dmsg	*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*(struct),*(struct(*(char),*(struct`),long,long,long,int,*(*`),long,long)),long))
->	O
body_size	long
++	O
;	O
state	*(int)
=	O
dotmail_scan_body	int
;	O
}	O
break	O
;	O
}	O
}	O
if	O
(	O
rc	int
)	O
{	O
mu_debug	O
(	O
MU_DEBCAT_MAILBOX	int
,	O
MU_DEBUG_ERROR	int
,	O
(	O
"%s:%s (%s): %s"	*(char)
,	O
__func__	O
,	O
"mu_stream_read"	*(char)
,	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
->	O
name	*(char)
,	O
mu_strerror	(int)->(*(char))
(	O
rc	int
)	O
)	O
)	O
;	O
}	O
mu_stream_unref	(*(struct))->(void)
(	O
stream	*(struct)
)	O
;	O
return	O
rc	int
;	O
}	O
static	O
int	O
dotmail_rescan	(*(struct(*(struct),*(struct),*(struct),*(struct),*(struct),int,*(struct),*(struct(*`,*`,int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))),long)->(int)
(	O
mu_mailbox_t	*(struct)
mailbox	*(struct)
,	O
mu_off_t	long
offset	long
)	O
{	O
struct	O
mu_dotmail_mailbox	struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*(struct),*(struct(*`,*`,long,long,long,int,*`,long,long)),long))),long,long)
*	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
=	O
mailbox	*(struct)
->	O
data	*(void)
;	O
int	O
rc	int
;	O
if	O
(	O
!	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
)	O
return	O
EINVAL	int
;	O
mu_monitor_wrlock	(*(struct(*(void),*(void),int,int)))->(int)
(	O
mailbox	*(struct)
->	O
monitor	*(struct(*(void),*(void),int,int))
)	O
;	O
pthread_cleanup_push	O
(	O
dotmail_cleanup	(*(void))->(void)
,	O
(	O
void	O
*	O
)	O
mailbox	*(struct)
)	O
;	O
rc	int
=	O
mu_stream_size	(*(struct),*(long))->(int)
(	O
mailbox	*(struct)
->	O
stream	*(struct)
,	O
&	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
->	O
size	long
)	O
;	O
if	O
(	O
rc	int
!=	O
0	int
)	O
{	O
mu_monitor_unlock	(*(struct(*(void),*(void),int,int)))->(int)
(	O
mailbox	*(struct)
->	O
monitor	*(struct(*(void),*(void),int,int))
)	O
;	O
return	O
rc	int
;	O
}	O
if	O
(	O
mailbox	*(struct)
->	O
locker	*(struct)
&&	O
(	O
rc	int
=	O
mu_locker_lock	(*(struct))->(int)
(	O
mailbox	*(struct)
->	O
locker	*(struct)
)	O
)	O
)	O
{	O
mu_monitor_unlock	(*(struct(*(void),*(void),int,int)))->(int)
(	O
mailbox	*(struct)
->	O
monitor	*(struct(*(void),*(void),int,int))
)	O
;	O
return	O
rc	int
;	O
}	O
rc	int
=	O
dotmail_rescan_unlocked	(*(struct(*(struct),*(struct),*(struct),*(struct),*(struct),int,*(struct),*(struct(*`,*`,int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))),long)->(int)
(	O
mailbox	*(struct)
,	O
offset	long
)	O
;	O
if	O
(	O
mailbox	*(struct)
->	O
locker	*(struct)
)	O
mu_locker_unlock	(*(struct))->(int)
(	O
mailbox	*(struct)
->	O
locker	*(struct)
)	O
;	O
mu_monitor_unlock	(*(struct(*(void),*(void),int,int)))->(int)
(	O
mailbox	*(struct)
->	O
monitor	*(struct(*(void),*(void),int,int))
)	O
;	O
pthread_cleanup_pop	O
(	O
0	int
)	O
;	O
return	O
rc	int
;	O
}	O
static	O
int	O
dotmail_refresh	(*(struct(*(struct),*(struct),*(struct),*(struct),*(struct),int,*(struct),*(struct(*`,*`,int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))))->(int)
(	O
mu_mailbox_t	*(struct)
mailbox	*(struct)
)	O
{	O
struct	O
mu_dotmail_mailbox	struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*(struct),*(struct(*`,*`,long,long,long,int,*`,long,long)),long))),long,long)
*	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
=	O
mailbox	*(struct)
->	O
data	*(void)
;	O
if	O
(	O
dotmail_is_updated	(*(struct(*(struct),*(struct),*(struct),*(struct),*(struct),int,*(struct),*(struct(*`,*`,int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))))->(int)
(	O
mailbox	*(struct)
)	O
)	O
return	O
0	int
;	O
return	O
dotmail_rescan	(*(struct(*(struct),*(struct),*(struct),*(struct),*(struct),int,*(struct),*(struct(*`,*`,int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))),long)->(int)
(	O
mailbox	*(struct)
,	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
->	O
mesg_count	long
==	O
0	int
?	O
0	int
:	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
->	O
mesg	*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*(struct),*(struct(*`,*`,long,long,long,int,*`,long,long)),long)))
[	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
->	O
mesg_count	long
-	O
1	int
]	O
->	O
message_end	long
+	O
2	int
)	O
;	O
}	O
static	O
int	O
dotmail_scan	(*(struct(*(struct),*(struct),*(struct),*(struct),*(struct),int,*(struct),*(struct(*`,*`,int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))),long,*(long))->(int)
(	O
mu_mailbox_t	*(struct)
mailbox	*(struct)
,	O
size_t	long
i	long
,	O
size_t	long
*	O
pcount	*(long)
)	O
{	O
struct	O
mu_dotmail_mailbox	struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*(struct),*(struct(*`,*`,long,long,long,int,*`,long,long)),long))),long,long)
*	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
=	O
mailbox	*(struct)
->	O
data	*(void)
;	O
if	O
(	O
!	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
)	O
return	O
EINVAL	int
;	O
mu_debug	O
(	O
MU_DEBCAT_MAILBOX	int
,	O
MU_DEBUG_TRACE1	int
,	O
(	O
"%s (%s)"	*(char)
,	O
__func__	O
,	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
->	O
name	*(char)
)	O
)	O
;	O
if	O
(	O
i	long
==	O
0	int
||	O
(	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
->	O
mesg_count	long
&&	O
i	long
>	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
->	O
mesg_count	long
)	O
)	O
return	O
EINVAL	int
;	O
if	O
(	O
!	O
dotmail_is_updated	(*(struct(*(struct),*(struct),*(struct),*(struct),*(struct),int,*(struct),*(struct(*`,*`,int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))))->(int)
(	O
mailbox	*(struct)
)	O
)	O
{	O
int	O
rc	int
;	O
while	O
(	O
i	long
<	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
->	O
mesg_count	long
)	O
mu_dotmail_message_free	(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*(struct),*(struct(*`,*`,long,long,long,int,*`,long,long)),long)))->(void)
(	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
->	O
mesg	*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*(struct),*(struct(*`,*`,long,long,long,int,*`,long,long)),long)))
[	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
->	O
mesg_count	long
--	O
]	O
)	O
;	O
rc	int
=	O
dotmail_refresh	(*(struct(*(struct),*(struct),*(struct),*(struct),*(struct),int,*(struct),*(struct(*`,*`,int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))))->(int)
(	O
mailbox	*(struct)
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
}	O
else	O
if	O
(	O
mailbox	*(struct)
->	O
observable	*(struct)
)	O
{	O
for	O
(	O
;	O
i	long
<=	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
->	O
mesg_count	long
;	O
i	long
++	O
)	O
{	O
size_t	long
tmp	long
=	O
i	long
;	O
if	O
(	O
mu_observable_notify	(*(struct),int,*(void))->(int)
(	O
mailbox	*(struct)
->	O
observable	*(struct)
,	O
MU_EVT_MESSAGE_ADD	int
,	O
&	O
tmp	long
)	O
!=	O
0	int
)	O
break	O
;	O
if	O
(	O
(	O
(	O
i	long
+	O
1	int
)	O
%	O
50	int
)	O
==	O
0	int
)	O
mu_observable_notify	(*(struct),int,*(void))->(int)
(	O
mailbox	*(struct)
->	O
observable	*(struct)
,	O
MU_EVT_MAILBOX_PROGRESS	int
,	O
NULL	O
)	O
;	O
}	O
}	O
if	O
(	O
pcount	*(long)
)	O
*	O
pcount	*(long)
=	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
->	O
mesg_count	long
;	O
return	O
0	int
;	O
}	O
static	O
int	O
dotmail_messages_recent	(*(struct(*(struct),*(struct),*(struct),*(struct),*(struct),int,*(struct),*(struct(*`,*`,int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))),*(long))->(int)
(	O
mu_mailbox_t	*(struct)
mailbox	*(struct)
,	O
size_t	long
*	O
pcount	*(long)
)	O
{	O
size_t	long
i	long
;	O
size_t	long
count	*(long)
=	O
0	int
;	O
struct	O
mu_dotmail_mailbox	struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*(struct),*(struct(*`,*`,long,long,long,int,*`,long,long)),long))),long,long)
*	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
=	O
mailbox	*(struct)
->	O
data	*(void)
;	O
int	O
rc	int
=	O
dotmail_refresh	(*(struct(*(struct),*(struct),*(struct),*(struct),*(struct),int,*(struct),*(struct(*`,*`,int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))))->(int)
(	O
mailbox	*(struct)
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
->	O
mesg_count	long
;	O
i	long
++	O
)	O
{	O
mu_dotmail_message_attr_load	(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*(struct),*(struct(*`,*`,long,long,long,int,*`,long,long)),long)))->(int)
(	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
->	O
mesg	*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*(struct),*(struct(*`,*`,long,long,long,int,*`,long,long)),long)))
[	O
i	long
]	O
)	O
;	O
if	O
(	O
MU_ATTRIBUTE_IS_UNSEEN	O
(	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
->	O
mesg	*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*(struct),*(struct(*`,*`,long,long,long,int,*`,long,long)),long)))
[	O
i	long
]	O
->	O
attr_flags	int
)	O
)	O
++	O
count	*(long)
;	O
}	O
*	O
pcount	*(long)
=	O
count	*(long)
;	O
return	O
0	int
;	O
}	O
static	O
int	O
dotmail_message_unseen	(*(struct(*(struct),*(struct),*(struct),*(struct),*(struct),int,*(struct),*(struct(*`,*`,int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))),*(long))->(int)
(	O
mu_mailbox_t	*(struct)
mailbox	*(struct)
,	O
size_t	long
*	O
pmsgno	*(long)
)	O
{	O
size_t	long
i	long
;	O
struct	O
mu_dotmail_mailbox	struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*(struct),*(struct(*`,*`,long,long,long,int,*`,long,long)),long))),long,long)
*	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
=	O
mailbox	*(struct)
->	O
data	*(void)
;	O
int	O
rc	int
=	O
dotmail_refresh	(*(struct(*(struct),*(struct),*(struct),*(struct),*(struct),int,*(struct),*(struct(*`,*`,int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))))->(int)
(	O
mailbox	*(struct)
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
->	O
mesg_count	long
;	O
i	long
++	O
)	O
{	O
mu_dotmail_message_attr_load	(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*(struct),*(struct(*`,*`,long,long,long,int,*`,long,long)),long)))->(int)
(	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
->	O
mesg	*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*(struct),*(struct(*`,*`,long,long,long,int,*`,long,long)),long)))
[	O
i	long
]	O
)	O
;	O
if	O
(	O
MU_ATTRIBUTE_IS_UNREAD	O
(	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
->	O
mesg	*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*(struct),*(struct(*`,*`,long,long,long,int,*`,long,long)),long)))
[	O
i	long
]	O
->	O
attr_flags	int
)	O
)	O
{	O
*	O
pmsgno	*(long)
=	O
i	long
+	O
1	int
;	O
return	O
0	int
;	O
}	O
}	O
return	O
MU_ERR_NOENT	O
;	O
}	O
int	O
mu_dotmail_mailbox_uid_setup	(*(struct(*(char),*(struct),long,long,long,int,*(*(struct`)),long,long)))->(int)
(	O
struct	O
mu_dotmail_mailbox	struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*(struct),*(struct(*`,*`,long,long,long,int,*`,long,long)),long))),long,long)
*	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
)	O
{	O
if	O
(	O
!	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
->	O
uidvalidity_scanned	int
)	O
{	O
size_t	long
i	long
;	O
int	O
rc	int
=	O
dotmail_refresh	(*(struct(*(struct),*(struct),*(struct),*(struct),*(struct),int,*(struct),*(struct(*`,*`,int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))))->(int)
(	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
->	O
mailbox	*(struct)
)	O
;	O
if	O
(	O
rc	int
||	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
->	O
uidvalidity_scanned	int
)	O
return	O
rc	int
;	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
->	O
uidvalidity	long
=	O
(	O
unsigned	O
long	O
)	O
time	struct(long,long)
(	O
NULL	O
)	O
;	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
->	O
uidnext	long
=	O
1	int
;	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
->	O
uidvalidity_scanned	int
=	O
1	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
->	O
mesg_count	long
;	O
i	long
++	O
)	O
dotmail_message_alloc_uid	(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*(struct(int,*`,*`,*`,*`,int,*`,*`,*`,*`,*`,*`,*`,long,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,long,long,long,int,*`,long,long)),long)))->(void)
(	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
->	O
mesg	*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*(struct),*(struct(*`,*`,long,long,long,int,*`,long,long)),long)))
[	O
i	long
]	O
)	O
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
dotmail_uidvalidity	(*(struct(*(struct),*(struct),*(struct),*(struct),*(struct),int,*(struct),*(struct(*`,*`,int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))),*(long))->(int)
(	O
mu_mailbox_t	*(struct)
mailbox	*(struct)
,	O
unsigned	O
long	O
*	O
puidvalidity	*(long)
)	O
{	O
struct	O
mu_dotmail_mailbox	struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*(struct),*(struct(*`,*`,long,long,long,int,*`,long,long)),long))),long,long)
*	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
=	O
mailbox	*(struct)
->	O
data	*(void)
;	O
int	O
rc	int
=	O
mu_dotmail_mailbox_uid_setup	(*(struct(*(char),*(struct),long,long,long,int,*(*(struct`)),long,long)))->(int)
(	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
*	O
puidvalidity	*(long)
=	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
->	O
uidvalidity	long
;	O
return	O
rc	int
;	O
}	O
static	O
int	O
dotmail_uidnext	(*(struct(*(struct),*(struct),*(struct),*(struct),*(struct),int,*(struct),*(struct(*`,*`,int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))),*(long))->(int)
(	O
mu_mailbox_t	*(struct)
mailbox	*(struct)
,	O
size_t	long
*	O
puidnext	*(long)
)	O
{	O
struct	O
mu_dotmail_mailbox	struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*(struct),*(struct(*`,*`,long,long,long,int,*`,long,long)),long))),long,long)
*	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
=	O
mailbox	*(struct)
->	O
data	*(void)
;	O
int	O
rc	int
=	O
mu_dotmail_mailbox_uid_setup	(*(struct(*(char),*(struct),long,long,long,int,*(*(struct`)),long,long)))->(int)
(	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
*	O
puidnext	*(long)
=	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
->	O
uidnext	long
;	O
return	O
rc	int
;	O
}	O
static	O
int	O
dotmail_get_message	(*(struct(*(struct),*(struct),*(struct),*(struct),*(struct),int,*(struct),*(struct(*`,*`,int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))),long,*(*(struct(int,*(void),*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),long,*((*`,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,int)->(int)),*((*`,*`)->(int))))))->(int)
(	O
mu_mailbox_t	*(struct)
mailbox	*(struct)
,	O
size_t	long
msgno	long
,	O
mu_message_t	*(struct)
*	O
pmsg	*(*(struct))
)	O
{	O
struct	O
mu_dotmail_mailbox	struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*(struct),*(struct(*`,*`,long,long,long,int,*`,long,long)),long))),long,long)
*	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
=	O
mailbox	*(struct)
->	O
data	*(void)
;	O
int	O
rc	int
;	O
if	O
(	O
!	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
||	O
msgno	long
<	O
1	int
)	O
return	O
EINVAL	int
;	O
if	O
(	O
pmsg	*(*(struct))
==	O
NULL	O
)	O
return	O
MU_ERR_OUT_PTR_NULL	O
;	O
if	O
(	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
->	O
mesg_count	long
==	O
0	int
)	O
{	O
rc	int
=	O
dotmail_scan	(*(struct(*(struct),*(struct),*(struct),*(struct),*(struct),int,*(struct),*(struct(*`,*`,int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))),long,*(long))->(int)
(	O
mailbox	*(struct)
,	O
1	int
,	O
NULL	O
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
}	O
if	O
(	O
msgno	long
>	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
->	O
mesg_count	long
)	O
return	O
MU_ERR_NOENT	O
;	O
return	O
mu_dotmail_message_get	(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*(struct),*(struct(*`,*`,long,long,long,int,*`,long,long)),long)),*(*(struct)))->(int)
(	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
->	O
mesg	*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*(struct),*(struct(*`,*`,long,long,long,int,*`,long,long)),long)))
[	O
msgno	long
-	O
1	int
]	O
,	O
pmsg	*(*(struct))
)	O
;	O
}	O
static	O
int	O
qid2off	(*(char),*(long))->(int)
(	O
mu_message_qid_t	*(char)
qid	*(char)
,	O
mu_off_t	long
*	O
pret	*(*(struct))
)	O
{	O
mu_off_t	long
ret	*(*(struct))
=	O
0	int
;	O
for	O
(	O
;	O
*	O
qid	*(char)
;	O
qid	*(char)
++	O
)	O
{	O
if	O
(	O
!	O
(	O
'0'	O
<=	O
*	O
qid	*(char)
&&	O
*	O
qid	*(char)
<=	O
'9'	O
)	O
)	O
return	O
1	int
;	O
ret	*(*(struct))
=	O
ret	*(*(struct))
*	O
10	int
+	O
*	O
qid	*(char)
-	O
'0'	O
;	O
}	O
*	O
pret	*(*(struct))
=	O
ret	*(*(struct))
;	O
return	O
0	int
;	O
}	O
static	O
int	O
dotmail_quick_get_message	(*(struct(*(struct),*(struct),*(struct),*(struct),*(struct),int,*(struct),*(struct(*`,*`,int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))),*(char),*(*(struct(int,*(void),*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),long,*((*`,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,int)->(int)),*((*`,*`)->(int))))))->(int)
(	O
mu_mailbox_t	*(struct)
mailbox	*(struct)
,	O
mu_message_qid_t	*(char)
qid	*(char)
,	O
mu_message_t	*(struct)
*	O
pmsg	*(*(struct))
)	O
{	O
int	O
rc	int
;	O
struct	O
mu_dotmail_mailbox	struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*(struct),*(struct(*`,*`,long,long,long,int,*`,long,long)),long))),long,long)
*	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
=	O
mailbox	*(struct)
->	O
data	*(void)
;	O
struct	O
mu_dotmail_message	struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*(struct),*(struct),long)
*	O
dmsg	*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*(struct),*(struct(*(char),*(struct`),long,long,long,int,*(*`),long,long)),long))
;	O
mu_off_t	long
offset	long
;	O
if	O
(	O
mailbox	*(struct)
==	O
NULL	O
||	O
qid2off	(*(char),*(long))->(int)
(	O
qid	*(char)
,	O
&	O
offset	long
)	O
||	O
!	O
(	O
mailbox	*(struct)
->	O
flags	int
&	O
MU_STREAM_QACCESS	int
)	O
)	O
return	O
EINVAL	int
;	O
if	O
(	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
->	O
mesg_count	long
==	O
0	int
)	O
{	O
rc	int
=	O
dotmail_rescan	(*(struct(*(struct),*(struct),*(struct),*(struct),*(struct),int,*(struct),*(struct(*`,*`,int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))),long)->(int)
(	O
mailbox	*(struct)
,	O
offset	long
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
if	O
(	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
->	O
mesg_count	long
==	O
0	int
)	O
return	O
MU_ERR_NOENT	O
;	O
}	O
dmsg	*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*(struct),*(struct(*(char),*(struct`),long,long,long,int,*(*`),long,long)),long))
=	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
->	O
mesg	*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*(struct),*(struct(*`,*`,long,long,long,int,*`,long,long)),long)))
[	O
0	int
]	O
;	O
if	O
(	O
dmsg	*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*(struct),*(struct(*(char),*(struct`),long,long,long,int,*(*`),long,long)),long))
->	O
message_start	long
!=	O
offset	long
)	O
return	O
MU_ERR_EXISTS	O
;	O
if	O
(	O
dmsg	*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*(struct),*(struct(*(char),*(struct`),long,long,long,int,*(*`),long,long)),long))
->	O
message	*(struct)
)	O
{	O
if	O
(	O
pmsg	*(*(struct))
)	O
*	O
pmsg	*(*(struct))
=	O
dmsg	*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*(struct),*(struct(*(char),*(struct`),long,long,long,int,*(*`),long,long)),long))
->	O
message	*(struct)
;	O
return	O
0	int
;	O
}	O
return	O
mu_dotmail_message_get	(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*(struct),*(struct(*`,*`,long,long,long,int,*`,long,long)),long)),*(*(struct)))->(int)
(	O
dmsg	*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*(struct),*(struct(*(char),*(struct`),long,long,long,int,*(*`),long,long)),long))
,	O
pmsg	*(*(struct))
)	O
;	O
}	O
static	O
int	O
mailbox_append_message	(*(struct(*(struct),*(struct),*(struct),*(struct),*(struct),int,*(struct),*(struct(*`,*`,int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))),*(struct(int,*(void),*(struct),*(struct),*(struct),int,*(struct),*(struct),*(struct),*(struct(*`,*`,int,int)),*(struct),*(struct),*(struct(*`,*`,*`,*`,*`,int,*`,*`,*`,*`,int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),long,*((*`,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,int)->(int)),*((*`,*`)->(int)))))->(int)
(	O
mu_mailbox_t	*(struct)
mailbox	*(struct)
,	O
mu_message_t	*(struct)
msg	*(struct)
)	O
{	O
int	O
rc	int
;	O
mu_off_t	long
size	long
;	O
mu_stream_t	*(struct)
istr	*(struct)
,	O
flt	*(struct)
;	O
static	O
char	O
*	O
exclude_headers	array(*(char))
[	O
]	O
=	O
{	O
MU_HEADER_X_IMAPBASE	*(char)
,	O
MU_HEADER_X_UID	*(char)
,	O
NULL	O
}	O
;	O
struct	O
mu_dotmail_mailbox	struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*(struct),*(struct(*`,*`,long,long,long,int,*`,long,long)),long))),long,long)
*	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
=	O
mailbox	*(struct)
->	O
data	*(void)
;	O
rc	int
=	O
mu_stream_seek	(*(struct),long,int,*(long))->(int)
(	O
mailbox	*(struct)
->	O
stream	*(struct)
,	O
0	int
,	O
MU_SEEK_END	int
,	O
&	O
size	long
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
rc	int
=	O
mu_message_get_streamref	(*(struct),*(*(struct)))->(int)
(	O
msg	*(struct)
,	O
&	O
istr	*(struct)
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
do	O
{	O
rc	int
=	O
mu_stream_header_copy	(*(struct),*(struct),*(*(char)))->(int)
(	O
mailbox	*(struct)
->	O
stream	*(struct)
,	O
istr	*(struct)
,	O
exclude_headers	array(*(char))
)	O
;	O
if	O
(	O
rc	int
)	O
break	O
;	O
if	O
(	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
->	O
uidvalidity_scanned	int
)	O
{	O
if	O
(	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
->	O
mesg_count	long
==	O
0	int
)	O
mu_stream_printf	(*(struct),*(char))->(int)
(	O
mailbox	*(struct)
->	O
stream	*(struct)
,	O
"%s: %lu %lu\n"	*(char)
,	O
MU_HEADER_X_IMAPBASE	*(char)
,	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
->	O
uidvalidity	long
,	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
->	O
uidnext	long
)	O
;	O
mu_stream_printf	(*(struct),*(char))->(int)
(	O
mailbox	*(struct)
->	O
stream	*(struct)
,	O
"%s: %lu\n"	*(char)
,	O
MU_HEADER_X_UID	*(char)
,	O
dotmail_alloc_next_uid	(*(struct(*(char),*(struct(*`,*`,*`,*`,*`,int,*`,*`,*`,*`,int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),long,long,long,int,*(*(struct`)),long,long)))->(long)
(	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
)	O
)	O
;	O
}	O
rc	int
=	O
mu_stream_write	(*(struct),*(void),long,*(long))->(int)
(	O
mailbox	*(struct)
->	O
stream	*(struct)
,	O
"\n"	*(char)
,	O
1	int
,	O
NULL	O
)	O
;	O
if	O
(	O
rc	int
)	O
break	O
;	O
rc	int
=	O
mu_filter_create	(*(*(struct)),*(struct),*(char),int,int)->(int)
(	O
&	O
flt	*(struct)
,	O
istr	*(struct)
,	O
"DOT"	*(char)
,	O
MU_FILTER_ENCODE	int
,	O
MU_STREAM_READ	int
)	O
;	O
mu_stream_destroy	(*(*(struct)))->(void)
(	O
&	O
istr	*(struct)
)	O
;	O
rc	int
=	O
mu_stream_copy	(*(struct),*(struct),long,*(long))->(int)
(	O
mailbox	*(struct)
->	O
stream	*(struct)
,	O
flt	*(struct)
,	O
0	int
,	O
NULL	O
)	O
;	O
mu_stream_unref	(*(struct))->(void)
(	O
flt	*(struct)
)	O
;	O
}	O
while	O
(	O
0	int
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_stream_destroy	(*(*(struct)))->(void)
(	O
&	O
istr	*(struct)
)	O
;	O
rc	int
=	O
mu_stream_truncate	(*(struct),long)->(int)
(	O
mailbox	*(struct)
->	O
stream	*(struct)
,	O
size	long
)	O
;	O
if	O
(	O
rc	int
)	O
mu_error	(*(char))->(int)
(	O
_	O
(	O
"cannot truncate stream after failed append: %s"	*(char)
)	O
,	O
mu_stream_strerror	(*(struct),int)->(*(char))
(	O
mailbox	*(struct)
->	O
stream	*(struct)
,	O
rc	int
)	O
)	O
;	O
return	O
rc	int
;	O
}	O
rc	int
=	O
dotmail_rescan_unlocked	(*(struct(*(struct),*(struct),*(struct),*(struct),*(struct),int,*(struct),*(struct(*`,*`,int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))),long)->(int)
(	O
mailbox	*(struct)
,	O
size	long
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
if	O
(	O
mailbox	*(struct)
->	O
observable	*(struct)
)	O
{	O
char	O
*	O
buf	*(struct)
=	O
NULL	O
;	O
mu_asprintf	(*(*(char)),*(char))->(int)
(	O
&	O
buf	*(struct)
,	O
"%lu"	*(char)
,	O
(	O
unsigned	O
long	O
)	O
size	long
)	O
;	O
mu_observable_notify	(*(struct),int,*(void))->(int)
(	O
mailbox	*(struct)
->	O
observable	*(struct)
,	O
MU_EVT_MAILBOX_MESSAGE_APPEND	int
,	O
buf	*(struct)
)	O
;	O
free	(*(void))->(void)
(	O
buf	*(struct)
)	O
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
dotmail_append_message	(*(struct(*(struct),*(struct),*(struct),*(struct),*(struct),int,*(struct),*(struct(*`,*`,int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))),*(struct(int,*(void),*(struct),*(struct),*(struct),int,*(struct),*(struct),*(struct),*(struct(*`,*`,int,int)),*(struct),*(struct),*(struct(*`,*`,*`,*`,*`,int,*`,*`,*`,*`,int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),long,*((*`,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,int)->(int)),*((*`,*`)->(int)))))->(int)
(	O
mu_mailbox_t	*(struct)
mailbox	*(struct)
,	O
mu_message_t	*(struct)
msg	*(struct)
)	O
{	O
struct	O
mu_dotmail_mailbox	struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*(struct),*(struct(*`,*`,long,long,long,int,*`,long,long)),long))),long,long)
*	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
=	O
mailbox	*(struct)
->	O
data	*(void)
;	O
int	O
rc	int
;	O
rc	int
=	O
dotmail_refresh	(*(struct(*(struct),*(struct),*(struct),*(struct),*(struct),int,*(struct),*(struct(*`,*`,int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))))->(int)
(	O
mailbox	*(struct)
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
if	O
(	O
mailbox	*(struct)
->	O
locker	*(struct)
&&	O
(	O
rc	int
=	O
mu_locker_lock	(*(struct))->(int)
(	O
mailbox	*(struct)
->	O
locker	*(struct)
)	O
)	O
!=	O
0	int
)	O
{	O
mu_debug	O
(	O
MU_DEBCAT_MAILBOX	int
,	O
MU_DEBUG_ERROR	int
,	O
(	O
"%s(%s):%s: %s"	*(char)
,	O
__func__	O
,	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
->	O
name	*(char)
,	O
"mu_locker_lock"	*(char)
,	O
mu_strerror	(int)->(*(char))
(	O
rc	int
)	O
)	O
)	O
;	O
return	O
rc	int
;	O
}	O
rc	int
=	O
mailbox_append_message	(*(struct(*(struct),*(struct),*(struct),*(struct),*(struct),int,*(struct),*(struct(*`,*`,int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))),*(struct(int,*(void),*(struct),*(struct),*(struct),int,*(struct),*(struct),*(struct),*(struct(*`,*`,int,int)),*(struct),*(struct),*(struct(*`,*`,*`,*`,*`,int,*`,*`,*`,*`,int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),long,*((*`,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,int)->(int)),*((*`,*`)->(int)))))->(int)
(	O
mailbox	*(struct)
,	O
msg	*(struct)
)	O
;	O
if	O
(	O
mailbox	*(struct)
->	O
locker	*(struct)
)	O
mu_locker_unlock	(*(struct))->(int)
(	O
mailbox	*(struct)
->	O
locker	*(struct)
)	O
;	O
return	O
rc	int
;	O
}	O
static	O
int	O
dotmail_messages_count	(*(struct(*(struct),*(struct),*(struct),*(struct),*(struct),int,*(struct),*(struct(*`,*`,int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))),*(long))->(int)
(	O
mu_mailbox_t	*(struct)
mailbox	*(struct)
,	O
size_t	long
*	O
pcount	*(long)
)	O
{	O
struct	O
mu_dotmail_mailbox	struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*(struct),*(struct(*`,*`,long,long,long,int,*`,long,long)),long))),long,long)
*	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
=	O
mailbox	*(struct)
->	O
data	*(void)
;	O
int	O
rc	int
;	O
if	O
(	O
!	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
)	O
return	O
EINVAL	int
;	O
rc	int
=	O
dotmail_refresh	(*(struct(*(struct),*(struct),*(struct),*(struct),*(struct),int,*(struct),*(struct(*`,*`,int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))))->(int)
(	O
mailbox	*(struct)
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
if	O
(	O
pcount	*(long)
)	O
*	O
pcount	*(long)
=	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
->	O
mesg_count	long
;	O
return	O
0	int
;	O
}	O
static	O
int	O
dotmail_get_size	(*(struct(*(struct),*(struct),*(struct),*(struct),*(struct),int,*(struct),*(struct(*`,*`,int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))),*(long))->(int)
(	O
mu_mailbox_t	*(struct)
mailbox	*(struct)
,	O
mu_off_t	long
*	O
psize	*(long)
)	O
{	O
mu_off_t	long
size	long
;	O
int	O
rc	int
;	O
rc	int
=	O
mu_stream_size	(*(struct),*(long))->(int)
(	O
mailbox	*(struct)
->	O
stream	*(struct)
,	O
&	O
size	long
)	O
;	O
if	O
(	O
rc	int
!=	O
0	int
)	O
return	O
rc	int
;	O
if	O
(	O
psize	*(long)
)	O
*	O
psize	*(long)
=	O
size	long
;	O
return	O
0	int
;	O
}	O
static	O
int	O
dotmail_get_atime	(*(struct(*(struct),*(struct),*(struct),*(struct),*(struct),int,*(struct),*(struct(*`,*`,int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))),*(long))->(int)
(	O
mu_mailbox_t	*(struct)
mailbox	*(struct)
,	O
time_t	long
*	O
return_time	*(long)
)	O
{	O
struct	O
mu_dotmail_mailbox	struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*(struct),*(struct(*`,*`,long,long,long,int,*`,long,long)),long))),long,long)
*	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
=	O
mailbox	*(struct)
->	O
data	*(void)
;	O
struct	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
st	*(struct(long,long,long))
;	O
if	O
(	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
if	O
(	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
(	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
->	O
name	*(char)
,	O
&	O
st	*(struct(long,long,long))
)	O
)	O
return	O
errno	O
;	O
*	O
return_time	*(long)
=	O
st	*(struct(long,long,long))
.	O
st_atime	O
;	O
return	O
0	int
;	O
}	O
struct	O
mu_dotmail_flush_tracker	struct(*(struct(*(char),*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(struct`),*(char),int,*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long)),*(struct(long,long,long,long,int)),long)
{	O
struct	O
mu_dotmail_mailbox	struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*(struct),*(struct(*`,*`,long,long,long,int,*`,long,long)),long))),long,long)
*	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
;	O
struct	O
mu_dotmail_message_ref	struct(long,long,long,long,int)
*	O
ref	*(struct(long,long,long,long,int))
;	O
size_t	long
mesg_count	long
;	O
}	O
;	O
static	O
int	O
tracker_init	(*(struct(*(struct(*`,*`,long,long,long,int,*`,long,long)),*(struct(long,long,long,long,int)),long)),*(struct(*(char),*(struct(*`,*`,*`,*`,*`,int,*`,*`,*`,*`,int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),long,long,long,int,*(*(struct`)),long,long)))->(int)
(	O
struct	O
mu_dotmail_flush_tracker	struct(*(struct(*(char),*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(struct`),*(char),int,*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long)),*(struct(long,long,long,long,int)),long)
*	O
trk	*(struct)
,	O
struct	O
mu_dotmail_mailbox	struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*(struct),*(struct(*`,*`,long,long,long,int,*`,long,long)),long))),long,long)
*	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
)	O
{	O
trk	*(struct)
->	O
ref	*(struct(long,long,long,long,int))
=	O
calloc	(long,long)->(*(void))
(	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
->	O
mesg_count	long
,	O
sizeof	O
(	O
trk	*(struct)
->	O
ref	*(struct(long,long,long,long,int))
[	O
0	int
]	O
)	O
)	O
;	O
if	O
(	O
!	O
trk	*(struct)
->	O
ref	*(struct(long,long,long,long,int))
)	O
return	O
ENOMEM	int
;	O
trk	*(struct)
->	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
=	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
;	O
trk	*(struct)
->	O
mesg_count	long
=	O
0	int
;	O
return	O
0	int
;	O
}	O
static	O
void	O
tracker_free	(*(struct(*(struct(*`,*`,long,long,long,int,*`,long,long)),*(struct(long,long,long,long,int)),long)))->(void)
(	O
struct	O
mu_dotmail_flush_tracker	struct(*(struct(*(char),*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(struct`),*(char),int,*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long)),*(struct(long,long,long,long,int)),long)
*	O
trk	*(struct)
)	O
{	O
free	(*(void))->(void)
(	O
trk	*(struct)
->	O
ref	*(struct(long,long,long,long,int))
)	O
;	O
}	O
static	O
struct	O
mu_dotmail_message_ref	struct(long,long,long,long,int)
*	O
tracker_next_ref	(*(struct(*(struct(*`,*`,long,long,long,int,*`,long,long)),*(struct(long,long,long,long,int)),long)),long)->(*(struct(long,long,long,long,int)))
(	O
struct	O
mu_dotmail_flush_tracker	struct(*(struct(*(char),*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(struct`),*(char),int,*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long)),*(struct(long,long,long,long,int)),long)
*	O
trk	*(struct)
,	O
size_t	long
orig_num	long
)	O
{	O
struct	O
mu_dotmail_message_ref	struct(long,long,long,long,int)
*	O
ref	*(struct(long,long,long,long,int))
=	O
&	O
trk	*(struct)
->	O
ref	*(struct(long,long,long,long,int))
[	O
trk	*(struct)
->	O
mesg_count	long
++	O
]	O
;	O
ref	*(struct(long,long,long,long,int))
->	O
orig_num	long
=	O
orig_num	long
;	O
return	O
ref	*(struct(long,long,long,long,int))
;	O
}	O
static	O
void	O
dotmail_tracker_sync	(*(struct(*(struct(*`,*`,long,long,long,int,*`,long,long)),*(struct(long,long,long,long,int)),long)))->(void)
(	O
struct	O
mu_dotmail_flush_tracker	struct(*(struct(*(char),*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(struct`),*(char),int,*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long)),*(struct(long,long,long,long,int)),long)
*	O
trk	*(struct)
)	O
{	O
struct	O
mu_dotmail_mailbox	struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*(struct),*(struct(*`,*`,long,long,long,int,*`,long,long)),long))),long,long)
*	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
=	O
trk	*(struct)
->	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
;	O
size_t	long
i	long
;	O
if	O
(	O
trk	*(struct)
->	O
mesg_count	long
==	O
0	int
)	O
{	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
->	O
mesg_count	long
;	O
i	long
++	O
)	O
mu_dotmail_message_free	(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*(struct),*(struct(*`,*`,long,long,long,int,*`,long,long)),long)))->(void)
(	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
->	O
mesg	*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*(struct),*(struct(*`,*`,long,long,long,int,*`,long,long)),long)))
[	O
i	long
]	O
)	O
;	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
->	O
size	long
=	O
0	int
;	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
->	O
uidvalidity_scanned	int
=	O
0	int
;	O
}	O
else	O
{	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
trk	*(struct)
->	O
mesg_count	long
;	O
i	long
++	O
)	O
{	O
if	O
(	O
trk	*(struct)
->	O
ref	*(struct(long,long,long,long,int))
[	O
i	long
]	O
.	O
orig_num	long
!=	O
i	long
)	O
{	O
size_t	long
j	int
;	O
for	O
(	O
j	int
=	O
i	long
;	O
j	int
<	O
trk	*(struct)
->	O
ref	*(struct(long,long,long,long,int))
[	O
i	long
]	O
.	O
orig_num	long
;	O
j	int
++	O
)	O
mu_dotmail_message_free	(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*(struct),*(struct(*`,*`,long,long,long,int,*`,long,long)),long)))->(void)
(	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
->	O
mesg	*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*(struct),*(struct(*`,*`,long,long,long,int,*`,long,long)),long)))
[	O
j	int
]	O
)	O
;	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
->	O
mesg	*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*(struct),*(struct(*`,*`,long,long,long,int,*`,long,long)),long)))
[	O
i	long
]	O
=	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
->	O
mesg	*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*(struct),*(struct(*`,*`,long,long,long,int,*`,long,long)),long)))
[	O
trk	*(struct)
->	O
ref	*(struct(long,long,long,long,int))
[	O
i	long
]	O
.	O
orig_num	long
]	O
;	O
}	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
->	O
mesg	*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*(struct),*(struct(*`,*`,long,long,long,int,*`,long,long)),long)))
[	O
i	long
]	O
->	O
message_start	long
=	O
trk	*(struct)
->	O
ref	*(struct(long,long,long,long,int))
[	O
i	long
]	O
.	O
message_start	long
;	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
->	O
mesg	*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*(struct),*(struct(*`,*`,long,long,long,int,*`,long,long)),long)))
[	O
i	long
]	O
->	O
body_start	long
=	O
trk	*(struct)
->	O
ref	*(struct(long,long,long,long,int))
[	O
i	long
]	O
.	O
body_start	long
;	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
->	O
mesg	*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*(struct),*(struct(*`,*`,long,long,long,int,*`,long,long)),long)))
[	O
i	long
]	O
->	O
message_end	long
=	O
trk	*(struct)
->	O
ref	*(struct(long,long,long,long,int))
[	O
i	long
]	O
.	O
message_end	long
;	O
if	O
(	O
trk	*(struct)
->	O
ref	*(struct(long,long,long,long,int))
[	O
i	long
]	O
.	O
rescan	int
)	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
->	O
mesg	*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*(struct),*(struct(*`,*`,long,long,long,int,*`,long,long)),long)))
[	O
i	long
]	O
->	O
body_lines_scanned	int
=	O
0	int
;	O
}	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
->	O
mesg_count	long
=	O
trk	*(struct)
->	O
mesg_count	long
;	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
->	O
size	long
=	O
trk	*(struct)
->	O
ref	*(struct(long,long,long,long,int))
[	O
trk	*(struct)
->	O
mesg_count	long
-	O
1	int
]	O
.	O
message_end	long
+	O
2	int
;	O
}	O
}	O
static	O
int	O
dotmail_mailbox_copy_unchanged	(*(struct(*(struct(*`,*`,long,long,long,int,*`,long,long)),*(struct(long,long,long,long,int)),long)),long,long,*(struct))->(int)
(	O
struct	O
mu_dotmail_flush_tracker	struct(*(struct(*(char),*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(struct`),*(char),int,*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long)),*(struct(long,long,long,long,int)),long)
*	O
trk	*(struct)
,	O
size_t	long
from	*(struct)
,	O
size_t	long
to	*(struct)
,	O
mu_stream_t	*(struct)
dest	*(struct)
)	O
{	O
if	O
(	O
to	*(struct)
>	O
from	*(struct)
)	O
{	O
size_t	long
i	long
;	O
mu_off_t	long
off	long
;	O
int	O
rc	int
;	O
struct	O
mu_dotmail_mailbox	struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*(struct),*(struct(*`,*`,long,long,long,int,*`,long,long)),long))),long,long)
*	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
=	O
trk	*(struct)
->	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
;	O
rc	int
=	O
mu_stream_seek	(*(struct),long,int,*(long))->(int)
(	O
dest	*(struct)
,	O
0	int
,	O
MU_SEEK_CUR	int
,	O
&	O
off	long
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
off	long
-=	O
trk	*(struct)
->	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
->	O
mesg	*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*(struct),*(struct(*`,*`,long,long,long,int,*`,long,long)),long)))
[	O
from	*(struct)
]	O
->	O
message_start	long
;	O
for	O
(	O
i	long
=	O
from	*(struct)
;	O
i	long
<	O
to	*(struct)
;	O
i	long
++	O
)	O
{	O
struct	O
mu_dotmail_message	struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*(struct),*(struct),long)
*	O
dmsg	*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*(struct),*(struct(*(char),*(struct`),long,long,long,int,*(*`),long,long)),long))
=	O
trk	*(struct)
->	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
->	O
mesg	*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*(struct),*(struct(*`,*`,long,long,long,int,*`,long,long)),long)))
[	O
i	long
]	O
;	O
struct	O
mu_dotmail_message_ref	struct(long,long,long,long,int)
*	O
ref	*(struct(long,long,long,long,int))
=	O
tracker_next_ref	(*(struct(*(struct(*`,*`,long,long,long,int,*`,long,long)),*(struct(long,long,long,long,int)),long)),long)->(*(struct(long,long,long,long,int)))
(	O
trk	*(struct)
,	O
i	long
)	O
;	O
ref	*(struct(long,long,long,long,int))
->	O
message_start	long
=	O
dmsg	*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*(struct),*(struct(*(char),*(struct`),long,long,long,int,*(*`),long,long)),long))
->	O
message_start	long
+	O
off	long
;	O
ref	*(struct(long,long,long,long,int))
->	O
body_start	long
=	O
dmsg	*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*(struct),*(struct(*(char),*(struct`),long,long,long,int,*(*`),long,long)),long))
->	O
body_start	long
+	O
off	long
;	O
ref	*(struct(long,long,long,long,int))
->	O
message_end	long
=	O
dmsg	*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*(struct),*(struct(*(char),*(struct`),long,long,long,int,*(*`),long,long)),long))
->	O
message_end	long
+	O
off	long
;	O
ref	*(struct(long,long,long,long,int))
->	O
rescan	int
=	O
0	int
;	O
}	O
if	O
(	O
to	*(struct)
==	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
->	O
mesg_count	long
)	O
off	long
=	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
->	O
mesg	*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*(struct),*(struct(*`,*`,long,long,long,int,*`,long,long)),long)))
[	O
to	*(struct)
-	O
1	int
]	O
->	O
message_end	long
+	O
2	int
;	O
else	O
off	long
=	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
->	O
mesg	*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*(struct),*(struct(*`,*`,long,long,long,int,*`,long,long)),long)))
[	O
to	*(struct)
]	O
->	O
message_start	long
;	O
rc	int
=	O
mu_stream_seek	(*(struct),long,int,*(long))->(int)
(	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
->	O
mailbox	*(struct)
->	O
stream	*(struct)
,	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
->	O
mesg	*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*(struct),*(struct(*`,*`,long,long,long,int,*`,long,long)),long)))
[	O
from	*(struct)
]	O
->	O
message_start	long
,	O
MU_SEEK_SET	int
,	O
NULL	O
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
return	O
mu_stream_copy	(*(struct),*(struct),long,*(long))->(int)
(	O
dest	*(struct)
,	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
->	O
mailbox	*(struct)
->	O
stream	*(struct)
,	O
off	long
-	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
->	O
mesg	*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*(struct),*(struct(*`,*`,long,long,long,int,*`,long,long)),long)))
[	O
from	*(struct)
]	O
->	O
message_start	long
,	O
NULL	O
)	O
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
dotmail_flush_temp	(*(struct(*(struct(*`,*`,long,long,long,int,*`,long,long)),*(struct(long,long,long,long,int)),long)),long,*(struct),int)->(int)
(	O
struct	O
mu_dotmail_flush_tracker	struct(*(struct(*(char),*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(struct`),*(char),int,*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long)),*(struct(long,long,long,long,int)),long)
*	O
trk	*(struct)
,	O
size_t	long
i	long
,	O
mu_stream_t	*(struct)
tempstr	*(struct)
,	O
int	O
expunge	int
)	O
{	O
struct	O
mu_dotmail_mailbox	struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*(struct),*(struct(*`,*`,long,long,long,int,*`,long,long)),long))),long,long)
*	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
=	O
trk	*(struct)
->	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
;	O
size_t	long
start	long
=	O
0	int
;	O
size_t	long
save_imapbase	long
=	O
0	int
;	O
size_t	long
expcount	long
=	O
0	int
;	O
int	O
rc	int
;	O
rc	int
=	O
mu_stream_seek	(*(struct),long,int,*(long))->(int)
(	O
trk	*(struct)
->	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
->	O
mailbox	*(struct)
->	O
stream	*(struct)
,	O
0	int
,	O
MU_SEEK_SET	int
,	O
NULL	O
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
while	O
(	O
i	long
<	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
->	O
mesg_count	long
)	O
{	O
struct	O
mu_dotmail_message	struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*(struct),*(struct),long)
*	O
dmsg	*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*(struct),*(struct(*(char),*(struct`),long,long,long,int,*(*`),long,long)),long))
=	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
->	O
mesg	*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*(struct),*(struct(*`,*`,long,long,long,int,*`,long,long)),long)))
[	O
i	long
]	O
;	O
if	O
(	O
expunge	int
&&	O
(	O
dmsg	*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*(struct),*(struct(*(char),*(struct`),long,long,long,int,*(*`),long,long)),long))
->	O
attr_flags	int
&	O
MU_ATTRIBUTE_DELETED	int
)	O
)	O
{	O
size_t	long
expevt	array(long)
[	O
2	int
]	O
=	O
{	O
i	long
+	O
1	int
,	O
expcount	long
}	O
;	O
rc	int
=	O
dotmail_mailbox_copy_unchanged	(*(struct(*(struct(*`,*`,long,long,long,int,*`,long,long)),*(struct(long,long,long,long,int)),long)),long,long,*(struct))->(int)
(	O
trk	*(struct)
,	O
start	long
,	O
i	long
,	O
tempstr	*(struct)
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
mu_observable_notify	(*(struct),int,*(void))->(int)
(	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
->	O
mailbox	*(struct)
->	O
observable	*(struct)
,	O
MU_EVT_MAILBOX_MESSAGE_EXPUNGE	int
,	O
expevt	array(long)
)	O
;	O
expcount	long
++	O
;	O
mu_message_destroy	(*(*(struct)),*(void))->(void)
(	O
&	O
dmsg	*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*(struct),*(struct(*(char),*(struct`),long,long,long,int,*(*`),long,long)),long))
->	O
message	*(struct)
,	O
dmsg	*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*(struct),*(struct(*(char),*(struct`),long,long,long,int,*(*`),long,long)),long))
)	O
;	O
if	O
(	O
i	long
==	O
save_imapbase	long
)	O
{	O
save_imapbase	long
=	O
i	long
+	O
1	int
;	O
if	O
(	O
save_imapbase	long
<	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
->	O
mesg_count	long
)	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
->	O
mesg	*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*(struct),*(struct(*`,*`,long,long,long,int,*`,long,long)),long)))
[	O
save_imapbase	long
]	O
->	O
attr_flags	int
|=	O
MU_ATTRIBUTE_MODIFIED	int
;	O
}	O
i	long
++	O
;	O
start	long
=	O
i	long
;	O
continue	O
;	O
}	O
if	O
(	O
dmsg	*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*(struct),*(struct(*(char),*(struct`),long,long,long,int,*(*`),long,long)),long))
->	O
uid_modified	int
||	O
(	O
dmsg	*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*(struct),*(struct(*(char),*(struct`),long,long,long,int,*(*`),long,long)),long))
->	O
attr_flags	int
&	O
MU_ATTRIBUTE_MODIFIED	int
)	O
||	O
mu_message_is_modified	(*(struct))->(int)
(	O
dmsg	*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*(struct),*(struct(*(char),*(struct`),long,long,long,int,*(*`),long,long)),long))
->	O
message	*(struct)
)	O
)	O
{	O
rc	int
=	O
dotmail_mailbox_copy_unchanged	(*(struct(*(struct(*`,*`,long,long,long,int,*`,long,long)),*(struct(long,long,long,long,int)),long)),long,long,*(struct))->(int)
(	O
trk	*(struct)
,	O
start	long
,	O
i	long
,	O
tempstr	*(struct)
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
free	(*(void))->(void)
(	O
dmsg	*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*(struct),*(struct(*(char),*(struct`),long,long,long,int,*(*`),long,long)),long))
->	O
hdr	array(*(char))
[	O
mu_dotmail_hdr_x_imapbase	int
]	O
)	O
;	O
dmsg	*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*(struct),*(struct(*(char),*(struct`),long,long,long,int,*(*`),long,long)),long))
->	O
hdr	array(*(char))
[	O
mu_dotmail_hdr_x_imapbase	int
]	O
=	O
NULL	O
;	O
if	O
(	O
save_imapbase	long
==	O
i	long
)	O
{	O
mu_asprintf	(*(*(char)),*(char))->(int)
(	O
&	O
dmsg	*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*(struct),*(struct(*(char),*(struct`),long,long,long,int,*(*`),long,long)),long))
->	O
hdr	array(*(char))
[	O
mu_dotmail_hdr_x_imapbase	int
]	O
,	O
"%lu %lu"	*(char)
,	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
->	O
uidvalidity	long
,	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
->	O
uidnext	long
)	O
;	O
}	O
rc	int
=	O
mu_dotmail_message_reconstruct	(*(struct),*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*(struct),*(struct(*`,*`,long,long,long,int,*`,long,long)),long)),*(struct(long,long,long,long,int)))->(int)
(	O
tempstr	*(struct)
,	O
dmsg	*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*(struct),*(struct(*(char),*(struct`),long,long,long,int,*(*`),long,long)),long))
,	O
tracker_next_ref	(*(struct(*(struct(*`,*`,long,long,long,int,*`,long,long)),*(struct(long,long,long,long,int)),long)),long)->(*(struct(long,long,long,long,int)))
(	O
trk	*(struct)
,	O
i	long
)	O
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
i	long
++	O
;	O
start	long
=	O
i	long
;	O
continue	O
;	O
}	O
i	long
++	O
;	O
}	O
rc	int
=	O
dotmail_mailbox_copy_unchanged	(*(struct(*(struct(*`,*`,long,long,long,int,*`,long,long)),*(struct(long,long,long,long,int)),long)),long,long,*(struct))->(int)
(	O
trk	*(struct)
,	O
start	long
,	O
i	long
,	O
tempstr	*(struct)
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
return	O
mu_stream_flush	(*(struct))->(int)
(	O
tempstr	*(struct)
)	O
;	O
}	O
static	O
int	O
dotmail_flush_unlocked	(*(struct(*(struct(*`,*`,long,long,long,int,*`,long,long)),*(struct(long,long,long,long,int)),long)),int)->(int)
(	O
struct	O
mu_dotmail_flush_tracker	struct(*(struct(*(char),*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(struct`),*(char),int,*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long)),*(struct(long,long,long,long,int)),long)
*	O
trk	*(struct)
,	O
int	O
expunge	int
)	O
{	O
struct	O
mu_dotmail_mailbox	struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*(struct),*(struct(*`,*`,long,long,long,int,*`,long,long)),long))),long,long)
*	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
=	O
trk	*(struct)
->	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
;	O
int	O
rc	int
;	O
size_t	long
dirty	long
;	O
mu_stream_t	*(struct)
tempstr	*(struct)
;	O
struct	O
mu_tempfile_hints	struct(*(char),*(char))
hints	*(struct)
;	O
int	O
tempfd	int
;	O
char	O
*	O
tempname	*(char)
;	O
char	O
*	O
p	*(char)
;	O
mu_debug	O
(	O
MU_DEBCAT_MAILBOX	int
,	O
MU_DEBUG_TRACE1	int
,	O
(	O
"%s (%s)"	*(char)
,	O
__func__	O
,	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
->	O
name	*(char)
)	O
)	O
;	O
if	O
(	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
->	O
mesg_count	long
==	O
0	int
)	O
return	O
0	int
;	O
if	O
(	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
->	O
mailbox	*(struct)
->	O
flags	int
&	O
MU_STREAM_APPEND	int
)	O
return	O
mu_stream_flush	(*(struct))->(int)
(	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
->	O
mailbox	*(struct)
->	O
stream	*(struct)
)	O
;	O
rc	int
=	O
dotmail_refresh	(*(struct(*(struct),*(struct),*(struct),*(struct),*(struct),int,*(struct),*(struct(*`,*`,int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))))->(int)
(	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
->	O
mailbox	*(struct)
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
for	O
(	O
dirty	long
=	O
0	int
;	O
dirty	long
<	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
->	O
mesg_count	long
;	O
dirty	long
++	O
)	O
{	O
struct	O
mu_dotmail_message	struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*(struct),*(struct),long)
*	O
dmsg	*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*(struct),*(struct(*(char),*(struct`),long,long,long,int,*(*`),long,long)),long))
=	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
->	O
mesg	*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*(struct),*(struct(*`,*`,long,long,long,int,*`,long,long)),long)))
[	O
dirty	long
]	O
;	O
if	O
(	O
dmsg	*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*(struct),*(struct(*(char),*(struct`),long,long,long,int,*(*`),long,long)),long))
->	O
uid_modified	int
)	O
break	O
;	O
mu_dotmail_message_attr_load	(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*(struct),*(struct(*`,*`,long,long,long,int,*`,long,long)),long)))->(int)
(	O
dmsg	*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*(struct),*(struct(*(char),*(struct`),long,long,long,int,*(*`),long,long)),long))
)	O
;	O
if	O
(	O
(	O
dmsg	*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*(struct),*(struct(*(char),*(struct`),long,long,long,int,*(*`),long,long)),long))
->	O
attr_flags	int
&	O
MU_ATTRIBUTE_MODIFIED	int
)	O
||	O
(	O
dmsg	*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*(struct),*(struct(*(char),*(struct`),long,long,long,int,*(*`),long,long)),long))
->	O
attr_flags	int
&	O
MU_ATTRIBUTE_DELETED	int
)	O
||	O
(	O
dmsg	*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*(struct),*(struct(*(char),*(struct`),long,long,long,int,*(*`),long,long)),long))
->	O
message	*(struct)
&&	O
mu_message_is_modified	(*(struct))->(int)
(	O
dmsg	*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*(struct),*(struct(*(char),*(struct`),long,long,long,int,*(*`),long,long)),long))
->	O
message	*(struct)
)	O
)	O
)	O
break	O
;	O
}	O
if	O
(	O
dirty	long
+	O
1	int
==	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
->	O
mesg_count	long
)	O
return	O
0	int
;	O
p	*(char)
=	O
strrchr	(*(char),int)->(*(char))
(	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
->	O
name	*(char)
,	O
'/'	O
)	O
;	O
if	O
(	O
p	*(char)
)	O
{	O
size_t	long
l	long
=	O
p	*(char)
-	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
->	O
name	*(char)
;	O
hints	*(struct)
.	O
tmpdir	*(char)
=	O
malloc	(long)->(*(void))
(	O
l	long
+	O
1	int
)	O
;	O
if	O
(	O
!	O
hints	*(struct)
.	O
tmpdir	*(char)
)	O
return	O
ENOMEM	int
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
hints	*(struct)
.	O
tmpdir	*(char)
,	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
->	O
name	*(char)
,	O
l	long
)	O
;	O
hints	*(struct)
.	O
tmpdir	*(char)
[	O
l	long
]	O
=	O
0	int
;	O
}	O
else	O
{	O
hints	*(struct)
.	O
tmpdir	*(char)
=	O
mu_getcwd	()->(*(char))
(	O
)	O
;	O
if	O
(	O
!	O
hints	*(struct)
.	O
tmpdir	*(char)
)	O
return	O
ENOMEM	int
;	O
}	O
rc	int
=	O
mu_tempfile	(*(struct(*(char),*(char))),int,*(int),*(*(char)))->(int)
(	O
&	O
hints	*(struct)
,	O
MU_TEMPFILE_TMPDIR	int
,	O
&	O
tempfd	int
,	O
&	O
tempname	*(char)
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
free	(*(void))->(void)
(	O
hints	*(struct)
.	O
tmpdir	*(char)
)	O
;	O
return	O
rc	int
;	O
}	O
rc	int
=	O
mu_fd_stream_create	(*(*(struct)),*(char),int,int)->(int)
(	O
&	O
tempstr	*(struct)
,	O
tempname	*(char)
,	O
tempfd	int
,	O
MU_STREAM_RDWR	O
|	O
MU_STREAM_SEEK	int
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
free	(*(void))->(void)
(	O
hints	*(struct)
.	O
tmpdir	*(char)
)	O
;	O
close	(int)->(int)
(	O
tempfd	int
)	O
;	O
free	(*(void))->(void)
(	O
tempname	*(char)
)	O
;	O
return	O
rc	int
;	O
}	O
rc	int
=	O
dotmail_flush_temp	(*(struct(*(struct(*`,*`,long,long,long,int,*`,long,long)),*(struct(long,long,long,long,int)),long)),long,*(struct),int)->(int)
(	O
trk	*(struct)
,	O
dirty	long
,	O
tempstr	*(struct)
,	O
expunge	int
)	O
;	O
mu_stream_unref	(*(struct))->(void)
(	O
tempstr	*(struct)
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
char	O
*	O
backup	*(char)
=	O
mu_tempname	(*(char))->(*(char))
(	O
hints	*(struct)
.	O
tmpdir	*(char)
)	O
;	O
rc	int
=	O
rename	(*(char),*(char))->(int)
(	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
->	O
name	*(char)
,	O
backup	*(char)
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_debug	O
(	O
MU_DEBCAT_MAILBOX	int
,	O
MU_DEBUG_ERROR	int
,	O
(	O
"%s:%s: failed to rename to backup file %s: %s"	*(char)
,	O
__func__	O
,	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
->	O
name	*(char)
,	O
tempname	*(char)
,	O
mu_strerror	(int)->(*(char))
(	O
rc	int
)	O
)	O
)	O
;	O
unlink	(*(char))->(int)
(	O
backup	*(char)
)	O
;	O
}	O
else	O
{	O
rc	int
=	O
rename	(*(char),*(char))->(int)
(	O
tempname	*(char)
,	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
->	O
name	*(char)
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
dotmail_tracker_sync	(*(struct(*(struct(*`,*`,long,long,long,int,*`,long,long)),*(struct(long,long,long,long,int)),long)))->(void)
(	O
trk	*(struct)
)	O
;	O
mu_stream_destroy	(*(*(struct)))->(void)
(	O
&	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
->	O
mailbox	*(struct)
->	O
stream	*(struct)
)	O
;	O
rc	int
=	O
dotmail_mailbox_init_stream	(*(struct(*(char),*(struct(*`,*`,*`,*`,*`,int,*`,*`,*`,*`,int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),long,long,long,int,*(*(struct`)),long,long)))->(int)
(	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
)	O
;	O
}	O
else	O
{	O
int	O
rc1	int
;	O
mu_debug	O
(	O
MU_DEBCAT_MAILBOX	int
,	O
MU_DEBUG_ERROR	int
,	O
(	O
"%s: failed to rename temporary file %s %s: %s"	*(char)
,	O
__func__	O
,	O
tempname	*(char)
,	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
->	O
name	*(char)
,	O
mu_strerror	(int)->(*(char))
(	O
rc	int
)	O
)	O
)	O
;	O
rc1	int
=	O
rename	(*(char),*(char))->(int)
(	O
backup	*(char)
,	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
->	O
name	*(char)
)	O
;	O
if	O
(	O
rc1	int
)	O
{	O
mu_error	(*(char))->(int)
(	O
_	O
(	O
"failed to restore %s from backup %s: %s"	*(char)
)	O
,	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
->	O
name	*(char)
,	O
backup	*(char)
,	O
mu_strerror	(int)->(*(char))
(	O
rc1	int
)	O
)	O
;	O
mu_error	(*(char))->(int)
(	O
_	O
(	O
"backup left in %s"	*(char)
)	O
,	O
backup	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
backup	*(char)
)	O
;	O
backup	*(char)
=	O
NULL	O
;	O
}	O
}	O
}	O
if	O
(	O
backup	*(char)
)	O
{	O
unlink	(*(char))->(int)
(	O
backup	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
backup	*(char)
)	O
;	O
}	O
}	O
unlink	(*(char))->(int)
(	O
tempname	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
tempname	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
hints	*(struct)
.	O
tmpdir	*(char)
)	O
;	O
return	O
rc	int
;	O
}	O
static	O
int	O
dotmail_flush	(*(struct(*(char),*(struct(*`,*`,*`,*`,*`,int,*`,*`,*`,*`,int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),long,long,long,int,*(*(struct`)),long,long)),int)->(int)
(	O
struct	O
mu_dotmail_mailbox	struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*(struct),*(struct(*`,*`,long,long,long,int,*`,long,long)),long))),long,long)
*	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
,	O
int	O
expunge	int
)	O
{	O
int	O
rc	int
;	O
sigset_t	struct(array(long))
signalset	struct(array(long))
;	O
int	O
state	*(int)
;	O
struct	O
mu_dotmail_flush_tracker	struct(*(struct(*(char),*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(struct`),*(char),int,*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long)),*(struct(long,long,long,long,int)),long)
trk	*(struct)
;	O
if	O
(	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
->	O
mailbox	*(struct)
->	O
locker	*(struct)
&&	O
(	O
rc	int
=	O
mu_locker_lock	(*(struct))->(int)
(	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
->	O
mailbox	*(struct)
->	O
locker	*(struct)
)	O
)	O
!=	O
0	int
)	O
return	O
rc	int
;	O
pthread_setcancelstate	(int,*(int))->(int)
(	O
PTHREAD_CANCEL_DISABLE	int
,	O
&	O
state	*(int)
)	O
;	O
sigemptyset	(*(struct(array(long))))->(int)
(	O
&	O
signalset	struct(array(long))
)	O
;	O
sigaddset	(*(struct(array(long))),int)->(int)
(	O
&	O
signalset	struct(array(long))
,	O
SIGTERM	int
)	O
;	O
sigaddset	(*(struct(array(long))),int)->(int)
(	O
&	O
signalset	struct(array(long))
,	O
SIGHUP	int
)	O
;	O
sigaddset	(*(struct(array(long))),int)->(int)
(	O
&	O
signalset	struct(array(long))
,	O
SIGTSTP	int
)	O
;	O
sigaddset	(*(struct(array(long))),int)->(int)
(	O
&	O
signalset	struct(array(long))
,	O
SIGINT	int
)	O
;	O
sigaddset	(*(struct(array(long))),int)->(int)
(	O
&	O
signalset	struct(array(long))
,	O
SIGWINCH	int
)	O
;	O
sigprocmask	(int,*(struct(array(long))),*(struct(array(long))))->(int)
(	O
SIG_BLOCK	int
,	O
&	O
signalset	struct(array(long))
,	O
0	int
)	O
;	O
rc	int
=	O
tracker_init	(*(struct(*(struct(*`,*`,long,long,long,int,*`,long,long)),*(struct(long,long,long,long,int)),long)),*(struct(*(char),*(struct(*`,*`,*`,*`,*`,int,*`,*`,*`,*`,int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),long,long,long,int,*(*(struct`)),long,long)))->(int)
(	O
&	O
trk	*(struct)
,	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
rc	int
=	O
dotmail_flush_unlocked	(*(struct(*(struct(*`,*`,long,long,long,int,*`,long,long)),*(struct(long,long,long,long,int)),long)),int)->(int)
(	O
&	O
trk	*(struct)
,	O
expunge	int
)	O
;	O
tracker_free	(*(struct(*(struct(*`,*`,long,long,long,int,*`,long,long)),*(struct(long,long,long,long,int)),long)))->(void)
(	O
&	O
trk	*(struct)
)	O
;	O
}	O
pthread_setcancelstate	(int,*(int))->(int)
(	O
state	*(int)
,	O
&	O
state	*(int)
)	O
;	O
sigprocmask	(int,*(struct(array(long))),*(struct(array(long))))->(int)
(	O
SIG_UNBLOCK	int
,	O
&	O
signalset	struct(array(long))
,	O
0	int
)	O
;	O
if	O
(	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
->	O
mailbox	*(struct)
->	O
locker	*(struct)
)	O
mu_locker_unlock	(*(struct))->(int)
(	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
->	O
mailbox	*(struct)
->	O
locker	*(struct)
)	O
;	O
return	O
rc	int
;	O
}	O
static	O
int	O
dotmail_expunge	(*(struct(*(struct),*(struct),*(struct),*(struct),*(struct),int,*(struct),*(struct(*`,*`,int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))))->(int)
(	O
mu_mailbox_t	*(struct)
mailbox	*(struct)
)	O
{	O
struct	O
mu_dotmail_mailbox	struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*(struct),*(struct(*`,*`,long,long,long,int,*`,long,long)),long))),long,long)
*	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
=	O
mailbox	*(struct)
->	O
data	*(void)
;	O
return	O
dotmail_flush	(*(struct(*(char),*(struct(*`,*`,*`,*`,*`,int,*`,*`,*`,*`,int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),long,long,long,int,*(*(struct`)),long,long)),int)->(int)
(	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
,	O
1	int
)	O
;	O
}	O
static	O
int	O
dotmail_sync	(*(struct(*(struct),*(struct),*(struct),*(struct),*(struct),int,*(struct),*(struct(*`,*`,int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))))->(int)
(	O
mu_mailbox_t	*(struct)
mailbox	*(struct)
)	O
{	O
struct	O
mu_dotmail_mailbox	struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*(struct),*(struct(*`,*`,long,long,long,int,*`,long,long)),long))),long,long)
*	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
=	O
mailbox	*(struct)
->	O
data	*(void)
;	O
return	O
dotmail_flush	(*(struct(*(char),*(struct(*`,*`,*`,*`,*`,int,*`,*`,*`,*`,int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),long,long,long,int,*(*(struct`)),long,long)),int)->(int)
(	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
,	O
0	int
)	O
;	O
}	O
int	O
mu_dotmail_mailbox_init	(*(struct))->(int)
(	O
mu_mailbox_t	*(struct)
mailbox	*(struct)
)	O
{	O
int	O
status	int
;	O
struct	O
mu_dotmail_mailbox	struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*(struct),*(struct(*`,*`,long,long,long,int,*`,long,long)),long))),long,long)
*	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
;	O
mu_property_t	*(struct)
property	*(struct)
=	O
NULL	O
;	O
if	O
(	O
mailbox	*(struct)
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
=	O
calloc	(long,long)->(*(void))
(	O
1	int
,	O
sizeof	O
(	O
*	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
)	O
)	O
;	O
if	O
(	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
==	O
NULL	O
)	O
return	O
ENOMEM	int
;	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
->	O
mailbox	*(struct)
=	O
mailbox	*(struct)
;	O
status	int
=	O
mu_url_aget_path	(*(struct),*(*(char)))->(int)
(	O
mailbox	*(struct)
->	O
url	*(struct)
,	O
&	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
->	O
name	*(char)
)	O
;	O
if	O
(	O
status	int
)	O
{	O
free	(*(void))->(void)
(	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
)	O
;	O
return	O
status	int
;	O
}	O
mailbox	*(struct)
->	O
data	*(void)
=	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
;	O
mailbox	*(struct)
->	O
_destroy	*((*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(struct`),*(char),int,*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))))->(void))
=	O
dotmail_destroy	(*(struct(*(struct),*(struct),*(struct),*(struct),*(struct),int,*(struct),*(struct(*`,*`,int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))))->(void)
;	O
mailbox	*(struct)
->	O
_open	*((*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(struct`),*(char),int,*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))),int)->(int))
=	O
dotmail_open	(*(struct(*(struct),*(struct),*(struct),*(struct),*(struct),int,*(struct),*(struct(*`,*`,int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))),int)->(int)
;	O
mailbox	*(struct)
->	O
_close	*((*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(struct`),*(char),int,*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))))->(int))
=	O
dotmail_close	(*(struct(*(struct),*(struct),*(struct),*(struct),*(struct),int,*(struct),*(struct(*`,*`,int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))))->(int)
;	O
mailbox	*(struct)
->	O
_remove	*((*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(struct`),*(char),int,*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))))->(int))
=	O
dotmail_remove	(*(struct(*(struct),*(struct),*(struct),*(struct),*(struct),int,*(struct),*(struct(*`,*`,int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))))->(int)
;	O
mailbox	*(struct)
->	O
_scan	*((*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(struct`),*(char),int,*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))),long,*(long))->(int))
=	O
dotmail_scan	(*(struct(*(struct),*(struct),*(struct),*(struct),*(struct),int,*(struct),*(struct(*`,*`,int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))),long,*(long))->(int)
;	O
mailbox	*(struct)
->	O
_is_updated	*((*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(struct`),*(char),int,*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))))->(int))
=	O
dotmail_is_updated	(*(struct(*(struct),*(struct),*(struct),*(struct),*(struct),int,*(struct),*(struct(*`,*`,int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))))->(int)
;	O
mailbox	*(struct)
->	O
_get_message	*((*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(struct`),*(char),int,*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))),long,*(*(struct)))->(int))
=	O
dotmail_get_message	(*(struct(*(struct),*(struct),*(struct),*(struct),*(struct),int,*(struct),*(struct(*`,*`,int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))),long,*(*(struct(int,*(void),*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),long,*((*`,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,int)->(int)),*((*`,*`)->(int))))))->(int)
;	O
mailbox	*(struct)
->	O
_quick_get_message	*((*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(struct`),*(char),int,*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))),*(char),*(*(struct)))->(int))
=	O
dotmail_quick_get_message	(*(struct(*(struct),*(struct),*(struct),*(struct),*(struct),int,*(struct),*(struct(*`,*`,int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))),*(char),*(*(struct(int,*(void),*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),long,*((*`,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,int)->(int)),*((*`,*`)->(int))))))->(int)
;	O
mailbox	*(struct)
->	O
_messages_count	*((*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(struct`),*(char),int,*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))),*(long))->(int))
=	O
dotmail_messages_count	(*(struct(*(struct),*(struct),*(struct),*(struct),*(struct),int,*(struct),*(struct(*`,*`,int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))),*(long))->(int)
;	O
mailbox	*(struct)
->	O
_messages_recent	*((*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(struct`),*(char),int,*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))),*(long))->(int))
=	O
dotmail_messages_recent	(*(struct(*(struct),*(struct),*(struct),*(struct),*(struct),int,*(struct),*(struct(*`,*`,int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))),*(long))->(int)
;	O
mailbox	*(struct)
->	O
_message_unseen	*((*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(struct`),*(char),int,*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))),*(long))->(int))
=	O
dotmail_message_unseen	(*(struct(*(struct),*(struct),*(struct),*(struct),*(struct),int,*(struct),*(struct(*`,*`,int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))),*(long))->(int)
;	O
mailbox	*(struct)
->	O
_append_message	*((*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(struct`),*(char),int,*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))),*(struct))->(int))
=	O
dotmail_append_message	(*(struct(*(struct),*(struct),*(struct),*(struct),*(struct),int,*(struct),*(struct(*`,*`,int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))),*(struct(int,*(void),*(struct),*(struct),*(struct),int,*(struct),*(struct),*(struct),*(struct(*`,*`,int,int)),*(struct),*(struct),*(struct(*`,*`,*`,*`,*`,int,*`,*`,*`,*`,int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),long,*((*`,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,int)->(int)),*((*`,*`)->(int)))))->(int)
;	O
mailbox	*(struct)
->	O
_expunge	*((*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(struct`),*(char),int,*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))))->(int))
=	O
dotmail_expunge	(*(struct(*(struct),*(struct),*(struct),*(struct),*(struct),int,*(struct),*(struct(*`,*`,int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))))->(int)
;	O
mailbox	*(struct)
->	O
_sync	*((*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(struct`),*(char),int,*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))))->(int))
=	O
dotmail_sync	(*(struct(*(struct),*(struct),*(struct),*(struct),*(struct),int,*(struct),*(struct(*`,*`,int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))))->(int)
;	O
mailbox	*(struct)
->	O
_uidvalidity	*((*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(struct`),*(char),int,*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))),*(long))->(int))
=	O
dotmail_uidvalidity	(*(struct(*(struct),*(struct),*(struct),*(struct),*(struct),int,*(struct),*(struct(*`,*`,int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))),*(long))->(int)
;	O
mailbox	*(struct)
->	O
_uidnext	*((*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(struct`),*(char),int,*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))),*(long))->(int))
=	O
dotmail_uidnext	(*(struct(*(struct),*(struct),*(struct),*(struct),*(struct),int,*(struct),*(struct(*`,*`,int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))),*(long))->(int)
;	O
mailbox	*(struct)
->	O
_get_size	*((*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(struct`),*(char),int,*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))),*(long))->(int))
=	O
dotmail_get_size	(*(struct(*(struct),*(struct),*(struct),*(struct),*(struct),int,*(struct),*(struct(*`,*`,int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))),*(long))->(int)
;	O
mailbox	*(struct)
->	O
_get_atime	*((*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(struct`),*(char),int,*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))),*(long))->(int))
=	O
dotmail_get_atime	(*(struct(*(struct),*(struct),*(struct),*(struct),*(struct),int,*(struct),*(struct(*`,*`,int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))),*(long))->(int)
;	O
mu_mailbox_get_property	(*(struct),*(*(struct)))->(int)
(	O
mailbox	*(struct)
,	O
&	O
property	*(struct)
)	O
;	O
mu_property_set_value	(*(struct),*(char),*(char),int)->(int)
(	O
property	*(struct)
,	O
"TYPE"	*(char)
,	O
"DOTMAIL"	*(char)
,	O
1	int
)	O
;	O
mu_debug	O
(	O
MU_DEBCAT_MAILBOX	int
,	O
MU_DEBUG_TRACE1	int
,	O
(	O
"%s (%s)"	*(char)
,	O
__func__	O
,	O
dmp	*(struct(*(char),*(struct),long,long,long,int,*(*(struct(long,long,long,long,long,long,array(*(char)),int,int,int,int,int,*`,*`,long))),long,long))
->	O
name	*(char)
)	O
)	O
;	O
return	O
0	int
;	O
}	O
