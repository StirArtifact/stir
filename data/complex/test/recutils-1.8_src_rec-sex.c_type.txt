struct	O
rec_sex_s	struct(*(struct),*(struct))
{	O
rec_sex_ast_t	*(struct)
ast	*(struct)
;	O
rec_sex_parser_t	*(struct)
parser	*(struct)
;	O
}	O
;	O
struct	O
rec_sex_val_s	struct(int,int,double,*(char))
{	O
int	O
type	enum(int,int,int,int)
;	O
int	O
int_val	int
;	O
double	O
real_val	double
;	O
char	O
*	O
str_val	*(char)
;	O
}	O
;	O
static	O
struct	O
rec_sex_val_s	struct(int,int,double,*(char))
rec_sex_eval_node	(*(struct(*(struct),*(struct))),*(struct),*(struct),*(bool))->(struct(int,int,double,*(char)))
(	O
rec_sex_t	*(struct)
sex	*(struct)
,	O
rec_record_t	*(struct)
record	*(struct)
,	O
rec_sex_ast_node_t	*(struct)
node	*(struct)
,	O
bool	bool
*	O
status	int
)	O
;	O
static	O
bool	bool
rec_sex_op_real_p	(struct(int,int,double,*(char)),struct(int,int,double,*(char)))->(bool)
(	O
struct	O
rec_sex_val_s	struct(int,int,double,*(char))
op1	struct(int,int,double,*(char))
,	O
struct	O
rec_sex_val_s	struct(int,int,double,*(char))
op2	struct(int,int,double,*(char))
)	O
;	O
rec_sex_t	*(struct)
rec_sex_new	(bool)->(*(struct))
(	O
bool	bool
case_insensitive	bool
)	O
{	O
rec_sex_t	*(struct)
new	*(struct(*(struct),*(struct)))
;	O
new	*(struct(*(struct),*(struct)))
=	O
malloc	(long)->(*(void))
(	O
sizeof	O
(	O
struct	O
rec_sex_s	struct(*(struct),*(struct))
)	O
)	O
;	O
if	O
(	O
new	*(struct(*(struct),*(struct)))
)	O
{	O
new	*(struct(*(struct),*(struct)))
->	O
parser	*(struct)
=	O
rec_sex_parser_new	()->(*(struct))
(	O
)	O
;	O
rec_sex_parser_set_case_insensitive	(*(struct),bool)->(void)
(	O
new	*(struct(*(struct),*(struct)))
->	O
parser	*(struct)
,	O
case_insensitive	bool
)	O
;	O
new	*(struct(*(struct),*(struct)))
->	O
ast	*(struct)
=	O
NULL	O
;	O
}	O
return	O
new	*(struct(*(struct),*(struct)))
;	O
}	O
void	O
rec_sex_destroy	(*(struct))->(void)
(	O
rec_sex_t	*(struct)
sex	*(struct)
)	O
{	O
if	O
(	O
sex	*(struct)
)	O
{	O
if	O
(	O
sex	*(struct)
->	O
parser	*(struct)
)	O
{	O
rec_sex_parser_destroy	(*(struct))->(void)
(	O
sex	*(struct)
->	O
parser	*(struct)
)	O
;	O
}	O
if	O
(	O
sex	*(struct)
->	O
ast	*(struct)
)	O
{	O
rec_sex_ast_destroy	(*(struct))->(void)
(	O
sex	*(struct)
->	O
ast	*(struct)
)	O
;	O
}	O
free	(*(void))->(void)
(	O
sex	*(struct)
)	O
;	O
}	O
}	O
bool	bool
rec_sex_compile	(*(struct),*(char))->(bool)
(	O
rec_sex_t	*(struct)
sex	*(struct)
,	O
const	O
char	O
*	O
expr	*(char)
)	O
{	O
bool	bool
res	bool
;	O
res	bool
=	O
rec_sex_parser_run	(*(struct),*(char))->(bool)
(	O
sex	*(struct)
->	O
parser	*(struct)
,	O
expr	*(char)
)	O
;	O
if	O
(	O
res	bool
)	O
{	O
sex	*(struct)
->	O
ast	*(struct)
=	O
rec_sex_parser_ast	(*(struct))->(*(struct))
(	O
sex	*(struct)
->	O
parser	*(struct)
)	O
;	O
}	O
return	O
res	bool
;	O
}	O
char	O
*	O
rec_sex_eval_str	(*(struct),*(struct))->(*(char))
(	O
rec_sex_t	*(struct)
sex	*(struct)
,	O
rec_record_t	*(struct)
record	*(struct)
)	O
{	O
char	O
*	O
res	bool
;	O
struct	O
rec_sex_val_s	struct(int,int,double,*(char))
val	*(char)
;	O
bool	bool
status	int
;	O
rec_sex_ast_node_unfix	(*(struct))->(void)
(	O
rec_sex_ast_top	(*(struct))->(*(struct))
(	O
sex	*(struct)
->	O
ast	*(struct)
)	O
)	O
;	O
val	*(char)
=	O
rec_sex_eval_node	(*(struct(*(struct),*(struct))),*(struct),*(struct),*(bool))->(struct(int,int,double,*(char)))
(	O
sex	*(struct)
,	O
record	*(struct)
,	O
rec_sex_ast_top	(*(struct))->(*(struct))
(	O
sex	*(struct)
->	O
ast	*(struct)
)	O
,	O
&	O
status	int
)	O
;	O
if	O
(	O
!	O
status	int
)	O
{	O
return	O
NULL	O
;	O
}	O
res	bool
=	O
NULL	O
;	O
switch	O
(	O
val	*(char)
.	O
type	enum(int,int,int,int)
)	O
{	O
case	O
REC_SEX_VAL_INT	int
:	O
{	O
asprintf	(*(*(char)),*(char))->(int)
(	O
&	O
res	bool
,	O
"%d"	*(char)
,	O
val	*(char)
.	O
int_val	int
)	O
;	O
break	O
;	O
}	O
case	O
REC_SEX_VAL_REAL	int
:	O
{	O
asprintf	(*(*(char)),*(char))->(int)
(	O
&	O
res	bool
,	O
"%f"	*(char)
,	O
val	*(char)
.	O
real_val	double
)	O
;	O
break	O
;	O
}	O
case	O
REC_SEX_VAL_STR	int
:	O
{	O
res	bool
=	O
strdup	(*(char))->(*(char))
(	O
val	*(char)
.	O
str_val	*(char)
)	O
;	O
break	O
;	O
}	O
}	O
return	O
res	bool
;	O
}	O
bool	bool
rec_sex_eval	(*(struct),*(struct),*(bool))->(bool)
(	O
rec_sex_t	*(struct)
sex	*(struct)
,	O
rec_record_t	*(struct)
record	*(struct)
,	O
bool	bool
*	O
status	int
)	O
{	O
bool	bool
res	bool
;	O
rec_field_t	*(struct)
field	*(struct)
;	O
rec_field_t	*(struct)
wfield	*(struct)
;	O
rec_record_t	*(struct)
wrec	*(struct)
;	O
rec_mset_iterator_t	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
iter	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
;	O
int	O
j	long
,	O
nf	int
;	O
struct	O
rec_sex_val_s	struct(int,int,double,*(char))
val	*(char)
;	O
res	bool
=	O
false	int
;	O
wrec	*(struct)
=	O
NULL	O
;	O
rec_sex_ast_node_unfix	(*(struct))->(void)
(	O
rec_sex_ast_top	(*(struct))->(*(struct))
(	O
sex	*(struct)
->	O
ast	*(struct)
)	O
)	O
;	O
EXEC_AST	O
(	O
record	*(struct)
)	O
;	O
if	O
(	O
res	bool
)	O
{	O
goto	O
exit	(int)->(void)
;	O
}	O
rec_record_reset_marks	(*(struct))->(void)
(	O
record	*(struct)
)	O
;	O
iter	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
=	O
rec_mset_iterator	(*(struct))->(struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long)))
(	O
rec_record_mset	(*(struct))->(*(struct))
(	O
record	*(struct)
)	O
)	O
;	O
while	O
(	O
rec_mset_iterator_next	(*(struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))),int,*(*(void)),*(*(struct)))->(bool)
(	O
&	O
iter	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
,	O
MSET_FIELD	int
,	O
(	O
const	O
void	O
*	O
*	O
)	O
&	O
field	*(struct)
,	O
NULL	O
)	O
)	O
{	O
nf	int
=	O
rec_record_get_num_fields_by_name	(*(struct),*(char))->(long)
(	O
record	*(struct)
,	O
rec_field_name	(*(struct))->(*(char))
(	O
field	*(struct)
)	O
)	O
;	O
if	O
(	O
(	O
nf	int
>	O
1	int
)	O
&&	O
(	O
rec_record_field_mark	(*(struct),*(struct))->(int)
(	O
record	*(struct)
,	O
field	*(struct)
)	O
==	O
0	int
)	O
&&	O
(	O
rec_sex_ast_name_p	(*(struct),*(char),long)->(bool)
(	O
sex	*(struct)
->	O
ast	*(struct)
,	O
rec_field_name	(*(struct))->(*(char))
(	O
field	*(struct)
)	O
,	O
nf	int
)	O
)	O
&&	O
(	O
!	O
rec_sex_ast_hash_name_p	(*(struct),*(char))->(bool)
(	O
sex	*(struct)
->	O
ast	*(struct)
,	O
rec_field_name	(*(struct))->(*(char))
(	O
field	*(struct)
)	O
)	O
)	O
)	O
{	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
nf	int
;	O
j	long
++	O
)	O
{	O
wfield	*(struct)
=	O
rec_record_get_field_by_name	(*(struct),*(char),long)->(*(struct))
(	O
record	*(struct)
,	O
rec_field_name	(*(struct))->(*(char))
(	O
field	*(struct)
)	O
,	O
j	long
)	O
;	O
if	O
(	O
wrec	*(struct)
)	O
{	O
rec_record_destroy	(*(struct))->(void)
(	O
wrec	*(struct)
)	O
;	O
}	O
rec_record_mark_field	(*(struct),*(struct),int)->(bool)
(	O
record	*(struct)
,	O
wfield	*(struct)
,	O
1	int
)	O
;	O
wrec	*(struct)
=	O
rec_record_dup	(*(struct))->(*(struct))
(	O
record	*(struct)
)	O
;	O
rec_record_remove_field_by_name	(*(struct),*(char),long)->(void)
(	O
wrec	*(struct)
,	O
rec_field_name	(*(struct))->(*(char))
(	O
field	*(struct)
)	O
,	O
-	O
1	int
)	O
;	O
rec_mset_append	(*(struct),int,*(void),int)->(*(struct))
(	O
rec_record_mset	(*(struct))->(*(struct))
(	O
wrec	*(struct)
)	O
,	O
MSET_FIELD	int
,	O
(	O
void	O
*	O
)	O
rec_field_dup	(*(struct))->(*(struct))
(	O
wfield	*(struct)
)	O
,	O
MSET_ANY	int
)	O
;	O
EXEC_AST	O
(	O
wrec	*(struct)
)	O
;	O
if	O
(	O
res	bool
)	O
{	O
rec_record_destroy	(*(struct))->(void)
(	O
wrec	*(struct)
)	O
;	O
goto	O
exit	(int)->(void)
;	O
}	O
}	O
}	O
}	O
rec_mset_iterator_free	(*(struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))))->(void)
(	O
&	O
iter	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
)	O
;	O
exit	(int)->(void)
:	O
if	O
(	O
!	O
*	O
status	int
)	O
{	O
res	bool
=	O
false	int
;	O
}	O
return	O
res	bool
;	O
}	O
void	O
rec_sex_print_ast	(*(struct))->(void)
(	O
rec_sex_t	*(struct)
sex	*(struct)
)	O
{	O
rec_sex_parser_print_ast	(*(struct))->(void)
(	O
sex	*(struct)
->	O
parser	*(struct)
)	O
;	O
}	O
struct	O
rec_sex_val_s	struct(int,int,double,*(char))
rec_sex_eval_node	(*(struct(*(struct),*(struct))),*(struct),*(struct),*(bool))->(struct(int,int,double,*(char)))
(	O
rec_sex_t	*(struct)
sex	*(struct)
,	O
rec_record_t	*(struct)
record	*(struct)
,	O
rec_sex_ast_node_t	*(struct)
node	*(struct)
,	O
bool	bool
*	O
status	int
)	O
{	O
struct	O
rec_sex_val_s	struct(int,int,double,*(char))
res	bool
=	O
{	O
0	int
,	O
0	int
,	O
0	int
,	O
NULL	O
}	O
;	O
struct	O
rec_sex_val_s	struct(int,int,double,*(char))
child_val1	struct(int,int,double,*(char))
=	O
{	O
0	int
,	O
0	int
,	O
0	int
,	O
NULL	O
}	O
;	O
struct	O
rec_sex_val_s	struct(int,int,double,*(char))
child_val2	struct(int,int,double,*(char))
=	O
{	O
0	int
,	O
0	int
,	O
0	int
,	O
NULL	O
}	O
;	O
struct	O
rec_sex_val_s	struct(int,int,double,*(char))
child_val3	struct(int,int,double,*(char))
=	O
{	O
0	int
,	O
0	int
,	O
0	int
,	O
NULL	O
}	O
;	O
*	O
status	int
=	O
true	int
;	O
switch	O
(	O
rec_sex_ast_node_type	(*(struct))->(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int))
(	O
node	*(struct)
)	O
)	O
{	O
case	O
REC_SEX_NOVAL	int
:	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"Application bug: REC_SEX_NOVAL node found.\nPlease report this!\n"	*(char)
)	O
;	O
exit	(int)->(void)
(	O
EXIT_FAILURE	int
)	O
;	O
break	O
;	O
}	O
case	O
REC_SEX_OP_NEG	int
:	O
case	O
REC_SEX_OP_ADD	int
:	O
{	O
int	O
op1	struct(int,int,double,*(char))
;	O
int	O
op2	struct(int,int,double,*(char))
;	O
double	O
op1_real	double
;	O
double	O
op2_real	double
;	O
GET_CHILD_VAL	O
(	O
child_val1	struct(int,int,double,*(char))
,	O
0	int
)	O
;	O
GET_CHILD_VAL	O
(	O
child_val2	struct(int,int,double,*(char))
,	O
1	int
)	O
;	O
if	O
(	O
rec_sex_op_real_p	(struct(int,int,double,*(char)),struct(int,int,double,*(char)))->(bool)
(	O
child_val1	struct(int,int,double,*(char))
,	O
child_val2	struct(int,int,double,*(char))
)	O
)	O
{	O
ATOD_VAL	O
(	O
op1_real	double
,	O
child_val1	struct(int,int,double,*(char))
)	O
;	O
ATOD_VAL	O
(	O
op2_real	double
,	O
child_val2	struct(int,int,double,*(char))
)	O
;	O
res	bool
.	O
type	enum(int,int,int,int)
=	O
REC_SEX_VAL_REAL	int
;	O
res	bool
.	O
real_val	double
=	O
op1_real	double
+	O
op2_real	double
;	O
}	O
else	O
{	O
ATOI_VAL	O
(	O
op1	struct(int,int,double,*(char))
,	O
child_val1	struct(int,int,double,*(char))
)	O
;	O
ATOI_VAL	O
(	O
op2	struct(int,int,double,*(char))
,	O
child_val2	struct(int,int,double,*(char))
)	O
;	O
res	bool
.	O
type	enum(int,int,int,int)
=	O
REC_SEX_VAL_INT	int
;	O
res	bool
.	O
int_val	int
=	O
op1	struct(int,int,double,*(char))
+	O
op2	struct(int,int,double,*(char))
;	O
}	O
break	O
;	O
}	O
case	O
REC_SEX_OP_SUB	int
:	O
{	O
int	O
op1	struct(int,int,double,*(char))
;	O
int	O
op2	struct(int,int,double,*(char))
;	O
double	O
op1_real	double
;	O
double	O
op2_real	double
;	O
GET_CHILD_VAL	O
(	O
child_val1	struct(int,int,double,*(char))
,	O
0	int
)	O
;	O
GET_CHILD_VAL	O
(	O
child_val2	struct(int,int,double,*(char))
,	O
1	int
)	O
;	O
if	O
(	O
rec_sex_op_real_p	(struct(int,int,double,*(char)),struct(int,int,double,*(char)))->(bool)
(	O
child_val1	struct(int,int,double,*(char))
,	O
child_val2	struct(int,int,double,*(char))
)	O
)	O
{	O
ATOD_VAL	O
(	O
op1_real	double
,	O
child_val1	struct(int,int,double,*(char))
)	O
;	O
ATOD_VAL	O
(	O
op2_real	double
,	O
child_val2	struct(int,int,double,*(char))
)	O
;	O
res	bool
.	O
type	enum(int,int,int,int)
=	O
REC_SEX_VAL_REAL	int
;	O
res	bool
.	O
real_val	double
=	O
op1	struct(int,int,double,*(char))
-	O
op2	struct(int,int,double,*(char))
;	O
}	O
else	O
{	O
ATOI_VAL	O
(	O
op1	struct(int,int,double,*(char))
,	O
child_val1	struct(int,int,double,*(char))
)	O
;	O
ATOI_VAL	O
(	O
op2	struct(int,int,double,*(char))
,	O
child_val2	struct(int,int,double,*(char))
)	O
;	O
res	bool
.	O
type	enum(int,int,int,int)
=	O
REC_SEX_VAL_INT	int
;	O
res	bool
.	O
int_val	int
=	O
op1	struct(int,int,double,*(char))
-	O
op2	struct(int,int,double,*(char))
;	O
}	O
break	O
;	O
}	O
case	O
REC_SEX_OP_MUL	int
:	O
{	O
int	O
op1	struct(int,int,double,*(char))
;	O
int	O
op2	struct(int,int,double,*(char))
;	O
double	O
op1_real	double
;	O
double	O
op2_real	double
;	O
GET_CHILD_VAL	O
(	O
child_val1	struct(int,int,double,*(char))
,	O
0	int
)	O
;	O
GET_CHILD_VAL	O
(	O
child_val2	struct(int,int,double,*(char))
,	O
1	int
)	O
;	O
if	O
(	O
rec_sex_op_real_p	(struct(int,int,double,*(char)),struct(int,int,double,*(char)))->(bool)
(	O
child_val1	struct(int,int,double,*(char))
,	O
child_val2	struct(int,int,double,*(char))
)	O
)	O
{	O
ATOD_VAL	O
(	O
op1_real	double
,	O
child_val1	struct(int,int,double,*(char))
)	O
;	O
ATOD_VAL	O
(	O
op2_real	double
,	O
child_val2	struct(int,int,double,*(char))
)	O
;	O
res	bool
.	O
type	enum(int,int,int,int)
=	O
REC_SEX_VAL_REAL	int
;	O
res	bool
.	O
real_val	double
=	O
op1_real	double
*	O
op2_real	double
;	O
}	O
else	O
{	O
ATOI_VAL	O
(	O
op1	struct(int,int,double,*(char))
,	O
child_val1	struct(int,int,double,*(char))
)	O
;	O
ATOI_VAL	O
(	O
op2	struct(int,int,double,*(char))
,	O
child_val2	struct(int,int,double,*(char))
)	O
;	O
res	bool
.	O
type	enum(int,int,int,int)
=	O
REC_SEX_VAL_INT	int
;	O
res	bool
.	O
int_val	int
=	O
op1	struct(int,int,double,*(char))
*	O
op2	struct(int,int,double,*(char))
;	O
}	O
break	O
;	O
}	O
case	O
REC_SEX_OP_DIV	int
:	O
{	O
int	O
op1	struct(int,int,double,*(char))
;	O
int	O
op2	struct(int,int,double,*(char))
;	O
double	O
op1_real	double
;	O
double	O
op2_real	double
;	O
GET_CHILD_VAL	O
(	O
child_val1	struct(int,int,double,*(char))
,	O
0	int
)	O
;	O
GET_CHILD_VAL	O
(	O
child_val2	struct(int,int,double,*(char))
,	O
1	int
)	O
;	O
if	O
(	O
rec_sex_op_real_p	(struct(int,int,double,*(char)),struct(int,int,double,*(char)))->(bool)
(	O
child_val1	struct(int,int,double,*(char))
,	O
child_val2	struct(int,int,double,*(char))
)	O
)	O
{	O
ATOD_VAL	O
(	O
op1_real	double
,	O
child_val1	struct(int,int,double,*(char))
)	O
;	O
ATOD_VAL	O
(	O
op2_real	double
,	O
child_val2	struct(int,int,double,*(char))
)	O
;	O
res	bool
.	O
type	enum(int,int,int,int)
=	O
REC_SEX_VAL_REAL	int
;	O
res	bool
.	O
real_val	double
=	O
op1_real	double
/	O
op2_real	double
;	O
}	O
else	O
{	O
ATOI_VAL	O
(	O
op1	struct(int,int,double,*(char))
,	O
child_val1	struct(int,int,double,*(char))
)	O
;	O
ATOI_VAL	O
(	O
op2	struct(int,int,double,*(char))
,	O
child_val2	struct(int,int,double,*(char))
)	O
;	O
res	bool
.	O
type	enum(int,int,int,int)
=	O
REC_SEX_VAL_INT	int
;	O
if	O
(	O
op2	struct(int,int,double,*(char))
!=	O
0	int
)	O
{	O
res	bool
.	O
int_val	int
=	O
op1	struct(int,int,double,*(char))
/	O
op2	struct(int,int,double,*(char))
;	O
}	O
else	O
{	O
*	O
status	int
=	O
false	int
;	O
return	O
res	bool
;	O
}	O
}	O
break	O
;	O
}	O
case	O
REC_SEX_OP_MOD	int
:	O
{	O
int	O
op1	struct(int,int,double,*(char))
;	O
int	O
op2	struct(int,int,double,*(char))
;	O
GET_CHILD_VAL	O
(	O
child_val1	struct(int,int,double,*(char))
,	O
0	int
)	O
;	O
GET_CHILD_VAL	O
(	O
child_val2	struct(int,int,double,*(char))
,	O
1	int
)	O
;	O
ATOI_VAL	O
(	O
op1	struct(int,int,double,*(char))
,	O
child_val1	struct(int,int,double,*(char))
)	O
;	O
ATOI_VAL	O
(	O
op2	struct(int,int,double,*(char))
,	O
child_val2	struct(int,int,double,*(char))
)	O
;	O
res	bool
.	O
type	enum(int,int,int,int)
=	O
REC_SEX_VAL_INT	int
;	O
if	O
(	O
op2	struct(int,int,double,*(char))
!=	O
0	int
)	O
{	O
res	bool
.	O
int_val	int
=	O
op1	struct(int,int,double,*(char))
%	O
op2	struct(int,int,double,*(char))
;	O
}	O
else	O
{	O
*	O
status	int
=	O
false	int
;	O
return	O
res	bool
;	O
}	O
break	O
;	O
}	O
case	O
REC_SEX_OP_EQL	int
:	O
{	O
int	O
op1	struct(int,int,double,*(char))
;	O
int	O
op2	struct(int,int,double,*(char))
;	O
double	O
op1_real	double
;	O
double	O
op2_real	double
;	O
GET_CHILD_VAL	O
(	O
child_val1	struct(int,int,double,*(char))
,	O
0	int
)	O
;	O
GET_CHILD_VAL	O
(	O
child_val2	struct(int,int,double,*(char))
,	O
1	int
)	O
;	O
if	O
(	O
(	O
child_val1	struct(int,int,double,*(char))
.	O
type	enum(int,int,int,int)
==	O
REC_SEX_VAL_STR	int
)	O
&&	O
(	O
child_val2	struct(int,int,double,*(char))
.	O
type	enum(int,int,int,int)
==	O
REC_SEX_VAL_STR	int
)	O
)	O
{	O
res	bool
.	O
type	enum(int,int,int,int)
=	O
REC_SEX_VAL_INT	int
;	O
if	O
(	O
rec_sex_parser_case_insensitive	(*(struct))->(bool)
(	O
sex	*(struct)
->	O
parser	*(struct)
)	O
)	O
{	O
res	bool
.	O
int_val	int
=	O
(	O
strcasecmp	(*(char),*(char))->(int)
(	O
child_val1	struct(int,int,double,*(char))
.	O
str_val	*(char)
,	O
child_val2	struct(int,int,double,*(char))
.	O
str_val	*(char)
)	O
==	O
0	int
)	O
;	O
}	O
else	O
{	O
res	bool
.	O
int_val	int
=	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
child_val1	struct(int,int,double,*(char))
.	O
str_val	*(char)
,	O
child_val2	struct(int,int,double,*(char))
.	O
str_val	*(char)
)	O
==	O
0	int
)	O
;	O
}	O
}	O
else	O
{	O
if	O
(	O
rec_sex_op_real_p	(struct(int,int,double,*(char)),struct(int,int,double,*(char)))->(bool)
(	O
child_val1	struct(int,int,double,*(char))
,	O
child_val2	struct(int,int,double,*(char))
)	O
)	O
{	O
ATOD_VAL	O
(	O
op1_real	double
,	O
child_val1	struct(int,int,double,*(char))
)	O
;	O
ATOD_VAL	O
(	O
op2_real	double
,	O
child_val2	struct(int,int,double,*(char))
)	O
;	O
res	bool
.	O
type	enum(int,int,int,int)
=	O
REC_SEX_VAL_INT	int
;	O
res	bool
.	O
int_val	int
=	O
op1_real	double
==	O
op2_real	double
;	O
}	O
else	O
{	O
ATOI_VAL	O
(	O
op1	struct(int,int,double,*(char))
,	O
child_val1	struct(int,int,double,*(char))
)	O
;	O
ATOI_VAL	O
(	O
op2	struct(int,int,double,*(char))
,	O
child_val2	struct(int,int,double,*(char))
)	O
;	O
res	bool
.	O
type	enum(int,int,int,int)
=	O
REC_SEX_VAL_INT	int
;	O
res	bool
.	O
int_val	int
=	O
op1	struct(int,int,double,*(char))
==	O
op2	struct(int,int,double,*(char))
;	O
}	O
}	O
break	O
;	O
}	O
case	O
REC_SEX_OP_NEQ	int
:	O
{	O
int	O
op1	struct(int,int,double,*(char))
;	O
int	O
op2	struct(int,int,double,*(char))
;	O
double	O
op1_real	double
;	O
double	O
op2_real	double
;	O
GET_CHILD_VAL	O
(	O
child_val1	struct(int,int,double,*(char))
,	O
0	int
)	O
;	O
GET_CHILD_VAL	O
(	O
child_val2	struct(int,int,double,*(char))
,	O
1	int
)	O
;	O
if	O
(	O
(	O
child_val1	struct(int,int,double,*(char))
.	O
type	enum(int,int,int,int)
==	O
REC_SEX_VAL_STR	int
)	O
&&	O
(	O
child_val2	struct(int,int,double,*(char))
.	O
type	enum(int,int,int,int)
==	O
REC_SEX_VAL_STR	int
)	O
)	O
{	O
res	bool
.	O
type	enum(int,int,int,int)
=	O
REC_SEX_VAL_INT	int
;	O
if	O
(	O
rec_sex_parser_case_insensitive	(*(struct))->(bool)
(	O
sex	*(struct)
->	O
parser	*(struct)
)	O
)	O
{	O
res	bool
.	O
int_val	int
=	O
(	O
strcasecmp	(*(char),*(char))->(int)
(	O
child_val1	struct(int,int,double,*(char))
.	O
str_val	*(char)
,	O
child_val2	struct(int,int,double,*(char))
.	O
str_val	*(char)
)	O
!=	O
0	int
)	O
;	O
}	O
else	O
{	O
res	bool
.	O
int_val	int
=	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
child_val1	struct(int,int,double,*(char))
.	O
str_val	*(char)
,	O
child_val2	struct(int,int,double,*(char))
.	O
str_val	*(char)
)	O
!=	O
0	int
)	O
;	O
}	O
}	O
else	O
{	O
if	O
(	O
rec_sex_op_real_p	(struct(int,int,double,*(char)),struct(int,int,double,*(char)))->(bool)
(	O
child_val1	struct(int,int,double,*(char))
,	O
child_val2	struct(int,int,double,*(char))
)	O
)	O
{	O
ATOD_VAL	O
(	O
op1_real	double
,	O
child_val1	struct(int,int,double,*(char))
)	O
;	O
ATOD_VAL	O
(	O
op2_real	double
,	O
child_val2	struct(int,int,double,*(char))
)	O
;	O
res	bool
.	O
type	enum(int,int,int,int)
=	O
REC_SEX_VAL_INT	int
;	O
res	bool
.	O
int_val	int
=	O
op1_real	double
!=	O
op2_real	double
;	O
}	O
else	O
{	O
ATOI_VAL	O
(	O
op1	struct(int,int,double,*(char))
,	O
child_val1	struct(int,int,double,*(char))
)	O
;	O
ATOI_VAL	O
(	O
op2	struct(int,int,double,*(char))
,	O
child_val2	struct(int,int,double,*(char))
)	O
;	O
res	bool
.	O
type	enum(int,int,int,int)
=	O
REC_SEX_VAL_INT	int
;	O
res	bool
.	O
int_val	int
=	O
op1	struct(int,int,double,*(char))
!=	O
op2	struct(int,int,double,*(char))
;	O
}	O
}	O
break	O
;	O
}	O
case	O
REC_SEX_OP_MAT	int
:	O
{	O
GET_CHILD_VAL	O
(	O
child_val1	struct(int,int,double,*(char))
,	O
0	int
)	O
;	O
GET_CHILD_VAL	O
(	O
child_val2	struct(int,int,double,*(char))
,	O
1	int
)	O
;	O
if	O
(	O
(	O
child_val1	struct(int,int,double,*(char))
.	O
type	enum(int,int,int,int)
==	O
REC_SEX_VAL_STR	int
)	O
&&	O
(	O
child_val2	struct(int,int,double,*(char))
.	O
type	enum(int,int,int,int)
==	O
REC_SEX_VAL_STR	int
)	O
)	O
{	O
res	bool
.	O
type	enum(int,int,int,int)
=	O
REC_SEX_VAL_INT	int
;	O
if	O
(	O
rec_sex_parser_case_insensitive	(*(struct))->(bool)
(	O
sex	*(struct)
->	O
parser	*(struct)
)	O
)	O
{	O
res	bool
.	O
int_val	int
=	O
rec_match_insensitive	(*(char),*(char))->(bool)
(	O
child_val1	struct(int,int,double,*(char))
.	O
str_val	*(char)
,	O
child_val2	struct(int,int,double,*(char))
.	O
str_val	*(char)
)	O
;	O
}	O
else	O
{	O
res	bool
.	O
int_val	int
=	O
rec_match	(*(char),*(char))->(bool)
(	O
child_val1	struct(int,int,double,*(char))
.	O
str_val	*(char)
,	O
child_val2	struct(int,int,double,*(char))
.	O
str_val	*(char)
)	O
;	O
}	O
}	O
else	O
{	O
*	O
status	int
=	O
false	int
;	O
return	O
res	bool
;	O
}	O
break	O
;	O
}	O
case	O
REC_SEX_OP_BEFORE	int
:	O
{	O
struct	O
timespec	struct(long,long)
op1	struct(int,int,double,*(char))
;	O
struct	O
timespec	struct(long,long)
op2	struct(int,int,double,*(char))
;	O
struct	O
timespec	struct(long,long)
diff	struct(long,long)
;	O
GET_CHILD_VAL	O
(	O
child_val1	struct(int,int,double,*(char))
,	O
0	int
)	O
;	O
GET_CHILD_VAL	O
(	O
child_val2	struct(int,int,double,*(char))
,	O
1	int
)	O
;	O
ATOTS_VAL	O
(	O
op1	struct(int,int,double,*(char))
,	O
child_val1	struct(int,int,double,*(char))
)	O
;	O
ATOTS_VAL	O
(	O
op2	struct(int,int,double,*(char))
,	O
child_val2	struct(int,int,double,*(char))
)	O
;	O
res	bool
.	O
type	enum(int,int,int,int)
=	O
REC_SEX_VAL_INT	int
;	O
res	bool
.	O
int_val	int
=	O
rec_timespec_subtract	(*(struct(long,long)),*(struct(long,long)),*(struct(long,long)))->(int)
(	O
&	O
diff	struct(long,long)
,	O
&	O
op1	struct(int,int,double,*(char))
,	O
&	O
op2	struct(int,int,double,*(char))
)	O
;	O
break	O
;	O
}	O
case	O
REC_SEX_OP_AFTER	int
:	O
{	O
struct	O
timespec	struct(long,long)
op1	struct(int,int,double,*(char))
;	O
struct	O
timespec	struct(long,long)
op2	struct(int,int,double,*(char))
;	O
struct	O
timespec	struct(long,long)
diff	struct(long,long)
;	O
GET_CHILD_VAL	O
(	O
child_val1	struct(int,int,double,*(char))
,	O
0	int
)	O
;	O
GET_CHILD_VAL	O
(	O
child_val2	struct(int,int,double,*(char))
,	O
1	int
)	O
;	O
ATOTS_VAL	O
(	O
op1	struct(int,int,double,*(char))
,	O
child_val1	struct(int,int,double,*(char))
)	O
;	O
ATOTS_VAL	O
(	O
op2	struct(int,int,double,*(char))
,	O
child_val2	struct(int,int,double,*(char))
)	O
;	O
res	bool
.	O
type	enum(int,int,int,int)
=	O
REC_SEX_VAL_INT	int
;	O
res	bool
.	O
int_val	int
=	O
(	O
!	O
rec_timespec_subtract	(*(struct(long,long)),*(struct(long,long)),*(struct(long,long)))->(int)
(	O
&	O
diff	struct(long,long)
,	O
&	O
op1	struct(int,int,double,*(char))
,	O
&	O
op2	struct(int,int,double,*(char))
)	O
&&	O
(	O
(	O
diff	struct(long,long)
.	O
tv_sec	long
!=	O
0	int
)	O
||	O
(	O
diff	struct(long,long)
.	O
tv_nsec	long
!=	O
0	int
)	O
)	O
)	O
;	O
break	O
;	O
}	O
case	O
REC_SEX_OP_SAMETIME	int
:	O
{	O
struct	O
timespec	struct(long,long)
op1	struct(int,int,double,*(char))
;	O
struct	O
timespec	struct(long,long)
op2	struct(int,int,double,*(char))
;	O
struct	O
timespec	struct(long,long)
diff	struct(long,long)
;	O
GET_CHILD_VAL	O
(	O
child_val1	struct(int,int,double,*(char))
,	O
0	int
)	O
;	O
GET_CHILD_VAL	O
(	O
child_val2	struct(int,int,double,*(char))
,	O
1	int
)	O
;	O
ATOTS_VAL	O
(	O
op1	struct(int,int,double,*(char))
,	O
child_val1	struct(int,int,double,*(char))
)	O
;	O
ATOTS_VAL	O
(	O
op2	struct(int,int,double,*(char))
,	O
child_val2	struct(int,int,double,*(char))
)	O
;	O
rec_timespec_subtract	(*(struct(long,long)),*(struct(long,long)),*(struct(long,long)))->(int)
(	O
&	O
diff	struct(long,long)
,	O
&	O
op1	struct(int,int,double,*(char))
,	O
&	O
op2	struct(int,int,double,*(char))
)	O
;	O
res	bool
.	O
type	enum(int,int,int,int)
=	O
REC_SEX_VAL_INT	int
;	O
res	bool
.	O
int_val	int
=	O
(	O
(	O
diff	struct(long,long)
.	O
tv_sec	long
==	O
0	int
)	O
&&	O
(	O
diff	struct(long,long)
.	O
tv_nsec	long
==	O
0	int
)	O
)	O
;	O
break	O
;	O
}	O
case	O
REC_SEX_OP_IMPLIES	int
:	O
{	O
int	O
op1	struct(int,int,double,*(char))
;	O
int	O
op2	struct(int,int,double,*(char))
;	O
GET_CHILD_VAL	O
(	O
child_val1	struct(int,int,double,*(char))
,	O
0	int
)	O
;	O
GET_CHILD_VAL	O
(	O
child_val2	struct(int,int,double,*(char))
,	O
1	int
)	O
;	O
ATOI_VAL	O
(	O
op1	struct(int,int,double,*(char))
,	O
child_val1	struct(int,int,double,*(char))
)	O
;	O
ATOI_VAL	O
(	O
op2	struct(int,int,double,*(char))
,	O
child_val2	struct(int,int,double,*(char))
)	O
;	O
res	bool
.	O
type	enum(int,int,int,int)
=	O
REC_SEX_VAL_INT	int
;	O
res	bool
.	O
int_val	int
=	O
!	O
op1	struct(int,int,double,*(char))
||	O
(	O
op1	struct(int,int,double,*(char))
&&	O
op2	struct(int,int,double,*(char))
)	O
;	O
break	O
;	O
}	O
case	O
REC_SEX_OP_LT	int
:	O
case	O
REC_SEX_OP_LTE	int
:	O
{	O
int	O
op1	struct(int,int,double,*(char))
;	O
int	O
op2	struct(int,int,double,*(char))
;	O
double	O
op1_real	double
;	O
double	O
op2_real	double
;	O
GET_CHILD_VAL	O
(	O
child_val1	struct(int,int,double,*(char))
,	O
0	int
)	O
;	O
GET_CHILD_VAL	O
(	O
child_val2	struct(int,int,double,*(char))
,	O
1	int
)	O
;	O
if	O
(	O
rec_sex_op_real_p	(struct(int,int,double,*(char)),struct(int,int,double,*(char)))->(bool)
(	O
child_val1	struct(int,int,double,*(char))
,	O
child_val2	struct(int,int,double,*(char))
)	O
)	O
{	O
ATOD_VAL	O
(	O
op1_real	double
,	O
child_val1	struct(int,int,double,*(char))
)	O
;	O
ATOD_VAL	O
(	O
op2_real	double
,	O
child_val2	struct(int,int,double,*(char))
)	O
;	O
res	bool
.	O
type	enum(int,int,int,int)
=	O
REC_SEX_VAL_INT	int
;	O
if	O
(	O
rec_sex_ast_node_type	(*(struct))->(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int))
(	O
node	*(struct)
)	O
==	O
REC_SEX_OP_LT	int
)	O
{	O
res	bool
.	O
int_val	int
=	O
op1_real	double
<	O
op2_real	double
;	O
}	O
else	O
{	O
res	bool
.	O
int_val	int
=	O
op1_real	double
<=	O
op2_real	double
;	O
}	O
}	O
else	O
{	O
ATOI_VAL	O
(	O
op1	struct(int,int,double,*(char))
,	O
child_val1	struct(int,int,double,*(char))
)	O
;	O
ATOI_VAL	O
(	O
op2	struct(int,int,double,*(char))
,	O
child_val2	struct(int,int,double,*(char))
)	O
;	O
res	bool
.	O
type	enum(int,int,int,int)
=	O
REC_SEX_VAL_INT	int
;	O
if	O
(	O
rec_sex_ast_node_type	(*(struct))->(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int))
(	O
node	*(struct)
)	O
==	O
REC_SEX_OP_LT	int
)	O
{	O
res	bool
.	O
int_val	int
=	O
op1	struct(int,int,double,*(char))
<	O
op2	struct(int,int,double,*(char))
;	O
}	O
else	O
{	O
res	bool
.	O
int_val	int
=	O
op1	struct(int,int,double,*(char))
<=	O
op2	struct(int,int,double,*(char))
;	O
}	O
}	O
break	O
;	O
}	O
case	O
REC_SEX_OP_GT	int
:	O
case	O
REC_SEX_OP_GTE	int
:	O
{	O
int	O
op1	struct(int,int,double,*(char))
;	O
int	O
op2	struct(int,int,double,*(char))
;	O
double	O
op1_real	double
;	O
double	O
op2_real	double
;	O
GET_CHILD_VAL	O
(	O
child_val1	struct(int,int,double,*(char))
,	O
0	int
)	O
;	O
GET_CHILD_VAL	O
(	O
child_val2	struct(int,int,double,*(char))
,	O
1	int
)	O
;	O
if	O
(	O
rec_sex_op_real_p	(struct(int,int,double,*(char)),struct(int,int,double,*(char)))->(bool)
(	O
child_val1	struct(int,int,double,*(char))
,	O
child_val2	struct(int,int,double,*(char))
)	O
)	O
{	O
ATOD_VAL	O
(	O
op1_real	double
,	O
child_val1	struct(int,int,double,*(char))
)	O
;	O
ATOD_VAL	O
(	O
op2_real	double
,	O
child_val2	struct(int,int,double,*(char))
)	O
;	O
res	bool
.	O
type	enum(int,int,int,int)
=	O
REC_SEX_VAL_INT	int
;	O
if	O
(	O
rec_sex_ast_node_type	(*(struct))->(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int))
(	O
node	*(struct)
)	O
==	O
REC_SEX_OP_GT	int
)	O
{	O
res	bool
.	O
int_val	int
=	O
op1_real	double
>	O
op2_real	double
;	O
}	O
else	O
{	O
res	bool
.	O
int_val	int
=	O
op1_real	double
>=	O
op2_real	double
;	O
}	O
}	O
else	O
{	O
ATOI_VAL	O
(	O
op1	struct(int,int,double,*(char))
,	O
child_val1	struct(int,int,double,*(char))
)	O
;	O
ATOI_VAL	O
(	O
op2	struct(int,int,double,*(char))
,	O
child_val2	struct(int,int,double,*(char))
)	O
;	O
res	bool
.	O
type	enum(int,int,int,int)
=	O
REC_SEX_VAL_INT	int
;	O
if	O
(	O
rec_sex_ast_node_type	(*(struct))->(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int))
(	O
node	*(struct)
)	O
==	O
REC_SEX_OP_GT	int
)	O
{	O
res	bool
.	O
int_val	int
=	O
op1	struct(int,int,double,*(char))
>	O
op2	struct(int,int,double,*(char))
;	O
}	O
else	O
{	O
res	bool
.	O
int_val	int
=	O
op1	struct(int,int,double,*(char))
>=	O
op2	struct(int,int,double,*(char))
;	O
}	O
}	O
break	O
;	O
}	O
case	O
REC_SEX_OP_AND	int
:	O
{	O
int	O
op1	struct(int,int,double,*(char))
;	O
int	O
op2	struct(int,int,double,*(char))
;	O
GET_CHILD_VAL	O
(	O
child_val1	struct(int,int,double,*(char))
,	O
0	int
)	O
;	O
GET_CHILD_VAL	O
(	O
child_val2	struct(int,int,double,*(char))
,	O
1	int
)	O
;	O
ATOI_VAL	O
(	O
op1	struct(int,int,double,*(char))
,	O
child_val1	struct(int,int,double,*(char))
)	O
;	O
ATOI_VAL	O
(	O
op2	struct(int,int,double,*(char))
,	O
child_val2	struct(int,int,double,*(char))
)	O
;	O
res	bool
.	O
type	enum(int,int,int,int)
=	O
REC_SEX_VAL_INT	int
;	O
res	bool
.	O
int_val	int
=	O
op1	struct(int,int,double,*(char))
&&	O
op2	struct(int,int,double,*(char))
;	O
break	O
;	O
}	O
case	O
REC_SEX_OP_OR	int
:	O
{	O
int	O
op1	struct(int,int,double,*(char))
;	O
int	O
op2	struct(int,int,double,*(char))
;	O
GET_CHILD_VAL	O
(	O
child_val1	struct(int,int,double,*(char))
,	O
0	int
)	O
;	O
GET_CHILD_VAL	O
(	O
child_val2	struct(int,int,double,*(char))
,	O
1	int
)	O
;	O
ATOI_VAL	O
(	O
op1	struct(int,int,double,*(char))
,	O
child_val1	struct(int,int,double,*(char))
)	O
;	O
ATOI_VAL	O
(	O
op2	struct(int,int,double,*(char))
,	O
child_val2	struct(int,int,double,*(char))
)	O
;	O
res	bool
.	O
type	enum(int,int,int,int)
=	O
REC_SEX_VAL_INT	int
;	O
res	bool
.	O
int_val	int
=	O
op1	struct(int,int,double,*(char))
||	O
op2	struct(int,int,double,*(char))
;	O
break	O
;	O
}	O
case	O
REC_SEX_OP_CONCAT	int
:	O
{	O
size_t	long
str1_size	long
;	O
size_t	long
str2_size	long
;	O
GET_CHILD_VAL	O
(	O
child_val1	struct(int,int,double,*(char))
,	O
0	int
)	O
;	O
GET_CHILD_VAL	O
(	O
child_val2	struct(int,int,double,*(char))
,	O
1	int
)	O
;	O
if	O
(	O
(	O
child_val1	struct(int,int,double,*(char))
.	O
type	enum(int,int,int,int)
==	O
REC_SEX_VAL_STR	int
)	O
&&	O
(	O
child_val2	struct(int,int,double,*(char))
.	O
type	enum(int,int,int,int)
==	O
REC_SEX_VAL_STR	int
)	O
)	O
{	O
str1_size	long
=	O
strlen	(*(char))->(long)
(	O
child_val1	struct(int,int,double,*(char))
.	O
str_val	*(char)
)	O
;	O
str2_size	long
=	O
strlen	(*(char))->(long)
(	O
child_val2	struct(int,int,double,*(char))
.	O
str_val	*(char)
)	O
;	O
res	bool
.	O
type	enum(int,int,int,int)
=	O
REC_SEX_VAL_STR	int
;	O
res	bool
.	O
str_val	*(char)
=	O
malloc	(long)->(*(void))
(	O
str1_size	long
+	O
str2_size	long
+	O
1	int
)	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
res	bool
.	O
str_val	*(char)
,	O
child_val1	struct(int,int,double,*(char))
.	O
str_val	*(char)
,	O
str1_size	long
)	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
res	bool
.	O
str_val	*(char)
+	O
str1_size	long
,	O
child_val2	struct(int,int,double,*(char))
.	O
str_val	*(char)
,	O
str2_size	long
)	O
;	O
res	bool
.	O
str_val	*(char)
[	O
str1_size	long
+	O
str2_size	long
]	O
=	O
'\0'	O
;	O
}	O
else	O
{	O
*	O
status	int
=	O
false	int
;	O
return	O
res	bool
;	O
}	O
break	O
;	O
}	O
case	O
REC_SEX_OP_NOT	int
:	O
{	O
int	O
op	int
;	O
GET_CHILD_VAL	O
(	O
child_val1	struct(int,int,double,*(char))
,	O
0	int
)	O
;	O
ATOI_VAL	O
(	O
op	int
,	O
child_val1	struct(int,int,double,*(char))
)	O
;	O
res	bool
.	O
type	enum(int,int,int,int)
=	O
REC_SEX_VAL_INT	int
;	O
res	bool
.	O
int_val	int
=	O
!	O
op	int
;	O
break	O
;	O
}	O
case	O
REC_SEX_OP_SHA	int
:	O
{	O
int	O
n	int
;	O
const	O
char	O
*	O
field_name	*(char)
=	O
NULL	O
;	O
const	O
char	O
*	O
field_subname	*(char)
=	O
NULL	O
;	O
rec_sex_ast_node_t	*(struct)
child	*(struct)
;	O
child	*(struct)
=	O
rec_sex_ast_node_child	(*(struct),int)->(*(struct))
(	O
node	*(struct)
,	O
0	int
)	O
;	O
if	O
(	O
rec_sex_ast_node_type	(*(struct))->(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int))
(	O
rec_sex_ast_node_child	(*(struct),int)->(*(struct))
(	O
node	*(struct)
,	O
0	int
)	O
)	O
!=	O
REC_SEX_NAME	int
)	O
{	O
*	O
status	int
=	O
false	int
;	O
return	O
res	bool
;	O
}	O
field_name	*(char)
=	O
rec_sex_ast_node_name	(*(struct))->(*(char))
(	O
child	*(struct)
)	O
;	O
field_subname	*(char)
=	O
rec_sex_ast_node_subname	(*(struct))->(*(char))
(	O
child	*(struct)
)	O
;	O
if	O
(	O
field_subname	*(char)
)	O
{	O
char	O
*	O
effective_name	*(char)
=	O
rec_concat_strings	(*(char),*(char),*(char))->(*(char))
(	O
field_name	*(char)
,	O
"_"	*(char)
,	O
field_subname	*(char)
)	O
;	O
n	int
=	O
rec_record_get_num_fields_by_name	(*(struct),*(char))->(long)
(	O
record	*(struct)
,	O
effective_name	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
effective_name	*(char)
)	O
;	O
}	O
else	O
{	O
n	int
=	O
rec_record_get_num_fields_by_name	(*(struct),*(char))->(long)
(	O
record	*(struct)
,	O
field_name	*(char)
)	O
;	O
}	O
res	bool
.	O
type	enum(int,int,int,int)
=	O
REC_SEX_VAL_INT	int
;	O
res	bool
.	O
int_val	int
=	O
n	int
;	O
break	O
;	O
}	O
case	O
REC_SEX_OP_COND	int
:	O
{	O
int	O
op1	struct(int,int,double,*(char))
;	O
GET_CHILD_VAL	O
(	O
child_val1	struct(int,int,double,*(char))
,	O
0	int
)	O
;	O
GET_CHILD_VAL	O
(	O
child_val2	struct(int,int,double,*(char))
,	O
1	int
)	O
;	O
GET_CHILD_VAL	O
(	O
child_val3	struct(int,int,double,*(char))
,	O
2	int
)	O
;	O
ATOI_VAL	O
(	O
op1	struct(int,int,double,*(char))
,	O
child_val1	struct(int,int,double,*(char))
)	O
;	O
if	O
(	O
op1	struct(int,int,double,*(char))
)	O
{	O
res	bool
=	O
child_val2	struct(int,int,double,*(char))
;	O
}	O
else	O
{	O
res	bool
=	O
child_val3	struct(int,int,double,*(char))
;	O
}	O
break	O
;	O
}	O
case	O
REC_SEX_INT	int
:	O
{	O
res	bool
.	O
type	enum(int,int,int,int)
=	O
REC_SEX_VAL_INT	int
;	O
res	bool
.	O
int_val	int
=	O
rec_sex_ast_node_int	(*(struct))->(int)
(	O
node	*(struct)
)	O
;	O
break	O
;	O
}	O
case	O
REC_SEX_REAL	int
:	O
{	O
res	bool
.	O
type	enum(int,int,int,int)
=	O
REC_SEX_VAL_REAL	int
;	O
res	bool
.	O
real_val	double
=	O
rec_sex_ast_node_real	(*(struct))->(double)
(	O
node	*(struct)
)	O
;	O
break	O
;	O
}	O
case	O
REC_SEX_STR	int
:	O
{	O
res	bool
.	O
type	enum(int,int,int,int)
=	O
REC_SEX_VAL_STR	int
;	O
res	bool
.	O
str_val	*(char)
=	O
rec_sex_ast_node_str	(*(struct))->(*(char))
(	O
node	*(struct)
)	O
;	O
break	O
;	O
}	O
case	O
REC_SEX_NAME	int
:	O
{	O
rec_field_t	*(struct)
field	*(struct)
;	O
const	O
char	O
*	O
field_name	*(char)
;	O
const	O
char	O
*	O
field_subname	*(char)
;	O
int	O
index	(*(char),int)->(*(char))
;	O
bool	bool
tofix	bool
;	O
if	O
(	O
rec_sex_ast_node_fixed	(*(struct))->(bool)
(	O
node	*(struct)
)	O
)	O
{	O
res	bool
.	O
type	enum(int,int,int,int)
=	O
REC_SEX_VAL_STR	int
;	O
res	bool
.	O
str_val	*(char)
=	O
rec_sex_ast_node_fixed_val	(*(struct))->(*(char))
(	O
node	*(struct)
)	O
;	O
}	O
else	O
{	O
field_name	*(char)
=	O
rec_sex_ast_node_name	(*(struct))->(*(char))
(	O
node	*(struct)
)	O
;	O
field_subname	*(char)
=	O
rec_sex_ast_node_subname	(*(struct))->(*(char))
(	O
node	*(struct)
)	O
;	O
index	(*(char),int)->(*(char))
=	O
rec_sex_ast_node_index	(*(struct))->(int)
(	O
node	*(struct)
)	O
;	O
tofix	bool
=	O
(	O
index	(*(char),int)->(*(char))
!=	O
-	O
1	int
)	O
;	O
if	O
(	O
index	(*(char),int)->(*(char))
==	O
-	O
1	int
)	O
{	O
index	(*(char),int)->(*(char))
=	O
0	int
;	O
}	O
{	O
if	O
(	O
field_subname	*(char)
)	O
{	O
char	O
*	O
effective_field_name	*(char)
=	O
malloc	(long)->(*(void))
(	O
sizeof	O
(	O
char	O
)	O
*	O
(	O
strlen	(*(char))->(long)
(	O
field_name	*(char)
)	O
+	O
strlen	(*(char))->(long)
(	O
field_subname	*(char)
)	O
+	O
2	int
)	O
)	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
effective_field_name	*(char)
,	O
field_name	*(char)
,	O
strlen	(*(char))->(long)
(	O
field_name	*(char)
)	O
)	O
;	O
effective_field_name	*(char)
[	O
strlen	(*(char))->(long)
(	O
field_name	*(char)
)	O
]	O
=	O
'_'	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
effective_field_name	*(char)
+	O
strlen	(*(char))->(long)
(	O
field_name	*(char)
)	O
+	O
1	int
,	O
field_subname	*(char)
,	O
strlen	(*(char))->(long)
(	O
field_subname	*(char)
)	O
+	O
1	int
)	O
;	O
field	*(struct)
=	O
rec_record_get_field_by_name	(*(struct),*(char),long)->(*(struct))
(	O
record	*(struct)
,	O
effective_field_name	*(char)
,	O
index	(*(char),int)->(*(char))
)	O
;	O
}	O
else	O
{	O
field	*(struct)
=	O
rec_record_get_field_by_name	(*(struct),*(char),long)->(*(struct))
(	O
record	*(struct)
,	O
field_name	*(char)
,	O
index	(*(char),int)->(*(char))
)	O
;	O
}	O
}	O
res	bool
.	O
type	enum(int,int,int,int)
=	O
REC_SEX_VAL_STR	int
;	O
if	O
(	O
field	*(struct)
)	O
{	O
res	bool
.	O
str_val	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
rec_field_value	(*(struct))->(*(char))
(	O
field	*(struct)
)	O
)	O
;	O
}	O
else	O
{	O
res	bool
.	O
str_val	*(char)
=	O
""	*(char)
;	O
}	O
if	O
(	O
tofix	bool
)	O
{	O
rec_sex_ast_node_fix	(*(struct),*(char))->(void)
(	O
node	*(struct)
,	O
res	bool
.	O
str_val	*(char)
)	O
;	O
}	O
}	O
break	O
;	O
}	O
}	O
return	O
res	bool
;	O
}	O
static	O
bool	bool
rec_sex_op_real_p	(struct(int,int,double,*(char)),struct(int,int,double,*(char)))->(bool)
(	O
struct	O
rec_sex_val_s	struct(int,int,double,*(char))
op1	struct(int,int,double,*(char))
,	O
struct	O
rec_sex_val_s	struct(int,int,double,*(char))
op2	struct(int,int,double,*(char))
)	O
{	O
bool	bool
ret	bool
;	O
int	O
integer	int
;	O
double	O
real	double
;	O
ret	bool
=	O
true	int
;	O
if	O
(	O
(	O
op1	struct(int,int,double,*(char))
.	O
type	enum(int,int,int,int)
==	O
REC_SEX_VAL_INT	int
)	O
||	O
(	O
(	O
op1	struct(int,int,double,*(char))
.	O
type	enum(int,int,int,int)
==	O
REC_SEX_VAL_STR	int
)	O
&&	O
rec_atoi	(*(char),*(int))->(bool)
(	O
op1	struct(int,int,double,*(char))
.	O
str_val	*(char)
,	O
&	O
integer	int
)	O
)	O
)	O
{	O
switch	O
(	O
op2	struct(int,int,double,*(char))
.	O
type	enum(int,int,int,int)
)	O
{	O
case	O
REC_SEX_VAL_INT	int
:	O
{	O
ret	bool
=	O
false	int
;	O
break	O
;	O
}	O
case	O
REC_SEX_VAL_REAL	int
:	O
{	O
ret	bool
=	O
true	int
;	O
break	O
;	O
}	O
case	O
REC_SEX_VAL_STR	int
:	O
{	O
ret	bool
=	O
(	O
rec_atod	(*(char),*(double))->(bool)
(	O
op2	struct(int,int,double,*(char))
.	O
str_val	*(char)
,	O
&	O
real	double
)	O
&&	O
(	O
!	O
rec_atoi	(*(char),*(int))->(bool)
(	O
op2	struct(int,int,double,*(char))
.	O
str_val	*(char)
,	O
&	O
integer	int
)	O
)	O
)	O
;	O
break	O
;	O
}	O
default	O
:	O
{	O
ret	bool
=	O
false	int
;	O
break	O
;	O
}	O
}	O
}	O
if	O
(	O
(	O
op1	struct(int,int,double,*(char))
.	O
type	enum(int,int,int,int)
==	O
REC_SEX_VAL_REAL	int
)	O
||	O
(	O
(	O
op1	struct(int,int,double,*(char))
.	O
type	enum(int,int,int,int)
==	O
REC_SEX_VAL_STR	int
)	O
&&	O
rec_atod	(*(char),*(double))->(bool)
(	O
op1	struct(int,int,double,*(char))
.	O
str_val	*(char)
,	O
&	O
real	double
)	O
&&	O
(	O
!	O
rec_atoi	(*(char),*(int))->(bool)
(	O
op1	struct(int,int,double,*(char))
.	O
str_val	*(char)
,	O
&	O
integer	int
)	O
)	O
)	O
)	O
{	O
switch	O
(	O
op2	struct(int,int,double,*(char))
.	O
type	enum(int,int,int,int)
)	O
{	O
case	O
REC_SEX_VAL_INT	int
:	O
{	O
ret	bool
=	O
true	int
;	O
break	O
;	O
}	O
case	O
REC_SEX_VAL_REAL	int
:	O
{	O
ret	bool
=	O
true	int
;	O
break	O
;	O
}	O
case	O
REC_SEX_VAL_STR	int
:	O
{	O
ret	bool
=	O
rec_atod	(*(char),*(double))->(bool)
(	O
op2	struct(int,int,double,*(char))
.	O
str_val	*(char)
,	O
&	O
real	double
)	O
;	O
break	O
;	O
}	O
default	O
:	O
{	O
ret	bool
=	O
false	int
;	O
break	O
;	O
}	O
}	O
}	O
return	O
ret	bool
;	O
}	O
