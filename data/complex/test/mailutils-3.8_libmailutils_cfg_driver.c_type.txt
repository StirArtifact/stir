static	O
mu_assoc_t	*(struct)
section_tab	*(struct)
;	O
static	O
void	O
alloc_section_tab	()->(void)
(	O
)	O
{	O
if	O
(	O
!	O
section_tab	*(struct)
)	O
mu_assoc_create	(*(*(struct)),int)->(int)
(	O
&	O
section_tab	*(struct)
,	O
MU_ASSOC_COPY_KEY	int
)	O
;	O
}	O
int	O
mu_create_canned_section	(*(char),*(*(struct(*(char),*(char),*((enum(int,int),*`,*`,*`,*`,*`)->(int)),*(void),long,*(struct`),*(char),*(void)))))->(int)
(	O
char	O
*	O
name	*(char)
,	O
struct	O
mu_cfg_section	int
*	O
*	O
psection	*(*(struct(*(char),*(char),*((enum(int,int),*`,*`,*`,*`,*`)->(int)),*(void),long,*(struct),*(char),*(void))))
)	O
{	O
int	O
rc	int
;	O
struct	O
mu_cfg_cont	struct(enum(int,int),*(struct),union(*(char),struct(*(char),*(char),*((enum(int,int),*(struct`),*(char),*(*`),*(void),*(struct`))->(int)),*(void),long,*(struct),*(char),*(void)),struct(*(char),int,*(void),long,*((*(void),*(struct`))->(int)),*(char),*(char))))
*	O
*	O
pcont	*(*(struct(enum(int,int),*(struct),union(*(char),struct(*`,*`,*`,*`,long,*`,*`,*`),struct(*`,int,*`,long,*`,*`,*`)))))
;	O
alloc_section_tab	()->(void)
(	O
)	O
;	O
rc	int
=	O
mu_assoc_install_ref	(*(struct),*(char),*(void))->(int)
(	O
section_tab	*(struct)
,	O
name	*(char)
,	O
&	O
pcont	*(*(struct(enum(int,int),*(struct),union(*(char),struct(*`,*`,*`,*`,long,*`,*`,*`),struct(*`,int,*`,long,*`,*`,*`)))))
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
mu_config_create_container	(*(*(struct(enum(int,int),*(struct`),union(*`,struct`,struct`)))),enum(int,int))->(int)
(	O
pcont	*(*(struct(enum(int,int),*(struct),union(*(char),struct(*`,*`,*`,*`,long,*`,*`,*`),struct(*`,int,*`,long,*`,*`,*`)))))
,	O
mu_cfg_cont_section	int
)	O
;	O
*	O
psection	*(*(struct(*(char),*(char),*((enum(int,int),*`,*`,*`,*`,*`)->(int)),*(void),long,*(struct),*(char),*(void))))
=	O
&	O
(	O
*	O
pcont	*(*(struct(enum(int,int),*(struct),union(*(char),struct(*`,*`,*`,*`,long,*`,*`,*`),struct(*`,int,*`,long,*`,*`,*`)))))
)	O
->	O
v	*(struct(int))
.	O
section	struct(*(char),*(char),*((enum(int,int),*(struct(struct`,enum(int,int,int),*`,*`,*`,*`)),*(char),*(*(void)),*(void),*(struct(*`,*`)))->(int)),*(void),long,*(struct),*(char),*(void))
;	O
(	O
*	O
psection	*(*(struct(*(char),*(char),*((enum(int,int),*`,*`,*`,*`,*`)->(int)),*(void),long,*(struct),*(char),*(void))))
)	O
->	O
ident	*(char)
=	O
name	*(char)
;	O
}	O
else	O
if	O
(	O
rc	int
==	O
MU_ERR_EXISTS	O
)	O
*	O
psection	*(*(struct(*(char),*(char),*((enum(int,int),*`,*`,*`,*`,*`)->(int)),*(void),long,*(struct),*(char),*(void))))
=	O
&	O
(	O
*	O
pcont	*(*(struct(enum(int,int),*(struct),union(*(char),struct(*`,*`,*`,*`,long,*`,*`,*`),struct(*`,int,*`,long,*`,*`,*`)))))
)	O
->	O
v	*(struct(int))
.	O
section	struct(*(char),*(char),*((enum(int,int),*(struct(struct`,enum(int,int,int),*`,*`,*`,*`)),*(char),*(*(void)),*(void),*(struct(*`,*`)))->(int)),*(void),long,*(struct),*(char),*(void))
;	O
return	O
rc	int
;	O
}	O
int	O
mu_create_canned_param	(*(char),*(*(struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char)))))->(int)
(	O
char	O
*	O
name	*(char)
,	O
struct	O
mu_cfg_param	struct(*(char),int,*(void),long,*((*(void),*(struct(int,union(*`,*`,struct`))))->(int)),*(char),*(char))
*	O
*	O
pparam	*(*(struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char))))
)	O
{	O
int	O
rc	int
;	O
struct	O
mu_cfg_cont	struct(enum(int,int),*(struct),union(*(char),struct(*(char),*(char),*((enum(int,int),*(struct`),*(char),*(*`),*(void),*(struct`))->(int)),*(void),long,*(struct),*(char),*(void)),struct(*(char),int,*(void),long,*((*(void),*(struct`))->(int)),*(char),*(char))))
*	O
*	O
pcont	*(*(struct(enum(int,int),*(struct),union(*(char),struct(*`,*`,*`,*`,long,*`,*`,*`),struct(*`,int,*`,long,*`,*`,*`)))))
;	O
alloc_section_tab	()->(void)
(	O
)	O
;	O
rc	int
=	O
mu_assoc_install_ref	(*(struct),*(char),*(void))->(int)
(	O
section_tab	*(struct)
,	O
name	*(char)
,	O
&	O
pcont	*(*(struct(enum(int,int),*(struct),union(*(char),struct(*`,*`,*`,*`,long,*`,*`,*`),struct(*`,int,*`,long,*`,*`,*`)))))
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
mu_config_create_container	(*(*(struct(enum(int,int),*(struct`),union(*`,struct`,struct`)))),enum(int,int))->(int)
(	O
pcont	*(*(struct(enum(int,int),*(struct),union(*(char),struct(*`,*`,*`,*`,long,*`,*`,*`),struct(*`,int,*`,long,*`,*`,*`)))))
,	O
mu_cfg_cont_param	int
)	O
;	O
*	O
pparam	*(*(struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char))))
=	O
&	O
(	O
*	O
pcont	*(*(struct(enum(int,int),*(struct),union(*(char),struct(*`,*`,*`,*`,long,*`,*`,*`),struct(*`,int,*`,long,*`,*`,*`)))))
)	O
->	O
v	*(struct(int))
.	O
param	*(struct)
;	O
(	O
*	O
pparam	*(*(struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char))))
)	O
->	O
ident	*(char)
=	O
name	*(char)
;	O
}	O
else	O
if	O
(	O
rc	int
==	O
MU_ERR_EXISTS	O
)	O
*	O
pparam	*(*(struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char))))
=	O
&	O
(	O
*	O
pcont	*(*(struct(enum(int,int),*(struct),union(*(char),struct(*`,*`,*`,*`,long,*`,*`,*`),struct(*`,int,*`,long,*`,*`,*`)))))
)	O
->	O
v	*(struct(int))
.	O
param	*(struct)
;	O
return	O
rc	int
;	O
}	O
struct	O
mu_cfg_cont	struct(enum(int,int),*(struct),union(*(char),struct(*(char),*(char),*((enum(int,int),*(struct`),*(char),*(*`),*(void),*(struct`))->(int)),*(void),long,*(struct),*(char),*(void)),struct(*(char),int,*(void),long,*((*(void),*(struct`))->(int)),*(char),*(char))))
*	O
mu_get_canned_container	(*(char))->(*(struct(enum(int,int),*(struct),union(*(char),struct(*`,*`,*`,*`,long,*`,*`,*`),struct(*`,int,*`,long,*`,*`,*`)))))
(	O
const	O
char	O
*	O
name	*(char)
)	O
{	O
return	O
mu_assoc_get	(*(struct),*(char))->(*(void))
(	O
section_tab	*(struct)
,	O
name	*(char)
)	O
;	O
}	O
static	O
struct	O
mu_cfg_cont	struct(enum(int,int),*(struct),union(*(char),struct(*(char),*(char),*((enum(int,int),*(struct`),*(char),*(*`),*(void),*(struct`))->(int)),*(void),long,*(struct),*(char),*(void)),struct(*(char),int,*(void),long,*((*(void),*(struct`))->(int)),*(char),*(char))))
*	O
root_container	*(struct(enum(int,int),*(struct),union(*(char),struct(*(char),*(char),*((enum(int,int),*`,*`,*`,*`,*`)->(int)),*(void),long,*(struct`),*(char),*(void)),struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char)))))
;	O
int	O
mu_config_create_container	(*(*(struct(enum(int,int),*(struct`),union(*`,struct`,struct`)))),enum(int,int))->(int)
(	O
struct	O
mu_cfg_cont	struct(enum(int,int),*(struct),union(*(char),struct(*(char),*(char),*((enum(int,int),*(struct`),*(char),*(*`),*(void),*(struct`))->(int)),*(void),long,*(struct),*(char),*(void)),struct(*(char),int,*(void),long,*((*(void),*(struct`))->(int)),*(char),*(char))))
*	O
*	O
pcont	*(*(struct(enum(int,int),*(struct),union(*(char),struct(*`,*`,*`,*`,long,*`,*`,*`),struct(*`,int,*`,long,*`,*`,*`)))))
,	O
enum	O
mu_cfg_cont_type	enum(int,int)
type	enum(int,int,int,int)
)	O
{	O
struct	O
mu_cfg_cont	struct(enum(int,int),*(struct),union(*(char),struct(*(char),*(char),*((enum(int,int),*(struct`),*(char),*(*`),*(void),*(struct`))->(int)),*(void),long,*(struct),*(char),*(void)),struct(*(char),int,*(void),long,*((*(void),*(struct`))->(int)),*(char),*(char))))
*	O
cont	*(struct(enum(int,int),*(struct),union(*(char),struct(*(char),*(char),*((enum(int,int),*`,*`,*`,*`,*`)->(int)),*(void),long,*(struct`),*(char),*(void)),struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char)))))
;	O
int	O
rc	int
;	O
cont	*(struct(enum(int,int),*(struct),union(*(char),struct(*(char),*(char),*((enum(int,int),*`,*`,*`,*`,*`)->(int)),*(void),long,*(struct`),*(char),*(void)),struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char)))))
=	O
calloc	(long,long)->(*(void))
(	O
1	int
,	O
sizeof	O
(	O
*	O
cont	*(struct(enum(int,int),*(struct),union(*(char),struct(*(char),*(char),*((enum(int,int),*`,*`,*`,*`,*`)->(int)),*(void),long,*(struct`),*(char),*(void)),struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char)))))
)	O
)	O
;	O
if	O
(	O
!	O
cont	*(struct(enum(int,int),*(struct),union(*(char),struct(*(char),*(char),*((enum(int,int),*`,*`,*`,*`,*`)->(int)),*(void),long,*(struct`),*(char),*(void)),struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char)))))
)	O
return	O
ENOMEM	int
;	O
rc	int
=	O
mu_refcount_create	(*(*(struct)))->(int)
(	O
&	O
cont	*(struct(enum(int,int),*(struct),union(*(char),struct(*(char),*(char),*((enum(int,int),*`,*`,*`,*`,*`)->(int)),*(void),long,*(struct`),*(char),*(void)),struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char)))))
->	O
refcount	*(struct)
)	O
;	O
if	O
(	O
rc	int
)	O
free	(*(void))->(void)
(	O
cont	*(struct(enum(int,int),*(struct),union(*(char),struct(*(char),*(char),*((enum(int,int),*`,*`,*`,*`,*`)->(int)),*(void),long,*(struct`),*(char),*(void)),struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char)))))
)	O
;	O
else	O
{	O
cont	*(struct(enum(int,int),*(struct),union(*(char),struct(*(char),*(char),*((enum(int,int),*`,*`,*`,*`,*`)->(int)),*(void),long,*(struct`),*(char),*(void)),struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char)))))
->	O
type	enum(int,int,int,int)
=	O
type	enum(int,int,int,int)
;	O
*	O
pcont	*(*(struct(enum(int,int),*(struct),union(*(char),struct(*`,*`,*`,*`,long,*`,*`,*`),struct(*`,int,*`,long,*`,*`,*`)))))
=	O
cont	*(struct(enum(int,int),*(struct),union(*(char),struct(*(char),*(char),*((enum(int,int),*`,*`,*`,*`,*`)->(int)),*(void),long,*(struct`),*(char),*(void)),struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char)))))
;	O
}	O
return	O
rc	int
;	O
}	O
struct	O
dup_data	struct(*(struct(enum(int,int),*(struct),union(*(char),struct(*(char),*(char),*((enum(int,int),*`,*`,*`,*`,*`)->(int)),*(void),long,*(struct`),*(char),*(void)),struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char))))))
{	O
struct	O
mu_cfg_cont	struct(enum(int,int),*(struct),union(*(char),struct(*(char),*(char),*((enum(int,int),*(struct`),*(char),*(*`),*(void),*(struct`))->(int)),*(void),long,*(struct),*(char),*(void)),struct(*(char),int,*(void),long,*((*(void),*(struct`))->(int)),*(char),*(char))))
*	O
cont	*(struct(enum(int,int),*(struct),union(*(char),struct(*(char),*(char),*((enum(int,int),*`,*`,*`,*`,*`)->(int)),*(void),long,*(struct`),*(char),*(void)),struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char)))))
;	O
}	O
;	O
static	O
int	O
dup_container	(*(*(struct(enum(int,int),*(struct`),union(*`,struct`,struct`)))))->(int)
(	O
struct	O
mu_cfg_cont	struct(enum(int,int),*(struct),union(*(char),struct(*(char),*(char),*((enum(int,int),*(struct`),*(char),*(*`),*(void),*(struct`))->(int)),*(void),long,*(struct),*(char),*(void)),struct(*(char),int,*(void),long,*((*(void),*(struct`))->(int)),*(char),*(char))))
*	O
*	O
pcont	*(*(struct(enum(int,int),*(struct),union(*(char),struct(*`,*`,*`,*`,long,*`,*`,*`),struct(*`,int,*`,long,*`,*`,*`)))))
)	O
;	O
static	O
int	O
_dup_cont_action	(*(void),*(void))->(int)
(	O
void	O
*	O
item	*(void)
,	O
void	O
*	O
cbdata	*(void)
)	O
{	O
int	O
rc	int
;	O
struct	O
mu_cfg_cont	struct(enum(int,int),*(struct),union(*(char),struct(*(char),*(char),*((enum(int,int),*(struct`),*(char),*(*`),*(void),*(struct`))->(int)),*(void),long,*(struct),*(char),*(void)),struct(*(char),int,*(void),long,*((*(void),*(struct`))->(int)),*(char),*(char))))
*	O
cont	*(struct(enum(int,int),*(struct),union(*(char),struct(*(char),*(char),*((enum(int,int),*`,*`,*`,*`,*`)->(int)),*(void),long,*(struct`),*(char),*(void)),struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char)))))
=	O
item	*(void)
;	O
struct	O
dup_data	struct(*(struct(enum(int,int),*(struct),union(*(char),struct(*(char),*(char),*((enum(int,int),*`,*`,*`,*`,*`)->(int)),*(void),long,*(struct`),*(char),*(void)),struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char))))))
*	O
pdd	*(struct(*(struct(enum(int,int),*(struct`),union(*`,struct`,struct`)))))
=	O
cbdata	*(void)
;	O
rc	int
=	O
dup_container	(*(*(struct(enum(int,int),*(struct`),union(*`,struct`,struct`)))))->(int)
(	O
&	O
cont	*(struct(enum(int,int),*(struct),union(*(char),struct(*(char),*(char),*((enum(int,int),*`,*`,*`,*`,*`)->(int)),*(void),long,*(struct`),*(char),*(void)),struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char)))))
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
if	O
(	O
!	O
pdd	*(struct(*(struct(enum(int,int),*(struct`),union(*`,struct`,struct`)))))
->	O
cont	*(struct(enum(int,int),*(struct),union(*(char),struct(*(char),*(char),*((enum(int,int),*`,*`,*`,*`,*`)->(int)),*(void),long,*(struct`),*(char),*(void)),struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char)))))
->	O
v	*(struct(int))
.	O
section	struct(*(char),*(char),*((enum(int,int),*(struct(struct`,enum(int,int,int),*`,*`,*`,*`)),*(char),*(*(void)),*(void),*(struct(*`,*`)))->(int)),*(void),long,*(struct),*(char),*(void))
.	O
children	*(struct)
)	O
{	O
int	O
rc	int
=	O
mu_list_create	(*(*(struct)))->(int)
(	O
&	O
pdd	*(struct(*(struct(enum(int,int),*(struct`),union(*`,struct`,struct`)))))
->	O
cont	*(struct(enum(int,int),*(struct),union(*(char),struct(*(char),*(char),*((enum(int,int),*`,*`,*`,*`,*`)->(int)),*(void),long,*(struct`),*(char),*(void)),struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char)))))
->	O
v	*(struct(int))
.	O
section	struct(*(char),*(char),*((enum(int,int),*(struct(struct`,enum(int,int,int),*`,*`,*`,*`)),*(char),*(*(void)),*(void),*(struct(*`,*`)))->(int)),*(void),long,*(struct),*(char),*(void))
.	O
children	*(struct)
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
}	O
return	O
mu_list_append	(*(struct),*(void))->(int)
(	O
pdd	*(struct(*(struct(enum(int,int),*(struct`),union(*`,struct`,struct`)))))
->	O
cont	*(struct(enum(int,int),*(struct),union(*(char),struct(*(char),*(char),*((enum(int,int),*`,*`,*`,*`,*`)->(int)),*(void),long,*(struct`),*(char),*(void)),struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char)))))
->	O
v	*(struct(int))
.	O
section	struct(*(char),*(char),*((enum(int,int),*(struct(struct`,enum(int,int,int),*`,*`,*`,*`)),*(char),*(*(void)),*(void),*(struct(*`,*`)))->(int)),*(void),long,*(struct),*(char),*(void))
.	O
children	*(struct)
,	O
cont	*(struct(enum(int,int),*(struct),union(*(char),struct(*(char),*(char),*((enum(int,int),*`,*`,*`,*`,*`)->(int)),*(void),long,*(struct`),*(char),*(void)),struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char)))))
)	O
;	O
}	O
static	O
int	O
dup_container	(*(*(struct(enum(int,int),*(struct`),union(*`,struct`,struct`)))))->(int)
(	O
struct	O
mu_cfg_cont	struct(enum(int,int),*(struct),union(*(char),struct(*(char),*(char),*((enum(int,int),*(struct`),*(char),*(*`),*(void),*(struct`))->(int)),*(void),long,*(struct),*(char),*(void)),struct(*(char),int,*(void),long,*((*(void),*(struct`))->(int)),*(char),*(char))))
*	O
*	O
pcont	*(*(struct(enum(int,int),*(struct),union(*(char),struct(*`,*`,*`,*`,long,*`,*`,*`),struct(*`,int,*`,long,*`,*`,*`)))))
)	O
{	O
int	O
rc	int
;	O
struct	O
mu_cfg_cont	struct(enum(int,int),*(struct),union(*(char),struct(*(char),*(char),*((enum(int,int),*(struct`),*(char),*(*`),*(void),*(struct`))->(int)),*(void),long,*(struct),*(char),*(void)),struct(*(char),int,*(void),long,*((*(void),*(struct`))->(int)),*(char),*(char))))
*	O
newcont	*(struct(enum(int,int),*(struct),union(*(char),struct(*(char),*(char),*((enum(int,int),*`,*`,*`,*`,*`)->(int)),*(void),long,*(struct`),*(char),*(void)),struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char)))))
,	O
*	O
oldcont	*(struct(enum(int,int),*(struct),union(*(char),struct(*(char),*(char),*((enum(int,int),*`,*`,*`,*`,*`)->(int)),*(void),long,*(struct`),*(char),*(void)),struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char)))))
=	O
*	O
pcont	*(*(struct(enum(int,int),*(struct),union(*(char),struct(*`,*`,*`,*`,long,*`,*`,*`),struct(*`,int,*`,long,*`,*`,*`)))))
;	O
struct	O
dup_data	struct(*(struct(enum(int,int),*(struct),union(*(char),struct(*(char),*(char),*((enum(int,int),*`,*`,*`,*`,*`)->(int)),*(void),long,*(struct`),*(char),*(void)),struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char))))))
dd	struct(*(struct(enum(int,int),*(struct),union(*(char),struct(*`,*`,*`,*`,long,*`,*`,*`),struct(*`,int,*`,long,*`,*`,*`)))))
;	O
rc	int
=	O
mu_config_create_container	(*(*(struct(enum(int,int),*(struct`),union(*`,struct`,struct`)))),enum(int,int))->(int)
(	O
&	O
newcont	*(struct(enum(int,int),*(struct),union(*(char),struct(*(char),*(char),*((enum(int,int),*`,*`,*`,*`,*`)->(int)),*(void),long,*(struct`),*(char),*(void)),struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char)))))
,	O
oldcont	*(struct(enum(int,int),*(struct),union(*(char),struct(*(char),*(char),*((enum(int,int),*`,*`,*`,*`,*`)->(int)),*(void),long,*(struct`),*(char),*(void)),struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char)))))
->	O
type	enum(int,int,int,int)
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
dd	struct(*(struct(enum(int,int),*(struct),union(*(char),struct(*`,*`,*`,*`,long,*`,*`,*`),struct(*`,int,*`,long,*`,*`,*`)))))
.	O
cont	*(struct(enum(int,int),*(struct),union(*(char),struct(*(char),*(char),*((enum(int,int),*`,*`,*`,*`,*`)->(int)),*(void),long,*(struct`),*(char),*(void)),struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char)))))
=	O
newcont	*(struct(enum(int,int),*(struct),union(*(char),struct(*(char),*(char),*((enum(int,int),*`,*`,*`,*`,*`)->(int)),*(void),long,*(struct`),*(char),*(void)),struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char)))))
;	O
switch	O
(	O
oldcont	*(struct(enum(int,int),*(struct),union(*(char),struct(*(char),*(char),*((enum(int,int),*`,*`,*`,*`,*`)->(int)),*(void),long,*(struct`),*(char),*(void)),struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char)))))
->	O
type	enum(int,int,int,int)
)	O
{	O
case	O
mu_cfg_cont_section	int
:	O
newcont	*(struct(enum(int,int),*(struct),union(*(char),struct(*(char),*(char),*((enum(int,int),*`,*`,*`,*`,*`)->(int)),*(void),long,*(struct`),*(char),*(void)),struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char)))))
->	O
v	*(struct(int))
.	O
section	struct(*(char),*(char),*((enum(int,int),*(struct(struct`,enum(int,int,int),*`,*`,*`,*`)),*(char),*(*(void)),*(void),*(struct(*`,*`)))->(int)),*(void),long,*(struct),*(char),*(void))
.	O
ident	*(char)
=	O
oldcont	*(struct(enum(int,int),*(struct),union(*(char),struct(*(char),*(char),*((enum(int,int),*`,*`,*`,*`,*`)->(int)),*(void),long,*(struct`),*(char),*(void)),struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char)))))
->	O
v	*(struct(int))
.	O
section	struct(*(char),*(char),*((enum(int,int),*(struct(struct`,enum(int,int,int),*`,*`,*`,*`)),*(char),*(*(void)),*(void),*(struct(*`,*`)))->(int)),*(void),long,*(struct),*(char),*(void))
.	O
ident	*(char)
;	O
newcont	*(struct(enum(int,int),*(struct),union(*(char),struct(*(char),*(char),*((enum(int,int),*`,*`,*`,*`,*`)->(int)),*(void),long,*(struct`),*(char),*(void)),struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char)))))
->	O
v	*(struct(int))
.	O
section	struct(*(char),*(char),*((enum(int,int),*(struct(struct`,enum(int,int,int),*`,*`,*`,*`)),*(char),*(*(void)),*(void),*(struct(*`,*`)))->(int)),*(void),long,*(struct),*(char),*(void))
.	O
label	*(struct(int,union(*(struct),*(char),struct(long,*(struct`)))))
=	O
oldcont	*(struct(enum(int,int),*(struct),union(*(char),struct(*(char),*(char),*((enum(int,int),*`,*`,*`,*`,*`)->(int)),*(void),long,*(struct`),*(char),*(void)),struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char)))))
->	O
v	*(struct(int))
.	O
section	struct(*(char),*(char),*((enum(int,int),*(struct(struct`,enum(int,int,int),*`,*`,*`,*`)),*(char),*(*(void)),*(void),*(struct(*`,*`)))->(int)),*(void),long,*(struct),*(char),*(void))
.	O
label	*(struct(int,union(*(struct),*(char),struct(long,*(struct`)))))
;	O
newcont	*(struct(enum(int,int),*(struct),union(*(char),struct(*(char),*(char),*((enum(int,int),*`,*`,*`,*`,*`)->(int)),*(void),long,*(struct`),*(char),*(void)),struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char)))))
->	O
v	*(struct(int))
.	O
section	struct(*(char),*(char),*((enum(int,int),*(struct(struct`,enum(int,int,int),*`,*`,*`,*`)),*(char),*(*(void)),*(void),*(struct(*`,*`)))->(int)),*(void),long,*(struct),*(char),*(void))
.	O
parser	*((enum(int,int),*(struct(struct(struct`,struct`),enum(int,int,int),*(char),*(struct`),*(struct`),*(struct`))),*(char),*(*(void)),*(void),*(struct(*(struct`),*(struct`))))->(int))
=	O
oldcont	*(struct(enum(int,int),*(struct),union(*(char),struct(*(char),*(char),*((enum(int,int),*`,*`,*`,*`,*`)->(int)),*(void),long,*(struct`),*(char),*(void)),struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char)))))
->	O
v	*(struct(int))
.	O
section	struct(*(char),*(char),*((enum(int,int),*(struct(struct`,enum(int,int,int),*`,*`,*`,*`)),*(char),*(*(void)),*(void),*(struct(*`,*`)))->(int)),*(void),long,*(struct),*(char),*(void))
.	O
parser	*((enum(int,int),*(struct(struct(struct`,struct`),enum(int,int,int),*(char),*(struct`),*(struct`),*(struct`))),*(char),*(*(void)),*(void),*(struct(*(struct`),*(struct`))))->(int))
;	O
newcont	*(struct(enum(int,int),*(struct),union(*(char),struct(*(char),*(char),*((enum(int,int),*`,*`,*`,*`,*`)->(int)),*(void),long,*(struct`),*(char),*(void)),struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char)))))
->	O
v	*(struct(int))
.	O
section	struct(*(char),*(char),*((enum(int,int),*(struct(struct`,enum(int,int,int),*`,*`,*`,*`)),*(char),*(*(void)),*(void),*(struct(*`,*`)))->(int)),*(void),long,*(struct),*(char),*(void))
.	O
data	*(void)
=	O
oldcont	*(struct(enum(int,int),*(struct),union(*(char),struct(*(char),*(char),*((enum(int,int),*`,*`,*`,*`,*`)->(int)),*(void),long,*(struct`),*(char),*(void)),struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char)))))
->	O
v	*(struct(int))
.	O
section	struct(*(char),*(char),*((enum(int,int),*(struct(struct`,enum(int,int,int),*`,*`,*`,*`)),*(char),*(*(void)),*(void),*(struct(*`,*`)))->(int)),*(void),long,*(struct),*(char),*(void))
.	O
data	*(void)
;	O
newcont	*(struct(enum(int,int),*(struct),union(*(char),struct(*(char),*(char),*((enum(int,int),*`,*`,*`,*`,*`)->(int)),*(void),long,*(struct`),*(char),*(void)),struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char)))))
->	O
v	*(struct(int))
.	O
section	struct(*(char),*(char),*((enum(int,int),*(struct(struct`,enum(int,int,int),*`,*`,*`,*`)),*(char),*(*(void)),*(void),*(struct(*`,*`)))->(int)),*(void),long,*(struct),*(char),*(void))
.	O
offset	long
=	O
oldcont	*(struct(enum(int,int),*(struct),union(*(char),struct(*(char),*(char),*((enum(int,int),*`,*`,*`,*`,*`)->(int)),*(void),long,*(struct`),*(char),*(void)),struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char)))))
->	O
v	*(struct(int))
.	O
section	struct(*(char),*(char),*((enum(int,int),*(struct(struct`,enum(int,int,int),*`,*`,*`,*`)),*(char),*(*(void)),*(void),*(struct(*`,*`)))->(int)),*(void),long,*(struct),*(char),*(void))
.	O
offset	long
;	O
newcont	*(struct(enum(int,int),*(struct),union(*(char),struct(*(char),*(char),*((enum(int,int),*`,*`,*`,*`,*`)->(int)),*(void),long,*(struct`),*(char),*(void)),struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char)))))
->	O
v	*(struct(int))
.	O
section	struct(*(char),*(char),*((enum(int,int),*(struct(struct`,enum(int,int,int),*`,*`,*`,*`)),*(char),*(*(void)),*(void),*(struct(*`,*`)))->(int)),*(void),long,*(struct),*(char),*(void))
.	O
docstring	*(char)
=	O
oldcont	*(struct(enum(int,int),*(struct),union(*(char),struct(*(char),*(char),*((enum(int,int),*`,*`,*`,*`,*`)->(int)),*(void),long,*(struct`),*(char),*(void)),struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char)))))
->	O
v	*(struct(int))
.	O
section	struct(*(char),*(char),*((enum(int,int),*(struct(struct`,enum(int,int,int),*`,*`,*`,*`)),*(char),*(*(void)),*(void),*(struct(*`,*`)))->(int)),*(void),long,*(struct),*(char),*(void))
.	O
docstring	*(char)
;	O
newcont	*(struct(enum(int,int),*(struct),union(*(char),struct(*(char),*(char),*((enum(int,int),*`,*`,*`,*`,*`)->(int)),*(void),long,*(struct`),*(char),*(void)),struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char)))))
->	O
v	*(struct(int))
.	O
section	struct(*(char),*(char),*((enum(int,int),*(struct(struct`,enum(int,int,int),*`,*`,*`,*`)),*(char),*(*(void)),*(void),*(struct(*`,*`)))->(int)),*(void),long,*(struct),*(char),*(void))
.	O
children	*(struct)
=	O
NULL	O
;	O
rc	int
=	O
mu_list_foreach	(*(struct),*((*(void),*(void))->(int)),*(void))->(int)
(	O
oldcont	*(struct(enum(int,int),*(struct),union(*(char),struct(*(char),*(char),*((enum(int,int),*`,*`,*`,*`,*`)->(int)),*(void),long,*(struct`),*(char),*(void)),struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char)))))
->	O
v	*(struct(int))
.	O
section	struct(*(char),*(char),*((enum(int,int),*(struct(struct`,enum(int,int,int),*`,*`,*`,*`)),*(char),*(*(void)),*(void),*(struct(*`,*`)))->(int)),*(void),long,*(struct),*(char),*(void))
.	O
children	*(struct)
,	O
_dup_cont_action	(*(void),*(void))->(int)
,	O
&	O
dd	struct(*(struct(enum(int,int),*(struct),union(*(char),struct(*`,*`,*`,*`,long,*`,*`,*`),struct(*`,int,*`,long,*`,*`,*`)))))
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_diag_funcall	(int,*(char),*(char),int)->(void)
(	O
MU_DIAG_ERROR	O
,	O
"_dup_cont_action"	*(char)
,	O
oldcont	*(struct(enum(int,int),*(struct),union(*(char),struct(*(char),*(char),*((enum(int,int),*`,*`,*`,*`,*`)->(int)),*(void),long,*(struct`),*(char),*(void)),struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char)))))
->	O
v	*(struct(int))
.	O
section	struct(*(char),*(char),*((enum(int,int),*(struct(struct`,enum(int,int,int),*`,*`,*`,*`)),*(char),*(*(void)),*(void),*(struct(*`,*`)))->(int)),*(void),long,*(struct),*(char),*(void))
.	O
ident	*(char)
,	O
rc	int
)	O
;	O
abort	()->(void)
(	O
)	O
;	O
}	O
break	O
;	O
case	O
mu_cfg_cont_param	int
:	O
newcont	*(struct(enum(int,int),*(struct),union(*(char),struct(*(char),*(char),*((enum(int,int),*`,*`,*`,*`,*`)->(int)),*(void),long,*(struct`),*(char),*(void)),struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char)))))
->	O
v	*(struct(int))
.	O
param	*(struct)
=	O
oldcont	*(struct(enum(int,int),*(struct),union(*(char),struct(*(char),*(char),*((enum(int,int),*`,*`,*`,*`,*`)->(int)),*(void),long,*(struct`),*(char),*(void)),struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char)))))
->	O
v	*(struct(int))
.	O
param	*(struct)
;	O
break	O
;	O
}	O
*	O
pcont	*(*(struct(enum(int,int),*(struct),union(*(char),struct(*`,*`,*`,*`,long,*`,*`,*`),struct(*`,int,*`,long,*`,*`,*`)))))
=	O
newcont	*(struct(enum(int,int),*(struct),union(*(char),struct(*(char),*(char),*((enum(int,int),*`,*`,*`,*`,*`)->(int)),*(void),long,*(struct`),*(char),*(void)),struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char)))))
;	O
return	O
0	int
;	O
}	O
static	O
void	O
destroy_list	(*(*(struct)))->(void)
(	O
mu_list_t	*(struct)
*	O
plist	*(*(struct))
)	O
{	O
mu_list_t	*(struct)
list	*(struct)
=	O
*	O
plist	*(*(struct))
;	O
mu_iterator_t	*(struct)
itr	*(struct)
=	O
NULL	O
;	O
if	O
(	O
!	O
list	*(struct)
)	O
return	O
;	O
mu_list_get_iterator	(*(struct),*(*(struct)))->(int)
(	O
list	*(struct)
,	O
&	O
itr	*(struct)
)	O
;	O
for	O
(	O
mu_iterator_first	(*(struct))->(int)
(	O
itr	*(struct)
)	O
;	O
!	O
mu_iterator_is_done	(*(struct))->(int)
(	O
itr	*(struct)
)	O
;	O
mu_iterator_next	(*(struct))->(int)
(	O
itr	*(struct)
)	O
)	O
{	O
struct	O
mu_cfg_cont	struct(enum(int,int),*(struct),union(*(char),struct(*(char),*(char),*((enum(int,int),*(struct`),*(char),*(*`),*(void),*(struct`))->(int)),*(void),long,*(struct),*(char),*(void)),struct(*(char),int,*(void),long,*((*(void),*(struct`))->(int)),*(char),*(char))))
*	O
cont	*(struct(enum(int,int),*(struct),union(*(char),struct(*(char),*(char),*((enum(int,int),*`,*`,*`,*`,*`)->(int)),*(void),long,*(struct`),*(char),*(void)),struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char)))))
,	O
*	O
p	*(char)
;	O
mu_iterator_current	(*(struct),*(*(void)))->(int)
(	O
itr	*(struct)
,	O
(	O
void	O
*	O
*	O
)	O
&	O
cont	*(struct(enum(int,int),*(struct),union(*(char),struct(*(char),*(char),*((enum(int,int),*`,*`,*`,*`,*`)->(int)),*(void),long,*(struct`),*(char),*(void)),struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char)))))
)	O
;	O
p	*(char)
=	O
cont	*(struct(enum(int,int),*(struct),union(*(char),struct(*(char),*(char),*((enum(int,int),*`,*`,*`,*`,*`)->(int)),*(void),long,*(struct`),*(char),*(void)),struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char)))))
;	O
mu_config_destroy_container	(*(*(struct(enum(int,int),*(struct`),union(*`,struct`,struct`)))))->(void)
(	O
&	O
p	*(char)
)	O
;	O
if	O
(	O
!	O
p	*(char)
)	O
mu_list_remove	(*(struct),*(void))->(int)
(	O
list	*(struct)
,	O
cont	*(struct(enum(int,int),*(struct),union(*(char),struct(*(char),*(char),*((enum(int,int),*`,*`,*`,*`,*`)->(int)),*(void),long,*(struct`),*(char),*(void)),struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char)))))
)	O
;	O
}	O
mu_iterator_destroy	(*(*(struct)))->(void)
(	O
&	O
itr	*(struct)
)	O
;	O
if	O
(	O
mu_list_is_empty	(*(struct))->(int)
(	O
list	*(struct)
)	O
)	O
mu_list_destroy	(*(*(struct)))->(void)
(	O
plist	*(*(struct))
)	O
;	O
}	O
void	O
mu_config_destroy_container	(*(*(struct(enum(int,int),*(struct`),union(*`,struct`,struct`)))))->(void)
(	O
struct	O
mu_cfg_cont	struct(enum(int,int),*(struct),union(*(char),struct(*(char),*(char),*((enum(int,int),*(struct`),*(char),*(*`),*(void),*(struct`))->(int)),*(void),long,*(struct),*(char),*(void)),struct(*(char),int,*(void),long,*((*(void),*(struct`))->(int)),*(char),*(char))))
*	O
*	O
pcont	*(*(struct(enum(int,int),*(struct),union(*(char),struct(*`,*`,*`,*`,long,*`,*`,*`),struct(*`,int,*`,long,*`,*`,*`)))))
)	O
{	O
struct	O
mu_cfg_cont	struct(enum(int,int),*(struct),union(*(char),struct(*(char),*(char),*((enum(int,int),*(struct`),*(char),*(*`),*(void),*(struct`))->(int)),*(void),long,*(struct),*(char),*(void)),struct(*(char),int,*(void),long,*((*(void),*(struct`))->(int)),*(char),*(char))))
*	O
cont	*(struct(enum(int,int),*(struct),union(*(char),struct(*(char),*(char),*((enum(int,int),*`,*`,*`,*`,*`)->(int)),*(void),long,*(struct`),*(char),*(void)),struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char)))))
=	O
*	O
pcont	*(*(struct(enum(int,int),*(struct),union(*(char),struct(*`,*`,*`,*`,long,*`,*`,*`),struct(*`,int,*`,long,*`,*`,*`)))))
;	O
unsigned	O
refcount	*(struct)
=	O
mu_refcount_dec	(*(struct))->(int)
(	O
cont	*(struct(enum(int,int),*(struct),union(*(char),struct(*(char),*(char),*((enum(int,int),*`,*`,*`,*`,*`)->(int)),*(void),long,*(struct`),*(char),*(void)),struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char)))))
->	O
refcount	*(struct)
)	O
;	O
switch	O
(	O
cont	*(struct(enum(int,int),*(struct),union(*(char),struct(*(char),*(char),*((enum(int,int),*`,*`,*`,*`,*`)->(int)),*(void),long,*(struct`),*(char),*(void)),struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char)))))
->	O
type	enum(int,int,int,int)
)	O
{	O
case	O
mu_cfg_cont_section	int
:	O
destroy_list	(*(*(struct)))->(void)
(	O
&	O
cont	*(struct(enum(int,int),*(struct),union(*(char),struct(*(char),*(char),*((enum(int,int),*`,*`,*`,*`,*`)->(int)),*(void),long,*(struct`),*(char),*(void)),struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char)))))
->	O
v	*(struct(int))
.	O
section	struct(*(char),*(char),*((enum(int,int),*(struct(struct`,enum(int,int,int),*`,*`,*`,*`)),*(char),*(*(void)),*(void),*(struct(*`,*`)))->(int)),*(void),long,*(struct),*(char),*(void))
.	O
children	*(struct)
)	O
;	O
break	O
;	O
case	O
mu_cfg_cont_param	int
:	O
break	O
;	O
}	O
if	O
(	O
refcount	*(struct)
==	O
0	int
)	O
{	O
free	(*(void))->(void)
(	O
cont	*(struct(enum(int,int),*(struct),union(*(char),struct(*(char),*(char),*((enum(int,int),*`,*`,*`,*`,*`)->(int)),*(void),long,*(struct`),*(char),*(void)),struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char)))))
)	O
;	O
*	O
pcont	*(*(struct(enum(int,int),*(struct),union(*(char),struct(*`,*`,*`,*`,long,*`,*`,*`),struct(*`,int,*`,long,*`,*`,*`)))))
=	O
0	int
;	O
}	O
}	O
int	O
mu_cfg_section_add_container	(*(struct(*(char),*(char),*((enum(int,int),*`,*`,*`,*`,*`)->(int)),*(void),long,*(struct),*(char),*(void))),*(struct(enum(int,int),*(struct),union(*(char),struct(*`,*`,*`,*`,long,*`,*`,*`),struct(*`,int,*`,long,*`,*`,*`)))))->(int)
(	O
struct	O
mu_cfg_section	int
*	O
sect	*(struct(*(char),*(char),*((enum(int,int),*(struct`),*(char),*(*`),*(void),*(struct`))->(int)),*(void),long,*(struct),*(char),*(void)))
,	O
struct	O
mu_cfg_cont	struct(enum(int,int),*(struct),union(*(char),struct(*(char),*(char),*((enum(int,int),*(struct`),*(char),*(*`),*(void),*(struct`))->(int)),*(void),long,*(struct),*(char),*(void)),struct(*(char),int,*(void),long,*((*(void),*(struct`))->(int)),*(char),*(char))))
*	O
cont	*(struct(enum(int,int),*(struct),union(*(char),struct(*(char),*(char),*((enum(int,int),*`,*`,*`,*`,*`)->(int)),*(void),long,*(struct`),*(char),*(void)),struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char)))))
)	O
{	O
if	O
(	O
!	O
cont	*(struct(enum(int,int),*(struct),union(*(char),struct(*(char),*(char),*((enum(int,int),*`,*`,*`,*`,*`)->(int)),*(void),long,*(struct`),*(char),*(void)),struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char)))))
)	O
return	O
0	int
;	O
if	O
(	O
!	O
sect	*(struct(*(char),*(char),*((enum(int,int),*(struct`),*(char),*(*`),*(void),*(struct`))->(int)),*(void),long,*(struct),*(char),*(void)))
->	O
children	*(struct)
)	O
mu_list_create	(*(*(struct)))->(int)
(	O
&	O
sect	*(struct(*(char),*(char),*((enum(int,int),*(struct`),*(char),*(*`),*(void),*(struct`))->(int)),*(void),long,*(struct),*(char),*(void)))
->	O
children	*(struct)
)	O
;	O
return	O
mu_list_append	(*(struct),*(void))->(int)
(	O
sect	*(struct(*(char),*(char),*((enum(int,int),*(struct`),*(char),*(*`),*(void),*(struct`))->(int)),*(void),long,*(struct),*(char),*(void)))
->	O
children	*(struct)
,	O
cont	*(struct(enum(int,int),*(struct),union(*(char),struct(*(char),*(char),*((enum(int,int),*`,*`,*`,*`,*`)->(int)),*(void),long,*(struct`),*(char),*(void)),struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char)))))
)	O
;	O
}	O
int	O
mu_cfg_section_add_params	(*(struct(*(char),*(char),*((enum(int,int),*`,*`,*`,*`,*`)->(int)),*(void),long,*(struct),*(char),*(void))),*(struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char))))->(int)
(	O
struct	O
mu_cfg_section	int
*	O
sect	*(struct(*(char),*(char),*((enum(int,int),*(struct`),*(char),*(*`),*(void),*(struct`))->(int)),*(void),long,*(struct),*(char),*(void)))
,	O
struct	O
mu_cfg_param	struct(*(char),int,*(void),long,*((*(void),*(struct(int,union(*`,*`,struct`))))->(int)),*(char),*(char))
*	O
param	*(struct)
)	O
{	O
if	O
(	O
!	O
param	*(struct)
)	O
return	O
0	int
;	O
for	O
(	O
;	O
param	*(struct)
->	O
ident	*(char)
;	O
param	*(struct)
++	O
)	O
{	O
int	O
rc	int
;	O
struct	O
mu_cfg_cont	struct(enum(int,int),*(struct),union(*(char),struct(*(char),*(char),*((enum(int,int),*(struct`),*(char),*(*`),*(void),*(struct`))->(int)),*(void),long,*(struct),*(char),*(void)),struct(*(char),int,*(void),long,*((*(void),*(struct`))->(int)),*(char),*(char))))
*	O
container	*(struct(enum(int,int),*(struct),union(*(char),struct(*(char),*(char),*((enum(int,int),*`,*`,*`,*`,*`)->(int)),*(void),long,*(struct`),*(char),*(void)),struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char)))))
;	O
if	O
(	O
param	*(struct)
->	O
type	enum(int,int,int,int)
==	O
mu_cfg_section	int
)	O
{	O
container	*(struct(enum(int,int),*(struct),union(*(char),struct(*(char),*(char),*((enum(int,int),*`,*`,*`,*`,*`)->(int)),*(void),long,*(struct`),*(char),*(void)),struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char)))))
=	O
mu_get_canned_container	(*(char))->(*(struct(enum(int,int),*(struct),union(*(char),struct(*`,*`,*`,*`,long,*`,*`,*`),struct(*`,int,*`,long,*`,*`,*`)))))
(	O
param	*(struct)
->	O
ident	*(char)
)	O
;	O
if	O
(	O
!	O
container	*(struct(enum(int,int),*(struct),union(*(char),struct(*(char),*(char),*((enum(int,int),*`,*`,*`,*`,*`)->(int)),*(void),long,*(struct`),*(char),*(void)),struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char)))))
)	O
{	O
mu_error	(*(char))->(int)
(	O
_	O
(	O
"INTERNAL ERROR: Requested unknown canned "	*(char)
"section %s"	*(char)
)	O
,	O
param	*(struct)
->	O
ident	*(char)
)	O
;	O
abort	()->(void)
(	O
)	O
;	O
}	O
if	O
(	O
param	*(struct)
->	O
ident	*(char)
[	O
0	int
]	O
==	O
'.'	O
)	O
{	O
mu_iterator_t	*(struct)
itr	*(struct)
;	O
mu_list_get_iterator	(*(struct),*(*(struct)))->(int)
(	O
container	*(struct(enum(int,int),*(struct),union(*(char),struct(*(char),*(char),*((enum(int,int),*`,*`,*`,*`,*`)->(int)),*(void),long,*(struct`),*(char),*(void)),struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char)))))
->	O
v	*(struct(int))
.	O
section	struct(*(char),*(char),*((enum(int,int),*(struct(struct`,enum(int,int,int),*`,*`,*`,*`)),*(char),*(*(void)),*(void),*(struct(*`,*`)))->(int)),*(void),long,*(struct),*(char),*(void))
.	O
children	*(struct)
,	O
&	O
itr	*(struct)
)	O
;	O
for	O
(	O
mu_iterator_first	(*(struct))->(int)
(	O
itr	*(struct)
)	O
;	O
!	O
mu_iterator_is_done	(*(struct))->(int)
(	O
itr	*(struct)
)	O
;	O
mu_iterator_next	(*(struct))->(int)
(	O
itr	*(struct)
)	O
)	O
{	O
struct	O
mu_cfg_cont	struct(enum(int,int),*(struct),union(*(char),struct(*(char),*(char),*((enum(int,int),*(struct`),*(char),*(*`),*(void),*(struct`))->(int)),*(void),long,*(struct),*(char),*(void)),struct(*(char),int,*(void),long,*((*(void),*(struct`))->(int)),*(char),*(char))))
*	O
c	char
;	O
mu_iterator_current	(*(struct),*(*(void)))->(int)
(	O
itr	*(struct)
,	O
(	O
void	O
*	O
*	O
)	O
&	O
c	char
)	O
;	O
mu_config_clone_container	(*(struct(enum(int,int),*(struct),union(*(char),struct(*`,*`,*`,*`,long,*`,*`,*`),struct(*`,int,*`,long,*`,*`,*`)))))->(int)
(	O
c	char
)	O
;	O
if	O
(	O
mu_refcount_value	(*(struct))->(int)
(	O
c	char
->	O
refcount	*(struct)
)	O
>	O
1	int
)	O
dup_container	(*(*(struct(enum(int,int),*(struct`),union(*`,struct`,struct`)))))->(int)
(	O
&	O
c	char
)	O
;	O
switch	O
(	O
c	char
->	O
type	enum(int,int,int,int)
)	O
{	O
case	O
mu_cfg_cont_section	int
:	O
if	O
(	O
param	*(struct)
->	O
data	*(void)
)	O
{	O
c	char
->	O
v	*(struct(int))
.	O
section	struct(*(char),*(char),*((enum(int,int),*(struct(struct`,enum(int,int,int),*`,*`,*`,*`)),*(char),*(*(void)),*(void),*(struct(*`,*`)))->(int)),*(void),long,*(struct),*(char),*(void))
.	O
data	*(void)
=	O
param	*(struct)
->	O
data	*(void)
;	O
c	char
->	O
v	*(struct(int))
.	O
section	struct(*(char),*(char),*((enum(int,int),*(struct(struct`,enum(int,int,int),*`,*`,*`,*`)),*(char),*(*(void)),*(void),*(struct(*`,*`)))->(int)),*(void),long,*(struct),*(char),*(void))
.	O
offset	long
=	O
param	*(struct)
->	O
offset	long
;	O
}	O
else	O
if	O
(	O
c	char
->	O
v	*(struct(int))
.	O
section	struct(*(char),*(char),*((enum(int,int),*(struct(struct`,enum(int,int,int),*`,*`,*`,*`)),*(char),*(*(void)),*(void),*(struct(*`,*`)))->(int)),*(void),long,*(struct),*(char),*(void))
.	O
data	*(void)
)	O
;	O
else	O
c	char
->	O
v	*(struct(int))
.	O
section	struct(*(char),*(char),*((enum(int,int),*(struct(struct`,enum(int,int,int),*`,*`,*`,*`)),*(char),*(*(void)),*(void),*(struct(*`,*`)))->(int)),*(void),long,*(struct),*(char),*(void))
.	O
offset	long
+=	O
param	*(struct)
->	O
offset	long
;	O
break	O
;	O
case	O
mu_cfg_cont_param	int
:	O
if	O
(	O
param	*(struct)
->	O
data	*(void)
)	O
{	O
container	*(struct(enum(int,int),*(struct),union(*(char),struct(*(char),*(char),*((enum(int,int),*`,*`,*`,*`,*`)->(int)),*(void),long,*(struct`),*(char),*(void)),struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char)))))
->	O
v	*(struct(int))
.	O
param	*(struct)
.	O
data	*(void)
=	O
param	*(struct)
->	O
data	*(void)
;	O
container	*(struct(enum(int,int),*(struct),union(*(char),struct(*(char),*(char),*((enum(int,int),*`,*`,*`,*`,*`)->(int)),*(void),long,*(struct`),*(char),*(void)),struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char)))))
->	O
v	*(struct(int))
.	O
param	*(struct)
.	O
offset	long
=	O
param	*(struct)
->	O
offset	long
;	O
}	O
else	O
if	O
(	O
container	*(struct(enum(int,int),*(struct),union(*(char),struct(*(char),*(char),*((enum(int,int),*`,*`,*`,*`,*`)->(int)),*(void),long,*(struct`),*(char),*(void)),struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char)))))
->	O
v	*(struct(int))
.	O
param	*(struct)
.	O
data	*(void)
)	O
;	O
else	O
container	*(struct(enum(int,int),*(struct),union(*(char),struct(*(char),*(char),*((enum(int,int),*`,*`,*`,*`,*`)->(int)),*(void),long,*(struct`),*(char),*(void)),struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char)))))
->	O
v	*(struct(int))
.	O
param	*(struct)
.	O
offset	long
+=	O
param	*(struct)
->	O
offset	long
;	O
break	O
;	O
}	O
mu_cfg_section_add_container	(*(struct(*(char),*(char),*((enum(int,int),*`,*`,*`,*`,*`)->(int)),*(void),long,*(struct),*(char),*(void))),*(struct(enum(int,int),*(struct),union(*(char),struct(*`,*`,*`,*`,long,*`,*`,*`),struct(*`,int,*`,long,*`,*`,*`)))))->(int)
(	O
sect	*(struct(*(char),*(char),*((enum(int,int),*(struct`),*(char),*(*`),*(void),*(struct`))->(int)),*(void),long,*(struct),*(char),*(void)))
,	O
c	char
)	O
;	O
}	O
mu_iterator_destroy	(*(*(struct)))->(void)
(	O
&	O
itr	*(struct)
)	O
;	O
continue	O
;	O
}	O
else	O
{	O
mu_config_clone_container	(*(struct(enum(int,int),*(struct),union(*(char),struct(*`,*`,*`,*`,long,*`,*`,*`),struct(*`,int,*`,long,*`,*`,*`)))))->(int)
(	O
container	*(struct(enum(int,int),*(struct),union(*(char),struct(*(char),*(char),*((enum(int,int),*`,*`,*`,*`,*`)->(int)),*(void),long,*(struct`),*(char),*(void)),struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char)))))
)	O
;	O
if	O
(	O
mu_refcount_value	(*(struct))->(int)
(	O
container	*(struct(enum(int,int),*(struct),union(*(char),struct(*(char),*(char),*((enum(int,int),*`,*`,*`,*`,*`)->(int)),*(void),long,*(struct`),*(char),*(void)),struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char)))))
->	O
refcount	*(struct)
)	O
>	O
1	int
)	O
dup_container	(*(*(struct(enum(int,int),*(struct`),union(*`,struct`,struct`)))))->(int)
(	O
&	O
container	*(struct(enum(int,int),*(struct),union(*(char),struct(*(char),*(char),*((enum(int,int),*`,*`,*`,*`,*`)->(int)),*(void),long,*(struct`),*(char),*(void)),struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char)))))
)	O
;	O
container	*(struct(enum(int,int),*(struct),union(*(char),struct(*(char),*(char),*((enum(int,int),*`,*`,*`,*`,*`)->(int)),*(void),long,*(struct`),*(char),*(void)),struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char)))))
->	O
v	*(struct(int))
.	O
section	struct(*(char),*(char),*((enum(int,int),*(struct(struct`,enum(int,int,int),*`,*`,*`,*`)),*(char),*(*(void)),*(void),*(struct(*`,*`)))->(int)),*(void),long,*(struct),*(char),*(void))
.	O
data	*(void)
=	O
param	*(struct)
->	O
data	*(void)
;	O
container	*(struct(enum(int,int),*(struct),union(*(char),struct(*(char),*(char),*((enum(int,int),*`,*`,*`,*`,*`)->(int)),*(void),long,*(struct`),*(char),*(void)),struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char)))))
->	O
v	*(struct(int))
.	O
section	struct(*(char),*(char),*((enum(int,int),*(struct(struct`,enum(int,int,int),*`,*`,*`,*`)),*(char),*(*(void)),*(void),*(struct(*`,*`)))->(int)),*(void),long,*(struct),*(char),*(void))
.	O
offset	long
=	O
param	*(struct)
->	O
offset	long
;	O
}	O
}	O
else	O
{	O
rc	int
=	O
mu_config_create_container	(*(*(struct(enum(int,int),*(struct`),union(*`,struct`,struct`)))),enum(int,int))->(int)
(	O
&	O
container	*(struct(enum(int,int),*(struct),union(*(char),struct(*(char),*(char),*((enum(int,int),*`,*`,*`,*`,*`)->(int)),*(void),long,*(struct`),*(char),*(void)),struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char)))))
,	O
mu_cfg_cont_param	int
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
container	*(struct(enum(int,int),*(struct),union(*(char),struct(*(char),*(char),*((enum(int,int),*`,*`,*`,*`,*`)->(int)),*(void),long,*(struct`),*(char),*(void)),struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char)))))
->	O
v	*(struct(int))
.	O
param	*(struct)
=	O
*	O
param	*(struct)
;	O
}	O
mu_cfg_section_add_container	(*(struct(*(char),*(char),*((enum(int,int),*`,*`,*`,*`,*`)->(int)),*(void),long,*(struct),*(char),*(void))),*(struct(enum(int,int),*(struct),union(*(char),struct(*`,*`,*`,*`,long,*`,*`,*`),struct(*`,int,*`,long,*`,*`,*`)))))->(int)
(	O
sect	*(struct(*(char),*(char),*((enum(int,int),*(struct`),*(char),*(*`),*(void),*(struct`))->(int)),*(void),long,*(struct),*(char),*(void)))
,	O
container	*(struct(enum(int,int),*(struct),union(*(char),struct(*(char),*(char),*((enum(int,int),*`,*`,*`,*`,*`)->(int)),*(void),long,*(struct`),*(char),*(void)),struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char)))))
)	O
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
_clone_action	(*(void),*(void))->(int)
(	O
void	O
*	O
item	*(void)
,	O
void	O
*	O
cbdata	*(void)
)	O
{	O
struct	O
mu_cfg_cont	struct(enum(int,int),*(struct),union(*(char),struct(*(char),*(char),*((enum(int,int),*(struct`),*(char),*(*`),*(void),*(struct`))->(int)),*(void),long,*(struct),*(char),*(void)),struct(*(char),int,*(void),long,*((*(void),*(struct`))->(int)),*(char),*(char))))
*	O
cont	*(struct(enum(int,int),*(struct),union(*(char),struct(*(char),*(char),*((enum(int,int),*`,*`,*`,*`,*`)->(int)),*(void),long,*(struct`),*(char),*(void)),struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char)))))
=	O
item	*(void)
;	O
return	O
mu_config_clone_container	(*(struct(enum(int,int),*(struct),union(*(char),struct(*`,*`,*`,*`,long,*`,*`,*`),struct(*`,int,*`,long,*`,*`,*`)))))->(int)
(	O
cont	*(struct(enum(int,int),*(struct),union(*(char),struct(*(char),*(char),*((enum(int,int),*`,*`,*`,*`,*`)->(int)),*(void),long,*(struct`),*(char),*(void)),struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char)))))
)	O
;	O
}	O
int	O
mu_config_clone_container	(*(struct(enum(int,int),*(struct),union(*(char),struct(*`,*`,*`,*`,long,*`,*`,*`),struct(*`,int,*`,long,*`,*`,*`)))))->(int)
(	O
struct	O
mu_cfg_cont	struct(enum(int,int),*(struct),union(*(char),struct(*(char),*(char),*((enum(int,int),*(struct`),*(char),*(*`),*(void),*(struct`))->(int)),*(void),long,*(struct),*(char),*(void)),struct(*(char),int,*(void),long,*((*(void),*(struct`))->(int)),*(char),*(char))))
*	O
cont	*(struct(enum(int,int),*(struct),union(*(char),struct(*(char),*(char),*((enum(int,int),*`,*`,*`,*`,*`)->(int)),*(void),long,*(struct`),*(char),*(void)),struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char)))))
)	O
{	O
if	O
(	O
!	O
cont	*(struct(enum(int,int),*(struct),union(*(char),struct(*(char),*(char),*((enum(int,int),*`,*`,*`,*`,*`)->(int)),*(void),long,*(struct`),*(char),*(void)),struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char)))))
)	O
return	O
0	int
;	O
mu_refcount_inc	(*(struct))->(int)
(	O
cont	*(struct(enum(int,int),*(struct),union(*(char),struct(*(char),*(char),*((enum(int,int),*`,*`,*`,*`,*`)->(int)),*(void),long,*(struct`),*(char),*(void)),struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char)))))
->	O
refcount	*(struct)
)	O
;	O
switch	O
(	O
cont	*(struct(enum(int,int),*(struct),union(*(char),struct(*(char),*(char),*((enum(int,int),*`,*`,*`,*`,*`)->(int)),*(void),long,*(struct`),*(char),*(void)),struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char)))))
->	O
type	enum(int,int,int,int)
)	O
{	O
case	O
mu_cfg_cont_section	int
:	O
return	O
mu_list_foreach	(*(struct),*((*(void),*(void))->(int)),*(void))->(int)
(	O
cont	*(struct(enum(int,int),*(struct),union(*(char),struct(*(char),*(char),*((enum(int,int),*`,*`,*`,*`,*`)->(int)),*(void),long,*(struct`),*(char),*(void)),struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char)))))
->	O
v	*(struct(int))
.	O
section	struct(*(char),*(char),*((enum(int,int),*(struct(struct`,enum(int,int,int),*`,*`,*`,*`)),*(char),*(*(void)),*(void),*(struct(*`,*`)))->(int)),*(void),long,*(struct),*(char),*(void))
.	O
children	*(struct)
,	O
_clone_action	(*(void),*(void))->(int)
,	O
NULL	O
)	O
;	O
case	O
mu_cfg_cont_param	int
:	O
break	O
;	O
}	O
return	O
0	int
;	O
}	O
int	O
mu_config_container_register_section	(*(*(struct(enum(int,int),*(struct`),union(*`,struct`,struct`)))),*(char),*(char),*(char),*((enum(int,int),*(struct(struct`,enum(int,int,int),*`,*`,*`,*`)),*(char),*(*(void)),*(void),*(struct(*`,*`)))->(int)),*(struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char))),*(*(struct(*(char),*(char),*((enum(int,int),*`,*`,*`,*`,*`)->(int)),*(void),long,*(struct`),*(char),*(void)))))->(int)
(	O
struct	O
mu_cfg_cont	struct(enum(int,int),*(struct),union(*(char),struct(*(char),*(char),*((enum(int,int),*(struct`),*(char),*(*`),*(void),*(struct`))->(int)),*(void),long,*(struct),*(char),*(void)),struct(*(char),int,*(void),long,*((*(void),*(struct`))->(int)),*(char),*(char))))
*	O
*	O
proot	*(*(struct(enum(int,int),*(struct),union(*(char),struct(*`,*`,*`,*`,long,*`,*`,*`),struct(*`,int,*`,long,*`,*`,*`)))))
,	O
const	O
char	O
*	O
parent_path	*(char)
,	O
const	O
char	O
*	O
ident	*(char)
,	O
const	O
char	O
*	O
label	*(struct(int,union(*(struct),*(char),struct(long,*(struct`)))))
,	O
mu_cfg_section_fp	*((enum(int,int),*(struct(struct(struct`,struct`),enum(int,int,int),*(char),*(struct`),*(struct`),*(struct`))),*(char),*(*(void)),*(void),*(struct(*(struct`),*(struct`))))->(int))
parser	*((enum(int,int),*(struct(struct(struct`,struct`),enum(int,int,int),*(char),*(struct`),*(struct`),*(struct`))),*(char),*(*(void)),*(void),*(struct(*(struct`),*(struct`))))->(int))
,	O
struct	O
mu_cfg_param	struct(*(char),int,*(void),long,*((*(void),*(struct(int,union(*`,*`,struct`))))->(int)),*(char),*(char))
*	O
param	*(struct)
,	O
struct	O
mu_cfg_section	int
*	O
*	O
psection	*(*(struct(*(char),*(char),*((enum(int,int),*`,*`,*`,*`,*`)->(int)),*(void),long,*(struct),*(char),*(void))))
)	O
{	O
int	O
rc	int
;	O
struct	O
mu_cfg_section	int
*	O
root_section	*(struct(*(char),*(char),*((enum(int,int),*(struct`),*(char),*(*`),*(void),*(struct`))->(int)),*(void),long,*(struct),*(char),*(void)))
;	O
struct	O
mu_cfg_section	int
*	O
parent	*(struct(struct(struct(*(char),int,int),struct(*(char),int,int)),enum(int,int,int),*(char),*(struct(int,union(*`,*`,struct`))),*(struct),*(struct(struct(struct`,struct`),enum(int,int,int),*(char),*(struct`),*(struct`),*(struct`)))))
;	O
if	O
(	O
!	O
*	O
proot	*(*(struct(enum(int,int),*(struct),union(*(char),struct(*`,*`,*`,*`,long,*`,*`,*`),struct(*`,int,*`,long,*`,*`,*`)))))
)	O
{	O
rc	int
=	O
mu_config_create_container	(*(*(struct(enum(int,int),*(struct`),union(*`,struct`,struct`)))),enum(int,int))->(int)
(	O
proot	*(*(struct(enum(int,int),*(struct),union(*(char),struct(*`,*`,*`,*`,long,*`,*`,*`),struct(*`,int,*`,long,*`,*`,*`)))))
,	O
mu_cfg_cont_section	int
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
memset	(*(void),int,long)->(*(void))
(	O
&	O
(	O
*	O
proot	*(*(struct(enum(int,int),*(struct),union(*(char),struct(*`,*`,*`,*`,long,*`,*`,*`),struct(*`,int,*`,long,*`,*`,*`)))))
)	O
->	O
v	*(struct(int))
.	O
section	struct(*(char),*(char),*((enum(int,int),*(struct(struct`,enum(int,int,int),*`,*`,*`,*`)),*(char),*(*(void)),*(void),*(struct(*`,*`)))->(int)),*(void),long,*(struct),*(char),*(void))
,	O
0	int
,	O
sizeof	O
(	O
*	O
proot	*(*(struct(enum(int,int),*(struct),union(*(char),struct(*`,*`,*`,*`,long,*`,*`,*`),struct(*`,int,*`,long,*`,*`,*`)))))
)	O
->	O
v	*(struct(int))
.	O
section	struct(*(char),*(char),*((enum(int,int),*(struct(struct`,enum(int,int,int),*`,*`,*`,*`)),*(char),*(*(void)),*(void),*(struct(*`,*`)))->(int)),*(void),long,*(struct),*(char),*(void))
)	O
;	O
}	O
root_section	*(struct(*(char),*(char),*((enum(int,int),*(struct`),*(char),*(*`),*(void),*(struct`))->(int)),*(void),long,*(struct),*(char),*(void)))
=	O
&	O
(	O
*	O
proot	*(*(struct(enum(int,int),*(struct),union(*(char),struct(*`,*`,*`,*`,long,*`,*`,*`),struct(*`,int,*`,long,*`,*`,*`)))))
)	O
->	O
v	*(struct(int))
.	O
section	struct(*(char),*(char),*((enum(int,int),*(struct(struct`,enum(int,int,int),*`,*`,*`,*`)),*(char),*(*(void)),*(void),*(struct(*`,*`)))->(int)),*(void),long,*(struct),*(char),*(void))
;	O
if	O
(	O
parent_path	*(char)
)	O
{	O
if	O
(	O
mu_cfg_find_section	(*(struct(*(char),*(char),*((enum(int,int),*`,*`,*`,*`,*`)->(int)),*(void),long,*(struct),*(char),*(void))),*(char),*(*(struct(*(char),*(char),*((enum(int,int),*`,*`,*`,*`,*`)->(int)),*(void),long,*(struct`),*(char),*(void)))))->(int)
(	O
root_section	*(struct(*(char),*(char),*((enum(int,int),*(struct`),*(char),*(*`),*(void),*(struct`))->(int)),*(void),long,*(struct),*(char),*(void)))
,	O
parent_path	*(char)
,	O
&	O
parent	*(struct(struct(struct(*(char),int,int),struct(*(char),int,int)),enum(int,int,int),*(char),*(struct(int,union(*`,*`,struct`))),*(struct),*(struct(struct(struct`,struct`),enum(int,int,int),*(char),*(struct`),*(struct`),*(struct`)))))
)	O
)	O
return	O
MU_ERR_NOENT	O
;	O
}	O
else	O
parent	*(struct(struct(struct(*(char),int,int),struct(*(char),int,int)),enum(int,int,int),*(char),*(struct(int,union(*`,*`,struct`))),*(struct),*(struct(struct(struct`,struct`),enum(int,int,int),*(char),*(struct`),*(struct`),*(struct`)))))
=	O
root_section	*(struct(*(char),*(char),*((enum(int,int),*(struct`),*(char),*(*`),*(void),*(struct`))->(int)),*(void),long,*(struct),*(char),*(void)))
;	O
if	O
(	O
mu_refcount_value	(*(struct))->(int)
(	O
(	O
*	O
proot	*(*(struct(enum(int,int),*(struct),union(*(char),struct(*`,*`,*`,*`,long,*`,*`,*`),struct(*`,int,*`,long,*`,*`,*`)))))
)	O
->	O
refcount	*(struct)
)	O
>	O
1	int
)	O
{	O
rc	int
=	O
dup_container	(*(*(struct(enum(int,int),*(struct`),union(*`,struct`,struct`)))))->(int)
(	O
proot	*(*(struct(enum(int,int),*(struct),union(*(char),struct(*`,*`,*`,*`,long,*`,*`,*`),struct(*`,int,*`,long,*`,*`,*`)))))
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
root_section	*(struct(*(char),*(char),*((enum(int,int),*(struct`),*(char),*(*`),*(void),*(struct`))->(int)),*(void),long,*(struct),*(char),*(void)))
=	O
&	O
(	O
*	O
proot	*(*(struct(enum(int,int),*(struct),union(*(char),struct(*`,*`,*`,*`,long,*`,*`,*`),struct(*`,int,*`,long,*`,*`,*`)))))
)	O
->	O
v	*(struct(int))
.	O
section	struct(*(char),*(char),*((enum(int,int),*(struct(struct`,enum(int,int,int),*`,*`,*`,*`)),*(char),*(*(void)),*(void),*(struct(*`,*`)))->(int)),*(void),long,*(struct),*(char),*(void))
;	O
if	O
(	O
parent_path	*(char)
)	O
{	O
if	O
(	O
mu_cfg_find_section	(*(struct(*(char),*(char),*((enum(int,int),*`,*`,*`,*`,*`)->(int)),*(void),long,*(struct),*(char),*(void))),*(char),*(*(struct(*(char),*(char),*((enum(int,int),*`,*`,*`,*`,*`)->(int)),*(void),long,*(struct`),*(char),*(void)))))->(int)
(	O
root_section	*(struct(*(char),*(char),*((enum(int,int),*(struct`),*(char),*(*`),*(void),*(struct`))->(int)),*(void),long,*(struct),*(char),*(void)))
,	O
parent_path	*(char)
,	O
&	O
parent	*(struct(struct(struct(*(char),int,int),struct(*(char),int,int)),enum(int,int,int),*(char),*(struct(int,union(*`,*`,struct`))),*(struct),*(struct(struct(struct`,struct`),enum(int,int,int),*(char),*(struct`),*(struct`),*(struct`)))))
)	O
)	O
return	O
MU_ERR_NOENT	O
;	O
}	O
else	O
parent	*(struct(struct(struct(*(char),int,int),struct(*(char),int,int)),enum(int,int,int),*(char),*(struct(int,union(*`,*`,struct`))),*(struct),*(struct(struct(struct`,struct`),enum(int,int,int),*(char),*(struct`),*(struct`),*(struct`)))))
=	O
root_section	*(struct(*(char),*(char),*((enum(int,int),*(struct`),*(char),*(*`),*(void),*(struct`))->(int)),*(void),long,*(struct),*(char),*(void)))
;	O
}	O
if	O
(	O
ident	*(char)
)	O
{	O
struct	O
mu_cfg_cont	struct(enum(int,int),*(struct),union(*(char),struct(*(char),*(char),*((enum(int,int),*(struct`),*(char),*(*`),*(void),*(struct`))->(int)),*(void),long,*(struct),*(char),*(void)),struct(*(char),int,*(void),long,*((*(void),*(struct`))->(int)),*(char),*(char))))
*	O
container	*(struct(enum(int,int),*(struct),union(*(char),struct(*(char),*(char),*((enum(int,int),*`,*`,*`,*`,*`)->(int)),*(void),long,*(struct`),*(char),*(void)),struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char)))))
;	O
struct	O
mu_cfg_section	int
*	O
s	*(char)
;	O
if	O
(	O
!	O
parent	*(struct(struct(struct(*(char),int,int),struct(*(char),int,int)),enum(int,int,int),*(char),*(struct(int,union(*`,*`,struct`))),*(struct),*(struct(struct(struct`,struct`),enum(int,int,int),*(char),*(struct`),*(struct`),*(struct`)))))
->	O
children	*(struct)
)	O
mu_list_create	(*(*(struct)))->(int)
(	O
&	O
parent	*(struct(struct(struct(*(char),int,int),struct(*(char),int,int)),enum(int,int,int),*(char),*(struct(int,union(*`,*`,struct`))),*(struct),*(struct(struct(struct`,struct`),enum(int,int,int),*(char),*(struct`),*(struct`),*(struct`)))))
->	O
children	*(struct)
)	O
;	O
mu_config_create_container	(*(*(struct(enum(int,int),*(struct`),union(*`,struct`,struct`)))),enum(int,int))->(int)
(	O
&	O
container	*(struct(enum(int,int),*(struct),union(*(char),struct(*(char),*(char),*((enum(int,int),*`,*`,*`,*`,*`)->(int)),*(void),long,*(struct`),*(char),*(void)),struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char)))))
,	O
mu_cfg_cont_section	int
)	O
;	O
mu_list_append	(*(struct),*(void))->(int)
(	O
parent	*(struct(struct(struct(*(char),int,int),struct(*(char),int,int)),enum(int,int,int),*(char),*(struct(int,union(*`,*`,struct`))),*(struct),*(struct(struct(struct`,struct`),enum(int,int,int),*(char),*(struct`),*(struct`),*(struct`)))))
->	O
children	*(struct)
,	O
container	*(struct(enum(int,int),*(struct),union(*(char),struct(*(char),*(char),*((enum(int,int),*`,*`,*`,*`,*`)->(int)),*(void),long,*(struct`),*(char),*(void)),struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char)))))
)	O
;	O
s	*(char)
=	O
&	O
container	*(struct(enum(int,int),*(struct),union(*(char),struct(*(char),*(char),*((enum(int,int),*`,*`,*`,*`,*`)->(int)),*(void),long,*(struct`),*(char),*(void)),struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char)))))
->	O
v	*(struct(int))
.	O
section	struct(*(char),*(char),*((enum(int,int),*(struct(struct`,enum(int,int,int),*`,*`,*`,*`)),*(char),*(*(void)),*(void),*(struct(*`,*`)))->(int)),*(void),long,*(struct),*(char),*(void))
;	O
s	*(char)
->	O
ident	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
ident	*(char)
)	O
;	O
s	*(char)
->	O
label	*(struct(int,union(*(struct),*(char),struct(long,*(struct`)))))
=	O
label	*(struct(int,union(*(struct),*(char),struct(long,*(struct`)))))
?	O
strdup	(*(char))->(*(char))
(	O
label	*(struct(int,union(*(struct),*(char),struct(long,*(struct`)))))
)	O
:	O
NULL	O
;	O
s	*(char)
->	O
parser	*((enum(int,int),*(struct(struct(struct`,struct`),enum(int,int,int),*(char),*(struct`),*(struct`),*(struct`))),*(char),*(*(void)),*(void),*(struct(*(struct`),*(struct`))))->(int))
=	O
parser	*((enum(int,int),*(struct(struct(struct`,struct`),enum(int,int,int),*(char),*(struct`),*(struct`),*(struct`))),*(char),*(*(void)),*(void),*(struct(*(struct`),*(struct`))))->(int))
;	O
s	*(char)
->	O
children	*(struct)
=	O
NULL	O
;	O
mu_cfg_section_add_params	(*(struct(*(char),*(char),*((enum(int,int),*`,*`,*`,*`,*`)->(int)),*(void),long,*(struct),*(char),*(void))),*(struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char))))->(int)
(	O
s	*(char)
,	O
param	*(struct)
)	O
;	O
if	O
(	O
psection	*(*(struct(*(char),*(char),*((enum(int,int),*`,*`,*`,*`,*`)->(int)),*(void),long,*(struct),*(char),*(void))))
)	O
*	O
psection	*(*(struct(*(char),*(char),*((enum(int,int),*`,*`,*`,*`,*`)->(int)),*(void),long,*(struct),*(char),*(void))))
=	O
s	*(char)
;	O
}	O
else	O
{	O
mu_cfg_section_add_params	(*(struct(*(char),*(char),*((enum(int,int),*`,*`,*`,*`,*`)->(int)),*(void),long,*(struct),*(char),*(void))),*(struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char))))->(int)
(	O
parent	*(struct(struct(struct(*(char),int,int),struct(*(char),int,int)),enum(int,int,int),*(char),*(struct(int,union(*`,*`,struct`))),*(struct),*(struct(struct(struct`,struct`),enum(int,int,int),*(char),*(struct`),*(struct`),*(struct`)))))
,	O
param	*(struct)
)	O
;	O
if	O
(	O
!	O
parent	*(struct(struct(struct(*(char),int,int),struct(*(char),int,int)),enum(int,int,int),*(char),*(struct(int,union(*`,*`,struct`))),*(struct),*(struct(struct(struct`,struct`),enum(int,int,int),*(char),*(struct`),*(struct`),*(struct`)))))
->	O
parser	*((enum(int,int),*(struct(struct(struct`,struct`),enum(int,int,int),*(char),*(struct`),*(struct`),*(struct`))),*(char),*(*(void)),*(void),*(struct(*(struct`),*(struct`))))->(int))
)	O
parent	*(struct(struct(struct(*(char),int,int),struct(*(char),int,int)),enum(int,int,int),*(char),*(struct(int,union(*`,*`,struct`))),*(struct),*(struct(struct(struct`,struct`),enum(int,int,int),*(char),*(struct`),*(struct`),*(struct`)))))
->	O
parser	*((enum(int,int),*(struct(struct(struct`,struct`),enum(int,int,int),*(char),*(struct`),*(struct`),*(struct`))),*(char),*(*(void)),*(void),*(struct(*(struct`),*(struct`))))->(int))
=	O
parser	*((enum(int,int),*(struct(struct(struct`,struct`),enum(int,int,int),*(char),*(struct`),*(struct`),*(struct`))),*(char),*(*(void)),*(void),*(struct(*(struct`),*(struct`))))->(int))
;	O
if	O
(	O
psection	*(*(struct(*(char),*(char),*((enum(int,int),*`,*`,*`,*`,*`)->(int)),*(void),long,*(struct),*(char),*(void))))
)	O
*	O
psection	*(*(struct(*(char),*(char),*((enum(int,int),*`,*`,*`,*`,*`)->(int)),*(void),long,*(struct),*(char),*(void))))
=	O
parent	*(struct(struct(struct(*(char),int,int),struct(*(char),int,int)),enum(int,int,int),*(char),*(struct(int,union(*`,*`,struct`))),*(struct),*(struct(struct(struct`,struct`),enum(int,int,int),*(char),*(struct`),*(struct`),*(struct`)))))
;	O
}	O
return	O
0	int
;	O
}	O
int	O
mu_config_root_register_section	(*(char),*(char),*(char),*((enum(int,int),*(struct(struct`,enum(int,int,int),*`,*`,*`,*`)),*(char),*(*(void)),*(void),*(struct(*`,*`)))->(int)),*(struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char))))->(int)
(	O
const	O
char	O
*	O
parent_path	*(char)
,	O
const	O
char	O
*	O
ident	*(char)
,	O
const	O
char	O
*	O
label	*(struct(int,union(*(struct),*(char),struct(long,*(struct`)))))
,	O
mu_cfg_section_fp	*((enum(int,int),*(struct(struct(struct`,struct`),enum(int,int,int),*(char),*(struct`),*(struct`),*(struct`))),*(char),*(*(void)),*(void),*(struct(*(struct`),*(struct`))))->(int))
parser	*((enum(int,int),*(struct(struct(struct`,struct`),enum(int,int,int),*(char),*(struct`),*(struct`),*(struct`))),*(char),*(*(void)),*(void),*(struct(*(struct`),*(struct`))))->(int))
,	O
struct	O
mu_cfg_param	struct(*(char),int,*(void),long,*((*(void),*(struct(int,union(*`,*`,struct`))))->(int)),*(char),*(char))
*	O
param	*(struct)
)	O
{	O
return	O
mu_config_container_register_section	(*(*(struct(enum(int,int),*(struct`),union(*`,struct`,struct`)))),*(char),*(char),*(char),*((enum(int,int),*(struct(struct`,enum(int,int,int),*`,*`,*`,*`)),*(char),*(*(void)),*(void),*(struct(*`,*`)))->(int)),*(struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char))),*(*(struct(*(char),*(char),*((enum(int,int),*`,*`,*`,*`,*`)->(int)),*(void),long,*(struct`),*(char),*(void)))))->(int)
(	O
&	O
root_container	*(struct(enum(int,int),*(struct),union(*(char),struct(*(char),*(char),*((enum(int,int),*`,*`,*`,*`,*`)->(int)),*(void),long,*(struct`),*(char),*(void)),struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char)))))
,	O
parent_path	*(char)
,	O
ident	*(char)
,	O
label	*(struct(int,union(*(struct),*(char),struct(long,*(struct`)))))
,	O
parser	*((enum(int,int),*(struct(struct(struct`,struct`),enum(int,int,int),*(char),*(struct`),*(struct`),*(struct`))),*(char),*(*(void)),*(void),*(struct(*(struct`),*(struct`))))->(int))
,	O
param	*(struct)
,	O
NULL	O
)	O
;	O
}	O
int	O
mu_config_register_plain_section	(*(char),*(char),*(struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char))))->(int)
(	O
const	O
char	O
*	O
parent_path	*(char)
,	O
const	O
char	O
*	O
ident	*(char)
,	O
struct	O
mu_cfg_param	struct(*(char),int,*(void),long,*((*(void),*(struct(int,union(*`,*`,struct`))))->(int)),*(char),*(char))
*	O
params	*(struct(*(char),int,*(void),long,*((*(void),*(struct`))->(int)),*(char),*(char)))
)	O
{	O
return	O
mu_config_root_register_section	(*(char),*(char),*(char),*((enum(int,int),*(struct(struct`,enum(int,int,int),*`,*`,*`,*`)),*(char),*(*(void)),*(void),*(struct(*`,*`)))->(int)),*(struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char))))->(int)
(	O
parent_path	*(char)
,	O
ident	*(char)
,	O
NULL	O
,	O
NULL	O
,	O
params	*(struct(*(char),int,*(void),long,*((*(void),*(struct`))->(int)),*(char),*(char)))
)	O
;	O
}	O
struct	O
mu_cfg_cont	struct(enum(int,int),*(struct),union(*(char),struct(*(char),*(char),*((enum(int,int),*(struct`),*(char),*(*`),*(void),*(struct`))->(int)),*(void),long,*(struct),*(char),*(void)),struct(*(char),int,*(void),long,*((*(void),*(struct`))->(int)),*(char),*(char))))
*	O
mu_config_clone_root_container	()->(*(struct(enum(int,int),*(struct),union(*(char),struct(*`,*`,*`,*`,long,*`,*`,*`),struct(*`,int,*`,long,*`,*`,*`)))))
(	O
void	O
)	O
{	O
struct	O
mu_cfg_cont	struct(enum(int,int),*(struct),union(*(char),struct(*(char),*(char),*((enum(int,int),*(struct`),*(char),*(*`),*(void),*(struct`))->(int)),*(void),long,*(struct),*(char),*(void)),struct(*(char),int,*(void),long,*((*(void),*(struct`))->(int)),*(char),*(char))))
*	O
cont	*(struct(enum(int,int),*(struct),union(*(char),struct(*(char),*(char),*((enum(int,int),*`,*`,*`,*`,*`)->(int)),*(void),long,*(struct`),*(char),*(void)),struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char)))))
=	O
root_container	*(struct(enum(int,int),*(struct),union(*(char),struct(*(char),*(char),*((enum(int,int),*`,*`,*`,*`,*`)->(int)),*(void),long,*(struct`),*(char),*(void)),struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char)))))
;	O
mu_config_clone_container	(*(struct(enum(int,int),*(struct),union(*(char),struct(*`,*`,*`,*`,long,*`,*`,*`),struct(*`,int,*`,long,*`,*`,*`)))))->(int)
(	O
cont	*(struct(enum(int,int),*(struct),union(*(char),struct(*(char),*(char),*((enum(int,int),*`,*`,*`,*`,*`)->(int)),*(void),long,*(struct`),*(char),*(void)),struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char)))))
)	O
;	O
return	O
cont	*(struct(enum(int,int),*(struct),union(*(char),struct(*(char),*(char),*((enum(int,int),*`,*`,*`,*`,*`)->(int)),*(void),long,*(struct`),*(char),*(void)),struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char)))))
;	O
}	O
static	O
struct	O
mu_cfg_cont	struct(enum(int,int),*(struct),union(*(char),struct(*(char),*(char),*((enum(int,int),*(struct`),*(char),*(*`),*(void),*(struct`))->(int)),*(void),long,*(struct),*(char),*(void)),struct(*(char),int,*(void),long,*((*(void),*(struct`))->(int)),*(char),*(char))))
*	O
mu_build_container	(*(struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char))))->(*(struct(enum(int,int),*(struct),union(*(char),struct(*`,*`,*`,*`,long,*`,*`,*`),struct(*`,int,*`,long,*`,*`,*`)))))
(	O
struct	O
mu_cfg_param	struct(*(char),int,*(void),long,*((*(void),*(struct(int,union(*`,*`,struct`))))->(int)),*(char),*(char))
*	O
param	*(struct)
)	O
{	O
struct	O
mu_cfg_cont	struct(enum(int,int),*(struct),union(*(char),struct(*(char),*(char),*((enum(int,int),*(struct`),*(char),*(*`),*(void),*(struct`))->(int)),*(void),long,*(struct),*(char),*(void)),struct(*(char),int,*(void),long,*((*(void),*(struct`))->(int)),*(char),*(char))))
*	O
cont	*(struct(enum(int,int),*(struct),union(*(char),struct(*(char),*(char),*((enum(int,int),*`,*`,*`,*`,*`)->(int)),*(void),long,*(struct`),*(char),*(void)),struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char)))))
=	O
mu_config_clone_root_container	()->(*(struct(enum(int,int),*(struct),union(*(char),struct(*`,*`,*`,*`,long,*`,*`,*`),struct(*`,int,*`,long,*`,*`,*`)))))
(	O
)	O
;	O
mu_config_container_register_section	(*(*(struct(enum(int,int),*(struct`),union(*`,struct`,struct`)))),*(char),*(char),*(char),*((enum(int,int),*(struct(struct`,enum(int,int,int),*`,*`,*`,*`)),*(char),*(*(void)),*(void),*(struct(*`,*`)))->(int)),*(struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char))),*(*(struct(*(char),*(char),*((enum(int,int),*`,*`,*`,*`,*`)->(int)),*(void),long,*(struct`),*(char),*(void)))))->(int)
(	O
&	O
cont	*(struct(enum(int,int),*(struct),union(*(char),struct(*(char),*(char),*((enum(int,int),*`,*`,*`,*`,*`)->(int)),*(void),long,*(struct`),*(char),*(void)),struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char)))))
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
param	*(struct)
,	O
NULL	O
)	O
;	O
return	O
cont	*(struct(enum(int,int),*(struct),union(*(char),struct(*(char),*(char),*((enum(int,int),*`,*`,*`,*`,*`)->(int)),*(void),long,*(struct`),*(char),*(void)),struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char)))))
;	O
}	O
int	O
mu_cfg_tree_reduce	(*(struct(*(struct),*(struct))),*(struct(int,*(char),*(char),*(char))),*(struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char))),*(void))->(int)
(	O
mu_cfg_tree_t	struct
*	O
parse_tree	*(struct(*(struct),*(struct)))
,	O
struct	O
mu_cfg_parse_hints	struct(int,*(char),*(char),*(char))
*	O
hints	*(struct(*(char),*(char)))
,	O
struct	O
mu_cfg_param	struct(*(char),int,*(void),long,*((*(void),*(struct(int,union(*`,*`,struct`))))->(int)),*(char),*(char))
*	O
progparam	*(struct(*(char),int,*(void),long,*((*(void),*(struct`))->(int)),*(char),*(char)))
,	O
void	O
*	O
target_ptr	*(void)
)	O
{	O
int	O
rc	int
=	O
0	int
;	O
struct	O
mu_cfg_cont	struct(enum(int,int),*(struct),union(*(char),struct(*(char),*(char),*((enum(int,int),*(struct`),*(char),*(*`),*(void),*(struct`))->(int)),*(void),long,*(struct),*(char),*(void)),struct(*(char),int,*(void),long,*((*(void),*(struct`))->(int)),*(char),*(char))))
*	O
cont	*(struct(enum(int,int),*(struct),union(*(char),struct(*(char),*(char),*((enum(int,int),*`,*`,*`,*`,*`)->(int)),*(void),long,*(struct`),*(char),*(void)),struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char)))))
;	O
if	O
(	O
!	O
parse_tree	*(struct(*(struct),*(struct)))
)	O
return	O
0	int
;	O
if	O
(	O
hints	*(struct(*(char),*(char)))
&&	O
(	O
hints	*(struct(*(char),*(char)))
->	O
flags	int
&	O
MU_CF_DUMP	int
)	O
)	O
{	O
int	O
yes	int
=	O
1	int
;	O
mu_stream_t	*(struct)
stream	*(struct)
;	O
mu_stdio_stream_create	(*(*(struct)),int,int)->(int)
(	O
&	O
stream	*(struct)
,	O
MU_STDERR_FD	int
,	O
0	int
)	O
;	O
mu_stream_ioctl	(*(struct),int,int,*(void))->(int)
(	O
stream	*(struct)
,	O
MU_IOCTL_FD	int
,	O
MU_IOCTL_FD_SET_BORROW	int
,	O
&	O
yes	int
)	O
;	O
mu_cfg_format_parse_tree	(*(struct),*(struct(*(struct),*(struct))),int)->(void)
(	O
stream	*(struct)
,	O
parse_tree	*(struct(*(struct),*(struct)))
,	O
MU_CF_FMT_LOCUS	int
)	O
;	O
mu_stream_destroy	(*(*(struct)))->(void)
(	O
&	O
stream	*(struct)
)	O
;	O
}	O
cont	*(struct(enum(int,int),*(struct),union(*(char),struct(*(char),*(char),*((enum(int,int),*`,*`,*`,*`,*`)->(int)),*(void),long,*(struct`),*(char),*(void)),struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char)))))
=	O
mu_build_container	(*(struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char))))->(*(struct(enum(int,int),*(struct),union(*(char),struct(*`,*`,*`,*`,long,*`,*`,*`),struct(*`,int,*`,long,*`,*`,*`)))))
(	O
progparam	*(struct(*(char),int,*(void),long,*((*(void),*(struct`))->(int)),*(char),*(char)))
)	O
;	O
rc	int
=	O
mu_cfg_scan_tree	(*(struct(*(struct),*(struct))),*(struct(*(char),*(char),*((enum(int,int),*`,*`,*`,*`,*`)->(int)),*(void),long,*(struct),*(char),*(void))),*(void),*(void))->(int)
(	O
parse_tree	*(struct(*(struct),*(struct)))
,	O
&	O
cont	*(struct(enum(int,int),*(struct),union(*(char),struct(*(char),*(char),*((enum(int,int),*`,*`,*`,*`,*`)->(int)),*(void),long,*(struct`),*(char),*(void)),struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char)))))
->	O
v	*(struct(int))
.	O
section	struct(*(char),*(char),*((enum(int,int),*(struct(struct`,enum(int,int,int),*`,*`,*`,*`)),*(char),*(*(void)),*(void),*(struct(*`,*`)))->(int)),*(void),long,*(struct),*(char),*(void))
,	O
target_ptr	*(void)
,	O
NULL	O
)	O
;	O
mu_config_destroy_container	(*(*(struct(enum(int,int),*(struct`),union(*`,struct`,struct`)))))->(void)
(	O
&	O
cont	*(struct(enum(int,int),*(struct),union(*(char),struct(*(char),*(char),*((enum(int,int),*`,*`,*`,*`,*`)->(int)),*(void),long,*(struct`),*(char),*(void)),struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char)))))
)	O
;	O
return	O
rc	int
;	O
}	O
void	O
mu_format_config_tree	(*(struct),*(struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char))))->(void)
(	O
mu_stream_t	*(struct)
stream	*(struct)
,	O
struct	O
mu_cfg_param	struct(*(char),int,*(void),long,*((*(void),*(struct(int,union(*`,*`,struct`))))->(int)),*(char),*(char))
*	O
progparam	*(struct(*(char),int,*(void),long,*((*(void),*(struct`))->(int)),*(char),*(char)))
)	O
{	O
struct	O
mu_cfg_cont	struct(enum(int,int),*(struct),union(*(char),struct(*(char),*(char),*((enum(int,int),*(struct`),*(char),*(*`),*(void),*(struct`))->(int)),*(void),long,*(struct),*(char),*(void)),struct(*(char),int,*(void),long,*((*(void),*(struct`))->(int)),*(char),*(char))))
*	O
cont	*(struct(enum(int,int),*(struct),union(*(char),struct(*(char),*(char),*((enum(int,int),*`,*`,*`,*`,*`)->(int)),*(void),long,*(struct`),*(char),*(void)),struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char)))))
=	O
mu_build_container	(*(struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char))))->(*(struct(enum(int,int),*(struct),union(*(char),struct(*`,*`,*`,*`,long,*`,*`,*`),struct(*`,int,*`,long,*`,*`,*`)))))
(	O
progparam	*(struct(*(char),int,*(void),long,*((*(void),*(struct`))->(int)),*(char),*(char)))
)	O
;	O
mu_cfg_format_container	(*(struct),*(struct(enum(int,int),*(struct),union(*(char),struct(*`,*`,*`,*`,long,*`,*`,*`),struct(*`,int,*`,long,*`,*`,*`)))))->(void)
(	O
stream	*(struct)
,	O
cont	*(struct(enum(int,int),*(struct),union(*(char),struct(*(char),*(char),*((enum(int,int),*`,*`,*`,*`,*`)->(int)),*(void),long,*(struct`),*(char),*(void)),struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char)))))
)	O
;	O
mu_config_destroy_container	(*(*(struct(enum(int,int),*(struct`),union(*`,struct`,struct`)))))->(void)
(	O
&	O
cont	*(struct(enum(int,int),*(struct),union(*(char),struct(*(char),*(char),*((enum(int,int),*`,*`,*`,*`,*`)->(int)),*(void),long,*(struct`),*(char),*(void)),struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char)))))
)	O
;	O
}	O
static	O
const	O
char	O
*	O
_first_value_ptr	(*(struct(int,union(*(struct`),*(char),struct(long,*`)))))->(*(char))
(	O
mu_config_value_t	struct
*	O
val	array(int)
)	O
{	O
switch	O
(	O
val	array(int)
->	O
type	enum(int,int,int,int)
)	O
{	O
case	O
MU_CFG_STRING	int
:	O
return	O
val	array(int)
->	O
v	*(struct(int))
.	O
string	*(*(char))
;	O
case	O
MU_CFG_ARRAY	int
:	O
return	O
_first_value_ptr	(*(struct(int,union(*(struct`),*(char),struct(long,*`)))))->(*(char))
(	O
val	array(int)
->	O
v	*(struct(int))
.	O
arg	*(char)
.	O
v	*(struct(int))
)	O
;	O
case	O
MU_CFG_LIST	int
:	O
mu_list_get	(*(struct),long,*(*(void)))->(int)
(	O
val	array(int)
->	O
v	*(struct(int))
.	O
list	*(struct)
,	O
0	int
,	O
(	O
void	O
*	O
*	O
)	O
&	O
val	array(int)
)	O
;	O
return	O
_first_value_ptr	(*(struct(int,union(*(struct`),*(char),struct(long,*`)))))->(*(char))
(	O
val	array(int)
)	O
;	O
}	O
return	O
""	*(char)
;	O
}	O
int	O
mu_cfg_assert_value_type	(*(struct(int,union(*(struct`),*(char),struct(long,*`)))),int)->(int)
(	O
mu_config_value_t	struct
*	O
val	array(int)
,	O
int	O
type	enum(int,int,int,int)
)	O
{	O
if	O
(	O
!	O
val	array(int)
)	O
{	O
mu_error	(*(char))->(int)
(	O
_	O
(	O
"required argument missing"	*(char)
)	O
)	O
;	O
return	O
1	int
;	O
}	O
if	O
(	O
type	enum(int,int,int,int)
==	O
MU_CFG_ARRAY	int
)	O
{	O
if	O
(	O
val	array(int)
->	O
type	enum(int,int,int,int)
==	O
MU_CFG_STRING	int
)	O
{	O
mu_config_value_t	struct
*	O
arr	*(struct(int,union(*(struct),*(char),struct(long,*(struct`)))))
=	O
mu_calloc	(long,long)->(*(void))
(	O
1	int
,	O
sizeof	O
arr	*(struct(int,union(*(struct),*(char),struct(long,*(struct`)))))
[	O
0	int
]	O
)	O
;	O
arr	*(struct(int,union(*(struct),*(char),struct(long,*(struct`)))))
[	O
0	int
]	O
=	O
*	O
val	array(int)
;	O
val	array(int)
->	O
v	*(struct(int))
.	O
arg	*(char)
.	O
c	char
=	O
1	int
;	O
val	array(int)
->	O
v	*(struct(int))
.	O
arg	*(char)
.	O
v	*(struct(int))
=	O
arr	*(struct(int,union(*(struct),*(char),struct(long,*(struct`)))))
;	O
val	array(int)
->	O
type	enum(int,int,int,int)
=	O
MU_CFG_ARRAY	int
;	O
}	O
}	O
if	O
(	O
val	array(int)
->	O
type	enum(int,int,int,int)
!=	O
type	enum(int,int,int,int)
)	O
{	O
mu_error	(*(char))->(int)
(	O
_	O
(	O
"unexpected value: %s"	*(char)
)	O
,	O
_first_value_ptr	(*(struct(int,union(*(struct`),*(char),struct(long,*`)))))->(*(char))
(	O
val	array(int)
)	O
)	O
;	O
return	O
1	int
;	O
}	O
return	O
0	int
;	O
}	O
int	O
mu_cfg_string_value_cb	(*(struct(int,union(*(struct`),*(char),struct(long,*`)))),*((*(char),*(void))->(int)),*(void))->(int)
(	O
mu_config_value_t	struct
*	O
val	array(int)
,	O
int	O
(	O
*	O
fun	*((*(char),*(void))->(int))
)	O
(	O
const	O
char	O
*	O
,	O
void	O
*	O
)	O
,	O
void	O
*	O
data	*(void)
)	O
{	O
int	O
rc	int
=	O
0	int
;	O
switch	O
(	O
val	array(int)
->	O
type	enum(int,int,int,int)
)	O
{	O
case	O
MU_CFG_STRING	int
:	O
return	O
fun	*((*(char),*(void))->(int))
(	O
val	array(int)
->	O
v	*(struct(int))
.	O
string	*(*(char))
,	O
data	*(void)
)	O
;	O
break	O
;	O
case	O
MU_CFG_ARRAY	int
:	O
{	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
val	array(int)
->	O
v	*(struct(int))
.	O
arg	*(char)
.	O
c	char
;	O
i	int
++	O
)	O
{	O
if	O
(	O
mu_cfg_assert_value_type	(*(struct(int,union(*(struct`),*(char),struct(long,*`)))),int)->(int)
(	O
&	O
val	array(int)
->	O
v	*(struct(int))
.	O
arg	*(char)
.	O
v	*(struct(int))
[	O
i	int
]	O
,	O
MU_CFG_STRING	int
)	O
)	O
return	O
1	int
;	O
fun	*((*(char),*(void))->(int))
(	O
val	array(int)
->	O
v	*(struct(int))
.	O
arg	*(char)
.	O
v	*(struct(int))
[	O
i	int
]	O
.	O
v	*(struct(int))
.	O
string	*(*(char))
,	O
data	*(void)
)	O
;	O
}	O
}	O
break	O
;	O
case	O
MU_CFG_LIST	int
:	O
{	O
mu_iterator_t	*(struct)
itr	*(struct)
;	O
mu_list_get_iterator	(*(struct),*(*(struct)))->(int)
(	O
val	array(int)
->	O
v	*(struct(int))
.	O
list	*(struct)
,	O
&	O
itr	*(struct)
)	O
;	O
for	O
(	O
mu_iterator_first	(*(struct))->(int)
(	O
itr	*(struct)
)	O
;	O
!	O
mu_iterator_is_done	(*(struct))->(int)
(	O
itr	*(struct)
)	O
;	O
mu_iterator_next	(*(struct))->(int)
(	O
itr	*(struct)
)	O
)	O
{	O
mu_config_value_t	struct
*	O
pval	*(void)
;	O
mu_iterator_current	(*(struct),*(*(void)))->(int)
(	O
itr	*(struct)
,	O
(	O
void	O
*	O
)	O
&	O
pval	*(void)
)	O
;	O
if	O
(	O
mu_cfg_assert_value_type	(*(struct(int,union(*(struct`),*(char),struct(long,*`)))),int)->(int)
(	O
pval	*(void)
,	O
MU_CFG_STRING	int
)	O
)	O
{	O
rc	int
=	O
1	int
;	O
break	O
;	O
}	O
fun	*((*(char),*(void))->(int))
(	O
pval	*(void)
->	O
v	*(struct(int))
.	O
string	*(*(char))
,	O
data	*(void)
)	O
;	O
}	O
mu_iterator_destroy	(*(*(struct)))->(void)
(	O
&	O
itr	*(struct)
)	O
;	O
}	O
}	O
return	O
rc	int
;	O
}	O
struct	O
mapping_closure	struct(*(struct),*(char))
{	O
mu_assoc_t	*(struct)
assoc	*(struct)
;	O
char	O
*	O
err_term	*(*(char))
;	O
}	O
;	O
static	O
int	O
parse_mapping_str	(*(void),*(void))->(int)
(	O
void	O
*	O
item	*(void)
,	O
void	O
*	O
data	*(void)
)	O
{	O
struct	O
mapping_closure	struct(*(struct),*(char))
*	O
clos	*(struct(*(struct),*(char)))
=	O
data	*(void)
;	O
char	O
const	O
*	O
str	*(struct(int,*(char),*(char),*(char),*(char)))
=	O
item	*(void)
;	O
size_t	long
len	int
;	O
char	O
*	O
key	*(*(void))
,	O
*	O
val	array(int)
;	O
int	O
rc	int
;	O
len	int
=	O
strcspn	(*(char),*(char))->(long)
(	O
str	*(struct(int,*(char),*(char),*(char),*(char)))
,	O
"="	*(char)
)	O
;	O
if	O
(	O
str	*(struct(int,*(char),*(char),*(char),*(char)))
[	O
len	int
]	O
==	O
0	int
)	O
{	O
clos	*(struct(*(struct),*(char)))
->	O
err_term	*(*(char))
=	O
mu_strdup	(*(char))->(*(char))
(	O
str	*(struct(int,*(char),*(char),*(char),*(char)))
)	O
;	O
return	O
MU_ERR_PARSE	O
;	O
}	O
key	*(*(void))
=	O
mu_alloc	(long)->(*(void))
(	O
len	int
+	O
1	int
)	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
key	*(*(void))
,	O
str	*(struct(int,*(char),*(char),*(char),*(char)))
,	O
len	int
)	O
;	O
key	*(*(void))
[	O
len	int
]	O
=	O
0	int
;	O
val	array(int)
=	O
mu_strdup	(*(char))->(*(char))
(	O
str	*(struct(int,*(char),*(char),*(char),*(char)))
+	O
len	int
+	O
1	int
)	O
;	O
if	O
(	O
!	O
val	array(int)
)	O
return	O
ENOMEM	int
;	O
rc	int
=	O
mu_assoc_install	(*(struct),*(char),*(void))->(int)
(	O
clos	*(struct(*(struct),*(char)))
->	O
assoc	*(struct)
,	O
key	*(*(void))
,	O
val	array(int)
)	O
;	O
free	(*(void))->(void)
(	O
key	*(*(void))
)	O
;	O
return	O
rc	int
;	O
}	O
static	O
int	O
parse_mapping_val	(*(void),*(void))->(int)
(	O
void	O
*	O
item	*(void)
,	O
void	O
*	O
data	*(void)
)	O
{	O
struct	O
mu_config_value	struct(int,union(*(struct),*(char),struct(long,*(struct(int,union(*`,*`,struct`))))))
*	O
cval	*(struct(int,union(*(struct),*(char),struct(long,*(struct`)))))
=	O
item	*(void)
;	O
if	O
(	O
mu_cfg_assert_value_type	(*(struct(int,union(*(struct`),*(char),struct(long,*`)))),int)->(int)
(	O
cval	*(struct(int,union(*(struct),*(char),struct(long,*(struct`)))))
,	O
MU_CFG_STRING	int
)	O
)	O
return	O
MU_ERR_PARSE	O
;	O
return	O
parse_mapping_str	(*(void),*(void))->(int)
(	O
(	O
void	O
*	O
)	O
cval	*(struct(int,union(*(struct),*(char),struct(long,*(struct`)))))
->	O
v	*(struct(int))
.	O
string	*(*(char))
,	O
data	*(void)
)	O
;	O
}	O
int	O
mu_cfg_field_map	(*(struct(int,union(*(struct`),*(char),struct(long,*`)))),*(*(struct)),*(*(char)))->(int)
(	O
struct	O
mu_config_value	struct(int,union(*(struct),*(char),struct(long,*(struct(int,union(*`,*`,struct`))))))
const	O
*	O
val	array(int)
,	O
mu_assoc_t	*(struct)
*	O
passoc	*(*(struct))
,	O
char	O
*	O
*	O
err_term	*(*(char))
)	O
{	O
int	O
rc	int
;	O
struct	O
mapping_closure	struct(*(struct),*(char))
clos	*(struct(*(struct),*(char)))
;	O
mu_list_t	*(struct)
list	*(struct)
=	O
NULL	O
;	O
rc	int
=	O
mu_assoc_create	(*(*(struct)),int)->(int)
(	O
&	O
clos	*(struct(*(struct),*(char)))
.	O
assoc	*(struct)
,	O
0	int
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
mu_assoc_set_destroy_item	(*(struct),*((*(void))->(void)))->(int)
(	O
clos	*(struct(*(struct),*(char)))
.	O
assoc	*(struct)
,	O
mu_list_free_item	(*(void))->(void)
)	O
;	O
clos	*(struct(*(struct),*(char)))
.	O
err_term	*(*(char))
=	O
NULL	O
;	O
switch	O
(	O
val	array(int)
->	O
type	enum(int,int,int,int)
)	O
{	O
case	O
MU_CFG_STRING	int
:	O
mu_list_create	(*(*(struct)))->(int)
(	O
&	O
list	*(struct)
)	O
;	O
mu_list_set_destroy_item	(*(struct),*((*(void))->(void)))->(*((*(void))->(void)))
(	O
list	*(struct)
,	O
mu_list_free_item	(*(void))->(void)
)	O
;	O
rc	int
=	O
mu_string_split	(*(char),*(char),*(struct))->(int)
(	O
val	array(int)
->	O
v	*(struct(int))
.	O
string	*(*(char))
,	O
":"	*(char)
,	O
list	*(struct)
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
rc	int
=	O
mu_list_foreach	(*(struct),*((*(void),*(void))->(int)),*(void))->(int)
(	O
list	*(struct)
,	O
parse_mapping_str	(*(void),*(void))->(int)
,	O
&	O
clos	*(struct(*(struct),*(char)))
)	O
;	O
mu_list_destroy	(*(*(struct)))->(void)
(	O
&	O
list	*(struct)
)	O
;	O
break	O
;	O
case	O
MU_CFG_LIST	int
:	O
rc	int
=	O
mu_list_foreach	(*(struct),*((*(void),*(void))->(int)),*(void))->(int)
(	O
val	array(int)
->	O
v	*(struct(int))
.	O
list	*(struct)
,	O
parse_mapping_val	(*(void),*(void))->(int)
,	O
&	O
clos	*(struct(*(struct),*(char)))
)	O
;	O
break	O
;	O
case	O
MU_CFG_ARRAY	int
:	O
rc	int
=	O
EINVAL	int
;	O
}	O
if	O
(	O
rc	int
)	O
{	O
if	O
(	O
rc	int
==	O
MU_ERR_PARSE	O
)	O
{	O
if	O
(	O
err_term	*(*(char))
)	O
*	O
err_term	*(*(char))
=	O
clos	*(struct(*(struct),*(char)))
.	O
err_term	*(*(char))
;	O
else	O
free	(*(void))->(void)
(	O
clos	*(struct(*(struct),*(char)))
.	O
err_term	*(*(char))
)	O
;	O
}	O
else	O
mu_error	(*(char))->(int)
(	O
"%s:%d: %s"	*(char)
,	O
__FILE__	O
,	O
__LINE__	O
,	O
mu_strerror	(int)->(*(char))
(	O
rc	int
)	O
)	O
;	O
mu_assoc_destroy	(*(*(struct)))->(void)
(	O
&	O
clos	*(struct(*(struct),*(char)))
.	O
assoc	*(struct)
)	O
;	O
}	O
else	O
*	O
passoc	*(*(struct))
=	O
clos	*(struct(*(struct),*(char)))
.	O
assoc	*(struct)
;	O
return	O
rc	int
;	O
}	O
