void	O
mpf_sub	O
(	O
mpf_ptr	*(struct(int,int,long,*(long)))
r	*(struct(int,int,long,*(long)))
,	O
mpf_srcptr	*(struct(int,int,long,*(long)))
u	array(array(long))
,	O
mpf_srcptr	*(struct(int,int,long,*(long)))
v	*(struct(int,int,long,*(long)))
)	O
{	O
mp_srcptr	*(long)
up	*(long)
,	O
vp	*(long)
;	O
mp_ptr	*(long)
rp	*(long)
,	O
tp	*(long)
;	O
mp_size_t	long
usize	*(long)
,	O
vsize	long
,	O
rsize	long
;	O
mp_size_t	long
prec	int
;	O
mp_exp_t	long
exp	int
;	O
mp_size_t	long
ediff	long
;	O
int	O
negate	int
;	O
TMP_DECL	O
;	O
usize	*(long)
=	O
u	array(array(long))
->	O
_mp_size	int
;	O
vsize	long
=	O
v	*(struct(int,int,long,*(long)))
->	O
_mp_size	int
;	O
if	O
(	O
usize	*(long)
==	O
0	int
)	O
{	O
mpf_neg	O
(	O
r	*(struct(int,int,long,*(long)))
,	O
v	*(struct(int,int,long,*(long)))
)	O
;	O
return	O
;	O
}	O
if	O
(	O
vsize	long
==	O
0	int
)	O
{	O
if	O
(	O
r	*(struct(int,int,long,*(long)))
!=	O
u	array(array(long))
)	O
mpf_set	O
(	O
r	*(struct(int,int,long,*(long)))
,	O
u	array(array(long))
)	O
;	O
return	O
;	O
}	O
if	O
(	O
(	O
usize	*(long)
^	O
vsize	long
)	O
<	O
0	int
)	O
{	O
__mpf_struct	struct(int,int,long,*(long))
v_negated	struct(int,int,long,*(long))
;	O
v_negated	struct(int,int,long,*(long))
.	O
_mp_size	int
=	O
-	O
vsize	long
;	O
v_negated	struct(int,int,long,*(long))
.	O
_mp_exp	long
=	O
v	*(struct(int,int,long,*(long)))
->	O
_mp_exp	long
;	O
v_negated	struct(int,int,long,*(long))
.	O
_mp_d	*(long)
=	O
v	*(struct(int,int,long,*(long)))
->	O
_mp_d	*(long)
;	O
mpf_add	O
(	O
r	*(struct(int,int,long,*(long)))
,	O
u	array(array(long))
,	O
&	O
v_negated	struct(int,int,long,*(long))
)	O
;	O
return	O
;	O
}	O
TMP_MARK	O
;	O
negate	int
=	O
usize	*(long)
<	O
0	int
;	O
if	O
(	O
u	array(array(long))
->	O
_mp_exp	long
<	O
v	*(struct(int,int,long,*(long)))
->	O
_mp_exp	long
)	O
{	O
mpf_srcptr	*(struct(int,int,long,*(long)))
t	*(struct(int,int,long,*(long)))
;	O
t	*(struct(int,int,long,*(long)))
=	O
u	array(array(long))
;	O
u	array(array(long))
=	O
v	*(struct(int,int,long,*(long)))
;	O
v	*(struct(int,int,long,*(long)))
=	O
t	*(struct(int,int,long,*(long)))
;	O
negate	int
^=	O
1	int
;	O
usize	*(long)
=	O
u	array(array(long))
->	O
_mp_size	int
;	O
vsize	long
=	O
v	*(struct(int,int,long,*(long)))
->	O
_mp_size	int
;	O
}	O
usize	*(long)
=	O
ABS	O
(	O
usize	*(long)
)	O
;	O
vsize	long
=	O
ABS	O
(	O
vsize	long
)	O
;	O
up	*(long)
=	O
u	array(array(long))
->	O
_mp_d	*(long)
;	O
vp	*(long)
=	O
v	*(struct(int,int,long,*(long)))
->	O
_mp_d	*(long)
;	O
rp	*(long)
=	O
r	*(struct(int,int,long,*(long)))
->	O
_mp_d	*(long)
;	O
prec	int
=	O
r	*(struct(int,int,long,*(long)))
->	O
_mp_prec	int
+	O
1	int
;	O
exp	int
=	O
u	array(array(long))
->	O
_mp_exp	long
;	O
ediff	long
=	O
u	array(array(long))
->	O
_mp_exp	long
-	O
v	*(struct(int,int,long,*(long)))
->	O
_mp_exp	long
;	O
if	O
(	O
ediff	long
<=	O
1	int
)	O
{	O
if	O
(	O
ediff	long
==	O
0	int
)	O
{	O
if	O
(	O
up	*(long)
[	O
usize	*(long)
-	O
1	int
]	O
==	O
vp	*(long)
[	O
vsize	long
-	O
1	int
]	O
)	O
{	O
do	O
{	O
usize	*(long)
--	O
;	O
vsize	long
--	O
;	O
exp	int
--	O
;	O
if	O
(	O
usize	*(long)
==	O
0	int
)	O
{	O
negate	int
^=	O
1	int
;	O
cancellation	O
:	O
while	O
(	O
vsize	long
!=	O
0	int
&&	O
vp	*(long)
[	O
vsize	long
-	O
1	int
]	O
==	O
0	int
)	O
{	O
vsize	long
--	O
;	O
exp	int
--	O
;	O
}	O
if	O
(	O
vsize	long
>	O
prec	int
)	O
{	O
vp	*(long)
+=	O
vsize	long
-	O
prec	int
;	O
vsize	long
=	O
prec	int
;	O
}	O
MPN_COPY_INCR	O
(	O
rp	*(long)
,	O
vp	*(long)
,	O
vsize	long
)	O
;	O
rsize	long
=	O
vsize	long
;	O
goto	O
done	O
;	O
}	O
if	O
(	O
vsize	long
==	O
0	int
)	O
{	O
vp	*(long)
=	O
up	*(long)
;	O
vsize	long
=	O
usize	*(long)
;	O
goto	O
cancellation	O
;	O
}	O
}	O
while	O
(	O
up	*(long)
[	O
usize	*(long)
-	O
1	int
]	O
==	O
vp	*(long)
[	O
vsize	long
-	O
1	int
]	O
)	O
;	O
}	O
if	O
(	O
up	*(long)
[	O
usize	*(long)
-	O
1	int
]	O
<	O
vp	*(long)
[	O
vsize	long
-	O
1	int
]	O
)	O
{	O
MPN_SRCPTR_SWAP	O
(	O
up	*(long)
,	O
usize	*(long)
,	O
vp	*(long)
,	O
vsize	long
)	O
;	O
negate	int
^=	O
1	int
;	O
}	O
if	O
(	O
up	*(long)
[	O
usize	*(long)
-	O
1	int
]	O
!=	O
vp	*(long)
[	O
vsize	long
-	O
1	int
]	O
+	O
1	int
)	O
goto	O
general_case	O
;	O
usize	*(long)
--	O
;	O
vsize	long
--	O
;	O
exp	int
--	O
;	O
}	O
else	O
{	O
if	O
(	O
up	*(long)
[	O
usize	*(long)
-	O
1	int
]	O
!=	O
1	int
||	O
vp	*(long)
[	O
vsize	long
-	O
1	int
]	O
!=	O
GMP_NUMB_MAX	O
||	O
(	O
usize	*(long)
>=	O
2	int
&&	O
up	*(long)
[	O
usize	*(long)
-	O
2	int
]	O
!=	O
0	int
)	O
)	O
goto	O
general_case	O
;	O
usize	*(long)
--	O
;	O
exp	int
--	O
;	O
}	O
while	O
(	O
vsize	long
!=	O
0	int
&&	O
usize	*(long)
!=	O
0	int
&&	O
up	*(long)
[	O
usize	*(long)
-	O
1	int
]	O
==	O
0	int
&&	O
vp	*(long)
[	O
vsize	long
-	O
1	int
]	O
==	O
GMP_NUMB_MAX	O
)	O
{	O
usize	*(long)
--	O
;	O
vsize	long
--	O
;	O
exp	int
--	O
;	O
}	O
if	O
(	O
usize	*(long)
==	O
0	int
)	O
{	O
while	O
(	O
vsize	long
!=	O
0	int
&&	O
vp	*(long)
[	O
vsize	long
-	O
1	int
]	O
==	O
GMP_NUMB_MAX	O
)	O
{	O
vsize	long
--	O
;	O
exp	int
--	O
;	O
}	O
}	O
if	O
(	O
usize	*(long)
>	O
prec	int
-	O
1	int
)	O
{	O
up	*(long)
+=	O
usize	*(long)
-	O
(	O
prec	int
-	O
1	int
)	O
;	O
usize	*(long)
=	O
prec	int
-	O
1	int
;	O
}	O
if	O
(	O
vsize	long
>	O
prec	int
-	O
1	int
)	O
{	O
vp	*(long)
+=	O
vsize	long
-	O
(	O
prec	int
-	O
1	int
)	O
;	O
vsize	long
=	O
prec	int
-	O
1	int
;	O
}	O
tp	*(long)
=	O
TMP_ALLOC_LIMBS	O
(	O
prec	int
)	O
;	O
{	O
mp_limb_t	long
cy_limb	long
;	O
if	O
(	O
vsize	long
==	O
0	int
)	O
{	O
mp_size_t	long
size	long
,	O
i	long
;	O
size	long
=	O
usize	*(long)
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
size	long
;	O
i	long
++	O
)	O
tp	*(long)
[	O
i	long
]	O
=	O
up	*(long)
[	O
i	long
]	O
;	O
tp	*(long)
[	O
size	long
]	O
=	O
1	int
;	O
rsize	long
=	O
size	long
+	O
1	int
;	O
exp	int
++	O
;	O
goto	O
normalize	O
;	O
}	O
if	O
(	O
usize	*(long)
==	O
0	int
)	O
{	O
mp_size_t	long
size	long
,	O
i	long
;	O
size	long
=	O
vsize	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
size	long
;	O
i	long
++	O
)	O
tp	*(long)
[	O
i	long
]	O
=	O
~	O
vp	*(long)
[	O
i	long
]	O
&	O
GMP_NUMB_MASK	O
;	O
cy_limb	long
=	O
1	int
-	O
mpn_add_1	O
(	O
tp	*(long)
,	O
tp	*(long)
,	O
vsize	long
,	O
(	O
mp_limb_t	long
)	O
1	int
)	O
;	O
rsize	long
=	O
vsize	long
;	O
if	O
(	O
cy_limb	long
==	O
0	int
)	O
{	O
tp	*(long)
[	O
rsize	long
]	O
=	O
1	int
;	O
rsize	long
++	O
;	O
exp	int
++	O
;	O
}	O
goto	O
normalize	O
;	O
}	O
if	O
(	O
usize	*(long)
>=	O
vsize	long
)	O
{	O
mp_size_t	long
size	long
;	O
size	long
=	O
usize	*(long)
-	O
vsize	long
;	O
MPN_COPY	O
(	O
tp	*(long)
,	O
up	*(long)
,	O
size	long
)	O
;	O
cy_limb	long
=	O
mpn_sub_n	O
(	O
tp	*(long)
+	O
size	long
,	O
up	*(long)
+	O
size	long
,	O
vp	*(long)
,	O
vsize	long
)	O
;	O
rsize	long
=	O
usize	*(long)
;	O
}	O
else	O
{	O
mp_size_t	long
size	long
,	O
i	long
;	O
size	long
=	O
vsize	long
-	O
usize	*(long)
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
size	long
;	O
i	long
++	O
)	O
tp	*(long)
[	O
i	long
]	O
=	O
~	O
vp	*(long)
[	O
i	long
]	O
&	O
GMP_NUMB_MASK	O
;	O
cy_limb	long
=	O
mpn_sub_n	O
(	O
tp	*(long)
+	O
size	long
,	O
up	*(long)
,	O
vp	*(long)
+	O
size	long
,	O
usize	*(long)
)	O
;	O
cy_limb	long
+=	O
mpn_sub_1	O
(	O
tp	*(long)
+	O
size	long
,	O
tp	*(long)
+	O
size	long
,	O
usize	*(long)
,	O
(	O
mp_limb_t	long
)	O
1	int
)	O
;	O
cy_limb	long
-=	O
mpn_add_1	O
(	O
tp	*(long)
,	O
tp	*(long)
,	O
vsize	long
,	O
(	O
mp_limb_t	long
)	O
1	int
)	O
;	O
rsize	long
=	O
vsize	long
;	O
}	O
if	O
(	O
cy_limb	long
==	O
0	int
)	O
{	O
tp	*(long)
[	O
rsize	long
]	O
=	O
1	int
;	O
rsize	long
++	O
;	O
exp	int
++	O
;	O
}	O
goto	O
normalize	O
;	O
}	O
}	O
general_case	O
:	O
if	O
(	O
usize	*(long)
>	O
prec	int
)	O
{	O
up	*(long)
+=	O
usize	*(long)
-	O
prec	int
;	O
usize	*(long)
=	O
prec	int
;	O
}	O
if	O
(	O
vsize	long
+	O
ediff	long
>	O
prec	int
)	O
{	O
vp	*(long)
+=	O
vsize	long
+	O
ediff	long
-	O
prec	int
;	O
vsize	long
=	O
prec	int
-	O
ediff	long
;	O
}	O
if	O
(	O
ediff	long
>=	O
prec	int
)	O
{	O
if	O
(	O
rp	*(long)
!=	O
up	*(long)
)	O
MPN_COPY	O
(	O
rp	*(long)
,	O
up	*(long)
,	O
usize	*(long)
)	O
;	O
rsize	long
=	O
usize	*(long)
;	O
}	O
else	O
{	O
tp	*(long)
=	O
TMP_ALLOC_LIMBS	O
(	O
prec	int
)	O
;	O
for	O
(	O
;	O
;	O
)	O
{	O
if	O
(	O
vsize	long
==	O
0	int
)	O
{	O
MPN_COPY	O
(	O
rp	*(long)
,	O
up	*(long)
,	O
usize	*(long)
)	O
;	O
rsize	long
=	O
usize	*(long)
;	O
goto	O
done	O
;	O
}	O
if	O
(	O
vp	*(long)
[	O
0	int
]	O
!=	O
0	int
)	O
break	O
;	O
vp	*(long)
++	O
,	O
vsize	long
--	O
;	O
}	O
for	O
(	O
;	O
;	O
)	O
{	O
if	O
(	O
usize	*(long)
==	O
0	int
)	O
{	O
MPN_COPY	O
(	O
rp	*(long)
,	O
vp	*(long)
,	O
vsize	long
)	O
;	O
rsize	long
=	O
vsize	long
;	O
negate	int
^=	O
1	int
;	O
goto	O
done	O
;	O
}	O
if	O
(	O
up	*(long)
[	O
0	int
]	O
!=	O
0	int
)	O
break	O
;	O
up	*(long)
++	O
,	O
usize	*(long)
--	O
;	O
}	O
if	O
(	O
usize	*(long)
>	O
ediff	long
)	O
{	O
if	O
(	O
ediff	long
==	O
0	int
)	O
{	O
if	O
(	O
usize	*(long)
>=	O
vsize	long
)	O
{	O
mp_size_t	long
size	long
;	O
size	long
=	O
usize	*(long)
-	O
vsize	long
;	O
MPN_COPY	O
(	O
tp	*(long)
,	O
up	*(long)
,	O
size	long
)	O
;	O
mpn_sub_n	O
(	O
tp	*(long)
+	O
size	long
,	O
up	*(long)
+	O
size	long
,	O
vp	*(long)
,	O
vsize	long
)	O
;	O
rsize	long
=	O
usize	*(long)
;	O
}	O
else	O
{	O
mp_size_t	long
size	long
,	O
i	long
;	O
size	long
=	O
vsize	long
-	O
usize	*(long)
;	O
tp	*(long)
[	O
0	int
]	O
=	O
-	O
vp	*(long)
[	O
0	int
]	O
&	O
GMP_NUMB_MASK	O
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<	O
size	long
;	O
i	long
++	O
)	O
tp	*(long)
[	O
i	long
]	O
=	O
~	O
vp	*(long)
[	O
i	long
]	O
&	O
GMP_NUMB_MASK	O
;	O
mpn_sub_n	O
(	O
tp	*(long)
+	O
size	long
,	O
up	*(long)
,	O
vp	*(long)
+	O
size	long
,	O
usize	*(long)
)	O
;	O
mpn_sub_1	O
(	O
tp	*(long)
+	O
size	long
,	O
tp	*(long)
+	O
size	long
,	O
usize	*(long)
,	O
(	O
mp_limb_t	long
)	O
1	int
)	O
;	O
rsize	long
=	O
vsize	long
;	O
}	O
}	O
else	O
{	O
if	O
(	O
vsize	long
+	O
ediff	long
<=	O
usize	*(long)
)	O
{	O
mp_size_t	long
size	long
;	O
size	long
=	O
usize	*(long)
-	O
ediff	long
-	O
vsize	long
;	O
MPN_COPY	O
(	O
tp	*(long)
,	O
up	*(long)
,	O
size	long
)	O
;	O
mpn_sub	O
(	O
tp	*(long)
+	O
size	long
,	O
up	*(long)
+	O
size	long
,	O
usize	*(long)
-	O
size	long
,	O
vp	*(long)
,	O
vsize	long
)	O
;	O
rsize	long
=	O
usize	*(long)
;	O
}	O
else	O
{	O
mp_size_t	long
size	long
,	O
i	long
;	O
size	long
=	O
vsize	long
+	O
ediff	long
-	O
usize	*(long)
;	O
tp	*(long)
[	O
0	int
]	O
=	O
-	O
vp	*(long)
[	O
0	int
]	O
&	O
GMP_NUMB_MASK	O
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<	O
size	long
;	O
i	long
++	O
)	O
tp	*(long)
[	O
i	long
]	O
=	O
~	O
vp	*(long)
[	O
i	long
]	O
&	O
GMP_NUMB_MASK	O
;	O
mpn_sub	O
(	O
tp	*(long)
+	O
size	long
,	O
up	*(long)
,	O
usize	*(long)
,	O
vp	*(long)
+	O
size	long
,	O
usize	*(long)
-	O
ediff	long
)	O
;	O
mpn_sub_1	O
(	O
tp	*(long)
+	O
size	long
,	O
tp	*(long)
+	O
size	long
,	O
usize	*(long)
,	O
(	O
mp_limb_t	long
)	O
1	int
)	O
;	O
rsize	long
=	O
vsize	long
+	O
ediff	long
;	O
}	O
}	O
}	O
else	O
{	O
mp_size_t	long
size	long
,	O
i	long
;	O
size	long
=	O
vsize	long
+	O
ediff	long
-	O
usize	*(long)
;	O
tp	*(long)
[	O
0	int
]	O
=	O
-	O
vp	*(long)
[	O
0	int
]	O
&	O
GMP_NUMB_MASK	O
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<	O
vsize	long
;	O
i	long
++	O
)	O
tp	*(long)
[	O
i	long
]	O
=	O
~	O
vp	*(long)
[	O
i	long
]	O
&	O
GMP_NUMB_MASK	O
;	O
for	O
(	O
i	long
=	O
vsize	long
;	O
i	long
<	O
size	long
;	O
i	long
++	O
)	O
tp	*(long)
[	O
i	long
]	O
=	O
GMP_NUMB_MAX	O
;	O
mpn_sub_1	O
(	O
tp	*(long)
+	O
size	long
,	O
up	*(long)
,	O
usize	*(long)
,	O
(	O
mp_limb_t	long
)	O
1	int
)	O
;	O
rsize	long
=	O
size	long
+	O
usize	*(long)
;	O
}	O
normalize	O
:	O
while	O
(	O
rsize	long
!=	O
0	int
&&	O
tp	*(long)
[	O
rsize	long
-	O
1	int
]	O
==	O
0	int
)	O
{	O
rsize	long
--	O
;	O
exp	int
--	O
;	O
}	O
MPN_COPY	O
(	O
rp	*(long)
,	O
tp	*(long)
,	O
rsize	long
)	O
;	O
}	O
done	O
:	O
r	*(struct(int,int,long,*(long)))
->	O
_mp_size	int
=	O
negate	int
?	O
-	O
rsize	long
:	O
rsize	long
;	O
if	O
(	O
rsize	long
==	O
0	int
)	O
exp	int
=	O
0	int
;	O
r	*(struct(int,int,long,*(long)))
->	O
_mp_exp	long
=	O
exp	int
;	O
TMP_FREE	O
;	O
}	O
