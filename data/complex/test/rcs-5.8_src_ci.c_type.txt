struct	O
top	struct(*(struct(*(char),*(char),*(char),*(()->(void)))),struct(*(char),bool,bool,bool,bool,bool,bool,bool,int,bool,int,int,bool,bool,bool,int,*(char),struct(bool,long),*(char),long,bool,bool,*(char),long,*(struct(*(char),enum(int,int,int))),*(struct),*(struct),*(struct)),struct(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),struct(bool,*(char),*(char),*(char),*(char),*(char))),struct(*(char),int,struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(struct(*(char),*(char),long,*(struct),long,*(struct),long,*(struct),bool,*(struct),*(struct),int,long,*(struct),*(struct),long,*(struct),*(struct))),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)),struct(*(char),long)),struct(*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char),bool))
*	O
top	struct(*(struct(*(char),*(char),*(char),*(()->(void)))),struct(*(char),bool,bool,bool,bool,bool,bool,bool,int,bool,int,int,bool,bool,bool,int,*(char),struct(bool,long),*(char),long,bool,bool,*(char),long,*(struct(*(char),enum(int,int,int))),*(struct),*(struct),*(struct)),struct(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),struct(bool,*(char),*(char),*(char),*(char),*(char))),struct(*(char),int,struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(struct(*(char),*(char),long,*(struct),long,*(struct),long,*(struct),bool,*(struct),*(struct),int,long,*(struct),*(struct),long,*(struct),*(struct))),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)),struct(*(char),long)),struct(*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char),bool))
;	O
static	O
FILE	struct
*	O
exfile	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
;	O
static	O
struct	O
fro	struct(int,long,enum(int,int,int),*(char),*(char),*(char),*((*(struct(int,long,enum(int,int,int),*(char),*(char),*(char),*((*`)->(void)),*(struct`),long)))->(void)),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char))),long)
*	O
workptr	*(struct(int,long,enum(int,int,int),*(char),*(char),*(char),*((*(struct`))->(void)),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),long))
;	O
static	O
struct	O
cbuf	struct(*(char),long)
newdelnum	struct(*(char),long)
;	O
static	O
struct	O
cbuf	struct(*(char),long)
msg	*(char)
;	O
static	O
int	O
exitstatus	int
;	O
static	O
bool	bool
forceciflag	bool
;	O
static	O
bool	bool
keepflag	bool
,	O
keepworkingfile	bool
,	O
rcsinitflag	bool
;	O
static	O
struct	O
delta	struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long)),bool,long)
*	O
targetdelta	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
;	O
static	O
struct	O
delta	struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long)),bool,long)
newdelta	struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct(int,long,enum(int,int,int),*`,*`,*`,*`,*`,long)),long,array(long))),*(struct(long,long,long,*(struct(int,long,enum(int,int,int),*`,*`,*`,*`,*`,long)),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct(*`,*`)))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*`,long,array(long))),*(struct(long,long,long,*`,long,array(long))),*(char),struct(*(char),long),*(struct(*`,*`)),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)),bool,long)
;	O
static	O
struct	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
workstat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
;	O
static	O
struct	O
link	(*(char),*(char))->(int)
assoclst	struct(*(void),*(struct(*(void),*(struct(*`,*`)))))
;	O
static	O
void	O
cleanup	()->(void)
(	O
void	O
)	O
{	O
if	O
(	O
FLOW	O
(	O
erroneousp	bool
)	O
)	O
exitstatus	int
=	O
EXIT_FAILURE	int
;	O
fro_zclose	(*(*(struct(int,long,enum(int,int,int),*(char),*(char),*(char),*((*`)->(void)),*(struct`),long))))->(void)
(	O
&	O
FLOW	O
(	O
from	*(struct)
)	O
)	O
;	O
fro_zclose	(*(*(struct(int,long,enum(int,int,int),*(char),*(char),*(char),*((*`)->(void)),*(struct`),long))))->(void)
(	O
&	O
workptr	*(struct(int,long,enum(int,int,int),*(char),*(char),*(char),*((*(struct`))->(void)),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),long))
)	O
;	O
Ozclose	(*(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char)))))->(void)
(	O
&	O
exfile	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
Ozclose	(*(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char)))))->(void)
(	O
&	O
FLOW	O
(	O
res	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
)	O
;	O
ORCSclose	()->(void)
(	O
)	O
;	O
dirtempunlink	()->(void)
(	O
)	O
;	O
}	O
static	O
exiting	O
void	O
exiterr	*(()->(void))
(	O
void	O
)	O
{	O
ORCSerror	()->(void)
(	O
)	O
;	O
dirtempunlink	()->(void)
(	O
)	O
;	O
tempunlink	()->(void)
(	O
)	O
;	O
exit_failurefully	()->(void)
(	O
)	O
;	O
}	O
static	O
void	O
incnum	(*(char),*(struct(*(char),long)))->(void)
(	O
char	O
const	O
*	O
onum	*(char)
,	O
struct	O
cbuf	struct(*(char),long)
*	O
nnum	*(struct(*(char),long))
)	O
{	O
register	O
char	O
*	O
tp	*(struct(*(void),*(struct(*(void),*(struct`)))))
,	O
*	O
np	*(char)
;	O
register	O
size_t	long
l	long
;	O
ACCF	O
(	O
"%s%c"	*(char)
,	O
onum	*(char)
,	O
'\0'	O
)	O
;	O
np	*(char)
=	O
finish_string	(*(struct(*(char),*(struct),*(void),long)),*(long))->(*(char))
(	O
PLEXUS	O
,	O
&	O
nnum	*(struct(*(char),long))
->	O
size	long
)	O
;	O
nnum	*(struct(*(char),long))
->	O
string	*(char)
=	O
np	*(char)
;	O
l	long
=	O
nnum	*(struct(*(char),long))
->	O
size	long
-	O
1	int
;	O
for	O
(	O
tp	*(struct(*(void),*(struct(*(void),*(struct`)))))
=	O
np	*(char)
+	O
l	long
;	O
np	*(char)
!=	O
tp	*(struct(*(void),*(struct(*(void),*(struct`)))))
;	O
)	O
if	O
(	O
isdigit	(int)->(int)
(	O
*	O
--	O
tp	*(struct(*(void),*(struct(*(void),*(struct`)))))
)	O
)	O
{	O
if	O
(	O
*	O
tp	*(struct(*(void),*(struct(*(void),*(struct`)))))
!=	O
'9'	O
)	O
{	O
++	O
*	O
tp	*(struct(*(void),*(struct(*(void),*(struct`)))))
;	O
nnum	*(struct(*(char),long))
->	O
size	long
--	O
;	O
return	O
;	O
}	O
*	O
tp	*(struct(*(void),*(struct(*(void),*(struct`)))))
=	O
'0'	O
;	O
}	O
else	O
{	O
tp	*(struct(*(void),*(struct(*(void),*(struct`)))))
++	O
;	O
break	O
;	O
}	O
*	O
tp	*(struct(*(void),*(struct(*(void),*(struct`)))))
=	O
'1'	O
;	O
tp	*(struct(*(void),*(struct(*(void),*(struct`)))))
=	O
np	*(char)
+	O
l	long
;	O
*	O
tp	*(struct(*(void),*(struct(*(void),*(struct`)))))
++	O
=	O
'0'	O
;	O
*	O
tp	*(struct(*(void),*(struct(*(void),*(struct`)))))
=	O
'\0'	O
;	O
}	O
static	O
int	O
removelock	(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*`,long,array(long))),*(struct(long,long,long,*`,long,array(long))),*(char),struct(*(char),long),*(struct(*`,*`)),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)))->(int)
(	O
struct	O
delta	struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long)),bool,long)
*	O
delta	struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long)),bool,long)
)	O
{	O
struct	O
link	(*(char),*(char))->(int)
box	*(struct(*(void),*(struct(*(void),*(struct`)))))
,	O
*	O
tp	*(struct(*(void),*(struct(*(void),*(struct`)))))
;	O
struct	O
rcslock	struct(*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long)))
const	O
*	O
rl	*(struct(*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long))))
;	O
char	O
const	O
*	O
num	*(char)
;	O
num	*(char)
=	O
delta	struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long)),bool,long)
->	O
num	*(char)
;	O
box	*(struct(*(void),*(struct(*(void),*(struct`)))))
.	O
next	*(struct(*(void),*(struct(*(void),*(struct`)))))
=	O
GROK	O
(	O
locks	*(struct)
)	O
;	O
if	O
(	O
!	O
(	O
tp	*(struct(*(void),*(struct(*(void),*(struct`)))))
=	O
lock_delta_memq	O
(	O
&	O
box	*(struct(*(void),*(struct(*(void),*(struct`)))))
,	O
delta	struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long)),bool,long)
)	O
)	O
)	O
{	O
if	O
(	O
!	O
BE	O
(	O
strictly_locking	bool
)	O
&&	O
stat_mine_p	(*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))))->(bool)
(	O
&	O
REPO	O
(	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
)	O
)	O
)	O
return	O
0	int
;	O
RERR	O
(	O
"no lock set by %s for revision %s"	*(char)
,	O
getcaller	()->(*(char))
(	O
)	O
,	O
num	*(char)
)	O
;	O
return	O
-	O
1	int
;	O
}	O
rl	*(struct(*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long))))
=	O
tp	*(struct(*(void),*(struct(*(void),*(struct`)))))
->	O
next	*(struct(*(void),*(struct(*(void),*(struct`)))))
->	O
entry	*(void)
;	O
if	O
(	O
!	O
caller_login_p	(*(char))->(bool)
(	O
rl	*(struct(*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long))))
->	O
login	*(char)
)	O
)	O
{	O
RERR	O
(	O
"revision %s locked by %s"	*(char)
,	O
num	*(char)
,	O
rl	*(struct(*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long))))
->	O
login	*(char)
)	O
;	O
return	O
-	O
1	int
;	O
}	O
lock_drop	(*(struct(*(void),*(struct(*`,*`)))),*(struct(*(void),*(struct(*`,*`)))))->(void)
(	O
&	O
box	*(struct(*(void),*(struct(*(void),*(struct`)))))
,	O
tp	*(struct(*(void),*(struct(*(void),*(struct`)))))
)	O
;	O
return	O
1	int
;	O
}	O
static	O
struct	O
wlink	struct(*(void),*(struct(*(void),*(struct(*(void),*(struct`))))))
newbranch	struct(*(void),*(struct(*(void),*(struct(*`,*`)))))
;	O
static	O
int	O
addbranch	(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*`,long,array(long))),*(struct(long,long,long,*`,long,array(long))),*(char),struct(*(char),long),*(struct(*`,*`)),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)),*(struct(*(char),long)),bool,*(*(struct(*(void),*(struct`)))))->(int)
(	O
struct	O
delta	struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long)),bool,long)
*	O
branchpoint	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
,	O
struct	O
cbuf	struct(*(char),long)
*	O
num	*(char)
,	O
bool	bool
removedlock	bool
,	O
struct	O
wlink	struct(*(void),*(struct(*(void),*(struct(*(void),*(struct`))))))
*	O
*	O
tp_deltas	*(*(struct(*(void),*(struct(*`,*`)))))
)	O
{	O
struct	O
wlink	struct(*(void),*(struct(*(void),*(struct(*(void),*(struct`))))))
*	O
*	O
btrail	*(*(struct(*(void),*(struct(*`,*`)))))
;	O
struct	O
delta	struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long)),bool,long)
*	O
d	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
;	O
int	O
result	*(char)
;	O
int	O
field	int
,	O
numlength	int
;	O
numlength	int
=	O
countnumflds	(*(char))->(int)
(	O
num	*(char)
->	O
string	*(char)
)	O
;	O
if	O
(	O
!	O
branchpoint	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
branches	*(struct)
)	O
{	O
branchpoint	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
branches	*(struct)
=	O
&	O
newbranch	struct(*(void),*(struct(*(void),*(struct(*`,*`)))))
;	O
if	O
(	O
numlength	int
==	O
0	int
)	O
{	O
JAM	O
(	O
num	*(char)
,	O
branchpoint	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
num	*(char)
)	O
;	O
ADD	O
(	O
num	*(char)
,	O
".1.1"	*(char)
)	O
;	O
}	O
else	O
if	O
(	O
numlength	int
&	O
1	int
)	O
ADD	O
(	O
num	*(char)
,	O
".1"	*(char)
)	O
;	O
newbranch	struct(*(void),*(struct(*(void),*(struct(*`,*`)))))
.	O
next	*(struct(*(void),*(struct(*(void),*(struct`)))))
=	O
NULL	O
;	O
}	O
else	O
if	O
(	O
numlength	int
==	O
0	int
)	O
{	O
struct	O
wlink	struct(*(void),*(struct(*(void),*(struct(*(void),*(struct`))))))
*	O
bhead	*(struct(*(void),*(struct(*(void),*(struct`)))))
=	O
branchpoint	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
branches	*(struct)
;	O
while	O
(	O
bhead	*(struct(*(void),*(struct(*(void),*(struct`)))))
->	O
next	*(struct(*(void),*(struct(*(void),*(struct`)))))
)	O
bhead	*(struct(*(void),*(struct(*(void),*(struct`)))))
=	O
bhead	*(struct(*(void),*(struct(*(void),*(struct`)))))
->	O
next	*(struct(*(void),*(struct(*(void),*(struct`)))))
;	O
bhead	*(struct(*(void),*(struct(*(void),*(struct`)))))
->	O
next	*(struct(*(void),*(struct(*(void),*(struct`)))))
=	O
&	O
newbranch	struct(*(void),*(struct(*(void),*(struct(*`,*`)))))
;	O
d	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
=	O
bhead	*(struct(*(void),*(struct(*(void),*(struct`)))))
->	O
entry	*(void)
;	O
incnum	(*(char),*(struct(*(char),long)))->(void)
(	O
BRANCHNO	O
(	O
d	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
num	*(char)
)	O
,	O
num	*(char)
)	O
;	O
ADD	O
(	O
num	*(char)
,	O
".1"	*(char)
)	O
;	O
newbranch	struct(*(void),*(struct(*(void),*(struct(*`,*`)))))
.	O
next	*(struct(*(void),*(struct(*(void),*(struct`)))))
=	O
NULL	O
;	O
}	O
else	O
{	O
field	int
=	O
numlength	int
-	O
(	O
(	O
numlength	int
&	O
1	int
)	O
^	O
1	int
)	O
;	O
btrail	*(*(struct(*(void),*(struct(*`,*`)))))
=	O
&	O
branchpoint	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
branches	*(struct)
;	O
while	O
(	O
d	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
=	O
(	O
*	O
btrail	*(*(struct(*(void),*(struct(*`,*`)))))
)	O
->	O
entry	*(void)
,	O
0	int
<	O
(	O
result	*(char)
=	O
cmpnumfld	(*(char),*(char),int)->(int)
(	O
num	*(char)
->	O
string	*(char)
,	O
d	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
num	*(char)
,	O
field	int
)	O
)	O
)	O
{	O
btrail	*(*(struct(*(void),*(struct(*`,*`)))))
=	O
&	O
(	O
*	O
btrail	*(*(struct(*(void),*(struct(*`,*`)))))
)	O
->	O
next	*(struct(*(void),*(struct(*(void),*(struct`)))))
;	O
if	O
(	O
!	O
*	O
btrail	*(*(struct(*(void),*(struct(*`,*`)))))
)	O
{	O
result	*(char)
=	O
-	O
1	int
;	O
break	O
;	O
}	O
}	O
if	O
(	O
result	*(char)
<	O
0	int
)	O
{	O
newbranch	struct(*(void),*(struct(*(void),*(struct(*`,*`)))))
.	O
next	*(struct(*(void),*(struct(*(void),*(struct`)))))
=	O
*	O
btrail	*(*(struct(*(void),*(struct(*`,*`)))))
;	O
*	O
btrail	*(*(struct(*(void),*(struct(*`,*`)))))
=	O
&	O
newbranch	struct(*(void),*(struct(*(void),*(struct(*`,*`)))))
;	O
if	O
(	O
numlength	int
&	O
1	int
)	O
ADD	O
(	O
num	*(char)
,	O
".1"	*(char)
)	O
;	O
}	O
else	O
{	O
targetdelta	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
=	O
gr_revno	(*(char),*(*(struct)))->(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)))
(	O
BRANCHNO	O
(	O
num	*(char)
->	O
string	*(char)
)	O
,	O
tp_deltas	*(*(struct(*(void),*(struct(*`,*`)))))
)	O
;	O
if	O
(	O
!	O
targetdelta	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
)	O
return	O
-	O
1	int
;	O
if	O
(	O
!	O
NUM_GT	O
(	O
num	*(char)
->	O
string	*(char)
,	O
targetdelta	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
num	*(char)
)	O
)	O
{	O
RERR	O
(	O
"revision %s too low; must be higher than %s"	*(char)
,	O
num	*(char)
->	O
string	*(char)
,	O
targetdelta	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
num	*(char)
)	O
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
!	O
removedlock	bool
&&	O
0	int
<=	O
(	O
removedlock	bool
=	O
removelock	(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*`,long,array(long))),*(struct(long,long,long,*`,long,array(long))),*(char),struct(*(char),long),*(struct(*`,*`)),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)))->(int)
(	O
targetdelta	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
)	O
)	O
)	O
{	O
if	O
(	O
numlength	int
&	O
1	int
)	O
incnum	(*(char),*(struct(*(char),long)))->(void)
(	O
targetdelta	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
num	*(char)
,	O
num	*(char)
)	O
;	O
targetdelta	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
ilk	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
=	O
&	O
newdelta	struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct(int,long,enum(int,int,int),*`,*`,*`,*`,*`,long)),long,array(long))),*(struct(long,long,long,*(struct(int,long,enum(int,int,int),*`,*`,*`,*`,*`,long)),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct(*`,*`)))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*`,long,array(long))),*(struct(long,long,long,*`,long,array(long))),*(char),struct(*(char),long),*(struct(*`,*`)),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)),bool,long)
;	O
newdelta	struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct(int,long,enum(int,int,int),*`,*`,*`,*`,*`,long)),long,array(long))),*(struct(long,long,long,*(struct(int,long,enum(int,int,int),*`,*`,*`,*`,*`,long)),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct(*`,*`)))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*`,long,array(long))),*(struct(long,long,long,*`,long,array(long))),*(char),struct(*(char),long),*(struct(*`,*`)),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)),bool,long)
.	O
ilk	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
=	O
NULL	O
;	O
}	O
return	O
removedlock	bool
;	O
}	O
}	O
newbranch	struct(*(void),*(struct(*(void),*(struct(*`,*`)))))
.	O
entry	*(void)
=	O
&	O
newdelta	struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct(int,long,enum(int,int,int),*`,*`,*`,*`,*`,long)),long,array(long))),*(struct(long,long,long,*(struct(int,long,enum(int,int,int),*`,*`,*`,*`,*`,long)),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct(*`,*`)))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*`,long,array(long))),*(struct(long,long,long,*`,long,array(long))),*(char),struct(*(char),long),*(struct(*`,*`)),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)),bool,long)
;	O
newdelta	struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct(int,long,enum(int,int,int),*`,*`,*`,*`,*`,long)),long,array(long))),*(struct(long,long,long,*(struct(int,long,enum(int,int,int),*`,*`,*`,*`,*`,long)),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct(*`,*`)))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*`,long,array(long))),*(struct(long,long,long,*`,long,array(long))),*(char),struct(*(char),long),*(struct(*`,*`)),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)),bool,long)
.	O
ilk	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
=	O
NULL	O
;	O
if	O
(	O
branchpoint	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
lockedby	*(char)
)	O
if	O
(	O
caller_login_p	(*(char))->(bool)
(	O
branchpoint	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
lockedby	*(char)
)	O
)	O
return	O
removelock	(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*`,long,array(long))),*(struct(long,long,long,*`,long,array(long))),*(char),struct(*(char),long),*(struct(*`,*`)),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)))->(int)
(	O
branchpoint	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
)	O
;	O
return	O
removedlock	bool
;	O
}	O
static	O
void	O
prune	(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*`,long,array(long))),*(struct(long,long,long,*`,long,array(long))),*(char),struct(*(char),long),*(struct(*`,*`)),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*`,long,array(long))),*(struct(long,long,long,*`,long,array(long))),*(char),struct(*(char),long),*(struct(*`,*`)),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)))->(void)
(	O
struct	O
delta	struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long)),bool,long)
*	O
wrong	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
,	O
struct	O
delta	struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long)),bool,long)
*	O
bp	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
)	O
{	O
struct	O
wlink	struct(*(void),*(struct(*(void),*(struct(*(void),*(struct`))))))
box	*(struct(*(void),*(struct(*(void),*(struct`)))))
,	O
*	O
tp	*(struct(*(void),*(struct(*(void),*(struct`)))))
;	O
struct	O
delta	struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long)),bool,long)
*	O
d	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
;	O
int	O
same	int
=	O
countnumflds	(*(char))->(int)
(	O
wrong	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
num	*(char)
)	O
-	O
2	int
;	O
wrong	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
selector	bool
=	O
false	int
;	O
if	O
(	O
0	int
>=	O
same	int
)	O
return	O
;	O
box	*(struct(*(void),*(struct(*(void),*(struct`)))))
.	O
next	*(struct(*(void),*(struct(*(void),*(struct`)))))
=	O
bp	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
branches	*(struct)
;	O
for	O
(	O
tp	*(struct(*(void),*(struct(*(void),*(struct`)))))
=	O
&	O
box	*(struct(*(void),*(struct(*(void),*(struct`)))))
;	O
tp	*(struct(*(void),*(struct(*(void),*(struct`)))))
->	O
next	*(struct(*(void),*(struct(*(void),*(struct`)))))
;	O
tp	*(struct(*(void),*(struct(*(void),*(struct`)))))
=	O
tp	*(struct(*(void),*(struct(*(void),*(struct`)))))
->	O
next	*(struct(*(void),*(struct(*(void),*(struct`)))))
)	O
if	O
(	O
wrong	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
==	O
(	O
d	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
=	O
tp	*(struct(*(void),*(struct(*(void),*(struct`)))))
->	O
next	*(struct(*(void),*(struct(*(void),*(struct`)))))
->	O
entry	*(void)
)	O
)	O
{	O
tp	*(struct(*(void),*(struct(*(void),*(struct`)))))
->	O
next	*(struct(*(void),*(struct(*(void),*(struct`)))))
=	O
tp	*(struct(*(void),*(struct(*(void),*(struct`)))))
->	O
next	*(struct(*(void),*(struct(*(void),*(struct`)))))
->	O
next	*(struct(*(void),*(struct(*(void),*(struct`)))))
;	O
bp	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
branches	*(struct)
=	O
box	*(struct(*(void),*(struct(*(void),*(struct`)))))
.	O
next	*(struct(*(void),*(struct(*(void),*(struct`)))))
;	O
return	O
;	O
}	O
for	O
(	O
tp	*(struct(*(void),*(struct(*(void),*(struct`)))))
=	O
bp	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
branches	*(struct)
;	O
tp	*(struct(*(void),*(struct(*(void),*(struct`)))))
;	O
tp	*(struct(*(void),*(struct(*(void),*(struct`)))))
=	O
tp	*(struct(*(void),*(struct(*(void),*(struct`)))))
->	O
next	*(struct(*(void),*(struct(*(void),*(struct`)))))
)	O
{	O
d	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
=	O
tp	*(struct(*(void),*(struct(*(void),*(struct`)))))
->	O
entry	*(void)
;	O
if	O
(	O
0	int
==	O
compartial	(*(char),*(char),int)->(int)
(	O
wrong	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
num	*(char)
,	O
d	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
num	*(char)
,	O
same	int
)	O
)	O
{	O
while	O
(	O
d	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
ilk	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
!=	O
wrong	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
)	O
d	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
=	O
d	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
ilk	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
;	O
d	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
ilk	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
=	O
NULL	O
;	O
return	O
;	O
}	O
}	O
abort	()->(void)
(	O
)	O
;	O
}	O
static	O
int	O
addelta	(*(*(struct(*(void),*(struct`)))))->(int)
(	O
struct	O
wlink	struct(*(void),*(struct(*(void),*(struct(*(void),*(struct`))))))
*	O
*	O
tp_deltas	*(*(struct(*(void),*(struct(*`,*`)))))
)	O
{	O
register	O
char	O
const	O
*	O
tp	*(struct(*(void),*(struct(*(void),*(struct`)))))
;	O
register	O
int	O
i	int
;	O
int	O
removedlock	bool
;	O
int	O
newdnumlength	int
;	O
struct	O
delta	struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long)),bool,long)
*	O
tip	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
=	O
REPO	O
(	O
tip	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
)	O
;	O
char	O
const	O
*	O
defbr	*(char)
=	O
GROK	O
(	O
branch	*(char)
)	O
;	O
newdnumlength	int
=	O
countnumflds	(*(char))->(int)
(	O
newdelnum	struct(*(char),long)
.	O
string	*(char)
)	O
;	O
if	O
(	O
rcsinitflag	bool
)	O
{	O
if	O
(	O
newdnumlength	int
==	O
0	int
&&	O
defbr	*(char)
)	O
{	O
JAM	O
(	O
&	O
newdelnum	struct(*(char),long)
,	O
defbr	*(char)
)	O
;	O
newdnumlength	int
=	O
countnumflds	(*(char))->(int)
(	O
defbr	*(char)
)	O
;	O
}	O
if	O
(	O
newdnumlength	int
==	O
0	int
)	O
JAM	O
(	O
&	O
newdelnum	struct(*(char),long)
,	O
"1.1"	*(char)
)	O
;	O
else	O
if	O
(	O
newdnumlength	int
==	O
1	int
)	O
ADD	O
(	O
&	O
newdelnum	struct(*(char),long)
,	O
".1"	*(char)
)	O
;	O
else	O
if	O
(	O
newdnumlength	int
>	O
2	int
)	O
{	O
RERR	O
(	O
"Branch point doesn't exist for revision %s."	*(char)
,	O
newdelnum	struct(*(char),long)
.	O
string	*(char)
)	O
;	O
return	O
-	O
1	int
;	O
}	O
tip	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
=	O
REPO	O
(	O
tip	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
)	O
=	O
&	O
newdelta	struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct(int,long,enum(int,int,int),*`,*`,*`,*`,*`,long)),long,array(long))),*(struct(long,long,long,*(struct(int,long,enum(int,int,int),*`,*`,*`,*`,*`,long)),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct(*`,*`)))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*`,long,array(long))),*(struct(long,long,long,*`,long,array(long))),*(char),struct(*(char),long),*(struct(*`,*`)),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)),bool,long)
;	O
newdelta	struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct(int,long,enum(int,int,int),*`,*`,*`,*`,*`,long)),long,array(long))),*(struct(long,long,long,*(struct(int,long,enum(int,int,int),*`,*`,*`,*`,*`,long)),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct(*`,*`)))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*`,long,array(long))),*(struct(long,long,long,*`,long,array(long))),*(char),struct(*(char),long),*(struct(*`,*`)),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)),bool,long)
.	O
ilk	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
=	O
NULL	O
;	O
return	O
0	int
;	O
}	O
if	O
(	O
newdnumlength	int
==	O
0	int
)	O
{	O
switch	O
(	O
findlock	(bool,*(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long))))->(int)
(	O
true	int
,	O
&	O
targetdelta	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
)	O
)	O
{	O
default	O
:	O
return	O
-	O
1	int
;	O
case	O
1	int
:	O
if	O
(	O
!	O
gr_revno	(*(char),*(*(struct)))->(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)))
(	O
targetdelta	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
num	*(char)
,	O
tp_deltas	*(*(struct(*(void),*(struct(*`,*`)))))
)	O
)	O
return	O
-	O
1	int
;	O
if	O
(	O
targetdelta	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
==	O
tip	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
)	O
{	O
newdelta	struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct(int,long,enum(int,int,int),*`,*`,*`,*`,*`,long)),long,array(long))),*(struct(long,long,long,*(struct(int,long,enum(int,int,int),*`,*`,*`,*`,*`,long)),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct(*`,*`)))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*`,long,array(long))),*(struct(long,long,long,*`,long,array(long))),*(char),struct(*(char),long),*(struct(*`,*`)),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)),bool,long)
.	O
ilk	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
=	O
tip	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
;	O
tip	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
=	O
REPO	O
(	O
tip	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
)	O
=	O
&	O
newdelta	struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct(int,long,enum(int,int,int),*`,*`,*`,*`,*`,long)),long,array(long))),*(struct(long,long,long,*(struct(int,long,enum(int,int,int),*`,*`,*`,*`,*`,long)),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct(*`,*`)))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*`,long,array(long))),*(struct(long,long,long,*`,long,array(long))),*(char),struct(*(char),long),*(struct(*`,*`)),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)),bool,long)
;	O
}	O
else	O
if	O
(	O
!	O
targetdelta	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
ilk	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
&&	O
countnumflds	(*(char))->(int)
(	O
targetdelta	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
num	*(char)
)	O
>	O
2	int
)	O
{	O
targetdelta	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
ilk	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
=	O
&	O
newdelta	struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct(int,long,enum(int,int,int),*`,*`,*`,*`,*`,long)),long,array(long))),*(struct(long,long,long,*(struct(int,long,enum(int,int,int),*`,*`,*`,*`,*`,long)),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct(*`,*`)))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*`,long,array(long))),*(struct(long,long,long,*`,long,array(long))),*(char),struct(*(char),long),*(struct(*`,*`)),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)),bool,long)
;	O
newdelta	struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct(int,long,enum(int,int,int),*`,*`,*`,*`,*`,long)),long,array(long))),*(struct(long,long,long,*(struct(int,long,enum(int,int,int),*`,*`,*`,*`,*`,long)),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct(*`,*`)))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*`,long,array(long))),*(struct(long,long,long,*`,long,array(long))),*(char),struct(*(char),long),*(struct(*`,*`)),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)),bool,long)
.	O
ilk	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
=	O
NULL	O
;	O
}	O
else	O
{	O
JAM	O
(	O
&	O
newdelnum	struct(*(char),long)
,	O
""	*(char)
)	O
;	O
return	O
addbranch	(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*`,long,array(long))),*(struct(long,long,long,*`,long,array(long))),*(char),struct(*(char),long),*(struct(*`,*`)),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)),*(struct(*(char),long)),bool,*(*(struct(*(void),*(struct`)))))->(int)
(	O
targetdelta	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
,	O
&	O
newdelnum	struct(*(char),long)
,	O
true	int
,	O
tp_deltas	*(*(struct(*(void),*(struct(*`,*`)))))
)	O
;	O
}	O
incnum	(*(char),*(struct(*(char),long)))->(void)
(	O
targetdelta	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
num	*(char)
,	O
&	O
newdelnum	struct(*(char),long)
)	O
;	O
return	O
1	int
;	O
case	O
0	int
:	O
if	O
(	O
BE	O
(	O
strictly_locking	bool
)	O
||	O
!	O
stat_mine_p	(*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))))->(bool)
(	O
&	O
REPO	O
(	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
)	O
)	O
)	O
{	O
RERR	O
(	O
"no lock set by %s"	*(char)
,	O
getcaller	()->(*(char))
(	O
)	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
defbr	*(char)
)	O
JAM	O
(	O
&	O
newdelnum	struct(*(char),long)
,	O
defbr	*(char)
)	O
;	O
else	O
{	O
incnum	(*(char),*(struct(*(char),long)))->(void)
(	O
tip	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
num	*(char)
,	O
&	O
newdelnum	struct(*(char),long)
)	O
;	O
}	O
newdnumlength	int
=	O
countnumflds	(*(char))->(int)
(	O
newdelnum	struct(*(char),long)
.	O
string	*(char)
)	O
;	O
}	O
}	O
if	O
(	O
newdnumlength	int
<=	O
2	int
)	O
{	O
if	O
(	O
newdnumlength	int
==	O
1	int
)	O
{	O
if	O
(	O
NUMF_EQ	O
(	O
1	int
,	O
newdelnum	struct(*(char),long)
.	O
string	*(char)
,	O
tip	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
num	*(char)
)	O
)	O
incnum	(*(char),*(struct(*(char),long)))->(void)
(	O
tip	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
num	*(char)
,	O
&	O
newdelnum	struct(*(char),long)
)	O
;	O
else	O
ADD	O
(	O
&	O
newdelnum	struct(*(char),long)
,	O
".1"	*(char)
)	O
;	O
}	O
if	O
(	O
!	O
NUM_GT	O
(	O
newdelnum	struct(*(char),long)
.	O
string	*(char)
,	O
tip	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
num	*(char)
)	O
)	O
{	O
RERR	O
(	O
"revision %s too low; must be higher than %s"	*(char)
,	O
newdelnum	struct(*(char),long)
.	O
string	*(char)
,	O
tip	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
num	*(char)
)	O
;	O
return	O
-	O
1	int
;	O
}	O
targetdelta	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
=	O
tip	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
;	O
if	O
(	O
0	int
<=	O
(	O
removedlock	bool
=	O
removelock	(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*`,long,array(long))),*(struct(long,long,long,*`,long,array(long))),*(char),struct(*(char),long),*(struct(*`,*`)),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)))->(int)
(	O
tip	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
)	O
)	O
)	O
{	O
if	O
(	O
!	O
gr_revno	(*(char),*(*(struct)))->(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)))
(	O
tip	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
num	*(char)
,	O
tp_deltas	*(*(struct(*(void),*(struct(*`,*`)))))
)	O
)	O
return	O
-	O
1	int
;	O
newdelta	struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct(int,long,enum(int,int,int),*`,*`,*`,*`,*`,long)),long,array(long))),*(struct(long,long,long,*(struct(int,long,enum(int,int,int),*`,*`,*`,*`,*`,long)),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct(*`,*`)))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*`,long,array(long))),*(struct(long,long,long,*`,long,array(long))),*(char),struct(*(char),long),*(struct(*`,*`)),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)),bool,long)
.	O
ilk	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
=	O
tip	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
;	O
tip	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
=	O
REPO	O
(	O
tip	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
)	O
=	O
&	O
newdelta	struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct(int,long,enum(int,int,int),*`,*`,*`,*`,*`,long)),long,array(long))),*(struct(long,long,long,*(struct(int,long,enum(int,int,int),*`,*`,*`,*`,*`,long)),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct(*`,*`)))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*`,long,array(long))),*(struct(long,long,long,*`,long,array(long))),*(char),struct(*(char),long),*(struct(*`,*`)),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)),bool,long)
;	O
}	O
return	O
removedlock	bool
;	O
}	O
else	O
{	O
struct	O
cbuf	struct(*(char),long)
old	struct(*(char),long)
=	O
newdelnum	struct(*(char),long)
;	O
tp	*(struct(*(void),*(struct(*(void),*(struct`)))))
=	O
old	struct(*(char),long)
.	O
string	*(char)
;	O
for	O
(	O
i	int
=	O
newdnumlength	int
-	O
(	O
(	O
newdnumlength	int
&	O
1	int
)	O
^	O
1	int
)	O
;	O
--	O
i	int
;	O
)	O
while	O
(	O
*	O
tp	*(struct(*(void),*(struct(*(void),*(struct`)))))
++	O
!=	O
'.'	O
)	O
continue	O
;	O
old	struct(*(char),long)
.	O
string	*(char)
=	O
SHSNIP	O
(	O
&	O
old	struct(*(char),long)
.	O
size	long
,	O
old	struct(*(char),long)
.	O
string	*(char)
,	O
tp	*(struct(*(void),*(struct(*(void),*(struct`)))))
-	O
1	int
)	O
;	O
if	O
(	O
!	O
(	O
targetdelta	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
=	O
gr_revno	(*(char),*(*(struct)))->(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)))
(	O
old	struct(*(char),long)
.	O
string	*(char)
,	O
tp_deltas	*(*(struct(*(void),*(struct(*`,*`)))))
)	O
)	O
)	O
return	O
-	O
1	int
;	O
if	O
(	O
!	O
NUM_EQ	O
(	O
targetdelta	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
num	*(char)
,	O
old	struct(*(char),long)
.	O
string	*(char)
)	O
)	O
{	O
RERR	O
(	O
"can't find branch point %s"	*(char)
,	O
old	struct(*(char),long)
.	O
string	*(char)
)	O
;	O
return	O
-	O
1	int
;	O
}	O
return	O
addbranch	(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*`,long,array(long))),*(struct(long,long,long,*`,long,array(long))),*(char),struct(*(char),long),*(struct(*`,*`)),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)),*(struct(*(char),long)),bool,*(*(struct(*(void),*(struct`)))))->(int)
(	O
targetdelta	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
,	O
&	O
newdelnum	struct(*(char),long)
,	O
false	int
,	O
tp_deltas	*(*(struct(*(void),*(struct(*`,*`)))))
)	O
;	O
}	O
}	O
static	O
bool	bool
addsyms	(*(char))->(bool)
(	O
char	O
const	O
*	O
num	*(char)
)	O
{	O
struct	O
link	(*(char),*(char))->(int)
*	O
ls	*(struct(*(void),*(struct(*(void),*(struct`)))))
;	O
struct	O
u_symdef	struct(struct(*(char),*(char)),bool)
const	O
*	O
ud	*(struct(struct(*(char),*(char)),bool))
;	O
for	O
(	O
ls	*(struct(*(void),*(struct(*(void),*(struct`)))))
=	O
assoclst	struct(*(void),*(struct(*(void),*(struct(*`,*`)))))
.	O
next	*(struct(*(void),*(struct(*(void),*(struct`)))))
;	O
ls	*(struct(*(void),*(struct(*(void),*(struct`)))))
;	O
ls	*(struct(*(void),*(struct(*(void),*(struct`)))))
=	O
ls	*(struct(*(void),*(struct(*(void),*(struct`)))))
->	O
next	*(struct(*(void),*(struct(*(void),*(struct`)))))
)	O
{	O
ud	*(struct(struct(*(char),*(char)),bool))
=	O
ls	*(struct(*(void),*(struct(*(void),*(struct`)))))
->	O
entry	*(void)
;	O
if	O
(	O
addsymbol	(*(char),*(char),bool)->(int)
(	O
num	*(char)
,	O
ud	*(struct(struct(*(char),*(char)),bool))
->	O
u	struct(*(char),*(char))
.	O
meaningful	*(char)
,	O
ud	*(struct(struct(*(char),*(char)),bool))
->	O
override	bool
)	O
<	O
0	int
)	O
return	O
false	int
;	O
}	O
return	O
true	int
;	O
}	O
static	O
char	O
getcurdate_buffer	array(char)
[	O
datesize	O
]	O
;	O
static	O
char	O
const	O
*	O
getcurdate	()->(*(char))
(	O
void	O
)	O
{	O
if	O
(	O
!	O
getcurdate_buffer	array(char)
[	O
0	int
]	O
)	O
time2date	(long,array(char))->(void)
(	O
BE	O
(	O
now	long
)	O
,	O
getcurdate_buffer	array(char)
)	O
;	O
return	O
getcurdate_buffer	array(char)
;	O
}	O
static	O
int	O
fixwork	(int,long)->(int)
(	O
mode_t	int
newworkmode	int
,	O
time_t	long
mtime	long
)	O
{	O
char	O
const	O
*	O
mani_filename	*(char)
=	O
MANI	O
(	O
filename	*(char)
)	O
;	O
return	O
1	int
<	O
workstat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_nlink	long
||	O
(	O
newworkmode	int
&	O
S_IWUSR	O
&&	O
!	O
stat_mine_p	(*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))))->(bool)
(	O
&	O
workstat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
)	O
)	O
||	O
PROB	O
(	O
setmtime	(*(char),long)->(int)
(	O
mani_filename	*(char)
,	O
mtime	long
)	O
)	O
?	O
-	O
1	int
:	O
workstat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_mode	int
==	O
newworkmode	int
?	O
0	int
:	O
!	O
PROB	O
(	O
change_mode	(int,int)->(int)
(	O
workptr	*(struct(int,long,enum(int,int,int),*(char),*(char),*(char),*((*(struct`))->(void)),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),long))
->	O
fd	int
,	O
newworkmode	int
)	O
)	O
?	O
0	int
:	O
chmod	(*(char),int)->(int)
(	O
mani_filename	*(char)
,	O
newworkmode	int
)	O
;	O
}	O
static	O
int	O
xpandfile	(*(struct(int,long,enum(int,int,int),*(char),*(char),*(char),*((*`)->(void)),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),long)),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*`,long,array(long))),*(struct(long,long,long,*`,long,array(long))),*(char),struct(*(char),long),*(struct(*`,*`)),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)),*(*(char)),bool)->(int)
(	O
struct	O
fro	struct(int,long,enum(int,int,int),*(char),*(char),*(char),*((*(struct(int,long,enum(int,int,int),*(char),*(char),*(char),*((*`)->(void)),*(struct`),long)))->(void)),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char))),long)
*	O
unexfile	*(struct(int,long,enum(int,int,int),*(char),*(char),*(char),*((*(struct`))->(void)),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),long))
,	O
struct	O
delta	struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long)),bool,long)
const	O
*	O
delta	struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long)),bool,long)
,	O
char	O
const	O
*	O
*	O
exname	*(*(char))
,	O
bool	bool
dolog	bool
)	O
{	O
char	O
const	O
*	O
targetname	*(char)
;	O
int	O
e	*(char)
,	O
r	*(struct(*(char),*(char),long,*(struct),long,*(struct),long,*(struct),bool,*(struct),*(struct),int,long,*(struct),*(struct),long,*(struct),*(struct)))
;	O
targetname	*(char)
=	O
makedirtemp	(bool)->(*(char))
(	O
true	int
)	O
;	O
if	O
(	O
!	O
(	O
exfile	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
=	O
fopen_safer	(*(char),*(char))->(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))
(	O
targetname	*(char)
,	O
FOPEN_W_WORK	*(char)
)	O
)	O
)	O
{	O
syserror_errno	O
(	O
targetname	*(char)
)	O
;	O
MERR	O
(	O
"can't build working file"	*(char)
)	O
;	O
return	O
-	O
1	int
;	O
}	O
r	*(struct(*(char),*(char),long,*(struct),long,*(struct),long,*(struct),bool,*(struct),*(struct),int,long,*(struct),*(struct),long,*(struct),*(struct)))
=	O
0	int
;	O
if	O
(	O
MIN_UNEXPAND	O
<=	O
BE	O
(	O
kws	int
)	O
)	O
fro_spew	(*(struct(int,long,enum(int,int,int),*(char),*(char),*(char),*((*`)->(void)),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),long)),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(void)
(	O
unexfile	*(struct(int,long,enum(int,int,int),*(char),*(char),*(char),*((*(struct`))->(void)),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),long))
,	O
exfile	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
else	O
{	O
struct	O
expctx	struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char))),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char))),*(struct(int,long,enum(int,int,int),*(char),*(char),*(char),*((*(struct`))->(void)),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),long)),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long)),bool,bool,*(struct(*(char),*(struct),*(void),long)))
ctx	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(struct(int,long,enum(int,int,int),*(char),*(char),*(char),*((*`)->(void)),*(struct`),long)),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,bool,*(struct(*(char),*(struct`),*(void),long))))
=	O
EXPCTX_1OUT	O
(	O
exfile	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
unexfile	*(struct(int,long,enum(int,int,int),*(char),*(char),*(char),*((*(struct`))->(void)),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),long))
,	O
false	int
,	O
dolog	bool
)	O
;	O
for	O
(	O
;	O
;	O
)	O
{	O
e	*(char)
=	O
expandline	(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(struct(int,long,enum(int,int,int),*`,*`,*`,*`,*`,long)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,bool,*(struct(*`,*`,*`,long)))))->(int)
(	O
&	O
ctx	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(struct(int,long,enum(int,int,int),*(char),*(char),*(char),*((*`)->(void)),*(struct`),long)),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,bool,*(struct(*(char),*(struct`),*(void),long))))
)	O
;	O
if	O
(	O
e	*(char)
<	O
0	int
)	O
break	O
;	O
r	*(struct(*(char),*(char),long,*(struct),long,*(struct),long,*(struct),bool,*(struct),*(struct),int,long,*(struct),*(struct),long,*(struct),*(struct)))
|=	O
e	*(char)
;	O
if	O
(	O
e	*(char)
<=	O
1	int
)	O
break	O
;	O
}	O
FINISH_EXPCTX	O
(	O
&	O
ctx	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(struct(int,long,enum(int,int,int),*(char),*(char),*(char),*((*`)->(void)),*(struct`),long)),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,bool,*(struct(*(char),*(struct`),*(void),long))))
)	O
;	O
}	O
*	O
exname	*(*(char))
=	O
targetname	*(char)
;	O
return	O
r	*(struct(*(char),*(char),long,*(struct),long,*(struct),long,*(struct),bool,*(struct),*(struct),int,long,*(struct),*(struct),long,*(struct),*(struct)))
&	O
1	int
;	O
}	O
static	O
struct	O
cbuf	struct(*(char),long)
logmsg	struct(*(char),long)
;	O
static	O
struct	O
cbuf	struct(*(char),long)
getlogmsg	()->(struct(*(char),long))
(	O
void	O
)	O
{	O
if	O
(	O
msg	*(char)
.	O
size	long
)	O
return	O
msg	*(char)
;	O
if	O
(	O
keepflag	bool
)	O
{	O
char	O
datebuf	array(char)
[	O
datesize	O
+	O
zonelenmax	int
]	O
;	O
date2str	(array(char),array(char))->(*(char))
(	O
getcurdate	()->(*(char))
(	O
)	O
,	O
datebuf	array(char)
)	O
;	O
ACCF	O
(	O
"%s%s at %s"	*(char)
,	O
TINYKS	O
(	O
ciklog	O
)	O
,	O
getcaller	()->(*(char))
(	O
)	O
,	O
datebuf	array(char)
)	O
;	O
OK	O
(	O
&	O
logmsg	struct(*(char),long)
)	O
;	O
return	O
logmsg	struct(*(char),long)
;	O
}	O
if	O
(	O
!	O
targetdelta	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
&&	O
(	O
NUM_EQ	O
(	O
newdelnum	struct(*(char),long)
.	O
string	*(char)
,	O
"1.1"	*(char)
)	O
||	O
NUM_EQ	O
(	O
newdelnum	struct(*(char),long)
.	O
string	*(char)
,	O
"1.0"	*(char)
)	O
)	O
)	O
{	O
struct	O
cbuf	struct(*(char),long)
const	O
initiallog	struct(*(char),long)
=	O
{	O
.	O
string	*(char)
=	O
FIRST	*(char)
,	O
.	O
size	long
=	O
sizeof	O
(	O
FIRST	*(char)
)	O
-	O
1	int
}	O
;	O
return	O
initiallog	struct(*(char),long)
;	O
}	O
if	O
(	O
logmsg	struct(*(char),long)
.	O
size	long
)	O
{	O
if	O
(	O
yesorno	(bool,*(char))->(bool)
(	O
true	int
,	O
"reuse log message of previous file? [yn](y): "	*(char)
)	O
)	O
return	O
logmsg	struct(*(char),long)
;	O
}	O
logmsg	struct(*(char),long)
=	O
getsstdin	(*(char),*(char),*(char))->(struct(*(char),long))
(	O
"m"	*(char)
,	O
"log message"	*(char)
,	O
""	*(char)
)	O
;	O
if	O
(	O
!	O
logmsg	struct(*(char),long)
.	O
size	long
)	O
set_empty_log_message	(*(struct(*(char),long)))->(void)
(	O
&	O
logmsg	struct(*(char),long)
)	O
;	O
return	O
logmsg	struct(*(char),long)
;	O
}	O
static	O
char	O
const	O
*	O
first_meaningful_symbolic_name	()->(*(char))
(	O
void	O
)	O
{	O
struct	O
u_symdef	struct(struct(*(char),*(char)),bool)
const	O
*	O
ud	*(struct(struct(*(char),*(char)),bool))
=	O
assoclst	struct(*(void),*(struct(*(void),*(struct(*`,*`)))))
.	O
next	*(struct(*(void),*(struct(*(void),*(struct`)))))
->	O
entry	*(void)
;	O
return	O
ud	*(struct(struct(*(char),*(char)),bool))
->	O
u	struct(*(char),*(char))
.	O
meaningful	*(char)
;	O
}	O
static	O
char	O
const	O
default_state	array(char)
[	O
]	O
=	O
DEFAULTSTATE	*(char)
;	O
int	O
main	(int,*(*(char)))->(int)
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	*(*(char))
)	O
{	O
char	O
altdate	array(char)
[	O
datesize	O
]	O
;	O
char	O
olddate	array(char)
[	O
datesize	O
]	O
;	O
char	O
newdatebuf	array(char)
[	O
datesize	O
+	O
zonelenmax	int
]	O
;	O
char	O
targetdatebuf	array(char)
[	O
datesize	O
+	O
zonelenmax	int
]	O
;	O
char	O
*	O
a	*(char)
,	O
*	O
*	O
newargv	*(*(*(char)))
,	O
*	O
textfile	*(char)
;	O
char	O
const	O
*	O
author	*(char)
,	O
*	O
krev	*(char)
,	O
*	O
rev	*(char)
,	O
*	O
state	*(char)
;	O
char	O
const	O
*	O
diffname	*(char)
,	O
*	O
expname	*(char)
;	O
char	O
const	O
*	O
newworkname	*(char)
;	O
bool	bool
initflag	bool
,	O
mustread	bool
;	O
bool	bool
lockflag	bool
,	O
lockthis	bool
,	O
mtimeflag	bool
;	O
int	O
removedlock	bool
;	O
bool	bool
Ttimeflag	bool
;	O
int	O
r	*(struct(*(char),*(char),long,*(struct),long,*(struct),long,*(struct),bool,*(struct),*(struct),int,long,*(struct),*(struct),long,*(struct),*(struct)))
;	O
int	O
changedRCS	int
,	O
changework	int
;	O
bool	bool
dolog	bool
,	O
newhead	bool
;	O
bool	bool
usestatdate	bool
;	O
mode_t	int
newworkmode	int
;	O
time_t	long
mtime	long
,	O
wtime	long
;	O
struct	O
delta	struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long)),bool,long)
*	O
workdelta	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
;	O
struct	O
link	(*(char),*(char))->(int)
*	O
tp_assoc	*(struct(*(void),*(struct(*(void),*(struct`)))))
=	O
&	O
assoclst	struct(*(void),*(struct(*(void),*(struct(*`,*`)))))
;	O
struct	O
wlink	struct(*(void),*(struct(*(void),*(struct(*(void),*(struct`))))))
*	O
deltas	*(struct)
;	O
const	O
struct	O
program	struct(*(char),*(char),*(char),*(()->(void)))
program	struct(*(char),*(char),*(char),*(()->(void)))
=	O
{	O
.	O
invoke	*(char)
=	O
argv	*(*(char))
[	O
0	int
]	O
,	O
.	O
name	*(char)
=	O
"ci"	*(char)
,	O
.	O
help	*(char)
=	O
help	*(char)
,	O
.	O
exiterr	*(()->(void))
=	O
exiterr	*(()->(void))
}	O
;	O
CHECK_HV	O
(	O
)	O
;	O
gnurcs_init	(*(struct(*(char),*(char),*(char),*(()->(void)))))->(void)
(	O
&	O
program	struct(*(char),*(char),*(char),*(()->(void)))
)	O
;	O
setrid	()->(void)
(	O
)	O
;	O
author	*(char)
=	O
rev	*(char)
=	O
state	*(char)
=	O
textfile	*(char)
=	O
NULL	O
;	O
initflag	bool
=	O
lockflag	bool
=	O
mustread	bool
=	O
false	int
;	O
mtimeflag	bool
=	O
false	int
;	O
Ttimeflag	bool
=	O
false	int
;	O
altdate	array(char)
[	O
0	int
]	O
=	O
'\0'	O
;	O
usestatdate	bool
=	O
false	int
;	O
BE	O
(	O
pe	*(char)
)	O
=	O
X_DEFAULT	*(char)
;	O
argc	int
=	O
getRCSINIT	(int,*(*(char)),*(*(*(char))))->(int)
(	O
argc	int
,	O
argv	*(*(char))
,	O
&	O
newargv	*(*(*(char)))
)	O
;	O
argv	*(*(char))
=	O
newargv	*(*(*(char)))
;	O
while	O
(	O
a	*(char)
=	O
*	O
++	O
argv	*(*(char))
,	O
0	int
<	O
--	O
argc	int
&&	O
*	O
a	*(char)
++	O
==	O
'-'	O
)	O
{	O
switch	O
(	O
*	O
a	*(char)
++	O
)	O
{	O
case	O
'r'	O
:	O
if	O
(	O
*	O
a	*(char)
)	O
goto	O
revno	*(char)
;	O
keepworkingfile	bool
=	O
lockflag	bool
=	O
false	int
;	O
break	O
;	O
case	O
'l'	O
:	O
keepworkingfile	bool
=	O
lockflag	bool
=	O
true	int
;	O
revno	*(char)
:	O
if	O
(	O
*	O
a	*(char)
)	O
{	O
if	O
(	O
rev	*(char)
)	O
PWARN	O
(	O
"redefinition of %s"	*(char)
,	O
ks_revno	array(char)
)	O
;	O
rev	*(char)
=	O
a	*(char)
;	O
}	O
break	O
;	O
case	O
'u'	O
:	O
keepworkingfile	bool
=	O
true	int
;	O
lockflag	bool
=	O
false	int
;	O
goto	O
revno	*(char)
;	O
case	O
'i'	O
:	O
initflag	bool
=	O
true	int
;	O
goto	O
revno	*(char)
;	O
case	O
'j'	O
:	O
mustread	bool
=	O
true	int
;	O
goto	O
revno	*(char)
;	O
case	O
'I'	O
:	O
BE	O
(	O
interactive	bool
)	O
=	O
true	int
;	O
goto	O
revno	*(char)
;	O
case	O
'q'	O
:	O
BE	O
(	O
quiet	bool
)	O
=	O
true	int
;	O
goto	O
revno	*(char)
;	O
case	O
'f'	O
:	O
forceciflag	bool
=	O
true	int
;	O
goto	O
revno	*(char)
;	O
case	O
'k'	O
:	O
keepflag	bool
=	O
true	int
;	O
goto	O
revno	*(char)
;	O
case	O
'm'	O
:	O
if	O
(	O
msg	*(char)
.	O
size	long
)	O
redefined	(int)->(void)
(	O
'm'	O
)	O
;	O
msg	*(char)
=	O
cleanlogmsg	(*(char),long)->(struct(*(char),long))
(	O
a	*(char)
,	O
strlen	(*(char))->(long)
(	O
a	*(char)
)	O
)	O
;	O
if	O
(	O
!	O
msg	*(char)
.	O
size	long
)	O
set_empty_log_message	(*(struct(*(char),long)))->(void)
(	O
&	O
msg	*(char)
)	O
;	O
break	O
;	O
case	O
'n'	O
:	O
case	O
'N'	O
:	O
{	O
char	O
option	*(char)
=	O
a	*(char)
[	O
-	O
1	int
]	O
;	O
struct	O
u_symdef	struct(struct(*(char),*(char)),bool)
*	O
ud	*(struct(struct(*(char),*(char)),bool))
;	O
if	O
(	O
!	O
*	O
a	*(char)
)	O
{	O
PERR	O
(	O
"missing symbolic name after -%c"	*(char)
,	O
option	*(char)
)	O
;	O
break	O
;	O
}	O
checkssym	(*(char))->(void)
(	O
a	*(char)
)	O
;	O
ud	*(struct(struct(*(char),*(char)),bool))
=	O
ZLLOC	O
(	O
1	int
,	O
struct	O
u_symdef	struct(struct(*(char),*(char)),bool)
)	O
;	O
ud	*(struct(struct(*(char),*(char)),bool))
->	O
override	bool
=	O
(	O
'N'	O
==	O
option	*(char)
)	O
;	O
ud	*(struct(struct(*(char),*(char)),bool))
->	O
u	struct(*(char),*(char))
.	O
meaningful	*(char)
=	O
a	*(char)
;	O
tp_assoc	*(struct(*(void),*(struct(*(void),*(struct`)))))
=	O
extend	(*(struct(*(void),*(struct(*`,*`)))),*(void),*(struct(*(char),*(struct),*(void),long)))->(*(struct(*(void),*(struct(*`,*`)))))
(	O
tp_assoc	*(struct(*(void),*(struct(*(void),*(struct`)))))
,	O
ud	*(struct(struct(*(char),*(char)),bool))
,	O
PLEXUS	O
)	O
;	O
}	O
break	O
;	O
case	O
's'	O
:	O
if	O
(	O
*	O
a	*(char)
)	O
{	O
if	O
(	O
state	*(char)
)	O
redefined	(int)->(void)
(	O
's'	O
)	O
;	O
checksid	(*(char))->(void)
(	O
a	*(char)
)	O
;	O
state	*(char)
=	O
a	*(char)
;	O
}	O
else	O
PERR	O
(	O
"missing state for -s option"	*(char)
)	O
;	O
break	O
;	O
case	O
't'	O
:	O
if	O
(	O
*	O
a	*(char)
)	O
{	O
if	O
(	O
textfile	*(char)
)	O
redefined	(int)->(void)
(	O
't'	O
)	O
;	O
textfile	*(char)
=	O
a	*(char)
;	O
}	O
break	O
;	O
case	O
'd'	O
:	O
if	O
(	O
altdate	array(char)
[	O
0	int
]	O
||	O
usestatdate	bool
)	O
redefined	(int)->(void)
(	O
'd'	O
)	O
;	O
altdate	array(char)
[	O
0	int
]	O
=	O
'\0'	O
;	O
if	O
(	O
!	O
(	O
usestatdate	bool
=	O
!	O
*	O
a	*(char)
)	O
)	O
str2date	(*(char),array(char))->(void)
(	O
a	*(char)
,	O
altdate	array(char)
)	O
;	O
break	O
;	O
case	O
'M'	O
:	O
mtimeflag	bool
=	O
true	int
;	O
goto	O
revno	*(char)
;	O
case	O
'w'	O
:	O
if	O
(	O
*	O
a	*(char)
)	O
{	O
if	O
(	O
author	*(char)
)	O
redefined	(int)->(void)
(	O
'w'	O
)	O
;	O
checksid	(*(char))->(void)
(	O
a	*(char)
)	O
;	O
author	*(char)
=	O
a	*(char)
;	O
}	O
else	O
PERR	O
(	O
"missing author for -w option"	*(char)
)	O
;	O
break	O
;	O
case	O
'x'	O
:	O
BE	O
(	O
pe	*(char)
)	O
=	O
a	*(char)
;	O
break	O
;	O
case	O
'V'	O
:	O
setRCSversion	(*(char))->(void)
(	O
*	O
argv	*(*(char))
)	O
;	O
break	O
;	O
case	O
'z'	O
:	O
zone_set	(*(char))->(void)
(	O
a	*(char)
)	O
;	O
break	O
;	O
case	O
'T'	O
:	O
if	O
(	O
!	O
*	O
a	*(char)
)	O
{	O
Ttimeflag	bool
=	O
true	int
;	O
break	O
;	O
}	O
default	O
:	O
bad_option	(*(char))->(void)
(	O
*	O
argv	*(*(char))
)	O
;	O
}	O
;	O
}	O
if	O
(	O
FLOW	O
(	O
erroneousp	bool
)	O
)	O
cleanup	()->(void)
(	O
)	O
;	O
else	O
if	O
(	O
argc	int
<	O
1	int
)	O
PFATAL	O
(	O
"no input file"	*(char)
)	O
;	O
else	O
for	O
(	O
;	O
0	int
<	O
argc	int
;	O
cleanup	()->(void)
(	O
)	O
,	O
++	O
argv	*(*(char))
,	O
--	O
argc	int
)	O
{	O
char	O
const	O
*	O
mani_filename	*(char)
,	O
*	O
pv	*(char)
;	O
struct	O
fro	struct(int,long,enum(int,int,int),*(char),*(char),*(char),*((*(struct(int,long,enum(int,int,int),*(char),*(char),*(char),*((*`)->(void)),*(struct`),long)))->(void)),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char))),long)
*	O
from	*(struct)
;	O
struct	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
*	O
repo_stat	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
;	O
FILE	struct
*	O
frew	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
;	O
struct	O
delta	struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long)),bool,long)
*	O
tip	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
;	O
int	O
kws	int
;	O
struct	O
cbuf	struct(*(char),long)
newdesc	struct(*(char),long)
=	O
{	O
.	O
string	*(char)
=	O
NULL	O
,	O
.	O
size	long
=	O
0	int
}	O
;	O
targetdelta	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
=	O
NULL	O
;	O
ffree	()->(void)
(	O
)	O
;	O
switch	O
(	O
pairnames	(int,*(*(char)),*((*(struct(*`,bool,struct`,*`,struct`,*`,int)))->(*(struct))),bool,bool)->(int)
(	O
argc	int
,	O
argv	*(*(char))
,	O
rcswriteopen	(*(struct(*((*`)->(*`)),bool,struct(*(char),long),*(struct),struct(*(char),long),*(struct(long,long,long,int,int,int,int,long,long,long,long,struct`,struct`,struct`,array(long))),int)))->(*(struct))
,	O
mustread	bool
,	O
false	int
)	O
)	O
{	O
case	O
-	O
1	int
:	O
if	O
(	O
currently_setuid_p	()->(bool)
(	O
)	O
)	O
{	O
MERR	O
(	O
"setuid initial checkin prohibited; use `rcs -i -a' first"	*(char)
)	O
;	O
continue	O
;	O
}	O
rcsinitflag	bool
=	O
true	int
;	O
break	O
;	O
case	O
0	int
:	O
continue	O
;	O
case	O
1	int
:	O
if	O
(	O
initflag	bool
)	O
{	O
RERR	O
(	O
"already exists"	*(char)
)	O
;	O
continue	O
;	O
}	O
rcsinitflag	bool
=	O
!	O
(	O
tip	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
=	O
REPO	O
(	O
tip	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
)	O
)	O
;	O
}	O
mani_filename	*(char)
=	O
MANI	O
(	O
filename	*(char)
)	O
;	O
from	*(struct)
=	O
FLOW	O
(	O
from	*(struct)
)	O
;	O
repo_stat	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
=	O
&	O
REPO	O
(	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
)	O
;	O
kws	int
=	O
BE	O
(	O
kws	int
)	O
;	O
diagnose	(*(char))->(void)
(	O
"%s  <--  %s"	*(char)
,	O
REPO	O
(	O
filename	*(char)
)	O
,	O
mani_filename	*(char)
)	O
;	O
if	O
(	O
!	O
(	O
workptr	*(struct(int,long,enum(int,int,int),*(char),*(char),*(char),*((*(struct`))->(void)),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),long))
=	O
fro_open	(*(char),*(char),*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))))->(*(struct(int,long,enum(int,int,int),*(char),*(char),*(char),*((*`)->(void)),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),long)))
(	O
mani_filename	*(char)
,	O
FOPEN_R_WORK	*(char)
,	O
&	O
workstat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
)	O
)	O
)	O
{	O
syserror_errno	O
(	O
mani_filename	*(char)
)	O
;	O
continue	O
;	O
}	O
if	O
(	O
from	*(struct)
)	O
{	O
if	O
(	O
SAME_INODE	O
(	O
REPO	O
(	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
)	O
,	O
workstat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
)	O
)	O
{	O
RERR	O
(	O
"RCS file is the same as working file %s."	*(char)
,	O
mani_filename	*(char)
)	O
;	O
continue	O
;	O
}	O
if	O
(	O
!	O
checkaccesslist	()->(bool)
(	O
)	O
)	O
continue	O
;	O
}	O
krev	*(char)
=	O
rev	*(char)
;	O
if	O
(	O
keepflag	bool
)	O
{	O
if	O
(	O
!	O
getoldkeys	(*(struct))->(bool)
(	O
workptr	*(struct(int,long,enum(int,int,int),*(char),*(char),*(char),*((*(struct`))->(void)),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),long))
)	O
)	O
continue	O
;	O
if	O
(	O
!	O
rev	*(char)
&&	O
!	O
(	O
krev	*(char)
=	O
PREV	O
(	O
rev	*(char)
)	O
)	O
)	O
{	O
MERR	O
(	O
"can't find a %s"	*(char)
,	O
ks_revno	array(char)
)	O
;	O
continue	O
;	O
}	O
if	O
(	O
!	O
PREV	O
(	O
date	*(char)
)	O
&&	O
*	O
altdate	array(char)
==	O
'\0'	O
&&	O
usestatdate	bool
==	O
false	int
)	O
MWARN	O
(	O
"can't find a date"	*(char)
)	O
;	O
if	O
(	O
!	O
PREV	O
(	O
author	*(char)
)	O
&&	O
!	O
author	*(char)
)	O
MWARN	O
(	O
"can't find an author"	*(char)
)	O
;	O
if	O
(	O
!	O
PREV	O
(	O
state	*(char)
)	O
&&	O
!	O
state	*(char)
)	O
MWARN	O
(	O
"can't find a state"	*(char)
)	O
;	O
}	O
if	O
(	O
!	O
fully_numeric	(*(struct(*(char),long)),*(char),*(struct))->(bool)
(	O
&	O
newdelnum	struct(*(char),long)
,	O
krev	*(char)
,	O
workptr	*(struct(int,long,enum(int,int,int),*(char),*(char),*(char),*((*(struct`))->(void)),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),long))
)	O
)	O
continue	O
;	O
if	O
(	O
PROB	O
(	O
removedlock	bool
=	O
addelta	(*(*(struct(*(void),*(struct`)))))->(int)
(	O
&	O
deltas	*(struct)
)	O
)	O
)	O
continue	O
;	O
tip	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
=	O
REPO	O
(	O
tip	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
)	O
;	O
newdelta	struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct(int,long,enum(int,int,int),*`,*`,*`,*`,*`,long)),long,array(long))),*(struct(long,long,long,*(struct(int,long,enum(int,int,int),*`,*`,*`,*`,*`,long)),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct(*`,*`)))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*`,long,array(long))),*(struct(long,long,long,*`,long,array(long))),*(char),struct(*(char),long),*(struct(*`,*`)),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)),bool,long)
.	O
num	*(char)
=	O
newdelnum	struct(*(char),long)
.	O
string	*(char)
;	O
newdelta	struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct(int,long,enum(int,int,int),*`,*`,*`,*`,*`,long)),long,array(long))),*(struct(long,long,long,*(struct(int,long,enum(int,int,int),*`,*`,*`,*`,*`,long)),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct(*`,*`)))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*`,long,array(long))),*(struct(long,long,long,*`,long,array(long))),*(char),struct(*(char),long),*(struct(*`,*`)),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)),bool,long)
.	O
branches	*(struct)
=	O
NULL	O
;	O
newdelta	struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct(int,long,enum(int,int,int),*`,*`,*`,*`,*`,long)),long,array(long))),*(struct(long,long,long,*(struct(int,long,enum(int,int,int),*`,*`,*`,*`,*`,long)),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct(*`,*`)))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*`,long,array(long))),*(struct(long,long,long,*`,long,array(long))),*(char),struct(*(char),long),*(struct(*`,*`)),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)),bool,long)
.	O
lockedby	*(char)
=	O
NULL	O
;	O
newdelta	struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct(int,long,enum(int,int,int),*`,*`,*`,*`,*`,long)),long,array(long))),*(struct(long,long,long,*(struct(int,long,enum(int,int,int),*`,*`,*`,*`,*`,long)),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct(*`,*`)))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*`,long,array(long))),*(struct(long,long,long,*`,long,array(long))),*(char),struct(*(char),long),*(struct(*`,*`)),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)),bool,long)
.	O
selector	bool
=	O
true	int
;	O
newdelta	struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct(int,long,enum(int,int,int),*`,*`,*`,*`,*`,long)),long,array(long))),*(struct(long,long,long,*(struct(int,long,enum(int,int,int),*`,*`,*`,*`,*`,long)),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct(*`,*`)))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*`,long,array(long))),*(struct(long,long,long,*`,long,array(long))),*(char),struct(*(char),long),*(struct(*`,*`)),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)),bool,long)
.	O
name	*(char)
=	O
NULL	O
;	O
if	O
(	O
author	*(char)
)	O
newdelta	struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct(int,long,enum(int,int,int),*`,*`,*`,*`,*`,long)),long,array(long))),*(struct(long,long,long,*(struct(int,long,enum(int,int,int),*`,*`,*`,*`,*`,long)),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct(*`,*`)))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*`,long,array(long))),*(struct(long,long,long,*`,long,array(long))),*(char),struct(*(char),long),*(struct(*`,*`)),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)),bool,long)
.	O
author	*(char)
=	O
author	*(char)
;	O
else	O
if	O
(	O
keepflag	bool
&&	O
(	O
pv	*(char)
=	O
PREV	O
(	O
author	*(char)
)	O
)	O
)	O
newdelta	struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct(int,long,enum(int,int,int),*`,*`,*`,*`,*`,long)),long,array(long))),*(struct(long,long,long,*(struct(int,long,enum(int,int,int),*`,*`,*`,*`,*`,long)),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct(*`,*`)))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*`,long,array(long))),*(struct(long,long,long,*`,long,array(long))),*(char),struct(*(char),long),*(struct(*`,*`)),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)),bool,long)
.	O
author	*(char)
=	O
pv	*(char)
;	O
else	O
newdelta	struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct(int,long,enum(int,int,int),*`,*`,*`,*`,*`,long)),long,array(long))),*(struct(long,long,long,*(struct(int,long,enum(int,int,int),*`,*`,*`,*`,*`,long)),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct(*`,*`)))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*`,long,array(long))),*(struct(long,long,long,*`,long,array(long))),*(char),struct(*(char),long),*(struct(*`,*`)),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)),bool,long)
.	O
author	*(char)
=	O
getcaller	()->(*(char))
(	O
)	O
;	O
newdelta	struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct(int,long,enum(int,int,int),*`,*`,*`,*`,*`,long)),long,array(long))),*(struct(long,long,long,*(struct(int,long,enum(int,int,int),*`,*`,*`,*`,*`,long)),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct(*`,*`)))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*`,long,array(long))),*(struct(long,long,long,*`,long,array(long))),*(char),struct(*(char),long),*(struct(*`,*`)),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)),bool,long)
.	O
state	*(char)
=	O
default_state	array(char)
;	O
if	O
(	O
state	*(char)
)	O
newdelta	struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct(int,long,enum(int,int,int),*`,*`,*`,*`,*`,long)),long,array(long))),*(struct(long,long,long,*(struct(int,long,enum(int,int,int),*`,*`,*`,*`,*`,long)),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct(*`,*`)))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*`,long,array(long))),*(struct(long,long,long,*`,long,array(long))),*(char),struct(*(char),long),*(struct(*`,*`)),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)),bool,long)
.	O
state	*(char)
=	O
state	*(char)
;	O
else	O
if	O
(	O
keepflag	bool
&&	O
(	O
pv	*(char)
=	O
PREV	O
(	O
state	*(char)
)	O
)	O
)	O
newdelta	struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct(int,long,enum(int,int,int),*`,*`,*`,*`,*`,long)),long,array(long))),*(struct(long,long,long,*(struct(int,long,enum(int,int,int),*`,*`,*`,*`,*`,long)),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct(*`,*`)))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*`,long,array(long))),*(struct(long,long,long,*`,long,array(long))),*(char),struct(*(char),long),*(struct(*`,*`)),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)),bool,long)
.	O
state	*(char)
=	O
pv	*(char)
;	O
if	O
(	O
usestatdate	bool
)	O
{	O
time2date	(long,array(char))->(void)
(	O
workstat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_mtime	O
,	O
altdate	array(char)
)	O
;	O
}	O
if	O
(	O
*	O
altdate	array(char)
!=	O
'\0'	O
)	O
newdelta	struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct(int,long,enum(int,int,int),*`,*`,*`,*`,*`,long)),long,array(long))),*(struct(long,long,long,*(struct(int,long,enum(int,int,int),*`,*`,*`,*`,*`,long)),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct(*`,*`)))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*`,long,array(long))),*(struct(long,long,long,*`,long,array(long))),*(char),struct(*(char),long),*(struct(*`,*`)),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)),bool,long)
.	O
date	*(char)
=	O
altdate	array(char)
;	O
else	O
if	O
(	O
keepflag	bool
&&	O
(	O
pv	*(char)
=	O
PREV	O
(	O
date	*(char)
)	O
)	O
)	O
{	O
str2date	(*(char),array(char))->(void)
(	O
pv	*(char)
,	O
olddate	array(char)
)	O
;	O
newdelta	struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct(int,long,enum(int,int,int),*`,*`,*`,*`,*`,long)),long,array(long))),*(struct(long,long,long,*(struct(int,long,enum(int,int,int),*`,*`,*`,*`,*`,long)),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct(*`,*`)))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*`,long,array(long))),*(struct(long,long,long,*`,long,array(long))),*(char),struct(*(char),long),*(struct(*`,*`)),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)),bool,long)
.	O
date	*(char)
=	O
olddate	array(char)
;	O
}	O
else	O
newdelta	struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct(int,long,enum(int,int,int),*`,*`,*`,*`,*`,long)),long,array(long))),*(struct(long,long,long,*(struct(int,long,enum(int,int,int),*`,*`,*`,*`,*`,long)),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct(*`,*`)))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*`,long,array(long))),*(struct(long,long,long,*`,long,array(long))),*(char),struct(*(char),long),*(struct(*`,*`)),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)),bool,long)
.	O
date	*(char)
=	O
getcurdate	()->(*(char))
(	O
)	O
;	O
if	O
(	O
targetdelta	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
&&	O
DATE_LT	O
(	O
newdelta	struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct(int,long,enum(int,int,int),*`,*`,*`,*`,*`,long)),long,array(long))),*(struct(long,long,long,*(struct(int,long,enum(int,int,int),*`,*`,*`,*`,*`,long)),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct(*`,*`)))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*`,long,array(long))),*(struct(long,long,long,*`,long,array(long))),*(char),struct(*(char),long),*(struct(*`,*`)),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)),bool,long)
.	O
date	*(char)
,	O
targetdelta	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
date	*(char)
)	O
)	O
{	O
RERR	O
(	O
"Date %s precedes %s in revision %s."	*(char)
,	O
date2str	(array(char),array(char))->(*(char))
(	O
newdelta	struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct(int,long,enum(int,int,int),*`,*`,*`,*`,*`,long)),long,array(long))),*(struct(long,long,long,*(struct(int,long,enum(int,int,int),*`,*`,*`,*`,*`,long)),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct(*`,*`)))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*`,long,array(long))),*(struct(long,long,long,*`,long,array(long))),*(char),struct(*(char),long),*(struct(*`,*`)),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)),bool,long)
.	O
date	*(char)
,	O
newdatebuf	array(char)
)	O
,	O
date2str	(array(char),array(char))->(*(char))
(	O
targetdelta	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
date	*(char)
,	O
targetdatebuf	array(char)
)	O
,	O
targetdelta	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
num	*(char)
)	O
;	O
continue	O
;	O
}	O
if	O
(	O
lockflag	bool
&&	O
addlock	(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct(*`,*`)),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)),bool)->(int)
(	O
&	O
newdelta	struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct(int,long,enum(int,int,int),*`,*`,*`,*`,*`,long)),long,array(long))),*(struct(long,long,long,*(struct(int,long,enum(int,int,int),*`,*`,*`,*`,*`,long)),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct(*`,*`)))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*`,long,array(long))),*(struct(long,long,long,*`,long,array(long))),*(char),struct(*(char),long),*(struct(*`,*`)),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)),bool,long)
,	O
true	int
)	O
<	O
0	int
)	O
continue	O
;	O
if	O
(	O
keepflag	bool
&&	O
(	O
pv	*(char)
=	O
PREV	O
(	O
name	*(char)
)	O
)	O
)	O
if	O
(	O
addsymbol	(*(char),*(char),bool)->(int)
(	O
newdelta	struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct(int,long,enum(int,int,int),*`,*`,*`,*`,*`,long)),long,array(long))),*(struct(long,long,long,*(struct(int,long,enum(int,int,int),*`,*`,*`,*`,*`,long)),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct(*`,*`)))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*`,long,array(long))),*(struct(long,long,long,*`,long,array(long))),*(char),struct(*(char),long),*(struct(*`,*`)),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)),bool,long)
.	O
num	*(char)
,	O
pv	*(char)
,	O
false	int
)	O
<	O
0	int
)	O
continue	O
;	O
if	O
(	O
!	O
addsyms	(*(char))->(bool)
(	O
newdelta	struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct(int,long,enum(int,int,int),*`,*`,*`,*`,*`,long)),long,array(long))),*(struct(long,long,long,*(struct(int,long,enum(int,int,int),*`,*`,*`,*`,*`,long)),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct(*`,*`)))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*`,long,array(long))),*(struct(long,long,long,*`,long,array(long))),*(char),struct(*(char),long),*(struct(*`,*`)),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)),bool,long)
.	O
num	*(char)
)	O
)	O
continue	O
;	O
putadmin	()->(void)
(	O
)	O
;	O
frew	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
=	O
FLOW	O
(	O
rewr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
puttree	(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(void)
(	O
tip	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
,	O
frew	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
putdesc	(*(struct(*(char),long)),bool,*(char))->(void)
(	O
&	O
newdesc	struct(*(char),long)
,	O
false	int
,	O
textfile	*(char)
)	O
;	O
changework	int
=	O
kws	int
<	O
MIN_UNCHANGED_EXPAND	O
;	O
dolog	bool
=	O
true	int
;	O
lockthis	bool
=	O
lockflag	bool
;	O
workdelta	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
=	O
&	O
newdelta	struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct(int,long,enum(int,int,int),*`,*`,*`,*`,*`,long)),long,array(long))),*(struct(long,long,long,*(struct(int,long,enum(int,int,int),*`,*`,*`,*`,*`,long)),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct(*`,*`)))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*`,long,array(long))),*(struct(long,long,long,*`,long,array(long))),*(char),struct(*(char),long),*(struct(*`,*`)),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)),bool,long)
;	O
if	O
(	O
rcsinitflag	bool
)	O
{	O
diagnose	(*(char))->(void)
(	O
"initial revision: %s"	*(char)
,	O
newdelta	struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct(int,long,enum(int,int,int),*`,*`,*`,*`,*`,long)),long,array(long))),*(struct(long,long,long,*(struct(int,long,enum(int,int,int),*`,*`,*`,*`,*`,long)),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct(*`,*`)))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*`,long,array(long))),*(struct(long,long,long,*`,long,array(long))),*(char),struct(*(char),long),*(struct(*`,*`)),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)),bool,long)
.	O
num	*(char)
)	O
;	O
newdelta	struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct(int,long,enum(int,int,int),*`,*`,*`,*`,*`,long)),long,array(long))),*(struct(long,long,long,*(struct(int,long,enum(int,int,int),*`,*`,*`,*`,*`,long)),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct(*`,*`)))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*`,long,array(long))),*(struct(long,long,long,*`,long,array(long))),*(char),struct(*(char),long),*(struct(*`,*`)),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)),bool,long)
.	O
pretty_log	struct(*(char),long)
=	O
getlogmsg	()->(struct(*(char),long))
(	O
)	O
;	O
putdftext	(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),bool)->(void)
(	O
&	O
newdelta	struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct(int,long,enum(int,int,int),*`,*`,*`,*`,*`,long)),long,array(long))),*(struct(long,long,long,*(struct(int,long,enum(int,int,int),*`,*`,*`,*`,*`,long)),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct(*`,*`)))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*`,long,array(long))),*(struct(long,long,long,*`,long,array(long))),*(char),struct(*(char),long),*(struct(*`,*`)),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)),bool,long)
,	O
workptr	*(struct(int,long,enum(int,int,int),*(char),*(char),*(char),*((*(struct`))->(void)),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),long))
,	O
frew	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
false	int
)	O
;	O
repo_stat	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
->	O
st_mode	int
=	O
workstat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_mode	int
;	O
repo_stat	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
->	O
st_nlink	long
=	O
0	int
;	O
changedRCS	int
=	O
true	int
;	O
if	O
(	O
from	*(struct)
)	O
IGNORE_REST	O
(	O
from	*(struct)
)	O
;	O
}	O
else	O
{	O
diffname	*(char)
=	O
maketemp	(int)->(*(char))
(	O
0	int
)	O
;	O
newhead	bool
=	O
tip	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
==	O
&	O
newdelta	struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct(int,long,enum(int,int,int),*`,*`,*`,*`,*`,long)),long,array(long))),*(struct(long,long,long,*(struct(int,long,enum(int,int,int),*`,*`,*`,*`,*`,long)),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct(*`,*`)))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*`,long,array(long))),*(struct(long,long,long,*`,long,array(long))),*(char),struct(*(char),long),*(struct(*`,*`)),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)),bool,long)
;	O
if	O
(	O
!	O
newhead	bool
)	O
FLOW	O
(	O
to	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
=	O
frew	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
;	O
expname	*(char)
=	O
buildrevision	(*(struct),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),bool)->(*(char))
(	O
deltas	*(struct)
,	O
targetdelta	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
,	O
NULL	O
,	O
false	int
)	O
;	O
if	O
(	O
!	O
forceciflag	bool
&&	O
STR_SAME	O
(	O
newdelta	struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct(int,long,enum(int,int,int),*`,*`,*`,*`,*`,long)),long,array(long))),*(struct(long,long,long,*(struct(int,long,enum(int,int,int),*`,*`,*`,*`,*`,long)),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct(*`,*`)))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*`,long,array(long))),*(struct(long,long,long,*`,long,array(long))),*(char),struct(*(char),long),*(struct(*`,*`)),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)),bool,long)
.	O
state	*(char)
,	O
targetdelta	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
state	*(char)
)	O
&&	O
(	O
(	O
changework	int
=	O
rcsfcmp	(*(struct),*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)))->(int)
(	O
workptr	*(struct(int,long,enum(int,int,int),*(char),*(char),*(char),*((*(struct`))->(void)),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),long))
,	O
&	O
workstat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
,	O
expname	*(char)
,	O
targetdelta	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
)	O
)	O
<=	O
0	int
)	O
)	O
{	O
diagnose	(*(char))->(void)
(	O
"file is unchanged; reverting to previous revision %s"	*(char)
,	O
targetdelta	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
num	*(char)
)	O
;	O
if	O
(	O
removedlock	bool
<	O
lockflag	bool
)	O
{	O
diagnose	(*(char))->(void)
(	O
"previous revision was not locked; ignoring -l option"	*(char)
)	O
;	O
lockthis	bool
=	O
0	int
;	O
}	O
dolog	bool
=	O
false	int
;	O
if	O
(	O
!	O
(	O
changedRCS	int
=	O
lockflag	bool
<	O
removedlock	bool
||	O
assoclst	struct(*(void),*(struct(*(void),*(struct(*`,*`)))))
.	O
next	*(struct(*(void),*(struct(*(void),*(struct`)))))
)	O
)	O
{	O
workdelta	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
=	O
targetdelta	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
;	O
SAME_AFTER	O
(	O
from	*(struct)
,	O
targetdelta	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
text	*(struct)
)	O
;	O
}	O
else	O
{	O
off_t	long
hwm	long
=	O
ftello	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(long)
(	O
frew	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
bool	bool
bad_truncate	bool
;	O
rewind	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(void)
(	O
frew	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
bad_truncate	bool
=	O
PROB	O
(	O
ftruncate	(int,long)->(int)
(	O
fileno	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
frew	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
,	O
(	O
off_t	long
)	O
0	int
)	O
)	O
;	O
grok_resynch	(*(struct(*(char),*(char),long,*(struct(*`,*`)),long,*(struct(*`,*`)),long,*(struct(*`,*`)),bool,*(struct(long,long,long,*`,long,array(long))),*(struct(long,long,long,*`,long,array(long))),int,long,*(struct(*`,*`)),*(struct(long,long,long,*`,long,array(long))),long,*(struct),*(struct))))->(void)
(	O
REPO	O
(	O
r	*(struct(*(char),*(char),long,*(struct),long,*(struct),long,*(struct),bool,*(struct),*(struct),int,long,*(struct),*(struct),long,*(struct),*(struct)))
)	O
)	O
;	O
prune	(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*`,long,array(long))),*(struct(long,long,long,*`,long,array(long))),*(char),struct(*(char),long),*(struct(*`,*`)),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*`,long,array(long))),*(struct(long,long,long,*`,long,array(long))),*(char),struct(*(char),long),*(struct(*`,*`)),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)))->(void)
(	O
&	O
newdelta	struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct(int,long,enum(int,int,int),*`,*`,*`,*`,*`,long)),long,array(long))),*(struct(long,long,long,*(struct(int,long,enum(int,int,int),*`,*`,*`,*`,*`,long)),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct(*`,*`)))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*`,long,array(long))),*(struct(long,long,long,*`,long,array(long))),*(char),struct(*(char),long),*(struct(*`,*`)),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)),bool,long)
,	O
targetdelta	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
)	O
;	O
if	O
(	O
!	O
(	O
workdelta	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
=	O
gr_revno	(*(char),*(*(struct)))->(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)))
(	O
targetdelta	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
num	*(char)
,	O
&	O
deltas	*(struct)
)	O
)	O
)	O
continue	O
;	O
workdelta	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
pretty_log	struct(*(char),long)
=	O
targetdelta	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
pretty_log	struct(*(char),long)
;	O
if	O
(	O
newdelta	struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct(int,long,enum(int,int,int),*`,*`,*`,*`,*`,long)),long,array(long))),*(struct(long,long,long,*(struct(int,long,enum(int,int,int),*`,*`,*`,*`,*`,long)),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct(*`,*`)))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*`,long,array(long))),*(struct(long,long,long,*`,long,array(long))),*(char),struct(*(char),long),*(struct(*`,*`)),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)),bool,long)
.	O
state	*(char)
!=	O
default_state	array(char)
)	O
workdelta	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
state	*(char)
=	O
newdelta	struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct(int,long,enum(int,int,int),*`,*`,*`,*`,*`,long)),long,array(long))),*(struct(long,long,long,*(struct(int,long,enum(int,int,int),*`,*`,*`,*`,*`,long)),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct(*`,*`)))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*`,long,array(long))),*(struct(long,long,long,*`,long,array(long))),*(char),struct(*(char),long),*(struct(*`,*`)),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)),bool,long)
.	O
state	*(char)
;	O
if	O
(	O
lockthis	bool
<	O
removedlock	bool
&&	O
removelock	(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*`,long,array(long))),*(struct(long,long,long,*`,long,array(long))),*(char),struct(*(char),long),*(struct(*`,*`)),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)))->(int)
(	O
workdelta	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
)	O
<	O
0	int
)	O
continue	O
;	O
if	O
(	O
!	O
addsyms	(*(char))->(bool)
(	O
workdelta	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
num	*(char)
)	O
)	O
continue	O
;	O
if	O
(	O
PROB	O
(	O
dorewrite	(bool,int)->(int)
(	O
true	int
,	O
true	int
)	O
)	O
)	O
continue	O
;	O
VERBATIM	O
(	O
from	*(struct)
,	O
GROK	O
(	O
neck	long
)	O
)	O
;	O
fro_spew	(*(struct(int,long,enum(int,int,int),*(char),*(char),*(char),*((*`)->(void)),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),long)),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(void)
(	O
from	*(struct)
,	O
frew	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
if	O
(	O
bad_truncate	bool
)	O
while	O
(	O
ftello	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(long)
(	O
frew	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
<	O
hwm	long
)	O
afputc	(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(void)
(	O
'\n'	O
,	O
frew	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
}	O
}	O
else	O
{	O
int	O
wfd	int
=	O
workptr	*(struct(int,long,enum(int,int,int),*(char),*(char),*(char),*((*(struct`))->(void)),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),long))
->	O
fd	int
;	O
struct	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
checkworkstat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
;	O
char	O
const	O
*	O
diffv	array(*(char))
[	O
6	int
+	O
!	O
!	O
OPEN_O_BINARY	int
]	O
,	O
*	O
*	O
diffp	*(*(char))
;	O
diagnose	(*(char))->(void)
(	O
"new revision: %s; previous revision: %s"	*(char)
,	O
newdelta	struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct(int,long,enum(int,int,int),*`,*`,*`,*`,*`,long)),long,array(long))),*(struct(long,long,long,*(struct(int,long,enum(int,int,int),*`,*`,*`,*`,*`,long)),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct(*`,*`)))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*`,long,array(long))),*(struct(long,long,long,*`,long,array(long))),*(char),struct(*(char),long),*(struct(*`,*`)),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)),bool,long)
.	O
num	*(char)
,	O
targetdelta	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
num	*(char)
)	O
;	O
SAME_AFTER	O
(	O
from	*(struct)
,	O
targetdelta	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
text	*(struct)
)	O
;	O
newdelta	struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct(int,long,enum(int,int,int),*`,*`,*`,*`,*`,long)),long,array(long))),*(struct(long,long,long,*(struct(int,long,enum(int,int,int),*`,*`,*`,*`,*`,long)),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct(*`,*`)))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*`,long,array(long))),*(struct(long,long,long,*`,long,array(long))),*(char),struct(*(char),long),*(struct(*`,*`)),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)),bool,long)
.	O
pretty_log	struct(*(char),long)
=	O
getlogmsg	()->(struct(*(char),long))
(	O
)	O
;	O
fro_bob	O
(	O
workptr	*(struct(int,long,enum(int,int,int),*(char),*(char),*(char),*((*(struct`))->(void)),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),long))
)	O
;	O
if	O
(	O
PROB	O
(	O
lseek	(int,long,int)->(long)
(	O
wfd	int
,	O
0	int
,	O
SEEK_SET	int
)	O
)	O
)	O
Ierror	()->(void)
(	O
)	O
;	O
diffp	*(*(char))
=	O
diffv	array(*(char))
;	O
*	O
++	O
diffp	*(*(char))
=	O
prog_diff	array(char)
;	O
*	O
++	O
diffp	*(*(char))
=	O
diff_flags	array(char)
;	O
*	O
++	O
diffp	*(*(char))
=	O
newhead	bool
?	O
"-"	*(char)
:	O
expname	*(char)
;	O
*	O
++	O
diffp	*(*(char))
=	O
newhead	bool
?	O
expname	*(char)
:	O
"-"	*(char)
;	O
*	O
++	O
diffp	*(*(char))
=	O
NULL	O
;	O
if	O
(	O
DIFF_TROUBLE	int
==	O
runv	(int,*(char),*(*(char)))->(int)
(	O
wfd	int
,	O
diffname	*(char)
,	O
diffv	array(*(char))
)	O
)	O
RFATAL	O
(	O
"diff failed"	*(char)
)	O
;	O
if	O
(	O
newhead	bool
)	O
{	O
fro_bob	O
(	O
workptr	*(struct(int,long,enum(int,int,int),*(char),*(char),*(char),*((*(struct`))->(void)),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),long))
)	O
;	O
putdftext	(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),bool)->(void)
(	O
&	O
newdelta	struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct(int,long,enum(int,int,int),*`,*`,*`,*`,*`,long)),long,array(long))),*(struct(long,long,long,*(struct(int,long,enum(int,int,int),*`,*`,*`,*`,*`,long)),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct(*`,*`)))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*`,long,array(long))),*(struct(long,long,long,*`,long,array(long))),*(char),struct(*(char),long),*(struct(*`,*`)),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)),bool,long)
,	O
workptr	*(struct(int,long,enum(int,int,int),*(char),*(char),*(char),*((*(struct`))->(void)),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),long))
,	O
frew	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
false	int
)	O
;	O
if	O
(	O
!	O
putdtext	(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)),*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),bool)->(bool)
(	O
targetdelta	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
,	O
diffname	*(char)
,	O
frew	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
true	int
)	O
)	O
continue	O
;	O
}	O
else	O
if	O
(	O
!	O
putdtext	(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)),*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),bool)->(bool)
(	O
&	O
newdelta	struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct(int,long,enum(int,int,int),*`,*`,*`,*`,*`,long)),long,array(long))),*(struct(long,long,long,*(struct(int,long,enum(int,int,int),*`,*`,*`,*`,*`,long)),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct(*`,*`)))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*`,long,array(long))),*(struct(long,long,long,*`,long,array(long))),*(char),struct(*(char),long),*(struct(*`,*`)),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)),bool,long)
,	O
diffname	*(char)
,	O
frew	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
true	int
)	O
)	O
continue	O
;	O
if	O
(	O
PROB	O
(	O
fstat	(int,*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))))->(int)
(	O
wfd	int
,	O
&	O
checkworkstat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
)	O
)	O
||	O
workstat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_mtime	O
!=	O
checkworkstat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_mtime	O
||	O
workstat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_size	long
!=	O
checkworkstat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_size	long
)	O
{	O
MERR	O
(	O
"file changed during checkin"	*(char)
)	O
;	O
continue	O
;	O
}	O
changedRCS	int
=	O
true	int
;	O
}	O
}	O
wtime	long
=	O
(	O
time_t	long
)	O
-	O
1	int
;	O
if	O
(	O
mtimeflag	bool
|	O
Ttimeflag	bool
)	O
wtime	long
=	O
date2time	(array(char))->(long)
(	O
workdelta	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
date	*(char)
)	O
;	O
if	O
(	O
PROB	O
(	O
donerewrite	(int,long)->(int)
(	O
changedRCS	int
,	O
!	O
Ttimeflag	bool
?	O
(	O
time_t	long
)	O
-	O
1	int
:	O
from	*(struct)
&&	O
wtime	long
<	O
(	O
repo_stat	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
->	O
st_mtime	O
?	O
repo_stat	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
->	O
st_mtime	O
:	O
wtime	long
)	O
)	O
)	O
)	O
continue	O
;	O
if	O
(	O
!	O
keepworkingfile	bool
)	O
{	O
fro_zclose	(*(*(struct(int,long,enum(int,int,int),*(char),*(char),*(char),*((*`)->(void)),*(struct`),long))))->(void)
(	O
&	O
workptr	*(struct(int,long,enum(int,int,int),*(char),*(char),*(char),*((*(struct`))->(void)),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),long))
)	O
;	O
r	*(struct(*(char),*(char),long,*(struct),long,*(struct),long,*(struct),bool,*(struct),*(struct),int,long,*(struct),*(struct),long,*(struct),*(struct)))
=	O
un_link	(*(char))->(int)
(	O
mani_filename	*(char)
)	O
;	O
}	O
else	O
{	O
newworkmode	int
=	O
WORKMODE	O
(	O
repo_stat	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
->	O
st_mode	int
,	O
!	O
(	O
kws	int
==	O
kwsub_v	int
||	O
lockthis	bool
<	O
BE	O
(	O
strictly_locking	bool
)	O
)	O
)	O
;	O
mtime	long
=	O
mtimeflag	bool
?	O
wtime	long
:	O
(	O
time_t	long
)	O
-	O
1	int
;	O
if	O
(	O
changework	int
||	O
PROB	O
(	O
r	*(struct(*(char),*(char),long,*(struct),long,*(struct),long,*(struct),bool,*(struct),*(struct),int,long,*(struct),*(struct),long,*(struct),*(struct)))
=	O
fixwork	(int,long)->(int)
(	O
newworkmode	int
,	O
mtime	long
)	O
)	O
)	O
{	O
fro_bob	O
(	O
workptr	*(struct(int,long,enum(int,int,int),*(char),*(char),*(char),*((*(struct`))->(void)),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),long))
)	O
;	O
BE	O
(	O
inclusive_of_Locker_in_Id_val	bool
)	O
=	O
lockthis	bool
;	O
workdelta	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
name	*(char)
=	O
namedrev	(*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)))->(*(char))
(	O
assoclst	struct(*(void),*(struct(*(void),*(struct(*`,*`)))))
.	O
next	*(struct(*(void),*(struct(*(void),*(struct`)))))
?	O
first_meaningful_symbolic_name	()->(*(char))
(	O
)	O
:	O
(	O
keepflag	bool
&&	O
(	O
pv	*(char)
=	O
PREV	O
(	O
name	*(char)
)	O
)	O
?	O
pv	*(char)
:	O
rev	*(char)
)	O
,	O
workdelta	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
)	O
;	O
switch	O
(	O
xpandfile	(*(struct(int,long,enum(int,int,int),*(char),*(char),*(char),*((*`)->(void)),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),long)),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*`,long,array(long))),*(struct(long,long,long,*`,long,array(long))),*(char),struct(*(char),long),*(struct(*`,*`)),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)),*(*(char)),bool)->(int)
(	O
workptr	*(struct(int,long,enum(int,int,int),*(char),*(char),*(char),*((*(struct`))->(void)),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),long))
,	O
workdelta	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
,	O
&	O
newworkname	*(char)
,	O
dolog	bool
)	O
)	O
{	O
default	O
:	O
continue	O
;	O
case	O
0	int
:	O
if	O
(	O
changework	int
)	O
if	O
(	O
(	O
r	*(struct(*(char),*(char),long,*(struct),long,*(struct),long,*(struct),bool,*(struct),*(struct),int,long,*(struct),*(struct),long,*(struct),*(struct)))
=	O
fixwork	(int,long)->(int)
(	O
newworkmode	int
,	O
mtime	long
)	O
)	O
==	O
0	int
)	O
break	O
;	O
case	O
1	int
:	O
fro_zclose	(*(*(struct(int,long,enum(int,int,int),*(char),*(char),*(char),*((*`)->(void)),*(struct`),long))))->(void)
(	O
&	O
workptr	*(struct(int,long,enum(int,int,int),*(char),*(char),*(char),*((*(struct`))->(void)),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),long))
)	O
;	O
aflush	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(void)
(	O
exfile	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
IGNOREINTS	O
(	O
)	O
;	O
r	*(struct(*(char),*(char),long,*(struct),long,*(struct),long,*(struct),bool,*(struct),*(struct),int,long,*(struct),*(struct),long,*(struct),*(struct)))
=	O
chnamemod	(*(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char)))),*(char),*(char),int,int,long)->(int)
(	O
&	O
exfile	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
newworkname	*(char)
,	O
mani_filename	*(char)
,	O
1	int
,	O
newworkmode	int
,	O
mtime	long
)	O
;	O
keepdirtemp	(*(char))->(void)
(	O
newworkname	*(char)
)	O
;	O
RESTOREINTS	O
(	O
)	O
;	O
}	O
}	O
}	O
if	O
(	O
PROB	O
(	O
r	*(struct(*(char),*(char),long,*(struct),long,*(struct),long,*(struct),bool,*(struct),*(struct),int,long,*(struct),*(struct),long,*(struct),*(struct)))
)	O
)	O
{	O
syserror_errno	O
(	O
mani_filename	*(char)
)	O
;	O
continue	O
;	O
}	O
diagnose	(*(char))->(void)
(	O
"done"	*(char)
)	O
;	O
}	O
tempunlink	()->(void)
(	O
)	O
;	O
gnurcs_goodbye	()->(void)
(	O
)	O
;	O
return	O
exitstatus	int
;	O
}	O
