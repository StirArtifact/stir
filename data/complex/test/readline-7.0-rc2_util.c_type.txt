int	O
_rl_allow_pathname_alphabetic_chars	int
=	O
0	int
;	O
static	O
const	O
char	O
*	O
const	O
pathname_alphabetic_chars	*(char)
=	O
"/-_=~.#$"	*(char)
;	O
int	O
rl_alphabetic	(int)->(int)
(	O
c	int
)	O
int	O
c	int
;	O
{	O
if	O
(	O
ALPHABETIC	O
(	O
c	int
)	O
)	O
return	O
(	O
1	int
)	O
;	O
return	O
(	O
_rl_allow_pathname_alphabetic_chars	int
&&	O
strchr	(*(char),int)->(*(char))
(	O
pathname_alphabetic_chars	*(char)
,	O
c	int
)	O
!=	O
NULL	O
)	O
;	O
}	O
int	O
_rl_walphabetic	(int)->(int)
(	O
wchar_t	int
wc	int
)	O
{	O
int	O
c	int
;	O
if	O
(	O
iswalnum	(int)->(int)
(	O
wc	int
)	O
)	O
return	O
(	O
1	int
)	O
;	O
c	int
=	O
wc	int
&	O
0177	int
;	O
return	O
(	O
_rl_allow_pathname_alphabetic_chars	int
&&	O
strchr	(*(char),int)->(*(char))
(	O
pathname_alphabetic_chars	*(char)
,	O
c	int
)	O
!=	O
NULL	O
)	O
;	O
}	O
int	O
_rl_abort_internal	()->(int)
(	O
)	O
{	O
rl_ding	()->(int)
(	O
)	O
;	O
rl_clear_message	()->(int)
(	O
)	O
;	O
_rl_reset_argument	()->(void)
(	O
)	O
;	O
rl_clear_pending_input	()->(int)
(	O
)	O
;	O
RL_UNSETSTATE	O
(	O
RL_STATE_MACRODEF	int
)	O
;	O
while	O
(	O
rl_executing_macro	*(char)
)	O
_rl_pop_executing_macro	()->(void)
(	O
)	O
;	O
RL_UNSETSTATE	O
(	O
RL_STATE_MULTIKEY	int
)	O
;	O
rl_last_func	*((int,int)->(int))
=	O
(	O
rl_command_func_t	(int,int)->(int)
*	O
)	O
NULL	O
;	O
_rl_longjmp	O
(	O
_rl_top_level	array(struct(array(long),int,struct(array(long))))
,	O
1	int
)	O
;	O
return	O
(	O
0	int
)	O
;	O
}	O
int	O
rl_abort	(int,int)->(int)
(	O
count	int
,	O
key	int
)	O
int	O
count	int
,	O
key	int
;	O
{	O
return	O
(	O
_rl_abort_internal	()->(int)
(	O
)	O
)	O
;	O
}	O
int	O
_rl_null_function	(int,int)->(int)
(	O
count	int
,	O
key	int
)	O
int	O
count	int
,	O
key	int
;	O
{	O
return	O
0	int
;	O
}	O
int	O
rl_tty_status	(int,int)->(int)
(	O
count	int
,	O
key	int
)	O
int	O
count	int
,	O
key	int
;	O
{	O
rl_ding	()->(int)
(	O
)	O
;	O
return	O
0	int
;	O
}	O
char	O
*	O
rl_copy_text	(int,int)->(*(char))
(	O
from	int
,	O
to	int
)	O
int	O
from	int
,	O
to	int
;	O
{	O
register	O
int	O
length	int
;	O
char	O
*	O
copy	*(char)
;	O
if	O
(	O
from	int
>	O
to	int
)	O
SWAP	O
(	O
from	int
,	O
to	int
)	O
;	O
length	int
=	O
to	int
-	O
from	int
;	O
copy	*(char)
=	O
(	O
char	O
*	O
)	O
xmalloc	(long)->(*(void))
(	O
1	int
+	O
length	int
)	O
;	O
strncpy	(*(char),*(char),long)->(*(char))
(	O
copy	*(char)
,	O
rl_line_buffer	*(char)
+	O
from	int
,	O
length	int
)	O
;	O
copy	*(char)
[	O
length	int
]	O
=	O
'\0'	O
;	O
return	O
(	O
copy	*(char)
)	O
;	O
}	O
void	O
rl_extend_line_buffer	(int)->(void)
(	O
len	int
)	O
int	O
len	int
;	O
{	O
while	O
(	O
len	int
>=	O
rl_line_buffer_len	int
)	O
{	O
rl_line_buffer_len	int
+=	O
DEFAULT_BUFFER_SIZE	int
;	O
rl_line_buffer	*(char)
=	O
(	O
char	O
*	O
)	O
xrealloc	(*(void),long)->(*(void))
(	O
rl_line_buffer	*(char)
,	O
rl_line_buffer_len	int
)	O
;	O
}	O
_rl_set_the_line	()->(void)
(	O
)	O
;	O
}	O
int	O
rl_tilde_expand	(int,int)->(int)
(	O
ignore	int
,	O
key	int
)	O
int	O
ignore	int
,	O
key	int
;	O
{	O
register	O
int	O
start	int
,	O
end	int
;	O
char	O
*	O
homedir	*(char)
,	O
*	O
temp	*(char)
;	O
int	O
len	int
;	O
end	int
=	O
rl_point	int
;	O
start	int
=	O
end	int
-	O
1	int
;	O
if	O
(	O
rl_point	int
==	O
rl_end	int
&&	O
rl_line_buffer	*(char)
[	O
rl_point	int
]	O
==	O
'~'	O
)	O
{	O
homedir	*(char)
=	O
tilde_expand	(*(char))->(*(char))
(	O
"~"	*(char)
)	O
;	O
_rl_replace_text	(*(char),int,int)->(int)
(	O
homedir	*(char)
,	O
start	int
,	O
end	int
)	O
;	O
xfree	(*(void))->(void)
(	O
homedir	*(char)
)	O
;	O
return	O
(	O
0	int
)	O
;	O
}	O
else	O
if	O
(	O
start	int
>=	O
0	int
&&	O
rl_line_buffer	*(char)
[	O
start	int
]	O
!=	O
'~'	O
)	O
{	O
for	O
(	O
;	O
!	O
whitespace	O
(	O
rl_line_buffer	*(char)
[	O
start	int
]	O
)	O
&&	O
start	int
>=	O
0	int
;	O
start	int
--	O
)	O
;	O
start	int
++	O
;	O
}	O
else	O
if	O
(	O
start	int
<	O
0	int
)	O
start	int
=	O
0	int
;	O
end	int
=	O
start	int
;	O
do	O
end	int
++	O
;	O
while	O
(	O
whitespace	O
(	O
rl_line_buffer	*(char)
[	O
end	int
]	O
)	O
==	O
0	int
&&	O
end	int
<	O
rl_end	int
)	O
;	O
if	O
(	O
whitespace	O
(	O
rl_line_buffer	*(char)
[	O
end	int
]	O
)	O
||	O
end	int
>=	O
rl_end	int
)	O
end	int
--	O
;	O
if	O
(	O
rl_line_buffer	*(char)
[	O
start	int
]	O
==	O
'~'	O
)	O
{	O
len	int
=	O
end	int
-	O
start	int
+	O
1	int
;	O
temp	*(char)
=	O
(	O
char	O
*	O
)	O
xmalloc	(long)->(*(void))
(	O
len	int
+	O
1	int
)	O
;	O
strncpy	(*(char),*(char),long)->(*(char))
(	O
temp	*(char)
,	O
rl_line_buffer	*(char)
+	O
start	int
,	O
len	int
)	O
;	O
temp	*(char)
[	O
len	int
]	O
=	O
'\0'	O
;	O
homedir	*(char)
=	O
tilde_expand	(*(char))->(*(char))
(	O
temp	*(char)
)	O
;	O
xfree	(*(void))->(void)
(	O
temp	*(char)
)	O
;	O
_rl_replace_text	(*(char),int,int)->(int)
(	O
homedir	*(char)
,	O
start	int
,	O
end	int
)	O
;	O
xfree	(*(void))->(void)
(	O
homedir	*(char)
)	O
;	O
}	O
return	O
(	O
0	int
)	O
;	O
}	O
void	O
_rl_ttymsg	(*(char))->(void)
(	O
const	O
char	O
*	O
format	*(char)
,	O
...	O
)	O
{	O
va_list	array(struct(int,int,*(void),*(void)))
args	array(struct(int,int,*(void),*(void)))
;	O
va_start	O
(	O
args	array(struct(int,int,*(void),*(void)))
,	O
format	*(char)
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"readline: "	*(char)
)	O
;	O
vfprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char),array(struct(int,int,*(void),*(void))))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
format	*(char)
,	O
args	array(struct(int,int,*(void),*(void)))
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"\n"	*(char)
)	O
;	O
fflush	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
va_end	O
(	O
args	array(struct(int,int,*(void),*(void)))
)	O
;	O
rl_forced_update_display	()->(int)
(	O
)	O
;	O
}	O
void	O
_rl_errmsg	(*(char))->(void)
(	O
const	O
char	O
*	O
format	*(char)
,	O
...	O
)	O
{	O
va_list	array(struct(int,int,*(void),*(void)))
args	array(struct(int,int,*(void),*(void)))
;	O
va_start	O
(	O
args	array(struct(int,int,*(void),*(void)))
,	O
format	*(char)
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"readline: "	*(char)
)	O
;	O
vfprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char),array(struct(int,int,*(void),*(void))))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
format	*(char)
,	O
args	array(struct(int,int,*(void),*(void)))
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"\n"	*(char)
)	O
;	O
fflush	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
va_end	O
(	O
args	array(struct(int,int,*(void),*(void)))
)	O
;	O
}	O
char	O
*	O
_rl_strindex	(*(char),*(char))->(*(char))
(	O
s1	*(char)
,	O
s2	*(char)
)	O
register	O
const	O
char	O
*	O
s1	*(char)
,	O
*	O
s2	*(char)
;	O
{	O
register	O
int	O
i	int
,	O
l	int
,	O
len	int
;	O
for	O
(	O
i	int
=	O
0	int
,	O
l	int
=	O
strlen	(*(char))->(long)
(	O
s2	*(char)
)	O
,	O
len	int
=	O
strlen	(*(char))->(long)
(	O
s1	*(char)
)	O
;	O
(	O
len	int
-	O
i	int
)	O
>=	O
l	int
;	O
i	int
++	O
)	O
if	O
(	O
_rl_strnicmp	O
(	O
s1	*(char)
+	O
i	int
,	O
s2	*(char)
,	O
l	int
)	O
==	O
0	int
)	O
return	O
(	O
(	O
char	O
*	O
)	O
(	O
s1	*(char)
+	O
i	int
)	O
)	O
;	O
return	O
(	O
(	O
char	O
*	O
)	O
NULL	O
)	O
;	O
}	O
int	O
_rl_qsort_string_compare	(*(*(char)),*(*(char)))->(int)
(	O
s1	*(char)
,	O
s2	*(char)
)	O
char	O
*	O
*	O
s1	*(char)
,	O
*	O
*	O
s2	*(char)
;	O
{	O
return	O
(	O
strcoll	(*(char),*(char))->(int)
(	O
*	O
s1	*(char)
,	O
*	O
s2	*(char)
)	O
)	O
;	O
}	O
FUNCTION_FOR_MACRO	O
(	O
_rl_digit_p	(int)->(int)
)	O
FUNCTION_FOR_MACRO	O
(	O
_rl_digit_value	(int)->(int)
)	O
FUNCTION_FOR_MACRO	O
(	O
_rl_lowercase_p	(int)->(int)
)	O
FUNCTION_FOR_MACRO	O
(	O
_rl_pure_alphabetic	(int)->(int)
)	O
FUNCTION_FOR_MACRO	O
(	O
_rl_to_lower	(int)->(int)
)	O
FUNCTION_FOR_MACRO	O
(	O
_rl_to_upper	(int)->(int)
)	O
FUNCTION_FOR_MACRO	O
(	O
_rl_uppercase_p	(int)->(int)
)	O
void	O
rl_free	(*(void))->(void)
(	O
mem	*(void)
)	O
void	O
*	O
mem	*(void)
;	O
{	O
if	O
(	O
mem	*(void)
)	O
free	(*(void))->(void)
(	O
mem	*(void)
)	O
;	O
}	O
char	O
*	O
_rl_savestring	(*(char))->(*(char))
(	O
s	*(char)
)	O
const	O
char	O
*	O
s	*(char)
;	O
{	O
return	O
(	O
strcpy	(*(char),*(char))->(*(char))
(	O
(	O
char	O
*	O
)	O
xmalloc	(long)->(*(void))
(	O
1	int
+	O
(	O
int	O
)	O
strlen	(*(char))->(long)
(	O
s	*(char)
)	O
)	O
,	O
(	O
s	*(char)
)	O
)	O
)	O
;	O
}	O
