int	O
exit_code	int
;	O
void	O
mda_close_fds	()->(void)
(	O
void	O
)	O
{	O
int	O
i	long
;	O
long	O
fdlimit	long
=	O
sysconf	(int)->(long)
(	O
_SC_OPEN_MAX	int
)	O
;	O
for	O
(	O
i	long
=	O
3	int
;	O
i	long
<	O
fdlimit	long
;	O
i	long
++	O
)	O
close	*((*(void))->(int))
(	O
i	long
)	O
;	O
}	O
int	O
mda_switch_user_id	(*(struct(*(char),*(char),*(char),int,int,*(char),*(char),*(char),*(char),long,int,int)),int)->(int)
(	O
struct	O
mu_auth_data	struct(*(char),*(char),*(char),int,int,*(char),*(char),*(char),*(char),long,int,int)
*	O
auth	*(*(struct(*(char),*(char),*(char),int,int,*(char),*(char),*(char),*(char),long,int,int)))
,	O
int	O
user	*(char)
)	O
{	O
int	O
rc	int
;	O
uid_t	int
uid	int
;	O
if	O
(	O
!	O
auth	*(*(struct(*(char),*(char),*(char),int,int,*(char),*(char),*(char),*(char),long,int,int)))
||	O
auth	*(*(struct(*(char),*(char),*(char),int,int,*(char),*(char),*(char),*(char),long,int,int)))
->	O
change_uid	int
==	O
0	int
)	O
return	O
0	int
;	O
if	O
(	O
user	*(char)
)	O
uid	int
=	O
auth	*(*(struct(*(char),*(char),*(char),int,int,*(char),*(char),*(char),*(char),long,int,int)))
->	O
uid	int
;	O
else	O
uid	int
=	O
0	int
;	O
rc	int
=	O
setreuid	(int,int)->(int)
(	O
0	int
,	O
uid	int
)	O
;	O
if	O
(	O
rc	int
<	O
0	int
)	O
mda_error	(*(char))->(void)
(	O
"setreuid(0, %d): %s (r=%d, e=%d)"	*(char)
,	O
uid	int
,	O
strerror	(int)->(*(char))
(	O
errno	O
)	O
,	O
getuid	()->(int)
(	O
)	O
,	O
geteuid	()->(int)
(	O
)	O
)	O
;	O
return	O
rc	int
;	O
}	O
static	O
int	O
temp_errors	array(int)
[	O
]	O
=	O
{	O
EAGAIN	int
,	O
EBUSY	int
,	O
EUSERS	int
,	O
ECONNABORTED	int
,	O
ECONNREFUSED	int
,	O
ECONNRESET	int
,	O
EDEADLK	int
,	O
EDEADLOCK	O
,	O
EFBIG	int
,	O
EHOSTDOWN	int
,	O
EHOSTUNREACH	int
,	O
EMFILE	int
,	O
ENETDOWN	int
,	O
ENETUNREACH	int
,	O
ENETRESET	int
,	O
ENFILE	int
,	O
ENOBUFS	int
,	O
ENOMEM	int
,	O
ENOSPC	int
,	O
EROFS	int
,	O
ESTALE	int
,	O
ETIMEDOUT	int
,	O
EWOULDBLOCK	O
,	O
}	O
;	O
static	O
void	O
guess_retval	(int)->(void)
(	O
int	O
ec	int
)	O
{	O
int	O
i	long
;	O
if	O
(	O
exit_code	int
==	O
EX_TEMPFAIL	int
)	O
return	O
;	O
if	O
(	O
ec	int
==	O
EDQUOT	int
)	O
{	O
exit_code	int
=	O
EX_QUOTA	O
;	O
return	O
;	O
}	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
sizeof	O
(	O
temp_errors	array(int)
)	O
/	O
sizeof	O
(	O
temp_errors	array(int)
[	O
0	int
]	O
)	O
;	O
i	long
++	O
)	O
if	O
(	O
temp_errors	array(int)
[	O
i	long
]	O
==	O
ec	int
)	O
{	O
exit_code	int
=	O
EX_TEMPFAIL	int
;	O
return	O
;	O
}	O
exit_code	int
=	O
EX_UNAVAILABLE	int
;	O
}	O
void	O
mda_error	(*(char))->(void)
(	O
const	O
char	O
*	O
fmt	*(char)
,	O
...	O
)	O
{	O
va_list	array(struct(int,int,*(void),*(void)))
ap	array(struct(int,int,*(void),*(void)))
;	O
guess_retval	(int)->(void)
(	O
errno	O
)	O
;	O
va_start	O
(	O
ap	array(struct(int,int,*(void),*(void)))
,	O
fmt	*(char)
)	O
;	O
mu_verror	(*(char),array(struct(int,int,*(void),*(void))))->(int)
(	O
fmt	*(char)
,	O
ap	array(struct(int,int,*(void),*(void)))
)	O
;	O
va_end	O
(	O
ap	array(struct(int,int,*(void),*(void)))
)	O
;	O
}	O
static	O
struct	O
mu_cli_capa	struct(*(char),*(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*(struct`),*(struct`),*(char))->(void)),*(char))),*(struct(*(char),int,*(void),long,*((*(void),*(struct`))->(int)),*(char),*(char))),*((enum(int,int),*(struct(struct(struct`,struct`),enum(int,int,int),*(char),*(struct`),*(struct`),*(struct`))),*(char),*(*(void)),*(void),*(struct(*(struct`),*(struct`))))->(int)),*((*(void))->(void)))
mda_cli_capa	array(struct(*(char),*(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*`,*`,*`)->(void)),*(char))),*(struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char))),*((enum(int,int),*(struct(struct`,enum(int,int,int),*`,*`,*`,*`)),*(char),*(*(void)),*(void),*(struct(*`,*`)))->(int)),*((*(void))->(void))))
[	O
]	O
=	O
{	O
{	O
"forward"	*(char)
,	O
NULL	O
,	O
mda_forward_cfg	array(struct(*(char),int,*(void),long,*((*(void),*(struct(int,union`)))->(int)),*(char),*(char)))
}	O
,	O
{	O
"deliver"	*(char)
,	O
mda_deliver_options	array(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*(struct(int,*`,long,*`,int,*`,*`,int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,*`,*`,int,*`,int,int,int,long,*`)),*(struct(*`,int,*`,int,*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`)),*(char))->(void)),*(char)))
,	O
mda_deliver_cfg	array(struct(*(char),int,*(void),long,*((*(void),*(struct(int,union`)))->(int)),*(char),*(char)))
}	O
,	O
{	O
"quota"	*(char)
,	O
NULL	O
,	O
mda_mailquota_cfg	array(struct(*(char),int,*(void),long,*((*(void),*(struct(int,union`)))->(int)),*(char),*(char)))
}	O
,	O
{	O
"script"	*(char)
,	O
mda_script_options	array(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*(struct(int,*`,long,*`,int,*`,*`,int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,*`,*`,int,*`,int,int,int,long,*`)),*(struct(*`,int,*`,int,*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`)),*(char))->(void)),*(char)))
,	O
mda_script_cfg	array(struct(*(char),int,*(void),long,*((*(void),*(struct(int,union`)))->(int)),*(char),*(char)))
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
void	O
mda_cli_capa_init	()->(void)
(	O
void	O
)	O
{	O
size_t	long
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
mda_cli_capa	array(struct(*(char),*(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*`,*`,*`)->(void)),*(char))),*(struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char))),*((enum(int,int),*(struct(struct`,enum(int,int,int),*`,*`,*`,*`)),*(char),*(*(void)),*(void),*(struct(*`,*`)))->(int)),*((*(void))->(void))))
[	O
i	long
]	O
.	O
name	*(char)
;	O
i	long
++	O
)	O
mu_cli_capa_register	(*(struct(*(char),*(struct(*`,int,*`,int,*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`)),*(struct(*`,int,*`,long,*`,*`,*`)),*((enum(int,int),*`,*`,*`,*`,*`)->(int)),*((*`)->(void)))))->(void)
(	O
&	O
mda_cli_capa	array(struct(*(char),*(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*`,*`,*`)->(void)),*(char))),*(struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char))),*((enum(int,int),*(struct(struct`,enum(int,int,int),*`,*`,*`,*`)),*(char),*(*(void)),*(void),*(struct(*`,*`)))->(int)),*((*(void))->(void))))
[	O
i	long
]	O
)	O
;	O
}	O
