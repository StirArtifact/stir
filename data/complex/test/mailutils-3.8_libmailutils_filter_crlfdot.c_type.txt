enum	O
crlfdot_decode_state	enum(int,int,int,int,int,int,int)
{	O
crlfdot_decode_init	int
,	O
crlfdot_decode_char	int
,	O
crlfdot_decode_cr	int
,	O
crlfdot_decode_crlf	int
,	O
crlfdot_decode_dot	int
,	O
crlfdot_decode_dotcr	int
,	O
crlfdot_decode_end	int
}	O
;	O
static	O
enum	O
crlfdot_decode_state	enum(int,int,int,int,int,int,int)
new_decode_state	(enum(int,int,int,int,int,int,int),int)->(enum(int,int,int,int,int,int,int))
(	O
enum	O
crlfdot_decode_state	enum(int,int,int,int,int,int,int)
state	*(int)
,	O
int	O
c	int
)	O
{	O
switch	O
(	O
state	*(int)
)	O
{	O
case	O
crlfdot_decode_init	int
:	O
switch	O
(	O
c	int
)	O
{	O
case	O
'\r'	O
:	O
return	O
crlfdot_decode_cr	int
;	O
case	O
'.'	O
:	O
return	O
crlfdot_decode_dot	int
;	O
}	O
break	O
;	O
case	O
crlfdot_decode_char	int
:	O
switch	O
(	O
c	int
)	O
{	O
case	O
'\r'	O
:	O
return	O
crlfdot_decode_cr	int
;	O
}	O
break	O
;	O
case	O
crlfdot_decode_cr	int
:	O
switch	O
(	O
c	int
)	O
{	O
case	O
'\r'	O
:	O
return	O
crlfdot_decode_cr	int
;	O
case	O
'\n'	O
:	O
return	O
crlfdot_decode_crlf	int
;	O
}	O
break	O
;	O
case	O
crlfdot_decode_crlf	int
:	O
switch	O
(	O
c	int
)	O
{	O
case	O
'\r'	O
:	O
return	O
crlfdot_decode_cr	int
;	O
case	O
'.'	O
:	O
return	O
crlfdot_decode_dot	int
;	O
}	O
case	O
crlfdot_decode_dot	int
:	O
switch	O
(	O
c	int
)	O
{	O
case	O
'\r'	O
:	O
return	O
crlfdot_decode_dotcr	int
;	O
}	O
break	O
;	O
case	O
crlfdot_decode_dotcr	int
:	O
switch	O
(	O
c	int
)	O
{	O
case	O
'\n'	O
:	O
return	O
crlfdot_decode_end	int
;	O
}	O
case	O
crlfdot_decode_end	int
:	O
break	O
;	O
}	O
return	O
crlfdot_decode_char	int
;	O
}	O
static	O
enum	O
mu_filter_result	enum(int,int,int,int,int)
_crlfdot_decoder	(*(void),enum(int,int,int,int,int),*(struct(*(char),long,*(char),long,int,int)))->(enum(int,int,int,int,int))
(	O
void	O
*	O
xd	*(void)
,	O
enum	O
mu_filter_command	enum(int,int,int,int,int)
cmd	enum(int,int,int,int,int)
,	O
struct	O
mu_filter_io	struct(*(char),long,*(char),long,int,int)
*	O
iobuf	*(struct(*(char),long,*(char),long,int,int))
)	O
{	O
int	O
*	O
pstate	*(int)
=	O
xd	*(void)
;	O
size_t	long
i	long
,	O
j	long
;	O
const	O
unsigned	O
char	O
*	O
iptr	*(char)
;	O
size_t	long
isize	long
;	O
char	O
*	O
optr	*(char)
;	O
size_t	long
osize	long
;	O
switch	O
(	O
cmd	enum(int,int,int,int,int)
)	O
{	O
case	O
mu_filter_init	int
:	O
*	O
pstate	*(int)
=	O
crlfdot_decode_init	int
;	O
return	O
mu_filter_ok	int
;	O
case	O
mu_filter_done	int
:	O
return	O
mu_filter_ok	int
;	O
default	O
:	O
break	O
;	O
}	O
iptr	*(char)
=	O
(	O
const	O
unsigned	O
char	O
*	O
)	O
iobuf	*(struct(*(char),long,*(char),long,int,int))
->	O
input	*(char)
;	O
isize	long
=	O
iobuf	*(struct(*(char),long,*(char),long,int,int))
->	O
isize	long
;	O
optr	*(char)
=	O
iobuf	*(struct(*(char),long,*(char),long,int,int))
->	O
output	*(char)
;	O
osize	long
=	O
iobuf	*(struct(*(char),long,*(char),long,int,int))
->	O
osize	long
;	O
for	O
(	O
i	long
=	O
j	long
=	O
0	int
;	O
*	O
pstate	*(int)
!=	O
crlfdot_decode_end	int
&&	O
i	long
<	O
isize	long
&&	O
j	long
<	O
osize	long
;	O
i	long
++	O
)	O
{	O
unsigned	O
char	O
c	int
=	O
*	O
iptr	*(char)
++	O
;	O
if	O
(	O
c	int
==	O
'\r'	O
)	O
{	O
if	O
(	O
i	long
+	O
1	int
==	O
isize	long
)	O
break	O
;	O
*	O
pstate	*(int)
=	O
new_decode_state	(enum(int,int,int,int,int,int,int),int)->(enum(int,int,int,int,int,int,int))
(	O
*	O
pstate	*(int)
,	O
c	int
)	O
;	O
if	O
(	O
*	O
iptr	*(char)
==	O
'\n'	O
)	O
continue	O
;	O
}	O
else	O
if	O
(	O
c	int
==	O
'.'	O
&&	O
(	O
*	O
pstate	*(int)
==	O
crlfdot_decode_init	int
||	O
*	O
pstate	*(int)
==	O
crlfdot_decode_crlf	int
)	O
)	O
{	O
if	O
(	O
i	long
+	O
2	int
==	O
isize	long
)	O
break	O
;	O
*	O
pstate	*(int)
=	O
new_decode_state	(enum(int,int,int,int,int,int,int),int)->(enum(int,int,int,int,int,int,int))
(	O
*	O
pstate	*(int)
,	O
c	int
)	O
;	O
if	O
(	O
*	O
iptr	*(char)
!=	O
'\r'	O
)	O
continue	O
;	O
}	O
else	O
*	O
pstate	*(int)
=	O
new_decode_state	(enum(int,int,int,int,int,int,int),int)->(enum(int,int,int,int,int,int,int))
(	O
*	O
pstate	*(int)
,	O
c	int
)	O
;	O
optr	*(char)
[	O
j	long
++	O
]	O
=	O
c	int
;	O
}	O
if	O
(	O
*	O
pstate	*(int)
==	O
crlfdot_decode_end	int
)	O
{	O
j	long
-=	O
2	int
;	O
iobuf	*(struct(*(char),long,*(char),long,int,int))
->	O
eof	int
=	O
1	int
;	O
}	O
iobuf	*(struct(*(char),long,*(char),long,int,int))
->	O
isize	long
=	O
i	long
;	O
iobuf	*(struct(*(char),long,*(char),long,int,int))
->	O
osize	long
=	O
j	long
;	O
return	O
mu_filter_ok	int
;	O
}	O
enum	O
crlfdot_encode_at	enum(int,int,int,int)
{	O
crlfdot_encode_init	int
,	O
crlfdot_encode_char	int
,	O
crlfdot_encode_cr	int
,	O
crlfdot_encode_lf	int
,	O
}	O
;	O
struct	O
crlfdot_encode_state	struct(enum(int,int,int,int),int)
{	O
enum	O
crlfdot_encode_at	enum(int,int,int,int)
at	enum(int,int,int,int)
;	O
int	O
normalize	int
;	O
}	O
;	O
static	O
void	O
new_encode_state	(*(struct(enum(int,int,int,int),int)),int)->(void)
(	O
struct	O
crlfdot_encode_state	struct(enum(int,int,int,int),int)
*	O
state	*(int)
,	O
int	O
c	int
)	O
{	O
enum	O
crlfdot_encode_at	enum(int,int,int,int)
at	enum(int,int,int,int)
;	O
switch	O
(	O
c	int
)	O
{	O
case	O
'\r'	O
:	O
if	O
(	O
state	*(int)
->	O
normalize	int
)	O
{	O
at	enum(int,int,int,int)
=	O
crlfdot_encode_cr	int
;	O
break	O
;	O
}	O
case	O
'\n'	O
:	O
at	enum(int,int,int,int)
=	O
crlfdot_encode_lf	int
;	O
break	O
;	O
default	O
:	O
at	enum(int,int,int,int)
=	O
crlfdot_encode_char	int
;	O
}	O
state	*(int)
->	O
at	enum(int,int,int,int)
=	O
at	enum(int,int,int,int)
;	O
}	O
static	O
enum	O
mu_filter_result	enum(int,int,int,int,int)
_crlfdot_encoder	(*(void),enum(int,int,int,int,int),*(struct(*(char),long,*(char),long,int,int)))->(enum(int,int,int,int,int))
(	O
void	O
*	O
xd	*(void)
,	O
enum	O
mu_filter_command	enum(int,int,int,int,int)
cmd	enum(int,int,int,int,int)
,	O
struct	O
mu_filter_io	struct(*(char),long,*(char),long,int,int)
*	O
iobuf	*(struct(*(char),long,*(char),long,int,int))
)	O
{	O
enum	O
mu_filter_result	enum(int,int,int,int,int)
result	enum(int,int,int,int,int)
;	O
size_t	long
i	long
,	O
j	long
;	O
const	O
unsigned	O
char	O
*	O
iptr	*(char)
;	O
size_t	long
isize	long
;	O
char	O
*	O
optr	*(char)
;	O
size_t	long
osize	long
;	O
struct	O
crlfdot_encode_state	struct(enum(int,int,int,int),int)
*	O
state	*(int)
=	O
xd	*(void)
;	O
switch	O
(	O
cmd	enum(int,int,int,int,int)
)	O
{	O
case	O
mu_filter_init	int
:	O
state	*(int)
->	O
at	enum(int,int,int,int)
=	O
crlfdot_encode_init	int
;	O
return	O
mu_filter_ok	int
;	O
case	O
mu_filter_done	int
:	O
return	O
mu_filter_ok	int
;	O
default	O
:	O
break	O
;	O
}	O
iptr	*(char)
=	O
(	O
const	O
unsigned	O
char	O
*	O
)	O
iobuf	*(struct(*(char),long,*(char),long,int,int))
->	O
input	*(char)
;	O
isize	long
=	O
iobuf	*(struct(*(char),long,*(char),long,int,int))
->	O
isize	long
;	O
optr	*(char)
=	O
iobuf	*(struct(*(char),long,*(char),long,int,int))
->	O
output	*(char)
;	O
osize	long
=	O
iobuf	*(struct(*(char),long,*(char),long,int,int))
->	O
osize	long
;	O
for	O
(	O
i	long
=	O
j	long
=	O
0	int
;	O
i	long
<	O
isize	long
&&	O
j	long
<	O
osize	long
;	O
i	long
++	O
,	O
iptr	*(char)
++	O
)	O
{	O
unsigned	O
char	O
c	int
=	O
*	O
iptr	*(char)
;	O
if	O
(	O
c	int
==	O
'\n'	O
)	O
{	O
if	O
(	O
state	*(int)
->	O
at	enum(int,int,int,int)
==	O
crlfdot_encode_cr	int
)	O
optr	*(char)
[	O
j	long
++	O
]	O
=	O
c	int
;	O
else	O
if	O
(	O
j	long
+	O
1	int
==	O
osize	long
)	O
{	O
if	O
(	O
i	long
==	O
0	int
)	O
{	O
iobuf	*(struct(*(char),long,*(char),long,int,int))
->	O
osize	long
=	O
2	int
;	O
return	O
mu_filter_moreoutput	int
;	O
}	O
break	O
;	O
}	O
else	O
{	O
optr	*(char)
[	O
j	long
++	O
]	O
=	O
'\r'	O
;	O
optr	*(char)
[	O
j	long
++	O
]	O
=	O
'\n'	O
;	O
}	O
}	O
else	O
if	O
(	O
c	int
==	O
'.'	O
&&	O
(	O
state	*(int)
->	O
at	enum(int,int,int,int)
==	O
crlfdot_encode_init	int
||	O
state	*(int)
->	O
at	enum(int,int,int,int)
==	O
crlfdot_encode_lf	int
)	O
)	O
{	O
if	O
(	O
j	long
+	O
2	int
>	O
osize	long
)	O
{	O
if	O
(	O
i	long
==	O
0	int
)	O
{	O
iobuf	*(struct(*(char),long,*(char),long,int,int))
->	O
osize	long
=	O
2	int
;	O
return	O
mu_filter_moreoutput	int
;	O
}	O
break	O
;	O
}	O
optr	*(char)
[	O
j	long
++	O
]	O
=	O
'.'	O
;	O
optr	*(char)
[	O
j	long
++	O
]	O
=	O
'.'	O
;	O
}	O
else	O
optr	*(char)
[	O
j	long
++	O
]	O
=	O
c	int
;	O
new_encode_state	(*(struct(enum(int,int,int,int),int)),int)->(void)
(	O
state	*(int)
,	O
c	int
)	O
;	O
}	O
result	enum(int,int,int,int,int)
=	O
mu_filter_ok	int
;	O
if	O
(	O
cmd	enum(int,int,int,int,int)
==	O
mu_filter_lastbuf	int
)	O
{	O
switch	O
(	O
state	*(int)
->	O
at	enum(int,int,int,int)
)	O
{	O
case	O
crlfdot_encode_init	int
:	O
case	O
crlfdot_encode_lf	int
:	O
if	O
(	O
j	long
+	O
3	int
>	O
osize	long
)	O
result	enum(int,int,int,int,int)
=	O
mu_filter_again	int
;	O
break	O
;	O
default	O
:	O
if	O
(	O
j	long
+	O
5	int
>	O
osize	long
)	O
result	enum(int,int,int,int,int)
=	O
mu_filter_again	int
;	O
else	O
{	O
optr	*(char)
[	O
j	long
++	O
]	O
=	O
'\r'	O
;	O
optr	*(char)
[	O
j	long
++	O
]	O
=	O
'\n'	O
;	O
}	O
}	O
if	O
(	O
result	enum(int,int,int,int,int)
==	O
mu_filter_ok	int
)	O
{	O
optr	*(char)
[	O
j	long
++	O
]	O
=	O
'.'	O
;	O
optr	*(char)
[	O
j	long
++	O
]	O
=	O
'\r'	O
;	O
optr	*(char)
[	O
j	long
++	O
]	O
=	O
'\n'	O
;	O
}	O
}	O
iobuf	*(struct(*(char),long,*(char),long,int,int))
->	O
isize	long
=	O
i	long
;	O
iobuf	*(struct(*(char),long,*(char),long,int,int))
->	O
osize	long
=	O
j	long
;	O
return	O
result	enum(int,int,int,int,int)
;	O
}	O
static	O
int	O
alloc_state	(*(*(void)),int,int,*(*(char)))->(int)
(	O
void	O
*	O
*	O
pret	*(*(struct))
,	O
int	O
mode	int
,	O
int	O
argc	int
,	O
const	O
char	O
*	O
*	O
argv	*(*(char))
)	O
{	O
switch	O
(	O
mode	int
)	O
{	O
case	O
MU_FILTER_ENCODE	int
:	O
{	O
struct	O
crlfdot_encode_state	struct(enum(int,int,int,int),int)
*	O
state	*(int)
=	O
malloc	(long)->(*(void))
(	O
sizeof	O
(	O
*	O
state	*(int)
)	O
)	O
;	O
if	O
(	O
!	O
state	*(int)
)	O
return	O
ENOMEM	int
;	O
state	*(int)
->	O
at	enum(int,int,int,int)
=	O
crlfdot_encode_init	int
;	O
state	*(int)
->	O
normalize	int
=	O
(	O
argc	int
==	O
2	int
&&	O
strcmp	(*(char),*(char))->(int)
(	O
argv	*(*(char))
[	O
1	int
]	O
,	O
"-n"	*(char)
)	O
==	O
0	int
)	O
;	O
*	O
pret	*(*(struct))
=	O
state	*(int)
;	O
}	O
break	O
;	O
case	O
MU_FILTER_DECODE	int
:	O
*	O
pret	*(*(struct))
=	O
malloc	(long)->(*(void))
(	O
sizeof	O
(	O
int	O
)	O
)	O
;	O
if	O
(	O
!	O
*	O
pret	*(*(struct))
)	O
return	O
ENOMEM	int
;	O
}	O
return	O
0	int
;	O
}	O
static	O
struct	O
_mu_filter_record	struct(*(char),*((*(*(void)),int,int,*(*(char)))->(int)),*((*(void),enum(int,int,int,int,int),*(struct(*(char),long,*(char),long,int,int)))->(enum(int,int,int,int,int))),*((*(void),enum(int,int,int,int,int),*(struct(*(char),long,*(char),long,int,int)))->(enum(int,int,int,int,int))))
_crlfdot_filter	struct(*(char),*((*(*(void)),int,int,*(*(char)))->(int)),*((*(void),enum(int,int,int,int,int),*(struct(*`,long,*`,long,int,int)))->(enum(int,int,int,int,int))),*((*(void),enum(int,int,int,int,int),*(struct(*`,long,*`,long,int,int)))->(enum(int,int,int,int,int))))
=	O
{	O
"CRLFDOT"	*(char)
,	O
alloc_state	(*(*(void)),int,int,*(*(char)))->(int)
,	O
_crlfdot_encoder	(*(void),enum(int,int,int,int,int),*(struct(*(char),long,*(char),long,int,int)))->(enum(int,int,int,int,int))
,	O
_crlfdot_decoder	(*(void),enum(int,int,int,int,int),*(struct(*(char),long,*(char),long,int,int)))->(enum(int,int,int,int,int))
}	O
;	O
mu_filter_record_t	*(struct)
mu_crlfdot_filter	*(struct(*(char),*((*(*`),int,int,*(*`))->(int)),*((*(void),enum(int,int,int,int,int),*(struct`))->(enum(int,int,int,int,int))),*((*(void),enum(int,int,int,int,int),*(struct`))->(enum(int,int,int,int,int)))))
=	O
&	O
_crlfdot_filter	struct(*(char),*((*(*(void)),int,int,*(*(char)))->(int)),*((*(void),enum(int,int,int,int,int),*(struct(*`,long,*`,long,int,int)))->(enum(int,int,int,int,int))),*((*(void),enum(int,int,int,int,int),*(struct(*`,long,*`,long,int,int)))->(enum(int,int,int,int,int))))
;	O
