struct	O
tag_handler	struct(*(char),long,*((*(char),*(struct(*(char),long,long)))->(int)))
{	O
const	O
char	O
*	O
name	*(char)
;	O
size_t	long
len	long
;	O
int	O
(	O
*	O
handler	*((*(char),*(struct(*(char),long,long)))->(int))
)	O
(	O
char	O
*	O
,	O
struct	O
text_buffer	struct(*(char),long,long)
*	O
)	O
;	O
}	O
;	O
struct	O
info_tag	struct(*(struct(*(struct(*(struct`),*(char),*(char))),*(char),*(char))),*(char),*(char))
{	O
struct	O
info_tag	struct(*(struct(*(struct(*(struct`),*(char),*(char))),*(char),*(char))),*(char),*(char))
*	O
next	*(char)
;	O
char	O
*	O
kw	*(char)
;	O
char	O
*	O
val	int
;	O
}	O
;	O
static	O
void	O
info_tag_free	(*(struct(*(struct(*`,*`,*`)),*(char),*(char))))->(void)
(	O
struct	O
info_tag	struct(*(struct(*(struct(*(struct`),*(char),*(char))),*(char),*(char))),*(char),*(char))
*	O
tag	*(struct(*(struct(*(struct`),*(char),*(char))),*(char),*(char)))
)	O
{	O
while	O
(	O
tag	*(struct(*(struct(*(struct`),*(char),*(char))),*(char),*(char)))
)	O
{	O
struct	O
info_tag	struct(*(struct(*(struct(*(struct`),*(char),*(char))),*(char),*(char))),*(char),*(char))
*	O
next	*(char)
=	O
tag	*(struct(*(struct(*(struct`),*(char),*(char))),*(char),*(char)))
->	O
next	*(char)
;	O
free	(*(void))->(void)
(	O
tag	*(struct(*(struct(*(struct`),*(char),*(char))),*(char),*(char)))
->	O
kw	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
tag	*(struct(*(struct(*(struct`),*(char),*(char))),*(char),*(char)))
->	O
val	int
)	O
;	O
free	(*(void))->(void)
(	O
tag	*(struct(*(struct(*(struct`),*(char),*(char))),*(char),*(char)))
)	O
;	O
tag	*(struct(*(struct(*(struct`),*(char),*(char))),*(char),*(char)))
=	O
next	*(char)
;	O
}	O
}	O
static	O
struct	O
info_tag	struct(*(struct(*(struct(*(struct`),*(char),*(char))),*(char),*(char))),*(char),*(char))
*	O
info_tag_find	(*(struct(*(struct(*`,*`,*`)),*(char),*(char))),*(char))->(*(struct(*(struct(*`,*`,*`)),*(char),*(char))))
(	O
struct	O
info_tag	struct(*(struct(*(struct(*(struct`),*(char),*(char))),*(char),*(char))),*(char),*(char))
*	O
tag	*(struct(*(struct(*(struct`),*(char),*(char))),*(char),*(char)))
,	O
const	O
char	O
*	O
kw	*(char)
)	O
{	O
for	O
(	O
;	O
tag	*(struct(*(struct(*(struct`),*(char),*(char))),*(char),*(char)))
;	O
tag	*(struct(*(struct(*(struct`),*(char),*(char))),*(char),*(char)))
=	O
tag	*(struct(*(struct(*(struct`),*(char),*(char))),*(char),*(char)))
->	O
next	*(char)
)	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
tag	*(struct(*(struct(*(struct`),*(char),*(char))),*(char),*(char)))
->	O
kw	*(char)
,	O
kw	*(char)
)	O
==	O
0	int
)	O
return	O
tag	*(struct(*(struct(*(struct`),*(char),*(char))),*(char),*(char)))
;	O
return	O
NULL	O
;	O
}	O
static	O
struct	O
info_tag	struct(*(struct(*(struct(*(struct`),*(char),*(char))),*(char),*(char))),*(char),*(char))
*	O
tag_found_keyword	(*(struct(*(char),long,long)),*(*(char)))->(*(struct(*(struct(*`,*`,*`)),*(char),*(char))))
(	O
struct	O
text_buffer	struct(*(char),long,long)
*	O
tmpbuf_ptr	*(struct(*(char),long,long))
,	O
char	O
*	O
*	O
kw	*(char)
)	O
{	O
struct	O
info_tag	struct(*(struct(*(struct(*(struct`),*(char),*(char))),*(char),*(char))),*(char),*(char))
*	O
tag	*(struct(*(struct(*(struct`),*(char),*(char))),*(char),*(char)))
=	O
xmalloc	(long)->(*(void))
(	O
sizeof	O
(	O
*	O
tag	*(struct(*(struct(*(struct`),*(char),*(char))),*(char),*(char)))
)	O
)	O
;	O
tag	*(struct(*(struct(*(struct`),*(char),*(char))),*(char),*(char)))
->	O
next	*(char)
=	O
NULL	O
;	O
text_buffer_add_char	(*(struct(*(char),long,long)),int)->(void)
(	O
tmpbuf_ptr	*(struct(*(char),long,long))
,	O
0	int
)	O
;	O
if	O
(	O
*	O
kw	*(char)
!=	O
tmpbuf_ptr	*(struct(*(char),long,long))
->	O
base	*(char)
)	O
{	O
*	O
kw	*(char)
=	O
tmpbuf_ptr	*(struct(*(char),long,long))
->	O
base	*(char)
;	O
}	O
tag	*(struct(*(struct(*(struct`),*(char),*(char))),*(char),*(char)))
->	O
kw	*(char)
=	O
xstrdup	(*(char))->(*(char))
(	O
*	O
kw	*(char)
)	O
;	O
tag	*(struct(*(struct(*(struct`),*(char),*(char))),*(char),*(char)))
->	O
val	int
=	O
xstrdup	(*(char))->(*(char))
(	O
*	O
kw	*(char)
+	O
strlen	(*(char))->(long)
(	O
*	O
kw	*(char)
)	O
+	O
1	int
)	O
;	O
text_buffer_reset	O
(	O
tmpbuf_ptr	*(struct(*(char),long,long))
)	O
;	O
return	O
tag	*(struct(*(struct(*(struct`),*(char),*(char))),*(char),*(char)))
;	O
}	O
static	O
int	O
tag_image	(*(char),*(struct(*(char),long,long)))->(int)
(	O
char	O
*	O
text	*(char)
,	O
struct	O
text_buffer	struct(*(char),long,long)
*	O
outbuf	*(struct(*(char),long,long))
)	O
{	O
mbi_iterator_t	struct(*(char),bool,struct(int,union(int,array(char))),bool,struct(*(char),long,bool,int,array(char)))
iter	*(struct(*(char),bool,struct(int,union(int,array(char))),bool,struct(*(char),long,bool,int,array(char))))
;	O
enum	O
{	O
state_kw	int
,	O
state_val	int
,	O
state_qstr	int
,	O
state_delim	int
}	O
state	*(int)
=	O
state_kw	int
;	O
struct	O
text_buffer	struct(*(char),long,long)
tmpbuf	struct(*(char),long,long)
;	O
char	O
*	O
kw	*(char)
;	O
struct	O
info_tag	struct(*(struct(*(struct(*(struct`),*(char),*(char))),*(char),*(char))),*(char),*(char))
*	O
tag_head	*(struct(*(struct(*(struct`),*(char),*(char))),*(char),*(char)))
=	O
NULL	O
,	O
*	O
tag	*(struct(*(struct(*(struct`),*(char),*(char))),*(char),*(char)))
;	O
int	O
escaped	int
=	O
0	int
;	O
text_buffer_init	(*(struct(*(char),long,long)))->(void)
(	O
&	O
tmpbuf	struct(*(char),long,long)
)	O
;	O
for	O
(	O
mbi_init	O
(	O
iter	*(struct(*(char),bool,struct(int,union(int,array(char))),bool,struct(*(char),long,bool,int,array(char))))
,	O
text	*(char)
,	O
strlen	(*(char))->(long)
(	O
text	*(char)
)	O
)	O
;	O
mbi_avail	O
(	O
iter	*(struct(*(char),bool,struct(int,union(int,array(char))),bool,struct(*(char),long,bool,int,array(char))))
)	O
;	O
mbi_advance	O
(	O
iter	*(struct(*(char),bool,struct(int,union(int,array(char))),bool,struct(*(char),long,bool,int,array(char))))
)	O
)	O
{	O
const	O
char	O
*	O
cur_ptr	*(char)
;	O
size_t	long
cur_len	long
;	O
if	O
(	O
mb_isspace	O
(	O
mbi_cur	O
(	O
iter	*(struct(*(char),bool,struct(int,union(int,array(char))),bool,struct(*(char),long,bool,int,array(char))))
)	O
)	O
)	O
{	O
if	O
(	O
state	*(int)
==	O
state_val	int
)	O
{	O
struct	O
info_tag	struct(*(struct(*(struct(*(struct`),*(char),*(char))),*(char),*(char))),*(char),*(char))
*	O
new_kw	*(struct(*(struct(*(struct`),*(char),*(char))),*(char),*(char)))
=	O
tag_found_keyword	(*(struct(*(char),long,long)),*(*(char)))->(*(struct(*(struct(*`,*`,*`)),*(char),*(char))))
(	O
&	O
tmpbuf	struct(*(char),long,long)
,	O
&	O
kw	*(char)
)	O
;	O
new_kw	*(struct(*(struct(*(struct`),*(char),*(char))),*(char),*(char)))
->	O
next	*(char)
=	O
tag_head	*(struct(*(struct(*(struct`),*(char),*(char))),*(char),*(char)))
;	O
tag_head	*(struct(*(struct(*(struct`),*(char),*(char))),*(char),*(char)))
=	O
new_kw	*(struct(*(struct(*(struct`),*(char),*(char))),*(char),*(char)))
;	O
state	*(int)
=	O
state_delim	int
;	O
continue	O
;	O
}	O
if	O
(	O
state	*(int)
==	O
state_delim	int
)	O
continue	O
;	O
}	O
else	O
if	O
(	O
state	*(int)
==	O
state_delim	int
)	O
state	*(int)
=	O
state_kw	int
;	O
cur_len	long
=	O
mb_len	O
(	O
mbi_cur	O
(	O
iter	*(struct(*(char),bool,struct(int,union(int,array(char))),bool,struct(*(char),long,bool,int,array(char))))
)	O
)	O
;	O
cur_ptr	*(char)
=	O
mbi_cur_ptr	O
(	O
iter	*(struct(*(char),bool,struct(int,union(int,array(char))),bool,struct(*(char),long,bool,int,array(char))))
)	O
;	O
if	O
(	O
state	*(int)
==	O
state_qstr	int
&&	O
escaped	int
)	O
{	O
escaped	int
=	O
0	int
;	O
}	O
else	O
if	O
(	O
cur_len	long
==	O
1	int
)	O
{	O
switch	O
(	O
*	O
cur_ptr	*(char)
)	O
{	O
case	O
'='	O
:	O
if	O
(	O
state	*(int)
!=	O
state_kw	int
)	O
break	O
;	O
text_buffer_add_char	(*(struct(*(char),long,long)),int)->(void)
(	O
&	O
tmpbuf	struct(*(char),long,long)
,	O
0	int
)	O
;	O
kw	*(char)
=	O
tmpbuf	struct(*(char),long,long)
.	O
base	*(char)
;	O
if	O
(	O
!	O
mbi_avail	O
(	O
iter	*(struct(*(char),bool,struct(int,union(int,array(char))),bool,struct(*(char),long,bool,int,array(char))))
)	O
)	O
break	O
;	O
mbi_advance	O
(	O
iter	*(struct(*(char),bool,struct(int,union(int,array(char))),bool,struct(*(char),long,bool,int,array(char))))
)	O
;	O
state	*(int)
=	O
state_val	int
;	O
cur_len	long
=	O
mb_len	O
(	O
mbi_cur	O
(	O
iter	*(struct(*(char),bool,struct(int,union(int,array(char))),bool,struct(*(char),long,bool,int,array(char))))
)	O
)	O
;	O
cur_ptr	*(char)
=	O
mbi_cur_ptr	O
(	O
iter	*(struct(*(char),bool,struct(int,union(int,array(char))),bool,struct(*(char),long,bool,int,array(char))))
)	O
;	O
if	O
(	O
!	O
(	O
cur_len	long
==	O
1	int
&&	O
*	O
cur_ptr	*(char)
==	O
'"'	O
)	O
)	O
break	O
;	O
case	O
'"'	O
:	O
if	O
(	O
state	*(int)
==	O
state_val	int
)	O
{	O
state	*(int)
=	O
state_qstr	int
;	O
continue	O
;	O
}	O
if	O
(	O
state	*(int)
==	O
state_qstr	int
)	O
{	O
struct	O
info_tag	struct(*(struct(*(struct(*(struct`),*(char),*(char))),*(char),*(char))),*(char),*(char))
*	O
new_kw	*(struct(*(struct(*(struct`),*(char),*(char))),*(char),*(char)))
=	O
tag_found_keyword	(*(struct(*(char),long,long)),*(*(char)))->(*(struct(*(struct(*`,*`,*`)),*(char),*(char))))
(	O
&	O
tmpbuf	struct(*(char),long,long)
,	O
&	O
kw	*(char)
)	O
;	O
new_kw	*(struct(*(struct(*(struct`),*(char),*(char))),*(char),*(char)))
->	O
next	*(char)
=	O
tag_head	*(struct(*(struct(*(struct`),*(char),*(char))),*(char),*(char)))
;	O
tag_head	*(struct(*(struct(*(struct`),*(char),*(char))),*(char),*(char)))
=	O
new_kw	*(struct(*(struct(*(struct`),*(char),*(char))),*(char),*(char)))
;	O
state	*(int)
=	O
state_delim	int
;	O
continue	O
;	O
}	O
break	O
;	O
case	O
'\\'	O
:	O
if	O
(	O
state	*(int)
==	O
state_qstr	int
)	O
{	O
escaped	int
=	O
1	int
;	O
continue	O
;	O
}	O
}	O
}	O
text_buffer_add_string	(*(struct(*(char),long,long)),*(char),long)->(long)
(	O
&	O
tmpbuf	struct(*(char),long,long)
,	O
cur_ptr	*(char)
,	O
cur_len	long
)	O
;	O
}	O
tag	*(struct(*(struct(*(struct`),*(char),*(char))),*(char),*(char)))
=	O
info_tag_find	(*(struct(*(struct(*`,*`,*`)),*(char),*(char))),*(char))->(*(struct(*(struct(*`,*`,*`)),*(char),*(char))))
(	O
tag_head	*(struct(*(struct(*(struct`),*(char),*(char))),*(char),*(char)))
,	O
"text"	*(char)
)	O
;	O
if	O
(	O
!	O
tag	*(struct(*(struct(*(struct`),*(char),*(char))),*(char),*(char)))
)	O
tag	*(struct(*(struct(*(struct`),*(char),*(char))),*(char),*(char)))
=	O
info_tag_find	(*(struct(*(struct(*`,*`,*`)),*(char),*(char))),*(char))->(*(struct(*(struct(*`,*`,*`)),*(char),*(char))))
(	O
tag_head	*(struct(*(struct(*(struct`),*(char),*(char))),*(char),*(char)))
,	O
"alt"	*(char)
)	O
;	O
if	O
(	O
tag	*(struct(*(struct(*(struct`),*(char),*(char))),*(char),*(char)))
)	O
{	O
text_buffer_add_string	(*(struct(*(char),long,long)),*(char),long)->(long)
(	O
outbuf	*(struct(*(char),long,long))
,	O
tag	*(struct(*(struct(*(struct`),*(char),*(char))),*(char),*(char)))
->	O
val	int
,	O
strlen	(*(char))->(long)
(	O
tag	*(struct(*(struct(*(struct`),*(char),*(char))),*(char),*(char)))
->	O
val	int
)	O
)	O
;	O
}	O
text_buffer_free	(*(struct(*(char),long,long)))->(void)
(	O
&	O
tmpbuf	struct(*(char),long,long)
)	O
;	O
info_tag_free	(*(struct(*(struct(*`,*`,*`)),*(char),*(char))))->(void)
(	O
tag_head	*(struct(*(struct(*(struct`),*(char),*(char))),*(char),*(char)))
)	O
;	O
return	O
0	int
;	O
}	O
static	O
struct	O
tag_handler	struct(*(char),long,*((*(char),*(struct(*(char),long,long)))->(int)))
tagtab	array(struct(*(char),long,*((*(char),*(struct(*`,long,long)))->(int))))
[	O
]	O
=	O
{	O
{	O
"image"	*(char)
,	O
5	int
,	O
tag_image	(*(char),*(struct(*(char),long,long)))->(int)
}	O
,	O
{	O
"index"	*(char)
,	O
5	int
,	O
NULL	O
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
static	O
struct	O
tag_handler	struct(*(char),long,*((*(char),*(struct(*(char),long,long)))->(int)))
*	O
find_tag_handler	(*(char),long)->(*(struct(*(char),long,*((*`,*`)->(int)))))
(	O
char	O
*	O
tag	*(struct(*(struct(*(struct`),*(char),*(char))),*(char),*(char)))
,	O
size_t	long
taglen	long
)	O
{	O
struct	O
tag_handler	struct(*(char),long,*((*(char),*(struct(*(char),long,long)))->(int)))
*	O
tp	*(struct(*(char),long,*((*(char),*(struct`))->(int))))
;	O
for	O
(	O
tp	*(struct(*(char),long,*((*(char),*(struct`))->(int))))
=	O
tagtab	array(struct(*(char),long,*((*(char),*(struct(*`,long,long)))->(int))))
;	O
tp	*(struct(*(char),long,*((*(char),*(struct`))->(int))))
->	O
name	*(char)
;	O
tp	*(struct(*(char),long,*((*(char),*(struct`))->(int))))
++	O
)	O
if	O
(	O
taglen	long
>=	O
tp	*(struct(*(char),long,*((*(char),*(struct`))->(int))))
->	O
len	long
&&	O
strncmp	(*(char),*(char),long)->(int)
(	O
tp	*(struct(*(char),long,*((*(char),*(struct`))->(int))))
->	O
name	*(char)
,	O
tag	*(struct(*(struct(*(struct`),*(char),*(char))),*(char),*(char)))
,	O
tp	*(struct(*(char),long,*((*(char),*(struct`))->(int))))
->	O
len	long
)	O
==	O
0	int
)	O
return	O
tp	*(struct(*(char),long,*((*(char),*(struct`))->(int))))
;	O
return	O
NULL	O
;	O
}	O
int	O
tag_expand	(*(*(char)),*(char),*(struct(*(char),long,long)),*(int))->(int)
(	O
char	O
*	O
*	O
input	*(*(char))
,	O
char	O
*	O
input_end	*(char)
,	O
struct	O
text_buffer	struct(*(char),long,long)
*	O
outbuf	*(struct(*(char),long,long))
,	O
int	O
*	O
is_index	*(int)
)	O
{	O
char	O
*	O
p	*(void)
=	O
*	O
input	*(*(char))
;	O
char	O
*	O
q	*(char)
;	O
size_t	long
len	long
;	O
struct	O
tag_handler	struct(*(char),long,*((*(char),*(struct(*(char),long,long)))->(int)))
*	O
tp	*(struct(*(char),long,*((*(char),*(struct`))->(int))))
;	O
if	O
(	O
p	*(void)
>=	O
input_end	*(char)
-	O
3	int
||	O
memcmp	(*(void),*(void),long)->(int)
(	O
p	*(void)
,	O
"\0\b["	*(char)
,	O
3	int
)	O
!=	O
0	int
)	O
return	O
0	int
;	O
p	*(void)
+=	O
3	int
;	O
q	*(char)
=	O
p	*(void)
+	O
strlen	(*(char))->(long)
(	O
p	*(void)
)	O
;	O
if	O
(	O
q	*(char)
>=	O
input_end	*(char)
-	O
3	int
||	O
memcmp	(*(void),*(void),long)->(int)
(	O
q	*(char)
+	O
1	int
,	O
"\b]"	*(char)
,	O
2	int
)	O
)	O
return	O
0	int
;	O
if	O
(	O
!	O
strncmp	(*(char),*(char),long)->(int)
(	O
"index"	*(char)
,	O
p	*(void)
,	O
strlen	(*(char))->(long)
(	O
"index"	*(char)
)	O
)	O
)	O
*	O
is_index	*(int)
=	O
1	int
;	O
len	long
=	O
strcspn	(*(char),*(char))->(long)
(	O
p	*(void)
,	O
" \t"	*(char)
)	O
;	O
tp	*(struct(*(char),long,*((*(char),*(struct`))->(int))))
=	O
find_tag_handler	(*(char),long)->(*(struct(*(char),long,*((*`,*`)->(int)))))
(	O
p	*(void)
,	O
len	long
)	O
;	O
if	O
(	O
tp	*(struct(*(char),long,*((*(char),*(struct`))->(int))))
&&	O
tp	*(struct(*(char),long,*((*(char),*(struct`))->(int))))
->	O
handler	*((*(char),*(struct(*(char),long,long)))->(int))
)	O
{	O
while	O
(	O
p	*(void)
[	O
len	long
]	O
==	O
' '	O
||	O
p	*(void)
[	O
len	long
]	O
==	O
'\t'	O
)	O
++	O
len	long
;	O
tp	*(struct(*(char),long,*((*(char),*(struct`))->(int))))
->	O
handler	*((*(char),*(struct(*(char),long,long)))->(int))
(	O
p	*(void)
+	O
len	long
,	O
outbuf	*(struct(*(char),long,long))
)	O
;	O
}	O
*	O
input	*(*(char))
=	O
q	*(char)
+	O
3	int
;	O
return	O
1	int
;	O
}	O
