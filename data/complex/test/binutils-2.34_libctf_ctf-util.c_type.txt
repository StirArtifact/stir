void	O
ctf_list_append	O
(	O
ctf_list_t	O
*	O
lp	O
,	O
void	O
*	O
newp	O
)	O
{	O
ctf_list_t	O
*	O
p	*(void)
=	O
lp	O
->	O
l_prev	O
;	O
ctf_list_t	O
*	O
q	O
=	O
newp	O
;	O
lp	O
->	O
l_prev	O
=	O
q	O
;	O
q	O
->	O
l_prev	O
=	O
p	*(void)
;	O
q	O
->	O
l_next	O
=	O
NULL	O
;	O
if	O
(	O
p	*(void)
!=	O
NULL	O
)	O
p	*(void)
->	O
l_next	O
=	O
q	O
;	O
else	O
lp	O
->	O
l_next	O
=	O
q	O
;	O
}	O
void	O
ctf_list_prepend	O
(	O
ctf_list_t	O
*	O
lp	O
,	O
void	O
*	O
newp	O
)	O
{	O
ctf_list_t	O
*	O
p	*(void)
=	O
newp	O
;	O
ctf_list_t	O
*	O
q	O
=	O
lp	O
->	O
l_next	O
;	O
lp	O
->	O
l_next	O
=	O
p	*(void)
;	O
p	*(void)
->	O
l_prev	O
=	O
NULL	O
;	O
p	*(void)
->	O
l_next	O
=	O
q	O
;	O
if	O
(	O
q	O
!=	O
NULL	O
)	O
q	O
->	O
l_prev	O
=	O
p	*(void)
;	O
else	O
lp	O
->	O
l_prev	O
=	O
p	*(void)
;	O
}	O
void	O
ctf_list_delete	O
(	O
ctf_list_t	O
*	O
lp	O
,	O
void	O
*	O
existing	O
)	O
{	O
ctf_list_t	O
*	O
p	*(void)
=	O
existing	O
;	O
if	O
(	O
p	*(void)
->	O
l_prev	O
!=	O
NULL	O
)	O
p	*(void)
->	O
l_prev	O
->	O
l_next	O
=	O
p	*(void)
->	O
l_next	O
;	O
else	O
lp	O
->	O
l_next	O
=	O
p	*(void)
->	O
l_next	O
;	O
if	O
(	O
p	*(void)
->	O
l_next	O
!=	O
NULL	O
)	O
p	*(void)
->	O
l_next	O
->	O
l_prev	O
=	O
p	*(void)
->	O
l_prev	O
;	O
else	O
lp	O
->	O
l_prev	O
=	O
p	*(void)
->	O
l_prev	O
;	O
}	O
int	O
ctf_list_empty_p	O
(	O
ctf_list_t	O
*	O
lp	O
)	O
{	O
return	O
(	O
lp	O
->	O
l_next	O
==	O
NULL	O
&&	O
lp	O
->	O
l_prev	O
==	O
NULL	O
)	O
;	O
}	O
Elf64_Sym	struct(int,char,char,short,long,long)
*	O
ctf_sym_to_elf64	O
(	O
const	O
Elf32_Sym	struct(int,int,int,char,char,short)
*	O
src	O
,	O
Elf64_Sym	struct(int,char,char,short,long,long)
*	O
dst	O
)	O
{	O
dst	O
->	O
st_name	*(char)
=	O
src	O
->	O
st_name	*(char)
;	O
dst	O
->	O
st_value	int
=	O
src	O
->	O
st_value	int
;	O
dst	O
->	O
st_size	array(char)
=	O
src	O
->	O
st_size	array(char)
;	O
dst	O
->	O
st_info	array(char)
=	O
src	O
->	O
st_info	array(char)
;	O
dst	O
->	O
st_other	array(char)
=	O
src	O
->	O
st_other	array(char)
;	O
dst	O
->	O
st_shndx	int
=	O
src	O
->	O
st_shndx	int
;	O
return	O
dst	O
;	O
}	O
char	O
*	O
ctf_str_append	O
(	O
char	O
*	O
s	*(char)
,	O
const	O
char	O
*	O
append	O
)	O
{	O
size_t	long
s_len	O
=	O
0	int
;	O
if	O
(	O
append	O
==	O
NULL	O
)	O
return	O
s	*(char)
;	O
if	O
(	O
s	*(char)
!=	O
NULL	O
)	O
s_len	O
=	O
strlen	O
(	O
s	*(char)
)	O
;	O
size_t	long
append_len	O
=	O
strlen	O
(	O
append	O
)	O
;	O
if	O
(	O
(	O
s	*(char)
=	O
realloc	(*(void),long)->(*(void))
(	O
s	*(char)
,	O
s_len	O
+	O
append_len	O
+	O
1	int
)	O
)	O
==	O
NULL	O
)	O
return	O
NULL	O
;	O
memcpy	O
(	O
s	*(char)
+	O
s_len	O
,	O
append	O
,	O
append_len	O
)	O
;	O
s	*(char)
[	O
s_len	O
+	O
append_len	O
]	O
=	O
'\0'	O
;	O
return	O
s	*(char)
;	O
}	O
char	O
*	O
ctf_str_append_noerr	O
(	O
char	O
*	O
s	*(char)
,	O
const	O
char	O
*	O
append	O
)	O
{	O
char	O
*	O
new_s	O
;	O
new_s	O
=	O
ctf_str_append	O
(	O
s	*(char)
,	O
append	O
)	O
;	O
if	O
(	O
!	O
new_s	O
)	O
return	O
s	*(char)
;	O
return	O
new_s	O
;	O
}	O
void	O
*	O
ctf_realloc	O
(	O
ctf_file_t	struct
*	O
fp	*(struct)
,	O
void	O
*	O
ptr	*(*(char))
,	O
size_t	long
size	long
)	O
{	O
if	O
(	O
fp	*(struct)
->	O
ctf_str_num_refs	O
>	O
0	int
)	O
{	O
ctf_dprintf	O
(	O
"%p: attempt to realloc() string table with %lu active refs\n"	*(char)
,	O
(	O
void	O
*	O
)	O
fp	*(struct)
,	O
(	O
unsigned	O
long	O
)	O
fp	*(struct)
->	O
ctf_str_num_refs	O
)	O
;	O
return	O
NULL	O
;	O
}	O
return	O
realloc	(*(void),long)->(*(void))
(	O
ptr	*(*(char))
,	O
size	long
)	O
;	O
}	O
void	O
*	O
ctf_set_open_errno	O
(	O
int	O
*	O
errp	*(int)
,	O
int	O
error	O
)	O
{	O
if	O
(	O
errp	*(int)
!=	O
NULL	O
)	O
*	O
errp	*(int)
=	O
error	O
;	O
return	O
NULL	O
;	O
}	O
unsigned	O
long	O
ctf_set_errno	O
(	O
ctf_file_t	struct
*	O
fp	*(struct)
,	O
int	O
err	long
)	O
{	O
fp	*(struct)
->	O
ctf_errno	(*(struct))->(int)
=	O
err	long
;	O
return	O
CTF_ERR	O
;	O
}	O
