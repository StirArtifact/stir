int	O
swlib_rpmvercmp	(*(char),*(char))->(int)
(	O
const	O
char	O
*	O
a	*(char)
,	O
const	O
char	O
*	O
b	*(char)
)	O
{	O
char	O
oldch1	char
,	O
oldch2	char
;	O
char	O
*	O
str1	*(char)
,	O
*	O
str2	*(char)
;	O
char	O
*	O
one	*(char)
,	O
*	O
two	*(char)
;	O
int	O
rc	int
;	O
int	O
isnum	int
;	O
if	O
(	O
!	O
strcmp	(*(char),*(char))->(int)
(	O
a	*(char)
,	O
b	*(char)
)	O
)	O
return	O
0	int
;	O
str1	*(char)
=	O
alloca	(long)->(*(void))
(	O
strlen	(*(char))->(long)
(	O
a	*(char)
)	O
+	O
1	int
)	O
;	O
str2	*(char)
=	O
alloca	(long)->(*(void))
(	O
strlen	(*(char))->(long)
(	O
b	*(char)
)	O
+	O
1	int
)	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
str1	*(char)
,	O
a	*(char)
)	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
str2	*(char)
,	O
b	*(char)
)	O
;	O
one	*(char)
=	O
str1	*(char)
;	O
two	*(char)
=	O
str2	*(char)
;	O
while	O
(	O
*	O
one	*(char)
&&	O
*	O
two	*(char)
)	O
{	O
while	O
(	O
*	O
one	*(char)
&&	O
!	O
xisalnum	O
(	O
*	O
one	*(char)
)	O
)	O
one	*(char)
++	O
;	O
while	O
(	O
*	O
two	*(char)
&&	O
!	O
xisalnum	O
(	O
*	O
two	*(char)
)	O
)	O
two	*(char)
++	O
;	O
str1	*(char)
=	O
one	*(char)
;	O
str2	*(char)
=	O
two	*(char)
;	O
if	O
(	O
xisdigit	O
(	O
*	O
str1	*(char)
)	O
)	O
{	O
while	O
(	O
*	O
str1	*(char)
&&	O
xisdigit	O
(	O
*	O
str1	*(char)
)	O
)	O
str1	*(char)
++	O
;	O
while	O
(	O
*	O
str2	*(char)
&&	O
xisdigit	O
(	O
*	O
str2	*(char)
)	O
)	O
str2	*(char)
++	O
;	O
isnum	int
=	O
1	int
;	O
}	O
else	O
{	O
while	O
(	O
*	O
str1	*(char)
&&	O
xisalpha	O
(	O
*	O
str1	*(char)
)	O
)	O
str1	*(char)
++	O
;	O
while	O
(	O
*	O
str2	*(char)
&&	O
xisalpha	O
(	O
*	O
str2	*(char)
)	O
)	O
str2	*(char)
++	O
;	O
isnum	int
=	O
0	int
;	O
}	O
oldch1	char
=	O
*	O
str1	*(char)
;	O
*	O
str1	*(char)
=	O
'\0'	O
;	O
oldch2	char
=	O
*	O
str2	*(char)
;	O
*	O
str2	*(char)
=	O
'\0'	O
;	O
if	O
(	O
one	*(char)
==	O
str1	*(char)
)	O
return	O
-	O
1	int
;	O
if	O
(	O
two	*(char)
==	O
str2	*(char)
)	O
return	O
(	O
isnum	int
?	O
1	int
:	O
-	O
1	int
)	O
;	O
if	O
(	O
isnum	int
)	O
{	O
while	O
(	O
*	O
one	*(char)
==	O
'0'	O
)	O
one	*(char)
++	O
;	O
while	O
(	O
*	O
two	*(char)
==	O
'0'	O
)	O
two	*(char)
++	O
;	O
if	O
(	O
strlen	(*(char))->(long)
(	O
one	*(char)
)	O
>	O
strlen	(*(char))->(long)
(	O
two	*(char)
)	O
)	O
return	O
1	int
;	O
if	O
(	O
strlen	(*(char))->(long)
(	O
two	*(char)
)	O
>	O
strlen	(*(char))->(long)
(	O
one	*(char)
)	O
)	O
return	O
-	O
1	int
;	O
}	O
rc	int
=	O
strcmp	(*(char),*(char))->(int)
(	O
one	*(char)
,	O
two	*(char)
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
*	O
str1	*(char)
=	O
oldch1	char
;	O
one	*(char)
=	O
str1	*(char)
;	O
*	O
str2	*(char)
=	O
oldch2	char
;	O
two	*(char)
=	O
str2	*(char)
;	O
}	O
if	O
(	O
(	O
!	O
*	O
one	*(char)
)	O
&&	O
(	O
!	O
*	O
two	*(char)
)	O
)	O
return	O
0	int
;	O
if	O
(	O
!	O
*	O
one	*(char)
)	O
return	O
-	O
1	int
;	O
else	O
return	O
1	int
;	O
}	O
