OM_uint32	int
gss_init_sec_context	(*(int),*(struct),*(*(struct)),*(struct),*(struct(int,*(void))),int,int,*(struct(int,struct(long,*(void)),int,struct(long,*(void)),struct(long,*(void)))),*(struct(long,*(void))),*(*(struct(int,*(void)))),*(struct(long,*(void))),*(int),*(int))->(int)
(	O
OM_uint32	int
*	O
minor_status	*(int)
,	O
const	O
gss_cred_id_t	*(struct)
initiator_cred_handle	*(struct)
,	O
gss_ctx_id_t	*(struct)
*	O
context_handle	*(*(struct))
,	O
const	O
gss_name_t	*(struct)
target_name	*(struct)
,	O
const	O
gss_OID	*(struct(int,*(void)))
mech_type	*(struct(int,*(void)))
,	O
OM_uint32	int
req_flags	int
,	O
OM_uint32	int
time_req	int
,	O
const	O
gss_channel_bindings_t	*(struct(int,struct(long,*(void)),int,struct(long,*(void)),struct(long,*(void))))
input_chan_bindings	*(struct(int,struct(long,*(void)),int,struct(long,*(void)),struct(long,*(void))))
,	O
const	O
gss_buffer_t	*(struct(long,*(void)))
input_token	*(struct(long,*(void)))
,	O
gss_OID	*(struct(int,*(void)))
*	O
actual_mech_type	*(*(struct(int,*(void))))
,	O
gss_buffer_t	*(struct(long,*(void)))
output_token	*(struct(long,*(void)))
,	O
OM_uint32	int
*	O
ret_flags	*(int)
,	O
OM_uint32	int
*	O
time_rec	*(int)
)	O
{	O
OM_uint32	int
maj_stat	int
;	O
_gss_mech_api_t	*(struct(*(struct(int,*(void))),*(char),*(char),*(char),array(*(struct(int,*(void)))),*((*(int),*(struct`),*(*`),*(struct`),*(struct`),int,int,*(struct`),*(struct`),*(*`),*(struct`),*(int),*(int))->(int)),*((*(int),*(struct`),*(struct`),*(*`))->(int)),*((*(int),*(struct`),*(struct`))->(int)),*((*(int),*(struct`),int,int,*(struct`),*(int),*(struct`))->(int)),*((*(int),*(struct`),*(struct`),*(struct`),*(int),*(int))->(int)),*((*(int),*(struct`),int,*(struct`),*(struct`))->(int)),*((*(int),*(struct`),*(struct`),*(struct`),*(int))->(int)),*((*(int),int,int,*(struct`),*(int),*(struct`))->(int)),*((*(int),*(struct`),int,*(struct`),int,*(*`),*(*`),*(int))->(int)),*((*(int),*(*`))->(int)),*((*(int),*(*`),*(struct`),*(struct`),*(struct`),*(*`),*(*`),*(struct`),*(int),*(int),*(*`))->(int)),*((*(int),*(*`),*(struct`))->(int)),*((*(int),*(struct`),*(int))->(int)),*((*(int),*(struct`),*(*`),*(int),*(int),*(*`))->(int)),*((*(int),*(struct`),*(struct`),*(*`),*(int),*(int),*(int))->(int))))
mech	*(struct(int,*(void)))
;	O
int	O
freecontext	int
=	O
0	int
;	O
if	O
(	O
output_token	*(struct(long,*(void)))
)	O
{	O
output_token	*(struct(long,*(void)))
->	O
length	int
=	O
0	int
;	O
output_token	*(struct(long,*(void)))
->	O
value	*(void)
=	O
NULL	O
;	O
}	O
if	O
(	O
ret_flags	*(int)
)	O
*	O
ret_flags	*(int)
=	O
0	int
;	O
if	O
(	O
!	O
context_handle	*(*(struct))
)	O
{	O
if	O
(	O
minor_status	*(int)
)	O
*	O
minor_status	*(int)
=	O
0	int
;	O
return	O
GSS_S_NO_CONTEXT	O
|	O
GSS_S_CALL_INACCESSIBLE_READ	O
;	O
}	O
if	O
(	O
output_token	*(struct(long,*(void)))
==	O
GSS_C_NO_BUFFER	O
)	O
{	O
if	O
(	O
minor_status	*(int)
)	O
*	O
minor_status	*(int)
=	O
0	int
;	O
return	O
GSS_S_FAILURE	O
|	O
GSS_S_CALL_BAD_STRUCTURE	O
;	O
}	O
if	O
(	O
*	O
context_handle	*(*(struct))
==	O
GSS_C_NO_CONTEXT	O
)	O
mech	*(struct(int,*(void)))
=	O
_gss_find_mech	(*(struct(int,*(void))))->(*(struct(*(struct(int,*`)),*(char),*(char),*(char),array(*(struct(int,*(void)))),*((*`,*`,*`,*`,*`,int,int,*`,*`,*`,*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,int,int,*`,*`,*`)->(int)),*((*`,*`,*`,*`,*`,*`)->(int)),*((*`,*`,int,*`,*`)->(int)),*((*`,*`,*`,*`,*`)->(int)),*((*`,int,int,*`,*`,*`)->(int)),*((*`,*`,int,*`,int,*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,*`,*`,*`,*`)->(int)),*((*`,*`,*`,*`,*`,*`,*`)->(int)))))
(	O
mech_type	*(struct(int,*(void)))
)	O
;	O
else	O
mech	*(struct(int,*(void)))
=	O
_gss_find_mech	(*(struct(int,*(void))))->(*(struct(*(struct(int,*`)),*(char),*(char),*(char),array(*(struct(int,*(void)))),*((*`,*`,*`,*`,*`,int,int,*`,*`,*`,*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,int,int,*`,*`,*`)->(int)),*((*`,*`,*`,*`,*`,*`)->(int)),*((*`,*`,int,*`,*`)->(int)),*((*`,*`,*`,*`,*`)->(int)),*((*`,int,int,*`,*`,*`)->(int)),*((*`,*`,int,*`,int,*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,*`,*`,*`,*`)->(int)),*((*`,*`,*`,*`,*`,*`,*`)->(int)))))
(	O
(	O
*	O
context_handle	*(*(struct))
)	O
->	O
mech	*(struct(int,*(void)))
)	O
;	O
if	O
(	O
mech	*(struct(int,*(void)))
==	O
NULL	O
)	O
{	O
if	O
(	O
minor_status	*(int)
)	O
*	O
minor_status	*(int)
=	O
0	int
;	O
return	O
GSS_S_BAD_MECH	O
;	O
}	O
if	O
(	O
actual_mech_type	*(*(struct(int,*(void))))
)	O
*	O
actual_mech_type	*(*(struct(int,*(void))))
=	O
mech	*(struct(int,*(void)))
->	O
mech	*(struct(int,*(void)))
;	O
if	O
(	O
*	O
context_handle	*(*(struct))
==	O
GSS_C_NO_CONTEXT	O
)	O
{	O
*	O
context_handle	*(*(struct))
=	O
calloc	(long,long)->(*(void))
(	O
sizeof	O
(	O
*	O
*	O
context_handle	*(*(struct))
)	O
,	O
1	int
)	O
;	O
if	O
(	O
!	O
*	O
context_handle	*(*(struct))
)	O
{	O
if	O
(	O
minor_status	*(int)
)	O
*	O
minor_status	*(int)
=	O
ENOMEM	int
;	O
return	O
GSS_S_FAILURE	O
;	O
}	O
(	O
*	O
context_handle	*(*(struct))
)	O
->	O
mech	*(struct(int,*(void)))
=	O
mech	*(struct(int,*(void)))
->	O
mech	*(struct(int,*(void)))
;	O
freecontext	int
=	O
1	int
;	O
}	O
maj_stat	int
=	O
mech	*(struct(int,*(void)))
->	O
init_sec_context	*((*(int),*(struct(*(struct`))),*(*(struct(*`))),*(struct(long,*(char),*(struct`))),*(struct(int,*(void))),int,int,*(struct(int,struct(long,*`),int,struct(long,*`),struct(long,*`))),*(struct(long,*(void))),*(*(struct(int,*`))),*(struct(long,*(void))),*(int),*(int))->(int))
(	O
minor_status	*(int)
,	O
initiator_cred_handle	*(struct)
,	O
context_handle	*(*(struct))
,	O
target_name	*(struct)
,	O
mech_type	*(struct(int,*(void)))
,	O
req_flags	int
,	O
time_req	int
,	O
input_chan_bindings	*(struct(int,struct(long,*(void)),int,struct(long,*(void)),struct(long,*(void))))
,	O
input_token	*(struct(long,*(void)))
,	O
actual_mech_type	*(*(struct(int,*(void))))
,	O
output_token	*(struct(long,*(void)))
,	O
ret_flags	*(int)
,	O
time_rec	*(int)
)	O
;	O
if	O
(	O
GSS_ERROR	O
(	O
maj_stat	int
)	O
&&	O
freecontext	int
)	O
{	O
free	(*(void))->(void)
(	O
*	O
context_handle	*(*(struct))
)	O
;	O
*	O
context_handle	*(*(struct))
=	O
GSS_C_NO_CONTEXT	O
;	O
}	O
return	O
maj_stat	int
;	O
}	O
OM_uint32	int
gss_accept_sec_context	(*(int),*(*(struct)),*(struct),*(struct(long,*(void))),*(struct(int,struct(long,*(void)),int,struct(long,*(void)),struct(long,*(void)))),*(*(struct)),*(*(struct(int,*(void)))),*(struct(long,*(void))),*(int),*(int),*(*(struct)))->(int)
(	O
OM_uint32	int
*	O
minor_status	*(int)
,	O
gss_ctx_id_t	*(struct)
*	O
context_handle	*(*(struct))
,	O
const	O
gss_cred_id_t	*(struct)
acceptor_cred_handle	*(struct)
,	O
const	O
gss_buffer_t	*(struct(long,*(void)))
input_token_buffer	*(struct(long,*(void)))
,	O
const	O
gss_channel_bindings_t	*(struct(int,struct(long,*(void)),int,struct(long,*(void)),struct(long,*(void))))
input_chan_bindings	*(struct(int,struct(long,*(void)),int,struct(long,*(void)),struct(long,*(void))))
,	O
gss_name_t	*(struct)
*	O
src_name	*(*(struct))
,	O
gss_OID	*(struct(int,*(void)))
*	O
mech_type	*(struct(int,*(void)))
,	O
gss_buffer_t	*(struct(long,*(void)))
output_token	*(struct(long,*(void)))
,	O
OM_uint32	int
*	O
ret_flags	*(int)
,	O
OM_uint32	int
*	O
time_rec	*(int)
,	O
gss_cred_id_t	*(struct)
*	O
delegated_cred_handle	*(*(struct))
)	O
{	O
_gss_mech_api_t	*(struct(*(struct(int,*(void))),*(char),*(char),*(char),array(*(struct(int,*(void)))),*((*(int),*(struct`),*(*`),*(struct`),*(struct`),int,int,*(struct`),*(struct`),*(*`),*(struct`),*(int),*(int))->(int)),*((*(int),*(struct`),*(struct`),*(*`))->(int)),*((*(int),*(struct`),*(struct`))->(int)),*((*(int),*(struct`),int,int,*(struct`),*(int),*(struct`))->(int)),*((*(int),*(struct`),*(struct`),*(struct`),*(int),*(int))->(int)),*((*(int),*(struct`),int,*(struct`),*(struct`))->(int)),*((*(int),*(struct`),*(struct`),*(struct`),*(int))->(int)),*((*(int),int,int,*(struct`),*(int),*(struct`))->(int)),*((*(int),*(struct`),int,*(struct`),int,*(*`),*(*`),*(int))->(int)),*((*(int),*(*`))->(int)),*((*(int),*(*`),*(struct`),*(struct`),*(struct`),*(*`),*(*`),*(struct`),*(int),*(int),*(*`))->(int)),*((*(int),*(*`),*(struct`))->(int)),*((*(int),*(struct`),*(int))->(int)),*((*(int),*(struct`),*(*`),*(int),*(int),*(*`))->(int)),*((*(int),*(struct`),*(struct`),*(*`),*(int),*(int),*(int))->(int))))
mech	*(struct(int,*(void)))
;	O
if	O
(	O
!	O
context_handle	*(*(struct))
)	O
{	O
if	O
(	O
minor_status	*(int)
)	O
*	O
minor_status	*(int)
=	O
0	int
;	O
return	O
GSS_S_NO_CONTEXT	O
|	O
GSS_S_CALL_INACCESSIBLE_READ	O
;	O
}	O
if	O
(	O
*	O
context_handle	*(*(struct))
==	O
GSS_C_NO_CONTEXT	O
)	O
{	O
char	O
*	O
oid	*(char)
;	O
size_t	long
oidlen	int
;	O
gss_OID_desc	struct(int,*(void))
oidbuf	struct(int,*(void))
;	O
int	O
rc	int
;	O
rc	int
=	O
_gss_decapsulate_token	(*(char),long,*(*(char)),*(long),*(*(char)),*(long))->(int)
(	O
input_token_buffer	*(struct(long,*(void)))
->	O
value	*(void)
,	O
input_token_buffer	*(struct(long,*(void)))
->	O
length	int
,	O
&	O
oid	*(char)
,	O
&	O
oidlen	int
,	O
NULL	O
,	O
NULL	O
)	O
;	O
if	O
(	O
rc	int
!=	O
0	int
)	O
{	O
if	O
(	O
minor_status	*(int)
)	O
*	O
minor_status	*(int)
=	O
0	int
;	O
return	O
GSS_S_DEFECTIVE_TOKEN	O
;	O
}	O
oidbuf	struct(int,*(void))
.	O
elements	*(void)
=	O
oid	*(char)
;	O
oidbuf	struct(int,*(void))
.	O
length	int
=	O
oidlen	int
;	O
mech	*(struct(int,*(void)))
=	O
_gss_find_mech_no_default	(*(struct(int,*(void))))->(*(struct(*(struct(int,*`)),*(char),*(char),*(char),array(*(struct(int,*(void)))),*((*`,*`,*`,*`,*`,int,int,*`,*`,*`,*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,int,int,*`,*`,*`)->(int)),*((*`,*`,*`,*`,*`,*`)->(int)),*((*`,*`,int,*`,*`)->(int)),*((*`,*`,*`,*`,*`)->(int)),*((*`,int,int,*`,*`,*`)->(int)),*((*`,*`,int,*`,int,*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,*`,*`,*`,*`)->(int)),*((*`,*`,*`,*`,*`,*`,*`)->(int)))))
(	O
&	O
oidbuf	struct(int,*(void))
)	O
;	O
}	O
else	O
mech	*(struct(int,*(void)))
=	O
_gss_find_mech_no_default	(*(struct(int,*(void))))->(*(struct(*(struct(int,*`)),*(char),*(char),*(char),array(*(struct(int,*(void)))),*((*`,*`,*`,*`,*`,int,int,*`,*`,*`,*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,int,int,*`,*`,*`)->(int)),*((*`,*`,*`,*`,*`,*`)->(int)),*((*`,*`,int,*`,*`)->(int)),*((*`,*`,*`,*`,*`)->(int)),*((*`,int,int,*`,*`,*`)->(int)),*((*`,*`,int,*`,int,*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,*`,*`,*`,*`)->(int)),*((*`,*`,*`,*`,*`,*`,*`)->(int)))))
(	O
(	O
*	O
context_handle	*(*(struct))
)	O
->	O
mech	*(struct(int,*(void)))
)	O
;	O
if	O
(	O
mech	*(struct(int,*(void)))
==	O
NULL	O
)	O
{	O
if	O
(	O
minor_status	*(int)
)	O
*	O
minor_status	*(int)
=	O
0	int
;	O
return	O
GSS_S_BAD_MECH	O
;	O
}	O
if	O
(	O
mech_type	*(struct(int,*(void)))
)	O
*	O
mech_type	*(struct(int,*(void)))
=	O
mech	*(struct(int,*(void)))
->	O
mech	*(struct(int,*(void)))
;	O
return	O
mech	*(struct(int,*(void)))
->	O
accept_sec_context	*((*(int),*(*(struct(*`))),*(struct(*(struct`))),*(struct(long,*(void))),*(struct(int,struct(long,*`),int,struct(long,*`),struct(long,*`))),*(*(struct(long,*`,*`))),*(*(struct(int,*`))),*(struct(long,*(void))),*(int),*(int),*(*(struct(*`))))->(int))
(	O
minor_status	*(int)
,	O
context_handle	*(*(struct))
,	O
acceptor_cred_handle	*(struct)
,	O
input_token_buffer	*(struct(long,*(void)))
,	O
input_chan_bindings	*(struct(int,struct(long,*(void)),int,struct(long,*(void)),struct(long,*(void))))
,	O
src_name	*(*(struct))
,	O
mech_type	*(struct(int,*(void)))
,	O
output_token	*(struct(long,*(void)))
,	O
ret_flags	*(int)
,	O
time_rec	*(int)
,	O
delegated_cred_handle	*(*(struct))
)	O
;	O
}	O
OM_uint32	int
gss_delete_sec_context	(*(int),*(*(struct)),*(struct(long,*(void))))->(int)
(	O
OM_uint32	int
*	O
minor_status	*(int)
,	O
gss_ctx_id_t	*(struct)
*	O
context_handle	*(*(struct))
,	O
gss_buffer_t	*(struct(long,*(void)))
output_token	*(struct(long,*(void)))
)	O
{	O
_gss_mech_api_t	*(struct(*(struct(int,*(void))),*(char),*(char),*(char),array(*(struct(int,*(void)))),*((*(int),*(struct`),*(*`),*(struct`),*(struct`),int,int,*(struct`),*(struct`),*(*`),*(struct`),*(int),*(int))->(int)),*((*(int),*(struct`),*(struct`),*(*`))->(int)),*((*(int),*(struct`),*(struct`))->(int)),*((*(int),*(struct`),int,int,*(struct`),*(int),*(struct`))->(int)),*((*(int),*(struct`),*(struct`),*(struct`),*(int),*(int))->(int)),*((*(int),*(struct`),int,*(struct`),*(struct`))->(int)),*((*(int),*(struct`),*(struct`),*(struct`),*(int))->(int)),*((*(int),int,int,*(struct`),*(int),*(struct`))->(int)),*((*(int),*(struct`),int,*(struct`),int,*(*`),*(*`),*(int))->(int)),*((*(int),*(*`))->(int)),*((*(int),*(*`),*(struct`),*(struct`),*(struct`),*(*`),*(*`),*(struct`),*(int),*(int),*(*`))->(int)),*((*(int),*(*`),*(struct`))->(int)),*((*(int),*(struct`),*(int))->(int)),*((*(int),*(struct`),*(*`),*(int),*(int),*(*`))->(int)),*((*(int),*(struct`),*(struct`),*(*`),*(int),*(int),*(int))->(int))))
mech	*(struct(int,*(void)))
;	O
OM_uint32	int
ret	int
;	O
if	O
(	O
!	O
context_handle	*(*(struct))
)	O
{	O
if	O
(	O
minor_status	*(int)
)	O
*	O
minor_status	*(int)
=	O
0	int
;	O
return	O
GSS_S_NO_CONTEXT	O
|	O
GSS_S_CALL_INACCESSIBLE_READ	O
;	O
}	O
if	O
(	O
*	O
context_handle	*(*(struct))
==	O
GSS_C_NO_CONTEXT	O
)	O
{	O
if	O
(	O
minor_status	*(int)
)	O
*	O
minor_status	*(int)
=	O
0	int
;	O
return	O
GSS_S_NO_CONTEXT	O
|	O
GSS_S_CALL_BAD_STRUCTURE	O
;	O
}	O
if	O
(	O
output_token	*(struct(long,*(void)))
!=	O
GSS_C_NO_BUFFER	O
)	O
{	O
output_token	*(struct(long,*(void)))
->	O
length	int
=	O
0	int
;	O
output_token	*(struct(long,*(void)))
->	O
value	*(void)
=	O
NULL	O
;	O
}	O
mech	*(struct(int,*(void)))
=	O
_gss_find_mech	(*(struct(int,*(void))))->(*(struct(*(struct(int,*`)),*(char),*(char),*(char),array(*(struct(int,*(void)))),*((*`,*`,*`,*`,*`,int,int,*`,*`,*`,*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,int,int,*`,*`,*`)->(int)),*((*`,*`,*`,*`,*`,*`)->(int)),*((*`,*`,int,*`,*`)->(int)),*((*`,*`,*`,*`,*`)->(int)),*((*`,int,int,*`,*`,*`)->(int)),*((*`,*`,int,*`,int,*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,*`,*`,*`,*`)->(int)),*((*`,*`,*`,*`,*`,*`,*`)->(int)))))
(	O
(	O
*	O
context_handle	*(*(struct))
)	O
->	O
mech	*(struct(int,*(void)))
)	O
;	O
if	O
(	O
mech	*(struct(int,*(void)))
==	O
NULL	O
)	O
{	O
if	O
(	O
minor_status	*(int)
)	O
*	O
minor_status	*(int)
=	O
0	int
;	O
return	O
GSS_S_BAD_MECH	O
;	O
}	O
ret	int
=	O
mech	*(struct(int,*(void)))
->	O
delete_sec_context	*((*(int),*(*(struct(*`))),*(struct(long,*(void))))->(int))
(	O
NULL	O
,	O
context_handle	*(*(struct))
,	O
output_token	*(struct(long,*(void)))
)	O
;	O
free	(*(void))->(void)
(	O
*	O
context_handle	*(*(struct))
)	O
;	O
*	O
context_handle	*(*(struct))
=	O
GSS_C_NO_CONTEXT	O
;	O
return	O
ret	int
;	O
}	O
OM_uint32	int
gss_process_context_token	(*(int),*(struct),*(struct(long,*(void))))->(int)
(	O
OM_uint32	int
*	O
minor_status	*(int)
,	O
const	O
gss_ctx_id_t	*(struct)
context_handle	*(*(struct))
,	O
const	O
gss_buffer_t	*(struct(long,*(void)))
token_buffer	*(struct(long,*(void)))
)	O
{	O
return	O
GSS_S_FAILURE	O
;	O
}	O
OM_uint32	int
gss_context_time	(*(int),*(struct),*(int))->(int)
(	O
OM_uint32	int
*	O
minor_status	*(int)
,	O
const	O
gss_ctx_id_t	*(struct)
context_handle	*(*(struct))
,	O
OM_uint32	int
*	O
time_rec	*(int)
)	O
{	O
_gss_mech_api_t	*(struct(*(struct(int,*(void))),*(char),*(char),*(char),array(*(struct(int,*(void)))),*((*(int),*(struct`),*(*`),*(struct`),*(struct`),int,int,*(struct`),*(struct`),*(*`),*(struct`),*(int),*(int))->(int)),*((*(int),*(struct`),*(struct`),*(*`))->(int)),*((*(int),*(struct`),*(struct`))->(int)),*((*(int),*(struct`),int,int,*(struct`),*(int),*(struct`))->(int)),*((*(int),*(struct`),*(struct`),*(struct`),*(int),*(int))->(int)),*((*(int),*(struct`),int,*(struct`),*(struct`))->(int)),*((*(int),*(struct`),*(struct`),*(struct`),*(int))->(int)),*((*(int),int,int,*(struct`),*(int),*(struct`))->(int)),*((*(int),*(struct`),int,*(struct`),int,*(*`),*(*`),*(int))->(int)),*((*(int),*(*`))->(int)),*((*(int),*(*`),*(struct`),*(struct`),*(struct`),*(*`),*(*`),*(struct`),*(int),*(int),*(*`))->(int)),*((*(int),*(*`),*(struct`))->(int)),*((*(int),*(struct`),*(int))->(int)),*((*(int),*(struct`),*(*`),*(int),*(int),*(*`))->(int)),*((*(int),*(struct`),*(struct`),*(*`),*(int),*(int),*(int))->(int))))
mech	*(struct(int,*(void)))
;	O
if	O
(	O
context_handle	*(*(struct))
==	O
GSS_C_NO_CONTEXT	O
)	O
{	O
if	O
(	O
minor_status	*(int)
)	O
*	O
minor_status	*(int)
=	O
0	int
;	O
return	O
GSS_S_NO_CONTEXT	O
|	O
GSS_S_CALL_BAD_STRUCTURE	O
;	O
}	O
mech	*(struct(int,*(void)))
=	O
_gss_find_mech	(*(struct(int,*(void))))->(*(struct(*(struct(int,*`)),*(char),*(char),*(char),array(*(struct(int,*(void)))),*((*`,*`,*`,*`,*`,int,int,*`,*`,*`,*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,int,int,*`,*`,*`)->(int)),*((*`,*`,*`,*`,*`,*`)->(int)),*((*`,*`,int,*`,*`)->(int)),*((*`,*`,*`,*`,*`)->(int)),*((*`,int,int,*`,*`,*`)->(int)),*((*`,*`,int,*`,int,*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,*`,*`,*`,*`)->(int)),*((*`,*`,*`,*`,*`,*`,*`)->(int)))))
(	O
context_handle	*(*(struct))
->	O
mech	*(struct(int,*(void)))
)	O
;	O
if	O
(	O
mech	*(struct(int,*(void)))
==	O
NULL	O
)	O
{	O
if	O
(	O
minor_status	*(int)
)	O
*	O
minor_status	*(int)
=	O
0	int
;	O
return	O
GSS_S_BAD_MECH	O
;	O
}	O
return	O
mech	*(struct(int,*(void)))
->	O
context_time	*((*(int),*(struct(*(struct`))),*(int))->(int))
(	O
minor_status	*(int)
,	O
context_handle	*(*(struct))
,	O
time_rec	*(int)
)	O
;	O
}	O
OM_uint32	int
gss_inquire_context	(*(int),*(struct),*(*(struct)),*(*(struct)),*(int),*(*(struct(int,*(void)))),*(int),*(int),*(int))->(int)
(	O
OM_uint32	int
*	O
minor_status	*(int)
,	O
const	O
gss_ctx_id_t	*(struct)
context_handle	*(*(struct))
,	O
gss_name_t	*(struct)
*	O
src_name	*(*(struct))
,	O
gss_name_t	*(struct)
*	O
targ_name	*(*(struct))
,	O
OM_uint32	int
*	O
lifetime_rec	*(int)
,	O
gss_OID	*(struct(int,*(void)))
*	O
mech_type	*(struct(int,*(void)))
,	O
OM_uint32	int
*	O
ctx_flags	*(int)
,	O
int	O
*	O
locally_initiated	*(int)
,	O
int	O
*	O
open	*(int)
)	O
{	O
return	O
GSS_S_FAILURE	O
;	O
}	O
OM_uint32	int
gss_wrap_size_limit	(*(int),*(struct),int,int,int,*(int))->(int)
(	O
OM_uint32	int
*	O
minor_status	*(int)
,	O
const	O
gss_ctx_id_t	*(struct)
context_handle	*(*(struct))
,	O
int	O
conf_req_flag	int
,	O
gss_qop_t	int
qop_req	int
,	O
OM_uint32	int
req_output_size	int
,	O
OM_uint32	int
*	O
max_input_size	*(int)
)	O
{	O
return	O
GSS_S_FAILURE	O
;	O
}	O
OM_uint32	int
gss_export_sec_context	(*(int),*(*(struct)),*(struct(long,*(void))))->(int)
(	O
OM_uint32	int
*	O
minor_status	*(int)
,	O
gss_ctx_id_t	*(struct)
*	O
context_handle	*(*(struct))
,	O
gss_buffer_t	*(struct(long,*(void)))
interprocess_token	*(struct(long,*(void)))
)	O
{	O
return	O
GSS_S_UNAVAILABLE	O
;	O
}	O
OM_uint32	int
gss_import_sec_context	(*(int),*(struct(long,*(void))),*(*(struct)))->(int)
(	O
OM_uint32	int
*	O
minor_status	*(int)
,	O
const	O
gss_buffer_t	*(struct(long,*(void)))
interprocess_token	*(struct(long,*(void)))
,	O
gss_ctx_id_t	*(struct)
*	O
context_handle	*(*(struct))
)	O
{	O
return	O
GSS_S_UNAVAILABLE	O
;	O
}	O
