int	O
user_heart_attack	int
;	O
static	O
int	O
suspend_requested	int
;	O
static	O
int	O
refresh_requested	int
;	O
static	O
int	O
alarm_requested	int
;	O
static	O
int	O
refresh_at_SIGCONT	int
;	O
static	O
int	O
signals_allowed	int
=	O
OFF	int
;	O
static	O
int	O
job_control	int
=	O
ON	int
;	O
static	O
void	O
install_handler	(int)->(void)
PROTO	O
(	O
(	O
int	O
)	O
)	O
;	O
extern	O
void	O
hide	()->(void)
PROTO	O
(	O
(	O
)	O
)	O
;	O
extern	O
void	O
refresh	(int)->(void)
PROTO	O
(	O
(	O
int	O
)	O
)	O
;	O
extern	O
void	O
clock_refresh	(int)->(void)
PROTO	O
(	O
(	O
int	O
)	O
)	O
;	O
void	O
service_pending_signals	()->(void)
(	O
)	O
{	O
if	O
(	O
suspend_requested	int
)	O
{	O
hide	()->(void)
(	O
)	O
;	O
kill	(int,int)->(int)
(	O
getpid	()->(int)
(	O
)	O
,	O
SIGSTOP	int
)	O
;	O
suspend_requested	int
=	O
0	int
;	O
refresh_requested	int
=	O
0	int
;	O
alarm_requested	int
=	O
0	int
;	O
return	O
;	O
}	O
if	O
(	O
refresh_requested	int
)	O
{	O
tty_defaults	()->(void)
(	O
)	O
;	O
tty_io_clear	()->(void)
(	O
)	O
;	O
refresh	(int)->(void)
(	O
SIGWINCH	int
)	O
;	O
refresh_requested	int
=	O
0	int
;	O
alarm_requested	int
=	O
0	int
;	O
return	O
;	O
}	O
if	O
(	O
alarm_requested	int
)	O
{	O
alarm_requested	int
=	O
0	int
;	O
return	O
;	O
}	O
}	O
void	O
signals	(int)->(void)
(	O
mode	int
)	O
int	O
mode	int
;	O
{	O
signals_allowed	int
=	O
mode	int
;	O
if	O
(	O
signals_allowed	int
)	O
service_pending_signals	()->(void)
(	O
)	O
;	O
}	O
static	O
RETSIGTYPE	void
suspend	(int)->(void)
(	O
signum	int
)	O
int	O
signum	int
;	O
{	O
if	O
(	O
signals_allowed	int
)	O
{	O
refresh_at_SIGCONT	int
=	O
(	O
tty_get_mode	()->(int)
(	O
)	O
==	O
TTY_NONCANONIC	int
)	O
;	O
hide	()->(void)
(	O
)	O
;	O
kill	(int,int)->(int)
(	O
getpid	()->(int)
(	O
)	O
,	O
SIGSTOP	int
)	O
;	O
suspend_requested	int
=	O
0	int
;	O
}	O
else	O
suspend_requested	int
=	O
1	int
;	O
install_handler	(int)->(void)
(	O
signum	int
)	O
;	O
}	O
static	O
RETSIGTYPE	void
window_change	(int)->(void)
(	O
signum	int
)	O
int	O
signum	int
;	O
{	O
if	O
(	O
signals_allowed	int
)	O
{	O
tty_defaults	()->(void)
(	O
)	O
;	O
tty_io_clear	()->(void)
(	O
)	O
;	O
refresh	(int)->(void)
(	O
signum	int
)	O
;	O
refresh_requested	int
=	O
0	int
;	O
}	O
else	O
refresh_requested	int
=	O
1	int
;	O
install_handler	(int)->(void)
(	O
signum	int
)	O
;	O
}	O
static	O
RETSIGTYPE	void
resume	(int)->(void)
(	O
signum	int
)	O
int	O
signum	int
;	O
{	O
if	O
(	O
refresh_at_SIGCONT	int
)	O
{	O
refresh	(int)->(void)
(	O
signum	int
)	O
;	O
refresh_requested	int
=	O
0	int
;	O
}	O
install_handler	(int)->(void)
(	O
signum	int
)	O
;	O
}	O
static	O
RETSIGTYPE	void
time_change	(int)->(void)
(	O
signum	int
)	O
int	O
signum	int
;	O
{	O
if	O
(	O
signals_allowed	int
)	O
{	O
if	O
(	O
get_local_time	()->(*(struct(int,int,int,int,int,int,int,int,int,long,*(char))))
(	O
)	O
->	O
tm_sec	int
==	O
0	int
)	O
clock_refresh	(int)->(void)
(	O
signum	int
)	O
;	O
tty_key_print_async	()->(void)
(	O
)	O
;	O
alarm_requested	int
=	O
0	int
;	O
}	O
else	O
alarm_requested	int
=	O
1	int
;	O
install_handler	(int)->(void)
(	O
signum	int
)	O
;	O
alarm	(int)->(int)
(	O
60	int
-	O
get_local_time	()->(*(struct(int,int,int,int,int,int,int,int,int,long,*(char))))
(	O
)	O
->	O
tm_sec	int
)	O
;	O
}	O
static	O
RETSIGTYPE	void
panic	(int)->(void)
(	O
signum	int
)	O
int	O
signum	int
;	O
{	O
signal	(int,*((int)->(void)))->(*((int)->(void)))
(	O
signum	int
,	O
panic	(int)->(void)
)	O
;	O
user_heart_attack	int
=	O
1	int
;	O
}	O
static	O
void	O
install_handler	(int)->(void)
(	O
signum	int
)	O
int	O
signum	int
;	O
{	O
switch	O
(	O
signum	int
)	O
{	O
case	O
SIGTSTP	int
:	O
signal	(int,*((int)->(void)))->(*((int)->(void)))
(	O
SIGTSTP	int
,	O
suspend	(int)->(void)
)	O
;	O
break	O
;	O
case	O
SIGCONT	int
:	O
signal	(int,*((int)->(void)))->(*((int)->(void)))
(	O
SIGCONT	int
,	O
resume	(int)->(void)
)	O
;	O
break	O
;	O
case	O
SIGWINCH	int
:	O
signal	(int,*((int)->(void)))->(*((int)->(void)))
(	O
SIGWINCH	int
,	O
window_change	(int)->(void)
)	O
;	O
break	O
;	O
case	O
SIGALRM	int
:	O
signal	(int,*((int)->(void)))->(*((int)->(void)))
(	O
SIGALRM	int
,	O
time_change	(int)->(void)
)	O
;	O
break	O
;	O
default	O
:	O
assert	O
(	O
0	int
)	O
;	O
}	O
}	O
void	O
signal_handlers	(int)->(void)
(	O
status	int
)	O
int	O
status	int
;	O
{	O
if	O
(	O
status	int
==	O
ON	int
)	O
{	O
if	O
(	O
job_control	int
)	O
{	O
install_handler	(int)->(void)
(	O
SIGTSTP	int
)	O
;	O
install_handler	(int)->(void)
(	O
SIGCONT	int
)	O
;	O
}	O
install_handler	(int)->(void)
(	O
SIGWINCH	int
)	O
;	O
install_handler	(int)->(void)
(	O
SIGALRM	int
)	O
;	O
}	O
else	O
{	O
if	O
(	O
job_control	int
)	O
{	O
signal	(int,*((int)->(void)))->(*((int)->(void)))
(	O
SIGTSTP	int
,	O
SIG_IGN	O
)	O
;	O
signal	(int,*((int)->(void)))->(*((int)->(void)))
(	O
SIGCONT	int
,	O
SIG_IGN	O
)	O
;	O
}	O
signal	(int,*((int)->(void)))->(*((int)->(void)))
(	O
SIGWINCH	int
,	O
SIG_IGN	O
)	O
;	O
signal	(int,*((int)->(void)))->(*((int)->(void)))
(	O
SIGALRM	int
,	O
SIG_IGN	O
)	O
;	O
}	O
}	O
void	O
signals_init	()->(void)
(	O
)	O
{	O
job_control	int
=	O
(	O
signal	(int,*((int)->(void)))->(*((int)->(void)))
(	O
SIGTSTP	int
,	O
SIG_IGN	O
)	O
!=	O
SIG_IGN	O
)	O
;	O
signal	(int,*((int)->(void)))->(*((int)->(void)))
(	O
SIGCONT	int
,	O
SIG_IGN	O
)	O
;	O
signal	(int,*((int)->(void)))->(*((int)->(void)))
(	O
SIGWINCH	int
,	O
SIG_IGN	O
)	O
;	O
signal	(int,*((int)->(void)))->(*((int)->(void)))
(	O
SIGSEGV	int
,	O
fatal_signal	(int)->(void)
)	O
;	O
signal	(int,*((int)->(void)))->(*((int)->(void)))
(	O
SIGHUP	int
,	O
fatal_signal	(int)->(void)
)	O
;	O
signal	(int,*((int)->(void)))->(*((int)->(void)))
(	O
SIGTERM	int
,	O
fatal_signal	(int)->(void)
)	O
;	O
signal	(int,*((int)->(void)))->(*((int)->(void)))
(	O
SIGQUIT	int
,	O
SIG_IGN	O
)	O
;	O
signal	(int,*((int)->(void)))->(*((int)->(void)))
(	O
SIGINT	int
,	O
panic	(int)->(void)
)	O
;	O
}	O
