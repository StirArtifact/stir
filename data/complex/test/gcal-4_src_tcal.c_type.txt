__BEGIN_DECLARATIONS	O
static	O
void	O
usage_msg	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char),int)->(void)
__P_	O
(	O
(	O
FILE	struct
*	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
const	O
char	O
*	O
prgr_name	*(char)
,	O
int	O
exit_status	int
)	O
)	O
;	O
static	O
void	O
version_msg	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char),int)->(void)
__P_	O
(	O
(	O
FILE	struct
*	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
const	O
char	O
*	O
prgr_name	*(char)
,	O
int	O
exit_status	int
)	O
)	O
;	O
static	O
VOID_PTR	O
my_malloc	(int,int,*(char),long,*(char),int)->(*(void))
__P_	O
(	O
(	O
const	O
int	O
amount	int
,	O
const	O
int	O
exit_status	int
,	O
const	O
char	O
*	O
module_name	*(char)
,	O
const	O
long	O
module_line	long
,	O
const	O
char	O
*	O
var_name	*(char)
,	O
const	O
int	O
var_contents	int
)	O
)	O
;	O
static	O
VOID_PTR	O
my_realloc	(*(void),int,int,*(char),long,*(char),int)->(*(void))
__P_	O
(	O
(	O
VOID_PTR	O
ptr_memblock	*(void)
,	O
const	O
int	O
amount	int
,	O
const	O
int	O
exit_status	int
,	O
const	O
char	O
*	O
module_name	*(char)
,	O
const	O
long	O
module_line	long
,	O
const	O
char	O
*	O
var_name	*(char)
,	O
const	O
int	O
var_contents	int
)	O
)	O
;	O
static	O
void	O
my_error	(int,*(char),long,*(char),int)->(void)
__P_	O
(	O
(	O
const	O
int	O
exit_status	int
,	O
const	O
char	O
*	O
module_name	*(char)
,	O
const	O
long	O
module_line	long
,	O
const	O
char	O
*	O
var_name	*(char)
,	O
const	O
int	O
var_contents	int
)	O
)	O
;	O
static	O
RETSIGTYPE	void
handle_signal	(int)->(void)
__P_	O
(	O
(	O
int	O
the_signal	int
)	O
)	O
;	O
static	O
int	O
days_of_february	(int)->(int)
__P_	O
(	O
(	O
const	O
int	O
year	int
)	O
)	O
;	O
static	O
Bool	int
doy2date	(int,int,*(int),*(int))->(int)
__P_	O
(	O
(	O
int	O
doy	int
,	O
const	O
int	O
is_leap_year	int
,	O
int	O
*	O
day	*(int)
,	O
int	O
*	O
month	int
)	O
)	O
;	O
static	O
Ulint	long
date2num	(int,int,int)->(long)
__P_	O
(	O
(	O
const	O
int	O
day	*(int)
,	O
const	O
int	O
month	int
,	O
const	O
int	O
year	int
)	O
)	O
;	O
static	O
void	O
num2date	(long,*(int),*(int),*(int))->(void)
__P_	O
(	O
(	O
Ulint	long
mjd	long
,	O
int	O
*	O
day	*(int)
,	O
int	O
*	O
month	int
,	O
int	O
*	O
year	int
)	O
)	O
;	O
static	O
void	O
get_actual_date	(*(int),*(int),*(int))->(void)
__P_	O
(	O
(	O
int	O
*	O
day	*(int)
,	O
int	O
*	O
month	int
,	O
int	O
*	O
year	int
)	O
)	O
;	O
__END_DECLARATIONS	O
static	O
const	O
int	O
dvec	array(int)
[	O
]	O
=	O
{	O
31	int
,	O
28	int
,	O
31	int
,	O
30	int
,	O
31	int
,	O
30	int
,	O
31	int
,	O
31	int
,	O
30	int
,	O
31	int
,	O
30	int
,	O
31	int
}	O
;	O
static	O
const	O
int	O
mvec	array(int)
[	O
]	O
=	O
{	O
0	int
,	O
31	int
,	O
59	int
,	O
90	int
,	O
120	int
,	O
151	int
,	O
181	int
,	O
212	int
,	O
243	int
,	O
273	int
,	O
304	int
,	O
334	int
}	O
;	O
static	O
Greg_struct	struct(int,int,int,int)
greg_reform_date	array(struct(int,int,int,int))
[	O
]	O
=	O
{	O
{	O
1582	int
,	O
10	int
,	O
5	int
,	O
14	int
}	O
,	O
{	O
1752	int
,	O
9	int
,	O
3	int
,	O
13	int
}	O
}	O
;	O
static	O
Greg_struct	struct(int,int,int,int)
*	O
greg	*(struct(int,int,int,int))
=	O
greg_reform_date	array(struct(int,int,int,int))
;	O
static	O
Uint	int
testval	int
=	O
(	O
Uint	int
)	O
0	int
;	O
static	O
Uint	int
maxlen_max	int
=	O
MAXLEN_MAX	int
;	O
static	O
char	O
*	O
prgr_name	*(char)
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
static	O
char	O
*	O
help_option_name	*(char)
=	O
"help"	*(char)
;	O
static	O
char	O
*	O
version_option_name	*(char)
=	O
"version"	*(char)
;	O
static	O
char	O
*	O
shift_option_name	*(char)
=	O
"shift"	*(char)
;	O
static	O
void	O
usage_msg	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char),int)->(void)
(	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
prgr_name	*(char)
,	O
exit_status	int
)	O
FILE	struct
*	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
;	O
const	O
char	O
*	O
prgr_name	*(char)
;	O
int	O
exit_status	int
;	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
_	O
(	O
"Usage:  %s  [--%s | --%s] | [--%s=[+|-]NUMBER] [ARGUMENT...]\n"	*(char)
)	O
,	O
prgr_name	*(char)
,	O
help_option_name	*(char)
,	O
version_option_name	*(char)
,	O
shift_option_name	*(char)
)	O
;	O
if	O
(	O
exit_status	int
==	O
EXIT_SUCCESS	int
)	O
{	O
S_NEWLINE	O
(	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
_	O
(	O
"Email bug reports to <%s>"	*(char)
)	O
,	O
BUG_REPORT_ADR1	*(char)
)	O
;	O
S_NEWLINE	O
(	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
}	O
exit	(int)->(void)
(	O
exit_status	int
)	O
;	O
}	O
static	O
void	O
version_msg	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char),int)->(void)
(	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
prgr_name	*(char)
,	O
exit_status	int
)	O
FILE	struct
*	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
;	O
const	O
char	O
*	O
prgr_name	*(char)
;	O
int	O
exit_status	int
;	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s (GNU cal %s)\n"	*(char)
,	O
prgr_name	*(char)
,	O
PACKAGE_VERSION	*(char)
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s\n"	*(char)
,	O
COPYRIGHT_TXT	O
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
_	O
(	O
"This is free software; see the source for copying conditions."	*(char)
)	O
)	O
;	O
S_NEWLINE	O
(	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
_	O
(	O
"There is NO warranty, without even the implied warranty of"	*(char)
)	O
)	O
;	O
S_NEWLINE	O
(	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
_	O
(	O
"MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE."	*(char)
)	O
)	O
;	O
S_NEWLINE	O
(	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
exit	(int)->(void)
(	O
exit_status	int
)	O
;	O
}	O
static	O
VOID_PTR	O
my_malloc	(int,int,*(char),long,*(char),int)->(*(void))
(	O
amount	int
,	O
exit_status	int
,	O
module_name	*(char)
,	O
module_line	long
,	O
var_name	*(char)
,	O
var_contents	int
)	O
const	O
int	O
amount	int
;	O
const	O
int	O
exit_status	int
;	O
const	O
char	O
*	O
module_name	*(char)
;	O
const	O
long	O
module_line	long
;	O
const	O
char	O
*	O
var_name	*(char)
;	O
const	O
int	O
var_contents	int
;	O
{	O
auto	O
VOID_PTR	O
ptr_memblock	*(void)
;	O
if	O
(	O
(	O
Uint	int
)	O
amount	int
>	O
testval	int
)	O
my_error	(int,*(char),long,*(char),int)->(void)
(	O
ERR_INTERNAL_TABLE_CRASH	int
,	O
module_name	*(char)
,	O
module_line	long
,	O
var_name	*(char)
,	O
(	O
int	O
)	O
testval	int
)	O
;	O
ptr_memblock	*(void)
=	O
(	O
VOID_PTR	O
)	O
malloc	(long)->(*(void))
(	O
(	O
int	O
)	O
amount	int
)	O
;	O
if	O
(	O
ptr_memblock	*(void)
==	O
(	O
VOID_PTR	O
)	O
NULL	O
)	O
my_error	(int,*(char),long,*(char),int)->(void)
(	O
exit_status	int
,	O
module_name	*(char)
,	O
module_line	long
,	O
var_name	*(char)
,	O
var_contents	int
)	O
;	O
return	O
(	O
ptr_memblock	*(void)
)	O
;	O
}	O
static	O
VOID_PTR	O
my_realloc	(*(void),int,int,*(char),long,*(char),int)->(*(void))
(	O
ptr_memblock	*(void)
,	O
amount	int
,	O
exit_status	int
,	O
module_name	*(char)
,	O
module_line	long
,	O
var_name	*(char)
,	O
var_contents	int
)	O
VOID_PTR	O
ptr_memblock	*(void)
;	O
const	O
int	O
amount	int
;	O
const	O
int	O
exit_status	int
;	O
const	O
char	O
*	O
module_name	*(char)
;	O
const	O
long	O
module_line	long
;	O
const	O
char	O
*	O
var_name	*(char)
;	O
const	O
int	O
var_contents	int
;	O
{	O
if	O
(	O
(	O
Uint	int
)	O
amount	int
>	O
testval	int
)	O
my_error	(int,*(char),long,*(char),int)->(void)
(	O
ERR_INTERNAL_TABLE_CRASH	int
,	O
module_name	*(char)
,	O
module_line	long
,	O
var_name	*(char)
,	O
(	O
int	O
)	O
testval	int
)	O
;	O
if	O
(	O
ptr_memblock	*(void)
==	O
(	O
VOID_PTR	O
)	O
NULL	O
)	O
return	O
(	O
my_malloc	(int,int,*(char),long,*(char),int)->(*(void))
(	O
amount	int
,	O
exit_status	int
,	O
module_name	*(char)
,	O
module_line	long
,	O
var_name	*(char)
,	O
var_contents	int
)	O
)	O
;	O
ptr_memblock	*(void)
=	O
(	O
VOID_PTR	O
)	O
realloc	(*(void),long)->(*(void))
(	O
ptr_memblock	*(void)
,	O
(	O
int	O
)	O
amount	int
)	O
;	O
if	O
(	O
ptr_memblock	*(void)
==	O
(	O
VOID_PTR	O
)	O
NULL	O
)	O
my_error	(int,*(char),long,*(char),int)->(void)
(	O
exit_status	int
,	O
module_name	*(char)
,	O
module_line	long
,	O
var_name	*(char)
,	O
var_contents	int
)	O
;	O
return	O
(	O
ptr_memblock	*(void)
)	O
;	O
}	O
static	O
void	O
my_error	(int,*(char),long,*(char),int)->(void)
(	O
exit_status	int
,	O
module_name	*(char)
,	O
module_line	long
,	O
var_name	*(char)
,	O
var_contents	int
)	O
const	O
int	O
exit_status	int
;	O
const	O
char	O
*	O
module_name	*(char)
;	O
const	O
long	O
module_line	long
;	O
const	O
char	O
*	O
var_name	*(char)
;	O
const	O
int	O
var_contents	int
;	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
_	O
(	O
"\n%s: abort, "	*(char)
)	O
,	O
prgr_name	*(char)
)	O
;	O
switch	O
(	O
exit_status	int
)	O
{	O
case	O
ERR_NO_MEMORY_AVAILABLE	int
:	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
_	O
(	O
"`%s' line %ld: virtual memory exhausted (%s=%d)"	*(char)
)	O
,	O
module_name	*(char)
,	O
module_line	long
,	O
var_name	*(char)
,	O
var_contents	int
)	O
;	O
break	O
;	O
case	O
ERR_INTERNAL_TABLE_CRASH	int
:	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
_	O
(	O
"`%s' line %ld: (`%s') invalid value for table size `sizeof %s>%d'"	*(char)
)	O
,	O
module_name	*(char)
,	O
module_line	long
,	O
_	O
(	O
"internal"	*(char)
)	O
,	O
var_name	*(char)
,	O
var_contents	int
)	O
;	O
break	O
;	O
case	O
EXIT_FATAL	int
:	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
_	O
(	O
"shift value `%s' is invalid"	*(char)
)	O
,	O
var_name	*(char)
)	O
;	O
break	O
;	O
default	O
:	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
_	O
(	O
"`%s' line %ld: (`%s') unmanaged error (%d)"	*(char)
)	O
,	O
module_name	*(char)
,	O
module_line	long
,	O
_	O
(	O
"internal"	*(char)
)	O
,	O
exit_status	int
)	O
;	O
}	O
S_NEWLINE	O
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
exit	(int)->(void)
(	O
exit_status	int
)	O
;	O
}	O
static	O
RETSIGTYPE	void
handle_signal	(int)->(void)
(	O
the_signal	int
)	O
int	O
the_signal	int
;	O
{	O
fflush	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
_	O
(	O
"\n%s: program aborted by signal %d\n"	*(char)
)	O
,	O
prgr_name	*(char)
,	O
the_signal	int
)	O
;	O
exit	(int)->(void)
(	O
ERR_TERMINATION_BY_SIGNAL	int
)	O
;	O
}	O
static	O
int	O
days_of_february	(int)->(int)
(	O
year	int
)	O
const	O
int	O
year	int
;	O
{	O
register	O
int	O
day	*(int)
;	O
if	O
(	O
(	O
year	int
>	O
greg	*(struct(int,int,int,int))
->	O
year	int
)	O
||	O
(	O
(	O
year	int
==	O
greg	*(struct(int,int,int,int))
->	O
year	int
)	O
&&	O
(	O
greg	*(struct(int,int,int,int))
->	O
month	int
==	O
1	int
||	O
(	O
(	O
greg	*(struct(int,int,int,int))
->	O
month	int
==	O
2	int
)	O
&&	O
(	O
greg	*(struct(int,int,int,int))
->	O
last_day	int
>=	O
28	int
)	O
)	O
)	O
)	O
)	O
day	*(int)
=	O
(	O
year	int
&	O
3	int
)	O
?	O
28	int
:	O
(	O
(	O
!	O
(	O
year	int
%	O
100	int
)	O
&&	O
(	O
year	int
%	O
400	int
)	O
)	O
?	O
28	int
:	O
29	int
)	O
;	O
else	O
day	*(int)
=	O
(	O
year	int
&	O
3	int
)	O
?	O
28	int
:	O
29	int
;	O
if	O
(	O
year	int
==	O
4	int
)	O
day	*(int)
--	O
;	O
return	O
(	O
day	*(int)
)	O
;	O
}	O
static	O
Bool	int
doy2date	(int,int,*(int),*(int))->(int)
(	O
doy	int
,	O
is_leap_year	int
,	O
day	*(int)
,	O
month	int
)	O
int	O
doy	int
;	O
const	O
int	O
is_leap_year	int
;	O
int	O
*	O
day	*(int)
;	O
int	O
*	O
month	int
;	O
{	O
register	O
int	O
i	int
;	O
auto	O
Bool	int
decrement_date	int
;	O
if	O
(	O
doy	int
>	O
DAY_LAST	int
+	O
is_leap_year	int
||	O
doy	int
<	O
DAY_MIN	int
)	O
return	O
(	O
FALSE	O
)	O
;	O
decrement_date	int
=	O
(	O
Bool	int
)	O
(	O
is_leap_year	int
&&	O
(	O
doy	int
>	O
mvec	array(int)
[	O
2	int
]	O
)	O
)	O
;	O
if	O
(	O
decrement_date	int
)	O
doy	int
--	O
;	O
for	O
(	O
i	int
=	O
MONTH_MIN	int
;	O
i	int
<	O
MONTH_MAX	int
;	O
i	int
++	O
)	O
{	O
doy	int
-=	O
dvec	array(int)
[	O
i	int
-	O
1	int
]	O
;	O
if	O
(	O
doy	int
<=	O
0	int
)	O
{	O
doy	int
+=	O
dvec	array(int)
[	O
i	int
-	O
1	int
]	O
;	O
break	O
;	O
}	O
}	O
*	O
month	int
=	O
i	int
;	O
*	O
day	*(int)
=	O
doy	int
;	O
if	O
(	O
decrement_date	int
&&	O
(	O
*	O
month	int
==	O
2	int
)	O
&&	O
(	O
*	O
day	*(int)
==	O
28	int
)	O
)	O
(	O
*	O
day	*(int)
)	O
++	O
;	O
return	O
(	O
TRUE	O
)	O
;	O
}	O
static	O
Ulint	long
date2num	(int,int,int)->(long)
(	O
day	*(int)
,	O
month	int
,	O
year	int
)	O
const	O
int	O
day	*(int)
;	O
const	O
int	O
month	int
;	O
const	O
int	O
year	int
;	O
{	O
auto	O
Ulint	long
mjd	long
=	O
(	O
Ulint	long
)	O
(	O
(	O
year	int
-	O
1	int
)	O
*	O
(	O
Ulint	long
)	O
(	O
DAY_LAST	int
)	O
+	O
(	O
(	O
year	int
-	O
1	int
)	O
>>	O
2	int
)	O
)	O
;	O
if	O
(	O
year	int
>	O
greg	*(struct(int,int,int,int))
->	O
year	int
||	O
(	O
(	O
year	int
==	O
greg	*(struct(int,int,int,int))
->	O
year	int
)	O
&&	O
(	O
month	int
>	O
greg	*(struct(int,int,int,int))
->	O
month	int
||	O
(	O
(	O
month	int
==	O
greg	*(struct(int,int,int,int))
->	O
month	int
)	O
&&	O
(	O
day	*(int)
>	O
greg	*(struct(int,int,int,int))
->	O
last_day	int
)	O
)	O
)	O
)	O
)	O
mjd	long
-=	O
(	O
Ulint	long
)	O
(	O
greg	*(struct(int,int,int,int))
->	O
last_day	int
-	O
greg	*(struct(int,int,int,int))
->	O
first_day	int
+	O
1	int
)	O
;	O
if	O
(	O
year	int
>	O
greg	*(struct(int,int,int,int))
->	O
year	int
)	O
{	O
mjd	long
+=	O
(	O
(	O
(	O
year	int
-	O
1	int
)	O
/	O
400	int
)	O
-	O
(	O
greg	*(struct(int,int,int,int))
->	O
year	int
/	O
400	int
)	O
)	O
;	O
mjd	long
-=	O
(	O
(	O
(	O
year	int
-	O
1	int
)	O
/	O
100	int
)	O
-	O
(	O
greg	*(struct(int,int,int,int))
->	O
year	int
/	O
100	int
)	O
)	O
;	O
if	O
(	O
!	O
(	O
greg	*(struct(int,int,int,int))
->	O
year	int
%	O
100	int
)	O
&&	O
(	O
greg	*(struct(int,int,int,int))
->	O
year	int
%	O
400	int
)	O
)	O
mjd	long
--	O
;	O
}	O
mjd	long
+=	O
(	O
Ulint	long
)	O
mvec	array(int)
[	O
month	int
-	O
1	int
]	O
;	O
mjd	long
+=	O
day	*(int)
;	O
if	O
(	O
(	O
days_of_february	(int)->(int)
(	O
year	int
)	O
==	O
29	int
)	O
&&	O
(	O
month	int
>	O
2	int
)	O
)	O
mjd	long
++	O
;	O
return	O
(	O
mjd	long
)	O
;	O
}	O
static	O
void	O
num2date	(long,*(int),*(int),*(int))->(void)
(	O
mjd	long
,	O
day	*(int)
,	O
month	int
,	O
year	int
)	O
Ulint	long
mjd	long
;	O
int	O
*	O
day	*(int)
;	O
int	O
*	O
month	int
;	O
int	O
*	O
year	int
;	O
{	O
auto	O
double	O
x	double
;	O
auto	O
Ulint	long
jdays	long
=	O
date2num	(int,int,int)->(long)
(	O
greg	*(struct(int,int,int,int))
->	O
first_day	int
-	O
1	int
,	O
greg	*(struct(int,int,int,int))
->	O
month	int
,	O
greg	*(struct(int,int,int,int))
->	O
year	int
)	O
;	O
register	O
int	O
i	int
;	O
if	O
(	O
mjd	long
>	O
jdays	long
)	O
mjd	long
+=	O
(	O
Ulint	long
)	O
(	O
greg	*(struct(int,int,int,int))
->	O
last_day	int
-	O
greg	*(struct(int,int,int,int))
->	O
first_day	int
+	O
1	int
)	O
;	O
x	double
=	O
(	O
double	O
)	O
mjd	long
/	O
(	O
DAY_LAST	int
+	O
0.25	int
)	O
;	O
i	int
=	O
(	O
int	O
)	O
x	double
;	O
if	O
(	O
(	O
double	O
)	O
i	int
!=	O
x	double
)	O
*	O
year	int
=	O
i	int
+	O
1	int
;	O
else	O
{	O
*	O
year	int
=	O
i	int
;	O
i	int
--	O
;	O
}	O
if	O
(	O
mjd	long
>	O
jdays	long
)	O
{	O
mjd	long
-=	O
(	O
Ulint	long
)	O
(	O
(	O
*	O
year	int
/	O
400	int
)	O
-	O
(	O
greg	*(struct(int,int,int,int))
->	O
year	int
/	O
400	int
)	O
)	O
;	O
mjd	long
+=	O
(	O
Ulint	long
)	O
(	O
(	O
*	O
year	int
/	O
100	int
)	O
-	O
(	O
greg	*(struct(int,int,int,int))
->	O
year	int
/	O
100	int
)	O
)	O
;	O
x	double
=	O
(	O
double	O
)	O
mjd	long
/	O
(	O
DAY_LAST	int
+	O
0.25	int
)	O
;	O
i	int
=	O
(	O
int	O
)	O
x	double
;	O
if	O
(	O
(	O
double	O
)	O
i	int
!=	O
x	double
)	O
*	O
year	int
=	O
i	int
+	O
1	int
;	O
else	O
{	O
*	O
year	int
=	O
i	int
;	O
i	int
--	O
;	O
}	O
if	O
(	O
(	O
*	O
year	int
%	O
400	int
)	O
&&	O
!	O
(	O
*	O
year	int
%	O
100	int
)	O
)	O
mjd	long
--	O
;	O
}	O
i	int
=	O
(	O
int	O
)	O
(	O
mjd	long
-	O
(	O
Ulint	long
)	O
(	O
i	int
*	O
(	O
DAY_LAST	int
+	O
0.25	int
)	O
)	O
)	O
;	O
if	O
(	O
(	O
*	O
year	int
>	O
greg	*(struct(int,int,int,int))
->	O
year	int
)	O
&&	O
(	O
*	O
year	int
%	O
400	int
)	O
&&	O
!	O
(	O
*	O
year	int
%	O
100	int
)	O
&&	O
(	O
i	int
<	O
(	O
(	O
*	O
year	int
/	O
100	int
)	O
-	O
(	O
greg	*(struct(int,int,int,int))
->	O
year	int
/	O
100	int
)	O
)	O
-	O
(	O
(	O
*	O
year	int
/	O
400	int
)	O
-	O
(	O
greg	*(struct(int,int,int,int))
->	O
year	int
/	O
400	int
)	O
)	O
)	O
)	O
i	int
++	O
;	O
(	O
void	O
)	O
doy2date	(int,int,*(int),*(int))->(int)
(	O
i	int
,	O
(	O
days_of_february	(int)->(int)
(	O
*	O
year	int
)	O
==	O
29	int
)	O
,	O
day	*(int)
,	O
month	int
)	O
;	O
}	O
static	O
void	O
get_actual_date	(*(int),*(int),*(int))->(void)
(	O
day	*(int)
,	O
month	int
,	O
year	int
)	O
int	O
*	O
day	*(int)
;	O
int	O
*	O
month	int
;	O
int	O
*	O
year	int
;	O
{	O
auto	O
struct	O
tm	struct(int,int,int,int,int,int,int,int,int,long,*(char))
*	O
sys_date	*(struct(int,int,int,int,int,int,int,int,int,long,*(char)))
;	O
auto	O
MY_TIME_T	O
sys_time	long
;	O
sys_time	long
=	O
time	struct(long,long)
(	O
(	O
MY_TIME_T	O
*	O
)	O
NULL	O
)	O
;	O
sys_date	*(struct(int,int,int,int,int,int,int,int,int,long,*(char)))
=	O
localtime	(*(long))->(*(struct(int,int,int,int,int,int,int,int,int,long,*(char))))
(	O
&	O
sys_time	long
)	O
;	O
*	O
day	*(int)
=	O
sys_date	*(struct(int,int,int,int,int,int,int,int,int,long,*(char)))
->	O
tm_mday	int
;	O
*	O
month	int
=	O
sys_date	*(struct(int,int,int,int,int,int,int,int,int,long,*(char)))
->	O
tm_mon	int
+	O
1	int
;	O
*	O
year	int
=	O
sys_date	*(struct(int,int,int,int,int,int,int,int,int,long,*(char)))
->	O
tm_year	int
;	O
if	O
(	O
*	O
year	int
<	O
CENTURY	int
)	O
*	O
year	int
+=	O
CENTURY	int
;	O
}	O
int	O
main	(int,array(*(char)))->(int)
(	O
argc	int
,	O
argv	array(*(char))
)	O
int	O
argc	int
;	O
char	O
*	O
argv	array(*(char))
[	O
]	O
;	O
{	O
auto	O
Ulint	long
the_date	long
;	O
auto	O
Slint	long
shift_value	long
=	O
(	O
Slint	long
)	O
CHR2DIG	O
(	O
*	O
SHIFT_VALUE_DEFAULT	*(char)
)	O
;	O
register	O
Uint	int
my_argc_max	int
=	O
MY_ARGC_MAX	int
;	O
register	O
int	O
my_argc	int
=	O
0	int
;	O
register	O
int	O
len_year_max	int
;	O
register	O
int	O
i	int
;	O
register	O
int	O
arg_len	int
;	O
register	O
int	O
status	int
;	O
auto	O
int	O
day	*(int)
;	O
auto	O
int	O
month	int
;	O
auto	O
int	O
year	int
;	O
auto	O
char	O
*	O
*	O
my_argv	*(*(char))
=	O
(	O
char	O
*	O
*	O
)	O
NULL	O
;	O
auto	O
char	O
*	O
s1	*(char)
;	O
auto	O
char	O
*	O
gcal_prgr	*(char)
;	O
auto	O
char	O
*	O
ptr_char	*(char)
;	O
auto	O
char	O
*	O
buf_ptr_char	*(char)
;	O
auto	O
Bool	int
shift_value_set	int
=	O
FALSE	O
;	O
auto	O
Bool	int
is_en	int
=	O
FALSE	O
;	O
testval	int
=	O
INT_MAX	O
;	O
assert	O
(	O
MAXLEN_MAX	int
>=	O
1024	int
)	O
;	O
assert	O
(	O
(	O
Uint	int
)	O
MAXLEN_MAX	int
<=	O
testval	int
)	O
;	O
s1	*(char)
=	O
(	O
char	O
*	O
)	O
my_malloc	(int,int,*(char),long,*(char),int)->(*(void))
(	O
MAXLEN_MAX	int
,	O
ERR_NO_MEMORY_AVAILABLE	int
,	O
__FILE__	O
,	O
(	O
(	O
long	O
)	O
__LINE__	O
)	O
-	O
1L	int
,	O
"s1"	*(char)
,	O
0	int
)	O
;	O
sprintf	(*(char),*(char))->(int)
(	O
s1	*(char)
,	O
"%d"	*(char)
,	O
YEAR_MAX	int
)	O
;	O
len_year_max	int
=	O
(	O
int	O
)	O
strlen	(*(char))->(long)
(	O
s1	*(char)
)	O
;	O
assert	O
(	O
len_year_max	int
<	O
11	int
)	O
;	O
assert	O
(	O
len_year_max	int
>	O
0	int
)	O
;	O
assert	O
(	O
YEAR_MAX	int
>=	O
YEAR_MIN	int
)	O
;	O
assert	O
(	O
MONTH_MAX	int
==	O
12	int
)	O
;	O
assert	O
(	O
CENTURY	int
==	O
1900	int
)	O
;	O
assert	O
(	O
strlen	(*(char))->(long)
(	O
PACKAGE_NAME	*(char)
)	O
>	O
0	int
)	O
;	O
assert	O
(	O
strlen	(*(char))->(long)
(	O
PACKAGE_VERSION	*(char)
)	O
>	O
0	int
)	O
;	O
assert	O
(	O
MY_ARGC_MAX	int
>	O
1	int
)	O
;	O
assert	O
(	O
(	O
Uint	int
)	O
MY_ARGC_MAX	int
<=	O
testval	int
)	O
;	O
setlocale	(int,*(char))->(*(char))
(	O
LC_ALL	O
,	O
""	*(char)
)	O
;	O
bindtextdomain	(*(char),*(char))->(*(char))
(	O
PACKAGE	*(char)
,	O
LOCALEDIR	O
)	O
;	O
textdomain	(*(char))->(*(char))
(	O
PACKAGE	*(char)
)	O
;	O
ptr_char	*(char)
=	O
getenv	(*(char))->(*(char))
(	O
ENV_VAR_LANGUAGE	*(char)
)	O
;	O
if	O
(	O
ptr_char	*(char)
!=	O
(	O
char	O
*	O
)	O
NULL	O
)	O
if	O
(	O
!	O
*	O
ptr_char	*(char)
)	O
ptr_char	*(char)
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
if	O
(	O
ptr_char	*(char)
==	O
(	O
char	O
*	O
)	O
NULL	O
)	O
{	O
ptr_char	*(char)
=	O
getenv	(*(char))->(*(char))
(	O
ENV_VAR_LC_ALL	*(char)
)	O
;	O
if	O
(	O
ptr_char	*(char)
!=	O
(	O
char	O
*	O
)	O
NULL	O
)	O
if	O
(	O
!	O
*	O
ptr_char	*(char)
)	O
ptr_char	*(char)
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
}	O
if	O
(	O
ptr_char	*(char)
==	O
(	O
char	O
*	O
)	O
NULL	O
)	O
{	O
ptr_char	*(char)
=	O
getenv	(*(char))->(*(char))
(	O
ENV_VAR_LANG	*(char)
)	O
;	O
if	O
(	O
ptr_char	*(char)
!=	O
(	O
char	O
*	O
)	O
NULL	O
)	O
if	O
(	O
!	O
*	O
ptr_char	*(char)
)	O
ptr_char	*(char)
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
}	O
if	O
(	O
ptr_char	*(char)
!=	O
(	O
char	O
*	O
)	O
NULL	O
)	O
{	O
if	O
(	O
*	O
ptr_char	*(char)
)	O
{	O
strncpy	(*(char),*(char),long)->(*(char))
(	O
s1	*(char)
,	O
ptr_char	*(char)
,	O
6	int
)	O
;	O
s1	*(char)
[	O
5	int
]	O
=	O
'\0'	O
;	O
if	O
(	O
!	O
strncasecmp	(*(char),*(char),long)->(int)
(	O
s1	*(char)
,	O
"en"	*(char)
,	O
2	int
)	O
)	O
is_en	int
=	O
TRUE	O
;	O
else	O
if	O
(	O
!	O
strncasecmp	(*(char),*(char),long)->(int)
(	O
s1	*(char)
,	O
"posix"	*(char)
,	O
5	int
)	O
||	O
!	O
strcasecmp	(*(char),*(char))->(int)
(	O
s1	*(char)
,	O
"c"	*(char)
)	O
)	O
is_en	int
=	O
TRUE	O
;	O
}	O
else	O
is_en	int
=	O
TRUE	O
;	O
}	O
else	O
is_en	int
=	O
TRUE	O
;	O
if	O
(	O
is_en	int
)	O
greg	*(struct(int,int,int,int))
++	O
;	O
i	int
=	O
(	O
int	O
)	O
strlen	(*(char))->(long)
(	O
*	O
argv	array(*(char))
)	O
;	O
if	O
(	O
(	O
Uint	int
)	O
i	int
>=	O
maxlen_max	int
)	O
s1	*(char)
=	O
my_realloc	(*(void),int,int,*(char),long,*(char),int)->(*(void))
(	O
(	O
VOID_PTR	O
)	O
s1	*(char)
,	O
i	int
+	O
1	int
,	O
ERR_NO_MEMORY_AVAILABLE	int
,	O
__FILE__	O
,	O
(	O
(	O
long	O
)	O
__LINE__	O
)	O
-	O
2L	int
,	O
"s1"	*(char)
,	O
i	int
+	O
1	int
)	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
s1	*(char)
,	O
*	O
argv	array(*(char))
)	O
;	O
i	int
=	O
(	O
int	O
)	O
strlen	(*(char))->(long)
(	O
s1	*(char)
)	O
;	O
ptr_char	*(char)
=	O
strrchr	(*(char),int)->(*(char))
(	O
s1	*(char)
,	O
*	O
DIR_SEP	*(char)
)	O
;	O
if	O
(	O
ptr_char	*(char)
!=	O
(	O
char	O
*	O
)	O
NULL	O
)	O
{	O
ptr_char	*(char)
++	O
;	O
i	int
=	O
(	O
int	O
)	O
strlen	(*(char))->(long)
(	O
ptr_char	*(char)
)	O
;	O
}	O
else	O
ptr_char	*(char)
=	O
s1	*(char)
;	O
if	O
(	O
tolower	(int)->(int)
(	O
'A'	O
)	O
==	O
'a'	O
)	O
{	O
buf_ptr_char	*(char)
=	O
ptr_char	*(char)
;	O
for	O
(	O
;	O
*	O
ptr_char	*(char)
;	O
ptr_char	*(char)
++	O
)	O
*	O
ptr_char	*(char)
=	O
(	O
char	O
)	O
tolower	(int)->(int)
(	O
*	O
ptr_char	*(char)
)	O
;	O
ptr_char	*(char)
=	O
buf_ptr_char	*(char)
;	O
}	O
if	O
(	O
(	O
i	int
>	O
4	int
)	O
&&	O
!	O
strcmp	(*(char),*(char))->(int)
(	O
ptr_char	*(char)
+	O
i	int
-	O
4	int
,	O
".exe"	*(char)
)	O
)	O
{	O
i	int
-=	O
4	int
;	O
*	O
(	O
ptr_char	*(char)
+	O
i	int
)	O
=	O
'\0'	O
;	O
}	O
prgr_name	*(char)
=	O
(	O
char	O
*	O
)	O
my_malloc	(int,int,*(char),long,*(char),int)->(*(void))
(	O
i	int
+	O
1	int
,	O
ERR_NO_MEMORY_AVAILABLE	int
,	O
__FILE__	O
,	O
(	O
(	O
long	O
)	O
__LINE__	O
)	O
-	O
1L	int
,	O
"prgr_name"	*(char)
,	O
0	int
)	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
prgr_name	*(char)
,	O
ptr_char	*(char)
)	O
;	O
if	O
(	O
signal	(int,*((int)->(void)))->(*((int)->(void)))
(	O
SIGINT	int
,	O
SIG_IGN	O
)	O
!=	O
SIG_IGN	O
)	O
(	O
void	O
)	O
signal	(int,*((int)->(void)))->(*((int)->(void)))
(	O
SIGINT	int
,	O
(	O
Sig_type	*((int)->(void))
)	O
handle_signal	(int)->(void)
)	O
;	O
if	O
(	O
signal	(int,*((int)->(void)))->(*((int)->(void)))
(	O
SIGTERM	int
,	O
SIG_IGN	O
)	O
!=	O
SIG_IGN	O
)	O
(	O
void	O
)	O
signal	(int,*((int)->(void)))->(*((int)->(void)))
(	O
SIGTERM	int
,	O
(	O
Sig_type	*((int)->(void))
)	O
handle_signal	(int)->(void)
)	O
;	O
if	O
(	O
signal	(int,*((int)->(void)))->(*((int)->(void)))
(	O
SIGHUP	int
,	O
SIG_IGN	O
)	O
!=	O
SIG_IGN	O
)	O
(	O
void	O
)	O
signal	(int,*((int)->(void)))->(*((int)->(void)))
(	O
SIGHUP	int
,	O
(	O
Sig_type	*((int)->(void))
)	O
handle_signal	(int)->(void)
)	O
;	O
buf_ptr_char	*(char)
=	O
SHIFT_VALUE_DEFAULT	*(char)
;	O
if	O
(	O
argc	int
>	O
1	int
)	O
{	O
arg_len	int
=	O
(	O
int	O
)	O
strlen	(*(char))->(long)
(	O
argv	array(*(char))
[	O
1	int
]	O
)	O
-	O
2	int
;	O
if	O
(	O
(	O
arg_len	int
>	O
0	int
)	O
&&	O
(	O
*	O
argv	array(*(char))
[	O
1	int
]	O
==	O
*	O
SWITCH	*(char)
)	O
&&	O
(	O
*	O
(	O
argv	array(*(char))
[	O
1	int
]	O
+	O
1	int
)	O
==	O
*	O
SWITCH	*(char)
)	O
)	O
{	O
auto	O
Bool	int
is_number	int
=	O
TRUE	O
;	O
if	O
(	O
!	O
strncasecmp	(*(char),*(char),long)->(int)
(	O
argv	array(*(char))
[	O
1	int
]	O
+	O
2	int
,	O
help_option_name	*(char)
,	O
arg_len	int
)	O
)	O
usage_msg	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char),int)->(void)
(	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
prgr_name	*(char)
,	O
EXIT_SUCCESS	int
)	O
;	O
if	O
(	O
!	O
strncasecmp	(*(char),*(char),long)->(int)
(	O
argv	array(*(char))
[	O
1	int
]	O
+	O
2	int
,	O
version_option_name	*(char)
,	O
arg_len	int
)	O
)	O
version_msg	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char),int)->(void)
(	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
prgr_name	*(char)
,	O
EXIT_SUCCESS	int
)	O
;	O
if	O
(	O
!	O
strncasecmp	(*(char),*(char),long)->(int)
(	O
argv	array(*(char))
[	O
1	int
]	O
+	O
2	int
,	O
shift_option_name	*(char)
,	O
3	int
)	O
)	O
{	O
ptr_char	*(char)
=	O
strchr	(*(char),int)->(*(char))
(	O
argv	array(*(char))
[	O
1	int
]	O
+	O
2	int
,	O
*	O
LARG_SEP	*(char)
)	O
;	O
if	O
(	O
ptr_char	*(char)
!=	O
(	O
char	O
*	O
)	O
NULL	O
)	O
i	int
=	O
(	O
int	O
)	O
(	O
ptr_char	*(char)
-	O
(	O
argv	array(*(char))
[	O
1	int
]	O
+	O
2	int
)	O
)	O
;	O
else	O
i	int
=	O
arg_len	int
;	O
switch	O
(	O
i	int
)	O
{	O
case	O
3	int
:	O
case	O
4	int
:	O
case	O
5	int
:	O
if	O
(	O
!	O
strncasecmp	(*(char),*(char),long)->(int)
(	O
argv	array(*(char))
[	O
1	int
]	O
+	O
2	int
,	O
shift_option_name	*(char)
,	O
i	int
)	O
)	O
break	O
;	O
default	O
:	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
_	O
(	O
"%s: unrecognized option `%s'"	*(char)
)	O
,	O
prgr_name	*(char)
,	O
argv	array(*(char))
[	O
1	int
]	O
)	O
;	O
S_NEWLINE	O
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
usage_msg	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char),int)->(void)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
prgr_name	*(char)
,	O
ERR_INVALID_OPTION	int
)	O
;	O
}	O
if	O
(	O
ptr_char	*(char)
==	O
(	O
char	O
*	O
)	O
NULL	O
||	O
(	O
(	O
ptr_char	*(char)
!=	O
(	O
char	O
*	O
)	O
NULL	O
)	O
&&	O
!	O
*	O
(	O
ptr_char	*(char)
+	O
1	int
)	O
)	O
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
_	O
(	O
"%s: option `--%s' requires an argument"	*(char)
)	O
,	O
prgr_name	*(char)
,	O
shift_option_name	*(char)
)	O
;	O
S_NEWLINE	O
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
usage_msg	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char),int)->(void)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
prgr_name	*(char)
,	O
ERR_INVALID_OPTION	int
)	O
;	O
}	O
else	O
{	O
ptr_char	*(char)
++	O
;	O
shift_value	long
=	O
atol	(*(char))->(long)
(	O
ptr_char	*(char)
)	O
;	O
buf_ptr_char	*(char)
=	O
ptr_char	*(char)
;	O
if	O
(	O
*	O
ptr_char	*(char)
==	O
'+'	O
||	O
*	O
ptr_char	*(char)
==	O
'-'	O
)	O
ptr_char	*(char)
++	O
;	O
if	O
(	O
!	O
*	O
ptr_char	*(char)
)	O
is_number	int
=	O
FALSE	O
;	O
else	O
{	O
while	O
(	O
isdigit	(int)->(int)
(	O
*	O
ptr_char	*(char)
)	O
)	O
ptr_char	*(char)
++	O
;	O
if	O
(	O
*	O
ptr_char	*(char)
)	O
is_number	int
=	O
FALSE	O
;	O
}	O
if	O
(	O
!	O
is_number	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
_	O
(	O
"%s: option with invalid argument -- %s"	*(char)
)	O
,	O
prgr_name	*(char)
,	O
argv	array(*(char))
[	O
1	int
]	O
)	O
;	O
S_NEWLINE	O
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
usage_msg	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char),int)->(void)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
prgr_name	*(char)
,	O
ERR_INVALID_OPTION	int
)	O
;	O
}	O
shift_value_set	int
=	O
TRUE	O
;	O
}	O
}	O
}	O
}	O
gcal_prgr	*(char)
=	O
getenv	(*(char))->(*(char))
(	O
ENV_VAR_GCALPROG	*(char)
)	O
;	O
if	O
(	O
gcal_prgr	*(char)
!=	O
(	O
char	O
*	O
)	O
NULL	O
)	O
{	O
if	O
(	O
!	O
*	O
gcal_prgr	*(char)
)	O
gcal_prgr	*(char)
=	O
PACKAGE_NAME	*(char)
;	O
}	O
else	O
gcal_prgr	*(char)
=	O
PACKAGE_NAME	*(char)
;	O
get_actual_date	(*(int),*(int),*(int))->(void)
(	O
&	O
day	*(int)
,	O
&	O
month	int
,	O
&	O
year	int
)	O
;	O
the_date	long
=	O
date2num	(int,int,int)->(long)
(	O
day	*(int)
,	O
month	int
,	O
year	int
)	O
;	O
if	O
(	O
(	O
Slint	long
)	O
the_date	long
+	O
shift_value	long
<=	O
0L	int
||	O
(	O
Slint	long
)	O
the_date	long
+	O
shift_value	long
>	O
(	O
Slint	long
)	O
date2num	(int,int,int)->(long)
(	O
dvec	array(int)
[	O
MONTH_MAX	int
-	O
1	int
]	O
,	O
MONTH_MAX	int
,	O
YEAR_MAX	int
)	O
)	O
my_error	(int,*(char),long,*(char),int)->(void)
(	O
EXIT_FATAL	int
,	O
""	*(char)
,	O
0L	int
,	O
buf_ptr_char	*(char)
,	O
0	int
)	O
;	O
num2date	(long,*(int),*(int),*(int))->(void)
(	O
(	O
Ulint	long
)	O
the_date	long
+	O
shift_value	long
,	O
&	O
day	*(int)
,	O
&	O
month	int
,	O
&	O
year	int
)	O
;	O
my_argv	*(*(char))
=	O
(	O
char	O
*	O
*	O
)	O
my_malloc	(int,int,*(char),long,*(char),int)->(*(void))
(	O
MY_ARGC_MAX	int
*	O
sizeof	O
(	O
char	O
*	O
)	O
,	O
ERR_NO_MEMORY_AVAILABLE	int
,	O
__FILE__	O
,	O
(	O
(	O
long	O
)	O
__LINE__	O
)	O
-	O
2L	int
,	O
"my_argv[MY_ARGC_MAX]"	*(char)
,	O
MY_ARGC_MAX	int
)	O
;	O
my_argv	*(*(char))
[	O
my_argc	int
]	O
=	O
(	O
char	O
*	O
)	O
my_malloc	(int,int,*(char),long,*(char),int)->(*(void))
(	O
strlen	(*(char))->(long)
(	O
gcal_prgr	*(char)
)	O
+	O
1	int
,	O
ERR_NO_MEMORY_AVAILABLE	int
,	O
__FILE__	O
,	O
(	O
(	O
long	O
)	O
__LINE__	O
)	O
-	O
2L	int
,	O
"my_argv[my_argc]"	*(char)
,	O
my_argc	int
)	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
my_argv	*(*(char))
[	O
my_argc	int
++	O
]	O
,	O
gcal_prgr	*(char)
)	O
;	O
sprintf	(*(char),*(char))->(int)
(	O
s1	*(char)
,	O
"%c%0*d%02d%02d"	*(char)
,	O
RC_ADATE_CHAR	char
,	O
len_year_max	int
,	O
year	int
,	O
month	int
,	O
day	*(int)
)	O
;	O
my_argv	*(*(char))
[	O
my_argc	int
]	O
=	O
(	O
char	O
*	O
)	O
my_malloc	(int,int,*(char),long,*(char),int)->(*(void))
(	O
strlen	(*(char))->(long)
(	O
s1	*(char)
)	O
+	O
1	int
,	O
ERR_NO_MEMORY_AVAILABLE	int
,	O
__FILE__	O
,	O
(	O
(	O
long	O
)	O
__LINE__	O
)	O
-	O
1L	int
,	O
"my_argv[my_argc]"	*(char)
,	O
my_argc	int
)	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
my_argv	*(*(char))
[	O
my_argc	int
++	O
]	O
,	O
s1	*(char)
)	O
;	O
if	O
(	O
shift_value_set	int
)	O
{	O
argc	int
--	O
;	O
argv	array(*(char))
++	O
;	O
}	O
while	O
(	O
argc	int
>	O
1	int
)	O
{	O
argv	array(*(char))
++	O
;	O
if	O
(	O
(	O
Uint	int
)	O
my_argc	int
>=	O
my_argc_max	int
)	O
{	O
my_argc_max	int
<<=	O
1	int
;	O
if	O
(	O
my_argc_max	int
*	O
sizeof	O
(	O
char	O
*	O
)	O
>	O
testval	int
)	O
my_argc_max	int
--	O
;	O
my_argv	*(*(char))
=	O
(	O
char	O
*	O
*	O
)	O
my_realloc	(*(void),int,int,*(char),long,*(char),int)->(*(void))
(	O
(	O
VOID_PTR	O
)	O
my_argv	*(*(char))
,	O
my_argc_max	int
*	O
sizeof	O
(	O
char	O
*	O
)	O
,	O
ERR_NO_MEMORY_AVAILABLE	int
,	O
__FILE__	O
,	O
(	O
(	O
long	O
)	O
__LINE__	O
)	O
-	O
3L	int
,	O
"my_argv[my_argc_max]"	*(char)
,	O
my_argc_max	int
)	O
;	O
}	O
my_argv	*(*(char))
[	O
my_argc	int
]	O
=	O
(	O
char	O
*	O
)	O
my_malloc	(int,int,*(char),long,*(char),int)->(*(void))
(	O
strlen	(*(char))->(long)
(	O
*	O
argv	array(*(char))
)	O
+	O
1	int
,	O
ERR_NO_MEMORY_AVAILABLE	int
,	O
__FILE__	O
,	O
(	O
(	O
long	O
)	O
__LINE__	O
)	O
-	O
2L	int
,	O
"my_argv[my_argc]"	*(char)
,	O
my_argc	int
)	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
my_argv	*(*(char))
[	O
my_argc	int
++	O
]	O
,	O
*	O
argv	array(*(char))
)	O
;	O
argc	int
--	O
;	O
}	O
if	O
(	O
(	O
Uint	int
)	O
my_argc	int
>=	O
my_argc_max	int
)	O
{	O
my_argc_max	int
<<=	O
1	int
;	O
if	O
(	O
my_argc_max	int
*	O
sizeof	O
(	O
char	O
*	O
)	O
>	O
testval	int
)	O
my_argc_max	int
--	O
;	O
my_argv	*(*(char))
=	O
(	O
char	O
*	O
*	O
)	O
my_realloc	(*(void),int,int,*(char),long,*(char),int)->(*(void))
(	O
(	O
VOID_PTR	O
)	O
my_argv	*(*(char))
,	O
my_argc_max	int
*	O
sizeof	O
(	O
char	O
*	O
)	O
,	O
ERR_NO_MEMORY_AVAILABLE	int
,	O
__FILE__	O
,	O
(	O
(	O
long	O
)	O
__LINE__	O
)	O
-	O
3L	int
,	O
"my_argv[my_argc_max]"	*(char)
,	O
my_argc_max	int
)	O
;	O
}	O
my_argv	*(*(char))
[	O
my_argc	int
]	O
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
status	int
=	O
execvp	(*(char),array(*(char)))->(int)
(	O
gcal_prgr	*(char)
,	O
my_argv	*(*(char))
)	O
;	O
if	O
(	O
status	int
==	O
-	O
1	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
_	O
(	O
"%s: error during program execution of `%s'\n"	*(char)
)	O
,	O
prgr_name	*(char)
,	O
gcal_prgr	*(char)
)	O
;	O
perror	(*(char))->(void)
(	O
gcal_prgr	*(char)
)	O
;	O
exit	(int)->(void)
(	O
ERR_EXTERNAL_CMD_FAILURE	int
)	O
;	O
}	O
exit	(int)->(void)
(	O
status	int
)	O
;	O
}	O
