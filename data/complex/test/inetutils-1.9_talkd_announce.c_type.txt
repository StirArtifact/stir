extern	O
char	O
*	O
ttymsg	(*(struct(*(void),long)),int,*(char),int)->(*(char))
(	O
struct	O
iovec	struct(*(void),long)
*	O
iov	*(struct(*(void),long))
,	O
int	O
iovcnt	int
,	O
char	O
*	O
line	*(char)
,	O
int	O
tmout	int
)	O
;	O
typedef	O
struct	O
{	O
int	O
ind	int
;	O
int	O
max_size	int
;	O
char	O
line	*(char)
[	O
N_LINES	int
]	O
[	O
N_CHARS	int
]	O
;	O
int	O
size	array(int)
[	O
N_LINES	int
]	O
;	O
char	O
buf	array(char)
[	O
N_LINES	int
*	O
N_CHARS	int
+	O
3	int
]	O
;	O
}	O
LINE	struct(int,int,array(array(char)),array(int),array(char))
;	O
static	O
void	O
init_line	(*(struct(int,int,array(array(char)),array(int),array(char))))->(void)
(	O
LINE	struct(int,int,array(array(char)),array(int),array(char))
*	O
lp	*(struct(int,int,array(array(char)),array(int),array(char)))
)	O
{	O
memset	(*(void),int,long)->(*(void))
(	O
lp	*(struct(int,int,array(array(char)),array(int),array(char)))
,	O
0	int
,	O
sizeof	O
*	O
lp	*(struct(int,int,array(array(char)),array(int),array(char)))
)	O
;	O
}	O
static	O
void	O
format_line	(*(struct(int,int,array(array(char)),array(int),array(char))),*(char))->(void)
(	O
LINE	struct(int,int,array(array(char)),array(int),array(char))
*	O
lp	*(struct(int,int,array(array(char)),array(int),array(char)))
,	O
const	O
char	O
*	O
fmt	*(char)
,	O
...	O
)	O
{	O
va_list	array(struct(int,int,*(void),*(void)))
ap	array(struct(int,int,*(void),*(void)))
;	O
int	O
i	int
=	O
lp	*(struct(int,int,array(array(char)),array(int),array(char)))
->	O
ind	int
;	O
if	O
(	O
lp	*(struct(int,int,array(array(char)),array(int),array(char)))
->	O
ind	int
>=	O
N_LINES	int
)	O
return	O
;	O
lp	*(struct(int,int,array(array(char)),array(int),array(char)))
->	O
ind	int
++	O
;	O
va_start	O
(	O
ap	array(struct(int,int,*(void),*(void)))
,	O
fmt	*(char)
)	O
;	O
lp	*(struct(int,int,array(array(char)),array(int),array(char)))
->	O
size	array(int)
[	O
i	int
]	O
=	O
vsnprintf	(*(char),long,*(char),array(struct(int,int,*(void),*(void))))->(int)
(	O
lp	*(struct(int,int,array(array(char)),array(int),array(char)))
->	O
line	*(char)
[	O
i	int
]	O
,	O
sizeof	O
lp	*(struct(int,int,array(array(char)),array(int),array(char)))
->	O
line	*(char)
[	O
i	int
]	O
,	O
fmt	*(char)
,	O
ap	array(struct(int,int,*(void),*(void)))
)	O
;	O
lp	*(struct(int,int,array(array(char)),array(int),array(char)))
->	O
max_size	int
=	O
MAX	O
(	O
lp	*(struct(int,int,array(array(char)),array(int),array(char)))
->	O
max_size	int
,	O
lp	*(struct(int,int,array(array(char)),array(int),array(char)))
->	O
size	array(int)
[	O
i	int
]	O
)	O
;	O
va_end	O
(	O
ap	array(struct(int,int,*(void),*(void)))
)	O
;	O
}	O
static	O
char	O
*	O
finish_line	(*(struct(int,int,array(array(char)),array(int),array(char))))->(*(char))
(	O
LINE	struct(int,int,array(array(char)),array(int),array(char))
*	O
lp	*(struct(int,int,array(array(char)),array(int),array(char)))
)	O
{	O
int	O
i	int
;	O
char	O
*	O
p	*(char)
;	O
p	*(char)
=	O
lp	*(struct(int,int,array(array(char)),array(int),array(char)))
->	O
buf	array(char)
;	O
*	O
p	*(char)
++	O
=	O
'\a'	O
;	O
*	O
p	*(char)
++	O
=	O
'\r'	O
;	O
*	O
p	*(char)
++	O
=	O
'\n'	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
lp	*(struct(int,int,array(array(char)),array(int),array(char)))
->	O
ind	int
;	O
i	int
++	O
)	O
{	O
char	O
*	O
q	*(char)
;	O
int	O
j	int
;	O
for	O
(	O
q	*(char)
=	O
lp	*(struct(int,int,array(array(char)),array(int),array(char)))
->	O
line	*(char)
[	O
i	int
]	O
;	O
*	O
q	*(char)
;	O
q	*(char)
++	O
)	O
*	O
p	*(char)
++	O
=	O
*	O
q	*(char)
;	O
for	O
(	O
j	int
=	O
lp	*(struct(int,int,array(array(char)),array(int),array(char)))
->	O
size	array(int)
[	O
i	int
]	O
;	O
j	int
<	O
lp	*(struct(int,int,array(array(char)),array(int),array(char)))
->	O
max_size	int
+	O
2	int
;	O
j	int
++	O
)	O
*	O
p	*(char)
++	O
=	O
' '	O
;	O
*	O
p	*(char)
++	O
=	O
'\r'	O
;	O
*	O
p	*(char)
++	O
=	O
'\n'	O
;	O
}	O
*	O
p	*(char)
=	O
0	int
;	O
return	O
lp	*(struct(int,int,array(array(char)),array(int),array(char)))
->	O
buf	array(char)
;	O
}	O
static	O
int	O
print_mesg	(*(char),*(struct(char,char,char,char,int,struct(short,array(char)),struct(short,array(char)),int,array(char),array(char),array(char))),*(char))->(int)
(	O
char	O
*	O
tty	*(char)
,	O
CTL_MSG	struct(char,char,char,char,int,struct(short,array(char)),struct(short,array(char)),int,array(char),array(char),array(char))
*	O
request	*(struct(char,char,char,char,int,struct(short,array(char)),struct(short,array(char)),int,array(char),array(char),array(char)))
,	O
char	O
*	O
remote_machine	*(char)
)	O
{	O
time_t	long
t	long
;	O
LINE	struct(int,int,array(array(char)),array(int),array(char))
ln	struct(int,int,array(array(char)),array(int),array(char))
;	O
char	O
*	O
buf	array(char)
;	O
struct	O
tm	struct(int,int,int,int,int,int,int,int,int,long,*(char))
*	O
tm	struct(int,int,int,int,int,int,int,int,int,long,*(char))
;	O
struct	O
iovec	struct(*(void),long)
iovec	struct(*(void),long)
;	O
char	O
*	O
cp	*(char)
;	O
time	struct(long,long)
(	O
&	O
t	long
)	O
;	O
tm	struct(int,int,int,int,int,int,int,int,int,long,*(char))
=	O
localtime	(*(long))->(*(struct(int,int,int,int,int,int,int,int,int,long,*(char))))
(	O
&	O
t	long
)	O
;	O
init_line	(*(struct(int,int,array(array(char)),array(int),array(char))))->(void)
(	O
&	O
ln	struct(int,int,array(array(char)),array(int),array(char))
)	O
;	O
format_line	(*(struct(int,int,array(array(char)),array(int),array(char))),*(char))->(void)
(	O
&	O
ln	struct(int,int,array(array(char)),array(int),array(char))
,	O
""	*(char)
)	O
;	O
format_line	(*(struct(int,int,array(array(char)),array(int),array(char))),*(char))->(void)
(	O
&	O
ln	struct(int,int,array(array(char)),array(int),array(char))
,	O
"Message from Talk_Daemon@%s at %d:%02d ..."	*(char)
,	O
hostname	*(char)
,	O
tm	struct(int,int,int,int,int,int,int,int,int,long,*(char))
->	O
tm_hour	int
,	O
tm	struct(int,int,int,int,int,int,int,int,int,long,*(char))
->	O
tm_min	int
)	O
;	O
format_line	(*(struct(int,int,array(array(char)),array(int),array(char))),*(char))->(void)
(	O
&	O
ln	struct(int,int,array(array(char)),array(int),array(char))
,	O
"talk: connection requested by %s@%s"	*(char)
,	O
request	*(struct(char,char,char,char,int,struct(short,array(char)),struct(short,array(char)),int,array(char),array(char),array(char)))
->	O
l_name	array(char)
,	O
remote_machine	*(char)
)	O
;	O
format_line	(*(struct(int,int,array(array(char)),array(int),array(char))),*(char))->(void)
(	O
&	O
ln	struct(int,int,array(array(char)),array(int),array(char))
,	O
"talk: respond with:  talk %s@%s"	*(char)
,	O
request	*(struct(char,char,char,char,int,struct(short,array(char)),struct(short,array(char)),int,array(char),array(char),array(char)))
->	O
l_name	array(char)
,	O
remote_machine	*(char)
)	O
;	O
format_line	(*(struct(int,int,array(array(char)),array(int),array(char))),*(char))->(void)
(	O
&	O
ln	struct(int,int,array(array(char)),array(int),array(char))
,	O
""	*(char)
)	O
;	O
format_line	(*(struct(int,int,array(array(char)),array(int),array(char))),*(char))->(void)
(	O
&	O
ln	struct(int,int,array(array(char)),array(int),array(char))
,	O
""	*(char)
)	O
;	O
buf	array(char)
=	O
finish_line	(*(struct(int,int,array(array(char)),array(int),array(char))))->(*(char))
(	O
&	O
ln	struct(int,int,array(array(char)),array(int),array(char))
)	O
;	O
iovec	struct(*(void),long)
.	O
iov_base	*(void)
=	O
buf	array(char)
;	O
iovec	struct(*(void),long)
.	O
iov_len	long
=	O
strlen	(*(char))->(long)
(	O
buf	array(char)
)	O
;	O
if	O
(	O
(	O
cp	*(char)
=	O
ttymsg	(*(struct(*(void),long)),int,*(char),int)->(*(char))
(	O
&	O
iovec	struct(*(void),long)
,	O
1	int
,	O
tty	*(char)
,	O
RING_WAIT	int
-	O
5	int
)	O
)	O
!=	O
NULL	O
)	O
{	O
syslog	(int,*(char))->(void)
(	O
LOG_CRIT	int
,	O
"%s"	*(char)
,	O
cp	*(char)
)	O
;	O
return	O
FAILED	int
;	O
}	O
return	O
SUCCESS	int
;	O
}	O
int	O
announce	(*(struct(char,char,char,char,int,struct(short,array(char)),struct(short,array(char)),int,array(char),array(char),array(char))),*(char))->(int)
(	O
CTL_MSG	struct(char,char,char,char,int,struct(short,array(char)),struct(short,array(char)),int,array(char),array(char),array(char))
*	O
request	*(struct(char,char,char,char,int,struct(short,array(char)),struct(short,array(char)),int,array(char),array(char),array(char)))
,	O
char	O
*	O
remote_machine	*(char)
)	O
{	O
char	O
*	O
ttypath	*(char)
;	O
int	O
len	int
;	O
struct	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
st	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
;	O
int	O
rc	int
;	O
len	int
=	O
sizeof	O
(	O
PATH_DEV	O
)	O
+	O
strlen	(*(char))->(long)
(	O
request	*(struct(char,char,char,char,int,struct(short,array(char)),struct(short,array(char)),int,array(char),array(char),array(char)))
->	O
r_tty	array(char)
)	O
+	O
2	int
;	O
ttypath	*(char)
=	O
malloc	(long)->(*(void))
(	O
len	int
)	O
;	O
if	O
(	O
!	O
ttypath	*(char)
)	O
{	O
syslog	(int,*(char))->(void)
(	O
LOG_CRIT	int
,	O
"out of memory"	*(char)
)	O
;	O
exit	(int)->(void)
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
sprintf	(*(char),*(char))->(int)
(	O
ttypath	*(char)
,	O
"%s/%s"	*(char)
,	O
PATH_DEV	O
,	O
request	*(struct(char,char,char,char,int,struct(short,array(char)),struct(short,array(char)),int,array(char),array(char),array(char)))
->	O
r_tty	array(char)
)	O
;	O
rc	int
=	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
(	O
ttypath	*(char)
,	O
&	O
st	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
)	O
;	O
free	(*(void))->(void)
(	O
ttypath	*(char)
)	O
;	O
if	O
(	O
rc	int
<	O
0	int
||	O
(	O
st	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_mode	int
&	O
S_IWGRP	O
)	O
==	O
0	int
)	O
return	O
PERMISSION_DENIED	int
;	O
return	O
print_mesg	(*(char),*(struct(char,char,char,char,int,struct(short,array(char)),struct(short,array(char)),int,array(char),array(char),array(char))),*(char))->(int)
(	O
request	*(struct(char,char,char,char,int,struct(short,array(char)),struct(short,array(char)),int,array(char),array(char),array(char)))
->	O
r_tty	array(char)
,	O
request	*(struct(char,char,char,char,int,struct(short,array(char)),struct(short,array(char)),int,array(char),array(char),array(char)))
,	O
remote_machine	*(char)
)	O
;	O
}	O
