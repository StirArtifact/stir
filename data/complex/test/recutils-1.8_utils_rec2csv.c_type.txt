static	O
void	O
rec2csv_parse_args	(int,*(*(char)))->(void)
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	*(*(char))
)	O
;	O
static	O
bool	bool
rec2csv_process_data	(*(struct))->(bool)
(	O
rec_db_t	*(struct)
db	*(struct)
)	O
;	O
static	O
rec_fex_t	*(struct)
rec2csv_determine_fields	(*(struct))->(*(struct))
(	O
rec_rset_t	*(struct)
rset	*(struct)
)	O
;	O
static	O
void	O
rec2csv_generate_csv	(*(struct),*(struct))->(void)
(	O
rec_rset_t	*(struct)
rset	*(struct)
,	O
rec_fex_t	*(struct)
fex	*(struct)
)	O
;	O
char	O
*	O
rec2csv_record_type	*(char)
=	O
NULL	O
;	O
rec_fex_t	*(struct)
rec2csv_sort_by_fields	*(struct)
=	O
NULL	O
;	O
char	O
rec2csv_delim	char
=	O
','	O
;	O
enum	O
{	O
COMMON_ARGS	O
,	O
RECORD_TYPE_ARG	int
,	O
SORT_ARG	int
}	O
;	O
static	O
const	O
struct	O
option	struct(*(char),int,*(int),int)
GNU_longOptions	array(struct(*(char),int,*(int),int))
[	O
]	O
=	O
{	O
COMMON_LONG_ARGS	O
,	O
{	O
"type"	*(char)
,	O
required_argument	int
,	O
NULL	O
,	O
RECORD_TYPE_ARG	int
}	O
,	O
{	O
"sort"	*(char)
,	O
required_argument	int
,	O
NULL	O
,	O
SORT_ARG	int
}	O
,	O
{	O
NULL	O
,	O
0	int
,	O
NULL	O
,	O
0	int
}	O
}	O
;	O
void	O
recutl_print_help	()->(void)
(	O
void	O
)	O
{	O
printf	(*(char))->(int)
(	O
_	O
(	O
"Usage: rec2csv [OPTIONS]... [REC_FILE]\n"	*(char)
)	O
)	O
;	O
fputs	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
_	O
(	O
"Convert rec data into csv data.\n"	*(char)
)	O
,	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
puts	(*(char))->(int)
(	O
""	*(char)
)	O
;	O
fputs	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
_	O
(	O
"  -d, --delim=char                    sets the deliminator (default ',')\n  -t, --type=TYPE                     record set to convert to csv; if this parameter\n                                        is omitted then the default record set is used\n  -S, --sort=FIELDS                   sort the output by the specified fields.\n"	*(char)
)	O
,	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
recutl_print_help_common	()->(void)
(	O
)	O
;	O
puts	(*(char))->(int)
(	O
""	*(char)
)	O
;	O
recutl_print_help_footer	()->(void)
(	O
)	O
;	O
}	O
static	O
void	O
rec2csv_parse_args	(int,*(*(char)))->(void)
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	*(*(char))
)	O
{	O
int	O
ret	int
;	O
char	O
c	char
;	O
while	O
(	O
(	O
ret	int
=	O
getopt_long	(int,*(*(char)),*(char),*(struct(*(char),int,*(int),int)),*(int))->(int)
(	O
argc	int
,	O
argv	*(*(char))
,	O
"t:S:d:"	*(char)
,	O
GNU_longOptions	array(struct(*(char),int,*(int),int))
,	O
NULL	O
)	O
)	O
!=	O
-	O
1	int
)	O
{	O
c	char
=	O
ret	int
;	O
switch	O
(	O
c	char
)	O
{	O
COMMON_ARGS_CASES	O
case	O
RECORD_TYPE_ARG	int
:	O
case	O
'd'	O
:	O
{	O
rec2csv_delim	char
=	O
optarg	*(char)
[	O
0	int
]	O
;	O
break	O
;	O
}	O
case	O
't'	O
:	O
{	O
rec2csv_record_type	*(char)
=	O
xstrdup	(*(char))->(*(char))
(	O
optarg	*(char)
)	O
;	O
break	O
;	O
}	O
case	O
SORT_ARG	int
:	O
case	O
'S'	O
:	O
{	O
if	O
(	O
rec2csv_sort_by_fields	*(struct)
)	O
{	O
recutl_fatal	(*(char))->(void)
(	O
_	O
(	O
"only one list of fields can be specified as a sorting criteria.\n"	*(char)
)	O
)	O
;	O
}	O
if	O
(	O
!	O
rec_fex_check	(*(char),enum(int,int,int))->(bool)
(	O
optarg	*(char)
,	O
REC_FEX_CSV	int
)	O
)	O
{	O
recutl_fatal	(*(char))->(void)
(	O
_	O
(	O
"invalid field name list in -S.\n"	*(char)
)	O
)	O
;	O
}	O
rec2csv_sort_by_fields	*(struct)
=	O
rec_fex_new	(*(char),enum(int,int,int))->(*(struct))
(	O
optarg	*(char)
,	O
REC_FEX_CSV	int
)	O
;	O
if	O
(	O
!	O
rec2csv_sort_by_fields	*(struct)
)	O
{	O
recutl_fatal	(*(char))->(void)
(	O
_	O
(	O
"internal error creating fex.\n"	*(char)
)	O
)	O
;	O
}	O
break	O
;	O
}	O
default	O
:	O
{	O
exit	(int)->(void)
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
}	O
}	O
}	O
static	O
void	O
rec2csv_generate_csv	(*(struct),*(struct))->(void)
(	O
rec_rset_t	*(struct)
rset	*(struct)
,	O
rec_fex_t	*(struct)
fex	*(struct)
)	O
{	O
rec_mset_iterator_t	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
iter	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
;	O
rec_fex_elem_t	*(struct)
fex_elem	*(struct)
;	O
rec_record_t	*(struct)
record	*(struct)
;	O
rec_field_t	*(struct)
field	*(struct)
;	O
char	O
*	O
field_name	*(char)
;	O
char	O
*	O
tmp	*(char)
;	O
size_t	long
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
rec_fex_size	(*(struct))->(long)
(	O
fex	*(struct)
)	O
;	O
i	long
++	O
)	O
{	O
if	O
(	O
i	long
!=	O
0	int
)	O
{	O
putc	(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
rec2csv_delim	char
,	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
}	O
fex_elem	*(struct)
=	O
rec_fex_get	(*(struct),long)->(*(struct))
(	O
fex	*(struct)
,	O
i	long
)	O
;	O
field_name	*(char)
=	O
xstrdup	(*(char))->(*(char))
(	O
rec_fex_elem_field_name	(*(struct))->(*(char))
(	O
fex_elem	*(struct)
)	O
)	O
;	O
if	O
(	O
field_name	*(char)
[	O
strlen	(*(char))->(long)
(	O
field_name	*(char)
)	O
-	O
1	int
]	O
==	O
':'	O
)	O
{	O
field_name	*(char)
[	O
strlen	(*(char))->(long)
(	O
field_name	*(char)
)	O
-	O
1	int
]	O
=	O
'\0'	O
;	O
}	O
if	O
(	O
rec_fex_elem_min	(*(struct))->(int)
(	O
fex_elem	*(struct)
)	O
!=	O
0	int
)	O
{	O
if	O
(	O
asprintf	(*(*(char)),*(char))->(int)
(	O
&	O
tmp	*(char)
,	O
"%s_%d"	*(char)
,	O
field_name	*(char)
,	O
rec_fex_elem_min	(*(struct))->(int)
(	O
fex_elem	*(struct)
)	O
+	O
1	int
)	O
==	O
-	O
1	int
)	O
recutl_out_of_memory	()->(void)
(	O
)	O
;	O
}	O
else	O
{	O
if	O
(	O
asprintf	(*(*(char)),*(char))->(int)
(	O
&	O
tmp	*(char)
,	O
"%s"	*(char)
,	O
field_name	*(char)
)	O
==	O
-	O
1	int
)	O
recutl_out_of_memory	()->(void)
(	O
)	O
;	O
}	O
csv_fwrite	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(void),long)->(int)
(	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
tmp	*(char)
,	O
strlen	(*(char))->(long)
(	O
tmp	*(char)
)	O
)	O
;	O
free	(*(void))->(void)
(	O
field_name	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
tmp	*(char)
)	O
;	O
}	O
putc	(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
'\n'	O
,	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
iter	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
=	O
rec_mset_iterator	(*(struct))->(struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long)))
(	O
rec_rset_mset	(*(struct))->(*(struct))
(	O
rset	*(struct)
)	O
)	O
;	O
while	O
(	O
rec_mset_iterator_next	(*(struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))),int,*(*(void)),*(*(struct)))->(bool)
(	O
&	O
iter	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
,	O
MSET_RECORD	int
,	O
(	O
const	O
void	O
*	O
*	O
)	O
&	O
record	*(struct)
,	O
NULL	O
)	O
)	O
{	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
rec_fex_size	(*(struct))->(long)
(	O
fex	*(struct)
)	O
;	O
i	long
++	O
)	O
{	O
if	O
(	O
i	long
!=	O
0	int
)	O
{	O
putc	(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
rec2csv_delim	char
,	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
}	O
fex_elem	*(struct)
=	O
rec_fex_get	(*(struct),long)->(*(struct))
(	O
fex	*(struct)
,	O
i	long
)	O
;	O
field	*(struct)
=	O
rec_record_get_field_by_name	(*(struct),*(char),long)->(*(struct))
(	O
record	*(struct)
,	O
rec_fex_elem_field_name	(*(struct))->(*(char))
(	O
fex_elem	*(struct)
)	O
,	O
rec_fex_elem_min	(*(struct))->(int)
(	O
fex_elem	*(struct)
)	O
)	O
;	O
if	O
(	O
field	*(struct)
)	O
{	O
csv_fwrite	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(void),long)->(int)
(	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
rec_field_value	(*(struct))->(*(char))
(	O
field	*(struct)
)	O
,	O
strlen	(*(char))->(long)
(	O
rec_field_value	(*(struct))->(*(char))
(	O
field	*(struct)
)	O
)	O
)	O
;	O
}	O
}	O
putc	(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
'\n'	O
,	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
}	O
rec_mset_iterator_free	(*(struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))))->(void)
(	O
&	O
iter	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
)	O
;	O
}	O
static	O
rec_fex_t	*(struct)
rec2csv_determine_fields	(*(struct))->(*(struct))
(	O
rec_rset_t	*(struct)
rset	*(struct)
)	O
{	O
rec_fex_t	*(struct)
fields	*(struct)
;	O
rec_mset_iterator_t	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
iter_rset	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
;	O
rec_mset_iterator_t	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
iter_record	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
;	O
rec_record_t	*(struct)
record	*(struct)
;	O
rec_field_t	*(struct)
field	*(struct)
;	O
int	O
field_index	int
;	O
fields	*(struct)
=	O
rec_fex_new	(*(char),enum(int,int,int))->(*(struct))
(	O
NULL	O
,	O
REC_FEX_SIMPLE	int
)	O
;	O
iter_rset	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
=	O
rec_mset_iterator	(*(struct))->(struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long)))
(	O
rec_rset_mset	(*(struct))->(*(struct))
(	O
rset	*(struct)
)	O
)	O
;	O
while	O
(	O
rec_mset_iterator_next	(*(struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))),int,*(*(void)),*(*(struct)))->(bool)
(	O
&	O
iter_rset	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
,	O
MSET_RECORD	int
,	O
(	O
const	O
void	O
*	O
*	O
)	O
&	O
record	*(struct)
,	O
NULL	O
)	O
)	O
{	O
iter_record	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
=	O
rec_mset_iterator	(*(struct))->(struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long)))
(	O
rec_record_mset	(*(struct))->(*(struct))
(	O
record	*(struct)
)	O
)	O
;	O
while	O
(	O
rec_mset_iterator_next	(*(struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))),int,*(*(void)),*(*(struct)))->(bool)
(	O
&	O
iter_record	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
,	O
MSET_FIELD	int
,	O
(	O
const	O
void	O
*	O
*	O
)	O
&	O
field	*(struct)
,	O
NULL	O
)	O
)	O
{	O
field_index	int
=	O
rec_record_get_field_index_by_name	(*(struct),*(struct))->(long)
(	O
record	*(struct)
,	O
field	*(struct)
)	O
;	O
if	O
(	O
!	O
rec_fex_member_p	(*(struct),*(char),int,int)->(bool)
(	O
fields	*(struct)
,	O
rec_field_name	(*(struct))->(*(char))
(	O
field	*(struct)
)	O
,	O
field_index	int
,	O
field_index	int
)	O
)	O
{	O
rec_fex_append	(*(struct),*(char),int,int)->(*(struct))
(	O
fields	*(struct)
,	O
rec_field_name	(*(struct))->(*(char))
(	O
field	*(struct)
)	O
,	O
field_index	int
,	O
field_index	int
)	O
;	O
}	O
}	O
rec_mset_iterator_free	(*(struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))))->(void)
(	O
&	O
iter_record	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
)	O
;	O
}	O
rec_mset_iterator_free	(*(struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))))->(void)
(	O
&	O
iter_rset	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
)	O
;	O
return	O
fields	*(struct)
;	O
}	O
static	O
bool	bool
rec2csv_process_data	(*(struct))->(bool)
(	O
rec_db_t	*(struct)
db	*(struct)
)	O
{	O
bool	bool
ret	int
;	O
rec_fex_t	*(struct)
row_fields	*(struct)
;	O
size_t	long
i	long
;	O
rec_rset_t	*(struct)
rset	*(struct)
;	O
ret	int
=	O
true	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
rec_db_size	(*(struct))->(long)
(	O
db	*(struct)
)	O
;	O
i	long
++	O
)	O
{	O
rset	*(struct)
=	O
rec_db_get_rset	(*(struct),long)->(*(struct))
(	O
db	*(struct)
,	O
i	long
)	O
;	O
if	O
(	O
(	O
(	O
rec2csv_record_type	*(char)
)	O
&&	O
rec_rset_type	(*(struct))->(*(char))
(	O
rset	*(struct)
)	O
&&	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
rec_rset_type	(*(struct))->(*(char))
(	O
rset	*(struct)
)	O
,	O
rec2csv_record_type	*(char)
)	O
==	O
0	int
)	O
)	O
||	O
(	O
!	O
rec2csv_record_type	*(char)
&&	O
(	O
!	O
rec_rset_type	(*(struct))->(*(char))
(	O
rset	*(struct)
)	O
||	O
(	O
rec_db_size	(*(struct))->(long)
(	O
db	*(struct)
)	O
==	O
1	int
)	O
)	O
)	O
)	O
{	O
if	O
(	O
!	O
rec_rset_sort	(*(struct),*(struct))->(*(struct))
(	O
rset	*(struct)
,	O
rec2csv_sort_by_fields	*(struct)
)	O
)	O
recutl_out_of_memory	()->(void)
(	O
)	O
;	O
row_fields	*(struct)
=	O
rec2csv_determine_fields	(*(struct))->(*(struct))
(	O
rset	*(struct)
)	O
;	O
rec2csv_generate_csv	(*(struct),*(struct))->(void)
(	O
rset	*(struct)
,	O
row_fields	*(struct)
)	O
;	O
rec_fex_destroy	(*(struct))->(void)
(	O
row_fields	*(struct)
)	O
;	O
}	O
}	O
return	O
ret	int
;	O
}	O
int	O
main	(int,array(*(char)))->(int)
(	O
int	O
argc	int
,	O
char	O
*	O
argv	*(*(char))
[	O
]	O
)	O
{	O
int	O
res	int
;	O
rec_db_t	*(struct)
db	*(struct)
;	O
res	int
=	O
0	int
;	O
recutl_init	(*(char))->(void)
(	O
"rec2csv"	*(char)
)	O
;	O
rec2csv_parse_args	(int,*(*(char)))->(void)
(	O
argc	int
,	O
argv	*(*(char))
)	O
;	O
db	*(struct)
=	O
recutl_build_db	(int,*(*(char)))->(*(struct))
(	O
argc	int
,	O
argv	*(*(char))
)	O
;	O
if	O
(	O
!	O
db	*(struct)
)	O
{	O
res	int
=	O
1	int
;	O
}	O
else	O
if	O
(	O
!	O
rec2csv_process_data	(*(struct))->(bool)
(	O
db	*(struct)
)	O
)	O
{	O
res	int
=	O
1	int
;	O
}	O
rec_db_destroy	(*(struct))->(void)
(	O
db	*(struct)
)	O
;	O
return	O
res	int
;	O
}	O
