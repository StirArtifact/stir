static	O
int	O
rational_check	(long,*(struct(double,double,double,double,double,double,double,double,double)))->(int)
(	O
const	O
size_t	long
n	int
,	O
const	O
gsl_integration_fixed_params	struct(double,double,double,double,double,double,double,double,double)
*	O
params	*(void)
)	O
{	O
if	O
(	O
fabs	(double)->(double)
(	O
params	*(void)
->	O
b	double
-	O
params	*(void)
->	O
a	double
)	O
<=	O
GSL_DBL_EPSILON	int
)	O
{	O
GSL_ERROR	O
(	O
"|b - a| too small"	*(char)
,	O
GSL_EDOM	int
)	O
;	O
}	O
else	O
if	O
(	O
params	*(void)
->	O
alpha	double
<=	O
-	O
1.0	int
)	O
{	O
GSL_ERROR	O
(	O
"alpha must be > -1"	*(char)
,	O
GSL_EDOM	int
)	O
;	O
}	O
else	O
if	O
(	O
params	*(void)
->	O
beta	double
>=	O
0.0	int
||	O
params	*(void)
->	O
alpha	double
+	O
params	*(void)
->	O
beta	double
+	O
2	int
*	O
n	int
>=	O
0.0	int
||	O
0.0	int
>=	O
params	*(void)
->	O
alpha	double
+	O
2	int
*	O
n	int
)	O
{	O
GSL_ERROR	O
(	O
"beta < alpha + beta + 2n < 0 is required"	*(char)
,	O
GSL_EDOM	int
)	O
;	O
}	O
else	O
if	O
(	O
params	*(void)
->	O
a	double
+	O
params	*(void)
->	O
b	double
<=	O
0.0	int
)	O
{	O
GSL_ERROR	O
(	O
"a + b <= 0 is not allowed"	*(char)
,	O
GSL_EDOM	int
)	O
;	O
}	O
else	O
{	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
static	O
int	O
rational_init	(long,*(double),*(double),*(struct(double,double,double,double,double,double,double,double,double)))->(int)
(	O
const	O
size_t	long
n	int
,	O
double	O
*	O
diag	*(double)
,	O
double	O
*	O
subdiag	*(double)
,	O
gsl_integration_fixed_params	struct(double,double,double,double,double,double,double,double,double)
*	O
params	*(void)
)	O
{	O
const	O
double	O
absum	double
=	O
params	*(void)
->	O
beta	double
+	O
params	*(void)
->	O
alpha	double
;	O
const	O
double	O
a1	double
=	O
params	*(void)
->	O
alpha	double
+	O
1.0	int
;	O
const	O
double	O
aba1	double
=	O
absum	double
*	O
a1	double
;	O
double	O
ab2i	double
=	O
absum	double
+	O
2.0	int
;	O
size_t	long
i	long
;	O
diag	*(double)
[	O
0	int
]	O
=	O
-	O
a1	double
/	O
(	O
absum	double
+	O
2.0	int
)	O
;	O
subdiag	*(double)
[	O
0	int
]	O
=	O
sqrt	(double)->(double)
(	O
-	O
diag	*(double)
[	O
0	int
]	O
*	O
(	O
params	*(void)
->	O
beta	double
+	O
1.0	int
)	O
/	O
(	O
(	O
absum	double
+	O
2.0	int
)	O
*	O
(	O
absum	double
+	O
3.0	int
)	O
)	O
)	O
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<	O
n	int
-	O
1	int
;	O
i	long
++	O
)	O
{	O
ab2i	double
+=	O
2.0	int
;	O
diag	*(double)
[	O
i	long
]	O
=	O
(	O
-	O
aba1	double
-	O
2.0	int
*	O
i	long
*	O
(	O
absum	double
+	O
i	long
+	O
1.0	int
)	O
)	O
/	O
(	O
ab2i	double
*	O
(	O
ab2i	double
-	O
2.0	int
)	O
)	O
;	O
subdiag	*(double)
[	O
i	long
]	O
=	O
sqrt	(double)->(double)
(	O
(	O
i	long
+	O
1.0	int
)	O
*	O
(	O
params	*(void)
->	O
alpha	double
+	O
i	long
+	O
1.0	int
)	O
/	O
(	O
ab2i	double
-	O
1.0	int
)	O
*	O
(	O
params	*(void)
->	O
beta	double
+	O
i	long
+	O
1.0	int
)	O
/	O
(	O
ab2i	double
*	O
ab2i	double
)	O
*	O
(	O
absum	double
+	O
i	long
+	O
1.0	int
)	O
/	O
(	O
ab2i	double
+	O
1.0	int
)	O
)	O
;	O
}	O
diag	*(double)
[	O
n	int
-	O
1	int
]	O
=	O
(	O
-	O
aba1	double
-	O
2.0	int
*	O
(	O
n	int
-	O
1.0	int
)	O
*	O
(	O
absum	double
+	O
n	int
)	O
)	O
/	O
(	O
(	O
absum	double
+	O
2.0	int
*	O
n	int
)	O
*	O
(	O
absum	double
+	O
2.0	int
*	O
n	int
-	O
2.0	int
)	O
)	O
;	O
subdiag	*(double)
[	O
n	int
-	O
1	int
]	O
=	O
0.0	int
;	O
params	*(void)
->	O
zemu	double
=	O
gsl_sf_gamma	(double)->(double)
(	O
params	*(void)
->	O
alpha	double
+	O
1.0	int
)	O
*	O
gsl_sf_gamma	(double)->(double)
(	O
-	O
absum	double
-	O
1.0	int
)	O
/	O
gsl_sf_gamma	(double)->(double)
(	O
-	O
params	*(void)
->	O
beta	double
)	O
;	O
params	*(void)
->	O
shft	double
=	O
params	*(void)
->	O
a	double
;	O
params	*(void)
->	O
slp	double
=	O
params	*(void)
->	O
b	double
+	O
params	*(void)
->	O
a	double
;	O
params	*(void)
->	O
al	double
=	O
params	*(void)
->	O
alpha	double
;	O
params	*(void)
->	O
be	double
=	O
params	*(void)
->	O
beta	double
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
const	O
gsl_integration_fixed_type	struct(*((long,*(struct(double,double,double,double,double,double,double,double,double)))->(int)),*((long,*(double),*(double),*(struct(double,double,double,double,double,double,double,double,double)))->(int)))
rational_type	struct(*((long,*(struct(double,double,double,double,double,double,double,double,double)))->(int)),*((long,*(double),*(double),*(struct(double,double,double,double,double,double,double,double,double)))->(int)))
=	O
{	O
rational_check	(long,*(struct(double,double,double,double,double,double,double,double,double)))->(int)
,	O
rational_init	(long,*(double),*(double),*(struct(double,double,double,double,double,double,double,double,double)))->(int)
}	O
;	O
const	O
gsl_integration_fixed_type	struct(*((long,*(struct(double,double,double,double,double,double,double,double,double)))->(int)),*((long,*(double),*(double),*(struct(double,double,double,double,double,double,double,double,double)))->(int)))
*	O
gsl_integration_fixed_rational	*(struct(*((long,*(struct`))->(int)),*((long,*(double),*(double),*(struct`))->(int))))
=	O
&	O
rational_type	struct(*((long,*(struct(double,double,double,double,double,double,double,double,double)))->(int)),*((long,*(double),*(double),*(struct(double,double,double,double,double,double,double,double,double)))->(int)))
;	O
