static	O
TIMESPAN	struct
*	O
timespan_new	(int,int)->(*(struct(*(struct(*`,int,int)),int,int)))
(	O
int	O
start	int
,	O
int	O
stop	int
)	O
{	O
TIMESPAN	struct
*	O
ts	*(struct(*(struct(*(struct`),int,int)),int,int))
;	O
ts	*(struct(*(struct(*(struct`),int,int)),int,int))
=	O
ALLOC	O
(	O
sizeof	O
(	O
*	O
ts	*(struct(*(struct(*(struct`),int,int)),int,int))
)	O
)	O
;	O
ts	*(struct(*(struct(*(struct`),int,int)),int,int))
->	O
next	*(struct(*(struct(*(struct`),int,int)),int,int))
=	O
NULL	O
;	O
ts	*(struct(*(struct(*(struct`),int,int)),int,int))
->	O
start	int
=	O
start	int
;	O
ts	*(struct(*(struct(*(struct`),int,int)),int,int))
->	O
stop	int
=	O
stop	int
;	O
return	O
ts	*(struct(*(struct(*(struct`),int,int)),int,int))
;	O
}	O
static	O
void	O
timespan_day	(*(*(struct(*(struct`),int,int))),int,int,int)->(void)
(	O
TIMESPAN	struct
*	O
*	O
ts	*(struct(*(struct(*(struct`),int,int)),int,int))
,	O
int	O
day	int
,	O
int	O
start	int
,	O
int	O
stop	int
)	O
{	O
TIMESPAN	struct
*	O
tp	*(struct(*(struct(*(struct`),int,int)),int,int))
,	O
*	O
prev	*(struct(*(struct(*(struct`),int,int)),int,int))
;	O
if	O
(	O
stop	int
<	O
start	int
)	O
{	O
timespan_day	(*(*(struct(*(struct`),int,int))),int,int,int)->(void)
(	O
ts	*(struct(*(struct(*(struct`),int,int)),int,int))
,	O
day	int
,	O
start	int
,	O
DAYMIN	O
)	O
;	O
timespan_day	(*(*(struct(*(struct`),int,int))),int,int,int)->(void)
(	O
ts	*(struct(*(struct(*(struct`),int,int)),int,int))
,	O
day	int
%	O
7	int
,	O
0	int
,	O
stop	int
)	O
;	O
return	O
;	O
}	O
day	int
*=	O
DAYMIN	O
;	O
start	int
+=	O
day	int
;	O
stop	int
+=	O
day	int
;	O
if	O
(	O
!	O
*	O
ts	*(struct(*(struct(*(struct`),int,int)),int,int))
)	O
{	O
*	O
ts	*(struct(*(struct(*(struct`),int,int)),int,int))
=	O
timespan_new	(int,int)->(*(struct(*(struct(*`,int,int)),int,int)))
(	O
start	int
,	O
stop	int
)	O
;	O
return	O
;	O
}	O
prev	*(struct(*(struct(*(struct`),int,int)),int,int))
=	O
NULL	O
;	O
for	O
(	O
tp	*(struct(*(struct(*(struct`),int,int)),int,int))
=	O
*	O
ts	*(struct(*(struct(*(struct`),int,int)),int,int))
;	O
tp	*(struct(*(struct(*(struct`),int,int)),int,int))
&&	O
tp	*(struct(*(struct(*(struct`),int,int)),int,int))
->	O
stop	int
<	O
start	int
;	O
tp	*(struct(*(struct(*(struct`),int,int)),int,int))
=	O
tp	*(struct(*(struct(*(struct`),int,int)),int,int))
->	O
next	*(struct(*(struct(*(struct`),int,int)),int,int))
)	O
prev	*(struct(*(struct(*(struct`),int,int)),int,int))
=	O
tp	*(struct(*(struct(*(struct`),int,int)),int,int))
;	O
if	O
(	O
tp	*(struct(*(struct(*(struct`),int,int)),int,int))
)	O
{	O
if	O
(	O
tp	*(struct(*(struct(*(struct`),int,int)),int,int))
->	O
start	int
<=	O
start	int
&&	O
stop	int
<=	O
tp	*(struct(*(struct(*(struct`),int,int)),int,int))
->	O
stop	int
)	O
return	O
;	O
if	O
(	O
tp	*(struct(*(struct(*(struct`),int,int)),int,int))
->	O
start	int
==	O
stop	int
)	O
{	O
tp	*(struct(*(struct(*(struct`),int,int)),int,int))
->	O
start	int
=	O
start	int
;	O
return	O
;	O
}	O
if	O
(	O
tp	*(struct(*(struct(*(struct`),int,int)),int,int))
->	O
stop	int
==	O
start	int
)	O
{	O
tp	*(struct(*(struct(*(struct`),int,int)),int,int))
->	O
stop	int
=	O
stop	int
;	O
return	O
;	O
}	O
}	O
tp	*(struct(*(struct(*(struct`),int,int)),int,int))
=	O
timespan_new	(int,int)->(*(struct(*(struct(*`,int,int)),int,int)))
(	O
start	int
,	O
stop	int
)	O
;	O
if	O
(	O
prev	*(struct(*(struct(*(struct`),int,int)),int,int))
)	O
{	O
tp	*(struct(*(struct(*(struct`),int,int)),int,int))
->	O
next	*(struct(*(struct(*(struct`),int,int)),int,int))
=	O
prev	*(struct(*(struct(*(struct`),int,int)),int,int))
->	O
next	*(struct(*(struct(*(struct`),int,int)),int,int))
;	O
prev	*(struct(*(struct(*(struct`),int,int)),int,int))
->	O
next	*(struct(*(struct(*(struct`),int,int)),int,int))
=	O
tp	*(struct(*(struct(*(struct`),int,int)),int,int))
;	O
}	O
else	O
{	O
tp	*(struct(*(struct(*(struct`),int,int)),int,int))
->	O
next	*(struct(*(struct(*(struct`),int,int)),int,int))
=	O
*	O
ts	*(struct(*(struct(*(struct`),int,int)),int,int))
;	O
*	O
ts	*(struct(*(struct(*(struct`),int,int)),int,int))
=	O
tp	*(struct(*(struct(*(struct`),int,int)),int,int))
;	O
}	O
}	O
static	O
int	O
timespan_parse	(*(*(struct(*(struct`),int,int))),*(char),*(*(char)))->(int)
(	O
TIMESPAN	struct
*	O
*	O
ts	*(struct(*(struct(*(struct`),int,int)),int,int))
,	O
char	O
*	O
s	*(char)
,	O
char	O
*	O
*	O
endp	*(*(char))
)	O
{	O
register	O
int	O
i	int
,	O
j	int
;	O
register	O
char	O
*	O
p	*(char)
;	O
int	O
start	int
,	O
stop	int
;	O
char	O
t	array(char)
[	O
3	int
]	O
;	O
static	O
char	O
*	O
days	array(*(char))
[	O
]	O
=	O
{	O
"su"	*(char)
,	O
"mo"	*(char)
,	O
"tu"	*(char)
,	O
"we"	*(char)
,	O
"th"	*(char)
,	O
"fr"	*(char)
,	O
"sa"	*(char)
,	O
"wk"	*(char)
,	O
"any"	*(char)
,	O
"al"	*(char)
}	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
sizeof	O
(	O
t	array(char)
)	O
;	O
i	int
++	O
)	O
t	array(char)
[	O
i	int
]	O
=	O
tolower	(int)->(int)
(	O
s	*(char)
[	O
i	int
]	O
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
ND	O
;	O
i	int
++	O
)	O
{	O
p	*(char)
=	O
days	array(*(char))
[	O
i	int
]	O
;	O
for	O
(	O
j	int
=	O
0	int
;	O
p	*(char)
[	O
j	int
]	O
&&	O
p	*(char)
[	O
j	int
]	O
==	O
t	array(char)
[	O
j	int
]	O
;	O
j	int
++	O
)	O
;	O
if	O
(	O
p	*(char)
[	O
j	int
]	O
==	O
0	int
)	O
{	O
s	*(char)
+=	O
j	int
;	O
break	O
;	O
}	O
}	O
if	O
(	O
i	int
==	O
ND	O
)	O
{	O
*	O
endp	*(*(char))
=	O
s	*(char)
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
*	O
s	*(char)
&&	O
*	O
s	*(char)
!=	O
','	O
&&	O
*	O
s	*(char)
!=	O
'|'	O
)	O
{	O
p	*(char)
=	O
s	*(char)
;	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<	O
4	int
;	O
j	int
++	O
,	O
p	*(char)
++	O
)	O
if	O
(	O
!	O
isdigit	(int)->(int)
(	O
*	O
p	*(char)
)	O
)	O
{	O
*	O
endp	*(*(char))
=	O
p	*(char)
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
*	O
p	*(char)
!=	O
'-'	O
)	O
{	O
*	O
endp	*(*(char))
=	O
p	*(char)
;	O
return	O
-	O
1	int
;	O
}	O
for	O
(	O
p	*(char)
++	O
,	O
j	int
=	O
0	int
;	O
j	int
<	O
4	int
;	O
j	int
++	O
,	O
p	*(char)
++	O
)	O
if	O
(	O
!	O
isdigit	(int)->(int)
(	O
*	O
p	*(char)
)	O
)	O
{	O
*	O
endp	*(*(char))
=	O
p	*(char)
;	O
return	O
-	O
1	int
;	O
}	O
*	O
endp	*(*(char))
=	O
p	*(char)
;	O
start	int
=	O
600	int
*	O
val	O
(	O
s	*(char)
[	O
0	int
]	O
)	O
+	O
60	int
*	O
val	O
(	O
s	*(char)
[	O
1	int
]	O
)	O
+	O
atoi	(*(char))->(int)
(	O
s	*(char)
+	O
2	int
)	O
;	O
s	*(char)
+=	O
5	int
;	O
stop	int
=	O
600	int
*	O
val	O
(	O
s	*(char)
[	O
0	int
]	O
)	O
+	O
60	int
*	O
val	O
(	O
s	*(char)
[	O
1	int
]	O
)	O
+	O
atoi	(*(char))->(int)
(	O
s	*(char)
+	O
2	int
)	O
;	O
}	O
else	O
{	O
*	O
endp	*(*(char))
=	O
s	*(char)
;	O
if	O
(	O
i	int
>	O
7	int
)	O
{	O
*	O
ts	*(struct(*(struct(*(struct`),int,int)),int,int))
=	O
NULL	O
;	O
return	O
0	int
;	O
}	O
start	int
=	O
0	int
;	O
stop	int
=	O
DAYMIN	O
;	O
}	O
if	O
(	O
i	int
<=	O
6	int
)	O
timespan_day	(*(*(struct(*(struct`),int,int))),int,int,int)->(void)
(	O
ts	*(struct(*(struct(*(struct`),int,int)),int,int))
,	O
i	int
,	O
start	int
,	O
stop	int
)	O
;	O
else	O
if	O
(	O
i	int
==	O
7	int
)	O
for	O
(	O
i	int
=	O
1	int
;	O
i	int
<=	O
5	int
;	O
i	int
++	O
)	O
timespan_day	(*(*(struct(*(struct`),int,int))),int,int,int)->(void)
(	O
ts	*(struct(*(struct(*(struct`),int,int)),int,int))
,	O
i	int
,	O
start	int
,	O
stop	int
)	O
;	O
else	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<=	O
6	int
;	O
i	int
++	O
)	O
timespan_day	(*(*(struct(*(struct`),int,int))),int,int,int)->(void)
(	O
ts	*(struct(*(struct(*(struct`),int,int)),int,int))
,	O
i	int
,	O
start	int
,	O
stop	int
)	O
;	O
return	O
0	int
;	O
}	O
void	O
ts_free	(*(struct(*(struct(*`,int,int)),int,int)))->(void)
(	O
TIMESPAN	struct
*	O
sp	*(struct(*(struct(*(struct`),int,int)),int,int))
)	O
{	O
TIMESPAN	struct
*	O
next	*(struct(*(struct(*(struct`),int,int)),int,int))
;	O
while	O
(	O
sp	*(struct(*(struct(*(struct`),int,int)),int,int))
)	O
{	O
next	*(struct(*(struct(*(struct`),int,int)),int,int))
=	O
sp	*(struct(*(struct(*(struct`),int,int)),int,int))
->	O
next	*(struct(*(struct(*(struct`),int,int)),int,int))
;	O
FREE	O
(	O
sp	*(struct(*(struct(*(struct`),int,int)),int,int))
)	O
;	O
sp	*(struct(*(struct(*(struct`),int,int)),int,int))
=	O
next	*(struct(*(struct(*(struct`),int,int)),int,int))
;	O
}	O
}	O
int	O
ts_parse	(*(*(struct(*(struct`),int,int))),*(char),*(*(char)))->(int)
(	O
TIMESPAN	struct
*	O
*	O
sp	*(struct(*(struct(*(struct`),int,int)),int,int))
,	O
char	O
*	O
str	*(char)
,	O
char	O
*	O
*	O
endp	*(*(char))
)	O
{	O
*	O
sp	*(struct(*(struct(*(struct`),int,int)),int,int))
=	O
NULL	O
;	O
while	O
(	O
1	int
)	O
{	O
if	O
(	O
timespan_parse	(*(*(struct(*(struct`),int,int))),*(char),*(*(char)))->(int)
(	O
sp	*(struct(*(struct(*(struct`),int,int)),int,int))
,	O
str	*(char)
,	O
endp	*(*(char))
)	O
)	O
{	O
ts_free	(*(struct(*(struct(*`,int,int)),int,int)))->(void)
(	O
*	O
sp	*(struct(*(struct(*(struct`),int,int)),int,int))
)	O
;	O
return	O
-	O
1	int
;	O
}	O
str	*(char)
=	O
*	O
endp	*(*(char))
;	O
if	O
(	O
*	O
str	*(char)
==	O
0	int
)	O
break	O
;	O
if	O
(	O
*	O
str	*(char)
!=	O
','	O
&&	O
*	O
str	*(char)
!=	O
'|'	O
)	O
{	O
ts_free	(*(struct(*(struct(*`,int,int)),int,int)))->(void)
(	O
*	O
sp	*(struct(*(struct(*(struct`),int,int)),int,int))
)	O
;	O
return	O
-	O
1	int
;	O
}	O
str	*(char)
++	O
;	O
}	O
return	O
0	int
;	O
}	O
int	O
ts_match	(*(struct(*(struct(*`,int,int)),int,int)),*(long),*(int))->(int)
(	O
TIMESPAN	struct
*	O
timespan	struct(*(struct(*(struct(*(struct`),int,int)),int,int)),int,int)
,	O
time_t	long
*	O
time_now	*(long)
,	O
unsigned	O
*	O
rest	*(int)
)	O
{	O
TIMESPAN	struct
*	O
tp	*(struct(*(struct(*(struct`),int,int)),int,int))
;	O
struct	O
tm	struct(int,int,int,int,int,int,int,int,int,long,*(char))
*	O
tm	struct(int,int,int,int,int,int,int,int,int,long,*(char))
,	O
tms	struct(int,int,int,int,int,int,int,int,int,long,*(char))
;	O
unsigned	O
now	int
;	O
if	O
(	O
!	O
timespan	struct(*(struct(*(struct(*(struct`),int,int)),int,int)),int,int)
)	O
{	O
return	O
2	int
;	O
}	O
tm	struct(int,int,int,int,int,int,int,int,int,long,*(char))
=	O
localtime_r	(*(long),*(struct(int,int,int,int,int,int,int,int,int,long,*(char))))->(*(struct(int,int,int,int,int,int,int,int,int,long,*(char))))
(	O
time_now	*(long)
,	O
&	O
tms	struct(int,int,int,int,int,int,int,int,int,long,*(char))
)	O
;	O
now	int
=	O
tm	struct(int,int,int,int,int,int,int,int,int,long,*(char))
->	O
tm_wday	int
*	O
DAYMIN	O
+	O
tm	struct(int,int,int,int,int,int,int,int,int,long,*(char))
->	O
tm_hour	int
*	O
60	int
+	O
tm	struct(int,int,int,int,int,int,int,int,int,long,*(char))
->	O
tm_min	int
;	O
for	O
(	O
tp	*(struct(*(struct(*(struct`),int,int)),int,int))
=	O
timespan	struct(*(struct(*(struct(*(struct`),int,int)),int,int)),int,int)
;	O
tp	*(struct(*(struct(*(struct`),int,int)),int,int))
;	O
tp	*(struct(*(struct(*(struct`),int,int)),int,int))
=	O
tp	*(struct(*(struct(*(struct`),int,int)),int,int))
->	O
next	*(struct(*(struct(*(struct`),int,int)),int,int))
)	O
{	O
if	O
(	O
tp	*(struct(*(struct(*(struct`),int,int)),int,int))
->	O
start	int
<=	O
now	int
&&	O
now	int
<	O
tp	*(struct(*(struct(*(struct`),int,int)),int,int))
->	O
stop	int
)	O
{	O
if	O
(	O
rest	*(int)
)	O
*	O
rest	*(int)
=	O
(	O
tp	*(struct(*(struct(*(struct`),int,int)),int,int))
->	O
stop	int
-	O
now	int
)	O
*	O
60	int
;	O
return	O
0	int
;	O
}	O
}	O
if	O
(	O
!	O
rest	*(int)
)	O
return	O
1	int
;	O
for	O
(	O
tp	*(struct(*(struct(*(struct`),int,int)),int,int))
=	O
timespan	struct(*(struct(*(struct(*(struct`),int,int)),int,int)),int,int)
;	O
tp	*(struct(*(struct(*(struct`),int,int)),int,int))
&&	O
tp	*(struct(*(struct(*(struct`),int,int)),int,int))
->	O
stop	int
<=	O
now	int
;	O
tp	*(struct(*(struct(*(struct`),int,int)),int,int))
=	O
tp	*(struct(*(struct(*(struct`),int,int)),int,int))
->	O
next	*(struct(*(struct(*(struct`),int,int)),int,int))
)	O
;	O
if	O
(	O
!	O
tp	*(struct(*(struct(*(struct`),int,int)),int,int))
)	O
tp	*(struct(*(struct(*(struct`),int,int)),int,int))
=	O
timespan	struct(*(struct(*(struct(*(struct`),int,int)),int,int)),int,int)
;	O
if	O
(	O
tp	*(struct(*(struct(*(struct`),int,int)),int,int))
->	O
start	int
<	O
now	int
)	O
*	O
rest	*(int)
=	O
(	O
7	int
*	O
DAYMIN	O
+	O
tp	*(struct(*(struct(*(struct`),int,int)),int,int))
->	O
start	int
-	O
now	int
)	O
*	O
60	int
;	O
else	O
*	O
rest	*(int)
=	O
(	O
tp	*(struct(*(struct(*(struct`),int,int)),int,int))
->	O
start	int
-	O
now	int
)	O
*	O
60	int
;	O
return	O
1	int
;	O
}	O
int	O
ts_check	(*(char),*(long),*(int),*(*(char)))->(int)
(	O
char	O
*	O
str	*(char)
,	O
time_t	long
*	O
time	struct(long,long)
,	O
unsigned	O
*	O
rest	*(int)
,	O
char	O
*	O
*	O
endp	*(*(char))
)	O
{	O
TIMESPAN	struct
*	O
ts	*(struct(*(struct(*(struct`),int,int)),int,int))
;	O
int	O
rc	int
;	O
if	O
(	O
ts_parse	(*(*(struct(*(struct`),int,int))),*(char),*(*(char)))->(int)
(	O
&	O
ts	*(struct(*(struct(*(struct`),int,int)),int,int))
,	O
str	*(char)
,	O
&	O
str	*(char)
)	O
)	O
{	O
if	O
(	O
endp	*(*(char))
)	O
*	O
endp	*(*(char))
=	O
str	*(char)
;	O
return	O
-	O
1	int
;	O
}	O
rc	int
=	O
ts_match	(*(struct(*(struct(*`,int,int)),int,int)),*(long),*(int))->(int)
(	O
ts	*(struct(*(struct(*(struct`),int,int)),int,int))
,	O
time	struct(long,long)
,	O
rest	*(int)
)	O
;	O
ts_free	(*(struct(*(struct(*`,int,int)),int,int)))->(void)
(	O
ts	*(struct(*(struct(*(struct`),int,int)),int,int))
)	O
;	O
return	O
rc	int
;	O
}	O
