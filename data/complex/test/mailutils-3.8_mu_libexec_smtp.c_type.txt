char	O
smtp_docstring	array(char)
[	O
]	O
=	O
N_	O
(	O
"run a SMTP session"	*(char)
)	O
;	O
enum	O
smtp_session_status	enum(int,int,int)
{	O
smtp_session_disconnected	int
,	O
smtp_session_connected	int
,	O
smtp_session_logged_in	int
}	O
;	O
static	O
enum	O
smtp_session_status	enum(int,int,int)
smtp_session_status	enum(int,int,int)
;	O
static	O
int	O
connect_argc	int
;	O
static	O
char	O
*	O
*	O
connect_argv	*(*(char))
;	O
static	O
int	O
port	int
=	O
25	int
;	O
static	O
char	O
*	O
sender	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
;	O
static	O
mu_list_t	*(struct)
recipients	*(struct)
;	O
static	O
char	O
*	O
msgfile	*(char)
;	O
static	O
int	O
temp_msgfile	int
;	O
static	O
mu_smtp_t	*(struct)
smtp	*(struct)
;	O
const	O
char	O
*	O
smtp_session_str	(enum(int,int,int))->(*(char))
(	O
enum	O
smtp_session_status	enum(int,int,int)
stat	*(int)
)	O
{	O
switch	O
(	O
stat	*(int)
)	O
{	O
case	O
smtp_session_disconnected	int
:	O
return	O
"disconnected"	*(char)
;	O
case	O
smtp_session_connected	int
:	O
return	O
"connected"	*(char)
;	O
case	O
smtp_session_logged_in	int
:	O
return	O
"logged in"	*(char)
;	O
}	O
return	O
"unknown"	*(char)
;	O
}	O
static	O
void	O
smtp_prompt_env	()->(void)
(	O
void	O
)	O
{	O
mu_assoc_t	*(struct)
assoc	*(struct)
=	O
mutool_shell_prompt_assoc	()->(*(struct))
(	O
)	O
;	O
const	O
char	O
*	O
value	*(void)
;	O
if	O
(	O
smtp_session_status	enum(int,int,int)
==	O
smtp_session_logged_in	int
&&	O
mu_smtp_get_param	(*(struct),int,*(*(char)))->(int)
(	O
smtp	*(struct)
,	O
MU_SMTP_PARAM_USERNAME	int
,	O
&	O
value	*(void)
)	O
==	O
0	int
)	O
mu_assoc_install	(*(struct),*(char),*(void))->(int)
(	O
assoc	*(struct)
,	O
"user"	*(char)
,	O
(	O
void	O
*	O
)	O
value	*(void)
)	O
;	O
if	O
(	O
smtp_session_status	enum(int,int,int)
!=	O
smtp_session_disconnected	int
)	O
mu_assoc_install	(*(struct),*(char),*(void))->(int)
(	O
assoc	*(struct)
,	O
"host"	*(char)
,	O
host	*(*(char))
)	O
;	O
mu_assoc_install	(*(struct),*(char),*(void))->(int)
(	O
assoc	*(struct)
,	O
"status"	*(char)
,	O
(	O
void	O
*	O
)	O
smtp_session_str	(enum(int,int,int))->(*(char))
(	O
smtp_session_status	enum(int,int,int)
)	O
)	O
;	O
}	O
static	O
void	O
smtp_set_verbose	()->(void)
(	O
void	O
)	O
{	O
if	O
(	O
smtp	*(struct)
)	O
{	O
if	O
(	O
QRY_VERBOSE	O
(	O
)	O
)	O
mu_smtp_trace	(*(struct),int)->(int)
(	O
smtp	*(struct)
,	O
MU_SMTP_TRACE_SET	int
)	O
;	O
else	O
mu_smtp_trace	(*(struct),int)->(int)
(	O
smtp	*(struct)
,	O
MU_SMTP_TRACE_CLR	int
)	O
;	O
}	O
}	O
static	O
void	O
smtp_set_verbose_mask	()->(void)
(	O
void	O
)	O
{	O
if	O
(	O
smtp	*(struct)
)	O
{	O
mu_smtp_trace_mask	(*(struct),int,int)->(int)
(	O
smtp	*(struct)
,	O
QRY_VERBOSE_MASK	O
(	O
MU_XSCRIPT_SECURE	int
)	O
?	O
MU_SMTP_TRACE_SET	int
:	O
MU_SMTP_TRACE_CLR	int
,	O
MU_XSCRIPT_SECURE	int
)	O
;	O
mu_smtp_trace_mask	(*(struct),int,int)->(int)
(	O
smtp	*(struct)
,	O
QRY_VERBOSE_MASK	O
(	O
MU_XSCRIPT_PAYLOAD	int
)	O
?	O
MU_SMTP_TRACE_SET	int
:	O
MU_SMTP_TRACE_CLR	int
,	O
MU_XSCRIPT_PAYLOAD	int
)	O
;	O
}	O
}	O
static	O
int	O
com_verbose	(int,*(*(char)))->(int)
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	*(*(char))
)	O
{	O
return	O
shell_verbose	(int,*(*(char)),*(()->(void)),*(()->(void)))->(int)
(	O
argc	long
,	O
argv	*(*(char))
,	O
smtp_set_verbose	()->(void)
,	O
smtp_set_verbose_mask	()->(void)
)	O
;	O
}	O
static	O
int	O
smtp_error_handler	(int)->(int)
(	O
int	O
rc	int
)	O
{	O
if	O
(	O
rc	int
==	O
0	int
||	O
rc	int
==	O
MU_ERR_REPLY	O
)	O
{	O
char	O
code	int
[	O
4	int
]	O
;	O
const	O
char	O
*	O
repl	*(char)
;	O
mu_smtp_replcode	(*(struct),*(char))->(int)
(	O
smtp	*(struct)
,	O
code	int
)	O
;	O
mu_smtp_sget_reply	(*(struct),*(*(char)))->(int)
(	O
smtp	*(struct)
,	O
&	O
repl	*(char)
)	O
;	O
mu_printf	(*(char))->(int)
(	O
"%s %s\n"	*(char)
,	O
code	int
,	O
repl	*(char)
)	O
;	O
}	O
return	O
rc	int
;	O
}	O
static	O
int	O
com_disconnect	(int,*(*(char)))->(int)
(	O
int	O
argc	long
MU_ARG_UNUSED	O
,	O
char	O
*	O
*	O
argv	*(*(char))
MU_ARG_UNUSED	O
)	O
{	O
if	O
(	O
smtp	*(struct)
)	O
{	O
mu_smtp_disconnect	(*(struct))->(int)
(	O
smtp	*(struct)
)	O
;	O
mu_smtp_destroy	(*(*(struct)))->(void)
(	O
&	O
smtp	*(struct)
)	O
;	O
smtp	*(struct)
=	O
NULL	O
;	O
mu_argcv_free	(long,*(*(char)))->(void)
(	O
connect_argc	int
,	O
connect_argv	*(*(char))
)	O
;	O
connect_argc	int
=	O
0	int
;	O
connect_argv	*(*(char))
=	O
NULL	O
;	O
smtp_session_status	enum(int,int,int)
=	O
smtp_session_disconnected	int
;	O
smtp_prompt_env	()->(void)
(	O
)	O
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
com_connect	(int,*(*(char)))->(int)
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	*(*(char))
)	O
{	O
int	O
status	int
;	O
int	O
tls	int
=	O
0	int
;	O
int	O
i	long
=	O
1	int
;	O
int	O
n	*(long)
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<	O
argc	long
;	O
i	long
++	O
)	O
{	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
argv	*(*(char))
[	O
i	long
]	O
,	O
"-tls"	*(char)
)	O
==	O
0	int
)	O
{	O
mu_error	(*(char))->(int)
(	O
"TLS not supported"	*(char)
)	O
;	O
return	O
0	int
;	O
}	O
else	O
break	O
;	O
}	O
argc	long
-=	O
i	long
;	O
argv	*(*(char))
+=	O
i	long
;	O
if	O
(	O
smtp_session_status	enum(int,int,int)
!=	O
smtp_session_disconnected	int
)	O
com_disconnect	(int,*(*(char)))->(int)
(	O
0	int
,	O
NULL	O
)	O
;	O
status	int
=	O
mu_smtp_create	(*(*(struct)))->(int)
(	O
&	O
smtp	*(struct)
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
{	O
mu_stream_t	*(struct)
tcp	*(struct)
;	O
struct	O
mu_sockaddr	struct(*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(char))),*(struct(*(struct`),*(struct`),*(struct`),int,*(char))),*(struct(short,array(char))),int,*(char))),*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(char))),*(struct(*(struct`),*(struct`),*(struct`),int,*(char))),*(struct(short,array(char))),int,*(char))),*(struct(short,array(char))),int,*(char))
*	O
sa	*(struct(short,array(char)))
;	O
struct	O
mu_sockaddr_hints	struct(int,int,int,int,short)
hints	*(struct(*(char),*(char)))
;	O
if	O
(	O
QRY_VERBOSE	O
(	O
)	O
)	O
{	O
smtp_set_verbose	()->(void)
(	O
)	O
;	O
smtp_set_verbose_mask	()->(void)
(	O
)	O
;	O
}	O
memset	(*(void),int,long)->(*(void))
(	O
&	O
hints	*(struct(*(char),*(char)))
,	O
0	int
,	O
sizeof	O
(	O
hints	*(struct(*(char),*(char)))
)	O
)	O
;	O
hints	*(struct(*(char),*(char)))
.	O
flags	int
=	O
MU_AH_DETECT_FAMILY	int
;	O
hints	*(struct(*(char),*(char)))
.	O
port	int
=	O
tls	int
?	O
465	int
:	O
25	int
;	O
hints	*(struct(*(char),*(char)))
.	O
protocol	int
=	O
IPPROTO_TCP	int
;	O
hints	*(struct(*(char),*(char)))
.	O
socktype	int
=	O
SOCK_STREAM	int
;	O
status	int
=	O
mu_sockaddr_from_node	(*(*(struct(*(struct`),*(struct`),*(struct`),int,*(char)))),*(char),*(char),*(struct(int,int,int,int,short)))->(int)
(	O
&	O
sa	*(struct(short,array(char)))
,	O
argv	*(*(char))
[	O
0	int
]	O
,	O
argv	*(*(char))
[	O
1	int
]	O
,	O
&	O
hints	*(struct(*(char),*(char)))
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
{	O
n	*(long)
=	O
port_from_sa	(*(struct(*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),*(struct(short,array(char))),int,*(char))))->(int)
(	O
sa	*(struct(short,array(char)))
)	O
;	O
status	int
=	O
mu_tcp_stream_create_from_sa	(*(*(struct)),*(struct),*(struct),int)->(int)
(	O
&	O
tcp	*(struct)
,	O
sa	*(struct(short,array(char)))
,	O
NULL	O
,	O
0	int
)	O
;	O
if	O
(	O
status	int
)	O
mu_sockaddr_free	(*(struct(*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),*(struct(short,array(char))),int,*(char))))->(void)
(	O
sa	*(struct(short,array(char)))
)	O
;	O
}	O
if	O
(	O
status	int
==	O
0	int
)	O
{	O
mu_smtp_set_carrier	(*(struct),*(struct))->(int)
(	O
smtp	*(struct)
,	O
tcp	*(struct)
)	O
;	O
status	int
=	O
smtp_error_handler	(int)->(int)
(	O
mu_smtp_open	(*(struct))->(int)
(	O
smtp	*(struct)
)	O
)	O
;	O
}	O
else	O
{	O
mu_smtp_destroy	(*(*(struct)))->(void)
(	O
&	O
smtp	*(struct)
)	O
;	O
smtp	*(struct)
=	O
NULL	O
;	O
}	O
}	O
if	O
(	O
status	int
)	O
mu_error	(*(char))->(int)
(	O
"Failed to create smtp: %s"	*(char)
,	O
mu_strerror	(int)->(*(char))
(	O
status	int
)	O
)	O
;	O
else	O
{	O
connect_argc	int
=	O
argc	long
;	O
connect_argv	*(*(char))
=	O
mu_calloc	(long,long)->(*(void))
(	O
argc	long
+	O
1	int
,	O
sizeof	O
(	O
*	O
connect_argv	*(*(char))
)	O
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
argc	long
;	O
i	long
++	O
)	O
connect_argv	*(*(char))
[	O
i	long
]	O
=	O
mu_strdup	(*(char))->(*(char))
(	O
argv	*(*(char))
[	O
i	long
]	O
)	O
;	O
connect_argv	*(*(char))
[	O
i	long
]	O
=	O
NULL	O
;	O
port	int
=	O
n	*(long)
;	O
smtp_session_status	enum(int,int,int)
=	O
smtp_session_connected	int
;	O
smtp_prompt_env	()->(void)
(	O
)	O
;	O
}	O
mu_smtp_set_param	(*(struct),int,*(char))->(int)
(	O
smtp	*(struct)
,	O
MU_SMTP_PARAM_URL	int
,	O
"smtp://"	*(char)
)	O
;	O
return	O
status	int
;	O
}	O
static	O
int	O
com_capa	(int,*(*(char)))->(int)
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	*(*(char))
)	O
{	O
mu_iterator_t	*(struct)
iterator	*(struct)
=	O
NULL	O
;	O
int	O
status	int
=	O
0	int
;	O
int	O
i	long
=	O
1	int
;	O
if	O
(	O
i	long
<	O
argc	long
)	O
{	O
for	O
(	O
;	O
i	long
<	O
argc	long
;	O
i	long
++	O
)	O
{	O
const	O
char	O
*	O
elt	*(char)
;	O
int	O
rc	int
=	O
mu_smtp_capa_test	(*(struct),*(char),*(*(char)))->(int)
(	O
smtp	*(struct)
,	O
argv	*(*(char))
[	O
i	long
]	O
,	O
&	O
elt	*(char)
)	O
;	O
switch	O
(	O
rc	int
)	O
{	O
case	O
0	int
:	O
if	O
(	O
*	O
elt	*(char)
)	O
mu_printf	(*(char))->(int)
(	O
"%s: %s\n"	*(char)
,	O
argv	*(*(char))
[	O
i	long
]	O
,	O
elt	*(char)
)	O
;	O
else	O
mu_printf	(*(char))->(int)
(	O
"%s is set\n"	*(char)
,	O
argv	*(*(char))
[	O
i	long
]	O
)	O
;	O
break	O
;	O
case	O
MU_ERR_NOENT	O
:	O
mu_printf	(*(char))->(int)
(	O
"%s is not set\n"	*(char)
,	O
argv	*(*(char))
[	O
i	long
]	O
)	O
;	O
break	O
;	O
default	O
:	O
return	O
smtp_error_handler	(int)->(int)
(	O
rc	int
)	O
;	O
}	O
}	O
}	O
else	O
{	O
status	int
=	O
mu_smtp_capa_iterator	(*(struct),*(*(struct)))->(int)
(	O
smtp	*(struct)
,	O
&	O
iterator	*(struct)
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
{	O
for	O
(	O
mu_iterator_first	(*(struct))->(int)
(	O
iterator	*(struct)
)	O
;	O
!	O
mu_iterator_is_done	(*(struct))->(int)
(	O
iterator	*(struct)
)	O
;	O
mu_iterator_next	(*(struct))->(int)
(	O
iterator	*(struct)
)	O
)	O
{	O
char	O
*	O
capa	*(struct(*(char),*(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*`,*`,*`)->(void)),*(char))),*(struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char))),*((enum(int,int),*(struct`),*(char),*(*`),*(void),*(struct`))->(int)),*((*(void))->(void))))
=	O
NULL	O
;	O
mu_iterator_current	(*(struct),*(*(void)))->(int)
(	O
iterator	*(struct)
,	O
(	O
void	O
*	O
*	O
)	O
&	O
capa	*(struct(*(char),*(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*`,*`,*`)->(void)),*(char))),*(struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char))),*((enum(int,int),*(struct`),*(char),*(*`),*(void),*(struct`))->(int)),*((*(void))->(void))))
)	O
;	O
mu_printf	(*(char))->(int)
(	O
"CAPA: %s\n"	*(char)
,	O
mu_prstr	(*(char))->(*(char))
(	O
capa	*(struct(*(char),*(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*`,*`,*`)->(void)),*(char))),*(struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char))),*((enum(int,int),*(struct`),*(char),*(*`),*(void),*(struct`))->(int)),*((*(void))->(void))))
)	O
)	O
;	O
}	O
mu_iterator_destroy	(*(*(struct)))->(void)
(	O
&	O
iterator	*(struct)
)	O
;	O
}	O
}	O
return	O
status	int
;	O
}	O
static	O
int	O
com_ehlo	(int,*(*(char)))->(int)
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	*(*(char))
)	O
{	O
if	O
(	O
argc	long
==	O
1	int
)	O
{	O
if	O
(	O
mu_smtp_test_param	(*(struct),int)->(int)
(	O
smtp	*(struct)
,	O
MU_SMTP_PARAM_DOMAIN	int
)	O
)	O
{	O
mu_error	(*(char))->(int)
(	O
_	O
(	O
"no domain set"	*(char)
)	O
)	O
;	O
return	O
0	int
;	O
}	O
}	O
else	O
mu_smtp_set_param	(*(struct),int,*(char))->(int)
(	O
smtp	*(struct)
,	O
MU_SMTP_PARAM_DOMAIN	int
,	O
argv	*(*(char))
[	O
1	int
]	O
)	O
;	O
return	O
com_capa	(int,*(*(char)))->(int)
(	O
1	int
,	O
argv	*(*(char))
)	O
;	O
}	O
static	O
int	O
com_rset	(int,*(*(char)))->(int)
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	*(*(char))
)	O
{	O
return	O
smtp_error_handler	(int)->(int)
(	O
mu_smtp_rset	(*(struct))->(int)
(	O
smtp	*(struct)
)	O
)	O
;	O
}	O
static	O
int	O
com_quit	(int,*(*(char)))->(int)
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	*(*(char))
)	O
{	O
int	O
status	int
=	O
0	int
;	O
if	O
(	O
smtp	*(struct)
)	O
{	O
if	O
(	O
smtp_error_handler	(int)->(int)
(	O
mu_smtp_quit	(*(struct))->(int)
(	O
smtp	*(struct)
)	O
)	O
==	O
0	int
)	O
{	O
status	int
=	O
com_disconnect	(int,*(*(char)))->(int)
(	O
0	int
,	O
NULL	O
)	O
;	O
}	O
else	O
{	O
mu_printf	(*(char))->(int)
(	O
"Try 'exit' to leave %s\n"	*(char)
,	O
mu_program_name	*(char)
)	O
;	O
}	O
}	O
else	O
mu_printf	(*(char))->(int)
(	O
"Try 'exit' to leave %s\n"	*(char)
,	O
mu_program_name	*(char)
)	O
;	O
return	O
status	int
;	O
}	O
static	O
int	O
com_from	(int,*(*(char)))->(int)
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	*(*(char))
)	O
{	O
if	O
(	O
argc	long
==	O
1	int
)	O
{	O
if	O
(	O
!	O
sender	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
)	O
{	O
mu_error	(*(char))->(int)
(	O
_	O
(	O
"no sender address"	*(char)
)	O
)	O
;	O
return	O
0	int
;	O
}	O
}	O
else	O
{	O
free	(*(void))->(void)
(	O
sender	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
)	O
;	O
sender	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
=	O
mu_strdup	(*(char))->(*(char))
(	O
argv	*(*(char))
[	O
1	int
]	O
)	O
;	O
}	O
return	O
smtp_error_handler	(int)->(int)
(	O
mu_smtp_mail_basic	(*(struct),*(char),*(char))->(int)
(	O
smtp	*(struct)
,	O
sender	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
,	O
NULL	O
)	O
)	O
;	O
}	O
static	O
int	O
send_rcpt_to	(*(void),*(void))->(int)
(	O
void	O
*	O
item	*(void)
,	O
void	O
*	O
data	*(void)
)	O
{	O
return	O
smtp_error_handler	(int)->(int)
(	O
mu_smtp_rcpt_basic	(*(struct),*(char),*(char))->(int)
(	O
smtp	*(struct)
,	O
(	O
char	O
*	O
)	O
item	*(void)
,	O
NULL	O
)	O
)	O
;	O
}	O
static	O
int	O
com_to	(int,*(*(char)))->(int)
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	*(*(char))
)	O
{	O
int	O
rc	int
;	O
if	O
(	O
argc	long
==	O
1	int
)	O
{	O
if	O
(	O
mu_list_is_empty	(*(struct))->(int)
(	O
recipients	*(struct)
)	O
)	O
{	O
mu_error	(*(char))->(int)
(	O
_	O
(	O
"no recipients"	*(char)
)	O
)	O
;	O
return	O
1	int
;	O
}	O
mu_list_foreach	(*(struct),*((*(void),*(void))->(int)),*(void))->(int)
(	O
recipients	*(struct)
,	O
send_rcpt_to	(*(void),*(void))->(int)
,	O
NULL	O
)	O
;	O
rc	int
=	O
0	int
;	O
}	O
else	O
{	O
if	O
(	O
!	O
recipients	*(struct)
)	O
mu_list_create	(*(*(struct)))->(int)
(	O
&	O
recipients	*(struct)
)	O
;	O
mu_list_set_destroy_item	(*(struct),*((*(void))->(void)))->(*((*(void))->(void)))
(	O
recipients	*(struct)
,	O
mu_list_free_item	(*(void))->(void)
)	O
;	O
rc	int
=	O
smtp_error_handler	(int)->(int)
(	O
mu_smtp_rcpt_basic	(*(struct),*(char),*(char))->(int)
(	O
smtp	*(struct)
,	O
argv	*(*(char))
[	O
1	int
]	O
,	O
NULL	O
)	O
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
mu_list_append	(*(struct),*(void))->(int)
(	O
recipients	*(struct)
,	O
mu_strdup	(*(char))->(*(char))
(	O
argv	*(*(char))
[	O
1	int
]	O
)	O
)	O
;	O
}	O
return	O
rc	int
;	O
}	O
static	O
int	O
edit	(*(char))->(int)
(	O
const	O
char	O
*	O
file	*(char)
)	O
{	O
char	O
*	O
ed	*(char)
;	O
char	O
*	O
edv	array(*(char))
[	O
3	int
]	O
;	O
int	O
rc	int
,	O
status	int
;	O
ed	*(char)
=	O
getenv	(*(char))->(*(char))
(	O
"VISUAL"	*(char)
)	O
;	O
if	O
(	O
!	O
ed	*(char)
)	O
{	O
ed	*(char)
=	O
getenv	(*(char))->(*(char))
(	O
"EDITOR"	*(char)
)	O
;	O
if	O
(	O
!	O
ed	*(char)
)	O
ed	*(char)
=	O
"/bin/ed"	*(char)
;	O
}	O
edv	array(*(char))
[	O
0	int
]	O
=	O
ed	*(char)
;	O
edv	array(*(char))
[	O
1	int
]	O
=	O
(	O
char	O
*	O
)	O
file	*(char)
;	O
edv	array(*(char))
[	O
2	int
]	O
=	O
NULL	O
;	O
rc	int
=	O
mu_spawnvp	(*(char),array(*(char)),*(int))->(int)
(	O
edv	array(*(char))
[	O
0	int
]	O
,	O
edv	array(*(char))
,	O
&	O
status	int
)	O
;	O
if	O
(	O
rc	int
)	O
mu_diag_funcall	(int,*(char),*(char),int)->(void)
(	O
MU_DIAG_ERROR	O
,	O
"mu_spawnvp"	*(char)
,	O
edv	array(*(char))
[	O
0	int
]	O
,	O
rc	int
)	O
;	O
return	O
rc	int
;	O
}	O
struct	O
rcptout	struct(*(struct),int)
{	O
mu_stream_t	*(struct)
str	*(char)
;	O
int	O
n	*(long)
;	O
}	O
;	O
static	O
int	O
print_rcpt	(*(void),*(void))->(int)
(	O
void	O
*	O
item	*(void)
,	O
void	O
*	O
data	*(void)
)	O
{	O
struct	O
rcptout	struct(*(struct),int)
*	O
p	*(char)
=	O
data	*(void)
;	O
if	O
(	O
p	*(char)
->	O
n	*(long)
++	O
)	O
mu_stream_write	(*(struct),*(void),long,*(long))->(int)
(	O
p	*(char)
->	O
str	*(char)
,	O
", "	*(char)
,	O
2	int
,	O
NULL	O
)	O
;	O
mu_stream_printf	(*(struct),*(char))->(int)
(	O
p	*(char)
->	O
str	*(char)
,	O
"%s"	*(char)
,	O
(	O
char	O
*	O
)	O
item	*(void)
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
edit_file	(*(char),int)->(int)
(	O
const	O
char	O
*	O
fname	*(char)
,	O
int	O
inplace	int
)	O
{	O
int	O
rc	int
;	O
if	O
(	O
fname	*(char)
&&	O
!	O
inplace	int
)	O
{	O
mu_stream_t	*(struct)
istr	*(struct)
,	O
ostr	*(struct)
;	O
rc	int
=	O
mu_file_stream_create	(*(*(struct)),*(char),int)->(int)
(	O
&	O
istr	*(struct)
,	O
fname	*(char)
,	O
MU_STREAM_READ	int
|	O
MU_STREAM_SEEK	int
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
char	O
*	O
tempfile	*(char)
=	O
mu_tempname	(*(char))->(*(char))
(	O
NULL	O
)	O
;	O
rc	int
=	O
mu_file_stream_create	(*(*(struct)),*(char),int)->(int)
(	O
&	O
ostr	*(struct)
,	O
tempfile	*(char)
,	O
MU_STREAM_CREAT	int
|	O
MU_STREAM_WRITE	int
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
free	(*(void))->(void)
(	O
tempfile	*(char)
)	O
;	O
mu_error	(*(char))->(int)
(	O
_	O
(	O
"cannot create temporary file: %s"	*(char)
)	O
,	O
mu_strerror	(int)->(*(char))
(	O
rc	int
)	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
rc	int
=	O
mu_stream_copy	(*(struct),*(struct),long,*(long))->(int)
(	O
ostr	*(struct)
,	O
istr	*(struct)
,	O
0	int
,	O
NULL	O
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
unlink	(*(char))->(int)
(	O
tempfile	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
tempfile	*(char)
)	O
;	O
mu_error	(*(char))->(int)
(	O
_	O
(	O
"error copying to temporary file: %s"	*(char)
)	O
,	O
mu_strerror	(int)->(*(char))
(	O
rc	int
)	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
mu_stream_unref	(*(struct))->(void)
(	O
ostr	*(struct)
)	O
;	O
free	(*(void))->(void)
(	O
msgfile	*(char)
)	O
;	O
msgfile	*(char)
=	O
tempfile	*(char)
;	O
temp_msgfile	int
=	O
1	int
;	O
}	O
else	O
if	O
(	O
rc	int
!=	O
ENOENT	int
)	O
{	O
mu_diag_funcall	(int,*(char),*(char),int)->(void)
(	O
MU_DIAG_ERROR	O
,	O
"mu_file_stream_create"	*(char)
,	O
fname	*(char)
,	O
rc	int
)	O
;	O
return	O
1	int
;	O
}	O
mu_stream_unref	(*(struct))->(void)
(	O
istr	*(struct)
)	O
;	O
}	O
else	O
if	O
(	O
!	O
fname	*(char)
)	O
{	O
struct	O
rcptout	struct(*(struct),int)
rcptout	struct(*(struct),int)
;	O
if	O
(	O
temp_msgfile	int
)	O
unlink	(*(char))->(int)
(	O
msgfile	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
msgfile	*(char)
)	O
;	O
msgfile	*(char)
=	O
mu_tempname	(*(char))->(*(char))
(	O
NULL	O
)	O
;	O
temp_msgfile	int
=	O
1	int
;	O
rc	int
=	O
mu_file_stream_create	(*(*(struct)),*(char),int)->(int)
(	O
&	O
rcptout	struct(*(struct),int)
.	O
str	*(char)
,	O
msgfile	*(char)
,	O
MU_STREAM_CREAT	int
|	O
MU_STREAM_WRITE	int
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_error	(*(char))->(int)
(	O
_	O
(	O
"cannot open temporary file for writing: %s"	*(char)
)	O
,	O
mu_strerror	(int)->(*(char))
(	O
rc	int
)	O
)	O
;	O
return	O
1	int
;	O
}	O
rcptout	struct(*(struct),int)
.	O
n	*(long)
=	O
0	int
;	O
if	O
(	O
sender	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
)	O
mu_stream_printf	(*(struct),*(char))->(int)
(	O
rcptout	struct(*(struct),int)
.	O
str	*(char)
,	O
"From: %s\n"	*(char)
,	O
sender	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
)	O
;	O
else	O
mu_stream_printf	(*(struct),*(char))->(int)
(	O
rcptout	struct(*(struct),int)
.	O
str	*(char)
,	O
"From: \n"	*(char)
)	O
;	O
mu_stream_printf	(*(struct),*(char))->(int)
(	O
rcptout	struct(*(struct),int)
.	O
str	*(char)
,	O
"To: "	*(char)
)	O
;	O
mu_list_foreach	(*(struct),*((*(void),*(void))->(int)),*(void))->(int)
(	O
recipients	*(struct)
,	O
print_rcpt	(*(void),*(void))->(int)
,	O
&	O
rcptout	struct(*(struct),int)
)	O
;	O
mu_stream_write	(*(struct),*(void),long,*(long))->(int)
(	O
rcptout	struct(*(struct),int)
.	O
str	*(char)
,	O
"\n"	*(char)
,	O
1	int
,	O
NULL	O
)	O
;	O
mu_stream_printf	(*(struct),*(char))->(int)
(	O
rcptout	struct(*(struct),int)
.	O
str	*(char)
,	O
"Subject: \n\n"	*(char)
)	O
;	O
mu_stream_unref	(*(struct))->(void)
(	O
rcptout	struct(*(struct),int)
.	O
str	*(char)
)	O
;	O
}	O
else	O
{	O
free	(*(void))->(void)
(	O
msgfile	*(char)
)	O
;	O
msgfile	*(char)
=	O
mu_strdup	(*(char))->(*(char))
(	O
fname	*(char)
)	O
;	O
temp_msgfile	int
=	O
0	int
;	O
}	O
do	O
{	O
if	O
(	O
edit	(*(char))->(int)
(	O
msgfile	*(char)
)	O
)	O
return	O
1	int
;	O
}	O
while	O
(	O
(	O
rc	int
=	O
mu_getans	(*(char),*(char))->(int)
(	O
"seqSEQ"	*(char)
,	O
_	O
(	O
"What now: [s]end, [e]dit, [q]uit"	*(char)
)	O
)	O
)	O
==	O
'e'	O
||	O
rc	int
==	O
'E'	O
)	O
;	O
return	O
rc	int
==	O
'q'	O
||	O
rc	int
==	O
'Q'	O
;	O
}	O
static	O
int	O
com_send	(int,*(*(char)))->(int)
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	*(*(char))
)	O
{	O
int	O
rc	int
;	O
mu_stream_t	*(struct)
instr	*(struct)
;	O
if	O
(	O
argc	long
==	O
1	int
)	O
{	O
if	O
(	O
msgfile	*(char)
)	O
{	O
switch	O
(	O
mu_getans	(*(char),*(char))->(int)
(	O
"rReEdD"	*(char)
,	O
_	O
(	O
"Previous message exists. "	*(char)
"What now: [r]euse, [e]dit, "	*(char)
"[u]se as a template or\n"	*(char)
"[d]rop and start from scratch"	*(char)
)	O
)	O
)	O
{	O
case	O
'r'	O
:	O
case	O
'R'	O
:	O
rc	int
=	O
0	int
;	O
break	O
;	O
case	O
'e'	O
:	O
case	O
'E'	O
:	O
rc	int
=	O
edit_file	(*(char),int)->(int)
(	O
msgfile	*(char)
,	O
1	int
)	O
;	O
break	O
;	O
case	O
'd'	O
:	O
case	O
'D'	O
:	O
if	O
(	O
temp_msgfile	int
)	O
unlink	(*(char))->(int)
(	O
msgfile	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
msgfile	*(char)
)	O
;	O
msgfile	*(char)
=	O
NULL	O
;	O
temp_msgfile	int
=	O
0	int
;	O
rc	int
=	O
edit_file	(*(char),int)->(int)
(	O
NULL	O
,	O
0	int
)	O
;	O
break	O
;	O
case	O
'u'	O
:	O
case	O
'U'	O
:	O
rc	int
=	O
edit_file	(*(char),int)->(int)
(	O
msgfile	*(char)
,	O
0	int
)	O
;	O
}	O
}	O
else	O
rc	int
=	O
edit_file	(*(char),int)->(int)
(	O
NULL	O
,	O
0	int
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
0	int
;	O
}	O
else	O
{	O
if	O
(	O
temp_msgfile	int
)	O
unlink	(*(char))->(int)
(	O
msgfile	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
msgfile	*(char)
)	O
;	O
msgfile	*(char)
=	O
NULL	O
;	O
temp_msgfile	int
=	O
0	int
;	O
msgfile	*(char)
=	O
mu_strdup	(*(char))->(*(char))
(	O
argv	*(*(char))
[	O
1	int
]	O
)	O
;	O
}	O
rc	int
=	O
mu_file_stream_create	(*(*(struct)),*(char),int)->(int)
(	O
&	O
instr	*(struct)
,	O
msgfile	*(char)
,	O
MU_STREAM_READ	int
|	O
MU_STREAM_SEEK	int
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_diag_funcall	(int,*(char),*(char),int)->(void)
(	O
MU_DIAG_ERROR	O
,	O
"mu_file_stream_create"	*(char)
,	O
msgfile	*(char)
,	O
rc	int
)	O
;	O
return	O
1	int
;	O
}	O
rc	int
=	O
mu_smtp_send_stream	(*(struct),*(struct))->(int)
(	O
smtp	*(struct)
,	O
instr	*(struct)
)	O
;	O
mu_stream_unref	(*(struct))->(void)
(	O
instr	*(struct)
)	O
;	O
if	O
(	O
rc	int
)	O
smtp_error_handler	(int)->(int)
(	O
rc	int
)	O
;	O
else	O
rc	int
=	O
smtp_error_handler	(int)->(int)
(	O
mu_smtp_dot	(*(struct))->(int)
(	O
smtp	*(struct)
)	O
)	O
;	O
return	O
rc	int
;	O
}	O
static	O
int	O
com_starttls	(int,*(*(char)))->(int)
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	*(*(char))
)	O
{	O
if	O
(	O
mu_smtp_capa_test	(*(struct),*(char),*(*(char)))->(int)
(	O
smtp	*(struct)
,	O
"STARTTLS"	*(char)
,	O
NULL	O
)	O
==	O
0	int
)	O
return	O
smtp_error_handler	(int)->(int)
(	O
mu_smtp_starttls	(*(struct))->(int)
(	O
smtp	*(struct)
)	O
)	O
;	O
else	O
mu_error	(*(char))->(int)
(	O
_	O
(	O
"remote party does not offer STARTTLS"	*(char)
)	O
)	O
;	O
return	O
1	int
;	O
}	O
static	O
int	O
com_auth	(int,*(*(char)))->(int)
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	*(*(char))
)	O
{	O
int	O
rc	int
,	O
i	long
;	O
rc	int
=	O
mu_smtp_clear_auth_mech	(*(struct))->(int)
(	O
smtp	*(struct)
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_diag_funcall	(int,*(char),*(char),int)->(void)
(	O
MU_DIAG_ERROR	O
,	O
"mu_smtp_clear_auth_mech"	*(char)
,	O
NULL	O
,	O
rc	int
)	O
;	O
return	O
MU_ERR_FAILURE	O
;	O
}	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<	O
argc	long
;	O
i	long
++	O
)	O
if	O
(	O
(	O
rc	int
=	O
mu_smtp_add_auth_mech	(*(struct),*(char))->(int)
(	O
smtp	*(struct)
,	O
argv	*(*(char))
[	O
1	int
]	O
)	O
)	O
)	O
{	O
mu_diag_funcall	(int,*(char),*(char),int)->(void)
(	O
MU_DIAG_ERROR	O
,	O
"mu_smtp_add_auth_mech"	*(char)
,	O
NULL	O
,	O
rc	int
)	O
;	O
return	O
MU_ERR_FAILURE	O
;	O
}	O
rc	int
=	O
mu_smtp_auth	(*(struct))->(int)
(	O
smtp	*(struct)
)	O
;	O
switch	O
(	O
rc	int
)	O
{	O
case	O
0	int
:	O
smtp_session_status	enum(int,int,int)
=	O
smtp_session_logged_in	int
;	O
break	O
;	O
case	O
ENOSYS	int
:	O
mu_error	(*(char))->(int)
(	O
_	O
(	O
"authentication not implemented"	*(char)
)	O
)	O
;	O
break	O
;	O
case	O
MU_ERR_NOENT	O
:	O
mu_error	(*(char))->(int)
(	O
_	O
(	O
"no suitable authentication mechanism found"	*(char)
)	O
)	O
;	O
break	O
;	O
default	O
:	O
smtp_error_handler	(int)->(int)
(	O
rc	int
)	O
;	O
return	O
rc	int
;	O
}	O
return	O
0	int
;	O
}	O
static	O
struct	O
mu_kwd	struct(*(char),int)
paramtab	*(*(struct))
[	O
]	O
=	O
{	O
{	O
"domain"	*(char)
,	O
MU_SMTP_PARAM_DOMAIN	int
}	O
,	O
{	O
"username"	*(char)
,	O
MU_SMTP_PARAM_USERNAME	int
}	O
,	O
{	O
"password"	*(char)
,	O
MU_SMTP_PARAM_PASSWORD	int
}	O
,	O
{	O
"service"	*(char)
,	O
MU_SMTP_PARAM_SERVICE	int
}	O
,	O
{	O
"realm"	*(char)
,	O
MU_SMTP_PARAM_REALM	int
}	O
,	O
{	O
"host"	*(char)
,	O
MU_SMTP_PARAM_HOST	int
}	O
,	O
{	O
"url"	*(char)
,	O
MU_SMTP_PARAM_URL	int
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
static	O
int	O
get_param	(int,*(char),*(*(char)))->(int)
(	O
int	O
param	*(struct)
,	O
char	O
*	O
prompt	*(char)
,	O
char	O
*	O
*	O
retval	*(*(struct(*(char),*(char),*((enum(int,int),*`,*`,*`,*`,*`)->(int)),*(void),long,*(struct),*(char),*(void))))
)	O
{	O
int	O
rc	int
;	O
if	O
(	O
param	*(struct)
==	O
MU_SMTP_PARAM_PASSWORD	int
)	O
{	O
rc	int
=	O
mu_getpass	(*(struct),*(struct),*(char),*(*(char)))->(int)
(	O
mu_strin	*(struct)
,	O
mu_strout	*(struct)
,	O
prompt	*(char)
,	O
retval	*(*(struct(*(char),*(char),*((enum(int,int),*`,*`,*`,*`,*`)->(int)),*(void),long,*(struct),*(char),*(void))))
)	O
;	O
if	O
(	O
rc	int
)	O
mu_diag_funcall	(int,*(char),*(char),int)->(void)
(	O
MU_DIAG_ERROR	O
,	O
"mu_getpass"	*(char)
,	O
NULL	O
,	O
rc	int
)	O
;	O
}	O
else	O
{	O
char	O
*	O
buf	*(char)
=	O
NULL	O
;	O
size_t	long
size	long
=	O
0	int
;	O
rc	int
=	O
mu_stream_write	(*(struct),*(void),long,*(long))->(int)
(	O
mu_strout	*(struct)
,	O
prompt	*(char)
,	O
strlen	(*(char))->(long)
(	O
prompt	*(char)
)	O
,	O
NULL	O
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
mu_stream_flush	(*(struct))->(int)
(	O
mu_strout	*(struct)
)	O
;	O
rc	int
=	O
mu_stream_getline	(*(struct),*(*(char)),*(long),*(long))->(int)
(	O
mu_strin	*(struct)
,	O
&	O
buf	*(char)
,	O
&	O
size	long
,	O
NULL	O
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
mu_rtrim_cset	(*(char),*(char))->(long)
(	O
buf	*(char)
,	O
"\n"	*(char)
)	O
;	O
*	O
retval	*(*(struct(*(char),*(char),*((enum(int,int),*`,*`,*`,*`,*`)->(int)),*(void),long,*(struct),*(char),*(void))))
=	O
buf	*(char)
;	O
}	O
}	O
return	O
rc	int
;	O
}	O
static	O
int	O
com_set	(int,*(*(char)))->(int)
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	*(*(char))
)	O
{	O
int	O
param	*(struct)
,	O
i	long
,	O
rc	int
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<	O
argc	long
;	O
i	long
+=	O
2	int
)	O
{	O
if	O
(	O
mu_kwd_xlat_name	(*(struct(*(char),int)),*(char),*(int))->(int)
(	O
paramtab	*(*(struct))
,	O
argv	*(*(char))
[	O
i	long
]	O
,	O
&	O
param	*(struct)
)	O
)	O
{	O
mu_error	(*(char))->(int)
(	O
_	O
(	O
"unrecognized parameter: %s"	*(char)
)	O
,	O
argv	*(*(char))
[	O
i	long
]	O
)	O
;	O
continue	O
;	O
}	O
if	O
(	O
i	long
+	O
1	int
<	O
argc	long
)	O
{	O
rc	int
=	O
mu_smtp_set_param	(*(struct),int,*(char))->(int)
(	O
smtp	*(struct)
,	O
param	*(struct)
,	O
argv	*(*(char))
[	O
i	long
+	O
1	int
]	O
)	O
;	O
if	O
(	O
rc	int
)	O
mu_diag_funcall	(int,*(char),*(char),int)->(void)
(	O
MU_DIAG_ERROR	O
,	O
"mu_smtp_set_param"	*(char)
,	O
argv	*(*(char))
[	O
i	long
]	O
,	O
rc	int
)	O
;	O
}	O
else	O
{	O
char	O
*	O
prompt	*(char)
,	O
*	O
value	*(void)
;	O
mu_asprintf	(*(*(char)),*(char))->(int)
(	O
&	O
prompt	*(char)
,	O
"%s: "	*(char)
,	O
argv	*(*(char))
[	O
i	long
]	O
)	O
;	O
rc	int
=	O
get_param	(int,*(char),*(*(char)))->(int)
(	O
param	*(struct)
,	O
prompt	*(char)
,	O
&	O
value	*(void)
)	O
;	O
free	(*(void))->(void)
(	O
prompt	*(char)
)	O
;	O
if	O
(	O
rc	int
)	O
mu_error	(*(char))->(int)
(	O
_	O
(	O
"error reading value: %s"	*(char)
)	O
,	O
mu_strerror	(int)->(*(char))
(	O
rc	int
)	O
)	O
;	O
else	O
{	O
rc	int
=	O
mu_smtp_set_param	(*(struct),int,*(char))->(int)
(	O
smtp	*(struct)
,	O
param	*(struct)
,	O
value	*(void)
)	O
;	O
if	O
(	O
param	*(struct)
==	O
MU_SMTP_PARAM_PASSWORD	int
)	O
memset	(*(void),int,long)->(*(void))
(	O
value	*(void)
,	O
0	int
,	O
strlen	(*(char))->(long)
(	O
value	*(void)
)	O
)	O
;	O
if	O
(	O
rc	int
)	O
mu_diag_funcall	(int,*(char),*(char),int)->(void)
(	O
MU_DIAG_ERROR	O
,	O
"mu_smtp_set_param"	*(char)
,	O
argv	*(*(char))
[	O
i	long
]	O
,	O
rc	int
)	O
;	O
free	(*(void))->(void)
(	O
value	*(void)
)	O
;	O
}	O
}	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
com_clear	(int,*(*(char)))->(int)
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	*(*(char))
)	O
{	O
int	O
param	*(struct)
,	O
i	long
,	O
rc	int
;	O
if	O
(	O
argc	long
>	O
1	int
)	O
{	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<	O
argc	long
;	O
i	long
++	O
)	O
{	O
if	O
(	O
mu_kwd_xlat_name	(*(struct(*(char),int)),*(char),*(int))->(int)
(	O
paramtab	*(*(struct))
,	O
argv	*(*(char))
[	O
i	long
]	O
,	O
&	O
param	*(struct)
)	O
)	O
{	O
mu_error	(*(char))->(int)
(	O
_	O
(	O
"unrecognized parameter: %s"	*(char)
)	O
,	O
argv	*(*(char))
[	O
i	long
]	O
)	O
;	O
continue	O
;	O
}	O
rc	int
=	O
mu_smtp_set_param	(*(struct),int,*(char))->(int)
(	O
smtp	*(struct)
,	O
param	*(struct)
,	O
NULL	O
)	O
;	O
if	O
(	O
rc	int
)	O
mu_diag_funcall	(int,*(char),*(char),int)->(void)
(	O
MU_DIAG_ERROR	O
,	O
"mu_smtp_set_param"	*(char)
,	O
argv	*(*(char))
[	O
i	long
]	O
,	O
rc	int
)	O
;	O
}	O
}	O
else	O
{	O
for	O
(	O
i	long
=	O
0	int
;	O
paramtab	*(*(struct))
[	O
i	long
]	O
.	O
name	*(char)
;	O
i	long
++	O
)	O
{	O
rc	int
=	O
mu_smtp_set_param	(*(struct),int,*(char))->(int)
(	O
smtp	*(struct)
,	O
paramtab	*(*(struct))
[	O
i	long
]	O
.	O
tok	int
,	O
NULL	O
)	O
;	O
if	O
(	O
rc	int
)	O
mu_diag_funcall	(int,*(char),*(char),int)->(void)
(	O
MU_DIAG_ERROR	O
,	O
"mu_smtp_set_param"	*(char)
,	O
paramtab	*(*(struct))
[	O
i	long
]	O
.	O
name	*(char)
,	O
rc	int
)	O
;	O
}	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
com_list_param	(int,*(*(char)))->(int)
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	*(*(char))
)	O
{	O
int	O
param	*(struct)
,	O
i	long
,	O
rc	int
;	O
const	O
char	O
*	O
value	*(void)
;	O
if	O
(	O
!	O
smtp	*(struct)
)	O
{	O
mu_printf	(*(char))->(int)
(	O
"%s\n"	*(char)
,	O
_	O
(	O
"no connection yet"	*(char)
)	O
)	O
;	O
return	O
0	int
;	O
}	O
if	O
(	O
argc	long
>	O
1	int
)	O
{	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<	O
argc	long
;	O
i	long
++	O
)	O
{	O
if	O
(	O
mu_kwd_xlat_name	(*(struct(*(char),int)),*(char),*(int))->(int)
(	O
paramtab	*(*(struct))
,	O
argv	*(*(char))
[	O
i	long
]	O
,	O
&	O
param	*(struct)
)	O
)	O
{	O
mu_error	(*(char))->(int)
(	O
_	O
(	O
"unrecognized parameter: %s"	*(char)
)	O
,	O
argv	*(*(char))
[	O
i	long
]	O
)	O
;	O
continue	O
;	O
}	O
rc	int
=	O
mu_smtp_get_param	(*(struct),int,*(*(char)))->(int)
(	O
smtp	*(struct)
,	O
param	*(struct)
,	O
&	O
value	*(void)
)	O
;	O
if	O
(	O
rc	int
)	O
mu_diag_funcall	(int,*(char),*(char),int)->(void)
(	O
MU_DIAG_ERROR	O
,	O
"mu_smtp_get_param"	*(char)
,	O
argv	*(*(char))
[	O
i	long
]	O
,	O
rc	int
)	O
;	O
else	O
if	O
(	O
value	*(void)
)	O
mu_printf	(*(char))->(int)
(	O
"%s = %s\n"	*(char)
,	O
argv	*(*(char))
[	O
i	long
]	O
,	O
value	*(void)
)	O
;	O
else	O
mu_printf	(*(char))->(int)
(	O
_	O
(	O
"%s not set\n"	*(char)
)	O
,	O
argv	*(*(char))
[	O
i	long
]	O
)	O
;	O
}	O
}	O
else	O
{	O
for	O
(	O
i	long
=	O
0	int
;	O
paramtab	*(*(struct))
[	O
i	long
]	O
.	O
name	*(char)
;	O
i	long
++	O
)	O
{	O
rc	int
=	O
mu_smtp_get_param	(*(struct),int,*(*(char)))->(int)
(	O
smtp	*(struct)
,	O
paramtab	*(*(struct))
[	O
i	long
]	O
.	O
tok	int
,	O
&	O
value	*(void)
)	O
;	O
if	O
(	O
rc	int
)	O
mu_diag_funcall	(int,*(char),*(char),int)->(void)
(	O
MU_DIAG_ERROR	O
,	O
"mu_smtp_get_param"	*(char)
,	O
paramtab	*(*(struct))
[	O
i	long
]	O
.	O
name	*(char)
,	O
rc	int
)	O
;	O
else	O
if	O
(	O
value	*(void)
)	O
mu_printf	(*(char))->(int)
(	O
"%s = %s\n"	*(char)
,	O
paramtab	*(*(struct))
[	O
i	long
]	O
.	O
name	*(char)
,	O
value	*(void)
)	O
;	O
else	O
mu_printf	(*(char))->(int)
(	O
_	O
(	O
"%s not set\n"	*(char)
)	O
,	O
paramtab	*(*(struct))
[	O
i	long
]	O
.	O
name	*(char)
)	O
;	O
}	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
com_smtp_command	(int,*(*(char)))->(int)
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	*(*(char))
)	O
{	O
int	O
rc	int
;	O
mu_iterator_t	*(struct)
itr	*(struct)
;	O
rc	int
=	O
mu_smtp_cmd	(*(struct),int,*(*(char)))->(int)
(	O
smtp	*(struct)
,	O
argc	long
-	O
1	int
,	O
argv	*(*(char))
+	O
1	int
)	O
;	O
smtp_error_handler	(int)->(int)
(	O
rc	int
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
rc	int
=	O
mu_smtp_get_reply_iterator	(*(struct),*(*(struct)))->(int)
(	O
smtp	*(struct)
,	O
&	O
itr	*(struct)
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_diag_funcall	(int,*(char),*(char),int)->(void)
(	O
MU_DIAG_ERROR	O
,	O
"mu_smtp_get_reply_iterator"	*(char)
,	O
NULL	O
,	O
rc	int
)	O
;	O
return	O
1	int
;	O
}	O
for	O
(	O
mu_iterator_first	(*(struct))->(int)
(	O
itr	*(struct)
)	O
;	O
!	O
mu_iterator_is_done	(*(struct))->(int)
(	O
itr	*(struct)
)	O
;	O
mu_iterator_next	(*(struct))->(int)
(	O
itr	*(struct)
)	O
)	O
{	O
char	O
*	O
str	*(char)
=	O
NULL	O
;	O
mu_iterator_current	(*(struct),*(*(void)))->(int)
(	O
itr	*(struct)
,	O
(	O
void	O
*	O
*	O
)	O
&	O
str	*(char)
)	O
;	O
mu_printf	(*(char))->(int)
(	O
"%s\n"	*(char)
,	O
str	*(char)
)	O
;	O
}	O
mu_iterator_destroy	(*(*(struct)))->(void)
(	O
&	O
itr	*(struct)
)	O
;	O
return	O
0	int
;	O
}	O
struct	O
mutool_command	struct(*(char),int,int,int,*((int,*(*(char)))->(int)),*(char),*(char))
smtp_comtab	array(struct(*(char),int,int,int,*((int,*(*(char)))->(int)),*(char),*(char)))
[	O
]	O
=	O
{	O
{	O
"connect"	*(char)
,	O
1	int
,	O
4	int
,	O
0	int
,	O
com_connect	(int,*(*(char)))->(int)
,	O
N_	O
(	O
"[-tls] HOSTNAME [PORT]"	*(char)
)	O
,	O
N_	O
(	O
"open connection"	*(char)
)	O
}	O
,	O
{	O
"set"	*(char)
,	O
2	int
,	O
-	O
1	int
,	O
0	int
,	O
com_set	(int,*(*(char)))->(int)
,	O
N_	O
(	O
"PARAM [ARG...]"	*(char)
)	O
,	O
N_	O
(	O
"Set connection parameter"	*(char)
)	O
}	O
,	O
{	O
"clear"	*(char)
,	O
1	int
,	O
-	O
1	int
,	O
0	int
,	O
com_clear	(int,*(*(char)))->(int)
,	O
N_	O
(	O
"[PARAM...]"	*(char)
)	O
,	O
N_	O
(	O
"Clear connection parameters"	*(char)
)	O
}	O
,	O
{	O
"list"	*(char)
,	O
1	int
,	O
-	O
1	int
,	O
0	int
,	O
com_list_param	(int,*(*(char)))->(int)
,	O
N_	O
(	O
"[PARAM...]"	*(char)
)	O
,	O
N_	O
(	O
"List connection parameters"	*(char)
)	O
}	O
,	O
{	O
"auth"	*(char)
,	O
2	int
,	O
-	O
1	int
,	O
0	int
,	O
com_auth	(int,*(*(char)))->(int)
,	O
N_	O
(	O
"MECH [MECH...]"	*(char)
)	O
,	O
N_	O
(	O
"Authenticate"	*(char)
)	O
}	O
,	O
{	O
"ehlo"	*(char)
,	O
1	int
,	O
2	int
,	O
0	int
,	O
com_ehlo	(int,*(*(char)))->(int)
,	O
N_	O
(	O
"[DOMAIN]"	*(char)
)	O
,	O
N_	O
(	O
"Greet the server"	*(char)
)	O
}	O
,	O
{	O
"capa"	*(char)
,	O
1	int
,	O
-	O
1	int
,	O
0	int
,	O
com_capa	(int,*(*(char)))->(int)
,	O
N_	O
(	O
"[NAME...]"	*(char)
)	O
,	O
N_	O
(	O
"list server capabilities"	*(char)
)	O
}	O
,	O
{	O
"starttls"	*(char)
,	O
1	int
,	O
1	int
,	O
0	int
,	O
com_starttls	(int,*(*(char)))->(int)
,	O
NULL	O
,	O
N_	O
(	O
"initiate encrypted connection"	*(char)
)	O
}	O
,	O
{	O
"rset"	*(char)
,	O
1	int
,	O
1	int
,	O
0	int
,	O
com_rset	(int,*(*(char)))->(int)
,	O
NULL	O
,	O
N_	O
(	O
"reset the session state"	*(char)
)	O
}	O
,	O
{	O
"from"	*(char)
,	O
1	int
,	O
2	int
,	O
0	int
,	O
com_from	(int,*(*(char)))->(int)
,	O
N_	O
(	O
"[EMAIL]"	*(char)
)	O
,	O
N_	O
(	O
"set sender email"	*(char)
)	O
}	O
,	O
{	O
"to"	*(char)
,	O
1	int
,	O
2	int
,	O
0	int
,	O
com_to	(int,*(*(char)))->(int)
,	O
N_	O
(	O
"[EMAIL]"	*(char)
)	O
,	O
N_	O
(	O
"set recipient email"	*(char)
)	O
}	O
,	O
{	O
"send"	*(char)
,	O
1	int
,	O
2	int
,	O
0	int
,	O
com_send	(int,*(*(char)))->(int)
,	O
N_	O
(	O
"[FILE]"	*(char)
)	O
,	O
N_	O
(	O
"send message"	*(char)
)	O
}	O
,	O
{	O
"smtp"	*(char)
,	O
2	int
,	O
-	O
1	int
,	O
0	int
,	O
com_smtp_command	(int,*(*(char)))->(int)
,	O
N_	O
(	O
"COMMAND [ARGS...]"	*(char)
)	O
,	O
N_	O
(	O
"send an arbitrary COMMAND"	*(char)
)	O
}	O
,	O
{	O
"quit"	*(char)
,	O
1	int
,	O
1	int
,	O
0	int
,	O
com_quit	(int,*(*(char)))->(int)
,	O
NULL	O
,	O
N_	O
(	O
"quit the session"	*(char)
)	O
}	O
,	O
{	O
"verbose"	*(char)
,	O
1	int
,	O
4	int
,	O
0	int
,	O
com_verbose	(int,*(*(char)))->(int)
,	O
"[on|off|mask|unmask] [secure [payload]]"	*(char)
,	O
N_	O
(	O
"control the protocol tracing"	*(char)
)	O
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
int	O
main	(int,*(*(char)))->(int)
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	*(*(char))
)	O
{	O
mu_registrar_record	(*(struct(int,*(char),int,int,int,*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*(void),*((*`,*`,int)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,int)->(int)))))->(int)
(	O
mu_smtp_record	*(struct(int,*(char),int,int,int,*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*(void),*((*(struct`),*(struct`),int)->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(char),int)->(int))))
)	O
;	O
mu_registrar_record	(*(struct(int,*(char),int,int,int,*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*(void),*((*`,*`,int)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,int)->(int)))))->(int)
(	O
mu_smtps_record	*(struct(int,*(char),int,int,int,*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*(void),*((*(struct`),*(struct`),int)->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(char),int)->(int))))
)	O
;	O
mu_action_getopt	(*(int),*(*(*(char))),*(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*`,*`,*`)->(void)),*(char))),*(char),*(char))->(void)
(	O
&	O
argc	long
,	O
&	O
argv	*(*(char))
,	O
NULL	O
,	O
smtp_docstring	array(char)
,	O
NULL	O
)	O
;	O
if	O
(	O
argc	long
)	O
{	O
mu_error	(*(char))->(int)
(	O
_	O
(	O
"bad arguments"	*(char)
)	O
)	O
;	O
return	O
1	int
;	O
}	O
mutool_shell_prompt	*(char)
=	O
mu_strdup	(*(char))->(*(char))
(	O
"smtp> "	*(char)
)	O
;	O
smtp_prompt_env	()->(void)
(	O
)	O
;	O
mutool_shell	(*(char),*(struct(*(char),int,int,int,*((int,*`)->(int)),*(char),*(char))))->(int)
(	O
"smtp"	*(char)
,	O
smtp_comtab	array(struct(*(char),int,int,int,*((int,*(*(char)))->(int)),*(char),*(char)))
)	O
;	O
if	O
(	O
temp_msgfile	int
)	O
unlink	(*(char))->(int)
(	O
msgfile	*(char)
)	O
;	O
return	O
0	int
;	O
}	O
