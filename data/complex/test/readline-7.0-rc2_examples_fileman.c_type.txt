extern	O
char	O
*	O
xmalloc	(long)->(*(char))
PARAMS	O
(	O
(	O
size_t	long
)	O
)	O
;	O
void	O
initialize_readline	()->(void)
PARAMS	O
(	O
(	O
void	O
)	O
)	O
;	O
void	O
too_dangerous	(*(char))->(void)
PARAMS	O
(	O
(	O
char	O
*	O
)	O
)	O
;	O
int	O
execute_line	(*(char))->(int)
PARAMS	O
(	O
(	O
char	O
*	O
)	O
)	O
;	O
int	O
valid_argument	(*(char),*(char))->(int)
PARAMS	O
(	O
(	O
char	O
*	O
,	O
char	O
*	O
)	O
)	O
;	O
int	O
com_list	(*(char))->(int)
PARAMS	O
(	O
(	O
char	O
*	O
)	O
)	O
;	O
int	O
com_view	(*(char))->(int)
PARAMS	O
(	O
(	O
char	O
*	O
)	O
)	O
;	O
int	O
com_rename	(*(char))->(int)
PARAMS	O
(	O
(	O
char	O
*	O
)	O
)	O
;	O
int	O
com_stat	(*(char))->(int)
PARAMS	O
(	O
(	O
char	O
*	O
)	O
)	O
;	O
int	O
com_pwd	(*(char))->(int)
PARAMS	O
(	O
(	O
char	O
*	O
)	O
)	O
;	O
int	O
com_delete	(*(char))->(int)
PARAMS	O
(	O
(	O
char	O
*	O
)	O
)	O
;	O
int	O
com_help	(*(char))->(int)
PARAMS	O
(	O
(	O
char	O
*	O
)	O
)	O
;	O
int	O
com_cd	(*(char))->(int)
PARAMS	O
(	O
(	O
char	O
*	O
)	O
)	O
;	O
int	O
com_quit	(*(char))->(int)
PARAMS	O
(	O
(	O
char	O
*	O
)	O
)	O
;	O
typedef	O
struct	O
{	O
char	O
*	O
name	*(char)
;	O
rl_icpfunc_t	(*(char))->(int)
*	O
func	*((*(char))->(int))
;	O
char	O
*	O
doc	*(char)
;	O
}	O
COMMAND	struct(*(char),*((*(char))->(int)),*(char))
;	O
COMMAND	struct(*(char),*((*(char))->(int)),*(char))
commands	array(struct(*(char),*((*(char))->(int)),*(char)))
[	O
]	O
=	O
{	O
{	O
"cd"	*(char)
,	O
com_cd	(*(char))->(int)
,	O
"Change to directory DIR"	*(char)
}	O
,	O
{	O
"delete"	*(char)
,	O
com_delete	(*(char))->(int)
,	O
"Delete FILE"	*(char)
}	O
,	O
{	O
"help"	*(char)
,	O
com_help	(*(char))->(int)
,	O
"Display this text"	*(char)
}	O
,	O
{	O
"?"	*(char)
,	O
com_help	(*(char))->(int)
,	O
"Synonym for `help'"	*(char)
}	O
,	O
{	O
"list"	*(char)
,	O
com_list	(*(char))->(int)
,	O
"List files in DIR"	*(char)
}	O
,	O
{	O
"ls"	*(char)
,	O
com_list	(*(char))->(int)
,	O
"Synonym for `list'"	*(char)
}	O
,	O
{	O
"pwd"	*(char)
,	O
com_pwd	(*(char))->(int)
,	O
"Print the current working directory"	*(char)
}	O
,	O
{	O
"quit"	*(char)
,	O
com_quit	(*(char))->(int)
,	O
"Quit using Fileman"	*(char)
}	O
,	O
{	O
"rename"	*(char)
,	O
com_rename	(*(char))->(int)
,	O
"Rename FILE to NEWNAME"	*(char)
}	O
,	O
{	O
"stat"	*(char)
,	O
com_stat	(*(char))->(int)
,	O
"Print out statistics on FILE"	*(char)
}	O
,	O
{	O
"view"	*(char)
,	O
com_view	(*(char))->(int)
,	O
"View the contents of FILE"	*(char)
}	O
,	O
{	O
(	O
char	O
*	O
)	O
NULL	O
,	O
(	O
rl_icpfunc_t	(*(char))->(int)
*	O
)	O
NULL	O
,	O
(	O
char	O
*	O
)	O
NULL	O
}	O
}	O
;	O
char	O
*	O
stripwhite	()->(*(char))
(	O
)	O
;	O
COMMAND	struct(*(char),*((*(char))->(int)),*(char))
*	O
find_command	()->(*(struct(*(char),*((*`)->(int)),*(char))))
(	O
)	O
;	O
char	O
*	O
progname	*(char)
;	O
int	O
done	int
;	O
char	O
*	O
dupstr	(*(char))->(*(char))
(	O
s	*(char)
)	O
char	O
*	O
s	*(char)
;	O
{	O
char	O
*	O
r	*(char)
;	O
r	*(char)
=	O
xmalloc	(long)->(*(char))
(	O
strlen	(*(char))->(long)
(	O
s	*(char)
)	O
+	O
1	int
)	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
r	*(char)
,	O
s	*(char)
)	O
;	O
return	O
(	O
r	*(char)
)	O
;	O
}	O
int	O
main	(int,*(*(char)))->(int)
(	O
argc	int
,	O
argv	*(*(char))
)	O
int	O
argc	int
;	O
char	O
*	O
*	O
argv	*(*(char))
;	O
{	O
char	O
*	O
line	*(char)
,	O
*	O
s	*(char)
;	O
progname	*(char)
=	O
argv	*(*(char))
[	O
0	int
]	O
;	O
initialize_readline	()->(void)
(	O
)	O
;	O
for	O
(	O
;	O
done	int
==	O
0	int
;	O
)	O
{	O
line	*(char)
=	O
readline	(*(char))->(*(char))
(	O
"FileMan: "	*(char)
)	O
;	O
if	O
(	O
!	O
line	*(char)
)	O
break	O
;	O
s	*(char)
=	O
stripwhite	()->(*(char))
(	O
line	*(char)
)	O
;	O
if	O
(	O
*	O
s	*(char)
)	O
{	O
add_history	(*(char))->(void)
(	O
s	*(char)
)	O
;	O
execute_line	(*(char))->(int)
(	O
s	*(char)
)	O
;	O
}	O
free	(*(void))->(void)
(	O
line	*(char)
)	O
;	O
}	O
exit	(int)->(void)
(	O
0	int
)	O
;	O
}	O
int	O
execute_line	(*(char))->(int)
(	O
line	*(char)
)	O
char	O
*	O
line	*(char)
;	O
{	O
register	O
int	O
i	int
;	O
COMMAND	struct(*(char),*((*(char))->(int)),*(char))
*	O
command	*(struct(*(char),*((*(char))->(int)),*(char)))
;	O
char	O
*	O
word	*(char)
;	O
i	int
=	O
0	int
;	O
while	O
(	O
line	*(char)
[	O
i	int
]	O
&&	O
whitespace	O
(	O
line	*(char)
[	O
i	int
]	O
)	O
)	O
i	int
++	O
;	O
word	*(char)
=	O
line	*(char)
+	O
i	int
;	O
while	O
(	O
line	*(char)
[	O
i	int
]	O
&&	O
!	O
whitespace	O
(	O
line	*(char)
[	O
i	int
]	O
)	O
)	O
i	int
++	O
;	O
if	O
(	O
line	*(char)
[	O
i	int
]	O
)	O
line	*(char)
[	O
i	int
++	O
]	O
=	O
'\0'	O
;	O
command	*(struct(*(char),*((*(char))->(int)),*(char)))
=	O
find_command	()->(*(struct(*(char),*((*`)->(int)),*(char))))
(	O
word	*(char)
)	O
;	O
if	O
(	O
!	O
command	*(struct(*(char),*((*(char))->(int)),*(char)))
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s: No such command for FileMan.\n"	*(char)
,	O
word	*(char)
)	O
;	O
return	O
(	O
-	O
1	int
)	O
;	O
}	O
while	O
(	O
whitespace	O
(	O
line	*(char)
[	O
i	int
]	O
)	O
)	O
i	int
++	O
;	O
word	*(char)
=	O
line	*(char)
+	O
i	int
;	O
return	O
(	O
(	O
*	O
(	O
command	*(struct(*(char),*((*(char))->(int)),*(char)))
->	O
func	*((*(char))->(int))
)	O
)	O
(	O
word	*(char)
)	O
)	O
;	O
}	O
COMMAND	struct(*(char),*((*(char))->(int)),*(char))
*	O
find_command	()->(*(struct(*(char),*((*`)->(int)),*(char))))
(	O
name	*(char)
)	O
char	O
*	O
name	*(char)
;	O
{	O
register	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
commands	array(struct(*(char),*((*(char))->(int)),*(char)))
[	O
i	int
]	O
.	O
name	*(char)
;	O
i	int
++	O
)	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
name	*(char)
,	O
commands	array(struct(*(char),*((*(char))->(int)),*(char)))
[	O
i	int
]	O
.	O
name	*(char)
)	O
==	O
0	int
)	O
return	O
(	O
&	O
commands	array(struct(*(char),*((*(char))->(int)),*(char)))
[	O
i	int
]	O
)	O
;	O
return	O
(	O
(	O
COMMAND	struct(*(char),*((*(char))->(int)),*(char))
*	O
)	O
NULL	O
)	O
;	O
}	O
char	O
*	O
stripwhite	()->(*(char))
(	O
string	*(char)
)	O
char	O
*	O
string	*(char)
;	O
{	O
register	O
char	O
*	O
s	*(char)
,	O
*	O
t	*(char)
;	O
for	O
(	O
s	*(char)
=	O
string	*(char)
;	O
whitespace	O
(	O
*	O
s	*(char)
)	O
;	O
s	*(char)
++	O
)	O
;	O
if	O
(	O
*	O
s	*(char)
==	O
0	int
)	O
return	O
(	O
s	*(char)
)	O
;	O
t	*(char)
=	O
s	*(char)
+	O
strlen	(*(char))->(long)
(	O
s	*(char)
)	O
-	O
1	int
;	O
while	O
(	O
t	*(char)
>	O
s	*(char)
&&	O
whitespace	O
(	O
*	O
t	*(char)
)	O
)	O
t	*(char)
--	O
;	O
*	O
++	O
t	*(char)
=	O
'\0'	O
;	O
return	O
s	*(char)
;	O
}	O
char	O
*	O
command_generator	(*(char),int)->(*(char))
PARAMS	O
(	O
(	O
const	O
char	O
*	O
,	O
int	O
)	O
)	O
;	O
char	O
*	O
*	O
fileman_completion	(*(char),int,int)->(*(*(char)))
PARAMS	O
(	O
(	O
const	O
char	O
*	O
,	O
int	O
,	O
int	O
)	O
)	O
;	O
void	O
initialize_readline	()->(void)
(	O
)	O
{	O
rl_readline_name	*(char)
=	O
"FileMan"	*(char)
;	O
rl_attempted_completion_function	*((*(char),int,int)->(*(*(char))))
=	O
fileman_completion	(*(char),int,int)->(*(*(char)))
;	O
}	O
char	O
*	O
*	O
fileman_completion	(*(char),int,int)->(*(*(char)))
(	O
text	*(char)
,	O
start	int
,	O
end	int
)	O
const	O
char	O
*	O
text	*(char)
;	O
int	O
start	int
,	O
end	int
;	O
{	O
char	O
*	O
*	O
matches	*(*(char))
;	O
matches	*(*(char))
=	O
(	O
char	O
*	O
*	O
)	O
NULL	O
;	O
if	O
(	O
start	int
==	O
0	int
)	O
matches	*(*(char))
=	O
rl_completion_matches	(*(char),*((*(char),int)->(*(char))))->(*(*(char)))
(	O
text	*(char)
,	O
command_generator	(*(char),int)->(*(char))
)	O
;	O
return	O
(	O
matches	*(*(char))
)	O
;	O
}	O
char	O
*	O
command_generator	(*(char),int)->(*(char))
(	O
text	*(char)
,	O
state	*(int)
)	O
const	O
char	O
*	O
text	*(char)
;	O
int	O
state	*(int)
;	O
{	O
static	O
int	O
list_index	int
,	O
len	int
;	O
char	O
*	O
name	*(char)
;	O
if	O
(	O
!	O
state	*(int)
)	O
{	O
list_index	int
=	O
0	int
;	O
len	int
=	O
strlen	(*(char))->(long)
(	O
text	*(char)
)	O
;	O
}	O
while	O
(	O
name	*(char)
=	O
commands	array(struct(*(char),*((*(char))->(int)),*(char)))
[	O
list_index	int
]	O
.	O
name	*(char)
)	O
{	O
list_index	int
++	O
;	O
if	O
(	O
strncmp	(*(char),*(char),long)->(int)
(	O
name	*(char)
,	O
text	*(char)
,	O
len	int
)	O
==	O
0	int
)	O
return	O
(	O
dupstr	(*(char))->(*(char))
(	O
name	*(char)
)	O
)	O
;	O
}	O
return	O
(	O
(	O
char	O
*	O
)	O
NULL	O
)	O
;	O
}	O
static	O
char	O
syscom	array(char)
[	O
1024	int
]	O
;	O
int	O
com_list	(*(char))->(int)
(	O
arg	*(char)
)	O
char	O
*	O
arg	*(char)
;	O
{	O
if	O
(	O
!	O
arg	*(char)
)	O
arg	*(char)
=	O
""	*(char)
;	O
sprintf	(*(char),*(char))->(int)
(	O
syscom	array(char)
,	O
"ls -FClg %s"	*(char)
,	O
arg	*(char)
)	O
;	O
return	O
(	O
system	(*(char))->(int)
(	O
syscom	array(char)
)	O
)	O
;	O
}	O
int	O
com_view	(*(char))->(int)
(	O
arg	*(char)
)	O
char	O
*	O
arg	*(char)
;	O
{	O
if	O
(	O
!	O
valid_argument	(*(char),*(char))->(int)
(	O
"view"	*(char)
,	O
arg	*(char)
)	O
)	O
return	O
1	int
;	O
sprintf	(*(char),*(char))->(int)
(	O
syscom	array(char)
,	O
"more %s"	*(char)
,	O
arg	*(char)
)	O
;	O
return	O
(	O
system	(*(char))->(int)
(	O
syscom	array(char)
)	O
)	O
;	O
}	O
int	O
com_rename	(*(char))->(int)
(	O
arg	*(char)
)	O
char	O
*	O
arg	*(char)
;	O
{	O
too_dangerous	(*(char))->(void)
(	O
"rename"	*(char)
)	O
;	O
return	O
(	O
1	int
)	O
;	O
}	O
int	O
com_stat	(*(char))->(int)
(	O
arg	*(char)
)	O
char	O
*	O
arg	*(char)
;	O
{	O
struct	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
finfo	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
;	O
if	O
(	O
!	O
valid_argument	(*(char),*(char))->(int)
(	O
"stat"	*(char)
,	O
arg	*(char)
)	O
)	O
return	O
(	O
1	int
)	O
;	O
if	O
(	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
(	O
arg	*(char)
,	O
&	O
finfo	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
)	O
==	O
-	O
1	int
)	O
{	O
perror	(*(char))->(void)
(	O
arg	*(char)
)	O
;	O
return	O
(	O
1	int
)	O
;	O
}	O
printf	(*(char))->(int)
(	O
"Statistics for `%s':\n"	*(char)
,	O
arg	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"%s has %d link%s, and is %d byte%s in length.\n"	*(char)
,	O
arg	*(char)
,	O
finfo	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_nlink	long
,	O
(	O
finfo	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_nlink	long
==	O
1	int
)	O
?	O
""	*(char)
:	O
"s"	*(char)
,	O
finfo	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_size	long
,	O
(	O
finfo	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_size	long
==	O
1	int
)	O
?	O
""	*(char)
:	O
"s"	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"Inode Last Change at: %s"	*(char)
,	O
ctime	(*(long))->(*(char))
(	O
&	O
finfo	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_ctime	O
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
"      Last access at: %s"	*(char)
,	O
ctime	(*(long))->(*(char))
(	O
&	O
finfo	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_atime	O
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
"    Last modified at: %s"	*(char)
,	O
ctime	(*(long))->(*(char))
(	O
&	O
finfo	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_mtime	O
)	O
)	O
;	O
return	O
(	O
0	int
)	O
;	O
}	O
int	O
com_delete	(*(char))->(int)
(	O
arg	*(char)
)	O
char	O
*	O
arg	*(char)
;	O
{	O
too_dangerous	(*(char))->(void)
(	O
"delete"	*(char)
)	O
;	O
return	O
(	O
1	int
)	O
;	O
}	O
int	O
com_help	(*(char))->(int)
(	O
arg	*(char)
)	O
char	O
*	O
arg	*(char)
;	O
{	O
register	O
int	O
i	int
;	O
int	O
printed	int
=	O
0	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
commands	array(struct(*(char),*((*(char))->(int)),*(char)))
[	O
i	int
]	O
.	O
name	*(char)
;	O
i	int
++	O
)	O
{	O
if	O
(	O
!	O
*	O
arg	*(char)
||	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
arg	*(char)
,	O
commands	array(struct(*(char),*((*(char))->(int)),*(char)))
[	O
i	int
]	O
.	O
name	*(char)
)	O
==	O
0	int
)	O
)	O
{	O
printf	(*(char))->(int)
(	O
"%s\t\t%s.\n"	*(char)
,	O
commands	array(struct(*(char),*((*(char))->(int)),*(char)))
[	O
i	int
]	O
.	O
name	*(char)
,	O
commands	array(struct(*(char),*((*(char))->(int)),*(char)))
[	O
i	int
]	O
.	O
doc	*(char)
)	O
;	O
printed	int
++	O
;	O
}	O
}	O
if	O
(	O
!	O
printed	int
)	O
{	O
printf	(*(char))->(int)
(	O
"No commands match `%s'.  Possibilties are:\n"	*(char)
,	O
arg	*(char)
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
commands	array(struct(*(char),*((*(char))->(int)),*(char)))
[	O
i	int
]	O
.	O
name	*(char)
;	O
i	int
++	O
)	O
{	O
if	O
(	O
printed	int
==	O
6	int
)	O
{	O
printed	int
=	O
0	int
;	O
printf	(*(char))->(int)
(	O
"\n"	*(char)
)	O
;	O
}	O
printf	(*(char))->(int)
(	O
"%s\t"	*(char)
,	O
commands	array(struct(*(char),*((*(char))->(int)),*(char)))
[	O
i	int
]	O
.	O
name	*(char)
)	O
;	O
printed	int
++	O
;	O
}	O
if	O
(	O
printed	int
)	O
printf	(*(char))->(int)
(	O
"\n"	*(char)
)	O
;	O
}	O
return	O
(	O
0	int
)	O
;	O
}	O
int	O
com_cd	(*(char))->(int)
(	O
arg	*(char)
)	O
char	O
*	O
arg	*(char)
;	O
{	O
if	O
(	O
chdir	(*(char))->(int)
(	O
arg	*(char)
)	O
==	O
-	O
1	int
)	O
{	O
perror	(*(char))->(void)
(	O
arg	*(char)
)	O
;	O
return	O
1	int
;	O
}	O
com_pwd	(*(char))->(int)
(	O
""	*(char)
)	O
;	O
return	O
(	O
0	int
)	O
;	O
}	O
int	O
com_pwd	(*(char))->(int)
(	O
ignore	*(char)
)	O
char	O
*	O
ignore	*(char)
;	O
{	O
char	O
dir	array(char)
[	O
1024	int
]	O
,	O
*	O
s	*(char)
;	O
s	*(char)
=	O
getcwd	(*(char),long)->(*(char))
(	O
dir	array(char)
,	O
sizeof	O
(	O
dir	array(char)
)	O
-	O
1	int
)	O
;	O
if	O
(	O
s	*(char)
==	O
0	int
)	O
{	O
printf	(*(char))->(int)
(	O
"Error getting pwd: %s\n"	*(char)
,	O
dir	array(char)
)	O
;	O
return	O
1	int
;	O
}	O
printf	(*(char))->(int)
(	O
"Current directory is %s\n"	*(char)
,	O
dir	array(char)
)	O
;	O
return	O
0	int
;	O
}	O
int	O
com_quit	(*(char))->(int)
(	O
arg	*(char)
)	O
char	O
*	O
arg	*(char)
;	O
{	O
done	int
=	O
1	int
;	O
return	O
(	O
0	int
)	O
;	O
}	O
void	O
too_dangerous	(*(char))->(void)
(	O
caller	*(char)
)	O
char	O
*	O
caller	*(char)
;	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s: Too dangerous for me to distribute.  Write it yourself.\n"	*(char)
,	O
caller	*(char)
)	O
;	O
}	O
int	O
valid_argument	(*(char),*(char))->(int)
(	O
caller	*(char)
,	O
arg	*(char)
)	O
char	O
*	O
caller	*(char)
,	O
*	O
arg	*(char)
;	O
{	O
if	O
(	O
!	O
arg	*(char)
||	O
!	O
*	O
arg	*(char)
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s: Argument required.\n"	*(char)
,	O
caller	*(char)
)	O
;	O
return	O
(	O
0	int
)	O
;	O
}	O
return	O
(	O
1	int
)	O
;	O
}	O
