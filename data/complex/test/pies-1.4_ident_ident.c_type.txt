pies_identity_t	*(struct)
pies_identity_create	(*(char))->(*(struct))
(	O
char	O
const	O
*	O
user	*(char)
)	O
{	O
pies_identity_t	*(struct)
id	*(char)
=	O
malloc	(long)->(*(void))
(	O
sizeof	O
(	O
*	O
id	*(char)
)	O
)	O
;	O
if	O
(	O
id	*(char)
)	O
{	O
id	*(char)
->	O
provider	*(struct)
=	O
NULL	O
;	O
id	*(char)
->	O
data	*(void)
=	O
NULL	O
;	O
id	*(char)
->	O
username	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
user	*(char)
)	O
;	O
if	O
(	O
!	O
id	*(char)
)	O
{	O
int	O
ec	int
=	O
errno	O
;	O
free	(*(void))->(void)
(	O
id	*(char)
)	O
;	O
errno	O
=	O
ec	int
;	O
id	*(char)
=	O
NULL	O
;	O
}	O
}	O
return	O
id	*(char)
;	O
}	O
int	O
pies_authenticate	(*(struct),*(struct),*(char))->(int)
(	O
pies_identity_provider_t	*(struct)
pr	*(struct)
,	O
pies_identity_t	*(struct)
id	*(char)
,	O
char	O
const	O
*	O
passwd	*(char)
)	O
{	O
if	O
(	O
!	O
pr	*(struct)
||	O
!	O
id	*(char)
)	O
return	O
-	O
1	int
;	O
if	O
(	O
pr	*(struct)
->	O
mech	*(struct)
->	O
authenticate	*((*(struct),*(struct(*(struct`),*(char),*(void))),*(char))->(int))
(	O
pr	*(struct)
,	O
id	*(char)
,	O
passwd	*(char)
)	O
==	O
0	int
)	O
{	O
id	*(char)
->	O
provider	*(struct)
=	O
pr	*(struct)
;	O
return	O
0	int
;	O
}	O
return	O
1	int
;	O
}	O
char	O
const	O
*	O
pies_identity_user_name	(*(struct))->(*(char))
(	O
pies_identity_t	*(struct)
id	*(char)
)	O
{	O
if	O
(	O
!	O
id	*(char)
)	O
return	O
NULL	O
;	O
return	O
id	*(char)
->	O
username	*(char)
;	O
}	O
int	O
pies_identity_is_user	(*(struct),*(*(char)))->(int)
(	O
pies_identity_t	*(struct)
id	*(char)
,	O
char	O
*	O
const	O
*	O
users	*(*(char))
)	O
{	O
if	O
(	O
!	O
id	*(char)
)	O
return	O
0	int
;	O
return	O
is_array_member	(*(*(char)),*(char))->(int)
(	O
users	*(*(char))
,	O
id	*(char)
->	O
username	*(char)
)	O
;	O
}	O
int	O
pies_identity_is_group_member	(*(struct),*(*(char)))->(int)
(	O
pies_identity_t	*(struct)
id	*(char)
,	O
char	O
*	O
const	O
*	O
groups	*(*(char))
)	O
{	O
pies_identity_provider_t	*(struct)
provider	*(struct)
;	O
if	O
(	O
!	O
id	*(char)
)	O
return	O
0	int
;	O
provider	*(struct)
=	O
id	*(char)
->	O
provider	*(struct)
;	O
if	O
(	O
!	O
provider	*(struct)
)	O
return	O
0	int
;	O
return	O
provider	*(struct)
->	O
mech	*(struct)
->	O
is_group_member	*((*(struct),*(struct(*(struct`),*(char),*(void))),*(*(char)))->(int))
(	O
provider	*(struct)
,	O
id	*(char)
,	O
groups	*(*(char))
)	O
;	O
}	O
void	O
pies_identity_destroy	(*(struct))->(void)
(	O
pies_identity_t	*(struct)
id	*(char)
)	O
{	O
pies_identity_provider_t	*(struct)
provider	*(struct)
=	O
id	*(char)
->	O
provider	*(struct)
;	O
if	O
(	O
provider	*(struct)
&&	O
provider	*(struct)
->	O
mech	*(struct)
->	O
destroy_identity	*((*(struct),*(struct(*(struct`),*(char),*(void))))->(void))
)	O
provider	*(struct)
->	O
mech	*(struct)
->	O
destroy_identity	*((*(struct),*(struct(*(struct`),*(char),*(void))))->(void))
(	O
provider	*(struct)
,	O
id	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
id	*(char)
)	O
;	O
}	O
