bool	bool
verbose	bool
;	O
static	O
bool	bool
java_mode	bool
;	O
static	O
const	O
char	O
*	O
java_resource_name	*(char)
;	O
static	O
const	O
char	O
*	O
java_locale_name	*(char)
;	O
static	O
bool	bool
csharp_mode	bool
;	O
static	O
const	O
char	O
*	O
csharp_resource_name	*(char)
;	O
static	O
const	O
char	O
*	O
csharp_locale_name	*(char)
;	O
static	O
const	O
char	O
*	O
csharp_base_directory	*(char)
;	O
static	O
bool	bool
csharp_resources_mode	bool
;	O
static	O
bool	bool
tcl_mode	bool
;	O
static	O
const	O
char	O
*	O
tcl_locale_name	*(char)
;	O
static	O
const	O
char	O
*	O
tcl_base_directory	*(char)
;	O
static	O
int	O
force_po	int
;	O
static	O
const	O
struct	O
option	struct(*(char),int,*(int),int)
long_options	array(struct(*(char),int,*(int),int))
[	O
]	O
=	O
{	O
{	O
"color"	*(char)
,	O
optional_argument	int
,	O
NULL	O
,	O
CHAR_MAX	O
+	O
6	int
}	O
,	O
{	O
"csharp"	*(char)
,	O
no_argument	int
,	O
NULL	O
,	O
CHAR_MAX	O
+	O
4	int
}	O
,	O
{	O
"csharp-resources"	*(char)
,	O
no_argument	int
,	O
NULL	O
,	O
CHAR_MAX	O
+	O
5	int
}	O
,	O
{	O
"escape"	*(char)
,	O
no_argument	int
,	O
NULL	O
,	O
'E'	O
}	O
,	O
{	O
"force-po"	*(char)
,	O
no_argument	int
,	O
&	O
force_po	int
,	O
1	int
}	O
,	O
{	O
"help"	*(char)
,	O
no_argument	int
,	O
NULL	O
,	O
'h'	O
}	O
,	O
{	O
"indent"	*(char)
,	O
no_argument	int
,	O
NULL	O
,	O
'i'	O
}	O
,	O
{	O
"java"	*(char)
,	O
no_argument	int
,	O
NULL	O
,	O
'j'	O
}	O
,	O
{	O
"locale"	*(char)
,	O
required_argument	int
,	O
NULL	O
,	O
'l'	O
}	O
,	O
{	O
"no-escape"	*(char)
,	O
no_argument	int
,	O
NULL	O
,	O
'e'	O
}	O
,	O
{	O
"no-wrap"	*(char)
,	O
no_argument	int
,	O
NULL	O
,	O
CHAR_MAX	O
+	O
2	int
}	O
,	O
{	O
"output-file"	*(char)
,	O
required_argument	int
,	O
NULL	O
,	O
'o'	O
}	O
,	O
{	O
"properties-output"	*(char)
,	O
no_argument	int
,	O
NULL	O
,	O
'p'	O
}	O
,	O
{	O
"resource"	*(char)
,	O
required_argument	int
,	O
NULL	O
,	O
'r'	O
}	O
,	O
{	O
"sort-output"	*(char)
,	O
no_argument	int
,	O
NULL	O
,	O
's'	O
}	O
,	O
{	O
"strict"	*(char)
,	O
no_argument	int
,	O
NULL	O
,	O
'S'	O
}	O
,	O
{	O
"stringtable-output"	*(char)
,	O
no_argument	int
,	O
NULL	O
,	O
CHAR_MAX	O
+	O
3	int
}	O
,	O
{	O
"style"	*(char)
,	O
required_argument	int
,	O
NULL	O
,	O
CHAR_MAX	O
+	O
7	int
}	O
,	O
{	O
"tcl"	*(char)
,	O
no_argument	int
,	O
NULL	O
,	O
CHAR_MAX	O
+	O
1	int
}	O
,	O
{	O
"verbose"	*(char)
,	O
no_argument	int
,	O
NULL	O
,	O
'v'	O
}	O
,	O
{	O
"version"	*(char)
,	O
no_argument	int
,	O
NULL	O
,	O
'V'	O
}	O
,	O
{	O
"width"	*(char)
,	O
required_argument	int
,	O
NULL	O
,	O
'w'	O
}	O
,	O
{	O
NULL	O
,	O
0	int
,	O
NULL	O
,	O
0	int
}	O
}	O
;	O
static	O
void	O
usage	(int)->(void)
(	O
int	O
status	int
)	O
__attribute__	O
(	O
(	O
noreturn	O
)	O
)	O
;	O
static	O
void	O
read_one_file	(*(struct(*(*(struct`)),long,long,bool,struct(long,long,*(struct`),*(struct`),struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int)))),*(char))->(void)
(	O
message_list_ty	struct
*	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
,	O
const	O
char	O
*	O
filename	*(char)
)	O
;	O
int	O
main	(int,*(*(char)))->(int)
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	*(*(char))
)	O
{	O
int	O
optchar	int
;	O
bool	bool
do_help	bool
=	O
false	int
;	O
bool	bool
do_version	bool
=	O
false	int
;	O
const	O
char	O
*	O
output_file	*(char)
=	O
"-"	*(char)
;	O
msgdomain_list_ty	struct
*	O
result	*(*(void))
;	O
catalog_output_format_ty	*(struct(*((*(struct`),*(struct`),long,bool)->(void)),bool,bool,bool,bool,bool,bool,bool,bool))
output_syntax	*(struct(*((*(struct`),*(struct`),long,bool)->(void)),bool,bool,bool,bool,bool,bool,bool,bool))
=	O
&	O
output_format_po	struct(*((*(struct(*`,long,long,bool,*`)),*(struct),long,bool)->(void)),bool,bool,bool,bool,bool,bool,bool,bool)
;	O
bool	bool
sort_by_msgid	bool
=	O
false	int
;	O
set_program_name	(*(char))->(void)
(	O
argv	*(*(char))
[	O
0	int
]	O
)	O
;	O
error_print_progname	*(()->(void))
=	O
maybe_print_progname	()->(void)
;	O
setlocale	(int,*(char))->(*(char))
(	O
LC_ALL	O
,	O
""	*(char)
)	O
;	O
bindtextdomain	(*(char),*(char))->(*(char))
(	O
PACKAGE	*(char)
,	O
relocate	O
(	O
LOCALEDIR	O
)	O
)	O
;	O
bindtextdomain	(*(char),*(char))->(*(char))
(	O
"bison-runtime"	*(char)
,	O
relocate	O
(	O
BISON_LOCALEDIR	O
)	O
)	O
;	O
textdomain	(*(char))->(*(char))
(	O
PACKAGE	*(char)
)	O
;	O
atexit	(*(()->(void)))->(int)
(	O
close_stdout	()->(void)
)	O
;	O
while	O
(	O
(	O
optchar	int
=	O
getopt_long	(int,*(*(char)),*(char),*(struct(*(char),int,*(int),int)),*(int))->(int)
(	O
argc	int
,	O
argv	*(*(char))
,	O
"d:eEhijl:o:pr:svVw:"	*(char)
,	O
long_options	array(struct(*(char),int,*(int),int))
,	O
NULL	O
)	O
)	O
!=	O
EOF	O
)	O
switch	O
(	O
optchar	int
)	O
{	O
case	O
'\0'	O
:	O
break	O
;	O
case	O
'd'	O
:	O
csharp_base_directory	*(char)
=	O
optarg	*(char)
;	O
tcl_base_directory	*(char)
=	O
optarg	*(char)
;	O
break	O
;	O
case	O
'e'	O
:	O
message_print_style_escape	(bool)->(void)
(	O
false	int
)	O
;	O
break	O
;	O
case	O
'E'	O
:	O
message_print_style_escape	(bool)->(void)
(	O
true	int
)	O
;	O
break	O
;	O
case	O
'h'	O
:	O
do_help	bool
=	O
true	int
;	O
break	O
;	O
case	O
'i'	O
:	O
message_print_style_indent	()->(void)
(	O
)	O
;	O
break	O
;	O
case	O
'j'	O
:	O
java_mode	bool
=	O
true	int
;	O
break	O
;	O
case	O
'l'	O
:	O
java_locale_name	*(char)
=	O
optarg	*(char)
;	O
csharp_locale_name	*(char)
=	O
optarg	*(char)
;	O
tcl_locale_name	*(char)
=	O
optarg	*(char)
;	O
break	O
;	O
case	O
'o'	O
:	O
output_file	*(char)
=	O
optarg	*(char)
;	O
break	O
;	O
case	O
'p'	O
:	O
output_syntax	*(struct(*((*(struct`),*(struct`),long,bool)->(void)),bool,bool,bool,bool,bool,bool,bool,bool))
=	O
&	O
output_format_properties	struct(*((*(struct(*`,long,long,bool,*`)),*(struct),long,bool)->(void)),bool,bool,bool,bool,bool,bool,bool,bool)
;	O
break	O
;	O
case	O
'r'	O
:	O
java_resource_name	*(char)
=	O
optarg	*(char)
;	O
csharp_resource_name	*(char)
=	O
optarg	*(char)
;	O
break	O
;	O
case	O
's'	O
:	O
sort_by_msgid	bool
=	O
true	int
;	O
break	O
;	O
case	O
'S'	O
:	O
message_print_style_uniforum	()->(void)
(	O
)	O
;	O
break	O
;	O
case	O
'v'	O
:	O
verbose	bool
=	O
true	int
;	O
break	O
;	O
case	O
'V'	O
:	O
do_version	bool
=	O
true	int
;	O
break	O
;	O
case	O
'w'	O
:	O
{	O
int	O
value	int
;	O
char	O
*	O
endp	*(char)
;	O
value	int
=	O
strtol	(*(char),*(*(char)),int)->(long)
(	O
optarg	*(char)
,	O
&	O
endp	*(char)
,	O
10	int
)	O
;	O
if	O
(	O
endp	*(char)
!=	O
optarg	*(char)
)	O
message_page_width_set	(long)->(void)
(	O
value	int
)	O
;	O
}	O
break	O
;	O
case	O
CHAR_MAX	O
+	O
1	int
:	O
tcl_mode	bool
=	O
true	int
;	O
break	O
;	O
case	O
CHAR_MAX	O
+	O
2	int
:	O
message_page_width_ignore	()->(void)
(	O
)	O
;	O
break	O
;	O
case	O
CHAR_MAX	O
+	O
3	int
:	O
output_syntax	*(struct(*((*(struct`),*(struct`),long,bool)->(void)),bool,bool,bool,bool,bool,bool,bool,bool))
=	O
&	O
output_format_stringtable	struct(*((*(struct(*`,long,long,bool,*`)),*(struct),long,bool)->(void)),bool,bool,bool,bool,bool,bool,bool,bool)
;	O
break	O
;	O
case	O
CHAR_MAX	O
+	O
4	int
:	O
csharp_mode	bool
=	O
true	int
;	O
break	O
;	O
case	O
CHAR_MAX	O
+	O
5	int
:	O
csharp_resources_mode	bool
=	O
true	int
;	O
break	O
;	O
case	O
CHAR_MAX	O
+	O
6	int
:	O
if	O
(	O
handle_color_option	(*(char))->(bool)
(	O
optarg	*(char)
)	O
||	O
color_test_mode	bool
)	O
usage	(int)->(void)
(	O
EXIT_FAILURE	int
)	O
;	O
break	O
;	O
case	O
CHAR_MAX	O
+	O
7	int
:	O
handle_style_option	(*(char))->(void)
(	O
optarg	*(char)
)	O
;	O
break	O
;	O
default	O
:	O
usage	(int)->(void)
(	O
EXIT_FAILURE	int
)	O
;	O
break	O
;	O
}	O
if	O
(	O
do_version	bool
)	O
{	O
printf	(*(char))->(int)
(	O
"%s (GNU %s) %s\n"	*(char)
,	O
basename	(*(char))->(*(char))
(	O
program_name	*(char)
)	O
,	O
PACKAGE	*(char)
,	O
VERSION	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"Copyright (C) %s Free Software Foundation, Inc.\nLicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\n"	*(char)
)	O
,	O
"1995-2019"	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"Written by %s.\n"	*(char)
)	O
,	O
proper_name	(*(char))->(*(char))
(	O
"Ulrich Drepper"	*(char)
)	O
)	O
;	O
exit	(int)->(void)
(	O
EXIT_SUCCESS	int
)	O
;	O
}	O
if	O
(	O
do_help	bool
)	O
usage	(int)->(void)
(	O
EXIT_SUCCESS	int
)	O
;	O
{	O
unsigned	O
int	O
modes	int
=	O
(	O
java_mode	bool
?	O
1	int
:	O
0	int
)	O
|	O
(	O
csharp_mode	bool
?	O
2	int
:	O
0	int
)	O
|	O
(	O
csharp_resources_mode	bool
?	O
4	int
:	O
0	int
)	O
|	O
(	O
tcl_mode	bool
?	O
8	int
:	O
0	int
)	O
;	O
static	O
const	O
char	O
*	O
mode_options	array(*(char))
[	O
]	O
=	O
{	O
"--java"	*(char)
,	O
"--csharp"	*(char)
,	O
"--csharp-resources"	*(char)
,	O
"--tcl"	*(char)
}	O
;	O
if	O
(	O
modes	int
&	O
(	O
modes	int
-	O
1	int
)	O
)	O
{	O
const	O
char	O
*	O
first_option	*(char)
;	O
const	O
char	O
*	O
second_option	*(char)
;	O
unsigned	O
int	O
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
;	O
i	long
++	O
)	O
if	O
(	O
modes	int
&	O
(	O
1	int
<<	O
i	long
)	O
)	O
break	O
;	O
first_option	*(char)
=	O
mode_options	array(*(char))
[	O
i	long
]	O
;	O
for	O
(	O
i	long
=	O
i	long
+	O
1	int
;	O
;	O
i	long
++	O
)	O
if	O
(	O
modes	int
&	O
(	O
1	int
<<	O
i	long
)	O
)	O
break	O
;	O
second_option	*(char)
=	O
mode_options	array(*(char))
[	O
i	long
]	O
;	O
error	(int,int,*(char))->(void)
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
_	O
(	O
"%s and %s are mutually exclusive"	*(char)
)	O
,	O
first_option	*(char)
,	O
second_option	*(char)
)	O
;	O
}	O
}	O
if	O
(	O
java_mode	bool
)	O
{	O
if	O
(	O
optind	int
<	O
argc	int
)	O
{	O
error	(int,int,*(char))->(void)
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
_	O
(	O
"%s and explicit file names are mutually exclusive"	*(char)
)	O
,	O
"--java"	*(char)
)	O
;	O
}	O
}	O
else	O
if	O
(	O
csharp_mode	bool
)	O
{	O
if	O
(	O
optind	int
<	O
argc	int
)	O
{	O
error	(int,int,*(char))->(void)
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
_	O
(	O
"%s and explicit file names are mutually exclusive"	*(char)
)	O
,	O
"--csharp"	*(char)
)	O
;	O
}	O
if	O
(	O
csharp_locale_name	*(char)
==	O
NULL	O
)	O
{	O
error	(int,int,*(char))->(void)
(	O
EXIT_SUCCESS	int
,	O
0	int
,	O
_	O
(	O
"%s requires a \"-l locale\" specification"	*(char)
)	O
,	O
"--csharp"	*(char)
)	O
;	O
usage	(int)->(void)
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
if	O
(	O
csharp_base_directory	*(char)
==	O
NULL	O
)	O
{	O
error	(int,int,*(char))->(void)
(	O
EXIT_SUCCESS	int
,	O
0	int
,	O
_	O
(	O
"%s requires a \"-d directory\" specification"	*(char)
)	O
,	O
"--csharp"	*(char)
)	O
;	O
usage	(int)->(void)
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
}	O
else	O
if	O
(	O
tcl_mode	bool
)	O
{	O
if	O
(	O
optind	int
<	O
argc	int
)	O
{	O
error	(int,int,*(char))->(void)
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
_	O
(	O
"%s and explicit file names are mutually exclusive"	*(char)
)	O
,	O
"--tcl"	*(char)
)	O
;	O
}	O
if	O
(	O
tcl_locale_name	*(char)
==	O
NULL	O
)	O
{	O
error	(int,int,*(char))->(void)
(	O
EXIT_SUCCESS	int
,	O
0	int
,	O
_	O
(	O
"%s requires a \"-l locale\" specification"	*(char)
)	O
,	O
"--tcl"	*(char)
)	O
;	O
usage	(int)->(void)
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
if	O
(	O
tcl_base_directory	*(char)
==	O
NULL	O
)	O
{	O
error	(int,int,*(char))->(void)
(	O
EXIT_SUCCESS	int
,	O
0	int
,	O
_	O
(	O
"%s requires a \"-d directory\" specification"	*(char)
)	O
,	O
"--tcl"	*(char)
)	O
;	O
usage	(int)->(void)
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
}	O
else	O
{	O
if	O
(	O
java_resource_name	*(char)
!=	O
NULL	O
)	O
{	O
error	(int,int,*(char))->(void)
(	O
EXIT_SUCCESS	int
,	O
0	int
,	O
_	O
(	O
"%s is only valid with %s or %s"	*(char)
)	O
,	O
"--resource"	*(char)
,	O
"--java"	*(char)
,	O
"--csharp"	*(char)
)	O
;	O
usage	(int)->(void)
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
if	O
(	O
java_locale_name	*(char)
!=	O
NULL	O
)	O
{	O
error	(int,int,*(char))->(void)
(	O
EXIT_SUCCESS	int
,	O
0	int
,	O
_	O
(	O
"%s is only valid with %s or %s"	*(char)
)	O
,	O
"--locale"	*(char)
,	O
"--java"	*(char)
,	O
"--csharp"	*(char)
)	O
;	O
usage	(int)->(void)
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
}	O
if	O
(	O
java_mode	bool
)	O
{	O
result	*(*(void))
=	O
msgdomain_read_java	(*(char),*(char))->(*(struct(*(*(struct`)),long,long,bool,*(char))))
(	O
java_resource_name	*(char)
,	O
java_locale_name	*(char)
)	O
;	O
}	O
else	O
if	O
(	O
csharp_mode	bool
)	O
{	O
result	*(*(void))
=	O
msgdomain_read_csharp	(*(char),*(char),*(char))->(*(struct(*(*(struct`)),long,long,bool,*(char))))
(	O
csharp_resource_name	*(char)
,	O
csharp_locale_name	*(char)
,	O
csharp_base_directory	*(char)
)	O
;	O
}	O
else	O
if	O
(	O
tcl_mode	bool
)	O
{	O
result	*(*(void))
=	O
msgdomain_read_tcl	(*(char),*(char))->(*(struct(*(*(struct`)),long,long,bool,*(char))))
(	O
tcl_locale_name	*(char)
,	O
tcl_base_directory	*(char)
)	O
;	O
}	O
else	O
{	O
message_list_ty	struct
*	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
;	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
=	O
message_list_alloc	(bool)->(*(struct(*(*(struct`)),long,long,bool,struct(long,long,*(struct`),*(struct`),struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int)))))
(	O
false	int
)	O
;	O
if	O
(	O
optind	int
<	O
argc	int
)	O
{	O
do	O
read_one_file	(*(struct(*(*(struct`)),long,long,bool,struct(long,long,*(struct`),*(struct`),struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int)))),*(char))->(void)
(	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
,	O
argv	*(*(char))
[	O
optind	int
]	O
)	O
;	O
while	O
(	O
++	O
optind	int
<	O
argc	int
)	O
;	O
}	O
else	O
read_one_file	(*(struct(*(*(struct`)),long,long,bool,struct(long,long,*(struct`),*(struct`),struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int)))),*(char))->(void)
(	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
,	O
"-"	*(char)
)	O
;	O
result	*(*(void))
=	O
msgdomain_list_alloc	(bool)->(*(struct(*(*(struct`)),long,long,bool,*(char))))
(	O
false	int
)	O
;	O
result	*(*(void))
->	O
item	*(*(char))
[	O
0	int
]	O
->	O
messages	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
=	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
;	O
}	O
if	O
(	O
sort_by_msgid	bool
)	O
msgdomain_list_sort_by_msgid	(*(struct(*(*(struct`)),long,long,bool,*(char))))->(void)
(	O
result	*(*(void))
)	O
;	O
msgdomain_list_print	(*(struct(*(*(struct`)),long,long,bool,*(char))),*(char),*(struct(*((*`,*`,long,bool)->(void)),bool,bool,bool,bool,bool,bool,bool,bool)),bool,bool)->(void)
(	O
result	*(*(void))
,	O
output_file	*(char)
,	O
output_syntax	*(struct(*((*(struct`),*(struct`),long,bool)->(void)),bool,bool,bool,bool,bool,bool,bool,bool))
,	O
force_po	int
,	O
false	int
)	O
;	O
exit	(int)->(void)
(	O
EXIT_SUCCESS	int
)	O
;	O
}	O
static	O
void	O
usage	(int)->(void)
(	O
int	O
status	int
)	O
{	O
if	O
(	O
status	int
!=	O
EXIT_SUCCESS	int
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
_	O
(	O
"Try '%s --help' for more information.\n"	*(char)
)	O
,	O
program_name	*(char)
)	O
;	O
else	O
{	O
printf	(*(char))->(int)
(	O
_	O
(	O
"Usage: %s [OPTION] [FILE]...\n"	*(char)
)	O
,	O
program_name	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"\n"	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"Convert binary message catalog to Uniforum style .po file.\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
"\n"	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"Mandatory arguments to long options are mandatory for short options too.\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
"\n"	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"Operation mode:\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"  -j, --java                  Java mode: input is a Java ResourceBundle class\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"      --csharp                C# mode: input is a .NET .dll file\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"      --csharp-resources      C# resources mode: input is a .NET .resources file\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"      --tcl                   Tcl mode: input is a tcl/msgcat .msg file\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
"\n"	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"Input file location:\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"  FILE ...                    input .mo files\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"If no input file is given or if it is -, standard input is read.\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
"\n"	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"Input file location in Java mode:\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"  -r, --resource=RESOURCE     resource name\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"  -l, --locale=LOCALE         locale name, either language or language_COUNTRY\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"The class name is determined by appending the locale name to the resource name,\nseparated with an underscore.  The class is located using the CLASSPATH.\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
"\n"	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"Input file location in C# mode:\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"  -r, --resource=RESOURCE     resource name\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"  -l, --locale=LOCALE         locale name, either language or language_COUNTRY\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"  -d DIRECTORY                base directory for locale dependent .dll files\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"The -l and -d options are mandatory.  The .dll file is located in a\nsubdirectory of the specified directory whose name depends on the locale.\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
"\n"	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"Input file location in Tcl mode:\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"  -l, --locale=LOCALE         locale name, either language or language_COUNTRY\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"  -d DIRECTORY                base directory of .msg message catalogs\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"The -l and -d options are mandatory.  The .msg file is located in the\nspecified directory.\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
"\n"	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"Output file location:\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"  -o, --output-file=FILE      write output to specified file\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"The results are written to standard output if no output file is specified\nor if it is -.\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
"\n"	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"Output details:\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"      --color                 use colors and other text attributes always\n      --color=WHEN            use colors and other text attributes if WHEN.\n                              WHEN may be 'always', 'never', 'auto', or 'html'.\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"      --style=STYLEFILE       specify CSS style rule file for --color\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"  -e, --no-escape             do not use C escapes in output (default)\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"  -E, --escape                use C escapes in output, no extended chars\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"      --force-po              write PO file even if empty\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"  -i, --indent                write indented output style\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"      --strict                write strict uniforum style\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"  -p, --properties-output     write out a Java .properties file\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"      --stringtable-output    write out a NeXTstep/GNUstep .strings file\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"  -w, --width=NUMBER          set output page width\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"      --no-wrap               do not break long message lines, longer than\n                              the output page width, into several lines\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"  -s, --sort-output           generate sorted output\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
"\n"	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"Informative output:\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"  -h, --help                  display this help and exit\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"  -V, --version               output version information and exit\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"  -v, --verbose               increase verbosity level\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
"\n"	*(char)
)	O
;	O
fputs	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
_	O
(	O
"Report bugs to <bug-gnu-gettext@gnu.org>.\n"	*(char)
)	O
,	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
}	O
exit	(int)->(void)
(	O
status	int
)	O
;	O
}	O
static	O
void	O
read_one_file	(*(struct(*(*(struct`)),long,long,bool,struct(long,long,*(struct`),*(struct`),struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int)))),*(char))->(void)
(	O
message_list_ty	struct
*	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
,	O
const	O
char	O
*	O
filename	*(char)
)	O
{	O
if	O
(	O
csharp_resources_mode	bool
)	O
read_resources_file	(*(struct(*(*(struct`)),long,long,bool,struct(long,long,*(struct`),*(struct`),struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int)))),*(char))->(void)
(	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
,	O
filename	*(char)
)	O
;	O
else	O
read_mo_file	(*(struct(*(*(struct`)),long,long,bool,struct(long,long,*(struct`),*(struct`),struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int)))),*(char))->(void)
(	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
,	O
filename	*(char)
)	O
;	O
}	O
