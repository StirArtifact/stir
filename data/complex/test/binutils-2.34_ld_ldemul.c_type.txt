static	O
ld_emulation_xfer_type	O
*	O
ld_emulation	O
;	O
void	O
ldemul_hll	O
(	O
char	O
*	O
name	*(char)
)	O
{	O
ld_emulation	O
->	O
hll	O
(	O
name	*(char)
)	O
;	O
}	O
void	O
ldemul_syslib	O
(	O
char	O
*	O
name	*(char)
)	O
{	O
ld_emulation	O
->	O
syslib	O
(	O
name	*(char)
)	O
;	O
}	O
void	O
ldemul_after_parse	O
(	O
void	O
)	O
{	O
ld_emulation	O
->	O
after_parse	O
(	O
)	O
;	O
}	O
void	O
ldemul_before_parse	O
(	O
void	O
)	O
{	O
ld_emulation	O
->	O
before_parse	O
(	O
)	O
;	O
}	O
void	O
ldemul_after_open	O
(	O
void	O
)	O
{	O
ld_emulation	O
->	O
after_open	O
(	O
)	O
;	O
}	O
void	O
ldemul_after_check_relocs	O
(	O
void	O
)	O
{	O
ld_emulation	O
->	O
after_check_relocs	O
(	O
)	O
;	O
}	O
void	O
ldemul_after_allocation	O
(	O
void	O
)	O
{	O
ld_emulation	O
->	O
after_allocation	O
(	O
)	O
;	O
}	O
void	O
ldemul_before_allocation	O
(	O
void	O
)	O
{	O
ld_emulation	O
->	O
before_allocation	O
(	O
)	O
;	O
}	O
void	O
ldemul_set_output_arch	O
(	O
void	O
)	O
{	O
ld_emulation	O
->	O
set_output_arch	O
(	O
)	O
;	O
}	O
void	O
ldemul_finish	O
(	O
void	O
)	O
{	O
ld_emulation	O
->	O
finish	O
(	O
)	O
;	O
}	O
void	O
ldemul_set_symbols	O
(	O
void	O
)	O
{	O
if	O
(	O
ld_emulation	O
->	O
set_symbols	O
)	O
ld_emulation	O
->	O
set_symbols	O
(	O
)	O
;	O
}	O
void	O
ldemul_create_output_section_statements	O
(	O
void	O
)	O
{	O
if	O
(	O
ld_emulation	O
->	O
create_output_section_statements	O
)	O
ld_emulation	O
->	O
create_output_section_statements	O
(	O
)	O
;	O
}	O
char	O
*	O
ldemul_get_script	O
(	O
int	O
*	O
isfile	O
)	O
{	O
return	O
ld_emulation	O
->	O
get_script	O
(	O
isfile	O
)	O
;	O
}	O
bfd_boolean	int
ldemul_open_dynamic_archive	O
(	O
const	O
char	O
*	O
arch	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
,	O
search_dirs_type	O
*	O
search	O
,	O
lang_input_statement_type	O
*	O
entry	O
)	O
{	O
if	O
(	O
ld_emulation	O
->	O
open_dynamic_archive	O
)	O
return	O
(	O
*	O
ld_emulation	O
->	O
open_dynamic_archive	O
)	O
(	O
arch	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
,	O
search	O
,	O
entry	O
)	O
;	O
return	O
FALSE	O
;	O
}	O
lang_output_section_statement_type	O
*	O
ldemul_place_orphan	O
(	O
asection	struct(*(char),int,int,*(struct(*(char),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,*(struct),*(*(struct`)),int,long,long,long,*(void),*(char),*(struct(int,union`)),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct`)),union(*(struct`),*(struct`)),union(*(struct`),*(struct`)))),*(struct(*(char),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,*(struct),*(*(struct`)),int,long,long,long,*(void),*(char),*(struct(int,union`)),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct`)),union(*(struct`),*(struct`)),union(*(struct`),*(struct`)))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*(char),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,*(struct),*(*(struct`)),int,long,long,long,*(void),*(char),*(struct(int,union`)),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct`)),union(*(struct`),*(struct`)),union(*(struct`),*(struct`)))),int,*(struct),*(*(struct)),int,long,long,long,*(void),*(char),*(struct(int,union(*(struct`),long))),int,int,*(struct(*(char),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,*(struct),*(*(struct`)),int,long,long,long,*(void),*(char),*(struct(int,union`)),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct`)),union(*(struct`),*(struct`)),union(*(struct`),*(struct`)))),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct)),union(*(struct),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`)))),union(*(struct),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`)))))
*	O
s	*(struct(*(char),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,*(struct),*(*(struct)),int,long,long,long,*(void),*(char),*(struct(int,union(*`,long))),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct))))
,	O
const	O
char	O
*	O
name	*(char)
,	O
int	O
constraint	O
)	O
{	O
if	O
(	O
ld_emulation	O
->	O
place_orphan	O
)	O
return	O
(	O
*	O
ld_emulation	O
->	O
place_orphan	O
)	O
(	O
s	*(struct(*(char),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,*(struct),*(*(struct)),int,long,long,long,*(void),*(char),*(struct(int,union(*`,long))),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct))))
,	O
name	*(char)
,	O
constraint	O
)	O
;	O
return	O
NULL	O
;	O
}	O
void	O
ldemul_add_options	O
(	O
int	O
ns	O
,	O
char	O
*	O
*	O
shortopts	O
,	O
int	O
nl	O
,	O
struct	O
option	O
*	O
*	O
longopts	O
,	O
int	O
nrl	O
,	O
struct	O
option	O
*	O
*	O
really_longopts	O
)	O
{	O
if	O
(	O
ld_emulation	O
->	O
add_options	O
)	O
(	O
*	O
ld_emulation	O
->	O
add_options	O
)	O
(	O
ns	O
,	O
shortopts	O
,	O
nl	O
,	O
longopts	O
,	O
nrl	O
,	O
really_longopts	O
)	O
;	O
}	O
bfd_boolean	int
ldemul_handle_option	O
(	O
int	O
optc	O
)	O
{	O
if	O
(	O
ld_emulation	O
->	O
handle_option	O
)	O
return	O
(	O
*	O
ld_emulation	O
->	O
handle_option	O
)	O
(	O
optc	O
)	O
;	O
return	O
FALSE	O
;	O
}	O
bfd_boolean	int
ldemul_parse_args	O
(	O
int	O
argc	O
,	O
char	O
*	O
*	O
argv	O
)	O
{	O
if	O
(	O
ld_emulation	O
->	O
parse_args	O
)	O
return	O
(	O
*	O
ld_emulation	O
->	O
parse_args	O
)	O
(	O
argc	O
,	O
argv	O
)	O
;	O
return	O
FALSE	O
;	O
}	O
bfd_boolean	int
ldemul_unrecognized_file	O
(	O
lang_input_statement_type	O
*	O
entry	O
)	O
{	O
if	O
(	O
ld_emulation	O
->	O
unrecognized_file	O
)	O
return	O
(	O
*	O
ld_emulation	O
->	O
unrecognized_file	O
)	O
(	O
entry	O
)	O
;	O
return	O
FALSE	O
;	O
}	O
bfd_boolean	int
ldemul_recognized_file	O
(	O
lang_input_statement_type	O
*	O
entry	O
)	O
{	O
if	O
(	O
ld_emulation	O
->	O
recognized_file	O
)	O
return	O
(	O
*	O
ld_emulation	O
->	O
recognized_file	O
)	O
(	O
entry	O
)	O
;	O
return	O
FALSE	O
;	O
}	O
char	O
*	O
ldemul_choose_target	O
(	O
int	O
argc	O
,	O
char	O
*	O
*	O
argv	O
)	O
{	O
return	O
ld_emulation	O
->	O
choose_target	O
(	O
argc	O
,	O
argv	O
)	O
;	O
}	O
char	O
*	O
ldemul_default_target	O
(	O
int	O
argc	O
ATTRIBUTE_UNUSED	O
,	O
char	O
*	O
*	O
argv	O
ATTRIBUTE_UNUSED	O
)	O
{	O
char	O
*	O
from_outside	O
=	O
getenv	(*(char))->(*(char))
(	O
TARGET_ENVIRON	O
)	O
;	O
if	O
(	O
from_outside	O
!=	O
(	O
char	O
*	O
)	O
NULL	O
)	O
return	O
from_outside	O
;	O
return	O
ld_emulation	O
->	O
target_name	O
;	O
}	O
void	O
after_parse_default	O
(	O
void	O
)	O
{	O
if	O
(	O
entry_symbol	O
.	O
name	*(char)
!=	O
NULL	O
&&	O
(	O
bfd_link_executable	O
(	O
&	O
link_info	O
)	O
||	O
entry_from_cmdline	O
)	O
)	O
{	O
bfd_boolean	int
is_vma	O
=	O
FALSE	O
;	O
if	O
(	O
entry_from_cmdline	O
)	O
{	O
const	O
char	O
*	O
send	O
;	O
bfd_scan_vma	(*(char),*(*(char)),int)->(long)
(	O
entry_symbol	O
.	O
name	*(char)
,	O
&	O
send	O
,	O
0	int
)	O
;	O
is_vma	O
=	O
*	O
send	O
==	O
'\0'	O
;	O
}	O
if	O
(	O
!	O
is_vma	O
)	O
ldlang_add_undef	O
(	O
entry_symbol	O
.	O
name	*(char)
,	O
entry_from_cmdline	O
)	O
;	O
}	O
if	O
(	O
config	O
.	O
maxpagesize	O
==	O
0	int
)	O
config	O
.	O
maxpagesize	O
=	O
bfd_emul_get_maxpagesize	(*(char))->(long)
(	O
default_target	O
)	O
;	O
if	O
(	O
config	O
.	O
commonpagesize	O
==	O
0	int
)	O
config	O
.	O
commonpagesize	O
=	O
bfd_emul_get_commonpagesize	(*(char),int)->(long)
(	O
default_target	O
,	O
link_info	O
.	O
relro	O
)	O
;	O
}	O
void	O
after_open_default	O
(	O
void	O
)	O
{	O
link_info	O
.	O
big_endian	O
=	O
TRUE	int
;	O
if	O
(	O
bfd_big_endian	O
(	O
link_info	O
.	O
output_bfd	*(struct)
)	O
)	O
;	O
else	O
if	O
(	O
bfd_little_endian	O
(	O
link_info	O
.	O
output_bfd	*(struct)
)	O
)	O
link_info	O
.	O
big_endian	O
=	O
FALSE	O
;	O
else	O
{	O
if	O
(	O
command_line	O
.	O
endian	O
==	O
ENDIAN_BIG	O
)	O
;	O
else	O
if	O
(	O
command_line	O
.	O
endian	O
==	O
ENDIAN_LITTLE	O
)	O
link_info	O
.	O
big_endian	O
=	O
FALSE	O
;	O
else	O
if	O
(	O
command_line	O
.	O
endian	O
==	O
ENDIAN_UNSET	O
)	O
{	O
LANG_FOR_EACH_INPUT_STATEMENT	O
(	O
s	*(struct(*(char),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,*(struct),*(*(struct)),int,long,long,long,*(void),*(char),*(struct(int,union(*`,long))),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct))))
)	O
if	O
(	O
s	*(struct(*(char),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,*(struct),*(*(struct)),int,long,long,long,*(void),*(char),*(struct(int,union(*`,long))),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct))))
->	O
the_bfd	*(struct)
!=	O
NULL	O
)	O
{	O
if	O
(	O
bfd_little_endian	O
(	O
s	*(struct(*(char),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,*(struct),*(*(struct)),int,long,long,long,*(void),*(char),*(struct(int,union(*`,long))),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct))))
->	O
the_bfd	*(struct)
)	O
)	O
link_info	O
.	O
big_endian	O
=	O
FALSE	O
;	O
break	O
;	O
}	O
}	O
}	O
}	O
void	O
after_check_relocs_default	O
(	O
void	O
)	O
{	O
}	O
void	O
after_allocation_default	O
(	O
void	O
)	O
{	O
lang_relax_sections	O
(	O
FALSE	O
)	O
;	O
}	O
void	O
before_allocation_default	O
(	O
void	O
)	O
{	O
if	O
(	O
!	O
bfd_link_relocatable	O
(	O
&	O
link_info	O
)	O
)	O
strip_excluded_output_sections	O
(	O
)	O
;	O
}	O
void	O
finish_default	O
(	O
void	O
)	O
{	O
if	O
(	O
!	O
bfd_link_relocatable	O
(	O
&	O
link_info	O
)	O
)	O
_bfd_fix_excluded_sec_syms	O
(	O
link_info	O
.	O
output_bfd	*(struct)
,	O
&	O
link_info	O
)	O
;	O
}	O
void	O
set_output_arch_default	O
(	O
void	O
)	O
{	O
bfd_set_arch_mach	O
(	O
link_info	O
.	O
output_bfd	*(struct)
,	O
ldfile_output_architecture	O
,	O
ldfile_output_machine	O
)	O
;	O
bfd_emul_set_maxpagesize	(*(char),long)->(void)
(	O
output_target	O
,	O
config	O
.	O
maxpagesize	O
)	O
;	O
bfd_emul_set_commonpagesize	(*(char),long)->(void)
(	O
output_target	O
,	O
config	O
.	O
commonpagesize	O
)	O
;	O
}	O
void	O
syslib_default	O
(	O
char	O
*	O
ignore	O
ATTRIBUTE_UNUSED	O
)	O
{	O
info_msg	O
(	O
_	O
(	O
"%pS SYSLIB ignored\n"	*(char)
)	O
,	O
NULL	O
)	O
;	O
}	O
void	O
hll_default	O
(	O
char	O
*	O
ignore	O
ATTRIBUTE_UNUSED	O
)	O
{	O
info_msg	O
(	O
_	O
(	O
"%pS HLL ignored\n"	*(char)
)	O
,	O
NULL	O
)	O
;	O
}	O
ld_emulation_xfer_type	O
*	O
ld_emulations	O
[	O
]	O
=	O
{	O
EMULATION_LIST	O
}	O
;	O
void	O
ldemul_choose_mode	O
(	O
char	O
*	O
target	*(char)
)	O
{	O
ld_emulation_xfer_type	O
*	O
*	O
eptr	O
=	O
ld_emulations	O
;	O
if	O
(	O
target	*(char)
[	O
0	int
]	O
==	O
'g'	O
&&	O
target	*(char)
[	O
1	int
]	O
==	O
'l'	O
&&	O
target	*(char)
[	O
2	int
]	O
==	O
'd'	O
)	O
target	*(char)
+=	O
3	int
;	O
for	O
(	O
;	O
*	O
eptr	O
;	O
eptr	O
++	O
)	O
{	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
target	*(char)
,	O
(	O
*	O
eptr	O
)	O
->	O
emulation_name	O
)	O
==	O
0	int
)	O
{	O
ld_emulation	O
=	O
*	O
eptr	O
;	O
return	O
;	O
}	O
}	O
einfo	O
(	O
_	O
(	O
"%P: unrecognised emulation mode: %s\n"	*(char)
)	O
,	O
target	*(char)
)	O
;	O
einfo	O
(	O
_	O
(	O
"Supported emulations: "	*(char)
)	O
)	O
;	O
ldemul_list_emulations	O
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
einfo	O
(	O
"%F\n"	*(char)
)	O
;	O
}	O
void	O
ldemul_list_emulations	O
(	O
FILE	struct
*	O
f	O
)	O
{	O
ld_emulation_xfer_type	O
*	O
*	O
eptr	O
=	O
ld_emulations	O
;	O
bfd_boolean	int
first	O
=	O
TRUE	int
;	O
for	O
(	O
;	O
*	O
eptr	O
;	O
eptr	O
++	O
)	O
{	O
if	O
(	O
first	O
)	O
first	O
=	O
FALSE	O
;	O
else	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
f	O
,	O
" "	*(char)
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
f	O
,	O
"%s"	*(char)
,	O
(	O
*	O
eptr	O
)	O
->	O
emulation_name	O
)	O
;	O
}	O
}	O
void	O
ldemul_list_emulation_options	O
(	O
FILE	struct
*	O
f	O
)	O
{	O
ld_emulation_xfer_type	O
*	O
*	O
eptr	O
;	O
int	O
options_found	O
=	O
0	int
;	O
for	O
(	O
eptr	O
=	O
ld_emulations	O
;	O
*	O
eptr	O
;	O
eptr	O
++	O
)	O
{	O
ld_emulation_xfer_type	O
*	O
emul	O
=	O
*	O
eptr	O
;	O
if	O
(	O
emul	O
->	O
list_options	O
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
f	O
,	O
"%s: \n"	*(char)
,	O
emul	O
->	O
emulation_name	O
)	O
;	O
emul	O
->	O
list_options	O
(	O
f	O
)	O
;	O
options_found	O
=	O
1	int
;	O
}	O
}	O
if	O
(	O
!	O
options_found	O
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
f	O
,	O
_	O
(	O
"  no emulation specific options.\n"	*(char)
)	O
)	O
;	O
}	O
int	O
ldemul_find_potential_libraries	O
(	O
char	O
*	O
name	*(char)
,	O
lang_input_statement_type	O
*	O
entry	O
)	O
{	O
if	O
(	O
ld_emulation	O
->	O
find_potential_libraries	O
)	O
return	O
ld_emulation	O
->	O
find_potential_libraries	O
(	O
name	*(char)
,	O
entry	O
)	O
;	O
return	O
0	int
;	O
}	O
struct	O
bfd_elf_version_expr	O
*	O
ldemul_new_vers_pattern	O
(	O
struct	O
bfd_elf_version_expr	O
*	O
entry	O
)	O
{	O
if	O
(	O
ld_emulation	O
->	O
new_vers_pattern	O
)	O
entry	O
=	O
(	O
*	O
ld_emulation	O
->	O
new_vers_pattern	O
)	O
(	O
entry	O
)	O
;	O
return	O
entry	O
;	O
}	O
void	O
ldemul_extra_map_file_text	O
(	O
bfd	struct
*	O
abfd	*(struct)
,	O
struct	O
bfd_link_info	O
*	O
info	*(void)
,	O
FILE	struct
*	O
mapf	O
)	O
{	O
if	O
(	O
ld_emulation	O
->	O
extra_map_file_text	O
)	O
ld_emulation	O
->	O
extra_map_file_text	O
(	O
abfd	*(struct)
,	O
info	*(void)
,	O
mapf	O
)	O
;	O
}	O
int	O
ldemul_emit_ctf_early	O
(	O
void	O
)	O
{	O
if	O
(	O
ld_emulation	O
->	O
emit_ctf_early	O
)	O
return	O
ld_emulation	O
->	O
emit_ctf_early	O
(	O
)	O
;	O
return	O
1	int
;	O
}	O
void	O
ldemul_examine_strtab_for_ctf	O
(	O
struct	O
ctf_file	O
*	O
ctf_output	O
,	O
struct	O
elf_sym_strtab	O
*	O
syms	*(*(struct(*(struct(*`,*`,*`,*`,*`,*`,long,long,int,enum(int,int,int,int,int),enum(int,int,int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int),int,int,*`,long,long,struct`,*`,*`,int,int,long,*`,int,int,*`,*`,*`,*`,*`,*`,union`,union`,*`,*`,*`)),*(char),long,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),union(*(void),long))))
,	O
bfd_size_type	long
symcount	int
,	O
struct	O
elf_strtab_hash	O
*	O
symstrtab	O
)	O
{	O
if	O
(	O
ld_emulation	O
->	O
examine_strtab_for_ctf	O
)	O
ld_emulation	O
->	O
examine_strtab_for_ctf	O
(	O
ctf_output	O
,	O
syms	*(*(struct(*(struct(*`,*`,*`,*`,*`,*`,long,long,int,enum(int,int,int,int,int),enum(int,int,int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int),int,int,*`,long,long,struct`,*`,*`,int,int,long,*`,int,int,*`,*`,*`,*`,*`,*`,union`,union`,*`,*`,*`)),*(char),long,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),union(*(void),long))))
,	O
symcount	int
,	O
symstrtab	O
)	O
;	O
}	O
