static	O
int	O
*	O
_cond_stack	*(int)
;	O
static	O
int	O
_cond_stack_size	int
;	O
static	O
int	O
_cond_level	int
;	O
static	O
void	O
_cond_push	(int)->(void)
(	O
int	O
val	array(int)
)	O
;	O
static	O
int	O
_cond_pop	()->(int)
(	O
void	O
)	O
;	O
int	O
if_cond	()->(int)
(	O
)	O
{	O
if	O
(	O
_cond_level	int
==	O
0	int
)	O
return	O
1	int
;	O
return	O
_cond_stack	*(int)
[	O
_cond_level	int
-	O
1	int
]	O
;	O
}	O
void	O
_cond_push	(int)->(void)
(	O
int	O
val	array(int)
)	O
{	O
if	O
(	O
!	O
_cond_stack	*(int)
)	O
{	O
_cond_stack	*(int)
=	O
calloc	(long,long)->(*(void))
(	O
COND_STK_SIZE	int
,	O
sizeof	O
(	O
_cond_stack	*(int)
[	O
0	int
]	O
)	O
)	O
;	O
_cond_stack_size	int
=	O
COND_STK_SIZE	int
;	O
_cond_level	int
=	O
0	int
;	O
}	O
else	O
if	O
(	O
_cond_level	int
>=	O
_cond_stack_size	int
)	O
{	O
_cond_stack_size	int
+=	O
COND_STK_INCR	int
;	O
_cond_stack	*(int)
=	O
realloc	(*(void),long)->(*(void))
(	O
_cond_stack	*(int)
,	O
sizeof	O
(	O
_cond_stack	*(int)
[	O
0	int
]	O
)	O
*	O
_cond_stack_size	int
)	O
;	O
}	O
if	O
(	O
!	O
_cond_stack	*(int)
)	O
{	O
mu_error	(*(char))->(int)
(	O
_	O
(	O
"Not enough memory"	*(char)
)	O
)	O
;	O
exit	(int)->(void)
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
_cond_stack	*(int)
[	O
_cond_level	int
++	O
]	O
=	O
val	array(int)
;	O
}	O
int	O
_cond_pop	()->(int)
(	O
)	O
{	O
if	O
(	O
_cond_level	int
==	O
0	int
)	O
{	O
mu_error	(*(char))->(int)
(	O
_	O
(	O
"Internal error: condition stack underflow"	*(char)
)	O
)	O
;	O
abort	()->(void)
(	O
)	O
;	O
}	O
return	O
_cond_stack	*(int)
[	O
--	O
_cond_level	int
]	O
;	O
}	O
int	O
mail_if	(int,*(*(char)))->(int)
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	*(*(char))
)	O
{	O
char	O
*	O
mode	int
;	O
int	O
cond	*((*(char),*(void),*(void))->(int))
;	O
if	O
(	O
argc	int
!=	O
2	int
)	O
{	O
mu_error	(*(char))->(int)
(	O
_	O
(	O
"if requires an argument: s | r | t"	*(char)
)	O
)	O
;	O
return	O
1	int
;	O
}	O
if	O
(	O
argv	*(*(char))
[	O
1	int
]	O
[	O
1	int
]	O
!=	O
0	int
)	O
{	O
mu_error	(*(char))->(int)
(	O
_	O
(	O
"Valid if arguments are: s | r | t"	*(char)
)	O
)	O
;	O
return	O
1	int
;	O
}	O
if	O
(	O
mailvar_get	(*(void),*(char),enum(int,int,int,int),int)->(int)
(	O
&	O
mode	int
,	O
mailvar_name_mode	*(char)
,	O
mailvar_type_string	int
,	O
1	int
)	O
)	O
exit	(int)->(void)
(	O
EXIT_FAILURE	int
)	O
;	O
if	O
(	O
if_cond	()->(int)
(	O
)	O
==	O
0	int
)	O
cond	*((*(char),*(void),*(void))->(int))
=	O
0	int
;	O
else	O
{	O
switch	O
(	O
argv	*(*(char))
[	O
1	int
]	O
[	O
0	int
]	O
)	O
{	O
case	O
's'	O
:	O
cond	*((*(char),*(void),*(void))->(int))
=	O
strcmp	(*(char),*(char))->(int)
(	O
mode	int
,	O
"send"	*(char)
)	O
==	O
0	int
;	O
break	O
;	O
case	O
'r'	O
:	O
cond	*((*(char),*(void),*(void))->(int))
=	O
strcmp	(*(char),*(char))->(int)
(	O
mode	int
,	O
"read"	*(char)
)	O
==	O
0	int
;	O
break	O
;	O
case	O
't'	O
:	O
cond	*((*(char),*(void),*(void))->(int))
=	O
isatty	(int)->(int)
(	O
fileno	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
)	O
;	O
break	O
;	O
default	O
:	O
mu_error	(*(char))->(int)
(	O
_	O
(	O
"Valid if arguments are: s | r | t"	*(char)
)	O
)	O
;	O
return	O
1	int
;	O
}	O
}	O
_cond_push	(int)->(void)
(	O
cond	*((*(char),*(void),*(void))->(int))
)	O
;	O
return	O
0	int
;	O
}	O
int	O
mail_else	(int,*(*(char)))->(int)
(	O
int	O
argc	int
MU_ARG_UNUSED	O
,	O
char	O
*	O
*	O
argv	*(*(char))
MU_ARG_UNUSED	O
)	O
{	O
int	O
cond	*((*(char),*(void),*(void))->(int))
;	O
if	O
(	O
_cond_level	int
==	O
0	int
)	O
{	O
mu_error	(*(char))->(int)
(	O
_	O
(	O
"else without matching if"	*(char)
)	O
)	O
;	O
return	O
1	int
;	O
}	O
cond	*((*(char),*(void),*(void))->(int))
=	O
_cond_pop	()->(int)
(	O
)	O
;	O
if	O
(	O
if_cond	()->(int)
(	O
)	O
)	O
cond	*((*(char),*(void),*(void))->(int))
=	O
!	O
cond	*((*(char),*(void),*(void))->(int))
;	O
_cond_push	(int)->(void)
(	O
cond	*((*(char),*(void),*(void))->(int))
)	O
;	O
return	O
0	int
;	O
}	O
int	O
mail_endif	(int,*(*(char)))->(int)
(	O
int	O
argc	int
MU_ARG_UNUSED	O
,	O
char	O
*	O
*	O
argv	*(*(char))
MU_ARG_UNUSED	O
)	O
{	O
if	O
(	O
_cond_level	int
==	O
0	int
)	O
{	O
mu_error	(*(char))->(int)
(	O
_	O
(	O
"endif without matching if"	*(char)
)	O
)	O
;	O
return	O
1	int
;	O
}	O
_cond_pop	()->(int)
(	O
)	O
;	O
return	O
1	int
;	O
}	O
