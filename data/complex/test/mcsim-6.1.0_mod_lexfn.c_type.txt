HANDLE	long
CalculateVarHandle	(*(struct(*(char),*(char),long,*(struct(*`,*`,long,*`)))),*(char))->(long)
(	O
PVMMAPSTRCT	*(struct(*(char),*(char),long,*(struct(*(char),*(char),long,*(struct`)))))
pvm	*(struct(*(char),*(char),long,*(struct(*(char),*(char),long,*(struct`)))))
,	O
PSTR	*(char)
sz	*(char)
)	O
;	O
static	O
PVMMAPSTRCT	*(struct(*(char),*(char),long,*(struct(*(char),*(char),long,*(struct`)))))
vpvmGlo	*(struct(*(char),*(char),long,*(struct(*(char),*(char),long,*(struct`)))))
;	O
typedef	O
struct	O
tagINPUTFUNCTIONMAP	struct(*(char),int)
{	O
PSTR	*(char)
szName	*(char)
;	O
int	O
iIFNType	int
;	O
}	O
IFM	struct(*(char),int)
,	O
*	O
PIFM	*(struct(*(char),int))
;	O
IFM	struct(*(char),int)
vrgifmMap	array(struct(*(char),int))
[	O
]	O
=	O
{	O
{	O
"PerDose"	*(char)
,	O
IFN_PERDOSE	int
}	O
,	O
{	O
"PerRate"	*(char)
,	O
IFN_PERRATE	int
}	O
,	O
{	O
"PerExp"	*(char)
,	O
IFN_PEREXP	int
}	O
,	O
{	O
"NDoses"	*(char)
,	O
IFN_NDOSES	int
}	O
,	O
{	O
""	*(char)
,	O
IFN_NULL	int
}	O
}	O
;	O
int	O
GetFnType	(*(char))->(int)
(	O
PSTR	*(char)
szName	*(char)
)	O
{	O
PIFM	*(struct(*(char),int))
pifm	*(struct(*(char),int))
=	O
&	O
vrgifmMap	array(struct(*(char),int))
[	O
0	int
]	O
;	O
while	O
(	O
*	O
pifm	*(struct(*(char),int))
->	O
szName	*(char)
&&	O
MyStrcmp	(*(char),*(char))->(int)
(	O
szName	*(char)
,	O
pifm	*(struct(*(char),int))
->	O
szName	*(char)
)	O
)	O
pifm	*(struct(*(char),int))
++	O
;	O
return	O
(	O
pifm	*(struct(*(char),int))
->	O
iIFNType	int
)	O
;	O
}	O
void	O
InitIFN	(*(struct(int,int,double,double,double,double,double,double,double,long,long,long,long,long,int,int,*(double),*(double),*(double))))->(void)
(	O
PIFN	*(struct(int,int,double,double,double,double,double,double,double,long,long,long,long,long,int,int,*(double),*(double),*(double)))
pifn	*(struct(int,int,double,double,double,double,double,double,double,long,long,long,long,long,int,int,*(double),*(double),*(double)))
)	O
{	O
pifn	*(struct(int,int,double,double,double,double,double,double,double,long,long,long,long,long,int,int,*(double),*(double),*(double)))
->	O
dTStartPeriod	double
=	O
0.0	int
;	O
pifn	*(struct(int,int,double,double,double,double,double,double,double,long,long,long,long,long,int,int,*(double),*(double),*(double)))
->	O
bOn	int
=	O
FALSE	int
;	O
pifn	*(struct(int,int,double,double,double,double,double,double,double,long,long,long,long,long,int,int,*(double),*(double),*(double)))
->	O
dMag	double
=	O
0.0	int
;	O
pifn	*(struct(int,int,double,double,double,double,double,double,double,long,long,long,long,long,int,int,*(double),*(double),*(double)))
->	O
dTper	double
=	O
0.0	int
;	O
pifn	*(struct(int,int,double,double,double,double,double,double,double,long,long,long,long,long,int,int,*(double),*(double),*(double)))
->	O
dT0	double
=	O
0.0	int
;	O
pifn	*(struct(int,int,double,double,double,double,double,double,double,long,long,long,long,long,int,int,*(double),*(double),*(double)))
->	O
dTexp	double
=	O
0.0	int
;	O
pifn	*(struct(int,int,double,double,double,double,double,double,double,long,long,long,long,long,int,int,*(double),*(double),*(double)))
->	O
dDecay	double
=	O
0.0	int
;	O
pifn	*(struct(int,int,double,double,double,double,double,double,double,long,long,long,long,long,int,int,*(double),*(double),*(double)))
->	O
dVal	double
=	O
0.0	int
;	O
pifn	*(struct(int,int,double,double,double,double,double,double,double,long,long,long,long,long,int,int,*(double),*(double),*(double)))
->	O
nDoses	int
=	O
0	int
;	O
pifn	*(struct(int,int,double,double,double,double,double,double,double,long,long,long,long,long,int,int,*(double),*(double),*(double)))
->	O
hMag	long
=	O
0	int
;	O
pifn	*(struct(int,int,double,double,double,double,double,double,double,long,long,long,long,long,int,int,*(double),*(double),*(double)))
->	O
hTper	long
=	O
0	int
;	O
pifn	*(struct(int,int,double,double,double,double,double,double,double,long,long,long,long,long,int,int,*(double),*(double),*(double)))
->	O
hT0	long
=	O
0	int
;	O
pifn	*(struct(int,int,double,double,double,double,double,double,double,long,long,long,long,long,int,int,*(double),*(double),*(double)))
->	O
hTexp	long
=	O
0	int
;	O
pifn	*(struct(int,int,double,double,double,double,double,double,double,long,long,long,long,long,int,int,*(double),*(double),*(double)))
->	O
hDecay	long
=	O
0	int
;	O
pifn	*(struct(int,int,double,double,double,double,double,double,double,long,long,long,long,long,int,int,*(double),*(double),*(double)))
->	O
nDoses	int
=	O
pifn	*(struct(int,int,double,double,double,double,double,double,double,long,long,long,long,long,int,int,*(double),*(double),*(double)))
->	O
iDoseCur	int
=	O
0	int
;	O
pifn	*(struct(int,int,double,double,double,double,double,double,double,long,long,long,long,long,int,int,*(double),*(double),*(double)))
->	O
rgT0s	*(double)
=	O
pifn	*(struct(int,int,double,double,double,double,double,double,double,long,long,long,long,long,int,int,*(double),*(double),*(double)))
->	O
rgTexps	*(double)
=	O
pifn	*(struct(int,int,double,double,double,double,double,double,double,long,long,long,long,long,int,int,*(double),*(double),*(double)))
->	O
rgMags	*(double)
=	O
NULL	O
;	O
}	O
BOOL	int
DefDepParm	(*(char),*(double),*(long))->(int)
(	O
PSTR	*(char)
szLex	*(char)
,	O
PDOUBLE	*(double)
pdValue	*(double)
,	O
HANDLE	long
*	O
phvar	*(long)
)	O
{	O
BOOL	int
bReturn	int
=	O
TRUE	int
;	O
if	O
(	O
IsIdentifier	O
(	O
szLex	*(char)
)	O
)	O
{	O
if	O
(	O
!	O
(	O
*	O
phvar	*(long)
=	O
(	O
HANDLE	long
)	O
GetParmHandle	O
(	O
szLex	*(char)
)	O
)	O
)	O
{	O
bReturn	int
=	O
FALSE	int
;	O
ReportError	(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void))),int,*(char),*(char))->(void)
(	O
NULL	O
,	O
RE_UNDEFINED	O
,	O
szLex	*(char)
,	O
NULL	O
)	O
;	O
}	O
}	O
else	O
*	O
pdValue	*(double)
=	O
atof	(*(char))->(double)
(	O
szLex	*(char)
)	O
;	O
return	O
(	O
bReturn	int
)	O
;	O
}	O
BOOL	int
GetInputArgs	(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void))),*(struct(int,int,double,double,double,double,double,double,double,long,long,long,long,long,int,int,*(double),*(double),*(double))))->(int)
(	O
PINPUTBUF	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void)))
pibIn	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void)))
,	O
PIFN	*(struct(int,int,double,double,double,double,double,double,double,long,long,long,long,long,int,int,*(double),*(double),*(double)))
pifn	*(struct(int,int,double,double,double,double,double,double,double,long,long,long,long,long,int,int,*(double),*(double),*(double)))
)	O
{	O
PSTRLEX	array(char)
rgszLex	array(array(char))
[	O
4	int
]	O
;	O
int	O
rgiTypes	array(int)
[	O
4	int
]	O
,	O
i	int
;	O
long	O
rgiLowerB	array(long)
[	O
4	int
]	O
,	O
rgiUpperB	array(long)
[	O
4	int
]	O
;	O
BOOL	int
bReturn	int
=	O
FALSE	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
4	int
;	O
i	int
++	O
)	O
rgiTypes	array(int)
[	O
i	int
]	O
=	O
LX_INTEGER	int
|	O
LX_FLOAT	int
|	O
LX_IDENTIFIER	int
;	O
if	O
(	O
GetFuncArgs	(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void))),int,array(int),*(char),array(long),array(long))->(int)
(	O
pibIn	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void)))
,	O
4	int
,	O
rgiTypes	array(int)
,	O
rgszLex	array(array(char))
[	O
0	int
]	O
,	O
rgiLowerB	array(long)
,	O
rgiUpperB	array(long)
)	O
)	O
{	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
4	int
;	O
i	int
++	O
)	O
if	O
(	O
(	O
rgiLowerB	array(long)
[	O
i	int
]	O
!=	O
-	O
1	int
)	O
||	O
(	O
rgiUpperB	array(long)
[	O
i	int
]	O
!=	O
-	O
1	int
)	O
)	O
ReportError	(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void))),int,*(char),*(char))->(void)
(	O
pibIn	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void)))
,	O
RE_BADCONTEXT	O
|	O
RE_FATAL	int
,	O
"array bounds"	*(char)
,	O
"Arrays cannot be used as input function parameters"	*(char)
)	O
;	O
bReturn	int
=	O
TRUE	int
;	O
bReturn	int
&=	O
DefDepParm	(*(char),*(double),*(long))->(int)
(	O
rgszLex	array(array(char))
[	O
0	int
]	O
,	O
&	O
pifn	*(struct(int,int,double,double,double,double,double,double,double,long,long,long,long,long,int,int,*(double),*(double),*(double)))
->	O
dMag	double
,	O
&	O
pifn	*(struct(int,int,double,double,double,double,double,double,double,long,long,long,long,long,int,int,*(double),*(double),*(double)))
->	O
hMag	long
)	O
;	O
bReturn	int
&=	O
DefDepParm	(*(char),*(double),*(long))->(int)
(	O
rgszLex	array(array(char))
[	O
1	int
]	O
,	O
&	O
pifn	*(struct(int,int,double,double,double,double,double,double,double,long,long,long,long,long,int,int,*(double),*(double),*(double)))
->	O
dTper	double
,	O
&	O
pifn	*(struct(int,int,double,double,double,double,double,double,double,long,long,long,long,long,int,int,*(double),*(double),*(double)))
->	O
hTper	long
)	O
;	O
bReturn	int
&=	O
DefDepParm	(*(char),*(double),*(long))->(int)
(	O
rgszLex	array(array(char))
[	O
2	int
]	O
,	O
&	O
pifn	*(struct(int,int,double,double,double,double,double,double,double,long,long,long,long,long,int,int,*(double),*(double),*(double)))
->	O
dT0	double
,	O
&	O
pifn	*(struct(int,int,double,double,double,double,double,double,double,long,long,long,long,long,int,int,*(double),*(double),*(double)))
->	O
hT0	long
)	O
;	O
if	O
(	O
pifn	*(struct(int,int,double,double,double,double,double,double,double,long,long,long,long,long,int,int,*(double),*(double),*(double)))
->	O
iType	int
==	O
IFN_PEREXP	int
)	O
bReturn	int
&=	O
DefDepParm	(*(char),*(double),*(long))->(int)
(	O
rgszLex	array(array(char))
[	O
3	int
]	O
,	O
&	O
pifn	*(struct(int,int,double,double,double,double,double,double,double,long,long,long,long,long,int,int,*(double),*(double),*(double)))
->	O
dDecay	double
,	O
&	O
pifn	*(struct(int,int,double,double,double,double,double,double,double,long,long,long,long,long,int,int,*(double),*(double),*(double)))
->	O
hDecay	long
)	O
;	O
else	O
bReturn	int
&=	O
DefDepParm	(*(char),*(double),*(long))->(int)
(	O
rgszLex	array(array(char))
[	O
3	int
]	O
,	O
&	O
pifn	*(struct(int,int,double,double,double,double,double,double,double,long,long,long,long,long,int,int,*(double),*(double),*(double)))
->	O
dTexp	double
,	O
&	O
pifn	*(struct(int,int,double,double,double,double,double,double,double,long,long,long,long,long,int,int,*(double),*(double),*(double)))
->	O
hTexp	long
)	O
;	O
if	O
(	O
!	O
bReturn	int
)	O
ReportError	(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void))),int,*(char),*(char))->(void)
(	O
pibIn	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void)))
,	O
RE_EXPECTED	int
,	O
"input-spec"	*(char)
,	O
NULL	O
)	O
;	O
}	O
return	O
(	O
bReturn	int
)	O
;	O
}	O
BOOL	int
GetNNumbers	(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void))),*(char),int,*(double))->(int)
(	O
PINPUTBUF	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void)))
pibIn	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void)))
,	O
PSTR	*(char)
szLex	*(char)
,	O
int	O
nNumbers	int
,	O
PDOUBLE	*(double)
rgd	*(double)
)	O
{	O
BOOL	int
bErr	int
=	O
FALSE	int
;	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
nNumbers	int
&&	O
!	O
bErr	int
;	O
i	int
++	O
)	O
{	O
if	O
(	O
i	int
)	O
GetOptPunct	(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void))),*(char),char)->(int)
(	O
pibIn	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void)))
,	O
szLex	*(char)
,	O
','	O
)	O
;	O
if	O
(	O
!	O
(	O
bErr	int
=	O
ENextLex	(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void))),array(char),int)->(int)
(	O
pibIn	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void)))
,	O
szLex	*(char)
,	O
LX_NUMBER	O
)	O
)	O
)	O
rgd	*(double)
[	O
i	int
]	O
=	O
atof	(*(char))->(double)
(	O
szLex	*(char)
)	O
;	O
}	O
return	O
bErr	int
;	O
}	O
BOOL	int
GetNDoses	(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void))),*(char),*(struct(int,int,double,double,double,double,double,double,double,long,long,long,long,long,int,int,*(double),*(double),*(double))))->(int)
(	O
PINPUTBUF	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void)))
pibIn	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void)))
,	O
PSTR	*(char)
szLex	*(char)
,	O
PIFN	*(struct(int,int,double,double,double,double,double,double,double,long,long,long,long,long,int,int,*(double),*(double),*(double)))
pifn	*(struct(int,int,double,double,double,double,double,double,double,long,long,long,long,long,int,int,*(double),*(double),*(double)))
)	O
{	O
BOOL	int
bErr	int
=	O
FALSE	int
;	O
if	O
(	O
(	O
bErr	int
=	O
EGetPunct	(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void))),*(char),char)->(int)
(	O
pibIn	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void)))
,	O
szLex	*(char)
,	O
CH_LPAREN	O
)	O
)	O
)	O
goto	O
Exit_GetNDoses	O
;	O
if	O
(	O
(	O
bErr	int
=	O
ENextLex	(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void))),array(char),int)->(int)
(	O
pibIn	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void)))
,	O
szLex	*(char)
,	O
LX_INTEGER	int
)	O
)	O
)	O
goto	O
Exit_GetNDoses	O
;	O
pifn	*(struct(int,int,double,double,double,double,double,double,double,long,long,long,long,long,int,int,*(double),*(double),*(double)))
->	O
nDoses	int
=	O
atoi	(*(char))->(int)
(	O
szLex	*(char)
)	O
;	O
if	O
(	O
(	O
bErr	int
=	O
(	O
pifn	*(struct(int,int,double,double,double,double,double,double,double,long,long,long,long,long,int,int,*(double),*(double),*(double)))
->	O
nDoses	int
<=	O
0	int
)	O
)	O
)	O
{	O
ReportError	(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void))),int,*(char),*(char))->(void)
(	O
pibIn	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void)))
,	O
RE_LEXEXPECTED	int
,	O
"positive-integer"	*(char)
,	O
szLex	*(char)
)	O
;	O
goto	O
Exit_GetNDoses	O
;	O
}	O
if	O
(	O
!	O
(	O
pifn	*(struct(int,int,double,double,double,double,double,double,double,long,long,long,long,long,int,int,*(double),*(double),*(double)))
->	O
rgT0s	*(double)
=	O
(	O
PDOUBLE	*(double)
)	O
malloc	(long)->(*(void))
(	O
pifn	*(struct(int,int,double,double,double,double,double,double,double,long,long,long,long,long,int,int,*(double),*(double),*(double)))
->	O
nDoses	int
*	O
sizeof	O
(	O
double	O
)	O
)	O
)	O
||	O
!	O
(	O
pifn	*(struct(int,int,double,double,double,double,double,double,double,long,long,long,long,long,int,int,*(double),*(double),*(double)))
->	O
rgTexps	*(double)
=	O
(	O
PDOUBLE	*(double)
)	O
malloc	(long)->(*(void))
(	O
pifn	*(struct(int,int,double,double,double,double,double,double,double,long,long,long,long,long,int,int,*(double),*(double),*(double)))
->	O
nDoses	int
*	O
sizeof	O
(	O
double	O
)	O
)	O
)	O
||	O
!	O
(	O
pifn	*(struct(int,int,double,double,double,double,double,double,double,long,long,long,long,long,int,int,*(double),*(double),*(double)))
->	O
rgMags	*(double)
=	O
(	O
PDOUBLE	*(double)
)	O
malloc	(long)->(*(void))
(	O
pifn	*(struct(int,int,double,double,double,double,double,double,double,long,long,long,long,long,int,int,*(double),*(double),*(double)))
->	O
nDoses	int
*	O
sizeof	O
(	O
double	O
)	O
)	O
)	O
)	O
ReportError	(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void))),int,*(char),*(char))->(void)
(	O
pibIn	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void)))
,	O
RE_OUTOFMEM	int
|	O
RE_FATAL	int
,	O
"GetNDoses"	*(char)
,	O
NULL	O
)	O
;	O
GetOptPunct	(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void))),*(char),char)->(int)
(	O
pibIn	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void)))
,	O
szLex	*(char)
,	O
','	O
)	O
;	O
bErr	int
=	O
GetNNumbers	(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void))),*(char),int,*(double))->(int)
(	O
pibIn	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void)))
,	O
szLex	*(char)
,	O
pifn	*(struct(int,int,double,double,double,double,double,double,double,long,long,long,long,long,int,int,*(double),*(double),*(double)))
->	O
nDoses	int
,	O
pifn	*(struct(int,int,double,double,double,double,double,double,double,long,long,long,long,long,int,int,*(double),*(double),*(double)))
->	O
rgMags	*(double)
)	O
;	O
GetOptPunct	(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void))),*(char),char)->(int)
(	O
pibIn	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void)))
,	O
szLex	*(char)
,	O
','	O
)	O
;	O
if	O
(	O
!	O
bErr	int
)	O
bErr	int
=	O
GetNNumbers	(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void))),*(char),int,*(double))->(int)
(	O
pibIn	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void)))
,	O
szLex	*(char)
,	O
pifn	*(struct(int,int,double,double,double,double,double,double,double,long,long,long,long,long,int,int,*(double),*(double),*(double)))
->	O
nDoses	int
,	O
pifn	*(struct(int,int,double,double,double,double,double,double,double,long,long,long,long,long,int,int,*(double),*(double),*(double)))
->	O
rgT0s	*(double)
)	O
;	O
GetOptPunct	(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void))),*(char),char)->(int)
(	O
pibIn	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void)))
,	O
szLex	*(char)
,	O
','	O
)	O
;	O
if	O
(	O
!	O
bErr	int
)	O
bErr	int
=	O
GetNNumbers	(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void))),*(char),int,*(double))->(int)
(	O
pibIn	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void)))
,	O
szLex	*(char)
,	O
pifn	*(struct(int,int,double,double,double,double,double,double,double,long,long,long,long,long,int,int,*(double),*(double),*(double)))
->	O
nDoses	int
,	O
pifn	*(struct(int,int,double,double,double,double,double,double,double,long,long,long,long,long,int,int,*(double),*(double),*(double)))
->	O
rgTexps	*(double)
)	O
;	O
if	O
(	O
!	O
bErr	int
)	O
bErr	int
=	O
EGetPunct	(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void))),*(char),char)->(int)
(	O
pibIn	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void)))
,	O
szLex	*(char)
,	O
CH_RPAREN	O
)	O
;	O
Exit_GetNDoses	O
:	O
if	O
(	O
bErr	int
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"Syntax: GetNDoses (nDoses, <n Magnitudes>, "	*(char)
"<n T0's>, <n Texposure's>)\n"	*(char)
)	O
;	O
return	O
(	O
!	O
bErr	int
)	O
;	O
}	O
BOOL	int
GetInputFn	(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void))),*(char),*(struct(int,int,double,double,double,double,double,double,double,long,long,long,long,long,int,int,*(double),*(double),*(double))))->(int)
(	O
PINPUTBUF	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void)))
pibIn	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void)))
,	O
PSTR	*(char)
sz	*(char)
,	O
PIFN	*(struct(int,int,double,double,double,double,double,double,double,long,long,long,long,long,int,int,*(double),*(double),*(double)))
pifn	*(struct(int,int,double,double,double,double,double,double,double,long,long,long,long,long,int,int,*(double),*(double),*(double)))
)	O
{	O
INPUTBUF	struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void))
ibDummy	struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void))
;	O
PINPUTBUF	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void)))
pibDum	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void)))
=	O
&	O
ibDummy	struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void))
;	O
PSTRLEX	array(char)
szLex	*(char)
;	O
int	O
iType	int
;	O
BOOL	int
bReturn	int
=	O
FALSE	int
;	O
if	O
(	O
!	O
pibIn	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void)))
||	O
!	O
pifn	*(struct(int,int,double,double,double,double,double,double,double,long,long,long,long,long,int,int,*(double),*(double),*(double)))
)	O
return	O
(	O
FALSE	int
)	O
;	O
{	O
PINPUTINFO	*(struct(int,int,int,int,*(char),*(char),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`)))))
pinfo	*(struct(int,int,int,int,*(char),*(char),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`)))))
=	O
(	O
PINPUTINFO	*(struct(int,int,int,int,*(char),*(char),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`)))))
)	O
pibIn	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void)))
->	O
pInfo	*(void)
;	O
vpvmGlo	*(struct(*(char),*(char),long,*(struct(*(char),*(char),long,*(struct`)))))
=	O
pinfo	*(struct(int,int,int,int,*(char),*(char),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`)))))
->	O
pvmGloVars	*(struct(*(char),*(char),long,*(struct(*(char),*(char),long,*(struct`)))))
;	O
}	O
if	O
(	O
sz	*(char)
)	O
MakeStringBuffer	(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void))),*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void))),*(char))->(void)
(	O
pibIn	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void)))
,	O
pibDum	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void)))
,	O
sz	*(char)
)	O
;	O
else	O
pibDum	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void)))
=	O
pibIn	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void)))
;	O
NextLex	(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void))),array(char),*(int))->(void)
(	O
pibDum	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void)))
,	O
szLex	*(char)
,	O
&	O
iType	int
)	O
;	O
switch	O
(	O
iType	int
)	O
{	O
default	O
:	O
case	O
LX_NULL	int
:	O
case	O
LX_PUNCT	int
:	O
ReportError	(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void))),int,*(char),*(char))->(void)
(	O
pibIn	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void)))
,	O
RE_LEXEXPECTED	int
,	O
"input-spec"	*(char)
,	O
NULL	O
)	O
;	O
break	O
;	O
case	O
LX_FLOAT	int
:	O
case	O
LX_INTEGER	int
:	O
case	O
LX_IDENTIFIER	int
:	O
InitIFN	(*(struct(int,int,double,double,double,double,double,double,double,long,long,long,long,long,int,int,*(double),*(double),*(double))))->(void)
(	O
pifn	*(struct(int,int,double,double,double,double,double,double,double,long,long,long,long,long,int,int,*(double),*(double),*(double)))
)	O
;	O
if	O
(	O
iType	int
==	O
LX_IDENTIFIER	int
)	O
{	O
pifn	*(struct(int,int,double,double,double,double,double,double,double,long,long,long,long,long,int,int,*(double),*(double),*(double)))
->	O
iType	int
=	O
GetFnType	(*(char))->(int)
(	O
szLex	*(char)
)	O
;	O
switch	O
(	O
pifn	*(struct(int,int,double,double,double,double,double,double,double,long,long,long,long,long,int,int,*(double),*(double),*(double)))
->	O
iType	int
)	O
{	O
case	O
IFN_NDOSES	int
:	O
bReturn	int
=	O
GetNDoses	(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void))),*(char),*(struct(int,int,double,double,double,double,double,double,double,long,long,long,long,long,int,int,*(double),*(double),*(double))))->(int)
(	O
pibDum	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void)))
,	O
szLex	*(char)
,	O
pifn	*(struct(int,int,double,double,double,double,double,double,double,long,long,long,long,long,int,int,*(double),*(double),*(double)))
)	O
;	O
break	O
;	O
default	O
:	O
pifn	*(struct(int,int,double,double,double,double,double,double,double,long,long,long,long,long,int,int,*(double),*(double),*(double)))
->	O
iType	int
=	O
IFN_NULL	int
;	O
ReportError	(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void))),int,*(char),*(char))->(void)
(	O
pibIn	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void)))
,	O
RE_LEXEXPECTED	int
,	O
"input-spec"	*(char)
,	O
szLex	*(char)
)	O
;	O
break	O
;	O
case	O
IFN_PERDOSE	int
:	O
case	O
IFN_PERRATE	int
:	O
case	O
IFN_PEREXP	int
:	O
bReturn	int
=	O
GetInputArgs	(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void))),*(struct(int,int,double,double,double,double,double,double,double,long,long,long,long,long,int,int,*(double),*(double),*(double))))->(int)
(	O
pibDum	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void)))
,	O
pifn	*(struct(int,int,double,double,double,double,double,double,double,long,long,long,long,long,int,int,*(double),*(double),*(double)))
)	O
;	O
break	O
;	O
}	O
}	O
else	O
{	O
pifn	*(struct(int,int,double,double,double,double,double,double,double,long,long,long,long,long,int,int,*(double),*(double),*(double)))
->	O
iType	int
=	O
IFN_CONSTANT	int
;	O
pifn	*(struct(int,int,double,double,double,double,double,double,double,long,long,long,long,long,int,int,*(double),*(double),*(double)))
->	O
dMag	double
=	O
pifn	*(struct(int,int,double,double,double,double,double,double,double,long,long,long,long,long,int,int,*(double),*(double),*(double)))
->	O
dVal	double
=	O
atof	(*(char))->(double)
(	O
szLex	*(char)
)	O
;	O
pifn	*(struct(int,int,double,double,double,double,double,double,double,long,long,long,long,long,int,int,*(double),*(double),*(double)))
->	O
bOn	int
=	O
TRUE	int
;	O
bReturn	int
=	O
TRUE	int
;	O
}	O
break	O
;	O
}	O
return	O
(	O
bReturn	int
)	O
;	O
}	O
