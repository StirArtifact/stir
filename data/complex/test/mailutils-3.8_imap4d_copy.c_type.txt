int	O
imap4d_copy	(*(struct(enum(int,int,int,int,int),*(struct(*`,*`,*`,*`)))),*(struct(*(char),*((*`,*`,*`)->(int)),int,int,int,*(char))),*(struct))->(int)
(	O
struct	O
imap4d_session	struct(enum(int,int,int,int,int),*(struct(*(char),*(char),*(char),*(char))))
*	O
session	*(struct(enum(int,int,int,int,int),*(struct(*(char),*(char),*(char),*(char)))))
,	O
struct	O
imap4d_command	struct(*(char),*((*(struct),*(struct(*(char),*((*`,*`,*`)->(int)),int,int,int,*(char))),*(struct))->(int)),int,int,int,*(char))
*	O
command	*(char)
,	O
imap4d_tokbuf_t	*(struct)
tok	*(*(struct))
)	O
{	O
int	O
rc	int
;	O
char	O
*	O
text	*(char)
;	O
if	O
(	O
imap4d_tokbuf_argc	(*(struct))->(int)
(	O
tok	*(*(struct))
)	O
!=	O
4	int
)	O
return	O
io_completion_response	(*(struct(*(char),*((*`,*`,*`)->(int)),int,int,int,*(char))),int,*(char))->(int)
(	O
command	*(char)
,	O
RESP_BAD	int
,	O
"Invalid arguments"	*(char)
)	O
;	O
rc	int
=	O
imap4d_copy0	(*(struct),int,*(*(char)))->(int)
(	O
tok	*(*(struct))
,	O
0	int
,	O
&	O
text	*(char)
)	O
;	O
if	O
(	O
rc	int
==	O
RESP_NONE	int
)	O
{	O
int	O
new_state	int
=	O
(	O
rc	int
==	O
RESP_OK	int
)	O
?	O
command	*(char)
->	O
success	int
:	O
command	*(char)
->	O
failure	int
;	O
if	O
(	O
new_state	int
!=	O
STATE_NONE	O
)	O
state	*(int)
=	O
new_state	int
;	O
return	O
io_sendf	(*(char))->(int)
(	O
"%s %s\n"	*(char)
,	O
command	*(char)
->	O
tag	*(char)
,	O
text	*(char)
)	O
;	O
}	O
return	O
io_completion_response	(*(struct(*(char),*((*`,*`,*`)->(int)),int,int,int,*(char))),int,*(char))->(int)
(	O
command	*(char)
,	O
rc	int
,	O
"%s"	*(char)
,	O
text	*(char)
)	O
;	O
}	O
struct	O
copy_env	struct(*(struct),long,int,*(*(char)))
{	O
mu_mailbox_t	*(struct)
dst	*(char)
;	O
mu_off_t	long
total	long
;	O
int	O
ret	*(*(struct))
;	O
char	O
*	O
*	O
err_text	*(char)
;	O
}	O
;	O
static	O
int	O
size_sum	(long,*(struct),*(void))->(int)
(	O
size_t	long
msgno	long
,	O
mu_message_t	*(struct)
msg	*(struct)
,	O
void	O
*	O
data	*(void)
)	O
{	O
struct	O
copy_env	struct(*(struct),long,int,*(*(char)))
*	O
env	*(struct)
=	O
data	*(void)
;	O
int	O
rc	int
;	O
size_t	long
size	*(long)
;	O
rc	int
=	O
mu_message_size	(*(struct),*(long))->(int)
(	O
msg	*(struct)
,	O
&	O
size	*(long)
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_diag_funcall	(int,*(char),*(char),int)->(void)
(	O
MU_DIAG_ERROR	O
,	O
"mu_message_size"	*(char)
,	O
NULL	O
,	O
rc	int
)	O
;	O
env	*(struct)
->	O
ret	*(*(struct))
=	O
RESP_BAD	int
;	O
return	O
MU_ERR_FAILURE	O
;	O
}	O
env	*(struct)
->	O
total	long
+=	O
size	*(long)
;	O
return	O
0	int
;	O
}	O
static	O
int	O
do_copy	(long,*(struct),*(void))->(int)
(	O
size_t	long
msgno	long
,	O
mu_message_t	*(struct)
msg	*(struct)
,	O
void	O
*	O
data	*(void)
)	O
{	O
struct	O
copy_env	struct(*(struct),long,int,*(*(char)))
*	O
env	*(struct)
=	O
data	*(void)
;	O
int	O
status	int
;	O
imap4d_enter_critical	()->(void)
(	O
)	O
;	O
status	int
=	O
mu_mailbox_append_message	(*(struct),*(struct))->(int)
(	O
env	*(struct)
->	O
dst	*(char)
,	O
msg	*(struct)
)	O
;	O
imap4d_leave_critical	()->(void)
(	O
)	O
;	O
if	O
(	O
status	int
)	O
{	O
mu_diag_funcall	(int,*(char),*(char),int)->(void)
(	O
MU_DIAG_ERROR	O
,	O
"mu_mailbox_append_message"	*(char)
,	O
NULL	O
,	O
status	int
)	O
;	O
env	*(struct)
->	O
ret	*(*(struct))
=	O
RESP_BAD	int
;	O
return	O
MU_ERR_FAILURE	O
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
try_copy	(*(struct),*(struct),*(*(char)))->(int)
(	O
mu_mailbox_t	*(struct)
dst	*(char)
,	O
mu_msgset_t	*(struct)
msgset	*(struct)
,	O
char	O
*	O
*	O
err_text	*(char)
)	O
{	O
int	O
rc	int
;	O
struct	O
copy_env	struct(*(struct),long,int,*(*(char)))
env	*(struct)
;	O
env	*(struct)
.	O
dst	*(char)
=	O
dst	*(char)
;	O
env	*(struct)
.	O
total	long
=	O
0	int
;	O
env	*(struct)
.	O
ret	*(*(struct))
=	O
RESP_OK	int
;	O
env	*(struct)
.	O
err_text	*(char)
=	O
err_text	*(char)
;	O
*	O
env	*(struct)
.	O
err_text	*(char)
=	O
"Operation failed"	*(char)
;	O
rc	int
=	O
mu_msgset_foreach_message	(*(struct),*((long,*(struct),*(void))->(int)),*(void))->(int)
(	O
msgset	*(struct)
,	O
size_sum	(long,*(struct),*(void))->(int)
,	O
&	O
env	*(struct)
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
RESP_NO	int
;	O
if	O
(	O
env	*(struct)
.	O
ret	*(*(struct))
!=	O
RESP_OK	int
)	O
return	O
env	*(struct)
.	O
ret	*(*(struct))
;	O
rc	int
=	O
quota_check	(long)->(int)
(	O
env	*(struct)
.	O
total	long
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
*	O
env	*(struct)
.	O
err_text	*(char)
=	O
"Mailbox quota exceeded"	*(char)
;	O
return	O
RESP_NO	int
;	O
}	O
env	*(struct)
.	O
total	long
=	O
0	int
;	O
rc	int
=	O
mu_msgset_foreach_message	(*(struct),*((long,*(struct),*(void))->(int)),*(void))->(int)
(	O
msgset	*(struct)
,	O
do_copy	(long,*(struct),*(void))->(int)
,	O
&	O
env	*(struct)
)	O
;	O
quota_update	(long)->(void)
(	O
env	*(struct)
.	O
total	long
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
RESP_NO	int
;	O
return	O
env	*(struct)
.	O
ret	*(*(struct))
;	O
}	O
static	O
int	O
safe_copy	(*(struct),*(struct),*(*(char)))->(int)
(	O
mu_mailbox_t	*(struct)
dst	*(char)
,	O
mu_msgset_t	*(struct)
msgset	*(struct)
,	O
char	O
*	O
*	O
err_text	*(char)
)	O
{	O
size_t	long
nmesg	long
;	O
int	O
status	int
;	O
status	int
=	O
mu_mailbox_messages_count	(*(struct),*(long))->(int)
(	O
dst	*(char)
,	O
&	O
nmesg	long
)	O
;	O
if	O
(	O
status	int
)	O
{	O
mu_diag_funcall	(int,*(char),*(char),int)->(void)
(	O
MU_DIAG_ERROR	O
,	O
"mu_mailbox_messages_count"	*(char)
,	O
NULL	O
,	O
status	int
)	O
;	O
*	O
err_text	*(char)
=	O
"Operation failed"	*(char)
;	O
return	O
RESP_NO	int
;	O
}	O
status	int
=	O
try_copy	(*(struct),*(struct),*(*(char)))->(int)
(	O
dst	*(char)
,	O
msgset	*(struct)
,	O
err_text	*(char)
)	O
;	O
if	O
(	O
status	int
!=	O
RESP_OK	int
)	O
{	O
size_t	long
maxmesg	long
;	O
status	int
=	O
mu_mailbox_messages_count	(*(struct),*(long))->(int)
(	O
dst	*(char)
,	O
&	O
maxmesg	long
)	O
;	O
if	O
(	O
status	int
)	O
{	O
mu_url_t	*(struct)
url	*(struct)
=	O
NULL	O
;	O
mu_mailbox_get_url	(*(struct),*(*(struct)))->(int)
(	O
dst	*(char)
,	O
&	O
url	*(struct)
)	O
;	O
mu_error	(*(char))->(int)
(	O
_	O
(	O
"cannot count messages in mailbox %s: %s"	*(char)
)	O
,	O
mu_url_to_string	(*(struct))->(*(char))
(	O
url	*(struct)
)	O
,	O
mu_strerror	(int)->(*(char))
(	O
status	int
)	O
)	O
;	O
imap4d_bye	(int)->(int)
(	O
ERR_MAILBOX_CORRUPTED	int
)	O
;	O
}	O
for	O
(	O
nmesg	long
++	O
;	O
nmesg	long
<=	O
maxmesg	long
;	O
nmesg	long
++	O
)	O
{	O
mu_message_t	*(struct)
msg	*(struct)
;	O
if	O
(	O
mu_mailbox_get_message	(*(struct),long,*(*(struct)))->(int)
(	O
dst	*(char)
,	O
nmesg	long
,	O
&	O
msg	*(struct)
)	O
==	O
0	int
)	O
{	O
mu_attribute_t	*(struct)
attr	*(struct)
;	O
mu_message_get_attribute	(*(struct),*(*(struct)))->(int)
(	O
msg	*(struct)
,	O
&	O
attr	*(struct)
)	O
;	O
mu_attribute_set_userflag	(*(struct),int)->(int)
(	O
attr	*(struct)
,	O
MU_ATTRIBUTE_DELETED	int
)	O
;	O
}	O
}	O
imap4d_enter_critical	()->(void)
(	O
)	O
;	O
status	int
=	O
mu_mailbox_flush	(*(struct),int)->(int)
(	O
dst	*(char)
,	O
1	int
)	O
;	O
imap4d_leave_critical	()->(void)
(	O
)	O
;	O
if	O
(	O
status	int
)	O
{	O
mu_url_t	*(struct)
url	*(struct)
=	O
NULL	O
;	O
mu_mailbox_get_url	(*(struct),*(*(struct)))->(int)
(	O
dst	*(char)
,	O
&	O
url	*(struct)
)	O
;	O
mu_error	(*(char))->(int)
(	O
_	O
(	O
"cannot flush mailbox %s: %s"	*(char)
)	O
,	O
mu_url_to_string	(*(struct))->(*(char))
(	O
url	*(struct)
)	O
,	O
mu_strerror	(int)->(*(char))
(	O
status	int
)	O
)	O
;	O
imap4d_bye	(int)->(int)
(	O
ERR_MAILBOX_CORRUPTED	int
)	O
;	O
}	O
return	O
RESP_NO	int
;	O
}	O
return	O
RESP_OK	int
;	O
}	O
int	O
imap4d_copy0	(*(struct),int,*(*(char)))->(int)
(	O
imap4d_tokbuf_t	*(struct)
tok	*(*(struct))
,	O
int	O
isuid	int
,	O
char	O
*	O
*	O
err_text	*(char)
)	O
{	O
int	O
status	int
;	O
char	O
*	O
msgset_str	*(char)
;	O
mu_msgset_t	*(struct)
msgset	*(struct)
;	O
char	O
*	O
name	*(char)
;	O
char	O
*	O
mailbox_name	*(char)
;	O
char	O
*	O
end	struct(*(char),int,int)
;	O
mu_mailbox_t	*(struct)
cmbox	*(struct)
=	O
NULL	O
;	O
int	O
arg	*(char)
=	O
IMAP4_ARG_1	int
+	O
!	O
!	O
isuid	int
;	O
int	O
mode	int
=	O
0	int
;	O
mu_record_t	*(struct)
record	*(struct)
;	O
*	O
err_text	*(char)
=	O
NULL	O
;	O
if	O
(	O
imap4d_tokbuf_argc	(*(struct))->(int)
(	O
tok	*(*(struct))
)	O
!=	O
arg	*(char)
+	O
2	int
)	O
{	O
*	O
err_text	*(char)
=	O
"Invalid arguments"	*(char)
;	O
return	O
1	int
;	O
}	O
msgset_str	*(char)
=	O
imap4d_tokbuf_getarg	(*(struct),int)->(*(char))
(	O
tok	*(*(struct))
,	O
arg	*(char)
)	O
;	O
name	*(char)
=	O
imap4d_tokbuf_getarg	(*(struct),int)->(*(char))
(	O
tok	*(*(struct))
,	O
arg	*(char)
+	O
1	int
)	O
;	O
status	int
=	O
mu_msgset_create	(*(*(struct)),*(struct),int)->(int)
(	O
&	O
msgset	*(struct)
,	O
mbox	*(struct)
,	O
MU_MSGSET_NUM	int
)	O
;	O
if	O
(	O
status	int
)	O
{	O
*	O
err_text	*(char)
=	O
"Software error"	*(char)
;	O
return	O
RESP_BAD	int
;	O
}	O
status	int
=	O
mu_msgset_parse_imap	(*(struct),int,*(char),*(*(char)))->(int)
(	O
msgset	*(struct)
,	O
isuid	int
?	O
MU_MSGSET_UID	int
:	O
MU_MSGSET_NUM	int
,	O
msgset_str	*(char)
,	O
&	O
end	struct(*(char),int,int)
)	O
;	O
if	O
(	O
status	int
)	O
{	O
mu_msgset_free	(*(struct))->(void)
(	O
msgset	*(struct)
)	O
;	O
*	O
err_text	*(char)
=	O
"Error parsing message set"	*(char)
;	O
return	O
RESP_BAD	int
;	O
}	O
mailbox_name	*(char)
=	O
namespace_get_name	(*(char),*(*(struct(int,*(char),int,int,int,*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*(void),*((*`,*`,int)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,int)->(int))))),*(int))->(*(char))
(	O
name	*(char)
,	O
&	O
record	*(struct)
,	O
&	O
mode	int
)	O
;	O
if	O
(	O
!	O
mailbox_name	*(char)
)	O
{	O
mu_msgset_free	(*(struct))->(void)
(	O
msgset	*(struct)
)	O
;	O
*	O
err_text	*(char)
=	O
"Copy failed"	*(char)
;	O
return	O
RESP_NO	int
;	O
}	O
status	int
=	O
mu_mailbox_create_from_record	(*(*(struct)),*(struct),*(char))->(int)
(	O
&	O
cmbox	*(struct)
,	O
record	*(struct)
,	O
mailbox_name	*(char)
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
{	O
status	int
=	O
mu_mailbox_open	(*(struct),int)->(int)
(	O
cmbox	*(struct)
,	O
MU_STREAM_RDWR	O
|	O
mode	int
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
{	O
mu_list_t	*(struct)
msglist	*(struct)
;	O
mu_msgset_get_list	(*(struct),*(*(struct)))->(int)
(	O
msgset	*(struct)
,	O
&	O
msglist	*(struct)
)	O
;	O
if	O
(	O
!	O
mu_list_is_empty	(*(struct))->(int)
(	O
msglist	*(struct)
)	O
)	O
status	int
=	O
safe_copy	(*(struct),*(struct),*(*(char)))->(int)
(	O
cmbox	*(struct)
,	O
msgset	*(struct)
,	O
err_text	*(char)
)	O
;	O
mu_mailbox_close	(*(struct))->(int)
(	O
cmbox	*(struct)
)	O
;	O
}	O
mu_mailbox_destroy	(*(*(struct)))->(void)
(	O
&	O
cmbox	*(struct)
)	O
;	O
}	O
mu_msgset_free	(*(struct))->(void)
(	O
msgset	*(struct)
)	O
;	O
free	(*(void))->(void)
(	O
mailbox_name	*(char)
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
{	O
*	O
err_text	*(char)
=	O
"Completed"	*(char)
;	O
return	O
RESP_OK	int
;	O
}	O
if	O
(	O
!	O
*	O
err_text	*(char)
)	O
*	O
err_text	*(char)
=	O
"[TRYCREATE] failed"	*(char)
;	O
return	O
RESP_NO	int
;	O
}	O
