gsl_sf_mathieu_workspace	struct(long,long,long,int,double,double,*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,*(double),*(double),*(double),*(double))))
*	O
gsl_sf_mathieu_alloc	(long,double)->(*(struct(long,long,long,int,double,double,*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(struct(long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,*`,*`,*`,*`)))))
(	O
const	O
size_t	long
nn	long
,	O
const	O
double	O
qq	double
)	O
{	O
gsl_sf_mathieu_workspace	struct(long,long,long,int,double,double,*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,*(double),*(double),*(double),*(double))))
*	O
workspace	*(struct(long,long,long,int,double,double,*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,*(double),*(double),*(double),*(double)))))
;	O
unsigned	O
int	O
even_order	long
=	O
nn	long
/	O
2	int
+	O
1	int
,	O
odd_order	long
=	O
(	O
nn	long
+	O
1	int
)	O
/	O
2	int
,	O
extra_values	int
;	O
extra_values	int
=	O
(	O
int	O
)	O
(	O
2.1	int
*	O
pow	(double,double)->(double)
(	O
fabs	(double)->(double)
(	O
qq	double
)	O
,	O
0.37	int
)	O
)	O
+	O
9	int
;	O
extra_values	int
+=	O
20	int
;	O
if	O
(	O
nn	long
+	O
1	int
==	O
0	int
)	O
{	O
GSL_ERROR_NULL	O
(	O
"matrix dimension must be positive integer"	*(char)
,	O
GSL_EINVAL	int
)	O
;	O
}	O
workspace	*(struct(long,long,long,int,double,double,*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,*(double),*(double),*(double),*(double)))))
=	O
(	O
gsl_sf_mathieu_workspace	struct(long,long,long,int,double,double,*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,*(double),*(double),*(double),*(double))))
*	O
)	O
malloc	(long)->(*(void))
(	O
sizeof	O
(	O
gsl_sf_mathieu_workspace	struct(long,long,long,int,double,double,*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,*(double),*(double),*(double),*(double))))
)	O
)	O
;	O
if	O
(	O
workspace	*(struct(long,long,long,int,double,double,*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,*(double),*(double),*(double),*(double)))))
==	O
NULL	O
)	O
{	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for workspace"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
even_order	long
+=	O
extra_values	int
;	O
odd_order	long
+=	O
extra_values	int
;	O
workspace	*(struct(long,long,long,int,double,double,*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,*(double),*(double),*(double),*(double)))))
->	O
size	long
=	O
nn	long
;	O
workspace	*(struct(long,long,long,int,double,double,*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,*(double),*(double),*(double),*(double)))))
->	O
even_order	long
=	O
even_order	long
;	O
workspace	*(struct(long,long,long,int,double,double,*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,*(double),*(double),*(double),*(double)))))
->	O
odd_order	long
=	O
odd_order	long
;	O
workspace	*(struct(long,long,long,int,double,double,*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,*(double),*(double),*(double),*(double)))))
->	O
extra_values	int
=	O
extra_values	int
;	O
workspace	*(struct(long,long,long,int,double,double,*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,*(double),*(double),*(double),*(double)))))
->	O
aa	*(double)
=	O
(	O
double	O
*	O
)	O
malloc	(long)->(*(void))
(	O
(	O
nn	long
+	O
1	int
)	O
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
if	O
(	O
workspace	*(struct(long,long,long,int,double,double,*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,*(double),*(double),*(double),*(double)))))
->	O
aa	*(double)
==	O
NULL	O
)	O
{	O
free	(*(void))->(void)
(	O
workspace	*(struct(long,long,long,int,double,double,*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,*(double),*(double),*(double),*(double)))))
)	O
;	O
GSL_ERROR_NULL	O
(	O
"Error allocating memory for characteristic a values"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
workspace	*(struct(long,long,long,int,double,double,*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,*(double),*(double),*(double),*(double)))))
->	O
bb	*(double)
=	O
(	O
double	O
*	O
)	O
malloc	(long)->(*(void))
(	O
(	O
nn	long
+	O
1	int
)	O
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
if	O
(	O
workspace	*(struct(long,long,long,int,double,double,*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,*(double),*(double),*(double),*(double)))))
->	O
bb	*(double)
==	O
NULL	O
)	O
{	O
free	(*(void))->(void)
(	O
workspace	*(struct(long,long,long,int,double,double,*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,*(double),*(double),*(double),*(double)))))
->	O
aa	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
workspace	*(struct(long,long,long,int,double,double,*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,*(double),*(double),*(double),*(double)))))
)	O
;	O
GSL_ERROR_NULL	O
(	O
"Error allocating memory for characteristic b values"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
workspace	*(struct(long,long,long,int,double,double,*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,*(double),*(double),*(double),*(double)))))
->	O
dd	*(double)
=	O
(	O
double	O
*	O
)	O
malloc	(long)->(*(void))
(	O
even_order	long
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
if	O
(	O
workspace	*(struct(long,long,long,int,double,double,*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,*(double),*(double),*(double),*(double)))))
->	O
dd	*(double)
==	O
NULL	O
)	O
{	O
free	(*(void))->(void)
(	O
workspace	*(struct(long,long,long,int,double,double,*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,*(double),*(double),*(double),*(double)))))
->	O
aa	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
workspace	*(struct(long,long,long,int,double,double,*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,*(double),*(double),*(double),*(double)))))
->	O
bb	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
workspace	*(struct(long,long,long,int,double,double,*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,*(double),*(double),*(double),*(double)))))
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for diagonal"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
workspace	*(struct(long,long,long,int,double,double,*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,*(double),*(double),*(double),*(double)))))
->	O
ee	*(double)
=	O
(	O
double	O
*	O
)	O
malloc	(long)->(*(void))
(	O
even_order	long
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
if	O
(	O
workspace	*(struct(long,long,long,int,double,double,*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,*(double),*(double),*(double),*(double)))))
->	O
ee	*(double)
==	O
NULL	O
)	O
{	O
free	(*(void))->(void)
(	O
workspace	*(struct(long,long,long,int,double,double,*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,*(double),*(double),*(double),*(double)))))
->	O
dd	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
workspace	*(struct(long,long,long,int,double,double,*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,*(double),*(double),*(double),*(double)))))
->	O
aa	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
workspace	*(struct(long,long,long,int,double,double,*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,*(double),*(double),*(double),*(double)))))
->	O
bb	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
workspace	*(struct(long,long,long,int,double,double,*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,*(double),*(double),*(double),*(double)))))
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for diagonal"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
workspace	*(struct(long,long,long,int,double,double,*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,*(double),*(double),*(double),*(double)))))
->	O
tt	*(double)
=	O
(	O
double	O
*	O
)	O
malloc	(long)->(*(void))
(	O
3	int
*	O
even_order	long
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
if	O
(	O
workspace	*(struct(long,long,long,int,double,double,*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,*(double),*(double),*(double),*(double)))))
->	O
tt	*(double)
==	O
NULL	O
)	O
{	O
free	(*(void))->(void)
(	O
workspace	*(struct(long,long,long,int,double,double,*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,*(double),*(double),*(double),*(double)))))
->	O
ee	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
workspace	*(struct(long,long,long,int,double,double,*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,*(double),*(double),*(double),*(double)))))
->	O
dd	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
workspace	*(struct(long,long,long,int,double,double,*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,*(double),*(double),*(double),*(double)))))
->	O
aa	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
workspace	*(struct(long,long,long,int,double,double,*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,*(double),*(double),*(double),*(double)))))
->	O
bb	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
workspace	*(struct(long,long,long,int,double,double,*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,*(double),*(double),*(double),*(double)))))
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for diagonal"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
workspace	*(struct(long,long,long,int,double,double,*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,*(double),*(double),*(double),*(double)))))
->	O
e2	*(double)
=	O
(	O
double	O
*	O
)	O
malloc	(long)->(*(void))
(	O
even_order	long
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
if	O
(	O
workspace	*(struct(long,long,long,int,double,double,*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,*(double),*(double),*(double),*(double)))))
->	O
e2	*(double)
==	O
NULL	O
)	O
{	O
free	(*(void))->(void)
(	O
workspace	*(struct(long,long,long,int,double,double,*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,*(double),*(double),*(double),*(double)))))
->	O
tt	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
workspace	*(struct(long,long,long,int,double,double,*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,*(double),*(double),*(double),*(double)))))
->	O
ee	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
workspace	*(struct(long,long,long,int,double,double,*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,*(double),*(double),*(double),*(double)))))
->	O
dd	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
workspace	*(struct(long,long,long,int,double,double,*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,*(double),*(double),*(double),*(double)))))
->	O
aa	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
workspace	*(struct(long,long,long,int,double,double,*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,*(double),*(double),*(double),*(double)))))
->	O
bb	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
workspace	*(struct(long,long,long,int,double,double,*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,*(double),*(double),*(double),*(double)))))
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for diagonal"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
workspace	*(struct(long,long,long,int,double,double,*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,*(double),*(double),*(double),*(double)))))
->	O
zz	*(double)
=	O
(	O
double	O
*	O
)	O
malloc	(long)->(*(void))
(	O
even_order	long
*	O
even_order	long
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
if	O
(	O
workspace	*(struct(long,long,long,int,double,double,*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,*(double),*(double),*(double),*(double)))))
->	O
zz	*(double)
==	O
NULL	O
)	O
{	O
free	(*(void))->(void)
(	O
workspace	*(struct(long,long,long,int,double,double,*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,*(double),*(double),*(double),*(double)))))
->	O
e2	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
workspace	*(struct(long,long,long,int,double,double,*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,*(double),*(double),*(double),*(double)))))
->	O
tt	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
workspace	*(struct(long,long,long,int,double,double,*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,*(double),*(double),*(double),*(double)))))
->	O
ee	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
workspace	*(struct(long,long,long,int,double,double,*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,*(double),*(double),*(double),*(double)))))
->	O
dd	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
workspace	*(struct(long,long,long,int,double,double,*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,*(double),*(double),*(double),*(double)))))
->	O
aa	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
workspace	*(struct(long,long,long,int,double,double,*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,*(double),*(double),*(double),*(double)))))
->	O
bb	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
workspace	*(struct(long,long,long,int,double,double,*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,*(double),*(double),*(double),*(double)))))
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for diagonal"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
workspace	*(struct(long,long,long,int,double,double,*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,*(double),*(double),*(double),*(double)))))
->	O
eval	*(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_vector_alloc	(long)->(*(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
even_order	long
)	O
;	O
if	O
(	O
workspace	*(struct(long,long,long,int,double,double,*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,*(double),*(double),*(double),*(double)))))
->	O
eval	*(struct(long,long,*(double),*(struct(long,*(double))),int))
==	O
NULL	O
)	O
{	O
free	(*(void))->(void)
(	O
workspace	*(struct(long,long,long,int,double,double,*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,*(double),*(double),*(double),*(double)))))
->	O
zz	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
workspace	*(struct(long,long,long,int,double,double,*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,*(double),*(double),*(double),*(double)))))
->	O
e2	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
workspace	*(struct(long,long,long,int,double,double,*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,*(double),*(double),*(double),*(double)))))
->	O
tt	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
workspace	*(struct(long,long,long,int,double,double,*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,*(double),*(double),*(double),*(double)))))
->	O
ee	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
workspace	*(struct(long,long,long,int,double,double,*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,*(double),*(double),*(double),*(double)))))
->	O
dd	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
workspace	*(struct(long,long,long,int,double,double,*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,*(double),*(double),*(double),*(double)))))
->	O
aa	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
workspace	*(struct(long,long,long,int,double,double,*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,*(double),*(double),*(double),*(double)))))
->	O
bb	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
workspace	*(struct(long,long,long,int,double,double,*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,*(double),*(double),*(double),*(double)))))
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for eval"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
workspace	*(struct(long,long,long,int,double,double,*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,*(double),*(double),*(double),*(double)))))
->	O
evec	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_alloc	(long,long)->(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
even_order	long
,	O
even_order	long
)	O
;	O
if	O
(	O
workspace	*(struct(long,long,long,int,double,double,*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,*(double),*(double),*(double),*(double)))))
->	O
evec	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
==	O
NULL	O
)	O
{	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
workspace	*(struct(long,long,long,int,double,double,*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,*(double),*(double),*(double),*(double)))))
->	O
eval	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
free	(*(void))->(void)
(	O
workspace	*(struct(long,long,long,int,double,double,*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,*(double),*(double),*(double),*(double)))))
->	O
zz	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
workspace	*(struct(long,long,long,int,double,double,*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,*(double),*(double),*(double),*(double)))))
->	O
e2	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
workspace	*(struct(long,long,long,int,double,double,*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,*(double),*(double),*(double),*(double)))))
->	O
tt	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
workspace	*(struct(long,long,long,int,double,double,*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,*(double),*(double),*(double),*(double)))))
->	O
ee	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
workspace	*(struct(long,long,long,int,double,double,*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,*(double),*(double),*(double),*(double)))))
->	O
dd	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
workspace	*(struct(long,long,long,int,double,double,*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,*(double),*(double),*(double),*(double)))))
->	O
aa	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
workspace	*(struct(long,long,long,int,double,double,*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,*(double),*(double),*(double),*(double)))))
->	O
bb	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
workspace	*(struct(long,long,long,int,double,double,*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,*(double),*(double),*(double),*(double)))))
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for evec"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
workspace	*(struct(long,long,long,int,double,double,*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,*(double),*(double),*(double),*(double)))))
->	O
wmat	*(struct(long,*(double),*(double),*(double),*(double)))
=	O
gsl_eigen_symmv_alloc	(long)->(*(struct(long,*(double),*(double),*(double),*(double))))
(	O
even_order	long
)	O
;	O
if	O
(	O
workspace	*(struct(long,long,long,int,double,double,*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,*(double),*(double),*(double),*(double)))))
->	O
wmat	*(struct(long,*(double),*(double),*(double),*(double)))
==	O
NULL	O
)	O
{	O
gsl_matrix_free	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
workspace	*(struct(long,long,long,int,double,double,*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,*(double),*(double),*(double),*(double)))))
->	O
evec	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
workspace	*(struct(long,long,long,int,double,double,*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,*(double),*(double),*(double),*(double)))))
->	O
eval	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
free	(*(void))->(void)
(	O
workspace	*(struct(long,long,long,int,double,double,*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,*(double),*(double),*(double),*(double)))))
->	O
zz	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
workspace	*(struct(long,long,long,int,double,double,*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,*(double),*(double),*(double),*(double)))))
->	O
e2	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
workspace	*(struct(long,long,long,int,double,double,*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,*(double),*(double),*(double),*(double)))))
->	O
tt	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
workspace	*(struct(long,long,long,int,double,double,*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,*(double),*(double),*(double),*(double)))))
->	O
ee	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
workspace	*(struct(long,long,long,int,double,double,*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,*(double),*(double),*(double),*(double)))))
->	O
dd	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
workspace	*(struct(long,long,long,int,double,double,*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,*(double),*(double),*(double),*(double)))))
->	O
aa	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
workspace	*(struct(long,long,long,int,double,double,*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,*(double),*(double),*(double),*(double)))))
->	O
bb	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
workspace	*(struct(long,long,long,int,double,double,*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,*(double),*(double),*(double),*(double)))))
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for wmat"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
return	O
workspace	*(struct(long,long,long,int,double,double,*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,*(double),*(double),*(double),*(double)))))
;	O
}	O
void	O
gsl_sf_mathieu_free	(*(struct(long,long,long,int,double,double,*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(struct(long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,*`,*`,*`,*`)))))->(void)
(	O
gsl_sf_mathieu_workspace	struct(long,long,long,int,double,double,*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,*(double),*(double),*(double),*(double))))
*	O
workspace	*(struct(long,long,long,int,double,double,*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,*(double),*(double),*(double),*(double)))))
)	O
{	O
RETURN_IF_NULL	O
(	O
workspace	*(struct(long,long,long,int,double,double,*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,*(double),*(double),*(double),*(double)))))
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
workspace	*(struct(long,long,long,int,double,double,*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,*(double),*(double),*(double),*(double)))))
->	O
eval	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_matrix_free	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
workspace	*(struct(long,long,long,int,double,double,*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,*(double),*(double),*(double),*(double)))))
->	O
evec	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_eigen_symmv_free	(*(struct(long,*(double),*(double),*(double),*(double))))->(void)
(	O
workspace	*(struct(long,long,long,int,double,double,*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,*(double),*(double),*(double),*(double)))))
->	O
wmat	*(struct(long,*(double),*(double),*(double),*(double)))
)	O
;	O
free	(*(void))->(void)
(	O
workspace	*(struct(long,long,long,int,double,double,*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,*(double),*(double),*(double),*(double)))))
->	O
aa	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
workspace	*(struct(long,long,long,int,double,double,*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,*(double),*(double),*(double),*(double)))))
->	O
bb	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
workspace	*(struct(long,long,long,int,double,double,*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,*(double),*(double),*(double),*(double)))))
->	O
dd	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
workspace	*(struct(long,long,long,int,double,double,*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,*(double),*(double),*(double),*(double)))))
->	O
ee	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
workspace	*(struct(long,long,long,int,double,double,*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,*(double),*(double),*(double),*(double)))))
->	O
tt	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
workspace	*(struct(long,long,long,int,double,double,*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,*(double),*(double),*(double),*(double)))))
->	O
e2	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
workspace	*(struct(long,long,long,int,double,double,*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,*(double),*(double),*(double),*(double)))))
->	O
zz	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
workspace	*(struct(long,long,long,int,double,double,*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,*(double),*(double),*(double),*(double)))))
)	O
;	O
}	O
