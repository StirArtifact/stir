static	O
int	O
get_crlf_stream_size	(*(struct),long,*(long))->(int)
(	O
mu_stream_t	*(struct)
str	*(struct)
,	O
mu_off_t	long
size	long
,	O
mu_off_t	long
*	O
prealsize	*(long)
)	O
{	O
mu_stream_t	*(struct)
null	*(struct)
,	O
flt	*((*(struct(int,*(char),int,int,int,*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*(void),*((*`,*`,int)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,int)->(int)))),*(void))->(int))
;	O
mu_stream_stat_buffer	array(long)
stat	array(long)
;	O
int	O
rc	int
;	O
mu_off_t	long
needle	long
;	O
rc	int
=	O
mu_nullstream_create	(*(*(struct)),int)->(int)
(	O
&	O
null	*(struct)
,	O
MU_STREAM_WRITE	int
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
mu_stream_set_stat	(*(struct),int,array(long))->(int)
(	O
null	*(struct)
,	O
MU_STREAM_STAT_MASK	O
(	O
MU_STREAM_STAT_OUT	int
)	O
,	O
stat	array(long)
)	O
;	O
rc	int
=	O
mu_filter_create	(*(*(struct)),*(struct),*(char),int,int)->(int)
(	O
&	O
flt	*((*(struct(int,*(char),int,int,int,*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*(void),*((*`,*`,int)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,int)->(int)))),*(void))->(int))
,	O
null	*(struct)
,	O
"CRLF"	*(char)
,	O
MU_FILTER_ENCODE	int
,	O
MU_STREAM_WRITE	int
)	O
;	O
mu_stream_unref	(*(struct))->(void)
(	O
null	*(struct)
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
rc	int
=	O
mu_stream_seek	(*(struct),long,int,*(long))->(int)
(	O
str	*(struct)
,	O
0	int
,	O
MU_SEEK_CUR	int
,	O
&	O
needle	long
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
rc	int
=	O
mu_stream_copy	(*(struct),*(struct),long,*(long))->(int)
(	O
flt	*((*(struct(int,*(char),int,int,int,*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*(void),*((*`,*`,int)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,int)->(int)))),*(void))->(int))
,	O
str	*(struct)
,	O
size	long
,	O
NULL	O
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
rc	int
=	O
mu_stream_seek	(*(struct),long,int,*(long))->(int)
(	O
str	*(struct)
,	O
0	int
,	O
MU_SEEK_SET	int
,	O
NULL	O
)	O
;	O
mu_stream_unref	(*(struct))->(void)
(	O
flt	*((*(struct(int,*(char),int,int,int,*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*(void),*((*`,*`,int)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,int)->(int)))),*(void))->(int))
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
*	O
prealsize	*(long)
=	O
stat	array(long)
[	O
MU_STREAM_STAT_OUT	int
]	O
;	O
return	O
rc	int
;	O
}	O
int	O
mu_imap_append_stream_size	(*(struct),*(char),int,*(struct(int,int,int,int,int,int,int,int,int,long,*(char))),*(struct(int,*(char))),*(struct),long)->(int)
(	O
mu_imap_t	*(struct)
imap	*(struct)
,	O
const	O
char	O
*	O
mailbox	*(char)
,	O
int	O
flags	int
,	O
struct	O
tm	struct(int,int,int,int,int,int,int,int,int,long,*(char))
*	O
tm	struct(int,int,int,int,int,int,int,int,int,long,*(char))
,	O
struct	O
mu_timezone	struct(int,*(char))
*	O
tz	*(struct(int,*(char)))
,	O
mu_stream_t	*(struct)
stream	*(struct)
,	O
mu_off_t	long
size	long
)	O
{	O
int	O
status	int
;	O
mu_off_t	long
realsize	long
;	O
if	O
(	O
imap	*(struct)
==	O
NULL	O
||	O
!	O
mailbox	*(char)
||	O
!	O
stream	*(struct)
||	O
size	long
==	O
0	int
)	O
return	O
EINVAL	int
;	O
if	O
(	O
!	O
imap	*(struct)
->	O
io	*(struct)
)	O
return	O
MU_ERR_NO_TRANSPORT	O
;	O
if	O
(	O
imap	*(struct)
->	O
session_state	enum(int,int,int,int)
<	O
MU_IMAP_SESSION_AUTH	int
)	O
return	O
MU_ERR_SEQ	O
;	O
switch	O
(	O
imap	*(struct)
->	O
client_state	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
)	O
{	O
case	O
MU_IMAP_CLIENT_READY	int
:	O
status	int
=	O
get_crlf_stream_size	(*(struct),long,*(long))->(int)
(	O
stream	*(struct)
,	O
size	long
,	O
&	O
realsize	long
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
status	int
=	O
_mu_imap_tag_next	(*(struct(int,enum(int,int,int),int,*(char),long,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int),long,*(int),*(char),*(struct),*(struct),*(char),int,struct(int,int,int,long,long,long,long,long),array(struct(*((*(void),int,long,*(void))->(void)),*(void))))))->(int)
(	O
imap	*(struct)
)	O
;	O
MU_IMAP_CHECK_EAGAIN	O
(	O
imap	*(struct)
,	O
status	int
)	O
;	O
status	int
=	O
mu_imapio_printf	(*(struct),*(char))->(int)
(	O
imap	*(struct)
->	O
io	*(struct)
,	O
"%s APPEND "	*(char)
,	O
imap	*(struct)
->	O
tag_str	*(char)
)	O
;	O
MU_IMAP_CHECK_ERROR	O
(	O
imap	*(struct)
,	O
status	int
)	O
;	O
status	int
=	O
mu_imapio_send_qstring	(*(struct),*(char))->(int)
(	O
imap	*(struct)
->	O
io	*(struct)
,	O
mailbox	*(char)
)	O
;	O
MU_IMAP_CHECK_ERROR	O
(	O
imap	*(struct)
,	O
status	int
)	O
;	O
if	O
(	O
flags	int
)	O
{	O
status	int
=	O
mu_imapio_send	(*(struct),*(char),long)->(int)
(	O
imap	*(struct)
->	O
io	*(struct)
,	O
" "	*(char)
,	O
1	int
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
status	int
=	O
mu_imapio_send_flags	(*(struct),int)->(int)
(	O
imap	*(struct)
->	O
io	*(struct)
,	O
flags	int
)	O
;	O
MU_IMAP_CHECK_ERROR	O
(	O
imap	*(struct)
,	O
status	int
)	O
;	O
}	O
if	O
(	O
tm	struct(int,int,int,int,int,int,int,int,int,long,*(char))
)	O
{	O
status	int
=	O
mu_imapio_send	(*(struct),*(char),long)->(int)
(	O
imap	*(struct)
->	O
io	*(struct)
,	O
" "	*(char)
,	O
1	int
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
status	int
=	O
mu_imapio_send_time	(*(struct),*(struct(int,int,int,int,int,int,int,int,int,long,*(char))),*(struct(int,*(char))))->(int)
(	O
imap	*(struct)
->	O
io	*(struct)
,	O
tm	struct(int,int,int,int,int,int,int,int,int,long,*(char))
,	O
tz	*(struct(int,*(char)))
)	O
;	O
MU_IMAP_CHECK_ERROR	O
(	O
imap	*(struct)
,	O
status	int
)	O
;	O
}	O
status	int
=	O
mu_imapio_send	(*(struct),*(char),long)->(int)
(	O
imap	*(struct)
->	O
io	*(struct)
,	O
" "	*(char)
,	O
1	int
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
{	O
mu_stream_t	*(struct)
flt	*((*(struct(int,*(char),int,int,int,*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*(void),*((*`,*`,int)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,int)->(int)))),*(void))->(int))
;	O
status	int
=	O
mu_filter_create	(*(*(struct)),*(struct),*(char),int,int)->(int)
(	O
&	O
flt	*((*(struct(int,*(char),int,int,int,*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*(void),*((*`,*`,int)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,int)->(int)))),*(void))->(int))
,	O
stream	*(struct)
,	O
"CRLF"	*(char)
,	O
MU_FILTER_ENCODE	int
,	O
MU_STREAM_READ	int
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
{	O
status	int
=	O
mu_imapio_send_literal_stream	(*(struct),*(struct),long)->(int)
(	O
imap	*(struct)
->	O
io	*(struct)
,	O
flt	*((*(struct(int,*(char),int,int,int,*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*(void),*((*`,*`,int)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,int)->(int)))),*(void))->(int))
,	O
realsize	long
)	O
;	O
mu_stream_unref	(*(struct))->(void)
(	O
flt	*((*(struct(int,*(char),int,int,int,*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*(void),*((*`,*`,int)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,int)->(int)))),*(void))->(int))
)	O
;	O
}	O
}	O
MU_IMAP_CHECK_ERROR	O
(	O
imap	*(struct)
,	O
status	int
)	O
;	O
status	int
=	O
mu_imapio_send	(*(struct),*(char),long)->(int)
(	O
imap	*(struct)
->	O
io	*(struct)
,	O
"\r\n"	*(char)
,	O
2	int
)	O
;	O
MU_IMAP_CHECK_ERROR	O
(	O
imap	*(struct)
,	O
status	int
)	O
;	O
MU_IMAP_FCLR	O
(	O
imap	*(struct)
,	O
MU_IMAP_RESP	int
)	O
;	O
imap	*(struct)
->	O
client_state	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
=	O
MU_IMAP_CLIENT_APPEND_RX	int
;	O
case	O
MU_IMAP_CLIENT_APPEND_RX	int
:	O
status	int
=	O
_mu_imap_response	(*(struct(int,enum(int,int,int),int,*(char),long,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int),long,*(int),*(char),*(struct),*(struct),*(char),int,struct(int,int,int,long,long,long,long,long),array(struct(*((*(void),int,long,*(void))->(void)),*(void))))),*((*(struct(int,enum(int,int,int),int,*`,long,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int),long,*`,*`,*`,*`,*`,int,struct`,array(struct(*((*(void),int,long,*(void))->(void)),*(void))))),*(struct),*(void))->(void)),*(void))->(int)
(	O
imap	*(struct)
,	O
NULL	O
,	O
NULL	O
)	O
;	O
MU_IMAP_CHECK_EAGAIN	O
(	O
imap	*(struct)
,	O
status	int
)	O
;	O
switch	O
(	O
imap	*(struct)
->	O
response	enum(int,int,int)
)	O
{	O
case	O
MU_IMAP_OK	int
:	O
status	int
=	O
0	int
;	O
break	O
;	O
case	O
MU_IMAP_NO	int
:	O
status	int
=	O
MU_ERR_FAILURE	O
;	O
break	O
;	O
case	O
MU_IMAP_BAD	int
:	O
status	int
=	O
MU_ERR_BADREPLY	O
;	O
break	O
;	O
}	O
imap	*(struct)
->	O
client_state	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
=	O
MU_IMAP_CLIENT_READY	int
;	O
break	O
;	O
default	O
:	O
status	int
=	O
EINPROGRESS	int
;	O
}	O
return	O
status	int
;	O
}	O
