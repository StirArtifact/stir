struct	O
_mu_linelen_filter	struct(long,long)
{	O
size_t	long
max_len	long
;	O
size_t	long
cur_len	long
;	O
}	O
;	O
static	O
enum	O
mu_filter_result	enum(int,int,int,int,int)
_ll_encoder	(*(void),enum(int,int,int,int,int),*(struct(*(char),long,*(char),long,int,int)))->(enum(int,int,int,int,int))
(	O
void	O
*	O
xd	*(void)
,	O
enum	O
mu_filter_command	enum(int,int,int,int,int)
cmd	enum(int,int,int,int,int)
,	O
struct	O
mu_filter_io	struct(*(char),long,*(char),long,int,int)
*	O
iobuf	*(struct(*(char),long,*(char),long,int,int))
)	O
{	O
struct	O
_mu_linelen_filter	struct(long,long)
*	O
flt	*(struct(long,long))
=	O
xd	*(void)
;	O
const	O
char	O
*	O
iptr	*(char)
;	O
size_t	long
isize	long
;	O
char	O
*	O
optr	*(char)
;	O
size_t	long
osize	long
;	O
size_t	long
consumed	long
,	O
written	long
;	O
switch	O
(	O
cmd	enum(int,int,int,int,int)
)	O
{	O
case	O
mu_filter_init	int
:	O
flt	*(struct(long,long))
->	O
cur_len	long
=	O
0	int
;	O
case	O
mu_filter_done	int
:	O
return	O
mu_filter_ok	int
;	O
default	O
:	O
break	O
;	O
}	O
iptr	*(char)
=	O
iobuf	*(struct(*(char),long,*(char),long,int,int))
->	O
input	*(char)
;	O
isize	long
=	O
iobuf	*(struct(*(char),long,*(char),long,int,int))
->	O
isize	long
;	O
optr	*(char)
=	O
iobuf	*(struct(*(char),long,*(char),long,int,int))
->	O
output	*(char)
;	O
osize	long
=	O
iobuf	*(struct(*(char),long,*(char),long,int,int))
->	O
osize	long
;	O
for	O
(	O
consumed	long
=	O
written	long
=	O
0	int
;	O
consumed	long
<	O
isize	long
&&	O
written	long
<	O
osize	long
;	O
)	O
{	O
char	O
*	O
p	*(char)
;	O
size_t	long
rest	long
=	O
flt	*(struct(long,long))
->	O
max_len	long
-	O
flt	*(struct(long,long))
->	O
cur_len	long
;	O
size_t	long
len	long
=	O
isize	long
-	O
consumed	long
;	O
if	O
(	O
len	long
>	O
rest	long
)	O
len	long
=	O
rest	long
;	O
p	*(char)
=	O
memchr	(*(void),int,long)->(*(void))
(	O
iptr	*(char)
+	O
consumed	long
,	O
'\n'	O
,	O
len	long
)	O
;	O
if	O
(	O
p	*(char)
)	O
len	long
=	O
p	*(char)
-	O
iptr	*(char)
-	O
consumed	long
+	O
1	int
;	O
rest	long
=	O
osize	long
-	O
written	long
;	O
if	O
(	O
len	long
>	O
rest	long
)	O
{	O
len	long
=	O
rest	long
;	O
p	*(char)
=	O
NULL	O
;	O
}	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
optr	*(char)
+	O
written	long
,	O
iptr	*(char)
+	O
consumed	long
,	O
len	long
)	O
;	O
written	long
+=	O
len	long
;	O
consumed	long
+=	O
len	long
;	O
if	O
(	O
p	*(char)
)	O
flt	*(struct(long,long))
->	O
cur_len	long
=	O
0	int
;	O
else	O
{	O
flt	*(struct(long,long))
->	O
cur_len	long
+=	O
len	long
;	O
if	O
(	O
flt	*(struct(long,long))
->	O
cur_len	long
==	O
flt	*(struct(long,long))
->	O
max_len	long
)	O
{	O
if	O
(	O
written	long
<	O
osize	long
)	O
optr	*(char)
[	O
written	long
++	O
]	O
=	O
'\n'	O
;	O
flt	*(struct(long,long))
->	O
cur_len	long
=	O
0	int
;	O
}	O
}	O
}	O
iobuf	*(struct(*(char),long,*(char),long,int,int))
->	O
isize	long
=	O
consumed	long
;	O
iobuf	*(struct(*(char),long,*(char),long,int,int))
->	O
osize	long
=	O
written	long
;	O
return	O
mu_filter_ok	int
;	O
}	O
int	O
mu_linelen_filter_create	(*(*(struct)),*(struct),long,int)->(int)
(	O
mu_stream_t	*(struct)
*	O
pstream	*(*(struct))
,	O
mu_stream_t	*(struct)
stream	*(struct)
,	O
size_t	long
limit	long
,	O
int	O
flags	int
)	O
{	O
struct	O
_mu_linelen_filter	struct(long,long)
*	O
flt	*(struct(long,long))
=	O
calloc	(long,long)->(*(void))
(	O
1	int
,	O
sizeof	O
(	O
*	O
flt	*(struct(long,long))
)	O
)	O
;	O
if	O
(	O
!	O
flt	*(struct(long,long))
)	O
return	O
ENOMEM	int
;	O
flt	*(struct(long,long))
->	O
max_len	long
=	O
limit	long
;	O
return	O
mu_filter_stream_create	(*(*(struct)),*(struct),int,*((*(void),enum(int,int,int,int,int),*(struct(*`,long,*`,long,int,int)))->(enum(int,int,int,int,int))),*(void),int)->(int)
(	O
pstream	*(*(struct))
,	O
stream	*(struct)
,	O
MU_FILTER_ENCODE	int
,	O
_ll_encoder	(*(void),enum(int,int,int,int,int),*(struct(*(char),long,*(char),long,int,int)))->(enum(int,int,int,int,int))
,	O
flt	*(struct(long,long))
,	O
flags	int
)	O
;	O
}	O
static	O
int	O
alloc_state	(*(*(void)),int,int,*(*(char)))->(int)
(	O
void	O
*	O
*	O
pret	*(*(struct))
,	O
int	O
mode	int
MU_ARG_UNUSED	O
,	O
int	O
argc	int
,	O
const	O
char	O
*	O
*	O
argv	*(*(char))
)	O
{	O
struct	O
_mu_linelen_filter	struct(long,long)
*	O
flt	*(struct(long,long))
=	O
malloc	(long)->(*(void))
(	O
sizeof	O
(	O
flt	*(struct(long,long))
[	O
0	int
]	O
)	O
)	O
;	O
if	O
(	O
!	O
flt	*(struct(long,long))
)	O
return	O
ENOMEM	int
;	O
flt	*(struct(long,long))
->	O
cur_len	long
=	O
0	int
;	O
flt	*(struct(long,long))
->	O
max_len	long
=	O
76	int
;	O
if	O
(	O
argc	int
>	O
1	int
)	O
{	O
char	O
*	O
p	*(char)
;	O
flt	*(struct(long,long))
->	O
max_len	long
=	O
strtoul	(*(char),*(*(char)),int)->(long)
(	O
argv	*(*(char))
[	O
1	int
]	O
,	O
&	O
p	*(char)
,	O
10	int
)	O
;	O
if	O
(	O
*	O
p	*(char)
)	O
{	O
free	(*(void))->(void)
(	O
flt	*(struct(long,long))
)	O
;	O
return	O
MU_ERR_PARSE	O
;	O
}	O
}	O
*	O
pret	*(*(struct))
=	O
flt	*(struct(long,long))
;	O
return	O
0	int
;	O
}	O
static	O
struct	O
_mu_filter_record	struct(*(char),*((*(*(void)),int,int,*(*(char)))->(int)),*((*(void),enum(int,int,int,int,int),*(struct(*(char),long,*(char),long,int,int)))->(enum(int,int,int,int,int))),*((*(void),enum(int,int,int,int,int),*(struct(*(char),long,*(char),long,int,int)))->(enum(int,int,int,int,int))))
_linelen_filter	struct(*(char),*((*(*(void)),int,int,*(*(char)))->(int)),*((*(void),enum(int,int,int,int,int),*(struct(*`,long,*`,long,int,int)))->(enum(int,int,int,int,int))),*((*(void),enum(int,int,int,int,int),*(struct(*`,long,*`,long,int,int)))->(enum(int,int,int,int,int))))
=	O
{	O
"LINELEN"	*(char)
,	O
alloc_state	(*(*(void)),int,int,*(*(char)))->(int)
,	O
_ll_encoder	(*(void),enum(int,int,int,int,int),*(struct(*(char),long,*(char),long,int,int)))->(enum(int,int,int,int,int))
,	O
NULL	O
,	O
}	O
;	O
mu_filter_record_t	*(struct)
mu_linelen_filter	*(struct(*(char),*((*(*`),int,int,*(*`))->(int)),*((*(void),enum(int,int,int,int,int),*(struct`))->(enum(int,int,int,int,int))),*((*(void),enum(int,int,int,int,int),*(struct`))->(enum(int,int,int,int,int)))))
=	O
&	O
_linelen_filter	struct(*(char),*((*(*(void)),int,int,*(*(char)))->(int)),*((*(void),enum(int,int,int,int,int),*(struct(*`,long,*`,long,int,int)))->(enum(int,int,int,int,int))),*((*(void),enum(int,int,int,int,int),*(struct(*`,long,*`,long,int,int)))->(enum(int,int,int,int,int))))
;	O
