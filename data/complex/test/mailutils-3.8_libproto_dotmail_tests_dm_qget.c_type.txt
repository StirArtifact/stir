int	O
main	(int,*(*(char)))->(int)
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	*(*(char))
)	O
{	O
mu_mailbox_t	*(struct)
mbx	*(struct)
;	O
mu_message_t	*(struct)
msg	*(struct)
=	O
NULL	O
;	O
char	O
*	O
mailbox_name	*(char)
=	O
getenv	(*(char))->(*(char))
(	O
"MAIL"	*(char)
)	O
;	O
mu_message_qid_t	*(char)
qid	*(char)
;	O
mu_stream_t	*(struct)
str	*(char)
;	O
mu_set_program_name	(*(char))->(void)
(	O
argv	*(*(char))
[	O
0	int
]	O
)	O
;	O
mu_stdstream_setup	(int)->(void)
(	O
MU_STDSTREAM_RESET_NONE	int
)	O
;	O
mu_registrar_record	(*(struct(int,*(char),int,int,int,*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*(void),*((*`,*`,int)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,int)->(int)))))->(int)
(	O
mu_dotmail_record	*(struct(int,*(char),int,int,int,*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*(void),*((*(struct`),*(struct`),int)->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(char),int)->(int))))
)	O
;	O
argc	long
--	O
;	O
argv	*(*(char))
++	O
;	O
if	O
(	O
argc	long
&&	O
strcmp	(*(char),*(char))->(int)
(	O
argv	*(*(char))
[	O
0	int
]	O
,	O
"-d"	*(char)
)	O
==	O
0	int
)	O
{	O
mu_debug_enable_category	(*(char),long,int)->(void)
(	O
"mailbox"	*(char)
,	O
7	int
,	O
MU_DEBUG_LEVEL_UPTO	O
(	O
MU_DEBUG_PROT	int
)	O
)	O
;	O
argc	long
--	O
;	O
argv	*(*(char))
++	O
;	O
}	O
MU_ASSERT	O
(	O
mu_mailbox_create_default	(*(*(struct)),*(char))->(int)
(	O
&	O
mbx	*(struct)
,	O
mailbox_name	*(char)
)	O
)	O
;	O
MU_ASSERT	O
(	O
mu_mailbox_open	(*(struct),int)->(int)
(	O
mbx	*(struct)
,	O
MU_STREAM_READ	int
|	O
MU_STREAM_QACCESS	int
)	O
)	O
;	O
if	O
(	O
argc	long
!=	O
1	int
)	O
{	O
mu_error	(*(char))->(int)
(	O
"only one argument is allowed"	*(char)
)	O
;	O
return	O
1	int
;	O
}	O
qid	*(char)
=	O
argv	*(*(char))
[	O
0	int
]	O
;	O
MU_ASSERT	O
(	O
mu_mailbox_quick_get_message	(*(struct),*(char),*(*(struct)))->(int)
(	O
mbx	*(struct)
,	O
qid	*(char)
,	O
&	O
msg	*(struct)
)	O
)	O
;	O
MU_ASSERT	O
(	O
mu_message_get_streamref	(*(struct),*(*(struct)))->(int)
(	O
msg	*(struct)
,	O
&	O
str	*(char)
)	O
)	O
;	O
MU_ASSERT	O
(	O
mu_stream_copy	(*(struct),*(struct),long,*(long))->(int)
(	O
mu_strout	*(struct)
,	O
str	*(char)
,	O
0	int
,	O
NULL	O
)	O
)	O
;	O
mu_stream_destroy	(*(*(struct)))->(void)
(	O
&	O
str	*(char)
)	O
;	O
return	O
0	int
;	O
}	O
