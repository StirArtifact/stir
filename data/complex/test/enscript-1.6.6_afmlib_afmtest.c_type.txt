static	O
void	O
usage	()->(void)
(	O
)	O
;	O
static	O
char	O
*	O
program	*(char)
;	O
int	O
main	(int,array(*(char)))->(int)
(	O
int	O
argc	int
,	O
char	O
*	O
argv	array(*(char))
[	O
]	O
)	O
{	O
AFMHandle	*(struct)
afm	*(struct)
;	O
AFMFont	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
;	O
AFMError	int
error	int
;	O
AFMNumber	double
width	double
,	O
height	double
;	O
char	O
buf	*(char)
[	O
256	int
]	O
;	O
program	*(char)
=	O
strrchr	(*(char),int)->(*(char))
(	O
argv	array(*(char))
[	O
0	int
]	O
,	O
'/'	O
)	O
;	O
if	O
(	O
program	*(char)
)	O
program	*(char)
++	O
;	O
else	O
program	*(char)
=	O
argv	array(*(char))
[	O
0	int
]	O
;	O
error	int
=	O
afm_create	(*(char),int,*(*(struct)))->(int)
(	O
NULL	O
,	O
0	int
,	O
&	O
afm	*(struct)
)	O
;	O
HANDLE_ERROR	O
(	O
"couldn't create library"	*(char)
)	O
;	O
if	O
(	O
argc	int
<	O
2	int
)	O
{	O
usage	()->(void)
(	O
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
argv	array(*(char))
[	O
1	int
]	O
,	O
"dump"	*(char)
)	O
==	O
0	int
&&	O
argc	int
==	O
3	int
)	O
{	O
error	int
=	O
afm_open_file	(*(struct),int,*(char),*(*(struct(*(struct`),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*`,*`,*`,*`,double,double,double,double,*`,*`,*`,long,long,*`,long,enum(int,int),double,double,enum(int,int),double,double,double,double,*`,*`,*`,*`),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct`),long,*(struct`),long,*(struct`),long,*(struct`)))))->(int)
(	O
afm	*(struct)
,	O
AFM_I_ALL	int
,	O
argv	array(*(char))
[	O
2	int
]	O
,	O
&	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
)	O
;	O
if	O
(	O
error	int
!=	O
AFM_SUCCESS	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s: couldn't open font \"%s\", using default\n"	*(char)
,	O
program	*(char)
,	O
argv	array(*(char))
[	O
2	int
]	O
)	O
;	O
error	int
=	O
afm_open_default_font	(*(struct),*(*(struct(*(struct`),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*`,*`,*`,*`,double,double,double,double,*`,*`,*`,long,long,*`,long,enum(int,int),double,double,enum(int,int),double,double,double,double,*`,*`,*`,*`),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct`),long,*(struct`),long,*(struct`),long,*(struct`)))))->(int)
(	O
afm	*(struct)
,	O
&	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
)	O
;	O
HANDLE_ERROR	O
(	O
"couldn't open default font"	*(char)
)	O
;	O
}	O
afm_font_dump	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct`),*(struct`),*(struct`),*(struct`)),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*`,double,double,double,double,double,double,double,*`)),long,*(struct(*`,long,*`)),long,*(struct(*`,*`,double,double)),long,*(struct(long,double,double,double,double)))))->(void)
(	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
)	O
;	O
error	int
=	O
afm_close_font	(*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct`),*(struct`),*(struct`),*(struct`)),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*`,double,double,double,double,double,double,double,*`)),long,*(struct(*`,long,*`)),long,*(struct(*`,*`,double,double)),long,*(struct(long,double,double,double,double)))))->(int)
(	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
)	O
;	O
HANDLE_ERROR	O
(	O
"couldn't close font"	*(char)
)	O
;	O
}	O
else	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
argv	array(*(char))
[	O
1	int
]	O
,	O
"stringwidth"	*(char)
)	O
==	O
0	int
&&	O
argc	int
==	O
5	int
)	O
{	O
error	int
=	O
afm_open_file	(*(struct),int,*(char),*(*(struct(*(struct`),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*`,*`,*`,*`,double,double,double,double,*`,*`,*`,long,long,*`,long,enum(int,int),double,double,enum(int,int),double,double,double,double,*`,*`,*`,*`),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct`),long,*(struct`),long,*(struct`),long,*(struct`)))))->(int)
(	O
afm	*(struct)
,	O
AFM_I_ALL	int
,	O
argv	array(*(char))
[	O
2	int
]	O
,	O
&	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
)	O
;	O
HANDLE_ERROR	O
(	O
"couldn't open font"	*(char)
)	O
;	O
error	int
=	O
afm_font_encoding	(*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct`),*(struct`),*(struct`),*(struct`)),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*`,double,double,double,double,double,double,double,*`)),long,*(struct(*`,long,*`)),long,*(struct(*`,*`,double,double)),long,*(struct(long,double,double,double,double)))),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(int)
(	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
,	O
AFM_ENCODING_ISO_8859_1	int
,	O
0	int
)	O
;	O
HANDLE_ERROR	O
(	O
"couldn't encode font"	*(char)
)	O
;	O
error	int
=	O
afm_font_stringwidth	(*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct`),*(struct`),*(struct`),*(struct`)),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*`,double,double,double,double,double,double,double,*`)),long,*(struct(*`,long,*`)),long,*(struct(*`,*`,double,double)),long,*(struct(long,double,double,double,double)))),double,*(char),int,*(double),*(double))->(int)
(	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
,	O
atof	(*(char))->(double)
(	O
argv	array(*(char))
[	O
3	int
]	O
)	O
,	O
argv	array(*(char))
[	O
4	int
]	O
,	O
strlen	(*(char))->(long)
(	O
argv	array(*(char))
[	O
4	int
]	O
)	O
,	O
&	O
width	double
,	O
&	O
height	double
)	O
;	O
printf	(*(char))->(int)
(	O
"stringwidth is [%g %g]\n"	*(char)
,	O
width	double
,	O
height	double
)	O
;	O
error	int
=	O
afm_close_font	(*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct`),*(struct`),*(struct`),*(struct`)),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*`,double,double,double,double,double,double,double,*`)),long,*(struct(*`,long,*`)),long,*(struct(*`,*`,double,double)),long,*(struct(long,double,double,double,double)))))->(int)
(	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
)	O
;	O
HANDLE_ERROR	O
(	O
"couldn't close font"	*(char)
)	O
;	O
}	O
else	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
argv	array(*(char))
[	O
1	int
]	O
,	O
"chardump"	*(char)
)	O
==	O
0	int
&&	O
argc	int
>	O
2	int
)	O
{	O
int	O
i	int
,	O
j	int
;	O
for	O
(	O
i	int
=	O
2	int
;	O
i	int
<	O
argc	int
;	O
i	int
++	O
)	O
{	O
error	int
=	O
afm_open_file	(*(struct),int,*(char),*(*(struct(*(struct`),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*`,*`,*`,*`,double,double,double,double,*`,*`,*`,long,long,*`,long,enum(int,int),double,double,enum(int,int),double,double,double,double,*`,*`,*`,*`),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct`),long,*(struct`),long,*(struct`),long,*(struct`)))))->(int)
(	O
afm	*(struct)
,	O
AFM_I_COMPOSITES	int
,	O
argv	array(*(char))
[	O
i	int
]	O
,	O
&	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
)	O
;	O
if	O
(	O
error	int
!=	O
AFM_SUCCESS	int
)	O
{	O
afm_error_to_string	(int,*(char))->(void)
(	O
error	int
,	O
buf	*(char)
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s: couldn't open AFM file \"%s\": %s\n"	*(char)
,	O
program	*(char)
,	O
argv	array(*(char))
[	O
i	int
]	O
,	O
buf	*(char)
)	O
;	O
continue	O
;	O
}	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
->	O
num_character_metrics	long
;	O
j	int
++	O
)	O
{	O
AFMIndividualCharacterMetrics	struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char))))
*	O
cm	*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))
;	O
cm	*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))
=	O
&	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
->	O
character_metrics	*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))
[	O
j	int
]	O
;	O
printf	(*(char))->(int)
(	O
"/%-30s %3ld glyph %s\n"	*(char)
,	O
cm	*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))
->	O
name	*(char)
,	O
cm	*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))
->	O
character_code	long
,	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
->	O
global_info	struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*(struct(int,union`)))),*(struct(double,*(struct(int,union`)))),*(struct(double,*(struct(int,union`)))),*(struct(double,*(struct(int,union`)))))
.	O
FontName	*(char)
)	O
;	O
}	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
->	O
num_composites	long
;	O
j	int
++	O
)	O
{	O
AFMComposite	struct(*(char),long,*(struct(*(char),double,double)))
*	O
cc	*(struct(*(char),long,*(struct(*(char),double,double))))
;	O
cc	*(struct(*(char),long,*(struct(*(char),double,double))))
=	O
&	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
->	O
composites	*(struct(*(char),long,*(struct(*(char),double,double))))
[	O
j	int
]	O
;	O
printf	(*(char))->(int)
(	O
"/%-30s -1 composite %s\n"	*(char)
,	O
cc	*(struct(*(char),long,*(struct(*(char),double,double))))
->	O
name	*(char)
,	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
->	O
global_info	struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*(struct(int,union`)))),*(struct(double,*(struct(int,union`)))),*(struct(double,*(struct(int,union`)))),*(struct(double,*(struct(int,union`)))))
.	O
FontName	*(char)
)	O
;	O
}	O
(	O
void	O
)	O
afm_close_font	(*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct`),*(struct`),*(struct`),*(struct`)),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*`,double,double,double,double,double,double,double,*`)),long,*(struct(*`,long,*`)),long,*(struct(*`,*`,double,double)),long,*(struct(long,double,double,double,double)))))->(int)
(	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
)	O
;	O
}	O
}	O
else	O
{	O
usage	()->(void)
(	O
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
return	O
0	int
;	O
}	O
static	O
void	O
usage	()->(void)
(	O
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"Usage: %s dump file\n"	*(char)
"       %s stringwidth file ptsize string\n"	*(char)
"       %s chardump file [file ...]\n"	*(char)
,	O
program	*(char)
,	O
program	*(char)
,	O
program	*(char)
)	O
;	O
}	O
