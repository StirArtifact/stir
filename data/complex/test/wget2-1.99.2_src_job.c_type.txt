void	O
job_free	(*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(struct(*`,*`,*`,*`,long)),*(struct),*(struct),*(struct),*(struct),*(struct(*`,*`,*`,*`,long long,int,int,enum(int,int),short,bool)),*(char),*(char),*(char),*(struct(long,long,int,long,bool,bool)),*(struct(*`,*`,*`,*`,long,int,*`,bool)),long,long long,long long,int,int,int,int,int,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool)))->(void)
(	O
JOB	struct
*	O
job	*(struct)
)	O
{	O
if	O
(	O
job	*(struct)
->	O
challenges_alloc	bool
)	O
wget_http_free_challenges	(*(*(struct)))->(void)
(	O
&	O
job	*(struct)
->	O
challenges	*(struct)
)	O
;	O
wget_http_free_challenges	(*(*(struct)))->(void)
(	O
&	O
job	*(struct)
->	O
proxy_challenges	*(struct)
)	O
;	O
wget_metalink_free	(*(*(struct(*(char),*(struct`),*(struct`),*(struct`),long))))->(void)
(	O
&	O
job	*(struct)
->	O
metalink	*(*(struct(*(char),*(struct),*(struct),*(struct),long)))
)	O
;	O
wget_vector_free	(*(*(struct)))->(void)
(	O
&	O
job	*(struct)
->	O
parts	*(struct)
)	O
;	O
wget_list_free	(*(*(struct)))->(void)
(	O
&	O
job	*(struct)
->	O
remaining_sig_ext	*(struct)
)	O
;	O
xfree	O
(	O
job	*(struct)
->	O
sig_req	*(char)
)	O
;	O
xfree	O
(	O
job	*(struct)
->	O
local_filename	*(char)
)	O
;	O
xfree	O
(	O
job	*(struct)
->	O
sig_filename	*(char)
)	O
;	O
}	O
void	O
job_create_parts	(*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(struct(*`,*`,*`,*`,long)),*(struct),*(struct),*(struct),*(struct),*(struct(*`,*`,*`,*`,long long,int,int,enum(int,int),short,bool)),*(char),*(char),*(char),*(struct(long,long,int,long,bool,bool)),*(struct(*`,*`,*`,*`,long,int,*`,bool)),long,long long,long long,int,int,int,int,int,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool)))->(void)
(	O
JOB	struct
*	O
job	*(struct)
)	O
{	O
PART	struct(long,long,int,long,bool,bool)
part	*(struct(long,long,int,long,bool,bool))
;	O
wget_metalink	struct(*(char),*(struct),*(struct),*(struct),long)
*	O
metalink	*(*(struct(*(char),*(struct),*(struct),*(struct),long)))
;	O
ssize_t	long
fsize	long
;	O
if	O
(	O
!	O
(	O
metalink	*(*(struct(*(char),*(struct),*(struct),*(struct),long)))
=	O
job	*(struct)
->	O
metalink	*(*(struct(*(char),*(struct),*(struct),*(struct),long)))
)	O
)	O
return	O
;	O
memset	(*(void),int,long)->(*(void))
(	O
&	O
part	*(struct(long,long,int,long,bool,bool))
,	O
0	int
,	O
sizeof	O
(	O
PART	struct(long,long,int,long,bool,bool)
)	O
)	O
;	O
if	O
(	O
!	O
job	*(struct)
->	O
parts	*(struct)
)	O
job	*(struct)
->	O
parts	*(struct)
=	O
wget_vector_create	(int,*((*(void),*(void))->(int)))->(*(struct))
(	O
wget_vector_size	(*(struct))->(int)
(	O
metalink	*(*(struct(*(char),*(struct),*(struct),*(struct),long)))
->	O
pieces	*(struct)
)	O
,	O
NULL	O
)	O
;	O
else	O
wget_vector_clear	(*(struct))->(void)
(	O
job	*(struct)
->	O
parts	*(struct)
)	O
;	O
fsize	long
=	O
metalink	*(*(struct(*(char),*(struct),*(struct),*(struct),long)))
->	O
size	*(long)
;	O
for	O
(	O
int	O
it	int
=	O
0	int
;	O
it	int
<	O
wget_vector_size	(*(struct))->(int)
(	O
metalink	*(*(struct(*(char),*(struct),*(struct),*(struct),long)))
->	O
pieces	*(struct)
)	O
;	O
it	int
++	O
)	O
{	O
wget_metalink_piece	struct(struct(array(char),array(char)),long,long)
*	O
piece	*(struct(struct(array(char),array(char)),long,long))
=	O
wget_vector_get	(*(struct),int)->(*(void))
(	O
metalink	*(*(struct(*(char),*(struct),*(struct),*(struct),long)))
->	O
pieces	*(struct)
,	O
it	int
)	O
;	O
if	O
(	O
fsize	long
>=	O
piece	*(struct(struct(array(char),array(char)),long,long))
->	O
length	long
)	O
{	O
part	*(struct(long,long,int,long,bool,bool))
.	O
length	long
=	O
piece	*(struct(struct(array(char),array(char)),long,long))
->	O
length	long
;	O
}	O
else	O
{	O
part	*(struct(long,long,int,long,bool,bool))
.	O
length	long
=	O
fsize	long
;	O
}	O
part	*(struct(long,long,int,long,bool,bool))
.	O
id	int
=	O
it	int
+	O
1	int
;	O
wget_vector_add_memdup	(*(struct),*(void),long)->(int)
(	O
job	*(struct)
->	O
parts	*(struct)
,	O
&	O
part	*(struct(long,long,int,long,bool,bool))
,	O
sizeof	O
(	O
PART	struct(long,long,int,long,bool,bool)
)	O
)	O
;	O
part	*(struct(long,long,int,long,bool,bool))
.	O
position	long
+=	O
part	*(struct(long,long,int,long,bool,bool))
.	O
length	long
;	O
fsize	long
-=	O
piece	*(struct(struct(array(char),array(char)),long,long))
->	O
length	long
;	O
}	O
}	O
static	O
int	O
check_piece_hash	(*(struct(array(char),array(char))),int,long,long)->(int)
(	O
wget_metalink_hash	struct(array(char),array(char))
*	O
hash	*((*(void))->(int))
,	O
int	O
fd	array(int)
,	O
off_t	long
offset	long
,	O
size_t	long
length	long
)	O
{	O
char	O
sum	array(char)
[	O
128	int
+	O
1	int
]	O
;	O
if	O
(	O
wget_hash_file_fd	(*(char),int,*(char),long,long,long)->(int)
(	O
hash	*((*(void))->(int))
->	O
type	enum(int,int,int,int)
,	O
fd	array(int)
,	O
sum	array(char)
,	O
sizeof	O
(	O
sum	array(char)
)	O
,	O
offset	long
,	O
length	long
)	O
!=	O
-	O
1	int
)	O
{	O
return	O
!	O
wget_strcasecmp_ascii	(*(char),*(char))->(int)
(	O
sum	array(char)
,	O
hash	*((*(void))->(int))
->	O
hash_hex	array(char)
)	O
;	O
}	O
return	O
-	O
1	int
;	O
}	O
static	O
int	O
_check_file_fd	(*(struct(array(char),array(char))),int)->(int)
(	O
wget_metalink_hash	struct(array(char),array(char))
*	O
hash	*((*(void))->(int))
,	O
int	O
fd	array(int)
)	O
{	O
char	O
sum	array(char)
[	O
128	int
+	O
1	int
]	O
;	O
if	O
(	O
wget_hash_file_fd	(*(char),int,*(char),long,long,long)->(int)
(	O
hash	*((*(void))->(int))
->	O
type	enum(int,int,int,int)
,	O
fd	array(int)
,	O
sum	array(char)
,	O
sizeof	O
(	O
sum	array(char)
)	O
,	O
0	int
,	O
0	int
)	O
!=	O
-	O
1	int
)	O
{	O
return	O
!	O
wget_strcasecmp_ascii	(*(char),*(char))->(int)
(	O
sum	array(char)
,	O
hash	*((*(void))->(int))
->	O
hash_hex	array(char)
)	O
;	O
}	O
return	O
-	O
1	int
;	O
}	O
int	O
job_validate_file	(*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(struct(*`,*`,*`,*`,long)),*(struct),*(struct),*(struct),*(struct),*(struct(*`,*`,*`,*`,long long,int,int,enum(int,int),short,bool)),*(char),*(char),*(char),*(struct(long,long,int,long,bool,bool)),*(struct(*`,*`,*`,*`,long,int,*`,bool)),long,long long,long long,int,int,int,int,int,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool)))->(int)
(	O
JOB	struct
*	O
job	*(struct)
)	O
{	O
PART	struct(long,long,int,long,bool,bool)
part	*(struct(long,long,int,long,bool,bool))
;	O
wget_metalink	struct(*(char),*(struct),*(struct),*(struct),long)
*	O
metalink	*(*(struct(*(char),*(struct),*(struct),*(struct),long)))
;	O
off_t	long
fsize	long
,	O
real_fsize	long
=	O
0	int
;	O
int	O
fd	array(int)
;	O
struct	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
st	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
;	O
if	O
(	O
!	O
(	O
metalink	*(*(struct(*(char),*(struct),*(struct),*(struct),long)))
=	O
job	*(struct)
->	O
metalink	*(*(struct(*(char),*(struct),*(struct),*(struct),long)))
)	O
)	O
return	O
0	int
;	O
memset	(*(void),int,long)->(*(void))
(	O
&	O
part	*(struct(long,long,int,long,bool,bool))
,	O
0	int
,	O
sizeof	O
(	O
PART	struct(long,long,int,long,bool,bool)
)	O
)	O
;	O
if	O
(	O
!	O
metalink	*(*(struct(*(char),*(struct),*(struct),*(struct),long)))
->	O
pieces	*(struct)
)	O
{	O
wget_metalink_piece	struct(struct(array(char),array(char)),long,long)
piece	*(struct(struct(array(char),array(char)),long,long))
;	O
wget_metalink_hash	struct(array(char),array(char))
*	O
hash	*((*(void))->(int))
=	O
wget_vector_get	(*(struct),int)->(*(void))
(	O
metalink	*(*(struct(*(char),*(struct),*(struct),*(struct),long)))
->	O
hashes	*(struct)
,	O
0	int
)	O
;	O
if	O
(	O
!	O
hash	*((*(void))->(int))
)	O
return	O
1	int
;	O
piece	*(struct(struct(array(char),array(char)),long,long))
.	O
length	long
=	O
metalink	*(*(struct(*(char),*(struct),*(struct),*(struct),long)))
->	O
size	*(long)
;	O
piece	*(struct(struct(array(char),array(char)),long,long))
.	O
position	long
=	O
0	int
;	O
wget_strscpy	(*(char),*(char),long)->(long)
(	O
piece	*(struct(struct(array(char),array(char)),long,long))
.	O
hash	*((*(void))->(int))
.	O
type	enum(int,int,int,int)
,	O
hash	*((*(void))->(int))
->	O
type	enum(int,int,int,int)
,	O
sizeof	O
(	O
piece	*(struct(struct(array(char),array(char)),long,long))
.	O
hash	*((*(void))->(int))
.	O
type	enum(int,int,int,int)
)	O
)	O
;	O
wget_strscpy	(*(char),*(char),long)->(long)
(	O
piece	*(struct(struct(array(char),array(char)),long,long))
.	O
hash	*((*(void))->(int))
.	O
hash_hex	array(char)
,	O
hash	*((*(void))->(int))
->	O
hash_hex	array(char)
,	O
sizeof	O
(	O
piece	*(struct(struct(array(char),array(char)),long,long))
.	O
hash	*((*(void))->(int))
.	O
hash_hex	array(char)
)	O
)	O
;	O
metalink	*(*(struct(*(char),*(struct),*(struct),*(struct),long)))
->	O
pieces	*(struct)
=	O
wget_vector_create	(int,*((*(void),*(void))->(int)))->(*(struct))
(	O
1	int
,	O
NULL	O
)	O
;	O
wget_vector_add_memdup	(*(struct),*(void),long)->(int)
(	O
metalink	*(*(struct(*(char),*(struct),*(struct),*(struct),long)))
->	O
pieces	*(struct)
,	O
&	O
piece	*(struct(struct(array(char),array(char)),long,long))
,	O
sizeof	O
(	O
wget_metalink_piece	struct(struct(array(char),array(char)),long,long)
)	O
)	O
;	O
}	O
if	O
(	O
!	O
job	*(struct)
->	O
parts	*(struct)
)	O
job	*(struct)
->	O
parts	*(struct)
=	O
wget_vector_create	(int,*((*(void),*(void))->(int)))->(*(struct))
(	O
wget_vector_size	(*(struct))->(int)
(	O
metalink	*(*(struct(*(char),*(struct),*(struct),*(struct),long)))
->	O
pieces	*(struct)
)	O
,	O
NULL	O
)	O
;	O
else	O
wget_vector_clear	(*(struct))->(void)
(	O
job	*(struct)
->	O
parts	*(struct)
)	O
;	O
fsize	long
=	O
metalink	*(*(struct(*(char),*(struct),*(struct),*(struct),long)))
->	O
size	*(long)
;	O
if	O
(	O
wget_vector_size	(*(struct))->(int)
(	O
metalink	*(*(struct(*(char),*(struct),*(struct),*(struct),long)))
->	O
hashes	*(struct)
)	O
==	O
0	int
)	O
{	O
if	O
(	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
(	O
metalink	*(*(struct(*(char),*(struct),*(struct),*(struct),long)))
->	O
name	*(char)
,	O
&	O
st	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
)	O
==	O
0	int
&&	O
st	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_size	long
==	O
fsize	long
)	O
{	O
return	O
1	int
;	O
}	O
}	O
if	O
(	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
(	O
metalink	*(*(struct(*(char),*(struct),*(struct),*(struct),long)))
->	O
name	*(char)
,	O
&	O
st	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
)	O
==	O
0	int
&&	O
(	O
real_fsize	long
=	O
st	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_size	long
)	O
>	O
fsize	long
)	O
{	O
if	O
(	O
wget_truncate	(*(char),long)->(int)
(	O
metalink	*(*(struct(*(char),*(struct),*(struct),*(struct),long)))
->	O
name	*(char)
,	O
fsize	long
)	O
!=	O
WGET_E_SUCCESS	int
)	O
error_printf	O
(	O
_	O
(	O
"Failed to truncate %s\n from %llu to %llu bytes\n"	*(char)
)	O
,	O
metalink	*(*(struct(*(char),*(struct),*(struct),*(struct),long)))
->	O
name	*(char)
,	O
(	O
unsigned	O
long	O
long	O
)	O
st	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_size	long
,	O
(	O
unsigned	O
long	O
long	O
)	O
fsize	long
)	O
;	O
else	O
real_fsize	long
=	O
fsize	long
;	O
}	O
if	O
(	O
wget_vector_size	(*(struct))->(int)
(	O
metalink	*(*(struct(*(char),*(struct),*(struct),*(struct),long)))
->	O
hashes	*(struct)
)	O
>	O
0	int
&&	O
(	O
fd	array(int)
=	O
open	(*(char),int)->(int)
(	O
metalink	*(*(struct(*(char),*(struct),*(struct),*(struct),long)))
->	O
name	*(char)
,	O
O_RDONLY	int
|	O
O_BINARY	int
)	O
)	O
!=	O
-	O
1	int
)	O
{	O
int	O
rc	int
=	O
-	O
1	int
;	O
for	O
(	O
int	O
it	int
=	O
0	int
;	O
errno	O
!=	O
EINTR	int
&&	O
it	int
<	O
wget_vector_size	(*(struct))->(int)
(	O
metalink	*(*(struct(*(char),*(struct),*(struct),*(struct),long)))
->	O
hashes	*(struct)
)	O
;	O
it	int
++	O
)	O
{	O
wget_metalink_hash	struct(array(char),array(char))
*	O
hash	*((*(void))->(int))
=	O
wget_vector_get	(*(struct),int)->(*(void))
(	O
metalink	*(*(struct(*(char),*(struct),*(struct),*(struct),long)))
->	O
hashes	*(struct)
,	O
it	int
)	O
;	O
if	O
(	O
(	O
rc	int
=	O
_check_file_fd	(*(struct(array(char),array(char))),int)->(int)
(	O
hash	*((*(void))->(int))
,	O
fd	array(int)
)	O
)	O
==	O
-	O
1	int
)	O
continue	O
;	O
break	O
;	O
}	O
if	O
(	O
rc	int
==	O
1	int
)	O
{	O
info_printf	O
(	O
_	O
(	O
"Checksum OK for '%s'\n"	*(char)
)	O
,	O
metalink	*(*(struct(*(char),*(struct),*(struct),*(struct),long)))
->	O
name	*(char)
)	O
;	O
close	*((*(void))->(int))
(	O
fd	array(int)
)	O
;	O
return	O
1	int
;	O
}	O
if	O
(	O
rc	int
==	O
-	O
1	int
)	O
{	O
info_printf	O
(	O
_	O
(	O
"Failed to build checksum, assuming file to be OK\n"	*(char)
)	O
)	O
;	O
close	*((*(void))->(int))
(	O
fd	array(int)
)	O
;	O
return	O
1	int
;	O
}	O
info_printf	O
(	O
_	O
(	O
"Bad checksum for '%s'\n"	*(char)
)	O
,	O
metalink	*(*(struct(*(char),*(struct),*(struct),*(struct),long)))
->	O
name	*(char)
)	O
;	O
for	O
(	O
int	O
it	int
=	O
0	int
;	O
errno	O
!=	O
EINTR	int
&&	O
it	int
<	O
wget_vector_size	(*(struct))->(int)
(	O
metalink	*(*(struct(*(char),*(struct),*(struct),*(struct),long)))
->	O
pieces	*(struct)
)	O
;	O
it	int
++	O
)	O
{	O
wget_metalink_piece	struct(struct(array(char),array(char)),long,long)
*	O
piece	*(struct(struct(array(char),array(char)),long,long))
=	O
wget_vector_get	(*(struct),int)->(*(void))
(	O
metalink	*(*(struct(*(char),*(struct),*(struct),*(struct),long)))
->	O
pieces	*(struct)
,	O
it	int
)	O
;	O
wget_metalink_hash	struct(array(char),array(char))
*	O
hash	*((*(void))->(int))
=	O
&	O
piece	*(struct(struct(array(char),array(char)),long,long))
->	O
hash	*((*(void))->(int))
;	O
if	O
(	O
fsize	long
>=	O
piece	*(struct(struct(array(char),array(char)),long,long))
->	O
length	long
)	O
{	O
part	*(struct(long,long,int,long,bool,bool))
.	O
length	long
=	O
piece	*(struct(struct(array(char),array(char)),long,long))
->	O
length	long
;	O
}	O
else	O
{	O
part	*(struct(long,long,int,long,bool,bool))
.	O
length	long
=	O
(	O
size_t	long
)	O
fsize	long
;	O
}	O
part	*(struct(long,long,int,long,bool,bool))
.	O
id	int
=	O
it	int
+	O
1	int
;	O
if	O
(	O
(	O
rc	int
=	O
check_piece_hash	(*(struct(array(char),array(char))),int,long,long)->(int)
(	O
hash	*((*(void))->(int))
,	O
fd	array(int)
,	O
part	*(struct(long,long,int,long,bool,bool))
.	O
position	long
,	O
part	*(struct(long,long,int,long,bool,bool))
.	O
length	long
)	O
)	O
!=	O
1	int
)	O
{	O
info_printf	O
(	O
_	O
(	O
"Piece %d/%d not OK - requeuing\n"	*(char)
)	O
,	O
it	int
+	O
1	int
,	O
wget_vector_size	(*(struct))->(int)
(	O
metalink	*(*(struct(*(char),*(struct),*(struct),*(struct),long)))
->	O
pieces	*(struct)
)	O
)	O
;	O
wget_vector_add_memdup	(*(struct),*(void),long)->(int)
(	O
job	*(struct)
->	O
parts	*(struct)
,	O
&	O
part	*(struct(long,long,int,long,bool,bool))
,	O
sizeof	O
(	O
PART	struct(long,long,int,long,bool,bool)
)	O
)	O
;	O
debug_printf	O
(	O
"  need to download %llu bytes from pos=%llu\n"	*(char)
,	O
(	O
unsigned	O
long	O
long	O
)	O
part	*(struct(long,long,int,long,bool,bool))
.	O
length	long
,	O
(	O
unsigned	O
long	O
long	O
)	O
part	*(struct(long,long,int,long,bool,bool))
.	O
position	long
)	O
;	O
}	O
part	*(struct(long,long,int,long,bool,bool))
.	O
position	long
+=	O
part	*(struct(long,long,int,long,bool,bool))
.	O
length	long
;	O
fsize	long
-=	O
piece	*(struct(struct(array(char),array(char)),long,long))
->	O
length	long
;	O
}	O
close	*((*(void))->(int))
(	O
fd	array(int)
)	O
;	O
}	O
else	O
{	O
for	O
(	O
int	O
it	int
=	O
0	int
;	O
it	int
<	O
wget_vector_size	(*(struct))->(int)
(	O
metalink	*(*(struct(*(char),*(struct),*(struct),*(struct),long)))
->	O
pieces	*(struct)
)	O
;	O
it	int
++	O
)	O
{	O
wget_metalink_piece	struct(struct(array(char),array(char)),long,long)
*	O
piece	*(struct(struct(array(char),array(char)),long,long))
=	O
wget_vector_get	(*(struct),int)->(*(void))
(	O
metalink	*(*(struct(*(char),*(struct),*(struct),*(struct),long)))
->	O
pieces	*(struct)
,	O
it	int
)	O
;	O
if	O
(	O
fsize	long
>=	O
piece	*(struct(struct(array(char),array(char)),long,long))
->	O
length	long
)	O
{	O
part	*(struct(long,long,int,long,bool,bool))
.	O
length	long
=	O
piece	*(struct(struct(array(char),array(char)),long,long))
->	O
length	long
;	O
}	O
else	O
{	O
part	*(struct(long,long,int,long,bool,bool))
.	O
length	long
=	O
fsize	long
;	O
}	O
part	*(struct(long,long,int,long,bool,bool))
.	O
id	int
=	O
it	int
+	O
1	int
;	O
if	O
(	O
real_fsize	long
<	O
part	*(struct(long,long,int,long,bool,bool))
.	O
position	long
+	O
part	*(struct(long,long,int,long,bool,bool))
.	O
length	long
)	O
{	O
int	O
idx	int
=	O
wget_vector_add_memdup	(*(struct),*(void),long)->(int)
(	O
job	*(struct)
->	O
parts	*(struct)
,	O
&	O
part	*(struct(long,long,int,long,bool,bool))
,	O
sizeof	O
(	O
PART	struct(long,long,int,long,bool,bool)
)	O
)	O
;	O
if	O
(	O
real_fsize	long
>	O
part	*(struct(long,long,int,long,bool,bool))
.	O
position	long
)	O
{	O
PART	struct(long,long,int,long,bool,bool)
*	O
p	*(char)
=	O
wget_vector_get	(*(struct),int)->(*(void))
(	O
job	*(struct)
->	O
parts	*(struct)
,	O
idx	int
)	O
;	O
p	*(char)
->	O
position	long
=	O
real_fsize	long
;	O
p	*(char)
->	O
length	long
=	O
(	O
part	*(struct(long,long,int,long,bool,bool))
.	O
position	long
+	O
part	*(struct(long,long,int,long,bool,bool))
.	O
length	long
)	O
-	O
real_fsize	long
;	O
}	O
}	O
part	*(struct(long,long,int,long,bool,bool))
.	O
position	long
+=	O
part	*(struct(long,long,int,long,bool,bool))
.	O
length	long
;	O
fsize	long
-=	O
piece	*(struct(struct(array(char),array(char)),long,long))
->	O
length	long
;	O
}	O
}	O
return	O
0	int
;	O
}	O
JOB	struct
*	O
job_init	(*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(struct(*`,*`,*`,*`,long)),*(struct),*(struct),*(struct),*(struct),*(struct(*`,*`,*`,*`,long long,int,int,enum(int,int),short,bool)),*(char),*(char),*(char),*(struct(long,long,int,long,bool,bool)),*(struct(*`,*`,*`,*`,long,int,*`,bool)),long,long long,long long,int,int,int,int,int,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool)),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),bool)->(*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(struct(*`,*`,*`,*`,long)),*(struct),*(struct),*(struct),*(struct),*(struct(*`,*`,*`,*`,long long,int,int,enum(int,int),short,bool)),*(char),*(char),*(char),*(struct(long,long,int,long,bool,bool)),*(struct(*`,*`,*`,*`,long,int,*`,bool)),long,long long,long long,int,int,int,int,int,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool)))
(	O
JOB	struct
*	O
job	*(struct)
,	O
wget_iri	struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)
*	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
,	O
bool	bool
http_fallback	bool
)	O
{	O
static	O
unsigned	O
long	O
long	O
jobid	long long
;	O
if	O
(	O
!	O
job	*(struct)
)	O
job	*(struct)
=	O
wget_calloc	(long,long)->(*(void))
(	O
1	int
,	O
sizeof	O
(	O
JOB	struct
)	O
)	O
;	O
else	O
memset	(*(void),int,long)->(*(void))
(	O
job	*(struct)
,	O
0	int
,	O
sizeof	O
(	O
JOB	struct
)	O
)	O
;	O
job	*(struct)
->	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
=	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
;	O
job	*(struct)
->	O
http_fallback	bool
=	O
http_fallback	bool
;	O
job	*(struct)
->	O
id	int
=	O
++	O
jobid	long long
;	O
return	O
job	*(struct)
;	O
}	O
