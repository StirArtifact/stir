int	O
main_udp_socket	int
,	O
pmap_udp_socket	int
;	O
struct	O
sockaddr_in	struct(short,short,struct(int),array(char))
main_address	struct(short,short,struct(int),array(char))
,	O
pmap_address	struct(short,short,struct(int),array(char))
;	O
static	O
char	O
index_file	array(char)
[	O
]	O
=	O
LOCALSTATEDIR	O
"/state/misc/nfsd.index"	*(char)
;	O
char	O
*	O
index_file_name	*(char)
=	O
index_file	array(char)
;	O
static	O
void	O
create_server_thread	(int)->(void)
(	O
int	O
socket	(int,int,int)->(int)
)	O
{	O
pthread_t	long
thread	long
;	O
int	O
fail	int
;	O
fail	int
=	O
pthread_create	(*(long),*(union(array(char),long)),*((*(void))->(*(void))),*(void))->(int)
(	O
&	O
thread	long
,	O
NULL	O
,	O
server_loop	(*(void))->(*(void))
,	O
(	O
void	O
*	O
)	O
socket	(int,int,int)->(int)
)	O
;	O
if	O
(	O
fail	int
)	O
error	()->(int)
(	O
1	int
,	O
fail	int
,	O
"Creating main server thread"	*(char)
)	O
;	O
fail	int
=	O
pthread_detach	(long)->(int)
(	O
thread	long
)	O
;	O
if	O
(	O
fail	int
)	O
error	()->(int)
(	O
1	int
,	O
fail	int
,	O
"Detaching main server thread"	*(char)
)	O
;	O
}	O
int	O
main	(int,*(*(char)))->(int)
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	*(*(char))
)	O
{	O
int	O
nthreads	int
;	O
int	O
fail	int
;	O
if	O
(	O
argc	int
>	O
2	int
)	O
{	O
fprintf	()->(int)
(	O
stderr	O
,	O
"%s [num-threads]\n"	*(char)
,	O
argv	*(*(char))
[	O
0	int
]	O
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
if	O
(	O
argc	int
==	O
1	int
)	O
nthreads	int
=	O
4	int
;	O
else	O
nthreads	int
=	O
atoi	(*(char))->(int)
(	O
argv	*(*(char))
[	O
1	int
]	O
)	O
;	O
if	O
(	O
!	O
nthreads	int
)	O
nthreads	int
=	O
4	int
;	O
authserver	int
=	O
getauth	()->(int)
(	O
)	O
;	O
maptime_map	()->(int)
(	O
0	int
,	O
0	int
,	O
&	O
mapped_time	*(struct)
)	O
;	O
main_address	struct(short,short,struct(int),array(char))
.	O
sin_family	short
=	O
AF_INET	O
;	O
main_address	struct(short,short,struct(int),array(char))
.	O
sin_port	short
=	O
htons	(short)->(short)
(	O
NFS_PORT	int
)	O
;	O
main_address	struct(short,short,struct(int),array(char))
.	O
sin_addr	struct(int)
.	O
s_addr	int
=	O
INADDR_ANY	O
;	O
pmap_address	struct(short,short,struct(int),array(char))
.	O
sin_family	short
=	O
AF_INET	O
;	O
pmap_address	struct(short,short,struct(int),array(char))
.	O
sin_port	short
=	O
htons	(short)->(short)
(	O
PMAPPORT	O
)	O
;	O
pmap_address	struct(short,short,struct(int),array(char))
.	O
sin_addr	struct(int)
.	O
s_addr	int
=	O
INADDR_ANY	O
;	O
main_udp_socket	int
=	O
socket	(int,int,int)->(int)
(	O
PF_INET	int
,	O
SOCK_DGRAM	int
,	O
0	int
)	O
;	O
pmap_udp_socket	int
=	O
socket	(int,int,int)->(int)
(	O
PF_INET	int
,	O
SOCK_DGRAM	int
,	O
0	int
)	O
;	O
fail	int
=	O
bind	(int,union(*(struct(short,array(char))),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct)),int)->(int)
(	O
main_udp_socket	int
,	O
(	O
struct	O
sockaddr	struct(short,array(char))
*	O
)	O
&	O
main_address	struct(short,short,struct(int),array(char))
,	O
sizeof	O
(	O
struct	O
sockaddr_in	struct(short,short,struct(int),array(char))
)	O
)	O
;	O
if	O
(	O
fail	int
)	O
error	()->(int)
(	O
1	int
,	O
errno	O
,	O
"Binding NFS socket"	*(char)
)	O
;	O
fail	int
=	O
bind	(int,union(*(struct(short,array(char))),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct)),int)->(int)
(	O
pmap_udp_socket	int
,	O
(	O
struct	O
sockaddr	struct(short,array(char))
*	O
)	O
&	O
pmap_address	struct(short,short,struct(int),array(char))
,	O
sizeof	O
(	O
struct	O
sockaddr_in	struct(short,short,struct(int),array(char))
)	O
)	O
;	O
if	O
(	O
fail	int
)	O
error	()->(int)
(	O
1	int
,	O
errno	O
,	O
"Binding PMAP socket"	*(char)
)	O
;	O
init_filesystems	()->(void)
(	O
)	O
;	O
create_server_thread	(int)->(void)
(	O
pmap_udp_socket	int
)	O
;	O
while	O
(	O
nthreads	int
--	O
)	O
create_server_thread	(int)->(void)
(	O
main_udp_socket	int
)	O
;	O
for	O
(	O
;	O
;	O
)	O
{	O
sleep	()->(int)
(	O
1	int
)	O
;	O
scan_fhs	()->(void)
(	O
)	O
;	O
scan_creds	()->(void)
(	O
)	O
;	O
scan_replies	()->(void)
(	O
)	O
;	O
}	O
}	O
