struct	O
section_name_struct	O
{	O
struct	O
section_name_struct	O
*	O
next	*(struct(*(struct(*(struct`),*(char),long)),*(char),long))
;	O
const	O
char	O
*	O
name	*(char)
;	O
const	O
char	O
*	O
alias	O
;	O
etree_type	O
*	O
vma	long
;	O
etree_type	O
*	O
align	O
;	O
etree_type	O
*	O
subalign	O
;	O
int	O
ok_to_load	O
;	O
}	O
;	O
static	O
unsigned	O
int	O
symbol_truncate	O
=	O
10000	int
;	O
static	O
etree_type	O
*	O
base	int
;	O
static	O
struct	O
section_name_struct	O
*	O
order	O
;	O
static	O
struct	O
section_name_struct	O
*	O
only_load	O
;	O
static	O
struct	O
section_name_struct	O
*	O
address	long
;	O
static	O
struct	O
section_name_struct	O
*	O
alias	O
;	O
static	O
struct	O
section_name_struct	O
*	O
alignment	O
;	O
static	O
struct	O
section_name_struct	O
*	O
subalignment	O
;	O
static	O
struct	O
section_name_struct	O
*	O
*	O
lookup	O
(	O
const	O
char	O
*	O
name	*(char)
,	O
struct	O
section_name_struct	O
*	O
*	O
list	O
)	O
{	O
struct	O
section_name_struct	O
*	O
*	O
ptr	*(*(char))
=	O
list	O
;	O
while	O
(	O
*	O
ptr	*(*(char))
)	O
{	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
name	*(char)
,	O
(	O
*	O
ptr	*(*(char))
)	O
->	O
name	*(char)
)	O
==	O
0	int
)	O
*	O
ptr	*(*(char))
=	O
(	O
*	O
ptr	*(*(char))
)	O
->	O
next	*(struct(*(struct(*(struct`),*(char),long)),*(char),long))
;	O
else	O
ptr	*(*(char))
=	O
&	O
(	O
(	O
*	O
ptr	*(*(char))
)	O
->	O
next	*(struct(*(struct(*(struct`),*(char),long)),*(char),long))
)	O
;	O
}	O
*	O
ptr	*(*(char))
=	O
(	O
struct	O
section_name_struct	O
*	O
)	O
xmalloc	O
(	O
sizeof	O
(	O
struct	O
section_name_struct	O
)	O
)	O
;	O
return	O
ptr	*(*(char))
;	O
}	O
static	O
void	O
mri_add_to_list	O
(	O
struct	O
section_name_struct	O
*	O
*	O
list	O
,	O
const	O
char	O
*	O
name	*(char)
,	O
etree_type	O
*	O
vma	long
,	O
const	O
char	O
*	O
zalias	O
,	O
etree_type	O
*	O
align	O
,	O
etree_type	O
*	O
subalign	O
)	O
{	O
struct	O
section_name_struct	O
*	O
*	O
ptr	*(*(char))
=	O
lookup	O
(	O
name	*(char)
,	O
list	O
)	O
;	O
(	O
*	O
ptr	*(*(char))
)	O
->	O
name	*(char)
=	O
name	*(char)
;	O
(	O
*	O
ptr	*(*(char))
)	O
->	O
vma	long
=	O
vma	long
;	O
(	O
*	O
ptr	*(*(char))
)	O
->	O
next	*(struct(*(struct(*(struct`),*(char),long)),*(char),long))
=	O
NULL	O
;	O
(	O
*	O
ptr	*(*(char))
)	O
->	O
ok_to_load	O
=	O
0	int
;	O
(	O
*	O
ptr	*(*(char))
)	O
->	O
alias	O
=	O
zalias	O
;	O
(	O
*	O
ptr	*(*(char))
)	O
->	O
align	O
=	O
align	O
;	O
(	O
*	O
ptr	*(*(char))
)	O
->	O
subalign	O
=	O
subalign	O
;	O
}	O
void	O
mri_output_section	O
(	O
const	O
char	O
*	O
name	*(char)
,	O
etree_type	O
*	O
vma	long
)	O
{	O
mri_add_to_list	O
(	O
&	O
address	long
,	O
name	*(char)
,	O
vma	long
,	O
0	int
,	O
0	int
,	O
0	int
)	O
;	O
}	O
void	O
mri_only_load	O
(	O
const	O
char	O
*	O
name	*(char)
)	O
{	O
mri_add_to_list	O
(	O
&	O
only_load	O
,	O
name	*(char)
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
)	O
;	O
}	O
void	O
mri_base	O
(	O
etree_type	O
*	O
exp	O
)	O
{	O
base	int
=	O
exp	O
;	O
}	O
static	O
int	O
done_tree	O
=	O
0	int
;	O
void	O
mri_draw_tree	O
(	O
void	O
)	O
{	O
if	O
(	O
done_tree	O
)	O
return	O
;	O
if	O
(	O
address	long
!=	O
NULL	O
)	O
{	O
struct	O
section_name_struct	O
*	O
alist	O
;	O
struct	O
section_name_struct	O
*	O
olist	O
;	O
if	O
(	O
order	O
==	O
NULL	O
)	O
order	O
=	O
address	long
;	O
for	O
(	O
alist	O
=	O
address	long
;	O
alist	O
!=	O
NULL	O
;	O
alist	O
=	O
alist	O
->	O
next	*(struct(*(struct(*(struct`),*(char),long)),*(char),long))
)	O
{	O
int	O
done	O
=	O
0	int
;	O
for	O
(	O
olist	O
=	O
order	O
;	O
done	O
==	O
0	int
&&	O
olist	O
!=	O
NULL	O
;	O
olist	O
=	O
olist	O
->	O
next	*(struct(*(struct(*(struct`),*(char),long)),*(char),long))
)	O
{	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
alist	O
->	O
name	*(char)
,	O
olist	O
->	O
name	*(char)
)	O
==	O
0	int
)	O
{	O
olist	O
->	O
vma	long
=	O
alist	O
->	O
vma	long
;	O
done	O
=	O
1	int
;	O
}	O
}	O
if	O
(	O
!	O
done	O
)	O
{	O
mri_add_to_list	O
(	O
&	O
order	O
,	O
alist	O
->	O
name	*(char)
,	O
alist	O
->	O
vma	long
,	O
0	int
,	O
0	int
,	O
0	int
)	O
;	O
}	O
}	O
}	O
if	O
(	O
only_load	O
!=	O
NULL	O
)	O
{	O
struct	O
section_name_struct	O
*	O
ptr1	O
;	O
struct	O
section_name_struct	O
*	O
ptr2	O
;	O
if	O
(	O
order	O
==	O
NULL	O
)	O
order	O
=	O
only_load	O
;	O
for	O
(	O
ptr1	O
=	O
only_load	O
;	O
ptr1	O
;	O
ptr1	O
=	O
ptr1	O
->	O
next	*(struct(*(struct(*(struct`),*(char),long)),*(char),long))
)	O
for	O
(	O
ptr2	O
=	O
order	O
;	O
ptr2	O
;	O
ptr2	O
=	O
ptr2	O
->	O
next	*(struct(*(struct(*(struct`),*(char),long)),*(char),long))
)	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
ptr2	O
->	O
name	*(char)
,	O
ptr1	O
->	O
name	*(char)
)	O
==	O
0	int
)	O
ptr2	O
->	O
ok_to_load	O
=	O
1	int
;	O
}	O
else	O
{	O
struct	O
section_name_struct	O
*	O
ptr	*(*(char))
;	O
for	O
(	O
ptr	*(*(char))
=	O
order	O
;	O
ptr	*(*(char))
;	O
ptr	*(*(char))
=	O
ptr	*(*(char))
->	O
next	*(struct(*(struct(*(struct`),*(char),long)),*(char),long))
)	O
ptr	*(*(char))
->	O
ok_to_load	O
=	O
1	int
;	O
}	O
if	O
(	O
order	O
!=	O
NULL	O
)	O
{	O
struct	O
section_name_struct	O
*	O
p	*(void)
=	O
order	O
;	O
while	O
(	O
p	*(void)
)	O
{	O
struct	O
section_name_struct	O
*	O
aptr	O
;	O
etree_type	O
*	O
align	O
=	O
0	int
;	O
etree_type	O
*	O
subalign	O
=	O
0	int
;	O
struct	O
wildcard_list	O
*	O
tmp	O
;	O
for	O
(	O
aptr	O
=	O
alignment	O
;	O
aptr	O
;	O
aptr	O
=	O
aptr	O
->	O
next	*(struct(*(struct(*(struct`),*(char),long)),*(char),long))
)	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
aptr	O
->	O
name	*(char)
,	O
p	*(void)
->	O
name	*(char)
)	O
==	O
0	int
)	O
align	O
=	O
aptr	O
->	O
align	O
;	O
for	O
(	O
aptr	O
=	O
subalignment	O
;	O
aptr	O
;	O
aptr	O
=	O
aptr	O
->	O
next	*(struct(*(struct(*(struct`),*(char),long)),*(char),long))
)	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
aptr	O
->	O
name	*(char)
,	O
p	*(void)
->	O
name	*(char)
)	O
==	O
0	int
)	O
subalign	O
=	O
aptr	O
->	O
subalign	O
;	O
if	O
(	O
base	int
==	O
0	int
)	O
base	int
=	O
p	*(void)
->	O
vma	long
?	O
p	*(void)
->	O
vma	long
:	O
exp_nameop	O
(	O
NAME	O
,	O
"."	*(char)
)	O
;	O
lang_enter_output_section_statement	O
(	O
p	*(void)
->	O
name	*(char)
,	O
base	int
,	O
p	*(void)
->	O
ok_to_load	O
?	O
normal_section	O
:	O
noload_section	O
,	O
align	O
,	O
subalign	O
,	O
NULL	O
,	O
0	int
,	O
0	int
)	O
;	O
base	int
=	O
0	int
;	O
tmp	O
=	O
(	O
struct	O
wildcard_list	O
*	O
)	O
xmalloc	O
(	O
sizeof	O
*	O
tmp	O
)	O
;	O
tmp	O
->	O
next	*(struct(*(struct(*(struct`),*(char),long)),*(char),long))
=	O
NULL	O
;	O
tmp	O
->	O
spec	O
.	O
name	*(char)
=	O
p	*(void)
->	O
name	*(char)
;	O
tmp	O
->	O
spec	O
.	O
exclude_name_list	O
=	O
NULL	O
;	O
tmp	O
->	O
spec	O
.	O
sorted	O
=	O
none	O
;	O
tmp	O
->	O
spec	O
.	O
section_flag_list	O
=	O
NULL	O
;	O
lang_add_wild	O
(	O
NULL	O
,	O
tmp	O
,	O
FALSE	O
)	O
;	O
for	O
(	O
aptr	O
=	O
alias	O
;	O
aptr	O
;	O
aptr	O
=	O
aptr	O
->	O
next	*(struct(*(struct(*(struct`),*(char),long)),*(char),long))
)	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
aptr	O
->	O
alias	O
,	O
p	*(void)
->	O
name	*(char)
)	O
==	O
0	int
)	O
{	O
tmp	O
=	O
(	O
struct	O
wildcard_list	O
*	O
)	O
xmalloc	O
(	O
sizeof	O
*	O
tmp	O
)	O
;	O
tmp	O
->	O
next	*(struct(*(struct(*(struct`),*(char),long)),*(char),long))
=	O
NULL	O
;	O
tmp	O
->	O
spec	O
.	O
name	*(char)
=	O
aptr	O
->	O
name	*(char)
;	O
tmp	O
->	O
spec	O
.	O
exclude_name_list	O
=	O
NULL	O
;	O
tmp	O
->	O
spec	O
.	O
sorted	O
=	O
none	O
;	O
tmp	O
->	O
spec	O
.	O
section_flag_list	O
=	O
NULL	O
;	O
lang_add_wild	O
(	O
NULL	O
,	O
tmp	O
,	O
FALSE	O
)	O
;	O
}	O
lang_leave_output_section_statement	O
(	O
0	int
,	O
"*default*"	*(char)
,	O
NULL	O
,	O
NULL	O
)	O
;	O
p	*(void)
=	O
p	*(void)
->	O
next	*(struct(*(struct(*(struct`),*(char),long)),*(char),long))
;	O
}	O
}	O
done_tree	O
=	O
1	int
;	O
}	O
void	O
mri_load	O
(	O
const	O
char	O
*	O
name	*(char)
)	O
{	O
base	int
=	O
0	int
;	O
lang_add_input_file	O
(	O
name	*(char)
,	O
lang_input_file_is_file_enum	O
,	O
NULL	O
)	O
;	O
}	O
void	O
mri_order	O
(	O
const	O
char	O
*	O
name	*(char)
)	O
{	O
mri_add_to_list	O
(	O
&	O
order	O
,	O
name	*(char)
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
)	O
;	O
}	O
void	O
mri_alias	O
(	O
const	O
char	O
*	O
want	O
,	O
const	O
char	O
*	O
is	O
,	O
int	O
isn	O
)	O
{	O
if	O
(	O
!	O
is	O
)	O
{	O
char	O
buf	*(void)
[	O
20	int
]	O
;	O
sprintf	(*(char),*(char))->(int)
(	O
buf	*(void)
,	O
"%d"	*(char)
,	O
isn	O
)	O
;	O
is	O
=	O
xstrdup	O
(	O
buf	*(void)
)	O
;	O
if	O
(	O
is	O
==	O
NULL	O
)	O
abort	()->(void)
(	O
)	O
;	O
}	O
mri_add_to_list	O
(	O
&	O
alias	O
,	O
is	O
,	O
0	int
,	O
want	O
,	O
0	int
,	O
0	int
)	O
;	O
}	O
void	O
mri_name	O
(	O
const	O
char	O
*	O
name	*(char)
)	O
{	O
lang_add_output	O
(	O
name	*(char)
,	O
1	int
)	O
;	O
}	O
void	O
mri_format	O
(	O
const	O
char	O
*	O
name	*(char)
)	O
{	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
name	*(char)
,	O
"S"	*(char)
)	O
==	O
0	int
)	O
lang_add_output_format	O
(	O
"srec"	*(char)
,	O
NULL	O
,	O
NULL	O
,	O
1	int
)	O
;	O
else	O
einfo	O
(	O
_	O
(	O
"%F%P: unknown format type %s\n"	*(char)
)	O
,	O
name	*(char)
)	O
;	O
}	O
void	O
mri_public	O
(	O
const	O
char	O
*	O
name	*(char)
,	O
etree_type	O
*	O
exp	O
)	O
{	O
lang_add_assignment	O
(	O
exp_assign	O
(	O
name	*(char)
,	O
exp	O
,	O
FALSE	O
)	O
)	O
;	O
}	O
void	O
mri_align	O
(	O
const	O
char	O
*	O
name	*(char)
,	O
etree_type	O
*	O
exp	O
)	O
{	O
mri_add_to_list	O
(	O
&	O
alignment	O
,	O
name	*(char)
,	O
0	int
,	O
0	int
,	O
exp	O
,	O
0	int
)	O
;	O
}	O
void	O
mri_alignmod	O
(	O
const	O
char	O
*	O
name	*(char)
,	O
etree_type	O
*	O
exp	O
)	O
{	O
mri_add_to_list	O
(	O
&	O
subalignment	O
,	O
name	*(char)
,	O
0	int
,	O
0	int
,	O
0	int
,	O
exp	O
)	O
;	O
}	O
void	O
mri_truncate	O
(	O
unsigned	O
int	O
exp	O
)	O
{	O
symbol_truncate	O
=	O
exp	O
;	O
}	O
