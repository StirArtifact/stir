gsl_integration_cquad_workspace	struct(long,*(struct(double,double,array(double),array(double),double,double,int,int,int)),*(long))
*	O
gsl_integration_cquad_workspace_alloc	(long)->(*(struct(long,*(struct(double,double,array(double),array(double),double,double,int,int,int)),*(long))))
(	O
const	O
size_t	long
n	int
)	O
{	O
gsl_integration_cquad_workspace	struct(long,*(struct(double,double,array(double),array(double),double,double,int,int,int)),*(long))
*	O
w	*(struct(long,long,long,long,long,*(double),*(double),*(double),*(double),*(long),*(long)))
;	O
if	O
(	O
n	int
<	O
3	int
)	O
GSL_ERROR_VAL	O
(	O
"workspace size n must be at least 3"	*(char)
,	O
GSL_EDOM	int
,	O
0	int
)	O
;	O
if	O
(	O
(	O
w	*(struct(long,long,long,long,long,*(double),*(double),*(double),*(double),*(long),*(long)))
=	O
(	O
gsl_integration_cquad_workspace	struct(long,*(struct(double,double,array(double),array(double),double,double,int,int,int)),*(long))
*	O
)	O
malloc	(long)->(*(void))
(	O
sizeof	O
(	O
gsl_integration_cquad_workspace	struct(long,*(struct(double,double,array(double),array(double),double,double,int,int,int)),*(long))
)	O
)	O
)	O
==	O
NULL	O
)	O
GSL_ERROR_VAL	O
(	O
"failed to allocate space for workspace struct"	*(char)
,	O
GSL_ENOMEM	int
,	O
0	int
)	O
;	O
if	O
(	O
(	O
w	*(struct(long,long,long,long,long,*(double),*(double),*(double),*(double),*(long),*(long)))
->	O
ivals	*(struct(double,double,array(double),array(double),double,double,int,int,int))
=	O
(	O
gsl_integration_cquad_ival	struct(double,double,array(double),array(double),double,double,int,int,int)
*	O
)	O
malloc	(long)->(*(void))
(	O
sizeof	O
(	O
gsl_integration_cquad_ival	struct(double,double,array(double),array(double),double,double,int,int,int)
)	O
*	O
n	int
)	O
)	O
==	O
NULL	O
)	O
{	O
free	(*(void))->(void)
(	O
w	*(struct(long,long,long,long,long,*(double),*(double),*(double),*(double),*(long),*(long)))
)	O
;	O
GSL_ERROR_VAL	O
(	O
"failed to allocate space for the intervals"	*(char)
,	O
GSL_ENOMEM	int
,	O
0	int
)	O
;	O
}	O
if	O
(	O
(	O
w	*(struct(long,long,long,long,long,*(double),*(double),*(double),*(double),*(long),*(long)))
->	O
heap	*(long)
=	O
(	O
size_t	long
*	O
)	O
malloc	(long)->(*(void))
(	O
sizeof	O
(	O
size_t	long
)	O
*	O
n	int
)	O
)	O
==	O
NULL	O
)	O
{	O
free	(*(void))->(void)
(	O
w	*(struct(long,long,long,long,long,*(double),*(double),*(double),*(double),*(long),*(long)))
->	O
ivals	*(struct(double,double,array(double),array(double),double,double,int,int,int))
)	O
;	O
free	(*(void))->(void)
(	O
w	*(struct(long,long,long,long,long,*(double),*(double),*(double),*(double),*(long),*(long)))
)	O
;	O
GSL_ERROR_VAL	O
(	O
"failed to allocate space for the heap"	*(char)
,	O
GSL_ENOMEM	int
,	O
0	int
)	O
;	O
}	O
w	*(struct(long,long,long,long,long,*(double),*(double),*(double),*(double),*(long),*(long)))
->	O
size	long
=	O
n	int
;	O
return	O
w	*(struct(long,long,long,long,long,*(double),*(double),*(double),*(double),*(long),*(long)))
;	O
}	O
void	O
gsl_integration_cquad_workspace_free	(*(struct(long,*(struct(double,double,array(double),array(double),double,double,int,int,int)),*(long))))->(void)
(	O
gsl_integration_cquad_workspace	struct(long,*(struct(double,double,array(double),array(double),double,double,int,int,int)),*(long))
*	O
w	*(struct(long,long,long,long,long,*(double),*(double),*(double),*(double),*(long),*(long)))
)	O
{	O
if	O
(	O
w	*(struct(long,long,long,long,long,*(double),*(double),*(double),*(double),*(long),*(long)))
==	O
NULL	O
)	O
return	O
;	O
if	O
(	O
w	*(struct(long,long,long,long,long,*(double),*(double),*(double),*(double),*(long),*(long)))
->	O
ivals	*(struct(double,double,array(double),array(double),double,double,int,int,int))
!=	O
NULL	O
)	O
free	(*(void))->(void)
(	O
w	*(struct(long,long,long,long,long,*(double),*(double),*(double),*(double),*(long),*(long)))
->	O
ivals	*(struct(double,double,array(double),array(double),double,double,int,int,int))
)	O
;	O
if	O
(	O
w	*(struct(long,long,long,long,long,*(double),*(double),*(double),*(double),*(long),*(long)))
->	O
heap	*(long)
!=	O
NULL	O
)	O
free	(*(void))->(void)
(	O
w	*(struct(long,long,long,long,long,*(double),*(double),*(double),*(double),*(long),*(long)))
->	O
heap	*(long)
)	O
;	O
free	(*(void))->(void)
(	O
w	*(struct(long,long,long,long,long,*(double),*(double),*(double),*(double),*(long),*(long)))
)	O
;	O
}	O
static	O
void	O
Vinvfx	(*(double),*(double),int)->(void)
(	O
const	O
double	O
*	O
fx	array(double)
,	O
double	O
*	O
c	double
,	O
const	O
int	O
d	int
)	O
{	O
int	O
i	long
,	O
j	int
;	O
switch	O
(	O
d	int
)	O
{	O
case	O
0	int
:	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<=	O
4	int
;	O
i	long
++	O
)	O
{	O
c	double
[	O
i	long
]	O
=	O
0.0	int
;	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<=	O
4	int
;	O
j	int
++	O
)	O
c	double
[	O
i	long
]	O
+=	O
V1inv	array(double)
[	O
i	long
*	O
5	int
+	O
j	int
]	O
*	O
fx	array(double)
[	O
j	int
*	O
8	int
]	O
;	O
}	O
break	O
;	O
case	O
1	int
:	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<=	O
8	int
;	O
i	long
++	O
)	O
{	O
c	double
[	O
i	long
]	O
=	O
0.0	int
;	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<=	O
8	int
;	O
j	int
++	O
)	O
c	double
[	O
i	long
]	O
+=	O
V2inv	array(double)
[	O
i	long
*	O
9	int
+	O
j	int
]	O
*	O
fx	array(double)
[	O
j	int
*	O
4	int
]	O
;	O
}	O
break	O
;	O
case	O
2	int
:	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<=	O
16	int
;	O
i	long
++	O
)	O
{	O
c	double
[	O
i	long
]	O
=	O
0.0	int
;	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<=	O
16	int
;	O
j	int
++	O
)	O
c	double
[	O
i	long
]	O
+=	O
V3inv	array(double)
[	O
i	long
*	O
17	int
+	O
j	int
]	O
*	O
fx	array(double)
[	O
j	int
*	O
2	int
]	O
;	O
}	O
break	O
;	O
case	O
3	int
:	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<=	O
32	int
;	O
i	long
++	O
)	O
{	O
c	double
[	O
i	long
]	O
=	O
0.0	int
;	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<=	O
32	int
;	O
j	int
++	O
)	O
c	double
[	O
i	long
]	O
+=	O
V4inv	array(double)
[	O
i	long
*	O
33	int
+	O
j	int
]	O
*	O
fx	array(double)
[	O
j	int
]	O
;	O
}	O
break	O
;	O
}	O
}	O
static	O
void	O
downdate	(*(double),int,int,*(int),int)->(void)
(	O
double	O
*	O
c	double
,	O
int	O
n	int
,	O
int	O
d	int
,	O
int	O
*	O
nans	*(int)
,	O
int	O
nnans	int
)	O
{	O
static	O
const	O
int	O
bidx	array(int)
[	O
4	int
]	O
=	O
{	O
0	int
,	O
6	int
,	O
16	int
,	O
34	int
}	O
;	O
double	O
b_new	array(double)
[	O
34	int
]	O
,	O
alpha	double
;	O
int	O
i	long
,	O
j	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<=	O
n	int
+	O
1	int
;	O
i	long
++	O
)	O
b_new	array(double)
[	O
i	long
]	O
=	O
bee	array(double)
[	O
bidx	array(int)
[	O
d	int
]	O
+	O
i	long
]	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
nnans	int
;	O
i	long
++	O
)	O
{	O
b_new	array(double)
[	O
n	int
+	O
1	int
]	O
=	O
b_new	array(double)
[	O
n	int
+	O
1	int
]	O
/	O
Lalpha	array(double)
[	O
n	int
]	O
;	O
b_new	array(double)
[	O
n	int
]	O
=	O
(	O
b_new	array(double)
[	O
n	int
]	O
+	O
xi	*(double)
[	O
nans	*(int)
[	O
i	long
]	O
]	O
*	O
b_new	array(double)
[	O
n	int
+	O
1	int
]	O
)	O
/	O
Lalpha	array(double)
[	O
n	int
-	O
1	int
]	O
;	O
for	O
(	O
j	int
=	O
n	int
-	O
1	int
;	O
j	int
>	O
0	int
;	O
j	int
--	O
)	O
b_new	array(double)
[	O
j	int
]	O
=	O
(	O
b_new	array(double)
[	O
j	int
]	O
+	O
xi	*(double)
[	O
nans	*(int)
[	O
i	long
]	O
]	O
*	O
b_new	array(double)
[	O
j	int
+	O
1	int
]	O
-	O
Lgamma	array(double)
[	O
j	int
+	O
1	int
]	O
*	O
b_new	array(double)
[	O
j	int
+	O
2	int
]	O
)	O
/	O
Lalpha	array(double)
[	O
j	int
-	O
1	int
]	O
;	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<=	O
n	int
;	O
j	int
++	O
)	O
b_new	array(double)
[	O
j	int
]	O
=	O
b_new	array(double)
[	O
j	int
+	O
1	int
]	O
;	O
alpha	double
=	O
c	double
[	O
n	int
]	O
/	O
b_new	array(double)
[	O
n	int
]	O
;	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<	O
n	int
;	O
j	int
++	O
)	O
c	double
[	O
j	int
]	O
-=	O
alpha	double
*	O
b_new	array(double)
[	O
j	int
]	O
;	O
c	double
[	O
n	int
]	O
=	O
0	int
;	O
n	int
--	O
;	O
}	O
}	O
int	O
gsl_integration_cquad	(*(struct(*((double,*`)->(double)),*(void))),double,double,double,double,*(struct(long,*(struct(double,double,array(double),array(double),double,double,int,int,int)),*(long))),*(double),*(double),*(long))->(int)
(	O
const	O
gsl_function	struct(*((double,*(void))->(double)),*(void))
*	O
f	*(double)
,	O
double	O
a	double
,	O
double	O
b	double
,	O
double	O
epsabs	double
,	O
double	O
epsrel	double
,	O
gsl_integration_cquad_workspace	struct(long,*(struct(double,double,array(double),array(double),double,double,int,int,int)),*(long))
*	O
ws	*(struct(long,*(struct(double,double,array(double),array(double),double,double,int,int,int)),*(long)))
,	O
double	O
*	O
result	*(double)
,	O
double	O
*	O
abserr	*(double)
,	O
size_t	long
*	O
nevals	*(long)
)	O
{	O
static	O
const	O
int	O
n	int
[	O
4	int
]	O
=	O
{	O
4	int
,	O
8	int
,	O
16	int
,	O
32	int
}	O
;	O
static	O
const	O
int	O
skip	array(int)
[	O
4	int
]	O
=	O
{	O
8	int
,	O
4	int
,	O
2	int
,	O
1	int
}	O
;	O
static	O
const	O
int	O
idx	array(int)
[	O
4	int
]	O
=	O
{	O
0	int
,	O
5	int
,	O
14	int
,	O
31	int
}	O
;	O
static	O
const	O
double	O
w	*(struct(long,long,long,long,long,*(double),*(double),*(double),*(double),*(long),*(long)))
=	O
M_SQRT2	int
/	O
2	int
;	O
static	O
const	O
int	O
ndiv_max	int
=	O
20	int
;	O
double	O
m	double
,	O
h	double
,	O
temp	double
;	O
double	O
igral	double
,	O
err	double
,	O
igral_final	double
,	O
err_final	double
,	O
err_excess	double
;	O
int	O
nivals	int
,	O
neval	*(long)
=	O
0	int
;	O
int	O
i	long
,	O
j	int
,	O
d	int
,	O
split	int
,	O
t	*(struct(double,double,int,int,array(double),array(double),array(double),array(double)))
;	O
int	O
nnans	int
,	O
nans	*(int)
[	O
32	int
]	O
;	O
gsl_integration_cquad_ival	struct(double,double,array(double),array(double),double,double,int,int,int)
*	O
iv	*(struct(double,double,array(double),array(double),double,double,int,int,int))
,	O
*	O
ivl	*(struct(double,double,array(double),array(double),double,double,int,int,int))
,	O
*	O
ivr	*(struct(double,double,array(double),array(double),double,double,int,int,int))
;	O
double	O
nc	double
,	O
ncdiff	double
;	O
if	O
(	O
f	*(double)
==	O
NULL	O
)	O
GSL_ERROR	O
(	O
"function pointer shouldn't be NULL"	*(char)
,	O
GSL_EINVAL	int
)	O
;	O
if	O
(	O
result	*(double)
==	O
NULL	O
)	O
GSL_ERROR	O
(	O
"result pointer shouldn't be NULL"	*(char)
,	O
GSL_EINVAL	int
)	O
;	O
if	O
(	O
ws	*(struct(long,*(struct(double,double,array(double),array(double),double,double,int,int,int)),*(long)))
==	O
NULL	O
)	O
GSL_ERROR	O
(	O
"workspace pointer shouldn't be NULL"	*(char)
,	O
GSL_EINVAL	int
)	O
;	O
if	O
(	O
epsabs	double
<	O
0.0	int
||	O
epsrel	double
<	O
0.0	int
)	O
GSL_ERROR	O
(	O
"tolerances may not be negative"	*(char)
,	O
GSL_EBADTOL	int
)	O
;	O
if	O
(	O
epsabs	double
<=	O
0	int
&&	O
epsrel	double
<	O
GSL_DBL_EPSILON	int
)	O
GSL_ERROR	O
(	O
"unreasonable accuracy requirement"	*(char)
,	O
GSL_EBADTOL	int
)	O
;	O
iv	*(struct(double,double,array(double),array(double),double,double,int,int,int))
=	O
&	O
(	O
ws	*(struct(long,*(struct(double,double,array(double),array(double),double,double,int,int,int)),*(long)))
->	O
ivals	*(struct(double,double,array(double),array(double),double,double,int,int,int))
[	O
0	int
]	O
)	O
;	O
m	double
=	O
(	O
a	double
+	O
b	double
)	O
/	O
2	int
;	O
h	double
=	O
(	O
b	double
-	O
a	double
)	O
/	O
2	int
;	O
nnans	int
=	O
0	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<=	O
n	int
[	O
3	int
]	O
;	O
i	long
++	O
)	O
{	O
iv	*(struct(double,double,array(double),array(double),double,double,int,int,int))
->	O
fx	array(double)
[	O
i	long
]	O
=	O
GSL_FN_EVAL	O
(	O
f	*(double)
,	O
m	double
+	O
xi	*(double)
[	O
i	long
]	O
*	O
h	double
)	O
;	O
neval	*(long)
++	O
;	O
if	O
(	O
!	O
gsl_finite	(double)->(int)
(	O
iv	*(struct(double,double,array(double),array(double),double,double,int,int,int))
->	O
fx	array(double)
[	O
i	long
]	O
)	O
)	O
{	O
nans	*(int)
[	O
nnans	int
++	O
]	O
=	O
i	long
;	O
iv	*(struct(double,double,array(double),array(double),double,double,int,int,int))
->	O
fx	array(double)
[	O
i	long
]	O
=	O
0.0	int
;	O
}	O
}	O
Vinvfx	(*(double),*(double),int)->(void)
(	O
iv	*(struct(double,double,array(double),array(double),double,double,int,int,int))
->	O
fx	array(double)
,	O
&	O
(	O
iv	*(struct(double,double,array(double),array(double),double,double,int,int,int))
->	O
c	double
[	O
idx	array(int)
[	O
0	int
]	O
]	O
)	O
,	O
0	int
)	O
;	O
Vinvfx	(*(double),*(double),int)->(void)
(	O
iv	*(struct(double,double,array(double),array(double),double,double,int,int,int))
->	O
fx	array(double)
,	O
&	O
(	O
iv	*(struct(double,double,array(double),array(double),double,double,int,int,int))
->	O
c	double
[	O
idx	array(int)
[	O
3	int
]	O
]	O
)	O
,	O
3	int
)	O
;	O
Vinvfx	(*(double),*(double),int)->(void)
(	O
iv	*(struct(double,double,array(double),array(double),double,double,int,int,int))
->	O
fx	array(double)
,	O
&	O
(	O
iv	*(struct(double,double,array(double),array(double),double,double,int,int,int))
->	O
c	double
[	O
idx	array(int)
[	O
2	int
]	O
]	O
)	O
,	O
2	int
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
nnans	int
;	O
i	long
++	O
)	O
iv	*(struct(double,double,array(double),array(double),double,double,int,int,int))
->	O
fx	array(double)
[	O
nans	*(int)
[	O
i	long
]	O
]	O
=	O
GSL_NAN	O
;	O
iv	*(struct(double,double,array(double),array(double),double,double,int,int,int))
->	O
a	double
=	O
a	double
;	O
iv	*(struct(double,double,array(double),array(double),double,double,int,int,int))
->	O
b	double
=	O
b	double
;	O
iv	*(struct(double,double,array(double),array(double),double,double,int,int,int))
->	O
depth	int
=	O
3	int
;	O
iv	*(struct(double,double,array(double),array(double),double,double,int,int,int))
->	O
rdepth	int
=	O
1	int
;	O
iv	*(struct(double,double,array(double),array(double),double,double,int,int,int))
->	O
ndiv	int
=	O
0	int
;	O
iv	*(struct(double,double,array(double),array(double),double,double,int,int,int))
->	O
igral	double
=	O
2	int
*	O
h	double
*	O
iv	*(struct(double,double,array(double),array(double),double,double,int,int,int))
->	O
c	double
[	O
idx	array(int)
[	O
3	int
]	O
]	O
*	O
w	*(struct(long,long,long,long,long,*(double),*(double),*(double),*(double),*(long),*(long)))
;	O
nc	double
=	O
0.0	int
;	O
for	O
(	O
i	long
=	O
n	int
[	O
2	int
]	O
+	O
1	int
;	O
i	long
<=	O
n	int
[	O
3	int
]	O
;	O
i	long
++	O
)	O
{	O
temp	double
=	O
iv	*(struct(double,double,array(double),array(double),double,double,int,int,int))
->	O
c	double
[	O
idx	array(int)
[	O
3	int
]	O
+	O
i	long
]	O
;	O
nc	double
+=	O
temp	double
*	O
temp	double
;	O
}	O
ncdiff	double
=	O
nc	double
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<=	O
n	int
[	O
2	int
]	O
;	O
i	long
++	O
)	O
{	O
temp	double
=	O
iv	*(struct(double,double,array(double),array(double),double,double,int,int,int))
->	O
c	double
[	O
idx	array(int)
[	O
2	int
]	O
+	O
i	long
]	O
-	O
iv	*(struct(double,double,array(double),array(double),double,double,int,int,int))
->	O
c	double
[	O
idx	array(int)
[	O
3	int
]	O
+	O
i	long
]	O
;	O
ncdiff	double
+=	O
temp	double
*	O
temp	double
;	O
nc	double
+=	O
iv	*(struct(double,double,array(double),array(double),double,double,int,int,int))
->	O
c	double
[	O
idx	array(int)
[	O
3	int
]	O
+	O
i	long
]	O
*	O
iv	*(struct(double,double,array(double),array(double),double,double,int,int,int))
->	O
c	double
[	O
idx	array(int)
[	O
3	int
]	O
+	O
i	long
]	O
;	O
}	O
ncdiff	double
=	O
sqrt	(double)->(double)
(	O
ncdiff	double
)	O
;	O
nc	double
=	O
sqrt	(double)->(double)
(	O
nc	double
)	O
;	O
iv	*(struct(double,double,array(double),array(double),double,double,int,int,int))
->	O
err	double
=	O
ncdiff	double
*	O
2	int
*	O
h	double
;	O
if	O
(	O
ncdiff	double
/	O
nc	double
>	O
0.1	int
&&	O
iv	*(struct(double,double,array(double),array(double),double,double,int,int,int))
->	O
err	double
<	O
2	int
*	O
h	double
*	O
nc	double
)	O
iv	*(struct(double,double,array(double),array(double),double,double,int,int,int))
->	O
err	double
=	O
2	int
*	O
h	double
*	O
nc	double
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
ws	*(struct(long,*(struct(double,double,array(double),array(double),double,double,int,int,int)),*(long)))
->	O
size	long
;	O
i	long
++	O
)	O
ws	*(struct(long,*(struct(double,double,array(double),array(double),double,double,int,int,int)),*(long)))
->	O
heap	*(long)
[	O
i	long
]	O
=	O
i	long
;	O
igral	double
=	O
iv	*(struct(double,double,array(double),array(double),double,double,int,int,int))
->	O
igral	double
;	O
err	double
=	O
iv	*(struct(double,double,array(double),array(double),double,double,int,int,int))
->	O
err	double
;	O
nivals	int
=	O
1	int
;	O
igral_final	double
=	O
0.0	int
;	O
err_final	double
=	O
0.0	int
;	O
err_excess	double
=	O
0.0	int
;	O
while	O
(	O
nivals	int
>	O
0	int
&&	O
err	double
>	O
0.0	int
&&	O
!	O
(	O
err	double
<=	O
fabs	(double)->(double)
(	O
igral	double
)	O
*	O
epsrel	double
||	O
err	double
<=	O
epsabs	double
)	O
&&	O
!	O
(	O
err_final	double
>	O
fabs	(double)->(double)
(	O
igral	double
)	O
*	O
epsrel	double
&&	O
err	double
-	O
err_final	double
<	O
fabs	(double)->(double)
(	O
igral	double
)	O
*	O
epsrel	double
)	O
&&	O
!	O
(	O
err_final	double
>	O
epsabs	double
&&	O
err	double
-	O
err_final	double
<	O
epsabs	double
)	O
)	O
{	O
iv	*(struct(double,double,array(double),array(double),double,double,int,int,int))
=	O
&	O
(	O
ws	*(struct(long,*(struct(double,double,array(double),array(double),double,double,int,int,int)),*(long)))
->	O
ivals	*(struct(double,double,array(double),array(double),double,double,int,int,int))
[	O
ws	*(struct(long,*(struct(double,double,array(double),array(double),double,double,int,int,int)),*(long)))
->	O
heap	*(long)
[	O
0	int
]	O
]	O
)	O
;	O
m	double
=	O
(	O
iv	*(struct(double,double,array(double),array(double),double,double,int,int,int))
->	O
a	double
+	O
iv	*(struct(double,double,array(double),array(double),double,double,int,int,int))
->	O
b	double
)	O
/	O
2	int
;	O
h	double
=	O
(	O
iv	*(struct(double,double,array(double),array(double),double,double,int,int,int))
->	O
b	double
-	O
iv	*(struct(double,double,array(double),array(double),double,double,int,int,int))
->	O
a	double
)	O
/	O
2	int
;	O
if	O
(	O
iv	*(struct(double,double,array(double),array(double),double,double,int,int,int))
->	O
depth	int
<	O
3	int
)	O
{	O
d	int
=	O
++	O
iv	*(struct(double,double,array(double),array(double),double,double,int,int,int))
->	O
depth	int
;	O
for	O
(	O
i	long
=	O
skip	array(int)
[	O
d	int
]	O
;	O
i	long
<=	O
32	int
;	O
i	long
+=	O
2	int
*	O
skip	array(int)
[	O
d	int
]	O
)	O
{	O
iv	*(struct(double,double,array(double),array(double),double,double,int,int,int))
->	O
fx	array(double)
[	O
i	long
]	O
=	O
GSL_FN_EVAL	O
(	O
f	*(double)
,	O
m	double
+	O
xi	*(double)
[	O
i	long
]	O
*	O
h	double
)	O
;	O
neval	*(long)
++	O
;	O
}	O
nnans	int
=	O
0	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<=	O
32	int
;	O
i	long
+=	O
skip	array(int)
[	O
d	int
]	O
)	O
{	O
if	O
(	O
!	O
gsl_finite	(double)->(int)
(	O
iv	*(struct(double,double,array(double),array(double),double,double,int,int,int))
->	O
fx	array(double)
[	O
i	long
]	O
)	O
)	O
{	O
nans	*(int)
[	O
nnans	int
++	O
]	O
=	O
i	long
;	O
iv	*(struct(double,double,array(double),array(double),double,double,int,int,int))
->	O
fx	array(double)
[	O
i	long
]	O
=	O
0.0	int
;	O
}	O
}	O
Vinvfx	(*(double),*(double),int)->(void)
(	O
iv	*(struct(double,double,array(double),array(double),double,double,int,int,int))
->	O
fx	array(double)
,	O
&	O
(	O
iv	*(struct(double,double,array(double),array(double),double,double,int,int,int))
->	O
c	double
[	O
idx	array(int)
[	O
d	int
]	O
]	O
)	O
,	O
d	int
)	O
;	O
if	O
(	O
nnans	int
>	O
0	int
)	O
{	O
downdate	(*(double),int,int,*(int),int)->(void)
(	O
&	O
(	O
iv	*(struct(double,double,array(double),array(double),double,double,int,int,int))
->	O
c	double
[	O
idx	array(int)
[	O
d	int
]	O
]	O
)	O
,	O
n	int
[	O
d	int
]	O
,	O
d	int
,	O
nans	*(int)
,	O
nnans	int
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
nnans	int
;	O
i	long
++	O
)	O
iv	*(struct(double,double,array(double),array(double),double,double,int,int,int))
->	O
fx	array(double)
[	O
nans	*(int)
[	O
i	long
]	O
]	O
=	O
GSL_NAN	O
;	O
}	O
nc	double
=	O
0.0	int
;	O
for	O
(	O
i	long
=	O
n	int
[	O
d	int
-	O
1	int
]	O
+	O
1	int
;	O
i	long
<=	O
n	int
[	O
d	int
]	O
;	O
i	long
++	O
)	O
{	O
temp	double
=	O
iv	*(struct(double,double,array(double),array(double),double,double,int,int,int))
->	O
c	double
[	O
idx	array(int)
[	O
d	int
]	O
+	O
i	long
]	O
;	O
nc	double
+=	O
temp	double
*	O
temp	double
;	O
}	O
ncdiff	double
=	O
nc	double
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<=	O
n	int
[	O
d	int
-	O
1	int
]	O
;	O
i	long
++	O
)	O
{	O
temp	double
=	O
iv	*(struct(double,double,array(double),array(double),double,double,int,int,int))
->	O
c	double
[	O
idx	array(int)
[	O
d	int
-	O
1	int
]	O
+	O
i	long
]	O
-	O
iv	*(struct(double,double,array(double),array(double),double,double,int,int,int))
->	O
c	double
[	O
idx	array(int)
[	O
d	int
]	O
+	O
i	long
]	O
;	O
ncdiff	double
+=	O
temp	double
*	O
temp	double
;	O
nc	double
+=	O
iv	*(struct(double,double,array(double),array(double),double,double,int,int,int))
->	O
c	double
[	O
idx	array(int)
[	O
d	int
]	O
+	O
i	long
]	O
*	O
iv	*(struct(double,double,array(double),array(double),double,double,int,int,int))
->	O
c	double
[	O
idx	array(int)
[	O
d	int
]	O
+	O
i	long
]	O
;	O
}	O
ncdiff	double
=	O
sqrt	(double)->(double)
(	O
ncdiff	double
)	O
;	O
nc	double
=	O
sqrt	(double)->(double)
(	O
nc	double
)	O
;	O
iv	*(struct(double,double,array(double),array(double),double,double,int,int,int))
->	O
err	double
=	O
ncdiff	double
*	O
2	int
*	O
h	double
;	O
iv	*(struct(double,double,array(double),array(double),double,double,int,int,int))
->	O
igral	double
=	O
2	int
*	O
h	double
*	O
w	*(struct(long,long,long,long,long,*(double),*(double),*(double),*(double),*(long),*(long)))
*	O
iv	*(struct(double,double,array(double),array(double),double,double,int,int,int))
->	O
c	double
[	O
idx	array(int)
[	O
d	int
]	O
]	O
;	O
split	int
=	O
(	O
nc	double
>	O
0	int
&&	O
ncdiff	double
/	O
nc	double
>	O
0.1	int
)	O
;	O
}	O
else	O
{	O
split	int
=	O
1	int
;	O
}	O
if	O
(	O
(	O
m	double
+	O
h	double
*	O
xi	*(double)
[	O
0	int
]	O
)	O
>=	O
(	O
m	double
+	O
h	double
*	O
xi	*(double)
[	O
1	int
]	O
)	O
||	O
(	O
m	double
+	O
h	double
*	O
xi	*(double)
[	O
31	int
]	O
)	O
>=	O
(	O
m	double
+	O
h	double
*	O
xi	*(double)
[	O
32	int
]	O
)	O
||	O
iv	*(struct(double,double,array(double),array(double),double,double,int,int,int))
->	O
err	double
<	O
fabs	(double)->(double)
(	O
iv	*(struct(double,double,array(double),array(double),double,double,int,int,int))
->	O
igral	double
)	O
*	O
GSL_DBL_EPSILON	int
*	O
10	int
)	O
{	O
err_final	double
+=	O
iv	*(struct(double,double,array(double),array(double),double,double,int,int,int))
->	O
err	double
;	O
igral_final	double
+=	O
iv	*(struct(double,double,array(double),array(double),double,double,int,int,int))
->	O
igral	double
;	O
t	*(struct(double,double,int,int,array(double),array(double),array(double),array(double)))
=	O
ws	*(struct(long,*(struct(double,double,array(double),array(double),double,double,int,int,int)),*(long)))
->	O
heap	*(long)
[	O
nivals	int
-	O
1	int
]	O
;	O
ws	*(struct(long,*(struct(double,double,array(double),array(double),double,double,int,int,int)),*(long)))
->	O
heap	*(long)
[	O
nivals	int
-	O
1	int
]	O
=	O
ws	*(struct(long,*(struct(double,double,array(double),array(double),double,double,int,int,int)),*(long)))
->	O
heap	*(long)
[	O
0	int
]	O
;	O
ws	*(struct(long,*(struct(double,double,array(double),array(double),double,double,int,int,int)),*(long)))
->	O
heap	*(long)
[	O
0	int
]	O
=	O
t	*(struct(double,double,int,int,array(double),array(double),array(double),array(double)))
;	O
nivals	int
--	O
;	O
i	long
=	O
0	int
;	O
while	O
(	O
2	int
*	O
i	long
+	O
1	int
<	O
nivals	int
)	O
{	O
j	int
=	O
2	int
*	O
i	long
+	O
1	int
;	O
if	O
(	O
j	int
+	O
1	int
<	O
nivals	int
&&	O
ws	*(struct(long,*(struct(double,double,array(double),array(double),double,double,int,int,int)),*(long)))
->	O
ivals	*(struct(double,double,array(double),array(double),double,double,int,int,int))
[	O
ws	*(struct(long,*(struct(double,double,array(double),array(double),double,double,int,int,int)),*(long)))
->	O
heap	*(long)
[	O
j	int
+	O
1	int
]	O
]	O
.	O
err	double
>=	O
ws	*(struct(long,*(struct(double,double,array(double),array(double),double,double,int,int,int)),*(long)))
->	O
ivals	*(struct(double,double,array(double),array(double),double,double,int,int,int))
[	O
ws	*(struct(long,*(struct(double,double,array(double),array(double),double,double,int,int,int)),*(long)))
->	O
heap	*(long)
[	O
j	int
]	O
]	O
.	O
err	double
)	O
j	int
++	O
;	O
if	O
(	O
ws	*(struct(long,*(struct(double,double,array(double),array(double),double,double,int,int,int)),*(long)))
->	O
ivals	*(struct(double,double,array(double),array(double),double,double,int,int,int))
[	O
ws	*(struct(long,*(struct(double,double,array(double),array(double),double,double,int,int,int)),*(long)))
->	O
heap	*(long)
[	O
j	int
]	O
]	O
.	O
err	double
<=	O
ws	*(struct(long,*(struct(double,double,array(double),array(double),double,double,int,int,int)),*(long)))
->	O
ivals	*(struct(double,double,array(double),array(double),double,double,int,int,int))
[	O
ws	*(struct(long,*(struct(double,double,array(double),array(double),double,double,int,int,int)),*(long)))
->	O
heap	*(long)
[	O
i	long
]	O
]	O
.	O
err	double
)	O
break	O
;	O
else	O
{	O
t	*(struct(double,double,int,int,array(double),array(double),array(double),array(double)))
=	O
ws	*(struct(long,*(struct(double,double,array(double),array(double),double,double,int,int,int)),*(long)))
->	O
heap	*(long)
[	O
j	int
]	O
;	O
ws	*(struct(long,*(struct(double,double,array(double),array(double),double,double,int,int,int)),*(long)))
->	O
heap	*(long)
[	O
j	int
]	O
=	O
ws	*(struct(long,*(struct(double,double,array(double),array(double),double,double,int,int,int)),*(long)))
->	O
heap	*(long)
[	O
i	long
]	O
;	O
ws	*(struct(long,*(struct(double,double,array(double),array(double),double,double,int,int,int)),*(long)))
->	O
heap	*(long)
[	O
i	long
]	O
=	O
t	*(struct(double,double,int,int,array(double),array(double),array(double),array(double)))
;	O
i	long
=	O
j	int
;	O
}	O
}	O
}	O
else	O
if	O
(	O
split	int
)	O
{	O
d	int
=	O
iv	*(struct(double,double,array(double),array(double),double,double,int,int,int))
->	O
depth	int
;	O
ivl	*(struct(double,double,array(double),array(double),double,double,int,int,int))
=	O
&	O
(	O
ws	*(struct(long,*(struct(double,double,array(double),array(double),double,double,int,int,int)),*(long)))
->	O
ivals	*(struct(double,double,array(double),array(double),double,double,int,int,int))
[	O
ws	*(struct(long,*(struct(double,double,array(double),array(double),double,double,int,int,int)),*(long)))
->	O
heap	*(long)
[	O
nivals	int
++	O
]	O
]	O
)	O
;	O
ivl	*(struct(double,double,array(double),array(double),double,double,int,int,int))
->	O
a	double
=	O
iv	*(struct(double,double,array(double),array(double),double,double,int,int,int))
->	O
a	double
;	O
ivl	*(struct(double,double,array(double),array(double),double,double,int,int,int))
->	O
b	double
=	O
m	double
;	O
ivl	*(struct(double,double,array(double),array(double),double,double,int,int,int))
->	O
depth	int
=	O
0	int
;	O
ivl	*(struct(double,double,array(double),array(double),double,double,int,int,int))
->	O
rdepth	int
=	O
iv	*(struct(double,double,array(double),array(double),double,double,int,int,int))
->	O
rdepth	int
+	O
1	int
;	O
ivl	*(struct(double,double,array(double),array(double),double,double,int,int,int))
->	O
fx	array(double)
[	O
0	int
]	O
=	O
iv	*(struct(double,double,array(double),array(double),double,double,int,int,int))
->	O
fx	array(double)
[	O
0	int
]	O
;	O
ivl	*(struct(double,double,array(double),array(double),double,double,int,int,int))
->	O
fx	array(double)
[	O
32	int
]	O
=	O
iv	*(struct(double,double,array(double),array(double),double,double,int,int,int))
->	O
fx	array(double)
[	O
16	int
]	O
;	O
for	O
(	O
i	long
=	O
skip	array(int)
[	O
0	int
]	O
;	O
i	long
<	O
32	int
;	O
i	long
+=	O
skip	array(int)
[	O
0	int
]	O
)	O
{	O
ivl	*(struct(double,double,array(double),array(double),double,double,int,int,int))
->	O
fx	array(double)
[	O
i	long
]	O
=	O
GSL_FN_EVAL	O
(	O
f	*(double)
,	O
(	O
ivl	*(struct(double,double,array(double),array(double),double,double,int,int,int))
->	O
a	double
+	O
ivl	*(struct(double,double,array(double),array(double),double,double,int,int,int))
->	O
b	double
)	O
/	O
2	int
+	O
xi	*(double)
[	O
i	long
]	O
*	O
h	double
/	O
2	int
)	O
;	O
neval	*(long)
++	O
;	O
}	O
nnans	int
=	O
0	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<=	O
32	int
;	O
i	long
+=	O
skip	array(int)
[	O
0	int
]	O
)	O
{	O
if	O
(	O
!	O
gsl_finite	(double)->(int)
(	O
ivl	*(struct(double,double,array(double),array(double),double,double,int,int,int))
->	O
fx	array(double)
[	O
i	long
]	O
)	O
)	O
{	O
nans	*(int)
[	O
nnans	int
++	O
]	O
=	O
i	long
;	O
ivl	*(struct(double,double,array(double),array(double),double,double,int,int,int))
->	O
fx	array(double)
[	O
i	long
]	O
=	O
0.0	int
;	O
}	O
}	O
Vinvfx	(*(double),*(double),int)->(void)
(	O
ivl	*(struct(double,double,array(double),array(double),double,double,int,int,int))
->	O
fx	array(double)
,	O
ivl	*(struct(double,double,array(double),array(double),double,double,int,int,int))
->	O
c	double
,	O
0	int
)	O
;	O
if	O
(	O
nnans	int
>	O
0	int
)	O
{	O
downdate	(*(double),int,int,*(int),int)->(void)
(	O
ivl	*(struct(double,double,array(double),array(double),double,double,int,int,int))
->	O
c	double
,	O
n	int
[	O
0	int
]	O
,	O
0	int
,	O
nans	*(int)
,	O
nnans	int
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
nnans	int
;	O
i	long
++	O
)	O
ivl	*(struct(double,double,array(double),array(double),double,double,int,int,int))
->	O
fx	array(double)
[	O
nans	*(int)
[	O
i	long
]	O
]	O
=	O
GSL_NAN	O
;	O
}	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<=	O
n	int
[	O
d	int
]	O
;	O
i	long
++	O
)	O
{	O
ivl	*(struct(double,double,array(double),array(double),double,double,int,int,int))
->	O
c	double
[	O
idx	array(int)
[	O
d	int
]	O
+	O
i	long
]	O
=	O
0.0	int
;	O
for	O
(	O
j	int
=	O
i	long
;	O
j	int
<=	O
n	int
[	O
d	int
]	O
;	O
j	int
++	O
)	O
ivl	*(struct(double,double,array(double),array(double),double,double,int,int,int))
->	O
c	double
[	O
idx	array(int)
[	O
d	int
]	O
+	O
i	long
]	O
+=	O
Tleft	array(double)
[	O
i	long
*	O
33	int
+	O
j	int
]	O
*	O
iv	*(struct(double,double,array(double),array(double),double,double,int,int,int))
->	O
c	double
[	O
idx	array(int)
[	O
d	int
]	O
+	O
j	int
]	O
;	O
}	O
ncdiff	double
=	O
0.0	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<=	O
n	int
[	O
0	int
]	O
;	O
i	long
++	O
)	O
{	O
temp	double
=	O
ivl	*(struct(double,double,array(double),array(double),double,double,int,int,int))
->	O
c	double
[	O
i	long
]	O
-	O
ivl	*(struct(double,double,array(double),array(double),double,double,int,int,int))
->	O
c	double
[	O
idx	array(int)
[	O
d	int
]	O
+	O
i	long
]	O
;	O
ncdiff	double
+=	O
temp	double
*	O
temp	double
;	O
}	O
for	O
(	O
i	long
=	O
n	int
[	O
0	int
]	O
+	O
1	int
;	O
i	long
<=	O
n	int
[	O
d	int
]	O
;	O
i	long
++	O
)	O
{	O
temp	double
=	O
ivl	*(struct(double,double,array(double),array(double),double,double,int,int,int))
->	O
c	double
[	O
idx	array(int)
[	O
d	int
]	O
+	O
i	long
]	O
;	O
ncdiff	double
+=	O
temp	double
*	O
temp	double
;	O
}	O
ncdiff	double
=	O
sqrt	(double)->(double)
(	O
ncdiff	double
)	O
;	O
ivl	*(struct(double,double,array(double),array(double),double,double,int,int,int))
->	O
err	double
=	O
ncdiff	double
*	O
h	double
;	O
ivl	*(struct(double,double,array(double),array(double),double,double,int,int,int))
->	O
ndiv	int
=	O
iv	*(struct(double,double,array(double),array(double),double,double,int,int,int))
->	O
ndiv	int
+	O
(	O
fabs	(double)->(double)
(	O
iv	*(struct(double,double,array(double),array(double),double,double,int,int,int))
->	O
c	double
[	O
0	int
]	O
)	O
>	O
0	int
&&	O
ivl	*(struct(double,double,array(double),array(double),double,double,int,int,int))
->	O
c	double
[	O
0	int
]	O
/	O
iv	*(struct(double,double,array(double),array(double),double,double,int,int,int))
->	O
c	double
[	O
0	int
]	O
>	O
2	int
)	O
;	O
if	O
(	O
ivl	*(struct(double,double,array(double),array(double),double,double,int,int,int))
->	O
ndiv	int
>	O
ndiv_max	int
&&	O
2	int
*	O
ivl	*(struct(double,double,array(double),array(double),double,double,int,int,int))
->	O
ndiv	int
>	O
ivl	*(struct(double,double,array(double),array(double),double,double,int,int,int))
->	O
rdepth	int
)	O
{	O
*	O
result	*(double)
=	O
(	O
igral	double
>=	O
0	int
)	O
?	O
GSL_POSINF	O
:	O
GSL_NEGINF	O
;	O
if	O
(	O
nevals	*(long)
!=	O
NULL	O
)	O
*	O
nevals	*(long)
=	O
neval	*(long)
;	O
return	O
GSL_EDIVERGE	int
;	O
}	O
ivl	*(struct(double,double,array(double),array(double),double,double,int,int,int))
->	O
igral	double
=	O
h	double
*	O
w	*(struct(long,long,long,long,long,*(double),*(double),*(double),*(double),*(long),*(long)))
*	O
ivl	*(struct(double,double,array(double),array(double),double,double,int,int,int))
->	O
c	double
[	O
0	int
]	O
;	O
ivr	*(struct(double,double,array(double),array(double),double,double,int,int,int))
=	O
&	O
(	O
ws	*(struct(long,*(struct(double,double,array(double),array(double),double,double,int,int,int)),*(long)))
->	O
ivals	*(struct(double,double,array(double),array(double),double,double,int,int,int))
[	O
ws	*(struct(long,*(struct(double,double,array(double),array(double),double,double,int,int,int)),*(long)))
->	O
heap	*(long)
[	O
nivals	int
++	O
]	O
]	O
)	O
;	O
ivr	*(struct(double,double,array(double),array(double),double,double,int,int,int))
->	O
a	double
=	O
m	double
;	O
ivr	*(struct(double,double,array(double),array(double),double,double,int,int,int))
->	O
b	double
=	O
iv	*(struct(double,double,array(double),array(double),double,double,int,int,int))
->	O
b	double
;	O
ivr	*(struct(double,double,array(double),array(double),double,double,int,int,int))
->	O
depth	int
=	O
0	int
;	O
ivr	*(struct(double,double,array(double),array(double),double,double,int,int,int))
->	O
rdepth	int
=	O
iv	*(struct(double,double,array(double),array(double),double,double,int,int,int))
->	O
rdepth	int
+	O
1	int
;	O
ivr	*(struct(double,double,array(double),array(double),double,double,int,int,int))
->	O
fx	array(double)
[	O
0	int
]	O
=	O
iv	*(struct(double,double,array(double),array(double),double,double,int,int,int))
->	O
fx	array(double)
[	O
16	int
]	O
;	O
ivr	*(struct(double,double,array(double),array(double),double,double,int,int,int))
->	O
fx	array(double)
[	O
32	int
]	O
=	O
iv	*(struct(double,double,array(double),array(double),double,double,int,int,int))
->	O
fx	array(double)
[	O
32	int
]	O
;	O
for	O
(	O
i	long
=	O
skip	array(int)
[	O
0	int
]	O
;	O
i	long
<	O
32	int
;	O
i	long
+=	O
skip	array(int)
[	O
0	int
]	O
)	O
{	O
ivr	*(struct(double,double,array(double),array(double),double,double,int,int,int))
->	O
fx	array(double)
[	O
i	long
]	O
=	O
GSL_FN_EVAL	O
(	O
f	*(double)
,	O
(	O
ivr	*(struct(double,double,array(double),array(double),double,double,int,int,int))
->	O
a	double
+	O
ivr	*(struct(double,double,array(double),array(double),double,double,int,int,int))
->	O
b	double
)	O
/	O
2	int
+	O
xi	*(double)
[	O
i	long
]	O
*	O
h	double
/	O
2	int
)	O
;	O
neval	*(long)
++	O
;	O
}	O
nnans	int
=	O
0	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<=	O
32	int
;	O
i	long
+=	O
skip	array(int)
[	O
0	int
]	O
)	O
{	O
if	O
(	O
!	O
gsl_finite	(double)->(int)
(	O
ivr	*(struct(double,double,array(double),array(double),double,double,int,int,int))
->	O
fx	array(double)
[	O
i	long
]	O
)	O
)	O
{	O
nans	*(int)
[	O
nnans	int
++	O
]	O
=	O
i	long
;	O
ivr	*(struct(double,double,array(double),array(double),double,double,int,int,int))
->	O
fx	array(double)
[	O
i	long
]	O
=	O
0.0	int
;	O
}	O
}	O
Vinvfx	(*(double),*(double),int)->(void)
(	O
ivr	*(struct(double,double,array(double),array(double),double,double,int,int,int))
->	O
fx	array(double)
,	O
ivr	*(struct(double,double,array(double),array(double),double,double,int,int,int))
->	O
c	double
,	O
0	int
)	O
;	O
if	O
(	O
nnans	int
>	O
0	int
)	O
{	O
downdate	(*(double),int,int,*(int),int)->(void)
(	O
ivr	*(struct(double,double,array(double),array(double),double,double,int,int,int))
->	O
c	double
,	O
n	int
[	O
0	int
]	O
,	O
0	int
,	O
nans	*(int)
,	O
nnans	int
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
nnans	int
;	O
i	long
++	O
)	O
ivr	*(struct(double,double,array(double),array(double),double,double,int,int,int))
->	O
fx	array(double)
[	O
nans	*(int)
[	O
i	long
]	O
]	O
=	O
GSL_NAN	O
;	O
}	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<=	O
n	int
[	O
d	int
]	O
;	O
i	long
++	O
)	O
{	O
ivr	*(struct(double,double,array(double),array(double),double,double,int,int,int))
->	O
c	double
[	O
idx	array(int)
[	O
d	int
]	O
+	O
i	long
]	O
=	O
0.0	int
;	O
for	O
(	O
j	int
=	O
i	long
;	O
j	int
<=	O
n	int
[	O
d	int
]	O
;	O
j	int
++	O
)	O
ivr	*(struct(double,double,array(double),array(double),double,double,int,int,int))
->	O
c	double
[	O
idx	array(int)
[	O
d	int
]	O
+	O
i	long
]	O
+=	O
Tright	array(double)
[	O
i	long
*	O
33	int
+	O
j	int
]	O
*	O
iv	*(struct(double,double,array(double),array(double),double,double,int,int,int))
->	O
c	double
[	O
idx	array(int)
[	O
d	int
]	O
+	O
j	int
]	O
;	O
}	O
ncdiff	double
=	O
0.0	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<=	O
n	int
[	O
0	int
]	O
;	O
i	long
++	O
)	O
{	O
temp	double
=	O
ivr	*(struct(double,double,array(double),array(double),double,double,int,int,int))
->	O
c	double
[	O
i	long
]	O
-	O
ivr	*(struct(double,double,array(double),array(double),double,double,int,int,int))
->	O
c	double
[	O
idx	array(int)
[	O
d	int
]	O
+	O
i	long
]	O
;	O
ncdiff	double
+=	O
temp	double
*	O
temp	double
;	O
}	O
for	O
(	O
i	long
=	O
n	int
[	O
0	int
]	O
+	O
1	int
;	O
i	long
<=	O
n	int
[	O
d	int
]	O
;	O
i	long
++	O
)	O
{	O
temp	double
=	O
ivr	*(struct(double,double,array(double),array(double),double,double,int,int,int))
->	O
c	double
[	O
idx	array(int)
[	O
d	int
]	O
+	O
i	long
]	O
;	O
ncdiff	double
+=	O
temp	double
*	O
temp	double
;	O
}	O
ncdiff	double
=	O
sqrt	(double)->(double)
(	O
ncdiff	double
)	O
;	O
ivr	*(struct(double,double,array(double),array(double),double,double,int,int,int))
->	O
err	double
=	O
ncdiff	double
*	O
h	double
;	O
ivr	*(struct(double,double,array(double),array(double),double,double,int,int,int))
->	O
ndiv	int
=	O
iv	*(struct(double,double,array(double),array(double),double,double,int,int,int))
->	O
ndiv	int
+	O
(	O
fabs	(double)->(double)
(	O
iv	*(struct(double,double,array(double),array(double),double,double,int,int,int))
->	O
c	double
[	O
0	int
]	O
)	O
>	O
0	int
&&	O
ivr	*(struct(double,double,array(double),array(double),double,double,int,int,int))
->	O
c	double
[	O
0	int
]	O
/	O
iv	*(struct(double,double,array(double),array(double),double,double,int,int,int))
->	O
c	double
[	O
0	int
]	O
>	O
2	int
)	O
;	O
if	O
(	O
ivr	*(struct(double,double,array(double),array(double),double,double,int,int,int))
->	O
ndiv	int
>	O
ndiv_max	int
&&	O
2	int
*	O
ivr	*(struct(double,double,array(double),array(double),double,double,int,int,int))
->	O
ndiv	int
>	O
ivr	*(struct(double,double,array(double),array(double),double,double,int,int,int))
->	O
rdepth	int
)	O
{	O
*	O
result	*(double)
=	O
(	O
igral	double
>=	O
0	int
)	O
?	O
GSL_POSINF	O
:	O
GSL_NEGINF	O
;	O
if	O
(	O
nevals	*(long)
!=	O
NULL	O
)	O
*	O
nevals	*(long)
=	O
neval	*(long)
;	O
return	O
GSL_EDIVERGE	int
;	O
}	O
ivr	*(struct(double,double,array(double),array(double),double,double,int,int,int))
->	O
igral	double
=	O
h	double
*	O
w	*(struct(long,long,long,long,long,*(double),*(double),*(double),*(double),*(long),*(long)))
*	O
ivr	*(struct(double,double,array(double),array(double),double,double,int,int,int))
->	O
c	double
[	O
0	int
]	O
;	O
t	*(struct(double,double,int,int,array(double),array(double),array(double),array(double)))
=	O
ws	*(struct(long,*(struct(double,double,array(double),array(double),double,double,int,int,int)),*(long)))
->	O
heap	*(long)
[	O
nivals	int
-	O
1	int
]	O
;	O
ws	*(struct(long,*(struct(double,double,array(double),array(double),double,double,int,int,int)),*(long)))
->	O
heap	*(long)
[	O
nivals	int
-	O
1	int
]	O
=	O
ws	*(struct(long,*(struct(double,double,array(double),array(double),double,double,int,int,int)),*(long)))
->	O
heap	*(long)
[	O
0	int
]	O
;	O
ws	*(struct(long,*(struct(double,double,array(double),array(double),double,double,int,int,int)),*(long)))
->	O
heap	*(long)
[	O
0	int
]	O
=	O
t	*(struct(double,double,int,int,array(double),array(double),array(double),array(double)))
;	O
nivals	int
--	O
;	O
i	long
=	O
0	int
;	O
while	O
(	O
2	int
*	O
i	long
+	O
1	int
<	O
nivals	int
-	O
1	int
)	O
{	O
j	int
=	O
2	int
*	O
i	long
+	O
1	int
;	O
if	O
(	O
j	int
+	O
1	int
<	O
nivals	int
-	O
1	int
&&	O
ws	*(struct(long,*(struct(double,double,array(double),array(double),double,double,int,int,int)),*(long)))
->	O
ivals	*(struct(double,double,array(double),array(double),double,double,int,int,int))
[	O
ws	*(struct(long,*(struct(double,double,array(double),array(double),double,double,int,int,int)),*(long)))
->	O
heap	*(long)
[	O
j	int
+	O
1	int
]	O
]	O
.	O
err	double
>=	O
ws	*(struct(long,*(struct(double,double,array(double),array(double),double,double,int,int,int)),*(long)))
->	O
ivals	*(struct(double,double,array(double),array(double),double,double,int,int,int))
[	O
ws	*(struct(long,*(struct(double,double,array(double),array(double),double,double,int,int,int)),*(long)))
->	O
heap	*(long)
[	O
j	int
]	O
]	O
.	O
err	double
)	O
j	int
++	O
;	O
if	O
(	O
ws	*(struct(long,*(struct(double,double,array(double),array(double),double,double,int,int,int)),*(long)))
->	O
ivals	*(struct(double,double,array(double),array(double),double,double,int,int,int))
[	O
ws	*(struct(long,*(struct(double,double,array(double),array(double),double,double,int,int,int)),*(long)))
->	O
heap	*(long)
[	O
j	int
]	O
]	O
.	O
err	double
<=	O
ws	*(struct(long,*(struct(double,double,array(double),array(double),double,double,int,int,int)),*(long)))
->	O
ivals	*(struct(double,double,array(double),array(double),double,double,int,int,int))
[	O
ws	*(struct(long,*(struct(double,double,array(double),array(double),double,double,int,int,int)),*(long)))
->	O
heap	*(long)
[	O
i	long
]	O
]	O
.	O
err	double
)	O
break	O
;	O
else	O
{	O
t	*(struct(double,double,int,int,array(double),array(double),array(double),array(double)))
=	O
ws	*(struct(long,*(struct(double,double,array(double),array(double),double,double,int,int,int)),*(long)))
->	O
heap	*(long)
[	O
j	int
]	O
;	O
ws	*(struct(long,*(struct(double,double,array(double),array(double),double,double,int,int,int)),*(long)))
->	O
heap	*(long)
[	O
j	int
]	O
=	O
ws	*(struct(long,*(struct(double,double,array(double),array(double),double,double,int,int,int)),*(long)))
->	O
heap	*(long)
[	O
i	long
]	O
;	O
ws	*(struct(long,*(struct(double,double,array(double),array(double),double,double,int,int,int)),*(long)))
->	O
heap	*(long)
[	O
i	long
]	O
=	O
t	*(struct(double,double,int,int,array(double),array(double),array(double),array(double)))
;	O
i	long
=	O
j	int
;	O
}	O
}	O
i	long
=	O
nivals	int
-	O
1	int
;	O
while	O
(	O
i	long
>	O
0	int
)	O
{	O
j	int
=	O
(	O
i	long
-	O
1	int
)	O
/	O
2	int
;	O
if	O
(	O
ws	*(struct(long,*(struct(double,double,array(double),array(double),double,double,int,int,int)),*(long)))
->	O
ivals	*(struct(double,double,array(double),array(double),double,double,int,int,int))
[	O
ws	*(struct(long,*(struct(double,double,array(double),array(double),double,double,int,int,int)),*(long)))
->	O
heap	*(long)
[	O
j	int
]	O
]	O
.	O
err	double
<	O
ws	*(struct(long,*(struct(double,double,array(double),array(double),double,double,int,int,int)),*(long)))
->	O
ivals	*(struct(double,double,array(double),array(double),double,double,int,int,int))
[	O
ws	*(struct(long,*(struct(double,double,array(double),array(double),double,double,int,int,int)),*(long)))
->	O
heap	*(long)
[	O
i	long
]	O
]	O
.	O
err	double
)	O
{	O
t	*(struct(double,double,int,int,array(double),array(double),array(double),array(double)))
=	O
ws	*(struct(long,*(struct(double,double,array(double),array(double),double,double,int,int,int)),*(long)))
->	O
heap	*(long)
[	O
j	int
]	O
;	O
ws	*(struct(long,*(struct(double,double,array(double),array(double),double,double,int,int,int)),*(long)))
->	O
heap	*(long)
[	O
j	int
]	O
=	O
ws	*(struct(long,*(struct(double,double,array(double),array(double),double,double,int,int,int)),*(long)))
->	O
heap	*(long)
[	O
i	long
]	O
;	O
ws	*(struct(long,*(struct(double,double,array(double),array(double),double,double,int,int,int)),*(long)))
->	O
heap	*(long)
[	O
i	long
]	O
=	O
t	*(struct(double,double,int,int,array(double),array(double),array(double),array(double)))
;	O
i	long
=	O
j	int
;	O
}	O
else	O
break	O
;	O
}	O
}	O
else	O
{	O
i	long
=	O
0	int
;	O
while	O
(	O
2	int
*	O
i	long
+	O
1	int
<	O
nivals	int
)	O
{	O
j	int
=	O
2	int
*	O
i	long
+	O
1	int
;	O
if	O
(	O
j	int
+	O
1	int
<	O
nivals	int
&&	O
ws	*(struct(long,*(struct(double,double,array(double),array(double),double,double,int,int,int)),*(long)))
->	O
ivals	*(struct(double,double,array(double),array(double),double,double,int,int,int))
[	O
ws	*(struct(long,*(struct(double,double,array(double),array(double),double,double,int,int,int)),*(long)))
->	O
heap	*(long)
[	O
j	int
+	O
1	int
]	O
]	O
.	O
err	double
>=	O
ws	*(struct(long,*(struct(double,double,array(double),array(double),double,double,int,int,int)),*(long)))
->	O
ivals	*(struct(double,double,array(double),array(double),double,double,int,int,int))
[	O
ws	*(struct(long,*(struct(double,double,array(double),array(double),double,double,int,int,int)),*(long)))
->	O
heap	*(long)
[	O
j	int
]	O
]	O
.	O
err	double
)	O
j	int
++	O
;	O
if	O
(	O
ws	*(struct(long,*(struct(double,double,array(double),array(double),double,double,int,int,int)),*(long)))
->	O
ivals	*(struct(double,double,array(double),array(double),double,double,int,int,int))
[	O
ws	*(struct(long,*(struct(double,double,array(double),array(double),double,double,int,int,int)),*(long)))
->	O
heap	*(long)
[	O
j	int
]	O
]	O
.	O
err	double
<=	O
ws	*(struct(long,*(struct(double,double,array(double),array(double),double,double,int,int,int)),*(long)))
->	O
ivals	*(struct(double,double,array(double),array(double),double,double,int,int,int))
[	O
ws	*(struct(long,*(struct(double,double,array(double),array(double),double,double,int,int,int)),*(long)))
->	O
heap	*(long)
[	O
i	long
]	O
]	O
.	O
err	double
)	O
break	O
;	O
else	O
{	O
t	*(struct(double,double,int,int,array(double),array(double),array(double),array(double)))
=	O
ws	*(struct(long,*(struct(double,double,array(double),array(double),double,double,int,int,int)),*(long)))
->	O
heap	*(long)
[	O
j	int
]	O
;	O
ws	*(struct(long,*(struct(double,double,array(double),array(double),double,double,int,int,int)),*(long)))
->	O
heap	*(long)
[	O
j	int
]	O
=	O
ws	*(struct(long,*(struct(double,double,array(double),array(double),double,double,int,int,int)),*(long)))
->	O
heap	*(long)
[	O
i	long
]	O
;	O
ws	*(struct(long,*(struct(double,double,array(double),array(double),double,double,int,int,int)),*(long)))
->	O
heap	*(long)
[	O
i	long
]	O
=	O
t	*(struct(double,double,int,int,array(double),array(double),array(double),array(double)))
;	O
i	long
=	O
j	int
;	O
}	O
}	O
}	O
while	O
(	O
nivals	int
>	O
ws	*(struct(long,*(struct(double,double,array(double),array(double),double,double,int,int,int)),*(long)))
->	O
size	long
-	O
2	int
)	O
{	O
iv	*(struct(double,double,array(double),array(double),double,double,int,int,int))
=	O
&	O
(	O
ws	*(struct(long,*(struct(double,double,array(double),array(double),double,double,int,int,int)),*(long)))
->	O
ivals	*(struct(double,double,array(double),array(double),double,double,int,int,int))
[	O
ws	*(struct(long,*(struct(double,double,array(double),array(double),double,double,int,int,int)),*(long)))
->	O
heap	*(long)
[	O
nivals	int
-	O
1	int
]	O
]	O
)	O
;	O
err_final	double
+=	O
iv	*(struct(double,double,array(double),array(double),double,double,int,int,int))
->	O
err	double
;	O
igral_final	double
+=	O
iv	*(struct(double,double,array(double),array(double),double,double,int,int,int))
->	O
igral	double
;	O
nivals	int
--	O
;	O
}	O
igral	double
=	O
igral_final	double
;	O
err	double
=	O
err_final	double
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
nivals	int
;	O
i	long
++	O
)	O
{	O
igral	double
+=	O
ws	*(struct(long,*(struct(double,double,array(double),array(double),double,double,int,int,int)),*(long)))
->	O
ivals	*(struct(double,double,array(double),array(double),double,double,int,int,int))
[	O
ws	*(struct(long,*(struct(double,double,array(double),array(double),double,double,int,int,int)),*(long)))
->	O
heap	*(long)
[	O
i	long
]	O
]	O
.	O
igral	double
;	O
err	double
+=	O
ws	*(struct(long,*(struct(double,double,array(double),array(double),double,double,int,int,int)),*(long)))
->	O
ivals	*(struct(double,double,array(double),array(double),double,double,int,int,int))
[	O
ws	*(struct(long,*(struct(double,double,array(double),array(double),double,double,int,int,int)),*(long)))
->	O
heap	*(long)
[	O
i	long
]	O
]	O
.	O
err	double
;	O
}	O
}	O
*	O
result	*(double)
=	O
igral	double
;	O
if	O
(	O
abserr	*(double)
!=	O
NULL	O
)	O
*	O
abserr	*(double)
=	O
err	double
;	O
if	O
(	O
nevals	*(long)
!=	O
NULL	O
)	O
*	O
nevals	*(long)
=	O
neval	*(long)
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
