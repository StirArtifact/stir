struct	O
gnufdisk_stack	struct(*(void),int,int)
{	O
void	O
*	O
data	*(void)
;	O
int	O
size	int
;	O
int	O
index	(*(char),int)->(*(char))
;	O
}	O
;	O
struct	O
gnufdisk_stack	struct(*(void),int,int)
*	O
gnufdisk_stack_new	()->(*(struct))
(	O
void	O
)	O
{	O
struct	O
gnufdisk_stack	struct(*(void),int,int)
*	O
ret	*(struct(*(void),int,int))
;	O
int	O
err	int
;	O
if	O
(	O
(	O
ret	*(struct(*(void),int,int))
=	O
malloc	(long)->(*(void))
(	O
sizeof	O
(	O
struct	O
gnufdisk_stack	struct(*(void),int,int)
)	O
)	O
)	O
==	O
NULL	O
)	O
{	O
err	int
=	O
ENOMEM	int
;	O
goto	O
lb_out	O
;	O
}	O
memset	(*(void),int,long)->(*(void))
(	O
ret	*(struct(*(void),int,int))
,	O
0	int
,	O
sizeof	O
(	O
struct	O
gnufdisk_stack	struct(*(void),int,int)
)	O
)	O
;	O
lb_out	O
:	O
errno	O
=	O
err	int
;	O
return	O
ret	*(struct(*(void),int,int))
;	O
}	O
int	O
gnufdisk_stack_delete	(*(struct))->(int)
(	O
struct	O
gnufdisk_stack	struct(*(void),int,int)
*	O
_s	*(struct)
)	O
{	O
int	O
ret	*(struct(*(void),int,int))
;	O
int	O
err	int
;	O
if	O
(	O
gnufdisk_check_memory	(*(void),long,int)->(int)
(	O
_s	*(struct)
,	O
sizeof	O
(	O
struct	O
gnufdisk_stack	struct(*(void),int,int)
)	O
,	O
0	int
)	O
!=	O
0	int
)	O
{	O
err	int
=	O
errno	O
;	O
ret	*(struct(*(void),int,int))
=	O
-	O
1	int
;	O
goto	O
lb_out	O
;	O
}	O
if	O
(	O
_s	*(struct)
->	O
data	*(void)
)	O
{	O
if	O
(	O
gnufdisk_check_memory	(*(void),long,int)->(int)
(	O
_s	*(struct)
->	O
data	*(void)
,	O
_s	*(struct)
->	O
size	int
,	O
0	int
)	O
!=	O
0	int
)	O
{	O
err	int
=	O
errno	O
;	O
ret	*(struct(*(void),int,int))
=	O
-	O
1	int
;	O
goto	O
lb_out	O
;	O
}	O
free	(*(void))->(void)
(	O
_s	*(struct)
->	O
data	*(void)
)	O
;	O
_s	*(struct)
->	O
data	*(void)
=	O
NULL	O
;	O
}	O
free	(*(void))->(void)
(	O
_s	*(struct)
)	O
;	O
err	int
=	O
0	int
;	O
ret	*(struct(*(void),int,int))
=	O
0	int
;	O
lb_out	O
:	O
errno	O
=	O
err	int
;	O
return	O
ret	*(struct(*(void),int,int))
;	O
}	O
int	O
gnufdisk_stack_push	(*(struct),*(void),long)->(int)
(	O
struct	O
gnufdisk_stack	struct(*(void),int,int)
*	O
_s	*(struct)
,	O
void	O
*	O
_data	*(void)
,	O
size_t	long
_size	long
)	O
{	O
int	O
ret	*(struct(*(void),int,int))
;	O
int	O
err	int
;	O
if	O
(	O
gnufdisk_check_memory	(*(void),long,int)->(int)
(	O
_s	*(struct)
,	O
sizeof	O
(	O
struct	O
gnufdisk_stack	struct(*(void),int,int)
)	O
,	O
0	int
)	O
!=	O
0	int
)	O
{	O
err	int
=	O
errno	O
;	O
ret	*(struct(*(void),int,int))
=	O
-	O
1	int
;	O
goto	O
lb_out	O
;	O
}	O
else	O
if	O
(	O
gnufdisk_check_memory	(*(void),long,int)->(int)
(	O
_data	*(void)
,	O
_size	long
,	O
1	int
)	O
!=	O
0	int
)	O
{	O
err	int
=	O
EFAULT	int
;	O
ret	*(struct(*(void),int,int))
=	O
-	O
1	int
;	O
goto	O
lb_out	O
;	O
}	O
if	O
(	O
_size	long
>	O
_s	*(struct)
->	O
size	int
-	O
_s	*(struct)
->	O
index	(*(char),int)->(*(char))
)	O
{	O
void	O
*	O
data	*(void)
;	O
int	O
size	int
;	O
size	int
=	O
_s	*(struct)
->	O
size	int
+	O
32	int
;	O
if	O
(	O
(	O
data	*(void)
=	O
malloc	(long)->(*(void))
(	O
size	int
)	O
)	O
==	O
NULL	O
)	O
{	O
err	int
=	O
ENOMEM	int
;	O
ret	*(struct(*(void),int,int))
=	O
-	O
1	int
;	O
goto	O
lb_out	O
;	O
}	O
if	O
(	O
_s	*(struct)
->	O
data	*(void)
)	O
{	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
data	*(void)
,	O
_s	*(struct)
->	O
data	*(void)
,	O
_s	*(struct)
->	O
index	(*(char),int)->(*(char))
)	O
;	O
free	(*(void))->(void)
(	O
_s	*(struct)
->	O
data	*(void)
)	O
;	O
}	O
_s	*(struct)
->	O
data	*(void)
=	O
data	*(void)
;	O
_s	*(struct)
->	O
size	int
=	O
size	int
;	O
return	O
gnufdisk_stack_push	(*(struct),*(void),long)->(int)
(	O
_s	*(struct)
,	O
_data	*(void)
,	O
_size	long
)	O
;	O
}	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
_s	*(struct)
->	O
data	*(void)
+	O
_s	*(struct)
->	O
index	(*(char),int)->(*(char))
,	O
_data	*(void)
,	O
_size	long
)	O
;	O
_s	*(struct)
->	O
index	(*(char),int)->(*(char))
+=	O
_size	long
;	O
err	int
=	O
0	int
;	O
ret	*(struct(*(void),int,int))
=	O
0	int
;	O
lb_out	O
:	O
errno	O
=	O
err	int
;	O
return	O
ret	*(struct(*(void),int,int))
;	O
}	O
int	O
gnufdisk_stack_pop	(*(struct),*(void),long)->(int)
(	O
struct	O
gnufdisk_stack	struct(*(void),int,int)
*	O
_s	*(struct)
,	O
void	O
*	O
_dest	*(*(char))
,	O
size_t	long
_size	long
)	O
{	O
int	O
ret	*(struct(*(void),int,int))
;	O
int	O
err	int
;	O
if	O
(	O
gnufdisk_check_memory	(*(void),long,int)->(int)
(	O
_s	*(struct)
,	O
sizeof	O
(	O
struct	O
gnufdisk_stack	struct(*(void),int,int)
)	O
,	O
0	int
)	O
!=	O
0	int
||	O
(	O
_s	*(struct)
->	O
data	*(void)
&&	O
gnufdisk_check_memory	(*(void),long,int)->(int)
(	O
_s	*(struct)
->	O
data	*(void)
,	O
_s	*(struct)
->	O
size	int
,	O
0	int
)	O
!=	O
0	int
)	O
||	O
gnufdisk_check_memory	(*(void),long,int)->(int)
(	O
_dest	*(*(char))
,	O
_size	long
,	O
0	int
)	O
!=	O
0	int
)	O
{	O
err	int
=	O
errno	O
;	O
ret	*(struct(*(void),int,int))
=	O
-	O
1	int
;	O
goto	O
lb_out	O
;	O
}	O
else	O
if	O
(	O
_size	long
>	O
_s	*(struct)
->	O
index	(*(char),int)->(*(char))
)	O
{	O
err	int
=	O
ENOBUFS	int
;	O
ret	*(struct(*(void),int,int))
=	O
-	O
1	int
;	O
goto	O
lb_out	O
;	O
}	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
_dest	*(*(char))
,	O
_s	*(struct)
->	O
data	*(void)
+	O
(	O
_s	*(struct)
->	O
index	(*(char),int)->(*(char))
-	O
_size	long
)	O
,	O
_size	long
)	O
;	O
_s	*(struct)
->	O
index	(*(char),int)->(*(char))
-=	O
_size	long
;	O
ret	*(struct(*(void),int,int))
=	O
0	int
;	O
err	int
=	O
0	int
;	O
lb_out	O
:	O
errno	O
=	O
err	int
;	O
return	O
ret	*(struct(*(void),int,int))
;	O
}	O
