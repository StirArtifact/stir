int	O
mu_list_foreach_dir	(*(struct),int,*((*(void),*(void))->(int)),*(void))->(int)
(	O
mu_list_t	*(struct)
list	*(struct)
,	O
int	O
dir	int
,	O
mu_list_action_t	*((*(void),*(void))->(int))
action	*((*(void),*(void))->(int))
,	O
void	O
*	O
cbdata	*(void)
)	O
{	O
mu_iterator_t	*(struct)
itr	*(struct)
;	O
int	O
status	int
=	O
0	int
;	O
if	O
(	O
list	*(struct)
==	O
NULL	O
)	O
return	O
0	int
;	O
if	O
(	O
action	*((*(void),*(void))->(int))
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
status	int
=	O
mu_list_get_iterator	(*(struct),*(*(struct)))->(int)
(	O
list	*(struct)
,	O
&	O
itr	*(struct)
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
status	int
=	O
mu_iterator_ctl	(*(struct),enum(int,int,int,int,int,int,int,int,int,int),*(void))->(int)
(	O
itr	*(struct)
,	O
mu_itrctl_set_direction	int
,	O
&	O
dir	int
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
for	O
(	O
mu_iterator_first	(*(struct))->(int)
(	O
itr	*(struct)
)	O
;	O
!	O
mu_iterator_is_done	(*(struct))->(int)
(	O
itr	*(struct)
)	O
;	O
mu_iterator_next	(*(struct))->(int)
(	O
itr	*(struct)
)	O
)	O
{	O
void	O
*	O
item	*(void)
;	O
mu_iterator_current	(*(struct),*(*(void)))->(int)
(	O
itr	*(struct)
,	O
&	O
item	*(void)
)	O
;	O
if	O
(	O
(	O
status	int
=	O
action	*((*(void),*(void))->(int))
(	O
item	*(void)
,	O
cbdata	*(void)
)	O
)	O
)	O
break	O
;	O
}	O
mu_iterator_destroy	(*(*(struct)))->(void)
(	O
&	O
itr	*(struct)
)	O
;	O
return	O
status	int
;	O
}	O
