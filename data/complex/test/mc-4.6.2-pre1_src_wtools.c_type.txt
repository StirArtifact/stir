Listbox	struct(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))),*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),*(struct(*`,int,*`,*`,*`)),*(struct(*`,int,*`,*`,*`)),*(struct(*`,int,*`,*`,*`)),int,int,int,int,int,int,*((*`)->(int)),int,int)))
*	O
create_listbox_window	(int,int,*(char),*(char))->(*(struct(*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)),*(struct(struct`,*`,*`,*`,int,int,int,int,int,int,*`,int,int)))))
(	O
int	O
cols	int
,	O
int	O
lines	*(int)
,	O
const	O
char	O
*	O
title	*(char)
,	O
const	O
char	O
*	O
help	*(char)
)	O
{	O
int	O
xpos	int
,	O
ypos	int
,	O
len	int
;	O
Listbox	struct(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))),*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),*(struct(*`,int,*`,*`,*`)),*(struct(*`,int,*`,*`,*`)),*(struct(*`,int,*`,*`,*`)),int,int,int,int,int,int,*((*`)->(int)),int,int)))
*	O
listbox	*(struct(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`))),*(struct(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`),*(struct`),*(struct`),*(struct`),int,int,int,int,int,int,*((*`)->(int)),int,int))))
=	O
g_new	O
(	O
Listbox	struct(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))),*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),*(struct(*`,int,*`,*`,*`)),*(struct(*`,int,*`,*`,*`)),*(struct(*`,int,*`,*`,*`)),int,int,int,int,int,int,*((*`)->(int)),int,int)))
,	O
1	int
)	O
;	O
const	O
char	O
*	O
cancel_string	*(char)
=	O
_	O
(	O
"&Cancel"	*(char)
)	O
;	O
lines	*(int)
=	O
(	O
lines	*(int)
>	O
LINES	O
-	O
6	int
)	O
?	O
LINES	O
-	O
6	int
:	O
lines	*(int)
;	O
if	O
(	O
title	*(char)
&&	O
(	O
cols	int
<	O
(	O
len	int
=	O
strlen	(*(char))->(long)
(	O
title	*(char)
)	O
+	O
2	int
)	O
)	O
)	O
cols	int
=	O
len	int
;	O
if	O
(	O
cols	int
<	O
(	O
len	int
=	O
strlen	(*(char))->(long)
(	O
cancel_string	*(char)
)	O
+	O
3	int
)	O
)	O
cols	int
=	O
len	int
;	O
cols	int
=	O
cols	int
>	O
COLS	O
-	O
6	int
?	O
COLS	O
-	O
6	int
:	O
cols	int
;	O
xpos	int
=	O
(	O
COLS	O
-	O
cols	int
)	O
/	O
2	int
;	O
ypos	int
=	O
(	O
LINES	O
-	O
lines	*(int)
)	O
/	O
2	int
-	O
2	int
;	O
listbox	*(struct(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`))),*(struct(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`),*(struct`),*(struct`),*(struct`),int,int,int,int,int,int,*((*`)->(int)),int,int))))
->	O
dlg	*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
=	O
create_dlg	(int,int,int,int,*(int),*((*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(char),*(char),int)->(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))))
(	O
ypos	int
,	O
xpos	int
,	O
lines	*(int)
+	O
6	int
,	O
cols	int
+	O
4	int
,	O
dialog_colors	array(int)
,	O
NULL	O
,	O
help	*(char)
,	O
title	*(char)
,	O
DLG_CENTER	O
|	O
DLG_REVERSE	O
)	O
;	O
listbox	*(struct(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`))),*(struct(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`),*(struct`),*(struct`),*(struct`),int,int,int,int,int,int,*((*`)->(int)),int,int))))
->	O
list	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
=	O
listbox_new	(int,int,int,int,*((*(struct(struct`,*`,*`,*`,int,int,int,int,int,int,*`,int,int)))->(int)))->(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),*(struct(*`,int,*`,*`,*`)),*(struct(*`,int,*`,*`,*`)),*(struct(*`,int,*`,*`,*`)),int,int,int,int,int,int,*((*`)->(int)),int,int)))
(	O
2	int
,	O
2	int
,	O
cols	int
,	O
lines	*(int)
,	O
0	int
)	O
;	O
add_widget	(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))),*(void))->(int)
(	O
listbox	*(struct(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`))),*(struct(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`),*(struct`),*(struct`),*(struct`),int,int,int,int,int,int,*((*`)->(int)),int,int))))
->	O
dlg	*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
,	O
button_new	(int,int,int,int,*(char),*((int)->(int)))->(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),int,int,int,*(char),int,int,*((int)->(int)))))
(	O
lines	*(int)
+	O
3	int
,	O
(	O
cols	int
/	O
2	int
+	O
2	int
)	O
-	O
len	int
/	O
2	int
,	O
B_CANCEL	int
,	O
NORMAL_BUTTON	int
,	O
cancel_string	*(char)
,	O
0	int
)	O
)	O
;	O
add_widget	(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))),*(void))->(int)
(	O
listbox	*(struct(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`))),*(struct(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`),*(struct`),*(struct`),*(struct`),int,int,int,int,int,int,*((*`)->(int)),int,int))))
->	O
dlg	*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
,	O
listbox	*(struct(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`))),*(struct(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`),*(struct`),*(struct`),*(struct`),int,int,int,int,int,int,*((*`)->(int)),int,int))))
->	O
list	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
)	O
;	O
return	O
listbox	*(struct(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`))),*(struct(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`),*(struct`),*(struct`),*(struct`),int,int,int,int,int,int,*((*`)->(int)),int,int))))
;	O
}	O
int	O
run_listbox	(*(struct(*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)),*(struct(struct`,*`,*`,*`,int,int,int,int,int,int,*`,int,int)))))->(int)
(	O
Listbox	struct(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))),*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),*(struct(*`,int,*`,*`,*`)),*(struct(*`,int,*`,*`,*`)),*(struct(*`,int,*`,*`,*`)),int,int,int,int,int,int,*((*`)->(int)),int,int)))
*	O
l	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),int,int,int,int,int,int,*((*(struct`))->(int)),int,int))
)	O
{	O
int	O
val	int
;	O
run_dlg	(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))))->(int)
(	O
l	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),int,int,int,int,int,int,*((*(struct`))->(int)),int,int))
->	O
dlg	*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
)	O
;	O
if	O
(	O
l	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),int,int,int,int,int,int,*((*(struct`))->(int)),int,int))
->	O
dlg	*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
->	O
ret_value	int
==	O
B_CANCEL	int
)	O
val	int
=	O
-	O
1	int
;	O
else	O
val	int
=	O
l	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),int,int,int,int,int,int,*((*(struct`))->(int)),int,int))
->	O
list	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
->	O
pos	*(char)
;	O
destroy_dlg	(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))))->(void)
(	O
l	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),int,int,int,int,int,int,*((*(struct`))->(int)),int,int))
->	O
dlg	*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
)	O
;	O
g_free	(*(void))->(void)
(	O
l	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),int,int,int,int,int,int,*((*(struct`))->(int)),int,int))
)	O
;	O
return	O
val	int
;	O
}	O
static	O
Dlg_head	struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct),*((*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`))),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`))))))
*	O
last_query_dlg	*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
;	O
static	O
int	O
sel_pos	int
=	O
0	int
;	O
int	O
query_dialog	(*(char),*(char),int,int)->(int)
(	O
const	O
char	O
*	O
header	*(char)
,	O
const	O
char	O
*	O
text	*(char)
,	O
int	O
flags	enum(int,int,int,int)
,	O
int	O
count	int
,	O
...	O
)	O
{	O
va_list	array(struct(int,int,*(void),*(void)))
ap	array(struct(int,int,*(void),*(void)))
;	O
Dlg_head	struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct),*((*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`))),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`))))))
*	O
query_dlg	*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
;	O
WButton	struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))),*(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))),*((*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*(struct(int,int,int,enum(int,int,int,int,int,int,int,int,int))),*(void))->(int)),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))))),int,int,int,*(char),int,int,*((int)->(int)))
*	O
button	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,int,int,*(char),int,int,*((int)->(int))))
;	O
WButton	struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))),*(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))),*((*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*(struct(int,int,int,enum(int,int,int,int,int,int,int,int,int))),*(void))->(int)),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))))),int,int,int,*(char),int,int,*((int)->(int)))
*	O
defbutton	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,int,int,*(char),int,int,*((int)->(int))))
=	O
NULL	O
;	O
int	O
win_len	int
=	O
0	int
;	O
int	O
i	array(int)
;	O
int	O
result	long
=	O
-	O
1	int
;	O
int	O
xpos	int
,	O
ypos	int
;	O
int	O
cols	int
,	O
lines	*(int)
;	O
char	O
*	O
cur_name	*(char)
;	O
static	O
const	O
int	O
*	O
query_colors	*(int)
;	O
if	O
(	O
flags	enum(int,int,int,int)
&	O
D_ERROR	int
)	O
query_colors	*(int)
=	O
alarm_colors	array(int)
;	O
else	O
query_colors	*(int)
=	O
dialog_colors	array(int)
;	O
if	O
(	O
header	*(char)
==	O
MSG_ERROR	O
)	O
header	*(char)
=	O
_	O
(	O
"Error"	*(char)
)	O
;	O
if	O
(	O
count	int
>	O
0	int
)	O
{	O
va_start	O
(	O
ap	array(struct(int,int,*(void),*(void)))
,	O
count	int
)	O
;	O
for	O
(	O
i	array(int)
=	O
0	int
;	O
i	array(int)
<	O
count	int
;	O
i	array(int)
++	O
)	O
{	O
char	O
*	O
cp	*(char)
=	O
va_arg	O
(	O
ap	array(struct(int,int,*(void),*(void)))
,	O
char	O
*	O
)	O
;	O
win_len	int
+=	O
strlen	(*(char))->(long)
(	O
cp	*(char)
)	O
+	O
6	int
;	O
if	O
(	O
strchr	(*(char),int)->(*(char))
(	O
cp	*(char)
,	O
'&'	O
)	O
!=	O
NULL	O
)	O
win_len	int
--	O
;	O
}	O
va_end	O
(	O
ap	array(struct(int,int,*(void),*(void)))
)	O
;	O
}	O
msglen	(*(char),*(int),*(int))->(void)
(	O
text	*(char)
,	O
&	O
lines	*(int)
,	O
&	O
cols	int
)	O
;	O
cols	int
=	O
6	int
+	O
max	long
(	O
win_len	int
,	O
max	long
(	O
(	O
int	O
)	O
strlen	(*(char))->(long)
(	O
header	*(char)
)	O
,	O
cols	int
)	O
)	O
;	O
lines	*(int)
+=	O
4	int
+	O
(	O
count	int
>	O
0	int
?	O
2	int
:	O
0	int
)	O
;	O
xpos	int
=	O
COLS	O
/	O
2	int
-	O
cols	int
/	O
2	int
;	O
ypos	int
=	O
LINES	O
/	O
3	int
-	O
(	O
lines	*(int)
-	O
3	int
)	O
/	O
2	int
;	O
query_dlg	*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
=	O
create_dlg	(int,int,int,int,*(int),*((*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(char),*(char),int)->(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))))
(	O
ypos	int
,	O
xpos	int
,	O
lines	*(int)
,	O
cols	int
,	O
query_colors	*(int)
,	O
NULL	O
,	O
"[QueryBox]"	*(char)
,	O
header	*(char)
,	O
DLG_NONE	O
)	O
;	O
if	O
(	O
count	int
>	O
0	int
)	O
{	O
cols	int
=	O
(	O
cols	int
-	O
win_len	int
-	O
2	int
)	O
/	O
2	int
+	O
2	int
;	O
va_start	O
(	O
ap	array(struct(int,int,*(void),*(void)))
,	O
count	int
)	O
;	O
for	O
(	O
i	array(int)
=	O
0	int
;	O
i	array(int)
<	O
count	int
;	O
i	array(int)
++	O
)	O
{	O
cur_name	*(char)
=	O
va_arg	O
(	O
ap	array(struct(int,int,*(void),*(void)))
,	O
char	O
*	O
)	O
;	O
xpos	int
=	O
strlen	(*(char))->(long)
(	O
cur_name	*(char)
)	O
+	O
6	int
;	O
if	O
(	O
strchr	(*(char),int)->(*(char))
(	O
cur_name	*(char)
,	O
'&'	O
)	O
!=	O
NULL	O
)	O
xpos	int
--	O
;	O
button	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,int,int,*(char),int,int,*((int)->(int))))
=	O
button_new	(int,int,int,int,*(char),*((int)->(int)))->(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),int,int,int,*(char),int,int,*((int)->(int)))))
(	O
lines	*(int)
-	O
3	int
,	O
cols	int
,	O
B_USER	int
+	O
i	array(int)
,	O
NORMAL_BUTTON	int
,	O
cur_name	*(char)
,	O
0	int
)	O
;	O
add_widget	(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))),*(void))->(int)
(	O
query_dlg	*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
,	O
button	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,int,int,*(char),int,int,*((int)->(int))))
)	O
;	O
cols	int
+=	O
xpos	int
;	O
if	O
(	O
i	array(int)
==	O
sel_pos	int
)	O
defbutton	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,int,int,*(char),int,int,*((int)->(int))))
=	O
button	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,int,int,*(char),int,int,*((int)->(int))))
;	O
}	O
va_end	O
(	O
ap	array(struct(int,int,*(void),*(void)))
)	O
;	O
add_widget	(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))),*(void))->(int)
(	O
query_dlg	*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
,	O
label_new	(int,int,*(char))->(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),int,*(char),int)))
(	O
2	int
,	O
3	int
,	O
text	*(char)
)	O
)	O
;	O
if	O
(	O
defbutton	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,int,int,*(char),int,int,*((int)->(int))))
)	O
dlg_select_widget	(*(void))->(void)
(	O
defbutton	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,int,int,*(char),int,int,*((int)->(int))))
)	O
;	O
run_dlg	(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))))->(int)
(	O
query_dlg	*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
)	O
;	O
switch	O
(	O
query_dlg	*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
->	O
ret_value	int
)	O
{	O
case	O
B_CANCEL	int
:	O
break	O
;	O
default	O
:	O
result	long
=	O
query_dlg	*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
->	O
ret_value	int
-	O
B_USER	int
;	O
}	O
destroy_dlg	(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))))->(void)
(	O
query_dlg	*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
)	O
;	O
}	O
else	O
{	O
add_widget	(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))),*(void))->(int)
(	O
query_dlg	*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
,	O
label_new	(int,int,*(char))->(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),int,*(char),int)))
(	O
2	int
,	O
3	int
,	O
text	*(char)
)	O
)	O
;	O
add_widget	(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))),*(void))->(int)
(	O
query_dlg	*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
,	O
button_new	(int,int,int,int,*(char),*((int)->(int)))->(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),int,int,int,*(char),int,int,*((int)->(int)))))
(	O
0	int
,	O
0	int
,	O
0	int
,	O
HIDDEN_BUTTON	int
,	O
"-"	*(char)
,	O
0	int
)	O
)	O
;	O
last_query_dlg	*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
=	O
query_dlg	*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
;	O
}	O
sel_pos	int
=	O
0	int
;	O
return	O
result	long
;	O
}	O
void	O
query_set_sel	(int)->(void)
(	O
int	O
new_sel	int
)	O
{	O
sel_pos	int
=	O
new_sel	int
;	O
}	O
static	O
struct	O
Dlg_head	struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct),*((*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`))),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`))))))
*	O
do_create_message	(int,*(char),*(char))->(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))))
(	O
int	O
flags	enum(int,int,int,int)
,	O
const	O
char	O
*	O
title	*(char)
,	O
const	O
char	O
*	O
text	*(char)
)	O
{	O
char	O
*	O
p	*(void)
;	O
Dlg_head	struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct),*((*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`))),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`))))))
*	O
d	double
;	O
p	*(void)
=	O
g_strconcat	(*(char))->(*(char))
(	O
"\n"	*(char)
,	O
text	*(char)
,	O
"\n"	*(char)
,	O
(	O
char	O
*	O
)	O
NULL	O
)	O
;	O
query_dialog	(*(char),*(char),int,int)->(int)
(	O
title	*(char)
,	O
p	*(void)
,	O
flags	enum(int,int,int,int)
,	O
0	int
)	O
;	O
d	double
=	O
last_query_dlg	*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
;	O
init_dlg	(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))))->(void)
(	O
d	double
)	O
;	O
g_free	(*(void))->(void)
(	O
p	*(void)
)	O
;	O
return	O
d	double
;	O
}	O
struct	O
Dlg_head	struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct),*((*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`))),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`))))))
*	O
create_message	(int,*(char),*(char))->(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))))
(	O
int	O
flags	enum(int,int,int,int)
,	O
const	O
char	O
*	O
title	*(char)
,	O
const	O
char	O
*	O
text	*(char)
,	O
...	O
)	O
{	O
va_list	array(struct(int,int,*(void),*(void)))
args	array(struct(int,int,*(void),*(void)))
;	O
Dlg_head	struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct),*((*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`))),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`))))))
*	O
d	double
;	O
char	O
*	O
p	*(void)
;	O
va_start	O
(	O
args	array(struct(int,int,*(void),*(void)))
,	O
text	*(char)
)	O
;	O
p	*(void)
=	O
g_strdup_vprintf	(*(char),array(struct(int,int,*(void),*(void))))->(*(char))
(	O
text	*(char)
,	O
args	array(struct(int,int,*(void),*(void)))
)	O
;	O
va_end	O
(	O
args	array(struct(int,int,*(void),*(void)))
)	O
;	O
d	double
=	O
do_create_message	(int,*(char),*(char))->(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))))
(	O
flags	enum(int,int,int,int)
,	O
title	*(char)
,	O
p	*(void)
)	O
;	O
g_free	(*(void))->(void)
(	O
p	*(void)
)	O
;	O
return	O
d	double
;	O
}	O
static	O
void	O
fg_message	(int,*(char),*(char))->(void)
(	O
int	O
flags	enum(int,int,int,int)
,	O
const	O
char	O
*	O
title	*(char)
,	O
const	O
char	O
*	O
text	*(char)
)	O
{	O
Dlg_head	struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct),*((*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`))),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`))))))
*	O
d	double
;	O
d	double
=	O
do_create_message	(int,*(char),*(char))->(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))))
(	O
flags	enum(int,int,int,int)
,	O
title	*(char)
,	O
text	*(char)
)	O
;	O
mi_getch	()->(int)
(	O
)	O
;	O
dlg_run_done	(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))))->(void)
(	O
d	double
)	O
;	O
destroy_dlg	(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))))->(void)
(	O
d	double
)	O
;	O
}	O
static	O
void	O
bg_message	(int,*(int),*(char),*(char))->(void)
(	O
int	O
dummy	array(*(void))
,	O
int	O
*	O
flags	enum(int,int,int,int)
,	O
char	O
*	O
title	*(char)
,	O
const	O
char	O
*	O
text	*(char)
)	O
{	O
(	O
void	O
)	O
dummy	array(*(void))
;	O
title	*(char)
=	O
g_strconcat	(*(char))->(*(char))
(	O
_	O
(	O
"Background process:"	*(char)
)	O
,	O
" "	*(char)
,	O
title	*(char)
,	O
(	O
char	O
*	O
)	O
NULL	O
)	O
;	O
fg_message	(int,*(char),*(char))->(void)
(	O
*	O
flags	enum(int,int,int,int)
,	O
title	*(char)
,	O
text	*(char)
)	O
;	O
g_free	(*(void))->(void)
(	O
title	*(char)
)	O
;	O
}	O
void	O
message	*(char)
(	O
int	O
flags	enum(int,int,int,int)
,	O
const	O
char	O
*	O
title	*(char)
,	O
const	O
char	O
*	O
text	*(char)
,	O
...	O
)	O
{	O
char	O
*	O
p	*(void)
;	O
va_list	array(struct(int,int,*(void),*(void)))
ap	array(struct(int,int,*(void),*(void)))
;	O
va_start	O
(	O
ap	array(struct(int,int,*(void),*(void)))
,	O
text	*(char)
)	O
;	O
p	*(void)
=	O
g_strdup_vprintf	(*(char),array(struct(int,int,*(void),*(void))))->(*(char))
(	O
text	*(char)
,	O
ap	array(struct(int,int,*(void),*(void)))
)	O
;	O
va_end	O
(	O
ap	array(struct(int,int,*(void),*(void)))
)	O
;	O
if	O
(	O
title	*(char)
==	O
MSG_ERROR	O
)	O
title	*(char)
=	O
_	O
(	O
"Error"	*(char)
)	O
;	O
if	O
(	O
we_are_background	int
)	O
{	O
parent_call	(*(void),*(struct),int)->(int)
(	O
(	O
void	O
*	O
)	O
bg_message	(int,*(int),*(char),*(char))->(void)
,	O
NULL	O
,	O
3	int
,	O
sizeof	O
(	O
flags	enum(int,int,int,int)
)	O
,	O
&	O
flags	enum(int,int,int,int)
,	O
strlen	(*(char))->(long)
(	O
title	*(char)
)	O
,	O
title	*(char)
,	O
strlen	(*(char))->(long)
(	O
p	*(void)
)	O
,	O
p	*(void)
)	O
;	O
}	O
else	O
fg_message	(int,*(char),*(char))->(void)
(	O
flags	enum(int,int,int,int)
,	O
title	*(char)
,	O
p	*(void)
)	O
;	O
g_free	(*(void))->(void)
(	O
p	*(void)
)	O
;	O
}	O
int	O
quick_dialog_skip	(*(struct(int,int,int,int,*(char),*(char),*(struct(int,int,int,int,int,*`,int,int,*`,*`,*`)),int)),int)->(int)
(	O
QuickDialog	struct(int,int,int,int,*(char),*(char),*(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char))),int)
*	O
qd	*(struct(int,int,int,int,*(char),*(char),*(struct(int,int,int,int,int,*(char),int,int,*(int),*(*`),*(char))),int))
,	O
int	O
nskip	int
)	O
{	O
Dlg_head	struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct),*((*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`))),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`))))))
*	O
dd	*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
;	O
void	O
*	O
widget	*(struct)
;	O
WRadio	struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))),*(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))),*((*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*(struct(int,int,int,enum(int,int,int,int,int,int,int,int,int))),*(void))->(int)),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))))),int,int,int,int,*(*(char)))
*	O
r	*(struct)
;	O
int	O
xpos	int
;	O
int	O
ypos	int
;	O
int	O
return_val	int
;	O
WInput	struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*(struct`),*(void))->(int)),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))),int,int,int,int,int,int,int,int,int,*(char),*(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`)))),int,*(*(char)),int,*(char))
*	O
input	*(int)
;	O
QuickWidget	struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char))
*	O
qw	*(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char)))
;	O
int	O
do_int	int
;	O
int	O
count	int
=	O
0	int
;	O
int	O
curr_widget	int
;	O
Widget	struct
*	O
*	O
widgets	*(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char)))
;	O
if	O
(	O
!	O
qd	*(struct(int,int,int,int,*(char),*(char),*(struct(int,int,int,int,int,*(char),int,int,*(int),*(*`),*(char))),int))
->	O
i18n	int
)	O
{	O
qd	*(struct(int,int,int,int,*(char),*(char),*(struct(int,int,int,int,int,*(char),int,int,*(int),*(*`),*(char))),int))
->	O
i18n	int
=	O
1	int
;	O
do_int	int
=	O
1	int
;	O
if	O
(	O
*	O
qd	*(struct(int,int,int,int,*(char),*(char),*(struct(int,int,int,int,int,*(char),int,int,*(int),*(*`),*(char))),int))
->	O
title	*(char)
)	O
qd	*(struct(int,int,int,int,*(char),*(char),*(struct(int,int,int,int,int,*(char),int,int,*(int),*(*`),*(char))),int))
->	O
title	*(char)
=	O
_	O
(	O
qd	*(struct(int,int,int,int,*(char),*(char),*(struct(int,int,int,int,int,*(char),int,int,*(int),*(*`),*(char))),int))
->	O
title	*(char)
)	O
;	O
}	O
else	O
do_int	int
=	O
0	int
;	O
if	O
(	O
qd	*(struct(int,int,int,int,*(char),*(char),*(struct(int,int,int,int,int,*(char),int,int,*(int),*(*`),*(char))),int))
->	O
xpos	int
==	O
-	O
1	int
)	O
dd	*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
=	O
create_dlg	(int,int,int,int,*(int),*((*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(char),*(char),int)->(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))))
(	O
0	int
,	O
0	int
,	O
qd	*(struct(int,int,int,int,*(char),*(char),*(struct(int,int,int,int,int,*(char),int,int,*(int),*(*`),*(char))),int))
->	O
ylen	int
,	O
qd	*(struct(int,int,int,int,*(char),*(char),*(struct(int,int,int,int,int,*(char),int,int,*(int),*(*`),*(char))),int))
->	O
xlen	int
,	O
dialog_colors	array(int)
,	O
NULL	O
,	O
qd	*(struct(int,int,int,int,*(char),*(char),*(struct(int,int,int,int,int,*(char),int,int,*(int),*(*`),*(char))),int))
->	O
help	*(char)
,	O
qd	*(struct(int,int,int,int,*(char),*(char),*(struct(int,int,int,int,int,*(char),int,int,*(int),*(*`),*(char))),int))
->	O
title	*(char)
,	O
DLG_CENTER	O
|	O
DLG_TRYUP	O
|	O
DLG_REVERSE	O
)	O
;	O
else	O
dd	*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
=	O
create_dlg	(int,int,int,int,*(int),*((*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(char),*(char),int)->(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))))
(	O
qd	*(struct(int,int,int,int,*(char),*(char),*(struct(int,int,int,int,int,*(char),int,int,*(int),*(*`),*(char))),int))
->	O
ypos	int
,	O
qd	*(struct(int,int,int,int,*(char),*(char),*(struct(int,int,int,int,int,*(char),int,int,*(int),*(*`),*(char))),int))
->	O
xpos	int
,	O
qd	*(struct(int,int,int,int,*(char),*(char),*(struct(int,int,int,int,int,*(char),int,int,*(int),*(*`),*(char))),int))
->	O
ylen	int
,	O
qd	*(struct(int,int,int,int,*(char),*(char),*(struct(int,int,int,int,int,*(char),int,int,*(int),*(*`),*(char))),int))
->	O
xlen	int
,	O
dialog_colors	array(int)
,	O
NULL	O
,	O
qd	*(struct(int,int,int,int,*(char),*(char),*(struct(int,int,int,int,int,*(char),int,int,*(int),*(*`),*(char))),int))
->	O
help	*(char)
,	O
qd	*(struct(int,int,int,int,*(char),*(char),*(struct(int,int,int,int,int,*(char),int,int,*(int),*(*`),*(char))),int))
->	O
title	*(char)
,	O
DLG_REVERSE	O
)	O
;	O
for	O
(	O
qw	*(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char)))
=	O
qd	*(struct(int,int,int,int,*(char),*(char),*(struct(int,int,int,int,int,*(char),int,int,*(int),*(*`),*(char))),int))
->	O
widgets	*(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char)))
;	O
qw	*(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char)))
->	O
widget_type	int
;	O
qw	*(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char)))
++	O
)	O
{	O
count	int
++	O
;	O
}	O
widgets	*(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char)))
=	O
(	O
Widget	struct
*	O
*	O
)	O
g_new	O
(	O
Widget	struct
*	O
,	O
count	int
)	O
;	O
for	O
(	O
curr_widget	int
=	O
0	int
,	O
qw	*(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char)))
=	O
qd	*(struct(int,int,int,int,*(char),*(char),*(struct(int,int,int,int,int,*(char),int,int,*(int),*(*`),*(char))),int))
->	O
widgets	*(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char)))
;	O
qw	*(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char)))
->	O
widget_type	int
;	O
qw	*(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char)))
++	O
)	O
{	O
xpos	int
=	O
(	O
qd	*(struct(int,int,int,int,*(char),*(char),*(struct(int,int,int,int,int,*(char),int,int,*(int),*(*`),*(char))),int))
->	O
xlen	int
*	O
qw	*(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char)))
->	O
relative_x	int
)	O
/	O
qw	*(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char)))
->	O
x_divisions	int
;	O
ypos	int
=	O
(	O
qd	*(struct(int,int,int,int,*(char),*(char),*(struct(int,int,int,int,int,*(char),int,int,*(int),*(*`),*(char))),int))
->	O
ylen	int
*	O
qw	*(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char)))
->	O
relative_y	int
)	O
/	O
qw	*(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char)))
->	O
y_divisions	int
;	O
switch	O
(	O
qw	*(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char)))
->	O
widget_type	int
)	O
{	O
case	O
quick_checkbox	int
:	O
widget	*(struct)
=	O
check_new	(int,int,int,*(char))->(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),int,*(char),int,int)))
(	O
ypos	int
,	O
xpos	int
,	O
*	O
qw	*(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char)))
->	O
result	long
,	O
I18N	O
(	O
qw	*(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char)))
->	O
text	*(char)
)	O
)	O
;	O
break	O
;	O
case	O
quick_radio	int
:	O
r	*(struct)
=	O
radio_new	(int,int,int,*(*(char)))->(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),int,int,int,int,*(*(char)))))
(	O
ypos	int
,	O
xpos	int
,	O
qw	*(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char)))
->	O
hotkey_pos	int
,	O
const_cast	O
(	O
const	O
char	O
*	O
*	O
,	O
qw	*(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char)))
->	O
str_result	*(*(char))
)	O
)	O
;	O
r	*(struct)
->	O
pos	*(char)
=	O
r	*(struct)
->	O
sel	int
=	O
qw	*(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char)))
->	O
value	*(void)
;	O
widget	*(struct)
=	O
r	*(struct)
;	O
break	O
;	O
case	O
quick_button	int
:	O
widget	*(struct)
=	O
button_new	(int,int,int,int,*(char),*((int)->(int)))->(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),int,int,int,*(char),int,int,*((int)->(int)))))
(	O
ypos	int
,	O
xpos	int
,	O
qw	*(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char)))
->	O
value	*(void)
,	O
(	O
qw	*(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char)))
->	O
value	*(void)
==	O
B_ENTER	int
)	O
?	O
DEFPUSH_BUTTON	int
:	O
NORMAL_BUTTON	int
,	O
I18N	O
(	O
qw	*(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char)))
->	O
text	*(char)
)	O
,	O
0	int
)	O
;	O
break	O
;	O
case	O
quick_input	int
:	O
input	*(int)
=	O
input_new	(int,int,int,int,*(char),*(char))->(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),int,int,int,int,int,int,int,int,int,*(char),*(struct(*`,*`,*`)),int,*(*(char)),int,*(char))))
(	O
ypos	int
,	O
xpos	int
,	O
INPUT_COLOR	O
,	O
qw	*(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char)))
->	O
hotkey_pos	int
,	O
qw	*(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char)))
->	O
text	*(char)
,	O
qw	*(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char)))
->	O
histname	*(char)
)	O
;	O
input	*(int)
->	O
is_password	int
=	O
qw	*(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char)))
->	O
value	*(void)
==	O
1	int
;	O
input	*(int)
->	O
point	int
=	O
0	int
;	O
if	O
(	O
qw	*(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char)))
->	O
value	*(void)
&	O
2	int
)	O
input	*(int)
->	O
completion_flags	int
|=	O
INPUT_COMPLETE_CD	int
;	O
widget	*(struct)
=	O
input	*(int)
;	O
break	O
;	O
case	O
quick_label	int
:	O
widget	*(struct)
=	O
label_new	(int,int,*(char))->(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),int,*(char),int)))
(	O
ypos	int
,	O
xpos	int
,	O
I18N	O
(	O
qw	*(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char)))
->	O
text	*(char)
)	O
)	O
;	O
break	O
;	O
default	O
:	O
widget	*(struct)
=	O
0	int
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"QuickWidget: unknown widget type\n"	*(char)
)	O
;	O
break	O
;	O
}	O
widgets	*(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char)))
[	O
curr_widget	int
++	O
]	O
=	O
widget	*(struct)
;	O
add_widget	(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))),*(void))->(int)
(	O
dd	*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
,	O
widget	*(struct)
)	O
;	O
}	O
while	O
(	O
nskip	int
--	O
)	O
dd	*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
->	O
current	*(struct)
=	O
dd	*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
->	O
current	*(struct)
->	O
next	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`)))))
;	O
run_dlg	(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))))->(int)
(	O
dd	*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
)	O
;	O
if	O
(	O
dd	*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
->	O
ret_value	int
!=	O
B_CANCEL	int
)	O
{	O
for	O
(	O
curr_widget	int
=	O
0	int
,	O
qw	*(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char)))
=	O
qd	*(struct(int,int,int,int,*(char),*(char),*(struct(int,int,int,int,int,*(char),int,int,*(int),*(*`),*(char))),int))
->	O
widgets	*(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char)))
;	O
qw	*(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char)))
->	O
widget_type	int
;	O
qw	*(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char)))
++	O
)	O
{	O
Widget	struct
*	O
w	*(int)
=	O
widgets	*(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char)))
[	O
curr_widget	int
++	O
]	O
;	O
switch	O
(	O
qw	*(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char)))
->	O
widget_type	int
)	O
{	O
case	O
quick_checkbox	int
:	O
*	O
qw	*(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char)))
->	O
result	long
=	O
(	O
(	O
WCheck	struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))),*(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))),*((*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*(struct(int,int,int,enum(int,int,int,int,int,int,int,int,int))),*(void))->(int)),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))))),int,*(char),int,int)
*	O
)	O
w	*(int)
)	O
->	O
state	*(int)
&	O
C_BOOL	int
;	O
break	O
;	O
case	O
quick_radio	int
:	O
*	O
qw	*(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char)))
->	O
result	long
=	O
(	O
(	O
WRadio	struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))),*(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))),*((*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*(struct(int,int,int,enum(int,int,int,int,int,int,int,int,int))),*(void))->(int)),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))))),int,int,int,int,*(*(char)))
*	O
)	O
w	*(int)
)	O
->	O
sel	int
;	O
break	O
;	O
case	O
quick_input	int
:	O
if	O
(	O
qw	*(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char)))
->	O
value	*(void)
&	O
2	int
)	O
*	O
qw	*(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char)))
->	O
str_result	*(*(char))
=	O
tilde_expand	(*(char))->(*(char))
(	O
(	O
(	O
WInput	struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*(struct`),*(void))->(int)),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))),int,int,int,int,int,int,int,int,int,*(char),*(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`)))),int,*(*(char)),int,*(char))
*	O
)	O
w	*(int)
)	O
->	O
buffer	*(char)
)	O
;	O
else	O
*	O
qw	*(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char)))
->	O
str_result	*(*(char))
=	O
g_strdup	(*(char))->(*(char))
(	O
(	O
(	O
WInput	struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*(struct`),*(void))->(int)),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))),int,int,int,int,int,int,int,int,int,*(char),*(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`)))),int,*(*(char)),int,*(char))
*	O
)	O
w	*(int)
)	O
->	O
buffer	*(char)
)	O
;	O
break	O
;	O
}	O
}	O
}	O
return_val	int
=	O
dd	*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
->	O
ret_value	int
;	O
destroy_dlg	(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))))->(void)
(	O
dd	*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
)	O
;	O
g_free	(*(void))->(void)
(	O
widgets	*(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char)))
)	O
;	O
return	O
return_val	int
;	O
}	O
int	O
quick_dialog	(*(struct(int,int,int,int,*(char),*(char),*(struct(int,int,int,int,int,*`,int,int,*`,*`,*`)),int)))->(int)
(	O
QuickDialog	struct(int,int,int,int,*(char),*(char),*(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char))),int)
*	O
qd	*(struct(int,int,int,int,*(char),*(char),*(struct(int,int,int,int,int,*(char),int,int,*(int),*(*`),*(char))),int))
)	O
{	O
return	O
quick_dialog_skip	(*(struct(int,int,int,int,*(char),*(char),*(struct(int,int,int,int,int,*`,int,int,*`,*`,*`)),int)),int)->(int)
(	O
qd	*(struct(int,int,int,int,*(char),*(char),*(struct(int,int,int,int,int,*(char),int,int,*(int),*(*`),*(char))),int))
,	O
0	int
)	O
;	O
}	O
static	O
char	O
*	O
fg_input_dialog_help	(*(char),*(char),*(char),*(char))->(*(char))
(	O
const	O
char	O
*	O
header	*(char)
,	O
const	O
char	O
*	O
text	*(char)
,	O
const	O
char	O
*	O
help	*(char)
,	O
const	O
char	O
*	O
def_text	*(char)
)	O
{	O
QuickDialog	struct(int,int,int,int,*(char),*(char),*(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char))),int)
Quick_input	struct(int,int,int,int,*(char),*(char),*(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char))),int)
;	O
QuickWidget	struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char))
quick_widgets	array(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char)))
[	O
]	O
=	O
{	O
{	O
quick_button	int
,	O
6	int
,	O
10	int
,	O
1	int
,	O
0	int
,	O
N_	O
(	O
"&Cancel"	*(char)
)	O
,	O
0	int
,	O
B_CANCEL	int
,	O
0	int
,	O
0	int
,	O
NULL	O
}	O
,	O
{	O
quick_button	int
,	O
3	int
,	O
10	int
,	O
1	int
,	O
0	int
,	O
N_	O
(	O
"&OK"	*(char)
)	O
,	O
0	int
,	O
B_ENTER	int
,	O
0	int
,	O
0	int
,	O
NULL	O
}	O
,	O
{	O
quick_input	int
,	O
4	int
,	O
80	int
,	O
0	int
,	O
0	int
,	O
""	*(char)
,	O
58	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
NULL	O
}	O
,	O
{	O
quick_label	int
,	O
4	int
,	O
80	int
,	O
2	int
,	O
0	int
,	O
""	*(char)
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
NULL	O
}	O
,	O
NULL_QuickWidget	O
}	O
;	O
int	O
len	int
;	O
int	O
i	array(int)
;	O
int	O
lines	*(int)
,	O
cols	int
;	O
int	O
ret	int
;	O
char	O
*	O
my_str	*(char)
;	O
char	O
histname	*(char)
[	O
64	int
]	O
=	O
"inp|"	*(char)
;	O
char	O
*	O
p_text	*(char)
;	O
g_strlcpy	(*(char),*(char),long)->(long)
(	O
histname	*(char)
+	O
3	int
,	O
header	*(char)
,	O
61	int
)	O
;	O
quick_widgets	array(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char)))
[	O
2	int
]	O
.	O
histname	*(char)
=	O
histname	*(char)
;	O
msglen	(*(char),*(int),*(int))->(void)
(	O
text	*(char)
,	O
&	O
lines	*(int)
,	O
&	O
cols	int
)	O
;	O
len	int
=	O
max	long
(	O
(	O
int	O
)	O
strlen	(*(char))->(long)
(	O
header	*(char)
)	O
,	O
cols	int
)	O
+	O
4	int
;	O
len	int
=	O
max	long
(	O
len	int
,	O
64	int
)	O
;	O
if	O
(	O
def_text	*(char)
==	O
INPUT_PASSWORD	O
)	O
{	O
quick_widgets	array(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char)))
[	O
INPUT_INDEX	int
]	O
.	O
value	*(void)
=	O
1	int
;	O
histname	*(char)
[	O
3	int
]	O
=	O
0	int
;	O
def_text	*(char)
=	O
""	*(char)
;	O
}	O
else	O
{	O
quick_widgets	array(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char)))
[	O
INPUT_INDEX	int
]	O
.	O
value	*(void)
=	O
0	int
;	O
}	O
quick_widgets	array(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char)))
[	O
0	int
]	O
.	O
text	*(char)
=	O
_	O
(	O
quick_widgets	array(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char)))
[	O
0	int
]	O
.	O
text	*(char)
)	O
;	O
quick_widgets	array(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char)))
[	O
1	int
]	O
.	O
text	*(char)
=	O
_	O
(	O
quick_widgets	array(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char)))
[	O
1	int
]	O
.	O
text	*(char)
)	O
;	O
quick_widgets	array(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char)))
[	O
0	int
]	O
.	O
relative_x	int
=	O
len	int
/	O
2	int
+	O
4	int
;	O
quick_widgets	array(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char)))
[	O
1	int
]	O
.	O
relative_x	int
=	O
len	int
/	O
2	int
-	O
(	O
strlen	(*(char))->(long)
(	O
quick_widgets	array(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char)))
[	O
1	int
]	O
.	O
text	*(char)
)	O
+	O
9	int
)	O
;	O
quick_widgets	array(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char)))
[	O
0	int
]	O
.	O
x_divisions	int
=	O
quick_widgets	array(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char)))
[	O
1	int
]	O
.	O
x_divisions	int
=	O
len	int
;	O
Quick_input	struct(int,int,int,int,*(char),*(char),*(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char))),int)
.	O
xlen	int
=	O
len	int
;	O
Quick_input	struct(int,int,int,int,*(char),*(char),*(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char))),int)
.	O
xpos	int
=	O
-	O
1	int
;	O
Quick_input	struct(int,int,int,int,*(char),*(char),*(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char))),int)
.	O
title	*(char)
=	O
header	*(char)
;	O
Quick_input	struct(int,int,int,int,*(char),*(char),*(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char))),int)
.	O
help	*(char)
=	O
help	*(char)
;	O
Quick_input	struct(int,int,int,int,*(char),*(char),*(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char))),int)
.	O
i18n	int
=	O
1	int
;	O
p_text	*(char)
=	O
g_strstrip	O
(	O
g_strdup	(*(char))->(*(char))
(	O
text	*(char)
)	O
)	O
;	O
quick_widgets	array(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char)))
[	O
INPUT_INDEX	int
+	O
1	int
]	O
.	O
text	*(char)
=	O
p_text	*(char)
;	O
quick_widgets	array(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char)))
[	O
INPUT_INDEX	int
]	O
.	O
text	*(char)
=	O
def_text	*(char)
;	O
for	O
(	O
i	array(int)
=	O
0	int
;	O
i	array(int)
<	O
4	int
;	O
i	array(int)
++	O
)	O
quick_widgets	array(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char)))
[	O
i	array(int)
]	O
.	O
y_divisions	int
=	O
lines	*(int)
+	O
6	int
;	O
Quick_input	struct(int,int,int,int,*(char),*(char),*(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char))),int)
.	O
ylen	int
=	O
lines	*(int)
+	O
6	int
;	O
for	O
(	O
i	array(int)
=	O
0	int
;	O
i	array(int)
<	O
3	int
;	O
i	array(int)
++	O
)	O
quick_widgets	array(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char)))
[	O
i	array(int)
]	O
.	O
relative_y	int
+=	O
2	int
+	O
lines	*(int)
;	O
quick_widgets	array(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char)))
[	O
INPUT_INDEX	int
]	O
.	O
str_result	*(*(char))
=	O
&	O
my_str	*(char)
;	O
Quick_input	struct(int,int,int,int,*(char),*(char),*(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char))),int)
.	O
widgets	*(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char)))
=	O
quick_widgets	array(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char)))
;	O
ret	int
=	O
quick_dialog	(*(struct(int,int,int,int,*(char),*(char),*(struct(int,int,int,int,int,*`,int,int,*`,*`,*`)),int)))->(int)
(	O
&	O
Quick_input	struct(int,int,int,int,*(char),*(char),*(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char))),int)
)	O
;	O
g_free	(*(void))->(void)
(	O
p_text	*(char)
)	O
;	O
if	O
(	O
ret	int
!=	O
B_CANCEL	int
)	O
{	O
return	O
my_str	*(char)
;	O
}	O
else	O
return	O
0	int
;	O
}	O
char	O
*	O
input_dialog_help	(*(char),*(char),*(char),*(char))->(*(char))
(	O
const	O
char	O
*	O
header	*(char)
,	O
const	O
char	O
*	O
text	*(char)
,	O
const	O
char	O
*	O
help	*(char)
,	O
const	O
char	O
*	O
def_text	*(char)
)	O
{	O
if	O
(	O
we_are_background	int
)	O
return	O
parent_call_string	(*(void),int)->(*(char))
(	O
(	O
void	O
*	O
)	O
fg_input_dialog_help	(*(char),*(char),*(char),*(char))->(*(char))
,	O
4	int
,	O
strlen	(*(char))->(long)
(	O
header	*(char)
)	O
,	O
header	*(char)
,	O
strlen	(*(char))->(long)
(	O
text	*(char)
)	O
,	O
text	*(char)
,	O
strlen	(*(char))->(long)
(	O
help	*(char)
)	O
,	O
help	*(char)
,	O
strlen	(*(char))->(long)
(	O
def_text	*(char)
)	O
,	O
def_text	*(char)
)	O
;	O
else	O
return	O
fg_input_dialog_help	(*(char),*(char),*(char),*(char))->(*(char))
(	O
header	*(char)
,	O
text	*(char)
,	O
help	*(char)
,	O
def_text	*(char)
)	O
;	O
}	O
char	O
*	O
input_dialog	(*(char),*(char),*(char))->(*(char))
(	O
const	O
char	O
*	O
header	*(char)
,	O
const	O
char	O
*	O
text	*(char)
,	O
const	O
char	O
*	O
def_text	*(char)
)	O
{	O
return	O
input_dialog_help	(*(char),*(char),*(char),*(char))->(*(char))
(	O
header	*(char)
,	O
text	*(char)
,	O
"[Input Line Keys]"	*(char)
,	O
def_text	*(char)
)	O
;	O
}	O
char	O
*	O
input_expand_dialog	(*(char),*(char),*(char))->(*(char))
(	O
const	O
char	O
*	O
header	*(char)
,	O
const	O
char	O
*	O
text	*(char)
,	O
const	O
char	O
*	O
def_text	*(char)
)	O
{	O
char	O
*	O
result	long
;	O
char	O
*	O
expanded	*(char)
;	O
result	long
=	O
input_dialog	(*(char),*(char),*(char))->(*(char))
(	O
header	*(char)
,	O
text	*(char)
,	O
def_text	*(char)
)	O
;	O
if	O
(	O
result	long
)	O
{	O
expanded	*(char)
=	O
tilde_expand	(*(char))->(*(char))
(	O
result	long
)	O
;	O
g_free	(*(void))->(void)
(	O
result	long
)	O
;	O
return	O
expanded	*(char)
;	O
}	O
return	O
result	long
;	O
}	O
