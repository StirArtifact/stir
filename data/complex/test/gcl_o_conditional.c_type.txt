object	O
sLotherwise	int
;	O
static	O
void	O
FFN	(int)->(int)
(	O
Fif	int
)	O
(	O
object	O
form	int
)	O
{	O
object	O
*	O
top	O
=	O
vs_top	O
;	O
if	O
(	O
endp	()->(int)
(	O
form	int
)	O
||	O
endp	()->(int)
(	O
MMcdr	()->(int)
(	O
form	int
)	O
)	O
)	O
FEtoo_few_argumentsF	()->(int)
(	O
form	int
)	O
;	O
if	O
(	O
!	O
endp	()->(int)
(	O
MMcddr	()->(int)
(	O
form	int
)	O
)	O
&&	O
!	O
endp	()->(int)
(	O
MMcdddr	()->(int)
(	O
form	int
)	O
)	O
)	O
FEtoo_many_argumentsF	()->(int)
(	O
form	int
)	O
;	O
eval	()->(int)
(	O
MMcar	()->(int)
(	O
form	int
)	O
)	O
;	O
if	O
(	O
vs_base	O
[	O
0	int
]	O
==	O
Cnil	O
)	O
if	O
(	O
endp	()->(int)
(	O
MMcddr	()->(int)
(	O
form	int
)	O
)	O
)	O
{	O
vs_top	O
=	O
vs_base	O
=	O
top	O
;	O
vs_push	()->(int)
(	O
Cnil	O
)	O
;	O
}	O
else	O
{	O
vs_top	O
=	O
top	O
;	O
eval	()->(int)
(	O
MMcaddr	()->(int)
(	O
form	int
)	O
)	O
;	O
}	O
else	O
{	O
vs_top	O
=	O
top	O
;	O
eval	()->(int)
(	O
MMcadr	()->(int)
(	O
form	int
)	O
)	O
;	O
}	O
}	O
static	O
void	O
FFN	(int)->(int)
(	O
Fcond	int
)	O
(	O
object	O
args	int
)	O
{	O
object	O
*	O
top	O
=	O
vs_top	O
;	O
object	O
clause	O
;	O
object	O
conseq	O
;	O
while	O
(	O
!	O
endp	()->(int)
(	O
args	int
)	O
)	O
{	O
clause	O
=	O
MMcar	()->(int)
(	O
args	int
)	O
;	O
if	O
(	O
type_of	()->(int)
(	O
clause	O
)	O
!=	O
t_cons	O
)	O
FEerror	()->(int)
(	O
"~S is an illegal COND clause."	*(char)
,	O
1	int
,	O
clause	O
)	O
;	O
eval	()->(int)
(	O
MMcar	()->(int)
(	O
clause	O
)	O
)	O
;	O
if	O
(	O
vs_base	O
[	O
0	int
]	O
!=	O
Cnil	O
)	O
{	O
conseq	O
=	O
MMcdr	()->(int)
(	O
clause	O
)	O
;	O
if	O
(	O
endp	()->(int)
(	O
conseq	O
)	O
)	O
{	O
vs_top	O
=	O
vs_base	O
+	O
1	int
;	O
return	O
;	O
}	O
while	O
(	O
!	O
endp	()->(int)
(	O
conseq	O
)	O
)	O
{	O
vs_top	O
=	O
top	O
;	O
eval	()->(int)
(	O
MMcar	()->(int)
(	O
conseq	O
)	O
)	O
;	O
conseq	O
=	O
MMcdr	()->(int)
(	O
conseq	O
)	O
;	O
}	O
return	O
;	O
}	O
vs_top	O
=	O
top	O
;	O
args	int
=	O
MMcdr	()->(int)
(	O
args	int
)	O
;	O
}	O
vs_base	O
=	O
vs_top	O
=	O
top	O
;	O
vs_push	()->(int)
(	O
Cnil	O
)	O
;	O
}	O
static	O
void	O
FFN	(int)->(int)
(	O
Fcase	int
)	O
(	O
object	O
arg	int
)	O
{	O
object	O
*	O
top	O
=	O
vs_top	O
;	O
object	O
clause	O
;	O
object	O
key	O
;	O
object	O
conseq	O
;	O
if	O
(	O
endp	()->(int)
(	O
arg	int
)	O
)	O
FEtoo_few_argumentsF	()->(int)
(	O
arg	int
)	O
;	O
eval	()->(int)
(	O
MMcar	()->(int)
(	O
arg	int
)	O
)	O
;	O
vs_top	O
=	O
top	O
;	O
vs_push	()->(int)
(	O
vs_base	O
[	O
0	int
]	O
)	O
;	O
arg	int
=	O
MMcdr	()->(int)
(	O
arg	int
)	O
;	O
while	O
(	O
!	O
endp	()->(int)
(	O
arg	int
)	O
)	O
{	O
clause	O
=	O
MMcar	()->(int)
(	O
arg	int
)	O
;	O
if	O
(	O
type_of	()->(int)
(	O
clause	O
)	O
!=	O
t_cons	O
)	O
FEerror	()->(int)
(	O
"~S is an illegal CASE clause."	*(char)
,	O
1	int
,	O
clause	O
)	O
;	O
key	O
=	O
MMcar	()->(int)
(	O
clause	O
)	O
;	O
conseq	O
=	O
MMcdr	()->(int)
(	O
clause	O
)	O
;	O
if	O
(	O
type_of	()->(int)
(	O
key	O
)	O
==	O
t_cons	O
)	O
do	O
{	O
if	O
(	O
eql	()->(int)
(	O
MMcar	()->(int)
(	O
key	O
)	O
,	O
top	O
[	O
0	int
]	O
)	O
)	O
goto	O
FOUND	O
;	O
key	O
=	O
MMcdr	()->(int)
(	O
key	O
)	O
;	O
}	O
while	O
(	O
!	O
endp	()->(int)
(	O
key	O
)	O
)	O
;	O
else	O
if	O
(	O
key	O
==	O
Cnil	O
)	O
;	O
else	O
if	O
(	O
key	O
==	O
Ct	O
||	O
key	O
==	O
sLotherwise	int
||	O
eql	()->(int)
(	O
key	O
,	O
top	O
[	O
0	int
]	O
)	O
)	O
goto	O
FOUND	O
;	O
arg	int
=	O
MMcdr	()->(int)
(	O
arg	int
)	O
;	O
}	O
vs_base	O
=	O
vs_top	O
=	O
top	O
;	O
vs_push	()->(int)
(	O
Cnil	O
)	O
;	O
return	O
;	O
FOUND	O
:	O
if	O
(	O
endp	()->(int)
(	O
conseq	O
)	O
)	O
{	O
vs_base	O
=	O
vs_top	O
=	O
top	O
;	O
vs_push	()->(int)
(	O
Cnil	O
)	O
;	O
}	O
else	O
do	O
{	O
vs_top	O
=	O
top	O
;	O
eval	()->(int)
(	O
MMcar	()->(int)
(	O
conseq	O
)	O
)	O
;	O
conseq	O
=	O
MMcdr	()->(int)
(	O
conseq	O
)	O
;	O
}	O
while	O
(	O
!	O
endp	()->(int)
(	O
conseq	O
)	O
)	O
;	O
return	O
;	O
}	O
static	O
void	O
FFN	(int)->(int)
(	O
Fwhen	int
)	O
(	O
object	O
form	int
)	O
{	O
object	O
*	O
top	O
=	O
vs_top	O
;	O
if	O
(	O
endp	()->(int)
(	O
form	int
)	O
)	O
FEtoo_few_argumentsF	()->(int)
(	O
form	int
)	O
;	O
eval	()->(int)
(	O
MMcar	()->(int)
(	O
form	int
)	O
)	O
;	O
if	O
(	O
vs_base	O
[	O
0	int
]	O
==	O
Cnil	O
)	O
{	O
vs_base	O
=	O
vs_top	O
=	O
top	O
;	O
vs_push	()->(int)
(	O
Cnil	O
)	O
;	O
}	O
else	O
{	O
form	int
=	O
MMcdr	()->(int)
(	O
form	int
)	O
;	O
if	O
(	O
endp	()->(int)
(	O
form	int
)	O
)	O
{	O
vs_base	O
=	O
vs_top	O
=	O
top	O
;	O
vs_push	()->(int)
(	O
Cnil	O
)	O
;	O
}	O
else	O
do	O
{	O
vs_top	O
=	O
top	O
;	O
eval	()->(int)
(	O
MMcar	()->(int)
(	O
form	int
)	O
)	O
;	O
form	int
=	O
MMcdr	()->(int)
(	O
form	int
)	O
;	O
}	O
while	O
(	O
!	O
endp	()->(int)
(	O
form	int
)	O
)	O
;	O
}	O
}	O
static	O
void	O
FFN	(int)->(int)
(	O
Funless	int
)	O
(	O
object	O
form	int
)	O
{	O
object	O
*	O
top	O
=	O
vs_top	O
;	O
if	O
(	O
endp	()->(int)
(	O
form	int
)	O
)	O
FEtoo_few_argumentsF	()->(int)
(	O
form	int
)	O
;	O
eval	()->(int)
(	O
MMcar	()->(int)
(	O
form	int
)	O
)	O
;	O
if	O
(	O
vs_base	O
[	O
0	int
]	O
==	O
Cnil	O
)	O
{	O
vs_top	O
=	O
top	O
;	O
form	int
=	O
MMcdr	()->(int)
(	O
form	int
)	O
;	O
if	O
(	O
endp	()->(int)
(	O
form	int
)	O
)	O
{	O
vs_base	O
=	O
vs_top	O
=	O
top	O
;	O
vs_push	()->(int)
(	O
Cnil	O
)	O
;	O
}	O
else	O
do	O
{	O
vs_top	O
=	O
top	O
;	O
eval	()->(int)
(	O
MMcar	()->(int)
(	O
form	int
)	O
)	O
;	O
form	int
=	O
MMcdr	()->(int)
(	O
form	int
)	O
;	O
}	O
while	O
(	O
!	O
endp	()->(int)
(	O
form	int
)	O
)	O
;	O
}	O
else	O
{	O
vs_base	O
=	O
vs_top	O
=	O
top	O
;	O
vs_push	()->(int)
(	O
Cnil	O
)	O
;	O
}	O
}	O
void	O
gcl_init_conditional	()->(void)
(	O
void	O
)	O
{	O
make_special_form	()->(int)
(	O
"IF"	*(char)
,	O
Fif	int
)	O
;	O
make_special_form	()->(int)
(	O
"COND"	*(char)
,	O
Fcond	int
)	O
;	O
make_special_form	()->(int)
(	O
"CASE"	*(char)
,	O
Fcase	int
)	O
;	O
make_special_form	()->(int)
(	O
"WHEN"	*(char)
,	O
Fwhen	int
)	O
;	O
make_special_form	()->(int)
(	O
"UNLESS"	*(char)
,	O
Funless	int
)	O
;	O
sLotherwise	int
=	O
make_ordinary	()->(int)
(	O
"OTHERWISE"	*(char)
)	O
;	O
enter_mark_origin	()->(int)
(	O
&	O
sLotherwise	int
)	O
;	O
}	O
