extern	O
int	O
screen_trashed	int
;	O
extern	O
IFILE	O
curr_ifile	*(void)
;	O
public	O
void	O
lsystem	(*(char),*(char))->(void)
(	O
cmd	*(char)
,	O
donemsg	*(char)
)	O
char	O
*	O
cmd	*(char)
;	O
char	O
*	O
donemsg	*(char)
;	O
{	O
int	O
inp	int
;	O
char	O
*	O
shell	*(char)
;	O
char	O
*	O
p	*(char)
;	O
IFILE	O
save_ifile	*(void)
;	O
if	O
(	O
cmd	*(char)
[	O
0	int
]	O
==	O
'-'	O
)	O
cmd	*(char)
++	O
;	O
else	O
{	O
clear_bot	()->(void)
(	O
)	O
;	O
putstr	(*(char))->(void)
(	O
"!"	*(char)
)	O
;	O
putstr	(*(char))->(void)
(	O
cmd	*(char)
)	O
;	O
putstr	(*(char))->(void)
(	O
"\n"	*(char)
)	O
;	O
}	O
save_ifile	*(void)
=	O
save_curr_ifile	()->(*(void))
(	O
)	O
;	O
(	O
void	O
)	O
edit_ifile	(*(void))->(int)
(	O
NULL_IFILE	O
)	O
;	O
deinit	()->(void)
(	O
)	O
;	O
flush	()->(void)
(	O
)	O
;	O
raw_mode	(int)->(void)
(	O
0	int
)	O
;	O
init_signals	(int)->(void)
(	O
0	int
)	O
;	O
inp	int
=	O
dup	(int)->(int)
(	O
0	int
)	O
;	O
close	(int)->(int)
(	O
0	int
)	O
;	O
if	O
(	O
open	(*(char),int)->(int)
(	O
"/dev/tty"	*(char)
,	O
OPEN_READ	O
)	O
<	O
0	int
)	O
dup	(int)->(int)
(	O
inp	int
)	O
;	O
p	*(char)
=	O
NULL	O
;	O
if	O
(	O
(	O
shell	*(char)
=	O
lgetenv	(*(char))->(*(char))
(	O
"SHELL"	*(char)
)	O
)	O
!=	O
NULL	O
&&	O
*	O
shell	*(char)
!=	O
'\0'	O
)	O
{	O
if	O
(	O
*	O
cmd	*(char)
==	O
'\0'	O
)	O
p	*(char)
=	O
save	(*(char))->(*(char))
(	O
shell	*(char)
)	O
;	O
else	O
{	O
char	O
*	O
esccmd	*(char)
=	O
shell_quote	(*(char))->(*(char))
(	O
cmd	*(char)
)	O
;	O
if	O
(	O
esccmd	*(char)
!=	O
NULL	O
)	O
{	O
int	O
len	int
=	O
(	O
int	O
)	O
(	O
strlen	(*(char))->(long)
(	O
shell	*(char)
)	O
+	O
strlen	(*(char))->(long)
(	O
esccmd	*(char)
)	O
+	O
5	int
)	O
;	O
p	*(char)
=	O
(	O
char	O
*	O
)	O
ecalloc	(int,int)->(*(void))
(	O
len	int
,	O
sizeof	O
(	O
char	O
)	O
)	O
;	O
SNPRINTF3	O
(	O
p	*(char)
,	O
len	int
,	O
"%s %s %s"	*(char)
,	O
shell	*(char)
,	O
shell_coption	()->(*(char))
(	O
)	O
,	O
esccmd	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
esccmd	*(char)
)	O
;	O
}	O
}	O
}	O
if	O
(	O
p	*(char)
==	O
NULL	O
)	O
{	O
if	O
(	O
*	O
cmd	*(char)
==	O
'\0'	O
)	O
p	*(char)
=	O
save	(*(char))->(*(char))
(	O
"sh"	*(char)
)	O
;	O
else	O
p	*(char)
=	O
save	(*(char))->(*(char))
(	O
cmd	*(char)
)	O
;	O
}	O
system	(*(char))->(int)
(	O
p	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
p	*(char)
)	O
;	O
close	(int)->(int)
(	O
0	int
)	O
;	O
dup	(int)->(int)
(	O
inp	int
)	O
;	O
close	(int)->(int)
(	O
inp	int
)	O
;	O
init_signals	(int)->(void)
(	O
1	int
)	O
;	O
raw_mode	(int)->(void)
(	O
1	int
)	O
;	O
if	O
(	O
donemsg	*(char)
!=	O
NULL	O
)	O
{	O
putstr	(*(char))->(void)
(	O
donemsg	*(char)
)	O
;	O
putstr	(*(char))->(void)
(	O
"  (press RETURN)"	*(char)
)	O
;	O
get_return	()->(void)
(	O
)	O
;	O
putchr	(int)->(int)
(	O
'\n'	O
)	O
;	O
flush	()->(void)
(	O
)	O
;	O
}	O
init	()->(void)
(	O
)	O
;	O
screen_trashed	int
=	O
1	int
;	O
reedit_ifile	(*(void))->(void)
(	O
save_ifile	*(void)
)	O
;	O
winch	(int)->(void)
(	O
0	int
)	O
;	O
}	O
public	O
int	O
pipe_mark	(int,*(char))->(int)
(	O
c	int
,	O
cmd	*(char)
)	O
int	O
c	int
;	O
char	O
*	O
cmd	*(char)
;	O
{	O
POSITION	long
mpos	long
,	O
tpos	long
,	O
bpos	long
;	O
mpos	long
=	O
markpos	(int)->(long)
(	O
c	int
)	O
;	O
if	O
(	O
mpos	long
==	O
NULL_POSITION	O
)	O
return	O
(	O
-	O
1	int
)	O
;	O
tpos	long
=	O
position	(int)->(long)
(	O
TOP	O
)	O
;	O
if	O
(	O
tpos	long
==	O
NULL_POSITION	O
)	O
tpos	long
=	O
ch_zero	O
(	O
)	O
;	O
bpos	long
=	O
position	(int)->(long)
(	O
BOTTOM	O
)	O
;	O
if	O
(	O
c	int
==	O
'.'	O
)	O
return	O
(	O
pipe_data	(*(char),long,long)->(int)
(	O
cmd	*(char)
,	O
tpos	long
,	O
bpos	long
)	O
)	O
;	O
else	O
if	O
(	O
mpos	long
<=	O
tpos	long
)	O
return	O
(	O
pipe_data	(*(char),long,long)->(int)
(	O
cmd	*(char)
,	O
mpos	long
,	O
bpos	long
)	O
)	O
;	O
else	O
if	O
(	O
bpos	long
==	O
NULL_POSITION	O
)	O
return	O
(	O
pipe_data	(*(char),long,long)->(int)
(	O
cmd	*(char)
,	O
tpos	long
,	O
bpos	long
)	O
)	O
;	O
else	O
return	O
(	O
pipe_data	(*(char),long,long)->(int)
(	O
cmd	*(char)
,	O
tpos	long
,	O
mpos	long
)	O
)	O
;	O
}	O
public	O
int	O
pipe_data	(*(char),long,long)->(int)
(	O
cmd	*(char)
,	O
spos	long
,	O
epos	long
)	O
char	O
*	O
cmd	*(char)
;	O
POSITION	long
spos	long
;	O
POSITION	long
epos	long
;	O
{	O
FILE	struct
*	O
f	int
;	O
int	O
c	int
;	O
extern	O
FILE	struct
*	O
popen	(*(char),*(char))->(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))
(	O
)	O
;	O
if	O
(	O
ch_seek	(long)->(int)
(	O
spos	long
)	O
!=	O
0	int
)	O
{	O
error	(*(char),*(union(*(char),int,long)))->(void)
(	O
"Cannot seek to start position"	*(char)
,	O
NULL_PARG	O
)	O
;	O
return	O
(	O
-	O
1	int
)	O
;	O
}	O
if	O
(	O
(	O
f	int
=	O
popen	(*(char),*(char))->(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))
(	O
cmd	*(char)
,	O
"w"	*(char)
)	O
)	O
==	O
NULL	O
)	O
{	O
error	(*(char),*(union(*(char),int,long)))->(void)
(	O
"Cannot create pipe"	*(char)
,	O
NULL_PARG	O
)	O
;	O
return	O
(	O
-	O
1	int
)	O
;	O
}	O
clear_bot	()->(void)
(	O
)	O
;	O
putstr	(*(char))->(void)
(	O
"!"	*(char)
)	O
;	O
putstr	(*(char))->(void)
(	O
cmd	*(char)
)	O
;	O
putstr	(*(char))->(void)
(	O
"\n"	*(char)
)	O
;	O
deinit	()->(void)
(	O
)	O
;	O
flush	()->(void)
(	O
)	O
;	O
raw_mode	(int)->(void)
(	O
0	int
)	O
;	O
init_signals	(int)->(void)
(	O
0	int
)	O
;	O
LSIGNAL	O
(	O
SIGPIPE	int
,	O
SIG_IGN	O
)	O
;	O
c	int
=	O
EOI	O
;	O
while	O
(	O
epos	long
==	O
NULL_POSITION	O
||	O
spos	long
++	O
<=	O
epos	long
)	O
{	O
c	int
=	O
ch_forw_get	()->(int)
(	O
)	O
;	O
if	O
(	O
c	int
==	O
EOI	O
)	O
break	O
;	O
if	O
(	O
putc	(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
c	int
,	O
f	int
)	O
==	O
EOF	O
)	O
break	O
;	O
}	O
while	O
(	O
c	int
!=	O
'\n'	O
&&	O
c	int
!=	O
EOI	O
)	O
{	O
c	int
=	O
ch_forw_get	()->(int)
(	O
)	O
;	O
if	O
(	O
c	int
==	O
EOI	O
)	O
break	O
;	O
if	O
(	O
putc	(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
c	int
,	O
f	int
)	O
==	O
EOF	O
)	O
break	O
;	O
}	O
pclose	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
f	int
)	O
;	O
LSIGNAL	O
(	O
SIGPIPE	int
,	O
SIG_DFL	O
)	O
;	O
init_signals	(int)->(void)
(	O
1	int
)	O
;	O
raw_mode	(int)->(void)
(	O
1	int
)	O
;	O
init	()->(void)
(	O
)	O
;	O
screen_trashed	int
=	O
1	int
;	O
winch	(int)->(void)
(	O
0	int
)	O
;	O
return	O
(	O
0	int
)	O
;	O
}	O
