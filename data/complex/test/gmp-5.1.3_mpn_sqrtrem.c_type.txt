static	O
const	O
unsigned	O
char	O
invsqrttab	array(char)
[	O
384	int
]	O
=	O
{	O
0xff	int
,	O
0xfd	int
,	O
0xfb	int
,	O
0xf9	int
,	O
0xf7	int
,	O
0xf5	int
,	O
0xf3	int
,	O
0xf2	int
,	O
0xf0	int
,	O
0xee	int
,	O
0xec	int
,	O
0xea	int
,	O
0xe9	int
,	O
0xe7	int
,	O
0xe5	int
,	O
0xe4	int
,	O
0xe2	int
,	O
0xe0	int
,	O
0xdf	int
,	O
0xdd	int
,	O
0xdb	int
,	O
0xda	int
,	O
0xd8	int
,	O
0xd7	int
,	O
0xd5	int
,	O
0xd4	int
,	O
0xd2	int
,	O
0xd1	int
,	O
0xcf	int
,	O
0xce	int
,	O
0xcc	int
,	O
0xcb	int
,	O
0xc9	int
,	O
0xc8	int
,	O
0xc6	int
,	O
0xc5	int
,	O
0xc4	int
,	O
0xc2	int
,	O
0xc1	int
,	O
0xc0	int
,	O
0xbe	int
,	O
0xbd	int
,	O
0xbc	int
,	O
0xba	int
,	O
0xb9	int
,	O
0xb8	int
,	O
0xb7	int
,	O
0xb5	int
,	O
0xb4	int
,	O
0xb3	int
,	O
0xb2	int
,	O
0xb0	int
,	O
0xaf	int
,	O
0xae	int
,	O
0xad	int
,	O
0xac	int
,	O
0xaa	int
,	O
0xa9	int
,	O
0xa8	int
,	O
0xa7	int
,	O
0xa6	int
,	O
0xa5	int
,	O
0xa4	int
,	O
0xa3	int
,	O
0xa2	int
,	O
0xa0	int
,	O
0x9f	int
,	O
0x9e	int
,	O
0x9d	int
,	O
0x9c	int
,	O
0x9b	int
,	O
0x9a	int
,	O
0x99	int
,	O
0x98	int
,	O
0x97	int
,	O
0x96	int
,	O
0x95	int
,	O
0x94	int
,	O
0x93	int
,	O
0x92	int
,	O
0x91	int
,	O
0x90	int
,	O
0x8f	int
,	O
0x8e	int
,	O
0x8d	int
,	O
0x8c	int
,	O
0x8c	int
,	O
0x8b	int
,	O
0x8a	int
,	O
0x89	int
,	O
0x88	int
,	O
0x87	int
,	O
0x86	int
,	O
0x85	int
,	O
0x84	int
,	O
0x83	int
,	O
0x83	int
,	O
0x82	int
,	O
0x81	int
,	O
0x80	int
,	O
0x7f	int
,	O
0x7e	int
,	O
0x7e	int
,	O
0x7d	int
,	O
0x7c	int
,	O
0x7b	int
,	O
0x7a	int
,	O
0x79	int
,	O
0x79	int
,	O
0x78	int
,	O
0x77	int
,	O
0x76	int
,	O
0x76	int
,	O
0x75	int
,	O
0x74	int
,	O
0x73	int
,	O
0x72	int
,	O
0x72	int
,	O
0x71	int
,	O
0x70	int
,	O
0x6f	int
,	O
0x6f	int
,	O
0x6e	int
,	O
0x6d	int
,	O
0x6d	int
,	O
0x6c	int
,	O
0x6b	int
,	O
0x6a	int
,	O
0x6a	int
,	O
0x69	int
,	O
0x68	int
,	O
0x68	int
,	O
0x67	int
,	O
0x66	int
,	O
0x66	int
,	O
0x65	int
,	O
0x64	int
,	O
0x64	int
,	O
0x63	int
,	O
0x62	int
,	O
0x62	int
,	O
0x61	int
,	O
0x60	int
,	O
0x60	int
,	O
0x5f	int
,	O
0x5e	int
,	O
0x5e	int
,	O
0x5d	int
,	O
0x5c	int
,	O
0x5c	int
,	O
0x5b	int
,	O
0x5a	int
,	O
0x5a	int
,	O
0x59	int
,	O
0x59	int
,	O
0x58	int
,	O
0x57	int
,	O
0x57	int
,	O
0x56	int
,	O
0x56	int
,	O
0x55	int
,	O
0x54	int
,	O
0x54	int
,	O
0x53	int
,	O
0x53	int
,	O
0x52	int
,	O
0x52	int
,	O
0x51	int
,	O
0x50	int
,	O
0x50	int
,	O
0x4f	int
,	O
0x4f	int
,	O
0x4e	int
,	O
0x4e	int
,	O
0x4d	int
,	O
0x4d	int
,	O
0x4c	int
,	O
0x4b	int
,	O
0x4b	int
,	O
0x4a	int
,	O
0x4a	int
,	O
0x49	int
,	O
0x49	int
,	O
0x48	int
,	O
0x48	int
,	O
0x47	int
,	O
0x47	int
,	O
0x46	int
,	O
0x46	int
,	O
0x45	int
,	O
0x45	int
,	O
0x44	int
,	O
0x44	int
,	O
0x43	int
,	O
0x43	int
,	O
0x42	int
,	O
0x42	int
,	O
0x41	int
,	O
0x41	int
,	O
0x40	int
,	O
0x40	int
,	O
0x3f	int
,	O
0x3f	int
,	O
0x3e	int
,	O
0x3e	int
,	O
0x3d	int
,	O
0x3d	int
,	O
0x3c	int
,	O
0x3c	int
,	O
0x3b	int
,	O
0x3b	int
,	O
0x3a	int
,	O
0x3a	int
,	O
0x39	int
,	O
0x39	int
,	O
0x39	int
,	O
0x38	int
,	O
0x38	int
,	O
0x37	int
,	O
0x37	int
,	O
0x36	int
,	O
0x36	int
,	O
0x35	int
,	O
0x35	int
,	O
0x35	int
,	O
0x34	int
,	O
0x34	int
,	O
0x33	int
,	O
0x33	int
,	O
0x32	int
,	O
0x32	int
,	O
0x32	int
,	O
0x31	int
,	O
0x31	int
,	O
0x30	int
,	O
0x30	int
,	O
0x2f	int
,	O
0x2f	int
,	O
0x2f	int
,	O
0x2e	int
,	O
0x2e	int
,	O
0x2d	int
,	O
0x2d	int
,	O
0x2d	int
,	O
0x2c	int
,	O
0x2c	int
,	O
0x2b	int
,	O
0x2b	int
,	O
0x2b	int
,	O
0x2a	int
,	O
0x2a	int
,	O
0x29	int
,	O
0x29	int
,	O
0x29	int
,	O
0x28	int
,	O
0x28	int
,	O
0x27	int
,	O
0x27	int
,	O
0x27	int
,	O
0x26	int
,	O
0x26	int
,	O
0x26	int
,	O
0x25	int
,	O
0x25	int
,	O
0x24	int
,	O
0x24	int
,	O
0x24	int
,	O
0x23	int
,	O
0x23	int
,	O
0x23	int
,	O
0x22	int
,	O
0x22	int
,	O
0x21	int
,	O
0x21	int
,	O
0x21	int
,	O
0x20	int
,	O
0x20	int
,	O
0x20	int
,	O
0x1f	int
,	O
0x1f	int
,	O
0x1f	int
,	O
0x1e	int
,	O
0x1e	int
,	O
0x1e	int
,	O
0x1d	int
,	O
0x1d	int
,	O
0x1d	int
,	O
0x1c	int
,	O
0x1c	int
,	O
0x1b	int
,	O
0x1b	int
,	O
0x1b	int
,	O
0x1a	int
,	O
0x1a	int
,	O
0x1a	int
,	O
0x19	int
,	O
0x19	int
,	O
0x19	int
,	O
0x18	int
,	O
0x18	int
,	O
0x18	int
,	O
0x18	int
,	O
0x17	int
,	O
0x17	int
,	O
0x17	int
,	O
0x16	int
,	O
0x16	int
,	O
0x16	int
,	O
0x15	int
,	O
0x15	int
,	O
0x15	int
,	O
0x14	int
,	O
0x14	int
,	O
0x14	int
,	O
0x13	int
,	O
0x13	int
,	O
0x13	int
,	O
0x12	int
,	O
0x12	int
,	O
0x12	int
,	O
0x12	int
,	O
0x11	int
,	O
0x11	int
,	O
0x11	int
,	O
0x10	int
,	O
0x10	int
,	O
0x10	int
,	O
0x0f	int
,	O
0x0f	int
,	O
0x0f	int
,	O
0x0f	int
,	O
0x0e	int
,	O
0x0e	int
,	O
0x0e	int
,	O
0x0d	int
,	O
0x0d	int
,	O
0x0d	int
,	O
0x0c	int
,	O
0x0c	int
,	O
0x0c	int
,	O
0x0c	int
,	O
0x0b	int
,	O
0x0b	int
,	O
0x0b	int
,	O
0x0a	int
,	O
0x0a	int
,	O
0x0a	int
,	O
0x0a	int
,	O
0x09	int
,	O
0x09	int
,	O
0x09	int
,	O
0x09	int
,	O
0x08	int
,	O
0x08	int
,	O
0x08	int
,	O
0x07	int
,	O
0x07	int
,	O
0x07	int
,	O
0x07	int
,	O
0x06	int
,	O
0x06	int
,	O
0x06	int
,	O
0x06	int
,	O
0x05	int
,	O
0x05	int
,	O
0x05	int
,	O
0x04	int
,	O
0x04	int
,	O
0x04	int
,	O
0x04	int
,	O
0x03	int
,	O
0x03	int
,	O
0x03	int
,	O
0x03	int
,	O
0x02	int
,	O
0x02	int
,	O
0x02	int
,	O
0x02	int
,	O
0x01	int
,	O
0x01	int
,	O
0x01	int
,	O
0x01	int
,	O
0x00	int
,	O
0x00	int
}	O
;	O
static	O
mp_limb_t	long
mpn_sqrtrem1	(*(long),long)->(long)
(	O
mp_ptr	*(long)
rp	*(long)
,	O
mp_limb_t	long
a0	long
)	O
{	O
mp_limb_t	long
a1	long
;	O
mp_limb_t	long
x0	long
,	O
t2	long
,	O
t	long
,	O
x2	long
;	O
unsigned	O
abits	int
;	O
ASSERT_ALWAYS	O
(	O
GMP_NAIL_BITS	int
==	O
0	int
)	O
;	O
ASSERT_ALWAYS	O
(	O
GMP_LIMB_BITS	int
==	O
32	int
||	O
GMP_LIMB_BITS	int
==	O
64	int
)	O
;	O
ASSERT	O
(	O
a0	long
>=	O
GMP_NUMB_HIGHBIT	O
/	O
2	int
)	O
;	O
abits	int
=	O
a0	long
>>	O
(	O
GMP_LIMB_BITS	int
-	O
1	int
-	O
8	int
)	O
;	O
x0	long
=	O
0x100	int
|	O
invsqrttab	array(char)
[	O
abits	int
-	O
0x80	int
]	O
;	O
a1	long
=	O
a0	long
>>	O
(	O
GMP_LIMB_BITS	int
-	O
1	int
-	O
32	int
)	O
;	O
t	long
=	O
(	O
mp_limb_signed_t	long
)	O
(	O
CNST_LIMB	O
(	O
0x2000000000000	int
)	O
-	O
0x30000	int
-	O
a1	long
*	O
x0	long
*	O
x0	long
)	O
>>	O
16	int
;	O
x0	long
=	O
(	O
x0	long
<<	O
16	int
)	O
+	O
(	O
(	O
mp_limb_signed_t	long
)	O
(	O
x0	long
*	O
t	long
)	O
>>	O
(	O
16	int
+	O
2	int
)	O
)	O
;	O
t2	long
=	O
x0	long
*	O
(	O
a0	long
>>	O
(	O
32	int
-	O
8	int
)	O
)	O
;	O
t	long
=	O
t2	long
>>	O
25	int
;	O
t	long
=	O
(	O
(	O
mp_limb_signed_t	long
)	O
(	O
(	O
a0	long
<<	O
14	int
)	O
-	O
t	long
*	O
t	long
-	O
MAGIC	O
)	O
>>	O
(	O
32	int
-	O
8	int
)	O
)	O
;	O
x0	long
=	O
t2	long
+	O
(	O
(	O
mp_limb_signed_t	long
)	O
(	O
x0	long
*	O
t	long
)	O
>>	O
15	int
)	O
;	O
x0	long
>>=	O
32	int
;	O
x2	long
=	O
x0	long
*	O
x0	long
;	O
if	O
(	O
x2	long
+	O
2	int
*	O
x0	long
<=	O
a0	long
-	O
1	int
)	O
{	O
x2	long
+=	O
2	int
*	O
x0	long
+	O
1	int
;	O
x0	long
++	O
;	O
}	O
*	O
rp	*(long)
=	O
a0	long
-	O
x2	long
;	O
return	O
x0	long
;	O
}	O
static	O
mp_limb_t	long
mpn_sqrtrem2	(*(long),*(long),*(long))->(long)
(	O
mp_ptr	*(long)
sp	*(long)
,	O
mp_ptr	*(long)
rp	*(long)
,	O
mp_srcptr	*(long)
np	*(long)
)	O
{	O
mp_limb_t	long
qhl	long
,	O
q	int
,	O
u	array(array(long))
,	O
np0	long
,	O
sp0	long
,	O
rp0	long
,	O
q2	long
;	O
int	O
cc	int
;	O
ASSERT	O
(	O
np	*(long)
[	O
1	int
]	O
>=	O
GMP_NUMB_HIGHBIT	O
/	O
2	int
)	O
;	O
np0	long
=	O
np	*(long)
[	O
0	int
]	O
;	O
sp0	long
=	O
mpn_sqrtrem1	(*(long),long)->(long)
(	O
rp	*(long)
,	O
np	*(long)
[	O
1	int
]	O
)	O
;	O
qhl	long
=	O
0	int
;	O
rp0	long
=	O
rp	*(long)
[	O
0	int
]	O
;	O
while	O
(	O
rp0	long
>=	O
sp0	long
)	O
{	O
qhl	long
++	O
;	O
rp0	long
-=	O
sp0	long
;	O
}	O
rp0	long
=	O
(	O
rp0	long
<<	O
Prec	O
)	O
+	O
(	O
np0	long
>>	O
Prec	O
)	O
;	O
u	array(array(long))
=	O
2	int
*	O
sp0	long
;	O
q	int
=	O
rp0	long
/	O
u	array(array(long))
;	O
u	array(array(long))
=	O
rp0	long
-	O
q	int
*	O
u	array(array(long))
;	O
q	int
+=	O
(	O
qhl	long
&	O
1	int
)	O
<<	O
(	O
Prec	O
-	O
1	int
)	O
;	O
qhl	long
>>=	O
1	int
;	O
sp0	long
=	O
(	O
(	O
sp0	long
+	O
qhl	long
)	O
<<	O
Prec	O
)	O
+	O
q	int
;	O
cc	int
=	O
u	array(array(long))
>>	O
Prec	O
;	O
rp0	long
=	O
(	O
(	O
u	array(array(long))
<<	O
Prec	O
)	O
&	O
GMP_NUMB_MASK	O
)	O
+	O
(	O
np0	long
&	O
(	O
(	O
(	O
mp_limb_t	long
)	O
1	int
<<	O
Prec	O
)	O
-	O
1	int
)	O
)	O
;	O
q2	long
=	O
q	int
*	O
q	int
;	O
cc	int
-=	O
(	O
rp0	long
<	O
q2	long
)	O
+	O
qhl	long
;	O
rp0	long
-=	O
q2	long
;	O
if	O
(	O
cc	int
<	O
0	int
)	O
{	O
if	O
(	O
sp0	long
!=	O
0	int
)	O
{	O
rp0	long
+=	O
sp0	long
;	O
cc	int
+=	O
rp0	long
<	O
sp0	long
;	O
}	O
else	O
cc	int
++	O
;	O
--	O
sp0	long
;	O
rp0	long
+=	O
sp0	long
;	O
cc	int
+=	O
rp0	long
<	O
sp0	long
;	O
}	O
rp	*(long)
[	O
0	int
]	O
=	O
rp0	long
;	O
sp	*(long)
[	O
0	int
]	O
=	O
sp0	long
;	O
return	O
cc	int
;	O
}	O
static	O
mp_limb_t	long
mpn_dc_sqrtrem	(*(long),*(long),long)->(long)
(	O
mp_ptr	*(long)
sp	*(long)
,	O
mp_ptr	*(long)
np	*(long)
,	O
mp_size_t	long
n	long
)	O
{	O
mp_limb_t	long
q	int
;	O
int	O
c	int
,	O
b	int
;	O
mp_size_t	long
l	long
,	O
h	long
;	O
ASSERT	O
(	O
np	*(long)
[	O
2	int
*	O
n	long
-	O
1	int
]	O
>=	O
GMP_NUMB_HIGHBIT	O
/	O
2	int
)	O
;	O
if	O
(	O
n	long
==	O
1	int
)	O
c	int
=	O
mpn_sqrtrem2	(*(long),*(long),*(long))->(long)
(	O
sp	*(long)
,	O
np	*(long)
,	O
np	*(long)
)	O
;	O
else	O
{	O
l	long
=	O
n	long
/	O
2	int
;	O
h	long
=	O
n	long
-	O
l	long
;	O
q	int
=	O
mpn_dc_sqrtrem	(*(long),*(long),long)->(long)
(	O
sp	*(long)
+	O
l	long
,	O
np	*(long)
+	O
2	int
*	O
l	long
,	O
h	long
)	O
;	O
if	O
(	O
q	int
!=	O
0	int
)	O
mpn_sub_n	O
(	O
np	*(long)
+	O
2	int
*	O
l	long
,	O
np	*(long)
+	O
2	int
*	O
l	long
,	O
sp	*(long)
+	O
l	long
,	O
h	long
)	O
;	O
q	int
+=	O
mpn_divrem	O
(	O
sp	*(long)
,	O
0	int
,	O
np	*(long)
+	O
l	long
,	O
n	long
,	O
sp	*(long)
+	O
l	long
,	O
h	long
)	O
;	O
c	int
=	O
sp	*(long)
[	O
0	int
]	O
&	O
1	int
;	O
mpn_rshift	O
(	O
sp	*(long)
,	O
sp	*(long)
,	O
l	long
,	O
1	int
)	O
;	O
sp	*(long)
[	O
l	long
-	O
1	int
]	O
|=	O
(	O
q	int
<<	O
(	O
GMP_NUMB_BITS	O
-	O
1	int
)	O
)	O
&	O
GMP_NUMB_MASK	O
;	O
q	int
>>=	O
1	int
;	O
if	O
(	O
c	int
!=	O
0	int
)	O
c	int
=	O
mpn_add_n	O
(	O
np	*(long)
+	O
l	long
,	O
np	*(long)
+	O
l	long
,	O
sp	*(long)
+	O
l	long
,	O
h	long
)	O
;	O
mpn_sqr	O
(	O
np	*(long)
+	O
n	long
,	O
sp	*(long)
,	O
l	long
)	O
;	O
b	int
=	O
q	int
+	O
mpn_sub_n	O
(	O
np	*(long)
,	O
np	*(long)
,	O
np	*(long)
+	O
n	long
,	O
2	int
*	O
l	long
)	O
;	O
c	int
-=	O
(	O
l	long
==	O
h	long
)	O
?	O
b	int
:	O
mpn_sub_1	O
(	O
np	*(long)
+	O
2	int
*	O
l	long
,	O
np	*(long)
+	O
2	int
*	O
l	long
,	O
1	int
,	O
(	O
mp_limb_t	long
)	O
b	int
)	O
;	O
q	int
=	O
mpn_add_1	O
(	O
sp	*(long)
+	O
l	long
,	O
sp	*(long)
+	O
l	long
,	O
h	long
,	O
q	int
)	O
;	O
if	O
(	O
c	int
<	O
0	int
)	O
{	O
c	int
+=	O
mpn_addlsh1_n	O
(	O
np	*(long)
,	O
np	*(long)
,	O
sp	*(long)
,	O
n	long
)	O
+	O
2	int
*	O
q	int
;	O
c	int
-=	O
mpn_sub_1	O
(	O
np	*(long)
,	O
np	*(long)
,	O
n	long
,	O
CNST_LIMB	O
(	O
1	int
)	O
)	O
;	O
q	int
-=	O
mpn_sub_1	O
(	O
sp	*(long)
,	O
sp	*(long)
,	O
n	long
,	O
CNST_LIMB	O
(	O
1	int
)	O
)	O
;	O
}	O
}	O
return	O
c	int
;	O
}	O
mp_size_t	long
mpn_sqrtrem	O
(	O
mp_ptr	*(long)
sp	*(long)
,	O
mp_ptr	*(long)
rp	*(long)
,	O
mp_srcptr	*(long)
np	*(long)
,	O
mp_size_t	long
nn	long
)	O
{	O
mp_limb_t	long
*	O
tp	*(long)
,	O
s0	long
[	O
1	int
]	O
,	O
cc	int
,	O
high	long
,	O
rl	long
;	O
int	O
c	int
;	O
mp_size_t	long
rn	long
,	O
tn	long
;	O
TMP_DECL	O
;	O
ASSERT	O
(	O
nn	long
>=	O
0	int
)	O
;	O
ASSERT_MPN	O
(	O
np	*(long)
,	O
nn	long
)	O
;	O
if	O
(	O
nn	long
==	O
0	int
)	O
return	O
0	int
;	O
ASSERT	O
(	O
np	*(long)
[	O
nn	long
-	O
1	int
]	O
!=	O
0	int
)	O
;	O
ASSERT	O
(	O
rp	*(long)
==	O
NULL	O
||	O
MPN_SAME_OR_SEPARATE_P	O
(	O
np	*(long)
,	O
rp	*(long)
,	O
nn	long
)	O
)	O
;	O
ASSERT	O
(	O
rp	*(long)
==	O
NULL	O
||	O
!	O
MPN_OVERLAP_P	O
(	O
sp	*(long)
,	O
(	O
nn	long
+	O
1	int
)	O
/	O
2	int
,	O
rp	*(long)
,	O
nn	long
)	O
)	O
;	O
ASSERT	O
(	O
!	O
MPN_OVERLAP_P	O
(	O
sp	*(long)
,	O
(	O
nn	long
+	O
1	int
)	O
/	O
2	int
,	O
np	*(long)
,	O
nn	long
)	O
)	O
;	O
high	long
=	O
np	*(long)
[	O
nn	long
-	O
1	int
]	O
;	O
if	O
(	O
nn	long
==	O
1	int
&&	O
(	O
high	long
&	O
GMP_NUMB_HIGHBIT	O
)	O
)	O
{	O
mp_limb_t	long
r	long
;	O
sp	*(long)
[	O
0	int
]	O
=	O
mpn_sqrtrem1	(*(long),long)->(long)
(	O
&	O
r	long
,	O
high	long
)	O
;	O
if	O
(	O
rp	*(long)
!=	O
NULL	O
)	O
rp	*(long)
[	O
0	int
]	O
=	O
r	long
;	O
return	O
r	long
!=	O
0	int
;	O
}	O
count_leading_zeros	O
(	O
c	int
,	O
high	long
)	O
;	O
c	int
-=	O
GMP_NAIL_BITS	int
;	O
c	int
=	O
c	int
/	O
2	int
;	O
tn	long
=	O
(	O
nn	long
+	O
1	int
)	O
/	O
2	int
;	O
TMP_MARK	O
;	O
if	O
(	O
nn	long
%	O
2	int
!=	O
0	int
||	O
c	int
>	O
0	int
)	O
{	O
tp	*(long)
=	O
TMP_ALLOC_LIMBS	O
(	O
2	int
*	O
tn	long
)	O
;	O
tp	*(long)
[	O
0	int
]	O
=	O
0	int
;	O
if	O
(	O
c	int
!=	O
0	int
)	O
mpn_lshift	O
(	O
tp	*(long)
+	O
2	int
*	O
tn	long
-	O
nn	long
,	O
np	*(long)
,	O
nn	long
,	O
2	int
*	O
c	int
)	O
;	O
else	O
MPN_COPY	O
(	O
tp	*(long)
+	O
2	int
*	O
tn	long
-	O
nn	long
,	O
np	*(long)
,	O
nn	long
)	O
;	O
rl	long
=	O
mpn_dc_sqrtrem	(*(long),*(long),long)->(long)
(	O
sp	*(long)
,	O
tp	*(long)
,	O
tn	long
)	O
;	O
c	int
+=	O
(	O
nn	long
%	O
2	int
)	O
*	O
GMP_NUMB_BITS	O
/	O
2	int
;	O
s0	long
[	O
0	int
]	O
=	O
sp	*(long)
[	O
0	int
]	O
&	O
(	O
(	O
(	O
mp_limb_t	long
)	O
1	int
<<	O
c	int
)	O
-	O
1	int
)	O
;	O
rl	long
+=	O
mpn_addmul_1	O
(	O
tp	*(long)
,	O
sp	*(long)
,	O
tn	long
,	O
2	int
*	O
s0	long
[	O
0	int
]	O
)	O
;	O
cc	int
=	O
mpn_submul_1	O
(	O
tp	*(long)
,	O
s0	long
,	O
1	int
,	O
s0	long
[	O
0	int
]	O
)	O
;	O
rl	long
-=	O
(	O
tn	long
>	O
1	int
)	O
?	O
mpn_sub_1	O
(	O
tp	*(long)
+	O
1	int
,	O
tp	*(long)
+	O
1	int
,	O
tn	long
-	O
1	int
,	O
cc	int
)	O
:	O
cc	int
;	O
mpn_rshift	O
(	O
sp	*(long)
,	O
sp	*(long)
,	O
tn	long
,	O
c	int
)	O
;	O
tp	*(long)
[	O
tn	long
]	O
=	O
rl	long
;	O
if	O
(	O
rp	*(long)
==	O
NULL	O
)	O
rp	*(long)
=	O
tp	*(long)
;	O
c	int
=	O
c	int
<<	O
1	int
;	O
if	O
(	O
c	int
<	O
GMP_NUMB_BITS	O
)	O
tn	long
++	O
;	O
else	O
{	O
tp	*(long)
++	O
;	O
c	int
-=	O
GMP_NUMB_BITS	O
;	O
}	O
if	O
(	O
c	int
!=	O
0	int
)	O
mpn_rshift	O
(	O
rp	*(long)
,	O
tp	*(long)
,	O
tn	long
,	O
c	int
)	O
;	O
else	O
MPN_COPY_INCR	O
(	O
rp	*(long)
,	O
tp	*(long)
,	O
tn	long
)	O
;	O
rn	long
=	O
tn	long
;	O
}	O
else	O
{	O
if	O
(	O
rp	*(long)
==	O
NULL	O
)	O
rp	*(long)
=	O
TMP_ALLOC_LIMBS	O
(	O
nn	long
)	O
;	O
if	O
(	O
rp	*(long)
!=	O
np	*(long)
)	O
MPN_COPY	O
(	O
rp	*(long)
,	O
np	*(long)
,	O
nn	long
)	O
;	O
rn	long
=	O
tn	long
+	O
(	O
rp	*(long)
[	O
tn	long
]	O
=	O
mpn_dc_sqrtrem	(*(long),*(long),long)->(long)
(	O
sp	*(long)
,	O
rp	*(long)
,	O
tn	long
)	O
)	O
;	O
}	O
MPN_NORMALIZE	O
(	O
rp	*(long)
,	O
rn	long
)	O
;	O
TMP_FREE	O
;	O
return	O
rn	long
;	O
}	O
