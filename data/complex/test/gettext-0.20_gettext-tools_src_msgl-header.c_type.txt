static	O
const	O
struct	O
{	O
const	O
char	O
*	O
name	*(char)
;	O
size_t	long
len	long
;	O
}	O
known_fields	array(struct(*(char),long))
[	O
]	O
=	O
{	O
{	O
"Project-Id-Version:"	*(char)
,	O
sizeof	O
(	O
"Project-Id-Version:"	*(char)
)	O
-	O
1	int
}	O
,	O
{	O
"Report-Msgid-Bugs-To:"	*(char)
,	O
sizeof	O
(	O
"Report-Msgid-Bugs-To:"	*(char)
)	O
-	O
1	int
}	O
,	O
{	O
"POT-Creation-Date:"	*(char)
,	O
sizeof	O
(	O
"POT-Creation-Date:"	*(char)
)	O
-	O
1	int
}	O
,	O
{	O
"PO-Revision-Date:"	*(char)
,	O
sizeof	O
(	O
"PO-Revision-Date:"	*(char)
)	O
-	O
1	int
}	O
,	O
{	O
"Last-Translator:"	*(char)
,	O
sizeof	O
(	O
"Last-Translator:"	*(char)
)	O
-	O
1	int
}	O
,	O
{	O
"Language-Team:"	*(char)
,	O
sizeof	O
(	O
"Language-Team:"	*(char)
)	O
-	O
1	int
}	O
,	O
{	O
"Language:"	*(char)
,	O
sizeof	O
(	O
"Language:"	*(char)
)	O
-	O
1	int
}	O
,	O
{	O
"MIME-Version:"	*(char)
,	O
sizeof	O
(	O
"MIME-Version:"	*(char)
)	O
-	O
1	int
}	O
,	O
{	O
"Content-Type:"	*(char)
,	O
sizeof	O
(	O
"Content-Type:"	*(char)
)	O
-	O
1	int
}	O
,	O
{	O
"Content-Transfer-Encoding:"	*(char)
,	O
sizeof	O
(	O
"Content-Transfer-Encoding:"	*(char)
)	O
-	O
1	int
}	O
}	O
;	O
void	O
msgdomain_list_set_header_field	(*(struct(*(*(struct`)),long,long,bool,*(char))),*(char),*(char))->(void)
(	O
msgdomain_list_ty	struct
*	O
mdlp	*(struct(*(*(struct(*`,*`))),long,long,bool,*(char)))
,	O
const	O
char	O
*	O
field	*(char)
,	O
const	O
char	O
*	O
value	*(char)
)	O
{	O
size_t	long
field_len	long
;	O
int	O
field_index	int
;	O
size_t	long
k	long
,	O
i	long
;	O
field_len	long
=	O
strlen	(*(char))->(long)
(	O
field	*(char)
)	O
;	O
field_index	int
=	O
-	O
1	int
;	O
for	O
(	O
k	long
=	O
0	int
;	O
k	long
<	O
SIZEOF	O
(	O
known_fields	array(struct(*(char),long))
)	O
;	O
k	long
++	O
)	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
known_fields	array(struct(*(char),long))
[	O
k	long
]	O
.	O
name	*(char)
,	O
field	*(char)
)	O
==	O
0	int
)	O
{	O
field_index	int
=	O
k	long
;	O
break	O
;	O
}	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
mdlp	*(struct(*(*(struct(*`,*`))),long,long,bool,*(char)))
->	O
nitems	long
;	O
i	long
++	O
)	O
{	O
message_list_ty	struct
*	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
=	O
mdlp	*(struct(*(*(struct(*`,*`))),long,long,bool,*(char)))
->	O
item	*(*(char))
[	O
i	long
]	O
->	O
messages	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
;	O
size_t	long
j	long
;	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
->	O
nitems	long
;	O
j	long
++	O
)	O
if	O
(	O
is_header	O
(	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
->	O
item	*(*(char))
[	O
j	long
]	O
)	O
&&	O
!	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
->	O
item	*(*(char))
[	O
j	long
]	O
->	O
obsolete	bool
)	O
{	O
message_ty	struct
*	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
=	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
->	O
item	*(*(char))
[	O
j	long
]	O
;	O
const	O
char	O
*	O
header	*(char)
=	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
msgstr	*(char)
;	O
char	O
*	O
new_header	*(char)
=	O
XNMALLOC	O
(	O
strlen	(*(char))->(long)
(	O
header	*(char)
)	O
+	O
1	int
+	O
strlen	(*(char))->(long)
(	O
field	*(char)
)	O
+	O
1	int
+	O
strlen	(*(char))->(long)
(	O
value	*(char)
)	O
+	O
1	int
+	O
1	int
,	O
char	O
)	O
;	O
const	O
char	O
*	O
h	*(char)
;	O
for	O
(	O
h	*(char)
=	O
header	*(char)
;	O
*	O
h	*(char)
!=	O
'\0'	O
;	O
)	O
{	O
if	O
(	O
strncmp	(*(char),*(char),long)->(int)
(	O
h	*(char)
,	O
field	*(char)
,	O
field_len	long
)	O
==	O
0	int
)	O
break	O
;	O
h	*(char)
=	O
strchr	(*(char),int)->(*(char))
(	O
h	*(char)
,	O
'\n'	O
)	O
;	O
if	O
(	O
h	*(char)
==	O
NULL	O
)	O
break	O
;	O
h	*(char)
++	O
;	O
}	O
if	O
(	O
h	*(char)
!=	O
NULL	O
&&	O
*	O
h	*(char)
!=	O
'\0'	O
)	O
{	O
char	O
*	O
p	*(void)
=	O
new_header	*(char)
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
p	*(void)
,	O
header	*(char)
,	O
h	*(char)
-	O
header	*(char)
)	O
;	O
p	*(void)
+=	O
h	*(char)
-	O
header	*(char)
;	O
p	*(void)
=	O
stpcpy	(*(char),*(char))->(*(char))
(	O
p	*(void)
,	O
field	*(char)
)	O
;	O
p	*(void)
=	O
stpcpy	(*(char),*(char))->(*(char))
(	O
stpcpy	(*(char),*(char))->(*(char))
(	O
stpcpy	(*(char),*(char))->(*(char))
(	O
p	*(void)
,	O
" "	*(char)
)	O
,	O
value	*(char)
)	O
,	O
"\n"	*(char)
)	O
;	O
h	*(char)
=	O
strchr	(*(char),int)->(*(char))
(	O
h	*(char)
,	O
'\n'	O
)	O
;	O
if	O
(	O
h	*(char)
!=	O
NULL	O
)	O
{	O
h	*(char)
++	O
;	O
stpcpy	(*(char),*(char))->(*(char))
(	O
p	*(void)
,	O
h	*(char)
)	O
;	O
}	O
}	O
else	O
if	O
(	O
field_index	int
<	O
0	int
)	O
{	O
char	O
*	O
p	*(void)
=	O
new_header	*(char)
;	O
p	*(void)
=	O
stpcpy	(*(char),*(char))->(*(char))
(	O
p	*(void)
,	O
header	*(char)
)	O
;	O
if	O
(	O
p	*(void)
>	O
new_header	*(char)
&&	O
p	*(void)
[	O
-	O
1	int
]	O
!=	O
'\n'	O
)	O
*	O
p	*(void)
++	O
=	O
'\n'	O
;	O
p	*(void)
=	O
stpcpy	(*(char),*(char))->(*(char))
(	O
p	*(void)
,	O
field	*(char)
)	O
;	O
stpcpy	(*(char),*(char))->(*(char))
(	O
stpcpy	(*(char),*(char))->(*(char))
(	O
stpcpy	(*(char),*(char))->(*(char))
(	O
p	*(void)
,	O
" "	*(char)
)	O
,	O
value	*(char)
)	O
,	O
"\n"	*(char)
)	O
;	O
}	O
else	O
{	O
for	O
(	O
h	*(char)
=	O
header	*(char)
;	O
*	O
h	*(char)
!=	O
'\0'	O
;	O
)	O
{	O
for	O
(	O
k	long
=	O
field_index	int
+	O
1	int
;	O
k	long
<	O
SIZEOF	O
(	O
known_fields	array(struct(*(char),long))
)	O
;	O
k	long
++	O
)	O
if	O
(	O
strncmp	(*(char),*(char),long)->(int)
(	O
h	*(char)
,	O
known_fields	array(struct(*(char),long))
[	O
k	long
]	O
.	O
name	*(char)
,	O
known_fields	array(struct(*(char),long))
[	O
k	long
]	O
.	O
len	long
)	O
==	O
0	int
)	O
break	O
;	O
if	O
(	O
k	long
<	O
SIZEOF	O
(	O
known_fields	array(struct(*(char),long))
)	O
)	O
break	O
;	O
h	*(char)
=	O
strchr	(*(char),int)->(*(char))
(	O
h	*(char)
,	O
'\n'	O
)	O
;	O
if	O
(	O
h	*(char)
==	O
NULL	O
)	O
break	O
;	O
h	*(char)
++	O
;	O
}	O
if	O
(	O
h	*(char)
!=	O
NULL	O
&&	O
*	O
h	*(char)
!=	O
'\0'	O
)	O
{	O
char	O
*	O
p	*(void)
=	O
new_header	*(char)
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
p	*(void)
,	O
header	*(char)
,	O
h	*(char)
-	O
header	*(char)
)	O
;	O
p	*(void)
+=	O
h	*(char)
-	O
header	*(char)
;	O
p	*(void)
=	O
stpcpy	(*(char),*(char))->(*(char))
(	O
p	*(void)
,	O
field	*(char)
)	O
;	O
p	*(void)
=	O
stpcpy	(*(char),*(char))->(*(char))
(	O
stpcpy	(*(char),*(char))->(*(char))
(	O
stpcpy	(*(char),*(char))->(*(char))
(	O
p	*(void)
,	O
" "	*(char)
)	O
,	O
value	*(char)
)	O
,	O
"\n"	*(char)
)	O
;	O
stpcpy	(*(char),*(char))->(*(char))
(	O
p	*(void)
,	O
h	*(char)
)	O
;	O
}	O
else	O
{	O
char	O
*	O
p	*(void)
=	O
new_header	*(char)
;	O
p	*(void)
=	O
stpcpy	(*(char),*(char))->(*(char))
(	O
p	*(void)
,	O
header	*(char)
)	O
;	O
if	O
(	O
p	*(void)
>	O
new_header	*(char)
&&	O
p	*(void)
[	O
-	O
1	int
]	O
!=	O
'\n'	O
)	O
*	O
p	*(void)
++	O
=	O
'\n'	O
;	O
p	*(void)
=	O
stpcpy	(*(char),*(char))->(*(char))
(	O
p	*(void)
,	O
field	*(char)
)	O
;	O
stpcpy	(*(char),*(char))->(*(char))
(	O
stpcpy	(*(char),*(char))->(*(char))
(	O
stpcpy	(*(char),*(char))->(*(char))
(	O
p	*(void)
,	O
" "	*(char)
)	O
,	O
value	*(char)
)	O
,	O
"\n"	*(char)
)	O
;	O
}	O
}	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
msgstr	*(char)
=	O
new_header	*(char)
;	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
msgstr_len	long
=	O
strlen	(*(char))->(long)
(	O
new_header	*(char)
)	O
+	O
1	int
;	O
}	O
}	O
}	O
void	O
message_list_delete_header_field	(*(struct(*(*(struct`)),long,long,bool,struct(long,long,*(struct`),*(struct`),struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int)))),*(char))->(void)
(	O
message_list_ty	struct
*	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
,	O
const	O
char	O
*	O
field	*(char)
)	O
{	O
size_t	long
field_len	long
=	O
strlen	(*(char))->(long)
(	O
field	*(char)
)	O
;	O
size_t	long
j	long
;	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
->	O
nitems	long
;	O
j	long
++	O
)	O
if	O
(	O
is_header	O
(	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
->	O
item	*(*(char))
[	O
j	long
]	O
)	O
&&	O
!	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
->	O
item	*(*(char))
[	O
j	long
]	O
->	O
obsolete	bool
)	O
{	O
message_ty	struct
*	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
=	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
->	O
item	*(*(char))
[	O
j	long
]	O
;	O
const	O
char	O
*	O
header	*(char)
=	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
msgstr	*(char)
;	O
const	O
char	O
*	O
h	*(char)
;	O
for	O
(	O
h	*(char)
=	O
header	*(char)
;	O
*	O
h	*(char)
!=	O
'\0'	O
;	O
)	O
{	O
if	O
(	O
strncmp	(*(char),*(char),long)->(int)
(	O
h	*(char)
,	O
field	*(char)
,	O
field_len	long
)	O
==	O
0	int
)	O
break	O
;	O
h	*(char)
=	O
strchr	(*(char),int)->(*(char))
(	O
h	*(char)
,	O
'\n'	O
)	O
;	O
if	O
(	O
h	*(char)
==	O
NULL	O
)	O
break	O
;	O
h	*(char)
++	O
;	O
}	O
if	O
(	O
h	*(char)
!=	O
NULL	O
&&	O
*	O
h	*(char)
!=	O
'\0'	O
)	O
{	O
char	O
*	O
new_header	*(char)
=	O
XCALLOC	O
(	O
strlen	(*(char))->(long)
(	O
header	*(char)
)	O
+	O
1	int
,	O
char	O
)	O
;	O
char	O
*	O
p	*(void)
=	O
new_header	*(char)
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
p	*(void)
,	O
header	*(char)
,	O
h	*(char)
-	O
header	*(char)
)	O
;	O
p	*(void)
+=	O
h	*(char)
-	O
header	*(char)
;	O
h	*(char)
=	O
strchr	(*(char),int)->(*(char))
(	O
h	*(char)
,	O
'\n'	O
)	O
;	O
if	O
(	O
h	*(char)
!=	O
NULL	O
)	O
{	O
h	*(char)
++	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
p	*(void)
,	O
h	*(char)
)	O
;	O
}	O
else	O
*	O
p	*(void)
=	O
'\0'	O
;	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
msgstr	*(char)
=	O
new_header	*(char)
;	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
msgstr_len	long
=	O
strlen	(*(char))->(long)
(	O
new_header	*(char)
)	O
+	O
1	int
;	O
}	O
}	O
}	O
