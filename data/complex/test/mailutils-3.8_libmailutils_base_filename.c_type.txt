char	O
*	O
mu_get_homedir	()->(*(char))
(	O
void	O
)	O
{	O
char	O
*	O
homedir	*(char)
=	O
getenv	(*(char))->(*(char))
(	O
"HOME"	*(char)
)	O
;	O
if	O
(	O
homedir	*(char)
)	O
homedir	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
homedir	*(char)
)	O
;	O
else	O
{	O
struct	O
mu_auth_data	struct(*(char),*(char),*(char),int,int,*(char),*(char),*(char),*(char),long,int,int)
*	O
auth	*(*(struct(*(char),*(char),*(char),int,int,*(char),*(char),*(char),*(char),long,int,int)))
=	O
mu_get_auth_by_uid	(int)->(*(struct(*(char),*(char),*(char),int,int,*(char),*(char),*(char),*(char),long,int,int)))
(	O
geteuid	()->(int)
(	O
)	O
)	O
;	O
if	O
(	O
!	O
auth	*(*(struct(*(char),*(char),*(char),int,int,*(char),*(char),*(char),*(char),long,int,int)))
)	O
return	O
NULL	O
;	O
homedir	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
auth	*(*(struct(*(char),*(char),*(char),int,int,*(char),*(char),*(char),*(char),long,int,int)))
->	O
dir	*(char)
)	O
;	O
mu_auth_data_free	(*(struct(*(char),*(char),*(char),int,int,*(char),*(char),*(char),*(char),long,int,int)))->(void)
(	O
auth	*(*(struct(*(char),*(char),*(char),int,int,*(char),*(char),*(char),*(char),long,int,int)))
)	O
;	O
}	O
return	O
homedir	*(char)
;	O
}	O
char	O
*	O
mu_get_full_path	(*(char))->(*(char))
(	O
const	O
char	O
*	O
file	*(char)
)	O
{	O
char	O
*	O
p	*(char)
=	O
NULL	O
;	O
if	O
(	O
!	O
file	*(char)
)	O
p	*(char)
=	O
mu_getcwd	()->(*(char))
(	O
)	O
;	O
else	O
if	O
(	O
*	O
file	*(char)
!=	O
'/'	O
)	O
{	O
char	O
*	O
cwd	*(char)
=	O
mu_getcwd	()->(*(char))
(	O
)	O
;	O
if	O
(	O
cwd	*(char)
)	O
{	O
p	*(char)
=	O
mu_make_file_name	O
(	O
cwd	*(char)
,	O
file	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
cwd	*(char)
)	O
;	O
}	O
}	O
else	O
p	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
file	*(char)
)	O
;	O
return	O
p	*(char)
;	O
}	O
char	O
*	O
mu_normalize_path	(*(char))->(*(char))
(	O
char	O
*	O
path	*(char)
)	O
{	O
int	O
len	int
;	O
char	O
*	O
p	*(char)
;	O
if	O
(	O
!	O
path	*(char)
)	O
return	O
path	*(char)
;	O
len	int
=	O
strlen	(*(char))->(long)
(	O
path	*(char)
)	O
;	O
if	O
(	O
len	int
==	O
0	int
)	O
return	O
path	*(char)
;	O
if	O
(	O
len	int
&&	O
path	*(char)
[	O
len	int
-	O
1	int
]	O
==	O
'/'	O
)	O
path	*(char)
[	O
len	int
-	O
1	int
]	O
=	O
0	int
;	O
for	O
(	O
p	*(char)
=	O
strchr	(*(char),int)->(*(char))
(	O
path	*(char)
,	O
'.'	O
)	O
;	O
p	*(char)
;	O
p	*(char)
=	O
strchr	(*(char),int)->(*(char))
(	O
p	*(char)
,	O
'.'	O
)	O
)	O
{	O
if	O
(	O
p	*(char)
>	O
path	*(char)
&&	O
p	*(char)
[	O
-	O
1	int
]	O
==	O
'/'	O
)	O
{	O
if	O
(	O
p	*(char)
[	O
1	int
]	O
==	O
'.'	O
&&	O
(	O
p	*(char)
[	O
2	int
]	O
==	O
0	int
||	O
p	*(char)
[	O
2	int
]	O
==	O
'/'	O
)	O
)	O
{	O
char	O
*	O
q	*(char)
,	O
*	O
s	*(char)
;	O
for	O
(	O
q	*(char)
=	O
p	*(char)
-	O
2	int
;	O
*	O
q	*(char)
!=	O
'/'	O
&&	O
q	*(char)
>=	O
path	*(char)
;	O
q	*(char)
--	O
)	O
;	O
if	O
(	O
q	*(char)
<	O
path	*(char)
)	O
break	O
;	O
s	*(char)
=	O
p	*(char)
+	O
2	int
;	O
p	*(char)
=	O
q	*(char)
;	O
while	O
(	O
(	O
*	O
q	*(char)
++	O
=	O
*	O
s	*(char)
++	O
)	O
)	O
;	O
continue	O
;	O
}	O
}	O
p	*(char)
++	O
;	O
}	O
if	O
(	O
path	*(char)
[	O
0	int
]	O
==	O
0	int
)	O
{	O
path	*(char)
[	O
0	int
]	O
=	O
'/'	O
;	O
path	*(char)
[	O
1	int
]	O
=	O
0	int
;	O
}	O
return	O
path	*(char)
;	O
}	O
char	O
*	O
mu_expand_path_pattern	(*(char),*(char))->(*(char))
(	O
const	O
char	O
*	O
pattern	*(char)
,	O
const	O
char	O
*	O
username	*(char)
)	O
{	O
const	O
char	O
*	O
p	*(char)
;	O
char	O
*	O
q	*(char)
;	O
char	O
*	O
path	*(char)
;	O
size_t	long
len	int
=	O
0	int
;	O
struct	O
mu_auth_data	struct(*(char),*(char),*(char),int,int,*(char),*(char),*(char),*(char),long,int,int)
*	O
auth	*(*(struct(*(char),*(char),*(char),int,int,*(char),*(char),*(char),*(char),long,int,int)))
=	O
NULL	O
;	O
for	O
(	O
p	*(char)
=	O
pattern	*(char)
;	O
*	O
p	*(char)
;	O
p	*(char)
++	O
)	O
{	O
if	O
(	O
*	O
p	*(char)
==	O
'~'	O
)	O
{	O
if	O
(	O
!	O
auth	*(*(struct(*(char),*(char),*(char),int,int,*(char),*(char),*(char),*(char),long,int,int)))
)	O
{	O
auth	*(*(struct(*(char),*(char),*(char),int,int,*(char),*(char),*(char),*(char),long,int,int)))
=	O
mu_get_auth_by_name	(*(char))->(*(struct(*(char),*(char),*(char),int,int,*(char),*(char),*(char),*(char),long,int,int)))
(	O
username	*(char)
)	O
;	O
if	O
(	O
!	O
auth	*(*(struct(*(char),*(char),*(char),int,int,*(char),*(char),*(char),*(char),long,int,int)))
)	O
return	O
NULL	O
;	O
}	O
len	int
+=	O
strlen	(*(char))->(long)
(	O
auth	*(*(struct(*(char),*(char),*(char),int,int,*(char),*(char),*(char),*(char),long,int,int)))
->	O
dir	*(char)
)	O
;	O
}	O
else	O
if	O
(	O
*	O
p	*(char)
==	O
'%'	O
)	O
switch	O
(	O
*	O
++	O
p	*(char)
)	O
{	O
case	O
'u'	O
:	O
len	int
+=	O
strlen	(*(char))->(long)
(	O
username	*(char)
)	O
;	O
break	O
;	O
case	O
'h'	O
:	O
if	O
(	O
!	O
auth	*(*(struct(*(char),*(char),*(char),int,int,*(char),*(char),*(char),*(char),long,int,int)))
)	O
{	O
auth	*(*(struct(*(char),*(char),*(char),int,int,*(char),*(char),*(char),*(char),long,int,int)))
=	O
mu_get_auth_by_name	(*(char))->(*(struct(*(char),*(char),*(char),int,int,*(char),*(char),*(char),*(char),long,int,int)))
(	O
username	*(char)
)	O
;	O
if	O
(	O
!	O
auth	*(*(struct(*(char),*(char),*(char),int,int,*(char),*(char),*(char),*(char),long,int,int)))
)	O
return	O
NULL	O
;	O
}	O
len	int
+=	O
strlen	(*(char))->(long)
(	O
auth	*(*(struct(*(char),*(char),*(char),int,int,*(char),*(char),*(char),*(char),long,int,int)))
->	O
dir	*(char)
)	O
;	O
break	O
;	O
case	O
'%'	O
:	O
len	int
++	O
;	O
break	O
;	O
default	O
:	O
len	int
+=	O
2	int
;	O
}	O
else	O
len	int
++	O
;	O
}	O
path	*(char)
=	O
malloc	(long)->(*(void))
(	O
len	int
+	O
1	int
)	O
;	O
if	O
(	O
!	O
path	*(char)
)	O
return	O
NULL	O
;	O
p	*(char)
=	O
pattern	*(char)
;	O
q	*(char)
=	O
path	*(char)
;	O
while	O
(	O
*	O
p	*(char)
)	O
{	O
size_t	long
off	long
=	O
strcspn	(*(char),*(char))->(long)
(	O
p	*(char)
,	O
"~%"	*(char)
)	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
q	*(char)
,	O
p	*(char)
,	O
off	long
)	O
;	O
q	*(char)
+=	O
off	long
;	O
p	*(char)
+=	O
off	long
;	O
if	O
(	O
*	O
p	*(char)
==	O
'~'	O
)	O
{	O
strcpy	(*(char),*(char))->(*(char))
(	O
q	*(char)
,	O
auth	*(*(struct(*(char),*(char),*(char),int,int,*(char),*(char),*(char),*(char),long,int,int)))
->	O
dir	*(char)
)	O
;	O
q	*(char)
+=	O
strlen	(*(char))->(long)
(	O
auth	*(*(struct(*(char),*(char),*(char),int,int,*(char),*(char),*(char),*(char),long,int,int)))
->	O
dir	*(char)
)	O
;	O
p	*(char)
++	O
;	O
}	O
else	O
if	O
(	O
*	O
p	*(char)
==	O
'%'	O
)	O
{	O
switch	O
(	O
*	O
++	O
p	*(char)
)	O
{	O
case	O
'u'	O
:	O
strcpy	(*(char),*(char))->(*(char))
(	O
q	*(char)
,	O
username	*(char)
)	O
;	O
q	*(char)
+=	O
strlen	(*(char))->(long)
(	O
username	*(char)
)	O
;	O
break	O
;	O
case	O
'h'	O
:	O
strcpy	(*(char),*(char))->(*(char))
(	O
q	*(char)
,	O
auth	*(*(struct(*(char),*(char),*(char),int,int,*(char),*(char),*(char),*(char),long,int,int)))
->	O
dir	*(char)
)	O
;	O
q	*(char)
+=	O
strlen	(*(char))->(long)
(	O
auth	*(*(struct(*(char),*(char),*(char),int,int,*(char),*(char),*(char),*(char),long,int,int)))
->	O
dir	*(char)
)	O
;	O
break	O
;	O
case	O
'%'	O
:	O
*	O
q	*(char)
++	O
=	O
'%'	O
;	O
break	O
;	O
default	O
:	O
*	O
q	*(char)
++	O
=	O
'%'	O
;	O
*	O
q	*(char)
++	O
=	O
*	O
p	*(char)
;	O
}	O
p	*(char)
++	O
;	O
}	O
}	O
*	O
q	*(char)
=	O
0	int
;	O
if	O
(	O
auth	*(*(struct(*(char),*(char),*(char),int,int,*(char),*(char),*(char),*(char),long,int,int)))
)	O
mu_auth_data_free	(*(struct(*(char),*(char),*(char),int,int,*(char),*(char),*(char),*(char),long,int,int)))->(void)
(	O
auth	*(*(struct(*(char),*(char),*(char),int,int,*(char),*(char),*(char),*(char),long,int,int)))
)	O
;	O
return	O
path	*(char)
;	O
}	O
