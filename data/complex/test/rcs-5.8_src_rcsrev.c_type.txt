static	O
int	O
split	(*(char),*(*(char)))->(int)
(	O
char	O
const	O
*	O
s	*(char)
,	O
char	O
const	O
*	O
*	O
lastdot	*(*(char))
)	O
{	O
size_t	long
count	long
;	O
*	O
lastdot	*(*(char))
=	O
NULL	O
;	O
if	O
(	O
!	O
s	*(char)
||	O
!	O
*	O
s	*(char)
)	O
return	O
0	int
;	O
count	long
=	O
1	int
;	O
do	O
{	O
if	O
(	O
*	O
s	*(char)
++	O
==	O
'.'	O
)	O
{	O
*	O
lastdot	*(*(char))
=	O
s	*(char)
-	O
1	int
;	O
count	long
++	O
;	O
}	O
}	O
while	O
(	O
*	O
s	*(char)
)	O
;	O
return	O
count	long
;	O
}	O
int	O
countnumflds	(*(char))->(int)
(	O
char	O
const	O
*	O
s	*(char)
)	O
{	O
register	O
char	O
const	O
*	O
sp	*(char)
;	O
register	O
int	O
count	long
;	O
if	O
(	O
!	O
(	O
sp	*(char)
=	O
s	*(char)
)	O
||	O
!	O
*	O
sp	*(char)
)	O
return	O
0	int
;	O
count	long
=	O
1	int
;	O
do	O
{	O
if	O
(	O
*	O
sp	*(char)
++	O
==	O
'.'	O
)	O
count	long
++	O
;	O
}	O
while	O
(	O
*	O
sp	*(char)
)	O
;	O
return	O
(	O
count	long
)	O
;	O
}	O
static	O
void	O
accumulate_branchno	(*(struct(*(char),*(struct),*(void),long)),*(char))->(void)
(	O
struct	O
divvy	struct(*(char),*(struct),*(void),long)
*	O
space	*(struct)
,	O
char	O
const	O
*	O
revno	*(char)
)	O
{	O
char	O
const	O
*	O
end	*(char)
;	O
int	O
nfields	int
=	O
split	(*(char),*(*(char)))->(int)
(	O
revno	*(char)
,	O
&	O
end	*(char)
)	O
;	O
if	O
(	O
nfields	int
&	O
1	int
)	O
accs	O
(	O
space	*(struct)
,	O
revno	*(char)
)	O
;	O
else	O
accumulate_range	(*(struct(*(char),*(struct),*(void),long)),*(char),*(char))->(void)
(	O
space	*(struct)
,	O
revno	*(char)
,	O
end	*(char)
)	O
;	O
}	O
struct	O
cbuf	struct(*(char),long)
take	(long,*(char))->(struct(*(char),long))
(	O
size_t	long
count	long
,	O
char	O
const	O
*	O
ref	*(char)
)	O
{	O
struct	O
cbuf	struct(*(char),long)
rv	struct(*(char),long)
;	O
char	O
const	O
*	O
end	*(char)
=	O
ref	*(char)
;	O
if	O
(	O
!	O
count	long
)	O
count	long
=	O
-	O
2	int
+	O
(	O
1U	int
|	O
(	O
1	int
+	O
countnumflds	(*(char))->(int)
(	O
ref	*(char)
)	O
)	O
)	O
;	O
while	O
(	O
count	long
--	O
)	O
while	O
(	O
*	O
end	*(char)
&&	O
'.'	O
!=	O
*	O
end	*(char)
++	O
)	O
continue	O
;	O
accumulate_range	(*(struct(*(char),*(struct),*(void),long)),*(char),*(char))->(void)
(	O
SINGLE	O
,	O
ref	*(char)
,	O
*	O
end	*(char)
?	O
end	*(char)
-	O
1	int
:	O
end	*(char)
)	O
;	O
rv	struct(*(char),long)
.	O
string	*(char)
=	O
finish_string	(*(struct(*(char),*(struct),*(void),long)),*(long))->(*(char))
(	O
SINGLE	O
,	O
&	O
rv	struct(*(char),long)
.	O
size	long
)	O
;	O
return	O
rv	struct(*(char),long)
;	O
}	O
int	O
cmpnum	(*(char),*(char))->(int)
(	O
char	O
const	O
*	O
num1	*(char)
,	O
char	O
const	O
*	O
num2	*(char)
)	O
{	O
register	O
char	O
const	O
*	O
s1	*(char)
,	O
*	O
s2	*(char)
;	O
register	O
size_t	long
d1	*(char)
,	O
d2	*(char)
;	O
register	O
int	O
r	*(struct(*(char),*(char),long,*(struct),long,*(struct),long,*(struct),bool,*(struct),*(struct),int,long,*(struct),*(struct),long,*(struct),*(struct)))
;	O
s1	*(char)
=	O
num1	*(char)
?	O
num1	*(char)
:	O
""	*(char)
;	O
s2	*(char)
=	O
num2	*(char)
?	O
num2	*(char)
:	O
""	*(char)
;	O
for	O
(	O
;	O
;	O
)	O
{	O
if	O
(	O
!	O
*	O
s1	*(char)
)	O
return	O
(	O
unsigned	O
char	O
)	O
*	O
s2	*(char)
;	O
if	O
(	O
!	O
*	O
s2	*(char)
)	O
return	O
-	O
1	int
;	O
while	O
(	O
*	O
s1	*(char)
==	O
'0'	O
)	O
++	O
s1	*(char)
;	O
while	O
(	O
*	O
s2	*(char)
==	O
'0'	O
)	O
++	O
s2	*(char)
;	O
for	O
(	O
d1	*(char)
=	O
0	int
;	O
isdigit	(int)->(int)
(	O
*	O
(	O
s1	*(char)
+	O
d1	*(char)
)	O
)	O
;	O
d1	*(char)
++	O
)	O
continue	O
;	O
for	O
(	O
d2	*(char)
=	O
0	int
;	O
isdigit	(int)->(int)
(	O
*	O
(	O
s2	*(char)
+	O
d2	*(char)
)	O
)	O
;	O
d2	*(char)
++	O
)	O
continue	O
;	O
if	O
(	O
d1	*(char)
!=	O
d2	*(char)
)	O
return	O
d1	*(char)
<	O
d2	*(char)
?	O
-	O
1	int
:	O
1	int
;	O
if	O
(	O
(	O
r	*(struct(*(char),*(char),long,*(struct),long,*(struct),long,*(struct),bool,*(struct),*(struct),int,long,*(struct),*(struct),long,*(struct),*(struct)))
=	O
memcmp	(*(void),*(void),long)->(int)
(	O
s1	*(char)
,	O
s2	*(char)
,	O
d1	*(char)
)	O
)	O
)	O
return	O
r	*(struct(*(char),*(char),long,*(struct),long,*(struct),long,*(struct),bool,*(struct),*(struct),int,long,*(struct),*(struct),long,*(struct),*(struct)))
;	O
s1	*(char)
+=	O
d1	*(char)
;	O
s2	*(char)
+=	O
d1	*(char)
;	O
if	O
(	O
*	O
s1	*(char)
)	O
s1	*(char)
++	O
;	O
if	O
(	O
*	O
s2	*(char)
)	O
s2	*(char)
++	O
;	O
}	O
}	O
int	O
cmpnumfld	(*(char),*(char),int)->(int)
(	O
char	O
const	O
*	O
num1	*(char)
,	O
char	O
const	O
*	O
num2	*(char)
,	O
int	O
fld	int
)	O
{	O
register	O
char	O
const	O
*	O
s1	*(char)
,	O
*	O
s2	*(char)
;	O
register	O
size_t	long
d1	*(char)
,	O
d2	*(char)
;	O
s1	*(char)
=	O
num1	*(char)
;	O
s2	*(char)
=	O
num2	*(char)
;	O
while	O
(	O
--	O
fld	int
)	O
{	O
while	O
(	O
*	O
s1	*(char)
++	O
!=	O
'.'	O
)	O
continue	O
;	O
while	O
(	O
*	O
s2	*(char)
++	O
!=	O
'.'	O
)	O
continue	O
;	O
}	O
while	O
(	O
*	O
s1	*(char)
==	O
'0'	O
)	O
++	O
s1	*(char)
;	O
for	O
(	O
d1	*(char)
=	O
0	int
;	O
isdigit	(int)->(int)
(	O
*	O
(	O
s1	*(char)
+	O
d1	*(char)
)	O
)	O
;	O
d1	*(char)
++	O
)	O
continue	O
;	O
while	O
(	O
*	O
s2	*(char)
==	O
'0'	O
)	O
++	O
s2	*(char)
;	O
for	O
(	O
d2	*(char)
=	O
0	int
;	O
isdigit	(int)->(int)
(	O
*	O
(	O
s2	*(char)
+	O
d2	*(char)
)	O
)	O
;	O
d2	*(char)
++	O
)	O
continue	O
;	O
return	O
d1	*(char)
<	O
d2	*(char)
?	O
-	O
1	int
:	O
d1	*(char)
==	O
d2	*(char)
?	O
memcmp	(*(void),*(void),long)->(int)
(	O
s1	*(char)
,	O
s2	*(char)
,	O
d1	*(char)
)	O
:	O
1	int
;	O
}	O
static	O
char	O
const	O
*	O
normalizeyear	(*(char),array(char))->(*(char))
(	O
char	O
const	O
*	O
date	*(char)
,	O
char	O
year	array(char)
[	O
5	int
]	O
)	O
{	O
if	O
(	O
isdigit	(int)->(int)
(	O
date	*(char)
[	O
0	int
]	O
)	O
&&	O
isdigit	(int)->(int)
(	O
date	*(char)
[	O
1	int
]	O
)	O
&&	O
!	O
isdigit	(int)->(int)
(	O
date	*(char)
[	O
2	int
]	O
)	O
)	O
{	O
year	array(char)
[	O
0	int
]	O
=	O
'1'	O
;	O
year	array(char)
[	O
1	int
]	O
=	O
'9'	O
;	O
year	array(char)
[	O
2	int
]	O
=	O
date	*(char)
[	O
0	int
]	O
;	O
year	array(char)
[	O
3	int
]	O
=	O
date	*(char)
[	O
1	int
]	O
;	O
year	array(char)
[	O
4	int
]	O
=	O
0	int
;	O
return	O
year	array(char)
;	O
}	O
else	O
return	O
date	*(char)
;	O
}	O
int	O
cmpdate	(*(char),*(char))->(int)
(	O
char	O
const	O
*	O
d1	*(char)
,	O
char	O
const	O
*	O
d2	*(char)
)	O
{	O
char	O
year1	array(char)
[	O
5	int
]	O
,	O
year2	array(char)
[	O
5	int
]	O
;	O
int	O
r	*(struct(*(char),*(char),long,*(struct),long,*(struct),long,*(struct),bool,*(struct),*(struct),int,long,*(struct),*(struct),long,*(struct),*(struct)))
=	O
cmpnumfld	(*(char),*(char),int)->(int)
(	O
normalizeyear	(*(char),array(char))->(*(char))
(	O
d1	*(char)
,	O
year1	array(char)
)	O
,	O
normalizeyear	(*(char),array(char))->(*(char))
(	O
d2	*(char)
,	O
year2	array(char)
)	O
,	O
1	int
)	O
;	O
if	O
(	O
r	*(struct(*(char),*(char),long,*(struct),long,*(struct),long,*(struct),bool,*(struct),*(struct),int,long,*(struct),*(struct),long,*(struct),*(struct)))
)	O
return	O
r	*(struct(*(char),*(char),long,*(struct),long,*(struct),long,*(struct),bool,*(struct),*(struct),int,long,*(struct),*(struct),long,*(struct),*(struct)))
;	O
else	O
{	O
while	O
(	O
isdigit	(int)->(int)
(	O
*	O
d1	*(char)
)	O
)	O
d1	*(char)
++	O
;	O
d1	*(char)
+=	O
*	O
d1	*(char)
==	O
'.'	O
;	O
while	O
(	O
isdigit	(int)->(int)
(	O
*	O
d2	*(char)
)	O
)	O
d2	*(char)
++	O
;	O
d2	*(char)
+=	O
*	O
d2	*(char)
==	O
'.'	O
;	O
return	O
cmpnum	(*(char),*(char))->(int)
(	O
d1	*(char)
,	O
d2	*(char)
)	O
;	O
}	O
}	O
static	O
void	O
cantfindbranch	(*(char),array(char),*(char),*(char))->(void)
(	O
char	O
const	O
*	O
revno	*(char)
,	O
char	O
const	O
date	*(char)
[	O
datesize	O
]	O
,	O
char	O
const	O
*	O
author	*(char)
,	O
char	O
const	O
*	O
state	*(char)
)	O
{	O
char	O
datebuf	array(char)
[	O
datesize	O
+	O
zonelenmax	int
]	O
;	O
RERR	O
(	O
"No revision on branch %s has%s%s%s%s%s%s."	*(char)
,	O
revno	*(char)
,	O
date	*(char)
?	O
" a date before "	*(char)
:	O
""	*(char)
,	O
date	*(char)
?	O
date2str	(array(char),array(char))->(*(char))
(	O
date	*(char)
,	O
datebuf	array(char)
)	O
:	O
""	*(char)
,	O
author	*(char)
?	O
" and author "	*(char)
+	O
(	O
date	*(char)
?	O
0	int
:	O
4	int
)	O
:	O
""	*(char)
,	O
author	*(char)
?	O
author	*(char)
:	O
""	*(char)
,	O
state	*(char)
?	O
" and state "	*(char)
+	O
(	O
date	*(char)
||	O
author	*(char)
?	O
0	int
:	O
4	int
)	O
:	O
""	*(char)
,	O
state	*(char)
?	O
state	*(char)
:	O
""	*(char)
)	O
;	O
}	O
static	O
void	O
absent	(*(char),int)->(void)
(	O
char	O
const	O
*	O
revno	*(char)
,	O
int	O
field	int
)	O
{	O
RERR	O
(	O
"%s %s absent"	*(char)
,	O
field	int
&	O
1	int
?	O
"revision"	*(char)
:	O
"branch"	*(char)
,	O
TAKE	O
(	O
field	int
,	O
revno	*(char)
)	O
)	O
;	O
}	O
int	O
compartial	(*(char),*(char),int)->(int)
(	O
char	O
const	O
*	O
num1	*(char)
,	O
char	O
const	O
*	O
num2	*(char)
,	O
int	O
length	int
)	O
{	O
register	O
char	O
const	O
*	O
s1	*(char)
,	O
*	O
s2	*(char)
;	O
register	O
size_t	long
d1	*(char)
,	O
d2	*(char)
;	O
register	O
int	O
r	*(struct(*(char),*(char),long,*(struct),long,*(struct),long,*(struct),bool,*(struct),*(struct),int,long,*(struct),*(struct),long,*(struct),*(struct)))
;	O
s1	*(char)
=	O
num1	*(char)
;	O
s2	*(char)
=	O
num2	*(char)
;	O
if	O
(	O
!	O
s1	*(char)
)	O
return	O
1	int
;	O
if	O
(	O
!	O
s2	*(char)
)	O
return	O
-	O
1	int
;	O
for	O
(	O
;	O
;	O
)	O
{	O
if	O
(	O
!	O
*	O
s1	*(char)
)	O
return	O
1	int
;	O
if	O
(	O
!	O
*	O
s2	*(char)
)	O
return	O
-	O
1	int
;	O
while	O
(	O
*	O
s1	*(char)
==	O
'0'	O
)	O
++	O
s1	*(char)
;	O
for	O
(	O
d1	*(char)
=	O
0	int
;	O
isdigit	(int)->(int)
(	O
*	O
(	O
s1	*(char)
+	O
d1	*(char)
)	O
)	O
;	O
d1	*(char)
++	O
)	O
continue	O
;	O
while	O
(	O
*	O
s2	*(char)
==	O
'0'	O
)	O
++	O
s2	*(char)
;	O
for	O
(	O
d2	*(char)
=	O
0	int
;	O
isdigit	(int)->(int)
(	O
*	O
(	O
s2	*(char)
+	O
d2	*(char)
)	O
)	O
;	O
d2	*(char)
++	O
)	O
continue	O
;	O
if	O
(	O
d1	*(char)
!=	O
d2	*(char)
)	O
return	O
d1	*(char)
<	O
d2	*(char)
?	O
-	O
1	int
:	O
1	int
;	O
if	O
(	O
(	O
r	*(struct(*(char),*(char),long,*(struct),long,*(struct),long,*(struct),bool,*(struct),*(struct),int,long,*(struct),*(struct),long,*(struct),*(struct)))
=	O
memcmp	(*(void),*(void),long)->(int)
(	O
s1	*(char)
,	O
s2	*(char)
,	O
d1	*(char)
)	O
)	O
)	O
return	O
r	*(struct(*(char),*(char),long,*(struct),long,*(struct),long,*(struct),bool,*(struct),*(struct),int,long,*(struct),*(struct),long,*(struct),*(struct)))
;	O
if	O
(	O
!	O
--	O
length	int
)	O
return	O
0	int
;	O
s1	*(char)
+=	O
d1	*(char)
;	O
s2	*(char)
+=	O
d1	*(char)
;	O
if	O
(	O
*	O
s1	*(char)
==	O
'.'	O
)	O
s1	*(char)
++	O
;	O
if	O
(	O
*	O
s2	*(char)
==	O
'.'	O
)	O
s2	*(char)
++	O
;	O
}	O
}	O
static	O
void	O
store1	(*(*(*(struct(*`,*`)))),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct(*`,*`)),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)))->(void)
(	O
struct	O
wlink	struct(*(void),*(struct(*(void),*(struct(*(void),*(struct`))))))
*	O
*	O
*	O
store	*(*(struct))
,	O
struct	O
delta	struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long)),bool,long)
*	O
next	*(struct(*(void),*(struct(*(void),*(struct`)))))
)	O
{	O
register	O
struct	O
wlink	struct(*(void),*(struct(*(void),*(struct(*(void),*(struct`))))))
*	O
p	*(char)
;	O
p	*(char)
=	O
FALLOC	O
(	O
struct	O
wlink	struct(*(void),*(struct(*(void),*(struct(*(void),*(struct`))))))
)	O
;	O
p	*(char)
->	O
entry	*(void)
=	O
next	*(struct(*(void),*(struct(*(void),*(struct`)))))
;	O
*	O
*	O
store	*(*(struct))
=	O
p	*(char)
;	O
*	O
store	*(*(struct))
=	O
&	O
p	*(char)
->	O
next	*(struct(*(void),*(struct(*(void),*(struct`)))))
;	O
}	O
static	O
struct	O
delta	struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long)),bool,long)
*	O
genbranch	(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct(*`,*`)),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)),*(char),int,*(char),*(char),*(char),*(*(struct(*(void),*(struct`)))))->(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct(*`,*`)),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)))
(	O
struct	O
delta	struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long)),bool,long)
const	O
*	O
bpoint	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
,	O
char	O
const	O
*	O
revno	*(char)
,	O
int	O
length	int
,	O
char	O
const	O
*	O
date	*(char)
,	O
char	O
const	O
*	O
author	*(char)
,	O
char	O
const	O
*	O
state	*(char)
,	O
struct	O
wlink	struct(*(void),*(struct(*(void),*(struct(*(void),*(struct`))))))
*	O
*	O
store	*(*(struct))
)	O
{	O
int	O
field	int
;	O
register	O
struct	O
delta	struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long)),bool,long)
*	O
d	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
,	O
*	O
trail	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
;	O
register	O
struct	O
wlink	struct(*(void),*(struct(*(void),*(struct(*(void),*(struct`))))))
const	O
*	O
bhead	*(struct(*(void),*(struct(*(void),*(struct`)))))
;	O
int	O
result	*(char)
;	O
char	O
datebuf	array(char)
[	O
datesize	O
+	O
zonelenmax	int
]	O
;	O
field	int
=	O
3	int
;	O
bhead	*(struct(*(void),*(struct(*(void),*(struct`)))))
=	O
bpoint	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
branches	*(struct)
;	O
do	O
{	O
if	O
(	O
!	O
bhead	*(struct(*(void),*(struct(*(void),*(struct`)))))
)	O
{	O
RERR	O
(	O
"no side branches present for %s"	*(char)
,	O
TAKE	O
(	O
field	int
-	O
1	int
,	O
revno	*(char)
)	O
)	O
;	O
return	O
NULL	O
;	O
}	O
while	O
(	O
d	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
=	O
bhead	*(struct(*(void),*(struct(*(void),*(struct`)))))
->	O
entry	*(void)
,	O
0	int
<	O
(	O
result	*(char)
=	O
cmpnumfld	(*(char),*(char),int)->(int)
(	O
revno	*(char)
,	O
d	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
num	*(char)
,	O
field	int
)	O
)	O
)	O
{	O
bhead	*(struct(*(void),*(struct(*(void),*(struct`)))))
=	O
bhead	*(struct(*(void),*(struct(*(void),*(struct`)))))
->	O
next	*(struct(*(void),*(struct(*(void),*(struct`)))))
;	O
if	O
(	O
!	O
bhead	*(struct(*(void),*(struct(*(void),*(struct`)))))
)	O
{	O
RERR	O
(	O
"branch number %s too high"	*(char)
,	O
TAKE	O
(	O
field	int
,	O
revno	*(char)
)	O
)	O
;	O
return	O
NULL	O
;	O
}	O
}	O
if	O
(	O
result	*(char)
<	O
0	int
)	O
{	O
absent	(*(char),int)->(void)
(	O
revno	*(char)
,	O
field	int
)	O
;	O
return	O
NULL	O
;	O
}	O
d	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
=	O
bhead	*(struct(*(void),*(struct(*(void),*(struct`)))))
->	O
entry	*(void)
;	O
if	O
(	O
length	int
==	O
field	int
)	O
{	O
trail	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
=	O
NULL	O
;	O
do	O
{	O
if	O
(	O
(	O
!	O
date	*(char)
||	O
!	O
DATE_LT	O
(	O
date	*(char)
,	O
d	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
date	*(char)
)	O
)	O
&&	O
(	O
!	O
author	*(char)
||	O
STR_SAME	O
(	O
author	*(char)
,	O
d	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
author	*(char)
)	O
)	O
&&	O
(	O
!	O
state	*(char)
||	O
STR_SAME	O
(	O
state	*(char)
,	O
d	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
state	*(char)
)	O
)	O
)	O
trail	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
=	O
d	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
;	O
d	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
=	O
d	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
ilk	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
;	O
}	O
while	O
(	O
d	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
)	O
;	O
if	O
(	O
!	O
trail	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
)	O
{	O
cantfindbranch	(*(char),array(char),*(char),*(char))->(void)
(	O
revno	*(char)
,	O
date	*(char)
,	O
author	*(char)
,	O
state	*(char)
)	O
;	O
return	O
NULL	O
;	O
}	O
else	O
{	O
d	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
=	O
bhead	*(struct(*(void),*(struct(*(void),*(struct`)))))
->	O
entry	*(void)
;	O
while	O
(	O
d	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
!=	O
trail	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
)	O
{	O
STORE_MAYBE	O
(	O
d	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
)	O
;	O
d	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
=	O
d	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
ilk	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
;	O
}	O
STORE_MAYBE	O
(	O
d	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
)	O
;	O
}	O
CLEAR_MAYBE	O
(	O
)	O
;	O
return	O
d	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
;	O
}	O
if	O
(	O
NUMF_LT	O
(	O
1	int
+	O
field	int
,	O
revno	*(char)
,	O
d	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
num	*(char)
)	O
)	O
{	O
RERR	O
(	O
"%s %s too low"	*(char)
,	O
ks_revno	array(char)
,	O
TAKE	O
(	O
field	int
+	O
1	int
,	O
revno	*(char)
)	O
)	O
;	O
return	O
NULL	O
;	O
}	O
do	O
{	O
STORE_MAYBE	O
(	O
d	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
)	O
;	O
trail	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
=	O
d	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
;	O
d	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
=	O
d	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
ilk	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
;	O
}	O
while	O
(	O
d	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
&&	O
!	O
NUMF_LT	O
(	O
1	int
+	O
field	int
,	O
revno	*(char)
,	O
d	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
num	*(char)
)	O
)	O
;	O
if	O
(	O
(	O
length	int
>	O
field	int
+	O
1	int
)	O
&&	O
!	O
NUMF_EQ	O
(	O
1	int
+	O
field	int
,	O
revno	*(char)
,	O
trail	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
num	*(char)
)	O
)	O
{	O
absent	(*(char),int)->(void)
(	O
revno	*(char)
,	O
field	int
+	O
1	int
)	O
;	O
return	O
NULL	O
;	O
}	O
if	O
(	O
length	int
==	O
field	int
+	O
1	int
)	O
{	O
if	O
(	O
date	*(char)
&&	O
DATE_LT	O
(	O
date	*(char)
,	O
trail	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
date	*(char)
)	O
)	O
{	O
RERR	O
(	O
"Revision %s has date %s."	*(char)
,	O
trail	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
num	*(char)
,	O
date2str	(array(char),array(char))->(*(char))
(	O
trail	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
date	*(char)
,	O
datebuf	array(char)
)	O
)	O
;	O
return	O
NULL	O
;	O
}	O
if	O
(	O
author	*(char)
&&	O
STR_DIFF	O
(	O
author	*(char)
,	O
trail	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
author	*(char)
)	O
)	O
{	O
RERR	O
(	O
"Revision %s has author %s."	*(char)
,	O
trail	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
num	*(char)
,	O
trail	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
author	*(char)
)	O
;	O
return	O
NULL	O
;	O
}	O
if	O
(	O
state	*(char)
&&	O
STR_DIFF	O
(	O
state	*(char)
,	O
trail	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
state	*(char)
)	O
)	O
{	O
RERR	O
(	O
"Revision %s has state %s."	*(char)
,	O
trail	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
num	*(char)
,	O
trail	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
state	*(char)
?	O
trail	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
state	*(char)
:	O
"<empty>"	*(char)
)	O
;	O
return	O
NULL	O
;	O
}	O
}	O
bhead	*(struct(*(void),*(struct(*(void),*(struct`)))))
=	O
trail	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
branches	*(struct)
;	O
}	O
while	O
(	O
(	O
field	int
+=	O
2	int
)	O
<=	O
length	int
)	O
;	O
CLEAR_MAYBE	O
(	O
)	O
;	O
return	O
trail	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
;	O
}	O
struct	O
delta	struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long)),bool,long)
*	O
genrevs	(*(char),*(char),*(char),*(char),*(*(struct)))->(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)))
(	O
char	O
const	O
*	O
revno	*(char)
,	O
char	O
const	O
*	O
date	*(char)
,	O
char	O
const	O
*	O
author	*(char)
,	O
char	O
const	O
*	O
state	*(char)
,	O
struct	O
wlink	struct(*(void),*(struct(*(void),*(struct(*(void),*(struct`))))))
*	O
*	O
store	*(*(struct))
)	O
{	O
int	O
length	int
;	O
register	O
struct	O
delta	struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long)),bool,long)
*	O
d	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
;	O
int	O
result	*(char)
;	O
char	O
const	O
*	O
branchnum	*(char)
;	O
char	O
datebuf	array(char)
[	O
datesize	O
+	O
zonelenmax	int
]	O
;	O
if	O
(	O
!	O
(	O
d	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
=	O
REPO	O
(	O
tip	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
)	O
)	O
)	O
{	O
RERR	O
(	O
"RCS file empty"	*(char)
)	O
;	O
goto	O
norev	O
;	O
}	O
length	int
=	O
countnumflds	(*(char))->(int)
(	O
revno	*(char)
)	O
;	O
if	O
(	O
length	int
>=	O
1	int
)	O
{	O
while	O
(	O
(	O
result	*(char)
=	O
cmpnumfld	(*(char),*(char),int)->(int)
(	O
revno	*(char)
,	O
d	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
num	*(char)
,	O
1	int
)	O
)	O
<	O
0	int
)	O
{	O
STORE_MAYBE	O
(	O
d	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
)	O
;	O
d	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
=	O
d	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
ilk	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
;	O
if	O
(	O
!	O
d	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
)	O
{	O
RERR	O
(	O
"branch number %s too low"	*(char)
,	O
TAKE	O
(	O
1	int
,	O
revno	*(char)
)	O
)	O
;	O
goto	O
norev	O
;	O
}	O
}	O
if	O
(	O
result	*(char)
>	O
0	int
)	O
{	O
absent	(*(char),int)->(void)
(	O
revno	*(char)
,	O
1	int
)	O
;	O
goto	O
norev	O
;	O
}	O
}	O
if	O
(	O
length	int
<=	O
1	int
)	O
{	O
branchnum	*(char)
=	O
d	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
num	*(char)
;	O
while	O
(	O
d	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
&&	O
NUMF_EQ	O
(	O
1	int
,	O
branchnum	*(char)
,	O
d	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
num	*(char)
)	O
&&	O
(	O
(	O
date	*(char)
&&	O
DATE_LT	O
(	O
date	*(char)
,	O
d	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
date	*(char)
)	O
)	O
||	O
(	O
author	*(char)
&&	O
STR_DIFF	O
(	O
author	*(char)
,	O
d	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
author	*(char)
)	O
)	O
||	O
(	O
state	*(char)
&&	O
STR_DIFF	O
(	O
state	*(char)
,	O
d	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
state	*(char)
)	O
)	O
)	O
)	O
{	O
STORE_MAYBE	O
(	O
d	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
)	O
;	O
d	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
=	O
d	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
ilk	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
;	O
}	O
if	O
(	O
!	O
d	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
||	O
!	O
NUMF_EQ	O
(	O
1	int
,	O
branchnum	*(char)
,	O
d	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
num	*(char)
)	O
)	O
{	O
cantfindbranch	(*(char),array(char),*(char),*(char))->(void)
(	O
length	int
?	O
revno	*(char)
:	O
TAKE	O
(	O
1	int
,	O
branchnum	*(char)
)	O
,	O
date	*(char)
,	O
author	*(char)
,	O
state	*(char)
)	O
;	O
goto	O
norev	O
;	O
}	O
else	O
{	O
STORE_MAYBE	O
(	O
d	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
)	O
;	O
}	O
CLEAR_MAYBE	O
(	O
)	O
;	O
return	O
d	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
;	O
}	O
while	O
(	O
(	O
result	*(char)
=	O
cmpnumfld	(*(char),*(char),int)->(int)
(	O
revno	*(char)
,	O
d	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
num	*(char)
,	O
2	int
)	O
)	O
<	O
0	int
&&	O
(	O
NUMF_EQ	O
(	O
1	int
,	O
revno	*(char)
,	O
d	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
num	*(char)
)	O
)	O
)	O
{	O
STORE_MAYBE	O
(	O
d	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
)	O
;	O
d	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
=	O
d	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
ilk	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
;	O
if	O
(	O
!	O
d	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
)	O
break	O
;	O
}	O
if	O
(	O
!	O
d	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
||	O
!	O
NUMF_EQ	O
(	O
1	int
,	O
revno	*(char)
,	O
d	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
num	*(char)
)	O
)	O
{	O
RERR	O
(	O
"%s %s too low"	*(char)
,	O
ks_revno	array(char)
,	O
TAKE	O
(	O
2	int
,	O
revno	*(char)
)	O
)	O
;	O
goto	O
norev	O
;	O
}	O
if	O
(	O
(	O
length	int
>	O
2	int
)	O
&&	O
(	O
result	*(char)
!=	O
0	int
)	O
)	O
{	O
absent	(*(char),int)->(void)
(	O
revno	*(char)
,	O
2	int
)	O
;	O
goto	O
norev	O
;	O
}	O
STORE_MAYBE	O
(	O
d	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
)	O
;	O
if	O
(	O
length	int
>	O
2	int
)	O
return	O
genbranch	(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct(*`,*`)),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)),*(char),int,*(char),*(char),*(char),*(*(struct(*(void),*(struct`)))))->(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct(*`,*`)),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)))
(	O
d	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
,	O
revno	*(char)
,	O
length	int
,	O
date	*(char)
,	O
author	*(char)
,	O
state	*(char)
,	O
store	*(*(struct))
)	O
;	O
else	O
{	O
if	O
(	O
date	*(char)
&&	O
DATE_LT	O
(	O
date	*(char)
,	O
d	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
date	*(char)
)	O
)	O
{	O
RERR	O
(	O
"Revision %s has date %s."	*(char)
,	O
d	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
num	*(char)
,	O
date2str	(array(char),array(char))->(*(char))
(	O
d	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
date	*(char)
,	O
datebuf	array(char)
)	O
)	O
;	O
return	O
NULL	O
;	O
}	O
if	O
(	O
author	*(char)
&&	O
STR_DIFF	O
(	O
author	*(char)
,	O
d	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
author	*(char)
)	O
)	O
{	O
RERR	O
(	O
"Revision %s has author %s."	*(char)
,	O
d	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
num	*(char)
,	O
d	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
author	*(char)
)	O
;	O
return	O
NULL	O
;	O
}	O
if	O
(	O
state	*(char)
&&	O
STR_DIFF	O
(	O
state	*(char)
,	O
d	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
state	*(char)
)	O
)	O
{	O
RERR	O
(	O
"Revision %s has state %s."	*(char)
,	O
d	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
num	*(char)
,	O
d	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
state	*(char)
?	O
d	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
state	*(char)
:	O
"<empty>"	*(char)
)	O
;	O
return	O
NULL	O
;	O
}	O
CLEAR_MAYBE	O
(	O
)	O
;	O
return	O
d	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
;	O
}	O
norev	O
:	O
return	O
NULL	O
;	O
}	O
struct	O
delta	struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long)),bool,long)
*	O
gr_revno	(*(char),*(*(struct)))->(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)))
(	O
char	O
const	O
*	O
revno	*(char)
,	O
struct	O
wlink	struct(*(void),*(struct(*(void),*(struct(*(void),*(struct`))))))
*	O
*	O
store	*(*(struct))
)	O
{	O
return	O
genrevs	(*(char),*(char),*(char),*(char),*(*(struct)))->(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)))
(	O
revno	*(char)
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
store	*(*(struct))
)	O
;	O
}	O
struct	O
delta	struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long)),bool,long)
*	O
delta_from_ref	(*(char))->(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)))
(	O
char	O
const	O
*	O
ref	*(char)
)	O
{	O
return	O
genrevs	(*(char),*(char),*(char),*(char),*(*(struct)))->(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)))
(	O
ref	*(char)
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
)	O
;	O
}	O
static	O
char	O
const	O
*	O
rev_from_symbol	(*(struct(*(char),long)))->(*(char))
(	O
struct	O
cbuf	struct(*(char),long)
const	O
*	O
id	*(char)
)	O
{	O
for	O
(	O
struct	O
link	struct(*(void),*(struct(*(void),*(struct(*(void),*(struct`))))))
*	O
ls	*(struct(*(void),*(struct(*(void),*(struct`)))))
=	O
GROK	O
(	O
symbols	*(struct)
)	O
;	O
ls	*(struct(*(void),*(struct(*(void),*(struct`)))))
;	O
ls	*(struct(*(void),*(struct(*(void),*(struct`)))))
=	O
ls	*(struct(*(void),*(struct(*(void),*(struct`)))))
->	O
next	*(struct(*(void),*(struct(*(void),*(struct`)))))
)	O
{	O
struct	O
symdef	struct(*(char),*(char))
const	O
*	O
d	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
=	O
ls	*(struct(*(void),*(struct(*(void),*(struct`)))))
->	O
entry	*(void)
;	O
if	O
(	O
!	O
strncmp	(*(char),*(char),long)->(int)
(	O
d	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
meaningful	*(char)
,	O
id	*(char)
->	O
string	*(char)
,	O
id	*(char)
->	O
size	long
)	O
)	O
return	O
d	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
underlying	*(char)
;	O
}	O
return	O
NULL	O
;	O
}	O
static	O
char	O
const	O
*	O
lookupsym	(*(char))->(*(char))
(	O
char	O
const	O
*	O
id	*(char)
)	O
{	O
struct	O
cbuf	struct(*(char),long)
identifier	struct(*(char),long)
=	O
{	O
.	O
string	*(char)
=	O
id	*(char)
,	O
.	O
size	long
=	O
strlen	(*(char))->(long)
(	O
id	*(char)
)	O
}	O
;	O
return	O
rev_from_symbol	(*(struct(*(char),long)))->(*(char))
(	O
&	O
identifier	struct(*(char),long)
)	O
;	O
}	O
static	O
char	O
const	O
*	O
branchtip	(*(char))->(*(char))
(	O
char	O
const	O
*	O
branch	*(char)
)	O
{	O
struct	O
delta	struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long)),bool,long)
*	O
h	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
;	O
h	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
=	O
delta_from_ref	(*(char))->(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)))
(	O
branch	*(char)
)	O
;	O
return	O
h	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
?	O
h	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
num	*(char)
:	O
NULL	O
;	O
}	O
bool	bool
fully_numeric	(*(struct(*(char),long)),*(char),*(struct))->(bool)
(	O
struct	O
cbuf	struct(*(char),long)
*	O
ans	*(struct(*(char),long))
,	O
char	O
const	O
*	O
source	*(char)
,	O
struct	O
fro	O
*	O
fp	*(struct)
)	O
{	O
register	O
char	O
const	O
*	O
sp	*(char)
,	O
*	O
bp	*(char)
=	O
NULL	O
;	O
int	O
dots	int
;	O
bool	bool
have_branch	bool
=	O
false	int
;	O
char	O
*	O
ugh	*(char)
=	O
NULL	O
;	O
sp	*(char)
=	O
source	*(char)
;	O
if	O
(	O
!	O
sp	*(char)
||	O
!	O
*	O
sp	*(char)
)	O
goto	O
success	O
;	O
if	O
(	O
sp	*(char)
[	O
0	int
]	O
==	O
KDELIM	char
&&	O
!	O
sp	*(char)
[	O
1	int
]	O
)	O
{	O
if	O
(	O
!	O
getoldkeys	(*(struct))->(bool)
(	O
fp	*(struct)
)	O
)	O
goto	O
sorry	O
;	O
if	O
(	O
!	O
PREV	O
(	O
rev	*(char)
)	O
)	O
{	O
MERR	O
(	O
"working file lacks %s"	*(char)
,	O
ks_revno	array(char)
)	O
;	O
goto	O
sorry	O
;	O
}	O
ACCS	O
(	O
PREV	O
(	O
rev	*(char)
)	O
)	O
;	O
goto	O
success	O
;	O
}	O
dots	int
=	O
0	int
;	O
for	O
(	O
;	O
;	O
)	O
{	O
char	O
const	O
*	O
was	*(char)
=	O
sp	*(char)
;	O
bool	bool
id	*(char)
=	O
false	int
;	O
for	O
(	O
;	O
;	O
)	O
{	O
switch	O
(	O
ctab	array(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int))
[	O
(	O
unsigned	O
char	O
)	O
*	O
sp	*(char)
]	O
)	O
{	O
case	O
IDCHAR	int
:	O
case	O
LETTER	int
:	O
case	O
Letter	int
:	O
id	*(char)
=	O
true	int
;	O
case	O
DIGIT	int
:	O
sp	*(char)
++	O
;	O
continue	O
;	O
default	O
:	O
break	O
;	O
}	O
break	O
;	O
}	O
if	O
(	O
id	*(char)
)	O
{	O
struct	O
cbuf	struct(*(char),long)
orig	struct(*(char),long)
=	O
{	O
.	O
string	*(char)
=	O
was	*(char)
,	O
.	O
size	long
=	O
sp	*(char)
-	O
was	*(char)
}	O
;	O
char	O
const	O
*	O
expanded	*(char)
=	O
rev_from_symbol	(*(struct(*(char),long)))->(*(char))
(	O
&	O
orig	struct(*(char),long)
)	O
;	O
if	O
(	O
!	O
expanded	*(char)
)	O
{	O
RERR	O
(	O
"Symbolic name `%s' is undefined."	*(char)
,	O
was	*(char)
)	O
;	O
goto	O
sorry	O
;	O
}	O
ACCS	O
(	O
expanded	*(char)
)	O
;	O
have_branch	bool
=	O
true	int
;	O
}	O
else	O
{	O
if	O
(	O
was	*(char)
!=	O
sp	*(char)
)	O
{	O
ACCR	O
(	O
was	*(char)
,	O
sp	*(char)
)	O
;	O
bp	*(char)
=	O
was	*(char)
;	O
}	O
while	O
(	O
'0'	O
==	O
sp	*(char)
[	O
0	int
]	O
&&	O
isdigit	(int)->(int)
(	O
sp	*(char)
[	O
1	int
]	O
)	O
)	O
sp	*(char)
++	O
;	O
if	O
(	O
!	O
bp	*(char)
)	O
{	O
int	O
s	*(char)
=	O
0	int
;	O
if	O
(	O
s	*(char)
||	O
*	O
sp	*(char)
!=	O
'.'	O
)	O
break	O
;	O
else	O
{	O
char	O
const	O
*	O
b	*(char)
;	O
struct	O
delta	struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long)),bool,long)
*	O
tip	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
;	O
if	O
(	O
GROK	O
(	O
branch	*(char)
)	O
)	O
b	*(char)
=	O
GROK	O
(	O
branch	*(char)
)	O
;	O
else	O
if	O
(	O
(	O
tip	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
=	O
REPO	O
(	O
tip	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
)	O
)	O
)	O
b	*(char)
=	O
tip	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
num	*(char)
;	O
else	O
break	O
;	O
OK	O
(	O
)	O
;	O
FRESH	O
(	O
)	O
;	O
accumulate_branchno	(*(struct(*(char),*(struct),*(void),long)),*(char))->(void)
(	O
SINGLE	O
,	O
b	*(char)
)	O
;	O
}	O
}	O
}	O
switch	O
(	O
*	O
sp	*(char)
++	O
)	O
{	O
case	O
'\0'	O
:	O
goto	O
success	O
;	O
case	O
'.'	O
:	O
if	O
(	O
!	O
*	O
sp	*(char)
)	O
{	O
if	O
(	O
dots	int
&	O
1	int
)	O
break	O
;	O
OK	O
(	O
)	O
;	O
if	O
(	O
!	O
(	O
bp	*(char)
=	O
branchtip	(*(char))->(*(char))
(	O
ans	*(struct(*(char),long))
->	O
string	*(char)
)	O
)	O
)	O
goto	O
sorry	O
;	O
ACCF	O
(	O
"%s%s"	*(char)
,	O
ans	*(struct(*(char),long))
->	O
string	*(char)
,	O
bp	*(char)
+	O
ans	*(struct(*(char),long))
->	O
size	long
)	O
;	O
goto	O
success	O
;	O
}	O
++	O
dots	int
;	O
ACCB	O
(	O
'.'	O
)	O
;	O
continue	O
;	O
}	O
break	O
;	O
}	O
RERR	O
(	O
"improper %s: %s"	*(char)
,	O
ks_revno	array(char)
,	O
source	*(char)
)	O
;	O
sorry	O
:	O
OK	O
(	O
)	O
;	O
FRESH	O
(	O
)	O
;	O
return	O
false	int
;	O
success	O
:	O
OK	O
(	O
)	O
;	O
return	O
true	int
;	O
}	O
char	O
const	O
*	O
namedrev	(*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)))->(*(char))
(	O
char	O
const	O
*	O
name	*(char)
,	O
struct	O
delta	struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long)),bool,long)
*	O
delta	struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long)),bool,long)
)	O
{	O
if	O
(	O
name	*(char)
)	O
{	O
char	O
const	O
*	O
id	*(char)
=	O
NULL	O
,	O
*	O
p	*(char)
,	O
*	O
val	array(int)
;	O
for	O
(	O
p	*(char)
=	O
name	*(char)
;	O
;	O
p	*(char)
++	O
)	O
switch	O
(	O
ctab	array(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int))
[	O
(	O
unsigned	O
char	O
)	O
*	O
p	*(char)
]	O
)	O
{	O
case	O
IDCHAR	int
:	O
case	O
LETTER	int
:	O
case	O
Letter	int
:	O
id	*(char)
=	O
name	*(char)
;	O
break	O
;	O
case	O
DIGIT	int
:	O
break	O
;	O
case	O
UNKN	int
:	O
if	O
(	O
!	O
*	O
p	*(char)
&&	O
id	*(char)
&&	O
(	O
val	array(int)
=	O
lookupsym	(*(char))->(*(char))
(	O
id	*(char)
)	O
)	O
&&	O
STR_SAME	O
(	O
val	array(int)
,	O
delta	struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long)),bool,long)
->	O
num	*(char)
)	O
)	O
return	O
id	*(char)
;	O
default	O
:	O
return	O
NULL	O
;	O
}	O
}	O
return	O
NULL	O
;	O
}	O
char	O
const	O
*	O
tiprev	()->(*(char))
(	O
void	O
)	O
{	O
struct	O
delta	struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long)),bool,long)
*	O
tip	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
;	O
char	O
const	O
*	O
defbr	*(char)
=	O
GROK	O
(	O
branch	*(char)
)	O
;	O
return	O
defbr	*(char)
?	O
branchtip	(*(char))->(*(char))
(	O
defbr	*(char)
)	O
:	O
(	O
tip	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
=	O
REPO	O
(	O
tip	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
)	O
)	O
?	O
tip	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
num	*(char)
:	O
NULL	O
;	O
}	O
