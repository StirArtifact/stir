STRINGTYPE	O
*	O
df_get_next_record	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(*(char)),*(long),*(long),*(struct(long,enum(int,int,int),*(char))),long)->(*(struct(long,enum(int,int,int),*(char))))
(	O
stream	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
buffer	*(*(char))
,	O
bufferpos	*(long)
,	O
buffersiz	*(long)
,	O
record_delimiter	*(struct(long,enum(int,int,int),*(char)))
,	O
record_length	long
)	O
FILE	struct
*	O
stream	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
;	O
unsigned	O
char	O
*	O
*	O
buffer	*(*(char))
;	O
size_t	long
*	O
bufferpos	*(long)
;	O
size_t	long
*	O
buffersiz	*(long)
;	O
STRINGTYPE	O
*	O
record_delimiter	*(struct(long,enum(int,int,int),*(char)))
;	O
size_t	long
record_length	long
;	O
{	O
STRINGTYPE	O
buffer_desc	struct(long,enum(int,int,int),*(char))
;	O
int	O
need_more_data	int
;	O
int	O
next_record_pos	int
;	O
int	O
return_code	int
;	O
STRINGTYPE	O
*	O
return_string	*(struct(long,enum(int,int,int),*(char)))
;	O
buffer_desc	struct(long,enum(int,int,int),*(char))
.	O
string	*(char)
=	O
*	O
buffer	*(*(char))
+	O
*	O
bufferpos	*(long)
;	O
buffer_desc	struct(long,enum(int,int,int),*(char))
.	O
length	long
=	O
*	O
buffersiz	*(long)
-	O
*	O
bufferpos	*(long)
;	O
need_more_data	int
=	O
0	int
;	O
if	O
(	O
*	O
buffersiz	*(long)
==	O
0	int
)	O
need_more_data	int
=	O
1	int
;	O
else	O
if	O
(	O
record_length	long
!=	O
0	int
)	O
{	O
if	O
(	O
*	O
buffersiz	*(long)
-	O
*	O
bufferpos	*(long)
<	O
record_length	long
)	O
need_more_data	int
=	O
1	int
;	O
}	O
else	O
{	O
next_record_pos	int
=	O
dstrstr	(*(struct(long,enum(int,int,int),*(char))),*(struct(long,enum(int,int,int),*(char))))->(long)
(	O
&	O
buffer_desc	struct(long,enum(int,int,int),*(char))
,	O
record_delimiter	*(struct(long,enum(int,int,int),*(char)))
)	O
;	O
if	O
(	O
next_record_pos	int
==	O
0	int
)	O
need_more_data	int
=	O
1	int
;	O
}	O
while	O
(	O
need_more_data	int
&&	O
!	O
feof	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
stream	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
)	O
{	O
if	O
(	O
*	O
bufferpos	*(long)
==	O
0	int
)	O
{	O
if	O
(	O
*	O
buffer	*(*(char))
==	O
NULL	O
)	O
*	O
buffer	*(*(char))
=	O
malloc	(long)->(*(void))
(	O
DF_BUFFER_INCREMENT	int
)	O
;	O
else	O
*	O
buffer	*(*(char))
=	O
realloc	(*(void),long)->(*(void))
(	O
*	O
buffer	*(*(char))
,	O
*	O
buffersiz	*(long)
+	O
DF_BUFFER_INCREMENT	int
)	O
;	O
if	O
(	O
*	O
buffer	*(*(char))
==	O
NULL	O
)	O
FATAL_ERROR	O
(	O
_	O
(	O
"unable to allocate memory"	*(char)
)	O
)	O
;	O
return_code	int
=	O
fread	(*(void),long,long,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(long)
(	O
*	O
buffer	*(*(char))
+	O
*	O
buffersiz	*(long)
,	O
1	int
,	O
DF_BUFFER_INCREMENT	int
,	O
stream	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
if	O
(	O
return_code	int
<	O
DF_BUFFER_INCREMENT	int
&&	O
ferror	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
stream	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
)	O
FATAL_PERROR	O
(	O
_	O
(	O
"File"	*(char)
)	O
)	O
;	O
*	O
buffersiz	*(long)
+=	O
return_code	int
;	O
}	O
else	O
{	O
memmove	(*(void),*(void),long)->(*(void))
(	O
*	O
buffer	*(*(char))
,	O
*	O
buffer	*(*(char))
+	O
*	O
bufferpos	*(long)
,	O
*	O
buffersiz	*(long)
-	O
*	O
bufferpos	*(long)
)	O
;	O
*	O
bufferpos	*(long)
=	O
*	O
buffersiz	*(long)
-	O
*	O
bufferpos	*(long)
;	O
return_code	int
=	O
fread	(*(void),long,long,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(long)
(	O
*	O
buffer	*(*(char))
+	O
*	O
bufferpos	*(long)
,	O
1	int
,	O
*	O
buffersiz	*(long)
-	O
*	O
bufferpos	*(long)
,	O
stream	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
if	O
(	O
return_code	int
<	O
*	O
buffersiz	*(long)
-	O
*	O
bufferpos	*(long)
&&	O
ferror	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
stream	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
)	O
FATAL_PERROR	O
(	O
_	O
(	O
"File"	*(char)
)	O
)	O
;	O
if	O
(	O
return_code	int
<	O
*	O
buffersiz	*(long)
-	O
*	O
bufferpos	*(long)
)	O
*	O
buffersiz	*(long)
=	O
*	O
bufferpos	*(long)
+	O
return_code	int
;	O
*	O
bufferpos	*(long)
=	O
0	int
;	O
}	O
buffer_desc	struct(long,enum(int,int,int),*(char))
.	O
string	*(char)
=	O
*	O
buffer	*(*(char))
+	O
*	O
bufferpos	*(long)
;	O
buffer_desc	struct(long,enum(int,int,int),*(char))
.	O
length	long
=	O
*	O
buffersiz	*(long)
-	O
*	O
bufferpos	*(long)
;	O
need_more_data	int
=	O
0	int
;	O
if	O
(	O
record_length	long
!=	O
0	int
)	O
{	O
if	O
(	O
*	O
buffersiz	*(long)
-	O
*	O
bufferpos	*(long)
<	O
record_length	long
)	O
need_more_data	int
=	O
1	int
;	O
}	O
else	O
{	O
next_record_pos	int
=	O
dstrstr	(*(struct(long,enum(int,int,int),*(char))),*(struct(long,enum(int,int,int),*(char))))->(long)
(	O
&	O
buffer_desc	struct(long,enum(int,int,int),*(char))
,	O
record_delimiter	*(struct(long,enum(int,int,int),*(char)))
)	O
;	O
if	O
(	O
next_record_pos	int
==	O
0	int
)	O
need_more_data	int
=	O
1	int
;	O
}	O
}	O
if	O
(	O
*	O
bufferpos	*(long)
<	O
*	O
buffersiz	*(long)
)	O
{	O
if	O
(	O
record_length	long
!=	O
0	int
)	O
{	O
return_string	*(struct(long,enum(int,int,int),*(char)))
=	O
dstrsubstr	(*(struct(long,enum(int,int,int),*(char))),long,long,long,enum(int,int,int))->(*(struct(long,enum(int,int,int),*(char))))
(	O
&	O
buffer_desc	struct(long,enum(int,int,int),*(char))
,	O
1	int
,	O
0	int
,	O
MIN	O
(	O
record_length	long
,	O
buffer_desc	struct(long,enum(int,int,int),*(char))
.	O
length	long
)	O
,	O
DStr_not_own	int
)	O
;	O
*	O
bufferpos	*(long)
+=	O
return_string	*(struct(long,enum(int,int,int),*(char)))
->	O
length	long
;	O
}	O
else	O
{	O
if	O
(	O
next_record_pos	int
==	O
0	int
)	O
next_record_pos	int
=	O
buffer_desc	struct(long,enum(int,int,int),*(char))
.	O
length	long
+	O
1	int
;	O
return_string	*(struct(long,enum(int,int,int),*(char)))
=	O
dstrsubstr	(*(struct(long,enum(int,int,int),*(char))),long,long,long,enum(int,int,int))->(*(struct(long,enum(int,int,int),*(char))))
(	O
&	O
buffer_desc	struct(long,enum(int,int,int),*(char))
,	O
1	int
,	O
next_record_pos	int
-	O
1	int
,	O
0	int
,	O
DStr_not_own	int
)	O
;	O
*	O
bufferpos	*(long)
=	O
*	O
bufferpos	*(long)
+	O
next_record_pos	int
-	O
1	int
+	O
record_delimiter	*(struct(long,enum(int,int,int),*(char)))
->	O
length	long
;	O
}	O
if	O
(	O
return_string	*(struct(long,enum(int,int,int),*(char)))
==	O
NULL	O
)	O
{	O
FATAL_ERROR	O
(	O
_	O
(	O
"unable to allocate memory"	*(char)
)	O
)	O
;	O
}	O
return	O
return_string	*(struct(long,enum(int,int,int),*(char)))
;	O
}	O
return	O
NULL	O
;	O
}	O
