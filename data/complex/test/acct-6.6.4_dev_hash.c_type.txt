struct	O
hashtab	struct(long,long,long,*(*(struct(*(void),int,int,*(void),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int))))),int)
*	O
dev_table	*(struct(long,long,long,*(*(struct(*`,int,int,*`,*`,*`,*`))),int))
=	O
NULL	O
;	O
struct	O
dev_data	struct(*(char))
{	O
char	O
*	O
name	*(char)
;	O
}	O
;	O
static	O
void	O
setup_pts_devices	()->(void)
(	O
)	O
{	O
struct	O
utsname	struct(array(char),array(char),array(char),array(char),array(char),array(char))
uts	struct(array(char),array(char),array(char),array(char),array(char),array(char))
;	O
struct	O
dev_data	struct(*(char))
dd	struct(*(char))
;	O
int	O
i	int
;	O
struct	O
pts_params	struct(*(char),int,int,int)
*	O
pts_ent	*(struct(*(char),int,int,int))
,	O
pts_table	array(struct(*(char),int,int,int))
[	O
]	O
=	O
{	O
{	O
"Linux"	*(char)
,	O
136	int
,	O
2048	int
,	O
256	int
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
if	O
(	O
uname	(*(struct(array(char),array(char),array(char),array(char),array(char),array(char))))->(int)
(	O
&	O
uts	struct(array(char),array(char),array(char),array(char),array(char),array(char))
)	O
)	O
{	O
return	O
;	O
}	O
for	O
(	O
pts_ent	*(struct(*(char),int,int,int))
=	O
&	O
(	O
pts_table	array(struct(*(char),int,int,int))
[	O
0	int
]	O
)	O
;	O
pts_ent	*(struct(*(char),int,int,int))
!=	O
NULL	O
;	O
++	O
pts_ent	*(struct(*(char),int,int,int))
)	O
{	O
if	O
(	O
!	O
strcmp	(*(char),*(char))->(int)
(	O
uts	struct(array(char),array(char),array(char),array(char),array(char),array(char))
.	O
sysname	array(char)
,	O
pts_ent	*(struct(*(char),int,int,int))
->	O
utsname	struct(array(char),array(char),array(char),array(char),array(char),array(char))
)	O
)	O
break	O
;	O
}	O
if	O
(	O
pts_ent	*(struct(*(char),int,int,int))
==	O
NULL	O
)	O
return	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
pts_ent	*(struct(*(char),int,int,int))
->	O
max	int
;	O
++	O
i	int
)	O
{	O
long	O
dev_num	long
;	O
struct	O
hashtab_elem	struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct))),*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct))),*(struct))
*	O
he	*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(long,long,long,*(*`),int))))
;	O
int	O
major	int
,	O
minor	int
;	O
major	int
=	O
pts_ent	*(struct(*(char),int,int,int))
->	O
base	int
+	O
(	O
i	int
/	O
pts_ent	*(struct(*(char),int,int,int))
->	O
mod	int
)	O
;	O
minor	int
=	O
i	int
%	O
pts_ent	*(struct(*(char),int,int,int))
->	O
mod	int
;	O
dev_num	long
=	O
(	O
(	O
major	int
<<	O
8	int
)	O
+	O
minor	int
)	O
;	O
dd	struct(*(char))
.	O
name	*(char)
=	O
xmalloc	(long)->(*(void))
(	O
sizeof	O
(	O
char	O
)	O
*	O
(	O
strlen	(*(char))->(long)
(	O
"pts/xxxx"	*(char)
)	O
+	O
1	int
)	O
)	O
;	O
sprintf	(*(char),*(char))->(int)
(	O
dd	struct(*(char))
.	O
name	*(char)
,	O
"pts/%d"	*(char)
,	O
i	int
)	O
;	O
he	*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(long,long,long,*(*`),int))))
=	O
hashtab_create	(*(struct(long,long,long,*(*(struct`)),int)),*(void),int)->(*(struct(*(void),int,int,*(void),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))))
(	O
dev_table	*(struct(long,long,long,*(*(struct(*`,int,int,*`,*`,*`,*`))),int))
,	O
(	O
void	O
*	O
)	O
&	O
dev_num	long
,	O
sizeof	O
(	O
dev_num	long
)	O
)	O
;	O
hashtab_set_value	(*(struct(*(void),int,int,*(void),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))),*(void),int)->(void)
(	O
he	*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(long,long,long,*(*`),int))))
,	O
&	O
dd	struct(*(char))
,	O
sizeof	O
(	O
dd	struct(*(char))
)	O
)	O
;	O
}	O
}	O
static	O
void	O
setup_devices	(*(char))->(void)
(	O
char	O
*	O
dirname	*(char)
)	O
{	O
DIR	struct
*	O
dirp	*(struct)
;	O
struct	O
dirent	struct(long,long,short,char,array(char))
*	O
dp	*(struct(long,long,short,char,array(char)))
;	O
struct	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
sp	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
;	O
extern	O
int	O
debugging_enabled	int
;	O
if	O
(	O
debugging_enabled	int
)	O
(	O
void	O
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stddebug	O
,	O
"device     devnum\n-----------------\n"	*(char)
)	O
;	O
if	O
(	O
(	O
dirp	*(struct)
=	O
opendir	(*(char))->(*(struct))
(	O
dirname	*(char)
)	O
)	O
==	O
NULL	O
)	O
return	O
;	O
if	O
(	O
!	O
strcmp	(*(char),*(char))->(int)
(	O
dirname	*(char)
,	O
"/dev/pts"	*(char)
)	O
)	O
{	O
closedir	(*(struct))->(int)
(	O
dirp	*(struct)
)	O
;	O
setup_pts_devices	()->(void)
(	O
)	O
;	O
return	O
;	O
}	O
for	O
(	O
dp	*(struct(long,long,short,char,array(char)))
=	O
readdir	(*(struct))->(*(struct(long,long,short,char,array(char))))
(	O
dirp	*(struct)
)	O
;	O
dp	*(struct(long,long,short,char,array(char)))
!=	O
NULL	O
;	O
dp	*(struct(long,long,short,char,array(char)))
=	O
readdir	(*(struct))->(*(struct(long,long,short,char,array(char))))
(	O
dirp	*(struct)
)	O
)	O
{	O
char	O
*	O
fullname	*(char)
=	O
(	O
char	O
*	O
)	O
alloca	O
(	O
(	O
strlen	(*(char))->(long)
(	O
dirname	*(char)
)	O
+	O
NAMLEN	O
(	O
dp	*(struct(long,long,short,char,array(char)))
)	O
+	O
1	int
)	O
*	O
sizeof	O
(	O
char	O
)	O
)	O
;	O
(	O
void	O
)	O
sprintf	(*(char),*(char))->(int)
(	O
fullname	*(char)
,	O
"%s/%s"	*(char)
,	O
dirname	*(char)
,	O
dp	*(struct(long,long,short,char,array(char)))
->	O
d_name	array(char)
)	O
;	O
if	O
(	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
(	O
fullname	*(char)
,	O
&	O
sp	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
)	O
)	O
continue	O
;	O
if	O
(	O
(	O
sp	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_mode	int
&	O
S_IFMT	O
)	O
!=	O
S_IFCHR	O
)	O
continue	O
;	O
if	O
(	O
debugging_enabled	int
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stddebug	O
,	O
"%-8.8d %s\n"	*(char)
,	O
(	O
int	O
)	O
sp	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_rdev	long
,	O
dp	*(struct(long,long,short,char,array(char)))
->	O
d_name	array(char)
)	O
;	O
{	O
struct	O
hashtab_elem	struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct))),*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct))),*(struct))
*	O
he	*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(long,long,long,*(*`),int))))
;	O
struct	O
dev_data	struct(*(char))
dd	struct(*(char))
;	O
long	O
dev_num	long
;	O
dev_num	long
=	O
sp	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_rdev	long
;	O
dd	struct(*(char))
.	O
name	*(char)
=	O
(	O
char	O
*	O
)	O
xmalloc	(long)->(*(void))
(	O
sizeof	O
(	O
char	O
)	O
*	O
(	O
NAMLEN	O
(	O
dp	*(struct(long,long,short,char,array(char)))
)	O
+	O
1	int
)	O
)	O
;	O
(	O
void	O
)	O
strcpy	(*(char),*(char))->(*(char))
(	O
dd	struct(*(char))
.	O
name	*(char)
,	O
dp	*(struct(long,long,short,char,array(char)))
->	O
d_name	array(char)
)	O
;	O
he	*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(long,long,long,*(*`),int))))
=	O
hashtab_create	(*(struct(long,long,long,*(*(struct`)),int)),*(void),int)->(*(struct(*(void),int,int,*(void),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))))
(	O
dev_table	*(struct(long,long,long,*(*(struct(*`,int,int,*`,*`,*`,*`))),int))
,	O
(	O
void	O
*	O
)	O
&	O
dev_num	long
,	O
sizeof	O
(	O
dev_num	long
)	O
)	O
;	O
hashtab_set_value	(*(struct(*(void),int,int,*(void),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))),*(void),int)->(void)
(	O
he	*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(long,long,long,*(*`),int))))
,	O
&	O
dd	struct(*(char))
,	O
sizeof	O
(	O
dd	struct(*(char))
)	O
)	O
;	O
}	O
}	O
(	O
void	O
)	O
closedir	(*(struct))->(int)
(	O
dirp	*(struct)
)	O
;	O
}	O
char	O
*	O
dev_gnu_name	(long)->(*(char))
(	O
long	O
dev_num	long
)	O
{	O
struct	O
hashtab_elem	struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct))),*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct))),*(struct))
*	O
he	*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(long,long,long,*(*`),int))))
;	O
static	O
char	O
devstr	array(char)
[	O
20	int
]	O
;	O
if	O
(	O
dev_num	long
==	O
NULLDEV	int
)	O
return	O
"__"	*(char)
;	O
if	O
(	O
dev_table	*(struct(long,long,long,*(*(struct(*`,int,int,*`,*`,*`,*`))),int))
==	O
NULL	O
)	O
{	O
dev_table	*(struct(long,long,long,*(*(struct(*`,int,int,*`,*`,*`,*`))),int))
=	O
hashtab_init	(int)->(*(struct(long,long,long,*(*(struct`)),int)))
(	O
sizeof	O
(	O
long	O
)	O
)	O
;	O
setup_devices	(*(char))->(void)
(	O
"/dev"	*(char)
)	O
;	O
setup_devices	(*(char))->(void)
(	O
"/dev/pty"	*(char)
)	O
;	O
setup_devices	(*(char))->(void)
(	O
"/dev/ptym"	*(char)
)	O
;	O
setup_devices	(*(char))->(void)
(	O
"/dev/pts"	*(char)
)	O
;	O
}	O
he	*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(long,long,long,*(*`),int))))
=	O
hashtab_find	(*(struct(long,long,long,*(*(struct`)),int)),*(void),int)->(*(struct(*(void),int,int,*(void),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))))
(	O
dev_table	*(struct(long,long,long,*(*(struct(*`,int,int,*`,*`,*`,*`))),int))
,	O
(	O
void	O
*	O
)	O
&	O
dev_num	long
,	O
(	O
unsigned	O
int	O
)	O
sizeof	O
(	O
dev_num	long
)	O
)	O
;	O
if	O
(	O
he	*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(long,long,long,*(*`),int))))
!=	O
NULL	O
)	O
{	O
struct	O
dev_data	struct(*(char))
*	O
dd	struct(*(char))
=	O
hashtab_get_value	(*(struct(*(void),int,int,*(void),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))))->(*(void))
(	O
he	*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(long,long,long,*(*`),int))))
)	O
;	O
return	O
dd	struct(*(char))
->	O
name	*(char)
;	O
}	O
sprintf	(*(char),*(char))->(int)
(	O
devstr	array(char)
,	O
"[%d,%d]"	*(char)
,	O
(	O
int	O
)	O
(	O
(	O
dev_num	long
&	O
0xFF00	int
)	O
>>	O
8	int
)	O
,	O
(	O
int	O
)	O
(	O
dev_num	long
&	O
0x00FF	int
)	O
)	O
;	O
return	O
devstr	array(char)
;	O
}	O
