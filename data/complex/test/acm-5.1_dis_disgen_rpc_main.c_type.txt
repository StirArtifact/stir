static	O
char	O
rcsid	array(char)
[	O
]	O
=	O
"$Id: rpc_main.c,v 1.1.1.1 2005/10/28 14:46:46 k0ro Exp $"	*(char)
;	O
struct	O
commandline	struct(int,int,int,int,int,*(char),*(char))
{	O
int	O
cflag	int
;	O
int	O
hflag	int
;	O
int	O
lflag	int
;	O
int	O
sflag	int
;	O
int	O
mflag	int
;	O
char	O
*	O
infile	*(char)
;	O
char	O
*	O
outfile	*(char)
;	O
}	O
;	O
static	O
char	O
*	O
cmdname	*(char)
;	O
static	O
char	O
CPP	array(char)
[	O
]	O
=	O
CPPEXEC	O
;	O
static	O
char	O
CPPFLAGS	array(char)
[	O
]	O
=	O
"-C"	*(char)
;	O
static	O
char	O
*	O
allv	array(*(char))
[	O
]	O
=	O
{	O
"rpcgen"	*(char)
,	O
"-s"	*(char)
,	O
"udp"	*(char)
,	O
"-s"	*(char)
,	O
"tcp"	*(char)
,	O
}	O
;	O
static	O
int	O
allc	int
=	O
sizeof	O
(	O
allv	array(*(char))
)	O
/	O
sizeof	O
(	O
allv	array(*(char))
[	O
0	int
]	O
)	O
;	O
static	O
void	O
h_output	()->(void)
(	O
)	O
,	O
c_output	()->(void)
(	O
)	O
,	O
s_output	()->(void)
(	O
)	O
,	O
l_output	()->(void)
(	O
)	O
,	O
do_registers	()->(void)
(	O
)	O
;	O
static	O
int	O
parseargs	()->(int)
(	O
)	O
;	O
extern	O
void	O
reinitialize	()->(void)
(	O
void	O
)	O
,	O
crash	()->(void)
(	O
)	O
,	O
write_programs	()->(void)
(	O
)	O
;	O
static	O
void	O
open_output	(*(char),*(char))->(void)
(	O
char	O
*	O
infile	*(char)
,	O
char	O
*	O
outfile	*(char)
)	O
;	O
main	(int,array(*(char)))->(int)
(	O
argc	int
,	O
argv	array(*(char))
)	O
int	O
argc	int
;	O
char	O
*	O
argv	array(*(char))
[	O
]	O
;	O
{	O
struct	O
commandline	struct(int,int,int,int,int,*(char),*(char))
cmd	struct(int,int,int,int,int,*(char),*(char))
;	O
if	O
(	O
!	O
parseargs	()->(int)
(	O
argc	int
,	O
argv	array(*(char))
,	O
&	O
cmd	struct(int,int,int,int,int,*(char),*(char))
)	O
)	O
{	O
f_print	O
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"usage: %s infile\n"	*(char)
,	O
cmdname	*(char)
)	O
;	O
f_print	O
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"       %s [-c | -h | -l | -m] [-o outfile] [infile]\n"	*(char)
,	O
cmdname	*(char)
)	O
;	O
f_print	O
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"       %s [-s udp|tcp]* [-o outfile] [infile]\n"	*(char)
,	O
cmdname	*(char)
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
if	O
(	O
cmd	struct(int,int,int,int,int,*(char),*(char))
.	O
cflag	int
)	O
{	O
c_output	()->(void)
(	O
cmd	struct(int,int,int,int,int,*(char),*(char))
.	O
infile	*(char)
,	O
"-DRPC_XDR"	*(char)
,	O
!	O
EXTEND	int
,	O
cmd	struct(int,int,int,int,int,*(char),*(char))
.	O
outfile	*(char)
)	O
;	O
}	O
else	O
if	O
(	O
cmd	struct(int,int,int,int,int,*(char),*(char))
.	O
hflag	int
)	O
{	O
h_output	()->(void)
(	O
cmd	struct(int,int,int,int,int,*(char),*(char))
.	O
infile	*(char)
,	O
"-DRPC_HDR"	*(char)
,	O
!	O
EXTEND	int
,	O
cmd	struct(int,int,int,int,int,*(char),*(char))
.	O
outfile	*(char)
)	O
;	O
}	O
else	O
if	O
(	O
cmd	struct(int,int,int,int,int,*(char),*(char))
.	O
lflag	int
)	O
{	O
l_output	()->(void)
(	O
cmd	struct(int,int,int,int,int,*(char),*(char))
.	O
infile	*(char)
,	O
"-DRPC_CLNT"	*(char)
,	O
!	O
EXTEND	int
,	O
cmd	struct(int,int,int,int,int,*(char),*(char))
.	O
outfile	*(char)
)	O
;	O
}	O
else	O
if	O
(	O
cmd	struct(int,int,int,int,int,*(char),*(char))
.	O
sflag	int
||	O
cmd	struct(int,int,int,int,int,*(char),*(char))
.	O
mflag	int
)	O
{	O
s_output	()->(void)
(	O
argc	int
,	O
argv	array(*(char))
,	O
cmd	struct(int,int,int,int,int,*(char),*(char))
.	O
infile	*(char)
,	O
"-DRPC_SVC"	*(char)
,	O
!	O
EXTEND	int
,	O
cmd	struct(int,int,int,int,int,*(char),*(char))
.	O
outfile	*(char)
,	O
cmd	struct(int,int,int,int,int,*(char),*(char))
.	O
mflag	int
)	O
;	O
}	O
else	O
{	O
c_output	()->(void)
(	O
cmd	struct(int,int,int,int,int,*(char),*(char))
.	O
infile	*(char)
,	O
"-DRPC_XDR"	*(char)
,	O
EXTEND	int
,	O
"_xdr.c"	*(char)
)	O
;	O
reinitialize	()->(void)
(	O
)	O
;	O
h_output	()->(void)
(	O
cmd	struct(int,int,int,int,int,*(char),*(char))
.	O
infile	*(char)
,	O
"-DRPC_HDR"	*(char)
,	O
EXTEND	int
,	O
".h"	*(char)
)	O
;	O
reinitialize	()->(void)
(	O
)	O
;	O
l_output	()->(void)
(	O
cmd	struct(int,int,int,int,int,*(char),*(char))
.	O
infile	*(char)
,	O
"-DRPC_CLNT"	*(char)
,	O
EXTEND	int
,	O
"_clnt.c"	*(char)
)	O
;	O
reinitialize	()->(void)
(	O
)	O
;	O
s_output	()->(void)
(	O
allc	int
,	O
allv	array(*(char))
,	O
cmd	struct(int,int,int,int,int,*(char),*(char))
.	O
infile	*(char)
,	O
"-DRPC_SVC"	*(char)
,	O
EXTEND	int
,	O
"_svc.c"	*(char)
,	O
cmd	struct(int,int,int,int,int,*(char),*(char))
.	O
mflag	int
)	O
;	O
}	O
exit	(int)->(void)
(	O
0	int
)	O
;	O
return	O
0	int
;	O
}	O
static	O
char	O
*	O
extendfile	(*(char),*(char))->(*(char))
(	O
path	*(char)
,	O
ext	*(char)
)	O
char	O
*	O
path	*(char)
;	O
char	O
*	O
ext	*(char)
;	O
{	O
char	O
*	O
file	*(char)
;	O
char	O
*	O
res	*(char)
;	O
char	O
*	O
p	*(char)
;	O
if	O
(	O
(	O
file	*(char)
=	O
strrchr	O
(	O
path	*(char)
,	O
'/'	O
)	O
)	O
==	O
NULL	O
)	O
file	*(char)
=	O
path	*(char)
;	O
else	O
file	*(char)
++	O
;	O
res	*(char)
=	O
alloc	O
(	O
strlen	O
(	O
file	*(char)
)	O
+	O
strlen	O
(	O
ext	*(char)
)	O
+	O
1	int
)	O
;	O
if	O
(	O
res	*(char)
==	O
NULL	O
)	O
{	O
abort	()->(void)
(	O
)	O
;	O
}	O
p	*(char)
=	O
strrchr	O
(	O
file	*(char)
,	O
'.'	O
)	O
;	O
if	O
(	O
p	*(char)
==	O
NULL	O
)	O
{	O
p	*(char)
=	O
file	*(char)
+	O
strlen	O
(	O
file	*(char)
)	O
;	O
}	O
(	O
void	O
)	O
strcpy	O
(	O
res	*(char)
,	O
file	*(char)
)	O
;	O
(	O
void	O
)	O
strcpy	O
(	O
res	*(char)
+	O
(	O
p	*(char)
-	O
file	*(char)
)	O
,	O
ext	*(char)
)	O
;	O
return	O
(	O
res	*(char)
)	O
;	O
}	O
static	O
void	O
open_output	(*(char),*(char))->(void)
(	O
infile	*(char)
,	O
outfile	*(char)
)	O
char	O
*	O
infile	*(char)
;	O
char	O
*	O
outfile	*(char)
;	O
{	O
if	O
(	O
outfile	*(char)
==	O
NULL	O
)	O
{	O
fout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
=	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
;	O
return	O
;	O
}	O
if	O
(	O
infile	*(char)
!=	O
NULL	O
&&	O
streq	()->(int)
(	O
outfile	*(char)
,	O
infile	*(char)
)	O
)	O
{	O
f_print	O
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s: output would overwrite %s\n"	*(char)
,	O
cmdname	*(char)
,	O
infile	*(char)
)	O
;	O
crash	()->(void)
(	O
)	O
;	O
}	O
fout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
=	O
fopen	(*(char),*(char))->(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))
(	O
outfile	*(char)
,	O
"w"	*(char)
)	O
;	O
if	O
(	O
fout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
==	O
NULL	O
)	O
{	O
f_print	O
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s: unable to open "	*(char)
,	O
cmdname	*(char)
)	O
;	O
perror	(*(char))->(void)
(	O
outfile	*(char)
)	O
;	O
crash	()->(void)
(	O
)	O
;	O
}	O
record_open	()->(void)
(	O
outfile	*(char)
)	O
;	O
}	O
static	O
void	O
open_input	(*(char),*(char))->(void)
(	O
infile	*(char)
,	O
define	*(char)
)	O
char	O
*	O
infile	*(char)
;	O
char	O
*	O
define	*(char)
;	O
{	O
int	O
pd	array(int)
[	O
2	int
]	O
;	O
infilename	*(char)
=	O
(	O
infile	*(char)
==	O
NULL	O
)	O
?	O
"<stdin>"	*(char)
:	O
infile	*(char)
;	O
(	O
void	O
)	O
pipe	()->(int)
(	O
pd	array(int)
)	O
;	O
switch	O
(	O
fork	()->(int)
(	O
)	O
)	O
{	O
case	O
0	int
:	O
(	O
void	O
)	O
close	()->(int)
(	O
1	int
)	O
;	O
(	O
void	O
)	O
dup2	()->(int)
(	O
pd	array(int)
[	O
1	int
]	O
,	O
1	int
)	O
;	O
(	O
void	O
)	O
close	()->(int)
(	O
pd	array(int)
[	O
0	int
]	O
)	O
;	O
execl	()->(int)
(	O
CPP	array(char)
,	O
CPP	array(char)
,	O
CPPFLAGS	array(char)
,	O
define	*(char)
,	O
infile	*(char)
,	O
NULL	O
)	O
;	O
perror	(*(char))->(void)
(	O
"execl"	*(char)
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
case	O
-	O
1	int
:	O
perror	(*(char))->(void)
(	O
"fork"	*(char)
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
(	O
void	O
)	O
close	()->(int)
(	O
pd	array(int)
[	O
1	int
]	O
)	O
;	O
fin	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
=	O
fdopen	(int,*(char))->(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))
(	O
pd	array(int)
[	O
0	int
]	O
,	O
"r"	*(char)
)	O
;	O
if	O
(	O
fin	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
==	O
NULL	O
)	O
{	O
f_print	O
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s: "	*(char)
,	O
cmdname	*(char)
)	O
;	O
perror	(*(char))->(void)
(	O
infilename	*(char)
)	O
;	O
crash	()->(void)
(	O
)	O
;	O
}	O
}	O
static	O
void	O
c_output	()->(void)
(	O
infile	*(char)
,	O
define	*(char)
,	O
extend	int
,	O
outfile	*(char)
)	O
char	O
*	O
infile	*(char)
;	O
char	O
*	O
define	*(char)
;	O
int	O
extend	int
;	O
char	O
*	O
outfile	*(char)
;	O
{	O
definition	struct(*(char),enum(int,int,int,int,int,int),union(*(char),struct(*(struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),int,array(char)),struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(*(char),struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),*(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)))),struct(*(struct(*(char),*(char),*(struct`)))),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct(*(char),*(char),*(struct`),*(struct`))))))
*	O
def	union(*(char),struct(*(struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),int,array(char)),struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(*(char),struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),*(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)))),struct(*(struct(*(char),*(char),*(struct`)))),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct(*(char),*(char),*(struct`),*(struct`)))))
;	O
char	O
*	O
include	*(char)
;	O
char	O
*	O
outfilename	*(char)
;	O
long	O
tell	long
;	O
open_input	(*(char),*(char))->(void)
(	O
infile	*(char)
,	O
define	*(char)
)	O
;	O
outfilename	*(char)
=	O
extend	int
?	O
extendfile	(*(char),*(char))->(*(char))
(	O
infile	*(char)
,	O
outfile	*(char)
)	O
:	O
outfile	*(char)
;	O
open_output	(*(char),*(char))->(void)
(	O
infile	*(char)
,	O
outfilename	*(char)
)	O
;	O
f_print	O
(	O
fout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"#include <rpc/rpc.h>\n"	*(char)
)	O
;	O
if	O
(	O
infile	*(char)
&&	O
(	O
include	*(char)
=	O
extendfile	(*(char),*(char))->(*(char))
(	O
infile	*(char)
,	O
".h"	*(char)
)	O
)	O
)	O
{	O
f_print	O
(	O
fout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"#include \"%s\"\n"	*(char)
,	O
include	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
include	*(char)
)	O
;	O
}	O
tell	long
=	O
ftell	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(long)
(	O
fout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
while	O
(	O
def	union(*(char),struct(*(struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),int,array(char)),struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(*(char),struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),*(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)))),struct(*(struct(*(char),*(char),*(struct`)))),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct(*(char),*(char),*(struct`),*(struct`)))))
=	O
get_definition	()->(*(struct(*(char),enum(int,int,int,int,int,int),union(*(char),struct(*`,int,array(char)),struct(struct`,*`,*`),struct(*`),struct(*`,*`,int,array(char),enum(int,int,int,int,int),*`),struct(*`,*`)))))
(	O
)	O
)	O
{	O
emit	()->(void)
(	O
def	union(*(char),struct(*(struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),int,array(char)),struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(*(char),struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),*(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)))),struct(*(struct(*(char),*(char),*(struct`)))),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct(*(char),*(char),*(struct`),*(struct`)))))
)	O
;	O
}	O
if	O
(	O
extend	int
&&	O
tell	long
==	O
ftell	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(long)
(	O
fout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
)	O
{	O
(	O
void	O
)	O
unlink	()->(int)
(	O
outfilename	*(char)
)	O
;	O
}	O
}	O
static	O
void	O
h_output	()->(void)
(	O
infile	*(char)
,	O
define	*(char)
,	O
extend	int
,	O
outfile	*(char)
)	O
char	O
*	O
infile	*(char)
;	O
char	O
*	O
define	*(char)
;	O
int	O
extend	int
;	O
char	O
*	O
outfile	*(char)
;	O
{	O
definition	struct(*(char),enum(int,int,int,int,int,int),union(*(char),struct(*(struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),int,array(char)),struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(*(char),struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),*(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)))),struct(*(struct(*(char),*(char),*(struct`)))),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct(*(char),*(char),*(struct`),*(struct`))))))
*	O
def	union(*(char),struct(*(struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),int,array(char)),struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(*(char),struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),*(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)))),struct(*(struct(*(char),*(char),*(struct`)))),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct(*(char),*(char),*(struct`),*(struct`)))))
;	O
char	O
*	O
outfilename	*(char)
;	O
long	O
tell	long
;	O
open_input	(*(char),*(char))->(void)
(	O
infile	*(char)
,	O
define	*(char)
)	O
;	O
outfilename	*(char)
=	O
extend	int
?	O
extendfile	(*(char),*(char))->(*(char))
(	O
infile	*(char)
,	O
outfile	*(char)
)	O
:	O
outfile	*(char)
;	O
open_output	(*(char),*(char))->(void)
(	O
infile	*(char)
,	O
outfilename	*(char)
)	O
;	O
tell	long
=	O
ftell	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(long)
(	O
fout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
f_print	O
(	O
fout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"#include <rpc/xdr.h>\n\n"	*(char)
)	O
;	O
while	O
(	O
def	union(*(char),struct(*(struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),int,array(char)),struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(*(char),struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),*(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)))),struct(*(struct(*(char),*(char),*(struct`)))),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct(*(char),*(char),*(struct`),*(struct`)))))
=	O
get_definition	()->(*(struct(*(char),enum(int,int,int,int,int,int),union(*(char),struct(*`,int,array(char)),struct(struct`,*`,*`),struct(*`),struct(*`,*`,int,array(char),enum(int,int,int,int,int),*`),struct(*`,*`)))))
(	O
)	O
)	O
{	O
print_datadef	()->(void)
(	O
def	union(*(char),struct(*(struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),int,array(char)),struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(*(char),struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),*(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)))),struct(*(struct(*(char),*(char),*(struct`)))),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct(*(char),*(char),*(struct`),*(struct`)))))
)	O
;	O
}	O
if	O
(	O
extend	int
&&	O
tell	long
==	O
ftell	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(long)
(	O
fout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
)	O
{	O
(	O
void	O
)	O
unlink	()->(int)
(	O
outfilename	*(char)
)	O
;	O
}	O
}	O
static	O
void	O
s_output	()->(void)
(	O
argc	int
,	O
argv	array(*(char))
,	O
infile	*(char)
,	O
define	*(char)
,	O
extend	int
,	O
outfile	*(char)
,	O
nomain	int
)	O
int	O
argc	int
;	O
char	O
*	O
argv	array(*(char))
[	O
]	O
;	O
char	O
*	O
infile	*(char)
;	O
char	O
*	O
define	*(char)
;	O
int	O
extend	int
;	O
char	O
*	O
outfile	*(char)
;	O
int	O
nomain	int
;	O
{	O
char	O
*	O
include	*(char)
;	O
definition	struct(*(char),enum(int,int,int,int,int,int),union(*(char),struct(*(struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),int,array(char)),struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(*(char),struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),*(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)))),struct(*(struct(*(char),*(char),*(struct`)))),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct(*(char),*(char),*(struct`),*(struct`))))))
*	O
def	union(*(char),struct(*(struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),int,array(char)),struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(*(char),struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),*(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)))),struct(*(struct(*(char),*(char),*(struct`)))),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct(*(char),*(char),*(struct`),*(struct`)))))
;	O
int	O
foundprogram	int
;	O
char	O
*	O
outfilename	*(char)
;	O
open_input	(*(char),*(char))->(void)
(	O
infile	*(char)
,	O
define	*(char)
)	O
;	O
outfilename	*(char)
=	O
extend	int
?	O
extendfile	(*(char),*(char))->(*(char))
(	O
infile	*(char)
,	O
outfile	*(char)
)	O
:	O
outfile	*(char)
;	O
open_output	(*(char),*(char))->(void)
(	O
infile	*(char)
,	O
outfilename	*(char)
)	O
;	O
f_print	O
(	O
fout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"#include <stdio.h>\n"	*(char)
)	O
;	O
f_print	O
(	O
fout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"#include <rpc/rpc.h>\n"	*(char)
)	O
;	O
if	O
(	O
infile	*(char)
&&	O
(	O
include	*(char)
=	O
extendfile	(*(char),*(char))->(*(char))
(	O
infile	*(char)
,	O
".h"	*(char)
)	O
)	O
)	O
{	O
f_print	O
(	O
fout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"#include \"%s\"\n"	*(char)
,	O
include	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
include	*(char)
)	O
;	O
}	O
foundprogram	int
=	O
0	int
;	O
while	O
(	O
def	union(*(char),struct(*(struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),int,array(char)),struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(*(char),struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),*(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)))),struct(*(struct(*(char),*(char),*(struct`)))),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct(*(char),*(char),*(struct`),*(struct`)))))
=	O
get_definition	()->(*(struct(*(char),enum(int,int,int,int,int,int),union(*(char),struct(*`,int,array(char)),struct(struct`,*`,*`),struct(*`),struct(*`,*`,int,array(char),enum(int,int,int,int,int),*`),struct(*`,*`)))))
(	O
)	O
)	O
{	O
foundprogram	int
|=	O
(	O
def	union(*(char),struct(*(struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),int,array(char)),struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(*(char),struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),*(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)))),struct(*(struct(*(char),*(char),*(struct`)))),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct(*(char),*(char),*(struct`),*(struct`)))))
->	O
def_kind	enum(int,int,int,int,int,int)
==	O
DEF_PROGRAM	int
)	O
;	O
}	O
if	O
(	O
extend	int
&&	O
!	O
foundprogram	int
)	O
{	O
(	O
void	O
)	O
unlink	()->(int)
(	O
outfilename	*(char)
)	O
;	O
return	O
;	O
}	O
if	O
(	O
nomain	int
)	O
{	O
write_programs	()->(void)
(	O
(	O
char	O
*	O
)	O
NULL	O
)	O
;	O
}	O
else	O
{	O
write_most	()->(void)
(	O
)	O
;	O
do_registers	()->(void)
(	O
argc	int
,	O
argv	array(*(char))
)	O
;	O
write_rest	()->(void)
(	O
)	O
;	O
write_programs	()->(void)
(	O
"static"	*(char)
)	O
;	O
}	O
}	O
static	O
void	O
l_output	()->(void)
(	O
infile	*(char)
,	O
define	*(char)
,	O
extend	int
,	O
outfile	*(char)
)	O
char	O
*	O
infile	*(char)
;	O
char	O
*	O
define	*(char)
;	O
int	O
extend	int
;	O
char	O
*	O
outfile	*(char)
;	O
{	O
char	O
*	O
include	*(char)
;	O
definition	struct(*(char),enum(int,int,int,int,int,int),union(*(char),struct(*(struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),int,array(char)),struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(*(char),struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),*(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)))),struct(*(struct(*(char),*(char),*(struct`)))),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct(*(char),*(char),*(struct`),*(struct`))))))
*	O
def	union(*(char),struct(*(struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),int,array(char)),struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(*(char),struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),*(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)))),struct(*(struct(*(char),*(char),*(struct`)))),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct(*(char),*(char),*(struct`),*(struct`)))))
;	O
int	O
foundprogram	int
;	O
char	O
*	O
outfilename	*(char)
;	O
open_input	(*(char),*(char))->(void)
(	O
infile	*(char)
,	O
define	*(char)
)	O
;	O
outfilename	*(char)
=	O
extend	int
?	O
extendfile	(*(char),*(char))->(*(char))
(	O
infile	*(char)
,	O
outfile	*(char)
)	O
:	O
outfile	*(char)
;	O
open_output	(*(char),*(char))->(void)
(	O
infile	*(char)
,	O
outfilename	*(char)
)	O
;	O
f_print	O
(	O
fout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"#include <rpc/rpc.h>\n"	*(char)
)	O
;	O
if	O
(	O
infile	*(char)
&&	O
(	O
include	*(char)
=	O
extendfile	(*(char),*(char))->(*(char))
(	O
infile	*(char)
,	O
".h"	*(char)
)	O
)	O
)	O
{	O
f_print	O
(	O
fout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"#include \"%s\"\n"	*(char)
,	O
include	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
include	*(char)
)	O
;	O
}	O
foundprogram	int
=	O
0	int
;	O
while	O
(	O
def	union(*(char),struct(*(struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),int,array(char)),struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(*(char),struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),*(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)))),struct(*(struct(*(char),*(char),*(struct`)))),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct(*(char),*(char),*(struct`),*(struct`)))))
=	O
get_definition	()->(*(struct(*(char),enum(int,int,int,int,int,int),union(*(char),struct(*`,int,array(char)),struct(struct`,*`,*`),struct(*`),struct(*`,*`,int,array(char),enum(int,int,int,int,int),*`),struct(*`,*`)))))
(	O
)	O
)	O
{	O
foundprogram	int
|=	O
(	O
def	union(*(char),struct(*(struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),int,array(char)),struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(*(char),struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),*(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)))),struct(*(struct(*(char),*(char),*(struct`)))),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct(*(char),*(char),*(struct`),*(struct`)))))
->	O
def_kind	enum(int,int,int,int,int,int)
==	O
DEF_PROGRAM	int
)	O
;	O
}	O
if	O
(	O
extend	int
&&	O
!	O
foundprogram	int
)	O
{	O
(	O
void	O
)	O
unlink	()->(int)
(	O
outfilename	*(char)
)	O
;	O
return	O
;	O
}	O
write_stubs	()->(void)
(	O
)	O
;	O
}	O
static	O
void	O
do_registers	()->(void)
(	O
argc	int
,	O
argv	array(*(char))
)	O
int	O
argc	int
;	O
char	O
*	O
argv	array(*(char))
[	O
]	O
;	O
{	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
1	int
;	O
i	int
<	O
argc	int
;	O
i	int
++	O
)	O
{	O
if	O
(	O
streq	()->(int)
(	O
argv	array(*(char))
[	O
i	int
]	O
,	O
"-s"	*(char)
)	O
)	O
{	O
write_register	()->(void)
(	O
argv	array(*(char))
[	O
i	int
+	O
1	int
]	O
)	O
;	O
i	int
++	O
;	O
}	O
}	O
}	O
static	O
parseargs	()->(int)
(	O
argc	int
,	O
argv	array(*(char))
,	O
cmd	struct(int,int,int,int,int,*(char),*(char))
)	O
int	O
argc	int
;	O
char	O
*	O
argv	array(*(char))
[	O
]	O
;	O
struct	O
commandline	struct(int,int,int,int,int,*(char),*(char))
*	O
cmd	struct(int,int,int,int,int,*(char),*(char))
;	O
{	O
int	O
i	int
;	O
int	O
j	int
;	O
char	O
c	char
;	O
char	O
flag	array(char)
[	O
(	O
1	int
<<	O
8	int
*	O
sizeof	O
(	O
char	O
)	O
)	O
]	O
;	O
int	O
nflags	int
;	O
cmdname	*(char)
=	O
argv	array(*(char))
[	O
0	int
]	O
;	O
cmd	struct(int,int,int,int,int,*(char),*(char))
->	O
infile	*(char)
=	O
cmd	struct(int,int,int,int,int,*(char),*(char))
->	O
outfile	*(char)
=	O
NULL	O
;	O
if	O
(	O
argc	int
<	O
2	int
)	O
{	O
return	O
(	O
0	int
)	O
;	O
}	O
flag	array(char)
[	O
'c'	O
]	O
=	O
0	int
;	O
flag	array(char)
[	O
'h'	O
]	O
=	O
0	int
;	O
flag	array(char)
[	O
's'	O
]	O
=	O
0	int
;	O
flag	array(char)
[	O
'o'	O
]	O
=	O
0	int
;	O
flag	array(char)
[	O
'l'	O
]	O
=	O
0	int
;	O
flag	array(char)
[	O
'm'	O
]	O
=	O
0	int
;	O
for	O
(	O
i	int
=	O
1	int
;	O
i	int
<	O
argc	int
;	O
i	int
++	O
)	O
{	O
if	O
(	O
argv	array(*(char))
[	O
i	int
]	O
[	O
0	int
]	O
!=	O
'-'	O
)	O
{	O
if	O
(	O
cmd	struct(int,int,int,int,int,*(char),*(char))
->	O
infile	*(char)
)	O
{	O
return	O
(	O
0	int
)	O
;	O
}	O
cmd	struct(int,int,int,int,int,*(char),*(char))
->	O
infile	*(char)
=	O
argv	array(*(char))
[	O
i	int
]	O
;	O
}	O
else	O
{	O
for	O
(	O
j	int
=	O
1	int
;	O
argv	array(*(char))
[	O
i	int
]	O
[	O
j	int
]	O
!=	O
0	int
;	O
j	int
++	O
)	O
{	O
c	char
=	O
argv	array(*(char))
[	O
i	int
]	O
[	O
j	int
]	O
;	O
switch	O
(	O
c	char
)	O
{	O
case	O
'c'	O
:	O
case	O
'h'	O
:	O
case	O
'l'	O
:	O
case	O
'm'	O
:	O
if	O
(	O
flag	array(char)
[	O
c	char
]	O
)	O
{	O
return	O
(	O
0	int
)	O
;	O
}	O
flag	array(char)
[	O
c	char
]	O
=	O
1	int
;	O
break	O
;	O
case	O
'o'	O
:	O
case	O
's'	O
:	O
if	O
(	O
argv	array(*(char))
[	O
i	int
]	O
[	O
j	int
-	O
1	int
]	O
!=	O
'-'	O
||	O
argv	array(*(char))
[	O
i	int
]	O
[	O
j	int
+	O
1	int
]	O
!=	O
0	int
)	O
{	O
return	O
(	O
0	int
)	O
;	O
}	O
flag	array(char)
[	O
c	char
]	O
=	O
1	int
;	O
if	O
(	O
++	O
i	int
==	O
argc	int
)	O
{	O
return	O
(	O
0	int
)	O
;	O
}	O
if	O
(	O
c	char
==	O
's'	O
)	O
{	O
if	O
(	O
!	O
streq	()->(int)
(	O
argv	array(*(char))
[	O
i	int
]	O
,	O
"udp"	*(char)
)	O
&&	O
!	O
streq	()->(int)
(	O
argv	array(*(char))
[	O
i	int
]	O
,	O
"tcp"	*(char)
)	O
)	O
{	O
return	O
(	O
0	int
)	O
;	O
}	O
}	O
else	O
if	O
(	O
c	char
==	O
'o'	O
)	O
{	O
if	O
(	O
cmd	struct(int,int,int,int,int,*(char),*(char))
->	O
outfile	*(char)
)	O
{	O
return	O
(	O
0	int
)	O
;	O
}	O
cmd	struct(int,int,int,int,int,*(char),*(char))
->	O
outfile	*(char)
=	O
argv	array(*(char))
[	O
i	int
]	O
;	O
}	O
goto	O
nextarg	O
;	O
default	O
:	O
return	O
(	O
0	int
)	O
;	O
}	O
}	O
nextarg	O
:	O
;	O
}	O
}	O
cmd	struct(int,int,int,int,int,*(char),*(char))
->	O
cflag	int
=	O
flag	array(char)
[	O
'c'	O
]	O
;	O
cmd	struct(int,int,int,int,int,*(char),*(char))
->	O
hflag	int
=	O
flag	array(char)
[	O
'h'	O
]	O
;	O
cmd	struct(int,int,int,int,int,*(char),*(char))
->	O
sflag	int
=	O
flag	array(char)
[	O
's'	O
]	O
;	O
cmd	struct(int,int,int,int,int,*(char),*(char))
->	O
lflag	int
=	O
flag	array(char)
[	O
'l'	O
]	O
;	O
cmd	struct(int,int,int,int,int,*(char),*(char))
->	O
mflag	int
=	O
flag	array(char)
[	O
'm'	O
]	O
;	O
nflags	int
=	O
cmd	struct(int,int,int,int,int,*(char),*(char))
->	O
cflag	int
+	O
cmd	struct(int,int,int,int,int,*(char),*(char))
->	O
hflag	int
+	O
cmd	struct(int,int,int,int,int,*(char),*(char))
->	O
sflag	int
+	O
cmd	struct(int,int,int,int,int,*(char),*(char))
->	O
lflag	int
+	O
cmd	struct(int,int,int,int,int,*(char),*(char))
->	O
mflag	int
;	O
if	O
(	O
nflags	int
==	O
0	int
)	O
{	O
if	O
(	O
cmd	struct(int,int,int,int,int,*(char),*(char))
->	O
outfile	*(char)
!=	O
NULL	O
||	O
cmd	struct(int,int,int,int,int,*(char),*(char))
->	O
infile	*(char)
==	O
NULL	O
)	O
{	O
return	O
(	O
0	int
)	O
;	O
}	O
}	O
else	O
if	O
(	O
nflags	int
>	O
1	int
)	O
{	O
return	O
(	O
0	int
)	O
;	O
}	O
return	O
(	O
1	int
)	O
;	O
}	O
