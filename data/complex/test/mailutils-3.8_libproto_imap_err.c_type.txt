int	O
_mu_imap_seterrstr	(*(struct(int,enum(int,int,int),int,*(char),long,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int),long,*(int),*(char),*(struct),*(struct),*(char),int,struct(int,int,int,long,long,long,long,long),array(struct(*((*(void),int,long,*(void))->(void)),*(void))))),*(char),long)->(int)
(	O
mu_imap_t	*(struct)
imap	*(struct)
,	O
const	O
char	O
*	O
str	*(struct)
,	O
size_t	long
len	long
)	O
{	O
if	O
(	O
!	O
imap	*(struct)
)	O
return	O
EINVAL	int
;	O
if	O
(	O
len	long
+	O
1	int
>	O
imap	*(struct)
->	O
errsize	long
)	O
{	O
char	O
*	O
p	*(char)
=	O
realloc	(*(void),long)->(*(void))
(	O
imap	*(struct)
->	O
errstr	*(char)
,	O
len	long
+	O
1	int
)	O
;	O
if	O
(	O
!	O
p	*(char)
)	O
return	O
ENOMEM	int
;	O
imap	*(struct)
->	O
errsize	long
=	O
len	long
+	O
1	int
;	O
imap	*(struct)
->	O
errstr	*(char)
=	O
p	*(char)
;	O
}	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
imap	*(struct)
->	O
errstr	*(char)
,	O
str	*(struct)
,	O
len	long
)	O
;	O
imap	*(struct)
->	O
errstr	*(char)
[	O
len	long
]	O
=	O
0	int
;	O
return	O
0	int
;	O
}	O
int	O
_mu_imap_seterrstrz	(*(struct(int,enum(int,int,int),int,*(char),long,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int),long,*(int),*(char),*(struct),*(struct),*(char),int,struct(int,int,int,long,long,long,long,long),array(struct(*((*(void),int,long,*(void))->(void)),*(void))))),*(char))->(int)
(	O
mu_imap_t	*(struct)
imap	*(struct)
,	O
const	O
char	O
*	O
str	*(struct)
)	O
{	O
return	O
_mu_imap_seterrstr	(*(struct(int,enum(int,int,int),int,*(char),long,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int),long,*(int),*(char),*(struct),*(struct),*(char),int,struct(int,int,int,long,long,long,long,long),array(struct(*((*(void),int,long,*(void))->(void)),*(void))))),*(char),long)->(int)
(	O
imap	*(struct)
,	O
str	*(struct)
,	O
strlen	(*(char))->(long)
(	O
str	*(struct)
)	O
)	O
;	O
}	O
void	O
_mu_imap_clrerrstr	(*(struct(int,enum(int,int,int),int,*(char),long,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int),long,*(int),*(char),*(struct),*(struct),*(char),int,struct(int,int,int,long,long,long,long,long),array(struct(*((*(void),int,long,*(void))->(void)),*(void))))))->(void)
(	O
mu_imap_t	*(struct)
imap	*(struct)
)	O
{	O
if	O
(	O
imap	*(struct)
&&	O
imap	*(struct)
->	O
errstr	*(char)
)	O
imap	*(struct)
->	O
errstr	*(char)
[	O
0	int
]	O
=	O
0	int
;	O
}	O
int	O
mu_imap_strerror	(*(struct),*(*(char)))->(int)
(	O
mu_imap_t	*(struct)
imap	*(struct)
,	O
const	O
char	O
*	O
*	O
pstr	*(*(char))
)	O
{	O
if	O
(	O
!	O
imap	*(struct)
)	O
{	O
*	O
pstr	*(*(char))
=	O
"(imap not initialized)"	*(char)
;	O
return	O
EINVAL	int
;	O
}	O
if	O
(	O
MU_IMAP_FISSET	O
(	O
imap	*(struct)
,	O
MU_IMAP_RESP	int
)	O
)	O
{	O
*	O
pstr	*(*(char))
=	O
imap	*(struct)
->	O
errstr	*(char)
;	O
return	O
0	int
;	O
}	O
*	O
pstr	*(*(char))
=	O
"(no recent reply)"	*(char)
;	O
return	O
MU_ERR_NOENT	O
;	O
}	O
enum	O
mu_imap_response	(*(struct))->(enum)
mu_imap_response	(*(struct))->(enum)
(	O
mu_imap_t	*(struct)
imap	*(struct)
)	O
{	O
if	O
(	O
!	O
imap	*(struct)
)	O
return	O
MU_IMAP_BAD	int
;	O
return	O
imap	*(struct)
->	O
response	enum(int,int,int)
;	O
}	O
int	O
mu_imap_response_code	(*(struct))->(int)
(	O
mu_imap_t	*(struct)
imap	*(struct)
)	O
{	O
if	O
(	O
!	O
imap	*(struct)
)	O
return	O
-	O
1	int
;	O
return	O
imap	*(struct)
->	O
response_code	int
;	O
}	O
