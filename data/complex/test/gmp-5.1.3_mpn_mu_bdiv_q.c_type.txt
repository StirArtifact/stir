void	O
mpn_mu_bdiv_q	O
(	O
mp_ptr	*(long)
qp	*(long)
,	O
mp_srcptr	*(long)
np	*(long)
,	O
mp_size_t	long
nn	long
,	O
mp_srcptr	*(long)
dp	*(long)
,	O
mp_size_t	long
dn	long
,	O
mp_ptr	*(long)
scratch	*(long)
)	O
{	O
mp_size_t	long
qn	long
;	O
mp_size_t	long
in	long
;	O
int	O
cy	int
,	O
c0	int
;	O
mp_size_t	long
tn	long
,	O
wn	long
;	O
qn	long
=	O
nn	long
;	O
ASSERT	O
(	O
dn	long
>=	O
2	int
)	O
;	O
ASSERT	O
(	O
qn	long
>=	O
2	int
)	O
;	O
if	O
(	O
qn	long
>	O
dn	long
)	O
{	O
mp_size_t	long
b	int
;	O
b	int
=	O
(	O
qn	long
-	O
1	int
)	O
/	O
dn	long
+	O
1	int
;	O
in	long
=	O
(	O
qn	long
-	O
1	int
)	O
/	O
b	int
+	O
1	int
;	O
mpn_binvert	O
(	O
ip	O
,	O
dp	*(long)
,	O
in	long
,	O
rp	O
)	O
;	O
cy	int
=	O
0	int
;	O
MPN_COPY	O
(	O
rp	O
,	O
np	*(long)
,	O
dn	long
)	O
;	O
np	*(long)
+=	O
dn	long
;	O
mpn_mullo_n	O
(	O
qp	*(long)
,	O
rp	O
,	O
ip	O
,	O
in	long
)	O
;	O
qn	long
-=	O
in	long
;	O
while	O
(	O
qn	long
>	O
in	long
)	O
{	O
if	O
(	O
BELOW_THRESHOLD	O
(	O
in	long
,	O
MUL_TO_MULMOD_BNM1_FOR_2NXN_THRESHOLD	O
)	O
)	O
mpn_mul	O
(	O
tp	*(long)
,	O
dp	*(long)
,	O
dn	long
,	O
qp	*(long)
,	O
in	long
)	O
;	O
else	O
{	O
tn	long
=	O
mpn_mulmod_bnm1_next_size	O
(	O
dn	long
)	O
;	O
mpn_mulmod_bnm1	O
(	O
tp	*(long)
,	O
tn	long
,	O
dp	*(long)
,	O
dn	long
,	O
qp	*(long)
,	O
in	long
,	O
scratch_out	O
)	O
;	O
wn	long
=	O
dn	long
+	O
in	long
-	O
tn	long
;	O
if	O
(	O
wn	long
>	O
0	int
)	O
{	O
c0	int
=	O
mpn_sub_n	O
(	O
tp	*(long)
+	O
tn	long
,	O
tp	*(long)
,	O
rp	O
,	O
wn	long
)	O
;	O
mpn_decr_u	O
(	O
tp	*(long)
+	O
wn	long
,	O
c0	int
)	O
;	O
}	O
}	O
qp	*(long)
+=	O
in	long
;	O
if	O
(	O
dn	long
!=	O
in	long
)	O
{	O
cy	int
+=	O
mpn_sub_n	O
(	O
rp	O
,	O
rp	O
+	O
in	long
,	O
tp	*(long)
+	O
in	long
,	O
dn	long
-	O
in	long
)	O
;	O
if	O
(	O
cy	int
==	O
2	int
)	O
{	O
mpn_incr_u	O
(	O
tp	*(long)
+	O
dn	long
,	O
1	int
)	O
;	O
cy	int
=	O
1	int
;	O
}	O
}	O
cy	int
=	O
mpn_sub_nc	O
(	O
rp	O
+	O
dn	long
-	O
in	long
,	O
np	*(long)
,	O
tp	*(long)
+	O
dn	long
,	O
in	long
,	O
cy	int
)	O
;	O
np	*(long)
+=	O
in	long
;	O
mpn_mullo_n	O
(	O
qp	*(long)
,	O
rp	O
,	O
ip	O
,	O
in	long
)	O
;	O
qn	long
-=	O
in	long
;	O
}	O
if	O
(	O
BELOW_THRESHOLD	O
(	O
in	long
,	O
MUL_TO_MULMOD_BNM1_FOR_2NXN_THRESHOLD	O
)	O
)	O
mpn_mul	O
(	O
tp	*(long)
,	O
dp	*(long)
,	O
dn	long
,	O
qp	*(long)
,	O
in	long
)	O
;	O
else	O
{	O
tn	long
=	O
mpn_mulmod_bnm1_next_size	O
(	O
dn	long
)	O
;	O
mpn_mulmod_bnm1	O
(	O
tp	*(long)
,	O
tn	long
,	O
dp	*(long)
,	O
dn	long
,	O
qp	*(long)
,	O
in	long
,	O
scratch_out	O
)	O
;	O
wn	long
=	O
dn	long
+	O
in	long
-	O
tn	long
;	O
if	O
(	O
wn	long
>	O
0	int
)	O
{	O
c0	int
=	O
mpn_sub_n	O
(	O
tp	*(long)
+	O
tn	long
,	O
tp	*(long)
,	O
rp	O
,	O
wn	long
)	O
;	O
mpn_decr_u	O
(	O
tp	*(long)
+	O
wn	long
,	O
c0	int
)	O
;	O
}	O
}	O
qp	*(long)
+=	O
in	long
;	O
if	O
(	O
dn	long
!=	O
in	long
)	O
{	O
cy	int
+=	O
mpn_sub_n	O
(	O
rp	O
,	O
rp	O
+	O
in	long
,	O
tp	*(long)
+	O
in	long
,	O
dn	long
-	O
in	long
)	O
;	O
if	O
(	O
cy	int
==	O
2	int
)	O
{	O
mpn_incr_u	O
(	O
tp	*(long)
+	O
dn	long
,	O
1	int
)	O
;	O
cy	int
=	O
1	int
;	O
}	O
}	O
mpn_sub_nc	O
(	O
rp	O
+	O
dn	long
-	O
in	long
,	O
np	*(long)
,	O
tp	*(long)
+	O
dn	long
,	O
qn	long
-	O
(	O
dn	long
-	O
in	long
)	O
,	O
cy	int
)	O
;	O
mpn_mullo_n	O
(	O
qp	*(long)
,	O
rp	O
,	O
ip	O
,	O
qn	long
)	O
;	O
}	O
else	O
{	O
in	long
=	O
qn	long
-	O
(	O
qn	long
>>	O
1	int
)	O
;	O
mpn_binvert	O
(	O
ip	O
,	O
dp	*(long)
,	O
in	long
,	O
tp	*(long)
)	O
;	O
mpn_mullo_n	O
(	O
qp	*(long)
,	O
np	*(long)
,	O
ip	O
,	O
in	long
)	O
;	O
if	O
(	O
BELOW_THRESHOLD	O
(	O
in	long
,	O
MUL_TO_MULMOD_BNM1_FOR_2NXN_THRESHOLD	O
)	O
)	O
mpn_mul	O
(	O
tp	*(long)
,	O
dp	*(long)
,	O
qn	long
,	O
qp	*(long)
,	O
in	long
)	O
;	O
else	O
{	O
tn	long
=	O
mpn_mulmod_bnm1_next_size	O
(	O
qn	long
)	O
;	O
mpn_mulmod_bnm1	O
(	O
tp	*(long)
,	O
tn	long
,	O
dp	*(long)
,	O
qn	long
,	O
qp	*(long)
,	O
in	long
,	O
scratch_out	O
)	O
;	O
wn	long
=	O
qn	long
+	O
in	long
-	O
tn	long
;	O
if	O
(	O
wn	long
>	O
0	int
)	O
{	O
c0	int
=	O
mpn_cmp	O
(	O
tp	*(long)
,	O
np	*(long)
,	O
wn	long
)	O
<	O
0	int
;	O
mpn_decr_u	O
(	O
tp	*(long)
+	O
wn	long
,	O
c0	int
)	O
;	O
}	O
}	O
mpn_sub_n	O
(	O
tp	*(long)
,	O
np	*(long)
+	O
in	long
,	O
tp	*(long)
+	O
in	long
,	O
qn	long
-	O
in	long
)	O
;	O
mpn_mullo_n	O
(	O
qp	*(long)
+	O
in	long
,	O
tp	*(long)
,	O
ip	O
,	O
qn	long
-	O
in	long
)	O
;	O
}	O
}	O
mp_size_t	long
mpn_mu_bdiv_q_itch	O
(	O
mp_size_t	long
nn	long
,	O
mp_size_t	long
dn	long
)	O
{	O
mp_size_t	long
qn	long
,	O
in	long
,	O
tn	long
,	O
itch_binvert	long
,	O
itch_out	long
,	O
itches	long
;	O
mp_size_t	long
b	int
;	O
qn	long
=	O
nn	long
;	O
if	O
(	O
qn	long
>	O
dn	long
)	O
{	O
b	int
=	O
(	O
qn	long
-	O
1	int
)	O
/	O
dn	long
+	O
1	int
;	O
in	long
=	O
(	O
qn	long
-	O
1	int
)	O
/	O
b	int
+	O
1	int
;	O
if	O
(	O
BELOW_THRESHOLD	O
(	O
in	long
,	O
MUL_TO_MULMOD_BNM1_FOR_2NXN_THRESHOLD	O
)	O
)	O
{	O
tn	long
=	O
dn	long
+	O
in	long
;	O
itch_out	long
=	O
0	int
;	O
}	O
else	O
{	O
tn	long
=	O
mpn_mulmod_bnm1_next_size	O
(	O
dn	long
)	O
;	O
itch_out	long
=	O
mpn_mulmod_bnm1_itch	(long,long,long)->(long)
(	O
tn	long
,	O
dn	long
,	O
in	long
)	O
;	O
}	O
itch_binvert	long
=	O
mpn_binvert_itch	O
(	O
in	long
)	O
;	O
itches	long
=	O
dn	long
+	O
tn	long
+	O
itch_out	long
;	O
return	O
in	long
+	O
MAX	O
(	O
itches	long
,	O
itch_binvert	long
)	O
;	O
}	O
else	O
{	O
in	long
=	O
qn	long
-	O
(	O
qn	long
>>	O
1	int
)	O
;	O
if	O
(	O
BELOW_THRESHOLD	O
(	O
in	long
,	O
MUL_TO_MULMOD_BNM1_FOR_2NXN_THRESHOLD	O
)	O
)	O
{	O
tn	long
=	O
qn	long
+	O
in	long
;	O
itch_out	long
=	O
0	int
;	O
}	O
else	O
{	O
tn	long
=	O
mpn_mulmod_bnm1_next_size	O
(	O
qn	long
)	O
;	O
itch_out	long
=	O
mpn_mulmod_bnm1_itch	(long,long,long)->(long)
(	O
tn	long
,	O
qn	long
,	O
in	long
)	O
;	O
}	O
itch_binvert	long
=	O
mpn_binvert_itch	O
(	O
in	long
)	O
;	O
itches	long
=	O
tn	long
+	O
itch_out	long
;	O
return	O
in	long
+	O
MAX	O
(	O
itches	long
,	O
itch_binvert	long
)	O
;	O
}	O
}	O
