void	O
printOom	()->(void)
(	O
void	O
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"Out of memory error"	*(char)
)	O
;	O
}	O
char	O
*	O
get_homedir	()->(*(char))
(	O
void	O
)	O
{	O
struct	O
passwd	struct(*(char),*(char),int,int,*(char),*(char),*(char))
*	O
pw	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
;	O
uid_t	int
uid	int
;	O
char	O
*	O
homedir	*(char)
;	O
char	O
*	O
username	*(char)
;	O
homedir	*(char)
=	O
getenv	(*(char))->(*(char))
(	O
"HOME"	*(char)
)	O
;	O
if	O
(	O
homedir	*(char)
)	O
return	O
homedir	*(char)
;	O
pw	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
=	O
0	int
;	O
username	*(char)
=	O
getenv	(*(char))->(*(char))
(	O
"LOGNAME"	*(char)
)	O
;	O
if	O
(	O
!	O
username	*(char)
)	O
username	*(char)
=	O
getlogin	()->(*(char))
(	O
)	O
;	O
if	O
(	O
username	*(char)
)	O
pw	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
=	O
getpwnam	(*(char))->(*(struct(*(char),*(char),int,int,*(char),*(char),*(char))))
(	O
username	*(char)
)	O
;	O
if	O
(	O
pw	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
==	O
0	int
)	O
{	O
uid	int
=	O
geteuid	()->(int)
(	O
)	O
;	O
pw	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
=	O
getpwuid	(int)->(*(struct(*(char),*(char),int,int,*(char),*(char),*(char))))
(	O
uid	int
)	O
;	O
}	O
if	O
(	O
pw	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
)	O
return	O
pw	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
->	O
pw_dir	*(char)
;	O
return	O
0	int
;	O
}	O
static	O
void	O
get_mcwd_file_name	(*(char))->(void)
(	O
char	O
*	O
file	*(char)
)	O
{	O
char	O
*	O
mcwd_path	*(char)
;	O
const	O
char	O
*	O
homedir	*(char)
;	O
mcwd_path	*(char)
=	O
getenv	(*(char))->(*(char))
(	O
"MCWD"	*(char)
)	O
;	O
if	O
(	O
mcwd_path	*(char)
==	O
NULL	O
||	O
*	O
mcwd_path	*(char)
==	O
'\0'	O
)	O
{	O
homedir	*(char)
=	O
get_homedir	()->(*(char))
(	O
)	O
;	O
if	O
(	O
!	O
homedir	*(char)
)	O
homedir	*(char)
=	O
"/tmp"	*(char)
;	O
strncpy	(*(char),*(char),long)->(*(char))
(	O
file	*(char)
,	O
homedir	*(char)
,	O
MAXPATHLEN	O
-	O
6	int
)	O
;	O
file	*(char)
[	O
MAXPATHLEN	O
-	O
6	int
]	O
=	O
'\0'	O
;	O
strcat	(*(char),*(char))->(*(char))
(	O
file	*(char)
,	O
"/.mcwd"	*(char)
)	O
;	O
}	O
else	O
{	O
strncpy	(*(char),*(char),long)->(*(char))
(	O
file	*(char)
,	O
mcwd_path	*(char)
,	O
MAXPATHLEN	O
)	O
;	O
file	*(char)
[	O
MAXPATHLEN	O
]	O
=	O
'\0'	O
;	O
}	O
}	O
void	O
unlink_mcwd	()->(void)
(	O
void	O
)	O
{	O
char	O
file	*(char)
[	O
MAXPATHLEN	O
+	O
1	int
]	O
;	O
get_mcwd_file_name	(*(char))->(void)
(	O
file	*(char)
)	O
;	O
unlink	(*(char))->(int)
(	O
file	*(char)
)	O
;	O
}	O
FILE	struct
*	O
open_mcwd	(*(char))->(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))
(	O
const	O
char	O
*	O
mode	int
)	O
{	O
struct	O
MT_STAT	O
sbuf	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
;	O
char	O
file	*(char)
[	O
MAXPATHLEN	O
+	O
1	int
]	O
;	O
time_t	long
now	*(long)
;	O
get_mcwd_file_name	(*(char))->(void)
(	O
file	*(char)
)	O
;	O
if	O
(	O
*	O
mode	int
==	O
'r'	O
)	O
{	O
if	O
(	O
MT_STAT	O
(	O
file	*(char)
,	O
&	O
sbuf	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
)	O
<	O
0	int
)	O
return	O
NULL	O
;	O
getTimeNow	(*(long))->(long)
(	O
&	O
now	*(long)
)	O
;	O
if	O
(	O
now	*(long)
-	O
sbuf	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_mtime	O
>	O
6	int
*	O
60	int
*	O
60	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"Warning: \"%s\" is out of date, removing it\n"	*(char)
,	O
file	*(char)
)	O
;	O
unlink	(*(char))->(int)
(	O
file	*(char)
)	O
;	O
return	O
NULL	O
;	O
}	O
}	O
return	O
fopen	(*(char),*(char))->(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))
(	O
file	*(char)
,	O
mode	int
)	O
;	O
}	O
void	O
*	O
safe_malloc	(long)->(*(void))
(	O
size_t	long
size	array(char)
)	O
{	O
void	O
*	O
p	*(void)
;	O
p	*(void)
=	O
malloc	(long)->(*(void))
(	O
size	array(char)
)	O
;	O
if	O
(	O
!	O
p	*(void)
)	O
{	O
printOom	()->(void)
(	O
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
return	O
p	*(void)
;	O
}	O
void	O
print_sector	(*(char),*(char),int)->(void)
(	O
const	O
char	O
*	O
message	*(char)
,	O
unsigned	O
char	O
*	O
data	*(char)
,	O
int	O
size	array(char)
)	O
{	O
int	O
col	int
;	O
int	O
row	int
;	O
printf	(*(char))->(int)
(	O
"%s:\n"	*(char)
,	O
message	*(char)
)	O
;	O
for	O
(	O
row	int
=	O
0	int
;	O
row	int
*	O
16	int
<	O
size	array(char)
;	O
row	int
++	O
)	O
{	O
printf	(*(char))->(int)
(	O
"%03x  "	*(char)
,	O
row	int
*	O
16	int
)	O
;	O
for	O
(	O
col	int
=	O
0	int
;	O
col	int
<	O
16	int
;	O
col	int
++	O
)	O
printf	(*(char))->(int)
(	O
"%02x "	*(char)
,	O
data	*(char)
[	O
row	int
*	O
16	int
+	O
col	int
]	O
)	O
;	O
for	O
(	O
col	int
=	O
0	int
;	O
col	int
<	O
16	int
;	O
col	int
++	O
)	O
{	O
if	O
(	O
isprint	(int)->(int)
(	O
data	*(char)
[	O
row	int
*	O
16	int
+	O
col	int
]	O
)	O
)	O
printf	(*(char))->(int)
(	O
"%c"	*(char)
,	O
data	*(char)
[	O
row	int
*	O
16	int
+	O
col	int
]	O
)	O
;	O
else	O
printf	(*(char))->(int)
(	O
"."	*(char)
)	O
;	O
}	O
printf	(*(char))->(int)
(	O
"\n"	*(char)
)	O
;	O
}	O
}	O
time_t	long
getTimeNow	(*(long))->(long)
(	O
time_t	long
*	O
now	*(long)
)	O
{	O
static	O
int	O
haveTime	int
=	O
0	int
;	O
static	O
time_t	long
sharedNow	long
;	O
if	O
(	O
!	O
haveTime	int
)	O
{	O
const	O
char	O
*	O
source_date_epoch	*(char)
=	O
getenv	(*(char))->(*(char))
(	O
"SOURCE_DATE_EPOCH"	*(char)
)	O
;	O
if	O
(	O
source_date_epoch	*(char)
)	O
{	O
char	O
*	O
endptr	*(*(char))
;	O
errno	O
=	O
0	int
;	O
time_t	long
epoch	long
=	O
STRTOTIME	O
(	O
source_date_epoch	*(char)
,	O
&	O
endptr	*(*(char))
,	O
10	int
)	O
;	O
if	O
(	O
endptr	*(*(char))
==	O
source_date_epoch	*(char)
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"SOURCE_DATE_EPOCH \"%s\" invalid\n"	*(char)
,	O
source_date_epoch	*(char)
)	O
;	O
else	O
if	O
(	O
errno	O
!=	O
0	int
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"SOURCE_DATE_EPOCH: strtoll: %s: %s\n"	*(char)
,	O
strerror	(int)->(*(char))
(	O
errno	O
)	O
,	O
source_date_epoch	*(char)
)	O
;	O
else	O
if	O
(	O
*	O
endptr	*(*(char))
!=	O
'\0'	O
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"SOURCE_DATE_EPOCH has trailing garbage \"%s\"\n"	*(char)
,	O
endptr	*(*(char))
)	O
;	O
else	O
{	O
sharedNow	long
=	O
epoch	long
;	O
haveTime	int
=	O
1	int
;	O
}	O
}	O
}	O
if	O
(	O
!	O
haveTime	int
)	O
{	O
time	struct(long,long)
(	O
&	O
sharedNow	long
)	O
;	O
haveTime	int
=	O
1	int
;	O
}	O
if	O
(	O
now	*(long)
)	O
*	O
now	*(long)
=	O
sharedNow	long
;	O
return	O
sharedNow	long
;	O
}	O
off_t	long
str_to_offset	(*(char))->(long)
(	O
char	O
*	O
str	*(char)
)	O
{	O
char	O
s	char
,	O
*	O
endp	*(char)
=	O
NULL	O
;	O
off_t	long
ofs	long
;	O
ofs	long
=	O
strtol	(*(char),*(*(char)),int)->(long)
(	O
str	*(char)
,	O
&	O
endp	*(char)
,	O
0	int
)	O
;	O
if	O
(	O
ofs	long
<=	O
0	int
)	O
return	O
0	int
;	O
s	char
=	O
*	O
endp	*(char)
++	O
;	O
if	O
(	O
s	char
)	O
{	O
if	O
(	O
s	char
==	O
's'	O
||	O
s	char
==	O
'S'	O
)	O
ofs	long
<<=	O
9	int
;	O
else	O
if	O
(	O
s	char
==	O
'k'	O
||	O
s	char
==	O
'K'	O
)	O
ofs	long
<<=	O
10	int
;	O
else	O
if	O
(	O
s	char
==	O
'm'	O
||	O
s	char
==	O
'M'	O
)	O
ofs	long
<<=	O
20	int
;	O
else	O
if	O
(	O
s	char
==	O
'g'	O
||	O
s	char
==	O
'G'	O
)	O
ofs	long
<<=	O
30	int
;	O
else	O
return	O
0	int
;	O
if	O
(	O
*	O
endp	*(char)
)	O
return	O
0	int
;	O
}	O
return	O
ofs	long
;	O
}	O
