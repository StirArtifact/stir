int	O
rl_prefer_env_winsize	int
=	O
0	int
;	O
int	O
rl_change_environment	int
=	O
1	int
;	O
static	O
char	O
*	O
term_buffer	*(char)
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
static	O
char	O
*	O
term_string_buffer	*(char)
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
static	O
int	O
tcap_initialized	int
;	O
char	O
*	O
_rl_term_clreol	*(char)
;	O
char	O
*	O
_rl_term_clrpag	*(char)
;	O
char	O
*	O
_rl_term_cr	*(char)
;	O
char	O
*	O
_rl_term_backspace	*(char)
;	O
char	O
*	O
_rl_term_goto	*(char)
;	O
char	O
*	O
_rl_term_pc	*(char)
;	O
int	O
_rl_terminal_can_insert	int
=	O
0	int
;	O
char	O
*	O
_rl_term_im	*(char)
;	O
char	O
*	O
_rl_term_ei	*(char)
;	O
char	O
*	O
_rl_term_ic	*(char)
;	O
char	O
*	O
_rl_term_ip	*(char)
;	O
char	O
*	O
_rl_term_IC	*(char)
;	O
char	O
*	O
_rl_term_dc	*(char)
;	O
char	O
*	O
_rl_term_DC	*(char)
;	O
char	O
*	O
_rl_term_forward_char	*(char)
;	O
char	O
*	O
_rl_term_up	*(char)
;	O
static	O
char	O
*	O
_rl_visible_bell	*(char)
;	O
int	O
_rl_term_autowrap	int
=	O
-	O
1	int
;	O
static	O
int	O
term_has_meta	int
;	O
static	O
char	O
*	O
_rl_term_mm	*(char)
;	O
static	O
char	O
*	O
_rl_term_mo	*(char)
;	O
static	O
char	O
*	O
_rl_term_ku	*(char)
;	O
static	O
char	O
*	O
_rl_term_kd	*(char)
;	O
static	O
char	O
*	O
_rl_term_kr	*(char)
;	O
static	O
char	O
*	O
_rl_term_kl	*(char)
;	O
static	O
char	O
*	O
_rl_term_ks	*(char)
;	O
static	O
char	O
*	O
_rl_term_ke	*(char)
;	O
static	O
char	O
*	O
_rl_term_kh	*(char)
;	O
static	O
char	O
*	O
_rl_term_kH	*(char)
;	O
static	O
char	O
*	O
_rl_term_at7	*(char)
;	O
static	O
char	O
*	O
_rl_term_kD	*(char)
;	O
static	O
char	O
*	O
_rl_term_kI	*(char)
;	O
static	O
char	O
*	O
_rl_term_vs	*(char)
;	O
static	O
char	O
*	O
_rl_term_ve	*(char)
;	O
static	O
void	O
bind_termcap_arrow_keys	(*(struct(char,*((int,int)->(int)))))->(void)
PARAMS	O
(	O
(	O
Keymap	*(struct(char,*((int,int)->(int))))
)	O
)	O
;	O
int	O
_rl_screenwidth	int
,	O
_rl_screenheight	int
,	O
_rl_screenchars	int
;	O
int	O
_rl_enable_keypad	int
;	O
int	O
_rl_enable_meta	int
=	O
1	int
;	O
void	O
_rl_get_screen_size	(int,int)->(void)
(	O
tty	int
,	O
ignore_env	int
)	O
int	O
tty	int
,	O
ignore_env	int
;	O
{	O
char	O
*	O
ss	*(char)
;	O
struct	O
winsize	struct(short,short,short,short)
window_size	struct(short,short,short,short)
;	O
int	O
wr	int
,	O
wc	int
;	O
wr	int
=	O
wc	int
=	O
-	O
1	int
;	O
if	O
(	O
ioctl	(int,long)->(int)
(	O
tty	int
,	O
TIOCGWINSZ	int
,	O
&	O
window_size	struct(short,short,short,short)
)	O
==	O
0	int
)	O
{	O
wc	int
=	O
(	O
int	O
)	O
window_size	struct(short,short,short,short)
.	O
ws_col	short
;	O
wr	int
=	O
(	O
int	O
)	O
window_size	struct(short,short,short,short)
.	O
ws_row	short
;	O
}	O
if	O
(	O
ignore_env	int
||	O
rl_prefer_env_winsize	int
==	O
0	int
)	O
{	O
_rl_screenwidth	int
=	O
wc	int
;	O
_rl_screenheight	int
=	O
wr	int
;	O
}	O
else	O
_rl_screenwidth	int
=	O
_rl_screenheight	int
=	O
-	O
1	int
;	O
if	O
(	O
_rl_screenwidth	int
<=	O
0	int
)	O
{	O
if	O
(	O
ignore_env	int
==	O
0	int
&&	O
(	O
ss	*(char)
=	O
sh_get_env_value	(*(char))->(*(char))
(	O
"COLUMNS"	*(char)
)	O
)	O
)	O
_rl_screenwidth	int
=	O
atoi	(*(char))->(int)
(	O
ss	*(char)
)	O
;	O
if	O
(	O
_rl_screenwidth	int
<=	O
0	int
)	O
_rl_screenwidth	int
=	O
wc	int
;	O
if	O
(	O
_rl_screenwidth	int
<=	O
0	int
&&	O
term_string_buffer	*(char)
)	O
_rl_screenwidth	int
=	O
tgetnum	(*(char))->(int)
(	O
"co"	*(char)
)	O
;	O
}	O
if	O
(	O
_rl_screenheight	int
<=	O
0	int
)	O
{	O
if	O
(	O
ignore_env	int
==	O
0	int
&&	O
(	O
ss	*(char)
=	O
sh_get_env_value	(*(char))->(*(char))
(	O
"LINES"	*(char)
)	O
)	O
)	O
_rl_screenheight	int
=	O
atoi	(*(char))->(int)
(	O
ss	*(char)
)	O
;	O
if	O
(	O
_rl_screenheight	int
<=	O
0	int
)	O
_rl_screenheight	int
=	O
wr	int
;	O
if	O
(	O
_rl_screenheight	int
<=	O
0	int
&&	O
term_string_buffer	*(char)
)	O
_rl_screenheight	int
=	O
tgetnum	(*(char))->(int)
(	O
"li"	*(char)
)	O
;	O
}	O
if	O
(	O
_rl_screenwidth	int
<=	O
1	int
)	O
_rl_screenwidth	int
=	O
80	int
;	O
if	O
(	O
_rl_screenheight	int
<=	O
0	int
)	O
_rl_screenheight	int
=	O
24	int
;	O
if	O
(	O
rl_change_environment	int
)	O
sh_set_lines_and_columns	(int,int)->(void)
(	O
_rl_screenheight	int
,	O
_rl_screenwidth	int
)	O
;	O
if	O
(	O
_rl_term_autowrap	int
==	O
0	int
)	O
_rl_screenwidth	int
--	O
;	O
_rl_screenchars	int
=	O
_rl_screenwidth	int
*	O
_rl_screenheight	int
;	O
}	O
void	O
_rl_set_screen_size	(int,int)->(void)
(	O
rows	int
,	O
cols	int
)	O
int	O
rows	int
,	O
cols	int
;	O
{	O
if	O
(	O
_rl_term_autowrap	int
==	O
-	O
1	int
)	O
_rl_init_terminal_io	(*(char))->(int)
(	O
rl_terminal_name	*(char)
)	O
;	O
if	O
(	O
rows	int
>	O
0	int
)	O
_rl_screenheight	int
=	O
rows	int
;	O
if	O
(	O
cols	int
>	O
0	int
)	O
{	O
_rl_screenwidth	int
=	O
cols	int
;	O
if	O
(	O
_rl_term_autowrap	int
==	O
0	int
)	O
_rl_screenwidth	int
--	O
;	O
}	O
if	O
(	O
rows	int
>	O
0	int
||	O
cols	int
>	O
0	int
)	O
_rl_screenchars	int
=	O
_rl_screenwidth	int
*	O
_rl_screenheight	int
;	O
}	O
void	O
rl_set_screen_size	(int,int)->(void)
(	O
rows	int
,	O
cols	int
)	O
int	O
rows	int
,	O
cols	int
;	O
{	O
_rl_set_screen_size	(int,int)->(void)
(	O
rows	int
,	O
cols	int
)	O
;	O
}	O
void	O
rl_get_screen_size	(*(int),*(int))->(void)
(	O
rows	int
,	O
cols	int
)	O
int	O
*	O
rows	int
,	O
*	O
cols	int
;	O
{	O
if	O
(	O
rows	int
)	O
*	O
rows	int
=	O
_rl_screenheight	int
;	O
if	O
(	O
cols	int
)	O
*	O
cols	int
=	O
_rl_screenwidth	int
;	O
}	O
void	O
rl_reset_screen_size	()->(void)
(	O
)	O
{	O
_rl_get_screen_size	(int,int)->(void)
(	O
fileno	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
rl_instream	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
,	O
0	int
)	O
;	O
}	O
void	O
_rl_sigwinch_resize_terminal	()->(void)
(	O
)	O
{	O
_rl_get_screen_size	(int,int)->(void)
(	O
fileno	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
rl_instream	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
,	O
1	int
)	O
;	O
}	O
void	O
rl_resize_terminal	()->(void)
(	O
)	O
{	O
_rl_get_screen_size	(int,int)->(void)
(	O
fileno	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
rl_instream	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
,	O
1	int
)	O
;	O
if	O
(	O
_rl_echoing_p	int
)	O
{	O
if	O
(	O
CUSTOM_REDISPLAY_FUNC	O
(	O
)	O
)	O
rl_forced_update_display	()->(int)
(	O
)	O
;	O
else	O
if	O
(	O
RL_ISSTATE	O
(	O
RL_STATE_REDISPLAYING	int
)	O
==	O
0	int
)	O
_rl_redisplay_after_sigwinch	()->(void)
(	O
)	O
;	O
}	O
}	O
struct	O
_tc_string	struct(*(char),*(*(char)))
{	O
const	O
char	O
*	O
const	O
tc_var	*(char)
;	O
char	O
*	O
*	O
tc_value	*(*(char))
;	O
}	O
;	O
static	O
const	O
struct	O
_tc_string	struct(*(char),*(*(char)))
tc_strings	array(struct(*(char),*(*(char))))
[	O
]	O
=	O
{	O
{	O
"@7"	*(char)
,	O
&	O
_rl_term_at7	*(char)
}	O
,	O
{	O
"DC"	*(char)
,	O
&	O
_rl_term_DC	*(char)
}	O
,	O
{	O
"IC"	*(char)
,	O
&	O
_rl_term_IC	*(char)
}	O
,	O
{	O
"ce"	*(char)
,	O
&	O
_rl_term_clreol	*(char)
}	O
,	O
{	O
"cl"	*(char)
,	O
&	O
_rl_term_clrpag	*(char)
}	O
,	O
{	O
"cr"	*(char)
,	O
&	O
_rl_term_cr	*(char)
}	O
,	O
{	O
"dc"	*(char)
,	O
&	O
_rl_term_dc	*(char)
}	O
,	O
{	O
"ei"	*(char)
,	O
&	O
_rl_term_ei	*(char)
}	O
,	O
{	O
"ic"	*(char)
,	O
&	O
_rl_term_ic	*(char)
}	O
,	O
{	O
"im"	*(char)
,	O
&	O
_rl_term_im	*(char)
}	O
,	O
{	O
"kD"	*(char)
,	O
&	O
_rl_term_kD	*(char)
}	O
,	O
{	O
"kH"	*(char)
,	O
&	O
_rl_term_kH	*(char)
}	O
,	O
{	O
"kI"	*(char)
,	O
&	O
_rl_term_kI	*(char)
}	O
,	O
{	O
"kd"	*(char)
,	O
&	O
_rl_term_kd	*(char)
}	O
,	O
{	O
"ke"	*(char)
,	O
&	O
_rl_term_ke	*(char)
}	O
,	O
{	O
"kh"	*(char)
,	O
&	O
_rl_term_kh	*(char)
}	O
,	O
{	O
"kl"	*(char)
,	O
&	O
_rl_term_kl	*(char)
}	O
,	O
{	O
"kr"	*(char)
,	O
&	O
_rl_term_kr	*(char)
}	O
,	O
{	O
"ks"	*(char)
,	O
&	O
_rl_term_ks	*(char)
}	O
,	O
{	O
"ku"	*(char)
,	O
&	O
_rl_term_ku	*(char)
}	O
,	O
{	O
"le"	*(char)
,	O
&	O
_rl_term_backspace	*(char)
}	O
,	O
{	O
"mm"	*(char)
,	O
&	O
_rl_term_mm	*(char)
}	O
,	O
{	O
"mo"	*(char)
,	O
&	O
_rl_term_mo	*(char)
}	O
,	O
{	O
"nd"	*(char)
,	O
&	O
_rl_term_forward_char	*(char)
}	O
,	O
{	O
"pc"	*(char)
,	O
&	O
_rl_term_pc	*(char)
}	O
,	O
{	O
"up"	*(char)
,	O
&	O
_rl_term_up	*(char)
}	O
,	O
{	O
"vb"	*(char)
,	O
&	O
_rl_visible_bell	*(char)
}	O
,	O
{	O
"vs"	*(char)
,	O
&	O
_rl_term_vs	*(char)
}	O
,	O
{	O
"ve"	*(char)
,	O
&	O
_rl_term_ve	*(char)
}	O
,	O
}	O
;	O
static	O
void	O
get_term_capabilities	(*(*(char)))->(void)
(	O
bp	*(*(char))
)	O
char	O
*	O
*	O
bp	*(*(char))
;	O
{	O
register	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
NUM_TC_STRINGS	O
;	O
i	int
++	O
)	O
*	O
(	O
tc_strings	array(struct(*(char),*(*(char))))
[	O
i	int
]	O
.	O
tc_value	*(*(char))
)	O
=	O
tgetstr	(*(char),*(*(char)))->(*(char))
(	O
(	O
char	O
*	O
)	O
tc_strings	array(struct(*(char),*(*(char))))
[	O
i	int
]	O
.	O
tc_var	*(char)
,	O
bp	*(*(char))
)	O
;	O
tcap_initialized	int
=	O
1	int
;	O
}	O
int	O
_rl_init_terminal_io	(*(char))->(int)
(	O
terminal_name	*(char)
)	O
const	O
char	O
*	O
terminal_name	*(char)
;	O
{	O
const	O
char	O
*	O
term	*(char)
;	O
char	O
*	O
buffer	*(char)
;	O
int	O
tty	int
,	O
tgetent_ret	int
;	O
term	*(char)
=	O
terminal_name	*(char)
?	O
terminal_name	*(char)
:	O
sh_get_env_value	(*(char))->(*(char))
(	O
"TERM"	*(char)
)	O
;	O
_rl_term_clrpag	*(char)
=	O
_rl_term_cr	*(char)
=	O
_rl_term_clreol	*(char)
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
tty	int
=	O
rl_instream	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
?	O
fileno	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
rl_instream	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
:	O
0	int
;	O
if	O
(	O
term	*(char)
==	O
0	int
)	O
term	*(char)
=	O
"dumb"	*(char)
;	O
if	O
(	O
CUSTOM_REDISPLAY_FUNC	O
(	O
)	O
)	O
{	O
tgetent_ret	int
=	O
-	O
1	int
;	O
}	O
else	O
{	O
if	O
(	O
term_string_buffer	*(char)
==	O
0	int
)	O
term_string_buffer	*(char)
=	O
(	O
char	O
*	O
)	O
xmalloc	(long)->(*(void))
(	O
2032	int
)	O
;	O
if	O
(	O
term_buffer	*(char)
==	O
0	int
)	O
term_buffer	*(char)
=	O
(	O
char	O
*	O
)	O
xmalloc	(long)->(*(void))
(	O
4080	int
)	O
;	O
buffer	*(char)
=	O
term_string_buffer	*(char)
;	O
tgetent_ret	int
=	O
tgetent	(*(char),*(char))->(int)
(	O
term_buffer	*(char)
,	O
term	*(char)
)	O
;	O
}	O
if	O
(	O
tgetent_ret	int
<=	O
0	int
)	O
{	O
FREE	O
(	O
term_string_buffer	*(char)
)	O
;	O
FREE	O
(	O
term_buffer	*(char)
)	O
;	O
buffer	*(char)
=	O
term_buffer	*(char)
=	O
term_string_buffer	*(char)
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
_rl_term_autowrap	int
=	O
0	int
;	O
if	O
(	O
_rl_screenwidth	int
<=	O
0	int
||	O
_rl_screenheight	int
<=	O
0	int
)	O
{	O
_rl_get_screen_size	(int,int)->(void)
(	O
tty	int
,	O
0	int
)	O
;	O
}	O
if	O
(	O
_rl_screenwidth	int
<=	O
0	int
||	O
_rl_screenheight	int
<=	O
0	int
)	O
{	O
_rl_screenwidth	int
=	O
79	int
;	O
_rl_screenheight	int
=	O
24	int
;	O
}	O
_rl_screenchars	int
=	O
_rl_screenwidth	int
*	O
_rl_screenheight	int
;	O
_rl_term_cr	*(char)
=	O
"\r"	*(char)
;	O
_rl_term_im	*(char)
=	O
_rl_term_ei	*(char)
=	O
_rl_term_ic	*(char)
=	O
_rl_term_IC	*(char)
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
_rl_term_up	*(char)
=	O
_rl_term_dc	*(char)
=	O
_rl_term_DC	*(char)
=	O
_rl_visible_bell	*(char)
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
_rl_term_ku	*(char)
=	O
_rl_term_kd	*(char)
=	O
_rl_term_kl	*(char)
=	O
_rl_term_kr	*(char)
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
_rl_term_kh	*(char)
=	O
_rl_term_kH	*(char)
=	O
_rl_term_kI	*(char)
=	O
_rl_term_kD	*(char)
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
_rl_term_ks	*(char)
=	O
_rl_term_ke	*(char)
=	O
_rl_term_at7	*(char)
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
_rl_term_mm	*(char)
=	O
_rl_term_mo	*(char)
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
_rl_term_ve	*(char)
=	O
_rl_term_vs	*(char)
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
_rl_term_forward_char	*(char)
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
_rl_terminal_can_insert	int
=	O
term_has_meta	int
=	O
0	int
;	O
PC	char
=	O
'\0'	O
;	O
BC	*(char)
=	O
_rl_term_backspace	*(char)
=	O
"\b"	*(char)
;	O
UP	*(char)
=	O
_rl_term_up	*(char)
;	O
return	O
0	int
;	O
}	O
get_term_capabilities	(*(*(char)))->(void)
(	O
&	O
buffer	*(char)
)	O
;	O
PC	char
=	O
_rl_term_pc	*(char)
?	O
*	O
_rl_term_pc	*(char)
:	O
0	int
;	O
BC	*(char)
=	O
_rl_term_backspace	*(char)
;	O
UP	*(char)
=	O
_rl_term_up	*(char)
;	O
if	O
(	O
!	O
_rl_term_cr	*(char)
)	O
_rl_term_cr	*(char)
=	O
"\r"	*(char)
;	O
_rl_term_autowrap	int
=	O
tgetflag	(*(char))->(int)
(	O
"am"	*(char)
)	O
&&	O
tgetflag	(*(char))->(int)
(	O
"xn"	*(char)
)	O
;	O
if	O
(	O
_rl_screenwidth	int
<=	O
0	int
||	O
_rl_screenheight	int
<=	O
0	int
)	O
_rl_get_screen_size	(int,int)->(void)
(	O
tty	int
,	O
0	int
)	O
;	O
_rl_terminal_can_insert	int
=	O
(	O
_rl_term_IC	*(char)
||	O
_rl_term_im	*(char)
||	O
_rl_term_ic	*(char)
)	O
;	O
term_has_meta	int
=	O
tgetflag	(*(char))->(int)
(	O
"km"	*(char)
)	O
!=	O
0	int
;	O
if	O
(	O
term_has_meta	int
==	O
0	int
)	O
_rl_term_mm	*(char)
=	O
_rl_term_mo	*(char)
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
bind_termcap_arrow_keys	(*(struct(char,*((int,int)->(int)))))->(void)
(	O
emacs_standard_keymap	array(struct(char,*((int,int)->(int))))
)	O
;	O
bind_termcap_arrow_keys	(*(struct(char,*((int,int)->(int)))))->(void)
(	O
vi_movement_keymap	array(struct(char,*((int,int)->(int))))
)	O
;	O
bind_termcap_arrow_keys	(*(struct(char,*((int,int)->(int)))))->(void)
(	O
vi_insertion_keymap	array(struct(char,*((int,int)->(int))))
)	O
;	O
return	O
0	int
;	O
}	O
static	O
void	O
bind_termcap_arrow_keys	(*(struct(char,*((int,int)->(int)))))->(void)
(	O
map	*(struct(char,*((int,int)->(int))))
)	O
Keymap	*(struct(char,*((int,int)->(int))))
map	*(struct(char,*((int,int)->(int))))
;	O
{	O
Keymap	*(struct(char,*((int,int)->(int))))
xkeymap	*(struct(char,*((int,int)->(int))))
;	O
xkeymap	*(struct(char,*((int,int)->(int))))
=	O
_rl_keymap	*(struct(char,*((int,int)->(int))))
;	O
_rl_keymap	*(struct(char,*((int,int)->(int))))
=	O
map	*(struct(char,*((int,int)->(int))))
;	O
rl_bind_keyseq_if_unbound	(*(char),*((int,int)->(int)))->(int)
(	O
_rl_term_ku	*(char)
,	O
rl_get_previous_history	(int,int)->(int)
)	O
;	O
rl_bind_keyseq_if_unbound	(*(char),*((int,int)->(int)))->(int)
(	O
_rl_term_kd	*(char)
,	O
rl_get_next_history	(int,int)->(int)
)	O
;	O
rl_bind_keyseq_if_unbound	(*(char),*((int,int)->(int)))->(int)
(	O
_rl_term_kr	*(char)
,	O
rl_forward_char	(int,int)->(int)
)	O
;	O
rl_bind_keyseq_if_unbound	(*(char),*((int,int)->(int)))->(int)
(	O
_rl_term_kl	*(char)
,	O
rl_backward_char	(int,int)->(int)
)	O
;	O
rl_bind_keyseq_if_unbound	(*(char),*((int,int)->(int)))->(int)
(	O
_rl_term_kh	*(char)
,	O
rl_beg_of_line	(int,int)->(int)
)	O
;	O
rl_bind_keyseq_if_unbound	(*(char),*((int,int)->(int)))->(int)
(	O
_rl_term_at7	*(char)
,	O
rl_end_of_line	(int,int)->(int)
)	O
;	O
rl_bind_keyseq_if_unbound	(*(char),*((int,int)->(int)))->(int)
(	O
_rl_term_kD	*(char)
,	O
rl_delete	(int,int)->(int)
)	O
;	O
_rl_keymap	*(struct(char,*((int,int)->(int))))
=	O
xkeymap	*(struct(char,*((int,int)->(int))))
;	O
}	O
char	O
*	O
rl_get_termcap	(*(char))->(*(char))
(	O
cap	*(char)
)	O
const	O
char	O
*	O
cap	*(char)
;	O
{	O
register	O
int	O
i	int
;	O
if	O
(	O
tcap_initialized	int
==	O
0	int
)	O
return	O
(	O
(	O
char	O
*	O
)	O
NULL	O
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
NUM_TC_STRINGS	O
;	O
i	int
++	O
)	O
{	O
if	O
(	O
tc_strings	array(struct(*(char),*(*(char))))
[	O
i	int
]	O
.	O
tc_var	*(char)
[	O
0	int
]	O
==	O
cap	*(char)
[	O
0	int
]	O
&&	O
strcmp	(*(char),*(char))->(int)
(	O
tc_strings	array(struct(*(char),*(*(char))))
[	O
i	int
]	O
.	O
tc_var	*(char)
,	O
cap	*(char)
)	O
==	O
0	int
)	O
return	O
*	O
(	O
tc_strings	array(struct(*(char),*(*(char))))
[	O
i	int
]	O
.	O
tc_value	*(*(char))
)	O
;	O
}	O
return	O
(	O
(	O
char	O
*	O
)	O
NULL	O
)	O
;	O
}	O
int	O
rl_reset_terminal	(*(char))->(int)
(	O
terminal_name	*(char)
)	O
const	O
char	O
*	O
terminal_name	*(char)
;	O
{	O
_rl_screenwidth	int
=	O
_rl_screenheight	int
=	O
0	int
;	O
_rl_init_terminal_io	(*(char))->(int)
(	O
terminal_name	*(char)
)	O
;	O
return	O
0	int
;	O
}	O
int	O
_rl_output_character_function	(int)->(int)
(	O
c	int
)	O
int	O
c	int
;	O
{	O
return	O
putc	(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
c	int
,	O
_rl_out_stream	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
}	O
void	O
_rl_output_some_chars	(*(char),int)->(void)
(	O
string	*(char)
,	O
count	int
)	O
const	O
char	O
*	O
string	*(char)
;	O
int	O
count	int
;	O
{	O
fwrite	(*(void),long,long,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(long)
(	O
string	*(char)
,	O
1	int
,	O
count	int
,	O
_rl_out_stream	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
}	O
int	O
_rl_backspace	(int)->(int)
(	O
count	int
)	O
int	O
count	int
;	O
{	O
register	O
int	O
i	int
;	O
if	O
(	O
_rl_term_backspace	*(char)
)	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
count	int
;	O
i	int
++	O
)	O
tputs	(*(char),int,*((int)->(int)))->(int)
(	O
_rl_term_backspace	*(char)
,	O
1	int
,	O
_rl_output_character_function	(int)->(int)
)	O
;	O
else	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
count	int
;	O
i	int
++	O
)	O
putc	(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
'\b'	O
,	O
_rl_out_stream	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
return	O
0	int
;	O
}	O
int	O
rl_crlf	()->(int)
(	O
)	O
{	O
putc	(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
'\n'	O
,	O
_rl_out_stream	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
return	O
0	int
;	O
}	O
int	O
rl_ding	()->(int)
(	O
)	O
{	O
if	O
(	O
_rl_echoing_p	int
)	O
{	O
switch	O
(	O
_rl_bell_preference	int
)	O
{	O
case	O
NO_BELL	int
:	O
default	O
:	O
break	O
;	O
case	O
VISIBLE_BELL	int
:	O
if	O
(	O
_rl_visible_bell	*(char)
)	O
{	O
tputs	(*(char),int,*((int)->(int)))->(int)
(	O
_rl_visible_bell	*(char)
,	O
1	int
,	O
_rl_output_character_function	(int)->(int)
)	O
;	O
break	O
;	O
}	O
case	O
AUDIBLE_BELL	int
:	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"\007"	*(char)
)	O
;	O
fflush	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
break	O
;	O
}	O
return	O
(	O
0	int
)	O
;	O
}	O
return	O
(	O
-	O
1	int
)	O
;	O
}	O
static	O
int	O
enabled_meta	int
=	O
0	int
;	O
void	O
_rl_enable_meta_key	()->(void)
(	O
)	O
{	O
if	O
(	O
term_has_meta	int
&&	O
_rl_term_mm	*(char)
)	O
{	O
tputs	(*(char),int,*((int)->(int)))->(int)
(	O
_rl_term_mm	*(char)
,	O
1	int
,	O
_rl_output_character_function	(int)->(int)
)	O
;	O
enabled_meta	int
=	O
1	int
;	O
}	O
}	O
void	O
_rl_disable_meta_key	()->(void)
(	O
)	O
{	O
if	O
(	O
term_has_meta	int
&&	O
_rl_term_mo	*(char)
&&	O
enabled_meta	int
)	O
{	O
tputs	(*(char),int,*((int)->(int)))->(int)
(	O
_rl_term_mo	*(char)
,	O
1	int
,	O
_rl_output_character_function	(int)->(int)
)	O
;	O
enabled_meta	int
=	O
0	int
;	O
}	O
}	O
void	O
_rl_control_keypad	(int)->(void)
(	O
on	int
)	O
int	O
on	int
;	O
{	O
if	O
(	O
on	int
&&	O
_rl_term_ks	*(char)
)	O
tputs	(*(char),int,*((int)->(int)))->(int)
(	O
_rl_term_ks	*(char)
,	O
1	int
,	O
_rl_output_character_function	(int)->(int)
)	O
;	O
else	O
if	O
(	O
!	O
on	int
&&	O
_rl_term_ke	*(char)
)	O
tputs	(*(char),int,*((int)->(int)))->(int)
(	O
_rl_term_ke	*(char)
,	O
1	int
,	O
_rl_output_character_function	(int)->(int)
)	O
;	O
}	O
void	O
_rl_set_cursor	(int,int)->(void)
(	O
im	int
,	O
force	int
)	O
int	O
im	int
,	O
force	int
;	O
{	O
if	O
(	O
_rl_term_ve	*(char)
&&	O
_rl_term_vs	*(char)
)	O
{	O
if	O
(	O
force	int
||	O
im	int
!=	O
rl_insert_mode	int
)	O
{	O
if	O
(	O
im	int
==	O
RL_IM_OVERWRITE	int
)	O
tputs	(*(char),int,*((int)->(int)))->(int)
(	O
_rl_term_vs	*(char)
,	O
1	int
,	O
_rl_output_character_function	(int)->(int)
)	O
;	O
else	O
tputs	(*(char),int,*((int)->(int)))->(int)
(	O
_rl_term_ve	*(char)
,	O
1	int
,	O
_rl_output_character_function	(int)->(int)
)	O
;	O
}	O
}	O
}	O
