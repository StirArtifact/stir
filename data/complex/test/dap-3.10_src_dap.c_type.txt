char	O
*	O
editor	*(char)
;	O
char	O
*	O
edopts	*(char)
;	O
char	O
*	O
dappp	*(char)
;	O
char	O
*	O
dapruns	*(char)
;	O
char	O
*	O
incdir	*(char)
;	O
char	O
*	O
libdir	*(char)
;	O
void	O
edrun	(int,*(*(char)))->(void)
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	*(*(char))
)	O
;	O
char	O
*	O
argcpy	(array(char),int)->(*(char))
(	O
char	O
arg	array(char)
[	O
]	O
,	O
int	O
extra	int
)	O
;	O
void	O
suffix	(array(char),array(char))->(void)
(	O
char	O
name	array(char)
[	O
]	O
,	O
char	O
suff	array(char)
[	O
]	O
)	O
;	O
int	O
parseopts	(*(char),*(*(char)))->(int)
(	O
char	O
*	O
opts	*(char)
,	O
char	O
*	O
*	O
arg	array(char)
)	O
;	O
char	O
*	O
ecopy	(*(char))->(*(char))
(	O
char	O
*	O
e	*(char)
)	O
{	O
char	O
*	O
copy	*(char)
;	O
if	O
(	O
e	*(char)
)	O
{	O
if	O
(	O
!	O
(	O
copy	*(char)
=	O
malloc	(long)->(*(void))
(	O
strlen	(*(char))->(long)
(	O
e	*(char)
)	O
+	O
1	int
)	O
)	O
)	O
{	O
perror	(*(char))->(void)
(	O
"dap"	*(char)
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
strcpy	(*(char),*(char))->(*(char))
(	O
copy	*(char)
,	O
e	*(char)
)	O
;	O
return	O
copy	*(char)
;	O
}	O
return	O
NULL	O
;	O
}	O
int	O
main	(int,*(*(char)))->(int)
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	*(*(char))
)	O
{	O
int	O
runstat	int
;	O
fputs	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
"\nDap, Copyright (C) 2001, 2002, 2003, 2004, 2005 Free Software Foundation, Inc.\n"	*(char)
,	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
fputs	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
"Dap comes with ABSOLUTELY NO WARRANTY;\n"	*(char)
,	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
fputs	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
"for details see the GNU Public License.\n"	*(char)
,	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
fputs	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
"This is free software, and you are welcome to\n"	*(char)
,	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
fputs	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
"redistribute it under certain conditions; see\n"	*(char)
,	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
fputs	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
"the GNU Public License for details.\n\n"	*(char)
,	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
if	O
(	O
argc	int
<	O
2	int
)	O
{	O
fputs	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
"dap: no files to process\n"	*(char)
,	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
if	O
(	O
argc	int
<=	O
1	int
||	O
(	O
!	O
strcmp	(*(char),*(char))->(int)
(	O
argv	*(*(char))
[	O
1	int
]	O
,	O
"--help"	*(char)
)	O
||	O
!	O
strcmp	(*(char),*(char))->(int)
(	O
argv	*(*(char))
[	O
1	int
]	O
,	O
"-h"	*(char)
)	O
)	O
)	O
{	O
fputs	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
"Usage:\ndap [-k] [-d] FILE1.c [ FILE2.c ... ] [-a ARG1 ...]\n"	*(char)
,	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
fputs	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
"dap [--keep] [--debug] FILE1.c [ FILE2.c ... ] [--args] ARG1 ...]\n"	*(char)
,	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
fputs	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
"dap [-k] [-d] FILE1.sbs [ FILE2.c ... ]\n"	*(char)
,	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
fputs	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
"dap [--keep] [--debug] FILE1.sbs [ FILE2.c ... ]\n"	*(char)
,	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
fputs	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
"\nReport bugs to <bug-dap@gnu.org>\n"	*(char)
,	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
else	O
if	O
(	O
argc	int
==	O
2	int
&&	O
argv	*(*(char))
[	O
1	int
]	O
[	O
0	int
]	O
==	O
'-'	O
)	O
{	O
if	O
(	O
!	O
strcmp	(*(char),*(char))->(int)
(	O
argv	*(*(char))
[	O
1	int
]	O
,	O
"--version"	*(char)
)	O
||	O
!	O
strcmp	(*(char),*(char))->(int)
(	O
argv	*(*(char))
[	O
1	int
]	O
,	O
"-v"	*(char)
)	O
)	O
{	O
fputs	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
"Dap 3.6\n"	*(char)
,	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
else	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"dap: bad option: %s\n"	*(char)
,	O
argv	*(*(char))
[	O
0	int
]	O
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
}	O
if	O
(	O
!	O
(	O
editor	*(char)
=	O
ecopy	(*(char))->(*(char))
(	O
getenv	(*(char))->(*(char))
(	O
"DAPEDITOR"	*(char)
)	O
)	O
)	O
)	O
editor	*(char)
=	O
ED	*(char)
;	O
if	O
(	O
!	O
(	O
edopts	*(char)
=	O
ecopy	(*(char))->(*(char))
(	O
getenv	(*(char))->(*(char))
(	O
"DAPEDOPTS"	*(char)
)	O
)	O
)	O
)	O
edopts	*(char)
=	O
NULL	O
;	O
if	O
(	O
!	O
(	O
dappp	*(char)
=	O
ecopy	(*(char))->(*(char))
(	O
getenv	(*(char))->(*(char))
(	O
"DAPPP"	*(char)
)	O
)	O
)	O
)	O
dappp	*(char)
=	O
DAPPP	*(char)
;	O
if	O
(	O
!	O
(	O
dapruns	*(char)
=	O
ecopy	(*(char))->(*(char))
(	O
getenv	(*(char))->(*(char))
(	O
"DAPRUNS"	*(char)
)	O
)	O
)	O
)	O
dapruns	*(char)
=	O
DAPRUNS	*(char)
;	O
if	O
(	O
!	O
(	O
incdir	*(char)
=	O
ecopy	(*(char))->(*(char))
(	O
getenv	(*(char))->(*(char))
(	O
"INCDIR"	*(char)
)	O
)	O
)	O
)	O
incdir	*(char)
=	O
INCDIR	*(char)
;	O
if	O
(	O
!	O
(	O
libdir	*(char)
=	O
ecopy	(*(char))->(*(char))
(	O
getenv	(*(char))->(*(char))
(	O
"LIBDIR"	*(char)
)	O
)	O
)	O
)	O
libdir	*(char)
=	O
LIBDIR	*(char)
;	O
edrun	(int,*(*(char)))->(void)
(	O
argc	int
,	O
argv	*(*(char))
)	O
;	O
}	O
int	O
srctype	(*(char))->(int)
(	O
char	O
*	O
name	array(char)
)	O
{	O
int	O
n	int
;	O
n	int
=	O
strlen	(*(char))->(long)
(	O
name	array(char)
)	O
;	O
if	O
(	O
n	int
>	O
2	int
&&	O
!	O
strcmp	(*(char),*(char))->(int)
(	O
name	array(char)
+	O
n	int
-	O
2	int
,	O
".c"	*(char)
)	O
)	O
return	O
C	int
;	O
else	O
if	O
(	O
n	int
>	O
4	int
&&	O
!	O
strcmp	(*(char),*(char))->(int)
(	O
name	array(char)
+	O
n	int
-	O
4	int
,	O
".sbs"	*(char)
)	O
)	O
return	O
SBS	int
;	O
else	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"dap: name must end in .c or .sbs: %s\n"	*(char)
,	O
name	array(char)
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
}	O
void	O
edrun	(int,*(*(char)))->(void)
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	*(*(char))
)	O
{	O
char	O
*	O
*	O
arg	array(char)
;	O
int	O
av	int
;	O
int	O
a	int
;	O
char	O
*	O
argstr	*(char)
;	O
int	O
argstrlen	int
;	O
int	O
argstart	int
;	O
if	O
(	O
!	O
(	O
arg	array(char)
=	O
(	O
char	O
*	O
*	O
)	O
malloc	(long)->(*(void))
(	O
sizeof	O
(	O
char	O
*	O
)	O
*	O
(	O
argc	int
+	O
5	int
+	O
parseopts	(*(char),*(*(char)))->(int)
(	O
edopts	*(char)
,	O
NULL	O
)	O
)	O
)	O
)	O
)	O
{	O
perror	(*(char))->(void)
(	O
"dap"	*(char)
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
a	int
=	O
0	int
;	O
for	O
(	O
argstart	int
=	O
1	int
;	O
argstart	int
<	O
argc	int
&&	O
argv	*(*(char))
[	O
argstart	int
]	O
[	O
0	int
]	O
==	O
'-'	O
;	O
argstart	int
++	O
)	O
;	O
arg	array(char)
[	O
a	int
++	O
]	O
=	O
argcpy	(array(char),int)->(*(char))
(	O
argv	*(*(char))
[	O
argstart	int
]	O
,	O
0	int
)	O
;	O
a	int
+=	O
parseopts	(*(char),*(*(char)))->(int)
(	O
edopts	*(char)
,	O
arg	array(char)
+	O
a	int
)	O
;	O
arg	array(char)
[	O
a	int
]	O
=	O
argcpy	(array(char),int)->(*(char))
(	O
argv	*(*(char))
[	O
argstart	int
]	O
,	O
4	int
)	O
;	O
suffix	(array(char),array(char))->(void)
(	O
arg	array(char)
[	O
a	int
++	O
]	O
,	O
".log"	*(char)
)	O
;	O
arg	array(char)
[	O
a	int
]	O
=	O
argcpy	(array(char),int)->(*(char))
(	O
argv	*(*(char))
[	O
argstart	int
]	O
,	O
4	int
)	O
;	O
suffix	(array(char),array(char))->(void)
(	O
arg	array(char)
[	O
a	int
++	O
]	O
,	O
".lst"	*(char)
)	O
;	O
switch	O
(	O
srctype	(*(char))->(int)
(	O
argv	*(*(char))
[	O
argstart	int
]	O
)	O
)	O
{	O
case	O
C	int
:	O
arg	array(char)
[	O
a	int
]	O
=	O
argcpy	(array(char),int)->(*(char))
(	O
argv	*(*(char))
[	O
argstart	int
]	O
,	O
2	int
)	O
;	O
suffix	(array(char),array(char))->(void)
(	O
arg	array(char)
[	O
a	int
++	O
]	O
,	O
".c"	*(char)
)	O
;	O
break	O
;	O
case	O
SBS	int
:	O
arg	array(char)
[	O
a	int
]	O
=	O
argcpy	(array(char),int)->(*(char))
(	O
argv	*(*(char))
[	O
argstart	int
]	O
,	O
4	int
)	O
;	O
suffix	(array(char),array(char))->(void)
(	O
arg	array(char)
[	O
a	int
++	O
]	O
,	O
".sbs"	*(char)
)	O
;	O
break	O
;	O
}	O
for	O
(	O
argstrlen	int
=	O
strlen	(*(char))->(long)
(	O
"(shell-command \" &\")"	*(char)
)	O
+	O
strlen	(*(char))->(long)
(	O
dapruns	*(char)
)	O
+	O
1	int
,	O
av	int
=	O
1	int
;	O
av	int
<	O
argc	int
;	O
av	int
++	O
)	O
argstrlen	int
+=	O
strlen	(*(char))->(long)
(	O
argv	*(*(char))
[	O
av	int
]	O
+	O
1	int
)	O
;	O
argstr	*(char)
=	O
malloc	(long)->(*(void))
(	O
argstrlen	int
)	O
;	O
sprintf	(*(char),*(char))->(int)
(	O
argstr	*(char)
,	O
"(shell-command \"%s "	*(char)
,	O
dapruns	*(char)
)	O
;	O
for	O
(	O
av	int
=	O
1	int
;	O
av	int
<	O
argc	int
;	O
av	int
++	O
)	O
{	O
strcat	(*(char),*(char))->(*(char))
(	O
argstr	*(char)
,	O
argv	*(*(char))
[	O
av	int
]	O
)	O
;	O
strcat	(*(char),*(char))->(*(char))
(	O
argstr	*(char)
,	O
" "	*(char)
)	O
;	O
}	O
strcat	(*(char),*(char))->(*(char))
(	O
argstr	*(char)
,	O
"&\")"	*(char)
)	O
;	O
arg	array(char)
[	O
a	int
++	O
]	O
=	O
"--eval"	*(char)
;	O
arg	array(char)
[	O
a	int
++	O
]	O
=	O
argstr	*(char)
;	O
for	O
(	O
av	int
=	O
argstart	int
+	O
1	int
;	O
av	int
<	O
argc	int
&&	O
strcmp	(*(char),*(char))->(int)
(	O
argv	*(*(char))
[	O
av	int
]	O
,	O
"-a"	*(char)
)	O
&&	O
strcmp	(*(char),*(char))->(int)
(	O
argv	*(*(char))
[	O
av	int
]	O
,	O
"--args"	*(char)
)	O
;	O
av	int
++	O
)	O
arg	array(char)
[	O
a	int
++	O
]	O
=	O
argv	*(*(char))
[	O
av	int
]	O
;	O
arg	array(char)
[	O
a	int
]	O
=	O
NULL	O
;	O
execv	(*(char),array(*(char)))->(int)
(	O
editor	*(char)
,	O
arg	array(char)
)	O
;	O
perror	(*(char))->(void)
(	O
editor	*(char)
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
void	O
suffix	(array(char),array(char))->(void)
(	O
char	O
name	array(char)
[	O
]	O
,	O
char	O
suff	array(char)
[	O
]	O
)	O
{	O
int	O
n	int
;	O
n	int
=	O
strlen	(*(char))->(long)
(	O
name	array(char)
)	O
;	O
if	O
(	O
n	int
>	O
2	int
&&	O
!	O
strcmp	(*(char),*(char))->(int)
(	O
name	array(char)
+	O
n	int
-	O
2	int
,	O
".c"	*(char)
)	O
)	O
{	O
name	array(char)
[	O
n	int
-	O
2	int
]	O
=	O
'\0'	O
;	O
strcat	(*(char),*(char))->(*(char))
(	O
name	array(char)
,	O
suff	array(char)
)	O
;	O
}	O
else	O
if	O
(	O
n	int
>	O
4	int
&&	O
!	O
strcmp	(*(char),*(char))->(int)
(	O
name	array(char)
+	O
n	int
-	O
4	int
,	O
".sbs"	*(char)
)	O
)	O
{	O
name	array(char)
[	O
n	int
-	O
4	int
]	O
=	O
'\0'	O
;	O
strcat	(*(char),*(char))->(*(char))
(	O
name	array(char)
,	O
suff	array(char)
)	O
;	O
}	O
else	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"dap: name must end in .c or .sbs: %s\n"	*(char)
,	O
name	array(char)
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
}	O
char	O
*	O
argcpy	(array(char),int)->(*(char))
(	O
char	O
arg	array(char)
[	O
]	O
,	O
int	O
extra	int
)	O
{	O
char	O
*	O
cpy	*(char)
;	O
if	O
(	O
!	O
(	O
cpy	*(char)
=	O
malloc	(long)->(*(void))
(	O
strlen	(*(char))->(long)
(	O
arg	array(char)
)	O
+	O
extra	int
+	O
1	int
)	O
)	O
)	O
{	O
perror	(*(char))->(void)
(	O
"dap"	*(char)
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
strcpy	(*(char),*(char))->(*(char))
(	O
cpy	*(char)
,	O
arg	array(char)
)	O
;	O
return	O
cpy	*(char)
;	O
}	O
int	O
parseopts	(*(char),*(*(char)))->(int)
(	O
char	O
*	O
opts	*(char)
,	O
char	O
*	O
*	O
arg	array(char)
)	O
{	O
static	O
char	O
*	O
optcpy	*(char)
=	O
NULL	O
;	O
static	O
int	O
optlen	int
=	O
0	int
;	O
int	O
i	int
;	O
int	O
a	int
;	O
if	O
(	O
!	O
opts	*(char)
)	O
return	O
0	int
;	O
if	O
(	O
strlen	(*(char))->(long)
(	O
opts	*(char)
)	O
>	O
optlen	int
)	O
{	O
if	O
(	O
optcpy	*(char)
)	O
free	(*(void))->(void)
(	O
optcpy	*(char)
)	O
;	O
optlen	int
=	O
strlen	(*(char))->(long)
(	O
opts	*(char)
)	O
;	O
if	O
(	O
!	O
(	O
optcpy	*(char)
=	O
malloc	(long)->(*(void))
(	O
optlen	int
+	O
1	int
)	O
)	O
)	O
{	O
perror	(*(char))->(void)
(	O
"dap"	*(char)
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
}	O
strcpy	(*(char),*(char))->(*(char))
(	O
optcpy	*(char)
,	O
opts	*(char)
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
optcpy	*(char)
[	O
i	int
]	O
==	O
' '	O
;	O
i	int
++	O
)	O
;	O
for	O
(	O
a	int
=	O
0	int
;	O
optcpy	*(char)
[	O
i	int
]	O
;	O
a	int
++	O
)	O
{	O
if	O
(	O
arg	array(char)
)	O
arg	array(char)
[	O
a	int
]	O
=	O
optcpy	*(char)
+	O
i	int
;	O
while	O
(	O
optcpy	*(char)
[	O
i	int
]	O
&&	O
optcpy	*(char)
[	O
i	int
]	O
!=	O
' '	O
)	O
i	int
++	O
;	O
if	O
(	O
optcpy	*(char)
[	O
i	int
]	O
)	O
{	O
if	O
(	O
arg	array(char)
)	O
optcpy	*(char)
[	O
i	int
]	O
=	O
'\0'	O
;	O
for	O
(	O
i	int
++	O
;	O
optcpy	*(char)
[	O
i	int
]	O
==	O
' '	O
;	O
i	int
++	O
)	O
;	O
}	O
}	O
return	O
a	int
;	O
}	O
