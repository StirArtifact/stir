static	O
bool	bool
extract_all	bool
=	O
false	int
;	O
static	O
hash_table	struct(long,long,*(struct),*(struct),struct(long,*(struct(*(char),*(struct(*`,*`,array(char))),array(char))),*(char),*(char),*(char),union(long,*(void)),long,union(*((long)->(*(void))),*((*(void),long)->(*(void)))),union(*((*(void))->(void)),*((*(void),*(void))->(void))),*(void),int,int,int))
keywords	struct(long,long,*(struct),*(struct),struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),long,union(*((long)->(*`)),*((*`,long)->(*`))),union(*((*`)->(void)),*((*`,*`)->(void))),*(void),int,int,int))
;	O
static	O
bool	bool
default_keywords	bool
=	O
true	int
;	O
void	O
x_tcl_extract_all	()->(void)
(	O
)	O
{	O
extract_all	bool
=	O
true	int
;	O
}	O
void	O
x_tcl_keyword	(*(char))->(void)
(	O
const	O
char	O
*	O
name	*(char)
)	O
{	O
if	O
(	O
name	*(char)
==	O
NULL	O
)	O
default_keywords	bool
=	O
false	int
;	O
else	O
{	O
const	O
char	O
*	O
end	*(char)
;	O
struct	O
callshape	struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long))
shape	*(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long)))
;	O
if	O
(	O
keywords	struct(long,long,*(struct),*(struct),struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),long,union(*((long)->(*`)),*((*`,long)->(*`))),union(*((*`)->(void)),*((*`,*`)->(void))),*(void),int,int,int))
.	O
table	*(struct)
==	O
NULL	O
)	O
hash_init	(*(struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))),long)->(int)
(	O
&	O
keywords	struct(long,long,*(struct),*(struct),struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),long,union(*((long)->(*`)),*((*`,long)->(*`))),union(*((*`)->(void)),*((*`,*`)->(void))),*(void),int,int,int))
,	O
100	int
)	O
;	O
split_keywordspec	(*(char),*(*(char)),*(struct(int,int,int,bool,bool,int,struct(*(*`),long,long))))->(void)
(	O
name	*(char)
,	O
&	O
end	*(char)
,	O
&	O
shape	*(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long)))
)	O
;	O
if	O
(	O
end	*(char)
-	O
name	*(char)
>=	O
2	int
&&	O
name	*(char)
[	O
0	int
]	O
==	O
':'	O
&&	O
name	*(char)
[	O
1	int
]	O
==	O
':'	O
)	O
name	*(char)
+=	O
2	int
;	O
insert_keyword_callshape	(*(struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))),*(char),long,*(struct(int,int,int,bool,bool,int,struct(*(*`),long,long))))->(void)
(	O
&	O
keywords	struct(long,long,*(struct),*(struct),struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),long,union(*((long)->(*`)),*((*`,long)->(*`))),union(*((*`)->(void)),*((*`,*`)->(void))),*(void),int,int,int))
,	O
name	*(char)
,	O
end	*(char)
-	O
name	*(char)
,	O
&	O
shape	*(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long)))
)	O
;	O
}	O
}	O
static	O
void	O
init_keywords	()->(void)
(	O
)	O
{	O
if	O
(	O
default_keywords	bool
)	O
{	O
x_tcl_keyword	(*(char))->(void)
(	O
"::msgcat::mc"	*(char)
)	O
;	O
default_keywords	bool
=	O
false	int
;	O
}	O
}	O
void	O
init_flag_table_tcl	()->(void)
(	O
)	O
{	O
xgettext_record_flag	(*(char))->(void)
(	O
"::msgcat::mc:1:pass-tcl-format"	*(char)
)	O
;	O
xgettext_record_flag	(*(char))->(void)
(	O
"format:1:tcl-format"	*(char)
)	O
;	O
}	O
static	O
FILE	struct
*	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
;	O
static	O
int	O
do_getc	()->(int)
(	O
)	O
{	O
int	O
c	int
=	O
getc	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
if	O
(	O
c	int
==	O
EOF	O
)	O
{	O
if	O
(	O
ferror	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
)	O
error	(int,int,*(char))->(void)
(	O
EXIT_FAILURE	int
,	O
errno	O
,	O
_	O
(	O
"error while reading \"%s\""	*(char)
)	O
,	O
real_file_name	*(char)
)	O
;	O
}	O
else	O
if	O
(	O
c	int
==	O
'\n'	O
)	O
line_number	long
++	O
;	O
return	O
c	int
;	O
}	O
static	O
void	O
do_ungetc	(int)->(void)
(	O
int	O
c	int
)	O
{	O
if	O
(	O
c	int
==	O
'\n'	O
)	O
line_number	long
--	O
;	O
ungetc	(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
c	int
,	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
}	O
static	O
int	O
phase1_pushback	array(int)
[	O
1	int
]	O
;	O
static	O
int	O
phase1_pushback_length	int
;	O
static	O
int	O
phase1_getc	()->(int)
(	O
)	O
{	O
int	O
c	int
;	O
if	O
(	O
phase1_pushback_length	int
)	O
{	O
c	int
=	O
phase1_pushback	array(int)
[	O
--	O
phase1_pushback_length	int
]	O
;	O
if	O
(	O
c	int
==	O
'\n'	O
||	O
c	int
==	O
BS_NL	O
)	O
++	O
line_number	long
;	O
return	O
c	int
;	O
}	O
c	int
=	O
do_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
c	int
!=	O
'\\'	O
)	O
return	O
c	int
;	O
c	int
=	O
do_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
c	int
!=	O
'\n'	O
)	O
{	O
if	O
(	O
c	int
!=	O
EOF	O
)	O
do_ungetc	(int)->(void)
(	O
c	int
)	O
;	O
return	O
'\\'	O
;	O
}	O
for	O
(	O
;	O
;	O
)	O
{	O
c	int
=	O
do_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
!	O
(	O
c	int
==	O
' '	O
||	O
c	int
==	O
'\t'	O
)	O
)	O
break	O
;	O
}	O
if	O
(	O
c	int
!=	O
EOF	O
)	O
do_ungetc	(int)->(void)
(	O
c	int
)	O
;	O
return	O
BS_NL	O
;	O
}	O
static	O
void	O
phase1_ungetc	(int)->(void)
(	O
int	O
c	int
)	O
{	O
switch	O
(	O
c	int
)	O
{	O
case	O
EOF	O
:	O
break	O
;	O
case	O
'\n'	O
:	O
case	O
BS_NL	O
:	O
--	O
line_number	long
;	O
default	O
:	O
if	O
(	O
phase1_pushback_length	int
==	O
SIZEOF	O
(	O
phase1_pushback	array(int)
)	O
)	O
abort	()->(void)
(	O
)	O
;	O
phase1_pushback	array(int)
[	O
phase1_pushback_length	int
++	O
]	O
=	O
c	int
;	O
break	O
;	O
}	O
}	O
static	O
int	O
phase2_pushback	array(int)
[	O
2	int
]	O
;	O
static	O
int	O
phase2_pushback_length	int
;	O
static	O
int	O
brace_depth	int
;	O
static	O
int	O
phase2_push	()->(int)
(	O
)	O
{	O
int	O
previous_depth	int
=	O
brace_depth	int
;	O
brace_depth	int
=	O
1	int
;	O
return	O
previous_depth	int
;	O
}	O
static	O
void	O
phase2_pop	(int)->(void)
(	O
int	O
previous_depth	int
)	O
{	O
brace_depth	int
=	O
previous_depth	int
;	O
}	O
static	O
int	O
phase2_getc	()->(int)
(	O
)	O
{	O
int	O
c	int
;	O
if	O
(	O
phase2_pushback_length	int
)	O
{	O
c	int
=	O
phase2_pushback	array(int)
[	O
--	O
phase2_pushback_length	int
]	O
;	O
if	O
(	O
c	int
==	O
'\n'	O
||	O
c	int
==	O
BS_NL	O
)	O
++	O
line_number	long
;	O
else	O
if	O
(	O
c	int
==	O
'{'	O
)	O
++	O
brace_depth	int
;	O
else	O
if	O
(	O
c	int
==	O
'}'	O
)	O
--	O
brace_depth	int
;	O
return	O
c	int
;	O
}	O
c	int
=	O
phase1_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
c	int
==	O
'{'	O
)	O
++	O
brace_depth	int
;	O
else	O
if	O
(	O
c	int
==	O
'}'	O
)	O
{	O
if	O
(	O
--	O
brace_depth	int
==	O
0	int
)	O
c	int
=	O
CL_BRACE	O
;	O
}	O
return	O
c	int
;	O
}	O
static	O
void	O
phase2_ungetc	(int)->(void)
(	O
int	O
c	int
)	O
{	O
if	O
(	O
c	int
!=	O
EOF	O
)	O
{	O
switch	O
(	O
c	int
)	O
{	O
case	O
'\n'	O
:	O
case	O
BS_NL	O
:	O
--	O
line_number	long
;	O
break	O
;	O
case	O
'{'	O
:	O
--	O
brace_depth	int
;	O
break	O
;	O
case	O
'}'	O
:	O
++	O
brace_depth	int
;	O
break	O
;	O
}	O
if	O
(	O
phase2_pushback_length	int
==	O
SIZEOF	O
(	O
phase2_pushback	array(int)
)	O
)	O
abort	()->(void)
(	O
)	O
;	O
phase2_pushback	array(int)
[	O
phase2_pushback_length	int
++	O
]	O
=	O
c	int
;	O
}	O
}	O
struct	O
token	struct(int,int,*(char))
{	O
int	O
allocated	int
;	O
int	O
charcount	int
;	O
char	O
*	O
chars	*(char)
;	O
}	O
;	O
static	O
inline	O
void	O
init_token	(*(struct(int,int,*(char))))->(void)
(	O
struct	O
token	struct(int,int,*(char))
*	O
tp	*(struct(int,int,*(char)))
)	O
{	O
tp	*(struct(int,int,*(char)))
->	O
allocated	int
=	O
10	int
;	O
tp	*(struct(int,int,*(char)))
->	O
chars	*(char)
=	O
XNMALLOC	O
(	O
tp	*(struct(int,int,*(char)))
->	O
allocated	int
,	O
char	O
)	O
;	O
tp	*(struct(int,int,*(char)))
->	O
charcount	int
=	O
0	int
;	O
}	O
static	O
inline	O
void	O
free_token	(*(struct(int,int,*(char))))->(void)
(	O
struct	O
token	struct(int,int,*(char))
*	O
tp	*(struct(int,int,*(char)))
)	O
{	O
free	(*(void))->(void)
(	O
tp	*(struct(int,int,*(char)))
->	O
chars	*(char)
)	O
;	O
}	O
static	O
inline	O
void	O
grow_token	(*(struct(int,int,*(char))))->(void)
(	O
struct	O
token	struct(int,int,*(char))
*	O
tp	*(struct(int,int,*(char)))
)	O
{	O
if	O
(	O
tp	*(struct(int,int,*(char)))
->	O
charcount	int
==	O
tp	*(struct(int,int,*(char)))
->	O
allocated	int
)	O
{	O
tp	*(struct(int,int,*(char)))
->	O
allocated	int
*=	O
2	int
;	O
tp	*(struct(int,int,*(char)))
->	O
chars	*(char)
=	O
(	O
char	O
*	O
)	O
xrealloc	(*(void),long)->(*(void))
(	O
tp	*(struct(int,int,*(char)))
->	O
chars	*(char)
,	O
tp	*(struct(int,int,*(char)))
->	O
allocated	int
*	O
sizeof	O
(	O
char	O
)	O
)	O
;	O
}	O
}	O
static	O
char	O
*	O
buffer	*(char)
;	O
static	O
size_t	long
bufmax	long
;	O
static	O
size_t	long
buflen	long
;	O
static	O
inline	O
void	O
comment_start	()->(void)
(	O
)	O
{	O
buflen	long
=	O
0	int
;	O
}	O
static	O
inline	O
void	O
comment_add	(int)->(void)
(	O
int	O
c	int
)	O
{	O
if	O
(	O
buflen	long
>=	O
bufmax	long
)	O
{	O
bufmax	long
=	O
2	int
*	O
bufmax	long
+	O
10	int
;	O
buffer	*(char)
=	O
xrealloc	(*(void),long)->(*(void))
(	O
buffer	*(char)
,	O
bufmax	long
)	O
;	O
}	O
buffer	*(char)
[	O
buflen	long
++	O
]	O
=	O
c	int
;	O
}	O
static	O
inline	O
void	O
comment_line_end	()->(void)
(	O
)	O
{	O
while	O
(	O
buflen	long
>=	O
1	int
&&	O
(	O
buffer	*(char)
[	O
buflen	long
-	O
1	int
]	O
==	O
' '	O
||	O
buffer	*(char)
[	O
buflen	long
-	O
1	int
]	O
==	O
'\t'	O
)	O
)	O
--	O
buflen	long
;	O
if	O
(	O
buflen	long
>=	O
bufmax	long
)	O
{	O
bufmax	long
=	O
2	int
*	O
bufmax	long
+	O
10	int
;	O
buffer	*(char)
=	O
xrealloc	(*(void),long)->(*(void))
(	O
buffer	*(char)
,	O
bufmax	long
)	O
;	O
}	O
buffer	*(char)
[	O
buflen	long
]	O
=	O
'\0'	O
;	O
savable_comment_add	(*(char))->(void)
(	O
buffer	*(char)
)	O
;	O
}	O
static	O
int	O
last_comment_line	int
;	O
static	O
int	O
last_non_comment_line	int
;	O
static	O
message_list_ty	struct
*	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
;	O
enum	O
word_type	enum(int,int,int,int,int,int)
{	O
t_string	int
,	O
t_other	int
,	O
t_separator	int
,	O
t_bracket	int
,	O
t_brace	int
,	O
t_eof	int
}	O
;	O
struct	O
word	struct(enum(int,int,int,int,int,int),*(struct(int,int,*(char))),int)
{	O
enum	O
word_type	enum(int,int,int,int,int,int)
type	char
;	O
struct	O
token	struct(int,int,*(char))
*	O
token	struct(int,int,*(char))
;	O
int	O
line_number_at_start	int
;	O
}	O
;	O
static	O
inline	O
void	O
free_word	(*(struct(enum(int,int,int,int,int,int),*(struct(int,int,*`)),int)))->(void)
(	O
struct	O
word	struct(enum(int,int,int,int,int,int),*(struct(int,int,*(char))),int)
*	O
wp	*(struct(enum(int,int,int,int,int,int),*(struct(int,int,*(char))),int))
)	O
{	O
if	O
(	O
wp	*(struct(enum(int,int,int,int,int,int),*(struct(int,int,*(char))),int))
->	O
type	char
==	O
t_string	int
)	O
{	O
free_token	(*(struct(int,int,*(char))))->(void)
(	O
wp	*(struct(enum(int,int,int,int,int,int),*(struct(int,int,*(char))),int))
->	O
token	struct(int,int,*(char))
)	O
;	O
free	(*(void))->(void)
(	O
wp	*(struct(enum(int,int,int,int,int,int),*(struct(int,int,*(char))),int))
->	O
token	struct(int,int,*(char))
)	O
;	O
}	O
}	O
static	O
char	O
*	O
string_of_word	(*(struct(enum(int,int,int,int,int,int),*(struct(int,int,*`)),int)))->(*(char))
(	O
const	O
struct	O
word	struct(enum(int,int,int,int,int,int),*(struct(int,int,*(char))),int)
*	O
wp	*(struct(enum(int,int,int,int,int,int),*(struct(int,int,*(char))),int))
)	O
{	O
char	O
*	O
str	*(char)
;	O
int	O
n	long
;	O
if	O
(	O
!	O
(	O
wp	*(struct(enum(int,int,int,int,int,int),*(struct(int,int,*(char))),int))
->	O
type	char
==	O
t_string	int
)	O
)	O
abort	()->(void)
(	O
)	O
;	O
n	long
=	O
wp	*(struct(enum(int,int,int,int,int,int),*(struct(int,int,*(char))),int))
->	O
token	struct(int,int,*(char))
->	O
charcount	int
;	O
str	*(char)
=	O
XNMALLOC	O
(	O
n	long
+	O
1	int
,	O
char	O
)	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
str	*(char)
,	O
wp	*(struct(enum(int,int,int,int,int,int),*(struct(int,int,*(char))),int))
->	O
token	struct(int,int,*(char))
->	O
chars	*(char)
,	O
n	long
)	O
;	O
str	*(char)
[	O
n	long
]	O
=	O
'\0'	O
;	O
return	O
str	*(char)
;	O
}	O
static	O
flag_context_list_table_ty	struct(long,long,*(struct),*(struct),struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),long,union(*((long)->(*`)),*((*`,long)->(*`))),union(*((*`)->(void)),*((*`,*`)->(void))),*(void),int,int,int))
*	O
flag_context_list_table	*(struct(long,long,*(struct),*(struct),struct(long,*(struct(*`,*`,array(char))),*(char),*(char),*(char),union(long,*(void)),long,union(*((long)->(*`)),*((*`,long)->(*`))),union(*((*`)->(void)),*((*`,*`)->(void))),*(void),int,int,int)))
;	O
static	O
int	O
do_getc_escaped	()->(int)
(	O
)	O
{	O
int	O
c	int
;	O
c	int
=	O
phase1_getc	()->(int)
(	O
)	O
;	O
switch	O
(	O
c	int
)	O
{	O
case	O
EOF	O
:	O
return	O
'\\'	O
;	O
case	O
'a'	O
:	O
return	O
'\a'	O
;	O
case	O
'b'	O
:	O
return	O
'\b'	O
;	O
case	O
'f'	O
:	O
return	O
'\f'	O
;	O
case	O
'n'	O
:	O
return	O
'\n'	O
;	O
case	O
'r'	O
:	O
return	O
'\r'	O
;	O
case	O
't'	O
:	O
return	O
'\t'	O
;	O
case	O
'v'	O
:	O
return	O
'\v'	O
;	O
case	O
'x'	O
:	O
{	O
int	O
n	long
=	O
0	int
;	O
unsigned	O
int	O
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
;	O
i	long
++	O
)	O
{	O
c	int
=	O
phase1_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
c	int
==	O
EOF	O
||	O
!	O
c_isxdigit	(int)->(bool)
(	O
(	O
unsigned	O
char	O
)	O
c	int
)	O
)	O
break	O
;	O
if	O
(	O
c	int
>=	O
'0'	O
&&	O
c	int
<=	O
'9'	O
)	O
n	long
=	O
(	O
n	long
<<	O
4	int
)	O
+	O
(	O
c	int
-	O
'0'	O
)	O
;	O
else	O
if	O
(	O
c	int
>=	O
'A'	O
&&	O
c	int
<=	O
'F'	O
)	O
n	long
=	O
(	O
n	long
<<	O
4	int
)	O
+	O
(	O
c	int
-	O
'A'	O
+	O
10	int
)	O
;	O
else	O
if	O
(	O
c	int
>=	O
'a'	O
&&	O
c	int
<=	O
'f'	O
)	O
n	long
=	O
(	O
n	long
<<	O
4	int
)	O
+	O
(	O
c	int
-	O
'a'	O
+	O
10	int
)	O
;	O
}	O
phase1_ungetc	(int)->(void)
(	O
c	int
)	O
;	O
return	O
(	O
i	long
>	O
0	int
?	O
(	O
unsigned	O
char	O
)	O
n	long
:	O
'x'	O
)	O
;	O
}	O
case	O
'u'	O
:	O
{	O
int	O
n	long
=	O
0	int
;	O
unsigned	O
int	O
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
4	int
;	O
i	long
++	O
)	O
{	O
c	int
=	O
phase1_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
c	int
==	O
EOF	O
||	O
!	O
c_isxdigit	(int)->(bool)
(	O
(	O
unsigned	O
char	O
)	O
c	int
)	O
)	O
{	O
phase1_ungetc	(int)->(void)
(	O
c	int
)	O
;	O
break	O
;	O
}	O
if	O
(	O
c	int
>=	O
'0'	O
&&	O
c	int
<=	O
'9'	O
)	O
n	long
=	O
(	O
n	long
<<	O
4	int
)	O
+	O
(	O
c	int
-	O
'0'	O
)	O
;	O
else	O
if	O
(	O
c	int
>=	O
'A'	O
&&	O
c	int
<=	O
'F'	O
)	O
n	long
=	O
(	O
n	long
<<	O
4	int
)	O
+	O
(	O
c	int
-	O
'A'	O
+	O
10	int
)	O
;	O
else	O
if	O
(	O
c	int
>=	O
'a'	O
&&	O
c	int
<=	O
'f'	O
)	O
n	long
=	O
(	O
n	long
<<	O
4	int
)	O
+	O
(	O
c	int
-	O
'a'	O
+	O
10	int
)	O
;	O
}	O
return	O
(	O
i	long
>	O
0	int
?	O
n	long
:	O
'u'	O
)	O
;	O
}	O
case	O
'0'	O
:	O
case	O
'1'	O
:	O
case	O
'2'	O
:	O
case	O
'3'	O
:	O
case	O
'4'	O
:	O
case	O
'5'	O
:	O
case	O
'6'	O
:	O
case	O
'7'	O
:	O
{	O
int	O
n	long
=	O
c	int
-	O
'0'	O
;	O
c	int
=	O
phase1_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
c	int
!=	O
EOF	O
)	O
{	O
if	O
(	O
c	int
>=	O
'0'	O
&&	O
c	int
<=	O
'7'	O
)	O
{	O
n	long
=	O
(	O
n	long
<<	O
3	int
)	O
+	O
(	O
c	int
-	O
'0'	O
)	O
;	O
c	int
=	O
phase1_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
c	int
!=	O
EOF	O
)	O
{	O
if	O
(	O
c	int
>=	O
'0'	O
&&	O
c	int
<=	O
'7'	O
)	O
n	long
=	O
(	O
n	long
<<	O
3	int
)	O
+	O
(	O
c	int
-	O
'0'	O
)	O
;	O
else	O
phase1_ungetc	(int)->(void)
(	O
c	int
)	O
;	O
}	O
}	O
else	O
phase1_ungetc	(int)->(void)
(	O
c	int
)	O
;	O
}	O
return	O
(	O
unsigned	O
char	O
)	O
n	long
;	O
}	O
default	O
:	O
return	O
(	O
unsigned	O
char	O
)	O
c	int
;	O
}	O
}	O
enum	O
terminator	char
{	O
te_space_separator	int
,	O
te_space_separator_bracket	int
,	O
te_paren	int
,	O
te_quote	int
}	O
;	O
static	O
enum	O
word_type	enum(int,int,int,int,int,int)
read_command_list	(int,struct(int,int,int,int,int,int))->(enum(int,int,int,int,int,int))
(	O
int	O
looking_for	int
,	O
flag_context_ty	struct
outer_context	struct(int,int,int,int,int,int)
)	O
;	O
static	O
int	O
accumulate_word	(*(struct(enum(int,int,int,int,int,int),*(struct(int,int,*`)),int)),enum(int,int,int,int),struct(int,int,int,int,int,int))->(int)
(	O
struct	O
word	struct(enum(int,int,int,int,int,int),*(struct(int,int,*(char))),int)
*	O
wp	*(struct(enum(int,int,int,int,int,int),*(struct(int,int,*(char))),int))
,	O
enum	O
terminator	char
looking_for	int
,	O
flag_context_ty	struct
context	struct(int,int,int,int,int,int)
)	O
{	O
int	O
c	int
;	O
for	O
(	O
;	O
;	O
)	O
{	O
c	int
=	O
phase2_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
c	int
==	O
EOF	O
||	O
c	int
==	O
CL_BRACE	O
)	O
return	O
c	int
;	O
if	O
(	O
(	O
looking_for	int
==	O
te_space_separator	int
||	O
looking_for	int
==	O
te_space_separator_bracket	int
)	O
&&	O
(	O
c	int
==	O
' '	O
||	O
c	int
==	O
BS_NL	O
||	O
c	int
==	O
'\t'	O
||	O
c	int
==	O
'\v'	O
||	O
c	int
==	O
'\f'	O
||	O
c	int
==	O
'\r'	O
||	O
c	int
==	O
';'	O
||	O
c	int
==	O
'\n'	O
)	O
)	O
return	O
c	int
;	O
if	O
(	O
looking_for	int
==	O
te_space_separator_bracket	int
&&	O
c	int
==	O
']'	O
)	O
return	O
c	int
;	O
if	O
(	O
looking_for	int
==	O
te_paren	int
&&	O
c	int
==	O
')'	O
)	O
return	O
c	int
;	O
if	O
(	O
looking_for	int
==	O
te_quote	int
&&	O
c	int
==	O
'"'	O
)	O
return	O
c	int
;	O
if	O
(	O
c	int
==	O
'$'	O
)	O
{	O
c	int
=	O
phase2_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
c	int
==	O
'{'	O
)	O
{	O
do	O
c	int
=	O
phase2_getc	()->(int)
(	O
)	O
;	O
while	O
(	O
c	int
!=	O
EOF	O
&&	O
c	int
!=	O
'}'	O
)	O
;	O
wp	*(struct(enum(int,int,int,int,int,int),*(struct(int,int,*(char))),int))
->	O
type	char
=	O
t_other	int
;	O
}	O
else	O
{	O
bool	bool
nonempty	bool
=	O
false	int
;	O
for	O
(	O
;	O
c	int
!=	O
EOF	O
&&	O
c	int
!=	O
CL_BRACE	O
;	O
c	int
=	O
phase2_getc	()->(int)
(	O
)	O
)	O
{	O
if	O
(	O
c_isalnum	(int)->(bool)
(	O
(	O
unsigned	O
char	O
)	O
c	int
)	O
||	O
(	O
c	int
==	O
'_'	O
)	O
)	O
{	O
nonempty	bool
=	O
true	int
;	O
continue	O
;	O
}	O
if	O
(	O
c	int
==	O
':'	O
)	O
{	O
c	int
=	O
phase2_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
c	int
==	O
':'	O
)	O
{	O
do	O
c	int
=	O
phase2_getc	()->(int)
(	O
)	O
;	O
while	O
(	O
c	int
==	O
':'	O
)	O
;	O
phase2_ungetc	(int)->(void)
(	O
c	int
)	O
;	O
nonempty	bool
=	O
true	int
;	O
continue	O
;	O
}	O
phase2_ungetc	(int)->(void)
(	O
c	int
)	O
;	O
c	int
=	O
':'	O
;	O
}	O
break	O
;	O
}	O
if	O
(	O
c	int
==	O
'('	O
)	O
{	O
struct	O
word	struct(enum(int,int,int,int,int,int),*(struct(int,int,*(char))),int)
index_word	struct(enum(int,int,int,int,int,int),*(struct(int,int,*(char))),int)
;	O
index_word	struct(enum(int,int,int,int,int,int),*(struct(int,int,*(char))),int)
.	O
type	char
=	O
t_other	int
;	O
c	int
=	O
accumulate_word	(*(struct(enum(int,int,int,int,int,int),*(struct(int,int,*`)),int)),enum(int,int,int,int),struct(int,int,int,int,int,int))->(int)
(	O
&	O
index_word	struct(enum(int,int,int,int,int,int),*(struct(int,int,*(char))),int)
,	O
te_paren	int
,	O
null_context	struct(int,int,int,int,int,int)
)	O
;	O
if	O
(	O
c	int
!=	O
EOF	O
&&	O
c	int
!=	O
')'	O
)	O
phase2_ungetc	(int)->(void)
(	O
c	int
)	O
;	O
wp	*(struct(enum(int,int,int,int,int,int),*(struct(int,int,*(char))),int))
->	O
type	char
=	O
t_other	int
;	O
}	O
else	O
{	O
phase2_ungetc	(int)->(void)
(	O
c	int
)	O
;	O
if	O
(	O
nonempty	bool
)	O
{	O
wp	*(struct(enum(int,int,int,int,int,int),*(struct(int,int,*(char))),int))
->	O
type	char
=	O
t_other	int
;	O
}	O
else	O
{	O
if	O
(	O
wp	*(struct(enum(int,int,int,int,int,int),*(struct(int,int,*(char))),int))
->	O
type	char
==	O
t_string	int
)	O
{	O
grow_token	(*(struct(int,int,*(char))))->(void)
(	O
wp	*(struct(enum(int,int,int,int,int,int),*(struct(int,int,*(char))),int))
->	O
token	struct(int,int,*(char))
)	O
;	O
wp	*(struct(enum(int,int,int,int,int,int),*(struct(int,int,*(char))),int))
->	O
token	struct(int,int,*(char))
->	O
chars	*(char)
[	O
wp	*(struct(enum(int,int,int,int,int,int),*(struct(int,int,*(char))),int))
->	O
token	struct(int,int,*(char))
->	O
charcount	int
++	O
]	O
=	O
'$'	O
;	O
}	O
}	O
}	O
}	O
}	O
else	O
if	O
(	O
c	int
==	O
'['	O
)	O
{	O
read_command_list	(int,struct(int,int,int,int,int,int))->(enum(int,int,int,int,int,int))
(	O
']'	O
,	O
context	struct(int,int,int,int,int,int)
)	O
;	O
wp	*(struct(enum(int,int,int,int,int,int),*(struct(int,int,*(char))),int))
->	O
type	char
=	O
t_other	int
;	O
}	O
else	O
if	O
(	O
c	int
==	O
'\\'	O
)	O
{	O
unsigned	O
int	O
uc	int
;	O
unsigned	O
char	O
utf8buf	array(char)
[	O
6	int
]	O
;	O
int	O
count	int
;	O
int	O
i	long
;	O
uc	int
=	O
do_getc_escaped	()->(int)
(	O
)	O
;	O
assert	O
(	O
uc	int
<	O
0x10000	int
)	O
;	O
count	int
=	O
u8_uctomb	(*(char),int,int)->(int)
(	O
utf8buf	array(char)
,	O
uc	int
,	O
6	int
)	O
;	O
assert	O
(	O
count	int
>	O
0	int
)	O
;	O
if	O
(	O
wp	*(struct(enum(int,int,int,int,int,int),*(struct(int,int,*(char))),int))
->	O
type	char
==	O
t_string	int
)	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
count	int
;	O
i	long
++	O
)	O
{	O
grow_token	(*(struct(int,int,*(char))))->(void)
(	O
wp	*(struct(enum(int,int,int,int,int,int),*(struct(int,int,*(char))),int))
->	O
token	struct(int,int,*(char))
)	O
;	O
wp	*(struct(enum(int,int,int,int,int,int),*(struct(int,int,*(char))),int))
->	O
token	struct(int,int,*(char))
->	O
chars	*(char)
[	O
wp	*(struct(enum(int,int,int,int,int,int),*(struct(int,int,*(char))),int))
->	O
token	struct(int,int,*(char))
->	O
charcount	int
++	O
]	O
=	O
utf8buf	array(char)
[	O
i	long
]	O
;	O
}	O
}	O
else	O
{	O
if	O
(	O
wp	*(struct(enum(int,int,int,int,int,int),*(struct(int,int,*(char))),int))
->	O
type	char
==	O
t_string	int
)	O
{	O
grow_token	(*(struct(int,int,*(char))))->(void)
(	O
wp	*(struct(enum(int,int,int,int,int,int),*(struct(int,int,*(char))),int))
->	O
token	struct(int,int,*(char))
)	O
;	O
wp	*(struct(enum(int,int,int,int,int,int),*(struct(int,int,*(char))),int))
->	O
token	struct(int,int,*(char))
->	O
chars	*(char)
[	O
wp	*(struct(enum(int,int,int,int,int,int),*(struct(int,int,*(char))),int))
->	O
token	struct(int,int,*(char))
->	O
charcount	int
++	O
]	O
=	O
(	O
unsigned	O
char	O
)	O
c	int
;	O
}	O
}	O
}	O
}	O
static	O
void	O
read_word	(*(struct(enum(int,int,int,int,int,int),*(struct(int,int,*`)),int)),int,struct(int,int,int,int,int,int))->(void)
(	O
struct	O
word	struct(enum(int,int,int,int,int,int),*(struct(int,int,*(char))),int)
*	O
wp	*(struct(enum(int,int,int,int,int,int),*(struct(int,int,*(char))),int))
,	O
int	O
looking_for	int
,	O
flag_context_ty	struct
context	struct(int,int,int,int,int,int)
)	O
{	O
int	O
c	int
;	O
do	O
c	int
=	O
phase2_getc	()->(int)
(	O
)	O
;	O
while	O
(	O
c	int
==	O
' '	O
||	O
c	int
==	O
BS_NL	O
||	O
c	int
==	O
'\t'	O
||	O
c	int
==	O
'\v'	O
||	O
c	int
==	O
'\f'	O
||	O
c	int
==	O
'\r'	O
)	O
;	O
if	O
(	O
c	int
==	O
EOF	O
)	O
{	O
wp	*(struct(enum(int,int,int,int,int,int),*(struct(int,int,*(char))),int))
->	O
type	char
=	O
t_eof	int
;	O
return	O
;	O
}	O
if	O
(	O
c	int
==	O
CL_BRACE	O
)	O
{	O
wp	*(struct(enum(int,int,int,int,int,int),*(struct(int,int,*(char))),int))
->	O
type	char
=	O
t_brace	int
;	O
last_non_comment_line	int
=	O
line_number	long
;	O
return	O
;	O
}	O
if	O
(	O
c	int
==	O
'\n'	O
)	O
{	O
if	O
(	O
last_non_comment_line	int
>	O
last_comment_line	int
)	O
savable_comment_reset	()->(void)
(	O
)	O
;	O
wp	*(struct(enum(int,int,int,int,int,int),*(struct(int,int,*(char))),int))
->	O
type	char
=	O
t_separator	int
;	O
return	O
;	O
}	O
if	O
(	O
c	int
==	O
';'	O
)	O
{	O
wp	*(struct(enum(int,int,int,int,int,int),*(struct(int,int,*(char))),int))
->	O
type	char
=	O
t_separator	int
;	O
last_non_comment_line	int
=	O
line_number	long
;	O
return	O
;	O
}	O
if	O
(	O
looking_for	int
==	O
']'	O
&&	O
c	int
==	O
']'	O
)	O
{	O
wp	*(struct(enum(int,int,int,int,int,int),*(struct(int,int,*(char))),int))
->	O
type	char
=	O
t_bracket	int
;	O
last_non_comment_line	int
=	O
line_number	long
;	O
return	O
;	O
}	O
if	O
(	O
c	int
==	O
'{'	O
)	O
{	O
int	O
previous_depth	int
;	O
enum	O
word_type	enum(int,int,int,int,int,int)
terminator	char
;	O
previous_depth	int
=	O
phase2_push	()->(int)
(	O
)	O
-	O
1	int
;	O
terminator	char
=	O
read_command_list	(int,struct(int,int,int,int,int,int))->(enum(int,int,int,int,int,int))
(	O
'\0'	O
,	O
null_context	struct(int,int,int,int,int,int)
)	O
;	O
if	O
(	O
terminator	char
==	O
t_brace	int
)	O
phase2_pop	(int)->(void)
(	O
previous_depth	int
)	O
;	O
wp	*(struct(enum(int,int,int,int,int,int),*(struct(int,int,*(char))),int))
->	O
type	char
=	O
t_other	int
;	O
last_non_comment_line	int
=	O
line_number	long
;	O
return	O
;	O
}	O
wp	*(struct(enum(int,int,int,int,int,int),*(struct(int,int,*(char))),int))
->	O
type	char
=	O
t_string	int
;	O
wp	*(struct(enum(int,int,int,int,int,int),*(struct(int,int,*(char))),int))
->	O
token	struct(int,int,*(char))
=	O
XMALLOC	O
(	O
struct	O
token	struct(int,int,*(char))
)	O
;	O
init_token	(*(struct(int,int,*(char))))->(void)
(	O
wp	*(struct(enum(int,int,int,int,int,int),*(struct(int,int,*(char))),int))
->	O
token	struct(int,int,*(char))
)	O
;	O
wp	*(struct(enum(int,int,int,int,int,int),*(struct(int,int,*(char))),int))
->	O
line_number_at_start	int
=	O
line_number	long
;	O
if	O
(	O
c	int
==	O
'"'	O
)	O
{	O
c	int
=	O
accumulate_word	(*(struct(enum(int,int,int,int,int,int),*(struct(int,int,*`)),int)),enum(int,int,int,int),struct(int,int,int,int,int,int))->(int)
(	O
wp	*(struct(enum(int,int,int,int,int,int),*(struct(int,int,*(char))),int))
,	O
te_quote	int
,	O
context	struct(int,int,int,int,int,int)
)	O
;	O
if	O
(	O
c	int
!=	O
EOF	O
&&	O
c	int
!=	O
'"'	O
)	O
phase2_ungetc	(int)->(void)
(	O
c	int
)	O
;	O
}	O
else	O
{	O
phase2_ungetc	(int)->(void)
(	O
c	int
)	O
;	O
c	int
=	O
accumulate_word	(*(struct(enum(int,int,int,int,int,int),*(struct(int,int,*`)),int)),enum(int,int,int,int),struct(int,int,int,int,int,int))->(int)
(	O
wp	*(struct(enum(int,int,int,int,int,int),*(struct(int,int,*(char))),int))
,	O
looking_for	int
==	O
']'	O
?	O
te_space_separator_bracket	int
:	O
te_space_separator	int
,	O
context	struct(int,int,int,int,int,int)
)	O
;	O
if	O
(	O
c	int
!=	O
EOF	O
)	O
phase2_ungetc	(int)->(void)
(	O
c	int
)	O
;	O
}	O
if	O
(	O
wp	*(struct(enum(int,int,int,int,int,int),*(struct(int,int,*(char))),int))
->	O
type	char
!=	O
t_string	int
)	O
{	O
free_token	(*(struct(int,int,*(char))))->(void)
(	O
wp	*(struct(enum(int,int,int,int,int,int),*(struct(int,int,*(char))),int))
->	O
token	struct(int,int,*(char))
)	O
;	O
free	(*(void))->(void)
(	O
wp	*(struct(enum(int,int,int,int,int,int),*(struct(int,int,*(char))),int))
->	O
token	struct(int,int,*(char))
)	O
;	O
}	O
last_non_comment_line	int
=	O
line_number	long
;	O
}	O
static	O
enum	O
word_type	enum(int,int,int,int,int,int)
read_command	(int,struct(int,int,int,int,int,int))->(enum(int,int,int,int,int,int))
(	O
int	O
looking_for	int
,	O
flag_context_ty	struct
outer_context	struct(int,int,int,int,int,int)
)	O
{	O
int	O
c	int
;	O
for	O
(	O
;	O
;	O
)	O
{	O
c	int
=	O
phase2_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
c	int
==	O
' '	O
||	O
c	int
==	O
BS_NL	O
||	O
c	int
==	O
'\t'	O
||	O
c	int
==	O
'\v'	O
||	O
c	int
==	O
'\f'	O
||	O
c	int
==	O
'\r'	O
)	O
continue	O
;	O
if	O
(	O
c	int
==	O
'#'	O
)	O
{	O
last_comment_line	int
=	O
line_number	long
;	O
comment_start	()->(void)
(	O
)	O
;	O
for	O
(	O
;	O
;	O
)	O
{	O
c	int
=	O
phase2_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
c	int
==	O
EOF	O
||	O
c	int
==	O
CL_BRACE	O
||	O
c	int
==	O
'\n'	O
)	O
break	O
;	O
if	O
(	O
!	O
(	O
buflen	long
==	O
0	int
&&	O
(	O
c	int
==	O
' '	O
||	O
c	int
==	O
'\t'	O
)	O
)	O
)	O
comment_add	(int)->(void)
(	O
c	int
)	O
;	O
}	O
comment_line_end	()->(void)
(	O
)	O
;	O
continue	O
;	O
}	O
break	O
;	O
}	O
phase2_ungetc	(int)->(void)
(	O
c	int
)	O
;	O
{	O
int	O
arg	int
=	O
0	int
;	O
flag_context_list_iterator_ty	struct
context_iter	struct(int,*(struct(int,struct(int,int,int,int,int,int),*(struct(int,struct`,*`)))))
;	O
const	O
struct	O
callshapes	struct(*(char),long,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long))))
*	O
shapes	array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long)))
=	O
NULL	O
;	O
struct	O
arglist_parser	struct(*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int)))),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long))))
*	O
argparser	*(struct(*(struct(*(*`),long,long,bool,struct(long,long,*`,*`,struct`))),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long)))))
=	O
NULL	O
;	O
for	O
(	O
;	O
;	O
arg	int
++	O
)	O
{	O
struct	O
word	struct(enum(int,int,int,int,int,int),*(struct(int,int,*(char))),int)
inner	struct(enum(int,int,int,int,int,int),*(struct(int,int,*(char))),int)
;	O
flag_context_ty	struct
inner_context	struct(int,int,int,int,int,int)
;	O
if	O
(	O
arg	int
==	O
0	int
)	O
inner_context	struct(int,int,int,int,int,int)
=	O
null_context	struct(int,int,int,int,int,int)
;	O
else	O
inner_context	struct(int,int,int,int,int,int)
=	O
inherited_context	(struct(int,int,int,int,int,int),struct(int,int,int,int,int,int))->(struct(int,int,int,int,int,int))
(	O
outer_context	struct(int,int,int,int,int,int)
,	O
flag_context_list_iterator_advance	(*(struct(int,*(struct(int,struct`,*`)))))->(struct(int,int,int,int,int,int))
(	O
&	O
context_iter	struct(int,*(struct(int,struct(int,int,int,int,int,int),*(struct(int,struct`,*`)))))
)	O
)	O
;	O
read_word	(*(struct(enum(int,int,int,int,int,int),*(struct(int,int,*`)),int)),int,struct(int,int,int,int,int,int))->(void)
(	O
&	O
inner	struct(enum(int,int,int,int,int,int),*(struct(int,int,*(char))),int)
,	O
looking_for	int
,	O
inner_context	struct(int,int,int,int,int,int)
)	O
;	O
if	O
(	O
inner	struct(enum(int,int,int,int,int,int),*(struct(int,int,*(char))),int)
.	O
type	char
==	O
t_separator	int
||	O
inner	struct(enum(int,int,int,int,int,int),*(struct(int,int,*(char))),int)
.	O
type	char
==	O
t_bracket	int
||	O
inner	struct(enum(int,int,int,int,int,int),*(struct(int,int,*(char))),int)
.	O
type	char
==	O
t_brace	int
||	O
inner	struct(enum(int,int,int,int,int,int),*(struct(int,int,*(char))),int)
.	O
type	char
==	O
t_eof	int
)	O
{	O
if	O
(	O
argparser	*(struct(*(struct(*(*`),long,long,bool,struct(long,long,*`,*`,struct`))),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long)))))
!=	O
NULL	O
)	O
arglist_parser_done	(*(struct(*(struct(*`,long,long,bool,struct`)),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long))))),int)->(void)
(	O
argparser	*(struct(*(struct(*(*`),long,long,bool,struct(long,long,*`,*`,struct`))),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long)))))
,	O
arg	int
)	O
;	O
return	O
inner	struct(enum(int,int,int,int,int,int),*(struct(int,int,*(char))),int)
.	O
type	char
;	O
}	O
if	O
(	O
extract_all	bool
)	O
{	O
if	O
(	O
inner	struct(enum(int,int,int,int,int,int),*(struct(int,int,*(char))),int)
.	O
type	char
==	O
t_string	int
)	O
{	O
lex_pos_ty	struct
pos	struct(*(char),long)
;	O
pos	struct(*(char),long)
.	O
file_name	*(char)
=	O
logical_file_name	*(char)
;	O
pos	struct(*(char),long)
.	O
line_number	long
=	O
inner	struct(enum(int,int,int,int,int,int),*(struct(int,int,*(char))),int)
.	O
line_number_at_start	int
;	O
remember_a_message	(*(struct(*(*(struct`)),long,long,bool,struct(long,long,*(struct`),*(struct`),struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int)))),*(char),*(char),bool,struct(int,int,int,int,int,int),*(struct(*(char),long)),*(char),*(struct(int,struct(*(*`),long,long))),bool)->(*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*`,long,long)),*(struct(*`,long,long)),long,*(struct(*`,long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`)),int,*(struct(*`,long,*`,*`,*`,*`)))))
(	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
,	O
NULL	O
,	O
string_of_word	(*(struct(enum(int,int,int,int,int,int),*(struct(int,int,*`)),int)))->(*(char))
(	O
&	O
inner	struct(enum(int,int,int,int,int,int),*(struct(int,int,*(char))),int)
)	O
,	O
false	int
,	O
inner_context	struct(int,int,int,int,int,int)
,	O
&	O
pos	struct(*(char),long)
,	O
NULL	O
,	O
savable_comment	*(struct(int,struct(*(*(char)),long,long)))
,	O
false	int
)	O
;	O
}	O
}	O
if	O
(	O
arg	int
==	O
0	int
)	O
{	O
if	O
(	O
inner	struct(enum(int,int,int,int,int,int),*(struct(int,int,*(char))),int)
.	O
type	char
==	O
t_string	int
)	O
{	O
char	O
*	O
function_name	*(char)
=	O
string_of_word	(*(struct(enum(int,int,int,int,int,int),*(struct(int,int,*`)),int)))->(*(char))
(	O
&	O
inner	struct(enum(int,int,int,int,int,int),*(struct(int,int,*(char))),int)
)	O
;	O
char	O
*	O
stripped_name	*(char)
;	O
void	O
*	O
keyword_value	*(void)
;	O
stripped_name	*(char)
=	O
function_name	*(char)
;	O
if	O
(	O
function_name	*(char)
[	O
0	int
]	O
==	O
':'	O
&&	O
function_name	*(char)
[	O
1	int
]	O
==	O
':'	O
)	O
stripped_name	*(char)
+=	O
2	int
;	O
if	O
(	O
hash_find_entry	(*(struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))),*(void),long,*(*(void)))->(int)
(	O
&	O
keywords	struct(long,long,*(struct),*(struct),struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),long,union(*((long)->(*`)),*((*`,long)->(*`))),union(*((*`)->(void)),*((*`,*`)->(void))),*(void),int,int,int))
,	O
stripped_name	*(char)
,	O
strlen	(*(char))->(long)
(	O
stripped_name	*(char)
)	O
,	O
&	O
keyword_value	*(void)
)	O
==	O
0	int
)	O
shapes	array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long)))
=	O
(	O
const	O
struct	O
callshapes	struct(*(char),long,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long))))
*	O
)	O
keyword_value	*(void)
;	O
argparser	*(struct(*(struct(*(*`),long,long,bool,struct(long,long,*`,*`,struct`))),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long)))))
=	O
arglist_parser_alloc	(*(struct(*(*(struct`)),long,long,bool,struct(long,long,*(struct`),*(struct`),struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int)))),*(struct(*(char),long,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long))))))->(*(struct(*(struct(*`,long,long,bool,struct`)),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long))))))
(	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
,	O
shapes	array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long)))
)	O
;	O
context_iter	struct(int,*(struct(int,struct(int,int,int,int,int,int),*(struct(int,struct`,*`)))))
=	O
flag_context_list_iterator	(*(struct(int,struct(int,int,int,int,int,int),*(struct(int,struct`,*`)))))->(struct(int,*(struct(int,struct(int,int,int,int,int,int),*(struct`)))))
(	O
flag_context_list_table_lookup	(*(struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))),*(void),long)->(*(struct(int,struct(int,int,int,int,int,int),*(struct(int,struct`,*`)))))
(	O
flag_context_list_table	*(struct(long,long,*(struct),*(struct),struct(long,*(struct(*`,*`,array(char))),*(char),*(char),*(char),union(long,*(void)),long,union(*((long)->(*`)),*((*`,long)->(*`))),union(*((*`)->(void)),*((*`,*`)->(void))),*(void),int,int,int)))
,	O
stripped_name	*(char)
,	O
strlen	(*(char))->(long)
(	O
stripped_name	*(char)
)	O
)	O
)	O
;	O
free	(*(void))->(void)
(	O
function_name	*(char)
)	O
;	O
}	O
else	O
context_iter	struct(int,*(struct(int,struct(int,int,int,int,int,int),*(struct(int,struct`,*`)))))
=	O
null_context_list_iterator	struct(int,*(struct(int,struct(int,int,int,int,int,int),*(struct(int,struct`,*`)))))
;	O
}	O
else	O
{	O
if	O
(	O
argparser	*(struct(*(struct(*(*`),long,long,bool,struct(long,long,*`,*`,struct`))),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long)))))
!=	O
NULL	O
&&	O
inner	struct(enum(int,int,int,int,int,int),*(struct(int,int,*(char))),int)
.	O
type	char
==	O
t_string	int
)	O
{	O
char	O
*	O
s	*(char)
=	O
string_of_word	(*(struct(enum(int,int,int,int,int,int),*(struct(int,int,*`)),int)))->(*(char))
(	O
&	O
inner	struct(enum(int,int,int,int,int,int),*(struct(int,int,*(char))),int)
)	O
;	O
mixed_string_ty	struct
*	O
ms	*(struct(*(*(struct(char,long,array(char)))),long,enum(int,int,int,int,int,int),*(char),int))
=	O
mixed_string_alloc_simple	(*(char),enum(int,int,int,int,int,int),*(char),int)->(*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)))
(	O
s	*(char)
,	O
lc_string	int
,	O
logical_file_name	*(char)
,	O
inner	struct(enum(int,int,int,int,int,int),*(struct(int,int,*(char))),int)
.	O
line_number_at_start	int
)	O
;	O
free	(*(void))->(void)
(	O
s	*(char)
)	O
;	O
arglist_parser_remember	(*(struct(*(struct(*`,long,long,bool,struct`)),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long))))),int,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),*(char),long,*(struct(int,struct(*(*`),long,long))),bool)->(void)
(	O
argparser	*(struct(*(struct(*(*`),long,long,bool,struct(long,long,*`,*`,struct`))),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long)))))
,	O
arg	int
,	O
ms	*(struct(*(*(struct(char,long,array(char)))),long,enum(int,int,int,int,int,int),*(char),int))
,	O
inner_context	struct(int,int,int,int,int,int)
,	O
logical_file_name	*(char)
,	O
inner	struct(enum(int,int,int,int,int,int),*(struct(int,int,*(char))),int)
.	O
line_number_at_start	int
,	O
savable_comment	*(struct(int,struct(*(*(char)),long,long)))
,	O
false	int
)	O
;	O
}	O
}	O
free_word	(*(struct(enum(int,int,int,int,int,int),*(struct(int,int,*`)),int)))->(void)
(	O
&	O
inner	struct(enum(int,int,int,int,int,int),*(struct(int,int,*(char))),int)
)	O
;	O
}	O
}	O
}	O
static	O
enum	O
word_type	enum(int,int,int,int,int,int)
read_command_list	(int,struct(int,int,int,int,int,int))->(enum(int,int,int,int,int,int))
(	O
int	O
looking_for	int
,	O
flag_context_ty	struct
outer_context	struct(int,int,int,int,int,int)
)	O
{	O
for	O
(	O
;	O
;	O
)	O
{	O
enum	O
word_type	enum(int,int,int,int,int,int)
terminator	char
;	O
terminator	char
=	O
read_command	(int,struct(int,int,int,int,int,int))->(enum(int,int,int,int,int,int))
(	O
looking_for	int
,	O
outer_context	struct(int,int,int,int,int,int)
)	O
;	O
if	O
(	O
terminator	char
!=	O
t_separator	int
)	O
return	O
terminator	char
;	O
}	O
}	O
void	O
extract_tcl	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char),*(char),*(struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))),*(struct(*(*(struct`)),long,long,bool,*(char))))->(void)
(	O
FILE	struct
*	O
f	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
const	O
char	O
*	O
real_filename	*(char)
,	O
const	O
char	O
*	O
logical_filename	*(char)
,	O
flag_context_list_table_ty	struct(long,long,*(struct),*(struct),struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),long,union(*((long)->(*`)),*((*`,long)->(*`))),union(*((*`)->(void)),*((*`,*`)->(void))),*(void),int,int,int))
*	O
flag_table	*(struct(long,long,*(struct),*(struct),struct(long,*(struct(*`,*`,array(char))),*(char),*(char),*(char),union(long,*(void)),long,union(*((long)->(*`)),*((*`,long)->(*`))),union(*((*`)->(void)),*((*`,*`)->(void))),*(void),int,int,int)))
,	O
msgdomain_list_ty	struct
*	O
mdlp	*(struct(*(*(struct(*`,*`))),long,long,bool,*(char)))
)	O
{	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
=	O
mdlp	*(struct(*(*(struct(*`,*`))),long,long,bool,*(char)))
->	O
item	*(*(char))
[	O
0	int
]	O
->	O
messages	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
;	O
xgettext_current_source_encoding	*(char)
=	O
po_charset_utf8	*(char)
;	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
=	O
f	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
;	O
real_file_name	*(char)
=	O
real_filename	*(char)
;	O
logical_file_name	*(char)
=	O
xstrdup	(*(char))->(*(char))
(	O
logical_filename	*(char)
)	O
;	O
line_number	long
=	O
1	int
;	O
brace_depth	int
=	O
1000000	int
;	O
last_comment_line	int
=	O
-	O
1	int
;	O
last_non_comment_line	int
=	O
-	O
1	int
;	O
flag_context_list_table	*(struct(long,long,*(struct),*(struct),struct(long,*(struct(*`,*`,array(char))),*(char),*(char),*(char),union(long,*(void)),long,union(*((long)->(*`)),*((*`,long)->(*`))),union(*((*`)->(void)),*((*`,*`)->(void))),*(void),int,int,int)))
=	O
flag_table	*(struct(long,long,*(struct),*(struct),struct(long,*(struct(*`,*`,array(char))),*(char),*(char),*(char),union(long,*(void)),long,union(*((long)->(*`)),*((*`,long)->(*`))),union(*((*`)->(void)),*((*`,*`)->(void))),*(void),int,int,int)))
;	O
init_keywords	()->(void)
(	O
)	O
;	O
read_command_list	(int,struct(int,int,int,int,int,int))->(enum(int,int,int,int,int,int))
(	O
'\0'	O
,	O
null_context	struct(int,int,int,int,int,int)
)	O
;	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
=	O
NULL	O
;	O
real_file_name	*(char)
=	O
NULL	O
;	O
logical_file_name	*(char)
=	O
NULL	O
;	O
line_number	long
=	O
0	int
;	O
}	O
