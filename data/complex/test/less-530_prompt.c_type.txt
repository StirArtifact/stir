extern	O
int	O
pr_type	int
;	O
extern	O
int	O
new_file	int
;	O
extern	O
int	O
sc_width	int
;	O
extern	O
int	O
so_s_width	int
,	O
so_e_width	int
;	O
extern	O
int	O
linenums	int
;	O
extern	O
int	O
hshift	int
;	O
extern	O
int	O
sc_height	int
;	O
extern	O
int	O
jump_sline	int
;	O
extern	O
int	O
less_is_more	int
;	O
extern	O
IFILE	O
curr_ifile	*(void)
;	O
extern	O
char	O
*	O
editor	*(char)
;	O
extern	O
char	O
*	O
editproto	*(char)
;	O
static	O
constant	O
char	O
s_proto	array(char)
[	O
]	O
=	O
"?n?f%f .?m(%T %i of %m) ..?e(END) ?x- Next\\: %x..%t"	*(char)
;	O
static	O
constant	O
char	O
m_proto	array(char)
[	O
]	O
=	O
"?n?f%f .?m(%T %i of %m) ..?e(END) ?x- Next\\: %x.:?pB%pB\\%:byte %bB?s/%s...%t"	*(char)
;	O
static	O
constant	O
char	O
M_proto	array(char)
[	O
]	O
=	O
"?f%f .?n?m(%T %i of %m) ..?ltlines %lt-%lb?L/%L. :byte %bB?s/%s. .?e(END) ?x- Next\\: %x.:?pB%pB\\%..%t"	*(char)
;	O
static	O
constant	O
char	O
e_proto	array(char)
[	O
]	O
=	O
"?f%f .?m(%T %i of %m) .?ltlines %lt-%lb?L/%L. .byte %bB?s/%s. ?e(END) :?pB%pB\\%..%t"	*(char)
;	O
static	O
constant	O
char	O
h_proto	array(char)
[	O
]	O
=	O
"HELP -- ?eEND -- Press g to see it again:Press RETURN for more., or q when done"	*(char)
;	O
static	O
constant	O
char	O
w_proto	array(char)
[	O
]	O
=	O
"Waiting for data"	*(char)
;	O
static	O
constant	O
char	O
more_proto	array(char)
[	O
]	O
=	O
"--More--(?eEND ?x- Next\\: %x.:?pB%pB\\%:byte %bB?s/%s...%t)"	*(char)
;	O
public	O
char	O
*	O
prproto	array(*(char))
[	O
3	int
]	O
;	O
public	O
char	O
constant	O
*	O
eqproto	*(char)
=	O
e_proto	array(char)
;	O
public	O
char	O
constant	O
*	O
hproto	*(char)
=	O
h_proto	array(char)
;	O
public	O
char	O
constant	O
*	O
wproto	*(char)
=	O
w_proto	array(char)
;	O
static	O
char	O
message	array(char)
[	O
PROMPT_SIZE	int
]	O
;	O
static	O
char	O
*	O
mp	*(char)
;	O
public	O
void	O
init_prompt	()->(void)
(	O
)	O
{	O
prproto	array(*(char))
[	O
0	int
]	O
=	O
save	(*(char))->(*(char))
(	O
s_proto	array(char)
)	O
;	O
prproto	array(*(char))
[	O
1	int
]	O
=	O
save	(*(char))->(*(char))
(	O
less_is_more	int
?	O
more_proto	array(char)
:	O
m_proto	array(char)
)	O
;	O
prproto	array(*(char))
[	O
2	int
]	O
=	O
save	(*(char))->(*(char))
(	O
M_proto	array(char)
)	O
;	O
eqproto	*(char)
=	O
save	(*(char))->(*(char))
(	O
e_proto	array(char)
)	O
;	O
hproto	*(char)
=	O
save	(*(char))->(*(char))
(	O
h_proto	array(char)
)	O
;	O
wproto	*(char)
=	O
save	(*(char))->(*(char))
(	O
w_proto	array(char)
)	O
;	O
}	O
static	O
void	O
ap_str	(*(char))->(void)
(	O
s	*(char)
)	O
char	O
*	O
s	*(char)
;	O
{	O
int	O
len	int
;	O
len	int
=	O
(	O
int	O
)	O
strlen	(*(char))->(long)
(	O
s	*(char)
)	O
;	O
if	O
(	O
mp	*(char)
+	O
len	int
>=	O
message	array(char)
+	O
PROMPT_SIZE	int
)	O
len	int
=	O
(	O
int	O
)	O
(	O
message	array(char)
+	O
PROMPT_SIZE	int
-	O
mp	*(char)
-	O
1	int
)	O
;	O
strncpy	(*(char),*(char),long)->(*(char))
(	O
mp	*(char)
,	O
s	*(char)
,	O
len	int
)	O
;	O
mp	*(char)
+=	O
len	int
;	O
*	O
mp	*(char)
=	O
'\0'	O
;	O
}	O
static	O
void	O
ap_char	(int)->(void)
(	O
c	int
)	O
char	O
c	int
;	O
{	O
char	O
buf	*(char)
[	O
2	int
]	O
;	O
buf	*(char)
[	O
0	int
]	O
=	O
c	int
;	O
buf	*(char)
[	O
1	int
]	O
=	O
'\0'	O
;	O
ap_str	(*(char))->(void)
(	O
buf	*(char)
)	O
;	O
}	O
static	O
void	O
ap_pos	(long)->(void)
(	O
pos	long
)	O
POSITION	long
pos	long
;	O
{	O
char	O
buf	*(char)
[	O
INT_STRLEN_BOUND	O
(	O
pos	long
)	O
+	O
2	int
]	O
;	O
postoa	(long,*(char))->(void)
(	O
pos	long
,	O
buf	*(char)
)	O
;	O
ap_str	(*(char))->(void)
(	O
buf	*(char)
)	O
;	O
}	O
static	O
void	O
ap_linenum	(long)->(void)
(	O
linenum	long
)	O
LINENUM	long
linenum	long
;	O
{	O
char	O
buf	*(char)
[	O
INT_STRLEN_BOUND	O
(	O
linenum	long
)	O
+	O
2	int
]	O
;	O
linenumtoa	(long,*(char))->(void)
(	O
linenum	long
,	O
buf	*(char)
)	O
;	O
ap_str	(*(char))->(void)
(	O
buf	*(char)
)	O
;	O
}	O
static	O
void	O
ap_int	(int)->(void)
(	O
num	long
)	O
int	O
num	long
;	O
{	O
char	O
buf	*(char)
[	O
INT_STRLEN_BOUND	O
(	O
num	long
)	O
+	O
2	int
]	O
;	O
inttoa	(int,*(char))->(void)
(	O
num	long
,	O
buf	*(char)
)	O
;	O
ap_str	(*(char))->(void)
(	O
buf	*(char)
)	O
;	O
}	O
static	O
void	O
ap_quest	()->(void)
(	O
)	O
{	O
ap_str	(*(char))->(void)
(	O
"?"	*(char)
)	O
;	O
}	O
static	O
POSITION	long
curr_byte	(int)->(long)
(	O
where	int
)	O
int	O
where	int
;	O
{	O
POSITION	long
pos	long
;	O
pos	long
=	O
position	(int)->(long)
(	O
where	int
)	O
;	O
while	O
(	O
pos	long
==	O
NULL_POSITION	O
&&	O
where	int
>=	O
0	int
&&	O
where	int
<	O
sc_height	int
-	O
1	int
)	O
pos	long
=	O
position	(int)->(long)
(	O
++	O
where	int
)	O
;	O
if	O
(	O
pos	long
==	O
NULL_POSITION	O
)	O
pos	long
=	O
ch_length	()->(long)
(	O
)	O
;	O
return	O
(	O
pos	long
)	O
;	O
}	O
static	O
int	O
cond	(int,int)->(int)
(	O
c	int
,	O
where	int
)	O
char	O
c	int
;	O
int	O
where	int
;	O
{	O
POSITION	long
len	int
;	O
switch	O
(	O
c	int
)	O
{	O
case	O
'a'	O
:	O
return	O
(	O
mp	*(char)
>	O
message	array(char)
)	O
;	O
case	O
'b'	O
:	O
return	O
(	O
curr_byte	(int)->(long)
(	O
where	int
)	O
!=	O
NULL_POSITION	O
)	O
;	O
case	O
'c'	O
:	O
return	O
(	O
hshift	int
!=	O
0	int
)	O
;	O
case	O
'e'	O
:	O
return	O
(	O
eof_displayed	()->(int)
(	O
)	O
)	O
;	O
case	O
'f'	O
:	O
return	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
get_filename	(*(void))->(*(char))
(	O
curr_ifile	*(void)
)	O
,	O
"-"	*(char)
)	O
!=	O
0	int
)	O
;	O
case	O
'l'	O
:	O
case	O
'd'	O
:	O
return	O
(	O
linenums	int
)	O
;	O
case	O
'L'	O
:	O
case	O
'D'	O
:	O
return	O
(	O
linenums	int
&&	O
ch_length	()->(long)
(	O
)	O
!=	O
NULL_POSITION	O
)	O
;	O
case	O
'm'	O
:	O
return	O
(	O
ntags	()->(int)
(	O
)	O
?	O
(	O
ntags	()->(int)
(	O
)	O
>	O
1	int
)	O
:	O
(	O
nifile	()->(int)
(	O
)	O
>	O
1	int
)	O
)	O
;	O
case	O
'n'	O
:	O
return	O
(	O
ntags	()->(int)
(	O
)	O
?	O
1	int
:	O
new_file	int
)	O
;	O
case	O
'p'	O
:	O
return	O
(	O
curr_byte	(int)->(long)
(	O
where	int
)	O
!=	O
NULL_POSITION	O
&&	O
ch_length	()->(long)
(	O
)	O
>	O
0	int
)	O
;	O
case	O
'P'	O
:	O
return	O
(	O
currline	(int)->(long)
(	O
where	int
)	O
!=	O
0	int
&&	O
(	O
len	int
=	O
ch_length	()->(long)
(	O
)	O
)	O
>	O
0	int
&&	O
find_linenum	(long)->(long)
(	O
len	int
)	O
!=	O
0	int
)	O
;	O
case	O
's'	O
:	O
case	O
'B'	O
:	O
return	O
(	O
ch_length	()->(long)
(	O
)	O
!=	O
NULL_POSITION	O
)	O
;	O
case	O
'x'	O
:	O
if	O
(	O
ntags	()->(int)
(	O
)	O
)	O
return	O
(	O
0	int
)	O
;	O
return	O
(	O
next_ifile	(*(void))->(*(void))
(	O
curr_ifile	*(void)
)	O
!=	O
NULL_IFILE	O
)	O
;	O
}	O
return	O
(	O
0	int
)	O
;	O
}	O
static	O
void	O
protochar	(int,int,int)->(void)
(	O
c	int
,	O
where	int
,	O
iseditproto	int
)	O
int	O
c	int
;	O
int	O
where	int
;	O
int	O
iseditproto	int
;	O
{	O
POSITION	long
pos	long
;	O
POSITION	long
len	int
;	O
int	O
n	int
;	O
LINENUM	long
linenum	long
;	O
LINENUM	long
last_linenum	long
;	O
IFILE	O
h	*(void)
;	O
switch	O
(	O
c	int
)	O
{	O
case	O
'b'	O
:	O
pos	long
=	O
curr_byte	(int)->(long)
(	O
where	int
)	O
;	O
if	O
(	O
pos	long
!=	O
NULL_POSITION	O
)	O
ap_pos	(long)->(void)
(	O
pos	long
)	O
;	O
else	O
ap_quest	()->(void)
(	O
)	O
;	O
break	O
;	O
case	O
'c'	O
:	O
ap_int	(int)->(void)
(	O
hshift	int
)	O
;	O
break	O
;	O
case	O
'd'	O
:	O
linenum	long
=	O
currline	(int)->(long)
(	O
where	int
)	O
;	O
if	O
(	O
linenum	long
>	O
0	int
&&	O
sc_height	int
>	O
1	int
)	O
ap_linenum	(long)->(void)
(	O
PAGE_NUM	O
(	O
linenum	long
)	O
)	O
;	O
else	O
ap_quest	()->(void)
(	O
)	O
;	O
break	O
;	O
case	O
'D'	O
:	O
len	int
=	O
ch_length	()->(long)
(	O
)	O
;	O
if	O
(	O
len	int
==	O
NULL_POSITION	O
)	O
ap_quest	()->(void)
(	O
)	O
;	O
else	O
if	O
(	O
len	int
==	O
0	int
)	O
ap_linenum	(long)->(void)
(	O
0	int
)	O
;	O
else	O
{	O
linenum	long
=	O
find_linenum	(long)->(long)
(	O
len	int
-	O
1	int
)	O
;	O
if	O
(	O
linenum	long
<=	O
0	int
)	O
ap_quest	()->(void)
(	O
)	O
;	O
else	O
ap_linenum	(long)->(void)
(	O
PAGE_NUM	O
(	O
linenum	long
)	O
)	O
;	O
}	O
break	O
;	O
case	O
'E'	O
:	O
ap_str	(*(char))->(void)
(	O
editor	*(char)
)	O
;	O
break	O
;	O
case	O
'f'	O
:	O
ap_str	(*(char))->(void)
(	O
get_filename	(*(void))->(*(char))
(	O
curr_ifile	*(void)
)	O
)	O
;	O
break	O
;	O
case	O
'F'	O
:	O
ap_str	(*(char))->(void)
(	O
last_component	(*(char))->(*(char))
(	O
get_filename	(*(void))->(*(char))
(	O
curr_ifile	*(void)
)	O
)	O
)	O
;	O
break	O
;	O
case	O
'i'	O
:	O
if	O
(	O
ntags	()->(int)
(	O
)	O
)	O
ap_int	(int)->(void)
(	O
curr_tag	()->(int)
(	O
)	O
)	O
;	O
else	O
ap_int	(int)->(void)
(	O
get_index	(*(void))->(int)
(	O
curr_ifile	*(void)
)	O
)	O
;	O
break	O
;	O
case	O
'l'	O
:	O
linenum	long
=	O
currline	(int)->(long)
(	O
where	int
)	O
;	O
if	O
(	O
linenum	long
!=	O
0	int
)	O
ap_linenum	(long)->(void)
(	O
linenum	long
)	O
;	O
else	O
ap_quest	()->(void)
(	O
)	O
;	O
break	O
;	O
case	O
'L'	O
:	O
len	int
=	O
ch_length	()->(long)
(	O
)	O
;	O
if	O
(	O
len	int
==	O
NULL_POSITION	O
||	O
len	int
==	O
ch_zero	O
(	O
)	O
||	O
(	O
linenum	long
=	O
find_linenum	(long)->(long)
(	O
len	int
)	O
)	O
<=	O
0	int
)	O
ap_quest	()->(void)
(	O
)	O
;	O
else	O
ap_linenum	(long)->(void)
(	O
linenum	long
-	O
1	int
)	O
;	O
break	O
;	O
case	O
'm'	O
:	O
n	int
=	O
ntags	()->(int)
(	O
)	O
;	O
if	O
(	O
n	int
)	O
ap_int	(int)->(void)
(	O
n	int
)	O
;	O
else	O
ap_int	(int)->(void)
(	O
nifile	()->(int)
(	O
)	O
)	O
;	O
break	O
;	O
case	O
'p'	O
:	O
pos	long
=	O
curr_byte	(int)->(long)
(	O
where	int
)	O
;	O
len	int
=	O
ch_length	()->(long)
(	O
)	O
;	O
if	O
(	O
pos	long
!=	O
NULL_POSITION	O
&&	O
len	int
>	O
0	int
)	O
ap_int	(int)->(void)
(	O
percentage	(long,long)->(int)
(	O
pos	long
,	O
len	int
)	O
)	O
;	O
else	O
ap_quest	()->(void)
(	O
)	O
;	O
break	O
;	O
case	O
'P'	O
:	O
linenum	long
=	O
currline	(int)->(long)
(	O
where	int
)	O
;	O
if	O
(	O
linenum	long
==	O
0	int
||	O
(	O
len	int
=	O
ch_length	()->(long)
(	O
)	O
)	O
==	O
NULL_POSITION	O
||	O
len	int
==	O
ch_zero	O
(	O
)	O
||	O
(	O
last_linenum	long
=	O
find_linenum	(long)->(long)
(	O
len	int
)	O
)	O
<=	O
0	int
)	O
ap_quest	()->(void)
(	O
)	O
;	O
else	O
ap_int	(int)->(void)
(	O
percentage	(long,long)->(int)
(	O
linenum	long
,	O
last_linenum	long
)	O
)	O
;	O
break	O
;	O
case	O
's'	O
:	O
case	O
'B'	O
:	O
len	int
=	O
ch_length	()->(long)
(	O
)	O
;	O
if	O
(	O
len	int
!=	O
NULL_POSITION	O
)	O
ap_pos	(long)->(void)
(	O
len	int
)	O
;	O
else	O
ap_quest	()->(void)
(	O
)	O
;	O
break	O
;	O
case	O
't'	O
:	O
while	O
(	O
mp	*(char)
>	O
message	array(char)
&&	O
mp	*(char)
[	O
-	O
1	int
]	O
==	O
' '	O
)	O
mp	*(char)
--	O
;	O
*	O
mp	*(char)
=	O
'\0'	O
;	O
break	O
;	O
case	O
'T'	O
:	O
if	O
(	O
ntags	()->(int)
(	O
)	O
)	O
ap_str	(*(char))->(void)
(	O
"tag"	*(char)
)	O
;	O
else	O
ap_str	(*(char))->(void)
(	O
"file"	*(char)
)	O
;	O
break	O
;	O
case	O
'x'	O
:	O
h	*(void)
=	O
next_ifile	(*(void))->(*(void))
(	O
curr_ifile	*(void)
)	O
;	O
if	O
(	O
h	*(void)
!=	O
NULL_IFILE	O
)	O
ap_str	(*(char))->(void)
(	O
get_filename	(*(void))->(*(char))
(	O
h	*(void)
)	O
)	O
;	O
else	O
ap_quest	()->(void)
(	O
)	O
;	O
break	O
;	O
}	O
}	O
static	O
constant	O
char	O
*	O
skipcond	(*(char))->(*(char))
(	O
p	*(char)
)	O
constant	O
char	O
*	O
p	*(char)
;	O
{	O
int	O
iflevel	int
;	O
iflevel	int
=	O
1	int
;	O
for	O
(	O
;	O
;	O
)	O
switch	O
(	O
*	O
++	O
p	*(char)
)	O
{	O
case	O
'?'	O
:	O
iflevel	int
++	O
;	O
break	O
;	O
case	O
':'	O
:	O
if	O
(	O
iflevel	int
==	O
1	int
)	O
return	O
(	O
p	*(char)
)	O
;	O
break	O
;	O
case	O
'.'	O
:	O
if	O
(	O
--	O
iflevel	int
==	O
0	int
)	O
return	O
(	O
p	*(char)
)	O
;	O
break	O
;	O
case	O
'\\'	O
:	O
++	O
p	*(char)
;	O
break	O
;	O
case	O
'\0'	O
:	O
return	O
(	O
p	*(char)
-	O
1	int
)	O
;	O
}	O
}	O
static	O
constant	O
char	O
*	O
wherechar	(*(char),*(int))->(*(char))
(	O
p	*(char)
,	O
wp	*(int)
)	O
char	O
constant	O
*	O
p	*(char)
;	O
int	O
*	O
wp	*(int)
;	O
{	O
switch	O
(	O
*	O
p	*(char)
)	O
{	O
case	O
'b'	O
:	O
case	O
'd'	O
:	O
case	O
'l'	O
:	O
case	O
'p'	O
:	O
case	O
'P'	O
:	O
switch	O
(	O
*	O
++	O
p	*(char)
)	O
{	O
case	O
't'	O
:	O
*	O
wp	*(int)
=	O
TOP	O
;	O
break	O
;	O
case	O
'm'	O
:	O
*	O
wp	*(int)
=	O
MIDDLE	O
;	O
break	O
;	O
case	O
'b'	O
:	O
*	O
wp	*(int)
=	O
BOTTOM	O
;	O
break	O
;	O
case	O
'B'	O
:	O
*	O
wp	*(int)
=	O
BOTTOM_PLUS_ONE	O
;	O
break	O
;	O
case	O
'j'	O
:	O
*	O
wp	*(int)
=	O
sindex_from_sline	(int)->(int)
(	O
jump_sline	int
)	O
;	O
break	O
;	O
default	O
:	O
*	O
wp	*(int)
=	O
TOP	O
;	O
p	*(char)
--	O
;	O
break	O
;	O
}	O
}	O
return	O
(	O
p	*(char)
)	O
;	O
}	O
public	O
char	O
*	O
pr_expand	(*(char),int)->(*(char))
(	O
proto	*(char)
,	O
maxwidth	int
)	O
constant	O
char	O
*	O
proto	*(char)
;	O
int	O
maxwidth	int
;	O
{	O
constant	O
char	O
*	O
p	*(char)
;	O
int	O
c	int
;	O
int	O
where	int
;	O
mp	*(char)
=	O
message	array(char)
;	O
if	O
(	O
*	O
proto	*(char)
==	O
'\0'	O
)	O
return	O
(	O
""	*(char)
)	O
;	O
for	O
(	O
p	*(char)
=	O
proto	*(char)
;	O
*	O
p	*(char)
!=	O
'\0'	O
;	O
p	*(char)
++	O
)	O
{	O
switch	O
(	O
*	O
p	*(char)
)	O
{	O
default	O
:	O
ap_char	(int)->(void)
(	O
*	O
p	*(char)
)	O
;	O
break	O
;	O
case	O
'\\'	O
:	O
p	*(char)
++	O
;	O
ap_char	(int)->(void)
(	O
*	O
p	*(char)
)	O
;	O
break	O
;	O
case	O
'?'	O
:	O
if	O
(	O
(	O
c	int
=	O
*	O
++	O
p	*(char)
)	O
==	O
'\0'	O
)	O
--	O
p	*(char)
;	O
else	O
{	O
where	int
=	O
0	int
;	O
p	*(char)
=	O
wherechar	(*(char),*(int))->(*(char))
(	O
p	*(char)
,	O
&	O
where	int
)	O
;	O
if	O
(	O
!	O
cond	(int,int)->(int)
(	O
c	int
,	O
where	int
)	O
)	O
p	*(char)
=	O
skipcond	(*(char))->(*(char))
(	O
p	*(char)
)	O
;	O
}	O
break	O
;	O
case	O
':'	O
:	O
p	*(char)
=	O
skipcond	(*(char))->(*(char))
(	O
p	*(char)
)	O
;	O
break	O
;	O
case	O
'.'	O
:	O
break	O
;	O
case	O
'%'	O
:	O
if	O
(	O
(	O
c	int
=	O
*	O
++	O
p	*(char)
)	O
==	O
'\0'	O
)	O
--	O
p	*(char)
;	O
else	O
{	O
where	int
=	O
0	int
;	O
p	*(char)
=	O
wherechar	(*(char),*(int))->(*(char))
(	O
p	*(char)
,	O
&	O
where	int
)	O
;	O
protochar	(int,int,int)->(void)
(	O
c	int
,	O
where	int
,	O
(	O
proto	*(char)
==	O
editproto	*(char)
)	O
)	O
;	O
}	O
break	O
;	O
}	O
}	O
if	O
(	O
mp	*(char)
==	O
message	array(char)
)	O
return	O
(	O
""	*(char)
)	O
;	O
if	O
(	O
maxwidth	int
>	O
0	int
&&	O
mp	*(char)
>=	O
message	array(char)
+	O
maxwidth	int
)	O
{	O
return	O
(	O
mp	*(char)
-	O
maxwidth	int
)	O
;	O
}	O
return	O
(	O
message	array(char)
)	O
;	O
}	O
public	O
char	O
*	O
eq_message	()->(*(char))
(	O
)	O
{	O
return	O
(	O
pr_expand	(*(char),int)->(*(char))
(	O
eqproto	*(char)
,	O
0	int
)	O
)	O
;	O
}	O
public	O
char	O
*	O
pr_string	()->(*(char))
(	O
)	O
{	O
char	O
*	O
prompt	*(char)
;	O
int	O
type	int
;	O
type	int
=	O
(	O
!	O
less_is_more	int
)	O
?	O
pr_type	int
:	O
pr_type	int
?	O
0	int
:	O
1	int
;	O
prompt	*(char)
=	O
pr_expand	(*(char),int)->(*(char))
(	O
(	O
ch_getflags	()->(int)
(	O
)	O
&	O
CH_HELPFILE	int
)	O
?	O
hproto	*(char)
:	O
prproto	array(*(char))
[	O
type	int
]	O
,	O
sc_width	int
-	O
so_s_width	int
-	O
so_e_width	int
-	O
2	int
)	O
;	O
new_file	int
=	O
0	int
;	O
return	O
(	O
prompt	*(char)
)	O
;	O
}	O
public	O
char	O
*	O
wait_message	()->(*(char))
(	O
)	O
{	O
return	O
(	O
pr_expand	(*(char),int)->(*(char))
(	O
wproto	*(char)
,	O
sc_width	int
-	O
so_s_width	int
-	O
so_e_width	int
-	O
2	int
)	O
)	O
;	O
}	O
