char	O
*	O
show_field	*(char)
;	O
int	O
show_to	int
;	O
int	O
show_number	int
;	O
int	O
frm_debug	int
;	O
int	O
util_getcols	()->(int)
(	O
void	O
)	O
{	O
struct	O
winsize	struct(short,short,short,short)
ws	struct(short,short,short,short)
;	O
ws	struct(short,short,short,short)
.	O
ws_col	short
=	O
ws	struct(short,short,short,short)
.	O
ws_row	short
=	O
0	int
;	O
if	O
(	O
ioctl	(int,long)->(int)
(	O
1	int
,	O
TIOCGWINSZ	int
,	O
(	O
char	O
*	O
)	O
&	O
ws	struct(short,short,short,short)
)	O
<	O
0	int
)	O
{	O
int	O
fd	int
=	O
open	(*(char),int)->(int)
(	O
"/dev/tty"	*(char)
,	O
O_RDWR	int
)	O
;	O
ioctl	(int,long)->(int)
(	O
fd	int
,	O
TIOCGWINSZ	int
,	O
(	O
char	O
*	O
)	O
&	O
ws	struct(short,short,short,short)
)	O
;	O
close	*((*(void))->(int))
(	O
fd	int
)	O
;	O
}	O
if	O
(	O
ws	struct(short,short,short,short)
.	O
ws_row	short
==	O
0	int
)	O
{	O
const	O
char	O
*	O
columns	*(char)
=	O
getenv	(*(char))->(*(char))
(	O
"COLUMNS"	*(char)
)	O
;	O
if	O
(	O
columns	*(char)
)	O
ws	struct(short,short,short,short)
.	O
ws_col	short
=	O
strtol	(*(char),*(*(char)),int)->(long)
(	O
columns	*(char)
,	O
NULL	O
,	O
10	int
)	O
;	O
}	O
return	O
ws	struct(short,short,short,short)
.	O
ws_col	short
;	O
}	O
static	O
char	O
*	O
output_charset	*(char)
=	O
NULL	O
;	O
const	O
char	O
*	O
get_charset	()->(*(char))
(	O
)	O
{	O
if	O
(	O
!	O
output_charset	*(char)
)	O
{	O
char	O
*	O
tmp	*(char)
;	O
tmp	*(char)
=	O
getenv	(*(char))->(*(char))
(	O
"LC_ALL"	*(char)
)	O
;	O
if	O
(	O
!	O
tmp	*(char)
)	O
tmp	*(char)
=	O
getenv	(*(char))->(*(char))
(	O
"LANG"	*(char)
)	O
;	O
if	O
(	O
tmp	*(char)
)	O
{	O
struct	O
mu_lc_all	struct(int,*(char),*(char),*(char),*(char))
lc_all	struct(int,*(char),*(char),*(char),*(char))
;	O
if	O
(	O
mu_parse_lc_all	(*(char),*(struct(int,*(char),*(char),*(char),*(char))),int)->(int)
(	O
tmp	*(char)
,	O
&	O
lc_all	struct(int,*(char),*(char),*(char),*(char))
,	O
MU_LC_CSET	int
)	O
==	O
0	int
)	O
output_charset	*(char)
=	O
lc_all	struct(int,*(char),*(char),*(char),*(char))
.	O
charset	*(char)
;	O
}	O
if	O
(	O
!	O
output_charset	*(char)
)	O
output_charset	*(char)
=	O
mu_strdup	(*(char))->(*(char))
(	O
"ASCII"	*(char)
)	O
;	O
}	O
return	O
output_charset	*(char)
;	O
}	O
static	O
int	O
numfields	int
;	O
static	O
int	O
fieldwidth	array(int)
[	O
4	int
]	O
;	O
static	O
char	O
*	O
linebuf	*(char)
;	O
static	O
size_t	long
linemax	long
;	O
static	O
size_t	long
linepos	long
;	O
static	O
int	O
curfield	int
;	O
static	O
int	O
nextstart	int
;	O
static	O
int	O
curcol	int
;	O
typedef	O
void	O
(	O
*	O
fmt_formatter	*((*(char))->(void))
)	O
(	O
const	O
char	O
*	O
fmt	*(char)
,	O
...	O
)	O
;	O
static	O
fmt_formatter	*((*(char))->(void))
format_field	*((*(char))->(void))
;	O
void	O
print_line	()->(void)
(	O
)	O
{	O
if	O
(	O
linebuf	*(char)
)	O
{	O
puts_bidi	O
(	O
linebuf	*(char)
)	O
;	O
linebuf	*(char)
[	O
0	int
]	O
=	O
0	int
;	O
linepos	long
=	O
0	int
;	O
curcol	int
=	O
nextstart	int
=	O
0	int
;	O
}	O
else	O
mu_printf	(*(char))->(int)
(	O
"\n"	*(char)
)	O
;	O
curfield	int
=	O
0	int
;	O
}	O
void	O
format_field_simple	(*(char))->(void)
(	O
const	O
char	O
*	O
fmt	*(char)
,	O
...	O
)	O
{	O
va_list	array(struct(int,int,*(void),*(void)))
ap	array(struct(int,int,*(void),*(void)))
;	O
if	O
(	O
curfield	int
++	O
)	O
mu_printf	(*(char))->(int)
(	O
"\t"	*(char)
)	O
;	O
va_start	O
(	O
ap	array(struct(int,int,*(void),*(void)))
,	O
fmt	*(char)
)	O
;	O
mu_stream_vprintf	(*(struct),*(char),array(struct(int,int,*(void),*(void))))->(int)
(	O
mu_strout	*(struct)
,	O
fmt	*(char)
,	O
ap	array(struct(int,int,*(void),*(void)))
)	O
;	O
va_end	O
(	O
ap	array(struct(int,int,*(void),*(void)))
)	O
;	O
}	O
void	O
format_field_align	(*(char))->(void)
(	O
const	O
char	O
*	O
fmt	*(char)
,	O
...	O
)	O
{	O
size_t	long
n	*(long)
,	O
width	long
;	O
va_list	array(struct(int,int,*(void),*(void)))
ap	array(struct(int,int,*(void),*(void)))
;	O
va_start	O
(	O
ap	array(struct(int,int,*(void),*(void)))
,	O
fmt	*(char)
)	O
;	O
if	O
(	O
nextstart	int
!=	O
0	int
)	O
{	O
if	O
(	O
curcol	int
>=	O
nextstart	int
)	O
{	O
if	O
(	O
curfield	int
==	O
numfields	int
-	O
1	int
)	O
{	O
puts_bidi	O
(	O
linebuf	*(char)
)	O
;	O
linepos	long
=	O
0	int
;	O
mu_printf	(*(char))->(int)
(	O
"%*s"	*(char)
,	O
nextstart	int
,	O
""	*(char)
)	O
;	O
}	O
else	O
{	O
linebuf	*(char)
[	O
linepos	long
++	O
]	O
=	O
' '	O
;	O
curcol	int
++	O
;	O
}	O
}	O
else	O
if	O
(	O
nextstart	int
!=	O
curcol	int
)	O
{	O
n	*(long)
=	O
snprintf	(*(char),long,*(char))->(int)
(	O
linebuf	*(char)
+	O
linepos	long
,	O
linemax	long
-	O
linepos	long
,	O
"%*s"	*(char)
,	O
nextstart	int
-	O
curcol	int
,	O
""	*(char)
)	O
;	O
linepos	long
+=	O
n	*(long)
;	O
curcol	int
=	O
nextstart	int
;	O
}	O
}	O
n	*(long)
=	O
vsnprintf	(*(char),long,*(char),array(struct(int,int,*(void),*(void))))->(int)
(	O
linebuf	*(char)
+	O
linepos	long
,	O
linemax	long
-	O
linepos	long
,	O
fmt	*(char)
,	O
ap	array(struct(int,int,*(void),*(void)))
)	O
;	O
va_end	O
(	O
ap	array(struct(int,int,*(void),*(void)))
)	O
;	O
if	O
(	O
curfield	int
==	O
numfields	int
-	O
1	int
)	O
{	O
for	O
(	O
;	O
n	*(long)
>	O
0	int
;	O
n	*(long)
--	O
)	O
{	O
int	O
c	char
=	O
linebuf	*(char)
[	O
linepos	long
+	O
n	*(long)
]	O
;	O
linebuf	*(char)
[	O
linepos	long
+	O
n	*(long)
]	O
=	O
0	int
;	O
width	long
=	O
mbswidth	O
(	O
linebuf	*(char)
+	O
linepos	long
,	O
0	int
)	O
;	O
if	O
(	O
width	long
<=	O
fieldwidth	array(int)
[	O
curfield	int
]	O
)	O
break	O
;	O
linebuf	*(char)
[	O
linepos	long
+	O
n	*(long)
]	O
=	O
c	char
;	O
}	O
}	O
else	O
width	long
=	O
mbswidth	O
(	O
linebuf	*(char)
+	O
linepos	long
,	O
0	int
)	O
;	O
linepos	long
+=	O
n	*(long)
;	O
curcol	int
+=	O
width	long
;	O
nextstart	int
+=	O
fieldwidth	array(int)
[	O
curfield	int
++	O
]	O
;	O
}	O
void	O
init_output	(long)->(void)
(	O
size_t	long
s	*(char)
)	O
{	O
int	O
i	int
;	O
size_t	long
width	long
=	O
0	int
;	O
if	O
(	O
s	*(char)
==	O
0	int
)	O
{	O
format_field	*((*(char))->(void))
=	O
format_field_simple	(*(char))->(void)
;	O
return	O
;	O
}	O
format_field	*((*(char))->(void))
=	O
format_field_align	(*(char))->(void)
;	O
linemax	long
=	O
s	*(char)
*	O
MB_LEN_MAX	int
+	O
1	int
;	O
linebuf	*(char)
=	O
mu_alloc	(long)->(*(void))
(	O
linemax	long
)	O
;	O
alloc_logical	O
(	O
s	*(char)
)	O
;	O
if	O
(	O
show_number	int
)	O
fieldwidth	array(int)
[	O
numfields	int
++	O
]	O
=	O
5	int
;	O
if	O
(	O
show_to	int
)	O
fieldwidth	array(int)
[	O
numfields	int
++	O
]	O
=	O
20	int
;	O
if	O
(	O
show_field	*(char)
)	O
fieldwidth	array(int)
[	O
numfields	int
++	O
]	O
=	O
0	int
;	O
else	O
{	O
fieldwidth	array(int)
[	O
numfields	int
++	O
]	O
=	O
20	int
;	O
fieldwidth	array(int)
[	O
numfields	int
++	O
]	O
=	O
0	int
;	O
}	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
numfields	int
;	O
i	int
++	O
)	O
width	long
+=	O
fieldwidth	array(int)
[	O
i	int
]	O
;	O
fieldwidth	array(int)
[	O
numfields	int
-	O
1	int
]	O
=	O
util_getcols	()->(int)
(	O
)	O
-	O
width	long
;	O
}	O
static	O
char	O
*	O
rfc2047_decode_wrapper	(*(char),long)->(*(char))
(	O
const	O
char	O
*	O
buf	*(char)
,	O
size_t	long
buflen	long
)	O
{	O
int	O
rc	int
;	O
char	O
*	O
tmp	*(char)
;	O
const	O
char	O
*	O
charset	*(char)
=	O
get_charset	()->(*(char))
(	O
)	O
;	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
charset	*(char)
,	O
"ASCII"	*(char)
)	O
==	O
0	int
)	O
return	O
mu_strdup	(*(char))->(*(char))
(	O
buf	*(char)
)	O
;	O
rc	int
=	O
mu_rfc2047_decode	(*(char),*(char),*(*(char)))->(int)
(	O
charset	*(char)
,	O
buf	*(char)
,	O
&	O
tmp	*(char)
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
if	O
(	O
frm_debug	int
)	O
mu_error	(*(char))->(int)
(	O
_	O
(	O
"cannot decode line `%s': %s"	*(char)
)	O
,	O
buf	*(char)
,	O
mu_strerror	(int)->(*(char))
(	O
rc	int
)	O
)	O
;	O
return	O
mu_strdup	(*(char))->(*(char))
(	O
buf	*(char)
)	O
;	O
}	O
return	O
tmp	*(char)
;	O
}	O
static	O
int	O
get_personal	(*(struct),*(char),*(*(char)))->(int)
(	O
mu_header_t	*(struct)
hdr	*(struct)
,	O
const	O
char	O
*	O
field	*(char)
,	O
char	O
*	O
*	O
personal	*(char)
)	O
{	O
char	O
*	O
hfield	*(char)
;	O
int	O
status	int
;	O
status	int
=	O
mu_header_aget_value_unfold	O
(	O
hdr	*(struct)
,	O
field	*(char)
,	O
&	O
hfield	*(char)
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
{	O
mu_address_t	*(struct)
address	array(char)
=	O
NULL	O
;	O
const	O
char	O
*	O
s	*(char)
=	O
NULL	O
;	O
mu_address_create	(*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))),*(char))->(int)
(	O
&	O
address	array(char)
,	O
hfield	*(char)
)	O
;	O
mu_address_sget_personal	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))),long,*(*(char)))->(int)
(	O
address	array(char)
,	O
1	int
,	O
&	O
s	*(char)
)	O
;	O
if	O
(	O
s	*(char)
==	O
NULL	O
)	O
s	*(char)
=	O
hfield	*(char)
;	O
*	O
personal	*(char)
=	O
rfc2047_decode_wrapper	(*(char),long)->(*(char))
(	O
s	*(char)
,	O
strlen	(*(char))->(long)
(	O
s	*(char)
)	O
)	O
;	O
mu_address_destroy	(*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))->(void)
(	O
&	O
address	array(char)
)	O
;	O
}	O
return	O
status	int
;	O
}	O
struct	O
frm_action_closure	struct(*((long,*(struct))->(int)),long)
{	O
frm_select_t	*((long,*(struct))->(int))
select_message	*((long,*(struct))->(int))
;	O
size_t	long
msg_index	long
;	O
}	O
;	O
static	O
int	O
action	(*(struct),long,*(void),*(void))->(int)
(	O
mu_observer_t	*(struct)
o	*(struct)
,	O
size_t	long
type	enum(int,int,int,int)
,	O
void	O
*	O
data	*(void)
,	O
void	O
*	O
action_data	*(void)
)	O
{	O
int	O
status	int
;	O
struct	O
frm_action_closure	struct(*((long,*(struct))->(int)),long)
*	O
clos	*(struct(*((long,*(struct`))->(int)),long))
=	O
action_data	*(void)
;	O
switch	O
(	O
type	enum(int,int,int,int)
)	O
{	O
case	O
MU_EVT_MESSAGE_ADD	int
:	O
{	O
mu_mailbox_t	*(struct)
mbox	*(struct)
=	O
mu_observer_get_owner	(*(struct))->(*(void))
(	O
o	*(struct)
)	O
;	O
mu_message_t	*(struct)
msg	*(struct)
=	O
NULL	O
;	O
mu_header_t	*(struct)
hdr	*(struct)
=	O
NULL	O
;	O
mu_attribute_t	*(struct)
attr	*(struct)
=	O
NULL	O
;	O
clos	*(struct(*((long,*(struct`))->(int)),long))
->	O
msg_index	long
++	O
;	O
mu_mailbox_get_message	(*(struct),long,*(*(struct)))->(int)
(	O
mbox	*(struct)
,	O
clos	*(struct(*((long,*(struct`))->(int)),long))
->	O
msg_index	long
,	O
&	O
msg	*(struct)
)	O
;	O
mu_message_get_attribute	(*(struct),*(*(struct)))->(int)
(	O
msg	*(struct)
,	O
&	O
attr	*(struct)
)	O
;	O
mu_message_get_header	(*(struct),*(*(struct)))->(int)
(	O
msg	*(struct)
,	O
&	O
hdr	*(struct)
)	O
;	O
if	O
(	O
!	O
clos	*(struct(*((long,*(struct`))->(int)),long))
->	O
select_message	*((long,*(struct))->(int))
(	O
clos	*(struct(*((long,*(struct`))->(int)),long))
->	O
msg_index	long
,	O
msg	*(struct)
)	O
)	O
break	O
;	O
if	O
(	O
show_number	int
)	O
format_field	*((*(char))->(void))
(	O
"%4lu:"	*(char)
,	O
(	O
u_long	long
)	O
clos	*(struct(*((long,*(struct`))->(int)),long))
->	O
msg_index	long
)	O
;	O
if	O
(	O
show_to	int
)	O
{	O
char	O
*	O
hto	*(char)
;	O
status	int
=	O
get_personal	(*(struct),*(char),*(*(char)))->(int)
(	O
hdr	*(struct)
,	O
MU_HEADER_TO	*(char)
,	O
&	O
hto	*(char)
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
{	O
format_field	*((*(char))->(void))
(	O
"(%s)"	*(char)
,	O
hto	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
hto	*(char)
)	O
;	O
}	O
else	O
format_field	*((*(char))->(void))
(	O
"(none)"	*(char)
)	O
;	O
}	O
if	O
(	O
show_field	*(char)
)	O
{	O
char	O
*	O
hfield	*(char)
;	O
status	int
=	O
mu_header_aget_value_unfold	O
(	O
hdr	*(struct)
,	O
show_field	*(char)
,	O
&	O
hfield	*(char)
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
{	O
format_field	*((*(char))->(void))
(	O
"%s"	*(char)
,	O
hfield	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
hfield	*(char)
)	O
;	O
}	O
else	O
format_field	*((*(char))->(void))
(	O
""	*(char)
)	O
;	O
}	O
else	O
{	O
char	O
*	O
tmp	*(char)
;	O
status	int
=	O
get_personal	(*(struct),*(char),*(*(char)))->(int)
(	O
hdr	*(struct)
,	O
MU_HEADER_FROM	*(char)
,	O
&	O
tmp	*(char)
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
{	O
format_field	*((*(char))->(void))
(	O
"%s"	*(char)
,	O
tmp	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
tmp	*(char)
)	O
;	O
}	O
else	O
format_field	*((*(char))->(void))
(	O
""	*(char)
)	O
;	O
status	int
=	O
mu_header_aget_value_unfold	O
(	O
hdr	*(struct)
,	O
MU_HEADER_SUBJECT	*(char)
,	O
&	O
tmp	*(char)
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
{	O
char	O
*	O
s	*(char)
=	O
rfc2047_decode_wrapper	(*(char),long)->(*(char))
(	O
tmp	*(char)
,	O
strlen	(*(char))->(long)
(	O
tmp	*(char)
)	O
)	O
;	O
format_field	*((*(char))->(void))
(	O
"%s"	*(char)
,	O
s	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
s	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
tmp	*(char)
)	O
;	O
}	O
}	O
print_line	()->(void)
(	O
)	O
;	O
break	O
;	O
}	O
case	O
MU_EVT_MAILBOX_PROGRESS	int
:	O
break	O
;	O
}	O
return	O
0	int
;	O
}	O
static	O
void	O
frm_abort	(*(*(struct)))->(void)
(	O
mu_mailbox_t	*(struct)
*	O
mbox	*(struct)
)	O
{	O
int	O
status	int
;	O
if	O
(	O
(	O
status	int
=	O
mu_mailbox_close	(*(struct))->(int)
(	O
*	O
mbox	*(struct)
)	O
)	O
!=	O
0	int
)	O
{	O
mu_url_t	*(struct)
url	*(struct)
;	O
mu_mailbox_get_url	(*(struct),*(*(struct)))->(int)
(	O
*	O
mbox	*(struct)
,	O
&	O
url	*(struct)
)	O
;	O
mu_error	(*(char))->(int)
(	O
_	O
(	O
"could not close mailbox `%s': %s"	*(char)
)	O
,	O
mu_url_to_string	(*(struct))->(*(char))
(	O
url	*(struct)
)	O
,	O
mu_strerror	(int)->(*(char))
(	O
status	int
)	O
)	O
;	O
exit	(int)->(void)
(	O
3	int
)	O
;	O
}	O
mu_mailbox_destroy	(*(*(struct)))->(void)
(	O
mbox	*(struct)
)	O
;	O
exit	(int)->(void)
(	O
3	int
)	O
;	O
}	O
void	O
frm_scan	(*(char),*((long,*(struct))->(int)),*(long))->(void)
(	O
char	O
*	O
mailbox_name	*(char)
,	O
frm_select_t	*((long,*(struct))->(int))
fun	*((*(char),*(void))->(int))
,	O
size_t	long
*	O
total	*(long)
)	O
{	O
mu_mailbox_t	*(struct)
mbox	*(struct)
;	O
int	O
status	int
;	O
mu_url_t	*(struct)
url	*(struct)
;	O
status	int
=	O
mu_mailbox_create_default	(*(*(struct)),*(char))->(int)
(	O
&	O
mbox	*(struct)
,	O
mailbox_name	*(char)
)	O
;	O
if	O
(	O
status	int
!=	O
0	int
)	O
{	O
if	O
(	O
mailbox_name	*(char)
)	O
mu_error	(*(char))->(int)
(	O
_	O
(	O
"could not create mailbox `%s': %s"	*(char)
)	O
,	O
mailbox_name	*(char)
,	O
mu_strerror	(int)->(*(char))
(	O
status	int
)	O
)	O
;	O
else	O
mu_error	(*(char))->(int)
(	O
_	O
(	O
"could not create default mailbox: %s"	*(char)
)	O
,	O
mu_strerror	(int)->(*(char))
(	O
status	int
)	O
)	O
;	O
exit	(int)->(void)
(	O
3	int
)	O
;	O
}	O
if	O
(	O
frm_debug	int
)	O
{	O
mu_debug_set_category_level	(int,int)->(int)
(	O
MU_DEBCAT_MAILBOX	int
,	O
MU_DEBUG_LEVEL_UPTO	O
(	O
MU_DEBUG_PROT	int
)	O
)	O
;	O
}	O
mu_mailbox_get_url	(*(struct),*(*(struct)))->(int)
(	O
mbox	*(struct)
,	O
&	O
url	*(struct)
)	O
;	O
status	int
=	O
mu_mailbox_open	(*(struct),int)->(int)
(	O
mbox	*(struct)
,	O
MU_STREAM_READ	int
)	O
;	O
if	O
(	O
status	int
==	O
ENOENT	int
)	O
*	O
total	*(long)
=	O
0	int
;	O
else	O
if	O
(	O
status	int
!=	O
0	int
)	O
{	O
mu_error	(*(char))->(int)
(	O
_	O
(	O
"could not open mailbox `%s': %s"	*(char)
)	O
,	O
mu_url_to_string	(*(struct))->(*(char))
(	O
url	*(struct)
)	O
,	O
mu_strerror	(int)->(*(char))
(	O
status	int
)	O
)	O
;	O
mu_mailbox_destroy	(*(*(struct)))->(void)
(	O
&	O
mbox	*(struct)
)	O
;	O
exit	(int)->(void)
(	O
3	int
)	O
;	O
}	O
else	O
{	O
mu_observer_t	*(struct)
observer	*(struct)
;	O
mu_observable_t	*(struct)
observable	*(struct)
;	O
struct	O
frm_action_closure	struct(*((long,*(struct))->(int)),long)
closure	*(void)
=	O
{	O
fun	*((*(char),*(void))->(int))
,	O
0	int
}	O
;	O
mu_observer_create	(*(*(struct)),*(void))->(int)
(	O
&	O
observer	*(struct)
,	O
mbox	*(struct)
)	O
;	O
mu_observer_set_action	(*(struct),*((*(struct),long,*(void),*(void))->(int)),*(void))->(int)
(	O
observer	*(struct)
,	O
action	(*(struct),long,*(void),*(void))->(int)
,	O
mbox	*(struct)
)	O
;	O
mu_observer_set_action_data	(*(struct),*(void),*(void))->(int)
(	O
observer	*(struct)
,	O
&	O
closure	*(void)
,	O
mbox	*(struct)
)	O
;	O
mu_mailbox_get_observable	(*(struct),*(*(struct)))->(int)
(	O
mbox	*(struct)
,	O
&	O
observable	*(struct)
)	O
;	O
mu_observable_attach	(*(struct),long,*(struct))->(int)
(	O
observable	*(struct)
,	O
MU_EVT_MESSAGE_ADD	int
,	O
observer	*(struct)
)	O
;	O
status	int
=	O
mu_mailbox_scan	(*(struct),long,*(long))->(int)
(	O
mbox	*(struct)
,	O
1	int
,	O
total	*(long)
)	O
;	O
if	O
(	O
status	int
!=	O
0	int
)	O
{	O
mu_error	(*(char))->(int)
(	O
_	O
(	O
"could not scan mailbox `%s': %s"	*(char)
)	O
,	O
mu_url_to_string	(*(struct))->(*(char))
(	O
url	*(struct)
)	O
,	O
mu_strerror	(int)->(*(char))
(	O
status	int
)	O
)	O
;	O
frm_abort	(*(*(struct)))->(void)
(	O
&	O
mbox	*(struct)
)	O
;	O
}	O
mu_observable_detach	(*(struct),*(struct))->(int)
(	O
observable	*(struct)
,	O
observer	*(struct)
)	O
;	O
mu_observer_destroy	(*(*(struct)),*(void))->(void)
(	O
&	O
observer	*(struct)
,	O
mbox	*(struct)
)	O
;	O
if	O
(	O
(	O
status	int
=	O
mu_mailbox_close	(*(struct))->(int)
(	O
mbox	*(struct)
)	O
)	O
!=	O
0	int
)	O
{	O
mu_error	(*(char))->(int)
(	O
_	O
(	O
"could not close mailbox `%s': %s"	*(char)
)	O
,	O
mu_url_to_string	(*(struct))->(*(char))
(	O
url	*(struct)
)	O
,	O
mu_strerror	(int)->(*(char))
(	O
status	int
)	O
)	O
;	O
exit	(int)->(void)
(	O
3	int
)	O
;	O
}	O
}	O
mu_mailbox_destroy	(*(*(struct)))->(void)
(	O
&	O
mbox	*(struct)
)	O
;	O
}	O
