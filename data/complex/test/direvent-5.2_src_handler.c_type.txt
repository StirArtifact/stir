struct	O
handler	struct(long,struct(int,int),*(struct),*((*(struct),*(struct(int,int)),*(char),*(char),*(void))->(int)),*((*(void))->(void)),*(void))
*	O
handler_alloc	(struct(int,int))->(*(struct(long,struct(int,int),*(struct),*((*`,*`,*`,*`,*`)->(int)),*((*`)->(void)),*(void))))
(	O
event_mask	struct(int,int)
ev_mask	struct(int,int)
)	O
{	O
struct	O
handler	struct(long,struct(int,int),*(struct),*((*(struct),*(struct(int,int)),*(char),*(char),*(void))->(int)),*((*(void))->(void)),*(void))
*	O
hp	*(struct(long,struct(int,int),*(struct),*((*(struct`),*(struct`),*(char),*(char),*(void))->(int)),*((*(void))->(void)),*(void)))
=	O
ecalloc	(long,long)->(*(void))
(	O
1	int
,	O
sizeof	O
(	O
*	O
hp	*(struct(long,struct(int,int),*(struct),*((*(struct`),*(struct`),*(char),*(char),*(void))->(int)),*((*(void))->(void)),*(void)))
)	O
)	O
;	O
hp	*(struct(long,struct(int,int),*(struct),*((*(struct`),*(struct`),*(char),*(char),*(void))->(int)),*((*(void))->(void)),*(void)))
->	O
refcnt	long
=	O
0	int
;	O
hp	*(struct(long,struct(int,int),*(struct),*((*(struct`),*(struct`),*(char),*(char),*(void))->(int)),*((*(void))->(void)),*(void)))
->	O
ev_mask	struct(int,int)
=	O
ev_mask	struct(int,int)
;	O
return	O
hp	*(struct(long,struct(int,int),*(struct),*((*(struct`),*(struct`),*(char),*(char),*(void))->(int)),*((*(void))->(void)),*(void)))
;	O
}	O
void	O
watchpoint_run_handlers	(*(struct(long,int,*(struct(long,int,*`,*`,int,*`,int,*`)),*(char),int,*(struct),int,*(char))),int,*(char),*(char))->(void)
(	O
struct	O
watchpoint	struct(long,int,*(struct(long,int,*(struct(long,int,*(struct`),*(char),int,*(struct`),int,*(char))),*(char),int,*(struct),int,*(char))),*(char),int,*(struct),int,*(char))
*	O
wp	*(struct)
,	O
int	O
evflags	int
,	O
const	O
char	O
*	O
dirname	*(char)
,	O
const	O
char	O
*	O
filename	*(char)
)	O
{	O
handler_iterator_t	*(struct)
itr	*(*(struct))
;	O
struct	O
handler	struct(long,struct(int,int),*(struct),*((*(struct),*(struct(int,int)),*(char),*(char),*(void))->(int)),*((*(void))->(void)),*(void))
*	O
hp	*(struct(long,struct(int,int),*(struct),*((*(struct`),*(struct`),*(char),*(char),*(void))->(int)),*((*(void))->(void)),*(void)))
;	O
event_mask	struct(int,int)
m	*(struct(int,int))
;	O
for_each_handler	O
(	O
wp	*(struct)
,	O
itr	*(*(struct))
,	O
hp	*(struct(long,struct(int,int),*(struct),*((*(struct`),*(struct`),*(char),*(char),*(void))->(int)),*((*(void))->(void)),*(void)))
)	O
{	O
if	O
(	O
handler_matches_event	O
(	O
hp	*(struct(long,struct(int,int),*(struct),*((*(struct`),*(struct`),*(char),*(char),*(void))->(int)),*((*(void))->(void)),*(void)))
,	O
sys	O
,	O
evflags	int
,	O
filename	*(char)
)	O
)	O
hp	*(struct(long,struct(int,int),*(struct),*((*(struct`),*(struct`),*(char),*(char),*(void))->(int)),*((*(void))->(void)),*(void)))
->	O
run	*((*(struct),*(struct(int,int)),*(char),*(char),*(void))->(int))
(	O
wp	*(struct)
,	O
event_mask_init	(*(struct(int,int)),int,*(struct(int,int)))->(*(struct(int,int)))
(	O
&	O
m	*(struct(int,int))
,	O
evflags	int
,	O
&	O
hp	*(struct(long,struct(int,int),*(struct),*((*(struct`),*(struct`),*(char),*(char),*(void))->(int)),*((*(void))->(void)),*(void)))
->	O
ev_mask	struct(int,int)
)	O
,	O
dirname	*(char)
,	O
filename	*(char)
,	O
hp	*(struct(long,struct(int,int),*(struct),*((*(struct`),*(struct`),*(char),*(char),*(void))->(int)),*((*(void))->(void)),*(void)))
->	O
data	*(void)
)	O
;	O
}	O
}	O
static	O
void	O
handler_ref	(*(struct(long,struct(int,int),*(struct),*((*`,*`,*`,*`,*`)->(int)),*((*`)->(void)),*(void))))->(void)
(	O
struct	O
handler	struct(long,struct(int,int),*(struct),*((*(struct),*(struct(int,int)),*(char),*(char),*(void))->(int)),*((*(void))->(void)),*(void))
*	O
hp	*(struct(long,struct(int,int),*(struct),*((*(struct`),*(struct`),*(char),*(char),*(void))->(int)),*((*(void))->(void)),*(void)))
)	O
{	O
++	O
hp	*(struct(long,struct(int,int),*(struct),*((*(struct`),*(struct`),*(char),*(char),*(void))->(int)),*((*(void))->(void)),*(void)))
->	O
refcnt	long
;	O
}	O
void	O
handler_free	(*(struct(long,struct(int,int),*(struct),*((*`,*`,*`,*`,*`)->(int)),*((*`)->(void)),*(void))))->(void)
(	O
struct	O
handler	struct(long,struct(int,int),*(struct),*((*(struct),*(struct(int,int)),*(char),*(char),*(void))->(int)),*((*(void))->(void)),*(void))
*	O
hp	*(struct(long,struct(int,int),*(struct),*((*(struct`),*(struct`),*(char),*(char),*(void))->(int)),*((*(void))->(void)),*(void)))
)	O
{	O
filpatlist_destroy	(*(*(struct)))->(void)
(	O
&	O
hp	*(struct(long,struct(int,int),*(struct),*((*(struct`),*(struct`),*(char),*(char),*(void))->(int)),*((*(void))->(void)),*(void)))
->	O
fnames	*(struct)
)	O
;	O
if	O
(	O
hp	*(struct(long,struct(int,int),*(struct),*((*(struct`),*(struct`),*(char),*(char),*(void))->(int)),*((*(void))->(void)),*(void)))
->	O
free	(*(void))->(void)
)	O
hp	*(struct(long,struct(int,int),*(struct),*((*(struct`),*(struct`),*(char),*(char),*(void))->(int)),*((*(void))->(void)),*(void)))
->	O
free	(*(void))->(void)
(	O
hp	*(struct(long,struct(int,int),*(struct),*((*(struct`),*(struct`),*(char),*(char),*(void))->(int)),*((*(void))->(void)),*(void)))
->	O
data	*(void)
)	O
;	O
}	O
static	O
void	O
handler_unref	(*(struct(long,struct(int,int),*(struct),*((*`,*`,*`,*`,*`)->(int)),*((*`)->(void)),*(void))))->(void)
(	O
struct	O
handler	struct(long,struct(int,int),*(struct),*((*(struct),*(struct(int,int)),*(char),*(char),*(void))->(int)),*((*(void))->(void)),*(void))
*	O
hp	*(struct(long,struct(int,int),*(struct),*((*(struct`),*(struct`),*(char),*(char),*(void))->(int)),*((*(void))->(void)),*(void)))
)	O
{	O
if	O
(	O
hp	*(struct(long,struct(int,int),*(struct),*((*(struct`),*(struct`),*(char),*(char),*(void))->(int)),*((*(void))->(void)),*(void)))
&&	O
--	O
hp	*(struct(long,struct(int,int),*(struct),*((*(struct`),*(struct`),*(char),*(char),*(void))->(int)),*((*(void))->(void)),*(void)))
->	O
refcnt	long
)	O
{	O
handler_free	(*(struct(long,struct(int,int),*(struct),*((*`,*`,*`,*`,*`)->(int)),*((*`)->(void)),*(void))))->(void)
(	O
hp	*(struct(long,struct(int,int),*(struct),*((*(struct`),*(struct`),*(char),*(char),*(void))->(int)),*((*(void))->(void)),*(void)))
)	O
;	O
free	(*(void))->(void)
(	O
hp	*(struct(long,struct(int,int),*(struct),*((*(struct`),*(struct`),*(char),*(char),*(void))->(int)),*((*(void))->(void)),*(void)))
)	O
;	O
}	O
}	O
static	O
void	O
handler_listent_free	(*(void))->(void)
(	O
void	O
*	O
p	*(struct(int,*(char),int,*(int),long,int,*(*(char))))
)	O
{	O
struct	O
handler	struct(long,struct(int,int),*(struct),*((*(struct),*(struct(int,int)),*(char),*(char),*(void))->(int)),*((*(void))->(void)),*(void))
*	O
hp	*(struct(long,struct(int,int),*(struct),*((*(struct`),*(struct`),*(char),*(char),*(void))->(int)),*((*(void))->(void)),*(void)))
=	O
p	*(struct(int,*(char),int,*(int),long,int,*(*(char))))
;	O
handler_unref	(*(struct(long,struct(int,int),*(struct),*((*`,*`,*`,*`,*`)->(int)),*((*`)->(void)),*(void))))->(void)
(	O
hp	*(struct(long,struct(int,int),*(struct),*((*(struct`),*(struct`),*(char),*(char),*(void))->(int)),*((*(void))->(void)),*(void)))
)	O
;	O
}	O
struct	O
handler_list	*(struct)
{	O
size_t	long
refcnt	long
;	O
grecs_list_ptr_t	*(struct)
list	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void))))
;	O
struct	O
handler_iterator	struct(*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(struct`),int)),*(struct(*(struct`),*(struct`),*(struct`),*(struct`),int)),*(struct(long,*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(void))),int)),*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(struct`),int)),*(struct(*(struct`),*(struct`),*(struct`),*(struct`),int)),*(struct(long,*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(void))),int)),*(struct(long,*(struct(*(struct`),*(struct`),long,*((*`,*`)->(int)),*((*`)->(void)))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`),int)))),*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void))),int)
*	O
itr_chain	*(struct)
;	O
}	O
;	O
struct	O
handler_iterator	struct(*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(struct`),int)),*(struct(*(struct`),*(struct`),*(struct`),*(struct`),int)),*(struct(long,*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(void))),int)),*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(struct`),int)),*(struct(*(struct`),*(struct`),*(struct`),*(struct`),int)),*(struct(long,*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(void))),int)),*(struct(long,*(struct(*(struct`),*(struct`),long,*((*`,*`)->(int)),*((*`)->(void)))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`),int)))),*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void))),int)
{	O
struct	O
handler_iterator	struct(*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(struct`),int)),*(struct(*(struct`),*(struct`),*(struct`),*(struct`),int)),*(struct(long,*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(void))),int)),*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(struct`),int)),*(struct(*(struct`),*(struct`),*(struct`),*(struct`),int)),*(struct(long,*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(void))),int)),*(struct(long,*(struct(*(struct`),*(struct`),long,*((*`,*`)->(int)),*((*`)->(void)))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`),int)))),*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void))),int)
*	O
prev	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
,	O
*	O
next	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
;	O
handler_list_t	*(struct)
hlist	*(struct)
;	O
struct	O
grecs_list_entry	struct(*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void))),*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void))),*(void))
*	O
ent	*(void)
;	O
int	O
advanced	int
;	O
}	O
;	O
static	O
struct	O
handler_iterator	struct(*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(struct`),int)),*(struct(*(struct`),*(struct`),*(struct`),*(struct`),int)),*(struct(long,*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(void))),int)),*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(struct`),int)),*(struct(*(struct`),*(struct`),*(struct`),*(struct`),int)),*(struct(long,*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(void))),int)),*(struct(long,*(struct(*(struct`),*(struct`),long,*((*`,*`)->(int)),*((*`)->(void)))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`),int)))),*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void))),int)
*	O
itr_avail	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(struct`),int)),*(struct(*(struct`),*(struct`),*(struct`),*(struct`),int)),*(struct(long,*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(void))),int))
;	O
struct	O
handler	struct(long,struct(int,int),*(struct),*((*(struct),*(struct(int,int)),*(char),*(char),*(void))->(int)),*((*(void))->(void)),*(void))
*	O
handler_itr_first	(*(struct(long,int,*(struct(long,int,*`,*`,int,*`,int,*`)),*(char),int,*(struct),int,*(char))),*(*(struct)))->(*(struct(long,struct(int,int),*(struct),*((*`,*`,*`,*`,*`)->(int)),*((*`)->(void)),*(void))))
(	O
struct	O
watchpoint	struct(long,int,*(struct(long,int,*(struct(long,int,*(struct`),*(char),int,*(struct`),int,*(char))),*(char),int,*(struct),int,*(char))),*(char),int,*(struct),int,*(char))
*	O
wpt	*(struct(long,int,*(struct(long,int,*(struct`),*(char),int,*(struct`),int,*(char))),*(char),int,*(struct(long,*(struct`),*(struct`))),int,*(char)))
,	O
handler_iterator_t	*(struct)
*	O
ret_itr	*(*(struct(*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(struct(long,*`,*`)),*(struct(*`,*`,*`)),int)))
)	O
{	O
struct	O
handler_iterator	struct(*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(struct`),int)),*(struct(*(struct`),*(struct`),*(struct`),*(struct`),int)),*(struct(long,*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(void))),int)),*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(struct`),int)),*(struct(*(struct`),*(struct`),*(struct`),*(struct`),int)),*(struct(long,*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(void))),int)),*(struct(long,*(struct(*(struct`),*(struct`),long,*((*`,*`)->(int)),*((*`)->(void)))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`),int)))),*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void))),int)
*	O
itr	*(*(struct))
;	O
if	O
(	O
!	O
wpt	*(struct(long,int,*(struct(long,int,*(struct`),*(char),int,*(struct`),int,*(char))),*(char),int,*(struct(long,*(struct`),*(struct`))),int,*(char)))
->	O
handler_list	*(struct)
)	O
return	O
NULL	O
;	O
if	O
(	O
itr_avail	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(struct`),int)),*(struct(*(struct`),*(struct`),*(struct`),*(struct`),int)),*(struct(long,*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(void))),int))
)	O
{	O
itr	*(*(struct))
=	O
itr_avail	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(struct`),int)),*(struct(*(struct`),*(struct`),*(struct`),*(struct`),int)),*(struct(long,*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(void))),int))
;	O
itr_avail	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(struct`),int)),*(struct(*(struct`),*(struct`),*(struct`),*(struct`),int)),*(struct(long,*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(void))),int))
=	O
itr	*(*(struct))
->	O
next	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
;	O
if	O
(	O
itr_avail	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(struct`),int)),*(struct(*(struct`),*(struct`),*(struct`),*(struct`),int)),*(struct(long,*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(void))),int))
)	O
itr_avail	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(struct`),int)),*(struct(*(struct`),*(struct`),*(struct`),*(struct`),int)),*(struct(long,*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(void))),int))
->	O
prev	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
=	O
NULL	O
;	O
}	O
else	O
itr	*(*(struct))
=	O
emalloc	(long)->(*(void))
(	O
sizeof	O
*	O
itr	*(*(struct))
)	O
;	O
itr	*(*(struct))
->	O
prev	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
=	O
NULL	O
;	O
itr	*(*(struct))
->	O
next	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
=	O
wpt	*(struct(long,int,*(struct(long,int,*(struct`),*(char),int,*(struct`),int,*(char))),*(char),int,*(struct(long,*(struct`),*(struct`))),int,*(char)))
->	O
handler_list	*(struct)
->	O
itr_chain	*(struct)
;	O
itr	*(*(struct))
->	O
hlist	*(struct)
=	O
wpt	*(struct(long,int,*(struct(long,int,*(struct`),*(char),int,*(struct`),int,*(char))),*(char),int,*(struct(long,*(struct`),*(struct`))),int,*(char)))
->	O
handler_list	*(struct)
;	O
if	O
(	O
wpt	*(struct(long,int,*(struct(long,int,*(struct`),*(char),int,*(struct`),int,*(char))),*(char),int,*(struct(long,*(struct`),*(struct`))),int,*(char)))
->	O
handler_list	*(struct)
->	O
itr_chain	*(struct)
)	O
wpt	*(struct(long,int,*(struct(long,int,*(struct`),*(char),int,*(struct`),int,*(char))),*(char),int,*(struct(long,*(struct`),*(struct`))),int,*(char)))
->	O
handler_list	*(struct)
->	O
itr_chain	*(struct)
->	O
prev	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
=	O
itr	*(*(struct))
;	O
wpt	*(struct(long,int,*(struct(long,int,*(struct`),*(char),int,*(struct`),int,*(char))),*(char),int,*(struct(long,*(struct`),*(struct`))),int,*(char)))
->	O
handler_list	*(struct)
->	O
itr_chain	*(struct)
=	O
itr	*(*(struct))
;	O
itr	*(*(struct))
->	O
ent	*(void)
=	O
wpt	*(struct(long,int,*(struct(long,int,*(struct`),*(char),int,*(struct`),int,*(char))),*(char),int,*(struct(long,*(struct`),*(struct`))),int,*(char)))
->	O
handler_list	*(struct)
->	O
list	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void))))
->	O
head	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
;	O
itr	*(*(struct))
->	O
advanced	int
=	O
0	int
;	O
*	O
ret_itr	*(*(struct(*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(struct(long,*`,*`)),*(struct(*`,*`,*`)),int)))
=	O
itr	*(*(struct))
;	O
return	O
handler_itr_current	(*(struct))->(*(struct(long,struct(int,int),*(struct),*((*`,*`,*`,*`,*`)->(int)),*((*`)->(void)),*(void))))
(	O
itr	*(*(struct))
)	O
;	O
}	O
struct	O
handler	struct(long,struct(int,int),*(struct),*((*(struct),*(struct(int,int)),*(char),*(char),*(void))->(int)),*((*(void))->(void)),*(void))
*	O
handler_itr_next	(*(*(struct)))->(*(struct(long,struct(int,int),*(struct),*((*`,*`,*`,*`,*`)->(int)),*((*`)->(void)),*(void))))
(	O
handler_iterator_t	*(struct)
*	O
pitr	*(*(struct(*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(struct(long,*`,*`)),*(struct(*`,*`,*`)),int)))
)	O
{	O
struct	O
handler_iterator	struct(*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(struct`),int)),*(struct(*(struct`),*(struct`),*(struct`),*(struct`),int)),*(struct(long,*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(void))),int)),*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(struct`),int)),*(struct(*(struct`),*(struct`),*(struct`),*(struct`),int)),*(struct(long,*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(void))),int)),*(struct(long,*(struct(*(struct`),*(struct`),long,*((*`,*`)->(int)),*((*`)->(void)))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`),int)))),*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void))),int)
*	O
itr	*(*(struct))
;	O
if	O
(	O
!	O
pitr	*(*(struct(*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(struct(long,*`,*`)),*(struct(*`,*`,*`)),int)))
||	O
(	O
itr	*(*(struct))
=	O
*	O
pitr	*(*(struct(*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(struct(long,*`,*`)),*(struct(*`,*`,*`)),int)))
)	O
==	O
NULL	O
)	O
return	O
NULL	O
;	O
if	O
(	O
itr	*(*(struct))
->	O
advanced	int
)	O
itr	*(*(struct))
->	O
advanced	int
=	O
0	int
;	O
else	O
itr	*(*(struct))
->	O
ent	*(void)
=	O
itr	*(*(struct))
->	O
ent	*(void)
->	O
next	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
;	O
if	O
(	O
!	O
itr	*(*(struct))
->	O
ent	*(void)
)	O
{	O
struct	O
handler_iterator	struct(*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(struct`),int)),*(struct(*(struct`),*(struct`),*(struct`),*(struct`),int)),*(struct(long,*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(void))),int)),*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(struct`),int)),*(struct(*(struct`),*(struct`),*(struct`),*(struct`),int)),*(struct(long,*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(void))),int)),*(struct(long,*(struct(*(struct`),*(struct`),long,*((*`,*`)->(int)),*((*`)->(void)))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`),int)))),*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void))),int)
*	O
p	*(struct(int,*(char),int,*(int),long,int,*(*(char))))
;	O
if	O
(	O
(	O
p	*(struct(int,*(char),int,*(int),long,int,*(*(char))))
=	O
itr	*(*(struct))
->	O
prev	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
)	O
!=	O
NULL	O
)	O
p	*(struct(int,*(char),int,*(int),long,int,*(*(char))))
->	O
next	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
=	O
itr	*(*(struct))
->	O
next	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
;	O
else	O
itr	*(*(struct))
->	O
hlist	*(struct)
->	O
itr_chain	*(struct)
=	O
itr	*(*(struct))
->	O
next	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
;	O
if	O
(	O
(	O
p	*(struct(int,*(char),int,*(int),long,int,*(*(char))))
=	O
itr	*(*(struct))
->	O
next	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
)	O
!=	O
NULL	O
)	O
p	*(struct(int,*(char),int,*(int),long,int,*(*(char))))
->	O
prev	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
=	O
itr	*(*(struct))
->	O
prev	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
;	O
if	O
(	O
itr_avail	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(struct`),int)),*(struct(*(struct`),*(struct`),*(struct`),*(struct`),int)),*(struct(long,*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(void))),int))
)	O
itr_avail	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(struct`),int)),*(struct(*(struct`),*(struct`),*(struct`),*(struct`),int)),*(struct(long,*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(void))),int))
->	O
prev	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
=	O
itr	*(*(struct))
;	O
itr	*(*(struct))
->	O
prev	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
=	O
NULL	O
;	O
itr	*(*(struct))
->	O
next	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
=	O
itr_avail	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(struct`),int)),*(struct(*(struct`),*(struct`),*(struct`),*(struct`),int)),*(struct(long,*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(void))),int))
;	O
itr	*(*(struct))
->	O
hlist	*(struct)
=	O
NULL	O
;	O
itr_avail	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(struct`),int)),*(struct(*(struct`),*(struct`),*(struct`),*(struct`),int)),*(struct(long,*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(void))),int))
=	O
itr	*(*(struct))
;	O
*	O
pitr	*(*(struct(*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(struct(long,*`,*`)),*(struct(*`,*`,*`)),int)))
=	O
NULL	O
;	O
return	O
NULL	O
;	O
}	O
return	O
handler_itr_current	(*(struct))->(*(struct(long,struct(int,int),*(struct),*((*`,*`,*`,*`,*`)->(int)),*((*`)->(void)),*(void))))
(	O
itr	*(*(struct))
)	O
;	O
}	O
struct	O
handler	struct(long,struct(int,int),*(struct),*((*(struct),*(struct(int,int)),*(char),*(char),*(void))->(int)),*((*(void))->(void)),*(void))
*	O
handler_itr_current	(*(struct))->(*(struct(long,struct(int,int),*(struct),*((*`,*`,*`,*`,*`)->(int)),*((*`)->(void)),*(void))))
(	O
handler_iterator_t	*(struct)
itr	*(*(struct))
)	O
{	O
if	O
(	O
!	O
itr	*(*(struct))
)	O
return	O
NULL	O
;	O
return	O
itr	*(*(struct))
->	O
ent	*(void)
?	O
itr	*(*(struct))
->	O
ent	*(void)
->	O
data	*(void)
:	O
NULL	O
;	O
}	O
handler_list_t	*(struct)
handler_list_create	()->(*(struct))
(	O
void	O
)	O
{	O
handler_list_t	*(struct)
hlist	*(struct)
=	O
emalloc	(long)->(*(void))
(	O
sizeof	O
(	O
*	O
hlist	*(struct)
)	O
)	O
;	O
hlist	*(struct)
->	O
list	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void))))
=	O
grecs_list_create	()->(*(struct(*(struct(*`,*`,*`)),*(struct(*`,*`,*`)),long,*((*`,*`)->(int)),*((*`)->(void)))))
(	O
)	O
;	O
hlist	*(struct)
->	O
list	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void))))
->	O
free_entry	*((*(void))->(void))
=	O
handler_listent_free	(*(void))->(void)
;	O
hlist	*(struct)
->	O
refcnt	long
=	O
1	int
;	O
hlist	*(struct)
->	O
itr_chain	*(struct)
=	O
NULL	O
;	O
return	O
hlist	*(struct)
;	O
}	O
size_t	long
handler_list_size	(*(struct))->(long)
(	O
handler_list_t	*(struct)
hlist	*(struct)
)	O
{	O
return	O
grecs_list_size	(*(struct(*(struct(*`,*`,*`)),*(struct(*`,*`,*`)),long,*((*`,*`)->(int)),*((*`)->(void)))))->(long)
(	O
hlist	*(struct)
->	O
list	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void))))
)	O
;	O
}	O
handler_list_t	*(struct)
handler_list_copy	(*(struct))->(*(struct))
(	O
handler_list_t	*(struct)
orig	*(struct(long,*(struct(*(struct`),*(struct`),long,*((*`,*`)->(int)),*((*`)->(void)))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`),int))))
)	O
{	O
if	O
(	O
!	O
orig	*(struct(long,*(struct(*(struct`),*(struct`),long,*((*`,*`)->(int)),*((*`)->(void)))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`),int))))
)	O
return	O
handler_list_create	()->(*(struct))
(	O
)	O
;	O
++	O
orig	*(struct(long,*(struct(*(struct`),*(struct`),long,*((*`,*`)->(int)),*((*`)->(void)))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`),int))))
->	O
refcnt	long
;	O
return	O
orig	*(struct(long,*(struct(*(struct`),*(struct`),long,*((*`,*`)->(int)),*((*`)->(void)))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`),int))))
;	O
}	O
void	O
handler_list_unref	(*(struct))->(void)
(	O
handler_list_t	*(struct)
hlist	*(struct)
)	O
{	O
if	O
(	O
hlist	*(struct)
)	O
{	O
if	O
(	O
--	O
hlist	*(struct)
->	O
refcnt	long
==	O
0	int
)	O
{	O
grecs_list_free	(*(struct(*(struct(*`,*`,*`)),*(struct(*`,*`,*`)),long,*((*`,*`)->(int)),*((*`)->(void)))))->(void)
(	O
hlist	*(struct)
->	O
list	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void))))
)	O
;	O
free	(*(void))->(void)
(	O
hlist	*(struct)
)	O
;	O
}	O
}	O
}	O
void	O
handler_list_append	(*(struct),*(struct(long,struct(int,int),*(struct),*((*`,*`,*`,*`,*`)->(int)),*((*`)->(void)),*(void))))->(void)
(	O
handler_list_t	*(struct)
hlist	*(struct)
,	O
struct	O
handler	struct(long,struct(int,int),*(struct),*((*(struct),*(struct(int,int)),*(char),*(char),*(void))->(int)),*((*(void))->(void)),*(void))
*	O
hp	*(struct(long,struct(int,int),*(struct),*((*(struct`),*(struct`),*(char),*(char),*(void))->(int)),*((*(void))->(void)),*(void)))
)	O
{	O
handler_ref	(*(struct(long,struct(int,int),*(struct),*((*`,*`,*`,*`,*`)->(int)),*((*`)->(void)),*(void))))->(void)
(	O
hp	*(struct(long,struct(int,int),*(struct),*((*(struct`),*(struct`),*(char),*(char),*(void))->(int)),*((*(void))->(void)),*(void)))
)	O
;	O
grecs_list_append	(*(struct(*(struct(*`,*`,*`)),*(struct(*`,*`,*`)),long,*((*`,*`)->(int)),*((*`)->(void)))),*(void))->(void)
(	O
hlist	*(struct)
->	O
list	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void))))
,	O
hp	*(struct(long,struct(int,int),*(struct),*((*(struct`),*(struct`),*(char),*(char),*(void))->(int)),*((*(void))->(void)),*(void)))
)	O
;	O
}	O
size_t	long
handler_list_remove	(*(struct),*(struct(long,struct(int,int),*(struct),*((*`,*`,*`,*`,*`)->(int)),*((*`)->(void)),*(void))))->(long)
(	O
handler_list_t	*(struct)
hlist	*(struct)
,	O
struct	O
handler	struct(long,struct(int,int),*(struct),*((*(struct),*(struct(int,int)),*(char),*(char),*(void))->(int)),*((*(void))->(void)),*(void))
*	O
hp	*(struct(long,struct(int,int),*(struct),*((*(struct`),*(struct`),*(char),*(char),*(void))->(int)),*((*(void))->(void)),*(void)))
)	O
{	O
struct	O
grecs_list_entry	struct(*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void))),*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void))),*(void))
*	O
ep	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
;	O
for	O
(	O
ep	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
=	O
hlist	*(struct)
->	O
list	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void))))
->	O
head	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
;	O
ep	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
;	O
ep	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
=	O
ep	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
->	O
next	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
)	O
if	O
(	O
ep	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
->	O
data	*(void)
==	O
hp	*(struct(long,struct(int,int),*(struct),*((*(struct`),*(struct`),*(char),*(char),*(void))->(int)),*((*(void))->(void)),*(void)))
)	O
break	O
;	O
if	O
(	O
!	O
ep	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
)	O
abort	()->(void)
(	O
)	O
;	O
if	O
(	O
hlist	*(struct)
->	O
itr_chain	*(struct)
)	O
{	O
struct	O
handler_iterator	struct(*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(struct`),int)),*(struct(*(struct`),*(struct`),*(struct`),*(struct`),int)),*(struct(long,*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(void))),int)),*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(struct`),int)),*(struct(*(struct`),*(struct`),*(struct`),*(struct`),int)),*(struct(long,*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(void))),int)),*(struct(long,*(struct(*(struct`),*(struct`),long,*((*`,*`)->(int)),*((*`)->(void)))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`),int)))),*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void))),int)
*	O
itr	*(*(struct))
;	O
for	O
(	O
itr	*(*(struct))
=	O
hlist	*(struct)
->	O
itr_chain	*(struct)
;	O
itr	*(*(struct))
;	O
itr	*(*(struct))
=	O
itr	*(*(struct))
->	O
next	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
)	O
if	O
(	O
itr	*(*(struct))
->	O
ent	*(void)
==	O
ep	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
)	O
{	O
itr	*(*(struct))
->	O
ent	*(void)
=	O
ep	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
->	O
next	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
;	O
itr	*(*(struct))
->	O
advanced	int
=	O
1	int
;	O
}	O
}	O
grecs_list_remove_entry	(*(struct(*(struct(*`,*`,*`)),*(struct(*`,*`,*`)),long,*((*`,*`)->(int)),*((*`)->(void)))),*(struct(*(struct(*`,*`,*`)),*(struct(*`,*`,*`)),*(void))))->(void)
(	O
hlist	*(struct)
->	O
list	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void))))
,	O
ep	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
)	O
;	O
return	O
grecs_list_size	(*(struct(*(struct(*`,*`,*`)),*(struct(*`,*`,*`)),long,*((*`,*`)->(int)),*((*`)->(void)))))->(long)
(	O
hlist	*(struct)
->	O
list	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void))))
)	O
;	O
}	O
