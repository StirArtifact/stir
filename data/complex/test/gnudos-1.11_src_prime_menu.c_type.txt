struct	O
menustruct	struct(array(int),*(*(char)),int,*(*(()->(void))))
{	O
int	O
box	array(int)
[	O
4	int
]	O
;	O
char	O
*	O
*	O
menuItems	*(*(char))
;	O
int	O
menuItemCount	int
;	O
void	O
(	O
*	O
*	O
func	*(*(()->(void)))
)	O
(	O
)	O
;	O
}	O
;	O
int	O
mSelect	int
;	O
int	O
endme	int
;	O
int	O
menuIndex	int
;	O
struct	O
menustruct	struct(array(int),*(*(char)),int,*(*(()->(void))))
*	O
curMenu	*(struct(array(int),*(*(char)),int,*(*(()->(void)))))
;	O
void	O
(	O
*	O
fileFuncs	array(*(()->(void)))
[	O
]	O
)	O
(	O
)	O
=	O
{	O
fileMenu_CreateDir	()->(void)
,	O
fileMenu_Open	()->(void)
,	O
fileMenu_ExportTree	()->(void)
,	O
fileMenu_Print	()->(void)
,	O
fileMenu_Exit	()->(void)
}	O
;	O
void	O
(	O
*	O
editFuncs	array(*(()->(void)))
[	O
]	O
)	O
(	O
)	O
=	O
{	O
cutMarked	()->(void)
,	O
copyMarked	()->(void)
,	O
pasteMarked	()->(void)
,	O
markAll	()->(void)
,	O
unMarkAll	(int)->(void)
,	O
clearSelection	()->(void)
,	O
editMenu_Find	()->(void)
,	O
editMenu_Properties	()->(void)
}	O
;	O
void	O
(	O
*	O
optionsFuncs	array(*(()->(void)))
[	O
]	O
)	O
(	O
)	O
=	O
{	O
optionsMenu_Properties	()->(void)
,	O
optionsMenu_Change_Colors	()->(void)
,	O
optionsMenu_Reset_Config	()->(void)
}	O
;	O
void	O
(	O
*	O
helpFuncs	array(*(()->(void)))
[	O
]	O
)	O
(	O
)	O
=	O
{	O
showReadMe	()->(void)
,	O
showKeybindings	()->(void)
,	O
showQuickReference	()->(void)
,	O
showAboutBox	()->(void)
}	O
;	O
struct	O
menustruct	struct(array(int),*(*(char)),int,*(*(()->(void))))
mainMenu	array(struct(array(int),*(*(char)),int,*(*(()->(void)))))
[	O
]	O
=	O
{	O
{	O
{	O
3	int
,	O
2	int
,	O
9	int
,	O
19	int
}	O
,	O
fileMenu	array(*(char))
,	O
fTotal	int
,	O
fileFuncs	array(*(()->(void)))
,	O
}	O
,	O
{	O
{	O
3	int
,	O
8	int
,	O
11	int
,	O
22	int
}	O
,	O
editMenu	array(*(char))
,	O
eTotal	int
,	O
editFuncs	array(*(()->(void)))
,	O
}	O
,	O
{	O
{	O
3	int
,	O
14	int
,	O
7	int
,	O
30	int
}	O
,	O
optionsMenu	array(*(char))
,	O
oTotal	int
,	O
optionsFuncs	array(*(()->(void)))
,	O
}	O
,	O
{	O
{	O
3	int
,	O
23	int
,	O
8	int
,	O
39	int
}	O
,	O
helpMenu	array(*(char))
,	O
hTotal	int
,	O
helpFuncs	array(*(()->(void)))
,	O
}	O
,	O
}	O
;	O
void	O
drawMenuBox	(*(struct(array(int),*(*(char)),int,*(*(()->(void))))))->(void)
(	O
struct	O
menustruct	struct(array(int),*(*(char)),int,*(*(()->(void))))
*	O
curMenu	*(struct(array(int),*(*(char)),int,*(*(()->(void)))))
)	O
{	O
int	O
x1	int
=	O
curMenu	*(struct(array(int),*(*(char)),int,*(*(()->(void)))))
->	O
box	array(int)
[	O
0	int
]	O
;	O
int	O
y1	int
=	O
curMenu	*(struct(array(int),*(*(char)),int,*(*(()->(void)))))
->	O
box	array(int)
[	O
1	int
]	O
;	O
int	O
x2	int
=	O
curMenu	*(struct(array(int),*(*(char)),int,*(*(()->(void)))))
->	O
box	array(int)
[	O
2	int
]	O
;	O
int	O
y2	int
=	O
curMenu	*(struct(array(int),*(*(char)),int,*(*(()->(void)))))
->	O
box	array(int)
[	O
3	int
]	O
;	O
char	O
*	O
*	O
menuItems	*(*(char))
=	O
curMenu	*(struct(array(int),*(*(char)),int,*(*(()->(void)))))
->	O
menuItems	*(*(char))
;	O
int	O
menuItemCount	int
=	O
curMenu	*(struct(array(int),*(*(char)),int,*(*(()->(void)))))
->	O
menuItemCount	int
;	O
setScreenColorsI	(int)->(void)
(	O
COLOR_WINDOW	int
)	O
;	O
drawBox	(int,int,int,int,*(char),int)->(void)
(	O
x1	int
++	O
,	O
y1	int
++	O
,	O
x2	int
,	O
y2	int
,	O
NULL	O
,	O
YES	int
)	O
;	O
setScreenColorsI	(int)->(void)
(	O
COLOR_HIGHLIGHT_TEXT	int
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"\e[%d;%dH%s"	*(char)
,	O
x1	int
,	O
y1	int
,	O
menuItems	*(*(char))
[	O
0	int
]	O
)	O
;	O
setScreenColorsI	(int)->(void)
(	O
COLOR_WINDOW	int
)	O
;	O
for	O
(	O
int	O
i	int
=	O
1	int
;	O
i	int
<	O
menuItemCount	int
;	O
i	int
++	O
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"\e[%d;%dH%s"	*(char)
,	O
i	int
+	O
4	int
,	O
y1	int
,	O
menuItems	*(*(char))
[	O
i	int
]	O
)	O
;	O
}	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"\e[%d;%dH"	*(char)
,	O
x1	int
,	O
y2	int
-	O
1	int
)	O
;	O
fflush	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
}	O
void	O
clearMenuSelection	(int,int,*(*(char)))->(void)
(	O
int	O
y	int
,	O
int	O
menuIndex	int
,	O
char	O
*	O
*	O
menuItems	*(*(char))
)	O
{	O
setScreenColorsI	(int)->(void)
(	O
COLOR_WINDOW	int
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"\e[%d;%dH%s"	*(char)
,	O
menuIndex	int
+	O
4	int
,	O
y	int
,	O
menuItems	*(*(char))
[	O
menuIndex	int
]	O
)	O
;	O
}	O
void	O
highlightSelection	(int,int,int,*(*(char)))->(void)
(	O
int	O
y1	int
,	O
int	O
y2	int
,	O
int	O
menuIndex	int
,	O
char	O
*	O
*	O
menuItems	*(*(char))
)	O
{	O
setScreenColorsI	(int)->(void)
(	O
COLOR_HIGHLIGHT_TEXT	int
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"\e[%d;%dH%s"	*(char)
,	O
menuIndex	int
+	O
4	int
,	O
y1	int
,	O
menuItems	*(*(char))
[	O
menuIndex	int
]	O
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"\e[%d;%dH"	*(char)
,	O
menuIndex	int
+	O
4	int
,	O
y2	int
)	O
;	O
fflush	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
}	O
void	O
doEsc	()->(void)
(	O
)	O
{	O
endme	int
=	O
1	int
;	O
}	O
void	O
doUpDown	(int)->(void)
(	O
int	O
step	int
)	O
{	O
clearMenuSelection	(int,int,*(*(char)))->(void)
(	O
curMenu	*(struct(array(int),*(*(char)),int,*(*(()->(void)))))
->	O
box	array(int)
[	O
1	int
]	O
+	O
1	int
,	O
mSelect	int
,	O
curMenu	*(struct(array(int),*(*(char)),int,*(*(()->(void)))))
->	O
menuItems	*(*(char))
)	O
;	O
mSelect	int
+=	O
step	int
;	O
if	O
(	O
mSelect	int
<	O
0	int
)	O
mSelect	int
=	O
curMenu	*(struct(array(int),*(*(char)),int,*(*(()->(void)))))
->	O
menuItemCount	int
-	O
1	int
;	O
else	O
if	O
(	O
mSelect	int
>=	O
curMenu	*(struct(array(int),*(*(char)),int,*(*(()->(void)))))
->	O
menuItemCount	int
)	O
mSelect	int
=	O
0	int
;	O
highlightSelection	(int,int,int,*(*(char)))->(void)
(	O
curMenu	*(struct(array(int),*(*(char)),int,*(*(()->(void)))))
->	O
box	array(int)
[	O
1	int
]	O
+	O
1	int
,	O
curMenu	*(struct(array(int),*(*(char)),int,*(*(()->(void)))))
->	O
box	array(int)
[	O
3	int
]	O
-	O
1	int
,	O
mSelect	int
,	O
curMenu	*(struct(array(int),*(*(char)),int,*(*(()->(void)))))
->	O
menuItems	*(*(char))
)	O
;	O
}	O
void	O
doRightLeft	(int)->(void)
(	O
int	O
step	int
)	O
{	O
menuIndex	int
+=	O
step	int
;	O
if	O
(	O
menuIndex	int
<	O
0	int
)	O
menuIndex	int
=	O
totalMainMenus	int
-	O
1	int
;	O
else	O
if	O
(	O
menuIndex	int
==	O
totalMainMenus	int
)	O
menuIndex	int
=	O
0	int
;	O
refreshWindows	()->(void)
(	O
)	O
;	O
}	O
void	O
showMenu	(int)->(void)
(	O
int	O
index	(*(char),int)->(*(char))
)	O
{	O
int	O
ch	*(char)
;	O
menuIndex	int
=	O
index	(*(char),int)->(*(char))
;	O
hideCursor	()->(void)
(	O
)	O
;	O
loop	O
:	O
mSelect	int
=	O
0	int
;	O
endme	int
=	O
0	int
;	O
curMenu	*(struct(array(int),*(*(char)),int,*(*(()->(void)))))
=	O
&	O
mainMenu	array(struct(array(int),*(*(char)),int,*(*(()->(void)))))
[	O
menuIndex	int
]	O
;	O
drawMenuBox	(*(struct(array(int),*(*(char)),int,*(*(()->(void))))))->(void)
(	O
curMenu	*(struct(array(int),*(*(char)),int,*(*(()->(void)))))
)	O
;	O
while	O
(	O
!	O
endme	int
)	O
{	O
ch	*(char)
=	O
getKey	()->(int)
(	O
)	O
;	O
switch	O
(	O
ch	*(char)
)	O
{	O
case	O
(	O
'f'	O
)	O
:	O
if	O
(	O
ALT	int
)	O
{	O
if	O
(	O
menuIndex	int
==	O
0	int
)	O
{	O
endme	int
=	O
1	int
;	O
break	O
;	O
}	O
menuIndex	int
=	O
0	int
;	O
refreshWindows	()->(void)
(	O
)	O
;	O
goto	O
loop	O
;	O
}	O
if	O
(	O
CTRL	int
)	O
{	O
if	O
(	O
GNU_DOS_LEVEL	int
>	O
1	int
)	O
{	O
doRightLeft	(int)->(void)
(	O
1	int
)	O
;	O
goto	O
loop	O
;	O
}	O
}	O
break	O
;	O
case	O
(	O
'e'	O
)	O
:	O
if	O
(	O
ALT	int
)	O
{	O
if	O
(	O
menuIndex	int
==	O
1	int
)	O
{	O
endme	int
=	O
1	int
;	O
break	O
;	O
}	O
menuIndex	int
=	O
1	int
;	O
refreshWindows	()->(void)
(	O
)	O
;	O
goto	O
loop	O
;	O
}	O
break	O
;	O
case	O
(	O
'o'	O
)	O
:	O
if	O
(	O
ALT	int
)	O
{	O
if	O
(	O
menuIndex	int
==	O
2	int
)	O
{	O
endme	int
=	O
1	int
;	O
break	O
;	O
}	O
menuIndex	int
=	O
2	int
;	O
refreshWindows	()->(void)
(	O
)	O
;	O
goto	O
loop	O
;	O
}	O
break	O
;	O
case	O
(	O
'h'	O
)	O
:	O
if	O
(	O
ALT	int
)	O
{	O
if	O
(	O
menuIndex	int
==	O
3	int
)	O
{	O
endme	int
=	O
1	int
;	O
break	O
;	O
}	O
menuIndex	int
=	O
3	int
;	O
refreshWindows	()->(void)
(	O
)	O
;	O
goto	O
loop	O
;	O
}	O
break	O
;	O
case	O
(	O
'g'	O
)	O
:	O
if	O
(	O
GNU_DOS_LEVEL	int
<	O
3	int
)	O
break	O
;	O
if	O
(	O
!	O
CTRL	int
)	O
break	O
;	O
doEsc	()->(void)
(	O
)	O
;	O
break	O
;	O
case	O
(	O
ESC_KEY	int
)	O
:	O
if	O
(	O
GNU_DOS_LEVEL	int
>	O
2	int
)	O
break	O
;	O
doEsc	()->(void)
(	O
)	O
;	O
break	O
;	O
case	O
(	O
'p'	O
)	O
:	O
if	O
(	O
GNU_DOS_LEVEL	int
<	O
2	int
)	O
break	O
;	O
if	O
(	O
!	O
CTRL	int
)	O
break	O
;	O
doUpDown	(int)->(void)
(	O
-	O
1	int
)	O
;	O
break	O
;	O
case	O
(	O
UP_KEY	int
)	O
:	O
if	O
(	O
GNU_DOS_LEVEL	int
>	O
1	int
)	O
break	O
;	O
doUpDown	(int)->(void)
(	O
-	O
1	int
)	O
;	O
break	O
;	O
case	O
(	O
'n'	O
)	O
:	O
if	O
(	O
GNU_DOS_LEVEL	int
<	O
2	int
)	O
break	O
;	O
if	O
(	O
!	O
CTRL	int
)	O
break	O
;	O
doUpDown	(int)->(void)
(	O
1	int
)	O
;	O
break	O
;	O
case	O
(	O
DOWN_KEY	int
)	O
:	O
if	O
(	O
GNU_DOS_LEVEL	int
>	O
1	int
)	O
break	O
;	O
doUpDown	(int)->(void)
(	O
1	int
)	O
;	O
break	O
;	O
case	O
(	O
RIGHT_KEY	int
)	O
:	O
if	O
(	O
GNU_DOS_LEVEL	int
>	O
1	int
)	O
break	O
;	O
doRightLeft	(int)->(void)
(	O
1	int
)	O
;	O
goto	O
loop	O
;	O
break	O
;	O
case	O
(	O
'b'	O
)	O
:	O
if	O
(	O
GNU_DOS_LEVEL	int
<	O
2	int
)	O
break	O
;	O
if	O
(	O
!	O
CTRL	int
)	O
break	O
;	O
doRightLeft	(int)->(void)
(	O
-	O
1	int
)	O
;	O
goto	O
loop	O
;	O
break	O
;	O
case	O
(	O
LEFT_KEY	int
)	O
:	O
if	O
(	O
GNU_DOS_LEVEL	int
>	O
1	int
)	O
break	O
;	O
doRightLeft	(int)->(void)
(	O
-	O
1	int
)	O
;	O
goto	O
loop	O
;	O
break	O
;	O
case	O
(	O
ENTER_KEY	int
)	O
:	O
showCursor	()->(void)
(	O
)	O
;	O
curMenu	*(struct(array(int),*(*(char)),int,*(*(()->(void)))))
->	O
func	*(*(()->(void)))
[	O
mSelect	int
]	O
(	O
)	O
;	O
endme	int
=	O
1	int
;	O
break	O
;	O
}	O
}	O
setScreenColorsI	(int)->(void)
(	O
COLOR_WINDOW	int
)	O
;	O
refreshWindows	()->(void)
(	O
)	O
;	O
hideCursor	()->(void)
(	O
)	O
;	O
fflush	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
}	O
