static	O
char	O
*	O
find_variable	(*(struct(array(*(struct(*(struct(*(struct`),*(struct`),*(char),*(char))),*(struct(*(struct`),*(struct`),*(char),*(char))),*(char),*(char)))))),*(char),*(char))->(*(char))
(	O
catalog_t	struct(array(*(struct(*(struct(*(struct`),*(struct`),*(char),*(char))),*(struct(*(struct`),*(struct`),*(char),*(char))),*(char),*(char)))))
*	O
context	*(struct(array(*(struct(*(struct(*(struct`),*(struct`),*(char),*(char))),*(struct(*(struct`),*(struct`),*(char),*(char))),*(char),*(char))))))
,	O
const	O
char	O
*	O
name	*(char)
,	O
const	O
char	O
*	O
newvalue	*(char)
)	O
{	O
int	O
r	int
=	O
0	int
;	O
int	O
hash	int
=	O
strlen	(*(char))->(long)
(	O
name	*(char)
)	O
;	O
struct	O
varnames	struct(*(struct(*(struct(*(struct`),*(struct`),*(char),*(char))),*(struct(*(struct`),*(struct`),*(char),*(char))),*(char),*(char))),*(struct(*(struct(*(struct`),*(struct`),*(char),*(char))),*(struct(*(struct`),*(struct`),*(char),*(char))),*(char),*(char))),*(char),*(char))
*	O
current	*(struct(*(struct(*(struct`),*(struct`),*(char),*(char))),*(struct(*(struct`),*(struct`),*(char),*(char))),*(char),*(char)))
,	O
*	O
last	*(struct(*(struct(*(struct`),*(struct`),*(char),*(char))),*(struct(*(struct`),*(struct`),*(char),*(char))),*(char),*(char)))
,	O
*	O
new	*(struct(*(struct(*(struct`),*(struct`),*(char),*(char))),*(struct(*(struct`),*(struct`),*(char),*(char))),*(char),*(char)))
;	O
hash	int
=	O
(	O
(	O
unsigned	O
char	O
)	O
(	O
name	*(char)
[	O
0	int
]	O
)	O
+	O
(	O
unsigned	O
char	O
)	O
(	O
name	*(char)
[	O
hash	int
-	O
1	int
]	O
)	O
+	O
hash	int
)	O
%	O
(	O
unsigned	O
int	O
)	O
CHASHMAX	int
;	O
current	*(struct(*(struct(*(struct`),*(struct`),*(char),*(char))),*(struct(*(struct`),*(struct`),*(char),*(char))),*(char),*(char)))
=	O
last	*(struct(*(struct(*(struct`),*(struct`),*(char),*(char))),*(struct(*(struct`),*(struct`),*(char),*(char))),*(char),*(char)))
=	O
context	*(struct(array(*(struct(*(struct(*(struct`),*(struct`),*(char),*(char))),*(struct(*(struct`),*(struct`),*(char),*(char))),*(char),*(char))))))
->	O
root	array(*(struct(*(struct(*(struct`),*(struct`),*(char),*(char))),*(struct(*(struct`),*(struct`),*(char),*(char))),*(char),*(char))))
[	O
hash	int
]	O
;	O
while	O
(	O
current	*(struct(*(struct(*(struct`),*(struct`),*(char),*(char))),*(struct(*(struct`),*(struct`),*(char),*(char))),*(char),*(char)))
!=	O
NULL	O
)	O
{	O
last	*(struct(*(struct(*(struct`),*(struct`),*(char),*(char))),*(struct(*(struct`),*(struct`),*(char),*(char))),*(char),*(char)))
=	O
current	*(struct(*(struct(*(struct`),*(struct`),*(char),*(char))),*(struct(*(struct`),*(struct`),*(char),*(char))),*(char),*(char)))
;	O
r	int
=	O
strcmp	(*(char),*(char))->(int)
(	O
current	*(struct(*(struct(*(struct`),*(struct`),*(char),*(char))),*(struct(*(struct`),*(struct`),*(char),*(char))),*(char),*(char)))
->	O
name	*(char)
,	O
name	*(char)
)	O
;	O
if	O
(	O
!	O
r	int
)	O
{	O
if	O
(	O
newvalue	*(char)
!=	O
NULL	O
)	O
{	O
free	(*(void))->(void)
(	O
current	*(struct(*(struct(*(struct`),*(struct`),*(char),*(char))),*(struct(*(struct`),*(struct`),*(char),*(char))),*(char),*(char)))
->	O
value	*(char)
)	O
;	O
current	*(struct(*(struct(*(struct`),*(struct`),*(char),*(char))),*(struct(*(struct`),*(struct`),*(char),*(char))),*(char),*(char)))
->	O
value	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
newvalue	*(char)
)	O
;	O
}	O
return	O
(	O
current	*(struct(*(struct(*(struct`),*(struct`),*(char),*(char))),*(struct(*(struct`),*(struct`),*(char),*(char))),*(char),*(char)))
->	O
value	*(char)
)	O
;	O
}	O
if	O
(	O
r	int
>	O
0	int
)	O
current	*(struct(*(struct(*(struct`),*(struct`),*(char),*(char))),*(struct(*(struct`),*(struct`),*(char),*(char))),*(char),*(char)))
=	O
current	*(struct(*(struct(*(struct`),*(struct`),*(char),*(char))),*(struct(*(struct`),*(struct`),*(char),*(char))),*(char),*(char)))
->	O
left	*(struct(*(struct(*(struct`),*(struct`),*(char),*(char))),*(struct(*(struct`),*(struct`),*(char),*(char))),*(char),*(char)))
;	O
else	O
current	*(struct(*(struct(*(struct`),*(struct`),*(char),*(char))),*(struct(*(struct`),*(struct`),*(char),*(char))),*(char),*(char)))
=	O
current	*(struct(*(struct(*(struct`),*(struct`),*(char),*(char))),*(struct(*(struct`),*(struct`),*(char),*(char))),*(char),*(char)))
->	O
right	*(struct(*(struct(*(struct`),*(struct`),*(char),*(char))),*(struct(*(struct`),*(struct`),*(char),*(char))),*(char),*(char)))
;	O
}	O
if	O
(	O
newvalue	*(char)
==	O
NULL	O
)	O
return	O
(	O
NULL	O
)	O
;	O
new	*(struct(*(struct(*(struct`),*(struct`),*(char),*(char))),*(struct(*(struct`),*(struct`),*(char),*(char))),*(char),*(char)))
=	O
(	O
struct	O
varnames	struct(*(struct(*(struct(*(struct`),*(struct`),*(char),*(char))),*(struct(*(struct`),*(struct`),*(char),*(char))),*(char),*(char))),*(struct(*(struct(*(struct`),*(struct`),*(char),*(char))),*(struct(*(struct`),*(struct`),*(char),*(char))),*(char),*(char))),*(char),*(char))
*	O
)	O
malloc	(long)->(*(void))
(	O
sizeof	O
(	O
struct	O
varnames	struct(*(struct(*(struct(*(struct`),*(struct`),*(char),*(char))),*(struct(*(struct`),*(struct`),*(char),*(char))),*(char),*(char))),*(struct(*(struct(*(struct`),*(struct`),*(char),*(char))),*(struct(*(struct`),*(struct`),*(char),*(char))),*(char),*(char))),*(char),*(char))
)	O
)	O
;	O
new	*(struct(*(struct(*(struct`),*(struct`),*(char),*(char))),*(struct(*(struct`),*(struct`),*(char),*(char))),*(char),*(char)))
->	O
name	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
name	*(char)
)	O
;	O
new	*(struct(*(struct(*(struct`),*(struct`),*(char),*(char))),*(struct(*(struct`),*(struct`),*(char),*(char))),*(char),*(char)))
->	O
value	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
newvalue	*(char)
)	O
;	O
new	*(struct(*(struct(*(struct`),*(struct`),*(char),*(char))),*(struct(*(struct`),*(struct`),*(char),*(char))),*(char),*(char)))
->	O
left	*(struct(*(struct(*(struct`),*(struct`),*(char),*(char))),*(struct(*(struct`),*(struct`),*(char),*(char))),*(char),*(char)))
=	O
NULL	O
;	O
new	*(struct(*(struct(*(struct`),*(struct`),*(char),*(char))),*(struct(*(struct`),*(struct`),*(char),*(char))),*(char),*(char)))
->	O
right	*(struct(*(struct(*(struct`),*(struct`),*(char),*(char))),*(struct(*(struct`),*(struct`),*(char),*(char))),*(char),*(char)))
=	O
NULL	O
;	O
if	O
(	O
last	*(struct(*(struct(*(struct`),*(struct`),*(char),*(char))),*(struct(*(struct`),*(struct`),*(char),*(char))),*(char),*(char)))
==	O
NULL	O
)	O
{	O
context	*(struct(array(*(struct(*(struct(*(struct`),*(struct`),*(char),*(char))),*(struct(*(struct`),*(struct`),*(char),*(char))),*(char),*(char))))))
->	O
root	array(*(struct(*(struct(*(struct`),*(struct`),*(char),*(char))),*(struct(*(struct`),*(struct`),*(char),*(char))),*(char),*(char))))
[	O
hash	int
]	O
=	O
new	*(struct(*(struct(*(struct`),*(struct`),*(char),*(char))),*(struct(*(struct`),*(struct`),*(char),*(char))),*(char),*(char)))
;	O
}	O
else	O
{	O
if	O
(	O
r	int
>	O
0	int
)	O
last	*(struct(*(struct(*(struct`),*(struct`),*(char),*(char))),*(struct(*(struct`),*(struct`),*(char),*(char))),*(char),*(char)))
->	O
left	*(struct(*(struct(*(struct`),*(struct`),*(char),*(char))),*(struct(*(struct`),*(struct`),*(char),*(char))),*(char),*(char)))
=	O
new	*(struct(*(struct(*(struct`),*(struct`),*(char),*(char))),*(struct(*(struct`),*(struct`),*(char),*(char))),*(char),*(char)))
;	O
else	O
last	*(struct(*(struct(*(struct`),*(struct`),*(char),*(char))),*(struct(*(struct`),*(struct`),*(char),*(char))),*(char),*(char)))
->	O
right	*(struct(*(struct(*(struct`),*(struct`),*(char),*(char))),*(struct(*(struct`),*(struct`),*(char),*(char))),*(char),*(char)))
=	O
new	*(struct(*(struct(*(struct`),*(struct`),*(char),*(char))),*(struct(*(struct`),*(struct`),*(char),*(char))),*(char),*(char)))
;	O
}	O
return	O
(	O
new	*(struct(*(struct(*(struct`),*(struct`),*(char),*(char))),*(struct(*(struct`),*(struct`),*(char),*(char))),*(char),*(char)))
->	O
value	*(char)
)	O
;	O
}	O
static	O
void	O
free_node	(*(struct(*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)),*(char),*(char))))->(void)
(	O
struct	O
varnames	struct(*(struct(*(struct(*(struct`),*(struct`),*(char),*(char))),*(struct(*(struct`),*(struct`),*(char),*(char))),*(char),*(char))),*(struct(*(struct(*(struct`),*(struct`),*(char),*(char))),*(struct(*(struct`),*(struct`),*(char),*(char))),*(char),*(char))),*(char),*(char))
*	O
node	*(struct(*(struct(*(struct`),*(struct`),*(char),*(char))),*(struct(*(struct`),*(struct`),*(char),*(char))),*(char),*(char)))
)	O
{	O
while	O
(	O
node	*(struct(*(struct(*(struct`),*(struct`),*(char),*(char))),*(struct(*(struct`),*(struct`),*(char),*(char))),*(char),*(char)))
!=	O
NULL	O
)	O
{	O
struct	O
varnames	struct(*(struct(*(struct(*(struct`),*(struct`),*(char),*(char))),*(struct(*(struct`),*(struct`),*(char),*(char))),*(char),*(char))),*(struct(*(struct(*(struct`),*(struct`),*(char),*(char))),*(struct(*(struct`),*(struct`),*(char),*(char))),*(char),*(char))),*(char),*(char))
*	O
nextnode	*(struct(*(struct(*(struct`),*(struct`),*(char),*(char))),*(struct(*(struct`),*(struct`),*(char),*(char))),*(char),*(char)))
;	O
free_node	(*(struct(*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)),*(char),*(char))))->(void)
(	O
node	*(struct(*(struct(*(struct`),*(struct`),*(char),*(char))),*(struct(*(struct`),*(struct`),*(char),*(char))),*(char),*(char)))
->	O
left	*(struct(*(struct(*(struct`),*(struct`),*(char),*(char))),*(struct(*(struct`),*(struct`),*(char),*(char))),*(char),*(char)))
)	O
;	O
nextnode	*(struct(*(struct(*(struct`),*(struct`),*(char),*(char))),*(struct(*(struct`),*(struct`),*(char),*(char))),*(char),*(char)))
=	O
node	*(struct(*(struct(*(struct`),*(struct`),*(char),*(char))),*(struct(*(struct`),*(struct`),*(char),*(char))),*(char),*(char)))
->	O
right	*(struct(*(struct(*(struct`),*(struct`),*(char),*(char))),*(struct(*(struct`),*(struct`),*(char),*(char))),*(char),*(char)))
;	O
free	(*(void))->(void)
(	O
node	*(struct(*(struct(*(struct`),*(struct`),*(char),*(char))),*(struct(*(struct`),*(struct`),*(char),*(char))),*(char),*(char)))
->	O
name	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
node	*(struct(*(struct(*(struct`),*(struct`),*(char),*(char))),*(struct(*(struct`),*(struct`),*(char),*(char))),*(char),*(char)))
->	O
value	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
node	*(struct(*(struct(*(struct`),*(struct`),*(char),*(char))),*(struct(*(struct`),*(struct`),*(char),*(char))),*(char),*(char)))
)	O
;	O
node	*(struct(*(struct(*(struct`),*(struct`),*(char),*(char))),*(struct(*(struct`),*(struct`),*(char),*(char))),*(char),*(char)))
=	O
nextnode	*(struct(*(struct(*(struct`),*(struct`),*(char),*(char))),*(struct(*(struct`),*(struct`),*(char),*(char))),*(char),*(char)))
;	O
}	O
}	O
void	O
free_catalog	(*(struct(array(*(struct(*(struct(*(struct`),*(struct`),*(char),*(char))),*(struct(*(struct`),*(struct`),*(char),*(char))),*(char),*(char)))))))->(void)
(	O
catalog_t	struct(array(*(struct(*(struct(*(struct`),*(struct`),*(char),*(char))),*(struct(*(struct`),*(struct`),*(char),*(char))),*(char),*(char)))))
*	O
context	*(struct(array(*(struct(*(struct(*(struct`),*(struct`),*(char),*(char))),*(struct(*(struct`),*(struct`),*(char),*(char))),*(char),*(char))))))
)	O
{	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
CHASHMAX	int
;	O
i	int
++	O
)	O
{	O
free_node	(*(struct(*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)),*(char),*(char))))->(void)
(	O
context	*(struct(array(*(struct(*(struct(*(struct`),*(struct`),*(char),*(char))),*(struct(*(struct`),*(struct`),*(char),*(char))),*(char),*(char))))))
->	O
root	array(*(struct(*(struct(*(struct`),*(struct`),*(char),*(char))),*(struct(*(struct`),*(struct`),*(char),*(char))),*(char),*(char))))
[	O
i	int
]	O
)	O
;	O
context	*(struct(array(*(struct(*(struct(*(struct`),*(struct`),*(char),*(char))),*(struct(*(struct`),*(struct`),*(char),*(char))),*(char),*(char))))))
->	O
root	array(*(struct(*(struct(*(struct`),*(struct`),*(char),*(char))),*(struct(*(struct`),*(struct`),*(char),*(char))),*(char),*(char))))
[	O
i	int
]	O
=	O
NULL	O
;	O
}	O
free	(*(void))->(void)
(	O
context	*(struct(array(*(struct(*(struct(*(struct`),*(struct`),*(char),*(char))),*(struct(*(struct`),*(struct`),*(char),*(char))),*(char),*(char))))))
)	O
;	O
}	O
static	O
catalog_t	struct(array(*(struct(*(struct(*(struct`),*(struct`),*(char),*(char))),*(struct(*(struct`),*(struct`),*(char),*(char))),*(char),*(char)))))
*	O
alloc_catalog	()->(*(struct(array(*(struct(*(struct(*(struct`),*(struct`),*(char),*(char))),*(struct(*(struct`),*(struct`),*(char),*(char))),*(char),*(char)))))))
(	O
void	O
)	O
{	O
int	O
i	int
;	O
catalog_t	struct(array(*(struct(*(struct(*(struct`),*(struct`),*(char),*(char))),*(struct(*(struct`),*(struct`),*(char),*(char))),*(char),*(char)))))
*	O
c	*(struct(array(*(struct(*(struct(*(struct`),*(struct`),*(char),*(char))),*(struct(*(struct`),*(struct`),*(char),*(char))),*(char),*(char))))))
;	O
c	*(struct(array(*(struct(*(struct(*(struct`),*(struct`),*(char),*(char))),*(struct(*(struct`),*(struct`),*(char),*(char))),*(char),*(char))))))
=	O
(	O
catalog_t	struct(array(*(struct(*(struct(*(struct`),*(struct`),*(char),*(char))),*(struct(*(struct`),*(struct`),*(char),*(char))),*(char),*(char)))))
*	O
)	O
malloc	(long)->(*(void))
(	O
sizeof	O
(	O
catalog_t	struct(array(*(struct(*(struct(*(struct`),*(struct`),*(char),*(char))),*(struct(*(struct`),*(struct`),*(char),*(char))),*(char),*(char)))))
)	O
)	O
;	O
if	O
(	O
c	*(struct(array(*(struct(*(struct(*(struct`),*(struct`),*(char),*(char))),*(struct(*(struct`),*(struct`),*(char),*(char))),*(char),*(char))))))
==	O
NULL	O
)	O
return	O
NULL	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
CHASHMAX	int
;	O
i	int
++	O
)	O
c	*(struct(array(*(struct(*(struct(*(struct`),*(struct`),*(char),*(char))),*(struct(*(struct`),*(struct`),*(char),*(char))),*(char),*(char))))))
->	O
root	array(*(struct(*(struct(*(struct`),*(struct`),*(char),*(char))),*(struct(*(struct`),*(struct`),*(char),*(char))),*(char),*(char))))
[	O
i	int
]	O
=	O
NULL	O
;	O
return	O
c	*(struct(array(*(struct(*(struct(*(struct`),*(struct`),*(char),*(char))),*(struct(*(struct`),*(struct`),*(char),*(char))),*(char),*(char))))))
;	O
}	O
catalog_t	struct(array(*(struct(*(struct(*(struct`),*(struct`),*(char),*(char))),*(struct(*(struct`),*(struct`),*(char),*(char))),*(char),*(char)))))
*	O
load_catalog	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(*(char)))->(*(struct(array(*(struct(*(struct(*(struct`),*(struct`),*(char),*(char))),*(struct(*(struct`),*(struct`),*(char),*(char))),*(char),*(char)))))))
(	O
xio_file	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
f	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
char	O
*	O
*	O
error	*(*(char))
)	O
{	O
int	O
i	int
;	O
int	O
line	int
=	O
1	int
;	O
int	O
size	int
;	O
int	O
c	*(struct(array(*(struct(*(struct(*(struct`),*(struct`),*(char),*(char))),*(struct(*(struct`),*(struct`),*(char),*(char))),*(char),*(char))))))
;	O
catalog_t	struct(array(*(struct(*(struct(*(struct`),*(struct`),*(char),*(char))),*(struct(*(struct`),*(struct`),*(char),*(char))),*(char),*(char)))))
*	O
catalog	struct(array(*(struct(*(struct(*(struct`),*(struct`),*(char),*(char))),*(struct(*(struct`),*(struct`),*(char),*(char))),*(char),*(char)))))
=	O
alloc_catalog	()->(*(struct(array(*(struct(*(struct(*(struct`),*(struct`),*(char),*(char))),*(struct(*(struct`),*(struct`),*(char),*(char))),*(char),*(char)))))))
(	O
)	O
;	O
static	O
char	O
errort	array(char)
[	O
40	int
]	O
;	O
char	O
name	*(char)
[	O
1024	int
]	O
;	O
char	O
value	*(char)
[	O
1024	int
]	O
;	O
if	O
(	O
f	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
==	O
NULL	O
)	O
{	O
*	O
error	*(*(char))
=	O
"File could not be opended"	*(char)
;	O
free_catalog	(*(struct(array(*(struct(*(struct(*(struct`),*(struct`),*(char),*(char))),*(struct(*(struct`),*(struct`),*(char),*(char))),*(char),*(char)))))))->(void)
(	O
catalog	struct(array(*(struct(*(struct(*(struct`),*(struct`),*(char),*(char))),*(struct(*(struct`),*(struct`),*(char),*(char))),*(char),*(char)))))
)	O
;	O
return	O
NULL	O
;	O
}	O
while	O
(	O
!	O
xio_feof	O
(	O
f	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
)	O
{	O
do	O
{	O
c	*(struct(array(*(struct(*(struct(*(struct`),*(struct`),*(char),*(char))),*(struct(*(struct`),*(struct`),*(char),*(char))),*(char),*(char))))))
=	O
xio_getc	O
(	O
f	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
if	O
(	O
c	*(struct(array(*(struct(*(struct(*(struct`),*(struct`),*(char),*(char))),*(struct(*(struct`),*(struct`),*(char),*(char))),*(char),*(char))))))
==	O
'\n'	O
)	O
line	int
++	O
;	O
if	O
(	O
c	*(struct(array(*(struct(*(struct(*(struct`),*(struct`),*(char),*(char))),*(struct(*(struct`),*(struct`),*(char),*(char))),*(char),*(char))))))
==	O
'#'	O
)	O
{	O
while	O
(	O
(	O
c	*(struct(array(*(struct(*(struct(*(struct`),*(struct`),*(char),*(char))),*(struct(*(struct`),*(struct`),*(char),*(char))),*(char),*(char))))))
=	O
xio_getc	O
(	O
f	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
)	O
!=	O
'\n'	O
&&	O
c	*(struct(array(*(struct(*(struct(*(struct`),*(struct`),*(char),*(char))),*(struct(*(struct`),*(struct`),*(char),*(char))),*(char),*(char))))))
!=	O
XIO_EOF	O
)	O
;	O
line	int
++	O
;	O
}	O
}	O
while	O
(	O
c	*(struct(array(*(struct(*(struct(*(struct`),*(struct`),*(char),*(char))),*(struct(*(struct`),*(struct`),*(char),*(char))),*(char),*(char))))))
==	O
' '	O
||	O
c	*(struct(array(*(struct(*(struct(*(struct`),*(struct`),*(char),*(char))),*(struct(*(struct`),*(struct`),*(char),*(char))),*(char),*(char))))))
==	O
'\n'	O
||	O
c	*(struct(array(*(struct(*(struct(*(struct`),*(struct`),*(char),*(char))),*(struct(*(struct`),*(struct`),*(char),*(char))),*(char),*(char))))))
==	O
'\r'	O
||	O
c	*(struct(array(*(struct(*(struct(*(struct`),*(struct`),*(char),*(char))),*(struct(*(struct`),*(struct`),*(char),*(char))),*(char),*(char))))))
==	O
'\t'	O
)	O
;	O
if	O
(	O
c	*(struct(array(*(struct(*(struct(*(struct`),*(struct`),*(char),*(char))),*(struct(*(struct`),*(struct`),*(char),*(char))),*(char),*(char))))))
==	O
XIO_EOF	O
)	O
{	O
if	O
(	O
xio_feof	O
(	O
f	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
)	O
break	O
;	O
free_catalog	(*(struct(array(*(struct(*(struct(*(struct`),*(struct`),*(char),*(char))),*(struct(*(struct`),*(struct`),*(char),*(char))),*(char),*(char)))))))->(void)
(	O
catalog	struct(array(*(struct(*(struct(*(struct`),*(struct`),*(char),*(char))),*(struct(*(struct`),*(struct`),*(char),*(char))),*(char),*(char)))))
)	O
;	O
seterror	O
(	O
"read error"	*(char)
)	O
;	O
fclose	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
f	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
return	O
NULL	O
;	O
}	O
i	int
=	O
0	int
;	O
do	O
{	O
name	*(char)
[	O
i	int
]	O
=	O
c	*(struct(array(*(struct(*(struct(*(struct`),*(struct`),*(char),*(char))),*(struct(*(struct`),*(struct`),*(char),*(char))),*(char),*(char))))))
;	O
i	int
++	O
;	O
c	*(struct(array(*(struct(*(struct(*(struct`),*(struct`),*(char),*(char))),*(struct(*(struct`),*(struct`),*(char),*(char))),*(char),*(char))))))
=	O
xio_getc	O
(	O
f	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
if	O
(	O
c	*(struct(array(*(struct(*(struct(*(struct`),*(struct`),*(char),*(char))),*(struct(*(struct`),*(struct`),*(char),*(char))),*(char),*(char))))))
==	O
'\n'	O
)	O
line	int
++	O
;	O
if	O
(	O
i	int
==	O
1024	int
)	O
{	O
seterror	O
(	O
"Name is too long(1024 or more characters)"	*(char)
)	O
;	O
free_catalog	(*(struct(array(*(struct(*(struct(*(struct`),*(struct`),*(char),*(char))),*(struct(*(struct`),*(struct`),*(char),*(char))),*(char),*(char)))))))->(void)
(	O
catalog	struct(array(*(struct(*(struct(*(struct`),*(struct`),*(char),*(char))),*(struct(*(struct`),*(struct`),*(char),*(char))),*(char),*(char)))))
)	O
;	O
fclose	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
f	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
return	O
NULL	O
;	O
}	O
}	O
while	O
(	O
c	*(struct(array(*(struct(*(struct(*(struct`),*(struct`),*(char),*(char))),*(struct(*(struct`),*(struct`),*(char),*(char))),*(char),*(char))))))
!=	O
'\n'	O
&&	O
c	*(struct(array(*(struct(*(struct(*(struct`),*(struct`),*(char),*(char))),*(struct(*(struct`),*(struct`),*(char),*(char))),*(char),*(char))))))
!=	O
' '	O
&&	O
c	*(struct(array(*(struct(*(struct(*(struct`),*(struct`),*(char),*(char))),*(struct(*(struct`),*(struct`),*(char),*(char))),*(char),*(char))))))
!=	O
'\t'	O
&&	O
c	*(struct(array(*(struct(*(struct(*(struct`),*(struct`),*(char),*(char))),*(struct(*(struct`),*(struct`),*(char),*(char))),*(char),*(char))))))
!=	O
XIO_EOF	O
)	O
;	O
while	O
(	O
c	*(struct(array(*(struct(*(struct(*(struct`),*(struct`),*(char),*(char))),*(struct(*(struct`),*(struct`),*(char),*(char))),*(char),*(char))))))
==	O
' '	O
||	O
c	*(struct(array(*(struct(*(struct(*(struct`),*(struct`),*(char),*(char))),*(struct(*(struct`),*(struct`),*(char),*(char))),*(char),*(char))))))
==	O
'\n'	O
||	O
c	*(struct(array(*(struct(*(struct(*(struct`),*(struct`),*(char),*(char))),*(struct(*(struct`),*(struct`),*(char),*(char))),*(char),*(char))))))
==	O
'\r'	O
||	O
c	*(struct(array(*(struct(*(struct(*(struct`),*(struct`),*(char),*(char))),*(struct(*(struct`),*(struct`),*(char),*(char))),*(char),*(char))))))
==	O
'\t'	O
)	O
{	O
c	*(struct(array(*(struct(*(struct(*(struct`),*(struct`),*(char),*(char))),*(struct(*(struct`),*(struct`),*(char),*(char))),*(char),*(char))))))
=	O
xio_getc	O
(	O
f	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
if	O
(	O
c	*(struct(array(*(struct(*(struct(*(struct`),*(struct`),*(char),*(char))),*(struct(*(struct`),*(struct`),*(char),*(char))),*(char),*(char))))))
==	O
'\n'	O
)	O
line	int
++	O
;	O
if	O
(	O
c	*(struct(array(*(struct(*(struct(*(struct`),*(struct`),*(char),*(char))),*(struct(*(struct`),*(struct`),*(char),*(char))),*(char),*(char))))))
==	O
'#'	O
)	O
{	O
while	O
(	O
(	O
c	*(struct(array(*(struct(*(struct(*(struct`),*(struct`),*(char),*(char))),*(struct(*(struct`),*(struct`),*(char),*(char))),*(char),*(char))))))
=	O
xio_getc	O
(	O
f	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
)	O
!=	O
'\n'	O
&&	O
c	*(struct(array(*(struct(*(struct(*(struct`),*(struct`),*(char),*(char))),*(struct(*(struct`),*(struct`),*(char),*(char))),*(char),*(char))))))
!=	O
XIO_EOF	O
)	O
;	O
line	int
++	O
;	O
}	O
}	O
if	O
(	O
c	*(struct(array(*(struct(*(struct(*(struct`),*(struct`),*(char),*(char))),*(struct(*(struct`),*(struct`),*(char),*(char))),*(char),*(char))))))
==	O
XIO_EOF	O
)	O
{	O
if	O
(	O
xio_feof	O
(	O
f	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
)	O
seterror	O
(	O
"Inexpected end of file after name field"	*(char)
)	O
;	O
else	O
seterror	O
(	O
"read error"	*(char)
)	O
;	O
free_catalog	(*(struct(array(*(struct(*(struct(*(struct`),*(struct`),*(char),*(char))),*(struct(*(struct`),*(struct`),*(char),*(char))),*(char),*(char)))))))->(void)
(	O
catalog	struct(array(*(struct(*(struct(*(struct`),*(struct`),*(char),*(char))),*(struct(*(struct`),*(struct`),*(char),*(char))),*(char),*(char)))))
)	O
;	O
fclose	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
f	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
return	O
NULL	O
;	O
}	O
name	*(char)
[	O
i	int
]	O
=	O
0	int
;	O
if	O
(	O
c	*(struct(array(*(struct(*(struct(*(struct`),*(struct`),*(char),*(char))),*(struct(*(struct`),*(struct`),*(char),*(char))),*(char),*(char))))))
!=	O
'"'	O
)	O
{	O
seterror	O
(	O
"Begin of value field expected (\")"	*(char)
)	O
;	O
free_catalog	(*(struct(array(*(struct(*(struct(*(struct`),*(struct`),*(char),*(char))),*(struct(*(struct`),*(struct`),*(char),*(char))),*(char),*(char)))))))->(void)
(	O
catalog	struct(array(*(struct(*(struct(*(struct`),*(struct`),*(char),*(char))),*(struct(*(struct`),*(struct`),*(char),*(char))),*(char),*(char)))))
)	O
;	O
fclose	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
f	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
return	O
NULL	O
;	O
}	O
c	*(struct(array(*(struct(*(struct(*(struct`),*(struct`),*(char),*(char))),*(struct(*(struct`),*(struct`),*(char),*(char))),*(char),*(char))))))
=	O
xio_getc	O
(	O
f	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
if	O
(	O
c	*(struct(array(*(struct(*(struct(*(struct`),*(struct`),*(char),*(char))),*(struct(*(struct`),*(struct`),*(char),*(char))),*(char),*(char))))))
==	O
'\n'	O
)	O
line	int
++	O
;	O
i	int
=	O
0	int
;	O
size	int
=	O
0	int
;	O
do	O
{	O
if	O
(	O
c	*(struct(array(*(struct(*(struct(*(struct`),*(struct`),*(char),*(char))),*(struct(*(struct`),*(struct`),*(char),*(char))),*(char),*(char))))))
==	O
'\\'	O
)	O
{	O
value	*(char)
[	O
i	int
]	O
=	O
xio_getc	O
(	O
f	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
if	O
(	O
c	*(struct(array(*(struct(*(struct(*(struct`),*(struct`),*(char),*(char))),*(struct(*(struct`),*(struct`),*(char),*(char))),*(char),*(char))))))
==	O
'\n'	O
)	O
line	int
++	O
;	O
}	O
else	O
value	*(char)
[	O
i	int
]	O
=	O
c	*(struct(array(*(struct(*(struct(*(struct`),*(struct`),*(char),*(char))),*(struct(*(struct`),*(struct`),*(char),*(char))),*(char),*(char))))))
;	O
i	int
++	O
;	O
c	*(struct(array(*(struct(*(struct(*(struct`),*(struct`),*(char),*(char))),*(struct(*(struct`),*(struct`),*(char),*(char))),*(char),*(char))))))
=	O
xio_getc	O
(	O
f	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
if	O
(	O
c	*(struct(array(*(struct(*(struct(*(struct`),*(struct`),*(char),*(char))),*(struct(*(struct`),*(struct`),*(char),*(char))),*(char),*(char))))))
==	O
'\n'	O
)	O
line	int
++	O
,	O
size	int
=	O
0	int
;	O
if	O
(	O
size	int
==	O
40	int
&&	O
c	*(struct(array(*(struct(*(struct(*(struct`),*(struct`),*(char),*(char))),*(struct(*(struct`),*(struct`),*(char),*(char))),*(char),*(char))))))
!=	O
'"'	O
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"Warning - too long text at line %i\n"	*(char)
,	O
line	int
)	O
;	O
}	O
size	int
++	O
;	O
if	O
(	O
i	int
==	O
1024	int
)	O
{	O
seterror	O
(	O
"Value is too long(1024 or more characters)"	*(char)
)	O
;	O
free_catalog	(*(struct(array(*(struct(*(struct(*(struct`),*(struct`),*(char),*(char))),*(struct(*(struct`),*(struct`),*(char),*(char))),*(char),*(char)))))))->(void)
(	O
catalog	struct(array(*(struct(*(struct(*(struct`),*(struct`),*(char),*(char))),*(struct(*(struct`),*(struct`),*(char),*(char))),*(char),*(char)))))
)	O
;	O
fclose	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
f	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
return	O
NULL	O
;	O
}	O
}	O
while	O
(	O
c	*(struct(array(*(struct(*(struct(*(struct`),*(struct`),*(char),*(char))),*(struct(*(struct`),*(struct`),*(char),*(char))),*(char),*(char))))))
!=	O
'"'	O
&&	O
c	*(struct(array(*(struct(*(struct(*(struct`),*(struct`),*(char),*(char))),*(struct(*(struct`),*(struct`),*(char),*(char))),*(char),*(char))))))
!=	O
XIO_EOF	O
)	O
;	O
if	O
(	O
c	*(struct(array(*(struct(*(struct(*(struct`),*(struct`),*(char),*(char))),*(struct(*(struct`),*(struct`),*(char),*(char))),*(char),*(char))))))
==	O
XIO_EOF	O
)	O
{	O
seterror	O
(	O
"Inexpeced end of file in value filed"	*(char)
)	O
;	O
free_catalog	(*(struct(array(*(struct(*(struct(*(struct`),*(struct`),*(char),*(char))),*(struct(*(struct`),*(struct`),*(char),*(char))),*(char),*(char)))))))->(void)
(	O
catalog	struct(array(*(struct(*(struct(*(struct`),*(struct`),*(char),*(char))),*(struct(*(struct`),*(struct`),*(char),*(char))),*(char),*(char)))))
)	O
;	O
fclose	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
f	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
return	O
NULL	O
;	O
}	O
value	*(char)
[	O
i	int
]	O
=	O
0	int
;	O
find_variable	(*(struct(array(*(struct(*(struct(*(struct`),*(struct`),*(char),*(char))),*(struct(*(struct`),*(struct`),*(char),*(char))),*(char),*(char)))))),*(char),*(char))->(*(char))
(	O
catalog	struct(array(*(struct(*(struct(*(struct`),*(struct`),*(char),*(char))),*(struct(*(struct`),*(struct`),*(char),*(char))),*(char),*(char)))))
,	O
name	*(char)
,	O
value	*(char)
)	O
;	O
}	O
fclose	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
f	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
return	O
(	O
catalog	struct(array(*(struct(*(struct(*(struct`),*(struct`),*(char),*(char))),*(struct(*(struct`),*(struct`),*(char),*(char))),*(char),*(char)))))
)	O
;	O
}	O
char	O
*	O
find_text	(*(struct(array(*(struct(*(struct(*(struct`),*(struct`),*(char),*(char))),*(struct(*(struct`),*(struct`),*(char),*(char))),*(char),*(char)))))),*(char))->(*(char))
(	O
catalog_t	struct(array(*(struct(*(struct(*(struct`),*(struct`),*(char),*(char))),*(struct(*(struct`),*(struct`),*(char),*(char))),*(char),*(char)))))
*	O
catalog	struct(array(*(struct(*(struct(*(struct`),*(struct`),*(char),*(char))),*(struct(*(struct`),*(struct`),*(char),*(char))),*(char),*(char)))))
,	O
char	O
*	O
name	*(char)
)	O
{	O
return	O
(	O
find_variable	(*(struct(array(*(struct(*(struct(*(struct`),*(struct`),*(char),*(char))),*(struct(*(struct`),*(struct`),*(char),*(char))),*(char),*(char)))))),*(char),*(char))->(*(char))
(	O
catalog	struct(array(*(struct(*(struct(*(struct`),*(struct`),*(char),*(char))),*(struct(*(struct`),*(struct`),*(char),*(char))),*(char),*(char)))))
,	O
name	*(char)
,	O
NULL	O
)	O
)	O
;	O
}	O
