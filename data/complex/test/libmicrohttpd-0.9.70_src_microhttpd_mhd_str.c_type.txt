_MHD_static_inline	O
bool	bool
isasciiupper	(char)->(bool)
(	O
char	O
c	char
)	O
{	O
return	O
(	O
c	char
>=	O
'A'	O
)	O
&&	O
(	O
c	char
<=	O
'Z'	O
)	O
;	O
}	O
_MHD_static_inline	O
bool	bool
isasciidigit	(char)->(bool)
(	O
char	O
c	char
)	O
{	O
return	O
(	O
c	char
>=	O
'0'	O
)	O
&&	O
(	O
c	char
<=	O
'9'	O
)	O
;	O
}	O
_MHD_static_inline	O
char	O
toasciilower	(char)->(char)
(	O
char	O
c	char
)	O
{	O
return	O
isasciiupper	(char)->(bool)
(	O
c	char
)	O
?	O
(	O
c	char
-	O
'A'	O
+	O
'a'	O
)	O
:	O
c	char
;	O
}	O
_MHD_static_inline	O
int	O
toxdigitvalue	(char)->(int)
(	O
char	O
c	char
)	O
{	O
if	O
(	O
isasciidigit	(char)->(bool)
(	O
c	char
)	O
)	O
return	O
(	O
unsigned	O
char	O
)	O
(	O
c	char
-	O
'0'	O
)	O
;	O
if	O
(	O
(	O
c	char
>=	O
'A'	O
)	O
&&	O
(	O
c	char
<=	O
'F'	O
)	O
)	O
return	O
(	O
unsigned	O
char	O
)	O
(	O
c	char
-	O
'A'	O
+	O
10	int
)	O
;	O
if	O
(	O
(	O
c	char
>=	O
'a'	O
)	O
&&	O
(	O
c	char
<=	O
'f'	O
)	O
)	O
return	O
(	O
unsigned	O
char	O
)	O
(	O
c	char
-	O
'a'	O
+	O
10	int
)	O
;	O
return	O
-	O
1	int
;	O
}	O
int	O
MHD_str_equal_caseless_	(*(char),*(char))->(int)
(	O
const	O
char	O
*	O
str1	*(char)
,	O
const	O
char	O
*	O
str2	*(char)
)	O
{	O
while	O
(	O
0	int
!=	O
(	O
*	O
str1	*(char)
)	O
)	O
{	O
const	O
char	O
c1	char
=	O
*	O
str1	*(char)
;	O
const	O
char	O
c2	char
=	O
*	O
str2	*(char)
;	O
if	O
(	O
(	O
c1	char
!=	O
c2	char
)	O
&&	O
(	O
toasciilower	(char)->(char)
(	O
c1	char
)	O
!=	O
toasciilower	(char)->(char)
(	O
c2	char
)	O
)	O
)	O
return	O
0	int
;	O
str1	*(char)
++	O
;	O
str2	*(char)
++	O
;	O
}	O
return	O
0	int
==	O
(	O
*	O
str2	*(char)
)	O
;	O
}	O
int	O
MHD_str_equal_caseless_n_	(*(char),*(char),long)->(int)
(	O
const	O
char	O
*	O
const	O
str1	*(char)
,	O
const	O
char	O
*	O
const	O
str2	*(char)
,	O
size_t	long
maxlen	long
)	O
{	O
size_t	long
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
maxlen	long
;	O
++	O
i	long
)	O
{	O
const	O
char	O
c1	char
=	O
str1	*(char)
[	O
i	long
]	O
;	O
const	O
char	O
c2	char
=	O
str2	*(char)
[	O
i	long
]	O
;	O
if	O
(	O
0	int
==	O
c2	char
)	O
return	O
0	int
==	O
c1	char
;	O
if	O
(	O
(	O
c1	char
!=	O
c2	char
)	O
&&	O
(	O
toasciilower	(char)->(char)
(	O
c1	char
)	O
!=	O
toasciilower	(char)->(char)
(	O
c2	char
)	O
)	O
)	O
return	O
0	int
;	O
}	O
return	O
!	O
0	int
;	O
}	O
bool	bool
MHD_str_equal_caseless_bin_n_	(*(char),*(char),long)->(bool)
(	O
const	O
char	O
*	O
const	O
str1	*(char)
,	O
const	O
char	O
*	O
const	O
str2	*(char)
,	O
size_t	long
len	long
)	O
{	O
size_t	long
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
len	long
;	O
++	O
i	long
)	O
{	O
const	O
char	O
c1	char
=	O
str1	*(char)
[	O
i	long
]	O
;	O
const	O
char	O
c2	char
=	O
str2	*(char)
[	O
i	long
]	O
;	O
if	O
(	O
(	O
c1	char
!=	O
c2	char
)	O
&&	O
(	O
toasciilower	(char)->(char)
(	O
c1	char
)	O
!=	O
toasciilower	(char)->(char)
(	O
c2	char
)	O
)	O
)	O
return	O
0	int
;	O
}	O
return	O
!	O
0	int
;	O
}	O
bool	bool
MHD_str_has_token_caseless_	(*(char),*(char),long)->(bool)
(	O
const	O
char	O
*	O
str	*(char)
,	O
const	O
char	O
*	O
const	O
token	*(char)
,	O
size_t	long
token_len	long
)	O
{	O
if	O
(	O
0	int
==	O
token_len	long
)	O
return	O
false	int
;	O
while	O
(	O
0	int
!=	O
*	O
str	*(char)
)	O
{	O
size_t	long
i	long
;	O
while	O
(	O
' '	O
==	O
*	O
str	*(char)
||	O
'\t'	O
==	O
*	O
str	*(char)
||	O
','	O
==	O
*	O
str	*(char)
)	O
str	*(char)
++	O
;	O
i	long
=	O
0	int
;	O
while	O
(	O
1	int
)	O
{	O
const	O
char	O
sc	char
=	O
*	O
(	O
str	*(char)
++	O
)	O
;	O
const	O
char	O
tc	char
=	O
token	*(char)
[	O
i	long
++	O
]	O
;	O
if	O
(	O
0	int
==	O
sc	char
)	O
return	O
false	int
;	O
if	O
(	O
(	O
sc	char
!=	O
tc	char
)	O
&&	O
(	O
toasciilower	(char)->(char)
(	O
sc	char
)	O
!=	O
toasciilower	(char)->(char)
(	O
tc	char
)	O
)	O
)	O
break	O
;	O
if	O
(	O
i	long
>=	O
token_len	long
)	O
{	O
while	O
(	O
' '	O
==	O
*	O
str	*(char)
||	O
'\t'	O
==	O
*	O
str	*(char)
)	O
str	*(char)
++	O
;	O
if	O
(	O
(	O
0	int
==	O
*	O
str	*(char)
)	O
||	O
(	O
','	O
==	O
*	O
str	*(char)
)	O
)	O
return	O
true	int
;	O
break	O
;	O
}	O
}	O
while	O
(	O
0	int
!=	O
*	O
str	*(char)
&&	O
','	O
!=	O
*	O
str	*(char)
)	O
str	*(char)
++	O
;	O
}	O
return	O
false	int
;	O
}	O
size_t	long
MHD_str_to_uint64_	(*(char),*(long))->(long)
(	O
const	O
char	O
*	O
str	*(char)
,	O
uint64_t	long
*	O
out_val	*(long)
)	O
{	O
const	O
char	O
*	O
const	O
start	*(char)
=	O
str	*(char)
;	O
uint64_t	long
res	long
;	O
if	O
(	O
!	O
str	*(char)
||	O
!	O
out_val	*(long)
||	O
!	O
isasciidigit	(char)->(bool)
(	O
str	*(char)
[	O
0	int
]	O
)	O
)	O
return	O
0	int
;	O
res	long
=	O
0	int
;	O
do	O
{	O
const	O
int	O
digit	int
=	O
(	O
unsigned	O
char	O
)	O
(	O
*	O
str	*(char)
)	O
-	O
'0'	O
;	O
if	O
(	O
(	O
res	long
>	O
(	O
UINT64_MAX	O
/	O
10	int
)	O
)	O
||	O
(	O
(	O
res	long
==	O
(	O
UINT64_MAX	O
/	O
10	int
)	O
)	O
&&	O
(	O
(	O
uint64_t	long
)	O
digit	int
>	O
(	O
UINT64_MAX	O
%	O
10	int
)	O
)	O
)	O
)	O
return	O
0	int
;	O
res	long
*=	O
10	int
;	O
res	long
+=	O
digit	int
;	O
str	*(char)
++	O
;	O
}	O
while	O
(	O
isasciidigit	(char)->(bool)
(	O
*	O
str	*(char)
)	O
)	O
;	O
*	O
out_val	*(long)
=	O
res	long
;	O
return	O
str	*(char)
-	O
start	*(char)
;	O
}	O
size_t	long
MHD_str_to_uint64_n_	(*(char),long,*(long))->(long)
(	O
const	O
char	O
*	O
str	*(char)
,	O
size_t	long
maxlen	long
,	O
uint64_t	long
*	O
out_val	*(long)
)	O
{	O
uint64_t	long
res	long
;	O
size_t	long
i	long
;	O
if	O
(	O
!	O
str	*(char)
||	O
!	O
maxlen	long
||	O
!	O
out_val	*(long)
||	O
!	O
isasciidigit	(char)->(bool)
(	O
str	*(char)
[	O
0	int
]	O
)	O
)	O
return	O
0	int
;	O
res	long
=	O
0	int
;	O
i	long
=	O
0	int
;	O
do	O
{	O
const	O
int	O
digit	int
=	O
(	O
unsigned	O
char	O
)	O
str	*(char)
[	O
i	long
]	O
-	O
'0'	O
;	O
if	O
(	O
(	O
res	long
>	O
(	O
UINT64_MAX	O
/	O
10	int
)	O
)	O
||	O
(	O
(	O
res	long
==	O
(	O
UINT64_MAX	O
/	O
10	int
)	O
)	O
&&	O
(	O
(	O
uint64_t	long
)	O
digit	int
>	O
(	O
UINT64_MAX	O
%	O
10	int
)	O
)	O
)	O
)	O
return	O
0	int
;	O
res	long
*=	O
10	int
;	O
res	long
+=	O
digit	int
;	O
i	long
++	O
;	O
}	O
while	O
(	O
(	O
i	long
<	O
maxlen	long
)	O
&&	O
isasciidigit	(char)->(bool)
(	O
str	*(char)
[	O
i	long
]	O
)	O
)	O
;	O
*	O
out_val	*(long)
=	O
res	long
;	O
return	O
i	long
;	O
}	O
size_t	long
MHD_strx_to_uint32_	(*(char),*(int))->(long)
(	O
const	O
char	O
*	O
str	*(char)
,	O
uint32_t	int
*	O
out_val	*(long)
)	O
{	O
const	O
char	O
*	O
const	O
start	*(char)
=	O
str	*(char)
;	O
uint32_t	int
res	long
;	O
int	O
digit	int
;	O
if	O
(	O
!	O
str	*(char)
||	O
!	O
out_val	*(long)
)	O
return	O
0	int
;	O
res	long
=	O
0	int
;	O
digit	int
=	O
toxdigitvalue	(char)->(int)
(	O
*	O
str	*(char)
)	O
;	O
while	O
(	O
digit	int
>=	O
0	int
)	O
{	O
if	O
(	O
(	O
res	long
<	O
(	O
UINT32_MAX	O
/	O
16	int
)	O
)	O
||	O
(	O
(	O
res	long
==	O
(	O
UINT32_MAX	O
/	O
16	int
)	O
)	O
&&	O
(	O
(	O
uint32_t	int
)	O
digit	int
<=	O
(	O
UINT32_MAX	O
%	O
16	int
)	O
)	O
)	O
)	O
{	O
res	long
*=	O
16	int
;	O
res	long
+=	O
digit	int
;	O
}	O
else	O
return	O
0	int
;	O
str	*(char)
++	O
;	O
digit	int
=	O
toxdigitvalue	(char)->(int)
(	O
*	O
str	*(char)
)	O
;	O
}	O
if	O
(	O
str	*(char)
-	O
start	*(char)
>	O
0	int
)	O
*	O
out_val	*(long)
=	O
res	long
;	O
return	O
str	*(char)
-	O
start	*(char)
;	O
}	O
size_t	long
MHD_strx_to_uint32_n_	(*(char),long,*(int))->(long)
(	O
const	O
char	O
*	O
str	*(char)
,	O
size_t	long
maxlen	long
,	O
uint32_t	int
*	O
out_val	*(long)
)	O
{	O
size_t	long
i	long
;	O
uint32_t	int
res	long
;	O
int	O
digit	int
;	O
if	O
(	O
!	O
str	*(char)
||	O
!	O
out_val	*(long)
)	O
return	O
0	int
;	O
res	long
=	O
0	int
;	O
i	long
=	O
0	int
;	O
while	O
(	O
i	long
<	O
maxlen	long
&&	O
(	O
digit	int
=	O
toxdigitvalue	(char)->(int)
(	O
str	*(char)
[	O
i	long
]	O
)	O
)	O
>=	O
0	int
)	O
{	O
if	O
(	O
(	O
res	long
>	O
(	O
UINT32_MAX	O
/	O
16	int
)	O
)	O
||	O
(	O
(	O
res	long
==	O
(	O
UINT32_MAX	O
/	O
16	int
)	O
)	O
&&	O
(	O
(	O
uint32_t	int
)	O
digit	int
>	O
(	O
UINT32_MAX	O
%	O
16	int
)	O
)	O
)	O
)	O
return	O
0	int
;	O
res	long
*=	O
16	int
;	O
res	long
+=	O
digit	int
;	O
i	long
++	O
;	O
}	O
if	O
(	O
i	long
)	O
*	O
out_val	*(long)
=	O
res	long
;	O
return	O
i	long
;	O
}	O
size_t	long
MHD_strx_to_uint64_	(*(char),*(long))->(long)
(	O
const	O
char	O
*	O
str	*(char)
,	O
uint64_t	long
*	O
out_val	*(long)
)	O
{	O
const	O
char	O
*	O
const	O
start	*(char)
=	O
str	*(char)
;	O
uint64_t	long
res	long
;	O
int	O
digit	int
;	O
if	O
(	O
!	O
str	*(char)
||	O
!	O
out_val	*(long)
)	O
return	O
0	int
;	O
res	long
=	O
0	int
;	O
digit	int
=	O
toxdigitvalue	(char)->(int)
(	O
*	O
str	*(char)
)	O
;	O
while	O
(	O
digit	int
>=	O
0	int
)	O
{	O
if	O
(	O
(	O
res	long
<	O
(	O
UINT64_MAX	O
/	O
16	int
)	O
)	O
||	O
(	O
(	O
res	long
==	O
(	O
UINT64_MAX	O
/	O
16	int
)	O
)	O
&&	O
(	O
(	O
uint64_t	long
)	O
digit	int
<=	O
(	O
UINT64_MAX	O
%	O
16	int
)	O
)	O
)	O
)	O
{	O
res	long
*=	O
16	int
;	O
res	long
+=	O
digit	int
;	O
}	O
else	O
return	O
0	int
;	O
str	*(char)
++	O
;	O
digit	int
=	O
toxdigitvalue	(char)->(int)
(	O
*	O
str	*(char)
)	O
;	O
}	O
if	O
(	O
str	*(char)
-	O
start	*(char)
>	O
0	int
)	O
*	O
out_val	*(long)
=	O
res	long
;	O
return	O
str	*(char)
-	O
start	*(char)
;	O
}	O
size_t	long
MHD_strx_to_uint64_n_	(*(char),long,*(long))->(long)
(	O
const	O
char	O
*	O
str	*(char)
,	O
size_t	long
maxlen	long
,	O
uint64_t	long
*	O
out_val	*(long)
)	O
{	O
size_t	long
i	long
;	O
uint64_t	long
res	long
;	O
int	O
digit	int
;	O
if	O
(	O
!	O
str	*(char)
||	O
!	O
out_val	*(long)
)	O
return	O
0	int
;	O
res	long
=	O
0	int
;	O
i	long
=	O
0	int
;	O
while	O
(	O
i	long
<	O
maxlen	long
&&	O
(	O
digit	int
=	O
toxdigitvalue	(char)->(int)
(	O
str	*(char)
[	O
i	long
]	O
)	O
)	O
>=	O
0	int
)	O
{	O
if	O
(	O
(	O
res	long
>	O
(	O
UINT64_MAX	O
/	O
16	int
)	O
)	O
||	O
(	O
(	O
res	long
==	O
(	O
UINT64_MAX	O
/	O
16	int
)	O
)	O
&&	O
(	O
(	O
uint64_t	long
)	O
digit	int
>	O
(	O
UINT64_MAX	O
%	O
16	int
)	O
)	O
)	O
)	O
return	O
0	int
;	O
res	long
*=	O
16	int
;	O
res	long
+=	O
digit	int
;	O
i	long
++	O
;	O
}	O
if	O
(	O
i	long
)	O
*	O
out_val	*(long)
=	O
res	long
;	O
return	O
i	long
;	O
}	O
