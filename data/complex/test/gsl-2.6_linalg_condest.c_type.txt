static	O
double	O
condest_tri_norm1	(enum(int,int),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(double)
(	O
CBLAS_UPLO_t	enum(int,int)
Uplo	enum(int,int)
,	O
const	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
A	*(float)
)	O
;	O
static	O
int	O
condest_tri_rcond	(enum(int,int),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(double),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
CBLAS_UPLO_t	enum(int,int)
Uplo	enum(int,int)
,	O
const	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
A	*(float)
,	O
double	O
*	O
rcond	*(double)
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
static	O
int	O
condest_same_sign	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
const	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
x	double
,	O
const	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
y	double
)	O
;	O
static	O
int	O
condest_invtriu	(enum(int,int,int),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(void))->(int)
(	O
CBLAS_TRANSPOSE_t	enum(int,int,int)
TransA	enum(int,int,int)
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
x	double
,	O
void	O
*	O
params	*(void)
)	O
;	O
static	O
int	O
condest_invtril	(enum(int,int,int),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(void))->(int)
(	O
CBLAS_TRANSPOSE_t	enum(int,int,int)
TransA	enum(int,int,int)
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
x	double
,	O
void	O
*	O
params	*(void)
)	O
;	O
int	O
gsl_linalg_tri_rcond	(enum(int,int),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(double),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
CBLAS_UPLO_t	enum(int,int)
Uplo	enum(int,int)
,	O
const	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
A	*(float)
,	O
double	O
*	O
rcond	*(double)
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
{	O
return	O
condest_tri_rcond	(enum(int,int),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(double),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
Uplo	enum(int,int)
,	O
A	*(float)
,	O
rcond	*(double)
,	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
}	O
int	O
gsl_linalg_invnorm1	(long,*((enum(int,int,int),*(struct(long,long,*`,*`,int)),*(void))->(int)),*(void),*(double),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
const	O
size_t	long
N	int
,	O
int	O
(	O
*	O
Ainvx	*((enum(int,int,int),*(struct(long,long,*(double),*(struct`),int)),*(void))->(int))
)	O
(	O
CBLAS_TRANSPOSE_t	enum(int,int,int)
TransA	enum(int,int,int)
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
x	double
,	O
void	O
*	O
params	*(void)
)	O
,	O
void	O
*	O
params	*(void)
,	O
double	O
*	O
Ainvnorm	*(double)
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
{	O
if	O
(	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
->	O
size	long
!=	O
3	int
*	O
N	int
)	O
{	O
GSL_ERROR	O
(	O
"work vector must have length 3*N"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
const	O
size_t	long
maxit	long
=	O
5	int
;	O
gsl_vector_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
x	double
=	O
gsl_vector_subvector	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
0	int
,	O
N	int
)	O
;	O
gsl_vector_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
=	O
gsl_vector_subvector	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
N	int
,	O
N	int
)	O
;	O
gsl_vector_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
xi	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_vector_subvector	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
2	int
*	O
N	int
,	O
N	int
)	O
;	O
double	O
gamma	(double)->(double)
,	O
gamma_old	double
,	O
temp	double
;	O
size_t	long
i	long
,	O
k	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
N	int
;	O
++	O
i	long
)	O
gsl_vector_set	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,double)->(void)
(	O
&	O
x	double
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
i	long
,	O
1.0	int
/	O
(	O
double	O
)	O
N	int
)	O
;	O
gsl_vector_memcpy	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
&	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
x	double
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
(	O
*	O
Ainvx	*((enum(int,int,int),*(struct(long,long,*(double),*(struct`),int)),*(void))->(int))
)	O
(	O
CblasNoTrans	int
,	O
&	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
params	*(void)
)	O
;	O
gamma	(double)->(double)
=	O
gsl_blas_dasum	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(double)
(	O
&	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
N	int
;	O
++	O
i	long
)	O
{	O
double	O
vi	double
=	O
gsl_vector_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(double)
(	O
&	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
i	long
)	O
;	O
gsl_vector_set	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,double)->(void)
(	O
&	O
xi	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
i	long
,	O
GSL_SIGN	O
(	O
vi	double
)	O
)	O
;	O
}	O
gsl_vector_memcpy	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
&	O
x	double
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
xi	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
(	O
*	O
Ainvx	*((enum(int,int,int),*(struct(long,long,*(double),*(struct`),int)),*(void))->(int))
)	O
(	O
CblasTrans	int
,	O
&	O
x	double
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
params	*(void)
)	O
;	O
for	O
(	O
k	long
=	O
0	int
;	O
k	long
<	O
maxit	long
;	O
++	O
k	long
)	O
{	O
size_t	long
j	long
=	O
(	O
size_t	long
)	O
gsl_blas_idamax	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(long)
(	O
&	O
x	double
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
gsl_vector_set_zero	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
&	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
gsl_vector_set	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,double)->(void)
(	O
&	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
j	long
,	O
1.0	int
)	O
;	O
(	O
*	O
Ainvx	*((enum(int,int,int),*(struct(long,long,*(double),*(struct`),int)),*(void))->(int))
)	O
(	O
CblasNoTrans	int
,	O
&	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
params	*(void)
)	O
;	O
gamma_old	double
=	O
gamma	(double)->(double)
;	O
gamma	(double)->(double)
=	O
gsl_blas_dasum	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(double)
(	O
&	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
if	O
(	O
condest_same_sign	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
&	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
xi	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
||	O
(	O
gamma	(double)->(double)
<	O
gamma_old	double
)	O
)	O
break	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
N	int
;	O
++	O
i	long
)	O
{	O
double	O
vi	double
=	O
gsl_vector_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(double)
(	O
&	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
i	long
)	O
;	O
gsl_vector_set	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,double)->(void)
(	O
&	O
xi	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
i	long
,	O
GSL_SIGN	O
(	O
vi	double
)	O
)	O
;	O
}	O
gsl_vector_memcpy	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
&	O
x	double
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
xi	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
(	O
*	O
Ainvx	*((enum(int,int,int),*(struct(long,long,*(double),*(struct`),int)),*(void))->(int))
)	O
(	O
CblasTrans	int
,	O
&	O
x	double
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
params	*(void)
)	O
;	O
}	O
temp	double
=	O
1.0	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
N	int
;	O
++	O
i	long
)	O
{	O
double	O
term	double
=	O
1.0	int
+	O
(	O
double	O
)	O
i	long
/	O
(	O
N	int
-	O
1.0	int
)	O
;	O
gsl_vector_set	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,double)->(void)
(	O
&	O
x	double
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
i	long
,	O
temp	double
*	O
term	double
)	O
;	O
temp	double
=	O
-	O
temp	double
;	O
}	O
(	O
*	O
Ainvx	*((enum(int,int,int),*(struct(long,long,*(double),*(struct`),int)),*(void))->(int))
)	O
(	O
CblasNoTrans	int
,	O
&	O
x	double
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
params	*(void)
)	O
;	O
temp	double
=	O
2.0	int
*	O
gsl_blas_dasum	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(double)
(	O
&	O
x	double
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
/	O
(	O
3.0	int
*	O
N	int
)	O
;	O
if	O
(	O
temp	double
>	O
gamma	(double)->(double)
)	O
{	O
gsl_vector_memcpy	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
&	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
x	double
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
gamma	(double)->(double)
=	O
temp	double
;	O
}	O
*	O
Ainvnorm	*(double)
=	O
gamma	(double)->(double)
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
static	O
int	O
condest_tri_rcond	(enum(int,int),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(double),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
CBLAS_UPLO_t	enum(int,int)
Uplo	enum(int,int)
,	O
const	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
A	*(float)
,	O
double	O
*	O
rcond	*(double)
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
{	O
const	O
size_t	long
M	int
=	O
A	*(float)
->	O
size1	long
;	O
const	O
size_t	long
N	int
=	O
A	*(float)
->	O
size2	long
;	O
if	O
(	O
M	int
!=	O
N	int
)	O
{	O
GSL_ERROR	O
(	O
"matrix must be square"	*(char)
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
if	O
(	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
->	O
size	long
!=	O
3	int
*	O
N	int
)	O
{	O
GSL_ERROR	O
(	O
"work vector must have length 3*N"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
int	O
status	int
;	O
double	O
Anorm	double
=	O
condest_tri_norm1	(enum(int,int),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(double)
(	O
Uplo	enum(int,int)
,	O
A	*(float)
)	O
;	O
double	O
Ainvnorm	*(double)
;	O
*	O
rcond	*(double)
=	O
0.0	int
;	O
if	O
(	O
Anorm	double
==	O
0.0	int
)	O
return	O
GSL_SUCCESS	int
;	O
if	O
(	O
Uplo	enum(int,int)
==	O
CblasUpper	int
)	O
status	int
=	O
gsl_linalg_invnorm1	(long,*((enum(int,int,int),*(struct(long,long,*`,*`,int)),*(void))->(int)),*(void),*(double),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
N	int
,	O
condest_invtriu	(enum(int,int,int),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(void))->(int)
,	O
(	O
void	O
*	O
)	O
A	*(float)
,	O
&	O
Ainvnorm	*(double)
,	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
else	O
status	int
=	O
gsl_linalg_invnorm1	(long,*((enum(int,int,int),*(struct(long,long,*`,*`,int)),*(void))->(int)),*(void),*(double),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
N	int
,	O
condest_invtril	(enum(int,int,int),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(void))->(int)
,	O
(	O
void	O
*	O
)	O
A	*(float)
,	O
&	O
Ainvnorm	*(double)
,	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
if	O
(	O
Ainvnorm	*(double)
!=	O
0.0	int
)	O
*	O
rcond	*(double)
=	O
(	O
1.0	int
/	O
Anorm	double
)	O
/	O
Ainvnorm	*(double)
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
static	O
double	O
condest_tri_norm1	(enum(int,int),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(double)
(	O
CBLAS_UPLO_t	enum(int,int)
Uplo	enum(int,int)
,	O
const	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
A	*(float)
)	O
{	O
const	O
size_t	long
N	int
=	O
A	*(float)
->	O
size2	long
;	O
double	O
max	double
=	O
0.0	int
;	O
size_t	long
i	long
,	O
j	long
;	O
if	O
(	O
Uplo	enum(int,int)
==	O
CblasUpper	int
)	O
{	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
N	int
;	O
++	O
j	long
)	O
{	O
double	O
sum	double
=	O
0.0	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<=	O
j	long
;	O
++	O
i	long
)	O
{	O
double	O
Aij	double
=	O
gsl_matrix_get	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long)->(double)
(	O
A	*(float)
,	O
i	long
,	O
j	long
)	O
;	O
sum	double
+=	O
fabs	(double)->(double)
(	O
Aij	double
)	O
;	O
}	O
max	double
=	O
GSL_MAX	O
(	O
max	double
,	O
sum	double
)	O
;	O
}	O
}	O
else	O
{	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
N	int
;	O
++	O
j	long
)	O
{	O
double	O
sum	double
=	O
0.0	int
;	O
for	O
(	O
i	long
=	O
j	long
;	O
i	long
<	O
N	int
;	O
++	O
i	long
)	O
{	O
double	O
Aij	double
=	O
gsl_matrix_get	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long)->(double)
(	O
A	*(float)
,	O
i	long
,	O
j	long
)	O
;	O
sum	double
+=	O
fabs	(double)->(double)
(	O
Aij	double
)	O
;	O
}	O
max	double
=	O
GSL_MAX	O
(	O
max	double
,	O
sum	double
)	O
;	O
}	O
}	O
return	O
max	double
;	O
}	O
static	O
int	O
condest_same_sign	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
const	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
x	double
,	O
const	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
y	double
)	O
{	O
const	O
size_t	long
n	int
=	O
x	double
->	O
size	long
;	O
size_t	long
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
n	int
;	O
++	O
i	long
)	O
{	O
double	O
xi	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_vector_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(double)
(	O
x	double
,	O
i	long
)	O
;	O
double	O
yi	double
=	O
gsl_vector_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(double)
(	O
y	double
,	O
i	long
)	O
;	O
if	O
(	O
GSL_SIGN	O
(	O
xi	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
!=	O
GSL_SIGN	O
(	O
yi	double
)	O
)	O
return	O
0	int
;	O
}	O
return	O
1	int
;	O
}	O
static	O
int	O
condest_invtriu	(enum(int,int,int),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(void))->(int)
(	O
CBLAS_TRANSPOSE_t	enum(int,int,int)
TransA	enum(int,int,int)
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
x	double
,	O
void	O
*	O
params	*(void)
)	O
{	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
A	*(float)
=	O
(	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
)	O
params	*(void)
;	O
return	O
gsl_blas_dtrsv	(enum(int,int),enum(int,int,int),enum(int,int),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
CblasUpper	int
,	O
TransA	enum(int,int,int)
,	O
CblasNonUnit	int
,	O
A	*(float)
,	O
x	double
)	O
;	O
}	O
static	O
int	O
condest_invtril	(enum(int,int,int),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(void))->(int)
(	O
CBLAS_TRANSPOSE_t	enum(int,int,int)
TransA	enum(int,int,int)
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
x	double
,	O
void	O
*	O
params	*(void)
)	O
{	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
A	*(float)
=	O
(	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
)	O
params	*(void)
;	O
return	O
gsl_blas_dtrsv	(enum(int,int),enum(int,int,int),enum(int,int),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
CblasLower	int
,	O
TransA	enum(int,int,int)
,	O
CblasNonUnit	int
,	O
A	*(float)
,	O
x	double
)	O
;	O
}	O
int	O
gsl_linalg_tri_upper_rcond	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(double),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
const	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
A	*(float)
,	O
double	O
*	O
rcond	*(double)
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
{	O
int	O
status	int
=	O
condest_tri_rcond	(enum(int,int),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(double),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
CblasUpper	int
,	O
A	*(float)
,	O
rcond	*(double)
,	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
return	O
status	int
;	O
}	O
int	O
gsl_linalg_tri_lower_rcond	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(double),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
const	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
A	*(float)
,	O
double	O
*	O
rcond	*(double)
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
{	O
int	O
status	int
=	O
condest_tri_rcond	(enum(int,int),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(double),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
CblasLower	int
,	O
A	*(float)
,	O
rcond	*(double)
,	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
return	O
status	int
;	O
}	O
