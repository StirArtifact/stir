static	O
int	O
isqualifier	O
(	O
const	O
char	O
*	O
s	*(char)
,	O
size_t	long
len	int
)	O
{	O
static	O
const	O
struct	O
qual	O
{	O
const	O
char	O
*	O
q_name	O
;	O
size_t	long
q_len	O
;	O
}	O
qhash	O
[	O
]	O
=	O
{	O
{	O
"static"	*(char)
,	O
6	int
}	O
,	O
{	O
""	*(char)
,	O
0	int
}	O
,	O
{	O
""	*(char)
,	O
0	int
}	O
,	O
{	O
""	*(char)
,	O
0	int
}	O
,	O
{	O
"volatile"	*(char)
,	O
8	int
}	O
,	O
{	O
""	*(char)
,	O
0	int
}	O
,	O
{	O
""	*(char)
,	O
0	int
}	O
,	O
{	O
""	*(char)
,	O
0	int
}	O
,	O
{	O
""	*(char)
,	O
0	int
}	O
,	O
{	O
""	*(char)
,	O
0	int
}	O
,	O
{	O
"auto"	*(char)
,	O
4	int
}	O
,	O
{	O
"extern"	*(char)
,	O
6	int
}	O
,	O
{	O
""	*(char)
,	O
0	int
}	O
,	O
{	O
""	*(char)
,	O
0	int
}	O
,	O
{	O
""	*(char)
,	O
0	int
}	O
,	O
{	O
""	*(char)
,	O
0	int
}	O
,	O
{	O
"const"	*(char)
,	O
5	int
}	O
,	O
{	O
"register"	*(char)
,	O
8	int
}	O
,	O
{	O
""	*(char)
,	O
0	int
}	O
,	O
{	O
"restrict"	*(char)
,	O
8	int
}	O
,	O
{	O
"_Restrict"	*(char)
,	O
9	int
}	O
}	O
;	O
int	O
h	O
=	O
s	*(char)
[	O
len	int
-	O
1	int
]	O
+	O
(	O
int	O
)	O
len	int
-	O
105	int
;	O
const	O
struct	O
qual	O
*	O
qp	O
=	O
&	O
qhash	O
[	O
h	O
]	O
;	O
return	O
(	O
h	O
>=	O
0	int
&&	O
(	O
size_t	long
)	O
h	O
<	O
sizeof	O
(	O
qhash	O
)	O
/	O
sizeof	O
(	O
qhash	O
[	O
0	int
]	O
)	O
&&	O
(	O
size_t	long
)	O
len	int
==	O
qp	O
->	O
q_len	O
&&	O
strncmp	O
(	O
qp	O
->	O
q_name	O
,	O
s	*(char)
,	O
qp	O
->	O
q_len	O
)	O
==	O
0	int
)	O
;	O
}	O
ctf_id_t	long
ctf_lookup_by_name	(*(struct),*(char))->(long)
(	O
ctf_file_t	struct
*	O
fp	*(struct)
,	O
const	O
char	O
*	O
name	*(char)
)	O
{	O
static	O
const	O
char	O
delimiters	O
[	O
]	O
=	O
" \t\n\r\v\f*"	*(char)
;	O
const	O
ctf_lookup_t	O
*	O
lp	O
;	O
const	O
char	O
*	O
p	*(void)
,	O
*	O
q	O
,	O
*	O
end	*(*(char))
;	O
ctf_id_t	long
type	long
=	O
0	int
;	O
ctf_id_t	long
ntype	O
,	O
ptype	O
;	O
if	O
(	O
name	*(char)
==	O
NULL	O
)	O
return	O
(	O
ctf_set_errno	O
(	O
fp	*(struct)
,	O
EINVAL	O
)	O
)	O
;	O
for	O
(	O
p	*(void)
=	O
name	*(char)
,	O
end	*(*(char))
=	O
name	*(char)
+	O
strlen	O
(	O
name	*(char)
)	O
;	O
*	O
p	*(void)
!=	O
'\0'	O
;	O
p	*(void)
=	O
q	O
)	O
{	O
while	O
(	O
isspace	(int)->(int)
(	O
*	O
p	*(void)
)	O
)	O
p	*(void)
++	O
;	O
if	O
(	O
p	*(void)
==	O
end	*(*(char))
)	O
break	O
;	O
if	O
(	O
(	O
q	O
=	O
strpbrk	O
(	O
p	*(void)
+	O
1	int
,	O
delimiters	O
)	O
)	O
==	O
NULL	O
)	O
q	O
=	O
end	*(*(char))
;	O
if	O
(	O
*	O
p	*(void)
==	O
'*'	O
)	O
{	O
ntype	O
=	O
fp	*(struct)
->	O
ctf_ptrtab	O
[	O
LCTF_TYPE_TO_INDEX	O
(	O
fp	*(struct)
,	O
type	long
)	O
]	O
;	O
if	O
(	O
ntype	O
==	O
0	int
)	O
{	O
ntype	O
=	O
ctf_type_resolve_unsliced	O
(	O
fp	*(struct)
,	O
type	long
)	O
;	O
if	O
(	O
ntype	O
==	O
CTF_ERR	O
||	O
(	O
ntype	O
=	O
fp	*(struct)
->	O
ctf_ptrtab	O
[	O
LCTF_TYPE_TO_INDEX	O
(	O
fp	*(struct)
,	O
ntype	O
)	O
]	O
)	O
==	O
0	int
)	O
{	O
(	O
void	O
)	O
ctf_set_errno	O
(	O
fp	*(struct)
,	O
ECTF_NOTYPE	int
)	O
;	O
goto	O
err	long
;	O
}	O
}	O
type	long
=	O
LCTF_INDEX_TO_TYPE	O
(	O
fp	*(struct)
,	O
ntype	O
,	O
(	O
fp	*(struct)
->	O
ctf_flags	O
&	O
LCTF_CHILD	O
)	O
)	O
;	O
q	O
=	O
p	*(void)
+	O
1	int
;	O
continue	O
;	O
}	O
if	O
(	O
isqualifier	O
(	O
p	*(void)
,	O
(	O
size_t	long
)	O
(	O
q	O
-	O
p	*(void)
)	O
)	O
)	O
continue	O
;	O
for	O
(	O
lp	O
=	O
fp	*(struct)
->	O
ctf_lookups	O
;	O
lp	O
->	O
ctl_prefix	O
!=	O
NULL	O
;	O
lp	O
++	O
)	O
{	O
if	O
(	O
(	O
lp	O
->	O
ctl_prefix	O
[	O
0	int
]	O
==	O
'\0'	O
||	O
strncmp	O
(	O
p	*(void)
,	O
lp	O
->	O
ctl_prefix	O
,	O
(	O
size_t	long
)	O
(	O
q	O
-	O
p	*(void)
)	O
)	O
==	O
0	int
)	O
&&	O
(	O
size_t	long
)	O
(	O
q	O
-	O
p	*(void)
)	O
>=	O
lp	O
->	O
ctl_len	O
)	O
{	O
for	O
(	O
p	*(void)
+=	O
lp	O
->	O
ctl_len	O
;	O
isspace	(int)->(int)
(	O
*	O
p	*(void)
)	O
;	O
p	*(void)
++	O
)	O
continue	O
;	O
if	O
(	O
(	O
q	O
=	O
strchr	O
(	O
p	*(void)
,	O
'*'	O
)	O
)	O
==	O
NULL	O
)	O
q	O
=	O
end	*(*(char))
;	O
while	O
(	O
isspace	(int)->(int)
(	O
q	O
[	O
-	O
1	int
]	O
)	O
)	O
q	O
--	O
;	O
if	O
(	O
fp	*(struct)
->	O
ctf_tmp_typeslicelen	O
>=	O
(	O
size_t	long
)	O
(	O
q	O
-	O
p	*(void)
)	O
+	O
1	int
)	O
{	O
memcpy	O
(	O
fp	*(struct)
->	O
ctf_tmp_typeslice	O
,	O
p	*(void)
,	O
(	O
size_t	long
)	O
(	O
q	O
-	O
p	*(void)
)	O
)	O
;	O
fp	*(struct)
->	O
ctf_tmp_typeslice	O
[	O
(	O
size_t	long
)	O
(	O
q	O
-	O
p	*(void)
)	O
]	O
=	O
'\0'	O
;	O
}	O
else	O
{	O
free	(*(void))->(void)
(	O
fp	*(struct)
->	O
ctf_tmp_typeslice	O
)	O
;	O
fp	*(struct)
->	O
ctf_tmp_typeslice	O
=	O
xstrndup	(*(char),long)->(*(char))
(	O
p	*(void)
,	O
(	O
size_t	long
)	O
(	O
q	O
-	O
p	*(void)
)	O
)	O
;	O
if	O
(	O
fp	*(struct)
->	O
ctf_tmp_typeslice	O
==	O
NULL	O
)	O
{	O
(	O
void	O
)	O
ctf_set_errno	O
(	O
fp	*(struct)
,	O
ENOMEM	O
)	O
;	O
return	O
CTF_ERR	O
;	O
}	O
}	O
if	O
(	O
(	O
type	long
=	O
ctf_lookup_by_rawhash	O
(	O
fp	*(struct)
,	O
lp	O
->	O
ctl_hash	O
,	O
fp	*(struct)
->	O
ctf_tmp_typeslice	O
)	O
)	O
==	O
0	int
)	O
{	O
(	O
void	O
)	O
ctf_set_errno	O
(	O
fp	*(struct)
,	O
ECTF_NOTYPE	int
)	O
;	O
goto	O
err	long
;	O
}	O
break	O
;	O
}	O
}	O
if	O
(	O
lp	O
->	O
ctl_prefix	O
==	O
NULL	O
)	O
{	O
(	O
void	O
)	O
ctf_set_errno	O
(	O
fp	*(struct)
,	O
ECTF_NOTYPE	int
)	O
;	O
goto	O
err	long
;	O
}	O
}	O
if	O
(	O
*	O
p	*(void)
!=	O
'\0'	O
||	O
type	long
==	O
0	int
)	O
return	O
(	O
ctf_set_errno	O
(	O
fp	*(struct)
,	O
ECTF_SYNTAX	int
)	O
)	O
;	O
return	O
type	long
;	O
err	long
:	O
if	O
(	O
fp	*(struct)
->	O
ctf_parent	O
!=	O
NULL	O
&&	O
(	O
ptype	O
=	O
ctf_lookup_by_name	(*(struct),*(char))->(long)
(	O
fp	*(struct)
->	O
ctf_parent	O
,	O
name	*(char)
)	O
)	O
!=	O
CTF_ERR	O
)	O
return	O
ptype	O
;	O
return	O
CTF_ERR	O
;	O
}	O
typedef	O
struct	O
ctf_lookup_var_key	O
{	O
ctf_file_t	struct
*	O
clvk_fp	O
;	O
const	O
char	O
*	O
clvk_name	O
;	O
}	O
ctf_lookup_var_key_t	O
;	O
static	O
int	O
ctf_lookup_var	O
(	O
const	O
void	O
*	O
key_	O
,	O
const	O
void	O
*	O
memb_	O
)	O
{	O
const	O
ctf_lookup_var_key_t	O
*	O
key	O
=	O
key_	O
;	O
const	O
ctf_varent_t	struct(int,int)
*	O
memb	O
=	O
memb_	O
;	O
return	O
(	O
strcmp	O
(	O
key	O
->	O
clvk_name	O
,	O
ctf_strptr	O
(	O
key	O
->	O
clvk_fp	O
,	O
memb	O
->	O
ctv_name	int
)	O
)	O
)	O
;	O
}	O
ctf_id_t	long
ctf_lookup_variable	(*(struct),*(char))->(long)
(	O
ctf_file_t	struct
*	O
fp	*(struct)
,	O
const	O
char	O
*	O
name	*(char)
)	O
{	O
ctf_varent_t	struct(int,int)
*	O
ent	O
;	O
ctf_lookup_var_key_t	O
key	O
=	O
{	O
fp	*(struct)
,	O
name	*(char)
}	O
;	O
ent	O
=	O
bsearch	(*(void),*(void),long,long,*((*(void),*(void))->(int)))->(*(void))
(	O
&	O
key	O
,	O
fp	*(struct)
->	O
ctf_vars	O
,	O
fp	*(struct)
->	O
ctf_nvars	O
,	O
sizeof	O
(	O
ctf_varent_t	struct(int,int)
)	O
,	O
ctf_lookup_var	O
)	O
;	O
if	O
(	O
ent	O
==	O
NULL	O
)	O
{	O
if	O
(	O
fp	*(struct)
->	O
ctf_parent	O
!=	O
NULL	O
)	O
return	O
ctf_lookup_variable	(*(struct),*(char))->(long)
(	O
fp	*(struct)
->	O
ctf_parent	O
,	O
name	*(char)
)	O
;	O
return	O
(	O
ctf_set_errno	O
(	O
fp	*(struct)
,	O
ECTF_NOTYPEDAT	int
)	O
)	O
;	O
}	O
return	O
ent	O
->	O
ctv_type	int
;	O
}	O
const	O
char	O
*	O
ctf_lookup_symbol_name	O
(	O
ctf_file_t	struct
*	O
fp	*(struct)
,	O
unsigned	O
long	O
symidx	O
)	O
{	O
const	O
ctf_sect_t	struct(*(char),*(void),long,long)
*	O
sp	O
=	O
&	O
fp	*(struct)
->	O
ctf_symtab	O
;	O
Elf64_Sym	struct(int,char,char,short,long,long)
sym	*(struct)
,	O
*	O
gsp	O
;	O
if	O
(	O
sp	O
->	O
cts_data	*(void)
==	O
NULL	O
)	O
{	O
ctf_set_errno	O
(	O
fp	*(struct)
,	O
ECTF_NOSYMTAB	int
)	O
;	O
return	O
_CTF_NULLSTR	O
;	O
}	O
if	O
(	O
symidx	O
>=	O
fp	*(struct)
->	O
ctf_nsyms	O
)	O
{	O
ctf_set_errno	O
(	O
fp	*(struct)
,	O
EINVAL	O
)	O
;	O
return	O
_CTF_NULLSTR	O
;	O
}	O
if	O
(	O
sp	O
->	O
cts_entsize	long
==	O
sizeof	O
(	O
Elf32_Sym	struct(int,int,int,char,char,short)
)	O
)	O
{	O
const	O
Elf32_Sym	struct(int,int,int,char,char,short)
*	O
symp	O
=	O
(	O
Elf32_Sym	struct(int,int,int,char,char,short)
*	O
)	O
sp	O
->	O
cts_data	*(void)
+	O
symidx	O
;	O
gsp	O
=	O
ctf_sym_to_elf64	O
(	O
symp	O
,	O
&	O
sym	*(struct)
)	O
;	O
}	O
else	O
gsp	O
=	O
(	O
Elf64_Sym	struct(int,char,char,short,long,long)
*	O
)	O
sp	O
->	O
cts_data	*(void)
+	O
symidx	O
;	O
if	O
(	O
gsp	O
->	O
st_name	*(char)
<	O
fp	*(struct)
->	O
ctf_str	O
[	O
CTF_STRTAB_1	O
]	O
.	O
cts_len	O
)	O
return	O
(	O
const	O
char	O
*	O
)	O
fp	*(struct)
->	O
ctf_str	O
[	O
CTF_STRTAB_1	O
]	O
.	O
cts_strs	O
+	O
gsp	O
->	O
st_name	*(char)
;	O
return	O
_CTF_NULLSTR	O
;	O
}	O
ctf_id_t	long
ctf_lookup_by_symbol	(*(struct),long)->(long)
(	O
ctf_file_t	struct
*	O
fp	*(struct)
,	O
unsigned	O
long	O
symidx	O
)	O
{	O
const	O
ctf_sect_t	struct(*(char),*(void),long,long)
*	O
sp	O
=	O
&	O
fp	*(struct)
->	O
ctf_symtab	O
;	O
ctf_id_t	long
type	long
;	O
if	O
(	O
sp	O
->	O
cts_data	*(void)
==	O
NULL	O
)	O
return	O
(	O
ctf_set_errno	O
(	O
fp	*(struct)
,	O
ECTF_NOSYMTAB	int
)	O
)	O
;	O
if	O
(	O
symidx	O
>=	O
fp	*(struct)
->	O
ctf_nsyms	O
)	O
return	O
(	O
ctf_set_errno	O
(	O
fp	*(struct)
,	O
EINVAL	O
)	O
)	O
;	O
if	O
(	O
sp	O
->	O
cts_entsize	long
==	O
sizeof	O
(	O
Elf32_Sym	struct(int,int,int,char,char,short)
)	O
)	O
{	O
const	O
Elf32_Sym	struct(int,int,int,char,char,short)
*	O
symp	O
=	O
(	O
Elf32_Sym	struct(int,int,int,char,char,short)
*	O
)	O
sp	O
->	O
cts_data	*(void)
+	O
symidx	O
;	O
if	O
(	O
ELF32_ST_TYPE	O
(	O
symp	O
->	O
st_info	array(char)
)	O
!=	O
STT_OBJECT	O
)	O
return	O
(	O
ctf_set_errno	O
(	O
fp	*(struct)
,	O
ECTF_NOTDATA	int
)	O
)	O
;	O
}	O
else	O
{	O
const	O
Elf64_Sym	struct(int,char,char,short,long,long)
*	O
symp	O
=	O
(	O
Elf64_Sym	struct(int,char,char,short,long,long)
*	O
)	O
sp	O
->	O
cts_data	*(void)
+	O
symidx	O
;	O
if	O
(	O
ELF64_ST_TYPE	O
(	O
symp	O
->	O
st_info	array(char)
)	O
!=	O
STT_OBJECT	O
)	O
return	O
(	O
ctf_set_errno	O
(	O
fp	*(struct)
,	O
ECTF_NOTDATA	int
)	O
)	O
;	O
}	O
if	O
(	O
fp	*(struct)
->	O
ctf_sxlate	O
[	O
symidx	O
]	O
==	O
-	O
1u	int
)	O
return	O
(	O
ctf_set_errno	O
(	O
fp	*(struct)
,	O
ECTF_NOTYPEDAT	int
)	O
)	O
;	O
type	long
=	O
*	O
(	O
uint32_t	int
*	O
)	O
(	O
(	O
uintptr_t	long
)	O
fp	*(struct)
->	O
ctf_buf	O
+	O
fp	*(struct)
->	O
ctf_sxlate	O
[	O
symidx	O
]	O
)	O
;	O
if	O
(	O
type	long
==	O
0	int
)	O
return	O
(	O
ctf_set_errno	O
(	O
fp	*(struct)
,	O
ECTF_NOTYPEDAT	int
)	O
)	O
;	O
return	O
type	long
;	O
}	O
const	O
ctf_type_t	struct(int,int,union(int,int),int,int)
*	O
ctf_lookup_by_id	O
(	O
ctf_file_t	struct
*	O
*	O
fpp	O
,	O
ctf_id_t	long
type	long
)	O
{	O
ctf_file_t	struct
*	O
fp	*(struct)
=	O
*	O
fpp	O
;	O
ctf_id_t	long
idx	O
;	O
if	O
(	O
(	O
fp	*(struct)
->	O
ctf_flags	O
&	O
LCTF_CHILD	O
)	O
&&	O
LCTF_TYPE_ISPARENT	O
(	O
fp	*(struct)
,	O
type	long
)	O
&&	O
(	O
fp	*(struct)
=	O
fp	*(struct)
->	O
ctf_parent	O
)	O
==	O
NULL	O
)	O
{	O
(	O
void	O
)	O
ctf_set_errno	O
(	O
*	O
fpp	O
,	O
ECTF_NOPARENT	int
)	O
;	O
return	O
NULL	O
;	O
}	O
if	O
(	O
fp	*(struct)
->	O
ctf_flags	O
&	O
LCTF_RDWR	O
)	O
{	O
ctf_dtdef_t	O
*	O
dtd	O
;	O
if	O
(	O
(	O
dtd	O
=	O
ctf_dynamic_type	O
(	O
fp	*(struct)
,	O
type	long
)	O
)	O
!=	O
NULL	O
)	O
{	O
*	O
fpp	O
=	O
fp	*(struct)
;	O
return	O
&	O
dtd	O
->	O
dtd_data	O
;	O
}	O
(	O
void	O
)	O
ctf_set_errno	O
(	O
*	O
fpp	O
,	O
ECTF_BADID	int
)	O
;	O
return	O
NULL	O
;	O
}	O
idx	O
=	O
LCTF_TYPE_TO_INDEX	O
(	O
fp	*(struct)
,	O
type	long
)	O
;	O
if	O
(	O
idx	O
>	O
0	int
&&	O
(	O
unsigned	O
long	O
)	O
idx	O
<=	O
fp	*(struct)
->	O
ctf_typemax	O
)	O
{	O
*	O
fpp	O
=	O
fp	*(struct)
;	O
return	O
(	O
LCTF_INDEX_TO_TYPEPTR	O
(	O
fp	*(struct)
,	O
idx	O
)	O
)	O
;	O
}	O
(	O
void	O
)	O
ctf_set_errno	O
(	O
*	O
fpp	O
,	O
ECTF_BADID	int
)	O
;	O
return	O
NULL	O
;	O
}	O
int	O
ctf_func_info	(*(struct),long,*(struct(long,int,int)))->(int)
(	O
ctf_file_t	struct
*	O
fp	*(struct)
,	O
unsigned	O
long	O
symidx	O
,	O
ctf_funcinfo_t	struct(long,int,int)
*	O
fip	O
)	O
{	O
const	O
ctf_sect_t	struct(*(char),*(void),long,long)
*	O
sp	O
=	O
&	O
fp	*(struct)
->	O
ctf_symtab	O
;	O
const	O
uint32_t	int
*	O
dp	O
;	O
uint32_t	int
info	*(struct(long))
,	O
kind	O
,	O
n	O
;	O
if	O
(	O
sp	O
->	O
cts_data	*(void)
==	O
NULL	O
)	O
return	O
(	O
ctf_set_errno	O
(	O
fp	*(struct)
,	O
ECTF_NOSYMTAB	int
)	O
)	O
;	O
if	O
(	O
symidx	O
>=	O
fp	*(struct)
->	O
ctf_nsyms	O
)	O
return	O
(	O
ctf_set_errno	O
(	O
fp	*(struct)
,	O
EINVAL	O
)	O
)	O
;	O
if	O
(	O
sp	O
->	O
cts_entsize	long
==	O
sizeof	O
(	O
Elf32_Sym	struct(int,int,int,char,char,short)
)	O
)	O
{	O
const	O
Elf32_Sym	struct(int,int,int,char,char,short)
*	O
symp	O
=	O
(	O
Elf32_Sym	struct(int,int,int,char,char,short)
*	O
)	O
sp	O
->	O
cts_data	*(void)
+	O
symidx	O
;	O
if	O
(	O
ELF32_ST_TYPE	O
(	O
symp	O
->	O
st_info	array(char)
)	O
!=	O
STT_FUNC	O
)	O
return	O
(	O
ctf_set_errno	O
(	O
fp	*(struct)
,	O
ECTF_NOTFUNC	int
)	O
)	O
;	O
}	O
else	O
{	O
const	O
Elf64_Sym	struct(int,char,char,short,long,long)
*	O
symp	O
=	O
(	O
Elf64_Sym	struct(int,char,char,short,long,long)
*	O
)	O
sp	O
->	O
cts_data	*(void)
+	O
symidx	O
;	O
if	O
(	O
ELF64_ST_TYPE	O
(	O
symp	O
->	O
st_info	array(char)
)	O
!=	O
STT_FUNC	O
)	O
return	O
(	O
ctf_set_errno	O
(	O
fp	*(struct)
,	O
ECTF_NOTFUNC	int
)	O
)	O
;	O
}	O
if	O
(	O
fp	*(struct)
->	O
ctf_sxlate	O
[	O
symidx	O
]	O
==	O
-	O
1u	int
)	O
return	O
(	O
ctf_set_errno	O
(	O
fp	*(struct)
,	O
ECTF_NOFUNCDAT	int
)	O
)	O
;	O
dp	O
=	O
(	O
uint32_t	int
*	O
)	O
(	O
(	O
uintptr_t	long
)	O
fp	*(struct)
->	O
ctf_buf	O
+	O
fp	*(struct)
->	O
ctf_sxlate	O
[	O
symidx	O
]	O
)	O
;	O
info	*(struct(long))
=	O
*	O
dp	O
++	O
;	O
kind	O
=	O
LCTF_INFO_KIND	O
(	O
fp	*(struct)
,	O
info	*(struct(long))
)	O
;	O
n	O
=	O
LCTF_INFO_VLEN	O
(	O
fp	*(struct)
,	O
info	*(struct(long))
)	O
;	O
if	O
(	O
kind	O
==	O
CTF_K_UNKNOWN	O
&&	O
n	O
==	O
0	int
)	O
return	O
(	O
ctf_set_errno	O
(	O
fp	*(struct)
,	O
ECTF_NOFUNCDAT	int
)	O
)	O
;	O
if	O
(	O
kind	O
!=	O
CTF_K_FUNCTION	O
)	O
return	O
(	O
ctf_set_errno	O
(	O
fp	*(struct)
,	O
ECTF_CORRUPT	int
)	O
)	O
;	O
fip	O
->	O
ctc_return	long
=	O
*	O
dp	O
++	O
;	O
fip	O
->	O
ctc_argc	int
=	O
n	O
;	O
fip	O
->	O
ctc_flags	int
=	O
0	int
;	O
if	O
(	O
n	O
!=	O
0	int
&&	O
dp	O
[	O
n	O
-	O
1	int
]	O
==	O
0	int
)	O
{	O
fip	O
->	O
ctc_flags	int
|=	O
CTF_FUNC_VARARG	O
;	O
fip	O
->	O
ctc_argc	int
--	O
;	O
}	O
return	O
0	int
;	O
}	O
int	O
ctf_func_args	(*(struct),long,int,*(long))->(int)
(	O
ctf_file_t	struct
*	O
fp	*(struct)
,	O
unsigned	O
long	O
symidx	O
,	O
uint32_t	int
argc	O
,	O
ctf_id_t	long
*	O
argv	*(*(char))
)	O
{	O
const	O
uint32_t	int
*	O
dp	O
;	O
ctf_funcinfo_t	struct(long,int,int)
f	O
;	O
if	O
(	O
ctf_func_info	(*(struct),long,*(struct(long,int,int)))->(int)
(	O
fp	*(struct)
,	O
symidx	O
,	O
&	O
f	O
)	O
<	O
0	int
)	O
return	O
-	O
1	int
;	O
dp	O
=	O
(	O
uint32_t	int
*	O
)	O
(	O
(	O
uintptr_t	long
)	O
fp	*(struct)
->	O
ctf_buf	O
+	O
fp	*(struct)
->	O
ctf_sxlate	O
[	O
symidx	O
]	O
)	O
+	O
2	int
;	O
for	O
(	O
argc	O
=	O
MIN	O
(	O
argc	O
,	O
f	O
.	O
ctc_argc	int
)	O
;	O
argc	O
!=	O
0	int
;	O
argc	O
--	O
)	O
*	O
argv	*(*(char))
++	O
=	O
*	O
dp	O
++	O
;	O
return	O
0	int
;	O
}	O
