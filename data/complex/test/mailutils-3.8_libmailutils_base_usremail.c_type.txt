static	O
char	O
*	O
mu_user_email	*(char)
=	O
0	int
;	O
int	O
mu_set_user_email	(*(char))->(int)
(	O
const	O
char	O
*	O
candidate	*(char)
)	O
{	O
int	O
err	int
=	O
0	int
;	O
mu_address_t	*(struct)
addr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
=	O
NULL	O
;	O
size_t	long
emailno	long
=	O
0	int
;	O
char	O
*	O
email	*(char)
=	O
NULL	O
;	O
const	O
char	O
*	O
domain	*(char)
=	O
NULL	O
;	O
if	O
(	O
!	O
candidate	*(char)
)	O
{	O
free	(*(void))->(void)
(	O
mu_user_email	*(char)
)	O
;	O
mu_user_email	*(char)
=	O
NULL	O
;	O
return	O
0	int
;	O
}	O
if	O
(	O
(	O
err	int
=	O
mu_address_create	(*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))),*(char))->(int)
(	O
&	O
addr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
,	O
candidate	*(char)
)	O
)	O
!=	O
0	int
)	O
return	O
err	int
;	O
if	O
(	O
(	O
err	int
=	O
mu_address_get_email_count	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))),*(long))->(int)
(	O
addr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
,	O
&	O
emailno	long
)	O
)	O
!=	O
0	int
)	O
goto	O
cleanup	O
;	O
if	O
(	O
emailno	long
!=	O
1	int
)	O
{	O
errno	O
=	O
EINVAL	int
;	O
goto	O
cleanup	O
;	O
}	O
if	O
(	O
(	O
err	int
=	O
mu_address_aget_email	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))),long,*(*(char)))->(int)
(	O
addr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
,	O
1	int
,	O
&	O
email	*(char)
)	O
)	O
!=	O
0	int
)	O
goto	O
cleanup	O
;	O
else	O
if	O
(	O
email	*(char)
==	O
NULL	O
)	O
{	O
err	int
=	O
MU_ERR_NOENT	O
;	O
goto	O
cleanup	O
;	O
}	O
free	(*(void))->(void)
(	O
mu_user_email	*(char)
)	O
;	O
mu_user_email	*(char)
=	O
email	*(char)
;	O
if	O
(	O
(	O
err	int
=	O
mu_address_sget_domain	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))),long,*(*(char)))->(int)
(	O
addr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
,	O
1	int
,	O
&	O
domain	*(char)
)	O
)	O
!=	O
0	int
)	O
goto	O
cleanup	O
;	O
else	O
if	O
(	O
domain	*(char)
==	O
NULL	O
)	O
{	O
err	int
=	O
MU_ERR_NOENT	O
;	O
goto	O
cleanup	O
;	O
}	O
mu_set_user_email_domain	(*(char))->(int)
(	O
domain	*(char)
)	O
;	O
cleanup	O
:	O
mu_address_destroy	(*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))->(void)
(	O
&	O
addr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
)	O
;	O
return	O
err	int
;	O
}	O
static	O
char	O
*	O
mu_user_email_domain	*(char)
=	O
0	int
;	O
int	O
mu_set_user_email_domain	(*(char))->(int)
(	O
const	O
char	O
*	O
domain	*(char)
)	O
{	O
char	O
*	O
d	*(char)
;	O
if	O
(	O
domain	*(char)
)	O
{	O
d	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
domain	*(char)
)	O
;	O
if	O
(	O
!	O
d	*(char)
)	O
return	O
ENOMEM	int
;	O
}	O
else	O
d	*(char)
=	O
NULL	O
;	O
if	O
(	O
mu_user_email_domain	*(char)
)	O
free	(*(void))->(void)
(	O
mu_user_email_domain	*(char)
)	O
;	O
mu_user_email_domain	*(char)
=	O
d	*(char)
;	O
return	O
0	int
;	O
}	O
int	O
mu_get_user_email_domain	(*(*(char)))->(int)
(	O
const	O
char	O
*	O
*	O
domain	*(char)
)	O
{	O
int	O
err	int
=	O
0	int
;	O
if	O
(	O
!	O
mu_user_email_domain	*(char)
)	O
{	O
if	O
(	O
(	O
err	int
=	O
mu_get_host_name	(*(*(char)))->(int)
(	O
&	O
mu_user_email_domain	*(char)
)	O
)	O
)	O
return	O
err	int
;	O
}	O
*	O
domain	*(char)
=	O
mu_user_email_domain	*(char)
;	O
return	O
0	int
;	O
}	O
int	O
mu_aget_user_email_domain	(*(*(char)))->(int)
(	O
char	O
*	O
*	O
pdomain	*(*(char))
)	O
{	O
const	O
char	O
*	O
domain	*(char)
;	O
int	O
status	int
=	O
mu_get_user_email_domain	(*(*(char)))->(int)
(	O
&	O
domain	*(char)
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
if	O
(	O
domain	*(char)
==	O
NULL	O
)	O
*	O
pdomain	*(*(char))
=	O
NULL	O
;	O
else	O
{	O
*	O
pdomain	*(*(char))
=	O
strdup	(*(char))->(*(char))
(	O
domain	*(char)
)	O
;	O
if	O
(	O
*	O
pdomain	*(*(char))
==	O
NULL	O
)	O
return	O
ENOMEM	int
;	O
}	O
return	O
0	int
;	O
}	O
char	O
*	O
mu_get_user_email	(*(char))->(*(char))
(	O
const	O
char	O
*	O
name	*(char)
)	O
{	O
int	O
status	int
=	O
0	int
;	O
char	O
*	O
localpart	*(char)
=	O
NULL	O
;	O
const	O
char	O
*	O
domainpart	*(char)
=	O
NULL	O
;	O
char	O
*	O
email	*(char)
=	O
NULL	O
;	O
char	O
*	O
tmpname	*(char)
=	O
NULL	O
;	O
if	O
(	O
!	O
name	*(char)
&&	O
mu_user_email	*(char)
)	O
{	O
email	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
mu_user_email	*(char)
)	O
;	O
if	O
(	O
!	O
email	*(char)
)	O
errno	O
=	O
ENOMEM	int
;	O
return	O
email	*(char)
;	O
}	O
if	O
(	O
!	O
name	*(char)
)	O
{	O
struct	O
mu_auth_data	struct(*(char),*(char),*(char),int,int,*(char),*(char),*(char),*(char),long,int,int)
*	O
auth	*(*(struct(*(char),*(char),*(char),int,int,*(char),*(char),*(char),*(char),long,int,int)))
=	O
mu_get_auth_by_uid	(int)->(*(struct(*(char),*(char),*(char),int,int,*(char),*(char),*(char),*(char),long,int,int)))
(	O
geteuid	()->(int)
(	O
)	O
)	O
;	O
if	O
(	O
!	O
auth	*(*(struct(*(char),*(char),*(char),int,int,*(char),*(char),*(char),*(char),long,int,int)))
)	O
{	O
errno	O
=	O
EINVAL	int
;	O
return	O
NULL	O
;	O
}	O
name	*(char)
=	O
tmpname	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
auth	*(*(struct(*(char),*(char),*(char),int,int,*(char),*(char),*(char),*(char),long,int,int)))
->	O
name	*(char)
)	O
;	O
if	O
(	O
auth	*(*(struct(*(char),*(char),*(char),int,int,*(char),*(char),*(char),*(char),long,int,int)))
)	O
mu_auth_data_free	(*(struct(*(char),*(char),*(char),int,int,*(char),*(char),*(char),*(char),long,int,int)))->(void)
(	O
auth	*(*(struct(*(char),*(char),*(char),int,int,*(char),*(char),*(char),*(char),long,int,int)))
)	O
;	O
if	O
(	O
!	O
name	*(char)
)	O
{	O
errno	O
=	O
ENOMEM	int
;	O
return	O
NULL	O
;	O
}	O
}	O
status	int
=	O
mu_get_user_email_domain	(*(*(char)))->(int)
(	O
&	O
domainpart	*(char)
)	O
;	O
if	O
(	O
status	int
)	O
{	O
free	(*(void))->(void)
(	O
tmpname	*(char)
)	O
;	O
errno	O
=	O
status	int
;	O
return	O
NULL	O
;	O
}	O
if	O
(	O
(	O
status	int
=	O
mu_parse822_quote_local_part	(*(*(char)),*(char))->(int)
(	O
&	O
localpart	*(char)
,	O
name	*(char)
)	O
)	O
)	O
{	O
free	(*(void))->(void)
(	O
tmpname	*(char)
)	O
;	O
errno	O
=	O
status	int
;	O
return	O
NULL	O
;	O
}	O
email	*(char)
=	O
malloc	(long)->(*(void))
(	O
strlen	(*(char))->(long)
(	O
localpart	*(char)
)	O
+	O
1	int
+	O
strlen	(*(char))->(long)
(	O
domainpart	*(char)
)	O
+	O
1	int
)	O
;	O
if	O
(	O
!	O
email	*(char)
)	O
errno	O
=	O
ENOMEM	int
;	O
else	O
sprintf	(*(char),*(char))->(int)
(	O
email	*(char)
,	O
"%s@%s"	*(char)
,	O
localpart	*(char)
,	O
domainpart	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
tmpname	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
localpart	*(char)
)	O
;	O
return	O
email	*(char)
;	O
}	O
