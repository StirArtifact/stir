static	O
int	O
GetFPolyYBounds	(*(struct(double,double)),int,double,*(int),*(int))->(int)
(	O
const	O
SppPoint	struct(double,double)
*	O
pts	array(struct(int,int))
,	O
int	O
n	array(double)
,	O
double	O
yFtrans	double
,	O
int	O
*	O
by	*(int)
,	O
int	O
*	O
ty	*(int)
)	O
;	O
void	O
miFillSppPoly	O
(	O
miPaintedSet	struct
*	O
paintedSet	*(struct)
,	O
miPixel	struct(char,union(char,array(char)))
pixel	struct(char,union(char,array(char)))
,	O
int	O
count	int
,	O
const	O
SppPoint	struct(double,double)
*	O
ptsIn	*(struct(int,int))
,	O
int	O
xTrans	int
,	O
int	O
yTrans	int
,	O
double	O
xFtrans	double
,	O
double	O
yFtrans	double
)	O
{	O
double	O
xl	double
=	O
0.0	int
,	O
xr	double
=	O
0.0	int
,	O
ml	double
=	O
0.0	int
,	O
mr	double
=	O
0.0	int
,	O
dy	int
,	O
i	int
;	O
int	O
y	double
,	O
j	int
,	O
imin	int
,	O
ymin	double
,	O
ymax	double
;	O
int	O
left	int
,	O
right	int
,	O
nextleft	int
,	O
nextright	int
;	O
int	O
*	O
Marked	*(int)
;	O
unsigned	O
int	O
*	O
width	array(short)
,	O
*	O
FirstWidth	*(int)
;	O
miPoint	struct(int,int)
*	O
ptsOut	*(struct(int,int))
,	O
*	O
FirstPoint	*(struct(int,int))
;	O
imin	int
=	O
GetFPolyYBounds	(*(struct(double,double)),int,double,*(int),*(int))->(int)
(	O
ptsIn	*(struct(int,int))
,	O
count	int
,	O
yFtrans	double
,	O
&	O
ymin	double
,	O
&	O
ymax	double
)	O
;	O
y	double
=	O
ymax	double
-	O
ymin	double
+	O
1	int
;	O
if	O
(	O
(	O
count	int
<	O
3	int
)	O
||	O
(	O
y	double
<=	O
0	int
)	O
)	O
return	O
;	O
ptsOut	*(struct(int,int))
=	O
FirstPoint	*(struct(int,int))
=	O
(	O
miPoint	struct(int,int)
*	O
)	O
mi_xmalloc	O
(	O
sizeof	O
(	O
miPoint	struct(int,int)
)	O
*	O
y	double
)	O
;	O
width	array(short)
=	O
FirstWidth	*(int)
=	O
(	O
unsigned	O
int	O
*	O
)	O
mi_xmalloc	O
(	O
sizeof	O
(	O
unsigned	O
int	O
)	O
*	O
y	double
)	O
;	O
Marked	*(int)
=	O
(	O
int	O
*	O
)	O
mi_xmalloc	O
(	O
sizeof	O
(	O
int	O
)	O
*	O
count	int
)	O
;	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<	O
count	int
;	O
j	int
++	O
)	O
Marked	*(int)
[	O
j	int
]	O
=	O
0	int
;	O
nextleft	int
=	O
nextright	int
=	O
imin	int
;	O
Marked	*(int)
[	O
imin	int
]	O
=	O
-	O
1	int
;	O
y	double
=	O
ICEIL	O
(	O
ptsIn	*(struct(int,int))
[	O
nextleft	int
]	O
.	O
y	double
+	O
yFtrans	double
)	O
;	O
do	O
{	O
if	O
(	O
(	O
y	double
>	O
(	O
ptsIn	*(struct(int,int))
[	O
nextleft	int
]	O
.	O
y	double
+	O
yFtrans	double
)	O
||	O
ISEQUAL	O
(	O
y	double
,	O
ptsIn	*(struct(int,int))
[	O
nextleft	int
]	O
.	O
y	double
+	O
yFtrans	double
)	O
)	O
&&	O
Marked	*(int)
[	O
nextleft	int
]	O
!=	O
1	int
)	O
{	O
Marked	*(int)
[	O
nextleft	int
]	O
++	O
;	O
left	int
=	O
nextleft	int
++	O
;	O
if	O
(	O
nextleft	int
>=	O
count	int
)	O
nextleft	int
=	O
0	int
;	O
dy	int
=	O
ptsIn	*(struct(int,int))
[	O
nextleft	int
]	O
.	O
y	double
-	O
ptsIn	*(struct(int,int))
[	O
left	int
]	O
.	O
y	double
;	O
if	O
(	O
dy	int
!=	O
0.0	int
)	O
{	O
ml	double
=	O
(	O
ptsIn	*(struct(int,int))
[	O
nextleft	int
]	O
.	O
x	double
-	O
ptsIn	*(struct(int,int))
[	O
left	int
]	O
.	O
x	double
)	O
/	O
dy	int
;	O
dy	int
=	O
y	double
-	O
(	O
ptsIn	*(struct(int,int))
[	O
left	int
]	O
.	O
y	double
+	O
yFtrans	double
)	O
;	O
xl	double
=	O
(	O
ptsIn	*(struct(int,int))
[	O
left	int
]	O
.	O
x	double
+	O
xFtrans	double
)	O
+	O
ml	double
*	O
DMAX	O
(	O
dy	int
,	O
0	int
)	O
;	O
}	O
}	O
if	O
(	O
(	O
y	double
>	O
ptsIn	*(struct(int,int))
[	O
nextright	int
]	O
.	O
y	double
+	O
yFtrans	double
)	O
||	O
(	O
ISEQUAL	O
(	O
y	double
,	O
ptsIn	*(struct(int,int))
[	O
nextright	int
]	O
.	O
y	double
+	O
yFtrans	double
)	O
&&	O
Marked	*(int)
[	O
nextright	int
]	O
!=	O
1	int
)	O
)	O
{	O
Marked	*(int)
[	O
nextright	int
]	O
++	O
;	O
right	int
=	O
nextright	int
--	O
;	O
if	O
(	O
nextright	int
<	O
0	int
)	O
nextright	int
=	O
count	int
-	O
1	int
;	O
dy	int
=	O
ptsIn	*(struct(int,int))
[	O
nextright	int
]	O
.	O
y	double
-	O
ptsIn	*(struct(int,int))
[	O
right	int
]	O
.	O
y	double
;	O
if	O
(	O
dy	int
!=	O
0.0	int
)	O
{	O
mr	double
=	O
(	O
ptsIn	*(struct(int,int))
[	O
nextright	int
]	O
.	O
x	double
-	O
ptsIn	*(struct(int,int))
[	O
right	int
]	O
.	O
x	double
)	O
/	O
dy	int
;	O
dy	int
=	O
y	double
-	O
(	O
ptsIn	*(struct(int,int))
[	O
right	int
]	O
.	O
y	double
+	O
yFtrans	double
)	O
;	O
xr	double
=	O
(	O
ptsIn	*(struct(int,int))
[	O
right	int
]	O
.	O
x	double
+	O
xFtrans	double
)	O
+	O
mr	double
*	O
DMAX	O
(	O
dy	int
,	O
0	int
)	O
;	O
}	O
}	O
i	int
=	O
(	O
DMIN	O
(	O
ptsIn	*(struct(int,int))
[	O
nextleft	int
]	O
.	O
y	double
,	O
ptsIn	*(struct(int,int))
[	O
nextright	int
]	O
.	O
y	double
)	O
+	O
yFtrans	double
)	O
-	O
y	double
;	O
if	O
(	O
i	int
<	O
EPSILON	int
)	O
{	O
if	O
(	O
Marked	*(int)
[	O
nextleft	int
]	O
&&	O
Marked	*(int)
[	O
nextright	int
]	O
)	O
{	O
break	O
;	O
}	O
continue	O
;	O
}	O
else	O
{	O
j	int
=	O
(	O
int	O
)	O
i	int
;	O
if	O
(	O
!	O
j	int
)	O
j	int
++	O
;	O
}	O
while	O
(	O
j	int
>	O
0	int
)	O
{	O
int	O
cxl	int
,	O
cxr	int
;	O
ptsOut	*(struct(int,int))
->	O
y	double
=	O
(	O
y	double
)	O
+	O
yTrans	int
;	O
cxl	int
=	O
ICEIL	O
(	O
xl	double
)	O
;	O
cxr	int
=	O
ICEIL	O
(	O
xr	double
)	O
;	O
if	O
(	O
xl	double
<	O
xr	double
)	O
{	O
*	O
(	O
width	array(short)
++	O
)	O
=	O
(	O
unsigned	O
int	O
)	O
(	O
cxr	int
-	O
cxl	int
)	O
;	O
(	O
ptsOut	*(struct(int,int))
++	O
)	O
->	O
x	double
=	O
cxl	int
+	O
xTrans	int
;	O
}	O
else	O
{	O
*	O
(	O
width	array(short)
++	O
)	O
=	O
(	O
unsigned	O
int	O
)	O
(	O
cxl	int
-	O
cxr	int
)	O
;	O
(	O
ptsOut	*(struct(int,int))
++	O
)	O
->	O
x	double
=	O
cxr	int
+	O
xTrans	int
;	O
}	O
y	double
++	O
;	O
xl	double
+=	O
ml	double
;	O
xr	double
+=	O
mr	double
;	O
j	int
--	O
;	O
}	O
}	O
while	O
(	O
y	double
<=	O
ymax	double
)	O
;	O
free	(*(void))->(void)
(	O
Marked	*(int)
)	O
;	O
MI_PAINT_SPANS	O
(	O
paintedSet	*(struct)
,	O
pixel	struct(char,union(char,array(char)))
,	O
ptsOut	*(struct(int,int))
-	O
FirstPoint	*(struct(int,int))
,	O
FirstPoint	*(struct(int,int))
,	O
FirstWidth	*(int)
)	O
}	O
static	O
int	O
GetFPolyYBounds	(*(struct(double,double)),int,double,*(int),*(int))->(int)
(	O
const	O
SppPoint	struct(double,double)
*	O
pts	array(struct(int,int))
,	O
int	O
n	array(double)
,	O
double	O
yFtrans	double
,	O
int	O
*	O
by	*(int)
,	O
int	O
*	O
ty	*(int)
)	O
{	O
const	O
SppPoint	struct(double,double)
*	O
ptsStart	*(struct(double,double))
=	O
pts	array(struct(int,int))
;	O
const	O
SppPoint	struct(double,double)
*	O
ptMin	*(struct(double,double))
;	O
double	O
ymin	double
,	O
ymax	double
;	O
ptMin	*(struct(double,double))
=	O
pts	array(struct(int,int))
;	O
ymin	double
=	O
ymax	double
=	O
(	O
pts	array(struct(int,int))
++	O
)	O
->	O
y	double
;	O
while	O
(	O
--	O
n	array(double)
>	O
0	int
)	O
{	O
if	O
(	O
pts	array(struct(int,int))
->	O
y	double
<	O
ymin	double
)	O
{	O
ptMin	*(struct(double,double))
=	O
pts	array(struct(int,int))
;	O
ymin	double
=	O
pts	array(struct(int,int))
->	O
y	double
;	O
}	O
if	O
(	O
pts	array(struct(int,int))
->	O
y	double
>	O
ymax	double
)	O
ymax	double
=	O
pts	array(struct(int,int))
->	O
y	double
;	O
pts	array(struct(int,int))
++	O
;	O
}	O
*	O
by	*(int)
=	O
ICEIL	O
(	O
ymin	double
+	O
yFtrans	double
)	O
;	O
*	O
ty	*(int)
=	O
ICEIL	O
(	O
ymax	double
+	O
yFtrans	double
-	O
1	int
)	O
;	O
return	O
(	O
ptMin	*(struct(double,double))
-	O
ptsStart	*(struct(double,double))
)	O
;	O
}	O
