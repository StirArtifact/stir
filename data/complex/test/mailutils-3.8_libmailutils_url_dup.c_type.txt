int	O
mu_url_dup	(*(struct),*(*(struct)))->(int)
(	O
mu_url_t	*(struct)
old_url	*(struct)
,	O
mu_url_t	*(struct)
*	O
new_url	*(*(struct))
)	O
{	O
int	O
rc	int
;	O
const	O
char	O
*	O
s	*(char)
;	O
mu_url_t	*(struct)
url	*(struct)
=	O
calloc	(long,long)->(*(void))
(	O
1	int
,	O
sizeof	O
(	O
*	O
url	*(struct)
)	O
)	O
;	O
if	O
(	O
!	O
url	*(struct)
)	O
return	O
ENOMEM	int
;	O
mu_url_sget_name	(*(struct),*(*(char)))->(int)
(	O
old_url	*(struct)
,	O
&	O
s	*(char)
)	O
;	O
url	*(struct)
->	O
name	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
s	*(char)
)	O
;	O
if	O
(	O
!	O
url	*(struct)
->	O
name	*(char)
)	O
{	O
free	(*(void))->(void)
(	O
url	*(struct)
)	O
;	O
return	O
ENOMEM	int
;	O
}	O
rc	int
=	O
mu_url_copy_hints	(*(struct),*(struct))->(int)
(	O
url	*(struct)
,	O
old_url	*(struct)
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_url_destroy	(*(*(struct)))->(void)
(	O
&	O
url	*(struct)
)	O
;	O
return	O
rc	int
;	O
}	O
*	O
new_url	*(*(struct))
=	O
url	*(struct)
;	O
return	O
0	int
;	O
}	O
