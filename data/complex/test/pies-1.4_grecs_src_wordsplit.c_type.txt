static	O
void	O
_wsplt_alloc_die	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)))->(void)
(	O
struct	O
wordsplit	struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct(long,*(*`),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*`),*(*`),long,long,*(*`),long,*(*`),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct`),*(struct`),array(char),int)))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*(char)),*(char),long,*(void))->(int)),*(void),*((*(*(char)),*(char),long,*(*(char)),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)
*	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
)	O
{	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_error	*((*(char))->(void))
(	O
"%s"	*(char)
,	O
_	O
(	O
"memory exhausted"	*(char)
)	O
)	O
;	O
abort	()->(void)
(	O
)	O
;	O
}	O
static	O
void	O
_wsplt_error	(*(char))->(void)
(	O
const	O
char	O
*	O
fmt	*(char)
,	O
...	O
)	O
{	O
va_list	array(struct(int,int,*(void),*(void)))
ap	array(struct(int,int,*(void),*(void)))
;	O
va_start	O
(	O
ap	array(struct(int,int,*(void),*(void)))
,	O
fmt	*(char)
)	O
;	O
vfprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char),array(struct(int,int,*(void),*(void))))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
fmt	*(char)
,	O
ap	array(struct(int,int,*(void),*(void)))
)	O
;	O
va_end	O
(	O
ap	array(struct(int,int,*(void),*(void)))
)	O
;	O
fputc	(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
'\n'	O
,	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
}	O
static	O
void	O
wordsplit_free_nodes	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)))->(void)
(	O
struct	O
wordsplit	struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct(long,*(*`),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*`),*(*`),long,long,*(*`),long,*(*`),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct`),*(struct`),array(char),int)))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*(char)),*(char),long,*(void))->(int)),*(void),*((*(*(char)),*(char),long,*(*(char)),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)
*	O
)	O
;	O
static	O
int	O
_wsplt_seterr	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)),int)->(int)
(	O
struct	O
wordsplit	struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct(long,*(*`),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*`),*(*`),long,long,*(*`),long,*(*`),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct`),*(struct`),array(char),int)))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*(char)),*(char),long,*(void))->(int)),*(void),*((*(*(char)),*(char),long,*(*(char)),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)
*	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
,	O
int	O
ec	int
)	O
{	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_errno	int
=	O
ec	int
;	O
if	O
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_flags	int
&	O
WRDSF_SHOWERR	int
)	O
wordsplit_perror	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)))->(void)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
)	O
;	O
return	O
ec	int
;	O
}	O
static	O
int	O
_wsplt_nomem	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)))->(int)
(	O
struct	O
wordsplit	struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct(long,*(*`),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*`),*(*`),long,long,*(*`),long,*(*`),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct`),*(struct`),array(char),int)))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*(char)),*(char),long,*(void))->(int)),*(void),*((*(*(char)),*(char),long,*(*(char)),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)
*	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
)	O
{	O
errno	O
=	O
ENOMEM	int
;	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_errno	int
=	O
WRDSE_NOSPACE	int
;	O
if	O
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_flags	int
&	O
WRDSF_ENOMEMABRT	int
)	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_alloc_die	*((*(struct(long,*(*`),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*`),*(*`),long,long,*(*`),long,*(*`),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct`),*(struct`),array(char),int)))->(void))
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
)	O
;	O
if	O
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_flags	int
&	O
WRDSF_SHOWERR	int
)	O
wordsplit_perror	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)))->(void)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
)	O
;	O
if	O
(	O
!	O
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_flags	int
&	O
WRDSF_REUSE	int
)	O
)	O
wordsplit_free	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)))->(void)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
)	O
;	O
wordsplit_free_nodes	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)))->(void)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
)	O
;	O
return	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_errno	int
;	O
}	O
static	O
void	O
_wsplt_store_errctx	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)),*(char),long)->(void)
(	O
struct	O
wordsplit	struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct(long,*(*`),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*`),*(*`),long,long,*(*`),long,*(*`),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct`),*(struct`),array(char),int)))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*(char)),*(char),long,*(void))->(int)),*(void),*((*(*(char)),*(char),long,*(*(char)),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)
*	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
,	O
char	O
const	O
*	O
str	*(char)
,	O
size_t	long
len	long
)	O
{	O
free	(*(void))->(void)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_errctx	*(char)
)	O
;	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_errctx	*(char)
=	O
malloc	(long)->(*(void))
(	O
len	long
+	O
1	int
)	O
;	O
if	O
(	O
!	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_errctx	*(char)
)	O
{	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_error	*((*(char))->(void))
(	O
"%s"	*(char)
,	O
_	O
(	O
"memory exhausted while trying to store error context"	*(char)
)	O
)	O
;	O
}	O
else	O
{	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_errctx	*(char)
,	O
str	*(char)
,	O
len	long
)	O
;	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_errctx	*(char)
[	O
len	long
]	O
=	O
0	int
;	O
}	O
}	O
static	O
inline	O
int	O
_wsplt_setctxerr	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)),int,*(char),long)->(int)
(	O
struct	O
wordsplit	struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct(long,*(*`),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*`),*(*`),long,long,*(*`),long,*(*`),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct`),*(struct`),array(char),int)))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*(char)),*(char),long,*(void))->(int)),*(void),*((*(*(char)),*(char),long,*(*(char)),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)
*	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
,	O
int	O
ec	int
,	O
char	O
const	O
*	O
str	*(char)
,	O
size_t	long
len	long
)	O
{	O
_wsplt_store_errctx	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)),*(char),long)->(void)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
,	O
str	*(char)
,	O
len	long
)	O
;	O
return	O
_wsplt_seterr	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)),int)->(int)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
,	O
ec	int
)	O
;	O
}	O
static	O
int	O
wordsplit_run	(*(char),long,*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)),int,int)->(int)
(	O
const	O
char	O
*	O
command	*(char)
,	O
size_t	long
length	long
,	O
struct	O
wordsplit	struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct(long,*(*`),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*`),*(*`),long,long,*(*`),long,*(*`),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct`),*(struct`),array(char),int)))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*(char)),*(char),long,*(void))->(int)),*(void),*((*(*(char)),*(char),long,*(*(char)),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)
*	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
,	O
int	O
flags	int
,	O
int	O
lvl	int
)	O
;	O
static	O
int	O
wordsplit_init	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)),*(char),long,int)->(int)
(	O
struct	O
wordsplit	struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct(long,*(*`),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*`),*(*`),long,long,*(*`),long,*(*`),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct`),*(struct`),array(char),int)))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*(char)),*(char),long,*(void))->(int)),*(void),*((*(*(char)),*(char),long,*(*(char)),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)
*	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
,	O
const	O
char	O
*	O
input	*(char)
,	O
size_t	long
len	long
,	O
int	O
flags	int
)	O
;	O
static	O
int	O
wordsplit_process_list	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)),long)->(int)
(	O
struct	O
wordsplit	struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct(long,*(*`),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*`),*(*`),long,long,*(*`),long,*(*`),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct`),*(struct`),array(char),int)))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*(char)),*(char),long,*(void))->(int)),*(void),*((*(*(char)),*(char),long,*(*(char)),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)
*	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
,	O
size_t	long
start	long
)	O
;	O
static	O
int	O
wordsplit_finish	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)))->(int)
(	O
struct	O
wordsplit	struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct(long,*(*`),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*`),*(*`),long,long,*(*`),long,*(*`),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct`),*(struct`),array(char),int)))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*(char)),*(char),long,*(void))->(int)),*(void),*((*(*(char)),*(char),long,*(*(char)),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)
*	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
)	O
;	O
static	O
int	O
_wsplt_subsplit	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)),*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)),*(char),int,int,int)->(int)
(	O
struct	O
wordsplit	struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct(long,*(*`),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*`),*(*`),long,long,*(*`),long,*(*`),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct`),*(struct`),array(char),int)))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*(char)),*(char),long,*(void))->(int)),*(void),*((*(*(char)),*(char),long,*(*(char)),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)
*	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
,	O
struct	O
wordsplit	struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct(long,*(*`),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*`),*(*`),long,long,*(*`),long,*(*`),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct`),*(struct`),array(char),int)))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*(char)),*(char),long,*(void))->(int)),*(void),*((*(*(char)),*(char),long,*(*(char)),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)
*	O
wss	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
,	O
char	O
const	O
*	O
str	*(char)
,	O
int	O
len	long
,	O
int	O
flags	int
,	O
int	O
finalize	int
)	O
{	O
int	O
rc	int
;	O
wss	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
->	O
ws_delim	*(char)
=	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_delim	*(char)
;	O
wss	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
->	O
ws_debug	*((*(char))->(void))
=	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_debug	*((*(char))->(void))
;	O
wss	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
->	O
ws_error	*((*(char))->(void))
=	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_error	*((*(char))->(void))
;	O
wss	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
->	O
ws_alloc_die	*((*(struct(long,*(*`),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*`),*(*`),long,long,*(*`),long,*(*`),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct`),*(struct`),array(char),int)))->(void))
=	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_alloc_die	*((*(struct(long,*(*`),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*`),*(*`),long,long,*(*`),long,*(*`),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct`),*(struct`),array(char),int)))->(void))
;	O
if	O
(	O
!	O
(	O
flags	int
&	O
WRDSF_NOVAR	int
)	O
)	O
{	O
wss	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
->	O
ws_env	*(*(char))
=	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_env	*(*(char))
;	O
wss	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
->	O
ws_getvar	*((*(*(char)),*(char),long,*(void))->(int))
=	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_getvar	*((*(*(char)),*(char),long,*(void))->(int))
;	O
flags	int
|=	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_flags	int
&	O
(	O
WRDSF_ENV	int
|	O
WRDSF_ENV_KV	int
|	O
WRDSF_GETVAR	int
)	O
;	O
}	O
if	O
(	O
!	O
(	O
flags	int
&	O
WRDSF_NOCMD	int
)	O
)	O
{	O
wss	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
->	O
ws_command	*((*(*(char)),*(char),long,*(*(char)),*(void))->(int))
=	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_command	*((*(*(char)),*(char),long,*(*(char)),*(void))->(int))
;	O
}	O
if	O
(	O
(	O
flags	int
&	O
(	O
WRDSF_NOVAR	int
|	O
WRDSF_NOCMD	int
)	O
)	O
!=	O
(	O
WRDSF_NOVAR	int
|	O
WRDSF_NOCMD	int
)	O
)	O
{	O
wss	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
->	O
ws_closure	*(void)
=	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_closure	*(void)
;	O
flags	int
|=	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_flags	int
&	O
WRDSF_CLOSURE	int
;	O
}	O
wss	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
->	O
ws_options	int
=	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_options	int
;	O
flags	int
|=	O
WRDSF_DELIM	int
|	O
WRDSF_ALLOC_DIE	int
|	O
WRDSF_ERROR	int
|	O
WRDSF_DEBUG	int
|	O
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_flags	int
&	O
(	O
WRDSF_SHOWDBG	int
|	O
WRDSF_SHOWERR	int
|	O
WRDSF_OPTIONS	int
)	O
)	O
;	O
rc	int
=	O
wordsplit_init	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)),*(char),long,int)->(int)
(	O
wss	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
,	O
str	*(char)
,	O
len	long
,	O
flags	int
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
wss	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
->	O
ws_lvl	int
=	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_lvl	int
+	O
1	int
;	O
rc	int
=	O
wordsplit_process_list	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)),long)->(int)
(	O
wss	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
,	O
0	int
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
wordsplit_free_nodes	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)))->(void)
(	O
wss	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
)	O
;	O
return	O
rc	int
;	O
}	O
if	O
(	O
finalize	int
)	O
{	O
rc	int
=	O
wordsplit_finish	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)))->(int)
(	O
wss	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
)	O
;	O
wordsplit_free_nodes	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)))->(void)
(	O
wss	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
)	O
;	O
}	O
return	O
rc	int
;	O
}	O
static	O
void	O
_wsplt_seterr_sub	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)),*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)))->(void)
(	O
struct	O
wordsplit	struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct(long,*(*`),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*`),*(*`),long,long,*(*`),long,*(*`),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct`),*(struct`),array(char),int)))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*(char)),*(char),long,*(void))->(int)),*(void),*((*(*(char)),*(char),long,*(*(char)),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)
*	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
,	O
struct	O
wordsplit	struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct(long,*(*`),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*`),*(*`),long,long,*(*`),long,*(*`),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct`),*(struct`),array(char),int)))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*(char)),*(char),long,*(void))->(int)),*(void),*((*(*(char)),*(char),long,*(*(char)),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)
*	O
wss	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
)	O
{	O
if	O
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_errno	int
==	O
WRDSE_USERERR	int
)	O
free	(*(void))->(void)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_usererr	*(char)
)	O
;	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_errno	int
=	O
wss	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
->	O
ws_errno	int
;	O
if	O
(	O
wss	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
->	O
ws_errno	int
==	O
WRDSE_USERERR	int
)	O
{	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_usererr	*(char)
=	O
wss	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
->	O
ws_usererr	*(char)
;	O
wss	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
->	O
ws_errno	int
=	O
WRDSE_EOF	O
;	O
wss	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
->	O
ws_usererr	*(char)
=	O
NULL	O
;	O
}	O
free	(*(void))->(void)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_errctx	*(char)
)	O
;	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_errctx	*(char)
=	O
wss	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
->	O
ws_errctx	*(char)
;	O
wss	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
->	O
ws_errctx	*(char)
=	O
NULL	O
;	O
}	O
static	O
void	O
wordsplit_init0	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)))->(void)
(	O
struct	O
wordsplit	struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct(long,*(*`),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*`),*(*`),long,long,*(*`),long,*(*`),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct`),*(struct`),array(char),int)))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*(char)),*(char),long,*(void))->(int)),*(void),*((*(*(char)),*(char),long,*(*(char)),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)
*	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
)	O
{	O
if	O
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_flags	int
&	O
WRDSF_REUSE	int
)	O
{	O
if	O
(	O
!	O
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_flags	int
&	O
WRDSF_APPEND	int
)	O
)	O
wordsplit_free_words	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)))->(void)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
)	O
;	O
wordsplit_clearerr	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)))->(void)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
)	O
;	O
}	O
else	O
{	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_wordv	*(*(char))
=	O
NULL	O
;	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_wordc	long
=	O
0	int
;	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_wordn	long
=	O
0	int
;	O
}	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_errno	int
=	O
0	int
;	O
}	O
char	O
wordsplit_c_escape_tab	array(char)
[	O
]	O
=	O
"\\\\\"\"a\ab\bf\fn\nr\rt\tv\v"	*(char)
;	O
static	O
int	O
wordsplit_init	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)),*(char),long,int)->(int)
(	O
struct	O
wordsplit	struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct(long,*(*`),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*`),*(*`),long,long,*(*`),long,*(*`),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct`),*(struct`),array(char),int)))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*(char)),*(char),long,*(void))->(int)),*(void),*((*(*(char)),*(char),long,*(*(char)),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)
*	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
,	O
const	O
char	O
*	O
input	*(char)
,	O
size_t	long
len	long
,	O
int	O
flags	int
)	O
{	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_flags	int
=	O
flags	int
;	O
if	O
(	O
!	O
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_flags	int
&	O
WRDSF_ALLOC_DIE	int
)	O
)	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_alloc_die	*((*(struct(long,*(*`),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*`),*(*`),long,long,*(*`),long,*(*`),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct`),*(struct`),array(char),int)))->(void))
=	O
_wsplt_alloc_die	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)))->(void)
;	O
if	O
(	O
!	O
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_flags	int
&	O
WRDSF_ERROR	int
)	O
)	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_error	*((*(char))->(void))
=	O
_wsplt_error	(*(char))->(void)
;	O
if	O
(	O
!	O
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_flags	int
&	O
WRDSF_NOVAR	int
)	O
)	O
{	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_envidx	long
=	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_envsiz	long
=	O
0	int
;	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_envbuf	*(*(char))
=	O
NULL	O
;	O
}	O
if	O
(	O
!	O
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_flags	int
&	O
WRDSF_NOCMD	int
)	O
)	O
{	O
if	O
(	O
!	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_command	*((*(*(char)),*(char),long,*(*(char)),*(void))->(int))
)	O
{	O
_wsplt_seterr	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)),int)->(int)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
,	O
WRDSE_USAGE	int
)	O
;	O
errno	O
=	O
EINVAL	int
;	O
return	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_errno	int
;	O
}	O
}	O
if	O
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_flags	int
&	O
WRDSF_SHOWDBG	int
)	O
{	O
if	O
(	O
!	O
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_flags	int
&	O
WRDSF_DEBUG	int
)	O
)	O
{	O
if	O
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_flags	int
&	O
WRDSF_ERROR	int
)	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_debug	*((*(char))->(void))
=	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_error	*((*(char))->(void))
;	O
else	O
if	O
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_flags	int
&	O
WRDSF_SHOWERR	int
)	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_debug	*((*(char))->(void))
=	O
_wsplt_error	(*(char))->(void)
;	O
else	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_flags	int
&=	O
~	O
WRDSF_SHOWDBG	int
;	O
}	O
}	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_input	*(char)
=	O
input	*(char)
;	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_len	long
=	O
len	long
;	O
if	O
(	O
!	O
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_flags	int
&	O
WRDSF_DOOFFS	int
)	O
)	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_offs	long
=	O
0	int
;	O
if	O
(	O
!	O
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_flags	int
&	O
WRDSF_DELIM	int
)	O
)	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_delim	*(char)
=	O
" \t\n"	*(char)
;	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_sep	array(char)
[	O
0	int
]	O
=	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_delim	*(char)
[	O
0	int
]	O
;	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_sep	array(char)
[	O
1	int
]	O
=	O
0	int
;	O
if	O
(	O
!	O
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_flags	int
&	O
WRDSF_COMMENT	int
)	O
)	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_comment	*(char)
=	O
NULL	O
;	O
if	O
(	O
!	O
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_flags	int
&	O
WRDSF_CLOSURE	int
)	O
)	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_closure	*(void)
=	O
NULL	O
;	O
if	O
(	O
!	O
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_flags	int
&	O
WRDSF_OPTIONS	int
)	O
)	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_options	int
=	O
0	int
;	O
if	O
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_flags	int
&	O
WRDSF_ESCAPE	int
)	O
{	O
if	O
(	O
!	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_escape	array(*(char))
[	O
WRDSX_WORD	int
]	O
)	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_escape	array(*(char))
[	O
WRDSX_WORD	int
]	O
=	O
""	*(char)
;	O
if	O
(	O
!	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_escape	array(*(char))
[	O
WRDSX_QUOTE	int
]	O
)	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_escape	array(*(char))
[	O
WRDSX_QUOTE	int
]	O
=	O
""	*(char)
;	O
}	O
else	O
{	O
if	O
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_flags	int
&	O
WRDSF_CESCAPES	int
)	O
{	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_escape	array(*(char))
[	O
WRDSX_WORD	int
]	O
=	O
wordsplit_c_escape_tab	array(char)
;	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_escape	array(*(char))
[	O
WRDSX_QUOTE	int
]	O
=	O
wordsplit_c_escape_tab	array(char)
;	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_options	int
|=	O
WRDSO_OESC_QUOTE	int
|	O
WRDSO_OESC_WORD	int
|	O
WRDSO_XESC_QUOTE	int
|	O
WRDSO_XESC_WORD	int
;	O
}	O
else	O
{	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_escape	array(*(char))
[	O
WRDSX_WORD	int
]	O
=	O
""	*(char)
;	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_escape	array(*(char))
[	O
WRDSX_QUOTE	int
]	O
=	O
"\\\\\"\""	*(char)
;	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_options	int
|=	O
WRDSO_BSKEEP_QUOTE	int
;	O
}	O
}	O
if	O
(	O
!	O
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_options	int
&	O
WRDSO_PARAMV	int
)	O
)	O
{	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_paramv	*(*(char))
=	O
NULL	O
;	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_paramc	long
=	O
0	int
;	O
}	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_paramidx	long
=	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_paramsiz	long
=	O
0	int
;	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_parambuf	*(*(char))
=	O
NULL	O
;	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_endp	long
=	O
0	int
;	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_wordi	long
=	O
0	int
;	O
if	O
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_flags	int
&	O
WRDSF_REUSE	int
)	O
wordsplit_free_nodes	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)))->(void)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
)	O
;	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_head	*(struct)
=	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_tail	*(struct)
=	O
NULL	O
;	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_errctx	*(char)
=	O
NULL	O
;	O
wordsplit_init0	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)))->(void)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
alloc_space	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)),long)->(int)
(	O
struct	O
wordsplit	struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct(long,*(*`),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*`),*(*`),long,long,*(*`),long,*(*`),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct`),*(struct`),array(char),int)))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*(char)),*(char),long,*(void))->(int)),*(void),*((*(*(char)),*(char),long,*(*(char)),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)
*	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
,	O
size_t	long
count	long
)	O
{	O
size_t	long
offs	long
=	O
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_flags	int
&	O
WRDSF_DOOFFS	int
)	O
?	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_offs	long
:	O
0	int
;	O
char	O
*	O
*	O
ptr	*(*(char))
;	O
size_t	long
newalloc	long
;	O
if	O
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_wordv	*(*(char))
==	O
NULL	O
)	O
{	O
newalloc	long
=	O
offs	long
+	O
count	long
>	O
ALLOC_INIT	int
?	O
count	long
:	O
ALLOC_INIT	int
;	O
ptr	*(*(char))
=	O
calloc	(long,long)->(*(void))
(	O
newalloc	long
,	O
sizeof	O
(	O
ptr	*(*(char))
[	O
0	int
]	O
)	O
)	O
;	O
}	O
else	O
if	O
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_wordn	long
<	O
offs	long
+	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_wordc	long
+	O
count	long
)	O
{	O
newalloc	long
=	O
offs	long
+	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_wordc	long
+	O
(	O
count	long
>	O
ALLOC_INCR	int
?	O
count	long
:	O
ALLOC_INCR	int
)	O
;	O
ptr	*(*(char))
=	O
realloc	(*(void),long)->(*(void))
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_wordv	*(*(char))
,	O
newalloc	long
*	O
sizeof	O
(	O
ptr	*(*(char))
[	O
0	int
]	O
)	O
)	O
;	O
}	O
else	O
return	O
0	int
;	O
if	O
(	O
ptr	*(*(char))
)	O
{	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_wordn	long
=	O
newalloc	long
;	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_wordv	*(*(char))
=	O
ptr	*(*(char))
;	O
}	O
else	O
return	O
_wsplt_nomem	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)))->(int)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
)	O
;	O
return	O
0	int
;	O
}	O
struct	O
wordsplit_node	struct(*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char)))),*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char)))),int,union(struct(long,long),*(char)))
{	O
struct	O
wordsplit_node	struct(*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char)))),*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char)))),int,union(struct(long,long),*(char)))
*	O
prev	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
;	O
struct	O
wordsplit_node	struct(*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char)))),*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char)))),int,union(struct(long,long),*(char)))
*	O
next	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
;	O
int	O
flags	int
;	O
union	O
{	O
struct	O
{	O
size_t	long
beg	long
;	O
size_t	long
end	long
;	O
}	O
segm	struct(long,long)
;	O
char	O
*	O
word	*(char)
;	O
}	O
v	union(struct(long,long),*(char))
;	O
}	O
;	O
static	O
const	O
char	O
*	O
wsnode_flagstr	(int)->(*(char))
(	O
int	O
flags	int
)	O
{	O
static	O
char	O
retbuf	array(char)
[	O
7	int
]	O
;	O
char	O
*	O
p	*(char)
=	O
retbuf	array(char)
;	O
if	O
(	O
flags	int
&	O
_WSNF_WORD	int
)	O
*	O
p	*(char)
++	O
=	O
'w'	O
;	O
else	O
if	O
(	O
flags	int
&	O
_WSNF_NULL	int
)	O
*	O
p	*(char)
++	O
=	O
'n'	O
;	O
else	O
*	O
p	*(char)
++	O
=	O
'-'	O
;	O
if	O
(	O
flags	int
&	O
_WSNF_QUOTE	int
)	O
*	O
p	*(char)
++	O
=	O
'q'	O
;	O
else	O
*	O
p	*(char)
++	O
=	O
'-'	O
;	O
if	O
(	O
flags	int
&	O
_WSNF_NOEXPAND	int
)	O
*	O
p	*(char)
++	O
=	O
'E'	O
;	O
else	O
*	O
p	*(char)
++	O
=	O
'-'	O
;	O
if	O
(	O
flags	int
&	O
_WSNF_JOIN	int
)	O
*	O
p	*(char)
++	O
=	O
'j'	O
;	O
else	O
*	O
p	*(char)
++	O
=	O
'-'	O
;	O
if	O
(	O
flags	int
&	O
_WSNF_SEXP	int
)	O
*	O
p	*(char)
++	O
=	O
's'	O
;	O
else	O
*	O
p	*(char)
++	O
=	O
'-'	O
;	O
if	O
(	O
flags	int
&	O
_WSNF_DELIM	int
)	O
*	O
p	*(char)
++	O
=	O
'd'	O
;	O
else	O
*	O
p	*(char)
++	O
=	O
'-'	O
;	O
*	O
p	*(char)
=	O
0	int
;	O
return	O
retbuf	array(char)
;	O
}	O
static	O
const	O
char	O
*	O
wsnode_ptr	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),array(char),int)),*(struct(*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),int,union(struct(long,long),*(char)))))->(*(char))
(	O
struct	O
wordsplit	struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct(long,*(*`),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*`),*(*`),long,long,*(*`),long,*(*`),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct`),*(struct`),array(char),int)))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*(char)),*(char),long,*(void))->(int)),*(void),*((*(*(char)),*(char),long,*(*(char)),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)
*	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
,	O
struct	O
wordsplit_node	struct(*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char)))),*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char)))),int,union(struct(long,long),*(char)))
*	O
p	*(char)
)	O
{	O
if	O
(	O
p	*(char)
->	O
flags	int
&	O
_WSNF_NULL	int
)	O
return	O
""	*(char)
;	O
else	O
if	O
(	O
p	*(char)
->	O
flags	int
&	O
_WSNF_WORD	int
)	O
return	O
p	*(char)
->	O
v	union(struct(long,long),*(char))
.	O
word	*(char)
;	O
else	O
return	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_input	*(char)
+	O
p	*(char)
->	O
v	union(struct(long,long),*(char))
.	O
segm	struct(long,long)
.	O
beg	long
;	O
}	O
static	O
size_t	long
wsnode_len	(*(struct(*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),int,union(struct(long,long),*(char)))))->(long)
(	O
struct	O
wordsplit_node	struct(*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char)))),*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char)))),int,union(struct(long,long),*(char)))
*	O
p	*(char)
)	O
{	O
if	O
(	O
p	*(char)
->	O
flags	int
&	O
_WSNF_NULL	int
)	O
return	O
0	int
;	O
else	O
if	O
(	O
p	*(char)
->	O
flags	int
&	O
_WSNF_WORD	int
)	O
return	O
strlen	(*(char))->(long)
(	O
p	*(char)
->	O
v	union(struct(long,long),*(char))
.	O
word	*(char)
)	O
;	O
else	O
return	O
p	*(char)
->	O
v	union(struct(long,long),*(char))
.	O
segm	struct(long,long)
.	O
end	long
-	O
p	*(char)
->	O
v	union(struct(long,long),*(char))
.	O
segm	struct(long,long)
.	O
beg	long
;	O
}	O
static	O
int	O
wsnode_new	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),array(char),int)),*(*(struct(*(struct`),*(struct`),int,union(struct`,*`)))))->(int)
(	O
struct	O
wordsplit	struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct(long,*(*`),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*`),*(*`),long,long,*(*`),long,*(*`),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct`),*(struct`),array(char),int)))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*(char)),*(char),long,*(void))->(int)),*(void),*((*(*(char)),*(char),long,*(*(char)),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)
*	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
,	O
struct	O
wordsplit_node	struct(*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char)))),*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char)))),int,union(struct(long,long),*(char)))
*	O
*	O
pnode	*(*(struct(*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),int,union(struct(long,long),*(char)))))
)	O
{	O
struct	O
wordsplit_node	struct(*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char)))),*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char)))),int,union(struct(long,long),*(char)))
*	O
node	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
=	O
calloc	(long,long)->(*(void))
(	O
1	int
,	O
sizeof	O
(	O
*	O
node	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
)	O
)	O
;	O
if	O
(	O
!	O
node	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
)	O
return	O
_wsplt_nomem	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)))->(int)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
)	O
;	O
*	O
pnode	*(*(struct(*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),int,union(struct(long,long),*(char)))))
=	O
node	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
;	O
return	O
0	int
;	O
}	O
static	O
void	O
wsnode_free	(*(struct(*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),int,union(struct(long,long),*(char)))))->(void)
(	O
struct	O
wordsplit_node	struct(*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char)))),*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char)))),int,union(struct(long,long),*(char)))
*	O
p	*(char)
)	O
{	O
if	O
(	O
(	O
p	*(char)
->	O
flags	int
&	O
(	O
_WSNF_WORD	int
|	O
_WSNF_CONST	int
)	O
)	O
==	O
_WSNF_WORD	int
)	O
free	(*(void))->(void)
(	O
p	*(char)
->	O
v	union(struct(long,long),*(char))
.	O
word	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
p	*(char)
)	O
;	O
}	O
static	O
void	O
wsnode_append	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),array(char),int)),*(struct(*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),int,union(struct(long,long),*(char)))))->(void)
(	O
struct	O
wordsplit	struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct(long,*(*`),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*`),*(*`),long,long,*(*`),long,*(*`),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct`),*(struct`),array(char),int)))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*(char)),*(char),long,*(void))->(int)),*(void),*((*(*(char)),*(char),long,*(*(char)),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)
*	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
,	O
struct	O
wordsplit_node	struct(*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char)))),*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char)))),int,union(struct(long,long),*(char)))
*	O
node	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
)	O
{	O
node	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
->	O
next	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
=	O
NULL	O
;	O
node	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
->	O
prev	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
=	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_tail	*(struct)
;	O
if	O
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_tail	*(struct)
)	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_tail	*(struct)
->	O
next	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
=	O
node	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
;	O
else	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_head	*(struct)
=	O
node	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
;	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_tail	*(struct)
=	O
node	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
;	O
}	O
static	O
void	O
wsnode_remove	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),array(char),int)),*(struct(*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),int,union(struct(long,long),*(char)))))->(void)
(	O
struct	O
wordsplit	struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct(long,*(*`),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*`),*(*`),long,long,*(*`),long,*(*`),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct`),*(struct`),array(char),int)))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*(char)),*(char),long,*(void))->(int)),*(void),*((*(*(char)),*(char),long,*(*(char)),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)
*	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
,	O
struct	O
wordsplit_node	struct(*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char)))),*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char)))),int,union(struct(long,long),*(char)))
*	O
node	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
)	O
{	O
struct	O
wordsplit_node	struct(*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char)))),*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char)))),int,union(struct(long,long),*(char)))
*	O
p	*(char)
;	O
p	*(char)
=	O
node	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
->	O
prev	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
;	O
if	O
(	O
p	*(char)
)	O
{	O
p	*(char)
->	O
next	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
=	O
node	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
->	O
next	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
;	O
if	O
(	O
!	O
node	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
->	O
next	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
)	O
p	*(char)
->	O
flags	int
&=	O
~	O
_WSNF_JOIN	int
;	O
}	O
else	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_head	*(struct)
=	O
node	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
->	O
next	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
;	O
p	*(char)
=	O
node	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
->	O
next	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
;	O
if	O
(	O
p	*(char)
)	O
p	*(char)
->	O
prev	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
=	O
node	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
->	O
prev	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
;	O
else	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_tail	*(struct)
=	O
node	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
->	O
prev	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
;	O
node	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
->	O
next	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
=	O
node	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
->	O
prev	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
=	O
NULL	O
;	O
}	O
static	O
struct	O
wordsplit_node	struct(*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char)))),*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char)))),int,union(struct(long,long),*(char)))
*	O
wsnode_tail	(*(struct(*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),int,union(struct(long,long),*(char)))))->(*(struct(*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),int,union(struct(long,long),*(char)))))
(	O
struct	O
wordsplit_node	struct(*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char)))),*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char)))),int,union(struct(long,long),*(char)))
*	O
p	*(char)
)	O
{	O
while	O
(	O
p	*(char)
&&	O
p	*(char)
->	O
next	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
)	O
p	*(char)
=	O
p	*(char)
->	O
next	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
;	O
return	O
p	*(char)
;	O
}	O
static	O
void	O
wsnode_insert	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),array(char),int)),*(struct(*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),int,union(struct(long,long),*(char)))),*(struct(*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),int,union(struct(long,long),*(char)))),int)->(void)
(	O
struct	O
wordsplit	struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct(long,*(*`),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*`),*(*`),long,long,*(*`),long,*(*`),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct`),*(struct`),array(char),int)))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*(char)),*(char),long,*(void))->(int)),*(void),*((*(*(char)),*(char),long,*(*(char)),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)
*	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
,	O
struct	O
wordsplit_node	struct(*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char)))),*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char)))),int,union(struct(long,long),*(char)))
*	O
node	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
,	O
struct	O
wordsplit_node	struct(*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char)))),*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char)))),int,union(struct(long,long),*(char)))
*	O
anchor	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
,	O
int	O
before	int
)	O
{	O
if	O
(	O
!	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_head	*(struct)
)	O
{	O
node	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
->	O
next	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
=	O
node	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
->	O
prev	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
=	O
NULL	O
;	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_head	*(struct)
=	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_tail	*(struct)
=	O
node	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
;	O
}	O
else	O
if	O
(	O
before	int
)	O
{	O
if	O
(	O
anchor	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
->	O
prev	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
)	O
wsnode_insert	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),array(char),int)),*(struct(*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),int,union(struct(long,long),*(char)))),*(struct(*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),int,union(struct(long,long),*(char)))),int)->(void)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
,	O
node	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
,	O
anchor	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
->	O
prev	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
,	O
0	int
)	O
;	O
else	O
{	O
struct	O
wordsplit_node	struct(*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char)))),*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char)))),int,union(struct(long,long),*(char)))
*	O
tail	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
=	O
wsnode_tail	(*(struct(*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),int,union(struct(long,long),*(char)))))->(*(struct(*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),int,union(struct(long,long),*(char)))))
(	O
node	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
)	O
;	O
node	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
->	O
prev	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
=	O
NULL	O
;	O
tail	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
->	O
next	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
=	O
anchor	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
;	O
anchor	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
->	O
prev	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
=	O
tail	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
;	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_head	*(struct)
=	O
node	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
;	O
}	O
}	O
else	O
{	O
struct	O
wordsplit_node	struct(*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char)))),*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char)))),int,union(struct(long,long),*(char)))
*	O
p	*(char)
;	O
struct	O
wordsplit_node	struct(*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char)))),*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char)))),int,union(struct(long,long),*(char)))
*	O
tail	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
=	O
wsnode_tail	(*(struct(*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),int,union(struct(long,long),*(char)))))->(*(struct(*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),int,union(struct(long,long),*(char)))))
(	O
node	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
)	O
;	O
p	*(char)
=	O
anchor	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
->	O
next	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
;	O
if	O
(	O
p	*(char)
)	O
p	*(char)
->	O
prev	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
=	O
tail	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
;	O
else	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_tail	*(struct)
=	O
tail	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
;	O
tail	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
->	O
next	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
=	O
p	*(char)
;	O
node	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
->	O
prev	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
=	O
anchor	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
;	O
anchor	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
->	O
next	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
=	O
node	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
;	O
}	O
}	O
static	O
int	O
wordsplit_add_segm	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),array(char),int)),long,long,int)->(int)
(	O
struct	O
wordsplit	struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct(long,*(*`),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*`),*(*`),long,long,*(*`),long,*(*`),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct`),*(struct`),array(char),int)))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*(char)),*(char),long,*(void))->(int)),*(void),*((*(*(char)),*(char),long,*(*(char)),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)
*	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
,	O
size_t	long
beg	long
,	O
size_t	long
end	long
,	O
int	O
flg	int
)	O
{	O
struct	O
wordsplit_node	struct(*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char)))),*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char)))),int,union(struct(long,long),*(char)))
*	O
node	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
;	O
int	O
rc	int
;	O
if	O
(	O
end	long
==	O
beg	long
&&	O
!	O
(	O
flg	int
&	O
_WSNF_EMPTYOK	int
)	O
)	O
return	O
0	int
;	O
rc	int
=	O
wsnode_new	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),array(char),int)),*(*(struct(*(struct`),*(struct`),int,union(struct`,*`)))))->(int)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
,	O
&	O
node	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
node	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
->	O
flags	int
=	O
flg	int
&	O
~	O
(	O
_WSNF_WORD	int
|	O
_WSNF_EMPTYOK	int
)	O
;	O
node	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
->	O
v	union(struct(long,long),*(char))
.	O
segm	struct(long,long)
.	O
beg	long
=	O
beg	long
;	O
node	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
->	O
v	union(struct(long,long),*(char))
.	O
segm	struct(long,long)
.	O
end	long
=	O
end	long
;	O
wsnode_append	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),array(char),int)),*(struct(*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),int,union(struct(long,long),*(char)))))->(void)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
,	O
node	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
)	O
;	O
return	O
0	int
;	O
}	O
static	O
void	O
wordsplit_free_nodes	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)))->(void)
(	O
struct	O
wordsplit	struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct(long,*(*`),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*`),*(*`),long,long,*(*`),long,*(*`),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct`),*(struct`),array(char),int)))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*(char)),*(char),long,*(void))->(int)),*(void),*((*(*(char)),*(char),long,*(*(char)),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)
*	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
)	O
{	O
struct	O
wordsplit_node	struct(*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char)))),*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char)))),int,union(struct(long,long),*(char)))
*	O
p	*(char)
;	O
for	O
(	O
p	*(char)
=	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_head	*(struct)
;	O
p	*(char)
;	O
)	O
{	O
struct	O
wordsplit_node	struct(*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char)))),*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char)))),int,union(struct(long,long),*(char)))
*	O
next	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
=	O
p	*(char)
->	O
next	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
;	O
wsnode_free	(*(struct(*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),int,union(struct(long,long),*(char)))))->(void)
(	O
p	*(char)
)	O
;	O
p	*(char)
=	O
next	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
;	O
}	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_head	*(struct)
=	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_tail	*(struct)
=	O
NULL	O
;	O
}	O
static	O
void	O
wordsplit_dump_nodes	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),array(char),int)))->(void)
(	O
struct	O
wordsplit	struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct(long,*(*`),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*`),*(*`),long,long,*(*`),long,*(*`),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct`),*(struct`),array(char),int)))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*(char)),*(char),long,*(void))->(int)),*(void),*((*(*(char)),*(char),long,*(*(char)),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)
*	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
)	O
{	O
struct	O
wordsplit_node	struct(*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char)))),*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char)))),int,union(struct(long,long),*(char)))
*	O
p	*(char)
;	O
int	O
n	long
=	O
0	int
;	O
for	O
(	O
p	*(char)
=	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_head	*(struct)
,	O
n	long
=	O
0	int
;	O
p	*(char)
;	O
p	*(char)
=	O
p	*(char)
->	O
next	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
,	O
n	long
++	O
)	O
{	O
if	O
(	O
p	*(char)
->	O
flags	int
&	O
_WSNF_WORD	int
)	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_debug	*((*(char))->(void))
(	O
"(%02d) %4d: %p: %#04x (%s):%s;"	*(char)
,	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_lvl	int
,	O
n	long
,	O
p	*(char)
,	O
p	*(char)
->	O
flags	int
,	O
wsnode_flagstr	(int)->(*(char))
(	O
p	*(char)
->	O
flags	int
)	O
,	O
p	*(char)
->	O
v	union(struct(long,long),*(char))
.	O
word	*(char)
)	O
;	O
else	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_debug	*((*(char))->(void))
(	O
"(%02d) %4d: %p: %#04x (%s):%.*s;"	*(char)
,	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_lvl	int
,	O
n	long
,	O
p	*(char)
,	O
p	*(char)
->	O
flags	int
,	O
wsnode_flagstr	(int)->(*(char))
(	O
p	*(char)
->	O
flags	int
)	O
,	O
(	O
int	O
)	O
(	O
p	*(char)
->	O
v	union(struct(long,long),*(char))
.	O
segm	struct(long,long)
.	O
end	long
-	O
p	*(char)
->	O
v	union(struct(long,long),*(char))
.	O
segm	struct(long,long)
.	O
beg	long
)	O
,	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_input	*(char)
+	O
p	*(char)
->	O
v	union(struct(long,long),*(char))
.	O
segm	struct(long,long)
.	O
beg	long
)	O
;	O
}	O
}	O
static	O
int	O
coalesce_segment	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),array(char),int)),*(struct(*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),int,union(struct(long,long),*(char)))))->(int)
(	O
struct	O
wordsplit	struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct(long,*(*`),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*`),*(*`),long,long,*(*`),long,*(*`),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct`),*(struct`),array(char),int)))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*(char)),*(char),long,*(void))->(int)),*(void),*((*(*(char)),*(char),long,*(*(char)),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)
*	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
,	O
struct	O
wordsplit_node	struct(*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char)))),*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char)))),int,union(struct(long,long),*(char)))
*	O
node	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
)	O
{	O
struct	O
wordsplit_node	struct(*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char)))),*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char)))),int,union(struct(long,long),*(char)))
*	O
p	*(char)
,	O
*	O
end	long
;	O
size_t	long
len	long
=	O
0	int
;	O
char	O
*	O
buf	*(char)
,	O
*	O
cur	*(char)
;	O
int	O
stop	int
;	O
if	O
(	O
!	O
(	O
node	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
->	O
flags	int
&	O
_WSNF_JOIN	int
)	O
)	O
return	O
0	int
;	O
for	O
(	O
p	*(char)
=	O
node	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
;	O
p	*(char)
&&	O
(	O
p	*(char)
->	O
flags	int
&	O
_WSNF_JOIN	int
)	O
;	O
p	*(char)
=	O
p	*(char)
->	O
next	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
)	O
{	O
len	long
+=	O
wsnode_len	(*(struct(*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),int,union(struct(long,long),*(char)))))->(long)
(	O
p	*(char)
)	O
;	O
}	O
if	O
(	O
p	*(char)
)	O
len	long
+=	O
wsnode_len	(*(struct(*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),int,union(struct(long,long),*(char)))))->(long)
(	O
p	*(char)
)	O
;	O
end	long
=	O
p	*(char)
;	O
buf	*(char)
=	O
malloc	(long)->(*(void))
(	O
len	long
+	O
1	int
)	O
;	O
if	O
(	O
!	O
buf	*(char)
)	O
return	O
_wsplt_nomem	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)))->(int)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
)	O
;	O
cur	*(char)
=	O
buf	*(char)
;	O
p	*(char)
=	O
node	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
;	O
for	O
(	O
stop	int
=	O
0	int
;	O
!	O
stop	int
;	O
)	O
{	O
struct	O
wordsplit_node	struct(*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char)))),*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char)))),int,union(struct(long,long),*(char)))
*	O
next	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
=	O
p	*(char)
->	O
next	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
;	O
const	O
char	O
*	O
str	*(char)
=	O
wsnode_ptr	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),array(char),int)),*(struct(*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),int,union(struct(long,long),*(char)))))->(*(char))
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
,	O
p	*(char)
)	O
;	O
size_t	long
slen	long
=	O
wsnode_len	(*(struct(*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),int,union(struct(long,long),*(char)))))->(long)
(	O
p	*(char)
)	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
cur	*(char)
,	O
str	*(char)
,	O
slen	long
)	O
;	O
cur	*(char)
+=	O
slen	long
;	O
if	O
(	O
p	*(char)
!=	O
node	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
)	O
{	O
node	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
->	O
flags	int
|=	O
p	*(char)
->	O
flags	int
&	O
_WSNF_QUOTE	int
;	O
wsnode_remove	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),array(char),int)),*(struct(*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),int,union(struct(long,long),*(char)))))->(void)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
,	O
p	*(char)
)	O
;	O
stop	int
=	O
p	*(char)
==	O
end	long
;	O
wsnode_free	(*(struct(*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),int,union(struct(long,long),*(char)))))->(void)
(	O
p	*(char)
)	O
;	O
}	O
p	*(char)
=	O
next	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
;	O
}	O
*	O
cur	*(char)
=	O
0	int
;	O
node	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
->	O
flags	int
&=	O
~	O
_WSNF_JOIN	int
;	O
if	O
(	O
node	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
->	O
flags	int
&	O
_WSNF_WORD	int
)	O
free	(*(void))->(void)
(	O
node	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
->	O
v	union(struct(long,long),*(char))
.	O
word	*(char)
)	O
;	O
else	O
node	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
->	O
flags	int
|=	O
_WSNF_WORD	int
;	O
node	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
->	O
v	union(struct(long,long),*(char))
.	O
word	*(char)
=	O
buf	*(char)
;	O
return	O
0	int
;	O
}	O
static	O
void	O
wordsplit_string_unquote_copy	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),array(char),int)),int,*(char),*(char),long)->(void)
(	O
struct	O
wordsplit	struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct(long,*(*`),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*`),*(*`),long,long,*(*`),long,*(*`),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct`),*(struct`),array(char),int)))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*(char)),*(char),long,*(void))->(int)),*(void),*((*(*(char)),*(char),long,*(*(char)),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)
*	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
,	O
int	O
inquote	int
,	O
char	O
*	O
dst	*(char)
,	O
const	O
char	O
*	O
src	*(char)
,	O
size_t	long
n	long
)	O
;	O
static	O
int	O
wsnode_quoteremoval	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),array(char),int)))->(int)
(	O
struct	O
wordsplit	struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct(long,*(*`),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*`),*(*`),long,long,*(*`),long,*(*`),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct`),*(struct`),array(char),int)))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*(char)),*(char),long,*(void))->(int)),*(void),*((*(*(char)),*(char),long,*(*(char)),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)
*	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
)	O
{	O
struct	O
wordsplit_node	struct(*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char)))),*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char)))),int,union(struct(long,long),*(char)))
*	O
p	*(char)
;	O
for	O
(	O
p	*(char)
=	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_head	*(struct)
;	O
p	*(char)
;	O
p	*(char)
=	O
p	*(char)
->	O
next	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
)	O
{	O
const	O
char	O
*	O
str	*(char)
=	O
wsnode_ptr	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),array(char),int)),*(struct(*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),int,union(struct(long,long),*(char)))))->(*(char))
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
,	O
p	*(char)
)	O
;	O
size_t	long
slen	long
=	O
wsnode_len	(*(struct(*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),int,union(struct(long,long),*(char)))))->(long)
(	O
p	*(char)
)	O
;	O
int	O
unquote	int
;	O
if	O
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_flags	int
&	O
WRDSF_QUOTE	O
)	O
unquote	int
=	O
!	O
(	O
p	*(char)
->	O
flags	int
&	O
_WSNF_NOEXPAND	int
)	O
;	O
else	O
unquote	int
=	O
0	int
;	O
if	O
(	O
unquote	int
)	O
{	O
if	O
(	O
!	O
(	O
p	*(char)
->	O
flags	int
&	O
_WSNF_WORD	int
)	O
)	O
{	O
char	O
*	O
newstr	*(char)
=	O
malloc	(long)->(*(void))
(	O
slen	long
+	O
1	int
)	O
;	O
if	O
(	O
!	O
newstr	*(char)
)	O
return	O
_wsplt_nomem	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)))->(int)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
)	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
newstr	*(char)
,	O
str	*(char)
,	O
slen	long
)	O
;	O
newstr	*(char)
[	O
slen	long
]	O
=	O
0	int
;	O
p	*(char)
->	O
v	union(struct(long,long),*(char))
.	O
word	*(char)
=	O
newstr	*(char)
;	O
p	*(char)
->	O
flags	int
|=	O
_WSNF_WORD	int
;	O
}	O
wordsplit_string_unquote_copy	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),array(char),int)),int,*(char),*(char),long)->(void)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
,	O
p	*(char)
->	O
flags	int
&	O
_WSNF_QUOTE	int
,	O
p	*(char)
->	O
v	union(struct(long,long),*(char))
.	O
word	*(char)
,	O
str	*(char)
,	O
slen	long
)	O
;	O
}	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
wsnode_coalesce	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),array(char),int)))->(int)
(	O
struct	O
wordsplit	struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct(long,*(*`),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*`),*(*`),long,long,*(*`),long,*(*`),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct`),*(struct`),array(char),int)))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*(char)),*(char),long,*(void))->(int)),*(void),*((*(*(char)),*(char),long,*(*(char)),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)
*	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
)	O
{	O
struct	O
wordsplit_node	struct(*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char)))),*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char)))),int,union(struct(long,long),*(char)))
*	O
p	*(char)
;	O
for	O
(	O
p	*(char)
=	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_head	*(struct)
;	O
p	*(char)
;	O
p	*(char)
=	O
p	*(char)
->	O
next	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
)	O
{	O
if	O
(	O
p	*(char)
->	O
flags	int
&	O
_WSNF_JOIN	int
)	O
if	O
(	O
coalesce_segment	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),array(char),int)),*(struct(*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),int,union(struct(long,long),*(char)))))->(int)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
,	O
p	*(char)
)	O
)	O
return	O
1	int
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
wsnode_tail_coalesce	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),array(char),int)),*(struct(*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),int,union(struct(long,long),*(char)))))->(int)
(	O
struct	O
wordsplit	struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct(long,*(*`),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*`),*(*`),long,long,*(*`),long,*(*`),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct`),*(struct`),array(char),int)))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*(char)),*(char),long,*(void))->(int)),*(void),*((*(*(char)),*(char),long,*(*(char)),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)
*	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
,	O
struct	O
wordsplit_node	struct(*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char)))),*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char)))),int,union(struct(long,long),*(char)))
*	O
p	*(char)
)	O
{	O
if	O
(	O
p	*(char)
->	O
next	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
)	O
{	O
struct	O
wordsplit_node	struct(*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char)))),*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char)))),int,union(struct(long,long),*(char)))
*	O
np	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
=	O
p	*(char)
;	O
while	O
(	O
np	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
&&	O
np	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
->	O
next	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
)	O
{	O
np	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
->	O
flags	int
|=	O
_WSNF_JOIN	int
;	O
np	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
=	O
np	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
->	O
next	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
;	O
}	O
if	O
(	O
coalesce_segment	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),array(char),int)),*(struct(*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),int,union(struct(long,long),*(char)))))->(int)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
,	O
p	*(char)
)	O
)	O
return	O
1	int
;	O
}	O
return	O
0	int
;	O
}	O
static	O
size_t	long
skip_delim	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),array(char),int)))->(long)
(	O
struct	O
wordsplit	struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct(long,*(*`),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*`),*(*`),long,long,*(*`),long,*(*`),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct`),*(struct`),array(char),int)))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*(char)),*(char),long,*(void))->(int)),*(void),*((*(*(char)),*(char),long,*(*(char)),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)
*	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
)	O
;	O
static	O
int	O
wordsplit_finish	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)))->(int)
(	O
struct	O
wordsplit	struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct(long,*(*`),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*`),*(*`),long,long,*(*`),long,*(*`),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct`),*(struct`),array(char),int)))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*(char)),*(char),long,*(void))->(int)),*(void),*((*(*(char)),*(char),long,*(*(char)),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)
*	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
)	O
{	O
struct	O
wordsplit_node	struct(*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char)))),*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char)))),int,union(struct(long,long),*(char)))
*	O
p	*(char)
;	O
size_t	long
n	long
;	O
int	O
delim	int
;	O
again	O
:	O
delim	int
=	O
0	int
;	O
n	long
=	O
0	int
;	O
p	*(char)
=	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_head	*(struct)
;	O
while	O
(	O
p	*(char)
)	O
{	O
struct	O
wordsplit_node	struct(*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char)))),*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char)))),int,union(struct(long,long),*(char)))
*	O
next	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
=	O
p	*(char)
->	O
next	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
;	O
if	O
(	O
p	*(char)
->	O
flags	int
&	O
_WSNF_DELIM	int
)	O
{	O
if	O
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_flags	int
&	O
WRDSF_RETURN_DELIMS	int
)	O
{	O
if	O
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_flags	int
&	O
WRDSF_SQUEEZE_DELIMS	int
)	O
{	O
char	O
const	O
*	O
s	*(char)
=	O
wsnode_ptr	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),array(char),int)),*(struct(*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),int,union(struct(long,long),*(char)))))->(*(char))
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
,	O
p	*(char)
)	O
;	O
if	O
(	O
delim	int
)	O
{	O
if	O
(	O
delim	int
==	O
*	O
s	*(char)
)	O
{	O
wsnode_remove	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),array(char),int)),*(struct(*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),int,union(struct(long,long),*(char)))))->(void)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
,	O
p	*(char)
)	O
;	O
p	*(char)
=	O
next	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
;	O
continue	O
;	O
}	O
else	O
{	O
delim	int
=	O
0	int
;	O
n	long
++	O
;	O
}	O
}	O
else	O
{	O
delim	int
=	O
*	O
s	*(char)
;	O
p	*(char)
=	O
next	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
;	O
continue	O
;	O
}	O
}	O
}	O
else	O
if	O
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_options	int
&	O
WRDSO_MAXWORDS	int
)	O
{	O
wsnode_remove	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),array(char),int)),*(struct(*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),int,union(struct(long,long),*(char)))))->(void)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
,	O
p	*(char)
)	O
;	O
p	*(char)
=	O
next	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
;	O
continue	O
;	O
}	O
}	O
else	O
{	O
if	O
(	O
delim	int
)	O
{	O
n	long
++	O
;	O
delim	int
=	O
0	int
;	O
}	O
if	O
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_options	int
&	O
WRDSO_MAXWORDS	int
)	O
{	O
if	O
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_wordi	long
+	O
n	long
+	O
1	int
==	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_maxwords	long
)	O
break	O
;	O
}	O
}	O
n	long
++	O
;	O
if	O
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_flags	int
&	O
WRDSF_INCREMENTAL	int
)	O
p	*(char)
=	O
NULL	O
;	O
else	O
p	*(char)
=	O
next	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
;	O
}	O
if	O
(	O
p	*(char)
)	O
{	O
if	O
(	O
wsnode_tail_coalesce	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),array(char),int)),*(struct(*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),int,union(struct(long,long),*(char)))))->(int)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
,	O
p	*(char)
)	O
)	O
return	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_errno	int
;	O
n	long
++	O
;	O
}	O
if	O
(	O
n	long
==	O
0	int
)	O
{	O
if	O
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_flags	int
&	O
WRDSF_INCREMENTAL	int
)	O
{	O
if	O
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_endp	long
<	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_len	long
)	O
{	O
int	O
rc	int
;	O
if	O
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_flags	int
&	O
WRDSF_SHOWDBG	int
)	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_debug	*((*(char))->(void))
(	O
_	O
(	O
"Restarting"	*(char)
)	O
)	O
;	O
rc	int
=	O
wordsplit_process_list	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)),long)->(int)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
,	O
skip_delim	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),array(char),int)))->(long)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
)	O
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
}	O
else	O
{	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_errno	int
=	O
WRDSE_EOF	O
;	O
return	O
WRDSE_EOF	O
;	O
}	O
goto	O
again	O
;	O
}	O
if	O
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_flags	int
&	O
WRDSF_NOSPLIT	int
)	O
{	O
if	O
(	O
wordsplit_add_segm	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),array(char),int)),long,long,int)->(int)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
,	O
0	int
,	O
0	int
,	O
_WSNF_EMPTYOK	int
)	O
)	O
return	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_errno	int
;	O
n	long
=	O
1	int
;	O
}	O
}	O
if	O
(	O
alloc_space	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)),long)->(int)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
,	O
n	long
+	O
1	int
)	O
)	O
return	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_errno	int
;	O
while	O
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_head	*(struct)
)	O
{	O
const	O
char	O
*	O
str	*(char)
=	O
wsnode_ptr	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),array(char),int)),*(struct(*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),int,union(struct(long,long),*(char)))))->(*(char))
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
,	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_head	*(struct)
)	O
;	O
size_t	long
slen	long
=	O
wsnode_len	(*(struct(*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),int,union(struct(long,long),*(char)))))->(long)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_head	*(struct)
)	O
;	O
char	O
*	O
newstr	*(char)
=	O
malloc	(long)->(*(void))
(	O
slen	long
+	O
1	int
)	O
;	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_wordv	*(*(char))
[	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_offs	long
+	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_wordc	long
]	O
=	O
newstr	*(char)
;	O
if	O
(	O
!	O
newstr	*(char)
)	O
return	O
_wsplt_nomem	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)))->(int)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
)	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
newstr	*(char)
,	O
str	*(char)
,	O
slen	long
)	O
;	O
newstr	*(char)
[	O
slen	long
]	O
=	O
0	int
;	O
wsnode_remove	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),array(char),int)),*(struct(*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),int,union(struct(long,long),*(char)))))->(void)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
,	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_head	*(struct)
)	O
;	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_wordc	long
++	O
;	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_wordi	long
++	O
;	O
if	O
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_flags	int
&	O
WRDSF_INCREMENTAL	int
)	O
break	O
;	O
}	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_wordv	*(*(char))
[	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_offs	long
+	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_wordc	long
]	O
=	O
NULL	O
;	O
return	O
0	int
;	O
}	O
int	O
wordsplit_append	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)),int,*(*(char)))->(int)
(	O
wordsplit_t	struct
*	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
,	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	*(*(char))
)	O
{	O
int	O
rc	int
;	O
size_t	long
i	long
;	O
rc	int
=	O
alloc_space	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)),long)->(int)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
,	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_wordc	long
+	O
argc	int
+	O
1	int
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
argc	int
;	O
i	long
++	O
)	O
{	O
char	O
*	O
newstr	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
argv	*(*(char))
[	O
i	long
]	O
)	O
;	O
if	O
(	O
!	O
newstr	*(char)
)	O
{	O
while	O
(	O
i	long
>	O
0	int
)	O
{	O
free	(*(void))->(void)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_wordv	*(*(char))
[	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_offs	long
+	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_wordc	long
+	O
i	long
-	O
1	int
]	O
)	O
;	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_wordv	*(*(char))
[	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_offs	long
+	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_wordc	long
+	O
i	long
-	O
1	int
]	O
=	O
NULL	O
;	O
i	long
--	O
;	O
}	O
return	O
_wsplt_nomem	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)))->(int)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
)	O
;	O
}	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_wordv	*(*(char))
[	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_offs	long
+	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_wordc	long
+	O
i	long
]	O
=	O
newstr	*(char)
;	O
}	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_wordc	long
+=	O
i	long
;	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_wordv	*(*(char))
[	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_offs	long
+	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_wordc	long
]	O
=	O
NULL	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
node_split_prefix	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),array(char),int)),*(*(struct(*(struct`),*(struct`),int,union(struct`,*`)))),*(struct(*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),int,union(struct(long,long),*(char)))),long,long,int)->(int)
(	O
struct	O
wordsplit	struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct(long,*(*`),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*`),*(*`),long,long,*(*`),long,*(*`),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct`),*(struct`),array(char),int)))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*(char)),*(char),long,*(void))->(int)),*(void),*((*(*(char)),*(char),long,*(*(char)),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)
*	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
,	O
struct	O
wordsplit_node	struct(*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char)))),*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char)))),int,union(struct(long,long),*(char)))
*	O
*	O
ptail	*(*(struct(*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),int,union(struct(long,long),*(char)))))
,	O
struct	O
wordsplit_node	struct(*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char)))),*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char)))),int,union(struct(long,long),*(char)))
*	O
node	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
,	O
size_t	long
beg	long
,	O
size_t	long
len	long
,	O
int	O
flg	int
)	O
{	O
struct	O
wordsplit_node	struct(*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char)))),*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char)))),int,union(struct(long,long),*(char)))
*	O
newnode	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
;	O
if	O
(	O
len	long
==	O
0	int
)	O
return	O
0	int
;	O
if	O
(	O
wsnode_new	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),array(char),int)),*(*(struct(*(struct`),*(struct`),int,union(struct`,*`)))))->(int)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
,	O
&	O
newnode	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
)	O
)	O
return	O
1	int
;	O
wsnode_insert	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),array(char),int)),*(struct(*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),int,union(struct(long,long),*(char)))),*(struct(*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),int,union(struct(long,long),*(char)))),int)->(void)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
,	O
newnode	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
,	O
*	O
ptail	*(*(struct(*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),int,union(struct(long,long),*(char)))))
,	O
0	int
)	O
;	O
if	O
(	O
node	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
->	O
flags	int
&	O
_WSNF_WORD	int
)	O
{	O
const	O
char	O
*	O
str	*(char)
=	O
wsnode_ptr	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),array(char),int)),*(struct(*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),int,union(struct(long,long),*(char)))))->(*(char))
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
,	O
node	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
)	O
;	O
char	O
*	O
newstr	*(char)
=	O
malloc	(long)->(*(void))
(	O
len	long
+	O
1	int
)	O
;	O
if	O
(	O
!	O
newstr	*(char)
)	O
return	O
_wsplt_nomem	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)))->(int)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
)	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
newstr	*(char)
,	O
str	*(char)
+	O
beg	long
,	O
len	long
)	O
;	O
newstr	*(char)
[	O
len	long
]	O
=	O
0	int
;	O
newnode	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
->	O
flags	int
=	O
_WSNF_WORD	int
;	O
newnode	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
->	O
v	union(struct(long,long),*(char))
.	O
word	*(char)
=	O
newstr	*(char)
;	O
}	O
else	O
{	O
newnode	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
->	O
v	union(struct(long,long),*(char))
.	O
segm	struct(long,long)
.	O
beg	long
=	O
node	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
->	O
v	union(struct(long,long),*(char))
.	O
segm	struct(long,long)
.	O
beg	long
+	O
beg	long
;	O
newnode	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
->	O
v	union(struct(long,long),*(char))
.	O
segm	struct(long,long)
.	O
end	long
=	O
newnode	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
->	O
v	union(struct(long,long),*(char))
.	O
segm	struct(long,long)
.	O
beg	long
+	O
len	long
;	O
}	O
newnode	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
->	O
flags	int
|=	O
flg	int
;	O
*	O
ptail	*(*(struct(*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),int,union(struct(long,long),*(char)))))
=	O
newnode	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
;	O
return	O
0	int
;	O
}	O
static	O
int	O
find_closing_paren	(*(char),long,long,*(long),*(char))->(int)
(	O
const	O
char	O
*	O
str	*(char)
,	O
size_t	long
i	long
,	O
size_t	long
len	long
,	O
size_t	long
*	O
poff	*(long)
,	O
char	O
const	O
*	O
paren	*(char)
)	O
{	O
enum	O
{	O
st_init	int
,	O
st_squote	int
,	O
st_dquote	int
}	O
state	*(int)
=	O
st_init	int
;	O
size_t	long
level	long
=	O
1	int
;	O
for	O
(	O
;	O
i	long
<	O
len	long
;	O
i	long
++	O
)	O
{	O
switch	O
(	O
state	*(int)
)	O
{	O
case	O
st_init	int
:	O
switch	O
(	O
str	*(char)
[	O
i	long
]	O
)	O
{	O
default	O
:	O
if	O
(	O
str	*(char)
[	O
i	long
]	O
==	O
paren	*(char)
[	O
0	int
]	O
)	O
{	O
level	long
++	O
;	O
break	O
;	O
}	O
else	O
if	O
(	O
str	*(char)
[	O
i	long
]	O
==	O
paren	*(char)
[	O
1	int
]	O
)	O
{	O
if	O
(	O
--	O
level	long
==	O
0	int
)	O
{	O
*	O
poff	*(long)
=	O
i	long
;	O
return	O
0	int
;	O
}	O
break	O
;	O
}	O
break	O
;	O
case	O
'"'	O
:	O
state	*(int)
=	O
st_dquote	int
;	O
break	O
;	O
case	O
'\''	O
:	O
state	*(int)
=	O
st_squote	int
;	O
break	O
;	O
}	O
break	O
;	O
case	O
st_squote	int
:	O
if	O
(	O
str	*(char)
[	O
i	long
]	O
==	O
'\''	O
)	O
state	*(int)
=	O
st_init	int
;	O
break	O
;	O
case	O
st_dquote	int
:	O
if	O
(	O
str	*(char)
[	O
i	long
]	O
==	O
'\\'	O
)	O
i	long
++	O
;	O
else	O
if	O
(	O
str	*(char)
[	O
i	long
]	O
==	O
'"'	O
)	O
state	*(int)
=	O
st_init	int
;	O
break	O
;	O
}	O
}	O
return	O
1	int
;	O
}	O
static	O
char	O
const	O
*	O
wsplt_env_find	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),array(char),int)),*(char),long)->(*(char))
(	O
struct	O
wordsplit	struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct(long,*(*`),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*`),*(*`),long,long,*(*`),long,*(*`),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct`),*(struct`),array(char),int)))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*(char)),*(char),long,*(void))->(int)),*(void),*((*(*(char)),*(char),long,*(*(char)),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)
*	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
,	O
const	O
char	O
*	O
name	*(char)
,	O
size_t	long
len	long
)	O
{	O
size_t	long
i	long
;	O
if	O
(	O
!	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_env	*(*(char))
)	O
return	O
NULL	O
;	O
if	O
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_flags	int
&	O
WRDSF_ENV_KV	int
)	O
{	O
for	O
(	O
i	long
=	O
0	int
;	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_env	*(*(char))
[	O
i	long
]	O
;	O
i	long
++	O
)	O
{	O
size_t	long
elen	long
=	O
strlen	(*(char))->(long)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_env	*(*(char))
[	O
i	long
]	O
)	O
;	O
if	O
(	O
elen	long
==	O
len	long
&&	O
memcmp	(*(void),*(void),long)->(int)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_env	*(*(char))
[	O
i	long
]	O
,	O
name	*(char)
,	O
elen	long
)	O
==	O
0	int
)	O
return	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_env	*(*(char))
[	O
i	long
+	O
1	int
]	O
;	O
i	long
++	O
;	O
if	O
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_env	*(*(char))
[	O
i	long
]	O
==	O
NULL	O
)	O
break	O
;	O
}	O
}	O
else	O
{	O
for	O
(	O
i	long
=	O
0	int
;	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_env	*(*(char))
[	O
i	long
]	O
;	O
i	long
++	O
)	O
{	O
size_t	long
j	long
;	O
const	O
char	O
*	O
var	*(char)
=	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_env	*(*(char))
[	O
i	long
]	O
;	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
len	long
;	O
j	long
++	O
)	O
if	O
(	O
name	*(char)
[	O
j	long
]	O
!=	O
var	*(char)
[	O
j	long
]	O
)	O
break	O
;	O
if	O
(	O
j	long
==	O
len	long
&&	O
var	*(char)
[	O
j	long
]	O
==	O
'='	O
)	O
return	O
var	*(char)
+	O
j	long
+	O
1	int
;	O
}	O
}	O
return	O
NULL	O
;	O
}	O
static	O
int	O
wsplt_env_lookup	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),array(char),int)),*(char),long,*(*(char)))->(int)
(	O
struct	O
wordsplit	struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct(long,*(*`),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*`),*(*`),long,long,*(*`),long,*(*`),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct`),*(struct`),array(char),int)))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*(char)),*(char),long,*(void))->(int)),*(void),*((*(*(char)),*(char),long,*(*(char)),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)
*	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
,	O
const	O
char	O
*	O
name	*(char)
,	O
size_t	long
len	long
,	O
char	O
*	O
*	O
ret	*(*(char))
)	O
{	O
if	O
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_flags	int
&	O
WRDSF_ENV	int
)	O
{	O
char	O
const	O
*	O
val	*(char)
=	O
wsplt_env_find	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),array(char),int)),*(char),long)->(*(char))
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
,	O
name	*(char)
,	O
len	long
)	O
;	O
if	O
(	O
val	*(char)
)	O
{	O
char	O
*	O
retval	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
val	*(char)
)	O
;	O
if	O
(	O
!	O
retval	*(char)
)	O
return	O
WRDSE_NOSPACE	int
;	O
*	O
ret	*(*(char))
=	O
retval	*(char)
;	O
return	O
WRDSE_OK	int
;	O
}	O
}	O
return	O
WRDSE_UNDEF	int
;	O
}	O
static	O
int	O
wsplt_env_getvar	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),array(char),int)),*(char),long,*(*(char)))->(int)
(	O
struct	O
wordsplit	struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct(long,*(*`),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*`),*(*`),long,long,*(*`),long,*(*`),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct`),*(struct`),array(char),int)))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*(char)),*(char),long,*(void))->(int)),*(void),*((*(*(char)),*(char),long,*(*(char)),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)
*	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
,	O
const	O
char	O
*	O
name	*(char)
,	O
size_t	long
len	long
,	O
char	O
*	O
*	O
ret	*(*(char))
)	O
{	O
return	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_getvar	*((*(*(char)),*(char),long,*(void))->(int))
(	O
ret	*(*(char))
,	O
name	*(char)
,	O
len	long
,	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_closure	*(void)
)	O
;	O
}	O
static	O
int	O
wsplt_assign_var	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),array(char),int)),*(char),long,*(char))->(int)
(	O
struct	O
wordsplit	struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct(long,*(*`),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*`),*(*`),long,long,*(*`),long,*(*`),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct`),*(struct`),array(char),int)))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*(char)),*(char),long,*(void))->(int)),*(void),*((*(*(char)),*(char),long,*(*(char)),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)
*	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
,	O
const	O
char	O
*	O
name	*(char)
,	O
size_t	long
namelen	long
,	O
char	O
const	O
*	O
value	*(char)
)	O
{	O
int	O
n	long
=	O
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_flags	int
&	O
WRDSF_ENV_KV	int
)	O
?	O
2	int
:	O
1	int
;	O
char	O
*	O
v	union(struct(long,long),*(char))
;	O
if	O
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_envidx	long
+	O
n	long
>=	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_envsiz	long
)	O
{	O
size_t	long
sz	long
;	O
char	O
*	O
*	O
newenv	*(*(char))
;	O
if	O
(	O
!	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_envbuf	*(*(char))
)	O
{	O
if	O
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_flags	int
&	O
WRDSF_ENV	int
)	O
{	O
size_t	long
i	long
=	O
0	int
,	O
j	long
;	O
if	O
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_env	*(*(char))
)	O
{	O
for	O
(	O
;	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_env	*(*(char))
[	O
i	long
]	O
;	O
i	long
++	O
)	O
;	O
}	O
sz	long
=	O
i	long
+	O
n	long
+	O
1	int
;	O
newenv	*(*(char))
=	O
calloc	(long,long)->(*(void))
(	O
sz	long
,	O
sizeof	O
(	O
newenv	*(*(char))
[	O
0	int
]	O
)	O
)	O
;	O
if	O
(	O
!	O
newenv	*(*(char))
)	O
return	O
_wsplt_nomem	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)))->(int)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
)	O
;	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
i	long
;	O
j	long
++	O
)	O
{	O
newenv	*(*(char))
[	O
j	long
]	O
=	O
strdup	(*(char))->(*(char))
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_env	*(*(char))
[	O
j	long
]	O
)	O
;	O
if	O
(	O
!	O
newenv	*(*(char))
[	O
j	long
]	O
)	O
{	O
for	O
(	O
;	O
j	long
>	O
1	int
;	O
j	long
--	O
)	O
free	(*(void))->(void)
(	O
newenv	*(*(char))
[	O
j	long
-	O
1	int
]	O
)	O
;	O
free	(*(void))->(void)
(	O
newenv	*(*(char))
)	O
;	O
return	O
_wsplt_nomem	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)))->(int)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
)	O
;	O
}	O
}	O
newenv	*(*(char))
[	O
j	long
]	O
=	O
NULL	O
;	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_envbuf	*(*(char))
=	O
newenv	*(*(char))
;	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_envidx	long
=	O
i	long
;	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_envsiz	long
=	O
sz	long
;	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_env	*(*(char))
=	O
(	O
const	O
char	O
*	O
*	O
)	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_envbuf	*(*(char))
;	O
}	O
else	O
{	O
newenv	*(*(char))
=	O
calloc	(long,long)->(*(void))
(	O
WORDSPLIT_ENV_INIT	int
,	O
sizeof	O
(	O
newenv	*(*(char))
[	O
0	int
]	O
)	O
)	O
;	O
if	O
(	O
!	O
newenv	*(*(char))
)	O
return	O
_wsplt_nomem	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)))->(int)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
)	O
;	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_envbuf	*(*(char))
=	O
newenv	*(*(char))
;	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_envidx	long
=	O
0	int
;	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_envsiz	long
=	O
WORDSPLIT_ENV_INIT	int
;	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_env	*(*(char))
=	O
(	O
const	O
char	O
*	O
*	O
)	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_envbuf	*(*(char))
;	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_flags	int
|=	O
WRDSF_ENV	int
;	O
}	O
}	O
else	O
{	O
size_t	long
n	long
=	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_envsiz	long
;	O
if	O
(	O
(	O
size_t	long
)	O
-	O
1	int
/	O
3	int
*	O
2	int
/	O
sizeof	O
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_envbuf	*(*(char))
[	O
0	int
]	O
)	O
<=	O
n	long
)	O
return	O
_wsplt_nomem	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)))->(int)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
)	O
;	O
n	long
+=	O
(	O
n	long
+	O
1	int
)	O
/	O
2	int
;	O
newenv	*(*(char))
=	O
realloc	(*(void),long)->(*(void))
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_envbuf	*(*(char))
,	O
n	long
*	O
sizeof	O
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_envbuf	*(*(char))
[	O
0	int
]	O
)	O
)	O
;	O
if	O
(	O
!	O
newenv	*(*(char))
)	O
return	O
_wsplt_nomem	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)))->(int)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
)	O
;	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_envbuf	*(*(char))
=	O
newenv	*(*(char))
;	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_envsiz	long
=	O
n	long
;	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_env	*(*(char))
=	O
(	O
const	O
char	O
*	O
*	O
)	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_envbuf	*(*(char))
;	O
}	O
}	O
if	O
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_flags	int
&	O
WRDSF_ENV_KV	int
)	O
{	O
char	O
*	O
p	*(char)
=	O
malloc	(long)->(*(void))
(	O
namelen	long
+	O
1	int
)	O
;	O
if	O
(	O
!	O
p	*(char)
)	O
return	O
_wsplt_nomem	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)))->(int)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
)	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
p	*(char)
,	O
name	*(char)
,	O
namelen	long
)	O
;	O
p	*(char)
[	O
namelen	long
]	O
=	O
0	int
;	O
v	union(struct(long,long),*(char))
=	O
strdup	(*(char))->(*(char))
(	O
value	*(char)
)	O
;	O
if	O
(	O
!	O
v	union(struct(long,long),*(char))
)	O
{	O
free	(*(void))->(void)
(	O
p	*(char)
)	O
;	O
return	O
_wsplt_nomem	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)))->(int)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
)	O
;	O
}	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_env	*(*(char))
[	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_envidx	long
++	O
]	O
=	O
p	*(char)
;	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_env	*(*(char))
[	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_envidx	long
++	O
]	O
=	O
v	union(struct(long,long),*(char))
;	O
}	O
else	O
{	O
v	union(struct(long,long),*(char))
=	O
malloc	(long)->(*(void))
(	O
namelen	long
+	O
strlen	(*(char))->(long)
(	O
value	*(char)
)	O
+	O
2	int
)	O
;	O
if	O
(	O
!	O
v	union(struct(long,long),*(char))
)	O
return	O
_wsplt_nomem	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)))->(int)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
)	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
v	union(struct(long,long),*(char))
,	O
name	*(char)
,	O
namelen	long
)	O
;	O
v	union(struct(long,long),*(char))
[	O
namelen	long
++	O
]	O
=	O
'='	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
v	union(struct(long,long),*(char))
+	O
namelen	long
,	O
value	*(char)
)	O
;	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_env	*(*(char))
[	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_envidx	long
++	O
]	O
=	O
v	union(struct(long,long),*(char))
;	O
}	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_env	*(*(char))
[	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_envidx	long
]	O
=	O
NULL	O
;	O
return	O
WRDSE_OK	int
;	O
}	O
int	O
wsplt_assign_param	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),array(char),int)),int,*(char))->(int)
(	O
struct	O
wordsplit	struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct(long,*(*`),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*`),*(*`),long,long,*(*`),long,*(*`),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct`),*(struct`),array(char),int)))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*(char)),*(char),long,*(void))->(int)),*(void),*((*(*(char)),*(char),long,*(*(char)),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)
*	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
,	O
int	O
param_idx	int
,	O
char	O
*	O
value	*(char)
)	O
{	O
char	O
*	O
v	union(struct(long,long),*(char))
;	O
if	O
(	O
param_idx	int
<	O
0	int
)	O
return	O
_wsplt_seterr	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)),int)->(int)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
,	O
WRDSE_BADPARAM	int
)	O
;	O
if	O
(	O
param_idx	int
==	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_paramc	long
)	O
{	O
char	O
*	O
*	O
parambuf	*(*(char))
;	O
if	O
(	O
!	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_parambuf	*(*(char))
)	O
{	O
size_t	long
i	long
;	O
parambuf	*(*(char))
=	O
calloc	(long,long)->(*(void))
(	O
(	O
size_t	long
)	O
param_idx	int
+	O
1	int
,	O
sizeof	O
(	O
parambuf	*(*(char))
[	O
0	int
]	O
)	O
)	O
;	O
if	O
(	O
!	O
parambuf	*(*(char))
)	O
return	O
_wsplt_nomem	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)))->(int)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_paramc	long
;	O
i	long
++	O
)	O
{	O
parambuf	*(*(char))
[	O
i	long
]	O
=	O
strdup	(*(char))->(*(char))
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_paramv	*(*(char))
[	O
i	long
]	O
)	O
;	O
if	O
(	O
!	O
parambuf	*(*(char))
[	O
i	long
]	O
)	O
{	O
for	O
(	O
;	O
i	long
>	O
1	int
;	O
i	long
--	O
)	O
free	(*(void))->(void)
(	O
parambuf	*(*(char))
[	O
i	long
-	O
1	int
]	O
)	O
;	O
free	(*(void))->(void)
(	O
parambuf	*(*(char))
)	O
;	O
return	O
_wsplt_nomem	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)))->(int)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
)	O
;	O
}	O
}	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_parambuf	*(*(char))
=	O
parambuf	*(*(char))
;	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_paramidx	long
=	O
param_idx	int
;	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_paramsiz	long
=	O
param_idx	int
+	O
1	int
;	O
}	O
else	O
{	O
size_t	long
n	long
=	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_paramsiz	long
;	O
if	O
(	O
(	O
size_t	long
)	O
-	O
1	int
/	O
3	int
*	O
2	int
/	O
sizeof	O
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_parambuf	*(*(char))
[	O
0	int
]	O
)	O
<=	O
n	long
)	O
return	O
_wsplt_nomem	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)))->(int)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
)	O
;	O
n	long
+=	O
(	O
n	long
+	O
1	int
)	O
/	O
2	int
;	O
parambuf	*(*(char))
=	O
realloc	(*(void),long)->(*(void))
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_parambuf	*(*(char))
,	O
n	long
*	O
sizeof	O
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_parambuf	*(*(char))
[	O
0	int
]	O
)	O
)	O
;	O
if	O
(	O
!	O
parambuf	*(*(char))
)	O
return	O
_wsplt_nomem	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)))->(int)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
)	O
;	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_parambuf	*(*(char))
=	O
parambuf	*(*(char))
;	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_paramsiz	long
=	O
n	long
;	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_parambuf	*(*(char))
[	O
param_idx	int
]	O
=	O
NULL	O
;	O
}	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_paramv	*(*(char))
=	O
(	O
const	O
char	O
*	O
*	O
)	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_parambuf	*(*(char))
;	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_paramc	long
=	O
param_idx	int
+	O
1	int
;	O
}	O
else	O
if	O
(	O
param_idx	int
>	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_paramc	long
)	O
return	O
_wsplt_seterr	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)),int)->(int)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
,	O
WRDSE_BADPARAM	int
)	O
;	O
v	union(struct(long,long),*(char))
=	O
strdup	(*(char))->(*(char))
(	O
value	*(char)
)	O
;	O
if	O
(	O
!	O
v	union(struct(long,long),*(char))
)	O
return	O
_wsplt_nomem	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)))->(int)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
)	O
;	O
free	(*(void))->(void)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_parambuf	*(*(char))
[	O
param_idx	int
]	O
)	O
;	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_parambuf	*(*(char))
[	O
param_idx	int
]	O
=	O
v	union(struct(long,long),*(char))
;	O
return	O
WRDSE_OK	int
;	O
}	O
static	O
int	O
expvar_recover	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),array(char),int)),*(char),*(*(struct(*(struct`),*(struct`),int,union(struct`,*`)))),*(*(char)),int)->(int)
(	O
struct	O
wordsplit	struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct(long,*(*`),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*`),*(*`),long,long,*(*`),long,*(*`),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct`),*(struct`),array(char),int)))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*(char)),*(char),long,*(void))->(int)),*(void),*((*(*(char)),*(char),long,*(*(char)),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)
*	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
,	O
const	O
char	O
*	O
str	*(char)
,	O
struct	O
wordsplit_node	struct(*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char)))),*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char)))),int,union(struct(long,long),*(char)))
*	O
*	O
ptail	*(*(struct(*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),int,union(struct(long,long),*(char)))))
,	O
const	O
char	O
*	O
*	O
pend	*(*(char))
,	O
int	O
flg	int
)	O
{	O
struct	O
wordsplit_node	struct(*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char)))),*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char)))),int,union(struct(long,long),*(char)))
*	O
newnode	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
;	O
if	O
(	O
wsnode_new	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),array(char),int)),*(*(struct(*(struct`),*(struct`),int,union(struct`,*`)))))->(int)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
,	O
&	O
newnode	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
)	O
)	O
return	O
1	int
;	O
wsnode_insert	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),array(char),int)),*(struct(*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),int,union(struct(long,long),*(char)))),*(struct(*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),int,union(struct(long,long),*(char)))),int)->(void)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
,	O
newnode	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
,	O
*	O
ptail	*(*(struct(*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),int,union(struct(long,long),*(char)))))
,	O
0	int
)	O
;	O
*	O
ptail	*(*(struct(*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),int,union(struct(long,long),*(char)))))
=	O
newnode	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
;	O
newnode	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
->	O
flags	int
=	O
_WSNF_WORD	int
|	O
flg	int
;	O
newnode	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
->	O
v	union(struct(long,long),*(char))
.	O
word	*(char)
=	O
malloc	(long)->(*(void))
(	O
3	int
)	O
;	O
if	O
(	O
!	O
newnode	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
->	O
v	union(struct(long,long),*(char))
.	O
word	*(char)
)	O
return	O
_wsplt_nomem	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)))->(int)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
)	O
;	O
newnode	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
->	O
v	union(struct(long,long),*(char))
.	O
word	*(char)
[	O
0	int
]	O
=	O
'$'	O
;	O
newnode	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
->	O
v	union(struct(long,long),*(char))
.	O
word	*(char)
[	O
1	int
]	O
=	O
str	*(char)
[	O
0	int
]	O
;	O
newnode	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
->	O
v	union(struct(long,long),*(char))
.	O
word	*(char)
[	O
2	int
]	O
=	O
0	int
;	O
*	O
pend	*(*(char))
=	O
str	*(char)
;	O
return	O
0	int
;	O
}	O
static	O
int	O
expand_paramv	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),array(char),int)),*(*(struct(*(struct`),*(struct`),int,union(struct`,*`)))),int,int)->(int)
(	O
struct	O
wordsplit	struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct(long,*(*`),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*`),*(*`),long,long,*(*`),long,*(*`),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct`),*(struct`),array(char),int)))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*(char)),*(char),long,*(void))->(int)),*(void),*((*(*(char)),*(char),long,*(*(char)),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)
*	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
,	O
struct	O
wordsplit_node	struct(*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char)))),*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char)))),int,union(struct(long,long),*(char)))
*	O
*	O
ptail	*(*(struct(*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),int,union(struct(long,long),*(char)))))
,	O
int	O
flg	int
,	O
int	O
q	int
)	O
{	O
struct	O
wordsplit	struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct(long,*(*`),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*`),*(*`),long,long,*(*`),long,*(*`),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct`),*(struct`),array(char),int)))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*(char)),*(char),long,*(void))->(int)),*(void),*((*(*(char)),*(char),long,*(*(char)),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
;	O
int	O
wsflags	int
=	O
WRDSF_NOVAR	int
|	O
WRDSF_NOCMD	int
|	O
WRDSF_QUOTE	O
|	O
(	O
WSP_RETURN_DELIMS	O
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
)	O
?	O
WRDSF_RETURN_DELIMS	int
:	O
0	int
)	O
|	O
(	O
q	int
?	O
WRDSF_NOSPLIT	int
:	O
0	int
)	O
;	O
size_t	long
i	long
;	O
struct	O
wordsplit_node	struct(*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char)))),*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char)))),int,union(struct(long,long),*(char)))
*	O
tail	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
=	O
*	O
ptail	*(*(struct(*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),int,union(struct(long,long),*(char)))))
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_paramc	long
;	O
i	long
++	O
)	O
{	O
struct	O
wordsplit_node	struct(*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char)))),*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char)))),int,union(struct(long,long),*(char)))
*	O
np	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
;	O
int	O
rc	int
=	O
_wsplt_subsplit	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)),*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)),*(char),int,int,int)->(int)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
,	O
&	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
,	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_paramv	*(*(char))
[	O
i	long
]	O
,	O
strlen	(*(char))->(long)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_paramv	*(*(char))
[	O
i	long
]	O
)	O
,	O
wsflags	int
,	O
q	int
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
_wsplt_seterr_sub	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)),*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)))->(void)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
,	O
&	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
)	O
;	O
wordsplit_free	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)))->(void)
(	O
&	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
)	O
;	O
return	O
1	int
;	O
}	O
if	O
(	O
q	int
)	O
{	O
if	O
(	O
wsnode_new	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),array(char),int)),*(*(struct(*(struct`),*(struct`),int,union(struct`,*`)))))->(int)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
,	O
&	O
np	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
)	O
)	O
return	O
1	int
;	O
wsnode_insert	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),array(char),int)),*(struct(*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),int,union(struct(long,long),*(char)))),*(struct(*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),int,union(struct(long,long),*(char)))),int)->(void)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
,	O
np	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
,	O
*	O
ptail	*(*(struct(*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),int,union(struct(long,long),*(char)))))
,	O
0	int
)	O
;	O
*	O
ptail	*(*(struct(*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),int,union(struct(long,long),*(char)))))
=	O
np	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
;	O
np	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
->	O
flags	int
=	O
_WSNF_WORD	int
|	O
_WSNF_NOEXPAND	int
|	O
flg	int
;	O
np	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
->	O
v	union(struct(long,long),*(char))
.	O
word	*(char)
=	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
.	O
ws_wordv	*(*(char))
[	O
0	int
]	O
;	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
.	O
ws_wordv	*(*(char))
[	O
0	int
]	O
=	O
NULL	O
;	O
}	O
else	O
{	O
for	O
(	O
np	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
=	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
.	O
ws_head	*(struct)
;	O
np	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
;	O
np	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
=	O
np	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
->	O
next	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
)	O
np	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
->	O
flags	int
=	O
_WSNF_WORD	int
|	O
_WSNF_NOEXPAND	int
|	O
flg	int
;	O
wsnode_insert	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),array(char),int)),*(struct(*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),int,union(struct(long,long),*(char)))),*(struct(*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),int,union(struct(long,long),*(char)))),int)->(void)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
,	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
.	O
ws_head	*(struct)
,	O
*	O
ptail	*(*(struct(*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),int,union(struct(long,long),*(char)))))
,	O
0	int
)	O
;	O
*	O
ptail	*(*(struct(*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),int,union(struct(long,long),*(char)))))
=	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
.	O
ws_tail	*(struct)
;	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
.	O
ws_head	*(struct)
=	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
.	O
ws_tail	*(struct)
=	O
NULL	O
;	O
}	O
wsflags	int
|=	O
WRDSF_REUSE	int
;	O
}	O
if	O
(	O
wsflags	int
&	O
WRDSF_REUSE	int
)	O
wordsplit_free	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)))->(void)
(	O
&	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
)	O
;	O
if	O
(	O
flg	int
&	O
_WSNF_QUOTE	int
)	O
{	O
tail	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
=	O
tail	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
->	O
next	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
;	O
while	O
(	O
tail	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
!=	O
*	O
ptail	*(*(struct(*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),int,union(struct(long,long),*(char)))))
)	O
{	O
struct	O
wordsplit_node	struct(*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char)))),*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char)))),int,union(struct(long,long),*(char)))
*	O
next	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
=	O
tail	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
->	O
next	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
;	O
struct	O
wordsplit_node	struct(*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char)))),*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char)))),int,union(struct(long,long),*(char)))
*	O
newnode	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
;	O
tail	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
->	O
flags	int
|=	O
_WSNF_JOIN	int
;	O
if	O
(	O
wsnode_new	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),array(char),int)),*(*(struct(*(struct`),*(struct`),int,union(struct`,*`)))))->(int)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
,	O
&	O
newnode	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
)	O
)	O
return	O
1	int
;	O
newnode	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
->	O
flags	int
=	O
_WSNF_WORD	int
|	O
_WSNF_CONST	int
|	O
_WSNF_NOEXPAND	int
|	O
_WSNF_JOIN	int
;	O
newnode	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
->	O
v	union(struct(long,long),*(char))
.	O
word	*(char)
=	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_sep	array(char)
;	O
wsnode_insert	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),array(char),int)),*(struct(*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),int,union(struct(long,long),*(char)))),*(struct(*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),int,union(struct(long,long),*(char)))),int)->(void)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
,	O
newnode	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
,	O
tail	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
,	O
0	int
)	O
;	O
tail	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
=	O
next	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
;	O
}	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
expvar	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),array(char),int)),*(char),long,*(*(struct(*(struct`),*(struct`),int,union(struct`,*`)))),*(*(char)),int)->(int)
(	O
struct	O
wordsplit	struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct(long,*(*`),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*`),*(*`),long,long,*(*`),long,*(*`),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct`),*(struct`),array(char),int)))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*(char)),*(char),long,*(void))->(int)),*(void),*((*(*(char)),*(char),long,*(*(char)),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)
*	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
,	O
const	O
char	O
*	O
str	*(char)
,	O
size_t	long
len	long
,	O
struct	O
wordsplit_node	struct(*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char)))),*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char)))),int,union(struct(long,long),*(char)))
*	O
*	O
ptail	*(*(struct(*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),int,union(struct(long,long),*(char)))))
,	O
const	O
char	O
*	O
*	O
pend	*(*(char))
,	O
int	O
flg	int
)	O
{	O
size_t	long
i	long
=	O
0	int
;	O
const	O
char	O
*	O
defstr	*(char)
=	O
NULL	O
;	O
char	O
*	O
value	*(char)
;	O
struct	O
wordsplit_node	struct(*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char)))),*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char)))),int,union(struct(long,long),*(char)))
*	O
newnode	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
;	O
const	O
char	O
*	O
start	long
=	O
str	*(char)
-	O
1	int
;	O
int	O
rc	int
;	O
struct	O
wordsplit	struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct(long,*(*`),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*`),*(*`),long,long,*(*`),long,*(*`),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct`),*(struct`),array(char),int)))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*(char)),*(char),long,*(void))->(int)),*(void),*((*(*(char)),*(char),long,*(*(char)),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
;	O
int	O
is_param	int
=	O
0	int
;	O
long	O
param_idx	int
=	O
0	int
;	O
if	O
(	O
ISVARBEG	O
(	O
str	*(char)
[	O
0	int
]	O
)	O
)	O
{	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<	O
len	long
;	O
i	long
++	O
)	O
if	O
(	O
!	O
ISVARCHR	O
(	O
str	*(char)
[	O
i	long
]	O
)	O
)	O
break	O
;	O
*	O
pend	*(*(char))
=	O
str	*(char)
+	O
i	long
-	O
1	int
;	O
}	O
else	O
if	O
(	O
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_options	int
&	O
WRDSO_PARAMV	int
)	O
&&	O
ISDIGIT	O
(	O
str	*(char)
[	O
0	int
]	O
)	O
)	O
{	O
i	long
=	O
1	int
;	O
*	O
pend	*(*(char))
=	O
str	*(char)
;	O
is_param	int
=	O
1	int
;	O
param_idx	int
=	O
to_num	O
(	O
str	*(char)
[	O
0	int
]	O
)	O
;	O
}	O
else	O
if	O
(	O
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_options	int
&	O
WRDSO_PARAMV	int
)	O
&&	O
str	*(char)
[	O
0	int
]	O
==	O
'#'	O
)	O
{	O
char	O
b	array(char)
[	O
16	int
]	O
;	O
snprintf	(*(char),long,*(char))->(int)
(	O
b	array(char)
,	O
sizeof	O
(	O
b	array(char)
)	O
,	O
"%d"	*(char)
,	O
(	O
int	O
)	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_paramc	long
)	O
;	O
value	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
b	array(char)
)	O
;	O
if	O
(	O
!	O
value	*(char)
)	O
return	O
_wsplt_nomem	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)))->(int)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
)	O
;	O
if	O
(	O
wsnode_new	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),array(char),int)),*(*(struct(*(struct`),*(struct`),int,union(struct`,*`)))))->(int)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
,	O
&	O
newnode	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
)	O
)	O
return	O
1	int
;	O
wsnode_insert	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),array(char),int)),*(struct(*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),int,union(struct(long,long),*(char)))),*(struct(*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),int,union(struct(long,long),*(char)))),int)->(void)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
,	O
newnode	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
,	O
*	O
ptail	*(*(struct(*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),int,union(struct(long,long),*(char)))))
,	O
0	int
)	O
;	O
*	O
ptail	*(*(struct(*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),int,union(struct(long,long),*(char)))))
=	O
newnode	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
;	O
newnode	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
->	O
flags	int
=	O
_WSNF_WORD	int
|	O
_WSNF_NOEXPAND	int
|	O
flg	int
;	O
newnode	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
->	O
v	union(struct(long,long),*(char))
.	O
word	*(char)
=	O
value	*(char)
;	O
return	O
0	int
;	O
}	O
else	O
if	O
(	O
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_options	int
&	O
WRDSO_PARAMV	int
)	O
&&	O
str	*(char)
[	O
0	int
]	O
==	O
'*'	O
)	O
{	O
return	O
expand_paramv	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),array(char),int)),*(*(struct(*(struct`),*(struct`),int,union(struct`,*`)))),int,int)->(int)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
,	O
ptail	*(*(struct(*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),int,union(struct(long,long),*(char)))))
,	O
flg	int
,	O
0	int
)	O
;	O
}	O
else	O
if	O
(	O
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_options	int
&	O
WRDSO_PARAMV	int
)	O
&&	O
str	*(char)
[	O
0	int
]	O
==	O
'@'	O
)	O
{	O
return	O
expand_paramv	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),array(char),int)),*(*(struct(*(struct`),*(struct`),int,union(struct`,*`)))),int,int)->(int)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
,	O
ptail	*(*(struct(*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),int,union(struct(long,long),*(char)))))
,	O
flg	int
,	O
1	int
)	O
;	O
}	O
else	O
if	O
(	O
str	*(char)
[	O
0	int
]	O
==	O
'{'	O
&&	O
(	O
ISVARBEG	O
(	O
str	*(char)
[	O
1	int
]	O
)	O
||	O
(	O
is_param	int
=	O
(	O
(	O
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_options	int
&	O
WRDSO_PARAMV	int
)	O
&&	O
ISDIGIT	O
(	O
str	*(char)
[	O
1	int
]	O
)	O
)	O
||	O
(	O
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_options	int
&	O
WRDSO_PARAM_NEGIDX	int
)	O
&&	O
(	O
str	*(char)
[	O
1	int
]	O
==	O
'-'	O
&&	O
ISDIGIT	O
(	O
str	*(char)
[	O
2	int
]	O
)	O
)	O
)	O
)	O
)	O
!=	O
0	int
)	O
)	O
{	O
str	*(char)
++	O
;	O
len	long
--	O
;	O
for	O
(	O
i	long
=	O
str	*(char)
[	O
0	int
]	O
==	O
'-'	O
?	O
1	int
:	O
0	int
;	O
i	long
<	O
len	long
;	O
i	long
++	O
)	O
{	O
if	O
(	O
str	*(char)
[	O
i	long
]	O
==	O
':'	O
)	O
{	O
size_t	long
j	long
;	O
defstr	*(char)
=	O
str	*(char)
+	O
i	long
+	O
1	int
;	O
if	O
(	O
find_closing_paren	(*(char),long,long,*(long),*(char))->(int)
(	O
str	*(char)
,	O
i	long
+	O
1	int
,	O
len	long
,	O
&	O
j	long
,	O
"{}"	*(char)
)	O
)	O
return	O
_wsplt_seterr	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)),int)->(int)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
,	O
WRDSE_CBRACE	int
)	O
;	O
*	O
pend	*(*(char))
=	O
str	*(char)
+	O
j	long
;	O
break	O
;	O
}	O
else	O
if	O
(	O
str	*(char)
[	O
i	long
]	O
==	O
'}'	O
)	O
{	O
defstr	*(char)
=	O
NULL	O
;	O
*	O
pend	*(*(char))
=	O
str	*(char)
+	O
i	long
;	O
break	O
;	O
}	O
else	O
if	O
(	O
strchr	(*(char),int)->(*(char))
(	O
"-+?="	*(char)
,	O
str	*(char)
[	O
i	long
]	O
)	O
)	O
{	O
size_t	long
j	long
;	O
defstr	*(char)
=	O
str	*(char)
+	O
i	long
;	O
if	O
(	O
find_closing_paren	(*(char),long,long,*(long),*(char))->(int)
(	O
str	*(char)
,	O
i	long
,	O
len	long
,	O
&	O
j	long
,	O
"{}"	*(char)
)	O
)	O
return	O
_wsplt_seterr	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)),int)->(int)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
,	O
WRDSE_CBRACE	int
)	O
;	O
*	O
pend	*(*(char))
=	O
str	*(char)
+	O
j	long
;	O
break	O
;	O
}	O
else	O
if	O
(	O
is_param	int
)	O
{	O
if	O
(	O
ISDIGIT	O
(	O
str	*(char)
[	O
i	long
]	O
)	O
)	O
{	O
param_idx	int
=	O
param_idx	int
*	O
10	int
+	O
to_num	O
(	O
str	*(char)
[	O
i	long
]	O
)	O
;	O
if	O
(	O
(	O
str	*(char)
[	O
0	int
]	O
==	O
'-'	O
&&	O
-	O
param_idx	int
<	O
INT_MIN	O
)	O
||	O
param_idx	int
>	O
INT_MAX	O
)	O
return	O
expvar_recover	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),array(char),int)),*(char),*(*(struct(*(struct`),*(struct`),int,union(struct`,*`)))),*(*(char)),int)->(int)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
,	O
str	*(char)
-	O
1	int
,	O
ptail	*(*(struct(*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),int,union(struct(long,long),*(char)))))
,	O
pend	*(*(char))
,	O
flg	int
)	O
;	O
}	O
else	O
{	O
return	O
expvar_recover	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),array(char),int)),*(char),*(*(struct(*(struct`),*(struct`),int,union(struct`,*`)))),*(*(char)),int)->(int)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
,	O
str	*(char)
-	O
1	int
,	O
ptail	*(*(struct(*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),int,union(struct(long,long),*(char)))))
,	O
pend	*(*(char))
,	O
flg	int
)	O
;	O
}	O
}	O
else	O
if	O
(	O
!	O
ISVARCHR	O
(	O
str	*(char)
[	O
i	long
]	O
)	O
)	O
{	O
return	O
expvar_recover	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),array(char),int)),*(char),*(*(struct(*(struct`),*(struct`),int,union(struct`,*`)))),*(*(char)),int)->(int)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
,	O
str	*(char)
-	O
1	int
,	O
ptail	*(*(struct(*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),int,union(struct(long,long),*(char)))))
,	O
pend	*(*(char))
,	O
flg	int
)	O
;	O
}	O
}	O
if	O
(	O
is_param	int
&&	O
str	*(char)
[	O
0	int
]	O
==	O
'-'	O
)	O
param_idx	int
=	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_paramc	long
-	O
param_idx	int
;	O
if	O
(	O
i	long
==	O
len	long
)	O
return	O
_wsplt_seterr	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)),int)->(int)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
,	O
WRDSE_CBRACE	int
)	O
;	O
}	O
else	O
{	O
return	O
expvar_recover	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),array(char),int)),*(char),*(*(struct(*(struct`),*(struct`),int,union(struct`,*`)))),*(*(char)),int)->(int)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
,	O
str	*(char)
,	O
ptail	*(*(struct(*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),int,union(struct(long,long),*(char)))))
,	O
pend	*(*(char))
,	O
flg	int
)	O
;	O
}	O
if	O
(	O
defstr	*(char)
&&	O
strchr	(*(char),int)->(*(char))
(	O
"-+?="	*(char)
,	O
defstr	*(char)
[	O
0	int
]	O
)	O
==	O
0	int
)	O
{	O
rc	int
=	O
WRDSE_UNDEF	int
;	O
defstr	*(char)
=	O
NULL	O
;	O
}	O
else	O
{	O
if	O
(	O
is_param	int
)	O
{	O
if	O
(	O
param_idx	int
>=	O
0	int
&&	O
param_idx	int
<	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_paramc	long
)	O
{	O
value	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_paramv	*(*(char))
[	O
param_idx	int
]	O
)	O
;	O
if	O
(	O
!	O
value	*(char)
)	O
rc	int
=	O
WRDSE_NOSPACE	int
;	O
else	O
rc	int
=	O
WRDSE_OK	int
;	O
}	O
else	O
rc	int
=	O
WRDSE_UNDEF	int
;	O
}	O
else	O
{	O
if	O
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_flags	int
&	O
WRDSF_GETVAR	int
)	O
{	O
if	O
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_options	int
&	O
WRDSO_GETVARPREF	int
)	O
{	O
rc	int
=	O
wsplt_env_getvar	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),array(char),int)),*(char),long,*(*(char)))->(int)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
,	O
str	*(char)
,	O
i	long
,	O
&	O
value	*(char)
)	O
;	O
if	O
(	O
rc	int
==	O
WRDSE_UNDEF	int
)	O
rc	int
=	O
wsplt_env_lookup	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),array(char),int)),*(char),long,*(*(char)))->(int)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
,	O
str	*(char)
,	O
i	long
,	O
&	O
value	*(char)
)	O
;	O
}	O
else	O
{	O
rc	int
=	O
wsplt_env_lookup	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),array(char),int)),*(char),long,*(*(char)))->(int)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
,	O
str	*(char)
,	O
i	long
,	O
&	O
value	*(char)
)	O
;	O
if	O
(	O
rc	int
==	O
WRDSE_UNDEF	int
)	O
rc	int
=	O
wsplt_env_getvar	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),array(char),int)),*(char),long,*(*(char)))->(int)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
,	O
str	*(char)
,	O
i	long
,	O
&	O
value	*(char)
)	O
;	O
}	O
}	O
else	O
rc	int
=	O
wsplt_env_lookup	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),array(char),int)),*(char),long,*(*(char)))->(int)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
,	O
str	*(char)
,	O
i	long
,	O
&	O
value	*(char)
)	O
;	O
}	O
if	O
(	O
rc	int
==	O
WRDSE_OK	int
&&	O
(	O
!	O
value	*(char)
||	O
value	*(char)
[	O
0	int
]	O
==	O
0	int
)	O
&&	O
defstr	*(char)
&&	O
defstr	*(char)
[	O
-	O
1	int
]	O
==	O
':'	O
)	O
{	O
free	(*(void))->(void)
(	O
value	*(char)
)	O
;	O
rc	int
=	O
WRDSE_UNDEF	int
;	O
}	O
}	O
switch	O
(	O
rc	int
)	O
{	O
case	O
WRDSE_OK	int
:	O
if	O
(	O
defstr	*(char)
&&	O
*	O
defstr	*(char)
==	O
'+'	O
)	O
{	O
size_t	long
size	long
=	O
*	O
pend	*(*(char))
-	O
++	O
defstr	*(char)
;	O
rc	int
=	O
_wsplt_subsplit	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)),*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)),*(char),int,int,int)->(int)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
,	O
&	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
,	O
defstr	*(char)
,	O
size	long
,	O
WRDSF_NOSPLIT	int
|	O
WRDSF_WS	int
|	O
WRDSF_QUOTE	O
|	O
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_flags	int
&	O
(	O
WRDSF_NOVAR	int
|	O
WRDSF_NOCMD	int
)	O
)	O
,	O
1	int
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
free	(*(void))->(void)
(	O
value	*(char)
)	O
;	O
value	*(char)
=	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
.	O
ws_wordv	*(*(char))
[	O
0	int
]	O
;	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
.	O
ws_wordv	*(*(char))
[	O
0	int
]	O
=	O
NULL	O
;	O
wordsplit_free	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)))->(void)
(	O
&	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
)	O
;	O
}	O
break	O
;	O
case	O
WRDSE_UNDEF	int
:	O
if	O
(	O
defstr	*(char)
)	O
{	O
size_t	long
size	long
;	O
if	O
(	O
*	O
defstr	*(char)
==	O
'-'	O
||	O
*	O
defstr	*(char)
==	O
'='	O
)	O
{	O
size	long
=	O
*	O
pend	*(*(char))
-	O
++	O
defstr	*(char)
;	O
rc	int
=	O
_wsplt_subsplit	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)),*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)),*(char),int,int,int)->(int)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
,	O
&	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
,	O
defstr	*(char)
,	O
size	long
,	O
WRDSF_NOSPLIT	int
|	O
WRDSF_WS	int
|	O
WRDSF_QUOTE	O
|	O
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_flags	int
&	O
(	O
WRDSF_NOVAR	int
|	O
WRDSF_NOCMD	int
)	O
)	O
,	O
1	int
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
value	*(char)
=	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
.	O
ws_wordv	*(*(char))
[	O
0	int
]	O
;	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
.	O
ws_wordv	*(*(char))
[	O
0	int
]	O
=	O
NULL	O
;	O
wordsplit_free	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)))->(void)
(	O
&	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
)	O
;	O
if	O
(	O
defstr	*(char)
[	O
-	O
1	int
]	O
==	O
'='	O
)	O
{	O
if	O
(	O
is_param	int
)	O
rc	int
=	O
wsplt_assign_param	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),array(char),int)),int,*(char))->(int)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
,	O
param_idx	int
,	O
value	*(char)
)	O
;	O
else	O
rc	int
=	O
wsplt_assign_var	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),array(char),int)),*(char),long,*(char))->(int)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
,	O
str	*(char)
,	O
i	long
,	O
value	*(char)
)	O
;	O
}	O
if	O
(	O
rc	int
)	O
{	O
free	(*(void))->(void)
(	O
value	*(char)
)	O
;	O
return	O
rc	int
;	O
}	O
}	O
else	O
{	O
if	O
(	O
*	O
defstr	*(char)
==	O
'?'	O
)	O
{	O
size	long
=	O
*	O
pend	*(*(char))
-	O
++	O
defstr	*(char)
;	O
if	O
(	O
size	long
==	O
0	int
)	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_error	*((*(char))->(void))
(	O
_	O
(	O
"%.*s: variable null or not set"	*(char)
)	O
,	O
(	O
int	O
)	O
i	long
,	O
str	*(char)
)	O
;	O
else	O
{	O
rc	int
=	O
_wsplt_subsplit	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)),*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)),*(char),int,int,int)->(int)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
,	O
&	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
,	O
defstr	*(char)
,	O
size	long
,	O
WRDSF_NOSPLIT	int
|	O
WRDSF_WS	int
|	O
WRDSF_QUOTE	O
|	O
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_flags	int
&	O
(	O
WRDSF_NOVAR	int
|	O
WRDSF_NOCMD	int
)	O
)	O
,	O
1	int
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_error	*((*(char))->(void))
(	O
"%.*s: %s"	*(char)
,	O
(	O
int	O
)	O
i	long
,	O
str	*(char)
,	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
.	O
ws_wordv	*(*(char))
[	O
0	int
]	O
)	O
;	O
else	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_error	*((*(char))->(void))
(	O
"%.*s: %.*s"	*(char)
,	O
(	O
int	O
)	O
i	long
,	O
str	*(char)
,	O
(	O
int	O
)	O
size	long
,	O
defstr	*(char)
)	O
;	O
wordsplit_free	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)))->(void)
(	O
&	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
)	O
;	O
}	O
}	O
value	*(char)
=	O
NULL	O
;	O
}	O
}	O
else	O
if	O
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_flags	int
&	O
WRDSF_UNDEF	int
)	O
{	O
_wsplt_setctxerr	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)),int,*(char),long)->(int)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
,	O
WRDSE_UNDEF	int
,	O
str	*(char)
,	O
*	O
pend	*(*(char))
-	O
str	*(char)
+	O
1	int
)	O
;	O
return	O
1	int
;	O
}	O
else	O
{	O
if	O
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_flags	int
&	O
WRDSF_WARNUNDEF	int
)	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_error	*((*(char))->(void))
(	O
_	O
(	O
"warning: undefined variable `%.*s'"	*(char)
)	O
,	O
(	O
int	O
)	O
i	long
,	O
str	*(char)
)	O
;	O
if	O
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_flags	int
&	O
WRDSF_KEEPUNDEF	int
)	O
value	*(char)
=	O
NULL	O
;	O
else	O
{	O
value	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
""	*(char)
)	O
;	O
if	O
(	O
!	O
value	*(char)
)	O
return	O
_wsplt_nomem	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)))->(int)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
)	O
;	O
}	O
}	O
break	O
;	O
case	O
WRDSE_NOSPACE	int
:	O
return	O
_wsplt_nomem	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)))->(int)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
)	O
;	O
case	O
WRDSE_USERERR	int
:	O
if	O
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_errno	int
==	O
WRDSE_USERERR	int
)	O
free	(*(void))->(void)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_usererr	*(char)
)	O
;	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_usererr	*(char)
=	O
value	*(char)
;	O
default	O
:	O
_wsplt_seterr	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)),int)->(int)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
,	O
rc	int
)	O
;	O
return	O
1	int
;	O
}	O
if	O
(	O
value	*(char)
)	O
{	O
if	O
(	O
flg	int
&	O
_WSNF_QUOTE	int
)	O
{	O
if	O
(	O
wsnode_new	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),array(char),int)),*(*(struct(*(struct`),*(struct`),int,union(struct`,*`)))))->(int)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
,	O
&	O
newnode	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
)	O
)	O
return	O
1	int
;	O
wsnode_insert	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),array(char),int)),*(struct(*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),int,union(struct(long,long),*(char)))),*(struct(*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),int,union(struct(long,long),*(char)))),int)->(void)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
,	O
newnode	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
,	O
*	O
ptail	*(*(struct(*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),int,union(struct(long,long),*(char)))))
,	O
0	int
)	O
;	O
*	O
ptail	*(*(struct(*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),int,union(struct(long,long),*(char)))))
=	O
newnode	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
;	O
newnode	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
->	O
flags	int
=	O
_WSNF_WORD	int
|	O
_WSNF_NOEXPAND	int
|	O
flg	int
;	O
newnode	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
->	O
v	union(struct(long,long),*(char))
.	O
word	*(char)
=	O
value	*(char)
;	O
}	O
else	O
if	O
(	O
*	O
value	*(char)
==	O
0	int
)	O
{	O
free	(*(void))->(void)
(	O
value	*(char)
)	O
;	O
if	O
(	O
wsnode_new	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),array(char),int)),*(*(struct(*(struct`),*(struct`),int,union(struct`,*`)))))->(int)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
,	O
&	O
newnode	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
)	O
)	O
return	O
1	int
;	O
wsnode_insert	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),array(char),int)),*(struct(*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),int,union(struct(long,long),*(char)))),*(struct(*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),int,union(struct(long,long),*(char)))),int)->(void)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
,	O
newnode	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
,	O
*	O
ptail	*(*(struct(*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),int,union(struct(long,long),*(char)))))
,	O
0	int
)	O
;	O
*	O
ptail	*(*(struct(*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),int,union(struct(long,long),*(char)))))
=	O
newnode	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
;	O
newnode	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
->	O
flags	int
=	O
_WSNF_NULL	int
;	O
}	O
else	O
{	O
struct	O
wordsplit	struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct(long,*(*`),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*`),*(*`),long,long,*(*`),long,*(*`),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct`),*(struct`),array(char),int)))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*(char)),*(char),long,*(void))->(int)),*(void),*((*(*(char)),*(char),long,*(*(char)),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
;	O
int	O
rc	int
;	O
rc	int
=	O
_wsplt_subsplit	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)),*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)),*(char),int,int,int)->(int)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
,	O
&	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
,	O
value	*(char)
,	O
strlen	(*(char))->(long)
(	O
value	*(char)
)	O
,	O
WRDSF_NOVAR	int
|	O
WRDSF_NOCMD	int
|	O
WRDSF_QUOTE	O
|	O
(	O
WSP_RETURN_DELIMS	O
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
)	O
?	O
WRDSF_RETURN_DELIMS	int
:	O
0	int
)	O
,	O
0	int
)	O
;	O
free	(*(void))->(void)
(	O
value	*(char)
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
_wsplt_seterr_sub	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)),*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)))->(void)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
,	O
&	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
)	O
;	O
wordsplit_free	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)))->(void)
(	O
&	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
)	O
;	O
return	O
1	int
;	O
}	O
wsnode_insert	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),array(char),int)),*(struct(*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),int,union(struct(long,long),*(char)))),*(struct(*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),int,union(struct(long,long),*(char)))),int)->(void)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
,	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
.	O
ws_head	*(struct)
,	O
*	O
ptail	*(*(struct(*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),int,union(struct(long,long),*(char)))))
,	O
0	int
)	O
;	O
*	O
ptail	*(*(struct(*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),int,union(struct(long,long),*(char)))))
=	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
.	O
ws_tail	*(struct)
;	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
.	O
ws_head	*(struct)
=	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
.	O
ws_tail	*(struct)
=	O
NULL	O
;	O
wordsplit_free	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)))->(void)
(	O
&	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
)	O
;	O
}	O
}	O
else	O
if	O
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_flags	int
&	O
WRDSF_KEEPUNDEF	int
)	O
{	O
size_t	long
size	long
=	O
*	O
pend	*(*(char))
-	O
start	long
+	O
1	int
;	O
if	O
(	O
wsnode_new	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),array(char),int)),*(*(struct(*(struct`),*(struct`),int,union(struct`,*`)))))->(int)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
,	O
&	O
newnode	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
)	O
)	O
return	O
1	int
;	O
wsnode_insert	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),array(char),int)),*(struct(*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),int,union(struct(long,long),*(char)))),*(struct(*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),int,union(struct(long,long),*(char)))),int)->(void)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
,	O
newnode	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
,	O
*	O
ptail	*(*(struct(*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),int,union(struct(long,long),*(char)))))
,	O
0	int
)	O
;	O
*	O
ptail	*(*(struct(*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),int,union(struct(long,long),*(char)))))
=	O
newnode	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
;	O
newnode	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
->	O
flags	int
=	O
_WSNF_WORD	int
|	O
_WSNF_NOEXPAND	int
|	O
flg	int
;	O
newnode	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
->	O
v	union(struct(long,long),*(char))
.	O
word	*(char)
=	O
malloc	(long)->(*(void))
(	O
size	long
+	O
1	int
)	O
;	O
if	O
(	O
!	O
newnode	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
->	O
v	union(struct(long,long),*(char))
.	O
word	*(char)
)	O
return	O
_wsplt_nomem	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)))->(int)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
)	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
newnode	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
->	O
v	union(struct(long,long),*(char))
.	O
word	*(char)
,	O
start	long
,	O
size	long
)	O
;	O
newnode	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
->	O
v	union(struct(long,long),*(char))
.	O
word	*(char)
[	O
size	long
]	O
=	O
0	int
;	O
}	O
else	O
{	O
if	O
(	O
wsnode_new	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),array(char),int)),*(*(struct(*(struct`),*(struct`),int,union(struct`,*`)))))->(int)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
,	O
&	O
newnode	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
)	O
)	O
return	O
1	int
;	O
wsnode_insert	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),array(char),int)),*(struct(*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),int,union(struct(long,long),*(char)))),*(struct(*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),int,union(struct(long,long),*(char)))),int)->(void)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
,	O
newnode	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
,	O
*	O
ptail	*(*(struct(*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),int,union(struct(long,long),*(char)))))
,	O
0	int
)	O
;	O
*	O
ptail	*(*(struct(*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),int,union(struct(long,long),*(char)))))
=	O
newnode	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
;	O
newnode	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
->	O
flags	int
=	O
_WSNF_NULL	int
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
begin_var_p	(int)->(int)
(	O
int	O
c	int
)	O
{	O
return	O
memchr	(*(void),int,long)->(*(void))
(	O
"{#@*"	*(char)
,	O
c	int
,	O
4	int
)	O
!=	O
NULL	O
||	O
ISVARBEG	O
(	O
c	int
)	O
||	O
ISDIGIT	O
(	O
c	int
)	O
;	O
}	O
static	O
int	O
node_expand	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),array(char),int)),*(struct(*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),int,union(struct(long,long),*(char)))),*((int)->(int)),*((*(struct(long,*`,long,long,int,int,long,long,*`,*`,array(*(char)),*`,*`,*`,*`,*`,long,long,*`,long,*`,long,long,*`,*`,*`,*`,long,long,int,*`,*`,*`,*`,array(char),int)),*(char),long,*(*(struct`)),*(*(char)),int)->(int)))->(int)
(	O
struct	O
wordsplit	struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct(long,*(*`),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*`),*(*`),long,long,*(*`),long,*(*`),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct`),*(struct`),array(char),int)))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*(char)),*(char),long,*(void))->(int)),*(void),*((*(*(char)),*(char),long,*(*(char)),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)
*	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
,	O
struct	O
wordsplit_node	struct(*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char)))),*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char)))),int,union(struct(long,long),*(char)))
*	O
node	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
,	O
int	O
(	O
*	O
beg_p	*((int)->(int))
)	O
(	O
int	O
)	O
,	O
int	O
(	O
*	O
ws_exp_fn	*((*(struct(long,*(*`),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*`),*(*`),long,long,*(*`),long,*(*`),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct`),*(struct`),array(char),int)),*(char),long,*(*(struct(*`,*`,int,union`))),*(*(char)),int)->(int))
)	O
(	O
struct	O
wordsplit	struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct(long,*(*`),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*`),*(*`),long,long,*(*`),long,*(*`),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct`),*(struct`),array(char),int)))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*(char)),*(char),long,*(void))->(int)),*(void),*((*(*(char)),*(char),long,*(*(char)),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)
*	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
,	O
const	O
char	O
*	O
str	*(char)
,	O
size_t	long
len	long
,	O
struct	O
wordsplit_node	struct(*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char)))),*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char)))),int,union(struct(long,long),*(char)))
*	O
*	O
ptail	*(*(struct(*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),int,union(struct(long,long),*(char)))))
,	O
const	O
char	O
*	O
*	O
pend	*(*(char))
,	O
int	O
flg	int
)	O
)	O
{	O
const	O
char	O
*	O
str	*(char)
=	O
wsnode_ptr	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),array(char),int)),*(struct(*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),int,union(struct(long,long),*(char)))))->(*(char))
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
,	O
node	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
)	O
;	O
size_t	long
slen	long
=	O
wsnode_len	(*(struct(*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),int,union(struct(long,long),*(char)))))->(long)
(	O
node	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
)	O
;	O
const	O
char	O
*	O
end	long
=	O
str	*(char)
+	O
slen	long
;	O
const	O
char	O
*	O
p	*(char)
;	O
size_t	long
off	long
=	O
0	int
;	O
struct	O
wordsplit_node	struct(*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char)))),*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char)))),int,union(struct(long,long),*(char)))
*	O
tail	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
=	O
node	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
;	O
for	O
(	O
p	*(char)
=	O
str	*(char)
;	O
p	*(char)
<	O
end	long
;	O
p	*(char)
++	O
)	O
{	O
if	O
(	O
*	O
p	*(char)
==	O
'\\'	O
)	O
{	O
p	*(char)
++	O
;	O
continue	O
;	O
}	O
if	O
(	O
*	O
p	*(char)
==	O
'$'	O
&&	O
beg_p	*((int)->(int))
(	O
p	*(char)
[	O
1	int
]	O
)	O
)	O
{	O
size_t	long
n	long
=	O
p	*(char)
-	O
str	*(char)
;	O
if	O
(	O
tail	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
!=	O
node	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
)	O
tail	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
->	O
flags	int
|=	O
_WSNF_JOIN	int
;	O
if	O
(	O
node_split_prefix	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),array(char),int)),*(*(struct(*(struct`),*(struct`),int,union(struct`,*`)))),*(struct(*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),int,union(struct(long,long),*(char)))),long,long,int)->(int)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
,	O
&	O
tail	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
,	O
node	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
,	O
off	long
,	O
n	long
,	O
_WSNF_JOIN	int
)	O
)	O
return	O
1	int
;	O
p	*(char)
++	O
;	O
if	O
(	O
ws_exp_fn	*((*(struct(long,*(*`),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*`),*(*`),long,long,*(*`),long,*(*`),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct`),*(struct`),array(char),int)),*(char),long,*(*(struct(*`,*`,int,union`))),*(*(char)),int)->(int))
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
,	O
p	*(char)
,	O
slen	long
-	O
n	long
,	O
&	O
tail	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
,	O
&	O
p	*(char)
,	O
node	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
->	O
flags	int
&	O
(	O
_WSNF_JOIN	int
|	O
_WSNF_QUOTE	int
)	O
)	O
)	O
return	O
1	int
;	O
off	long
+=	O
p	*(char)
-	O
str	*(char)
+	O
1	int
;	O
str	*(char)
=	O
p	*(char)
+	O
1	int
;	O
}	O
}	O
if	O
(	O
p	*(char)
>	O
str	*(char)
)	O
{	O
if	O
(	O
tail	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
!=	O
node	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
)	O
tail	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
->	O
flags	int
|=	O
_WSNF_JOIN	int
;	O
if	O
(	O
node_split_prefix	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),array(char),int)),*(*(struct(*(struct`),*(struct`),int,union(struct`,*`)))),*(struct(*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),int,union(struct(long,long),*(char)))),long,long,int)->(int)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
,	O
&	O
tail	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
,	O
node	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
,	O
off	long
,	O
p	*(char)
-	O
str	*(char)
,	O
node	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
->	O
flags	int
&	O
(	O
_WSNF_JOIN	int
|	O
_WSNF_QUOTE	int
)	O
)	O
)	O
return	O
1	int
;	O
}	O
if	O
(	O
tail	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
!=	O
node	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
)	O
{	O
wsnode_remove	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),array(char),int)),*(struct(*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),int,union(struct(long,long),*(char)))))->(void)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
,	O
node	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
)	O
;	O
wsnode_free	(*(struct(*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),int,union(struct(long,long),*(char)))))->(void)
(	O
node	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
)	O
;	O
}	O
return	O
0	int
;	O
}	O
static	O
void	O
wsnode_nullelim	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),array(char),int)))->(void)
(	O
struct	O
wordsplit	struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct(long,*(*`),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*`),*(*`),long,long,*(*`),long,*(*`),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct`),*(struct`),array(char),int)))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*(char)),*(char),long,*(void))->(int)),*(void),*((*(*(char)),*(char),long,*(*(char)),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)
*	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
)	O
{	O
struct	O
wordsplit_node	struct(*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char)))),*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char)))),int,union(struct(long,long),*(char)))
*	O
p	*(char)
;	O
for	O
(	O
p	*(char)
=	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_head	*(struct)
;	O
p	*(char)
;	O
)	O
{	O
struct	O
wordsplit_node	struct(*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char)))),*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char)))),int,union(struct(long,long),*(char)))
*	O
next	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
=	O
p	*(char)
->	O
next	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
;	O
if	O
(	O
p	*(char)
->	O
flags	int
&	O
_WSNF_DELIM	int
&&	O
p	*(char)
->	O
prev	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
)	O
p	*(char)
->	O
prev	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
->	O
flags	int
&=	O
~	O
_WSNF_JOIN	int
;	O
if	O
(	O
p	*(char)
->	O
flags	int
&	O
_WSNF_NULL	int
)	O
{	O
wsnode_remove	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),array(char),int)),*(struct(*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),int,union(struct(long,long),*(char)))))->(void)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
,	O
p	*(char)
)	O
;	O
wsnode_free	(*(struct(*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),int,union(struct(long,long),*(char)))))->(void)
(	O
p	*(char)
)	O
;	O
}	O
p	*(char)
=	O
next	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
;	O
}	O
}	O
static	O
int	O
wordsplit_varexp	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),array(char),int)))->(int)
(	O
struct	O
wordsplit	struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct(long,*(*`),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*`),*(*`),long,long,*(*`),long,*(*`),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct`),*(struct`),array(char),int)))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*(char)),*(char),long,*(void))->(int)),*(void),*((*(*(char)),*(char),long,*(*(char)),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)
*	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
)	O
{	O
struct	O
wordsplit_node	struct(*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char)))),*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char)))),int,union(struct(long,long),*(char)))
*	O
p	*(char)
;	O
for	O
(	O
p	*(char)
=	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_head	*(struct)
;	O
p	*(char)
;	O
)	O
{	O
struct	O
wordsplit_node	struct(*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char)))),*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char)))),int,union(struct(long,long),*(char)))
*	O
next	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
=	O
p	*(char)
->	O
next	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
;	O
if	O
(	O
!	O
(	O
p	*(char)
->	O
flags	int
&	O
(	O
_WSNF_NOEXPAND	int
|	O
_WSNF_DELIM	int
)	O
)	O
)	O
if	O
(	O
node_expand	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),array(char),int)),*(struct(*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),int,union(struct(long,long),*(char)))),*((int)->(int)),*((*(struct(long,*`,long,long,int,int,long,long,*`,*`,array(*(char)),*`,*`,*`,*`,*`,long,long,*`,long,*`,long,long,*`,*`,*`,*`,long,long,int,*`,*`,*`,*`,array(char),int)),*(char),long,*(*(struct`)),*(*(char)),int)->(int)))->(int)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
,	O
p	*(char)
,	O
begin_var_p	(int)->(int)
,	O
expvar	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),array(char),int)),*(char),long,*(*(struct(*(struct`),*(struct`),int,union(struct`,*`)))),*(*(char)),int)->(int)
)	O
)	O
return	O
1	int
;	O
p	*(char)
=	O
next	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
;	O
}	O
wsnode_nullelim	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),array(char),int)))->(void)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
begin_cmd_p	(int)->(int)
(	O
int	O
c	int
)	O
{	O
return	O
c	int
==	O
'('	O
;	O
}	O
static	O
int	O
expcmd	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),array(char),int)),*(char),long,*(*(struct(*(struct`),*(struct`),int,union(struct`,*`)))),*(*(char)),int)->(int)
(	O
struct	O
wordsplit	struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct(long,*(*`),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*`),*(*`),long,long,*(*`),long,*(*`),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct`),*(struct`),array(char),int)))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*(char)),*(char),long,*(void))->(int)),*(void),*((*(*(char)),*(char),long,*(*(char)),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)
*	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
,	O
const	O
char	O
*	O
str	*(char)
,	O
size_t	long
len	long
,	O
struct	O
wordsplit_node	struct(*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char)))),*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char)))),int,union(struct(long,long),*(char)))
*	O
*	O
ptail	*(*(struct(*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),int,union(struct(long,long),*(char)))))
,	O
const	O
char	O
*	O
*	O
pend	*(*(char))
,	O
int	O
flg	int
)	O
{	O
int	O
rc	int
;	O
size_t	long
j	long
;	O
char	O
*	O
value	*(char)
;	O
struct	O
wordsplit_node	struct(*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char)))),*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char)))),int,union(struct(long,long),*(char)))
*	O
newnode	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
;	O
struct	O
wordsplit	struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct(long,*(*`),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*`),*(*`),long,long,*(*`),long,*(*`),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct`),*(struct`),array(char),int)))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*(char)),*(char),long,*(void))->(int)),*(void),*((*(*(char)),*(char),long,*(*(char)),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
;	O
str	*(char)
++	O
;	O
len	long
--	O
;	O
if	O
(	O
find_closing_paren	(*(char),long,long,*(long),*(char))->(int)
(	O
str	*(char)
,	O
0	int
,	O
len	long
,	O
&	O
j	long
,	O
"()"	*(char)
)	O
)	O
{	O
_wsplt_seterr	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)),int)->(int)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
,	O
WRDSE_PAREN	int
)	O
;	O
return	O
1	int
;	O
}	O
*	O
pend	*(*(char))
=	O
str	*(char)
+	O
j	long
;	O
rc	int
=	O
_wsplt_subsplit	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)),*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)),*(char),int,int,int)->(int)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
,	O
&	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
,	O
str	*(char)
,	O
j	long
,	O
WRDSF_WS	int
|	O
WRDSF_QUOTE	O
,	O
1	int
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
_wsplt_seterr_sub	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)),*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)))->(void)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
,	O
&	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
)	O
;	O
wordsplit_free	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)))->(void)
(	O
&	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
)	O
;	O
return	O
1	int
;	O
}	O
rc	int
=	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_command	*((*(*(char)),*(char),long,*(*(char)),*(void))->(int))
(	O
&	O
value	*(char)
,	O
str	*(char)
,	O
j	long
,	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
.	O
ws_wordv	*(*(char))
,	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_closure	*(void)
)	O
;	O
wordsplit_free	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)))->(void)
(	O
&	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
)	O
;	O
if	O
(	O
rc	int
==	O
WRDSE_NOSPACE	int
)	O
return	O
_wsplt_nomem	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)))->(int)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
)	O
;	O
else	O
if	O
(	O
rc	int
)	O
{	O
if	O
(	O
rc	int
==	O
WRDSE_USERERR	int
)	O
{	O
if	O
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_errno	int
==	O
WRDSE_USERERR	int
)	O
free	(*(void))->(void)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_usererr	*(char)
)	O
;	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_usererr	*(char)
=	O
value	*(char)
;	O
}	O
_wsplt_seterr	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)),int)->(int)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
,	O
rc	int
)	O
;	O
return	O
1	int
;	O
}	O
if	O
(	O
value	*(char)
)	O
{	O
if	O
(	O
flg	int
&	O
_WSNF_QUOTE	int
)	O
{	O
if	O
(	O
wsnode_new	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),array(char),int)),*(*(struct(*(struct`),*(struct`),int,union(struct`,*`)))))->(int)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
,	O
&	O
newnode	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
)	O
)	O
return	O
1	int
;	O
wsnode_insert	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),array(char),int)),*(struct(*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),int,union(struct(long,long),*(char)))),*(struct(*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),int,union(struct(long,long),*(char)))),int)->(void)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
,	O
newnode	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
,	O
*	O
ptail	*(*(struct(*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),int,union(struct(long,long),*(char)))))
,	O
0	int
)	O
;	O
*	O
ptail	*(*(struct(*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),int,union(struct(long,long),*(char)))))
=	O
newnode	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
;	O
newnode	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
->	O
flags	int
=	O
_WSNF_WORD	int
|	O
_WSNF_NOEXPAND	int
|	O
flg	int
;	O
newnode	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
->	O
v	union(struct(long,long),*(char))
.	O
word	*(char)
=	O
value	*(char)
;	O
}	O
else	O
if	O
(	O
*	O
value	*(char)
==	O
0	int
)	O
{	O
free	(*(void))->(void)
(	O
value	*(char)
)	O
;	O
if	O
(	O
wsnode_new	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),array(char),int)),*(*(struct(*(struct`),*(struct`),int,union(struct`,*`)))))->(int)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
,	O
&	O
newnode	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
)	O
)	O
return	O
1	int
;	O
wsnode_insert	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),array(char),int)),*(struct(*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),int,union(struct(long,long),*(char)))),*(struct(*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),int,union(struct(long,long),*(char)))),int)->(void)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
,	O
newnode	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
,	O
*	O
ptail	*(*(struct(*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),int,union(struct(long,long),*(char)))))
,	O
0	int
)	O
;	O
*	O
ptail	*(*(struct(*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),int,union(struct(long,long),*(char)))))
=	O
newnode	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
;	O
newnode	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
->	O
flags	int
=	O
_WSNF_NULL	int
;	O
}	O
else	O
{	O
struct	O
wordsplit	struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct(long,*(*`),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*`),*(*`),long,long,*(*`),long,*(*`),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct`),*(struct`),array(char),int)))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*(char)),*(char),long,*(void))->(int)),*(void),*((*(*(char)),*(char),long,*(*(char)),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
;	O
int	O
rc	int
;	O
rc	int
=	O
_wsplt_subsplit	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)),*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)),*(char),int,int,int)->(int)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
,	O
&	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
,	O
value	*(char)
,	O
strlen	(*(char))->(long)
(	O
value	*(char)
)	O
,	O
WRDSF_NOVAR	int
|	O
WRDSF_NOCMD	int
|	O
WRDSF_WS	int
|	O
WRDSF_QUOTE	O
|	O
(	O
WSP_RETURN_DELIMS	O
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
)	O
?	O
WRDSF_RETURN_DELIMS	int
:	O
0	int
)	O
,	O
0	int
)	O
;	O
free	(*(void))->(void)
(	O
value	*(char)
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
_wsplt_seterr_sub	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)),*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)))->(void)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
,	O
&	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
)	O
;	O
wordsplit_free	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)))->(void)
(	O
&	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
)	O
;	O
return	O
1	int
;	O
}	O
wsnode_insert	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),array(char),int)),*(struct(*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),int,union(struct(long,long),*(char)))),*(struct(*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),int,union(struct(long,long),*(char)))),int)->(void)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
,	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
.	O
ws_head	*(struct)
,	O
*	O
ptail	*(*(struct(*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),int,union(struct(long,long),*(char)))))
,	O
0	int
)	O
;	O
*	O
ptail	*(*(struct(*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),int,union(struct(long,long),*(char)))))
=	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
.	O
ws_tail	*(struct)
;	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
.	O
ws_head	*(struct)
=	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
.	O
ws_tail	*(struct)
=	O
NULL	O
;	O
wordsplit_free	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)))->(void)
(	O
&	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
)	O
;	O
}	O
}	O
else	O
{	O
if	O
(	O
wsnode_new	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),array(char),int)),*(*(struct(*(struct`),*(struct`),int,union(struct`,*`)))))->(int)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
,	O
&	O
newnode	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
)	O
)	O
return	O
1	int
;	O
wsnode_insert	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),array(char),int)),*(struct(*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),int,union(struct(long,long),*(char)))),*(struct(*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),int,union(struct(long,long),*(char)))),int)->(void)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
,	O
newnode	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
,	O
*	O
ptail	*(*(struct(*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),int,union(struct(long,long),*(char)))))
,	O
0	int
)	O
;	O
*	O
ptail	*(*(struct(*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),int,union(struct(long,long),*(char)))))
=	O
newnode	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
;	O
newnode	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
->	O
flags	int
=	O
_WSNF_NULL	int
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
wordsplit_cmdexp	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),array(char),int)))->(int)
(	O
struct	O
wordsplit	struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct(long,*(*`),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*`),*(*`),long,long,*(*`),long,*(*`),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct`),*(struct`),array(char),int)))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*(char)),*(char),long,*(void))->(int)),*(void),*((*(*(char)),*(char),long,*(*(char)),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)
*	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
)	O
{	O
struct	O
wordsplit_node	struct(*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char)))),*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char)))),int,union(struct(long,long),*(char)))
*	O
p	*(char)
;	O
for	O
(	O
p	*(char)
=	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_head	*(struct)
;	O
p	*(char)
;	O
)	O
{	O
struct	O
wordsplit_node	struct(*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char)))),*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char)))),int,union(struct(long,long),*(char)))
*	O
next	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
=	O
p	*(char)
->	O
next	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
;	O
if	O
(	O
!	O
(	O
p	*(char)
->	O
flags	int
&	O
_WSNF_NOEXPAND	int
)	O
)	O
if	O
(	O
node_expand	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),array(char),int)),*(struct(*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),int,union(struct(long,long),*(char)))),*((int)->(int)),*((*(struct(long,*`,long,long,int,int,long,long,*`,*`,array(*(char)),*`,*`,*`,*`,*`,long,long,*`,long,*`,long,long,*`,*`,*`,*`,long,long,int,*`,*`,*`,*`,array(char),int)),*(char),long,*(*(struct`)),*(*(char)),int)->(int)))->(int)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
,	O
p	*(char)
,	O
begin_cmd_p	(int)->(int)
,	O
expcmd	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),array(char),int)),*(char),long,*(*(struct(*(struct`),*(struct`),int,union(struct`,*`)))),*(*(char)),int)->(int)
)	O
)	O
return	O
1	int
;	O
p	*(char)
=	O
next	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
;	O
}	O
wsnode_nullelim	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),array(char),int)))->(void)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
wordsplit_trimws	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),array(char),int)))->(int)
(	O
struct	O
wordsplit	struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct(long,*(*`),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*`),*(*`),long,long,*(*`),long,*(*`),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct`),*(struct`),array(char),int)))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*(char)),*(char),long,*(void))->(int)),*(void),*((*(*(char)),*(char),long,*(*(char)),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)
*	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
)	O
{	O
struct	O
wordsplit_node	struct(*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char)))),*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char)))),int,union(struct(long,long),*(char)))
*	O
p	*(char)
;	O
for	O
(	O
p	*(char)
=	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_head	*(struct)
;	O
p	*(char)
;	O
p	*(char)
=	O
p	*(char)
->	O
next	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
)	O
{	O
size_t	long
n	long
;	O
if	O
(	O
!	O
(	O
p	*(char)
->	O
flags	int
&	O
_WSNF_QUOTE	int
)	O
)	O
{	O
for	O
(	O
n	long
=	O
p	*(char)
->	O
v	union(struct(long,long),*(char))
.	O
segm	struct(long,long)
.	O
beg	long
;	O
n	long
<	O
p	*(char)
->	O
v	union(struct(long,long),*(char))
.	O
segm	struct(long,long)
.	O
end	long
&&	O
ISWS	O
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_input	*(char)
[	O
n	long
]	O
)	O
;	O
n	long
++	O
)	O
;	O
p	*(char)
->	O
v	union(struct(long,long),*(char))
.	O
segm	struct(long,long)
.	O
beg	long
=	O
n	long
;	O
}	O
while	O
(	O
p	*(char)
->	O
next	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
&&	O
(	O
p	*(char)
->	O
flags	int
&	O
_WSNF_JOIN	int
)	O
)	O
p	*(char)
=	O
p	*(char)
->	O
next	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
;	O
if	O
(	O
p	*(char)
->	O
flags	int
&	O
_WSNF_QUOTE	int
)	O
continue	O
;	O
for	O
(	O
n	long
=	O
p	*(char)
->	O
v	union(struct(long,long),*(char))
.	O
segm	struct(long,long)
.	O
end	long
;	O
n	long
>	O
p	*(char)
->	O
v	union(struct(long,long),*(char))
.	O
segm	struct(long,long)
.	O
beg	long
&&	O
ISWS	O
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_input	*(char)
[	O
n	long
-	O
1	int
]	O
)	O
;	O
n	long
--	O
)	O
;	O
p	*(char)
->	O
v	union(struct(long,long),*(char))
.	O
segm	struct(long,long)
.	O
end	long
=	O
n	long
;	O
if	O
(	O
p	*(char)
->	O
v	union(struct(long,long),*(char))
.	O
segm	struct(long,long)
.	O
beg	long
==	O
p	*(char)
->	O
v	union(struct(long,long),*(char))
.	O
segm	struct(long,long)
.	O
end	long
)	O
p	*(char)
->	O
flags	int
|=	O
_WSNF_NULL	int
;	O
}	O
wsnode_nullelim	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),array(char),int)))->(void)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
wordsplit_tildexpand	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),array(char),int)))->(int)
(	O
struct	O
wordsplit	struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct(long,*(*`),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*`),*(*`),long,long,*(*`),long,*(*`),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct`),*(struct`),array(char),int)))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*(char)),*(char),long,*(void))->(int)),*(void),*((*(*(char)),*(char),long,*(*(char)),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)
*	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
)	O
{	O
struct	O
wordsplit_node	struct(*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char)))),*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char)))),int,union(struct(long,long),*(char)))
*	O
p	*(char)
;	O
char	O
*	O
uname	*(char)
=	O
NULL	O
;	O
size_t	long
usize	long
=	O
0	int
;	O
for	O
(	O
p	*(char)
=	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_head	*(struct)
;	O
p	*(char)
;	O
p	*(char)
=	O
p	*(char)
->	O
next	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
)	O
{	O
const	O
char	O
*	O
str	*(char)
;	O
if	O
(	O
p	*(char)
->	O
flags	int
&	O
_WSNF_QUOTE	int
)	O
continue	O
;	O
str	*(char)
=	O
wsnode_ptr	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),array(char),int)),*(struct(*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),int,union(struct(long,long),*(char)))))->(*(char))
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
,	O
p	*(char)
)	O
;	O
if	O
(	O
str	*(char)
[	O
0	int
]	O
==	O
'~'	O
)	O
{	O
size_t	long
i	long
,	O
size	long
,	O
dlen	long
;	O
size_t	long
slen	long
=	O
wsnode_len	(*(struct(*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),int,union(struct(long,long),*(char)))))->(long)
(	O
p	*(char)
)	O
;	O
struct	O
passwd	struct(*(char),*(char),int,int,*(char),*(char),*(char))
*	O
pw	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
;	O
char	O
*	O
newstr	*(char)
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<	O
slen	long
&&	O
str	*(char)
[	O
i	long
]	O
!=	O
'/'	O
;	O
i	long
++	O
)	O
;	O
if	O
(	O
i	long
==	O
slen	long
)	O
continue	O
;	O
if	O
(	O
i	long
>	O
1	int
)	O
{	O
if	O
(	O
i	long
>	O
usize	long
)	O
{	O
char	O
*	O
p	*(char)
=	O
realloc	(*(void),long)->(*(void))
(	O
uname	*(char)
,	O
i	long
)	O
;	O
if	O
(	O
!	O
p	*(char)
)	O
{	O
free	(*(void))->(void)
(	O
uname	*(char)
)	O
;	O
return	O
_wsplt_nomem	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)))->(int)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
)	O
;	O
}	O
uname	*(char)
=	O
p	*(char)
;	O
usize	long
=	O
i	long
;	O
}	O
--	O
i	long
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
uname	*(char)
,	O
str	*(char)
+	O
1	int
,	O
i	long
)	O
;	O
uname	*(char)
[	O
i	long
]	O
=	O
0	int
;	O
pw	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
=	O
getpwnam	(*(char))->(*(struct(*(char),*(char),int,int,*(char),*(char),*(char))))
(	O
uname	*(char)
)	O
;	O
}	O
else	O
pw	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
=	O
getpwuid	(int)->(*(struct(*(char),*(char),int,int,*(char),*(char),*(char))))
(	O
getuid	()->(int)
(	O
)	O
)	O
;	O
if	O
(	O
!	O
pw	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
)	O
continue	O
;	O
dlen	long
=	O
strlen	(*(char))->(long)
(	O
pw	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
->	O
pw_dir	*(char)
)	O
;	O
size	long
=	O
slen	long
-	O
i	long
+	O
dlen	long
;	O
newstr	*(char)
=	O
malloc	(long)->(*(void))
(	O
size	long
)	O
;	O
if	O
(	O
!	O
newstr	*(char)
)	O
{	O
free	(*(void))->(void)
(	O
uname	*(char)
)	O
;	O
return	O
_wsplt_nomem	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)))->(int)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
)	O
;	O
}	O
--	O
size	long
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
newstr	*(char)
,	O
pw	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
->	O
pw_dir	*(char)
,	O
dlen	long
)	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
newstr	*(char)
+	O
dlen	long
,	O
str	*(char)
+	O
i	long
+	O
1	int
,	O
slen	long
-	O
i	long
-	O
1	int
)	O
;	O
newstr	*(char)
[	O
size	long
]	O
=	O
0	int
;	O
if	O
(	O
p	*(char)
->	O
flags	int
&	O
_WSNF_WORD	int
)	O
free	(*(void))->(void)
(	O
p	*(char)
->	O
v	union(struct(long,long),*(char))
.	O
word	*(char)
)	O
;	O
p	*(char)
->	O
v	union(struct(long,long),*(char))
.	O
word	*(char)
=	O
newstr	*(char)
;	O
p	*(char)
->	O
flags	int
|=	O
_WSNF_WORD	int
;	O
}	O
}	O
free	(*(void))->(void)
(	O
uname	*(char)
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
isglob	(*(char),int)->(int)
(	O
const	O
char	O
*	O
s	*(char)
,	O
int	O
l	int
)	O
{	O
while	O
(	O
l	int
--	O
)	O
{	O
if	O
(	O
strchr	(*(char),int)->(*(char))
(	O
"*?["	*(char)
,	O
*	O
s	*(char)
++	O
)	O
)	O
return	O
1	int
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
wordsplit_pathexpand	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),array(char),int)))->(int)
(	O
struct	O
wordsplit	struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct(long,*(*`),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*`),*(*`),long,long,*(*`),long,*(*`),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct`),*(struct`),array(char),int)))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*(char)),*(char),long,*(void))->(int)),*(void),*((*(*(char)),*(char),long,*(*(char)),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)
*	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
)	O
{	O
struct	O
wordsplit_node	struct(*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char)))),*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char)))),int,union(struct(long,long),*(char)))
*	O
p	*(char)
,	O
*	O
next	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
;	O
char	O
*	O
pattern	*(char)
=	O
NULL	O
;	O
size_t	long
patsize	long
=	O
0	int
;	O
size_t	long
slen	long
;	O
int	O
flags	int
=	O
0	int
;	O
if	O
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_options	int
&	O
WRDSO_DOTGLOB	int
)	O
flags	int
=	O
GLOB_PERIOD	O
;	O
for	O
(	O
p	*(char)
=	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_head	*(struct)
;	O
p	*(char)
;	O
p	*(char)
=	O
next	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
)	O
{	O
const	O
char	O
*	O
str	*(char)
;	O
next	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
=	O
p	*(char)
->	O
next	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
;	O
if	O
(	O
p	*(char)
->	O
flags	int
&	O
_WSNF_QUOTE	int
)	O
continue	O
;	O
str	*(char)
=	O
wsnode_ptr	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),array(char),int)),*(struct(*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),int,union(struct(long,long),*(char)))))->(*(char))
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
,	O
p	*(char)
)	O
;	O
slen	long
=	O
wsnode_len	(*(struct(*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),int,union(struct(long,long),*(char)))))->(long)
(	O
p	*(char)
)	O
;	O
if	O
(	O
isglob	(*(char),int)->(int)
(	O
str	*(char)
,	O
slen	long
)	O
)	O
{	O
int	O
i	long
;	O
glob_t	struct(long,*(*(char)),long,int,*((*(void))->(void)),*((*(void))->(*(struct))),*((*(char))->(*(void))),*((*(char),*(struct))->(int)),*((*(char),*(struct))->(int)))
g	struct(long,*(*(char)),long,int,*((*(void))->(void)),*((*(void))->(*(struct))),*((*(char))->(*(void))),*((*(char),*(struct))->(int)),*((*(char),*(struct))->(int)))
;	O
struct	O
wordsplit_node	struct(*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char)))),*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char)))),int,union(struct(long,long),*(char)))
*	O
prev	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
;	O
if	O
(	O
slen	long
+	O
1	int
>	O
patsize	long
)	O
{	O
char	O
*	O
p	*(char)
=	O
realloc	(*(void),long)->(*(void))
(	O
pattern	*(char)
,	O
slen	long
+	O
1	int
)	O
;	O
if	O
(	O
!	O
p	*(char)
)	O
return	O
_wsplt_nomem	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)))->(int)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
)	O
;	O
pattern	*(char)
=	O
p	*(char)
;	O
patsize	long
=	O
slen	long
+	O
1	int
;	O
}	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
pattern	*(char)
,	O
str	*(char)
,	O
slen	long
)	O
;	O
pattern	*(char)
[	O
slen	long
]	O
=	O
0	int
;	O
switch	O
(	O
glob	(*(char),int,*((*(char),int)->(int)),*(struct(long,*(*(char)),long,int,*((*`)->(void)),*((*`)->(*`)),*((*`)->(*`)),*((*`,*`)->(int)),*((*`,*`)->(int)))))->(int)
(	O
pattern	*(char)
,	O
flags	int
,	O
NULL	O
,	O
&	O
g	struct(long,*(*(char)),long,int,*((*(void))->(void)),*((*(void))->(*(struct))),*((*(char))->(*(void))),*((*(char),*(struct))->(int)),*((*(char),*(struct))->(int)))
)	O
)	O
{	O
case	O
0	int
:	O
break	O
;	O
case	O
GLOB_NOSPACE	int
:	O
free	(*(void))->(void)
(	O
pattern	*(char)
)	O
;	O
return	O
_wsplt_nomem	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)))->(int)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
)	O
;	O
case	O
GLOB_NOMATCH	int
:	O
if	O
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_options	int
&	O
WRDSO_NULLGLOB	int
)	O
{	O
wsnode_remove	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),array(char),int)),*(struct(*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),int,union(struct(long,long),*(char)))))->(void)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
,	O
p	*(char)
)	O
;	O
wsnode_free	(*(struct(*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),int,union(struct(long,long),*(char)))))->(void)
(	O
p	*(char)
)	O
;	O
}	O
else	O
if	O
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_options	int
&	O
WRDSO_FAILGLOB	int
)	O
{	O
char	O
buf	*(char)
[	O
128	int
]	O
;	O
if	O
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_errno	int
==	O
WRDSE_USERERR	int
)	O
free	(*(void))->(void)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_usererr	*(char)
)	O
;	O
snprintf	(*(char),long,*(char))->(int)
(	O
buf	*(char)
,	O
sizeof	O
(	O
buf	*(char)
)	O
,	O
_	O
(	O
"no files match pattern %s"	*(char)
)	O
,	O
pattern	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
pattern	*(char)
)	O
;	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_usererr	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
buf	*(char)
)	O
;	O
if	O
(	O
!	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_usererr	*(char)
)	O
return	O
_wsplt_nomem	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)))->(int)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
)	O
;	O
else	O
return	O
_wsplt_seterr	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)),int)->(int)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
,	O
WRDSE_USERERR	int
)	O
;	O
}	O
continue	O
;	O
default	O
:	O
free	(*(void))->(void)
(	O
pattern	*(char)
)	O
;	O
return	O
_wsplt_setctxerr	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)),int,*(char),long)->(int)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
,	O
WRDSE_GLOBERR	int
,	O
pattern	*(char)
,	O
slen	long
)	O
;	O
}	O
prev	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
=	O
p	*(char)
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
g	struct(long,*(*(char)),long,int,*((*(void))->(void)),*((*(void))->(*(struct))),*((*(char))->(*(void))),*((*(char),*(struct))->(int)),*((*(char),*(struct))->(int)))
.	O
gl_pathc	long
;	O
i	long
++	O
)	O
{	O
struct	O
wordsplit_node	struct(*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char)))),*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char)))),int,union(struct(long,long),*(char)))
*	O
newnode	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
;	O
char	O
*	O
newstr	*(char)
;	O
if	O
(	O
wsnode_new	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),array(char),int)),*(*(struct(*(struct`),*(struct`),int,union(struct`,*`)))))->(int)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
,	O
&	O
newnode	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
)	O
)	O
return	O
1	int
;	O
newstr	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
g	struct(long,*(*(char)),long,int,*((*(void))->(void)),*((*(void))->(*(struct))),*((*(char))->(*(void))),*((*(char),*(struct))->(int)),*((*(char),*(struct))->(int)))
.	O
gl_pathv	*(*(char))
[	O
i	long
]	O
)	O
;	O
if	O
(	O
!	O
newstr	*(char)
)	O
return	O
_wsplt_nomem	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)))->(int)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
)	O
;	O
newnode	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
->	O
v	union(struct(long,long),*(char))
.	O
word	*(char)
=	O
newstr	*(char)
;	O
newnode	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
->	O
flags	int
|=	O
_WSNF_WORD	int
|	O
_WSNF_QUOTE	int
;	O
wsnode_insert	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),array(char),int)),*(struct(*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),int,union(struct(long,long),*(char)))),*(struct(*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),int,union(struct(long,long),*(char)))),int)->(void)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
,	O
newnode	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
,	O
prev	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
,	O
0	int
)	O
;	O
prev	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
=	O
newnode	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
;	O
}	O
globfree	(*(struct(long,*(*(char)),long,int,*((*`)->(void)),*((*`)->(*`)),*((*`)->(*`)),*((*`,*`)->(int)),*((*`,*`)->(int)))))->(void)
(	O
&	O
g	struct(long,*(*(char)),long,int,*((*(void))->(void)),*((*(void))->(*(struct))),*((*(char))->(*(void))),*((*(char),*(struct))->(int)),*((*(char),*(struct))->(int)))
)	O
;	O
wsnode_remove	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),array(char),int)),*(struct(*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),int,union(struct(long,long),*(char)))))->(void)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
,	O
p	*(char)
)	O
;	O
wsnode_free	(*(struct(*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),int,union(struct(long,long),*(char)))))->(void)
(	O
p	*(char)
)	O
;	O
}	O
}	O
free	(*(void))->(void)
(	O
pattern	*(char)
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
skip_sed_expr	(*(char),long,long)->(int)
(	O
const	O
char	O
*	O
command	*(char)
,	O
size_t	long
i	long
,	O
size_t	long
len	long
)	O
{	O
int	O
state	*(int)
;	O
do	O
{	O
int	O
delim	int
;	O
if	O
(	O
command	*(char)
[	O
i	long
]	O
==	O
';'	O
)	O
i	long
++	O
;	O
if	O
(	O
!	O
(	O
command	*(char)
[	O
i	long
]	O
==	O
's'	O
&&	O
i	long
+	O
3	int
<	O
len	long
&&	O
ISPUNCT	O
(	O
command	*(char)
[	O
i	long
+	O
1	int
]	O
)	O
)	O
)	O
break	O
;	O
delim	int
=	O
command	*(char)
[	O
++	O
i	long
]	O
;	O
state	*(int)
=	O
1	int
;	O
for	O
(	O
i	long
++	O
;	O
i	long
<	O
len	long
;	O
i	long
++	O
)	O
{	O
if	O
(	O
state	*(int)
==	O
3	int
)	O
{	O
if	O
(	O
command	*(char)
[	O
i	long
]	O
==	O
delim	int
||	O
!	O
ISALNUM	O
(	O
command	*(char)
[	O
i	long
]	O
)	O
)	O
break	O
;	O
}	O
else	O
if	O
(	O
command	*(char)
[	O
i	long
]	O
==	O
'\\'	O
)	O
i	long
++	O
;	O
else	O
if	O
(	O
command	*(char)
[	O
i	long
]	O
==	O
delim	int
)	O
state	*(int)
++	O
;	O
}	O
}	O
while	O
(	O
state	*(int)
==	O
3	int
&&	O
i	long
<	O
len	long
&&	O
command	*(char)
[	O
i	long
]	O
==	O
';'	O
)	O
;	O
return	O
i	long
;	O
}	O
static	O
inline	O
size_t	long
skip_delim_internal	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),array(char),int)),int)->(long)
(	O
struct	O
wordsplit	struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct(long,*(*`),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*`),*(*`),long,long,*(*`),long,*(*`),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct`),*(struct`),array(char),int)))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*(char)),*(char),long,*(void))->(int)),*(void),*((*(*(char)),*(char),long,*(*(char)),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)
*	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
,	O
int	O
return_delims	int
)	O
{	O
return	O
return_delims	int
?	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_endp	long
:	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_endp	long
+	O
1	int
;	O
}	O
static	O
inline	O
size_t	long
skip_delim	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),array(char),int)))->(long)
(	O
struct	O
wordsplit	struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct(long,*(*`),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*`),*(*`),long,long,*(*`),long,*(*`),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct`),*(struct`),array(char),int)))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*(char)),*(char),long,*(void))->(int)),*(void),*((*(*(char)),*(char),long,*(*(char)),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)
*	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
)	O
{	O
return	O
skip_delim_internal	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),array(char),int)),int)->(long)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
,	O
WSP_RETURN_DELIMS	O
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
)	O
)	O
;	O
}	O
static	O
inline	O
size_t	long
skip_delim_real	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),array(char),int)))->(long)
(	O
struct	O
wordsplit	struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct(long,*(*`),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*`),*(*`),long,long,*(*`),long,*(*`),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct`),*(struct`),array(char),int)))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*(char)),*(char),long,*(void))->(int)),*(void),*((*(*(char)),*(char),long,*(*(char)),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)
*	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
)	O
{	O
return	O
skip_delim_internal	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),array(char),int)),int)->(long)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
,	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_flags	int
&	O
WRDSF_RETURN_DELIMS	int
)	O
;	O
}	O
static	O
int	O
scan_qstring	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),array(char),int)),long,*(long))->(int)
(	O
struct	O
wordsplit	struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct(long,*(*`),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*`),*(*`),long,long,*(*`),long,*(*`),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct`),*(struct`),array(char),int)))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*(char)),*(char),long,*(void))->(int)),*(void),*((*(*(char)),*(char),long,*(*(char)),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)
*	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
,	O
size_t	long
start	long
,	O
size_t	long
*	O
end	long
)	O
{	O
size_t	long
j	long
;	O
const	O
char	O
*	O
command	*(char)
=	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_input	*(char)
;	O
size_t	long
len	long
=	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_len	long
;	O
char	O
q	int
=	O
command	*(char)
[	O
start	long
]	O
;	O
for	O
(	O
j	long
=	O
start	long
+	O
1	int
;	O
j	long
<	O
len	long
&&	O
command	*(char)
[	O
j	long
]	O
!=	O
q	int
;	O
j	long
++	O
)	O
if	O
(	O
q	int
==	O
'"'	O
&&	O
command	*(char)
[	O
j	long
]	O
==	O
'\\'	O
)	O
j	long
++	O
;	O
if	O
(	O
j	long
<	O
len	long
&&	O
command	*(char)
[	O
j	long
]	O
==	O
q	int
)	O
{	O
int	O
flags	int
=	O
_WSNF_QUOTE	int
|	O
_WSNF_EMPTYOK	int
;	O
if	O
(	O
q	int
==	O
'\''	O
)	O
flags	int
|=	O
_WSNF_NOEXPAND	int
;	O
if	O
(	O
wordsplit_add_segm	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),array(char),int)),long,long,int)->(int)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
,	O
start	long
+	O
1	int
,	O
j	long
,	O
flags	int
)	O
)	O
return	O
_WRDS_ERR	int
;	O
*	O
end	long
=	O
j	long
;	O
}	O
else	O
{	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_endp	long
=	O
start	long
;	O
_wsplt_seterr	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)),int)->(int)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
,	O
WRDSE_QUOTE	int
)	O
;	O
return	O
_WRDS_ERR	int
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
scan_word	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),array(char),int)),long,int)->(int)
(	O
struct	O
wordsplit	struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct(long,*(*`),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*`),*(*`),long,long,*(*`),long,*(*`),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct`),*(struct`),array(char),int)))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*(char)),*(char),long,*(void))->(int)),*(void),*((*(*(char)),*(char),long,*(*(char)),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)
*	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
,	O
size_t	long
start	long
,	O
int	O
consume_all	int
)	O
{	O
size_t	long
len	long
=	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_len	long
;	O
const	O
char	O
*	O
command	*(char)
=	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_input	*(char)
;	O
const	O
char	O
*	O
comment	*(char)
=	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_comment	*(char)
;	O
int	O
join	int
=	O
0	int
;	O
int	O
flags	int
=	O
0	int
;	O
struct	O
wordsplit_node	struct(*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char)))),*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char)))),int,union(struct(long,long),*(char)))
*	O
np	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
=	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_tail	*(struct)
;	O
size_t	long
i	long
=	O
start	long
;	O
if	O
(	O
i	long
>=	O
len	long
)	O
{	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_errno	int
=	O
WRDSE_EOF	O
;	O
return	O
_WRDS_EOF	int
;	O
}	O
start	long
=	O
i	long
;	O
if	O
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_flags	int
&	O
WRDSF_SED_EXPR	int
&&	O
command	*(char)
[	O
i	long
]	O
==	O
's'	O
&&	O
i	long
+	O
3	int
<	O
len	long
&&	O
ISPUNCT	O
(	O
command	*(char)
[	O
i	long
+	O
1	int
]	O
)	O
)	O
{	O
flags	int
=	O
_WSNF_SEXP	int
;	O
i	long
=	O
skip_sed_expr	(*(char),long,long)->(int)
(	O
command	*(char)
,	O
i	long
,	O
len	long
)	O
;	O
}	O
else	O
if	O
(	O
consume_all	int
||	O
!	O
ISDELIM	O
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
,	O
command	*(char)
[	O
i	long
]	O
)	O
)	O
{	O
while	O
(	O
i	long
<	O
len	long
)	O
{	O
if	O
(	O
comment	*(char)
&&	O
strchr	(*(char),int)->(*(char))
(	O
comment	*(char)
,	O
command	*(char)
[	O
i	long
]	O
)	O
!=	O
NULL	O
)	O
{	O
size_t	long
j	long
;	O
for	O
(	O
j	long
=	O
i	long
+	O
1	int
;	O
j	long
<	O
len	long
&&	O
command	*(char)
[	O
j	long
]	O
!=	O
'\n'	O
;	O
j	long
++	O
)	O
;	O
if	O
(	O
wordsplit_add_segm	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),array(char),int)),long,long,int)->(int)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
,	O
start	long
,	O
i	long
,	O
0	int
)	O
)	O
return	O
_WRDS_ERR	int
;	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_endp	long
=	O
j	long
;	O
return	O
_WRDS_OK	int
;	O
}	O
if	O
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_flags	int
&	O
WRDSF_QUOTE	O
)	O
{	O
if	O
(	O
command	*(char)
[	O
i	long
]	O
==	O
'\\'	O
)	O
{	O
if	O
(	O
++	O
i	long
==	O
len	long
)	O
break	O
;	O
i	long
++	O
;	O
continue	O
;	O
}	O
if	O
(	O
(	O
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_flags	int
&	O
WRDSF_SQUOTE	int
)	O
&&	O
command	*(char)
[	O
i	long
]	O
==	O
'\''	O
)	O
||	O
(	O
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_flags	int
&	O
WRDSF_DQUOTE	int
)	O
&&	O
command	*(char)
[	O
i	long
]	O
==	O
'"'	O
)	O
)	O
{	O
if	O
(	O
join	int
&&	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_tail	*(struct)
)	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_tail	*(struct)
->	O
flags	int
|=	O
_WSNF_JOIN	int
;	O
if	O
(	O
wordsplit_add_segm	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),array(char),int)),long,long,int)->(int)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
,	O
start	long
,	O
i	long
,	O
_WSNF_JOIN	int
)	O
)	O
return	O
_WRDS_ERR	int
;	O
if	O
(	O
scan_qstring	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),array(char),int)),long,*(long))->(int)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
,	O
i	long
,	O
&	O
i	long
)	O
)	O
return	O
_WRDS_ERR	int
;	O
start	long
=	O
i	long
+	O
1	int
;	O
join	int
=	O
1	int
;	O
}	O
}	O
if	O
(	O
command	*(char)
[	O
i	long
]	O
==	O
'$'	O
)	O
{	O
if	O
(	O
(	O
!	O
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_flags	int
&	O
WRDSF_NOVAR	int
)	O
||	O
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_options	int
&	O
WRDSO_NOVARSPLIT	int
)	O
)	O
&&	O
command	*(char)
[	O
i	long
+	O
1	int
]	O
==	O
'{'	O
&&	O
find_closing_paren	(*(char),long,long,*(long),*(char))->(int)
(	O
command	*(char)
,	O
i	long
+	O
2	int
,	O
len	long
,	O
&	O
i	long
,	O
"{}"	*(char)
)	O
==	O
0	int
)	O
continue	O
;	O
if	O
(	O
(	O
!	O
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_flags	int
&	O
WRDSF_NOCMD	int
)	O
||	O
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_options	int
&	O
WRDSO_NOCMDSPLIT	int
)	O
)	O
&&	O
command	*(char)
[	O
i	long
+	O
1	int
]	O
==	O
'('	O
&&	O
find_closing_paren	(*(char),long,long,*(long),*(char))->(int)
(	O
command	*(char)
,	O
i	long
+	O
2	int
,	O
len	long
,	O
&	O
i	long
,	O
"()"	*(char)
)	O
==	O
0	int
)	O
continue	O
;	O
}	O
if	O
(	O
!	O
consume_all	int
&&	O
ISDELIM	O
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
,	O
command	*(char)
[	O
i	long
]	O
)	O
)	O
break	O
;	O
else	O
i	long
++	O
;	O
}	O
}	O
else	O
if	O
(	O
WSP_RETURN_DELIMS	O
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
)	O
)	O
{	O
i	long
++	O
;	O
flags	int
|=	O
_WSNF_DELIM	int
;	O
}	O
else	O
if	O
(	O
!	O
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_flags	int
&	O
WRDSF_SQUEEZE_DELIMS	int
)	O
)	O
flags	int
|=	O
_WSNF_EMPTYOK	int
;	O
if	O
(	O
join	int
&&	O
i	long
>	O
start	long
&&	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_tail	*(struct)
)	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_tail	*(struct)
->	O
flags	int
|=	O
_WSNF_JOIN	int
;	O
if	O
(	O
wordsplit_add_segm	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),array(char),int)),long,long,int)->(int)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
,	O
start	long
,	O
i	long
,	O
flags	int
)	O
)	O
return	O
_WRDS_ERR	int
;	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_endp	long
=	O
i	long
;	O
if	O
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_flags	int
&	O
WRDSF_INCREMENTAL	int
)	O
return	O
_WRDS_EOF	int
;	O
if	O
(	O
consume_all	int
)	O
{	O
if	O
(	O
!	O
np	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
)	O
np	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
=	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_head	*(struct)
;	O
while	O
(	O
np	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
)	O
{	O
np	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
->	O
flags	int
|=	O
_WSNF_QUOTE	int
;	O
np	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
=	O
np	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
->	O
next	*(struct(*(struct(*(struct`),*(struct`),int,union(struct`,*`))),*(struct(*(struct`),*(struct`),int,union(struct`,*`))),int,union(struct(long,long),*(char))))
;	O
}	O
}	O
return	O
_WRDS_OK	int
;	O
}	O
static	O
int	O
xtonum	(*(int),*(char),int,int)->(int)
(	O
int	O
*	O
pval	*(int)
,	O
const	O
char	O
*	O
src	*(char)
,	O
int	O
base	int
,	O
int	O
cnt	int
)	O
{	O
int	O
i	long
,	O
val	*(char)
;	O
for	O
(	O
i	long
=	O
0	int
,	O
val	*(char)
=	O
0	int
;	O
i	long
<	O
cnt	int
;	O
i	long
++	O
,	O
src	*(char)
++	O
)	O
{	O
int	O
n	long
=	O
*	O
(	O
unsigned	O
char	O
*	O
)	O
src	*(char)
;	O
if	O
(	O
n	long
>	O
127	int
||	O
(	O
n	long
=	O
to_num	O
(	O
n	long
)	O
)	O
>=	O
base	int
)	O
break	O
;	O
val	*(char)
=	O
val	*(char)
*	O
base	int
+	O
n	long
;	O
}	O
*	O
pval	*(int)
=	O
val	*(char)
;	O
return	O
i	long
;	O
}	O
size_t	long
wordsplit_c_quoted_length	(*(char),int,*(int))->(long)
(	O
const	O
char	O
*	O
str	*(char)
,	O
int	O
quote_hex	int
,	O
int	O
*	O
quote	*(int)
)	O
{	O
size_t	long
len	long
=	O
0	int
;	O
*	O
quote	*(int)
=	O
0	int
;	O
for	O
(	O
;	O
*	O
str	*(char)
;	O
str	*(char)
++	O
)	O
{	O
if	O
(	O
strchr	(*(char),int)->(*(char))
(	O
" \""	*(char)
,	O
*	O
str	*(char)
)	O
)	O
*	O
quote	*(int)
=	O
1	int
;	O
if	O
(	O
*	O
str	*(char)
==	O
' '	O
)	O
len	long
++	O
;	O
else	O
if	O
(	O
*	O
str	*(char)
==	O
'"'	O
)	O
len	long
+=	O
2	int
;	O
else	O
if	O
(	O
*	O
str	*(char)
!=	O
'\t'	O
&&	O
*	O
str	*(char)
!=	O
'\\'	O
&&	O
ISPRINT	O
(	O
*	O
str	*(char)
)	O
)	O
len	long
++	O
;	O
else	O
if	O
(	O
quote_hex	int
)	O
len	long
+=	O
3	int
;	O
else	O
{	O
if	O
(	O
wordsplit_c_quote_char	(int)->(int)
(	O
*	O
str	*(char)
)	O
)	O
len	long
+=	O
2	int
;	O
else	O
len	long
+=	O
4	int
;	O
}	O
}	O
return	O
len	long
;	O
}	O
static	O
int	O
wsplt_unquote_char	(*(char),int)->(int)
(	O
const	O
char	O
*	O
transtab	*(char)
,	O
int	O
c	int
)	O
{	O
while	O
(	O
*	O
transtab	*(char)
&&	O
transtab	*(char)
[	O
1	int
]	O
)	O
{	O
if	O
(	O
*	O
transtab	*(char)
++	O
==	O
c	int
)	O
return	O
*	O
transtab	*(char)
;	O
++	O
transtab	*(char)
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
wsplt_quote_char	(*(char),int)->(int)
(	O
const	O
char	O
*	O
transtab	*(char)
,	O
int	O
c	int
)	O
{	O
for	O
(	O
;	O
*	O
transtab	*(char)
&&	O
transtab	*(char)
[	O
1	int
]	O
;	O
transtab	*(char)
+=	O
2	int
)	O
{	O
if	O
(	O
transtab	*(char)
[	O
1	int
]	O
==	O
c	int
)	O
return	O
*	O
transtab	*(char)
;	O
}	O
return	O
0	int
;	O
}	O
int	O
wordsplit_c_unquote_char	(int)->(int)
(	O
int	O
c	int
)	O
{	O
return	O
wsplt_unquote_char	(*(char),int)->(int)
(	O
wordsplit_c_escape_tab	array(char)
,	O
c	int
)	O
;	O
}	O
int	O
wordsplit_c_quote_char	(int)->(int)
(	O
int	O
c	int
)	O
{	O
return	O
wsplt_quote_char	(*(char),int)->(int)
(	O
wordsplit_c_escape_tab	array(char)
,	O
c	int
)	O
;	O
}	O
void	O
wordsplit_string_unquote_copy	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),array(char),int)),int,*(char),*(char),long)->(void)
(	O
struct	O
wordsplit	struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct(long,*(*`),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*`),*(*`),long,long,*(*`),long,*(*`),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct`),*(struct`),array(char),int)))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*(char)),*(char),long,*(void))->(int)),*(void),*((*(*(char)),*(char),long,*(*(char)),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)
*	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
,	O
int	O
inquote	int
,	O
char	O
*	O
dst	*(char)
,	O
const	O
char	O
*	O
src	*(char)
,	O
size_t	long
n	long
)	O
{	O
int	O
i	long
=	O
0	int
;	O
int	O
c	int
;	O
inquote	int
=	O
!	O
!	O
inquote	int
;	O
while	O
(	O
i	long
<	O
n	long
)	O
{	O
if	O
(	O
src	*(char)
[	O
i	long
]	O
==	O
'\\'	O
)	O
{	O
++	O
i	long
;	O
if	O
(	O
WRDSO_ESC_TEST	O
(	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
,	O
inquote	int
,	O
WRDSO_XESC	O
)	O
&&	O
(	O
src	*(char)
[	O
i	long
]	O
==	O
'x'	O
||	O
src	*(char)
[	O
i	long
]	O
==	O
'X'	O
)	O
)	O
{	O
if	O
(	O
n	long
-	O
i	long
<	O
2	int
)	O
{	O
*	O
dst	*(char)
++	O
=	O
'\\'	O
;	O
*	O
dst	*(char)
++	O
=	O
src	*(char)
[	O
i	long
++	O
]	O
;	O
}	O
else	O
{	O
int	O
off	long
=	O
xtonum	(*(int),*(char),int,int)->(int)
(	O
&	O
c	int
,	O
src	*(char)
+	O
i	long
+	O
1	int
,	O
16	int
,	O
2	int
)	O
;	O
if	O
(	O
off	long
==	O
0	int
)	O
{	O
*	O
dst	*(char)
++	O
=	O
'\\'	O
;	O
*	O
dst	*(char)
++	O
=	O
src	*(char)
[	O
i	long
++	O
]	O
;	O
}	O
else	O
{	O
*	O
dst	*(char)
++	O
=	O
c	int
;	O
i	long
+=	O
off	long
+	O
1	int
;	O
}	O
}	O
}	O
else	O
if	O
(	O
WRDSO_ESC_TEST	O
(	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
,	O
inquote	int
,	O
WRDSO_OESC	O
)	O
&&	O
(	O
unsigned	O
char	O
)	O
src	*(char)
[	O
i	long
]	O
<	O
128	int
&&	O
ISDIGIT	O
(	O
src	*(char)
[	O
i	long
]	O
)	O
)	O
{	O
if	O
(	O
n	long
-	O
i	long
<	O
1	int
)	O
{	O
*	O
dst	*(char)
++	O
=	O
'\\'	O
;	O
*	O
dst	*(char)
++	O
=	O
src	*(char)
[	O
i	long
++	O
]	O
;	O
}	O
else	O
{	O
int	O
off	long
=	O
xtonum	(*(int),*(char),int,int)->(int)
(	O
&	O
c	int
,	O
src	*(char)
+	O
i	long
,	O
8	int
,	O
3	int
)	O
;	O
if	O
(	O
off	long
==	O
0	int
)	O
{	O
*	O
dst	*(char)
++	O
=	O
'\\'	O
;	O
*	O
dst	*(char)
++	O
=	O
src	*(char)
[	O
i	long
++	O
]	O
;	O
}	O
else	O
{	O
*	O
dst	*(char)
++	O
=	O
c	int
;	O
i	long
+=	O
off	long
;	O
}	O
}	O
}	O
else	O
if	O
(	O
(	O
c	int
=	O
wsplt_unquote_char	(*(char),int)->(int)
(	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
->	O
ws_escape	array(*(char))
[	O
inquote	int
]	O
,	O
src	*(char)
[	O
i	long
]	O
)	O
)	O
)	O
{	O
*	O
dst	*(char)
++	O
=	O
c	int
;	O
++	O
i	long
;	O
}	O
else	O
{	O
if	O
(	O
WRDSO_ESC_TEST	O
(	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
,	O
inquote	int
,	O
WRDSO_BSKEEP	O
)	O
)	O
*	O
dst	*(char)
++	O
=	O
'\\'	O
;	O
*	O
dst	*(char)
++	O
=	O
src	*(char)
[	O
i	long
++	O
]	O
;	O
}	O
}	O
else	O
*	O
dst	*(char)
++	O
=	O
src	*(char)
[	O
i	long
++	O
]	O
;	O
}	O
*	O
dst	*(char)
=	O
0	int
;	O
}	O
void	O
wordsplit_c_quote_copy	(*(char),*(char),int)->(void)
(	O
char	O
*	O
dst	*(char)
,	O
const	O
char	O
*	O
src	*(char)
,	O
int	O
quote_hex	int
)	O
{	O
for	O
(	O
;	O
*	O
src	*(char)
;	O
src	*(char)
++	O
)	O
{	O
if	O
(	O
*	O
src	*(char)
==	O
'"'	O
)	O
{	O
*	O
dst	*(char)
++	O
=	O
'\\'	O
;	O
*	O
dst	*(char)
++	O
=	O
*	O
src	*(char)
;	O
}	O
else	O
if	O
(	O
*	O
src	*(char)
!=	O
'\t'	O
&&	O
*	O
src	*(char)
!=	O
'\\'	O
&&	O
ISPRINT	O
(	O
*	O
src	*(char)
)	O
)	O
*	O
dst	*(char)
++	O
=	O
*	O
src	*(char)
;	O
else	O
{	O
char	O
tmp	array(char)
[	O
4	int
]	O
;	O
if	O
(	O
quote_hex	int
)	O
{	O
snprintf	(*(char),long,*(char))->(int)
(	O
tmp	array(char)
,	O
sizeof	O
tmp	array(char)
,	O
"%%%02X"	*(char)
,	O
*	O
(	O
unsigned	O
char	O
*	O
)	O
src	*(char)
)	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
dst	*(char)
,	O
tmp	array(char)
,	O
3	int
)	O
;	O
dst	*(char)
+=	O
3	int
;	O
}	O
else	O
{	O
int	O
c	int
=	O
wordsplit_c_quote_char	(int)->(int)
(	O
*	O
src	*(char)
)	O
;	O
*	O
dst	*(char)
++	O
=	O
'\\'	O
;	O
if	O
(	O
c	int
)	O
*	O
dst	*(char)
++	O
=	O
c	int
;	O
else	O
{	O
snprintf	(*(char),long,*(char))->(int)
(	O
tmp	array(char)
,	O
sizeof	O
tmp	array(char)
,	O
"%03o"	*(char)
,	O
*	O
(	O
unsigned	O
char	O
*	O
)	O
src	*(char)
)	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
dst	*(char)
,	O
tmp	array(char)
,	O
3	int
)	O
;	O
dst	*(char)
+=	O
3	int
;	O
}	O
}	O
}	O
}	O
}	O
struct	O
exptab	struct(*(char),int,int,*((*(struct(long,*(*`),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*`),*(*`),long,long,*(*`),long,*(*`),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct`),*(struct`),array(char),int)))->(int)))
{	O
char	O
const	O
*	O
descr	*(char)
;	O
int	O
flag	int
;	O
int	O
opt	int
;	O
int	O
(	O
*	O
expansion	*((*(struct(long,*(*`),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*`),*(*`),long,long,*(*`),long,*(*`),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct`),*(struct`),array(char),int)))->(int))
)	O
(	O
struct	O
wordsplit	struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct(long,*(*`),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*`),*(*`),long,long,*(*`),long,*(*`),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct`),*(struct`),array(char),int)))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*(char)),*(char),long,*(void))->(int)),*(void),*((*(*(char)),*(char),long,*(*(char)),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)
*	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
)	O
;	O
}	O
;	O
static	O
struct	O
exptab	struct(*(char),int,int,*((*(struct(long,*(*`),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*`),*(*`),long,long,*(*`),long,*(*`),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct`),*(struct`),array(char),int)))->(int)))
exptab	struct(*(char),int,int,*((*(struct(long,*(*`),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*`),*(*`),long,long,*(*`),long,*(*`),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct`),*(struct`),array(char),int)))->(int)))
[	O
]	O
=	O
{	O
{	O
N_	O
(	O
"WS trimming"	*(char)
)	O
,	O
WRDSF_WS	int
,	O
0	int
,	O
wordsplit_trimws	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),array(char),int)))->(int)
}	O
,	O
{	O
N_	O
(	O
"command substitution"	*(char)
)	O
,	O
WRDSF_NOCMD	int
,	O
EXPOPT_NEG	int
|	O
EXPOPT_COALESCE	int
,	O
wordsplit_cmdexp	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),array(char),int)))->(int)
}	O
,	O
{	O
N_	O
(	O
"coalesce list"	*(char)
)	O
,	O
0	int
,	O
EXPOPT_NEG	int
|	O
EXPOPT_COALESCE	int
,	O
NULL	O
}	O
,	O
{	O
N_	O
(	O
"tilde expansion"	*(char)
)	O
,	O
WRDSF_PATHEXPAND	int
,	O
0	int
,	O
wordsplit_tildexpand	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),array(char),int)))->(int)
}	O
,	O
{	O
N_	O
(	O
"variable expansion"	*(char)
)	O
,	O
WRDSF_NOVAR	int
,	O
EXPOPT_NEG	int
,	O
wordsplit_varexp	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),array(char),int)))->(int)
}	O
,	O
{	O
N_	O
(	O
"quote removal"	*(char)
)	O
,	O
0	int
,	O
EXPOPT_NEG	int
,	O
wsnode_quoteremoval	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),array(char),int)))->(int)
}	O
,	O
{	O
N_	O
(	O
"coalesce list"	*(char)
)	O
,	O
0	int
,	O
EXPOPT_NEG	int
|	O
EXPOPT_COALESCE	int
,	O
NULL	O
}	O
,	O
{	O
N_	O
(	O
"path expansion"	*(char)
)	O
,	O
WRDSF_PATHEXPAND	int
,	O
0	int
,	O
wordsplit_pathexpand	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),array(char),int)))->(int)
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
static	O
inline	O
int	O
exptab_matches	(*(struct(*(char),int,int,*((*`)->(int)))),*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),array(char),int)))->(int)
(	O
struct	O
exptab	struct(*(char),int,int,*((*(struct(long,*(*`),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*`),*(*`),long,long,*(*`),long,*(*`),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct`),*(struct`),array(char),int)))->(int)))
*	O
p	*(char)
,	O
struct	O
wordsplit	struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct(long,*(*`),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*`),*(*`),long,long,*(*`),long,*(*`),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct`),*(struct`),array(char),int)))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*(char)),*(char),long,*(void))->(int)),*(void),*((*(*(char)),*(char),long,*(*(char)),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)
*	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
)	O
{	O
int	O
result	int
;	O
result	int
=	O
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_flags	int
&	O
p	*(char)
->	O
flag	int
)	O
;	O
if	O
(	O
p	*(char)
->	O
opt	int
&	O
EXPORT_ALLOF	int
)	O
result	int
=	O
result	int
==	O
p	*(char)
->	O
flag	int
;	O
if	O
(	O
p	*(char)
->	O
opt	int
&	O
EXPOPT_NEG	int
)	O
result	int
=	O
!	O
result	int
;	O
return	O
result	int
;	O
}	O
static	O
int	O
wordsplit_process_list	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)),long)->(int)
(	O
struct	O
wordsplit	struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct(long,*(*`),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*`),*(*`),long,long,*(*`),long,*(*`),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct`),*(struct`),array(char),int)))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*(char)),*(char),long,*(void))->(int)),*(void),*((*(*(char)),*(char),long,*(*(char)),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)
*	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
,	O
size_t	long
start	long
)	O
{	O
struct	O
exptab	struct(*(char),int,int,*((*(struct(long,*(*`),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*`),*(*`),long,long,*(*`),long,*(*`),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct`),*(struct`),array(char),int)))->(int)))
*	O
p	*(char)
;	O
if	O
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_flags	int
&	O
WRDSF_SHOWDBG	int
)	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_debug	*((*(char))->(void))
(	O
_	O
(	O
"(%02d) Input:%.*s;"	*(char)
)	O
,	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_lvl	int
,	O
(	O
int	O
)	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_len	long
,	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_input	*(char)
)	O
;	O
if	O
(	O
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_flags	int
&	O
WRDSF_NOSPLIT	int
)	O
||	O
(	O
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_options	int
&	O
WRDSO_MAXWORDS	int
)	O
&&	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_wordi	long
+	O
1	int
==	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_maxwords	long
)	O
)	O
{	O
if	O
(	O
scan_word	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),array(char),int)),long,int)->(int)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
,	O
start	long
,	O
1	int
)	O
==	O
_WRDS_ERR	int
)	O
return	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_errno	int
;	O
}	O
else	O
{	O
int	O
rc	int
;	O
while	O
(	O
(	O
rc	int
=	O
scan_word	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),array(char),int)),long,int)->(int)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
,	O
start	long
,	O
0	int
)	O
)	O
==	O
_WRDS_OK	int
)	O
start	long
=	O
skip_delim	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),array(char),int)))->(long)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
)	O
;	O
if	O
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_tail	*(struct)
)	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_tail	*(struct)
->	O
flags	int
&=	O
~	O
_WSNF_JOIN	int
;	O
if	O
(	O
rc	int
==	O
_WRDS_ERR	int
)	O
return	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_errno	int
;	O
}	O
if	O
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_flags	int
&	O
WRDSF_SHOWDBG	int
)	O
{	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_debug	*((*(char))->(void))
(	O
"(%02d) %s"	*(char)
,	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_lvl	int
,	O
_	O
(	O
"Initial list:"	*(char)
)	O
)	O
;	O
wordsplit_dump_nodes	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),array(char),int)))->(void)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
)	O
;	O
}	O
for	O
(	O
p	*(char)
=	O
exptab	struct(*(char),int,int,*((*(struct(long,*(*`),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*`),*(*`),long,long,*(*`),long,*(*`),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct`),*(struct`),array(char),int)))->(int)))
;	O
p	*(char)
->	O
descr	*(char)
;	O
p	*(char)
++	O
)	O
{	O
if	O
(	O
exptab_matches	(*(struct(*(char),int,int,*((*`)->(int)))),*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),array(char),int)))->(int)
(	O
p	*(char)
,	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
)	O
)	O
{	O
if	O
(	O
p	*(char)
->	O
opt	int
&	O
EXPOPT_COALESCE	int
)	O
{	O
if	O
(	O
wsnode_coalesce	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),array(char),int)))->(int)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
)	O
)	O
break	O
;	O
if	O
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_flags	int
&	O
WRDSF_SHOWDBG	int
)	O
{	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_debug	*((*(char))->(void))
(	O
"(%02d) %s"	*(char)
,	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_lvl	int
,	O
_	O
(	O
"Coalesced list:"	*(char)
)	O
)	O
;	O
wordsplit_dump_nodes	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),array(char),int)))->(void)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
)	O
;	O
}	O
}	O
if	O
(	O
p	*(char)
->	O
expansion	*((*(struct(long,*(*`),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*`),*(*`),long,long,*(*`),long,*(*`),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct`),*(struct`),array(char),int)))->(int))
)	O
{	O
if	O
(	O
p	*(char)
->	O
expansion	*((*(struct(long,*(*`),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*`),*(*`),long,long,*(*`),long,*(*`),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct`),*(struct`),array(char),int)))->(int))
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
)	O
)	O
break	O
;	O
if	O
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_flags	int
&	O
WRDSF_SHOWDBG	int
)	O
{	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_debug	*((*(char))->(void))
(	O
"(%02d) %s"	*(char)
,	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_lvl	int
,	O
_	O
(	O
p	*(char)
->	O
descr	*(char)
)	O
)	O
;	O
wordsplit_dump_nodes	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),array(char),int)))->(void)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
)	O
;	O
}	O
}	O
}	O
}	O
return	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_errno	int
;	O
}	O
static	O
int	O
wordsplit_run	(*(char),long,*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)),int,int)->(int)
(	O
const	O
char	O
*	O
command	*(char)
,	O
size_t	long
length	long
,	O
struct	O
wordsplit	struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct(long,*(*`),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*`),*(*`),long,long,*(*`),long,*(*`),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct`),*(struct`),array(char),int)))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*(char)),*(char),long,*(void))->(int)),*(void),*((*(*(char)),*(char),long,*(*(char)),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)
*	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
,	O
int	O
flags	int
,	O
int	O
lvl	int
)	O
{	O
int	O
rc	int
;	O
size_t	long
start	long
;	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_errctx	*(char)
=	O
NULL	O
;	O
if	O
(	O
!	O
command	*(char)
)	O
{	O
if	O
(	O
!	O
(	O
flags	int
&	O
WRDSF_INCREMENTAL	int
)	O
)	O
return	O
_wsplt_seterr	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)),int)->(int)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
,	O
WRDSE_USAGE	int
)	O
;	O
if	O
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_head	*(struct)
)	O
return	O
wordsplit_finish	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)))->(int)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
)	O
;	O
start	long
=	O
skip_delim_real	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct(*`,*`,int,union`)),*(struct(*`,*`,int,union`)),array(char),int)))->(long)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
)	O
;	O
if	O
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_endp	long
==	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_len	long
)	O
return	O
_wsplt_seterr	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)),int)->(int)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
,	O
WRDSE_NOINPUT	int
)	O
;	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_flags	int
|=	O
WRDSF_REUSE	int
;	O
wordsplit_init0	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)))->(void)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
)	O
;	O
}	O
else	O
{	O
start	long
=	O
0	int
;	O
rc	int
=	O
wordsplit_init	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)),*(char),long,int)->(int)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
,	O
command	*(char)
,	O
length	long
,	O
flags	int
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_lvl	int
=	O
lvl	int
;	O
}	O
rc	int
=	O
wordsplit_process_list	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)),long)->(int)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
,	O
start	long
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
return	O
wordsplit_finish	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)))->(int)
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
)	O
;	O
}	O
int	O
wordsplit_len	(*(char),long,*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)),int)->(int)
(	O
const	O
char	O
*	O
command	*(char)
,	O
size_t	long
length	long
,	O
struct	O
wordsplit	struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct(long,*(*`),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*`),*(*`),long,long,*(*`),long,*(*`),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct`),*(struct`),array(char),int)))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*(char)),*(char),long,*(void))->(int)),*(void),*((*(*(char)),*(char),long,*(*(char)),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)
*	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
,	O
int	O
flags	int
)	O
{	O
return	O
wordsplit_run	(*(char),long,*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)),int,int)->(int)
(	O
command	*(char)
,	O
length	long
,	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
,	O
flags	int
,	O
0	int
)	O
;	O
}	O
int	O
wordsplit	struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct(long,*(*`),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*`),*(*`),long,long,*(*`),long,*(*`),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct`),*(struct`),array(char),int)))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*(char)),*(char),long,*(void))->(int)),*(void),*((*(*(char)),*(char),long,*(*(char)),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)
(	O
const	O
char	O
*	O
command	*(char)
,	O
struct	O
wordsplit	struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct(long,*(*`),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*`),*(*`),long,long,*(*`),long,*(*`),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct`),*(struct`),array(char),int)))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*(char)),*(char),long,*(void))->(int)),*(void),*((*(*(char)),*(char),long,*(*(char)),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)
*	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
,	O
int	O
flags	int
)	O
{	O
return	O
wordsplit_len	(*(char),long,*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)),int)->(int)
(	O
command	*(char)
,	O
command	*(char)
?	O
strlen	(*(char))->(long)
(	O
command	*(char)
)	O
:	O
0	int
,	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
,	O
flags	int
)	O
;	O
}	O
void	O
wordsplit_free_words	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)))->(void)
(	O
struct	O
wordsplit	struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct(long,*(*`),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*`),*(*`),long,long,*(*`),long,*(*`),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct`),*(struct`),array(char),int)))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*(char)),*(char),long,*(void))->(int)),*(void),*((*(*(char)),*(char),long,*(*(char)),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)
*	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
)	O
{	O
size_t	long
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
->	O
ws_wordc	long
;	O
i	long
++	O
)	O
{	O
char	O
*	O
p	*(char)
=	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
->	O
ws_wordv	*(*(char))
[	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
->	O
ws_offs	long
+	O
i	long
]	O
;	O
if	O
(	O
p	*(char)
)	O
{	O
free	(*(void))->(void)
(	O
p	*(char)
)	O
;	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
->	O
ws_wordv	*(*(char))
[	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
->	O
ws_offs	long
+	O
i	long
]	O
=	O
NULL	O
;	O
}	O
}	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
->	O
ws_wordc	long
=	O
0	int
;	O
}	O
void	O
wordsplit_free_envbuf	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)))->(void)
(	O
struct	O
wordsplit	struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct(long,*(*`),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*`),*(*`),long,long,*(*`),long,*(*`),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct`),*(struct`),array(char),int)))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*(char)),*(char),long,*(void))->(int)),*(void),*((*(*(char)),*(char),long,*(*(char)),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)
*	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
)	O
{	O
if	O
(	O
!	O
(	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
->	O
ws_flags	int
&	O
WRDSF_ENV	int
)	O
)	O
return	O
;	O
if	O
(	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
->	O
ws_envbuf	*(*(char))
)	O
{	O
size_t	long
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
->	O
ws_envbuf	*(*(char))
[	O
i	long
]	O
;	O
i	long
++	O
)	O
free	(*(void))->(void)
(	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
->	O
ws_envbuf	*(*(char))
[	O
i	long
]	O
)	O
;	O
free	(*(void))->(void)
(	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
->	O
ws_envbuf	*(*(char))
)	O
;	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
->	O
ws_envidx	long
=	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
->	O
ws_envsiz	long
=	O
0	int
;	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
->	O
ws_envbuf	*(*(char))
=	O
NULL	O
;	O
}	O
}	O
void	O
wordsplit_free_parambuf	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)))->(void)
(	O
struct	O
wordsplit	struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct(long,*(*`),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*`),*(*`),long,long,*(*`),long,*(*`),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct`),*(struct`),array(char),int)))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*(char)),*(char),long,*(void))->(int)),*(void),*((*(*(char)),*(char),long,*(*(char)),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)
*	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
)	O
{	O
if	O
(	O
!	O
(	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
->	O
ws_options	int
&	O
WRDSO_PARAMV	int
)	O
)	O
return	O
;	O
if	O
(	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
->	O
ws_parambuf	*(*(char))
)	O
{	O
size_t	long
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
->	O
ws_parambuf	*(*(char))
[	O
i	long
]	O
;	O
i	long
++	O
)	O
free	(*(void))->(void)
(	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
->	O
ws_parambuf	*(*(char))
[	O
i	long
]	O
)	O
;	O
free	(*(void))->(void)
(	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
->	O
ws_parambuf	*(*(char))
)	O
;	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
->	O
ws_paramidx	long
=	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
->	O
ws_paramsiz	long
=	O
0	int
;	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
->	O
ws_parambuf	*(*(char))
=	O
NULL	O
;	O
}	O
}	O
void	O
wordsplit_clearerr	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)))->(void)
(	O
struct	O
wordsplit	struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct(long,*(*`),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*`),*(*`),long,long,*(*`),long,*(*`),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct`),*(struct`),array(char),int)))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*(char)),*(char),long,*(void))->(int)),*(void),*((*(*(char)),*(char),long,*(*(char)),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)
*	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
)	O
{	O
if	O
(	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
->	O
ws_errno	int
==	O
WRDSE_USERERR	int
)	O
free	(*(void))->(void)
(	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
->	O
ws_usererr	*(char)
)	O
;	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
->	O
ws_usererr	*(char)
=	O
NULL	O
;	O
free	(*(void))->(void)
(	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
->	O
ws_errctx	*(char)
)	O
;	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
->	O
ws_errctx	*(char)
=	O
NULL	O
;	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
->	O
ws_errno	int
=	O
WRDSE_OK	int
;	O
}	O
void	O
wordsplit_free	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)))->(void)
(	O
struct	O
wordsplit	struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct(long,*(*`),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*`),*(*`),long,long,*(*`),long,*(*`),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct`),*(struct`),array(char),int)))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*(char)),*(char),long,*(void))->(int)),*(void),*((*(*(char)),*(char),long,*(*(char)),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)
*	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
)	O
{	O
if	O
(	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
->	O
ws_errno	int
==	O
WRDSE_USAGE	int
)	O
return	O
;	O
wordsplit_clearerr	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)))->(void)
(	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
)	O
;	O
wordsplit_free_nodes	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)))->(void)
(	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
)	O
;	O
wordsplit_free_words	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)))->(void)
(	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
)	O
;	O
free	(*(void))->(void)
(	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
->	O
ws_wordv	*(*(char))
)	O
;	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
->	O
ws_wordv	*(*(char))
=	O
NULL	O
;	O
wordsplit_free_envbuf	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)))->(void)
(	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
)	O
;	O
wordsplit_free_parambuf	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)))->(void)
(	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
)	O
;	O
}	O
int	O
wordsplit_get_words	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)),*(long),*(*(*(char))))->(int)
(	O
struct	O
wordsplit	struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct(long,*(*`),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*`),*(*`),long,long,*(*`),long,*(*`),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct`),*(struct`),array(char),int)))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*(char)),*(char),long,*(void))->(int)),*(void),*((*(*(char)),*(char),long,*(*(char)),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)
*	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
,	O
size_t	long
*	O
wordc	*(long)
,	O
char	O
*	O
*	O
*	O
wordv	*(*(*(char)))
)	O
{	O
char	O
*	O
*	O
p	*(char)
=	O
realloc	(*(void),long)->(*(void))
(	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
->	O
ws_wordv	*(*(char))
,	O
(	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
->	O
ws_wordc	long
+	O
1	int
)	O
*	O
sizeof	O
(	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
->	O
ws_wordv	*(*(char))
[	O
0	int
]	O
)	O
)	O
;	O
if	O
(	O
!	O
p	*(char)
)	O
return	O
-	O
1	int
;	O
*	O
wordv	*(*(*(char)))
=	O
p	*(char)
;	O
*	O
wordc	*(long)
=	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
->	O
ws_wordc	long
;	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
->	O
ws_wordv	*(*(char))
=	O
NULL	O
;	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
->	O
ws_wordc	long
=	O
0	int
;	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
->	O
ws_wordn	long
=	O
0	int
;	O
return	O
0	int
;	O
}	O
const	O
char	O
*	O
_wordsplit_errstr	array(*(char))
[	O
]	O
=	O
{	O
N_	O
(	O
"no error"	*(char)
)	O
,	O
N_	O
(	O
"missing closing quote"	*(char)
)	O
,	O
N_	O
(	O
"memory exhausted"	*(char)
)	O
,	O
N_	O
(	O
"invalid wordsplit usage"	*(char)
)	O
,	O
N_	O
(	O
"unbalanced curly brace"	*(char)
)	O
,	O
N_	O
(	O
"undefined variable"	*(char)
)	O
,	O
N_	O
(	O
"input exhausted"	*(char)
)	O
,	O
N_	O
(	O
"unbalanced parenthesis"	*(char)
)	O
,	O
N_	O
(	O
"globbing error"	*(char)
)	O
,	O
N_	O
(	O
"user-defined error"	*(char)
)	O
,	O
N_	O
(	O
"invalid parameter number in assignment"	*(char)
)	O
}	O
;	O
int	O
_wordsplit_nerrs	int
=	O
sizeof	O
(	O
_wordsplit_errstr	array(*(char))
)	O
/	O
sizeof	O
(	O
_wordsplit_errstr	array(*(char))
[	O
0	int
]	O
)	O
;	O
const	O
char	O
*	O
wordsplit_strerror	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)))->(*(char))
(	O
struct	O
wordsplit	struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct(long,*(*`),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*`),*(*`),long,long,*(*`),long,*(*`),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct`),*(struct`),array(char),int)))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*(char)),*(char),long,*(void))->(int)),*(void),*((*(*(char)),*(char),long,*(*(char)),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)
*	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
)	O
{	O
if	O
(	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
->	O
ws_errno	int
==	O
WRDSE_USERERR	int
)	O
return	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
->	O
ws_usererr	*(char)
;	O
if	O
(	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
->	O
ws_errno	int
<	O
_wordsplit_nerrs	int
)	O
return	O
_wordsplit_errstr	array(*(char))
[	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
->	O
ws_errno	int
]	O
;	O
return	O
N_	O
(	O
"unknown error"	*(char)
)	O
;	O
}	O
void	O
wordsplit_perror	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)))->(void)
(	O
struct	O
wordsplit	struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct(long,*(*`),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*`),*(*`),long,long,*(*`),long,*(*`),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct`),*(struct`),array(char),int)))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*(char)),*(char),long,*(void))->(int)),*(void),*((*(*(char)),*(char),long,*(*(char)),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)
*	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
)	O
{	O
switch	O
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_errno	int
)	O
{	O
case	O
WRDSE_QUOTE	int
:	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_error	*((*(char))->(void))
(	O
_	O
(	O
"missing closing %c (start near #%lu)"	*(char)
)	O
,	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_input	*(char)
[	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_endp	long
]	O
,	O
(	O
unsigned	O
long	O
)	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_endp	long
)	O
;	O
break	O
;	O
default	O
:	O
if	O
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_errctx	*(char)
)	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_error	*((*(char))->(void))
(	O
"%s: %s"	*(char)
,	O
wordsplit_strerror	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)))->(*(char))
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
)	O
,	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_errctx	*(char)
)	O
;	O
else	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
->	O
ws_error	*((*(char))->(void))
(	O
"%s"	*(char)
,	O
wordsplit_strerror	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)))->(*(char))
(	O
wsp	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char))))
)	O
)	O
;	O
}	O
}	O
