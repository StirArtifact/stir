struct	O
rec_rset_fprops_s	struct(*(char),bool,bool,*(struct),*(char),*(struct(*(char),bool,bool,*(struct),*(char),*(struct(*(char),bool,bool,*(struct`),*(char),*(struct`))))))
{	O
char	O
*	O
fname	*(char)
;	O
bool	bool
key_p	bool
;	O
bool	bool
auto_p	bool
;	O
rec_type_t	*(struct)
type	enum(int,int,int,int)
;	O
char	O
*	O
type_name	*(char)
;	O
struct	O
rec_rset_fprops_s	struct(*(char),bool,bool,*(struct),*(char),*(struct(*(char),bool,bool,*(struct),*(char),*(struct(*(char),bool,bool,*(struct`),*(char),*(struct`))))))
*	O
next	*(struct(*(char),bool,bool,*(struct),*(char),*(struct(*(char),bool,bool,*(struct`),*(char),*(struct`)))))
;	O
}	O
;	O
typedef	O
struct	O
rec_rset_fprops_s	struct(*(char),bool,bool,*(struct),*(char),*(struct(*(char),bool,bool,*(struct),*(char),*(struct(*(char),bool,bool,*(struct`),*(char),*(struct`))))))
*	O
rec_rset_fprops_t	*(struct(*(char),bool,bool,*(struct),*(char),*(struct(*(char),bool,bool,*(struct`),*(char),*(struct`)))))
;	O
struct	O
rec_rset_s	struct(*(struct),long,*(struct(*(char),bool,bool,*(struct),*(char),*(struct(*(char),bool,bool,*(struct`),*(char),*(struct`))))),*(struct),*(struct),long,long,*(*(struct)),long,int,int,*(struct))
{	O
rec_record_t	*(struct)
descriptor	*(struct)
;	O
size_t	long
descriptor_pos	long
;	O
rec_rset_fprops_t	*(struct(*(char),bool,bool,*(struct),*(char),*(struct(*(char),bool,bool,*(struct`),*(char),*(struct`)))))
field_props	*(struct(*(char),bool,bool,*(struct),*(char),*(struct(*(char),bool,bool,*(struct`),*(char),*(struct`)))))
;	O
rec_type_reg_t	*(struct)
type_reg	*(struct)
;	O
rec_fex_t	*(struct)
order_by_fields	*(struct)
;	O
size_t	long
min_size	long
;	O
size_t	long
max_size	long
;	O
rec_sex_t	*(struct)
*	O
constraints	*(*(struct))
;	O
size_t	long
num_constraints	long
;	O
int	O
record_type	int
;	O
int	O
comment_type	int
;	O
rec_mset_t	*(struct)
mset	*(struct)
;	O
}	O
;	O
static	O
void	O
rec_rset_init	(*(struct(*(struct),long,*(struct(*`,bool,bool,*`,*`,*`)),*(struct),*(struct),long,long,*(*(struct`)),long,int,int,*(struct))))->(void)
(	O
rec_rset_t	*(struct)
rset	*(struct)
)	O
;	O
static	O
void	O
rec_rset_update_types	(*(struct(*(struct),long,*(struct(*`,bool,bool,*`,*`,*`)),*(struct),*(struct),long,long,*(*(struct`)),long,int,int,*(struct))))->(void)
(	O
rec_rset_t	*(struct)
rset	*(struct)
)	O
;	O
static	O
void	O
rec_rset_update_field_props	(*(struct(*(struct),long,*(struct(*`,bool,bool,*`,*`,*`)),*(struct),*(struct),long,long,*(*(struct`)),long,int,int,*(struct))))->(void)
(	O
rec_rset_t	*(struct)
rset	*(struct)
)	O
;	O
static	O
void	O
rec_rset_update_size_constraints	(*(struct(*(struct),long,*(struct(*`,bool,bool,*`,*`,*`)),*(struct),*(struct),long,long,*(*(struct`)),long,int,int,*(struct))))->(void)
(	O
rec_rset_t	*(struct)
rset	*(struct)
)	O
;	O
static	O
void	O
rec_rset_update_sex_constraints	(*(struct(*(struct),long,*(struct(*`,bool,bool,*`,*`,*`)),*(struct),*(struct),long,long,*(*(struct`)),long,int,int,*(struct))))->(void)
(	O
rec_rset_t	*(struct)
rset	*(struct)
)	O
;	O
static	O
bool	bool
rec_rset_record_equal_fn	(*(void),*(void))->(bool)
(	O
void	O
*	O
data1	*(void)
,	O
void	O
*	O
data2	*(void)
)	O
;	O
static	O
void	O
rec_rset_record_disp_fn	(*(void))->(void)
(	O
void	O
*	O
data	*(void)
)	O
;	O
static	O
void	O
*	O
rec_rset_record_dup_fn	(*(void))->(*(void))
(	O
void	O
*	O
data	*(void)
)	O
;	O
static	O
int	O
rec_rset_record_compare_fn	(*(void),*(void),int)->(int)
(	O
void	O
*	O
data1	*(void)
,	O
void	O
*	O
data2	*(void)
,	O
int	O
type1	*(struct)
)	O
;	O
static	O
bool	bool
rec_rset_comment_equal_fn	(*(void),*(void))->(bool)
(	O
void	O
*	O
data1	*(void)
,	O
void	O
*	O
data2	*(void)
)	O
;	O
static	O
void	O
rec_rset_comment_disp_fn	(*(void))->(void)
(	O
void	O
*	O
data	*(void)
)	O
;	O
static	O
void	O
*	O
rec_rset_comment_dup_fn	(*(void))->(*(void))
(	O
void	O
*	O
data	*(void)
)	O
;	O
static	O
int	O
rec_rset_comment_compare_fn	(*(void),*(void),int)->(int)
(	O
void	O
*	O
data1	*(void)
,	O
void	O
*	O
data2	*(void)
,	O
int	O
type2	int
)	O
;	O
static	O
bool	bool
rec_rset_type_field_p	(*(char))->(bool)
(	O
const	O
char	O
*	O
str	*(char)
)	O
;	O
static	O
rec_fex_t	*(struct)
rec_rset_type_field_fex	(*(char))->(*(struct))
(	O
const	O
char	O
*	O
str	*(char)
)	O
;	O
static	O
char	O
*	O
rec_rset_type_field_type	(*(char))->(*(char))
(	O
const	O
char	O
*	O
str	*(char)
)	O
;	O
static	O
rec_rset_fprops_t	*(struct(*(char),bool,bool,*(struct),*(char),*(struct(*(char),bool,bool,*(struct`),*(char),*(struct`)))))
rec_rset_get_props	(*(struct(*(struct),long,*(struct(*`,bool,bool,*`,*`,*`)),*(struct),*(struct),long,long,*(*(struct`)),long,int,int,*(struct))),*(char),bool)->(*(struct(*(char),bool,bool,*(struct),*(char),*(struct(*`,bool,bool,*`,*`,*`)))))
(	O
rec_rset_t	*(struct)
rset	*(struct)
,	O
const	O
char	O
*	O
fname	*(char)
,	O
bool	bool
create_p	bool
)	O
;	O
static	O
bool	bool
rec_rset_add_auto_field_int	(*(struct(*(struct),long,*(struct(*`,bool,bool,*`,*`,*`)),*(struct),*(struct),long,long,*(*(struct`)),long,int,int,*(struct))),*(char),*(struct))->(bool)
(	O
rec_rset_t	*(struct)
rset	*(struct)
,	O
const	O
char	O
*	O
field_name	*(char)
,	O
rec_record_t	*(struct)
record	*(struct)
)	O
;	O
static	O
bool	bool
rec_rset_add_auto_field_date	(*(struct(*(struct),long,*(struct(*`,bool,bool,*`,*`,*`)),*(struct),*(struct),long,long,*(*(struct`)),long,int,int,*(struct))),*(char),*(struct))->(bool)
(	O
rec_rset_t	*(struct)
rset	*(struct)
,	O
const	O
char	O
*	O
field_name	*(char)
,	O
rec_record_t	*(struct)
record	*(struct)
)	O
;	O
static	O
bool	bool
rec_rset_add_auto_field_uuid	(*(struct(*(struct),long,*(struct(*`,bool,bool,*`,*`,*`)),*(struct),*(struct),long,long,*(*(struct`)),long,int,int,*(struct))),*(char),*(struct))->(bool)
(	O
rec_rset_t	*(struct)
rset	*(struct)
,	O
const	O
char	O
*	O
field_name	*(char)
,	O
rec_record_t	*(struct)
record	*(struct)
)	O
;	O
static	O
rec_record_t	*(struct)
rec_rset_merge_records	(*(struct),*(struct),*(struct))->(*(struct))
(	O
rec_record_t	*(struct)
to_record	*(struct)
,	O
rec_record_t	*(struct)
from_record	*(struct)
,	O
rec_fex_t	*(struct)
excluded_fields	*(struct)
)	O
;	O
static	O
int	O
rec_rset_compare_typed_records	(*(struct(*(struct),long,*(struct(*`,bool,bool,*`,*`,*`)),*(struct),*(struct),long,long,*(*(struct`)),long,int,int,*(struct))),*(struct),*(struct),*(struct))->(int)
(	O
rec_rset_t	*(struct)
rset	*(struct)
,	O
rec_record_t	*(struct)
record1	*(struct)
,	O
rec_record_t	*(struct)
record2	*(struct)
,	O
rec_fex_t	*(struct)
fields	*(struct)
)	O
;	O
rec_rset_t	*(struct)
rec_rset_new	()->(*(struct))
(	O
void	O
)	O
{	O
rec_rset_t	*(struct)
rset	*(struct)
;	O
rset	*(struct)
=	O
malloc	(long)->(*(void))
(	O
sizeof	O
(	O
struct	O
rec_rset_s	struct(*(struct),long,*(struct(*(char),bool,bool,*(struct),*(char),*(struct(*(char),bool,bool,*(struct`),*(char),*(struct`))))),*(struct),*(struct),long,long,*(*(struct)),long,int,int,*(struct))
)	O
)	O
;	O
if	O
(	O
rset	*(struct)
)	O
{	O
rec_rset_init	(*(struct(*(struct),long,*(struct(*`,bool,bool,*`,*`,*`)),*(struct),*(struct),long,long,*(*(struct`)),long,int,int,*(struct))))->(void)
(	O
rset	*(struct)
)	O
;	O
rset	*(struct)
->	O
mset	*(struct)
=	O
rec_mset_new	()->(*(struct))
(	O
)	O
;	O
if	O
(	O
rset	*(struct)
->	O
mset	*(struct)
)	O
{	O
rset	*(struct)
->	O
descriptor	*(struct)
=	O
NULL	O
;	O
rset	*(struct)
->	O
descriptor_pos	long
=	O
0	int
;	O
rset	*(struct)
->	O
min_size	long
=	O
0	int
;	O
rset	*(struct)
->	O
max_size	long
=	O
SIZE_MAX	O
;	O
rset	*(struct)
->	O
constraints	*(*(struct))
=	O
NULL	O
;	O
rset	*(struct)
->	O
num_constraints	long
=	O
0	int
;	O
rset	*(struct)
->	O
type_reg	*(struct)
=	O
rec_type_reg_new	()->(*(struct))
(	O
)	O
;	O
if	O
(	O
!	O
rset	*(struct)
->	O
type_reg	*(struct)
)	O
{	O
rec_rset_destroy	(*(struct))->(void)
(	O
rset	*(struct)
)	O
;	O
return	O
NULL	O
;	O
}	O
rset	*(struct)
->	O
field_props	*(struct(*(char),bool,bool,*(struct),*(char),*(struct(*(char),bool,bool,*(struct`),*(char),*(struct`)))))
=	O
NULL	O
;	O
rset	*(struct)
->	O
order_by_fields	*(struct)
=	O
NULL	O
;	O
rset	*(struct)
->	O
record_type	int
=	O
rec_mset_register_type	(*(struct),*(char),*((*(void))->(void)),*((*(void),*(void))->(bool)),*((*(void))->(*(void))),*((*(void),*(void),int)->(int)))->(int)
(	O
rset	*(struct)
->	O
mset	*(struct)
,	O
"record"	*(char)
,	O
rec_rset_record_disp_fn	(*(void))->(void)
,	O
rec_rset_record_equal_fn	(*(void),*(void))->(bool)
,	O
rec_rset_record_dup_fn	(*(void))->(*(void))
,	O
rec_rset_record_compare_fn	(*(void),*(void),int)->(int)
)	O
;	O
rset	*(struct)
->	O
comment_type	int
=	O
rec_mset_register_type	(*(struct),*(char),*((*(void))->(void)),*((*(void),*(void))->(bool)),*((*(void))->(*(void))),*((*(void),*(void),int)->(int)))->(int)
(	O
rset	*(struct)
->	O
mset	*(struct)
,	O
"comment"	*(char)
,	O
rec_rset_comment_disp_fn	(*(void))->(void)
,	O
rec_rset_comment_equal_fn	(*(void),*(void))->(bool)
,	O
rec_rset_comment_dup_fn	(*(void))->(*(void))
,	O
rec_rset_comment_compare_fn	(*(void),*(void),int)->(int)
)	O
;	O
}	O
else	O
{	O
rec_rset_destroy	(*(struct))->(void)
(	O
rset	*(struct)
)	O
;	O
rset	*(struct)
=	O
NULL	O
;	O
}	O
}	O
return	O
rset	*(struct)
;	O
}	O
void	O
rec_rset_destroy	(*(struct))->(void)
(	O
rec_rset_t	*(struct)
rset	*(struct)
)	O
{	O
rec_rset_fprops_t	*(struct(*(char),bool,bool,*(struct),*(char),*(struct(*(char),bool,bool,*(struct`),*(char),*(struct`)))))
props	*(struct(*(char),bool,bool,*(struct),*(char),*(struct(*(char),bool,bool,*(struct`),*(char),*(struct`)))))
,	O
aux	*(struct(*(char),bool,bool,*(struct),*(char),*(struct(*(char),bool,bool,*(struct`),*(char),*(struct`)))))
=	O
NULL	O
;	O
size_t	long
i	long
=	O
0	int
;	O
if	O
(	O
rset	*(struct)
)	O
{	O
rec_record_destroy	(*(struct))->(void)
(	O
rset	*(struct)
->	O
descriptor	*(struct)
)	O
;	O
rec_type_reg_destroy	(*(struct))->(void)
(	O
rset	*(struct)
->	O
type_reg	*(struct)
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
rset	*(struct)
->	O
num_constraints	long
;	O
i	long
++	O
)	O
{	O
rec_sex_destroy	(*(struct))->(void)
(	O
rset	*(struct)
->	O
constraints	*(*(struct))
[	O
i	long
]	O
)	O
;	O
}	O
free	(*(void))->(void)
(	O
rset	*(struct)
->	O
constraints	*(*(struct))
)	O
;	O
props	*(struct(*(char),bool,bool,*(struct),*(char),*(struct(*(char),bool,bool,*(struct`),*(char),*(struct`)))))
=	O
rset	*(struct)
->	O
field_props	*(struct(*(char),bool,bool,*(struct),*(char),*(struct(*(char),bool,bool,*(struct`),*(char),*(struct`)))))
;	O
while	O
(	O
props	*(struct(*(char),bool,bool,*(struct),*(char),*(struct(*(char),bool,bool,*(struct`),*(char),*(struct`)))))
)	O
{	O
aux	*(struct(*(char),bool,bool,*(struct),*(char),*(struct(*(char),bool,bool,*(struct`),*(char),*(struct`)))))
=	O
props	*(struct(*(char),bool,bool,*(struct),*(char),*(struct(*(char),bool,bool,*(struct`),*(char),*(struct`)))))
;	O
if	O
(	O
aux	*(struct(*(char),bool,bool,*(struct),*(char),*(struct(*(char),bool,bool,*(struct`),*(char),*(struct`)))))
->	O
type	enum(int,int,int,int)
)	O
{	O
rec_type_destroy	(*(struct))->(void)
(	O
aux	*(struct(*(char),bool,bool,*(struct),*(char),*(struct(*(char),bool,bool,*(struct`),*(char),*(struct`)))))
->	O
type	enum(int,int,int,int)
)	O
;	O
}	O
free	(*(void))->(void)
(	O
aux	*(struct(*(char),bool,bool,*(struct),*(char),*(struct(*(char),bool,bool,*(struct`),*(char),*(struct`)))))
->	O
fname	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
aux	*(struct(*(char),bool,bool,*(struct),*(char),*(struct(*(char),bool,bool,*(struct`),*(char),*(struct`)))))
->	O
type_name	*(char)
)	O
;	O
props	*(struct(*(char),bool,bool,*(struct),*(char),*(struct(*(char),bool,bool,*(struct`),*(char),*(struct`)))))
=	O
props	*(struct(*(char),bool,bool,*(struct),*(char),*(struct(*(char),bool,bool,*(struct`),*(char),*(struct`)))))
->	O
next	*(struct(*(char),bool,bool,*(struct),*(char),*(struct(*(char),bool,bool,*(struct`),*(char),*(struct`)))))
;	O
free	(*(void))->(void)
(	O
aux	*(struct(*(char),bool,bool,*(struct),*(char),*(struct(*(char),bool,bool,*(struct`),*(char),*(struct`)))))
)	O
;	O
}	O
rec_fex_destroy	(*(struct))->(void)
(	O
rset	*(struct)
->	O
order_by_fields	*(struct)
)	O
;	O
rec_mset_destroy	(*(struct))->(void)
(	O
rset	*(struct)
->	O
mset	*(struct)
)	O
;	O
free	(*(void))->(void)
(	O
rset	*(struct)
)	O
;	O
}	O
}	O
rec_rset_t	*(struct)
rec_rset_dup	(*(struct))->(*(struct))
(	O
rec_rset_t	*(struct)
rset	*(struct)
)	O
{	O
rec_rset_t	*(struct)
new	*(struct(*(struct),long,*(struct(*(char),bool,bool,*(struct`),*(char),*(struct`))),*(struct),*(struct),long,long,*(*(struct)),long,int,int,*(struct)))
=	O
NULL	O
;	O
new	*(struct(*(struct),long,*(struct(*(char),bool,bool,*(struct`),*(char),*(struct`))),*(struct),*(struct),long,long,*(*(struct)),long,int,int,*(struct)))
=	O
malloc	(long)->(*(void))
(	O
sizeof	O
(	O
struct	O
rec_rset_s	struct(*(struct),long,*(struct(*(char),bool,bool,*(struct),*(char),*(struct(*(char),bool,bool,*(struct`),*(char),*(struct`))))),*(struct),*(struct),long,long,*(*(struct)),long,int,int,*(struct))
)	O
)	O
;	O
if	O
(	O
new	*(struct(*(struct),long,*(struct(*(char),bool,bool,*(struct`),*(char),*(struct`))),*(struct),*(struct),long,long,*(*(struct)),long,int,int,*(struct)))
)	O
{	O
rec_rset_init	(*(struct(*(struct),long,*(struct(*`,bool,bool,*`,*`,*`)),*(struct),*(struct),long,long,*(*(struct`)),long,int,int,*(struct))))->(void)
(	O
new	*(struct(*(struct),long,*(struct(*(char),bool,bool,*(struct`),*(char),*(struct`))),*(struct),*(struct),long,long,*(*(struct)),long,int,int,*(struct)))
)	O
;	O
new	*(struct(*(struct),long,*(struct(*(char),bool,bool,*(struct`),*(char),*(struct`))),*(struct),*(struct),long,long,*(*(struct)),long,int,int,*(struct)))
->	O
record_type	int
=	O
rset	*(struct)
->	O
record_type	int
;	O
new	*(struct(*(struct),long,*(struct(*(char),bool,bool,*(struct`),*(char),*(struct`))),*(struct),*(struct),long,long,*(*(struct)),long,int,int,*(struct)))
->	O
comment_type	int
=	O
rset	*(struct)
->	O
comment_type	int
;	O
new	*(struct(*(struct),long,*(struct(*(char),bool,bool,*(struct`),*(char),*(struct`))),*(struct),*(struct),long,long,*(*(struct)),long,int,int,*(struct)))
->	O
mset	*(struct)
=	O
NULL	O
;	O
new	*(struct(*(struct),long,*(struct(*(char),bool,bool,*(struct`),*(char),*(struct`))),*(struct),*(struct),long,long,*(*(struct)),long,int,int,*(struct)))
->	O
min_size	long
=	O
rset	*(struct)
->	O
min_size	long
;	O
new	*(struct(*(struct),long,*(struct(*(char),bool,bool,*(struct`),*(char),*(struct`))),*(struct),*(struct),long,long,*(*(struct)),long,int,int,*(struct)))
->	O
max_size	long
=	O
rset	*(struct)
->	O
max_size	long
;	O
new	*(struct(*(struct),long,*(struct(*(char),bool,bool,*(struct`),*(char),*(struct`))),*(struct),*(struct),long,long,*(*(struct)),long,int,int,*(struct)))
->	O
type_reg	*(struct)
=	O
NULL	O
;	O
new	*(struct(*(struct),long,*(struct(*(char),bool,bool,*(struct`),*(char),*(struct`))),*(struct),*(struct),long,long,*(*(struct)),long,int,int,*(struct)))
->	O
field_props	*(struct(*(char),bool,bool,*(struct),*(char),*(struct(*(char),bool,bool,*(struct`),*(char),*(struct`)))))
=	O
NULL	O
;	O
new	*(struct(*(struct),long,*(struct(*(char),bool,bool,*(struct`),*(char),*(struct`))),*(struct),*(struct),long,long,*(*(struct)),long,int,int,*(struct)))
->	O
constraints	*(*(struct))
=	O
NULL	O
;	O
new	*(struct(*(struct),long,*(struct(*(char),bool,bool,*(struct`),*(char),*(struct`))),*(struct),*(struct),long,long,*(*(struct)),long,int,int,*(struct)))
->	O
num_constraints	long
=	O
0	int
;	O
if	O
(	O
rset	*(struct)
->	O
order_by_fields	*(struct)
)	O
{	O
new	*(struct(*(struct),long,*(struct(*(char),bool,bool,*(struct`),*(char),*(struct`))),*(struct),*(struct),long,long,*(*(struct)),long,int,int,*(struct)))
->	O
order_by_fields	*(struct)
=	O
rec_fex_dup	(*(struct))->(*(struct))
(	O
rset	*(struct)
->	O
order_by_fields	*(struct)
)	O
;	O
if	O
(	O
!	O
new	*(struct(*(struct),long,*(struct(*(char),bool,bool,*(struct`),*(char),*(struct`))),*(struct),*(struct),long,long,*(*(struct)),long,int,int,*(struct)))
->	O
order_by_fields	*(struct)
)	O
{	O
rec_rset_destroy	(*(struct))->(void)
(	O
new	*(struct(*(struct),long,*(struct(*(char),bool,bool,*(struct`),*(char),*(struct`))),*(struct),*(struct),long,long,*(*(struct)),long,int,int,*(struct)))
)	O
;	O
return	O
NULL	O
;	O
}	O
}	O
}	O
new	*(struct(*(struct),long,*(struct(*(char),bool,bool,*(struct`),*(char),*(struct`))),*(struct),*(struct),long,long,*(*(struct)),long,int,int,*(struct)))
->	O
mset	*(struct)
=	O
rec_mset_dup	(*(struct))->(*(struct))
(	O
rset	*(struct)
->	O
mset	*(struct)
)	O
;	O
if	O
(	O
!	O
new	*(struct(*(struct),long,*(struct(*(char),bool,bool,*(struct`),*(char),*(struct`))),*(struct),*(struct),long,long,*(*(struct)),long,int,int,*(struct)))
->	O
mset	*(struct)
)	O
{	O
rec_rset_destroy	(*(struct))->(void)
(	O
new	*(struct(*(struct),long,*(struct(*(char),bool,bool,*(struct`),*(char),*(struct`))),*(struct),*(struct),long,long,*(*(struct)),long,int,int,*(struct)))
)	O
;	O
return	O
NULL	O
;	O
}	O
return	O
new	*(struct(*(struct),long,*(struct(*(char),bool,bool,*(struct`),*(char),*(struct`))),*(struct),*(struct),long,long,*(*(struct)),long,int,int,*(struct)))
;	O
}	O
rec_mset_t	*(struct)
rec_rset_mset	(*(struct))->(*(struct))
(	O
rec_rset_t	*(struct)
rset	*(struct)
)	O
{	O
return	O
rset	*(struct)
->	O
mset	*(struct)
;	O
}	O
size_t	long
rec_rset_num_elems	(*(struct))->(long)
(	O
rec_rset_t	*(struct)
rset	*(struct)
)	O
{	O
return	O
rec_mset_count	(*(struct),int)->(long)
(	O
rset	*(struct)
->	O
mset	*(struct)
,	O
MSET_ANY	int
)	O
;	O
}	O
size_t	long
rec_rset_num_records	(*(struct))->(long)
(	O
rec_rset_t	*(struct)
rset	*(struct)
)	O
{	O
return	O
rec_mset_count	(*(struct),int)->(long)
(	O
rset	*(struct)
->	O
mset	*(struct)
,	O
rset	*(struct)
->	O
record_type	int
)	O
;	O
}	O
size_t	long
rec_rset_num_comments	(*(struct))->(long)
(	O
rec_rset_t	*(struct)
rset	*(struct)
)	O
{	O
return	O
rec_mset_count	(*(struct),int)->(long)
(	O
rset	*(struct)
->	O
mset	*(struct)
,	O
rset	*(struct)
->	O
comment_type	int
)	O
;	O
}	O
rec_record_t	*(struct)
rec_rset_descriptor	(*(struct))->(*(struct))
(	O
rec_rset_t	*(struct)
rset	*(struct)
)	O
{	O
return	O
rset	*(struct)
->	O
descriptor	*(struct)
;	O
}	O
void	O
rec_rset_set_descriptor	(*(struct),*(struct))->(void)
(	O
rec_rset_t	*(struct)
rset	*(struct)
,	O
rec_record_t	*(struct)
record	*(struct)
)	O
{	O
if	O
(	O
rset	*(struct)
->	O
descriptor	*(struct)
)	O
{	O
rec_record_destroy	(*(struct))->(void)
(	O
rset	*(struct)
->	O
descriptor	*(struct)
)	O
;	O
rset	*(struct)
->	O
descriptor	*(struct)
=	O
NULL	O
;	O
}	O
rset	*(struct)
->	O
descriptor	*(struct)
=	O
record	*(struct)
;	O
rec_rset_update_types	(*(struct(*(struct),long,*(struct(*`,bool,bool,*`,*`,*`)),*(struct),*(struct),long,long,*(*(struct`)),long,int,int,*(struct))))->(void)
(	O
rset	*(struct)
)	O
;	O
rec_rset_update_field_props	(*(struct(*(struct),long,*(struct(*`,bool,bool,*`,*`,*`)),*(struct),*(struct),long,long,*(*(struct`)),long,int,int,*(struct))))->(void)
(	O
rset	*(struct)
)	O
;	O
rec_rset_update_size_constraints	(*(struct(*(struct),long,*(struct(*`,bool,bool,*`,*`,*`)),*(struct),*(struct),long,long,*(*(struct`)),long,int,int,*(struct))))->(void)
(	O
rset	*(struct)
)	O
;	O
rec_rset_update_sex_constraints	(*(struct(*(struct),long,*(struct(*`,bool,bool,*`,*`,*`)),*(struct),*(struct),long,long,*(*(struct`)),long,int,int,*(struct))))->(void)
(	O
rset	*(struct)
)	O
;	O
}	O
size_t	long
rec_rset_descriptor_pos	(*(struct))->(long)
(	O
rec_rset_t	*(struct)
rset	*(struct)
)	O
{	O
return	O
rset	*(struct)
->	O
descriptor_pos	long
;	O
}	O
void	O
rec_rset_set_descriptor_pos	(*(struct),long)->(void)
(	O
rec_rset_t	*(struct)
rset	*(struct)
,	O
size_t	long
position	long
)	O
{	O
rset	*(struct)
->	O
descriptor_pos	long
=	O
position	long
;	O
}	O
void	O
rec_rset_set_type	(*(struct),*(char))->(void)
(	O
rec_rset_t	*(struct)
rset	*(struct)
,	O
const	O
char	O
*	O
type	enum(int,int,int,int)
)	O
{	O
rec_field_t	*(struct)
rec_field	*(struct)
;	O
if	O
(	O
!	O
type	enum(int,int,int,int)
)	O
{	O
return	O
;	O
}	O
if	O
(	O
!	O
rset	*(struct)
->	O
descriptor	*(struct)
)	O
{	O
rset	*(struct)
->	O
descriptor	*(struct)
=	O
rec_record_new	()->(*(struct))
(	O
)	O
;	O
}	O
rec_field	*(struct)
=	O
rec_record_get_field_by_name	(*(struct),*(char),long)->(*(struct))
(	O
rset	*(struct)
->	O
descriptor	*(struct)
,	O
FNAME	O
(	O
REC_FIELD_REC	int
)	O
,	O
0	int
)	O
;	O
if	O
(	O
rec_field	*(struct)
)	O
{	O
rec_field_set_value	(*(struct),*(char))->(bool)
(	O
rec_field	*(struct)
,	O
type	enum(int,int,int,int)
)	O
;	O
}	O
else	O
{	O
rec_field	*(struct)
=	O
rec_field_new	(*(char),*(char))->(*(struct))
(	O
FNAME	O
(	O
REC_FIELD_REC	int
)	O
,	O
type	enum(int,int,int,int)
)	O
;	O
rec_mset_append	(*(struct),int,*(void),int)->(*(struct))
(	O
rec_record_mset	(*(struct))->(*(struct))
(	O
rset	*(struct)
->	O
descriptor	*(struct)
)	O
,	O
MSET_FIELD	int
,	O
(	O
void	O
*	O
)	O
rec_field	*(struct)
,	O
MSET_FIELD	int
)	O
;	O
}	O
}	O
char	O
*	O
rec_rset_type	(*(struct))->(*(char))
(	O
rec_rset_t	*(struct)
rset	*(struct)
)	O
{	O
char	O
*	O
res	*(char)
;	O
rec_field_t	*(struct)
field	*(struct)
;	O
res	*(char)
=	O
NULL	O
;	O
if	O
(	O
rset	*(struct)
->	O
descriptor	*(struct)
)	O
{	O
field	*(struct)
=	O
rec_record_get_field_by_name	(*(struct),*(char),long)->(*(struct))
(	O
rset	*(struct)
->	O
descriptor	*(struct)
,	O
FNAME	O
(	O
REC_FIELD_REC	int
)	O
,	O
0	int
)	O
;	O
if	O
(	O
field	*(struct)
)	O
{	O
res	*(char)
=	O
rec_extract_type	(*(char))->(*(char))
(	O
rec_field_value	(*(struct))->(*(char))
(	O
field	*(struct)
)	O
)	O
;	O
}	O
}	O
return	O
res	*(char)
;	O
}	O
char	O
*	O
rec_rset_url	(*(struct))->(*(char))
(	O
rec_rset_t	*(struct)
rset	*(struct)
)	O
{	O
char	O
*	O
res	*(char)
;	O
rec_field_t	*(struct)
field	*(struct)
;	O
res	*(char)
=	O
NULL	O
;	O
if	O
(	O
rset	*(struct)
->	O
descriptor	*(struct)
)	O
{	O
field	*(struct)
=	O
rec_record_get_field_by_name	(*(struct),*(char),long)->(*(struct))
(	O
rset	*(struct)
->	O
descriptor	*(struct)
,	O
FNAME	O
(	O
REC_FIELD_REC	int
)	O
,	O
0	int
)	O
;	O
if	O
(	O
field	*(struct)
)	O
{	O
res	*(char)
=	O
rec_extract_url	(*(char))->(*(char))
(	O
rec_field_value	(*(struct))->(*(char))
(	O
field	*(struct)
)	O
)	O
;	O
}	O
}	O
return	O
res	*(char)
;	O
}	O
rec_type_reg_t	*(struct)
rec_rset_get_type_reg	(*(struct))->(*(struct))
(	O
rec_rset_t	*(struct)
rset	*(struct)
)	O
{	O
return	O
rset	*(struct)
->	O
type_reg	*(struct)
;	O
}	O
void	O
rec_rset_rename_field	(*(struct),*(char),*(char))->(void)
(	O
rec_rset_t	*(struct)
rset	*(struct)
,	O
const	O
char	O
*	O
field_name	*(char)
,	O
const	O
char	O
*	O
new_field_name	*(char)
)	O
{	O
size_t	long
j	long
;	O
rec_record_t	*(struct)
descriptor	*(struct)
;	O
rec_fex_t	*(struct)
fex	*(struct)
;	O
char	O
*	O
fex_str	*(char)
;	O
char	O
*	O
type_str	*(char)
;	O
rec_buf_t	*(struct)
buf	*(struct)
;	O
char	O
*	O
result	*(*(char))
;	O
size_t	long
result_size	long
;	O
rec_fex_elem_t	*(struct)
fex_elem	*(struct)
;	O
const	O
char	O
*	O
fex_fname	*(char)
;	O
descriptor	*(struct)
=	O
rec_rset_descriptor	(*(struct))->(*(struct))
(	O
rset	*(struct)
)	O
;	O
if	O
(	O
descriptor	*(struct)
)	O
{	O
rec_mset_t	*(struct)
descriptor_mset	*(struct)
=	O
rec_record_mset	(*(struct))->(*(struct))
(	O
descriptor	*(struct)
)	O
;	O
rec_mset_iterator_t	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
iter	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
=	O
rec_mset_iterator	(*(struct))->(struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long)))
(	O
descriptor_mset	*(struct)
)	O
;	O
rec_field_t	*(struct)
field	*(struct)
;	O
while	O
(	O
rec_mset_iterator_next	(*(struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))),int,*(*(void)),*(*(struct)))->(bool)
(	O
&	O
iter	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
,	O
MSET_FIELD	int
,	O
(	O
void	O
*	O
)	O
&	O
field	*(struct)
,	O
NULL	O
)	O
)	O
{	O
if	O
(	O
rec_field_name_equal_p	(*(char),*(char))->(bool)
(	O
rec_field_name	(*(struct))->(*(char))
(	O
field	*(struct)
)	O
,	O
FNAME	O
(	O
REC_FIELD_TYPE	int
)	O
)	O
)	O
{	O
if	O
(	O
!	O
rec_rset_type_field_p	(*(char))->(bool)
(	O
rec_field_value	(*(struct))->(*(char))
(	O
field	*(struct)
)	O
)	O
)	O
{	O
continue	O
;	O
}	O
fex	*(struct)
=	O
rec_rset_type_field_fex	(*(char))->(*(struct))
(	O
rec_field_value	(*(struct))->(*(char))
(	O
field	*(struct)
)	O
)	O
;	O
if	O
(	O
fex	*(struct)
)	O
{	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
rec_fex_size	(*(struct))->(long)
(	O
fex	*(struct)
)	O
;	O
j	long
++	O
)	O
{	O
fex_elem	*(struct)
=	O
rec_fex_get	(*(struct),long)->(*(struct))
(	O
fex	*(struct)
,	O
j	long
)	O
;	O
fex_fname	*(char)
=	O
rec_fex_elem_field_name	(*(struct))->(*(char))
(	O
fex_elem	*(struct)
)	O
;	O
if	O
(	O
rec_field_name_equal_p	(*(char),*(char))->(bool)
(	O
field_name	*(char)
,	O
fex_fname	*(char)
)	O
)	O
{	O
rec_fex_elem_set_field_name	(*(struct),*(char))->(bool)
(	O
fex_elem	*(struct)
,	O
new_field_name	*(char)
)	O
;	O
}	O
}	O
fex_str	*(char)
=	O
rec_fex_str	(*(struct),enum(int,int,int))->(*(char))
(	O
fex	*(struct)
,	O
REC_FEX_CSV	int
)	O
;	O
type_str	*(char)
=	O
rec_rset_type_field_type	(*(char))->(*(char))
(	O
rec_field_value	(*(struct))->(*(char))
(	O
field	*(struct)
)	O
)	O
;	O
buf	*(struct)
=	O
rec_buf_new	(*(*(char)),*(long))->(*(struct))
(	O
&	O
result	*(*(char))
,	O
&	O
result_size	long
)	O
;	O
rec_buf_puts	(*(char),*(struct))->(int)
(	O
fex_str	*(char)
,	O
buf	*(struct)
)	O
;	O
rec_buf_putc	(int,*(struct))->(int)
(	O
' '	O
,	O
buf	*(struct)
)	O
;	O
rec_buf_puts	(*(char),*(struct))->(int)
(	O
type_str	*(char)
,	O
buf	*(struct)
)	O
;	O
rec_buf_close	(*(struct))->(void)
(	O
buf	*(struct)
)	O
;	O
rec_field_set_value	(*(struct),*(char))->(bool)
(	O
field	*(struct)
,	O
result	*(*(char))
)	O
;	O
free	(*(void))->(void)
(	O
fex_str	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
type_str	*(char)
)	O
;	O
rec_fex_destroy	(*(struct))->(void)
(	O
fex	*(struct)
)	O
;	O
}	O
}	O
else	O
if	O
(	O
rec_field_name_equal_p	(*(char),*(char))->(bool)
(	O
rec_field_name	(*(struct))->(*(char))
(	O
field	*(struct)
)	O
,	O
FNAME	O
(	O
REC_FIELD_KEY	int
)	O
)	O
||	O
rec_field_name_equal_p	(*(char),*(char))->(bool)
(	O
rec_field_name	(*(struct))->(*(char))
(	O
field	*(struct)
)	O
,	O
FNAME	O
(	O
REC_FIELD_MANDATORY	int
)	O
)	O
||	O
rec_field_name_equal_p	(*(char),*(char))->(bool)
(	O
rec_field_name	(*(struct))->(*(char))
(	O
field	*(struct)
)	O
,	O
FNAME	O
(	O
REC_FIELD_UNIQUE	int
)	O
)	O
||	O
rec_field_name_equal_p	(*(char),*(char))->(bool)
(	O
rec_field_name	(*(struct))->(*(char))
(	O
field	*(struct)
)	O
,	O
FNAME	O
(	O
REC_FIELD_PROHIBIT	int
)	O
)	O
||	O
rec_field_name_equal_p	(*(char),*(char))->(bool)
(	O
rec_field_name	(*(struct))->(*(char))
(	O
field	*(struct)
)	O
,	O
FNAME	O
(	O
REC_FIELD_SORT	int
)	O
)	O
)	O
{	O
fex	*(struct)
=	O
rec_fex_new	(*(char),enum(int,int,int))->(*(struct))
(	O
rec_field_value	(*(struct))->(*(char))
(	O
field	*(struct)
)	O
,	O
REC_FEX_SIMPLE	int
)	O
;	O
if	O
(	O
fex	*(struct)
)	O
{	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
rec_fex_size	(*(struct))->(long)
(	O
fex	*(struct)
)	O
;	O
j	long
++	O
)	O
{	O
fex_elem	*(struct)
=	O
rec_fex_get	(*(struct),long)->(*(struct))
(	O
fex	*(struct)
,	O
j	long
)	O
;	O
fex_fname	*(char)
=	O
rec_fex_elem_field_name	(*(struct))->(*(char))
(	O
fex_elem	*(struct)
)	O
;	O
if	O
(	O
rec_field_name_equal_p	(*(char),*(char))->(bool)
(	O
field_name	*(char)
,	O
fex_fname	*(char)
)	O
)	O
{	O
rec_fex_elem_set_field_name	(*(struct),*(char))->(bool)
(	O
fex_elem	*(struct)
,	O
new_field_name	*(char)
)	O
;	O
}	O
}	O
fex_str	*(char)
=	O
rec_fex_str	(*(struct),enum(int,int,int))->(*(char))
(	O
fex	*(struct)
,	O
REC_FEX_SIMPLE	int
)	O
;	O
rec_field_set_value	(*(struct),*(char))->(bool)
(	O
field	*(struct)
,	O
fex_str	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
fex_str	*(char)
)	O
;	O
}	O
}	O
}	O
rec_mset_iterator_free	(*(struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))))->(void)
(	O
&	O
iter	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
)	O
;	O
}	O
rec_rset_update_field_props	(*(struct(*(struct),long,*(struct(*`,bool,bool,*`,*`,*`)),*(struct),*(struct),long,long,*(*(struct`)),long,int,int,*(struct))))->(void)
(	O
rset	*(struct)
)	O
;	O
}	O
const	O
char	O
*	O
rec_rset_key	(*(struct))->(*(char))
(	O
rec_rset_t	*(struct)
rset	*(struct)
)	O
{	O
const	O
char	O
*	O
key	*(char)
=	O
NULL	O
;	O
rec_rset_fprops_t	*(struct(*(char),bool,bool,*(struct),*(char),*(struct(*(char),bool,bool,*(struct`),*(char),*(struct`)))))
props	*(struct(*(char),bool,bool,*(struct),*(char),*(struct(*(char),bool,bool,*(struct`),*(char),*(struct`)))))
=	O
rset	*(struct)
->	O
field_props	*(struct(*(char),bool,bool,*(struct),*(char),*(struct(*(char),bool,bool,*(struct`),*(char),*(struct`)))))
;	O
while	O
(	O
props	*(struct(*(char),bool,bool,*(struct),*(char),*(struct(*(char),bool,bool,*(struct`),*(char),*(struct`)))))
)	O
{	O
if	O
(	O
props	*(struct(*(char),bool,bool,*(struct),*(char),*(struct(*(char),bool,bool,*(struct`),*(char),*(struct`)))))
->	O
key_p	bool
)	O
{	O
key	*(char)
=	O
props	*(struct(*(char),bool,bool,*(struct),*(char),*(struct(*(char),bool,bool,*(struct`),*(char),*(struct`)))))
->	O
fname	*(char)
;	O
break	O
;	O
}	O
props	*(struct(*(char),bool,bool,*(struct),*(char),*(struct(*(char),bool,bool,*(struct`),*(char),*(struct`)))))
=	O
props	*(struct(*(char),bool,bool,*(struct),*(char),*(struct(*(char),bool,bool,*(struct`),*(char),*(struct`)))))
->	O
next	*(struct(*(char),bool,bool,*(struct),*(char),*(struct(*(char),bool,bool,*(struct`),*(char),*(struct`)))))
;	O
}	O
return	O
key	*(char)
;	O
}	O
rec_fex_t	*(struct)
rec_rset_auto	(*(struct))->(*(struct))
(	O
rec_rset_t	*(struct)
rset	*(struct)
)	O
{	O
rec_fex_t	*(struct)
fex	*(struct)
;	O
rec_rset_fprops_t	*(struct(*(char),bool,bool,*(struct),*(char),*(struct(*(char),bool,bool,*(struct`),*(char),*(struct`)))))
props	*(struct(*(char),bool,bool,*(struct),*(char),*(struct(*(char),bool,bool,*(struct`),*(char),*(struct`)))))
;	O
fex	*(struct)
=	O
rec_fex_new	(*(char),enum(int,int,int))->(*(struct))
(	O
NULL	O
,	O
REC_FEX_SIMPLE	int
)	O
;	O
props	*(struct(*(char),bool,bool,*(struct),*(char),*(struct(*(char),bool,bool,*(struct`),*(char),*(struct`)))))
=	O
rset	*(struct)
->	O
field_props	*(struct(*(char),bool,bool,*(struct),*(char),*(struct(*(char),bool,bool,*(struct`),*(char),*(struct`)))))
;	O
while	O
(	O
props	*(struct(*(char),bool,bool,*(struct),*(char),*(struct(*(char),bool,bool,*(struct`),*(char),*(struct`)))))
)	O
{	O
if	O
(	O
props	*(struct(*(char),bool,bool,*(struct),*(char),*(struct(*(char),bool,bool,*(struct`),*(char),*(struct`)))))
->	O
auto_p	bool
)	O
{	O
rec_fex_append	(*(struct),*(char),int,int)->(*(struct))
(	O
fex	*(struct)
,	O
props	*(struct(*(char),bool,bool,*(struct),*(char),*(struct(*(char),bool,bool,*(struct`),*(char),*(struct`)))))
->	O
fname	*(char)
,	O
-	O
1	int
,	O
-	O
1	int
)	O
;	O
}	O
props	*(struct(*(char),bool,bool,*(struct),*(char),*(struct(*(char),bool,bool,*(struct`),*(char),*(struct`)))))
=	O
props	*(struct(*(char),bool,bool,*(struct),*(char),*(struct(*(char),bool,bool,*(struct`),*(char),*(struct`)))))
->	O
next	*(struct(*(char),bool,bool,*(struct),*(char),*(struct(*(char),bool,bool,*(struct`),*(char),*(struct`)))))
;	O
}	O
return	O
fex	*(struct)
;	O
}	O
rec_type_t	*(struct)
rec_rset_get_field_type	(*(struct),*(char))->(*(struct))
(	O
rec_rset_t	*(struct)
rset	*(struct)
,	O
const	O
char	O
*	O
field_name	*(char)
)	O
{	O
rec_type_t	*(struct)
type	enum(int,int,int,int)
=	O
NULL	O
;	O
rec_rset_fprops_t	*(struct(*(char),bool,bool,*(struct),*(char),*(struct(*(char),bool,bool,*(struct`),*(char),*(struct`)))))
props	*(struct(*(char),bool,bool,*(struct),*(char),*(struct(*(char),bool,bool,*(struct`),*(char),*(struct`)))))
=	O
NULL	O
;	O
props	*(struct(*(char),bool,bool,*(struct),*(char),*(struct(*(char),bool,bool,*(struct`),*(char),*(struct`)))))
=	O
rec_rset_get_props	(*(struct(*(struct),long,*(struct(*`,bool,bool,*`,*`,*`)),*(struct),*(struct),long,long,*(*(struct`)),long,int,int,*(struct))),*(char),bool)->(*(struct(*(char),bool,bool,*(struct),*(char),*(struct(*`,bool,bool,*`,*`,*`)))))
(	O
rset	*(struct)
,	O
field_name	*(char)
,	O
false	int
)	O
;	O
if	O
(	O
props	*(struct(*(char),bool,bool,*(struct),*(char),*(struct(*(char),bool,bool,*(struct`),*(char),*(struct`)))))
)	O
{	O
type	enum(int,int,int,int)
=	O
props	*(struct(*(char),bool,bool,*(struct),*(char),*(struct(*(char),bool,bool,*(struct`),*(char),*(struct`)))))
->	O
type	enum(int,int,int,int)
;	O
if	O
(	O
!	O
type	enum(int,int,int,int)
&&	O
props	*(struct(*(char),bool,bool,*(struct),*(char),*(struct(*(char),bool,bool,*(struct`),*(char),*(struct`)))))
->	O
type_name	*(char)
)	O
{	O
type	enum(int,int,int,int)
=	O
rec_type_reg_get	(*(struct),*(char))->(*(struct))
(	O
rset	*(struct)
->	O
type_reg	*(struct)
,	O
props	*(struct(*(char),bool,bool,*(struct),*(char),*(struct(*(char),bool,bool,*(struct`),*(char),*(struct`)))))
->	O
type_name	*(char)
)	O
;	O
}	O
}	O
return	O
type	enum(int,int,int,int)
;	O
}	O
size_t	long
rec_rset_min_records	(*(struct))->(long)
(	O
rec_rset_t	*(struct)
rset	*(struct)
)	O
{	O
return	O
rset	*(struct)
->	O
min_size	long
;	O
}	O
size_t	long
rec_rset_max_records	(*(struct))->(long)
(	O
rec_rset_t	*(struct)
rset	*(struct)
)	O
{	O
return	O
rset	*(struct)
->	O
max_size	long
;	O
}	O
char	O
*	O
rec_rset_source	(*(struct))->(*(char))
(	O
rec_rset_t	*(struct)
rset	*(struct)
)	O
{	O
rec_record_t	*(struct)
record	*(struct)
;	O
record	*(struct)
=	O
rec_rset_descriptor	(*(struct))->(*(struct))
(	O
rset	*(struct)
)	O
;	O
if	O
(	O
!	O
record	*(struct)
)	O
{	O
record	*(struct)
=	O
(	O
rec_record_t	*(struct)
)	O
rec_mset_get_at	(*(struct),int,long)->(*(void))
(	O
rset	*(struct)
->	O
mset	*(struct)
,	O
MSET_RECORD	int
,	O
0	int
)	O
;	O
}	O
return	O
rec_record_source	(*(struct))->(*(char))
(	O
record	*(struct)
)	O
;	O
}	O
bool	bool
rec_rset_set_order_by_fields	(*(struct),*(struct))->(bool)
(	O
rec_rset_t	*(struct)
rset	*(struct)
,	O
rec_fex_t	*(struct)
field_names	*(struct)
)	O
{	O
rec_fex_destroy	(*(struct))->(void)
(	O
rset	*(struct)
->	O
order_by_fields	*(struct)
)	O
;	O
rset	*(struct)
->	O
order_by_fields	*(struct)
=	O
rec_fex_dup	(*(struct))->(*(struct))
(	O
field_names	*(struct)
)	O
;	O
return	O
(	O
rset	*(struct)
->	O
order_by_fields	*(struct)
!=	O
NULL	O
)	O
;	O
}	O
rec_fex_t	*(struct)
rec_rset_order_by_fields	(*(struct))->(*(struct))
(	O
rec_rset_t	*(struct)
rset	*(struct)
)	O
{	O
return	O
rset	*(struct)
->	O
order_by_fields	*(struct)
;	O
}	O
rec_rset_t	*(struct)
rec_rset_sort	(*(struct),*(struct))->(*(struct))
(	O
rec_rset_t	*(struct)
rset	*(struct)
,	O
rec_fex_t	*(struct)
sort_by	*(struct)
)	O
{	O
if	O
(	O
sort_by	*(struct)
)	O
{	O
rec_rset_set_order_by_fields	(*(struct),*(struct))->(bool)
(	O
rset	*(struct)
,	O
sort_by	*(struct)
)	O
;	O
}	O
if	O
(	O
rset	*(struct)
->	O
order_by_fields	*(struct)
)	O
{	O
if	O
(	O
!	O
rec_mset_sort	(*(struct))->(*(struct))
(	O
rset	*(struct)
->	O
mset	*(struct)
)	O
)	O
{	O
return	O
NULL	O
;	O
}	O
rec_rset_update_field_props	(*(struct(*(struct),long,*(struct(*`,bool,bool,*`,*`,*`)),*(struct),*(struct),long,long,*(*(struct`)),long,int,int,*(struct))))->(void)
(	O
rset	*(struct)
)	O
;	O
}	O
return	O
rset	*(struct)
;	O
}	O
rec_rset_t	*(struct)
rec_rset_group	(*(struct),*(struct))->(*(struct))
(	O
rec_rset_t	*(struct)
rset	*(struct)
,	O
rec_fex_t	*(struct)
group_by	*(struct)
)	O
{	O
rec_mset_iterator_t	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
iter	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
;	O
rec_record_t	*(struct)
record	*(struct)
;	O
rec_mset_elem_t	*(struct)
elem	*(struct)
;	O
size_t	long
map_size	long
;	O
bool	bool
*	O
deletion_map	*(bool)
;	O
size_t	long
num_record	long
;	O
map_size	long
=	O
sizeof	O
(	O
bool	bool
)	O
*	O
rec_rset_num_records	(*(struct))->(long)
(	O
rset	*(struct)
)	O
;	O
deletion_map	*(bool)
=	O
malloc	(long)->(*(void))
(	O
map_size	long
)	O
;	O
if	O
(	O
!	O
deletion_map	*(bool)
)	O
{	O
return	O
NULL	O
;	O
}	O
memset	(*(void),int,long)->(*(void))
(	O
deletion_map	*(bool)
,	O
false	int
,	O
map_size	long
)	O
;	O
num_record	long
=	O
0	int
;	O
iter	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
=	O
rec_mset_iterator	(*(struct))->(struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long)))
(	O
rec_rset_mset	(*(struct))->(*(struct))
(	O
rset	*(struct)
)	O
)	O
;	O
while	O
(	O
rec_mset_iterator_next	(*(struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))),int,*(*(void)),*(*(struct)))->(bool)
(	O
&	O
iter	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
,	O
MSET_RECORD	int
,	O
(	O
const	O
void	O
*	O
*	O
)	O
&	O
record	*(struct)
,	O
NULL	O
)	O
)	O
{	O
if	O
(	O
!	O
deletion_map	*(bool)
[	O
num_record	long
]	O
)	O
{	O
size_t	long
num_record_2	long
=	O
num_record	long
;	O
rec_mset_iterator_t	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
iter2	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
=	O
iter	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
;	O
rec_record_t	*(struct)
record2	*(struct)
;	O
while	O
(	O
rec_mset_iterator_next	(*(struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))),int,*(*(void)),*(*(struct)))->(bool)
(	O
&	O
iter2	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
,	O
MSET_RECORD	int
,	O
(	O
const	O
void	O
*	O
*	O
)	O
&	O
record2	*(struct)
,	O
NULL	O
)	O
)	O
{	O
num_record_2	long
++	O
;	O
if	O
(	O
rec_rset_compare_typed_records	(*(struct(*(struct),long,*(struct(*`,bool,bool,*`,*`,*`)),*(struct),*(struct),long,long,*(*(struct`)),long,int,int,*(struct))),*(struct),*(struct),*(struct))->(int)
(	O
rset	*(struct)
,	O
record	*(struct)
,	O
record2	*(struct)
,	O
group_by	*(struct)
)	O
!=	O
0	int
)	O
{	O
break	O
;	O
}	O
else	O
{	O
if	O
(	O
!	O
rec_rset_merge_records	(*(struct),*(struct),*(struct))->(*(struct))
(	O
record	*(struct)
,	O
record2	*(struct)
,	O
group_by	*(struct)
)	O
)	O
{	O
return	O
NULL	O
;	O
}	O
deletion_map	*(bool)
[	O
num_record_2	long
]	O
=	O
true	int
;	O
}	O
}	O
}	O
num_record	long
++	O
;	O
}	O
rec_mset_iterator_free	(*(struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))))->(void)
(	O
&	O
iter	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
)	O
;	O
num_record	long
=	O
0	int
;	O
iter	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
=	O
rec_mset_iterator	(*(struct))->(struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long)))
(	O
rec_rset_mset	(*(struct))->(*(struct))
(	O
rset	*(struct)
)	O
)	O
;	O
while	O
(	O
rec_mset_iterator_next	(*(struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))),int,*(*(void)),*(*(struct)))->(bool)
(	O
&	O
iter	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
,	O
MSET_RECORD	int
,	O
(	O
const	O
void	O
*	O
*	O
)	O
&	O
record	*(struct)
,	O
&	O
elem	*(struct)
)	O
)	O
{	O
if	O
(	O
deletion_map	*(bool)
[	O
num_record	long
]	O
)	O
{	O
rec_mset_remove_elem	(*(struct),*(struct))->(bool)
(	O
rec_rset_mset	(*(struct))->(*(struct))
(	O
rset	*(struct)
)	O
,	O
elem	*(struct)
)	O
;	O
}	O
num_record	long
++	O
;	O
}	O
rec_mset_iterator_free	(*(struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))))->(void)
(	O
&	O
iter	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
)	O
;	O
free	(*(void))->(void)
(	O
deletion_map	*(bool)
)	O
;	O
return	O
rset	*(struct)
;	O
}	O
rec_rset_t	*(struct)
rec_rset_add_auto_fields	(*(struct),*(struct))->(*(struct))
(	O
rec_rset_t	*(struct)
rset	*(struct)
,	O
rec_record_t	*(struct)
record	*(struct)
)	O
{	O
rec_fex_t	*(struct)
auto_fields	*(struct)
;	O
rec_type_t	*(struct)
type	enum(int,int,int,int)
;	O
size_t	long
i	long
;	O
if	O
(	O
(	O
auto_fields	*(struct)
=	O
rec_rset_auto	(*(struct))->(*(struct))
(	O
rset	*(struct)
)	O
)	O
)	O
{	O
size_t	long
num_auto_fields	long
=	O
rec_fex_size	(*(struct))->(long)
(	O
auto_fields	*(struct)
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
num_auto_fields	long
;	O
i	long
++	O
)	O
{	O
const	O
char	O
*	O
auto_field_name	*(char)
=	O
rec_fex_elem_field_name	(*(struct))->(*(char))
(	O
rec_fex_get	(*(struct),long)->(*(struct))
(	O
auto_fields	*(struct)
,	O
i	long
)	O
)	O
;	O
if	O
(	O
!	O
rec_record_field_p	(*(struct),*(char))->(bool)
(	O
record	*(struct)
,	O
auto_field_name	*(char)
)	O
)	O
{	O
type	enum(int,int,int,int)
=	O
rec_rset_get_field_type	(*(struct),*(char))->(*(struct))
(	O
rset	*(struct)
,	O
auto_field_name	*(char)
)	O
;	O
if	O
(	O
type	enum(int,int,int,int)
)	O
{	O
switch	O
(	O
rec_type_kind	(*(struct))->(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int))
(	O
type	enum(int,int,int,int)
)	O
)	O
{	O
case	O
REC_TYPE_INT	int
:	O
case	O
REC_TYPE_RANGE	int
:	O
{	O
if	O
(	O
!	O
rec_rset_add_auto_field_int	(*(struct(*(struct),long,*(struct(*`,bool,bool,*`,*`,*`)),*(struct),*(struct),long,long,*(*(struct`)),long,int,int,*(struct))),*(char),*(struct))->(bool)
(	O
rset	*(struct)
,	O
auto_field_name	*(char)
,	O
record	*(struct)
)	O
)	O
{	O
return	O
NULL	O
;	O
}	O
break	O
;	O
}	O
case	O
REC_TYPE_DATE	int
:	O
{	O
if	O
(	O
!	O
rec_rset_add_auto_field_date	(*(struct(*(struct),long,*(struct(*`,bool,bool,*`,*`,*`)),*(struct),*(struct),long,long,*(*(struct`)),long,int,int,*(struct))),*(char),*(struct))->(bool)
(	O
rset	*(struct)
,	O
auto_field_name	*(char)
,	O
record	*(struct)
)	O
)	O
{	O
return	O
NULL	O
;	O
}	O
break	O
;	O
}	O
case	O
REC_TYPE_UUID	int
:	O
{	O
if	O
(	O
!	O
rec_rset_add_auto_field_uuid	(*(struct(*(struct),long,*(struct(*`,bool,bool,*`,*`,*`)),*(struct),*(struct),long,long,*(*(struct`)),long,int,int,*(struct))),*(char),*(struct))->(bool)
(	O
rset	*(struct)
,	O
auto_field_name	*(char)
,	O
record	*(struct)
)	O
)	O
{	O
return	O
NULL	O
;	O
}	O
break	O
;	O
}	O
default	O
:	O
{	O
break	O
;	O
}	O
}	O
}	O
}	O
}	O
}	O
return	O
rset	*(struct)
;	O
}	O
size_t	long
rec_rset_num_sex_constraints	(*(struct))->(long)
(	O
rec_rset_t	*(struct)
rset	*(struct)
)	O
{	O
return	O
rset	*(struct)
->	O
num_constraints	long
;	O
}	O
rec_sex_t	*(struct)
rec_rset_sex_constraint	(*(struct),long)->(*(struct))
(	O
rec_rset_t	*(struct)
rset	*(struct)
,	O
size_t	long
index	(*(char),int)->(*(char))
)	O
{	O
return	O
rset	*(struct)
->	O
constraints	*(*(struct))
[	O
index	(*(char),int)->(*(char))
]	O
;	O
}	O
static	O
void	O
rec_rset_init	(*(struct(*(struct),long,*(struct(*`,bool,bool,*`,*`,*`)),*(struct),*(struct),long,long,*(*(struct`)),long,int,int,*(struct))))->(void)
(	O
rec_rset_t	*(struct)
rset	*(struct)
)	O
{	O
memset	(*(void),int,long)->(*(void))
(	O
rset	*(struct)
,	O
0	int
,	O
sizeof	O
(	O
struct	O
rec_rset_s	struct(*(struct),long,*(struct(*(char),bool,bool,*(struct),*(char),*(struct(*(char),bool,bool,*(struct`),*(char),*(struct`))))),*(struct),*(struct),long,long,*(*(struct)),long,int,int,*(struct))
)	O
)	O
;	O
}	O
static	O
void	O
rec_rset_record_disp_fn	(*(void))->(void)
(	O
void	O
*	O
data	*(void)
)	O
{	O
rec_record_t	*(struct)
record	*(struct)
=	O
(	O
rec_record_t	*(struct)
)	O
data	*(void)
;	O
rec_record_destroy	(*(struct))->(void)
(	O
record	*(struct)
)	O
;	O
}	O
static	O
bool	bool
rec_rset_record_equal_fn	(*(void),*(void))->(bool)
(	O
void	O
*	O
data1	*(void)
,	O
void	O
*	O
data2	*(void)
)	O
{	O
return	O
(	O
data1	*(void)
==	O
data2	*(void)
)	O
;	O
}	O
static	O
void	O
*	O
rec_rset_record_dup_fn	(*(void))->(*(void))
(	O
void	O
*	O
data	*(void)
)	O
{	O
rec_record_t	*(struct)
record	*(struct)
=	O
(	O
rec_record_t	*(struct)
)	O
data	*(void)
;	O
rec_record_t	*(struct)
new	*(struct(*(struct),long,*(struct(*(char),bool,bool,*(struct`),*(char),*(struct`))),*(struct),*(struct),long,long,*(*(struct)),long,int,int,*(struct)))
=	O
rec_record_dup	(*(struct))->(*(struct))
(	O
record	*(struct)
)	O
;	O
return	O
(	O
void	O
*	O
)	O
new	*(struct(*(struct),long,*(struct(*(char),bool,bool,*(struct`),*(char),*(struct`))),*(struct),*(struct),long,long,*(*(struct)),long,int,int,*(struct)))
;	O
}	O
static	O
int	O
rec_rset_record_compare_fn	(*(void),*(void),int)->(int)
(	O
void	O
*	O
data1	*(void)
,	O
void	O
*	O
data2	*(void)
,	O
int	O
type2	int
)	O
{	O
rec_rset_t	*(struct)
rset	*(struct)
=	O
NULL	O
;	O
rec_record_t	*(struct)
record1	*(struct)
=	O
NULL	O
;	O
rec_record_t	*(struct)
record2	*(struct)
=	O
NULL	O
;	O
int	O
type_comparison	int
=	O
0	int
;	O
if	O
(	O
type2	int
==	O
MSET_COMMENT	int
)	O
{	O
return	O
1	int
;	O
}	O
record1	*(struct)
=	O
(	O
rec_record_t	*(struct)
)	O
data1	*(void)
;	O
record2	*(struct)
=	O
(	O
rec_record_t	*(struct)
)	O
data2	*(void)
;	O
rset	*(struct)
=	O
(	O
rec_rset_t	*(struct)
)	O
rec_record_container	(*(struct))->(*(void))
(	O
record1	*(struct)
)	O
;	O
type_comparison	int
=	O
rec_rset_compare_typed_records	(*(struct(*(struct),long,*(struct(*`,bool,bool,*`,*`,*`)),*(struct),*(struct),long,long,*(*(struct`)),long,int,int,*(struct))),*(struct),*(struct),*(struct))->(int)
(	O
rset	*(struct)
,	O
record1	*(struct)
,	O
record2	*(struct)
,	O
rset	*(struct)
->	O
order_by_fields	*(struct)
)	O
;	O
if	O
(	O
type_comparison	int
==	O
0	int
)	O
{	O
type_comparison	int
=	O
-	O
1	int
;	O
}	O
return	O
type_comparison	int
;	O
}	O
static	O
void	O
rec_rset_comment_disp_fn	(*(void))->(void)
(	O
void	O
*	O
data	*(void)
)	O
{	O
rec_comment_t	*(char)
comment	*(char)
=	O
(	O
rec_comment_t	*(char)
)	O
data	*(void)
;	O
rec_comment_destroy	(*(char))->(void)
(	O
comment	*(char)
)	O
;	O
}	O
static	O
bool	bool
rec_rset_comment_equal_fn	(*(void),*(void))->(bool)
(	O
void	O
*	O
data1	*(void)
,	O
void	O
*	O
data2	*(void)
)	O
{	O
return	O
(	O
data1	*(void)
==	O
data2	*(void)
)	O
;	O
}	O
static	O
void	O
*	O
rec_rset_comment_dup_fn	(*(void))->(*(void))
(	O
void	O
*	O
data	*(void)
)	O
{	O
rec_comment_t	*(char)
comment	*(char)
=	O
(	O
rec_comment_t	*(char)
)	O
data	*(void)
;	O
rec_comment_t	*(char)
new	*(struct(*(struct),long,*(struct(*(char),bool,bool,*(struct`),*(char),*(struct`))),*(struct),*(struct),long,long,*(*(struct)),long,int,int,*(struct)))
=	O
rec_comment_dup	(*(char))->(*(char))
(	O
comment	*(char)
)	O
;	O
return	O
(	O
void	O
*	O
)	O
new	*(struct(*(struct),long,*(struct(*(char),bool,bool,*(struct`),*(char),*(struct`))),*(struct),*(struct),long,long,*(*(struct)),long,int,int,*(struct)))
;	O
}	O
static	O
int	O
rec_rset_comment_compare_fn	(*(void),*(void),int)->(int)
(	O
void	O
*	O
data1	*(void)
,	O
void	O
*	O
data2	*(void)
,	O
int	O
type2	int
)	O
{	O
return	O
-	O
1	int
;	O
}	O
static	O
void	O
rec_rset_update_sex_constraints	(*(struct(*(struct),long,*(struct(*`,bool,bool,*`,*`,*`)),*(struct),*(struct),long,long,*(*(struct`)),long,int,int,*(struct))))->(void)
(	O
rec_rset_t	*(struct)
rset	*(struct)
)	O
{	O
{	O
size_t	long
i	long
=	O
0	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
rset	*(struct)
->	O
num_constraints	long
;	O
i	long
++	O
)	O
{	O
rec_sex_destroy	(*(struct))->(void)
(	O
rset	*(struct)
->	O
constraints	*(*(struct))
[	O
i	long
]	O
)	O
;	O
}	O
rset	*(struct)
->	O
num_constraints	long
=	O
0	int
;	O
}	O
if	O
(	O
!	O
rset	*(struct)
->	O
descriptor	*(struct)
)	O
{	O
return	O
;	O
}	O
{	O
size_t	long
num_constraints	long
=	O
rec_record_get_num_fields_by_name	(*(struct),*(char))->(long)
(	O
rset	*(struct)
->	O
descriptor	*(struct)
,	O
FNAME	O
(	O
REC_FIELD_CONSTRAINT	int
)	O
)	O
;	O
rset	*(struct)
->	O
constraints	*(*(struct))
=	O
malloc	(long)->(*(void))
(	O
num_constraints	long
*	O
sizeof	O
(	O
rec_sex_t	*(struct)
)	O
)	O
;	O
if	O
(	O
!	O
rset	*(struct)
->	O
constraints	*(*(struct))
)	O
{	O
return	O
;	O
}	O
}	O
{	O
rec_field_t	*(struct)
field	*(struct)
=	O
NULL	O
;	O
rec_mset_iterator_t	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
iter	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
;	O
iter	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
=	O
rec_mset_iterator	(*(struct))->(struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long)))
(	O
rec_record_mset	(*(struct))->(*(struct))
(	O
rset	*(struct)
->	O
descriptor	*(struct)
)	O
)	O
;	O
while	O
(	O
rec_mset_iterator_next	(*(struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))),int,*(*(void)),*(*(struct)))->(bool)
(	O
&	O
iter	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
,	O
MSET_FIELD	int
,	O
(	O
const	O
void	O
*	O
*	O
)	O
&	O
field	*(struct)
,	O
NULL	O
)	O
)	O
{	O
const	O
char	O
*	O
field_name	*(char)
=	O
rec_field_name	(*(struct))->(*(char))
(	O
field	*(struct)
)	O
;	O
const	O
char	O
*	O
field_value	*(char)
=	O
rec_field_value	(*(struct))->(*(char))
(	O
field	*(struct)
)	O
;	O
if	O
(	O
rec_field_name_equal_p	(*(char),*(char))->(bool)
(	O
field_name	*(char)
,	O
FNAME	O
(	O
REC_FIELD_CONSTRAINT	int
)	O
)	O
)	O
{	O
rec_sex_t	*(struct)
sex	*(struct)
=	O
rec_sex_new	(bool)->(*(struct))
(	O
false	int
)	O
;	O
if	O
(	O
!	O
sex	*(struct)
)	O
{	O
return	O
;	O
}	O
if	O
(	O
rec_sex_compile	(*(struct),*(char))->(bool)
(	O
sex	*(struct)
,	O
field_value	*(char)
)	O
)	O
{	O
rset	*(struct)
->	O
constraints	*(*(struct))
[	O
rset	*(struct)
->	O
num_constraints	long
++	O
]	O
=	O
sex	*(struct)
;	O
}	O
else	O
{	O
rec_sex_destroy	(*(struct))->(void)
(	O
sex	*(struct)
)	O
;	O
}	O
}	O
}	O
rec_mset_iterator_free	(*(struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))))->(void)
(	O
&	O
iter	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
)	O
;	O
}	O
}	O
static	O
void	O
rec_rset_update_size_constraints	(*(struct(*(struct),long,*(struct(*`,bool,bool,*`,*`,*`)),*(struct),*(struct),long,long,*(*(struct`)),long,int,int,*(struct))))->(void)
(	O
rec_rset_t	*(struct)
rset	*(struct)
)	O
{	O
rec_field_t	*(struct)
field	*(struct)
;	O
enum	O
rec_size_condition_e	enum(int,int,int,int,int)
condition	enum(int,int,int,int,int)
;	O
size_t	long
size	*(long)
=	O
0	int
;	O
rset	*(struct)
->	O
min_size	long
=	O
0	int
;	O
rset	*(struct)
->	O
max_size	long
=	O
SIZE_MAX	O
;	O
if	O
(	O
rset	*(struct)
->	O
descriptor	*(struct)
)	O
{	O
field	*(struct)
=	O
rec_record_get_field_by_name	(*(struct),*(char),long)->(*(struct))
(	O
rset	*(struct)
->	O
descriptor	*(struct)
,	O
FNAME	O
(	O
REC_FIELD_SIZE	int
)	O
,	O
0	int
)	O
;	O
if	O
(	O
field	*(struct)
&&	O
rec_match	(*(char),*(char))->(bool)
(	O
rec_field_value	(*(struct))->(*(char))
(	O
field	*(struct)
)	O
,	O
REC_INT_SIZE_RE	O
)	O
)	O
{	O
condition	enum(int,int,int,int,int)
=	O
rec_extract_size_condition	(*(char))->(enum(int,int,int,int,int))
(	O
rec_field_value	(*(struct))->(*(char))
(	O
field	*(struct)
)	O
)	O
;	O
size	*(long)
=	O
rec_extract_size	(*(char))->(long)
(	O
rec_field_value	(*(struct))->(*(char))
(	O
field	*(struct)
)	O
)	O
;	O
switch	O
(	O
condition	enum(int,int,int,int,int)
)	O
{	O
case	O
SIZE_COND_E	int
:	O
{	O
rset	*(struct)
->	O
min_size	long
=	O
size	*(long)
;	O
rset	*(struct)
->	O
max_size	long
=	O
size	*(long)
;	O
break	O
;	O
}	O
case	O
SIZE_COND_L	int
:	O
{	O
rset	*(struct)
->	O
max_size	long
=	O
size	*(long)
-	O
1	int
;	O
break	O
;	O
}	O
case	O
SIZE_COND_LE	int
:	O
{	O
rset	*(struct)
->	O
max_size	long
=	O
size	*(long)
;	O
break	O
;	O
}	O
case	O
SIZE_COND_G	int
:	O
{	O
rset	*(struct)
->	O
min_size	long
=	O
size	*(long)
+	O
1	int
;	O
break	O
;	O
}	O
case	O
SIZE_COND_GE	int
:	O
{	O
rset	*(struct)
->	O
min_size	long
=	O
size	*(long)
;	O
break	O
;	O
}	O
}	O
}	O
}	O
}	O
static	O
void	O
rec_rset_update_field_props	(*(struct(*(struct),long,*(struct(*`,bool,bool,*`,*`,*`)),*(struct),*(struct),long,long,*(*(struct`)),long,int,int,*(struct))))->(void)
(	O
rec_rset_t	*(struct)
rset	*(struct)
)	O
{	O
rec_rset_fprops_t	*(struct(*(char),bool,bool,*(struct),*(char),*(struct(*(char),bool,bool,*(struct`),*(char),*(struct`)))))
props	*(struct(*(char),bool,bool,*(struct),*(char),*(struct(*(char),bool,bool,*(struct`),*(char),*(struct`)))))
=	O
NULL	O
;	O
char	O
*	O
type_name	*(char)
=	O
NULL	O
;	O
props	*(struct(*(char),bool,bool,*(struct),*(char),*(struct(*(char),bool,bool,*(struct`),*(char),*(struct`)))))
=	O
rset	*(struct)
->	O
field_props	*(struct(*(char),bool,bool,*(struct),*(char),*(struct(*(char),bool,bool,*(struct`),*(char),*(struct`)))))
;	O
while	O
(	O
props	*(struct(*(char),bool,bool,*(struct),*(char),*(struct(*(char),bool,bool,*(struct`),*(char),*(struct`)))))
)	O
{	O
props	*(struct(*(char),bool,bool,*(struct),*(char),*(struct(*(char),bool,bool,*(struct`),*(char),*(struct`)))))
->	O
key_p	bool
=	O
false	int
;	O
props	*(struct(*(char),bool,bool,*(struct),*(char),*(struct(*(char),bool,bool,*(struct`),*(char),*(struct`)))))
->	O
auto_p	bool
=	O
false	int
;	O
if	O
(	O
props	*(struct(*(char),bool,bool,*(struct),*(char),*(struct(*(char),bool,bool,*(struct`),*(char),*(struct`)))))
->	O
type	enum(int,int,int,int)
)	O
{	O
rec_type_destroy	(*(struct))->(void)
(	O
props	*(struct(*(char),bool,bool,*(struct),*(char),*(struct(*(char),bool,bool,*(struct`),*(char),*(struct`)))))
->	O
type	enum(int,int,int,int)
)	O
;	O
props	*(struct(*(char),bool,bool,*(struct),*(char),*(struct(*(char),bool,bool,*(struct`),*(char),*(struct`)))))
->	O
type	enum(int,int,int,int)
=	O
NULL	O
;	O
}	O
props	*(struct(*(char),bool,bool,*(struct),*(char),*(struct(*(char),bool,bool,*(struct`),*(char),*(struct`)))))
=	O
props	*(struct(*(char),bool,bool,*(struct),*(char),*(struct(*(char),bool,bool,*(struct`),*(char),*(struct`)))))
->	O
next	*(struct(*(char),bool,bool,*(struct),*(char),*(struct(*(char),bool,bool,*(struct`),*(char),*(struct`)))))
;	O
}	O
if	O
(	O
rset	*(struct)
->	O
descriptor	*(struct)
)	O
{	O
rec_field_t	*(struct)
field	*(struct)
;	O
rec_mset_iterator_t	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
iter	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
;	O
iter	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
=	O
rec_mset_iterator	(*(struct))->(struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long)))
(	O
rec_record_mset	(*(struct))->(*(struct))
(	O
rset	*(struct)
->	O
descriptor	*(struct)
)	O
)	O
;	O
while	O
(	O
rec_mset_iterator_next	(*(struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))),int,*(*(void)),*(*(struct)))->(bool)
(	O
&	O
iter	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
,	O
MSET_FIELD	int
,	O
(	O
const	O
void	O
*	O
*	O
)	O
&	O
field	*(struct)
,	O
NULL	O
)	O
)	O
{	O
const	O
char	O
*	O
field_name	*(char)
=	O
rec_field_name	(*(struct))->(*(char))
(	O
field	*(struct)
)	O
;	O
const	O
char	O
*	O
field_value	*(char)
=	O
rec_field_value	(*(struct))->(*(char))
(	O
field	*(struct)
)	O
;	O
if	O
(	O
rec_field_name_equal_p	(*(char),*(char))->(bool)
(	O
field_name	*(char)
,	O
FNAME	O
(	O
REC_FIELD_TYPE	int
)	O
)	O
&&	O
rec_rset_type_field_p	(*(char))->(bool)
(	O
field_value	*(char)
)	O
)	O
{	O
size_t	long
i	long
;	O
rec_fex_t	*(struct)
fex	*(struct)
=	O
rec_rset_type_field_fex	(*(char))->(*(struct))
(	O
field_value	*(char)
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
rec_fex_size	(*(struct))->(long)
(	O
fex	*(struct)
)	O
;	O
i	long
++	O
)	O
{	O
char	O
*	O
field_type	*(char)
=	O
rec_rset_type_field_type	(*(char))->(*(char))
(	O
field_value	*(char)
)	O
;	O
rec_type_t	*(struct)
type	enum(int,int,int,int)
=	O
rec_type_new	(*(char))->(*(struct))
(	O
field_type	*(char)
)	O
;	O
if	O
(	O
!	O
type	enum(int,int,int,int)
)	O
{	O
const	O
char	O
*	O
p	*(void)
=	O
field_type	*(char)
;	O
rec_parse_regexp	(*(*(char)),*(char),*(*(char)))->(bool)
(	O
&	O
p	*(void)
,	O
"^"	*(char)
REC_TYPE_NAME_RE	*(char)
,	O
&	O
type_name	*(char)
)	O
;	O
props	*(struct(*(char),bool,bool,*(struct),*(char),*(struct(*(char),bool,bool,*(struct`),*(char),*(struct`)))))
=	O
rec_rset_get_props	(*(struct(*(struct),long,*(struct(*`,bool,bool,*`,*`,*`)),*(struct),*(struct),long,long,*(*(struct`)),long,int,int,*(struct))),*(char),bool)->(*(struct(*(char),bool,bool,*(struct),*(char),*(struct(*`,bool,bool,*`,*`,*`)))))
(	O
rset	*(struct)
,	O
rec_fex_elem_field_name	(*(struct))->(*(char))
(	O
rec_fex_get	(*(struct),long)->(*(struct))
(	O
fex	*(struct)
,	O
i	long
)	O
)	O
,	O
true	int
)	O
;	O
if	O
(	O
props	*(struct(*(char),bool,bool,*(struct),*(char),*(struct(*(char),bool,bool,*(struct`),*(char),*(struct`)))))
->	O
type	enum(int,int,int,int)
)	O
{	O
rec_type_destroy	(*(struct))->(void)
(	O
props	*(struct(*(char),bool,bool,*(struct),*(char),*(struct(*(char),bool,bool,*(struct`),*(char),*(struct`)))))
->	O
type	enum(int,int,int,int)
)	O
;	O
props	*(struct(*(char),bool,bool,*(struct),*(char),*(struct(*(char),bool,bool,*(struct`),*(char),*(struct`)))))
->	O
type	enum(int,int,int,int)
=	O
NULL	O
;	O
}	O
free	(*(void))->(void)
(	O
props	*(struct(*(char),bool,bool,*(struct),*(char),*(struct(*(char),bool,bool,*(struct`),*(char),*(struct`)))))
->	O
type_name	*(char)
)	O
;	O
props	*(struct(*(char),bool,bool,*(struct),*(char),*(struct(*(char),bool,bool,*(struct`),*(char),*(struct`)))))
->	O
type_name	*(char)
=	O
type_name	*(char)
;	O
}	O
else	O
{	O
props	*(struct(*(char),bool,bool,*(struct),*(char),*(struct(*(char),bool,bool,*(struct`),*(char),*(struct`)))))
=	O
rec_rset_get_props	(*(struct(*(struct),long,*(struct(*`,bool,bool,*`,*`,*`)),*(struct),*(struct),long,long,*(*(struct`)),long,int,int,*(struct))),*(char),bool)->(*(struct(*(char),bool,bool,*(struct),*(char),*(struct(*`,bool,bool,*`,*`,*`)))))
(	O
rset	*(struct)
,	O
rec_fex_elem_field_name	(*(struct))->(*(char))
(	O
rec_fex_get	(*(struct),long)->(*(struct))
(	O
fex	*(struct)
,	O
i	long
)	O
)	O
,	O
true	int
)	O
;	O
if	O
(	O
props	*(struct(*(char),bool,bool,*(struct),*(char),*(struct(*(char),bool,bool,*(struct`),*(char),*(struct`)))))
->	O
type	enum(int,int,int,int)
)	O
{	O
rec_type_destroy	(*(struct))->(void)
(	O
props	*(struct(*(char),bool,bool,*(struct),*(char),*(struct(*(char),bool,bool,*(struct`),*(char),*(struct`)))))
->	O
type	enum(int,int,int,int)
)	O
;	O
}	O
free	(*(void))->(void)
(	O
props	*(struct(*(char),bool,bool,*(struct),*(char),*(struct(*(char),bool,bool,*(struct`),*(char),*(struct`)))))
->	O
type_name	*(char)
)	O
;	O
props	*(struct(*(char),bool,bool,*(struct),*(char),*(struct(*(char),bool,bool,*(struct`),*(char),*(struct`)))))
->	O
type_name	*(char)
=	O
NULL	O
;	O
props	*(struct(*(char),bool,bool,*(struct),*(char),*(struct(*(char),bool,bool,*(struct`),*(char),*(struct`)))))
->	O
type	enum(int,int,int,int)
=	O
type	enum(int,int,int,int)
;	O
}	O
free	(*(void))->(void)
(	O
field_type	*(char)
)	O
;	O
}	O
rec_fex_destroy	(*(struct))->(void)
(	O
fex	*(struct)
)	O
;	O
}	O
if	O
(	O
rec_field_name_equal_p	(*(char),*(char))->(bool)
(	O
field_name	*(char)
,	O
FNAME	O
(	O
REC_FIELD_KEY	int
)	O
)	O
)	O
{	O
const	O
char	O
*	O
field_value	*(char)
=	O
rec_field_value	(*(struct))->(*(char))
(	O
field	*(struct)
)	O
;	O
char	O
*	O
type_name	*(char)
=	O
NULL	O
;	O
rec_skip_blanks	(*(*(char)))->(void)
(	O
&	O
field_value	*(char)
)	O
;	O
rec_parse_regexp	(*(*(char)),*(char),*(*(char)))->(bool)
(	O
&	O
field_value	*(char)
,	O
"^"	*(char)
REC_RECORD_TYPE_RE	O
,	O
&	O
type_name	*(char)
)	O
;	O
props	*(struct(*(char),bool,bool,*(struct),*(char),*(struct(*(char),bool,bool,*(struct`),*(char),*(struct`)))))
=	O
rec_rset_get_props	(*(struct(*(struct),long,*(struct(*`,bool,bool,*`,*`,*`)),*(struct),*(struct),long,long,*(*(struct`)),long,int,int,*(struct))),*(char),bool)->(*(struct(*(char),bool,bool,*(struct),*(char),*(struct(*`,bool,bool,*`,*`,*`)))))
(	O
rset	*(struct)
,	O
type_name	*(char)
,	O
true	int
)	O
;	O
props	*(struct(*(char),bool,bool,*(struct),*(char),*(struct(*(char),bool,bool,*(struct`),*(char),*(struct`)))))
->	O
key_p	bool
=	O
true	int
;	O
free	(*(void))->(void)
(	O
type_name	*(char)
)	O
;	O
}	O
if	O
(	O
rec_field_name_equal_p	(*(char),*(char))->(bool)
(	O
field_name	*(char)
,	O
FNAME	O
(	O
REC_FIELD_AUTO	int
)	O
)	O
)	O
{	O
rec_fex_t	*(struct)
fex	*(struct)
=	O
rec_fex_new	(*(char),enum(int,int,int))->(*(struct))
(	O
rec_field_value	(*(struct))->(*(char))
(	O
field	*(struct)
)	O
,	O
REC_FEX_SIMPLE	int
)	O
;	O
if	O
(	O
fex	*(struct)
)	O
{	O
size_t	long
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
rec_fex_size	(*(struct))->(long)
(	O
fex	*(struct)
)	O
;	O
i	long
++	O
)	O
{	O
const	O
char	O
*	O
auto_field_name	*(char)
=	O
rec_fex_elem_field_name	(*(struct))->(*(char))
(	O
rec_fex_get	(*(struct),long)->(*(struct))
(	O
fex	*(struct)
,	O
i	long
)	O
)	O
;	O
props	*(struct(*(char),bool,bool,*(struct),*(char),*(struct(*(char),bool,bool,*(struct`),*(char),*(struct`)))))
=	O
rec_rset_get_props	(*(struct(*(struct),long,*(struct(*`,bool,bool,*`,*`,*`)),*(struct),*(struct),long,long,*(*(struct`)),long,int,int,*(struct))),*(char),bool)->(*(struct(*(char),bool,bool,*(struct),*(char),*(struct(*`,bool,bool,*`,*`,*`)))))
(	O
rset	*(struct)
,	O
auto_field_name	*(char)
,	O
true	int
)	O
;	O
props	*(struct(*(char),bool,bool,*(struct),*(char),*(struct(*(char),bool,bool,*(struct`),*(char),*(struct`)))))
->	O
auto_p	bool
=	O
true	int
;	O
}	O
}	O
}	O
if	O
(	O
rec_field_name_equal_p	(*(char),*(char))->(bool)
(	O
field_name	*(char)
,	O
FNAME	O
(	O
REC_FIELD_SORT	int
)	O
)	O
)	O
{	O
const	O
char	O
*	O
field_value	*(char)
=	O
rec_field_value	(*(struct))->(*(char))
(	O
field	*(struct)
)	O
;	O
rec_fex_t	*(struct)
fex	*(struct)
=	O
rec_fex_new	(*(char),enum(int,int,int))->(*(struct))
(	O
field_value	*(char)
,	O
REC_FEX_SIMPLE	int
)	O
;	O
if	O
(	O
fex	*(struct)
)	O
{	O
rec_fex_destroy	(*(struct))->(void)
(	O
rset	*(struct)
->	O
order_by_fields	*(struct)
)	O
;	O
rset	*(struct)
->	O
order_by_fields	*(struct)
=	O
fex	*(struct)
;	O
}	O
}	O
}	O
rec_mset_iterator_free	(*(struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))))->(void)
(	O
&	O
iter	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
)	O
;	O
}	O
props	*(struct(*(char),bool,bool,*(struct),*(char),*(struct(*(char),bool,bool,*(struct`),*(char),*(struct`)))))
=	O
rset	*(struct)
->	O
field_props	*(struct(*(char),bool,bool,*(struct),*(char),*(struct(*(char),bool,bool,*(struct`),*(char),*(struct`)))))
;	O
while	O
(	O
props	*(struct(*(char),bool,bool,*(struct),*(char),*(struct(*(char),bool,bool,*(struct`),*(char),*(struct`)))))
)	O
{	O
if	O
(	O
props	*(struct(*(char),bool,bool,*(struct),*(char),*(struct(*(char),bool,bool,*(struct`),*(char),*(struct`)))))
->	O
auto_p	bool
&&	O
!	O
props	*(struct(*(char),bool,bool,*(struct),*(char),*(struct(*(char),bool,bool,*(struct`),*(char),*(struct`)))))
->	O
type	enum(int,int,int,int)
&&	O
!	O
props	*(struct(*(char),bool,bool,*(struct),*(char),*(struct(*(char),bool,bool,*(struct`),*(char),*(struct`)))))
->	O
type_name	*(char)
)	O
{	O
props	*(struct(*(char),bool,bool,*(struct),*(char),*(struct(*(char),bool,bool,*(struct`),*(char),*(struct`)))))
->	O
type	enum(int,int,int,int)
=	O
rec_type_new	(*(char))->(*(struct))
(	O
"int"	*(char)
)	O
;	O
}	O
props	*(struct(*(char),bool,bool,*(struct),*(char),*(struct(*(char),bool,bool,*(struct`),*(char),*(struct`)))))
=	O
props	*(struct(*(char),bool,bool,*(struct),*(char),*(struct(*(char),bool,bool,*(struct`),*(char),*(struct`)))))
->	O
next	*(struct(*(char),bool,bool,*(struct),*(char),*(struct(*(char),bool,bool,*(struct`),*(char),*(struct`)))))
;	O
}	O
}	O
static	O
void	O
rec_rset_update_types	(*(struct(*(struct),long,*(struct(*`,bool,bool,*`,*`,*`)),*(struct),*(struct),long,long,*(*(struct`)),long,int,int,*(struct))))->(void)
(	O
rec_rset_t	*(struct)
rset	*(struct)
)	O
{	O
rec_field_t	*(struct)
field	*(struct)
;	O
rec_mset_iterator_t	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
iter	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
;	O
const	O
char	O
*	O
p	*(void)
,	O
*	O
q	*(void)
=	O
NULL	O
;	O
rec_type_t	*(struct)
type	enum(int,int,int,int)
;	O
char	O
*	O
type_name	*(char)
,	O
*	O
to_type	*(char)
=	O
NULL	O
;	O
if	O
(	O
rset	*(struct)
->	O
descriptor	*(struct)
)	O
{	O
rec_type_reg_destroy	(*(struct))->(void)
(	O
rset	*(struct)
->	O
type_reg	*(struct)
)	O
;	O
rset	*(struct)
->	O
type_reg	*(struct)
=	O
rec_type_reg_new	()->(*(struct))
(	O
)	O
;	O
iter	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
=	O
rec_mset_iterator	(*(struct))->(struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long)))
(	O
rec_record_mset	(*(struct))->(*(struct))
(	O
rset	*(struct)
->	O
descriptor	*(struct)
)	O
)	O
;	O
while	O
(	O
rec_mset_iterator_next	(*(struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))),int,*(*(void)),*(*(struct)))->(bool)
(	O
&	O
iter	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
,	O
MSET_FIELD	int
,	O
(	O
const	O
void	O
*	O
*	O
)	O
&	O
field	*(struct)
,	O
NULL	O
)	O
)	O
{	O
const	O
char	O
*	O
field_name	*(char)
=	O
rec_field_name	(*(struct))->(*(char))
(	O
field	*(struct)
)	O
;	O
const	O
char	O
*	O
field_value	*(char)
=	O
rec_field_value	(*(struct))->(*(char))
(	O
field	*(struct)
)	O
;	O
if	O
(	O
rec_field_name_equal_p	(*(char),*(char))->(bool)
(	O
field_name	*(char)
,	O
FNAME	O
(	O
REC_FIELD_TYPEDEF	int
)	O
)	O
)	O
{	O
p	*(void)
=	O
field_value	*(char)
;	O
rec_skip_blanks	(*(*(char)))->(void)
(	O
&	O
p	*(void)
)	O
;	O
if	O
(	O
rec_parse_regexp	(*(*(char)),*(char),*(*(char)))->(bool)
(	O
&	O
p	*(void)
,	O
"^"	*(char)
REC_TYPE_NAME_RE	*(char)
,	O
&	O
type_name	*(char)
)	O
)	O
{	O
type	enum(int,int,int,int)
=	O
rec_type_new	(*(char))->(*(struct))
(	O
p	*(void)
)	O
;	O
if	O
(	O
type	enum(int,int,int,int)
)	O
{	O
rec_type_set_name	(*(struct),*(char))->(void)
(	O
type	enum(int,int,int,int)
,	O
type_name	*(char)
)	O
;	O
rec_type_reg_add	(*(struct),*(struct))->(void)
(	O
rset	*(struct)
->	O
type_reg	*(struct)
,	O
type	enum(int,int,int,int)
)	O
;	O
}	O
else	O
{	O
rec_skip_blanks	(*(*(char)))->(void)
(	O
&	O
p	*(void)
)	O
;	O
q	*(void)
=	O
p	*(void)
;	O
if	O
(	O
rec_parse_regexp	(*(*(char)),*(char),*(*(char)))->(bool)
(	O
&	O
q	*(void)
,	O
"^"	*(char)
REC_TYPE_NAME_RE	*(char)
"[ \t\n]*"	*(char)
,	O
NULL	O
)	O
)	O
{	O
rec_parse_regexp	(*(*(char)),*(char),*(*(char)))->(bool)
(	O
&	O
p	*(void)
,	O
"^"	*(char)
REC_TYPE_NAME_RE	*(char)
,	O
&	O
to_type	*(char)
)	O
;	O
rec_type_reg_add_synonym	(*(struct),*(char),*(char))->(void)
(	O
rset	*(struct)
->	O
type_reg	*(struct)
,	O
type_name	*(char)
,	O
to_type	*(char)
)	O
;	O
}	O
}	O
free	(*(void))->(void)
(	O
type_name	*(char)
)	O
;	O
}	O
}	O
}	O
rec_mset_iterator_free	(*(struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))))->(void)
(	O
&	O
iter	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
)	O
;	O
}	O
}	O
static	O
bool	bool
rec_rset_type_field_p	(*(char))->(bool)
(	O
const	O
char	O
*	O
str	*(char)
)	O
{	O
const	O
char	O
*	O
p	*(void)
=	O
str	*(char)
;	O
rec_skip_blanks	(*(*(char)))->(void)
(	O
&	O
p	*(void)
)	O
;	O
if	O
(	O
!	O
rec_parse_regexp	(*(*(char)),*(char),*(*(char)))->(bool)
(	O
&	O
p	*(void)
,	O
"^"	*(char)
REC_FNAME_LIST_CS_RE	O
,	O
NULL	O
)	O
)	O
{	O
return	O
false	int
;	O
}	O
rec_skip_blanks	(*(*(char)))->(void)
(	O
&	O
p	*(void)
)	O
;	O
return	O
(	O
rec_type_descr_p	(*(char))->(bool)
(	O
p	*(void)
)	O
||	O
rec_parse_regexp	(*(*(char)),*(char),*(*(char)))->(bool)
(	O
&	O
p	*(void)
,	O
"^"	*(char)
REC_TYPE_NAME_RE	*(char)
"[ \t\n]*$"	*(char)
,	O
NULL	O
)	O
)	O
;	O
}	O
static	O
rec_fex_t	*(struct)
rec_rset_type_field_fex	(*(char))->(*(struct))
(	O
const	O
char	O
*	O
str	*(char)
)	O
{	O
rec_fex_t	*(struct)
fex	*(struct)
=	O
NULL	O
;	O
const	O
char	O
*	O
p	*(void)
;	O
char	O
*	O
name	*(char)
;	O
p	*(void)
=	O
str	*(char)
;	O
if	O
(	O
rec_parse_regexp	(*(*(char)),*(char),*(*(char)))->(bool)
(	O
&	O
p	*(void)
,	O
"^"	*(char)
REC_FNAME_LIST_CS_RE	O
,	O
&	O
name	*(char)
)	O
)	O
{	O
fex	*(struct)
=	O
rec_fex_new	(*(char),enum(int,int,int))->(*(struct))
(	O
name	*(char)
,	O
REC_FEX_CSV	int
)	O
;	O
free	(*(void))->(void)
(	O
name	*(char)
)	O
;	O
}	O
return	O
fex	*(struct)
;	O
}	O
static	O
char	O
*	O
rec_rset_type_field_type	(*(char))->(*(char))
(	O
const	O
char	O
*	O
str	*(char)
)	O
{	O
char	O
*	O
result	*(*(char))
=	O
NULL	O
;	O
const	O
char	O
*	O
p	*(void)
;	O
if	O
(	O
rec_rset_type_field_p	(*(char))->(bool)
(	O
str	*(char)
)	O
)	O
{	O
p	*(void)
=	O
str	*(char)
;	O
rec_skip_blanks	(*(*(char)))->(void)
(	O
&	O
p	*(void)
)	O
;	O
rec_parse_regexp	(*(*(char)),*(char),*(*(char)))->(bool)
(	O
&	O
p	*(void)
,	O
"^"	*(char)
REC_FNAME_LIST_CS_RE	O
,	O
NULL	O
)	O
;	O
rec_skip_blanks	(*(*(char)))->(void)
(	O
&	O
p	*(void)
)	O
;	O
result	*(*(char))
=	O
strdup	(*(char))->(*(char))
(	O
p	*(void)
)	O
;	O
}	O
return	O
result	*(*(char))
;	O
}	O
static	O
rec_rset_fprops_t	*(struct(*(char),bool,bool,*(struct),*(char),*(struct(*(char),bool,bool,*(struct`),*(char),*(struct`)))))
rec_rset_get_props	(*(struct(*(struct),long,*(struct(*`,bool,bool,*`,*`,*`)),*(struct),*(struct),long,long,*(*(struct`)),long,int,int,*(struct))),*(char),bool)->(*(struct(*(char),bool,bool,*(struct),*(char),*(struct(*`,bool,bool,*`,*`,*`)))))
(	O
rec_rset_t	*(struct)
rset	*(struct)
,	O
const	O
char	O
*	O
fname	*(char)
,	O
bool	bool
create_p	bool
)	O
{	O
rec_rset_fprops_t	*(struct(*(char),bool,bool,*(struct),*(char),*(struct(*(char),bool,bool,*(struct`),*(char),*(struct`)))))
props	*(struct(*(char),bool,bool,*(struct),*(char),*(struct(*(char),bool,bool,*(struct`),*(char),*(struct`)))))
=	O
NULL	O
;	O
props	*(struct(*(char),bool,bool,*(struct),*(char),*(struct(*(char),bool,bool,*(struct`),*(char),*(struct`)))))
=	O
rset	*(struct)
->	O
field_props	*(struct(*(char),bool,bool,*(struct),*(char),*(struct(*(char),bool,bool,*(struct`),*(char),*(struct`)))))
;	O
while	O
(	O
props	*(struct(*(char),bool,bool,*(struct),*(char),*(struct(*(char),bool,bool,*(struct`),*(char),*(struct`)))))
)	O
{	O
if	O
(	O
rec_field_name_equal_p	(*(char),*(char))->(bool)
(	O
fname	*(char)
,	O
props	*(struct(*(char),bool,bool,*(struct),*(char),*(struct(*(char),bool,bool,*(struct`),*(char),*(struct`)))))
->	O
fname	*(char)
)	O
)	O
{	O
break	O
;	O
}	O
props	*(struct(*(char),bool,bool,*(struct),*(char),*(struct(*(char),bool,bool,*(struct`),*(char),*(struct`)))))
=	O
props	*(struct(*(char),bool,bool,*(struct),*(char),*(struct(*(char),bool,bool,*(struct`),*(char),*(struct`)))))
->	O
next	*(struct(*(char),bool,bool,*(struct),*(char),*(struct(*(char),bool,bool,*(struct`),*(char),*(struct`)))))
;	O
}	O
if	O
(	O
!	O
props	*(struct(*(char),bool,bool,*(struct),*(char),*(struct(*(char),bool,bool,*(struct`),*(char),*(struct`)))))
&&	O
create_p	bool
)	O
{	O
props	*(struct(*(char),bool,bool,*(struct),*(char),*(struct(*(char),bool,bool,*(struct`),*(char),*(struct`)))))
=	O
malloc	(long)->(*(void))
(	O
sizeof	O
(	O
struct	O
rec_rset_fprops_s	struct(*(char),bool,bool,*(struct),*(char),*(struct(*(char),bool,bool,*(struct),*(char),*(struct(*(char),bool,bool,*(struct`),*(char),*(struct`))))))
)	O
)	O
;	O
if	O
(	O
props	*(struct(*(char),bool,bool,*(struct),*(char),*(struct(*(char),bool,bool,*(struct`),*(char),*(struct`)))))
)	O
{	O
props	*(struct(*(char),bool,bool,*(struct),*(char),*(struct(*(char),bool,bool,*(struct`),*(char),*(struct`)))))
->	O
fname	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
fname	*(char)
)	O
;	O
props	*(struct(*(char),bool,bool,*(struct),*(char),*(struct(*(char),bool,bool,*(struct`),*(char),*(struct`)))))
->	O
auto_p	bool
=	O
false	int
;	O
props	*(struct(*(char),bool,bool,*(struct),*(char),*(struct(*(char),bool,bool,*(struct`),*(char),*(struct`)))))
->	O
key_p	bool
=	O
false	int
;	O
props	*(struct(*(char),bool,bool,*(struct),*(char),*(struct(*(char),bool,bool,*(struct`),*(char),*(struct`)))))
->	O
type	enum(int,int,int,int)
=	O
NULL	O
;	O
props	*(struct(*(char),bool,bool,*(struct),*(char),*(struct(*(char),bool,bool,*(struct`),*(char),*(struct`)))))
->	O
type_name	*(char)
=	O
NULL	O
;	O
props	*(struct(*(char),bool,bool,*(struct),*(char),*(struct(*(char),bool,bool,*(struct`),*(char),*(struct`)))))
->	O
next	*(struct(*(char),bool,bool,*(struct),*(char),*(struct(*(char),bool,bool,*(struct`),*(char),*(struct`)))))
=	O
rset	*(struct)
->	O
field_props	*(struct(*(char),bool,bool,*(struct),*(char),*(struct(*(char),bool,bool,*(struct`),*(char),*(struct`)))))
;	O
rset	*(struct)
->	O
field_props	*(struct(*(char),bool,bool,*(struct),*(char),*(struct(*(char),bool,bool,*(struct`),*(char),*(struct`)))))
=	O
props	*(struct(*(char),bool,bool,*(struct),*(char),*(struct(*(char),bool,bool,*(struct`),*(char),*(struct`)))))
;	O
}	O
}	O
return	O
props	*(struct(*(char),bool,bool,*(struct),*(char),*(struct(*(char),bool,bool,*(struct`),*(char),*(struct`)))))
;	O
}	O
static	O
bool	bool
rec_rset_add_auto_field_int	(*(struct(*(struct),long,*(struct(*`,bool,bool,*`,*`,*`)),*(struct),*(struct),long,long,*(*(struct`)),long,int,int,*(struct))),*(char),*(struct))->(bool)
(	O
rec_rset_t	*(struct)
rset	*(struct)
,	O
const	O
char	O
*	O
field_name	*(char)
,	O
rec_record_t	*(struct)
record	*(struct)
)	O
{	O
rec_mset_iterator_t	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
iter	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
;	O
rec_record_t	*(struct)
rec	*(struct)
;	O
rec_field_t	*(struct)
field	*(struct)
;	O
size_t	long
num_fields	long
,	O
i	long
;	O
int	O
auto_value	int
,	O
field_value	*(char)
;	O
char	O
*	O
end	*(char)
;	O
char	O
*	O
auto_value_str	*(char)
;	O
auto_value	int
=	O
0	int
;	O
iter	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
=	O
rec_mset_iterator	(*(struct))->(struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long)))
(	O
rec_rset_mset	(*(struct))->(*(struct))
(	O
rset	*(struct)
)	O
)	O
;	O
while	O
(	O
rec_mset_iterator_next	(*(struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))),int,*(*(void)),*(*(struct)))->(bool)
(	O
&	O
iter	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
,	O
MSET_RECORD	int
,	O
(	O
const	O
void	O
*	O
*	O
)	O
&	O
rec	*(struct)
,	O
NULL	O
)	O
)	O
{	O
num_fields	long
=	O
rec_record_get_num_fields_by_name	(*(struct),*(char))->(long)
(	O
rec	*(struct)
,	O
field_name	*(char)
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
num_fields	long
;	O
i	long
++	O
)	O
{	O
field	*(struct)
=	O
rec_record_get_field_by_name	(*(struct),*(char),long)->(*(struct))
(	O
rec	*(struct)
,	O
field_name	*(char)
,	O
i	long
)	O
;	O
errno	O
=	O
0	int
;	O
field_value	*(char)
=	O
strtol	(*(char),*(*(char)),int)->(long)
(	O
rec_field_value	(*(struct))->(*(char))
(	O
field	*(struct)
)	O
,	O
&	O
end	*(char)
,	O
10	int
)	O
;	O
if	O
(	O
(	O
errno	O
==	O
0	int
)	O
&&	O
(	O
*	O
end	*(char)
==	O
'\0'	O
)	O
)	O
{	O
if	O
(	O
auto_value	int
<=	O
field_value	*(char)
)	O
{	O
auto_value	int
=	O
field_value	*(char)
+	O
1	int
;	O
}	O
}	O
}	O
}	O
rec_mset_iterator_free	(*(struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))))->(void)
(	O
&	O
iter	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
)	O
;	O
if	O
(	O
asprintf	(*(*(char)),*(char))->(int)
(	O
&	O
auto_value_str	*(char)
,	O
"%d"	*(char)
,	O
auto_value	int
)	O
!=	O
-	O
1	int
)	O
{	O
field	*(struct)
=	O
rec_field_new	(*(char),*(char))->(*(struct))
(	O
field_name	*(char)
,	O
auto_value_str	*(char)
)	O
;	O
if	O
(	O
!	O
field	*(struct)
)	O
{	O
free	(*(void))->(void)
(	O
auto_value_str	*(char)
)	O
;	O
return	O
false	int
;	O
}	O
if	O
(	O
!	O
rec_mset_insert_at	(*(struct),int,*(void),long)->(*(struct))
(	O
rec_record_mset	(*(struct))->(*(struct))
(	O
record	*(struct)
)	O
,	O
MSET_FIELD	int
,	O
(	O
void	O
*	O
)	O
field	*(struct)
,	O
0	int
)	O
)	O
{	O
free	(*(void))->(void)
(	O
auto_value_str	*(char)
)	O
;	O
return	O
false	int
;	O
}	O
free	(*(void))->(void)
(	O
auto_value_str	*(char)
)	O
;	O
}	O
return	O
true	int
;	O
}	O
static	O
bool	bool
rec_rset_add_auto_field_date	(*(struct(*(struct),long,*(struct(*`,bool,bool,*`,*`,*`)),*(struct),*(struct),long,long,*(*(struct`)),long,int,int,*(struct))),*(char),*(struct))->(bool)
(	O
rec_rset_t	*(struct)
rset	*(struct)
,	O
const	O
char	O
*	O
field_name	*(char)
,	O
rec_record_t	*(struct)
record	*(struct)
)	O
{	O
rec_field_t	*(struct)
auto_field	*(struct)
;	O
time_t	long
t	long
;	O
char	O
outstr	array(char)
[	O
200	int
]	O
;	O
struct	O
tm	struct(int,int,int,int,int,int,int,int,int,long,*(char))
*	O
tmp	*(struct(int,int,int,int,int,int,int,int,int,long,*(char)))
;	O
t	long
=	O
time	struct(long,long)
(	O
NULL	O
)	O
;	O
tmp	*(struct(int,int,int,int,int,int,int,int,int,long,*(char)))
=	O
localtime	(*(long))->(*(struct(int,int,int,int,int,int,int,int,int,long,*(char))))
(	O
&	O
t	long
)	O
;	O
setlocale	(int,*(char))->(*(char))
(	O
LC_TIME	O
,	O
"C"	*(char)
)	O
;	O
strftime	(*(char),long,*(char),*(struct(int,int,int,int,int,int,int,int,int,long,*(char))))->(long)
(	O
outstr	array(char)
,	O
sizeof	O
(	O
outstr	array(char)
)	O
,	O
"%a, %d %b %Y %T %z"	*(char)
,	O
tmp	*(struct(int,int,int,int,int,int,int,int,int,long,*(char)))
)	O
;	O
setlocale	(int,*(char))->(*(char))
(	O
LC_TIME	O
,	O
""	*(char)
)	O
;	O
auto_field	*(struct)
=	O
rec_field_new	(*(char),*(char))->(*(struct))
(	O
field_name	*(char)
,	O
outstr	array(char)
)	O
;	O
if	O
(	O
!	O
auto_field	*(struct)
)	O
{	O
return	O
false	int
;	O
}	O
if	O
(	O
!	O
rec_mset_insert_at	(*(struct),int,*(void),long)->(*(struct))
(	O
rec_record_mset	(*(struct))->(*(struct))
(	O
record	*(struct)
)	O
,	O
MSET_FIELD	int
,	O
(	O
void	O
*	O
)	O
auto_field	*(struct)
,	O
0	int
)	O
)	O
{	O
return	O
false	int
;	O
}	O
return	O
true	int
;	O
}	O
static	O
bool	bool
rec_rset_add_auto_field_uuid	(*(struct(*(struct),long,*(struct(*`,bool,bool,*`,*`,*`)),*(struct),*(struct),long,long,*(*(struct`)),long,int,int,*(struct))),*(char),*(struct))->(bool)
(	O
rec_rset_t	*(struct)
rset	*(struct)
,	O
const	O
char	O
*	O
field_name	*(char)
,	O
rec_record_t	*(struct)
record	*(struct)
)	O
{	O
rec_field_t	*(struct)
auto_field	*(struct)
;	O
uuid_t	array(char)
uu	array(char)
;	O
char	O
uu_str	array(char)
[	O
40	int
]	O
;	O
uuid_generate_time	(array(char))->(void)
(	O
uu	array(char)
)	O
;	O
uuid_unparse	(array(char),*(char))->(void)
(	O
uu	array(char)
,	O
uu_str	array(char)
)	O
;	O
auto_field	*(struct)
=	O
rec_field_new	(*(char),*(char))->(*(struct))
(	O
field_name	*(char)
,	O
uu_str	array(char)
)	O
;	O
if	O
(	O
!	O
auto_field	*(struct)
)	O
{	O
return	O
false	int
;	O
}	O
if	O
(	O
!	O
rec_mset_insert_at	(*(struct),int,*(void),long)->(*(struct))
(	O
rec_record_mset	(*(struct))->(*(struct))
(	O
record	*(struct)
)	O
,	O
MSET_FIELD	int
,	O
(	O
void	O
*	O
)	O
auto_field	*(struct)
,	O
0	int
)	O
)	O
{	O
return	O
false	int
;	O
}	O
return	O
true	int
;	O
}	O
static	O
rec_record_t	*(struct)
rec_rset_merge_records	(*(struct),*(struct),*(struct))->(*(struct))
(	O
rec_record_t	*(struct)
to_record	*(struct)
,	O
rec_record_t	*(struct)
from_record	*(struct)
,	O
rec_fex_t	*(struct)
group_by_fields	*(struct)
)	O
{	O
rec_mset_elem_t	*(struct)
elem	*(struct)
;	O
void	O
*	O
data	*(void)
;	O
rec_mset_iterator_t	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
iter	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
;	O
iter	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
=	O
rec_mset_iterator	(*(struct))->(struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long)))
(	O
rec_record_mset	(*(struct))->(*(struct))
(	O
from_record	*(struct)
)	O
)	O
;	O
while	O
(	O
rec_mset_iterator_next	(*(struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))),int,*(*(void)),*(*(struct)))->(bool)
(	O
&	O
iter	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
,	O
MSET_ANY	int
,	O
(	O
const	O
void	O
*	O
*	O
)	O
&	O
data	*(void)
,	O
&	O
elem	*(struct)
)	O
)	O
{	O
if	O
(	O
rec_mset_elem_type	(*(struct))->(int)
(	O
elem	*(struct)
)	O
==	O
MSET_FIELD	int
)	O
{	O
rec_field_t	*(struct)
field	*(struct)
=	O
(	O
rec_field_t	*(struct)
)	O
data	*(void)
;	O
if	O
(	O
rec_fex_member_p	(*(struct),*(char),int,int)->(bool)
(	O
group_by_fields	*(struct)
,	O
rec_field_name	(*(struct))->(*(char))
(	O
field	*(struct)
)	O
,	O
-	O
1	int
,	O
-	O
1	int
)	O
)	O
{	O
continue	O
;	O
}	O
if	O
(	O
!	O
rec_mset_append	(*(struct),int,*(void),int)->(*(struct))
(	O
rec_record_mset	(*(struct))->(*(struct))
(	O
to_record	*(struct)
)	O
,	O
MSET_FIELD	int
,	O
(	O
void	O
*	O
)	O
rec_field_dup	(*(struct))->(*(struct))
(	O
field	*(struct)
)	O
,	O
MSET_ANY	int
)	O
)	O
{	O
return	O
NULL	O
;	O
}	O
}	O
else	O
{	O
rec_comment_t	*(char)
comment	*(char)
=	O
(	O
rec_comment_t	*(char)
)	O
data	*(void)
;	O
rec_mset_append	(*(struct),int,*(void),int)->(*(struct))
(	O
rec_record_mset	(*(struct))->(*(struct))
(	O
to_record	*(struct)
)	O
,	O
MSET_COMMENT	int
,	O
(	O
void	O
*	O
)	O
rec_comment_dup	(*(char))->(*(char))
(	O
comment	*(char)
)	O
,	O
MSET_ANY	int
)	O
;	O
}	O
}	O
rec_mset_iterator_free	(*(struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))))->(void)
(	O
&	O
iter	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
)	O
;	O
return	O
to_record	*(struct)
;	O
}	O
static	O
int	O
rec_rset_compare_typed_records	(*(struct(*(struct),long,*(struct(*`,bool,bool,*`,*`,*`)),*(struct),*(struct),long,long,*(*(struct`)),long,int,int,*(struct))),*(struct),*(struct),*(struct))->(int)
(	O
rec_rset_t	*(struct)
rset	*(struct)
,	O
rec_record_t	*(struct)
record1	*(struct)
,	O
rec_record_t	*(struct)
record2	*(struct)
,	O
rec_fex_t	*(struct)
fields	*(struct)
)	O
{	O
int	O
result	*(*(char))
=	O
0	int
;	O
size_t	long
i	long
=	O
0	int
;	O
size_t	long
num_fields	long
=	O
rec_fex_size	(*(struct))->(long)
(	O
fields	*(struct)
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
num_fields	long
;	O
i	long
++	O
)	O
{	O
rec_fex_elem_t	*(struct)
elem	*(struct)
=	O
rec_fex_get	(*(struct),long)->(*(struct))
(	O
fields	*(struct)
,	O
i	long
)	O
;	O
const	O
char	O
*	O
field_name	*(char)
=	O
rec_fex_elem_field_name	(*(struct))->(*(char))
(	O
elem	*(struct)
)	O
;	O
rec_field_t	*(struct)
field1	*(struct)
=	O
rec_record_get_field_by_name	(*(struct),*(char),long)->(*(struct))
(	O
record1	*(struct)
,	O
field_name	*(char)
,	O
0	int
)	O
;	O
rec_field_t	*(struct)
field2	*(struct)
=	O
rec_record_get_field_by_name	(*(struct),*(char),long)->(*(struct))
(	O
record2	*(struct)
,	O
field_name	*(char)
,	O
0	int
)	O
;	O
if	O
(	O
field1	*(struct)
&&	O
!	O
field2	*(struct)
)	O
{	O
result	*(*(char))
=	O
1	int
;	O
break	O
;	O
}	O
else	O
if	O
(	O
!	O
field1	*(struct)
&&	O
field2	*(struct)
)	O
{	O
result	*(*(char))
=	O
-	O
1	int
;	O
break	O
;	O
}	O
else	O
if	O
(	O
!	O
field1	*(struct)
&&	O
!	O
field2	*(struct)
)	O
{	O
result	*(*(char))
=	O
-	O
1	int
;	O
break	O
;	O
}	O
result	*(*(char))
=	O
rec_type_values_cmp	(*(struct),*(char),*(char))->(int)
(	O
rec_rset_get_field_type	(*(struct),*(char))->(*(struct))
(	O
rset	*(struct)
,	O
field_name	*(char)
)	O
,	O
rec_field_value	(*(struct))->(*(char))
(	O
field1	*(struct)
)	O
,	O
rec_field_value	(*(struct))->(*(char))
(	O
field2	*(struct)
)	O
)	O
;	O
if	O
(	O
result	*(*(char))
!=	O
0	int
)	O
{	O
break	O
;	O
}	O
}	O
return	O
result	*(*(char))
;	O
}	O
