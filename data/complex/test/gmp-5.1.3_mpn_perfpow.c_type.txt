static	O
int	O
pow_equals	(*(long),long,*(long),long,long,long,*(long))->(int)
(	O
mp_srcptr	*(long)
np	*(long)
,	O
mp_size_t	long
n	long
,	O
mp_srcptr	*(long)
xp	*(long)
,	O
mp_size_t	long
xn	long
,	O
mp_limb_t	long
k	int
,	O
mp_bitcnt_t	long
f	long
,	O
mp_ptr	*(long)
tp	*(long)
)	O
{	O
mp_limb_t	long
*	O
tp2	*(long)
;	O
mp_bitcnt_t	long
y	long
,	O
z	long
;	O
mp_size_t	long
i	long
,	O
bn	long
;	O
int	O
ans	int
;	O
mp_limb_t	long
h	long
,	O
l	long
;	O
TMP_DECL	O
;	O
ASSERT	O
(	O
n	long
>	O
1	int
||	O
(	O
n	long
==	O
1	int
&&	O
np	*(long)
[	O
0	int
]	O
>	O
1	int
)	O
)	O
;	O
ASSERT	O
(	O
np	*(long)
[	O
n	long
-	O
1	int
]	O
>	O
0	int
)	O
;	O
ASSERT	O
(	O
xn	long
>	O
0	int
)	O
;	O
if	O
(	O
xn	long
==	O
1	int
&&	O
xp	*(long)
[	O
0	int
]	O
==	O
1	int
)	O
return	O
0	int
;	O
z	long
=	O
1	int
+	O
(	O
n	long
>>	O
1	int
)	O
;	O
for	O
(	O
bn	long
=	O
1	int
;	O
bn	long
<	O
z	long
;	O
bn	long
<<=	O
1	int
)	O
{	O
mpn_powlo	O
(	O
tp	*(long)
,	O
xp	*(long)
,	O
&	O
k	int
,	O
1	int
,	O
bn	long
,	O
tp	*(long)
+	O
bn	long
)	O
;	O
if	O
(	O
mpn_cmp	O
(	O
tp	*(long)
,	O
np	*(long)
,	O
bn	long
)	O
!=	O
0	int
)	O
return	O
0	int
;	O
}	O
TMP_MARK	O
;	O
MPN_SIZEINBASE_2EXP	O
(	O
y	long
,	O
xp	*(long)
,	O
xn	long
,	O
1	int
)	O
;	O
y	long
-=	O
1	int
;	O
umul_ppmm	O
(	O
h	long
,	O
l	long
,	O
k	int
,	O
y	long
)	O
;	O
h	long
-=	O
l	long
==	O
0	int
;	O
l	long
--	O
;	O
z	long
=	O
f	long
-	O
1	int
;	O
if	O
(	O
h	long
==	O
0	int
&&	O
l	long
<=	O
z	long
)	O
{	O
mp_limb_t	long
size	long
;	O
size	long
=	O
l	long
+	O
k	int
;	O
ASSERT_ALWAYS	O
(	O
size	long
>=	O
k	int
)	O
;	O
y	long
=	O
2	int
+	O
size	long
/	O
GMP_LIMB_BITS	int
;	O
tp2	*(long)
=	O
TMP_ALLOC_LIMBS	O
(	O
y	long
)	O
;	O
i	long
=	O
mpn_pow_1	O
(	O
tp	*(long)
,	O
xp	*(long)
,	O
xn	long
,	O
k	int
,	O
tp2	*(long)
)	O
;	O
if	O
(	O
i	long
==	O
n	long
&&	O
mpn_cmp	O
(	O
tp	*(long)
,	O
np	*(long)
,	O
n	long
)	O
==	O
0	int
)	O
ans	int
=	O
1	int
;	O
else	O
ans	int
=	O
0	int
;	O
}	O
else	O
{	O
ans	int
=	O
0	int
;	O
}	O
TMP_FREE	O
;	O
return	O
ans	int
;	O
}	O
static	O
int	O
is_kth_power	(*(long),*(long),long,*(long),long,long,*(long))->(int)
(	O
mp_ptr	*(long)
rp	*(long)
,	O
mp_srcptr	*(long)
np	*(long)
,	O
mp_limb_t	long
k	int
,	O
mp_srcptr	*(long)
ip	*(long)
,	O
mp_size_t	long
n	long
,	O
mp_bitcnt_t	long
f	long
,	O
mp_ptr	*(long)
tp	*(long)
)	O
{	O
mp_bitcnt_t	long
b	int
;	O
mp_size_t	long
rn	long
,	O
xn	long
;	O
ASSERT	O
(	O
n	long
>	O
0	int
)	O
;	O
ASSERT	O
(	O
(	O
k	int
&	O
1	int
)	O
!=	O
0	int
||	O
k	int
==	O
2	int
)	O
;	O
ASSERT	O
(	O
(	O
np	*(long)
[	O
0	int
]	O
&	O
1	int
)	O
!=	O
0	int
)	O
;	O
if	O
(	O
k	int
==	O
2	int
)	O
{	O
b	int
=	O
(	O
f	long
+	O
1	int
)	O
>>	O
1	int
;	O
rn	long
=	O
1	int
+	O
b	int
/	O
GMP_LIMB_BITS	int
;	O
if	O
(	O
mpn_bsqrtinv	O
(	O
rp	*(long)
,	O
ip	*(long)
,	O
b	int
,	O
tp	*(long)
)	O
!=	O
0	int
)	O
{	O
rp	*(long)
[	O
rn	long
-	O
1	int
]	O
&=	O
(	O
CNST_LIMB	O
(	O
1	int
)	O
<<	O
(	O
b	int
%	O
GMP_LIMB_BITS	int
)	O
)	O
-	O
1	int
;	O
xn	long
=	O
rn	long
;	O
MPN_NORMALIZE	O
(	O
rp	*(long)
,	O
xn	long
)	O
;	O
if	O
(	O
pow_equals	(*(long),long,*(long),long,long,long,*(long))->(int)
(	O
np	*(long)
,	O
n	long
,	O
rp	*(long)
,	O
xn	long
,	O
k	int
,	O
f	long
,	O
tp	*(long)
)	O
!=	O
0	int
)	O
return	O
1	int
;	O
mpn_neg	O
(	O
rp	*(long)
,	O
rp	*(long)
,	O
rn	long
)	O
;	O
rp	*(long)
[	O
rn	long
-	O
1	int
]	O
&=	O
(	O
CNST_LIMB	O
(	O
1	int
)	O
<<	O
(	O
b	int
%	O
GMP_LIMB_BITS	int
)	O
)	O
-	O
1	int
;	O
MPN_NORMALIZE	O
(	O
rp	*(long)
,	O
rn	long
)	O
;	O
if	O
(	O
pow_equals	(*(long),long,*(long),long,long,long,*(long))->(int)
(	O
np	*(long)
,	O
n	long
,	O
rp	*(long)
,	O
rn	long
,	O
k	int
,	O
f	long
,	O
tp	*(long)
)	O
!=	O
0	int
)	O
return	O
1	int
;	O
}	O
}	O
else	O
{	O
b	int
=	O
1	int
+	O
(	O
f	long
-	O
1	int
)	O
/	O
k	int
;	O
rn	long
=	O
1	int
+	O
(	O
b	int
-	O
1	int
)	O
/	O
GMP_LIMB_BITS	int
;	O
mpn_brootinv	O
(	O
rp	*(long)
,	O
ip	*(long)
,	O
rn	long
,	O
k	int
,	O
tp	*(long)
)	O
;	O
if	O
(	O
(	O
b	int
%	O
GMP_LIMB_BITS	int
)	O
!=	O
0	int
)	O
rp	*(long)
[	O
rn	long
-	O
1	int
]	O
&=	O
(	O
CNST_LIMB	O
(	O
1	int
)	O
<<	O
(	O
b	int
%	O
GMP_LIMB_BITS	int
)	O
)	O
-	O
1	int
;	O
MPN_NORMALIZE	O
(	O
rp	*(long)
,	O
rn	long
)	O
;	O
if	O
(	O
pow_equals	(*(long),long,*(long),long,long,long,*(long))->(int)
(	O
np	*(long)
,	O
n	long
,	O
rp	*(long)
,	O
rn	long
,	O
k	int
,	O
f	long
,	O
tp	*(long)
)	O
!=	O
0	int
)	O
return	O
1	int
;	O
}	O
MPN_ZERO	O
(	O
rp	*(long)
,	O
rn	long
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
perfpow	(*(long),long,long,long,long,int)->(int)
(	O
mp_srcptr	*(long)
np	*(long)
,	O
mp_size_t	long
n	long
,	O
mp_limb_t	long
ub	long
,	O
mp_limb_t	long
g	long
,	O
mp_bitcnt_t	long
f	long
,	O
int	O
neg	int
)	O
{	O
mp_ptr	*(long)
ip	*(long)
,	O
tp	*(long)
,	O
rp	*(long)
;	O
mp_limb_t	long
k	int
;	O
int	O
ans	int
;	O
mp_bitcnt_t	long
b	int
;	O
gmp_primesieve_t	struct(long,long,long,array(char))
ps	struct(long,long,long,array(char))
;	O
TMP_DECL	O
;	O
ASSERT	O
(	O
n	long
>	O
0	int
)	O
;	O
ASSERT	O
(	O
(	O
np	*(long)
[	O
0	int
]	O
&	O
1	int
)	O
!=	O
0	int
)	O
;	O
ASSERT	O
(	O
ub	long
>	O
0	int
)	O
;	O
TMP_MARK	O
;	O
gmp_init_primesieve	O
(	O
&	O
ps	struct(long,long,long,array(char))
)	O
;	O
b	int
=	O
(	O
f	long
+	O
3	int
)	O
>>	O
1	int
;	O
ip	*(long)
=	O
TMP_ALLOC_LIMBS	O
(	O
n	long
)	O
;	O
rp	*(long)
=	O
TMP_ALLOC_LIMBS	O
(	O
n	long
)	O
;	O
tp	*(long)
=	O
TMP_ALLOC_LIMBS	O
(	O
5	int
*	O
n	long
)	O
;	O
MPN_ZERO	O
(	O
rp	*(long)
,	O
n	long
)	O
;	O
mpn_binvert	O
(	O
ip	*(long)
,	O
np	*(long)
,	O
1	int
+	O
(	O
b	int
-	O
1	int
)	O
/	O
GMP_LIMB_BITS	int
,	O
tp	*(long)
)	O
;	O
if	O
(	O
b	int
%	O
GMP_LIMB_BITS	int
)	O
ip	*(long)
[	O
(	O
b	int
-	O
1	int
)	O
/	O
GMP_LIMB_BITS	int
]	O
&=	O
(	O
CNST_LIMB	O
(	O
1	int
)	O
<<	O
(	O
b	int
%	O
GMP_LIMB_BITS	int
)	O
)	O
-	O
1	int
;	O
if	O
(	O
neg	int
)	O
gmp_nextprime	O
(	O
&	O
ps	struct(long,long,long,array(char))
)	O
;	O
ans	int
=	O
0	int
;	O
if	O
(	O
g	long
>	O
0	int
)	O
{	O
ub	long
=	O
MIN	O
(	O
ub	long
,	O
g	long
+	O
1	int
)	O
;	O
while	O
(	O
(	O
k	int
=	O
gmp_nextprime	O
(	O
&	O
ps	struct(long,long,long,array(char))
)	O
)	O
<	O
ub	long
)	O
{	O
if	O
(	O
(	O
g	long
%	O
k	int
)	O
==	O
0	int
)	O
{	O
if	O
(	O
is_kth_power	(*(long),*(long),long,*(long),long,long,*(long))->(int)
(	O
rp	*(long)
,	O
np	*(long)
,	O
k	int
,	O
ip	*(long)
,	O
n	long
,	O
f	long
,	O
tp	*(long)
)	O
!=	O
0	int
)	O
{	O
ans	int
=	O
1	int
;	O
goto	O
ret	O
;	O
}	O
}	O
}	O
}	O
else	O
{	O
while	O
(	O
(	O
k	int
=	O
gmp_nextprime	O
(	O
&	O
ps	struct(long,long,long,array(char))
)	O
)	O
<	O
ub	long
)	O
{	O
if	O
(	O
is_kth_power	(*(long),*(long),long,*(long),long,long,*(long))->(int)
(	O
rp	*(long)
,	O
np	*(long)
,	O
k	int
,	O
ip	*(long)
,	O
n	long
,	O
f	long
,	O
tp	*(long)
)	O
!=	O
0	int
)	O
{	O
ans	int
=	O
1	int
;	O
goto	O
ret	O
;	O
}	O
}	O
}	O
ret	O
:	O
TMP_FREE	O
;	O
return	O
ans	int
;	O
}	O
static	O
const	O
unsigned	O
short	O
nrtrial	array(short)
[	O
]	O
=	O
{	O
100	int
,	O
500	int
,	O
1000	int
}	O
;	O
static	O
const	O
double	O
logs	array(double)
[	O
]	O
=	O
{	O
0.1099457228193620	int
,	O
0.0847016403115322	int
,	O
0.0772048195144415	int
}	O
;	O
int	O
mpn_perfect_power_p	O
(	O
mp_srcptr	*(long)
np	*(long)
,	O
mp_size_t	long
n	long
)	O
{	O
mp_size_t	long
ncn	long
,	O
s	array(char)
,	O
pn	long
,	O
xn	long
;	O
mp_limb_t	long
*	O
nc	*(long)
,	O
factor	long
,	O
g	long
;	O
mp_limb_t	long
exp	int
,	O
*	O
prev	*(long)
,	O
*	O
next	*(struct(*(struct(*(struct`),long)),long))
,	O
d	long
,	O
l	long
,	O
r	long
,	O
c	long
,	O
*	O
tp	*(long)
,	O
cry	long
;	O
mp_bitcnt_t	long
twos	long
,	O
count	long
;	O
int	O
ans	int
,	O
where	int
,	O
neg	int
,	O
trial	int
;	O
TMP_DECL	O
;	O
nc	*(long)
=	O
(	O
mp_ptr	*(long)
)	O
np	*(long)
;	O
neg	int
=	O
0	int
;	O
if	O
(	O
n	long
<	O
0	int
)	O
{	O
neg	int
=	O
1	int
;	O
n	long
=	O
-	O
n	long
;	O
}	O
if	O
(	O
n	long
==	O
0	int
||	O
(	O
n	long
==	O
1	int
&&	O
np	*(long)
[	O
0	int
]	O
==	O
1	int
)	O
)	O
return	O
1	int
;	O
TMP_MARK	O
;	O
g	long
=	O
0	int
;	O
ncn	long
=	O
n	long
;	O
twos	long
=	O
mpn_scan1	O
(	O
np	*(long)
,	O
0	int
)	O
;	O
if	O
(	O
twos	long
>	O
0	int
)	O
{	O
if	O
(	O
twos	long
==	O
1	int
)	O
{	O
ans	int
=	O
0	int
;	O
goto	O
ret	O
;	O
}	O
s	array(char)
=	O
twos	long
/	O
GMP_LIMB_BITS	int
;	O
if	O
(	O
s	array(char)
+	O
1	int
==	O
n	long
&&	O
POW2_P	O
(	O
np	*(long)
[	O
s	array(char)
]	O
)	O
)	O
{	O
ans	int
=	O
!	O
(	O
neg	int
&&	O
POW2_P	O
(	O
twos	long
)	O
)	O
;	O
goto	O
ret	O
;	O
}	O
count	long
=	O
twos	long
%	O
GMP_LIMB_BITS	int
;	O
ncn	long
=	O
n	long
-	O
s	array(char)
;	O
nc	*(long)
=	O
TMP_ALLOC_LIMBS	O
(	O
ncn	long
)	O
;	O
if	O
(	O
count	long
>	O
0	int
)	O
{	O
mpn_rshift	O
(	O
nc	*(long)
,	O
np	*(long)
+	O
s	array(char)
,	O
ncn	long
,	O
count	long
)	O
;	O
ncn	long
-=	O
(	O
nc	*(long)
[	O
ncn	long
-	O
1	int
]	O
==	O
0	int
)	O
;	O
}	O
else	O
{	O
MPN_COPY	O
(	O
nc	*(long)
,	O
np	*(long)
+	O
s	array(char)
,	O
ncn	long
)	O
;	O
}	O
g	long
=	O
twos	long
;	O
}	O
if	O
(	O
ncn	long
<=	O
SMALL	int
)	O
trial	int
=	O
0	int
;	O
else	O
if	O
(	O
ncn	long
<=	O
MEDIUM	int
)	O
trial	int
=	O
1	int
;	O
else	O
trial	int
=	O
2	int
;	O
where	int
=	O
0	int
;	O
factor	long
=	O
mpn_trialdiv	O
(	O
nc	*(long)
,	O
ncn	long
,	O
nrtrial	array(short)
[	O
trial	int
]	O
,	O
&	O
where	int
)	O
;	O
if	O
(	O
factor	long
!=	O
0	int
)	O
{	O
if	O
(	O
twos	long
==	O
0	int
)	O
{	O
nc	*(long)
=	O
TMP_ALLOC_LIMBS	O
(	O
ncn	long
)	O
;	O
MPN_COPY	O
(	O
nc	*(long)
,	O
np	*(long)
,	O
ncn	long
)	O
;	O
}	O
prev	*(long)
=	O
TMP_ALLOC_LIMBS	O
(	O
ncn	long
+	O
2	int
)	O
;	O
next	*(struct(*(struct(*(struct`),long)),long))
=	O
TMP_ALLOC_LIMBS	O
(	O
ncn	long
+	O
2	int
)	O
;	O
tp	*(long)
=	O
TMP_ALLOC_LIMBS	O
(	O
4	int
*	O
ncn	long
)	O
;	O
do	O
{	O
binvert_limb	O
(	O
d	long
,	O
factor	long
)	O
;	O
prev	*(long)
[	O
0	int
]	O
=	O
d	long
;	O
pn	long
=	O
1	int
;	O
exp	int
=	O
1	int
;	O
while	O
(	O
2	int
*	O
pn	long
-	O
1	int
<=	O
ncn	long
)	O
{	O
mpn_sqr	O
(	O
next	*(struct(*(struct(*(struct`),long)),long))
,	O
prev	*(long)
,	O
pn	long
)	O
;	O
xn	long
=	O
2	int
*	O
pn	long
;	O
xn	long
-=	O
(	O
next	*(struct(*(struct(*(struct`),long)),long))
[	O
xn	long
-	O
1	int
]	O
==	O
0	int
)	O
;	O
if	O
(	O
mpn_divisible_p	O
(	O
nc	*(long)
,	O
ncn	long
,	O
next	*(struct(*(struct(*(struct`),long)),long))
,	O
xn	long
)	O
==	O
0	int
)	O
break	O
;	O
exp	int
<<=	O
1	int
;	O
pn	long
=	O
xn	long
;	O
MP_PTR_SWAP	O
(	O
next	*(struct(*(struct(*(struct`),long)),long))
,	O
prev	*(long)
)	O
;	O
}	O
l	long
=	O
exp	int
+	O
1	int
;	O
r	long
=	O
2	int
*	O
exp	int
-	O
1	int
;	O
while	O
(	O
l	long
<=	O
r	long
)	O
{	O
c	long
=	O
(	O
l	long
+	O
r	long
)	O
>>	O
1	int
;	O
if	O
(	O
c	long
-	O
exp	int
>	O
1	int
)	O
{	O
xn	long
=	O
mpn_pow_1	O
(	O
tp	*(long)
,	O
&	O
d	long
,	O
1	int
,	O
c	long
-	O
exp	int
,	O
next	*(struct(*(struct(*(struct`),long)),long))
)	O
;	O
if	O
(	O
pn	long
+	O
xn	long
-	O
1	int
>	O
ncn	long
)	O
{	O
r	long
=	O
c	long
-	O
1	int
;	O
continue	O
;	O
}	O
mpn_mul	O
(	O
next	*(struct(*(struct(*(struct`),long)),long))
,	O
prev	*(long)
,	O
pn	long
,	O
tp	*(long)
,	O
xn	long
)	O
;	O
xn	long
+=	O
pn	long
;	O
xn	long
-=	O
(	O
next	*(struct(*(struct(*(struct`),long)),long))
[	O
xn	long
-	O
1	int
]	O
==	O
0	int
)	O
;	O
}	O
else	O
{	O
cry	long
=	O
mpn_mul_1	O
(	O
next	*(struct(*(struct(*(struct`),long)),long))
,	O
prev	*(long)
,	O
pn	long
,	O
d	long
)	O
;	O
next	*(struct(*(struct(*(struct`),long)),long))
[	O
pn	long
]	O
=	O
cry	long
;	O
xn	long
=	O
pn	long
+	O
(	O
cry	long
!=	O
0	int
)	O
;	O
}	O
if	O
(	O
mpn_divisible_p	O
(	O
nc	*(long)
,	O
ncn	long
,	O
next	*(struct(*(struct(*(struct`),long)),long))
,	O
xn	long
)	O
==	O
0	int
)	O
{	O
r	long
=	O
c	long
-	O
1	int
;	O
}	O
else	O
{	O
exp	int
=	O
c	long
;	O
l	long
=	O
c	long
+	O
1	int
;	O
MP_PTR_SWAP	O
(	O
next	*(struct(*(struct(*(struct`),long)),long))
,	O
prev	*(long)
)	O
;	O
pn	long
=	O
xn	long
;	O
}	O
}	O
if	O
(	O
g	long
==	O
0	int
)	O
g	long
=	O
exp	int
;	O
else	O
g	long
=	O
mpn_gcd_1	O
(	O
&	O
g	long
,	O
1	int
,	O
exp	int
)	O
;	O
if	O
(	O
g	long
==	O
1	int
)	O
{	O
ans	int
=	O
0	int
;	O
goto	O
ret	O
;	O
}	O
mpn_divexact	O
(	O
next	*(struct(*(struct(*(struct`),long)),long))
,	O
nc	*(long)
,	O
ncn	long
,	O
prev	*(long)
,	O
pn	long
)	O
;	O
ncn	long
=	O
ncn	long
-	O
pn	long
;	O
ncn	long
+=	O
next	*(struct(*(struct(*(struct`),long)),long))
[	O
ncn	long
]	O
!=	O
0	int
;	O
MPN_COPY	O
(	O
nc	*(long)
,	O
next	*(struct(*(struct(*(struct`),long)),long))
,	O
ncn	long
)	O
;	O
if	O
(	O
ncn	long
==	O
1	int
&&	O
nc	*(long)
[	O
0	int
]	O
==	O
1	int
)	O
{	O
ans	int
=	O
!	O
(	O
neg	int
&&	O
POW2_P	O
(	O
g	long
)	O
)	O
;	O
goto	O
ret	O
;	O
}	O
factor	long
=	O
mpn_trialdiv	O
(	O
nc	*(long)
,	O
ncn	long
,	O
nrtrial	array(short)
[	O
trial	int
]	O
,	O
&	O
where	int
)	O
;	O
}	O
while	O
(	O
factor	long
!=	O
0	int
)	O
;	O
}	O
MPN_SIZEINBASE_2EXP	O
(	O
count	long
,	O
nc	*(long)
,	O
ncn	long
,	O
1	int
)	O
;	O
d	long
=	O
(	O
mp_limb_t	long
)	O
(	O
count	long
*	O
logs	array(double)
[	O
trial	int
]	O
+	O
1e-9	int
)	O
+	O
1	int
;	O
ans	int
=	O
perfpow	(*(long),long,long,long,long,int)->(int)
(	O
nc	*(long)
,	O
ncn	long
,	O
d	long
,	O
g	long
,	O
count	long
,	O
neg	int
)	O
;	O
ret	O
:	O
TMP_FREE	O
;	O
return	O
ans	int
;	O
}	O
