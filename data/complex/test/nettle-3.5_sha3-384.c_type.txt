void	O
sha3_384_init	O
(	O
struct	O
sha3_384_ctx	struct(struct(array(long)),int,array(char))
*	O
ctx	*(void)
)	O
{	O
memset	(*(void),int,long)->(*(void))
(	O
ctx	*(void)
,	O
0	int
,	O
offsetof	O
(	O
struct	O
sha3_384_ctx	struct(struct(array(long)),int,array(char))
,	O
block	array(char)
)	O
)	O
;	O
}	O
void	O
sha3_384_update	O
(	O
struct	O
sha3_384_ctx	struct(struct(array(long)),int,array(char))
*	O
ctx	*(void)
,	O
size_t	long
length	long
,	O
const	O
uint8_t	char
*	O
data	*(char)
)	O
{	O
ctx	*(void)
->	O
index	(*(char),int)->(*(char))
=	O
_sha3_update	O
(	O
&	O
ctx	*(void)
->	O
state	*(struct(array(long)))
,	O
SHA3_384_BLOCK_SIZE	int
,	O
ctx	*(void)
->	O
block	array(char)
,	O
ctx	*(void)
->	O
index	(*(char),int)->(*(char))
,	O
length	long
,	O
data	*(char)
)	O
;	O
}	O
void	O
sha3_384_digest	O
(	O
struct	O
sha3_384_ctx	struct(struct(array(long)),int,array(char))
*	O
ctx	*(void)
,	O
size_t	long
length	long
,	O
uint8_t	char
*	O
digest	*(char)
)	O
{	O
_sha3_pad	O
(	O
&	O
ctx	*(void)
->	O
state	*(struct(array(long)))
,	O
SHA3_384_BLOCK_SIZE	int
,	O
ctx	*(void)
->	O
block	array(char)
,	O
ctx	*(void)
->	O
index	(*(char),int)->(*(char))
)	O
;	O
_nettle_write_le64	(long,*(char),*(long))->(void)
(	O
length	long
,	O
digest	*(char)
,	O
ctx	*(void)
->	O
state	*(struct(array(long)))
.	O
a	array(long)
)	O
;	O
sha3_384_init	O
(	O
ctx	*(void)
)	O
;	O
}	O
