char	O
acl_docstring	array(char)
[	O
]	O
=	O
N_	O
(	O
"test access control lists"	*(char)
)	O
;	O
static	O
char	O
acl_args_doc	array(char)
[	O
]	O
=	O
N_	O
(	O
"ADDRESS [ADDRESS...]"	*(char)
)	O
;	O
static	O
char	O
*	O
input_file_name	*(char)
;	O
static	O
struct	O
mu_sockaddr	struct(*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(char))),*(struct(*(struct`),*(struct`),*(struct`),int,*(char))),*(struct(short,array(char))),int,*(char))),*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(char))),*(struct(*(struct`),*(struct`),*(struct`),int,*(char))),*(struct(short,array(char))),int,*(char))),*(struct(short,array(char))),int,*(char))
*	O
target_sa	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(char))),*(struct(*(struct`),*(struct`),*(struct`),int,*(char))),*(struct(short,array(char))),int,*(char)))
;	O
static	O
mu_acl_t	*(struct)
acl	*(*(struct))
;	O
static	O
const	O
char	O
*	O
path	*(char)
=	O
"acl"	*(char)
;	O
static	O
struct	O
mu_option	struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*(struct),*(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*`,*`,*`)->(void)),*(char))),*(char))->(void)),*(char))
acl_options	array(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*(struct(int,*`,long,*`,int,*`,*`,int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,*`,*`,int,*`,int,int,int,long,*`)),*(struct(*`,int,*`,int,*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`)),*(char))->(void)),*(char)))
[	O
]	O
=	O
{	O
{	O
"file"	*(char)
,	O
'f'	O
,	O
N_	O
(	O
"FILE"	*(char)
)	O
,	O
MU_OPTION_DEFAULT	int
,	O
N_	O
(	O
"read ACLs from FILE"	*(char)
)	O
,	O
mu_c_string	int
,	O
&	O
input_file_name	*(char)
}	O
,	O
{	O
"path"	*(char)
,	O
'p'	O
,	O
N_	O
(	O
"PATH"	*(char)
)	O
,	O
MU_OPTION_DEFAULT	int
,	O
N_	O
(	O
"path to the ACL in the configuration tree"	*(char)
)	O
,	O
mu_c_string	int
,	O
&	O
path	*(char)
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
static	O
struct	O
mu_cfg_param	struct(*(char),int,*(void),long,*((*(void),*(struct(int,union(*`,*`,struct`))))->(int)),*(char),*(char))
acl_cfg_param	array(struct(*(char),int,*(void),long,*((*(void),*(struct(int,union`)))->(int)),*(char),*(char)))
[	O
]	O
=	O
{	O
{	O
"acl"	*(char)
,	O
mu_cfg_section	int
,	O
&	O
acl	*(*(struct))
,	O
0	int
,	O
NULL	O
,	O
"access control list"	*(char)
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
int	O
main	(int,*(*(char)))->(int)
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	*(*(char))
)	O
{	O
int	O
rc	int
;	O
mu_acl_result_t	enum(int,int,int)
result	*(struct)
;	O
mu_cfg_tree_t	struct
*	O
tree	*(struct(*(struct),*(struct)))
=	O
NULL	O
,	O
*	O
temp_tree	*(struct(*(struct),*(struct)))
=	O
NULL	O
;	O
mu_cfg_node_t	struct
*	O
node	*(struct(struct(struct(*(char),int,int),struct(*(char),int,int)),enum(int,int,int),*(char),*(struct(int,union(*`,*`,struct`))),*(struct),*(struct(struct(struct`,struct`),enum(int,int,int),*(char),*(struct`),*(struct`),*(struct`)))))
;	O
struct	O
mu_cfg_parse_hints	struct(int,*(char),*(char),*(char))
hints	*(struct(*(char),*(char)))
;	O
mu_action_getopt	(*(int),*(*(*(char))),*(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*`,*`,*`)->(void)),*(char))),*(char),*(char))->(void)
(	O
&	O
argc	long
,	O
&	O
argv	*(*(char))
,	O
acl_options	array(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*(struct(int,*`,long,*`,int,*`,*`,int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,*`,*`,int,*`,int,int,int,long,*`)),*(struct(*`,int,*`,int,*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`)),*(char))->(void)),*(char)))
,	O
acl_docstring	array(char)
,	O
acl_args_doc	array(char)
)	O
;	O
if	O
(	O
argc	long
==	O
0	int
)	O
{	O
mu_error	(*(char))->(int)
(	O
_	O
(	O
"not enough arguments"	*(char)
)	O
)	O
;	O
return	O
1	int
;	O
}	O
memset	(*(void),int,long)->(*(void))
(	O
&	O
hints	*(struct(*(char),*(char)))
,	O
0	int
,	O
sizeof	O
(	O
hints	*(struct(*(char),*(char)))
)	O
)	O
;	O
hints	*(struct(*(char),*(char)))
.	O
flags	int
=	O
MU_CFHINT_CUSTOM_FILE	int
;	O
hints	*(struct(*(char),*(char)))
.	O
custom_file	*(char)
=	O
input_file_name	*(char)
;	O
mu_acl_cfg_init	()->(void)
(	O
)	O
;	O
if	O
(	O
mu_cfg_parse_config	(*(*(struct(*(struct`),*(struct`)))),*(struct(int,*(char),*(char),*(char))))->(int)
(	O
&	O
tree	*(struct(*(struct),*(struct)))
,	O
&	O
hints	*(struct(*(char),*(char)))
)	O
)	O
exit	(int)->(void)
(	O
EX_CONFIG	int
)	O
;	O
if	O
(	O
!	O
tree	*(struct(*(struct),*(struct)))
)	O
return	O
0	int
;	O
if	O
(	O
mu_cfg_find_node	(*(struct(*(struct),*(struct))),*(char),*(*(struct(struct(struct`,struct`),enum(int,int,int),*(char),*(struct`),*(struct`),*(struct`)))))->(int)
(	O
tree	*(struct(*(struct),*(struct)))
,	O
path	*(char)
,	O
&	O
node	*(struct(struct(struct(*(char),int,int),struct(*(char),int,int)),enum(int,int,int),*(char),*(struct(int,union(*`,*`,struct`))),*(struct),*(struct(struct(struct`,struct`),enum(int,int,int),*(char),*(struct`),*(struct`),*(struct`)))))
)	O
)	O
{	O
mu_error	(*(char))->(int)
(	O
_	O
(	O
"cannot find node: %s"	*(char)
)	O
,	O
path	*(char)
)	O
;	O
return	O
1	int
;	O
}	O
mu_cfg_tree_create	(*(*(struct(*(struct`),*(struct`)))))->(int)
(	O
&	O
temp_tree	*(struct(*(struct),*(struct)))
)	O
;	O
mu_cfg_tree_add_node	(*(struct(*(struct),*(struct))),*(struct(struct(struct(*`,int,int),struct(*`,int,int)),enum(int,int,int),*(char),*(struct(int,union`)),*(struct),*(struct(struct`,enum(int,int,int),*`,*`,*`,*`)))))->(void)
(	O
temp_tree	*(struct(*(struct),*(struct)))
,	O
node	*(struct(struct(struct(*(char),int,int),struct(*(char),int,int)),enum(int,int,int),*(char),*(struct(int,union(*`,*`,struct`))),*(struct),*(struct(struct(struct`,struct`),enum(int,int,int),*(char),*(struct`),*(struct`),*(struct`)))))
)	O
;	O
rc	int
=	O
mu_cfg_tree_reduce	(*(struct(*(struct),*(struct))),*(struct(int,*(char),*(char),*(char))),*(struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char))),*(void))->(int)
(	O
temp_tree	*(struct(*(struct),*(struct)))
,	O
NULL	O
,	O
acl_cfg_param	array(struct(*(char),int,*(void),long,*((*(void),*(struct(int,union`)))->(int)),*(char),*(char)))
,	O
NULL	O
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
1	int
;	O
if	O
(	O
!	O
acl	*(*(struct))
)	O
{	O
mu_error	(*(char))->(int)
(	O
_	O
(	O
"No ACL found in config"	*(char)
)	O
)	O
;	O
return	O
1	int
;	O
}	O
while	O
(	O
argc	long
--	O
)	O
{	O
const	O
char	O
*	O
ap	array(struct(int,int,*(void),*(void)))
=	O
*	O
argv	*(*(char))
++	O
;	O
rc	int
=	O
mu_sockaddr_from_node	(*(*(struct(*(struct`),*(struct`),*(struct`),int,*(char)))),*(char),*(char),*(struct(int,int,int,int,short)))->(int)
(	O
&	O
target_sa	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(char))),*(struct(*(struct`),*(struct`),*(struct`),int,*(char))),*(struct(short,array(char))),int,*(char)))
,	O
ap	array(struct(int,int,*(void),*(void)))
,	O
NULL	O
,	O
NULL	O
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_error	(*(char))->(int)
(	O
"mu_sockaddr_from_node: %s"	*(char)
,	O
mu_strerror	(int)->(*(char))
(	O
rc	int
)	O
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
mu_printf	(*(char))->(int)
(	O
"Testing %s:\n"	*(char)
,	O
ap	array(struct(int,int,*(void),*(void)))
)	O
;	O
rc	int
=	O
mu_acl_check_sockaddr	(*(struct),*(struct),int,*(enum(int,int,int)))->(int)
(	O
acl	*(*(struct))
,	O
target_sa	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(char))),*(struct(*(struct`),*(struct`),*(struct`),int,*(char))),*(struct(short,array(char))),int,*(char)))
->	O
addr	int
,	O
target_sa	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(char))),*(struct(*(struct`),*(struct`),*(struct`),int,*(char))),*(struct(short,array(char))),int,*(char)))
->	O
addrlen	int
,	O
&	O
result	*(struct)
)	O
;	O
mu_sockaddr_free_list	(*(struct(*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),*(struct(short,array(char))),int,*(char))))->(void)
(	O
target_sa	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(char))),*(struct(*(struct`),*(struct`),*(struct`),int,*(char))),*(struct(short,array(char))),int,*(char)))
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_error	(*(char))->(int)
(	O
"mu_acl_check_sockaddr failed: %s"	*(char)
,	O
mu_strerror	(int)->(*(char))
(	O
rc	int
)	O
)	O
;	O
return	O
1	int
;	O
}	O
switch	O
(	O
result	*(struct)
)	O
{	O
case	O
mu_acl_result_undefined	int
:	O
mu_printf	(*(char))->(int)
(	O
"%s: undefined\n"	*(char)
,	O
ap	array(struct(int,int,*(void),*(void)))
)	O
;	O
break	O
;	O
case	O
mu_acl_result_accept	int
:	O
mu_printf	(*(char))->(int)
(	O
"%s: accept\n"	*(char)
,	O
ap	array(struct(int,int,*(void),*(void)))
)	O
;	O
break	O
;	O
case	O
mu_acl_result_deny	int
:	O
mu_printf	(*(char))->(int)
(	O
"%s: deny\n"	*(char)
,	O
ap	array(struct(int,int,*(void),*(void)))
)	O
;	O
break	O
;	O
}	O
}	O
mu_cfg_destroy_tree	(*(*(struct(*(struct`),*(struct`)))))->(void)
(	O
&	O
tree	*(struct(*(struct),*(struct)))
)	O
;	O
mu_cfg_destroy_tree	(*(*(struct(*(struct`),*(struct`)))))->(void)
(	O
&	O
temp_tree	*(struct(*(struct),*(struct)))
)	O
;	O
return	O
0	int
;	O
}	O
