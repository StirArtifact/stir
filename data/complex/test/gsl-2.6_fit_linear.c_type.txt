int	O
gsl_fit_linear	(*(double),long,*(double),long,long,*(double),*(double),*(double),*(double),*(double),*(double))->(int)
(	O
const	O
double	O
*	O
x	double
,	O
const	O
size_t	long
xstride	long
,	O
const	O
double	O
*	O
y	double
,	O
const	O
size_t	long
ystride	long
,	O
const	O
size_t	long
n	int
,	O
double	O
*	O
c0	*(double)
,	O
double	O
*	O
c1	*(double)
,	O
double	O
*	O
cov_00	*(double)
,	O
double	O
*	O
cov_01	*(double)
,	O
double	O
*	O
cov_11	*(double)
,	O
double	O
*	O
sumsq	*(double)
)	O
{	O
double	O
m_x	double
=	O
0	int
,	O
m_y	double
=	O
0	int
,	O
m_dx2	double
=	O
0	int
,	O
m_dxdy	double
=	O
0	int
;	O
size_t	long
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
n	int
;	O
i	long
++	O
)	O
{	O
m_x	double
+=	O
(	O
x	double
[	O
i	long
*	O
xstride	long
]	O
-	O
m_x	double
)	O
/	O
(	O
i	long
+	O
1.0	int
)	O
;	O
m_y	double
+=	O
(	O
y	double
[	O
i	long
*	O
ystride	long
]	O
-	O
m_y	double
)	O
/	O
(	O
i	long
+	O
1.0	int
)	O
;	O
}	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
n	int
;	O
i	long
++	O
)	O
{	O
const	O
double	O
dx	double
=	O
x	double
[	O
i	long
*	O
xstride	long
]	O
-	O
m_x	double
;	O
const	O
double	O
dy	double
=	O
y	double
[	O
i	long
*	O
ystride	long
]	O
-	O
m_y	double
;	O
m_dx2	double
+=	O
(	O
dx	double
*	O
dx	double
-	O
m_dx2	double
)	O
/	O
(	O
i	long
+	O
1.0	int
)	O
;	O
m_dxdy	double
+=	O
(	O
dx	double
*	O
dy	double
-	O
m_dxdy	double
)	O
/	O
(	O
i	long
+	O
1.0	int
)	O
;	O
}	O
{	O
double	O
s2	double
=	O
0	int
,	O
d2	double
=	O
0	int
;	O
double	O
b	double
=	O
m_dxdy	double
/	O
m_dx2	double
;	O
double	O
a	double
=	O
m_y	double
-	O
m_x	double
*	O
b	double
;	O
*	O
c0	*(double)
=	O
a	double
;	O
*	O
c1	*(double)
=	O
b	double
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
n	int
;	O
i	long
++	O
)	O
{	O
const	O
double	O
dx	double
=	O
x	double
[	O
i	long
*	O
xstride	long
]	O
-	O
m_x	double
;	O
const	O
double	O
dy	double
=	O
y	double
[	O
i	long
*	O
ystride	long
]	O
-	O
m_y	double
;	O
const	O
double	O
d	double
=	O
dy	double
-	O
b	double
*	O
dx	double
;	O
d2	double
+=	O
d	double
*	O
d	double
;	O
}	O
s2	double
=	O
d2	double
/	O
(	O
n	int
-	O
2.0	int
)	O
;	O
*	O
cov_00	*(double)
=	O
s2	double
*	O
(	O
1.0	int
/	O
n	int
)	O
*	O
(	O
1	int
+	O
m_x	double
*	O
m_x	double
/	O
m_dx2	double
)	O
;	O
*	O
cov_11	*(double)
=	O
s2	double
*	O
1.0	int
/	O
(	O
n	int
*	O
m_dx2	double
)	O
;	O
*	O
cov_01	*(double)
=	O
s2	double
*	O
(	O
-	O
m_x	double
)	O
/	O
(	O
n	int
*	O
m_dx2	double
)	O
;	O
*	O
sumsq	*(double)
=	O
d2	double
;	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
int	O
gsl_fit_wlinear	(*(double),long,*(double),long,*(double),long,long,*(double),*(double),*(double),*(double),*(double),*(double))->(int)
(	O
const	O
double	O
*	O
x	double
,	O
const	O
size_t	long
xstride	long
,	O
const	O
double	O
*	O
w	*(double)
,	O
const	O
size_t	long
wstride	long
,	O
const	O
double	O
*	O
y	double
,	O
const	O
size_t	long
ystride	long
,	O
const	O
size_t	long
n	int
,	O
double	O
*	O
c0	*(double)
,	O
double	O
*	O
c1	*(double)
,	O
double	O
*	O
cov_00	*(double)
,	O
double	O
*	O
cov_01	*(double)
,	O
double	O
*	O
cov_11	*(double)
,	O
double	O
*	O
chisq	*(double)
)	O
{	O
double	O
W	double
=	O
0	int
,	O
wm_x	double
=	O
0	int
,	O
wm_y	double
=	O
0	int
,	O
wm_dx2	double
=	O
0	int
,	O
wm_dxdy	double
=	O
0	int
;	O
size_t	long
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
n	int
;	O
i	long
++	O
)	O
{	O
const	O
double	O
wi	double
=	O
w	*(double)
[	O
i	long
*	O
wstride	long
]	O
;	O
if	O
(	O
wi	double
>	O
0	int
)	O
{	O
W	double
+=	O
wi	double
;	O
wm_x	double
+=	O
(	O
x	double
[	O
i	long
*	O
xstride	long
]	O
-	O
wm_x	double
)	O
*	O
(	O
wi	double
/	O
W	double
)	O
;	O
wm_y	double
+=	O
(	O
y	double
[	O
i	long
*	O
ystride	long
]	O
-	O
wm_y	double
)	O
*	O
(	O
wi	double
/	O
W	double
)	O
;	O
}	O
}	O
W	double
=	O
0	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
n	int
;	O
i	long
++	O
)	O
{	O
const	O
double	O
wi	double
=	O
w	*(double)
[	O
i	long
*	O
wstride	long
]	O
;	O
if	O
(	O
wi	double
>	O
0	int
)	O
{	O
const	O
double	O
dx	double
=	O
x	double
[	O
i	long
*	O
xstride	long
]	O
-	O
wm_x	double
;	O
const	O
double	O
dy	double
=	O
y	double
[	O
i	long
*	O
ystride	long
]	O
-	O
wm_y	double
;	O
W	double
+=	O
wi	double
;	O
wm_dx2	double
+=	O
(	O
dx	double
*	O
dx	double
-	O
wm_dx2	double
)	O
*	O
(	O
wi	double
/	O
W	double
)	O
;	O
wm_dxdy	double
+=	O
(	O
dx	double
*	O
dy	double
-	O
wm_dxdy	double
)	O
*	O
(	O
wi	double
/	O
W	double
)	O
;	O
}	O
}	O
{	O
double	O
d2	double
=	O
0	int
;	O
double	O
b	double
=	O
wm_dxdy	double
/	O
wm_dx2	double
;	O
double	O
a	double
=	O
wm_y	double
-	O
wm_x	double
*	O
b	double
;	O
*	O
c0	*(double)
=	O
a	double
;	O
*	O
c1	*(double)
=	O
b	double
;	O
*	O
cov_00	*(double)
=	O
(	O
1	int
/	O
W	double
)	O
*	O
(	O
1	int
+	O
wm_x	double
*	O
wm_x	double
/	O
wm_dx2	double
)	O
;	O
*	O
cov_11	*(double)
=	O
1	int
/	O
(	O
W	double
*	O
wm_dx2	double
)	O
;	O
*	O
cov_01	*(double)
=	O
-	O
wm_x	double
/	O
(	O
W	double
*	O
wm_dx2	double
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
n	int
;	O
i	long
++	O
)	O
{	O
const	O
double	O
wi	double
=	O
w	*(double)
[	O
i	long
*	O
wstride	long
]	O
;	O
if	O
(	O
wi	double
>	O
0	int
)	O
{	O
const	O
double	O
dx	double
=	O
x	double
[	O
i	long
*	O
xstride	long
]	O
-	O
wm_x	double
;	O
const	O
double	O
dy	double
=	O
y	double
[	O
i	long
*	O
ystride	long
]	O
-	O
wm_y	double
;	O
const	O
double	O
d	double
=	O
dy	double
-	O
b	double
*	O
dx	double
;	O
d2	double
+=	O
wi	double
*	O
d	double
*	O
d	double
;	O
}	O
}	O
*	O
chisq	*(double)
=	O
d2	double
;	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
int	O
gsl_fit_linear_est	(double,double,double,double,double,double,*(double),*(double))->(int)
(	O
const	O
double	O
x	double
,	O
const	O
double	O
c0	*(double)
,	O
const	O
double	O
c1	*(double)
,	O
const	O
double	O
cov00	*(double)
,	O
const	O
double	O
cov01	*(double)
,	O
const	O
double	O
cov11	*(double)
,	O
double	O
*	O
y	double
,	O
double	O
*	O
y_err	*(double)
)	O
{	O
*	O
y	double
=	O
c0	*(double)
+	O
c1	*(double)
*	O
x	double
;	O
*	O
y_err	*(double)
=	O
sqrt	(double)->(double)
(	O
cov00	*(double)
+	O
x	double
*	O
(	O
2	int
*	O
cov01	*(double)
+	O
cov11	*(double)
*	O
x	double
)	O
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
int	O
gsl_fit_mul	(*(double),long,*(double),long,long,*(double),*(double),*(double))->(int)
(	O
const	O
double	O
*	O
x	double
,	O
const	O
size_t	long
xstride	long
,	O
const	O
double	O
*	O
y	double
,	O
const	O
size_t	long
ystride	long
,	O
const	O
size_t	long
n	int
,	O
double	O
*	O
c1	*(double)
,	O
double	O
*	O
cov_11	*(double)
,	O
double	O
*	O
sumsq	*(double)
)	O
{	O
double	O
m_x	double
=	O
0	int
,	O
m_y	double
=	O
0	int
,	O
m_dx2	double
=	O
0	int
,	O
m_dxdy	double
=	O
0	int
;	O
size_t	long
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
n	int
;	O
i	long
++	O
)	O
{	O
m_x	double
+=	O
(	O
x	double
[	O
i	long
*	O
xstride	long
]	O
-	O
m_x	double
)	O
/	O
(	O
i	long
+	O
1.0	int
)	O
;	O
m_y	double
+=	O
(	O
y	double
[	O
i	long
*	O
ystride	long
]	O
-	O
m_y	double
)	O
/	O
(	O
i	long
+	O
1.0	int
)	O
;	O
}	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
n	int
;	O
i	long
++	O
)	O
{	O
const	O
double	O
dx	double
=	O
x	double
[	O
i	long
*	O
xstride	long
]	O
-	O
m_x	double
;	O
const	O
double	O
dy	double
=	O
y	double
[	O
i	long
*	O
ystride	long
]	O
-	O
m_y	double
;	O
m_dx2	double
+=	O
(	O
dx	double
*	O
dx	double
-	O
m_dx2	double
)	O
/	O
(	O
i	long
+	O
1.0	int
)	O
;	O
m_dxdy	double
+=	O
(	O
dx	double
*	O
dy	double
-	O
m_dxdy	double
)	O
/	O
(	O
i	long
+	O
1.0	int
)	O
;	O
}	O
{	O
double	O
s2	double
=	O
0	int
,	O
d2	double
=	O
0	int
;	O
double	O
b	double
=	O
(	O
m_x	double
*	O
m_y	double
+	O
m_dxdy	double
)	O
/	O
(	O
m_x	double
*	O
m_x	double
+	O
m_dx2	double
)	O
;	O
*	O
c1	*(double)
=	O
b	double
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
n	int
;	O
i	long
++	O
)	O
{	O
const	O
double	O
dx	double
=	O
x	double
[	O
i	long
*	O
xstride	long
]	O
-	O
m_x	double
;	O
const	O
double	O
dy	double
=	O
y	double
[	O
i	long
*	O
ystride	long
]	O
-	O
m_y	double
;	O
const	O
double	O
d	double
=	O
(	O
m_y	double
-	O
b	double
*	O
m_x	double
)	O
+	O
dy	double
-	O
b	double
*	O
dx	double
;	O
d2	double
+=	O
d	double
*	O
d	double
;	O
}	O
s2	double
=	O
d2	double
/	O
(	O
n	int
-	O
1.0	int
)	O
;	O
*	O
cov_11	*(double)
=	O
s2	double
*	O
1.0	int
/	O
(	O
n	int
*	O
(	O
m_x	double
*	O
m_x	double
+	O
m_dx2	double
)	O
)	O
;	O
*	O
sumsq	*(double)
=	O
d2	double
;	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
int	O
gsl_fit_wmul	(*(double),long,*(double),long,*(double),long,long,*(double),*(double),*(double))->(int)
(	O
const	O
double	O
*	O
x	double
,	O
const	O
size_t	long
xstride	long
,	O
const	O
double	O
*	O
w	*(double)
,	O
const	O
size_t	long
wstride	long
,	O
const	O
double	O
*	O
y	double
,	O
const	O
size_t	long
ystride	long
,	O
const	O
size_t	long
n	int
,	O
double	O
*	O
c1	*(double)
,	O
double	O
*	O
cov_11	*(double)
,	O
double	O
*	O
chisq	*(double)
)	O
{	O
double	O
W	double
=	O
0	int
,	O
wm_x	double
=	O
0	int
,	O
wm_y	double
=	O
0	int
,	O
wm_dx2	double
=	O
0	int
,	O
wm_dxdy	double
=	O
0	int
;	O
size_t	long
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
n	int
;	O
i	long
++	O
)	O
{	O
const	O
double	O
wi	double
=	O
w	*(double)
[	O
i	long
*	O
wstride	long
]	O
;	O
if	O
(	O
wi	double
>	O
0	int
)	O
{	O
W	double
+=	O
wi	double
;	O
wm_x	double
+=	O
(	O
x	double
[	O
i	long
*	O
xstride	long
]	O
-	O
wm_x	double
)	O
*	O
(	O
wi	double
/	O
W	double
)	O
;	O
wm_y	double
+=	O
(	O
y	double
[	O
i	long
*	O
ystride	long
]	O
-	O
wm_y	double
)	O
*	O
(	O
wi	double
/	O
W	double
)	O
;	O
}	O
}	O
W	double
=	O
0	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
n	int
;	O
i	long
++	O
)	O
{	O
const	O
double	O
wi	double
=	O
w	*(double)
[	O
i	long
*	O
wstride	long
]	O
;	O
if	O
(	O
wi	double
>	O
0	int
)	O
{	O
const	O
double	O
dx	double
=	O
x	double
[	O
i	long
*	O
xstride	long
]	O
-	O
wm_x	double
;	O
const	O
double	O
dy	double
=	O
y	double
[	O
i	long
*	O
ystride	long
]	O
-	O
wm_y	double
;	O
W	double
+=	O
wi	double
;	O
wm_dx2	double
+=	O
(	O
dx	double
*	O
dx	double
-	O
wm_dx2	double
)	O
*	O
(	O
wi	double
/	O
W	double
)	O
;	O
wm_dxdy	double
+=	O
(	O
dx	double
*	O
dy	double
-	O
wm_dxdy	double
)	O
*	O
(	O
wi	double
/	O
W	double
)	O
;	O
}	O
}	O
{	O
double	O
d2	double
=	O
0	int
;	O
double	O
b	double
=	O
(	O
wm_x	double
*	O
wm_y	double
+	O
wm_dxdy	double
)	O
/	O
(	O
wm_x	double
*	O
wm_x	double
+	O
wm_dx2	double
)	O
;	O
*	O
c1	*(double)
=	O
b	double
;	O
*	O
cov_11	*(double)
=	O
1	int
/	O
(	O
W	double
*	O
(	O
wm_x	double
*	O
wm_x	double
+	O
wm_dx2	double
)	O
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
n	int
;	O
i	long
++	O
)	O
{	O
const	O
double	O
wi	double
=	O
w	*(double)
[	O
i	long
*	O
wstride	long
]	O
;	O
if	O
(	O
wi	double
>	O
0	int
)	O
{	O
const	O
double	O
dx	double
=	O
x	double
[	O
i	long
*	O
xstride	long
]	O
-	O
wm_x	double
;	O
const	O
double	O
dy	double
=	O
y	double
[	O
i	long
*	O
ystride	long
]	O
-	O
wm_y	double
;	O
const	O
double	O
d	double
=	O
(	O
wm_y	double
-	O
b	double
*	O
wm_x	double
)	O
+	O
(	O
dy	double
-	O
b	double
*	O
dx	double
)	O
;	O
d2	double
+=	O
wi	double
*	O
d	double
*	O
d	double
;	O
}	O
}	O
*	O
chisq	*(double)
=	O
d2	double
;	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
int	O
gsl_fit_mul_est	(double,double,double,*(double),*(double))->(int)
(	O
const	O
double	O
x	double
,	O
const	O
double	O
c1	*(double)
,	O
const	O
double	O
cov11	*(double)
,	O
double	O
*	O
y	double
,	O
double	O
*	O
y_err	*(double)
)	O
{	O
*	O
y	double
=	O
c1	*(double)
*	O
x	double
;	O
*	O
y_err	*(double)
=	O
sqrt	(double)->(double)
(	O
cov11	*(double)
)	O
*	O
fabs	(double)->(double)
(	O
x	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
