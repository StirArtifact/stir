void	O
base64_decode_init	O
(	O
struct	O
base64_decode_ctx	struct(*(char),short,char,char)
*	O
ctx	*(void)
)	O
{	O
static	O
const	O
signed	O
char	O
base64_decode_table	array(char)
[	O
0x100	int
]	O
=	O
{	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
2	int
,	O
-	O
2	int
,	O
-	O
2	int
,	O
-	O
2	int
,	O
-	O
2	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
2	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
62	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
63	int
,	O
52	int
,	O
53	int
,	O
54	int
,	O
55	int
,	O
56	int
,	O
57	int
,	O
58	int
,	O
59	int
,	O
60	int
,	O
61	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
3	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
0	int
,	O
1	int
,	O
2	int
,	O
3	int
,	O
4	int
,	O
5	int
,	O
6	int
,	O
7	int
,	O
8	int
,	O
9	int
,	O
10	int
,	O
11	int
,	O
12	int
,	O
13	int
,	O
14	int
,	O
15	int
,	O
16	int
,	O
17	int
,	O
18	int
,	O
19	int
,	O
20	int
,	O
21	int
,	O
22	int
,	O
23	int
,	O
24	int
,	O
25	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
26	int
,	O
27	int
,	O
28	int
,	O
29	int
,	O
30	int
,	O
31	int
,	O
32	int
,	O
33	int
,	O
34	int
,	O
35	int
,	O
36	int
,	O
37	int
,	O
38	int
,	O
39	int
,	O
40	int
,	O
41	int
,	O
42	int
,	O
43	int
,	O
44	int
,	O
45	int
,	O
46	int
,	O
47	int
,	O
48	int
,	O
49	int
,	O
50	int
,	O
51	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
}	O
;	O
ctx	*(void)
->	O
word	short
=	O
ctx	*(void)
->	O
bits	char
=	O
ctx	*(void)
->	O
padding	char
=	O
0	int
;	O
ctx	*(void)
->	O
table	*(char)
=	O
base64_decode_table	array(char)
;	O
}	O
int	O
base64_decode_single	O
(	O
struct	O
base64_decode_ctx	struct(*(char),short,char,char)
*	O
ctx	*(void)
,	O
uint8_t	char
*	O
dst	*(char)
,	O
char	O
src	*(char)
)	O
{	O
int	O
data	int
=	O
ctx	*(void)
->	O
table	*(char)
[	O
(	O
uint8_t	char
)	O
src	*(char)
]	O
;	O
switch	O
(	O
data	int
)	O
{	O
default	O
:	O
assert	O
(	O
data	int
>=	O
0	int
&&	O
data	int
<	O
0x40	int
)	O
;	O
if	O
(	O
ctx	*(void)
->	O
padding	char
)	O
return	O
-	O
1	int
;	O
ctx	*(void)
->	O
word	short
=	O
ctx	*(void)
->	O
word	short
<<	O
6	int
|	O
data	int
;	O
ctx	*(void)
->	O
bits	char
+=	O
6	int
;	O
if	O
(	O
ctx	*(void)
->	O
bits	char
>=	O
8	int
)	O
{	O
ctx	*(void)
->	O
bits	char
-=	O
8	int
;	O
dst	*(char)
[	O
0	int
]	O
=	O
ctx	*(void)
->	O
word	short
>>	O
ctx	*(void)
->	O
bits	char
;	O
return	O
1	int
;	O
}	O
else	O
return	O
0	int
;	O
case	O
TABLE_INVALID	O
:	O
return	O
-	O
1	int
;	O
case	O
TABLE_SPACE	O
:	O
return	O
0	int
;	O
case	O
TABLE_END	O
:	O
if	O
(	O
!	O
ctx	*(void)
->	O
bits	char
||	O
ctx	*(void)
->	O
padding	char
>	O
2	int
)	O
return	O
-	O
1	int
;	O
if	O
(	O
ctx	*(void)
->	O
word	short
&	O
(	O
(	O
1	int
<<	O
ctx	*(void)
->	O
bits	char
)	O
-	O
1	int
)	O
)	O
return	O
-	O
1	int
;	O
ctx	*(void)
->	O
padding	char
++	O
;	O
ctx	*(void)
->	O
bits	char
-=	O
2	int
;	O
return	O
0	int
;	O
}	O
}	O
int	O
base64_decode_update	O
(	O
struct	O
base64_decode_ctx	struct(*(char),short,char,char)
*	O
ctx	*(void)
,	O
size_t	long
*	O
dst_length	*(long)
,	O
uint8_t	char
*	O
dst	*(char)
,	O
size_t	long
src_length	long
,	O
const	O
char	O
*	O
src	*(char)
)	O
{	O
size_t	long
done	long
;	O
size_t	long
i	long
;	O
for	O
(	O
i	long
=	O
0	int
,	O
done	long
=	O
0	int
;	O
i	long
<	O
src_length	long
;	O
i	long
++	O
)	O
switch	O
(	O
base64_decode_single	O
(	O
ctx	*(void)
,	O
dst	*(char)
+	O
done	long
,	O
src	*(char)
[	O
i	long
]	O
)	O
)	O
{	O
case	O
-	O
1	int
:	O
return	O
0	int
;	O
case	O
1	int
:	O
done	long
++	O
;	O
case	O
0	int
:	O
break	O
;	O
default	O
:	O
abort	()->(void)
(	O
)	O
;	O
}	O
assert	O
(	O
done	long
<=	O
BASE64_DECODE_LENGTH	O
(	O
src_length	long
)	O
)	O
;	O
*	O
dst_length	*(long)
=	O
done	long
;	O
return	O
1	int
;	O
}	O
int	O
base64_decode_final	O
(	O
struct	O
base64_decode_ctx	struct(*(char),short,char,char)
*	O
ctx	*(void)
)	O
{	O
return	O
ctx	*(void)
->	O
bits	char
==	O
0	int
;	O
}	O
