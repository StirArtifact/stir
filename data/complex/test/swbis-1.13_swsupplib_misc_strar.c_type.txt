static	O
int	O
f_strcmp	(int,*(void),*(void))->(int)
(	O
int	O
sense	int
,	O
const	O
void	O
*	O
vf1	*(void)
,	O
const	O
void	O
*	O
vf2	*(void)
)	O
{	O
char	O
*	O
f1	*(char)
;	O
char	O
*	O
f2	*(char)
;	O
f1	*(char)
=	O
*	O
(	O
(	O
char	O
*	O
*	O
)	O
(	O
vf1	*(void)
)	O
)	O
;	O
f2	*(char)
=	O
*	O
(	O
(	O
char	O
*	O
*	O
)	O
(	O
vf2	*(void)
)	O
)	O
;	O
if	O
(	O
sense	int
<	O
0	int
)	O
return	O
-	O
strcmp	(*(char),*(char))->(int)
(	O
f1	*(char)
,	O
f2	*(char)
)	O
;	O
return	O
strcmp	(*(char),*(char))->(int)
(	O
f1	*(char)
,	O
f2	*(char)
)	O
;	O
}	O
STRAR	struct(int,int,*(struct(*(*(char)),int,int,long,int)),*(struct(*(char),*(char),int,int,int,char,int)))
*	O
strar_copy_construct	(*(struct(int,int,*(struct(*`,int,int,long,int)),*(struct(*`,*`,int,int,int,char,int)))))->(*(struct(int,int,*(struct(*`,int,int,long,int)),*(struct(*`,*`,int,int,int,char,int)))))
(	O
STRAR	struct(int,int,*(struct(*(*(char)),int,int,long,int)),*(struct(*(char),*(char),int,int,int,char,int)))
*	O
src	*(char)
)	O
{	O
int	O
i	int
;	O
char	O
*	O
s	*(struct(*(char),*(char),int,int,int,char,int))
;	O
STRAR	struct(int,int,*(struct(*(*(char)),int,int,long,int)),*(struct(*(char),*(char),int,int,int,char,int)))
*	O
ret	*(struct(int,int,*(struct(*(*`),int,int,long,int)),*(struct(*(char),*(char),int,int,int,char,int))))
;	O
if	O
(	O
!	O
src	*(char)
)	O
return	O
NULL	O
;	O
ret	*(struct(int,int,*(struct(*(*`),int,int,long,int)),*(struct(*(char),*(char),int,int,int,char,int))))
=	O
strar_open	()->(*(struct(int,int,*(struct(*`,int,int,long,int)),*(struct(*`,*`,int,int,int,char,int)))))
(	O
)	O
;	O
if	O
(	O
!	O
ret	*(struct(int,int,*(struct(*(*`),int,int,long,int)),*(struct(*(char),*(char),int,int,int,char,int))))
)	O
return	O
NULL	O
;	O
i	int
=	O
0	int
;	O
while	O
(	O
(	O
s	*(struct(*(char),*(char),int,int,int,char,int))
=	O
strar_get	(*(struct(int,int,*(struct(*`,int,int,long,int)),*(struct(*`,*`,int,int,int,char,int)))),int)->(*(char))
(	O
src	*(char)
,	O
i	int
++	O
)	O
)	O
)	O
{	O
strar_add	(*(struct(int,int,*(struct(*`,int,int,long,int)),*(struct(*`,*`,int,int,int,char,int)))),*(char))->(int)
(	O
ret	*(struct(int,int,*(struct(*(*`),int,int,long,int)),*(struct(*(char),*(char),int,int,int,char,int))))
,	O
s	*(struct(*(char),*(char),int,int,int,char,int))
)	O
;	O
}	O
return	O
ret	*(struct(int,int,*(struct(*(*`),int,int,long,int)),*(struct(*(char),*(char),int,int,int,char,int))))
;	O
}	O
STRAR	struct(int,int,*(struct(*(*(char)),int,int,long,int)),*(struct(*(char),*(char),int,int,int,char,int)))
*	O
strar_open	()->(*(struct(int,int,*(struct(*`,int,int,long,int)),*(struct(*`,*`,int,int,int,char,int)))))
(	O
void	O
)	O
{	O
STRAR	struct(int,int,*(struct(*(*(char)),int,int,long,int)),*(struct(*(char),*(char),int,int,int,char,int)))
*	O
strb	*(struct(*(char),*(char),int,int,int,char,int))
;	O
strb	*(struct(*(char),*(char),int,int,int,char,int))
=	O
(	O
STRAR	struct(int,int,*(struct(*(*(char)),int,int,long,int)),*(struct(*(char),*(char),int,int,int,char,int)))
*	O
)	O
malloc	(long)->(*(void))
(	O
sizeof	O
(	O
STRAR	struct(int,int,*(struct(*(*(char)),int,int,long,int)),*(struct(*(char),*(char),int,int,int,char,int)))
)	O
)	O
;	O
if	O
(	O
strb	*(struct(*(char),*(char),int,int,int,char,int))
==	O
(	O
STRAR	struct(int,int,*(struct(*(*(char)),int,int,long,int)),*(struct(*(char),*(char),int,int,int,char,int)))
*	O
)	O
(	O
NULL	O
)	O
)	O
return	O
(	O
STRAR	struct(int,int,*(struct(*(*(char)),int,int,long,int)),*(struct(*(char),*(char),int,int,int,char,int)))
*	O
)	O
(	O
NULL	O
)	O
;	O
strb	*(struct(*(char),*(char),int,int,int,char,int))
->	O
lenM	int
=	O
0	int
;	O
strb	*(struct(*(char),*(char),int,int,int,char,int))
->	O
nsM	int
=	O
0	int
;	O
strb	*(struct(*(char),*(char),int,int,int,char,int))
->	O
storageM	*(struct(*(char),*(char),int,int,int,char,int))
=	O
strob_open	(long)->(*(struct(*(char),*(char),int,int,int,char,int)))
(	O
132	int
)	O
;	O
strb	*(struct(*(char),*(char),int,int,int,char,int))
->	O
listM	*(struct(*(*(char)),int,int,long,int))
=	O
cplob_open	(int)->(*(struct(*(*(char)),int,int,long,int)))
(	O
10	int
)	O
;	O
cplob_add_nta	(*(struct(*(*(char)),int,int,long,int)),*(char))->(void)
(	O
strb	*(struct(*(char),*(char),int,int,int,char,int))
->	O
listM	*(struct(*(*(char)),int,int,long,int))
,	O
NULL	O
)	O
;	O
return	O
strb	*(struct(*(char),*(char),int,int,int,char,int))
;	O
}	O
void	O
strar_reset	(*(struct(int,int,*(struct(*`,int,int,long,int)),*(struct(*`,*`,int,int,int,char,int)))))->(void)
(	O
STRAR	struct(int,int,*(struct(*(*(char)),int,int,long,int)),*(struct(*(char),*(char),int,int,int,char,int)))
*	O
strar	*(struct(int,int,*(struct(*(*`),int,int,long,int)),*(struct(*(char),*(char),int,int,int,char,int))))
)	O
{	O
strar	*(struct(int,int,*(struct(*(*`),int,int,long,int)),*(struct(*(char),*(char),int,int,int,char,int))))
->	O
lenM	int
=	O
0	int
;	O
strar	*(struct(int,int,*(struct(*(*`),int,int,long,int)),*(struct(*(char),*(char),int,int,int,char,int))))
->	O
nsM	int
=	O
0	int
;	O
strob_strcpy	(*(struct(*(char),*(char),int,int,int,char,int)),*(char))->(*(char))
(	O
strar	*(struct(int,int,*(struct(*(*`),int,int,long,int)),*(struct(*(char),*(char),int,int,int,char,int))))
->	O
storageM	*(struct(*(char),*(char),int,int,int,char,int))
,	O
""	*(char)
)	O
;	O
cplob_shallow_reset	(*(struct(*(*(char)),int,int,long,int)))->(void)
(	O
strar	*(struct(int,int,*(struct(*(*`),int,int,long,int)),*(struct(*(char),*(char),int,int,int,char,int))))
->	O
listM	*(struct(*(*(char)),int,int,long,int))
)	O
;	O
}	O
void	O
strar_close	(*(struct(int,int,*(struct(*`,int,int,long,int)),*(struct(*`,*`,int,int,int,char,int)))))->(void)
(	O
STRAR	struct(int,int,*(struct(*(*(char)),int,int,long,int)),*(struct(*(char),*(char),int,int,int,char,int)))
*	O
strar	*(struct(int,int,*(struct(*(*`),int,int,long,int)),*(struct(*(char),*(char),int,int,int,char,int))))
)	O
{	O
strob_close	(*(struct(*(char),*(char),int,int,int,char,int)))->(int)
(	O
strar	*(struct(int,int,*(struct(*(*`),int,int,long,int)),*(struct(*(char),*(char),int,int,int,char,int))))
->	O
storageM	*(struct(*(char),*(char),int,int,int,char,int))
)	O
;	O
swbis_free	O
(	O
cplob_release	(*(struct(*(*(char)),int,int,long,int)))->(*(*(char)))
(	O
strar	*(struct(int,int,*(struct(*(*`),int,int,long,int)),*(struct(*(char),*(char),int,int,int,char,int))))
->	O
listM	*(struct(*(*(char)),int,int,long,int))
)	O
)	O
;	O
swbis_free	O
(	O
strar	*(struct(int,int,*(struct(*(*`),int,int,long,int)),*(struct(*(char),*(char),int,int,int,char,int))))
)	O
;	O
return	O
;	O
}	O
int	O
strar_num_elements	(*(struct(int,int,*(struct(*`,int,int,long,int)),*(struct(*`,*`,int,int,int,char,int)))))->(int)
(	O
STRAR	struct(int,int,*(struct(*(*(char)),int,int,long,int)),*(struct(*(char),*(char),int,int,int,char,int)))
*	O
strar	*(struct(int,int,*(struct(*(*`),int,int,long,int)),*(struct(*(char),*(char),int,int,int,char,int))))
)	O
{	O
return	O
strar	*(struct(int,int,*(struct(*(*`),int,int,long,int)),*(struct(*(char),*(char),int,int,int,char,int))))
->	O
nsM	int
;	O
}	O
char	O
*	O
strar_get	(*(struct(int,int,*(struct(*`,int,int,long,int)),*(struct(*`,*`,int,int,int,char,int)))),int)->(*(char))
(	O
STRAR	struct(int,int,*(struct(*(*(char)),int,int,long,int)),*(struct(*(char),*(char),int,int,int,char,int)))
*	O
strar	*(struct(int,int,*(struct(*(*`),int,int,long,int)),*(struct(*(char),*(char),int,int,int,char,int))))
,	O
int	O
index	(*(char),int)->(*(char))
)	O
{	O
char	O
*	O
s	*(struct(*(char),*(char),int,int,int,char,int))
;	O
if	O
(	O
index	(*(char),int)->(*(char))
>=	O
strar	*(struct(int,int,*(struct(*(*`),int,int,long,int)),*(struct(*(char),*(char),int,int,int,char,int))))
->	O
nsM	int
||	O
index	(*(char),int)->(*(char))
<	O
0	int
)	O
return	O
NULL	O
;	O
s	*(struct(*(char),*(char),int,int,int,char,int))
=	O
cplob_val	(*(struct(*(*(char)),int,int,long,int)),int)->(*(char))
(	O
strar	*(struct(int,int,*(struct(*(*`),int,int,long,int)),*(struct(*(char),*(char),int,int,int,char,int))))
->	O
listM	*(struct(*(*(char)),int,int,long,int))
,	O
index	(*(char),int)->(*(char))
)	O
;	O
return	O
s	*(struct(*(char),*(char),int,int,int,char,int))
;	O
}	O
char	O
*	O
strar_return_store	(*(struct(int,int,*(struct(*`,int,int,long,int)),*(struct(*`,*`,int,int,int,char,int)))),int)->(*(char))
(	O
STRAR	struct(int,int,*(struct(*(*(char)),int,int,long,int)),*(struct(*(char),*(char),int,int,int,char,int)))
*	O
strar	*(struct(int,int,*(struct(*(*`),int,int,long,int)),*(struct(*(char),*(char),int,int,int,char,int))))
,	O
int	O
len	int
)	O
{	O
char	O
*	O
oldbase	*(char)
;	O
char	O
*	O
base	int
;	O
char	O
*	O
last	*(char)
;	O
int	O
nused	int
;	O
strar	*(struct(int,int,*(struct(*(*`),int,int,long,int)),*(struct(*(char),*(char),int,int,int,char,int))))
->	O
lenM	int
=	O
strar	*(struct(int,int,*(struct(*(*`),int,int,long,int)),*(struct(*(char),*(char),int,int,int,char,int))))
->	O
lenM	int
+	O
len	int
+	O
1	int
;	O
oldbase	*(char)
=	O
strob_str	(*(struct(*(char),*(char),int,int,int,char,int)))->(*(char))
(	O
strar	*(struct(int,int,*(struct(*(*`),int,int,long,int)),*(struct(*(char),*(char),int,int,int,char,int))))
->	O
storageM	*(struct(*(char),*(char),int,int,int,char,int))
)	O
;	O
strob_set_memlength	(*(struct(*(char),*(char),int,int,int,char,int)),int)->(void)
(	O
strar	*(struct(int,int,*(struct(*(*`),int,int,long,int)),*(struct(*(char),*(char),int,int,int,char,int))))
->	O
storageM	*(struct(*(char),*(char),int,int,int,char,int))
,	O
strar	*(struct(int,int,*(struct(*(*`),int,int,long,int)),*(struct(*(char),*(char),int,int,int,char,int))))
->	O
lenM	int
)	O
;	O
base	int
=	O
strob_str	(*(struct(*(char),*(char),int,int,int,char,int)))->(*(char))
(	O
strar	*(struct(int,int,*(struct(*(*`),int,int,long,int)),*(struct(*(char),*(char),int,int,int,char,int))))
->	O
storageM	*(struct(*(char),*(char),int,int,int,char,int))
)	O
;	O
strar	*(struct(int,int,*(struct(*(*`),int,int,long,int)),*(struct(*(char),*(char),int,int,int,char,int))))
->	O
nsM	int
++	O
;	O
if	O
(	O
base	int
!=	O
oldbase	*(char)
)	O
{	O
int	O
index	(*(char),int)->(*(char))
=	O
0	int
;	O
char	O
*	O
p	*(char)
;	O
while	O
(	O
(	O
p	*(char)
=	O
cplob_val	(*(struct(*(*(char)),int,int,long,int)),int)->(*(char))
(	O
strar	*(struct(int,int,*(struct(*(*`),int,int,long,int)),*(struct(*(char),*(char),int,int,int,char,int))))
->	O
listM	*(struct(*(*(char)),int,int,long,int))
,	O
index	(*(char),int)->(*(char))
)	O
)	O
)	O
{	O
cplob_additem	(*(struct(*(*(char)),int,int,long,int)),int,*(char))->(void)
(	O
strar	*(struct(int,int,*(struct(*(*`),int,int,long,int)),*(struct(*(char),*(char),int,int,int,char,int))))
->	O
listM	*(struct(*(*(char)),int,int,long,int))
,	O
index	(*(char),int)->(*(char))
,	O
base	int
+	O
(	O
(	O
int	O
)	O
(	O
p	*(char)
-	O
oldbase	*(char)
)	O
)	O
)	O
;	O
index	(*(char),int)->(*(char))
++	O
;	O
}	O
}	O
nused	int
=	O
cplob_get_nused	(*(struct(*(*(char)),int,int,long,int)))->(int)
(	O
strar	*(struct(int,int,*(struct(*(*`),int,int,long,int)),*(struct(*(char),*(char),int,int,int,char,int))))
->	O
listM	*(struct(*(*(char)),int,int,long,int))
)	O
-	O
1	int
;	O
if	O
(	O
nused	int
>	O
0	int
)	O
{	O
last	*(char)
=	O
cplob_val	(*(struct(*(*(char)),int,int,long,int)),int)->(*(char))
(	O
strar	*(struct(int,int,*(struct(*(*`),int,int,long,int)),*(struct(*(char),*(char),int,int,int,char,int))))
->	O
listM	*(struct(*(*(char)),int,int,long,int))
,	O
nused	int
-	O
1	int
)	O
;	O
}	O
else	O
{	O
last	*(char)
=	O
NULL	O
;	O
}	O
if	O
(	O
last	*(char)
)	O
{	O
last	*(char)
=	O
last	*(char)
+	O
strlen	(*(char))->(long)
(	O
last	*(char)
)	O
+	O
1	int
;	O
}	O
else	O
{	O
last	*(char)
=	O
base	int
;	O
}	O
cplob_add_nta	(*(struct(*(*(char)),int,int,long,int)),*(char))->(void)
(	O
strar	*(struct(int,int,*(struct(*(*`),int,int,long,int)),*(struct(*(char),*(char),int,int,int,char,int))))
->	O
listM	*(struct(*(*(char)),int,int,long,int))
,	O
last	*(char)
)	O
;	O
memset	(*(void),int,long)->(*(void))
(	O
last	*(char)
,	O
(	O
int	O
)	O
'_'	O
,	O
len	int
)	O
;	O
*	O
(	O
last	*(char)
+	O
len	int
)	O
=	O
'\0'	O
;	O
return	O
last	*(char)
;	O
}	O
int	O
strar_add	(*(struct(int,int,*(struct(*`,int,int,long,int)),*(struct(*`,*`,int,int,int,char,int)))),*(char))->(int)
(	O
STRAR	struct(int,int,*(struct(*(*(char)),int,int,long,int)),*(struct(*(char),*(char),int,int,int,char,int)))
*	O
strar	*(struct(int,int,*(struct(*(*`),int,int,long,int)),*(struct(*(char),*(char),int,int,int,char,int))))
,	O
char	O
*	O
src	*(char)
)	O
{	O
char	O
*	O
last	*(char)
;	O
last	*(char)
=	O
strar_return_store	(*(struct(int,int,*(struct(*`,int,int,long,int)),*(struct(*`,*`,int,int,int,char,int)))),int)->(*(char))
(	O
strar	*(struct(int,int,*(struct(*(*`),int,int,long,int)),*(struct(*(char),*(char),int,int,int,char,int))))
,	O
strlen	(*(char))->(long)
(	O
src	*(char)
)	O
)	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
last	*(char)
,	O
src	*(char)
)	O
;	O
return	O
0	int
;	O
}	O
void	O
strar_qsort	(*(struct(int,int,*(struct(*`,int,int,long,int)),*(struct(*`,*`,int,int,int,char,int)))),*((*(void),*(void))->(int)))->(void)
(	O
STRAR	struct(int,int,*(struct(*(*(char)),int,int,long,int)),*(struct(*(char),*(char),int,int,int,char,int)))
*	O
strar	*(struct(int,int,*(struct(*(*`),int,int,long,int)),*(struct(*(char),*(char),int,int,int,char,int))))
,	O
int	O
(	O
*	O
f_comp	*((*(void),*(void))->(int))
)	O
(	O
const	O
void	O
*	O
,	O
const	O
void	O
*	O
)	O
)	O
{	O
size_t	long
nused	int
;	O
nused	int
=	O
(	O
size_t	long
)	O
cplob_get_nused	(*(struct(*(*(char)),int,int,long,int)))->(int)
(	O
strar	*(struct(int,int,*(struct(*(*`),int,int,long,int)),*(struct(*(char),*(char),int,int,int,char,int))))
->	O
listM	*(struct(*(*(char)),int,int,long,int))
)	O
-	O
1	int
;	O
std_quicksort	(*(void),long,long,*((*(void),*(void))->(int)))->(void)
(	O
strar	*(struct(int,int,*(struct(*(*`),int,int,long,int)),*(struct(*(char),*(char),int,int,int,char,int))))
->	O
listM	*(struct(*(*(char)),int,int,long,int))
->	O
list	*(*(char))
,	O
(	O
size_t	long
)	O
nused	int
,	O
sizeof	O
(	O
char	O
*	O
)	O
,	O
f_comp	*((*(void),*(void))->(int))
)	O
;	O
}	O
int	O
strar_qsort_neg_strcmp	(*(void),*(void))->(int)
(	O
const	O
void	O
*	O
vf1	*(void)
,	O
const	O
void	O
*	O
vf2	*(void)
)	O
{	O
return	O
f_strcmp	(int,*(void),*(void))->(int)
(	O
-	O
1	int
,	O
vf1	*(void)
,	O
vf2	*(void)
)	O
;	O
}	O
int	O
strar_qsort_strcmp	(*(void),*(void))->(int)
(	O
const	O
void	O
*	O
vf1	*(void)
,	O
const	O
void	O
*	O
vf2	*(void)
)	O
{	O
return	O
f_strcmp	(int,*(void),*(void))->(int)
(	O
1	int
,	O
vf1	*(void)
,	O
vf2	*(void)
)	O
;	O
}	O
void	O
strar_remove_index	(*(struct(int,int,*(struct(*`,int,int,long,int)),*(struct(*`,*`,int,int,int,char,int)))),int)->(void)
(	O
STRAR	struct(int,int,*(struct(*(*(char)),int,int,long,int)),*(struct(*(char),*(char),int,int,int,char,int)))
*	O
strar	*(struct(int,int,*(struct(*(*`),int,int,long,int)),*(struct(*(char),*(char),int,int,int,char,int))))
,	O
int	O
index	(*(char),int)->(*(char))
)	O
{	O
cplob_remove_index	(*(struct(*(*(char)),int,int,long,int)),int)->(int)
(	O
strar	*(struct(int,int,*(struct(*(*`),int,int,long,int)),*(struct(*(char),*(char),int,int,int,char,int))))
->	O
listM	*(struct(*(*(char)),int,int,long,int))
,	O
index	(*(char),int)->(*(char))
)	O
;	O
strar	*(struct(int,int,*(struct(*(*`),int,int,long,int)),*(struct(*(char),*(char),int,int,int,char,int))))
->	O
nsM	int
--	O
;	O
}	O
