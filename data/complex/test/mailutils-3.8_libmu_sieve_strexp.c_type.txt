enum	O
segm_type	enum(int,int)
{	O
segm_copy	int
,	O
segm_repl	int
}	O
;	O
struct	O
string_segment	struct(enum(int,int),long,long,*(char))
{	O
enum	O
segm_type	enum(int,int)
type	int
;	O
size_t	long
beg	struct(*(char),int,int)
;	O
size_t	long
end	struct(*(char),int,int)
;	O
char	O
*	O
repl	*(char)
;	O
}	O
;	O
struct	O
stringbuf	struct(*(char),long,long,*(struct),array(struct(array(long),int,struct(array(long)))),*(char),*(char),*((*(char),long,*(*(char)),*(void))->(int)),*(void))
{	O
char	O
const	O
*	O
string	*(*(char))
;	O
size_t	long
length	long
;	O
size_t	long
pos	long
;	O
mu_list_t	*(struct)
seglist	*(struct)
;	O
jmp_buf	array(struct(array(long),int,struct(array(long))))
errbuf	array(struct(array(long),int,struct(array(long))))
;	O
char	O
*	O
expansion	*(*(char))
;	O
char	O
*	O
endptr	*(char)
;	O
mu_i_sv_interp_t	*((*(char),long,*(*(char)),*(void))->(int))
interp	*((*(char),long,*(*(char)),*(void))->(int))
;	O
void	O
*	O
data	*(void)
;	O
}	O
;	O
static	O
struct	O
string_segment	struct(enum(int,int),long,long,*(char))
*	O
segment_alloc	(*(struct(*(char),long,long,*(struct),array(struct(array(long),int,struct(array(long)))),*(char),*(char),*((*`,long,*`,*`)->(int)),*(void))),long,enum(int,int))->(*(struct(enum(int,int),long,long,*(char))))
(	O
struct	O
stringbuf	struct(*(char),long,long,*(struct),array(struct(array(long),int,struct(array(long)))),*(char),*(char),*((*(char),long,*(*(char)),*(void))->(int)),*(void))
*	O
buf	*(char)
,	O
size_t	long
beg	struct(*(char),int,int)
,	O
enum	O
segm_type	enum(int,int)
type	int
)	O
{	O
int	O
rc	int
;	O
struct	O
string_segment	struct(enum(int,int),long,long,*(char))
*	O
segm	*(struct(enum(int,int),long,long,*(char)))
;	O
segm	*(struct(enum(int,int),long,long,*(char)))
=	O
malloc	(long)->(*(void))
(	O
sizeof	O
*	O
segm	*(struct(enum(int,int),long,long,*(char)))
)	O
;	O
if	O
(	O
!	O
segm	*(struct(enum(int,int),long,long,*(char)))
)	O
longjmp	(array(struct(array(long),int,struct(array(long)))),int)->(void)
(	O
buf	*(char)
->	O
errbuf	array(struct(array(long),int,struct(array(long))))
,	O
ENOMEM	int
)	O
;	O
segm	*(struct(enum(int,int),long,long,*(char)))
->	O
type	int
=	O
type	int
;	O
segm	*(struct(enum(int,int),long,long,*(char)))
->	O
beg	struct(*(char),int,int)
=	O
beg	struct(*(char),int,int)
;	O
segm	*(struct(enum(int,int),long,long,*(char)))
->	O
end	struct(*(char),int,int)
=	O
buf	*(char)
->	O
pos	long
-	O
1	int
;	O
rc	int
=	O
mu_list_append	(*(struct),*(void))->(int)
(	O
buf	*(char)
->	O
seglist	*(struct)
,	O
segm	*(struct(enum(int,int),long,long,*(char)))
)	O
;	O
if	O
(	O
rc	int
)	O
longjmp	(array(struct(array(long),int,struct(array(long)))),int)->(void)
(	O
buf	*(char)
->	O
errbuf	array(struct(array(long),int,struct(array(long))))
,	O
rc	int
)	O
;	O
return	O
segm	*(struct(enum(int,int),long,long,*(char)))
;	O
}	O
static	O
void	O
segm_free	(*(void))->(void)
(	O
void	O
*	O
data	*(void)
)	O
{	O
struct	O
string_segment	struct(enum(int,int),long,long,*(char))
*	O
segm	*(struct(enum(int,int),long,long,*(char)))
=	O
data	*(void)
;	O
if	O
(	O
segm	*(struct(enum(int,int),long,long,*(char)))
->	O
type	int
==	O
segm_repl	int
)	O
free	(*(void))->(void)
(	O
segm	*(struct(enum(int,int),long,long,*(char)))
->	O
repl	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
segm	*(struct(enum(int,int),long,long,*(char)))
)	O
;	O
}	O
static	O
void	O
string_next_fragment	(*(struct(*(char),long,long,*(struct),array(struct(array(long),int,struct(array(long)))),*(char),*(char),*((*`,long,*`,*`)->(int)),*(void))))->(void)
(	O
struct	O
stringbuf	struct(*(char),long,long,*(struct),array(struct(array(long),int,struct(array(long)))),*(char),*(char),*((*(char),long,*(*(char)),*(void))->(int)),*(void))
*	O
buf	*(char)
)	O
{	O
size_t	long
beg	struct(*(char),int,int)
;	O
struct	O
string_segment	struct(enum(int,int),long,long,*(char))
*	O
segm	*(struct(enum(int,int),long,long,*(char)))
;	O
char	O
*	O
exp	*(char)
;	O
beg	struct(*(char),int,int)
=	O
buf	*(char)
->	O
pos	long
;	O
while	O
(	O
buf	*(char)
->	O
pos	long
<	O
buf	*(char)
->	O
length	long
)	O
{	O
if	O
(	O
buf	*(char)
->	O
string	*(*(char))
[	O
buf	*(char)
->	O
pos	long
]	O
==	O
'$'	O
&&	O
buf	*(char)
->	O
pos	long
+	O
1	int
<	O
buf	*(char)
->	O
length	long
&&	O
buf	*(char)
->	O
string	*(*(char))
[	O
buf	*(char)
->	O
pos	long
+	O
1	int
]	O
==	O
'{'	O
)	O
break	O
;	O
buf	*(char)
->	O
pos	long
++	O
;	O
}	O
segm	*(struct(enum(int,int),long,long,*(char)))
=	O
segment_alloc	(*(struct(*(char),long,long,*(struct),array(struct(array(long),int,struct(array(long)))),*(char),*(char),*((*`,long,*`,*`)->(int)),*(void))),long,enum(int,int))->(*(struct(enum(int,int),long,long,*(char))))
(	O
buf	*(char)
,	O
beg	struct(*(char),int,int)
,	O
segm_copy	int
)	O
;	O
if	O
(	O
buf	*(char)
->	O
pos	long
==	O
buf	*(char)
->	O
length	long
)	O
return	O
;	O
beg	struct(*(char),int,int)
=	O
buf	*(char)
->	O
pos	long
;	O
buf	*(char)
->	O
pos	long
+=	O
2	int
;	O
while	O
(	O
buf	*(char)
->	O
pos	long
<	O
buf	*(char)
->	O
length	long
)	O
{	O
if	O
(	O
buf	*(char)
->	O
string	*(*(char))
[	O
buf	*(char)
->	O
pos	long
]	O
==	O
'$'	O
&&	O
buf	*(char)
->	O
pos	long
+	O
1	int
<	O
buf	*(char)
->	O
length	long
&&	O
buf	*(char)
->	O
string	*(*(char))
[	O
buf	*(char)
->	O
pos	long
+	O
1	int
]	O
==	O
'{'	O
)	O
{	O
segm	*(struct(enum(int,int),long,long,*(char)))
->	O
end	struct(*(char),int,int)
=	O
buf	*(char)
->	O
pos	long
-	O
1	int
;	O
beg	struct(*(char),int,int)
=	O
buf	*(char)
->	O
pos	long
;	O
buf	*(char)
->	O
pos	long
++	O
;	O
}	O
else	O
if	O
(	O
buf	*(char)
->	O
string	*(*(char))
[	O
buf	*(char)
->	O
pos	long
]	O
==	O
'}'	O
)	O
break	O
;	O
buf	*(char)
->	O
pos	long
++	O
;	O
}	O
if	O
(	O
buf	*(char)
->	O
pos	long
==	O
buf	*(char)
->	O
length	long
)	O
{	O
segm	*(struct(enum(int,int),long,long,*(char)))
->	O
end	struct(*(char),int,int)
=	O
buf	*(char)
->	O
pos	long
-	O
1	int
;	O
return	O
;	O
}	O
if	O
(	O
buf	*(char)
->	O
interp	*((*(char),long,*(*(char)),*(void))->(int))
(	O
buf	*(char)
->	O
string	*(*(char))
+	O
beg	struct(*(char),int,int)
+	O
2	int
,	O
buf	*(char)
->	O
pos	long
-	O
beg	struct(*(char),int,int)
-	O
2	int
,	O
&	O
exp	*(char)
,	O
buf	*(char)
->	O
data	*(void)
)	O
==	O
0	int
)	O
{	O
segm	*(struct(enum(int,int),long,long,*(char)))
=	O
segment_alloc	(*(struct(*(char),long,long,*(struct),array(struct(array(long),int,struct(array(long)))),*(char),*(char),*((*`,long,*`,*`)->(int)),*(void))),long,enum(int,int))->(*(struct(enum(int,int),long,long,*(char))))
(	O
buf	*(char)
,	O
beg	struct(*(char),int,int)
,	O
segm_repl	int
)	O
;	O
segm	*(struct(enum(int,int),long,long,*(char)))
->	O
repl	*(char)
=	O
exp	*(char)
;	O
}	O
else	O
segm	*(struct(enum(int,int),long,long,*(char)))
->	O
end	struct(*(char),int,int)
=	O
buf	*(char)
->	O
pos	long
;	O
buf	*(char)
->	O
pos	long
++	O
;	O
}	O
struct	O
segm_stat	struct(long,long)
{	O
size_t	long
end	struct(*(char),int,int)
;	O
size_t	long
len	long
;	O
}	O
;	O
static	O
int	O
update_len	(*(void),*(void))->(int)
(	O
void	O
*	O
item	*(void)
,	O
void	O
*	O
data	*(void)
)	O
{	O
struct	O
string_segment	struct(enum(int,int),long,long,*(char))
*	O
segm	*(struct(enum(int,int),long,long,*(char)))
=	O
item	*(void)
;	O
struct	O
segm_stat	struct(long,long)
*	O
st	*(struct(long,long,long))
=	O
data	*(void)
;	O
switch	O
(	O
segm	*(struct(enum(int,int),long,long,*(char)))
->	O
type	int
)	O
{	O
case	O
segm_copy	int
:	O
if	O
(	O
segm	*(struct(enum(int,int),long,long,*(char)))
->	O
beg	struct(*(char),int,int)
==	O
st	*(struct(long,long,long))
->	O
end	struct(*(char),int,int)
)	O
st	*(struct(long,long,long))
->	O
end	struct(*(char),int,int)
=	O
segm	*(struct(enum(int,int),long,long,*(char)))
->	O
end	struct(*(char),int,int)
;	O
st	*(struct(long,long,long))
->	O
len	long
+=	O
segm	*(struct(enum(int,int),long,long,*(char)))
->	O
end	struct(*(char),int,int)
-	O
segm	*(struct(enum(int,int),long,long,*(char)))
->	O
beg	struct(*(char),int,int)
+	O
1	int
;	O
break	O
;	O
case	O
segm_repl	int
:	O
if	O
(	O
segm	*(struct(enum(int,int),long,long,*(char)))
->	O
repl	*(char)
)	O
st	*(struct(long,long,long))
->	O
len	long
+=	O
strlen	(*(char))->(long)
(	O
segm	*(struct(enum(int,int),long,long,*(char)))
->	O
repl	*(char)
)	O
;	O
break	O
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
append_segm	(*(void),*(void))->(int)
(	O
void	O
*	O
item	*(void)
,	O
void	O
*	O
data	*(void)
)	O
{	O
struct	O
string_segment	struct(enum(int,int),long,long,*(char))
*	O
segm	*(struct(enum(int,int),long,long,*(char)))
=	O
item	*(void)
;	O
struct	O
stringbuf	struct(*(char),long,long,*(struct),array(struct(array(long),int,struct(array(long)))),*(char),*(char),*((*(char),long,*(*(char)),*(void))->(int)),*(void))
*	O
buf	*(char)
=	O
data	*(void)
;	O
size_t	long
len	long
;	O
switch	O
(	O
segm	*(struct(enum(int,int),long,long,*(char)))
->	O
type	int
)	O
{	O
case	O
segm_copy	int
:	O
len	long
=	O
segm	*(struct(enum(int,int),long,long,*(char)))
->	O
end	struct(*(char),int,int)
-	O
segm	*(struct(enum(int,int),long,long,*(char)))
->	O
beg	struct(*(char),int,int)
+	O
1	int
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
buf	*(char)
->	O
endptr	*(char)
,	O
buf	*(char)
->	O
string	*(*(char))
+	O
segm	*(struct(enum(int,int),long,long,*(char)))
->	O
beg	struct(*(char),int,int)
,	O
len	long
)	O
;	O
break	O
;	O
case	O
segm_repl	int
:	O
if	O
(	O
segm	*(struct(enum(int,int),long,long,*(char)))
->	O
repl	*(char)
)	O
{	O
len	long
=	O
strlen	(*(char))->(long)
(	O
segm	*(struct(enum(int,int),long,long,*(char)))
->	O
repl	*(char)
)	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
buf	*(char)
->	O
endptr	*(char)
,	O
segm	*(struct(enum(int,int),long,long,*(char)))
->	O
repl	*(char)
,	O
len	long
)	O
;	O
}	O
else	O
len	long
=	O
0	int
;	O
}	O
buf	*(char)
->	O
endptr	*(char)
+=	O
len	long
;	O
return	O
0	int
;	O
}	O
static	O
void	O
string_split	(*(struct(*(char),long,long,*(struct),array(struct(array(long),int,struct(array(long)))),*(char),*(char),*((*`,long,*`,*`)->(int)),*(void))))->(void)
(	O
struct	O
stringbuf	struct(*(char),long,long,*(struct),array(struct(array(long),int,struct(array(long)))),*(char),*(char),*((*(char),long,*(*(char)),*(void))->(int)),*(void))
*	O
buf	*(char)
)	O
{	O
while	O
(	O
buf	*(char)
->	O
pos	long
<	O
buf	*(char)
->	O
length	long
)	O
string_next_fragment	(*(struct(*(char),long,long,*(struct),array(struct(array(long),int,struct(array(long)))),*(char),*(char),*((*`,long,*`,*`)->(int)),*(void))))->(void)
(	O
buf	*(char)
)	O
;	O
}	O
static	O
int	O
string_assemble	(*(struct(*(char),long,long,*(struct),array(struct(array(long),int,struct(array(long)))),*(char),*(char),*((*`,long,*`,*`)->(int)),*(void))))->(int)
(	O
struct	O
stringbuf	struct(*(char),long,long,*(struct),array(struct(array(long),int,struct(array(long)))),*(char),*(char),*((*(char),long,*(*(char)),*(void))->(int)),*(void))
*	O
buf	*(char)
)	O
{	O
int	O
rc	int
;	O
struct	O
segm_stat	struct(long,long)
st	*(struct(long,long,long))
;	O
st	*(struct(long,long,long))
.	O
len	long
=	O
0	int
;	O
st	*(struct(long,long,long))
.	O
end	struct(*(char),int,int)
=	O
0	int
;	O
rc	int
=	O
mu_list_foreach	(*(struct),*((*(void),*(void))->(int)),*(void))->(int)
(	O
buf	*(char)
->	O
seglist	*(struct)
,	O
update_len	(*(void),*(void))->(int)
,	O
&	O
st	*(struct(long,long,long))
)	O
;	O
if	O
(	O
rc	int
)	O
longjmp	(array(struct(array(long),int,struct(array(long)))),int)->(void)
(	O
buf	*(char)
->	O
errbuf	array(struct(array(long),int,struct(array(long))))
,	O
rc	int
)	O
;	O
if	O
(	O
st	*(struct(long,long,long))
.	O
end	struct(*(char),int,int)
==	O
buf	*(char)
->	O
length	long
-	O
1	int
)	O
return	O
MU_ERR_CANCELED	O
;	O
buf	*(char)
->	O
expansion	*(*(char))
=	O
malloc	(long)->(*(void))
(	O
st	*(struct(long,long,long))
.	O
len	long
+	O
1	int
)	O
;	O
if	O
(	O
!	O
buf	*(char)
->	O
expansion	*(*(char))
)	O
longjmp	(array(struct(array(long),int,struct(array(long)))),int)->(void)
(	O
buf	*(char)
->	O
errbuf	array(struct(array(long),int,struct(array(long))))
,	O
ENOMEM	int
)	O
;	O
buf	*(char)
->	O
endptr	*(char)
=	O
buf	*(char)
->	O
expansion	*(*(char))
;	O
rc	int
=	O
mu_list_foreach	(*(struct),*((*(void),*(void))->(int)),*(void))->(int)
(	O
buf	*(char)
->	O
seglist	*(struct)
,	O
append_segm	(*(void),*(void))->(int)
,	O
buf	*(char)
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
free	(*(void))->(void)
(	O
buf	*(char)
->	O
expansion	*(*(char))
)	O
;	O
buf	*(char)
->	O
expansion	*(*(char))
=	O
NULL	O
;	O
longjmp	(array(struct(array(long),int,struct(array(long)))),int)->(void)
(	O
buf	*(char)
->	O
errbuf	array(struct(array(long),int,struct(array(long))))
,	O
rc	int
)	O
;	O
}	O
*	O
buf	*(char)
->	O
endptr	*(char)
=	O
0	int
;	O
return	O
0	int
;	O
}	O
int	O
mu_i_sv_string_expand	(*(char),*((*(char),long,*(*(char)),*(void))->(int)),*(void),*(*(char)))->(int)
(	O
char	O
const	O
*	O
input	*(char)
,	O
mu_i_sv_interp_t	*((*(char),long,*(*(char)),*(void))->(int))
interp	*((*(char),long,*(*(char)),*(void))->(int))
,	O
void	O
*	O
data	*(void)
,	O
char	O
*	O
*	O
ret	*(*(struct))
)	O
{	O
struct	O
stringbuf	struct(*(char),long,long,*(struct),array(struct(array(long),int,struct(array(long)))),*(char),*(char),*((*(char),long,*(*(char)),*(void))->(int)),*(void))
sb	struct(*(char),long,long,*(struct),array(struct(array(long),int,struct(array(long)))),*(char),*(char),*((*(char),long,*(*(char)),*(void))->(int)),*(void))
;	O
int	O
rc	int
;	O
sb	struct(*(char),long,long,*(struct),array(struct(array(long),int,struct(array(long)))),*(char),*(char),*((*(char),long,*(*(char)),*(void))->(int)),*(void))
.	O
string	*(*(char))
=	O
input	*(char)
;	O
sb	struct(*(char),long,long,*(struct),array(struct(array(long),int,struct(array(long)))),*(char),*(char),*((*(char),long,*(*(char)),*(void))->(int)),*(void))
.	O
length	long
=	O
strlen	(*(char))->(long)
(	O
input	*(char)
)	O
;	O
sb	struct(*(char),long,long,*(struct),array(struct(array(long),int,struct(array(long)))),*(char),*(char),*((*(char),long,*(*(char)),*(void))->(int)),*(void))
.	O
pos	long
=	O
0	int
;	O
rc	int
=	O
mu_list_create	(*(*(struct)))->(int)
(	O
&	O
sb	struct(*(char),long,long,*(struct),array(struct(array(long),int,struct(array(long)))),*(char),*(char),*((*(char),long,*(*(char)),*(void))->(int)),*(void))
.	O
seglist	*(struct)
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
mu_list_set_destroy_item	(*(struct),*((*(void))->(void)))->(*((*(void))->(void)))
(	O
sb	struct(*(char),long,long,*(struct),array(struct(array(long),int,struct(array(long)))),*(char),*(char),*((*(char),long,*(*(char)),*(void))->(int)),*(void))
.	O
seglist	*(struct)
,	O
segm_free	(*(void))->(void)
)	O
;	O
sb	struct(*(char),long,long,*(struct),array(struct(array(long),int,struct(array(long)))),*(char),*(char),*((*(char),long,*(*(char)),*(void))->(int)),*(void))
.	O
expansion	*(*(char))
=	O
NULL	O
;	O
sb	struct(*(char),long,long,*(struct),array(struct(array(long),int,struct(array(long)))),*(char),*(char),*((*(char),long,*(*(char)),*(void))->(int)),*(void))
.	O
endptr	*(char)
=	O
NULL	O
;	O
sb	struct(*(char),long,long,*(struct),array(struct(array(long),int,struct(array(long)))),*(char),*(char),*((*(char),long,*(*(char)),*(void))->(int)),*(void))
.	O
interp	*((*(char),long,*(*(char)),*(void))->(int))
=	O
interp	*((*(char),long,*(*(char)),*(void))->(int))
;	O
sb	struct(*(char),long,long,*(struct),array(struct(array(long),int,struct(array(long)))),*(char),*(char),*((*(char),long,*(*(char)),*(void))->(int)),*(void))
.	O
data	*(void)
=	O
data	*(void)
;	O
rc	int
=	O
setjmp	(array(struct(array(long),int,struct(array(long)))))->(int)
(	O
sb	struct(*(char),long,long,*(struct),array(struct(array(long),int,struct(array(long)))),*(char),*(char),*((*(char),long,*(*(char)),*(void))->(int)),*(void))
.	O
errbuf	array(struct(array(long),int,struct(array(long))))
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
string_split	(*(struct(*(char),long,long,*(struct),array(struct(array(long),int,struct(array(long)))),*(char),*(char),*((*`,long,*`,*`)->(int)),*(void))))->(void)
(	O
&	O
sb	struct(*(char),long,long,*(struct),array(struct(array(long),int,struct(array(long)))),*(char),*(char),*((*(char),long,*(*(char)),*(void))->(int)),*(void))
)	O
;	O
rc	int
=	O
string_assemble	(*(struct(*(char),long,long,*(struct),array(struct(array(long),int,struct(array(long)))),*(char),*(char),*((*`,long,*`,*`)->(int)),*(void))))->(int)
(	O
&	O
sb	struct(*(char),long,long,*(struct),array(struct(array(long),int,struct(array(long)))),*(char),*(char),*((*(char),long,*(*(char)),*(void))->(int)),*(void))
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
*	O
ret	*(*(struct))
=	O
sb	struct(*(char),long,long,*(struct),array(struct(array(long),int,struct(array(long)))),*(char),*(char),*((*(char),long,*(*(char)),*(void))->(int)),*(void))
.	O
expansion	*(*(char))
;	O
}	O
mu_list_destroy	(*(*(struct)))->(void)
(	O
&	O
sb	struct(*(char),long,long,*(struct),array(struct(array(long),int,struct(array(long)))),*(char),*(char),*((*(char),long,*(*(char)),*(void))->(int)),*(void))
.	O
seglist	*(struct)
)	O
;	O
return	O
rc	int
;	O
}	O
