static	O
int	O
_collect_flags	(*(void),*(void))->(int)
(	O
void	O
*	O
item	*(char)
,	O
void	O
*	O
data	*(void)
)	O
{	O
struct	O
imap_list_element	struct(enum(int,int),union(*(struct),*(char)))
*	O
elt	*(struct(enum(int,int),union(*(struct),*(char))))
=	O
item	*(char)
;	O
int	O
*	O
args	*(int)
=	O
data	*(void)
;	O
if	O
(	O
elt	*(struct(enum(int,int),union(*(struct),*(char))))
->	O
type	int
==	O
imap_eltype_string	int
)	O
mu_imap_flag_to_attribute	(*(char),*(int))->(int)
(	O
elt	*(struct(enum(int,int),union(*(struct),*(char))))
->	O
v	union(*(struct),*(char))
.	O
string	*(char)
,	O
args	*(int)
)	O
;	O
return	O
0	int
;	O
}	O
int	O
_mu_imap_collect_flags	(*(struct(enum(int,int),union(*(struct`),*(char)))),*(int))->(int)
(	O
struct	O
imap_list_element	struct(enum(int,int),union(*(struct),*(char)))
*	O
arg	*(char)
,	O
int	O
*	O
res	*(int)
)	O
{	O
if	O
(	O
arg	*(char)
->	O
type	int
!=	O
imap_eltype_list	int
)	O
return	O
EINVAL	int
;	O
*	O
res	*(int)
=	O
0	int
;	O
mu_list_foreach	(*(struct),*((*(void),*(void))->(int)),*(void))->(int)
(	O
arg	*(char)
->	O
v	union(*(struct),*(char))
.	O
list	*(struct)
,	O
_collect_flags	(*(void),*(void))->(int)
,	O
res	*(int)
)	O
;	O
return	O
0	int
;	O
}	O
static	O
void	O
_select_response_action	(*(struct(int,enum(int,int,int),int,*(char),long,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int),long,*(int),*(char),*(struct),*(struct),*(char),int,struct(int,int,int,long,long,long,long,long),array(struct(*((*(void),int,long,*(void))->(void)),*(void))))),*(struct),*(void))->(void)
(	O
mu_imap_t	*(struct)
imap	*(struct)
,	O
mu_list_t	*(struct)
response	enum(int,int,int)
,	O
void	O
*	O
data	*(void)
)	O
{	O
struct	O
imap_list_element	struct(enum(int,int),union(*(struct),*(char)))
*	O
elt	*(struct(enum(int,int),union(*(struct),*(char))))
;	O
elt	*(struct(enum(int,int),union(*(struct),*(char))))
=	O
_mu_imap_list_at	(*(struct),int)->(*(struct(enum(int,int),union(*(struct`),*(char)))))
(	O
response	enum(int,int,int)
,	O
0	int
)	O
;	O
if	O
(	O
elt	*(struct(enum(int,int),union(*(struct),*(char))))
&&	O
_mu_imap_list_element_is_string	(*(struct(enum(int,int),union(*(struct`),*(char)))),*(char))->(int)
(	O
elt	*(struct(enum(int,int),union(*(struct),*(char))))
,	O
"FLAGS"	*(char)
)	O
)	O
{	O
struct	O
imap_list_element	struct(enum(int,int),union(*(struct),*(char)))
*	O
arg	*(char)
=	O
_mu_imap_list_at	(*(struct),int)->(*(struct(enum(int,int),union(*(struct`),*(char)))))
(	O
response	enum(int,int,int)
,	O
1	int
)	O
;	O
if	O
(	O
arg	*(char)
&&	O
_mu_imap_collect_flags	(*(struct(enum(int,int),union(*(struct`),*(char)))),*(int))->(int)
(	O
arg	*(char)
,	O
&	O
imap	*(struct)
->	O
mbox_stat	struct(int,int,int,long,long,long,long,long)
.	O
defined_flags	int
)	O
==	O
0	int
)	O
imap	*(struct)
->	O
mbox_stat	struct(int,int,int,long,long,long,long,long)
.	O
flags	int
|=	O
MU_IMAP_STAT_DEFINED_FLAGS	int
;	O
}	O
}	O
int	O
mu_imap_select	(*(struct),*(char),int,*(struct(int,int,int,long,long,long,long,long)))->(int)
(	O
mu_imap_t	*(struct)
imap	*(struct)
,	O
const	O
char	O
*	O
mbox	*(char)
,	O
int	O
writable	int
,	O
struct	O
mu_imap_stat	struct(int,int,int,long,long,long,long,long)
*	O
ps	*(struct(int,int,int,long,long,long,long,long))
)	O
{	O
int	O
status	int
;	O
if	O
(	O
imap	*(struct)
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
if	O
(	O
!	O
imap	*(struct)
->	O
io	*(struct)
)	O
return	O
MU_ERR_NO_TRANSPORT	O
;	O
if	O
(	O
imap	*(struct)
->	O
session_state	enum(int,int,int,int)
!=	O
MU_IMAP_SESSION_AUTH	int
&&	O
imap	*(struct)
->	O
session_state	enum(int,int,int,int)
!=	O
MU_IMAP_SESSION_SELECTED	int
)	O
return	O
MU_ERR_SEQ	O
;	O
if	O
(	O
!	O
mbox	*(char)
)	O
{	O
if	O
(	O
imap	*(struct)
->	O
session_state	enum(int,int,int,int)
==	O
MU_IMAP_SESSION_SELECTED	int
)	O
{	O
if	O
(	O
ps	*(struct(int,int,int,long,long,long,long,long))
)	O
*	O
ps	*(struct(int,int,int,long,long,long,long,long))
=	O
imap	*(struct)
->	O
mbox_stat	struct(int,int,int,long,long,long,long,long)
;	O
return	O
0	int
;	O
}	O
return	O
MU_ERR_INFO_UNAVAILABLE	O
;	O
}	O
if	O
(	O
imap	*(struct)
->	O
mbox_name	*(char)
&&	O
strcmp	(*(char),*(char))->(int)
(	O
imap	*(struct)
->	O
mbox_name	*(char)
,	O
mbox	*(char)
)	O
==	O
0	int
&&	O
writable	int
==	O
imap	*(struct)
->	O
mbox_writable	int
)	O
{	O
if	O
(	O
ps	*(struct(int,int,int,long,long,long,long,long))
)	O
*	O
ps	*(struct(int,int,int,long,long,long,long,long))
=	O
imap	*(struct)
->	O
mbox_stat	struct(int,int,int,long,long,long,long,long)
;	O
return	O
0	int
;	O
}	O
switch	O
(	O
imap	*(struct)
->	O
client_state	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
)	O
{	O
case	O
MU_IMAP_CLIENT_READY	int
:	O
status	int
=	O
_mu_imap_tag_next	(*(struct(int,enum(int,int,int),int,*(char),long,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int),long,*(int),*(char),*(struct),*(struct),*(char),int,struct(int,int,int,long,long,long,long,long),array(struct(*((*(void),int,long,*(void))->(void)),*(void))))))->(int)
(	O
imap	*(struct)
)	O
;	O
MU_IMAP_CHECK_EAGAIN	O
(	O
imap	*(struct)
,	O
status	int
)	O
;	O
status	int
=	O
mu_imapio_send_command	(*(struct),*(char),*(struct),*(char))->(int)
(	O
imap	*(struct)
->	O
io	*(struct)
,	O
imap	*(struct)
->	O
tag_str	*(char)
,	O
NULL	O
,	O
writable	int
?	O
"SELECT"	*(char)
:	O
"EXAMINE"	*(char)
,	O
mbox	*(char)
,	O
NULL	O
)	O
;	O
MU_IMAP_CHECK_ERROR	O
(	O
imap	*(struct)
,	O
status	int
)	O
;	O
MU_IMAP_FCLR	O
(	O
imap	*(struct)
,	O
MU_IMAP_RESP	int
)	O
;	O
imap	*(struct)
->	O
client_state	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
=	O
MU_IMAP_CLIENT_SELECT_RX	int
;	O
case	O
MU_IMAP_CLIENT_SELECT_RX	int
:	O
memset	(*(void),int,long)->(*(void))
(	O
&	O
imap	*(struct)
->	O
mbox_stat	struct(int,int,int,long,long,long,long,long)
,	O
0	int
,	O
sizeof	O
(	O
imap	*(struct)
->	O
mbox_stat	struct(int,int,int,long,long,long,long,long)
)	O
)	O
;	O
status	int
=	O
_mu_imap_response	(*(struct(int,enum(int,int,int),int,*(char),long,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int),long,*(int),*(char),*(struct),*(struct),*(char),int,struct(int,int,int,long,long,long,long,long),array(struct(*((*(void),int,long,*(void))->(void)),*(void))))),*((*(struct(int,enum(int,int,int),int,*`,long,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int),long,*`,*`,*`,*`,*`,int,struct`,array(struct(*((*(void),int,long,*(void))->(void)),*(void))))),*(struct),*(void))->(void)),*(void))->(int)
(	O
imap	*(struct)
,	O
_select_response_action	(*(struct(int,enum(int,int,int),int,*(char),long,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int),long,*(int),*(char),*(struct),*(struct),*(char),int,struct(int,int,int,long,long,long,long,long),array(struct(*((*(void),int,long,*(void))->(void)),*(void))))),*(struct),*(void))->(void)
,	O
NULL	O
)	O
;	O
MU_IMAP_CHECK_EAGAIN	O
(	O
imap	*(struct)
,	O
status	int
)	O
;	O
switch	O
(	O
imap	*(struct)
->	O
response	enum(int,int,int)
)	O
{	O
case	O
MU_IMAP_OK	int
:	O
imap	*(struct)
->	O
session_state	enum(int,int,int,int)
=	O
MU_IMAP_SESSION_SELECTED	int
;	O
free	(*(void))->(void)
(	O
imap	*(struct)
->	O
mbox_name	*(char)
)	O
;	O
imap	*(struct)
->	O
mbox_name	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
mbox	*(char)
)	O
;	O
if	O
(	O
!	O
imap	*(struct)
->	O
mbox_name	*(char)
)	O
{	O
imap	*(struct)
->	O
client_state	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
=	O
MU_IMAP_CLIENT_ERROR	int
;	O
return	O
errno	O
;	O
}	O
imap	*(struct)
->	O
mbox_writable	int
=	O
writable	int
;	O
if	O
(	O
ps	*(struct(int,int,int,long,long,long,long,long))
)	O
*	O
ps	*(struct(int,int,int,long,long,long,long,long))
=	O
imap	*(struct)
->	O
mbox_stat	struct(int,int,int,long,long,long,long,long)
;	O
break	O
;	O
case	O
MU_IMAP_NO	int
:	O
status	int
=	O
EACCES	int
;	O
break	O
;	O
case	O
MU_IMAP_BAD	int
:	O
status	int
=	O
MU_ERR_BADREPLY	O
;	O
break	O
;	O
}	O
imap	*(struct)
->	O
client_state	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
=	O
MU_IMAP_CLIENT_READY	int
;	O
break	O
;	O
default	O
:	O
status	int
=	O
EINPROGRESS	int
;	O
}	O
return	O
status	int
;	O
}	O
