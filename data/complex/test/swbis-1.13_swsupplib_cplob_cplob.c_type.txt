static	O
void	O
null_list	(*(struct(*(*(char)),int,int,long,int)),int,int)->(void)
(	O
CPLOB	struct(*(*(char)),int,int,long,int)
*	O
lob	*(struct(*(*(char)),int,int,long,int))
,	O
int	O
start	int
,	O
int	O
stop	int
)	O
{	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
start	int
;	O
i	int
<	O
stop	int
;	O
i	int
++	O
)	O
{	O
*	O
(	O
lob	*(struct(*(*(char)),int,int,long,int))
->	O
list	*(*(char))
+	O
i	int
)	O
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
}	O
}	O
CPLOB	struct(*(*(char)),int,int,long,int)
*	O
cplob_open	(int)->(*(struct(*(*(char)),int,int,long,int)))
(	O
int	O
nobj	int
)	O
{	O
CPLOB	struct(*(*(char)),int,int,long,int)
*	O
lob	*(struct(*(*(char)),int,int,long,int))
;	O
lob	*(struct(*(*(char)),int,int,long,int))
=	O
(	O
CPLOB	struct(*(*(char)),int,int,long,int)
*	O
)	O
malloc	(long)->(*(void))
(	O
sizeof	O
(	O
CPLOB	struct(*(*(char)),int,int,long,int)
)	O
)	O
;	O
if	O
(	O
lob	*(struct(*(*(char)),int,int,long,int))
==	O
(	O
CPLOB	struct(*(*(char)),int,int,long,int)
*	O
)	O
(	O
NULL	O
)	O
)	O
{	O
return	O
(	O
CPLOB	struct(*(*(char)),int,int,long,int)
*	O
)	O
(	O
NULL	O
)	O
;	O
}	O
if	O
(	O
nobj	int
<=	O
0	int
)	O
{	O
nobj	int
=	O
CPLOB_NINITLENGTH	int
;	O
}	O
lob	*(struct(*(*(char)),int,int,long,int))
->	O
nlen	int
=	O
nobj	int
;	O
if	O
(	O
(	O
lob	*(struct(*(*(char)),int,int,long,int))
->	O
list	*(*(char))
=	O
(	O
char	O
*	O
*	O
)	O
malloc	(long)->(*(void))
(	O
nobj	int
*	O
sizeof	O
(	O
char	O
*	O
)	O
)	O
)	O
==	O
NULL	O
)	O
{	O
return	O
(	O
CPLOB	struct(*(*(char)),int,int,long,int)
*	O
)	O
(	O
NULL	O
)	O
;	O
}	O
null_list	(*(struct(*(*(char)),int,int,long,int)),int,int)->(void)
(	O
lob	*(struct(*(*(char)),int,int,long,int))
,	O
0	int
,	O
nobj	int
)	O
;	O
lob	*(struct(*(*(char)),int,int,long,int))
->	O
width	long
=	O
sizeof	O
(	O
char	O
*	O
)	O
;	O
lob	*(struct(*(*(char)),int,int,long,int))
->	O
refcountM	int
=	O
0	int
;	O
cplob_shallow_reset	(*(struct(*(*(char)),int,int,long,int)))->(void)
(	O
lob	*(struct(*(*(char)),int,int,long,int))
)	O
;	O
return	O
lob	*(struct(*(*(char)),int,int,long,int))
;	O
}	O
o__inline__	O
char	O
*	O
*	O
cplob_release	(*(struct(*(*(char)),int,int,long,int)))->(*(*(char)))
(	O
CPLOB	struct(*(*(char)),int,int,long,int)
*	O
lob	*(struct(*(*(char)),int,int,long,int))
)	O
{	O
char	O
*	O
*	O
p	*(*(char))
=	O
lob	*(struct(*(*(char)),int,int,long,int))
->	O
list	*(*(char))
;	O
swbis_free	O
(	O
lob	*(struct(*(*(char)),int,int,long,int))
)	O
;	O
return	O
p	*(*(char))
;	O
}	O
void	O
cplob_close	(*(struct(*(*(char)),int,int,long,int)))->(void)
(	O
CPLOB	struct(*(*(char)),int,int,long,int)
*	O
lob	*(struct(*(*(char)),int,int,long,int))
)	O
{	O
cplob_freeall	(*(struct(*(*(char)),int,int,long,int)))->(void)
(	O
lob	*(struct(*(*(char)),int,int,long,int))
)	O
;	O
free	(*(void))->(void)
(	O
lob	*(struct(*(*(char)),int,int,long,int))
->	O
list	*(*(char))
)	O
;	O
free	(*(void))->(void)
(	O
lob	*(struct(*(*(char)),int,int,long,int))
)	O
;	O
}	O
int	O
cplob_shallow_close	(*(struct(*(*(char)),int,int,long,int)))->(int)
(	O
CPLOB	struct(*(*(char)),int,int,long,int)
*	O
lob	*(struct(*(*(char)),int,int,long,int))
)	O
{	O
swbis_free	O
(	O
lob	*(struct(*(*(char)),int,int,long,int))
)	O
;	O
return	O
0	int
;	O
}	O
void	O
cplob_shallow_reset	(*(struct(*(*(char)),int,int,long,int)))->(void)
(	O
CPLOB	struct(*(*(char)),int,int,long,int)
*	O
lob	*(struct(*(*(char)),int,int,long,int))
)	O
{	O
int	O
i	int
;	O
lob	*(struct(*(*(char)),int,int,long,int))
->	O
nused	int
=	O
0	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
lob	*(struct(*(*(char)),int,int,long,int))
->	O
nlen	int
;	O
i	int
++	O
)	O
{	O
*	O
(	O
lob	*(struct(*(*(char)),int,int,long,int))
->	O
list	*(*(char))
+	O
(	O
i	int
)	O
)	O
=	O
(	O
char	O
*	O
)	O
(	O
NULL	O
)	O
;	O
}	O
}	O
char	O
*	O
*	O
cplob_get_list	(*(struct(*(*(char)),int,int,long,int)))->(*(*(char)))
(	O
CPLOB	struct(*(*(char)),int,int,long,int)
*	O
cplob	*(struct(*(*(char)),int,int,long,int))
)	O
{	O
return	O
cplob	*(struct(*(*(char)),int,int,long,int))
->	O
list	*(*(char))
;	O
}	O
CPLOB	struct(*(*(char)),int,int,long,int)
*	O
cplob_reopen	(int,*(struct(*(*(char)),int,int,long,int)))->(*(struct(*(*(char)),int,int,long,int)))
(	O
int	O
new_length	int
,	O
CPLOB	struct(*(*(char)),int,int,long,int)
*	O
lob	*(struct(*(*(char)),int,int,long,int))
)	O
{	O
if	O
(	O
new_length	int
<=	O
1	int
)	O
{	O
new_length	int
=	O
2	int
;	O
}	O
if	O
(	O
new_length	int
>	O
lob	*(struct(*(*(char)),int,int,long,int))
->	O
nlen	int
)	O
{	O
lob	*(struct(*(*(char)),int,int,long,int))
->	O
list	*(*(char))
=	O
(	O
char	O
*	O
*	O
)	O
SWBIS_REALLOC	O
(	O
(	O
void	O
*	O
)	O
lob	*(struct(*(*(char)),int,int,long,int))
->	O
list	*(*(char))
,	O
(	O
size_t	long
)	O
(	O
(	O
new_length	int
)	O
*	O
lob	*(struct(*(*(char)),int,int,long,int))
->	O
width	long
)	O
,	O
lob	*(struct(*(*(char)),int,int,long,int))
->	O
nlen	int
)	O
;	O
if	O
(	O
!	O
lob	*(struct(*(*(char)),int,int,long,int))
->	O
list	*(*(char))
)	O
return	O
(	O
CPLOB	struct(*(*(char)),int,int,long,int)
*	O
)	O
(	O
NULL	O
)	O
;	O
null_list	(*(struct(*(*(char)),int,int,long,int)),int,int)->(void)
(	O
lob	*(struct(*(*(char)),int,int,long,int))
,	O
lob	*(struct(*(*(char)),int,int,long,int))
->	O
nlen	int
,	O
new_length	int
)	O
;	O
lob	*(struct(*(*(char)),int,int,long,int))
->	O
nlen	int
=	O
new_length	int
;	O
}	O
return	O
lob	*(struct(*(*(char)),int,int,long,int))
;	O
}	O
void	O
cplob_freeall	(*(struct(*(*(char)),int,int,long,int)))->(void)
(	O
CPLOB	struct(*(*(char)),int,int,long,int)
*	O
lob	*(struct(*(*(char)),int,int,long,int))
)	O
{	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
lob	*(struct(*(*(char)),int,int,long,int))
->	O
nused	int
;	O
i	int
++	O
)	O
{	O
if	O
(	O
*	O
(	O
lob	*(struct(*(*(char)),int,int,long,int))
->	O
list	*(*(char))
+	O
(	O
i	int
)	O
)	O
!=	O
NULL	O
)	O
{	O
swbis_free	O
(	O
*	O
(	O
lob	*(struct(*(*(char)),int,int,long,int))
->	O
list	*(*(char))
+	O
(	O
i	int
)	O
)	O
)	O
;	O
(	O
*	O
(	O
lob	*(struct(*(*(char)),int,int,long,int))
->	O
list	*(*(char))
+	O
(	O
i	int
)	O
)	O
)	O
=	O
NULL	O
;	O
}	O
}	O
}	O
void	O
cplob_add_nta	(*(struct(*(*(char)),int,int,long,int)),*(char))->(void)
(	O
CPLOB	struct(*(*(char)),int,int,long,int)
*	O
lob	*(struct(*(*(char)),int,int,long,int))
,	O
char	O
*	O
addr	*(char)
)	O
{	O
if	O
(	O
!	O
lob	*(struct(*(*(char)),int,int,long,int))
->	O
nused	int
)	O
{	O
lob	*(struct(*(*(char)),int,int,long,int))
->	O
nused	int
++	O
;	O
cplob_reopen	(int,*(struct(*(*(char)),int,int,long,int)))->(*(struct(*(*(char)),int,int,long,int)))
(	O
lob	*(struct(*(*(char)),int,int,long,int))
->	O
nused	int
+	O
CPLOB_NLENGTHINCR	int
,	O
lob	*(struct(*(*(char)),int,int,long,int))
)	O
;	O
*	O
(	O
lob	*(struct(*(*(char)),int,int,long,int))
->	O
list	*(*(char))
+	O
(	O
lob	*(struct(*(*(char)),int,int,long,int))
->	O
nused	int
-	O
1	int
)	O
)	O
=	O
addr	*(char)
;	O
if	O
(	O
!	O
addr	*(char)
)	O
{	O
return	O
;	O
}	O
}	O
else	O
{	O
cplob_reopen	(int,*(struct(*(*(char)),int,int,long,int)))->(*(struct(*(*(char)),int,int,long,int)))
(	O
lob	*(struct(*(*(char)),int,int,long,int))
->	O
nused	int
+	O
CPLOB_NLENGTHINCR	int
,	O
lob	*(struct(*(*(char)),int,int,long,int))
)	O
;	O
}	O
*	O
(	O
lob	*(struct(*(*(char)),int,int,long,int))
->	O
list	*(*(char))
+	O
(	O
lob	*(struct(*(*(char)),int,int,long,int))
->	O
nused	int
-	O
1	int
)	O
)	O
=	O
addr	*(char)
;	O
cplob_additem	(*(struct(*(*(char)),int,int,long,int)),int,*(char))->(void)
(	O
lob	*(struct(*(*(char)),int,int,long,int))
,	O
lob	*(struct(*(*(char)),int,int,long,int))
->	O
nused	int
,	O
NULL	O
)	O
;	O
}	O
void	O
cplob_add	(*(struct(*(*(char)),int,int,long,int)),*(char))->(void)
(	O
CPLOB	struct(*(*(char)),int,int,long,int)
*	O
lob	*(struct(*(*(char)),int,int,long,int))
,	O
char	O
*	O
addr	*(char)
)	O
{	O
cplob_additem	(*(struct(*(*(char)),int,int,long,int)),int,*(char))->(void)
(	O
lob	*(struct(*(*(char)),int,int,long,int))
,	O
lob	*(struct(*(*(char)),int,int,long,int))
->	O
nused	int
,	O
addr	*(char)
)	O
;	O
}	O
void	O
cplob_additem	(*(struct(*(*(char)),int,int,long,int)),int,*(char))->(void)
(	O
CPLOB	struct(*(*(char)),int,int,long,int)
*	O
lob	*(struct(*(*(char)),int,int,long,int))
,	O
int	O
index	(*(char),int)->(*(char))
,	O
char	O
*	O
addr	*(char)
)	O
{	O
if	O
(	O
index	(*(char),int)->(*(char))
+	O
1	int
>	O
lob	*(struct(*(*(char)),int,int,long,int))
->	O
nlen	int
)	O
{	O
cplob_reopen	(int,*(struct(*(*(char)),int,int,long,int)))->(*(struct(*(*(char)),int,int,long,int)))
(	O
index	(*(char),int)->(*(char))
+	O
1	int
+	O
CPLOB_NLENGTHINCR	int
,	O
lob	*(struct(*(*(char)),int,int,long,int))
)	O
;	O
}	O
*	O
(	O
lob	*(struct(*(*(char)),int,int,long,int))
->	O
list	*(*(char))
+	O
index	(*(char),int)->(*(char))
)	O
=	O
addr	*(char)
;	O
if	O
(	O
index	(*(char),int)->(*(char))
+	O
1	int
>	O
lob	*(struct(*(*(char)),int,int,long,int))
->	O
nused	int
)	O
{	O
lob	*(struct(*(*(char)),int,int,long,int))
->	O
nused	int
=	O
index	(*(char),int)->(*(char))
+	O
1	int
;	O
}	O
return	O
;	O
}	O
void	O
cplob_set_nused	(*(struct(*(*(char)),int,int,long,int)),int)->(void)
(	O
CPLOB	struct(*(*(char)),int,int,long,int)
*	O
lob	*(struct(*(*(char)),int,int,long,int))
,	O
int	O
n	int
)	O
{	O
lob	*(struct(*(*(char)),int,int,long,int))
->	O
nused	int
=	O
n	int
;	O
}	O
int	O
cplob_get_nused	(*(struct(*(*(char)),int,int,long,int)))->(int)
(	O
CPLOB	struct(*(*(char)),int,int,long,int)
*	O
lob	*(struct(*(*(char)),int,int,long,int))
)	O
{	O
return	O
lob	*(struct(*(*(char)),int,int,long,int))
->	O
nused	int
;	O
}	O
char	O
*	O
cplob_val	(*(struct(*(*(char)),int,int,long,int)),int)->(*(char))
(	O
CPLOB	struct(*(*(char)),int,int,long,int)
*	O
lob	*(struct(*(*(char)),int,int,long,int))
,	O
int	O
index	(*(char),int)->(*(char))
)	O
{	O
if	O
(	O
index	(*(char),int)->(*(char))
<	O
0	int
)	O
{	O
return	O
NULL	O
;	O
}	O
if	O
(	O
index	(*(char),int)->(*(char))
>	O
lob	*(struct(*(*(char)),int,int,long,int))
->	O
nused	int
)	O
return	O
NULL	O
;	O
return	O
*	O
(	O
lob	*(struct(*(*(char)),int,int,long,int))
->	O
list	*(*(char))
+	O
(	O
index	(*(char),int)->(*(char))
)	O
)	O
;	O
}	O
int	O
cplob_backfill_and_nullterminate	(*(struct(*(*(char)),int,int,long,int)))->(int)
(	O
CPLOB	struct(*(*(char)),int,int,long,int)
*	O
lob	*(struct(*(*(char)),int,int,long,int))
)	O
{	O
int	O
i	int
=	O
0	int
;	O
while	O
(	O
i	int
<	O
lob	*(struct(*(*(char)),int,int,long,int))
->	O
nused	int
)	O
{	O
while	O
(	O
i	int
<	O
lob	*(struct(*(*(char)),int,int,long,int))
->	O
nused	int
&&	O
*	O
(	O
lob	*(struct(*(*(char)),int,int,long,int))
->	O
list	*(*(char))
+	O
i	int
)	O
==	O
NULL	O
)	O
{	O
if	O
(	O
i	int
+	O
1	int
==	O
lob	*(struct(*(*(char)),int,int,long,int))
->	O
nused	int
)	O
break	O
;	O
memmove	(*(void),*(void),long)->(*(void))
(	O
lob	*(struct(*(*(char)),int,int,long,int))
->	O
list	*(*(char))
+	O
i	int
,	O
lob	*(struct(*(*(char)),int,int,long,int))
->	O
list	*(*(char))
+	O
i	int
+	O
1	int
,	O
lob	*(struct(*(*(char)),int,int,long,int))
->	O
width	long
*	O
(	O
lob	*(struct(*(*(char)),int,int,long,int))
->	O
nused	int
-	O
i	int
-	O
1	int
)	O
)	O
;	O
lob	*(struct(*(*(char)),int,int,long,int))
->	O
nused	int
--	O
;	O
}	O
i	int
++	O
;	O
}	O
if	O
(	O
*	O
(	O
lob	*(struct(*(*(char)),int,int,long,int))
->	O
list	*(*(char))
+	O
lob	*(struct(*(*(char)),int,int,long,int))
->	O
nused	int
)	O
!=	O
NULL	O
)	O
{	O
cplob_add	(*(struct(*(*(char)),int,int,long,int)),*(char))->(void)
(	O
lob	*(struct(*(*(char)),int,int,long,int))
,	O
(	O
char	O
*	O
)	O
(	O
NULL	O
)	O
)	O
;	O
}	O
return	O
0	int
;	O
}	O
int	O
cplob_remove_index	(*(struct(*(*(char)),int,int,long,int)),int)->(int)
(	O
CPLOB	struct(*(*(char)),int,int,long,int)
*	O
lob	*(struct(*(*(char)),int,int,long,int))
,	O
int	O
i	int
)	O
{	O
if	O
(	O
i	int
<	O
0	int
||	O
i	int
>=	O
lob	*(struct(*(*(char)),int,int,long,int))
->	O
nused	int
)	O
return	O
-	O
1	int
;	O
if	O
(	O
lob	*(struct(*(*(char)),int,int,long,int))
->	O
nused	int
==	O
0	int
||	O
lob	*(struct(*(*(char)),int,int,long,int))
->	O
nlen	int
==	O
0	int
)	O
return	O
0	int
;	O
memmove	(*(void),*(void),long)->(*(void))
(	O
lob	*(struct(*(*(char)),int,int,long,int))
->	O
list	*(*(char))
+	O
i	int
,	O
lob	*(struct(*(*(char)),int,int,long,int))
->	O
list	*(*(char))
+	O
i	int
+	O
1	int
,	O
lob	*(struct(*(*(char)),int,int,long,int))
->	O
width	long
*	O
(	O
lob	*(struct(*(*(char)),int,int,long,int))
->	O
nused	int
-	O
i	int
-	O
1	int
)	O
)	O
;	O
lob	*(struct(*(*(char)),int,int,long,int))
->	O
nused	int
--	O
;	O
lob	*(struct(*(*(char)),int,int,long,int))
->	O
nlen	int
--	O
;	O
return	O
0	int
;	O
}	O
