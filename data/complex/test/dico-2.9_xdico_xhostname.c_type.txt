char	O
*	O
xdico_local_hostname	()->(*(char))
(	O
void	O
)	O
{	O
struct	O
hostent	struct(*(char),*(*(char)),int,int,*(*(char)))
*	O
hp	*(struct)
;	O
char	O
*	O
hostpart	*(char)
=	O
xgethostname	()->(*(char))
(	O
)	O
;	O
char	O
*	O
ret	*(char)
;	O
hp	*(struct)
=	O
gethostbyname	(*(char))->(*(struct(*(char),*(*(char)),int,int,*(*(char)))))
(	O
hostpart	*(char)
)	O
;	O
if	O
(	O
hp	*(struct)
)	O
ret	*(char)
=	O
xstrdup	(*(char))->(*(char))
(	O
hp	*(struct)
->	O
h_name	*(char)
)	O
;	O
else	O
{	O
char	O
*	O
domainpart	*(char)
=	O
xgetdomainname	()->(*(char))
(	O
)	O
;	O
if	O
(	O
domainpart	*(char)
&&	O
domainpart	*(char)
[	O
0	int
]	O
&&	O
strcmp	(*(char),*(char))->(int)
(	O
domainpart	*(char)
,	O
"(none)"	*(char)
)	O
)	O
{	O
ret	*(char)
=	O
xmalloc	(long)->(*(void))
(	O
strlen	(*(char))->(long)
(	O
hostpart	*(char)
)	O
+	O
1	int
+	O
strlen	(*(char))->(long)
(	O
domainpart	*(char)
)	O
+	O
1	int
)	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
ret	*(char)
,	O
hostpart	*(char)
)	O
;	O
strcat	(*(char),*(char))->(*(char))
(	O
ret	*(char)
,	O
"."	*(char)
)	O
;	O
strcat	(*(char),*(char))->(*(char))
(	O
ret	*(char)
,	O
domainpart	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
hostpart	*(char)
)	O
;	O
}	O
else	O
ret	*(char)
=	O
hostpart	*(char)
;	O
free	(*(void))->(void)
(	O
domainpart	*(char)
)	O
;	O
}	O
return	O
ret	*(char)
;	O
}	O
