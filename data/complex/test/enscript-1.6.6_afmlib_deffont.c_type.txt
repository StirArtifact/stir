static	O
AFMEncodingTable	struct(int,*(char))
builtin_courier	array(struct(int,*(char)))
[	O
]	O
=	O
{	O
{	O
32	int
,	O
"space"	*(char)
}	O
,	O
{	O
33	int
,	O
"exclam"	*(char)
}	O
,	O
{	O
34	int
,	O
"quotedbl"	*(char)
}	O
,	O
{	O
35	int
,	O
"numbersign"	*(char)
}	O
,	O
{	O
36	int
,	O
"dollar"	*(char)
}	O
,	O
{	O
37	int
,	O
"percent"	*(char)
}	O
,	O
{	O
38	int
,	O
"ampersand"	*(char)
}	O
,	O
{	O
39	int
,	O
"quoteright"	*(char)
}	O
,	O
{	O
40	int
,	O
"parenleft"	*(char)
}	O
,	O
{	O
41	int
,	O
"parenright"	*(char)
}	O
,	O
{	O
42	int
,	O
"asterisk"	*(char)
}	O
,	O
{	O
43	int
,	O
"plus"	*(char)
}	O
,	O
{	O
44	int
,	O
"comma"	*(char)
}	O
,	O
{	O
45	int
,	O
"hyphen"	*(char)
}	O
,	O
{	O
46	int
,	O
"period"	*(char)
}	O
,	O
{	O
47	int
,	O
"slash"	*(char)
}	O
,	O
{	O
48	int
,	O
"zero"	*(char)
}	O
,	O
{	O
49	int
,	O
"one"	*(char)
}	O
,	O
{	O
50	int
,	O
"two"	*(char)
}	O
,	O
{	O
51	int
,	O
"three"	*(char)
}	O
,	O
{	O
52	int
,	O
"four"	*(char)
}	O
,	O
{	O
53	int
,	O
"five"	*(char)
}	O
,	O
{	O
54	int
,	O
"six"	*(char)
}	O
,	O
{	O
55	int
,	O
"seven"	*(char)
}	O
,	O
{	O
56	int
,	O
"eight"	*(char)
}	O
,	O
{	O
57	int
,	O
"nine"	*(char)
}	O
,	O
{	O
58	int
,	O
"colon"	*(char)
}	O
,	O
{	O
59	int
,	O
"semicolon"	*(char)
}	O
,	O
{	O
60	int
,	O
"less"	*(char)
}	O
,	O
{	O
61	int
,	O
"equal"	*(char)
}	O
,	O
{	O
62	int
,	O
"greater"	*(char)
}	O
,	O
{	O
63	int
,	O
"question"	*(char)
}	O
,	O
{	O
64	int
,	O
"at"	*(char)
}	O
,	O
{	O
65	int
,	O
"A"	*(char)
}	O
,	O
{	O
66	int
,	O
"B"	*(char)
}	O
,	O
{	O
67	int
,	O
"C"	*(char)
}	O
,	O
{	O
68	int
,	O
"D"	*(char)
}	O
,	O
{	O
69	int
,	O
"E"	*(char)
}	O
,	O
{	O
70	int
,	O
"F"	*(char)
}	O
,	O
{	O
71	int
,	O
"G"	*(char)
}	O
,	O
{	O
72	int
,	O
"H"	*(char)
}	O
,	O
{	O
73	int
,	O
"I"	*(char)
}	O
,	O
{	O
74	int
,	O
"J"	*(char)
}	O
,	O
{	O
75	int
,	O
"K"	*(char)
}	O
,	O
{	O
76	int
,	O
"L"	*(char)
}	O
,	O
{	O
77	int
,	O
"M"	*(char)
}	O
,	O
{	O
78	int
,	O
"N"	*(char)
}	O
,	O
{	O
79	int
,	O
"O"	*(char)
}	O
,	O
{	O
80	int
,	O
"P"	*(char)
}	O
,	O
{	O
81	int
,	O
"Q"	*(char)
}	O
,	O
{	O
82	int
,	O
"R"	*(char)
}	O
,	O
{	O
83	int
,	O
"S"	*(char)
}	O
,	O
{	O
84	int
,	O
"T"	*(char)
}	O
,	O
{	O
85	int
,	O
"U"	*(char)
}	O
,	O
{	O
86	int
,	O
"V"	*(char)
}	O
,	O
{	O
87	int
,	O
"W"	*(char)
}	O
,	O
{	O
88	int
,	O
"X"	*(char)
}	O
,	O
{	O
89	int
,	O
"Y"	*(char)
}	O
,	O
{	O
90	int
,	O
"Z"	*(char)
}	O
,	O
{	O
91	int
,	O
"bracketleft"	*(char)
}	O
,	O
{	O
92	int
,	O
"backslash"	*(char)
}	O
,	O
{	O
93	int
,	O
"bracketright"	*(char)
}	O
,	O
{	O
94	int
,	O
"asciicircum"	*(char)
}	O
,	O
{	O
95	int
,	O
"underscore"	*(char)
}	O
,	O
{	O
96	int
,	O
"quoteleft"	*(char)
}	O
,	O
{	O
97	int
,	O
"a"	*(char)
}	O
,	O
{	O
98	int
,	O
"b"	*(char)
}	O
,	O
{	O
99	int
,	O
"c"	*(char)
}	O
,	O
{	O
100	int
,	O
"d"	*(char)
}	O
,	O
{	O
101	int
,	O
"e"	*(char)
}	O
,	O
{	O
102	int
,	O
"f"	*(char)
}	O
,	O
{	O
103	int
,	O
"g"	*(char)
}	O
,	O
{	O
104	int
,	O
"h"	*(char)
}	O
,	O
{	O
105	int
,	O
"i"	*(char)
}	O
,	O
{	O
106	int
,	O
"j"	*(char)
}	O
,	O
{	O
107	int
,	O
"k"	*(char)
}	O
,	O
{	O
108	int
,	O
"l"	*(char)
}	O
,	O
{	O
109	int
,	O
"m"	*(char)
}	O
,	O
{	O
110	int
,	O
"n"	*(char)
}	O
,	O
{	O
111	int
,	O
"o"	*(char)
}	O
,	O
{	O
112	int
,	O
"p"	*(char)
}	O
,	O
{	O
113	int
,	O
"q"	*(char)
}	O
,	O
{	O
114	int
,	O
"r"	*(char)
}	O
,	O
{	O
115	int
,	O
"s"	*(char)
}	O
,	O
{	O
116	int
,	O
"t"	*(char)
}	O
,	O
{	O
117	int
,	O
"u"	*(char)
}	O
,	O
{	O
118	int
,	O
"v"	*(char)
}	O
,	O
{	O
119	int
,	O
"w"	*(char)
}	O
,	O
{	O
120	int
,	O
"x"	*(char)
}	O
,	O
{	O
121	int
,	O
"y"	*(char)
}	O
,	O
{	O
122	int
,	O
"z"	*(char)
}	O
,	O
{	O
123	int
,	O
"braceleft"	*(char)
}	O
,	O
{	O
124	int
,	O
"bar"	*(char)
}	O
,	O
{	O
125	int
,	O
"braceright"	*(char)
}	O
,	O
{	O
126	int
,	O
"asciitilde"	*(char)
}	O
,	O
{	O
161	int
,	O
"exclamdown"	*(char)
}	O
,	O
{	O
162	int
,	O
"cent"	*(char)
}	O
,	O
{	O
163	int
,	O
"sterling"	*(char)
}	O
,	O
{	O
164	int
,	O
"fraction"	*(char)
}	O
,	O
{	O
165	int
,	O
"yen"	*(char)
}	O
,	O
{	O
166	int
,	O
"florin"	*(char)
}	O
,	O
{	O
167	int
,	O
"section"	*(char)
}	O
,	O
{	O
168	int
,	O
"currency"	*(char)
}	O
,	O
{	O
169	int
,	O
"quotesingle"	*(char)
}	O
,	O
{	O
170	int
,	O
"quotedblleft"	*(char)
}	O
,	O
{	O
171	int
,	O
"guillemotleft"	*(char)
}	O
,	O
{	O
172	int
,	O
"guilsinglleft"	*(char)
}	O
,	O
{	O
173	int
,	O
"guilsinglright"	*(char)
}	O
,	O
{	O
174	int
,	O
"fi"	*(char)
}	O
,	O
{	O
175	int
,	O
"fl"	*(char)
}	O
,	O
{	O
177	int
,	O
"endash"	*(char)
}	O
,	O
{	O
178	int
,	O
"dagger"	*(char)
}	O
,	O
{	O
179	int
,	O
"daggerdbl"	*(char)
}	O
,	O
{	O
180	int
,	O
"periodcentered"	*(char)
}	O
,	O
{	O
182	int
,	O
"paragraph"	*(char)
}	O
,	O
{	O
183	int
,	O
"bullet"	*(char)
}	O
,	O
{	O
184	int
,	O
"quotesinglbase"	*(char)
}	O
,	O
{	O
185	int
,	O
"quotedblbase"	*(char)
}	O
,	O
{	O
186	int
,	O
"quotedblright"	*(char)
}	O
,	O
{	O
187	int
,	O
"guillemotright"	*(char)
}	O
,	O
{	O
188	int
,	O
"ellipsis"	*(char)
}	O
,	O
{	O
189	int
,	O
"perthousand"	*(char)
}	O
,	O
{	O
191	int
,	O
"questiondown"	*(char)
}	O
,	O
{	O
193	int
,	O
"grave"	*(char)
}	O
,	O
{	O
194	int
,	O
"acute"	*(char)
}	O
,	O
{	O
195	int
,	O
"circumflex"	*(char)
}	O
,	O
{	O
196	int
,	O
"tilde"	*(char)
}	O
,	O
{	O
197	int
,	O
"macron"	*(char)
}	O
,	O
{	O
198	int
,	O
"breve"	*(char)
}	O
,	O
{	O
199	int
,	O
"dotaccent"	*(char)
}	O
,	O
{	O
200	int
,	O
"dieresis"	*(char)
}	O
,	O
{	O
202	int
,	O
"ring"	*(char)
}	O
,	O
{	O
203	int
,	O
"cedilla"	*(char)
}	O
,	O
{	O
205	int
,	O
"hungarumlaut"	*(char)
}	O
,	O
{	O
206	int
,	O
"ogonek"	*(char)
}	O
,	O
{	O
207	int
,	O
"caron"	*(char)
}	O
,	O
{	O
208	int
,	O
"emdash"	*(char)
}	O
,	O
{	O
225	int
,	O
"AE"	*(char)
}	O
,	O
{	O
227	int
,	O
"ordfeminine"	*(char)
}	O
,	O
{	O
232	int
,	O
"Lslash"	*(char)
}	O
,	O
{	O
233	int
,	O
"Oslash"	*(char)
}	O
,	O
{	O
234	int
,	O
"OE"	*(char)
}	O
,	O
{	O
235	int
,	O
"ordmasculine"	*(char)
}	O
,	O
{	O
241	int
,	O
"ae"	*(char)
}	O
,	O
{	O
245	int
,	O
"dotlessi"	*(char)
}	O
,	O
{	O
248	int
,	O
"lslash"	*(char)
}	O
,	O
{	O
249	int
,	O
"oslash"	*(char)
}	O
,	O
{	O
250	int
,	O
"oe"	*(char)
}	O
,	O
{	O
251	int
,	O
"germandbls"	*(char)
}	O
,	O
{	O
-	O
1	int
,	O
"Aacute"	*(char)
}	O
,	O
{	O
-	O
1	int
,	O
"Acircumflex"	*(char)
}	O
,	O
{	O
-	O
1	int
,	O
"Adieresis"	*(char)
}	O
,	O
{	O
-	O
1	int
,	O
"Agrave"	*(char)
}	O
,	O
{	O
-	O
1	int
,	O
"Aring"	*(char)
}	O
,	O
{	O
-	O
1	int
,	O
"Atilde"	*(char)
}	O
,	O
{	O
-	O
1	int
,	O
"Ccedilla"	*(char)
}	O
,	O
{	O
-	O
1	int
,	O
"Eacute"	*(char)
}	O
,	O
{	O
-	O
1	int
,	O
"Ecircumflex"	*(char)
}	O
,	O
{	O
-	O
1	int
,	O
"Edieresis"	*(char)
}	O
,	O
{	O
-	O
1	int
,	O
"Egrave"	*(char)
}	O
,	O
{	O
-	O
1	int
,	O
"Eth"	*(char)
}	O
,	O
{	O
-	O
1	int
,	O
"Gcaron"	*(char)
}	O
,	O
{	O
-	O
1	int
,	O
"IJ"	*(char)
}	O
,	O
{	O
-	O
1	int
,	O
"Iacute"	*(char)
}	O
,	O
{	O
-	O
1	int
,	O
"Icircumflex"	*(char)
}	O
,	O
{	O
-	O
1	int
,	O
"Idieresis"	*(char)
}	O
,	O
{	O
-	O
1	int
,	O
"Idot"	*(char)
}	O
,	O
{	O
-	O
1	int
,	O
"Igrave"	*(char)
}	O
,	O
{	O
-	O
1	int
,	O
"LL"	*(char)
}	O
,	O
{	O
-	O
1	int
,	O
"Ntilde"	*(char)
}	O
,	O
{	O
-	O
1	int
,	O
"Oacute"	*(char)
}	O
,	O
{	O
-	O
1	int
,	O
"Ocircumflex"	*(char)
}	O
,	O
{	O
-	O
1	int
,	O
"Odieresis"	*(char)
}	O
,	O
{	O
-	O
1	int
,	O
"Ograve"	*(char)
}	O
,	O
{	O
-	O
1	int
,	O
"Otilde"	*(char)
}	O
,	O
{	O
-	O
1	int
,	O
"Scaron"	*(char)
}	O
,	O
{	O
-	O
1	int
,	O
"Scedilla"	*(char)
}	O
,	O
{	O
-	O
1	int
,	O
"Thorn"	*(char)
}	O
,	O
{	O
-	O
1	int
,	O
"Uacute"	*(char)
}	O
,	O
{	O
-	O
1	int
,	O
"Ucircumflex"	*(char)
}	O
,	O
{	O
-	O
1	int
,	O
"Udieresis"	*(char)
}	O
,	O
{	O
-	O
1	int
,	O
"Ugrave"	*(char)
}	O
,	O
{	O
-	O
1	int
,	O
"Yacute"	*(char)
}	O
,	O
{	O
-	O
1	int
,	O
"Ydieresis"	*(char)
}	O
,	O
{	O
-	O
1	int
,	O
"Zcaron"	*(char)
}	O
,	O
{	O
-	O
1	int
,	O
"aacute"	*(char)
}	O
,	O
{	O
-	O
1	int
,	O
"acircumflex"	*(char)
}	O
,	O
{	O
-	O
1	int
,	O
"adieresis"	*(char)
}	O
,	O
{	O
-	O
1	int
,	O
"agrave"	*(char)
}	O
,	O
{	O
-	O
1	int
,	O
"aring"	*(char)
}	O
,	O
{	O
-	O
1	int
,	O
"arrowboth"	*(char)
}	O
,	O
{	O
-	O
1	int
,	O
"arrowdown"	*(char)
}	O
,	O
{	O
-	O
1	int
,	O
"arrowleft"	*(char)
}	O
,	O
{	O
-	O
1	int
,	O
"arrowright"	*(char)
}	O
,	O
{	O
-	O
1	int
,	O
"arrowup"	*(char)
}	O
,	O
{	O
-	O
1	int
,	O
"atilde"	*(char)
}	O
,	O
{	O
-	O
1	int
,	O
"brokenbar"	*(char)
}	O
,	O
{	O
-	O
1	int
,	O
"ccedilla"	*(char)
}	O
,	O
{	O
-	O
1	int
,	O
"center"	*(char)
}	O
,	O
{	O
-	O
1	int
,	O
"copyright"	*(char)
}	O
,	O
{	O
-	O
1	int
,	O
"dectab"	*(char)
}	O
,	O
{	O
-	O
1	int
,	O
"degree"	*(char)
}	O
,	O
{	O
-	O
1	int
,	O
"divide"	*(char)
}	O
,	O
{	O
-	O
1	int
,	O
"down"	*(char)
}	O
,	O
{	O
-	O
1	int
,	O
"eacute"	*(char)
}	O
,	O
{	O
-	O
1	int
,	O
"ecircumflex"	*(char)
}	O
,	O
{	O
-	O
1	int
,	O
"edieresis"	*(char)
}	O
,	O
{	O
-	O
1	int
,	O
"egrave"	*(char)
}	O
,	O
{	O
-	O
1	int
,	O
"eth"	*(char)
}	O
,	O
{	O
-	O
1	int
,	O
"format"	*(char)
}	O
,	O
{	O
-	O
1	int
,	O
"gcaron"	*(char)
}	O
,	O
{	O
-	O
1	int
,	O
"graybox"	*(char)
}	O
,	O
{	O
-	O
1	int
,	O
"iacute"	*(char)
}	O
,	O
{	O
-	O
1	int
,	O
"icircumflex"	*(char)
}	O
,	O
{	O
-	O
1	int
,	O
"idieresis"	*(char)
}	O
,	O
{	O
-	O
1	int
,	O
"igrave"	*(char)
}	O
,	O
{	O
-	O
1	int
,	O
"ij"	*(char)
}	O
,	O
{	O
-	O
1	int
,	O
"indent"	*(char)
}	O
,	O
{	O
-	O
1	int
,	O
"largebullet"	*(char)
}	O
,	O
{	O
-	O
1	int
,	O
"left"	*(char)
}	O
,	O
{	O
-	O
1	int
,	O
"lira"	*(char)
}	O
,	O
{	O
-	O
1	int
,	O
"ll"	*(char)
}	O
,	O
{	O
-	O
1	int
,	O
"logicalnot"	*(char)
}	O
,	O
{	O
-	O
1	int
,	O
"merge"	*(char)
}	O
,	O
{	O
-	O
1	int
,	O
"minus"	*(char)
}	O
,	O
{	O
-	O
1	int
,	O
"mu"	*(char)
}	O
,	O
{	O
-	O
1	int
,	O
"multiply"	*(char)
}	O
,	O
{	O
-	O
1	int
,	O
"notegraphic"	*(char)
}	O
,	O
{	O
-	O
1	int
,	O
"ntilde"	*(char)
}	O
,	O
{	O
-	O
1	int
,	O
"oacute"	*(char)
}	O
,	O
{	O
-	O
1	int
,	O
"ocircumflex"	*(char)
}	O
,	O
{	O
-	O
1	int
,	O
"odieresis"	*(char)
}	O
,	O
{	O
-	O
1	int
,	O
"ograve"	*(char)
}	O
,	O
{	O
-	O
1	int
,	O
"onehalf"	*(char)
}	O
,	O
{	O
-	O
1	int
,	O
"onequarter"	*(char)
}	O
,	O
{	O
-	O
1	int
,	O
"onesuperior"	*(char)
}	O
,	O
{	O
-	O
1	int
,	O
"otilde"	*(char)
}	O
,	O
{	O
-	O
1	int
,	O
"overscore"	*(char)
}	O
,	O
{	O
-	O
1	int
,	O
"plusminus"	*(char)
}	O
,	O
{	O
-	O
1	int
,	O
"prescription"	*(char)
}	O
,	O
{	O
-	O
1	int
,	O
"registered"	*(char)
}	O
,	O
{	O
-	O
1	int
,	O
"return"	*(char)
}	O
,	O
{	O
-	O
1	int
,	O
"scaron"	*(char)
}	O
,	O
{	O
-	O
1	int
,	O
"scedilla"	*(char)
}	O
,	O
{	O
-	O
1	int
,	O
"square"	*(char)
}	O
,	O
{	O
-	O
1	int
,	O
"stop"	*(char)
}	O
,	O
{	O
-	O
1	int
,	O
"tab"	*(char)
}	O
,	O
{	O
-	O
1	int
,	O
"thorn"	*(char)
}	O
,	O
{	O
-	O
1	int
,	O
"threequarters"	*(char)
}	O
,	O
{	O
-	O
1	int
,	O
"threesuperior"	*(char)
}	O
,	O
{	O
-	O
1	int
,	O
"trademark"	*(char)
}	O
,	O
{	O
-	O
1	int
,	O
"twosuperior"	*(char)
}	O
,	O
{	O
-	O
1	int
,	O
"uacute"	*(char)
}	O
,	O
{	O
-	O
1	int
,	O
"ucircumflex"	*(char)
}	O
,	O
{	O
-	O
1	int
,	O
"udieresis"	*(char)
}	O
,	O
{	O
-	O
1	int
,	O
"ugrave"	*(char)
}	O
,	O
{	O
-	O
1	int
,	O
"up"	*(char)
}	O
,	O
{	O
-	O
1	int
,	O
"yacute"	*(char)
}	O
,	O
{	O
-	O
1	int
,	O
"ydieresis"	*(char)
}	O
,	O
{	O
-	O
1	int
,	O
"zcaron"	*(char)
}	O
,	O
{	O
0	int
,	O
NULL	O
}	O
,	O
}	O
;	O
AFMError	int
afm_open_default_font	(*(struct),*(*(struct(*(struct`),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*`,*`,*`,*`,double,double,double,double,*`,*`,*`,long,long,*`,long,enum(int,int),double,double,enum(int,int),double,double,double,double,*`,*`,*`,*`),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct`),long,*(struct`),long,*(struct`),long,*(struct`)))))->(int)
(	O
AFMHandle	*(struct)
handle	*(struct)
,	O
AFMFont	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
*	O
font_return	*(*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct`),*(struct`),*(struct`),*(struct`)),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*`,double,double,double,double,double,double,double,*`)),long,*(struct(*`,long,*`)),long,*(struct(*`,*`,double,double)),long,*(struct(long,double,double,double,double)))))
)	O
{	O
AFMFont	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
;	O
AFMIndividualCharacterMetrics	struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char))))
*	O
cm	*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))
;	O
int	O
i	int
;	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
=	O
(	O
AFMFont	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
)	O
calloc	(long,long)->(*(void))
(	O
1	int
,	O
sizeof	O
(	O
*	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
)	O
)	O
;	O
if	O
(	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
==	O
NULL	O
)	O
goto	O
error_out	O
;	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
->	O
private	*(struct)
=	O
(	O
struct	O
afm_font_private_data_st	struct(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char))))),*(struct),*(struct))
*	O
)	O
calloc	(long,long)->(*(void))
(	O
1	int
,	O
sizeof	O
(	O
*	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
->	O
private	*(struct)
)	O
)	O
;	O
if	O
(	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
->	O
private	*(struct)
==	O
NULL	O
)	O
goto	O
error_out	O
;	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
->	O
private	*(struct)
->	O
fontnames	*(struct)
=	O
strhash_init	()->(*(struct))
(	O
)	O
;	O
if	O
(	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
->	O
private	*(struct)
->	O
fontnames	*(struct)
==	O
NULL	O
)	O
goto	O
error_out	O
;	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
->	O
version	double
=	O
4.0	int
;	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
->	O
global_info	struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*(struct(int,union`)))),*(struct(double,*(struct(int,union`)))),*(struct(double,*(struct(int,union`)))),*(struct(double,*(struct(int,union`)))))
.	O
FontName	*(char)
=	O
(	O
char	O
*	O
)	O
malloc	(long)->(*(void))
(	O
strlen	(*(char))->(long)
(	O
"Courier"	*(char)
)	O
+	O
1	int
)	O
;	O
if	O
(	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
->	O
global_info	struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*(struct(int,union`)))),*(struct(double,*(struct(int,union`)))),*(struct(double,*(struct(int,union`)))),*(struct(double,*(struct(int,union`)))))
.	O
FontName	*(char)
==	O
NULL	O
)	O
goto	O
error_out	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
->	O
global_info	struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*(struct(int,union`)))),*(struct(double,*(struct(int,union`)))),*(struct(double,*(struct(int,union`)))),*(struct(double,*(struct(int,union`)))))
.	O
FontName	*(char)
,	O
"Courier"	*(char)
)	O
;	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
->	O
global_info	struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*(struct(int,union`)))),*(struct(double,*(struct(int,union`)))),*(struct(double,*(struct(int,union`)))),*(struct(double,*(struct(int,union`)))))
.	O
FontBBox_llx	double
=	O
-	O
40.0	int
;	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
->	O
global_info	struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*(struct(int,union`)))),*(struct(double,*(struct(int,union`)))),*(struct(double,*(struct(int,union`)))),*(struct(double,*(struct(int,union`)))))
.	O
FontBBox_lly	double
=	O
-	O
290.0	int
;	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
->	O
global_info	struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*(struct(int,union`)))),*(struct(double,*(struct(int,union`)))),*(struct(double,*(struct(int,union`)))),*(struct(double,*(struct(int,union`)))))
.	O
FontBBox_urx	double
=	O
640.0	int
;	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
->	O
global_info	struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*(struct(int,union`)))),*(struct(double,*(struct(int,union`)))),*(struct(double,*(struct(int,union`)))),*(struct(double,*(struct(int,union`)))))
.	O
FontBBox_ury	double
=	O
795.0	int
;	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
->	O
writing_direction_metrics	array(struct(enum(int,int),double,double,double,double,double,enum(int,int)))
[	O
0	int
]	O
.	O
is_valid	enum(int,int)
=	O
AFMTrue	int
;	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
->	O
writing_direction_metrics	array(struct(enum(int,int),double,double,double,double,double,enum(int,int)))
[	O
0	int
]	O
.	O
IsFixedPitch	enum(int,int)
=	O
AFMTrue	int
;	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
->	O
writing_direction_metrics	array(struct(enum(int,int),double,double,double,double,double,enum(int,int)))
[	O
0	int
]	O
.	O
CharWidth_x	double
=	O
600.0	int
;	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
->	O
writing_direction_metrics	array(struct(enum(int,int),double,double,double,double,double,enum(int,int)))
[	O
0	int
]	O
.	O
CharWidth_y	double
=	O
0.0	int
;	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
->	O
num_character_metrics	long
=	O
NUM_CHARACTER_METRICS	O
;	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
->	O
character_metrics	*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))
=	O
(	O
AFMIndividualCharacterMetrics	struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char))))
*	O
)	O
calloc	(long,long)->(*(void))
(	O
NUM_CHARACTER_METRICS	O
,	O
sizeof	O
(	O
AFMIndividualCharacterMetrics	struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char))))
)	O
)	O
;	O
if	O
(	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
->	O
character_metrics	*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))
==	O
NULL	O
)	O
goto	O
error_out	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
builtin_courier	array(struct(int,*(char)))
[	O
i	int
]	O
.	O
character	*(char)
;	O
i	int
++	O
)	O
{	O
cm	*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))
=	O
&	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
->	O
character_metrics	*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))
[	O
i	int
]	O
;	O
cm	*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))
->	O
name	*(char)
=	O
(	O
char	O
*	O
)	O
malloc	(long)->(*(void))
(	O
strlen	(*(char))->(long)
(	O
builtin_courier	array(struct(int,*(char)))
[	O
i	int
]	O
.	O
character	*(char)
)	O
+	O
1	int
)	O
;	O
if	O
(	O
cm	*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))
->	O
name	*(char)
==	O
NULL	O
)	O
goto	O
error_out	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
cm	*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))
->	O
name	*(char)
,	O
builtin_courier	array(struct(int,*(char)))
[	O
i	int
]	O
.	O
character	*(char)
)	O
;	O
if	O
(	O
!	O
strhash_put	(*(struct),*(char),int,*(void),*(*(void)))->(int)
(	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
->	O
private	*(struct)
->	O
fontnames	*(struct)
,	O
cm	*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))
->	O
name	*(char)
,	O
strlen	(*(char))->(long)
(	O
cm	*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))
->	O
name	*(char)
)	O
,	O
cm	*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))
,	O
NULL	O
)	O
)	O
goto	O
error_out	O
;	O
cm	*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))
->	O
character_code	long
=	O
builtin_courier	array(struct(int,*(char)))
[	O
i	int
]	O
.	O
code	char
;	O
cm	*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))
->	O
w0x	double
=	O
600.0	int
;	O
cm	*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))
->	O
w0y	double
=	O
0.0	int
;	O
}	O
*	O
font_return	*(*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct`),*(struct`),*(struct`),*(struct`)),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*`,double,double,double,double,double,double,double,*`)),long,*(struct(*`,long,*`)),long,*(struct(*`,*`,double,double)),long,*(struct(long,double,double,double,double)))))
=	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
;	O
return	O
AFM_SUCCESS	int
;	O
error_out	O
:	O
(	O
void	O
)	O
afm_close_font	(*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct`),*(struct`),*(struct`),*(struct`)),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*`,double,double,double,double,double,double,double,*`)),long,*(struct(*`,long,*`)),long,*(struct(*`,*`,double,double)),long,*(struct(long,double,double,double,double)))))->(int)
(	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
)	O
;	O
return	O
AFM_ERROR_MEMORY	int
;	O
}	O
