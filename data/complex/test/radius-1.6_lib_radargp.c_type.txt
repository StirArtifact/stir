const	O
char	O
*	O
argp_program_bug_address	*(char)
=	O
"<"	*(char)
PACKAGE_BUGREPORT	*(char)
">"	*(char)
;	O
static	O
struct	O
argp_option	struct(*(char),int,*(char),int,*(char),int)
rad_common_argp_option	array(struct(*(char),int,*(char),int,*(char),int))
[	O
]	O
=	O
{	O
{	O
"directory"	*(char)
,	O
'd'	O
,	O
N_	O
(	O
"DIR"	*(char)
)	O
,	O
0	int
,	O
N_	O
(	O
"Set path to the configuration directory"	*(char)
)	O
,	O
0	int
}	O
,	O
{	O
"license"	*(char)
,	O
'L'	O
,	O
NULL	O
,	O
0	int
,	O
N_	O
(	O
"print license and exit"	*(char)
)	O
,	O
0	int
}	O
,	O
{	O
NULL	O
,	O
0	int
,	O
NULL	O
,	O
0	int
,	O
NULL	O
,	O
0	int
}	O
}	O
;	O
static	O
error_t	int
rad_common_argp_parser	(int,*(char),*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`)),int,*(*(char)),int,int,int,int,*(void),*(*(void)),*(void),*(char),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void))))->(int)
(	O
int	O
key	int
,	O
char	O
*	O
arg	*(char)
,	O
struct	O
argp_state	struct(*(struct(*(struct(*(char),int,*(char),int,*(char),int)),*((int,*(char),*(struct`))->(int)),*(char),*(char),*(struct(*(struct`),int,*(char),int)),*((int,*(char),*(void))->(*(char))),*(char))),int,*(*(char)),int,int,int,int,*(void),*(*(void)),*(void),*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char))),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char))),*(void))
*	O
state	*(int)
)	O
;	O
struct	O
argp	struct(*(struct(*(char),int,*(char),int,*(char),int)),*((int,*(char),*(struct))->(int)),*(char),*(char),*(struct),*((int,*(char),*(void))->(*(char))),*(char))
grad_common_argp	struct(*(struct(*(char),int,*(char),int,*(char),int)),*((int,*(char),*(struct(*`,int,*`,int,int,int,int,*`,*`,*`,*`,*`,*`,*`)))->(int)),*(char),*(char),*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`)),int,*(char),int)),*((int,*(char),*(void))->(*(char))),*(char))
=	O
{	O
rad_common_argp_option	array(struct(*(char),int,*(char),int,*(char),int))
,	O
rad_common_argp_parser	(int,*(char),*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`)),int,*(*(char)),int,int,int,int,*(void),*(*(void)),*(void),*(char),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void))))->(int)
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
}	O
;	O
struct	O
argp_child	struct(*(struct(*(struct(*(char),int,*(char),int,*(char),int)),*((int,*(char),*(struct`))->(int)),*(char),*(char),*(struct(*(struct`),int,*(char),int)),*((int,*(char),*(void))->(*(char))),*(char))),int,*(char),int)
grad_common_argp_child	array(struct(*(struct(*(struct(*`,int,*`,int,*`,int)),*((int,*`,*`)->(int)),*(char),*(char),*(struct(*`,int,*`,int)),*((int,*`,*`)->(*`)),*(char))),int,*(char),int))
[	O
]	O
=	O
{	O
{	O
&	O
grad_common_argp	struct(*(struct(*(char),int,*(char),int,*(char),int)),*((int,*(char),*(struct(*`,int,*`,int,int,int,int,*`,*`,*`,*`,*`,*`,*`)))->(int)),*(char),*(char),*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`)),int,*(char),int)),*((int,*(char),*(void))->(*(char))),*(char))
,	O
0	int
,	O
N_	O
(	O
"Common options"	*(char)
)	O
,	O
1	int
}	O
,	O
{	O
NULL	O
}	O
,	O
}	O
;	O
char	O
*	O
__argp_base_name	(*(char))->(*(char))
(	O
const	O
char	O
*	O
arg	*(char)
)	O
{	O
const	O
char	O
*	O
p	*(struct)
=	O
strrchr	(*(char),int)->(*(char))
(	O
arg	*(char)
,	O
'/'	O
)	O
;	O
if	O
(	O
!	O
p	*(struct)
)	O
p	*(struct)
=	O
arg	*(char)
;	O
else	O
p	*(struct)
++	O
;	O
return	O
(	O
char	O
*	O
)	O
p	*(struct)
;	O
}	O
static	O
char	O
license_text	array(char)
[	O
]	O
=	O
N_	O
(	O
"   This program is free software; you can redistribute it and/or modify\n"	*(char)
"   it under the terms of the GNU General Public License as published by\n"	*(char)
"   the Free Software Foundation; either version 3, or (at your option)\n"	*(char)
"   any later version.\n"	*(char)
"\n"	*(char)
"   This program is distributed in the hope that it will be useful,\n"	*(char)
"   but WITHOUT ANY WARRANTY; without even the implied warranty of\n"	*(char)
"   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n"	*(char)
"   GNU General Public License for more details.\n"	*(char)
"\n"	*(char)
"   You should have received a copy of the GNU General Public License\n"	*(char)
"   along with GNU Radius; if not, write to the Free Software Foundation,\n"	*(char)
"   Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n"	*(char)
"\n"	*(char)
)	O
;	O
static	O
error_t	int
rad_common_argp_parser	(int,*(char),*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`)),int,*(*(char)),int,int,int,int,*(void),*(*(void)),*(void),*(char),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void))))->(int)
(	O
int	O
key	int
,	O
char	O
*	O
arg	*(char)
,	O
struct	O
argp_state	struct(*(struct(*(struct(*(char),int,*(char),int,*(char),int)),*((int,*(char),*(struct`))->(int)),*(char),*(char),*(struct(*(struct`),int,*(char),int)),*((int,*(char),*(void))->(*(char))),*(char))),int,*(*(char)),int,int,int,int,*(void),*(*(void)),*(void),*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char))),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char))),*(void))
*	O
state	*(int)
)	O
{	O
switch	O
(	O
key	int
)	O
{	O
case	O
'd'	O
:	O
grad_config_dir	*(char)
=	O
arg	*(char)
;	O
break	O
;	O
case	O
'L'	O
:	O
printf	(*(char))->(int)
(	O
"%s"	*(char)
,	O
_	O
(	O
license_text	array(char)
)	O
)	O
;	O
exit	(int)->(void)
(	O
0	int
)	O
;	O
case	O
ARGP_KEY_FINI	int
:	O
grad_path_init	()->(void)
(	O
)	O
;	O
break	O
;	O
default	O
:	O
return	O
ARGP_ERR_UNKNOWN	O
;	O
}	O
return	O
0	int
;	O
}	O
error_t	int
grad_argp_parse	(*(struct(*(struct(*`,int,*`,int,*`,int)),*((int,*`,*`)->(int)),*(char),*(char),*(struct(*`,int,*`,int)),*((int,*`,*`)->(*`)),*(char))),*(int),array(*(*(char))),int,*(int),*(void))->(int)
(	O
const	O
struct	O
argp	struct(*(struct(*(char),int,*(char),int,*(char),int)),*((int,*(char),*(struct))->(int)),*(char),*(char),*(struct),*((int,*(char),*(void))->(*(char))),*(char))
*	O
argp	struct(*(struct(*(char),int,*(char),int,*(char),int)),*((int,*(char),*(struct))->(int)),*(char),*(char),*(struct),*((int,*(char),*(void))->(*(char))),*(char))
,	O
int	O
*	O
pargc	*(int)
,	O
char	O
*	O
*	O
pargv	array(*(*(char)))
[	O
]	O
,	O
unsigned	O
flags	int
,	O
int	O
*	O
arg_index	*(int)
,	O
void	O
*	O
input	*(void)
)	O
{	O
error_t	int
ret	int
;	O
program_invocation_name	*(char)
=	O
(	O
*	O
pargv	array(*(*(char)))
[	O
0	int
]	O
)	O
;	O
program_invocation_short_name	*(char)
=	O
strrchr	(*(char),int)->(*(char))
(	O
program_invocation_name	*(char)
,	O
'/'	O
)	O
;	O
if	O
(	O
!	O
program_invocation_short_name	*(char)
)	O
program_invocation_short_name	*(char)
=	O
program_invocation_name	*(char)
;	O
else	O
program_invocation_short_name	*(char)
++	O
;	O
ret	int
=	O
argp_parse	(*(struct(*(struct(*`,int,*`,int,*`,int)),*((int,*`,*`)->(int)),*(char),*(char),*(struct(*`,int,*`,int)),*((int,*`,*`)->(*`)),*(char))),int,*(*(char)),int,*(int),*(void))->(int)
(	O
argp	struct(*(struct(*(char),int,*(char),int,*(char),int)),*((int,*(char),*(struct))->(int)),*(char),*(char),*(struct),*((int,*(char),*(void))->(*(char))),*(char))
,	O
*	O
pargc	*(int)
,	O
*	O
pargv	array(*(*(char)))
,	O
flags	int
,	O
arg_index	*(int)
,	O
input	*(void)
)	O
;	O
return	O
ret	int
;	O
}	O
