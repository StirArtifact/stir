static	O
int	O
boardsize	int
;	O
static	O
int	O
identify_move_type	(*(char))->(int)
(	O
char	O
*	O
text	*(char)
)	O
{	O
if	O
(	O
!	O
text	*(char)
)	O
return	O
STANDARD	int
;	O
switch	O
(	O
(	O
int	O
)	O
*	O
text	*(char)
)	O
{	O
case	O
'u'	O
:	O
case	O
'U'	O
:	O
return	O
URGENT	int
;	O
break	O
;	O
case	O
'J'	O
:	O
case	O
'S'	O
:	O
return	O
STANDARD	int
;	O
break	O
;	O
case	O
'j'	O
:	O
case	O
's'	O
:	O
return	O
MINOR	int
;	O
break	O
;	O
case	O
'T'	O
:	O
return	O
TRICK	int
;	O
break	O
;	O
case	O
't'	O
:	O
return	O
TENUKI_OK	int
;	O
break	O
;	O
case	O
'0'	O
:	O
case	O
'a'	O
:	O
case	O
'A'	O
:	O
return	O
ANTISUJI	int
;	O
break	O
;	O
}	O
return	O
STANDARD	int
;	O
}	O
static	O
void	O
write_selected_lines	(*(char),char)->(void)
(	O
char	O
*	O
text	*(char)
,	O
char	O
start_char	char
)	O
{	O
char	O
*	O
p	*(char)
;	O
if	O
(	O
!	O
text	*(char)
)	O
return	O
;	O
while	O
(	O
1	int
)	O
{	O
p	*(char)
=	O
strchr	(*(char),int)->(*(char))
(	O
text	*(char)
,	O
'\n'	O
)	O
;	O
if	O
(	O
p	*(char)
)	O
*	O
p	*(char)
=	O
0	int
;	O
if	O
(	O
*	O
text	*(char)
==	O
start_char	char
)	O
printf	(*(char))->(int)
(	O
"%s\n"	*(char)
,	O
text	*(char)
)	O
;	O
if	O
(	O
p	*(char)
)	O
{	O
*	O
p	*(char)
=	O
'\n'	O
;	O
text	*(char)
=	O
p	*(char)
+	O
1	int
;	O
}	O
else	O
break	O
;	O
}	O
}	O
static	O
int	O
selected_line_exists	(*(char),char)->(int)
(	O
char	O
*	O
text	*(char)
,	O
char	O
start_char	char
)	O
{	O
char	O
*	O
p	*(char)
;	O
if	O
(	O
!	O
text	*(char)
)	O
return	O
0	int
;	O
while	O
(	O
1	int
)	O
{	O
if	O
(	O
*	O
text	*(char)
==	O
start_char	char
)	O
return	O
1	int
;	O
p	*(char)
=	O
strchr	(*(char),int)->(*(char))
(	O
text	*(char)
,	O
'\n'	O
)	O
;	O
if	O
(	O
p	*(char)
)	O
text	*(char)
=	O
p	*(char)
+	O
1	int
;	O
else	O
break	O
;	O
}	O
return	O
0	int
;	O
}	O
static	O
void	O
write_diagram	(int,int,int,int,int,array(array(char)))->(void)
(	O
int	O
movei	int
,	O
int	O
movej	int
,	O
int	O
color	int
,	O
int	O
marki	int
,	O
int	O
markj	int
,	O
char	O
labels	array(array(char))
[	O
MAX_BOARD	int
]	O
[	O
MAX_BOARD	int
]	O
)	O
{	O
int	O
i	int
,	O
j	int
;	O
for	O
(	O
i	int
=	O
-	O
1	int
;	O
i	int
<=	O
marki	int
;	O
i	int
++	O
)	O
{	O
for	O
(	O
j	int
=	O
markj	int
;	O
j	int
>=	O
0	int
;	O
j	int
--	O
)	O
{	O
if	O
(	O
i	int
==	O
-	O
1	int
)	O
printf	(*(char))->(int)
(	O
"-"	*(char)
)	O
;	O
else	O
if	O
(	O
labels	array(array(char))
&&	O
labels	array(array(char))
[	O
i	int
]	O
[	O
j	int
]	O
)	O
printf	(*(char))->(int)
(	O
"%c"	*(char)
,	O
labels	array(array(char))
[	O
i	int
]	O
[	O
j	int
]	O
)	O
;	O
else	O
if	O
(	O
i	int
==	O
movei	int
&&	O
j	int
==	O
movej	int
)	O
printf	(*(char))->(int)
(	O
"*"	*(char)
)	O
;	O
else	O
if	O
(	O
BOARD	O
(	O
i	int
,	O
j	int
)	O
==	O
color	int
)	O
printf	(*(char))->(int)
(	O
"O"	*(char)
)	O
;	O
else	O
if	O
(	O
BOARD	O
(	O
i	int
,	O
j	int
)	O
==	O
OTHER_COLOR	O
(	O
color	int
)	O
)	O
printf	(*(char))->(int)
(	O
"X"	*(char)
)	O
;	O
else	O
printf	(*(char))->(int)
(	O
"."	*(char)
)	O
;	O
}	O
if	O
(	O
i	int
==	O
-	O
1	int
)	O
printf	(*(char))->(int)
(	O
"+\n"	*(char)
)	O
;	O
else	O
printf	(*(char))->(int)
(	O
"|\n"	*(char)
)	O
;	O
}	O
}	O
static	O
void	O
write_colon_line	(int,char,*(char))->(void)
(	O
int	O
move_type	int
,	O
char	O
symmetry	char
,	O
char	O
*	O
text	*(char)
)	O
{	O
char	O
*	O
p	*(char)
;	O
if	O
(	O
!	O
text	*(char)
)	O
p	*(char)
=	O
NULL	O
;	O
else	O
if	O
(	O
*	O
text	*(char)
==	O
':'	O
)	O
p	*(char)
=	O
text	*(char)
+	O
1	int
;	O
else	O
{	O
p	*(char)
=	O
strstr	(*(char),*(char))->(*(char))
(	O
text	*(char)
,	O
"\n:"	*(char)
)	O
;	O
if	O
(	O
p	*(char)
)	O
p	*(char)
+=	O
2	int
;	O
}	O
printf	(*(char))->(int)
(	O
":%c,sF"	*(char)
,	O
symmetry	char
)	O
;	O
switch	O
(	O
move_type	int
)	O
{	O
case	O
URGENT	int
:	O
printf	(*(char))->(int)
(	O
"U"	*(char)
)	O
;	O
break	O
;	O
case	O
STANDARD	int
:	O
printf	(*(char))->(int)
(	O
"J"	*(char)
)	O
;	O
break	O
;	O
case	O
MINOR	int
:	O
printf	(*(char))->(int)
(	O
"j"	*(char)
)	O
;	O
break	O
;	O
case	O
TRICK	int
:	O
printf	(*(char))->(int)
(	O
"T"	*(char)
)	O
;	O
break	O
;	O
case	O
TENUKI_OK	int
:	O
printf	(*(char))->(int)
(	O
"t"	*(char)
)	O
;	O
break	O
;	O
case	O
ANTISUJI	int
:	O
printf	(*(char))->(int)
(	O
"N"	*(char)
)	O
;	O
break	O
;	O
}	O
if	O
(	O
p	*(char)
)	O
{	O
if	O
(	O
strchr	(*(char),int)->(*(char))
(	O
p	*(char)
,	O
'('	O
)	O
&&	O
(	O
!	O
strchr	(*(char),int)->(*(char))
(	O
p	*(char)
,	O
','	O
)	O
||	O
strchr	(*(char),int)->(*(char))
(	O
p	*(char)
,	O
','	O
)	O
>	O
strchr	(*(char),int)->(*(char))
(	O
p	*(char)
,	O
'('	O
)	O
)	O
)	O
printf	(*(char))->(int)
(	O
","	*(char)
)	O
;	O
while	O
(	O
*	O
p	*(char)
!=	O
0	int
&&	O
*	O
p	*(char)
!=	O
'\n'	O
)	O
fputc	(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
*	O
(	O
p	*(char)
++	O
)	O
,	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
}	O
printf	(*(char))->(int)
(	O
"\n"	*(char)
)	O
;	O
}	O
static	O
int	O
board_is_symmetric	(int,array(array(char)))->(int)
(	O
int	O
n	int
,	O
char	O
labels	array(array(char))
[	O
MAX_BOARD	int
]	O
[	O
MAX_BOARD	int
]	O
)	O
{	O
int	O
i	int
;	O
int	O
j	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<=	O
n	int
;	O
i	int
++	O
)	O
{	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<	O
i	int
;	O
j	int
++	O
)	O
{	O
if	O
(	O
BOARD	O
(	O
i	int
,	O
j	int
)	O
!=	O
BOARD	O
(	O
j	int
,	O
i	int
)	O
||	O
(	O
labels	array(array(char))
&&	O
labels	array(array(char))
[	O
i	int
]	O
[	O
j	int
]	O
!=	O
labels	array(array(char))
[	O
j	int
]	O
[	O
i	int
]	O
)	O
)	O
return	O
0	int
;	O
}	O
}	O
return	O
1	int
;	O
}	O
static	O
void	O
make_pattern	(int,int,int,int,int,int,array(array(char)),*(char),*(char))->(void)
(	O
int	O
movei	int
,	O
int	O
movej	int
,	O
int	O
color	int
,	O
int	O
marki	int
,	O
int	O
markj	int
,	O
int	O
multiple_marks	int
,	O
char	O
labels	array(array(char))
[	O
MAX_BOARD	int
]	O
[	O
MAX_BOARD	int
]	O
,	O
char	O
*	O
text	*(char)
,	O
const	O
char	O
*	O
prefix	*(char)
)	O
{	O
static	O
int	O
pattern_number	int
=	O
0	int
;	O
int	O
move_type	int
;	O
char	O
symmetry	char
=	O
'8'	O
;	O
pattern_number	int
++	O
;	O
move_type	int
=	O
identify_move_type	(*(char))->(int)
(	O
text	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"Pattern %s%d\n"	*(char)
,	O
prefix	*(char)
,	O
pattern_number	int
)	O
;	O
write_selected_lines	(*(char),char)->(void)
(	O
text	*(char)
,	O
'#'	O
)	O
;	O
printf	(*(char))->(int)
(	O
"\n"	*(char)
)	O
;	O
write_diagram	(int,int,int,int,int,array(array(char)))->(void)
(	O
movei	int
,	O
movej	int
,	O
color	int
,	O
marki	int
,	O
markj	int
,	O
NULL	O
)	O
;	O
printf	(*(char))->(int)
(	O
"\n"	*(char)
)	O
;	O
if	O
(	O
movei	int
==	O
movej	int
&&	O
marki	int
==	O
markj	int
&&	O
board_is_symmetric	(int,array(array(char)))->(int)
(	O
marki	int
,	O
labels	array(array(char))
)	O
)	O
symmetry	char
=	O
'/'	O
;	O
write_colon_line	(int,char,*(char))->(void)
(	O
move_type	int
,	O
symmetry	char
,	O
text	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"\n"	*(char)
)	O
;	O
if	O
(	O
labels	array(array(char))
||	O
selected_line_exists	(*(char),char)->(int)
(	O
text	*(char)
,	O
';'	O
)	O
||	O
selected_line_exists	(*(char),char)->(int)
(	O
text	*(char)
,	O
'>'	O
)	O
)	O
{	O
write_diagram	(int,int,int,int,int,array(array(char)))->(void)
(	O
movei	int
,	O
movej	int
,	O
color	int
,	O
marki	int
,	O
markj	int
,	O
labels	array(array(char))
)	O
;	O
printf	(*(char))->(int)
(	O
"\n"	*(char)
)	O
;	O
write_selected_lines	(*(char),char)->(void)
(	O
text	*(char)
,	O
';'	O
)	O
;	O
write_selected_lines	(*(char),char)->(void)
(	O
text	*(char)
,	O
'>'	O
)	O
;	O
printf	(*(char))->(int)
(	O
"\n"	*(char)
)	O
;	O
}	O
printf	(*(char))->(int)
(	O
"\n"	*(char)
)	O
;	O
if	O
(	O
multiple_marks	int
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"Warning: Multiple square marks in pattern %s%d\n"	*(char)
,	O
prefix	*(char)
,	O
pattern_number	int
)	O
;	O
if	O
(	O
is_suicide	(int,int)->(int)
(	O
POS	O
(	O
movei	int
,	O
movej	int
)	O
,	O
color	int
)	O
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"Error: Illegal move in pattern %s%d\n"	*(char)
,	O
prefix	*(char)
,	O
pattern_number	int
)	O
;	O
exit	(int)->(void)
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
}	O
static	O
void	O
analyze_node	(*(struct(*(struct(*`,short,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))),*(char))->(void)
(	O
SGFNode	struct(*(struct(*(struct(*`,short,*`)),short,*(char))),*(struct(*(struct(*`,short,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))),*(struct(*(struct(*`,short,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))),*(struct(*(struct(*`,short,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))))
*	O
node	*(struct(*(struct(*(struct`),short,*(char))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`)))))
,	O
const	O
char	O
*	O
prefix	*(char)
)	O
{	O
SGFProperty	struct(*(struct(*(struct(*`,short,*`)),short,*(char))),short,*(char))
*	O
prop	*(struct(*(struct(*(struct`),short,*(char))),short,*(char)))
;	O
int	O
i	int
,	O
j	int
;	O
char	O
labels	array(array(char))
[	O
MAX_BOARD	int
]	O
[	O
MAX_BOARD	int
]	O
;	O
int	O
label_found	int
=	O
0	int
;	O
int	O
movei	int
=	O
-	O
1	int
;	O
int	O
movej	int
=	O
-	O
1	int
;	O
int	O
color	int
=	O
EMPTY	int
;	O
int	O
marki	int
=	O
-	O
1	int
;	O
int	O
markj	int
=	O
-	O
1	int
;	O
int	O
multiple_marks	int
=	O
0	int
;	O
char	O
*	O
comment	*(char)
=	O
NULL	O
;	O
memset	(*(void),int,long)->(*(void))
(	O
labels	array(array(char))
,	O
0	int
,	O
MAX_BOARD	int
*	O
MAX_BOARD	int
)	O
;	O
for	O
(	O
prop	*(struct(*(struct(*(struct`),short,*(char))),short,*(char)))
=	O
node	*(struct(*(struct(*(struct`),short,*(char))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`)))))
->	O
props	*(struct(*(struct(*(struct`),short,*(char))),short,*(char)))
;	O
prop	*(struct(*(struct(*(struct`),short,*(char))),short,*(char)))
;	O
prop	*(struct(*(struct(*(struct`),short,*(char))),short,*(char)))
=	O
prop	*(struct(*(struct(*(struct`),short,*(char))),short,*(char)))
->	O
next	*(struct(*(struct(*(struct`),short,*(char))),short,*(char)))
)	O
{	O
switch	O
(	O
prop	*(struct(*(struct(*(struct`),short,*(char))),short,*(char)))
->	O
name	short
)	O
{	O
case	O
SGFSQ	int
:	O
case	O
SGFMA	int
:	O
if	O
(	O
marki	int
!=	O
-	O
1	int
)	O
multiple_marks	int
=	O
1	int
;	O
else	O
{	O
get_moveXY	(*(struct(*(struct(*`,short,*`)),short,*(char))),*(int),*(int),int)->(int)
(	O
prop	*(struct(*(struct(*(struct`),short,*(char))),short,*(char)))
,	O
&	O
marki	int
,	O
&	O
markj	int
,	O
boardsize	int
)	O
;	O
markj	int
=	O
boardsize	int
-	O
1	int
-	O
markj	int
;	O
}	O
break	O
;	O
case	O
SGFW	int
:	O
color	int
=	O
WHITE	int
;	O
get_moveXY	(*(struct(*(struct(*`,short,*`)),short,*(char))),*(int),*(int),int)->(int)
(	O
prop	*(struct(*(struct(*(struct`),short,*(char))),short,*(char)))
,	O
&	O
movei	int
,	O
&	O
movej	int
,	O
boardsize	int
)	O
;	O
movej	int
=	O
boardsize	int
-	O
1	int
-	O
movej	int
;	O
break	O
;	O
case	O
SGFB	int
:	O
color	int
=	O
BLACK	int
;	O
get_moveXY	(*(struct(*(struct(*`,short,*`)),short,*(char))),*(int),*(int),int)->(int)
(	O
prop	*(struct(*(struct(*(struct`),short,*(char))),short,*(char)))
,	O
&	O
movei	int
,	O
&	O
movej	int
,	O
boardsize	int
)	O
;	O
movej	int
=	O
boardsize	int
-	O
1	int
-	O
movej	int
;	O
break	O
;	O
case	O
SGFLB	int
:	O
get_moveXY	(*(struct(*(struct(*`,short,*`)),short,*(char))),*(int),*(int),int)->(int)
(	O
prop	*(struct(*(struct(*(struct`),short,*(char))),short,*(char)))
,	O
&	O
i	int
,	O
&	O
j	int
,	O
boardsize	int
)	O
;	O
j	int
=	O
boardsize	int
-	O
1	int
-	O
j	int
;	O
gg_assert	O
(	O
prop	*(struct(*(struct(*(struct`),short,*(char))),short,*(char)))
->	O
value	*(char)
[	O
2	int
]	O
==	O
':'	O
)	O
;	O
if	O
(	O
ON_BOARD2	O
(	O
i	int
,	O
j	int
)	O
)	O
{	O
labels	array(array(char))
[	O
i	int
]	O
[	O
j	int
]	O
=	O
prop	*(struct(*(struct(*(struct`),short,*(char))),short,*(char)))
->	O
value	*(char)
[	O
3	int
]	O
;	O
label_found	int
=	O
1	int
;	O
}	O
break	O
;	O
case	O
SGFC	int
:	O
comment	*(char)
=	O
prop	*(struct(*(struct(*(struct`),short,*(char))),short,*(char)))
->	O
value	*(char)
;	O
break	O
;	O
}	O
}	O
if	O
(	O
SAFE_ON_BOARD	O
(	O
movei	int
,	O
movej	int
)	O
&&	O
ON_BOARD2	O
(	O
marki	int
,	O
markj	int
)	O
)	O
make_pattern	(int,int,int,int,int,int,array(array(char)),*(char),*(char))->(void)
(	O
movei	int
,	O
movej	int
,	O
color	int
,	O
marki	int
,	O
markj	int
,	O
multiple_marks	int
,	O
(	O
label_found	int
?	O
labels	array(array(char))
:	O
NULL	O
)	O
,	O
comment	*(char)
,	O
prefix	*(char)
)	O
;	O
if	O
(	O
node	*(struct(*(struct(*(struct`),short,*(char))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`)))))
->	O
child	*(struct(*(struct(*(struct`),short,*(char))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`)))))
)	O
{	O
if	O
(	O
SAFE_ON_BOARD	O
(	O
movei	int
,	O
movej	int
)	O
)	O
tryko	(int,int,*(char))->(int)
(	O
POS	O
(	O
movei	int
,	O
movej	int
)	O
,	O
color	int
,	O
NULL	O
)	O
;	O
analyze_node	(*(struct(*(struct(*`,short,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))),*(char))->(void)
(	O
node	*(struct(*(struct(*(struct`),short,*(char))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`)))))
->	O
child	*(struct(*(struct(*(struct`),short,*(char))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`)))))
,	O
prefix	*(char)
)	O
;	O
if	O
(	O
SAFE_ON_BOARD	O
(	O
movei	int
,	O
movej	int
)	O
)	O
popgo	()->(void)
(	O
)	O
;	O
}	O
if	O
(	O
node	*(struct(*(struct(*(struct`),short,*(char))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`)))))
->	O
next	*(struct(*(struct(*(struct`),short,*(char))),short,*(char)))
)	O
analyze_node	(*(struct(*(struct(*`,short,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))),*(char))->(void)
(	O
node	*(struct(*(struct(*(struct`),short,*(char))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`)))))
->	O
next	*(struct(*(struct(*(struct`),short,*(char))),short,*(char)))
,	O
prefix	*(char)
)	O
;	O
}	O
int	O
main	(int,array(*(char)))->(int)
(	O
int	O
argc	int
,	O
char	O
*	O
argv	array(*(char))
[	O
]	O
)	O
{	O
const	O
char	O
*	O
filename	*(char)
;	O
const	O
char	O
*	O
prefix	*(char)
;	O
SGFNode	struct(*(struct(*(struct(*`,short,*`)),short,*(char))),*(struct(*(struct(*`,short,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))),*(struct(*(struct(*`,short,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))),*(struct(*(struct(*`,short,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))))
*	O
sgf	*(struct(*(struct(*(struct`),short,*(char))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`)))))
;	O
if	O
(	O
argc	int
!=	O
3	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
USAGE	*(char)
)	O
;	O
exit	(int)->(void)
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
prefix	*(char)
=	O
argv	array(*(char))
[	O
1	int
]	O
;	O
filename	*(char)
=	O
argv	array(*(char))
[	O
2	int
]	O
;	O
sgf	*(struct(*(struct(*(struct`),short,*(char))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`)))))
=	O
readsgffile	(*(char))->(*(struct(*(struct(*`,short,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))))
(	O
filename	*(char)
)	O
;	O
if	O
(	O
!	O
sgf	*(struct(*(struct(*(struct`),short,*(char))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`)))))
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s: Couldn't open sgf file %s.\n"	*(char)
,	O
argv	array(*(char))
[	O
0	int
]	O
,	O
filename	*(char)
)	O
;	O
exit	(int)->(void)
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
printf	(*(char))->(int)
(	O
PREAMBLE	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"attribute_map general\n\n"	*(char)
)	O
;	O
board_size	int
=	O
MAX_BOARD	int
;	O
clear_board	()->(void)
(	O
)	O
;	O
if	O
(	O
!	O
sgfGetIntProperty	(*(struct(*(struct(*`,short,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))),*(char),*(int))->(int)
(	O
sgf	*(struct(*(struct(*(struct`),short,*(char))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`)))))
,	O
"SZ"	*(char)
,	O
&	O
boardsize	int
)	O
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"joseki: error: can't determine file board size\n"	*(char)
)	O
;	O
return	O
1	int
;	O
}	O
analyze_node	(*(struct(*(struct(*`,short,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))),*(char))->(void)
(	O
sgf	*(struct(*(struct(*(struct`),short,*(char))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`)))))
,	O
prefix	*(char)
)	O
;	O
return	O
0	int
;	O
}	O
