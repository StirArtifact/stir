static	O
inline	O
unsigned	O
char	O
to_uchar	(char)->(char)
(	O
char	O
ch	char
)	O
{	O
return	O
ch	char
;	O
}	O
size_t	long
rw_base_size	long
=	O
0	int
;	O
char	O
*	O
rw_buffer	*(char)
=	O
NULL	O
;	O
static	O
bool	bool
looks_like_c_code	(*(char))->(bool)
(	O
char	O
const	O
*	O
buf	array(char)
)	O
{	O
static	O
char	O
const	O
*	O
const	O
directives	array(*(char))
[	O
]	O
=	O
{	O
"include"	*(char)
,	O
"define"	*(char)
,	O
"ifdef"	*(char)
,	O
"ifndef"	*(char)
,	O
"if"	*(char)
,	O
"pragma"	*(char)
,	O
"undef"	*(char)
,	O
"elif"	*(char)
,	O
"error"	*(char)
,	O
"line"	*(char)
,	O
NULL	O
}	O
;	O
while	O
(	O
isspace	(int)->(int)
(	O
to_uchar	(char)->(char)
(	O
*	O
buf	array(char)
)	O
)	O
)	O
buf	array(char)
++	O
;	O
switch	O
(	O
*	O
(	O
buf	array(char)
++	O
)	O
)	O
{	O
case	O
'#'	O
:	O
{	O
int	O
ix	int
=	O
0	int
;	O
while	O
(	O
isspace	(int)->(int)
(	O
(	O
int	O
)	O
*	O
buf	array(char)
)	O
)	O
buf	array(char)
++	O
;	O
for	O
(	O
;	O
;	O
)	O
{	O
char	O
const	O
*	O
dir	*(char)
=	O
directives	array(*(char))
[	O
ix	int
++	O
]	O
;	O
size_t	long
ln	long
;	O
if	O
(	O
dir	*(char)
==	O
NULL	O
)	O
return	O
false	int
;	O
ln	long
=	O
strlen	(*(char))->(long)
(	O
dir	*(char)
)	O
;	O
if	O
(	O
(	O
strncmp	(*(char),*(char),long)->(int)
(	O
buf	array(char)
,	O
dir	*(char)
,	O
ln	long
)	O
==	O
0	int
)	O
&&	O
isspace	(int)->(int)
(	O
(	O
int	O
)	O
buf	array(char)
[	O
ln	long
]	O
)	O
)	O
return	O
true	int
;	O
}	O
}	O
case	O
'/'	O
:	O
return	O
(	O
(	O
*	O
buf	array(char)
==	O
'*'	O
)	O
||	O
(	O
*	O
buf	array(char)
==	O
'/'	O
)	O
)	O
;	O
default	O
:	O
return	O
false	int
;	O
}	O
}	O
static	O
bool	bool
looks_like_shell_code	(*(char))->(bool)
(	O
char	O
const	O
*	O
buf	array(char)
)	O
{	O
while	O
(	O
isspace	(int)->(int)
(	O
(	O
int	O
)	O
*	O
buf	array(char)
)	O
)	O
buf	array(char)
++	O
;	O
switch	O
(	O
*	O
buf	array(char)
)	O
{	O
case	O
'#'	O
:	O
case	O
':'	O
:	O
return	O
true	int
;	O
default	O
:	O
if	O
(	O
islower	(int)->(int)
(	O
(	O
int	O
)	O
*	O
buf	array(char)
)	O
)	O
break	O
;	O
return	O
false	int
;	O
}	O
{	O
static	O
char	O
const	O
*	O
const	O
cmn_cmds	array(*(char))
[	O
]	O
=	O
{	O
"echo"	*(char)
,	O
"sed"	*(char)
,	O
"cat"	*(char)
,	O
"if"	*(char)
,	O
NULL	O
}	O
;	O
int	O
ix	int
=	O
0	int
;	O
for	O
(	O
;	O
;	O
)	O
{	O
char	O
const	O
*	O
cmd	*(char)
=	O
cmn_cmds	array(*(char))
[	O
ix	int
++	O
]	O
;	O
size_t	long
ln	long
;	O
if	O
(	O
cmd	*(char)
==	O
NULL	O
)	O
return	O
false	int
;	O
ln	long
=	O
strlen	(*(char))->(long)
(	O
cmd	*(char)
)	O
;	O
if	O
(	O
(	O
strncmp	(*(char),*(char),long)->(int)
(	O
buf	array(char)
,	O
cmd	*(char)
,	O
ln	long
)	O
==	O
0	int
)	O
&&	O
isspace	(int)->(int)
(	O
(	O
int	O
)	O
buf	array(char)
[	O
ln	long
]	O
)	O
)	O
return	O
true	int
;	O
}	O
}	O
}	O
static	O
bool	bool
this_is_cut_line	(*(char))->(bool)
(	O
char	O
const	O
*	O
buf	array(char)
)	O
{	O
static	O
char	O
const	O
*	O
const	O
kwds	array(*(char))
[	O
]	O
=	O
{	O
"cut"	*(char)
,	O
"CUT"	*(char)
,	O
"tear"	*(char)
,	O
"TEAR"	*(char)
}	O
;	O
static	O
char	O
const	O
*	O
const	O
here_here	array(*(char))
[	O
]	O
=	O
{	O
"here"	*(char)
,	O
"HERE"	*(char)
}	O
;	O
int	O
ix	int
=	O
0	int
;	O
for	O
(	O
;	O
;	O
)	O
{	O
char	O
const	O
*	O
kw	*(char)
=	O
kwds	array(*(char))
[	O
ix	int
]	O
;	O
char	O
const	O
*	O
fnd	*(char)
=	O
strstr	(*(char),*(char))->(*(char))
(	O
buf	array(char)
,	O
kw	*(char)
)	O
;	O
if	O
(	O
fnd	*(char)
!=	O
NULL	O
)	O
{	O
buf	array(char)
=	O
fnd	*(char)
+	O
strlen	(*(char))->(long)
(	O
kw	*(char)
)	O
;	O
break	O
;	O
}	O
if	O
(	O
++	O
ix	int
>=	O
4	int
)	O
return	O
false	int
;	O
}	O
{	O
char	O
const	O
*	O
fnd	*(char)
=	O
strstr	(*(char),*(char))->(*(char))
(	O
buf	array(char)
,	O
kwds	array(*(char))
[	O
ix	int
]	O
)	O
;	O
if	O
(	O
fnd	*(char)
!=	O
NULL	O
)	O
return	O
true	int
;	O
fnd	*(char)
=	O
strstr	(*(char),*(char))->(*(char))
(	O
buf	array(char)
,	O
here_here	array(*(char))
[	O
ix	int
&	O
1	int
]	O
)	O
;	O
return	O
(	O
fnd	*(char)
!=	O
NULL	O
)	O
;	O
}	O
}	O
static	O
bool	bool
next_line_is_valid	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(bool)
(	O
char	O
const	O
*	O
name	*(char)
,	O
FILE	struct
*	O
file	*(char)
)	O
{	O
off_t	long
position	long
;	O
for	O
(	O
;	O
;	O
)	O
{	O
char	O
*	O
buf	array(char)
;	O
position	long
=	O
ftello	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(long)
(	O
file	*(char)
)	O
;	O
buf	array(char)
=	O
fgets	(*(char),int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(*(char))
(	O
rw_buffer	*(char)
,	O
rw_base_size	long
,	O
file	*(char)
)	O
;	O
if	O
(	O
buf	array(char)
==	O
NULL	O
)	O
{	O
error	(int,int,*(char))->(void)
(	O
0	int
,	O
0	int
,	O
_	O
(	O
"Found no shell commands after cut line in %s"	*(char)
)	O
,	O
name	*(char)
)	O
;	O
return	O
false	int
;	O
}	O
while	O
(	O
isspace	(int)->(int)
(	O
(	O
int	O
)	O
*	O
buf	array(char)
)	O
)	O
buf	array(char)
++	O
;	O
if	O
(	O
*	O
buf	array(char)
!=	O
'\0'	O
)	O
break	O
;	O
}	O
if	O
(	O
islower	(int)->(int)
(	O
(	O
int	O
)	O
*	O
rw_buffer	*(char)
)	O
||	O
(	O
*	O
rw_buffer	*(char)
==	O
'#'	O
)	O
||	O
(	O
*	O
rw_buffer	*(char)
==	O
':'	O
)	O
)	O
{	O
fseeko	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),long,int)->(int)
(	O
file	*(char)
,	O
position	long
,	O
SEEK_SET	int
)	O
;	O
return	O
true	int
;	O
}	O
error	(int,int,*(char))->(void)
(	O
0	int
,	O
0	int
,	O
_	O
(	O
"%s is probably not a shell archive"	*(char)
)	O
,	O
name	*(char)
)	O
;	O
error	(int,int,*(char))->(void)
(	O
0	int
,	O
0	int
,	O
_	O
(	O
"The 'cut line' was followed by: %s"	*(char)
)	O
,	O
rw_buffer	*(char)
)	O
;	O
return	O
false	int
;	O
}	O
static	O
bool	bool
find_archive	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),long)->(bool)
(	O
char	O
const	O
*	O
name	*(char)
,	O
FILE	struct
*	O
file	*(char)
,	O
off_t	long
start	long
)	O
{	O
fseeko	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),long,int)->(int)
(	O
file	*(char)
,	O
start	long
,	O
SEEK_SET	int
)	O
;	O
while	O
(	O
1	int
)	O
{	O
off_t	long
position	long
=	O
ftello	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(long)
(	O
file	*(char)
)	O
;	O
if	O
(	O
!	O
fgets	(*(char),int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(*(char))
(	O
rw_buffer	*(char)
,	O
BUFSIZ	int
,	O
file	*(char)
)	O
)	O
{	O
if	O
(	O
!	O
start	long
)	O
error	(int,int,*(char))->(void)
(	O
0	int
,	O
0	int
,	O
_	O
(	O
"Found no shell commands in %s"	*(char)
)	O
,	O
name	*(char)
)	O
;	O
return	O
false	int
;	O
}	O
if	O
(	O
looks_like_c_code	(*(char))->(bool)
(	O
rw_buffer	*(char)
)	O
)	O
{	O
error	(int,int,*(char))->(void)
(	O
0	int
,	O
0	int
,	O
_	O
(	O
"%s looks like raw C code, not a shell archive"	*(char)
)	O
,	O
name	*(char)
)	O
;	O
return	O
false	int
;	O
}	O
if	O
(	O
looks_like_shell_code	(*(char))->(bool)
(	O
rw_buffer	*(char)
)	O
)	O
{	O
fseeko	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),long,int)->(int)
(	O
file	*(char)
,	O
position	long
,	O
SEEK_SET	int
)	O
;	O
return	O
true	int
;	O
}	O
if	O
(	O
this_is_cut_line	(*(char))->(bool)
(	O
rw_buffer	*(char)
)	O
)	O
return	O
next_line_is_valid	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(bool)
(	O
name	*(char)
,	O
file	*(char)
)	O
;	O
}	O
}	O
static	O
char	O
const	O
*	O
get_env_tmpdir	()->(*(char))
(	O
void	O
)	O
{	O
char	O
const	O
*	O
res	*(char)
=	O
getenv	(*(char))->(*(char))
(	O
"TMPDIR"	*(char)
)	O
;	O
return	O
res	*(char)
?	O
res	*(char)
:	O
"/tmp"	*(char)
;	O
}	O
static	O
FILE	struct
*	O
load_file	(*(*(char)),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))
(	O
char	O
const	O
*	O
*	O
tmp_fname	*(*(char))
,	O
FILE	struct
*	O
infp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
{	O
static	O
char	O
const	O
z_tmpfile	array(char)
[	O
]	O
=	O
"unsh.XXXXXX"	*(char)
;	O
char	O
*	O
pz_fname	*(char)
;	O
FILE	struct
*	O
outfp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
;	O
{	O
size_t	long
name_size	long
;	O
char	O
const	O
*	O
pz_tmp	*(char)
=	O
get_env_tmpdir	()->(*(char))
(	O
)	O
;	O
name_size	long
=	O
strlen	(*(char))->(long)
(	O
pz_tmp	*(char)
)	O
+	O
sizeof	O
(	O
z_tmpfile	array(char)
)	O
+	O
1	int
;	O
*	O
tmp_fname	*(*(char))
=	O
pz_fname	*(char)
=	O
malloc	(long)->(*(void))
(	O
name_size	long
)	O
;	O
if	O
(	O
pz_fname	*(char)
==	O
NULL	O
)	O
fserr	(int,*(char),*(char))->(void)
(	O
UNSHAR_EXIT_NOMEM	int
,	O
"malloc"	*(char)
,	O
_	O
(	O
"file name buffer"	*(char)
)	O
)	O
;	O
sprintf	(*(char),*(char))->(int)
(	O
pz_fname	*(char)
,	O
"%s/%s"	*(char)
,	O
pz_tmp	*(char)
,	O
z_tmpfile	array(char)
)	O
;	O
}	O
{	O
int	O
fd	array(int)
=	O
mkstemp	(*(char))->(int)
(	O
pz_fname	*(char)
)	O
;	O
if	O
(	O
fd	array(int)
<	O
0	int
)	O
fserr	(int,*(char),*(char))->(void)
(	O
UNSHAR_EXIT_CANNOT_CREATE	int
,	O
"mkstemp"	*(char)
,	O
z_tmpfile	array(char)
)	O
;	O
outfp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
=	O
fdopen	(int,*(char))->(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))
(	O
fd	array(int)
,	O
"wb+"	*(char)
)	O
;	O
}	O
if	O
(	O
outfp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
==	O
NULL	O
)	O
fserr	(int,*(char),*(char))->(void)
(	O
UNSHAR_EXIT_CANNOT_CREATE	int
,	O
"fdopen"	*(char)
,	O
pz_fname	*(char)
)	O
;	O
for	O
(	O
;	O
;	O
)	O
{	O
size_t	long
size_read	long
=	O
fread	(*(void),long,long,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(long)
(	O
rw_buffer	*(char)
,	O
1	int
,	O
rw_base_size	long
,	O
infp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
if	O
(	O
size_read	long
==	O
0	int
)	O
break	O
;	O
fwrite	(*(void),long,long,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(long)
(	O
rw_buffer	*(char)
,	O
size_read	long
,	O
1	int
,	O
outfp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
}	O
rewind	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(void)
(	O
outfp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
return	O
outfp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
;	O
}	O
int	O
unshar_file	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
const	O
char	O
*	O
name	*(char)
,	O
FILE	struct
*	O
file	*(char)
)	O
{	O
char	O
const	O
*	O
tmp_fname	*(*(char))
=	O
NULL	O
;	O
off_t	long
curr_pos	long
;	O
curr_pos	long
=	O
ftello	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(long)
(	O
file	*(char)
)	O
;	O
if	O
(	O
curr_pos	long
<	O
0	int
)	O
{	O
file	*(char)
=	O
load_file	(*(*(char)),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))
(	O
&	O
tmp_fname	*(*(char))
,	O
file	*(char)
)	O
;	O
curr_pos	long
=	O
ftello	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(long)
(	O
file	*(char)
)	O
;	O
if	O
(	O
curr_pos	long
<	O
0	int
)	O
fserr	(int,*(char),*(char))->(void)
(	O
UNSHAR_EXIT_CANNOT_CREATE	int
,	O
"ftell"	*(char)
,	O
tmp_fname	*(*(char))
)	O
;	O
}	O
while	O
(	O
find_archive	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),long)->(bool)
(	O
name	*(char)
,	O
file	*(char)
,	O
curr_pos	long
)	O
)	O
{	O
char	O
const	O
*	O
cmd	*(char)
=	O
HAVE_OPT	O
(	O
OVERWRITE	O
)	O
?	O
"sh -s - -c"	*(char)
:	O
"sh"	*(char)
;	O
FILE	struct
*	O
shell_fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
=	O
popen	(*(char),*(char))->(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))
(	O
cmd	*(char)
,	O
"w"	*(char)
)	O
;	O
if	O
(	O
shell_fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
==	O
NULL	O
)	O
fserr	(int,*(char),*(char))->(void)
(	O
UNSHAR_EXIT_POPEN_PROBLEM	int
,	O
"popen"	*(char)
,	O
cmd	*(char)
)	O
;	O
if	O
(	O
HAVE_OPT	O
(	O
DIRECTORY	O
)	O
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
shell_fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"cd %s >/dev/null || exit 1\n"	*(char)
,	O
OPT_ARG	O
(	O
DIRECTORY	O
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
"%s:\n"	*(char)
,	O
name	*(char)
)	O
;	O
if	O
(	O
!	O
HAVE_OPT	O
(	O
SPLIT_AT	O
)	O
)	O
{	O
for	O
(	O
;	O
;	O
)	O
{	O
size_t	long
len	long
=	O
fread	(*(void),long,long,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(long)
(	O
rw_buffer	*(char)
,	O
1	int
,	O
rw_base_size	long
,	O
file	*(char)
)	O
;	O
if	O
(	O
len	long
==	O
0	int
)	O
break	O
;	O
fwrite	(*(void),long,long,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(long)
(	O
rw_buffer	*(char)
,	O
1	int
,	O
len	long
,	O
shell_fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
}	O
pclose	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
shell_fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
break	O
;	O
}	O
else	O
{	O
char	O
*	O
text_in	*(char)
;	O
while	O
(	O
text_in	*(char)
=	O
fgets	(*(char),int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(*(char))
(	O
rw_buffer	*(char)
,	O
rw_base_size	long
,	O
file	*(char)
)	O
,	O
text_in	*(char)
!=	O
NULL	O
)	O
{	O
fputs	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
rw_buffer	*(char)
,	O
shell_fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
if	O
(	O
!	O
strncmp	(*(char),*(char),long)->(int)
(	O
OPT_ARG	O
(	O
SPLIT_AT	O
)	O
,	O
rw_buffer	*(char)
,	O
separator_str_len	long
)	O
)	O
break	O
;	O
}	O
pclose	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
shell_fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
if	O
(	O
text_in	*(char)
==	O
NULL	O
)	O
break	O
;	O
curr_pos	long
=	O
ftello	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(long)
(	O
file	*(char)
)	O
;	O
}	O
}	O
if	O
(	O
tmp_fname	*(*(char))
!=	O
NULL	O
)	O
{	O
unlink	(*(char))->(int)
(	O
tmp_fname	*(*(char))
)	O
;	O
free	(*(void))->(void)
(	O
(	O
void	O
*	O
)	O
tmp_fname	*(*(char))
)	O
;	O
}	O
return	O
UNSHAR_EXIT_SUCCESS	int
;	O
}	O
void	O
init_unshar	()->(void)
(	O
void	O
)	O
{	O
setlocale	(int,*(char))->(*(char))
(	O
LC_ALL	O
,	O
""	*(char)
)	O
;	O
bindtextdomain	(*(char),*(char))->(*(char))
(	O
PACKAGE	*(char)
,	O
LOCALEDIR	O
)	O
;	O
textdomain	(*(char))->(*(char))
(	O
PACKAGE	*(char)
)	O
;	O
rw_base_size	long
=	O
GET_PAGE_SIZE	O
;	O
rw_buffer	*(char)
=	O
malloc	(long)->(*(void))
(	O
rw_base_size	long
)	O
;	O
if	O
(	O
rw_buffer	*(char)
==	O
NULL	O
)	O
fserr	(int,*(char),*(char))->(void)
(	O
UNSHAR_EXIT_NOMEM	int
,	O
"malloc"	*(char)
,	O
_	O
(	O
"read/write buffer"	*(char)
)	O
)	O
;	O
}	O
