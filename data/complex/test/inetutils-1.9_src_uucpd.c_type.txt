void	O
dologin	(*(struct(*(char),*(char),int,int,*(char),*(char),*(char))),*(struct(short,short,struct(int),array(char))))->(void)
(	O
struct	O
passwd	struct(*(char),*(char),int,int,*(char),*(char),*(char))
*	O
pw	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
,	O
struct	O
sockaddr_in	struct(short,short,struct(int),array(char))
*	O
sin	*(struct(short,short,struct(int),array(char)))
)	O
;	O
struct	O
sockaddr_in	struct(short,short,struct(int),array(char))
hisctladdr	struct(short,short,struct(int),array(char))
;	O
int	O
hisaddrlen	int
=	O
sizeof	O
hisctladdr	struct(short,short,struct(int),array(char))
;	O
struct	O
sockaddr_in	struct(short,short,struct(int),array(char))
myctladdr	struct(short,short,struct(int),array(char))
;	O
int	O
mypid	int
;	O
char	O
Username	array(char)
[	O
64	int
]	O
;	O
char	O
*	O
nenv	array(*(char))
[	O
]	O
=	O
{	O
Username	array(char)
,	O
NULL	O
,	O
}	O
;	O
extern	O
char	O
*	O
*	O
environ	*(*(char))
;	O
static	O
struct	O
argp	struct(*(struct(*(char),int,*(char),int,*(char),int)),*((int,*(char),*(struct))->(int)),*(char),*(char),*(struct),*((int,*(char),*(void))->(*(char))),*(char))
argp	struct(*(struct(*(char),int,*(char),int,*(char),int)),*((int,*(char),*(struct))->(int)),*(char),*(char),*(struct),*((int,*(char),*(void))->(*(char))),*(char))
=	O
{	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
"TCP/IP server for uucico"	*(char)
}	O
;	O
int	O
main	(int,*(*(char)))->(int)
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	*(*(char))
)	O
{	O
register	O
int	O
s	int
;	O
struct	O
servent	struct(*(char),*(*(char)),int,*(char))
*	O
sp	*(struct(*(char),*(*(char)),int,*(char)))
;	O
void	O
dologout	()->(void)
(	O
void	O
)	O
;	O
set_program_name	(*(char))->(void)
(	O
argv	*(*(char))
[	O
0	int
]	O
)	O
;	O
iu_argp_init	O
(	O
"uucpd"	*(char)
,	O
default_program_authors	array(*(char))
)	O
;	O
argp_parse	(*(struct(*(struct(*`,int,*`,int,*`,int)),*((int,*`,*`)->(int)),*(char),*(char),*(struct(*`,int,*`,int)),*((int,*`,*`)->(*`)),*(char))),int,*(*(char)),int,*(int),*(void))->(int)
(	O
&	O
argp	struct(*(struct(*(char),int,*(char),int,*(char),int)),*((int,*(char),*(struct))->(int)),*(char),*(char),*(struct),*((int,*(char),*(void))->(*(char))),*(char))
,	O
argc	int
,	O
argv	*(*(char))
,	O
0	int
,	O
NULL	O
,	O
NULL	O
)	O
;	O
environ	*(*(char))
=	O
nenv	array(*(char))
;	O
sp	*(struct(*(char),*(*(char)),int,*(char)))
=	O
getservbyname	(*(char),*(char))->(*(struct(*(char),*(*(char)),int,*(char))))
(	O
"uucp"	*(char)
,	O
"tcp"	*(char)
)	O
;	O
if	O
(	O
sp	*(struct(*(char),*(*(char)),int,*(char)))
==	O
NULL	O
)	O
{	O
perror	(*(char))->(void)
(	O
"uucpd: getservbyname"	*(char)
)	O
;	O
exit	(int)->(void)
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
if	O
(	O
fork	()->(int)
(	O
)	O
)	O
exit	(int)->(void)
(	O
EXIT_SUCCESS	int
)	O
;	O
if	O
(	O
(	O
s	int
=	O
open	(*(char),int)->(int)
(	O
PATH_TTY	O
,	O
O_RDWR	int
)	O
)	O
>=	O
0	int
)	O
{	O
ioctl	(int,long)->(int)
(	O
s	int
,	O
TIOCNOTTY	int
,	O
(	O
char	O
*	O
)	O
0	int
)	O
;	O
close	(int)->(int)
(	O
s	int
)	O
;	O
}	O
memset	(*(void),int,long)->(*(void))
(	O
&	O
myctladdr	struct(short,short,struct(int),array(char))
,	O
0	int
,	O
sizeof	O
(	O
myctladdr	struct(short,short,struct(int),array(char))
)	O
)	O
;	O
myctladdr	struct(short,short,struct(int),array(char))
.	O
sin_family	short
=	O
AF_INET	O
;	O
myctladdr	struct(short,short,struct(int),array(char))
.	O
sin_port	short
=	O
sp	*(struct(*(char),*(*(char)),int,*(char)))
->	O
s_port	int
;	O
}	O
static	O
int	O
readline	(*(char),int)->(int)
(	O
register	O
char	O
*	O
p	*(char)
,	O
register	O
int	O
n	int
)	O
{	O
char	O
c	char
;	O
while	O
(	O
n	int
--	O
>	O
0	int
)	O
{	O
if	O
(	O
read	(int,*(void),long)->(long)
(	O
0	int
,	O
&	O
c	char
,	O
1	int
)	O
<=	O
0	int
)	O
return	O
(	O
-	O
1	int
)	O
;	O
c	char
&=	O
0177	int
;	O
if	O
(	O
c	char
==	O
'\n'	O
||	O
c	char
==	O
'\r'	O
)	O
{	O
*	O
p	*(char)
=	O
'\0'	O
;	O
return	O
(	O
0	int
)	O
;	O
}	O
*	O
p	*(char)
++	O
=	O
c	char
;	O
}	O
return	O
(	O
-	O
1	int
)	O
;	O
}	O
void	O
doit	(*(struct(short,short,struct(int),array(char))))->(void)
(	O
struct	O
sockaddr_in	struct(short,short,struct(int),array(char))
*	O
sinp	*(struct(short,short,struct(int),array(char)))
)	O
{	O
struct	O
passwd	struct(*(char),*(char),int,int,*(char),*(char),*(char))
*	O
pw	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
,	O
*	O
getpwnam	(*(char))->(*(struct(*(char),*(char),int,int,*(char),*(char),*(char))))
(	O
const	O
char	O
*	O
)	O
;	O
char	O
user	*(char)
[	O
64	int
]	O
,	O
passwd	struct(*(char),*(char),int,int,*(char),*(char),*(char))
[	O
64	int
]	O
;	O
char	O
*	O
xpasswd	*(char)
;	O
alarm	(int)->(int)
(	O
60	int
)	O
;	O
printf	(*(char))->(int)
(	O
"login: "	*(char)
)	O
;	O
fflush	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
if	O
(	O
readline	(*(char),int)->(int)
(	O
user	*(char)
,	O
sizeof	O
user	*(char)
)	O
<	O
0	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"user read\n"	*(char)
)	O
;	O
return	O
;	O
}	O
user	*(char)
[	O
8	int
]	O
=	O
'\0'	O
;	O
pw	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
=	O
getpwnam	(*(char))->(*(struct(*(char),*(char),int,int,*(char),*(char),*(char))))
(	O
user	*(char)
)	O
;	O
if	O
(	O
pw	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
==	O
NULL	O
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"user unknown\n"	*(char)
)	O
;	O
return	O
;	O
}	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
pw	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
->	O
pw_shell	*(char)
,	O
PATH_UUCICO	O
)	O
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"Login incorrect."	*(char)
)	O
;	O
return	O
;	O
}	O
if	O
(	O
pw	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
->	O
pw_passwd	*(char)
&&	O
*	O
pw	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
->	O
pw_passwd	*(char)
!=	O
'\0'	O
)	O
{	O
printf	(*(char))->(int)
(	O
"Password: "	*(char)
)	O
;	O
fflush	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
if	O
(	O
readline	(*(char),int)->(int)
(	O
passwd	struct(*(char),*(char),int,int,*(char),*(char),*(char))
,	O
sizeof	O
passwd	struct(*(char),*(char),int,int,*(char),*(char),*(char))
)	O
<	O
0	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"passwd read\n"	*(char)
)	O
;	O
return	O
;	O
}	O
xpasswd	*(char)
=	O
crypt	(*(char),*(char))->(*(char))
(	O
passwd	struct(*(char),*(char),int,int,*(char),*(char),*(char))
,	O
pw	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
->	O
pw_passwd	*(char)
)	O
;	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
xpasswd	*(char)
,	O
pw	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
->	O
pw_passwd	*(char)
)	O
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"Login incorrect."	*(char)
)	O
;	O
return	O
;	O
}	O
}	O
alarm	(int)->(int)
(	O
0	int
)	O
;	O
sprintf	(*(char),*(char))->(int)
(	O
Username	array(char)
,	O
"USER=%s"	*(char)
,	O
user	*(char)
)	O
;	O
dologin	(*(struct(*(char),*(char),int,int,*(char),*(char),*(char))),*(struct(short,short,struct(int),array(char))))->(void)
(	O
pw	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
,	O
sinp	*(struct(short,short,struct(int),array(char)))
)	O
;	O
setgid	(int)->(int)
(	O
pw	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
->	O
pw_gid	int
)	O
;	O
chdir	(*(char))->(int)
(	O
pw	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
->	O
pw_dir	*(char)
)	O
;	O
setuid	(int)->(int)
(	O
pw	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
->	O
pw_uid	int
)	O
;	O
perror	(*(char))->(void)
(	O
"uucico server: execl"	*(char)
)	O
;	O
}	O
void	O
dologout	()->(void)
(	O
void	O
)	O
{	O
int	O
pid	int
;	O
while	O
(	O
(	O
pid	int
=	O
wait3	(*(int),int,*(struct))->(int)
(	O
0	int
,	O
WNOHANG	int
,	O
0	int
)	O
)	O
>	O
0	int
)	O
{	O
char	O
line	*(char)
[	O
100	int
]	O
;	O
sprintf	(*(char),*(char))->(int)
(	O
line	*(char)
,	O
"uucp%.4d"	*(char)
,	O
pid	int
)	O
;	O
logwtmp	(*(char),*(char),*(char))->(void)
(	O
line	*(char)
,	O
""	*(char)
,	O
""	*(char)
)	O
;	O
}	O
}	O
void	O
dologin	(*(struct(*(char),*(char),int,int,*(char),*(char),*(char))),*(struct(short,short,struct(int),array(char))))->(void)
(	O
struct	O
passwd	struct(*(char),*(char),int,int,*(char),*(char),*(char))
*	O
pw	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
,	O
struct	O
sockaddr_in	struct(short,short,struct(int),array(char))
*	O
sin	*(struct(short,short,struct(int),array(char)))
)	O
{	O
char	O
line	*(char)
[	O
32	int
]	O
;	O
char	O
remotehost	array(char)
[	O
32	int
]	O
;	O
int	O
f	int
;	O
struct	O
hostent	struct(*(char),*(*(char)),int,int,*(*(char)))
*	O
hp	*(struct(*(char),*(*(char)),int,int,*(*(char))))
=	O
gethostbyaddr	(*(void),int,int)->(*(struct(*(char),*(*(char)),int,int,*(*(char)))))
(	O
(	O
char	O
*	O
)	O
&	O
sin	*(struct(short,short,struct(int),array(char)))
->	O
sin_addr	struct(int)
,	O
sizeof	O
(	O
struct	O
in_addr	struct(int)
)	O
,	O
AF_INET	O
)	O
;	O
if	O
(	O
hp	*(struct(*(char),*(*(char)),int,int,*(*(char))))
)	O
{	O
strncpy	(*(char),*(char),long)->(*(char))
(	O
remotehost	array(char)
,	O
hp	*(struct(*(char),*(*(char)),int,int,*(*(char))))
->	O
h_name	*(char)
,	O
sizeof	O
(	O
remotehost	array(char)
)	O
)	O
;	O
endhostent	()->(void)
(	O
)	O
;	O
}	O
else	O
strncpy	(*(char),*(char),long)->(*(char))
(	O
remotehost	array(char)
,	O
inet_ntoa	(struct(int))->(*(char))
(	O
sin	*(struct(short,short,struct(int),array(char)))
->	O
sin_addr	struct(int)
)	O
,	O
sizeof	O
(	O
remotehost	array(char)
)	O
)	O
;	O
sprintf	(*(char),*(char))->(int)
(	O
line	*(char)
,	O
"uucp%.4d"	*(char)
,	O
getpid	()->(int)
(	O
)	O
)	O
;	O
logwtmp	(*(char),*(char),*(char))->(void)
(	O
line	*(char)
,	O
pw	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
->	O
pw_name	*(char)
,	O
remotehost	array(char)
)	O
;	O
f	int
=	O
open	(*(char),int)->(int)
(	O
PATH_LASTLOG	O
,	O
O_RDWR	int
)	O
;	O
if	O
(	O
f	int
>=	O
0	int
)	O
{	O
struct	O
lastlog	struct(int,array(char),array(char))
ll	struct(int,array(char),array(char))
;	O
time_t	long
t	long
;	O
time	struct(long,long)
(	O
&	O
t	long
)	O
;	O
ll	struct(int,array(char),array(char))
.	O
ll_time	int
=	O
t	long
;	O
lseek	(int,long,int)->(long)
(	O
f	int
,	O
(	O
long	O
)	O
pw	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
->	O
pw_uid	int
*	O
sizeof	O
(	O
struct	O
lastlog	struct(int,array(char),array(char))
)	O
,	O
0	int
)	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
line	*(char)
,	O
remotehost	array(char)
)	O
;	O
SCPYN	O
(	O
ll	struct(int,array(char),array(char))
.	O
ll_line	array(char)
,	O
line	*(char)
)	O
;	O
SCPYN	O
(	O
ll	struct(int,array(char),array(char))
.	O
ll_host	array(char)
,	O
remotehost	array(char)
)	O
;	O
write	(int,*(void),long)->(long)
(	O
f	int
,	O
(	O
char	O
*	O
)	O
&	O
ll	struct(int,array(char),array(char))
,	O
sizeof	O
ll	struct(int,array(char),array(char))
)	O
;	O
close	(int)->(int)
(	O
f	int
)	O
;	O
}	O
}	O
