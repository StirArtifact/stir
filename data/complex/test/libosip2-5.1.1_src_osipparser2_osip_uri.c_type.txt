int	O
osip_uri_init	(*(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*`),struct(int,*`),*(char)))))->(int)
(	O
osip_uri_t	struct
*	O
*	O
url	*(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(char))))
)	O
{	O
*	O
url	*(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(char))))
=	O
(	O
osip_uri_t	struct
*	O
)	O
osip_malloc	O
(	O
sizeof	O
(	O
osip_uri_t	struct
)	O
)	O
;	O
if	O
(	O
*	O
url	*(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(char))))
==	O
NULL	O
)	O
return	O
OSIP_NOMEM	O
;	O
(	O
*	O
url	*(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(char))))
)	O
->	O
scheme	*(char)
=	O
NULL	O
;	O
(	O
*	O
url	*(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(char))))
)	O
->	O
username	*(char)
=	O
NULL	O
;	O
(	O
*	O
url	*(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(char))))
)	O
->	O
password	*(char)
=	O
NULL	O
;	O
(	O
*	O
url	*(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(char))))
)	O
->	O
host	*(char)
=	O
NULL	O
;	O
(	O
*	O
url	*(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(char))))
)	O
->	O
port	*(char)
=	O
NULL	O
;	O
osip_list_init	(*(struct(int,*(struct(*`,*`)))))->(int)
(	O
&	O
(	O
*	O
url	*(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(char))))
)	O
->	O
url_params	*(struct(int,*(struct(*(struct`),*(void)))))
)	O
;	O
osip_list_init	(*(struct(int,*(struct(*`,*`)))))->(int)
(	O
&	O
(	O
*	O
url	*(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(char))))
)	O
->	O
url_headers	struct(int,*(struct(*(struct(*`,*`)),*(void))))
)	O
;	O
(	O
*	O
url	*(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(char))))
)	O
->	O
string	*(char)
=	O
NULL	O
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
const	O
char	O
*	O
next_separator	(*(char),int,int)->(*(char))
(	O
const	O
char	O
*	O
ch	*(char)
,	O
int	O
separator_osip_to_find	int
,	O
int	O
before_separator	int
)	O
{	O
const	O
char	O
*	O
ind	*(char)
;	O
const	O
char	O
*	O
tmp	*(char)
;	O
ind	*(char)
=	O
strchr	(*(char),int)->(*(char))
(	O
ch	*(char)
,	O
separator_osip_to_find	int
)	O
;	O
if	O
(	O
ind	*(char)
==	O
NULL	O
)	O
return	O
NULL	O
;	O
tmp	*(char)
=	O
NULL	O
;	O
if	O
(	O
before_separator	int
!=	O
0	int
)	O
tmp	*(char)
=	O
strchr	(*(char),int)->(*(char))
(	O
ch	*(char)
,	O
before_separator	int
)	O
;	O
if	O
(	O
tmp	*(char)
!=	O
NULL	O
)	O
{	O
if	O
(	O
ind	*(char)
<	O
tmp	*(char)
)	O
return	O
ind	*(char)
;	O
}	O
else	O
return	O
ind	*(char)
;	O
return	O
NULL	O
;	O
}	O
int	O
osip_uri_parse	(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(char))),*(char))->(int)
(	O
osip_uri_t	struct
*	O
url	*(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(char))))
,	O
const	O
char	O
*	O
buf	*(char)
)	O
{	O
const	O
char	O
*	O
username	*(char)
;	O
const	O
char	O
*	O
password	*(char)
;	O
const	O
char	O
*	O
host	*(char)
;	O
const	O
char	O
*	O
port	*(char)
;	O
const	O
char	O
*	O
params	*(char)
;	O
const	O
char	O
*	O
headers	*(struct(int,*(struct(*(struct`),*(void)))))
;	O
const	O
char	O
*	O
tmp	*(char)
;	O
int	O
i	int
;	O
if	O
(	O
buf	*(char)
==	O
NULL	O
||	O
buf	*(char)
[	O
0	int
]	O
==	O
'\0'	O
)	O
return	O
OSIP_BADPARAMETER	O
;	O
tmp	*(char)
=	O
strchr	(*(char),int)->(*(char))
(	O
buf	*(char)
,	O
':'	O
)	O
;	O
if	O
(	O
tmp	*(char)
==	O
NULL	O
)	O
return	O
OSIP_SYNTAXERROR	O
;	O
if	O
(	O
tmp	*(char)
-	O
buf	*(char)
<	O
2	int
)	O
return	O
OSIP_SYNTAXERROR	O
;	O
i	int
=	O
0	int
;	O
while	O
(	O
buf	*(char)
+	O
i	int
<	O
tmp	*(char)
)	O
{	O
if	O
(	O
!	O
osip_is_alpha	O
(	O
buf	*(char)
[	O
i	int
]	O
)	O
)	O
return	O
OSIP_SYNTAXERROR	O
;	O
i	int
++	O
;	O
}	O
url	*(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(char))))
->	O
scheme	*(char)
=	O
(	O
char	O
*	O
)	O
osip_malloc	O
(	O
tmp	*(char)
-	O
buf	*(char)
+	O
1	int
)	O
;	O
if	O
(	O
url	*(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(char))))
->	O
scheme	*(char)
==	O
NULL	O
)	O
return	O
OSIP_NOMEM	O
;	O
osip_strncpy	(*(char),*(char),long)->(*(char))
(	O
url	*(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(char))))
->	O
scheme	*(char)
,	O
buf	*(char)
,	O
tmp	*(char)
-	O
buf	*(char)
)	O
;	O
if	O
(	O
strchr	(*(char),int)->(*(char))
(	O
url	*(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(char))))
->	O
scheme	*(char)
,	O
' '	O
)	O
!=	O
NULL	O
)	O
{	O
return	O
OSIP_SYNTAXERROR	O
;	O
}	O
if	O
(	O
strlen	(*(char))->(long)
(	O
url	*(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(char))))
->	O
scheme	*(char)
)	O
<	O
3	int
||	O
(	O
0	int
!=	O
osip_strncasecmp	(*(char),*(char),long)->(int)
(	O
url	*(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(char))))
->	O
scheme	*(char)
,	O
"sip"	*(char)
,	O
3	int
)	O
&&	O
0	int
!=	O
osip_strncasecmp	(*(char),*(char),long)->(int)
(	O
url	*(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(char))))
->	O
scheme	*(char)
,	O
"sips"	*(char)
,	O
4	int
)	O
)	O
)	O
{	O
size_t	long
i	int
=	O
strlen	(*(char))->(long)
(	O
tmp	*(char)
+	O
1	int
)	O
;	O
if	O
(	O
i	int
<	O
2	int
)	O
return	O
OSIP_SYNTAXERROR	O
;	O
url	*(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(char))))
->	O
string	*(char)
=	O
(	O
char	O
*	O
)	O
osip_malloc	O
(	O
i	int
+	O
1	int
)	O
;	O
if	O
(	O
url	*(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(char))))
->	O
string	*(char)
==	O
NULL	O
)	O
return	O
OSIP_NOMEM	O
;	O
osip_strncpy	(*(char),*(char),long)->(*(char))
(	O
url	*(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(char))))
->	O
string	*(char)
,	O
tmp	*(char)
+	O
1	int
,	O
i	int
)	O
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
username	*(char)
=	O
strchr	(*(char),int)->(*(char))
(	O
buf	*(char)
,	O
':'	O
)	O
;	O
if	O
(	O
username	*(char)
==	O
NULL	O
)	O
return	O
OSIP_SYNTAXERROR	O
;	O
host	*(char)
=	O
strchr	(*(char),int)->(*(char))
(	O
buf	*(char)
,	O
'@'	O
)	O
;	O
if	O
(	O
host	*(char)
==	O
NULL	O
)	O
host	*(char)
=	O
username	*(char)
;	O
else	O
if	O
(	O
username	*(char)
[	O
1	int
]	O
==	O
'@'	O
)	O
host	*(char)
=	O
username	*(char)
+	O
1	int
;	O
else	O
{	O
password	*(char)
=	O
next_separator	(*(char),int,int)->(*(char))
(	O
username	*(char)
+	O
1	int
,	O
':'	O
,	O
'@'	O
)	O
;	O
if	O
(	O
password	*(char)
==	O
NULL	O
)	O
password	*(char)
=	O
host	*(char)
;	O
else	O
{	O
if	O
(	O
host	*(char)
-	O
password	*(char)
<	O
2	int
)	O
return	O
OSIP_SYNTAXERROR	O
;	O
url	*(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(char))))
->	O
password	*(char)
=	O
(	O
char	O
*	O
)	O
osip_malloc	O
(	O
host	*(char)
-	O
password	*(char)
)	O
;	O
if	O
(	O
url	*(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(char))))
->	O
password	*(char)
==	O
NULL	O
)	O
return	O
OSIP_NOMEM	O
;	O
osip_strncpy	(*(char),*(char),long)->(*(char))
(	O
url	*(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(char))))
->	O
password	*(char)
,	O
password	*(char)
+	O
1	int
,	O
host	*(char)
-	O
password	*(char)
-	O
1	int
)	O
;	O
__osip_uri_unescape	(*(char))->(void)
(	O
url	*(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(char))))
->	O
password	*(char)
)	O
;	O
}	O
if	O
(	O
password	*(char)
-	O
username	*(char)
<	O
2	int
)	O
return	O
OSIP_SYNTAXERROR	O
;	O
{	O
url	*(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(char))))
->	O
username	*(char)
=	O
(	O
char	O
*	O
)	O
osip_malloc	O
(	O
password	*(char)
-	O
username	*(char)
)	O
;	O
if	O
(	O
url	*(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(char))))
->	O
username	*(char)
==	O
NULL	O
)	O
return	O
OSIP_NOMEM	O
;	O
osip_strncpy	(*(char),*(char),long)->(*(char))
(	O
url	*(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(char))))
->	O
username	*(char)
,	O
username	*(char)
+	O
1	int
,	O
password	*(char)
-	O
username	*(char)
-	O
1	int
)	O
;	O
__osip_uri_unescape	(*(char))->(void)
(	O
url	*(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(char))))
->	O
username	*(char)
)	O
;	O
}	O
}	O
headers	*(struct(int,*(struct(*(struct`),*(void)))))
=	O
strchr	(*(char),int)->(*(char))
(	O
host	*(char)
,	O
'?'	O
)	O
;	O
if	O
(	O
headers	*(struct(int,*(struct(*(struct`),*(void)))))
==	O
NULL	O
)	O
headers	*(struct(int,*(struct(*(struct`),*(void)))))
=	O
buf	*(char)
+	O
strlen	(*(char))->(long)
(	O
buf	*(char)
)	O
;	O
else	O
osip_uri_parse_headers	(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(char))),*(char))->(int)
(	O
url	*(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(char))))
,	O
headers	*(struct(int,*(struct(*(struct`),*(void)))))
)	O
;	O
params	*(char)
=	O
strchr	(*(char),int)->(*(char))
(	O
host	*(char)
,	O
';'	O
)	O
;	O
if	O
(	O
params	*(char)
==	O
NULL	O
)	O
params	*(char)
=	O
headers	*(struct(int,*(struct(*(struct`),*(void)))))
;	O
else	O
{	O
char	O
*	O
tmpbuf	*(char)
;	O
if	O
(	O
headers	*(struct(int,*(struct(*(struct`),*(void)))))
-	O
params	*(char)
+	O
1	int
<	O
2	int
)	O
return	O
OSIP_SYNTAXERROR	O
;	O
tmpbuf	*(char)
=	O
osip_malloc	O
(	O
headers	*(struct(int,*(struct(*(struct`),*(void)))))
-	O
params	*(char)
+	O
1	int
)	O
;	O
if	O
(	O
tmpbuf	*(char)
==	O
NULL	O
)	O
return	O
OSIP_NOMEM	O
;	O
tmpbuf	*(char)
=	O
osip_strncpy	(*(char),*(char),long)->(*(char))
(	O
tmpbuf	*(char)
,	O
params	*(char)
,	O
headers	*(struct(int,*(struct(*(struct`),*(void)))))
-	O
params	*(char)
)	O
;	O
osip_uri_parse_params	(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(char))),*(char))->(int)
(	O
url	*(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(char))))
,	O
tmpbuf	*(char)
)	O
;	O
osip_free	O
(	O
tmpbuf	*(char)
)	O
;	O
}	O
port	*(char)
=	O
params	*(char)
-	O
1	int
;	O
while	O
(	O
port	*(char)
>	O
host	*(char)
&&	O
*	O
port	*(char)
!=	O
']'	O
&&	O
*	O
port	*(char)
!=	O
':'	O
)	O
port	*(char)
--	O
;	O
if	O
(	O
*	O
port	*(char)
==	O
':'	O
)	O
{	O
if	O
(	O
host	*(char)
==	O
port	*(char)
)	O
port	*(char)
=	O
params	*(char)
;	O
else	O
{	O
if	O
(	O
(	O
params	*(char)
-	O
port	*(char)
<	O
2	int
)	O
||	O
(	O
params	*(char)
-	O
port	*(char)
>	O
8	int
)	O
)	O
return	O
OSIP_SYNTAXERROR	O
;	O
url	*(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(char))))
->	O
port	*(char)
=	O
(	O
char	O
*	O
)	O
osip_malloc	O
(	O
params	*(char)
-	O
port	*(char)
)	O
;	O
if	O
(	O
url	*(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(char))))
->	O
port	*(char)
==	O
NULL	O
)	O
return	O
OSIP_NOMEM	O
;	O
osip_clrncpy	(*(char),*(char),long)->(*(char))
(	O
url	*(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(char))))
->	O
port	*(char)
,	O
port	*(char)
+	O
1	int
,	O
params	*(char)
-	O
port	*(char)
-	O
1	int
)	O
;	O
}	O
}	O
else	O
port	*(char)
=	O
params	*(char)
;	O
tmp	*(char)
=	O
port	*(char)
;	O
while	O
(	O
tmp	*(char)
>	O
host	*(char)
&&	O
*	O
tmp	*(char)
!=	O
']'	O
)	O
tmp	*(char)
--	O
;	O
if	O
(	O
*	O
tmp	*(char)
==	O
']'	O
)	O
{	O
port	*(char)
=	O
tmp	*(char)
;	O
while	O
(	O
host	*(char)
<	O
port	*(char)
&&	O
*	O
host	*(char)
!=	O
'['	O
)	O
host	*(char)
++	O
;	O
if	O
(	O
host	*(char)
>=	O
port	*(char)
)	O
return	O
OSIP_SYNTAXERROR	O
;	O
}	O
if	O
(	O
port	*(char)
-	O
host	*(char)
<	O
2	int
)	O
return	O
OSIP_SYNTAXERROR	O
;	O
url	*(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(char))))
->	O
host	*(char)
=	O
(	O
char	O
*	O
)	O
osip_malloc	O
(	O
port	*(char)
-	O
host	*(char)
)	O
;	O
if	O
(	O
url	*(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(char))))
->	O
host	*(char)
==	O
NULL	O
)	O
return	O
OSIP_NOMEM	O
;	O
osip_clrncpy	(*(char),*(char),long)->(*(char))
(	O
url	*(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(char))))
->	O
host	*(char)
,	O
host	*(char)
+	O
1	int
,	O
port	*(char)
-	O
host	*(char)
-	O
1	int
)	O
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
void	O
osip_uri_set_scheme	(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(char))),*(char))->(void)
(	O
osip_uri_t	struct
*	O
url	*(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(char))))
,	O
char	O
*	O
scheme	*(char)
)	O
{	O
if	O
(	O
url	*(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(char))))
==	O
NULL	O
)	O
return	O
;	O
url	*(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(char))))
->	O
scheme	*(char)
=	O
scheme	*(char)
;	O
}	O
char	O
*	O
osip_uri_get_scheme	(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(char))))->(*(char))
(	O
osip_uri_t	struct
*	O
url	*(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(char))))
)	O
{	O
if	O
(	O
url	*(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(char))))
==	O
NULL	O
)	O
return	O
NULL	O
;	O
return	O
url	*(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(char))))
->	O
scheme	*(char)
;	O
}	O
void	O
osip_uri_set_username	(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(char))),*(char))->(void)
(	O
osip_uri_t	struct
*	O
url	*(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(char))))
,	O
char	O
*	O
username	*(char)
)	O
{	O
if	O
(	O
url	*(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(char))))
==	O
NULL	O
)	O
return	O
;	O
url	*(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(char))))
->	O
username	*(char)
=	O
username	*(char)
;	O
}	O
char	O
*	O
osip_uri_get_username	(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(char))))->(*(char))
(	O
osip_uri_t	struct
*	O
url	*(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(char))))
)	O
{	O
if	O
(	O
url	*(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(char))))
==	O
NULL	O
)	O
return	O
NULL	O
;	O
return	O
url	*(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(char))))
->	O
username	*(char)
;	O
}	O
void	O
osip_uri_set_password	(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(char))),*(char))->(void)
(	O
osip_uri_t	struct
*	O
url	*(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(char))))
,	O
char	O
*	O
password	*(char)
)	O
{	O
if	O
(	O
url	*(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(char))))
==	O
NULL	O
)	O
return	O
;	O
url	*(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(char))))
->	O
password	*(char)
=	O
password	*(char)
;	O
}	O
char	O
*	O
osip_uri_get_password	(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(char))))->(*(char))
(	O
osip_uri_t	struct
*	O
url	*(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(char))))
)	O
{	O
if	O
(	O
url	*(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(char))))
==	O
NULL	O
)	O
return	O
NULL	O
;	O
return	O
url	*(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(char))))
->	O
password	*(char)
;	O
}	O
void	O
osip_uri_set_host	(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(char))),*(char))->(void)
(	O
osip_uri_t	struct
*	O
url	*(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(char))))
,	O
char	O
*	O
host	*(char)
)	O
{	O
if	O
(	O
url	*(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(char))))
==	O
NULL	O
)	O
return	O
;	O
url	*(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(char))))
->	O
host	*(char)
=	O
host	*(char)
;	O
}	O
char	O
*	O
osip_uri_get_host	(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(char))))->(*(char))
(	O
osip_uri_t	struct
*	O
url	*(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(char))))
)	O
{	O
if	O
(	O
url	*(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(char))))
==	O
NULL	O
)	O
return	O
NULL	O
;	O
return	O
url	*(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(char))))
->	O
host	*(char)
;	O
}	O
void	O
osip_uri_set_port	(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(char))),*(char))->(void)
(	O
osip_uri_t	struct
*	O
url	*(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(char))))
,	O
char	O
*	O
port	*(char)
)	O
{	O
if	O
(	O
url	*(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(char))))
==	O
NULL	O
)	O
return	O
;	O
url	*(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(char))))
->	O
port	*(char)
=	O
port	*(char)
;	O
}	O
char	O
*	O
osip_uri_get_port	(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(char))))->(*(char))
(	O
osip_uri_t	struct
*	O
url	*(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(char))))
)	O
{	O
if	O
(	O
url	*(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(char))))
==	O
NULL	O
)	O
return	O
NULL	O
;	O
return	O
url	*(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(char))))
->	O
port	*(char)
;	O
}	O
int	O
osip_uri_parse_headers	(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(char))),*(char))->(int)
(	O
osip_uri_t	struct
*	O
url	*(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(char))))
,	O
const	O
char	O
*	O
headers	*(struct(int,*(struct(*(struct`),*(void)))))
)	O
{	O
int	O
i	int
;	O
const	O
char	O
*	O
_and	*(char)
;	O
const	O
char	O
*	O
equal	*(char)
;	O
equal	*(char)
=	O
strchr	(*(char),int)->(*(char))
(	O
headers	*(struct(int,*(struct(*(struct`),*(void)))))
,	O
'='	O
)	O
;	O
_and	*(char)
=	O
strchr	(*(char),int)->(*(char))
(	O
headers	*(struct(int,*(struct(*(struct`),*(void)))))
+	O
1	int
,	O
'&'	O
)	O
;	O
if	O
(	O
equal	*(char)
==	O
NULL	O
)	O
return	O
OSIP_SYNTAXERROR	O
;	O
do	O
{	O
char	O
*	O
hname	*(char)
;	O
char	O
*	O
hvalue	*(char)
;	O
hname	*(char)
=	O
(	O
char	O
*	O
)	O
osip_malloc	O
(	O
equal	*(char)
-	O
headers	*(struct(int,*(struct(*(struct`),*(void)))))
)	O
;	O
if	O
(	O
hname	*(char)
==	O
NULL	O
)	O
return	O
OSIP_NOMEM	O
;	O
osip_strncpy	(*(char),*(char),long)->(*(char))
(	O
hname	*(char)
,	O
headers	*(struct(int,*(struct(*(struct`),*(void)))))
+	O
1	int
,	O
equal	*(char)
-	O
headers	*(struct(int,*(struct(*(struct`),*(void)))))
-	O
1	int
)	O
;	O
__osip_uri_unescape	(*(char))->(void)
(	O
hname	*(char)
)	O
;	O
if	O
(	O
_and	*(char)
!=	O
NULL	O
)	O
{	O
if	O
(	O
_and	*(char)
-	O
equal	*(char)
<	O
2	int
)	O
{	O
osip_free	O
(	O
hname	*(char)
)	O
;	O
return	O
OSIP_SYNTAXERROR	O
;	O
}	O
hvalue	*(char)
=	O
(	O
char	O
*	O
)	O
osip_malloc	O
(	O
_and	*(char)
-	O
equal	*(char)
)	O
;	O
if	O
(	O
hvalue	*(char)
==	O
NULL	O
)	O
{	O
osip_free	O
(	O
hname	*(char)
)	O
;	O
return	O
OSIP_NOMEM	O
;	O
}	O
osip_strncpy	(*(char),*(char),long)->(*(char))
(	O
hvalue	*(char)
,	O
equal	*(char)
+	O
1	int
,	O
_and	*(char)
-	O
equal	*(char)
-	O
1	int
)	O
;	O
__osip_uri_unescape	(*(char))->(void)
(	O
hvalue	*(char)
)	O
;	O
}	O
else	O
{	O
if	O
(	O
headers	*(struct(int,*(struct(*(struct`),*(void)))))
+	O
strlen	(*(char))->(long)
(	O
headers	*(struct(int,*(struct(*(struct`),*(void)))))
)	O
-	O
equal	*(char)
+	O
1	int
<	O
2	int
)	O
{	O
osip_free	O
(	O
hname	*(char)
)	O
;	O
return	O
OSIP_SYNTAXERROR	O
;	O
}	O
hvalue	*(char)
=	O
(	O
char	O
*	O
)	O
osip_malloc	O
(	O
headers	*(struct(int,*(struct(*(struct`),*(void)))))
+	O
strlen	(*(char))->(long)
(	O
headers	*(struct(int,*(struct(*(struct`),*(void)))))
)	O
-	O
equal	*(char)
+	O
1	int
)	O
;	O
if	O
(	O
hvalue	*(char)
==	O
NULL	O
)	O
{	O
osip_free	O
(	O
hname	*(char)
)	O
;	O
return	O
OSIP_NOMEM	O
;	O
}	O
osip_strncpy	(*(char),*(char),long)->(*(char))
(	O
hvalue	*(char)
,	O
equal	*(char)
+	O
1	int
,	O
headers	*(struct(int,*(struct(*(struct`),*(void)))))
+	O
strlen	(*(char))->(long)
(	O
headers	*(struct(int,*(struct(*(struct`),*(void)))))
)	O
-	O
equal	*(char)
)	O
;	O
__osip_uri_unescape	(*(char))->(void)
(	O
hvalue	*(char)
)	O
;	O
}	O
i	int
=	O
osip_uri_uheader_add	O
(	O
url	*(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(char))))
,	O
hname	*(char)
,	O
hvalue	*(char)
)	O
;	O
if	O
(	O
i	int
!=	O
OSIP_SUCCESS	int
)	O
{	O
osip_free	O
(	O
hname	*(char)
)	O
;	O
osip_free	O
(	O
hvalue	*(char)
)	O
;	O
return	O
i	int
;	O
}	O
if	O
(	O
_and	*(char)
==	O
NULL	O
)	O
equal	*(char)
=	O
NULL	O
;	O
else	O
{	O
headers	*(struct(int,*(struct(*(struct`),*(void)))))
=	O
_and	*(char)
;	O
equal	*(char)
=	O
strchr	(*(char),int)->(*(char))
(	O
headers	*(struct(int,*(struct(*(struct`),*(void)))))
,	O
'='	O
)	O
;	O
_and	*(char)
=	O
strchr	(*(char),int)->(*(char))
(	O
headers	*(struct(int,*(struct(*(struct`),*(void)))))
+	O
1	int
,	O
'&'	O
)	O
;	O
if	O
(	O
equal	*(char)
==	O
NULL	O
)	O
return	O
OSIP_SYNTAXERROR	O
;	O
}	O
}	O
while	O
(	O
equal	*(char)
!=	O
NULL	O
)	O
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
int	O
osip_uri_parse_params	(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(char))),*(char))->(int)
(	O
osip_uri_t	struct
*	O
url	*(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(char))))
,	O
const	O
char	O
*	O
params	*(char)
)	O
{	O
int	O
i	int
;	O
char	O
*	O
pname	*(char)
;	O
char	O
*	O
pvalue	*(char)
;	O
const	O
char	O
*	O
comma	*(char)
;	O
const	O
char	O
*	O
equal	*(char)
;	O
equal	*(char)
=	O
next_separator	(*(char),int,int)->(*(char))
(	O
params	*(char)
+	O
1	int
,	O
'='	O
,	O
';'	O
)	O
;	O
comma	*(char)
=	O
strchr	(*(char),int)->(*(char))
(	O
params	*(char)
+	O
1	int
,	O
';'	O
)	O
;	O
while	O
(	O
comma	*(char)
!=	O
NULL	O
)	O
{	O
if	O
(	O
equal	*(char)
==	O
NULL	O
)	O
{	O
equal	*(char)
=	O
comma	*(char)
;	O
pvalue	*(char)
=	O
NULL	O
;	O
}	O
else	O
{	O
if	O
(	O
comma	*(char)
-	O
equal	*(char)
<	O
2	int
)	O
return	O
OSIP_SYNTAXERROR	O
;	O
pvalue	*(char)
=	O
(	O
char	O
*	O
)	O
osip_malloc	O
(	O
comma	*(char)
-	O
equal	*(char)
)	O
;	O
if	O
(	O
pvalue	*(char)
==	O
NULL	O
)	O
return	O
OSIP_NOMEM	O
;	O
osip_strncpy	(*(char),*(char),long)->(*(char))
(	O
pvalue	*(char)
,	O
equal	*(char)
+	O
1	int
,	O
comma	*(char)
-	O
equal	*(char)
-	O
1	int
)	O
;	O
__osip_uri_unescape	(*(char))->(void)
(	O
pvalue	*(char)
)	O
;	O
}	O
if	O
(	O
equal	*(char)
-	O
params	*(char)
<	O
2	int
)	O
{	O
osip_free	O
(	O
pvalue	*(char)
)	O
;	O
return	O
OSIP_SYNTAXERROR	O
;	O
}	O
pname	*(char)
=	O
(	O
char	O
*	O
)	O
osip_malloc	O
(	O
equal	*(char)
-	O
params	*(char)
)	O
;	O
if	O
(	O
pname	*(char)
==	O
NULL	O
)	O
{	O
osip_free	O
(	O
pvalue	*(char)
)	O
;	O
return	O
OSIP_NOMEM	O
;	O
}	O
osip_strncpy	(*(char),*(char),long)->(*(char))
(	O
pname	*(char)
,	O
params	*(char)
+	O
1	int
,	O
equal	*(char)
-	O
params	*(char)
-	O
1	int
)	O
;	O
__osip_uri_unescape	(*(char))->(void)
(	O
pname	*(char)
)	O
;	O
i	int
=	O
osip_uri_uparam_add	O
(	O
url	*(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(char))))
,	O
pname	*(char)
,	O
pvalue	*(char)
)	O
;	O
if	O
(	O
i	int
!=	O
OSIP_SUCCESS	int
)	O
{	O
osip_free	O
(	O
pname	*(char)
)	O
;	O
osip_free	O
(	O
pvalue	*(char)
)	O
;	O
return	O
OSIP_NOMEM	O
;	O
}	O
params	*(char)
=	O
comma	*(char)
;	O
equal	*(char)
=	O
next_separator	(*(char),int,int)->(*(char))
(	O
params	*(char)
+	O
1	int
,	O
'='	O
,	O
';'	O
)	O
;	O
comma	*(char)
=	O
strchr	(*(char),int)->(*(char))
(	O
params	*(char)
+	O
1	int
,	O
';'	O
)	O
;	O
}	O
comma	*(char)
=	O
params	*(char)
+	O
strlen	(*(char))->(long)
(	O
params	*(char)
)	O
;	O
if	O
(	O
equal	*(char)
==	O
NULL	O
)	O
{	O
equal	*(char)
=	O
comma	*(char)
;	O
pvalue	*(char)
=	O
NULL	O
;	O
}	O
else	O
{	O
if	O
(	O
comma	*(char)
-	O
equal	*(char)
<	O
2	int
)	O
return	O
OSIP_SYNTAXERROR	O
;	O
pvalue	*(char)
=	O
(	O
char	O
*	O
)	O
osip_malloc	O
(	O
comma	*(char)
-	O
equal	*(char)
)	O
;	O
if	O
(	O
pvalue	*(char)
==	O
NULL	O
)	O
return	O
OSIP_NOMEM	O
;	O
osip_strncpy	(*(char),*(char),long)->(*(char))
(	O
pvalue	*(char)
,	O
equal	*(char)
+	O
1	int
,	O
comma	*(char)
-	O
equal	*(char)
-	O
1	int
)	O
;	O
__osip_uri_unescape	(*(char))->(void)
(	O
pvalue	*(char)
)	O
;	O
}	O
if	O
(	O
equal	*(char)
-	O
params	*(char)
<	O
2	int
)	O
{	O
osip_free	O
(	O
pvalue	*(char)
)	O
;	O
return	O
OSIP_SYNTAXERROR	O
;	O
}	O
pname	*(char)
=	O
(	O
char	O
*	O
)	O
osip_malloc	O
(	O
equal	*(char)
-	O
params	*(char)
)	O
;	O
if	O
(	O
pname	*(char)
==	O
NULL	O
)	O
{	O
osip_free	O
(	O
pvalue	*(char)
)	O
;	O
return	O
OSIP_NOMEM	O
;	O
}	O
osip_strncpy	(*(char),*(char),long)->(*(char))
(	O
pname	*(char)
,	O
params	*(char)
+	O
1	int
,	O
equal	*(char)
-	O
params	*(char)
-	O
1	int
)	O
;	O
__osip_uri_unescape	(*(char))->(void)
(	O
pname	*(char)
)	O
;	O
i	int
=	O
osip_uri_uparam_add	O
(	O
url	*(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(char))))
,	O
pname	*(char)
,	O
pvalue	*(char)
)	O
;	O
if	O
(	O
i	int
!=	O
OSIP_SUCCESS	int
)	O
{	O
osip_free	O
(	O
pname	*(char)
)	O
;	O
osip_free	O
(	O
pvalue	*(char)
)	O
;	O
return	O
OSIP_NOMEM	O
;	O
}	O
return	O
OSIP_SUCCESS	int
;	O
}	O
int	O
osip_uri_to_str	(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(char))),*(*(char)))->(int)
(	O
const	O
osip_uri_t	struct
*	O
url	*(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(char))))
,	O
char	O
*	O
*	O
dest	*(char)
)	O
{	O
char	O
*	O
buf	*(char)
;	O
size_t	long
len	long
;	O
size_t	long
plen	long
;	O
char	O
*	O
tmp	*(char)
;	O
const	O
char	O
*	O
scheme	*(char)
;	O
*	O
dest	*(char)
=	O
NULL	O
;	O
if	O
(	O
url	*(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(char))))
==	O
NULL	O
)	O
return	O
OSIP_BADPARAMETER	O
;	O
if	O
(	O
url	*(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(char))))
->	O
host	*(char)
==	O
NULL	O
&&	O
url	*(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(char))))
->	O
string	*(char)
==	O
NULL	O
)	O
return	O
OSIP_BADPARAMETER	O
;	O
if	O
(	O
url	*(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(char))))
->	O
scheme	*(char)
==	O
NULL	O
&&	O
url	*(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(char))))
->	O
string	*(char)
!=	O
NULL	O
)	O
return	O
OSIP_BADPARAMETER	O
;	O
if	O
(	O
url	*(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(char))))
->	O
string	*(char)
==	O
NULL	O
&&	O
url	*(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(char))))
->	O
scheme	*(char)
==	O
NULL	O
)	O
scheme	*(char)
=	O
"sip"	*(char)
;	O
else	O
scheme	*(char)
=	O
url	*(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(char))))
->	O
scheme	*(char)
;	O
if	O
(	O
url	*(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(char))))
->	O
string	*(char)
!=	O
NULL	O
)	O
{	O
buf	*(char)
=	O
(	O
char	O
*	O
)	O
osip_malloc	O
(	O
strlen	(*(char))->(long)
(	O
scheme	*(char)
)	O
+	O
strlen	(*(char))->(long)
(	O
url	*(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(char))))
->	O
string	*(char)
)	O
+	O
3	int
)	O
;	O
if	O
(	O
buf	*(char)
==	O
NULL	O
)	O
return	O
OSIP_NOMEM	O
;	O
*	O
dest	*(char)
=	O
buf	*(char)
;	O
sprintf	(*(char),*(char))->(int)
(	O
buf	*(char)
,	O
"%s:"	*(char)
,	O
scheme	*(char)
)	O
;	O
buf	*(char)
=	O
buf	*(char)
+	O
strlen	(*(char))->(long)
(	O
scheme	*(char)
)	O
+	O
1	int
;	O
sprintf	(*(char),*(char))->(int)
(	O
buf	*(char)
,	O
"%s"	*(char)
,	O
url	*(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(char))))
->	O
string	*(char)
)	O
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
len	long
=	O
strlen	(*(char))->(long)
(	O
scheme	*(char)
)	O
+	O
1	int
+	O
strlen	(*(char))->(long)
(	O
url	*(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(char))))
->	O
host	*(char)
)	O
+	O
5	int
;	O
if	O
(	O
url	*(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(char))))
->	O
username	*(char)
!=	O
NULL	O
)	O
len	long
=	O
len	long
+	O
(	O
strlen	(*(char))->(long)
(	O
url	*(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(char))))
->	O
username	*(char)
)	O
*	O
3	int
)	O
+	O
1	int
;	O
if	O
(	O
url	*(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(char))))
->	O
password	*(char)
!=	O
NULL	O
)	O
len	long
=	O
len	long
+	O
(	O
strlen	(*(char))->(long)
(	O
url	*(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(char))))
->	O
password	*(char)
)	O
*	O
3	int
)	O
+	O
1	int
;	O
if	O
(	O
url	*(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(char))))
->	O
port	*(char)
!=	O
NULL	O
)	O
len	long
=	O
len	long
+	O
strlen	(*(char))->(long)
(	O
url	*(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(char))))
->	O
port	*(char)
)	O
+	O
3	int
;	O
buf	*(char)
=	O
(	O
char	O
*	O
)	O
osip_malloc	O
(	O
len	long
)	O
;	O
if	O
(	O
buf	*(char)
==	O
NULL	O
)	O
return	O
OSIP_NOMEM	O
;	O
tmp	*(char)
=	O
buf	*(char)
;	O
sprintf	(*(char),*(char))->(int)
(	O
tmp	*(char)
,	O
"%s:"	*(char)
,	O
scheme	*(char)
)	O
;	O
tmp	*(char)
=	O
tmp	*(char)
+	O
strlen	(*(char))->(long)
(	O
tmp	*(char)
)	O
;	O
if	O
(	O
url	*(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(char))))
->	O
username	*(char)
!=	O
NULL	O
)	O
{	O
char	O
*	O
tmp2	*(char)
=	O
__osip_uri_escape_userinfo	(*(char))->(*(char))
(	O
url	*(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(char))))
->	O
username	*(char)
)	O
;	O
if	O
(	O
tmp2	*(char)
==	O
NULL	O
)	O
{	O
osip_free	O
(	O
buf	*(char)
)	O
;	O
return	O
OSIP_NOMEM	O
;	O
}	O
sprintf	(*(char),*(char))->(int)
(	O
tmp	*(char)
,	O
"%s"	*(char)
,	O
tmp2	*(char)
)	O
;	O
osip_free	O
(	O
tmp2	*(char)
)	O
;	O
tmp	*(char)
=	O
tmp	*(char)
+	O
strlen	(*(char))->(long)
(	O
tmp	*(char)
)	O
;	O
}	O
if	O
(	O
(	O
url	*(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(char))))
->	O
password	*(char)
!=	O
NULL	O
)	O
&&	O
(	O
url	*(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(char))))
->	O
username	*(char)
!=	O
NULL	O
)	O
)	O
{	O
char	O
*	O
tmp2	*(char)
=	O
__osip_uri_escape_password	(*(char))->(*(char))
(	O
url	*(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(char))))
->	O
password	*(char)
)	O
;	O
if	O
(	O
tmp2	*(char)
==	O
NULL	O
)	O
{	O
osip_free	O
(	O
buf	*(char)
)	O
;	O
return	O
OSIP_NOMEM	O
;	O
}	O
sprintf	(*(char),*(char))->(int)
(	O
tmp	*(char)
,	O
":%s"	*(char)
,	O
tmp2	*(char)
)	O
;	O
osip_free	O
(	O
tmp2	*(char)
)	O
;	O
tmp	*(char)
=	O
tmp	*(char)
+	O
strlen	(*(char))->(long)
(	O
tmp	*(char)
)	O
;	O
}	O
if	O
(	O
url	*(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(char))))
->	O
username	*(char)
!=	O
NULL	O
)	O
{	O
sprintf	(*(char),*(char))->(int)
(	O
tmp	*(char)
,	O
"@"	*(char)
)	O
;	O
tmp	*(char)
++	O
;	O
}	O
if	O
(	O
strchr	(*(char),int)->(*(char))
(	O
url	*(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(char))))
->	O
host	*(char)
,	O
':'	O
)	O
!=	O
NULL	O
)	O
{	O
sprintf	(*(char),*(char))->(int)
(	O
tmp	*(char)
,	O
"[%s]"	*(char)
,	O
url	*(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(char))))
->	O
host	*(char)
)	O
;	O
tmp	*(char)
=	O
tmp	*(char)
+	O
strlen	(*(char))->(long)
(	O
tmp	*(char)
)	O
;	O
}	O
else	O
{	O
sprintf	(*(char),*(char))->(int)
(	O
tmp	*(char)
,	O
"%s"	*(char)
,	O
url	*(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(char))))
->	O
host	*(char)
)	O
;	O
tmp	*(char)
=	O
tmp	*(char)
+	O
strlen	(*(char))->(long)
(	O
tmp	*(char)
)	O
;	O
}	O
if	O
(	O
url	*(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(char))))
->	O
port	*(char)
!=	O
NULL	O
)	O
{	O
sprintf	(*(char),*(char))->(int)
(	O
tmp	*(char)
,	O
":%s"	*(char)
,	O
url	*(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(char))))
->	O
port	*(char)
)	O
;	O
tmp	*(char)
=	O
tmp	*(char)
+	O
strlen	(*(char))->(long)
(	O
tmp	*(char)
)	O
;	O
}	O
{	O
osip_list_iterator_t	struct
it	*(struct(*(struct(*(struct`),*(void))),*(*(struct(*`,*`))),*(struct(int,*(struct`))),int))
;	O
osip_uri_param_t	struct
*	O
u_param	*(struct(*(char),*(char)))
=	O
(	O
osip_uri_param_t	struct
*	O
)	O
osip_list_get_first	(*(struct(int,*(struct(*`,*`)))),*(struct(*(struct(*`,*`)),*(*(struct`)),*(struct(int,*`)),int)))->(*(void))
(	O
&	O
url	*(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(char))))
->	O
url_params	*(struct(int,*(struct(*(struct`),*(void)))))
,	O
&	O
it	*(struct(*(struct(*(struct`),*(void))),*(*(struct(*`,*`))),*(struct(int,*(struct`))),int))
)	O
;	O
while	O
(	O
u_param	*(struct(*(char),*(char)))
!=	O
OSIP_SUCCESS	int
)	O
{	O
char	O
*	O
tmp1	*(char)
;	O
char	O
*	O
tmp2	*(char)
=	O
NULL	O
;	O
char	O
*	O
previous_buf	*(char)
;	O
if	O
(	O
osip_strcasecmp	(*(char),*(char))->(int)
(	O
u_param	*(struct(*(char),*(char)))
->	O
gname	*(char)
,	O
"x-obr"	*(char)
)	O
==	O
0	int
||	O
osip_strcasecmp	(*(char),*(char))->(int)
(	O
u_param	*(struct(*(char),*(char)))
->	O
gname	*(char)
,	O
"x-obp"	*(char)
)	O
==	O
0	int
)	O
{	O
u_param	*(struct(*(char),*(char)))
=	O
(	O
osip_uri_param_t	struct
*	O
)	O
osip_list_get_next	(*(struct(*(struct(*`,*`)),*(*(struct`)),*(struct(int,*`)),int)))->(*(void))
(	O
&	O
it	*(struct(*(struct(*(struct`),*(void))),*(*(struct(*`,*`))),*(struct(int,*(struct`))),int))
)	O
;	O
continue	O
;	O
}	O
tmp1	*(char)
=	O
__osip_uri_escape_uri_param	(*(char))->(*(char))
(	O
u_param	*(struct(*(char),*(char)))
->	O
gname	*(char)
)	O
;	O
if	O
(	O
tmp1	*(char)
==	O
NULL	O
)	O
{	O
osip_free	O
(	O
buf	*(char)
)	O
;	O
return	O
OSIP_SYNTAXERROR	O
;	O
}	O
if	O
(	O
u_param	*(struct(*(char),*(char)))
->	O
gvalue	*(char)
==	O
NULL	O
)	O
plen	long
=	O
strlen	(*(char))->(long)
(	O
tmp1	*(char)
)	O
+	O
2	int
;	O
else	O
{	O
tmp2	*(char)
=	O
__osip_uri_escape_uri_param	(*(char))->(*(char))
(	O
u_param	*(struct(*(char),*(char)))
->	O
gvalue	*(char)
)	O
;	O
if	O
(	O
tmp2	*(char)
==	O
NULL	O
)	O
{	O
osip_free	O
(	O
tmp1	*(char)
)	O
;	O
osip_free	O
(	O
buf	*(char)
)	O
;	O
return	O
OSIP_SYNTAXERROR	O
;	O
}	O
plen	long
=	O
strlen	(*(char))->(long)
(	O
tmp1	*(char)
)	O
+	O
strlen	(*(char))->(long)
(	O
tmp2	*(char)
)	O
+	O
3	int
;	O
}	O
len	long
=	O
len	long
+	O
plen	long
;	O
previous_buf	*(char)
=	O
buf	*(char)
;	O
buf	*(char)
=	O
(	O
char	O
*	O
)	O
osip_realloc	O
(	O
buf	*(char)
,	O
len	long
)	O
;	O
if	O
(	O
buf	*(char)
==	O
NULL	O
)	O
{	O
osip_free	O
(	O
previous_buf	*(char)
)	O
;	O
osip_free	O
(	O
tmp1	*(char)
)	O
;	O
osip_free	O
(	O
tmp2	*(char)
)	O
;	O
return	O
OSIP_NOMEM	O
;	O
}	O
tmp	*(char)
=	O
buf	*(char)
;	O
tmp	*(char)
=	O
tmp	*(char)
+	O
strlen	(*(char))->(long)
(	O
tmp	*(char)
)	O
;	O
if	O
(	O
u_param	*(struct(*(char),*(char)))
->	O
gvalue	*(char)
==	O
NULL	O
)	O
sprintf	(*(char),*(char))->(int)
(	O
tmp	*(char)
,	O
";%s"	*(char)
,	O
tmp1	*(char)
)	O
;	O
else	O
{	O
sprintf	(*(char),*(char))->(int)
(	O
tmp	*(char)
,	O
";%s=%s"	*(char)
,	O
tmp1	*(char)
,	O
tmp2	*(char)
)	O
;	O
osip_free	O
(	O
tmp2	*(char)
)	O
;	O
}	O
osip_free	O
(	O
tmp1	*(char)
)	O
;	O
u_param	*(struct(*(char),*(char)))
=	O
(	O
osip_uri_param_t	struct
*	O
)	O
osip_list_get_next	(*(struct(*(struct(*`,*`)),*(*(struct`)),*(struct(int,*`)),int)))->(*(void))
(	O
&	O
it	*(struct(*(struct(*(struct`),*(void))),*(*(struct(*`,*`))),*(struct(int,*(struct`))),int))
)	O
;	O
}	O
}	O
{	O
osip_list_iterator_t	struct
it	*(struct(*(struct(*(struct`),*(void))),*(*(struct(*`,*`))),*(struct(int,*(struct`))),int))
;	O
osip_uri_header_t	struct(*(char),*(char))
*	O
u_header	*(struct(*(char),*(char)))
=	O
(	O
osip_uri_header_t	struct(*(char),*(char))
*	O
)	O
osip_list_get_first	(*(struct(int,*(struct(*`,*`)))),*(struct(*(struct(*`,*`)),*(*(struct`)),*(struct(int,*`)),int)))->(*(void))
(	O
&	O
url	*(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(char))))
->	O
url_headers	struct(int,*(struct(*(struct(*`,*`)),*(void))))
,	O
&	O
it	*(struct(*(struct(*(struct`),*(void))),*(*(struct(*`,*`))),*(struct(int,*(struct`))),int))
)	O
;	O
while	O
(	O
u_header	*(struct(*(char),*(char)))
!=	O
OSIP_SUCCESS	int
)	O
{	O
char	O
*	O
tmp1	*(char)
;	O
char	O
*	O
tmp2	*(char)
;	O
char	O
*	O
previous_buf	*(char)
;	O
tmp1	*(char)
=	O
__osip_uri_escape_header_param	(*(char))->(*(char))
(	O
u_header	*(struct(*(char),*(char)))
->	O
gname	*(char)
)	O
;	O
if	O
(	O
tmp1	*(char)
==	O
NULL	O
)	O
{	O
osip_free	O
(	O
buf	*(char)
)	O
;	O
return	O
OSIP_SYNTAXERROR	O
;	O
}	O
tmp2	*(char)
=	O
__osip_uri_escape_header_param	(*(char))->(*(char))
(	O
u_header	*(struct(*(char),*(char)))
->	O
gvalue	*(char)
)	O
;	O
if	O
(	O
tmp2	*(char)
==	O
NULL	O
)	O
{	O
osip_free	O
(	O
tmp1	*(char)
)	O
;	O
osip_free	O
(	O
buf	*(char)
)	O
;	O
return	O
OSIP_SYNTAXERROR	O
;	O
}	O
plen	long
=	O
strlen	(*(char))->(long)
(	O
tmp1	*(char)
)	O
+	O
strlen	(*(char))->(long)
(	O
tmp2	*(char)
)	O
+	O
4	int
;	O
len	long
=	O
len	long
+	O
plen	long
;	O
previous_buf	*(char)
=	O
buf	*(char)
;	O
buf	*(char)
=	O
(	O
char	O
*	O
)	O
osip_realloc	O
(	O
buf	*(char)
,	O
len	long
)	O
;	O
if	O
(	O
buf	*(char)
==	O
NULL	O
)	O
{	O
osip_free	O
(	O
previous_buf	*(char)
)	O
;	O
osip_free	O
(	O
tmp1	*(char)
)	O
;	O
osip_free	O
(	O
tmp2	*(char)
)	O
;	O
return	O
OSIP_NOMEM	O
;	O
}	O
tmp	*(char)
=	O
buf	*(char)
;	O
tmp	*(char)
=	O
tmp	*(char)
+	O
strlen	(*(char))->(long)
(	O
tmp	*(char)
)	O
;	O
if	O
(	O
it	*(struct(*(struct(*(struct`),*(void))),*(*(struct(*`,*`))),*(struct(int,*(struct`))),int))
.	O
pos	int
==	O
0	int
)	O
snprintf	(*(char),long,*(char))->(int)
(	O
tmp	*(char)
,	O
len	long
-	O
(	O
tmp	*(char)
-	O
buf	*(char)
)	O
,	O
"?%s=%s"	*(char)
,	O
tmp1	*(char)
,	O
tmp2	*(char)
)	O
;	O
else	O
snprintf	(*(char),long,*(char))->(int)
(	O
tmp	*(char)
,	O
len	long
-	O
(	O
tmp	*(char)
-	O
buf	*(char)
)	O
,	O
"&%s=%s"	*(char)
,	O
tmp1	*(char)
,	O
tmp2	*(char)
)	O
;	O
osip_free	O
(	O
tmp1	*(char)
)	O
;	O
osip_free	O
(	O
tmp2	*(char)
)	O
;	O
u_header	*(struct(*(char),*(char)))
=	O
(	O
osip_uri_header_t	struct(*(char),*(char))
*	O
)	O
osip_list_get_next	(*(struct(*(struct(*`,*`)),*(*(struct`)),*(struct(int,*`)),int)))->(*(void))
(	O
&	O
it	*(struct(*(struct(*(struct`),*(void))),*(*(struct(*`,*`))),*(struct(int,*(struct`))),int))
)	O
;	O
}	O
}	O
*	O
dest	*(char)
=	O
buf	*(char)
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
void	O
osip_uri_free	(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(char))))->(void)
(	O
osip_uri_t	struct
*	O
url	*(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(char))))
)	O
{	O
if	O
(	O
url	*(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(char))))
==	O
NULL	O
)	O
return	O
;	O
osip_free	O
(	O
url	*(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(char))))
->	O
scheme	*(char)
)	O
;	O
osip_free	O
(	O
url	*(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(char))))
->	O
username	*(char)
)	O
;	O
osip_free	O
(	O
url	*(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(char))))
->	O
password	*(char)
)	O
;	O
osip_free	O
(	O
url	*(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(char))))
->	O
host	*(char)
)	O
;	O
osip_free	O
(	O
url	*(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(char))))
->	O
port	*(char)
)	O
;	O
osip_uri_param_freelist	(*(struct(int,*(struct(*`,*`)))))->(void)
(	O
&	O
url	*(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(char))))
->	O
url_params	*(struct(int,*(struct(*(struct`),*(void)))))
)	O
;	O
{	O
osip_uri_header_t	struct(*(char),*(char))
*	O
u_header	*(struct(*(char),*(char)))
;	O
while	O
(	O
!	O
osip_list_eol	(*(struct(int,*(struct(*`,*`)))),int)->(int)
(	O
&	O
url	*(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(char))))
->	O
url_headers	struct(int,*(struct(*(struct(*`,*`)),*(void))))
,	O
0	int
)	O
)	O
{	O
u_header	*(struct(*(char),*(char)))
=	O
(	O
osip_uri_header_t	struct(*(char),*(char))
*	O
)	O
osip_list_get	(*(struct(int,*(struct(*`,*`)))),int)->(*(void))
(	O
&	O
url	*(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(char))))
->	O
url_headers	struct(int,*(struct(*(struct(*`,*`)),*(void))))
,	O
0	int
)	O
;	O
osip_list_remove	(*(struct(int,*(struct(*`,*`)))),int)->(int)
(	O
&	O
url	*(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(char))))
->	O
url_headers	struct(int,*(struct(*(struct(*`,*`)),*(void))))
,	O
0	int
)	O
;	O
osip_uri_header_free	O
(	O
u_header	*(struct(*(char),*(char)))
)	O
;	O
}	O
}	O
osip_free	O
(	O
url	*(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(char))))
->	O
string	*(char)
)	O
;	O
osip_free	O
(	O
url	*(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(char))))
)	O
;	O
}	O
int	O
osip_uri_clone	(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(char))),*(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*`),struct(int,*`),*(char)))))->(int)
(	O
const	O
osip_uri_t	struct
*	O
url	*(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(char))))
,	O
osip_uri_t	struct
*	O
*	O
dest	*(char)
)	O
{	O
int	O
i	int
;	O
osip_uri_t	struct
*	O
ur	*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`))),struct(int,*(struct(*`,*`))),*(char)))
;	O
*	O
dest	*(char)
=	O
NULL	O
;	O
if	O
(	O
url	*(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(char))))
==	O
NULL	O
)	O
return	O
OSIP_BADPARAMETER	O
;	O
if	O
(	O
url	*(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(char))))
->	O
host	*(char)
==	O
NULL	O
&&	O
url	*(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(char))))
->	O
string	*(char)
==	O
NULL	O
)	O
return	O
OSIP_BADPARAMETER	O
;	O
i	int
=	O
osip_uri_init	(*(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*`),struct(int,*`),*(char)))))->(int)
(	O
&	O
ur	*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`))),struct(int,*(struct(*`,*`))),*(char)))
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
return	O
i	int
;	O
if	O
(	O
url	*(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(char))))
->	O
scheme	*(char)
!=	O
NULL	O
)	O
ur	*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`))),struct(int,*(struct(*`,*`))),*(char)))
->	O
scheme	*(char)
=	O
osip_strdup	(*(char))->(*(char))
(	O
url	*(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(char))))
->	O
scheme	*(char)
)	O
;	O
if	O
(	O
url	*(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(char))))
->	O
username	*(char)
!=	O
NULL	O
)	O
ur	*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`))),struct(int,*(struct(*`,*`))),*(char)))
->	O
username	*(char)
=	O
osip_strdup	(*(char))->(*(char))
(	O
url	*(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(char))))
->	O
username	*(char)
)	O
;	O
if	O
(	O
url	*(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(char))))
->	O
password	*(char)
!=	O
NULL	O
)	O
ur	*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`))),struct(int,*(struct(*`,*`))),*(char)))
->	O
password	*(char)
=	O
osip_strdup	(*(char))->(*(char))
(	O
url	*(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(char))))
->	O
password	*(char)
)	O
;	O
if	O
(	O
url	*(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(char))))
->	O
host	*(char)
!=	O
NULL	O
)	O
ur	*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`))),struct(int,*(struct(*`,*`))),*(char)))
->	O
host	*(char)
=	O
osip_strdup	(*(char))->(*(char))
(	O
url	*(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(char))))
->	O
host	*(char)
)	O
;	O
if	O
(	O
url	*(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(char))))
->	O
port	*(char)
!=	O
NULL	O
)	O
ur	*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`))),struct(int,*(struct(*`,*`))),*(char)))
->	O
port	*(char)
=	O
osip_strdup	(*(char))->(*(char))
(	O
url	*(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(char))))
->	O
port	*(char)
)	O
;	O
if	O
(	O
url	*(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(char))))
->	O
string	*(char)
!=	O
NULL	O
)	O
ur	*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`))),struct(int,*(struct(*`,*`))),*(char)))
->	O
string	*(char)
=	O
osip_strdup	(*(char))->(*(char))
(	O
url	*(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(char))))
->	O
string	*(char)
)	O
;	O
i	int
=	O
osip_list_clone	(*(struct(int,*(struct(*`,*`)))),*(struct(int,*(struct(*`,*`)))),*((*(void),*(*(void)))->(int)))->(int)
(	O
&	O
url	*(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(char))))
->	O
url_params	*(struct(int,*(struct(*(struct`),*(void)))))
,	O
&	O
ur	*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`))),struct(int,*(struct(*`,*`))),*(char)))
->	O
url_params	*(struct(int,*(struct(*(struct`),*(void)))))
,	O
(	O
int	O
(	O
*	O
)	O
(	O
void	O
*	O
,	O
void	O
*	O
*	O
)	O
)	O
&	O
osip_uri_param_clone	(*(struct(*(char),*(char))),*(*(struct(*(char),*(char)))))->(int)
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
osip_uri_free	(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(char))))->(void)
(	O
ur	*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`))),struct(int,*(struct(*`,*`))),*(char)))
)	O
;	O
return	O
i	int
;	O
}	O
i	int
=	O
osip_list_clone	(*(struct(int,*(struct(*`,*`)))),*(struct(int,*(struct(*`,*`)))),*((*(void),*(*(void)))->(int)))->(int)
(	O
&	O
url	*(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(char))))
->	O
url_headers	struct(int,*(struct(*(struct(*`,*`)),*(void))))
,	O
&	O
ur	*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`))),struct(int,*(struct(*`,*`))),*(char)))
->	O
url_headers	struct(int,*(struct(*(struct(*`,*`)),*(void))))
,	O
(	O
int	O
(	O
*	O
)	O
(	O
void	O
*	O
,	O
void	O
*	O
*	O
)	O
)	O
&	O
osip_uri_param_clone	(*(struct(*(char),*(char))),*(*(struct(*(char),*(char)))))->(int)
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
osip_uri_free	(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(char))))->(void)
(	O
ur	*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`))),struct(int,*(struct(*`,*`))),*(char)))
)	O
;	O
return	O
i	int
;	O
}	O
*	O
dest	*(char)
=	O
ur	*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`))),struct(int,*(struct(*`,*`))),*(char)))
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
int	O
osip_uri_param_init	(*(*(struct(*(char),*(char)))))->(int)
(	O
osip_uri_param_t	struct
*	O
*	O
url_param	*(*(struct(*(char),*(char))))
)	O
{	O
*	O
url_param	*(*(struct(*(char),*(char))))
=	O
(	O
osip_uri_param_t	struct
*	O
)	O
osip_malloc	O
(	O
sizeof	O
(	O
osip_uri_param_t	struct
)	O
)	O
;	O
if	O
(	O
*	O
url_param	*(*(struct(*(char),*(char))))
==	O
NULL	O
)	O
return	O
OSIP_NOMEM	O
;	O
(	O
*	O
url_param	*(*(struct(*(char),*(char))))
)	O
->	O
gname	*(char)
=	O
NULL	O
;	O
(	O
*	O
url_param	*(*(struct(*(char),*(char))))
)	O
->	O
gvalue	*(char)
=	O
NULL	O
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
void	O
osip_uri_param_free	(*(struct(*(char),*(char))))->(void)
(	O
osip_uri_param_t	struct
*	O
url_param	*(*(struct(*(char),*(char))))
)	O
{	O
osip_free	O
(	O
url_param	*(*(struct(*(char),*(char))))
->	O
gname	*(char)
)	O
;	O
osip_free	O
(	O
url_param	*(*(struct(*(char),*(char))))
->	O
gvalue	*(char)
)	O
;	O
osip_free	O
(	O
url_param	*(*(struct(*(char),*(char))))
)	O
;	O
}	O
int	O
osip_uri_param_set	(*(struct(*(char),*(char))),*(char),*(char))->(int)
(	O
osip_uri_param_t	struct
*	O
url_param	*(*(struct(*(char),*(char))))
,	O
char	O
*	O
pname	*(char)
,	O
char	O
*	O
pvalue	*(char)
)	O
{	O
url_param	*(*(struct(*(char),*(char))))
->	O
gname	*(char)
=	O
pname	*(char)
;	O
osip_clrspace	(*(char))->(int)
(	O
url_param	*(*(struct(*(char),*(char))))
->	O
gname	*(char)
)	O
;	O
url_param	*(*(struct(*(char),*(char))))
->	O
gvalue	*(char)
=	O
pvalue	*(char)
;	O
if	O
(	O
url_param	*(*(struct(*(char),*(char))))
->	O
gvalue	*(char)
!=	O
NULL	O
)	O
osip_clrspace	(*(char))->(int)
(	O
url_param	*(*(struct(*(char),*(char))))
->	O
gvalue	*(char)
)	O
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
int	O
osip_uri_param_add	(*(struct(int,*(struct(*`,*`)))),*(char),*(char))->(int)
(	O
osip_list_t	struct
*	O
url_params	*(struct(int,*(struct(*(struct`),*(void)))))
,	O
char	O
*	O
pname	*(char)
,	O
char	O
*	O
pvalue	*(char)
)	O
{	O
int	O
i	int
;	O
osip_uri_param_t	struct
*	O
url_param	*(*(struct(*(char),*(char))))
;	O
i	int
=	O
osip_uri_param_init	(*(*(struct(*(char),*(char)))))->(int)
(	O
&	O
url_param	*(*(struct(*(char),*(char))))
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
return	O
i	int
;	O
i	int
=	O
osip_uri_param_set	(*(struct(*(char),*(char))),*(char),*(char))->(int)
(	O
url_param	*(*(struct(*(char),*(char))))
,	O
pname	*(char)
,	O
pvalue	*(char)
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
osip_uri_param_free	(*(struct(*(char),*(char))))->(void)
(	O
url_param	*(*(struct(*(char),*(char))))
)	O
;	O
return	O
i	int
;	O
}	O
osip_list_add	(*(struct(int,*(struct(*`,*`)))),*(void),int)->(int)
(	O
url_params	*(struct(int,*(struct(*(struct`),*(void)))))
,	O
url_param	*(*(struct(*(char),*(char))))
,	O
-	O
1	int
)	O
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
void	O
osip_uri_param_freelist	(*(struct(int,*(struct(*`,*`)))))->(void)
(	O
osip_list_t	struct
*	O
params	*(char)
)	O
{	O
osip_uri_param_t	struct
*	O
u_param	*(struct(*(char),*(char)))
;	O
while	O
(	O
!	O
osip_list_eol	(*(struct(int,*(struct(*`,*`)))),int)->(int)
(	O
params	*(char)
,	O
0	int
)	O
)	O
{	O
u_param	*(struct(*(char),*(char)))
=	O
(	O
osip_uri_param_t	struct
*	O
)	O
osip_list_get	(*(struct(int,*(struct(*`,*`)))),int)->(*(void))
(	O
params	*(char)
,	O
0	int
)	O
;	O
osip_list_remove	(*(struct(int,*(struct(*`,*`)))),int)->(int)
(	O
params	*(char)
,	O
0	int
)	O
;	O
osip_uri_param_free	(*(struct(*(char),*(char))))->(void)
(	O
u_param	*(struct(*(char),*(char)))
)	O
;	O
}	O
}	O
int	O
osip_uri_param_get_byname	(*(struct(int,*(struct(*`,*`)))),*(char),*(*(struct(*(char),*(char)))))->(int)
(	O
osip_list_t	struct
*	O
params	*(char)
,	O
char	O
*	O
pname	*(char)
,	O
osip_uri_param_t	struct
*	O
*	O
url_param	*(*(struct(*(char),*(char))))
)	O
{	O
size_t	long
pname_len	long
;	O
osip_uri_param_t	struct
*	O
u_param	*(struct(*(char),*(char)))
;	O
osip_list_iterator_t	struct
it	*(struct(*(struct(*(struct`),*(void))),*(*(struct(*`,*`))),*(struct(int,*(struct`))),int))
;	O
*	O
url_param	*(*(struct(*(char),*(char))))
=	O
NULL	O
;	O
if	O
(	O
pname	*(char)
==	O
NULL	O
)	O
return	O
OSIP_BADPARAMETER	O
;	O
pname_len	long
=	O
strlen	(*(char))->(long)
(	O
pname	*(char)
)	O
;	O
if	O
(	O
pname_len	long
<=	O
0	int
)	O
return	O
OSIP_BADPARAMETER	O
;	O
u_param	*(struct(*(char),*(char)))
=	O
(	O
osip_uri_param_t	struct
*	O
)	O
osip_list_get_first	(*(struct(int,*(struct(*`,*`)))),*(struct(*(struct(*`,*`)),*(*(struct`)),*(struct(int,*`)),int)))->(*(void))
(	O
params	*(char)
,	O
&	O
it	*(struct(*(struct(*(struct`),*(void))),*(*(struct(*`,*`))),*(struct(int,*(struct`))),int))
)	O
;	O
while	O
(	O
u_param	*(struct(*(char),*(char)))
!=	O
OSIP_SUCCESS	int
)	O
{	O
size_t	long
len	long
;	O
len	long
=	O
strlen	(*(char))->(long)
(	O
u_param	*(struct(*(char),*(char)))
->	O
gname	*(char)
)	O
;	O
if	O
(	O
pname_len	long
==	O
len	long
&&	O
osip_strncasecmp	(*(char),*(char),long)->(int)
(	O
u_param	*(struct(*(char),*(char)))
->	O
gname	*(char)
,	O
pname	*(char)
,	O
strlen	(*(char))->(long)
(	O
pname	*(char)
)	O
)	O
==	O
0	int
)	O
{	O
*	O
url_param	*(*(struct(*(char),*(char))))
=	O
u_param	*(struct(*(char),*(char)))
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
u_param	*(struct(*(char),*(char)))
=	O
(	O
osip_uri_param_t	struct
*	O
)	O
osip_list_get_next	(*(struct(*(struct(*`,*`)),*(*(struct`)),*(struct(int,*`)),int)))->(*(void))
(	O
&	O
it	*(struct(*(struct(*(struct`),*(void))),*(*(struct(*`,*`))),*(struct(int,*(struct`))),int))
)	O
;	O
}	O
return	O
OSIP_UNDEFINED_ERROR	O
;	O
}	O
int	O
osip_uri_param_clone	(*(struct(*(char),*(char))),*(*(struct(*(char),*(char)))))->(int)
(	O
const	O
osip_uri_param_t	struct
*	O
uparam	*(struct(*(char),*(char)))
,	O
osip_uri_param_t	struct
*	O
*	O
dest	*(char)
)	O
{	O
int	O
i	int
;	O
osip_uri_param_t	struct
*	O
up	*(struct(*(char),*(char)))
;	O
*	O
dest	*(char)
=	O
NULL	O
;	O
if	O
(	O
uparam	*(struct(*(char),*(char)))
==	O
NULL	O
)	O
return	O
OSIP_BADPARAMETER	O
;	O
if	O
(	O
uparam	*(struct(*(char),*(char)))
->	O
gname	*(char)
==	O
NULL	O
)	O
return	O
OSIP_BADPARAMETER	O
;	O
i	int
=	O
osip_uri_param_init	(*(*(struct(*(char),*(char)))))->(int)
(	O
&	O
up	*(struct(*(char),*(char)))
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
return	O
i	int
;	O
up	*(struct(*(char),*(char)))
->	O
gname	*(char)
=	O
osip_strdup	(*(char))->(*(char))
(	O
uparam	*(struct(*(char),*(char)))
->	O
gname	*(char)
)	O
;	O
if	O
(	O
uparam	*(struct(*(char),*(char)))
->	O
gvalue	*(char)
!=	O
NULL	O
)	O
up	*(struct(*(char),*(char)))
->	O
gvalue	*(char)
=	O
osip_strdup	(*(char))->(*(char))
(	O
uparam	*(struct(*(char),*(char)))
->	O
gvalue	*(char)
)	O
;	O
else	O
up	*(struct(*(char),*(char)))
->	O
gvalue	*(char)
=	O
NULL	O
;	O
*	O
dest	*(char)
=	O
up	*(struct(*(char),*(char)))
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
char	O
*	O
__osip_uri_escape_nonascii_and_nondef	(*(char),*(char))->(*(char))
(	O
const	O
char	O
*	O
string	*(char)
,	O
const	O
char	O
*	O
def	*(char)
)	O
{	O
size_t	long
alloc	long
=	O
strlen	(*(char))->(long)
(	O
string	*(char)
)	O
+	O
1	int
;	O
size_t	long
length	long
;	O
char	O
*	O
ns	*(char)
=	O
(	O
char	O
*	O
)	O
osip_malloc	O
(	O
alloc	long
)	O
;	O
unsigned	O
char	O
in	char
;	O
size_t	long
newlen	long
=	O
alloc	long
;	O
int	O
index	(*(char),int)->(*(char))
=	O
0	int
;	O
const	O
char	O
*	O
tmp	*(char)
;	O
int	O
i	int
;	O
if	O
(	O
ns	*(char)
==	O
NULL	O
)	O
return	O
NULL	O
;	O
length	long
=	O
alloc	long
-	O
1	int
;	O
while	O
(	O
length	long
--	O
)	O
{	O
in	char
=	O
*	O
string	*(char)
;	O
i	int
=	O
0	int
;	O
tmp	*(char)
=	O
NULL	O
;	O
if	O
(	O
osip_is_alphanum	O
(	O
in	char
)	O
)	O
tmp	*(char)
=	O
string	*(char)
;	O
else	O
{	O
for	O
(	O
;	O
def	*(char)
[	O
i	int
]	O
!=	O
'\0'	O
&&	O
def	*(char)
[	O
i	int
]	O
!=	O
in	char
;	O
i	int
++	O
)	O
{	O
}	O
if	O
(	O
def	*(char)
[	O
i	int
]	O
!=	O
'\0'	O
)	O
tmp	*(char)
=	O
string	*(char)
;	O
}	O
if	O
(	O
tmp	*(char)
==	O
NULL	O
)	O
{	O
newlen	long
+=	O
2	int
;	O
if	O
(	O
newlen	long
>	O
alloc	long
)	O
{	O
char	O
*	O
previous_ns	*(char)
;	O
alloc	long
*=	O
2	int
;	O
previous_ns	*(char)
=	O
ns	*(char)
;	O
ns	*(char)
=	O
osip_realloc	O
(	O
ns	*(char)
,	O
alloc	long
)	O
;	O
if	O
(	O
!	O
ns	*(char)
)	O
{	O
osip_free	O
(	O
previous_ns	*(char)
)	O
;	O
return	O
NULL	O
;	O
}	O
}	O
sprintf	(*(char),*(char))->(int)
(	O
&	O
ns	*(char)
[	O
index	(*(char),int)->(*(char))
]	O
,	O
"%%%02X"	*(char)
,	O
in	char
)	O
;	O
index	(*(char),int)->(*(char))
+=	O
3	int
;	O
}	O
else	O
{	O
ns	*(char)
[	O
index	(*(char),int)->(*(char))
++	O
]	O
=	O
in	char
;	O
}	O
string	*(char)
++	O
;	O
}	O
ns	*(char)
[	O
index	(*(char),int)->(*(char))
]	O
=	O
0	int
;	O
return	O
ns	*(char)
;	O
}	O
const	O
char	O
*	O
userinfo_def	*(char)
=	O
_MARK__USER_UNRESERVED_	*(char)
;	O
char	O
*	O
__osip_uri_escape_userinfo	(*(char))->(*(char))
(	O
const	O
char	O
*	O
string	*(char)
)	O
{	O
return	O
__osip_uri_escape_nonascii_and_nondef	(*(char),*(char))->(*(char))
(	O
string	*(char)
,	O
userinfo_def	*(char)
)	O
;	O
}	O
const	O
char	O
*	O
password_def	*(char)
=	O
_MARK__PWORD_UNRESERVED_	*(char)
;	O
char	O
*	O
__osip_uri_escape_password	(*(char))->(*(char))
(	O
const	O
char	O
*	O
string	*(char)
)	O
{	O
return	O
__osip_uri_escape_nonascii_and_nondef	(*(char),*(char))->(*(char))
(	O
string	*(char)
,	O
password_def	*(char)
)	O
;	O
}	O
const	O
char	O
*	O
uri_param_def	*(char)
=	O
_MARK__URI_PARAM_UNRESERVED_	*(char)
;	O
char	O
*	O
__osip_uri_escape_uri_param	(*(char))->(*(char))
(	O
char	O
*	O
string	*(char)
)	O
{	O
return	O
__osip_uri_escape_nonascii_and_nondef	(*(char),*(char))->(*(char))
(	O
string	*(char)
,	O
uri_param_def	*(char)
)	O
;	O
}	O
const	O
char	O
*	O
header_param_def	*(char)
=	O
_MARK__HEADER_PARAM_UNRESERVED_	*(char)
;	O
char	O
*	O
__osip_uri_escape_header_param	(*(char))->(*(char))
(	O
char	O
*	O
string	*(char)
)	O
{	O
return	O
__osip_uri_escape_nonascii_and_nondef	(*(char),*(char))->(*(char))
(	O
string	*(char)
,	O
header_param_def	*(char)
)	O
;	O
}	O
void	O
__osip_uri_unescape	(*(char))->(void)
(	O
char	O
*	O
string	*(char)
)	O
{	O
size_t	long
alloc	long
=	O
strlen	(*(char))->(long)
(	O
string	*(char)
)	O
+	O
1	int
;	O
unsigned	O
char	O
in	char
;	O
int	O
index	(*(char),int)->(*(char))
=	O
0	int
;	O
unsigned	O
int	O
hex	int
;	O
char	O
*	O
ptr	*(void)
;	O
ptr	*(void)
=	O
string	*(char)
;	O
while	O
(	O
--	O
alloc	long
>	O
0	int
)	O
{	O
in	char
=	O
*	O
ptr	*(void)
;	O
if	O
(	O
'%'	O
==	O
in	char
)	O
{	O
if	O
(	O
alloc	long
>	O
2	int
&&	O
sscanf	(*(char),*(char))->(int)
(	O
ptr	*(void)
+	O
1	int
,	O
"%02X"	*(char)
,	O
&	O
hex	int
)	O
==	O
1	int
)	O
{	O
in	char
=	O
(	O
unsigned	O
char	O
)	O
hex	int
;	O
if	O
(	O
*	O
(	O
ptr	*(void)
+	O
2	int
)	O
&&	O
(	O
(	O
*	O
(	O
ptr	*(void)
+	O
2	int
)	O
>=	O
'0'	O
&&	O
*	O
(	O
ptr	*(void)
+	O
2	int
)	O
<=	O
'9'	O
)	O
||	O
(	O
*	O
(	O
ptr	*(void)
+	O
2	int
)	O
>=	O
'a'	O
&&	O
*	O
(	O
ptr	*(void)
+	O
2	int
)	O
<=	O
'f'	O
)	O
||	O
(	O
*	O
(	O
ptr	*(void)
+	O
2	int
)	O
>=	O
'A'	O
&&	O
*	O
(	O
ptr	*(void)
+	O
2	int
)	O
<=	O
'F'	O
)	O
)	O
)	O
{	O
alloc	long
-=	O
2	int
;	O
ptr	*(void)
+=	O
2	int
;	O
}	O
else	O
{	O
alloc	long
-=	O
1	int
;	O
ptr	*(void)
+=	O
1	int
;	O
}	O
}	O
else	O
{	O
break	O
;	O
}	O
}	O
string	*(char)
[	O
index	(*(char),int)->(*(char))
++	O
]	O
=	O
in	char
;	O
ptr	*(void)
++	O
;	O
}	O
string	*(char)
[	O
index	(*(char),int)->(*(char))
]	O
=	O
0	int
;	O
}	O
int	O
osip_uri_to_str_canonical	(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(char))),*(*(char)))->(int)
(	O
const	O
osip_uri_t	struct
*	O
url	*(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(char))))
,	O
char	O
*	O
*	O
dest	*(char)
)	O
{	O
int	O
result	int
;	O
*	O
dest	*(char)
=	O
NULL	O
;	O
result	int
=	O
osip_uri_to_str	(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(char))),*(*(char)))->(int)
(	O
url	*(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(char))))
,	O
dest	*(char)
)	O
;	O
if	O
(	O
result	int
==	O
0	int
)	O
{	O
__osip_uri_unescape	(*(char))->(void)
(	O
*	O
dest	*(char)
)	O
;	O
}	O
return	O
result	int
;	O
}	O
