error_t	(*(int))->(int)
store_std_leaf_decode	(*(struct(*(int),*(int),*(long),*(char),int,int,int,int,long,long,long,long,*(int),*(int),*(long),*(char))),*((int,int,long,*(struct(long,long)),long,*(*(struct`)))->(int)),*(*(struct(int,*(struct`),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct`),*(*`),long,*(void)))))->(int)
(	O
struct	O
store_enc	struct(*(int),*(int),*(long),*(char),int,int,int,int,long,long,long,long,*(int),*(int),*(long),*(char))
*	O
enc	*(struct)
,	O
store_std_leaf_create_t	*((int,int,long,*(struct(long,long)),long,*(*(struct(int,*`,long,long,long,long,*`,int,long,long,long,int,int,int,*`,long,*`,*`,long,*`))))->(int))
create	*((int,int,long,*(struct(long,long)),long,*(*(struct(int,*`,long,long,long,long,*`,int,long,long,long,int,int,int,*`,long,*`,*`,long,*`))))->(int))
,	O
struct	O
store	struct(int,*(struct(long,long)),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct),*(*(struct(int,*(struct(long,long)),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct),*(*(struct`)),long,*(void)))),long,*(void))
*	O
*	O
store	struct(int,*(struct(long,long)),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct),*(*(struct(int,*(struct(long,long)),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct),*(*(struct`)),long,*(void)))),long,*(void))
)	O
{	O
char	O
*	O
misc	*(void)
,	O
*	O
name	*(char)
;	O
error_t	(*(int))->(int)
err	(*(int))->(int)
;	O
int	O
flags	int
;	O
mach_port_t	O
port	int
;	O
size_t	long
block_size	long
,	O
num_runs	long
,	O
name_len	long
,	O
misc_len	long
;	O
error_t	(*(int))->(int)
call_create	O
(	O
const	O
struct	O
store_run	struct(long,long)
*	O
runs	*(struct(long,long))
,	O
size_t	long
num_runs	long
)	O
{	O
return	O
(	O
*	O
create	*((int,int,long,*(struct(long,long)),long,*(*(struct(int,*`,long,long,long,long,*`,int,long,long,long,int,int,int,*`,long,*`,*`,long,*`))))->(int))
)	O
(	O
port	int
,	O
flags	int
,	O
block_size	long
,	O
runs	*(struct(long,long))
,	O
num_runs	long
,	O
store	struct(int,*(struct(long,long)),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct),*(*(struct(int,*(struct(long,long)),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct),*(*(struct`)),long,*(void)))),long,*(void))
)	O
;	O
}	O
if	O
(	O
enc	*(struct)
->	O
cur_int	long
+	O
6	int
>	O
enc	*(struct)
->	O
num_ints	int
||	O
enc	*(struct)
->	O
cur_port	long
+	O
1	int
>	O
enc	*(struct)
->	O
num_ports	int
)	O
return	O
EINVAL	O
;	O
enc	*(struct)
->	O
cur_int	long
++	O
;	O
flags	int
=	O
enc	*(struct)
->	O
ints	*(int)
[	O
enc	*(struct)
->	O
cur_int	long
++	O
]	O
;	O
block_size	long
=	O
enc	*(struct)
->	O
ints	*(int)
[	O
enc	*(struct)
->	O
cur_int	long
++	O
]	O
;	O
num_runs	long
=	O
enc	*(struct)
->	O
ints	*(int)
[	O
enc	*(struct)
->	O
cur_int	long
++	O
]	O
;	O
name_len	long
=	O
enc	*(struct)
->	O
ints	*(int)
[	O
enc	*(struct)
->	O
cur_int	long
++	O
]	O
;	O
misc_len	long
=	O
enc	*(struct)
->	O
ints	*(int)
[	O
enc	*(struct)
->	O
cur_int	long
++	O
]	O
;	O
if	O
(	O
enc	*(struct)
->	O
cur_offset	long
+	O
num_runs	long
*	O
2	int
>	O
enc	*(struct)
->	O
num_offsets	int
||	O
enc	*(struct)
->	O
cur_data	long
+	O
name_len	long
+	O
misc_len	long
>	O
enc	*(struct)
->	O
data_len	int
)	O
return	O
EINVAL	O
;	O
if	O
(	O
name_len	long
>	O
0	int
&&	O
enc	*(struct)
->	O
data	*(char)
[	O
enc	*(struct)
->	O
cur_data	long
+	O
name_len	long
-	O
1	int
]	O
!=	O
'\0'	O
)	O
return	O
EINVAL	O
;	O
if	O
(	O
name_len	long
>	O
0	int
)	O
{	O
name	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
enc	*(struct)
->	O
data	*(char)
+	O
enc	*(struct)
->	O
cur_data	long
)	O
;	O
if	O
(	O
!	O
name	*(char)
)	O
return	O
ENOMEM	O
;	O
enc	*(struct)
->	O
cur_data	long
+=	O
name_len	long
;	O
}	O
else	O
name	*(char)
=	O
0	int
;	O
if	O
(	O
misc_len	long
>	O
0	int
)	O
{	O
misc	*(void)
=	O
malloc	(long)->(*(void))
(	O
misc_len	long
)	O
;	O
if	O
(	O
!	O
misc	*(void)
)	O
{	O
if	O
(	O
name	*(char)
)	O
free	(*(void))->(void)
(	O
name	*(char)
)	O
;	O
return	O
ENOMEM	O
;	O
}	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
misc	*(void)
,	O
enc	*(struct)
->	O
data	*(char)
+	O
enc	*(struct)
->	O
cur_data	long
+	O
name_len	long
,	O
misc_len	long
)	O
;	O
enc	*(struct)
->	O
cur_data	long
+=	O
misc_len	long
;	O
}	O
else	O
misc	*(void)
=	O
0	int
;	O
port	int
=	O
enc	*(struct)
->	O
ports	*(int)
[	O
enc	*(struct)
->	O
cur_port	long
++	O
]	O
;	O
err	(*(int))->(int)
=	O
store_with_decoded_runs	(*(struct(*(int),*(int),*(long),*(char),int,int,int,int,long,long,long,long,*(int),*(int),*(long),*(char))),long,*((*(struct(long,long)),long)->(int)))->(int)
(	O
enc	*(struct)
,	O
num_runs	long
,	O
call_create	O
)	O
;	O
if	O
(	O
err	(*(int))->(int)
)	O
{	O
mach_port_deallocate	()->(int)
(	O
mach_task_self	()->(int)
(	O
)	O
,	O
port	int
)	O
;	O
if	O
(	O
misc	*(void)
)	O
free	(*(void))->(void)
(	O
misc	*(void)
)	O
;	O
if	O
(	O
name	*(char)
)	O
free	(*(void))->(void)
(	O
name	*(char)
)	O
;	O
}	O
else	O
{	O
(	O
*	O
store	struct(int,*(struct(long,long)),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct),*(*(struct(int,*(struct(long,long)),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct),*(*(struct`)),long,*(void)))),long,*(void))
)	O
->	O
flags	int
=	O
flags	int
;	O
(	O
*	O
store	struct(int,*(struct(long,long)),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct),*(*(struct(int,*(struct(long,long)),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct),*(*(struct`)),long,*(void)))),long,*(void))
)	O
->	O
name	*(char)
=	O
name	*(char)
;	O
(	O
*	O
store	struct(int,*(struct(long,long)),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct),*(*(struct(int,*(struct(long,long)),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct),*(*(struct`)),long,*(void)))),long,*(void))
)	O
->	O
misc	*(void)
=	O
misc	*(void)
;	O
(	O
*	O
store	struct(int,*(struct(long,long)),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct),*(*(struct(int,*(struct(long,long)),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct),*(*(struct`)),long,*(void)))),long,*(void))
)	O
->	O
misc_len	long
=	O
misc_len	long
;	O
}	O
return	O
err	(*(int))->(int)
;	O
}	O
error_t	(*(int))->(int)
store_with_decoded_runs	(*(struct(*(int),*(int),*(long),*(char),int,int,int,int,long,long,long,long,*(int),*(int),*(long),*(char))),long,*((*(struct(long,long)),long)->(int)))->(int)
(	O
struct	O
store_enc	struct(*(int),*(int),*(long),*(char),int,int,int,int,long,long,long,long,*(int),*(int),*(long),*(char))
*	O
enc	*(struct)
,	O
size_t	long
num_runs	long
,	O
error_t	(*(int))->(int)
(	O
*	O
fun	*((*(struct(long,long)),long)->(int))
)	O
(	O
const	O
struct	O
store_run	struct(long,long)
*	O
runs	*(struct(long,long))
,	O
size_t	long
num_runs	long
)	O
)	O
{	O
int	O
i	int
;	O
error_t	(*(int))->(int)
err	(*(int))->(int)
;	O
if	O
(	O
num_runs	long
<=	O
MAX_STACK_RUNS	O
)	O
{	O
struct	O
store_run	struct(long,long)
runs	*(struct(long,long))
[	O
num_runs	long
]	O
;	O
off_t	long
*	O
e	*(long)
=	O
enc	*(struct)
->	O
offsets	*(long)
+	O
enc	*(struct)
->	O
cur_offset	long
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
num_runs	long
;	O
i	int
++	O
)	O
{	O
runs	*(struct(long,long))
[	O
i	int
]	O
.	O
start	long
=	O
*	O
e	*(long)
++	O
;	O
runs	*(struct(long,long))
[	O
i	int
]	O
.	O
length	long
=	O
*	O
e	*(long)
++	O
;	O
}	O
enc	*(struct)
->	O
cur_offset	long
=	O
e	*(long)
-	O
enc	*(struct)
->	O
offsets	*(long)
;	O
err	(*(int))->(int)
=	O
(	O
*	O
fun	*((*(struct(long,long)),long)->(int))
)	O
(	O
runs	*(struct(long,long))
,	O
num_runs	long
)	O
;	O
}	O
else	O
{	O
struct	O
store_run	struct(long,long)
*	O
runs	*(struct(long,long))
=	O
malloc	(long)->(*(void))
(	O
num_runs	long
*	O
sizeof	O
(	O
struct	O
store_run	struct(long,long)
)	O
)	O
;	O
if	O
(	O
runs	*(struct(long,long))
)	O
{	O
off_t	long
*	O
e	*(long)
=	O
enc	*(struct)
->	O
offsets	*(long)
+	O
enc	*(struct)
->	O
cur_offset	long
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
num_runs	long
;	O
i	int
++	O
)	O
{	O
runs	*(struct(long,long))
[	O
i	int
]	O
.	O
start	long
=	O
*	O
e	*(long)
++	O
;	O
runs	*(struct(long,long))
[	O
i	int
]	O
.	O
length	long
=	O
*	O
e	*(long)
++	O
;	O
}	O
enc	*(struct)
->	O
cur_offset	long
=	O
e	*(long)
-	O
enc	*(struct)
->	O
offsets	*(long)
;	O
err	(*(int))->(int)
=	O
(	O
*	O
fun	*((*(struct(long,long)),long)->(int))
)	O
(	O
runs	*(struct(long,long))
,	O
num_runs	long
)	O
;	O
free	(*(void))->(void)
(	O
runs	*(struct(long,long))
)	O
;	O
}	O
else	O
err	(*(int))->(int)
=	O
ENOMEM	O
;	O
}	O
return	O
err	(*(int))->(int)
;	O
}	O
error_t	(*(int))->(int)
store_decode	(*(struct(*(int),*(int),*(long),*(char),int,int,int,int,long,long,long,long,*(int),*(int),*(long),*(char))),*(*(struct(enum,*(char),*((*`,long,long,int,*`,*`)->(int)),int,*((*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,int)->(int)),*((*`,int)->(int)),*((*`)->(void)),*((*`,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,int,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,*`)->(int))))),*(*(struct(int,*(struct`),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct`),*(*`),long,*(void)))))->(int)
(	O
struct	O
store_enc	struct(*(int),*(int),*(long),*(char),int,int,int,int,long,long,long,long,*(int),*(int),*(long),*(char))
*	O
enc	*(struct)
,	O
const	O
struct	O
store_class	struct(enum,*(char),*((*(struct(int,*(struct`),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct`),*(*`),long,*(void))),long,long,int,*(*(void)),*(int))->(int)),int,*((*(struct(int,*(struct`),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct`),*(*`),long,*(void))),long)->(int)),*((*(struct(int,*(struct`),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct`),*(*`),long,*(void))),*(struct))->(int)),*((*(struct(int,*(struct`),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct`),*(*`),long,*(void))),*(struct))->(int)),*((*(struct),*(*(struct(enum,*`,*`,int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`))),*(*(struct(int,*`,long,long,long,long,*`,int,long,long,long,int,int,int,*`,long,*`,*`,long,*`))))->(int)),*((*(struct(int,*(struct`),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct`),*(*`),long,*(void))),int)->(int)),*((*(struct(int,*(struct`),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct`),*(*`),long,*(void))),int)->(int)),*((*(struct(int,*(struct`),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct`),*(*`),long,*(void))))->(void)),*((*(struct(int,*(struct`),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct`),*(*`),long,*(void))),*(struct(int,*(struct`),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct`),*(*`),long,*(void))))->(int)),*((*(struct(int,*(struct`),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct`),*(*`),long,*(void))),*(struct(long,long)),long,*(*(struct(int,*`,long,long,long,long,*`,int,long,long,long,int,int,int,*`,long,*`,*`,long,*`))))->(int)),*((*(char),int,*(*(struct(enum,*`,*`,int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`))),*(*(struct(int,*`,long,long,long,long,*`,int,long,long,long,int,int,int,*`,long,*`,*`,long,*`))))->(int)),*((*(char),*(*(struct(enum,*`,*`,int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`))))->(int)),*((*(struct(int,*(struct`),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct`),*(*`),long,*(void))),int,*(int))->(int)))
*	O
const	O
*	O
classes	*(*(struct(enum,*(char),*((*`,long,long,int,*`,*`)->(int)),int,*((*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)))))
,	O
struct	O
store	struct(int,*(struct(long,long)),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct),*(*(struct(int,*(struct(long,long)),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct),*(*(struct`)),long,*(void)))),long,*(void))
*	O
*	O
store	struct(int,*(struct(long,long)),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct),*(*(struct(int,*(struct(long,long)),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct),*(*(struct`)),long,*(void)))),long,*(void))
)	O
{	O
const	O
struct	O
store_class	struct(enum,*(char),*((*(struct(int,*(struct`),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct`),*(*`),long,*(void))),long,long,int,*(*(void)),*(int))->(int)),int,*((*(struct(int,*(struct`),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct`),*(*`),long,*(void))),long)->(int)),*((*(struct(int,*(struct`),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct`),*(*`),long,*(void))),*(struct))->(int)),*((*(struct(int,*(struct`),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct`),*(*`),long,*(void))),*(struct))->(int)),*((*(struct),*(*(struct(enum,*`,*`,int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`))),*(*(struct(int,*`,long,long,long,long,*`,int,long,long,long,int,int,int,*`,long,*`,*`,long,*`))))->(int)),*((*(struct(int,*(struct`),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct`),*(*`),long,*(void))),int)->(int)),*((*(struct(int,*(struct`),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct`),*(*`),long,*(void))),int)->(int)),*((*(struct(int,*(struct`),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct`),*(*`),long,*(void))))->(void)),*((*(struct(int,*(struct`),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct`),*(*`),long,*(void))),*(struct(int,*(struct`),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct`),*(*`),long,*(void))))->(int)),*((*(struct(int,*(struct`),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct`),*(*`),long,*(void))),*(struct(long,long)),long,*(*(struct(int,*`,long,long,long,long,*`,int,long,long,long,int,int,int,*`,long,*`,*`,long,*`))))->(int)),*((*(char),int,*(*(struct(enum,*`,*`,int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`))),*(*(struct(int,*`,long,long,long,long,*`,int,long,long,long,int,int,int,*`,long,*`,*`,long,*`))))->(int)),*((*(char),*(*(struct(enum,*`,*`,int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`))))->(int)),*((*(struct(int,*(struct`),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct`),*(*`),long,*(void))),int,*(int))->(int)))
*	O
const	O
*	O
cl	*(*(struct(enum,*(char),*((*`,long,long,int,*`,*`)->(int)),int,*((*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,int)->(int)),*((*`,int)->(int)),*((*`)->(void)),*((*`,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,int,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,*`)->(int)))))
;	O
if	O
(	O
enc	*(struct)
->	O
cur_int	long
>=	O
enc	*(struct)
->	O
num_ints	int
)	O
return	O
EINVAL	O
;	O
if	O
(	O
enc	*(struct)
->	O
ints	*(int)
[	O
enc	*(struct)
->	O
cur_int	long
]	O
==	O
STORAGE_NETWORK	O
)	O
return	O
store_url_decode	(*(struct),*(*(struct(enum,*(char),*((*`,long,long,int,*`,*`)->(int)),int,*((*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,int)->(int)),*((*`,int)->(int)),*((*`)->(void)),*((*`,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,int,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,*`)->(int))))),*(*(struct(int,*(struct`),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct`),*(*`),long,*(void)))))->(int)
(	O
enc	*(struct)
,	O
classes	*(*(struct(enum,*(char),*((*`,long,long,int,*`,*`)->(int)),int,*((*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)))))
,	O
store	struct(int,*(struct(long,long)),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct),*(*(struct(int,*(struct(long,long)),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct),*(*(struct`)),long,*(void)))),long,*(void))
)	O
;	O
for	O
(	O
cl	*(*(struct(enum,*(char),*((*`,long,long,int,*`,*`)->(int)),int,*((*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,int)->(int)),*((*`,int)->(int)),*((*`)->(void)),*((*`,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,int,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,*`)->(int)))))
=	O
classes	*(*(struct(enum,*(char),*((*`,long,long,int,*`,*`)->(int)),int,*((*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)))))
?	O
:	O
__start_store_std_classes	array(*(struct(enum,*(char),*((*(struct`),long,long,int,*(*`),*(int))->(int)),int,*((*(struct`),long)->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(*`),*(*`))->(int)),*((*(struct`),int)->(int)),*((*(struct`),int)->(int)),*((*(struct`))->(void)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(struct`),long,*(*`))->(int)),*((*(char),int,*(*`),*(*`))->(int)),*((*(char),*(*`))->(int)),*((*(struct`),int,*(int))->(int)))))
;	O
classes	*(*(struct(enum,*(char),*((*`,long,long,int,*`,*`)->(int)),int,*((*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)))))
?	O
*	O
cl	*(*(struct(enum,*(char),*((*`,long,long,int,*`,*`)->(int)),int,*((*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,int)->(int)),*((*`,int)->(int)),*((*`)->(void)),*((*`,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,int,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,*`)->(int)))))
!=	O
0	int
:	O
cl	*(*(struct(enum,*(char),*((*`,long,long,int,*`,*`)->(int)),int,*((*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,int)->(int)),*((*`,int)->(int)),*((*`)->(void)),*((*`,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,int,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,*`)->(int)))))
<	O
__stop_store_std_classes	array(*(struct(enum,*(char),*((*(struct`),long,long,int,*(*`),*(int))->(int)),int,*((*(struct`),long)->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(*`),*(*`))->(int)),*((*(struct`),int)->(int)),*((*(struct`),int)->(int)),*((*(struct`))->(void)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(struct`),long,*(*`))->(int)),*((*(char),int,*(*`),*(*`))->(int)),*((*(char),*(*`))->(int)),*((*(struct`),int,*(int))->(int)))))
;	O
++	O
cl	*(*(struct(enum,*(char),*((*`,long,long,int,*`,*`)->(int)),int,*((*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,int)->(int)),*((*`,int)->(int)),*((*`)->(void)),*((*`,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,int,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,*`)->(int)))))
)	O
if	O
(	O
(	O
*	O
cl	*(*(struct(enum,*(char),*((*`,long,long,int,*`,*`)->(int)),int,*((*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,int)->(int)),*((*`,int)->(int)),*((*`)->(void)),*((*`,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,int,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,*`)->(int)))))
)	O
->	O
id	enum
==	O
enc	*(struct)
->	O
ints	*(int)
[	O
enc	*(struct)
->	O
cur_int	long
]	O
)	O
{	O
if	O
(	O
(	O
*	O
cl	*(*(struct(enum,*(char),*((*`,long,long,int,*`,*`)->(int)),int,*((*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,int)->(int)),*((*`,int)->(int)),*((*`)->(void)),*((*`,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,int,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,*`)->(int)))))
)	O
->	O
decode	*((*(struct),*(*(struct(enum,*`,*`,int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`))),*(*(struct(int,*`,long,long,long,long,*`,int,long,long,long,int,int,int,*`,long,*`,*`,long,*`))))->(int))
)	O
return	O
(	O
*	O
(	O
*	O
cl	*(*(struct(enum,*(char),*((*`,long,long,int,*`,*`)->(int)),int,*((*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,int)->(int)),*((*`,int)->(int)),*((*`)->(void)),*((*`,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,int,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,*`)->(int)))))
)	O
->	O
decode	*((*(struct),*(*(struct(enum,*`,*`,int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`))),*(*(struct(int,*`,long,long,long,long,*`,int,long,long,long,int,int,int,*`,long,*`,*`,long,*`))))->(int))
)	O
(	O
enc	*(struct)
,	O
classes	*(*(struct(enum,*(char),*((*`,long,long,int,*`,*`)->(int)),int,*((*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)))))
,	O
store	struct(int,*(struct(long,long)),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct),*(*(struct(int,*(struct(long,long)),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct),*(*(struct`)),long,*(void)))),long,*(void))
)	O
;	O
else	O
return	O
EOPNOTSUPP	O
;	O
}	O
if	O
(	O
!	O
classes	*(*(struct(enum,*(char),*((*`,long,long,int,*`,*`)->(int)),int,*((*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)))))
&&	O
store_module_decode	(*(struct),*(*(struct(enum,*(char),*((*`,long,long,int,*`,*`)->(int)),int,*((*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,int)->(int)),*((*`,int)->(int)),*((*`)->(void)),*((*`,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,int,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,*`)->(int))))),*(*(struct(int,*(struct`),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct`),*(*`),long,*(void)))))->(int)
)	O
{	O
error_t	(*(int))->(int)
err	(*(int))->(int)
=	O
store_module_decode	(*(struct),*(*(struct(enum,*(char),*((*`,long,long,int,*`,*`)->(int)),int,*((*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,int)->(int)),*((*`,int)->(int)),*((*`)->(void)),*((*`,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,int,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,*`)->(int))))),*(*(struct(int,*(struct`),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct`),*(*`),long,*(void)))))->(int)
(	O
enc	*(struct)
,	O
classes	*(*(struct(enum,*(char),*((*`,long,long,int,*`,*`)->(int)),int,*((*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)))))
,	O
store	struct(int,*(struct(long,long)),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct),*(*(struct(int,*(struct(long,long)),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct),*(*(struct`)),long,*(void)))),long,*(void))
)	O
;	O
if	O
(	O
err	(*(int))->(int)
!=	O
ENOENT	O
)	O
return	O
err	(*(int))->(int)
;	O
}	O
return	O
EINVAL	O
;	O
}	O
