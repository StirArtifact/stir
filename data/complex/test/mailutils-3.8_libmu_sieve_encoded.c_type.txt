typedef	O
int	O
(	O
*	O
convfun	*((*(char),long,*(long),*(struct))->(int))
)	O
(	O
char	O
const	O
*	O
str	*(char)
,	O
size_t	long
len	long
,	O
size_t	long
*	O
ncons	*(long)
,	O
mu_opool_t	*(struct)
pool	*(struct)
)	O
;	O
static	O
int	O
hexconv	(*(char),long,*(long),*(struct))->(int)
(	O
char	O
const	O
*	O
str	*(char)
,	O
size_t	long
len	long
,	O
size_t	long
*	O
ncons	*(long)
,	O
mu_opool_t	*(struct)
pool	*(struct)
)	O
;	O
static	O
int	O
uniconv	(*(char),long,*(long),*(struct))->(int)
(	O
char	O
const	O
*	O
str	*(char)
,	O
size_t	long
len	long
,	O
size_t	long
*	O
ncons	*(long)
,	O
mu_opool_t	*(struct)
pool	*(struct)
)	O
;	O
struct	O
convertor	struct(*(char),long,*((*(char),long,*(long),*(struct))->(int)))
{	O
char	O
const	O
*	O
pfx	*(char)
;	O
size_t	long
len	long
;	O
convfun	*((*(char),long,*(long),*(struct))->(int))
fun	*((*(char),*(void))->(int))
;	O
}	O
;	O
static	O
struct	O
convertor	struct(*(char),long,*((*(char),long,*(long),*(struct))->(int)))
conv	array(struct(*(char),long,*((*(char),long,*(long),*(struct))->(int))))
[	O
]	O
=	O
{	O
{	O
"hex"	*(char)
,	O
3	int
,	O
hexconv	(*(char),long,*(long),*(struct))->(int)
}	O
,	O
{	O
"unicode"	*(char)
,	O
7	int
,	O
uniconv	(*(char),long,*(long),*(struct))->(int)
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
static	O
convfun	*((*(char),long,*(long),*(struct))->(int))
findconv	(*(*(char)),*(long))->(*((*(char),long,*(long),*(struct))->(int)))
(	O
char	O
const	O
*	O
*	O
pstr	*(*(char))
,	O
size_t	long
*	O
plen	*(long)
)	O
{	O
struct	O
convertor	struct(*(char),long,*((*(char),long,*(long),*(struct))->(int)))
*	O
cp	*(struct(int,int,array(char),array(char)))
;	O
char	O
const	O
*	O
str	*(char)
=	O
*	O
pstr	*(*(char))
;	O
size_t	long
len	long
=	O
*	O
plen	*(long)
;	O
for	O
(	O
cp	*(struct(int,int,array(char),array(char)))
=	O
conv	array(struct(*(char),long,*((*(char),long,*(long),*(struct))->(int))))
;	O
cp	*(struct(int,int,array(char),array(char)))
->	O
pfx	*(char)
;	O
cp	*(struct(int,int,array(char),array(char)))
++	O
)	O
{	O
if	O
(	O
len	long
>	O
cp	*(struct(int,int,array(char),array(char)))
->	O
len	long
&&	O
strncasecmp	(*(char),*(char),long)->(int)
(	O
str	*(char)
,	O
cp	*(struct(int,int,array(char),array(char)))
->	O
pfx	*(char)
,	O
cp	*(struct(int,int,array(char),array(char)))
->	O
len	long
)	O
==	O
0	int
&&	O
str	*(char)
[	O
cp	*(struct(int,int,array(char),array(char)))
->	O
len	long
]	O
==	O
':'	O
)	O
{	O
*	O
pstr	*(*(char))
+=	O
cp	*(struct(int,int,array(char),array(char)))
->	O
len	long
+	O
1	int
;	O
*	O
plen	*(long)
-=	O
cp	*(struct(int,int,array(char),array(char)))
->	O
len	long
+	O
1	int
;	O
return	O
cp	*(struct(int,int,array(char),array(char)))
->	O
fun	*((*(char),*(void))->(int))
;	O
}	O
}	O
return	O
NULL	O
;	O
}	O
int	O
mu_i_sv_expand_encoded_char	(*(char),long,*(*(char)),*(void))->(int)
(	O
char	O
const	O
*	O
input	*(char)
,	O
size_t	long
len	long
,	O
char	O
*	O
*	O
exp	*(char)
,	O
void	O
*	O
data	*(void)
)	O
{	O
int	O
rc	int
;	O
convfun	*((*(char),long,*(long),*(struct))->(int))
fn	*((*(void))->(void))
;	O
mu_opool_t	*(struct)
pool	*(struct)
;	O
fn	*((*(void))->(void))
=	O
findconv	(*(*(char)),*(long))->(*((*(char),long,*(long),*(struct))->(int)))
(	O
&	O
input	*(char)
,	O
&	O
len	long
)	O
;	O
if	O
(	O
!	O
fn	*((*(void))->(void))
)	O
return	O
MU_ERR_NOENT	O
;	O
rc	int
=	O
mu_opool_create	(*(*(struct)),int)->(int)
(	O
&	O
pool	*(struct)
,	O
MU_OPOOL_DEFAULT	int
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
while	O
(	O
rc	int
==	O
0	int
&&	O
len	long
>	O
0	int
)	O
{	O
if	O
(	O
mu_isblank	O
(	O
*	O
input	*(char)
)	O
)	O
{	O
++	O
input	*(char)
;	O
--	O
len	long
;	O
}	O
else	O
if	O
(	O
mu_isxdigit	O
(	O
*	O
input	*(char)
)	O
)	O
{	O
size_t	long
n	*(long)
;	O
rc	int
=	O
fn	*((*(void))->(void))
(	O
input	*(char)
,	O
len	long
,	O
&	O
n	*(long)
,	O
pool	*(struct)
)	O
;	O
if	O
(	O
rc	int
)	O
break	O
;	O
input	*(char)
+=	O
n	*(long)
;	O
len	long
-=	O
n	*(long)
;	O
}	O
else	O
{	O
rc	int
=	O
EILSEQ	int
;	O
break	O
;	O
}	O
}	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
size_t	long
len	long
;	O
char	O
*	O
p	*(char)
=	O
mu_opool_finish	(*(struct),*(long))->(*(void))
(	O
pool	*(struct)
,	O
&	O
len	long
)	O
;	O
char	O
*	O
res	*(int)
;	O
res	*(int)
=	O
malloc	(long)->(*(void))
(	O
len	long
+	O
1	int
)	O
;	O
if	O
(	O
!	O
res	*(int)
)	O
rc	int
=	O
errno	O
;	O
else	O
{	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
res	*(int)
,	O
p	*(char)
,	O
len	long
)	O
;	O
res	*(int)
[	O
len	long
]	O
=	O
0	int
;	O
*	O
exp	*(char)
=	O
res	*(int)
;	O
}	O
}	O
mu_opool_destroy	(*(*(struct)))->(void)
(	O
&	O
pool	*(struct)
)	O
;	O
return	O
rc	int
;	O
}	O
static	O
int	O
hexconv	(*(char),long,*(long),*(struct))->(int)
(	O
char	O
const	O
*	O
str	*(char)
,	O
size_t	long
len	long
,	O
size_t	long
*	O
ncons	*(long)
,	O
mu_opool_t	*(struct)
pool	*(struct)
)	O
{	O
char	O
c	char
;	O
if	O
(	O
len	long
<	O
2	int
)	O
return	O
EILSEQ	int
;	O
else	O
{	O
c	char
=	O
mu_hex2ul	(char)->(long)
(	O
*	O
str	*(char)
)	O
;	O
++	O
str	*(char)
;	O
if	O
(	O
!	O
mu_isxdigit	O
(	O
*	O
str	*(char)
)	O
)	O
return	O
EILSEQ	int
;	O
c	char
=	O
(	O
c	char
<<	O
4	int
)	O
+	O
mu_hex2ul	(char)->(long)
(	O
*	O
str	*(char)
)	O
;	O
mu_opool_append_char	(*(struct),char)->(int)
(	O
pool	*(struct)
,	O
c	char
)	O
;	O
}	O
*	O
ncons	*(long)
=	O
2	int
;	O
return	O
0	int
;	O
}	O
static	O
int	O
utf8_wctomb	(int,*(struct))->(int)
(	O
unsigned	O
int	O
wc	int
,	O
mu_opool_t	*(struct)
pool	*(struct)
)	O
{	O
int	O
count	long
;	O
char	O
r	array(char)
[	O
6	int
]	O
;	O
if	O
(	O
wc	int
<	O
0x80	int
)	O
count	long
=	O
1	int
;	O
else	O
if	O
(	O
wc	int
<	O
0x800	int
)	O
count	long
=	O
2	int
;	O
else	O
if	O
(	O
wc	int
<	O
0x10000	int
)	O
count	long
=	O
3	int
;	O
else	O
if	O
(	O
wc	int
<	O
0x200000	int
)	O
count	long
=	O
4	int
;	O
else	O
if	O
(	O
wc	int
<	O
0x4000000	int
)	O
count	long
=	O
5	int
;	O
else	O
if	O
(	O
wc	int
<=	O
0x7fffffff	int
)	O
count	long
=	O
6	int
;	O
else	O
return	O
EILSEQ	int
;	O
switch	O
(	O
count	long
)	O
{	O
case	O
6	int
:	O
r	array(char)
[	O
5	int
]	O
=	O
0x80	int
|	O
(	O
wc	int
&	O
0x3f	int
)	O
;	O
wc	int
=	O
wc	int
>>	O
6	int
;	O
wc	int
|=	O
0x4000000	int
;	O
case	O
5	int
:	O
r	array(char)
[	O
4	int
]	O
=	O
0x80	int
|	O
(	O
wc	int
&	O
0x3f	int
)	O
;	O
wc	int
=	O
wc	int
>>	O
6	int
;	O
wc	int
|=	O
0x200000	int
;	O
case	O
4	int
:	O
r	array(char)
[	O
3	int
]	O
=	O
0x80	int
|	O
(	O
wc	int
&	O
0x3f	int
)	O
;	O
wc	int
=	O
wc	int
>>	O
6	int
;	O
wc	int
|=	O
0x10000	int
;	O
case	O
3	int
:	O
r	array(char)
[	O
2	int
]	O
=	O
0x80	int
|	O
(	O
wc	int
&	O
0x3f	int
)	O
;	O
wc	int
=	O
wc	int
>>	O
6	int
;	O
wc	int
|=	O
0x800	int
;	O
case	O
2	int
:	O
r	array(char)
[	O
1	int
]	O
=	O
0x80	int
|	O
(	O
wc	int
&	O
0x3f	int
)	O
;	O
wc	int
=	O
wc	int
>>	O
6	int
;	O
wc	int
|=	O
0xc0	int
;	O
case	O
1	int
:	O
r	array(char)
[	O
0	int
]	O
=	O
wc	int
;	O
}	O
mu_opool_append	(*(struct),*(void),long)->(int)
(	O
pool	*(struct)
,	O
r	array(char)
,	O
count	long
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
uniconv	(*(char),long,*(long),*(struct))->(int)
(	O
char	O
const	O
*	O
str	*(char)
,	O
size_t	long
len	long
,	O
size_t	long
*	O
ncons	*(long)
,	O
mu_opool_t	*(struct)
pool	*(struct)
)	O
{	O
unsigned	O
int	O
wc	int
=	O
0	int
;	O
size_t	long
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
len	long
;	O
i	long
++	O
)	O
{	O
if	O
(	O
i	long
>=	O
12	int
)	O
return	O
EILSEQ	int
;	O
if	O
(	O
!	O
mu_isxdigit	O
(	O
str	*(char)
[	O
i	long
]	O
)	O
)	O
break	O
;	O
wc	int
=	O
(	O
wc	int
<<	O
4	int
)	O
+	O
mu_hex2ul	(char)->(long)
(	O
str	*(char)
[	O
i	long
]	O
)	O
;	O
}	O
*	O
ncons	*(long)
=	O
i	long
;	O
return	O
utf8_wctomb	(int,*(struct))->(int)
(	O
wc	int
,	O
pool	*(struct)
)	O
;	O
}	O
