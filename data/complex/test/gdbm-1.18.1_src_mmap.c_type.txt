static	O
inline	O
off_t	long
SUM_FILE_SIZE	(*(struct(*(char),int,int,int,int,int,int,int,int,int,int,*(char),enum(int,int,int,int),*((*`)->(void)),int,*(struct(int,int,long,int,int,int,int,long,struct`)),*(long),*(struct(*`,long,char,struct`)),long,long,*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int)))),int,*(struct(*`,long,char,struct`)),int,int,int,int,long,*(void),long,long,long)),long)->(long)
(	O
GDBM_FILE	*(struct)
dbf	*(struct)
,	O
off_t	long
delta	long
)	O
{	O
if	O
(	O
delta	long
>=	O
0	int
&&	O
off_t_sum_ok	(long,long)->(long)
(	O
dbf	*(struct)
->	O
mapped_off	long
,	O
dbf	*(struct)
->	O
mapped_size	long
)	O
&&	O
off_t_sum_ok	(long,long)->(long)
(	O
dbf	*(struct)
->	O
mapped_off	long
+	O
dbf	*(struct)
->	O
mapped_size	long
,	O
delta	long
)	O
)	O
return	O
dbf	*(struct)
->	O
mapped_off	long
+	O
dbf	*(struct)
->	O
mapped_size	long
+	O
delta	long
;	O
return	O
-	O
1	int
;	O
}	O
int	O
_gdbm_file_size	(*(struct(*(char),int,int,int,int,int,int,int,int,int,int,*(char),enum(int,int,int,int),*((*`)->(void)),int,*(struct(int,int,long,int,int,int,int,long,struct`)),*(long),*(struct(*`,long,char,struct`)),long,long,*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int)))),int,*(struct(*`,long,char,struct`)),int,int,int,int,long,*(void),long,long,long)),*(long))->(int)
(	O
GDBM_FILE	*(struct)
dbf	*(struct)
,	O
off_t	long
*	O
psize	*(long)
)	O
{	O
struct	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
sb	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
;	O
if	O
(	O
fstat	(int,*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))))->(int)
(	O
dbf	*(struct)
->	O
desc	int
,	O
&	O
sb	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
)	O
)	O
{	O
GDBM_SET_ERRNO	O
(	O
dbf	*(struct)
,	O
GDBM_FILE_STAT_ERROR	int
,	O
FALSE	int
)	O
;	O
return	O
-	O
1	int
;	O
}	O
*	O
psize	*(long)
=	O
sb	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_size	long
;	O
return	O
0	int
;	O
}	O
void	O
_gdbm_mapped_unmap	(*(struct(*(char),int,int,int,int,int,int,int,int,int,int,*(char),enum(int,int,int,int),*((*`)->(void)),int,*(struct(int,int,long,int,int,int,int,long,struct`)),*(long),*(struct(*`,long,char,struct`)),long,long,*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int)))),int,*(struct(*`,long,char,struct`)),int,int,int,int,long,*(void),long,long,long)))->(void)
(	O
GDBM_FILE	*(struct)
dbf	*(struct)
)	O
{	O
if	O
(	O
dbf	*(struct)
->	O
mapped_region	*(void)
)	O
{	O
munmap	(*(void),long)->(int)
(	O
dbf	*(struct)
->	O
mapped_region	*(void)
,	O
dbf	*(struct)
->	O
mapped_size	long
)	O
;	O
dbf	*(struct)
->	O
mapped_region	*(void)
=	O
NULL	O
;	O
dbf	*(struct)
->	O
mapped_size	long
=	O
0	int
;	O
dbf	*(struct)
->	O
mapped_pos	long
=	O
0	int
;	O
dbf	*(struct)
->	O
mapped_off	long
=	O
0	int
;	O
}	O
}	O
int	O
_gdbm_internal_remap	(*(struct(*(char),int,int,int,int,int,int,int,int,int,int,*(char),enum(int,int,int,int),*((*`)->(void)),int,*(struct(int,int,long,int,int,int,int,long,struct`)),*(long),*(struct(*`,long,char,struct`)),long,long,*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int)))),int,*(struct(*`,long,char,struct`)),int,int,int,int,long,*(void),long,long,long)),long)->(int)
(	O
GDBM_FILE	*(struct)
dbf	*(struct)
,	O
size_t	long
size	int
)	O
{	O
void	O
*	O
p	*(void)
;	O
int	O
flags	int
=	O
PROT_READ	int
;	O
size_t	long
page_size	long
=	O
sysconf	(int)->(long)
(	O
_SC_PAGESIZE	int
)	O
;	O
if	O
(	O
dbf	*(struct)
->	O
mapped_region	*(void)
)	O
{	O
munmap	(*(void),long)->(int)
(	O
dbf	*(struct)
->	O
mapped_region	*(void)
,	O
dbf	*(struct)
->	O
mapped_size	long
)	O
;	O
dbf	*(struct)
->	O
mapped_region	*(void)
=	O
NULL	O
;	O
}	O
dbf	*(struct)
->	O
mapped_size	long
=	O
size	int
;	O
if	O
(	O
size	int
==	O
0	int
)	O
return	O
0	int
;	O
dbf	*(struct)
->	O
mapped_pos	long
+=	O
dbf	*(struct)
->	O
mapped_off	long
%	O
page_size	long
;	O
dbf	*(struct)
->	O
mapped_off	long
=	O
(	O
dbf	*(struct)
->	O
mapped_off	long
/	O
page_size	long
)	O
*	O
page_size	long
;	O
if	O
(	O
dbf	*(struct)
->	O
read_write	int
)	O
flags	int
|=	O
PROT_WRITE	int
;	O
p	*(void)
=	O
mmap	(*(void),long,int,int,int,long)->(*(void))
(	O
NULL	O
,	O
dbf	*(struct)
->	O
mapped_size	long
,	O
flags	int
,	O
MAP_SHARED	int
,	O
dbf	*(struct)
->	O
desc	int
,	O
dbf	*(struct)
->	O
mapped_off	long
)	O
;	O
if	O
(	O
p	*(void)
==	O
MAP_FAILED	O
)	O
{	O
dbf	*(struct)
->	O
mapped_region	*(void)
=	O
NULL	O
;	O
GDBM_SET_ERRNO	O
(	O
dbf	*(struct)
,	O
GDBM_MALLOC_ERROR	int
,	O
FALSE	int
)	O
;	O
return	O
-	O
1	int
;	O
}	O
dbf	*(struct)
->	O
mapped_region	*(void)
=	O
p	*(void)
;	O
return	O
0	int
;	O
}	O
int	O
_gdbm_mapped_remap	(*(struct(*(char),int,int,int,int,int,int,int,int,int,int,*(char),enum(int,int,int,int),*((*`)->(void)),int,*(struct(int,int,long,int,int,int,int,long,struct`)),*(long),*(struct(*`,long,char,struct`)),long,long,*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int)))),int,*(struct(*`,long,char,struct`)),int,int,int,int,long,*(void),long,long,long)),long,int)->(int)
(	O
GDBM_FILE	*(struct)
dbf	*(struct)
,	O
off_t	long
size	int
,	O
int	O
flag	int
)	O
{	O
off_t	long
file_size	long
,	O
pos	long
;	O
if	O
(	O
size	int
<	O
0	int
)	O
{	O
errno	O
=	O
EINVAL	int
;	O
GDBM_SET_ERRNO	O
(	O
dbf	*(struct)
,	O
GDBM_FILE_SEEK_ERROR	int
,	O
TRUE	int
)	O
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
size	int
<	O
dbf	*(struct)
->	O
mapped_size	long
)	O
return	O
0	int
;	O
if	O
(	O
_gdbm_file_size	(*(struct(*(char),int,int,int,int,int,int,int,int,int,int,*(char),enum(int,int,int,int),*((*`)->(void)),int,*(struct(int,int,long,int,int,int,int,long,struct`)),*(long),*(struct(*`,long,char,struct`)),long,long,*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int)))),int,*(struct(*`,long,char,struct`)),int,int,int,int,long,*(void),long,long,long)),*(long))->(int)
(	O
dbf	*(struct)
,	O
&	O
file_size	long
)	O
)	O
{	O
SAVE_ERRNO	O
(	O
_gdbm_mapped_unmap	(*(struct(*(char),int,int,int,int,int,int,int,int,int,int,*(char),enum(int,int,int,int),*((*`)->(void)),int,*(struct(int,int,long,int,int,int,int,long,struct`)),*(long),*(struct(*`,long,char,struct`)),long,long,*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int)))),int,*(struct(*`,long,char,struct`)),int,int,int,int,long,*(void),long,long,long)))->(void)
(	O
dbf	*(struct)
)	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
flag	int
==	O
_REMAP_END	int
&&	O
size	int
<	O
file_size	long
)	O
size	int
=	O
file_size	long
;	O
if	O
(	O
dbf	*(struct)
->	O
read_write	int
)	O
{	O
if	O
(	O
size	int
>	O
file_size	long
)	O
{	O
if	O
(	O
flag	int
!=	O
_REMAP_DEFAULT	int
)	O
{	O
if	O
(	O
size	int
<	O
dbf	*(struct)
->	O
header	*(struct(int,int,long,int,int,int,int,long,struct(int,int,long,array(struct(int,long)))))
->	O
next_block	long
)	O
size	int
=	O
dbf	*(struct)
->	O
header	*(struct(int,int,long,int,int,int,int,long,struct(int,int,long,array(struct(int,long)))))
->	O
next_block	long
;	O
if	O
(	O
_gdbm_file_extend	(*(struct(*(char),int,int,int,int,int,int,int,int,int,int,*(char),enum(int,int,int,int),*((*`)->(void)),int,*(struct(int,int,long,int,int,int,int,long,struct`)),*(long),*(struct(*`,long,char,struct`)),long,long,*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int)))),int,*(struct(*`,long,char,struct`)),int,int,int,int,long,*(void),long,long,long)),long)->(int)
(	O
dbf	*(struct)
,	O
size	int
)	O
)	O
return	O
-	O
1	int
;	O
file_size	long
=	O
size	int
;	O
}	O
else	O
{	O
return	O
0	int
;	O
}	O
}	O
}	O
else	O
{	O
if	O
(	O
size	int
>	O
file_size	long
)	O
size	int
=	O
file_size	long
;	O
if	O
(	O
size	int
==	O
SUM_FILE_SIZE	(*(struct(*(char),int,int,int,int,int,int,int,int,int,int,*(char),enum(int,int,int,int),*((*`)->(void)),int,*(struct(int,int,long,int,int,int,int,long,struct`)),*(long),*(struct(*`,long,char,struct`)),long,long,*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int)))),int,*(struct(*`,long,char,struct`)),int,int,int,int,long,*(void),long,long,long)),long)->(long)
(	O
dbf	*(struct)
,	O
0	int
)	O
)	O
return	O
0	int
;	O
}	O
pos	long
=	O
_GDBM_MMAPPED_POS	O
(	O
dbf	*(struct)
)	O
;	O
if	O
(	O
size	int
>	O
dbf	*(struct)
->	O
mapped_size_max	long
)	O
{	O
dbf	*(struct)
->	O
mapped_off	long
=	O
pos	long
;	O
dbf	*(struct)
->	O
mapped_pos	long
=	O
0	int
;	O
size	int
=	O
dbf	*(struct)
->	O
mapped_size_max	long
;	O
if	O
(	O
dbf	*(struct)
->	O
mapped_off	long
+	O
size	int
>	O
file_size	long
)	O
size	int
=	O
file_size	long
-	O
dbf	*(struct)
->	O
mapped_off	long
;	O
}	O
else	O
{	O
dbf	*(struct)
->	O
mapped_pos	long
+=	O
dbf	*(struct)
->	O
mapped_off	long
;	O
dbf	*(struct)
->	O
mapped_off	long
=	O
0	int
;	O
}	O
if	O
(	O
pos	long
>	O
file_size	long
)	O
{	O
errno	O
=	O
EINVAL	int
;	O
GDBM_SET_ERRNO	O
(	O
dbf	*(struct)
,	O
GDBM_FILE_SEEK_ERROR	int
,	O
TRUE	int
)	O
;	O
return	O
-	O
1	int
;	O
}	O
return	O
_gdbm_internal_remap	(*(struct(*(char),int,int,int,int,int,int,int,int,int,int,*(char),enum(int,int,int,int),*((*`)->(void)),int,*(struct(int,int,long,int,int,int,int,long,struct`)),*(long),*(struct(*`,long,char,struct`)),long,long,*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int)))),int,*(struct(*`,long,char,struct`)),int,int,int,int,long,*(void),long,long,long)),long)->(int)
(	O
dbf	*(struct)
,	O
size	int
)	O
;	O
}	O
int	O
_gdbm_mapped_init	(*(struct(*(char),int,int,int,int,int,int,int,int,int,int,*(char),enum(int,int,int,int),*((*`)->(void)),int,*(struct(int,int,long,int,int,int,int,long,struct`)),*(long),*(struct(*`,long,char,struct`)),long,long,*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int)))),int,*(struct(*`,long,char,struct`)),int,int,int,int,long,*(void),long,long,long)))->(int)
(	O
GDBM_FILE	*(struct)
dbf	*(struct)
)	O
{	O
if	O
(	O
dbf	*(struct)
->	O
mapped_size_max	long
==	O
0	int
)	O
dbf	*(struct)
->	O
mapped_size_max	long
=	O
SIZE_T_MAX	O
;	O
return	O
_gdbm_mapped_remap	(*(struct(*(char),int,int,int,int,int,int,int,int,int,int,*(char),enum(int,int,int,int),*((*`)->(void)),int,*(struct(int,int,long,int,int,int,int,long,struct`)),*(long),*(struct(*`,long,char,struct`)),long,long,*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int)))),int,*(struct(*`,long,char,struct`)),int,int,int,int,long,*(void),long,long,long)),long,int)->(int)
(	O
dbf	*(struct)
,	O
0	int
,	O
_REMAP_END	int
)	O
;	O
}	O
ssize_t	long
_gdbm_mapped_read	(*(struct(*(char),int,int,int,int,int,int,int,int,int,int,*(char),enum(int,int,int,int),*((*`)->(void)),int,*(struct(int,int,long,int,int,int,int,long,struct`)),*(long),*(struct(*`,long,char,struct`)),long,long,*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int)))),int,*(struct(*`,long,char,struct`)),int,int,int,int,long,*(void),long,long,long)),*(void),long)->(long)
(	O
GDBM_FILE	*(struct)
dbf	*(struct)
,	O
void	O
*	O
buffer	*(void)
,	O
size_t	long
len	long
)	O
{	O
if	O
(	O
dbf	*(struct)
->	O
memory_mapping	int
)	O
{	O
ssize_t	long
total	long
=	O
0	int
;	O
char	O
*	O
cbuf	*(char)
=	O
buffer	*(void)
;	O
while	O
(	O
len	long
)	O
{	O
size_t	long
nbytes	long
;	O
if	O
(	O
_GDBM_NEED_REMAP	O
(	O
dbf	*(struct)
)	O
)	O
{	O
off_t	long
pos	long
=	O
_GDBM_MMAPPED_POS	O
(	O
dbf	*(struct)
)	O
;	O
if	O
(	O
_gdbm_mapped_remap	(*(struct(*(char),int,int,int,int,int,int,int,int,int,int,*(char),enum(int,int,int,int),*((*`)->(void)),int,*(struct(int,int,long,int,int,int,int,long,struct`)),*(long),*(struct(*`,long,char,struct`)),long,long,*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int)))),int,*(struct(*`,long,char,struct`)),int,int,int,int,long,*(void),long,long,long)),long,int)->(int)
(	O
dbf	*(struct)
,	O
SUM_FILE_SIZE	(*(struct(*(char),int,int,int,int,int,int,int,int,int,int,*(char),enum(int,int,int,int),*((*`)->(void)),int,*(struct(int,int,long,int,int,int,int,long,struct`)),*(long),*(struct(*`,long,char,struct`)),long,long,*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int)))),int,*(struct(*`,long,char,struct`)),int,int,int,int,long,*(void),long,long,long)),long)->(long)
(	O
dbf	*(struct)
,	O
len	long
)	O
,	O
_REMAP_DEFAULT	int
)	O
)	O
{	O
int	O
rc	int
;	O
if	O
(	O
dbf	*(struct)
->	O
need_recovery	int
)	O
return	O
-	O
1	int
;	O
dbf	*(struct)
->	O
memory_mapping	int
=	O
FALSE	int
;	O
if	O
(	O
lseek	(int,long,int)->(long)
(	O
dbf	*(struct)
->	O
desc	int
,	O
pos	long
,	O
SEEK_SET	int
)	O
!=	O
pos	long
)	O
return	O
total	long
>	O
0	int
?	O
total	long
:	O
-	O
1	int
;	O
rc	int
=	O
read	(int,*(void),long)->(long)
(	O
dbf	*(struct)
->	O
desc	int
,	O
cbuf	*(char)
,	O
len	long
)	O
;	O
if	O
(	O
rc	int
==	O
-	O
1	int
)	O
return	O
total	long
>	O
0	int
?	O
total	long
:	O
-	O
1	int
;	O
return	O
total	long
+	O
rc	int
;	O
}	O
}	O
nbytes	long
=	O
dbf	*(struct)
->	O
mapped_size	long
-	O
dbf	*(struct)
->	O
mapped_pos	long
;	O
if	O
(	O
nbytes	long
==	O
0	int
)	O
break	O
;	O
if	O
(	O
nbytes	long
>	O
len	long
)	O
nbytes	long
=	O
len	long
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
cbuf	*(char)
,	O
(	O
char	O
*	O
)	O
dbf	*(struct)
->	O
mapped_region	*(void)
+	O
dbf	*(struct)
->	O
mapped_pos	long
,	O
nbytes	long
)	O
;	O
cbuf	*(char)
+=	O
nbytes	long
;	O
dbf	*(struct)
->	O
mapped_pos	long
+=	O
nbytes	long
;	O
total	long
+=	O
nbytes	long
;	O
len	long
-=	O
nbytes	long
;	O
}	O
return	O
total	long
;	O
}	O
return	O
read	(int,*(void),long)->(long)
(	O
dbf	*(struct)
->	O
desc	int
,	O
buffer	*(void)
,	O
len	long
)	O
;	O
}	O
ssize_t	long
_gdbm_mapped_write	(*(struct(*(char),int,int,int,int,int,int,int,int,int,int,*(char),enum(int,int,int,int),*((*`)->(void)),int,*(struct(int,int,long,int,int,int,int,long,struct`)),*(long),*(struct(*`,long,char,struct`)),long,long,*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int)))),int,*(struct(*`,long,char,struct`)),int,int,int,int,long,*(void),long,long,long)),*(void),long)->(long)
(	O
GDBM_FILE	*(struct)
dbf	*(struct)
,	O
void	O
*	O
buffer	*(void)
,	O
size_t	long
len	long
)	O
{	O
if	O
(	O
dbf	*(struct)
->	O
memory_mapping	int
)	O
{	O
ssize_t	long
total	long
=	O
0	int
;	O
char	O
*	O
cbuf	*(char)
=	O
buffer	*(void)
;	O
while	O
(	O
len	long
)	O
{	O
size_t	long
nbytes	long
;	O
if	O
(	O
_GDBM_NEED_REMAP	O
(	O
dbf	*(struct)
)	O
)	O
{	O
off_t	long
pos	long
=	O
_GDBM_MMAPPED_POS	O
(	O
dbf	*(struct)
)	O
;	O
if	O
(	O
_gdbm_mapped_remap	(*(struct(*(char),int,int,int,int,int,int,int,int,int,int,*(char),enum(int,int,int,int),*((*`)->(void)),int,*(struct(int,int,long,int,int,int,int,long,struct`)),*(long),*(struct(*`,long,char,struct`)),long,long,*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int)))),int,*(struct(*`,long,char,struct`)),int,int,int,int,long,*(void),long,long,long)),long,int)->(int)
(	O
dbf	*(struct)
,	O
SUM_FILE_SIZE	(*(struct(*(char),int,int,int,int,int,int,int,int,int,int,*(char),enum(int,int,int,int),*((*`)->(void)),int,*(struct(int,int,long,int,int,int,int,long,struct`)),*(long),*(struct(*`,long,char,struct`)),long,long,*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int)))),int,*(struct(*`,long,char,struct`)),int,int,int,int,long,*(void),long,long,long)),long)->(long)
(	O
dbf	*(struct)
,	O
len	long
)	O
,	O
_REMAP_EXTEND	int
)	O
)	O
{	O
int	O
rc	int
;	O
if	O
(	O
dbf	*(struct)
->	O
need_recovery	int
)	O
return	O
-	O
1	int
;	O
dbf	*(struct)
->	O
memory_mapping	int
=	O
FALSE	int
;	O
if	O
(	O
lseek	(int,long,int)->(long)
(	O
dbf	*(struct)
->	O
desc	int
,	O
pos	long
,	O
SEEK_SET	int
)	O
!=	O
pos	long
)	O
return	O
total	long
>	O
0	int
?	O
total	long
:	O
-	O
1	int
;	O
rc	int
=	O
write	(int,*(void),long)->(long)
(	O
dbf	*(struct)
->	O
desc	int
,	O
cbuf	*(char)
,	O
len	long
)	O
;	O
if	O
(	O
rc	int
==	O
-	O
1	int
)	O
return	O
total	long
>	O
0	int
?	O
total	long
:	O
-	O
1	int
;	O
return	O
total	long
+	O
rc	int
;	O
}	O
}	O
nbytes	long
=	O
dbf	*(struct)
->	O
mapped_size	long
-	O
dbf	*(struct)
->	O
mapped_pos	long
;	O
if	O
(	O
nbytes	long
==	O
0	int
)	O
break	O
;	O
if	O
(	O
nbytes	long
>	O
len	long
)	O
nbytes	long
=	O
len	long
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
(	O
char	O
*	O
)	O
dbf	*(struct)
->	O
mapped_region	*(void)
+	O
dbf	*(struct)
->	O
mapped_pos	long
,	O
cbuf	*(char)
,	O
nbytes	long
)	O
;	O
cbuf	*(char)
+=	O
nbytes	long
;	O
dbf	*(struct)
->	O
mapped_pos	long
+=	O
nbytes	long
;	O
total	long
+=	O
nbytes	long
;	O
len	long
-=	O
nbytes	long
;	O
}	O
return	O
total	long
;	O
}	O
return	O
write	(int,*(void),long)->(long)
(	O
dbf	*(struct)
->	O
desc	int
,	O
buffer	*(void)
,	O
len	long
)	O
;	O
}	O
off_t	long
_gdbm_mapped_lseek	(*(struct(*(char),int,int,int,int,int,int,int,int,int,int,*(char),enum(int,int,int,int),*((*`)->(void)),int,*(struct(int,int,long,int,int,int,int,long,struct`)),*(long),*(struct(*`,long,char,struct`)),long,long,*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int)))),int,*(struct(*`,long,char,struct`)),int,int,int,int,long,*(void),long,long,long)),long,int)->(long)
(	O
GDBM_FILE	*(struct)
dbf	*(struct)
,	O
off_t	long
offset	*(int)
,	O
int	O
whence	int
)	O
{	O
if	O
(	O
dbf	*(struct)
->	O
memory_mapping	int
)	O
{	O
off_t	long
needle	long
;	O
switch	O
(	O
whence	int
)	O
{	O
case	O
SEEK_SET	int
:	O
needle	long
=	O
offset	*(int)
;	O
break	O
;	O
case	O
SEEK_CUR	int
:	O
needle	long
=	O
offset	*(int)
+	O
_GDBM_MMAPPED_POS	O
(	O
dbf	*(struct)
)	O
;	O
break	O
;	O
case	O
SEEK_END	int
:	O
{	O
off_t	long
file_size	long
;	O
if	O
(	O
_gdbm_file_size	(*(struct(*(char),int,int,int,int,int,int,int,int,int,int,*(char),enum(int,int,int,int),*((*`)->(void)),int,*(struct(int,int,long,int,int,int,int,long,struct`)),*(long),*(struct(*`,long,char,struct`)),long,long,*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int)))),int,*(struct(*`,long,char,struct`)),int,int,int,int,long,*(void),long,long,long)),*(long))->(int)
(	O
dbf	*(struct)
,	O
&	O
file_size	long
)	O
)	O
return	O
-	O
1	int
;	O
needle	long
=	O
file_size	long
-	O
offset	*(int)
;	O
break	O
;	O
}	O
default	O
:	O
errno	O
=	O
EINVAL	int
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
needle	long
<	O
0	int
)	O
{	O
errno	O
=	O
EINVAL	int
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
!	O
_GDBM_IN_MAPPED_REGION_P	O
(	O
dbf	*(struct)
,	O
needle	long
)	O
)	O
{	O
_gdbm_mapped_unmap	(*(struct(*(char),int,int,int,int,int,int,int,int,int,int,*(char),enum(int,int,int,int),*((*`)->(void)),int,*(struct(int,int,long,int,int,int,int,long,struct`)),*(long),*(struct(*`,long,char,struct`)),long,long,*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int)))),int,*(struct(*`,long,char,struct`)),int,int,int,int,long,*(void),long,long,long)))->(void)
(	O
dbf	*(struct)
)	O
;	O
dbf	*(struct)
->	O
mapped_off	long
=	O
needle	long
;	O
dbf	*(struct)
->	O
mapped_pos	long
=	O
0	int
;	O
}	O
else	O
dbf	*(struct)
->	O
mapped_pos	long
=	O
needle	long
-	O
dbf	*(struct)
->	O
mapped_off	long
;	O
return	O
needle	long
;	O
}	O
return	O
lseek	(int,long,int)->(long)
(	O
dbf	*(struct)
->	O
desc	int
,	O
offset	*(int)
,	O
whence	int
)	O
;	O
}	O
int	O
_gdbm_mapped_sync	(*(struct(*(char),int,int,int,int,int,int,int,int,int,int,*(char),enum(int,int,int,int),*((*`)->(void)),int,*(struct(int,int,long,int,int,int,int,long,struct`)),*(long),*(struct(*`,long,char,struct`)),long,long,*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int)))),int,*(struct(*`,long,char,struct`)),int,int,int,int,long,*(void),long,long,long)))->(int)
(	O
GDBM_FILE	*(struct)
dbf	*(struct)
)	O
{	O
int	O
rc	int
;	O
if	O
(	O
dbf	*(struct)
->	O
mapped_region	*(void)
)	O
rc	int
=	O
msync	(*(void),long,int)->(int)
(	O
dbf	*(struct)
->	O
mapped_region	*(void)
,	O
dbf	*(struct)
->	O
mapped_size	long
,	O
MS_SYNC	int
|	O
MS_INVALIDATE	int
)	O
;	O
else	O
rc	int
=	O
fsync	(int)->(int)
(	O
dbf	*(struct)
->	O
desc	int
)	O
;	O
if	O
(	O
rc	int
)	O
GDBM_SET_ERRNO	O
(	O
dbf	*(struct)
,	O
GDBM_FILE_SYNC_ERROR	int
,	O
TRUE	int
)	O
;	O
return	O
rc	int
;	O
}	O
