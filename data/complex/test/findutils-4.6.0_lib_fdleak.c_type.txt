static	O
int	O
*	O
non_cloexec_fds	*(int)
;	O
static	O
size_t	long
num_cloexec_fds	long
;	O
static	O
int	O
get_proc_max_fd	()->(int)
(	O
void	O
)	O
{	O
const	O
char	O
*	O
path	*(char)
=	O
"/proc/self/fd"	*(char)
;	O
int	O
maxfd	int
=	O
-	O
1	int
;	O
DIR	struct
*	O
dir	*(struct)
=	O
opendir_safer	(*(char))->(*(struct))
(	O
path	*(char)
)	O
;	O
if	O
(	O
dir	*(struct)
)	O
{	O
int	O
good	int
=	O
0	int
;	O
struct	O
dirent	struct(long,long,short,char,array(char))
*	O
dent	*(struct(long,long,short,char,array(char)))
;	O
while	O
(	O
(	O
dent	*(struct(long,long,short,char,array(char)))
=	O
readdir	(*(struct))->(*(struct(long,long,short,char,array(char))))
(	O
dir	*(struct)
)	O
)	O
!=	O
NULL	O
)	O
{	O
if	O
(	O
dent	*(struct(long,long,short,char,array(char)))
->	O
d_name	array(char)
[	O
0	int
]	O
!=	O
'.'	O
||	O
(	O
dent	*(struct(long,long,short,char,array(char)))
->	O
d_name	array(char)
[	O
0	int
]	O
!=	O
0	int
&&	O
dent	*(struct(long,long,short,char,array(char)))
->	O
d_name	array(char)
[	O
1	int
]	O
!=	O
0	int
&&	O
dent	*(struct(long,long,short,char,array(char)))
->	O
d_name	array(char)
[	O
1	int
]	O
!=	O
'.'	O
)	O
)	O
{	O
const	O
int	O
fd	int
=	O
safe_atoi	(*(char),enum(int,int,int,int,int,int,int,int,int,int,int))->(int)
(	O
dent	*(struct(long,long,short,char,array(char)))
->	O
d_name	array(char)
,	O
literal_quoting_style	int
)	O
;	O
if	O
(	O
fd	int
>	O
maxfd	int
)	O
maxfd	int
=	O
fd	int
;	O
good	int
=	O
1	int
;	O
}	O
}	O
closedir	(*(struct))->(int)
(	O
dir	*(struct)
)	O
;	O
if	O
(	O
good	int
)	O
return	O
maxfd	int
;	O
}	O
return	O
-	O
1	int
;	O
}	O
static	O
int	O
get_max_fd	()->(int)
(	O
void	O
)	O
{	O
struct	O
rlimit	struct(long,long)
fd_limit	struct(long,long)
;	O
long	O
open_max	long
;	O
open_max	long
=	O
get_proc_max_fd	()->(int)
(	O
)	O
;	O
if	O
(	O
open_max	long
>=	O
0	int
)	O
return	O
open_max	long
;	O
open_max	long
=	O
sysconf	(int)->(long)
(	O
_SC_OPEN_MAX	int
)	O
;	O
if	O
(	O
open_max	long
==	O
-	O
1	int
)	O
open_max	long
=	O
_POSIX_OPEN_MAX	int
;	O
if	O
(	O
0	int
==	O
getrlimit	(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(struct(long,long)))->(int)
(	O
RLIMIT_NOFILE	int
,	O
&	O
fd_limit	struct(long,long)
)	O
)	O
{	O
if	O
(	O
fd_limit	struct(long,long)
.	O
rlim_cur	long
==	O
RLIM_INFINITY	O
)	O
return	O
open_max	long
;	O
else	O
return	O
(	O
int	O
)	O
fd_limit	struct(long,long)
.	O
rlim_cur	long
;	O
}	O
return	O
open_max	long
;	O
}	O
static	O
int	O
visit_open_fds	(int,int,*((int,*(void))->(int)),*(void))->(int)
(	O
int	O
fd_min	int
,	O
int	O
fd_max	int
,	O
int	O
(	O
*	O
callback	*((int,*(void))->(int))
)	O
(	O
int	O
,	O
void	O
*	O
)	O
,	O
void	O
*	O
cb_context	*(void)
)	O
{	O
enum	O
{	O
MAX_POLL	int
=	O
64	int
}	O
;	O
struct	O
pollfd	struct(int,short,short)
pf	array(struct(int,short,short))
[	O
MAX_POLL	int
]	O
;	O
int	O
rv	int
=	O
0	int
;	O
while	O
(	O
fd_min	int
<	O
fd_max	int
)	O
{	O
int	O
i	int
;	O
int	O
limit	int
=	O
fd_max	int
-	O
fd_min	int
;	O
if	O
(	O
limit	int
>	O
MAX_POLL	int
)	O
limit	int
=	O
MAX_POLL	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
limit	int
;	O
i	int
++	O
)	O
{	O
pf	array(struct(int,short,short))
[	O
i	int
]	O
.	O
events	short
=	O
POLLIN	int
|	O
POLLOUT	int
;	O
pf	array(struct(int,short,short))
[	O
i	int
]	O
.	O
revents	short
=	O
0	int
;	O
pf	array(struct(int,short,short))
[	O
i	int
]	O
.	O
fd	int
=	O
fd_min	int
+	O
i	int
;	O
}	O
rv	int
=	O
poll	(*(struct(int,short,short)),long,int)->(int)
(	O
pf	array(struct(int,short,short))
,	O
limit	int
,	O
0	int
)	O
;	O
if	O
(	O
-	O
1	int
==	O
rv	int
)	O
{	O
return	O
-	O
1	int
;	O
}	O
else	O
{	O
int	O
j	int
;	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<	O
limit	int
;	O
j	int
++	O
)	O
{	O
if	O
(	O
pf	array(struct(int,short,short))
[	O
j	int
]	O
.	O
revents	short
!=	O
POLLNVAL	int
)	O
{	O
if	O
(	O
0	int
!=	O
(	O
rv	int
=	O
callback	*((int,*(void))->(int))
(	O
pf	array(struct(int,short,short))
[	O
j	int
]	O
.	O
fd	int
,	O
cb_context	*(void)
)	O
)	O
)	O
return	O
rv	int
;	O
}	O
}	O
}	O
fd_min	int
+=	O
limit	int
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
fd_is_cloexec	(int)->(int)
(	O
int	O
fd	int
)	O
{	O
const	O
int	O
flags	int
=	O
fcntl	(int,int)->(int)
(	O
fd	int
,	O
F_GETFD	int
)	O
;	O
return	O
flags	int
&	O
FD_CLOEXEC	int
;	O
}	O
struct	O
remember_fd_context	struct(*(int),long,long)
{	O
int	O
*	O
buf	*(char)
;	O
size_t	long
used	long
;	O
size_t	long
allocated	*(long)
;	O
}	O
;	O
static	O
int	O
remember_fd_if_non_cloexec	(int,*(void))->(int)
(	O
int	O
fd	int
,	O
void	O
*	O
context	*(void)
)	O
{	O
if	O
(	O
fd_is_cloexec	(int)->(int)
(	O
fd	int
)	O
)	O
{	O
return	O
0	int
;	O
}	O
else	O
{	O
struct	O
remember_fd_context	struct(*(int),long,long)
*	O
const	O
p	*(struct(*(int),long,long))
=	O
context	*(void)
;	O
void	O
*	O
newbuf	*(void)
=	O
extendbuf	(*(void),long,*(long))->(*(void))
(	O
p	*(struct(*(int),long,long))
->	O
buf	*(char)
,	O
sizeof	O
(	O
p	*(struct(*(int),long,long))
->	O
buf	*(char)
[	O
0	int
]	O
)	O
*	O
(	O
p	*(struct(*(int),long,long))
->	O
used	long
+	O
1	int
)	O
,	O
&	O
(	O
p	*(struct(*(int),long,long))
->	O
allocated	*(long)
)	O
)	O
;	O
if	O
(	O
newbuf	*(void)
)	O
{	O
p	*(struct(*(int),long,long))
->	O
buf	*(char)
=	O
newbuf	*(void)
;	O
p	*(struct(*(int),long,long))
->	O
buf	*(char)
[	O
p	*(struct(*(int),long,long))
->	O
used	long
]	O
=	O
fd	int
;	O
++	O
p	*(struct(*(int),long,long))
->	O
used	long
;	O
return	O
0	int
;	O
}	O
else	O
{	O
return	O
-	O
1	int
;	O
}	O
}	O
}	O
void	O
remember_non_cloexec_fds	()->(void)
(	O
void	O
)	O
{	O
int	O
max_fd	int
=	O
get_max_fd	()->(int)
(	O
)	O
;	O
struct	O
remember_fd_context	struct(*(int),long,long)
cb_data	struct(*(int),long,long)
;	O
cb_data	struct(*(int),long,long)
.	O
buf	*(char)
=	O
NULL	O
;	O
cb_data	struct(*(int),long,long)
.	O
used	long
=	O
cb_data	struct(*(int),long,long)
.	O
allocated	*(long)
=	O
0	int
;	O
if	O
(	O
max_fd	int
<	O
INT_MAX	O
)	O
++	O
max_fd	int
;	O
visit_open_fds	(int,int,*((int,*(void))->(int)),*(void))->(int)
(	O
0	int
,	O
max_fd	int
,	O
remember_fd_if_non_cloexec	(int,*(void))->(int)
,	O
&	O
cb_data	struct(*(int),long,long)
)	O
;	O
non_cloexec_fds	*(int)
=	O
cb_data	struct(*(int),long,long)
.	O
buf	*(char)
;	O
num_cloexec_fds	long
=	O
cb_data	struct(*(int),long,long)
.	O
used	long
;	O
}	O
struct	O
fd_leak_context	struct(*(int),long,long,int)
{	O
const	O
int	O
*	O
prev_buf	*(int)
;	O
size_t	long
used	long
;	O
size_t	long
lookup_pos	long
;	O
int	O
leaked_fd	int
;	O
}	O
;	O
static	O
int	O
find_first_leak_callback	(int,*(void))->(int)
(	O
int	O
fd	int
,	O
void	O
*	O
context	*(void)
)	O
{	O
if	O
(	O
!	O
fd_is_cloexec	(int)->(int)
(	O
fd	int
)	O
)	O
{	O
struct	O
fd_leak_context	struct(*(int),long,long,int)
*	O
p	*(struct(*(int),long,long))
=	O
context	*(void)
;	O
while	O
(	O
p	*(struct(*(int),long,long))
->	O
lookup_pos	long
<	O
p	*(struct(*(int),long,long))
->	O
used	long
)	O
{	O
if	O
(	O
p	*(struct(*(int),long,long))
->	O
prev_buf	*(int)
[	O
p	*(struct(*(int),long,long))
->	O
lookup_pos	long
]	O
<	O
fd	int
)	O
{	O
++	O
p	*(struct(*(int),long,long))
->	O
lookup_pos	long
;	O
}	O
else	O
if	O
(	O
p	*(struct(*(int),long,long))
->	O
prev_buf	*(int)
[	O
p	*(struct(*(int),long,long))
->	O
lookup_pos	long
]	O
==	O
fd	int
)	O
{	O
return	O
0	int
;	O
}	O
else	O
{	O
break	O
;	O
}	O
}	O
p	*(struct(*(int),long,long))
->	O
leaked_fd	int
=	O
fd	int
;	O
return	O
-	O
1	int
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
find_first_leaked_fd	(*(int),long)->(int)
(	O
const	O
int	O
*	O
prev_non_cloexec_fds	*(int)
,	O
size_t	long
n	long
)	O
{	O
struct	O
fd_leak_context	struct(*(int),long,long,int)
context	*(void)
;	O
int	O
max_fd	int
=	O
get_max_fd	()->(int)
(	O
)	O
;	O
if	O
(	O
max_fd	int
<	O
INT_MAX	O
)	O
++	O
max_fd	int
;	O
context	*(void)
.	O
prev_buf	*(int)
=	O
prev_non_cloexec_fds	*(int)
;	O
context	*(void)
.	O
used	long
=	O
n	long
;	O
context	*(void)
.	O
lookup_pos	long
=	O
0	int
;	O
context	*(void)
.	O
leaked_fd	int
=	O
-	O
1	int
;	O
visit_open_fds	(int,int,*((int,*(void))->(int)),*(void))->(int)
(	O
0	int
,	O
max_fd	int
,	O
find_first_leak_callback	(int,*(void))->(int)
,	O
&	O
context	*(void)
)	O
;	O
return	O
context	*(void)
.	O
leaked_fd	int
;	O
}	O
static	O
bool	bool
o_cloexec_works	()->(bool)
(	O
void	O
)	O
{	O
bool	bool
result	bool
=	O
false	int
;	O
int	O
fd	int
=	O
open	(*(char),int)->(int)
(	O
"/"	*(char)
,	O
O_RDONLY	int
|	O
O_CLOEXEC	O
)	O
;	O
if	O
(	O
fd	int
>=	O
0	int
)	O
{	O
result	bool
=	O
fd_is_cloexec	(int)->(int)
(	O
fd	int
)	O
;	O
close	*((*(void))->(int))
(	O
fd	int
)	O
;	O
}	O
return	O
result	bool
;	O
}	O
int	O
open_cloexec	(*(char),int)->(int)
(	O
const	O
char	O
*	O
path	*(char)
,	O
int	O
flags	int
,	O
...	O
)	O
{	O
int	O
fd	int
;	O
mode_t	int
mode	int
=	O
0	int
;	O
static	O
bool	bool
cloexec_works	bool
=	O
false	int
;	O
static	O
bool	bool
cloexec_status_known	bool
=	O
false	int
;	O
if	O
(	O
flags	int
&	O
O_CREAT	int
)	O
{	O
va_list	array(struct(int,int,*(void),*(void)))
ap	array(struct(int,int,*(void),*(void)))
;	O
va_start	O
(	O
ap	array(struct(int,int,*(void),*(void)))
,	O
flags	int
)	O
;	O
mode	int
=	O
va_arg	O
(	O
ap	array(struct(int,int,*(void),*(void)))
,	O
PROMOTED_MODE_T	O
)	O
;	O
va_end	O
(	O
ap	array(struct(int,int,*(void),*(void)))
)	O
;	O
}	O
if	O
(	O
!	O
cloexec_status_known	bool
)	O
{	O
cloexec_works	bool
=	O
o_cloexec_works	()->(bool)
(	O
)	O
;	O
cloexec_status_known	bool
=	O
true	int
;	O
}	O
fd	int
=	O
open	(*(char),int)->(int)
(	O
path	*(char)
,	O
flags	int
|	O
O_CLOEXEC	O
,	O
mode	int
)	O
;	O
if	O
(	O
(	O
fd	int
>=	O
0	int
)	O
&&	O
!	O
(	O
O_CLOEXEC	O
&&	O
cloexec_works	bool
)	O
)	O
{	O
set_cloexec_flag	(int,bool)->(int)
(	O
fd	int
,	O
true	int
)	O
;	O
}	O
return	O
fd	int
;	O
}	O
void	O
forget_non_cloexec_fds	()->(void)
(	O
void	O
)	O
{	O
free	(*(void))->(void)
(	O
non_cloexec_fds	*(int)
)	O
;	O
non_cloexec_fds	*(int)
=	O
NULL	O
;	O
num_cloexec_fds	long
=	O
0	int
;	O
}	O
void	O
complain_about_leaky_fds	()->(void)
(	O
void	O
)	O
{	O
int	O
no_leaks	int
=	O
1	int
;	O
const	O
int	O
leaking_fd	int
=	O
find_first_leaked_fd	(*(int),long)->(int)
(	O
non_cloexec_fds	*(int)
,	O
num_cloexec_fds	long
)	O
;	O
if	O
(	O
leaking_fd	int
>=	O
0	int
)	O
{	O
no_leaks	int
=	O
0	int
;	O
error	(int,int,*(char))->(void)
(	O
0	int
,	O
0	int
,	O
_	O
(	O
"File descriptor %d will leak; please report this as a bug, "	*(char)
"remembering to include a detailed description of the simplest "	*(char)
"way to reproduce this problem."	*(char)
)	O
,	O
leaking_fd	int
)	O
;	O
}	O
assert	O
(	O
no_leaks	int
)	O
;	O
}	O
