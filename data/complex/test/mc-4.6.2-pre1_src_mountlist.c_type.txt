struct	O
mount_entry	struct(*(char),*(char),*(char),long,*(struct(*(char),*(char),*(char),long,*(struct(*(char),*(char),*(char),long,*(struct`))))))
{	O
char	O
*	O
me_devname	*(char)
;	O
char	O
*	O
me_mountdir	*(char)
;	O
char	O
*	O
me_type	*(char)
;	O
dev_t	long
me_dev	long
;	O
struct	O
mount_entry	struct(*(char),*(char),*(char),long,*(struct(*(char),*(char),*(char),long,*(struct(*(char),*(char),*(char),long,*(struct`))))))
*	O
me_next	*(struct(*(char),*(char),*(char),long,*(struct(*(char),*(char),*(char),long,*(struct`)))))
;	O
}	O
;	O
struct	O
fs_usage	struct(long,long,long,long,long)
{	O
long	O
fsu_blocks	long
;	O
long	O
fsu_bfree	long
;	O
long	O
fsu_bavail	long
;	O
long	O
fsu_files	long
;	O
long	O
fsu_ffree	long
;	O
}	O
;	O
static	O
int	O
get_fs_usage	(*(char),*(struct(long,long,long,long,long)))->(int)
(	O
char	O
*	O
path	*(char)
,	O
struct	O
fs_usage	struct(long,long,long,long,long)
*	O
fsp	*(struct(long,long,long,long,long))
)	O
;	O
static	O
struct	O
mount_entry	struct(*(char),*(char),*(char),long,*(struct(*(char),*(char),*(char),long,*(struct(*(char),*(char),*(char),long,*(struct`))))))
*	O
mount_list	*(struct(*(char),*(char),*(char),long,*(struct(*(char),*(char),*(char),long,*(struct`)))))
=	O
NULL	O
;	O
static	O
int	O
xatoi	(*(char))->(int)
(	O
const	O
char	O
*	O
cp	*(char)
)	O
{	O
int	O
val	int
;	O
val	int
=	O
0	int
;	O
while	O
(	O
*	O
cp	*(char)
)	O
{	O
if	O
(	O
*	O
cp	*(char)
>=	O
'a'	O
&&	O
*	O
cp	*(char)
<=	O
'f'	O
)	O
val	int
=	O
val	int
*	O
16	int
+	O
*	O
cp	*(char)
-	O
'a'	O
+	O
10	int
;	O
else	O
if	O
(	O
*	O
cp	*(char)
>=	O
'A'	O
&&	O
*	O
cp	*(char)
<=	O
'F'	O
)	O
val	int
=	O
val	int
*	O
16	int
+	O
*	O
cp	*(char)
-	O
'A'	O
+	O
10	int
;	O
else	O
if	O
(	O
*	O
cp	*(char)
>=	O
'0'	O
&&	O
*	O
cp	*(char)
<=	O
'9'	O
)	O
val	int
=	O
val	int
*	O
16	int
+	O
*	O
cp	*(char)
-	O
'0'	O
;	O
else	O
break	O
;	O
cp	*(char)
++	O
;	O
}	O
return	O
val	int
;	O
}	O
static	O
struct	O
mount_entry	struct(*(char),*(char),*(char),long,*(struct(*(char),*(char),*(char),long,*(struct(*(char),*(char),*(char),long,*(struct`))))))
*	O
read_filesystem_list	(int,int)->(*(struct(*(char),*(char),*(char),long,*(struct(*`,*`,*`,long,*`)))))
(	O
int	O
need_fs_type	int
,	O
int	O
all_fs	int
)	O
{	O
struct	O
mount_entry	struct(*(char),*(char),*(char),long,*(struct(*(char),*(char),*(char),long,*(struct(*(char),*(char),*(char),long,*(struct`))))))
*	O
mlist	*(struct(*(char),*(char),*(char),long,*(struct(*(char),*(char),*(char),long,*(struct`)))))
;	O
struct	O
mount_entry	struct(*(char),*(char),*(char),long,*(struct(*(char),*(char),*(char),long,*(struct(*(char),*(char),*(char),long,*(struct`))))))
*	O
me	*(struct(*(char),*(char),*(char),long,*(struct(*(char),*(char),*(char),long,*(struct`)))))
;	O
struct	O
mount_entry	struct(*(char),*(char),*(char),long,*(struct(*(char),*(char),*(char),long,*(struct(*(char),*(char),*(char),long,*(struct`))))))
*	O
mtail	*(struct(*(char),*(char),*(char),long,*(struct(*(char),*(char),*(char),long,*(struct`)))))
;	O
(	O
void	O
)	O
need_fs_type	int
;	O
(	O
void	O
)	O
all_fs	int
;	O
me	*(struct(*(char),*(char),*(char),long,*(struct(*(char),*(char),*(char),long,*(struct`)))))
=	O
(	O
struct	O
mount_entry	struct(*(char),*(char),*(char),long,*(struct(*(char),*(char),*(char),long,*(struct(*(char),*(char),*(char),long,*(struct`))))))
*	O
)	O
malloc	(long)->(*(void))
(	O
sizeof	O
(	O
struct	O
mount_entry	struct(*(char),*(char),*(char),long,*(struct(*(char),*(char),*(char),long,*(struct(*(char),*(char),*(char),long,*(struct`))))))
)	O
)	O
;	O
me	*(struct(*(char),*(char),*(char),long,*(struct(*(char),*(char),*(char),long,*(struct`)))))
->	O
me_next	*(struct(*(char),*(char),*(char),long,*(struct(*(char),*(char),*(char),long,*(struct`)))))
=	O
NULL	O
;	O
mlist	*(struct(*(char),*(char),*(char),long,*(struct(*(char),*(char),*(char),long,*(struct`)))))
=	O
mtail	*(struct(*(char),*(char),*(char),long,*(struct(*(char),*(char),*(char),long,*(struct`)))))
=	O
me	*(struct(*(char),*(char),*(char),long,*(struct(*(char),*(char),*(char),long,*(struct`)))))
;	O
{	O
struct	O
mntent	struct(*(char),*(char),*(char),*(char),int,int)
*	O
mnt	*(struct(*(char),*(char),*(char),*(char),int,int))
;	O
FILE	struct
*	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
;	O
const	O
char	O
*	O
devopt	*(char)
;	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
=	O
setmntent	(*(char),*(char))->(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))
(	O
MOUNTED	O
,	O
"r"	*(char)
)	O
;	O
if	O
(	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
==	O
NULL	O
)	O
return	O
NULL	O
;	O
while	O
(	O
(	O
mnt	*(struct(*(char),*(char),*(char),*(char),int,int))
=	O
getmntent	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(*(struct(*(char),*(char),*(char),*(char),int,int)))
(	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
)	O
)	O
{	O
if	O
(	O
!	O
all_fs	int
&&	O
(	O
!	O
strcmp	(*(char),*(char))->(int)
(	O
mnt	*(struct(*(char),*(char),*(char),*(char),int,int))
->	O
mnt_type	*(char)
,	O
"ignore"	*(char)
)	O
||	O
!	O
strcmp	(*(char),*(char))->(int)
(	O
mnt	*(struct(*(char),*(char),*(char),*(char),int,int))
->	O
mnt_type	*(char)
,	O
"auto"	*(char)
)	O
)	O
)	O
continue	O
;	O
me	*(struct(*(char),*(char),*(char),long,*(struct(*(char),*(char),*(char),long,*(struct`)))))
=	O
(	O
struct	O
mount_entry	struct(*(char),*(char),*(char),long,*(struct(*(char),*(char),*(char),long,*(struct(*(char),*(char),*(char),long,*(struct`))))))
*	O
)	O
malloc	(long)->(*(void))
(	O
sizeof	O
(	O
struct	O
mount_entry	struct(*(char),*(char),*(char),long,*(struct(*(char),*(char),*(char),long,*(struct(*(char),*(char),*(char),long,*(struct`))))))
)	O
)	O
;	O
me	*(struct(*(char),*(char),*(char),long,*(struct(*(char),*(char),*(char),long,*(struct`)))))
->	O
me_devname	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
mnt	*(struct(*(char),*(char),*(char),*(char),int,int))
->	O
mnt_fsname	*(char)
)	O
;	O
me	*(struct(*(char),*(char),*(char),long,*(struct(*(char),*(char),*(char),long,*(struct`)))))
->	O
me_mountdir	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
mnt	*(struct(*(char),*(char),*(char),*(char),int,int))
->	O
mnt_dir	*(char)
)	O
;	O
me	*(struct(*(char),*(char),*(char),long,*(struct(*(char),*(char),*(char),long,*(struct`)))))
->	O
me_type	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
mnt	*(struct(*(char),*(char),*(char),*(char),int,int))
->	O
mnt_type	*(char)
)	O
;	O
devopt	*(char)
=	O
strstr	(*(char),*(char))->(*(char))
(	O
mnt	*(struct(*(char),*(char),*(char),*(char),int,int))
->	O
mnt_opts	*(char)
,	O
"dev="	*(char)
)	O
;	O
if	O
(	O
devopt	*(char)
)	O
{	O
if	O
(	O
devopt	*(char)
[	O
4	int
]	O
==	O
'0'	O
&&	O
(	O
devopt	*(char)
[	O
5	int
]	O
==	O
'x'	O
||	O
devopt	*(char)
[	O
5	int
]	O
==	O
'X'	O
)	O
)	O
me	*(struct(*(char),*(char),*(char),long,*(struct(*(char),*(char),*(char),long,*(struct`)))))
->	O
me_dev	long
=	O
xatoi	(*(char))->(int)
(	O
devopt	*(char)
+	O
6	int
)	O
;	O
else	O
me	*(struct(*(char),*(char),*(char),long,*(struct(*(char),*(char),*(char),long,*(struct`)))))
->	O
me_dev	long
=	O
xatoi	(*(char))->(int)
(	O
devopt	*(char)
+	O
4	int
)	O
;	O
}	O
else	O
me	*(struct(*(char),*(char),*(char),long,*(struct(*(char),*(char),*(char),long,*(struct`)))))
->	O
me_dev	long
=	O
-	O
1	int
;	O
me	*(struct(*(char),*(char),*(char),long,*(struct(*(char),*(char),*(char),long,*(struct`)))))
->	O
me_next	*(struct(*(char),*(char),*(char),long,*(struct(*(char),*(char),*(char),long,*(struct`)))))
=	O
NULL	O
;	O
mtail	*(struct(*(char),*(char),*(char),long,*(struct(*(char),*(char),*(char),long,*(struct`)))))
->	O
me_next	*(struct(*(char),*(char),*(char),long,*(struct(*(char),*(char),*(char),long,*(struct`)))))
=	O
me	*(struct(*(char),*(char),*(char),long,*(struct(*(char),*(char),*(char),long,*(struct`)))))
;	O
mtail	*(struct(*(char),*(char),*(char),long,*(struct(*(char),*(char),*(char),long,*(struct`)))))
=	O
me	*(struct(*(char),*(char),*(char),long,*(struct(*(char),*(char),*(char),long,*(struct`)))))
;	O
}	O
if	O
(	O
endmntent	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
==	O
0	int
)	O
return	O
NULL	O
;	O
}	O
me	*(struct(*(char),*(char),*(char),long,*(struct(*(char),*(char),*(char),long,*(struct`)))))
=	O
mlist	*(struct(*(char),*(char),*(char),long,*(struct(*(char),*(char),*(char),long,*(struct`)))))
;	O
mlist	*(struct(*(char),*(char),*(char),long,*(struct(*(char),*(char),*(char),long,*(struct`)))))
=	O
mlist	*(struct(*(char),*(char),*(char),long,*(struct(*(char),*(char),*(char),long,*(struct`)))))
->	O
me_next	*(struct(*(char),*(char),*(char),long,*(struct(*(char),*(char),*(char),long,*(struct`)))))
;	O
free	(*(void))->(void)
(	O
me	*(struct(*(char),*(char),*(char),long,*(struct(*(char),*(char),*(char),long,*(struct`)))))
)	O
;	O
return	O
mlist	*(struct(*(char),*(char),*(char),long,*(struct(*(char),*(char),*(char),long,*(struct`)))))
;	O
}	O
void	O
init_my_statfs	()->(void)
(	O
void	O
)	O
{	O
mount_list	*(struct(*(char),*(char),*(char),long,*(struct(*(char),*(char),*(char),long,*(struct`)))))
=	O
read_filesystem_list	(int,int)->(*(struct(*(char),*(char),*(char),long,*(struct(*`,*`,*`,long,*`)))))
(	O
1	int
,	O
1	int
)	O
;	O
}	O
void	O
my_statfs	struct(int,*(char),*(char),*(char),int,int,int,int)
(	O
struct	O
my_statfs	struct(int,*(char),*(char),*(char),int,int,int,int)
*	O
myfs_stats	*(struct(int,*(char),*(char),*(char),int,int,int,int))
,	O
const	O
char	O
*	O
path	*(char)
)	O
{	O
int	O
i	array(int)
,	O
len	int
=	O
0	int
;	O
struct	O
mount_entry	struct(*(char),*(char),*(char),long,*(struct(*(char),*(char),*(char),long,*(struct(*(char),*(char),*(char),long,*(struct`))))))
*	O
entry	*(struct(*(char),*(char),*(char),long,*(struct(*(char),*(char),*(char),long,*(struct`)))))
=	O
NULL	O
;	O
struct	O
mount_entry	struct(*(char),*(char),*(char),long,*(struct(*(char),*(char),*(char),long,*(struct(*(char),*(char),*(char),long,*(struct`))))))
*	O
temp	*(struct(*(char),*(char),*(char),long,*(struct(*(char),*(char),*(char),long,*(struct`)))))
=	O
mount_list	*(struct(*(char),*(char),*(char),long,*(struct(*(char),*(char),*(char),long,*(struct`)))))
;	O
struct	O
fs_usage	struct(long,long,long,long,long)
fs_use	struct(long,long,long,long,long)
;	O
while	O
(	O
temp	*(struct(*(char),*(char),*(char),long,*(struct(*(char),*(char),*(char),long,*(struct`)))))
)	O
{	O
i	array(int)
=	O
strlen	(*(char))->(long)
(	O
temp	*(struct(*(char),*(char),*(char),long,*(struct(*(char),*(char),*(char),long,*(struct`)))))
->	O
me_mountdir	*(char)
)	O
;	O
if	O
(	O
i	array(int)
>	O
len	int
&&	O
(	O
strncmp	(*(char),*(char),long)->(int)
(	O
path	*(char)
,	O
temp	*(struct(*(char),*(char),*(char),long,*(struct(*(char),*(char),*(char),long,*(struct`)))))
->	O
me_mountdir	*(char)
,	O
i	array(int)
)	O
==	O
0	int
)	O
)	O
if	O
(	O
!	O
entry	*(struct(*(char),*(char),*(char),long,*(struct(*(char),*(char),*(char),long,*(struct`)))))
||	O
(	O
path	*(char)
[	O
i	array(int)
]	O
==	O
PATH_SEP	char
||	O
path	*(char)
[	O
i	array(int)
]	O
==	O
0	int
)	O
)	O
{	O
len	int
=	O
i	array(int)
;	O
entry	*(struct(*(char),*(char),*(char),long,*(struct(*(char),*(char),*(char),long,*(struct`)))))
=	O
temp	*(struct(*(char),*(char),*(char),long,*(struct(*(char),*(char),*(char),long,*(struct`)))))
;	O
}	O
temp	*(struct(*(char),*(char),*(char),long,*(struct(*(char),*(char),*(char),long,*(struct`)))))
=	O
temp	*(struct(*(char),*(char),*(char),long,*(struct(*(char),*(char),*(char),long,*(struct`)))))
->	O
me_next	*(struct(*(char),*(char),*(char),long,*(struct(*(char),*(char),*(char),long,*(struct`)))))
;	O
}	O
if	O
(	O
entry	*(struct(*(char),*(char),*(char),long,*(struct(*(char),*(char),*(char),long,*(struct`)))))
)	O
{	O
memset	(*(void),int,long)->(*(void))
(	O
&	O
fs_use	struct(long,long,long,long,long)
,	O
0	int
,	O
sizeof	O
(	O
struct	O
fs_usage	struct(long,long,long,long,long)
)	O
)	O
;	O
get_fs_usage	(*(char),*(struct(long,long,long,long,long)))->(int)
(	O
entry	*(struct(*(char),*(char),*(char),long,*(struct(*(char),*(char),*(char),long,*(struct`)))))
->	O
me_mountdir	*(char)
,	O
&	O
fs_use	struct(long,long,long,long,long)
)	O
;	O
myfs_stats	*(struct(int,*(char),*(char),*(char),int,int,int,int))
->	O
type	enum(int,int,int,int)
=	O
entry	*(struct(*(char),*(char),*(char),long,*(struct(*(char),*(char),*(char),long,*(struct`)))))
->	O
me_dev	long
;	O
myfs_stats	*(struct(int,*(char),*(char),*(char),int,int,int,int))
->	O
typename	*(char)
=	O
entry	*(struct(*(char),*(char),*(char),long,*(struct(*(char),*(char),*(char),long,*(struct`)))))
->	O
me_type	*(char)
;	O
myfs_stats	*(struct(int,*(char),*(char),*(char),int,int,int,int))
->	O
mpoint	*(char)
=	O
entry	*(struct(*(char),*(char),*(char),long,*(struct(*(char),*(char),*(char),long,*(struct`)))))
->	O
me_mountdir	*(char)
;	O
myfs_stats	*(struct(int,*(char),*(char),*(char),int,int,int,int))
->	O
device	*(char)
=	O
entry	*(struct(*(char),*(char),*(char),long,*(struct(*(char),*(char),*(char),long,*(struct`)))))
->	O
me_devname	*(char)
;	O
myfs_stats	*(struct(int,*(char),*(char),*(char),int,int,int,int))
->	O
avail	int
=	O
getuid	()->(int)
(	O
)	O
?	O
fs_use	struct(long,long,long,long,long)
.	O
fsu_bavail	long
/	O
2	int
:	O
fs_use	struct(long,long,long,long,long)
.	O
fsu_bfree	long
/	O
2	int
;	O
myfs_stats	*(struct(int,*(char),*(char),*(char),int,int,int,int))
->	O
total	int
=	O
fs_use	struct(long,long,long,long,long)
.	O
fsu_blocks	long
/	O
2	int
;	O
myfs_stats	*(struct(int,*(char),*(char),*(char),int,int,int,int))
->	O
nfree	int
=	O
fs_use	struct(long,long,long,long,long)
.	O
fsu_ffree	long
;	O
myfs_stats	*(struct(int,*(char),*(char),*(char),int,int,int,int))
->	O
nodes	int
=	O
fs_use	struct(long,long,long,long,long)
.	O
fsu_files	long
;	O
}	O
else	O
{	O
myfs_stats	*(struct(int,*(char),*(char),*(char),int,int,int,int))
->	O
type	enum(int,int,int,int)
=	O
0	int
;	O
myfs_stats	*(struct(int,*(char),*(char),*(char),int,int,int,int))
->	O
mpoint	*(char)
=	O
"unknown"	*(char)
;	O
myfs_stats	*(struct(int,*(char),*(char),*(char),int,int,int,int))
->	O
device	*(char)
=	O
"unknown"	*(char)
;	O
myfs_stats	*(struct(int,*(char),*(char),*(char),int,int,int,int))
->	O
avail	int
=	O
0	int
;	O
myfs_stats	*(struct(int,*(char),*(char),*(char),int,int,int,int))
->	O
total	int
=	O
0	int
;	O
myfs_stats	*(struct(int,*(char),*(char),*(char),int,int,int,int))
->	O
nfree	int
=	O
0	int
;	O
myfs_stats	*(struct(int,*(char),*(char),*(char),int,int,int,int))
->	O
nodes	int
=	O
0	int
;	O
}	O
}	O
static	O
long	O
fs_adjust_blocks	(long,int,int)->(long)
(	O
long	O
blocks	long
,	O
int	O
fromsize	int
,	O
int	O
tosize	int
)	O
{	O
if	O
(	O
tosize	int
<=	O
0	int
)	O
abort	()->(void)
(	O
)	O
;	O
if	O
(	O
fromsize	int
<=	O
0	int
)	O
return	O
-	O
1	int
;	O
if	O
(	O
fromsize	int
==	O
tosize	int
)	O
return	O
blocks	long
;	O
else	O
if	O
(	O
fromsize	int
>	O
tosize	int
)	O
return	O
blocks	long
*	O
(	O
fromsize	int
/	O
tosize	int
)	O
;	O
else	O
return	O
(	O
blocks	long
+	O
(	O
blocks	long
<	O
0	int
?	O
-	O
1	int
:	O
1	int
)	O
)	O
/	O
(	O
tosize	int
/	O
fromsize	int
)	O
;	O
}	O
static	O
int	O
get_fs_usage	(*(char),*(struct(long,long,long,long,long)))->(int)
(	O
char	O
*	O
path	*(char)
,	O
struct	O
fs_usage	struct(long,long,long,long,long)
*	O
fsp	*(struct(long,long,long,long,long))
)	O
{	O
struct	O
statfs	struct(long,long,long,long,long,long,long,struct(array(int)),long,long,long,array(long))
fsd	struct(long,long,long,long,long,long,long,struct(array(int)),long,long,long,array(long))
;	O
if	O
(	O
statfs	struct(long,long,long,long,long,long,long,struct(array(int)),long,long,long,array(long))
(	O
path	*(char)
,	O
&	O
fsd	struct(long,long,long,long,long,long,long,struct(array(int)),long,long,long,array(long))
)	O
<	O
0	int
)	O
return	O
-	O
1	int
;	O
fsp	*(struct(long,long,long,long,long))
->	O
fsu_blocks	long
=	O
CONVERT_BLOCKS	O
(	O
fsd	struct(long,long,long,long,long,long,long,struct(array(int)),long,long,long,array(long))
.	O
f_blocks	long
)	O
;	O
fsp	*(struct(long,long,long,long,long))
->	O
fsu_bfree	long
=	O
CONVERT_BLOCKS	O
(	O
fsd	struct(long,long,long,long,long,long,long,struct(array(int)),long,long,long,array(long))
.	O
f_bfree	long
)	O
;	O
fsp	*(struct(long,long,long,long,long))
->	O
fsu_bavail	long
=	O
CONVERT_BLOCKS	O
(	O
fsd	struct(long,long,long,long,long,long,long,struct(array(int)),long,long,long,array(long))
.	O
f_bavail	long
)	O
;	O
fsp	*(struct(long,long,long,long,long))
->	O
fsu_files	long
=	O
fsd	struct(long,long,long,long,long,long,long,struct(array(int)),long,long,long,array(long))
.	O
f_files	long
;	O
fsp	*(struct(long,long,long,long,long))
->	O
fsu_ffree	long
=	O
fsd	struct(long,long,long,long,long,long,long,struct(array(int)),long,long,long,array(long))
.	O
f_ffree	long
;	O
return	O
0	int
;	O
}	O
