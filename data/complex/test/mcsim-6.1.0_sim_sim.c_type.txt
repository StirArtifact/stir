void	O
CorrectInputToTransition	O
(	O
PEXPERIMENT	O
pexp	O
,	O
PDOUBLE	*(double)
pdTtrans	O
)	O
{	O
pexp	O
->	O
dTime	O
=	O
*	O
pdTtrans	O
;	O
UpdateInputs	(*(double),*(double))->(void)
(	O
&	O
pexp	O
->	O
dTime	O
,	O
pdTtrans	O
)	O
;	O
}	O
int	O
Euler	O
(	O
long	O
neq	O
,	O
double	O
*	O
y	O
,	O
double	O
*	O
t	*(double)
,	O
double	O
tout	O
,	O
double	O
dTStep	double
)	O
{	O
static	O
PDOUBLE	*(double)
rgdDeriv	O
;	O
double	O
dTmp_step	O
;	O
long	O
i	O
;	O
if	O
(	O
!	O
(	O
rgdDeriv	O
)	O
)	O
if	O
(	O
!	O
(	O
rgdDeriv	O
=	O
InitdVector	(long)->(*(double))
(	O
neq	O
)	O
)	O
)	O
ReportError	O
(	O
NULL	O
,	O
RE_OUTOFMEM	O
|	O
RE_FATAL	O
,	O
"Euler"	*(char)
,	O
NULL	O
)	O
;	O
while	O
(	O
*	O
t	*(double)
<	O
tout	O
)	O
{	O
CalcDeriv	(array(double),array(double),*(double))->(void)
(	O
y	O
,	O
rgdDeriv	O
,	O
t	*(double)
)	O
;	O
*	O
t	*(double)
=	O
*	O
t	*(double)
+	O
dTStep	double
;	O
if	O
(	O
*	O
t	*(double)
>	O
tout	O
)	O
{	O
dTmp_step	O
=	O
tout	O
-	O
(	O
*	O
t	*(double)
-	O
dTStep	double
)	O
;	O
*	O
t	*(double)
=	O
tout	O
;	O
}	O
else	O
dTmp_step	O
=	O
dTStep	double
;	O
for	O
(	O
i	O
=	O
0	int
;	O
i	O
<	O
neq	O
;	O
i	O
++	O
)	O
y	O
[	O
i	O
]	O
=	O
y	O
[	O
i	O
]	O
+	O
dTmp_step	O
*	O
rgdDeriv	O
[	O
i	O
]	O
;	O
if	O
(	O
bDelays	O
)	O
StoreDelayed	O
(	O
*	O
t	*(double)
)	O
;	O
DoStep_by_Step	O
(	O
)	O
;	O
}	O
CalcDeriv	(array(double),array(double),*(double))->(void)
(	O
y	O
,	O
rgdDeriv	O
,	O
t	*(double)
)	O
;	O
return	O
(	O
0	int
)	O
;	O
}	O
void	O
FreeVarMod	O
(	O
PVOID	*(void)
pData	*(void)
)	O
{	O
PVARMOD	*(struct(long,union(double,*(struct(int,int,double,double,double,double,double,double,double,double,long,long,long,long,long,long,int,int,*`,*`,*`,*`,long,*`)))))
pvarmod	O
=	O
(	O
PVARMOD	*(struct(long,union(double,*(struct(int,int,double,double,double,double,double,double,double,double,long,long,long,long,long,long,int,int,*`,*`,*`,*`,long,*`)))))
)	O
pData	*(void)
;	O
if	O
(	O
IsInput	(long)->(int)
(	O
pvarmod	O
->	O
hvar	long
)	O
)	O
if	O
(	O
pvarmod	O
->	O
uvar	union(double,*(struct(int,int,double,double,double,double,double,double,double,double,long,long,long,long,long,long,int,int,*(double),*(double),*(long),*(long),long,*(int))))
.	O
pifn	*(struct(int,int,double,double,double,double,double,double,double,double,long,long,long,long,long,long,int,int,*(double),*(double),*(long),*(long),long,*(int)))
)	O
free	(*(void))->(void)
(	O
pvarmod	O
->	O
uvar	union(double,*(struct(int,int,double,double,double,double,double,double,double,double,long,long,long,long,long,long,int,int,*(double),*(double),*(long),*(long),long,*(int))))
.	O
pifn	*(struct(int,int,double,double,double,double,double,double,double,double,long,long,long,long,long,long,int,int,*(double),*(double),*(long),*(long),long,*(int)))
)	O
;	O
free	(*(void))->(void)
(	O
pvarmod	O
)	O
;	O
}	O
int	O
ModifyOneParm	O
(	O
PVOID	*(void)
pData	*(void)
,	O
PVOID	*(void)
pNullInfo	O
)	O
{	O
PVARMOD	*(struct(long,union(double,*(struct(int,int,double,double,double,double,double,double,double,double,long,long,long,long,long,long,int,int,*`,*`,*`,*`,long,*`)))))
pvarmod	O
=	O
(	O
PVARMOD	*(struct(long,union(double,*(struct(int,int,double,double,double,double,double,double,double,double,long,long,long,long,long,long,int,int,*`,*`,*`,*`,long,*`)))))
)	O
pData	*(void)
;	O
if	O
(	O
IsInput	(long)->(int)
(	O
pvarmod	O
->	O
hvar	long
)	O
)	O
SetInput	(long,*(struct(int,int,double,double,double,double,double,double,double,double,long,long,long,long,long,long,int,int,*(double),*(double),*(long),*(long),long,*(int))))->(int)
(	O
pvarmod	O
->	O
hvar	long
,	O
pvarmod	O
->	O
uvar	union(double,*(struct(int,int,double,double,double,double,double,double,double,double,long,long,long,long,long,long,int,int,*(double),*(double),*(long),*(long),long,*(int))))
.	O
pifn	*(struct(int,int,double,double,double,double,double,double,double,double,long,long,long,long,long,long,int,int,*(double),*(double),*(long),*(long),long,*(int)))
)	O
;	O
else	O
SetVar	(long,double)->(int)
(	O
pvarmod	O
->	O
hvar	long
,	O
pvarmod	O
->	O
uvar	union(double,*(struct(int,int,double,double,double,double,double,double,double,double,long,long,long,long,long,long,int,int,*(double),*(double),*(long),*(long),long,*(int))))
.	O
dVal	double
)	O
;	O
return	O
0	int
;	O
}	O
void	O
ModifyParms	O
(	O
PLIST	*(struct(*(struct(*(void),*(struct`))),*(struct(*(void),*(struct`))),int))
plistParmMods	O
)	O
{	O
assert	O
(	O
plistParmMods	O
)	O
;	O
ForAllList	(*(struct(*(struct(*`,*`)),*(struct(*`,*`)),int)),*((*(void),*(void))->(int)),*(void))->(int)
(	O
plistParmMods	O
,	O
&	O
ModifyOneParm	O
,	O
NULL	O
)	O
;	O
}	O
int	O
DoOneExperiment	O
(	O
PEXPERIMENT	O
pexp	O
)	O
{	O
double	O
dTout	O
;	O
double	O
dTtrans	O
;	O
double	O
dTup	O
;	O
int	O
iOut	O
;	O
PMODELINFO	O
pmod	O
;	O
PINTSPEC	*(struct(int,long,long,long,double,double,long,long,long,long,*(long),*(double),double))
pis	O
;	O
if	O
(	O
!	O
pexp	O
)	O
return	O
0	int
;	O
pmod	O
=	O
pexp	O
->	O
pmodelinfo	O
;	O
pis	O
=	O
&	O
(	O
pexp	O
->	O
is	O
)	O
;	O
if	O
(	O
!	O
InitOutputs	O
(	O
pexp	O
,	O
&	O
iOut	O
,	O
&	O
dTout	O
)	O
)	O
return	O
0	int
;	O
if	O
(	O
pexp	O
->	O
hT0	long
)	O
pexp	O
->	O
dT0	double
=	O
GetVarValue	(long)->(double)
(	O
pexp	O
->	O
hT0	long
)	O
;	O
UpdateInputs	(*(double),*(double))->(void)
(	O
&	O
pexp	O
->	O
dT0	double
,	O
&	O
dTtrans	O
)	O
;	O
if	O
(	O
bDelays	O
)	O
InitDelays	O
(	O
pexp	O
->	O
hT0	long
)	O
;	O
if	O
(	O
pexp	O
->	O
dT0	double
>	O
dTtrans	O
)	O
{	O
printf	(*(char))->(int)
(	O
"\nError: starting time is greater than first discontinuity,"	*(char)
"       check your inputs - Exiting.\n\n"	*(char)
)	O
;	O
exit	(int)->(void)
(	O
0	int
)	O
;	O
}	O
if	O
(	O
pexp	O
->	O
dT0	double
>	O
dTout	O
)	O
{	O
printf	(*(char))->(int)
(	O
"\nError: starting time is greater than first output time,"	*(char)
"       check your outputs - Exiting.\n\n"	*(char)
)	O
;	O
exit	(int)->(void)
(	O
0	int
)	O
;	O
}	O
pexp	O
->	O
dTime	O
=	O
pexp	O
->	O
dT0	double
;	O
if	O
(	O
pis	O
->	O
iAlgo	int
==	O
IAL_LSODES	O
)	O
{	O
pis	O
->	O
iDSFlag	long
=	O
1	int
;	O
}	O
else	O
{	O
if	O
(	O
pis	O
->	O
iAlgo	int
==	O
IAL_CVODES	O
)	O
{	O
}	O
}	O
while	O
(	O
pexp	O
->	O
dTime	O
<	O
pexp	O
->	O
dTfinal	O
)	O
{	O
if	O
(	O
pmod	O
->	O
nStates	O
>	O
0	int
)	O
{	O
if	O
(	O
fabs	(double)->(double)
(	O
dTout	O
-	O
dTtrans	O
)	O
<	O
DBL_EPSILON	O
*	O
2.0	int
*	O
mymax	O
(	O
fabs	(double)->(double)
(	O
dTout	O
)	O
,	O
fabs	(double)->(double)
(	O
dTtrans	O
)	O
)	O
)	O
dTtrans	O
=	O
dTout	O
;	O
dTup	O
=	O
(	O
dTout	O
<	O
dTtrans	O
)	O
?	O
dTout	O
:	O
dTtrans	O
;	O
if	O
(	O
fabs	(double)->(double)
(	O
dTup	O
-	O
pexp	O
->	O
dTime	O
)	O
<	O
DBL_EPSILON	O
*	O
2.0	int
*	O
mymax	O
(	O
fabs	(double)->(double)
(	O
dTup	O
)	O
,	O
fabs	(double)->(double)
(	O
pexp	O
->	O
dTime	O
)	O
)	O
)	O
pexp	O
->	O
dTime	O
=	O
dTup	O
;	O
if	O
(	O
pis	O
->	O
iAlgo	int
==	O
IAL_LSODES	O
)	O
{	O
pis	O
->	O
rwork	*(double)
[	O
0	int
]	O
=	O
dTup	O
;	O
lsodes_	O
(	O
&	O
pmod	O
->	O
nStates	O
,	O
pmod	O
->	O
pdModelVars	O
,	O
&	O
(	O
pexp	O
)	O
->	O
dTime	O
,	O
&	O
dTup	O
,	O
&	O
pis	O
->	O
itol	long
,	O
&	O
pis	O
->	O
dRtol	double
,	O
&	O
pis	O
->	O
dAtol	double
,	O
&	O
pis	O
->	O
itask	long
,	O
&	O
pis	O
->	O
iDSFlag	long
,	O
&	O
pis	O
->	O
iopt	long
,	O
pis	O
->	O
rwork	*(double)
,	O
&	O
pis	O
->	O
lrw	long
,	O
pis	O
->	O
iwork	*(long)
,	O
&	O
pis	O
->	O
liw	long
,	O
&	O
pis	O
->	O
iMf	long
)	O
;	O
if	O
(	O
pis	O
->	O
iDSFlag	long
<	O
0	int
)	O
{	O
return	O
(	O
0	int
)	O
;	O
}	O
}	O
else	O
{	O
if	O
(	O
pis	O
->	O
iAlgo	int
==	O
IAL_CVODES	O
)	O
{	O
}	O
else	O
if	O
(	O
pis	O
->	O
iAlgo	int
==	O
IAL_EULER	O
)	O
{	O
Euler	O
(	O
pmod	O
->	O
nStates	O
,	O
pmod	O
->	O
pdModelVars	O
,	O
&	O
(	O
pexp	O
)	O
->	O
dTime	O
,	O
dTup	O
,	O
pis	O
->	O
dTStep	double
)	O
;	O
}	O
}	O
}	O
else	O
{	O
pexp	O
->	O
dTime	O
=	O
(	O
dTout	O
<	O
dTtrans	O
)	O
?	O
dTout	O
:	O
dTtrans	O
;	O
}	O
if	O
(	O
dTtrans	O
<=	O
dTout	O
)	O
{	O
if	O
(	O
dTtrans	O
<	O
dTout	O
)	O
{	O
if	O
(	O
dTtrans	O
<	O
pexp	O
->	O
dTfinal	O
)	O
{	O
CorrectInputToTransition	O
(	O
pexp	O
,	O
&	O
dTtrans	O
)	O
;	O
pis	O
->	O
iDSFlag	long
=	O
1	int
;	O
}	O
}	O
else	O
{	O
if	O
(	O
dTtrans	O
<	O
pexp	O
->	O
dTfinal	O
)	O
{	O
CorrectInputToTransition	O
(	O
pexp	O
,	O
&	O
dTtrans	O
)	O
;	O
pis	O
->	O
iDSFlag	long
=	O
1	int
;	O
}	O
SaveOutputs	O
(	O
pexp	O
,	O
&	O
dTout	O
)	O
;	O
NextOutputTime	O
(	O
pexp	O
,	O
&	O
dTout	O
,	O
&	O
iOut	O
)	O
;	O
}	O
}	O
else	O
{	O
SaveOutputs	O
(	O
pexp	O
,	O
&	O
dTout	O
)	O
;	O
NextOutputTime	O
(	O
pexp	O
,	O
&	O
dTout	O
,	O
&	O
iOut	O
)	O
;	O
}	O
}	O
if	O
(	O
pis	O
->	O
iAlgo	int
==	O
IAL_CVODES	O
)	O
{	O
}	O
return	O
1	int
;	O
}	O
int	O
DoOneNormalExp	O
(	O
PANALYSIS	O
panal	O
,	O
PEXPERIMENT	O
pexp	O
)	O
{	O
printf	(*(char))->(int)
(	O
" %d"	*(char)
,	O
pexp	O
->	O
iExp	O
)	O
;	O
InitModel	()->(void)
(	O
)	O
;	O
ModifyParms	O
(	O
panal	O
->	O
expGlobal	O
.	O
plistParmMods	O
)	O
;	O
ModifyParms	O
(	O
pexp	O
->	O
plistParmMods	O
)	O
;	O
if	O
(	O
!	O
DoOneExperiment	O
(	O
pexp	O
)	O
)	O
{	O
return	O
0	int
;	O
}	O
printf	(*(char))->(int)
(	O
"\n"	*(char)
)	O
;	O
return	O
(	O
1	int
)	O
;	O
}	O
int	O
DoOneMCExp	O
(	O
PANALYSIS	O
panal	O
,	O
PEXPERIMENT	O
pexp	O
)	O
{	O
register	O
MONTECARLO	O
*	O
pmc	O
=	O
&	O
panal	O
->	O
mc	O
;	O
InitModel	()->(void)
(	O
)	O
;	O
ModifyParms	O
(	O
panal	O
->	O
expGlobal	O
.	O
plistParmMods	O
)	O
;	O
SetParms	O
(	O
pmc	O
->	O
nParms	O
,	O
pmc	O
->	O
rghvar	O
,	O
pmc	O
->	O
rgdParms	O
)	O
;	O
ModifyParms	O
(	O
pexp	O
->	O
plistParmMods	O
)	O
;	O
if	O
(	O
!	O
DoOneExperiment	O
(	O
pexp	O
)	O
)	O
{	O
return	O
0	int
;	O
}	O
return	O
(	O
1	int
)	O
;	O
}	O
void	O
DoNormal	O
(	O
PANALYSIS	O
panal	O
)	O
{	O
int	O
nExps	O
=	O
panal	O
->	O
expGlobal	O
.	O
iExp	O
;	O
int	O
i	O
;	O
printf	(*(char))->(int)
(	O
"\nDoing analysis - %d normal experiment%c\n"	*(char)
,	O
nExps	O
,	O
(	O
nExps	O
>	O
1	int
?	O
's'	O
:	O
' '	O
)	O
)	O
;	O
for	O
(	O
i	O
=	O
0	int
;	O
i	O
<	O
nExps	O
;	O
i	O
++	O
)	O
{	O
if	O
(	O
DoOneNormalExp	O
(	O
panal	O
,	O
panal	O
->	O
rgpExps	O
[	O
i	O
]	O
)	O
)	O
{	O
WriteNormalOutput	O
(	O
panal	O
,	O
panal	O
->	O
rgpExps	O
[	O
i	O
]	O
)	O
;	O
}	O
else	O
printf	(*(char))->(int)
(	O
"Warning: Integration failed - No output generated\n"	*(char)
)	O
;	O
}	O
}	O
void	O
DoMonteCarlo	O
(	O
PANALYSIS	O
panal	O
)	O
{	O
int	O
nExps	O
=	O
panal	O
->	O
expGlobal	O
.	O
iExp	O
;	O
long	O
nRuns	O
=	O
panal	O
->	O
mc	O
.	O
nRuns	O
;	O
MCPREDOUT	O
mcpredout	O
;	O
BOOL	int
bOK	O
;	O
long	O
i	O
,	O
j	O
;	O
if	O
(	O
panal	O
->	O
rank	int
==	O
0	int
)	O
{	O
printf	(*(char))->(int)
(	O
"Doing %ld Monte Carlo simulation%c, %d experiment%c%s\n"	*(char)
,	O
nRuns	O
,	O
(	O
nRuns	O
!=	O
1	int
?	O
's'	O
:	O
' '	O
)	O
,	O
nExps	O
,	O
(	O
nExps	O
>	O
1	int
?	O
's'	O
:	O
' '	O
)	O
,	O
(	O
nRuns	O
!=	O
1	int
?	O
" each"	*(char)
:	O
"."	*(char)
)	O
)	O
;	O
if	O
(	O
panal	O
->	O
size	O
>	O
1	int
)	O
printf	(*(char))->(int)
(	O
"Split between %d processors\n"	*(char)
,	O
panal	O
->	O
size	O
)	O
;	O
}	O
else	O
printf	(*(char))->(int)
(	O
"\n"	*(char)
)	O
;	O
SetParents	O
(	O
&	O
panal	O
->	O
mc	O
,	O
0	int
)	O
;	O
OpenMCFiles	O
(	O
panal	O
)	O
;	O
mcpredout	O
.	O
pred	O
=	O
NULL	O
;	O
for	O
(	O
i	O
=	O
panal	O
->	O
rank	int
;	O
i	O
<	O
nRuns	O
;	O
i	O
+=	O
panal	O
->	O
size	O
)	O
{	O
if	O
(	O
i	O
==	O
0	int
)	O
printf	(*(char))->(int)
(	O
"\n"	*(char)
)	O
;	O
if	O
(	O
panal	O
->	O
bOutputIter	O
&&	O
(	O
(	O
i	O
+	O
1	int
)	O
%	O
panal	O
->	O
nOutputFreq	O
==	O
0	int
)	O
)	O
{	O
if	O
(	O
panal	O
->	O
size	O
>	O
1	int
)	O
printf	(*(char))->(int)
(	O
"Processor %d, Iteration %ld\n"	*(char)
,	O
panal	O
->	O
rank	int
,	O
i	O
+	O
1	int
)	O
;	O
else	O
printf	(*(char))->(int)
(	O
"Iteration %ld\n"	*(char)
,	O
i	O
+	O
1	int
)	O
;	O
}	O
panal	O
->	O
mc	O
.	O
lRun	O
=	O
i	O
;	O
CalcMCParms	O
(	O
&	O
panal	O
->	O
mc	O
,	O
NULL	O
,	O
0	int
)	O
;	O
for	O
(	O
j	O
=	O
0	int
;	O
j	O
<	O
nExps	O
;	O
j	O
++	O
)	O
{	O
bOK	O
=	O
DoOneMCExp	O
(	O
panal	O
,	O
panal	O
->	O
rgpExps	O
[	O
j	O
]	O
)	O
;	O
if	O
(	O
!	O
bOK	O
)	O
break	O
;	O
}	O
if	O
(	O
bOK	O
)	O
{	O
TransformPred	O
(	O
panal	O
,	O
&	O
mcpredout	O
)	O
;	O
WriteMCOutput	O
(	O
panal	O
,	O
&	O
mcpredout	O
)	O
;	O
}	O
else	O
printf	(*(char))->(int)
(	O
"Warning: Integration failed on iteration %ld, experiment %ld:\n"	*(char)
"         No output generated\n"	*(char)
,	O
panal	O
->	O
mc	O
.	O
lRun	O
+	O
1	int
,	O
j	O
+	O
1	int
)	O
;	O
}	O
CloseMCFiles	O
(	O
panal	O
)	O
;	O
if	O
(	O
mcpredout	O
.	O
pred	O
)	O
free	(*(void))->(void)
(	O
mcpredout	O
.	O
pred	O
)	O
;	O
}	O
void	O
DoSetPoints	O
(	O
PANALYSIS	O
panal	O
)	O
{	O
int	O
nExps	O
=	O
panal	O
->	O
expGlobal	O
.	O
iExp	O
;	O
long	O
nRuns	O
=	O
panal	O
->	O
mc	O
.	O
nRuns	O
;	O
MCPREDOUT	O
mcpredout	O
;	O
BOOL	int
bOK	O
=	O
FALSE	O
,	O
bNotDone	O
;	O
int	O
i	O
;	O
mcpredout	O
.	O
pred	O
=	O
NULL	O
;	O
OpenMCFiles	O
(	O
panal	O
)	O
;	O
if	O
(	O
panal	O
->	O
rank	int
==	O
0	int
)	O
{	O
printf	(*(char))->(int)
(	O
"Doing analysis - %ld SetPoints run%c... %d experiment%c%s\n"	*(char)
,	O
nRuns	O
,	O
(	O
nRuns	O
!=	O
1	int
?	O
's'	O
:	O
' '	O
)	O
,	O
nExps	O
,	O
(	O
nExps	O
>	O
1	int
?	O
's'	O
:	O
' '	O
)	O
,	O
(	O
nRuns	O
!=	O
1	int
?	O
" each"	*(char)
:	O
" "	*(char)
)	O
)	O
;	O
if	O
(	O
panal	O
->	O
size	O
>	O
1	int
)	O
printf	(*(char))->(int)
(	O
"Split between %d processors\n"	*(char)
,	O
panal	O
->	O
size	O
)	O
;	O
}	O
else	O
printf	(*(char))->(int)
(	O
"\n"	*(char)
)	O
;	O
if	O
(	O
(	O
!	O
nRuns	O
)	O
&&	O
panal	O
->	O
rank	int
==	O
0	int
)	O
printf	(*(char))->(int)
(	O
"0 runs specified for SetPoint(). Reading entire file.\n\n"	*(char)
)	O
;	O
SetParents	O
(	O
&	O
panal	O
->	O
mc	O
,	O
panal	O
->	O
mc	O
.	O
nSetParms	O
)	O
;	O
panal	O
->	O
mc	O
.	O
lRun	O
=	O
0	int
;	O
bNotDone	O
=	O
TRUE	O
;	O
while	O
(	O
bNotDone	O
)	O
{	O
bNotDone	O
=	O
GetSPMods	O
(	O
panal	O
,	O
NULL	O
)	O
;	O
if	O
(	O
(	O
bNotDone	O
)	O
&&	O
(	O
panal	O
->	O
mc	O
.	O
lRun	O
%	O
panal	O
->	O
size	O
==	O
panal	O
->	O
rank	int
)	O
)	O
{	O
if	O
(	O
panal	O
->	O
bOutputIter	O
&&	O
(	O
(	O
panal	O
->	O
mc	O
.	O
lRun	O
+	O
1	int
)	O
%	O
panal	O
->	O
nOutputFreq	O
==	O
0	int
)	O
)	O
{	O
if	O
(	O
panal	O
->	O
size	O
>	O
1	int
)	O
printf	(*(char))->(int)
(	O
"Processor %d, Iteration %ld\n"	*(char)
,	O
panal	O
->	O
rank	int
,	O
panal	O
->	O
mc	O
.	O
lRun	O
+	O
1	int
)	O
;	O
else	O
printf	(*(char))->(int)
(	O
"Iteration %ld\n"	*(char)
,	O
panal	O
->	O
mc	O
.	O
lRun	O
+	O
1	int
)	O
;	O
}	O
for	O
(	O
i	O
=	O
0	int
;	O
i	O
<	O
nExps	O
;	O
i	O
++	O
)	O
{	O
bOK	O
=	O
DoOneMCExp	O
(	O
panal	O
,	O
panal	O
->	O
rgpExps	O
[	O
i	O
]	O
)	O
;	O
if	O
(	O
!	O
bOK	O
)	O
break	O
;	O
}	O
if	O
(	O
bOK	O
)	O
{	O
TransformPred	O
(	O
panal	O
,	O
&	O
mcpredout	O
)	O
;	O
WriteMCOutput	O
(	O
panal	O
,	O
&	O
mcpredout	O
)	O
;	O
}	O
else	O
printf	(*(char))->(int)
(	O
"Warning: Integration failed on iteration %ld, experiment %d:\n"	*(char)
"         No output generated\n"	*(char)
,	O
panal	O
->	O
mc	O
.	O
lRun	O
+	O
1	int
,	O
i	O
+	O
1	int
)	O
;	O
}	O
panal	O
->	O
mc	O
.	O
lRun	O
++	O
;	O
if	O
(	O
nRuns	O
)	O
bNotDone	O
=	O
(	O
panal	O
->	O
mc	O
.	O
lRun	O
<	O
nRuns	O
)	O
;	O
}	O
CloseMCFiles	O
(	O
panal	O
)	O
;	O
if	O
(	O
mcpredout	O
.	O
pred	O
)	O
free	(*(void))->(void)
(	O
mcpredout	O
.	O
pred	O
)	O
;	O
}	O
void	O
DoAnalysis	O
(	O
PANALYSIS	O
panal	O
)	O
{	O
if	O
(	O
panal	O
->	O
size	O
==	O
1	int
)	O
InitRandom	(int,double,int)->(void)
(	O
panal	O
->	O
rank	int
,	O
panal	O
->	O
dSeed	double
,	O
TRUE	O
)	O
;	O
else	O
InitRandom	(int,double,int)->(void)
(	O
panal	O
->	O
rank	int
,	O
panal	O
->	O
dSeed	double
+	O
panal	O
->	O
rank	int
,	O
TRUE	O
)	O
;	O
switch	O
(	O
panal	O
->	O
iType	int
)	O
{	O
default	O
:	O
case	O
AT_DEFAULTSIM	O
:	O
if	O
(	O
panal	O
->	O
rank	int
==	O
0	int
)	O
DoNormal	O
(	O
panal	O
)	O
;	O
break	O
;	O
case	O
AT_SETPOINTS	O
:	O
DoSetPoints	O
(	O
panal	O
)	O
;	O
break	O
;	O
case	O
AT_MONTECARLO	O
:	O
DoMonteCarlo	O
(	O
panal	O
)	O
;	O
break	O
;	O
case	O
AT_MCMC	O
:	O
DoMarkov	O
(	O
panal	O
)	O
;	O
break	O
;	O
case	O
AT_OPTDESIGN	O
:	O
if	O
(	O
panal	O
->	O
rank	int
==	O
0	int
)	O
DoOptimalDesign	O
(	O
panal	O
)	O
;	O
break	O
;	O
}	O
if	O
(	O
panal	O
->	O
pfileOut	O
)	O
{	O
fclose	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
panal	O
->	O
pfileOut	O
)	O
;	O
printf	(*(char))->(int)
(	O
"Wrote output file \"%s\"\n"	*(char)
,	O
panal	O
->	O
szOutfilename	O
)	O
;	O
}	O
}	O
void	O
FreeMemory	O
(	O
PANALYSIS	O
panal	O
)	O
{	O
int	O
i	O
,	O
j	O
;	O
free	(*(void))->(void)
(	O
panal	O
->	O
modelinfo	O
.	O
pStateHvar	O
)	O
;	O
FreeList	(*(*(struct(*(struct`),*(struct`),int))),*((*(void))->(void)),int)->(void)
(	O
&	O
panal	O
->	O
mc	O
.	O
plistMCVars	O
,	O
NULL	O
,	O
TRUE	O
)	O
;	O
if	O
(	O
panal	O
->	O
mc	O
.	O
rgdParms	O
)	O
{	O
free	(*(void))->(void)
(	O
panal	O
->	O
mc	O
.	O
rgdParms	O
)	O
;	O
free	(*(void))->(void)
(	O
panal	O
->	O
mc	O
.	O
rghvar	O
)	O
;	O
}	O
PINTSPEC	*(struct(int,long,long,long,double,double,long,long,long,long,*(long),*(double),double))
pis	O
=	O
&	O
panal	O
->	O
rgpExps	O
[	O
0	int
]	O
->	O
is	O
;	O
free	(*(void))->(void)
(	O
pis	O
->	O
iwork	*(long)
)	O
;	O
free	(*(void))->(void)
(	O
pis	O
->	O
rwork	*(double)
)	O
;	O
for	O
(	O
i	O
=	O
0	int
;	O
i	O
<	O
panal	O
->	O
expGlobal	O
.	O
iExp	O
;	O
i	O
++	O
)	O
{	O
if	O
(	O
panal	O
->	O
rgpExps	O
[	O
i	O
]	O
!=	O
NULL	O
)	O
{	O
FreeList	(*(*(struct(*(struct`),*(struct`),int))),*((*(void))->(void)),int)->(void)
(	O
&	O
panal	O
->	O
rgpExps	O
[	O
i	O
]	O
->	O
plistParmMods	O
,	O
&	O
FreeVarMod	O
,	O
TRUE	O
)	O
;	O
POUTSPEC	*(struct(int,*(struct(*(struct`),*(struct`),int)),*(*(char)),*(long),int,*(struct(*(struct`),*(struct`),int)),*(*(char)),*(long),*(int),*(int),*(*(double)),*(*(double)),int,*(double),*(int),*(*(double))))
pos	O
=	O
&	O
panal	O
->	O
rgpExps	O
[	O
i	O
]	O
->	O
os	O
;	O
free	(*(void))->(void)
(	O
pos	O
->	O
pszOutputNames	*(*(char))
)	O
;	O
free	(*(void))->(void)
(	O
pos	O
->	O
phvar_out	*(long)
)	O
;	O
free	(*(void))->(void)
(	O
pos	O
->	O
pcOutputTimes	*(int)
)	O
;	O
free	(*(void))->(void)
(	O
pos	O
->	O
piCurrentOut	*(int)
)	O
;	O
free	(*(void))->(void)
(	O
pos	O
->	O
prgdOutputTimes	*(*(double))
)	O
;	O
for	O
(	O
j	O
=	O
0	int
;	O
j	O
<	O
pos	O
->	O
nOutputs	int
;	O
j	O
++	O
)	O
free	(*(void))->(void)
(	O
pos	O
->	O
prgdOutputVals	*(*(double))
[	O
j	O
]	O
)	O
;	O
free	(*(void))->(void)
(	O
pos	O
->	O
prgdOutputVals	*(*(double))
)	O
;	O
free	(*(void))->(void)
(	O
pos	O
->	O
rgdDistinctTimes	*(double)
)	O
;	O
ForAllList	(*(struct(*(struct(*`,*`)),*(struct(*`,*`)),int)),*((*(void),*(void))->(int)),*(void))->(int)
(	O
pos	O
->	O
plistPrintRecs	*(struct(*(struct(*(void),*(struct`))),*(struct(*(void),*(struct`))),int))
,	O
&	O
FreePrintRec	O
,	O
NULL	O
)	O
;	O
FreeList	(*(*(struct(*(struct`),*(struct`),int))),*((*(void))->(void)),int)->(void)
(	O
&	O
pos	O
->	O
plistPrintRecs	*(struct(*(struct(*(void),*(struct`))),*(struct(*(void),*(struct`))),int))
,	O
NULL	O
,	O
FALSE	O
)	O
;	O
free	(*(void))->(void)
(	O
pos	O
->	O
plistPrintRecs	*(struct(*(struct(*(void),*(struct`))),*(struct(*(void),*(struct`))),int))
)	O
;	O
ForAllList	(*(struct(*(struct(*`,*`)),*(struct(*`,*`)),int)),*((*(void),*(void))->(int)),*(void))->(int)
(	O
pos	O
->	O
plistDataRecs	*(struct(*(struct(*(void),*(struct`))),*(struct(*(void),*(struct`))),int))
,	O
&	O
FreeDataRec	O
,	O
NULL	O
)	O
;	O
FreeList	(*(*(struct(*(struct`),*(struct`),int))),*((*(void))->(void)),int)->(void)
(	O
&	O
pos	O
->	O
plistDataRecs	*(struct(*(struct(*(void),*(struct`))),*(struct(*(void),*(struct`))),int))
,	O
NULL	O
,	O
FALSE	O
)	O
;	O
free	(*(void))->(void)
(	O
pos	O
->	O
plistDataRecs	*(struct(*(struct(*(void),*(struct`))),*(struct(*(void),*(struct`))),int))
)	O
;	O
free	(*(void))->(void)
(	O
panal	O
->	O
rgpExps	O
[	O
i	O
]	O
)	O
;	O
}	O
}	O
if	O
(	O
panal	O
->	O
bAllocatedFileName	O
)	O
{	O
if	O
(	O
panal	O
->	O
szOutfilename	O
)	O
free	(*(void))->(void)
(	O
panal	O
->	O
szOutfilename	O
)	O
;	O
if	O
(	O
panal	O
->	O
mc	O
.	O
szMCOutfilename	O
)	O
free	(*(void))->(void)
(	O
panal	O
->	O
mc	O
.	O
szMCOutfilename	O
)	O
;	O
if	O
(	O
panal	O
->	O
gd	O
.	O
szGout	O
)	O
free	(*(void))->(void)
(	O
panal	O
->	O
gd	O
.	O
szGout	O
)	O
;	O
}	O
if	O
(	O
panal	O
->	O
mc	O
.	O
szSetPointsFilename	O
)	O
free	(*(void))->(void)
(	O
panal	O
->	O
mc	O
.	O
szSetPointsFilename	O
)	O
;	O
if	O
(	O
panal	O
->	O
gd	O
.	O
szGrestart	O
)	O
free	(*(void))->(void)
(	O
panal	O
->	O
gd	O
.	O
szGrestart	O
)	O
;	O
if	O
(	O
panal	O
->	O
gd	O
.	O
szGdata	O
)	O
free	(*(void))->(void)
(	O
panal	O
->	O
gd	O
.	O
szGdata	O
)	O
;	O
FreeList	(*(*(struct(*(struct`),*(struct`),int))),*((*(void))->(void)),int)->(void)
(	O
&	O
panal	O
->	O
expGlobal	O
.	O
plistParmMods	O
,	O
NULL	O
,	O
TRUE	O
)	O
;	O
free	(*(void))->(void)
(	O
panal	O
)	O
;	O
}	O
MCVAR	O
*	O
*	O
vrgpMCVar	O
;	O
int	O
viMCVar	O
;	O
int	O
MCVarListToArray	O
(	O
PVOID	*(void)
pv_pMCVar	O
,	O
PVOID	*(void)
pv_Null	O
)	O
{	O
vrgpMCVar	O
[	O
viMCVar	O
]	O
=	O
(	O
MCVAR	O
*	O
)	O
pv_pMCVar	O
;	O
viMCVar	O
++	O
;	O
return	O
1	int
;	O
}	O
void	O
PrepAnalysis	O
(	O
PANALYSIS	O
panal	O
)	O
{	O
register	O
MONTECARLO	O
*	O
pmc	O
=	O
&	O
panal	O
->	O
mc	O
;	O
register	O
int	O
l	O
;	O
pmc	O
->	O
nParms	O
=	O
ListLength	O
(	O
pmc	O
->	O
plistMCVars	O
)	O
;	O
if	O
(	O
pmc	O
->	O
nParms	O
==	O
0	int
)	O
return	O
;	O
pmc	O
->	O
rgdParms	O
=	O
InitdVector	(long)->(*(double))
(	O
pmc	O
->	O
nParms	O
)	O
;	O
pmc	O
->	O
rgpMCVar	O
=	O
(	O
MCVAR	O
*	O
*	O
)	O
malloc	(long)->(*(void))
(	O
(	O
pmc	O
->	O
nParms	O
)	O
*	O
sizeof	O
(	O
MCVAR	O
*	O
)	O
)	O
;	O
if	O
(	O
!	O
(	O
pmc	O
->	O
rgdParms	O
&&	O
pmc	O
->	O
rgpMCVar	O
)	O
)	O
ReportError	O
(	O
NULL	O
,	O
RE_OUTOFMEM	O
|	O
RE_FATAL	O
,	O
"PrepAnalysis"	*(char)
,	O
NULL	O
)	O
;	O
vrgpMCVar	O
=	O
&	O
pmc	O
->	O
rgpMCVar	O
[	O
0	int
]	O
;	O
viMCVar	O
=	O
0	int
;	O
ForAllList	(*(struct(*(struct(*`,*`)),*(struct(*`,*`)),int)),*((*(void),*(void))->(int)),*(void))->(int)
(	O
pmc	O
->	O
plistMCVars	O
,	O
MCVarListToArray	O
,	O
(	O
PVOID	*(void)
)	O
NULL	O
)	O
;	O
FreeList	(*(*(struct(*(struct`),*(struct`),int))),*((*(void))->(void)),int)->(void)
(	O
&	O
pmc	O
->	O
plistMCVars	O
,	O
NULL	O
,	O
FALSE	O
)	O
;	O
pmc	O
->	O
rghvar	O
=	O
(	O
HVAR	long
*	O
)	O
malloc	(long)->(*(void))
(	O
(	O
pmc	O
->	O
nParms	O
)	O
*	O
sizeof	O
(	O
HVAR	long
)	O
)	O
;	O
if	O
(	O
pmc	O
->	O
rghvar	O
)	O
{	O
for	O
(	O
l	O
=	O
0	int
;	O
l	O
<	O
pmc	O
->	O
nParms	O
;	O
l	O
++	O
)	O
pmc	O
->	O
rghvar	O
[	O
l	O
]	O
=	O
pmc	O
->	O
rgpMCVar	O
[	O
l	O
]	O
->	O
hvar	long
;	O
}	O
else	O
ReportError	O
(	O
NULL	O
,	O
RE_OUTOFMEM	O
|	O
RE_FATAL	O
,	O
"PrepAnalysis"	*(char)
,	O
NULL	O
)	O
;	O
}	O
void	O
PromptFilenames	O
(	O
PSTR	*(char)
*	O
pszFileIn	O
,	O
PSTR	*(char)
*	O
pszFileOut	O
)	O
{	O
*	O
pszFileIn	O
=	O
(	O
PSTR	*(char)
)	O
calloc	(long,long)->(*(void))
(	O
1	int
,	O
MAX_FILENAMESIZE	O
)	O
;	O
*	O
pszFileOut	O
=	O
(	O
PSTR	*(char)
)	O
calloc	(long,long)->(*(void))
(	O
1	int
,	O
MAX_FILENAMESIZE	O
)	O
;	O
printf	(*(char))->(int)
(	O
"Input filename? "	*(char)
)	O
;	O
if	O
(	O
!	O
fgets	(*(char),int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(*(char))
(	O
*	O
pszFileIn	O
,	O
MAX_FILENAMESIZE	O
,	O
stdin	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
)	O
{	O
ReportError	O
(	O
NULL	O
,	O
RE_READERROR	O
|	O
RE_FATAL	O
,	O
"stdin"	*(char)
,	O
NULL	O
)	O
;	O
}	O
else	O
*	O
pszFileIn	O
=	O
strtok	(*(char),*(char))->(*(char))
(	O
*	O
pszFileIn	O
,	O
" \t\n"	*(char)
)	O
;	O
if	O
(	O
!	O
(	O
*	O
pszFileIn	O
)	O
)	O
return	O
;	O
if	O
(	O
(	O
*	O
pszFileIn	O
)	O
[	O
0	int
]	O
)	O
{	O
printf	(*(char))->(int)
(	O
"Output filename? "	*(char)
)	O
;	O
if	O
(	O
!	O
fgets	(*(char),int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(*(char))
(	O
*	O
pszFileOut	O
,	O
MAX_FILENAMESIZE	O
,	O
stdin	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
)	O
{	O
ReportError	O
(	O
NULL	O
,	O
RE_READERROR	O
|	O
RE_FATAL	O
,	O
"stdin"	*(char)
,	O
NULL	O
)	O
;	O
}	O
else	O
*	O
pszFileOut	O
=	O
strtok	(*(char),*(char))->(*(char))
(	O
*	O
pszFileOut	O
,	O
" \t\n"	*(char)
)	O
;	O
}	O
if	O
(	O
!	O
(	O
*	O
pszFileOut	O
)	O
||	O
!	O
(	O
*	O
pszFileOut	O
)	O
[	O
0	int
]	O
)	O
{	O
free	(*(void))->(void)
(	O
*	O
pszFileOut	O
)	O
;	O
*	O
pszFileOut	O
=	O
NULL	O
;	O
}	O
else	O
{	O
*	O
pszFileIn	O
=	O
(	O
PSTR	*(char)
)	O
realloc	(*(void),long)->(*(void))
(	O
*	O
pszFileIn	O
,	O
MyStrlen	O
(	O
*	O
pszFileIn	O
)	O
+	O
1	int
)	O
;	O
*	O
pszFileOut	O
=	O
(	O
PSTR	*(char)
)	O
realloc	(*(void),long)->(*(void))
(	O
*	O
pszFileOut	O
,	O
MyStrlen	O
(	O
*	O
pszFileOut	O
)	O
+	O
1	int
)	O
;	O
}	O
}	O
static	O
char	O
vszOptions	O
[	O
]	O
=	O
"c::h::H::i:D:"	*(char)
;	O
void	O
GetCmdLineArgs	O
(	O
int	O
cArg	O
,	O
char	O
*	O
const	O
*	O
rgszArg	O
,	O
PSTR	*(char)
*	O
pszFileIn	O
,	O
PSTR	*(char)
*	O
pszFileOut	O
,	O
PANALYSIS	O
panal	O
)	O
{	O
int	O
c	O
;	O
*	O
pszFileIn	O
=	O
*	O
pszFileOut	O
=	O
(	O
PSTR	*(char)
)	O
NULL	O
;	O
while	O
(	O
1	int
)	O
{	O
c	O
=	O
_getopt	O
(	O
cArg	O
,	O
rgszArg	O
,	O
vszOptions	O
)	O
;	O
if	O
(	O
c	O
==	O
EOF	O
)	O
break	O
;	O
switch	O
(	O
c	O
)	O
{	O
case	O
'c'	O
:	O
printf	(*(char))->(int)
(	O
">> MPI parallelization not active: option -c is ignored\n\n"	*(char)
)	O
;	O
break	O
;	O
case	O
'D'	O
:	O
if	O
(	O
optarg	O
[	O
0	int
]	O
==	O
'='	O
)	O
optarg	O
++	O
;	O
if	O
(	O
!	O
strcmp	(*(char),*(char))->(int)
(	O
optarg	O
,	O
"print-hierarchy"	*(char)
)	O
)	O
{	O
printf	(*(char))->(int)
(	O
">> Debug option %s\n\n"	*(char)
,	O
optarg	O
)	O
;	O
panal	O
->	O
bDependents	O
=	O
TRUE	O
;	O
}	O
else	O
{	O
printf	(*(char))->(int)
(	O
">> A known debugging code must follow -D\nExiting.\n\n"	*(char)
)	O
;	O
exit	(int)->(void)
(	O
-	O
1	int
)	O
;	O
}	O
break	O
;	O
case	O
'H'	O
:	O
case	O
'h'	O
:	O
printf	(*(char))->(int)
(	O
"Usage: %s [options] <input-file> [<output-file>]\n"	*(char)
,	O
rgszArg	O
[	O
0	int
]	O
)	O
;	O
printf	(*(char))->(int)
(	O
"Options:\n"	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"  -c                   "	*(char)
"Display MCMC convergence (if MPI is used)\n"	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"  -D=print-hierarchy   "	*(char)
"Print out the hierarchy for debugging\n"	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"  -h                   "	*(char)
"Display this information\n"	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"  -H                   "	*(char)
"Display this information\n"	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"  -i=<arg>             "	*(char)
"Print out every <arg> iteration\n"	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"\nFor further help on GNU MCSim please see:\n"	*(char)
"http://www.gnu.org/software/mcsim.\n\n"	*(char)
)	O
;	O
exit	(int)->(void)
(	O
-	O
1	int
)	O
;	O
break	O
;	O
case	O
'i'	O
:	O
if	O
(	O
optarg	O
[	O
0	int
]	O
==	O
'='	O
)	O
optarg	O
++	O
;	O
panal	O
->	O
nOutputFreq	O
=	O
strtol	(*(char),*(*(char)),int)->(long)
(	O
optarg	O
,	O
NULL	O
,	O
10	int
)	O
;	O
if	O
(	O
panal	O
->	O
nOutputFreq	O
>	O
0	int
)	O
{	O
if	O
(	O
panal	O
->	O
rank	int
==	O
0	int
)	O
printf	(*(char))->(int)
(	O
">> Print iteration frequency %d\n\n"	*(char)
,	O
panal	O
->	O
nOutputFreq	O
)	O
;	O
panal	O
->	O
bOutputIter	O
=	O
TRUE	O
;	O
}	O
else	O
{	O
printf	(*(char))->(int)
(	O
">> An integer print step must follow -i\nExiting.\n\n"	*(char)
)	O
;	O
exit	(int)->(void)
(	O
-	O
1	int
)	O
;	O
}	O
break	O
;	O
default	O
:	O
printf	(*(char))->(int)
(	O
"Exiting.\n\n"	*(char)
)	O
;	O
exit	(int)->(void)
(	O
-	O
1	int
)	O
;	O
}	O
}	O
switch	O
(	O
cArg	O
-	O
optind	O
)	O
{	O
case	O
2	int
:	O
*	O
pszFileOut	O
=	O
rgszArg	O
[	O
optind	O
+	O
1	int
]	O
;	O
case	O
1	int
:	O
*	O
pszFileIn	O
=	O
rgszArg	O
[	O
optind	O
]	O
;	O
break	O
;	O
case	O
0	int
:	O
PromptFilenames	O
(	O
pszFileIn	O
,	O
pszFileOut	O
)	O
;	O
break	O
;	O
default	O
:	O
exit	(int)->(void)
(	O
-	O
1	int
)	O
;	O
break	O
;	O
}	O
while	O
(	O
*	O
pszFileIn	O
&&	O
(	O
*	O
pszFileIn	O
)	O
[	O
0	int
]	O
&&	O
!	O
MyStrcmp	O
(	O
*	O
pszFileIn	O
,	O
*	O
pszFileOut	O
)	O
)	O
{	O
printf	(*(char))->(int)
(	O
"\n** Input and output filename must be different.\n"	*(char)
)	O
;	O
PromptFilenames	O
(	O
pszFileIn	O
,	O
pszFileOut	O
)	O
;	O
}	O
if	O
(	O
!	O
(	O
*	O
pszFileIn	O
&&	O
(	O
*	O
pszFileIn	O
)	O
[	O
0	int
]	O
)	O
)	O
{	O
printf	(*(char))->(int)
(	O
"Error: an input file name must be specified - Exiting.\n\n"	*(char)
)	O
;	O
exit	(int)->(void)
(	O
-	O
1	int
)	O
;	O
}	O
}	O
void	O
AnnounceProgram	O
(	O
void	O
)	O
{	O
printf	(*(char))->(int)
(	O
"\n________________________________________\n"	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"\nMCSim "	*(char)
VSZ_VERSION	O
"\n\n"	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
VSZ_COPYRIGHT	O
"\n\n"	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"MCSim comes with ABSOLUTELY NO WARRANTY;\n"	*(char)
"This is free software, and you are welcome to redistribute it\n"	*(char)
"under certain conditions; see the GNU General Public License.\n\n"	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"* Using `%s' model in file \"%s\" created by %s\n\n"	*(char)
,	O
szModelDescFilename	array(char)
,	O
szModelSourceFilename	array(char)
,	O
szModelGenAndVersion	array(char)
)	O
;	O
}	O
int	O
main	O
(	O
int	O
nArg	O
,	O
char	O
*	O
*	O
rgszArg	O
)	O
{	O
int	O
rank	int
=	O
0	int
;	O
int	O
size	O
=	O
1	int
;	O
PSTR	*(char)
szFileIn	O
,	O
szFileOut	O
;	O
INPUTBUF	struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char),*(char),int,int,int,*(void))
ibIn	O
;	O
PANALYSIS	O
panal	O
=	O
(	O
PANALYSIS	O
)	O
malloc	(long)->(*(void))
(	O
sizeof	O
(	O
ANALYSIS	O
)	O
)	O
;	O
panal	O
->	O
rank	int
=	O
rank	int
;	O
panal	O
->	O
size	O
=	O
size	O
;	O
if	O
(	O
panal	O
->	O
rank	int
==	O
0	int
)	O
AnnounceProgram	O
(	O
)	O
;	O
if	O
(	O
!	O
panal	O
)	O
ReportError	O
(	O
NULL	O
,	O
RE_OUTOFMEM	O
|	O
RE_FATAL	O
,	O
"ANALYSIS specification too large"	*(char)
,	O
NULL	O
)	O
;	O
InitAnalysis	O
(	O
panal	O
)	O
;	O
GetCmdLineArgs	O
(	O
nArg	O
,	O
rgszArg	O
,	O
&	O
szFileIn	O
,	O
&	O
szFileOut	O
,	O
panal	O
)	O
;	O
panal	O
->	O
szOutfilename	O
=	O
szFileOut	O
;	O
szFileOut	O
==	O
NULL	O
?	O
(	O
panal	O
->	O
bCommandLineSpec	O
=	O
FALSE	O
)	O
:	O
(	O
panal	O
->	O
bCommandLineSpec	O
=	O
TRUE	O
)	O
;	O
if	O
(	O
!	O
InitBuffer	(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),*(char),int,int,int,*(void))),*(char))->(int)
(	O
&	O
ibIn	O
,	O
szFileIn	O
)	O
)	O
ReportError	O
(	O
&	O
ibIn	O
,	O
RE_INIT	O
|	O
RE_FATAL	O
,	O
"ReadInput"	*(char)
,	O
NULL	O
)	O
;	O
ibIn	O
.	O
pInfo	*(void)
=	O
(	O
PVOID	*(void)
)	O
panal	O
;	O
if	O
(	O
ReadAnalysis	O
(	O
&	O
ibIn	O
)	O
)	O
{	O
PrepAnalysis	O
(	O
panal	O
)	O
;	O
DoAnalysis	O
(	O
panal	O
)	O
;	O
}	O
if	O
(	O
panal	O
->	O
rank	int
==	O
0	int
)	O
printf	(*(char))->(int)
(	O
"Done.\n\n"	*(char)
)	O
;	O
if	O
(	O
panal	O
->	O
iType	int
==	O
AT_MCMC	O
)	O
FreeLevels	O
(	O
panal	O
)	O
;	O
else	O
{	O
FreeMemory	O
(	O
panal	O
)	O
;	O
free	(*(void))->(void)
(	O
ibIn	O
.	O
pbufOrg	*(char)
)	O
;	O
}	O
return	O
0	int
;	O
}	O
