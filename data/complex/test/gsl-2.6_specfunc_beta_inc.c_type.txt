static	O
double	O
isnegint	(double)->(double)
(	O
const	O
double	O
x	double
)	O
{	O
return	O
(	O
x	double
<	O
0	int
)	O
&&	O
(	O
x	double
==	O
floor	(double)->(double)
(	O
x	double
)	O
)	O
;	O
}	O
static	O
int	O
beta_cont_frac	(double,double,double,*(struct(double,double)))->(int)
(	O
const	O
double	O
a	double
,	O
const	O
double	O
b	double
,	O
const	O
double	O
x	double
,	O
gsl_sf_result	struct(double,double)
*	O
result	*(struct(double,double))
)	O
{	O
const	O
unsigned	O
int	O
max_iter	int
=	O
512	int
;	O
const	O
double	O
cutoff	double
=	O
2.0	int
*	O
GSL_DBL_MIN	int
;	O
unsigned	O
int	O
iter_count	int
=	O
0	int
;	O
double	O
cf	double
;	O
double	O
num_term	double
=	O
1.0	int
;	O
double	O
den_term	double
=	O
1.0	int
-	O
(	O
a	double
+	O
b	double
)	O
*	O
x	double
/	O
(	O
a	double
+	O
1.0	int
)	O
;	O
if	O
(	O
fabs	(double)->(double)
(	O
den_term	double
)	O
<	O
cutoff	double
)	O
den_term	double
=	O
cutoff	double
;	O
den_term	double
=	O
1.0	int
/	O
den_term	double
;	O
cf	double
=	O
den_term	double
;	O
while	O
(	O
iter_count	int
<	O
max_iter	int
)	O
{	O
const	O
int	O
k	int
=	O
iter_count	int
+	O
1	int
;	O
double	O
coeff	double
=	O
k	int
*	O
(	O
b	double
-	O
k	int
)	O
*	O
x	double
/	O
(	O
(	O
(	O
a	double
-	O
1.0	int
)	O
+	O
2	int
*	O
k	int
)	O
*	O
(	O
a	double
+	O
2	int
*	O
k	int
)	O
)	O
;	O
double	O
delta_frac	double
;	O
den_term	double
=	O
1.0	int
+	O
coeff	double
*	O
den_term	double
;	O
num_term	double
=	O
1.0	int
+	O
coeff	double
/	O
num_term	double
;	O
if	O
(	O
fabs	(double)->(double)
(	O
den_term	double
)	O
<	O
cutoff	double
)	O
den_term	double
=	O
cutoff	double
;	O
if	O
(	O
fabs	(double)->(double)
(	O
num_term	double
)	O
<	O
cutoff	double
)	O
num_term	double
=	O
cutoff	double
;	O
den_term	double
=	O
1.0	int
/	O
den_term	double
;	O
delta_frac	double
=	O
den_term	double
*	O
num_term	double
;	O
cf	double
*=	O
delta_frac	double
;	O
coeff	double
=	O
-	O
(	O
a	double
+	O
k	int
)	O
*	O
(	O
a	double
+	O
b	double
+	O
k	int
)	O
*	O
x	double
/	O
(	O
(	O
a	double
+	O
2	int
*	O
k	int
)	O
*	O
(	O
a	double
+	O
2	int
*	O
k	int
+	O
1.0	int
)	O
)	O
;	O
den_term	double
=	O
1.0	int
+	O
coeff	double
*	O
den_term	double
;	O
num_term	double
=	O
1.0	int
+	O
coeff	double
/	O
num_term	double
;	O
if	O
(	O
fabs	(double)->(double)
(	O
den_term	double
)	O
<	O
cutoff	double
)	O
den_term	double
=	O
cutoff	double
;	O
if	O
(	O
fabs	(double)->(double)
(	O
num_term	double
)	O
<	O
cutoff	double
)	O
num_term	double
=	O
cutoff	double
;	O
den_term	double
=	O
1.0	int
/	O
den_term	double
;	O
delta_frac	double
=	O
den_term	double
*	O
num_term	double
;	O
cf	double
*=	O
delta_frac	double
;	O
if	O
(	O
fabs	(double)->(double)
(	O
delta_frac	double
-	O
1.0	int
)	O
<	O
2.0	int
*	O
GSL_DBL_EPSILON	int
)	O
break	O
;	O
++	O
iter_count	int
;	O
}	O
result	*(struct(double,double))
->	O
val	double
=	O
cf	double
;	O
result	*(struct(double,double))
->	O
err	double
=	O
iter_count	int
*	O
4.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	(double)->(double)
(	O
cf	double
)	O
;	O
if	O
(	O
iter_count	int
>=	O
max_iter	int
)	O
GSL_ERROR	O
(	O
"error"	*(char)
,	O
GSL_EMAXITER	int
)	O
;	O
else	O
return	O
GSL_SUCCESS	int
;	O
}	O
int	O
gsl_sf_beta_inc_e	(double,double,double,*(struct(double,double)))->(int)
(	O
const	O
double	O
a	double
,	O
const	O
double	O
b	double
,	O
const	O
double	O
x	double
,	O
gsl_sf_result	struct(double,double)
*	O
result	*(struct(double,double))
)	O
{	O
if	O
(	O
x	double
<	O
0.0	int
||	O
x	double
>	O
1.0	int
)	O
{	O
DOMAIN_ERROR	O
(	O
result	*(struct(double,double))
)	O
;	O
}	O
else	O
if	O
(	O
isnegint	(double)->(double)
(	O
a	double
)	O
||	O
isnegint	(double)->(double)
(	O
b	double
)	O
)	O
{	O
DOMAIN_ERROR	O
(	O
result	*(struct(double,double))
)	O
;	O
}	O
else	O
if	O
(	O
isnegint	(double)->(double)
(	O
a	double
+	O
b	double
)	O
)	O
{	O
DOMAIN_ERROR	O
(	O
result	*(struct(double,double))
)	O
;	O
}	O
else	O
if	O
(	O
x	double
==	O
0.0	int
)	O
{	O
result	*(struct(double,double))
->	O
val	double
=	O
0.0	int
;	O
result	*(struct(double,double))
->	O
err	double
=	O
0.0	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
if	O
(	O
x	double
==	O
1.0	int
)	O
{	O
result	*(struct(double,double))
->	O
val	double
=	O
1.0	int
;	O
result	*(struct(double,double))
->	O
err	double
=	O
0.0	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
if	O
(	O
a	double
<=	O
0	int
||	O
b	double
<=	O
0	int
)	O
{	O
gsl_sf_result	struct(double,double)
f	*(double)
,	O
beta	struct(double,double)
;	O
int	O
stat	int
;	O
const	O
int	O
stat_f	int
=	O
gsl_sf_hyperg_2F1_e	(double,double,double,double,*(struct(double,double)))->(int)
(	O
a	double
,	O
1	int
-	O
b	double
,	O
a	double
+	O
1	int
,	O
x	double
,	O
&	O
f	*(double)
)	O
;	O
const	O
int	O
stat_beta	int
=	O
gsl_sf_beta_e	(double,double,*(struct(double,double)))->(int)
(	O
a	double
,	O
b	double
,	O
&	O
beta	struct(double,double)
)	O
;	O
double	O
prefactor	double
=	O
(	O
pow	(double,double)->(double)
(	O
x	double
,	O
a	double
)	O
/	O
a	double
)	O
;	O
result	*(struct(double,double))
->	O
val	double
=	O
prefactor	double
*	O
f	*(double)
.	O
val	double
/	O
beta	struct(double,double)
.	O
val	double
;	O
result	*(struct(double,double))
->	O
err	double
=	O
fabs	(double)->(double)
(	O
prefactor	double
)	O
*	O
f	*(double)
.	O
err	double
/	O
fabs	(double)->(double)
(	O
beta	struct(double,double)
.	O
val	double
)	O
+	O
fabs	(double)->(double)
(	O
result	*(struct(double,double))
->	O
val	double
/	O
beta	struct(double,double)
.	O
val	double
)	O
*	O
beta	struct(double,double)
.	O
err	double
;	O
stat	int
=	O
GSL_ERROR_SELECT_2	O
(	O
stat_f	int
,	O
stat_beta	int
)	O
;	O
if	O
(	O
stat	int
==	O
GSL_SUCCESS	int
)	O
{	O
CHECK_UNDERFLOW	O
(	O
result	*(struct(double,double))
)	O
;	O
}	O
return	O
stat	int
;	O
}	O
else	O
{	O
gsl_sf_result	struct(double,double)
ln_beta	struct(double,double)
;	O
gsl_sf_result	struct(double,double)
ln_x	struct(double,double)
;	O
gsl_sf_result	struct(double,double)
ln_1mx	struct(double,double)
;	O
gsl_sf_result	struct(double,double)
prefactor	double
;	O
const	O
int	O
stat_ln_beta	int
=	O
gsl_sf_lnbeta_e	(double,double,*(struct(double,double)))->(int)
(	O
a	double
,	O
b	double
,	O
&	O
ln_beta	struct(double,double)
)	O
;	O
const	O
int	O
stat_ln_1mx	int
=	O
gsl_sf_log_1plusx_e	(double,*(struct(double,double)))->(int)
(	O
-	O
x	double
,	O
&	O
ln_1mx	struct(double,double)
)	O
;	O
const	O
int	O
stat_ln_x	int
=	O
gsl_sf_log_e	(double,*(struct(double,double)))->(int)
(	O
x	double
,	O
&	O
ln_x	struct(double,double)
)	O
;	O
const	O
int	O
stat_ln	int
=	O
GSL_ERROR_SELECT_3	O
(	O
stat_ln_beta	int
,	O
stat_ln_1mx	int
,	O
stat_ln_x	int
)	O
;	O
const	O
double	O
ln_pre_val	double
=	O
-	O
ln_beta	struct(double,double)
.	O
val	double
+	O
a	double
*	O
ln_x	struct(double,double)
.	O
val	double
+	O
b	double
*	O
ln_1mx	struct(double,double)
.	O
val	double
;	O
const	O
double	O
ln_pre_err	double
=	O
ln_beta	struct(double,double)
.	O
err	double
+	O
fabs	(double)->(double)
(	O
a	double
*	O
ln_x	struct(double,double)
.	O
err	double
)	O
+	O
fabs	(double)->(double)
(	O
b	double
*	O
ln_1mx	struct(double,double)
.	O
err	double
)	O
;	O
const	O
int	O
stat_exp	int
=	O
gsl_sf_exp_err_e	(double,double,*(struct(double,double)))->(int)
(	O
ln_pre_val	double
,	O
ln_pre_err	double
,	O
&	O
prefactor	double
)	O
;	O
if	O
(	O
stat_ln	int
!=	O
GSL_SUCCESS	int
)	O
{	O
result	*(struct(double,double))
->	O
val	double
=	O
0.0	int
;	O
result	*(struct(double,double))
->	O
err	double
=	O
0.0	int
;	O
GSL_ERROR	O
(	O
"error"	*(char)
,	O
GSL_ESANITY	int
)	O
;	O
}	O
if	O
(	O
x	double
<	O
(	O
a	double
+	O
1.0	int
)	O
/	O
(	O
a	double
+	O
b	double
+	O
2.0	int
)	O
)	O
{	O
gsl_sf_result	struct(double,double)
cf	double
;	O
const	O
int	O
stat_cf	int
=	O
beta_cont_frac	(double,double,double,*(struct(double,double)))->(int)
(	O
a	double
,	O
b	double
,	O
x	double
,	O
&	O
cf	double
)	O
;	O
int	O
stat	int
;	O
result	*(struct(double,double))
->	O
val	double
=	O
prefactor	double
.	O
val	double
*	O
cf	double
.	O
val	double
/	O
a	double
;	O
result	*(struct(double,double))
->	O
err	double
=	O
(	O
fabs	(double)->(double)
(	O
prefactor	double
.	O
err	double
*	O
cf	double
.	O
val	double
)	O
+	O
fabs	(double)->(double)
(	O
prefactor	double
.	O
val	double
*	O
cf	double
.	O
err	double
)	O
)	O
/	O
a	double
;	O
stat	int
=	O
GSL_ERROR_SELECT_2	O
(	O
stat_exp	int
,	O
stat_cf	int
)	O
;	O
if	O
(	O
stat	int
==	O
GSL_SUCCESS	int
)	O
{	O
CHECK_UNDERFLOW	O
(	O
result	*(struct(double,double))
)	O
;	O
}	O
return	O
stat	int
;	O
}	O
else	O
{	O
gsl_sf_result	struct(double,double)
cf	double
;	O
const	O
int	O
stat_cf	int
=	O
beta_cont_frac	(double,double,double,*(struct(double,double)))->(int)
(	O
b	double
,	O
a	double
,	O
1.0	int
-	O
x	double
,	O
&	O
cf	double
)	O
;	O
int	O
stat	int
;	O
const	O
double	O
term	double
=	O
prefactor	double
.	O
val	double
*	O
cf	double
.	O
val	double
/	O
b	double
;	O
result	*(struct(double,double))
->	O
val	double
=	O
1.0	int
-	O
term	double
;	O
result	*(struct(double,double))
->	O
err	double
=	O
fabs	(double)->(double)
(	O
prefactor	double
.	O
err	double
*	O
cf	double
.	O
val	double
)	O
/	O
b	double
;	O
result	*(struct(double,double))
->	O
err	double
+=	O
fabs	(double)->(double)
(	O
prefactor	double
.	O
val	double
*	O
cf	double
.	O
err	double
)	O
/	O
b	double
;	O
result	*(struct(double,double))
->	O
err	double
+=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
(	O
1.0	int
+	O
fabs	(double)->(double)
(	O
term	double
)	O
)	O
;	O
if	O
(	O
stat_exp	int
!=	O
GSL_EUNDRFLW	int
)	O
{	O
stat	int
=	O
GSL_ERROR_SELECT_2	O
(	O
stat_exp	int
,	O
stat_cf	int
)	O
;	O
}	O
else	O
{	O
stat	int
=	O
stat_cf	int
;	O
}	O
;	O
if	O
(	O
stat	int
==	O
GSL_SUCCESS	int
)	O
{	O
CHECK_UNDERFLOW	O
(	O
result	*(struct(double,double))
)	O
;	O
}	O
return	O
stat	int
;	O
}	O
}	O
}	O
double	O
gsl_sf_beta_inc	(double,double,double)->(double)
(	O
const	O
double	O
a	double
,	O
const	O
double	O
b	double
,	O
const	O
double	O
x	double
)	O
{	O
EVAL_RESULT	O
(	O
gsl_sf_beta_inc_e	(double,double,double,*(struct(double,double)))->(int)
(	O
a	double
,	O
b	double
,	O
x	double
,	O
&	O
result	*(struct(double,double))
)	O
)	O
;	O
}	O
