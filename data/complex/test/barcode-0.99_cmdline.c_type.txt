int	O
commandline_errormsg	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(struct(int,int,*(void),*((*`)->(int)),*(char),*(char),*(char))),*(char),*(char))->(int)
(	O
FILE	struct
*	O
f	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
struct	O
commandline	struct(int,int,*(void),*((*(void))->(int)),*(char),*(char),*(char))
*	O
args	*(struct(int,int,*(void),*((*(void))->(int)),*(char),*(char),*(char)))
,	O
char	O
*	O
prgname	*(char)
,	O
char	O
*	O
messagehead	*(char)
)	O
{	O
char	O
*	O
buffer	*(char)
;	O
char	O
*	O
buffer2	*(char)
;	O
int	O
len	int
;	O
struct	O
commandline	struct(int,int,*(void),*((*(void))->(int)),*(char),*(char),*(char))
*	O
ptr	*(struct(int,int,*(void),*((*(void))->(int)),*(char),*(char),*(char)))
;	O
if	O
(	O
!	O
messagehead	*(char)
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
f	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
_	O
(	O
"%s: Error in cmdline\nPossible options:\n"	*(char)
)	O
,	O
prgname	*(char)
)	O
;	O
}	O
else	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
f	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s: %s"	*(char)
,	O
prgname	*(char)
,	O
messagehead	*(char)
)	O
;	O
}	O
for	O
(	O
ptr	*(struct(int,int,*(void),*((*(void))->(int)),*(char),*(char),*(char)))
=	O
args	*(struct(int,int,*(void),*((*(void))->(int)),*(char),*(char),*(char)))
;	O
ptr	*(struct(int,int,*(void),*((*(void))->(int)),*(char),*(char),*(char)))
->	O
option	int
;	O
ptr	*(struct(int,int,*(void),*((*(void))->(int)),*(char),*(char),*(char)))
++	O
)	O
{	O
if	O
(	O
_	O
(	O
ptr	*(struct(int,int,*(void),*((*(void))->(int)),*(char),*(char),*(char)))
->	O
descrip	*(char)
)	O
)	O
{	O
len	int
=	O
strlen	(*(char))->(long)
(	O
_	O
(	O
ptr	*(struct(int,int,*(void),*((*(void))->(int)),*(char),*(char),*(char)))
->	O
descrip	*(char)
)	O
)	O
;	O
len	int
+=	O
ptr	*(struct(int,int,*(void),*((*(void))->(int)),*(char),*(char),*(char)))
->	O
default_v	*(char)
?	O
strlen	(*(char))->(long)
(	O
ptr	*(struct(int,int,*(void),*((*(void))->(int)),*(char),*(char),*(char)))
->	O
default_v	*(char)
)	O
:	O
6	int
;	O
len	int
+=	O
ptr	*(struct(int,int,*(void),*((*(void))->(int)),*(char),*(char),*(char)))
->	O
env	*(char)
?	O
strlen	(*(char))->(long)
(	O
ptr	*(struct(int,int,*(void),*((*(void))->(int)),*(char),*(char),*(char)))
->	O
env	*(char)
)	O
:	O
6	int
;	O
buffer2	*(char)
=	O
malloc	(long)->(*(void))
(	O
len	int
+	O
3	int
)	O
;	O
len	int
+=	O
32	int
;	O
if	O
(	O
buffer2	*(char)
)	O
{	O
buffer	*(char)
=	O
malloc	(long)->(*(void))
(	O
len	int
)	O
;	O
if	O
(	O
buffer	*(char)
)	O
{	O
sprintf	(*(char),*(char))->(int)
(	O
buffer2	*(char)
,	O
_	O
(	O
ptr	*(struct(int,int,*(void),*((*(void))->(int)),*(char),*(char),*(char)))
->	O
descrip	*(char)
)	O
,	O
ptr	*(struct(int,int,*(void),*((*(void))->(int)),*(char),*(char),*(char)))
->	O
default_v	*(char)
?	O
ptr	*(struct(int,int,*(void),*((*(void))->(int)),*(char),*(char),*(char)))
->	O
default_v	*(char)
:	O
"(none)"	*(char)
,	O
ptr	*(struct(int,int,*(void),*((*(void))->(int)),*(char),*(char),*(char)))
->	O
env	*(char)
?	O
ptr	*(struct(int,int,*(void),*((*(void))->(int)),*(char),*(char),*(char)))
->	O
env	*(char)
:	O
"(none)"	*(char)
)	O
;	O
sprintf	(*(char),*(char))->(int)
(	O
buffer	*(char)
,	O
"   -%c %s     %s"	*(char)
,	O
ptr	*(struct(int,int,*(void),*((*(void))->(int)),*(char),*(char),*(char)))
->	O
option	int
,	O
ptr	*(struct(int,int,*(void),*((*(void))->(int)),*(char),*(char),*(char)))
->	O
type	int
?	O
"<arg>"	*(char)
:	O
"     "	*(char)
,	O
buffer2	*(char)
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
f	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s\n"	*(char)
,	O
buffer	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
buffer	*(char)
)	O
;	O
}	O
free	(*(void))->(void)
(	O
buffer2	*(char)
)	O
;	O
}	O
}	O
}	O
return	O
-	O
1	int
;	O
}	O
struct	O
type_fmt	struct(enum(int,int,int,int,int,int,int,int),*(char))
{	O
enum	O
option_type	enum(int,int,int,int,int,int,int,int)
type	int
;	O
char	O
*	O
fmt	*(char)
;	O
}	O
;	O
static	O
struct	O
type_fmt	struct(enum(int,int,int,int,int,int,int,int),*(char))
formats	array(struct(enum(int,int,int,int,int,int,int,int),*(char)))
[	O
]	O
=	O
{	O
{	O
CMDLINE_I	int
,	O
"%i%s"	*(char)
}	O
,	O
{	O
CMDLINE_D	int
,	O
"%d%s"	*(char)
}	O
,	O
{	O
CMDLINE_X	int
,	O
"%x%s"	*(char)
}	O
,	O
{	O
CMDLINE_O	int
,	O
"%o%s"	*(char)
}	O
,	O
{	O
CMDLINE_F	int
,	O
"%lf%s"	*(char)
}	O
,	O
{	O
CMDLINE_P	int
,	O
"%p%s"	*(char)
}	O
,	O
{	O
0	int
,	O
NULL	O
}	O
}	O
;	O
static	O
int	O
commandline_oneopt	(*(struct(int,int,*(void),*((*`)->(int)),*(char),*(char),*(char))),*(char))->(int)
(	O
struct	O
commandline	struct(int,int,*(void),*((*(void))->(int)),*(char),*(char),*(char))
*	O
ptr	*(struct(int,int,*(void),*((*(void))->(int)),*(char),*(char),*(char)))
,	O
char	O
*	O
value	*(char)
)	O
{	O
struct	O
type_fmt	struct(enum(int,int,int,int,int,int,int,int),*(char))
*	O
tptr	*(struct(enum(int,int,int,int,int,int,int,int),*(char)))
;	O
char	O
*	O
trash	*(char)
=	O
value	*(char)
?	O
strdup	(*(char))->(*(char))
(	O
value	*(char)
)	O
:	O
NULL	O
;	O
if	O
(	O
(	O
ptr	*(struct(int,int,*(void),*((*(void))->(int)),*(char),*(char),*(char)))
->	O
type	int
!=	O
CMDLINE_NONE	int
)	O
&&	O
ptr	*(struct(int,int,*(void),*((*(void))->(int)),*(char),*(char),*(char)))
->	O
result	*(void)
)	O
{	O
for	O
(	O
tptr	*(struct(enum(int,int,int,int,int,int,int,int),*(char)))
=	O
formats	array(struct(enum(int,int,int,int,int,int,int,int),*(char)))
;	O
tptr	*(struct(enum(int,int,int,int,int,int,int,int),*(char)))
->	O
type	int
;	O
tptr	*(struct(enum(int,int,int,int,int,int,int,int),*(char)))
++	O
)	O
if	O
(	O
tptr	*(struct(enum(int,int,int,int,int,int,int,int),*(char)))
->	O
type	int
==	O
ptr	*(struct(int,int,*(void),*((*(void))->(int)),*(char),*(char),*(char)))
->	O
type	int
)	O
break	O
;	O
if	O
(	O
!	O
tptr	*(struct(enum(int,int,int,int,int,int,int,int),*(char)))
->	O
type	int
)	O
*	O
(	O
char	O
*	O
*	O
)	O
(	O
ptr	*(struct(int,int,*(void),*((*(void))->(int)),*(char),*(char),*(char)))
->	O
result	*(void)
)	O
=	O
value	*(char)
;	O
else	O
if	O
(	O
sscanf	(*(char),*(char))->(int)
(	O
value	*(char)
,	O
tptr	*(struct(enum(int,int,int,int,int,int,int,int),*(char)))
->	O
fmt	*(char)
,	O
ptr	*(struct(int,int,*(void),*((*(void))->(int)),*(char),*(char),*(char)))
->	O
result	*(void)
,	O
trash	*(char)
)	O
!=	O
1	int
)	O
{	O
free	(*(void))->(void)
(	O
trash	*(char)
)	O
;	O
return	O
-	O
1	int
;	O
}	O
}	O
if	O
(	O
trash	*(char)
)	O
free	(*(void))->(void)
(	O
trash	*(char)
)	O
;	O
if	O
(	O
(	O
ptr	*(struct(int,int,*(void),*((*(void))->(int)),*(char),*(char),*(char)))
->	O
type	int
==	O
CMDLINE_NONE	int
)	O
&&	O
ptr	*(struct(int,int,*(void),*((*(void))->(int)),*(char),*(char),*(char)))
->	O
result	*(void)
)	O
(	O
*	O
(	O
int	O
*	O
)	O
(	O
ptr	*(struct(int,int,*(void),*((*(void))->(int)),*(char),*(char),*(char)))
->	O
result	*(void)
)	O
)	O
++	O
;	O
if	O
(	O
ptr	*(struct(int,int,*(void),*((*(void))->(int)),*(char),*(char),*(char)))
->	O
fun	*((*(void))->(int))
)	O
{	O
if	O
(	O
ptr	*(struct(int,int,*(void),*((*(void))->(int)),*(char),*(char),*(char)))
->	O
type	int
)	O
{	O
if	O
(	O
ptr	*(struct(int,int,*(void),*((*(void))->(int)),*(char),*(char),*(char)))
->	O
result	*(void)
)	O
return	O
ptr	*(struct(int,int,*(void),*((*(void))->(int)),*(char),*(char),*(char)))
->	O
fun	*((*(void))->(int))
(	O
ptr	*(struct(int,int,*(void),*((*(void))->(int)),*(char),*(char),*(char)))
->	O
result	*(void)
)	O
;	O
return	O
ptr	*(struct(int,int,*(void),*((*(void))->(int)),*(char),*(char),*(char)))
->	O
fun	*((*(void))->(int))
(	O
value	*(char)
)	O
;	O
}	O
return	O
ptr	*(struct(int,int,*(void),*((*(void))->(int)),*(char),*(char),*(char)))
->	O
fun	*((*(void))->(int))
(	O
NULL	O
)	O
;	O
}	O
return	O
0	int
;	O
}	O
int	O
commandline	struct(int,int,*(void),*((*(void))->(int)),*(char),*(char),*(char))
(	O
struct	O
commandline	struct(int,int,*(void),*((*(void))->(int)),*(char),*(char),*(char))
*	O
args	*(struct(int,int,*(void),*((*(void))->(int)),*(char),*(char),*(char)))
,	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	*(*(char))
,	O
char	O
*	O
errorhead	*(char)
)	O
{	O
struct	O
commandline	struct(int,int,*(void),*((*(void))->(int)),*(char),*(char),*(char))
*	O
ptr	*(struct(int,int,*(void),*((*(void))->(int)),*(char),*(char),*(char)))
;	O
char	O
*	O
getopt_desc	*(char)
=	O
(	O
char	O
*	O
)	O
calloc	(long,long)->(*(void))
(	O
512	int
,	O
1	int
)	O
;	O
int	O
desc_offset	int
=	O
0	int
;	O
int	O
opt	int
,	O
retval	int
;	O
char	O
*	O
value	*(char)
;	O
for	O
(	O
ptr	*(struct(int,int,*(void),*((*(void))->(int)),*(char),*(char),*(char)))
=	O
args	*(struct(int,int,*(void),*((*(void))->(int)),*(char),*(char),*(char)))
;	O
ptr	*(struct(int,int,*(void),*((*(void))->(int)),*(char),*(char),*(char)))
->	O
option	int
;	O
ptr	*(struct(int,int,*(void),*((*(void))->(int)),*(char),*(char),*(char)))
++	O
)	O
{	O
getopt_desc	*(char)
[	O
desc_offset	int
++	O
]	O
=	O
ptr	*(struct(int,int,*(void),*((*(void))->(int)),*(char),*(char),*(char)))
->	O
option	int
;	O
if	O
(	O
ptr	*(struct(int,int,*(void),*((*(void))->(int)),*(char),*(char),*(char)))
->	O
type	int
)	O
getopt_desc	*(char)
[	O
desc_offset	int
++	O
]	O
=	O
':'	O
;	O
value	*(char)
=	O
NULL	O
;	O
if	O
(	O
ptr	*(struct(int,int,*(void),*((*(void))->(int)),*(char),*(char),*(char)))
->	O
env	*(char)
)	O
value	*(char)
=	O
getenv	(*(char))->(*(char))
(	O
ptr	*(struct(int,int,*(void),*((*(void))->(int)),*(char),*(char),*(char)))
->	O
env	*(char)
)	O
;	O
if	O
(	O
!	O
value	*(char)
)	O
value	*(char)
=	O
ptr	*(struct(int,int,*(void),*((*(void))->(int)),*(char),*(char),*(char)))
->	O
default_v	*(char)
;	O
if	O
(	O
value	*(char)
&&	O
(	O
retval	int
=	O
commandline_oneopt	(*(struct(int,int,*(void),*((*`)->(int)),*(char),*(char),*(char))),*(char))->(int)
(	O
ptr	*(struct(int,int,*(void),*((*(void))->(int)),*(char),*(char),*(char)))
,	O
value	*(char)
)	O
)	O
)	O
{	O
if	O
(	O
retval	int
==	O
-	O
1	int
)	O
commandline_errormsg	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(struct(int,int,*(void),*((*`)->(int)),*(char),*(char),*(char))),*(char),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
args	*(struct(int,int,*(void),*((*(void))->(int)),*(char),*(char),*(char)))
,	O
argv	*(*(char))
[	O
0	int
]	O
,	O
errorhead	*(char)
)	O
;	O
return	O
retval	int
;	O
}	O
}	O
while	O
(	O
(	O
opt	int
=	O
getopt	(int,*(*(char)),*(char))->(int)
(	O
argc	int
,	O
argv	*(*(char))
,	O
getopt_desc	*(char)
)	O
)	O
!=	O
-	O
1	int
)	O
{	O
for	O
(	O
ptr	*(struct(int,int,*(void),*((*(void))->(int)),*(char),*(char),*(char)))
=	O
args	*(struct(int,int,*(void),*((*(void))->(int)),*(char),*(char),*(char)))
;	O
ptr	*(struct(int,int,*(void),*((*(void))->(int)),*(char),*(char),*(char)))
->	O
option	int
;	O
ptr	*(struct(int,int,*(void),*((*(void))->(int)),*(char),*(char),*(char)))
++	O
)	O
if	O
(	O
opt	int
==	O
ptr	*(struct(int,int,*(void),*((*(void))->(int)),*(char),*(char),*(char)))
->	O
option	int
)	O
break	O
;	O
if	O
(	O
!	O
ptr	*(struct(int,int,*(void),*((*(void))->(int)),*(char),*(char),*(char)))
->	O
option	int
)	O
return	O
commandline_errormsg	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(struct(int,int,*(void),*((*`)->(int)),*(char),*(char),*(char))),*(char),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
args	*(struct(int,int,*(void),*((*(void))->(int)),*(char),*(char),*(char)))
,	O
argv	*(*(char))
[	O
0	int
]	O
,	O
errorhead	*(char)
)	O
;	O
if	O
(	O
(	O
retval	int
=	O
commandline_oneopt	(*(struct(int,int,*(void),*((*`)->(int)),*(char),*(char),*(char))),*(char))->(int)
(	O
ptr	*(struct(int,int,*(void),*((*(void))->(int)),*(char),*(char),*(char)))
,	O
optarg	*(char)
)	O
)	O
)	O
{	O
if	O
(	O
retval	int
==	O
-	O
1	int
)	O
commandline_errormsg	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(struct(int,int,*(void),*((*`)->(int)),*(char),*(char),*(char))),*(char),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
args	*(struct(int,int,*(void),*((*(void))->(int)),*(char),*(char),*(char)))
,	O
argv	*(*(char))
[	O
0	int
]	O
,	O
errorhead	*(char)
)	O
;	O
return	O
retval	int
;	O
}	O
}	O
return	O
0	int
;	O
}	O
