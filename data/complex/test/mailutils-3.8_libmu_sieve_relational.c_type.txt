DCL	O
(	O
eq	*((*(struct),*(struct(int,int,*(char),*(char),*(void))),*(char))->(int))
,	O
==	O
)	O
DCL	O
(	O
ne	O
,	O
!=	O
)	O
DCL	O
(	O
gt	O
,	O
>	O
)	O
DCL	O
(	O
ge	O
,	O
>=	O
)	O
DCL	O
(	O
lt	O
,	O
<	O
)	O
DCL	O
(	O
le	O
,	O
<=	O
)	O
static	O
struct	O
reltest_tab	struct(*(char),*((int,int)->(int)),*((long,long)->(int)))
{	O
char	O
*	O
name	*(char)
;	O
mu_sieve_relcmp_t	*((int,int)->(int))
test	*(*((int,int)->(int)))
;	O
mu_sieve_relcmpn_t	*((long,long)->(int))
stest	*(*((long,long)->(int)))
;	O
}	O
testtab	array(struct(*(char),*((int,int)->(int)),*((long,long)->(int))))
[	O
]	O
=	O
{	O
DEF	O
(	O
eq	*((*(struct),*(struct(int,int,*(char),*(char),*(void))),*(char))->(int))
)	O
,	O
DEF	O
(	O
ne	O
)	O
,	O
DEF	O
(	O
gt	O
)	O
,	O
DEF	O
(	O
ge	O
)	O
,	O
DEF	O
(	O
lt	O
)	O
,	O
DEF	O
(	O
le	O
)	O
}	O
;	O
static	O
struct	O
reltest_tab	struct(*(char),*((int,int)->(int)),*((long,long)->(int)))
*	O
_relcmp_lookup	(*(char))->(*(struct(*(char),*((int,int)->(int)),*((long,long)->(int)))))
(	O
const	O
char	O
*	O
str	*(char)
)	O
{	O
int	O
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
sizeof	O
(	O
testtab	array(struct(*(char),*((int,int)->(int)),*((long,long)->(int))))
)	O
/	O
sizeof	O
(	O
testtab	array(struct(*(char),*((int,int)->(int)),*((long,long)->(int))))
[	O
0	int
]	O
)	O
;	O
i	long
++	O
)	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
testtab	array(struct(*(char),*((int,int)->(int)),*((long,long)->(int))))
[	O
i	long
]	O
.	O
name	*(char)
,	O
str	*(char)
)	O
==	O
0	int
)	O
return	O
&	O
testtab	array(struct(*(char),*((int,int)->(int)),*((long,long)->(int))))
[	O
i	long
]	O
;	O
return	O
0	int
;	O
}	O
int	O
mu_sieve_str_to_relcmp	(*(char),*(*((int,int)->(int))),*(*((long,long)->(int))))->(int)
(	O
const	O
char	O
*	O
str	*(char)
,	O
mu_sieve_relcmp_t	*((int,int)->(int))
*	O
test	*(*((int,int)->(int)))
,	O
mu_sieve_relcmpn_t	*((long,long)->(int))
*	O
stest	*(*((long,long)->(int)))
)	O
{	O
struct	O
reltest_tab	struct(*(char),*((int,int)->(int)),*((long,long)->(int)))
*	O
t	long
=	O
_relcmp_lookup	(*(char))->(*(struct(*(char),*((int,int)->(int)),*((long,long)->(int)))))
(	O
str	*(char)
)	O
;	O
if	O
(	O
t	long
)	O
{	O
if	O
(	O
test	*(*((int,int)->(int)))
)	O
*	O
test	*(*((int,int)->(int)))
=	O
t	long
->	O
test	*(*((int,int)->(int)))
;	O
if	O
(	O
stest	*(*((long,long)->(int)))
)	O
*	O
stest	*(*((long,long)->(int)))
=	O
t	long
->	O
stest	*(*((long,long)->(int)))
;	O
return	O
0	int
;	O
}	O
return	O
1	int
;	O
}	O
mu_sieve_relcmp_t	*((int,int)->(int))
mu_sieve_get_relcmp	(*(struct))->(*((int,int)->(int)))
(	O
mu_sieve_machine_t	*(struct)
mach	*(struct)
)	O
{	O
char	O
*	O
str	*(char)
;	O
mu_sieve_relcmp_t	*((int,int)->(int))
test	*(*((int,int)->(int)))
=	O
NULL	O
;	O
if	O
(	O
mu_sieve_get_tag	(*(struct),*(char),enum(int,int,int,int,int),*(void))->(int)
(	O
mach	*(struct)
,	O
"value"	*(char)
,	O
SVT_STRING	int
,	O
&	O
str	*(char)
)	O
==	O
0	int
)	O
return	O
op_ne	(int,int)->(int)
;	O
mu_sieve_str_to_relcmp	(*(char),*(*((int,int)->(int))),*(*((long,long)->(int))))->(int)
(	O
str	*(char)
,	O
&	O
test	*(*((int,int)->(int)))
,	O
NULL	O
)	O
;	O
return	O
test	*(*((int,int)->(int)))
;	O
}	O
int	O
mu_sieve_require_relational	(*(struct),*(char))->(int)
(	O
mu_sieve_machine_t	*(struct)
mach	*(struct)
,	O
const	O
char	O
*	O
name	*(char)
)	O
{	O
return	O
0	int
;	O
}	O
