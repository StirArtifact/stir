static	O
int	O
echo_runcmd	(*(*(char)),*(char),long,*(*(char)),*(void))->(int)
(	O
char	O
*	O
*	O
ret	*(*(struct))
,	O
const	O
char	O
*	O
str	*(struct)
,	O
size_t	long
len	long
,	O
char	O
*	O
*	O
argv	*(*(char))
,	O
void	O
*	O
closure	*(void)
)	O
{	O
int	O
rc	int
;	O
mu_stream_t	*(struct)
ps	*(struct)
;	O
mu_stream_t	*(struct)
outs	*(struct)
;	O
size_t	long
i	int
;	O
int	O
status	int
=	O
MU_WRDSE_OK	O
;	O
char	O
buf	*(char)
[	O
128	int
]	O
;	O
size_t	long
n	*(long)
;	O
*	O
ret	*(*(struct))
=	O
NULL	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
argv	*(*(char))
[	O
i	int
]	O
;	O
i	int
++	O
)	O
;	O
rc	int
=	O
mu_prog_stream_create	(*(*(struct)),*(char),long,*(*(char)),int,*(struct(*(char),int,*(int),long,array(long),int,*(struct),*(struct))),int)->(int)
(	O
&	O
ps	*(struct)
,	O
argv	*(*(char))
[	O
0	int
]	O
,	O
i	int
,	O
argv	*(*(char))
,	O
0	int
,	O
NULL	O
,	O
MU_STREAM_READ	int
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_error	(*(char))->(int)
(	O
_	O
(	O
"Can't run %s: %s"	*(char)
)	O
,	O
argv	*(*(char))
[	O
0	int
]	O
,	O
mu_strerror	(int)->(*(char))
(	O
rc	int
)	O
)	O
;	O
return	O
MU_WRDSE_USERERR	O
;	O
}	O
rc	int
=	O
mu_memory_stream_create	(*(*(struct)),int)->(int)
(	O
&	O
outs	*(struct)
,	O
MU_STREAM_RDWR	O
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_diag_funcall	(int,*(char),*(char),int)->(void)
(	O
MU_DIAG_ERROR	O
,	O
"mu_memory_stream_create"	*(char)
,	O
NULL	O
,	O
rc	int
)	O
;	O
mu_stream_destroy	(*(*(struct)))->(void)
(	O
&	O
ps	*(struct)
)	O
;	O
return	O
MU_WRDSE_USERERR	O
;	O
}	O
while	O
(	O
(	O
rc	int
=	O
mu_stream_read	(*(struct),*(void),long,*(long))->(int)
(	O
ps	*(struct)
,	O
buf	*(char)
,	O
sizeof	O
(	O
buf	*(char)
)	O
,	O
&	O
n	*(long)
)	O
)	O
==	O
0	int
&&	O
n	*(long)
>	O
0	int
)	O
{	O
int	O
wn	int
=	O
mu_stream_write	(*(struct),*(void),long,*(long))->(int)
(	O
outs	*(struct)
,	O
buf	*(char)
,	O
n	*(long)
,	O
NULL	O
)	O
;	O
if	O
(	O
wn	int
)	O
{	O
mu_error	(*(char))->(int)
(	O
_	O
(	O
"error writing to temporary stream: %s"	*(char)
)	O
,	O
mu_strerror	(int)->(*(char))
(	O
wn	int
)	O
)	O
;	O
status	int
=	O
MU_WRDSE_USERERR	O
;	O
break	O
;	O
}	O
}	O
if	O
(	O
status	int
==	O
MU_WRDSE_OK	O
&&	O
rc	int
)	O
{	O
mu_error	(*(char))->(int)
(	O
_	O
(	O
"error reading %s output: %s"	*(char)
)	O
,	O
argv	*(*(char))
[	O
0	int
]	O
,	O
mu_strerror	(int)->(*(char))
(	O
rc	int
)	O
)	O
;	O
status	int
=	O
MU_WRDSE_USERERR	O
;	O
}	O
mu_stream_destroy	(*(*(struct)))->(void)
(	O
&	O
ps	*(struct)
)	O
;	O
if	O
(	O
status	int
==	O
MU_WRDSE_OK	O
)	O
{	O
mu_off_t	long
size	long
;	O
char	O
*	O
p	*(char)
;	O
mu_stream_size	(*(struct),*(long))->(int)
(	O
outs	*(struct)
,	O
&	O
size	long
)	O
;	O
p	*(char)
=	O
malloc	(long)->(*(void))
(	O
size	long
+	O
1	int
)	O
;	O
if	O
(	O
p	*(char)
)	O
{	O
mu_stream_seek	(*(struct),long,int,*(long))->(int)
(	O
outs	*(struct)
,	O
0	int
,	O
MU_SEEK_SET	int
,	O
NULL	O
)	O
;	O
rc	int
=	O
mu_stream_read	(*(struct),*(void),long,*(long))->(int)
(	O
outs	*(struct)
,	O
p	*(char)
,	O
size	long
,	O
NULL	O
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
p	*(char)
[	O
size	long
]	O
=	O
0	int
;	O
*	O
ret	*(*(struct))
=	O
p	*(char)
;	O
}	O
else	O
{	O
free	(*(void))->(void)
(	O
p	*(char)
)	O
;	O
mu_error	(*(char))->(int)
(	O
_	O
(	O
"error reading from temporary stream: %s"	*(char)
)	O
,	O
mu_strerror	(int)->(*(char))
(	O
rc	int
)	O
)	O
;	O
status	int
=	O
MU_WRDSE_USERERR	O
;	O
}	O
}	O
else	O
status	int
=	O
MU_WRDSE_NOSPACE	O
;	O
}	O
mu_stream_destroy	(*(*(struct)))->(void)
(	O
&	O
outs	*(struct)
)	O
;	O
return	O
status	int
;	O
}	O
static	O
int	O
echo	(*(char),*(int))->(int)
(	O
char	O
*	O
s	*(char)
,	O
int	O
*	O
nl	int
)	O
{	O
int	O
rc	int
;	O
struct	O
mu_wordsplit	struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct(long,*(*`),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*`),*(*`),long,long,*(*`),long,*(*`),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct`),*(struct`),array(char),int)))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*(char)),*(char),long,*(void))->(int)),*(void),*((*(*(char)),*(char),long,*(*(char)),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
;	O
int	O
wsflags	int
=	O
MU_WRDSF_NOSPLIT	O
|	O
MU_WRDSF_QUOTE	O
|	O
MU_WRDSF_ENV	O
;	O
size_t	long
len	long
;	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
.	O
ws_env	*(*(char))
=	O
(	O
const	O
char	O
*	O
*	O
)	O
environ	*(*(char))
;	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
.	O
ws_command	*((*(*(char)),*(char),long,*(*(char)),*(void))->(int))
=	O
echo_runcmd	(*(*(char)),*(char),long,*(*(char)),*(void))->(int)
;	O
rc	int
=	O
mu_wordsplit	struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct(long,*(*`),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*`),*(*`),long,long,*(*`),long,*(*`),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct`),*(struct`),array(char),int)))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*(char)),*(char),long,*(void))->(int)),*(void),*((*(*(char)),*(char),long,*(*(char)),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)
(	O
s	*(char)
,	O
&	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
,	O
wsflags	int
)	O
;	O
switch	O
(	O
rc	int
)	O
{	O
case	O
MU_WRDSE_OK	O
:	O
break	O
;	O
case	O
MU_WRDSE_USERERR	O
:	O
mu_wordsplit_free	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)))->(void)
(	O
&	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
)	O
;	O
return	O
1	int
;	O
default	O
:	O
mu_error	(*(char))->(int)
(	O
"%s"	*(char)
,	O
mu_wordsplit_strerror	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)))->(*(char))
(	O
&	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
)	O
)	O
;	O
mu_wordsplit_free	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)))->(void)
(	O
&	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
)	O
;	O
return	O
1	int
;	O
}	O
len	long
=	O
strlen	(*(char))->(long)
(	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
.	O
ws_wordv	*(*(char))
[	O
0	int
]	O
)	O
;	O
mu_stream_write	(*(struct),*(void),long,*(long))->(int)
(	O
mu_strout	*(struct)
,	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
.	O
ws_wordv	*(*(char))
[	O
0	int
]	O
,	O
len	long
,	O
NULL	O
)	O
;	O
*	O
nl	int
=	O
len	long
>	O
0	int
&&	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
.	O
ws_wordv	*(*(char))
[	O
0	int
]	O
[	O
len	long
-	O
1	int
]	O
==	O
'\n'	O
;	O
mu_wordsplit_free	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)))->(void)
(	O
&	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
)	O
;	O
return	O
0	int
;	O
}	O
int	O
mail_echo	(int,*(*(char)))->(int)
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	*(*(char))
)	O
{	O
if	O
(	O
argc	int
>	O
1	int
)	O
{	O
int	O
i	int
;	O
int	O
nl	int
=	O
0	int
;	O
for	O
(	O
i	int
=	O
1	int
;	O
i	int
<	O
argc	int
;	O
i	int
++	O
)	O
{	O
if	O
(	O
i	int
>	O
1	int
)	O
mu_printf	(*(char))->(int)
(	O
" "	*(char)
)	O
;	O
if	O
(	O
echo	(*(char),*(int))->(int)
(	O
argv	*(*(char))
[	O
i	int
]	O
,	O
&	O
nl	int
)	O
)	O
break	O
;	O
}	O
if	O
(	O
!	O
nl	int
)	O
mu_printf	(*(char))->(int)
(	O
"\n"	*(char)
)	O
;	O
}	O
return	O
0	int
;	O
}	O
