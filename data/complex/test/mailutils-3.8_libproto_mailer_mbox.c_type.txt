struct	O
remote_mbox_data	struct(*(struct(*(struct),*(struct),*(struct),int,*(struct(*(void),*(void),int,int)),*(struct),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`),*(struct`),*(struct`),*(struct`))->(int)),*((*(struct`),*(*`))->(int)))))
{	O
mu_mailer_t	*(struct)
mailer	*(struct)
;	O
}	O
;	O
static	O
void	O
remote_mbox_destroy	(*(struct(*(struct),*(struct),*(struct),*(struct),*(struct),int,*(struct),*(struct(*`,*`,int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))))->(void)
(	O
mu_mailbox_t	*(struct)
mailbox	*(struct(*(struct),*(struct),*(struct),*(struct),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int))))
)	O
{	O
if	O
(	O
mailbox	*(struct(*(struct),*(struct),*(struct),*(struct),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int))))
->	O
data	*(void)
)	O
{	O
struct	O
remote_mbox_data	struct(*(struct(*(struct),*(struct),*(struct),int,*(struct(*(void),*(void),int,int)),*(struct),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`),*(struct`),*(struct`),*(struct`))->(int)),*((*(struct`),*(*`))->(int)))))
*	O
dat	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int))))))
=	O
mailbox	*(struct(*(struct),*(struct),*(struct),*(struct),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int))))
->	O
data	*(void)
;	O
mu_mailer_destroy	(*(*(struct)))->(void)
(	O
&	O
dat	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int))))))
->	O
mailer	*(struct)
)	O
;	O
free	(*(void))->(void)
(	O
dat	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int))))))
)	O
;	O
mailbox	*(struct(*(struct),*(struct),*(struct),*(struct),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int))))
->	O
data	*(void)
=	O
NULL	O
;	O
}	O
}	O
static	O
int	O
remote_mbox_open	(*(struct(*(struct),*(struct),*(struct),*(struct),*(struct),int,*(struct),*(struct(*`,*`,int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))),int)->(int)
(	O
mu_mailbox_t	*(struct)
mbox	*(struct)
,	O
int	O
flags	int
)	O
{	O
struct	O
remote_mbox_data	struct(*(struct(*(struct),*(struct),*(struct),int,*(struct(*(void),*(void),int,int)),*(struct),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`),*(struct`),*(struct`),*(struct`))->(int)),*((*(struct`),*(*`))->(int)))))
*	O
dat	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int))))))
=	O
mbox	*(struct)
->	O
data	*(void)
;	O
int	O
status	int
;	O
int	O
mflags	int
=	O
0	int
;	O
if	O
(	O
!	O
dat	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int))))))
->	O
mailer	*(struct)
)	O
return	O
EINVAL	int
;	O
if	O
(	O
mu_debug_level_p	(int,int)->(int)
(	O
MU_DEBCAT_MAILBOX	int
,	O
MU_DEBUG_TRACE7	int
)	O
)	O
mflags	int
=	O
MAILER_FLAG_DEBUG_DATA	int
;	O
status	int
=	O
mu_mailer_open	(*(struct),int)->(int)
(	O
dat	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int))))))
->	O
mailer	*(struct)
,	O
mflags	int
)	O
;	O
if	O
(	O
status	int
)	O
{	O
mu_debug	O
(	O
MU_DEBCAT_MAILBOX	int
,	O
MU_DEBUG_ERROR	int
,	O
(	O
"cannot open mailer: %s"	*(char)
,	O
mu_strerror	(int)->(*(char))
(	O
status	int
)	O
)	O
)	O
;	O
return	O
status	int
;	O
}	O
mbox	*(struct)
->	O
flags	int
=	O
flags	int
;	O
return	O
0	int
;	O
}	O
static	O
int	O
remote_mbox_close	(*(struct(*(struct),*(struct),*(struct),*(struct),*(struct),int,*(struct),*(struct(*`,*`,int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))))->(int)
(	O
mu_mailbox_t	*(struct)
mbox	*(struct)
)	O
{	O
struct	O
remote_mbox_data	struct(*(struct(*(struct),*(struct),*(struct),int,*(struct(*(void),*(void),int,int)),*(struct),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`),*(struct`),*(struct`),*(struct`))->(int)),*((*(struct`),*(*`))->(int)))))
*	O
dat	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int))))))
=	O
mbox	*(struct)
->	O
data	*(void)
;	O
int	O
status	int
;	O
mu_debug	O
(	O
MU_DEBCAT_MAILBOX	int
,	O
MU_DEBUG_TRACE1	int
,	O
(	O
"remote_mbox_close"	*(char)
)	O
)	O
;	O
status	int
=	O
mu_mailer_close	(*(struct))->(int)
(	O
dat	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int))))))
->	O
mailer	*(struct)
)	O
;	O
if	O
(	O
status	int
)	O
mu_debug	O
(	O
MU_DEBCAT_MAILBOX	int
,	O
MU_DEBUG_ERROR	int
,	O
(	O
"closing mailer failed: %s"	*(char)
,	O
mu_strerror	(int)->(*(char))
(	O
status	int
)	O
)	O
)	O
;	O
return	O
status	int
;	O
}	O
static	O
int	O
mkaddr	(*(struct(*(struct),*(struct),*(struct),*(struct),*(struct),int,*(struct),*(struct(*`,*`,int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))),*(struct),*(char),*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))->(int)
(	O
mu_mailbox_t	*(struct)
mbox	*(struct)
,	O
mu_property_t	*(struct)
property	*(struct)
,	O
const	O
char	O
*	O
key	*(char)
,	O
mu_address_t	*(struct)
*	O
addr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
)	O
{	O
const	O
char	O
*	O
str	*(struct)
=	O
NULL	O
;	O
mu_property_sget_value	(*(struct),*(char),*(*(char)))->(int)
(	O
property	*(struct)
,	O
key	*(char)
,	O
&	O
str	*(struct)
)	O
;	O
if	O
(	O
str	*(struct)
&&	O
*	O
str	*(struct)
)	O
{	O
int	O
status	int
=	O
mu_address_create	(*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))),*(char))->(int)
(	O
addr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
,	O
str	*(struct)
)	O
;	O
if	O
(	O
status	int
)	O
{	O
mu_debug	O
(	O
MU_DEBCAT_MAILBOX	int
,	O
MU_DEBUG_ERROR	int
,	O
(	O
"%s: %s mu_address_create failed: %s"	*(char)
,	O
str	*(struct)
,	O
key	*(char)
,	O
mu_strerror	(int)->(*(char))
(	O
status	int
)	O
)	O
)	O
;	O
return	O
status	int
;	O
}	O
}	O
else	O
*	O
addr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
=	O
NULL	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
parse_received	(*(struct),*(*(char)))->(int)
(	O
mu_header_t	*(struct)
hdr	*(struct)
,	O
char	O
*	O
*	O
sptr	*(*(char))
)	O
{	O
const	O
char	O
*	O
recv	(int,*(void),long,int)->(long)
;	O
size_t	long
i	long
;	O
struct	O
mu_wordsplit	struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct(long,*(*`),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*`),*(*`),long,long,*(*`),long,*(*`),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct`),*(struct`),array(char),int)))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*(char)),*(char),long,*(void))->(int)),*(void),*((*(*(char)),*(char),long,*(*(char)),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
;	O
enum	O
{	O
rcv_init	int
,	O
rcv_from	int
,	O
rcv_by	int
,	O
rcv_for	int
}	O
state	*(int)
;	O
int	O
status	int
;	O
char	O
*	O
s	*(char)
;	O
size_t	long
len	long
;	O
status	int
=	O
mu_header_sget_value	O
(	O
hdr	*(struct)
,	O
MU_HEADER_RECEIVED	*(char)
,	O
&	O
recv	(int,*(void),long,int)->(long)
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
if	O
(	O
mu_wordsplit	struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct(long,*(*`),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*`),*(*`),long,long,*(*`),long,*(*`),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct`),*(struct`),array(char),int)))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*(char)),*(char),long,*(void))->(int)),*(void),*((*(*(char)),*(char),long,*(*(char)),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)
(	O
recv	(int,*(void),long,int)->(long)
,	O
&	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
,	O
MU_WRDSF_DEFFLAGS	O
)	O
)	O
return	O
status	int
;	O
state	*(int)
=	O
rcv_init	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
.	O
ws_wordc	long
&&	O
state	*(int)
!=	O
rcv_for	int
;	O
i	long
++	O
)	O
{	O
switch	O
(	O
state	*(int)
)	O
{	O
case	O
rcv_init	int
:	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
.	O
ws_wordv	*(*(char))
[	O
i	long
]	O
,	O
"from"	*(char)
)	O
==	O
0	int
)	O
state	*(int)
=	O
rcv_from	int
;	O
break	O
;	O
case	O
rcv_from	int
:	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
.	O
ws_wordv	*(*(char))
[	O
i	long
]	O
,	O
"by"	*(char)
)	O
==	O
0	int
)	O
state	*(int)
=	O
rcv_by	int
;	O
break	O
;	O
case	O
rcv_by	int
:	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
.	O
ws_wordv	*(*(char))
[	O
i	long
]	O
,	O
"for"	*(char)
)	O
==	O
0	int
)	O
state	*(int)
=	O
rcv_for	int
;	O
break	O
;	O
default	O
:	O
break	O
;	O
}	O
}	O
if	O
(	O
state	*(int)
!=	O
rcv_for	int
||	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
.	O
ws_wordv	*(*(char))
[	O
i	long
]	O
==	O
NULL	O
)	O
return	O
MU_ERR_NOENT	O
;	O
s	*(char)
=	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
.	O
ws_wordv	*(*(char))
[	O
i	long
]	O
;	O
len	long
=	O
strlen	(*(char))->(long)
(	O
s	*(char)
)	O
;	O
if	O
(	O
s	*(char)
[	O
len	long
-	O
1	int
]	O
==	O
';'	O
)	O
len	long
--	O
;	O
if	O
(	O
s	*(char)
[	O
0	int
]	O
==	O
'<'	O
&&	O
s	*(char)
[	O
len	long
-	O
1	int
]	O
==	O
'>'	O
)	O
{	O
s	*(char)
++	O
;	O
len	long
--	O
;	O
}	O
*	O
sptr	*(*(char))
=	O
malloc	(long)->(*(void))
(	O
len	long
)	O
;	O
if	O
(	O
!	O
*	O
sptr	*(*(char))
)	O
status	int
=	O
ENOMEM	int
;	O
else	O
{	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
*	O
sptr	*(*(char))
,	O
s	*(char)
,	O
len	long
)	O
;	O
(	O
*	O
sptr	*(*(char))
)	O
[	O
len	long
-	O
1	int
]	O
=	O
0	int
;	O
}	O
mu_wordsplit_free	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)))->(void)
(	O
&	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
)	O
;	O
return	O
status	int
;	O
}	O
static	O
int	O
guess_message_recipient	(*(struct),*(*(char)),*(*(char)))->(int)
(	O
mu_message_t	*(struct)
msg	*(struct)
,	O
char	O
*	O
*	O
hdrname	*(*(char))
,	O
char	O
*	O
*	O
pptr	*(*(struct(*(char),*(char),*(char),*(struct))))
)	O
{	O
mu_header_t	*(struct)
hdr	*(struct)
;	O
int	O
status	int
;	O
char	O
*	O
s	*(char)
=	O
NULL	O
;	O
status	int
=	O
mu_message_get_header	(*(struct),*(*(struct)))->(int)
(	O
msg	*(struct)
,	O
&	O
hdr	*(struct)
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
if	O
(	O
hdrname	*(*(char))
)	O
{	O
int	O
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
hdrname	*(*(char))
[	O
i	long
]	O
;	O
i	long
++	O
)	O
{	O
status	int
=	O
mu_header_aget_value	O
(	O
hdr	*(struct)
,	O
hdrname	*(*(char))
[	O
i	long
]	O
,	O
&	O
s	*(char)
)	O
;	O
if	O
(	O
status	int
==	O
0	int
&&	O
*	O
s	*(char)
!=	O
0	int
)	O
break	O
;	O
}	O
}	O
else	O
status	int
=	O
MU_ERR_NOENT	O
;	O
if	O
(	O
status	int
==	O
MU_ERR_NOENT	O
)	O
{	O
status	int
=	O
parse_received	(*(struct),*(*(char)))->(int)
(	O
hdr	*(struct)
,	O
&	O
s	*(char)
)	O
;	O
if	O
(	O
status	int
)	O
status	int
=	O
mu_header_aget_value	O
(	O
hdr	*(struct)
,	O
MU_HEADER_TO	*(char)
,	O
&	O
s	*(char)
)	O
;	O
}	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
*	O
pptr	*(*(struct(*(char),*(char),*(char),*(struct))))
=	O
s	*(char)
;	O
return	O
0	int
;	O
}	O
static	O
int	O
remote_mbox_append_message	(*(struct(*(struct),*(struct),*(struct),*(struct),*(struct),int,*(struct),*(struct(*`,*`,int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))),*(struct))->(int)
(	O
mu_mailbox_t	*(struct)
mbox	*(struct)
,	O
mu_message_t	*(struct)
msg	*(struct)
)	O
{	O
struct	O
remote_mbox_data	struct(*(struct(*(struct),*(struct),*(struct),int,*(struct(*(void),*(void),int,int)),*(struct),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`),*(struct`),*(struct`),*(struct`))->(int)),*((*(struct`),*(*`))->(int)))))
*	O
dat	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int))))))
=	O
mbox	*(struct)
->	O
data	*(void)
;	O
int	O
status	int
;	O
mu_property_t	*(struct)
property	*(struct)
=	O
NULL	O
;	O
mu_address_t	*(struct)
from	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))))
,	O
to	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
;	O
if	O
(	O
!	O
dat	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int))))))
->	O
mailer	*(struct)
)	O
return	O
EINVAL	int
;	O
status	int
=	O
mu_mailbox_get_property	(*(struct),*(*(struct)))->(int)
(	O
mbox	*(struct)
,	O
&	O
property	*(struct)
)	O
;	O
if	O
(	O
status	int
)	O
mu_debug	O
(	O
MU_DEBCAT_MAILBOX	int
,	O
MU_DEBUG_ERROR	int
,	O
(	O
"failed to get property: %s"	*(char)
,	O
mu_strerror	(int)->(*(char))
(	O
status	int
)	O
)	O
)	O
;	O
mkaddr	(*(struct(*(struct),*(struct),*(struct),*(struct),*(struct),int,*(struct),*(struct(*`,*`,int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))),*(struct),*(char),*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))->(int)
(	O
mbox	*(struct)
,	O
property	*(struct)
,	O
"FROM"	*(char)
,	O
&	O
from	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))))
)	O
;	O
mkaddr	(*(struct(*(struct),*(struct),*(struct),*(struct),*(struct),int,*(struct),*(struct(*`,*`,int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))),*(struct),*(char),*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))->(int)
(	O
mbox	*(struct)
,	O
property	*(struct)
,	O
"TO"	*(char)
,	O
&	O
to	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
)	O
;	O
if	O
(	O
!	O
to	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
)	O
{	O
char	O
*	O
rcpt	*(char)
;	O
status	int
=	O
mu_url_aget_param	(*(struct),*(char),*(*(char)))->(int)
(	O
mbox	*(struct)
->	O
url	*(char)
,	O
"to"	*(char)
,	O
&	O
rcpt	*(char)
)	O
;	O
if	O
(	O
status	int
==	O
MU_ERR_NOENT	O
)	O
{	O
static	O
char	O
*	O
hdrnames	array(*(char))
[	O
]	O
=	O
{	O
"X-Envelope-To"	*(char)
,	O
"Delivered-To"	*(char)
,	O
"X-Original-To"	*(char)
,	O
NULL	O
}	O
;	O
const	O
char	O
*	O
hstr	*(char)
;	O
int	O
hc	int
;	O
char	O
*	O
*	O
hv	*(*(char))
;	O
struct	O
mu_wordsplit	struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct(long,*(*`),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*`),*(*`),long,long,*(*`),long,*(*`),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct`),*(struct`),array(char),int)))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*(char)),*(char),long,*(void))->(int)),*(void),*((*(*(char)),*(char),long,*(*(char)),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
;	O
if	O
(	O
mu_url_sget_param	(*(struct),*(char),*(*(char)))->(int)
(	O
mbox	*(struct)
->	O
url	*(char)
,	O
"recipient-headers"	*(char)
,	O
&	O
hstr	*(char)
)	O
==	O
0	int
)	O
{	O
if	O
(	O
*	O
hstr	*(char)
==	O
0	int
)	O
{	O
hc	int
=	O
0	int
;	O
hv	*(*(char))
=	O
NULL	O
;	O
}	O
else	O
{	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
.	O
ws_delim	*(char)
=	O
","	*(char)
;	O
if	O
(	O
mu_wordsplit	struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct(long,*(*`),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*`),*(*`),long,long,*(*`),long,*(*`),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct`),*(struct`),array(char),int)))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*(char)),*(char),long,*(void))->(int)),*(void),*((*(*(char)),*(char),long,*(*(char)),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)
(	O
hstr	*(char)
,	O
&	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
,	O
MU_WRDSF_DEFFLAGS	O
|	O
MU_WRDSF_DELIM	O
|	O
MU_WRDSF_WS	O
)	O
)	O
return	O
errno	O
;	O
hc	int
=	O
1	int
;	O
hv	*(*(char))
=	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
.	O
ws_wordv	*(*(char))
;	O
}	O
}	O
else	O
{	O
hc	int
=	O
0	int
;	O
hv	*(*(char))
=	O
hdrnames	array(*(char))
;	O
}	O
status	int
=	O
guess_message_recipient	(*(struct),*(*(char)),*(*(char)))->(int)
(	O
msg	*(struct)
,	O
hv	*(*(char))
,	O
&	O
rcpt	*(char)
)	O
;	O
if	O
(	O
hc	int
)	O
mu_wordsplit_free	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)))->(void)
(	O
&	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
)	O
;	O
}	O
if	O
(	O
status	int
!=	O
MU_ERR_NOENT	O
)	O
{	O
const	O
char	O
*	O
host	*(char)
;	O
struct	O
mu_address	struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))))))
hint	*(struct)
;	O
if	O
(	O
status	int
)	O
{	O
mu_debug	O
(	O
MU_DEBCAT_MAILBOX	int
,	O
MU_DEBUG_ERROR	int
,	O
(	O
"failed to get recipient: %s"	*(char)
,	O
mu_strerror	(int)->(*(char))
(	O
status	int
)	O
)	O
)	O
;	O
return	O
status	int
;	O
}	O
status	int
=	O
mu_url_sget_param	(*(struct),*(char),*(*(char)))->(int)
(	O
mbox	*(struct)
->	O
url	*(char)
,	O
"strip-domain"	*(char)
,	O
NULL	O
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
{	O
char	O
*	O
q	*(char)
=	O
strchr	(*(char),int)->(*(char))
(	O
rcpt	*(char)
,	O
'@'	O
)	O
;	O
if	O
(	O
q	*(char)
)	O
*	O
q	*(char)
=	O
0	int
;	O
}	O
status	int
=	O
mu_url_sget_param	(*(struct),*(char),*(*(char)))->(int)
(	O
mbox	*(struct)
->	O
url	*(char)
,	O
"domain"	*(char)
,	O
&	O
host	*(char)
)	O
;	O
if	O
(	O
!	O
(	O
status	int
==	O
0	int
&&	O
*	O
host	*(char)
)	O
)	O
mu_url_sget_host	(*(struct),*(*(char)))->(int)
(	O
mbox	*(struct)
->	O
url	*(char)
,	O
&	O
host	*(char)
)	O
;	O
hint	*(struct)
.	O
domain	*(char)
=	O
(	O
char	O
*	O
)	O
host	*(char)
;	O
status	int
=	O
mu_address_create_hint	(*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))),int)->(int)
(	O
&	O
to	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
,	O
rcpt	*(char)
,	O
&	O
hint	*(struct)
,	O
MU_ADDR_HINT_DOMAIN	int
)	O
;	O
free	(*(void))->(void)
(	O
rcpt	*(char)
)	O
;	O
if	O
(	O
status	int
)	O
{	O
mu_debug	O
(	O
MU_DEBCAT_MAILBOX	int
,	O
MU_DEBUG_ERROR	int
,	O
(	O
"%s: %s mu_address_create failed: %s"	*(char)
,	O
rcpt	*(char)
,	O
"TO"	*(char)
,	O
mu_strerror	(int)->(*(char))
(	O
status	int
)	O
)	O
)	O
;	O
return	O
status	int
;	O
}	O
}	O
}	O
status	int
=	O
mu_mailer_send_message	(*(struct),*(struct),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))))->(int)
(	O
dat	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int))))))
->	O
mailer	*(struct)
,	O
msg	*(struct)
,	O
from	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))))
,	O
to	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
)	O
;	O
if	O
(	O
status	int
)	O
mu_debug	O
(	O
MU_DEBCAT_MAILBOX	int
,	O
MU_DEBUG_ERROR	int
,	O
(	O
"Sending message failed: %s"	*(char)
,	O
mu_strerror	(int)->(*(char))
(	O
status	int
)	O
)	O
)	O
;	O
return	O
status	int
;	O
}	O
static	O
int	O
remote_mbox_scan	(*(struct(*(struct),*(struct),*(struct),*(struct),*(struct),int,*(struct),*(struct(*`,*`,int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))),long,*(long))->(int)
(	O
mu_mailbox_t	*(struct)
mbox	*(struct)
,	O
size_t	long
offset	long
,	O
size_t	long
*	O
pcount	*(long)
)	O
{	O
if	O
(	O
pcount	*(long)
)	O
*	O
pcount	*(long)
=	O
0	int
;	O
return	O
0	int
;	O
}	O
static	O
int	O
remote_get_size	(*(struct(*(struct),*(struct),*(struct),*(struct),*(struct),int,*(struct),*(struct(*`,*`,int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))),*(long))->(int)
(	O
mu_mailbox_t	*(struct)
mbox	*(struct)
,	O
mu_off_t	long
*	O
psize	*(long)
)	O
{	O
if	O
(	O
psize	*(long)
)	O
*	O
psize	*(long)
=	O
0	int
;	O
return	O
0	int
;	O
}	O
static	O
int	O
remote_sync	(*(struct(*(struct),*(struct),*(struct),*(struct),*(struct),int,*(struct),*(struct(*`,*`,int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))))->(int)
(	O
mu_mailbox_t	*(struct)
mbox	*(struct)
)	O
{	O
return	O
0	int
;	O
}	O
int	O
_mu_mailer_mailbox_init	(*(struct(*(struct),*(struct),*(struct),*(struct),*(struct),int,*(struct),*(struct(*`,*`,int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))))->(int)
(	O
mu_mailbox_t	*(struct)
mailbox	*(struct(*(struct),*(struct),*(struct),*(struct),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int))))
)	O
{	O
struct	O
remote_mbox_data	struct(*(struct(*(struct),*(struct),*(struct),int,*(struct(*(void),*(void),int,int)),*(struct),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`),*(struct`),*(struct`),*(struct`))->(int)),*((*(struct`),*(*`))->(int)))))
*	O
dat	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int))))))
;	O
int	O
rc	int
;	O
mu_mailer_t	*(struct)
mailer	*(struct)
;	O
mu_url_t	*(struct)
url	*(char)
;	O
if	O
(	O
mailbox	*(struct(*(struct),*(struct),*(struct),*(struct),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int))))
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
mu_debug	O
(	O
MU_DEBCAT_MAILBOX	int
,	O
MU_DEBUG_TRACE1	int
,	O
(	O
"_mu_mailer_mailbox_init(%s)"	*(char)
,	O
mu_url_to_string	(*(struct))->(*(char))
(	O
mailbox	*(struct(*(struct),*(struct),*(struct),*(struct),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int))))
->	O
url	*(char)
)	O
)	O
)	O
;	O
rc	int
=	O
mu_url_dup	(*(struct),*(*(struct)))->(int)
(	O
mailbox	*(struct(*(struct),*(struct),*(struct),*(struct),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int))))
->	O
url	*(char)
,	O
&	O
url	*(char)
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
rc	int
=	O
mu_mailer_create_from_url	(*(*(struct)),*(struct))->(int)
(	O
&	O
mailer	*(struct)
,	O
url	*(char)
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_debug	O
(	O
MU_DEBCAT_MAILBOX	int
,	O
MU_DEBUG_ERROR	int
,	O
(	O
"_mu_mailer_mailbox_init(%s): cannot create mailer: %s"	*(char)
,	O
mu_url_to_string	(*(struct))->(*(char))
(	O
url	*(char)
)	O
,	O
mu_strerror	(int)->(*(char))
(	O
rc	int
)	O
)	O
)	O
;	O
mu_url_destroy	(*(*(struct)))->(void)
(	O
&	O
url	*(char)
)	O
;	O
return	O
rc	int
;	O
}	O
dat	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int))))))
=	O
mailbox	*(struct(*(struct),*(struct),*(struct),*(struct),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int))))
->	O
data	*(void)
=	O
calloc	(long,long)->(*(void))
(	O
1	int
,	O
sizeof	O
(	O
*	O
dat	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int))))))
)	O
)	O
;	O
if	O
(	O
dat	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int))))))
==	O
NULL	O
)	O
{	O
mu_mailer_destroy	(*(*(struct)))->(void)
(	O
&	O
mailer	*(struct)
)	O
;	O
return	O
ENOMEM	int
;	O
}	O
dat	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int))))))
->	O
mailer	*(struct)
=	O
mailer	*(struct)
;	O
mailbox	*(struct(*(struct),*(struct),*(struct),*(struct),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int))))
->	O
_destroy	*((*(struct))->(int))
=	O
remote_mbox_destroy	(*(struct(*(struct),*(struct),*(struct),*(struct),*(struct),int,*(struct),*(struct(*`,*`,int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))))->(void)
;	O
mailbox	*(struct(*(struct),*(struct),*(struct),*(struct),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int))))
->	O
_open	*((*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(struct`),*(char),int,*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))),int)->(int))
=	O
remote_mbox_open	(*(struct(*(struct),*(struct),*(struct),*(struct),*(struct),int,*(struct),*(struct(*`,*`,int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))),int)->(int)
;	O
mailbox	*(struct(*(struct),*(struct),*(struct),*(struct),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int))))
->	O
_close	*((*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(struct`),*(char),int,*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))))->(int))
=	O
remote_mbox_close	(*(struct(*(struct),*(struct),*(struct),*(struct),*(struct),int,*(struct),*(struct(*`,*`,int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))))->(int)
;	O
mailbox	*(struct(*(struct),*(struct),*(struct),*(struct),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int))))
->	O
_append_message	*((*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(struct`),*(char),int,*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))),*(struct))->(int))
=	O
remote_mbox_append_message	(*(struct(*(struct),*(struct),*(struct),*(struct),*(struct),int,*(struct),*(struct(*`,*`,int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))),*(struct))->(int)
;	O
mailbox	*(struct(*(struct),*(struct),*(struct),*(struct),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int))))
->	O
_scan	*((*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(struct`),*(char),int,*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))),long,*(long))->(int))
=	O
remote_mbox_scan	(*(struct(*(struct),*(struct),*(struct),*(struct),*(struct),int,*(struct),*(struct(*`,*`,int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))),long,*(long))->(int)
;	O
mailbox	*(struct(*(struct),*(struct),*(struct),*(struct),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int))))
->	O
_get_size	*((*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(struct`),*(char),int,*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))),*(long))->(int))
=	O
remote_get_size	(*(struct(*(struct),*(struct),*(struct),*(struct),*(struct),int,*(struct),*(struct(*`,*`,int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))),*(long))->(int)
;	O
mailbox	*(struct(*(struct),*(struct),*(struct),*(struct),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int))))
->	O
_sync	*((*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(struct`),*(char),int,*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))))->(int))
=	O
remote_sync	(*(struct(*(struct),*(struct),*(struct),*(struct),*(struct),int,*(struct),*(struct(*`,*`,int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))))->(int)
;	O
return	O
0	int
;	O
}	O
int	O
_mu_mailer_folder_init	(*(struct))->(int)
(	O
mu_folder_t	*(struct)
folder	*(struct)
MU_ARG_UNUSED	O
)	O
{	O
return	O
0	int
;	O
}	O
