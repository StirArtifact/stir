void	O
error	()->(void)
(	O
)	O
;	O
int	O
tcputchar	()->(int)
(	O
)	O
;	O
void	O
tput_one_item	()->(void)
(	O
)	O
;	O
void	O
put_bool	()->(void)
(	O
)	O
;	O
void	O
put_num	()->(void)
(	O
)	O
;	O
void	O
put_str	()->(void)
(	O
)	O
;	O
void	O
put_longname	()->(void)
(	O
)	O
;	O
void	O
put_reset	()->(void)
(	O
)	O
;	O
void	O
put_init	()->(void)
(	O
)	O
;	O
void	O
put_init_internal	()->(void)
(	O
)	O
;	O
void	O
setup_termcap	()->(void)
(	O
)	O
;	O
void	O
split_args	()->(void)
(	O
)	O
;	O
void	O
usage	()->(void)
(	O
)	O
;	O
void	O
version	()->(void)
(	O
)	O
;	O
char	O
*	O
fgetline	()->(*(char))
(	O
)	O
;	O
extern	O
char	O
*	O
version_string	*(char)
;	O
char	O
*	O
program_name	*(char)
;	O
static	O
int	O
use_standard_input	int
;	O
static	O
int	O
use_termcap_only	int
;	O
static	O
struct	O
option	struct(*(char),int,*(int),int)
long_options	array(struct(*(char),int,*(int),int))
[	O
]	O
=	O
{	O
{	O
"help"	*(char)
,	O
no_argument	int
,	O
0	int
,	O
'h'	O
}	O
,	O
{	O
"standard-input"	*(char)
,	O
no_argument	int
,	O
0	int
,	O
'S'	O
}	O
,	O
{	O
"terminal"	*(char)
,	O
required_argument	int
,	O
0	int
,	O
'T'	O
}	O
,	O
{	O
"termcap"	*(char)
,	O
no_argument	int
,	O
0	int
,	O
't'	O
}	O
,	O
{	O
"version"	*(char)
,	O
no_argument	int
,	O
0	int
,	O
'V'	O
}	O
,	O
{	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
}	O
}	O
;	O
void	O
main	(int,*(*(char)))->(void)
(	O
argc	int
,	O
argv	*(*(char))
)	O
int	O
argc	int
;	O
char	O
*	O
*	O
argv	*(*(char))
;	O
{	O
char	O
*	O
term	*(char)
;	O
int	O
c	int
;	O
program_name	*(char)
=	O
argv	*(*(char))
[	O
0	int
]	O
;	O
term	*(char)
=	O
getenv	(*(char))->(*(char))
(	O
"TERM"	*(char)
)	O
;	O
use_standard_input	int
=	O
0	int
;	O
use_termcap_only	int
=	O
0	int
;	O
while	O
(	O
(	O
c	int
=	O
getopt_long	(int,*(*(char)),*(char),*(struct(*(char),int,*(int),int)),*(int))->(int)
(	O
argc	int
,	O
argv	*(*(char))
,	O
"T:SV"	*(char)
,	O
long_options	array(struct(*(char),int,*(int),int))
,	O
(	O
int	O
*	O
)	O
0	int
)	O
)	O
!=	O
EOF	O
)	O
{	O
switch	O
(	O
c	int
)	O
{	O
case	O
'h'	O
:	O
usage	()->(void)
(	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
0	int
)	O
;	O
break	O
;	O
case	O
't'	O
:	O
use_termcap_only	int
=	O
1	int
;	O
break	O
;	O
case	O
'T'	O
:	O
term	*(char)
=	O
optarg	*(char)
;	O
break	O
;	O
case	O
'S'	O
:	O
use_standard_input	int
=	O
1	int
;	O
break	O
;	O
case	O
'V'	O
:	O
version	()->(void)
(	O
)	O
;	O
break	O
;	O
default	O
:	O
usage	()->(void)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
1	int
)	O
;	O
}	O
}	O
if	O
(	O
(	O
use_standard_input	int
&&	O
(	O
optind	int
!=	O
argc	int
)	O
)	O
||	O
(	O
(	O
use_standard_input	int
==	O
0	int
)	O
&&	O
(	O
optind	int
==	O
argc	int
)	O
)	O
)	O
usage	()->(void)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
1	int
)	O
;	O
setup_termcap	()->(void)
(	O
term	*(char)
)	O
;	O
if	O
(	O
use_standard_input	int
)	O
{	O
char	O
*	O
line	*(char)
;	O
char	O
*	O
argbuf	array(*(char))
[	O
10	int
]	O
;	O
int	O
argcount	int
;	O
while	O
(	O
(	O
line	*(char)
=	O
fgetline	()->(*(char))
(	O
stdin	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
)	O
!=	O
NULL	O
)	O
{	O
argcount	int
=	O
sizeof	O
(	O
argbuf	array(*(char))
)	O
/	O
sizeof	O
(	O
argbuf	array(*(char))
[	O
0	int
]	O
)	O
;	O
split_args	()->(void)
(	O
line	*(char)
,	O
argbuf	array(*(char))
,	O
&	O
argcount	int
)	O
;	O
tput_one_item	()->(void)
(	O
argbuf	array(*(char))
,	O
argcount	int
)	O
;	O
free	(*(void))->(void)
(	O
line	*(char)
)	O
;	O
}	O
}	O
else	O
tput_one_item	()->(void)
(	O
argv	*(*(char))
+	O
optind	int
,	O
argc	int
-	O
optind	int
)	O
;	O
exit	(int)->(void)
(	O
CAP_PRESENT	int
)	O
;	O
}	O
void	O
tput_one_item	()->(void)
(	O
argv	*(*(char))
,	O
argc	int
)	O
char	O
*	O
*	O
argv	*(*(char))
;	O
int	O
argc	int
;	O
{	O
struct	O
conversion	struct(*(char),*(char),char)
*	O
conv	*(struct(*(char),*(char),char))
;	O
conv	*(struct(*(char),*(char),char))
=	O
find_info	()->(*(struct(*(char),*(char),char)))
(	O
argv	*(*(char))
[	O
0	int
]	O
,	O
use_termcap_only	int
)	O
;	O
if	O
(	O
conv	*(struct(*(char),*(char),char))
==	O
NULL	O
)	O
{	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
argv	*(*(char))
[	O
0	int
]	O
,	O
"longname"	*(char)
)	O
==	O
0	int
)	O
put_longname	()->(void)
(	O
)	O
;	O
else	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
argv	*(*(char))
[	O
0	int
]	O
,	O
"reset"	*(char)
)	O
==	O
0	int
)	O
put_reset	()->(void)
(	O
)	O
;	O
else	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
argv	*(*(char))
[	O
0	int
]	O
,	O
"init"	*(char)
)	O
==	O
0	int
)	O
put_init	()->(void)
(	O
)	O
;	O
else	O
{	O
error	()->(void)
(	O
MISSING_CAP	int
,	O
0	int
,	O
"Unknown term%s capability `%s'"	*(char)
,	O
use_termcap_only	int
?	O
"cap"	*(char)
:	O
"info"	*(char)
,	O
argv	*(*(char))
[	O
0	int
]	O
)	O
;	O
}	O
if	O
(	O
use_standard_input	int
)	O
return	O
;	O
else	O
exit	(int)->(void)
(	O
CAP_PRESENT	int
)	O
;	O
}	O
if	O
(	O
conv	*(struct(*(char),*(char),char))
->	O
type	char
&	O
NUM	int
)	O
put_num	()->(void)
(	O
conv	*(struct(*(char),*(char),char))
,	O
use_standard_input	int
)	O
;	O
else	O
if	O
(	O
conv	*(struct(*(char),*(char),char))
->	O
type	char
&	O
BOOL	int
)	O
put_bool	()->(void)
(	O
conv	*(struct(*(char),*(char),char))
,	O
use_standard_input	int
)	O
;	O
else	O
put_str	()->(void)
(	O
conv	*(struct(*(char),*(char),char))
,	O
argv	*(*(char))
+	O
1	int
,	O
argc	int
-	O
1	int
)	O
;	O
}	O
void	O
put_num	()->(void)
(	O
conv	*(struct(*(char),*(char),char))
)	O
struct	O
conversion	struct(*(char),*(char),char)
*	O
conv	*(struct(*(char),*(char),char))
;	O
{	O
if	O
(	O
use_standard_input	int
)	O
{	O
error	()->(void)
(	O
USAGE_ERROR	int
,	O
0	int
,	O
"Number capability `%s' cannot be used with -S"	*(char)
,	O
conv	*(struct(*(char),*(char),char))
->	O
info	*(char)
)	O
;	O
}	O
printf	(*(char))->(int)
(	O
"%d\n"	*(char)
,	O
tgetnum	(*(char))->(int)
(	O
conv	*(struct(*(char),*(char),char))
->	O
cap	*(char)
)	O
)	O
;	O
}	O
void	O
put_bool	()->(void)
(	O
conv	*(struct(*(char),*(char),char))
)	O
struct	O
conversion	struct(*(char),*(char),char)
*	O
conv	*(struct(*(char),*(char),char))
;	O
{	O
if	O
(	O
use_standard_input	int
)	O
{	O
error	()->(void)
(	O
USAGE_ERROR	int
,	O
0	int
,	O
"Boolean capability `%s' cannot be used with -S"	*(char)
,	O
conv	*(struct(*(char),*(char),char))
->	O
info	*(char)
)	O
;	O
}	O
if	O
(	O
!	O
tgetflag	(*(char))->(int)
(	O
conv	*(struct(*(char),*(char),char))
->	O
cap	*(char)
)	O
)	O
exit	(int)->(void)
(	O
BOOLEAN_FALSE	int
)	O
;	O
}	O
void	O
put_str	()->(void)
(	O
conv	*(struct(*(char),*(char),char))
,	O
argv	*(*(char))
,	O
argc	int
)	O
struct	O
conversion	struct(*(char),*(char),char)
*	O
conv	*(struct(*(char),*(char),char))
;	O
char	O
*	O
*	O
argv	*(*(char))
;	O
int	O
argc	int
;	O
{	O
char	O
*	O
string_value	*(char)
;	O
int	O
lines_affected	int
;	O
string_value	*(char)
=	O
tgetstr	(*(char),*(*(char)))->(*(char))
(	O
conv	*(struct(*(char),*(char),char))
->	O
cap	*(char)
,	O
(	O
char	O
*	O
*	O
)	O
NULL	O
)	O
;	O
if	O
(	O
string_value	*(char)
==	O
NULL	O
)	O
if	O
(	O
use_standard_input	int
)	O
return	O
;	O
else	O
exit	(int)->(void)
(	O
MISSING_CAP	int
)	O
;	O
if	O
(	O
!	O
strcmp	(*(char),*(char))->(int)
(	O
conv	*(struct(*(char),*(char),char))
->	O
cap	*(char)
,	O
"cm"	*(char)
)	O
)	O
{	O
if	O
(	O
BC	*(char)
==	O
0	int
)	O
BC	*(char)
=	O
tgetstr	(*(char),*(*(char)))->(*(char))
(	O
"le"	*(char)
,	O
(	O
char	O
*	O
*	O
)	O
NULL	O
)	O
;	O
if	O
(	O
UP	*(char)
==	O
0	int
)	O
UP	*(char)
=	O
tgetstr	(*(char),*(*(char)))->(*(char))
(	O
"up"	*(char)
,	O
(	O
char	O
*	O
*	O
)	O
NULL	O
)	O
;	O
switch	O
(	O
argc	int
)	O
{	O
case	O
0	int
:	O
break	O
;	O
case	O
1	int
:	O
string_value	*(char)
=	O
tgoto	(*(char),int,int)->(*(char))
(	O
string_value	*(char)
,	O
0	int
,	O
atoi	(*(char))->(int)
(	O
argv	*(*(char))
[	O
0	int
]	O
)	O
)	O
;	O
break	O
;	O
default	O
:	O
string_value	*(char)
=	O
tgoto	(*(char),int,int)->(*(char))
(	O
string_value	*(char)
,	O
atoi	(*(char))->(int)
(	O
argv	*(*(char))
[	O
1	int
]	O
)	O
,	O
atoi	(*(char))->(int)
(	O
argv	*(*(char))
[	O
0	int
]	O
)	O
)	O
;	O
break	O
;	O
}	O
}	O
else	O
switch	O
(	O
argc	int
)	O
{	O
case	O
0	int
:	O
break	O
;	O
case	O
1	int
:	O
string_value	*(char)
=	O
tparam	(*(char),*(char),int)->(*(char))
(	O
string_value	*(char)
,	O
(	O
char	O
*	O
)	O
NULL	O
,	O
0	int
,	O
atoi	(*(char))->(int)
(	O
argv	*(*(char))
[	O
0	int
]	O
)	O
)	O
;	O
break	O
;	O
case	O
2	int
:	O
string_value	*(char)
=	O
tparam	(*(char),*(char),int)->(*(char))
(	O
string_value	*(char)
,	O
(	O
char	O
*	O
)	O
NULL	O
,	O
0	int
,	O
atoi	(*(char))->(int)
(	O
argv	*(*(char))
[	O
0	int
]	O
)	O
,	O
atoi	(*(char))->(int)
(	O
argv	*(*(char))
[	O
1	int
]	O
)	O
)	O
;	O
break	O
;	O
case	O
3	int
:	O
string_value	*(char)
=	O
tparam	(*(char),*(char),int)->(*(char))
(	O
string_value	*(char)
,	O
(	O
char	O
*	O
)	O
NULL	O
,	O
0	int
,	O
atoi	(*(char))->(int)
(	O
argv	*(*(char))
[	O
0	int
]	O
)	O
,	O
atoi	(*(char))->(int)
(	O
argv	*(*(char))
[	O
1	int
]	O
)	O
,	O
atoi	(*(char))->(int)
(	O
argv	*(*(char))
[	O
2	int
]	O
)	O
)	O
;	O
break	O
;	O
default	O
:	O
string_value	*(char)
=	O
tparam	(*(char),*(char),int)->(*(char))
(	O
string_value	*(char)
,	O
(	O
char	O
*	O
)	O
NULL	O
,	O
0	int
,	O
atoi	(*(char))->(int)
(	O
argv	*(*(char))
[	O
0	int
]	O
)	O
,	O
atoi	(*(char))->(int)
(	O
argv	*(*(char))
[	O
1	int
]	O
)	O
,	O
atoi	(*(char))->(int)
(	O
argv	*(*(char))
[	O
2	int
]	O
)	O
,	O
atoi	(*(char))->(int)
(	O
argv	*(*(char))
[	O
3	int
]	O
)	O
)	O
;	O
break	O
;	O
}	O
if	O
(	O
conv	*(struct(*(char),*(char),char))
->	O
type	char
&	O
PAD	int
)	O
lines_affected	int
=	O
tgetnum	(*(char))->(int)
(	O
"li"	*(char)
)	O
;	O
else	O
lines_affected	int
=	O
1	int
;	O
if	O
(	O
lines_affected	int
<	O
1	int
)	O
lines_affected	int
=	O
1	int
;	O
translations_off	()->(void)
(	O
)	O
;	O
tputs	(*(char),int,*((int)->(int)))->(void)
(	O
string_value	*(char)
,	O
lines_affected	int
,	O
tcputchar	()->(int)
)	O
;	O
fflush	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
restore_translations	()->(void)
(	O
)	O
;	O
}	O
int	O
tcputchar	()->(int)
(	O
c	int
)	O
char	O
c	int
;	O
{	O
putchar	(int)->(int)
(	O
c	int
&	O
0x7f	int
)	O
;	O
return	O
c	int
;	O
}	O
static	O
char	O
term_buffer	array(char)
[	O
2048	int
]	O
;	O
void	O
put_longname	()->(void)
(	O
)	O
{	O
char	O
*	O
ep	*(char)
,	O
*	O
cp	*(char)
;	O
for	O
(	O
ep	*(char)
=	O
term_buffer	array(char)
;	O
*	O
ep	*(char)
&&	O
*	O
ep	*(char)
!=	O
':'	O
;	O
ep	*(char)
++	O
)	O
;	O
cp	*(char)
=	O
(	O
char	O
*	O
)	O
xmalloc	()->(int)
(	O
ep	*(char)
-	O
term_buffer	array(char)
+	O
1	int
)	O
;	O
strncpy	(*(char),*(char),long)->(*(char))
(	O
cp	*(char)
,	O
term_buffer	array(char)
,	O
ep	*(char)
-	O
term_buffer	array(char)
)	O
;	O
cp	*(char)
[	O
ep	*(char)
-	O
term_buffer	array(char)
]	O
=	O
0	int
;	O
for	O
(	O
ep	*(char)
=	O
&	O
cp	*(char)
[	O
ep	*(char)
-	O
term_buffer	array(char)
]	O
-	O
1	int
;	O
ep	*(char)
>=	O
cp	*(char)
&&	O
*	O
ep	*(char)
!=	O
'|'	O
;	O
ep	*(char)
--	O
)	O
;	O
if	O
(	O
ep	*(char)
>=	O
cp	*(char)
&&	O
*	O
ep	*(char)
==	O
'|'	O
)	O
puts	(*(char))->(int)
(	O
ep	*(char)
+	O
1	int
)	O
;	O
else	O
puts	(*(char))->(int)
(	O
cp	*(char)
)	O
;	O
}	O
void	O
put_init_internal	()->(void)
(	O
reset	int
)	O
int	O
reset	int
;	O
{	O
int	O
need_xtabs	int
;	O
int	O
lines	int
,	O
it	int
;	O
char	O
*	O
cap	*(char)
;	O
need_xtabs	int
=	O
0	int
;	O
lines	int
=	O
tgetnum	(*(char))->(int)
(	O
"li"	*(char)
)	O
;	O
if	O
(	O
lines	int
<=	O
0	int
)	O
lines	int
=	O
25	int
;	O
translations_off	()->(void)
(	O
)	O
;	O
cap	*(char)
=	O
tgetstr	(*(char),*(*(char)))->(*(char))
(	O
"rs"	*(char)
,	O
(	O
char	O
*	O
*	O
)	O
NULL	O
)	O
;	O
if	O
(	O
cap	*(char)
)	O
tputs	(*(char),int,*((int)->(int)))->(void)
(	O
cap	*(char)
,	O
lines	int
,	O
tcputchar	()->(int)
)	O
;	O
cap	*(char)
=	O
tgetstr	(*(char),*(*(char)))->(*(char))
(	O
"i1"	*(char)
,	O
(	O
char	O
*	O
*	O
)	O
NULL	O
)	O
;	O
if	O
(	O
cap	*(char)
)	O
tputs	(*(char),int,*((int)->(int)))->(void)
(	O
cap	*(char)
,	O
lines	int
,	O
tcputchar	()->(int)
)	O
;	O
cap	*(char)
=	O
tgetstr	(*(char),*(*(char)))->(*(char))
(	O
"is"	*(char)
,	O
(	O
char	O
*	O
*	O
)	O
NULL	O
)	O
;	O
if	O
(	O
cap	*(char)
)	O
tputs	(*(char),int,*((int)->(int)))->(void)
(	O
cap	*(char)
,	O
lines	int
,	O
tcputchar	()->(int)
)	O
;	O
cap	*(char)
=	O
tgetstr	(*(char),*(*(char)))->(*(char))
(	O
"if"	*(char)
,	O
(	O
char	O
*	O
*	O
)	O
NULL	O
)	O
;	O
if	O
(	O
cap	*(char)
)	O
{	O
char	O
buf	array(char)
[	O
1024	int
]	O
;	O
int	O
fd	int
;	O
int	O
nbytes	int
;	O
int	O
errors	int
;	O
errors	int
=	O
0	int
;	O
fd	int
=	O
open	()->(int)
(	O
cap	*(char)
,	O
0	int
)	O
;	O
if	O
(	O
fd	int
>=	O
0	int
)	O
{	O
while	O
(	O
(	O
nbytes	int
=	O
read	()->(int)
(	O
fd	int
,	O
buf	array(char)
,	O
sizeof	O
(	O
buf	array(char)
)	O
)	O
)	O
>	O
0	int
)	O
{	O
if	O
(	O
write	()->(int)
(	O
1	int
,	O
buf	array(char)
,	O
nbytes	int
)	O
<	O
0	int
)	O
{	O
error	()->(void)
(	O
0	int
,	O
errno	O
,	O
"cannot write initialization string"	*(char)
)	O
;	O
errors	int
++	O
;	O
break	O
;	O
}	O
}	O
close	()->(int)
(	O
fd	int
)	O
;	O
}	O
else	O
{	O
error	()->(void)
(	O
0	int
,	O
errno	O
,	O
"cannot read initialization file `%s'"	*(char)
,	O
cap	*(char)
)	O
;	O
errors	int
++	O
;	O
}	O
if	O
(	O
errors	int
)	O
{	O
restore_translations	()->(void)
(	O
)	O
;	O
exit	(int)->(void)
(	O
ERROR_EXIT	int
)	O
;	O
}	O
}	O
cap	*(char)
=	O
tgetstr	(*(char),*(*(char)))->(*(char))
(	O
"i3"	*(char)
,	O
(	O
char	O
*	O
*	O
)	O
NULL	O
)	O
;	O
if	O
(	O
cap	*(char)
)	O
tputs	(*(char),int,*((int)->(int)))->(void)
(	O
cap	*(char)
,	O
lines	int
,	O
tcputchar	()->(int)
)	O
;	O
it	int
=	O
tgetnum	(*(char))->(int)
(	O
"it"	*(char)
)	O
;	O
if	O
(	O
it	int
<	O
0	int
||	O
it	int
==	O
8	int
)	O
;	O
else	O
{	O
char	O
*	O
ct	*(char)
,	O
*	O
st	*(char)
;	O
if	O
(	O
(	O
ct	*(char)
=	O
tgetstr	(*(char),*(*(char)))->(*(char))
(	O
"ct"	*(char)
,	O
(	O
char	O
*	O
*	O
)	O
NULL	O
)	O
)	O
!=	O
0	int
&&	O
(	O
st	*(char)
=	O
tgetstr	(*(char),*(*(char)))->(*(char))
(	O
"st"	*(char)
,	O
(	O
char	O
*	O
*	O
)	O
NULL	O
)	O
)	O
!=	O
0	int
)	O
{	O
int	O
width	int
,	O
col	int
;	O
char	O
*	O
cr	*(char)
;	O
width	int
=	O
tgetnum	(*(char))->(int)
(	O
"co"	*(char)
)	O
;	O
if	O
(	O
width	int
<=	O
0	int
)	O
{	O
width	int
=	O
80	int
;	O
}	O
if	O
(	O
(	O
cr	*(char)
=	O
tgetstr	(*(char),*(*(char)))->(*(char))
(	O
"cr"	*(char)
,	O
(	O
char	O
*	O
*	O
)	O
NULL	O
)	O
)	O
==	O
0	int
)	O
cr	*(char)
=	O
"\r"	*(char)
;	O
tputs	(*(char),int,*((int)->(int)))->(void)
(	O
cr	*(char)
,	O
lines	int
,	O
tcputchar	()->(int)
)	O
;	O
for	O
(	O
col	int
=	O
1	int
;	O
col	int
<	O
width	int
;	O
col	int
+=	O
8	int
)	O
{	O
tputs	(*(char),int,*((int)->(int)))->(void)
(	O
"        "	*(char)
,	O
1	int
,	O
tcputchar	()->(int)
)	O
;	O
tputs	(*(char),int,*((int)->(int)))->(void)
(	O
st	*(char)
,	O
1	int
,	O
tcputchar	()->(int)
)	O
;	O
}	O
}	O
else	O
need_xtabs	int
=	O
1	int
;	O
}	O
fflush	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
restore_translations	()->(void)
(	O
)	O
;	O
if	O
(	O
need_xtabs	int
)	O
enable_xtabs	()->(void)
(	O
)	O
;	O
}	O
void	O
put_reset	()->(void)
(	O
)	O
{	O
put_init_internal	()->(void)
(	O
1	int
)	O
;	O
}	O
void	O
put_init	()->(void)
(	O
)	O
{	O
put_init_internal	()->(void)
(	O
0	int
)	O
;	O
}	O
void	O
setup_termcap	()->(void)
(	O
term	*(char)
)	O
char	O
*	O
term	*(char)
;	O
{	O
char	O
*	O
tc_pc	*(char)
;	O
if	O
(	O
term	*(char)
==	O
NULL	O
)	O
error	()->(void)
(	O
UNKNOWN_TERM	int
,	O
0	int
,	O
"No value for $TERM and no -T specified"	*(char)
)	O
;	O
switch	O
(	O
tgetent	(*(char),*(char))->(int)
(	O
term_buffer	array(char)
,	O
term	*(char)
)	O
)	O
{	O
case	O
0	int
:	O
error	()->(void)
(	O
UNKNOWN_TERM	int
,	O
0	int
,	O
"Unknown terminal type `%s'"	*(char)
,	O
term	*(char)
)	O
;	O
case	O
-	O
1	int
:	O
error	()->(void)
(	O
UNKNOWN_TERM	int
,	O
0	int
,	O
"No termcap database"	*(char)
)	O
;	O
}	O
tc_pc	*(char)
=	O
tgetstr	(*(char),*(*(char)))->(*(char))
(	O
"pc"	*(char)
,	O
(	O
char	O
*	O
*	O
)	O
NULL	O
)	O
;	O
PC	char
=	O
tc_pc	*(char)
?	O
*	O
tc_pc	*(char)
:	O
0	int
;	O
}	O
void	O
split_args	()->(void)
(	O
buf	array(char)
,	O
argv	*(*(char))
,	O
argc	int
)	O
char	O
*	O
buf	array(char)
;	O
char	O
*	O
*	O
argv	*(*(char))
;	O
int	O
*	O
argc	int
;	O
{	O
int	O
maxargs	int
=	O
*	O
argc	int
-	O
1	int
;	O
int	O
argindex	int
=	O
0	int
;	O
while	O
(	O
*	O
buf	array(char)
&&	O
*	O
buf	array(char)
!=	O
'\n'	O
&&	O
argindex	int
<	O
maxargs	int
)	O
{	O
while	O
(	O
*	O
buf	array(char)
==	O
' '	O
||	O
*	O
buf	array(char)
==	O
'\t'	O
)	O
buf	array(char)
++	O
;	O
if	O
(	O
*	O
buf	array(char)
==	O
0	int
||	O
*	O
buf	array(char)
==	O
'\n'	O
)	O
{	O
*	O
argc	int
=	O
argindex	int
;	O
return	O
;	O
}	O
argv	*(*(char))
[	O
argindex	int
]	O
=	O
buf	array(char)
;	O
while	O
(	O
*	O
buf	array(char)
&&	O
*	O
buf	array(char)
!=	O
'\n'	O
&&	O
*	O
buf	array(char)
!=	O
' '	O
&&	O
*	O
buf	array(char)
!=	O
'\t'	O
)	O
buf	array(char)
++	O
;	O
if	O
(	O
*	O
buf	array(char)
==	O
0	int
)	O
{	O
*	O
argc	int
=	O
argindex	int
;	O
return	O
;	O
}	O
else	O
{	O
*	O
buf	array(char)
++	O
=	O
0	int
;	O
}	O
argindex	int
++	O
;	O
}	O
*	O
argc	int
=	O
argindex	int
;	O
}	O
void	O
usage	()->(void)
(	O
stream	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
status	int
)	O
FILE	struct
*	O
stream	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
;	O
int	O
status	int
;	O
{	O
static	O
char	O
*	O
how	array(*(char))
[	O
]	O
=	O
{	O
"Usage: [options] capability [parameters...]"	*(char)
,	O
"       [options] longname"	*(char)
,	O
"       [options] init"	*(char)
,	O
"       [options] reset"	*(char)
,	O
0	int
,	O
}	O
;	O
static	O
char	O
*	O
opts	array(*(char))
[	O
]	O
=	O
{	O
"       [-T termtype] [--terminal=termtype] : specify terminal type"	*(char)
,	O
"       [-t] [--termcap] : search only by termcap name"	*(char)
,	O
"       [-V] [--version] : print version information"	*(char)
,	O
"       [-S] [--standard-input] : read capabilities from standard input"	*(char)
,	O
0	int
,	O
}	O
;	O
char	O
*	O
*	O
p	*(*(char))
;	O
for	O
(	O
p	*(*(char))
=	O
how	array(*(char))
;	O
*	O
p	*(*(char))
;	O
p	*(*(char))
++	O
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s\n"	*(char)
,	O
*	O
p	*(*(char))
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stream	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"Options:\n"	*(char)
)	O
;	O
for	O
(	O
p	*(*(char))
=	O
opts	array(*(char))
;	O
*	O
p	*(*(char))
;	O
p	*(*(char))
++	O
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stream	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s\n"	*(char)
,	O
*	O
p	*(*(char))
)	O
;	O
if	O
(	O
status	int
)	O
exit	(int)->(void)
(	O
USAGE_ERROR	int
)	O
;	O
else	O
exit	(int)->(void)
(	O
0	int
)	O
;	O
}	O
void	O
version	()->(void)
(	O
)	O
{	O
printf	(*(char))->(int)
(	O
"GNU tput version %s\n"	*(char)
,	O
version_string	*(char)
)	O
;	O
exit	(int)->(void)
(	O
0	int
)	O
;	O
}	O
