struct	O
list_iterator	struct(*(struct(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`))),long,*(struct(*(void),*(void),int,int)),*((*(void),*(void))->(int)),*((*(void))->(void)),*(struct(*(struct`),*(void),int,*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),*`)->(int)),*((*`)->(*`)))))),*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`))))),int)
{	O
mu_list_t	*(struct)
list	*(struct)
;	O
struct	O
list_data	struct(*(void),*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`))))),*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`))))))
*	O
cur	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
;	O
int	O
backwards	int
;	O
}	O
;	O
static	O
int	O
first	*((*(void))->(int))
(	O
void	O
*	O
owner	*(void)
)	O
{	O
struct	O
list_iterator	struct(*(struct(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`))),long,*(struct(*(void),*(void),int,int)),*((*(void),*(void))->(int)),*((*(void))->(void)),*(struct(*(struct`),*(void),int,*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),*`)->(int)),*((*`)->(*`)))))),*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`))))),int)
*	O
itr	*(struct)
=	O
owner	*(void)
;	O
if	O
(	O
itr	*(struct)
->	O
backwards	int
)	O
itr	*(struct)
->	O
cur	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
=	O
itr	*(struct)
->	O
list	*(struct)
->	O
head	struct(*(void),*(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`)))),*(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`)))))
.	O
prev	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
;	O
else	O
itr	*(struct)
->	O
cur	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
=	O
itr	*(struct)
->	O
list	*(struct)
->	O
head	struct(*(void),*(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`)))),*(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`)))))
.	O
next	*((*(void))->(int))
;	O
return	O
0	int
;	O
}	O
static	O
int	O
next	*((*(void))->(int))
(	O
void	O
*	O
owner	*(void)
)	O
{	O
struct	O
list_iterator	struct(*(struct(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`))),long,*(struct(*(void),*(void),int,int)),*((*(void),*(void))->(int)),*((*(void))->(void)),*(struct(*(struct`),*(void),int,*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),*`)->(int)),*((*`)->(*`)))))),*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`))))),int)
*	O
itr	*(struct)
=	O
owner	*(void)
;	O
if	O
(	O
itr	*(struct)
->	O
backwards	int
)	O
itr	*(struct)
->	O
cur	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
=	O
itr	*(struct)
->	O
cur	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
->	O
prev	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
;	O
else	O
itr	*(struct)
->	O
cur	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
=	O
itr	*(struct)
->	O
cur	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
->	O
next	*((*(void))->(int))
;	O
return	O
0	int
;	O
}	O
static	O
int	O
getitem	*((*(void),*(*(void)),*(*(void)))->(int))
(	O
void	O
*	O
owner	*(void)
,	O
void	O
*	O
*	O
pret	*(*(void))
,	O
const	O
void	O
*	O
*	O
pkey	*(*(void))
)	O
{	O
struct	O
list_iterator	struct(*(struct(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`))),long,*(struct(*(void),*(void),int,int)),*((*(void),*(void))->(int)),*((*(void))->(void)),*(struct(*(struct`),*(void),int,*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),*`)->(int)),*((*`)->(*`)))))),*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`))))),int)
*	O
itr	*(struct)
=	O
owner	*(void)
;	O
*	O
pret	*(*(void))
=	O
itr	*(struct)
->	O
cur	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
->	O
item	*(void)
;	O
if	O
(	O
pkey	*(*(void))
)	O
*	O
pkey	*(*(void))
=	O
NULL	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
finished_p	*((*(void))->(int))
(	O
void	O
*	O
owner	*(void)
)	O
{	O
struct	O
list_iterator	struct(*(struct(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`))),long,*(struct(*(void),*(void),int,int)),*((*(void),*(void))->(int)),*((*(void))->(void)),*(struct(*(struct`),*(void),int,*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),*`)->(int)),*((*`)->(*`)))))),*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`))))),int)
*	O
itr	*(struct)
=	O
owner	*(void)
;	O
return	O
itr	*(struct)
->	O
cur	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
==	O
&	O
itr	*(struct)
->	O
list	*(struct)
->	O
head	struct(*(void),*(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`)))),*(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`)))))
;	O
}	O
static	O
int	O
destroy	*((*(struct),*(void))->(int))
(	O
mu_iterator_t	*(struct)
iterator	*(struct)
,	O
void	O
*	O
data	*(void)
)	O
{	O
struct	O
list_iterator	struct(*(struct(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`))),long,*(struct(*(void),*(void),int,int)),*((*(void),*(void))->(int)),*((*(void))->(void)),*(struct(*(struct`),*(void),int,*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),*`)->(int)),*((*`)->(*`)))))),*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`))))),int)
*	O
itr	*(struct)
=	O
data	*(void)
;	O
mu_iterator_detach	(*(*(struct)),*(struct))->(int)
(	O
&	O
itr	*(struct)
->	O
list	*(struct)
->	O
itr	*(struct)
,	O
iterator	*(struct)
)	O
;	O
free	(*(void))->(void)
(	O
data	*(void)
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
delitem	*((*(void),*(void))->(int))
(	O
void	O
*	O
owner	*(void)
,	O
void	O
*	O
item	*(void)
)	O
{	O
struct	O
list_iterator	struct(*(struct(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`))),long,*(struct(*(void),*(void),int,int)),*((*(void),*(void))->(int)),*((*(void))->(void)),*(struct(*(struct`),*(void),int,*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),*`)->(int)),*((*`)->(*`)))))),*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`))))),int)
*	O
itr	*(struct)
=	O
owner	*(void)
;	O
return	O
itr	*(struct)
->	O
cur	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
==	O
item	*(void)
?	O
MU_ITR_DELITEM_NEXT	int
:	O
MU_ITR_DELITEM_NOTHING	int
;	O
}	O
static	O
int	O
list_data_dup	(*(*(void)),*(void))->(int)
(	O
void	O
*	O
*	O
ptr	*(*(void))
,	O
void	O
*	O
owner	*(void)
)	O
{	O
*	O
ptr	*(*(void))
=	O
malloc	(long)->(*(void))
(	O
sizeof	O
(	O
struct	O
list_iterator	struct(*(struct(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`))),long,*(struct(*(void),*(void),int,int)),*((*(void),*(void))->(int)),*((*(void))->(void)),*(struct(*(struct`),*(void),int,*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),*`)->(int)),*((*`)->(*`)))))),*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`))))),int)
)	O
)	O
;	O
if	O
(	O
*	O
ptr	*(*(void))
==	O
NULL	O
)	O
return	O
ENOMEM	int
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
*	O
ptr	*(*(void))
,	O
owner	*(void)
,	O
sizeof	O
(	O
struct	O
list_iterator	struct(*(struct(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`))),long,*(struct(*(void),*(void),int,int)),*((*(void),*(void))->(int)),*((*(void))->(void)),*(struct(*(struct`),*(void),int,*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),*`)->(int)),*((*`)->(*`)))))),*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`))))),int)
)	O
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
list_itrctl	(*(void),enum(int,int,int,int,int,int,int,int,int,int),*(void))->(int)
(	O
void	O
*	O
owner	*(void)
,	O
enum	O
mu_itrctl_req	enum(int,int,int,int,int,int,int,int,int,int)
req	enum(int,int,int,int,int,int,int,int,int,int)
,	O
void	O
*	O
arg	*(void)
)	O
{	O
struct	O
list_iterator	struct(*(struct(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`))),long,*(struct(*(void),*(void),int,int)),*((*(void),*(void))->(int)),*((*(void))->(void)),*(struct(*(struct`),*(void),int,*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),*`)->(int)),*((*`)->(*`)))))),*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`))))),int)
*	O
itr	*(struct)
=	O
owner	*(void)
;	O
mu_list_t	*(struct)
list	*(struct)
=	O
itr	*(struct)
->	O
list	*(struct)
;	O
struct	O
list_data	struct(*(void),*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`))))),*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`))))))
*	O
ptr	*(*(void))
;	O
switch	O
(	O
req	enum(int,int,int,int,int,int,int,int,int,int)
)	O
{	O
case	O
mu_itrctl_tell	int
:	O
if	O
(	O
itr	*(struct)
->	O
cur	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
==	O
NULL	O
)	O
return	O
MU_ERR_NOENT	O
;	O
else	O
{	O
size_t	long
count	long
;	O
for	O
(	O
count	long
=	O
0	int
,	O
ptr	*(*(void))
=	O
list	*(struct)
->	O
head	struct(*(void),*(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`)))),*(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`)))))
.	O
next	*((*(void))->(int))
;	O
ptr	*(*(void))
!=	O
&	O
list	*(struct)
->	O
head	struct(*(void),*(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`)))),*(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`)))))
;	O
ptr	*(*(void))
=	O
ptr	*(*(void))
->	O
next	*((*(void))->(int))
,	O
count	long
++	O
)	O
{	O
if	O
(	O
ptr	*(*(void))
==	O
itr	*(struct)
->	O
cur	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
)	O
{	O
*	O
(	O
size_t	long
*	O
)	O
arg	*(void)
=	O
count	long
;	O
return	O
0	int
;	O
}	O
}	O
return	O
MU_ERR_NOENT	O
;	O
}	O
break	O
;	O
case	O
mu_itrctl_delete	int
:	O
case	O
mu_itrctl_delete_nd	int
:	O
if	O
(	O
itr	*(struct)
->	O
cur	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
==	O
NULL	O
)	O
return	O
MU_ERR_NOENT	O
;	O
else	O
{	O
struct	O
list_data	struct(*(void),*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`))))),*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`))))))
*	O
prev	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
;	O
ptr	*(*(void))
=	O
itr	*(struct)
->	O
cur	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
;	O
prev	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
=	O
ptr	*(*(void))
->	O
prev	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
;	O
mu_iterator_delitem	(*(struct),*(void))->(void)
(	O
list	*(struct)
->	O
itr	*(struct)
,	O
ptr	*(*(void))
)	O
;	O
prev	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
->	O
next	*((*(void))->(int))
=	O
ptr	*(*(void))
->	O
next	*((*(void))->(int))
;	O
ptr	*(*(void))
->	O
next	*((*(void))->(int))
->	O
prev	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
=	O
prev	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
;	O
if	O
(	O
req	enum(int,int,int,int,int,int,int,int,int,int)
==	O
mu_itrctl_delete	int
)	O
DESTROY_ITEM	O
(	O
list	*(struct)
,	O
ptr	*(*(void))
)	O
;	O
free	(*(void))->(void)
(	O
ptr	*(*(void))
)	O
;	O
list	*(struct)
->	O
count	long
--	O
;	O
}	O
break	O
;	O
case	O
mu_itrctl_replace	int
:	O
case	O
mu_itrctl_replace_nd	int
:	O
if	O
(	O
itr	*(struct)
->	O
cur	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
==	O
NULL	O
)	O
return	O
MU_ERR_NOENT	O
;	O
if	O
(	O
!	O
arg	*(void)
)	O
return	O
EINVAL	int
;	O
ptr	*(*(void))
=	O
itr	*(struct)
->	O
cur	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
;	O
if	O
(	O
req	enum(int,int,int,int,int,int,int,int,int,int)
==	O
mu_itrctl_replace	int
)	O
DESTROY_ITEM	O
(	O
list	*(struct)
,	O
ptr	*(*(void))
)	O
;	O
ptr	*(*(void))
=	O
itr	*(struct)
->	O
cur	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
;	O
ptr	*(*(void))
->	O
item	*(void)
=	O
arg	*(void)
;	O
break	O
;	O
case	O
mu_itrctl_insert	int
:	O
if	O
(	O
itr	*(struct)
->	O
cur	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
==	O
NULL	O
)	O
return	O
MU_ERR_NOENT	O
;	O
if	O
(	O
!	O
arg	*(void)
)	O
return	O
EINVAL	int
;	O
return	O
_mu_list_insert_item	(*(struct(struct(*(void),*(struct`),*(struct`)),long,*(struct(*`,*`,int,int)),*((*`,*`)->(int)),*((*`)->(void)),*(struct))),*(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`)))),*(void),int)->(int)
(	O
list	*(struct)
,	O
itr	*(struct)
->	O
cur	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
,	O
arg	*(void)
,	O
0	int
)	O
;	O
case	O
mu_itrctl_insert_list	int
:	O
if	O
(	O
itr	*(struct)
->	O
cur	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
==	O
NULL	O
)	O
return	O
MU_ERR_NOENT	O
;	O
if	O
(	O
!	O
arg	*(void)
)	O
return	O
EINVAL	int
;	O
else	O
{	O
mu_list_t	*(struct)
new_list	*(struct(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`))),long,*(struct(*(void),*(void),int,int)),*((*(void),*(void))->(int)),*((*(void))->(void)),*(struct(*(struct`),*(void),int,*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),*`)->(int)),*((*`)->(*`))))))
=	O
arg	*(void)
;	O
_mu_list_insert_sublist	(*(struct(struct(*(void),*(struct`),*(struct`)),long,*(struct(*`,*`,int,int)),*((*`,*`)->(int)),*((*`)->(void)),*(struct))),*(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`)))),*(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`)))),*(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`)))),long,int)->(void)
(	O
list	*(struct)
,	O
itr	*(struct)
->	O
cur	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
,	O
new_list	*(struct(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`))),long,*(struct(*(void),*(void),int,int)),*((*(void),*(void))->(int)),*((*(void))->(void)),*(struct(*(struct`),*(void),int,*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),*`)->(int)),*((*`)->(*`))))))
->	O
head	struct(*(void),*(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`)))),*(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`)))))
.	O
next	*((*(void))->(int))
,	O
new_list	*(struct(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`))),long,*(struct(*(void),*(void),int,int)),*((*(void),*(void))->(int)),*((*(void))->(void)),*(struct(*(struct`),*(void),int,*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),*`)->(int)),*((*`)->(*`))))))
->	O
head	struct(*(void),*(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`)))),*(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`)))))
.	O
prev	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
,	O
new_list	*(struct(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`))),long,*(struct(*(void),*(void),int,int)),*((*(void),*(void))->(int)),*((*(void))->(void)),*(struct(*(struct`),*(void),int,*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),*`)->(int)),*((*`)->(*`))))))
->	O
count	long
,	O
0	int
)	O
;	O
_mu_list_clear	(*(struct(struct(*(void),*(struct`),*(struct`)),long,*(struct(*`,*`,int,int)),*((*`,*`)->(int)),*((*`)->(void)),*(struct))))->(void)
(	O
new_list	*(struct(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`))),long,*(struct(*(void),*(void),int,int)),*((*(void),*(void))->(int)),*((*(void))->(void)),*(struct(*(struct`),*(void),int,*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),*`)->(int)),*((*`)->(*`))))))
)	O
;	O
}	O
break	O
;	O
case	O
mu_itrctl_qry_direction	int
:	O
if	O
(	O
!	O
arg	*(void)
)	O
return	O
EINVAL	int
;	O
else	O
*	O
(	O
int	O
*	O
)	O
arg	*(void)
=	O
itr	*(struct)
->	O
backwards	int
;	O
break	O
;	O
case	O
mu_itrctl_set_direction	int
:	O
if	O
(	O
!	O
arg	*(void)
)	O
return	O
EINVAL	int
;	O
else	O
itr	*(struct)
->	O
backwards	int
=	O
!	O
!	O
*	O
(	O
int	O
*	O
)	O
arg	*(void)
;	O
break	O
;	O
case	O
mu_itrctl_count	int
:	O
if	O
(	O
!	O
arg	*(void)
)	O
return	O
EINVAL	int
;	O
return	O
mu_list_count	(*(struct),*(long))->(int)
(	O
itr	*(struct)
->	O
list	*(struct)
,	O
arg	*(void)
)	O
;	O
default	O
:	O
return	O
ENOSYS	int
;	O
}	O
return	O
0	int
;	O
}	O
int	O
mu_list_get_iterator	(*(struct),*(*(struct)))->(int)
(	O
mu_list_t	*(struct)
list	*(struct)
,	O
mu_iterator_t	*(struct)
*	O
piterator	*(*(struct))
)	O
{	O
mu_iterator_t	*(struct)
iterator	*(struct)
;	O
int	O
status	int
;	O
struct	O
list_iterator	struct(*(struct(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`))),long,*(struct(*(void),*(void),int,int)),*((*(void),*(void))->(int)),*((*(void))->(void)),*(struct(*(struct`),*(void),int,*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),*`)->(int)),*((*`)->(*`)))))),*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`))))),int)
*	O
itr	*(struct)
;	O
if	O
(	O
!	O
list	*(struct)
)	O
return	O
EINVAL	int
;	O
itr	*(struct)
=	O
calloc	(long,long)->(*(void))
(	O
1	int
,	O
sizeof	O
*	O
itr	*(struct)
)	O
;	O
if	O
(	O
!	O
itr	*(struct)
)	O
return	O
ENOMEM	int
;	O
itr	*(struct)
->	O
list	*(struct)
=	O
list	*(struct)
;	O
itr	*(struct)
->	O
cur	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
=	O
NULL	O
;	O
status	int
=	O
mu_iterator_create	(*(*(struct)),*(void))->(int)
(	O
&	O
iterator	*(struct)
,	O
itr	*(struct)
)	O
;	O
if	O
(	O
status	int
)	O
{	O
free	(*(void))->(void)
(	O
itr	*(struct)
)	O
;	O
return	O
status	int
;	O
}	O
mu_iterator_set_first	(*(struct),*((*(void))->(int)))->(int)
(	O
iterator	*(struct)
,	O
first	*((*(void))->(int))
)	O
;	O
mu_iterator_set_next	(*(struct),*((*(void))->(int)))->(int)
(	O
iterator	*(struct)
,	O
next	*((*(void))->(int))
)	O
;	O
mu_iterator_set_getitem	(*(struct),*((*(void),*(*(void)),*(*(void)))->(int)))->(int)
(	O
iterator	*(struct)
,	O
getitem	*((*(void),*(*(void)),*(*(void)))->(int))
)	O
;	O
mu_iterator_set_finished_p	(*(struct),*((*(void))->(int)))->(int)
(	O
iterator	*(struct)
,	O
finished_p	*((*(void))->(int))
)	O
;	O
mu_iterator_set_delitem	(*(struct),*((*(void),*(void))->(int)))->(int)
(	O
iterator	*(struct)
,	O
delitem	*((*(void),*(void))->(int))
)	O
;	O
mu_iterator_set_destroy	(*(struct),*((*(struct),*(void))->(int)))->(int)
(	O
iterator	*(struct)
,	O
destroy	*((*(struct),*(void))->(int))
)	O
;	O
mu_iterator_set_dup	(*(struct),*((*(*(void)),*(void))->(int)))->(int)
(	O
iterator	*(struct)
,	O
list_data_dup	(*(*(void)),*(void))->(int)
)	O
;	O
mu_iterator_set_itrctl	(*(struct),*((*(void),enum(int,int,int,int,int,int,int,int,int,int),*(void))->(int)))->(int)
(	O
iterator	*(struct)
,	O
list_itrctl	(*(void),enum(int,int,int,int,int,int,int,int,int,int),*(void))->(int)
)	O
;	O
mu_iterator_attach	(*(*(struct)),*(struct))->(int)
(	O
&	O
list	*(struct)
->	O
itr	*(struct)
,	O
iterator	*(struct)
)	O
;	O
*	O
piterator	*(*(struct))
=	O
iterator	*(struct)
;	O
return	O
0	int
;	O
}	O
