static	O
void	O
ran_dirichlet_small	(*(struct(*(struct(*`,long,long,long,*`,*`,*`)),*(void))),long,array(double),array(double))->(void)
(	O
const	O
gsl_rng	struct(*(struct(*(char),long,long,long,*((*`,long)->(void)),*((*`)->(long)),*((*`)->(double)))),*(void))
*	O
r	*(struct(*(struct(*(char),long,long,long,*((*`,long)->(void)),*((*`)->(long)),*((*`)->(double)))),*(void)))
,	O
const	O
size_t	long
K	int
,	O
const	O
double	O
alpha	long double
[	O
]	O
,	O
double	O
theta	array(double)
[	O
]	O
)	O
;	O
void	O
gsl_ran_dirichlet	(*(struct(*(struct(*`,long,long,long,*`,*`,*`)),*(void))),long,array(double),array(double))->(void)
(	O
const	O
gsl_rng	struct(*(struct(*(char),long,long,long,*((*`,long)->(void)),*((*`)->(long)),*((*`)->(double)))),*(void))
*	O
r	*(struct(*(struct(*(char),long,long,long,*((*`,long)->(void)),*((*`)->(long)),*((*`)->(double)))),*(void)))
,	O
const	O
size_t	long
K	int
,	O
const	O
double	O
alpha	long double
[	O
]	O
,	O
double	O
theta	array(double)
[	O
]	O
)	O
{	O
size_t	long
i	long
;	O
double	O
norm	double
=	O
0.0	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
K	int
;	O
i	long
++	O
)	O
{	O
theta	array(double)
[	O
i	long
]	O
=	O
gsl_ran_gamma	(*(struct(*(struct(*`,long,long,long,*`,*`,*`)),*(void))),double,double)->(double)
(	O
r	*(struct(*(struct(*(char),long,long,long,*((*`,long)->(void)),*((*`)->(long)),*((*`)->(double)))),*(void)))
,	O
alpha	long double
[	O
i	long
]	O
,	O
1.0	int
)	O
;	O
}	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
K	int
;	O
i	long
++	O
)	O
{	O
norm	double
+=	O
theta	array(double)
[	O
i	long
]	O
;	O
}	O
if	O
(	O
norm	double
<	O
GSL_SQRT_DBL_MIN	int
)	O
{	O
ran_dirichlet_small	(*(struct(*(struct(*`,long,long,long,*`,*`,*`)),*(void))),long,array(double),array(double))->(void)
(	O
r	*(struct(*(struct(*(char),long,long,long,*((*`,long)->(void)),*((*`)->(long)),*((*`)->(double)))),*(void)))
,	O
K	int
,	O
alpha	long double
,	O
theta	array(double)
)	O
;	O
return	O
;	O
}	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
K	int
;	O
i	long
++	O
)	O
{	O
theta	array(double)
[	O
i	long
]	O
/=	O
norm	double
;	O
}	O
}	O
static	O
void	O
ran_dirichlet_small	(*(struct(*(struct(*`,long,long,long,*`,*`,*`)),*(void))),long,array(double),array(double))->(void)
(	O
const	O
gsl_rng	struct(*(struct(*(char),long,long,long,*((*`,long)->(void)),*((*`)->(long)),*((*`)->(double)))),*(void))
*	O
r	*(struct(*(struct(*(char),long,long,long,*((*`,long)->(void)),*((*`)->(long)),*((*`)->(double)))),*(void)))
,	O
const	O
size_t	long
K	int
,	O
const	O
double	O
alpha	long double
[	O
]	O
,	O
double	O
theta	array(double)
[	O
]	O
)	O
{	O
size_t	long
i	long
;	O
double	O
norm	double
=	O
0.0	int
,	O
umax	double
=	O
0	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
K	int
;	O
i	long
++	O
)	O
{	O
double	O
u	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
=	O
log	(double)->(double)
(	O
gsl_rng_uniform_pos	(*(struct(*(struct(*`,long,long,long,*`,*`,*`)),*(void))))->(double)
(	O
r	*(struct(*(struct(*(char),long,long,long,*((*`,long)->(void)),*((*`)->(long)),*((*`)->(double)))),*(void)))
)	O
)	O
/	O
alpha	long double
[	O
i	long
]	O
;	O
theta	array(double)
[	O
i	long
]	O
=	O
u	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
;	O
if	O
(	O
u	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
>	O
umax	double
||	O
i	long
==	O
0	int
)	O
{	O
umax	double
=	O
u	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
;	O
}	O
}	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
K	int
;	O
i	long
++	O
)	O
{	O
theta	array(double)
[	O
i	long
]	O
=	O
exp	(double)->(double)
(	O
theta	array(double)
[	O
i	long
]	O
-	O
umax	double
)	O
;	O
}	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
K	int
;	O
i	long
++	O
)	O
{	O
theta	array(double)
[	O
i	long
]	O
=	O
theta	array(double)
[	O
i	long
]	O
*	O
gsl_ran_gamma	(*(struct(*(struct(*`,long,long,long,*`,*`,*`)),*(void))),double,double)->(double)
(	O
r	*(struct(*(struct(*(char),long,long,long,*((*`,long)->(void)),*((*`)->(long)),*((*`)->(double)))),*(void)))
,	O
alpha	long double
[	O
i	long
]	O
+	O
1.0	int
,	O
1.0	int
)	O
;	O
}	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
K	int
;	O
i	long
++	O
)	O
{	O
norm	double
+=	O
theta	array(double)
[	O
i	long
]	O
;	O
}	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
K	int
;	O
i	long
++	O
)	O
{	O
theta	array(double)
[	O
i	long
]	O
/=	O
norm	double
;	O
}	O
}	O
double	O
gsl_ran_dirichlet_pdf	(long,array(double),array(double))->(double)
(	O
const	O
size_t	long
K	int
,	O
const	O
double	O
alpha	long double
[	O
]	O
,	O
const	O
double	O
theta	array(double)
[	O
]	O
)	O
{	O
return	O
exp	(double)->(double)
(	O
gsl_ran_dirichlet_lnpdf	(long,array(double),array(double))->(double)
(	O
K	int
,	O
alpha	long double
,	O
theta	array(double)
)	O
)	O
;	O
}	O
double	O
gsl_ran_dirichlet_lnpdf	(long,array(double),array(double))->(double)
(	O
const	O
size_t	long
K	int
,	O
const	O
double	O
alpha	long double
[	O
]	O
,	O
const	O
double	O
theta	array(double)
[	O
]	O
)	O
{	O
size_t	long
i	long
;	O
double	O
log_p	double
=	O
0.0	int
;	O
double	O
sum_alpha	double
=	O
0.0	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
K	int
;	O
i	long
++	O
)	O
{	O
log_p	double
+=	O
(	O
alpha	long double
[	O
i	long
]	O
-	O
1.0	int
)	O
*	O
log	(double)->(double)
(	O
theta	array(double)
[	O
i	long
]	O
)	O
;	O
}	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
K	int
;	O
i	long
++	O
)	O
{	O
sum_alpha	double
+=	O
alpha	long double
[	O
i	long
]	O
;	O
}	O
log_p	double
+=	O
gsl_sf_lngamma	(double)->(double)
(	O
sum_alpha	double
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
K	int
;	O
i	long
++	O
)	O
{	O
log_p	double
-=	O
gsl_sf_lngamma	(double)->(double)
(	O
alpha	long double
[	O
i	long
]	O
)	O
;	O
}	O
return	O
log_p	double
;	O
}	O
