static	O
int	O
excmp	(*(void),*(void))->(int)
(	O
const	O
void	O
*	O
a	*(void)
,	O
const	O
void	O
*	O
b	*(void)
)	O
{	O
return	O
strcmp	(*(char),*(char))->(int)
(	O
*	O
(	O
const	O
char	O
*	O
*	O
)	O
a	*(void)
,	O
*	O
(	O
const	O
char	O
*	O
*	O
)	O
b	*(void)
)	O
;	O
}	O
static	O
char	O
*	O
*	O
make_exclusion_list	(*(*(char)),*(long),*(long))->(*(*(char)))
(	O
char	O
*	O
*	O
names	*(*(char))
,	O
size_t	long
*	O
pcount	*(long)
,	O
size_t	long
*	O
pmax	*(long)
)	O
{	O
size_t	long
i	long
,	O
j	long
;	O
size_t	long
count	long
=	O
0	int
;	O
size_t	long
max_len	long
=	O
0	int
;	O
char	O
*	O
*	O
exlist	*(*(char))
;	O
char	O
*	O
p	*(char)
;	O
for	O
(	O
i	long
=	O
0	int
;	O
names	*(*(char))
[	O
i	long
]	O
;	O
i	long
++	O
)	O
{	O
size_t	long
len	long
=	O
strlen	(*(char))->(long)
(	O
names	*(*(char))
[	O
i	long
]	O
)	O
+	O
1	int
;	O
if	O
(	O
len	long
>	O
max_len	long
)	O
max_len	long
=	O
len	long
;	O
}	O
count	long
=	O
i	long
;	O
exlist	*(*(char))
=	O
calloc	(long,long)->(*(void))
(	O
count	long
,	O
sizeof	O
(	O
exlist	*(*(char))
[	O
0	int
]	O
)	O
+	O
max_len	long
+	O
1	int
)	O
;	O
if	O
(	O
!	O
exlist	*(*(char))
)	O
return	O
NULL	O
;	O
p	*(char)
=	O
(	O
char	O
*	O
)	O
(	O
exlist	*(*(char))
+	O
count	long
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
names	*(*(char))
[	O
i	long
]	O
;	O
i	long
++	O
,	O
p	*(char)
+=	O
max_len	long
+	O
1	int
)	O
{	O
exlist	*(*(char))
[	O
i	long
]	O
=	O
p	*(char)
;	O
for	O
(	O
j	long
=	O
0	int
;	O
names	*(*(char))
[	O
i	long
]	O
[	O
j	long
]	O
;	O
j	long
++	O
)	O
p	*(char)
[	O
j	long
]	O
=	O
mu_tolower	O
(	O
names	*(*(char))
[	O
i	long
]	O
[	O
j	long
]	O
)	O
;	O
p	*(char)
[	O
j	long
++	O
]	O
=	O
':'	O
;	O
memset	(*(void),int,long)->(*(void))
(	O
p	*(char)
+	O
j	long
,	O
0	int
,	O
max_len	long
-	O
j	long
+	O
1	int
)	O
;	O
}	O
qsort	(*(void),long,long,*((*(void),*(void))->(int)))->(void)
(	O
exlist	*(*(char))
,	O
count	long
,	O
sizeof	O
(	O
exlist	*(*(char))
[	O
0	int
]	O
)	O
,	O
excmp	(*(void),*(void))->(int)
)	O
;	O
*	O
pcount	*(long)
=	O
count	long
;	O
*	O
pmax	*(long)
=	O
max_len	long
;	O
return	O
exlist	*(*(char))
;	O
}	O
int	O
mu_stream_header_copy	(*(struct),*(struct),*(*(char)))->(int)
(	O
mu_stream_t	*(struct)
dst	*(struct)
,	O
mu_stream_t	*(struct)
src	*(struct)
,	O
char	O
*	O
*	O
exclude_names	*(*(char))
)	O
{	O
int	O
rc	int
;	O
size_t	long
la_max	long
;	O
char	O
*	O
lookahead	*(char)
;	O
size_t	long
la_idx	long
=	O
0	int
;	O
enum	O
{	O
save_state_init	int
,	O
save_state_expect	int
,	O
save_state_skip	int
,	O
save_state_copy	int
,	O
save_state_stop	int
}	O
state	*(int)
=	O
save_state_init	int
;	O
int	O
i	long
=	O
0	int
;	O
int	O
j	long
=	O
0	int
;	O
char	O
*	O
*	O
exclude	*(*(char))
;	O
size_t	long
excount	long
;	O
exclude	*(*(char))
=	O
make_exclusion_list	(*(*(char)),*(long),*(long))->(*(*(char)))
(	O
exclude_names	*(*(char))
,	O
&	O
excount	long
,	O
&	O
la_max	long
)	O
;	O
if	O
(	O
!	O
exclude	*(*(char))
)	O
return	O
ENOMEM	int
;	O
lookahead	*(char)
=	O
malloc	(long)->(*(void))
(	O
la_max	long
)	O
;	O
if	O
(	O
!	O
lookahead	*(char)
)	O
{	O
free	(*(void))->(void)
(	O
exclude	*(*(char))
)	O
;	O
return	O
ENOMEM	int
;	O
}	O
while	O
(	O
state	*(int)
!=	O
save_state_stop	int
)	O
{	O
char	O
c	char
;	O
size_t	long
n	long
;	O
rc	int
=	O
mu_stream_read	(*(struct),*(void),long,*(long))->(int)
(	O
src	*(struct)
,	O
&	O
c	char
,	O
1	int
,	O
&	O
n	long
)	O
;	O
if	O
(	O
rc	int
||	O
n	long
==	O
0	int
)	O
break	O
;	O
if	O
(	O
state	*(int)
==	O
save_state_init	int
||	O
state	*(int)
==	O
save_state_expect	int
)	O
{	O
if	O
(	O
la_idx	long
==	O
la_max	long
)	O
state	*(int)
=	O
save_state_copy	int
;	O
else	O
{	O
lookahead	*(char)
[	O
la_idx	long
++	O
]	O
=	O
c	char
;	O
c	char
=	O
mu_tolower	O
(	O
c	char
)	O
;	O
}	O
}	O
switch	O
(	O
state	*(int)
)	O
{	O
case	O
save_state_init	int
:	O
if	O
(	O
c	char
==	O
'\n'	O
)	O
{	O
state	*(int)
=	O
save_state_stop	int
;	O
break	O
;	O
}	O
j	long
=	O
0	int
;	O
state	*(int)
=	O
save_state_copy	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
excount	long
;	O
i	long
++	O
)	O
{	O
if	O
(	O
exclude	*(*(char))
[	O
i	long
]	O
[	O
j	long
]	O
==	O
c	char
)	O
{	O
j	long
++	O
;	O
state	*(int)
=	O
save_state_expect	int
;	O
break	O
;	O
}	O
}	O
break	O
;	O
case	O
save_state_expect	int
:	O
if	O
(	O
exclude	*(*(char))
[	O
i	long
]	O
[	O
j	long
]	O
!=	O
c	char
)	O
{	O
while	O
(	O
++	O
i	long
<	O
excount	long
)	O
{	O
if	O
(	O
memcmp	(*(void),*(void),long)->(int)
(	O
exclude	*(*(char))
[	O
i	long
-	O
1	int
]	O
,	O
exclude	*(*(char))
[	O
i	long
]	O
,	O
j	long
)	O
)	O
{	O
state	*(int)
=	O
save_state_copy	int
;	O
break	O
;	O
}	O
if	O
(	O
exclude	*(*(char))
[	O
i	long
]	O
[	O
j	long
]	O
==	O
c	char
)	O
break	O
;	O
}	O
if	O
(	O
i	long
==	O
excount	long
)	O
state	*(int)
=	O
save_state_copy	int
;	O
if	O
(	O
state	*(int)
==	O
save_state_copy	int
)	O
break	O
;	O
}	O
if	O
(	O
c	char
==	O
':'	O
)	O
{	O
la_idx	long
=	O
0	int
;	O
state	*(int)
=	O
save_state_skip	int
;	O
}	O
else	O
{	O
j	long
++	O
;	O
if	O
(	O
exclude	*(*(char))
[	O
i	long
]	O
[	O
j	long
]	O
==	O
0	int
)	O
state	*(int)
=	O
save_state_copy	int
;	O
}	O
break	O
;	O
case	O
save_state_copy	int
:	O
if	O
(	O
la_idx	long
>	O
0	int
)	O
{	O
rc	int
=	O
mu_stream_write	(*(struct),*(void),long,*(long))->(int)
(	O
dst	*(struct)
,	O
lookahead	*(char)
,	O
la_idx	long
,	O
NULL	O
)	O
;	O
if	O
(	O
rc	int
)	O
break	O
;	O
la_idx	long
=	O
0	int
;	O
}	O
rc	int
=	O
mu_stream_write	(*(struct),*(void),long,*(long))->(int)
(	O
dst	*(struct)
,	O
&	O
c	char
,	O
1	int
,	O
NULL	O
)	O
;	O
if	O
(	O
c	char
==	O
'\n'	O
)	O
state	*(int)
=	O
save_state_init	int
;	O
break	O
;	O
case	O
save_state_skip	int
:	O
if	O
(	O
c	char
==	O
'\n'	O
)	O
state	*(int)
=	O
save_state_init	int
;	O
break	O
;	O
default	O
:	O
abort	()->(void)
(	O
)	O
;	O
}	O
}	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
if	O
(	O
la_idx	long
>	O
1	int
)	O
rc	int
=	O
mu_stream_write	(*(struct),*(void),long,*(long))->(int)
(	O
dst	*(struct)
,	O
lookahead	*(char)
,	O
la_idx	long
-	O
1	int
,	O
NULL	O
)	O
;	O
}	O
free	(*(void))->(void)
(	O
lookahead	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
exclude	*(*(char))
)	O
;	O
return	O
rc	int
;	O
}	O
