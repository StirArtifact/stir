struct	O
port_bucket	O
*	O
cons_port_bucket	*(struct)
;	O
struct	O
port_class	O
*	O
cons_port_class	*(struct)
;	O
error_t	int
cons_init	()->(int)
(	O
void	O
)	O
{	O
error_t	int
err	int
;	O
cons_t	O
cons	O
;	O
cons_notify_t	O
dir_notify_port	O
;	O
mach_port_t	O
dir_notify	O
;	O
cons_port_bucket	*(struct)
=	O
ports_create_bucket	()->(int)
(	O
)	O
;	O
if	O
(	O
!	O
cons_port_bucket	*(struct)
)	O
return	O
errno	O
;	O
cons_port_class	*(struct)
=	O
ports_create_class	()->(int)
(	O
cons_vcons_destroy	O
,	O
NULL	O
)	O
;	O
if	O
(	O
!	O
cons_port_class	*(struct)
)	O
return	O
errno	O
;	O
cons	O
=	O
malloc	(long)->(*(void))
(	O
sizeof	O
(	O
*	O
cons	O
)	O
)	O
;	O
if	O
(	O
!	O
cons	O
)	O
return	O
errno	O
;	O
pthread_mutex_init	(*(union(struct(int,int,int,int,int,short,short,struct(*`,*`)),array(char),long)),*(union(array(char),int)))->(int)
(	O
&	O
cons	O
->	O
lock	O
,	O
NULL	O
)	O
;	O
cons	O
->	O
vcons_list	O
=	O
NULL	O
;	O
cons	O
->	O
vcons_last	O
=	O
NULL	O
;	O
cons	O
->	O
dir	O
=	O
opendir	()->(int)
(	O
cons_file	O
)	O
;	O
cons	O
->	O
slack	O
=	O
_cons_slack	O
;	O
if	O
(	O
!	O
cons	O
->	O
dir	O
)	O
{	O
free	(*(void))->(void)
(	O
cons	O
)	O
;	O
return	O
errno	O
;	O
}	O
cons	O
->	O
dirport	O
=	O
getdport	()->(int)
(	O
dirfd	()->(int)
(	O
cons	O
->	O
dir	O
)	O
)	O
;	O
if	O
(	O
cons	O
->	O
dirport	O
==	O
MACH_PORT_NULL	O
)	O
{	O
closedir	()->(int)
(	O
cons	O
->	O
dir	O
)	O
;	O
free	(*(void))->(void)
(	O
cons	O
)	O
;	O
return	O
errno	O
;	O
}	O
err	int
=	O
ports_create_port	()->(int)
(	O
cons_port_class	*(struct)
,	O
cons_port_bucket	*(struct)
,	O
sizeof	O
(	O
*	O
dir_notify_port	O
)	O
,	O
&	O
dir_notify_port	O
)	O
;	O
if	O
(	O
err	int
)	O
{	O
mach_port_deallocate	()->(int)
(	O
mach_task_self	()->(int)
(	O
)	O
,	O
cons	O
->	O
dirport	O
)	O
;	O
closedir	()->(int)
(	O
cons	O
->	O
dir	O
)	O
;	O
free	(*(void))->(void)
(	O
cons	O
)	O
;	O
return	O
err	int
;	O
}	O
dir_notify_port	O
->	O
cons	O
=	O
cons	O
;	O
dir_notify	O
=	O
ports_get_right	()->(int)
(	O
dir_notify_port	O
)	O
;	O
err	int
=	O
dir_notice_changes	()->(int)
(	O
cons	O
->	O
dirport	O
,	O
dir_notify	O
,	O
MACH_MSG_TYPE_MAKE_SEND	O
)	O
;	O
if	O
(	O
err	int
)	O
{	O
mach_port_deallocate	()->(int)
(	O
mach_task_self	()->(int)
(	O
)	O
,	O
cons	O
->	O
dirport	O
)	O
;	O
closedir	()->(int)
(	O
cons	O
->	O
dir	O
)	O
;	O
free	(*(void))->(void)
(	O
cons	O
)	O
;	O
return	O
err	int
;	O
}	O
return	O
0	int
;	O
}	O
