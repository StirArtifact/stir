int	O
jump_out_helper	(*(struct(*(struct(short,char)),int,int,*(char),int,int,int,int,int,int,int,int,array(int),array(int),int,float,*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int),union`)),int,*((*`,int,int,int)->(int)),*((int,int,int,int)->(int)),int,float)),int,int,int)->(int)
(	O
ARGS	O
)	O
{	O
int	O
own_eyespace	int
;	O
UNUSED	O
(	O
trans	int
)	O
;	O
UNUSED	O
(	O
pattern	*(struct)
)	O
;	O
own_eyespace	int
=	O
(	O
white_eye	array(struct(int,int,int,int,struct(char,char,char,char),char,char,char))
[	O
move	*(int)
]	O
.	O
color	int
==	O
color	int
)	O
;	O
if	O
(	O
whose_area	(*(struct),int)->(int)
(	O
OPPOSITE_INFLUENCE	O
(	O
color	int
)	O
,	O
move	*(int)
)	O
!=	O
color	int
&&	O
!	O
own_eyespace	int
)	O
return	O
1	int
;	O
else	O
return	O
0	int
;	O
}	O
int	O
jump_out_far_helper	(*(struct(*(struct(short,char)),int,int,*(char),int,int,int,int,int,int,int,int,array(int),array(int),int,float,*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int),union`)),int,*((*`,int,int,int)->(int)),*((int,int,int,int)->(int)),int,float)),int,int,int)->(int)
(	O
ARGS	O
)	O
{	O
if	O
(	O
whose_area	(*(struct),int)->(int)
(	O
OPPOSITE_INFLUENCE	O
(	O
color	int
)	O
,	O
move	*(int)
)	O
!=	O
OTHER_COLOR	O
(	O
color	int
)	O
)	O
return	O
jump_out_helper	(*(struct(*(struct(short,char)),int,int,*(char),int,int,int,int,int,int,int,int,array(int),array(int),int,float,*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int),union`)),int,*((*`,int,int,int)->(int)),*((int,int,int,int)->(int)),int,float)),int,int,int)->(int)
(	O
pattern	*(struct)
,	O
trans	int
,	O
move	*(int)
,	O
color	int
)	O
;	O
else	O
return	O
0	int
;	O
}	O
int	O
high_handicap_helper	(*(struct(*(struct(short,char)),int,int,*(char),int,int,int,int,int,int,int,int,array(int),array(int),int,float,*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int),union`)),int,*((*`,int,int,int)->(int)),*((int,int,int,int)->(int)),int,float)),int,int,int)->(int)
(	O
ARGS	O
)	O
{	O
UNUSED	O
(	O
trans	int
)	O
;	O
UNUSED	O
(	O
pattern	*(struct)
)	O
;	O
UNUSED	O
(	O
move	*(int)
)	O
;	O
return	O
!	O
doing_scoring	int
&&	O
stones_on_board	(int)->(int)
(	O
OTHER_COLOR	O
(	O
color	int
)	O
)	O
==	O
0	int
;	O
}	O
int	O
reinforce_helper	(*(struct(*(struct(short,char)),int,int,*(char),int,int,int,int,int,int,int,int,array(int),array(int),int,float,*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int),union`)),int,*((*`,int,int,int)->(int)),*((int,int,int,int)->(int)),int,float)),int,int,int)->(int)
(	O
ARGS	O
)	O
{	O
UNUSED	O
(	O
trans	int
)	O
;	O
UNUSED	O
(	O
pattern	*(struct)
)	O
;	O
return	O
(	O
!	O
doing_scoring	int
&&	O
!	O
lively_dragon_exists	(int)->(int)
(	O
OTHER_COLOR	O
(	O
color	int
)	O
)	O
&&	O
safe_move	(int,int)->(int)
(	O
move	*(int)
,	O
color	int
)	O
)	O
;	O
}	O
int	O
throw_in_atari_helper	(*(struct(*(struct(short,char)),int,int,*(char),int,int,int,int,int,int,int,int,array(int),array(int),int,float,*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int),union`)),int,*((*`,int,int,int)->(int)),*((int,int,int,int)->(int)),int,float)),int,int,int)->(int)
(	O
ARGS	O
)	O
{	O
int	O
apos	int
,	O
bpos	int
,	O
cpos	int
,	O
dpos	int
;	O
int	O
success	int
=	O
0	int
;	O
int	O
other	int
=	O
OTHER_COLOR	O
(	O
color	int
)	O
;	O
int	O
libs	*(int)
[	O
2	int
]	O
;	O
UNUSED	O
(	O
pattern	*(struct)
)	O
;	O
apos	int
=	O
OFFSET_BY	O
(	O
0	int
,	O
1	int
)	O
;	O
cpos	int
=	O
OFFSET_BY	O
(	O
-	O
1	int
,	O
1	int
)	O
;	O
dpos	int
=	O
OFFSET_BY	O
(	O
1	int
,	O
1	int
)	O
;	O
findlib	(int,int,*(int))->(int)
(	O
apos	int
,	O
2	int
,	O
libs	*(int)
)	O
;	O
if	O
(	O
libs	*(int)
[	O
0	int
]	O
!=	O
move	*(int)
)	O
bpos	int
=	O
libs	*(int)
[	O
0	int
]	O
;	O
else	O
bpos	int
=	O
libs	*(int)
[	O
1	int
]	O
;	O
if	O
(	O
TRYMOVE	O
(	O
move	*(int)
,	O
color	int
)	O
)	O
{	O
if	O
(	O
!	O
attack	(int,*(int))->(int)
(	O
cpos	int
,	O
NULL	O
)	O
&&	O
!	O
(	O
ON_BOARD	O
(	O
dpos	int
)	O
&&	O
attack	(int,*(int))->(int)
(	O
dpos	int
,	O
NULL	O
)	O
)	O
)	O
{	O
if	O
(	O
TRYMOVE	O
(	O
bpos	int
,	O
other	int
)	O
)	O
{	O
if	O
(	O
attack	(int,*(int))->(int)
(	O
apos	int
,	O
NULL	O
)	O
)	O
success	int
=	O
1	int
;	O
popgo	()->(void)
(	O
)	O
;	O
}	O
else	O
{	O
success	int
=	O
1	int
;	O
}	O
}	O
popgo	()->(void)
(	O
)	O
;	O
}	O
add_followup_value	(int,float)->(void)
(	O
move	*(int)
,	O
2	int
*	O
worm	array(struct(int,int,float,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),array(int),array(int),array(int),array(int),array(int),array(int),array(int),array(int)))
[	O
apos	int
]	O
.	O
effective_size	float
)	O
;	O
TRACE	O
(	O
"...followup value %f\n"	*(char)
,	O
2	int
*	O
worm	array(struct(int,int,float,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),array(int),array(int),array(int),array(int),array(int),array(int),array(int),array(int)))
[	O
apos	int
]	O
.	O
effective_size	float
)	O
;	O
return	O
success	int
;	O
}	O
int	O
seki_helper	(int)->(int)
(	O
int	O
str	int
)	O
{	O
int	O
r	int
;	O
int	O
adj	array(int)
;	O
int	O
adjs	array(int)
[	O
MAXCHAIN	int
]	O
;	O
adj	array(int)
=	O
chainlinks	(int,array(int))->(int)
(	O
str	int
,	O
adjs	array(int)
)	O
;	O
for	O
(	O
r	int
=	O
0	int
;	O
r	int
<	O
adj	array(int)
;	O
r	int
++	O
)	O
if	O
(	O
worm	array(struct(int,int,float,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),array(int),array(int),array(int),array(int),array(int),array(int),array(int),array(int)))
[	O
adjs	array(int)
[	O
r	int
]	O
]	O
.	O
attack_codes	array(int)
[	O
0	int
]	O
!=	O
0	int
)	O
return	O
0	int
;	O
return	O
1	int
;	O
}	O
int	O
cutstone2_helper	(*(struct(*(struct(short,char)),int,int,*(char),int,int,int,int,int,int,int,int,array(int),array(int),int,float,*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int),union`)),int,*((*`,int,int,int)->(int)),*((int,int,int,int)->(int)),int,float)),int,int,int)->(int)
(	O
ARGS	O
)	O
{	O
int	O
apos	int
;	O
int	O
bpos	int
;	O
int	O
cpos	int
;	O
int	O
dpos	int
;	O
UNUSED	O
(	O
pattern	*(struct)
)	O
;	O
UNUSED	O
(	O
color	int
)	O
;	O
if	O
(	O
stackp	int
>	O
0	int
)	O
return	O
0	int
;	O
apos	int
=	O
OFFSET_BY	O
(	O
-	O
1	int
,	O
-	O
1	int
)	O
;	O
bpos	int
=	O
OFFSET_BY	O
(	O
-	O
1	int
,	O
0	int
)	O
;	O
cpos	int
=	O
OFFSET_BY	O
(	O
0	int
,	O
-	O
1	int
)	O
;	O
if	O
(	O
worm	array(struct(int,int,float,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),array(int),array(int),array(int),array(int),array(int),array(int),array(int),array(int)))
[	O
apos	int
]	O
.	O
defense_codes	array(int)
[	O
0	int
]	O
==	O
0	int
)	O
return	O
0	int
;	O
dpos	int
=	O
worm	array(struct(int,int,float,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),array(int),array(int),array(int),array(int),array(int),array(int),array(int),array(int)))
[	O
apos	int
]	O
.	O
defense_points	array(int)
[	O
0	int
]	O
;	O
if	O
(	O
TRYMOVE	O
(	O
dpos	int
,	O
board	*(char)
[	O
apos	int
]	O
)	O
)	O
{	O
if	O
(	O
!	O
board	*(char)
[	O
bpos	int
]	O
||	O
attack	(int,*(int))->(int)
(	O
bpos	int
,	O
NULL	O
)	O
||	O
!	O
board	*(char)
[	O
cpos	int
]	O
||	O
attack	(int,*(int))->(int)
(	O
cpos	int
,	O
NULL	O
)	O
||	O
safe_move	(int,int)->(int)
(	O
move	*(int)
,	O
board	*(char)
[	O
apos	int
]	O
)	O
!=	O
0	int
)	O
{	O
popgo	()->(void)
(	O
)	O
;	O
worm	array(struct(int,int,float,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),array(int),array(int),array(int),array(int),array(int),array(int),array(int),array(int)))
[	O
worm	array(struct(int,int,float,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),array(int),array(int),array(int),array(int),array(int),array(int),array(int),array(int)))
[	O
apos	int
]	O
.	O
origin	int
]	O
.	O
cutstone2	int
++	O
;	O
propagate_worm	(int)->(void)
(	O
worm	array(struct(int,int,float,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),array(int),array(int),array(int),array(int),array(int),array(int),array(int),array(int)))
[	O
apos	int
]	O
.	O
origin	int
)	O
;	O
return	O
0	int
;	O
}	O
popgo	()->(void)
(	O
)	O
;	O
}	O
return	O
0	int
;	O
}	O
int	O
edge_double_sente_helper	(int,int,int,int)->(int)
(	O
int	O
move	*(int)
,	O
int	O
apos	int
,	O
int	O
bpos	int
,	O
int	O
cpos	int
)	O
{	O
int	O
color	int
=	O
board	*(char)
[	O
cpos	int
]	O
;	O
int	O
success	int
=	O
0	int
;	O
ASSERT1	O
(	O
(	O
color	int
==	O
BLACK	int
||	O
color	int
==	O
WHITE	int
)	O
,	O
move	*(int)
)	O
;	O
if	O
(	O
TRYMOVE	O
(	O
move	*(int)
,	O
color	int
)	O
)	O
{	O
ASSERT1	O
(	O
countlib	(int)->(int)
(	O
move	*(int)
)	O
==	O
2	int
,	O
move	*(int)
)	O
;	O
success	int
=	O
connect_and_cut_helper	(int,int,int)->(int)
(	O
move	*(int)
,	O
apos	int
,	O
bpos	int
)	O
;	O
popgo	()->(void)
(	O
)	O
;	O
}	O
return	O
success	int
;	O
}	O
void	O
threaten_to_save_helper	(int,int)->(void)
(	O
int	O
move	*(int)
,	O
int	O
str	int
)	O
{	O
add_followup_value	(int,float)->(void)
(	O
move	*(int)
,	O
2.0	int
+	O
2.0	int
*	O
worm	array(struct(int,int,float,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),array(int),array(int),array(int),array(int),array(int),array(int),array(int),array(int)))
[	O
str	int
]	O
.	O
effective_size	float
)	O
;	O
TRACE	O
(	O
"...followup value %f\n"	*(char)
,	O
2.0	int
+	O
2.0	int
*	O
worm	array(struct(int,int,float,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),array(int),array(int),array(int),array(int),array(int),array(int),array(int),array(int)))
[	O
str	int
]	O
.	O
effective_size	float
)	O
;	O
}	O
void	O
prevent_attack_threat_helper	(int,int)->(void)
(	O
int	O
move	*(int)
,	O
int	O
str	int
)	O
{	O
add_reverse_followup_value	(int,float)->(void)
(	O
move	*(int)
,	O
2.0	int
*	O
worm	array(struct(int,int,float,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),array(int),array(int),array(int),array(int),array(int),array(int),array(int),array(int)))
[	O
str	int
]	O
.	O
effective_size	float
)	O
;	O
TRACE	O
(	O
"...reverse followup value %f\n"	*(char)
,	O
2.0	int
*	O
worm	array(struct(int,int,float,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),array(int),array(int),array(int),array(int),array(int),array(int),array(int),array(int)))
[	O
str	int
]	O
.	O
effective_size	float
)	O
;	O
}	O
void	O
defend_against_atari_helper	(int,int)->(void)
(	O
int	O
move	*(int)
,	O
int	O
str	int
)	O
{	O
int	O
adj	array(int)
,	O
adjs	array(int)
[	O
MAXCHAIN	int
]	O
;	O
int	O
libs	*(int)
[	O
2	int
]	O
;	O
int	O
k	int
;	O
ASSERT1	O
(	O
countlib	(int)->(int)
(	O
str	int
)	O
==	O
2	int
,	O
str	int
)	O
;	O
adj	array(int)
=	O
chainlinks2	(int,array(int),int)->(int)
(	O
str	int
,	O
adjs	array(int)
,	O
1	int
)	O
;	O
for	O
(	O
k	int
=	O
0	int
;	O
k	int
<	O
adj	array(int)
;	O
k	int
++	O
)	O
if	O
(	O
worm	array(struct(int,int,float,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),array(int),array(int),array(int),array(int),array(int),array(int),array(int),array(int)))
[	O
adjs	array(int)
[	O
k	int
]	O
]	O
.	O
defense_codes	array(int)
[	O
0	int
]	O
!=	O
0	int
&&	O
!	O
does_defend	(int,int)->(int)
(	O
move	*(int)
,	O
adjs	array(int)
[	O
k	int
]	O
)	O
)	O
return	O
;	O
findlib	(int,int,*(int))->(int)
(	O
str	int
,	O
2	int
,	O
libs	*(int)
)	O
;	O
if	O
(	O
!	O
safe_move	(int,int)->(int)
(	O
libs	*(int)
[	O
0	int
]	O
,	O
OTHER_COLOR	O
(	O
board	*(char)
[	O
str	int
]	O
)	O
)	O
&&	O
!	O
safe_move	(int,int)->(int)
(	O
libs	*(int)
[	O
1	int
]	O
,	O
OTHER_COLOR	O
(	O
board	*(char)
[	O
str	int
]	O
)	O
)	O
)	O
return	O
;	O
TRACE	O
(	O
"...reverse followup value %f\n"	*(char)
,	O
2.0	int
*	O
worm	array(struct(int,int,float,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),array(int),array(int),array(int),array(int),array(int),array(int),array(int),array(int)))
[	O
str	int
]	O
.	O
effective_size	float
)	O
;	O
add_reverse_followup_value	(int,float)->(void)
(	O
move	*(int)
,	O
2.0	int
*	O
worm	array(struct(int,int,float,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),array(int),array(int),array(int),array(int),array(int),array(int),array(int),array(int)))
[	O
str	int
]	O
.	O
effective_size	float
)	O
;	O
}	O
void	O
amalgamate_most_valuable_helper	(int,int,int)->(void)
(	O
int	O
apos	int
,	O
int	O
bpos	int
,	O
int	O
cpos	int
)	O
{	O
if	O
(	O
!	O
is_same_dragon	(int,int)->(int)
(	O
apos	int
,	O
bpos	int
)	O
&&	O
!	O
is_same_dragon	(int,int)->(int)
(	O
bpos	int
,	O
cpos	int
)	O
)	O
{	O
if	O
(	O
dragon	int
[	O
apos	int
]	O
.	O
effective_size	float
>=	O
dragon	int
[	O
cpos	int
]	O
.	O
effective_size	float
)	O
join_dragons	(int,int)->(void)
(	O
apos	int
,	O
bpos	int
)	O
;	O
else	O
join_dragons	(int,int)->(void)
(	O
bpos	int
,	O
cpos	int
)	O
;	O
}	O
}	O
int	O
finish_ko_helper	(int)->(int)
(	O
int	O
pos	int
)	O
{	O
int	O
adj	array(int)
,	O
adjs	array(int)
[	O
MAXCHAIN	int
]	O
;	O
int	O
lib	int
;	O
int	O
k	int
;	O
adj	array(int)
=	O
chainlinks2	(int,array(int),int)->(int)
(	O
pos	int
,	O
adjs	array(int)
,	O
1	int
)	O
;	O
for	O
(	O
k	int
=	O
0	int
;	O
k	int
<	O
adj	array(int)
;	O
k	int
++	O
)	O
{	O
if	O
(	O
countstones	(int)->(int)
(	O
adjs	array(int)
[	O
k	int
]	O
)	O
==	O
1	int
)	O
{	O
findlib	(int,int,*(int))->(int)
(	O
adjs	array(int)
[	O
k	int
]	O
,	O
1	int
,	O
&	O
lib	int
)	O
;	O
if	O
(	O
is_ko	(int,int,*(int))->(int)
(	O
lib	int
,	O
board	*(char)
[	O
pos	int
]	O
,	O
NULL	O
)	O
)	O
return	O
1	int
;	O
}	O
}	O
return	O
0	int
;	O
}	O
int	O
squeeze_ko_helper	(int)->(int)
(	O
int	O
pos	int
)	O
{	O
int	O
libs	*(int)
[	O
2	int
]	O
;	O
int	O
liberties	*(int)
;	O
int	O
k	int
;	O
liberties	*(int)
=	O
findlib	(int,int,*(int))->(int)
(	O
pos	int
,	O
2	int
,	O
libs	*(int)
)	O
;	O
ASSERT1	O
(	O
liberties	*(int)
==	O
2	int
,	O
pos	int
)	O
;	O
for	O
(	O
k	int
=	O
0	int
;	O
k	int
<	O
liberties	*(int)
;	O
k	int
++	O
)	O
{	O
int	O
aa	int
=	O
libs	*(int)
[	O
k	int
]	O
;	O
if	O
(	O
is_ko	(int,int,*(int))->(int)
(	O
aa	int
,	O
OTHER_COLOR	O
(	O
board	*(char)
[	O
pos	int
]	O
)	O
,	O
NULL	O
)	O
)	O
return	O
1	int
;	O
}	O
return	O
0	int
;	O
}	O
int	O
backfill_helper	(int,int,int)->(int)
(	O
int	O
apos	int
,	O
int	O
bpos	int
,	O
int	O
cpos	int
)	O
{	O
int	O
color	int
=	O
board	*(char)
[	O
cpos	int
]	O
;	O
int	O
other	int
=	O
OTHER_COLOR	O
(	O
color	int
)	O
;	O
int	O
dpos	int
=	O
NO_MOVE	O
;	O
if	O
(	O
TRYMOVE	O
(	O
apos	int
,	O
color	int
)	O
)	O
{	O
if	O
(	O
TRYMOVE	O
(	O
bpos	int
,	O
other	int
)	O
)	O
{	O
if	O
(	O
attack	(int,*(int))->(int)
(	O
cpos	int
,	O
NULL	O
)	O
&&	O
find_defense	(int,*(int))->(int)
(	O
cpos	int
,	O
&	O
dpos	int
)	O
)	O
{	O
set_minimum_move_value	(int,float)->(int)
(	O
dpos	int
,	O
0.1	int
)	O
;	O
TRACE	O
(	O
"%o...setting min move value of %1m to 0.1\n"	*(char)
,	O
dpos	int
)	O
;	O
}	O
popgo	()->(void)
(	O
)	O
;	O
}	O
popgo	()->(void)
(	O
)	O
;	O
}	O
return	O
0	int
;	O
}	O
int	O
owl_threatens_attack	(int,int)->(int)
(	O
int	O
apos	int
,	O
int	O
bpos	int
)	O
{	O
if	O
(	O
DRAGON2	O
(	O
bpos	int
)	O
.	O
owl_status	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
==	O
CRITICAL	int
&&	O
DRAGON2	O
(	O
bpos	int
)	O
.	O
owl_attack_point	int
==	O
apos	int
)	O
return	O
1	int
;	O
if	O
(	O
DRAGON2	O
(	O
bpos	int
)	O
.	O
owl_threat_status	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
==	O
CAN_THREATEN_ATTACK	int
)	O
if	O
(	O
DRAGON2	O
(	O
bpos	int
)	O
.	O
owl_attack_point	int
==	O
apos	int
||	O
DRAGON2	O
(	O
bpos	int
)	O
.	O
owl_second_attack_point	int
==	O
apos	int
)	O
return	O
1	int
;	O
return	O
0	int
;	O
}	O
int	O
connect_and_cut_helper	(int,int,int)->(int)
(	O
int	O
Apos	int
,	O
int	O
bpos	int
,	O
int	O
cpos	int
)	O
{	O
int	O
dpos	int
;	O
int	O
epos	int
=	O
NO_MOVE	O
;	O
int	O
other	int
=	O
board	*(char)
[	O
Apos	int
]	O
;	O
int	O
color	int
=	O
OTHER_COLOR	O
(	O
other	int
)	O
;	O
int	O
libs	*(int)
[	O
2	int
]	O
;	O
int	O
liberties	*(int)
=	O
findlib	(int,int,*(int))->(int)
(	O
Apos	int
,	O
2	int
,	O
libs	*(int)
)	O
;	O
int	O
result	int
=	O
0	int
;	O
int	O
k	int
;	O
gg_assert	O
(	O
IS_STONE	O
(	O
color	int
)	O
)	O
;	O
gg_assert	O
(	O
liberties	*(int)
==	O
2	int
)	O
;	O
if	O
(	O
libs	*(int)
[	O
0	int
]	O
==	O
bpos	int
)	O
dpos	int
=	O
libs	*(int)
[	O
1	int
]	O
;	O
else	O
dpos	int
=	O
libs	*(int)
[	O
0	int
]	O
;	O
for	O
(	O
k	int
=	O
0	int
;	O
k	int
<	O
4	int
;	O
k	int
++	O
)	O
if	O
(	O
board	*(char)
[	O
cpos	int
+	O
delta	array(int)
[	O
k	int
]	O
]	O
==	O
color	int
&&	O
neighbor_of_string	(int,int)->(int)
(	O
cpos	int
+	O
delta	array(int)
[	O
k	int
]	O
,	O
Apos	int
)	O
)	O
{	O
epos	int
=	O
cpos	int
+	O
delta	array(int)
[	O
k	int
]	O
;	O
break	O
;	O
}	O
gg_assert	O
(	O
epos	int
!=	O
NO_MOVE	O
)	O
;	O
if	O
(	O
TRYMOVE	O
(	O
bpos	int
,	O
color	int
)	O
)	O
{	O
if	O
(	O
TRYMOVE	O
(	O
dpos	int
,	O
other	int
)	O
)	O
{	O
if	O
(	O
TRYMOVE	O
(	O
cpos	int
,	O
other	int
)	O
)	O
{	O
if	O
(	O
board	*(char)
[	O
bpos	int
]	O
==	O
EMPTY	int
||	O
board	*(char)
[	O
epos	int
]	O
==	O
EMPTY	int
||	O
!	O
defend_both	(int,int)->(int)
(	O
bpos	int
,	O
epos	int
)	O
)	O
result	int
=	O
1	int
;	O
popgo	()->(void)
(	O
)	O
;	O
}	O
popgo	()->(void)
(	O
)	O
;	O
}	O
popgo	()->(void)
(	O
)	O
;	O
}	O
return	O
result	int
;	O
}	O
int	O
connect_and_cut_helper2	(int,int,int,int)->(int)
(	O
int	O
Apos	int
,	O
int	O
bpos	int
,	O
int	O
cpos	int
,	O
int	O
color	int
)	O
{	O
int	O
dpos	int
;	O
int	O
epos	int
=	O
NO_MOVE	O
;	O
int	O
other	int
=	O
OTHER_COLOR	O
(	O
color	int
)	O
;	O
int	O
result	int
=	O
0	int
;	O
int	O
k	int
;	O
gg_assert	O
(	O
IS_STONE	O
(	O
color	int
)	O
)	O
;	O
if	O
(	O
TRYMOVE	O
(	O
Apos	int
,	O
color	int
)	O
)	O
{	O
for	O
(	O
k	int
=	O
0	int
;	O
k	int
<	O
4	int
;	O
k	int
++	O
)	O
if	O
(	O
board	*(char)
[	O
cpos	int
+	O
delta	array(int)
[	O
k	int
]	O
]	O
==	O
other	int
&&	O
neighbor_of_string	(int,int)->(int)
(	O
cpos	int
+	O
delta	array(int)
[	O
k	int
]	O
,	O
Apos	int
)	O
)	O
{	O
epos	int
=	O
cpos	int
+	O
delta	array(int)
[	O
k	int
]	O
;	O
break	O
;	O
}	O
gg_assert	O
(	O
epos	int
!=	O
NO_MOVE	O
)	O
;	O
if	O
(	O
TRYMOVE	O
(	O
bpos	int
,	O
other	int
)	O
)	O
{	O
if	O
(	O
!	O
find_defense	(int,*(int))->(int)
(	O
Apos	int
,	O
&	O
dpos	int
)	O
||	O
dpos	int
==	O
NO_MOVE	O
)	O
{	O
popgo	()->(void)
(	O
)	O
;	O
popgo	()->(void)
(	O
)	O
;	O
return	O
0	int
;	O
}	O
if	O
(	O
TRYMOVE	O
(	O
dpos	int
,	O
color	int
)	O
)	O
{	O
if	O
(	O
TRYMOVE	O
(	O
cpos	int
,	O
color	int
)	O
)	O
{	O
if	O
(	O
board	*(char)
[	O
bpos	int
]	O
==	O
EMPTY	int
||	O
board	*(char)
[	O
epos	int
]	O
==	O
EMPTY	int
||	O
!	O
defend_both	(int,int)->(int)
(	O
bpos	int
,	O
epos	int
)	O
)	O
result	int
=	O
1	int
;	O
popgo	()->(void)
(	O
)	O
;	O
}	O
popgo	()->(void)
(	O
)	O
;	O
}	O
popgo	()->(void)
(	O
)	O
;	O
}	O
popgo	()->(void)
(	O
)	O
;	O
}	O
return	O
result	int
;	O
}	O
void	O
test_attack_either_move	(int,int,int,int)->(void)
(	O
int	O
move	*(int)
,	O
int	O
color	int
,	O
int	O
worma	int
,	O
int	O
wormb	int
)	O
{	O
ASSERT_ON_BOARD1	O
(	O
move	*(int)
)	O
;	O
ASSERT1	O
(	O
board	*(char)
[	O
move	*(int)
]	O
==	O
EMPTY	int
,	O
move	*(int)
)	O
;	O
ASSERT1	O
(	O
board	*(char)
[	O
worma	int
]	O
==	O
OTHER_COLOR	O
(	O
color	int
)	O
&&	O
board	*(char)
[	O
wormb	int
]	O
==	O
OTHER_COLOR	O
(	O
color	int
)	O
,	O
move	*(int)
)	O
;	O
if	O
(	O
!	O
defend_both	(int,int)->(int)
(	O
worma	int
,	O
wormb	int
)	O
)	O
{	O
if	O
(	O
0	int
)	O
gprintf	(*(char))->(int)
(	O
"%1m: Reject attack_either_move for %1m, %1m (can't defend both)\n"	*(char)
,	O
move	*(int)
,	O
worma	int
,	O
wormb	int
)	O
;	O
return	O
;	O
}	O
if	O
(	O
trymove	(int,int,*(char),int)->(int)
(	O
move	*(int)
,	O
color	int
,	O
"test_attack_either_move"	*(char)
,	O
worma	int
)	O
)	O
{	O
if	O
(	O
board	*(char)
[	O
worma	int
]	O
==	O
OTHER_COLOR	O
(	O
color	int
)	O
&&	O
board	*(char)
[	O
wormb	int
]	O
==	O
OTHER_COLOR	O
(	O
color	int
)	O
)	O
{	O
if	O
(	O
!	O
find_defense	(int,*(int))->(int)
(	O
worma	int
,	O
NULL	O
)	O
||	O
!	O
find_defense	(int,*(int))->(int)
(	O
wormb	int
,	O
NULL	O
)	O
)	O
{	O
if	O
(	O
0	int
)	O
gprintf	(*(char))->(int)
(	O
"%1m: Rej. attack_either_move for %1m & %1m (regular attack)\n"	*(char)
,	O
move	*(int)
,	O
worma	int
,	O
wormb	int
)	O
;	O
}	O
else	O
if	O
(	O
!	O
defend_both	(int,int)->(int)
(	O
worma	int
,	O
wormb	int
)	O
)	O
add_either_move	(int,int,int,int,int)->(void)
(	O
move	*(int)
,	O
ATTACK_STRING	int
,	O
worma	int
,	O
ATTACK_STRING	int
,	O
wormb	int
)	O
;	O
else	O
{	O
if	O
(	O
0	int
)	O
gprintf	(*(char))->(int)
(	O
"%1m: Rej. attack_either_move for %1m & %1m (doesn't work)\n"	*(char)
,	O
move	*(int)
,	O
worma	int
,	O
wormb	int
)	O
;	O
}	O
}	O
else	O
if	O
(	O
0	int
)	O
gprintf	(*(char))->(int)
(	O
"%1m: Rej. attack_either_move for %1m & %1m (captured directly)\n"	*(char)
,	O
move	*(int)
,	O
worma	int
,	O
wormb	int
)	O
;	O
popgo	()->(void)
(	O
)	O
;	O
}	O
}	O
int	O
adjacent_to_stone_in_atari	(int)->(int)
(	O
int	O
str	int
)	O
{	O
int	O
adj	array(int)
;	O
int	O
adjs	array(int)
[	O
MAXCHAIN	int
]	O
;	O
int	O
k	int
;	O
adj	array(int)
=	O
chainlinks2	(int,array(int),int)->(int)
(	O
str	int
,	O
adjs	array(int)
,	O
1	int
)	O
;	O
for	O
(	O
k	int
=	O
0	int
;	O
k	int
<	O
adj	array(int)
;	O
k	int
++	O
)	O
if	O
(	O
attack	(int,*(int))->(int)
(	O
adjs	array(int)
[	O
k	int
]	O
,	O
NULL	O
)	O
)	O
return	O
1	int
;	O
return	O
0	int
;	O
}	O
int	O
adjacent_to_defendable_stone_in_atari	(int)->(int)
(	O
int	O
str	int
)	O
{	O
int	O
adj	array(int)
;	O
int	O
adjs	array(int)
[	O
MAXCHAIN	int
]	O
;	O
int	O
k	int
;	O
adj	array(int)
=	O
chainlinks2	(int,array(int),int)->(int)
(	O
str	int
,	O
adjs	array(int)
,	O
1	int
)	O
;	O
for	O
(	O
k	int
=	O
0	int
;	O
k	int
<	O
adj	array(int)
;	O
k	int
++	O
)	O
if	O
(	O
attack_and_defend	(int,*(int),*(int),*(int),*(int))->(int)
(	O
adjs	array(int)
[	O
k	int
]	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
)	O
)	O
return	O
1	int
;	O
return	O
0	int
;	O
}	O
void	O
backfill_replace	(int,int)->(void)
(	O
int	O
move	*(int)
,	O
int	O
str	int
)	O
{	O
int	O
defense_move	int
=	O
NO_MOVE	O
;	O
if	O
(	O
TRYMOVE	O
(	O
move	*(int)
,	O
OTHER_COLOR	O
(	O
board	*(char)
[	O
str	int
]	O
)	O
)	O
)	O
{	O
if	O
(	O
attack_and_defend	(int,*(int),*(int),*(int),*(int))->(int)
(	O
str	int
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
&	O
defense_move	int
)	O
)	O
{	O
popgo	()->(void)
(	O
)	O
;	O
add_replacement_move	(int,int,int)->(void)
(	O
move	*(int)
,	O
defense_move	int
,	O
board	*(char)
[	O
str	int
]	O
)	O
;	O
}	O
else	O
popgo	()->(void)
(	O
)	O
;	O
}	O
}	O
int	O
thrash_around_helper	(*(struct(*(struct(short,char)),int,int,*(char),int,int,int,int,int,int,int,int,array(int),array(int),int,float,*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int),union`)),int,*((*`,int,int,int)->(int)),*((int,int,int,int)->(int)),int,float)),int,int,int)->(int)
(	O
ARGS	O
)	O
{	O
UNUSED	O
(	O
pattern	*(struct)
)	O
;	O
UNUSED	O
(	O
trans	int
)	O
;	O
UNUSED	O
(	O
move	*(int)
)	O
;	O
if	O
(	O
doing_scoring	int
||	O
disable_fuseki	int
||	O
(	O
stones_on_board	(int)->(int)
(	O
BLACK	int
|	O
WHITE	int
)	O
>	O
board_size	int
*	O
board_size	int
*	O
2	int
/	O
5	int
&&	O
stones_on_board	(int)->(int)
(	O
WHITE	int
)	O
>	O
board_size	int
*	O
board_size	int
/	O
5	int
)	O
||	O
color	int
==	O
BLACK	int
||	O
lively_dragon_exists	(int)->(int)
(	O
WHITE	int
)	O
)	O
return	O
0	int
;	O
return	O
1	int
;	O
}	O
int	O
break_mirror_helper	(int,int)->(int)
(	O
int	O
str	int
,	O
int	O
color	int
)	O
{	O
if	O
(	O
board_size	int
%	O
2	int
==	O
1	int
&&	O
color	int
==	O
WHITE	int
&&	O
komi	float
<=	O
0.0	int
&&	O
I	O
(	O
str	int
)	O
==	O
(	O
board_size	int
-	O
1	int
)	O
/	O
2	int
&&	O
J	O
(	O
str	int
)	O
==	O
(	O
board_size	int
-	O
1	int
)	O
/	O
2	int
&&	O
stones_on_board	(int)->(int)
(	O
BLACK	int
|	O
WHITE	int
)	O
>	O
10	int
&&	O
test_symmetry_after_move	(int,int,int)->(int)
(	O
PASS_MOVE	int
,	O
EMPTY	int
,	O
1	int
)	O
)	O
return	O
1	int
;	O
return	O
0	int
;	O
}	O
int	O
distrust_tactics_helper	(int)->(int)
(	O
int	O
str	int
)	O
{	O
int	O
color	int
=	O
board	*(char)
[	O
str	int
]	O
;	O
int	O
adj	array(int)
;	O
int	O
adjs	array(int)
[	O
MAXCHAIN	int
]	O
;	O
int	O
k	int
;	O
int	O
r	int
;	O
int	O
s	int
;	O
int	O
lib	int
=	O
countlib	(int)->(int)
(	O
str	int
)	O
;	O
ASSERT1	O
(	O
IS_STONE	O
(	O
board	*(char)
[	O
str	int
]	O
)	O
,	O
str	int
)	O
;	O
if	O
(	O
lib	int
>	O
2	int
)	O
return	O
1	int
;	O
else	O
if	O
(	O
lib	int
==	O
1	int
)	O
return	O
0	int
;	O
adj	array(int)
=	O
chainlinks3	(int,array(int),int)->(int)
(	O
str	int
,	O
adjs	array(int)
,	O
lib	int
)	O
;	O
for	O
(	O
r	int
=	O
0	int
;	O
r	int
<	O
adj	array(int)
;	O
r	int
++	O
)	O
{	O
int	O
nakade	int
=	O
1	int
;	O
int	O
adjlib	int
;	O
int	O
adjlibs	array(int)
[	O
3	int
]	O
;	O
if	O
(	O
countstones	(int)->(int)
(	O
adjs	array(int)
[	O
r	int
]	O
)	O
<	O
3	int
)	O
continue	O
;	O
adjlib	int
=	O
findlib	(int,int,*(int))->(int)
(	O
adjs	array(int)
[	O
r	int
]	O
,	O
3	int
,	O
adjlibs	array(int)
)	O
;	O
for	O
(	O
s	int
=	O
0	int
;	O
s	int
<	O
adjlib	int
;	O
s	int
++	O
)	O
{	O
int	O
str_found	int
=	O
0	int
;	O
for	O
(	O
k	int
=	O
0	int
;	O
k	int
<	O
4	int
;	O
k	int
++	O
)	O
{	O
int	O
pos	int
=	O
adjlibs	array(int)
[	O
s	int
]	O
+	O
delta	array(int)
[	O
k	int
]	O
;	O
if	O
(	O
board	*(char)
[	O
pos	int
]	O
==	O
EMPTY	int
&&	O
!	O
liberty_of_string	(int,int)->(int)
(	O
pos	int
,	O
adjs	array(int)
[	O
r	int
]	O
)	O
)	O
nakade	int
=	O
0	int
;	O
else	O
if	O
(	O
board	*(char)
[	O
pos	int
]	O
==	O
color	int
)	O
{	O
if	O
(	O
same_string	(int,int)->(int)
(	O
pos	int
,	O
str	int
)	O
)	O
str_found	int
=	O
1	int
;	O
else	O
nakade	int
=	O
0	int
;	O
}	O
else	O
if	O
(	O
board	*(char)
[	O
pos	int
]	O
==	O
OTHER_COLOR	O
(	O
color	int
)	O
&&	O
!	O
same_string	(int,int)->(int)
(	O
pos	int
,	O
adjs	array(int)
[	O
r	int
]	O
)	O
)	O
nakade	int
=	O
0	int
;	O
}	O
if	O
(	O
!	O
str_found	int
)	O
nakade	int
=	O
0	int
;	O
}	O
if	O
(	O
nakade	int
)	O
return	O
1	int
;	O
}	O
return	O
0	int
;	O
}	O
