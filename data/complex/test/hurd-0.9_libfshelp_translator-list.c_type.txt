struct	O
translator	struct(*(struct),*(char),int)
{	O
struct	O
port_info	O
*	O
pi	*(struct)
;	O
char	O
*	O
name	*(char)
;	O
mach_port_t	O
active	int
;	O
}	O
;	O
static	O
struct	O
hurd_ihash	struct(long,*(struct(*(void),int)),long,int,int,*((*(void),*(void))->(void)),*(void),*((*(void))->(int)),*((*(void),*(void))->(int)),long)
translator_ihash	struct(long,*(struct(*(void),int)),long,int,int,*((*(void),*(void))->(void)),*(void),*((*(void))->(int)),*((*(void),*(void))->(int)),long)
=	O
HURD_IHASH_INITIALIZER	O
(	O
HURD_IHASH_NO_LOCP	O
)	O
;	O
static	O
pthread_mutex_t	O
translator_ihash_lock	int
=	O
PTHREAD_MUTEX_INITIALIZER	O
;	O
static	O
void	O
translator_ihash_cleanup	(*(void),*(void))->(void)
(	O
void	O
*	O
element	*(void)
,	O
void	O
*	O
arg	*(void)
)	O
{	O
struct	O
translator	struct(*(struct),*(char),int)
*	O
translator	struct(*(struct),*(char),int)
=	O
element	*(void)
;	O
if	O
(	O
translator	struct(*(struct),*(char),int)
->	O
pi	*(struct)
)	O
ports_port_deref	()->(int)
(	O
translator	struct(*(struct),*(char),int)
->	O
pi	*(struct)
)	O
;	O
mach_port_deallocate	()->(int)
(	O
mach_task_self	()->(int)
(	O
)	O
,	O
translator	struct(*(struct),*(char),int)
->	O
active	int
)	O
;	O
free	()->(int)
(	O
translator	struct(*(struct),*(char),int)
->	O
name	*(char)
)	O
;	O
free	()->(int)
(	O
translator	struct(*(struct),*(char),int)
)	O
;	O
}	O
error_t	int
fshelp_set_active_translator	(*(struct),*(char),int)->(int)
(	O
struct	O
port_info	O
*	O
pi	*(struct)
,	O
const	O
char	O
*	O
name	*(char)
,	O
mach_port_t	O
active	int
)	O
{	O
error_t	int
err	int
=	O
0	int
;	O
pthread_mutex_lock	()->(int)
(	O
&	O
translator_ihash_lock	int
)	O
;	O
if	O
(	O
!	O
translator_ihash	struct(long,*(struct(*(void),int)),long,int,int,*((*(void),*(void))->(void)),*(void),*((*(void))->(int)),*((*(void),*(void))->(int)),long)
.	O
cleanup	*((*(void),*(void))->(void))
)	O
hurd_ihash_set_cleanup	(*(struct(long,*(struct(*`,int)),long,int,int,*((*`,*`)->(void)),*(void),*((*`)->(int)),*((*`,*`)->(int)),long)),*((*(void),*(void))->(void)),*(void))->(void)
(	O
&	O
translator_ihash	struct(long,*(struct(*(void),int)),long,int,int,*((*(void),*(void))->(void)),*(void),*((*(void))->(int)),*((*(void),*(void))->(int)),long)
,	O
translator_ihash_cleanup	(*(void),*(void))->(void)
,	O
NULL	O
)	O
;	O
struct	O
translator	struct(*(struct),*(char),int)
*	O
t	*(struct(*(struct),*(char),int))
=	O
NULL	O
;	O
HURD_IHASH_ITERATE	O
(	O
&	O
translator_ihash	struct(long,*(struct(*(void),int)),long,int,int,*((*(void),*(void))->(void)),*(void),*((*(void))->(int)),*((*(void),*(void))->(int)),long)
,	O
value	*(void)
)	O
{	O
t	*(struct(*(struct),*(char),int))
=	O
value	*(void)
;	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
name	*(char)
,	O
t	*(struct(*(struct),*(char),int))
->	O
name	*(char)
)	O
==	O
0	int
)	O
goto	O
update	O
;	O
}	O
t	*(struct(*(struct),*(char),int))
=	O
malloc	O
(	O
sizeof	O
(	O
struct	O
translator	struct(*(struct),*(char),int)
)	O
)	O
;	O
if	O
(	O
!	O
t	*(struct(*(struct),*(char),int))
)	O
{	O
err	int
=	O
errno	O
;	O
goto	O
out	O
;	O
}	O
t	*(struct(*(struct),*(char),int))
->	O
active	int
=	O
MACH_PORT_NULL	O
;	O
t	*(struct(*(struct),*(char),int))
->	O
pi	*(struct)
=	O
NULL	O
;	O
t	*(struct(*(struct),*(char),int))
->	O
name	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
name	*(char)
)	O
;	O
if	O
(	O
!	O
t	*(struct(*(struct),*(char),int))
->	O
name	*(char)
)	O
{	O
err	int
=	O
errno	O
;	O
free	()->(int)
(	O
t	*(struct(*(struct),*(char),int))
)	O
;	O
goto	O
out	O
;	O
}	O
err	int
=	O
hurd_ihash_add	(*(struct(long,*(struct(*`,int)),long,int,int,*((*`,*`)->(void)),*(void),*((*`)->(int)),*((*`,*`)->(int)),long)),int,*(void))->(int)
(	O
&	O
translator_ihash	struct(long,*(struct(*(void),int)),long,int,int,*((*(void),*(void))->(void)),*(void),*((*(void))->(int)),*((*(void),*(void))->(int)),long)
,	O
(	O
hurd_ihash_key_t	int
)	O
t	*(struct(*(struct),*(char),int))
,	O
t	*(struct(*(struct),*(char),int))
)	O
;	O
if	O
(	O
err	int
)	O
goto	O
out	O
;	O
update	O
:	O
if	O
(	O
active	int
)	O
{	O
if	O
(	O
t	*(struct(*(struct),*(char),int))
->	O
pi	*(struct)
!=	O
pi	*(struct)
)	O
{	O
mach_port_t	O
old	O
;	O
err	int
=	O
mach_port_request_notification	()->(int)
(	O
mach_task_self	()->(int)
(	O
)	O
,	O
active	int
,	O
MACH_NOTIFY_DEAD_NAME	O
,	O
0	int
,	O
pi	*(struct)
->	O
port_right	O
,	O
MACH_MSG_TYPE_MAKE_SEND_ONCE	O
,	O
&	O
old	O
)	O
;	O
if	O
(	O
err	int
)	O
goto	O
out	O
;	O
if	O
(	O
old	O
!=	O
MACH_PORT_NULL	O
)	O
mach_port_deallocate	()->(int)
(	O
mach_task_self	()->(int)
(	O
)	O
,	O
old	O
)	O
;	O
if	O
(	O
t	*(struct(*(struct),*(char),int))
->	O
pi	*(struct)
)	O
ports_port_deref	()->(int)
(	O
t	*(struct(*(struct),*(char),int))
->	O
pi	*(struct)
)	O
;	O
ports_port_ref	()->(int)
(	O
pi	*(struct)
)	O
;	O
t	*(struct(*(struct),*(char),int))
->	O
pi	*(struct)
=	O
pi	*(struct)
;	O
}	O
if	O
(	O
MACH_PORT_VALID	()->(int)
(	O
t	*(struct(*(struct),*(char),int))
->	O
active	int
)	O
)	O
mach_port_deallocate	()->(int)
(	O
mach_task_self	()->(int)
(	O
)	O
,	O
t	*(struct(*(struct),*(char),int))
->	O
active	int
)	O
;	O
mach_port_mod_refs	()->(int)
(	O
mach_task_self	()->(int)
(	O
)	O
,	O
active	int
,	O
MACH_PORT_RIGHT_SEND	O
,	O
+	O
1	int
)	O
;	O
t	*(struct(*(struct),*(char),int))
->	O
active	int
=	O
active	int
;	O
}	O
else	O
hurd_ihash_remove	(*(struct(long,*(struct(*`,int)),long,int,int,*((*`,*`)->(void)),*(void),*((*`)->(int)),*((*`,*`)->(int)),long)),int)->(int)
(	O
&	O
translator_ihash	struct(long,*(struct(*(void),int)),long,int,int,*((*(void),*(void))->(void)),*(void),*((*(void))->(int)),*((*(void),*(void))->(int)),long)
,	O
(	O
hurd_ihash_key_t	int
)	O
t	*(struct(*(struct),*(char),int))
)	O
;	O
out	O
:	O
pthread_mutex_unlock	()->(int)
(	O
&	O
translator_ihash_lock	int
)	O
;	O
return	O
err	int
;	O
}	O
error_t	int
fshelp_remove_active_translator	(int)->(int)
(	O
mach_port_t	O
active	int
)	O
{	O
error_t	int
err	int
=	O
0	int
;	O
pthread_mutex_lock	()->(int)
(	O
&	O
translator_ihash_lock	int
)	O
;	O
struct	O
translator	struct(*(struct),*(char),int)
*	O
t	*(struct(*(struct),*(char),int))
=	O
NULL	O
;	O
HURD_IHASH_ITERATE	O
(	O
&	O
translator_ihash	struct(long,*(struct(*(void),int)),long,int,int,*((*(void),*(void))->(void)),*(void),*((*(void))->(int)),*((*(void),*(void))->(int)),long)
,	O
value	*(void)
)	O
{	O
struct	O
translator	struct(*(struct),*(char),int)
*	O
v	*(struct(*(struct),*(char),int))
=	O
value	*(void)
;	O
if	O
(	O
active	int
==	O
v	*(struct(*(struct),*(char),int))
->	O
active	int
)	O
{	O
t	*(struct(*(struct),*(char),int))
=	O
v	*(struct(*(struct),*(char),int))
;	O
break	O
;	O
}	O
}	O
if	O
(	O
t	*(struct(*(struct),*(char),int))
)	O
hurd_ihash_remove	(*(struct(long,*(struct(*`,int)),long,int,int,*((*`,*`)->(void)),*(void),*((*`)->(int)),*((*`,*`)->(int)),long)),int)->(int)
(	O
&	O
translator_ihash	struct(long,*(struct(*(void),int)),long,int,int,*((*(void),*(void))->(void)),*(void),*((*(void))->(int)),*((*(void),*(void))->(int)),long)
,	O
(	O
hurd_ihash_key_t	int
)	O
t	*(struct(*(struct),*(char),int))
)	O
;	O
pthread_mutex_unlock	()->(int)
(	O
&	O
translator_ihash_lock	int
)	O
;	O
return	O
err	int
;	O
}	O
error_t	int
fshelp_get_active_translators	(*(*(char)),*(long),int,*(char))->(int)
(	O
char	O
*	O
*	O
translators	*(*(char))
,	O
size_t	long
*	O
translators_len	*(long)
,	O
fshelp_filter	O
filter	int
,	O
const	O
char	O
*	O
prefix	*(char)
)	O
{	O
error_t	int
err	int
=	O
0	int
;	O
pthread_mutex_lock	()->(int)
(	O
&	O
translator_ihash_lock	int
)	O
;	O
if	O
(	O
prefix	*(char)
&&	O
strlen	(*(char))->(long)
(	O
prefix	*(char)
)	O
==	O
0	int
)	O
prefix	*(char)
=	O
NULL	O
;	O
HURD_IHASH_ITERATE	O
(	O
&	O
translator_ihash	struct(long,*(struct(*(void),int)),long,int,int,*((*(void),*(void))->(void)),*(void),*((*(void))->(int)),*((*(void),*(void))->(int)),long)
,	O
value	*(void)
)	O
{	O
struct	O
translator	struct(*(struct),*(char),int)
*	O
t	*(struct(*(struct),*(char),int))
=	O
value	*(void)
;	O
if	O
(	O
prefix	*(char)
!=	O
NULL	O
&&	O
(	O
strncmp	(*(char),*(char),long)->(int)
(	O
t	*(struct(*(struct),*(char),int))
->	O
name	*(char)
,	O
prefix	*(char)
,	O
strlen	(*(char))->(long)
(	O
prefix	*(char)
)	O
)	O
!=	O
0	int
||	O
t	*(struct(*(struct),*(char),int))
->	O
name	*(char)
[	O
strlen	(*(char))->(long)
(	O
prefix	*(char)
)	O
]	O
!=	O
'/'	O
)	O
)	O
continue	O
;	O
if	O
(	O
filter	int
)	O
{	O
char	O
*	O
dir	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
t	*(struct(*(struct),*(char),int))
->	O
name	*(char)
)	O
;	O
if	O
(	O
!	O
dir	*(char)
)	O
{	O
err	int
=	O
ENOMEM	int
;	O
break	O
;	O
}	O
err	int
=	O
filter	int
(	O
dirname	()->(int)
(	O
dir	*(char)
)	O
)	O
;	O
free	()->(int)
(	O
dir	*(char)
)	O
;	O
if	O
(	O
err	int
)	O
{	O
err	int
=	O
0	int
;	O
continue	O
;	O
}	O
}	O
err	int
=	O
argz_add	(*(*(char)),*(long),*(char))->(int)
(	O
translators	*(*(char))
,	O
translators_len	*(long)
,	O
&	O
t	*(struct(*(struct),*(char),int))
->	O
name	*(char)
[	O
prefix	*(char)
?	O
strlen	(*(char))->(long)
(	O
prefix	*(char)
)	O
+	O
1	int
:	O
0	int
]	O
)	O
;	O
if	O
(	O
err	int
)	O
break	O
;	O
}	O
pthread_mutex_unlock	()->(int)
(	O
&	O
translator_ihash_lock	int
)	O
;	O
return	O
err	int
;	O
}	O
