typedef	O
int	O
(	O
*	O
address_aget_t	*((*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),long,*(*(char)))->(int))
)	O
(	O
mu_address_t	*(struct)
addr	int
,	O
size_t	long
no	long
,	O
char	O
*	O
*	O
buf	*(char)
)	O
;	O
address_aget_t	*((*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),long,*(*(char)))->(int))
sieve_get_address_part	(*(struct(struct(struct(*`,int,int),struct(*`,int,int)),int,*(struct),*(struct),*(struct),*(struct),*(*(char)),long,long,*(struct(int,int,*`,*`,*`)),long,long,*(struct(enum(int,int,int,int,int),*`,struct`,union`)),long,long,long,*(union(*`,*`,*`,*`,long,long,long,int,*`,int)),enum(int,int,int,int,int),long,long,*(struct),*(char),*(struct(int,int)),long,long,*(struct),*(char),long,long,long,*((*`,*`,*`)->(int)),int,array(struct(array(long),int,struct(array(long)))),*(struct),*(struct),long,*(struct),int,int,int,struct(struct(*`,int,int),struct(*`,int,int)),int,struct(struct(*`,int,int),struct(*`,int,int)),*(struct),*(struct),*((*`,*`,*`,array(struct(int,int,*(void),*(void))))->(void)),*(struct),*(char),*(void))))->(*((*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),long,*(*(char)))->(int)))
(	O
mu_sieve_machine_t	*(struct)
mach	*(struct)
)	O
{	O
size_t	long
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
mach	*(struct)
->	O
tagcount	long
;	O
i	long
++	O
)	O
{	O
mu_sieve_value_t	struct(enum(int,int,int,int,int),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(char),long,struct(long,long)))
*	O
t	long
=	O
mu_sieve_get_tag_n	(*(struct),long)->(*(struct(enum(int,int,int,int,int),*(char),struct(struct(*`,int,int),struct(*`,int,int)),union(*(char),long,struct(long,long)))))
(	O
mach	*(struct)
,	O
i	long
)	O
;	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
t	long
->	O
tag	*(char)
,	O
"all"	*(char)
)	O
==	O
0	int
)	O
return	O
mu_address_aget_email	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))),long,*(*(char)))->(int)
;	O
else	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
t	long
->	O
tag	*(char)
,	O
"domain"	*(char)
)	O
==	O
0	int
)	O
return	O
mu_address_aget_domain	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))),long,*(*(char)))->(int)
;	O
else	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
t	long
->	O
tag	*(char)
,	O
"localpart"	*(char)
)	O
==	O
0	int
)	O
return	O
mu_address_aget_local_part	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))),long,*(*(char)))->(int)
;	O
}	O
return	O
mu_address_aget_email	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))),long,*(*(char)))->(int)
;	O
}	O
struct	O
address_closure	struct(*((*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),long,*(*(char)))->(int)),*(void),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))))))
{	O
address_aget_t	*((*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),long,*(*(char)))->(int))
aget	*((*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),long,*(*(char)))->(int))
;	O
void	O
*	O
data	*(void)
;	O
mu_address_t	*(struct)
addr	int
;	O
}	O
;	O
static	O
int	O
retrieve_address	(*(void),*(void),long,*(*(char)))->(int)
(	O
void	O
*	O
item	*(void)
,	O
void	O
*	O
data	*(void)
,	O
size_t	long
idx	long
,	O
char	O
*	O
*	O
pval	*(void)
)	O
{	O
struct	O
address_closure	struct(*((*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),long,*(*(char)))->(int)),*(void),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))))))
*	O
ap	array(struct(int,int,*(void),*(void)))
=	O
data	*(void)
;	O
char	O
*	O
val	*(char)
;	O
int	O
rc	int
;	O
if	O
(	O
!	O
ap	array(struct(int,int,*(void),*(void)))
->	O
addr	int
)	O
{	O
rc	int
=	O
mu_header_aget_value	O
(	O
(	O
mu_header_t	*(struct)
)	O
ap	array(struct(int,int,*(void),*(void)))
->	O
data	*(void)
,	O
(	O
char	O
*	O
)	O
item	*(void)
,	O
&	O
val	*(char)
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
if	O
(	O
mu_str_skip_class	(*(char),int)->(*(char))
(	O
val	*(char)
,	O
MU_CTYPE_BLANK	int
)	O
[	O
0	int
]	O
==	O
0	int
)	O
return	O
MU_ERR_NOENT	O
;	O
rc	int
=	O
mu_address_create	(*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))),*(char))->(int)
(	O
&	O
ap	array(struct(int,int,*(void),*(void)))
->	O
addr	int
,	O
val	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
val	*(char)
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
if	O
(	O
rc	int
==	O
MU_ERR_EMPTY_ADDRESS	O
)	O
rc	int
=	O
MU_ERR_NOENT	O
;	O
return	O
rc	int
;	O
}	O
}	O
rc	int
=	O
ap	array(struct(int,int,*(void),*(void)))
->	O
aget	*((*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),long,*(*(char)))->(int))
(	O
ap	array(struct(int,int,*(void),*(void)))
->	O
addr	int
,	O
idx	long
+	O
1	int
,	O
pval	*(void)
)	O
;	O
if	O
(	O
rc	int
)	O
mu_address_destroy	(*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))->(void)
(	O
&	O
ap	array(struct(int,int,*(void),*(void)))
->	O
addr	int
)	O
;	O
return	O
rc	int
;	O
}	O
int	O
sieve_test_address	(*(struct(struct(struct(*`,int,int),struct(*`,int,int)),int,*(struct),*(struct),*(struct),*(struct),*(*(char)),long,long,*(struct(int,int,*`,*`,*`)),long,long,*(struct(enum(int,int,int,int,int),*`,struct`,union`)),long,long,long,*(union(*`,*`,*`,*`,long,long,long,int,*`,int)),enum(int,int,int,int,int),long,long,*(struct),*(char),*(struct(int,int)),long,long,*(struct),*(char),long,long,long,*((*`,*`,*`)->(int)),int,array(struct(array(long),int,struct(array(long)))),*(struct),*(struct),long,*(struct),int,int,int,struct(struct(*`,int,int),struct(*`,int,int)),int,struct(struct(*`,int,int),struct(*`,int,int)),*(struct),*(struct),*((*`,*`,*`,array(struct(int,int,*(void),*(void))))->(void)),*(struct),*(char),*(void))))->(int)
(	O
mu_sieve_machine_t	*(struct)
mach	*(struct)
)	O
{	O
mu_sieve_value_t	struct(enum(int,int,int,int,int),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(char),long,struct(long,long)))
*	O
h	*(struct(enum(int,int,int,int,int),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(char),long,struct(long,long))))
,	O
*	O
v	array(*(char))
;	O
mu_header_t	*(struct)
header	*(struct)
=	O
NULL	O
;	O
struct	O
address_closure	struct(*((*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),long,*(*(char)))->(int)),*(void),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))))))
clos	*(void)
;	O
int	O
rc	int
;	O
h	*(struct(enum(int,int,int,int,int),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(char),long,struct(long,long))))
=	O
mu_sieve_get_arg_untyped	(*(struct),long)->(*(struct(enum(int,int,int,int,int),*(char),struct(struct(*`,int,int),struct(*`,int,int)),union(*(char),long,struct(long,long)))))
(	O
mach	*(struct)
,	O
0	int
)	O
;	O
v	array(*(char))
=	O
mu_sieve_get_arg_untyped	(*(struct),long)->(*(struct(enum(int,int,int,int,int),*(char),struct(struct(*`,int,int),struct(*`,int,int)),union(*(char),long,struct(long,long)))))
(	O
mach	*(struct)
,	O
1	int
)	O
;	O
mu_message_get_header	(*(struct),*(*(struct)))->(int)
(	O
mu_sieve_get_message	(*(struct))->(*(struct))
(	O
mach	*(struct)
)	O
,	O
&	O
header	*(struct)
)	O
;	O
clos	*(void)
.	O
data	*(void)
=	O
header	*(struct)
;	O
clos	*(void)
.	O
aget	*((*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),long,*(*(char)))->(int))
=	O
sieve_get_address_part	(*(struct(struct(struct(*`,int,int),struct(*`,int,int)),int,*(struct),*(struct),*(struct),*(struct),*(*(char)),long,long,*(struct(int,int,*`,*`,*`)),long,long,*(struct(enum(int,int,int,int,int),*`,struct`,union`)),long,long,long,*(union(*`,*`,*`,*`,long,long,long,int,*`,int)),enum(int,int,int,int,int),long,long,*(struct),*(char),*(struct(int,int)),long,long,*(struct),*(char),long,long,long,*((*`,*`,*`)->(int)),int,array(struct(array(long),int,struct(array(long)))),*(struct),*(struct),long,*(struct),int,int,int,struct(struct(*`,int,int),struct(*`,int,int)),int,struct(struct(*`,int,int),struct(*`,int,int)),*(struct),*(struct),*((*`,*`,*`,array(struct(int,int,*(void),*(void))))->(void)),*(struct),*(char),*(void))))->(*((*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),long,*(*(char)))->(int)))
(	O
mach	*(struct)
)	O
;	O
clos	*(void)
.	O
addr	int
=	O
NULL	O
;	O
rc	int
=	O
mu_sieve_vlist_compare	(*(struct),*(struct(enum(int,int,int,int,int),*(char),struct(struct(*`,int,int),struct(*`,int,int)),union(*(char),long,struct(long,long)))),*(struct(enum(int,int,int,int,int),*(char),struct(struct(*`,int,int),struct(*`,int,int)),union(*(char),long,struct(long,long)))),*((*(void),*(void),long,*(*(char)))->(int)),*((*(void),*(void),*(void),*(*(void)))->(int)),*(void))->(int)
(	O
mach	*(struct)
,	O
h	*(struct(enum(int,int,int,int,int),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(char),long,struct(long,long))))
,	O
v	array(*(char))
,	O
retrieve_address	(*(void),*(void),long,*(*(char)))->(int)
,	O
NULL	O
,	O
&	O
clos	*(void)
)	O
;	O
mu_address_destroy	(*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))->(void)
(	O
&	O
clos	*(void)
.	O
addr	int
)	O
;	O
return	O
rc	int
;	O
}	O
struct	O
header_closure	struct(*(struct),long,long,*(struct),long)
{	O
mu_message_t	*(struct)
message	*(struct)
;	O
size_t	long
nparts	*(long)
;	O
size_t	long
part	long
;	O
mu_header_t	*(struct)
header	*(struct)
;	O
size_t	long
index	(*(char),int)->(*(char))
;	O
}	O
;	O
int	O
retrieve_header	(*(void),*(void),long,*(*(char)))->(int)
(	O
void	O
*	O
item	*(void)
,	O
void	O
*	O
data	*(void)
,	O
size_t	long
idx	long
,	O
char	O
*	O
*	O
pval	*(void)
)	O
{	O
struct	O
header_closure	struct(*(struct),long,long,*(struct),long)
*	O
hc	*(struct(*(struct),long,long,*(struct),long))
=	O
data	*(void)
;	O
char	O
const	O
*	O
hname	*(char)
;	O
int	O
rc	int
;	O
if	O
(	O
idx	long
==	O
0	int
)	O
{	O
rc	int
=	O
mu_message_get_header	(*(struct),*(*(struct)))->(int)
(	O
hc	*(struct(*(struct),long,long,*(struct),long))
->	O
message	*(struct)
,	O
&	O
hc	*(struct(*(struct),long,long,*(struct),long))
->	O
header	*(struct)
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
hc	*(struct(*(struct),long,long,*(struct),long))
->	O
index	(*(char),int)->(*(char))
=	O
1	int
;	O
hc	*(struct(*(struct),long,long,*(struct),long))
->	O
part	long
=	O
1	int
;	O
}	O
do	O
{	O
if	O
(	O
!	O
hc	*(struct(*(struct),long,long,*(struct),long))
->	O
header	*(struct)
)	O
{	O
if	O
(	O
hc	*(struct(*(struct),long,long,*(struct),long))
->	O
part	long
<=	O
hc	*(struct(*(struct),long,long,*(struct),long))
->	O
nparts	*(long)
)	O
{	O
mu_message_t	*(struct)
msg	*(struct)
;	O
rc	int
=	O
mu_message_get_part	(*(struct),long,*(*(struct)))->(int)
(	O
hc	*(struct(*(struct),long,long,*(struct),long))
->	O
message	*(struct)
,	O
hc	*(struct(*(struct),long,long,*(struct),long))
->	O
part	long
,	O
&	O
msg	*(struct)
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
hc	*(struct(*(struct),long,long,*(struct),long))
->	O
part	long
++	O
;	O
rc	int
=	O
mu_message_get_header	(*(struct),*(*(struct)))->(int)
(	O
msg	*(struct)
,	O
&	O
hc	*(struct(*(struct),long,long,*(struct),long))
->	O
header	*(struct)
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
hc	*(struct(*(struct),long,long,*(struct),long))
->	O
index	(*(char),int)->(*(char))
=	O
1	int
;	O
}	O
else	O
return	O
1	int
;	O
}	O
while	O
(	O
!	O
mu_header_sget_field_name	(*(struct),long,*(*(char)))->(int)
(	O
hc	*(struct(*(struct),long,long,*(struct),long))
->	O
header	*(struct)
,	O
hc	*(struct(*(struct),long,long,*(struct),long))
->	O
index	(*(char),int)->(*(char))
,	O
&	O
hname	*(char)
)	O
)	O
{	O
int	O
i	long
=	O
hc	*(struct(*(struct),long,long,*(struct),long))
->	O
index	(*(char),int)->(*(char))
++	O
;	O
if	O
(	O
mu_c_strcasecmp	(*(char),*(char))->(int)
(	O
hname	*(char)
,	O
(	O
char	O
*	O
)	O
item	*(void)
)	O
==	O
0	int
)	O
return	O
mu_header_aget_field_value_unfold	(*(struct),long,*(*(char)))->(int)
(	O
hc	*(struct(*(struct),long,long,*(struct),long))
->	O
header	*(struct)
,	O
i	long
,	O
pval	*(void)
)	O
;	O
}	O
hc	*(struct(*(struct),long,long,*(struct),long))
->	O
header	*(struct)
=	O
NULL	O
;	O
}	O
while	O
(	O
hc	*(struct(*(struct),long,long,*(struct),long))
->	O
part	long
<=	O
hc	*(struct(*(struct),long,long,*(struct),long))
->	O
nparts	*(long)
)	O
;	O
return	O
MU_ERR_NOENT	O
;	O
}	O
int	O
sieve_test_header	(*(struct(struct(struct(*`,int,int),struct(*`,int,int)),int,*(struct),*(struct),*(struct),*(struct),*(*(char)),long,long,*(struct(int,int,*`,*`,*`)),long,long,*(struct(enum(int,int,int,int,int),*`,struct`,union`)),long,long,long,*(union(*`,*`,*`,*`,long,long,long,int,*`,int)),enum(int,int,int,int,int),long,long,*(struct),*(char),*(struct(int,int)),long,long,*(struct),*(char),long,long,long,*((*`,*`,*`)->(int)),int,array(struct(array(long),int,struct(array(long)))),*(struct),*(struct),long,*(struct),int,int,int,struct(struct(*`,int,int),struct(*`,int,int)),int,struct(struct(*`,int,int),struct(*`,int,int)),*(struct),*(struct),*((*`,*`,*`,array(struct(int,int,*(void),*(void))))->(void)),*(struct),*(char),*(void))))->(int)
(	O
mu_sieve_machine_t	*(struct)
mach	*(struct)
)	O
{	O
mu_sieve_value_t	struct(enum(int,int,int,int,int),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(char),long,struct(long,long)))
*	O
h	*(struct(enum(int,int,int,int,int),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(char),long,struct(long,long))))
,	O
*	O
v	array(*(char))
;	O
int	O
rc	int
;	O
struct	O
header_closure	struct(*(struct),long,long,*(struct),long)
clos	*(void)
;	O
h	*(struct(enum(int,int,int,int,int),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(char),long,struct(long,long))))
=	O
mu_sieve_get_arg_untyped	(*(struct),long)->(*(struct(enum(int,int,int,int,int),*(char),struct(struct(*`,int,int),struct(*`,int,int)),union(*(char),long,struct(long,long)))))
(	O
mach	*(struct)
,	O
0	int
)	O
;	O
v	array(*(char))
=	O
mu_sieve_get_arg_untyped	(*(struct),long)->(*(struct(enum(int,int,int,int,int),*(char),struct(struct(*`,int,int),struct(*`,int,int)),union(*(char),long,struct(long,long)))))
(	O
mach	*(struct)
,	O
1	int
)	O
;	O
clos	*(void)
.	O
message	*(struct)
=	O
mach	*(struct)
->	O
msg	*(struct)
;	O
clos	*(void)
.	O
nparts	*(long)
=	O
0	int
;	O
if	O
(	O
mu_sieve_get_tag	(*(struct),*(char),enum(int,int,int,int,int),*(void))->(int)
(	O
mach	*(struct)
,	O
"mime"	*(char)
,	O
SVT_VOID	int
,	O
NULL	O
)	O
)	O
{	O
int	O
ismime	int
=	O
0	int
;	O
rc	int
=	O
mu_message_is_multipart	(*(struct),*(int))->(int)
(	O
mach	*(struct)
->	O
msg	*(struct)
,	O
&	O
ismime	int
)	O
;	O
if	O
(	O
rc	int
)	O
mu_diag_funcall	(int,*(char),*(char),int)->(void)
(	O
MU_DIAG_ERR	O
,	O
"mu_message_is_multipart"	*(char)
,	O
NULL	O
,	O
rc	int
)	O
;	O
if	O
(	O
ismime	int
)	O
{	O
rc	int
=	O
mu_message_get_num_parts	(*(struct),*(long))->(int)
(	O
mach	*(struct)
->	O
msg	*(struct)
,	O
&	O
clos	*(void)
.	O
nparts	*(long)
)	O
;	O
if	O
(	O
rc	int
)	O
mu_diag_funcall	(int,*(char),*(char),int)->(void)
(	O
MU_DIAG_ERR	O
,	O
"mu_message_get_num_parts"	*(char)
,	O
NULL	O
,	O
rc	int
)	O
;	O
}	O
}	O
rc	int
=	O
mu_sieve_vlist_compare	(*(struct),*(struct(enum(int,int,int,int,int),*(char),struct(struct(*`,int,int),struct(*`,int,int)),union(*(char),long,struct(long,long)))),*(struct(enum(int,int,int,int,int),*(char),struct(struct(*`,int,int),struct(*`,int,int)),union(*(char),long,struct(long,long)))),*((*(void),*(void),long,*(*(char)))->(int)),*((*(void),*(void),*(void),*(*(void)))->(int)),*(void))->(int)
(	O
mach	*(struct)
,	O
h	*(struct(enum(int,int,int,int,int),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(char),long,struct(long,long))))
,	O
v	array(*(char))
,	O
retrieve_header	(*(void),*(void),long,*(*(char)))->(int)
,	O
NULL	O
,	O
&	O
clos	*(void)
)	O
;	O
return	O
rc	int
;	O
}	O
int	O
retrieve_envelope	(*(void),*(void),long,*(*(char)))->(int)
(	O
void	O
*	O
item	*(void)
,	O
void	O
*	O
data	*(void)
,	O
size_t	long
idx	long
,	O
char	O
*	O
*	O
pval	*(void)
)	O
{	O
struct	O
address_closure	struct(*((*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),long,*(*(char)))->(int)),*(void),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))))))
*	O
ap	array(struct(int,int,*(void),*(void)))
=	O
data	*(void)
;	O
int	O
rc	int
;	O
if	O
(	O
!	O
ap	array(struct(int,int,*(void),*(void)))
->	O
addr	int
)	O
{	O
const	O
char	O
*	O
buf	*(char)
;	O
if	O
(	O
mu_c_strcasecmp	(*(char),*(char))->(int)
(	O
(	O
char	O
*	O
)	O
item	*(void)
,	O
"from"	*(char)
)	O
!=	O
0	int
)	O
return	O
MU_ERR_NOENT	O
;	O
rc	int
=	O
mu_envelope_sget_sender	(*(struct),*(*(char)))->(int)
(	O
(	O
mu_envelope_t	*(struct)
)	O
ap	array(struct(int,int,*(void),*(void)))
->	O
data	*(void)
,	O
&	O
buf	*(char)
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
rc	int
=	O
mu_address_create	(*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))),*(char))->(int)
(	O
&	O
ap	array(struct(int,int,*(void),*(void)))
->	O
addr	int
,	O
buf	*(char)
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
}	O
rc	int
=	O
ap	array(struct(int,int,*(void),*(void)))
->	O
aget	*((*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),long,*(*(char)))->(int))
(	O
ap	array(struct(int,int,*(void),*(void)))
->	O
addr	int
,	O
idx	long
+	O
1	int
,	O
pval	*(void)
)	O
;	O
if	O
(	O
rc	int
)	O
mu_address_destroy	(*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))->(void)
(	O
&	O
ap	array(struct(int,int,*(void),*(void)))
->	O
addr	int
)	O
;	O
return	O
rc	int
;	O
}	O
int	O
sieve_test_envelope	(*(struct(struct(struct(*`,int,int),struct(*`,int,int)),int,*(struct),*(struct),*(struct),*(struct),*(*(char)),long,long,*(struct(int,int,*`,*`,*`)),long,long,*(struct(enum(int,int,int,int,int),*`,struct`,union`)),long,long,long,*(union(*`,*`,*`,*`,long,long,long,int,*`,int)),enum(int,int,int,int,int),long,long,*(struct),*(char),*(struct(int,int)),long,long,*(struct),*(char),long,long,long,*((*`,*`,*`)->(int)),int,array(struct(array(long),int,struct(array(long)))),*(struct),*(struct),long,*(struct),int,int,int,struct(struct(*`,int,int),struct(*`,int,int)),int,struct(struct(*`,int,int),struct(*`,int,int)),*(struct),*(struct),*((*`,*`,*`,array(struct(int,int,*(void),*(void))))->(void)),*(struct),*(char),*(void))))->(int)
(	O
mu_sieve_machine_t	*(struct)
mach	*(struct)
)	O
{	O
mu_sieve_value_t	struct(enum(int,int,int,int,int),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(char),long,struct(long,long)))
*	O
h	*(struct(enum(int,int,int,int,int),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(char),long,struct(long,long))))
,	O
*	O
v	array(*(char))
;	O
struct	O
address_closure	struct(*((*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),long,*(*(char)))->(int)),*(void),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))))))
clos	*(void)
;	O
int	O
rc	int
;	O
h	*(struct(enum(int,int,int,int,int),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(char),long,struct(long,long))))
=	O
mu_sieve_get_arg_untyped	(*(struct),long)->(*(struct(enum(int,int,int,int,int),*(char),struct(struct(*`,int,int),struct(*`,int,int)),union(*(char),long,struct(long,long)))))
(	O
mach	*(struct)
,	O
0	int
)	O
;	O
v	array(*(char))
=	O
mu_sieve_get_arg_untyped	(*(struct),long)->(*(struct(enum(int,int,int,int,int),*(char),struct(struct(*`,int,int),struct(*`,int,int)),union(*(char),long,struct(long,long)))))
(	O
mach	*(struct)
,	O
1	int
)	O
;	O
mu_message_get_envelope	(*(struct),*(*(struct)))->(int)
(	O
mu_sieve_get_message	(*(struct))->(*(struct))
(	O
mach	*(struct)
)	O
,	O
(	O
mu_envelope_t	*(struct)
*	O
)	O
&	O
clos	*(void)
.	O
data	*(void)
)	O
;	O
clos	*(void)
.	O
aget	*((*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),long,*(*(char)))->(int))
=	O
sieve_get_address_part	(*(struct(struct(struct(*`,int,int),struct(*`,int,int)),int,*(struct),*(struct),*(struct),*(struct),*(*(char)),long,long,*(struct(int,int,*`,*`,*`)),long,long,*(struct(enum(int,int,int,int,int),*`,struct`,union`)),long,long,long,*(union(*`,*`,*`,*`,long,long,long,int,*`,int)),enum(int,int,int,int,int),long,long,*(struct),*(char),*(struct(int,int)),long,long,*(struct),*(char),long,long,long,*((*`,*`,*`)->(int)),int,array(struct(array(long),int,struct(array(long)))),*(struct),*(struct),long,*(struct),int,int,int,struct(struct(*`,int,int),struct(*`,int,int)),int,struct(struct(*`,int,int),struct(*`,int,int)),*(struct),*(struct),*((*`,*`,*`,array(struct(int,int,*(void),*(void))))->(void)),*(struct),*(char),*(void))))->(*((*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),long,*(*(char)))->(int)))
(	O
mach	*(struct)
)	O
;	O
clos	*(void)
.	O
addr	int
=	O
NULL	O
;	O
rc	int
=	O
mu_sieve_vlist_compare	(*(struct),*(struct(enum(int,int,int,int,int),*(char),struct(struct(*`,int,int),struct(*`,int,int)),union(*(char),long,struct(long,long)))),*(struct(enum(int,int,int,int,int),*(char),struct(struct(*`,int,int),struct(*`,int,int)),union(*(char),long,struct(long,long)))),*((*(void),*(void),long,*(*(char)))->(int)),*((*(void),*(void),*(void),*(*(void)))->(int)),*(void))->(int)
(	O
mach	*(struct)
,	O
h	*(struct(enum(int,int,int,int,int),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(char),long,struct(long,long))))
,	O
v	array(*(char))
,	O
retrieve_envelope	(*(void),*(void),long,*(*(char)))->(int)
,	O
NULL	O
,	O
&	O
clos	*(void)
)	O
;	O
mu_address_destroy	(*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))->(void)
(	O
&	O
clos	*(void)
.	O
addr	int
)	O
;	O
return	O
rc	int
;	O
}	O
int	O
sieve_test_size	(*(struct(struct(struct(*`,int,int),struct(*`,int,int)),int,*(struct),*(struct),*(struct),*(struct),*(*(char)),long,long,*(struct(int,int,*`,*`,*`)),long,long,*(struct(enum(int,int,int,int,int),*`,struct`,union`)),long,long,long,*(union(*`,*`,*`,*`,long,long,long,int,*`,int)),enum(int,int,int,int,int),long,long,*(struct),*(char),*(struct(int,int)),long,long,*(struct),*(char),long,long,long,*((*`,*`,*`)->(int)),int,array(struct(array(long),int,struct(array(long)))),*(struct),*(struct),long,*(struct),int,int,int,struct(struct(*`,int,int),struct(*`,int,int)),int,struct(struct(*`,int,int),struct(*`,int,int)),*(struct),*(struct),*((*`,*`,*`,array(struct(int,int,*(void),*(void))))->(void)),*(struct),*(char),*(void))))->(int)
(	O
mu_sieve_machine_t	*(struct)
mach	*(struct)
)	O
{	O
int	O
rc	int
=	O
1	int
;	O
size_t	long
size	long
;	O
size_t	long
arg	*(char)
;	O
mu_sieve_get_arg	(*(struct),long,enum(int,int,int,int,int),*(void))->(void)
(	O
mach	*(struct)
,	O
0	int
,	O
SVT_NUMBER	int
,	O
&	O
arg	*(char)
)	O
;	O
mu_message_size	(*(struct),*(long))->(int)
(	O
mu_sieve_get_message	(*(struct))->(*(struct))
(	O
mach	*(struct)
)	O
,	O
&	O
size	long
)	O
;	O
if	O
(	O
mach	*(struct)
->	O
tagcount	long
)	O
{	O
mu_sieve_value_t	struct(enum(int,int,int,int,int),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(char),long,struct(long,long)))
*	O
tag	*(char)
=	O
mu_sieve_get_tag_n	(*(struct),long)->(*(struct(enum(int,int,int,int,int),*(char),struct(struct(*`,int,int),struct(*`,int,int)),union(*(char),long,struct(long,long)))))
(	O
mach	*(struct)
,	O
0	int
)	O
;	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
tag	*(char)
->	O
tag	*(char)
,	O
"over"	*(char)
)	O
==	O
0	int
)	O
rc	int
=	O
size	long
>	O
arg	*(char)
;	O
else	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
tag	*(char)
->	O
tag	*(char)
,	O
"under"	*(char)
)	O
==	O
0	int
)	O
rc	int
=	O
size	long
<	O
arg	*(char)
;	O
else	O
abort	()->(void)
(	O
)	O
;	O
}	O
else	O
rc	int
=	O
size	long
==	O
arg	*(char)
;	O
return	O
rc	int
;	O
}	O
int	O
_test_exists	(*(void),*(void))->(int)
(	O
void	O
*	O
item	*(void)
,	O
void	O
*	O
data	*(void)
)	O
{	O
mu_header_t	*(struct)
hdr	*(struct)
=	O
data	*(void)
;	O
size_t	long
n	*(long)
;	O
return	O
mu_header_get_value	O
(	O
hdr	*(struct)
,	O
(	O
char	O
*	O
)	O
item	*(void)
,	O
NULL	O
,	O
0	int
,	O
&	O
n	*(long)
)	O
;	O
}	O
int	O
sieve_test_exists	(*(struct(struct(struct(*`,int,int),struct(*`,int,int)),int,*(struct),*(struct),*(struct),*(struct),*(*(char)),long,long,*(struct(int,int,*`,*`,*`)),long,long,*(struct(enum(int,int,int,int,int),*`,struct`,union`)),long,long,long,*(union(*`,*`,*`,*`,long,long,long,int,*`,int)),enum(int,int,int,int,int),long,long,*(struct),*(char),*(struct(int,int)),long,long,*(struct),*(char),long,long,long,*((*`,*`,*`)->(int)),int,array(struct(array(long),int,struct(array(long)))),*(struct),*(struct),long,*(struct),int,int,int,struct(struct(*`,int,int),struct(*`,int,int)),int,struct(struct(*`,int,int),struct(*`,int,int)),*(struct),*(struct),*((*`,*`,*`,array(struct(int,int,*(void),*(void))))->(void)),*(struct),*(char),*(void))))->(int)
(	O
mu_sieve_machine_t	*(struct)
mach	*(struct)
)	O
{	O
mu_header_t	*(struct)
header	*(struct)
=	O
NULL	O
;	O
mu_sieve_value_t	struct(enum(int,int,int,int,int),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(char),long,struct(long,long)))
*	O
val	*(char)
;	O
mu_message_get_header	(*(struct),*(*(struct)))->(int)
(	O
mu_sieve_get_message	(*(struct))->(*(struct))
(	O
mach	*(struct)
)	O
,	O
&	O
header	*(struct)
)	O
;	O
val	*(char)
=	O
mu_sieve_get_arg_untyped	(*(struct),long)->(*(struct(enum(int,int,int,int,int),*(char),struct(struct(*`,int,int),struct(*`,int,int)),union(*(char),long,struct(long,long)))))
(	O
mach	*(struct)
,	O
0	int
)	O
;	O
return	O
mu_sieve_vlist_do	(*(struct),*(struct(enum(int,int,int,int,int),*(char),struct(struct(*`,int,int),struct(*`,int,int)),union(*(char),long,struct(long,long)))),*((*(void),*(void))->(int)),*(void))->(int)
(	O
mach	*(struct)
,	O
val	*(char)
,	O
_test_exists	(*(void),*(void))->(int)
,	O
header	*(struct)
)	O
==	O
0	int
;	O
}	O
static	O
mu_sieve_tag_def_t	struct(*(char),enum(int,int,int,int,int))
address_part_tags	array(struct(*(char),enum(int,int,int,int,int)))
[	O
]	O
=	O
{	O
{	O
"localpart"	*(char)
,	O
SVT_VOID	int
}	O
,	O
{	O
"domain"	*(char)
,	O
SVT_VOID	int
}	O
,	O
{	O
"all"	*(char)
,	O
SVT_VOID	int
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
mu_sieve_tag_def_t	struct(*(char),enum(int,int,int,int,int))
mu_sieve_match_part_tags	array(struct(*(char),enum(int,int,int,int,int)))
[	O
]	O
=	O
{	O
{	O
"is"	*(char)
,	O
SVT_VOID	int
}	O
,	O
{	O
"contains"	*(char)
,	O
SVT_VOID	int
}	O
,	O
{	O
"matches"	*(char)
,	O
SVT_VOID	int
}	O
,	O
{	O
"regex"	*(char)
,	O
SVT_VOID	int
}	O
,	O
{	O
"count"	*(char)
,	O
SVT_STRING	int
}	O
,	O
{	O
"value"	*(char)
,	O
SVT_STRING	int
}	O
,	O
{	O
"comparator"	*(char)
,	O
SVT_STRING	int
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
static	O
mu_sieve_tag_def_t	struct(*(char),enum(int,int,int,int,int))
size_tags	array(struct(*(char),enum(int,int,int,int,int)))
[	O
]	O
=	O
{	O
{	O
"over"	*(char)
,	O
SVT_VOID	int
}	O
,	O
{	O
"under"	*(char)
,	O
SVT_VOID	int
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
static	O
mu_sieve_tag_def_t	struct(*(char),enum(int,int,int,int,int))
mime_tags	array(struct(*(char),enum(int,int,int,int,int)))
[	O
]	O
=	O
{	O
{	O
"mime"	*(char)
,	O
SVT_VOID	int
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
mu_sieve_tag_group_t	struct(*(struct(*(char),enum(int,int,int,int,int))),*((*(struct))->(int)))
address_tag_groups	array(struct(*(struct(*(char),enum(int,int,int,int,int))),*((*(struct(struct`,int,*`,*`,*`,*`,*`,long,long,*`,long,long,*`,long,long,long,*`,enum(int,int,int,int,int),long,long,*`,*`,*`,long,long,*`,*`,long,long,long,*`,int,array(struct(array(long),int,struct(array(long)))),*`,*`,long,*`,int,int,int,struct`,int,struct`,*`,*`,*`,*`,*`,*`)))->(int))))
[	O
]	O
=	O
{	O
ADDRESS_PART_GROUP	O
,	O
MATCH_PART_GROUP	O
,	O
{	O
NULL	O
}	O
}	O
;	O
mu_sieve_data_type	enum(int,int,int,int,int)
address_req_args	array(enum(int,int,int,int,int))
[	O
]	O
=	O
{	O
SVT_STRING_LIST	int
,	O
SVT_STRING_LIST	int
,	O
SVT_VOID	int
}	O
;	O
mu_sieve_tag_group_t	struct(*(struct(*(char),enum(int,int,int,int,int))),*((*(struct))->(int)))
size_tag_groups	array(struct(*(struct(*(char),enum(int,int,int,int,int))),*((*(struct(struct`,int,*`,*`,*`,*`,*`,long,long,*`,long,long,*`,long,long,long,*`,enum(int,int,int,int,int),long,long,*`,*`,*`,long,long,*`,*`,long,long,long,*`,int,array(struct(array(long),int,struct(array(long)))),*`,*`,long,*`,int,int,int,struct`,int,struct`,*`,*`,*`,*`,*`,*`)))->(int))))
[	O
]	O
=	O
{	O
SIZE_GROUP	O
,	O
{	O
NULL	O
}	O
}	O
;	O
mu_sieve_data_type	enum(int,int,int,int,int)
size_req_args	array(enum(int,int,int,int,int))
[	O
]	O
=	O
{	O
SVT_NUMBER	int
,	O
SVT_VOID	int
}	O
;	O
mu_sieve_tag_group_t	struct(*(struct(*(char),enum(int,int,int,int,int))),*((*(struct))->(int)))
envelope_tag_groups	array(struct(*(struct(*(char),enum(int,int,int,int,int))),*((*(struct(struct`,int,*`,*`,*`,*`,*`,long,long,*`,long,long,*`,long,long,long,*`,enum(int,int,int,int,int),long,long,*`,*`,*`,long,long,*`,*`,long,long,long,*`,int,array(struct(array(long),int,struct(array(long)))),*`,*`,long,*`,int,int,int,struct`,int,struct`,*`,*`,*`,*`,*`,*`)))->(int))))
[	O
]	O
=	O
{	O
ADDRESS_PART_GROUP	O
,	O
MATCH_PART_GROUP	O
,	O
{	O
NULL	O
}	O
}	O
;	O
mu_sieve_data_type	enum(int,int,int,int,int)
exists_req_args	array(enum(int,int,int,int,int))
[	O
]	O
=	O
{	O
SVT_STRING_LIST	int
,	O
SVT_VOID	int
}	O
;	O
mu_sieve_tag_group_t	struct(*(struct(*(char),enum(int,int,int,int,int))),*((*(struct))->(int)))
header_tag_groups	array(struct(*(struct(*(char),enum(int,int,int,int,int))),*((*(struct(struct`,int,*`,*`,*`,*`,*`,long,long,*`,long,long,*`,long,long,long,*`,enum(int,int,int,int,int),long,long,*`,*`,*`,long,long,*`,*`,long,long,long,*`,int,array(struct(array(long),int,struct(array(long)))),*`,*`,long,*`,int,int,int,struct`,int,struct`,*`,*`,*`,*`,*`,*`)))->(int))))
[	O
]	O
=	O
{	O
MATCH_PART_GROUP	O
,	O
MIME_GROUP	O
,	O
{	O
NULL	O
}	O
}	O
;	O
void	O
mu_i_sv_register_standard_tests	(*(struct(struct(struct(*`,int,int),struct(*`,int,int)),int,*(struct),*(struct),*(struct),*(struct),*(*(char)),long,long,*(struct(int,int,*`,*`,*`)),long,long,*(struct(enum(int,int,int,int,int),*`,struct`,union`)),long,long,long,*(union(*`,*`,*`,*`,long,long,long,int,*`,int)),enum(int,int,int,int,int),long,long,*(struct),*(char),*(struct(int,int)),long,long,*(struct),*(char),long,long,long,*((*`,*`,*`)->(int)),int,array(struct(array(long),int,struct(array(long)))),*(struct),*(struct),long,*(struct),int,int,int,struct(struct(*`,int,int),struct(*`,int,int)),int,struct(struct(*`,int,int),struct(*`,int,int)),*(struct),*(struct),*((*`,*`,*`,array(struct(int,int,*(void),*(void))))->(void)),*(struct),*(char),*(void))))->(void)
(	O
mu_sieve_machine_t	*(struct)
mach	*(struct)
)	O
{	O
mu_sieve_register_test	(*(struct),*(char),*((*(struct))->(int)),*(enum(int,int,int,int,int)),*(struct(*(struct(*`,enum(int,int,int,int,int))),*((*`)->(int)))),int)->(void)
(	O
mach	*(struct)
,	O
"address"	*(char)
,	O
sieve_test_address	(*(struct(struct(struct(*`,int,int),struct(*`,int,int)),int,*(struct),*(struct),*(struct),*(struct),*(*(char)),long,long,*(struct(int,int,*`,*`,*`)),long,long,*(struct(enum(int,int,int,int,int),*`,struct`,union`)),long,long,long,*(union(*`,*`,*`,*`,long,long,long,int,*`,int)),enum(int,int,int,int,int),long,long,*(struct),*(char),*(struct(int,int)),long,long,*(struct),*(char),long,long,long,*((*`,*`,*`)->(int)),int,array(struct(array(long),int,struct(array(long)))),*(struct),*(struct),long,*(struct),int,int,int,struct(struct(*`,int,int),struct(*`,int,int)),int,struct(struct(*`,int,int),struct(*`,int,int)),*(struct),*(struct),*((*`,*`,*`,array(struct(int,int,*(void),*(void))))->(void)),*(struct),*(char),*(void))))->(int)
,	O
address_req_args	array(enum(int,int,int,int,int))
,	O
address_tag_groups	array(struct(*(struct(*(char),enum(int,int,int,int,int))),*((*(struct(struct`,int,*`,*`,*`,*`,*`,long,long,*`,long,long,*`,long,long,long,*`,enum(int,int,int,int,int),long,long,*`,*`,*`,long,long,*`,*`,long,long,long,*`,int,array(struct(array(long),int,struct(array(long)))),*`,*`,long,*`,int,int,int,struct`,int,struct`,*`,*`,*`,*`,*`,*`)))->(int))))
,	O
1	int
)	O
;	O
mu_sieve_register_test	(*(struct),*(char),*((*(struct))->(int)),*(enum(int,int,int,int,int)),*(struct(*(struct(*`,enum(int,int,int,int,int))),*((*`)->(int)))),int)->(void)
(	O
mach	*(struct)
,	O
"size"	*(char)
,	O
sieve_test_size	(*(struct(struct(struct(*`,int,int),struct(*`,int,int)),int,*(struct),*(struct),*(struct),*(struct),*(*(char)),long,long,*(struct(int,int,*`,*`,*`)),long,long,*(struct(enum(int,int,int,int,int),*`,struct`,union`)),long,long,long,*(union(*`,*`,*`,*`,long,long,long,int,*`,int)),enum(int,int,int,int,int),long,long,*(struct),*(char),*(struct(int,int)),long,long,*(struct),*(char),long,long,long,*((*`,*`,*`)->(int)),int,array(struct(array(long),int,struct(array(long)))),*(struct),*(struct),long,*(struct),int,int,int,struct(struct(*`,int,int),struct(*`,int,int)),int,struct(struct(*`,int,int),struct(*`,int,int)),*(struct),*(struct),*((*`,*`,*`,array(struct(int,int,*(void),*(void))))->(void)),*(struct),*(char),*(void))))->(int)
,	O
size_req_args	array(enum(int,int,int,int,int))
,	O
size_tag_groups	array(struct(*(struct(*(char),enum(int,int,int,int,int))),*((*(struct(struct`,int,*`,*`,*`,*`,*`,long,long,*`,long,long,*`,long,long,long,*`,enum(int,int,int,int,int),long,long,*`,*`,*`,long,long,*`,*`,long,long,long,*`,int,array(struct(array(long),int,struct(array(long)))),*`,*`,long,*`,int,int,int,struct`,int,struct`,*`,*`,*`,*`,*`,*`)))->(int))))
,	O
1	int
)	O
;	O
mu_sieve_register_test	(*(struct),*(char),*((*(struct))->(int)),*(enum(int,int,int,int,int)),*(struct(*(struct(*`,enum(int,int,int,int,int))),*((*`)->(int)))),int)->(void)
(	O
mach	*(struct)
,	O
"envelope"	*(char)
,	O
sieve_test_envelope	(*(struct(struct(struct(*`,int,int),struct(*`,int,int)),int,*(struct),*(struct),*(struct),*(struct),*(*(char)),long,long,*(struct(int,int,*`,*`,*`)),long,long,*(struct(enum(int,int,int,int,int),*`,struct`,union`)),long,long,long,*(union(*`,*`,*`,*`,long,long,long,int,*`,int)),enum(int,int,int,int,int),long,long,*(struct),*(char),*(struct(int,int)),long,long,*(struct),*(char),long,long,long,*((*`,*`,*`)->(int)),int,array(struct(array(long),int,struct(array(long)))),*(struct),*(struct),long,*(struct),int,int,int,struct(struct(*`,int,int),struct(*`,int,int)),int,struct(struct(*`,int,int),struct(*`,int,int)),*(struct),*(struct),*((*`,*`,*`,array(struct(int,int,*(void),*(void))))->(void)),*(struct),*(char),*(void))))->(int)
,	O
address_req_args	array(enum(int,int,int,int,int))
,	O
envelope_tag_groups	array(struct(*(struct(*(char),enum(int,int,int,int,int))),*((*(struct(struct`,int,*`,*`,*`,*`,*`,long,long,*`,long,long,*`,long,long,long,*`,enum(int,int,int,int,int),long,long,*`,*`,*`,long,long,*`,*`,long,long,long,*`,int,array(struct(array(long),int,struct(array(long)))),*`,*`,long,*`,int,int,int,struct`,int,struct`,*`,*`,*`,*`,*`,*`)))->(int))))
,	O
1	int
)	O
;	O
mu_sieve_register_test	(*(struct),*(char),*((*(struct))->(int)),*(enum(int,int,int,int,int)),*(struct(*(struct(*`,enum(int,int,int,int,int))),*((*`)->(int)))),int)->(void)
(	O
mach	*(struct)
,	O
"exists"	*(char)
,	O
sieve_test_exists	(*(struct(struct(struct(*`,int,int),struct(*`,int,int)),int,*(struct),*(struct),*(struct),*(struct),*(*(char)),long,long,*(struct(int,int,*`,*`,*`)),long,long,*(struct(enum(int,int,int,int,int),*`,struct`,union`)),long,long,long,*(union(*`,*`,*`,*`,long,long,long,int,*`,int)),enum(int,int,int,int,int),long,long,*(struct),*(char),*(struct(int,int)),long,long,*(struct),*(char),long,long,long,*((*`,*`,*`)->(int)),int,array(struct(array(long),int,struct(array(long)))),*(struct),*(struct),long,*(struct),int,int,int,struct(struct(*`,int,int),struct(*`,int,int)),int,struct(struct(*`,int,int),struct(*`,int,int)),*(struct),*(struct),*((*`,*`,*`,array(struct(int,int,*(void),*(void))))->(void)),*(struct),*(char),*(void))))->(int)
,	O
exists_req_args	array(enum(int,int,int,int,int))
,	O
NULL	O
,	O
1	int
)	O
;	O
mu_sieve_register_test	(*(struct),*(char),*((*(struct))->(int)),*(enum(int,int,int,int,int)),*(struct(*(struct(*`,enum(int,int,int,int,int))),*((*`)->(int)))),int)->(void)
(	O
mach	*(struct)
,	O
"header"	*(char)
,	O
sieve_test_header	(*(struct(struct(struct(*`,int,int),struct(*`,int,int)),int,*(struct),*(struct),*(struct),*(struct),*(*(char)),long,long,*(struct(int,int,*`,*`,*`)),long,long,*(struct(enum(int,int,int,int,int),*`,struct`,union`)),long,long,long,*(union(*`,*`,*`,*`,long,long,long,int,*`,int)),enum(int,int,int,int,int),long,long,*(struct),*(char),*(struct(int,int)),long,long,*(struct),*(char),long,long,long,*((*`,*`,*`)->(int)),int,array(struct(array(long),int,struct(array(long)))),*(struct),*(struct),long,*(struct),int,int,int,struct(struct(*`,int,int),struct(*`,int,int)),int,struct(struct(*`,int,int),struct(*`,int,int)),*(struct),*(struct),*((*`,*`,*`,array(struct(int,int,*(void),*(void))))->(void)),*(struct),*(char),*(void))))->(int)
,	O
address_req_args	array(enum(int,int,int,int,int))
,	O
header_tag_groups	array(struct(*(struct(*(char),enum(int,int,int,int,int))),*((*(struct(struct`,int,*`,*`,*`,*`,*`,long,long,*`,long,long,*`,long,long,long,*`,enum(int,int,int,int,int),long,long,*`,*`,*`,long,long,*`,*`,long,long,long,*`,int,array(struct(array(long),int,struct(array(long)))),*`,*`,long,*`,int,int,int,struct`,int,struct`,*`,*`,*`,*`,*`,*`)))->(int))))
,	O
1	int
)	O
;	O
}	O
