static	O
int	O
utmp_fd	int
=	O
-	O
1	int
;	O
static	O
enum	O
rushdb_result	enum(int,int,int)
status	int
=	O
rushdb_result_eof	int
;	O
static	O
struct	O
rush_utmp	struct(int,long)
utmprec	struct(int,long)
=	O
{	O
-	O
1	int
,	O
0	int
}	O
;	O
int	O
rush_utmp_open	(*(char),int)->(int)
(	O
const	O
char	O
*	O
name	*(char)
,	O
int	O
rw	int
)	O
{	O
int	O
fd	int
;	O
fd	int
=	O
open	(*(char),int)->(int)
(	O
name	*(char)
,	O
rw	int
?	O
O_RDWR	int
|	O
O_CREAT	int
:	O
O_RDONLY	int
,	O
rushdb_file_mode	int
)	O
;	O
if	O
(	O
fd	int
==	O
-	O
1	int
)	O
return	O
-	O
1	int
;	O
utmp_fd	int
=	O
fd	int
;	O
return	O
0	int
;	O
}	O
int	O
rush_utmp_close	()->(int)
(	O
)	O
{	O
int	O
rc	int
=	O
close	(int)->(int)
(	O
utmp_fd	int
)	O
;	O
utmp_fd	int
=	O
-	O
1	int
;	O
return	O
rc	int
;	O
}	O
static	O
enum	O
rushdb_result	enum(int,int,int)
rush_utmp_read0	(int,*(int),*(*(struct(long,int,struct(long,long),struct(long,long),*(char),*(char),*(char)))))->(enum(int,int,int))
(	O
int	O
statmap	int
,	O
int	O
*	O
pstatus	*(int)
,	O
struct	O
rush_wtmp	struct(long,int,struct(long,long),struct(long,long),*(char),*(char),*(char))
*	O
*	O
pwtmp	*(*(struct(long,int,struct(long,long),struct(long,long),*(char),*(char),*(char))))
)	O
{	O
for	O
(	O
;	O
;	O
)	O
{	O
ssize_t	long
n	long
=	O
read	(int,*(void),long)->(long)
(	O
utmp_fd	int
,	O
&	O
utmprec	struct(int,long)
,	O
sizeof	O
(	O
utmprec	struct(int,long)
)	O
)	O
;	O
if	O
(	O
n	long
==	O
0	int
)	O
return	O
rushdb_result_eof	int
;	O
if	O
(	O
n	long
!=	O
sizeof	O
(	O
utmprec	struct(int,long)
)	O
)	O
return	O
rushdb_result_fail	int
;	O
if	O
(	O
rush_wtmp_seek	(long)->(int)
(	O
utmprec	struct(int,long)
.	O
offset	long
)	O
)	O
return	O
rushdb_result_fail	int
;	O
if	O
(	O
statmap	int
==	O
0	int
||	O
RUSH_STATUS_MAP_ISSET	O
(	O
statmap	int
,	O
utmprec	struct(int,long)
.	O
status	int
)	O
)	O
{	O
if	O
(	O
pwtmp	*(*(struct(long,int,struct(long,long),struct(long,long),*(char),*(char),*(char))))
&&	O
rush_wtmp_read	(*(*(struct(long,int,struct(long,long),struct(long,long),*(char),*(char),*(char)))))->(enum(int,int,int))
(	O
pwtmp	*(*(struct(long,int,struct(long,long),struct(long,long),*(char),*(char),*(char))))
)	O
)	O
return	O
rushdb_result_fail	int
;	O
break	O
;	O
}	O
}	O
*	O
pstatus	*(int)
=	O
utmprec	struct(int,long)
.	O
status	int
;	O
return	O
rushdb_result_ok	int
;	O
}	O
enum	O
rushdb_result	enum(int,int,int)
rush_utmp_read	(int,*(int),*(*(struct(long,int,struct(long,long),struct(long,long),*(char),*(char),*(char)))))->(enum(int,int,int))
(	O
int	O
statmap	int
,	O
int	O
*	O
pstatus	*(int)
,	O
struct	O
rush_wtmp	struct(long,int,struct(long,long),struct(long,long),*(char),*(char),*(char))
*	O
*	O
pwtmp	*(*(struct(long,int,struct(long,long),struct(long,long),*(char),*(char),*(char))))
)	O
{	O
return	O
status	int
=	O
rush_utmp_read0	(int,*(int),*(*(struct(long,int,struct(long,long),struct(long,long),*(char),*(char),*(char)))))->(enum(int,int,int))
(	O
statmap	int
,	O
pstatus	*(int)
,	O
pwtmp	*(*(struct(long,int,struct(long,long),struct(long,long),*(char),*(char),*(char))))
)	O
;	O
}	O
int	O
rush_utmp_chstatus	(int)->(int)
(	O
int	O
status	int
)	O
{	O
if	O
(	O
utmp_fd	int
==	O
-	O
1	int
||	O
utmprec	struct(int,long)
.	O
status	int
==	O
-	O
1	int
||	O
!	O
(	O
status	int
==	O
RUSH_STATUS_AVAIL	int
||	O
status	int
==	O
RUSH_STATUS_INUSE	int
)	O
)	O
{	O
errno	O
=	O
EINVAL	int
;	O
return	O
1	int
;	O
}	O
if	O
(	O
lseek	(int,long,int)->(long)
(	O
utmp_fd	int
,	O
-	O
sizeof	O
(	O
utmprec	struct(int,long)
)	O
,	O
SEEK_CUR	int
)	O
==	O
-	O
1	int
)	O
return	O
1	int
;	O
utmprec	struct(int,long)
.	O
status	int
=	O
status	int
;	O
if	O
(	O
write	(int,*(void),long)->(long)
(	O
utmp_fd	int
,	O
&	O
utmprec	struct(int,long)
,	O
sizeof	O
(	O
utmprec	struct(int,long)
)	O
)	O
!=	O
sizeof	O
(	O
utmprec	struct(int,long)
)	O
)	O
return	O
1	int
;	O
return	O
0	int
;	O
}	O
int	O
rush_utmp_write	(*(struct(long,int,struct(long,long),struct(long,long),*(char),*(char),*(char))))->(int)
(	O
struct	O
rush_wtmp	struct(long,int,struct(long,long),struct(long,long),*(char),*(char),*(char))
*	O
wtmp	*(struct(long,int,struct(long,long),struct(long,long),*(char),*(char),*(char)))
)	O
{	O
int	O
rc	int
;	O
off_t	long
off	long
;	O
if	O
(	O
utmp_fd	int
==	O
-	O
1	int
)	O
{	O
errno	O
=	O
EINVAL	int
;	O
return	O
1	int
;	O
}	O
off	long
=	O
rush_wtmp_append	(*(struct(long,int,struct(long,long),struct(long,long),*(char),*(char),*(char))))->(long)
(	O
wtmp	*(struct(long,int,struct(long,long),struct(long,long),*(char),*(char),*(char)))
)	O
;	O
if	O
(	O
off	long
==	O
-	O
1	int
)	O
return	O
1	int
;	O
if	O
(	O
status	int
==	O
rushdb_result_ok	int
)	O
{	O
if	O
(	O
lseek	(int,long,int)->(long)
(	O
utmp_fd	int
,	O
-	O
sizeof	O
(	O
utmprec	struct(int,long)
)	O
,	O
SEEK_CUR	int
)	O
==	O
-	O
1	int
)	O
return	O
1	int
;	O
}	O
utmprec	struct(int,long)
.	O
status	int
=	O
RUSH_STATUS_INUSE	int
;	O
utmprec	struct(int,long)
.	O
offset	long
=	O
off	long
;	O
rushdb_lock	(int,long,long,int,int)->(int)
(	O
utmp_fd	int
,	O
sizeof	O
(	O
utmprec	struct(int,long)
)	O
,	O
0	int
,	O
SEEK_CUR	int
,	O
RUSH_LOCK_WRITE	int
)	O
;	O
rc	int
=	O
write	(int,*(void),long)->(long)
(	O
utmp_fd	int
,	O
&	O
utmprec	struct(int,long)
,	O
sizeof	O
(	O
utmprec	struct(int,long)
)	O
)	O
;	O
rushdb_unlock	(int,long,long,int)->(int)
(	O
utmp_fd	int
,	O
-	O
sizeof	O
(	O
utmprec	struct(int,long)
)	O
,	O
0	int
,	O
SEEK_CUR	int
)	O
;	O
if	O
(	O
rc	int
!=	O
sizeof	O
(	O
utmprec	struct(int,long)
)	O
)	O
return	O
1	int
;	O
return	O
0	int
;	O
}	O
void	O
rush_utmp_lock_all	(int)->(void)
(	O
int	O
type	enum(int,int,int,int)
)	O
{	O
rushdb_lock	(int,long,long,int,int)->(int)
(	O
utmp_fd	int
,	O
0	int
,	O
0	int
,	O
SEEK_SET	int
,	O
type	enum(int,int,int,int)
)	O
;	O
}	O
void	O
rush_utmp_unlock_all	()->(void)
(	O
)	O
{	O
rushdb_unlock	(int,long,long,int)->(int)
(	O
utmp_fd	int
,	O
0	int
,	O
0	int
,	O
SEEK_SET	int
)	O
;	O
}	O
