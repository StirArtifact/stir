CLASSID	long
EDMAPROC	O
edma_class_register	(*(void))->(long)
(	O
EDMA_REPO	*(void)
repo	*(void)
)	O
{	O
CLASSID	long
class_id	long
;	O
SClass	*(*(struct(char,char,char,char,char,long,long,array(char),char,char,long,array(char),long,long,long,struct(long,long,long,array(char),*(*`)),char,long,char,char,long,long,long,short,short,short,char,char,long,long)))
[	O
class_id	long
]	O
->	O
Status	char
=	O
CLASS_DEF	int
;	O
return	O
-	O
1	int
;	O
}	O
ESint32	long
EDMAPROC	O
edma_class_unregister	(long)->(long)
(	O
CLASSID	long
class_id	long
)	O
{	O
if	O
(	O
SClass	*(*(struct(char,char,char,char,char,long,long,array(char),char,char,long,array(char),long,long,long,struct(long,long,long,array(char),*(*`)),char,long,char,char,long,long,long,short,short,short,char,char,long,long)))
[	O
class_id	long
]	O
->	O
Status	char
<	O
CLASS_DEF	int
)	O
return	O
-	O
1	int
;	O
SClass	*(*(struct(char,char,char,char,char,long,long,array(char),char,char,long,array(char),long,long,long,struct(long,long,long,array(char),*(*`)),char,long,char,char,long,long,long,short,short,short,char,char,long,long)))
[	O
class_id	long
]	O
->	O
Status	char
=	O
CLASS_FREE	int
;	O
return	O
-	O
1	int
;	O
}	O
ESint32	long
EDMAPROC	O
edma_class_load_interface	(long)->(long)
(	O
CLASSID	long
class_id	long
)	O
{	O
if	O
(	O
SClass	*(*(struct(char,char,char,char,char,long,long,array(char),char,char,long,array(char),long,long,long,struct(long,long,long,array(char),*(*`)),char,long,char,char,long,long,long,short,short,short,char,char,long,long)))
[	O
class_id	long
]	O
->	O
Status	char
!=	O
CLASS_DEF	int
)	O
return	O
-	O
1	int
;	O
SClass	*(*(struct(char,char,char,char,char,long,long,array(char),char,char,long,array(char),long,long,long,struct(long,long,long,array(char),*(*`)),char,long,char,char,long,long,long,short,short,short,char,char,long,long)))
[	O
class_id	long
]	O
->	O
Status	char
=	O
CLASS_ILOADED	int
;	O
ProcMapTable	*(char)
[	O
class_id	long
]	O
=	O
CLASS_IMAPPED	int
;	O
return	O
-	O
1	int
;	O
}	O
ESint32	long
EDMAPROC	O
edma_class_unload_interface	(long)->(long)
(	O
CLASSID	long
class_id	long
)	O
{	O
SClass	*(*(struct(char,char,char,char,char,long,long,array(char),char,char,long,array(char),long,long,long,struct(long,long,long,array(char),*(*`)),char,long,char,char,long,long,long,short,short,short,char,char,long,long)))
[	O
class_id	long
]	O
->	O
Status	char
=	O
CLASS_DEF	int
;	O
ProcMapTable	*(char)
[	O
class_id	long
]	O
=	O
CLASS_DEF	int
;	O
return	O
-	O
1	int
;	O
}	O
ESint32	long
EDMAPROC	O
edma_class_load_implementation	(long)->(long)
(	O
CLASSID	long
class_id	long
)	O
{	O
ProcMapTable	*(char)
[	O
class_id	long
]	O
=	O
CLASS_LOADED	int
;	O
return	O
-	O
1	int
;	O
}	O
ESint32	long
EDMAPROC	O
edma_class_unload_implementation	(long)->(long)
(	O
CLASSID	long
class_id	long
)	O
{	O
return	O
-	O
1	int
;	O
}	O
ESint32	long
EDMAPROC	O
edma_class_set_int	(long,*(void))->(long)
(	O
CLASSID	long
class_id	long
,	O
EDMA_CLASS_INTERFACE	*(void)
class_int	*(void)
)	O
{	O
return	O
-	O
1	int
;	O
}	O
ESint32	long
EDMAPROC	O
edma_class_set_impl	(long,*(void))->(long)
(	O
CLASSID	long
class_id	long
,	O
EDMA_CLASS_IMPLEMENTATION	*(void)
class_int	*(void)
)	O
{	O
return	O
-	O
1	int
;	O
}	O
