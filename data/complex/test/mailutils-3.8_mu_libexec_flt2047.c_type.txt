char	O
flt2047_docstring	array(char)
[	O
]	O
=	O
N_	O
(	O
"decode/encode email message headers"	*(char)
)	O
;	O
static	O
char	O
flt2047_args_doc	array(char)
[	O
]	O
=	O
N_	O
(	O
"[text]"	*(char)
)	O
;	O
static	O
int	O
decode_mode	int
=	O
0	int
;	O
static	O
int	O
newline_option	int
=	O
0	int
;	O
static	O
const	O
char	O
*	O
charset	*(char)
=	O
"iso-8859-1"	*(char)
;	O
static	O
const	O
char	O
*	O
encoding	*(char)
=	O
"quoted-printable"	*(char)
;	O
static	O
void	O
set_encode_mode	(*(struct(int,*(*(char)),long,*(*(struct`)),int,*(char),*(void),int,*(char),*(char),*(*(char)),*(char),*(char),*(char),*(char),*(char),*((*`,*`)->(void)),*((*`,*`)->(void)),*((*`,*`)->(void)),int,int,*(struct),*(char),int,*(char),int,int,int,long,*(long))),*(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*`,*`,*`)->(void)),*(char))),*(char))->(void)
(	O
struct	O
mu_parseopt	struct(int,*(*(char)),long,*(*(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*`,*`,*`)->(void)),*(char)))),int,*(char),*(void),int,*(char),*(char),*(*(char)),*(char),*(char),*(char),*(char),*(char),*((*(struct(int,*(*`),long,*(*`),int,*(char),*(void),int,*(char),*(char),*(*`),*(char),*(char),*(char),*(char),*(char),*((*`,*`)->(void)),*((*`,*`)->(void)),*((*`,*`)->(void)),int,int,*(struct`),*(char),int,*(char),int,int,int,long,*(long))),*(struct))->(void)),*((*(struct(int,*(*`),long,*(*`),int,*(char),*(void),int,*(char),*(char),*(*`),*(char),*(char),*(char),*(char),*(char),*((*`,*`)->(void)),*((*`,*`)->(void)),*((*`,*`)->(void)),int,int,*(struct`),*(char),int,*(char),int,int,int,long,*(long))),*(struct))->(void)),*((*(struct(int,*(*`),long,*(*`),int,*(char),*(void),int,*(char),*(char),*(*`),*(char),*(char),*(char),*(char),*(char),*((*`,*`)->(void)),*((*`,*`)->(void)),*((*`,*`)->(void)),int,int,*(struct`),*(char),int,*(char),int,int,int,long,*(long))),*(struct))->(void)),int,int,*(struct),*(char),int,*(char),int,int,int,long,*(long))
*	O
po	*(struct(int,*(*(char)),long,*(*(struct(*`,int,*`,int,*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`))),int,*(char),*(void),int,*(char),*(char),*(*(char)),*(char),*(char),*(char),*(char),*(char)))
,	O
struct	O
mu_option	struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*(struct),*(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*`,*`,*`)->(void)),*(char))),*(char))->(void)),*(char))
*	O
opt	*(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*(struct`),*(struct`),*(char))->(void)),*(char)))
,	O
char	O
const	O
*	O
arg	*(char)
)	O
{	O
decode_mode	int
=	O
0	int
;	O
}	O
static	O
struct	O
mu_option	struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*(struct),*(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*`,*`,*`)->(void)),*(char))),*(char))->(void)),*(char))
flt2047_options	array(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*(struct(int,*`,long,*`,int,*`,*`,int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,*`,*`,int,*`,int,int,int,long,*`)),*(struct(*`,int,*`,int,*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`)),*(char))->(void)),*(char)))
[	O
]	O
=	O
{	O
{	O
"encode"	*(char)
,	O
'e'	O
,	O
NULL	O
,	O
MU_OPTION_DEFAULT	int
,	O
N_	O
(	O
"encode the input (default)"	*(char)
)	O
,	O
mu_c_string	int
,	O
NULL	O
,	O
set_encode_mode	(*(struct(int,*(*(char)),long,*(*(struct`)),int,*(char),*(void),int,*(char),*(char),*(*(char)),*(char),*(char),*(char),*(char),*(char),*((*`,*`)->(void)),*((*`,*`)->(void)),*((*`,*`)->(void)),int,int,*(struct),*(char),int,*(char),int,int,int,long,*(long))),*(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*`,*`,*`)->(void)),*(char))),*(char))->(void)
}	O
,	O
{	O
"decode"	*(char)
,	O
'd'	O
,	O
NULL	O
,	O
MU_OPTION_DEFAULT	int
,	O
N_	O
(	O
"decode the input"	*(char)
)	O
,	O
mu_c_bool	int
,	O
&	O
decode_mode	int
}	O
,	O
{	O
"newline"	*(char)
,	O
'n'	O
,	O
NULL	O
,	O
MU_OPTION_DEFAULT	int
,	O
N_	O
(	O
"print additional newline"	*(char)
)	O
,	O
mu_c_bool	int
,	O
&	O
newline_option	int
}	O
,	O
{	O
"charset"	*(char)
,	O
'c'	O
,	O
N_	O
(	O
"NAME"	*(char)
)	O
,	O
MU_OPTION_DEFAULT	int
,	O
N_	O
(	O
"set charset (default: iso-8859-1)"	*(char)
)	O
,	O
mu_c_string	int
,	O
&	O
charset	*(char)
}	O
,	O
{	O
"encoding"	*(char)
,	O
'E'	O
,	O
N_	O
(	O
"NAME"	*(char)
)	O
,	O
MU_OPTION_DEFAULT	int
,	O
N_	O
(	O
"set encoding (default: quoted-printable)"	*(char)
)	O
,	O
mu_c_string	int
,	O
&	O
encoding	*(char)
}	O
,	O
MU_OPTION_END	O
}	O
;	O
int	O
main	(int,*(*(char)))->(int)
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	*(*(char))
)	O
{	O
int	O
rc	int
;	O
char	O
*	O
p	*(char)
;	O
mu_action_getopt	(*(int),*(*(*(char))),*(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*`,*`,*`)->(void)),*(char))),*(char),*(char))->(void)
(	O
&	O
argc	long
,	O
&	O
argv	*(*(char))
,	O
flt2047_options	array(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*(struct(int,*`,long,*`,int,*`,*`,int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,*`,*`,int,*`,int,int,int,long,*`)),*(struct(*`,int,*`,int,*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`)),*(char))->(void)),*(char)))
,	O
flt2047_docstring	array(char)
,	O
flt2047_args_doc	array(char)
)	O
;	O
if	O
(	O
argc	long
)	O
{	O
char	O
*	O
p	*(char)
;	O
while	O
(	O
argc	long
--	O
)	O
{	O
const	O
char	O
*	O
text	*(char)
=	O
*	O
argv	*(*(char))
++	O
;	O
if	O
(	O
decode_mode	int
)	O
rc	int
=	O
mu_rfc2047_decode	(*(char),*(char),*(*(char)))->(int)
(	O
charset	*(char)
,	O
text	*(char)
,	O
&	O
p	*(char)
)	O
;	O
else	O
rc	int
=	O
mu_rfc2047_encode	(*(char),*(char),*(char),*(*(char)))->(int)
(	O
charset	*(char)
,	O
encoding	*(char)
,	O
text	*(char)
,	O
&	O
p	*(char)
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_error	(*(char))->(int)
(	O
"%s"	*(char)
,	O
mu_strerror	(int)->(*(char))
(	O
rc	int
)	O
)	O
;	O
return	O
1	int
;	O
}	O
mu_printf	(*(char))->(int)
(	O
"%s\n"	*(char)
,	O
p	*(char)
)	O
;	O
}	O
}	O
else	O
{	O
size_t	long
size	long
=	O
0	int
,	O
n	*(long)
;	O
char	O
*	O
buf	*(char)
=	O
NULL	O
;	O
while	O
(	O
(	O
rc	int
=	O
mu_stream_getline	(*(struct),*(*(char)),*(long),*(long))->(int)
(	O
mu_strin	*(struct)
,	O
&	O
buf	*(char)
,	O
&	O
size	long
,	O
&	O
n	*(long)
)	O
)	O
==	O
0	int
&&	O
n	*(long)
>	O
0	int
)	O
{	O
mu_rtrim_class	(*(char),int)->(long)
(	O
buf	*(char)
,	O
MU_CTYPE_SPACE	int
)	O
;	O
if	O
(	O
decode_mode	int
)	O
rc	int
=	O
mu_rfc2047_decode	(*(char),*(char),*(*(char)))->(int)
(	O
charset	*(char)
,	O
buf	*(char)
,	O
&	O
p	*(char)
)	O
;	O
else	O
rc	int
=	O
mu_rfc2047_encode	(*(char),*(char),*(char),*(*(char)))->(int)
(	O
charset	*(char)
,	O
encoding	*(char)
,	O
buf	*(char)
,	O
&	O
p	*(char)
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_error	(*(char))->(int)
(	O
"%s"	*(char)
,	O
mu_strerror	(int)->(*(char))
(	O
rc	int
)	O
)	O
;	O
return	O
1	int
;	O
}	O
mu_printf	(*(char))->(int)
(	O
"%s\n"	*(char)
,	O
p	*(char)
)	O
;	O
}	O
}	O
mu_stream_flush	(*(struct))->(int)
(	O
mu_strout	*(struct)
)	O
;	O
return	O
0	int
;	O
}	O
