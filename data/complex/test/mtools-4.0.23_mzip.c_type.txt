static	O
int	O
zip_cmd	(int,int,array(char),int,enum(int,int),*(void),long,*(void))->(int)
(	O
int	O
priv	int
,	O
int	O
fd	int
,	O
unsigned	O
char	O
cdb	array(char)
[	O
6	int
]	O
,	O
int	O
clen	int
,	O
scsi_io_mode_t	enum(int,int)
mode	int
,	O
void	O
*	O
data	*(char)
,	O
size_t	long
len	long
,	O
void	O
*	O
extra_data	*(void)
)	O
{	O
int	O
r	int
;	O
if	O
(	O
priv	int
)	O
reclaim_privs	()->(void)
(	O
)	O
;	O
r	int
=	O
scsi_cmd	(int,array(char),int,enum(int,int),*(void),long,*(void))->(int)
(	O
fd	int
,	O
cdb	array(char)
,	O
clen	int
,	O
mode	int
,	O
data	*(char)
,	O
len	long
,	O
extra_data	*(void)
)	O
;	O
if	O
(	O
priv	int
)	O
drop_privs	()->(void)
(	O
)	O
;	O
return	O
r	int
;	O
}	O
static	O
int	O
test_mounted	(*(char))->(int)
(	O
char	O
*	O
dev	*(struct(*(char),char,int,int,int,short,short,int,long,int,int,char,int,*(char),int,int,int,*(char)))
)	O
{	O
struct	O
mntent	struct(*(char),*(char),*(char),*(char),int,int)
*	O
mnt	*(struct(*(char),*(char),*(char),*(char),int,int))
;	O
struct	O
MT_STAT	O
st_dev	long
,	O
st_mnt	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
;	O
FILE	struct
*	O
mtab	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
;	O
if	O
(	O
MT_STAT	O
(	O
dev	*(struct(*(char),char,int,int,int,short,short,int,long,int,int,char,int,*(char),int,int,int,*(char)))
,	O
&	O
st_dev	long
)	O
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s: stat(%s) failed: %s.\n"	*(char)
,	O
progname	*(char)
,	O
dev	*(struct(*(char),char,int,int,int,short,short,int,long,int,int,char,int,*(char),int,int,int,*(char)))
,	O
strerror	(int)->(*(char))
(	O
errno	O
)	O
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
if	O
(	O
!	O
S_ISBLK	O
(	O
st_dev	long
.	O
st_mode	int
)	O
)	O
return	O
0	int
;	O
if	O
(	O
(	O
mtab	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
=	O
setmntent	(*(char),*(char))->(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))
(	O
_PATH_MOUNTED	*(char)
,	O
"r"	*(char)
)	O
)	O
==	O
NULL	O
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s: can't open %s.\n"	*(char)
,	O
progname	*(char)
,	O
_PATH_MOUNTED	*(char)
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
while	O
(	O
(	O
mnt	*(struct(*(char),*(char),*(char),*(char),int,int))
=	O
getmntent	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(*(struct(*(char),*(char),*(char),*(char),int,int)))
(	O
mtab	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
)	O
)	O
{	O
if	O
(	O
!	O
mnt	*(struct(*(char),*(char),*(char),*(char),int,int))
->	O
mnt_fsname	*(char)
||	O
!	O
strcmp	(*(char),*(char))->(int)
(	O
mnt	*(struct(*(char),*(char),*(char),*(char),int,int))
->	O
mnt_type	*(char)
,	O
MNTTYPE_SWAP	*(char)
)	O
||	O
!	O
strcmp	(*(char),*(char))->(int)
(	O
mnt	*(struct(*(char),*(char),*(char),*(char),int,int))
->	O
mnt_type	*(char)
,	O
MNTTYPE_NFS	*(char)
)	O
||	O
!	O
strcmp	(*(char),*(char))->(int)
(	O
mnt	*(struct(*(char),*(char),*(char),*(char),int,int))
->	O
mnt_type	*(char)
,	O
"proc"	*(char)
)	O
||	O
!	O
strcmp	(*(char),*(char))->(int)
(	O
mnt	*(struct(*(char),*(char),*(char),*(char),int,int))
->	O
mnt_type	*(char)
,	O
"smbfs"	*(char)
)	O
||	O
!	O
strcmp	(*(char),*(char))->(int)
(	O
mnt	*(struct(*(char),*(char),*(char),*(char),int,int))
->	O
mnt_type	*(char)
,	O
MNTTYPE_IGNORE	*(char)
)	O
)	O
continue	O
;	O
if	O
(	O
MT_STAT	O
(	O
mnt	*(struct(*(char),*(char),*(char),*(char),int,int))
->	O
mnt_fsname	*(char)
,	O
&	O
st_mnt	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
)	O
)	O
{	O
continue	O
;	O
}	O
if	O
(	O
S_ISBLK	O
(	O
st_mnt	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_mode	int
)	O
)	O
{	O
if	O
(	O
MAJOR	O
(	O
st_mnt	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_rdev	long
)	O
==	O
MAJOR	O
(	O
st_dev	long
.	O
st_rdev	long
)	O
&&	O
MINOR	O
(	O
st_mnt	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_rdev	long
)	O
>=	O
MINOR	O
(	O
st_dev	long
.	O
st_rdev	long
)	O
&&	O
MINOR	O
(	O
st_mnt	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_rdev	long
)	O
<=	O
MINOR	O
(	O
st_dev	long
.	O
st_rdev	long
)	O
+	O
15	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"Device %s%d is mounted on %s.\n"	*(char)
,	O
dev	*(struct(*(char),char,int,int,int,short,short,int,long,int,int,char,int,*(char),int,int,int,*(char)))
,	O
MINOR	O
(	O
st_mnt	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_rdev	long
)	O
-	O
MINOR	O
(	O
st_dev	long
.	O
st_rdev	long
)	O
,	O
mnt	*(struct(*(char),*(char),*(char),*(char),int,int))
->	O
mnt_dir	*(char)
)	O
;	O
endmntent	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
mtab	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
return	O
1	int
;	O
}	O
}	O
}	O
endmntent	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
mtab	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
return	O
0	int
;	O
}	O
static	O
void	O
usage	(int)->(void)
(	O
int	O
ret	int
)	O
NORETURN	O
;	O
static	O
void	O
usage	(int)->(void)
(	O
int	O
ret	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"Mtools version %s, dated %s\n"	*(char)
,	O
mversion	*(char)
,	O
mdate	*(char)
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"Usage: %s [-V] [-q] [-e] [-u] [-r|-w|-p|-x] [drive:]\n"	*(char)
"\t-q print status\n"	*(char)
"\t-e eject disk\n"	*(char)
"\t-f eject disk even when mounted\n"	*(char)
"\t-r write protected (read-only)\n"	*(char)
"\t-w not write-protected (read-write)\n"	*(char)
"\t-p password write protected\n"	*(char)
"\t-x password protected\n"	*(char)
"\t-u unprotect till disk ejecting\n"	*(char)
,	O
progname	*(char)
)	O
;	O
exit	(int)->(void)
(	O
ret	int
)	O
;	O
}	O
enum	O
mode_t	int
{	O
ZIP_RW	int
=	O
0	int
,	O
ZIP_RO	int
=	O
2	int
,	O
ZIP_RO_PW	int
=	O
3	int
,	O
ZIP_PW	int
=	O
5	int
,	O
ZIP_UNLOCK_TIL_EJECT	int
=	O
8	int
}	O
;	O
static	O
enum	O
mode_t	int
get_zip_status	(int,int,*(void))->(enum(int,int,int,int,int))
(	O
int	O
priv	int
,	O
int	O
fd	int
,	O
void	O
*	O
extra_data	*(void)
)	O
{	O
unsigned	O
char	O
status	int
[	O
128	int
]	O
;	O
unsigned	O
char	O
cdb	array(char)
[	O
6	int
]	O
=	O
{	O
0x06	int
,	O
0	int
,	O
0x02	int
,	O
0	int
,	O
sizeof	O
status	int
,	O
0	int
}	O
;	O
if	O
(	O
zip_cmd	(int,int,array(char),int,enum(int,int),*(void),long,*(void))->(int)
(	O
priv	int
,	O
fd	int
,	O
cdb	array(char)
,	O
6	int
,	O
SCSI_IO_READ	int
,	O
status	int
,	O
sizeof	O
status	int
,	O
extra_data	*(void)
)	O
==	O
-	O
1	int
)	O
{	O
perror	(*(char))->(void)
(	O
"status: "	*(char)
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
return	O
status	int
[	O
21	int
]	O
&	O
0xf	int
;	O
}	O
static	O
int	O
short_command	(int,int,int,int,int,*(char),*(void))->(int)
(	O
int	O
priv	int
,	O
int	O
fd	int
,	O
int	O
cmd1	int
,	O
int	O
cmd2	int
,	O
int	O
cmd3	int
,	O
const	O
char	O
*	O
data	*(char)
,	O
void	O
*	O
extra_data	*(void)
)	O
{	O
unsigned	O
char	O
cdb	array(char)
[	O
6	int
]	O
=	O
{	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
}	O
;	O
cdb	array(char)
[	O
0	int
]	O
=	O
cmd1	int
;	O
cdb	array(char)
[	O
1	int
]	O
=	O
cmd2	int
;	O
cdb	array(char)
[	O
4	int
]	O
=	O
cmd3	int
;	O
return	O
zip_cmd	(int,int,array(char),int,enum(int,int),*(void),long,*(void))->(int)
(	O
priv	int
,	O
fd	int
,	O
cdb	array(char)
,	O
6	int
,	O
SCSI_IO_WRITE	int
,	O
(	O
char	O
*	O
)	O
data	*(char)
,	O
data	*(char)
?	O
strlen	(*(char))->(long)
(	O
data	*(char)
)	O
:	O
0	int
,	O
extra_data	*(void)
)	O
;	O
}	O
static	O
int	O
iomega_command	(int,int,int,*(char),*(void))->(int)
(	O
int	O
priv	int
,	O
int	O
fd	int
,	O
int	O
mode	int
,	O
const	O
char	O
*	O
data	*(char)
,	O
void	O
*	O
extra_data	*(void)
)	O
{	O
return	O
short_command	(int,int,int,int,int,*(char),*(void))->(int)
(	O
priv	int
,	O
fd	int
,	O
SCSI_IOMEGA	int
,	O
mode	int
,	O
data	*(char)
?	O
strlen	(*(char))->(long)
(	O
data	*(char)
)	O
:	O
0	int
,	O
data	*(char)
,	O
extra_data	*(void)
)	O
;	O
}	O
static	O
int	O
door_command	(int,int,int,int,*(void))->(int)
(	O
int	O
priv	int
,	O
int	O
fd	int
,	O
int	O
cmd1	int
,	O
int	O
cmd2	int
,	O
void	O
*	O
extra_data	*(void)
)	O
{	O
return	O
short_command	(int,int,int,int,int,*(char),*(void))->(int)
(	O
priv	int
,	O
fd	int
,	O
cmd1	int
,	O
0	int
,	O
cmd2	int
,	O
0	int
,	O
extra_data	*(void)
)	O
;	O
}	O
void	O
mzip	(int,*(*(char)),int)->(void)
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	*(*(char))
,	O
int	O
type	enum(int,int,int,int)
UNUSEDP	O
)	O
NORETURN	O
;	O
void	O
mzip	(int,*(*(char)),int)->(void)
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	*(*(char))
,	O
int	O
type	enum(int,int,int,int)
UNUSEDP	O
)	O
{	O
void	O
*	O
extra_data	*(void)
=	O
NULL	O
;	O
int	O
c	int
;	O
char	O
drive	char
;	O
device_t	struct(*(char),char,int,int,int,short,short,int,long,int,int,char,int,*(char),int,int,int,*(char))
*	O
dev	*(struct(*(char),char,int,int,int,short,short,int,long,int,int,char,int,*(char),int,int,int,*(char)))
;	O
int	O
fd	int
=	O
-	O
1	int
;	O
char	O
name	*(char)
[	O
EXPAND_BUF	int
]	O
;	O
enum	O
{	O
ZIP_NIX	int
=	O
0	int
,	O
ZIP_STATUS	int
=	O
1	int
<<	O
0	int
,	O
ZIP_EJECT	int
=	O
1	int
<<	O
1	int
,	O
ZIP_MODE_CHANGE	int
=	O
1	int
<<	O
2	int
,	O
ZIP_FORCE	int
=	O
1	int
<<	O
3	int
}	O
request	*(struct(int,*(void),*(char),*(struct(int,*(void),*(char),*(struct`),long,long,int,char,char,array(char),char,array(char),int,int,int,int)),long,long,int,char,char,array(char),char,array(char),int,int,int,int))
=	O
ZIP_NIX	int
;	O
enum	O
mode_t	int
newMode	enum(int,int,int,int,int)
=	O
ZIP_RW	int
;	O
enum	O
mode_t	int
oldMode	enum(int,int,int,int,int)
=	O
ZIP_RW	int
;	O
if	O
(	O
helpFlag	(int,*(*(char)))->(int)
(	O
argc	int
,	O
argv	*(*(char))
)	O
)	O
usage	(int)->(void)
(	O
0	int
)	O
;	O
while	O
(	O
(	O
c	int
=	O
getopt	(int,*(*(char)),*(char))->(int)
(	O
argc	int
,	O
argv	*(*(char))
,	O
"i:efpqrwxuh"	*(char)
)	O
)	O
!=	O
EOF	O
)	O
{	O
switch	O
(	O
c	int
)	O
{	O
case	O
'i'	O
:	O
set_cmd_line_image	(*(char))->(void)
(	O
optarg	*(char)
)	O
;	O
break	O
;	O
case	O
'f'	O
:	O
if	O
(	O
get_real_uid	()->(int)
(	O
)	O
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"Only root can use force. Sorry.\n"	*(char)
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
request	*(struct(int,*(void),*(char),*(struct(int,*(void),*(char),*(struct`),long,long,int,char,char,array(char),char,array(char),int,int,int,int)),long,long,int,char,char,array(char),char,array(char),int,int,int,int))
|=	O
ZIP_FORCE	int
;	O
break	O
;	O
case	O
'e'	O
:	O
request	*(struct(int,*(void),*(char),*(struct(int,*(void),*(char),*(struct`),long,long,int,char,char,array(char),char,array(char),int,int,int,int)),long,long,int,char,char,array(char),char,array(char),int,int,int,int))
|=	O
ZIP_EJECT	int
;	O
break	O
;	O
case	O
'q'	O
:	O
request	*(struct(int,*(void),*(char),*(struct(int,*(void),*(char),*(struct`),long,long,int,char,char,array(char),char,array(char),int,int,int,int)),long,long,int,char,char,array(char),char,array(char),int,int,int,int))
|=	O
ZIP_STATUS	int
;	O
break	O
;	O
case	O
'p'	O
:	O
setMode	O
(	O
ZIP_RO_PW	int
)	O
;	O
case	O
'r'	O
:	O
setMode	O
(	O
ZIP_RO	int
)	O
;	O
case	O
'w'	O
:	O
setMode	O
(	O
ZIP_RW	int
)	O
;	O
case	O
'x'	O
:	O
setMode	O
(	O
ZIP_PW	int
)	O
;	O
case	O
'u'	O
:	O
setMode	O
(	O
ZIP_UNLOCK_TIL_EJECT	int
)	O
case	O
'h'	O
:	O
usage	(int)->(void)
(	O
0	int
)	O
;	O
default	O
:	O
usage	(int)->(void)
(	O
1	int
)	O
;	O
}	O
}	O
if	O
(	O
request	*(struct(int,*(void),*(char),*(struct(int,*(void),*(char),*(struct`),long,long,int,char,char,array(char),char,array(char),int,int,int,int)),long,long,int,char,char,array(char),char,array(char),int,int,int,int))
==	O
ZIP_NIX	int
)	O
request	*(struct(int,*(void),*(char),*(struct(int,*(void),*(char),*(struct`),long,long,int,char,char,array(char),char,array(char),int,int,int,int)),long,long,int,char,char,array(char),char,array(char),int,int,int,int))
=	O
ZIP_STATUS	int
;	O
if	O
(	O
argc	int
-	O
optind	int
>	O
1	int
||	O
(	O
argc	int
-	O
optind	int
==	O
1	int
&&	O
(	O
!	O
argv	*(*(char))
[	O
optind	int
]	O
[	O
0	int
]	O
||	O
argv	*(*(char))
[	O
optind	int
]	O
[	O
1	int
]	O
!=	O
':'	O
)	O
)	O
)	O
usage	(int)->(void)
(	O
1	int
)	O
;	O
drive	char
=	O
ch_toupper	(char)->(char)
(	O
argc	int
-	O
optind	int
==	O
1	int
?	O
argv	*(*(char))
[	O
argc	int
-	O
1	int
]	O
[	O
0	int
]	O
:	O
':'	O
)	O
;	O
for	O
(	O
dev	*(struct(*(char),char,int,int,int,short,short,int,long,int,int,char,int,*(char),int,int,int,*(char)))
=	O
devices	*(struct(*(char),char,int,int,int,short,short,int,long,int,int,char,int,*(char),int,int,int,*(char)))
;	O
dev	*(struct(*(char),char,int,int,int,short,short,int,long,int,int,char,int,*(char),int,int,int,*(char)))
->	O
name	*(char)
;	O
dev	*(struct(*(char),char,int,int,int,short,short,int,long,int,int,char,int,*(char),int,int,int,*(char)))
++	O
)	O
{	O
unsigned	O
char	O
cdb	array(char)
[	O
6	int
]	O
=	O
{	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
}	O
;	O
struct	O
{	O
char	O
type	enum(int,int,int,int)
,	O
type_modifier	char
,	O
scsi_version	char
,	O
data_format	char
,	O
length	int
,	O
reserved1	int
[	O
2	int
]	O
,	O
capabilities	char
,	O
vendor	array(char)
[	O
8	int
]	O
,	O
product	array(char)
[	O
16	int
]	O
,	O
revision	array(char)
[	O
4	int
]	O
,	O
vendor_specific	array(char)
[	O
20	int
]	O
,	O
reserved2	array(char)
[	O
40	int
]	O
;	O
}	O
inq_data	struct(char,char,char,char,char,array(char),char,array(char),array(char),array(char),array(char),array(char))
;	O
if	O
(	O
dev	*(struct(*(char),char,int,int,int,short,short,int,long,int,int,char,int,*(char),int,int,int,*(char)))
->	O
drive	char
!=	O
drive	char
)	O
continue	O
;	O
expand	(*(char),*(char))->(*(char))
(	O
dev	*(struct(*(char),char,int,int,int,short,short,int,long,int,int,char,int,*(char),int,int,int,*(char)))
->	O
name	*(char)
,	O
name	*(char)
)	O
;	O
if	O
(	O
(	O
request	*(struct(int,*(void),*(char),*(struct(int,*(void),*(char),*(struct`),long,long,int,char,char,array(char),char,array(char),int,int,int,int)),long,long,int,char,char,array(char),char,array(char),int,int,int,int))
&	O
(	O
ZIP_MODE_CHANGE	int
|	O
ZIP_EJECT	int
)	O
)	O
&&	O
!	O
(	O
request	*(struct(int,*(void),*(char),*(struct(int,*(void),*(char),*(struct`),long,long,int,char,char,array(char),char,array(char),int,int,int,int)),long,long,int,char,char,array(char),char,array(char),int,int,int,int))
&	O
ZIP_FORCE	int
)	O
&&	O
test_mounted	(*(char))->(int)
(	O
name	*(char)
)	O
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"Can\'t change status of/eject mounted device\n"	*(char)
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
precmd	*(char)
(	O
dev	*(struct(*(char),char,int,int,int,short,short,int,long,int,int,char,int,*(char),int,int,int,*(char)))
)	O
;	O
if	O
(	O
IS_PRIVILEGED	O
(	O
dev	*(struct(*(char),char,int,int,int,short,short,int,long,int,int,char,int,*(char),int,int,int,*(char)))
)	O
)	O
reclaim_privs	()->(void)
(	O
)	O
;	O
fd	int
=	O
scsi_open	(*(char),int,int,*(*(void)))->(int)
(	O
name	*(char)
,	O
O_RDONLY	int
|	O
O_NDELAY	O
,	O
0644	int
,	O
&	O
extra_data	*(void)
)	O
;	O
if	O
(	O
IS_PRIVILEGED	O
(	O
dev	*(struct(*(char),char,int,int,int,short,short,int,long,int,int,char,int,*(char),int,int,int,*(char)))
)	O
)	O
drop_privs	()->(void)
(	O
)	O
;	O
if	O
(	O
fd	int
==	O
-	O
1	int
)	O
continue	O
;	O
closeExec	(int)->(void)
(	O
fd	int
)	O
;	O
if	O
(	O
!	O
(	O
request	*(struct(int,*(void),*(char),*(struct(int,*(void),*(char),*(struct`),long,long,int,char,char,array(char),char,array(char),int,int,int,int)),long,long,int,char,char,array(char),char,array(char),int,int,int,int))
&	O
(	O
ZIP_MODE_CHANGE	int
|	O
ZIP_STATUS	int
)	O
)	O
)	O
break	O
;	O
cdb	array(char)
[	O
0	int
]	O
=	O
SCSI_INQUIRY	int
;	O
cdb	array(char)
[	O
4	int
]	O
=	O
sizeof	O
inq_data	struct(char,char,char,char,char,array(char),char,array(char),array(char),array(char),array(char),array(char))
;	O
if	O
(	O
zip_cmd	(int,int,array(char),int,enum(int,int),*(void),long,*(void))->(int)
(	O
IS_PRIVILEGED	O
(	O
dev	*(struct(*(char),char,int,int,int,short,short,int,long,int,int,char,int,*(char),int,int,int,*(char)))
)	O
,	O
fd	int
,	O
cdb	array(char)
,	O
6	int
,	O
SCSI_IO_READ	int
,	O
&	O
inq_data	struct(char,char,char,char,char,array(char),char,array(char),array(char),array(char),array(char),array(char))
,	O
sizeof	O
inq_data	struct(char,char,char,char,char,array(char),char,array(char),array(char),array(char),array(char),array(char))
,	O
extra_data	*(void)
)	O
!=	O
0	int
)	O
{	O
close	*((*(void))->(int))
(	O
fd	int
)	O
;	O
continue	O
;	O
}	O
if	O
(	O
strncasecmp	(*(char),*(char),long)->(int)
(	O
"IOMEGA  "	*(char)
,	O
inq_data	struct(char,char,char,char,char,array(char),char,array(char),array(char),array(char),array(char),array(char))
.	O
vendor	array(char)
,	O
sizeof	O
inq_data	struct(char,char,char,char,char,array(char),char,array(char),array(char),array(char),array(char),array(char))
.	O
vendor	array(char)
)	O
||	O
(	O
strncasecmp	(*(char),*(char),long)->(int)
(	O
"ZIP 100         "	*(char)
,	O
inq_data	struct(char,char,char,char,char,array(char),char,array(char),array(char),array(char),array(char),array(char))
.	O
product	array(char)
,	O
sizeof	O
inq_data	struct(char,char,char,char,char,array(char),char,array(char),array(char),array(char),array(char),array(char))
.	O
product	array(char)
)	O
&&	O
strncasecmp	(*(char),*(char),long)->(int)
(	O
"ZIP 100 PLUS    "	*(char)
,	O
inq_data	struct(char,char,char,char,char,array(char),char,array(char),array(char),array(char),array(char),array(char))
.	O
product	array(char)
,	O
sizeof	O
inq_data	struct(char,char,char,char,char,array(char),char,array(char),array(char),array(char),array(char),array(char))
.	O
product	array(char)
)	O
&&	O
strncasecmp	(*(char),*(char),long)->(int)
(	O
"ZIP 250         "	*(char)
,	O
inq_data	struct(char,char,char,char,char,array(char),char,array(char),array(char),array(char),array(char),array(char))
.	O
product	array(char)
,	O
sizeof	O
inq_data	struct(char,char,char,char,char,array(char),char,array(char),array(char),array(char),array(char),array(char))
.	O
product	array(char)
)	O
&&	O
strncasecmp	(*(char),*(char),long)->(int)
(	O
"ZIP 750         "	*(char)
,	O
inq_data	struct(char,char,char,char,char,array(char),char,array(char),array(char),array(char),array(char),array(char))
.	O
product	array(char)
,	O
sizeof	O
inq_data	struct(char,char,char,char,char,array(char),char,array(char),array(char),array(char),array(char),array(char))
.	O
product	array(char)
)	O
&&	O
strncasecmp	(*(char),*(char),long)->(int)
(	O
"JAZ 1GB         "	*(char)
,	O
inq_data	struct(char,char,char,char,char,array(char),char,array(char),array(char),array(char),array(char),array(char))
.	O
product	array(char)
,	O
sizeof	O
inq_data	struct(char,char,char,char,char,array(char),char,array(char),array(char),array(char),array(char),array(char))
.	O
product	array(char)
)	O
&&	O
strncasecmp	(*(char),*(char),long)->(int)
(	O
"JAZ 2GB         "	*(char)
,	O
inq_data	struct(char,char,char,char,char,array(char),char,array(char),array(char),array(char),array(char),array(char))
.	O
product	array(char)
,	O
sizeof	O
inq_data	struct(char,char,char,char,char,array(char),char,array(char),array(char),array(char),array(char),array(char))
.	O
product	array(char)
)	O
)	O
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"Skipping drive with vendor='"	*(char)
)	O
;	O
fwrite	(*(void),long,long,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(long)
(	O
inq_data	struct(char,char,char,char,char,array(char),char,array(char),array(char),array(char),array(char),array(char))
.	O
vendor	array(char)
,	O
1	int
,	O
sizeof	O
(	O
inq_data	struct(char,char,char,char,char,array(char),char,array(char),array(char),array(char),array(char),array(char))
.	O
vendor	array(char)
)	O
,	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"' product='"	*(char)
)	O
;	O
fwrite	(*(void),long,long,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(long)
(	O
inq_data	struct(char,char,char,char,char,array(char),char,array(char),array(char),array(char),array(char),array(char))
.	O
product	array(char)
,	O
1	int
,	O
sizeof	O
(	O
inq_data	struct(char,char,char,char,char,array(char),char,array(char),array(char),array(char),array(char),array(char))
.	O
product	array(char)
)	O
,	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"'\n"	*(char)
)	O
;	O
close	*((*(void))->(int))
(	O
fd	int
)	O
;	O
continue	O
;	O
}	O
break	O
;	O
}	O
if	O
(	O
dev	*(struct(*(char),char,int,int,int,short,short,int,long,int,int,char,int,*(char),int,int,int,*(char)))
->	O
drive	char
==	O
0	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s: drive '%c:' is not a Zip or Jaz drive\n"	*(char)
,	O
argv	*(*(char))
[	O
0	int
]	O
,	O
drive	char
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
if	O
(	O
request	*(struct(int,*(void),*(char),*(struct(int,*(void),*(char),*(struct`),long,long,int,char,char,array(char),char,array(char),int,int,int,int)),long,long,int,char,char,array(char),char,array(char),int,int,int,int))
&	O
(	O
ZIP_MODE_CHANGE	int
|	O
ZIP_STATUS	int
)	O
)	O
oldMode	enum(int,int,int,int,int)
=	O
get_zip_status	(int,int,*(void))->(enum(int,int,int,int,int))
(	O
IS_PRIVILEGED	O
(	O
dev	*(struct(*(char),char,int,int,int,short,short,int,long,int,int,char,int,*(char),int,int,int,*(char)))
)	O
,	O
fd	int
,	O
extra_data	*(void)
)	O
;	O
if	O
(	O
request	*(struct(int,*(void),*(char),*(struct(int,*(void),*(char),*(struct`),long,long,int,char,char,array(char),char,array(char),int,int,int,int)),long,long,int,char,char,array(char),char,array(char),int,int,int,int))
&	O
ZIP_MODE_CHANGE	int
)	O
{	O
if	O
(	O
newMode	enum(int,int,int,int,int)
==	O
ZIP_UNLOCK_TIL_EJECT	int
&&	O
(	O
oldMode	enum(int,int,int,int,int)
&	O
ZIP_UNLOCK_TIL_EJECT	int
)	O
)	O
request	*(struct(int,*(void),*(char),*(struct(int,*(void),*(char),*(struct`),long,long,int,char,char,array(char),char,array(char),int,int,int,int)),long,long,int,char,char,array(char),char,array(char),int,int,int,int))
&=	O
~	O
ZIP_MODE_CHANGE	int
;	O
if	O
(	O
!	O
(	O
newMode	enum(int,int,int,int,int)
&	O
0x01	int
)	O
&&	O
newMode	enum(int,int,int,int,int)
==	O
oldMode	enum(int,int,int,int,int)
)	O
request	*(struct(int,*(void),*(char),*(struct(int,*(void),*(char),*(struct`),long,long,int,char,char,array(char),char,array(char),int,int,int,int)),long,long,int,char,char,array(char),char,array(char),int,int,int,int))
&=	O
~	O
ZIP_MODE_CHANGE	int
;	O
}	O
if	O
(	O
request	*(struct(int,*(void),*(char),*(struct(int,*(void),*(char),*(struct`),long,long,int,char,char,array(char),char,array(char),int,int,int,int)),long,long,int,char,char,array(char),char,array(char),int,int,int,int))
&	O
ZIP_MODE_CHANGE	int
)	O
{	O
int	O
ret	int
;	O
enum	O
mode_t	int
unlockMode	enum(int,int,int,int,int)
,	O
unlockMask	enum(int,int,int,int,int)
;	O
const	O
char	O
*	O
passwd	struct(*(char),*(char),int,int,*(char),*(char),*(char))
;	O
char	O
dummy	array(char)
[	O
1	int
]	O
;	O
if	O
(	O
newMode	enum(int,int,int,int,int)
==	O
ZIP_UNLOCK_TIL_EJECT	int
)	O
{	O
unlockMode	enum(int,int,int,int,int)
=	O
newMode	enum(int,int,int,int,int)
|	O
oldMode	enum(int,int,int,int,int)
;	O
unlockMask	enum(int,int,int,int,int)
=	O
9	int
;	O
}	O
else	O
{	O
unlockMode	enum(int,int,int,int,int)
=	O
newMode	enum(int,int,int,int,int)
&	O
~	O
0x5	int
;	O
unlockMask	enum(int,int,int,int,int)
=	O
1	int
;	O
}	O
if	O
(	O
(	O
oldMode	enum(int,int,int,int,int)
&	O
unlockMask	enum(int,int,int,int,int)
)	O
==	O
1	int
)	O
{	O
char	O
*	O
s	*(char)
;	O
passwd	struct(*(char),*(char),int,int,*(char),*(char),*(char))
=	O
"APlaceForYourStuff"	*(char)
;	O
if	O
(	O
(	O
s	*(char)
=	O
strchr	(*(char),int)->(*(char))
(	O
passwd	struct(*(char),*(char),int,int,*(char),*(char),*(char))
,	O
'\n'	O
)	O
)	O
)	O
*	O
s	*(char)
=	O
'\0'	O
;	O
iomega_command	(int,int,int,*(char),*(void))->(int)
(	O
IS_PRIVILEGED	O
(	O
dev	*(struct(*(char),char,int,int,int,short,short,int,long,int,int,char,int,*(char),int,int,int,*(char)))
)	O
,	O
fd	int
,	O
unlockMode	enum(int,int,int,int,int)
,	O
passwd	struct(*(char),*(char),int,int,*(char),*(char),*(char))
,	O
extra_data	*(void)
)	O
;	O
}	O
if	O
(	O
(	O
get_zip_status	(int,int,*(void))->(enum(int,int,int,int,int))
(	O
IS_PRIVILEGED	O
(	O
dev	*(struct(*(char),char,int,int,int,short,short,int,long,int,int,char,int,*(char),int,int,int,*(char)))
)	O
,	O
fd	int
,	O
extra_data	*(void)
)	O
&	O
unlockMask	enum(int,int,int,int,int)
)	O
==	O
1	int
)	O
{	O
char	O
*	O
s	*(char)
;	O
passwd	struct(*(char),*(char),int,int,*(char),*(char),*(char))
=	O
getpass	(*(char))->(*(char))
(	O
"Password: "	*(char)
)	O
;	O
if	O
(	O
(	O
s	*(char)
=	O
strchr	(*(char),int)->(*(char))
(	O
passwd	struct(*(char),*(char),int,int,*(char),*(char),*(char))
,	O
'\n'	O
)	O
)	O
)	O
*	O
s	*(char)
=	O
'\0'	O
;	O
if	O
(	O
(	O
ret	int
=	O
iomega_command	(int,int,int,*(char),*(void))->(int)
(	O
IS_PRIVILEGED	O
(	O
dev	*(struct(*(char),char,int,int,int,short,short,int,long,int,int,char,int,*(char),int,int,int,*(char)))
)	O
,	O
fd	int
,	O
unlockMode	enum(int,int,int,int,int)
,	O
passwd	struct(*(char),*(char),int,int,*(char),*(char),*(char))
,	O
extra_data	*(void)
)	O
)	O
)	O
{	O
if	O
(	O
ret	int
==	O
-	O
1	int
)	O
perror	(*(char))->(void)
(	O
"passwd: "	*(char)
)	O
;	O
else	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"wrong password\n"	*(char)
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
if	O
(	O
(	O
get_zip_status	(int,int,*(void))->(enum(int,int,int,int,int))
(	O
IS_PRIVILEGED	O
(	O
dev	*(struct(*(char),char,int,int,int,short,short,int,long,int,int,char,int,*(char),int,int,int,*(char)))
)	O
,	O
fd	int
,	O
extra_data	*(void)
)	O
&	O
unlockMask	enum(int,int,int,int,int)
)	O
==	O
1	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"wrong password\n"	*(char)
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
}	O
if	O
(	O
newMode	enum(int,int,int,int,int)
&	O
0x1	int
)	O
{	O
char	O
first_try	array(char)
[	O
_PASSWORD_LEN	int
+	O
1	int
]	O
;	O
passwd	struct(*(char),*(char),int,int,*(char),*(char),*(char))
=	O
getpass	(*(char))->(*(char))
(	O
"Enter new password:"	*(char)
)	O
;	O
strncpy	(*(char),*(char),long)->(*(char))
(	O
first_try	array(char)
,	O
passwd	struct(*(char),*(char),int,int,*(char),*(char),*(char))
,	O
_PASSWORD_LEN	int
)	O
;	O
passwd	struct(*(char),*(char),int,int,*(char),*(char),*(char))
=	O
getpass	(*(char))->(*(char))
(	O
"Re-type new password:"	*(char)
)	O
;	O
if	O
(	O
strncmp	(*(char),*(char),long)->(int)
(	O
first_try	array(char)
,	O
passwd	struct(*(char),*(char),int,int,*(char),*(char),*(char))
,	O
_PASSWORD_LEN	int
)	O
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"You misspelled it. Password not set.\n"	*(char)
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
}	O
else	O
{	O
passwd	struct(*(char),*(char),int,int,*(char),*(char),*(char))
=	O
dummy	array(char)
;	O
dummy	array(char)
[	O
0	int
]	O
=	O
'\0'	O
;	O
}	O
if	O
(	O
newMode	enum(int,int,int,int,int)
==	O
ZIP_UNLOCK_TIL_EJECT	int
)	O
newMode	enum(int,int,int,int,int)
|=	O
oldMode	enum(int,int,int,int,int)
;	O
if	O
(	O
(	O
ret	int
=	O
iomega_command	(int,int,int,*(char),*(void))->(int)
(	O
IS_PRIVILEGED	O
(	O
dev	*(struct(*(char),char,int,int,int,short,short,int,long,int,int,char,int,*(char),int,int,int,*(char)))
)	O
,	O
fd	int
,	O
newMode	enum(int,int,int,int,int)
,	O
passwd	struct(*(char),*(char),int,int,*(char),*(char),*(char))
,	O
extra_data	*(void)
)	O
)	O
)	O
{	O
if	O
(	O
ret	int
==	O
-	O
1	int
)	O
perror	(*(char))->(void)
(	O
"set passwd: "	*(char)
)	O
;	O
else	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"password not changed\n"	*(char)
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
ioctl	(int,long)->(int)
(	O
fd	int
,	O
BLKRRPART	O
)	O
;	O
}	O
if	O
(	O
request	*(struct(int,*(void),*(char),*(struct(int,*(void),*(char),*(struct`),long,long,int,char,char,array(char),char,array(char),int,int,int,int)),long,long,int,char,char,array(char),char,array(char),int,int,int,int))
&	O
ZIP_STATUS	int
)	O
{	O
const	O
char	O
*	O
unlocked	*(char)
;	O
if	O
(	O
oldMode	enum(int,int,int,int,int)
&	O
8	int
)	O
unlocked	*(char)
=	O
" and unlocked until eject"	*(char)
;	O
else	O
unlocked	*(char)
=	O
""	*(char)
;	O
switch	O
(	O
oldMode	enum(int,int,int,int,int)
&	O
~	O
8	int
)	O
{	O
case	O
ZIP_RW	int
:	O
printf	(*(char))->(int)
(	O
"Drive '%c:' is not write-protected\n"	*(char)
,	O
drive	char
)	O
;	O
break	O
;	O
case	O
ZIP_RO	int
:	O
printf	(*(char))->(int)
(	O
"Drive '%c:' is write-protected%s\n"	*(char)
,	O
drive	char
,	O
unlocked	*(char)
)	O
;	O
break	O
;	O
case	O
ZIP_RO_PW	int
:	O
printf	(*(char))->(int)
(	O
"Drive '%c:' is password write-protected%s\n"	*(char)
,	O
drive	char
,	O
unlocked	*(char)
)	O
;	O
break	O
;	O
case	O
ZIP_PW	int
:	O
printf	(*(char))->(int)
(	O
"Drive '%c:' is password protected%s\n"	*(char)
,	O
drive	char
,	O
unlocked	*(char)
)	O
;	O
break	O
;	O
default	O
:	O
printf	(*(char))->(int)
(	O
"Unknown protection mode %d of drive '%c:'\n"	*(char)
,	O
oldMode	enum(int,int,int,int,int)
,	O
drive	char
)	O
;	O
break	O
;	O
}	O
}	O
if	O
(	O
request	*(struct(int,*(void),*(char),*(struct(int,*(void),*(char),*(struct`),long,long,int,char,char,array(char),char,array(char),int,int,int,int)),long,long,int,char,char,array(char),char,array(char),int,int,int,int))
&	O
ZIP_EJECT	int
)	O
{	O
if	O
(	O
request	*(struct(int,*(void),*(char),*(struct(int,*(void),*(char),*(struct`),long,long,int,char,char,array(char),char,array(char),int,int,int,int)),long,long,int,char,char,array(char),char,array(char),int,int,int,int))
&	O
ZIP_FORCE	int
)	O
if	O
(	O
door_command	(int,int,int,int,*(void))->(int)
(	O
IS_PRIVILEGED	O
(	O
dev	*(struct(*(char),char,int,int,int,short,short,int,long,int,int,char,int,*(char),int,int,int,*(char)))
)	O
,	O
fd	int
,	O
SCSI_ALLOW_MEDIUM_REMOVAL	int
,	O
0	int
,	O
extra_data	*(void)
)	O
<	O
0	int
)	O
{	O
perror	(*(char))->(void)
(	O
"door unlock: "	*(char)
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
if	O
(	O
door_command	(int,int,int,int,*(void))->(int)
(	O
IS_PRIVILEGED	O
(	O
dev	*(struct(*(char),char,int,int,int,short,short,int,long,int,int,char,int,*(char),int,int,int,*(char)))
)	O
,	O
fd	int
,	O
SCSI_START_STOP	int
,	O
1	int
,	O
extra_data	*(void)
)	O
<	O
0	int
)	O
{	O
perror	(*(char))->(void)
(	O
"stop motor: "	*(char)
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
if	O
(	O
door_command	(int,int,int,int,*(void))->(int)
(	O
IS_PRIVILEGED	O
(	O
dev	*(struct(*(char),char,int,int,int,short,short,int,long,int,int,char,int,*(char),int,int,int,*(char)))
)	O
,	O
fd	int
,	O
SCSI_START_STOP	int
,	O
2	int
,	O
extra_data	*(void)
)	O
<	O
0	int
)	O
{	O
perror	(*(char))->(void)
(	O
"eject: "	*(char)
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
if	O
(	O
door_command	(int,int,int,int,*(void))->(int)
(	O
IS_PRIVILEGED	O
(	O
dev	*(struct(*(char),char,int,int,int,short,short,int,long,int,int,char,int,*(char),int,int,int,*(char)))
)	O
,	O
fd	int
,	O
SCSI_START_STOP	int
,	O
2	int
,	O
extra_data	*(void)
)	O
<	O
0	int
)	O
{	O
perror	(*(char))->(void)
(	O
"second eject: "	*(char)
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
}	O
close	*((*(void))->(int))
(	O
fd	int
)	O
;	O
exit	(int)->(void)
(	O
0	int
)	O
;	O
}	O
