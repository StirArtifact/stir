static	O
size_t	long
hash_size	array(long)
[	O
]	O
=	O
{	O
37	int
,	O
101	int
,	O
229	int
,	O
487	int
,	O
1009	int
,	O
2039	int
,	O
4091	int
,	O
8191	int
,	O
16411	int
,	O
32797	int
,	O
65579	int
,	O
131129	int
,	O
262217	int
,	O
524369	int
,	O
1048661	int
}	O
;	O
static	O
int	O
max_rehash	int
=	O
sizeof	O
(	O
hash_size	array(long)
)	O
/	O
sizeof	O
(	O
hash_size	array(long)
[	O
0	int
]	O
)	O
;	O
grad_symbol_t	struct
*	O
alloc_sym	(*(char),int)->(*(struct(*(struct(*`,*`)),*(char))))
(	O
const	O
char	O
*	O
s	*(char)
,	O
unsigned	O
size	int
)	O
{	O
grad_symbol_t	struct
*	O
ptr	*(struct(*(struct(*(struct`),*(char))),*(char)))
;	O
ptr	*(struct(*(struct(*(struct`),*(char))),*(char)))
=	O
grad_emalloc	(long)->(*(void))
(	O
size	int
)	O
;	O
ptr	*(struct(*(struct(*(struct`),*(char))),*(char)))
->	O
name	*(char)
=	O
grad_estrdup	(*(char))->(*(char))
(	O
s	*(char)
)	O
;	O
return	O
ptr	*(struct(*(struct(*(struct`),*(char))),*(char)))
;	O
}	O
static	O
unsigned	O
int	O
hashval	(*(char),int)->(int)
(	O
const	O
unsigned	O
char	O
*	O
s	*(char)
,	O
unsigned	O
bias	int
)	O
{	O
unsigned	O
h	int
=	O
0	int
;	O
for	O
(	O
;	O
*	O
s	*(char)
;	O
s	*(char)
++	O
)	O
{	O
h	int
<<=	O
1	int
;	O
h	int
^=	O
*	O
s	*(char)
;	O
}	O
return	O
h	int
%	O
bias	int
;	O
}	O
static	O
void	O
_sym_add	(*(struct(int,int,int,*(*(struct`)),*(()->(int)))),int,*(struct(*(struct(*`,*`)),*(char))))->(void)
(	O
grad_symtab_t	struct(int,int,int,*(*(struct(*(struct`),*(char)))),*(()->(int)))
*	O
symtab	*(*(struct(int,int,int,*(*(struct`)),*(()->(int)))))
,	O
unsigned	O
h	int
,	O
grad_symbol_t	struct
*	O
sp	*(struct(*(struct(*(struct`),*(char))),*(char)))
)	O
{	O
sp	*(struct(*(struct(*(struct`),*(char))),*(char)))
->	O
next	*(struct(*(struct(*(struct`),*(char))),*(char)))
=	O
NULL	O
;	O
if	O
(	O
symtab	*(*(struct(int,int,int,*(*(struct`)),*(()->(int)))))
->	O
sym	*(*(struct(*(struct(*`,*`)),*(char))))
[	O
h	int
]	O
)	O
{	O
grad_symbol_t	struct
*	O
prev	*(struct(*(struct(*(struct`),*(char))),*(char)))
;	O
for	O
(	O
prev	*(struct(*(struct(*(struct`),*(char))),*(char)))
=	O
symtab	*(*(struct(int,int,int,*(*(struct`)),*(()->(int)))))
->	O
sym	*(*(struct(*(struct(*`,*`)),*(char))))
[	O
h	int
]	O
;	O
prev	*(struct(*(struct(*(struct`),*(char))),*(char)))
->	O
next	*(struct(*(struct(*(struct`),*(char))),*(char)))
;	O
prev	*(struct(*(struct(*(struct`),*(char))),*(char)))
=	O
prev	*(struct(*(struct(*(struct`),*(char))),*(char)))
->	O
next	*(struct(*(struct(*(struct`),*(char))),*(char)))
)	O
;	O
prev	*(struct(*(struct(*(struct`),*(char))),*(char)))
->	O
next	*(struct(*(struct(*(struct`),*(char))),*(char)))
=	O
sp	*(struct(*(struct(*(struct`),*(char))),*(char)))
;	O
}	O
else	O
symtab	*(*(struct(int,int,int,*(*(struct`)),*(()->(int)))))
->	O
sym	*(*(struct(*(struct(*`,*`)),*(char))))
[	O
h	int
]	O
=	O
sp	*(struct(*(struct(*(struct`),*(char))),*(char)))
;	O
}	O
grad_symtab_t	struct(int,int,int,*(*(struct(*(struct`),*(char)))),*(()->(int)))
*	O
grad_symtab_create	(int,*(()->(int)))->(*(struct(int,int,int,*(*(struct`)),*(()->(int)))))
(	O
unsigned	O
esize	int
,	O
int	O
(	O
*	O
elfree	*(()->(int))
)	O
(	O
)	O
)	O
{	O
grad_symtab_t	struct(int,int,int,*(*(struct(*(struct`),*(char)))),*(()->(int)))
*	O
symtab	*(*(struct(int,int,int,*(*(struct`)),*(()->(int)))))
;	O
symtab	*(*(struct(int,int,int,*(*(struct`)),*(()->(int)))))
=	O
grad_emalloc	(long)->(*(void))
(	O
sizeof	O
(	O
*	O
symtab	*(*(struct(int,int,int,*(*(struct`)),*(()->(int)))))
)	O
)	O
;	O
symtab	*(*(struct(int,int,int,*(*(struct`)),*(()->(int)))))
->	O
elsize	int
=	O
esize	int
;	O
symtab	*(*(struct(int,int,int,*(*(struct`)),*(()->(int)))))
->	O
elcnt	int
=	O
0	int
;	O
symtab	*(*(struct(int,int,int,*(*(struct`)),*(()->(int)))))
->	O
hash_num	int
=	O
-	O
1	int
;	O
symtab	*(*(struct(int,int,int,*(*(struct`)),*(()->(int)))))
->	O
elfree	*(()->(int))
=	O
elfree	*(()->(int))
;	O
symtab	*(*(struct(int,int,int,*(*(struct`)),*(()->(int)))))
->	O
sym	*(*(struct(*(struct(*`,*`)),*(char))))
=	O
NULL	O
;	O
return	O
symtab	*(*(struct(int,int,int,*(*(struct`)),*(()->(int)))))
;	O
}	O
int	O
grad_symtab_rehash	(*(struct(int,int,int,*(*(struct`)),*(()->(int)))))->(int)
(	O
grad_symtab_t	struct(int,int,int,*(*(struct(*(struct`),*(char)))),*(()->(int)))
*	O
symtab	*(*(struct(int,int,int,*(*(struct`)),*(()->(int)))))
)	O
{	O
grad_symbol_t	struct
*	O
*	O
old_table	*(*(struct(*(struct(*`,*`)),*(char))))
=	O
symtab	*(*(struct(int,int,int,*(*(struct`)),*(()->(int)))))
->	O
sym	*(*(struct(*(struct(*`,*`)),*(char))))
;	O
int	O
i	int
;	O
if	O
(	O
++	O
symtab	*(*(struct(int,int,int,*(*(struct`)),*(()->(int)))))
->	O
hash_num	int
>=	O
max_rehash	int
)	O
{	O
abort	()->(void)
(	O
)	O
;	O
}	O
symtab	*(*(struct(int,int,int,*(*(struct`)),*(()->(int)))))
->	O
sym	*(*(struct(*(struct(*`,*`)),*(char))))
=	O
grad_emalloc	(long)->(*(void))
(	O
hash_size	array(long)
[	O
symtab	*(*(struct(int,int,int,*(*(struct`)),*(()->(int)))))
->	O
hash_num	int
]	O
*	O
symtab	*(*(struct(int,int,int,*(*(struct`)),*(()->(int)))))
->	O
elsize	int
)	O
;	O
if	O
(	O
old_table	*(*(struct(*(struct(*`,*`)),*(char))))
)	O
{	O
size_t	long
old_size	long
=	O
hash_size	array(long)
[	O
symtab	*(*(struct(int,int,int,*(*(struct`)),*(()->(int)))))
->	O
hash_num	int
-	O
1	int
]	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
old_size	long
;	O
i	int
++	O
)	O
{	O
grad_symbol_t	struct
*	O
sym	*(*(struct(*(struct(*`,*`)),*(char))))
,	O
*	O
next	*(struct(*(struct(*(struct`),*(char))),*(char)))
;	O
sym	*(*(struct(*(struct(*`,*`)),*(char))))
=	O
old_table	*(*(struct(*(struct(*`,*`)),*(char))))
[	O
i	int
]	O
;	O
while	O
(	O
sym	*(*(struct(*(struct(*`,*`)),*(char))))
)	O
{	O
unsigned	O
int	O
h	int
;	O
next	*(struct(*(struct(*(struct`),*(char))),*(char)))
=	O
sym	*(*(struct(*(struct(*`,*`)),*(char))))
->	O
next	*(struct(*(struct(*(struct`),*(char))),*(char)))
;	O
h	int
=	O
hashval	(*(char),int)->(int)
(	O
(	O
unsigned	O
char	O
*	O
)	O
sym	*(*(struct(*(struct(*`,*`)),*(char))))
->	O
name	*(char)
,	O
hash_size	array(long)
[	O
symtab	*(*(struct(int,int,int,*(*(struct`)),*(()->(int)))))
->	O
hash_num	int
]	O
)	O
;	O
_sym_add	(*(struct(int,int,int,*(*(struct`)),*(()->(int)))),int,*(struct(*(struct(*`,*`)),*(char))))->(void)
(	O
symtab	*(*(struct(int,int,int,*(*(struct`)),*(()->(int)))))
,	O
h	int
,	O
sym	*(*(struct(*(struct(*`,*`)),*(char))))
)	O
;	O
sym	*(*(struct(*(struct(*`,*`)),*(char))))
=	O
next	*(struct(*(struct(*(struct`),*(char))),*(char)))
;	O
}	O
}	O
grad_free	(*(void))->(void)
(	O
old_table	*(*(struct(*(struct(*`,*`)),*(char))))
)	O
;	O
}	O
return	O
0	int
;	O
}	O
void	O
*	O
grad_sym_lookup_or_install	(*(struct(int,int,int,*(*(struct`)),*(()->(int)))),*(char),int)->(*(void))
(	O
grad_symtab_t	struct(int,int,int,*(*(struct(*(struct`),*(char)))),*(()->(int)))
*	O
symtab	*(*(struct(int,int,int,*(*(struct`)),*(()->(int)))))
,	O
const	O
char	O
*	O
name	*(char)
,	O
int	O
install	int
)	O
{	O
if	O
(	O
symtab	*(*(struct(int,int,int,*(*(struct`)),*(()->(int)))))
->	O
sym	*(*(struct(*(struct(*`,*`)),*(char))))
)	O
{	O
grad_symbol_t	struct
*	O
sp	*(struct(*(struct(*(struct`),*(char))),*(char)))
;	O
unsigned	O
h	int
;	O
h	int
=	O
hashval	(*(char),int)->(int)
(	O
(	O
unsigned	O
char	O
*	O
)	O
name	*(char)
,	O
hash_size	array(long)
[	O
symtab	*(*(struct(int,int,int,*(*(struct`)),*(()->(int)))))
->	O
hash_num	int
]	O
)	O
;	O
for	O
(	O
sp	*(struct(*(struct(*(struct`),*(char))),*(char)))
=	O
symtab	*(*(struct(int,int,int,*(*(struct`)),*(()->(int)))))
->	O
sym	*(*(struct(*(struct(*`,*`)),*(char))))
[	O
h	int
]	O
;	O
sp	*(struct(*(struct(*(struct`),*(char))),*(char)))
;	O
sp	*(struct(*(struct(*(struct`),*(char))),*(char)))
=	O
sp	*(struct(*(struct(*(struct`),*(char))),*(char)))
->	O
next	*(struct(*(struct(*(struct`),*(char))),*(char)))
)	O
{	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
sp	*(struct(*(struct(*(struct`),*(char))),*(char)))
->	O
name	*(char)
,	O
name	*(char)
)	O
==	O
0	int
)	O
return	O
sp	*(struct(*(struct(*(struct`),*(char))),*(char)))
;	O
}	O
}	O
if	O
(	O
install	int
)	O
return	O
grad_sym_install	(*(struct(int,int,int,*(*(struct`)),*(()->(int)))),*(char))->(*(void))
(	O
symtab	*(*(struct(int,int,int,*(*(struct`)),*(()->(int)))))
,	O
name	*(char)
)	O
;	O
return	O
NULL	O
;	O
}	O
void	O
*	O
grad_sym_install	(*(struct(int,int,int,*(*(struct`)),*(()->(int)))),*(char))->(*(void))
(	O
grad_symtab_t	struct(int,int,int,*(*(struct(*(struct`),*(char)))),*(()->(int)))
*	O
symtab	*(*(struct(int,int,int,*(*(struct`)),*(()->(int)))))
,	O
const	O
char	O
*	O
name	*(char)
)	O
{	O
grad_symbol_t	struct
*	O
sp	*(struct(*(struct(*(struct`),*(char))),*(char)))
;	O
unsigned	O
int	O
h	int
;	O
if	O
(	O
!	O
symtab	*(*(struct(int,int,int,*(*(struct`)),*(()->(int)))))
->	O
sym	*(*(struct(*(struct(*`,*`)),*(char))))
||	O
10	int
*	O
symtab	*(*(struct(int,int,int,*(*(struct`)),*(()->(int)))))
->	O
elcnt	int
/	O
hash_size	array(long)
[	O
symtab	*(*(struct(int,int,int,*(*(struct`)),*(()->(int)))))
->	O
hash_num	int
]	O
>	O
20	int
/	O
3	int
)	O
grad_symtab_rehash	(*(struct(int,int,int,*(*(struct`)),*(()->(int)))))->(int)
(	O
symtab	*(*(struct(int,int,int,*(*(struct`)),*(()->(int)))))
)	O
;	O
h	int
=	O
hashval	(*(char),int)->(int)
(	O
(	O
unsigned	O
char	O
*	O
)	O
name	*(char)
,	O
hash_size	array(long)
[	O
symtab	*(*(struct(int,int,int,*(*(struct`)),*(()->(int)))))
->	O
hash_num	int
]	O
)	O
;	O
sp	*(struct(*(struct(*(struct`),*(char))),*(char)))
=	O
alloc_sym	(*(char),int)->(*(struct(*(struct(*`,*`)),*(char))))
(	O
name	*(char)
,	O
symtab	*(*(struct(int,int,int,*(*(struct`)),*(()->(int)))))
->	O
elsize	int
)	O
;	O
_sym_add	(*(struct(int,int,int,*(*(struct`)),*(()->(int)))),int,*(struct(*(struct(*`,*`)),*(char))))->(void)
(	O
symtab	*(*(struct(int,int,int,*(*(struct`)),*(()->(int)))))
,	O
h	int
,	O
sp	*(struct(*(struct(*(struct`),*(char))),*(char)))
)	O
;	O
symtab	*(*(struct(int,int,int,*(*(struct`)),*(()->(int)))))
->	O
elcnt	int
++	O
;	O
return	O
sp	*(struct(*(struct(*(struct`),*(char))),*(char)))
;	O
}	O
void	O
*	O
grad_sym_lookup	(*(struct(int,int,int,*(*(struct`)),*(()->(int)))),*(char))->(*(void))
(	O
grad_symtab_t	struct(int,int,int,*(*(struct(*(struct`),*(char)))),*(()->(int)))
*	O
symtab	*(*(struct(int,int,int,*(*(struct`)),*(()->(int)))))
,	O
const	O
char	O
*	O
name	*(char)
)	O
{	O
return	O
grad_sym_lookup_or_install	(*(struct(int,int,int,*(*(struct`)),*(()->(int)))),*(char),int)->(*(void))
(	O
symtab	*(*(struct(int,int,int,*(*(struct`)),*(()->(int)))))
,	O
name	*(char)
,	O
0	int
)	O
;	O
}	O
void	O
*	O
grad_sym_next	(*(struct(*(struct(*`,*`)),*(char))))->(*(void))
(	O
grad_symbol_t	struct
*	O
sym	*(*(struct(*(struct(*`,*`)),*(char))))
)	O
{	O
char	O
*	O
name	*(char)
=	O
sym	*(*(struct(*(struct(*`,*`)),*(char))))
->	O
name	*(char)
;	O
for	O
(	O
sym	*(*(struct(*(struct(*`,*`)),*(char))))
=	O
sym	*(*(struct(*(struct(*`,*`)),*(char))))
->	O
next	*(struct(*(struct(*(struct`),*(char))),*(char)))
;	O
sym	*(*(struct(*(struct(*`,*`)),*(char))))
;	O
sym	*(*(struct(*(struct(*`,*`)),*(char))))
=	O
sym	*(*(struct(*(struct(*`,*`)),*(char))))
->	O
next	*(struct(*(struct(*(struct`),*(char))),*(char)))
)	O
{	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
sym	*(*(struct(*(struct(*`,*`)),*(char))))
->	O
name	*(char)
,	O
name	*(char)
)	O
==	O
0	int
)	O
return	O
sym	*(*(struct(*(struct(*`,*`)),*(char))))
;	O
}	O
return	O
NULL	O
;	O
}	O
int	O
grad_symtab_delete	(*(struct(int,int,int,*(*(struct`)),*(()->(int)))),*(struct(*(struct(*`,*`)),*(char))))->(int)
(	O
grad_symtab_t	struct(int,int,int,*(*(struct(*(struct`),*(char)))),*(()->(int)))
*	O
symtab	*(*(struct(int,int,int,*(*(struct`)),*(()->(int)))))
,	O
grad_symbol_t	struct
*	O
sym	*(*(struct(*(struct(*`,*`)),*(char))))
)	O
{	O
grad_symbol_t	struct
*	O
sp	*(struct(*(struct(*(struct`),*(char))),*(char)))
,	O
*	O
prev	*(struct(*(struct(*(struct`),*(char))),*(char)))
;	O
unsigned	O
h	int
;	O
if	O
(	O
!	O
symtab	*(*(struct(int,int,int,*(*(struct`)),*(()->(int)))))
->	O
sym	*(*(struct(*(struct(*`,*`)),*(char))))
)	O
return	O
1	int
;	O
h	int
=	O
hashval	(*(char),int)->(int)
(	O
(	O
unsigned	O
char	O
*	O
)	O
sym	*(*(struct(*(struct(*`,*`)),*(char))))
->	O
name	*(char)
,	O
hash_size	array(long)
[	O
symtab	*(*(struct(int,int,int,*(*(struct`)),*(()->(int)))))
->	O
hash_num	int
]	O
)	O
;	O
sp	*(struct(*(struct(*(struct`),*(char))),*(char)))
=	O
symtab	*(*(struct(int,int,int,*(*(struct`)),*(()->(int)))))
->	O
sym	*(*(struct(*(struct(*`,*`)),*(char))))
[	O
h	int
]	O
;	O
prev	*(struct(*(struct(*(struct`),*(char))),*(char)))
=	O
NULL	O
;	O
while	O
(	O
sp	*(struct(*(struct(*(struct`),*(char))),*(char)))
)	O
{	O
if	O
(	O
sp	*(struct(*(struct(*(struct`),*(char))),*(char)))
==	O
sym	*(*(struct(*(struct(*`,*`)),*(char))))
)	O
break	O
;	O
prev	*(struct(*(struct(*(struct`),*(char))),*(char)))
=	O
sp	*(struct(*(struct(*(struct`),*(char))),*(char)))
;	O
sp	*(struct(*(struct(*(struct`),*(char))),*(char)))
=	O
sp	*(struct(*(struct(*(struct`),*(char))),*(char)))
->	O
next	*(struct(*(struct(*(struct`),*(char))),*(char)))
;	O
}	O
if	O
(	O
!	O
sp	*(struct(*(struct(*(struct`),*(char))),*(char)))
)	O
return	O
-	O
1	int
;	O
if	O
(	O
prev	*(struct(*(struct(*(struct`),*(char))),*(char)))
)	O
prev	*(struct(*(struct(*(struct`),*(char))),*(char)))
->	O
next	*(struct(*(struct(*(struct`),*(char))),*(char)))
=	O
sp	*(struct(*(struct(*(struct`),*(char))),*(char)))
->	O
next	*(struct(*(struct(*(struct`),*(char))),*(char)))
;	O
else	O
symtab	*(*(struct(int,int,int,*(*(struct`)),*(()->(int)))))
->	O
sym	*(*(struct(*(struct(*`,*`)),*(char))))
[	O
h	int
]	O
=	O
sp	*(struct(*(struct(*(struct`),*(char))),*(char)))
->	O
next	*(struct(*(struct(*(struct`),*(char))),*(char)))
;	O
if	O
(	O
symtab	*(*(struct(int,int,int,*(*(struct`)),*(()->(int)))))
->	O
elfree	*(()->(int))
)	O
symtab	*(*(struct(int,int,int,*(*(struct`)),*(()->(int)))))
->	O
elfree	*(()->(int))
(	O
sp	*(struct(*(struct(*(struct`),*(char))),*(char)))
)	O
;	O
grad_sym_free	(*(struct(*(struct(*`,*`)),*(char))))->(void)
(	O
sp	*(struct(*(struct(*(struct`),*(char))),*(char)))
)	O
;	O
symtab	*(*(struct(int,int,int,*(*(struct`)),*(()->(int)))))
->	O
elcnt	int
--	O
;	O
return	O
0	int
;	O
}	O
void	O
grad_sym_free	(*(struct(*(struct(*`,*`)),*(char))))->(void)
(	O
grad_symbol_t	struct
*	O
sp	*(struct(*(struct(*(struct`),*(char))),*(char)))
)	O
{	O
grad_free	(*(void))->(void)
(	O
sp	*(struct(*(struct(*(struct`),*(char))),*(char)))
->	O
name	*(char)
)	O
;	O
grad_free	(*(void))->(void)
(	O
sp	*(struct(*(struct(*(struct`),*(char))),*(char)))
)	O
;	O
}	O
void	O
grad_symtab_clear	(*(struct(int,int,int,*(*(struct`)),*(()->(int)))))->(void)
(	O
grad_symtab_t	struct(int,int,int,*(*(struct(*(struct`),*(char)))),*(()->(int)))
*	O
symtab	*(*(struct(int,int,int,*(*(struct`)),*(()->(int)))))
)	O
{	O
int	O
i	int
;	O
grad_symbol_t	struct
*	O
sp	*(struct(*(struct(*(struct`),*(char))),*(char)))
,	O
*	O
next	*(struct(*(struct(*(struct`),*(char))),*(char)))
;	O
if	O
(	O
!	O
symtab	*(*(struct(int,int,int,*(*(struct`)),*(()->(int)))))
||	O
!	O
symtab	*(*(struct(int,int,int,*(*(struct`)),*(()->(int)))))
->	O
sym	*(*(struct(*(struct(*`,*`)),*(char))))
)	O
return	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
hash_size	array(long)
[	O
symtab	*(*(struct(int,int,int,*(*(struct`)),*(()->(int)))))
->	O
hash_num	int
]	O
;	O
i	int
++	O
)	O
{	O
for	O
(	O
sp	*(struct(*(struct(*(struct`),*(char))),*(char)))
=	O
symtab	*(*(struct(int,int,int,*(*(struct`)),*(()->(int)))))
->	O
sym	*(*(struct(*(struct(*`,*`)),*(char))))
[	O
i	int
]	O
;	O
sp	*(struct(*(struct(*(struct`),*(char))),*(char)))
;	O
sp	*(struct(*(struct(*(struct`),*(char))),*(char)))
=	O
next	*(struct(*(struct(*(struct`),*(char))),*(char)))
)	O
{	O
next	*(struct(*(struct(*(struct`),*(char))),*(char)))
=	O
sp	*(struct(*(struct(*(struct`),*(char))),*(char)))
->	O
next	*(struct(*(struct(*(struct`),*(char))),*(char)))
;	O
if	O
(	O
symtab	*(*(struct(int,int,int,*(*(struct`)),*(()->(int)))))
->	O
elfree	*(()->(int))
)	O
symtab	*(*(struct(int,int,int,*(*(struct`)),*(()->(int)))))
->	O
elfree	*(()->(int))
(	O
sp	*(struct(*(struct(*(struct`),*(char))),*(char)))
)	O
;	O
grad_sym_free	(*(struct(*(struct(*`,*`)),*(char))))->(void)
(	O
sp	*(struct(*(struct(*(struct`),*(char))),*(char)))
)	O
;	O
}	O
symtab	*(*(struct(int,int,int,*(*(struct`)),*(()->(int)))))
->	O
sym	*(*(struct(*(struct(*`,*`)),*(char))))
[	O
i	int
]	O
=	O
NULL	O
;	O
}	O
symtab	*(*(struct(int,int,int,*(*(struct`)),*(()->(int)))))
->	O
elcnt	int
=	O
0	int
;	O
}	O
void	O
grad_symtab_free	(*(*(struct(int,int,int,*(*`),*(()->(int))))))->(void)
(	O
grad_symtab_t	struct(int,int,int,*(*(struct(*(struct`),*(char)))),*(()->(int)))
*	O
*	O
symtab	*(*(struct(int,int,int,*(*(struct`)),*(()->(int)))))
)	O
{	O
if	O
(	O
!	O
symtab	*(*(struct(int,int,int,*(*(struct`)),*(()->(int)))))
||	O
!	O
*	O
symtab	*(*(struct(int,int,int,*(*(struct`)),*(()->(int)))))
)	O
return	O
;	O
grad_symtab_clear	(*(struct(int,int,int,*(*(struct`)),*(()->(int)))))->(void)
(	O
*	O
symtab	*(*(struct(int,int,int,*(*(struct`)),*(()->(int)))))
)	O
;	O
grad_free	(*(void))->(void)
(	O
(	O
*	O
symtab	*(*(struct(int,int,int,*(*(struct`)),*(()->(int)))))
)	O
->	O
sym	*(*(struct(*(struct(*`,*`)),*(char))))
)	O
;	O
grad_free	(*(void))->(void)
(	O
*	O
symtab	*(*(struct(int,int,int,*(*(struct`)),*(()->(int)))))
)	O
;	O
*	O
symtab	*(*(struct(int,int,int,*(*(struct`)),*(()->(int)))))
=	O
NULL	O
;	O
}	O
void	O
grad_symtab_iterate	(*(struct(int,int,int,*(*(struct`)),*(()->(int)))),*((*(void),*(struct(*`,*`)))->(int)),*(void))->(void)
(	O
grad_symtab_t	struct(int,int,int,*(*(struct(*(struct`),*(char)))),*(()->(int)))
*	O
symtab	*(*(struct(int,int,int,*(*(struct`)),*(()->(int)))))
,	O
int	O
(	O
*	O
fn	*((*(void),*(struct(*(struct`),*(char))))->(int))
)	O
(	O
void	O
*	O
,	O
grad_symbol_t	struct
*	O
)	O
,	O
void	O
*	O
closure	*(void)
)	O
{	O
int	O
i	int
;	O
grad_symbol_t	struct
*	O
sym	*(*(struct(*(struct(*`,*`)),*(char))))
,	O
*	O
next	*(struct(*(struct(*(struct`),*(char))),*(char)))
;	O
if	O
(	O
!	O
symtab	*(*(struct(int,int,int,*(*(struct`)),*(()->(int)))))
->	O
sym	*(*(struct(*(struct(*`,*`)),*(char))))
)	O
return	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
hash_size	array(long)
[	O
symtab	*(*(struct(int,int,int,*(*(struct`)),*(()->(int)))))
->	O
hash_num	int
]	O
;	O
i	int
++	O
)	O
{	O
sym	*(*(struct(*(struct(*`,*`)),*(char))))
=	O
symtab	*(*(struct(int,int,int,*(*(struct`)),*(()->(int)))))
->	O
sym	*(*(struct(*(struct(*`,*`)),*(char))))
[	O
i	int
]	O
;	O
while	O
(	O
sym	*(*(struct(*(struct(*`,*`)),*(char))))
)	O
{	O
next	*(struct(*(struct(*(struct`),*(char))),*(char)))
=	O
sym	*(*(struct(*(struct(*`,*`)),*(char))))
->	O
next	*(struct(*(struct(*(struct`),*(char))),*(char)))
;	O
if	O
(	O
(	O
*	O
fn	*((*(void),*(struct(*(struct`),*(char))))->(int))
)	O
(	O
closure	*(void)
,	O
sym	*(*(struct(*(struct(*`,*`)),*(char))))
)	O
)	O
return	O
;	O
sym	*(*(struct(*(struct(*`,*`)),*(char))))
=	O
next	*(struct(*(struct(*(struct`),*(char))),*(char)))
;	O
}	O
}	O
}	O
