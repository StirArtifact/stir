static	O
int	O
opts	int
=	O
1	int
;	O
int	O
minimal	int
=	O
0	int
;	O
int	O
binary	int
=	O
0	int
;	O
int	O
overwrite	int
=	O
0	int
;	O
char	O
buf	array(char)
[	O
4096	int
]	O
;	O
static	O
unsigned	O
int	O
cur_ver	int
=	O
0	int
;	O
static	O
int	O
usage	()->(int)
(	O
void	O
)	O
{	O
printf	(*(char))->(int)
(	O
"\nUsage: dwg2dxf [-v[N]] [--as rNNNN] [-m|--minimal] [-b|--binary] "	*(char)
"DWGFILES...\n"	*(char)
)	O
;	O
return	O
1	int
;	O
}	O
static	O
int	O
opt_version	()->(int)
(	O
void	O
)	O
{	O
printf	(*(char))->(int)
(	O
"dwg2dxf %s\n"	*(char)
,	O
PACKAGE_VERSION	*(char)
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
help	()->(int)
(	O
void	O
)	O
{	O
printf	(*(char))->(int)
(	O
"\nUsage: dwg2dxf [OPTION]... DWGFILES...\n"	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"Converts DWG files to DXF.\n"	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"Default DXFFILE: DWGFILE with .dxf extension in the current "	*(char)
"directory.\n"	*(char)
"Existing files are not overwritten, unless -y is given.\n"	*(char)
"\n"	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"  -v[0-9], --verbose [0-9]  verbosity\n"	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"  --as rNNNN                save as version\n"	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"           Valid versions:\n"	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"             r12, r14, r2000, r2004, r2007, r2010, r2013\n"	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"           Planned versions:\n"	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"             r9, r10, r11, r2018\n"	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"  -m, --minimal             only $ACADVER, HANDSEED and "	*(char)
"ENTITIES\n"	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"  -b, --binary              save as binary DXF\n"	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"  -y, --overwrite           overwrite existing files\n"	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"  -o outfile, --file        optional, only valid with one single "	*(char)
"DWGFILE\n"	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"      --help                display this help and exit\n"	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"      --version             output version information and exit\n"	*(char)
"\n"	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"GNU LibreDWG online manual: "	*(char)
"<https://www.gnu.org/software/libredwg/>\n"	*(char)
)	O
;	O
return	O
0	int
;	O
}	O
int	O
main	(int,array(*(char)))->(int)
(	O
int	O
argc	int
,	O
char	O
*	O
argv	array(*(char))
[	O
]	O
)	O
{	O
int	O
i	int
=	O
1	int
;	O
int	O
error	int
=	O
0	int
;	O
Dwg_Data	struct(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),array(char),char,char,array(short),int,char,char,short,char,char,char,int,int,int,int,int,int,*(struct(int,int,long,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),array(char),int,int,int,int,int)),struct(int,int,int,int,int),*(struct(long,int,int,int,int,int,int,array(char),*(*`)))),struct(array(char),int,int,int,int,int,int,int,int,long,long,int,int,int,int,int,int,long,int,int,int,int,array(char),int,int,int,int,int),struct(array(char),short,short,int,int,short,short,int,short,short,short,short,array(short),array(char),double,double,int,int,short,short,int,int,int,int,int,int,int,int,array(short)),struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,int,double),struct(int,int,double),struct(int,int,double),short,*(struct(*(char),*(char))),int,int),struct(*(char),long,long,char),struct(int,int,int,char,long,*(char),double,double,double,double,*(char),*(char),*(char),*(char),int,int,short,*(struct(*(struct`),struct(char,char,long),long)),char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,short,short,short,short,short,short,short,short,short,short,short,short,short,short,int,int,int,short,short,short,short,short,short,short,short,short,short,short,short,short,short,short,short,short,short,short,int,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,*(char),struct(int,int,double),struct(int,int,double),struct(int,int,double),struct(int,int,double),int,int,int,struct(int,int,double),struct(int,int,double),struct(short,short,int,*(struct(*`,struct`,long)),*(char),*(char),char,char),short,*(struct(*(struct`),struct(char,char,long),long)),*(struct(*(struct`),struct(char,char,long),long)),*(struct(*(struct`),struct(char,char,long),long)),*(struct(*(struct`),struct(char,char,long),long)),*(struct(*(struct`),struct(char,char,long),long)),*(struct(*(struct`),struct(char,char,long),long)),*(struct(*(struct`),struct(char,char,long),long)),double,struct(double,double,double),struct(double,double,double),struct(double,double,double),struct(double,double),struct(double,double),double,struct(double,double,double),struct(double,double,double),struct(double,double,double),*(struct(*(struct`),struct(char,char,long),long)),*(struct(*(struct`),struct(char,char,long),long)),*(struct(*(struct`),struct(char,char,long),long)),short,struct(double,double,double),struct(double,double,double),struct(double,double,double),struct(double,double,double),struct(double,double,double),struct(double,double,double),struct(double,double,double),struct(double,double,double),struct(double,double,double),struct(double,double),struct(double,double),struct(double,double),double,double,short,struct(double,double),struct(double,double),double,short,short,short,struct(double,double),struct(double,double,double),struct(double,double,double),struct(double,double,double),*(struct(*(struct`),struct(char,char,long),long)),*(struct(*(struct`),struct(char,char,long),long)),short,*(struct(*(struct`),struct(char,char,long),long)),struct(double,double,double),struct(double,double,double),struct(double,double,double),struct(double,double,double),struct(double,double,double),struct(double,double,double),*(char),*(char),char,char,char,char,char,char,char,char,char,char,char,short,short,char,char,short,short,short,char,short,short,short,short,short,short,short,short,short,short,*(struct(*(struct`),struct(char,char,long),long)),double,double,double,double,double,double,double,double,double,double,double,short,struct(short,short,int,*(struct(*`,struct`,long)),*(char),*(char),char,char),short,short,double,double,double,double,double,double,double,double,*(char),*(char),*(char),*(char),*(char),double,short,short,short,struct(short,short,int,*(struct(*`,struct`,long)),*(char),*(char),char,char),struct(short,short,int,*(struct(*`,struct`,long)),*(char),*(char),char,char),struct(short,short,int,*(struct(*`,struct`,long)),*(char),*(char),char,char),short,short,short,short,short,short,short,short,char,char,double,*(char),double,*(char),*(struct(*(struct`),struct(char,char,long),long)),*(struct(*(struct`),struct(char,char,long),long)),*(struct(*(struct`),struct(char,char,long),long)),*(struct(*(struct`),struct(char,char,long),long)),*(struct(*(struct`),struct(char,char,long),long)),*(struct(*(struct`),struct(char,char,long),long)),*(struct(*(struct`),struct(char,char,long),long)),short,short,*(struct(*(struct`),struct(char,char,long),long)),*(struct(*(struct`),struct(char,char,long),long)),*(struct(*(struct`),struct(char,char,long),long)),*(struct(*(struct`),struct(char,char,long),long)),*(struct(*(struct`),struct(char,char,long),long)),*(struct(*(struct`),struct(char,char,long),long)),*(struct(*(struct`),struct(char,char,long),long)),*(struct(*(struct`),struct(char,char,long),long)),*(struct(*(struct`),struct(char,char,long),long)),*(struct(*(struct`),struct(char,char,long),long)),*(struct(*(struct`),struct(char,char,long),long)),*(struct(*(struct`),struct(char,char,long),long)),*(struct(*(struct`),struct(char,char,long),long)),short,short,*(char),*(char),*(struct(*(struct`),struct(char,char,long),long)),*(struct(*(struct`),struct(char,char,long),long)),*(struct(*(struct`),struct(char,char,long),long)),*(struct(*(struct`),struct(char,char,long),long)),*(struct(*(struct`),struct(char,char,long),long)),*(struct(*(struct`),struct(char,char,long),long)),*(struct(*(struct`),struct(char,char,long),long)),*(struct(*(struct`),struct(char,char,long),long)),int,short,char,char,char,char,char,char,char,short,short,*(struct(*(struct`),struct(char,char,long),long)),*(char),*(char),char,char,char,char,char,char,short,short,char,char,*(char),*(struct(*(struct`),struct(char,char,long),long)),*(struct(*(struct`),struct(char,char,long),long)),*(struct(*(struct`),struct(char,char,long),long)),*(struct(*(struct`),struct(char,char,long),long)),*(struct(*(struct`),struct(char,char,long),long)),char,int,int,double,double,double,double,double,double,char,char,double,double,double,double,double,double,short,char,double,double,double,int,char,char,char,char,char,struct(short,short,int,*(struct(*`,struct`,long)),*(char),*(char),char,char),*(struct(*(struct`),struct(char,char,long),long)),*(struct(*(struct`),struct(char,char,long),long)),*(struct(*(struct`),struct(char,char,long),long)),char,double,short,short,short,short),short,*(struct(short,short,*(char),*(char),*(char),*(short),char,short,int,int,int,int,int)),int,*(struct(int,long,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(char),enum(int,int),union(*(struct`),*(struct`)),struct(char,char,long),*(struct(struct`,struct`,struct`,struct`,struct`,struct`,short,*`,int,*`,int,int,*`,*`,int,*`,*`,struct`,struct`,struct`,struct`,struct`,struct`,struct`,struct`,struct`,struct`,struct`,int,int)),int,long,long,char,int,long,long,long,*(char))),int,int,*(*(struct(*(struct`),struct(char,char,long),long))),*(struct),int,*(struct(int,long,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(char),enum(int,int),union(*(struct`),*(struct`)),struct(char,char,long),*(struct(struct`,struct`,struct`,struct`,struct`,struct`,short,*`,int,*`,int,int,*`,*`,int,*`,*`,struct`,struct`,struct`,struct`,struct`,struct`,struct`,struct`,struct`,struct`,struct`,int,int)),int,long,long,char,int,long,long,long,*(char))),*(struct(int,long,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(char),enum(int,int),union(*(struct`),*(struct`)),struct(char,char,long),*(struct(struct`,struct`,struct`,struct`,struct`,struct`,short,*`,int,*`,int,int,*`,*`,int,*`,*`,struct`,struct`,struct`,struct`,struct`,struct`,struct`,struct`,struct`,struct`,struct`,int,int)),int,long,long,char,int,long,long,long,*(char))),struct(*(struct(int,union(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`),*(struct`),int,*(struct`),*(struct`),int,*(*`),*(struct`),char,char,*(struct`))),short,*(*(struct(*`,struct`,long))),int,*(struct(*(struct`),struct(char,char,long),long)),*(struct(*(struct`),struct(char,char,long),long))),struct(*(struct(int,union(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`),*(struct`),int,*(struct`),*(struct`),int,*(*`),*(struct`),char,char,*(struct`))),short,*(*(struct(*`,struct`,long))),int),struct(*(struct(int,union(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`),*(struct`),int,*(struct`),*(struct`),int,*(*`),*(struct`),char,char,*(struct`))),short,*(*(struct(*`,struct`,long))),int),struct(*(struct(int,union(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`),*(struct`),int,*(struct`),*(struct`),int,*(*`),*(struct`),char,char,*(struct`))),short,*(*(struct(*`,struct`,long))),int,*(struct(*(struct`),struct(char,char,long),long)),*(struct(*(struct`),struct(char,char,long),long))),struct(*(struct(int,union(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`),*(struct`),int,*(struct`),*(struct`),int,*(*`),*(struct`),char,char,*(struct`))),short,*(*(struct(*`,struct`,long))),int),struct(*(struct(int,union(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`),*(struct`),int,*(struct`),*(struct`),int,*(*`),*(struct`),char,char,*(struct`))),short,*(*(struct(*`,struct`,long))),int),struct(*(struct(int,union(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`),*(struct`),int,*(struct`),*(struct`),int,*(*`),*(struct`),char,char,*(struct`))),short,*(*(struct(*`,struct`,long))),int),struct(*(struct(int,union(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`),*(struct`),int,*(struct`),*(struct`),int,*(*`),*(struct`),char,char,*(struct`))),short,*(*(struct(*`,struct`,long))),int),struct(*(struct(int,union(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`),*(struct`),int,*(struct`),*(struct`),int,*(*`),*(struct`),char,char,*(struct`))),short,*(*(struct(*`,struct`,long))),int,char,*(*(struct(*`,struct`,long)))),struct(*(struct(int,union(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`),*(struct`),int,*(struct`),*(struct`),int,*(*`),*(struct`),char,char,*(struct`))),short,*(*(struct(*`,struct`,long))),int),struct(int,int,array(char),array(char),char,array(char),char,array(struct(char,int,int)),short,array(struct(char,char,*(char))),int,int),int,int)
dwg	*(struct)
;	O
char	O
*	O
filename_in	*(char)
;	O
const	O
char	O
*	O
version	short
=	O
NULL	O
;	O
char	O
*	O
filename_out	*(char)
=	O
NULL	O
;	O
Dwg_Version_Type	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
dwg_version	int
=	O
R_2000	int
;	O
Bit_Chain	struct(*(char),long,long,char,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),char)
dat	*(struct(*(char),long,long,char,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),char))
=	O
{	O
0	int
}	O
;	O
int	O
do_free	int
;	O
int	O
need_free	int
=	O
0	int
;	O
int	O
c	int
;	O
int	O
option_index	int
=	O
0	int
;	O
static	O
struct	O
option	struct(*(char),int,*(int),int)
long_options	array(struct(*(char),int,*(int),int))
[	O
]	O
=	O
{	O
{	O
"verbose"	*(char)
,	O
1	int
,	O
&	O
opts	int
,	O
1	int
}	O
,	O
{	O
"file"	*(char)
,	O
1	int
,	O
0	int
,	O
'o'	O
}	O
,	O
{	O
"as"	*(char)
,	O
1	int
,	O
0	int
,	O
'a'	O
}	O
,	O
{	O
"minimal"	*(char)
,	O
0	int
,	O
0	int
,	O
'm'	O
}	O
,	O
{	O
"binary"	*(char)
,	O
0	int
,	O
0	int
,	O
'b'	O
}	O
,	O
{	O
"overwrite"	*(char)
,	O
0	int
,	O
0	int
,	O
'y'	O
}	O
,	O
{	O
"help"	*(char)
,	O
0	int
,	O
0	int
,	O
0	int
}	O
,	O
{	O
"version"	*(char)
,	O
0	int
,	O
0	int
,	O
0	int
}	O
,	O
{	O
NULL	O
,	O
0	int
,	O
NULL	O
,	O
0	int
}	O
}	O
;	O
if	O
(	O
argc	int
<	O
2	int
)	O
return	O
usage	()->(int)
(	O
)	O
;	O
while	O
(	O
(	O
c	int
=	O
getopt_long	(int,*(*(char)),*(char),*(struct(*(char),int,*(int),int)),*(int))->(int)
(	O
argc	int
,	O
argv	array(*(char))
,	O
"mbya:v::o:h"	*(char)
,	O
long_options	array(struct(*(char),int,*(int),int))
,	O
&	O
option_index	int
)	O
)	O
!=	O
-	O
1	int
)	O
{	O
if	O
(	O
c	int
==	O
-	O
1	int
)	O
break	O
;	O
switch	O
(	O
c	int
)	O
{	O
case	O
':'	O
:	O
if	O
(	O
optarg	*(char)
&&	O
!	O
strcmp	(*(char),*(char))->(int)
(	O
optarg	*(char)
,	O
"v"	*(char)
)	O
)	O
{	O
opts	int
=	O
1	int
;	O
break	O
;	O
}	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s: option '-%c' requires an argument\n"	*(char)
,	O
argv	array(*(char))
[	O
0	int
]	O
,	O
optopt	int
)	O
;	O
break	O
;	O
case	O
0	int
:	O
if	O
(	O
!	O
strcmp	(*(char),*(char))->(int)
(	O
long_options	array(struct(*(char),int,*(int),int))
[	O
option_index	int
]	O
.	O
name	*(char)
,	O
"verbose"	*(char)
)	O
)	O
{	O
if	O
(	O
opts	int
<	O
0	int
||	O
opts	int
>	O
9	int
)	O
return	O
usage	()->(int)
(	O
)	O
;	O
break	O
;	O
}	O
if	O
(	O
!	O
strcmp	(*(char),*(char))->(int)
(	O
long_options	array(struct(*(char),int,*(int),int))
[	O
option_index	int
]	O
.	O
name	*(char)
,	O
"version"	*(char)
)	O
)	O
return	O
opt_version	()->(int)
(	O
)	O
;	O
if	O
(	O
!	O
strcmp	(*(char),*(char))->(int)
(	O
long_options	array(struct(*(char),int,*(int),int))
[	O
option_index	int
]	O
.	O
name	*(char)
,	O
"help"	*(char)
)	O
)	O
return	O
help	()->(int)
(	O
)	O
;	O
break	O
;	O
case	O
'm'	O
:	O
minimal	int
=	O
1	int
;	O
break	O
;	O
case	O
'b'	O
:	O
binary	int
=	O
1	int
;	O
break	O
;	O
case	O
'y'	O
:	O
overwrite	int
=	O
1	int
;	O
break	O
;	O
case	O
'o'	O
:	O
filename_out	*(char)
=	O
optarg	*(char)
;	O
break	O
;	O
case	O
'a'	O
:	O
dwg_version	int
=	O
dwg_version_as	(*(char))->(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int))
(	O
optarg	*(char)
)	O
;	O
if	O
(	O
dwg_version	int
==	O
R_INVALID	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"Invalid version '%s'\n"	*(char)
,	O
argv	array(*(char))
[	O
1	int
]	O
)	O
;	O
return	O
usage	()->(int)
(	O
)	O
;	O
}	O
version	short
=	O
optarg	*(char)
;	O
break	O
;	O
case	O
'v'	O
:	O
i	int
=	O
(	O
optind	int
>	O
0	int
&&	O
optind	int
<	O
argc	int
)	O
?	O
optind	int
-	O
1	int
:	O
1	int
;	O
if	O
(	O
!	O
memcmp	(*(void),*(void),long)->(int)
(	O
argv	array(*(char))
[	O
i	int
]	O
,	O
"-v"	*(char)
,	O
2	int
)	O
)	O
{	O
opts	int
=	O
argv	array(*(char))
[	O
i	int
]	O
[	O
2	int
]	O
?	O
argv	array(*(char))
[	O
i	int
]	O
[	O
2	int
]	O
-	O
'0'	O
:	O
1	int
;	O
}	O
if	O
(	O
opts	int
<	O
0	int
||	O
opts	int
>	O
9	int
)	O
return	O
usage	()->(int)
(	O
)	O
;	O
break	O
;	O
case	O
'h'	O
:	O
return	O
help	()->(int)
(	O
)	O
;	O
case	O
'?'	O
:	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s: invalid option '-%c' ignored\n"	*(char)
,	O
argv	array(*(char))
[	O
0	int
]	O
,	O
optopt	int
)	O
;	O
break	O
;	O
default	O
:	O
return	O
usage	()->(int)
(	O
)	O
;	O
}	O
}	O
i	int
=	O
optind	int
;	O
if	O
(	O
filename_out	*(char)
&&	O
i	int
+	O
1	int
<	O
argc	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s: no -o with multiple input files\n"	*(char)
,	O
argv	array(*(char))
[	O
0	int
]	O
)	O
;	O
return	O
usage	()->(int)
(	O
)	O
;	O
}	O
do_free	int
=	O
i	int
+	O
1	int
<	O
argc	int
;	O
while	O
(	O
i	int
<	O
argc	int
)	O
{	O
filename_in	*(char)
=	O
argv	array(*(char))
[	O
i	int
]	O
;	O
i	int
++	O
;	O
if	O
(	O
!	O
filename_out	*(char)
)	O
{	O
need_free	int
=	O
1	int
;	O
filename_out	*(char)
=	O
suffix	(*(char),*(char))->(*(char))
(	O
filename_in	*(char)
,	O
"dxf"	*(char)
)	O
;	O
}	O
if	O
(	O
strEQ	O
(	O
filename_in	*(char)
,	O
filename_out	*(char)
)	O
)	O
{	O
if	O
(	O
need_free	int
)	O
free	(*(void))->(void)
(	O
filename_out	*(char)
)	O
;	O
return	O
usage	()->(int)
(	O
)	O
;	O
}	O
memset	(*(void),int,long)->(*(void))
(	O
&	O
dwg	*(struct)
,	O
0	int
,	O
sizeof	O
(	O
Dwg_Data	struct(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),array(char),char,char,array(short),int,char,char,short,char,char,char,int,int,int,int,int,int,*(struct(int,int,long,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),array(char),int,int,int,int,int)),struct(int,int,int,int,int),*(struct(long,int,int,int,int,int,int,array(char),*(*`)))),struct(array(char),int,int,int,int,int,int,int,int,long,long,int,int,int,int,int,int,long,int,int,int,int,array(char),int,int,int,int,int),struct(array(char),short,short,int,int,short,short,int,short,short,short,short,array(short),array(char),double,double,int,int,short,short,int,int,int,int,int,int,int,int,array(short)),struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,int,double),struct(int,int,double),struct(int,int,double),short,*(struct(*(char),*(char))),int,int),struct(*(char),long,long,char),struct(int,int,int,char,long,*(char),double,double,double,double,*(char),*(char),*(char),*(char),int,int,short,*(struct(*(struct`),struct(char,char,long),long)),char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,short,short,short,short,short,short,short,short,short,short,short,short,short,short,int,int,int,short,short,short,short,short,short,short,short,short,short,short,short,short,short,short,short,short,short,short,int,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,*(char),struct(int,int,double),struct(int,int,double),struct(int,int,double),struct(int,int,double),int,int,int,struct(int,int,double),struct(int,int,double),struct(short,short,int,*(struct(*`,struct`,long)),*(char),*(char),char,char),short,*(struct(*(struct`),struct(char,char,long),long)),*(struct(*(struct`),struct(char,char,long),long)),*(struct(*(struct`),struct(char,char,long),long)),*(struct(*(struct`),struct(char,char,long),long)),*(struct(*(struct`),struct(char,char,long),long)),*(struct(*(struct`),struct(char,char,long),long)),*(struct(*(struct`),struct(char,char,long),long)),double,struct(double,double,double),struct(double,double,double),struct(double,double,double),struct(double,double),struct(double,double),double,struct(double,double,double),struct(double,double,double),struct(double,double,double),*(struct(*(struct`),struct(char,char,long),long)),*(struct(*(struct`),struct(char,char,long),long)),*(struct(*(struct`),struct(char,char,long),long)),short,struct(double,double,double),struct(double,double,double),struct(double,double,double),struct(double,double,double),struct(double,double,double),struct(double,double,double),struct(double,double,double),struct(double,double,double),struct(double,double,double),struct(double,double),struct(double,double),struct(double,double),double,double,short,struct(double,double),struct(double,double),double,short,short,short,struct(double,double),struct(double,double,double),struct(double,double,double),struct(double,double,double),*(struct(*(struct`),struct(char,char,long),long)),*(struct(*(struct`),struct(char,char,long),long)),short,*(struct(*(struct`),struct(char,char,long),long)),struct(double,double,double),struct(double,double,double),struct(double,double,double),struct(double,double,double),struct(double,double,double),struct(double,double,double),*(char),*(char),char,char,char,char,char,char,char,char,char,char,char,short,short,char,char,short,short,short,char,short,short,short,short,short,short,short,short,short,short,*(struct(*(struct`),struct(char,char,long),long)),double,double,double,double,double,double,double,double,double,double,double,short,struct(short,short,int,*(struct(*`,struct`,long)),*(char),*(char),char,char),short,short,double,double,double,double,double,double,double,double,*(char),*(char),*(char),*(char),*(char),double,short,short,short,struct(short,short,int,*(struct(*`,struct`,long)),*(char),*(char),char,char),struct(short,short,int,*(struct(*`,struct`,long)),*(char),*(char),char,char),struct(short,short,int,*(struct(*`,struct`,long)),*(char),*(char),char,char),short,short,short,short,short,short,short,short,char,char,double,*(char),double,*(char),*(struct(*(struct`),struct(char,char,long),long)),*(struct(*(struct`),struct(char,char,long),long)),*(struct(*(struct`),struct(char,char,long),long)),*(struct(*(struct`),struct(char,char,long),long)),*(struct(*(struct`),struct(char,char,long),long)),*(struct(*(struct`),struct(char,char,long),long)),*(struct(*(struct`),struct(char,char,long),long)),short,short,*(struct(*(struct`),struct(char,char,long),long)),*(struct(*(struct`),struct(char,char,long),long)),*(struct(*(struct`),struct(char,char,long),long)),*(struct(*(struct`),struct(char,char,long),long)),*(struct(*(struct`),struct(char,char,long),long)),*(struct(*(struct`),struct(char,char,long),long)),*(struct(*(struct`),struct(char,char,long),long)),*(struct(*(struct`),struct(char,char,long),long)),*(struct(*(struct`),struct(char,char,long),long)),*(struct(*(struct`),struct(char,char,long),long)),*(struct(*(struct`),struct(char,char,long),long)),*(struct(*(struct`),struct(char,char,long),long)),*(struct(*(struct`),struct(char,char,long),long)),short,short,*(char),*(char),*(struct(*(struct`),struct(char,char,long),long)),*(struct(*(struct`),struct(char,char,long),long)),*(struct(*(struct`),struct(char,char,long),long)),*(struct(*(struct`),struct(char,char,long),long)),*(struct(*(struct`),struct(char,char,long),long)),*(struct(*(struct`),struct(char,char,long),long)),*(struct(*(struct`),struct(char,char,long),long)),*(struct(*(struct`),struct(char,char,long),long)),int,short,char,char,char,char,char,char,char,short,short,*(struct(*(struct`),struct(char,char,long),long)),*(char),*(char),char,char,char,char,char,char,short,short,char,char,*(char),*(struct(*(struct`),struct(char,char,long),long)),*(struct(*(struct`),struct(char,char,long),long)),*(struct(*(struct`),struct(char,char,long),long)),*(struct(*(struct`),struct(char,char,long),long)),*(struct(*(struct`),struct(char,char,long),long)),char,int,int,double,double,double,double,double,double,char,char,double,double,double,double,double,double,short,char,double,double,double,int,char,char,char,char,char,struct(short,short,int,*(struct(*`,struct`,long)),*(char),*(char),char,char),*(struct(*(struct`),struct(char,char,long),long)),*(struct(*(struct`),struct(char,char,long),long)),*(struct(*(struct`),struct(char,char,long),long)),char,double,short,short,short,short),short,*(struct(short,short,*(char),*(char),*(char),*(short),char,short,int,int,int,int,int)),int,*(struct(int,long,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(char),enum(int,int),union(*(struct`),*(struct`)),struct(char,char,long),*(struct(struct`,struct`,struct`,struct`,struct`,struct`,short,*`,int,*`,int,int,*`,*`,int,*`,*`,struct`,struct`,struct`,struct`,struct`,struct`,struct`,struct`,struct`,struct`,struct`,int,int)),int,long,long,char,int,long,long,long,*(char))),int,int,*(*(struct(*(struct`),struct(char,char,long),long))),*(struct),int,*(struct(int,long,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(char),enum(int,int),union(*(struct`),*(struct`)),struct(char,char,long),*(struct(struct`,struct`,struct`,struct`,struct`,struct`,short,*`,int,*`,int,int,*`,*`,int,*`,*`,struct`,struct`,struct`,struct`,struct`,struct`,struct`,struct`,struct`,struct`,struct`,int,int)),int,long,long,char,int,long,long,long,*(char))),*(struct(int,long,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(char),enum(int,int),union(*(struct`),*(struct`)),struct(char,char,long),*(struct(struct`,struct`,struct`,struct`,struct`,struct`,short,*`,int,*`,int,int,*`,*`,int,*`,*`,struct`,struct`,struct`,struct`,struct`,struct`,struct`,struct`,struct`,struct`,struct`,int,int)),int,long,long,char,int,long,long,long,*(char))),struct(*(struct(int,union(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`),*(struct`),int,*(struct`),*(struct`),int,*(*`),*(struct`),char,char,*(struct`))),short,*(*(struct(*`,struct`,long))),int,*(struct(*(struct`),struct(char,char,long),long)),*(struct(*(struct`),struct(char,char,long),long))),struct(*(struct(int,union(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`),*(struct`),int,*(struct`),*(struct`),int,*(*`),*(struct`),char,char,*(struct`))),short,*(*(struct(*`,struct`,long))),int),struct(*(struct(int,union(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`),*(struct`),int,*(struct`),*(struct`),int,*(*`),*(struct`),char,char,*(struct`))),short,*(*(struct(*`,struct`,long))),int),struct(*(struct(int,union(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`),*(struct`),int,*(struct`),*(struct`),int,*(*`),*(struct`),char,char,*(struct`))),short,*(*(struct(*`,struct`,long))),int,*(struct(*(struct`),struct(char,char,long),long)),*(struct(*(struct`),struct(char,char,long),long))),struct(*(struct(int,union(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`),*(struct`),int,*(struct`),*(struct`),int,*(*`),*(struct`),char,char,*(struct`))),short,*(*(struct(*`,struct`,long))),int),struct(*(struct(int,union(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`),*(struct`),int,*(struct`),*(struct`),int,*(*`),*(struct`),char,char,*(struct`))),short,*(*(struct(*`,struct`,long))),int),struct(*(struct(int,union(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`),*(struct`),int,*(struct`),*(struct`),int,*(*`),*(struct`),char,char,*(struct`))),short,*(*(struct(*`,struct`,long))),int),struct(*(struct(int,union(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`),*(struct`),int,*(struct`),*(struct`),int,*(*`),*(struct`),char,char,*(struct`))),short,*(*(struct(*`,struct`,long))),int),struct(*(struct(int,union(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`),*(struct`),int,*(struct`),*(struct`),int,*(*`),*(struct`),char,char,*(struct`))),short,*(*(struct(*`,struct`,long))),int,char,*(*(struct(*`,struct`,long)))),struct(*(struct(int,union(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`),*(struct`),int,*(struct`),*(struct`),int,*(*`),*(struct`),char,char,*(struct`))),short,*(*(struct(*`,struct`,long))),int),struct(int,int,array(char),array(char),char,array(char),char,array(struct(char,int,int)),short,array(struct(char,char,*(char))),int,int),int,int)
)	O
)	O
;	O
dwg	*(struct)
.	O
opts	int
=	O
opts	int
;	O
printf	(*(char))->(int)
(	O
"Reading DWG file %s\n"	*(char)
,	O
filename_in	*(char)
)	O
;	O
error	int
=	O
dwg_read_file	(*(char),*(struct(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),array(char),char,char,array(short),int,char,char,short,char,char,char,int,int,int,int,int,int,*(struct`),struct(int,int,int,int,int),*(struct`)),struct(array(char),int,int,int,int,int,int,int,int,long,long,int,int,int,int,int,int,long,int,int,int,int,array(char),int,int,int,int,int),struct(array(char),short,short,int,int,short,short,int,short,short,short,short,array(short),array(char),double,double,int,int,short,short,int,int,int,int,int,int,int,int,array(short)),struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,int,double),struct(int,int,double),struct(int,int,double),short,*(struct`),int,int),struct(*(char),long,long,char),struct(int,int,int,char,long,*(char),double,double,double,double,*(char),*(char),*(char),*(char),int,int,short,*(struct`),char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,short,short,short,short,short,short,short,short,short,short,short,short,short,short,int,int,int,short,short,short,short,short,short,short,short,short,short,short,short,short,short,short,short,short,short,short,int,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,*(char),struct(int,int,double),struct(int,int,double),struct(int,int,double),struct(int,int,double),int,int,int,struct(int,int,double),struct(int,int,double),struct(short,short,int,*`,*`,*`,char,char),short,*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),double,struct(double,double,double),struct(double,double,double),struct(double,double,double),struct(double,double),struct(double,double),double,struct(double,double,double),struct(double,double,double),struct(double,double,double),*(struct`),*(struct`),*(struct`),short,struct(double,double,double),struct(double,double,double),struct(double,double,double),struct(double,double,double),struct(double,double,double),struct(double,double,double),struct(double,double,double),struct(double,double,double),struct(double,double,double),struct(double,double),struct(double,double),struct(double,double),double,double,short,struct(double,double),struct(double,double),double,short,short,short,struct(double,double),struct(double,double,double),struct(double,double,double),struct(double,double,double),*(struct`),*(struct`),short,*(struct`),struct(double,double,double),struct(double,double,double),struct(double,double,double),struct(double,double,double),struct(double,double,double),struct(double,double,double),*(char),*(char),char,char,char,char,char,char,char,char,char,char,char,short,short,char,char,short,short,short,char,short,short,short,short,short,short,short,short,short,short,*(struct`),double,double,double,double,double,double,double,double,double,double,double,short,struct(short,short,int,*`,*`,*`,char,char),short,short,double,double,double,double,double,double,double,double,*(char),*(char),*(char),*(char),*(char),double,short,short,short,struct(short,short,int,*`,*`,*`,char,char),struct(short,short,int,*`,*`,*`,char,char),struct(short,short,int,*`,*`,*`,char,char),short,short,short,short,short,short,short,short,char,char,double,*(char),double,*(char),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),short,short,*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),short,short,*(char),*(char),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,short,char,char,char,char,char,char,char,short,short,*(struct`),*(char),*(char),char,char,char,char,char,char,short,short,char,char,*(char),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),char,int,int,double,double,double,double,double,double,char,char,double,double,double,double,double,double,short,char,double,double,double,int,char,char,char,char,char,struct(short,short,int,*`,*`,*`,char,char),*(struct`),*(struct`),*(struct`),char,double,short,short,short,short),short,*(struct(short,short,*`,*`,*`,*`,char,short,int,int,int,int,int)),int,*(struct(int,long,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,enum(int,int),union`,struct`,*`,int,long,long,char,int,long,long,long,*`)),int,int,*(*(struct`)),*(struct),int,*(struct(int,long,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,enum(int,int),union`,struct`,*`,int,long,long,char,int,long,long,long,*`)),*(struct(int,long,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,enum(int,int),union`,struct`,*`,int,long,long,char,int,long,long,long,*`)),struct(*(struct`),short,*(*`),int,*(struct`),*(struct`)),struct(*(struct`),short,*(*`),int),struct(*(struct`),short,*(*`),int),struct(*(struct`),short,*(*`),int,*(struct`),*(struct`)),struct(*(struct`),short,*(*`),int),struct(*(struct`),short,*(*`),int),struct(*(struct`),short,*(*`),int),struct(*(struct`),short,*(*`),int),struct(*(struct`),short,*(*`),int,char,*(*`)),struct(*(struct`),short,*(*`),int),struct(int,int,array(char),array(char),char,array(char),char,array(struct(char,int,int)),short,array(struct(char,char,*(char))),int,int),int,int)))->(int)
(	O
filename_in	*(char)
,	O
&	O
dwg	*(struct)
)	O
;	O
if	O
(	O
error	int
>=	O
DWG_ERR_CRITICAL	O
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"READ ERROR 0x%x\n"	*(char)
,	O
error	int
)	O
;	O
goto	O
final	O
;	O
}	O
printf	(*(char))->(int)
(	O
"Writing DXF file %s"	*(char)
,	O
filename_out	*(char)
)	O
;	O
if	O
(	O
version	short
)	O
{	O
printf	(*(char))->(int)
(	O
" as %s\n"	*(char)
,	O
version	short
)	O
;	O
if	O
(	O
dwg	*(struct)
.	O
header	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),array(char),char,char,array(short),int,char,char,short,char,char,char,int,int,int,int,int,int,*(struct(int,int,long,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),array(char),int,int,int,int,int)),struct(int,int,int,int,int),*(struct(long,int,int,int,int,int,int,array(char),*(*(struct`)))))
.	O
from_version	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
!=	O
dwg	*(struct)
.	O
header	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),array(char),char,char,array(short),int,char,char,short,char,char,char,int,int,int,int,int,int,*(struct(int,int,long,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),array(char),int,int,int,int,int)),struct(int,int,int,int,int),*(struct(long,int,int,int,int,int,int,array(char),*(*(struct`)))))
.	O
version	short
)	O
dwg	*(struct)
.	O
header	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),array(char),char,char,array(short),int,char,char,short,char,char,char,int,int,int,int,int,int,*(struct(int,int,long,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),array(char),int,int,int,int,int)),struct(int,int,int,int,int),*(struct(long,int,int,int,int,int,int,array(char),*(*(struct`)))))
.	O
from_version	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
=	O
dwg	*(struct)
.	O
header	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),array(char),char,char,array(short),int,char,char,short,char,char,char,int,int,int,int,int,int,*(struct(int,int,long,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),array(char),int,int,int,int,int)),struct(int,int,int,int,int),*(struct(long,int,int,int,int,int,int,array(char),*(*(struct`)))))
.	O
version	short
;	O
dwg	*(struct)
.	O
header	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),array(char),char,char,array(short),int,char,char,short,char,char,char,int,int,int,int,int,int,*(struct(int,int,long,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),array(char),int,int,int,int,int)),struct(int,int,int,int,int),*(struct(long,int,int,int,int,int,int,array(char),*(*(struct`)))))
.	O
version	short
=	O
dwg_version	int
;	O
}	O
else	O
{	O
printf	(*(char))->(int)
(	O
"\n"	*(char)
)	O
;	O
}	O
dat	*(struct(*(char),long,long,char,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),char))
.	O
version	short
=	O
dwg	*(struct)
.	O
header	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),array(char),char,char,array(short),int,char,char,short,char,char,char,int,int,int,int,int,int,*(struct(int,int,long,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),array(char),int,int,int,int,int)),struct(int,int,int,int,int),*(struct(long,int,int,int,int,int,int,array(char),*(*(struct`)))))
.	O
version	short
;	O
dat	*(struct(*(char),long,long,char,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),char))
.	O
from_version	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
=	O
dwg	*(struct)
.	O
header	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),array(char),char,char,array(short),int,char,char,short,char,char,char,int,int,int,int,int,int,*(struct(int,int,long,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),array(char),int,int,int,int,int)),struct(int,int,int,int,int),*(struct(long,int,int,int,int,int,int,array(char),*(*(struct`)))))
.	O
from_version	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
;	O
if	O
(	O
minimal	int
)	O
dwg	*(struct)
.	O
opts	int
|=	O
0x10	int
;	O
{	O
struct	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
attrib	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
;	O
if	O
(	O
!	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
(	O
filename_out	*(char)
,	O
&	O
attrib	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
)	O
)	O
{	O
if	O
(	O
!	O
overwrite	int
)	O
{	O
LOG_ERROR	O
(	O
"File not overwritten: %s, use -y.\n"	*(char)
,	O
filename_out	*(char)
)	O
;	O
error	int
|=	O
DWG_ERR_IOERROR	int
;	O
}	O
else	O
{	O
if	O
(	O
S_ISREG	O
(	O
attrib	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_mode	int
)	O
&&	O
(	O
access	(*(char),int)->(int)
(	O
filename_out	*(char)
,	O
W_OK	int
)	O
==	O
0	int
)	O
&&	O
!	O
S_ISLNK	O
(	O
attrib	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_mode	int
)	O
)	O
{	O
unlink	(*(char))->(int)
(	O
filename_out	*(char)
)	O
;	O
dat	*(struct(*(char),long,long,char,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),char))
.	O
fh	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
=	O
fopen	(*(char),*(char))->(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))
(	O
filename_out	*(char)
,	O
"wb"	*(char)
)	O
;	O
}	O
else	O
if	O
(	O
strEQc	O
(	O
filename_out	*(char)
,	O
"/dev/null"	*(char)
)	O
)	O
{	O
dat	*(struct(*(char),long,long,char,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),char))
.	O
fh	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
=	O
fopen	(*(char),*(char))->(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))
(	O
filename_out	*(char)
,	O
"wb"	*(char)
)	O
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"Not writable file or symlink: %s\n"	*(char)
,	O
filename_out	*(char)
)	O
;	O
error	int
|=	O
DWG_ERR_IOERROR	int
;	O
}	O
}	O
}	O
else	O
dat	*(struct(*(char),long,long,char,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),char))
.	O
fh	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
=	O
fopen	(*(char),*(char))->(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))
(	O
filename_out	*(char)
,	O
"wb"	*(char)
)	O
;	O
}	O
if	O
(	O
!	O
dat	*(struct(*(char),long,long,char,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),char))
.	O
fh	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"WRITE ERROR %s\n"	*(char)
,	O
filename_out	*(char)
)	O
;	O
error	int
=	O
DWG_ERR_IOERROR	int
;	O
}	O
else	O
{	O
error	int
=	O
binary	int
?	O
dwg_write_dxfb	(*(struct(*(char),long,long,char,*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),char)),*(struct(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),array(char),char,char,array(short),int,char,char,short,char,char,char,int,int,int,int,int,int,*(struct`),struct(int,int,int,int,int),*(struct`)),struct(array(char),int,int,int,int,int,int,int,int,long,long,int,int,int,int,int,int,long,int,int,int,int,array(char),int,int,int,int,int),struct(array(char),short,short,int,int,short,short,int,short,short,short,short,array(short),array(char),double,double,int,int,short,short,int,int,int,int,int,int,int,int,array(short)),struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,int,double),struct(int,int,double),struct(int,int,double),short,*(struct`),int,int),struct(*(char),long,long,char),struct(int,int,int,char,long,*(char),double,double,double,double,*(char),*(char),*(char),*(char),int,int,short,*(struct`),char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,short,short,short,short,short,short,short,short,short,short,short,short,short,short,int,int,int,short,short,short,short,short,short,short,short,short,short,short,short,short,short,short,short,short,short,short,int,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,*(char),struct(int,int,double),struct(int,int,double),struct(int,int,double),struct(int,int,double),int,int,int,struct(int,int,double),struct(int,int,double),struct(short,short,int,*`,*`,*`,char,char),short,*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),double,struct(double,double,double),struct(double,double,double),struct(double,double,double),struct(double,double),struct(double,double),double,struct(double,double,double),struct(double,double,double),struct(double,double,double),*(struct`),*(struct`),*(struct`),short,struct(double,double,double),struct(double,double,double),struct(double,double,double),struct(double,double,double),struct(double,double,double),struct(double,double,double),struct(double,double,double),struct(double,double,double),struct(double,double,double),struct(double,double),struct(double,double),struct(double,double),double,double,short,struct(double,double),struct(double,double),double,short,short,short,struct(double,double),struct(double,double,double),struct(double,double,double),struct(double,double,double),*(struct`),*(struct`),short,*(struct`),struct(double,double,double),struct(double,double,double),struct(double,double,double),struct(double,double,double),struct(double,double,double),struct(double,double,double),*(char),*(char),char,char,char,char,char,char,char,char,char,char,char,short,short,char,char,short,short,short,char,short,short,short,short,short,short,short,short,short,short,*(struct`),double,double,double,double,double,double,double,double,double,double,double,short,struct(short,short,int,*`,*`,*`,char,char),short,short,double,double,double,double,double,double,double,double,*(char),*(char),*(char),*(char),*(char),double,short,short,short,struct(short,short,int,*`,*`,*`,char,char),struct(short,short,int,*`,*`,*`,char,char),struct(short,short,int,*`,*`,*`,char,char),short,short,short,short,short,short,short,short,char,char,double,*(char),double,*(char),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),short,short,*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),short,short,*(char),*(char),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,short,char,char,char,char,char,char,char,short,short,*(struct`),*(char),*(char),char,char,char,char,char,char,short,short,char,char,*(char),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),char,int,int,double,double,double,double,double,double,char,char,double,double,double,double,double,double,short,char,double,double,double,int,char,char,char,char,char,struct(short,short,int,*`,*`,*`,char,char),*(struct`),*(struct`),*(struct`),char,double,short,short,short,short),short,*(struct(short,short,*`,*`,*`,*`,char,short,int,int,int,int,int)),int,*(struct(int,long,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,enum(int,int),union`,struct`,*`,int,long,long,char,int,long,long,long,*`)),int,int,*(*(struct`)),*(struct),int,*(struct(int,long,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,enum(int,int),union`,struct`,*`,int,long,long,char,int,long,long,long,*`)),*(struct(int,long,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,enum(int,int),union`,struct`,*`,int,long,long,char,int,long,long,long,*`)),struct(*(struct`),short,*(*`),int,*(struct`),*(struct`)),struct(*(struct`),short,*(*`),int),struct(*(struct`),short,*(*`),int),struct(*(struct`),short,*(*`),int,*(struct`),*(struct`)),struct(*(struct`),short,*(*`),int),struct(*(struct`),short,*(*`),int),struct(*(struct`),short,*(*`),int),struct(*(struct`),short,*(*`),int),struct(*(struct`),short,*(*`),int,char,*(*`)),struct(*(struct`),short,*(*`),int),struct(int,int,array(char),array(char),char,array(char),char,array(struct(char,int,int)),short,array(struct(char,char,*(char))),int,int),int,int)))->(int)
(	O
&	O
dat	*(struct(*(char),long,long,char,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),char))
,	O
&	O
dwg	*(struct)
)	O
:	O
dwg_write_dxf	(*(struct(*(char),long,long,char,*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),char)),*(struct(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),array(char),char,char,array(short),int,char,char,short,char,char,char,int,int,int,int,int,int,*(struct`),struct(int,int,int,int,int),*(struct`)),struct(array(char),int,int,int,int,int,int,int,int,long,long,int,int,int,int,int,int,long,int,int,int,int,array(char),int,int,int,int,int),struct(array(char),short,short,int,int,short,short,int,short,short,short,short,array(short),array(char),double,double,int,int,short,short,int,int,int,int,int,int,int,int,array(short)),struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,int,double),struct(int,int,double),struct(int,int,double),short,*(struct`),int,int),struct(*(char),long,long,char),struct(int,int,int,char,long,*(char),double,double,double,double,*(char),*(char),*(char),*(char),int,int,short,*(struct`),char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,short,short,short,short,short,short,short,short,short,short,short,short,short,short,int,int,int,short,short,short,short,short,short,short,short,short,short,short,short,short,short,short,short,short,short,short,int,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,*(char),struct(int,int,double),struct(int,int,double),struct(int,int,double),struct(int,int,double),int,int,int,struct(int,int,double),struct(int,int,double),struct(short,short,int,*`,*`,*`,char,char),short,*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),double,struct(double,double,double),struct(double,double,double),struct(double,double,double),struct(double,double),struct(double,double),double,struct(double,double,double),struct(double,double,double),struct(double,double,double),*(struct`),*(struct`),*(struct`),short,struct(double,double,double),struct(double,double,double),struct(double,double,double),struct(double,double,double),struct(double,double,double),struct(double,double,double),struct(double,double,double),struct(double,double,double),struct(double,double,double),struct(double,double),struct(double,double),struct(double,double),double,double,short,struct(double,double),struct(double,double),double,short,short,short,struct(double,double),struct(double,double,double),struct(double,double,double),struct(double,double,double),*(struct`),*(struct`),short,*(struct`),struct(double,double,double),struct(double,double,double),struct(double,double,double),struct(double,double,double),struct(double,double,double),struct(double,double,double),*(char),*(char),char,char,char,char,char,char,char,char,char,char,char,short,short,char,char,short,short,short,char,short,short,short,short,short,short,short,short,short,short,*(struct`),double,double,double,double,double,double,double,double,double,double,double,short,struct(short,short,int,*`,*`,*`,char,char),short,short,double,double,double,double,double,double,double,double,*(char),*(char),*(char),*(char),*(char),double,short,short,short,struct(short,short,int,*`,*`,*`,char,char),struct(short,short,int,*`,*`,*`,char,char),struct(short,short,int,*`,*`,*`,char,char),short,short,short,short,short,short,short,short,char,char,double,*(char),double,*(char),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),short,short,*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),short,short,*(char),*(char),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,short,char,char,char,char,char,char,char,short,short,*(struct`),*(char),*(char),char,char,char,char,char,char,short,short,char,char,*(char),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),char,int,int,double,double,double,double,double,double,char,char,double,double,double,double,double,double,short,char,double,double,double,int,char,char,char,char,char,struct(short,short,int,*`,*`,*`,char,char),*(struct`),*(struct`),*(struct`),char,double,short,short,short,short),short,*(struct(short,short,*`,*`,*`,*`,char,short,int,int,int,int,int)),int,*(struct(int,long,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,enum(int,int),union`,struct`,*`,int,long,long,char,int,long,long,long,*`)),int,int,*(*(struct`)),*(struct),int,*(struct(int,long,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,enum(int,int),union`,struct`,*`,int,long,long,char,int,long,long,long,*`)),*(struct(int,long,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,enum(int,int),union`,struct`,*`,int,long,long,char,int,long,long,long,*`)),struct(*(struct`),short,*(*`),int,*(struct`),*(struct`)),struct(*(struct`),short,*(*`),int),struct(*(struct`),short,*(*`),int),struct(*(struct`),short,*(*`),int,*(struct`),*(struct`)),struct(*(struct`),short,*(*`),int),struct(*(struct`),short,*(*`),int),struct(*(struct`),short,*(*`),int),struct(*(struct`),short,*(*`),int),struct(*(struct`),short,*(*`),int,char,*(*`)),struct(*(struct`),short,*(*`),int),struct(int,int,array(char),array(char),char,array(char),char,array(struct(char,int,int)),short,array(struct(char,char,*(char))),int,int),int,int)))->(int)
(	O
&	O
dat	*(struct(*(char),long,long,char,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),char))
,	O
&	O
dwg	*(struct)
)	O
;	O
}	O
if	O
(	O
error	int
>=	O
DWG_ERR_CRITICAL	O
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"WRITE ERROR %s\n"	*(char)
,	O
filename_out	*(char)
)	O
;	O
if	O
(	O
dat	*(struct(*(char),long,long,char,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),char))
.	O
fh	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
fclose	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
dat	*(struct(*(char),long,long,char,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),char))
.	O
fh	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
final	O
:	O
if	O
(	O
do_free	int
)	O
{	O
dwg_free	(*(struct(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),array(char),char,char,array(short),int,char,char,short,char,char,char,int,int,int,int,int,int,*(struct`),struct(int,int,int,int,int),*(struct`)),struct(array(char),int,int,int,int,int,int,int,int,long,long,int,int,int,int,int,int,long,int,int,int,int,array(char),int,int,int,int,int),struct(array(char),short,short,int,int,short,short,int,short,short,short,short,array(short),array(char),double,double,int,int,short,short,int,int,int,int,int,int,int,int,array(short)),struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,int,double),struct(int,int,double),struct(int,int,double),short,*(struct`),int,int),struct(*(char),long,long,char),struct(int,int,int,char,long,*(char),double,double,double,double,*(char),*(char),*(char),*(char),int,int,short,*(struct`),char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,short,short,short,short,short,short,short,short,short,short,short,short,short,short,int,int,int,short,short,short,short,short,short,short,short,short,short,short,short,short,short,short,short,short,short,short,int,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,*(char),struct(int,int,double),struct(int,int,double),struct(int,int,double),struct(int,int,double),int,int,int,struct(int,int,double),struct(int,int,double),struct(short,short,int,*`,*`,*`,char,char),short,*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),double,struct(double,double,double),struct(double,double,double),struct(double,double,double),struct(double,double),struct(double,double),double,struct(double,double,double),struct(double,double,double),struct(double,double,double),*(struct`),*(struct`),*(struct`),short,struct(double,double,double),struct(double,double,double),struct(double,double,double),struct(double,double,double),struct(double,double,double),struct(double,double,double),struct(double,double,double),struct(double,double,double),struct(double,double,double),struct(double,double),struct(double,double),struct(double,double),double,double,short,struct(double,double),struct(double,double),double,short,short,short,struct(double,double),struct(double,double,double),struct(double,double,double),struct(double,double,double),*(struct`),*(struct`),short,*(struct`),struct(double,double,double),struct(double,double,double),struct(double,double,double),struct(double,double,double),struct(double,double,double),struct(double,double,double),*(char),*(char),char,char,char,char,char,char,char,char,char,char,char,short,short,char,char,short,short,short,char,short,short,short,short,short,short,short,short,short,short,*(struct`),double,double,double,double,double,double,double,double,double,double,double,short,struct(short,short,int,*`,*`,*`,char,char),short,short,double,double,double,double,double,double,double,double,*(char),*(char),*(char),*(char),*(char),double,short,short,short,struct(short,short,int,*`,*`,*`,char,char),struct(short,short,int,*`,*`,*`,char,char),struct(short,short,int,*`,*`,*`,char,char),short,short,short,short,short,short,short,short,char,char,double,*(char),double,*(char),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),short,short,*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),short,short,*(char),*(char),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,short,char,char,char,char,char,char,char,short,short,*(struct`),*(char),*(char),char,char,char,char,char,char,short,short,char,char,*(char),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),char,int,int,double,double,double,double,double,double,char,char,double,double,double,double,double,double,short,char,double,double,double,int,char,char,char,char,char,struct(short,short,int,*`,*`,*`,char,char),*(struct`),*(struct`),*(struct`),char,double,short,short,short,short),short,*(struct(short,short,*`,*`,*`,*`,char,short,int,int,int,int,int)),int,*(struct(int,long,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,enum(int,int),union`,struct`,*`,int,long,long,char,int,long,long,long,*`)),int,int,*(*(struct`)),*(struct),int,*(struct(int,long,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,enum(int,int),union`,struct`,*`,int,long,long,char,int,long,long,long,*`)),*(struct(int,long,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,enum(int,int),union`,struct`,*`,int,long,long,char,int,long,long,long,*`)),struct(*(struct`),short,*(*`),int,*(struct`),*(struct`)),struct(*(struct`),short,*(*`),int),struct(*(struct`),short,*(*`),int),struct(*(struct`),short,*(*`),int,*(struct`),*(struct`)),struct(*(struct`),short,*(*`),int),struct(*(struct`),short,*(*`),int),struct(*(struct`),short,*(*`),int),struct(*(struct`),short,*(*`),int),struct(*(struct`),short,*(*`),int,char,*(*`)),struct(*(struct`),short,*(*`),int),struct(int,int,array(char),array(char),char,array(char),char,array(struct(char,int,int)),short,array(struct(char,char,*(char))),int,int),int,int)))->(void)
(	O
&	O
dwg	*(struct)
)	O
;	O
if	O
(	O
need_free	int
)	O
free	(*(void))->(void)
(	O
filename_out	*(char)
)	O
;	O
}	O
filename_out	*(char)
=	O
NULL	O
;	O
}	O
return	O
error	int
>=	O
DWG_ERR_CRITICAL	O
?	O
1	int
:	O
0	int
;	O
}	O
