int	O
osip_list_init	(*(struct(int,*(struct(*`,*`)))))->(int)
(	O
osip_list_t	struct
*	O
li	*(struct)
)	O
{	O
if	O
(	O
li	*(struct)
==	O
NULL	O
)	O
return	O
OSIP_BADPARAMETER	O
;	O
memset	(*(void),int,long)->(*(void))
(	O
li	*(struct)
,	O
0	int
,	O
sizeof	O
(	O
osip_list_t	struct
)	O
)	O
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
int	O
osip_list_clone	(*(struct(int,*(struct(*`,*`)))),*(struct(int,*(struct(*`,*`)))),*((*(void),*(*(void)))->(int)))->(int)
(	O
const	O
osip_list_t	struct
*	O
src	*(struct(int,*(struct(*(struct`),*(void)))))
,	O
osip_list_t	struct
*	O
dst	*(struct(int,*(struct(*(struct`),*(void)))))
,	O
int	O
(	O
*	O
clone_func	*((*(void),*(*(void)))->(int))
)	O
(	O
void	O
*	O
,	O
void	O
*	O
*	O
)	O
)	O
{	O
void	O
*	O
data	*(void)
;	O
void	O
*	O
data2	*(void)
;	O
int	O
i	int
;	O
osip_list_iterator_t	struct
iterator	struct(*(struct(*(struct(*`,*`)),*(void))),*(*(struct(*(struct`),*(void)))),*(struct(int,*(struct(*`,*`)))),int)
;	O
for	O
(	O
data	*(void)
=	O
osip_list_get_first	(*(struct(int,*(struct(*`,*`)))),*(struct(*(struct(*`,*`)),*(*(struct`)),*(struct(int,*`)),int)))->(*(void))
(	O
(	O
osip_list_t	struct
*	O
)	O
src	*(struct(int,*(struct(*(struct`),*(void)))))
,	O
&	O
iterator	struct(*(struct(*(struct(*`,*`)),*(void))),*(*(struct(*(struct`),*(void)))),*(struct(int,*(struct(*`,*`)))),int)
)	O
;	O
osip_list_iterator_has_elem	O
(	O
iterator	struct(*(struct(*(struct(*`,*`)),*(void))),*(*(struct(*(struct`),*(void)))),*(struct(int,*(struct(*`,*`)))),int)
)	O
;	O
data	*(void)
=	O
osip_list_get_next	(*(struct(*(struct(*`,*`)),*(*(struct`)),*(struct(int,*`)),int)))->(*(void))
(	O
&	O
iterator	struct(*(struct(*(struct(*`,*`)),*(void))),*(*(struct(*(struct`),*(void)))),*(struct(int,*(struct(*`,*`)))),int)
)	O
)	O
{	O
i	int
=	O
clone_func	*((*(void),*(*(void)))->(int))
(	O
data	*(void)
,	O
&	O
data2	*(void)
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
return	O
i	int
;	O
osip_list_add	(*(struct(int,*(struct(*`,*`)))),*(void),int)->(int)
(	O
dst	*(struct(int,*(struct(*(struct`),*(void)))))
,	O
data2	*(void)
,	O
-	O
1	int
)	O
;	O
}	O
return	O
OSIP_SUCCESS	int
;	O
}	O
void	O
osip_list_special_free	(*(struct(int,*(struct(*`,*`)))),*((*(void))->(void)))->(void)
(	O
osip_list_t	struct
*	O
li	*(struct)
,	O
void	O
(	O
*	O
free_func	*((*(void))->(void))
)	O
(	O
void	O
*	O
)	O
)	O
{	O
void	O
*	O
element	*(void)
;	O
if	O
(	O
li	*(struct)
==	O
NULL	O
)	O
return	O
;	O
while	O
(	O
!	O
osip_list_eol	(*(struct(int,*(struct(*`,*`)))),int)->(int)
(	O
li	*(struct)
,	O
0	int
)	O
)	O
{	O
element	*(void)
=	O
(	O
void	O
*	O
)	O
osip_list_get	(*(struct(int,*(struct(*`,*`)))),int)->(*(void))
(	O
li	*(struct)
,	O
0	int
)	O
;	O
osip_list_remove	(*(struct(int,*(struct(*`,*`)))),int)->(int)
(	O
li	*(struct)
,	O
0	int
)	O
;	O
if	O
(	O
free_func	*((*(void))->(void))
!=	O
NULL	O
)	O
free_func	*((*(void))->(void))
(	O
element	*(void)
)	O
;	O
}	O
}	O
void	O
osip_list_ofchar_free	(*(struct(int,*(struct(*`,*`)))))->(void)
(	O
osip_list_t	struct
*	O
li	*(struct)
)	O
{	O
char	O
*	O
chain	*(char)
;	O
if	O
(	O
li	*(struct)
==	O
NULL	O
)	O
return	O
;	O
while	O
(	O
!	O
osip_list_eol	(*(struct(int,*(struct(*`,*`)))),int)->(int)
(	O
li	*(struct)
,	O
0	int
)	O
)	O
{	O
chain	*(char)
=	O
(	O
char	O
*	O
)	O
osip_list_get	(*(struct(int,*(struct(*`,*`)))),int)->(*(void))
(	O
li	*(struct)
,	O
0	int
)	O
;	O
osip_list_remove	(*(struct(int,*(struct(*`,*`)))),int)->(int)
(	O
li	*(struct)
,	O
0	int
)	O
;	O
osip_free	O
(	O
chain	*(char)
)	O
;	O
}	O
}	O
int	O
osip_list_size	(*(struct(int,*(struct(*`,*`)))))->(int)
(	O
const	O
osip_list_t	struct
*	O
li	*(struct)
)	O
{	O
if	O
(	O
li	*(struct)
==	O
NULL	O
)	O
return	O
OSIP_BADPARAMETER	O
;	O
return	O
li	*(struct)
->	O
nb_elt	int
;	O
}	O
int	O
osip_list_eol	(*(struct(int,*(struct(*`,*`)))),int)->(int)
(	O
const	O
osip_list_t	struct
*	O
li	*(struct)
,	O
int	O
i	int
)	O
{	O
if	O
(	O
li	*(struct)
==	O
NULL	O
)	O
return	O
OSIP_BADPARAMETER	O
;	O
if	O
(	O
i	int
<	O
li	*(struct)
->	O
nb_elt	int
)	O
return	O
OSIP_SUCCESS	int
;	O
return	O
1	int
;	O
}	O
int	O
osip_list_add	(*(struct(int,*(struct(*`,*`)))),*(void),int)->(int)
(	O
osip_list_t	struct
*	O
li	*(struct)
,	O
void	O
*	O
el	*(void)
,	O
int	O
pos	int
)	O
{	O
__node_t	struct
*	O
ntmp	*(struct(*(struct(*(struct`),*(void))),*(void)))
;	O
int	O
i	int
=	O
0	int
;	O
if	O
(	O
li	*(struct)
==	O
NULL	O
)	O
return	O
OSIP_BADPARAMETER	O
;	O
if	O
(	O
li	*(struct)
->	O
nb_elt	int
==	O
0	int
)	O
{	O
li	*(struct)
->	O
node	*(struct(*(struct(*(struct`),*(void))),*(void)))
=	O
(	O
__node_t	struct
*	O
)	O
osip_malloc	O
(	O
sizeof	O
(	O
__node_t	struct
)	O
)	O
;	O
if	O
(	O
li	*(struct)
->	O
node	*(struct(*(struct(*(struct`),*(void))),*(void)))
==	O
NULL	O
)	O
return	O
OSIP_NOMEM	O
;	O
li	*(struct)
->	O
node	*(struct(*(struct(*(struct`),*(void))),*(void)))
->	O
element	*(void)
=	O
el	*(void)
;	O
li	*(struct)
->	O
node	*(struct(*(struct(*(struct`),*(void))),*(void)))
->	O
next	*(struct(*(struct(*(struct`),*(void))),*(void)))
=	O
NULL	O
;	O
li	*(struct)
->	O
nb_elt	int
++	O
;	O
return	O
li	*(struct)
->	O
nb_elt	int
;	O
}	O
if	O
(	O
pos	int
==	O
-	O
1	int
||	O
pos	int
>=	O
li	*(struct)
->	O
nb_elt	int
)	O
{	O
pos	int
=	O
li	*(struct)
->	O
nb_elt	int
;	O
}	O
ntmp	*(struct(*(struct(*(struct`),*(void))),*(void)))
=	O
li	*(struct)
->	O
node	*(struct(*(struct(*(struct`),*(void))),*(void)))
;	O
if	O
(	O
pos	int
==	O
0	int
)	O
{	O
li	*(struct)
->	O
node	*(struct(*(struct(*(struct`),*(void))),*(void)))
=	O
(	O
__node_t	struct
*	O
)	O
osip_malloc	O
(	O
sizeof	O
(	O
__node_t	struct
)	O
)	O
;	O
if	O
(	O
li	*(struct)
->	O
node	*(struct(*(struct(*(struct`),*(void))),*(void)))
==	O
NULL	O
)	O
{	O
li	*(struct)
->	O
node	*(struct(*(struct(*(struct`),*(void))),*(void)))
=	O
ntmp	*(struct(*(struct(*(struct`),*(void))),*(void)))
;	O
return	O
OSIP_NOMEM	O
;	O
}	O
li	*(struct)
->	O
node	*(struct(*(struct(*(struct`),*(void))),*(void)))
->	O
element	*(void)
=	O
el	*(void)
;	O
li	*(struct)
->	O
node	*(struct(*(struct(*(struct`),*(void))),*(void)))
->	O
next	*(struct(*(struct(*(struct`),*(void))),*(void)))
=	O
ntmp	*(struct(*(struct(*(struct`),*(void))),*(void)))
;	O
li	*(struct)
->	O
nb_elt	int
++	O
;	O
return	O
li	*(struct)
->	O
nb_elt	int
;	O
}	O
while	O
(	O
pos	int
>	O
i	int
+	O
1	int
)	O
{	O
i	int
++	O
;	O
ntmp	*(struct(*(struct(*(struct`),*(void))),*(void)))
=	O
ntmp	*(struct(*(struct(*(struct`),*(void))),*(void)))
->	O
next	*(struct(*(struct(*(struct`),*(void))),*(void)))
;	O
}	O
if	O
(	O
pos	int
==	O
li	*(struct)
->	O
nb_elt	int
)	O
{	O
ntmp	*(struct(*(struct(*(struct`),*(void))),*(void)))
->	O
next	*(struct(*(struct(*(struct`),*(void))),*(void)))
=	O
osip_malloc	O
(	O
sizeof	O
(	O
__node_t	struct
)	O
)	O
;	O
if	O
(	O
ntmp	*(struct(*(struct(*(struct`),*(void))),*(void)))
->	O
next	*(struct(*(struct(*(struct`),*(void))),*(void)))
==	O
NULL	O
)	O
return	O
OSIP_NOMEM	O
;	O
ntmp	*(struct(*(struct(*(struct`),*(void))),*(void)))
=	O
ntmp	*(struct(*(struct(*(struct`),*(void))),*(void)))
->	O
next	*(struct(*(struct(*(struct`),*(void))),*(void)))
;	O
ntmp	*(struct(*(struct(*(struct`),*(void))),*(void)))
->	O
element	*(void)
=	O
el	*(void)
;	O
ntmp	*(struct(*(struct(*(struct`),*(void))),*(void)))
->	O
next	*(struct(*(struct(*(struct`),*(void))),*(void)))
=	O
NULL	O
;	O
li	*(struct)
->	O
nb_elt	int
++	O
;	O
return	O
li	*(struct)
->	O
nb_elt	int
;	O
}	O
{	O
__node_t	struct
*	O
nextnode	*(struct(*(struct(*(struct`),*(void))),*(void)))
=	O
ntmp	*(struct(*(struct(*(struct`),*(void))),*(void)))
->	O
next	*(struct(*(struct(*(struct`),*(void))),*(void)))
;	O
ntmp	*(struct(*(struct(*(struct`),*(void))),*(void)))
->	O
next	*(struct(*(struct(*(struct`),*(void))),*(void)))
=	O
osip_malloc	O
(	O
sizeof	O
(	O
__node_t	struct
)	O
)	O
;	O
if	O
(	O
ntmp	*(struct(*(struct(*(struct`),*(void))),*(void)))
->	O
next	*(struct(*(struct(*(struct`),*(void))),*(void)))
==	O
NULL	O
)	O
{	O
ntmp	*(struct(*(struct(*(struct`),*(void))),*(void)))
->	O
next	*(struct(*(struct(*(struct`),*(void))),*(void)))
=	O
nextnode	*(struct(*(struct(*(struct`),*(void))),*(void)))
;	O
return	O
OSIP_NOMEM	O
;	O
}	O
ntmp	*(struct(*(struct(*(struct`),*(void))),*(void)))
=	O
ntmp	*(struct(*(struct(*(struct`),*(void))),*(void)))
->	O
next	*(struct(*(struct(*(struct`),*(void))),*(void)))
;	O
ntmp	*(struct(*(struct(*(struct`),*(void))),*(void)))
->	O
element	*(void)
=	O
el	*(void)
;	O
ntmp	*(struct(*(struct(*(struct`),*(void))),*(void)))
->	O
next	*(struct(*(struct(*(struct`),*(void))),*(void)))
=	O
nextnode	*(struct(*(struct(*(struct`),*(void))),*(void)))
;	O
li	*(struct)
->	O
nb_elt	int
++	O
;	O
}	O
return	O
li	*(struct)
->	O
nb_elt	int
;	O
}	O
void	O
*	O
osip_list_get	(*(struct(int,*(struct(*`,*`)))),int)->(*(void))
(	O
const	O
osip_list_t	struct
*	O
li	*(struct)
,	O
int	O
pos	int
)	O
{	O
__node_t	struct
*	O
ntmp	*(struct(*(struct(*(struct`),*(void))),*(void)))
;	O
int	O
i	int
=	O
0	int
;	O
if	O
(	O
li	*(struct)
==	O
NULL	O
)	O
return	O
NULL	O
;	O
if	O
(	O
pos	int
<	O
0	int
||	O
pos	int
>=	O
li	*(struct)
->	O
nb_elt	int
)	O
return	O
NULL	O
;	O
ntmp	*(struct(*(struct(*(struct`),*(void))),*(void)))
=	O
li	*(struct)
->	O
node	*(struct(*(struct(*(struct`),*(void))),*(void)))
;	O
while	O
(	O
pos	int
>	O
i	int
)	O
{	O
i	int
++	O
;	O
ntmp	*(struct(*(struct(*(struct`),*(void))),*(void)))
=	O
ntmp	*(struct(*(struct(*(struct`),*(void))),*(void)))
->	O
next	*(struct(*(struct(*(struct`),*(void))),*(void)))
;	O
}	O
return	O
ntmp	*(struct(*(struct(*(struct`),*(void))),*(void)))
->	O
element	*(void)
;	O
}	O
void	O
*	O
osip_list_get_first	(*(struct(int,*(struct(*`,*`)))),*(struct(*(struct(*`,*`)),*(*(struct`)),*(struct(int,*`)),int)))->(*(void))
(	O
const	O
osip_list_t	struct
*	O
li	*(struct)
,	O
osip_list_iterator_t	struct
*	O
iterator	struct(*(struct(*(struct(*`,*`)),*(void))),*(*(struct(*(struct`),*(void)))),*(struct(int,*(struct(*`,*`)))),int)
)	O
{	O
if	O
(	O
li	*(struct)
==	O
NULL	O
||	O
0	int
>=	O
li	*(struct)
->	O
nb_elt	int
)	O
{	O
iterator	struct(*(struct(*(struct(*`,*`)),*(void))),*(*(struct(*(struct`),*(void)))),*(struct(int,*(struct(*`,*`)))),int)
->	O
actual	*(struct(*(struct(*(struct`),*(void))),*(void)))
=	O
0	int
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
iterator	struct(*(struct(*(struct(*`,*`)),*(void))),*(*(struct(*(struct`),*(void)))),*(struct(int,*(struct(*`,*`)))),int)
->	O
actual	*(struct(*(struct(*(struct`),*(void))),*(void)))
=	O
li	*(struct)
->	O
node	*(struct(*(struct(*(struct`),*(void))),*(void)))
;	O
iterator	struct(*(struct(*(struct(*`,*`)),*(void))),*(*(struct(*(struct`),*(void)))),*(struct(int,*(struct(*`,*`)))),int)
->	O
prev	*(*(struct(*(struct(*`,*`)),*(void))))
=	O
(	O
__node_t	struct
*	O
*	O
)	O
&	O
li	*(struct)
->	O
node	*(struct(*(struct(*(struct`),*(void))),*(void)))
;	O
iterator	struct(*(struct(*(struct(*`,*`)),*(void))),*(*(struct(*(struct`),*(void)))),*(struct(int,*(struct(*`,*`)))),int)
->	O
li	*(struct)
=	O
(	O
osip_list_t	struct
*	O
)	O
li	*(struct)
;	O
iterator	struct(*(struct(*(struct(*`,*`)),*(void))),*(*(struct(*(struct`),*(void)))),*(struct(int,*(struct(*`,*`)))),int)
->	O
pos	int
=	O
0	int
;	O
return	O
li	*(struct)
->	O
node	*(struct(*(struct(*(struct`),*(void))),*(void)))
->	O
element	*(void)
;	O
}	O
void	O
*	O
osip_list_get_next	(*(struct(*(struct(*`,*`)),*(*(struct`)),*(struct(int,*`)),int)))->(*(void))
(	O
osip_list_iterator_t	struct
*	O
iterator	struct(*(struct(*(struct(*`,*`)),*(void))),*(*(struct(*(struct`),*(void)))),*(struct(int,*(struct(*`,*`)))),int)
)	O
{	O
if	O
(	O
iterator	struct(*(struct(*(struct(*`,*`)),*(void))),*(*(struct(*(struct`),*(void)))),*(struct(int,*(struct(*`,*`)))),int)
->	O
actual	*(struct(*(struct(*(struct`),*(void))),*(void)))
==	O
NULL	O
)	O
{	O
return	O
OSIP_SUCCESS	int
;	O
}	O
iterator	struct(*(struct(*(struct(*`,*`)),*(void))),*(*(struct(*(struct`),*(void)))),*(struct(int,*(struct(*`,*`)))),int)
->	O
prev	*(*(struct(*(struct(*`,*`)),*(void))))
=	O
&	O
(	O
iterator	struct(*(struct(*(struct(*`,*`)),*(void))),*(*(struct(*(struct`),*(void)))),*(struct(int,*(struct(*`,*`)))),int)
->	O
actual	*(struct(*(struct(*(struct`),*(void))),*(void)))
->	O
next	*(struct(*(struct(*(struct`),*(void))),*(void)))
)	O
;	O
iterator	struct(*(struct(*(struct(*`,*`)),*(void))),*(*(struct(*(struct`),*(void)))),*(struct(int,*(struct(*`,*`)))),int)
->	O
actual	*(struct(*(struct(*(struct`),*(void))),*(void)))
=	O
iterator	struct(*(struct(*(struct(*`,*`)),*(void))),*(*(struct(*(struct`),*(void)))),*(struct(int,*(struct(*`,*`)))),int)
->	O
actual	*(struct(*(struct(*(struct`),*(void))),*(void)))
->	O
next	*(struct(*(struct(*(struct`),*(void))),*(void)))
;	O
++	O
(	O
iterator	struct(*(struct(*(struct(*`,*`)),*(void))),*(*(struct(*(struct`),*(void)))),*(struct(int,*(struct(*`,*`)))),int)
->	O
pos	int
)	O
;	O
if	O
(	O
osip_list_iterator_has_elem	O
(	O
*	O
iterator	struct(*(struct(*(struct(*`,*`)),*(void))),*(*(struct(*(struct`),*(void)))),*(struct(int,*(struct(*`,*`)))),int)
)	O
)	O
{	O
return	O
iterator	struct(*(struct(*(struct(*`,*`)),*(void))),*(*(struct(*(struct`),*(void)))),*(struct(int,*(struct(*`,*`)))),int)
->	O
actual	*(struct(*(struct(*(struct`),*(void))),*(void)))
->	O
element	*(void)
;	O
}	O
iterator	struct(*(struct(*(struct(*`,*`)),*(void))),*(*(struct(*(struct`),*(void)))),*(struct(int,*(struct(*`,*`)))),int)
->	O
actual	*(struct(*(struct(*(struct`),*(void))),*(void)))
=	O
0	int
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
void	O
*	O
osip_list_iterator_remove	(*(struct(*(struct(*`,*`)),*(*(struct`)),*(struct(int,*`)),int)))->(*(void))
(	O
osip_list_iterator_t	struct
*	O
iterator	struct(*(struct(*(struct(*`,*`)),*(void))),*(*(struct(*(struct`),*(void)))),*(struct(int,*(struct(*`,*`)))),int)
)	O
{	O
if	O
(	O
osip_list_iterator_has_elem	O
(	O
*	O
iterator	struct(*(struct(*(struct(*`,*`)),*(void))),*(*(struct(*(struct`),*(void)))),*(struct(int,*(struct(*`,*`)))),int)
)	O
)	O
{	O
--	O
(	O
iterator	struct(*(struct(*(struct(*`,*`)),*(void))),*(*(struct(*(struct`),*(void)))),*(struct(int,*(struct(*`,*`)))),int)
->	O
li	*(struct)
->	O
nb_elt	int
)	O
;	O
*	O
(	O
iterator	struct(*(struct(*(struct(*`,*`)),*(void))),*(*(struct(*(struct`),*(void)))),*(struct(int,*(struct(*`,*`)))),int)
->	O
prev	*(*(struct(*(struct(*`,*`)),*(void))))
)	O
=	O
iterator	struct(*(struct(*(struct(*`,*`)),*(void))),*(*(struct(*(struct`),*(void)))),*(struct(int,*(struct(*`,*`)))),int)
->	O
actual	*(struct(*(struct(*(struct`),*(void))),*(void)))
->	O
next	*(struct(*(struct(*(struct`),*(void))),*(void)))
;	O
osip_free	O
(	O
iterator	struct(*(struct(*(struct(*`,*`)),*(void))),*(*(struct(*(struct`),*(void)))),*(struct(int,*(struct(*`,*`)))),int)
->	O
actual	*(struct(*(struct(*(struct`),*(void))),*(void)))
)	O
;	O
iterator	struct(*(struct(*(struct(*`,*`)),*(void))),*(*(struct(*(struct`),*(void)))),*(struct(int,*(struct(*`,*`)))),int)
->	O
actual	*(struct(*(struct(*(struct`),*(void))),*(void)))
=	O
*	O
(	O
iterator	struct(*(struct(*(struct(*`,*`)),*(void))),*(*(struct(*(struct`),*(void)))),*(struct(int,*(struct(*`,*`)))),int)
->	O
prev	*(*(struct(*(struct(*`,*`)),*(void))))
)	O
;	O
}	O
if	O
(	O
osip_list_iterator_has_elem	O
(	O
*	O
iterator	struct(*(struct(*(struct(*`,*`)),*(void))),*(*(struct(*(struct`),*(void)))),*(struct(int,*(struct(*`,*`)))),int)
)	O
)	O
{	O
return	O
iterator	struct(*(struct(*(struct(*`,*`)),*(void))),*(*(struct(*(struct`),*(void)))),*(struct(int,*(struct(*`,*`)))),int)
->	O
actual	*(struct(*(struct(*(struct`),*(void))),*(void)))
->	O
element	*(void)
;	O
}	O
return	O
OSIP_SUCCESS	int
;	O
}	O
int	O
osip_list_remove	(*(struct(int,*(struct(*`,*`)))),int)->(int)
(	O
osip_list_t	struct
*	O
li	*(struct)
,	O
int	O
pos	int
)	O
{	O
__node_t	struct
*	O
ntmp	*(struct(*(struct(*(struct`),*(void))),*(void)))
;	O
int	O
i	int
=	O
0	int
;	O
if	O
(	O
li	*(struct)
==	O
NULL	O
)	O
return	O
OSIP_BADPARAMETER	O
;	O
if	O
(	O
pos	int
<	O
0	int
||	O
pos	int
>=	O
li	*(struct)
->	O
nb_elt	int
)	O
return	O
OSIP_UNDEFINED_ERROR	O
;	O
ntmp	*(struct(*(struct(*(struct`),*(void))),*(void)))
=	O
li	*(struct)
->	O
node	*(struct(*(struct(*(struct`),*(void))),*(void)))
;	O
if	O
(	O
pos	int
==	O
0	int
)	O
{	O
li	*(struct)
->	O
node	*(struct(*(struct(*(struct`),*(void))),*(void)))
=	O
ntmp	*(struct(*(struct(*(struct`),*(void))),*(void)))
->	O
next	*(struct(*(struct(*(struct`),*(void))),*(void)))
;	O
li	*(struct)
->	O
nb_elt	int
--	O
;	O
osip_free	O
(	O
ntmp	*(struct(*(struct(*(struct`),*(void))),*(void)))
)	O
;	O
return	O
li	*(struct)
->	O
nb_elt	int
;	O
}	O
while	O
(	O
pos	int
>	O
i	int
+	O
1	int
)	O
{	O
i	int
++	O
;	O
ntmp	*(struct(*(struct(*(struct`),*(void))),*(void)))
=	O
ntmp	*(struct(*(struct(*(struct`),*(void))),*(void)))
->	O
next	*(struct(*(struct(*(struct`),*(void))),*(void)))
;	O
}	O
{	O
__node_t	struct
*	O
remnode	*(struct(*(struct(*(struct`),*(void))),*(void)))
;	O
remnode	*(struct(*(struct(*(struct`),*(void))),*(void)))
=	O
ntmp	*(struct(*(struct(*(struct`),*(void))),*(void)))
->	O
next	*(struct(*(struct(*(struct`),*(void))),*(void)))
;	O
ntmp	*(struct(*(struct(*(struct`),*(void))),*(void)))
->	O
next	*(struct(*(struct(*(struct`),*(void))),*(void)))
=	O
(	O
ntmp	*(struct(*(struct(*(struct`),*(void))),*(void)))
->	O
next	*(struct(*(struct(*(struct`),*(void))),*(void)))
)	O
->	O
next	*(struct(*(struct(*(struct`),*(void))),*(void)))
;	O
osip_free	O
(	O
remnode	*(struct(*(struct(*(struct`),*(void))),*(void)))
)	O
;	O
li	*(struct)
->	O
nb_elt	int
--	O
;	O
}	O
return	O
li	*(struct)
->	O
nb_elt	int
;	O
}	O
