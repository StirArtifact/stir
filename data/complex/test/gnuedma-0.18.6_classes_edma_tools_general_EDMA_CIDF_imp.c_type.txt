ESint32	int
EDMAPROC	O
EDMA_CIDFParseU32	(int,int)->(int)
(	O
OBJID	int
obj	int
,	O
CLASSID	int
idc	int
)	O
{	O
CIF_CLASS	struct(int,int,*(char),*(char),int,int,int,*(*(struct(*(char),*(char),*(char)))),*(*(struct(*(char),*(char),*(char),int))),*(*(struct(*(char),*(char),*(char),int,*(*`),array(int)))))
*	O
the_class	*(struct(int,int,*(char),*(char),int,int,int,*(*(struct(*`,*`,*`))),*(*(struct(*`,*`,*`,int))),*(*(struct(*`,*`,*`,int,*`,array(int))))))
;	O
EChar	char
fn	array(char)
[	O
2048	int
]	O
;	O
EChar	char
namespace	*(char)
[	O
1024	int
]	O
;	O
EPChar	*(char)
path	*(char)
;	O
EChar	char
aux	array(char)
[	O
1024	int
]	O
,	O
sig	*(char)
[	O
1024	int
]	O
,	O
*	O
asig	*(char)
;	O
ESint32	int
i	int
,	O
j	int
,	O
repo_type	int
;	O
path	*(char)
=	O
edma_get_class_repo_dir	(int)->(*(char))
(	O
idc	int
)	O
;	O
edma_get_class_name	(int,*(char))->(int)
(	O
idc	int
,	O
aux	array(char)
)	O
;	O
if	O
(	O
(	O
repo_type	int
=	O
edma_get_class_repo_type	(int)->(int)
(	O
idc	int
)	O
)	O
==	O
0	int
)	O
{	O
edma_get_class_namespace	(int,*(char))->(int)
(	O
idc	int
,	O
namespace	*(char)
)	O
;	O
sprintf	(*(char),*(char))->(int)
(	O
fn	array(char)
,	O
"%s/share/edma/idf/%s/%s.cidf"	*(char)
,	O
path	*(char)
,	O
namespace	*(char)
,	O
aux	array(char)
)	O
;	O
}	O
else	O
{	O
char	O
*	O
rn	*(char)
=	O
edma_get_class_repo_name	(int)->(*(char))
(	O
idc	int
)	O
;	O
edma_get_class_namespace	(int,*(char))->(int)
(	O
idc	int
,	O
namespace	*(char)
)	O
;	O
sprintf	(*(char),*(char))->(int)
(	O
fn	array(char)
,	O
"%s/%s/idf/%s/%s.cidf"	*(char)
,	O
path	*(char)
,	O
rn	*(char)
,	O
namespace	*(char)
,	O
aux	array(char)
)	O
;	O
}	O
edma_printf_obj	(int,*(char))->(long)
(	O
obj	int
,	O
"Parsing Class %d:'%s': Repo: %d. Parser Object: %d"	*(char)
,	O
idc	int
,	O
aux	array(char)
,	O
repo_type	int
,	O
obj	int
)	O
;	O
edma_printf_obj	(int,*(char))->(long)
(	O
obj	int
,	O
"Using IDF file : %s"	*(char)
,	O
fn	array(char)
)	O
;	O
the_class	*(struct(int,int,*(char),*(char),int,int,int,*(*(struct(*`,*`,*`))),*(*(struct(*`,*`,*`,int))),*(*(struct(*`,*`,*`,int,*`,array(int))))))
=	O
cidf_parse	(*(char))->(*(struct(int,int,*(char),*(char),int,int,int,*(*(struct`)),*(*(struct`)),*(*(struct`)))))
(	O
fn	array(char)
)	O
;	O
edma_idf_set_def	(int,long,long,long)->(int)
(	O
idc	int
,	O
the_class	*(struct(int,int,*(char),*(char),int,int,int,*(*(struct(*`,*`,*`))),*(*(struct(*`,*`,*`,int))),*(*(struct(*`,*`,*`,int,*`,array(int))))))
->	O
n_prop	int
,	O
the_class	*(struct(int,int,*(char),*(char),int,int,int,*(*(struct(*`,*`,*`))),*(*(struct(*`,*`,*`,int))),*(*(struct(*`,*`,*`,int,*`,array(int))))))
->	O
n_met	int
,	O
0	int
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
the_class	*(struct(int,int,*(char),*(char),int,int,int,*(*(struct(*`,*`,*`))),*(*(struct(*`,*`,*`,int))),*(*(struct(*`,*`,*`,int,*`,array(int))))))
->	O
n_prop	int
;	O
i	int
++	O
)	O
{	O
edma_idf_set_prop	(int,long,*(char),*(char),*(char),long,*(char))->(int)
(	O
idc	int
,	O
i	int
,	O
the_class	*(struct(int,int,*(char),*(char),int,int,int,*(*(struct(*`,*`,*`))),*(*(struct(*`,*`,*`,int))),*(*(struct(*`,*`,*`,int,*`,array(int))))))
->	O
prop	*(*(struct(*(char),*(char),*(char),int)))
[	O
i	int
]	O
->	O
name	*(char)
,	O
the_class	*(struct(int,int,*(char),*(char),int,int,int,*(*(struct(*`,*`,*`))),*(*(struct(*`,*`,*`,int))),*(*(struct(*`,*`,*`,int,*`,array(int))))))
->	O
prop	*(*(struct(*(char),*(char),*(char),int)))
[	O
i	int
]	O
->	O
type	long
,	O
the_class	*(struct(int,int,*(char),*(char),int,int,int,*(*(struct(*`,*`,*`))),*(*(struct(*`,*`,*`,int))),*(*(struct(*`,*`,*`,int,*`,array(int))))))
->	O
prop	*(*(struct(*(char),*(char),*(char),int)))
[	O
i	int
]	O
->	O
access	int
,	O
0	int
,	O
NULL	O
)	O
;	O
}	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
the_class	*(struct(int,int,*(char),*(char),int,int,int,*(*(struct(*`,*`,*`))),*(*(struct(*`,*`,*`,int))),*(*(struct(*`,*`,*`,int,*`,array(int))))))
->	O
n_met	int
;	O
i	int
++	O
)	O
{	O
memset	(*(void),int,int)->(*(void))
(	O
sig	*(char)
,	O
0	int
,	O
1024	int
)	O
;	O
asig	*(char)
=	O
sig	*(char)
;	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<	O
the_class	*(struct(int,int,*(char),*(char),int,int,int,*(*(struct(*`,*`,*`))),*(*(struct(*`,*`,*`,int))),*(*(struct(*`,*`,*`,int,*`,array(int))))))
->	O
met	*(*(struct(*(char),*(char),*(char),int,*(*(struct`)),array(int))))
[	O
i	int
]	O
->	O
n_param	int
;	O
j	int
++	O
)	O
{	O
EUint32	long
type_id	long
;	O
EChar	char
type_sig	array(char)
[	O
256	int
]	O
;	O
type_id	long
=	O
edma_get_type_id	(*(char))->(long)
(	O
the_class	*(struct(int,int,*(char),*(char),int,int,int,*(*(struct(*`,*`,*`))),*(*(struct(*`,*`,*`,int))),*(*(struct(*`,*`,*`,int,*`,array(int))))))
->	O
met	*(*(struct(*(char),*(char),*(char),int,*(*(struct`)),array(int))))
[	O
i	int
]	O
->	O
param	*(*(struct(*(char),*(char))))
[	O
j	int
]	O
->	O
type	long
)	O
;	O
memset	(*(void),int,int)->(*(void))
(	O
type_sig	array(char)
,	O
0	int
,	O
256	int
)	O
;	O
edma_get_type_sig	(long,*(char))->(long)
(	O
type_id	long
,	O
type_sig	array(char)
)	O
;	O
asig	*(char)
+=	O
sprintf	(*(char),*(char))->(int)
(	O
asig	*(char)
,	O
"%s"	*(char)
,	O
type_sig	array(char)
)	O
;	O
}	O
{	O
EUint32	long
type_id	long
;	O
EChar	char
type_sig	array(char)
[	O
256	int
]	O
;	O
type_id	long
=	O
edma_get_type_id	(*(char))->(long)
(	O
the_class	*(struct(int,int,*(char),*(char),int,int,int,*(*(struct(*`,*`,*`))),*(*(struct(*`,*`,*`,int))),*(*(struct(*`,*`,*`,int,*`,array(int))))))
->	O
met	*(*(struct(*(char),*(char),*(char),int,*(*(struct`)),array(int))))
[	O
i	int
]	O
->	O
rtype	*(char)
)	O
;	O
memset	(*(void),int,int)->(*(void))
(	O
type_sig	array(char)
,	O
0	int
,	O
256	int
)	O
;	O
edma_get_type_sig	(long,*(char))->(long)
(	O
type_id	long
,	O
type_sig	array(char)
)	O
;	O
asig	*(char)
+=	O
sprintf	(*(char),*(char))->(int)
(	O
asig	*(char)
,	O
"r%s"	*(char)
,	O
type_sig	array(char)
)	O
;	O
}	O
printf	(*(char))->(int)
(	O
"Generated signature is: '%s'\n"	*(char)
,	O
sig	*(char)
)	O
;	O
if	O
(	O
!	O
repo_type	int
)	O
edma_idf_set_met	(int,long,*(char),*(char),char,char,char)->(int)
(	O
idc	int
,	O
i	int
,	O
the_class	*(struct(int,int,*(char),*(char),int,int,int,*(*(struct(*`,*`,*`))),*(*(struct(*`,*`,*`,int))),*(*(struct(*`,*`,*`,int,*`,array(int))))))
->	O
met	*(*(struct(*(char),*(char),*(char),int,*(*(struct`)),array(int))))
[	O
i	int
]	O
->	O
name	*(char)
,	O
sig	*(char)
,	O
the_class	*(struct(int,int,*(char),*(char),int,int,int,*(*(struct(*`,*`,*`))),*(*(struct(*`,*`,*`,int))),*(*(struct(*`,*`,*`,int,*`,array(int))))))
->	O
met	*(*(struct(*(char),*(char),*(char),int,*(*(struct`)),array(int))))
[	O
i	int
]	O
->	O
flags	array(int)
[	O
1	int
]	O
,	O
the_class	*(struct(int,int,*(char),*(char),int,int,int,*(*(struct(*`,*`,*`))),*(*(struct(*`,*`,*`,int))),*(*(struct(*`,*`,*`,int,*`,array(int))))))
->	O
met	*(*(struct(*(char),*(char),*(char),int,*(*(struct`)),array(int))))
[	O
i	int
]	O
->	O
flags	array(int)
[	O
0	int
]	O
,	O
the_class	*(struct(int,int,*(char),*(char),int,int,int,*(*(struct(*`,*`,*`))),*(*(struct(*`,*`,*`,int))),*(*(struct(*`,*`,*`,int,*`,array(int))))))
->	O
met	*(*(struct(*(char),*(char),*(char),int,*(*(struct`)),array(int))))
[	O
i	int
]	O
->	O
flags	array(int)
[	O
2	int
]	O
)	O
;	O
else	O
edma_idf_set_met	(int,long,*(char),*(char),char,char,char)->(int)
(	O
idc	int
,	O
i	int
,	O
the_class	*(struct(int,int,*(char),*(char),int,int,int,*(*(struct(*`,*`,*`))),*(*(struct(*`,*`,*`,int))),*(*(struct(*`,*`,*`,int,*`,array(int))))))
->	O
met	*(*(struct(*(char),*(char),*(char),int,*(*(struct`)),array(int))))
[	O
i	int
]	O
->	O
name	*(char)
,	O
""	*(char)
,	O
the_class	*(struct(int,int,*(char),*(char),int,int,int,*(*(struct(*`,*`,*`))),*(*(struct(*`,*`,*`,int))),*(*(struct(*`,*`,*`,int,*`,array(int))))))
->	O
met	*(*(struct(*(char),*(char),*(char),int,*(*(struct`)),array(int))))
[	O
i	int
]	O
->	O
flags	array(int)
[	O
1	int
]	O
,	O
the_class	*(struct(int,int,*(char),*(char),int,int,int,*(*(struct(*`,*`,*`))),*(*(struct(*`,*`,*`,int))),*(*(struct(*`,*`,*`,int,*`,array(int))))))
->	O
met	*(*(struct(*(char),*(char),*(char),int,*(*(struct`)),array(int))))
[	O
i	int
]	O
->	O
flags	array(int)
[	O
0	int
]	O
,	O
the_class	*(struct(int,int,*(char),*(char),int,int,int,*(*(struct(*`,*`,*`))),*(*(struct(*`,*`,*`,int))),*(*(struct(*`,*`,*`,int,*`,array(int))))))
->	O
met	*(*(struct(*(char),*(char),*(char),int,*(*(struct`)),array(int))))
[	O
i	int
]	O
->	O
flags	array(int)
[	O
2	int
]	O
)	O
;	O
}	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
the_class	*(struct(int,int,*(char),*(char),int,int,int,*(*(struct(*`,*`,*`))),*(*(struct(*`,*`,*`,int))),*(*(struct(*`,*`,*`,int,*`,array(int))))))
->	O
n_sc	int
;	O
i	int
++	O
)	O
{	O
edma_add_local_class_superclass_by_name	(int,*(char),*(char),*(char))->(int)
(	O
idc	int
,	O
the_class	*(struct(int,int,*(char),*(char),int,int,int,*(*(struct(*`,*`,*`))),*(*(struct(*`,*`,*`,int))),*(*(struct(*`,*`,*`,int,*`,array(int))))))
->	O
sc	*(*(struct(*(char),*(char),*(char))))
[	O
i	int
]	O
->	O
name	*(char)
,	O
the_class	*(struct(int,int,*(char),*(char),int,int,int,*(*(struct(*`,*`,*`))),*(*(struct(*`,*`,*`,int))),*(*(struct(*`,*`,*`,int,*`,array(int))))))
->	O
sc	*(*(struct(*(char),*(char),*(char))))
[	O
i	int
]	O
->	O
ap	*(char)
,	O
the_class	*(struct(int,int,*(char),*(char),int,int,int,*(*(struct(*`,*`,*`))),*(*(struct(*`,*`,*`,int))),*(*(struct(*`,*`,*`,int,*`,array(int))))))
->	O
sc	*(*(struct(*(char),*(char),*(char))))
[	O
i	int
]	O
->	O
ap1	*(char)
)	O
;	O
}	O
edma_printf_obj	(int,*(char))->(long)
(	O
obj	int
,	O
"Registering class %d:%s:%s"	*(char)
,	O
idc	int
,	O
the_class	*(struct(int,int,*(char),*(char),int,int,int,*(*(struct(*`,*`,*`))),*(*(struct(*`,*`,*`,int))),*(*(struct(*`,*`,*`,int,*`,array(int))))))
->	O
name	*(char)
,	O
aux	array(char)
)	O
;	O
if	O
(	O
repo_type	int
)	O
edma_idf_set_class_id1	(int)->(int)
(	O
idc	int
)	O
;	O
else	O
edma_idf_set_class_id	(int)->(int)
(	O
idc	int
)	O
;	O
cidf_free_data	(*(struct(int,int,*(char),*(char),int,int,int,*(*(struct`)),*(*(struct`)),*(*(struct`)))))->(int)
(	O
the_class	*(struct(int,int,*(char),*(char),int,int,int,*(*(struct(*`,*`,*`))),*(*(struct(*`,*`,*`,int))),*(*(struct(*`,*`,*`,int,*`,array(int))))))
)	O
;	O
return	O
0	int
;	O
}	O
ESint32	int
EDMA_CIDF_class_factory	()->(int)
(	O
)	O
{	O
CLASSID	int
cid	int
;	O
cid	int
=	O
edma_idf_get_free_class_id	(int)->(int)
(	O
EDMA_LOCAL_CLASS	int
)	O
;	O
edma_idf_set_class_name	(int,*(char))->(int)
(	O
cid	int
,	O
"EDMA_CIDF"	*(char)
)	O
;	O
edma_idf_set_class_namespace	(int,*(char))->(int)
(	O
cid	int
,	O
""	*(char)
)	O
;	O
edma_idf_set_class_version	(int,int,int)->(int)
(	O
cid	int
,	O
0	int
,	O
0	int
)	O
;	O
edma_add_local_class_method	(int,*(char),*(char),*(()->(void)),int,int,int)->(int)
(	O
cid	int
,	O
"Parse"	*(char)
,	O
"U32"	*(char)
,	O
(	O
PPROC	*(()->(void))
)	O
EDMA_CIDFParseU32	(int,int)->(int)
,	O
0	int
,	O
0	int
,	O
0	int
)	O
;	O
edma_idf_set_class_id	(int)->(int)
(	O
cid	int
)	O
;	O
return	O
0	int
;	O
}	O
