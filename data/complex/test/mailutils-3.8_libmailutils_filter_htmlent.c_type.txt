struct	O
transcode_map	struct(*(char),long,int)
{	O
const	O
char	O
*	O
ent	*(char)
;	O
size_t	long
len	long
;	O
int	O
ch	int
;	O
}	O
;	O
static	O
struct	O
transcode_map	struct(*(char),long,int)
transcode_map	struct(*(char),long,int)
[	O
]	O
=	O
{	O
{	O
S	O
(	O
"&amp;"	*(char)
)	O
,	O
'&'	O
}	O
,	O
{	O
S	O
(	O
"&gt;"	*(char)
)	O
,	O
'>'	O
}	O
,	O
{	O
S	O
(	O
"&lt;"	*(char)
)	O
,	O
'<'	O
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
static	O
struct	O
transcode_map	struct(*(char),long,int)
*	O
ch2ent	(int)->(*(struct(*(char),long,int)))
(	O
int	O
c	int
)	O
{	O
struct	O
transcode_map	struct(*(char),long,int)
*	O
p	*(struct(*(char),long,int))
;	O
for	O
(	O
p	*(struct(*(char),long,int))
=	O
transcode_map	struct(*(char),long,int)
;	O
p	*(struct(*(char),long,int))
->	O
ent	*(char)
;	O
p	*(struct(*(char),long,int))
++	O
)	O
{	O
if	O
(	O
p	*(struct(*(char),long,int))
->	O
ch	int
==	O
c	int
)	O
return	O
p	*(struct(*(char),long,int))
;	O
}	O
return	O
NULL	O
;	O
}	O
struct	O
htmlent_encode_state	struct(array(char),int)
{	O
char	O
buf	array(char)
[	O
6	int
]	O
;	O
int	O
idx	int
;	O
}	O
;	O
static	O
enum	O
mu_filter_result	enum(int,int,int,int,int)
_htmlent_encoder	(*(void),enum(int,int,int,int,int),*(struct(*(char),long,*(char),long,int,int)))->(enum(int,int,int,int,int))
(	O
void	O
*	O
xd	*(void)
,	O
enum	O
mu_filter_command	enum(int,int,int,int,int)
cmd	enum(int,int,int,int,int)
,	O
struct	O
mu_filter_io	struct(*(char),long,*(char),long,int,int)
*	O
iobuf	*(struct(*(char),long,*(char),long,int,int))
)	O
{	O
struct	O
htmlent_encode_state	struct(array(char),int)
*	O
cp	*(struct(array(char),int))
=	O
xd	*(void)
;	O
const	O
char	O
*	O
iptr	*(char)
;	O
size_t	long
isize	long
;	O
char	O
*	O
optr	*(char)
;	O
size_t	long
osize	long
;	O
switch	O
(	O
cmd	enum(int,int,int,int,int)
)	O
{	O
case	O
mu_filter_init	int
:	O
cp	*(struct(array(char),int))
->	O
idx	int
=	O
-	O
1	int
;	O
return	O
mu_filter_ok	int
;	O
case	O
mu_filter_done	int
:	O
return	O
mu_filter_ok	int
;	O
default	O
:	O
break	O
;	O
}	O
iptr	*(char)
=	O
iobuf	*(struct(*(char),long,*(char),long,int,int))
->	O
input	*(char)
;	O
isize	long
=	O
iobuf	*(struct(*(char),long,*(char),long,int,int))
->	O
isize	long
;	O
optr	*(char)
=	O
iobuf	*(struct(*(char),long,*(char),long,int,int))
->	O
output	*(char)
;	O
osize	long
=	O
iobuf	*(struct(*(char),long,*(char),long,int,int))
->	O
osize	long
;	O
while	O
(	O
isize	long
&&	O
osize	long
)	O
{	O
if	O
(	O
cp	*(struct(array(char),int))
->	O
idx	int
>	O
0	int
)	O
{	O
*	O
optr	*(char)
++	O
=	O
cp	*(struct(array(char),int))
->	O
buf	array(char)
[	O
--	O
cp	*(struct(array(char),int))
->	O
idx	int
]	O
;	O
--	O
osize	long
;	O
}	O
else	O
{	O
struct	O
transcode_map	struct(*(char),long,int)
*	O
p	*(struct(*(char),long,int))
;	O
int	O
c	int
=	O
*	O
iptr	*(char)
++	O
;	O
--	O
isize	long
;	O
p	*(struct(*(char),long,int))
=	O
ch2ent	(int)->(*(struct(*(char),long,int)))
(	O
c	int
)	O
;	O
if	O
(	O
p	*(struct(*(char),long,int))
)	O
{	O
char	O
const	O
*	O
q	*(char)
=	O
p	*(struct(*(char),long,int))
->	O
ent	*(char)
+	O
p	*(struct(*(char),long,int))
->	O
len	long
;	O
cp	*(struct(array(char),int))
->	O
idx	int
=	O
0	int
;	O
while	O
(	O
q	*(char)
>	O
p	*(struct(*(char),long,int))
->	O
ent	*(char)
)	O
cp	*(struct(array(char),int))
->	O
buf	array(char)
[	O
cp	*(struct(array(char),int))
->	O
idx	int
++	O
]	O
=	O
*	O
--	O
q	*(char)
;	O
}	O
else	O
{	O
*	O
optr	*(char)
++	O
=	O
c	int
;	O
--	O
osize	long
;	O
}	O
}	O
}	O
iobuf	*(struct(*(char),long,*(char),long,int,int))
->	O
isize	long
-=	O
isize	long
;	O
iobuf	*(struct(*(char),long,*(char),long,int,int))
->	O
osize	long
-=	O
osize	long
;	O
return	O
mu_filter_ok	int
;	O
}	O
enum	O
htmlent_decode_phase	enum(int,int,int,int)
{	O
enc_init	int
,	O
enc_map	int
,	O
enc_rollback	int
,	O
enc_finish	int
}	O
;	O
struct	O
htmlent_decode_state	struct(enum(int,int,int,int),*(struct(*(char),long,int)),int,int)
{	O
enum	O
htmlent_decode_phase	enum(int,int,int,int)
phase	enum(int,int,int,int)
;	O
struct	O
transcode_map	struct(*(char),long,int)
*	O
map	*(struct(*(char),long,int))
;	O
int	O
idx	int
;	O
int	O
pos	int
;	O
}	O
;	O
static	O
enum	O
htmlent_decode_phase	enum(int,int,int,int)
nextchar	(*(struct(enum(int,int,int,int),*(struct(*`,long,int)),int,int)),int)->(enum(int,int,int,int))
(	O
struct	O
htmlent_decode_state	struct(enum(int,int,int,int),*(struct(*(char),long,int)),int,int)
*	O
s	*(char)
,	O
int	O
c	int
)	O
{	O
if	O
(	O
c	int
==	O
s	*(char)
->	O
map	*(struct(*(char),long,int))
->	O
ent	*(char)
[	O
s	*(char)
->	O
idx	int
]	O
)	O
{	O
if	O
(	O
++	O
s	*(char)
->	O
idx	int
==	O
s	*(char)
->	O
map	*(struct(*(char),long,int))
->	O
len	long
)	O
s	*(char)
->	O
phase	enum(int,int,int,int)
=	O
enc_finish	int
;	O
else	O
s	*(char)
->	O
phase	enum(int,int,int,int)
=	O
enc_map	int
;	O
}	O
else	O
{	O
struct	O
transcode_map	struct(*(char),long,int)
*	O
map	*(struct(*(char),long,int))
;	O
for	O
(	O
map	*(struct(*(char),long,int))
=	O
s	*(char)
->	O
map	*(struct(*(char),long,int))
;	O
map	*(struct(*(char),long,int))
->	O
ent	*(char)
&&	O
c	int
>	O
map	*(struct(*(char),long,int))
->	O
ent	*(char)
[	O
s	*(char)
->	O
idx	int
]	O
;	O
map	*(struct(*(char),long,int))
++	O
)	O
;	O
if	O
(	O
map	*(struct(*(char),long,int))
->	O
ent	*(char)
==	O
NULL	O
||	O
c	int
!=	O
map	*(struct(*(char),long,int))
->	O
ent	*(char)
[	O
s	*(char)
->	O
idx	int
]	O
)	O
{	O
if	O
(	O
s	*(char)
->	O
idx	int
!=	O
0	int
)	O
{	O
s	*(char)
->	O
phase	enum(int,int,int,int)
=	O
enc_rollback	int
;	O
s	*(char)
->	O
pos	int
=	O
0	int
;	O
}	O
else	O
DECODE_INIT	O
(	O
s	*(char)
)	O
;	O
}	O
else	O
{	O
s	*(char)
->	O
map	*(struct(*(char),long,int))
=	O
map	*(struct(*(char),long,int))
;	O
if	O
(	O
++	O
s	*(char)
->	O
idx	int
==	O
s	*(char)
->	O
map	*(struct(*(char),long,int))
->	O
len	long
)	O
s	*(char)
->	O
phase	enum(int,int,int,int)
=	O
enc_finish	int
;	O
else	O
s	*(char)
->	O
phase	enum(int,int,int,int)
=	O
enc_map	int
;	O
}	O
}	O
return	O
s	*(char)
->	O
phase	enum(int,int,int,int)
;	O
}	O
static	O
enum	O
mu_filter_result	enum(int,int,int,int,int)
_htmlent_decoder	(*(void),enum(int,int,int,int,int),*(struct(*(char),long,*(char),long,int,int)))->(enum(int,int,int,int,int))
(	O
void	O
*	O
xd	*(void)
,	O
enum	O
mu_filter_command	enum(int,int,int,int,int)
cmd	enum(int,int,int,int,int)
,	O
struct	O
mu_filter_io	struct(*(char),long,*(char),long,int,int)
*	O
iobuf	*(struct(*(char),long,*(char),long,int,int))
)	O
{	O
struct	O
htmlent_decode_state	struct(enum(int,int,int,int),*(struct(*(char),long,int)),int,int)
*	O
cp	*(struct(array(char),int))
=	O
xd	*(void)
;	O
const	O
char	O
*	O
iptr	*(char)
;	O
size_t	long
isize	long
;	O
char	O
*	O
optr	*(char)
;	O
size_t	long
osize	long
;	O
switch	O
(	O
cmd	enum(int,int,int,int,int)
)	O
{	O
case	O
mu_filter_init	int
:	O
DECODE_INIT	O
(	O
cp	*(struct(array(char),int))
)	O
;	O
return	O
mu_filter_ok	int
;	O
case	O
mu_filter_done	int
:	O
return	O
mu_filter_ok	int
;	O
default	O
:	O
break	O
;	O
}	O
iptr	*(char)
=	O
iobuf	*(struct(*(char),long,*(char),long,int,int))
->	O
input	*(char)
;	O
isize	long
=	O
iobuf	*(struct(*(char),long,*(char),long,int,int))
->	O
isize	long
;	O
optr	*(char)
=	O
iobuf	*(struct(*(char),long,*(char),long,int,int))
->	O
output	*(char)
;	O
osize	long
=	O
iobuf	*(struct(*(char),long,*(char),long,int,int))
->	O
osize	long
;	O
while	O
(	O
isize	long
&&	O
osize	long
)	O
{	O
switch	O
(	O
cp	*(struct(array(char),int))
->	O
phase	enum(int,int,int,int)
)	O
{	O
case	O
enc_init	int
:	O
nextchar	(*(struct(enum(int,int,int,int),*(struct(*`,long,int)),int,int)),int)->(enum(int,int,int,int))
(	O
cp	*(struct(array(char),int))
,	O
*	O
iptr	*(char)
)	O
;	O
if	O
(	O
cp	*(struct(array(char),int))
->	O
phase	enum(int,int,int,int)
==	O
enc_init	int
)	O
{	O
*	O
optr	*(char)
++	O
=	O
*	O
iptr	*(char)
;	O
--	O
osize	long
;	O
}	O
++	O
iptr	*(char)
;	O
--	O
isize	long
;	O
break	O
;	O
case	O
enc_map	int
:	O
nextchar	(*(struct(enum(int,int,int,int),*(struct(*`,long,int)),int,int)),int)->(enum(int,int,int,int))
(	O
cp	*(struct(array(char),int))
,	O
*	O
iptr	*(char)
)	O
;	O
if	O
(	O
cp	*(struct(array(char),int))
->	O
phase	enum(int,int,int,int)
==	O
enc_map	int
||	O
cp	*(struct(array(char),int))
->	O
phase	enum(int,int,int,int)
==	O
enc_finish	int
)	O
{	O
++	O
iptr	*(char)
;	O
--	O
isize	long
;	O
}	O
else	O
if	O
(	O
cp	*(struct(array(char),int))
->	O
phase	enum(int,int,int,int)
==	O
enc_init	int
)	O
{	O
*	O
optr	*(char)
++	O
=	O
*	O
iptr	*(char)
++	O
;	O
--	O
osize	long
;	O
--	O
isize	long
;	O
}	O
break	O
;	O
case	O
enc_finish	int
:	O
*	O
optr	*(char)
++	O
=	O
cp	*(struct(array(char),int))
->	O
map	*(struct(*(char),long,int))
->	O
ch	int
;	O
--	O
osize	long
;	O
DECODE_INIT	O
(	O
cp	*(struct(array(char),int))
)	O
;	O
break	O
;	O
case	O
enc_rollback	int
:	O
*	O
optr	*(char)
++	O
=	O
cp	*(struct(array(char),int))
->	O
map	*(struct(*(char),long,int))
->	O
ent	*(char)
[	O
cp	*(struct(array(char),int))
->	O
pos	int
]	O
;	O
--	O
osize	long
;	O
if	O
(	O
++	O
cp	*(struct(array(char),int))
->	O
pos	int
==	O
cp	*(struct(array(char),int))
->	O
idx	int
)	O
DECODE_INIT	O
(	O
cp	*(struct(array(char),int))
)	O
;	O
break	O
;	O
}	O
}	O
iobuf	*(struct(*(char),long,*(char),long,int,int))
->	O
isize	long
-=	O
isize	long
;	O
iobuf	*(struct(*(char),long,*(char),long,int,int))
->	O
osize	long
-=	O
osize	long
;	O
return	O
mu_filter_ok	int
;	O
}	O
static	O
int	O
alloc_state	(*(*(void)),int,int,*(*(char)))->(int)
(	O
void	O
*	O
*	O
pret	*(*(struct))
,	O
int	O
mode	int
,	O
int	O
argc	int
MU_ARG_UNUSED	O
,	O
const	O
char	O
*	O
*	O
argv	*(*(char))
MU_ARG_UNUSED	O
)	O
{	O
union	O
{	O
struct	O
htmlent_decode_state	struct(enum(int,int,int,int),*(struct(*(char),long,int)),int,int)
decode	struct(enum(int,int,int,int),*(struct(*(char),long,int)),int,int)
;	O
struct	O
htmlent_encode_state	struct(array(char),int)
encode	struct(array(char),int)
;	O
}	O
*	O
cp	*(struct(array(char),int))
;	O
switch	O
(	O
mode	int
)	O
{	O
case	O
MU_FILTER_ENCODE	int
:	O
cp	*(struct(array(char),int))
=	O
malloc	(long)->(*(void))
(	O
sizeof	O
(	O
cp	*(struct(array(char),int))
->	O
encode	struct(array(char),int)
)	O
)	O
;	O
if	O
(	O
!	O
cp	*(struct(array(char),int))
)	O
return	O
ENOMEM	int
;	O
cp	*(struct(array(char),int))
->	O
encode	struct(array(char),int)
.	O
idx	int
=	O
-	O
1	int
;	O
break	O
;	O
case	O
MU_FILTER_DECODE	int
:	O
cp	*(struct(array(char),int))
=	O
malloc	(long)->(*(void))
(	O
sizeof	O
(	O
cp	*(struct(array(char),int))
->	O
decode	struct(enum(int,int,int,int),*(struct(*(char),long,int)),int,int)
)	O
)	O
;	O
if	O
(	O
!	O
cp	*(struct(array(char),int))
)	O
return	O
ENOMEM	int
;	O
cp	*(struct(array(char),int))
->	O
decode	struct(enum(int,int,int,int),*(struct(*(char),long,int)),int,int)
.	O
idx	int
=	O
0	int
;	O
cp	*(struct(array(char),int))
->	O
decode	struct(enum(int,int,int,int),*(struct(*(char),long,int)),int,int)
.	O
map	*(struct(*(char),long,int))
=	O
transcode_map	struct(*(char),long,int)
;	O
break	O
;	O
default	O
:	O
abort	()->(void)
(	O
)	O
;	O
}	O
*	O
pret	*(*(struct))
=	O
cp	*(struct(array(char),int))
;	O
return	O
0	int
;	O
}	O
static	O
struct	O
_mu_filter_record	struct(*(char),*((*(*(void)),int,int,*(*(char)))->(int)),*((*(void),enum(int,int,int,int,int),*(struct(*(char),long,*(char),long,int,int)))->(enum(int,int,int,int,int))),*((*(void),enum(int,int,int,int,int),*(struct(*(char),long,*(char),long,int,int)))->(enum(int,int,int,int,int))))
_htmlent_filter	struct(*(char),*((*(*(void)),int,int,*(*(char)))->(int)),*((*(void),enum(int,int,int,int,int),*(struct(*`,long,*`,long,int,int)))->(enum(int,int,int,int,int))),*((*(void),enum(int,int,int,int,int),*(struct(*`,long,*`,long,int,int)))->(enum(int,int,int,int,int))))
=	O
{	O
"htmlent"	*(char)
,	O
alloc_state	(*(*(void)),int,int,*(*(char)))->(int)
,	O
_htmlent_encoder	(*(void),enum(int,int,int,int,int),*(struct(*(char),long,*(char),long,int,int)))->(enum(int,int,int,int,int))
,	O
_htmlent_decoder	(*(void),enum(int,int,int,int,int),*(struct(*(char),long,*(char),long,int,int)))->(enum(int,int,int,int,int))
,	O
}	O
;	O
mu_filter_record_t	*(struct)
mu_htmlent_filter	*(struct(*(char),*((*(*`),int,int,*(*`))->(int)),*((*(void),enum(int,int,int,int,int),*(struct`))->(enum(int,int,int,int,int))),*((*(void),enum(int,int,int,int,int),*(struct`))->(enum(int,int,int,int,int)))))
=	O
&	O
_htmlent_filter	struct(*(char),*((*(*(void)),int,int,*(*(char)))->(int)),*((*(void),enum(int,int,int,int,int),*(struct(*`,long,*`,long,int,int)))->(enum(int,int,int,int,int))),*((*(void),enum(int,int,int,int,int),*(struct(*`,long,*`,long,int,int)))->(enum(int,int,int,int,int))))
;	O
