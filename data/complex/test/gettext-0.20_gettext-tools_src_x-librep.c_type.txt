static	O
bool	bool
extract_all	bool
=	O
false	int
;	O
static	O
hash_table	struct(long,long,*(struct),*(struct),struct(long,*(struct(*(char),*(struct(*`,*`,array(char))),array(char))),*(char),*(char),*(char),union(long,*(void)),long,union(*((long)->(*(void))),*((*(void),long)->(*(void)))),union(*((*(void))->(void)),*((*(void),*(void))->(void))),*(void),int,int,int))
keywords	struct(long,long,*(struct),*(struct),struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),long,union(*((long)->(*`)),*((*`,long)->(*`))),union(*((*`)->(void)),*((*`,*`)->(void))),*(void),int,int,int))
;	O
static	O
bool	bool
default_keywords	bool
=	O
true	int
;	O
void	O
x_librep_extract_all	()->(void)
(	O
)	O
{	O
extract_all	bool
=	O
true	int
;	O
}	O
void	O
x_librep_keyword	(*(char))->(void)
(	O
const	O
char	O
*	O
name	*(char)
)	O
{	O
if	O
(	O
name	*(char)
==	O
NULL	O
)	O
default_keywords	bool
=	O
false	int
;	O
else	O
{	O
const	O
char	O
*	O
end	*(char)
;	O
struct	O
callshape	struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long))
shape	*(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long)))
;	O
const	O
char	O
*	O
colon	*(char)
;	O
if	O
(	O
keywords	struct(long,long,*(struct),*(struct),struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),long,union(*((long)->(*`)),*((*`,long)->(*`))),union(*((*`)->(void)),*((*`,*`)->(void))),*(void),int,int,int))
.	O
table	*(struct)
==	O
NULL	O
)	O
hash_init	(*(struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))),long)->(int)
(	O
&	O
keywords	struct(long,long,*(struct),*(struct),struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),long,union(*((long)->(*`)),*((*`,long)->(*`))),union(*((*`)->(void)),*((*`,*`)->(void))),*(void),int,int,int))
,	O
100	int
)	O
;	O
split_keywordspec	(*(char),*(*(char)),*(struct(int,int,int,bool,bool,int,struct(*(*`),long,long))))->(void)
(	O
name	*(char)
,	O
&	O
end	*(char)
,	O
&	O
shape	*(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long)))
)	O
;	O
colon	*(char)
=	O
strchr	(*(char),int)->(*(char))
(	O
name	*(char)
,	O
':'	O
)	O
;	O
if	O
(	O
colon	*(char)
==	O
NULL	O
||	O
colon	*(char)
>=	O
end	*(char)
)	O
insert_keyword_callshape	(*(struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))),*(char),long,*(struct(int,int,int,bool,bool,int,struct(*(*`),long,long))))->(void)
(	O
&	O
keywords	struct(long,long,*(struct),*(struct),struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),long,union(*((long)->(*`)),*((*`,long)->(*`))),union(*((*`)->(void)),*((*`,*`)->(void))),*(void),int,int,int))
,	O
name	*(char)
,	O
end	*(char)
-	O
name	*(char)
,	O
&	O
shape	*(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long)))
)	O
;	O
}	O
}	O
static	O
void	O
init_keywords	()->(void)
(	O
)	O
{	O
if	O
(	O
default_keywords	bool
)	O
{	O
x_librep_keyword	(*(char))->(void)
(	O
"_"	*(char)
)	O
;	O
default_keywords	bool
=	O
false	int
;	O
}	O
}	O
void	O
init_flag_table_librep	()->(void)
(	O
)	O
{	O
xgettext_record_flag	(*(char))->(void)
(	O
"_:1:pass-librep-format"	*(char)
)	O
;	O
xgettext_record_flag	(*(char))->(void)
(	O
"format:2:librep-format"	*(char)
)	O
;	O
}	O
static	O
FILE	struct
*	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
;	O
static	O
int	O
do_getc	()->(int)
(	O
)	O
{	O
int	O
c	int
=	O
getc	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
if	O
(	O
c	int
==	O
EOF	O
)	O
{	O
if	O
(	O
ferror	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
)	O
error	(int,int,*(char))->(void)
(	O
EXIT_FAILURE	int
,	O
errno	O
,	O
_	O
(	O
"error while reading \"%s\""	*(char)
)	O
,	O
real_file_name	*(char)
)	O
;	O
}	O
else	O
if	O
(	O
c	int
==	O
'\n'	O
)	O
line_number	long
++	O
;	O
return	O
c	int
;	O
}	O
static	O
void	O
do_ungetc	(int)->(void)
(	O
int	O
c	int
)	O
{	O
if	O
(	O
c	int
==	O
'\n'	O
)	O
line_number	long
--	O
;	O
ungetc	(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
c	int
,	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
}	O
struct	O
token	struct(int,int,*(char))
{	O
int	O
allocated	int
;	O
int	O
charcount	int
;	O
char	O
*	O
chars	*(char)
;	O
}	O
;	O
static	O
inline	O
void	O
init_token	(*(struct(int,int,*(char))))->(void)
(	O
struct	O
token	struct(int,int,*(char))
*	O
tp	*(struct(int,int,*(char)))
)	O
{	O
tp	*(struct(int,int,*(char)))
->	O
allocated	int
=	O
10	int
;	O
tp	*(struct(int,int,*(char)))
->	O
chars	*(char)
=	O
XNMALLOC	O
(	O
tp	*(struct(int,int,*(char)))
->	O
allocated	int
,	O
char	O
)	O
;	O
tp	*(struct(int,int,*(char)))
->	O
charcount	int
=	O
0	int
;	O
}	O
static	O
inline	O
void	O
free_token	(*(struct(int,int,*(char))))->(void)
(	O
struct	O
token	struct(int,int,*(char))
*	O
tp	*(struct(int,int,*(char)))
)	O
{	O
free	(*(void))->(void)
(	O
tp	*(struct(int,int,*(char)))
->	O
chars	*(char)
)	O
;	O
}	O
static	O
inline	O
void	O
grow_token	(*(struct(int,int,*(char))))->(void)
(	O
struct	O
token	struct(int,int,*(char))
*	O
tp	*(struct(int,int,*(char)))
)	O
{	O
if	O
(	O
tp	*(struct(int,int,*(char)))
->	O
charcount	int
==	O
tp	*(struct(int,int,*(char)))
->	O
allocated	int
)	O
{	O
tp	*(struct(int,int,*(char)))
->	O
allocated	int
*=	O
2	int
;	O
tp	*(struct(int,int,*(char)))
->	O
chars	*(char)
=	O
(	O
char	O
*	O
)	O
xrealloc	(*(void),long)->(*(void))
(	O
tp	*(struct(int,int,*(char)))
->	O
chars	*(char)
,	O
tp	*(struct(int,int,*(char)))
->	O
allocated	int
*	O
sizeof	O
(	O
char	O
)	O
)	O
;	O
}	O
}	O
static	O
bool	bool
read_token	(*(struct(int,int,*(char))),*(int))->(bool)
(	O
struct	O
token	struct(int,int,*(char))
*	O
tp	*(struct(int,int,*(char)))
,	O
const	O
int	O
*	O
first	*(struct)
)	O
{	O
int	O
c	int
;	O
int	O
radix	int
=	O
-	O
1	int
;	O
int	O
nfirst	int
=	O
0	int
;	O
bool	bool
exact	bool
=	O
true	int
;	O
bool	bool
rational	bool
=	O
false	int
;	O
bool	bool
exponent	bool
=	O
false	int
;	O
bool	bool
had_sign	bool
=	O
false	int
;	O
bool	bool
expecting_prefix	bool
=	O
false	int
;	O
init_token	(*(struct(int,int,*(char))))->(void)
(	O
tp	*(struct(int,int,*(char)))
)	O
;	O
if	O
(	O
first	*(struct)
)	O
c	int
=	O
*	O
first	*(struct)
;	O
else	O
c	int
=	O
do_getc	()->(int)
(	O
)	O
;	O
for	O
(	O
;	O
;	O
c	int
=	O
do_getc	()->(int)
(	O
)	O
)	O
{	O
switch	O
(	O
c	int
)	O
{	O
case	O
EOF	O
:	O
goto	O
done	O
;	O
case	O
' '	O
:	O
case	O
'\t'	O
:	O
case	O
'\n'	O
:	O
case	O
'\f'	O
:	O
case	O
'\r'	O
:	O
case	O
'('	O
:	O
case	O
')'	O
:	O
case	O
'['	O
:	O
case	O
']'	O
:	O
case	O
'\''	O
:	O
case	O
'"'	O
:	O
case	O
';'	O
:	O
case	O
','	O
:	O
case	O
'`'	O
:	O
goto	O
done	O
;	O
case	O
'\\'	O
:	O
radix	int
=	O
0	int
;	O
c	int
=	O
do_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
c	int
==	O
EOF	O
)	O
break	O
;	O
grow_token	(*(struct(int,int,*(char))))->(void)
(	O
tp	*(struct(int,int,*(char)))
)	O
;	O
tp	*(struct(int,int,*(char)))
->	O
chars	*(char)
[	O
tp	*(struct(int,int,*(char)))
->	O
charcount	int
++	O
]	O
=	O
c	int
;	O
break	O
;	O
case	O
'|'	O
:	O
radix	int
=	O
0	int
;	O
for	O
(	O
;	O
;	O
)	O
{	O
c	int
=	O
do_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
c	int
==	O
EOF	O
||	O
c	int
==	O
'|'	O
)	O
break	O
;	O
grow_token	(*(struct(int,int,*(char))))->(void)
(	O
tp	*(struct(int,int,*(char)))
)	O
;	O
tp	*(struct(int,int,*(char)))
->	O
chars	*(char)
[	O
tp	*(struct(int,int,*(char)))
->	O
charcount	int
++	O
]	O
=	O
c	int
;	O
}	O
break	O
;	O
default	O
:	O
if	O
(	O
radix	int
!=	O
0	int
)	O
{	O
if	O
(	O
expecting_prefix	bool
)	O
{	O
switch	O
(	O
c	int
)	O
{	O
case	O
'B'	O
:	O
case	O
'b'	O
:	O
radix	int
=	O
2	int
;	O
break	O
;	O
case	O
'O'	O
:	O
case	O
'o'	O
:	O
radix	int
=	O
8	int
;	O
break	O
;	O
case	O
'D'	O
:	O
case	O
'd'	O
:	O
radix	int
=	O
10	int
;	O
break	O
;	O
case	O
'X'	O
:	O
case	O
'x'	O
:	O
radix	int
=	O
16	int
;	O
break	O
;	O
case	O
'E'	O
:	O
case	O
'e'	O
:	O
case	O
'I'	O
:	O
case	O
'i'	O
:	O
break	O
;	O
default	O
:	O
radix	int
=	O
0	int
;	O
break	O
;	O
}	O
expecting_prefix	bool
=	O
false	int
;	O
nfirst	int
=	O
tp	*(struct(int,int,*(char)))
->	O
charcount	int
+	O
1	int
;	O
}	O
else	O
if	O
(	O
tp	*(struct(int,int,*(char)))
->	O
charcount	int
==	O
nfirst	int
&&	O
(	O
c	int
==	O
'+'	O
||	O
c	int
==	O
'-'	O
||	O
c	int
==	O
'#'	O
)	O
)	O
{	O
if	O
(	O
c	int
==	O
'#'	O
)	O
{	O
if	O
(	O
had_sign	bool
)	O
radix	int
=	O
0	int
;	O
else	O
expecting_prefix	bool
=	O
true	int
;	O
}	O
else	O
had_sign	bool
=	O
true	int
;	O
nfirst	int
=	O
tp	*(struct(int,int,*(char)))
->	O
charcount	int
+	O
1	int
;	O
}	O
else	O
{	O
switch	O
(	O
radix	int
)	O
{	O
case	O
-	O
1	int
:	O
if	O
(	O
c	int
==	O
'.'	O
)	O
{	O
radix	int
=	O
10	int
;	O
exact	bool
=	O
false	int
;	O
}	O
else	O
if	O
(	O
!	O
(	O
c	int
>=	O
'0'	O
&&	O
c	int
<=	O
'9'	O
)	O
)	O
radix	int
=	O
0	int
;	O
else	O
if	O
(	O
c	int
==	O
'0'	O
)	O
radix	int
=	O
1	int
;	O
else	O
radix	int
=	O
10	int
;	O
break	O
;	O
case	O
1	int
:	O
switch	O
(	O
c	int
)	O
{	O
case	O
'X'	O
:	O
case	O
'x'	O
:	O
radix	int
=	O
16	int
;	O
nfirst	int
=	O
tp	*(struct(int,int,*(char)))
->	O
charcount	int
+	O
1	int
;	O
break	O
;	O
case	O
'0'	O
:	O
case	O
'1'	O
:	O
case	O
'2'	O
:	O
case	O
'3'	O
:	O
case	O
'4'	O
:	O
case	O
'5'	O
:	O
case	O
'6'	O
:	O
case	O
'7'	O
:	O
radix	int
=	O
8	int
;	O
nfirst	int
=	O
tp	*(struct(int,int,*(char)))
->	O
charcount	int
;	O
break	O
;	O
case	O
'.'	O
:	O
case	O
'E'	O
:	O
case	O
'e'	O
:	O
radix	int
=	O
10	int
;	O
exact	bool
=	O
false	int
;	O
break	O
;	O
case	O
'/'	O
:	O
radix	int
=	O
10	int
;	O
rational	bool
=	O
true	int
;	O
break	O
;	O
default	O
:	O
radix	int
=	O
0	int
;	O
break	O
;	O
}	O
break	O
;	O
default	O
:	O
switch	O
(	O
c	int
)	O
{	O
case	O
'.'	O
:	O
if	O
(	O
exact	bool
&&	O
radix	int
==	O
10	int
&&	O
!	O
rational	bool
)	O
exact	bool
=	O
false	int
;	O
else	O
radix	int
=	O
0	int
;	O
break	O
;	O
case	O
'/'	O
:	O
if	O
(	O
exact	bool
&&	O
!	O
rational	bool
)	O
rational	bool
=	O
true	int
;	O
else	O
radix	int
=	O
0	int
;	O
break	O
;	O
case	O
'E'	O
:	O
case	O
'e'	O
:	O
if	O
(	O
radix	int
==	O
10	int
)	O
{	O
if	O
(	O
!	O
rational	bool
&&	O
!	O
exponent	bool
)	O
{	O
exponent	bool
=	O
true	int
;	O
exact	bool
=	O
false	int
;	O
}	O
else	O
radix	int
=	O
0	int
;	O
break	O
;	O
}	O
default	O
:	O
if	O
(	O
exponent	bool
&&	O
(	O
c	int
==	O
'+'	O
||	O
c	int
==	O
'-'	O
)	O
)	O
break	O
;	O
if	O
(	O
(	O
radix	int
<=	O
10	int
&&	O
!	O
(	O
c	int
>=	O
'0'	O
&&	O
c	int
<=	O
'0'	O
+	O
radix	int
-	O
1	int
)	O
)	O
||	O
(	O
radix	int
==	O
16	int
&&	O
!	O
c_isxdigit	(int)->(bool)
(	O
c	int
)	O
)	O
)	O
radix	int
=	O
0	int
;	O
break	O
;	O
}	O
break	O
;	O
}	O
}	O
}	O
else	O
{	O
if	O
(	O
c	int
==	O
'#'	O
)	O
goto	O
done	O
;	O
}	O
grow_token	(*(struct(int,int,*(char))))->(void)
(	O
tp	*(struct(int,int,*(char)))
)	O
;	O
tp	*(struct(int,int,*(char)))
->	O
chars	*(char)
[	O
tp	*(struct(int,int,*(char)))
->	O
charcount	int
++	O
]	O
=	O
c	int
;	O
}	O
}	O
done	O
:	O
if	O
(	O
c	int
!=	O
EOF	O
)	O
do_ungetc	(int)->(void)
(	O
c	int
)	O
;	O
if	O
(	O
radix	int
>	O
0	int
&&	O
nfirst	int
<	O
tp	*(struct(int,int,*(char)))
->	O
charcount	int
)	O
return	O
false	int
;	O
else	O
return	O
true	int
;	O
}	O
static	O
char	O
*	O
buffer	*(char)
;	O
static	O
size_t	long
bufmax	long
;	O
static	O
size_t	long
buflen	long
;	O
static	O
inline	O
void	O
comment_start	()->(void)
(	O
)	O
{	O
buflen	long
=	O
0	int
;	O
}	O
static	O
inline	O
void	O
comment_add	(int)->(void)
(	O
int	O
c	int
)	O
{	O
if	O
(	O
buflen	long
>=	O
bufmax	long
)	O
{	O
bufmax	long
=	O
2	int
*	O
bufmax	long
+	O
10	int
;	O
buffer	*(char)
=	O
xrealloc	(*(void),long)->(*(void))
(	O
buffer	*(char)
,	O
bufmax	long
)	O
;	O
}	O
buffer	*(char)
[	O
buflen	long
++	O
]	O
=	O
c	int
;	O
}	O
static	O
inline	O
void	O
comment_line_end	(long)->(void)
(	O
size_t	long
chars_to_remove	long
)	O
{	O
buflen	long
-=	O
chars_to_remove	long
;	O
while	O
(	O
buflen	long
>=	O
1	int
&&	O
(	O
buffer	*(char)
[	O
buflen	long
-	O
1	int
]	O
==	O
' '	O
||	O
buffer	*(char)
[	O
buflen	long
-	O
1	int
]	O
==	O
'\t'	O
)	O
)	O
--	O
buflen	long
;	O
if	O
(	O
chars_to_remove	long
==	O
0	int
&&	O
buflen	long
>=	O
bufmax	long
)	O
{	O
bufmax	long
=	O
2	int
*	O
bufmax	long
+	O
10	int
;	O
buffer	*(char)
=	O
xrealloc	(*(void),long)->(*(void))
(	O
buffer	*(char)
,	O
bufmax	long
)	O
;	O
}	O
buffer	*(char)
[	O
buflen	long
]	O
=	O
'\0'	O
;	O
savable_comment_add	(*(char))->(void)
(	O
buffer	*(char)
)	O
;	O
}	O
static	O
int	O
last_comment_line	int
;	O
static	O
int	O
last_non_comment_line	int
;	O
static	O
message_list_ty	struct
*	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
;	O
enum	O
object_type	enum(int,int,int,int,int,int)
{	O
t_symbol	int
,	O
t_string	int
,	O
t_other	int
,	O
t_dot	int
,	O
t_close	int
,	O
t_eof	int
}	O
;	O
struct	O
object	struct(enum(int,int,int,int,int,int),*(struct(int,int,*(char))),int)
{	O
enum	O
object_type	enum(int,int,int,int,int,int)
type	char
;	O
struct	O
token	struct(int,int,*(char))
*	O
token	struct(int,int,*(char))
;	O
int	O
line_number_at_start	int
;	O
}	O
;	O
static	O
inline	O
void	O
free_object	(*(struct(enum(int,int,int,int,int,int),*(struct(int,int,*`)),int)))->(void)
(	O
struct	O
object	struct(enum(int,int,int,int,int,int),*(struct(int,int,*(char))),int)
*	O
op	*(struct(enum(int,int,int,int,int,int),*(struct(int,int,*(char))),int))
)	O
{	O
if	O
(	O
op	*(struct(enum(int,int,int,int,int,int),*(struct(int,int,*(char))),int))
->	O
type	char
==	O
t_symbol	int
||	O
op	*(struct(enum(int,int,int,int,int,int),*(struct(int,int,*(char))),int))
->	O
type	char
==	O
t_string	int
)	O
{	O
free_token	(*(struct(int,int,*(char))))->(void)
(	O
op	*(struct(enum(int,int,int,int,int,int),*(struct(int,int,*(char))),int))
->	O
token	struct(int,int,*(char))
)	O
;	O
free	(*(void))->(void)
(	O
op	*(struct(enum(int,int,int,int,int,int),*(struct(int,int,*(char))),int))
->	O
token	struct(int,int,*(char))
)	O
;	O
}	O
}	O
static	O
char	O
*	O
string_of_object	(*(struct(enum(int,int,int,int,int,int),*(struct(int,int,*`)),int)))->(*(char))
(	O
const	O
struct	O
object	struct(enum(int,int,int,int,int,int),*(struct(int,int,*(char))),int)
*	O
op	*(struct(enum(int,int,int,int,int,int),*(struct(int,int,*(char))),int))
)	O
{	O
char	O
*	O
str	*(char)
;	O
int	O
n	long
;	O
if	O
(	O
!	O
(	O
op	*(struct(enum(int,int,int,int,int,int),*(struct(int,int,*(char))),int))
->	O
type	char
==	O
t_symbol	int
||	O
op	*(struct(enum(int,int,int,int,int,int),*(struct(int,int,*(char))),int))
->	O
type	char
==	O
t_string	int
)	O
)	O
abort	()->(void)
(	O
)	O
;	O
n	long
=	O
op	*(struct(enum(int,int,int,int,int,int),*(struct(int,int,*(char))),int))
->	O
token	struct(int,int,*(char))
->	O
charcount	int
;	O
str	*(char)
=	O
XNMALLOC	O
(	O
n	long
+	O
1	int
,	O
char	O
)	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
str	*(char)
,	O
op	*(struct(enum(int,int,int,int,int,int),*(struct(int,int,*(char))),int))
->	O
token	struct(int,int,*(char))
->	O
chars	*(char)
,	O
n	long
)	O
;	O
str	*(char)
[	O
n	long
]	O
=	O
'\0'	O
;	O
return	O
str	*(char)
;	O
}	O
static	O
flag_context_list_table_ty	struct(long,long,*(struct),*(struct),struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),long,union(*((long)->(*`)),*((*`,long)->(*`))),union(*((*`)->(void)),*((*`,*`)->(void))),*(void),int,int,int))
*	O
flag_context_list_table	*(struct(long,long,*(struct),*(struct),struct(long,*(struct(*`,*`,array(char))),*(char),*(char),*(char),union(long,*(void)),long,union(*((long)->(*`)),*((*`,long)->(*`))),union(*((*`)->(void)),*((*`,*`)->(void))),*(void),int,int,int)))
;	O
static	O
int	O
do_getc_escaped	(int)->(int)
(	O
int	O
c	int
)	O
{	O
switch	O
(	O
c	int
)	O
{	O
case	O
'n'	O
:	O
return	O
'\n'	O
;	O
case	O
'r'	O
:	O
return	O
'\r'	O
;	O
case	O
'f'	O
:	O
return	O
'\f'	O
;	O
case	O
't'	O
:	O
return	O
'\t'	O
;	O
case	O
'v'	O
:	O
return	O
'\v'	O
;	O
case	O
'a'	O
:	O
return	O
'\a'	O
;	O
case	O
'^'	O
:	O
c	int
=	O
do_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
c	int
==	O
EOF	O
)	O
return	O
EOF	O
;	O
return	O
c	int
&	O
0x1f	int
;	O
case	O
'0'	O
:	O
case	O
'1'	O
:	O
case	O
'2'	O
:	O
case	O
'3'	O
:	O
case	O
'4'	O
:	O
case	O
'5'	O
:	O
case	O
'6'	O
:	O
case	O
'7'	O
:	O
{	O
int	O
n	long
=	O
c	int
-	O
'0'	O
;	O
c	int
=	O
do_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
c	int
!=	O
EOF	O
)	O
{	O
if	O
(	O
c	int
>=	O
'0'	O
&&	O
c	int
<=	O
'7'	O
)	O
{	O
n	long
=	O
(	O
n	long
<<	O
3	int
)	O
+	O
(	O
c	int
-	O
'0'	O
)	O
;	O
c	int
=	O
do_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
c	int
!=	O
EOF	O
)	O
{	O
if	O
(	O
c	int
>=	O
'0'	O
&&	O
c	int
<=	O
'7'	O
)	O
n	long
=	O
(	O
n	long
<<	O
3	int
)	O
+	O
(	O
c	int
-	O
'0'	O
)	O
;	O
else	O
do_ungetc	(int)->(void)
(	O
c	int
)	O
;	O
}	O
}	O
else	O
do_ungetc	(int)->(void)
(	O
c	int
)	O
;	O
}	O
return	O
(	O
unsigned	O
char	O
)	O
n	long
;	O
}	O
case	O
'x'	O
:	O
{	O
int	O
n	long
=	O
0	int
;	O
for	O
(	O
;	O
;	O
)	O
{	O
c	int
=	O
do_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
c	int
==	O
EOF	O
)	O
break	O
;	O
else	O
if	O
(	O
c	int
>=	O
'0'	O
&&	O
c	int
<=	O
'9'	O
)	O
n	long
=	O
(	O
n	long
<<	O
4	int
)	O
+	O
(	O
c	int
-	O
'0'	O
)	O
;	O
else	O
if	O
(	O
c	int
>=	O
'A'	O
&&	O
c	int
<=	O
'F'	O
)	O
n	long
=	O
(	O
n	long
<<	O
4	int
)	O
+	O
(	O
c	int
-	O
'A'	O
+	O
10	int
)	O
;	O
else	O
if	O
(	O
c	int
>=	O
'a'	O
&&	O
c	int
<=	O
'f'	O
)	O
n	long
=	O
(	O
n	long
<<	O
4	int
)	O
+	O
(	O
c	int
-	O
'a'	O
+	O
10	int
)	O
;	O
else	O
{	O
do_ungetc	(int)->(void)
(	O
c	int
)	O
;	O
break	O
;	O
}	O
}	O
return	O
(	O
unsigned	O
char	O
)	O
n	long
;	O
}	O
default	O
:	O
return	O
c	int
;	O
}	O
}	O
static	O
void	O
read_object	(*(struct(enum(int,int,int,int,int,int),*(struct(int,int,*`)),int)),struct(int,int,int,int,int,int))->(void)
(	O
struct	O
object	struct(enum(int,int,int,int,int,int),*(struct(int,int,*(char))),int)
*	O
op	*(struct(enum(int,int,int,int,int,int),*(struct(int,int,*(char))),int))
,	O
flag_context_ty	struct
outer_context	struct(int,int,int,int,int,int)
)	O
{	O
for	O
(	O
;	O
;	O
)	O
{	O
int	O
c	int
;	O
c	int
=	O
do_getc	()->(int)
(	O
)	O
;	O
switch	O
(	O
c	int
)	O
{	O
case	O
EOF	O
:	O
op	*(struct(enum(int,int,int,int,int,int),*(struct(int,int,*(char))),int))
->	O
type	char
=	O
t_eof	int
;	O
return	O
;	O
case	O
'\n'	O
:	O
if	O
(	O
last_non_comment_line	int
>	O
last_comment_line	int
)	O
savable_comment_reset	()->(void)
(	O
)	O
;	O
continue	O
;	O
case	O
' '	O
:	O
case	O
'\t'	O
:	O
case	O
'\f'	O
:	O
case	O
'\r'	O
:	O
continue	O
;	O
case	O
'('	O
:	O
{	O
int	O
arg	int
=	O
0	int
;	O
flag_context_list_iterator_ty	struct
context_iter	struct(int,*(struct(int,struct(int,int,int,int,int,int),*(struct(int,struct`,*`)))))
;	O
const	O
struct	O
callshapes	struct(*(char),long,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long))))
*	O
shapes	array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long)))
=	O
NULL	O
;	O
struct	O
arglist_parser	struct(*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int)))),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long))))
*	O
argparser	*(struct(*(struct(*(*`),long,long,bool,struct(long,long,*`,*`,struct`))),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long)))))
=	O
NULL	O
;	O
for	O
(	O
;	O
;	O
arg	int
++	O
)	O
{	O
struct	O
object	struct(enum(int,int,int,int,int,int),*(struct(int,int,*(char))),int)
inner	struct(enum(int,int,int,int,int,int),*(struct(int,int,*(char))),int)
;	O
flag_context_ty	struct
inner_context	struct(int,int,int,int,int,int)
;	O
if	O
(	O
arg	int
==	O
0	int
)	O
inner_context	struct(int,int,int,int,int,int)
=	O
null_context	struct(int,int,int,int,int,int)
;	O
else	O
inner_context	struct(int,int,int,int,int,int)
=	O
inherited_context	(struct(int,int,int,int,int,int),struct(int,int,int,int,int,int))->(struct(int,int,int,int,int,int))
(	O
outer_context	struct(int,int,int,int,int,int)
,	O
flag_context_list_iterator_advance	(*(struct(int,*(struct(int,struct`,*`)))))->(struct(int,int,int,int,int,int))
(	O
&	O
context_iter	struct(int,*(struct(int,struct(int,int,int,int,int,int),*(struct(int,struct`,*`)))))
)	O
)	O
;	O
read_object	(*(struct(enum(int,int,int,int,int,int),*(struct(int,int,*`)),int)),struct(int,int,int,int,int,int))->(void)
(	O
&	O
inner	struct(enum(int,int,int,int,int,int),*(struct(int,int,*(char))),int)
,	O
inner_context	struct(int,int,int,int,int,int)
)	O
;	O
if	O
(	O
inner	struct(enum(int,int,int,int,int,int),*(struct(int,int,*(char))),int)
.	O
type	char
==	O
t_close	int
)	O
{	O
op	*(struct(enum(int,int,int,int,int,int),*(struct(int,int,*(char))),int))
->	O
type	char
=	O
t_other	int
;	O
last_non_comment_line	int
=	O
line_number	long
;	O
if	O
(	O
argparser	*(struct(*(struct(*(*`),long,long,bool,struct(long,long,*`,*`,struct`))),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long)))))
!=	O
NULL	O
)	O
arglist_parser_done	(*(struct(*(struct(*`,long,long,bool,struct`)),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long))))),int)->(void)
(	O
argparser	*(struct(*(struct(*(*`),long,long,bool,struct(long,long,*`,*`,struct`))),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long)))))
,	O
arg	int
)	O
;	O
return	O
;	O
}	O
if	O
(	O
inner	struct(enum(int,int,int,int,int,int),*(struct(int,int,*(char))),int)
.	O
type	char
==	O
t_eof	int
)	O
break	O
;	O
if	O
(	O
arg	int
==	O
0	int
)	O
{	O
if	O
(	O
inner	struct(enum(int,int,int,int,int,int),*(struct(int,int,*(char))),int)
.	O
type	char
==	O
t_symbol	int
)	O
{	O
char	O
*	O
symbol_name	*(char)
=	O
string_of_object	(*(struct(enum(int,int,int,int,int,int),*(struct(int,int,*`)),int)))->(*(char))
(	O
&	O
inner	struct(enum(int,int,int,int,int,int),*(struct(int,int,*(char))),int)
)	O
;	O
void	O
*	O
keyword_value	*(void)
;	O
if	O
(	O
hash_find_entry	(*(struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))),*(void),long,*(*(void)))->(int)
(	O
&	O
keywords	struct(long,long,*(struct),*(struct),struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),long,union(*((long)->(*`)),*((*`,long)->(*`))),union(*((*`)->(void)),*((*`,*`)->(void))),*(void),int,int,int))
,	O
symbol_name	*(char)
,	O
strlen	(*(char))->(long)
(	O
symbol_name	*(char)
)	O
,	O
&	O
keyword_value	*(void)
)	O
==	O
0	int
)	O
shapes	array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long)))
=	O
(	O
const	O
struct	O
callshapes	struct(*(char),long,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long))))
*	O
)	O
keyword_value	*(void)
;	O
argparser	*(struct(*(struct(*(*`),long,long,bool,struct(long,long,*`,*`,struct`))),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long)))))
=	O
arglist_parser_alloc	(*(struct(*(*(struct`)),long,long,bool,struct(long,long,*(struct`),*(struct`),struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int)))),*(struct(*(char),long,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long))))))->(*(struct(*(struct(*`,long,long,bool,struct`)),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long))))))
(	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
,	O
shapes	array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long)))
)	O
;	O
context_iter	struct(int,*(struct(int,struct(int,int,int,int,int,int),*(struct(int,struct`,*`)))))
=	O
flag_context_list_iterator	(*(struct(int,struct(int,int,int,int,int,int),*(struct(int,struct`,*`)))))->(struct(int,*(struct(int,struct(int,int,int,int,int,int),*(struct`)))))
(	O
flag_context_list_table_lookup	(*(struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))),*(void),long)->(*(struct(int,struct(int,int,int,int,int,int),*(struct(int,struct`,*`)))))
(	O
flag_context_list_table	*(struct(long,long,*(struct),*(struct),struct(long,*(struct(*`,*`,array(char))),*(char),*(char),*(char),union(long,*(void)),long,union(*((long)->(*`)),*((*`,long)->(*`))),union(*((*`)->(void)),*((*`,*`)->(void))),*(void),int,int,int)))
,	O
symbol_name	*(char)
,	O
strlen	(*(char))->(long)
(	O
symbol_name	*(char)
)	O
)	O
)	O
;	O
free	(*(void))->(void)
(	O
symbol_name	*(char)
)	O
;	O
}	O
else	O
context_iter	struct(int,*(struct(int,struct(int,int,int,int,int,int),*(struct(int,struct`,*`)))))
=	O
null_context_list_iterator	struct(int,*(struct(int,struct(int,int,int,int,int,int),*(struct(int,struct`,*`)))))
;	O
}	O
else	O
{	O
if	O
(	O
argparser	*(struct(*(struct(*(*`),long,long,bool,struct(long,long,*`,*`,struct`))),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long)))))
!=	O
NULL	O
&&	O
inner	struct(enum(int,int,int,int,int,int),*(struct(int,int,*(char))),int)
.	O
type	char
==	O
t_string	int
)	O
{	O
char	O
*	O
s	*(char)
=	O
string_of_object	(*(struct(enum(int,int,int,int,int,int),*(struct(int,int,*`)),int)))->(*(char))
(	O
&	O
inner	struct(enum(int,int,int,int,int,int),*(struct(int,int,*(char))),int)
)	O
;	O
mixed_string_ty	struct
*	O
ms	*(struct(*(*(struct(char,long,array(char)))),long,enum(int,int,int,int,int,int),*(char),int))
=	O
mixed_string_alloc_simple	(*(char),enum(int,int,int,int,int,int),*(char),int)->(*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)))
(	O
s	*(char)
,	O
lc_string	int
,	O
logical_file_name	*(char)
,	O
inner	struct(enum(int,int,int,int,int,int),*(struct(int,int,*(char))),int)
.	O
line_number_at_start	int
)	O
;	O
free	(*(void))->(void)
(	O
s	*(char)
)	O
;	O
arglist_parser_remember	(*(struct(*(struct(*`,long,long,bool,struct`)),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long))))),int,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),*(char),long,*(struct(int,struct(*(*`),long,long))),bool)->(void)
(	O
argparser	*(struct(*(struct(*(*`),long,long,bool,struct(long,long,*`,*`,struct`))),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long)))))
,	O
arg	int
,	O
ms	*(struct(*(*(struct(char,long,array(char)))),long,enum(int,int,int,int,int,int),*(char),int))
,	O
inner_context	struct(int,int,int,int,int,int)
,	O
logical_file_name	*(char)
,	O
inner	struct(enum(int,int,int,int,int,int),*(struct(int,int,*(char))),int)
.	O
line_number_at_start	int
,	O
savable_comment	*(struct(int,struct(*(*(char)),long,long)))
,	O
false	int
)	O
;	O
}	O
}	O
free_object	(*(struct(enum(int,int,int,int,int,int),*(struct(int,int,*`)),int)))->(void)
(	O
&	O
inner	struct(enum(int,int,int,int,int,int),*(struct(int,int,*(char))),int)
)	O
;	O
}	O
if	O
(	O
argparser	*(struct(*(struct(*(*`),long,long,bool,struct(long,long,*`,*`,struct`))),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long)))))
!=	O
NULL	O
)	O
arglist_parser_done	(*(struct(*(struct(*`,long,long,bool,struct`)),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long))))),int)->(void)
(	O
argparser	*(struct(*(struct(*(*`),long,long,bool,struct(long,long,*`,*`,struct`))),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long)))))
,	O
arg	int
)	O
;	O
}	O
op	*(struct(enum(int,int,int,int,int,int),*(struct(int,int,*(char))),int))
->	O
type	char
=	O
t_other	int
;	O
last_non_comment_line	int
=	O
line_number	long
;	O
return	O
;	O
case	O
'['	O
:	O
{	O
for	O
(	O
;	O
;	O
)	O
{	O
struct	O
object	struct(enum(int,int,int,int,int,int),*(struct(int,int,*(char))),int)
inner	struct(enum(int,int,int,int,int,int),*(struct(int,int,*(char))),int)
;	O
read_object	(*(struct(enum(int,int,int,int,int,int),*(struct(int,int,*`)),int)),struct(int,int,int,int,int,int))->(void)
(	O
&	O
inner	struct(enum(int,int,int,int,int,int),*(struct(int,int,*(char))),int)
,	O
null_context	struct(int,int,int,int,int,int)
)	O
;	O
if	O
(	O
inner	struct(enum(int,int,int,int,int,int),*(struct(int,int,*(char))),int)
.	O
type	char
==	O
t_close	int
)	O
{	O
op	*(struct(enum(int,int,int,int,int,int),*(struct(int,int,*(char))),int))
->	O
type	char
=	O
t_other	int
;	O
last_non_comment_line	int
=	O
line_number	long
;	O
return	O
;	O
}	O
if	O
(	O
inner	struct(enum(int,int,int,int,int,int),*(struct(int,int,*(char))),int)
.	O
type	char
==	O
t_eof	int
)	O
break	O
;	O
free_object	(*(struct(enum(int,int,int,int,int,int),*(struct(int,int,*`)),int)))->(void)
(	O
&	O
inner	struct(enum(int,int,int,int,int,int),*(struct(int,int,*(char))),int)
)	O
;	O
}	O
}	O
op	*(struct(enum(int,int,int,int,int,int),*(struct(int,int,*(char))),int))
->	O
type	char
=	O
t_other	int
;	O
last_non_comment_line	int
=	O
line_number	long
;	O
return	O
;	O
case	O
')'	O
:	O
case	O
']'	O
:	O
op	*(struct(enum(int,int,int,int,int,int),*(struct(int,int,*(char))),int))
->	O
type	char
=	O
t_close	int
;	O
last_non_comment_line	int
=	O
line_number	long
;	O
return	O
;	O
case	O
','	O
:	O
{	O
int	O
c	int
=	O
do_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
c	int
!=	O
EOF	O
&&	O
c	int
!=	O
'@'	O
)	O
do_ungetc	(int)->(void)
(	O
c	int
)	O
;	O
}	O
case	O
'\''	O
:	O
case	O
'`'	O
:	O
{	O
struct	O
object	struct(enum(int,int,int,int,int,int),*(struct(int,int,*(char))),int)
inner	struct(enum(int,int,int,int,int,int),*(struct(int,int,*(char))),int)
;	O
read_object	(*(struct(enum(int,int,int,int,int,int),*(struct(int,int,*`)),int)),struct(int,int,int,int,int,int))->(void)
(	O
&	O
inner	struct(enum(int,int,int,int,int,int),*(struct(int,int,*(char))),int)
,	O
null_context	struct(int,int,int,int,int,int)
)	O
;	O
free_object	(*(struct(enum(int,int,int,int,int,int),*(struct(int,int,*`)),int)))->(void)
(	O
&	O
inner	struct(enum(int,int,int,int,int,int),*(struct(int,int,*(char))),int)
)	O
;	O
op	*(struct(enum(int,int,int,int,int,int),*(struct(int,int,*(char))),int))
->	O
type	char
=	O
t_other	int
;	O
last_non_comment_line	int
=	O
line_number	long
;	O
return	O
;	O
}	O
case	O
';'	O
:	O
{	O
bool	bool
all_semicolons	bool
=	O
true	int
;	O
last_comment_line	int
=	O
line_number	long
;	O
comment_start	()->(void)
(	O
)	O
;	O
for	O
(	O
;	O
;	O
)	O
{	O
int	O
c	int
=	O
do_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
c	int
==	O
EOF	O
||	O
c	int
==	O
'\n'	O
||	O
c	int
==	O
'\f'	O
||	O
c	int
==	O
'\r'	O
)	O
break	O
;	O
if	O
(	O
c	int
!=	O
';'	O
)	O
all_semicolons	bool
=	O
false	int
;	O
if	O
(	O
!	O
all_semicolons	bool
)	O
{	O
if	O
(	O
!	O
(	O
buflen	long
==	O
0	int
&&	O
(	O
c	int
==	O
' '	O
||	O
c	int
==	O
'\t'	O
)	O
)	O
)	O
comment_add	(int)->(void)
(	O
c	int
)	O
;	O
}	O
}	O
comment_line_end	(long)->(void)
(	O
0	int
)	O
;	O
continue	O
;	O
}	O
case	O
'"'	O
:	O
{	O
op	*(struct(enum(int,int,int,int,int,int),*(struct(int,int,*(char))),int))
->	O
token	struct(int,int,*(char))
=	O
XMALLOC	O
(	O
struct	O
token	struct(int,int,*(char))
)	O
;	O
init_token	(*(struct(int,int,*(char))))->(void)
(	O
op	*(struct(enum(int,int,int,int,int,int),*(struct(int,int,*(char))),int))
->	O
token	struct(int,int,*(char))
)	O
;	O
op	*(struct(enum(int,int,int,int,int,int),*(struct(int,int,*(char))),int))
->	O
line_number_at_start	int
=	O
line_number	long
;	O
for	O
(	O
;	O
;	O
)	O
{	O
int	O
c	int
=	O
do_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
c	int
==	O
EOF	O
)	O
break	O
;	O
if	O
(	O
c	int
==	O
'"'	O
)	O
break	O
;	O
if	O
(	O
c	int
==	O
'\\'	O
)	O
{	O
c	int
=	O
do_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
c	int
==	O
EOF	O
)	O
break	O
;	O
if	O
(	O
c	int
==	O
'\n'	O
)	O
;	O
else	O
{	O
c	int
=	O
do_getc_escaped	(int)->(int)
(	O
c	int
)	O
;	O
if	O
(	O
c	int
==	O
EOF	O
)	O
break	O
;	O
grow_token	(*(struct(int,int,*(char))))->(void)
(	O
op	*(struct(enum(int,int,int,int,int,int),*(struct(int,int,*(char))),int))
->	O
token	struct(int,int,*(char))
)	O
;	O
op	*(struct(enum(int,int,int,int,int,int),*(struct(int,int,*(char))),int))
->	O
token	struct(int,int,*(char))
->	O
chars	*(char)
[	O
op	*(struct(enum(int,int,int,int,int,int),*(struct(int,int,*(char))),int))
->	O
token	struct(int,int,*(char))
->	O
charcount	int
++	O
]	O
=	O
c	int
;	O
}	O
}	O
else	O
{	O
grow_token	(*(struct(int,int,*(char))))->(void)
(	O
op	*(struct(enum(int,int,int,int,int,int),*(struct(int,int,*(char))),int))
->	O
token	struct(int,int,*(char))
)	O
;	O
op	*(struct(enum(int,int,int,int,int,int),*(struct(int,int,*(char))),int))
->	O
token	struct(int,int,*(char))
->	O
chars	*(char)
[	O
op	*(struct(enum(int,int,int,int,int,int),*(struct(int,int,*(char))),int))
->	O
token	struct(int,int,*(char))
->	O
charcount	int
++	O
]	O
=	O
c	int
;	O
}	O
}	O
op	*(struct(enum(int,int,int,int,int,int),*(struct(int,int,*(char))),int))
->	O
type	char
=	O
t_string	int
;	O
if	O
(	O
extract_all	bool
)	O
{	O
lex_pos_ty	struct
pos	struct(*(char),long)
;	O
pos	struct(*(char),long)
.	O
file_name	*(char)
=	O
logical_file_name	*(char)
;	O
pos	struct(*(char),long)
.	O
line_number	long
=	O
op	*(struct(enum(int,int,int,int,int,int),*(struct(int,int,*(char))),int))
->	O
line_number_at_start	int
;	O
remember_a_message	(*(struct(*(*(struct`)),long,long,bool,struct(long,long,*(struct`),*(struct`),struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int)))),*(char),*(char),bool,struct(int,int,int,int,int,int),*(struct(*(char),long)),*(char),*(struct(int,struct(*(*`),long,long))),bool)->(*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*`,long,long)),*(struct(*`,long,long)),long,*(struct(*`,long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`)),int,*(struct(*`,long,*`,*`,*`,*`)))))
(	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
,	O
NULL	O
,	O
string_of_object	(*(struct(enum(int,int,int,int,int,int),*(struct(int,int,*`)),int)))->(*(char))
(	O
op	*(struct(enum(int,int,int,int,int,int),*(struct(int,int,*(char))),int))
)	O
,	O
false	int
,	O
null_context	struct(int,int,int,int,int,int)
,	O
&	O
pos	struct(*(char),long)
,	O
NULL	O
,	O
savable_comment	*(struct(int,struct(*(*(char)),long,long)))
,	O
false	int
)	O
;	O
}	O
last_non_comment_line	int
=	O
line_number	long
;	O
return	O
;	O
}	O
case	O
'?'	O
:	O
c	int
=	O
do_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
c	int
==	O
EOF	O
)	O
;	O
else	O
if	O
(	O
c	int
==	O
'\\'	O
)	O
{	O
c	int
=	O
do_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
c	int
==	O
EOF	O
)	O
;	O
else	O
{	O
c	int
=	O
do_getc_escaped	(int)->(int)
(	O
c	int
)	O
;	O
if	O
(	O
c	int
==	O
EOF	O
)	O
;	O
}	O
}	O
op	*(struct(enum(int,int,int,int,int,int),*(struct(int,int,*(char))),int))
->	O
type	char
=	O
t_other	int
;	O
last_non_comment_line	int
=	O
line_number	long
;	O
return	O
;	O
case	O
'#'	O
:	O
c	int
=	O
do_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
c	int
==	O
EOF	O
)	O
{	O
op	*(struct(enum(int,int,int,int,int,int),*(struct(int,int,*(char))),int))
->	O
type	char
=	O
t_other	int
;	O
return	O
;	O
}	O
switch	O
(	O
c	int
)	O
{	O
case	O
'!'	O
:	O
if	O
(	O
ftell	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(long)
(	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
==	O
2	int
)	O
{	O
c	int
=	O
do_getc	()->(int)
(	O
)	O
;	O
for	O
(	O
;	O
;	O
)	O
{	O
if	O
(	O
c	int
==	O
EOF	O
)	O
break	O
;	O
if	O
(	O
c	int
==	O
'!'	O
)	O
{	O
c	int
=	O
do_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
c	int
==	O
EOF	O
||	O
c	int
==	O
'#'	O
)	O
break	O
;	O
}	O
else	O
c	int
=	O
do_getc	()->(int)
(	O
)	O
;	O
}	O
if	O
(	O
c	int
==	O
EOF	O
)	O
{	O
op	*(struct(enum(int,int,int,int,int,int),*(struct(int,int,*(char))),int))
->	O
type	char
=	O
t_eof	int
;	O
return	O
;	O
}	O
continue	O
;	O
}	O
case	O
'\''	O
:	O
case	O
':'	O
:	O
{	O
struct	O
object	struct(enum(int,int,int,int,int,int),*(struct(int,int,*(char))),int)
inner	struct(enum(int,int,int,int,int,int),*(struct(int,int,*(char))),int)
;	O
read_object	(*(struct(enum(int,int,int,int,int,int),*(struct(int,int,*`)),int)),struct(int,int,int,int,int,int))->(void)
(	O
&	O
inner	struct(enum(int,int,int,int,int,int),*(struct(int,int,*(char))),int)
,	O
null_context	struct(int,int,int,int,int,int)
)	O
;	O
free_object	(*(struct(enum(int,int,int,int,int,int),*(struct(int,int,*`)),int)))->(void)
(	O
&	O
inner	struct(enum(int,int,int,int,int,int),*(struct(int,int,*(char))),int)
)	O
;	O
op	*(struct(enum(int,int,int,int,int,int),*(struct(int,int,*(char))),int))
->	O
type	char
=	O
t_other	int
;	O
last_non_comment_line	int
=	O
line_number	long
;	O
return	O
;	O
}	O
case	O
'['	O
:	O
case	O
'('	O
:	O
{	O
struct	O
object	struct(enum(int,int,int,int,int,int),*(struct(int,int,*(char))),int)
inner	struct(enum(int,int,int,int,int,int),*(struct(int,int,*(char))),int)
;	O
do_ungetc	(int)->(void)
(	O
c	int
)	O
;	O
read_object	(*(struct(enum(int,int,int,int,int,int),*(struct(int,int,*`)),int)),struct(int,int,int,int,int,int))->(void)
(	O
&	O
inner	struct(enum(int,int,int,int,int,int),*(struct(int,int,*(char))),int)
,	O
null_context	struct(int,int,int,int,int,int)
)	O
;	O
free_object	(*(struct(enum(int,int,int,int,int,int),*(struct(int,int,*`)),int)))->(void)
(	O
&	O
inner	struct(enum(int,int,int,int,int,int),*(struct(int,int,*(char))),int)
)	O
;	O
op	*(struct(enum(int,int,int,int,int,int),*(struct(int,int,*(char))),int))
->	O
type	char
=	O
t_other	int
;	O
last_non_comment_line	int
=	O
line_number	long
;	O
return	O
;	O
}	O
case	O
'|'	O
:	O
{	O
int	O
depth	int
=	O
0	int
;	O
comment_start	()->(void)
(	O
)	O
;	O
c	int
=	O
do_getc	()->(int)
(	O
)	O
;	O
for	O
(	O
;	O
;	O
)	O
{	O
if	O
(	O
c	int
==	O
EOF	O
)	O
break	O
;	O
if	O
(	O
c	int
==	O
'|'	O
)	O
{	O
c	int
=	O
do_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
c	int
==	O
EOF	O
)	O
break	O
;	O
if	O
(	O
c	int
==	O
'#'	O
)	O
{	O
if	O
(	O
depth	int
==	O
0	int
)	O
{	O
comment_line_end	(long)->(void)
(	O
0	int
)	O
;	O
break	O
;	O
}	O
depth	int
--	O
;	O
comment_add	(int)->(void)
(	O
'|'	O
)	O
;	O
comment_add	(int)->(void)
(	O
'#'	O
)	O
;	O
c	int
=	O
do_getc	()->(int)
(	O
)	O
;	O
}	O
else	O
comment_add	(int)->(void)
(	O
'|'	O
)	O
;	O
}	O
else	O
if	O
(	O
c	int
==	O
'#'	O
)	O
{	O
c	int
=	O
do_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
c	int
==	O
EOF	O
)	O
break	O
;	O
comment_add	(int)->(void)
(	O
'#'	O
)	O
;	O
if	O
(	O
c	int
==	O
'|'	O
)	O
{	O
depth	int
++	O
;	O
comment_add	(int)->(void)
(	O
'|'	O
)	O
;	O
c	int
=	O
do_getc	()->(int)
(	O
)	O
;	O
}	O
}	O
else	O
{	O
if	O
(	O
!	O
(	O
buflen	long
==	O
0	int
&&	O
(	O
c	int
==	O
' '	O
||	O
c	int
==	O
'\t'	O
)	O
)	O
)	O
comment_add	(int)->(void)
(	O
c	int
)	O
;	O
if	O
(	O
c	int
==	O
'\n'	O
)	O
{	O
comment_line_end	(long)->(void)
(	O
1	int
)	O
;	O
comment_start	()->(void)
(	O
)	O
;	O
}	O
c	int
=	O
do_getc	()->(int)
(	O
)	O
;	O
}	O
}	O
if	O
(	O
c	int
==	O
EOF	O
)	O
{	O
op	*(struct(enum(int,int,int,int,int,int),*(struct(int,int,*(char))),int))
->	O
type	char
=	O
t_eof	int
;	O
return	O
;	O
}	O
last_comment_line	int
=	O
line_number	long
;	O
continue	O
;	O
}	O
case	O
'\\'	O
:	O
{	O
struct	O
token	struct(int,int,*(char))
token	struct(int,int,*(char))
;	O
int	O
first	*(struct)
=	O
'\\'	O
;	O
read_token	(*(struct(int,int,*(char))),*(int))->(bool)
(	O
&	O
token	struct(int,int,*(char))
,	O
&	O
first	*(struct)
)	O
;	O
free_token	(*(struct(int,int,*(char))))->(void)
(	O
&	O
token	struct(int,int,*(char))
)	O
;	O
op	*(struct(enum(int,int,int,int,int,int),*(struct(int,int,*(char))),int))
->	O
type	char
=	O
t_other	int
;	O
last_non_comment_line	int
=	O
line_number	long
;	O
return	O
;	O
}	O
case	O
'T'	O
:	O
case	O
't'	O
:	O
case	O
'F'	O
:	O
case	O
'f'	O
:	O
op	*(struct(enum(int,int,int,int,int,int),*(struct(int,int,*(char))),int))
->	O
type	char
=	O
t_other	int
;	O
last_non_comment_line	int
=	O
line_number	long
;	O
return	O
;	O
case	O
'B'	O
:	O
case	O
'b'	O
:	O
case	O
'O'	O
:	O
case	O
'o'	O
:	O
case	O
'D'	O
:	O
case	O
'd'	O
:	O
case	O
'X'	O
:	O
case	O
'x'	O
:	O
case	O
'E'	O
:	O
case	O
'e'	O
:	O
case	O
'I'	O
:	O
case	O
'i'	O
:	O
{	O
struct	O
token	struct(int,int,*(char))
token	struct(int,int,*(char))
;	O
do_ungetc	(int)->(void)
(	O
c	int
)	O
;	O
c	int
=	O
'#'	O
;	O
read_token	(*(struct(int,int,*(char))),*(int))->(bool)
(	O
&	O
token	struct(int,int,*(char))
,	O
&	O
c	int
)	O
;	O
free_token	(*(struct(int,int,*(char))))->(void)
(	O
&	O
token	struct(int,int,*(char))
)	O
;	O
op	*(struct(enum(int,int,int,int,int,int),*(struct(int,int,*(char))),int))
->	O
type	char
=	O
t_other	int
;	O
last_non_comment_line	int
=	O
line_number	long
;	O
return	O
;	O
}	O
default	O
:	O
op	*(struct(enum(int,int,int,int,int,int),*(struct(int,int,*(char))),int))
->	O
type	char
=	O
t_other	int
;	O
last_non_comment_line	int
=	O
line_number	long
;	O
return	O
;	O
}	O
abort	()->(void)
(	O
)	O
;	O
default	O
:	O
{	O
bool	bool
symbol	bool
;	O
op	*(struct(enum(int,int,int,int,int,int),*(struct(int,int,*(char))),int))
->	O
token	struct(int,int,*(char))
=	O
XMALLOC	O
(	O
struct	O
token	struct(int,int,*(char))
)	O
;	O
symbol	bool
=	O
read_token	(*(struct(int,int,*(char))),*(int))->(bool)
(	O
op	*(struct(enum(int,int,int,int,int,int),*(struct(int,int,*(char))),int))
->	O
token	struct(int,int,*(char))
,	O
&	O
c	int
)	O
;	O
if	O
(	O
op	*(struct(enum(int,int,int,int,int,int),*(struct(int,int,*(char))),int))
->	O
token	struct(int,int,*(char))
->	O
charcount	int
==	O
1	int
&&	O
op	*(struct(enum(int,int,int,int,int,int),*(struct(int,int,*(char))),int))
->	O
token	struct(int,int,*(char))
->	O
chars	*(char)
[	O
0	int
]	O
==	O
'.'	O
)	O
{	O
free_token	(*(struct(int,int,*(char))))->(void)
(	O
op	*(struct(enum(int,int,int,int,int,int),*(struct(int,int,*(char))),int))
->	O
token	struct(int,int,*(char))
)	O
;	O
free	(*(void))->(void)
(	O
op	*(struct(enum(int,int,int,int,int,int),*(struct(int,int,*(char))),int))
->	O
token	struct(int,int,*(char))
)	O
;	O
op	*(struct(enum(int,int,int,int,int,int),*(struct(int,int,*(char))),int))
->	O
type	char
=	O
t_dot	int
;	O
last_non_comment_line	int
=	O
line_number	long
;	O
return	O
;	O
}	O
if	O
(	O
!	O
symbol	bool
)	O
{	O
free_token	(*(struct(int,int,*(char))))->(void)
(	O
op	*(struct(enum(int,int,int,int,int,int),*(struct(int,int,*(char))),int))
->	O
token	struct(int,int,*(char))
)	O
;	O
free	(*(void))->(void)
(	O
op	*(struct(enum(int,int,int,int,int,int),*(struct(int,int,*(char))),int))
->	O
token	struct(int,int,*(char))
)	O
;	O
op	*(struct(enum(int,int,int,int,int,int),*(struct(int,int,*(char))),int))
->	O
type	char
=	O
t_other	int
;	O
last_non_comment_line	int
=	O
line_number	long
;	O
return	O
;	O
}	O
c	int
=	O
do_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
c	int
==	O
'#'	O
)	O
{	O
struct	O
token	struct(int,int,*(char))
second_token	struct(int,int,*(char))
;	O
free_token	(*(struct(int,int,*(char))))->(void)
(	O
op	*(struct(enum(int,int,int,int,int,int),*(struct(int,int,*(char))),int))
->	O
token	struct(int,int,*(char))
)	O
;	O
free	(*(void))->(void)
(	O
op	*(struct(enum(int,int,int,int,int,int),*(struct(int,int,*(char))),int))
->	O
token	struct(int,int,*(char))
)	O
;	O
read_token	(*(struct(int,int,*(char))),*(int))->(bool)
(	O
&	O
second_token	struct(int,int,*(char))
,	O
NULL	O
)	O
;	O
free_token	(*(struct(int,int,*(char))))->(void)
(	O
&	O
second_token	struct(int,int,*(char))
)	O
;	O
op	*(struct(enum(int,int,int,int,int,int),*(struct(int,int,*(char))),int))
->	O
type	char
=	O
t_other	int
;	O
last_non_comment_line	int
=	O
line_number	long
;	O
return	O
;	O
}	O
else	O
{	O
if	O
(	O
c	int
!=	O
EOF	O
)	O
do_ungetc	(int)->(void)
(	O
c	int
)	O
;	O
op	*(struct(enum(int,int,int,int,int,int),*(struct(int,int,*(char))),int))
->	O
type	char
=	O
t_symbol	int
;	O
last_non_comment_line	int
=	O
line_number	long
;	O
return	O
;	O
}	O
}	O
}	O
}	O
}	O
void	O
extract_librep	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char),*(char),*(struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))),*(struct(*(*(struct`)),long,long,bool,*(char))))->(void)
(	O
FILE	struct
*	O
f	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
const	O
char	O
*	O
real_filename	*(char)
,	O
const	O
char	O
*	O
logical_filename	*(char)
,	O
flag_context_list_table_ty	struct(long,long,*(struct),*(struct),struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),long,union(*((long)->(*`)),*((*`,long)->(*`))),union(*((*`)->(void)),*((*`,*`)->(void))),*(void),int,int,int))
*	O
flag_table	*(struct(long,long,*(struct),*(struct),struct(long,*(struct(*`,*`,array(char))),*(char),*(char),*(char),union(long,*(void)),long,union(*((long)->(*`)),*((*`,long)->(*`))),union(*((*`)->(void)),*((*`,*`)->(void))),*(void),int,int,int)))
,	O
msgdomain_list_ty	struct
*	O
mdlp	*(struct(*(*(struct(*`,*`))),long,long,bool,*(char)))
)	O
{	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
=	O
mdlp	*(struct(*(*(struct(*`,*`))),long,long,bool,*(char)))
->	O
item	*(*(char))
[	O
0	int
]	O
->	O
messages	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
;	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
=	O
f	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
;	O
real_file_name	*(char)
=	O
real_filename	*(char)
;	O
logical_file_name	*(char)
=	O
xstrdup	(*(char))->(*(char))
(	O
logical_filename	*(char)
)	O
;	O
line_number	long
=	O
1	int
;	O
last_comment_line	int
=	O
-	O
1	int
;	O
last_non_comment_line	int
=	O
-	O
1	int
;	O
flag_context_list_table	*(struct(long,long,*(struct),*(struct),struct(long,*(struct(*`,*`,array(char))),*(char),*(char),*(char),union(long,*(void)),long,union(*((long)->(*`)),*((*`,long)->(*`))),union(*((*`)->(void)),*((*`,*`)->(void))),*(void),int,int,int)))
=	O
flag_table	*(struct(long,long,*(struct),*(struct),struct(long,*(struct(*`,*`,array(char))),*(char),*(char),*(char),union(long,*(void)),long,union(*((long)->(*`)),*((*`,long)->(*`))),union(*((*`)->(void)),*((*`,*`)->(void))),*(void),int,int,int)))
;	O
init_keywords	()->(void)
(	O
)	O
;	O
do	O
{	O
struct	O
object	struct(enum(int,int,int,int,int,int),*(struct(int,int,*(char))),int)
toplevel_object	struct(enum(int,int,int,int,int,int),*(struct(int,int,*(char))),int)
;	O
read_object	(*(struct(enum(int,int,int,int,int,int),*(struct(int,int,*`)),int)),struct(int,int,int,int,int,int))->(void)
(	O
&	O
toplevel_object	struct(enum(int,int,int,int,int,int),*(struct(int,int,*(char))),int)
,	O
null_context	struct(int,int,int,int,int,int)
)	O
;	O
if	O
(	O
toplevel_object	struct(enum(int,int,int,int,int,int),*(struct(int,int,*(char))),int)
.	O
type	char
==	O
t_eof	int
)	O
break	O
;	O
free_object	(*(struct(enum(int,int,int,int,int,int),*(struct(int,int,*`)),int)))->(void)
(	O
&	O
toplevel_object	struct(enum(int,int,int,int,int,int),*(struct(int,int,*(char))),int)
)	O
;	O
}	O
while	O
(	O
!	O
feof	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
)	O
;	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
=	O
NULL	O
;	O
real_file_name	*(char)
=	O
NULL	O
;	O
logical_file_name	*(char)
=	O
NULL	O
;	O
line_number	long
=	O
0	int
;	O
}	O
