typedef	O
struct	O
{	O
double	O
*	O
z	double
;	O
double	O
*	O
zbackup	*(double)
;	O
double	O
*	O
ytmp	*(double)
;	O
double	O
*	O
ytmp2	*(double)
;	O
double	O
*	O
pc	*(double)
;	O
double	O
*	O
l	*(double)
;	O
double	O
*	O
hprev	*(double)
;	O
double	O
*	O
hprevbackup	*(double)
;	O
double	O
*	O
errlev	*(double)
;	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
abscor	*(struct(long,long,*(double),*(struct(long,*(double))),int))
;	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
relcor	*(struct(long,long,*(double),*(struct(long,*(double))),int))
;	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
svec	*(struct(long,long,*(double),*(struct(long,*(double))),int))
;	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
tempvec	*(struct(long,long,*(double),*(struct(long,*(double))),int))
;	O
const	O
gsl_odeiv2_driver	struct
*	O
driver	*(struct)
;	O
long	O
int	O
ni	long
;	O
size_t	long
ord	int
;	O
size_t	long
ordprev	long
;	O
size_t	long
ordprevbackup	long
;	O
double	O
tprev	double
;	O
size_t	long
ordwait	long
;	O
size_t	long
ordwaitbackup	long
;	O
size_t	long
failord	long
;	O
double	O
failt	double
;	O
double	O
ordm1coeff	double
;	O
double	O
ordp1coeffprev	double
;	O
size_t	long
failcount	long
;	O
}	O
msadams_state_t	struct(*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(*(struct(*`,*`,long,*`)),*(struct(*`,long,*`)),*(struct(*`,*`)),*(struct(long,*`,*`,*`,*`,double,long,long,*`)),double,double,double,long,long)),long,long,long,long,double,long,long,long,double,double,double,long)
;	O
static	O
int	O
msadams_reset	(*(void),long)->(int)
(	O
void	O
*	O
,	O
size_t	long
)	O
;	O
static	O
void	O
*	O
msadams_alloc	(long)->(*(void))
(	O
size_t	long
dim	long
)	O
{	O
msadams_state_t	struct(*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(*(struct(*`,*`,long,*`)),*(struct(*`,long,*`)),*(struct(*`,*`)),*(struct(long,*`,*`,*`,*`,double,long,long,*`)),double,double,double,long,long)),long,long,long,long,double,long,long,long,double,double,double,long)
*	O
state	*(int)
=	O
(	O
msadams_state_t	struct(*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(*(struct(*`,*`,long,*`)),*(struct(*`,long,*`)),*(struct(*`,*`)),*(struct(long,*`,*`,*`,*`,double,long,long,*`)),double,double,double,long,long)),long,long,long,long,double,long,long,long,double,double,double,long)
*	O
)	O
malloc	(long)->(*(void))
(	O
sizeof	O
(	O
msadams_state_t	struct(*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(*(struct(*`,*`,long,*`)),*(struct(*`,long,*`)),*(struct(*`,*`)),*(struct(long,*`,*`,*`,*`,double,long,long,*`)),double,double,double,long,long)),long,long,long,long,double,long,long,long,double,double,double,long)
)	O
)	O
;	O
if	O
(	O
state	*(int)
==	O
0	int
)	O
{	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for msadams_state"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	*(int)
->	O
z	double
=	O
(	O
double	O
*	O
)	O
malloc	(long)->(*(void))
(	O
(	O
MSADAMS_MAX_ORD	int
+	O
1	int
)	O
*	O
dim	long
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
if	O
(	O
state	*(int)
->	O
z	double
==	O
0	int
)	O
{	O
free	(*(void))->(void)
(	O
state	*(int)
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for z"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	*(int)
->	O
zbackup	*(double)
=	O
(	O
double	O
*	O
)	O
malloc	(long)->(*(void))
(	O
(	O
MSADAMS_MAX_ORD	int
+	O
1	int
)	O
*	O
dim	long
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
if	O
(	O
state	*(int)
->	O
zbackup	*(double)
==	O
0	int
)	O
{	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
z	double
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for zbackup"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	*(int)
->	O
ytmp	*(double)
=	O
(	O
double	O
*	O
)	O
malloc	(long)->(*(void))
(	O
dim	long
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
if	O
(	O
state	*(int)
->	O
ytmp	*(double)
==	O
0	int
)	O
{	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
zbackup	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
z	double
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for ytmp"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	*(int)
->	O
ytmp2	*(double)
=	O
(	O
double	O
*	O
)	O
malloc	(long)->(*(void))
(	O
dim	long
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
if	O
(	O
state	*(int)
->	O
ytmp2	*(double)
==	O
0	int
)	O
{	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
ytmp	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
zbackup	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
z	double
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for ytmp2"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	*(int)
->	O
pc	*(double)
=	O
(	O
double	O
*	O
)	O
malloc	(long)->(*(void))
(	O
(	O
MSADAMS_MAX_ORD	int
+	O
1	int
)	O
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
if	O
(	O
state	*(int)
->	O
pc	*(double)
==	O
0	int
)	O
{	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
ytmp2	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
ytmp	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
zbackup	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
z	double
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for pc"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	*(int)
->	O
l	*(double)
=	O
(	O
double	O
*	O
)	O
malloc	(long)->(*(void))
(	O
(	O
MSADAMS_MAX_ORD	int
+	O
1	int
)	O
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
if	O
(	O
state	*(int)
->	O
l	*(double)
==	O
0	int
)	O
{	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
pc	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
ytmp	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
zbackup	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
z	double
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for l"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	*(int)
->	O
hprev	*(double)
=	O
(	O
double	O
*	O
)	O
malloc	(long)->(*(void))
(	O
MSADAMS_MAX_ORD	int
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
if	O
(	O
state	*(int)
->	O
hprev	*(double)
==	O
0	int
)	O
{	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
l	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
pc	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
ytmp2	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
ytmp	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
zbackup	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
z	double
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for hprev"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	*(int)
->	O
hprevbackup	*(double)
=	O
(	O
double	O
*	O
)	O
malloc	(long)->(*(void))
(	O
MSADAMS_MAX_ORD	int
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
if	O
(	O
state	*(int)
->	O
hprevbackup	*(double)
==	O
0	int
)	O
{	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
hprev	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
l	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
pc	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
ytmp2	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
ytmp	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
zbackup	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
z	double
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for hprevbackup"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	*(int)
->	O
errlev	*(double)
=	O
(	O
double	O
*	O
)	O
malloc	(long)->(*(void))
(	O
dim	long
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
if	O
(	O
state	*(int)
->	O
errlev	*(double)
==	O
0	int
)	O
{	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
hprevbackup	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
hprev	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
l	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
pc	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
ytmp2	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
ytmp	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
zbackup	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
z	double
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for errlev"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	*(int)
->	O
abscor	*(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_vector_alloc	(long)->(*(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
dim	long
)	O
;	O
if	O
(	O
state	*(int)
->	O
abscor	*(struct(long,long,*(double),*(struct(long,*(double))),int))
==	O
0	int
)	O
{	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
errlev	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
hprevbackup	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
hprev	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
l	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
pc	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
ytmp2	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
ytmp	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
zbackup	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
z	double
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for abscor"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	*(int)
->	O
relcor	*(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_vector_alloc	(long)->(*(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
dim	long
)	O
;	O
if	O
(	O
state	*(int)
->	O
relcor	*(struct(long,long,*(double),*(struct(long,*(double))),int))
==	O
0	int
)	O
{	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
state	*(int)
->	O
abscor	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
errlev	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
hprevbackup	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
hprev	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
l	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
pc	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
ytmp2	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
ytmp	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
zbackup	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
z	double
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for relcor"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	*(int)
->	O
svec	*(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_vector_alloc	(long)->(*(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
dim	long
)	O
;	O
if	O
(	O
state	*(int)
->	O
svec	*(struct(long,long,*(double),*(struct(long,*(double))),int))
==	O
0	int
)	O
{	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
state	*(int)
->	O
relcor	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
state	*(int)
->	O
abscor	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
errlev	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
hprevbackup	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
hprev	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
l	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
pc	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
ytmp2	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
ytmp	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
zbackup	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
z	double
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for svec"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	*(int)
->	O
tempvec	*(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_vector_alloc	(long)->(*(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
dim	long
)	O
;	O
if	O
(	O
state	*(int)
->	O
tempvec	*(struct(long,long,*(double),*(struct(long,*(double))),int))
==	O
0	int
)	O
{	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
state	*(int)
->	O
svec	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
state	*(int)
->	O
relcor	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
state	*(int)
->	O
abscor	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
errlev	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
hprevbackup	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
hprev	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
l	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
pc	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
ytmp2	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
ytmp	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
zbackup	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
z	double
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for tempvec"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
msadams_reset	(*(void),long)->(int)
(	O
(	O
void	O
*	O
)	O
state	*(int)
,	O
dim	long
)	O
;	O
state	*(int)
->	O
driver	*(struct)
=	O
NULL	O
;	O
return	O
state	*(int)
;	O
}	O
static	O
int	O
msadams_failurehandler	(*(void),long,double)->(int)
(	O
void	O
*	O
vstate	*(void)
,	O
const	O
size_t	long
dim	long
,	O
const	O
double	O
t	double
)	O
{	O
msadams_state_t	struct(*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(*(struct(*`,*`,long,*`)),*(struct(*`,long,*`)),*(struct(*`,*`)),*(struct(long,*`,*`,*`,*`,double,long,long,*`)),double,double,double,long,long)),long,long,long,long,double,long,long,long,double,double,double,long)
*	O
state	*(int)
=	O
(	O
msadams_state_t	struct(*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(*(struct(*`,*`,long,*`)),*(struct(*`,long,*`)),*(struct(*`,*`)),*(struct(long,*`,*`,*`,*`,double,long,long,*`)),double,double,double,long,long)),long,long,long,long,double,long,long,long,double,double,double,long)
*	O
)	O
vstate	*(void)
;	O
const	O
size_t	long
ord	int
=	O
state	*(int)
->	O
ord	int
;	O
if	O
(	O
ord	int
>	O
1	int
&&	O
(	O
ord	int
-	O
state	*(int)
->	O
ordprev	long
==	O
0	int
)	O
&&	O
ord	int
==	O
state	*(int)
->	O
failord	long
&&	O
t	double
==	O
state	*(int)
->	O
failt	double
)	O
{	O
state	*(int)
->	O
ord	int
--	O
;	O
}	O
state	*(int)
->	O
failord	long
=	O
ord	int
;	O
state	*(int)
->	O
failt	double
=	O
t	double
;	O
state	*(int)
->	O
ni	long
++	O
;	O
if	O
(	O
ord	int
==	O
1	int
)	O
{	O
msadams_reset	(*(void),long)->(int)
(	O
vstate	*(void)
,	O
dim	long
)	O
;	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
int	O
msadams_calccoeffs	(long,long,double,array(double),array(double),array(double),*(double),*(double),*(double),*(double))->(int)
(	O
const	O
size_t	long
ord	int
,	O
const	O
size_t	long
ordwait	long
,	O
const	O
double	O
h	double
,	O
const	O
double	O
hprev	*(double)
[	O
]	O
,	O
double	O
pc	*(double)
[	O
]	O
,	O
double	O
l	*(double)
[	O
]	O
,	O
double	O
*	O
errcoeff	*(double)
,	O
double	O
*	O
ordm1coeff	double
,	O
double	O
*	O
ordp1coeff	*(double)
,	O
double	O
*	O
ordp2coeff	*(double)
)	O
{	O
if	O
(	O
ord	int
==	O
1	int
)	O
{	O
l	*(double)
[	O
0	int
]	O
=	O
1.0	int
;	O
l	*(double)
[	O
1	int
]	O
=	O
1.0	int
;	O
*	O
errcoeff	*(double)
=	O
0.5	int
;	O
*	O
ordp1coeff	*(double)
=	O
1.0	int
;	O
*	O
ordp2coeff	*(double)
=	O
12.0	int
;	O
}	O
else	O
{	O
size_t	long
i	long
,	O
j	long
;	O
double	O
hsum	double
=	O
h	double
;	O
double	O
st1	double
=	O
0.0	int
;	O
double	O
st2	double
=	O
0.0	int
;	O
DBL_ZERO_MEMSET	O
(	O
pc	*(double)
,	O
MSADAMS_MAX_ORD	int
+	O
1	int
)	O
;	O
pc	*(double)
[	O
0	int
]	O
=	O
1.0	int
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<	O
ord	int
;	O
i	long
++	O
)	O
{	O
if	O
(	O
i	long
==	O
ord	int
-	O
1	int
&&	O
ordwait	long
==	O
1	int
)	O
{	O
int	O
s	*(struct(*(struct(*(char),int,int,*((long)->(*`)),*((*`,long,double,double,array(double),array(double),array(double),array(double),*`)->(int)),*((*`,*`)->(int)),*((*`,long)->(int)),*((*`)->(int)),*((*`)->(void)))),long,*(void)))
=	O
1	int
;	O
*	O
ordm1coeff	double
=	O
0.0	int
;	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
ord	int
-	O
1	int
;	O
j	long
++	O
)	O
{	O
*	O
ordm1coeff	double
+=	O
s	*(struct(*(struct(*(char),int,int,*((long)->(*`)),*((*`,long,double,double,array(double),array(double),array(double),array(double),*`)->(int)),*((*`,*`)->(int)),*((*`,long)->(int)),*((*`)->(int)),*((*`)->(void)))),long,*(void)))
*	O
pc	*(double)
[	O
j	long
]	O
/	O
(	O
j	long
+	O
2	int
)	O
;	O
s	*(struct(*(struct(*(char),int,int,*((long)->(*`)),*((*`,long,double,double,array(double),array(double),array(double),array(double),*`)->(int)),*((*`,*`)->(int)),*((*`,long)->(int)),*((*`)->(int)),*((*`)->(void)))),long,*(void)))
=	O
-	O
s	*(struct(*(struct(*(char),int,int,*((long)->(*`)),*((*`,long,double,double,array(double),array(double),array(double),array(double),*`)->(int)),*((*`,*`)->(int)),*((*`,long)->(int)),*((*`)->(int)),*((*`)->(void)))),long,*(void)))
;	O
}	O
*	O
ordm1coeff	double
=	O
pc	*(double)
[	O
ord	int
-	O
2	int
]	O
/	O
(	O
ord	int
*	O
(	O
*	O
ordm1coeff	double
)	O
)	O
;	O
}	O
for	O
(	O
j	long
=	O
i	long
;	O
j	long
>	O
0	int
;	O
j	long
--	O
)	O
{	O
pc	*(double)
[	O
j	long
]	O
+=	O
pc	*(double)
[	O
j	long
-	O
1	int
]	O
*	O
h	double
/	O
hsum	double
;	O
}	O
hsum	double
+=	O
hprev	*(double)
[	O
i	long
-	O
1	int
]	O
;	O
}	O
{	O
int	O
s	*(struct(*(struct(*(char),int,int,*((long)->(*`)),*((*`,long,double,double,array(double),array(double),array(double),array(double),*`)->(int)),*((*`,*`)->(int)),*((*`,long)->(int)),*((*`)->(int)),*((*`)->(void)))),long,*(void)))
=	O
1	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
ord	int
;	O
i	long
++	O
)	O
{	O
st1	double
+=	O
s	*(struct(*(struct(*(char),int,int,*((long)->(*`)),*((*`,long,double,double,array(double),array(double),array(double),array(double),*`)->(int)),*((*`,*`)->(int)),*((*`,long)->(int)),*((*`)->(int)),*((*`)->(void)))),long,*(void)))
*	O
pc	*(double)
[	O
i	long
]	O
/	O
(	O
i	long
+	O
1.0	int
)	O
;	O
s	*(struct(*(struct(*(char),int,int,*((long)->(*`)),*((*`,long,double,double,array(double),array(double),array(double),array(double),*`)->(int)),*((*`,*`)->(int)),*((*`,long)->(int)),*((*`)->(int)),*((*`)->(void)))),long,*(void)))
=	O
-	O
s	*(struct(*(struct(*(char),int,int,*((long)->(*`)),*((*`,long,double,double,array(double),array(double),array(double),array(double),*`)->(int)),*((*`,*`)->(int)),*((*`,long)->(int)),*((*`)->(int)),*((*`)->(void)))),long,*(void)))
;	O
}	O
}	O
{	O
int	O
s	*(struct(*(struct(*(char),int,int,*((long)->(*`)),*((*`,long,double,double,array(double),array(double),array(double),array(double),*`)->(int)),*((*`,*`)->(int)),*((*`,long)->(int)),*((*`)->(int)),*((*`)->(void)))),long,*(void)))
=	O
1	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
ord	int
;	O
i	long
++	O
)	O
{	O
st2	double
+=	O
s	*(struct(*(struct(*(char),int,int,*((long)->(*`)),*((*`,long,double,double,array(double),array(double),array(double),array(double),*`)->(int)),*((*`,*`)->(int)),*((*`,long)->(int)),*((*`)->(int)),*((*`)->(void)))),long,*(void)))
*	O
pc	*(double)
[	O
i	long
]	O
/	O
(	O
i	long
+	O
2.0	int
)	O
;	O
s	*(struct(*(struct(*(char),int,int,*((long)->(*`)),*((*`,long,double,double,array(double),array(double),array(double),array(double),*`)->(int)),*((*`,*`)->(int)),*((*`,long)->(int)),*((*`)->(int)),*((*`)->(void)))),long,*(void)))
=	O
-	O
s	*(struct(*(struct(*(char),int,int,*((long)->(*`)),*((*`,long,double,double,array(double),array(double),array(double),array(double),*`)->(int)),*((*`,*`)->(int)),*((*`,long)->(int)),*((*`)->(int)),*((*`)->(void)))),long,*(void)))
;	O
}	O
}	O
DBL_ZERO_MEMSET	O
(	O
l	*(double)
,	O
MSADAMS_MAX_ORD	int
+	O
1	int
)	O
;	O
l	*(double)
[	O
0	int
]	O
=	O
1.0	int
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<	O
ord	int
+	O
1	int
;	O
i	long
++	O
)	O
{	O
l	*(double)
[	O
i	long
]	O
=	O
pc	*(double)
[	O
i	long
-	O
1	int
]	O
/	O
(	O
i	long
*	O
st1	double
)	O
;	O
}	O
*	O
errcoeff	*(double)
=	O
(	O
h	double
/	O
hsum	double
)	O
*	O
(	O
st2	double
/	O
st1	double
)	O
;	O
if	O
(	O
ordwait	long
<	O
2	int
)	O
{	O
int	O
s	*(struct(*(struct(*(char),int,int,*((long)->(*`)),*((*`,long,double,double,array(double),array(double),array(double),array(double),*`)->(int)),*((*`,*`)->(int)),*((*`,long)->(int)),*((*`)->(int)),*((*`)->(void)))),long,*(void)))
=	O
1	int
;	O
*	O
ordp1coeff	*(double)
=	O
hsum	double
/	O
(	O
h	double
*	O
l	*(double)
[	O
ord	int
]	O
)	O
;	O
*	O
ordp2coeff	*(double)
=	O
0.0	int
;	O
for	O
(	O
i	long
=	O
ord	int
;	O
i	long
>	O
0	int
;	O
i	long
--	O
)	O
{	O
pc	*(double)
[	O
i	long
]	O
+=	O
pc	*(double)
[	O
i	long
-	O
1	int
]	O
*	O
(	O
h	double
/	O
hsum	double
)	O
;	O
}	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
ord	int
+	O
1	int
;	O
i	long
++	O
)	O
{	O
*	O
ordp2coeff	*(double)
+=	O
s	*(struct(*(struct(*(char),int,int,*((long)->(*`)),*((*`,long,double,double,array(double),array(double),array(double),array(double),*`)->(int)),*((*`,*`)->(int)),*((*`,long)->(int)),*((*`)->(int)),*((*`)->(void)))),long,*(void)))
*	O
pc	*(double)
[	O
i	long
]	O
/	O
(	O
i	long
+	O
2	int
)	O
;	O
s	*(struct(*(struct(*(char),int,int,*((long)->(*`)),*((*`,long,double,double,array(double),array(double),array(double),array(double),*`)->(int)),*((*`,*`)->(int)),*((*`,long)->(int)),*((*`)->(int)),*((*`)->(void)))),long,*(void)))
=	O
-	O
s	*(struct(*(struct(*(char),int,int,*((long)->(*`)),*((*`,long,double,double,array(double),array(double),array(double),array(double),*`)->(int)),*((*`,*`)->(int)),*((*`,long)->(int)),*((*`)->(int)),*((*`)->(void)))),long,*(void)))
;	O
}	O
*	O
ordp2coeff	*(double)
=	O
(	O
ord	int
+	O
1	int
)	O
*	O
st1	double
/	O
(	O
*	O
ordp2coeff	*(double)
)	O
;	O
}	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
int	O
msadams_corrector	(*(void),*(struct(*((double,array(double),array(double),*`)->(int)),*((double,array(double),*`,array(double),*`)->(int)),long,*(void))),double,double,long,array(double),array(double),array(double),double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),array(double),array(double))->(int)
(	O
void	O
*	O
vstate	*(void)
,	O
const	O
gsl_odeiv2_system	struct(*((double,array(double),array(double),*(void))->(int)),*((double,array(double),*(double),array(double),*(void))->(int)),long,*(void))
*	O
sys	*(struct(*((double,array(double),array(double),*(void))->(int)),*((double,array(double),*(double),array(double),*(void))->(int)),long,*(void)))
,	O
const	O
double	O
t	double
,	O
const	O
double	O
h	double
,	O
const	O
size_t	long
dim	long
,	O
const	O
double	O
z	double
[	O
]	O
,	O
const	O
double	O
errlev	*(double)
[	O
]	O
,	O
const	O
double	O
l	*(double)
[	O
]	O
,	O
const	O
double	O
errcoeff	*(double)
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
abscor	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
relcor	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
double	O
ytmp	*(double)
[	O
]	O
,	O
double	O
ytmp2	*(double)
[	O
]	O
)	O
{	O
size_t	long
mi	long
,	O
i	long
;	O
const	O
size_t	long
max_iter	long
=	O
3	int
;	O
double	O
convrate	double
=	O
1.0	int
;	O
double	O
stepnorm	double
=	O
0.0	int
;	O
double	O
stepnormprev	double
=	O
0.0	int
;	O
{	O
int	O
s	*(struct(*(struct(*(char),int,int,*((long)->(*`)),*((*`,long,double,double,array(double),array(double),array(double),array(double),*`)->(int)),*((*`,*`)->(int)),*((*`,long)->(int)),*((*`)->(int)),*((*`)->(void)))),long,*(void)))
=	O
GSL_ODEIV_FN_EVAL	O
(	O
sys	*(struct(*((double,array(double),array(double),*(void))->(int)),*((double,array(double),*(double),array(double),*(void))->(int)),long,*(void)))
,	O
t	double
+	O
h	double
,	O
z	double
,	O
ytmp	*(double)
)	O
;	O
if	O
(	O
s	*(struct(*(struct(*(char),int,int,*((long)->(*`)),*((*`,long,double,double,array(double),array(double),array(double),array(double),*`)->(int)),*((*`,*`)->(int)),*((*`,long)->(int)),*((*`)->(int)),*((*`)->(void)))),long,*(void)))
==	O
GSL_EBADFUNC	int
)	O
{	O
return	O
s	*(struct(*(struct(*(char),int,int,*((long)->(*`)),*((*`,long,double,double,array(double),array(double),array(double),array(double),*`)->(int)),*((*`,*`)->(int)),*((*`,long)->(int)),*((*`)->(int)),*((*`)->(void)))),long,*(void)))
;	O
}	O
if	O
(	O
s	*(struct(*(struct(*(char),int,int,*((long)->(*`)),*((*`,long,double,double,array(double),array(double),array(double),array(double),*`)->(int)),*((*`,*`)->(int)),*((*`,long)->(int)),*((*`)->(int)),*((*`)->(void)))),long,*(void)))
!=	O
GSL_SUCCESS	int
)	O
{	O
msadams_failurehandler	(*(void),long,double)->(int)
(	O
vstate	*(void)
,	O
dim	long
,	O
t	double
)	O
;	O
return	O
s	*(struct(*(struct(*(char),int,int,*((long)->(*`)),*((*`,long,double,double,array(double),array(double),array(double),array(double),*`)->(int)),*((*`,*`)->(int)),*((*`,long)->(int)),*((*`)->(int)),*((*`)->(void)))),long,*(void)))
;	O
}	O
}	O
gsl_vector_set_zero	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
abscor	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
for	O
(	O
mi	long
=	O
0	int
;	O
mi	long
<	O
max_iter	long
;	O
mi	long
++	O
)	O
{	O
const	O
double	O
safety	double
=	O
0.3	int
;	O
const	O
double	O
safety2	double
=	O
0.1	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
dim	long
;	O
i	long
++	O
)	O
{	O
ytmp	*(double)
[	O
i	long
]	O
*=	O
h	double
;	O
ytmp	*(double)
[	O
i	long
]	O
-=	O
z	double
[	O
1	int
*	O
dim	long
+	O
i	long
]	O
;	O
ytmp	*(double)
[	O
i	long
]	O
/=	O
l	*(double)
[	O
1	int
]	O
;	O
ytmp2	*(double)
[	O
i	long
]	O
=	O
z	double
[	O
0	int
*	O
dim	long
+	O
i	long
]	O
+	O
ytmp	*(double)
[	O
i	long
]	O
;	O
}	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
dim	long
;	O
i	long
++	O
)	O
{	O
gsl_vector_set	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,double)->(void)
(	O
relcor	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
i	long
,	O
(	O
ytmp	*(double)
[	O
i	long
]	O
-	O
gsl_vector_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(double)
(	O
abscor	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
i	long
)	O
)	O
/	O
errlev	*(double)
[	O
i	long
]	O
)	O
;	O
gsl_vector_set	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,double)->(void)
(	O
abscor	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
i	long
,	O
ytmp	*(double)
[	O
i	long
]	O
)	O
;	O
}	O
stepnorm	double
=	O
gsl_blas_dnrm2	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(double)
(	O
relcor	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
/	O
sqrt	(double)->(double)
(	O
dim	long
)	O
;	O
if	O
(	O
mi	long
>	O
0	int
)	O
{	O
convrate	double
=	O
GSL_MAX_DBL	(double,double)->(double)
(	O
safety	double
*	O
convrate	double
,	O
stepnorm	double
/	O
stepnormprev	double
)	O
;	O
}	O
else	O
{	O
convrate	double
=	O
1.0	int
;	O
}	O
{	O
const	O
double	O
convtest	double
=	O
GSL_MIN_DBL	(double,double)->(double)
(	O
convrate	double
,	O
1.0	int
)	O
*	O
stepnorm	double
*	O
errcoeff	*(double)
/	O
safety2	double
;	O
if	O
(	O
convtest	double
<=	O
1.0	int
)	O
{	O
break	O
;	O
}	O
}	O
{	O
const	O
double	O
div_const	double
=	O
2.0	int
;	O
if	O
(	O
mi	long
>	O
1	int
&&	O
stepnorm	double
>	O
div_const	double
*	O
stepnormprev	double
)	O
{	O
msadams_failurehandler	(*(void),long,double)->(int)
(	O
vstate	*(void)
,	O
dim	long
,	O
t	double
)	O
;	O
return	O
GSL_FAILURE	int
;	O
}	O
}	O
{	O
int	O
s	*(struct(*(struct(*(char),int,int,*((long)->(*`)),*((*`,long,double,double,array(double),array(double),array(double),array(double),*`)->(int)),*((*`,*`)->(int)),*((*`,long)->(int)),*((*`)->(int)),*((*`)->(void)))),long,*(void)))
=	O
GSL_ODEIV_FN_EVAL	O
(	O
sys	*(struct(*((double,array(double),array(double),*(void))->(int)),*((double,array(double),*(double),array(double),*(void))->(int)),long,*(void)))
,	O
t	double
+	O
h	double
,	O
ytmp2	*(double)
,	O
ytmp	*(double)
)	O
;	O
if	O
(	O
s	*(struct(*(struct(*(char),int,int,*((long)->(*`)),*((*`,long,double,double,array(double),array(double),array(double),array(double),*`)->(int)),*((*`,*`)->(int)),*((*`,long)->(int)),*((*`)->(int)),*((*`)->(void)))),long,*(void)))
==	O
GSL_EBADFUNC	int
)	O
{	O
return	O
s	*(struct(*(struct(*(char),int,int,*((long)->(*`)),*((*`,long,double,double,array(double),array(double),array(double),array(double),*`)->(int)),*((*`,*`)->(int)),*((*`,long)->(int)),*((*`)->(int)),*((*`)->(void)))),long,*(void)))
;	O
}	O
if	O
(	O
s	*(struct(*(struct(*(char),int,int,*((long)->(*`)),*((*`,long,double,double,array(double),array(double),array(double),array(double),*`)->(int)),*((*`,*`)->(int)),*((*`,long)->(int)),*((*`)->(int)),*((*`)->(void)))),long,*(void)))
!=	O
GSL_SUCCESS	int
)	O
{	O
msadams_failurehandler	(*(void),long,double)->(int)
(	O
vstate	*(void)
,	O
dim	long
,	O
t	double
)	O
;	O
return	O
s	*(struct(*(struct(*(char),int,int,*((long)->(*`)),*((*`,long,double,double,array(double),array(double),array(double),array(double),*`)->(int)),*((*`,*`)->(int)),*((*`,long)->(int)),*((*`)->(int)),*((*`)->(void)))),long,*(void)))
;	O
}	O
}	O
stepnormprev	double
=	O
stepnorm	double
;	O
}	O
if	O
(	O
mi	long
==	O
max_iter	long
)	O
{	O
msadams_failurehandler	(*(void),long,double)->(int)
(	O
vstate	*(void)
,	O
dim	long
,	O
t	double
)	O
;	O
return	O
GSL_FAILURE	int
;	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
int	O
msadams_eval_order	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),double,long,array(double),double,double,double,double,array(double),double,array(double),*(long),*(long))->(int)
(	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
abscor	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
tempvec	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
svec	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
const	O
double	O
errcoeff	*(double)
,	O
const	O
size_t	long
dim	long
,	O
const	O
double	O
errlev	*(double)
[	O
]	O
,	O
const	O
double	O
ordm1coeff	double
,	O
const	O
double	O
ordp1coeff	*(double)
,	O
const	O
double	O
ordp1coeffprev	double
,	O
const	O
double	O
ordp2coeff	*(double)
,	O
const	O
double	O
hprev	*(double)
[	O
]	O
,	O
const	O
double	O
h	double
,	O
const	O
double	O
z	double
[	O
]	O
,	O
size_t	long
*	O
ord	int
,	O
size_t	long
*	O
ordwait	long
)	O
{	O
size_t	long
i	long
;	O
double	O
ordest	double
=	O
0.0	int
;	O
double	O
ordm1est	double
=	O
0.0	int
;	O
double	O
ordp1est	double
=	O
0.0	int
;	O
const	O
double	O
safety	double
=	O
1e-6	int
;	O
const	O
double	O
bias	double
=	O
6.0	int
;	O
const	O
double	O
bias2	double
=	O
10.0	int
;	O
ordest	double
=	O
1.0	int
/	O
(	O
pow	(double,double)->(double)
(	O
bias	double
*	O
gsl_blas_dnrm2	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(double)
(	O
abscor	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
/	O
sqrt	(double)->(double)
(	O
dim	long
)	O
*	O
errcoeff	*(double)
,	O
1.0	int
/	O
(	O
*	O
ord	int
+	O
1	int
)	O
)	O
+	O
safety	double
)	O
;	O
if	O
(	O
*	O
ord	int
>	O
1	int
)	O
{	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
dim	long
;	O
i	long
++	O
)	O
{	O
gsl_vector_set	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,double)->(void)
(	O
tempvec	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
i	long
,	O
z	double
[	O
*	O
ord	int
*	O
dim	long
+	O
i	long
]	O
/	O
errlev	*(double)
[	O
i	long
]	O
)	O
;	O
}	O
ordm1est	double
=	O
1.0	int
/	O
(	O
pow	(double,double)->(double)
(	O
bias	double
*	O
gsl_blas_dnrm2	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(double)
(	O
tempvec	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
/	O
sqrt	(double)->(double)
(	O
dim	long
)	O
/	O
ordm1coeff	double
,	O
1.0	int
/	O
(	O
*	O
ord	int
)	O
)	O
+	O
safety	double
)	O
;	O
}	O
else	O
{	O
ordm1est	double
=	O
0.0	int
;	O
}	O
if	O
(	O
*	O
ord	int
<	O
MSADAMS_MAX_ORD	int
)	O
{	O
const	O
double	O
c	*(struct(*(struct(*(char),*(()->(*`)),*((*`,double,double,double,double)->(int)),*((*`,long,int,array(double),array(double),array(double),*`)->(int)),*((*`,double,double,double,long,*`)->(int)),*((*`,*`)->(int)),*((*`)->(void)))),*(void)))
=	O
-	O
ordp1coeff	*(double)
/	O
ordp1coeffprev	double
*	O
pow	(double,double)->(double)
(	O
h	double
/	O
hprev	*(double)
[	O
1	int
]	O
,	O
*	O
ord	int
+	O
1	int
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
dim	long
;	O
i	long
++	O
)	O
{	O
gsl_vector_set	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,double)->(void)
(	O
svec	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
i	long
,	O
gsl_vector_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(double)
(	O
svec	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
i	long
)	O
*	O
c	*(struct(*(struct(*(char),*(()->(*`)),*((*`,double,double,double,double)->(int)),*((*`,long,int,array(double),array(double),array(double),*`)->(int)),*((*`,double,double,double,long,*`)->(int)),*((*`,*`)->(int)),*((*`)->(void)))),*(void)))
+	O
gsl_vector_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(double)
(	O
abscor	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
i	long
)	O
)	O
;	O
}	O
ordp1est	double
=	O
1.0	int
/	O
(	O
pow	(double,double)->(double)
(	O
bias2	double
*	O
gsl_blas_dnrm2	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(double)
(	O
svec	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
/	O
sqrt	(double)->(double)
(	O
dim	long
)	O
/	O
ordp2coeff	*(double)
,	O
1.0	int
/	O
(	O
*	O
ord	int
+	O
2	int
)	O
)	O
+	O
safety	double
)	O
;	O
}	O
else	O
{	O
ordp1est	double
=	O
0.0	int
;	O
}	O
{	O
const	O
double	O
min_incr	double
=	O
1.5	int
;	O
if	O
(	O
ordm1est	double
>	O
ordest	double
&&	O
ordm1est	double
>	O
ordp1est	double
&&	O
ordm1est	double
>	O
min_incr	double
)	O
{	O
*	O
ord	int
-=	O
1	int
;	O
}	O
else	O
if	O
(	O
ordp1est	double
>	O
ordest	double
&&	O
ordp1est	double
>	O
ordm1est	double
&&	O
ordp1est	double
>	O
min_incr	double
)	O
{	O
*	O
ord	int
+=	O
1	int
;	O
}	O
}	O
*	O
ordwait	long
=	O
*	O
ord	int
+	O
2	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
int	O
msadams_apply	(*(void),long,double,double,array(double),array(double),array(double),array(double),*(struct(*((double,array(double),array(double),*`)->(int)),*((double,array(double),*`,array(double),*`)->(int)),long,*(void))))->(int)
(	O
void	O
*	O
vstate	*(void)
,	O
size_t	long
dim	long
,	O
double	O
t	double
,	O
double	O
h	double
,	O
double	O
y	double
[	O
]	O
,	O
double	O
yerr	array(double)
[	O
]	O
,	O
const	O
double	O
dydt_in	array(double)
[	O
]	O
,	O
double	O
dydt_out	array(double)
[	O
]	O
,	O
const	O
gsl_odeiv2_system	struct(*((double,array(double),array(double),*(void))->(int)),*((double,array(double),*(double),array(double),*(void))->(int)),long,*(void))
*	O
sys	*(struct(*((double,array(double),array(double),*(void))->(int)),*((double,array(double),*(double),array(double),*(void))->(int)),long,*(void)))
)	O
{	O
msadams_state_t	struct(*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(*(struct(*`,*`,long,*`)),*(struct(*`,long,*`)),*(struct(*`,*`)),*(struct(long,*`,*`,*`,*`,double,long,long,*`)),double,double,double,long,long)),long,long,long,long,double,long,long,long,double,double,double,long)
*	O
state	*(int)
=	O
(	O
msadams_state_t	struct(*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(*(struct(*`,*`,long,*`)),*(struct(*`,long,*`)),*(struct(*`,*`)),*(struct(long,*`,*`,*`,*`,double,long,long,*`)),double,double,double,long,long)),long,long,long,long,double,long,long,long,double,double,double,long)
*	O
)	O
vstate	*(void)
;	O
double	O
*	O
const	O
z	double
=	O
state	*(int)
->	O
z	double
;	O
double	O
*	O
const	O
zbackup	*(double)
=	O
state	*(int)
->	O
zbackup	*(double)
;	O
double	O
*	O
const	O
ytmp	*(double)
=	O
state	*(int)
->	O
ytmp	*(double)
;	O
double	O
*	O
const	O
ytmp2	*(double)
=	O
state	*(int)
->	O
ytmp2	*(double)
;	O
double	O
*	O
const	O
pc	*(double)
=	O
state	*(int)
->	O
pc	*(double)
;	O
double	O
*	O
const	O
l	*(double)
=	O
state	*(int)
->	O
l	*(double)
;	O
double	O
*	O
const	O
hprev	*(double)
=	O
state	*(int)
->	O
hprev	*(double)
;	O
double	O
*	O
const	O
hprevbackup	*(double)
=	O
state	*(int)
->	O
hprevbackup	*(double)
;	O
double	O
*	O
const	O
errlev	*(double)
=	O
state	*(int)
->	O
errlev	*(double)
;	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
const	O
abscor	*(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
state	*(int)
->	O
abscor	*(struct(long,long,*(double),*(struct(long,*(double))),int))
;	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
const	O
relcor	*(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
state	*(int)
->	O
relcor	*(struct(long,long,*(double),*(struct(long,*(double))),int))
;	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
const	O
svec	*(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
state	*(int)
->	O
svec	*(struct(long,long,*(double),*(struct(long,*(double))),int))
;	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
const	O
tempvec	*(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
state	*(int)
->	O
tempvec	*(struct(long,long,*(double),*(struct(long,*(double))),int))
;	O
size_t	long
ord	int
=	O
state	*(int)
->	O
ord	int
;	O
double	O
ordm1coeff	double
=	O
0.0	int
;	O
double	O
ordp1coeff	*(double)
=	O
0.0	int
;	O
double	O
ordp2coeff	*(double)
=	O
0.0	int
;	O
double	O
errcoeff	*(double)
=	O
0.0	int
;	O
int	O
deltaord	int
;	O
if	O
(	O
state	*(int)
->	O
ni	long
>	O
0	int
&&	O
(	O
t	double
==	O
state	*(int)
->	O
tprev	double
||	O
t	double
==	O
state	*(int)
->	O
failt	double
)	O
)	O
{	O
if	O
(	O
state	*(int)
->	O
ni	long
==	O
1	int
)	O
{	O
msadams_reset	(*(void),long)->(int)
(	O
vstate	*(void)
,	O
dim	long
)	O
;	O
}	O
else	O
{	O
if	O
(	O
ord	int
>	O
state	*(int)
->	O
ordprev	long
)	O
{	O
state	*(int)
->	O
ord	int
=	O
state	*(int)
->	O
ordprev	long
;	O
ord	int
=	O
state	*(int)
->	O
ord	int
;	O
}	O
DBL_MEMCPY	O
(	O
z	double
,	O
zbackup	*(double)
,	O
(	O
MSADAMS_MAX_ORD	int
+	O
1	int
)	O
*	O
dim	long
)	O
;	O
DBL_MEMCPY	O
(	O
hprev	*(double)
,	O
hprevbackup	*(double)
,	O
MSADAMS_MAX_ORD	int
)	O
;	O
state	*(int)
->	O
ordprev	long
=	O
state	*(int)
->	O
ordprevbackup	long
;	O
state	*(int)
->	O
ordwait	long
=	O
state	*(int)
->	O
ordwaitbackup	long
;	O
}	O
state	*(int)
->	O
failcount	long
++	O
;	O
{	O
const	O
size_t	long
max_failcount	long
=	O
3	int
;	O
if	O
(	O
state	*(int)
->	O
failcount	long
>	O
max_failcount	long
&&	O
state	*(int)
->	O
ni	long
>	O
1	int
)	O
{	O
msadams_reset	(*(void),long)->(int)
(	O
vstate	*(void)
,	O
dim	long
)	O
;	O
ord	int
=	O
state	*(int)
->	O
ord	int
;	O
}	O
else	O
if	O
(	O
(	O
int	O
)	O
state	*(int)
->	O
ordprev	long
-	O
(	O
int	O
)	O
ord	int
>=	O
2	int
)	O
{	O
msadams_reset	(*(void),long)->(int)
(	O
vstate	*(void)
,	O
dim	long
)	O
;	O
ord	int
=	O
state	*(int)
->	O
ord	int
;	O
}	O
}	O
}	O
else	O
{	O
DBL_MEMCPY	O
(	O
zbackup	*(double)
,	O
z	double
,	O
(	O
MSADAMS_MAX_ORD	int
+	O
1	int
)	O
*	O
dim	long
)	O
;	O
DBL_MEMCPY	O
(	O
hprevbackup	*(double)
,	O
hprev	*(double)
,	O
MSADAMS_MAX_ORD	int
)	O
;	O
state	*(int)
->	O
ordprevbackup	long
=	O
state	*(int)
->	O
ordprev	long
;	O
state	*(int)
->	O
ordwaitbackup	long
=	O
state	*(int)
->	O
ordwait	long
;	O
state	*(int)
->	O
failcount	long
=	O
0	int
;	O
}	O
if	O
(	O
state	*(int)
->	O
driver	*(struct)
==	O
NULL	O
)	O
{	O
return	O
GSL_EFAULT	int
;	O
}	O
else	O
{	O
size_t	long
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
dim	long
;	O
i	long
++	O
)	O
{	O
if	O
(	O
dydt_in	array(double)
!=	O
NULL	O
)	O
{	O
gsl_odeiv2_control_errlevel	(*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`)),*(void))),double,double,double,long,*(double))->(int)
(	O
state	*(int)
->	O
driver	*(struct)
->	O
c	*(struct(*(struct(*(char),*(()->(*`)),*((*`,double,double,double,double)->(int)),*((*`,long,int,array(double),array(double),array(double),*`)->(int)),*((*`,double,double,double,long,*`)->(int)),*((*`,*`)->(int)),*((*`)->(void)))),*(void)))
,	O
y	double
[	O
i	long
]	O
,	O
dydt_in	array(double)
[	O
i	long
]	O
,	O
h	double
,	O
i	long
,	O
&	O
errlev	*(double)
[	O
i	long
]	O
)	O
;	O
}	O
else	O
{	O
gsl_odeiv2_control_errlevel	(*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`)),*(void))),double,double,double,long,*(double))->(int)
(	O
state	*(int)
->	O
driver	*(struct)
->	O
c	*(struct(*(struct(*(char),*(()->(*`)),*((*`,double,double,double,double)->(int)),*((*`,long,int,array(double),array(double),array(double),*`)->(int)),*((*`,double,double,double,long,*`)->(int)),*((*`,*`)->(int)),*((*`)->(void)))),*(void)))
,	O
y	double
[	O
i	long
]	O
,	O
0.0	int
,	O
h	double
,	O
i	long
,	O
&	O
errlev	*(double)
[	O
i	long
]	O
)	O
;	O
}	O
}	O
}	O
if	O
(	O
state	*(int)
->	O
ni	long
==	O
0	int
)	O
{	O
size_t	long
i	long
;	O
DBL_ZERO_MEMSET	O
(	O
z	double
,	O
(	O
MSADAMS_MAX_ORD	int
+	O
1	int
)	O
*	O
dim	long
)	O
;	O
if	O
(	O
dydt_in	array(double)
!=	O
NULL	O
)	O
{	O
DBL_MEMCPY	O
(	O
ytmp	*(double)
,	O
dydt_in	array(double)
,	O
dim	long
)	O
;	O
}	O
else	O
{	O
int	O
s	*(struct(*(struct(*(char),int,int,*((long)->(*`)),*((*`,long,double,double,array(double),array(double),array(double),array(double),*`)->(int)),*((*`,*`)->(int)),*((*`,long)->(int)),*((*`)->(int)),*((*`)->(void)))),long,*(void)))
=	O
GSL_ODEIV_FN_EVAL	O
(	O
sys	*(struct(*((double,array(double),array(double),*(void))->(int)),*((double,array(double),*(double),array(double),*(void))->(int)),long,*(void)))
,	O
t	double
,	O
y	double
,	O
ytmp	*(double)
)	O
;	O
if	O
(	O
s	*(struct(*(struct(*(char),int,int,*((long)->(*`)),*((*`,long,double,double,array(double),array(double),array(double),array(double),*`)->(int)),*((*`,*`)->(int)),*((*`,long)->(int)),*((*`)->(int)),*((*`)->(void)))),long,*(void)))
!=	O
GSL_SUCCESS	int
)	O
{	O
return	O
s	*(struct(*(struct(*(char),int,int,*((long)->(*`)),*((*`,long,double,double,array(double),array(double),array(double),array(double),*`)->(int)),*((*`,*`)->(int)),*((*`,long)->(int)),*((*`)->(int)),*((*`)->(void)))),long,*(void)))
;	O
}	O
}	O
DBL_MEMCPY	O
(	O
&	O
z	double
[	O
0	int
*	O
dim	long
]	O
,	O
y	double
,	O
dim	long
)	O
;	O
DBL_MEMCPY	O
(	O
&	O
z	double
[	O
1	int
*	O
dim	long
]	O
,	O
ytmp	*(double)
,	O
dim	long
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
dim	long
;	O
i	long
++	O
)	O
{	O
z	double
[	O
1	int
*	O
dim	long
+	O
i	long
]	O
*=	O
h	double
;	O
}	O
}	O
deltaord	int
=	O
ord	int
-	O
state	*(int)
->	O
ordprev	long
;	O
if	O
(	O
deltaord	int
>	O
1	int
||	O
deltaord	int
<	O
-	O
1	int
)	O
{	O
printf	(*(char))->(int)
(	O
"-- order change %d\n"	*(char)
,	O
deltaord	int
)	O
;	O
GSL_ERROR_NULL	O
(	O
"msadams_apply too large order change"	*(char)
,	O
GSL_ESANITY	int
)	O
;	O
}	O
if	O
(	O
deltaord	int
==	O
1	int
)	O
{	O
DBL_ZERO_MEMSET	O
(	O
&	O
z	double
[	O
ord	int
*	O
dim	long
]	O
,	O
dim	long
)	O
;	O
}	O
if	O
(	O
deltaord	int
==	O
-	O
1	int
)	O
{	O
double	O
hsum	double
=	O
0.0	int
;	O
size_t	long
i	long
,	O
j	long
;	O
DBL_ZERO_MEMSET	O
(	O
l	*(double)
,	O
MSADAMS_MAX_ORD	int
+	O
1	int
)	O
;	O
l	*(double)
[	O
1	int
]	O
=	O
1.0	int
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<	O
ord	int
;	O
i	long
++	O
)	O
{	O
hsum	double
+=	O
hprev	*(double)
[	O
i	long
-	O
1	int
]	O
;	O
for	O
(	O
j	long
=	O
i	long
+	O
1	int
;	O
j	long
>	O
0	int
;	O
j	long
--	O
)	O
{	O
l	*(double)
[	O
j	long
]	O
*=	O
hsum	double
/	O
hprev	*(double)
[	O
0	int
]	O
;	O
l	*(double)
[	O
j	long
]	O
+=	O
l	*(double)
[	O
j	long
-	O
1	int
]	O
;	O
}	O
}	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<	O
ord	int
;	O
i	long
++	O
)	O
{	O
l	*(double)
[	O
i	long
+	O
1	int
]	O
=	O
(	O
ord	int
+	O
1	int
)	O
*	O
l	*(double)
[	O
i	long
]	O
/	O
(	O
i	long
+	O
1	int
)	O
;	O
}	O
for	O
(	O
i	long
=	O
2	int
;	O
i	long
<	O
ord	int
+	O
1	int
;	O
i	long
++	O
)	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
dim	long
;	O
j	long
++	O
)	O
{	O
z	double
[	O
i	long
*	O
dim	long
+	O
j	long
]	O
+=	O
-	O
l	*(double)
[	O
i	long
]	O
*	O
z	double
[	O
(	O
ord	int
+	O
1	int
)	O
*	O
dim	long
+	O
j	long
]	O
;	O
}	O
}	O
if	O
(	O
state	*(int)
->	O
ni	long
>	O
0	int
&&	O
h	double
!=	O
hprev	*(double)
[	O
0	int
]	O
)	O
{	O
size_t	long
i	long
,	O
j	long
;	O
const	O
double	O
hrel	double
=	O
h	double
/	O
hprev	*(double)
[	O
0	int
]	O
;	O
double	O
coeff	double
=	O
hrel	double
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<	O
ord	int
+	O
1	int
;	O
i	long
++	O
)	O
{	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
dim	long
;	O
j	long
++	O
)	O
{	O
z	double
[	O
i	long
*	O
dim	long
+	O
j	long
]	O
*=	O
coeff	double
;	O
}	O
coeff	double
*=	O
hrel	double
;	O
}	O
}	O
msadams_calccoeffs	(long,long,double,array(double),array(double),array(double),*(double),*(double),*(double),*(double))->(int)
(	O
ord	int
,	O
state	*(int)
->	O
ordwait	long
,	O
h	double
,	O
hprev	*(double)
,	O
pc	*(double)
,	O
l	*(double)
,	O
&	O
errcoeff	*(double)
,	O
&	O
ordm1coeff	double
,	O
&	O
ordp1coeff	*(double)
,	O
&	O
ordp2coeff	*(double)
)	O
;	O
{	O
size_t	long
i	long
,	O
j	long
,	O
k	long
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<	O
ord	int
+	O
1	int
;	O
i	long
++	O
)	O
for	O
(	O
j	long
=	O
ord	int
;	O
j	long
>	O
i	long
-	O
1	int
;	O
j	long
--	O
)	O
for	O
(	O
k	long
=	O
0	int
;	O
k	long
<	O
dim	long
;	O
k	long
++	O
)	O
{	O
z	double
[	O
(	O
j	long
-	O
1	int
)	O
*	O
dim	long
+	O
k	long
]	O
+=	O
z	double
[	O
j	long
*	O
dim	long
+	O
k	long
]	O
;	O
}	O
}	O
{	O
int	O
s	*(struct(*(struct(*(char),int,int,*((long)->(*`)),*((*`,long,double,double,array(double),array(double),array(double),array(double),*`)->(int)),*((*`,*`)->(int)),*((*`,long)->(int)),*((*`)->(int)),*((*`)->(void)))),long,*(void)))
;	O
s	*(struct(*(struct(*(char),int,int,*((long)->(*`)),*((*`,long,double,double,array(double),array(double),array(double),array(double),*`)->(int)),*((*`,*`)->(int)),*((*`,long)->(int)),*((*`)->(int)),*((*`)->(void)))),long,*(void)))
=	O
msadams_corrector	(*(void),*(struct(*((double,array(double),array(double),*`)->(int)),*((double,array(double),*`,array(double),*`)->(int)),long,*(void))),double,double,long,array(double),array(double),array(double),double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),array(double),array(double))->(int)
(	O
vstate	*(void)
,	O
sys	*(struct(*((double,array(double),array(double),*(void))->(int)),*((double,array(double),*(double),array(double),*(void))->(int)),long,*(void)))
,	O
t	double
,	O
h	double
,	O
dim	long
,	O
z	double
,	O
errlev	*(double)
,	O
l	*(double)
,	O
errcoeff	*(double)
,	O
abscor	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
relcor	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
ytmp	*(double)
,	O
ytmp2	*(double)
)	O
;	O
if	O
(	O
s	*(struct(*(struct(*(char),int,int,*((long)->(*`)),*((*`,long,double,double,array(double),array(double),array(double),array(double),*`)->(int)),*((*`,*`)->(int)),*((*`,long)->(int)),*((*`)->(int)),*((*`)->(void)))),long,*(void)))
!=	O
GSL_SUCCESS	int
)	O
{	O
return	O
s	*(struct(*(struct(*(char),int,int,*((long)->(*`)),*((*`,long,double,double,array(double),array(double),array(double),array(double),*`)->(int)),*((*`,*`)->(int)),*((*`,long)->(int)),*((*`)->(int)),*((*`)->(void)))),long,*(void)))
;	O
}	O
}	O
{	O
size_t	long
i	long
,	O
j	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
ord	int
+	O
1	int
;	O
i	long
++	O
)	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
dim	long
;	O
j	long
++	O
)	O
{	O
z	double
[	O
i	long
*	O
dim	long
+	O
j	long
]	O
+=	O
l	*(double)
[	O
i	long
]	O
*	O
gsl_vector_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(double)
(	O
abscor	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
j	long
)	O
;	O
}	O
if	O
(	O
dydt_out	array(double)
!=	O
NULL	O
)	O
{	O
int	O
s	*(struct(*(struct(*(char),int,int,*((long)->(*`)),*((*`,long,double,double,array(double),array(double),array(double),array(double),*`)->(int)),*((*`,*`)->(int)),*((*`,long)->(int)),*((*`)->(int)),*((*`)->(void)))),long,*(void)))
=	O
GSL_ODEIV_FN_EVAL	O
(	O
sys	*(struct(*((double,array(double),array(double),*(void))->(int)),*((double,array(double),*(double),array(double),*(void))->(int)),long,*(void)))
,	O
t	double
+	O
h	double
,	O
z	double
,	O
dydt_out	array(double)
)	O
;	O
if	O
(	O
s	*(struct(*(struct(*(char),int,int,*((long)->(*`)),*((*`,long,double,double,array(double),array(double),array(double),array(double),*`)->(int)),*((*`,*`)->(int)),*((*`,long)->(int)),*((*`)->(int)),*((*`)->(void)))),long,*(void)))
==	O
GSL_EBADFUNC	int
)	O
{	O
return	O
s	*(struct(*(struct(*(char),int,int,*((long)->(*`)),*((*`,long,double,double,array(double),array(double),array(double),array(double),*`)->(int)),*((*`,*`)->(int)),*((*`,long)->(int)),*((*`)->(int)),*((*`)->(void)))),long,*(void)))
;	O
}	O
if	O
(	O
s	*(struct(*(struct(*(char),int,int,*((long)->(*`)),*((*`,long,double,double,array(double),array(double),array(double),array(double),*`)->(int)),*((*`,*`)->(int)),*((*`,long)->(int)),*((*`)->(int)),*((*`)->(void)))),long,*(void)))
!=	O
GSL_SUCCESS	int
)	O
{	O
msadams_failurehandler	(*(void),long,double)->(int)
(	O
vstate	*(void)
,	O
dim	long
,	O
t	double
)	O
;	O
return	O
s	*(struct(*(struct(*(char),int,int,*((long)->(*`)),*((*`,long,double,double,array(double),array(double),array(double),array(double),*`)->(int)),*((*`,*`)->(int)),*((*`,long)->(int)),*((*`)->(int)),*((*`)->(void)))),long,*(void)))
;	O
}	O
}	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
dim	long
;	O
i	long
++	O
)	O
{	O
yerr	array(double)
[	O
i	long
]	O
=	O
fabs	(double)->(double)
(	O
gsl_vector_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(double)
(	O
abscor	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
i	long
)	O
)	O
*	O
errcoeff	*(double)
;	O
}	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
dim	long
;	O
i	long
++	O
)	O
{	O
y	double
[	O
i	long
]	O
=	O
z	double
[	O
0	int
*	O
dim	long
+	O
i	long
]	O
;	O
}	O
}	O
{	O
size_t	long
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
dim	long
;	O
i	long
++	O
)	O
{	O
gsl_vector_set	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,double)->(void)
(	O
abscor	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
i	long
,	O
gsl_vector_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(double)
(	O
abscor	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
i	long
)	O
/	O
errlev	*(double)
[	O
i	long
]	O
)	O
;	O
}	O
}	O
if	O
(	O
state	*(int)
->	O
ordwait	long
==	O
1	int
&&	O
ord	int
<	O
MSADAMS_MAX_ORD	int
)	O
{	O
size_t	long
i	long
;	O
state	*(int)
->	O
ordp1coeffprev	double
=	O
ordp1coeff	*(double)
;	O
state	*(int)
->	O
ordm1coeff	double
=	O
ordm1coeff	double
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
dim	long
;	O
i	long
++	O
)	O
{	O
gsl_vector_set	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,double)->(void)
(	O
svec	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
i	long
,	O
gsl_vector_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(double)
(	O
abscor	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
i	long
)	O
)	O
;	O
}	O
}	O
if	O
(	O
state	*(int)
->	O
ordwait	long
==	O
0	int
)	O
{	O
msadams_eval_order	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),double,long,array(double),double,double,double,double,array(double),double,array(double),*(long),*(long))->(int)
(	O
abscor	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
tempvec	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
svec	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
errcoeff	*(double)
,	O
dim	long
,	O
errlev	*(double)
,	O
state	*(int)
->	O
ordm1coeff	double
,	O
ordp1coeff	*(double)
,	O
state	*(int)
->	O
ordp1coeffprev	double
,	O
ordp2coeff	*(double)
,	O
hprev	*(double)
,	O
h	double
,	O
z	double
,	O
&	O
(	O
state	*(int)
->	O
ord	int
)	O
,	O
&	O
(	O
state	*(int)
->	O
ordwait	long
)	O
)	O
;	O
}	O
{	O
size_t	long
i	long
;	O
state	*(int)
->	O
ordprev	long
=	O
ord	int
;	O
for	O
(	O
i	long
=	O
MSADAMS_MAX_ORD	int
-	O
1	int
;	O
i	long
>	O
0	int
;	O
i	long
--	O
)	O
{	O
hprev	*(double)
[	O
i	long
]	O
=	O
hprev	*(double)
[	O
i	long
-	O
1	int
]	O
;	O
}	O
hprev	*(double)
[	O
0	int
]	O
=	O
h	double
;	O
state	*(int)
->	O
tprev	double
=	O
t	double
;	O
state	*(int)
->	O
ordwait	long
--	O
;	O
state	*(int)
->	O
ni	long
++	O
;	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
int	O
msadams_set_driver	(*(void),*(struct(*(struct(*`,*`,long,*`)),*(struct(*`,long,*`)),*(struct(*`,*`)),*(struct(long,*`,*`,*`,*`,double,long,long,*`)),double,double,double,long,long)))->(int)
(	O
void	O
*	O
vstate	*(void)
,	O
const	O
gsl_odeiv2_driver	struct
*	O
d	*(struct)
)	O
{	O
msadams_state_t	struct(*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(*(struct(*`,*`,long,*`)),*(struct(*`,long,*`)),*(struct(*`,*`)),*(struct(long,*`,*`,*`,*`,double,long,long,*`)),double,double,double,long,long)),long,long,long,long,double,long,long,long,double,double,double,long)
*	O
state	*(int)
=	O
(	O
msadams_state_t	struct(*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(*(struct(*`,*`,long,*`)),*(struct(*`,long,*`)),*(struct(*`,*`)),*(struct(long,*`,*`,*`,*`,double,long,long,*`)),double,double,double,long,long)),long,long,long,long,double,long,long,long,double,double,double,long)
*	O
)	O
vstate	*(void)
;	O
state	*(int)
->	O
driver	*(struct)
=	O
d	*(struct)
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
int	O
msadams_reset	(*(void),long)->(int)
(	O
void	O
*	O
vstate	*(void)
,	O
size_t	long
dim	long
)	O
{	O
msadams_state_t	struct(*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(*(struct(*`,*`,long,*`)),*(struct(*`,long,*`)),*(struct(*`,*`)),*(struct(long,*`,*`,*`,*`,double,long,long,*`)),double,double,double,long,long)),long,long,long,long,double,long,long,long,double,double,double,long)
*	O
state	*(int)
=	O
(	O
msadams_state_t	struct(*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(*(struct(*`,*`,long,*`)),*(struct(*`,long,*`)),*(struct(*`,*`)),*(struct(long,*`,*`,*`,*`,double,long,long,*`)),double,double,double,long,long)),long,long,long,long,double,long,long,long,double,double,double,long)
*	O
)	O
vstate	*(void)
;	O
state	*(int)
->	O
ni	long
=	O
0	int
;	O
state	*(int)
->	O
ord	int
=	O
1	int
;	O
state	*(int)
->	O
ordprev	long
=	O
1	int
;	O
state	*(int)
->	O
ordprevbackup	long
=	O
1	int
;	O
state	*(int)
->	O
ordwait	long
=	O
2	int
;	O
state	*(int)
->	O
ordwaitbackup	long
=	O
2	int
;	O
state	*(int)
->	O
failord	long
=	O
0	int
;	O
state	*(int)
->	O
failt	double
=	O
GSL_NAN	O
;	O
state	*(int)
->	O
failcount	long
=	O
0	int
;	O
DBL_ZERO_MEMSET	O
(	O
state	*(int)
->	O
hprev	*(double)
,	O
MSADAMS_MAX_ORD	int
)	O
;	O
DBL_ZERO_MEMSET	O
(	O
state	*(int)
->	O
z	double
,	O
(	O
MSADAMS_MAX_ORD	int
+	O
1	int
)	O
*	O
dim	long
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
unsigned	O
int	O
msadams_order	(*(void))->(int)
(	O
void	O
*	O
vstate	*(void)
)	O
{	O
msadams_state_t	struct(*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(*(struct(*`,*`,long,*`)),*(struct(*`,long,*`)),*(struct(*`,*`)),*(struct(long,*`,*`,*`,*`,double,long,long,*`)),double,double,double,long,long)),long,long,long,long,double,long,long,long,double,double,double,long)
*	O
state	*(int)
=	O
(	O
msadams_state_t	struct(*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(*(struct(*`,*`,long,*`)),*(struct(*`,long,*`)),*(struct(*`,*`)),*(struct(long,*`,*`,*`,*`,double,long,long,*`)),double,double,double,long,long)),long,long,long,long,double,long,long,long,double,double,double,long)
*	O
)	O
vstate	*(void)
;	O
return	O
state	*(int)
->	O
ord	int
;	O
}	O
static	O
void	O
msadams_free	(*(void))->(void)
(	O
void	O
*	O
vstate	*(void)
)	O
{	O
msadams_state_t	struct(*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(*(struct(*`,*`,long,*`)),*(struct(*`,long,*`)),*(struct(*`,*`)),*(struct(long,*`,*`,*`,*`,double,long,long,*`)),double,double,double,long,long)),long,long,long,long,double,long,long,long,double,double,double,long)
*	O
state	*(int)
=	O
(	O
msadams_state_t	struct(*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(*(struct(*`,*`,long,*`)),*(struct(*`,long,*`)),*(struct(*`,*`)),*(struct(long,*`,*`,*`,*`,double,long,long,*`)),double,double,double,long,long)),long,long,long,long,double,long,long,long,double,double,double,long)
*	O
)	O
vstate	*(void)
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
state	*(int)
->	O
tempvec	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
state	*(int)
->	O
svec	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
state	*(int)
->	O
relcor	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
state	*(int)
->	O
abscor	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
errlev	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
hprevbackup	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
hprev	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
l	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
pc	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
ytmp2	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
ytmp	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
zbackup	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
z	double
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
)	O
;	O
}	O
static	O
const	O
gsl_odeiv2_step_type	struct(*(char),int,int,*((long)->(*(void))),*((*(void),long,double,double,array(double),array(double),array(double),array(double),*(struct(*`,*`,long,*`)))->(int)),*((*(void),*(struct))->(int)),*((*(void),long)->(int)),*((*(void))->(int)),*((*(void))->(void)))
msadams_type	struct(*(char),int,int,*((long)->(*(void))),*((*(void),long,double,double,array(double),array(double),array(double),array(double),*(struct(*`,*`,long,*`)))->(int)),*((*(void),*(struct(*`,*`,*`,*`,double,double,double,long,long)))->(int)),*((*(void),long)->(int)),*((*(void))->(int)),*((*(void))->(void)))
=	O
{	O
"msadams"	*(char)
,	O
1	int
,	O
1	int
,	O
&	O
msadams_alloc	(long)->(*(void))
,	O
&	O
msadams_apply	(*(void),long,double,double,array(double),array(double),array(double),array(double),*(struct(*((double,array(double),array(double),*`)->(int)),*((double,array(double),*`,array(double),*`)->(int)),long,*(void))))->(int)
,	O
&	O
msadams_set_driver	(*(void),*(struct(*(struct(*`,*`,long,*`)),*(struct(*`,long,*`)),*(struct(*`,*`)),*(struct(long,*`,*`,*`,*`,double,long,long,*`)),double,double,double,long,long)))->(int)
,	O
&	O
msadams_reset	(*(void),long)->(int)
,	O
&	O
msadams_order	(*(void))->(int)
,	O
&	O
msadams_free	(*(void))->(void)
}	O
;	O
const	O
gsl_odeiv2_step_type	struct(*(char),int,int,*((long)->(*(void))),*((*(void),long,double,double,array(double),array(double),array(double),array(double),*(struct(*`,*`,long,*`)))->(int)),*((*(void),*(struct))->(int)),*((*(void),long)->(int)),*((*(void))->(int)),*((*(void))->(void)))
*	O
gsl_odeiv2_step_msadams	*(struct(*(char),int,int,*((long)->(*(void))),*((*(void),long,double,double,array(double),array(double),array(double),array(double),*(struct`))->(int)),*((*(void),*(struct`))->(int)),*((*(void),long)->(int)),*((*(void))->(int)),*((*(void))->(void))))
=	O
&	O
msadams_type	struct(*(char),int,int,*((long)->(*(void))),*((*(void),long,double,double,array(double),array(double),array(double),array(double),*(struct(*`,*`,long,*`)))->(int)),*((*(void),*(struct(*`,*`,*`,*`,double,double,double,long,long)))->(int)),*((*(void),long)->(int)),*((*(void))->(int)),*((*(void))->(void)))
;	O
