struct	O
elf_strtab_hash_entry	O
{	O
struct	O
bfd_hash_entry	struct(*(struct(*(struct(*(struct`),*(char),long)),*(char),long)),*(char),long)
root	O
;	O
int	O
len	long
;	O
unsigned	O
int	O
refcount	O
;	O
union	O
{	O
bfd_size_type	long
index	(*(char),int)->(*(char))
;	O
struct	O
elf_strtab_hash_entry	O
*	O
suffix	O
;	O
}	O
u	union(long,*(struct))
;	O
}	O
;	O
struct	O
elf_strtab_hash	O
{	O
struct	O
bfd_hash_table	struct(*(*(struct(*(struct(*`,*`,long)),*(char),long))),*((*(struct(*(struct`),*(char),long)),*(struct(*(*`),*((*`,*`,*`)->(*`)),*(void),int,int,int,int)),*(char))->(*(struct(*(struct`),*(char),long)))),*(void),int,int,int,int)
table	*(*(struct(*(struct(*`,*`,long)),*(char),long)))
;	O
size_t	long
size	long
;	O
size_t	long
alloced	O
;	O
bfd_size_type	long
sec_size	O
;	O
struct	O
elf_strtab_hash_entry	O
*	O
*	O
array	O
;	O
}	O
;	O
static	O
struct	O
bfd_hash_entry	struct(*(struct(*(struct(*(struct`),*(char),long)),*(char),long)),*(char),long)
*	O
elf_strtab_hash_newfunc	O
(	O
struct	O
bfd_hash_entry	struct(*(struct(*(struct(*(struct`),*(char),long)),*(char),long)),*(char),long)
*	O
entry	O
,	O
struct	O
bfd_hash_table	struct(*(*(struct(*(struct(*`,*`,long)),*(char),long))),*((*(struct(*(struct`),*(char),long)),*(struct(*(*`),*((*`,*`,*`)->(*`)),*(void),int,int,int,int)),*(char))->(*(struct(*(struct`),*(char),long)))),*(void),int,int,int,int)
*	O
table	*(*(struct(*(struct(*`,*`,long)),*(char),long)))
,	O
const	O
char	O
*	O
string	*(char)
)	O
{	O
if	O
(	O
entry	O
==	O
NULL	O
)	O
entry	O
=	O
(	O
struct	O
bfd_hash_entry	struct(*(struct(*(struct(*(struct`),*(char),long)),*(char),long)),*(char),long)
*	O
)	O
bfd_hash_allocate	(*(struct(*(*(struct`)),*((*`,*`,*`)->(*`)),*(void),int,int,int,int)),int)->(*(void))
(	O
table	*(*(struct(*(struct(*`,*`,long)),*(char),long)))
,	O
sizeof	O
(	O
struct	O
elf_strtab_hash_entry	O
)	O
)	O
;	O
if	O
(	O
entry	O
==	O
NULL	O
)	O
return	O
NULL	O
;	O
entry	O
=	O
bfd_hash_newfunc	(*(struct(*(struct(*`,*`,long)),*(char),long)),*(struct(*(*(struct`)),*((*`,*`,*`)->(*`)),*(void),int,int,int,int)),*(char))->(*(struct(*(struct(*`,*`,long)),*(char),long)))
(	O
entry	O
,	O
table	*(*(struct(*(struct(*`,*`,long)),*(char),long)))
,	O
string	*(char)
)	O
;	O
if	O
(	O
entry	O
)	O
{	O
struct	O
elf_strtab_hash_entry	O
*	O
ret	*(struct(long,char,*(char),char,char,short,*(char)))
;	O
ret	*(struct(long,char,*(char),char,char,short,*(char)))
=	O
(	O
struct	O
elf_strtab_hash_entry	O
*	O
)	O
entry	O
;	O
ret	*(struct(long,char,*(char),char,char,short,*(char)))
->	O
u	union(long,*(struct))
.	O
index	(*(char),int)->(*(char))
=	O
-	O
1	int
;	O
ret	*(struct(long,char,*(char),char,char,short,*(char)))
->	O
refcount	O
=	O
0	int
;	O
ret	*(struct(long,char,*(char),char,char,short,*(char)))
->	O
len	long
=	O
0	int
;	O
}	O
return	O
entry	O
;	O
}	O
struct	O
elf_strtab_hash	O
*	O
_bfd_elf_strtab_init	O
(	O
void	O
)	O
{	O
struct	O
elf_strtab_hash	O
*	O
table	*(*(struct(*(struct(*`,*`,long)),*(char),long)))
;	O
bfd_size_type	long
amt	O
=	O
sizeof	O
(	O
struct	O
elf_strtab_hash	O
)	O
;	O
table	*(*(struct(*(struct(*`,*`,long)),*(char),long)))
=	O
(	O
struct	O
elf_strtab_hash	O
*	O
)	O
bfd_malloc	O
(	O
amt	O
)	O
;	O
if	O
(	O
table	*(*(struct(*(struct(*`,*`,long)),*(char),long)))
==	O
NULL	O
)	O
return	O
NULL	O
;	O
if	O
(	O
!	O
bfd_hash_table_init	(*(struct(*(*(struct`)),*((*`,*`,*`)->(*`)),*(void),int,int,int,int)),*((*(struct(*`,*`,long)),*(struct(*`,*`,*`,int,int,int,int)),*(char))->(*(struct(*`,*`,long)))),int)->(int)
(	O
&	O
table	*(*(struct(*(struct(*`,*`,long)),*(char),long)))
->	O
table	*(*(struct(*(struct(*`,*`,long)),*(char),long)))
,	O
elf_strtab_hash_newfunc	O
,	O
sizeof	O
(	O
struct	O
elf_strtab_hash_entry	O
)	O
)	O
)	O
{	O
free	(*(void))->(void)
(	O
table	*(*(struct(*(struct(*`,*`,long)),*(char),long)))
)	O
;	O
return	O
NULL	O
;	O
}	O
table	*(*(struct(*(struct(*`,*`,long)),*(char),long)))
->	O
sec_size	O
=	O
0	int
;	O
table	*(*(struct(*(struct(*`,*`,long)),*(char),long)))
->	O
size	long
=	O
1	int
;	O
table	*(*(struct(*(struct(*`,*`,long)),*(char),long)))
->	O
alloced	O
=	O
64	int
;	O
amt	O
=	O
sizeof	O
(	O
struct	O
elf_strtab_hasn_entry	O
*	O
)	O
;	O
table	*(*(struct(*(struct(*`,*`,long)),*(char),long)))
->	O
array	O
=	O
(	O
(	O
struct	O
elf_strtab_hash_entry	O
*	O
*	O
)	O
bfd_malloc	O
(	O
table	*(*(struct(*(struct(*`,*`,long)),*(char),long)))
->	O
alloced	O
*	O
amt	O
)	O
)	O
;	O
if	O
(	O
table	*(*(struct(*(struct(*`,*`,long)),*(char),long)))
->	O
array	O
==	O
NULL	O
)	O
{	O
free	(*(void))->(void)
(	O
table	*(*(struct(*(struct(*`,*`,long)),*(char),long)))
)	O
;	O
return	O
NULL	O
;	O
}	O
table	*(*(struct(*(struct(*`,*`,long)),*(char),long)))
->	O
array	O
[	O
0	int
]	O
=	O
NULL	O
;	O
return	O
table	*(*(struct(*(struct(*`,*`,long)),*(char),long)))
;	O
}	O
void	O
_bfd_elf_strtab_free	O
(	O
struct	O
elf_strtab_hash	O
*	O
tab	O
)	O
{	O
bfd_hash_table_free	(*(struct(*(*(struct`)),*((*`,*`,*`)->(*`)),*(void),int,int,int,int)))->(void)
(	O
&	O
tab	O
->	O
table	*(*(struct(*(struct(*`,*`,long)),*(char),long)))
)	O
;	O
free	(*(void))->(void)
(	O
tab	O
->	O
array	O
)	O
;	O
free	(*(void))->(void)
(	O
tab	O
)	O
;	O
}	O
size_t	long
_bfd_elf_strtab_add	O
(	O
struct	O
elf_strtab_hash	O
*	O
tab	O
,	O
const	O
char	O
*	O
str	O
,	O
bfd_boolean	int
copy	int
)	O
{	O
register	O
struct	O
elf_strtab_hash_entry	O
*	O
entry	O
;	O
if	O
(	O
*	O
str	O
==	O
'\0'	O
)	O
return	O
0	int
;	O
BFD_ASSERT	O
(	O
tab	O
->	O
sec_size	O
==	O
0	int
)	O
;	O
entry	O
=	O
(	O
struct	O
elf_strtab_hash_entry	O
*	O
)	O
bfd_hash_lookup	(*(struct(*(*(struct`)),*((*`,*`,*`)->(*`)),*(void),int,int,int,int)),*(char),int,int)->(*(struct(*(struct(*`,*`,long)),*(char),long)))
(	O
&	O
tab	O
->	O
table	*(*(struct(*(struct(*`,*`,long)),*(char),long)))
,	O
str	O
,	O
TRUE	int
,	O
copy	int
)	O
;	O
if	O
(	O
entry	O
==	O
NULL	O
)	O
return	O
(	O
size_t	long
)	O
-	O
1	int
;	O
entry	O
->	O
refcount	O
++	O
;	O
if	O
(	O
entry	O
->	O
len	long
==	O
0	int
)	O
{	O
entry	O
->	O
len	long
=	O
strlen	(*(char))->(long)
(	O
str	O
)	O
+	O
1	int
;	O
BFD_ASSERT	O
(	O
entry	O
->	O
len	long
>	O
0	int
)	O
;	O
if	O
(	O
tab	O
->	O
size	long
==	O
tab	O
->	O
alloced	O
)	O
{	O
bfd_size_type	long
amt	O
=	O
sizeof	O
(	O
struct	O
elf_strtab_hash_entry	O
*	O
)	O
;	O
tab	O
->	O
alloced	O
*=	O
2	int
;	O
tab	O
->	O
array	O
=	O
(	O
struct	O
elf_strtab_hash_entry	O
*	O
*	O
)	O
bfd_realloc_or_free	O
(	O
tab	O
->	O
array	O
,	O
tab	O
->	O
alloced	O
*	O
amt	O
)	O
;	O
if	O
(	O
tab	O
->	O
array	O
==	O
NULL	O
)	O
return	O
(	O
size_t	long
)	O
-	O
1	int
;	O
}	O
entry	O
->	O
u	union(long,*(struct))
.	O
index	(*(char),int)->(*(char))
=	O
tab	O
->	O
size	long
++	O
;	O
tab	O
->	O
array	O
[	O
entry	O
->	O
u	union(long,*(struct))
.	O
index	(*(char),int)->(*(char))
]	O
=	O
entry	O
;	O
}	O
return	O
entry	O
->	O
u	union(long,*(struct))
.	O
index	(*(char),int)->(*(char))
;	O
}	O
void	O
_bfd_elf_strtab_addref	O
(	O
struct	O
elf_strtab_hash	O
*	O
tab	O
,	O
size_t	long
idx	O
)	O
{	O
if	O
(	O
idx	O
==	O
0	int
||	O
idx	O
==	O
(	O
size_t	long
)	O
-	O
1	int
)	O
return	O
;	O
BFD_ASSERT	O
(	O
tab	O
->	O
sec_size	O
==	O
0	int
)	O
;	O
BFD_ASSERT	O
(	O
idx	O
<	O
tab	O
->	O
size	long
)	O
;	O
++	O
tab	O
->	O
array	O
[	O
idx	O
]	O
->	O
refcount	O
;	O
}	O
void	O
_bfd_elf_strtab_delref	O
(	O
struct	O
elf_strtab_hash	O
*	O
tab	O
,	O
size_t	long
idx	O
)	O
{	O
if	O
(	O
idx	O
==	O
0	int
||	O
idx	O
==	O
(	O
size_t	long
)	O
-	O
1	int
)	O
return	O
;	O
BFD_ASSERT	O
(	O
tab	O
->	O
sec_size	O
==	O
0	int
)	O
;	O
BFD_ASSERT	O
(	O
idx	O
<	O
tab	O
->	O
size	long
)	O
;	O
BFD_ASSERT	O
(	O
tab	O
->	O
array	O
[	O
idx	O
]	O
->	O
refcount	O
>	O
0	int
)	O
;	O
--	O
tab	O
->	O
array	O
[	O
idx	O
]	O
->	O
refcount	O
;	O
}	O
unsigned	O
int	O
_bfd_elf_strtab_refcount	O
(	O
struct	O
elf_strtab_hash	O
*	O
tab	O
,	O
size_t	long
idx	O
)	O
{	O
return	O
tab	O
->	O
array	O
[	O
idx	O
]	O
->	O
refcount	O
;	O
}	O
void	O
_bfd_elf_strtab_clear_all_refs	O
(	O
struct	O
elf_strtab_hash	O
*	O
tab	O
)	O
{	O
size_t	long
idx	O
;	O
for	O
(	O
idx	O
=	O
1	int
;	O
idx	O
<	O
tab	O
->	O
size	long
;	O
idx	O
++	O
)	O
tab	O
->	O
array	O
[	O
idx	O
]	O
->	O
refcount	O
=	O
0	int
;	O
}	O
struct	O
strtab_save	O
{	O
size_t	long
size	long
;	O
unsigned	O
int	O
refcount	O
[	O
1	int
]	O
;	O
}	O
;	O
void	O
*	O
_bfd_elf_strtab_save	O
(	O
struct	O
elf_strtab_hash	O
*	O
tab	O
)	O
{	O
struct	O
strtab_save	O
*	O
save	O
;	O
size_t	long
idx	O
,	O
size	long
;	O
size	long
=	O
sizeof	O
(	O
*	O
save	O
)	O
+	O
(	O
tab	O
->	O
size	long
-	O
1	int
)	O
*	O
sizeof	O
(	O
save	O
->	O
refcount	O
[	O
0	int
]	O
)	O
;	O
save	O
=	O
bfd_malloc	O
(	O
size	long
)	O
;	O
if	O
(	O
save	O
==	O
NULL	O
)	O
return	O
save	O
;	O
save	O
->	O
size	long
=	O
tab	O
->	O
size	long
;	O
for	O
(	O
idx	O
=	O
1	int
;	O
idx	O
<	O
tab	O
->	O
size	long
;	O
idx	O
++	O
)	O
save	O
->	O
refcount	O
[	O
idx	O
]	O
=	O
tab	O
->	O
array	O
[	O
idx	O
]	O
->	O
refcount	O
;	O
return	O
save	O
;	O
}	O
void	O
_bfd_elf_strtab_restore	O
(	O
struct	O
elf_strtab_hash	O
*	O
tab	O
,	O
void	O
*	O
buf	*(void)
)	O
{	O
size_t	long
idx	O
,	O
curr_size	O
=	O
tab	O
->	O
size	long
;	O
struct	O
strtab_save	O
*	O
save	O
=	O
(	O
struct	O
strtab_save	O
*	O
)	O
buf	*(void)
;	O
BFD_ASSERT	O
(	O
tab	O
->	O
sec_size	O
==	O
0	int
)	O
;	O
BFD_ASSERT	O
(	O
save	O
->	O
size	long
<=	O
curr_size	O
)	O
;	O
tab	O
->	O
size	long
=	O
save	O
->	O
size	long
;	O
for	O
(	O
idx	O
=	O
1	int
;	O
idx	O
<	O
save	O
->	O
size	long
;	O
++	O
idx	O
)	O
tab	O
->	O
array	O
[	O
idx	O
]	O
->	O
refcount	O
=	O
save	O
->	O
refcount	O
[	O
idx	O
]	O
;	O
for	O
(	O
;	O
idx	O
<	O
curr_size	O
;	O
++	O
idx	O
)	O
{	O
tab	O
->	O
array	O
[	O
idx	O
]	O
->	O
refcount	O
=	O
0	int
;	O
tab	O
->	O
array	O
[	O
idx	O
]	O
->	O
len	long
=	O
0	int
;	O
}	O
}	O
bfd_size_type	long
_bfd_elf_strtab_size	O
(	O
struct	O
elf_strtab_hash	O
*	O
tab	O
)	O
{	O
return	O
tab	O
->	O
sec_size	O
?	O
tab	O
->	O
sec_size	O
:	O
tab	O
->	O
size	long
;	O
}	O
bfd_size_type	long
_bfd_elf_strtab_len	O
(	O
struct	O
elf_strtab_hash	O
*	O
tab	O
)	O
{	O
return	O
tab	O
->	O
size	long
;	O
}	O
bfd_size_type	long
_bfd_elf_strtab_offset	O
(	O
struct	O
elf_strtab_hash	O
*	O
tab	O
,	O
size_t	long
idx	O
)	O
{	O
struct	O
elf_strtab_hash_entry	O
*	O
entry	O
;	O
if	O
(	O
idx	O
==	O
0	int
)	O
return	O
0	int
;	O
BFD_ASSERT	O
(	O
idx	O
<	O
tab	O
->	O
size	long
)	O
;	O
BFD_ASSERT	O
(	O
tab	O
->	O
sec_size	O
)	O
;	O
entry	O
=	O
tab	O
->	O
array	O
[	O
idx	O
]	O
;	O
BFD_ASSERT	O
(	O
entry	O
->	O
refcount	O
>	O
0	int
)	O
;	O
entry	O
->	O
refcount	O
--	O
;	O
return	O
tab	O
->	O
array	O
[	O
idx	O
]	O
->	O
u	union(long,*(struct))
.	O
index	(*(char),int)->(*(char))
;	O
}	O
const	O
char	O
*	O
_bfd_elf_strtab_str	O
(	O
struct	O
elf_strtab_hash	O
*	O
tab	O
,	O
size_t	long
idx	O
,	O
bfd_size_type	long
*	O
offset	long
)	O
{	O
if	O
(	O
idx	O
==	O
0	int
)	O
return	O
0	int
;	O
BFD_ASSERT	O
(	O
idx	O
<	O
tab	O
->	O
size	long
)	O
;	O
BFD_ASSERT	O
(	O
tab	O
->	O
sec_size	O
)	O
;	O
if	O
(	O
offset	long
)	O
*	O
offset	long
=	O
tab	O
->	O
array	O
[	O
idx	O
]	O
->	O
u	union(long,*(struct))
.	O
index	(*(char),int)->(*(char))
;	O
return	O
tab	O
->	O
array	O
[	O
idx	O
]	O
->	O
root	O
.	O
string	*(char)
;	O
}	O
bfd_boolean	int
_bfd_elf_strtab_emit	O
(	O
register	O
bfd	struct
*	O
abfd	*(struct)
,	O
struct	O
elf_strtab_hash	O
*	O
tab	O
)	O
{	O
bfd_size_type	long
off	O
=	O
1	int
;	O
size_t	long
i	*(struct)
;	O
if	O
(	O
bfd_bwrite	(*(void),long,*(struct))->(long)
(	O
""	*(char)
,	O
1	int
,	O
abfd	*(struct)
)	O
!=	O
1	int
)	O
return	O
FALSE	O
;	O
for	O
(	O
i	*(struct)
=	O
1	int
;	O
i	*(struct)
<	O
tab	O
->	O
size	long
;	O
++	O
i	*(struct)
)	O
{	O
register	O
const	O
char	O
*	O
str	O
;	O
register	O
unsigned	O
int	O
len	long
;	O
BFD_ASSERT	O
(	O
tab	O
->	O
array	O
[	O
i	*(struct)
]	O
->	O
refcount	O
==	O
0	int
)	O
;	O
len	long
=	O
tab	O
->	O
array	O
[	O
i	*(struct)
]	O
->	O
len	long
;	O
if	O
(	O
(	O
int	O
)	O
len	long
<	O
0	int
)	O
continue	O
;	O
str	O
=	O
tab	O
->	O
array	O
[	O
i	*(struct)
]	O
->	O
root	O
.	O
string	*(char)
;	O
if	O
(	O
bfd_bwrite	(*(void),long,*(struct))->(long)
(	O
str	O
,	O
len	long
,	O
abfd	*(struct)
)	O
!=	O
len	long
)	O
return	O
FALSE	O
;	O
off	O
+=	O
len	long
;	O
}	O
BFD_ASSERT	O
(	O
off	O
==	O
tab	O
->	O
sec_size	O
)	O
;	O
return	O
TRUE	int
;	O
}	O
static	O
int	O
strrevcmp	O
(	O
const	O
void	O
*	O
a	*(char)
,	O
const	O
void	O
*	O
b	*(char)
)	O
{	O
struct	O
elf_strtab_hash_entry	O
*	O
A	O
=	O
*	O
(	O
struct	O
elf_strtab_hash_entry	O
*	O
*	O
)	O
a	*(char)
;	O
struct	O
elf_strtab_hash_entry	O
*	O
B	O
=	O
*	O
(	O
struct	O
elf_strtab_hash_entry	O
*	O
*	O
)	O
b	*(char)
;	O
unsigned	O
int	O
lenA	O
=	O
A	O
->	O
len	long
;	O
unsigned	O
int	O
lenB	O
=	O
B	O
->	O
len	long
;	O
const	O
unsigned	O
char	O
*	O
s	*(void)
=	O
(	O
const	O
unsigned	O
char	O
*	O
)	O
A	O
->	O
root	O
.	O
string	*(char)
+	O
lenA	O
-	O
1	int
;	O
const	O
unsigned	O
char	O
*	O
t	O
=	O
(	O
const	O
unsigned	O
char	O
*	O
)	O
B	O
->	O
root	O
.	O
string	*(char)
+	O
lenB	O
-	O
1	int
;	O
int	O
l	O
=	O
lenA	O
<	O
lenB	O
?	O
lenA	O
:	O
lenB	O
;	O
while	O
(	O
l	O
)	O
{	O
if	O
(	O
*	O
s	*(void)
!=	O
*	O
t	O
)	O
return	O
(	O
int	O
)	O
*	O
s	*(void)
-	O
(	O
int	O
)	O
*	O
t	O
;	O
s	*(void)
--	O
;	O
t	O
--	O
;	O
l	O
--	O
;	O
}	O
return	O
lenA	O
-	O
lenB	O
;	O
}	O
static	O
inline	O
int	O
is_suffix	O
(	O
const	O
struct	O
elf_strtab_hash_entry	O
*	O
A	O
,	O
const	O
struct	O
elf_strtab_hash_entry	O
*	O
B	O
)	O
{	O
if	O
(	O
A	O
->	O
len	long
<=	O
B	O
->	O
len	long
)	O
return	O
0	int
;	O
return	O
memcmp	(*(void),*(void),long)->(int)
(	O
A	O
->	O
root	O
.	O
string	*(char)
+	O
(	O
A	O
->	O
len	long
-	O
B	O
->	O
len	long
)	O
,	O
B	O
->	O
root	O
.	O
string	*(char)
,	O
B	O
->	O
len	long
-	O
1	int
)	O
==	O
0	int
;	O
}	O
void	O
_bfd_elf_strtab_finalize	O
(	O
struct	O
elf_strtab_hash	O
*	O
tab	O
)	O
{	O
struct	O
elf_strtab_hash_entry	O
*	O
*	O
array	O
,	O
*	O
*	O
a	*(char)
,	O
*	O
e	O
;	O
bfd_size_type	long
amt	O
,	O
sec_size	O
;	O
size_t	long
size	long
,	O
i	*(struct)
;	O
amt	O
=	O
tab	O
->	O
size	long
;	O
amt	O
*=	O
sizeof	O
(	O
struct	O
elf_strtab_hash_entry	O
*	O
)	O
;	O
array	O
=	O
(	O
struct	O
elf_strtab_hash_entry	O
*	O
*	O
)	O
bfd_malloc	O
(	O
amt	O
)	O
;	O
if	O
(	O
array	O
==	O
NULL	O
)	O
goto	O
alloc_failure	O
;	O
for	O
(	O
i	*(struct)
=	O
1	int
,	O
a	*(char)
=	O
array	O
;	O
i	*(struct)
<	O
tab	O
->	O
size	long
;	O
++	O
i	*(struct)
)	O
{	O
e	O
=	O
tab	O
->	O
array	O
[	O
i	*(struct)
]	O
;	O
if	O
(	O
e	O
->	O
refcount	O
)	O
{	O
*	O
a	*(char)
++	O
=	O
e	O
;	O
e	O
->	O
len	long
-=	O
1	int
;	O
}	O
else	O
e	O
->	O
len	long
=	O
0	int
;	O
}	O
size	long
=	O
a	*(char)
-	O
array	O
;	O
if	O
(	O
size	long
!=	O
0	int
)	O
{	O
qsort	(*(void),long,long,*((*(void),*(void))->(int)))->(void)
(	O
array	O
,	O
size	long
,	O
sizeof	O
(	O
struct	O
elf_strtab_hash_entry	O
*	O
)	O
,	O
strrevcmp	O
)	O
;	O
e	O
=	O
*	O
--	O
a	*(char)
;	O
e	O
->	O
len	long
+=	O
1	int
;	O
while	O
(	O
--	O
a	*(char)
>=	O
array	O
)	O
{	O
struct	O
elf_strtab_hash_entry	O
*	O
cmp	O
=	O
*	O
a	*(char)
;	O
cmp	O
->	O
len	long
+=	O
1	int
;	O
if	O
(	O
is_suffix	O
(	O
e	O
,	O
cmp	O
)	O
)	O
{	O
cmp	O
->	O
u	union(long,*(struct))
.	O
suffix	O
=	O
e	O
;	O
cmp	O
->	O
len	long
=	O
-	O
cmp	O
->	O
len	long
;	O
}	O
else	O
e	O
=	O
cmp	O
;	O
}	O
}	O
alloc_failure	O
:	O
if	O
(	O
array	O
)	O
free	(*(void))->(void)
(	O
array	O
)	O
;	O
sec_size	O
=	O
1	int
;	O
for	O
(	O
i	*(struct)
=	O
1	int
;	O
i	*(struct)
<	O
tab	O
->	O
size	long
;	O
++	O
i	*(struct)
)	O
{	O
e	O
=	O
tab	O
->	O
array	O
[	O
i	*(struct)
]	O
;	O
if	O
(	O
e	O
->	O
refcount	O
&&	O
e	O
->	O
len	long
>	O
0	int
)	O
{	O
e	O
->	O
u	union(long,*(struct))
.	O
index	(*(char),int)->(*(char))
=	O
sec_size	O
;	O
sec_size	O
+=	O
e	O
->	O
len	long
;	O
}	O
}	O
tab	O
->	O
sec_size	O
=	O
sec_size	O
;	O
for	O
(	O
i	*(struct)
=	O
1	int
;	O
i	*(struct)
<	O
tab	O
->	O
size	long
;	O
++	O
i	*(struct)
)	O
{	O
e	O
=	O
tab	O
->	O
array	O
[	O
i	*(struct)
]	O
;	O
if	O
(	O
e	O
->	O
refcount	O
&&	O
e	O
->	O
len	long
<	O
0	int
)	O
e	O
->	O
u	union(long,*(struct))
.	O
index	(*(char),int)->(*(char))
=	O
e	O
->	O
u	union(long,*(struct))
.	O
suffix	O
->	O
u	union(long,*(struct))
.	O
index	(*(char),int)->(*(char))
+	O
(	O
e	O
->	O
u	union(long,*(struct))
.	O
suffix	O
->	O
len	long
+	O
e	O
->	O
len	long
)	O
;	O
}	O
}	O
