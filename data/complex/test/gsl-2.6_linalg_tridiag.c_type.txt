static	O
int	O
solve_tridiag	(array(double),long,array(double),long,array(double),long,array(double),long,long)->(int)
(	O
const	O
double	O
diag	array(double)
[	O
]	O
,	O
size_t	long
d_stride	long
,	O
const	O
double	O
offdiag	array(double)
[	O
]	O
,	O
size_t	long
o_stride	long
,	O
const	O
double	O
b	array(double)
[	O
]	O
,	O
size_t	long
b_stride	long
,	O
double	O
x	array(double)
[	O
]	O
,	O
size_t	long
x_stride	long
,	O
size_t	long
N	long
)	O
{	O
int	O
status	int
=	O
GSL_SUCCESS	int
;	O
double	O
*	O
gamma	(double)->(double)
=	O
(	O
double	O
*	O
)	O
malloc	(long)->(*(void))
(	O
N	long
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
double	O
*	O
alpha	long double
=	O
(	O
double	O
*	O
)	O
malloc	(long)->(*(void))
(	O
N	long
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
double	O
*	O
c	*(float)
=	O
(	O
double	O
*	O
)	O
malloc	(long)->(*(void))
(	O
N	long
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
double	O
*	O
z	struct(array(long double))
=	O
(	O
double	O
*	O
)	O
malloc	(long)->(*(void))
(	O
N	long
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
if	O
(	O
gamma	(double)->(double)
==	O
0	int
||	O
alpha	long double
==	O
0	int
||	O
c	*(float)
==	O
0	int
||	O
z	struct(array(long double))
==	O
0	int
)	O
{	O
GSL_ERROR	O
(	O
"failed to allocate working space"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
else	O
{	O
size_t	long
i	long
,	O
j	long
;	O
alpha	long double
[	O
0	int
]	O
=	O
diag	array(double)
[	O
0	int
]	O
;	O
gamma	(double)->(double)
[	O
0	int
]	O
=	O
offdiag	array(double)
[	O
0	int
]	O
/	O
alpha	long double
[	O
0	int
]	O
;	O
if	O
(	O
alpha	long double
[	O
0	int
]	O
==	O
0	int
)	O
{	O
status	int
=	O
GSL_EZERODIV	int
;	O
}	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<	O
N	long
-	O
1	int
;	O
i	long
++	O
)	O
{	O
alpha	long double
[	O
i	long
]	O
=	O
diag	array(double)
[	O
d_stride	long
*	O
i	long
]	O
-	O
offdiag	array(double)
[	O
o_stride	long
*	O
(	O
i	long
-	O
1	int
)	O
]	O
*	O
gamma	(double)->(double)
[	O
i	long
-	O
1	int
]	O
;	O
gamma	(double)->(double)
[	O
i	long
]	O
=	O
offdiag	array(double)
[	O
o_stride	long
*	O
i	long
]	O
/	O
alpha	long double
[	O
i	long
]	O
;	O
if	O
(	O
alpha	long double
[	O
i	long
]	O
==	O
0	int
)	O
{	O
status	int
=	O
GSL_EZERODIV	int
;	O
}	O
}	O
if	O
(	O
N	long
>	O
1	int
)	O
{	O
alpha	long double
[	O
N	long
-	O
1	int
]	O
=	O
diag	array(double)
[	O
d_stride	long
*	O
(	O
N	long
-	O
1	int
)	O
]	O
-	O
offdiag	array(double)
[	O
o_stride	long
*	O
(	O
N	long
-	O
2	int
)	O
]	O
*	O
gamma	(double)->(double)
[	O
N	long
-	O
2	int
]	O
;	O
}	O
z	struct(array(long double))
[	O
0	int
]	O
=	O
b	array(double)
[	O
0	int
]	O
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<	O
N	long
;	O
i	long
++	O
)	O
{	O
z	struct(array(long double))
[	O
i	long
]	O
=	O
b	array(double)
[	O
b_stride	long
*	O
i	long
]	O
-	O
gamma	(double)->(double)
[	O
i	long
-	O
1	int
]	O
*	O
z	struct(array(long double))
[	O
i	long
-	O
1	int
]	O
;	O
}	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
N	long
;	O
i	long
++	O
)	O
{	O
c	*(float)
[	O
i	long
]	O
=	O
z	struct(array(long double))
[	O
i	long
]	O
/	O
alpha	long double
[	O
i	long
]	O
;	O
}	O
x	array(double)
[	O
x_stride	long
*	O
(	O
N	long
-	O
1	int
)	O
]	O
=	O
c	*(float)
[	O
N	long
-	O
1	int
]	O
;	O
if	O
(	O
N	long
>=	O
2	int
)	O
{	O
for	O
(	O
i	long
=	O
N	long
-	O
2	int
,	O
j	long
=	O
0	int
;	O
j	long
<=	O
N	long
-	O
2	int
;	O
j	long
++	O
,	O
i	long
--	O
)	O
{	O
x	array(double)
[	O
x_stride	long
*	O
i	long
]	O
=	O
c	*(float)
[	O
i	long
]	O
-	O
gamma	(double)->(double)
[	O
i	long
]	O
*	O
x	array(double)
[	O
x_stride	long
*	O
(	O
i	long
+	O
1	int
)	O
]	O
;	O
}	O
}	O
}	O
if	O
(	O
z	struct(array(long double))
!=	O
0	int
)	O
free	(*(void))->(void)
(	O
z	struct(array(long double))
)	O
;	O
if	O
(	O
c	*(float)
!=	O
0	int
)	O
free	(*(void))->(void)
(	O
c	*(float)
)	O
;	O
if	O
(	O
alpha	long double
!=	O
0	int
)	O
free	(*(void))->(void)
(	O
alpha	long double
)	O
;	O
if	O
(	O
gamma	(double)->(double)
!=	O
0	int
)	O
free	(*(void))->(void)
(	O
gamma	(double)->(double)
)	O
;	O
if	O
(	O
status	int
==	O
GSL_EZERODIV	int
)	O
{	O
GSL_ERROR	O
(	O
"matrix must be positive definite"	*(char)
,	O
status	int
)	O
;	O
}	O
return	O
status	int
;	O
}	O
static	O
int	O
solve_tridiag_nonsym	(array(double),long,array(double),long,array(double),long,array(double),long,array(double),long,long)->(int)
(	O
const	O
double	O
diag	array(double)
[	O
]	O
,	O
size_t	long
d_stride	long
,	O
const	O
double	O
abovediag	array(double)
[	O
]	O
,	O
size_t	long
a_stride	long
,	O
const	O
double	O
belowdiag	array(double)
[	O
]	O
,	O
size_t	long
b_stride	long
,	O
const	O
double	O
rhs	array(double)
[	O
]	O
,	O
size_t	long
r_stride	long
,	O
double	O
x	array(double)
[	O
]	O
,	O
size_t	long
x_stride	long
,	O
size_t	long
N	long
)	O
{	O
int	O
status	int
=	O
GSL_SUCCESS	int
;	O
double	O
*	O
alpha	long double
=	O
(	O
double	O
*	O
)	O
malloc	(long)->(*(void))
(	O
N	long
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
double	O
*	O
z	struct(array(long double))
=	O
(	O
double	O
*	O
)	O
malloc	(long)->(*(void))
(	O
N	long
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
if	O
(	O
alpha	long double
==	O
0	int
||	O
z	struct(array(long double))
==	O
0	int
)	O
{	O
GSL_ERROR	O
(	O
"failed to allocate working space"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
else	O
{	O
size_t	long
i	long
,	O
j	long
;	O
alpha	long double
[	O
0	int
]	O
=	O
diag	array(double)
[	O
0	int
]	O
;	O
z	struct(array(long double))
[	O
0	int
]	O
=	O
rhs	array(double)
[	O
0	int
]	O
;	O
if	O
(	O
alpha	long double
[	O
0	int
]	O
==	O
0	int
)	O
{	O
status	int
=	O
GSL_EZERODIV	int
;	O
}	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<	O
N	long
;	O
i	long
++	O
)	O
{	O
const	O
double	O
t	double
=	O
belowdiag	array(double)
[	O
b_stride	long
*	O
(	O
i	long
-	O
1	int
)	O
]	O
/	O
alpha	long double
[	O
i	long
-	O
1	int
]	O
;	O
alpha	long double
[	O
i	long
]	O
=	O
diag	array(double)
[	O
d_stride	long
*	O
i	long
]	O
-	O
t	double
*	O
abovediag	array(double)
[	O
a_stride	long
*	O
(	O
i	long
-	O
1	int
)	O
]	O
;	O
z	struct(array(long double))
[	O
i	long
]	O
=	O
rhs	array(double)
[	O
r_stride	long
*	O
i	long
]	O
-	O
t	double
*	O
z	struct(array(long double))
[	O
i	long
-	O
1	int
]	O
;	O
if	O
(	O
alpha	long double
[	O
i	long
]	O
==	O
0	int
)	O
{	O
status	int
=	O
GSL_EZERODIV	int
;	O
}	O
}	O
x	array(double)
[	O
x_stride	long
*	O
(	O
N	long
-	O
1	int
)	O
]	O
=	O
z	struct(array(long double))
[	O
N	long
-	O
1	int
]	O
/	O
alpha	long double
[	O
N	long
-	O
1	int
]	O
;	O
if	O
(	O
N	long
>=	O
2	int
)	O
{	O
for	O
(	O
i	long
=	O
N	long
-	O
2	int
,	O
j	long
=	O
0	int
;	O
j	long
<=	O
N	long
-	O
2	int
;	O
j	long
++	O
,	O
i	long
--	O
)	O
{	O
x	array(double)
[	O
x_stride	long
*	O
i	long
]	O
=	O
(	O
z	struct(array(long double))
[	O
i	long
]	O
-	O
abovediag	array(double)
[	O
a_stride	long
*	O
i	long
]	O
*	O
x	array(double)
[	O
x_stride	long
*	O
(	O
i	long
+	O
1	int
)	O
]	O
)	O
/	O
alpha	long double
[	O
i	long
]	O
;	O
}	O
}	O
}	O
if	O
(	O
z	struct(array(long double))
!=	O
0	int
)	O
free	(*(void))->(void)
(	O
z	struct(array(long double))
)	O
;	O
if	O
(	O
alpha	long double
!=	O
0	int
)	O
free	(*(void))->(void)
(	O
alpha	long double
)	O
;	O
if	O
(	O
status	int
==	O
GSL_EZERODIV	int
)	O
{	O
GSL_ERROR	O
(	O
"matrix must be positive definite"	*(char)
,	O
status	int
)	O
;	O
}	O
return	O
status	int
;	O
}	O
static	O
int	O
solve_cyc_tridiag	(array(double),long,array(double),long,array(double),long,array(double),long,long)->(int)
(	O
const	O
double	O
diag	array(double)
[	O
]	O
,	O
size_t	long
d_stride	long
,	O
const	O
double	O
offdiag	array(double)
[	O
]	O
,	O
size_t	long
o_stride	long
,	O
const	O
double	O
b	array(double)
[	O
]	O
,	O
size_t	long
b_stride	long
,	O
double	O
x	array(double)
[	O
]	O
,	O
size_t	long
x_stride	long
,	O
size_t	long
N	long
)	O
{	O
int	O
status	int
=	O
GSL_SUCCESS	int
;	O
double	O
*	O
delta	*(double)
=	O
(	O
double	O
*	O
)	O
malloc	(long)->(*(void))
(	O
N	long
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
double	O
*	O
gamma	(double)->(double)
=	O
(	O
double	O
*	O
)	O
malloc	(long)->(*(void))
(	O
N	long
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
double	O
*	O
alpha	long double
=	O
(	O
double	O
*	O
)	O
malloc	(long)->(*(void))
(	O
N	long
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
double	O
*	O
c	*(float)
=	O
(	O
double	O
*	O
)	O
malloc	(long)->(*(void))
(	O
N	long
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
double	O
*	O
z	struct(array(long double))
=	O
(	O
double	O
*	O
)	O
malloc	(long)->(*(void))
(	O
N	long
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
if	O
(	O
delta	*(double)
==	O
0	int
||	O
gamma	(double)->(double)
==	O
0	int
||	O
alpha	long double
==	O
0	int
||	O
c	*(float)
==	O
0	int
||	O
z	struct(array(long double))
==	O
0	int
)	O
{	O
GSL_ERROR	O
(	O
"failed to allocate working space"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
else	O
{	O
size_t	long
i	long
,	O
j	long
;	O
double	O
sum	double
=	O
0.0	int
;	O
if	O
(	O
N	long
==	O
1	int
)	O
{	O
x	array(double)
[	O
0	int
]	O
=	O
b	array(double)
[	O
0	int
]	O
/	O
diag	array(double)
[	O
0	int
]	O
;	O
free	(*(void))->(void)
(	O
delta	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
gamma	(double)->(double)
)	O
;	O
free	(*(void))->(void)
(	O
alpha	long double
)	O
;	O
free	(*(void))->(void)
(	O
c	*(float)
)	O
;	O
free	(*(void))->(void)
(	O
z	struct(array(long double))
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
alpha	long double
[	O
0	int
]	O
=	O
diag	array(double)
[	O
0	int
]	O
;	O
gamma	(double)->(double)
[	O
0	int
]	O
=	O
offdiag	array(double)
[	O
0	int
]	O
/	O
alpha	long double
[	O
0	int
]	O
;	O
delta	*(double)
[	O
0	int
]	O
=	O
offdiag	array(double)
[	O
o_stride	long
*	O
(	O
N	long
-	O
1	int
)	O
]	O
/	O
alpha	long double
[	O
0	int
]	O
;	O
if	O
(	O
alpha	long double
[	O
0	int
]	O
==	O
0	int
)	O
{	O
status	int
=	O
GSL_EZERODIV	int
;	O
}	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<	O
N	long
-	O
2	int
;	O
i	long
++	O
)	O
{	O
alpha	long double
[	O
i	long
]	O
=	O
diag	array(double)
[	O
d_stride	long
*	O
i	long
]	O
-	O
offdiag	array(double)
[	O
o_stride	long
*	O
(	O
i	long
-	O
1	int
)	O
]	O
*	O
gamma	(double)->(double)
[	O
i	long
-	O
1	int
]	O
;	O
gamma	(double)->(double)
[	O
i	long
]	O
=	O
offdiag	array(double)
[	O
o_stride	long
*	O
i	long
]	O
/	O
alpha	long double
[	O
i	long
]	O
;	O
delta	*(double)
[	O
i	long
]	O
=	O
-	O
delta	*(double)
[	O
i	long
-	O
1	int
]	O
*	O
offdiag	array(double)
[	O
o_stride	long
*	O
(	O
i	long
-	O
1	int
)	O
]	O
/	O
alpha	long double
[	O
i	long
]	O
;	O
if	O
(	O
alpha	long double
[	O
i	long
]	O
==	O
0	int
)	O
{	O
status	int
=	O
GSL_EZERODIV	int
;	O
}	O
}	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
N	long
-	O
2	int
;	O
i	long
++	O
)	O
{	O
sum	double
+=	O
alpha	long double
[	O
i	long
]	O
*	O
delta	*(double)
[	O
i	long
]	O
*	O
delta	*(double)
[	O
i	long
]	O
;	O
}	O
alpha	long double
[	O
N	long
-	O
2	int
]	O
=	O
diag	array(double)
[	O
d_stride	long
*	O
(	O
N	long
-	O
2	int
)	O
]	O
-	O
offdiag	array(double)
[	O
o_stride	long
*	O
(	O
N	long
-	O
3	int
)	O
]	O
*	O
gamma	(double)->(double)
[	O
N	long
-	O
3	int
]	O
;	O
gamma	(double)->(double)
[	O
N	long
-	O
2	int
]	O
=	O
(	O
offdiag	array(double)
[	O
o_stride	long
*	O
(	O
N	long
-	O
2	int
)	O
]	O
-	O
offdiag	array(double)
[	O
o_stride	long
*	O
(	O
N	long
-	O
3	int
)	O
]	O
*	O
delta	*(double)
[	O
N	long
-	O
3	int
]	O
)	O
/	O
alpha	long double
[	O
N	long
-	O
2	int
]	O
;	O
alpha	long double
[	O
N	long
-	O
1	int
]	O
=	O
diag	array(double)
[	O
d_stride	long
*	O
(	O
N	long
-	O
1	int
)	O
]	O
-	O
sum	double
-	O
alpha	long double
[	O
(	O
N	long
-	O
2	int
)	O
]	O
*	O
gamma	(double)->(double)
[	O
N	long
-	O
2	int
]	O
*	O
gamma	(double)->(double)
[	O
N	long
-	O
2	int
]	O
;	O
z	struct(array(long double))
[	O
0	int
]	O
=	O
b	array(double)
[	O
0	int
]	O
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<	O
N	long
-	O
1	int
;	O
i	long
++	O
)	O
{	O
z	struct(array(long double))
[	O
i	long
]	O
=	O
b	array(double)
[	O
b_stride	long
*	O
i	long
]	O
-	O
z	struct(array(long double))
[	O
i	long
-	O
1	int
]	O
*	O
gamma	(double)->(double)
[	O
i	long
-	O
1	int
]	O
;	O
}	O
sum	double
=	O
0.0	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
N	long
-	O
2	int
;	O
i	long
++	O
)	O
{	O
sum	double
+=	O
delta	*(double)
[	O
i	long
]	O
*	O
z	struct(array(long double))
[	O
i	long
]	O
;	O
}	O
z	struct(array(long double))
[	O
N	long
-	O
1	int
]	O
=	O
b	array(double)
[	O
b_stride	long
*	O
(	O
N	long
-	O
1	int
)	O
]	O
-	O
sum	double
-	O
gamma	(double)->(double)
[	O
N	long
-	O
2	int
]	O
*	O
z	struct(array(long double))
[	O
N	long
-	O
2	int
]	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
N	long
;	O
i	long
++	O
)	O
{	O
c	*(float)
[	O
i	long
]	O
=	O
z	struct(array(long double))
[	O
i	long
]	O
/	O
alpha	long double
[	O
i	long
]	O
;	O
}	O
x	array(double)
[	O
x_stride	long
*	O
(	O
N	long
-	O
1	int
)	O
]	O
=	O
c	*(float)
[	O
N	long
-	O
1	int
]	O
;	O
x	array(double)
[	O
x_stride	long
*	O
(	O
N	long
-	O
2	int
)	O
]	O
=	O
c	*(float)
[	O
N	long
-	O
2	int
]	O
-	O
gamma	(double)->(double)
[	O
N	long
-	O
2	int
]	O
*	O
x	array(double)
[	O
x_stride	long
*	O
(	O
N	long
-	O
1	int
)	O
]	O
;	O
if	O
(	O
N	long
>=	O
3	int
)	O
{	O
for	O
(	O
i	long
=	O
N	long
-	O
3	int
,	O
j	long
=	O
0	int
;	O
j	long
<=	O
N	long
-	O
3	int
;	O
j	long
++	O
,	O
i	long
--	O
)	O
{	O
x	array(double)
[	O
x_stride	long
*	O
i	long
]	O
=	O
c	*(float)
[	O
i	long
]	O
-	O
gamma	(double)->(double)
[	O
i	long
]	O
*	O
x	array(double)
[	O
x_stride	long
*	O
(	O
i	long
+	O
1	int
)	O
]	O
-	O
delta	*(double)
[	O
i	long
]	O
*	O
x	array(double)
[	O
x_stride	long
*	O
(	O
N	long
-	O
1	int
)	O
]	O
;	O
}	O
}	O
}	O
if	O
(	O
z	struct(array(long double))
!=	O
0	int
)	O
free	(*(void))->(void)
(	O
z	struct(array(long double))
)	O
;	O
if	O
(	O
c	*(float)
!=	O
0	int
)	O
free	(*(void))->(void)
(	O
c	*(float)
)	O
;	O
if	O
(	O
alpha	long double
!=	O
0	int
)	O
free	(*(void))->(void)
(	O
alpha	long double
)	O
;	O
if	O
(	O
gamma	(double)->(double)
!=	O
0	int
)	O
free	(*(void))->(void)
(	O
gamma	(double)->(double)
)	O
;	O
if	O
(	O
delta	*(double)
!=	O
0	int
)	O
free	(*(void))->(void)
(	O
delta	*(double)
)	O
;	O
if	O
(	O
status	int
==	O
GSL_EZERODIV	int
)	O
{	O
GSL_ERROR	O
(	O
"matrix must be positive definite"	*(char)
,	O
status	int
)	O
;	O
}	O
return	O
status	int
;	O
}	O
static	O
int	O
solve_cyc_tridiag_nonsym	(array(double),long,array(double),long,array(double),long,array(double),long,array(double),long,long)->(int)
(	O
const	O
double	O
diag	array(double)
[	O
]	O
,	O
size_t	long
d_stride	long
,	O
const	O
double	O
abovediag	array(double)
[	O
]	O
,	O
size_t	long
a_stride	long
,	O
const	O
double	O
belowdiag	array(double)
[	O
]	O
,	O
size_t	long
b_stride	long
,	O
const	O
double	O
rhs	array(double)
[	O
]	O
,	O
size_t	long
r_stride	long
,	O
double	O
x	array(double)
[	O
]	O
,	O
size_t	long
x_stride	long
,	O
size_t	long
N	long
)	O
{	O
int	O
status	int
=	O
GSL_SUCCESS	int
;	O
double	O
*	O
alpha	long double
=	O
(	O
double	O
*	O
)	O
malloc	(long)->(*(void))
(	O
N	long
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
double	O
*	O
zb	*(double)
=	O
(	O
double	O
*	O
)	O
malloc	(long)->(*(void))
(	O
N	long
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
double	O
*	O
zu	*(double)
=	O
(	O
double	O
*	O
)	O
malloc	(long)->(*(void))
(	O
N	long
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
double	O
*	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
=	O
(	O
double	O
*	O
)	O
malloc	(long)->(*(void))
(	O
N	long
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
if	O
(	O
alpha	long double
==	O
0	int
||	O
zb	*(double)
==	O
0	int
||	O
zu	*(double)
==	O
0	int
||	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
==	O
0	int
)	O
{	O
GSL_ERROR	O
(	O
"failed to allocate working space"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
else	O
{	O
double	O
beta	long double
;	O
zb	*(double)
[	O
0	int
]	O
=	O
rhs	array(double)
[	O
0	int
]	O
;	O
if	O
(	O
diag	array(double)
[	O
0	int
]	O
!=	O
0	int
)	O
beta	long double
=	O
-	O
diag	array(double)
[	O
0	int
]	O
;	O
else	O
beta	long double
=	O
1	int
;	O
{	O
const	O
double	O
q	*(struct(long,*(long)))
=	O
1	int
-	O
abovediag	array(double)
[	O
0	int
]	O
*	O
belowdiag	array(double)
[	O
0	int
]	O
/	O
(	O
diag	array(double)
[	O
0	int
]	O
*	O
diag	array(double)
[	O
d_stride	long
]	O
)	O
;	O
if	O
(	O
fabs	(double)->(double)
(	O
q	*(struct(long,*(long)))
/	O
beta	long double
)	O
>	O
0.5	int
&&	O
fabs	(double)->(double)
(	O
q	*(struct(long,*(long)))
/	O
beta	long double
)	O
<	O
2	int
)	O
{	O
beta	long double
*=	O
(	O
fabs	(double)->(double)
(	O
q	*(struct(long,*(long)))
/	O
beta	long double
)	O
<	O
1	int
)	O
?	O
0.5	int
:	O
2	int
;	O
}	O
}	O
zu	*(double)
[	O
0	int
]	O
=	O
beta	long double
;	O
alpha	long double
[	O
0	int
]	O
=	O
diag	array(double)
[	O
0	int
]	O
-	O
beta	long double
;	O
if	O
(	O
alpha	long double
[	O
0	int
]	O
==	O
0	int
)	O
{	O
status	int
=	O
GSL_EZERODIV	int
;	O
}	O
{	O
size_t	long
i	long
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
+	O
1	int
<	O
N	long
;	O
i	long
++	O
)	O
{	O
const	O
double	O
t	double
=	O
belowdiag	array(double)
[	O
b_stride	long
*	O
(	O
i	long
-	O
1	int
)	O
]	O
/	O
alpha	long double
[	O
i	long
-	O
1	int
]	O
;	O
alpha	long double
[	O
i	long
]	O
=	O
diag	array(double)
[	O
d_stride	long
*	O
i	long
]	O
-	O
t	double
*	O
abovediag	array(double)
[	O
a_stride	long
*	O
(	O
i	long
-	O
1	int
)	O
]	O
;	O
zb	*(double)
[	O
i	long
]	O
=	O
rhs	array(double)
[	O
r_stride	long
*	O
i	long
]	O
-	O
t	double
*	O
zb	*(double)
[	O
i	long
-	O
1	int
]	O
;	O
zu	*(double)
[	O
i	long
]	O
=	O
-	O
t	double
*	O
zu	*(double)
[	O
i	long
-	O
1	int
]	O
;	O
if	O
(	O
alpha	long double
[	O
i	long
]	O
==	O
0	int
)	O
{	O
status	int
=	O
GSL_EZERODIV	int
;	O
}	O
}	O
}	O
{	O
const	O
size_t	long
i	long
=	O
N	long
-	O
1	int
;	O
const	O
double	O
t	double
=	O
belowdiag	array(double)
[	O
b_stride	long
*	O
(	O
i	long
-	O
1	int
)	O
]	O
/	O
alpha	long double
[	O
i	long
-	O
1	int
]	O
;	O
alpha	long double
[	O
i	long
]	O
=	O
diag	array(double)
[	O
d_stride	long
*	O
i	long
]	O
-	O
abovediag	array(double)
[	O
a_stride	long
*	O
i	long
]	O
*	O
belowdiag	array(double)
[	O
b_stride	long
*	O
i	long
]	O
/	O
beta	long double
-	O
t	double
*	O
abovediag	array(double)
[	O
a_stride	long
*	O
(	O
i	long
-	O
1	int
)	O
]	O
;	O
zb	*(double)
[	O
i	long
]	O
=	O
rhs	array(double)
[	O
r_stride	long
*	O
i	long
]	O
-	O
t	double
*	O
zb	*(double)
[	O
i	long
-	O
1	int
]	O
;	O
zu	*(double)
[	O
i	long
]	O
=	O
abovediag	array(double)
[	O
a_stride	long
*	O
i	long
]	O
-	O
t	double
*	O
zu	*(double)
[	O
i	long
-	O
1	int
]	O
;	O
if	O
(	O
alpha	long double
[	O
i	long
]	O
==	O
0	int
)	O
{	O
status	int
=	O
GSL_EZERODIV	int
;	O
}	O
}	O
{	O
size_t	long
i	long
,	O
j	long
;	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
[	O
N	long
-	O
1	int
]	O
=	O
zu	*(double)
[	O
N	long
-	O
1	int
]	O
/	O
alpha	long double
[	O
N	long
-	O
1	int
]	O
;	O
x	array(double)
[	O
x_stride	long
*	O
(	O
N	long
-	O
1	int
)	O
]	O
=	O
zb	*(double)
[	O
N	long
-	O
1	int
]	O
/	O
alpha	long double
[	O
N	long
-	O
1	int
]	O
;	O
for	O
(	O
i	long
=	O
N	long
-	O
2	int
,	O
j	long
=	O
0	int
;	O
j	long
<=	O
N	long
-	O
2	int
;	O
j	long
++	O
,	O
i	long
--	O
)	O
{	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
[	O
i	long
]	O
=	O
(	O
zu	*(double)
[	O
i	long
]	O
-	O
abovediag	array(double)
[	O
a_stride	long
*	O
i	long
]	O
*	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
[	O
i	long
+	O
1	int
]	O
)	O
/	O
alpha	long double
[	O
i	long
]	O
;	O
x	array(double)
[	O
i	long
*	O
x_stride	long
]	O
=	O
(	O
zb	*(double)
[	O
i	long
]	O
-	O
abovediag	array(double)
[	O
a_stride	long
*	O
i	long
]	O
*	O
x	array(double)
[	O
x_stride	long
*	O
(	O
i	long
+	O
1	int
)	O
]	O
)	O
/	O
alpha	long double
[	O
i	long
]	O
;	O
}	O
}	O
{	O
const	O
double	O
vw	double
=	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
[	O
0	int
]	O
+	O
belowdiag	array(double)
[	O
b_stride	long
*	O
(	O
N	long
-	O
1	int
)	O
]	O
/	O
beta	long double
*	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
[	O
N	long
-	O
1	int
]	O
;	O
const	O
double	O
vx	double
=	O
x	array(double)
[	O
0	int
]	O
+	O
belowdiag	array(double)
[	O
b_stride	long
*	O
(	O
N	long
-	O
1	int
)	O
]	O
/	O
beta	long double
*	O
x	array(double)
[	O
x_stride	long
*	O
(	O
N	long
-	O
1	int
)	O
]	O
;	O
if	O
(	O
vw	double
+	O
1	int
==	O
0	int
)	O
{	O
status	int
=	O
GSL_EZERODIV	int
;	O
}	O
{	O
size_t	long
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
N	long
;	O
i	long
++	O
)	O
x	array(double)
[	O
i	long
*	O
x_stride	long
]	O
-=	O
vx	double
/	O
(	O
1	int
+	O
vw	double
)	O
*	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
[	O
i	long
]	O
;	O
}	O
}	O
}	O
if	O
(	O
zb	*(double)
!=	O
0	int
)	O
free	(*(void))->(void)
(	O
zb	*(double)
)	O
;	O
if	O
(	O
zu	*(double)
!=	O
0	int
)	O
free	(*(void))->(void)
(	O
zu	*(double)
)	O
;	O
if	O
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
!=	O
0	int
)	O
free	(*(void))->(void)
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
)	O
;	O
if	O
(	O
alpha	long double
!=	O
0	int
)	O
free	(*(void))->(void)
(	O
alpha	long double
)	O
;	O
if	O
(	O
status	int
==	O
GSL_EZERODIV	int
)	O
{	O
GSL_ERROR	O
(	O
"matrix must be positive definite"	*(char)
,	O
status	int
)	O
;	O
}	O
return	O
status	int
;	O
}	O
int	O
gsl_linalg_solve_symm_tridiag	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
const	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
diag	array(double)
,	O
const	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
offdiag	array(double)
,	O
const	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
rhs	array(double)
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
solution	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
{	O
if	O
(	O
diag	array(double)
->	O
size	long
!=	O
rhs	array(double)
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"size of diag must match rhs"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
offdiag	array(double)
->	O
size	long
!=	O
rhs	array(double)
->	O
size	long
-	O
1	int
)	O
{	O
GSL_ERROR	O
(	O
"size of offdiag must match rhs-1"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
solution	*(struct(long,long,*(double),*(struct(long,*(double))),int))
->	O
size	long
!=	O
rhs	array(double)
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"size of solution must match rhs"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
return	O
solve_tridiag	(array(double),long,array(double),long,array(double),long,array(double),long,long)->(int)
(	O
diag	array(double)
->	O
data	*(long)
,	O
diag	array(double)
->	O
stride	long
,	O
offdiag	array(double)
->	O
data	*(long)
,	O
offdiag	array(double)
->	O
stride	long
,	O
rhs	array(double)
->	O
data	*(long)
,	O
rhs	array(double)
->	O
stride	long
,	O
solution	*(struct(long,long,*(double),*(struct(long,*(double))),int))
->	O
data	*(long)
,	O
solution	*(struct(long,long,*(double),*(struct(long,*(double))),int))
->	O
stride	long
,	O
diag	array(double)
->	O
size	long
)	O
;	O
}	O
}	O
int	O
gsl_linalg_solve_tridiag	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
const	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
diag	array(double)
,	O
const	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
abovediag	array(double)
,	O
const	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
belowdiag	array(double)
,	O
const	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
rhs	array(double)
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
solution	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
{	O
if	O
(	O
diag	array(double)
->	O
size	long
!=	O
rhs	array(double)
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"size of diag must match rhs"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
abovediag	array(double)
->	O
size	long
!=	O
rhs	array(double)
->	O
size	long
-	O
1	int
)	O
{	O
GSL_ERROR	O
(	O
"size of abovediag must match rhs-1"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
belowdiag	array(double)
->	O
size	long
!=	O
rhs	array(double)
->	O
size	long
-	O
1	int
)	O
{	O
GSL_ERROR	O
(	O
"size of belowdiag must match rhs-1"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
solution	*(struct(long,long,*(double),*(struct(long,*(double))),int))
->	O
size	long
!=	O
rhs	array(double)
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"size of solution must match rhs"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
return	O
solve_tridiag_nonsym	(array(double),long,array(double),long,array(double),long,array(double),long,array(double),long,long)->(int)
(	O
diag	array(double)
->	O
data	*(long)
,	O
diag	array(double)
->	O
stride	long
,	O
abovediag	array(double)
->	O
data	*(long)
,	O
abovediag	array(double)
->	O
stride	long
,	O
belowdiag	array(double)
->	O
data	*(long)
,	O
belowdiag	array(double)
->	O
stride	long
,	O
rhs	array(double)
->	O
data	*(long)
,	O
rhs	array(double)
->	O
stride	long
,	O
solution	*(struct(long,long,*(double),*(struct(long,*(double))),int))
->	O
data	*(long)
,	O
solution	*(struct(long,long,*(double),*(struct(long,*(double))),int))
->	O
stride	long
,	O
diag	array(double)
->	O
size	long
)	O
;	O
}	O
}	O
int	O
gsl_linalg_solve_symm_cyc_tridiag	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
const	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
diag	array(double)
,	O
const	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
offdiag	array(double)
,	O
const	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
rhs	array(double)
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
solution	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
{	O
if	O
(	O
diag	array(double)
->	O
size	long
!=	O
rhs	array(double)
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"size of diag must match rhs"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
offdiag	array(double)
->	O
size	long
!=	O
rhs	array(double)
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"size of offdiag must match rhs"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
solution	*(struct(long,long,*(double),*(struct(long,*(double))),int))
->	O
size	long
!=	O
rhs	array(double)
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"size of solution must match rhs"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
diag	array(double)
->	O
size	long
<	O
3	int
)	O
{	O
GSL_ERROR	O
(	O
"size of cyclic system must be 3 or more"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
return	O
solve_cyc_tridiag	(array(double),long,array(double),long,array(double),long,array(double),long,long)->(int)
(	O
diag	array(double)
->	O
data	*(long)
,	O
diag	array(double)
->	O
stride	long
,	O
offdiag	array(double)
->	O
data	*(long)
,	O
offdiag	array(double)
->	O
stride	long
,	O
rhs	array(double)
->	O
data	*(long)
,	O
rhs	array(double)
->	O
stride	long
,	O
solution	*(struct(long,long,*(double),*(struct(long,*(double))),int))
->	O
data	*(long)
,	O
solution	*(struct(long,long,*(double),*(struct(long,*(double))),int))
->	O
stride	long
,	O
diag	array(double)
->	O
size	long
)	O
;	O
}	O
}	O
int	O
gsl_linalg_solve_cyc_tridiag	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
const	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
diag	array(double)
,	O
const	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
abovediag	array(double)
,	O
const	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
belowdiag	array(double)
,	O
const	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
rhs	array(double)
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
solution	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
{	O
if	O
(	O
diag	array(double)
->	O
size	long
!=	O
rhs	array(double)
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"size of diag must match rhs"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
abovediag	array(double)
->	O
size	long
!=	O
rhs	array(double)
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"size of abovediag must match rhs"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
belowdiag	array(double)
->	O
size	long
!=	O
rhs	array(double)
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"size of belowdiag must match rhs"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
solution	*(struct(long,long,*(double),*(struct(long,*(double))),int))
->	O
size	long
!=	O
rhs	array(double)
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"size of solution must match rhs"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
diag	array(double)
->	O
size	long
<	O
3	int
)	O
{	O
GSL_ERROR	O
(	O
"size of cyclic system must be 3 or more"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
return	O
solve_cyc_tridiag_nonsym	(array(double),long,array(double),long,array(double),long,array(double),long,array(double),long,long)->(int)
(	O
diag	array(double)
->	O
data	*(long)
,	O
diag	array(double)
->	O
stride	long
,	O
abovediag	array(double)
->	O
data	*(long)
,	O
abovediag	array(double)
->	O
stride	long
,	O
belowdiag	array(double)
->	O
data	*(long)
,	O
belowdiag	array(double)
->	O
stride	long
,	O
rhs	array(double)
->	O
data	*(long)
,	O
rhs	array(double)
->	O
stride	long
,	O
solution	*(struct(long,long,*(double),*(struct(long,*(double))),int))
->	O
data	*(long)
,	O
solution	*(struct(long,long,*(double),*(struct(long,*(double))),int))
->	O
stride	long
,	O
diag	array(double)
->	O
size	long
)	O
;	O
}	O
}	O
