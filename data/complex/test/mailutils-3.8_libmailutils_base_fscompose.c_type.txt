int	O
mu_file_safety_compose	(*(int),*(char),int)->(int)
(	O
int	O
*	O
res	*(int)
,	O
const	O
char	O
*	O
name	*(char)
,	O
int	O
defval	int
)	O
{	O
int	O
negate	int
=	O
0	int
;	O
int	O
val	array(int)
;	O
if	O
(	O
*	O
name	*(char)
==	O
'-'	O
)	O
{	O
negate	int
=	O
1	int
;	O
name	*(char)
++	O
;	O
}	O
else	O
if	O
(	O
*	O
name	*(char)
==	O
'+'	O
)	O
name	*(char)
++	O
;	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
name	*(char)
,	O
"none"	*(char)
)	O
==	O
0	int
)	O
{	O
*	O
res	*(int)
=	O
negate	int
?	O
MU_FILE_SAFETY_ALL	O
:	O
MU_FILE_SAFETY_NONE	int
;	O
return	O
0	int
;	O
}	O
else	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
name	*(char)
,	O
"all"	*(char)
)	O
==	O
0	int
)	O
{	O
*	O
res	*(int)
=	O
negate	int
?	O
MU_FILE_SAFETY_NONE	int
:	O
MU_FILE_SAFETY_ALL	O
;	O
return	O
0	int
;	O
}	O
else	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
name	*(char)
,	O
"default"	*(char)
)	O
==	O
0	int
)	O
val	array(int)
=	O
defval	int
;	O
else	O
if	O
(	O
mu_file_safety_name_to_code	(*(char),*(int))->(int)
(	O
name	*(char)
,	O
&	O
val	array(int)
)	O
)	O
return	O
MU_ERR_NOENT	O
;	O
if	O
(	O
negate	int
)	O
*	O
res	*(int)
&=	O
~	O
val	array(int)
;	O
else	O
*	O
res	*(int)
|=	O
val	array(int)
;	O
return	O
0	int
;	O
}	O
