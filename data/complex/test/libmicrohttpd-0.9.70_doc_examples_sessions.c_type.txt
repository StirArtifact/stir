struct	O
Session	struct(*(struct(*(struct(*(struct`),array(char),int,long,array(char),array(char))),array(char),int,long,array(char),array(char))),array(char),int,long,array(char),array(char))
{	O
struct	O
Session	struct(*(struct(*(struct(*(struct`),array(char),int,long,array(char),array(char))),array(char),int,long,array(char),array(char))),array(char),int,long,array(char),array(char))
*	O
next	*(struct(*(struct(*(struct`),array(char),int,long,array(char),array(char))),array(char),int,long,array(char),array(char)))
;	O
char	O
sid	array(char)
[	O
33	int
]	O
;	O
unsigned	O
int	O
rc	int
;	O
time_t	long
start	long
;	O
char	O
value_1	array(char)
[	O
64	int
]	O
;	O
char	O
value_2	array(char)
[	O
64	int
]	O
;	O
}	O
;	O
struct	O
Request	struct(*(struct(*(struct(*(struct`),array(char),int,long,array(char),array(char))),array(char),int,long,array(char),array(char))),*(struct),*(char))
{	O
struct	O
Session	struct(*(struct(*(struct(*(struct`),array(char),int,long,array(char),array(char))),array(char),int,long,array(char),array(char))),array(char),int,long,array(char),array(char))
*	O
session	*(struct(*(struct(*(struct`),array(char),int,long,array(char),array(char))),array(char),int,long,array(char),array(char)))
;	O
struct	O
MHD_PostProcessor	O
*	O
pp	*(struct)
;	O
const	O
char	O
*	O
post_url	*(char)
;	O
}	O
;	O
static	O
struct	O
Session	struct(*(struct(*(struct(*(struct`),array(char),int,long,array(char),array(char))),array(char),int,long,array(char),array(char))),array(char),int,long,array(char),array(char))
*	O
sessions	*(struct(*(struct(*(struct`),array(char),int,long,array(char),array(char))),array(char),int,long,array(char),array(char)))
;	O
static	O
struct	O
Session	struct(*(struct(*(struct(*(struct`),array(char),int,long,array(char),array(char))),array(char),int,long,array(char),array(char))),array(char),int,long,array(char),array(char))
*	O
get_session	(*(struct))->(*(struct(*(struct(*`,array(char),int,long,array(char),array(char))),array(char),int,long,array(char),array(char))))
(	O
struct	O
MHD_Connection	O
*	O
connection	*(struct)
)	O
{	O
struct	O
Session	struct(*(struct(*(struct(*(struct`),array(char),int,long,array(char),array(char))),array(char),int,long,array(char),array(char))),array(char),int,long,array(char),array(char))
*	O
ret	*(struct(*(struct(*(struct`),array(char),int,long,array(char),array(char))),array(char),int,long,array(char),array(char)))
;	O
const	O
char	O
*	O
cookie	*(char)
;	O
cookie	*(char)
=	O
MHD_lookup_connection_value	(*(struct),enum(int,int,int,int,int,int),*(char))->(*(char))
(	O
connection	*(struct)
,	O
MHD_COOKIE_KIND	int
,	O
COOKIE_NAME	*(char)
)	O
;	O
if	O
(	O
cookie	*(char)
!=	O
NULL	O
)	O
{	O
ret	*(struct(*(struct(*(struct`),array(char),int,long,array(char),array(char))),array(char),int,long,array(char),array(char)))
=	O
sessions	*(struct(*(struct(*(struct`),array(char),int,long,array(char),array(char))),array(char),int,long,array(char),array(char)))
;	O
while	O
(	O
NULL	O
!=	O
ret	*(struct(*(struct(*(struct`),array(char),int,long,array(char),array(char))),array(char),int,long,array(char),array(char)))
)	O
{	O
if	O
(	O
0	int
==	O
strcmp	(*(char),*(char))->(int)
(	O
cookie	*(char)
,	O
ret	*(struct(*(struct(*(struct`),array(char),int,long,array(char),array(char))),array(char),int,long,array(char),array(char)))
->	O
sid	array(char)
)	O
)	O
break	O
;	O
ret	*(struct(*(struct(*(struct`),array(char),int,long,array(char),array(char))),array(char),int,long,array(char),array(char)))
=	O
ret	*(struct(*(struct(*(struct`),array(char),int,long,array(char),array(char))),array(char),int,long,array(char),array(char)))
->	O
next	*(struct(*(struct(*(struct`),array(char),int,long,array(char),array(char))),array(char),int,long,array(char),array(char)))
;	O
}	O
if	O
(	O
NULL	O
!=	O
ret	*(struct(*(struct(*(struct`),array(char),int,long,array(char),array(char))),array(char),int,long,array(char),array(char)))
)	O
{	O
ret	*(struct(*(struct(*(struct`),array(char),int,long,array(char),array(char))),array(char),int,long,array(char),array(char)))
->	O
rc	int
++	O
;	O
return	O
ret	*(struct(*(struct(*(struct`),array(char),int,long,array(char),array(char))),array(char),int,long,array(char),array(char)))
;	O
}	O
}	O
ret	*(struct(*(struct(*(struct`),array(char),int,long,array(char),array(char))),array(char),int,long,array(char),array(char)))
=	O
calloc	(long,long)->(*(void))
(	O
1	int
,	O
sizeof	O
(	O
struct	O
Session	struct(*(struct(*(struct(*(struct`),array(char),int,long,array(char),array(char))),array(char),int,long,array(char),array(char))),array(char),int,long,array(char),array(char))
)	O
)	O
;	O
if	O
(	O
NULL	O
==	O
ret	*(struct(*(struct(*(struct`),array(char),int,long,array(char),array(char))),array(char),int,long,array(char),array(char)))
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"calloc error: %s\n"	*(char)
,	O
strerror	(int)->(*(char))
(	O
errno	O
)	O
)	O
;	O
return	O
NULL	O
;	O
}	O
snprintf	(*(char),long,*(char))->(int)
(	O
ret	*(struct(*(struct(*(struct`),array(char),int,long,array(char),array(char))),array(char),int,long,array(char),array(char)))
->	O
sid	array(char)
,	O
sizeof	O
(	O
ret	*(struct(*(struct(*(struct`),array(char),int,long,array(char),array(char))),array(char),int,long,array(char),array(char)))
->	O
sid	array(char)
)	O
,	O
"%X%X%X%X"	*(char)
,	O
(	O
unsigned	O
int	O
)	O
rand	()->(int)
(	O
)	O
,	O
(	O
unsigned	O
int	O
)	O
rand	()->(int)
(	O
)	O
,	O
(	O
unsigned	O
int	O
)	O
rand	()->(int)
(	O
)	O
,	O
(	O
unsigned	O
int	O
)	O
rand	()->(int)
(	O
)	O
)	O
;	O
ret	*(struct(*(struct(*(struct`),array(char),int,long,array(char),array(char))),array(char),int,long,array(char),array(char)))
->	O
rc	int
++	O
;	O
ret	*(struct(*(struct(*(struct`),array(char),int,long,array(char),array(char))),array(char),int,long,array(char),array(char)))
->	O
start	long
=	O
time	struct(long,long)
(	O
NULL	O
)	O
;	O
ret	*(struct(*(struct(*(struct`),array(char),int,long,array(char),array(char))),array(char),int,long,array(char),array(char)))
->	O
next	*(struct(*(struct(*(struct`),array(char),int,long,array(char),array(char))),array(char),int,long,array(char),array(char)))
=	O
sessions	*(struct(*(struct(*(struct`),array(char),int,long,array(char),array(char))),array(char),int,long,array(char),array(char)))
;	O
sessions	*(struct(*(struct(*(struct`),array(char),int,long,array(char),array(char))),array(char),int,long,array(char),array(char)))
=	O
ret	*(struct(*(struct(*(struct`),array(char),int,long,array(char),array(char))),array(char),int,long,array(char),array(char)))
;	O
return	O
ret	*(struct(*(struct(*(struct`),array(char),int,long,array(char),array(char))),array(char),int,long,array(char),array(char)))
;	O
}	O
typedef	O
int	O
(	O
*	O
PageHandler	*((*(void),*(char),*(struct(*(struct`),array(char),int,long,array(char),array(char))),*(struct))->(int))
)	O
(	O
const	O
void	O
*	O
cls	*(void)
,	O
const	O
char	O
*	O
mime	*(char)
,	O
struct	O
Session	struct(*(struct(*(struct(*(struct`),array(char),int,long,array(char),array(char))),array(char),int,long,array(char),array(char))),array(char),int,long,array(char),array(char))
*	O
session	*(struct(*(struct(*(struct`),array(char),int,long,array(char),array(char))),array(char),int,long,array(char),array(char)))
,	O
struct	O
MHD_Connection	O
*	O
connection	*(struct)
)	O
;	O
struct	O
Page	struct(*(char),*(char),*((*(void),*(char),*(struct(*(struct`),array(char),int,long,array(char),array(char))),*(struct))->(int)),*(void))
{	O
const	O
char	O
*	O
url	*(char)
;	O
const	O
char	O
*	O
mime	*(char)
;	O
PageHandler	*((*(void),*(char),*(struct(*(struct`),array(char),int,long,array(char),array(char))),*(struct))->(int))
handler	*((*(void),*(char),*(struct(*(struct`),array(char),int,long,array(char),array(char))),*(struct))->(int))
;	O
const	O
void	O
*	O
handler_cls	*(void)
;	O
}	O
;	O
static	O
void	O
add_session_cookie	(*(struct(*(struct(*`,array(char),int,long,array(char),array(char))),array(char),int,long,array(char),array(char))),*(struct))->(void)
(	O
struct	O
Session	struct(*(struct(*(struct(*(struct`),array(char),int,long,array(char),array(char))),array(char),int,long,array(char),array(char))),array(char),int,long,array(char),array(char))
*	O
session	*(struct(*(struct(*(struct`),array(char),int,long,array(char),array(char))),array(char),int,long,array(char),array(char)))
,	O
struct	O
MHD_Response	O
*	O
response	*(struct)
)	O
{	O
char	O
cstr	array(char)
[	O
256	int
]	O
;	O
snprintf	(*(char),long,*(char))->(int)
(	O
cstr	array(char)
,	O
sizeof	O
(	O
cstr	array(char)
)	O
,	O
"%s=%s"	*(char)
,	O
COOKIE_NAME	*(char)
,	O
session	*(struct(*(struct(*(struct`),array(char),int,long,array(char),array(char))),array(char),int,long,array(char),array(char)))
->	O
sid	array(char)
)	O
;	O
if	O
(	O
MHD_NO	int
==	O
MHD_add_response_header	(*(struct),*(char),*(char))->(int)
(	O
response	*(struct)
,	O
MHD_HTTP_HEADER_SET_COOKIE	*(char)
,	O
cstr	array(char)
)	O
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"Failed to set session cookie header!\n"	*(char)
)	O
;	O
}	O
}	O
static	O
int	O
serve_simple_form	(*(void),*(char),*(struct(*(struct(*`,array(char),int,long,array(char),array(char))),array(char),int,long,array(char),array(char))),*(struct))->(int)
(	O
const	O
void	O
*	O
cls	*(void)
,	O
const	O
char	O
*	O
mime	*(char)
,	O
struct	O
Session	struct(*(struct(*(struct(*(struct`),array(char),int,long,array(char),array(char))),array(char),int,long,array(char),array(char))),array(char),int,long,array(char),array(char))
*	O
session	*(struct(*(struct(*(struct`),array(char),int,long,array(char),array(char))),array(char),int,long,array(char),array(char)))
,	O
struct	O
MHD_Connection	O
*	O
connection	*(struct)
)	O
{	O
int	O
ret	*(struct(*(struct(*(struct`),array(char),int,long,array(char),array(char))),array(char),int,long,array(char),array(char)))
;	O
const	O
char	O
*	O
form	*(char)
=	O
cls	*(void)
;	O
struct	O
MHD_Response	O
*	O
response	*(struct)
;	O
response	*(struct)
=	O
MHD_create_response_from_buffer	(long,*(void),enum(int,int,int))->(*(struct))
(	O
strlen	(*(char))->(long)
(	O
form	*(char)
)	O
,	O
(	O
void	O
*	O
)	O
form	*(char)
,	O
MHD_RESPMEM_PERSISTENT	int
)	O
;	O
add_session_cookie	(*(struct(*(struct(*`,array(char),int,long,array(char),array(char))),array(char),int,long,array(char),array(char))),*(struct))->(void)
(	O
session	*(struct(*(struct(*(struct`),array(char),int,long,array(char),array(char))),array(char),int,long,array(char),array(char)))
,	O
response	*(struct)
)	O
;	O
MHD_add_response_header	(*(struct),*(char),*(char))->(int)
(	O
response	*(struct)
,	O
MHD_HTTP_HEADER_CONTENT_ENCODING	*(char)
,	O
mime	*(char)
)	O
;	O
ret	*(struct(*(struct(*(struct`),array(char),int,long,array(char),array(char))),array(char),int,long,array(char),array(char)))
=	O
MHD_queue_response	(*(struct),int,*(struct))->(int)
(	O
connection	*(struct)
,	O
MHD_HTTP_OK	int
,	O
response	*(struct)
)	O
;	O
MHD_destroy_response	(*(struct))->(void)
(	O
response	*(struct)
)	O
;	O
return	O
ret	*(struct(*(struct(*(struct`),array(char),int,long,array(char),array(char))),array(char),int,long,array(char),array(char)))
;	O
}	O
static	O
int	O
fill_v1_form	(*(void),*(char),*(struct(*(struct(*`,array(char),int,long,array(char),array(char))),array(char),int,long,array(char),array(char))),*(struct))->(int)
(	O
const	O
void	O
*	O
cls	*(void)
,	O
const	O
char	O
*	O
mime	*(char)
,	O
struct	O
Session	struct(*(struct(*(struct(*(struct`),array(char),int,long,array(char),array(char))),array(char),int,long,array(char),array(char))),array(char),int,long,array(char),array(char))
*	O
session	*(struct(*(struct(*(struct`),array(char),int,long,array(char),array(char))),array(char),int,long,array(char),array(char)))
,	O
struct	O
MHD_Connection	O
*	O
connection	*(struct)
)	O
{	O
int	O
ret	*(struct(*(struct(*(struct`),array(char),int,long,array(char),array(char))),array(char),int,long,array(char),array(char)))
;	O
const	O
char	O
*	O
form	*(char)
=	O
cls	*(void)
;	O
char	O
*	O
reply	*(char)
;	O
struct	O
MHD_Response	O
*	O
response	*(struct)
;	O
if	O
(	O
-	O
1	int
==	O
asprintf	(*(*(char)),*(char))->(int)
(	O
&	O
reply	*(char)
,	O
form	*(char)
,	O
session	*(struct(*(struct(*(struct`),array(char),int,long,array(char),array(char))),array(char),int,long,array(char),array(char)))
->	O
value_1	array(char)
)	O
)	O
{	O
return	O
MHD_NO	int
;	O
}	O
response	*(struct)
=	O
MHD_create_response_from_buffer	(long,*(void),enum(int,int,int))->(*(struct))
(	O
strlen	(*(char))->(long)
(	O
reply	*(char)
)	O
,	O
(	O
void	O
*	O
)	O
reply	*(char)
,	O
MHD_RESPMEM_MUST_FREE	int
)	O
;	O
add_session_cookie	(*(struct(*(struct(*`,array(char),int,long,array(char),array(char))),array(char),int,long,array(char),array(char))),*(struct))->(void)
(	O
session	*(struct(*(struct(*(struct`),array(char),int,long,array(char),array(char))),array(char),int,long,array(char),array(char)))
,	O
response	*(struct)
)	O
;	O
MHD_add_response_header	(*(struct),*(char),*(char))->(int)
(	O
response	*(struct)
,	O
MHD_HTTP_HEADER_CONTENT_ENCODING	*(char)
,	O
mime	*(char)
)	O
;	O
ret	*(struct(*(struct(*(struct`),array(char),int,long,array(char),array(char))),array(char),int,long,array(char),array(char)))
=	O
MHD_queue_response	(*(struct),int,*(struct))->(int)
(	O
connection	*(struct)
,	O
MHD_HTTP_OK	int
,	O
response	*(struct)
)	O
;	O
MHD_destroy_response	(*(struct))->(void)
(	O
response	*(struct)
)	O
;	O
return	O
ret	*(struct(*(struct(*(struct`),array(char),int,long,array(char),array(char))),array(char),int,long,array(char),array(char)))
;	O
}	O
static	O
int	O
fill_v1_v2_form	(*(void),*(char),*(struct(*(struct(*`,array(char),int,long,array(char),array(char))),array(char),int,long,array(char),array(char))),*(struct))->(int)
(	O
const	O
void	O
*	O
cls	*(void)
,	O
const	O
char	O
*	O
mime	*(char)
,	O
struct	O
Session	struct(*(struct(*(struct(*(struct`),array(char),int,long,array(char),array(char))),array(char),int,long,array(char),array(char))),array(char),int,long,array(char),array(char))
*	O
session	*(struct(*(struct(*(struct`),array(char),int,long,array(char),array(char))),array(char),int,long,array(char),array(char)))
,	O
struct	O
MHD_Connection	O
*	O
connection	*(struct)
)	O
{	O
int	O
ret	*(struct(*(struct(*(struct`),array(char),int,long,array(char),array(char))),array(char),int,long,array(char),array(char)))
;	O
const	O
char	O
*	O
form	*(char)
=	O
cls	*(void)
;	O
char	O
*	O
reply	*(char)
;	O
struct	O
MHD_Response	O
*	O
response	*(struct)
;	O
if	O
(	O
-	O
1	int
==	O
asprintf	(*(*(char)),*(char))->(int)
(	O
&	O
reply	*(char)
,	O
form	*(char)
,	O
session	*(struct(*(struct(*(struct`),array(char),int,long,array(char),array(char))),array(char),int,long,array(char),array(char)))
->	O
value_1	array(char)
,	O
session	*(struct(*(struct(*(struct`),array(char),int,long,array(char),array(char))),array(char),int,long,array(char),array(char)))
->	O
value_2	array(char)
)	O
)	O
{	O
return	O
MHD_NO	int
;	O
}	O
response	*(struct)
=	O
MHD_create_response_from_buffer	(long,*(void),enum(int,int,int))->(*(struct))
(	O
strlen	(*(char))->(long)
(	O
reply	*(char)
)	O
,	O
(	O
void	O
*	O
)	O
reply	*(char)
,	O
MHD_RESPMEM_MUST_FREE	int
)	O
;	O
add_session_cookie	(*(struct(*(struct(*`,array(char),int,long,array(char),array(char))),array(char),int,long,array(char),array(char))),*(struct))->(void)
(	O
session	*(struct(*(struct(*(struct`),array(char),int,long,array(char),array(char))),array(char),int,long,array(char),array(char)))
,	O
response	*(struct)
)	O
;	O
MHD_add_response_header	(*(struct),*(char),*(char))->(int)
(	O
response	*(struct)
,	O
MHD_HTTP_HEADER_CONTENT_ENCODING	*(char)
,	O
mime	*(char)
)	O
;	O
ret	*(struct(*(struct(*(struct`),array(char),int,long,array(char),array(char))),array(char),int,long,array(char),array(char)))
=	O
MHD_queue_response	(*(struct),int,*(struct))->(int)
(	O
connection	*(struct)
,	O
MHD_HTTP_OK	int
,	O
response	*(struct)
)	O
;	O
MHD_destroy_response	(*(struct))->(void)
(	O
response	*(struct)
)	O
;	O
return	O
ret	*(struct(*(struct(*(struct`),array(char),int,long,array(char),array(char))),array(char),int,long,array(char),array(char)))
;	O
}	O
static	O
int	O
not_found_page	(*(void),*(char),*(struct(*(struct(*`,array(char),int,long,array(char),array(char))),array(char),int,long,array(char),array(char))),*(struct))->(int)
(	O
const	O
void	O
*	O
cls	*(void)
,	O
const	O
char	O
*	O
mime	*(char)
,	O
struct	O
Session	struct(*(struct(*(struct(*(struct`),array(char),int,long,array(char),array(char))),array(char),int,long,array(char),array(char))),array(char),int,long,array(char),array(char))
*	O
session	*(struct(*(struct(*(struct`),array(char),int,long,array(char),array(char))),array(char),int,long,array(char),array(char)))
,	O
struct	O
MHD_Connection	O
*	O
connection	*(struct)
)	O
{	O
int	O
ret	*(struct(*(struct(*(struct`),array(char),int,long,array(char),array(char))),array(char),int,long,array(char),array(char)))
;	O
struct	O
MHD_Response	O
*	O
response	*(struct)
;	O
(	O
void	O
)	O
cls	*(void)
;	O
(	O
void	O
)	O
session	*(struct(*(struct(*(struct`),array(char),int,long,array(char),array(char))),array(char),int,long,array(char),array(char)))
;	O
response	*(struct)
=	O
MHD_create_response_from_buffer	(long,*(void),enum(int,int,int))->(*(struct))
(	O
strlen	(*(char))->(long)
(	O
NOT_FOUND_ERROR	*(char)
)	O
,	O
(	O
void	O
*	O
)	O
NOT_FOUND_ERROR	*(char)
,	O
MHD_RESPMEM_PERSISTENT	int
)	O
;	O
ret	*(struct(*(struct(*(struct`),array(char),int,long,array(char),array(char))),array(char),int,long,array(char),array(char)))
=	O
MHD_queue_response	(*(struct),int,*(struct))->(int)
(	O
connection	*(struct)
,	O
MHD_HTTP_NOT_FOUND	int
,	O
response	*(struct)
)	O
;	O
MHD_add_response_header	(*(struct),*(char),*(char))->(int)
(	O
response	*(struct)
,	O
MHD_HTTP_HEADER_CONTENT_ENCODING	*(char)
,	O
mime	*(char)
)	O
;	O
MHD_destroy_response	(*(struct))->(void)
(	O
response	*(struct)
)	O
;	O
return	O
ret	*(struct(*(struct(*(struct`),array(char),int,long,array(char),array(char))),array(char),int,long,array(char),array(char)))
;	O
}	O
static	O
struct	O
Page	struct(*(char),*(char),*((*(void),*(char),*(struct(*(struct`),array(char),int,long,array(char),array(char))),*(struct))->(int)),*(void))
pages	array(struct(*(char),*(char),*((*(void),*(char),*(struct(*`,array(char),int,long,array(char),array(char))),*(struct))->(int)),*(void)))
[	O
]	O
=	O
{	O
{	O
"/"	*(char)
,	O
"text/html"	*(char)
,	O
&	O
fill_v1_form	(*(void),*(char),*(struct(*(struct(*`,array(char),int,long,array(char),array(char))),array(char),int,long,array(char),array(char))),*(struct))->(int)
,	O
MAIN_PAGE	*(char)
}	O
,	O
{	O
"/2"	*(char)
,	O
"text/html"	*(char)
,	O
&	O
fill_v1_v2_form	(*(void),*(char),*(struct(*(struct(*`,array(char),int,long,array(char),array(char))),array(char),int,long,array(char),array(char))),*(struct))->(int)
,	O
SECOND_PAGE	*(char)
}	O
,	O
{	O
"/S"	*(char)
,	O
"text/html"	*(char)
,	O
&	O
serve_simple_form	(*(void),*(char),*(struct(*(struct(*`,array(char),int,long,array(char),array(char))),array(char),int,long,array(char),array(char))),*(struct))->(int)
,	O
SUBMIT_PAGE	*(char)
}	O
,	O
{	O
"/F"	*(char)
,	O
"text/html"	*(char)
,	O
&	O
serve_simple_form	(*(void),*(char),*(struct(*(struct(*`,array(char),int,long,array(char),array(char))),array(char),int,long,array(char),array(char))),*(struct))->(int)
,	O
LAST_PAGE	*(char)
}	O
,	O
{	O
NULL	O
,	O
NULL	O
,	O
&	O
not_found_page	(*(void),*(char),*(struct(*(struct(*`,array(char),int,long,array(char),array(char))),array(char),int,long,array(char),array(char))),*(struct))->(int)
,	O
NULL	O
}	O
}	O
;	O
static	O
int	O
post_iterator	(*(void),enum(int,int,int,int,int,int),*(char),*(char),*(char),*(char),*(char),long,long)->(int)
(	O
void	O
*	O
cls	*(void)
,	O
enum	O
MHD_ValueKind	enum(int,int,int,int,int,int)
kind	enum(int,int,int,int,int,int)
,	O
const	O
char	O
*	O
key	*(char)
,	O
const	O
char	O
*	O
filename	*(char)
,	O
const	O
char	O
*	O
content_type	*(char)
,	O
const	O
char	O
*	O
transfer_encoding	*(char)
,	O
const	O
char	O
*	O
data	*(char)
,	O
uint64_t	long
off	long
,	O
size_t	long
size	long
)	O
{	O
struct	O
Request	struct(*(struct(*(struct(*(struct`),array(char),int,long,array(char),array(char))),array(char),int,long,array(char),array(char))),*(struct),*(char))
*	O
request	*(struct(*(struct(*(struct`),array(char),int,long,array(char),array(char))),*(struct),*(char)))
=	O
cls	*(void)
;	O
struct	O
Session	struct(*(struct(*(struct(*(struct`),array(char),int,long,array(char),array(char))),array(char),int,long,array(char),array(char))),array(char),int,long,array(char),array(char))
*	O
session	*(struct(*(struct(*(struct`),array(char),int,long,array(char),array(char))),array(char),int,long,array(char),array(char)))
=	O
request	*(struct(*(struct(*(struct`),array(char),int,long,array(char),array(char))),*(struct),*(char)))
->	O
session	*(struct(*(struct(*(struct`),array(char),int,long,array(char),array(char))),array(char),int,long,array(char),array(char)))
;	O
(	O
void	O
)	O
kind	enum(int,int,int,int,int,int)
;	O
(	O
void	O
)	O
filename	*(char)
;	O
(	O
void	O
)	O
content_type	*(char)
;	O
(	O
void	O
)	O
transfer_encoding	*(char)
;	O
if	O
(	O
0	int
==	O
strcmp	(*(char),*(char))->(int)
(	O
"DONE"	*(char)
,	O
key	*(char)
)	O
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"Session `%s' submitted `%s', `%s'\n"	*(char)
,	O
session	*(struct(*(struct(*(struct`),array(char),int,long,array(char),array(char))),array(char),int,long,array(char),array(char)))
->	O
sid	array(char)
,	O
session	*(struct(*(struct(*(struct`),array(char),int,long,array(char),array(char))),array(char),int,long,array(char),array(char)))
->	O
value_1	array(char)
,	O
session	*(struct(*(struct(*(struct`),array(char),int,long,array(char),array(char))),array(char),int,long,array(char),array(char)))
->	O
value_2	array(char)
)	O
;	O
return	O
MHD_YES	int
;	O
}	O
if	O
(	O
0	int
==	O
strcmp	(*(char),*(char))->(int)
(	O
"v1"	*(char)
,	O
key	*(char)
)	O
)	O
{	O
if	O
(	O
size	long
+	O
off	long
>	O
sizeof	O
(	O
session	*(struct(*(struct(*(struct`),array(char),int,long,array(char),array(char))),array(char),int,long,array(char),array(char)))
->	O
value_1	array(char)
)	O
)	O
size	long
=	O
sizeof	O
(	O
session	*(struct(*(struct(*(struct`),array(char),int,long,array(char),array(char))),array(char),int,long,array(char),array(char)))
->	O
value_1	array(char)
)	O
-	O
off	long
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
&	O
session	*(struct(*(struct(*(struct`),array(char),int,long,array(char),array(char))),array(char),int,long,array(char),array(char)))
->	O
value_1	array(char)
[	O
off	long
]	O
,	O
data	*(char)
,	O
size	long
)	O
;	O
if	O
(	O
size	long
+	O
off	long
<	O
sizeof	O
(	O
session	*(struct(*(struct(*(struct`),array(char),int,long,array(char),array(char))),array(char),int,long,array(char),array(char)))
->	O
value_1	array(char)
)	O
)	O
session	*(struct(*(struct(*(struct`),array(char),int,long,array(char),array(char))),array(char),int,long,array(char),array(char)))
->	O
value_1	array(char)
[	O
size	long
+	O
off	long
]	O
=	O
'\0'	O
;	O
return	O
MHD_YES	int
;	O
}	O
if	O
(	O
0	int
==	O
strcmp	(*(char),*(char))->(int)
(	O
"v2"	*(char)
,	O
key	*(char)
)	O
)	O
{	O
if	O
(	O
size	long
+	O
off	long
>	O
sizeof	O
(	O
session	*(struct(*(struct(*(struct`),array(char),int,long,array(char),array(char))),array(char),int,long,array(char),array(char)))
->	O
value_2	array(char)
)	O
)	O
size	long
=	O
sizeof	O
(	O
session	*(struct(*(struct(*(struct`),array(char),int,long,array(char),array(char))),array(char),int,long,array(char),array(char)))
->	O
value_2	array(char)
)	O
-	O
off	long
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
&	O
session	*(struct(*(struct(*(struct`),array(char),int,long,array(char),array(char))),array(char),int,long,array(char),array(char)))
->	O
value_2	array(char)
[	O
off	long
]	O
,	O
data	*(char)
,	O
size	long
)	O
;	O
if	O
(	O
size	long
+	O
off	long
<	O
sizeof	O
(	O
session	*(struct(*(struct(*(struct`),array(char),int,long,array(char),array(char))),array(char),int,long,array(char),array(char)))
->	O
value_2	array(char)
)	O
)	O
session	*(struct(*(struct(*(struct`),array(char),int,long,array(char),array(char))),array(char),int,long,array(char),array(char)))
->	O
value_2	array(char)
[	O
size	long
+	O
off	long
]	O
=	O
'\0'	O
;	O
return	O
MHD_YES	int
;	O
}	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"Unsupported form value `%s'\n"	*(char)
,	O
key	*(char)
)	O
;	O
return	O
MHD_YES	int
;	O
}	O
static	O
int	O
create_response	(*(void),*(struct),*(char),*(char),*(char),*(char),*(long),*(*(void)))->(int)
(	O
void	O
*	O
cls	*(void)
,	O
struct	O
MHD_Connection	O
*	O
connection	*(struct)
,	O
const	O
char	O
*	O
url	*(char)
,	O
const	O
char	O
*	O
method	*(char)
,	O
const	O
char	O
*	O
version	*(char)
,	O
const	O
char	O
*	O
upload_data	*(char)
,	O
size_t	long
*	O
upload_data_size	*(long)
,	O
void	O
*	O
*	O
ptr	*(void)
)	O
{	O
struct	O
MHD_Response	O
*	O
response	*(struct)
;	O
struct	O
Request	struct(*(struct(*(struct(*(struct`),array(char),int,long,array(char),array(char))),array(char),int,long,array(char),array(char))),*(struct),*(char))
*	O
request	*(struct(*(struct(*(struct`),array(char),int,long,array(char),array(char))),*(struct),*(char)))
;	O
struct	O
Session	struct(*(struct(*(struct(*(struct`),array(char),int,long,array(char),array(char))),array(char),int,long,array(char),array(char))),array(char),int,long,array(char),array(char))
*	O
session	*(struct(*(struct(*(struct`),array(char),int,long,array(char),array(char))),array(char),int,long,array(char),array(char)))
;	O
int	O
ret	*(struct(*(struct(*(struct`),array(char),int,long,array(char),array(char))),array(char),int,long,array(char),array(char)))
;	O
unsigned	O
int	O
i	int
;	O
(	O
void	O
)	O
cls	*(void)
;	O
(	O
void	O
)	O
version	*(char)
;	O
request	*(struct(*(struct(*(struct`),array(char),int,long,array(char),array(char))),*(struct),*(char)))
=	O
*	O
ptr	*(void)
;	O
if	O
(	O
NULL	O
==	O
request	*(struct(*(struct(*(struct`),array(char),int,long,array(char),array(char))),*(struct),*(char)))
)	O
{	O
request	*(struct(*(struct(*(struct`),array(char),int,long,array(char),array(char))),*(struct),*(char)))
=	O
calloc	(long,long)->(*(void))
(	O
1	int
,	O
sizeof	O
(	O
struct	O
Request	struct(*(struct(*(struct(*(struct`),array(char),int,long,array(char),array(char))),array(char),int,long,array(char),array(char))),*(struct),*(char))
)	O
)	O
;	O
if	O
(	O
NULL	O
==	O
request	*(struct(*(struct(*(struct`),array(char),int,long,array(char),array(char))),*(struct),*(char)))
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"calloc error: %s\n"	*(char)
,	O
strerror	(int)->(*(char))
(	O
errno	O
)	O
)	O
;	O
return	O
MHD_NO	int
;	O
}	O
*	O
ptr	*(void)
=	O
request	*(struct(*(struct(*(struct`),array(char),int,long,array(char),array(char))),*(struct),*(char)))
;	O
if	O
(	O
0	int
==	O
strcmp	(*(char),*(char))->(int)
(	O
method	*(char)
,	O
MHD_HTTP_METHOD_POST	*(char)
)	O
)	O
{	O
request	*(struct(*(struct(*(struct`),array(char),int,long,array(char),array(char))),*(struct),*(char)))
->	O
pp	*(struct)
=	O
MHD_create_post_processor	(*(struct),long,*((*(void),enum(int,int,int,int,int,int),*(char),*(char),*(char),*(char),*(char),long,long)->(int)),*(void))->(*(struct))
(	O
connection	*(struct)
,	O
1024	int
,	O
&	O
post_iterator	(*(void),enum(int,int,int,int,int,int),*(char),*(char),*(char),*(char),*(char),long,long)->(int)
,	O
request	*(struct(*(struct(*(struct`),array(char),int,long,array(char),array(char))),*(struct),*(char)))
)	O
;	O
if	O
(	O
NULL	O
==	O
request	*(struct(*(struct(*(struct`),array(char),int,long,array(char),array(char))),*(struct),*(char)))
->	O
pp	*(struct)
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"Failed to setup post processor for `%s'\n"	*(char)
,	O
url	*(char)
)	O
;	O
return	O
MHD_NO	int
;	O
}	O
}	O
return	O
MHD_YES	int
;	O
}	O
if	O
(	O
NULL	O
==	O
request	*(struct(*(struct(*(struct`),array(char),int,long,array(char),array(char))),*(struct),*(char)))
->	O
session	*(struct(*(struct(*(struct`),array(char),int,long,array(char),array(char))),array(char),int,long,array(char),array(char)))
)	O
{	O
request	*(struct(*(struct(*(struct`),array(char),int,long,array(char),array(char))),*(struct),*(char)))
->	O
session	*(struct(*(struct(*(struct`),array(char),int,long,array(char),array(char))),array(char),int,long,array(char),array(char)))
=	O
get_session	(*(struct))->(*(struct(*(struct(*`,array(char),int,long,array(char),array(char))),array(char),int,long,array(char),array(char))))
(	O
connection	*(struct)
)	O
;	O
if	O
(	O
NULL	O
==	O
request	*(struct(*(struct(*(struct`),array(char),int,long,array(char),array(char))),*(struct),*(char)))
->	O
session	*(struct(*(struct(*(struct`),array(char),int,long,array(char),array(char))),array(char),int,long,array(char),array(char)))
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"Failed to setup session for `%s'\n"	*(char)
,	O
url	*(char)
)	O
;	O
return	O
MHD_NO	int
;	O
}	O
}	O
session	*(struct(*(struct(*(struct`),array(char),int,long,array(char),array(char))),array(char),int,long,array(char),array(char)))
=	O
request	*(struct(*(struct(*(struct`),array(char),int,long,array(char),array(char))),*(struct),*(char)))
->	O
session	*(struct(*(struct(*(struct`),array(char),int,long,array(char),array(char))),array(char),int,long,array(char),array(char)))
;	O
session	*(struct(*(struct(*(struct`),array(char),int,long,array(char),array(char))),array(char),int,long,array(char),array(char)))
->	O
start	long
=	O
time	struct(long,long)
(	O
NULL	O
)	O
;	O
if	O
(	O
0	int
==	O
strcmp	(*(char),*(char))->(int)
(	O
method	*(char)
,	O
MHD_HTTP_METHOD_POST	*(char)
)	O
)	O
{	O
MHD_post_process	(*(struct),*(char),long)->(int)
(	O
request	*(struct(*(struct(*(struct`),array(char),int,long,array(char),array(char))),*(struct),*(char)))
->	O
pp	*(struct)
,	O
upload_data	*(char)
,	O
*	O
upload_data_size	*(long)
)	O
;	O
if	O
(	O
0	int
!=	O
*	O
upload_data_size	*(long)
)	O
{	O
*	O
upload_data_size	*(long)
=	O
0	int
;	O
return	O
MHD_YES	int
;	O
}	O
MHD_destroy_post_processor	(*(struct))->(int)
(	O
request	*(struct(*(struct(*(struct`),array(char),int,long,array(char),array(char))),*(struct),*(char)))
->	O
pp	*(struct)
)	O
;	O
request	*(struct(*(struct(*(struct`),array(char),int,long,array(char),array(char))),*(struct),*(char)))
->	O
pp	*(struct)
=	O
NULL	O
;	O
method	*(char)
=	O
MHD_HTTP_METHOD_GET	*(char)
;	O
if	O
(	O
NULL	O
!=	O
request	*(struct(*(struct(*(struct`),array(char),int,long,array(char),array(char))),*(struct),*(char)))
->	O
post_url	*(char)
)	O
url	*(char)
=	O
request	*(struct(*(struct(*(struct`),array(char),int,long,array(char),array(char))),*(struct),*(char)))
->	O
post_url	*(char)
;	O
}	O
if	O
(	O
(	O
0	int
==	O
strcmp	(*(char),*(char))->(int)
(	O
method	*(char)
,	O
MHD_HTTP_METHOD_GET	*(char)
)	O
)	O
||	O
(	O
0	int
==	O
strcmp	(*(char),*(char))->(int)
(	O
method	*(char)
,	O
MHD_HTTP_METHOD_HEAD	*(char)
)	O
)	O
)	O
{	O
i	int
=	O
0	int
;	O
while	O
(	O
(	O
pages	array(struct(*(char),*(char),*((*(void),*(char),*(struct(*`,array(char),int,long,array(char),array(char))),*(struct))->(int)),*(void)))
[	O
i	int
]	O
.	O
url	*(char)
!=	O
NULL	O
)	O
&&	O
(	O
0	int
!=	O
strcmp	(*(char),*(char))->(int)
(	O
pages	array(struct(*(char),*(char),*((*(void),*(char),*(struct(*`,array(char),int,long,array(char),array(char))),*(struct))->(int)),*(void)))
[	O
i	int
]	O
.	O
url	*(char)
,	O
url	*(char)
)	O
)	O
)	O
i	int
++	O
;	O
ret	*(struct(*(struct(*(struct`),array(char),int,long,array(char),array(char))),array(char),int,long,array(char),array(char)))
=	O
pages	array(struct(*(char),*(char),*((*(void),*(char),*(struct(*`,array(char),int,long,array(char),array(char))),*(struct))->(int)),*(void)))
[	O
i	int
]	O
.	O
handler	*((*(void),*(char),*(struct(*(struct`),array(char),int,long,array(char),array(char))),*(struct))->(int))
(	O
pages	array(struct(*(char),*(char),*((*(void),*(char),*(struct(*`,array(char),int,long,array(char),array(char))),*(struct))->(int)),*(void)))
[	O
i	int
]	O
.	O
handler_cls	*(void)
,	O
pages	array(struct(*(char),*(char),*((*(void),*(char),*(struct(*`,array(char),int,long,array(char),array(char))),*(struct))->(int)),*(void)))
[	O
i	int
]	O
.	O
mime	*(char)
,	O
session	*(struct(*(struct(*(struct`),array(char),int,long,array(char),array(char))),array(char),int,long,array(char),array(char)))
,	O
connection	*(struct)
)	O
;	O
if	O
(	O
ret	*(struct(*(struct(*(struct`),array(char),int,long,array(char),array(char))),array(char),int,long,array(char),array(char)))
!=	O
MHD_YES	int
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"Failed to create page for `%s'\n"	*(char)
,	O
url	*(char)
)	O
;	O
return	O
ret	*(struct(*(struct(*(struct`),array(char),int,long,array(char),array(char))),array(char),int,long,array(char),array(char)))
;	O
}	O
response	*(struct)
=	O
MHD_create_response_from_buffer	(long,*(void),enum(int,int,int))->(*(struct))
(	O
strlen	(*(char))->(long)
(	O
METHOD_ERROR	*(char)
)	O
,	O
(	O
void	O
*	O
)	O
METHOD_ERROR	*(char)
,	O
MHD_RESPMEM_PERSISTENT	int
)	O
;	O
ret	*(struct(*(struct(*(struct`),array(char),int,long,array(char),array(char))),array(char),int,long,array(char),array(char)))
=	O
MHD_queue_response	(*(struct),int,*(struct))->(int)
(	O
connection	*(struct)
,	O
MHD_HTTP_NOT_ACCEPTABLE	int
,	O
response	*(struct)
)	O
;	O
MHD_destroy_response	(*(struct))->(void)
(	O
response	*(struct)
)	O
;	O
return	O
ret	*(struct(*(struct(*(struct`),array(char),int,long,array(char),array(char))),array(char),int,long,array(char),array(char)))
;	O
}	O
static	O
void	O
request_completed_callback	(*(void),*(struct),*(*(void)),enum(int,int,int,int,int,int))->(void)
(	O
void	O
*	O
cls	*(void)
,	O
struct	O
MHD_Connection	O
*	O
connection	*(struct)
,	O
void	O
*	O
*	O
con_cls	*(*(void))
,	O
enum	O
MHD_RequestTerminationCode	enum(int,int,int,int,int,int)
toe	enum(int,int,int,int,int,int)
)	O
{	O
struct	O
Request	struct(*(struct(*(struct(*(struct`),array(char),int,long,array(char),array(char))),array(char),int,long,array(char),array(char))),*(struct),*(char))
*	O
request	*(struct(*(struct(*(struct`),array(char),int,long,array(char),array(char))),*(struct),*(char)))
=	O
*	O
con_cls	*(*(void))
;	O
(	O
void	O
)	O
cls	*(void)
;	O
(	O
void	O
)	O
connection	*(struct)
;	O
(	O
void	O
)	O
toe	enum(int,int,int,int,int,int)
;	O
if	O
(	O
NULL	O
==	O
request	*(struct(*(struct(*(struct`),array(char),int,long,array(char),array(char))),*(struct),*(char)))
)	O
return	O
;	O
if	O
(	O
NULL	O
!=	O
request	*(struct(*(struct(*(struct`),array(char),int,long,array(char),array(char))),*(struct),*(char)))
->	O
session	*(struct(*(struct(*(struct`),array(char),int,long,array(char),array(char))),array(char),int,long,array(char),array(char)))
)	O
request	*(struct(*(struct(*(struct`),array(char),int,long,array(char),array(char))),*(struct),*(char)))
->	O
session	*(struct(*(struct(*(struct`),array(char),int,long,array(char),array(char))),array(char),int,long,array(char),array(char)))
->	O
rc	int
--	O
;	O
if	O
(	O
NULL	O
!=	O
request	*(struct(*(struct(*(struct`),array(char),int,long,array(char),array(char))),*(struct),*(char)))
->	O
pp	*(struct)
)	O
MHD_destroy_post_processor	(*(struct))->(int)
(	O
request	*(struct(*(struct(*(struct`),array(char),int,long,array(char),array(char))),*(struct),*(char)))
->	O
pp	*(struct)
)	O
;	O
free	(*(void))->(void)
(	O
request	*(struct(*(struct(*(struct`),array(char),int,long,array(char),array(char))),*(struct),*(char)))
)	O
;	O
}	O
static	O
void	O
expire_sessions	()->(void)
(	O
)	O
{	O
struct	O
Session	struct(*(struct(*(struct(*(struct`),array(char),int,long,array(char),array(char))),array(char),int,long,array(char),array(char))),array(char),int,long,array(char),array(char))
*	O
pos	long
;	O
struct	O
Session	struct(*(struct(*(struct(*(struct`),array(char),int,long,array(char),array(char))),array(char),int,long,array(char),array(char))),array(char),int,long,array(char),array(char))
*	O
prev	*(struct(*(struct(*(struct`),array(char),int,long,array(char),array(char))),array(char),int,long,array(char),array(char)))
;	O
struct	O
Session	struct(*(struct(*(struct(*(struct`),array(char),int,long,array(char),array(char))),array(char),int,long,array(char),array(char))),array(char),int,long,array(char),array(char))
*	O
next	*(struct(*(struct(*(struct`),array(char),int,long,array(char),array(char))),array(char),int,long,array(char),array(char)))
;	O
time_t	long
now	long
;	O
now	long
=	O
time	struct(long,long)
(	O
NULL	O
)	O
;	O
prev	*(struct(*(struct(*(struct`),array(char),int,long,array(char),array(char))),array(char),int,long,array(char),array(char)))
=	O
NULL	O
;	O
pos	long
=	O
sessions	*(struct(*(struct(*(struct`),array(char),int,long,array(char),array(char))),array(char),int,long,array(char),array(char)))
;	O
while	O
(	O
NULL	O
!=	O
pos	long
)	O
{	O
next	*(struct(*(struct(*(struct`),array(char),int,long,array(char),array(char))),array(char),int,long,array(char),array(char)))
=	O
pos	long
->	O
next	*(struct(*(struct(*(struct`),array(char),int,long,array(char),array(char))),array(char),int,long,array(char),array(char)))
;	O
if	O
(	O
now	long
-	O
pos	long
->	O
start	long
>	O
60	int
*	O
60	int
)	O
{	O
if	O
(	O
NULL	O
==	O
prev	*(struct(*(struct(*(struct`),array(char),int,long,array(char),array(char))),array(char),int,long,array(char),array(char)))
)	O
sessions	*(struct(*(struct(*(struct`),array(char),int,long,array(char),array(char))),array(char),int,long,array(char),array(char)))
=	O
pos	long
->	O
next	*(struct(*(struct(*(struct`),array(char),int,long,array(char),array(char))),array(char),int,long,array(char),array(char)))
;	O
else	O
prev	*(struct(*(struct(*(struct`),array(char),int,long,array(char),array(char))),array(char),int,long,array(char),array(char)))
->	O
next	*(struct(*(struct(*(struct`),array(char),int,long,array(char),array(char))),array(char),int,long,array(char),array(char)))
=	O
next	*(struct(*(struct(*(struct`),array(char),int,long,array(char),array(char))),array(char),int,long,array(char),array(char)))
;	O
free	(*(void))->(void)
(	O
pos	long
)	O
;	O
}	O
else	O
prev	*(struct(*(struct(*(struct`),array(char),int,long,array(char),array(char))),array(char),int,long,array(char),array(char)))
=	O
pos	long
;	O
pos	long
=	O
next	*(struct(*(struct(*(struct`),array(char),int,long,array(char),array(char))),array(char),int,long,array(char),array(char)))
;	O
}	O
}	O
int	O
main	(int,*(*(char)))->(int)
(	O
int	O
argc	int
,	O
char	O
*	O
const	O
*	O
argv	*(*(char))
)	O
{	O
struct	O
MHD_Daemon	O
*	O
d	*(struct)
;	O
struct	O
timeval	struct(long,long)
tv	struct(long,long)
;	O
struct	O
timeval	struct(long,long)
*	O
tvp	*(struct(long,long))
;	O
fd_set	struct(array(long))
rs	struct(array(long))
;	O
fd_set	struct(array(long))
ws	struct(array(long))
;	O
fd_set	struct(array(long))
es	struct(array(long))
;	O
MHD_socket	int
max	long
;	O
MHD_UNSIGNED_LONG_LONG	O
mhd_timeout	long long
;	O
if	O
(	O
argc	int
!=	O
2	int
)	O
{	O
printf	(*(char))->(int)
(	O
"%s PORT\n"	*(char)
,	O
argv	*(*(char))
[	O
0	int
]	O
)	O
;	O
return	O
1	int
;	O
}	O
srand	(int)->(void)
(	O
(	O
unsigned	O
int	O
)	O
time	struct(long,long)
(	O
NULL	O
)	O
)	O
;	O
d	*(struct)
=	O
MHD_start_daemon	(int,short,*((*(void),*(struct(short,array(char))),int)->(int)),*(void),*((*(void),*(struct),*(char),*(char),*(char),*(char),*(long),*(*(void)))->(int)),*(void))->(*(struct))
(	O
MHD_USE_ERROR_LOG	int
,	O
atoi	(*(char))->(int)
(	O
argv	*(*(char))
[	O
1	int
]	O
)	O
,	O
NULL	O
,	O
NULL	O
,	O
&	O
create_response	(*(void),*(struct),*(char),*(char),*(char),*(char),*(long),*(*(void)))->(int)
,	O
NULL	O
,	O
MHD_OPTION_CONNECTION_TIMEOUT	int
,	O
(	O
unsigned	O
int	O
)	O
15	int
,	O
MHD_OPTION_NOTIFY_COMPLETED	int
,	O
&	O
request_completed_callback	(*(void),*(struct),*(*(void)),enum(int,int,int,int,int,int))->(void)
,	O
NULL	O
,	O
MHD_OPTION_END	int
)	O
;	O
if	O
(	O
NULL	O
==	O
d	*(struct)
)	O
return	O
1	int
;	O
while	O
(	O
1	int
)	O
{	O
expire_sessions	()->(void)
(	O
)	O
;	O
max	long
=	O
0	int
;	O
FD_ZERO	O
(	O
&	O
rs	struct(array(long))
)	O
;	O
FD_ZERO	O
(	O
&	O
ws	struct(array(long))
)	O
;	O
FD_ZERO	O
(	O
&	O
es	struct(array(long))
)	O
;	O
if	O
(	O
MHD_YES	int
!=	O
MHD_get_fdset	(*(struct),*(struct(array(long))),*(struct(array(long))),*(struct(array(long))),*(int))->(int)
(	O
d	*(struct)
,	O
&	O
rs	struct(array(long))
,	O
&	O
ws	struct(array(long))
,	O
&	O
es	struct(array(long))
,	O
&	O
max	long
)	O
)	O
break	O
;	O
if	O
(	O
MHD_get_timeout	(*(struct),*(long long))->(int)
(	O
d	*(struct)
,	O
&	O
mhd_timeout	long long
)	O
==	O
MHD_YES	int
)	O
{	O
tv	struct(long,long)
.	O
tv_sec	long
=	O
mhd_timeout	long long
/	O
1000	int
;	O
tv	struct(long,long)
.	O
tv_usec	long
=	O
(	O
mhd_timeout	long long
-	O
(	O
tv	struct(long,long)
.	O
tv_sec	long
*	O
1000	int
)	O
)	O
*	O
1000	int
;	O
tvp	*(struct(long,long))
=	O
&	O
tv	struct(long,long)
;	O
}	O
else	O
tvp	*(struct(long,long))
=	O
NULL	O
;	O
if	O
(	O
-	O
1	int
==	O
select	(int,*(struct(array(long))),*(struct(array(long))),*(struct(array(long))),*(struct(long,long)))->(int)
(	O
max	long
+	O
1	int
,	O
&	O
rs	struct(array(long))
,	O
&	O
ws	struct(array(long))
,	O
&	O
es	struct(array(long))
,	O
tvp	*(struct(long,long))
)	O
)	O
{	O
if	O
(	O
EINTR	int
!=	O
errno	O
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"Aborting due to error during select: %s\n"	*(char)
,	O
strerror	(int)->(*(char))
(	O
errno	O
)	O
)	O
;	O
break	O
;	O
}	O
MHD_run	(*(struct))->(int)
(	O
d	*(struct)
)	O
;	O
}	O
MHD_stop_daemon	(*(struct))->(void)
(	O
d	*(struct)
)	O
;	O
return	O
0	int
;	O
}	O
