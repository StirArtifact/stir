struct	O
memory_cell	struct(*(void),*((*(void))->(void)))
{	O
void	O
*	O
ptr	*(*(void))
;	O
void	O
(	O
*	O
reclaim	*((*(void))->(void))
)	O
(	O
void	O
*	O
)	O
;	O
}	O
;	O
static	O
void	O
memory_cell_destroy	(*(void))->(void)
(	O
void	O
*	O
item	*(void)
)	O
{	O
struct	O
memory_cell	struct(*(void),*((*(void))->(void)))
*	O
mcp	*(struct(*(void),*((*(void))->(void))))
=	O
item	*(void)
;	O
if	O
(	O
!	O
mcp	*(struct(*(void),*((*(void))->(void))))
->	O
reclaim	*((*(void))->(void))
)	O
abort	()->(void)
(	O
)	O
;	O
else	O
mcp	*(struct(*(void),*((*(void))->(void))))
->	O
reclaim	*((*(void))->(void))
(	O
mcp	*(struct(*(void),*((*(void))->(void))))
->	O
ptr	*(*(void))
)	O
;	O
free	(*(void))->(void)
(	O
mcp	*(struct(*(void),*((*(void))->(void))))
)	O
;	O
}	O
static	O
int	O
memory_cell_cmp	(*(void),*(void))->(int)
(	O
const	O
void	O
*	O
a	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))))
,	O
const	O
void	O
*	O
b	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
)	O
{	O
struct	O
memory_cell	struct(*(void),*((*(void))->(void)))
const	O
*	O
ma	*(struct(*(void),*((*(void))->(void))))
=	O
a	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))))
;	O
struct	O
memory_cell	struct(*(void),*((*(void))->(void)))
const	O
*	O
mb	*(struct(*(void),*((*(void))->(void))))
=	O
b	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
;	O
return	O
ma	*(struct(*(void),*((*(void))->(void))))
->	O
ptr	*(*(void))
!=	O
mb	*(struct(*(void),*((*(void))->(void))))
->	O
ptr	*(*(void))
;	O
}	O
void	O
mu_sieve_register_memory	(*(struct),*(void),*((*(void))->(void)))->(void)
(	O
mu_sieve_machine_t	*(struct)
mach	*(struct)
,	O
void	O
*	O
ptr	*(*(void))
,	O
mu_sieve_reclaim_t	*((*(void))->(void))
reclaim	*((*(void))->(void))
)	O
{	O
struct	O
memory_cell	struct(*(void),*((*(void))->(void)))
*	O
mcp	*(struct(*(void),*((*(void))->(void))))
;	O
if	O
(	O
!	O
reclaim	*((*(void))->(void))
)	O
reclaim	*((*(void))->(void))
=	O
mu_sieve_reclaim_default	(*(void))->(void)
;	O
if	O
(	O
!	O
mach	*(struct)
->	O
memory_pool	*(struct)
)	O
{	O
if	O
(	O
mu_list_create	(*(*(struct)))->(int)
(	O
&	O
mach	*(struct)
->	O
memory_pool	*(struct)
)	O
)	O
mu_sieve_abort	(*(struct))->(void)
(	O
mach	*(struct)
)	O
;	O
mu_list_set_destroy_item	(*(struct),*((*(void))->(void)))->(*((*(void))->(void)))
(	O
mach	*(struct)
->	O
memory_pool	*(struct)
,	O
memory_cell_destroy	(*(void))->(void)
)	O
;	O
mu_list_set_comparator	(*(struct),*((*(void),*(void))->(int)))->(*((*(void),*(void))->(int)))
(	O
mach	*(struct)
->	O
memory_pool	*(struct)
,	O
memory_cell_cmp	(*(void),*(void))->(int)
)	O
;	O
}	O
mcp	*(struct(*(void),*((*(void))->(void))))
=	O
malloc	(long)->(*(void))
(	O
sizeof	O
(	O
*	O
mcp	*(struct(*(void),*((*(void))->(void))))
)	O
)	O
;	O
if	O
(	O
!	O
mcp	*(struct(*(void),*((*(void))->(void))))
)	O
mu_sieve_abort	(*(struct))->(void)
(	O
mach	*(struct)
)	O
;	O
mcp	*(struct(*(void),*((*(void))->(void))))
->	O
ptr	*(*(void))
=	O
ptr	*(*(void))
;	O
mcp	*(struct(*(void),*((*(void))->(void))))
->	O
reclaim	*((*(void))->(void))
=	O
reclaim	*((*(void))->(void))
;	O
if	O
(	O
mu_list_append	(*(struct),*(void))->(int)
(	O
mach	*(struct)
->	O
memory_pool	*(struct)
,	O
mcp	*(struct(*(void),*((*(void))->(void))))
)	O
)	O
{	O
memory_cell_destroy	(*(void))->(void)
(	O
mcp	*(struct(*(void),*((*(void))->(void))))
)	O
;	O
mu_sieve_abort	(*(struct))->(void)
(	O
mach	*(struct)
)	O
;	O
}	O
}	O
void	O
mu_sieve_free	(*(struct),*(void))->(void)
(	O
mu_sieve_machine_t	*(struct)
mach	*(struct)
,	O
void	O
*	O
ptr	*(*(void))
)	O
{	O
int	O
rc	int
;	O
struct	O
memory_cell	struct(*(void),*((*(void))->(void)))
mcell	struct(*(void),*((*(void))->(void)))
;	O
if	O
(	O
!	O
ptr	*(*(void))
)	O
return	O
;	O
mcell	struct(*(void),*((*(void))->(void)))
.	O
ptr	*(*(void))
=	O
ptr	*(*(void))
;	O
rc	int
=	O
mu_list_remove	(*(struct),*(void))->(int)
(	O
mach	*(struct)
->	O
memory_pool	*(struct)
,	O
&	O
mcell	struct(*(void),*((*(void))->(void)))
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_sieve_error	(*(struct),*(char))->(void)
(	O
mach	*(struct)
,	O
_	O
(	O
"INTERNAL ERROR: trying to free unregistered memory pointer"	*(char)
)	O
)	O
;	O
abort	()->(void)
(	O
)	O
;	O
}	O
}	O
void	O
*	O
mu_sieve_alloc_memory	(*(struct),long,*((*(void))->(void)))->(*(void))
(	O
mu_sieve_machine_t	*(struct)
mach	*(struct)
,	O
size_t	long
size	long
,	O
mu_sieve_reclaim_t	*((*(void))->(void))
recfun	*((*(void))->(void))
)	O
{	O
char	O
*	O
p	*(char)
=	O
malloc	(long)->(*(void))
(	O
size	long
)	O
;	O
if	O
(	O
!	O
p	*(char)
)	O
{	O
mu_sieve_error	(*(struct),*(char))->(void)
(	O
mach	*(struct)
,	O
"%s"	*(char)
,	O
mu_strerror	(int)->(*(char))
(	O
errno	O
)	O
)	O
;	O
mu_sieve_abort	(*(struct))->(void)
(	O
mach	*(struct)
)	O
;	O
}	O
mu_sieve_register_memory	(*(struct),*(void),*((*(void))->(void)))->(void)
(	O
mach	*(struct)
,	O
p	*(char)
,	O
recfun	*((*(void))->(void))
)	O
;	O
return	O
p	*(char)
;	O
}	O
void	O
*	O
mu_sieve_malloc	(*(struct),long)->(*(void))
(	O
mu_sieve_machine_t	*(struct)
mach	*(struct)
,	O
size_t	long
size	long
)	O
{	O
return	O
mu_sieve_alloc_memory	(*(struct),long,*((*(void))->(void)))->(*(void))
(	O
mach	*(struct)
,	O
size	long
,	O
mu_sieve_reclaim_default	(*(void))->(void)
)	O
;	O
}	O
void	O
*	O
mu_sieve_calloc	(*(struct),long,long)->(*(void))
(	O
mu_sieve_machine_t	*(struct)
mach	*(struct)
,	O
size_t	long
nmemb	long
,	O
size_t	long
size	long
)	O
{	O
char	O
*	O
p	*(char)
=	O
calloc	(long,long)->(*(void))
(	O
nmemb	long
,	O
size	long
)	O
;	O
if	O
(	O
!	O
p	*(char)
)	O
{	O
mu_sieve_error	(*(struct),*(char))->(void)
(	O
mach	*(struct)
,	O
"%s"	*(char)
,	O
mu_strerror	(int)->(*(char))
(	O
errno	O
)	O
)	O
;	O
mu_sieve_abort	(*(struct))->(void)
(	O
mach	*(struct)
)	O
;	O
}	O
mu_sieve_register_memory	(*(struct),*(void),*((*(void))->(void)))->(void)
(	O
mach	*(struct)
,	O
p	*(char)
,	O
mu_sieve_reclaim_default	(*(void))->(void)
)	O
;	O
return	O
p	*(char)
;	O
}	O
char	O
*	O
mu_sieve_strdup	(*(struct),*(char))->(*(char))
(	O
mu_sieve_machine_t	*(struct)
mach	*(struct)
,	O
char	O
const	O
*	O
str	*(char)
)	O
{	O
size_t	long
len	long
;	O
char	O
*	O
p	*(char)
;	O
if	O
(	O
!	O
str	*(char)
)	O
return	O
NULL	O
;	O
len	long
=	O
strlen	(*(char))->(long)
(	O
str	*(char)
)	O
;	O
p	*(char)
=	O
mu_sieve_malloc	(*(struct),long)->(*(void))
(	O
mach	*(struct)
,	O
len	long
+	O
1	int
)	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
p	*(char)
,	O
str	*(char)
,	O
len	long
)	O
;	O
p	*(char)
[	O
len	long
]	O
=	O
0	int
;	O
return	O
p	*(char)
;	O
}	O
void	O
*	O
mu_sieve_realloc	(*(struct),*(void),long)->(*(void))
(	O
mu_sieve_machine_t	*(struct)
mach	*(struct)
,	O
void	O
*	O
ptr	*(*(void))
,	O
size_t	long
size	long
)	O
{	O
int	O
rc	int
;	O
struct	O
memory_cell	struct(*(void),*((*(void))->(void)))
mcell	struct(*(void),*((*(void))->(void)))
,	O
*	O
mcp	*(struct(*(void),*((*(void))->(void))))
;	O
if	O
(	O
!	O
ptr	*(*(void))
)	O
return	O
mu_sieve_malloc	(*(struct),long)->(*(void))
(	O
mach	*(struct)
,	O
size	long
)	O
;	O
mcell	struct(*(void),*((*(void))->(void)))
.	O
ptr	*(*(void))
=	O
ptr	*(*(void))
;	O
rc	int
=	O
mu_list_locate	(*(struct),*(void),*(*(void)))->(int)
(	O
mach	*(struct)
->	O
memory_pool	*(struct)
,	O
&	O
mcell	struct(*(void),*((*(void))->(void)))
,	O
(	O
void	O
*	O
*	O
)	O
&	O
mcp	*(struct(*(void),*((*(void))->(void))))
)	O
;	O
if	O
(	O
rc	int
==	O
MU_ERR_NOENT	O
)	O
{	O
mu_sieve_error	(*(struct),*(char))->(void)
(	O
mach	*(struct)
,	O
_	O
(	O
"INTERNAL ERROR: trying to reallocate unregistered memory pointer"	*(char)
)	O
)	O
;	O
abort	()->(void)
(	O
)	O
;	O
}	O
else	O
if	O
(	O
rc	int
)	O
{	O
mu_sieve_error	(*(struct),*(char))->(void)
(	O
mach	*(struct)
,	O
_	O
(	O
"error reallocating memory: %s"	*(char)
)	O
,	O
mu_strerror	(int)->(*(char))
(	O
rc	int
)	O
)	O
;	O
mu_sieve_abort	(*(struct))->(void)
(	O
mach	*(struct)
)	O
;	O
}	O
ptr	*(*(void))
=	O
realloc	(*(void),long)->(*(void))
(	O
mcp	*(struct(*(void),*((*(void))->(void))))
->	O
ptr	*(*(void))
,	O
size	long
)	O
;	O
if	O
(	O
!	O
ptr	*(*(void))
)	O
{	O
mu_sieve_error	(*(struct),*(char))->(void)
(	O
mach	*(struct)
,	O
_	O
(	O
"error reallocating memory: %s"	*(char)
)	O
,	O
mu_strerror	(int)->(*(char))
(	O
errno	O
)	O
)	O
;	O
mu_sieve_abort	(*(struct))->(void)
(	O
mach	*(struct)
)	O
;	O
}	O
mcp	*(struct(*(void),*((*(void))->(void))))
->	O
ptr	*(*(void))
=	O
ptr	*(*(void))
;	O
return	O
ptr	*(*(void))
;	O
}	O
void	O
mu_sieve_reclaim_default	(*(void))->(void)
(	O
void	O
*	O
p	*(char)
)	O
{	O
free	(*(void))->(void)
(	O
p	*(char)
)	O
;	O
}	O
void	O
mu_sieve_reclaim_value	(*(void))->(void)
(	O
void	O
*	O
p	*(char)
)	O
{	O
if	O
(	O
!	O
p	*(char)
)	O
return	O
;	O
free	(*(void))->(void)
(	O
p	*(char)
)	O
;	O
}	O
void	O
mu_i_sv_2nrealloc	(*(struct(struct(struct(*`,int,int),struct(*`,int,int)),int,*(struct),*(struct),*(struct),*(struct),*(*(char)),long,long,*(struct(int,int,*`,*`,*`)),long,long,*(struct(enum(int,int,int,int,int),*`,struct`,union`)),long,long,long,*(union(*`,*`,*`,*`,long,long,long,int,*`,int)),enum(int,int,int,int,int),long,long,*(struct),*(char),*(struct(int,int)),long,long,*(struct),*(char),long,long,long,*((*`,*`,*`)->(int)),int,array(struct(array(long),int,struct(array(long)))),*(struct),*(struct),long,*(struct),int,int,int,struct(struct(*`,int,int),struct(*`,int,int)),int,struct(struct(*`,int,int),struct(*`,int,int)),*(struct),*(struct),*((*`,*`,*`,array(struct(int,int,*(void),*(void))))->(void)),*(struct),*(char),*(void))),*(*(void)),*(long),long)->(void)
(	O
mu_sieve_machine_t	*(struct)
mach	*(struct)
,	O
void	O
*	O
*	O
pptr	*(*(struct(*(char),*(char),*(char),*(struct))))
,	O
size_t	long
*	O
pnmemb	*(long)
,	O
size_t	long
size	long
)	O
{	O
void	O
*	O
ptr	*(*(void))
=	O
*	O
pptr	*(*(struct(*(char),*(char),*(char),*(struct))))
;	O
size_t	long
nmemb	long
=	O
*	O
pnmemb	*(long)
;	O
if	O
(	O
!	O
ptr	*(*(void))
)	O
{	O
if	O
(	O
!	O
nmemb	long
)	O
{	O
nmemb	long
=	O
16	int
;	O
}	O
}	O
else	O
{	O
if	O
(	O
(	O
size_t	long
)	O
-	O
1	int
/	O
3	int
*	O
2	int
/	O
size	long
<=	O
nmemb	long
)	O
{	O
mu_diag_at_locus_range	(int,*(struct(struct(*(char),int,int),struct(*(char),int,int))),*(char))->(void)
(	O
MU_LOG_ERROR	int
,	O
&	O
mach	*(struct)
->	O
locus	struct(struct(*(char),int,int),struct(*(char),int,int))
,	O
_	O
(	O
"requested too much memory %zu * %zu"	*(char)
)	O
,	O
nmemb	long
,	O
size	long
)	O
;	O
mu_sieve_abort	(*(struct))->(void)
(	O
mach	*(struct)
)	O
;	O
}	O
nmemb	long
+=	O
nmemb	long
/	O
2	int
+	O
1	int
;	O
}	O
ptr	*(*(void))
=	O
mu_sieve_realloc	(*(struct),*(void),long)->(*(void))
(	O
mach	*(struct)
,	O
ptr	*(*(void))
,	O
nmemb	long
*	O
size	long
)	O
;	O
*	O
pptr	*(*(struct(*(char),*(char),*(char),*(struct))))
=	O
ptr	*(*(void))
;	O
*	O
pnmemb	*(long)
=	O
nmemb	long
;	O
}	O
size_t	long
mu_i_sv_id_num	(*(struct(struct(struct(*`,int,int),struct(*`,int,int)),int,*(struct),*(struct),*(struct),*(struct),*(*(char)),long,long,*(struct(int,int,*`,*`,*`)),long,long,*(struct(enum(int,int,int,int,int),*`,struct`,union`)),long,long,long,*(union(*`,*`,*`,*`,long,long,long,int,*`,int)),enum(int,int,int,int,int),long,long,*(struct),*(char),*(struct(int,int)),long,long,*(struct),*(char),long,long,long,*((*`,*`,*`)->(int)),int,array(struct(array(long),int,struct(array(long)))),*(struct),*(struct),long,*(struct),int,int,int,struct(struct(*`,int,int),struct(*`,int,int)),int,struct(struct(*`,int,int),struct(*`,int,int)),*(struct),*(struct),*((*`,*`,*`,array(struct(int,int,*(void),*(void))))->(void)),*(struct),*(char),*(void))),*(char))->(long)
(	O
mu_sieve_machine_t	*(struct)
mach	*(struct)
,	O
char	O
const	O
*	O
name	*(char)
)	O
{	O
size_t	long
i	long
;	O
char	O
*	O
p	*(char)
;	O
if	O
(	O
!	O
name	*(char)
)	O
abort	()->(void)
(	O
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
mach	*(struct)
->	O
idcount	long
;	O
i	long
++	O
)	O
{	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
mach	*(struct)
->	O
idspace	*(*(char))
[	O
i	long
]	O
,	O
name	*(char)
)	O
==	O
0	int
)	O
return	O
i	long
;	O
}	O
if	O
(	O
mach	*(struct)
->	O
idcount	long
==	O
mach	*(struct)
->	O
idmax	long
)	O
{	O
mu_i_sv_2nrealloc	(*(struct(struct(struct(*`,int,int),struct(*`,int,int)),int,*(struct),*(struct),*(struct),*(struct),*(*(char)),long,long,*(struct(int,int,*`,*`,*`)),long,long,*(struct(enum(int,int,int,int,int),*`,struct`,union`)),long,long,long,*(union(*`,*`,*`,*`,long,long,long,int,*`,int)),enum(int,int,int,int,int),long,long,*(struct),*(char),*(struct(int,int)),long,long,*(struct),*(char),long,long,long,*((*`,*`,*`)->(int)),int,array(struct(array(long),int,struct(array(long)))),*(struct),*(struct),long,*(struct),int,int,int,struct(struct(*`,int,int),struct(*`,int,int)),int,struct(struct(*`,int,int),struct(*`,int,int)),*(struct),*(struct),*((*`,*`,*`,array(struct(int,int,*(void),*(void))))->(void)),*(struct),*(char),*(void))),*(*(void)),*(long),long)->(void)
(	O
mach	*(struct)
,	O
(	O
void	O
*	O
*	O
)	O
&	O
mach	*(struct)
->	O
idspace	*(*(char))
,	O
&	O
mach	*(struct)
->	O
idmax	long
,	O
sizeof	O
mach	*(struct)
->	O
idspace	*(*(char))
[	O
0	int
]	O
)	O
;	O
}	O
p	*(char)
=	O
mu_sieve_strdup	(*(struct),*(char))->(*(char))
(	O
mach	*(struct)
,	O
name	*(char)
)	O
;	O
mach	*(struct)
->	O
idspace	*(*(char))
[	O
mach	*(struct)
->	O
idcount	long
]	O
=	O
p	*(char)
;	O
return	O
mach	*(struct)
->	O
idcount	long
++	O
;	O
}	O
char	O
*	O
mu_i_sv_id_str	(*(struct(struct(struct(*`,int,int),struct(*`,int,int)),int,*(struct),*(struct),*(struct),*(struct),*(*(char)),long,long,*(struct(int,int,*`,*`,*`)),long,long,*(struct(enum(int,int,int,int,int),*`,struct`,union`)),long,long,long,*(union(*`,*`,*`,*`,long,long,long,int,*`,int)),enum(int,int,int,int,int),long,long,*(struct),*(char),*(struct(int,int)),long,long,*(struct),*(char),long,long,long,*((*`,*`,*`)->(int)),int,array(struct(array(long),int,struct(array(long)))),*(struct),*(struct),long,*(struct),int,int,int,struct(struct(*`,int,int),struct(*`,int,int)),int,struct(struct(*`,int,int),struct(*`,int,int)),*(struct),*(struct),*((*`,*`,*`,array(struct(int,int,*(void),*(void))))->(void)),*(struct),*(char),*(void))),long)->(*(char))
(	O
mu_sieve_machine_t	*(struct)
mach	*(struct)
,	O
size_t	long
n	*(long)
)	O
{	O
if	O
(	O
n	*(long)
>=	O
mach	*(struct)
->	O
idcount	long
)	O
abort	()->(void)
(	O
)	O
;	O
return	O
mach	*(struct)
->	O
idspace	*(*(char))
[	O
n	*(long)
]	O
;	O
}	O
void	O
mu_i_sv_free_idspace	(*(struct(struct(struct(*`,int,int),struct(*`,int,int)),int,*(struct),*(struct),*(struct),*(struct),*(*(char)),long,long,*(struct(int,int,*`,*`,*`)),long,long,*(struct(enum(int,int,int,int,int),*`,struct`,union`)),long,long,long,*(union(*`,*`,*`,*`,long,long,long,int,*`,int)),enum(int,int,int,int,int),long,long,*(struct),*(char),*(struct(int,int)),long,long,*(struct),*(char),long,long,long,*((*`,*`,*`)->(int)),int,array(struct(array(long),int,struct(array(long)))),*(struct),*(struct),long,*(struct),int,int,int,struct(struct(*`,int,int),struct(*`,int,int)),int,struct(struct(*`,int,int),struct(*`,int,int)),*(struct),*(struct),*((*`,*`,*`,array(struct(int,int,*(void),*(void))))->(void)),*(struct),*(char),*(void))))->(void)
(	O
mu_sieve_machine_t	*(struct)
mach	*(struct)
)	O
{	O
size_t	long
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
mach	*(struct)
->	O
idcount	long
;	O
i	long
++	O
)	O
mu_sieve_free	(*(struct),*(void))->(void)
(	O
mach	*(struct)
,	O
mach	*(struct)
->	O
idspace	*(*(char))
[	O
i	long
]	O
)	O
;	O
mach	*(struct)
->	O
idcount	long
=	O
0	int
;	O
}	O
