uLong	long
ZEXPORT	O
adler32	(long,*(char),int)->(long)
(	O
adler	long
,	O
buf	*(void)
,	O
len	int
)	O
uLong	long
adler	long
;	O
const	O
Bytef	char
*	O
buf	*(void)
;	O
uInt	int
len	int
;	O
{	O
unsigned	O
long	O
s1	long
=	O
adler	long
&	O
0xffff	int
;	O
unsigned	O
long	O
s2	long
=	O
(	O
adler	long
>>	O
16	int
)	O
&	O
0xffff	int
;	O
int	O
k	int
;	O
if	O
(	O
buf	*(void)
==	O
Z_NULL	int
)	O
return	O
1L	int
;	O
while	O
(	O
len	int
>	O
0	int
)	O
{	O
k	int
=	O
len	int
<	O
NMAX	int
?	O
len	int
:	O
NMAX	int
;	O
len	int
-=	O
k	int
;	O
while	O
(	O
k	int
>=	O
16	int
)	O
{	O
DO16	O
(	O
buf	*(void)
)	O
;	O
buf	*(void)
+=	O
16	int
;	O
k	int
-=	O
16	int
;	O
}	O
if	O
(	O
k	int
!=	O
0	int
)	O
do	O
{	O
s1	long
+=	O
*	O
buf	*(void)
++	O
;	O
s2	long
+=	O
s1	long
;	O
}	O
while	O
(	O
--	O
k	int
)	O
;	O
s1	long
%=	O
BASE	int
;	O
s2	long
%=	O
BASE	int
;	O
}	O
return	O
(	O
s2	long
<<	O
16	int
)	O
|	O
s1	long
;	O
}	O
