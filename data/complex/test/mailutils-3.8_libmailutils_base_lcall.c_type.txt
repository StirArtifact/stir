static	O
int	O
_parse_lc_all	(*(char),*(struct(int,*(char),*(char),*(char),*(char))),int)->(int)
(	O
const	O
char	O
*	O
arg	*(char)
,	O
struct	O
mu_lc_all	struct(int,*(char),*(char),*(char),*(char))
*	O
str	*(struct(int,*(char),*(char),*(char),*(char)))
,	O
int	O
flags	int
)	O
{	O
char	O
*	O
s	*(char)
;	O
size_t	long
n	long
;	O
str	*(struct(int,*(char),*(char),*(char),*(char)))
->	O
flags	int
=	O
0	int
;	O
n	long
=	O
strcspn	(*(char),*(char))->(long)
(	O
arg	*(char)
,	O
"_.@"	*(char)
)	O
;	O
if	O
(	O
flags	int
&	O
MU_LC_LANG	int
)	O
{	O
s	*(char)
=	O
malloc	(long)->(*(void))
(	O
n	long
+	O
1	int
)	O
;	O
if	O
(	O
!	O
s	*(char)
)	O
return	O
ENOMEM	int
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
s	*(char)
,	O
arg	*(char)
,	O
n	long
)	O
;	O
s	*(char)
[	O
n	long
]	O
=	O
0	int
;	O
str	*(struct(int,*(char),*(char),*(char),*(char)))
->	O
language	*(char)
=	O
s	*(char)
;	O
str	*(struct(int,*(char),*(char),*(char),*(char)))
->	O
flags	int
|=	O
MU_LC_LANG	int
;	O
}	O
else	O
str	*(struct(int,*(char),*(char),*(char),*(char)))
->	O
language	*(char)
=	O
NULL	O
;	O
arg	*(char)
+=	O
n	long
;	O
if	O
(	O
arg	*(char)
[	O
0	int
]	O
==	O
'_'	O
)	O
{	O
arg	*(char)
++	O
;	O
n	long
=	O
strcspn	(*(char),*(char))->(long)
(	O
arg	*(char)
,	O
".@"	*(char)
)	O
;	O
if	O
(	O
flags	int
&	O
MU_LC_TERR	int
)	O
{	O
s	*(char)
=	O
malloc	(long)->(*(void))
(	O
n	long
+	O
1	int
)	O
;	O
if	O
(	O
!	O
s	*(char)
)	O
return	O
ENOMEM	int
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
s	*(char)
,	O
arg	*(char)
,	O
n	long
)	O
;	O
s	*(char)
[	O
n	long
]	O
=	O
0	int
;	O
str	*(struct(int,*(char),*(char),*(char),*(char)))
->	O
territory	*(char)
=	O
s	*(char)
;	O
str	*(struct(int,*(char),*(char),*(char),*(char)))
->	O
flags	int
|=	O
MU_LC_TERR	int
;	O
}	O
else	O
str	*(struct(int,*(char),*(char),*(char),*(char)))
->	O
territory	*(char)
=	O
NULL	O
;	O
arg	*(char)
+=	O
n	long
;	O
}	O
if	O
(	O
arg	*(char)
[	O
0	int
]	O
==	O
'.'	O
)	O
{	O
arg	*(char)
++	O
;	O
n	long
=	O
strcspn	(*(char),*(char))->(long)
(	O
arg	*(char)
,	O
"@"	*(char)
)	O
;	O
if	O
(	O
flags	int
&	O
MU_LC_CSET	int
)	O
{	O
s	*(char)
=	O
malloc	(long)->(*(void))
(	O
n	long
+	O
1	int
)	O
;	O
if	O
(	O
!	O
s	*(char)
)	O
return	O
ENOMEM	int
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
s	*(char)
,	O
arg	*(char)
,	O
n	long
)	O
;	O
s	*(char)
[	O
n	long
]	O
=	O
0	int
;	O
str	*(struct(int,*(char),*(char),*(char),*(char)))
->	O
charset	*(char)
=	O
s	*(char)
;	O
str	*(struct(int,*(char),*(char),*(char),*(char)))
->	O
flags	int
|=	O
MU_LC_CSET	int
;	O
}	O
else	O
str	*(struct(int,*(char),*(char),*(char),*(char)))
->	O
charset	*(char)
=	O
NULL	O
;	O
arg	*(char)
+=	O
n	long
;	O
}	O
if	O
(	O
arg	*(char)
[	O
0	int
]	O
)	O
{	O
arg	*(char)
++	O
;	O
if	O
(	O
flags	int
&	O
MU_LC_MOD	int
)	O
{	O
str	*(struct(int,*(char),*(char),*(char),*(char)))
->	O
modifier	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
arg	*(char)
)	O
;	O
if	O
(	O
!	O
str	*(struct(int,*(char),*(char),*(char),*(char)))
->	O
modifier	*(char)
)	O
return	O
ENOMEM	int
;	O
str	*(struct(int,*(char),*(char),*(char),*(char)))
->	O
flags	int
|=	O
MU_LC_MOD	int
;	O
}	O
}	O
return	O
0	int
;	O
}	O
void	O
mu_lc_all_free	(*(struct(int,*(char),*(char),*(char),*(char))))->(void)
(	O
struct	O
mu_lc_all	struct(int,*(char),*(char),*(char),*(char))
*	O
str	*(struct(int,*(char),*(char),*(char),*(char)))
)	O
{	O
if	O
(	O
str	*(struct(int,*(char),*(char),*(char),*(char)))
->	O
flags	int
&	O
MU_LC_LANG	int
)	O
free	(*(void))->(void)
(	O
str	*(struct(int,*(char),*(char),*(char),*(char)))
->	O
language	*(char)
)	O
;	O
if	O
(	O
str	*(struct(int,*(char),*(char),*(char),*(char)))
->	O
flags	int
&	O
MU_LC_TERR	int
)	O
free	(*(void))->(void)
(	O
str	*(struct(int,*(char),*(char),*(char),*(char)))
->	O
territory	*(char)
)	O
;	O
if	O
(	O
str	*(struct(int,*(char),*(char),*(char),*(char)))
->	O
flags	int
&	O
MU_LC_CSET	int
)	O
free	(*(void))->(void)
(	O
str	*(struct(int,*(char),*(char),*(char),*(char)))
->	O
charset	*(char)
)	O
;	O
if	O
(	O
str	*(struct(int,*(char),*(char),*(char),*(char)))
->	O
flags	int
&	O
MU_LC_MOD	int
)	O
free	(*(void))->(void)
(	O
str	*(struct(int,*(char),*(char),*(char),*(char)))
->	O
modifier	*(char)
)	O
;	O
str	*(struct(int,*(char),*(char),*(char),*(char)))
->	O
flags	int
=	O
0	int
;	O
}	O
int	O
mu_parse_lc_all	(*(char),*(struct(int,*(char),*(char),*(char),*(char))),int)->(int)
(	O
const	O
char	O
*	O
arg	*(char)
,	O
struct	O
mu_lc_all	struct(int,*(char),*(char),*(char),*(char))
*	O
str	*(struct(int,*(char),*(char),*(char),*(char)))
,	O
int	O
flags	int
)	O
{	O
int	O
rc	int
;	O
memset	(*(void),int,long)->(*(void))
(	O
str	*(struct(int,*(char),*(char),*(char),*(char)))
,	O
0	int
,	O
sizeof	O
(	O
str	*(struct(int,*(char),*(char),*(char),*(char)))
[	O
0	int
]	O
)	O
)	O
;	O
if	O
(	O
!	O
arg	*(char)
)	O
{	O
if	O
(	O
flags	int
&	O
MU_LC_LANG	int
)	O
{	O
str	*(struct(int,*(char),*(char),*(char),*(char)))
->	O
language	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
"C"	*(char)
)	O
;	O
if	O
(	O
!	O
str	*(struct(int,*(char),*(char),*(char),*(char)))
->	O
language	*(char)
)	O
return	O
ENOMEM	int
;	O
}	O
return	O
0	int
;	O
}	O
rc	int
=	O
_parse_lc_all	(*(char),*(struct(int,*(char),*(char),*(char),*(char))),int)->(int)
(	O
arg	*(char)
,	O
str	*(struct(int,*(char),*(char),*(char),*(char)))
,	O
(	O
flags	int
&	O
MU_LC_CSET	int
)	O
?	O
(	O
flags	int
|	O
MU_LC_LANG	int
|	O
MU_LC_TERR	int
)	O
:	O
flags	int
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
&&	O
(	O
flags	int
&	O
MU_LC_CSET	int
)	O
)	O
{	O
if	O
(	O
!	O
str	*(struct(int,*(char),*(char),*(char),*(char)))
->	O
charset	*(char)
)	O
{	O
const	O
char	O
*	O
charset	*(char)
=	O
mu_charset_lookup	(*(char),*(char))->(*(char))
(	O
str	*(struct(int,*(char),*(char),*(char),*(char)))
->	O
language	*(char)
,	O
str	*(struct(int,*(char),*(char),*(char),*(char)))
->	O
territory	*(char)
)	O
;	O
if	O
(	O
charset	*(char)
)	O
{	O
str	*(struct(int,*(char),*(char),*(char),*(char)))
->	O
charset	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
charset	*(char)
)	O
;	O
if	O
(	O
!	O
str	*(struct(int,*(char),*(char),*(char),*(char)))
->	O
charset	*(char)
)	O
{	O
rc	int
=	O
ENOMEM	int
;	O
goto	O
err	O
;	O
}	O
str	*(struct(int,*(char),*(char),*(char),*(char)))
->	O
flags	int
|=	O
MU_LC_CSET	int
;	O
}	O
}	O
flags	int
=	O
~	O
flags	int
&	O
str	*(struct(int,*(char),*(char),*(char),*(char)))
->	O
flags	int
;	O
if	O
(	O
flags	int
&	O
MU_LC_LANG	int
)	O
{	O
free	(*(void))->(void)
(	O
str	*(struct(int,*(char),*(char),*(char),*(char)))
->	O
language	*(char)
)	O
;	O
str	*(struct(int,*(char),*(char),*(char),*(char)))
->	O
language	*(char)
=	O
NULL	O
;	O
str	*(struct(int,*(char),*(char),*(char),*(char)))
->	O
flags	int
&=	O
~	O
MU_LC_LANG	int
;	O
}	O
if	O
(	O
flags	int
&	O
MU_LC_TERR	int
)	O
{	O
free	(*(void))->(void)
(	O
str	*(struct(int,*(char),*(char),*(char),*(char)))
->	O
territory	*(char)
)	O
;	O
str	*(struct(int,*(char),*(char),*(char),*(char)))
->	O
territory	*(char)
=	O
NULL	O
;	O
str	*(struct(int,*(char),*(char),*(char),*(char)))
->	O
flags	int
&=	O
~	O
MU_LC_TERR	int
;	O
}	O
}	O
err	O
:	O
if	O
(	O
rc	int
)	O
mu_lc_all_free	(*(struct(int,*(char),*(char),*(char),*(char))))->(void)
(	O
str	*(struct(int,*(char),*(char),*(char),*(char)))
)	O
;	O
return	O
rc	int
;	O
}	O
