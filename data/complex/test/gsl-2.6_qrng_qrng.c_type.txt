gsl_qrng	struct(*(struct(*(char),int,*((int)->(long)),*((*`,int)->(int)),*((*`,int,array(double))->(int)))),int,long,*(void))
*	O
gsl_qrng_alloc	(*(struct(*(char),int,*((int)->(long)),*((*`,int)->(int)),*((*`,int,array(double))->(int)))),int)->(*(struct(*(struct(*`,int,*`,*`,*`)),int,long,*(void))))
(	O
const	O
gsl_qrng_type	struct(*(char),int,*((int)->(long)),*((*(void),int)->(int)),*((*(void),int,array(double))->(int)))
*	O
T	*(struct(*(char),int,*((int)->(long)),*((*(void),int)->(int)),*((*(void),int,array(double))->(int))))
,	O
unsigned	O
int	O
dimension	int
)	O
{	O
gsl_qrng	struct(*(struct(*(char),int,*((int)->(long)),*((*`,int)->(int)),*((*`,int,array(double))->(int)))),int,long,*(void))
*	O
q	*(struct(*(struct(*(char),int,*((int)->(long)),*((*`,int)->(int)),*((*`,int,array(double))->(int)))),int,long,*(void)))
=	O
(	O
gsl_qrng	struct(*(struct(*(char),int,*((int)->(long)),*((*`,int)->(int)),*((*`,int,array(double))->(int)))),int,long,*(void))
*	O
)	O
malloc	(long)->(*(void))
(	O
sizeof	O
(	O
gsl_qrng	struct(*(struct(*(char),int,*((int)->(long)),*((*`,int)->(int)),*((*`,int,array(double))->(int)))),int,long,*(void))
)	O
)	O
;	O
if	O
(	O
q	*(struct(*(struct(*(char),int,*((int)->(long)),*((*`,int)->(int)),*((*`,int,array(double))->(int)))),int,long,*(void)))
==	O
0	int
)	O
{	O
GSL_ERROR_VAL	O
(	O
"allocation failed for qrng struct"	*(char)
,	O
GSL_ENOMEM	int
,	O
0	int
)	O
;	O
}	O
;	O
q	*(struct(*(struct(*(char),int,*((int)->(long)),*((*`,int)->(int)),*((*`,int,array(double))->(int)))),int,long,*(void)))
->	O
dimension	int
=	O
dimension	int
;	O
q	*(struct(*(struct(*(char),int,*((int)->(long)),*((*`,int)->(int)),*((*`,int,array(double))->(int)))),int,long,*(void)))
->	O
state_size	*((int)->(long))
=	O
T	*(struct(*(char),int,*((int)->(long)),*((*(void),int)->(int)),*((*(void),int,array(double))->(int))))
->	O
state_size	*((int)->(long))
(	O
dimension	int
)	O
;	O
q	*(struct(*(struct(*(char),int,*((int)->(long)),*((*`,int)->(int)),*((*`,int,array(double))->(int)))),int,long,*(void)))
->	O
state	*(int)
=	O
malloc	(long)->(*(void))
(	O
q	*(struct(*(struct(*(char),int,*((int)->(long)),*((*`,int)->(int)),*((*`,int,array(double))->(int)))),int,long,*(void)))
->	O
state_size	*((int)->(long))
)	O
;	O
if	O
(	O
q	*(struct(*(struct(*(char),int,*((int)->(long)),*((*`,int)->(int)),*((*`,int,array(double))->(int)))),int,long,*(void)))
->	O
state	*(int)
==	O
0	int
)	O
{	O
free	(*(void))->(void)
(	O
q	*(struct(*(struct(*(char),int,*((int)->(long)),*((*`,int)->(int)),*((*`,int,array(double))->(int)))),int,long,*(void)))
)	O
;	O
GSL_ERROR_VAL	O
(	O
"allocation failed for qrng state"	*(char)
,	O
GSL_ENOMEM	int
,	O
0	int
)	O
;	O
}	O
;	O
q	*(struct(*(struct(*(char),int,*((int)->(long)),*((*`,int)->(int)),*((*`,int,array(double))->(int)))),int,long,*(void)))
->	O
type	*(struct(*(char),int,*((int)->(long)),*((*(void),int)->(int)),*((*(void),int,array(double))->(int))))
=	O
T	*(struct(*(char),int,*((int)->(long)),*((*(void),int)->(int)),*((*(void),int,array(double))->(int))))
;	O
T	*(struct(*(char),int,*((int)->(long)),*((*(void),int)->(int)),*((*(void),int,array(double))->(int))))
->	O
init_state	*((*(void),int)->(int))
(	O
q	*(struct(*(struct(*(char),int,*((int)->(long)),*((*`,int)->(int)),*((*`,int,array(double))->(int)))),int,long,*(void)))
->	O
state	*(int)
,	O
q	*(struct(*(struct(*(char),int,*((int)->(long)),*((*`,int)->(int)),*((*`,int,array(double))->(int)))),int,long,*(void)))
->	O
dimension	int
)	O
;	O
return	O
q	*(struct(*(struct(*(char),int,*((int)->(long)),*((*`,int)->(int)),*((*`,int,array(double))->(int)))),int,long,*(void)))
;	O
}	O
void	O
gsl_qrng_init	(*(struct(*(struct(*`,int,*`,*`,*`)),int,long,*(void))))->(void)
(	O
gsl_qrng	struct(*(struct(*(char),int,*((int)->(long)),*((*`,int)->(int)),*((*`,int,array(double))->(int)))),int,long,*(void))
*	O
q	*(struct(*(struct(*(char),int,*((int)->(long)),*((*`,int)->(int)),*((*`,int,array(double))->(int)))),int,long,*(void)))
)	O
{	O
(	O
q	*(struct(*(struct(*(char),int,*((int)->(long)),*((*`,int)->(int)),*((*`,int,array(double))->(int)))),int,long,*(void)))
->	O
type	*(struct(*(char),int,*((int)->(long)),*((*(void),int)->(int)),*((*(void),int,array(double))->(int))))
->	O
init_state	*((*(void),int)->(int))
)	O
(	O
q	*(struct(*(struct(*(char),int,*((int)->(long)),*((*`,int)->(int)),*((*`,int,array(double))->(int)))),int,long,*(void)))
->	O
state	*(int)
,	O
q	*(struct(*(struct(*(char),int,*((int)->(long)),*((*`,int)->(int)),*((*`,int,array(double))->(int)))),int,long,*(void)))
->	O
dimension	int
)	O
;	O
}	O
int	O
gsl_qrng_memcpy	(*(struct(*(struct(*`,int,*`,*`,*`)),int,long,*(void))),*(struct(*(struct(*`,int,*`,*`,*`)),int,long,*(void))))->(int)
(	O
gsl_qrng	struct(*(struct(*(char),int,*((int)->(long)),*((*`,int)->(int)),*((*`,int,array(double))->(int)))),int,long,*(void))
*	O
dest	*(struct(*(struct(*(char),int,*((int)->(long)),*((*`,int)->(int)),*((*`,int,array(double))->(int)))),int,long,*(void)))
,	O
const	O
gsl_qrng	struct(*(struct(*(char),int,*((int)->(long)),*((*`,int)->(int)),*((*`,int,array(double))->(int)))),int,long,*(void))
*	O
src	*(struct(*(struct(*(char),int,*((int)->(long)),*((*`,int)->(int)),*((*`,int,array(double))->(int)))),int,long,*(void)))
)	O
{	O
if	O
(	O
dest	*(struct(*(struct(*(char),int,*((int)->(long)),*((*`,int)->(int)),*((*`,int,array(double))->(int)))),int,long,*(void)))
->	O
type	*(struct(*(char),int,*((int)->(long)),*((*(void),int)->(int)),*((*(void),int,array(double))->(int))))
!=	O
src	*(struct(*(struct(*(char),int,*((int)->(long)),*((*`,int)->(int)),*((*`,int,array(double))->(int)))),int,long,*(void)))
->	O
type	*(struct(*(char),int,*((int)->(long)),*((*(void),int)->(int)),*((*(void),int,array(double))->(int))))
)	O
{	O
GSL_ERROR	O
(	O
"generators must be of the same type"	*(char)
,	O
GSL_EINVAL	int
)	O
;	O
}	O
dest	*(struct(*(struct(*(char),int,*((int)->(long)),*((*`,int)->(int)),*((*`,int,array(double))->(int)))),int,long,*(void)))
->	O
dimension	int
=	O
src	*(struct(*(struct(*(char),int,*((int)->(long)),*((*`,int)->(int)),*((*`,int,array(double))->(int)))),int,long,*(void)))
->	O
dimension	int
;	O
dest	*(struct(*(struct(*(char),int,*((int)->(long)),*((*`,int)->(int)),*((*`,int,array(double))->(int)))),int,long,*(void)))
->	O
state_size	*((int)->(long))
=	O
src	*(struct(*(struct(*(char),int,*((int)->(long)),*((*`,int)->(int)),*((*`,int,array(double))->(int)))),int,long,*(void)))
->	O
state_size	*((int)->(long))
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
dest	*(struct(*(struct(*(char),int,*((int)->(long)),*((*`,int)->(int)),*((*`,int,array(double))->(int)))),int,long,*(void)))
->	O
state	*(int)
,	O
src	*(struct(*(struct(*(char),int,*((int)->(long)),*((*`,int)->(int)),*((*`,int,array(double))->(int)))),int,long,*(void)))
->	O
state	*(int)
,	O
src	*(struct(*(struct(*(char),int,*((int)->(long)),*((*`,int)->(int)),*((*`,int,array(double))->(int)))),int,long,*(void)))
->	O
state_size	*((int)->(long))
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
gsl_qrng	struct(*(struct(*(char),int,*((int)->(long)),*((*`,int)->(int)),*((*`,int,array(double))->(int)))),int,long,*(void))
*	O
gsl_qrng_clone	(*(struct(*(struct(*`,int,*`,*`,*`)),int,long,*(void))))->(*(struct(*(struct(*`,int,*`,*`,*`)),int,long,*(void))))
(	O
const	O
gsl_qrng	struct(*(struct(*(char),int,*((int)->(long)),*((*`,int)->(int)),*((*`,int,array(double))->(int)))),int,long,*(void))
*	O
q	*(struct(*(struct(*(char),int,*((int)->(long)),*((*`,int)->(int)),*((*`,int,array(double))->(int)))),int,long,*(void)))
)	O
{	O
gsl_qrng	struct(*(struct(*(char),int,*((int)->(long)),*((*`,int)->(int)),*((*`,int,array(double))->(int)))),int,long,*(void))
*	O
r	*(struct(*(struct(*(char),int,*((int)->(long)),*((*`,int)->(int)),*((*`,int,array(double))->(int)))),int,long,*(void)))
=	O
(	O
gsl_qrng	struct(*(struct(*(char),int,*((int)->(long)),*((*`,int)->(int)),*((*`,int,array(double))->(int)))),int,long,*(void))
*	O
)	O
malloc	(long)->(*(void))
(	O
sizeof	O
(	O
gsl_qrng	struct(*(struct(*(char),int,*((int)->(long)),*((*`,int)->(int)),*((*`,int,array(double))->(int)))),int,long,*(void))
)	O
)	O
;	O
if	O
(	O
r	*(struct(*(struct(*(char),int,*((int)->(long)),*((*`,int)->(int)),*((*`,int,array(double))->(int)))),int,long,*(void)))
==	O
0	int
)	O
{	O
GSL_ERROR_VAL	O
(	O
"failed to allocate space for rng struct"	*(char)
,	O
GSL_ENOMEM	int
,	O
0	int
)	O
;	O
}	O
;	O
r	*(struct(*(struct(*(char),int,*((int)->(long)),*((*`,int)->(int)),*((*`,int,array(double))->(int)))),int,long,*(void)))
->	O
dimension	int
=	O
q	*(struct(*(struct(*(char),int,*((int)->(long)),*((*`,int)->(int)),*((*`,int,array(double))->(int)))),int,long,*(void)))
->	O
dimension	int
;	O
r	*(struct(*(struct(*(char),int,*((int)->(long)),*((*`,int)->(int)),*((*`,int,array(double))->(int)))),int,long,*(void)))
->	O
state_size	*((int)->(long))
=	O
q	*(struct(*(struct(*(char),int,*((int)->(long)),*((*`,int)->(int)),*((*`,int,array(double))->(int)))),int,long,*(void)))
->	O
state_size	*((int)->(long))
;	O
r	*(struct(*(struct(*(char),int,*((int)->(long)),*((*`,int)->(int)),*((*`,int,array(double))->(int)))),int,long,*(void)))
->	O
state	*(int)
=	O
malloc	(long)->(*(void))
(	O
r	*(struct(*(struct(*(char),int,*((int)->(long)),*((*`,int)->(int)),*((*`,int,array(double))->(int)))),int,long,*(void)))
->	O
state_size	*((int)->(long))
)	O
;	O
if	O
(	O
r	*(struct(*(struct(*(char),int,*((int)->(long)),*((*`,int)->(int)),*((*`,int,array(double))->(int)))),int,long,*(void)))
->	O
state	*(int)
==	O
0	int
)	O
{	O
free	(*(void))->(void)
(	O
r	*(struct(*(struct(*(char),int,*((int)->(long)),*((*`,int)->(int)),*((*`,int,array(double))->(int)))),int,long,*(void)))
)	O
;	O
GSL_ERROR_VAL	O
(	O
"failed to allocate space for rng state"	*(char)
,	O
GSL_ENOMEM	int
,	O
0	int
)	O
;	O
}	O
;	O
r	*(struct(*(struct(*(char),int,*((int)->(long)),*((*`,int)->(int)),*((*`,int,array(double))->(int)))),int,long,*(void)))
->	O
type	*(struct(*(char),int,*((int)->(long)),*((*(void),int)->(int)),*((*(void),int,array(double))->(int))))
=	O
q	*(struct(*(struct(*(char),int,*((int)->(long)),*((*`,int)->(int)),*((*`,int,array(double))->(int)))),int,long,*(void)))
->	O
type	*(struct(*(char),int,*((int)->(long)),*((*(void),int)->(int)),*((*(void),int,array(double))->(int))))
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
r	*(struct(*(struct(*(char),int,*((int)->(long)),*((*`,int)->(int)),*((*`,int,array(double))->(int)))),int,long,*(void)))
->	O
state	*(int)
,	O
q	*(struct(*(struct(*(char),int,*((int)->(long)),*((*`,int)->(int)),*((*`,int,array(double))->(int)))),int,long,*(void)))
->	O
state	*(int)
,	O
q	*(struct(*(struct(*(char),int,*((int)->(long)),*((*`,int)->(int)),*((*`,int,array(double))->(int)))),int,long,*(void)))
->	O
state_size	*((int)->(long))
)	O
;	O
return	O
r	*(struct(*(struct(*(char),int,*((int)->(long)),*((*`,int)->(int)),*((*`,int,array(double))->(int)))),int,long,*(void)))
;	O
}	O
const	O
char	O
*	O
gsl_qrng_name	(*(struct(*(struct(*`,int,*`,*`,*`)),int,long,*(void))))->(*(char))
(	O
const	O
gsl_qrng	struct(*(struct(*(char),int,*((int)->(long)),*((*`,int)->(int)),*((*`,int,array(double))->(int)))),int,long,*(void))
*	O
q	*(struct(*(struct(*(char),int,*((int)->(long)),*((*`,int)->(int)),*((*`,int,array(double))->(int)))),int,long,*(void)))
)	O
{	O
return	O
q	*(struct(*(struct(*(char),int,*((int)->(long)),*((*`,int)->(int)),*((*`,int,array(double))->(int)))),int,long,*(void)))
->	O
type	*(struct(*(char),int,*((int)->(long)),*((*(void),int)->(int)),*((*(void),int,array(double))->(int))))
->	O
name	*(char)
;	O
}	O
size_t	long
gsl_qrng_size	(*(struct(*(struct(*`,int,*`,*`,*`)),int,long,*(void))))->(long)
(	O
const	O
gsl_qrng	struct(*(struct(*(char),int,*((int)->(long)),*((*`,int)->(int)),*((*`,int,array(double))->(int)))),int,long,*(void))
*	O
q	*(struct(*(struct(*(char),int,*((int)->(long)),*((*`,int)->(int)),*((*`,int,array(double))->(int)))),int,long,*(void)))
)	O
{	O
return	O
q	*(struct(*(struct(*(char),int,*((int)->(long)),*((*`,int)->(int)),*((*`,int,array(double))->(int)))),int,long,*(void)))
->	O
state_size	*((int)->(long))
;	O
}	O
void	O
*	O
gsl_qrng_state	(*(struct(*(struct(*`,int,*`,*`,*`)),int,long,*(void))))->(*(void))
(	O
const	O
gsl_qrng	struct(*(struct(*(char),int,*((int)->(long)),*((*`,int)->(int)),*((*`,int,array(double))->(int)))),int,long,*(void))
*	O
q	*(struct(*(struct(*(char),int,*((int)->(long)),*((*`,int)->(int)),*((*`,int,array(double))->(int)))),int,long,*(void)))
)	O
{	O
return	O
q	*(struct(*(struct(*(char),int,*((int)->(long)),*((*`,int)->(int)),*((*`,int,array(double))->(int)))),int,long,*(void)))
->	O
state	*(int)
;	O
}	O
void	O
gsl_qrng_free	(*(struct(*(struct(*`,int,*`,*`,*`)),int,long,*(void))))->(void)
(	O
gsl_qrng	struct(*(struct(*(char),int,*((int)->(long)),*((*`,int)->(int)),*((*`,int,array(double))->(int)))),int,long,*(void))
*	O
q	*(struct(*(struct(*(char),int,*((int)->(long)),*((*`,int)->(int)),*((*`,int,array(double))->(int)))),int,long,*(void)))
)	O
{	O
RETURN_IF_NULL	O
(	O
q	*(struct(*(struct(*(char),int,*((int)->(long)),*((*`,int)->(int)),*((*`,int,array(double))->(int)))),int,long,*(void)))
)	O
;	O
if	O
(	O
q	*(struct(*(struct(*(char),int,*((int)->(long)),*((*`,int)->(int)),*((*`,int,array(double))->(int)))),int,long,*(void)))
->	O
state	*(int)
!=	O
0	int
)	O
free	(*(void))->(void)
(	O
q	*(struct(*(struct(*(char),int,*((int)->(long)),*((*`,int)->(int)),*((*`,int,array(double))->(int)))),int,long,*(void)))
->	O
state	*(int)
)	O
;	O
free	(*(void))->(void)
(	O
q	*(struct(*(struct(*(char),int,*((int)->(long)),*((*`,int)->(int)),*((*`,int,array(double))->(int)))),int,long,*(void)))
)	O
;	O
}	O
