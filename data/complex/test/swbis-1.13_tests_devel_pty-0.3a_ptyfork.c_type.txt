pid_t	int
pty_fork	(*(int),*(char),*(struct(int,int,int,int,char,array(char),int,int)),*(struct(short,short,short,short)))->(int)
(	O
int	O
*	O
ptrfdm	*(int)
,	O
char	O
*	O
slave_name	*(char)
,	O
const	O
struct	O
termios	struct(int,int,int,int,char,array(char),int,int)
*	O
slave_termios	*(struct(int,int,int,int,char,array(char),int,int))
,	O
const	O
struct	O
winsize	struct(short,short,short,short)
*	O
slave_winsize	*(struct(short,short,short,short))
)	O
{	O
int	O
fdm	int
,	O
fds	int
;	O
pid_t	int
pid	int
;	O
char	O
pts_name	array(char)
[	O
20	int
]	O
;	O
if	O
(	O
(	O
fdm	int
=	O
ptym_open	(*(char))->(int)
(	O
pts_name	array(char)
)	O
)	O
<	O
0	int
)	O
err_sys	(*(char))->(void)
(	O
"can't open master pty: %s"	*(char)
,	O
pts_name	array(char)
)	O
;	O
if	O
(	O
slave_name	*(char)
!=	O
NULL	O
)	O
strcpy	(*(char),*(char))->(*(char))
(	O
slave_name	*(char)
,	O
pts_name	array(char)
)	O
;	O
if	O
(	O
(	O
pid	int
=	O
fork	()->(int)
(	O
)	O
)	O
<	O
0	int
)	O
return	O
(	O
-	O
1	int
)	O
;	O
else	O
if	O
(	O
pid	int
==	O
0	int
)	O
{	O
if	O
(	O
setsid	()->(int)
(	O
)	O
<	O
0	int
)	O
err_sys	(*(char))->(void)
(	O
"setsid error"	*(char)
)	O
;	O
if	O
(	O
(	O
fds	int
=	O
ptys_open	(int,*(char))->(int)
(	O
fdm	int
,	O
pts_name	array(char)
)	O
)	O
<	O
0	int
)	O
err_sys	(*(char))->(void)
(	O
"can't open slave pty"	*(char)
)	O
;	O
close	(int)->(int)
(	O
fdm	int
)	O
;	O
if	O
(	O
slave_termios	*(struct(int,int,int,int,char,array(char),int,int))
!=	O
NULL	O
)	O
{	O
if	O
(	O
tcsetattr	(int,int,*(struct(int,int,int,int,char,array(char),int,int)))->(int)
(	O
fds	int
,	O
TCSANOW	int
,	O
slave_termios	*(struct(int,int,int,int,char,array(char),int,int))
)	O
<	O
0	int
)	O
err_sys	(*(char))->(void)
(	O
"tcsetattr error on slave pty"	*(char)
)	O
;	O
}	O
if	O
(	O
slave_winsize	*(struct(short,short,short,short))
!=	O
NULL	O
)	O
{	O
if	O
(	O
ioctl	(int,long)->(int)
(	O
fds	int
,	O
TIOCSWINSZ	int
,	O
slave_winsize	*(struct(short,short,short,short))
)	O
<	O
0	int
)	O
err_sys	(*(char))->(void)
(	O
"TIOCSWINSZ error on slave pty"	*(char)
)	O
;	O
}	O
if	O
(	O
dup2	(int,int)->(int)
(	O
fds	int
,	O
STDIN_FILENO	int
)	O
!=	O
STDIN_FILENO	int
)	O
err_sys	(*(char))->(void)
(	O
"dup2 error to stdin"	*(char)
)	O
;	O
if	O
(	O
dup2	(int,int)->(int)
(	O
fds	int
,	O
STDOUT_FILENO	int
)	O
!=	O
STDOUT_FILENO	int
)	O
err_sys	(*(char))->(void)
(	O
"dup2 error to stdout"	*(char)
)	O
;	O
if	O
(	O
dup2	(int,int)->(int)
(	O
fds	int
,	O
STDERR_FILENO	int
)	O
!=	O
STDERR_FILENO	int
)	O
err_sys	(*(char))->(void)
(	O
"dup2 error to stderr"	*(char)
)	O
;	O
if	O
(	O
fds	int
>	O
STDERR_FILENO	int
)	O
close	(int)->(int)
(	O
fds	int
)	O
;	O
return	O
(	O
0	int
)	O
;	O
}	O
else	O
{	O
*	O
ptrfdm	*(int)
=	O
fdm	int
;	O
return	O
(	O
pid	int
)	O
;	O
}	O
}	O
