void	O
fill	(array(struct(float,float)),int,struct(float,float),struct(float,float),int,int,float,float)->(void)
(	O
HPGL_Pt	struct(float,float)
polygon	array(struct(float,float))
[	O
]	O
,	O
int	O
numpoints	int
,	O
HPGL_Pt	struct(float,float)
point1	struct(float,float)
,	O
HPGL_Pt	struct(float,float)
point2	struct(float,float)
,	O
int	O
scale_flag	int
,	O
int	O
filltype	int
,	O
float	O
spacing	float
,	O
float	O
hatchangle	float
)	O
{	O
typedef	O
struct	O
{	O
double	O
x	int
,	O
y	int
;	O
}	O
HPGL_Pt2	struct(double,double)
;	O
double	O
pxmin	double
,	O
pxmax	double
,	O
pymin	double
,	O
pymax	double
;	O
double	O
polyxmin	double
,	O
polyymin	double
,	O
polyxmax	double
,	O
polyymax	double
;	O
double	O
scanx1	double
,	O
scanx2	double
,	O
scany1	double
,	O
scany2	double
;	O
HPGL_Pt2	struct(double,double)
segment	array(struct(double,double))
[	O
MAXPOLY	int
]	O
,	O
tmp	struct(double,double)
;	O
double	O
segx	double
,	O
segy	double
;	O
static	O
int	O
i	int
;	O
int	O
j	int
,	O
k	int
,	O
jj	int
,	O
kk	int
;	O
int	O
numlines	int
;	O
double	O
penwidth	double
;	O
HPGL_Pt	struct(float,float)
p	struct(float,float)
;	O
double	O
rot_ang	double
;	O
double	O
pxdiff	double
=	O
0.	int
,	O
pydiff	double
=	O
0.	int
;	O
double	O
avx	double
,	O
avy	double
,	O
bvx	double
,	O
bvy	double
,	O
ax	double
,	O
ay	double
,	O
bx	double
,	O
by	double
,	O
atx	double
,	O
aty	double
,	O
btx	double
,	O
bty	double
,	O
mu	double
;	O
PEN_W	float
SafePenW	float
=	O
pt	struct(array(float),array(short),array(array(char)))
.	O
width	array(float)
[	O
1	int
]	O
;	O
LineEnds	enum(int,int,int,int)
SafeLineEnd	enum(int,int,int,int)
=	O
CurrentLineEnd	enum(int,int,int,int)
;	O
CurrentLineEnd	enum(int,int,int,int)
=	O
LAE_butt	int
;	O
penwidth	double
=	O
0.1	int
;	O
PlotCmd_to_tmpfile	(enum(int,int,int,int,int,int,int,int,int))->(void)
(	O
DEF_PW	int
)	O
;	O
Pen_Width_to_tmpfile	(int,float)->(void)
(	O
1	int
,	O
penwidth	double
)	O
;	O
PlotCmd_to_tmpfile	(enum(int,int,int,int,int,int,int,int,int))->(void)
(	O
DEF_LA	int
)	O
;	O
Line_Attr_to_tmpfile	(enum(int,int,int),int)->(void)
(	O
LineAttrEnd	int
,	O
LAE_round	int
)	O
;	O
if	O
(	O
filltype	int
>	O
2	int
)	O
penwidth	double
=	O
spacing	float
;	O
polyxmin	double
=	O
100000.	int
;	O
polyymin	double
=	O
100000.	int
;	O
polyxmax	double
=	O
-	O
100000.	int
;	O
polyymax	double
=	O
-	O
100000.	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<=	O
numpoints	int
;	O
i	int
++	O
)	O
{	O
polyxmin	double
=	O
MIN	O
(	O
polyxmin	double
,	O
polygon	array(struct(float,float))
[	O
i	int
]	O
.	O
x	int
)	O
;	O
polyymin	double
=	O
MIN	O
(	O
polyymin	double
,	O
polygon	array(struct(float,float))
[	O
i	int
]	O
.	O
y	int
)	O
;	O
polyxmax	double
=	O
MAX	O
(	O
polyxmax	double
,	O
polygon	array(struct(float,float))
[	O
i	int
]	O
.	O
x	int
)	O
;	O
polyymax	double
=	O
MAX	O
(	O
polyymax	double
,	O
polygon	array(struct(float,float))
[	O
i	int
]	O
.	O
y	int
)	O
;	O
}	O
if	O
(	O
hatchangle	float
>	O
89.9	int
&&	O
hatchangle	float
<	O
180.	int
)	O
{	O
hatchangle	float
=	O
hatchangle	float
-	O
90.	int
;	O
goto	O
FILL_VERT	O
;	O
}	O
pxmin	double
=	O
point1	struct(float,float)
.	O
x	int
-	O
0.5	int
;	O
pymin	double
=	O
point1	struct(float,float)
.	O
y	int
-	O
0.5	int
;	O
pxmax	double
=	O
polyxmax	double
;	O
pymax	double
=	O
polyymax	double
;	O
if	O
(	O
polyxmin	double
==	O
polyxmax	double
&&	O
polyymin	double
==	O
polyymax	double
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"zero area polygon\n"	*(char)
)	O
;	O
return	O
;	O
}	O
pydiff	double
=	O
pymax	double
-	O
pymin	double
;	O
pxdiff	double
=	O
pxmax	double
-	O
pxmin	double
;	O
if	O
(	O
hatchangle	float
!=	O
0.	int
)	O
{	O
rot_ang	double
=	O
tan	(double)->(double)
(	O
M_PI	int
*	O
hatchangle	float
/	O
180.	int
)	O
;	O
pymin	double
=	O
pymin	double
-	O
rot_ang	double
*	O
pxdiff	double
;	O
pymax	double
=	O
pymax	double
+	O
rot_ang	double
*	O
pxdiff	double
;	O
}	O
numlines	int
=	O
(	O
int	O
)	O
fabs	(double)->(double)
(	O
1.	int
+	O
(	O
pymax	double
-	O
pymin	double
+	O
penwidth	double
)	O
/	O
penwidth	double
)	O
;	O
pydiff	double
=	O
0.	int
;	O
if	O
(	O
hatchangle	float
!=	O
0.	int
)	O
pydiff	double
=	O
tan	(double)->(double)
(	O
M_PI	int
*	O
hatchangle	float
/	O
180.	int
)	O
*	O
pxdiff	double
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<=	O
numlines	int
;	O
i	int
++	O
)	O
{	O
k	int
=	O
-	O
1	int
;	O
scany1	double
=	O
pymin	double
+	O
(	O
double	O
)	O
i	int
*	O
penwidth	double
;	O
scany2	double
=	O
scany1	double
+	O
pydiff	double
;	O
if	O
(	O
scany1	double
>=	O
pymax	double
||	O
scany1	double
<=	O
pymin	double
)	O
{	O
continue	O
;	O
}	O
if	O
(	O
scany2	double
<	O
polyymin	double
)	O
continue	O
;	O
bx	double
=	O
pxmin	double
;	O
btx	double
=	O
pxmax	double
;	O
by	double
=	O
scany1	double
;	O
bty	double
=	O
scany2	double
;	O
bvx	double
=	O
btx	double
-	O
bx	double
;	O
bvy	double
=	O
bty	double
-	O
by	double
;	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<=	O
numpoints	int
;	O
j	int
=	O
j	int
+	O
2	int
)	O
{	O
ax	double
=	O
polygon	array(struct(float,float))
[	O
j	int
]	O
.	O
x	int
;	O
ay	double
=	O
polygon	array(struct(float,float))
[	O
j	int
]	O
.	O
y	int
;	O
atx	double
=	O
polygon	array(struct(float,float))
[	O
j	int
+	O
1	int
]	O
.	O
x	int
;	O
aty	double
=	O
polygon	array(struct(float,float))
[	O
j	int
+	O
1	int
]	O
.	O
y	int
;	O
avx	double
=	O
atx	double
-	O
ax	double
;	O
avy	double
=	O
aty	double
-	O
ay	double
;	O
if	O
(	O
fabs	(double)->(double)
(	O
bvy	double
*	O
avx	double
-	O
avy	double
*	O
bvx	double
)	O
<	O
1.e-8	int
)	O
continue	O
;	O
mu	double
=	O
(	O
avx	double
*	O
(	O
ay	double
-	O
by	double
)	O
+	O
avy	double
*	O
(	O
bx	double
-	O
ax	double
)	O
)	O
/	O
(	O
bvy	double
*	O
avx	double
-	O
avy	double
*	O
bvx	double
)	O
;	O
if	O
(	O
mu	double
>=	O
0.	int
&&	O
mu	double
<=	O
1.01	int
)	O
{	O
segx	double
=	O
bx	double
+	O
mu	double
*	O
bvx	double
;	O
segy	double
=	O
by	double
+	O
mu	double
*	O
bvy	double
;	O
}	O
else	O
continue	O
;	O
if	O
(	O
(	O
segy	double
<	O
MIN	O
(	O
(	O
double	O
)	O
polygon	array(struct(float,float))
[	O
j	int
]	O
.	O
y	int
,	O
(	O
double	O
)	O
polygon	array(struct(float,float))
[	O
j	int
+	O
1	int
]	O
.	O
y	int
)	O
-	O
0.0000001	int
)	O
||	O
(	O
segy	double
>	O
MAX	O
(	O
(	O
double	O
)	O
polygon	array(struct(float,float))
[	O
j	int
]	O
.	O
y	int
,	O
(	O
double	O
)	O
polygon	array(struct(float,float))
[	O
j	int
+	O
1	int
]	O
.	O
y	int
)	O
+	O
0.000000001	int
)	O
||	O
(	O
segx	double
<	O
MIN	O
(	O
(	O
double	O
)	O
polygon	array(struct(float,float))
[	O
j	int
]	O
.	O
x	int
,	O
(	O
double	O
)	O
polygon	array(struct(float,float))
[	O
j	int
+	O
1	int
]	O
.	O
x	int
)	O
-	O
0.000000001	int
)	O
||	O
(	O
segx	double
>	O
MAX	O
(	O
(	O
double	O
)	O
polygon	array(struct(float,float))
[	O
j	int
]	O
.	O
x	int
,	O
(	O
double	O
)	O
polygon	array(struct(float,float))
[	O
j	int
+	O
1	int
]	O
.	O
x	int
)	O
)	O
)	O
{	O
}	O
else	O
{	O
for	O
(	O
kk	int
=	O
0	int
;	O
kk	int
<=	O
k	int
;	O
kk	int
++	O
)	O
{	O
if	O
(	O
fabs	(double)->(double)
(	O
segment	array(struct(double,double))
[	O
kk	int
]	O
.	O
x	int
-	O
segx	double
)	O
<	O
1.e-8	int
)	O
goto	O
BARF	O
;	O
}	O
k	int
++	O
;	O
segment	array(struct(double,double))
[	O
k	int
]	O
.	O
x	int
=	O
segx	double
;	O
segment	array(struct(double,double))
[	O
k	int
]	O
.	O
y	int
=	O
segy	double
;	O
if	O
(	O
k	int
>	O
0	int
)	O
{	O
for	O
(	O
jj	int
=	O
0	int
;	O
jj	int
<	O
k	int
;	O
jj	int
++	O
)	O
{	O
if	O
(	O
segment	array(struct(double,double))
[	O
k	int
]	O
.	O
x	int
<	O
segment	array(struct(double,double))
[	O
jj	int
]	O
.	O
x	int
)	O
{	O
tmp	struct(double,double)
=	O
segment	array(struct(double,double))
[	O
jj	int
]	O
;	O
segment	array(struct(double,double))
[	O
jj	int
]	O
=	O
segment	array(struct(double,double))
[	O
k	int
]	O
;	O
segment	array(struct(double,double))
[	O
k	int
]	O
=	O
tmp	struct(double,double)
;	O
}	O
}	O
}	O
}	O
BARF	O
:	O
continue	O
;	O
}	O
if	O
(	O
k	int
>	O
0	int
)	O
{	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<	O
k	int
;	O
j	int
=	O
j	int
+	O
2	int
)	O
{	O
p	struct(float,float)
.	O
x	int
=	O
segment	array(struct(double,double))
[	O
j	int
]	O
.	O
x	int
;	O
p	struct(float,float)
.	O
y	int
=	O
segment	array(struct(double,double))
[	O
j	int
]	O
.	O
y	int
;	O
Pen_action_to_tmpfile	(enum(int,int,int,int,int,int,int,int,int),*(struct(float,float)),int)->(void)
(	O
MOVE_TO	int
,	O
&	O
p	struct(float,float)
,	O
scale_flag	int
)	O
;	O
p	struct(float,float)
.	O
x	int
=	O
segment	array(struct(double,double))
[	O
j	int
+	O
1	int
]	O
.	O
x	int
;	O
p	struct(float,float)
.	O
y	int
=	O
segment	array(struct(double,double))
[	O
j	int
+	O
1	int
]	O
.	O
y	int
;	O
Pen_action_to_tmpfile	(enum(int,int,int,int,int,int,int,int,int),*(struct(float,float)),int)->(void)
(	O
DRAW_TO	int
,	O
&	O
p	struct(float,float)
,	O
scale_flag	int
)	O
;	O
}	O
}	O
else	O
{	O
}	O
}	O
if	O
(	O
filltype	int
!=	O
4	int
)	O
{	O
CurrentLineEnd	enum(int,int,int,int)
=	O
SafeLineEnd	enum(int,int,int,int)
;	O
PlotCmd_to_tmpfile	(enum(int,int,int,int,int,int,int,int,int))->(void)
(	O
DEF_PW	int
)	O
;	O
Pen_Width_to_tmpfile	(int,float)->(void)
(	O
1	int
,	O
SafePenW	float
)	O
;	O
PlotCmd_to_tmpfile	(enum(int,int,int,int,int,int,int,int,int))->(void)
(	O
DEF_LA	int
)	O
;	O
Line_Attr_to_tmpfile	(enum(int,int,int),int)->(void)
(	O
LineAttrEnd	int
,	O
SafeLineEnd	enum(int,int,int,int)
)	O
;	O
return	O
;	O
}	O
FILL_VERT	O
:	O
pxmin	double
=	O
point1	struct(float,float)
.	O
x	int
;	O
pymin	double
=	O
point1	struct(float,float)
.	O
y	int
;	O
pxmax	double
=	O
polyxmax	double
;	O
pymax	double
=	O
polyymax	double
;	O
pydiff	double
=	O
pymax	double
-	O
pymin	double
;	O
if	O
(	O
hatchangle	float
!=	O
0.	int
)	O
{	O
rot_ang	double
=	O
tan	(double)->(double)
(	O
M_PI	int
*	O
hatchangle	float
/	O
180.	int
)	O
;	O
pxmin	double
=	O
pxmin	double
-	O
rot_ang	double
*	O
pydiff	double
;	O
pxmax	double
=	O
pxmax	double
+	O
rot_ang	double
*	O
pydiff	double
;	O
}	O
pymin	double
=	O
pymin	double
-	O
1.	int
;	O
pymax	double
=	O
pymax	double
+	O
1.	int
;	O
PlotCmd_to_tmpfile	(enum(int,int,int,int,int,int,int,int,int))->(void)
(	O
DEF_LA	int
)	O
;	O
Line_Attr_to_tmpfile	(enum(int,int,int),int)->(void)
(	O
LineAttrEnd	int
,	O
LAE_butt	int
)	O
;	O
numlines	int
=	O
(	O
int	O
)	O
fabs	(double)->(double)
(	O
1.	int
+	O
(	O
pxmax	double
-	O
pxmin	double
+	O
penwidth	double
)	O
/	O
penwidth	double
)	O
;	O
pxdiff	double
=	O
0.	int
;	O
if	O
(	O
hatchangle	float
!=	O
0.	int
)	O
pxdiff	double
=	O
tan	(double)->(double)
(	O
M_PI	int
*	O
hatchangle	float
/	O
180.	int
)	O
*	O
(	O
pymax	double
-	O
pymin	double
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<=	O
numlines	int
;	O
++	O
i	int
)	O
{	O
k	int
=	O
-	O
1	int
;	O
scanx1	double
=	O
pxmin	double
+	O
(	O
double	O
)	O
i	int
*	O
penwidth	double
;	O
if	O
(	O
scanx1	double
>=	O
pxmax	double
||	O
scanx1	double
<=	O
pxmin	double
)	O
continue	O
;	O
scanx2	double
=	O
scanx1	double
-	O
pxdiff	double
;	O
bx	double
=	O
scanx1	double
;	O
btx	double
=	O
scanx2	double
;	O
by	double
=	O
pymin	double
;	O
bty	double
=	O
pymax	double
;	O
bvx	double
=	O
btx	double
-	O
bx	double
;	O
bvy	double
=	O
bty	double
-	O
by	double
;	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<=	O
numpoints	int
;	O
j	int
=	O
j	int
+	O
2	int
)	O
{	O
ax	double
=	O
polygon	array(struct(float,float))
[	O
j	int
]	O
.	O
x	int
;	O
ay	double
=	O
polygon	array(struct(float,float))
[	O
j	int
]	O
.	O
y	int
;	O
atx	double
=	O
polygon	array(struct(float,float))
[	O
j	int
+	O
1	int
]	O
.	O
x	int
;	O
aty	double
=	O
polygon	array(struct(float,float))
[	O
j	int
+	O
1	int
]	O
.	O
y	int
;	O
avx	double
=	O
atx	double
-	O
ax	double
;	O
avy	double
=	O
aty	double
-	O
ay	double
;	O
if	O
(	O
fabs	(double)->(double)
(	O
bvy	double
*	O
avx	double
-	O
avy	double
*	O
bvx	double
)	O
<	O
1.e-8	int
)	O
continue	O
;	O
mu	double
=	O
(	O
avx	double
*	O
(	O
ay	double
-	O
by	double
)	O
+	O
avy	double
*	O
(	O
bx	double
-	O
ax	double
)	O
)	O
/	O
(	O
bvy	double
*	O
avx	double
-	O
avy	double
*	O
bvx	double
)	O
;	O
if	O
(	O
mu	double
>=	O
0.	int
&&	O
mu	double
<=	O
1.01	int
)	O
{	O
segx	double
=	O
bx	double
+	O
mu	double
*	O
bvx	double
;	O
segy	double
=	O
by	double
+	O
mu	double
*	O
bvy	double
;	O
}	O
else	O
continue	O
;	O
if	O
(	O
(	O
segy	double
<	O
MIN	O
(	O
polygon	array(struct(float,float))
[	O
j	int
]	O
.	O
y	int
,	O
polygon	array(struct(float,float))
[	O
j	int
+	O
1	int
]	O
.	O
y	int
)	O
-	O
1.	int
)	O
||	O
(	O
segy	double
>	O
MAX	O
(	O
polygon	array(struct(float,float))
[	O
j	int
]	O
.	O
y	int
,	O
polygon	array(struct(float,float))
[	O
j	int
+	O
1	int
]	O
.	O
y	int
)	O
+	O
1.	int
)	O
||	O
(	O
segx	double
<	O
MIN	O
(	O
polygon	array(struct(float,float))
[	O
j	int
]	O
.	O
x	int
,	O
polygon	array(struct(float,float))
[	O
j	int
+	O
1	int
]	O
.	O
x	int
)	O
)	O
||	O
(	O
segx	double
>	O
MAX	O
(	O
polygon	array(struct(float,float))
[	O
j	int
]	O
.	O
x	int
,	O
polygon	array(struct(float,float))
[	O
j	int
+	O
1	int
]	O
.	O
x	int
)	O
)	O
)	O
{	O
}	O
else	O
{	O
for	O
(	O
kk	int
=	O
0	int
;	O
kk	int
<=	O
k	int
;	O
kk	int
++	O
)	O
{	O
if	O
(	O
fabs	(double)->(double)
(	O
segment	array(struct(double,double))
[	O
kk	int
]	O
.	O
y	int
-	O
segy	double
)	O
<	O
1.e-8	int
)	O
goto	O
BARF2	O
;	O
}	O
k	int
++	O
;	O
segment	array(struct(double,double))
[	O
k	int
]	O
.	O
x	int
=	O
segx	double
;	O
segment	array(struct(double,double))
[	O
k	int
]	O
.	O
y	int
=	O
segy	double
;	O
if	O
(	O
k	int
>	O
0	int
)	O
{	O
for	O
(	O
jj	int
=	O
0	int
;	O
jj	int
<	O
k	int
;	O
jj	int
++	O
)	O
{	O
if	O
(	O
segment	array(struct(double,double))
[	O
k	int
]	O
.	O
y	int
<	O
segment	array(struct(double,double))
[	O
jj	int
]	O
.	O
y	int
)	O
{	O
tmp	struct(double,double)
=	O
segment	array(struct(double,double))
[	O
jj	int
]	O
;	O
segment	array(struct(double,double))
[	O
jj	int
]	O
=	O
segment	array(struct(double,double))
[	O
k	int
]	O
;	O
segment	array(struct(double,double))
[	O
k	int
]	O
=	O
tmp	struct(double,double)
;	O
}	O
}	O
}	O
}	O
BARF2	O
:	O
continue	O
;	O
}	O
if	O
(	O
k	int
>	O
0	int
)	O
{	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<	O
k	int
;	O
j	int
=	O
j	int
+	O
2	int
)	O
{	O
p	struct(float,float)
.	O
x	int
=	O
segment	array(struct(double,double))
[	O
j	int
]	O
.	O
x	int
;	O
p	struct(float,float)
.	O
y	int
=	O
segment	array(struct(double,double))
[	O
j	int
]	O
.	O
y	int
;	O
Pen_action_to_tmpfile	(enum(int,int,int,int,int,int,int,int,int),*(struct(float,float)),int)->(void)
(	O
MOVE_TO	int
,	O
&	O
p	struct(float,float)
,	O
scale_flag	int
)	O
;	O
p	struct(float,float)
.	O
x	int
=	O
segment	array(struct(double,double))
[	O
j	int
+	O
1	int
]	O
.	O
x	int
;	O
p	struct(float,float)
.	O
y	int
=	O
segment	array(struct(double,double))
[	O
j	int
+	O
1	int
]	O
.	O
y	int
;	O
Pen_action_to_tmpfile	(enum(int,int,int,int,int,int,int,int,int),*(struct(float,float)),int)->(void)
(	O
DRAW_TO	int
,	O
&	O
p	struct(float,float)
,	O
scale_flag	int
)	O
;	O
}	O
}	O
else	O
{	O
}	O
}	O
CurrentLineEnd	enum(int,int,int,int)
=	O
SafeLineEnd	enum(int,int,int,int)
;	O
PlotCmd_to_tmpfile	(enum(int,int,int,int,int,int,int,int,int))->(void)
(	O
DEF_PW	int
)	O
;	O
Pen_Width_to_tmpfile	(int,float)->(void)
(	O
1	int
,	O
SafePenW	float
)	O
;	O
PlotCmd_to_tmpfile	(enum(int,int,int,int,int,int,int,int,int))->(void)
(	O
DEF_LA	int
)	O
;	O
Line_Attr_to_tmpfile	(enum(int,int,int),int)->(void)
(	O
LineAttrEnd	int
,	O
SafeLineEnd	enum(int,int,int,int)
)	O
;	O
}	O
