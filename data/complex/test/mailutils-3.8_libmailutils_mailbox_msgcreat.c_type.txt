int	O
mu_message_create	(*(*(struct)),*(void))->(int)
(	O
mu_message_t	*(struct)
*	O
pmsg	*(*(struct))
,	O
void	O
*	O
owner	*(void)
)	O
{	O
mu_message_t	*(struct)
msg	*(struct)
;	O
int	O
status	int
;	O
if	O
(	O
pmsg	*(*(struct))
==	O
NULL	O
)	O
return	O
MU_ERR_OUT_PTR_NULL	O
;	O
msg	*(struct)
=	O
calloc	(long,long)->(*(void))
(	O
1	int
,	O
sizeof	O
(	O
*	O
msg	*(struct)
)	O
)	O
;	O
if	O
(	O
msg	*(struct)
==	O
NULL	O
)	O
return	O
ENOMEM	int
;	O
status	int
=	O
mu_monitor_create	(*(*(struct(*(void),*(void),int,int))),int,*(void))->(int)
(	O
&	O
msg	*(struct)
->	O
monitor	*(struct(*(void),*(void),int,int))
,	O
0	int
,	O
msg	*(struct)
)	O
;	O
if	O
(	O
status	int
!=	O
0	int
)	O
{	O
free	(*(void))->(void)
(	O
msg	*(struct)
)	O
;	O
return	O
status	int
;	O
}	O
msg	*(struct)
->	O
owner	*(void)
=	O
owner	*(void)
;	O
msg	*(struct)
->	O
ref_count	int
=	O
1	int
;	O
*	O
pmsg	*(*(struct))
=	O
msg	*(struct)
;	O
return	O
0	int
;	O
}	O
void	O
*	O
mu_message_get_owner	(*(struct))->(*(void))
(	O
mu_message_t	*(struct)
msg	*(struct)
)	O
{	O
return	O
(	O
msg	*(struct)
==	O
NULL	O
)	O
?	O
NULL	O
:	O
msg	*(struct)
->	O
owner	*(void)
;	O
}	O
