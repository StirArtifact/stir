struct	O
tree_print	struct(int,int,*(struct),*(char),long)
{	O
int	O
flags	int
;	O
unsigned	O
level	int
;	O
mu_stream_t	*(struct)
stream	*(struct)
;	O
char	O
*	O
buf	*(void)
;	O
size_t	long
bufsize	long
;	O
}	O
;	O
static	O
void	O
format_level	(*(struct),int)->(void)
(	O
mu_stream_t	*(struct)
stream	*(struct)
,	O
int	O
level	int
)	O
{	O
while	O
(	O
level	int
--	O
)	O
mu_stream_write	(*(struct),*(void),long,*(long))->(int)
(	O
stream	*(struct)
,	O
"  "	*(char)
,	O
2	int
,	O
NULL	O
)	O
;	O
}	O
static	O
void	O
format_string_value	(*(struct(int,int,*(struct),*(char),long)),*(char))->(void)
(	O
struct	O
tree_print	struct(int,int,*(struct),*(char),long)
*	O
tp	*(struct(int,int,*(struct),*(char),long))
,	O
const	O
char	O
*	O
str	*(struct)
)	O
{	O
size_t	long
size	long
;	O
int	O
quote	*(int)
;	O
char	O
*	O
p	*(char)
;	O
size	long
=	O
mu_wordsplit_c_quoted_length	(*(char),int,*(int))->(long)
(	O
str	*(struct)
,	O
1	int
,	O
&	O
quote	*(int)
)	O
;	O
if	O
(	O
quote	*(int)
)	O
size	long
+=	O
2	int
;	O
size	long
++	O
;	O
if	O
(	O
size	long
>	O
tp	*(struct(int,int,*(struct),*(char),long))
->	O
bufsize	long
)	O
{	O
p	*(char)
=	O
mu_realloc	(*(void),long)->(*(void))
(	O
tp	*(struct(int,int,*(struct),*(char),long))
->	O
buf	*(void)
,	O
size	long
)	O
;	O
tp	*(struct(int,int,*(struct),*(char),long))
->	O
bufsize	long
=	O
size	long
;	O
tp	*(struct(int,int,*(struct),*(char),long))
->	O
buf	*(void)
=	O
p	*(char)
;	O
}	O
p	*(char)
=	O
tp	*(struct(int,int,*(struct),*(char),long))
->	O
buf	*(void)
;	O
if	O
(	O
quote	*(int)
)	O
{	O
tp	*(struct(int,int,*(struct),*(char),long))
->	O
buf	*(void)
[	O
0	int
]	O
=	O
'"'	O
;	O
tp	*(struct(int,int,*(struct),*(char),long))
->	O
buf	*(void)
[	O
size	long
-	O
2	int
]	O
=	O
'"'	O
;	O
p	*(char)
++	O
;	O
}	O
tp	*(struct(int,int,*(struct),*(char),long))
->	O
buf	*(void)
[	O
size	long
-	O
1	int
]	O
=	O
0	int
;	O
mu_wordsplit_c_quote_copy	(*(char),*(char),int)->(void)
(	O
p	*(char)
,	O
str	*(struct)
,	O
1	int
)	O
;	O
mu_stream_write	(*(struct),*(void),long,*(long))->(int)
(	O
tp	*(struct(int,int,*(struct),*(char),long))
->	O
stream	*(struct)
,	O
tp	*(struct(int,int,*(struct),*(char),long))
->	O
buf	*(void)
,	O
size	long
-	O
1	int
,	O
NULL	O
)	O
;	O
}	O
static	O
void	O
format_value	(*(struct(int,int,*(struct),*(char),long)),*(struct(int,union(*(struct`),*(char),struct(long,*`)))))->(void)
(	O
struct	O
tree_print	struct(int,int,*(struct),*(char),long)
*	O
tp	*(struct(int,int,*(struct),*(char),long))
,	O
mu_config_value_t	struct
*	O
val	array(int)
)	O
;	O
static	O
void	O
format_list_value	(*(struct(int,int,*(struct),*(char),long)),*(struct(int,union(*(struct`),*(char),struct(long,*`)))))->(void)
(	O
struct	O
tree_print	struct(int,int,*(struct),*(char),long)
*	O
tp	*(struct(int,int,*(struct),*(char),long))
,	O
mu_config_value_t	struct
*	O
val	array(int)
)	O
{	O
int	O
i	int
;	O
mu_iterator_t	*(struct)
itr	*(struct)
;	O
mu_stream_write	(*(struct),*(void),long,*(long))->(int)
(	O
tp	*(struct(int,int,*(struct),*(char),long))
->	O
stream	*(struct)
,	O
"("	*(char)
,	O
1	int
,	O
NULL	O
)	O
;	O
mu_list_get_iterator	(*(struct),*(*(struct)))->(int)
(	O
val	array(int)
->	O
v	*(struct(int))
.	O
list	*(struct)
,	O
&	O
itr	*(struct)
)	O
;	O
for	O
(	O
mu_iterator_first	(*(struct))->(int)
(	O
itr	*(struct)
)	O
,	O
i	int
=	O
0	int
;	O
!	O
mu_iterator_is_done	(*(struct))->(int)
(	O
itr	*(struct)
)	O
;	O
mu_iterator_next	(*(struct))->(int)
(	O
itr	*(struct)
)	O
,	O
i	int
++	O
)	O
{	O
mu_config_value_t	struct
*	O
p	*(char)
;	O
mu_iterator_current	(*(struct),*(*(void)))->(int)
(	O
itr	*(struct)
,	O
(	O
void	O
*	O
*	O
)	O
&	O
p	*(char)
)	O
;	O
if	O
(	O
i	int
)	O
mu_stream_write	(*(struct),*(void),long,*(long))->(int)
(	O
tp	*(struct(int,int,*(struct),*(char),long))
->	O
stream	*(struct)
,	O
", "	*(char)
,	O
2	int
,	O
NULL	O
)	O
;	O
format_value	(*(struct(int,int,*(struct),*(char),long)),*(struct(int,union(*(struct`),*(char),struct(long,*`)))))->(void)
(	O
tp	*(struct(int,int,*(struct),*(char),long))
,	O
p	*(char)
)	O
;	O
}	O
mu_iterator_destroy	(*(*(struct)))->(void)
(	O
&	O
itr	*(struct)
)	O
;	O
mu_stream_write	(*(struct),*(void),long,*(long))->(int)
(	O
tp	*(struct(int,int,*(struct),*(char),long))
->	O
stream	*(struct)
,	O
")"	*(char)
,	O
1	int
,	O
NULL	O
)	O
;	O
}	O
static	O
void	O
format_array_value	(*(struct(int,int,*(struct),*(char),long)),*(struct(int,union(*(struct`),*(char),struct(long,*`)))))->(void)
(	O
struct	O
tree_print	struct(int,int,*(struct),*(char),long)
*	O
tp	*(struct(int,int,*(struct),*(char),long))
,	O
mu_config_value_t	struct
*	O
val	array(int)
)	O
{	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
val	array(int)
->	O
v	*(struct(int))
.	O
arg	*(char)
.	O
c	char
;	O
i	int
++	O
)	O
{	O
if	O
(	O
i	int
)	O
mu_stream_write	(*(struct),*(void),long,*(long))->(int)
(	O
tp	*(struct(int,int,*(struct),*(char),long))
->	O
stream	*(struct)
,	O
" "	*(char)
,	O
1	int
,	O
NULL	O
)	O
;	O
format_value	(*(struct(int,int,*(struct),*(char),long)),*(struct(int,union(*(struct`),*(char),struct(long,*`)))))->(void)
(	O
tp	*(struct(int,int,*(struct),*(char),long))
,	O
&	O
val	array(int)
->	O
v	*(struct(int))
.	O
arg	*(char)
.	O
v	*(struct(int))
[	O
i	int
]	O
)	O
;	O
}	O
}	O
static	O
void	O
format_value	(*(struct(int,int,*(struct),*(char),long)),*(struct(int,union(*(struct`),*(char),struct(long,*`)))))->(void)
(	O
struct	O
tree_print	struct(int,int,*(struct),*(char),long)
*	O
tp	*(struct(int,int,*(struct),*(char),long))
,	O
mu_config_value_t	struct
*	O
val	array(int)
)	O
{	O
switch	O
(	O
val	array(int)
->	O
type	int
)	O
{	O
case	O
MU_CFG_STRING	int
:	O
format_string_value	(*(struct(int,int,*(struct),*(char),long)),*(char))->(void)
(	O
tp	*(struct(int,int,*(struct),*(char),long))
,	O
val	array(int)
->	O
v	*(struct(int))
.	O
string	*(char)
)	O
;	O
break	O
;	O
case	O
MU_CFG_LIST	int
:	O
format_list_value	(*(struct(int,int,*(struct),*(char),long)),*(struct(int,union(*(struct`),*(char),struct(long,*`)))))->(void)
(	O
tp	*(struct(int,int,*(struct),*(char),long))
,	O
val	array(int)
)	O
;	O
break	O
;	O
case	O
MU_CFG_ARRAY	int
:	O
format_array_value	(*(struct(int,int,*(struct),*(char),long)),*(struct(int,union(*(struct`),*(char),struct(long,*`)))))->(void)
(	O
tp	*(struct(int,int,*(struct),*(char),long))
,	O
val	array(int)
)	O
;	O
}	O
}	O
static	O
void	O
format_path	(*(struct(int,int,*(struct),*(char),long)),*(struct(struct(struct(*`,int,int),struct(*`,int,int)),enum(int,int,int),*(char),*(struct(int,union`)),*(struct),*(struct(struct`,enum(int,int,int),*`,*`,*`,*`)))),int)->(void)
(	O
struct	O
tree_print	struct(int,int,*(struct),*(char),long)
*	O
tp	*(struct(int,int,*(struct),*(char),long))
,	O
const	O
mu_cfg_node_t	struct
*	O
node	*(struct(struct(struct(*(char),int,int),struct(*(char),int,int)),enum(int,int,int),*(char),*(struct(int,union(*`,*`,struct`))),*(struct),*(struct(struct(struct`,struct`),enum(int,int,int),*(char),*(struct`),*(struct`),*(struct`)))))
,	O
int	O
delim	int
)	O
{	O
char	O
c	char
;	O
if	O
(	O
node	*(struct(struct(struct(*(char),int,int),struct(*(char),int,int)),enum(int,int,int),*(char),*(struct(int,union(*`,*`,struct`))),*(struct),*(struct(struct(struct`,struct`),enum(int,int,int),*(char),*(struct`),*(struct`),*(struct`)))))
->	O
parent	*(struct(struct(struct(*(char),int,int),struct(*(char),int,int)),enum(int,int,int),*(char),*(struct(int,union(*`,*`,struct`))),*(struct),*(struct(struct(struct`,struct`),enum(int,int,int),*(char),*(struct`),*(struct`),*(struct`)))))
)	O
format_path	(*(struct(int,int,*(struct),*(char),long)),*(struct(struct(struct(*`,int,int),struct(*`,int,int)),enum(int,int,int),*(char),*(struct(int,union`)),*(struct),*(struct(struct`,enum(int,int,int),*`,*`,*`,*`)))),int)->(void)
(	O
tp	*(struct(int,int,*(struct),*(char),long))
,	O
node	*(struct(struct(struct(*(char),int,int),struct(*(char),int,int)),enum(int,int,int),*(char),*(struct(int,union(*`,*`,struct`))),*(struct),*(struct(struct(struct`,struct`),enum(int,int,int),*(char),*(struct`),*(struct`),*(struct`)))))
->	O
parent	*(struct(struct(struct(*(char),int,int),struct(*(char),int,int)),enum(int,int,int),*(char),*(struct(int,union(*`,*`,struct`))),*(struct),*(struct(struct(struct`,struct`),enum(int,int,int),*(char),*(struct`),*(struct`),*(struct`)))))
,	O
MU_CFG_PATH_DELIM	char
)	O
;	O
mu_stream_write	(*(struct),*(void),long,*(long))->(int)
(	O
tp	*(struct(int,int,*(struct),*(char),long))
->	O
stream	*(struct)
,	O
node	*(struct(struct(struct(*(char),int,int),struct(*(char),int,int)),enum(int,int,int),*(char),*(struct(int,union(*`,*`,struct`))),*(struct),*(struct(struct(struct`,struct`),enum(int,int,int),*(char),*(struct`),*(struct`),*(struct`)))))
->	O
tag	*(char)
,	O
strlen	(*(char))->(long)
(	O
node	*(struct(struct(struct(*(char),int,int),struct(*(char),int,int)),enum(int,int,int),*(char),*(struct(int,union(*`,*`,struct`))),*(struct),*(struct(struct(struct`,struct`),enum(int,int,int),*(char),*(struct`),*(struct`),*(struct`)))))
->	O
tag	*(char)
)	O
,	O
NULL	O
)	O
;	O
if	O
(	O
node	*(struct(struct(struct(*(char),int,int),struct(*(char),int,int)),enum(int,int,int),*(char),*(struct(int,union(*`,*`,struct`))),*(struct),*(struct(struct(struct`,struct`),enum(int,int,int),*(char),*(struct`),*(struct`),*(struct`)))))
->	O
type	int
==	O
mu_cfg_node_statement	int
&&	O
node	*(struct(struct(struct(*(char),int,int),struct(*(char),int,int)),enum(int,int,int),*(char),*(struct(int,union(*`,*`,struct`))),*(struct),*(struct(struct(struct`,struct`),enum(int,int,int),*(char),*(struct`),*(struct`),*(struct`)))))
->	O
label	*(struct(int,union(*(struct),*(char),struct(long,*(struct`)))))
)	O
{	O
mu_stream_write	(*(struct),*(void),long,*(long))->(int)
(	O
tp	*(struct(int,int,*(struct),*(char),long))
->	O
stream	*(struct)
,	O
"=\""	*(char)
,	O
2	int
,	O
NULL	O
)	O
;	O
format_value	(*(struct(int,int,*(struct),*(char),long)),*(struct(int,union(*(struct`),*(char),struct(long,*`)))))->(void)
(	O
tp	*(struct(int,int,*(struct),*(char),long))
,	O
node	*(struct(struct(struct(*(char),int,int),struct(*(char),int,int)),enum(int,int,int),*(char),*(struct(int,union(*`,*`,struct`))),*(struct),*(struct(struct(struct`,struct`),enum(int,int,int),*(char),*(struct`),*(struct`),*(struct`)))))
->	O
label	*(struct(int,union(*(struct),*(char),struct(long,*(struct`)))))
)	O
;	O
mu_stream_write	(*(struct),*(void),long,*(long))->(int)
(	O
tp	*(struct(int,int,*(struct),*(char),long))
->	O
stream	*(struct)
,	O
"\""	*(char)
,	O
1	int
,	O
NULL	O
)	O
;	O
}	O
c	char
=	O
delim	int
;	O
mu_stream_write	(*(struct),*(void),long,*(long))->(int)
(	O
tp	*(struct(int,int,*(struct),*(char),long))
->	O
stream	*(struct)
,	O
&	O
c	char
,	O
1	int
,	O
NULL	O
)	O
;	O
}	O
static	O
int	O
format_node	(*(struct(struct(struct(*`,int,int),struct(*`,int,int)),enum(int,int,int),*(char),*(struct(int,union`)),*(struct),*(struct(struct`,enum(int,int,int),*`,*`,*`,*`)))),*(void))->(int)
(	O
const	O
mu_cfg_node_t	struct
*	O
node	*(struct(struct(struct(*(char),int,int),struct(*(char),int,int)),enum(int,int,int),*(char),*(struct(int,union(*`,*`,struct`))),*(struct),*(struct(struct(struct`,struct`),enum(int,int,int),*(char),*(struct`),*(struct`),*(struct`)))))
,	O
void	O
*	O
data	*(void)
)	O
{	O
struct	O
tree_print	struct(int,int,*(struct),*(char),long)
*	O
tp	*(struct(int,int,*(struct),*(char),long))
=	O
data	*(void)
;	O
if	O
(	O
(	O
tp	*(struct(int,int,*(struct),*(char),long))
->	O
flags	int
&	O
MU_CF_FMT_LOCUS	int
)	O
&&	O
node	*(struct(struct(struct(*(char),int,int),struct(*(char),int,int)),enum(int,int,int),*(char),*(struct(int,union(*`,*`,struct`))),*(struct),*(struct(struct(struct`,struct`),enum(int,int,int),*(char),*(struct`),*(struct`),*(struct`)))))
->	O
locus	struct(struct(*(char),int,int),struct(*(char),int,int))
.	O
beg	struct(*(char),int,int)
.	O
mu_file	*(char)
)	O
mu_stream_printf	(*(struct),*(char))->(int)
(	O
tp	*(struct(int,int,*(struct),*(char),long))
->	O
stream	*(struct)
,	O
"# %lu \"%s\"\n"	*(char)
,	O
(	O
unsigned	O
long	O
)	O
node	*(struct(struct(struct(*(char),int,int),struct(*(char),int,int)),enum(int,int,int),*(char),*(struct(int,union(*`,*`,struct`))),*(struct),*(struct(struct(struct`,struct`),enum(int,int,int),*(char),*(struct`),*(struct`),*(struct`)))))
->	O
locus	struct(struct(*(char),int,int),struct(*(char),int,int))
.	O
beg	struct(*(char),int,int)
.	O
mu_line	int
,	O
node	*(struct(struct(struct(*(char),int,int),struct(*(char),int,int)),enum(int,int,int),*(char),*(struct(int,union(*`,*`,struct`))),*(struct),*(struct(struct(struct`,struct`),enum(int,int,int),*(char),*(struct`),*(struct`),*(struct`)))))
->	O
locus	struct(struct(*(char),int,int),struct(*(char),int,int))
.	O
beg	struct(*(char),int,int)
.	O
mu_file	*(char)
)	O
;	O
format_level	(*(struct),int)->(void)
(	O
tp	*(struct(int,int,*(struct),*(char),long))
->	O
stream	*(struct)
,	O
tp	*(struct(int,int,*(struct),*(char),long))
->	O
level	int
)	O
;	O
switch	O
(	O
node	*(struct(struct(struct(*(char),int,int),struct(*(char),int,int)),enum(int,int,int),*(char),*(struct(int,union(*`,*`,struct`))),*(struct),*(struct(struct(struct`,struct`),enum(int,int,int),*(char),*(struct`),*(struct`),*(struct`)))))
->	O
type	int
)	O
{	O
case	O
mu_cfg_node_undefined	int
:	O
mu_stream_printf	(*(struct),*(char))->(int)
(	O
tp	*(struct(int,int,*(struct),*(char),long))
->	O
stream	*(struct)
,	O
"%s"	*(char)
,	O
_	O
(	O
"ERROR: undefined statement"	*(char)
)	O
)	O
;	O
break	O
;	O
case	O
mu_cfg_node_statement	int
:	O
if	O
(	O
tp	*(struct(int,int,*(struct),*(char),long))
->	O
flags	int
&	O
MU_CF_FMT_PARAM_PATH	int
)	O
return	O
MU_CFG_ITER_OK	int
;	O
else	O
{	O
mu_stream_write	(*(struct),*(void),long,*(long))->(int)
(	O
tp	*(struct(int,int,*(struct),*(char),long))
->	O
stream	*(struct)
,	O
node	*(struct(struct(struct(*(char),int,int),struct(*(char),int,int)),enum(int,int,int),*(char),*(struct(int,union(*`,*`,struct`))),*(struct),*(struct(struct(struct`,struct`),enum(int,int,int),*(char),*(struct`),*(struct`),*(struct`)))))
->	O
tag	*(char)
,	O
strlen	(*(char))->(long)
(	O
node	*(struct(struct(struct(*(char),int,int),struct(*(char),int,int)),enum(int,int,int),*(char),*(struct(int,union(*`,*`,struct`))),*(struct),*(struct(struct(struct`,struct`),enum(int,int,int),*(char),*(struct`),*(struct`),*(struct`)))))
->	O
tag	*(char)
)	O
,	O
NULL	O
)	O
;	O
if	O
(	O
node	*(struct(struct(struct(*(char),int,int),struct(*(char),int,int)),enum(int,int,int),*(char),*(struct(int,union(*`,*`,struct`))),*(struct),*(struct(struct(struct`,struct`),enum(int,int,int),*(char),*(struct`),*(struct`),*(struct`)))))
->	O
label	*(struct(int,union(*(struct),*(char),struct(long,*(struct`)))))
)	O
{	O
mu_stream_write	(*(struct),*(void),long,*(long))->(int)
(	O
tp	*(struct(int,int,*(struct),*(char),long))
->	O
stream	*(struct)
,	O
" "	*(char)
,	O
1	int
,	O
NULL	O
)	O
;	O
format_value	(*(struct(int,int,*(struct),*(char),long)),*(struct(int,union(*(struct`),*(char),struct(long,*`)))))->(void)
(	O
tp	*(struct(int,int,*(struct),*(char),long))
,	O
node	*(struct(struct(struct(*(char),int,int),struct(*(char),int,int)),enum(int,int,int),*(char),*(struct(int,union(*`,*`,struct`))),*(struct),*(struct(struct(struct`,struct`),enum(int,int,int),*(char),*(struct`),*(struct`),*(struct`)))))
->	O
label	*(struct(int,union(*(struct),*(char),struct(long,*(struct`)))))
)	O
;	O
}	O
mu_stream_write	(*(struct),*(void),long,*(long))->(int)
(	O
tp	*(struct(int,int,*(struct),*(char),long))
->	O
stream	*(struct)
,	O
" {"	*(char)
,	O
2	int
,	O
NULL	O
)	O
;	O
tp	*(struct(int,int,*(struct),*(char),long))
->	O
level	int
++	O
;	O
}	O
break	O
;	O
case	O
mu_cfg_node_param	int
:	O
if	O
(	O
tp	*(struct(int,int,*(struct),*(char),long))
->	O
flags	int
&	O
MU_CF_FMT_VALUE_ONLY	int
)	O
format_value	(*(struct(int,int,*(struct),*(char),long)),*(struct(int,union(*(struct`),*(char),struct(long,*`)))))->(void)
(	O
tp	*(struct(int,int,*(struct),*(char),long))
,	O
node	*(struct(struct(struct(*(char),int,int),struct(*(char),int,int)),enum(int,int,int),*(char),*(struct(int,union(*`,*`,struct`))),*(struct),*(struct(struct(struct`,struct`),enum(int,int,int),*(char),*(struct`),*(struct`),*(struct`)))))
->	O
label	*(struct(int,union(*(struct),*(char),struct(long,*(struct`)))))
)	O
;	O
else	O
if	O
(	O
tp	*(struct(int,int,*(struct),*(char),long))
->	O
flags	int
&	O
MU_CF_FMT_PARAM_PATH	int
)	O
{	O
format_path	(*(struct(int,int,*(struct),*(char),long)),*(struct(struct(struct(*`,int,int),struct(*`,int,int)),enum(int,int,int),*(char),*(struct(int,union`)),*(struct),*(struct(struct`,enum(int,int,int),*`,*`,*`,*`)))),int)->(void)
(	O
tp	*(struct(int,int,*(struct),*(char),long))
,	O
node	*(struct(struct(struct(*(char),int,int),struct(*(char),int,int)),enum(int,int,int),*(char),*(struct(int,union(*`,*`,struct`))),*(struct),*(struct(struct(struct`,struct`),enum(int,int,int),*(char),*(struct`),*(struct`),*(struct`)))))
,	O
':'	O
)	O
;	O
mu_stream_write	(*(struct),*(void),long,*(long))->(int)
(	O
tp	*(struct(int,int,*(struct),*(char),long))
->	O
stream	*(struct)
,	O
" "	*(char)
,	O
1	int
,	O
NULL	O
)	O
;	O
format_value	(*(struct(int,int,*(struct),*(char),long)),*(struct(int,union(*(struct`),*(char),struct(long,*`)))))->(void)
(	O
tp	*(struct(int,int,*(struct),*(char),long))
,	O
node	*(struct(struct(struct(*(char),int,int),struct(*(char),int,int)),enum(int,int,int),*(char),*(struct(int,union(*`,*`,struct`))),*(struct),*(struct(struct(struct`,struct`),enum(int,int,int),*(char),*(struct`),*(struct`),*(struct`)))))
->	O
label	*(struct(int,union(*(struct),*(char),struct(long,*(struct`)))))
)	O
;	O
}	O
else	O
{	O
mu_stream_write	(*(struct),*(void),long,*(long))->(int)
(	O
tp	*(struct(int,int,*(struct),*(char),long))
->	O
stream	*(struct)
,	O
node	*(struct(struct(struct(*(char),int,int),struct(*(char),int,int)),enum(int,int,int),*(char),*(struct(int,union(*`,*`,struct`))),*(struct),*(struct(struct(struct`,struct`),enum(int,int,int),*(char),*(struct`),*(struct`),*(struct`)))))
->	O
tag	*(char)
,	O
strlen	(*(char))->(long)
(	O
node	*(struct(struct(struct(*(char),int,int),struct(*(char),int,int)),enum(int,int,int),*(char),*(struct(int,union(*`,*`,struct`))),*(struct),*(struct(struct(struct`,struct`),enum(int,int,int),*(char),*(struct`),*(struct`),*(struct`)))))
->	O
tag	*(char)
)	O
,	O
NULL	O
)	O
;	O
if	O
(	O
node	*(struct(struct(struct(*(char),int,int),struct(*(char),int,int)),enum(int,int,int),*(char),*(struct(int,union(*`,*`,struct`))),*(struct),*(struct(struct(struct`,struct`),enum(int,int,int),*(char),*(struct`),*(struct`),*(struct`)))))
->	O
label	*(struct(int,union(*(struct),*(char),struct(long,*(struct`)))))
)	O
{	O
mu_stream_write	(*(struct),*(void),long,*(long))->(int)
(	O
tp	*(struct(int,int,*(struct),*(char),long))
->	O
stream	*(struct)
,	O
" "	*(char)
,	O
1	int
,	O
NULL	O
)	O
;	O
format_value	(*(struct(int,int,*(struct),*(char),long)),*(struct(int,union(*(struct`),*(char),struct(long,*`)))))->(void)
(	O
tp	*(struct(int,int,*(struct),*(char),long))
,	O
node	*(struct(struct(struct(*(char),int,int),struct(*(char),int,int)),enum(int,int,int),*(char),*(struct(int,union(*`,*`,struct`))),*(struct),*(struct(struct(struct`,struct`),enum(int,int,int),*(char),*(struct`),*(struct`),*(struct`)))))
->	O
label	*(struct(int,union(*(struct),*(char),struct(long,*(struct`)))))
)	O
;	O
mu_stream_write	(*(struct),*(void),long,*(long))->(int)
(	O
tp	*(struct(int,int,*(struct),*(char),long))
->	O
stream	*(struct)
,	O
";"	*(char)
,	O
1	int
,	O
NULL	O
)	O
;	O
}	O
}	O
break	O
;	O
}	O
mu_stream_write	(*(struct),*(void),long,*(long))->(int)
(	O
tp	*(struct(int,int,*(struct),*(char),long))
->	O
stream	*(struct)
,	O
"\n"	*(char)
,	O
1	int
,	O
NULL	O
)	O
;	O
return	O
MU_CFG_ITER_OK	int
;	O
}	O
static	O
int	O
format_node_end	(*(struct(struct(struct(*`,int,int),struct(*`,int,int)),enum(int,int,int),*(char),*(struct(int,union`)),*(struct),*(struct(struct`,enum(int,int,int),*`,*`,*`,*`)))),*(void))->(int)
(	O
const	O
mu_cfg_node_t	struct
*	O
node	*(struct(struct(struct(*(char),int,int),struct(*(char),int,int)),enum(int,int,int),*(char),*(struct(int,union(*`,*`,struct`))),*(struct),*(struct(struct(struct`,struct`),enum(int,int,int),*(char),*(struct`),*(struct`),*(struct`)))))
,	O
void	O
*	O
data	*(void)
)	O
{	O
struct	O
tree_print	struct(int,int,*(struct),*(char),long)
*	O
tp	*(struct(int,int,*(struct),*(char),long))
=	O
data	*(void)
;	O
if	O
(	O
!	O
(	O
tp	*(struct(int,int,*(struct),*(char),long))
->	O
flags	int
&	O
MU_CF_FMT_PARAM_PATH	int
)	O
)	O
{	O
tp	*(struct(int,int,*(struct),*(char),long))
->	O
level	int
--	O
;	O
format_level	(*(struct),int)->(void)
(	O
tp	*(struct(int,int,*(struct),*(char),long))
->	O
stream	*(struct)
,	O
tp	*(struct(int,int,*(struct),*(char),long))
->	O
level	int
)	O
;	O
mu_stream_write	(*(struct),*(void),long,*(long))->(int)
(	O
tp	*(struct(int,int,*(struct),*(char),long))
->	O
stream	*(struct)
,	O
"};\n"	*(char)
,	O
3	int
,	O
NULL	O
)	O
;	O
}	O
return	O
MU_CFG_ITER_OK	int
;	O
}	O
void	O
mu_cfg_format_parse_tree	(*(struct),*(struct(*(struct),*(struct))),int)->(void)
(	O
mu_stream_t	*(struct)
stream	*(struct)
,	O
mu_cfg_tree_t	struct
*	O
tree	*(struct(*(struct),*(struct)))
,	O
int	O
flags	int
)	O
{	O
struct	O
mu_cfg_iter_closure	struct(*((*(struct(struct(struct`,struct`),enum(int,int,int),*(char),*(struct`),*(struct`),*(struct`))),*(void))->(int)),*((*(struct(struct(struct`,struct`),enum(int,int,int),*(char),*(struct`),*(struct`),*(struct`))),*(void))->(int)),*(void))
clos	*(void)
;	O
struct	O
tree_print	struct(int,int,*(struct),*(char),long)
t	struct(int,int,*(struct),*(char),long)
;	O
t	struct(int,int,*(struct),*(char),long)
.	O
flags	int
=	O
flags	int
;	O
t	struct(int,int,*(struct),*(char),long)
.	O
level	int
=	O
0	int
;	O
t	struct(int,int,*(struct),*(char),long)
.	O
stream	*(struct)
=	O
stream	*(struct)
;	O
t	struct(int,int,*(struct),*(char),long)
.	O
buf	*(void)
=	O
NULL	O
;	O
t	struct(int,int,*(struct),*(char),long)
.	O
bufsize	long
=	O
0	int
;	O
clos	*(void)
.	O
beg	struct(*(char),int,int)
=	O
format_node	(*(struct(struct(struct(*`,int,int),struct(*`,int,int)),enum(int,int,int),*(char),*(struct(int,union`)),*(struct),*(struct(struct`,enum(int,int,int),*`,*`,*`,*`)))),*(void))->(int)
;	O
clos	*(void)
.	O
end	long
=	O
format_node_end	(*(struct(struct(struct(*`,int,int),struct(*`,int,int)),enum(int,int,int),*(char),*(struct(int,union`)),*(struct),*(struct(struct`,enum(int,int,int),*`,*`,*`,*`)))),*(void))->(int)
;	O
clos	*(void)
.	O
data	*(void)
=	O
&	O
t	struct(int,int,*(struct),*(char),long)
;	O
mu_cfg_preorder	(*(struct),*(struct(*((*`,*`)->(int)),*((*`,*`)->(int)),*(void))))->(int)
(	O
tree	*(struct(*(struct),*(struct)))
->	O
nodes	*(struct)
,	O
&	O
clos	*(void)
)	O
;	O
free	(*(void))->(void)
(	O
t	struct(int,int,*(struct),*(char),long)
.	O
buf	*(void)
)	O
;	O
}	O
void	O
mu_cfg_format_node	(*(struct),*(struct(struct(struct(*`,int,int),struct(*`,int,int)),enum(int,int,int),*(char),*(struct(int,union`)),*(struct),*(struct(struct`,enum(int,int,int),*`,*`,*`,*`)))),int)->(void)
(	O
mu_stream_t	*(struct)
stream	*(struct)
,	O
const	O
mu_cfg_node_t	struct
*	O
node	*(struct(struct(struct(*(char),int,int),struct(*(char),int,int)),enum(int,int,int),*(char),*(struct(int,union(*`,*`,struct`))),*(struct),*(struct(struct(struct`,struct`),enum(int,int,int),*(char),*(struct`),*(struct`),*(struct`)))))
,	O
int	O
flags	int
)	O
{	O
struct	O
tree_print	struct(int,int,*(struct),*(char),long)
t	struct(int,int,*(struct),*(char),long)
;	O
if	O
(	O
node	*(struct(struct(struct(*(char),int,int),struct(*(char),int,int)),enum(int,int,int),*(char),*(struct(int,union(*`,*`,struct`))),*(struct),*(struct(struct(struct`,struct`),enum(int,int,int),*(char),*(struct`),*(struct`),*(struct`)))))
->	O
type	int
==	O
mu_cfg_node_statement	int
)	O
flags	int
&=	O
~	O
MU_CF_FMT_VALUE_ONLY	int
;	O
t	struct(int,int,*(struct),*(char),long)
.	O
flags	int
=	O
flags	int
;	O
t	struct(int,int,*(struct),*(char),long)
.	O
level	int
=	O
0	int
;	O
t	struct(int,int,*(struct),*(char),long)
.	O
stream	*(struct)
=	O
stream	*(struct)
;	O
t	struct(int,int,*(struct),*(char),long)
.	O
buf	*(void)
=	O
NULL	O
;	O
t	struct(int,int,*(struct),*(char),long)
.	O
bufsize	long
=	O
0	int
;	O
format_node	(*(struct(struct(struct(*`,int,int),struct(*`,int,int)),enum(int,int,int),*(char),*(struct(int,union`)),*(struct),*(struct(struct`,enum(int,int,int),*`,*`,*`,*`)))),*(void))->(int)
(	O
node	*(struct(struct(struct(*(char),int,int),struct(*(char),int,int)),enum(int,int,int),*(char),*(struct(int,union(*`,*`,struct`))),*(struct),*(struct(struct(struct`,struct`),enum(int,int,int),*(char),*(struct`),*(struct`),*(struct`)))))
,	O
&	O
t	struct(int,int,*(struct),*(char),long)
)	O
;	O
if	O
(	O
node	*(struct(struct(struct(*(char),int,int),struct(*(char),int,int)),enum(int,int,int),*(char),*(struct(int,union(*`,*`,struct`))),*(struct),*(struct(struct(struct`,struct`),enum(int,int,int),*(char),*(struct`),*(struct`),*(struct`)))))
->	O
type	int
==	O
mu_cfg_node_statement	int
)	O
{	O
struct	O
mu_cfg_iter_closure	struct(*((*(struct(struct(struct`,struct`),enum(int,int,int),*(char),*(struct`),*(struct`),*(struct`))),*(void))->(int)),*((*(struct(struct(struct`,struct`),enum(int,int,int),*(char),*(struct`),*(struct`),*(struct`))),*(void))->(int)),*(void))
clos	*(void)
;	O
clos	*(void)
.	O
beg	struct(*(char),int,int)
=	O
format_node	(*(struct(struct(struct(*`,int,int),struct(*`,int,int)),enum(int,int,int),*(char),*(struct(int,union`)),*(struct),*(struct(struct`,enum(int,int,int),*`,*`,*`,*`)))),*(void))->(int)
;	O
clos	*(void)
.	O
end	long
=	O
format_node_end	(*(struct(struct(struct(*`,int,int),struct(*`,int,int)),enum(int,int,int),*(char),*(struct(int,union`)),*(struct),*(struct(struct`,enum(int,int,int),*`,*`,*`,*`)))),*(void))->(int)
;	O
clos	*(void)
.	O
data	*(void)
=	O
&	O
t	struct(int,int,*(struct),*(char),long)
;	O
mu_cfg_preorder	(*(struct),*(struct(*((*`,*`)->(int)),*((*`,*`)->(int)),*(void))))->(int)
(	O
node	*(struct(struct(struct(*(char),int,int),struct(*(char),int,int)),enum(int,int,int),*(char),*(struct(int,union(*`,*`,struct`))),*(struct),*(struct(struct(struct`,struct`),enum(int,int,int),*(char),*(struct`),*(struct`),*(struct`)))))
->	O
nodes	*(struct)
,	O
&	O
clos	*(void)
)	O
;	O
format_node_end	(*(struct(struct(struct(*`,int,int),struct(*`,int,int)),enum(int,int,int),*(char),*(struct(int,union`)),*(struct),*(struct(struct`,enum(int,int,int),*`,*`,*`,*`)))),*(void))->(int)
(	O
node	*(struct(struct(struct(*(char),int,int),struct(*(char),int,int)),enum(int,int,int),*(char),*(struct(int,union(*`,*`,struct`))),*(struct),*(struct(struct(struct`,struct`),enum(int,int,int),*(char),*(struct`),*(struct`),*(struct`)))))
,	O
&	O
t	struct(int,int,*(struct),*(char),long)
)	O
;	O
}	O
}	O
const	O
char	O
*	O
mu_c_type_string	(int)->(*(char))
(	O
int	O
type	int
)	O
{	O
switch	O
(	O
type	int
)	O
{	O
case	O
mu_c_string	int
:	O
return	O
N_	O
(	O
"string"	*(char)
)	O
;	O
case	O
mu_c_short	int
:	O
case	O
mu_c_ushort	int
:	O
case	O
mu_c_int	int
:	O
case	O
mu_c_uint	int
:	O
case	O
mu_c_long	int
:	O
case	O
mu_c_ulong	int
:	O
case	O
mu_c_size	int
:	O
case	O
mu_c_off	int
:	O
case	O
mu_c_incr	int
:	O
return	O
N_	O
(	O
"number"	*(char)
)	O
;	O
case	O
mu_c_time	int
:	O
return	O
N_	O
(	O
"time"	*(char)
)	O
;	O
case	O
mu_c_bool	int
:	O
return	O
N_	O
(	O
"boolean"	*(char)
)	O
;	O
case	O
mu_c_ipv4	int
:	O
return	O
N_	O
(	O
"ipv4"	*(char)
)	O
;	O
case	O
mu_c_cidr	int
:	O
return	O
N_	O
(	O
"cidr"	*(char)
)	O
;	O
case	O
mu_c_host	int
:	O
return	O
N_	O
(	O
"host"	*(char)
)	O
;	O
case	O
mu_cfg_section	int
:	O
return	O
N_	O
(	O
"section"	*(char)
)	O
;	O
case	O
mu_cfg_callback	int
:	O
return	O
N_	O
(	O
"callback"	*(char)
)	O
;	O
default	O
:	O
break	O
;	O
}	O
return	O
N_	O
(	O
"unknown"	*(char)
)	O
;	O
}	O
void	O
mu_cfg_format_docstring	(*(struct),*(char),int)->(void)
(	O
mu_stream_t	*(struct)
stream	*(struct)
,	O
const	O
char	O
*	O
docstring	*(char)
,	O
int	O
level	int
)	O
{	O
size_t	long
len	int
=	O
strlen	(*(char))->(long)
(	O
docstring	*(char)
)	O
;	O
int	O
width	int
=	O
78	int
-	O
level	int
*	O
2	int
;	O
if	O
(	O
width	int
<	O
0	int
)	O
{	O
width	int
=	O
78	int
;	O
level	int
=	O
0	int
;	O
}	O
while	O
(	O
len	int
)	O
{	O
size_t	long
seglen	long
;	O
const	O
char	O
*	O
p	*(char)
;	O
for	O
(	O
seglen	long
=	O
0	int
,	O
p	*(char)
=	O
docstring	*(char)
;	O
p	*(char)
<	O
docstring	*(char)
+	O
width	int
&&	O
*	O
p	*(char)
;	O
p	*(char)
++	O
)	O
{	O
if	O
(	O
*	O
p	*(char)
==	O
'\n'	O
)	O
{	O
seglen	long
=	O
p	*(char)
-	O
docstring	*(char)
;	O
break	O
;	O
}	O
if	O
(	O
isspace	(int)->(int)
(	O
*	O
p	*(char)
)	O
)	O
seglen	long
=	O
p	*(char)
-	O
docstring	*(char)
;	O
}	O
if	O
(	O
seglen	long
==	O
0	int
||	O
*	O
p	*(char)
==	O
0	int
)	O
seglen	long
=	O
p	*(char)
-	O
docstring	*(char)
;	O
format_level	(*(struct),int)->(void)
(	O
stream	*(struct)
,	O
level	int
)	O
;	O
mu_stream_write	(*(struct),*(void),long,*(long))->(int)
(	O
stream	*(struct)
,	O
"# "	*(char)
,	O
2	int
,	O
NULL	O
)	O
;	O
mu_stream_write	(*(struct),*(void),long,*(long))->(int)
(	O
stream	*(struct)
,	O
docstring	*(char)
,	O
seglen	long
,	O
NULL	O
)	O
;	O
mu_stream_write	(*(struct),*(void),long,*(long))->(int)
(	O
stream	*(struct)
,	O
"\n"	*(char)
,	O
1	int
,	O
NULL	O
)	O
;	O
len	int
-=	O
seglen	long
;	O
docstring	*(char)
+=	O
seglen	long
;	O
if	O
(	O
*	O
docstring	*(char)
==	O
'\n'	O
)	O
{	O
docstring	*(char)
++	O
;	O
len	int
--	O
;	O
}	O
else	O
while	O
(	O
*	O
docstring	*(char)
&&	O
isspace	(int)->(int)
(	O
*	O
docstring	*(char)
)	O
)	O
{	O
docstring	*(char)
++	O
;	O
len	int
--	O
;	O
}	O
}	O
}	O
static	O
void	O
format_param	(*(struct),*(struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char))),int)->(void)
(	O
mu_stream_t	*(struct)
stream	*(struct)
,	O
struct	O
mu_cfg_param	struct(*(char),int,*(void),long,*((*(void),*(struct(int,union(*`,*`,struct`))))->(int)),*(char),*(char))
*	O
param	*(struct)
,	O
int	O
level	int
)	O
{	O
if	O
(	O
param	*(struct)
->	O
docstring	*(char)
)	O
mu_cfg_format_docstring	(*(struct),*(char),int)->(void)
(	O
stream	*(struct)
,	O
gettext	(*(char))->(*(char))
(	O
param	*(struct)
->	O
docstring	*(char)
)	O
,	O
level	int
)	O
;	O
format_level	(*(struct),int)->(void)
(	O
stream	*(struct)
,	O
level	int
)	O
;	O
if	O
(	O
param	*(struct)
->	O
argname	*(char)
&&	O
strchr	(*(char),int)->(*(char))
(	O
param	*(struct)
->	O
argname	*(char)
,	O
':'	O
)	O
)	O
mu_stream_printf	(*(struct),*(char))->(int)
(	O
stream	*(struct)
,	O
"%s <%s>;\n"	*(char)
,	O
param	*(struct)
->	O
ident	*(char)
,	O
gettext	(*(char))->(*(char))
(	O
param	*(struct)
->	O
argname	*(char)
)	O
)	O
;	O
else	O
if	O
(	O
MU_CFG_IS_LIST	O
(	O
param	*(struct)
->	O
type	int
)	O
)	O
mu_stream_printf	(*(struct),*(char))->(int)
(	O
stream	*(struct)
,	O
"%s <%s: list of %s>;\n"	*(char)
,	O
param	*(struct)
->	O
ident	*(char)
,	O
gettext	(*(char))->(*(char))
(	O
param	*(struct)
->	O
argname	*(char)
?	O
param	*(struct)
->	O
argname	*(char)
:	O
N_	O
(	O
"arg"	*(char)
)	O
)	O
,	O
gettext	(*(char))->(*(char))
(	O
mu_c_type_string	(int)->(*(char))
(	O
MU_CFG_TYPE	O
(	O
param	*(struct)
->	O
type	int
)	O
)	O
)	O
)	O
;	O
else	O
mu_stream_printf	(*(struct),*(char))->(int)
(	O
stream	*(struct)
,	O
"%s <%s: %s>;\n"	*(char)
,	O
param	*(struct)
->	O
ident	*(char)
,	O
gettext	(*(char))->(*(char))
(	O
param	*(struct)
->	O
argname	*(char)
?	O
param	*(struct)
->	O
argname	*(char)
:	O
N_	O
(	O
"arg"	*(char)
)	O
)	O
,	O
gettext	(*(char))->(*(char))
(	O
mu_c_type_string	(int)->(*(char))
(	O
param	*(struct)
->	O
type	int
)	O
)	O
)	O
;	O
}	O
static	O
void	O
format_container	(*(struct),*(struct(enum(int,int),*(struct),union(*(char),struct(*`,*`,*`,*`,long,*`,*`,*`),struct(*`,int,*`,long,*`,*`,*`)))),int)->(void)
(	O
mu_stream_t	*(struct)
stream	*(struct)
,	O
struct	O
mu_cfg_cont	struct(enum(int,int),*(struct),union(*(char),struct(*(char),*(char),*((enum(int,int),*(struct`),*(char),*(*`),*(void),*(struct`))->(int)),*(void),long,*(struct),*(char),*(void)),struct(*(char),int,*(void),long,*((*(void),*(struct`))->(int)),*(char),*(char))))
*	O
cont	*(struct(enum(int,int),*(struct),union(*(char),struct(*(char),*(char),*((enum(int,int),*`,*`,*`,*`,*`)->(int)),*(void),long,*(struct`),*(char),*(void)),struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char)))))
,	O
int	O
level	int
)	O
;	O
static	O
int	O
_f_helper	(*(void),*(void))->(int)
(	O
void	O
*	O
item	*(void)
,	O
void	O
*	O
data	*(void)
)	O
{	O
struct	O
tree_print	struct(int,int,*(struct),*(char),long)
*	O
tp	*(struct(int,int,*(struct),*(char),long))
=	O
data	*(void)
;	O
struct	O
mu_cfg_cont	struct(enum(int,int),*(struct),union(*(char),struct(*(char),*(char),*((enum(int,int),*(struct`),*(char),*(*`),*(void),*(struct`))->(int)),*(void),long,*(struct),*(char),*(void)),struct(*(char),int,*(void),long,*((*(void),*(struct`))->(int)),*(char),*(char))))
*	O
cont	*(struct(enum(int,int),*(struct),union(*(char),struct(*(char),*(char),*((enum(int,int),*`,*`,*`,*`,*`)->(int)),*(void),long,*(struct`),*(char),*(void)),struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char)))))
=	O
item	*(void)
;	O
format_container	(*(struct),*(struct(enum(int,int),*(struct),union(*(char),struct(*`,*`,*`,*`,long,*`,*`,*`),struct(*`,int,*`,long,*`,*`,*`)))),int)->(void)
(	O
tp	*(struct(int,int,*(struct),*(char),long))
->	O
stream	*(struct)
,	O
cont	*(struct(enum(int,int),*(struct),union(*(char),struct(*(char),*(char),*((enum(int,int),*`,*`,*`,*`,*`)->(int)),*(void),long,*(struct`),*(char),*(void)),struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char)))))
,	O
tp	*(struct(int,int,*(struct),*(char),long))
->	O
level	int
)	O
;	O
return	O
0	int
;	O
}	O
static	O
void	O
format_section	(*(struct),*(struct(*(char),*(char),*((enum(int,int),*`,*`,*`,*`,*`)->(int)),*(void),long,*(struct),*(char),*(void))),int)->(void)
(	O
mu_stream_t	*(struct)
stream	*(struct)
,	O
struct	O
mu_cfg_section	int
*	O
sect	*(struct(*(char),*(char),*((enum(int,int),*(struct`),*(char),*(*`),*(void),*(struct`))->(int)),*(void),long,*(struct),*(char),*(void)))
,	O
int	O
level	int
)	O
{	O
struct	O
tree_print	struct(int,int,*(struct),*(char),long)
c	char
;	O
if	O
(	O
sect	*(struct(*(char),*(char),*((enum(int,int),*(struct`),*(char),*(*`),*(void),*(struct`))->(int)),*(void),long,*(struct),*(char),*(void)))
->	O
docstring	*(char)
)	O
mu_cfg_format_docstring	(*(struct),*(char),int)->(void)
(	O
stream	*(struct)
,	O
gettext	(*(char))->(*(char))
(	O
sect	*(struct(*(char),*(char),*((enum(int,int),*(struct`),*(char),*(*`),*(void),*(struct`))->(int)),*(void),long,*(struct),*(char),*(void)))
->	O
docstring	*(char)
)	O
,	O
level	int
)	O
;	O
format_level	(*(struct),int)->(void)
(	O
stream	*(struct)
,	O
level	int
)	O
;	O
if	O
(	O
sect	*(struct(*(char),*(char),*((enum(int,int),*(struct`),*(char),*(*`),*(void),*(struct`))->(int)),*(void),long,*(struct),*(char),*(void)))
->	O
ident	*(char)
)	O
{	O
mu_stream_write	(*(struct),*(void),long,*(long))->(int)
(	O
stream	*(struct)
,	O
sect	*(struct(*(char),*(char),*((enum(int,int),*(struct`),*(char),*(*`),*(void),*(struct`))->(int)),*(void),long,*(struct),*(char),*(void)))
->	O
ident	*(char)
,	O
strlen	(*(char))->(long)
(	O
sect	*(struct(*(char),*(char),*((enum(int,int),*(struct`),*(char),*(*`),*(void),*(struct`))->(int)),*(void),long,*(struct),*(char),*(void)))
->	O
ident	*(char)
)	O
,	O
NULL	O
)	O
;	O
if	O
(	O
sect	*(struct(*(char),*(char),*((enum(int,int),*(struct`),*(char),*(*`),*(void),*(struct`))->(int)),*(void),long,*(struct),*(char),*(void)))
->	O
label	*(struct(int,union(*(struct),*(char),struct(long,*(struct`)))))
)	O
{	O
mu_stream_write	(*(struct),*(void),long,*(long))->(int)
(	O
stream	*(struct)
,	O
" "	*(char)
,	O
1	int
,	O
NULL	O
)	O
;	O
mu_stream_write	(*(struct),*(void),long,*(long))->(int)
(	O
stream	*(struct)
,	O
sect	*(struct(*(char),*(char),*((enum(int,int),*(struct`),*(char),*(*`),*(void),*(struct`))->(int)),*(void),long,*(struct),*(char),*(void)))
->	O
label	*(struct(int,union(*(struct),*(char),struct(long,*(struct`)))))
,	O
strlen	(*(char))->(long)
(	O
sect	*(struct(*(char),*(char),*((enum(int,int),*(struct`),*(char),*(*`),*(void),*(struct`))->(int)),*(void),long,*(struct),*(char),*(void)))
->	O
label	*(struct(int,union(*(struct),*(char),struct(long,*(struct`)))))
)	O
,	O
NULL	O
)	O
;	O
}	O
mu_stream_write	(*(struct),*(void),long,*(long))->(int)
(	O
stream	*(struct)
,	O
" {\n"	*(char)
,	O
3	int
,	O
NULL	O
)	O
;	O
c	char
.	O
stream	*(struct)
=	O
stream	*(struct)
;	O
c	char
.	O
level	int
=	O
level	int
+	O
1	int
;	O
mu_list_foreach	(*(struct),*((*(void),*(void))->(int)),*(void))->(int)
(	O
sect	*(struct(*(char),*(char),*((enum(int,int),*(struct`),*(char),*(*`),*(void),*(struct`))->(int)),*(void),long,*(struct),*(char),*(void)))
->	O
children	*(struct)
,	O
_f_helper	(*(void),*(void))->(int)
,	O
&	O
c	char
)	O
;	O
format_level	(*(struct),int)->(void)
(	O
stream	*(struct)
,	O
level	int
)	O
;	O
mu_stream_write	(*(struct),*(void),long,*(long))->(int)
(	O
stream	*(struct)
,	O
"};\n\n"	*(char)
,	O
4	int
,	O
NULL	O
)	O
;	O
}	O
else	O
{	O
c	char
.	O
stream	*(struct)
=	O
stream	*(struct)
;	O
c	char
.	O
level	int
=	O
level	int
;	O
mu_list_foreach	(*(struct),*((*(void),*(void))->(int)),*(void))->(int)
(	O
sect	*(struct(*(char),*(char),*((enum(int,int),*(struct`),*(char),*(*`),*(void),*(struct`))->(int)),*(void),long,*(struct),*(char),*(void)))
->	O
children	*(struct)
,	O
_f_helper	(*(void),*(void))->(int)
,	O
&	O
c	char
)	O
;	O
}	O
}	O
static	O
void	O
format_container	(*(struct),*(struct(enum(int,int),*(struct),union(*(char),struct(*`,*`,*`,*`,long,*`,*`,*`),struct(*`,int,*`,long,*`,*`,*`)))),int)->(void)
(	O
mu_stream_t	*(struct)
stream	*(struct)
,	O
struct	O
mu_cfg_cont	struct(enum(int,int),*(struct),union(*(char),struct(*(char),*(char),*((enum(int,int),*(struct`),*(char),*(*`),*(void),*(struct`))->(int)),*(void),long,*(struct),*(char),*(void)),struct(*(char),int,*(void),long,*((*(void),*(struct`))->(int)),*(char),*(char))))
*	O
cont	*(struct(enum(int,int),*(struct),union(*(char),struct(*(char),*(char),*((enum(int,int),*`,*`,*`,*`,*`)->(int)),*(void),long,*(struct`),*(char),*(void)),struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char)))))
,	O
int	O
level	int
)	O
{	O
switch	O
(	O
cont	*(struct(enum(int,int),*(struct),union(*(char),struct(*(char),*(char),*((enum(int,int),*`,*`,*`,*`,*`)->(int)),*(void),long,*(struct`),*(char),*(void)),struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char)))))
->	O
type	int
)	O
{	O
case	O
mu_cfg_cont_section	int
:	O
format_section	(*(struct),*(struct(*(char),*(char),*((enum(int,int),*`,*`,*`,*`,*`)->(int)),*(void),long,*(struct),*(char),*(void))),int)->(void)
(	O
stream	*(struct)
,	O
&	O
cont	*(struct(enum(int,int),*(struct),union(*(char),struct(*(char),*(char),*((enum(int,int),*`,*`,*`,*`,*`)->(int)),*(void),long,*(struct`),*(char),*(void)),struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char)))))
->	O
v	*(struct(int))
.	O
section	struct(*(char),*(char),*((enum(int,int),*(struct(struct`,enum(int,int,int),*`,*`,*`,*`)),*(char),*(*(void)),*(void),*(struct(*`,*`)))->(int)),*(void),long,*(struct),*(char),*(void))
,	O
level	int
)	O
;	O
break	O
;	O
case	O
mu_cfg_cont_param	int
:	O
format_param	(*(struct),*(struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char))),int)->(void)
(	O
stream	*(struct)
,	O
&	O
cont	*(struct(enum(int,int),*(struct),union(*(char),struct(*(char),*(char),*((enum(int,int),*`,*`,*`,*`,*`)->(int)),*(void),long,*(struct`),*(char),*(void)),struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char)))))
->	O
v	*(struct(int))
.	O
param	*(struct)
,	O
level	int
)	O
;	O
break	O
;	O
}	O
}	O
void	O
mu_cfg_format_container	(*(struct),*(struct(enum(int,int),*(struct),union(*(char),struct(*`,*`,*`,*`,long,*`,*`,*`),struct(*`,int,*`,long,*`,*`,*`)))))->(void)
(	O
mu_stream_t	*(struct)
stream	*(struct)
,	O
struct	O
mu_cfg_cont	struct(enum(int,int),*(struct),union(*(char),struct(*(char),*(char),*((enum(int,int),*(struct`),*(char),*(*`),*(void),*(struct`))->(int)),*(void),long,*(struct),*(char),*(void)),struct(*(char),int,*(void),long,*((*(void),*(struct`))->(int)),*(char),*(char))))
*	O
cont	*(struct(enum(int,int),*(struct),union(*(char),struct(*(char),*(char),*((enum(int,int),*`,*`,*`,*`,*`)->(int)),*(void),long,*(struct`),*(char),*(void)),struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char)))))
)	O
{	O
format_container	(*(struct),*(struct(enum(int,int),*(struct),union(*(char),struct(*`,*`,*`,*`,long,*`,*`,*`),struct(*`,int,*`,long,*`,*`,*`)))),int)->(void)
(	O
stream	*(struct)
,	O
cont	*(struct(enum(int,int),*(struct),union(*(char),struct(*(char),*(char),*((enum(int,int),*`,*`,*`,*`,*`)->(int)),*(void),long,*(struct`),*(char),*(void)),struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char)))))
,	O
0	int
)	O
;	O
}	O
