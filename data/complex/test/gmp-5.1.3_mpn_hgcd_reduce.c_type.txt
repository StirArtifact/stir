static	O
mp_size_t	long
submul	(*(long),long,*(long),long,*(long),long)->(long)
(	O
mp_ptr	*(long)
rp	*(long)
,	O
mp_size_t	long
rn	long
,	O
mp_srcptr	*(long)
ap	*(long)
,	O
mp_size_t	long
an	long
,	O
mp_srcptr	*(long)
bp	*(long)
,	O
mp_size_t	long
bn	long
)	O
{	O
mp_ptr	*(long)
tp	*(long)
;	O
TMP_DECL	O
;	O
ASSERT	O
(	O
bn	long
>	O
0	int
)	O
;	O
ASSERT	O
(	O
an	long
>=	O
bn	long
)	O
;	O
ASSERT	O
(	O
rn	long
>=	O
an	long
)	O
;	O
ASSERT	O
(	O
an	long
+	O
bn	long
<=	O
rn	long
+	O
1	int
)	O
;	O
TMP_MARK	O
;	O
tp	*(long)
=	O
TMP_ALLOC_LIMBS	O
(	O
an	long
+	O
bn	long
)	O
;	O
mpn_mul	O
(	O
tp	*(long)
,	O
ap	*(long)
,	O
an	long
,	O
bp	*(long)
,	O
bn	long
)	O
;	O
if	O
(	O
an	long
+	O
bn	long
>	O
rn	long
)	O
{	O
ASSERT	O
(	O
tp	*(long)
[	O
rn	long
]	O
==	O
0	int
)	O
;	O
bn	long
--	O
;	O
}	O
ASSERT_NOCARRY	O
(	O
mpn_sub	O
(	O
rp	*(long)
,	O
rp	*(long)
,	O
rn	long
,	O
tp	*(long)
,	O
an	long
+	O
bn	long
)	O
)	O
;	O
TMP_FREE	O
;	O
while	O
(	O
rn	long
>	O
an	long
&&	O
(	O
rp	*(long)
[	O
rn	long
-	O
1	int
]	O
==	O
0	int
)	O
)	O
rn	long
--	O
;	O
return	O
rn	long
;	O
}	O
static	O
mp_size_t	long
hgcd_matrix_apply	(*(struct(long,long,array(array(*(long))))),*(long),*(long),long)->(long)
(	O
const	O
struct	O
hgcd_matrix	struct(long,long,array(array(*(long))))
*	O
M	*(struct(long,long,array(array(*(long)))))
,	O
mp_ptr	*(long)
ap	*(long)
,	O
mp_ptr	*(long)
bp	*(long)
,	O
mp_size_t	long
n	long
)	O
{	O
mp_size_t	long
an	long
,	O
bn	long
,	O
un	long
,	O
vn	long
,	O
nn	long
;	O
mp_size_t	long
mn	array(array(long))
[	O
2	int
]	O
[	O
2	int
]	O
;	O
mp_size_t	long
modn	long
;	O
mp_ptr	*(long)
tp	*(long)
,	O
sp	*(long)
,	O
scratch	*(long)
;	O
mp_limb_t	long
cy	long
;	O
unsigned	O
i	long
,	O
j	int
;	O
TMP_DECL	O
;	O
ASSERT	O
(	O
(	O
ap	*(long)
[	O
n	long
-	O
1	int
]	O
|	O
bp	*(long)
[	O
n	long
-	O
1	int
]	O
)	O
>	O
0	int
)	O
;	O
an	long
=	O
n	long
;	O
MPN_NORMALIZE	O
(	O
ap	*(long)
,	O
an	long
)	O
;	O
bn	long
=	O
n	long
;	O
MPN_NORMALIZE	O
(	O
bp	*(long)
,	O
bn	long
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
2	int
;	O
i	long
++	O
)	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<	O
2	int
;	O
j	int
++	O
)	O
{	O
mp_size_t	long
k	int
;	O
k	int
=	O
M	*(struct(long,long,array(array(*(long)))))
->	O
n	long
;	O
MPN_NORMALIZE	O
(	O
M	*(struct(long,long,array(array(*(long)))))
->	O
p	*(char)
[	O
i	long
]	O
[	O
j	int
]	O
,	O
k	int
)	O
;	O
mn	array(array(long))
[	O
i	long
]	O
[	O
j	int
]	O
=	O
k	int
;	O
}	O
ASSERT	O
(	O
mn	array(array(long))
[	O
0	int
]	O
[	O
0	int
]	O
>	O
0	int
)	O
;	O
ASSERT	O
(	O
mn	array(array(long))
[	O
1	int
]	O
[	O
1	int
]	O
>	O
0	int
)	O
;	O
ASSERT	O
(	O
(	O
mn	array(array(long))
[	O
0	int
]	O
[	O
1	int
]	O
|	O
mn	array(array(long))
[	O
1	int
]	O
[	O
0	int
]	O
)	O
>	O
0	int
)	O
;	O
TMP_MARK	O
;	O
if	O
(	O
mn	array(array(long))
[	O
0	int
]	O
[	O
1	int
]	O
==	O
0	int
)	O
{	O
ASSERT	O
(	O
mn	array(array(long))
[	O
0	int
]	O
[	O
0	int
]	O
==	O
1	int
)	O
;	O
ASSERT	O
(	O
M	*(struct(long,long,array(array(*(long)))))
->	O
p	*(char)
[	O
0	int
]	O
[	O
0	int
]	O
[	O
0	int
]	O
==	O
1	int
)	O
;	O
ASSERT	O
(	O
mn	array(array(long))
[	O
1	int
]	O
[	O
1	int
]	O
==	O
1	int
)	O
;	O
ASSERT	O
(	O
M	*(struct(long,long,array(array(*(long)))))
->	O
p	*(char)
[	O
1	int
]	O
[	O
1	int
]	O
[	O
0	int
]	O
==	O
1	int
)	O
;	O
nn	long
=	O
submul	(*(long),long,*(long),long,*(long),long)->(long)
(	O
bp	*(long)
,	O
bn	long
,	O
ap	*(long)
,	O
an	long
,	O
M	*(struct(long,long,array(array(*(long)))))
->	O
p	*(char)
[	O
1	int
]	O
[	O
0	int
]	O
,	O
mn	array(array(long))
[	O
1	int
]	O
[	O
0	int
]	O
)	O
;	O
}	O
else	O
if	O
(	O
mn	array(array(long))
[	O
1	int
]	O
[	O
0	int
]	O
==	O
0	int
)	O
{	O
ASSERT	O
(	O
mn	array(array(long))
[	O
0	int
]	O
[	O
0	int
]	O
==	O
1	int
)	O
;	O
ASSERT	O
(	O
M	*(struct(long,long,array(array(*(long)))))
->	O
p	*(char)
[	O
0	int
]	O
[	O
0	int
]	O
[	O
0	int
]	O
==	O
1	int
)	O
;	O
ASSERT	O
(	O
mn	array(array(long))
[	O
1	int
]	O
[	O
1	int
]	O
==	O
1	int
)	O
;	O
ASSERT	O
(	O
M	*(struct(long,long,array(array(*(long)))))
->	O
p	*(char)
[	O
1	int
]	O
[	O
1	int
]	O
[	O
0	int
]	O
==	O
1	int
)	O
;	O
nn	long
=	O
submul	(*(long),long,*(long),long,*(long),long)->(long)
(	O
ap	*(long)
,	O
an	long
,	O
bp	*(long)
,	O
bn	long
,	O
M	*(struct(long,long,array(array(*(long)))))
->	O
p	*(char)
[	O
0	int
]	O
[	O
1	int
]	O
,	O
mn	array(array(long))
[	O
0	int
]	O
[	O
1	int
]	O
)	O
;	O
}	O
else	O
{	O
un	long
=	O
MIN	O
(	O
an	long
-	O
mn	array(array(long))
[	O
0	int
]	O
[	O
0	int
]	O
,	O
bn	long
-	O
mn	array(array(long))
[	O
1	int
]	O
[	O
0	int
]	O
)	O
+	O
1	int
;	O
vn	long
=	O
MIN	O
(	O
an	long
-	O
mn	array(array(long))
[	O
0	int
]	O
[	O
1	int
]	O
,	O
bn	long
-	O
mn	array(array(long))
[	O
1	int
]	O
[	O
1	int
]	O
)	O
+	O
1	int
;	O
nn	long
=	O
MAX	O
(	O
un	long
,	O
vn	long
)	O
;	O
modn	long
=	O
mpn_mulmod_bnm1_next_size	O
(	O
nn	long
+	O
1	int
)	O
;	O
scratch	*(long)
=	O
TMP_ALLOC_LIMBS	O
(	O
mpn_mulmod_bnm1_itch	(long,long,long)->(long)
(	O
modn	long
,	O
modn	long
,	O
M	*(struct(long,long,array(array(*(long)))))
->	O
n	long
)	O
)	O
;	O
tp	*(long)
=	O
TMP_ALLOC_LIMBS	O
(	O
modn	long
)	O
;	O
sp	*(long)
=	O
TMP_ALLOC_LIMBS	O
(	O
modn	long
)	O
;	O
ASSERT	O
(	O
n	long
<=	O
2	int
*	O
modn	long
)	O
;	O
if	O
(	O
n	long
>	O
modn	long
)	O
{	O
cy	long
=	O
mpn_add	O
(	O
ap	*(long)
,	O
ap	*(long)
,	O
modn	long
,	O
ap	*(long)
+	O
modn	long
,	O
n	long
-	O
modn	long
)	O
;	O
MPN_INCR_U	O
(	O
ap	*(long)
,	O
modn	long
,	O
cy	long
)	O
;	O
cy	long
=	O
mpn_add	O
(	O
bp	*(long)
,	O
bp	*(long)
,	O
modn	long
,	O
bp	*(long)
+	O
modn	long
,	O
n	long
-	O
modn	long
)	O
;	O
MPN_INCR_U	O
(	O
bp	*(long)
,	O
modn	long
,	O
cy	long
)	O
;	O
n	long
=	O
modn	long
;	O
}	O
mpn_mulmod_bnm1	O
(	O
tp	*(long)
,	O
modn	long
,	O
ap	*(long)
,	O
n	long
,	O
M	*(struct(long,long,array(array(*(long)))))
->	O
p	*(char)
[	O
1	int
]	O
[	O
1	int
]	O
,	O
mn	array(array(long))
[	O
1	int
]	O
[	O
1	int
]	O
,	O
scratch	*(long)
)	O
;	O
mpn_mulmod_bnm1	O
(	O
sp	*(long)
,	O
modn	long
,	O
bp	*(long)
,	O
n	long
,	O
M	*(struct(long,long,array(array(*(long)))))
->	O
p	*(char)
[	O
0	int
]	O
[	O
1	int
]	O
,	O
mn	array(array(long))
[	O
0	int
]	O
[	O
1	int
]	O
,	O
scratch	*(long)
)	O
;	O
if	O
(	O
n	long
+	O
mn	array(array(long))
[	O
1	int
]	O
[	O
1	int
]	O
<	O
modn	long
)	O
MPN_ZERO	O
(	O
tp	*(long)
+	O
n	long
+	O
mn	array(array(long))
[	O
1	int
]	O
[	O
1	int
]	O
,	O
modn	long
-	O
n	long
-	O
mn	array(array(long))
[	O
1	int
]	O
[	O
1	int
]	O
)	O
;	O
if	O
(	O
n	long
+	O
mn	array(array(long))
[	O
0	int
]	O
[	O
1	int
]	O
<	O
modn	long
)	O
MPN_ZERO	O
(	O
sp	*(long)
+	O
n	long
+	O
mn	array(array(long))
[	O
0	int
]	O
[	O
1	int
]	O
,	O
modn	long
-	O
n	long
-	O
mn	array(array(long))
[	O
0	int
]	O
[	O
1	int
]	O
)	O
;	O
cy	long
=	O
mpn_sub_n	O
(	O
tp	*(long)
,	O
tp	*(long)
,	O
sp	*(long)
,	O
modn	long
)	O
;	O
MPN_DECR_U	O
(	O
tp	*(long)
,	O
modn	long
,	O
cy	long
)	O
;	O
ASSERT	O
(	O
mpn_zero_p	(*(long),long)->(int)
(	O
tp	*(long)
+	O
nn	long
,	O
modn	long
-	O
nn	long
)	O
)	O
;	O
mpn_mulmod_bnm1	O
(	O
sp	*(long)
,	O
modn	long
,	O
ap	*(long)
,	O
n	long
,	O
M	*(struct(long,long,array(array(*(long)))))
->	O
p	*(char)
[	O
1	int
]	O
[	O
0	int
]	O
,	O
mn	array(array(long))
[	O
1	int
]	O
[	O
0	int
]	O
,	O
scratch	*(long)
)	O
;	O
MPN_COPY	O
(	O
ap	*(long)
,	O
tp	*(long)
,	O
nn	long
)	O
;	O
mpn_mulmod_bnm1	O
(	O
tp	*(long)
,	O
modn	long
,	O
bp	*(long)
,	O
n	long
,	O
M	*(struct(long,long,array(array(*(long)))))
->	O
p	*(char)
[	O
0	int
]	O
[	O
0	int
]	O
,	O
mn	array(array(long))
[	O
0	int
]	O
[	O
0	int
]	O
,	O
scratch	*(long)
)	O
;	O
if	O
(	O
n	long
+	O
mn	array(array(long))
[	O
1	int
]	O
[	O
0	int
]	O
<	O
modn	long
)	O
MPN_ZERO	O
(	O
sp	*(long)
+	O
n	long
+	O
mn	array(array(long))
[	O
1	int
]	O
[	O
0	int
]	O
,	O
modn	long
-	O
n	long
-	O
mn	array(array(long))
[	O
1	int
]	O
[	O
0	int
]	O
)	O
;	O
if	O
(	O
n	long
+	O
mn	array(array(long))
[	O
0	int
]	O
[	O
0	int
]	O
<	O
modn	long
)	O
MPN_ZERO	O
(	O
tp	*(long)
+	O
n	long
+	O
mn	array(array(long))
[	O
0	int
]	O
[	O
0	int
]	O
,	O
modn	long
-	O
n	long
-	O
mn	array(array(long))
[	O
0	int
]	O
[	O
0	int
]	O
)	O
;	O
cy	long
=	O
mpn_sub_n	O
(	O
tp	*(long)
,	O
tp	*(long)
,	O
sp	*(long)
,	O
modn	long
)	O
;	O
MPN_DECR_U	O
(	O
tp	*(long)
,	O
modn	long
,	O
cy	long
)	O
;	O
ASSERT	O
(	O
mpn_zero_p	(*(long),long)->(int)
(	O
tp	*(long)
+	O
nn	long
,	O
modn	long
-	O
nn	long
)	O
)	O
;	O
MPN_COPY	O
(	O
bp	*(long)
,	O
tp	*(long)
,	O
nn	long
)	O
;	O
while	O
(	O
(	O
ap	*(long)
[	O
nn	long
-	O
1	int
]	O
|	O
bp	*(long)
[	O
nn	long
-	O
1	int
]	O
)	O
==	O
0	int
)	O
{	O
nn	long
--	O
;	O
ASSERT	O
(	O
nn	long
>	O
0	int
)	O
;	O
}	O
}	O
TMP_FREE	O
;	O
return	O
nn	long
;	O
}	O
mp_size_t	long
mpn_hgcd_reduce_itch	O
(	O
mp_size_t	long
n	long
,	O
mp_size_t	long
p	*(char)
)	O
{	O
mp_size_t	long
itch	long
;	O
if	O
(	O
BELOW_THRESHOLD	O
(	O
n	long
,	O
HGCD_REDUCE_THRESHOLD	int
)	O
)	O
{	O
itch	long
=	O
mpn_hgcd_itch	O
(	O
n	long
-	O
p	*(char)
)	O
;	O
if	O
(	O
itch	long
<	O
n	long
+	O
p	*(char)
-	O
1	int
)	O
itch	long
=	O
n	long
+	O
p	*(char)
-	O
1	int
;	O
}	O
else	O
{	O
itch	long
=	O
2	int
*	O
(	O
n	long
-	O
p	*(char)
)	O
+	O
mpn_hgcd_itch	O
(	O
n	long
-	O
p	*(char)
)	O
;	O
}	O
return	O
itch	long
;	O
}	O
mp_size_t	long
mpn_hgcd_reduce	O
(	O
struct	O
hgcd_matrix	struct(long,long,array(array(*(long))))
*	O
M	*(struct(long,long,array(array(*(long)))))
,	O
mp_ptr	*(long)
ap	*(long)
,	O
mp_ptr	*(long)
bp	*(long)
,	O
mp_size_t	long
n	long
,	O
mp_size_t	long
p	*(char)
,	O
mp_ptr	*(long)
tp	*(long)
)	O
{	O
mp_size_t	long
nn	long
;	O
if	O
(	O
BELOW_THRESHOLD	O
(	O
n	long
,	O
HGCD_REDUCE_THRESHOLD	int
)	O
)	O
{	O
nn	long
=	O
mpn_hgcd	O
(	O
ap	*(long)
+	O
p	*(char)
,	O
bp	*(long)
+	O
p	*(char)
,	O
n	long
-	O
p	*(char)
,	O
M	*(struct(long,long,array(array(*(long)))))
,	O
tp	*(long)
)	O
;	O
if	O
(	O
nn	long
>	O
0	int
)	O
return	O
mpn_hgcd_matrix_adjust	O
(	O
M	*(struct(long,long,array(array(*(long)))))
,	O
p	*(char)
+	O
nn	long
,	O
ap	*(long)
,	O
bp	*(long)
,	O
p	*(char)
,	O
tp	*(long)
)	O
;	O
}	O
else	O
{	O
MPN_COPY	O
(	O
tp	*(long)
,	O
ap	*(long)
+	O
p	*(char)
,	O
n	long
-	O
p	*(char)
)	O
;	O
MPN_COPY	O
(	O
tp	*(long)
+	O
n	long
-	O
p	*(char)
,	O
bp	*(long)
+	O
p	*(char)
,	O
n	long
-	O
p	*(char)
)	O
;	O
if	O
(	O
mpn_hgcd_appr	O
(	O
tp	*(long)
,	O
tp	*(long)
+	O
n	long
-	O
p	*(char)
,	O
n	long
-	O
p	*(char)
,	O
M	*(struct(long,long,array(array(*(long)))))
,	O
tp	*(long)
+	O
2	int
*	O
(	O
n	long
-	O
p	*(char)
)	O
)	O
)	O
return	O
hgcd_matrix_apply	(*(struct(long,long,array(array(*(long))))),*(long),*(long),long)->(long)
(	O
M	*(struct(long,long,array(array(*(long)))))
,	O
ap	*(long)
,	O
bp	*(long)
,	O
n	long
)	O
;	O
}	O
return	O
0	int
;	O
}	O
