double	O
gsl_cdf_gamma_Pinv	(double,double,double)->(double)
(	O
const	O
double	O
P	double
,	O
const	O
double	O
a	double
,	O
const	O
double	O
b	double
)	O
{	O
double	O
x	double
;	O
if	O
(	O
P	double
==	O
1.0	int
)	O
{	O
return	O
GSL_POSINF	O
;	O
}	O
else	O
if	O
(	O
P	double
==	O
0.0	int
)	O
{	O
return	O
0.0	int
;	O
}	O
if	O
(	O
P	double
<	O
0.05	int
)	O
{	O
double	O
x0	double
=	O
exp	(double)->(double)
(	O
(	O
gsl_sf_lngamma	(double)->(double)
(	O
a	double
)	O
+	O
log	(double)->(double)
(	O
P	double
)	O
)	O
/	O
a	double
)	O
;	O
x	double
=	O
x0	double
;	O
}	O
else	O
if	O
(	O
P	double
>	O
0.95	int
)	O
{	O
double	O
x0	double
=	O
-	O
log1p	(double)->(double)
(	O
-	O
P	double
)	O
+	O
gsl_sf_lngamma	(double)->(double)
(	O
a	double
)	O
;	O
x	double
=	O
x0	double
;	O
}	O
else	O
{	O
double	O
xg	double
=	O
gsl_cdf_ugaussian_Pinv	(double)->(double)
(	O
P	double
)	O
;	O
double	O
x0	double
=	O
(	O
xg	double
<	O
-	O
0.5	int
*	O
sqrt	(double)->(double)
(	O
a	double
)	O
)	O
?	O
a	double
:	O
sqrt	(double)->(double)
(	O
a	double
)	O
*	O
xg	double
+	O
a	double
;	O
x	double
=	O
x0	double
;	O
}	O
{	O
double	O
lambda	double
,	O
dP	double
,	O
phi	double
;	O
unsigned	O
int	O
n	int
=	O
0	int
;	O
start	O
:	O
dP	double
=	O
P	double
-	O
gsl_cdf_gamma_P	(double,double,double)->(double)
(	O
x	double
,	O
a	double
,	O
1.0	int
)	O
;	O
phi	double
=	O
gsl_ran_gamma_pdf	(double,double,double)->(double)
(	O
x	double
,	O
a	double
,	O
1.0	int
)	O
;	O
if	O
(	O
dP	double
==	O
0.0	int
||	O
n	int
++	O
>	O
32	int
)	O
goto	O
end	O
;	O
lambda	double
=	O
dP	double
/	O
GSL_MAX	O
(	O
2	int
*	O
fabs	(double)->(double)
(	O
dP	double
/	O
x	double
)	O
,	O
phi	double
)	O
;	O
{	O
double	O
step0	double
=	O
lambda	double
;	O
double	O
step1	double
=	O
-	O
(	O
(	O
a	double
-	O
1	int
)	O
/	O
x	double
-	O
1	int
)	O
*	O
lambda	double
*	O
lambda	double
/	O
4.0	int
;	O
double	O
step	double
=	O
step0	double
;	O
if	O
(	O
fabs	(double)->(double)
(	O
step1	double
)	O
<	O
0.5	int
*	O
fabs	(double)->(double)
(	O
step0	double
)	O
)	O
step	double
+=	O
step1	double
;	O
if	O
(	O
x	double
+	O
step	double
>	O
0	int
)	O
x	double
+=	O
step	double
;	O
else	O
{	O
x	double
/=	O
2.0	int
;	O
}	O
if	O
(	O
fabs	(double)->(double)
(	O
step0	double
)	O
>	O
1e-10	int
*	O
x	double
||	O
fabs	(double)->(double)
(	O
step0	double
*	O
phi	double
)	O
>	O
1e-10	int
*	O
P	double
)	O
goto	O
start	O
;	O
}	O
end	O
:	O
if	O
(	O
fabs	(double)->(double)
(	O
dP	double
)	O
>	O
GSL_SQRT_DBL_EPSILON	int
*	O
P	double
)	O
{	O
GSL_ERROR_VAL	O
(	O
"inverse failed to converge"	*(char)
,	O
GSL_EFAILED	int
,	O
GSL_NAN	O
)	O
;	O
}	O
return	O
b	double
*	O
x	double
;	O
}	O
}	O
double	O
gsl_cdf_gamma_Qinv	(double,double,double)->(double)
(	O
const	O
double	O
Q	double
,	O
const	O
double	O
a	double
,	O
const	O
double	O
b	double
)	O
{	O
double	O
x	double
;	O
if	O
(	O
Q	double
==	O
1.0	int
)	O
{	O
return	O
0.0	int
;	O
}	O
else	O
if	O
(	O
Q	double
==	O
0.0	int
)	O
{	O
return	O
GSL_POSINF	O
;	O
}	O
if	O
(	O
Q	double
<	O
0.05	int
)	O
{	O
double	O
x0	double
=	O
-	O
log	(double)->(double)
(	O
Q	double
)	O
+	O
gsl_sf_lngamma	(double)->(double)
(	O
a	double
)	O
;	O
x	double
=	O
x0	double
;	O
}	O
else	O
if	O
(	O
Q	double
>	O
0.95	int
)	O
{	O
double	O
x0	double
=	O
exp	(double)->(double)
(	O
(	O
gsl_sf_lngamma	(double)->(double)
(	O
a	double
)	O
+	O
log1p	(double)->(double)
(	O
-	O
Q	double
)	O
)	O
/	O
a	double
)	O
;	O
x	double
=	O
x0	double
;	O
}	O
else	O
{	O
double	O
xg	double
=	O
gsl_cdf_ugaussian_Qinv	(double)->(double)
(	O
Q	double
)	O
;	O
double	O
x0	double
=	O
(	O
xg	double
<	O
-	O
0.5	int
*	O
sqrt	(double)->(double)
(	O
a	double
)	O
)	O
?	O
a	double
:	O
sqrt	(double)->(double)
(	O
a	double
)	O
*	O
xg	double
+	O
a	double
;	O
x	double
=	O
x0	double
;	O
}	O
{	O
double	O
lambda	double
,	O
dQ	double
,	O
phi	double
;	O
unsigned	O
int	O
n	int
=	O
0	int
;	O
start	O
:	O
dQ	double
=	O
Q	double
-	O
gsl_cdf_gamma_Q	(double,double,double)->(double)
(	O
x	double
,	O
a	double
,	O
1.0	int
)	O
;	O
phi	double
=	O
gsl_ran_gamma_pdf	(double,double,double)->(double)
(	O
x	double
,	O
a	double
,	O
1.0	int
)	O
;	O
if	O
(	O
dQ	double
==	O
0.0	int
||	O
n	int
++	O
>	O
32	int
)	O
goto	O
end	O
;	O
lambda	double
=	O
-	O
dQ	double
/	O
GSL_MAX	O
(	O
2	int
*	O
fabs	(double)->(double)
(	O
dQ	double
/	O
x	double
)	O
,	O
phi	double
)	O
;	O
{	O
double	O
step0	double
=	O
lambda	double
;	O
double	O
step1	double
=	O
-	O
(	O
(	O
a	double
-	O
1	int
)	O
/	O
x	double
-	O
1	int
)	O
*	O
lambda	double
*	O
lambda	double
/	O
4.0	int
;	O
double	O
step	double
=	O
step0	double
;	O
if	O
(	O
fabs	(double)->(double)
(	O
step1	double
)	O
<	O
0.5	int
*	O
fabs	(double)->(double)
(	O
step0	double
)	O
)	O
step	double
+=	O
step1	double
;	O
if	O
(	O
x	double
+	O
step	double
>	O
0	int
)	O
x	double
+=	O
step	double
;	O
else	O
{	O
x	double
/=	O
2.0	int
;	O
}	O
if	O
(	O
fabs	(double)->(double)
(	O
step0	double
)	O
>	O
1e-10	int
*	O
x	double
)	O
goto	O
start	O
;	O
}	O
}	O
end	O
:	O
return	O
b	double
*	O
x	double
;	O
}	O
