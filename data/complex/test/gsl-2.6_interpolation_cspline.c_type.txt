typedef	O
struct	O
{	O
double	O
*	O
c	*(float)
;	O
double	O
*	O
g	*(double)
;	O
double	O
*	O
diag	*(struct(long,long,*(double),*(struct(long,*(double))),int))
;	O
double	O
*	O
offdiag	*(struct(long,long,*(double),*(struct(long,*(double))),int))
;	O
}	O
cspline_state_t	struct(*(double),*(double),*(double),*(double))
;	O
static	O
void	O
*	O
cspline_alloc	(long)->(*(void))
(	O
size_t	long
size	long
)	O
{	O
cspline_state_t	struct(*(double),*(double),*(double),*(double))
*	O
state	*(int)
=	O
(	O
cspline_state_t	struct(*(double),*(double),*(double),*(double))
*	O
)	O
malloc	(long)->(*(void))
(	O
sizeof	O
(	O
cspline_state_t	struct(*(double),*(double),*(double),*(double))
)	O
)	O
;	O
if	O
(	O
state	*(int)
==	O
NULL	O
)	O
{	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for state"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	*(int)
->	O
c	*(float)
=	O
(	O
double	O
*	O
)	O
malloc	(long)->(*(void))
(	O
size	long
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
if	O
(	O
state	*(int)
->	O
c	*(float)
==	O
NULL	O
)	O
{	O
free	(*(void))->(void)
(	O
state	*(int)
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for c"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	*(int)
->	O
g	*(double)
=	O
(	O
double	O
*	O
)	O
malloc	(long)->(*(void))
(	O
size	long
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
if	O
(	O
state	*(int)
->	O
g	*(double)
==	O
NULL	O
)	O
{	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
c	*(float)
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for g"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	*(int)
->	O
diag	*(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
(	O
double	O
*	O
)	O
malloc	(long)->(*(void))
(	O
size	long
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
if	O
(	O
state	*(int)
->	O
diag	*(struct(long,long,*(double),*(struct(long,*(double))),int))
==	O
NULL	O
)	O
{	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
g	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
c	*(float)
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for diag"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	*(int)
->	O
offdiag	*(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
(	O
double	O
*	O
)	O
malloc	(long)->(*(void))
(	O
size	long
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
if	O
(	O
state	*(int)
->	O
offdiag	*(struct(long,long,*(double),*(struct(long,*(double))),int))
==	O
NULL	O
)	O
{	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
diag	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
g	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
c	*(float)
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for offdiag"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
return	O
state	*(int)
;	O
}	O
static	O
int	O
cspline_init	(*(void),array(double),array(double),long)->(int)
(	O
void	O
*	O
vstate	*(void)
,	O
const	O
double	O
xa	array(double)
[	O
]	O
,	O
const	O
double	O
ya	array(double)
[	O
]	O
,	O
size_t	long
size	long
)	O
{	O
cspline_state_t	struct(*(double),*(double),*(double),*(double))
*	O
state	*(int)
=	O
(	O
cspline_state_t	struct(*(double),*(double),*(double),*(double))
*	O
)	O
vstate	*(void)
;	O
size_t	long
i	long
;	O
size_t	long
num_points	long
=	O
size	long
;	O
size_t	long
max_index	long
=	O
num_points	long
-	O
1	int
;	O
size_t	long
sys_size	long
=	O
max_index	long
-	O
1	int
;	O
state	*(int)
->	O
c	*(float)
[	O
0	int
]	O
=	O
0.0	int
;	O
state	*(int)
->	O
c	*(float)
[	O
max_index	long
]	O
=	O
0.0	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
sys_size	long
;	O
i	long
++	O
)	O
{	O
const	O
double	O
h_i	double
=	O
xa	array(double)
[	O
i	long
+	O
1	int
]	O
-	O
xa	array(double)
[	O
i	long
]	O
;	O
const	O
double	O
h_ip1	double
=	O
xa	array(double)
[	O
i	long
+	O
2	int
]	O
-	O
xa	array(double)
[	O
i	long
+	O
1	int
]	O
;	O
const	O
double	O
ydiff_i	double
=	O
ya	array(double)
[	O
i	long
+	O
1	int
]	O
-	O
ya	array(double)
[	O
i	long
]	O
;	O
const	O
double	O
ydiff_ip1	double
=	O
ya	array(double)
[	O
i	long
+	O
2	int
]	O
-	O
ya	array(double)
[	O
i	long
+	O
1	int
]	O
;	O
const	O
double	O
g_i	double
=	O
(	O
h_i	double
!=	O
0.0	int
)	O
?	O
1.0	int
/	O
h_i	double
:	O
0.0	int
;	O
const	O
double	O
g_ip1	double
=	O
(	O
h_ip1	double
!=	O
0.0	int
)	O
?	O
1.0	int
/	O
h_ip1	double
:	O
0.0	int
;	O
state	*(int)
->	O
offdiag	*(struct(long,long,*(double),*(struct(long,*(double))),int))
[	O
i	long
]	O
=	O
h_ip1	double
;	O
state	*(int)
->	O
diag	*(struct(long,long,*(double),*(struct(long,*(double))),int))
[	O
i	long
]	O
=	O
2.0	int
*	O
(	O
h_ip1	double
+	O
h_i	double
)	O
;	O
state	*(int)
->	O
g	*(double)
[	O
i	long
]	O
=	O
3.0	int
*	O
(	O
ydiff_ip1	double
*	O
g_ip1	double
-	O
ydiff_i	double
*	O
g_i	double
)	O
;	O
}	O
if	O
(	O
sys_size	long
==	O
1	int
)	O
{	O
state	*(int)
->	O
c	*(float)
[	O
1	int
]	O
=	O
state	*(int)
->	O
g	*(double)
[	O
0	int
]	O
/	O
state	*(int)
->	O
diag	*(struct(long,long,*(double),*(struct(long,*(double))),int))
[	O
0	int
]	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
gsl_vector_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
g_vec	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_vector_view_array	(*(double),long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
state	*(int)
->	O
g	*(double)
,	O
sys_size	long
)	O
;	O
gsl_vector_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
diag_vec	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_vector_view_array	(*(double),long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
state	*(int)
->	O
diag	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
sys_size	long
)	O
;	O
gsl_vector_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
offdiag_vec	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_vector_view_array	(*(double),long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
state	*(int)
->	O
offdiag	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
sys_size	long
-	O
1	int
)	O
;	O
gsl_vector_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
solution_vec	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_vector_view_array	(*(double),long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
(	O
state	*(int)
->	O
c	*(float)
)	O
+	O
1	int
,	O
sys_size	long
)	O
;	O
int	O
status	int
=	O
gsl_linalg_solve_symm_tridiag	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
&	O
diag_vec	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
offdiag_vec	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
g_vec	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
solution_vec	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
return	O
status	int
;	O
}	O
}	O
static	O
int	O
cspline_init_periodic	(*(void),array(double),array(double),long)->(int)
(	O
void	O
*	O
vstate	*(void)
,	O
const	O
double	O
xa	array(double)
[	O
]	O
,	O
const	O
double	O
ya	array(double)
[	O
]	O
,	O
size_t	long
size	long
)	O
{	O
cspline_state_t	struct(*(double),*(double),*(double),*(double))
*	O
state	*(int)
=	O
(	O
cspline_state_t	struct(*(double),*(double),*(double),*(double))
*	O
)	O
vstate	*(void)
;	O
size_t	long
i	long
;	O
size_t	long
num_points	long
=	O
size	long
;	O
size_t	long
max_index	long
=	O
num_points	long
-	O
1	int
;	O
size_t	long
sys_size	long
=	O
max_index	long
;	O
if	O
(	O
sys_size	long
==	O
2	int
)	O
{	O
const	O
double	O
h0	double
=	O
xa	array(double)
[	O
1	int
]	O
-	O
xa	array(double)
[	O
0	int
]	O
;	O
const	O
double	O
h1	double
=	O
xa	array(double)
[	O
2	int
]	O
-	O
xa	array(double)
[	O
1	int
]	O
;	O
const	O
double	O
A	*(float)
=	O
2.0	int
*	O
(	O
h0	double
+	O
h1	double
)	O
;	O
const	O
double	O
B	*(float)
=	O
h0	double
+	O
h1	double
;	O
double	O
g	*(double)
[	O
2	int
]	O
;	O
double	O
det	double
;	O
g	*(double)
[	O
0	int
]	O
=	O
3.0	int
*	O
(	O
(	O
ya	array(double)
[	O
2	int
]	O
-	O
ya	array(double)
[	O
1	int
]	O
)	O
/	O
h1	double
-	O
(	O
ya	array(double)
[	O
1	int
]	O
-	O
ya	array(double)
[	O
0	int
]	O
)	O
/	O
h0	double
)	O
;	O
g	*(double)
[	O
1	int
]	O
=	O
3.0	int
*	O
(	O
(	O
ya	array(double)
[	O
1	int
]	O
-	O
ya	array(double)
[	O
2	int
]	O
)	O
/	O
h0	double
-	O
(	O
ya	array(double)
[	O
2	int
]	O
-	O
ya	array(double)
[	O
1	int
]	O
)	O
/	O
h1	double
)	O
;	O
det	double
=	O
3.0	int
*	O
(	O
h0	double
+	O
h1	double
)	O
*	O
(	O
h0	double
+	O
h1	double
)	O
;	O
state	*(int)
->	O
c	*(float)
[	O
1	int
]	O
=	O
(	O
A	*(float)
*	O
g	*(double)
[	O
0	int
]	O
-	O
B	*(float)
*	O
g	*(double)
[	O
1	int
]	O
)	O
/	O
det	double
;	O
state	*(int)
->	O
c	*(float)
[	O
2	int
]	O
=	O
(	O
-	O
B	*(float)
*	O
g	*(double)
[	O
0	int
]	O
+	O
A	*(float)
*	O
g	*(double)
[	O
1	int
]	O
)	O
/	O
det	double
;	O
state	*(int)
->	O
c	*(float)
[	O
0	int
]	O
=	O
state	*(int)
->	O
c	*(float)
[	O
2	int
]	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
sys_size	long
-	O
1	int
;	O
i	long
++	O
)	O
{	O
const	O
double	O
h_i	double
=	O
xa	array(double)
[	O
i	long
+	O
1	int
]	O
-	O
xa	array(double)
[	O
i	long
]	O
;	O
const	O
double	O
h_ip1	double
=	O
xa	array(double)
[	O
i	long
+	O
2	int
]	O
-	O
xa	array(double)
[	O
i	long
+	O
1	int
]	O
;	O
const	O
double	O
ydiff_i	double
=	O
ya	array(double)
[	O
i	long
+	O
1	int
]	O
-	O
ya	array(double)
[	O
i	long
]	O
;	O
const	O
double	O
ydiff_ip1	double
=	O
ya	array(double)
[	O
i	long
+	O
2	int
]	O
-	O
ya	array(double)
[	O
i	long
+	O
1	int
]	O
;	O
const	O
double	O
g_i	double
=	O
(	O
h_i	double
!=	O
0.0	int
)	O
?	O
1.0	int
/	O
h_i	double
:	O
0.0	int
;	O
const	O
double	O
g_ip1	double
=	O
(	O
h_ip1	double
!=	O
0.0	int
)	O
?	O
1.0	int
/	O
h_ip1	double
:	O
0.0	int
;	O
state	*(int)
->	O
offdiag	*(struct(long,long,*(double),*(struct(long,*(double))),int))
[	O
i	long
]	O
=	O
h_ip1	double
;	O
state	*(int)
->	O
diag	*(struct(long,long,*(double),*(struct(long,*(double))),int))
[	O
i	long
]	O
=	O
2.0	int
*	O
(	O
h_ip1	double
+	O
h_i	double
)	O
;	O
state	*(int)
->	O
g	*(double)
[	O
i	long
]	O
=	O
3.0	int
*	O
(	O
ydiff_ip1	double
*	O
g_ip1	double
-	O
ydiff_i	double
*	O
g_i	double
)	O
;	O
}	O
i	long
=	O
sys_size	long
-	O
1	int
;	O
{	O
const	O
double	O
h_i	double
=	O
xa	array(double)
[	O
i	long
+	O
1	int
]	O
-	O
xa	array(double)
[	O
i	long
]	O
;	O
const	O
double	O
h_ip1	double
=	O
xa	array(double)
[	O
1	int
]	O
-	O
xa	array(double)
[	O
0	int
]	O
;	O
const	O
double	O
ydiff_i	double
=	O
ya	array(double)
[	O
i	long
+	O
1	int
]	O
-	O
ya	array(double)
[	O
i	long
]	O
;	O
const	O
double	O
ydiff_ip1	double
=	O
ya	array(double)
[	O
1	int
]	O
-	O
ya	array(double)
[	O
0	int
]	O
;	O
const	O
double	O
g_i	double
=	O
(	O
h_i	double
!=	O
0.0	int
)	O
?	O
1.0	int
/	O
h_i	double
:	O
0.0	int
;	O
const	O
double	O
g_ip1	double
=	O
(	O
h_ip1	double
!=	O
0.0	int
)	O
?	O
1.0	int
/	O
h_ip1	double
:	O
0.0	int
;	O
state	*(int)
->	O
offdiag	*(struct(long,long,*(double),*(struct(long,*(double))),int))
[	O
i	long
]	O
=	O
h_ip1	double
;	O
state	*(int)
->	O
diag	*(struct(long,long,*(double),*(struct(long,*(double))),int))
[	O
i	long
]	O
=	O
2.0	int
*	O
(	O
h_ip1	double
+	O
h_i	double
)	O
;	O
state	*(int)
->	O
g	*(double)
[	O
i	long
]	O
=	O
3.0	int
*	O
(	O
ydiff_ip1	double
*	O
g_ip1	double
-	O
ydiff_i	double
*	O
g_i	double
)	O
;	O
}	O
{	O
gsl_vector_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
g_vec	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_vector_view_array	(*(double),long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
state	*(int)
->	O
g	*(double)
,	O
sys_size	long
)	O
;	O
gsl_vector_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
diag_vec	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_vector_view_array	(*(double),long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
state	*(int)
->	O
diag	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
sys_size	long
)	O
;	O
gsl_vector_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
offdiag_vec	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_vector_view_array	(*(double),long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
state	*(int)
->	O
offdiag	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
sys_size	long
)	O
;	O
gsl_vector_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
solution_vec	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_vector_view_array	(*(double),long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
(	O
state	*(int)
->	O
c	*(float)
)	O
+	O
1	int
,	O
sys_size	long
)	O
;	O
int	O
status	int
=	O
gsl_linalg_solve_symm_cyc_tridiag	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
&	O
diag_vec	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
offdiag_vec	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
g_vec	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
solution_vec	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
state	*(int)
->	O
c	*(float)
[	O
0	int
]	O
=	O
state	*(int)
->	O
c	*(float)
[	O
max_index	long
]	O
;	O
return	O
status	int
;	O
}	O
}	O
}	O
static	O
void	O
cspline_free	(*(void))->(void)
(	O
void	O
*	O
vstate	*(void)
)	O
{	O
cspline_state_t	struct(*(double),*(double),*(double),*(double))
*	O
state	*(int)
=	O
(	O
cspline_state_t	struct(*(double),*(double),*(double),*(double))
*	O
)	O
vstate	*(void)
;	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
c	*(float)
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
g	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
diag	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
offdiag	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
)	O
;	O
}	O
static	O
inline	O
void	O
coeff_calc	(array(double),double,double,long,*(double),*(double),*(double))->(void)
(	O
const	O
double	O
c_array	array(double)
[	O
]	O
,	O
double	O
dy	double
,	O
double	O
dx	double
,	O
size_t	long
index	long
,	O
double	O
*	O
b	*(struct(long,*(long double)))
,	O
double	O
*	O
c	*(float)
,	O
double	O
*	O
d	*(double)
)	O
{	O
const	O
double	O
c_i	double
=	O
c_array	array(double)
[	O
index	long
]	O
;	O
const	O
double	O
c_ip1	double
=	O
c_array	array(double)
[	O
index	long
+	O
1	int
]	O
;	O
*	O
b	*(struct(long,*(long double)))
=	O
(	O
dy	double
/	O
dx	double
)	O
-	O
dx	double
*	O
(	O
c_ip1	double
+	O
2.0	int
*	O
c_i	double
)	O
/	O
3.0	int
;	O
*	O
c	*(float)
=	O
c_i	double
;	O
*	O
d	*(double)
=	O
(	O
c_ip1	double
-	O
c_i	double
)	O
/	O
(	O
3.0	int
*	O
dx	double
)	O
;	O
}	O
static	O
int	O
cspline_eval	(*(void),array(double),array(double),long,double,*(struct(long,long,long)),*(double))->(int)
(	O
const	O
void	O
*	O
vstate	*(void)
,	O
const	O
double	O
x_array	array(double)
[	O
]	O
,	O
const	O
double	O
y_array	array(double)
[	O
]	O
,	O
size_t	long
size	long
,	O
double	O
x	long double
,	O
gsl_interp_accel	struct(long,long,long)
*	O
a	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
,	O
double	O
*	O
y	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
)	O
{	O
const	O
cspline_state_t	struct(*(double),*(double),*(double),*(double))
*	O
state	*(int)
=	O
(	O
const	O
cspline_state_t	struct(*(double),*(double),*(double),*(double))
*	O
)	O
vstate	*(void)
;	O
double	O
x_lo	double
,	O
x_hi	double
;	O
double	O
dx	double
;	O
size_t	long
index	long
;	O
if	O
(	O
a	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
!=	O
0	int
)	O
{	O
index	long
=	O
gsl_interp_accel_find	(*(struct(long,long,long)),array(double),long,double)->(long)
(	O
a	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
,	O
x_array	array(double)
,	O
size	long
,	O
x	long double
)	O
;	O
}	O
else	O
{	O
index	long
=	O
gsl_interp_bsearch	(array(double),double,long,long)->(long)
(	O
x_array	array(double)
,	O
x	long double
,	O
0	int
,	O
size	long
-	O
1	int
)	O
;	O
}	O
x_hi	double
=	O
x_array	array(double)
[	O
index	long
+	O
1	int
]	O
;	O
x_lo	double
=	O
x_array	array(double)
[	O
index	long
]	O
;	O
dx	double
=	O
x_hi	double
-	O
x_lo	double
;	O
if	O
(	O
dx	double
>	O
0.0	int
)	O
{	O
const	O
double	O
y_lo	double
=	O
y_array	array(double)
[	O
index	long
]	O
;	O
const	O
double	O
y_hi	double
=	O
y_array	array(double)
[	O
index	long
+	O
1	int
]	O
;	O
const	O
double	O
dy	double
=	O
y_hi	double
-	O
y_lo	double
;	O
double	O
delx	double
=	O
x	long double
-	O
x_lo	double
;	O
double	O
b_i	double
,	O
c_i	double
,	O
d_i	double
;	O
coeff_calc	(array(double),double,double,long,*(double),*(double),*(double))->(void)
(	O
state	*(int)
->	O
c	*(float)
,	O
dy	double
,	O
dx	double
,	O
index	long
,	O
&	O
b_i	double
,	O
&	O
c_i	double
,	O
&	O
d_i	double
)	O
;	O
*	O
y	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
=	O
y_lo	double
+	O
delx	double
*	O
(	O
b_i	double
+	O
delx	double
*	O
(	O
c_i	double
+	O
delx	double
*	O
d_i	double
)	O
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
*	O
y	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
=	O
0.0	int
;	O
return	O
GSL_EINVAL	int
;	O
}	O
}	O
static	O
int	O
cspline_eval_deriv	(*(void),array(double),array(double),long,double,*(struct(long,long,long)),*(double))->(int)
(	O
const	O
void	O
*	O
vstate	*(void)
,	O
const	O
double	O
x_array	array(double)
[	O
]	O
,	O
const	O
double	O
y_array	array(double)
[	O
]	O
,	O
size_t	long
size	long
,	O
double	O
x	long double
,	O
gsl_interp_accel	struct(long,long,long)
*	O
a	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
,	O
double	O
*	O
dydx	*(double)
)	O
{	O
const	O
cspline_state_t	struct(*(double),*(double),*(double),*(double))
*	O
state	*(int)
=	O
(	O
const	O
cspline_state_t	struct(*(double),*(double),*(double),*(double))
*	O
)	O
vstate	*(void)
;	O
double	O
x_lo	double
,	O
x_hi	double
;	O
double	O
dx	double
;	O
size_t	long
index	long
;	O
if	O
(	O
a	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
!=	O
0	int
)	O
{	O
index	long
=	O
gsl_interp_accel_find	(*(struct(long,long,long)),array(double),long,double)->(long)
(	O
a	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
,	O
x_array	array(double)
,	O
size	long
,	O
x	long double
)	O
;	O
}	O
else	O
{	O
index	long
=	O
gsl_interp_bsearch	(array(double),double,long,long)->(long)
(	O
x_array	array(double)
,	O
x	long double
,	O
0	int
,	O
size	long
-	O
1	int
)	O
;	O
}	O
x_hi	double
=	O
x_array	array(double)
[	O
index	long
+	O
1	int
]	O
;	O
x_lo	double
=	O
x_array	array(double)
[	O
index	long
]	O
;	O
dx	double
=	O
x_hi	double
-	O
x_lo	double
;	O
if	O
(	O
dx	double
>	O
0.0	int
)	O
{	O
const	O
double	O
y_lo	double
=	O
y_array	array(double)
[	O
index	long
]	O
;	O
const	O
double	O
y_hi	double
=	O
y_array	array(double)
[	O
index	long
+	O
1	int
]	O
;	O
const	O
double	O
dy	double
=	O
y_hi	double
-	O
y_lo	double
;	O
double	O
delx	double
=	O
x	long double
-	O
x_lo	double
;	O
double	O
b_i	double
,	O
c_i	double
,	O
d_i	double
;	O
coeff_calc	(array(double),double,double,long,*(double),*(double),*(double))->(void)
(	O
state	*(int)
->	O
c	*(float)
,	O
dy	double
,	O
dx	double
,	O
index	long
,	O
&	O
b_i	double
,	O
&	O
c_i	double
,	O
&	O
d_i	double
)	O
;	O
*	O
dydx	*(double)
=	O
b_i	double
+	O
delx	double
*	O
(	O
2.0	int
*	O
c_i	double
+	O
3.0	int
*	O
d_i	double
*	O
delx	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
*	O
dydx	*(double)
=	O
0.0	int
;	O
return	O
GSL_EINVAL	int
;	O
}	O
}	O
static	O
int	O
cspline_eval_deriv2	(*(void),array(double),array(double),long,double,*(struct(long,long,long)),*(double))->(int)
(	O
const	O
void	O
*	O
vstate	*(void)
,	O
const	O
double	O
x_array	array(double)
[	O
]	O
,	O
const	O
double	O
y_array	array(double)
[	O
]	O
,	O
size_t	long
size	long
,	O
double	O
x	long double
,	O
gsl_interp_accel	struct(long,long,long)
*	O
a	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
,	O
double	O
*	O
y_pp	*(double)
)	O
{	O
const	O
cspline_state_t	struct(*(double),*(double),*(double),*(double))
*	O
state	*(int)
=	O
(	O
const	O
cspline_state_t	struct(*(double),*(double),*(double),*(double))
*	O
)	O
vstate	*(void)
;	O
double	O
x_lo	double
,	O
x_hi	double
;	O
double	O
dx	double
;	O
size_t	long
index	long
;	O
if	O
(	O
a	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
!=	O
0	int
)	O
{	O
index	long
=	O
gsl_interp_accel_find	(*(struct(long,long,long)),array(double),long,double)->(long)
(	O
a	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
,	O
x_array	array(double)
,	O
size	long
,	O
x	long double
)	O
;	O
}	O
else	O
{	O
index	long
=	O
gsl_interp_bsearch	(array(double),double,long,long)->(long)
(	O
x_array	array(double)
,	O
x	long double
,	O
0	int
,	O
size	long
-	O
1	int
)	O
;	O
}	O
x_hi	double
=	O
x_array	array(double)
[	O
index	long
+	O
1	int
]	O
;	O
x_lo	double
=	O
x_array	array(double)
[	O
index	long
]	O
;	O
dx	double
=	O
x_hi	double
-	O
x_lo	double
;	O
if	O
(	O
dx	double
>	O
0.0	int
)	O
{	O
const	O
double	O
y_lo	double
=	O
y_array	array(double)
[	O
index	long
]	O
;	O
const	O
double	O
y_hi	double
=	O
y_array	array(double)
[	O
index	long
+	O
1	int
]	O
;	O
const	O
double	O
dy	double
=	O
y_hi	double
-	O
y_lo	double
;	O
double	O
delx	double
=	O
x	long double
-	O
x_lo	double
;	O
double	O
b_i	double
,	O
c_i	double
,	O
d_i	double
;	O
coeff_calc	(array(double),double,double,long,*(double),*(double),*(double))->(void)
(	O
state	*(int)
->	O
c	*(float)
,	O
dy	double
,	O
dx	double
,	O
index	long
,	O
&	O
b_i	double
,	O
&	O
c_i	double
,	O
&	O
d_i	double
)	O
;	O
*	O
y_pp	*(double)
=	O
2.0	int
*	O
c_i	double
+	O
6.0	int
*	O
d_i	double
*	O
delx	double
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
*	O
y_pp	*(double)
=	O
0.0	int
;	O
return	O
GSL_EINVAL	int
;	O
}	O
}	O
static	O
int	O
cspline_eval_integ	(*(void),array(double),array(double),long,*(struct(long,long,long)),double,double,*(double))->(int)
(	O
const	O
void	O
*	O
vstate	*(void)
,	O
const	O
double	O
x_array	array(double)
[	O
]	O
,	O
const	O
double	O
y_array	array(double)
[	O
]	O
,	O
size_t	long
size	long
,	O
gsl_interp_accel	struct(long,long,long)
*	O
acc	*(struct(long,long,long))
,	O
double	O
a	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
,	O
double	O
b	*(struct(long,*(long double)))
,	O
double	O
*	O
result	*(float)
)	O
{	O
const	O
cspline_state_t	struct(*(double),*(double),*(double),*(double))
*	O
state	*(int)
=	O
(	O
const	O
cspline_state_t	struct(*(double),*(double),*(double),*(double))
*	O
)	O
vstate	*(void)
;	O
size_t	long
i	long
,	O
index_a	long
,	O
index_b	long
;	O
if	O
(	O
acc	*(struct(long,long,long))
!=	O
0	int
)	O
{	O
index_a	long
=	O
gsl_interp_accel_find	(*(struct(long,long,long)),array(double),long,double)->(long)
(	O
acc	*(struct(long,long,long))
,	O
x_array	array(double)
,	O
size	long
,	O
a	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
)	O
;	O
index_b	long
=	O
gsl_interp_accel_find	(*(struct(long,long,long)),array(double),long,double)->(long)
(	O
acc	*(struct(long,long,long))
,	O
x_array	array(double)
,	O
size	long
,	O
b	*(struct(long,*(long double)))
)	O
;	O
}	O
else	O
{	O
index_a	long
=	O
gsl_interp_bsearch	(array(double),double,long,long)->(long)
(	O
x_array	array(double)
,	O
a	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
,	O
0	int
,	O
size	long
-	O
1	int
)	O
;	O
index_b	long
=	O
gsl_interp_bsearch	(array(double),double,long,long)->(long)
(	O
x_array	array(double)
,	O
b	*(struct(long,*(long double)))
,	O
0	int
,	O
size	long
-	O
1	int
)	O
;	O
}	O
*	O
result	*(float)
=	O
0.0	int
;	O
for	O
(	O
i	long
=	O
index_a	long
;	O
i	long
<=	O
index_b	long
;	O
i	long
++	O
)	O
{	O
const	O
double	O
x_hi	double
=	O
x_array	array(double)
[	O
i	long
+	O
1	int
]	O
;	O
const	O
double	O
x_lo	double
=	O
x_array	array(double)
[	O
i	long
]	O
;	O
const	O
double	O
y_lo	double
=	O
y_array	array(double)
[	O
i	long
]	O
;	O
const	O
double	O
y_hi	double
=	O
y_array	array(double)
[	O
i	long
+	O
1	int
]	O
;	O
const	O
double	O
dx	double
=	O
x_hi	double
-	O
x_lo	double
;	O
const	O
double	O
dy	double
=	O
y_hi	double
-	O
y_lo	double
;	O
if	O
(	O
dx	double
!=	O
0.0	int
)	O
{	O
double	O
b_i	double
,	O
c_i	double
,	O
d_i	double
;	O
coeff_calc	(array(double),double,double,long,*(double),*(double),*(double))->(void)
(	O
state	*(int)
->	O
c	*(float)
,	O
dy	double
,	O
dx	double
,	O
i	long
,	O
&	O
b_i	double
,	O
&	O
c_i	double
,	O
&	O
d_i	double
)	O
;	O
if	O
(	O
i	long
==	O
index_a	long
||	O
i	long
==	O
index_b	long
)	O
{	O
double	O
x1	double
=	O
(	O
i	long
==	O
index_a	long
)	O
?	O
a	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
:	O
x_lo	double
;	O
double	O
x2	double
=	O
(	O
i	long
==	O
index_b	long
)	O
?	O
b	*(struct(long,*(long double)))
:	O
x_hi	double
;	O
*	O
result	*(float)
+=	O
integ_eval	(double,double,double,double,double,double,double)->(double)
(	O
y_lo	double
,	O
b_i	double
,	O
c_i	double
,	O
d_i	double
,	O
x_lo	double
,	O
x1	double
,	O
x2	double
)	O
;	O
}	O
else	O
{	O
*	O
result	*(float)
+=	O
dx	double
*	O
(	O
y_lo	double
+	O
dx	double
*	O
(	O
0.5	int
*	O
b_i	double
+	O
dx	double
*	O
(	O
c_i	double
/	O
3.0	int
+	O
0.25	int
*	O
d_i	double
*	O
dx	double
)	O
)	O
)	O
;	O
}	O
}	O
else	O
{	O
*	O
result	*(float)
=	O
0.0	int
;	O
return	O
GSL_EINVAL	int
;	O
}	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
const	O
gsl_interp_type	struct(*(char),int,*((long)->(*(void))),*((*(void),array(double),array(double),long)->(int)),*((*(void),array(double),array(double),long,double,*(struct(long,long,long)),*(double))->(int)),*((*(void),array(double),array(double),long,double,*(struct(long,long,long)),*(double))->(int)),*((*(void),array(double),array(double),long,double,*(struct(long,long,long)),*(double))->(int)),*((*(void),array(double),array(double),long,*(struct(long,long,long)),double,double,*(double))->(int)),*((*(void))->(void)))
cspline_type	struct(*(char),int,*((long)->(*(void))),*((*(void),array(double),array(double),long)->(int)),*((*(void),array(double),array(double),long,double,*(struct(long,long,long)),*(double))->(int)),*((*(void),array(double),array(double),long,double,*(struct(long,long,long)),*(double))->(int)),*((*(void),array(double),array(double),long,double,*(struct(long,long,long)),*(double))->(int)),*((*(void),array(double),array(double),long,*(struct(long,long,long)),double,double,*(double))->(int)),*((*(void))->(void)))
=	O
{	O
"cspline"	*(char)
,	O
3	int
,	O
&	O
cspline_alloc	(long)->(*(void))
,	O
&	O
cspline_init	(*(void),array(double),array(double),long)->(int)
,	O
&	O
cspline_eval	(*(void),array(double),array(double),long,double,*(struct(long,long,long)),*(double))->(int)
,	O
&	O
cspline_eval_deriv	(*(void),array(double),array(double),long,double,*(struct(long,long,long)),*(double))->(int)
,	O
&	O
cspline_eval_deriv2	(*(void),array(double),array(double),long,double,*(struct(long,long,long)),*(double))->(int)
,	O
&	O
cspline_eval_integ	(*(void),array(double),array(double),long,*(struct(long,long,long)),double,double,*(double))->(int)
,	O
&	O
cspline_free	(*(void))->(void)
}	O
;	O
const	O
gsl_interp_type	struct(*(char),int,*((long)->(*(void))),*((*(void),array(double),array(double),long)->(int)),*((*(void),array(double),array(double),long,double,*(struct(long,long,long)),*(double))->(int)),*((*(void),array(double),array(double),long,double,*(struct(long,long,long)),*(double))->(int)),*((*(void),array(double),array(double),long,double,*(struct(long,long,long)),*(double))->(int)),*((*(void),array(double),array(double),long,*(struct(long,long,long)),double,double,*(double))->(int)),*((*(void))->(void)))
*	O
gsl_interp_cspline	*(struct(*(char),int,*((long)->(*(void))),*((*(void),array(double),array(double),long)->(int)),*((*(void),array(double),array(double),long,double,*(struct`),*(double))->(int)),*((*(void),array(double),array(double),long,double,*(struct`),*(double))->(int)),*((*(void),array(double),array(double),long,double,*(struct`),*(double))->(int)),*((*(void),array(double),array(double),long,*(struct`),double,double,*(double))->(int)),*((*(void))->(void))))
=	O
&	O
cspline_type	struct(*(char),int,*((long)->(*(void))),*((*(void),array(double),array(double),long)->(int)),*((*(void),array(double),array(double),long,double,*(struct(long,long,long)),*(double))->(int)),*((*(void),array(double),array(double),long,double,*(struct(long,long,long)),*(double))->(int)),*((*(void),array(double),array(double),long,double,*(struct(long,long,long)),*(double))->(int)),*((*(void),array(double),array(double),long,*(struct(long,long,long)),double,double,*(double))->(int)),*((*(void))->(void)))
;	O
static	O
const	O
gsl_interp_type	struct(*(char),int,*((long)->(*(void))),*((*(void),array(double),array(double),long)->(int)),*((*(void),array(double),array(double),long,double,*(struct(long,long,long)),*(double))->(int)),*((*(void),array(double),array(double),long,double,*(struct(long,long,long)),*(double))->(int)),*((*(void),array(double),array(double),long,double,*(struct(long,long,long)),*(double))->(int)),*((*(void),array(double),array(double),long,*(struct(long,long,long)),double,double,*(double))->(int)),*((*(void))->(void)))
cspline_periodic_type	struct(*(char),int,*((long)->(*(void))),*((*(void),array(double),array(double),long)->(int)),*((*(void),array(double),array(double),long,double,*(struct(long,long,long)),*(double))->(int)),*((*(void),array(double),array(double),long,double,*(struct(long,long,long)),*(double))->(int)),*((*(void),array(double),array(double),long,double,*(struct(long,long,long)),*(double))->(int)),*((*(void),array(double),array(double),long,*(struct(long,long,long)),double,double,*(double))->(int)),*((*(void))->(void)))
=	O
{	O
"cspline-periodic"	*(char)
,	O
2	int
,	O
&	O
cspline_alloc	(long)->(*(void))
,	O
&	O
cspline_init_periodic	(*(void),array(double),array(double),long)->(int)
,	O
&	O
cspline_eval	(*(void),array(double),array(double),long,double,*(struct(long,long,long)),*(double))->(int)
,	O
&	O
cspline_eval_deriv	(*(void),array(double),array(double),long,double,*(struct(long,long,long)),*(double))->(int)
,	O
&	O
cspline_eval_deriv2	(*(void),array(double),array(double),long,double,*(struct(long,long,long)),*(double))->(int)
,	O
&	O
cspline_eval_integ	(*(void),array(double),array(double),long,*(struct(long,long,long)),double,double,*(double))->(int)
,	O
&	O
cspline_free	(*(void))->(void)
}	O
;	O
const	O
gsl_interp_type	struct(*(char),int,*((long)->(*(void))),*((*(void),array(double),array(double),long)->(int)),*((*(void),array(double),array(double),long,double,*(struct(long,long,long)),*(double))->(int)),*((*(void),array(double),array(double),long,double,*(struct(long,long,long)),*(double))->(int)),*((*(void),array(double),array(double),long,double,*(struct(long,long,long)),*(double))->(int)),*((*(void),array(double),array(double),long,*(struct(long,long,long)),double,double,*(double))->(int)),*((*(void))->(void)))
*	O
gsl_interp_cspline_periodic	*(struct(*(char),int,*((long)->(*(void))),*((*(void),array(double),array(double),long)->(int)),*((*(void),array(double),array(double),long,double,*(struct`),*(double))->(int)),*((*(void),array(double),array(double),long,double,*(struct`),*(double))->(int)),*((*(void),array(double),array(double),long,double,*(struct`),*(double))->(int)),*((*(void),array(double),array(double),long,*(struct`),double,double,*(double))->(int)),*((*(void))->(void))))
=	O
&	O
cspline_periodic_type	struct(*(char),int,*((long)->(*(void))),*((*(void),array(double),array(double),long)->(int)),*((*(void),array(double),array(double),long,double,*(struct(long,long,long)),*(double))->(int)),*((*(void),array(double),array(double),long,double,*(struct(long,long,long)),*(double))->(int)),*((*(void),array(double),array(double),long,double,*(struct(long,long,long)),*(double))->(int)),*((*(void),array(double),array(double),long,*(struct(long,long,long)),double,double,*(double))->(int)),*((*(void))->(void)))
;	O
