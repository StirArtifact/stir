void	O
mpf_add	O
(	O
mpf_ptr	*(struct(int,int,long,*(long)))
r	*(struct(int,int,long,*(long)))
,	O
mpf_srcptr	*(struct(int,int,long,*(long)))
u	array(array(long))
,	O
mpf_srcptr	*(struct(int,int,long,*(long)))
v	*(struct(int,int,long,*(long)))
)	O
{	O
mp_srcptr	*(long)
up	*(long)
,	O
vp	*(long)
;	O
mp_ptr	*(long)
rp	*(long)
,	O
tp	*(long)
;	O
mp_size_t	long
usize	*(long)
,	O
vsize	long
,	O
rsize	long
;	O
mp_size_t	long
prec	int
;	O
mp_exp_t	long
uexp	long
;	O
mp_size_t	long
ediff	long
;	O
mp_limb_t	long
cy	long
;	O
int	O
negate	int
;	O
TMP_DECL	O
;	O
usize	*(long)
=	O
u	array(array(long))
->	O
_mp_size	int
;	O
vsize	long
=	O
v	*(struct(int,int,long,*(long)))
->	O
_mp_size	int
;	O
if	O
(	O
usize	*(long)
==	O
0	int
)	O
{	O
set_r_v_maybe	O
:	O
if	O
(	O
r	*(struct(int,int,long,*(long)))
!=	O
v	*(struct(int,int,long,*(long)))
)	O
mpf_set	O
(	O
r	*(struct(int,int,long,*(long)))
,	O
v	*(struct(int,int,long,*(long)))
)	O
;	O
return	O
;	O
}	O
if	O
(	O
vsize	long
==	O
0	int
)	O
{	O
v	*(struct(int,int,long,*(long)))
=	O
u	array(array(long))
;	O
goto	O
set_r_v_maybe	O
;	O
}	O
if	O
(	O
(	O
usize	*(long)
^	O
vsize	long
)	O
<	O
0	int
)	O
{	O
__mpf_struct	struct(int,int,long,*(long))
v_negated	struct(int,int,long,*(long))
;	O
v_negated	struct(int,int,long,*(long))
.	O
_mp_size	int
=	O
-	O
vsize	long
;	O
v_negated	struct(int,int,long,*(long))
.	O
_mp_exp	long
=	O
v	*(struct(int,int,long,*(long)))
->	O
_mp_exp	long
;	O
v_negated	struct(int,int,long,*(long))
.	O
_mp_d	*(long)
=	O
v	*(struct(int,int,long,*(long)))
->	O
_mp_d	*(long)
;	O
mpf_sub	O
(	O
r	*(struct(int,int,long,*(long)))
,	O
u	array(array(long))
,	O
&	O
v_negated	struct(int,int,long,*(long))
)	O
;	O
return	O
;	O
}	O
TMP_MARK	O
;	O
negate	int
=	O
usize	*(long)
<	O
0	int
;	O
if	O
(	O
u	array(array(long))
->	O
_mp_exp	long
<	O
v	*(struct(int,int,long,*(long)))
->	O
_mp_exp	long
)	O
{	O
mpf_srcptr	*(struct(int,int,long,*(long)))
t	*(struct(int,int,long,*(long)))
;	O
t	*(struct(int,int,long,*(long)))
=	O
u	array(array(long))
;	O
u	array(array(long))
=	O
v	*(struct(int,int,long,*(long)))
;	O
v	*(struct(int,int,long,*(long)))
=	O
t	*(struct(int,int,long,*(long)))
;	O
usize	*(long)
=	O
u	array(array(long))
->	O
_mp_size	int
;	O
vsize	long
=	O
v	*(struct(int,int,long,*(long)))
->	O
_mp_size	int
;	O
}	O
usize	*(long)
=	O
ABS	O
(	O
usize	*(long)
)	O
;	O
vsize	long
=	O
ABS	O
(	O
vsize	long
)	O
;	O
up	*(long)
=	O
u	array(array(long))
->	O
_mp_d	*(long)
;	O
vp	*(long)
=	O
v	*(struct(int,int,long,*(long)))
->	O
_mp_d	*(long)
;	O
rp	*(long)
=	O
r	*(struct(int,int,long,*(long)))
->	O
_mp_d	*(long)
;	O
prec	int
=	O
r	*(struct(int,int,long,*(long)))
->	O
_mp_prec	int
;	O
uexp	long
=	O
u	array(array(long))
->	O
_mp_exp	long
;	O
ediff	long
=	O
u	array(array(long))
->	O
_mp_exp	long
-	O
v	*(struct(int,int,long,*(long)))
->	O
_mp_exp	long
;	O
if	O
(	O
usize	*(long)
>	O
prec	int
)	O
{	O
up	*(long)
+=	O
usize	*(long)
-	O
prec	int
;	O
usize	*(long)
=	O
prec	int
;	O
}	O
if	O
(	O
vsize	long
+	O
ediff	long
>	O
prec	int
)	O
{	O
vp	*(long)
+=	O
vsize	long
+	O
ediff	long
-	O
prec	int
;	O
vsize	long
=	O
prec	int
-	O
ediff	long
;	O
}	O
tp	*(long)
=	O
TMP_ALLOC_LIMBS	O
(	O
prec	int
)	O
;	O
if	O
(	O
ediff	long
>=	O
prec	int
)	O
{	O
if	O
(	O
rp	*(long)
!=	O
up	*(long)
)	O
MPN_COPY_INCR	O
(	O
rp	*(long)
,	O
up	*(long)
,	O
usize	*(long)
)	O
;	O
rsize	long
=	O
usize	*(long)
;	O
}	O
else	O
{	O
if	O
(	O
usize	*(long)
>	O
ediff	long
)	O
{	O
if	O
(	O
vsize	long
+	O
ediff	long
<=	O
usize	*(long)
)	O
{	O
mp_size_t	long
size	long
;	O
size	long
=	O
usize	*(long)
-	O
ediff	long
-	O
vsize	long
;	O
MPN_COPY	O
(	O
tp	*(long)
,	O
up	*(long)
,	O
size	long
)	O
;	O
cy	long
=	O
mpn_add	O
(	O
tp	*(long)
+	O
size	long
,	O
up	*(long)
+	O
size	long
,	O
usize	*(long)
-	O
size	long
,	O
vp	*(long)
,	O
vsize	long
)	O
;	O
rsize	long
=	O
usize	*(long)
;	O
}	O
else	O
{	O
mp_size_t	long
size	long
;	O
size	long
=	O
vsize	long
+	O
ediff	long
-	O
usize	*(long)
;	O
MPN_COPY	O
(	O
tp	*(long)
,	O
vp	*(long)
,	O
size	long
)	O
;	O
cy	long
=	O
mpn_add	O
(	O
tp	*(long)
+	O
size	long
,	O
up	*(long)
,	O
usize	*(long)
,	O
vp	*(long)
+	O
size	long
,	O
usize	*(long)
-	O
ediff	long
)	O
;	O
rsize	long
=	O
vsize	long
+	O
ediff	long
;	O
}	O
}	O
else	O
{	O
mp_size_t	long
size	long
;	O
size	long
=	O
vsize	long
+	O
ediff	long
-	O
usize	*(long)
;	O
MPN_COPY	O
(	O
tp	*(long)
,	O
vp	*(long)
,	O
vsize	long
)	O
;	O
MPN_ZERO	O
(	O
tp	*(long)
+	O
vsize	long
,	O
ediff	long
-	O
usize	*(long)
)	O
;	O
MPN_COPY	O
(	O
tp	*(long)
+	O
size	long
,	O
up	*(long)
,	O
usize	*(long)
)	O
;	O
cy	long
=	O
0	int
;	O
rsize	long
=	O
size	long
+	O
usize	*(long)
;	O
}	O
MPN_COPY	O
(	O
rp	*(long)
,	O
tp	*(long)
,	O
rsize	long
)	O
;	O
rp	*(long)
[	O
rsize	long
]	O
=	O
cy	long
;	O
rsize	long
+=	O
cy	long
;	O
uexp	long
+=	O
cy	long
;	O
}	O
r	*(struct(int,int,long,*(long)))
->	O
_mp_size	int
=	O
negate	int
?	O
-	O
rsize	long
:	O
rsize	long
;	O
r	*(struct(int,int,long,*(long)))
->	O
_mp_exp	long
=	O
uexp	long
;	O
TMP_FREE	O
;	O
}	O
