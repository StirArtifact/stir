int	O
ctl_transact	(struct(int),struct(char,char,char,char,int,struct(short,array(char)),struct(short,array(char)),int,array(char),array(char),array(char)),int,*(struct(char,char,char,char,int,struct(short,array(char)))))->(int)
(	O
struct	O
in_addr	struct(int)
target	struct(int)
,	O
CTL_MSG	struct(char,char,char,char,int,struct(short,array(char)),struct(short,array(char)),int,array(char),array(char),array(char))
msg	struct(char,char,char,char,int,struct(short,array(char)),struct(short,array(char)),int,array(char),array(char),array(char))
,	O
int	O
type	char
,	O
CTL_RESPONSE	struct(char,char,char,char,int,struct(short,array(char)))
*	O
rp	*(struct(char,char,char,char,int,struct(short,array(char))))
)	O
{	O
int	O
nready	int
,	O
cc	int
;	O
fd_set	struct(array(long))
read_mask	struct(array(long))
,	O
ctl_mask	struct(array(long))
;	O
struct	O
timeval	struct(long,long)
wait	struct(long,long)
;	O
msg	struct(char,char,char,char,int,struct(short,array(char)),struct(short,array(char)),int,array(char),array(char),array(char))
.	O
type	char
=	O
type	char
;	O
daemon_addr	struct(short,short,struct(int),array(char))
.	O
sin_addr	struct(int)
=	O
target	struct(int)
;	O
daemon_addr	struct(short,short,struct(int),array(char))
.	O
sin_port	short
=	O
daemon_port	short
;	O
FD_ZERO	O
(	O
&	O
ctl_mask	struct(array(long))
)	O
;	O
FD_SET	O
(	O
ctl_sockt	int
,	O
&	O
ctl_mask	struct(array(long))
)	O
;	O
do	O
{	O
wait	struct(long,long)
.	O
tv_sec	long
=	O
CTL_WAIT	int
;	O
wait	struct(long,long)
.	O
tv_usec	long
=	O
0	int
;	O
do	O
{	O
cc	int
=	O
sendto	(int,*(void),long,int,union(*(struct(short,array(char))),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct)),int)->(long)
(	O
ctl_sockt	int
,	O
(	O
char	O
*	O
)	O
&	O
msg	struct(char,char,char,char,int,struct(short,array(char)),struct(short,array(char)),int,array(char),array(char),array(char))
,	O
sizeof	O
(	O
msg	struct(char,char,char,char,int,struct(short,array(char)),struct(short,array(char)),int,array(char),array(char),array(char))
)	O
,	O
0	int
,	O
(	O
struct	O
sockaddr	struct(short,array(char))
*	O
)	O
&	O
daemon_addr	struct(short,short,struct(int),array(char))
,	O
sizeof	O
(	O
daemon_addr	struct(short,short,struct(int),array(char))
)	O
)	O
;	O
if	O
(	O
cc	int
!=	O
sizeof	O
(	O
msg	struct(char,char,char,char,int,struct(short,array(char)),struct(short,array(char)),int,array(char),array(char),array(char))
)	O
)	O
{	O
if	O
(	O
errno	O
==	O
EINTR	int
)	O
continue	O
;	O
p_error	(*(char))->(int)
(	O
"Error on write to talk daemon"	*(char)
)	O
;	O
}	O
read_mask	struct(array(long))
=	O
ctl_mask	struct(array(long))
;	O
nready	int
=	O
select	(int,*(struct(array(long))),*(struct(array(long))),*(struct(array(long))),*(struct(long,long)))->(int)
(	O
32	int
,	O
&	O
read_mask	struct(array(long))
,	O
0	int
,	O
0	int
,	O
&	O
wait	struct(long,long)
)	O
;	O
if	O
(	O
nready	int
<	O
0	int
)	O
{	O
if	O
(	O
errno	O
==	O
EINTR	int
)	O
continue	O
;	O
p_error	(*(char))->(int)
(	O
"Error waiting for daemon response"	*(char)
)	O
;	O
}	O
}	O
while	O
(	O
nready	int
==	O
0	int
)	O
;	O
do	O
{	O
cc	int
=	O
recv	(int,*(void),long,int)->(long)
(	O
ctl_sockt	int
,	O
(	O
char	O
*	O
)	O
rp	*(struct(char,char,char,char,int,struct(short,array(char))))
,	O
sizeof	O
(	O
*	O
rp	*(struct(char,char,char,char,int,struct(short,array(char))))
)	O
,	O
0	int
)	O
;	O
if	O
(	O
cc	int
<	O
0	int
)	O
{	O
if	O
(	O
errno	O
==	O
EINTR	int
)	O
continue	O
;	O
p_error	(*(char))->(int)
(	O
"Error on read from talk daemon"	*(char)
)	O
;	O
}	O
read_mask	struct(array(long))
=	O
ctl_mask	struct(array(long))
;	O
timerclear	O
(	O
&	O
wait	struct(long,long)
)	O
;	O
nready	int
=	O
select	(int,*(struct(array(long))),*(struct(array(long))),*(struct(array(long))),*(struct(long,long)))->(int)
(	O
32	int
,	O
&	O
read_mask	struct(array(long))
,	O
0	int
,	O
0	int
,	O
&	O
wait	struct(long,long)
)	O
;	O
}	O
while	O
(	O
nready	int
>	O
0	int
&&	O
(	O
rp	*(struct(char,char,char,char,int,struct(short,array(char))))
->	O
vers	char
!=	O
TALK_VERSION	int
||	O
rp	*(struct(char,char,char,char,int,struct(short,array(char))))
->	O
type	char
!=	O
type	char
)	O
)	O
;	O
}	O
while	O
(	O
rp	*(struct(char,char,char,char,int,struct(short,array(char))))
->	O
vers	char
!=	O
TALK_VERSION	int
||	O
rp	*(struct(char,char,char,char,int,struct(short,array(char))))
->	O
type	char
!=	O
type	char
)	O
;	O
rp	*(struct(char,char,char,char,int,struct(short,array(char))))
->	O
id_num	int
=	O
ntohl	(int)->(int)
(	O
rp	*(struct(char,char,char,char,int,struct(short,array(char))))
->	O
id_num	int
)	O
;	O
rp	*(struct(char,char,char,char,int,struct(short,array(char))))
->	O
addr	struct(short,array(char))
.	O
sa_family	short
=	O
ntohs	(short)->(short)
(	O
rp	*(struct(char,char,char,char,int,struct(short,array(char))))
->	O
addr	struct(short,array(char))
.	O
sa_family	short
)	O
;	O
return	O
0	int
;	O
}	O
