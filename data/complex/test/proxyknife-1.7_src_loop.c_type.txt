int	O
errno	O
;	O
int	O
READAPROXY	(*(struct(*(char),struct(*(char),struct(short,short,struct`,array(char)),*(char),int),*(char),*(char))))->(int)
(	O
struct	O
thread_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
*	O
thread_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
)	O
;	O
int	O
VERIFY	(int,*(struct(long,long)),*(struct(long,long)),*(struct(*(char),struct(*(char),struct(short,short,struct`,array(char)),*(char),int),*(char),*(char))))->(int)
(	O
int	O
sockfd	int
,	O
struct	O
timeval	struct(long,long)
*	O
finddata	*(struct(long,long))
,	O
struct	O
timeval	struct(long,long)
*	O
findkey	*(struct(long,long))
,	O
struct	O
thread_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
*	O
thread_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
)	O
;	O
int	O
BUILDPROXYADDR	(*(struct(*(char),struct(*(char),struct(short,short,struct`,array(char)),*(char),int),*(char),*(char))))->(int)
(	O
struct	O
thread_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
*	O
thread_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
)	O
;	O
void	O
*	O
loop	(*(void))->(*(void))
(	O
void	O
*	O
arg	*(void)
)	O
{	O
int	O
read	*((*(void),*(char),long)->(long))
,	O
sockfd	int
;	O
struct	O
timeval	struct(long,long)
rcvwait	struct(long,long)
,	O
sndwait	struct(long,long)
;	O
struct	O
thread_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
loop_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
;	O
struct	O
timeval	struct(long,long)
start_via	struct(long,long)
,	O
end_estab	struct(long,long)
,	O
start_GET	*(struct(long,long))
,	O
enter_data	struct(long,long)
,	O
enter_key	struct(long,long)
;	O
struct	O
timeval	struct(long,long)
start_CON	*(struct(long,long))
,	O
end_CON	*(struct(long,long))
;	O
struct	O
timeval	struct(long,long)
time_ZERO	struct(long,long)
=	O
{	O
0	int
,	O
0	int
}	O
;	O
float	O
via_estab	float
,	O
CON_start_end	float
,	O
GET_data	float
;	O
float	O
data_key	float
;	O
int	O
len	int
,	O
size	long
;	O
int	O
ret	int
=	O
EXIT_FAILURE	int
;	O
thread_mem_init	(*(struct(*(char),struct(*(char),struct(short,short,struct`,array(char)),*(char),int),*(char),*(char))))->(void)
(	O
&	O
loop_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
)	O
;	O
while	O
(	O
1	int
)	O
{	O
read	*((*(void),*(char),long)->(long))
=	O
READAPROXY	(*(struct(*(char),struct(*(char),struct(short,short,struct`,array(char)),*(char),int),*(char),*(char))))->(int)
(	O
&	O
loop_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
)	O
;	O
sockfd	int
=	O
-	O
1	int
;	O
if	O
(	O
read	*((*(void),*(char),long)->(long))
==	O
-	O
1	int
)	O
break	O
;	O
if	O
(	O
read	*((*(void),*(char),long)->(long))
==	O
-	O
2	int
)	O
{	O
goto	O
loop_ex	O
;	O
}	O
end_CON	*(struct(long,long))
=	O
start_CON	*(struct(long,long))
=	O
time_ZERO	struct(long,long)
;	O
if	O
(	O
(	O
sockfd	int
=	O
socket	(int,int,int)->(int)
(	O
AF_INET	O
,	O
SOCK_STREAM	int
,	O
0	int
)	O
)	O
==	O
-	O
1	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s: loop:Thread %d---"	*(char)
,	O
progname	*(char)
,	O
*	O
(	O
(	O
int	O
*	O
)	O
arg	*(void)
)	O
)	O
;	O
return	O
arg	*(void)
;	O
}	O
rcvwait	struct(long,long)
.	O
tv_sec	long
=	O
rcvtimeo	int
;	O
rcvwait	struct(long,long)
.	O
tv_usec	long
=	O
0	int
;	O
sndwait	struct(long,long)
.	O
tv_sec	long
=	O
sndtimeo	int
;	O
sndwait	struct(long,long)
.	O
tv_usec	long
=	O
0	int
;	O
if	O
(	O
setsockopt	(int,int,int,*(void),int)->(int)
(	O
sockfd	int
,	O
SOL_SOCKET	int
,	O
SO_RCVTIMEO	O
,	O
&	O
rcvwait	struct(long,long)
,	O
sizeof	O
(	O
rcvwait	struct(long,long)
)	O
)	O
<	O
0	int
)	O
{	O
perror	(*(char))->(void)
(	O
"loop:setsockopt:SO_RCVTIMEO"	*(char)
)	O
;	O
}	O
if	O
(	O
setsockopt	(int,int,int,*(void),int)->(int)
(	O
sockfd	int
,	O
SOL_SOCKET	int
,	O
SO_SNDTIMEO	O
,	O
&	O
sndwait	struct(long,long)
,	O
sizeof	O
(	O
sndwait	struct(long,long)
)	O
)	O
<	O
0	int
)	O
{	O
perror	(*(char))->(void)
(	O
"loop:setsockopt:SO_RCVTIMEO"	*(char)
)	O
;	O
}	O
if	O
(	O
debug	int
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s: loop:Thread %d Checking %s\n"	*(char)
,	O
progname	*(char)
,	O
*	O
(	O
int	O
*	O
)	O
arg	*(void)
,	O
loop_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
.	O
queue	struct(*(char),struct(short,short,struct(int),array(char)),*(char),int)
.	O
testproxy	*(char)
)	O
;	O
if	O
(	O
(	O
my	struct(int,*(char),int,int,*(char),*(char),struct(int),struct(short,short,struct(int),array(char)),*(char),*(char),*(char),*(char))
.	O
mytype	int
==	O
HTTP_CONNECT	int
)	O
||	O
(	O
my	struct(int,*(char),int,int,*(char),*(char),struct(int),struct(short,short,struct(int),array(char)),*(char),*(char),*(char),*(char))
.	O
mytype	int
==	O
HTTP_CONNECT_AUTH	int
)	O
)	O
{	O
if	O
(	O
CONVIAHTTP	(int,*(struct(long,long)),*(struct(long,long)),*(struct(*(char),struct(*(char),struct(short,short,struct`,array(char)),*(char),int),*(char),*(char))))->(int)
(	O
sockfd	int
,	O
&	O
start_via	struct(long,long)
,	O
&	O
end_estab	struct(long,long)
,	O
&	O
loop_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
)	O
==	O
-	O
1	int
)	O
goto	O
loop_ex	O
;	O
}	O
else	O
{	O
if	O
(	O
BUILDPROXYADDR	(*(struct(*(char),struct(*(char),struct(short,short,struct`,array(char)),*(char),int),*(char),*(char))))->(int)
(	O
&	O
loop_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
)	O
==	O
-	O
1	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s: loop:BUILDPROXYADDR\n"	*(char)
,	O
progname	*(char)
)	O
;	O
goto	O
loop_ex	O
;	O
}	O
if	O
(	O
(	O
my	struct(int,*(char),int,int,*(char),*(char),struct(int),struct(short,short,struct(int),array(char)),*(char),*(char),*(char),*(char))
.	O
mytype	int
==	O
SOCKS5_CONNECT_AUTH	int
)	O
||	O
(	O
my	struct(int,*(char),int,int,*(char),*(char),struct(int),struct(short,short,struct(int),array(char)),*(char),*(char),*(char),*(char))
.	O
mytype	int
==	O
SOCKS5_CONNECT	int
)	O
)	O
{	O
if	O
(	O
CONVIASOCKS5	(int,*(struct(long,long)),*(struct(long,long)),*(struct(*(char),struct(*(char),struct(short,short,struct`,array(char)),*(char),int),*(char),*(char))))->(int)
(	O
sockfd	int
,	O
&	O
start_via	struct(long,long)
,	O
&	O
end_estab	struct(long,long)
,	O
&	O
loop_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
)	O
==	O
-	O
1	int
)	O
goto	O
loop_ex	O
;	O
}	O
else	O
if	O
(	O
my	struct(int,*(char),int,int,*(char),*(char),struct(int),struct(short,short,struct(int),array(char)),*(char),*(char),*(char),*(char))
.	O
mytype	int
==	O
SOCKS4_CONNECT	int
)	O
{	O
if	O
(	O
CONVIASOCKS4	()->(int)
(	O
sockfd	int
,	O
&	O
start_via	struct(long,long)
,	O
&	O
end_estab	struct(long,long)
,	O
&	O
loop_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
)	O
==	O
-	O
1	int
)	O
goto	O
loop_ex	O
;	O
}	O
else	O
if	O
(	O
my	struct(int,*(char),int,int,*(char),*(char),struct(int),struct(short,short,struct(int),array(char)),*(char),*(char),*(char),*(char))
.	O
mytype	int
==	O
DIRECT	int
)	O
{	O
gettimeofday	(*(struct(long,long)),*(void))->(int)
(	O
&	O
start_via	struct(long,long)
,	O
NULL	O
)	O
;	O
if	O
(	O
connect	(int,union(*(struct(short,array(char))),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct)),int)->(int)
(	O
sockfd	int
,	O
(	O
struct	O
sockaddr	struct(short,array(char))
*	O
)	O
&	O
(	O
loop_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
.	O
queue	struct(*(char),struct(short,short,struct(int),array(char)),*(char),int)
.	O
proxyaddr	struct(short,short,struct(int),array(char))
)	O
,	O
sizeof	O
(	O
struct	O
sockaddr	struct(short,array(char))
)	O
)	O
==	O
-	O
1	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s %s: loop:connect\n"	*(char)
,	O
progname	*(char)
,	O
__FILE__	O
)	O
;	O
goto	O
loop_ex	O
;	O
}	O
gettimeofday	(*(struct(long,long)),*(void))->(int)
(	O
&	O
end_estab	struct(long,long)
,	O
NULL	O
)	O
;	O
}	O
}	O
if	O
(	O
loop_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
.	O
queue	struct(*(char),struct(short,short,struct(int),array(char)),*(char),int)
.	O
proto	int
==	O
HTTP	int
)	O
{	O
switch	O
(	O
test	struct(int,int,int,int,int)
.	O
httptestmethod	int
)	O
{	O
case	O
HTTP_GET	int
:	O
if	O
(	O
PGET	(int,*(struct(long,long)),*(struct(*(char),struct(*(char),struct(short,short,struct`,array(char)),*(char),int),*(char),*(char))))->(int)
(	O
sockfd	int
,	O
&	O
start_GET	*(struct(long,long))
,	O
&	O
loop_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
)	O
==	O
-	O
1	int
)	O
goto	O
loop_ex	O
;	O
if	O
(	O
VERIFY	(int,*(struct(long,long)),*(struct(long,long)),*(struct(*(char),struct(*(char),struct(short,short,struct`,array(char)),*(char),int),*(char),*(char))))->(int)
(	O
sockfd	int
,	O
&	O
enter_data	struct(long,long)
,	O
&	O
enter_key	struct(long,long)
,	O
&	O
loop_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
)	O
!=	O
0	int
)	O
goto	O
loop_ex	O
;	O
x_update_string_thread	(*(*(char)),*(char),*(struct(*(char),struct(*(char),struct(short,short,struct`,array(char)),*(char),int),*(char),*(char))))->(void)
(	O
&	O
(	O
loop_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
.	O
queue	struct(*(char),struct(short,short,struct(int),array(char)),*(char),int)
.	O
proto_out	*(char)
)	O
,	O
"HTTPG"	*(char)
,	O
&	O
loop_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
)	O
;	O
break	O
;	O
case	O
HTTP_CONNECT	int
:	O
if	O
(	O
PCONGET	(int,*(struct(long,long)),*(struct(long,long)),*(struct(long,long)),*(struct(*(char),struct(*(char),struct(short,short,struct`,array(char)),*(char),int),*(char),*(char))))->(int)
(	O
sockfd	int
,	O
&	O
start_CON	*(struct(long,long))
,	O
&	O
end_CON	*(struct(long,long))
,	O
&	O
start_GET	*(struct(long,long))
,	O
&	O
loop_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
)	O
==	O
-	O
1	int
)	O
goto	O
loop_ex	O
;	O
if	O
(	O
VERIFY	(int,*(struct(long,long)),*(struct(long,long)),*(struct(*(char),struct(*(char),struct(short,short,struct`,array(char)),*(char),int),*(char),*(char))))->(int)
(	O
sockfd	int
,	O
&	O
enter_data	struct(long,long)
,	O
&	O
enter_key	struct(long,long)
,	O
&	O
loop_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
)	O
!=	O
0	int
)	O
goto	O
loop_ex	O
;	O
x_update_string_thread	(*(*(char)),*(char),*(struct(*(char),struct(*(char),struct(short,short,struct`,array(char)),*(char),int),*(char),*(char))))->(void)
(	O
&	O
(	O
loop_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
.	O
queue	struct(*(char),struct(short,short,struct(int),array(char)),*(char),int)
.	O
proto_out	*(char)
)	O
,	O
"HTTPC"	*(char)
,	O
&	O
loop_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
)	O
;	O
break	O
;	O
default	O
:	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s: loop:Unknown http method for testproxy!\n"	*(char)
,	O
progname	*(char)
)	O
;	O
goto	O
loop_ex	O
;	O
}	O
}	O
else	O
if	O
(	O
loop_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
.	O
queue	struct(*(char),struct(short,short,struct(int),array(char)),*(char),int)
.	O
proto	int
==	O
SOCKS5	int
)	O
{	O
switch	O
(	O
test	struct(int,int,int,int,int)
.	O
socks5testmethod	int
)	O
{	O
case	O
SOCKS5_CONNECT	int
:	O
default	O
:	O
if	O
(	O
S5PCONGET	(int,*(struct(long,long)),*(struct(long,long)),*(struct(long,long)),*(struct(*(char),struct(*(char),struct(short,short,struct`,array(char)),*(char),int),*(char),*(char))))->(int)
(	O
sockfd	int
,	O
&	O
start_CON	*(struct(long,long))
,	O
&	O
end_CON	*(struct(long,long))
,	O
&	O
start_GET	*(struct(long,long))
,	O
&	O
loop_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
)	O
==	O
-	O
1	int
)	O
goto	O
loop_ex	O
;	O
if	O
(	O
VERIFY	(int,*(struct(long,long)),*(struct(long,long)),*(struct(*(char),struct(*(char),struct(short,short,struct`,array(char)),*(char),int),*(char),*(char))))->(int)
(	O
sockfd	int
,	O
&	O
enter_data	struct(long,long)
,	O
&	O
enter_key	struct(long,long)
,	O
&	O
loop_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
)	O
!=	O
0	int
)	O
goto	O
loop_ex	O
;	O
x_update_string_thread	(*(*(char)),*(char),*(struct(*(char),struct(*(char),struct(short,short,struct`,array(char)),*(char),int),*(char),*(char))))->(void)
(	O
&	O
(	O
loop_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
.	O
queue	struct(*(char),struct(short,short,struct(int),array(char)),*(char),int)
.	O
proto_out	*(char)
)	O
,	O
"SOCKS5C"	*(char)
,	O
&	O
loop_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
)	O
;	O
break	O
;	O
}	O
}	O
else	O
if	O
(	O
loop_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
.	O
queue	struct(*(char),struct(short,short,struct(int),array(char)),*(char),int)
.	O
proto	int
==	O
SOCKS4	int
)	O
{	O
switch	O
(	O
test	struct(int,int,int,int,int)
.	O
socks4testmethod	int
)	O
{	O
case	O
SOCKS4_CONNECT	int
:	O
default	O
:	O
if	O
(	O
S4PCONGET	(int,*(struct(long,long)),*(struct(long,long)),*(struct(long,long)),*(struct(*(char),struct(*(char),struct(short,short,struct`,array(char)),*(char),int),*(char),*(char))))->(int)
(	O
sockfd	int
,	O
&	O
start_CON	*(struct(long,long))
,	O
&	O
end_CON	*(struct(long,long))
,	O
&	O
start_GET	*(struct(long,long))
,	O
&	O
loop_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
)	O
==	O
-	O
1	int
)	O
goto	O
loop_ex	O
;	O
if	O
(	O
VERIFY	(int,*(struct(long,long)),*(struct(long,long)),*(struct(*(char),struct(*(char),struct(short,short,struct`,array(char)),*(char),int),*(char),*(char))))->(int)
(	O
sockfd	int
,	O
&	O
enter_data	struct(long,long)
,	O
&	O
enter_key	struct(long,long)
,	O
&	O
loop_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
)	O
!=	O
0	int
)	O
goto	O
loop_ex	O
;	O
x_update_string_thread	(*(*(char)),*(char),*(struct(*(char),struct(*(char),struct(short,short,struct`,array(char)),*(char),int),*(char),*(char))))->(void)
(	O
&	O
(	O
loop_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
.	O
queue	struct(*(char),struct(short,short,struct(int),array(char)),*(char),int)
.	O
proto_out	*(char)
)	O
,	O
"SOCKS4C"	*(char)
,	O
&	O
loop_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
)	O
;	O
break	O
;	O
}	O
}	O
else	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s: loop:Proto %d was not implemented now!\n"	*(char)
,	O
progname	*(char)
,	O
loop_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
.	O
queue	struct(*(char),struct(short,short,struct(int),array(char)),*(char),int)
.	O
proto	int
)	O
;	O
goto	O
loop_ex	O
;	O
}	O
via_estab	float
=	O
time_sub	O
(	O
end_estab	struct(long,long)
,	O
start_via	struct(long,long)
)	O
;	O
CON_start_end	float
=	O
time_sub	O
(	O
end_CON	*(struct(long,long))
,	O
start_CON	*(struct(long,long))
)	O
;	O
GET_data	float
=	O
time_sub	O
(	O
enter_data	struct(long,long)
,	O
start_GET	*(struct(long,long))
)	O
;	O
data_key	float
=	O
time_sub	O
(	O
enter_key	struct(long,long)
,	O
enter_data	struct(long,long)
)	O
;	O
printf	(*(char))->(int)
(	O
"Thread %d--Found~~~%s@%s delay=%f %f %f %f req=%s\n"	*(char)
,	O
*	O
(	O
(	O
int	O
*	O
)	O
arg	*(void)
)	O
,	O
loop_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
.	O
queue	struct(*(char),struct(short,short,struct(int),array(char)),*(char),int)
.	O
testproxy	*(char)
,	O
loop_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
.	O
queue	struct(*(char),struct(short,short,struct(int),array(char)),*(char),int)
.	O
proto_out	*(char)
,	O
via_estab	float
,	O
CON_start_end	float
,	O
GET_data	float
,	O
data_key	float
,	O
target	struct(*(char),*(char),*(char),*(char),*(char),struct(short,short,struct(int),array(char)),*(char),*(char),*(char),*(char),*(char))
.	O
checkreqin	*(char)
?	O
target	struct(*(char),*(char),*(char),*(char),*(char),struct(short,short,struct(int),array(char)),*(char),*(char),*(char),*(char),*(char))
.	O
checkreqin	*(char)
:	O
"HTTP:GET"	*(char)
)	O
;	O
pthread_mutex_lock	(*(union(struct(int,int,int,int,int,short,short,struct(*`,*`)),array(char),long)))->(int)
(	O
&	O
counter_mutex_out	union(struct(int,int,int,int,int,short,short,struct(*(struct(*`,*`)),*(struct(*`,*`)))),array(char),long)
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
out	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s@%s %f %f %f %f %s\n"	*(char)
,	O
loop_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
.	O
queue	struct(*(char),struct(short,short,struct(int),array(char)),*(char),int)
.	O
testproxy	*(char)
,	O
loop_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
.	O
queue	struct(*(char),struct(short,short,struct(int),array(char)),*(char),int)
.	O
proto_out	*(char)
,	O
via_estab	float
,	O
CON_start_end	float
,	O
GET_data	float
,	O
data_key	float
,	O
target	struct(*(char),*(char),*(char),*(char),*(char),struct(short,short,struct(int),array(char)),*(char),*(char),*(char),*(char),*(char))
.	O
checkreqin	*(char)
?	O
target	struct(*(char),*(char),*(char),*(char),*(char),struct(short,short,struct(int),array(char)),*(char),*(char),*(char),*(char),*(char))
.	O
checkreqin	*(char)
:	O
"HTTP:GET"	*(char)
)	O
;	O
pthread_mutex_unlock	(*(union(struct(int,int,int,int,int,short,short,struct(*`,*`)),array(char),long)))->(int)
(	O
&	O
counter_mutex_out	union(struct(int,int,int,int,int,short,short,struct(*(struct(*`,*`)),*(struct(*`,*`)))),array(char),long)
)	O
;	O
loop_ex	O
:	O
thread_mem_clean	()->(int)
(	O
&	O
loop_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
)	O
;	O
if	O
(	O
sockfd	int
!=	O
-	O
1	int
)	O
close	*((*(void))->(int))
(	O
sockfd	int
)	O
;	O
}	O
thread_mem_clean	()->(int)
(	O
&	O
loop_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
)	O
;	O
return	O
arg	*(void)
;	O
}	O
int	O
READAPROXY	(*(struct(*(char),struct(*(char),struct(short,short,struct`,array(char)),*(char),int),*(char),*(char))))->(int)
(	O
struct	O
thread_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
*	O
thread_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
)	O
{	O
int	O
mlen	int
=	O
80	int
;	O
int	O
read	*((*(void),*(char),long)->(long))
;	O
int	O
ret	int
=	O
EXIT_FAILURE	int
;	O
thread_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
->	O
line	*(char)
=	O
NULL	O
;	O
if	O
(	O
proxyknife_in_type	int
==	O
IN_FILE	int
)	O
{	O
pthread_mutex_lock	(*(union(struct(int,int,int,int,int,short,short,struct(*`,*`)),array(char),long)))->(int)
(	O
&	O
counter_mutex_in	union(struct(int,int,int,int,int,short,short,struct(*(struct(*`,*`)),*(struct(*`,*`)))),array(char),long)
)	O
;	O
read	*((*(void),*(char),long)->(long))
=	O
getaline_r	(*(*(char)),*(int),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(struct(*(char),struct(*(char),struct(short,short,struct`,array(char)),*(char),int),*(char),*(char))))->(int)
(	O
(	O
char	O
*	O
*	O
)	O
&	O
(	O
thread_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
->	O
line	*(char)
)	O
,	O
&	O
mlen	int
,	O
in	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
thread_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
)	O
;	O
pthread_mutex_unlock	(*(union(struct(int,int,int,int,int,short,short,struct(*`,*`)),array(char),long)))->(int)
(	O
&	O
counter_mutex_in	union(struct(int,int,int,int,int,short,short,struct(*(struct(*`,*`)),*(struct(*`,*`)))),array(char),long)
)	O
;	O
if	O
(	O
read	*((*(void),*(char),long)->(long))
==	O
PROXYKNIFE_THREAD_EXIT	O
)	O
x_pthread_exit	(*(void),*(struct(*(char),struct(*(char),struct(short,short,struct`,array(char)),*(char),int),*(char),*(char))))->(void)
(	O
(	O
void	O
*	O
)	O
&	O
ret	int
,	O
thread_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
)	O
;	O
if	O
(	O
read	*((*(void),*(char),long)->(long))
==	O
-	O
1	int
)	O
{	O
if	O
(	O
thread_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
->	O
line	*(char)
)	O
pxfree	(*(*(void)))->(void)
(	O
(	O
void	O
*	O
*	O
)	O
&	O
(	O
thread_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
->	O
line	*(char)
)	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
}	O
else	O
if	O
(	O
proxyknife_in_type	int
==	O
IN_HTTP	int
)	O
{	O
pthread_mutex_lock	(*(union(struct(int,int,int,int,int,short,short,struct(*`,*`)),array(char),long)))->(int)
(	O
&	O
counter_mutex_in	union(struct(int,int,int,int,int,short,short,struct(*(struct(*`,*`)),*(struct(*`,*`)))),array(char),long)
)	O
;	O
if	O
(	O
(	O
proxyknife_in_buffer_cur	*(char)
-	O
proxyknife_in_buffer	*(char)
)	O
>=	O
strlen	(*(char))->(long)
(	O
proxyknife_in_buffer	*(char)
)	O
)	O
{	O
if	O
(	O
thread_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
->	O
line	*(char)
)	O
pxfree	(*(*(void)))->(void)
(	O
(	O
void	O
*	O
*	O
)	O
&	O
(	O
thread_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
->	O
line	*(char)
)	O
)	O
;	O
pthread_mutex_unlock	(*(union(struct(int,int,int,int,int,short,short,struct(*`,*`)),array(char),long)))->(int)
(	O
&	O
counter_mutex_in	union(struct(int,int,int,int,int,short,short,struct(*(struct(*`,*`)),*(struct(*`,*`)))),array(char),long)
)	O
;	O
return	O
-	O
1	int
;	O
}	O
else	O
{	O
proxyknife_in_buffer_cur	*(char)
=	O
sgetaline	(*(char),*(struct(*(char),struct(*(char),struct(short,short,struct`,array(char)),*(char),int),*(char),*(char))))->(*(char))
(	O
proxyknife_in_buffer_cur	*(char)
,	O
thread_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
)	O
;	O
pthread_mutex_unlock	(*(union(struct(int,int,int,int,int,short,short,struct(*`,*`)),array(char),long)))->(int)
(	O
&	O
counter_mutex_in	union(struct(int,int,int,int,int,short,short,struct(*(struct(*`,*`)),*(struct(*`,*`)))),array(char),long)
)	O
;	O
if	O
(	O
proxyknife_in_buffer_cur	*(char)
==	O
NULL	O
)	O
{	O
if	O
(	O
thread_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
->	O
line	*(char)
)	O
{	O
pxfree	(*(*(void)))->(void)
(	O
(	O
void	O
*	O
*	O
)	O
&	O
(	O
thread_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
->	O
line	*(char)
)	O
)	O
;	O
}	O
x_pthread_exit	(*(void),*(struct(*(char),struct(*(char),struct(short,short,struct`,array(char)),*(char),int),*(char),*(char))))->(void)
(	O
(	O
void	O
*	O
)	O
&	O
ret	int
,	O
thread_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
)	O
;	O
}	O
read	*((*(void),*(char),long)->(long))
=	O
strlen	(*(char))->(long)
(	O
thread_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
->	O
line	*(char)
)	O
;	O
}	O
}	O
else	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s: READAPROXY(Should not happened): proxyknife_in_type = %d is not implemented now!\n"	*(char)
,	O
progname	*(char)
,	O
proxyknife_in_type	int
)	O
;	O
xexit	(int)->(void)
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
if	O
(	O
*	O
(	O
thread_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
->	O
line	*(char)
+	O
read	*((*(void),*(char),long)->(long))
-	O
1	int
)	O
==	O
'\n'	O
)	O
*	O
(	O
thread_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
->	O
line	*(char)
+	O
read	*((*(void),*(char),long)->(long))
-	O
1	int
)	O
=	O
'\x0'	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s: READAPROXY:Parsing %d bytes: %s\n"	*(char)
,	O
progname	*(char)
,	O
read	*((*(void),*(char),long)->(long))
-	O
1	int
,	O
thread_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
->	O
line	*(char)
)	O
;	O
if	O
(	O
checkaline	(*(struct(*(char),struct(*(char),struct(short,short,struct`,array(char)),*(char),int),*(char),*(char))))->(int)
(	O
thread_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
)	O
==	O
-	O
1	int
)	O
{	O
read	*((*(void),*(char),long)->(long))
=	O
-	O
2	int
;	O
}	O
else	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s: READAPROXY:Testproxy=%d len: %s proto: %d\n"	*(char)
,	O
progname	*(char)
,	O
strlen	(*(char))->(long)
(	O
thread_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
->	O
queue	struct(*(char),struct(short,short,struct(int),array(char)),*(char),int)
.	O
testproxy	*(char)
)	O
,	O
thread_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
->	O
queue	struct(*(char),struct(short,short,struct(int),array(char)),*(char),int)
.	O
testproxy	*(char)
,	O
thread_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
->	O
queue	struct(*(char),struct(short,short,struct(int),array(char)),*(char),int)
.	O
proto	int
)	O
;	O
}	O
if	O
(	O
thread_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
->	O
line	*(char)
)	O
pxfree	(*(*(void)))->(void)
(	O
(	O
void	O
*	O
*	O
)	O
&	O
(	O
thread_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
->	O
line	*(char)
)	O
)	O
;	O
return	O
read	*((*(void),*(char),long)->(long))
;	O
}	O
int	O
BUILDPROXYADDR	(*(struct(*(char),struct(*(char),struct(short,short,struct`,array(char)),*(char),int),*(char),*(char))))->(int)
(	O
struct	O
thread_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
*	O
thread_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
)	O
{	O
char	O
*	O
p	*(*(void))
;	O
int	O
ret	int
;	O
p	*(*(void))
=	O
strchr	(*(char),int)->(*(char))
(	O
thread_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
->	O
queue	struct(*(char),struct(short,short,struct(int),array(char)),*(char),int)
.	O
testproxy	*(char)
,	O
':'	O
)	O
;	O
if	O
(	O
p	*(*(void))
==	O
NULL	O
)	O
{	O
return	O
-	O
1	int
;	O
}	O
thread_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
->	O
queue	struct(*(char),struct(short,short,struct(int),array(char)),*(char),int)
.	O
proxyaddr	struct(short,short,struct(int),array(char))
.	O
sin_port	short
=	O
htons	(short)->(short)
(	O
atoi	(*(char))->(int)
(	O
p	*(*(void))
+	O
1	int
)	O
)	O
;	O
*	O
p	*(*(void))
=	O
'\0'	O
;	O
ret	int
=	O
inet_aton	(*(char),*(struct(int)))->(int)
(	O
thread_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
->	O
queue	struct(*(char),struct(short,short,struct(int),array(char)),*(char),int)
.	O
testproxy	*(char)
,	O
&	O
(	O
thread_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
->	O
queue	struct(*(char),struct(short,short,struct(int),array(char)),*(char),int)
.	O
proxyaddr	struct(short,short,struct(int),array(char))
.	O
sin_addr	struct(int)
)	O
)	O
;	O
*	O
p	*(*(void))
=	O
':'	O
;	O
if	O
(	O
ret	int
==	O
0	int
)	O
return	O
-	O
1	int
;	O
thread_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
->	O
queue	struct(*(char),struct(short,short,struct(int),array(char)),*(char),int)
.	O
proxyaddr	struct(short,short,struct(int),array(char))
.	O
sin_family	short
=	O
AF_INET	O
;	O
memset	(*(void),int,long)->(*(void))
(	O
&	O
(	O
thread_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
->	O
queue	struct(*(char),struct(short,short,struct(int),array(char)),*(char),int)
.	O
proxyaddr	struct(short,short,struct(int),array(char))
.	O
sin_zero	array(char)
)	O
,	O
0	int
,	O
sizeof	O
(	O
thread_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
->	O
queue	struct(*(char),struct(short,short,struct(int),array(char)),*(char),int)
.	O
proxyaddr	struct(short,short,struct(int),array(char))
.	O
sin_zero	array(char)
)	O
)	O
;	O
return	O
0	int
;	O
}	O
int	O
VERIFY	(int,*(struct(long,long)),*(struct(long,long)),*(struct(*(char),struct(*(char),struct(short,short,struct`,array(char)),*(char),int),*(char),*(char))))->(int)
(	O
int	O
sockfd	int
,	O
struct	O
timeval	struct(long,long)
*	O
finddata	*(struct(long,long))
,	O
struct	O
timeval	struct(long,long)
*	O
findkey	*(struct(long,long))
,	O
struct	O
thread_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
*	O
thread_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
)	O
{	O
int	O
numbytes	int
;	O
char	O
*	O
p	*(*(void))
;	O
int	O
t	int
=	O
0	int
;	O
int	O
ok	int
=	O
0	int
;	O
char	O
OK10	array(char)
[	O
]	O
=	O
"HTTP/1.0 200 OK\r\n"	*(char)
;	O
char	O
OK11	array(char)
[	O
]	O
=	O
"HTTP/1.1 200 OK\r\n"	*(char)
;	O
int	O
oklen	int
;	O
oklen	int
=	O
strlen	(*(char))->(long)
(	O
OK10	array(char)
)	O
;	O
thread_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
->	O
reply	*(char)
=	O
pmalloc	(long,*(struct(*(char),struct(*(char),struct(short,short,struct`,array(char)),*(char),int),*(char),*(char))))->(*(void))
(	O
test	struct(int,int,int,int,int)
.	O
testtagreplysize	int
,	O
thread_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
)	O
;	O
p	*(*(void))
=	O
thread_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
->	O
reply	*(char)
;	O
memset	(*(void),int,long)->(*(void))
(	O
p	*(*(void))
,	O
0	int
,	O
test	struct(int,int,int,int,int)
.	O
testtagreplysize	int
)	O
;	O
while	O
(	O
1	int
)	O
{	O
numbytes	int
=	O
read	*((*(void),*(char),long)->(long))
(	O
sockfd	int
,	O
p	*(*(void))
,	O
test	struct(int,int,int,int,int)
.	O
testtagreplysize	int
-	O
(	O
p	*(*(void))
-	O
thread_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
->	O
reply	*(char)
)	O
-	O
1	int
)	O
;	O
if	O
(	O
numbytes	int
<=	O
0	int
)	O
{	O
pxfree	(*(*(void)))->(void)
(	O
(	O
void	O
*	O
*	O
)	O
&	O
(	O
thread_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
->	O
reply	*(char)
)	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
t	int
++	O
;	O
p	*(*(void))
+=	O
numbytes	int
;	O
if	O
(	O
t	int
==	O
1	int
)	O
gettimeofday	(*(struct(long,long)),*(void))->(int)
(	O
finddata	*(struct(long,long))
,	O
NULL	O
)	O
;	O
if	O
(	O
target	struct(*(char),*(char),*(char),*(char),*(char),struct(short,short,struct(int),array(char)),*(char),*(char),*(char),*(char),*(char))
.	O
req	*(char)
==	O
NULL	O
)	O
{	O
if	O
(	O
(	O
ok	int
==	O
0	int
)	O
&&	O
(	O
p	*(*(void))
-	O
thread_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
->	O
reply	*(char)
>=	O
oklen	int
)	O
)	O
{	O
if	O
(	O
strncmp	(*(char),*(char),long)->(int)
(	O
thread_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
->	O
reply	*(char)
,	O
OK10	array(char)
,	O
oklen	int
)	O
&&	O
strncmp	(*(char),*(char),long)->(int)
(	O
thread_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
->	O
reply	*(char)
,	O
OK11	array(char)
,	O
oklen	int
)	O
)	O
{	O
pxfree	(*(*(void)))->(void)
(	O
(	O
void	O
*	O
*	O
)	O
&	O
(	O
thread_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
->	O
reply	*(char)
)	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
else	O
{	O
ok	int
==	O
1	int
;	O
}	O
}	O
}	O
gettimeofday	(*(struct(long,long)),*(void))->(int)
(	O
findkey	*(struct(long,long))
,	O
NULL	O
)	O
;	O
if	O
(	O
strstr	(*(char),*(char))->(*(char))
(	O
thread_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
->	O
reply	*(char)
,	O
target	struct(*(char),*(char),*(char),*(char),*(char),struct(short,short,struct(int),array(char)),*(char),*(char),*(char),*(char),*(char))
.	O
key	*(char)
)	O
!=	O
NULL	O
)	O
{	O
pxfree	(*(*(void)))->(void)
(	O
(	O
void	O
*	O
*	O
)	O
&	O
(	O
thread_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
->	O
reply	*(char)
)	O
)	O
;	O
return	O
0	int
;	O
}	O
if	O
(	O
(	O
p	*(*(void))
-	O
thread_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
->	O
reply	*(char)
)	O
==	O
(	O
test	struct(int,int,int,int,int)
.	O
testtagreplysize	int
-	O
1	int
)	O
)	O
{	O
pxfree	(*(*(void)))->(void)
(	O
(	O
void	O
*	O
*	O
)	O
&	O
(	O
thread_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
->	O
reply	*(char)
)	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
}	O
;	O
}	O
