void	O
print_reply	(*(struct(int,*(struct),int,int,*(*(char)),*(char),*(char),long,long,long,struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int),*(struct(*`,*`,enum(int,int,int),long,*`,union`)),*(struct(*`,*`,enum(int,int,int),long,*`,union`)),*(struct(*`,*`,enum(int,int,int),long,*`,union`)),*(struct(*`,*`,enum(int,int,int),long,*`,union`)))))->(void)
(	O
struct	O
dict_connection	struct(int,*(struct),int,int,*(*(char)),*(char),*(char),long,long,long,struct(long,*(struct(*(char),*(struct(*`,*`,array(char))),array(char))),*(char),*(char),*(char),union(long,*(void)),long,union(*((long)->(*(void))),*((*(void),long)->(*(void)))),union(*((*(void))->(void)),*((*(void),*(void))->(void))),*(void),int,int,int),*(struct(*(struct(*(struct`),*(struct`),enum(int,int,int),long,*(char),union(*`,*`))),*(struct(int,*(struct`),int,int,*(*`),*(char),*(char),long,long,long,struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int),*(struct`),*(struct`),*(struct`),*(struct`))),enum(int,int,int),long,*(char),union(*(struct(*`,*`,*`,*`,long)),*(struct(*`,*`))))),*(struct(*(struct(*(struct`),*(struct`),enum(int,int,int),long,*(char),union(*`,*`))),*(struct(int,*(struct`),int,int,*(*`),*(char),*(char),long,long,long,struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int),*(struct`),*(struct`),*(struct`),*(struct`))),enum(int,int,int),long,*(char),union(*(struct(*`,*`,*`,*`,long)),*(struct(*`,*`))))),*(struct(*(struct(*(struct`),*(struct`),enum(int,int,int),long,*(char),union(*`,*`))),*(struct(int,*(struct`),int,int,*(*`),*(char),*(char),long,long,long,struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int),*(struct`),*(struct`),*(struct`),*(struct`))),enum(int,int,int),long,*(char),union(*(struct(*`,*`,*`,*`,long)),*(struct(*`,*`))))),*(struct(*(struct(*(struct`),*(struct`),enum(int,int,int),long,*(char),union(*`,*`))),*(struct(int,*(struct`),int,int,*(*`),*(char),*(char),long,long,long,struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int),*(struct`),*(struct`),*(struct`),*(struct`))),enum(int,int,int),long,*(char),union(*(struct(*`,*`,*`,*`,long)),*(struct(*`,*`))))))
*	O
conn	*(struct)
)	O
{	O
if	O
(	O
strncmp	(*(char),*(char),long)->(int)
(	O
conn	*(struct)
->	O
buf	*(void)
,	O
"552"	*(char)
,	O
3	int
)	O
==	O
0	int
)	O
printf	(*(char))->(int)
(	O
"%s\n"	*(char)
,	O
_	O
(	O
"No match"	*(char)
)	O
)	O
;	O
else	O
printf	(*(char))->(int)
(	O
"Error: %s\n"	*(char)
,	O
conn	*(struct)
->	O
buf	*(void)
)	O
;	O
}	O
static	O
size_t	long
utf8_count_newlines	(*(char))->(long)
(	O
char	O
*	O
str	*(char)
)	O
{	O
size_t	long
count	long
=	O
0	int
;	O
struct	O
utf8_iterator	struct(*(char),*(char),int,long,int,int)
itr	*((*(void),*(void))->(int))
;	O
for	O
(	O
utf8_iter_first	(*(struct(*(char),*(char),int,long,int,int)),*(char))->(int)
(	O
&	O
itr	*((*(void),*(void))->(int))
,	O
(	O
char	O
*	O
)	O
str	*(char)
)	O
;	O
!	O
utf8_iter_end_p	(*(struct(*(char),*(char),int,long,int,int)))->(int)
(	O
&	O
itr	*((*(void),*(void))->(int))
)	O
;	O
utf8_iter_next	(*(struct(*(char),*(char),int,long,int,int)))->(int)
(	O
&	O
itr	*((*(void),*(void))->(int))
)	O
)	O
{	O
if	O
(	O
utf8_iter_isascii	O
(	O
itr	*((*(void),*(void))->(int))
)	O
&&	O
*	O
itr	*((*(void),*(void))->(int))
.	O
curptr	*(char)
==	O
'\n'	O
)	O
count	long
++	O
;	O
}	O
return	O
count	long
;	O
}	O
size_t	long
result_count_lines	(*(struct(*(struct(*`,*`,enum(int,int,int),long,*`,union`)),*(struct(int,*`,int,int,*`,*`,*`,long,long,long,struct`,*`,*`,*`,*`)),enum(int,int,int),long,*(char),union(*(struct`),*(struct`)))))->(long)
(	O
struct	O
dict_result	struct(*(struct(*(struct(*(struct`),*(struct`),enum(int,int,int),long,*(char),union(*`,*`))),*(struct),enum(int,int,int),long,*(char),union(*(struct(*`,*`,*`,*`,long)),*(struct(*`,*`))))),*(struct),enum(int,int,int),long,*(char),union(*(struct(*(char),*(char),*(char),*(char),long)),*(struct(*(char),*(char)))))
*	O
res	*(struct(*(struct(*(struct`),*(struct`),enum(int,int,int),long,*(char),union(*`,*`))),*(struct(int,*(struct`),int,int,*(*`),*(char),*(char),long,long,long,struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int),*(struct`),*(struct`),*(struct`),*(struct`))),enum(int,int,int),long,*(char),union(*(struct(*`,*`,*`,*`,long)),*(struct(*`,*`)))))
)	O
{	O
size_t	long
i	long
,	O
count	long
=	O
0	int
;	O
switch	O
(	O
res	*(struct(*(struct(*(struct`),*(struct`),enum(int,int,int),long,*(char),union(*`,*`))),*(struct(int,*(struct`),int,int,*(*`),*(char),*(char),long,long,long,struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int),*(struct`),*(struct`),*(struct`),*(struct`))),enum(int,int,int),long,*(char),union(*(struct(*`,*`,*`,*`,long)),*(struct(*`,*`)))))
->	O
type	enum(int,int,int)
)	O
{	O
case	O
dict_result_define	int
:	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
res	*(struct(*(struct(*(struct`),*(struct`),enum(int,int,int),long,*(char),union(*`,*`))),*(struct(int,*(struct`),int,int,*(*`),*(char),*(char),long,long,long,struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int),*(struct`),*(struct`),*(struct`),*(struct`))),enum(int,int,int),long,*(char),union(*(struct(*`,*`,*`,*`,long)),*(struct(*`,*`)))))
->	O
count	long
;	O
i	long
++	O
)	O
count	long
+=	O
res	*(struct(*(struct(*(struct`),*(struct`),enum(int,int,int),long,*(char),union(*`,*`))),*(struct(int,*(struct`),int,int,*(*`),*(char),*(char),long,long,long,struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int),*(struct`),*(struct`),*(struct`),*(struct`))),enum(int,int,int),long,*(char),union(*(struct(*`,*`,*`,*`,long)),*(struct(*`,*`)))))
->	O
set	union(*(struct(*(char),*(char),*(char),*(char),long)),*(struct(*(char),*(char))))
.	O
def	*(struct(*(char),*(char),*(char),*(char),long))
[	O
i	long
]	O
.	O
nlines	long
+	O
3	int
;	O
break	O
;	O
case	O
dict_result_match	int
:	O
count	long
=	O
res	*(struct(*(struct(*(struct`),*(struct`),enum(int,int,int),long,*(char),union(*`,*`))),*(struct(int,*(struct`),int,int,*(*`),*(char),*(char),long,long,long,struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int),*(struct`),*(struct`),*(struct`),*(struct`))),enum(int,int,int),long,*(char),union(*(struct(*`,*`,*`,*`,long)),*(struct(*`,*`)))))
->	O
count	long
;	O
break	O
;	O
case	O
dict_result_text	int
:	O
count	long
=	O
utf8_count_newlines	(*(char))->(long)
(	O
res	*(struct(*(struct(*(struct`),*(struct`),enum(int,int,int),long,*(char),union(*`,*`))),*(struct(int,*(struct`),int,int,*(*`),*(char),*(char),long,long,long,struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int),*(struct`),*(struct`),*(struct`),*(struct`))),enum(int,int,int),long,*(char),union(*(struct(*`,*`,*`,*`,long)),*(struct(*`,*`)))))
->	O
base	int
)	O
;	O
}	O
return	O
count	long
;	O
}	O
static	O
void	O
format_defn	(*(struct),*(struct(*(char),*(char),*(char),*(char),long)))->(void)
(	O
dico_stream_t	*(struct)
str	*(char)
,	O
struct	O
define_result	struct(*(char),*(char),*(char),*(char),long)
*	O
def	*(struct(*(char),*(char),*(char),*(char),long))
)	O
{	O
stream_printf	(*(struct),*(char))->(int)
(	O
str	*(char)
,	O
_	O
(	O
"From %s, %s:\n"	*(char)
)	O
,	O
def	*(struct(*(char),*(char),*(char),*(char),long))
->	O
database	*(char)
,	O
def	*(struct(*(char),*(char),*(char),*(char),long))
->	O
descr	*(char)
)	O
;	O
stream_writez	(*(struct),*(char))->(int)
(	O
str	*(char)
,	O
def	*(struct(*(char),*(char),*(char),*(char),long))
->	O
defn	*(char)
)	O
;	O
dico_stream_write	(*(struct),*(void),long)->(int)
(	O
str	*(char)
,	O
"\n"	*(char)
,	O
1	int
)	O
;	O
}	O
static	O
void	O
format_match	(*(struct),*(struct(*(char),*(char))))->(void)
(	O
dico_stream_t	*(struct)
str	*(char)
,	O
struct	O
match_result	struct(*(char),*(char))
*	O
mat	*(struct(*(char),*(char)))
)	O
{	O
stream_printf	(*(struct),*(char))->(int)
(	O
str	*(char)
,	O
"%s \"%s\"\n"	*(char)
,	O
mat	*(struct(*(char),*(char)))
->	O
database	*(char)
,	O
mat	*(struct(*(char),*(char)))
->	O
word	*(char)
)	O
;	O
}	O
void	O
print_result	(*(struct(*(struct(*`,*`,enum(int,int,int),long,*`,union`)),*(struct(int,*`,int,int,*`,*`,*`,long,long,long,struct`,*`,*`,*`,*`)),enum(int,int,int),long,*(char),union(*(struct`),*(struct`)))))->(void)
(	O
struct	O
dict_result	struct(*(struct(*(struct(*(struct`),*(struct`),enum(int,int,int),long,*(char),union(*`,*`))),*(struct),enum(int,int,int),long,*(char),union(*(struct(*`,*`,*`,*`,long)),*(struct(*`,*`))))),*(struct),enum(int,int,int),long,*(char),union(*(struct(*(char),*(char),*(char),*(char),long)),*(struct(*(char),*(char)))))
*	O
res	*(struct(*(struct(*(struct`),*(struct`),enum(int,int,int),long,*(char),union(*`,*`))),*(struct(int,*(struct`),int,int,*(*`),*(char),*(char),long,long,long,struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int),*(struct`),*(struct`),*(struct`),*(struct`))),enum(int,int,int),long,*(char),union(*(struct(*`,*`,*`,*`,long)),*(struct(*`,*`)))))
)	O
{	O
unsigned	O
long	O
i	long
;	O
dico_stream_t	*(struct)
str	*(char)
;	O
str	*(char)
=	O
create_pager_stream	(long)->(*(struct))
(	O
result_count_lines	(*(struct(*(struct(*`,*`,enum(int,int,int),long,*`,union`)),*(struct(int,*`,int,int,*`,*`,*`,long,long,long,struct`,*`,*`,*`,*`)),enum(int,int,int),long,*(char),union(*(struct`),*(struct`)))))->(long)
(	O
res	*(struct(*(struct(*(struct`),*(struct`),enum(int,int,int),long,*(char),union(*`,*`))),*(struct(int,*(struct`),int,int,*(*`),*(char),*(char),long,long,long,struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int),*(struct`),*(struct`),*(struct`),*(struct`))),enum(int,int,int),long,*(char),union(*(struct(*`,*`,*`,*`,long)),*(struct(*`,*`)))))
)	O
)	O
;	O
switch	O
(	O
res	*(struct(*(struct(*(struct`),*(struct`),enum(int,int,int),long,*(char),union(*`,*`))),*(struct(int,*(struct`),int,int,*(*`),*(char),*(char),long,long,long,struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int),*(struct`),*(struct`),*(struct`),*(struct`))),enum(int,int,int),long,*(char),union(*(struct(*`,*`,*`,*`,long)),*(struct(*`,*`)))))
->	O
type	enum(int,int,int)
)	O
{	O
case	O
dict_result_define	int
:	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
res	*(struct(*(struct(*(struct`),*(struct`),enum(int,int,int),long,*(char),union(*`,*`))),*(struct(int,*(struct`),int,int,*(*`),*(char),*(char),long,long,long,struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int),*(struct`),*(struct`),*(struct`),*(struct`))),enum(int,int,int),long,*(char),union(*(struct(*`,*`,*`,*`,long)),*(struct(*`,*`)))))
->	O
count	long
;	O
i	long
++	O
)	O
format_defn	(*(struct),*(struct(*(char),*(char),*(char),*(char),long)))->(void)
(	O
str	*(char)
,	O
&	O
res	*(struct(*(struct(*(struct`),*(struct`),enum(int,int,int),long,*(char),union(*`,*`))),*(struct(int,*(struct`),int,int,*(*`),*(char),*(char),long,long,long,struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int),*(struct`),*(struct`),*(struct`),*(struct`))),enum(int,int,int),long,*(char),union(*(struct(*`,*`,*`,*`,long)),*(struct(*`,*`)))))
->	O
set	union(*(struct(*(char),*(char),*(char),*(char),long)),*(struct(*(char),*(char))))
.	O
def	*(struct(*(char),*(char),*(char),*(char),long))
[	O
i	long
]	O
)	O
;	O
break	O
;	O
case	O
dict_result_match	int
:	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
res	*(struct(*(struct(*(struct`),*(struct`),enum(int,int,int),long,*(char),union(*`,*`))),*(struct(int,*(struct`),int,int,*(*`),*(char),*(char),long,long,long,struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int),*(struct`),*(struct`),*(struct`),*(struct`))),enum(int,int,int),long,*(char),union(*(struct(*`,*`,*`,*`,long)),*(struct(*`,*`)))))
->	O
count	long
;	O
i	long
++	O
)	O
format_match	(*(struct),*(struct(*(char),*(char))))->(void)
(	O
str	*(char)
,	O
&	O
res	*(struct(*(struct(*(struct`),*(struct`),enum(int,int,int),long,*(char),union(*`,*`))),*(struct(int,*(struct`),int,int,*(*`),*(char),*(char),long,long,long,struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int),*(struct`),*(struct`),*(struct`),*(struct`))),enum(int,int,int),long,*(char),union(*(struct(*`,*`,*`,*`,long)),*(struct(*`,*`)))))
->	O
set	union(*(struct(*(char),*(char),*(char),*(char),long)),*(struct(*(char),*(char))))
.	O
mat	*(struct(*(char),*(char)))
[	O
i	long
]	O
)	O
;	O
break	O
;	O
case	O
dict_result_text	int
:	O
stream_writez	(*(struct),*(char))->(int)
(	O
str	*(char)
,	O
res	*(struct(*(struct(*(struct`),*(struct`),enum(int,int,int),long,*(char),union(*`,*`))),*(struct(int,*(struct`),int,int,*(*`),*(char),*(char),long,long,long,struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int),*(struct`),*(struct`),*(struct`),*(struct`))),enum(int,int,int),long,*(char),union(*(struct(*`,*`,*`,*`,long)),*(struct(*`,*`)))))
->	O
base	int
)	O
;	O
break	O
;	O
}	O
dico_stream_close	(*(struct))->(int)
(	O
str	*(char)
)	O
;	O
dico_stream_destroy	(*(*(struct)))->(void)
(	O
&	O
str	*(char)
)	O
;	O
}	O
struct	O
result_display	struct(*(struct(*(struct(*(struct`),*(char),int,*(*`))),*(char),int,*(*(char)))),*(char),int,*(*(char)))
{	O
struct	O
result_display	struct(*(struct(*(struct(*(struct`),*(char),int,*(*`))),*(char),int,*(*(char)))),*(char),int,*(*(char)))
*	O
next	*(struct(*(struct(*(struct`),*(char),int,*(*`))),*(char),int,*(*(char))))
;	O
char	O
*	O
database	*(char)
;	O
int	O
count	long
;	O
char	O
*	O
*	O
matches	*(*(char))
;	O
}	O
;	O
struct	O
result_display	struct(*(struct(*(struct(*(struct`),*(char),int,*(*`))),*(char),int,*(*(char)))),*(char),int,*(*(char)))
*	O
alloc_display	(*(struct(*(struct(*`,*`,enum(int,int,int),long,*`,union`)),*(struct(int,*`,int,int,*`,*`,*`,long,long,long,struct`,*`,*`,*`,*`)),enum(int,int,int),long,*(char),union(*(struct`),*(struct`)))),long,long)->(*(struct(*(struct(*`,*`,int,*`)),*(char),int,*(*(char)))))
(	O
struct	O
dict_result	struct(*(struct(*(struct(*(struct`),*(struct`),enum(int,int,int),long,*(char),union(*`,*`))),*(struct),enum(int,int,int),long,*(char),union(*(struct(*`,*`,*`,*`,long)),*(struct(*`,*`))))),*(struct),enum(int,int,int),long,*(char),union(*(struct(*(char),*(char),*(char),*(char),long)),*(struct(*(char),*(char)))))
*	O
res	*(struct(*(struct(*(struct`),*(struct`),enum(int,int,int),long,*(char),union(*`,*`))),*(struct(int,*(struct`),int,int,*(*`),*(char),*(char),long,long,long,struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int),*(struct`),*(struct`),*(struct`),*(struct`))),enum(int,int,int),long,*(char),union(*(struct(*`,*`,*`,*`,long)),*(struct(*`,*`)))))
,	O
size_t	long
from	long
,	O
size_t	long
to	long
)	O
{	O
struct	O
result_display	struct(*(struct(*(struct(*(struct`),*(char),int,*(*`))),*(char),int,*(*(char)))),*(char),int,*(*(char)))
*	O
disp	*(struct(*(struct(*(struct`),*(char),int,*(*`))),*(char),int,*(*(char))))
=	O
xmalloc	(long)->(*(void))
(	O
sizeof	O
(	O
*	O
disp	*(struct(*(struct(*(struct`),*(char),int,*(*`))),*(char),int,*(*(char))))
)	O
)	O
;	O
size_t	long
i	long
;	O
disp	*(struct(*(struct(*(struct`),*(char),int,*(*`))),*(char),int,*(*(char))))
->	O
next	*(struct(*(struct(*(struct`),*(char),int,*(*`))),*(char),int,*(*(char))))
=	O
NULL	O
;	O
disp	*(struct(*(struct(*(struct`),*(char),int,*(*`))),*(char),int,*(*(char))))
->	O
database	*(char)
=	O
res	*(struct(*(struct(*(struct`),*(struct`),enum(int,int,int),long,*(char),union(*`,*`))),*(struct(int,*(struct`),int,int,*(*`),*(char),*(char),long,long,long,struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int),*(struct`),*(struct`),*(struct`),*(struct`))),enum(int,int,int),long,*(char),union(*(struct(*`,*`,*`,*`,long)),*(struct(*`,*`)))))
->	O
set	union(*(struct(*(char),*(char),*(char),*(char),long)),*(struct(*(char),*(char))))
.	O
mat	*(struct(*(char),*(char)))
[	O
from	long
]	O
.	O
database	*(char)
;	O
disp	*(struct(*(struct(*(struct`),*(char),int,*(*`))),*(char),int,*(*(char))))
->	O
count	long
=	O
to	long
-	O
from	long
;	O
disp	*(struct(*(struct(*(struct`),*(char),int,*(*`))),*(char),int,*(*(char))))
->	O
matches	*(*(char))
=	O
xcalloc	(long,long)->(*(void))
(	O
to	long
-	O
from	long
,	O
sizeof	O
(	O
disp	*(struct(*(struct(*(struct`),*(char),int,*(*`))),*(char),int,*(*(char))))
->	O
matches	*(*(char))
[	O
0	int
]	O
)	O
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
from	long
<	O
to	long
;	O
i	long
++	O
,	O
from	long
++	O
)	O
disp	*(struct(*(struct(*(struct`),*(char),int,*(*`))),*(char),int,*(*(char))))
->	O
matches	*(*(char))
[	O
i	long
]	O
=	O
res	*(struct(*(struct(*(struct`),*(struct`),enum(int,int,int),long,*(char),union(*`,*`))),*(struct(int,*(struct`),int,int,*(*`),*(char),*(char),long,long,long,struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int),*(struct`),*(struct`),*(struct`),*(struct`))),enum(int,int,int),long,*(char),union(*(struct(*`,*`,*`,*`,long)),*(struct(*`,*`)))))
->	O
set	union(*(struct(*(char),*(char),*(char),*(char),long)),*(struct(*(char),*(char))))
.	O
mat	*(struct(*(char),*(char)))
[	O
from	long
]	O
.	O
word	*(char)
;	O
return	O
disp	*(struct(*(struct(*(struct`),*(char),int,*(*`))),*(char),int,*(*(char))))
;	O
}	O
static	O
char	O
*	O
find_descr	(*(struct(int,*(struct),int,int,*(*(char)),*(char),*(char),long,long,long,struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int),*(struct(*`,*`,enum(int,int,int),long,*`,union`)),*(struct(*`,*`,enum(int,int,int),long,*`,union`)),*(struct(*`,*`,enum(int,int,int),long,*`,union`)),*(struct(*`,*`,enum(int,int,int),long,*`,union`)))),*(char))->(*(char))
(	O
struct	O
dict_connection	struct(int,*(struct),int,int,*(*(char)),*(char),*(char),long,long,long,struct(long,*(struct(*(char),*(struct(*`,*`,array(char))),array(char))),*(char),*(char),*(char),union(long,*(void)),long,union(*((long)->(*(void))),*((*(void),long)->(*(void)))),union(*((*(void))->(void)),*((*(void),*(void))->(void))),*(void),int,int,int),*(struct(*(struct(*(struct`),*(struct`),enum(int,int,int),long,*(char),union(*`,*`))),*(struct(int,*(struct`),int,int,*(*`),*(char),*(char),long,long,long,struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int),*(struct`),*(struct`),*(struct`),*(struct`))),enum(int,int,int),long,*(char),union(*(struct(*`,*`,*`,*`,long)),*(struct(*`,*`))))),*(struct(*(struct(*(struct`),*(struct`),enum(int,int,int),long,*(char),union(*`,*`))),*(struct(int,*(struct`),int,int,*(*`),*(char),*(char),long,long,long,struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int),*(struct`),*(struct`),*(struct`),*(struct`))),enum(int,int,int),long,*(char),union(*(struct(*`,*`,*`,*`,long)),*(struct(*`,*`))))),*(struct(*(struct(*(struct`),*(struct`),enum(int,int,int),long,*(char),union(*`,*`))),*(struct(int,*(struct`),int,int,*(*`),*(char),*(char),long,long,long,struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int),*(struct`),*(struct`),*(struct`),*(struct`))),enum(int,int,int),long,*(char),union(*(struct(*`,*`,*`,*`,long)),*(struct(*`,*`))))),*(struct(*(struct(*(struct`),*(struct`),enum(int,int,int),long,*(char),union(*`,*`))),*(struct(int,*(struct`),int,int,*(*`),*(char),*(char),long,long,long,struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int),*(struct`),*(struct`),*(struct`),*(struct`))),enum(int,int,int),long,*(char),union(*(struct(*`,*`,*`,*`,long)),*(struct(*`,*`))))))
*	O
conn	*(struct)
,	O
const	O
char	O
*	O
name	*(char)
)	O
{	O
if	O
(	O
conn	*(struct)
->	O
db_result	*(struct(*(struct(*(struct`),*(struct`),enum(int,int,int),long,*(char),union(*`,*`))),*(struct(int,*(struct`),int,int,*(*`),*(char),*(char),long,long,long,struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int),*(struct`),*(struct`),*(struct`),*(struct`))),enum(int,int,int),long,*(char),union(*(struct(*`,*`,*`,*`,long)),*(struct(*`,*`)))))
)	O
{	O
size_t	long
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
conn	*(struct)
->	O
db_result	*(struct(*(struct(*(struct`),*(struct`),enum(int,int,int),long,*(char),union(*`,*`))),*(struct(int,*(struct`),int,int,*(*`),*(char),*(char),long,long,long,struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int),*(struct`),*(struct`),*(struct`),*(struct`))),enum(int,int,int),long,*(char),union(*(struct(*`,*`,*`,*`,long)),*(struct(*`,*`)))))
->	O
count	long
;	O
i	long
++	O
)	O
{	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
conn	*(struct)
->	O
db_result	*(struct(*(struct(*(struct`),*(struct`),enum(int,int,int),long,*(char),union(*`,*`))),*(struct(int,*(struct`),int,int,*(*`),*(char),*(char),long,long,long,struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int),*(struct`),*(struct`),*(struct`),*(struct`))),enum(int,int,int),long,*(char),union(*(struct(*`,*`,*`,*`,long)),*(struct(*`,*`)))))
->	O
set	union(*(struct(*(char),*(char),*(char),*(char),long)),*(struct(*(char),*(char))))
.	O
mat	*(struct(*(char),*(char)))
[	O
i	long
]	O
.	O
database	*(char)
,	O
name	*(char)
)	O
==	O
0	int
)	O
return	O
conn	*(struct)
->	O
db_result	*(struct(*(struct(*(struct`),*(struct`),enum(int,int,int),long,*(char),union(*`,*`))),*(struct(int,*(struct`),int,int,*(*`),*(char),*(char),long,long,long,struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int),*(struct`),*(struct`),*(struct`),*(struct`))),enum(int,int,int),long,*(char),union(*(struct(*`,*`,*`,*`,long)),*(struct(*`,*`)))))
->	O
set	union(*(struct(*(char),*(char),*(char),*(char),long)),*(struct(*(char),*(char))))
.	O
mat	*(struct(*(char),*(char)))
[	O
i	long
]	O
.	O
word	*(char)
;	O
}	O
}	O
return	O
_	O
(	O
"(no description available)"	*(char)
)	O
;	O
}	O
void	O
print_match_result	(*(struct(*(struct(*`,*`,enum(int,int,int),long,*`,union`)),*(struct(int,*`,int,int,*`,*`,*`,long,long,long,struct`,*`,*`,*`,*`)),enum(int,int,int),long,*(char),union(*(struct`),*(struct`)))))->(void)
(	O
struct	O
dict_result	struct(*(struct(*(struct(*(struct`),*(struct`),enum(int,int,int),long,*(char),union(*`,*`))),*(struct),enum(int,int,int),long,*(char),union(*(struct(*`,*`,*`,*`,long)),*(struct(*`,*`))))),*(struct),enum(int,int,int),long,*(char),union(*(struct(*(char),*(char),*(char),*(char),long)),*(struct(*(char),*(char)))))
*	O
res	*(struct(*(struct(*(struct`),*(struct`),enum(int,int,int),long,*(char),union(*`,*`))),*(struct(int,*(struct`),int,int,*(*`),*(char),*(char),long,long,long,struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int),*(struct`),*(struct`),*(struct`),*(struct`))),enum(int,int,int),long,*(char),union(*(struct(*`,*`,*`,*`,long)),*(struct(*`,*`)))))
)	O
{	O
struct	O
result_display	struct(*(struct(*(struct(*(struct`),*(char),int,*(*`))),*(char),int,*(*(char)))),*(char),int,*(*(char)))
*	O
head	*(struct(*(struct(*(struct`),*(char),int,*(*`))),*(char),int,*(*(char))))
=	O
NULL	O
,	O
*	O
tail	*(struct(*(struct(*(struct`),*(char),int,*(*`))),*(char),int,*(*(char))))
=	O
NULL	O
;	O
char	O
*	O
dbname	*(char)
=	O
NULL	O
;	O
size_t	long
i	long
,	O
j	long
=	O
0	int
;	O
struct	O
dict_connection	struct(int,*(struct),int,int,*(*(char)),*(char),*(char),long,long,long,struct(long,*(struct(*(char),*(struct(*`,*`,array(char))),array(char))),*(char),*(char),*(char),union(long,*(void)),long,union(*((long)->(*(void))),*((*(void),long)->(*(void)))),union(*((*(void))->(void)),*((*(void),*(void))->(void))),*(void),int,int,int),*(struct(*(struct(*(struct`),*(struct`),enum(int,int,int),long,*(char),union(*`,*`))),*(struct(int,*(struct`),int,int,*(*`),*(char),*(char),long,long,long,struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int),*(struct`),*(struct`),*(struct`),*(struct`))),enum(int,int,int),long,*(char),union(*(struct(*`,*`,*`,*`,long)),*(struct(*`,*`))))),*(struct(*(struct(*(struct`),*(struct`),enum(int,int,int),long,*(char),union(*`,*`))),*(struct(int,*(struct`),int,int,*(*`),*(char),*(char),long,long,long,struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int),*(struct`),*(struct`),*(struct`),*(struct`))),enum(int,int,int),long,*(char),union(*(struct(*`,*`,*`,*`,long)),*(struct(*`,*`))))),*(struct(*(struct(*(struct`),*(struct`),enum(int,int,int),long,*(char),union(*`,*`))),*(struct(int,*(struct`),int,int,*(*`),*(char),*(char),long,long,long,struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int),*(struct`),*(struct`),*(struct`),*(struct`))),enum(int,int,int),long,*(char),union(*(struct(*`,*`,*`,*`,long)),*(struct(*`,*`))))),*(struct(*(struct(*(struct`),*(struct`),enum(int,int,int),long,*(char),union(*`,*`))),*(struct(int,*(struct`),int,int,*(*`),*(char),*(char),long,long,long,struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int),*(struct`),*(struct`),*(struct`),*(struct`))),enum(int,int,int),long,*(char),union(*(struct(*`,*`,*`,*`,long)),*(struct(*`,*`))))))
*	O
conn	*(struct)
=	O
res	*(struct(*(struct(*(struct`),*(struct`),enum(int,int,int),long,*(char),union(*`,*`))),*(struct(int,*(struct`),int,int,*(*`),*(char),*(char),long,long,long,struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int),*(struct`),*(struct`),*(struct`),*(struct`))),enum(int,int,int),long,*(char),union(*(struct(*`,*`,*`,*`,long)),*(struct(*`,*`)))))
->	O
conn	*(struct)
;	O
size_t	long
ndb	long
=	O
0	int
;	O
dico_stream_t	*(struct)
str	*(char)
;	O
struct	O
result_display	struct(*(struct(*(struct(*(struct`),*(char),int,*(*`))),*(char),int,*(*(char)))),*(char),int,*(*(char)))
*	O
p	*(void)
;	O
dbname	*(char)
=	O
res	*(struct(*(struct(*(struct`),*(struct`),enum(int,int,int),long,*(char),union(*`,*`))),*(struct(int,*(struct`),int,int,*(*`),*(char),*(char),long,long,long,struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int),*(struct`),*(struct`),*(struct`),*(struct`))),enum(int,int,int),long,*(char),union(*(struct(*`,*`,*`,*`,long)),*(struct(*`,*`)))))
->	O
set	union(*(struct(*(char),*(char),*(char),*(char),long)),*(struct(*(char),*(char))))
.	O
mat	*(struct(*(char),*(char)))
[	O
0	int
]	O
.	O
database	*(char)
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<	O
res	*(struct(*(struct(*(struct`),*(struct`),enum(int,int,int),long,*(char),union(*`,*`))),*(struct(int,*(struct`),int,int,*(*`),*(char),*(char),long,long,long,struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int),*(struct`),*(struct`),*(struct`),*(struct`))),enum(int,int,int),long,*(char),union(*(struct(*`,*`,*`,*`,long)),*(struct(*`,*`)))))
->	O
count	long
;	O
i	long
++	O
)	O
{	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
res	*(struct(*(struct(*(struct`),*(struct`),enum(int,int,int),long,*(char),union(*`,*`))),*(struct(int,*(struct`),int,int,*(*`),*(char),*(char),long,long,long,struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int),*(struct`),*(struct`),*(struct`),*(struct`))),enum(int,int,int),long,*(char),union(*(struct(*`,*`,*`,*`,long)),*(struct(*`,*`)))))
->	O
set	union(*(struct(*(char),*(char),*(char),*(char),long)),*(struct(*(char),*(char))))
.	O
mat	*(struct(*(char),*(char)))
[	O
i	long
]	O
.	O
database	*(char)
,	O
dbname	*(char)
)	O
)	O
ALLOC_DISPLAY	O
(	O
)	O
;	O
}	O
ALLOC_DISPLAY	O
(	O
)	O
;	O
str	*(char)
=	O
create_pager_stream	(long)->(*(struct))
(	O
ndb	long
+	O
result_count_lines	(*(struct(*(struct(*`,*`,enum(int,int,int),long,*`,union`)),*(struct(int,*`,int,int,*`,*`,*`,long,long,long,struct`,*`,*`,*`,*`)),enum(int,int,int),long,*(char),union(*(struct`),*(struct`)))))->(long)
(	O
res	*(struct(*(struct(*(struct`),*(struct`),enum(int,int,int),long,*(char),union(*`,*`))),*(struct(int,*(struct`),int,int,*(*`),*(char),*(char),long,long,long,struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int),*(struct`),*(struct`),*(struct`),*(struct`))),enum(int,int,int),long,*(char),union(*(struct(*`,*`,*`,*`,long)),*(struct(*`,*`)))))
)	O
)	O
;	O
j	long
=	O
0	int
;	O
for	O
(	O
p	*(void)
=	O
head	*(struct(*(struct(*(struct`),*(char),int,*(*`))),*(char),int,*(*(char))))
;	O
p	*(void)
;	O
)	O
{	O
struct	O
result_display	struct(*(struct(*(struct(*(struct`),*(char),int,*(*`))),*(char),int,*(*(char)))),*(char),int,*(*(char)))
*	O
next	*(struct(*(struct(*(struct`),*(char),int,*(*`))),*(char),int,*(*(char))))
=	O
p	*(void)
->	O
next	*(struct(*(struct(*(struct`),*(char),int,*(*`))),*(char),int,*(*(char))))
;	O
stream_printf	(*(struct),*(char))->(int)
(	O
str	*(char)
,	O
_	O
(	O
"From %s, %s:\n"	*(char)
)	O
,	O
p	*(void)
->	O
database	*(char)
,	O
find_descr	(*(struct(int,*(struct),int,int,*(*(char)),*(char),*(char),long,long,long,struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int),*(struct(*`,*`,enum(int,int,int),long,*`,union`)),*(struct(*`,*`,enum(int,int,int),long,*`,union`)),*(struct(*`,*`,enum(int,int,int),long,*`,union`)),*(struct(*`,*`,enum(int,int,int),long,*`,union`)))),*(char))->(*(char))
(	O
conn	*(struct)
,	O
p	*(void)
->	O
database	*(char)
)	O
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
p	*(void)
->	O
count	long
;	O
i	long
++	O
,	O
j	long
++	O
)	O
stream_printf	(*(struct),*(char))->(int)
(	O
str	*(char)
,	O
"%4d) \"%s\"\n"	*(char)
,	O
j	long
,	O
p	*(void)
->	O
matches	*(*(char))
[	O
i	long
]	O
)	O
;	O
free	(*(void))->(void)
(	O
p	*(void)
->	O
matches	*(*(char))
)	O
;	O
free	(*(void))->(void)
(	O
p	*(void)
)	O
;	O
p	*(void)
=	O
next	*(struct(*(struct(*(struct`),*(char),int,*(*`))),*(char),int,*(*(char))))
;	O
}	O
dico_stream_close	(*(struct))->(int)
(	O
str	*(char)
)	O
;	O
dico_stream_destroy	(*(*(struct)))->(void)
(	O
&	O
str	*(char)
)	O
;	O
}	O
int	O
dict_lookup	(*(struct(int,*(struct),int,int,*(*(char)),*(char),*(char),long,long,long,struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int),*(struct(*`,*`,enum(int,int,int),long,*`,union`)),*(struct(*`,*`,enum(int,int,int),long,*`,union`)),*(struct(*`,*`,enum(int,int,int),long,*`,union`)),*(struct(*`,*`,enum(int,int,int),long,*`,union`)))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),struct(int,*(char),*(char),*(char),long))))->(int)
(	O
struct	O
dict_connection	struct(int,*(struct),int,int,*(*(char)),*(char),*(char),long,long,long,struct(long,*(struct(*(char),*(struct(*`,*`,array(char))),array(char))),*(char),*(char),*(char),union(long,*(void)),long,union(*((long)->(*(void))),*((*(void),long)->(*(void)))),union(*((*(void))->(void)),*((*(void),*(void))->(void))),*(void),int,int,int),*(struct(*(struct(*(struct`),*(struct`),enum(int,int,int),long,*(char),union(*`,*`))),*(struct(int,*(struct`),int,int,*(*`),*(char),*(char),long,long,long,struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int),*(struct`),*(struct`),*(struct`),*(struct`))),enum(int,int,int),long,*(char),union(*(struct(*`,*`,*`,*`,long)),*(struct(*`,*`))))),*(struct(*(struct(*(struct`),*(struct`),enum(int,int,int),long,*(char),union(*`,*`))),*(struct(int,*(struct`),int,int,*(*`),*(char),*(char),long,long,long,struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int),*(struct`),*(struct`),*(struct`),*(struct`))),enum(int,int,int),long,*(char),union(*(struct(*`,*`,*`,*`,long)),*(struct(*`,*`))))),*(struct(*(struct(*(struct`),*(struct`),enum(int,int,int),long,*(char),union(*`,*`))),*(struct(int,*(struct`),int,int,*(*`),*(char),*(char),long,long,long,struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int),*(struct`),*(struct`),*(struct`),*(struct`))),enum(int,int,int),long,*(char),union(*(struct(*`,*`,*`,*`,long)),*(struct(*`,*`))))),*(struct(*(struct(*(struct`),*(struct`),enum(int,int,int),long,*(char),union(*`,*`))),*(struct(int,*(struct`),int,int,*(*`),*(char),*(char),long,long,long,struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int),*(struct`),*(struct`),*(struct`),*(struct`))),enum(int,int,int),long,*(char),union(*(struct(*`,*`,*`,*`,long)),*(struct(*`,*`))))))
*	O
conn	*(struct)
,	O
dico_url_t	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),struct(int,*(char),*(char),*(char),long)))
url	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),struct(int,*(char),*(char),*(char),long)))
)	O
{	O
int	O
rc	int
;	O
switch	O
(	O
url	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),struct(int,*(char),*(char),*(char),long)))
->	O
req	struct(int,*(char),*(char),*(char),long)
.	O
type	enum(int,int,int)
)	O
{	O
case	O
DICO_REQUEST_DEFINE	int
:	O
rc	int
=	O
dict_define	(*(struct(int,*(struct),int,int,*(*(char)),*(char),*(char),long,long,long,struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int),*(struct(*`,*`,enum(int,int,int),long,*`,union`)),*(struct(*`,*`,enum(int,int,int),long,*`,union`)),*(struct(*`,*`,enum(int,int,int),long,*`,union`)),*(struct(*`,*`,enum(int,int,int),long,*`,union`)))),*(char),*(char))->(int)
(	O
conn	*(struct)
,	O
quotearg_n	(int,*(char))->(*(char))
(	O
0	int
,	O
url	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),struct(int,*(char),*(char),*(char),long)))
->	O
req	struct(int,*(char),*(char),*(char),long)
.	O
database	*(char)
)	O
,	O
quotearg_n	(int,*(char))->(*(char))
(	O
1	int
,	O
url	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),struct(int,*(char),*(char),*(char),long)))
->	O
req	struct(int,*(char),*(char),*(char),long)
.	O
word	*(char)
)	O
)	O
;	O
break	O
;	O
case	O
DICO_REQUEST_MATCH	int
:	O
rc	int
=	O
dict_match	(*(struct(int,*(struct),int,int,*(*(char)),*(char),*(char),long,long,long,struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int),*(struct(*`,*`,enum(int,int,int),long,*`,union`)),*(struct(*`,*`,enum(int,int,int),long,*`,union`)),*(struct(*`,*`,enum(int,int,int),long,*`,union`)),*(struct(*`,*`,enum(int,int,int),long,*`,union`)))),*(char),*(char),*(char))->(int)
(	O
conn	*(struct)
,	O
quotearg_n	(int,*(char))->(*(char))
(	O
0	int
,	O
url	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),struct(int,*(char),*(char),*(char),long)))
->	O
req	struct(int,*(char),*(char),*(char),long)
.	O
database	*(char)
)	O
,	O
quotearg_n	(int,*(char))->(*(char))
(	O
1	int
,	O
url	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),struct(int,*(char),*(char),*(char),long)))
->	O
req	struct(int,*(char),*(char),*(char),long)
.	O
strategy	*(char)
)	O
,	O
quotearg_n	(int,*(char))->(*(char))
(	O
2	int
,	O
url	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),struct(int,*(char),*(char),*(char),long)))
->	O
req	struct(int,*(char),*(char),*(char),long)
.	O
word	*(char)
)	O
)	O
;	O
break	O
;	O
default	O
:	O
dico_log	(int,int,*(char))->(void)
(	O
L_CRIT	int
,	O
0	int
,	O
_	O
(	O
"%s:%d: INTERNAL ERROR: unexpected request type"	*(char)
)	O
,	O
__FILE__	O
,	O
__LINE__	O
)	O
;	O
}	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
struct	O
dict_result	struct(*(struct(*(struct(*(struct`),*(struct`),enum(int,int,int),long,*(char),union(*`,*`))),*(struct),enum(int,int,int),long,*(char),union(*(struct(*`,*`,*`,*`,long)),*(struct(*`,*`))))),*(struct),enum(int,int,int),long,*(char),union(*(struct(*(char),*(char),*(char),*(char),long)),*(struct(*(char),*(char)))))
*	O
res	*(struct(*(struct(*(struct`),*(struct`),enum(int,int,int),long,*(char),union(*`,*`))),*(struct(int,*(struct`),int,int,*(*`),*(char),*(char),long,long,long,struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int),*(struct`),*(struct`),*(struct`),*(struct`))),enum(int,int,int),long,*(char),union(*(struct(*`,*`,*`,*`,long)),*(struct(*`,*`)))))
=	O
dict_conn_last_result	O
(	O
conn	*(struct)
)	O
;	O
print_result	(*(struct(*(struct(*`,*`,enum(int,int,int),long,*`,union`)),*(struct(int,*`,int,int,*`,*`,*`,long,long,long,struct`,*`,*`,*`,*`)),enum(int,int,int),long,*(char),union(*(struct`),*(struct`)))))->(void)
(	O
res	*(struct(*(struct(*(struct`),*(struct`),enum(int,int,int),long,*(char),union(*`,*`))),*(struct(int,*(struct`),int,int,*(*`),*(char),*(char),long,long,long,struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int),*(struct`),*(struct`),*(struct`),*(struct`))),enum(int,int,int),long,*(char),union(*(struct(*`,*`,*`,*`,long)),*(struct(*`,*`)))))
)	O
;	O
dict_result_free	(*(struct(*(struct(*`,*`,enum(int,int,int),long,*`,union`)),*(struct(int,*`,int,int,*`,*`,*`,long,long,long,struct`,*`,*`,*`,*`)),enum(int,int,int),long,*(char),union(*(struct`),*(struct`)))))->(void)
(	O
res	*(struct(*(struct(*(struct`),*(struct`),enum(int,int,int),long,*(char),union(*`,*`))),*(struct(int,*(struct`),int,int,*(*`),*(char),*(char),long,long,long,struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int),*(struct`),*(struct`),*(struct`),*(struct`))),enum(int,int,int),long,*(char),union(*(struct(*`,*`,*`,*`,long)),*(struct(*`,*`)))))
)	O
;	O
}	O
else	O
print_reply	(*(struct(int,*(struct),int,int,*(*(char)),*(char),*(char),long,long,long,struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int),*(struct(*`,*`,enum(int,int,int),long,*`,union`)),*(struct(*`,*`,enum(int,int,int),long,*`,union`)),*(struct(*`,*`,enum(int,int,int),long,*`,union`)),*(struct(*`,*`,enum(int,int,int),long,*`,union`)))))->(void)
(	O
conn	*(struct)
)	O
;	O
return	O
0	int
;	O
}	O
int	O
dict_lookup_url	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),struct(int,*(char),*(char),*(char),long))))->(int)
(	O
dico_url_t	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),struct(int,*(char),*(char),*(char),long)))
url	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),struct(int,*(char),*(char),*(char),long)))
)	O
{	O
struct	O
dict_connection	struct(int,*(struct),int,int,*(*(char)),*(char),*(char),long,long,long,struct(long,*(struct(*(char),*(struct(*`,*`,array(char))),array(char))),*(char),*(char),*(char),union(long,*(void)),long,union(*((long)->(*(void))),*((*(void),long)->(*(void)))),union(*((*(void))->(void)),*((*(void),*(void))->(void))),*(void),int,int,int),*(struct(*(struct(*(struct`),*(struct`),enum(int,int,int),long,*(char),union(*`,*`))),*(struct(int,*(struct`),int,int,*(*`),*(char),*(char),long,long,long,struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int),*(struct`),*(struct`),*(struct`),*(struct`))),enum(int,int,int),long,*(char),union(*(struct(*`,*`,*`,*`,long)),*(struct(*`,*`))))),*(struct(*(struct(*(struct`),*(struct`),enum(int,int,int),long,*(char),union(*`,*`))),*(struct(int,*(struct`),int,int,*(*`),*(char),*(char),long,long,long,struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int),*(struct`),*(struct`),*(struct`),*(struct`))),enum(int,int,int),long,*(char),union(*(struct(*`,*`,*`,*`,long)),*(struct(*`,*`))))),*(struct(*(struct(*(struct`),*(struct`),enum(int,int,int),long,*(char),union(*`,*`))),*(struct(int,*(struct`),int,int,*(*`),*(char),*(char),long,long,long,struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int),*(struct`),*(struct`),*(struct`),*(struct`))),enum(int,int,int),long,*(char),union(*(struct(*`,*`,*`,*`,long)),*(struct(*`,*`))))),*(struct(*(struct(*(struct`),*(struct`),enum(int,int,int),long,*(char),union(*`,*`))),*(struct(int,*(struct`),int,int,*(*`),*(char),*(char),long,long,long,struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int),*(struct`),*(struct`),*(struct`),*(struct`))),enum(int,int,int),long,*(char),union(*(struct(*`,*`,*`,*`,long)),*(struct(*`,*`))))))
*	O
conn	*(struct)
;	O
if	O
(	O
!	O
url	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),struct(int,*(char),*(char),*(char),long)))
->	O
host	*(char)
)	O
{	O
dico_log	(int,int,*(char))->(void)
(	O
L_ERR	int
,	O
0	int
,	O
_	O
(	O
"Server name or IP not specified"	*(char)
)	O
)	O
;	O
return	O
1	int
;	O
}	O
if	O
(	O
dict_connect	(*(*(struct(int,*(struct`),int,int,*(*`),*(char),*(char),long,long,long,struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int),*(struct`),*(struct`),*(struct`),*(struct`)))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),struct(int,*(char),*(char),*(char),long))))->(int)
(	O
&	O
conn	*(struct)
,	O
url	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),struct(int,*(char),*(char),*(char),long)))
)	O
)	O
return	O
1	int
;	O
dict_lookup	(*(struct(int,*(struct),int,int,*(*(char)),*(char),*(char),long,long,long,struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int),*(struct(*`,*`,enum(int,int,int),long,*`,union`)),*(struct(*`,*`,enum(int,int,int),long,*`,union`)),*(struct(*`,*`,enum(int,int,int),long,*`,union`)),*(struct(*`,*`,enum(int,int,int),long,*`,union`)))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),struct(int,*(char),*(char),*(char),long))))->(int)
(	O
conn	*(struct)
,	O
url	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),struct(int,*(char),*(char),*(char),long)))
)	O
;	O
XDICO_DEBUG	O
(	O
1	int
,	O
_	O
(	O
"Quitting\n"	*(char)
)	O
)	O
;	O
stream_printf	(*(struct),*(char))->(int)
(	O
conn	*(struct)
->	O
str	*(char)
,	O
"QUIT\r\n"	*(char)
)	O
;	O
dict_read_reply	(*(struct(int,*(struct),int,int,*(*(char)),*(char),*(char),long,long,long,struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int),*(struct(*`,*`,enum(int,int,int),long,*`,union`)),*(struct(*`,*`,enum(int,int,int),long,*`,union`)),*(struct(*`,*`,enum(int,int,int),long,*`,union`)),*(struct(*`,*`,enum(int,int,int),long,*`,union`)))))->(int)
(	O
conn	*(struct)
)	O
;	O
dict_conn_close	(*(struct(int,*(struct),int,int,*(*(char)),*(char),*(char),long,long,long,struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int),*(struct(*`,*`,enum(int,int,int),long,*`,union`)),*(struct(*`,*`,enum(int,int,int),long,*`,union`)),*(struct(*`,*`,enum(int,int,int),long,*`,union`)),*(struct(*`,*`,enum(int,int,int),long,*`,union`)))))->(void)
(	O
conn	*(struct)
)	O
;	O
return	O
0	int
;	O
}	O
int	O
dict_word	(*(char))->(int)
(	O
char	O
*	O
word	*(char)
)	O
{	O
int	O
rc	int
;	O
dico_url_t	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),struct(int,*(char),*(char),*(char),long)))
url	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),struct(int,*(char),*(char),*(char),long)))
;	O
if	O
(	O
memcmp	(*(void),*(void),long)->(int)
(	O
word	*(char)
,	O
"dict://"	*(char)
,	O
7	int
)	O
==	O
0	int
)	O
{	O
if	O
(	O
dico_url_parse	(*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),struct(int,*`,*`,*`,long)))),*(char))->(int)
(	O
&	O
url	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),struct(int,*(char),*(char),*(char),long)))
,	O
word	*(char)
)	O
)	O
return	O
1	int
;	O
rc	int
=	O
dict_lookup_url	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),struct(int,*(char),*(char),*(char),long))))->(int)
(	O
url	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),struct(int,*(char),*(char),*(char),long)))
)	O
;	O
dico_url_destroy	(*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),struct(int,*`,*`,*`,long)))))->(void)
(	O
&	O
url	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),struct(int,*(char),*(char),*(char),long)))
)	O
;	O
}	O
else	O
{	O
dico_url	struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),struct(int,*(char),*(char),*(char),long))
.	O
req	struct(int,*(char),*(char),*(char),long)
.	O
word	*(char)
=	O
word	*(char)
;	O
rc	int
=	O
dict_lookup_url	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),struct(int,*(char),*(char),*(char),long))))->(int)
(	O
&	O
dico_url	struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),struct(int,*(char),*(char),*(char),long))
)	O
;	O
}	O
return	O
rc	int
;	O
}	O
void	O
dict_run_single_command	(*(struct(int,*(struct),int,int,*(*(char)),*(char),*(char),long,long,long,struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int),*(struct(*`,*`,enum(int,int,int),long,*`,union`)),*(struct(*`,*`,enum(int,int,int),long,*`,union`)),*(struct(*`,*`,enum(int,int,int),long,*`,union`)),*(struct(*`,*`,enum(int,int,int),long,*`,union`)))),*(char),*(char),*(char))->(void)
(	O
struct	O
dict_connection	struct(int,*(struct),int,int,*(*(char)),*(char),*(char),long,long,long,struct(long,*(struct(*(char),*(struct(*`,*`,array(char))),array(char))),*(char),*(char),*(char),union(long,*(void)),long,union(*((long)->(*(void))),*((*(void),long)->(*(void)))),union(*((*(void))->(void)),*((*(void),*(void))->(void))),*(void),int,int,int),*(struct(*(struct(*(struct`),*(struct`),enum(int,int,int),long,*(char),union(*`,*`))),*(struct(int,*(struct`),int,int,*(*`),*(char),*(char),long,long,long,struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int),*(struct`),*(struct`),*(struct`),*(struct`))),enum(int,int,int),long,*(char),union(*(struct(*`,*`,*`,*`,long)),*(struct(*`,*`))))),*(struct(*(struct(*(struct`),*(struct`),enum(int,int,int),long,*(char),union(*`,*`))),*(struct(int,*(struct`),int,int,*(*`),*(char),*(char),long,long,long,struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int),*(struct`),*(struct`),*(struct`),*(struct`))),enum(int,int,int),long,*(char),union(*(struct(*`,*`,*`,*`,long)),*(struct(*`,*`))))),*(struct(*(struct(*(struct`),*(struct`),enum(int,int,int),long,*(char),union(*`,*`))),*(struct(int,*(struct`),int,int,*(*`),*(char),*(char),long,long,long,struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int),*(struct`),*(struct`),*(struct`),*(struct`))),enum(int,int,int),long,*(char),union(*(struct(*`,*`,*`,*`,long)),*(struct(*`,*`))))),*(struct(*(struct(*(struct`),*(struct`),enum(int,int,int),long,*(char),union(*`,*`))),*(struct(int,*(struct`),int,int,*(*`),*(char),*(char),long,long,long,struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int),*(struct`),*(struct`),*(struct`),*(struct`))),enum(int,int,int),long,*(char),union(*(struct(*`,*`,*`,*`,long)),*(struct(*`,*`))))))
*	O
conn	*(struct)
,	O
const	O
char	O
*	O
cmd	*(char)
,	O
const	O
char	O
*	O
arg	*(char)
,	O
const	O
char	O
*	O
code	int
)	O
{	O
if	O
(	O
arg	*(char)
)	O
stream_printf	(*(struct),*(char))->(int)
(	O
conn	*(struct)
->	O
str	*(char)
,	O
"%s \"%s\"\r\n"	*(char)
,	O
cmd	*(char)
,	O
arg	*(char)
)	O
;	O
else	O
stream_printf	(*(struct),*(char))->(int)
(	O
conn	*(struct)
->	O
str	*(char)
,	O
"%s\r\n"	*(char)
,	O
cmd	*(char)
)	O
;	O
dict_read_reply	(*(struct(int,*(struct),int,int,*(*(char)),*(char),*(char),long,long,long,struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int),*(struct(*`,*`,enum(int,int,int),long,*`,union`)),*(struct(*`,*`,enum(int,int,int),long,*`,union`)),*(struct(*`,*`,enum(int,int,int),long,*`,union`)),*(struct(*`,*`,enum(int,int,int),long,*`,union`)))))->(int)
(	O
conn	*(struct)
)	O
;	O
if	O
(	O
!	O
dict_status_p	(*(struct(int,*(struct),int,int,*(*(char)),*(char),*(char),long,long,long,struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int),*(struct(*`,*`,enum(int,int,int),long,*`,union`)),*(struct(*`,*`,enum(int,int,int),long,*`,union`)),*(struct(*`,*`,enum(int,int,int),long,*`,union`)),*(struct(*`,*`,enum(int,int,int),long,*`,union`)))),*(char))->(int)
(	O
conn	*(struct)
,	O
code	int
)	O
)	O
print_reply	(*(struct(int,*(struct),int,int,*(*(char)),*(char),*(char),long,long,long,struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int),*(struct(*`,*`,enum(int,int,int),long,*`,union`)),*(struct(*`,*`,enum(int,int,int),long,*`,union`)),*(struct(*`,*`,enum(int,int,int),long,*`,union`)),*(struct(*`,*`,enum(int,int,int),long,*`,union`)))))->(void)
(	O
conn	*(struct)
)	O
;	O
else	O
{	O
struct	O
dict_result	struct(*(struct(*(struct(*(struct`),*(struct`),enum(int,int,int),long,*(char),union(*`,*`))),*(struct),enum(int,int,int),long,*(char),union(*(struct(*`,*`,*`,*`,long)),*(struct(*`,*`))))),*(struct),enum(int,int,int),long,*(char),union(*(struct(*(char),*(char),*(char),*(char),long)),*(struct(*(char),*(char)))))
*	O
res	*(struct(*(struct(*(struct`),*(struct`),enum(int,int,int),long,*(char),union(*`,*`))),*(struct(int,*(struct`),int,int,*(*`),*(char),*(char),long,long,long,struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int),*(struct`),*(struct`),*(struct`),*(struct`))),enum(int,int,int),long,*(char),union(*(struct(*`,*`,*`,*`,long)),*(struct(*`,*`)))))
;	O
dict_multiline_reply	(*(struct(int,*(struct),int,int,*(*(char)),*(char),*(char),long,long,long,struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int),*(struct(*`,*`,enum(int,int,int),long,*`,union`)),*(struct(*`,*`,enum(int,int,int),long,*`,union`)),*(struct(*`,*`,enum(int,int,int),long,*`,union`)),*(struct(*`,*`,enum(int,int,int),long,*`,union`)))))->(int)
(	O
conn	*(struct)
)	O
;	O
dict_read_reply	(*(struct(int,*(struct),int,int,*(*(char)),*(char),*(char),long,long,long,struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int),*(struct(*`,*`,enum(int,int,int),long,*`,union`)),*(struct(*`,*`,enum(int,int,int),long,*`,union`)),*(struct(*`,*`,enum(int,int,int),long,*`,union`)),*(struct(*`,*`,enum(int,int,int),long,*`,union`)))))->(int)
(	O
conn	*(struct)
)	O
;	O
dict_result_create	(*(struct(int,*(struct),int,int,*(*(char)),*(char),*(char),long,long,long,struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int),*(struct(*`,*`,enum(int,int,int),long,*`,union`)),*(struct(*`,*`,enum(int,int,int),long,*`,union`)),*(struct(*`,*`,enum(int,int,int),long,*`,union`)),*(struct(*`,*`,enum(int,int,int),long,*`,union`)))),enum(int,int,int),long,*(char))->(*(struct(*(struct(*`,*`,enum(int,int,int),long,*`,union`)),*(struct(int,*`,int,int,*`,*`,*`,long,long,long,struct`,*`,*`,*`,*`)),enum(int,int,int),long,*(char),union(*(struct`),*(struct`)))))
(	O
conn	*(struct)
,	O
dict_result_text	int
,	O
1	int
,	O
obstack_finish	O
(	O
&	O
conn	*(struct)
->	O
stk	struct(long,*(struct(*(char),*(struct(*`,*`,array(char))),array(char))),*(char),*(char),*(char),union(long,*(void)),long,union(*((long)->(*(void))),*((*(void),long)->(*(void)))),union(*((*(void))->(void)),*((*(void),*(void))->(void))),*(void),int,int,int)
)	O
)	O
;	O
res	*(struct(*(struct(*(struct`),*(struct`),enum(int,int,int),long,*(char),union(*`,*`))),*(struct(int,*(struct`),int,int,*(*`),*(char),*(char),long,long,long,struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int),*(struct`),*(struct`),*(struct`),*(struct`))),enum(int,int,int),long,*(char),union(*(struct(*`,*`,*`,*`,long)),*(struct(*`,*`)))))
=	O
dict_conn_last_result	O
(	O
conn	*(struct)
)	O
;	O
print_result	(*(struct(*(struct(*`,*`,enum(int,int,int),long,*`,union`)),*(struct(int,*`,int,int,*`,*`,*`,long,long,long,struct`,*`,*`,*`,*`)),enum(int,int,int),long,*(char),union(*(struct`),*(struct`)))))->(void)
(	O
res	*(struct(*(struct(*(struct`),*(struct`),enum(int,int,int),long,*(char),union(*`,*`))),*(struct(int,*(struct`),int,int,*(*`),*(char),*(char),long,long,long,struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int),*(struct`),*(struct`),*(struct`),*(struct`))),enum(int,int,int),long,*(char),union(*(struct(*`,*`,*`,*`,long)),*(struct(*`,*`)))))
)	O
;	O
dict_result_free	(*(struct(*(struct(*`,*`,enum(int,int,int),long,*`,union`)),*(struct(int,*`,int,int,*`,*`,*`,long,long,long,struct`,*`,*`,*`,*`)),enum(int,int,int),long,*(char),union(*(struct`),*(struct`)))))->(void)
(	O
res	*(struct(*(struct(*(struct`),*(struct`),enum(int,int,int),long,*(char),union(*`,*`))),*(struct(int,*(struct`),int,int,*(*`),*(char),*(char),long,long,long,struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int),*(struct`),*(struct`),*(struct`),*(struct`))),enum(int,int,int),long,*(char),union(*(struct(*`,*`,*`,*`,long)),*(struct(*`,*`)))))
)	O
;	O
}	O
}	O
int	O
dict_single_command	(*(char),*(char),*(char))->(int)
(	O
char	O
*	O
cmd	*(char)
,	O
char	O
*	O
arg	*(char)
,	O
char	O
*	O
code	int
)	O
{	O
struct	O
dict_connection	struct(int,*(struct),int,int,*(*(char)),*(char),*(char),long,long,long,struct(long,*(struct(*(char),*(struct(*`,*`,array(char))),array(char))),*(char),*(char),*(char),union(long,*(void)),long,union(*((long)->(*(void))),*((*(void),long)->(*(void)))),union(*((*(void))->(void)),*((*(void),*(void))->(void))),*(void),int,int,int),*(struct(*(struct(*(struct`),*(struct`),enum(int,int,int),long,*(char),union(*`,*`))),*(struct(int,*(struct`),int,int,*(*`),*(char),*(char),long,long,long,struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int),*(struct`),*(struct`),*(struct`),*(struct`))),enum(int,int,int),long,*(char),union(*(struct(*`,*`,*`,*`,long)),*(struct(*`,*`))))),*(struct(*(struct(*(struct`),*(struct`),enum(int,int,int),long,*(char),union(*`,*`))),*(struct(int,*(struct`),int,int,*(*`),*(char),*(char),long,long,long,struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int),*(struct`),*(struct`),*(struct`),*(struct`))),enum(int,int,int),long,*(char),union(*(struct(*`,*`,*`,*`,long)),*(struct(*`,*`))))),*(struct(*(struct(*(struct`),*(struct`),enum(int,int,int),long,*(char),union(*`,*`))),*(struct(int,*(struct`),int,int,*(*`),*(char),*(char),long,long,long,struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int),*(struct`),*(struct`),*(struct`),*(struct`))),enum(int,int,int),long,*(char),union(*(struct(*`,*`,*`,*`,long)),*(struct(*`,*`))))),*(struct(*(struct(*(struct`),*(struct`),enum(int,int,int),long,*(char),union(*`,*`))),*(struct(int,*(struct`),int,int,*(*`),*(char),*(char),long,long,long,struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int),*(struct`),*(struct`),*(struct`),*(struct`))),enum(int,int,int),long,*(char),union(*(struct(*`,*`,*`,*`,long)),*(struct(*`,*`))))))
*	O
conn	*(struct)
;	O
if	O
(	O
!	O
dico_url	struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),struct(int,*(char),*(char),*(char),long))
.	O
host	*(char)
)	O
{	O
dico_log	(int,int,*(char))->(void)
(	O
L_ERR	int
,	O
0	int
,	O
_	O
(	O
"Server name or IP not specified"	*(char)
)	O
)	O
;	O
return	O
1	int
;	O
}	O
if	O
(	O
dict_connect	(*(*(struct(int,*(struct`),int,int,*(*`),*(char),*(char),long,long,long,struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int),*(struct`),*(struct`),*(struct`),*(struct`)))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),struct(int,*(char),*(char),*(char),long))))->(int)
(	O
&	O
conn	*(struct)
,	O
&	O
dico_url	struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),struct(int,*(char),*(char),*(char),long))
)	O
)	O
return	O
1	int
;	O
dict_run_single_command	(*(struct(int,*(struct),int,int,*(*(char)),*(char),*(char),long,long,long,struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int),*(struct(*`,*`,enum(int,int,int),long,*`,union`)),*(struct(*`,*`,enum(int,int,int),long,*`,union`)),*(struct(*`,*`,enum(int,int,int),long,*`,union`)),*(struct(*`,*`,enum(int,int,int),long,*`,union`)))),*(char),*(char),*(char))->(void)
(	O
conn	*(struct)
,	O
cmd	*(char)
,	O
arg	*(char)
,	O
code	int
)	O
;	O
dict_conn_close	(*(struct(int,*(struct),int,int,*(*(char)),*(char),*(char),long,long,long,struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int),*(struct(*`,*`,enum(int,int,int),long,*`,union`)),*(struct(*`,*`,enum(int,int,int),long,*`,union`)),*(struct(*`,*`,enum(int,int,int),long,*`,union`)),*(struct(*`,*`,enum(int,int,int),long,*`,union`)))))->(void)
(	O
conn	*(struct)
)	O
;	O
return	O
0	int
;	O
}	O
