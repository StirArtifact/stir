RCSTAG_CC	O
(	O
"$Id$"	*(char)
)	O
;	O
static	O
char	O
*	O
simple_backup_suffix	*(char)
=	O
BACKUP_SUFFIX_STR	*(char)
;	O
backup_mode_ty	enum(int,int,int,int,int)
version_control	enum(int,int,int,int,int)
=	O
unknown	int
;	O
int	O
version_width	int
=	O
1	int
;	O
static	O
char	O
*	O
simple_backup_name	(*(char))->(*(char))
(	O
char	O
*	O
pathname	*(char)
)	O
{	O
char	O
*	O
backup_name	*(char)
;	O
backup_name	*(char)
=	O
xmalloc	(int)->(*(void))
(	O
strlen	(*(char))->(long)
(	O
pathname	*(char)
)	O
+	O
strlen	(*(char))->(long)
(	O
simple_backup_suffix	*(char)
)	O
+	O
2	int
)	O
;	O
sprintf	(*(char),*(char))->(int)
(	O
backup_name	*(char)
,	O
"%s%s"	*(char)
,	O
pathname	*(char)
,	O
simple_backup_suffix	*(char)
)	O
;	O
return	O
backup_name	*(char)
;	O
}	O
static	O
int	O
version_number	(*(char),*(char),int)->(int)
(	O
char	O
*	O
base	*(char)
,	O
char	O
*	O
direntry	*(char)
,	O
int	O
base_length	int
)	O
{	O
int	O
version	int
;	O
char	O
*	O
p	*(char)
=	O
NULL	O
;	O
version	int
=	O
0	int
;	O
if	O
(	O
!	O
strncmp	(*(char),*(char),long)->(int)
(	O
base	*(char)
,	O
direntry	*(char)
,	O
base_length	int
)	O
&&	O
ISDIGIT	O
(	O
direntry	*(char)
[	O
base_length	int
+	O
2	int
]	O
)	O
)	O
{	O
for	O
(	O
p	*(char)
=	O
&	O
direntry	*(char)
[	O
base_length	int
+	O
2	int
]	O
;	O
ISDIGIT	O
(	O
*	O
p	*(char)
)	O
;	O
++	O
p	*(char)
)	O
{	O
version	int
=	O
version	int
*	O
10	int
+	O
*	O
p	*(char)
-	O
'0'	O
;	O
}	O
if	O
(	O
p	*(char)
[	O
0	int
]	O
!=	O
BACKUP_SUFFIX_CHAR	char
||	O
p	*(char)
[	O
1	int
]	O
)	O
{	O
version	int
=	O
0	int
;	O
}	O
}	O
return	O
version	int
;	O
}	O
static	O
int	O
highest_version	(*(char),*(char))->(int)
(	O
char	O
*	O
filename	*(char)
,	O
char	O
*	O
dirname	*(char)
)	O
{	O
DIR	struct
*	O
dirp	*(struct)
=	O
opendir	(*(char))->(*(struct))
(	O
dirname	*(char)
)	O
;	O
struct	O
dirent	struct(long,long,short,char,array(char))
*	O
dp	*(struct(long,long,short,char,array(char)))
=	O
NULL	O
;	O
int	O
highestVersion	int
;	O
if	O
(	O
!	O
dirp	*(struct)
)	O
{	O
highestVersion	int
=	O
0	int
;	O
}	O
else	O
{	O
int	O
this_version	int
;	O
unsigned	O
int	O
file_name_length	int
=	O
strlen	(*(char))->(long)
(	O
filename	*(char)
)	O
;	O
highestVersion	int
=	O
0	int
;	O
while	O
(	O
(	O
dp	*(struct(long,long,short,char,array(char)))
=	O
readdir	(*(struct))->(*(struct(long,long,short,char,array(char))))
(	O
dirp	*(struct)
)	O
)	O
!=	O
0	int
)	O
{	O
if	O
(	O
!	O
REAL_DIR_ENTRY	int
(	O
dp	*(struct(long,long,short,char,array(char)))
)	O
||	O
NAMLEN	O
(	O
dp	*(struct(long,long,short,char,array(char)))
)	O
<=	O
file_name_length	int
+	O
2	int
)	O
{	O
continue	O
;	O
}	O
this_version	int
=	O
version_number	(*(char),*(char),int)->(int)
(	O
filename	*(char)
,	O
dp	*(struct(long,long,short,char,array(char)))
->	O
d_name	array(char)
,	O
file_name_length	int
)	O
;	O
if	O
(	O
this_version	int
>	O
highestVersion	int
)	O
{	O
highestVersion	int
=	O
this_version	int
;	O
}	O
}	O
closedir	(*(struct))->(int)
(	O
dirp	*(struct)
)	O
;	O
}	O
return	O
highestVersion	int
;	O
}	O
static	O
int	O
max_version	(*(char))->(int)
(	O
char	O
*	O
pathname	*(char)
)	O
{	O
char	O
*	O
p	*(char)
;	O
char	O
*	O
filename	*(char)
;	O
int	O
pathlen	int
=	O
strlen	(*(char))->(long)
(	O
pathname	*(char)
)	O
;	O
int	O
version	int
;	O
p	*(char)
=	O
pathname	*(char)
+	O
pathlen	int
-	O
1	int
;	O
while	O
(	O
(	O
p	*(char)
>	O
pathname	*(char)
)	O
&&	O
(	O
*	O
p	*(char)
!=	O
'/'	O
)	O
)	O
{	O
p	*(char)
--	O
;	O
}	O
if	O
(	O
*	O
p	*(char)
==	O
'/'	O
)	O
{	O
int	O
dirlen	int
=	O
p	*(char)
-	O
pathname	*(char)
;	O
char	O
*	O
dirname	*(char)
;	O
filename	*(char)
=	O
p	*(char)
+	O
1	int
;	O
dirname	*(char)
=	O
xmalloc	(int)->(*(void))
(	O
dirlen	int
+	O
1	int
)	O
;	O
strncpy	(*(char),*(char),long)->(*(char))
(	O
dirname	*(char)
,	O
pathname	*(char)
,	O
(	O
dirlen	int
)	O
)	O
;	O
dirname	*(char)
[	O
dirlen	int
]	O
=	O
'\0'	O
;	O
version	int
=	O
highest_version	(*(char),*(char))->(int)
(	O
filename	*(char)
,	O
dirname	*(char)
)	O
;	O
xfree	(*(void))->(void)
(	O
dirname	*(char)
)	O
;	O
}	O
else	O
{	O
filename	*(char)
=	O
pathname	*(char)
;	O
version	int
=	O
highest_version	(*(char),*(char))->(int)
(	O
filename	*(char)
,	O
"."	*(char)
)	O
;	O
}	O
return	O
version	int
;	O
}	O
static	O
char	O
*	O
generate_backup_filename	(enum(int,int,int,int,int),*(char))->(*(char))
(	O
backup_mode_ty	enum(int,int,int,int,int)
versionControl	enum(int,int,int,int,int)
,	O
char	O
*	O
pathname	*(char)
)	O
{	O
int	O
last_numbered_version	int
;	O
char	O
*	O
backup_name	*(char)
;	O
if	O
(	O
versionControl	enum(int,int,int,int,int)
==	O
none	int
)	O
{	O
backup_name	*(char)
=	O
NULL	O
;	O
}	O
else	O
{	O
if	O
(	O
versionControl	enum(int,int,int,int,int)
==	O
simple	int
)	O
{	O
backup_name	*(char)
=	O
simple_backup_name	(*(char))->(*(char))
(	O
pathname	*(char)
)	O
;	O
}	O
else	O
{	O
last_numbered_version	int
=	O
max_version	(*(char))->(int)
(	O
pathname	*(char)
)	O
;	O
if	O
(	O
(	O
versionControl	enum(int,int,int,int,int)
==	O
numbered_existing	int
)	O
&&	O
(	O
last_numbered_version	int
==	O
0	int
)	O
)	O
{	O
backup_name	*(char)
=	O
simple_backup_name	(*(char))->(*(char))
(	O
pathname	*(char)
)	O
;	O
}	O
else	O
{	O
last_numbered_version	int
++	O
;	O
backup_name	*(char)
=	O
xmalloc	(int)->(*(void))
(	O
strlen	(*(char))->(long)
(	O
pathname	*(char)
)	O
+	O
16	int
)	O
;	O
if	O
(	O
backup_name	*(char)
)	O
{	O
sprintf	(*(char),*(char))->(int)
(	O
backup_name	*(char)
,	O
BACKUP_SUFFIX_FORMAT	*(char)
,	O
pathname	*(char)
,	O
version_width	int
,	O
(	O
int	O
)	O
last_numbered_version	int
)	O
;	O
}	O
}	O
}	O
}	O
return	O
backup_name	*(char)
;	O
}	O
static	O
version_control_values_ty	struct(enum(int,int,int,int,int),*(char))
values	array(struct(enum(int,int,int,int,int),*(char)))
[	O
]	O
=	O
{	O
{	O
none	int
,	O
"never"	*(char)
}	O
,	O
{	O
none	int
,	O
"none"	*(char)
}	O
,	O
{	O
simple	int
,	O
"simple"	*(char)
}	O
,	O
{	O
numbered_existing	int
,	O
"existing"	*(char)
}	O
,	O
{	O
numbered_existing	int
,	O
"nil"	*(char)
}	O
,	O
{	O
numbered	int
,	O
"numbered"	*(char)
}	O
,	O
{	O
numbered	int
,	O
"t"	*(char)
}	O
,	O
{	O
unknown	int
,	O
0	int
}	O
}	O
;	O
backup_mode_ty	enum(int,int,int,int,int)
version_control_value	()->(enum(int,int,int,int,int))
(	O
void	O
)	O
{	O
char	O
*	O
version	int
=	O
getenv	(*(char))->(*(char))
(	O
"VERSION_CONTROL"	*(char)
)	O
;	O
version_control_values_ty	struct(enum(int,int,int,int,int),*(char))
*	O
v	*(struct(enum(int,int,int,int,int),*(char)))
;	O
backup_mode_ty	enum(int,int,int,int,int)
ret	enum(int,int,int,int,int)
=	O
unknown	int
;	O
if	O
(	O
(	O
version	int
==	O
NULL	O
)	O
||	O
(	O
*	O
version	int
==	O
0	int
)	O
)	O
{	O
ret	enum(int,int,int,int,int)
=	O
numbered_existing	int
;	O
}	O
else	O
{	O
v	*(struct(enum(int,int,int,int,int),*(char)))
=	O
&	O
values	array(struct(enum(int,int,int,int,int),*(char)))
[	O
0	int
]	O
;	O
while	O
(	O
v	*(struct(enum(int,int,int,int,int),*(char)))
->	O
name	*(char)
)	O
{	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
version	int
,	O
v	*(struct(enum(int,int,int,int,int),*(char)))
->	O
name	*(char)
)	O
==	O
0	int
)	O
{	O
ret	enum(int,int,int,int,int)
=	O
v	*(struct(enum(int,int,int,int,int),*(char)))
->	O
value	enum(int,int,int,int,int)
;	O
break	O
;	O
}	O
else	O
{	O
v	*(struct(enum(int,int,int,int,int),*(char)))
++	O
;	O
}	O
}	O
}	O
return	O
ret	enum(int,int,int,int,int)
;	O
}	O
static	O
void	O
set_version_width	()->(void)
(	O
void	O
)	O
{	O
char	O
*	O
v	*(struct(enum(int,int,int,int,int),*(char)))
=	O
getenv	(*(char))->(*(char))
(	O
"VERSION_WIDTH"	*(char)
)	O
;	O
if	O
(	O
v	*(struct(enum(int,int,int,int,int),*(char)))
&&	O
ISDIGIT	O
(	O
*	O
v	*(struct(enum(int,int,int,int,int),*(char)))
)	O
)	O
{	O
version_width	int
=	O
atoi	(*(char))->(int)
(	O
v	*(struct(enum(int,int,int,int,int),*(char)))
)	O
;	O
}	O
if	O
(	O
version_width	int
>	O
16	int
)	O
{	O
version_width	int
=	O
16	int
;	O
}	O
}	O
void	O
initialize_backups	()->(void)
(	O
void	O
)	O
{	O
char	O
*	O
v	*(struct(enum(int,int,int,int,int),*(char)))
=	O
getenv	(*(char))->(*(char))
(	O
"SIMPLE_BACKUP_SUFFIX"	*(char)
)	O
;	O
if	O
(	O
v	*(struct(enum(int,int,int,int,int),*(char)))
&&	O
*	O
v	*(struct(enum(int,int,int,int,int),*(char)))
)	O
{	O
simple_backup_suffix	*(char)
=	O
v	*(struct(enum(int,int,int,int,int),*(char)))
;	O
}	O
version_control	enum(int,int,int,int,int)
=	O
version_control_value	()->(enum(int,int,int,int,int))
(	O
)	O
;	O
if	O
(	O
version_control	enum(int,int,int,int,int)
==	O
unknown	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
_	O
(	O
"indent:  Strange version-control value\n"	*(char)
)	O
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
_	O
(	O
"indent:  Using numbered-existing\n"	*(char)
)	O
)	O
;	O
version_control	enum(int,int,int,int,int)
=	O
numbered_existing	int
;	O
}	O
set_version_width	()->(void)
(	O
)	O
;	O
}	O
void	O
make_backup	(*(struct(*(char),long,*(char))),*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))))->(void)
(	O
file_buffer_ty	struct(*(char),long,*(char))
*	O
file	*(struct(*(char),long,*(char)))
,	O
const	O
struct	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
*	O
file_stats	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
)	O
{	O
FILE	struct
*	O
bf	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
;	O
char	O
*	O
backup_filename	*(char)
;	O
unsigned	O
int	O
size	long
;	O
if	O
(	O
version_control	enum(int,int,int,int,int)
==	O
none	int
)	O
{	O
}	O
else	O
{	O
backup_filename	*(char)
=	O
generate_backup_filename	(enum(int,int,int,int,int),*(char))->(*(char))
(	O
version_control	enum(int,int,int,int,int)
,	O
file	*(struct(*(char),long,*(char)))
->	O
name	*(char)
)	O
;	O
if	O
(	O
!	O
backup_filename	*(char)
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
_	O
(	O
"indent: Can't make backup filename of %s\n"	*(char)
)	O
,	O
file	*(struct(*(char),long,*(char)))
->	O
name	*(char)
)	O
;	O
exit	(int)->(void)
(	O
system_error	int
)	O
;	O
}	O
bf	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
=	O
fopen	(*(char),*(char))->(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))
(	O
backup_filename	*(char)
,	O
"w"	*(char)
)	O
;	O
if	O
(	O
!	O
bf	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
{	O
fatal	(*(char),*(char))->(void)
(	O
_	O
(	O
"Can't open backup file %s"	*(char)
)	O
,	O
backup_filename	*(char)
)	O
;	O
}	O
size	long
=	O
fwrite	(*(void),long,long,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(long)
(	O
file	*(struct(*(char),long,*(char)))
->	O
data	*(char)
,	O
file	*(struct(*(char),long,*(char)))
->	O
size	long
,	O
1	int
,	O
bf	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
if	O
(	O
size	long
!=	O
1	int
)	O
{	O
fatal	(*(char),*(char))->(void)
(	O
_	O
(	O
"Can't write to backup file %s"	*(char)
)	O
,	O
backup_filename	*(char)
)	O
;	O
}	O
fclose	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
bf	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
{	O
struct	O
utimbuf	struct(long,long)
buf	struct(*(char),*(char),int,int,int,int)
;	O
buf	struct(*(char),*(char),int,int,int,int)
.	O
actime	long
=	O
time	struct(long,long)
(	O
NULL	O
)	O
;	O
buf	struct(*(char),*(char),int,int,int,int)
.	O
modtime	long
=	O
file_stats	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
->	O
st_mtime	O
;	O
if	O
(	O
utime	(*(char),*(struct(long,long)))->(int)
(	O
backup_filename	*(char)
,	O
&	O
buf	struct(*(char),*(char),int,int,int,int)
)	O
!=	O
0	int
)	O
{	O
WARNING	O
(	O
_	O
(	O
"Can't preserve modification time on backup file %s"	*(char)
)	O
,	O
backup_filename	*(char)
,	O
NULL	O
)	O
;	O
}	O
}	O
xfree	(*(void))->(void)
(	O
backup_filename	*(char)
)	O
;	O
}	O
}	O
