int	O
count_only	int
;	O
char	O
*	O
sender_option	*(char)
;	O
char	O
*	O
mailbox_name	*(char)
;	O
static	O
struct	O
mu_option	struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*(struct),*(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*`,*`,*`)->(void)),*(char))),*(char))->(void)),*(char))
from_options	array(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*(struct(int,*`,long,*`,int,*`,*`,int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,*`,*`,int,*`,int,int,int,long,*`)),*(struct(*`,int,*`,int,*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`)),*(char))->(void)),*(char)))
[	O
]	O
=	O
{	O
{	O
"count"	*(char)
,	O
'c'	O
,	O
NULL	O
,	O
MU_OPTION_DEFAULT	int
,	O
N_	O
(	O
"just print a count of messages and exit"	*(char)
)	O
,	O
mu_c_bool	int
,	O
&	O
count_only	int
}	O
,	O
{	O
"sender"	*(char)
,	O
's'	O
,	O
N_	O
(	O
"ADDRESS"	*(char)
)	O
,	O
MU_OPTION_DEFAULT	int
,	O
N_	O
(	O
"print only mail from addresses containing the supplied string"	*(char)
)	O
,	O
mu_c_string	int
,	O
&	O
sender_option	*(char)
}	O
,	O
{	O
"file"	*(char)
,	O
'f'	O
,	O
N_	O
(	O
"FILE"	*(char)
)	O
,	O
MU_OPTION_DEFAULT	int
,	O
N_	O
(	O
"read mail from FILE"	*(char)
)	O
,	O
mu_c_string	int
,	O
&	O
mailbox_name	*(char)
}	O
,	O
{	O
"debug"	*(char)
,	O
'd'	O
,	O
NULL	O
,	O
MU_OPTION_DEFAULT	int
,	O
N_	O
(	O
"enable debugging output"	*(char)
)	O
,	O
mu_c_incr	int
,	O
&	O
frm_debug	int
}	O
,	O
MU_OPTION_END	O
}	O
,	O
*	O
options	array(*(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*(struct`),*(struct`),*(char))->(void)),*(char))))
[	O
]	O
=	O
{	O
from_options	array(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*(struct(int,*`,long,*`,int,*`,*`,int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,*`,*`,int,*`,int,int,int,long,*`)),*(struct(*`,int,*`,int,*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`)),*(char))->(void)),*(char)))
,	O
NULL	O
}	O
;	O
static	O
struct	O
mu_cli_setup	struct(*(*(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*`,*`,*`)->(void)),*(char)))),*(struct(*(char),int,*(void),long,*((*(void),*(struct`))->(int)),*(char),*(char))),*(char),*(char),*(*(char)),*(char),int,int,int,int,*((*(struct))->(void)))
cli	struct(*(*(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*`,*`,*`)->(void)),*(char)))),*(struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char))),*(char),*(char),*(*(char)),*(char),int,int,int,int,*((*(struct))->(void)))
=	O
{	O
options	array(*(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*(struct`),*(struct`),*(char))->(void)),*(char))))
,	O
NULL	O
,	O
N_	O
(	O
"GNU from -- display from and subject."	*(char)
)	O
,	O
N_	O
(	O
"[OPTIONS] [USER]"	*(char)
)	O
,	O
}	O
;	O
static	O
char	O
*	O
capa	*(struct(*(char),*(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*`,*`,*`)->(void)),*(char))),*(struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char))),*((enum(int,int),*(struct`),*(char),*(*`),*(void),*(struct`))->(int)),*((*(void))->(void))))
[	O
]	O
=	O
{	O
"debug"	*(char)
,	O
"mailbox"	*(char)
,	O
"locking"	*(char)
,	O
NULL	O
}	O
;	O
static	O
int	O
from_select	(long,*(struct))->(int)
(	O
size_t	long
index	(*(char),int)->(*(char))
,	O
mu_message_t	*(struct)
msg	*(struct)
)	O
{	O
if	O
(	O
count_only	int
)	O
return	O
0	int
;	O
if	O
(	O
sender_option	*(char)
)	O
{	O
int	O
rc	int
=	O
0	int
;	O
mu_header_t	*(struct)
hdr	*(struct)
=	O
NULL	O
;	O
char	O
*	O
sender	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
;	O
mu_message_get_header	(*(struct),*(*(struct)))->(int)
(	O
msg	*(struct)
,	O
&	O
hdr	*(struct)
)	O
;	O
if	O
(	O
mu_header_aget_value_unfold	O
(	O
hdr	*(struct)
,	O
MU_HEADER_FROM	*(char)
,	O
&	O
sender	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
)	O
==	O
0	int
)	O
{	O
if	O
(	O
strstr	(*(char),*(char))->(*(char))
(	O
sender	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
,	O
sender_option	*(char)
)	O
)	O
rc	int
=	O
1	int
;	O
free	(*(void))->(void)
(	O
sender	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
)	O
;	O
}	O
return	O
rc	int
;	O
}	O
return	O
1	int
;	O
}	O
int	O
main	(int,*(*(char)))->(int)
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	*(*(char))
)	O
{	O
size_t	long
total	*(long)
;	O
MU_APP_INIT_NLS	O
(	O
)	O
;	O
mu_register_all_mbox_formats	O
(	O
)	O
;	O
mu_auth_register_module	(*(struct(*(char),array(*((*(*(struct(*`,*`,*`,int,int,*`,*`,*`,*`,long,int,int))),*(void),*(void),*(void))->(int))),array(*(void)),*(struct(*`,int,*`,int,*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`)),*(struct(*`,int,*`,long,*`,*`,*`)),*((enum(int,int),*`,*`,*`,*`,*`)->(int)),*((*`)->(void)))))->(void)
(	O
&	O
mu_auth_tls_module	struct(*(char),array(*((*(*(struct(*`,*`,*`,int,int,*`,*`,*`,*`,long,int,int))),*(void),*(void),*(void))->(int))),array(*(void)),*(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*`,*`,*`)->(void)),*(char))),*(struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char))),*((enum(int,int),*(struct(struct`,enum(int,int,int),*`,*`,*`,*`)),*(char),*(*(void)),*(void),*(struct(*`,*`)))->(int)),*((*(void))->(void)))
)	O
;	O
mu_cli	(int,*(*(char)),*(struct(*(*(struct`)),*(struct(*`,int,*`,long,*`,*`,*`)),*(char),*(char),*(*(char)),*(char),int,int,int,int,*((*`)->(void)))),*(*(char)),*(void),*(int),*(*(*(char))))->(void)
(	O
argc	int
,	O
argv	*(*(char))
,	O
&	O
cli	struct(*(*(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*`,*`,*`)->(void)),*(char)))),*(struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char))),*(char),*(char),*(*(char)),*(char),int,int,int,int,*((*(struct))->(void)))
,	O
capa	*(struct(*(char),*(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*`,*`,*`)->(void)),*(char))),*(struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char))),*((enum(int,int),*(struct`),*(char),*(*`),*(void),*(struct`))->(int)),*((*(void))->(void))))
,	O
NULL	O
,	O
&	O
argc	int
,	O
&	O
argv	*(*(char))
)	O
;	O
if	O
(	O
argc	int
>	O
1	int
)	O
{	O
mu_error	(*(char))->(int)
(	O
_	O
(	O
"too many arguments"	*(char)
)	O
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
else	O
if	O
(	O
argc	int
>	O
0	int
)	O
{	O
if	O
(	O
mailbox_name	*(char)
)	O
{	O
mu_error	(*(char))->(int)
(	O
_	O
(	O
"both --from option and user name are specified"	*(char)
)	O
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
mailbox_name	*(char)
=	O
mu_alloc	(long)->(*(void))
(	O
strlen	(*(char))->(long)
(	O
argv	*(*(char))
[	O
0	int
]	O
)	O
+	O
2	int
)	O
;	O
mailbox_name	*(char)
[	O
0	int
]	O
=	O
'%'	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
mailbox_name	*(char)
+	O
1	int
,	O
argv	*(*(char))
[	O
0	int
]	O
)	O
;	O
}	O
init_output	(long)->(void)
(	O
0	int
)	O
;	O
frm_scan	(*(char),*((long,*(struct))->(int)),*(long))->(void)
(	O
mailbox_name	*(char)
,	O
from_select	(long,*(struct))->(int)
,	O
&	O
total	*(long)
)	O
;	O
if	O
(	O
count_only	int
)	O
{	O
mu_printf	(*(char))->(int)
(	O
ngettext	(*(char),*(char),long)->(*(char))
(	O
"There is %lu message in your incoming mailbox.\n"	*(char)
,	O
"There are %lu messages in your incoming mailbox.\n"	*(char)
,	O
total	*(long)
)	O
,	O
(	O
unsigned	O
long	O
)	O
total	*(long)
)	O
;	O
}	O
return	O
0	int
;	O
}	O
