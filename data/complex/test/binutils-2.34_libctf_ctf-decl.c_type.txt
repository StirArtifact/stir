void	O
ctf_decl_init	O
(	O
ctf_decl_t	O
*	O
cd	O
)	O
{	O
int	O
i	*(struct)
;	O
memset	O
(	O
cd	O
,	O
0	int
,	O
sizeof	O
(	O
ctf_decl_t	O
)	O
)	O
;	O
for	O
(	O
i	*(struct)
=	O
CTF_PREC_BASE	O
;	O
i	*(struct)
<	O
CTF_PREC_MAX	O
;	O
i	*(struct)
++	O
)	O
cd	O
->	O
cd_order	O
[	O
i	*(struct)
]	O
=	O
CTF_PREC_BASE	O
-	O
1	int
;	O
cd	O
->	O
cd_qualp	O
=	O
CTF_PREC_BASE	O
;	O
cd	O
->	O
cd_ordp	O
=	O
CTF_PREC_BASE	O
;	O
}	O
void	O
ctf_decl_fini	O
(	O
ctf_decl_t	O
*	O
cd	O
)	O
{	O
ctf_decl_node_t	O
*	O
cdp	O
,	O
*	O
ndp	O
;	O
int	O
i	*(struct)
;	O
for	O
(	O
i	*(struct)
=	O
CTF_PREC_BASE	O
;	O
i	*(struct)
<	O
CTF_PREC_MAX	O
;	O
i	*(struct)
++	O
)	O
{	O
for	O
(	O
cdp	O
=	O
ctf_list_next	O
(	O
&	O
cd	O
->	O
cd_nodes	O
[	O
i	*(struct)
]	O
)	O
;	O
cdp	O
!=	O
NULL	O
;	O
cdp	O
=	O
ndp	O
)	O
{	O
ndp	O
=	O
ctf_list_next	O
(	O
cdp	O
)	O
;	O
free	(*(void))->(void)
(	O
cdp	O
)	O
;	O
}	O
}	O
}	O
void	O
ctf_decl_push	O
(	O
ctf_decl_t	O
*	O
cd	O
,	O
ctf_file_t	struct
*	O
fp	*(struct)
,	O
ctf_id_t	long
type	long
)	O
{	O
ctf_decl_node_t	O
*	O
cdp	O
;	O
ctf_decl_prec_t	O
prec	O
;	O
uint32_t	int
kind	O
,	O
n	O
=	O
1	int
;	O
int	O
is_qual	O
=	O
0	int
;	O
const	O
ctf_type_t	struct(int,int,union(int,int),int,int)
*	O
tp	O
;	O
ctf_arinfo_t	struct(long,long,int)
ar	O
;	O
if	O
(	O
(	O
tp	O
=	O
ctf_lookup_by_id	O
(	O
&	O
fp	*(struct)
,	O
type	long
)	O
)	O
==	O
NULL	O
)	O
{	O
cd	O
->	O
cd_err	O
=	O
fp	*(struct)
->	O
ctf_errno	(*(struct))->(int)
;	O
return	O
;	O
}	O
switch	O
(	O
kind	O
=	O
LCTF_INFO_KIND	O
(	O
fp	*(struct)
,	O
tp	O
->	O
ctt_info	short
)	O
)	O
{	O
case	O
CTF_K_ARRAY	O
:	O
(	O
void	O
)	O
ctf_array_info	(*(struct),long,*(struct(long,long,int)))->(int)
(	O
fp	*(struct)
,	O
type	long
,	O
&	O
ar	O
)	O
;	O
ctf_decl_push	O
(	O
cd	O
,	O
fp	*(struct)
,	O
ar	O
.	O
ctr_contents	long
)	O
;	O
n	O
=	O
ar	O
.	O
ctr_nelems	int
;	O
prec	O
=	O
CTF_PREC_ARRAY	O
;	O
break	O
;	O
case	O
CTF_K_TYPEDEF	O
:	O
if	O
(	O
ctf_strptr	O
(	O
fp	*(struct)
,	O
tp	O
->	O
ctt_name	int
)	O
[	O
0	int
]	O
==	O
'\0'	O
)	O
{	O
ctf_decl_push	O
(	O
cd	O
,	O
fp	*(struct)
,	O
tp	O
->	O
ctt_type	short
)	O
;	O
return	O
;	O
}	O
prec	O
=	O
CTF_PREC_BASE	O
;	O
break	O
;	O
case	O
CTF_K_FUNCTION	O
:	O
ctf_decl_push	O
(	O
cd	O
,	O
fp	*(struct)
,	O
tp	O
->	O
ctt_type	short
)	O
;	O
prec	O
=	O
CTF_PREC_FUNCTION	O
;	O
break	O
;	O
case	O
CTF_K_POINTER	O
:	O
ctf_decl_push	O
(	O
cd	O
,	O
fp	*(struct)
,	O
tp	O
->	O
ctt_type	short
)	O
;	O
prec	O
=	O
CTF_PREC_POINTER	O
;	O
break	O
;	O
case	O
CTF_K_SLICE	O
:	O
ctf_decl_push	O
(	O
cd	O
,	O
fp	*(struct)
,	O
ctf_type_reference	(*(struct),long)->(long)
(	O
fp	*(struct)
,	O
type	long
)	O
)	O
;	O
prec	O
=	O
CTF_PREC_BASE	O
;	O
break	O
;	O
case	O
CTF_K_VOLATILE	O
:	O
case	O
CTF_K_CONST	O
:	O
case	O
CTF_K_RESTRICT	O
:	O
ctf_decl_push	O
(	O
cd	O
,	O
fp	*(struct)
,	O
tp	O
->	O
ctt_type	short
)	O
;	O
prec	O
=	O
cd	O
->	O
cd_qualp	O
;	O
is_qual	O
++	O
;	O
break	O
;	O
default	O
:	O
prec	O
=	O
CTF_PREC_BASE	O
;	O
}	O
if	O
(	O
(	O
cdp	O
=	O
malloc	(long)->(*(void))
(	O
sizeof	O
(	O
ctf_decl_node_t	O
)	O
)	O
)	O
==	O
NULL	O
)	O
{	O
cd	O
->	O
cd_err	O
=	O
EAGAIN	O
;	O
return	O
;	O
}	O
cdp	O
->	O
cd_type	O
=	O
type	long
;	O
cdp	O
->	O
cd_kind	O
=	O
kind	O
;	O
cdp	O
->	O
cd_n	O
=	O
n	O
;	O
if	O
(	O
ctf_list_next	O
(	O
&	O
cd	O
->	O
cd_nodes	O
[	O
prec	O
]	O
)	O
==	O
NULL	O
)	O
cd	O
->	O
cd_order	O
[	O
prec	O
]	O
=	O
cd	O
->	O
cd_ordp	O
++	O
;	O
if	O
(	O
prec	O
>	O
cd	O
->	O
cd_qualp	O
&&	O
prec	O
<	O
CTF_PREC_ARRAY	O
)	O
cd	O
->	O
cd_qualp	O
=	O
prec	O
;	O
if	O
(	O
kind	O
==	O
CTF_K_ARRAY	O
||	O
(	O
is_qual	O
&&	O
prec	O
==	O
CTF_PREC_BASE	O
)	O
)	O
ctf_list_prepend	O
(	O
&	O
cd	O
->	O
cd_nodes	O
[	O
prec	O
]	O
,	O
cdp	O
)	O
;	O
else	O
ctf_list_append	O
(	O
&	O
cd	O
->	O
cd_nodes	O
[	O
prec	O
]	O
,	O
cdp	O
)	O
;	O
}	O
_libctf_printflike_	O
(	O
2	int
,	O
3	int
)	O
void	O
ctf_decl_sprintf	O
(	O
ctf_decl_t	O
*	O
cd	O
,	O
const	O
char	O
*	O
format	*(char)
,	O
...	O
)	O
{	O
va_list	array(struct(int,int,*(void),*(void)))
ap	O
;	O
char	O
*	O
str	O
;	O
int	O
n	O
;	O
if	O
(	O
cd	O
->	O
cd_enomem	O
)	O
return	O
;	O
va_start	O
(	O
ap	O
,	O
format	*(char)
)	O
;	O
n	O
=	O
vasprintf	(*(*(char)),*(char),array(struct(int,int,*(void),*(void))))->(int)
(	O
&	O
str	O
,	O
format	*(char)
,	O
ap	O
)	O
;	O
va_end	O
(	O
ap	O
)	O
;	O
if	O
(	O
n	O
>	O
0	int
)	O
{	O
char	O
*	O
newbuf	O
;	O
if	O
(	O
(	O
newbuf	O
=	O
ctf_str_append	O
(	O
cd	O
->	O
cd_buf	O
,	O
str	O
)	O
)	O
!=	O
NULL	O
)	O
cd	O
->	O
cd_buf	O
=	O
newbuf	O
;	O
}	O
if	O
(	O
n	O
<	O
0	int
||	O
cd	O
->	O
cd_buf	O
==	O
NULL	O
)	O
{	O
free	(*(void))->(void)
(	O
cd	O
->	O
cd_buf	O
)	O
;	O
cd	O
->	O
cd_buf	O
=	O
NULL	O
;	O
cd	O
->	O
cd_enomem	O
=	O
1	int
;	O
}	O
free	(*(void))->(void)
(	O
str	O
)	O
;	O
}	O
char	O
*	O
ctf_decl_buf	O
(	O
ctf_decl_t	O
*	O
cd	O
)	O
{	O
return	O
cd	O
->	O
cd_buf	O
;	O
}	O
