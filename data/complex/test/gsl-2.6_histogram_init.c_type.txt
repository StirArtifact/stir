gsl_histogram	struct(long,*(double),*(double))
*	O
gsl_histogram_alloc	(long)->(*(struct(long,*(double),*(double))))
(	O
size_t	long
n	long
)	O
{	O
gsl_histogram	struct(long,*(double),*(double))
*	O
h	*(struct(long,*(double),*(double)))
;	O
if	O
(	O
n	long
==	O
0	int
)	O
{	O
GSL_ERROR_VAL	O
(	O
"histogram length n must be positive integer"	*(char)
,	O
GSL_EDOM	int
,	O
0	int
)	O
;	O
}	O
h	*(struct(long,*(double),*(double)))
=	O
(	O
gsl_histogram	struct(long,*(double),*(double))
*	O
)	O
malloc	(long)->(*(void))
(	O
sizeof	O
(	O
gsl_histogram	struct(long,*(double),*(double))
)	O
)	O
;	O
if	O
(	O
h	*(struct(long,*(double),*(double)))
==	O
0	int
)	O
{	O
GSL_ERROR_VAL	O
(	O
"failed to allocate space for histogram struct"	*(char)
,	O
GSL_ENOMEM	int
,	O
0	int
)	O
;	O
}	O
h	*(struct(long,*(double),*(double)))
->	O
range	*(double)
=	O
(	O
double	O
*	O
)	O
malloc	(long)->(*(void))
(	O
(	O
n	long
+	O
1	int
)	O
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
if	O
(	O
h	*(struct(long,*(double),*(double)))
->	O
range	*(double)
==	O
0	int
)	O
{	O
free	(*(void))->(void)
(	O
h	*(struct(long,*(double),*(double)))
)	O
;	O
GSL_ERROR_VAL	O
(	O
"failed to allocate space for histogram ranges"	*(char)
,	O
GSL_ENOMEM	int
,	O
0	int
)	O
;	O
}	O
h	*(struct(long,*(double),*(double)))
->	O
bin	*(double)
=	O
(	O
double	O
*	O
)	O
malloc	(long)->(*(void))
(	O
n	long
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
if	O
(	O
h	*(struct(long,*(double),*(double)))
->	O
bin	*(double)
==	O
0	int
)	O
{	O
free	(*(void))->(void)
(	O
h	*(struct(long,*(double),*(double)))
->	O
range	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
h	*(struct(long,*(double),*(double)))
)	O
;	O
GSL_ERROR_VAL	O
(	O
"failed to allocate space for histogram bins"	*(char)
,	O
GSL_ENOMEM	int
,	O
0	int
)	O
;	O
}	O
h	*(struct(long,*(double),*(double)))
->	O
n	long
=	O
n	long
;	O
return	O
h	*(struct(long,*(double),*(double)))
;	O
}	O
static	O
void	O
make_uniform	(array(double),long,double,double)->(void)
(	O
double	O
range	*(double)
[	O
]	O
,	O
size_t	long
n	long
,	O
double	O
xmin	double
,	O
double	O
xmax	double
)	O
{	O
size_t	long
i	*(long)
;	O
for	O
(	O
i	*(long)
=	O
0	int
;	O
i	*(long)
<=	O
n	long
;	O
i	*(long)
++	O
)	O
{	O
double	O
f1	double
=	O
(	O
(	O
double	O
)	O
(	O
n	long
-	O
i	*(long)
)	O
/	O
(	O
double	O
)	O
n	long
)	O
;	O
double	O
f2	double
=	O
(	O
(	O
double	O
)	O
i	*(long)
/	O
(	O
double	O
)	O
n	long
)	O
;	O
range	*(double)
[	O
i	*(long)
]	O
=	O
f1	double
*	O
xmin	double
+	O
f2	double
*	O
xmax	double
;	O
}	O
}	O
gsl_histogram	struct(long,*(double),*(double))
*	O
gsl_histogram_calloc_uniform	(long,double,double)->(*(struct(long,*(double),*(double))))
(	O
const	O
size_t	long
n	long
,	O
const	O
double	O
xmin	double
,	O
const	O
double	O
xmax	double
)	O
{	O
gsl_histogram	struct(long,*(double),*(double))
*	O
h	*(struct(long,*(double),*(double)))
;	O
if	O
(	O
xmin	double
>=	O
xmax	double
)	O
{	O
GSL_ERROR_VAL	O
(	O
"xmin must be less than xmax"	*(char)
,	O
GSL_EINVAL	int
,	O
0	int
)	O
;	O
}	O
h	*(struct(long,*(double),*(double)))
=	O
gsl_histogram_calloc	(long)->(*(struct(long,*(double),*(double))))
(	O
n	long
)	O
;	O
if	O
(	O
h	*(struct(long,*(double),*(double)))
==	O
0	int
)	O
{	O
return	O
h	*(struct(long,*(double),*(double)))
;	O
}	O
make_uniform	(array(double),long,double,double)->(void)
(	O
h	*(struct(long,*(double),*(double)))
->	O
range	*(double)
,	O
n	long
,	O
xmin	double
,	O
xmax	double
)	O
;	O
return	O
h	*(struct(long,*(double),*(double)))
;	O
}	O
gsl_histogram	struct(long,*(double),*(double))
*	O
gsl_histogram_calloc	(long)->(*(struct(long,*(double),*(double))))
(	O
size_t	long
n	long
)	O
{	O
gsl_histogram	struct(long,*(double),*(double))
*	O
h	*(struct(long,*(double),*(double)))
=	O
gsl_histogram_alloc	(long)->(*(struct(long,*(double),*(double))))
(	O
n	long
)	O
;	O
if	O
(	O
h	*(struct(long,*(double),*(double)))
==	O
0	int
)	O
{	O
return	O
h	*(struct(long,*(double),*(double)))
;	O
}	O
{	O
size_t	long
i	*(long)
;	O
for	O
(	O
i	*(long)
=	O
0	int
;	O
i	*(long)
<	O
n	long
+	O
1	int
;	O
i	*(long)
++	O
)	O
{	O
h	*(struct(long,*(double),*(double)))
->	O
range	*(double)
[	O
i	*(long)
]	O
=	O
i	*(long)
;	O
}	O
for	O
(	O
i	*(long)
=	O
0	int
;	O
i	*(long)
<	O
n	long
;	O
i	*(long)
++	O
)	O
{	O
h	*(struct(long,*(double),*(double)))
->	O
bin	*(double)
[	O
i	*(long)
]	O
=	O
0	int
;	O
}	O
}	O
h	*(struct(long,*(double),*(double)))
->	O
n	long
=	O
n	long
;	O
return	O
h	*(struct(long,*(double),*(double)))
;	O
}	O
void	O
gsl_histogram_free	(*(struct(long,*(double),*(double))))->(void)
(	O
gsl_histogram	struct(long,*(double),*(double))
*	O
h	*(struct(long,*(double),*(double)))
)	O
{	O
RETURN_IF_NULL	O
(	O
h	*(struct(long,*(double),*(double)))
)	O
;	O
free	(*(void))->(void)
(	O
h	*(struct(long,*(double),*(double)))
->	O
range	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
h	*(struct(long,*(double),*(double)))
->	O
bin	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
h	*(struct(long,*(double),*(double)))
)	O
;	O
}	O
int	O
gsl_histogram_set_ranges_uniform	(*(struct(long,*(double),*(double))),double,double)->(int)
(	O
gsl_histogram	struct(long,*(double),*(double))
*	O
h	*(struct(long,*(double),*(double)))
,	O
double	O
xmin	double
,	O
double	O
xmax	double
)	O
{	O
size_t	long
i	*(long)
;	O
const	O
size_t	long
n	long
=	O
h	*(struct(long,*(double),*(double)))
->	O
n	long
;	O
if	O
(	O
xmin	double
>=	O
xmax	double
)	O
{	O
GSL_ERROR	O
(	O
"xmin must be less than xmax"	*(char)
,	O
GSL_EINVAL	int
)	O
;	O
}	O
make_uniform	(array(double),long,double,double)->(void)
(	O
h	*(struct(long,*(double),*(double)))
->	O
range	*(double)
,	O
n	long
,	O
xmin	double
,	O
xmax	double
)	O
;	O
for	O
(	O
i	*(long)
=	O
0	int
;	O
i	*(long)
<	O
n	long
;	O
i	*(long)
++	O
)	O
{	O
h	*(struct(long,*(double),*(double)))
->	O
bin	*(double)
[	O
i	*(long)
]	O
=	O
0	int
;	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
int	O
gsl_histogram_set_ranges	(*(struct(long,*(double),*(double))),array(double),long)->(int)
(	O
gsl_histogram	struct(long,*(double),*(double))
*	O
h	*(struct(long,*(double),*(double)))
,	O
const	O
double	O
range	*(double)
[	O
]	O
,	O
size_t	long
size	long
)	O
{	O
size_t	long
i	*(long)
;	O
const	O
size_t	long
n	long
=	O
h	*(struct(long,*(double),*(double)))
->	O
n	long
;	O
if	O
(	O
size	long
!=	O
(	O
n	long
+	O
1	int
)	O
)	O
{	O
GSL_ERROR	O
(	O
"size of range must match size of histogram"	*(char)
,	O
GSL_EINVAL	int
)	O
;	O
}	O
for	O
(	O
i	*(long)
=	O
0	int
;	O
i	*(long)
<=	O
n	long
;	O
i	*(long)
++	O
)	O
{	O
h	*(struct(long,*(double),*(double)))
->	O
range	*(double)
[	O
i	*(long)
]	O
=	O
range	*(double)
[	O
i	*(long)
]	O
;	O
}	O
for	O
(	O
i	*(long)
=	O
0	int
;	O
i	*(long)
<	O
n	long
;	O
i	*(long)
++	O
)	O
{	O
h	*(struct(long,*(double),*(double)))
->	O
bin	*(double)
[	O
i	*(long)
]	O
=	O
0	int
;	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
