bfd_boolean	int
_bfd_archive_64_bit_slurp_armap	O
(	O
bfd	struct
*	O
abfd	*(struct)
)	O
{	O
struct	O
artdata	O
*	O
ardata	O
=	O
bfd_ardata	O
(	O
abfd	*(struct)
)	O
;	O
char	O
nextname	O
[	O
17	int
]	O
;	O
bfd_size_type	long
i	*(struct)
,	O
parsed_size	O
,	O
nsymz	O
,	O
stringsize	O
,	O
carsym_size	O
,	O
ptrsize	O
;	O
struct	O
areltdata	O
*	O
mapdata	O
;	O
bfd_byte	char
int_buf	O
[	O
8	int
]	O
;	O
char	O
*	O
stringbase	O
;	O
char	O
*	O
stringend	O
;	O
bfd_byte	char
*	O
raw_armap	O
=	O
NULL	O
;	O
carsym	struct(*(char),long)
*	O
carsyms	O
;	O
bfd_size_type	long
amt	O
;	O
ardata	O
->	O
symdefs	O
=	O
NULL	O
;	O
i	*(struct)
=	O
bfd_bread	(*(void),long,*(struct))->(long)
(	O
nextname	O
,	O
16	int
,	O
abfd	*(struct)
)	O
;	O
if	O
(	O
i	*(struct)
==	O
0	int
)	O
return	O
TRUE	int
;	O
if	O
(	O
i	*(struct)
!=	O
16	int
)	O
return	O
FALSE	O
;	O
if	O
(	O
bfd_seek	(*(struct),long,int)->(int)
(	O
abfd	*(struct)
,	O
(	O
file_ptr	long
)	O
-	O
16	int
,	O
SEEK_CUR	O
)	O
!=	O
0	int
)	O
return	O
FALSE	O
;	O
if	O
(	O
CONST_STRNEQ	O
(	O
nextname	O
,	O
"/               "	*(char)
)	O
)	O
return	O
bfd_slurp_armap	O
(	O
abfd	*(struct)
)	O
;	O
if	O
(	O
!	O
CONST_STRNEQ	O
(	O
nextname	O
,	O
"/SYM64/         "	*(char)
)	O
)	O
{	O
abfd	*(struct)
->	O
has_armap	int
=	O
FALSE	O
;	O
return	O
TRUE	int
;	O
}	O
mapdata	O
=	O
(	O
struct	O
areltdata	O
*	O
)	O
_bfd_read_ar_hdr	O
(	O
abfd	*(struct)
)	O
;	O
if	O
(	O
mapdata	O
==	O
NULL	O
)	O
return	O
FALSE	O
;	O
parsed_size	O
=	O
mapdata	O
->	O
parsed_size	O
;	O
free	(*(void))->(void)
(	O
mapdata	O
)	O
;	O
if	O
(	O
bfd_bread	(*(void),long,*(struct))->(long)
(	O
int_buf	O
,	O
8	int
,	O
abfd	*(struct)
)	O
!=	O
8	int
)	O
{	O
if	O
(	O
bfd_get_error	()->(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int))
(	O
)	O
!=	O
bfd_error_system_call	int
)	O
bfd_set_error	(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int))->(void)
(	O
bfd_error_malformed_archive	int
)	O
;	O
return	O
FALSE	O
;	O
}	O
nsymz	O
=	O
bfd_getb64	(*(void))->(long)
(	O
int_buf	O
)	O
;	O
stringsize	O
=	O
parsed_size	O
-	O
8	int
*	O
nsymz	O
-	O
8	int
;	O
carsym_size	O
=	O
nsymz	O
*	O
sizeof	O
(	O
carsym	struct(*(char),long)
)	O
;	O
ptrsize	O
=	O
8	int
*	O
nsymz	O
;	O
amt	O
=	O
carsym_size	O
+	O
stringsize	O
+	O
1	int
;	O
if	O
(	O
nsymz	O
>=	O
(	O
bfd_size_type	long
)	O
-	O
1	int
/	O
8	int
||	O
stringsize	O
>	O
parsed_size	O
||	O
nsymz	O
>	O
(	O
bfd_size_type	long
)	O
-	O
1	int
/	O
sizeof	O
(	O
carsym	struct(*(char),long)
)	O
||	O
amt	O
<=	O
carsym_size	O
||	O
amt	O
<=	O
stringsize	O
)	O
{	O
bfd_set_error	(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int))->(void)
(	O
bfd_error_malformed_archive	int
)	O
;	O
return	O
FALSE	O
;	O
}	O
ardata	O
->	O
symdefs	O
=	O
(	O
struct	O
carsym	struct(*(char),long)
*	O
)	O
bfd_zalloc	(*(struct),long)->(*(void))
(	O
abfd	*(struct)
,	O
amt	O
)	O
;	O
if	O
(	O
ardata	O
->	O
symdefs	O
==	O
NULL	O
)	O
return	O
FALSE	O
;	O
carsyms	O
=	O
ardata	O
->	O
symdefs	O
;	O
stringbase	O
=	O
(	O
(	O
char	O
*	O
)	O
ardata	O
->	O
symdefs	O
)	O
+	O
carsym_size	O
;	O
raw_armap	O
=	O
(	O
bfd_byte	char
*	O
)	O
bfd_alloc	(*(struct),long)->(*(void))
(	O
abfd	*(struct)
,	O
ptrsize	O
)	O
;	O
if	O
(	O
raw_armap	O
==	O
NULL	O
)	O
goto	O
release_symdefs	O
;	O
if	O
(	O
bfd_bread	(*(void),long,*(struct))->(long)
(	O
raw_armap	O
,	O
ptrsize	O
,	O
abfd	*(struct)
)	O
!=	O
ptrsize	O
||	O
bfd_bread	(*(void),long,*(struct))->(long)
(	O
stringbase	O
,	O
stringsize	O
,	O
abfd	*(struct)
)	O
!=	O
stringsize	O
)	O
{	O
if	O
(	O
bfd_get_error	()->(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int))
(	O
)	O
!=	O
bfd_error_system_call	int
)	O
bfd_set_error	(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int))->(void)
(	O
bfd_error_malformed_archive	int
)	O
;	O
goto	O
release_raw_armap	O
;	O
}	O
stringend	O
=	O
stringbase	O
+	O
stringsize	O
;	O
*	O
stringend	O
=	O
0	int
;	O
for	O
(	O
i	*(struct)
=	O
0	int
;	O
i	*(struct)
<	O
nsymz	O
;	O
i	*(struct)
++	O
)	O
{	O
carsyms	O
->	O
file_offset	long
=	O
bfd_getb64	(*(void))->(long)
(	O
raw_armap	O
+	O
i	*(struct)
*	O
8	int
)	O
;	O
carsyms	O
->	O
name	*(char)
=	O
stringbase	O
;	O
stringbase	O
+=	O
strlen	(*(char))->(long)
(	O
stringbase	O
)	O
;	O
if	O
(	O
stringbase	O
!=	O
stringend	O
)	O
++	O
stringbase	O
;	O
++	O
carsyms	O
;	O
}	O
ardata	O
->	O
symdef_count	O
=	O
nsymz	O
;	O
ardata	O
->	O
first_file_filepos	O
=	O
bfd_tell	(*(struct))->(long)
(	O
abfd	*(struct)
)	O
;	O
ardata	O
->	O
first_file_filepos	O
+=	O
(	O
ardata	O
->	O
first_file_filepos	O
)	O
%	O
2	int
;	O
abfd	*(struct)
->	O
has_armap	int
=	O
TRUE	int
;	O
bfd_release	O
(	O
abfd	*(struct)
,	O
raw_armap	O
)	O
;	O
return	O
TRUE	int
;	O
release_raw_armap	O
:	O
bfd_release	O
(	O
abfd	*(struct)
,	O
raw_armap	O
)	O
;	O
release_symdefs	O
:	O
bfd_release	O
(	O
abfd	*(struct)
,	O
ardata	O
->	O
symdefs	O
)	O
;	O
return	O
FALSE	O
;	O
}	O
bfd_boolean	int
_bfd_archive_64_bit_write_armap	O
(	O
bfd	struct
*	O
arch	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
,	O
unsigned	O
int	O
elength	O
,	O
struct	O
orl	struct(*(*(char)),union(long,*(struct)),int)
*	O
map	O
,	O
unsigned	O
int	O
symbol_count	O
,	O
int	O
stridx	O
)	O
{	O
unsigned	O
int	O
ranlibsize	O
=	O
(	O
symbol_count	O
*	O
8	int
)	O
+	O
8	int
;	O
unsigned	O
int	O
stringsize	O
=	O
stridx	O
;	O
unsigned	O
int	O
mapsize	O
=	O
stringsize	O
+	O
ranlibsize	O
;	O
file_ptr	long
archive_member_file_ptr	O
;	O
bfd	struct
*	O
current	O
=	O
arch	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
->	O
archive_head	*(struct(*(char),*(struct),*(void),*(struct),*(struct(*(char),*(struct`),*(void),*(struct`),*(struct`),*(struct`),long,long,int,enum(int,int,int,int,int),enum(int,int,int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int),int,int,*(struct`),long,long,struct(*`,*`,*`,int,int,int,int),*(struct`),*(struct`),int,int,long,*(*`),int,int,*(struct`),*(void),*(struct`),*(struct`),*(struct`),*(struct`),union(*`,*`),union(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`),*(void),*(void),*(struct`))),*(struct(*(char),*(struct`),*(void),*(struct`),*(struct`),*(struct`),long,long,int,enum(int,int,int,int,int),enum(int,int,int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int),int,int,*(struct`),long,long,struct(*`,*`,*`,int,int,int,int),*(struct`),*(struct`),int,int,long,*(*`),int,int,*(struct`),*(void),*(struct`),*(struct`),*(struct`),*(struct`),union(*`,*`),union(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`),*(void),*(void),*(struct`))),long,long,int,enum(int,int,int,int,int),enum(int,int,int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int),int,int,*(struct(*(char),*(struct`),*(void),*(struct`),*(struct`),*(struct`),long,long,int,enum(int,int,int,int,int),enum(int,int,int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int),int,int,*(struct`),long,long,struct(*`,*`,*`,int,int,int,int),*(struct`),*(struct`),int,int,long,*(*`),int,int,*(struct`),*(void),*(struct`),*(struct`),*(struct`),*(struct`),union(*`,*`),union(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`),*(void),*(void),*(struct`))),long,long,struct(*(*(struct`)),*((*`,*`,*`)->(*`)),*(void),int,int,int,int),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),int,int,long,*(*(struct(*`,*`,long,int,*`,union`))),int,int,*(struct(int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),long,*(char),*(char),int,int,*((*`,*`)->(*`)),*((*`,*`)->(int)),*((long,int,int)->(*`)),*(struct`),int)),*(void),*(struct(*(char),*(struct`),*(void),*(struct`),*(struct`),*(struct`),long,long,int,enum(int,int,int,int,int),enum(int,int,int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int),int,int,*(struct`),long,long,struct(*`,*`,*`,int,int,int,int),*(struct`),*(struct`),int,int,long,*(*`),int,int,*(struct`),*(void),*(struct`),*(struct`),*(struct`),*(struct`),union(*`,*`),union(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`),*(void),*(void),*(struct`))),*(struct(*(char),*(struct`),*(void),*(struct`),*(struct`),*(struct`),long,long,int,enum(int,int,int,int,int),enum(int,int,int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int),int,int,*(struct`),long,long,struct(*`,*`,*`,int,int,int,int),*(struct`),*(struct`),int,int,long,*(*`),int,int,*(struct`),*(void),*(struct`),*(struct`),*(struct`),*(struct`),union(*`,*`),union(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`),*(void),*(void),*(struct`))),*(struct(*(char),*(struct`),*(void),*(struct`),*(struct`),*(struct`),long,long,int,enum(int,int,int,int,int),enum(int,int,int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int),int,int,*(struct`),long,long,struct(*`,*`,*`,int,int,int,int),*(struct`),*(struct`),int,int,long,*(*`),int,int,*(struct`),*(void),*(struct`),*(struct`),*(struct`),*(struct`),union(*`,*`),union(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`),*(void),*(void),*(struct`))),*(struct(*(char),*(struct`),*(void),*(struct`),*(struct`),*(struct`),long,long,int,enum(int,int,int,int,int),enum(int,int,int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int),int,int,*(struct`),long,long,struct(*`,*`,*`,int,int,int,int),*(struct`),*(struct`),int,int,long,*(*`),int,int,*(struct`),*(void),*(struct`),*(struct`),*(struct`),*(struct`),union(*`,*`),union(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`),*(void),*(void),*(struct`))),union(*(struct(*`,*`,*`,*`,*`,*`,long,long,int,enum(int,int,int,int,int),enum(int,int,int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int),int,int,*`,long,long,struct`,*`,*`,int,int,long,*`,int,int,*`,*`,*`,*`,*`,*`,union`,union`,*`,*`,*`)),*(struct)),union(*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(void)),*(void),*(void),*(struct(long,array(char)))))
;	O
unsigned	O
int	O
count	int
;	O
struct	O
ar_hdr	O
hdr	O
;	O
int	O
padding	O
;	O
bfd_byte	char
buf	*(void)
[	O
8	int
]	O
;	O
padding	O
=	O
BFD_ALIGN	O
(	O
mapsize	O
,	O
8	int
)	O
-	O
mapsize	O
;	O
mapsize	O
+=	O
padding	O
;	O
archive_member_file_ptr	O
=	O
(	O
mapsize	O
+	O
elength	O
+	O
sizeof	O
(	O
struct	O
ar_hdr	O
)	O
+	O
SARMAG	O
)	O
;	O
memset	(*(void),int,long)->(*(void))
(	O
&	O
hdr	O
,	O
' '	O
,	O
sizeof	O
(	O
struct	O
ar_hdr	O
)	O
)	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
hdr	O
.	O
ar_name	O
,	O
"/SYM64/"	*(char)
,	O
strlen	(*(char))->(long)
(	O
"/SYM64/"	*(char)
)	O
)	O
;	O
if	O
(	O
!	O
_bfd_ar_sizepad	O
(	O
hdr	O
.	O
ar_size	O
,	O
sizeof	O
(	O
hdr	O
.	O
ar_size	O
)	O
,	O
mapsize	O
)	O
)	O
return	O
FALSE	O
;	O
_bfd_ar_spacepad	O
(	O
hdr	O
.	O
ar_date	O
,	O
sizeof	O
(	O
hdr	O
.	O
ar_date	O
)	O
,	O
"%ld"	*(char)
,	O
time	struct(long,long)
(	O
NULL	O
)	O
)	O
;	O
_bfd_ar_spacepad	O
(	O
hdr	O
.	O
ar_uid	O
,	O
sizeof	O
(	O
hdr	O
.	O
ar_uid	O
)	O
,	O
"%ld"	*(char)
,	O
0	int
)	O
;	O
_bfd_ar_spacepad	O
(	O
hdr	O
.	O
ar_gid	O
,	O
sizeof	O
(	O
hdr	O
.	O
ar_gid	O
)	O
,	O
"%ld"	*(char)
,	O
0	int
)	O
;	O
_bfd_ar_spacepad	O
(	O
hdr	O
.	O
ar_mode	O
,	O
sizeof	O
(	O
hdr	O
.	O
ar_mode	O
)	O
,	O
"%-7lo"	*(char)
,	O
0	int
)	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
hdr	O
.	O
ar_fmag	O
,	O
ARFMAG	O
,	O
2	int
)	O
;	O
if	O
(	O
bfd_bwrite	(*(void),long,*(struct))->(long)
(	O
&	O
hdr	O
,	O
sizeof	O
(	O
struct	O
ar_hdr	O
)	O
,	O
arch	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
)	O
!=	O
sizeof	O
(	O
struct	O
ar_hdr	O
)	O
)	O
return	O
FALSE	O
;	O
bfd_putb64	(long,*(void))->(void)
(	O
(	O
bfd_vma	long
)	O
symbol_count	O
,	O
buf	*(void)
)	O
;	O
if	O
(	O
bfd_bwrite	(*(void),long,*(struct))->(long)
(	O
buf	*(void)
,	O
8	int
,	O
arch	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
)	O
!=	O
8	int
)	O
return	O
FALSE	O
;	O
count	int
=	O
0	int
;	O
for	O
(	O
current	O
=	O
arch	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
->	O
archive_head	*(struct(*(char),*(struct),*(void),*(struct),*(struct(*(char),*(struct`),*(void),*(struct`),*(struct`),*(struct`),long,long,int,enum(int,int,int,int,int),enum(int,int,int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int),int,int,*(struct`),long,long,struct(*`,*`,*`,int,int,int,int),*(struct`),*(struct`),int,int,long,*(*`),int,int,*(struct`),*(void),*(struct`),*(struct`),*(struct`),*(struct`),union(*`,*`),union(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`),*(void),*(void),*(struct`))),*(struct(*(char),*(struct`),*(void),*(struct`),*(struct`),*(struct`),long,long,int,enum(int,int,int,int,int),enum(int,int,int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int),int,int,*(struct`),long,long,struct(*`,*`,*`,int,int,int,int),*(struct`),*(struct`),int,int,long,*(*`),int,int,*(struct`),*(void),*(struct`),*(struct`),*(struct`),*(struct`),union(*`,*`),union(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`),*(void),*(void),*(struct`))),long,long,int,enum(int,int,int,int,int),enum(int,int,int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int),int,int,*(struct(*(char),*(struct`),*(void),*(struct`),*(struct`),*(struct`),long,long,int,enum(int,int,int,int,int),enum(int,int,int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int),int,int,*(struct`),long,long,struct(*`,*`,*`,int,int,int,int),*(struct`),*(struct`),int,int,long,*(*`),int,int,*(struct`),*(void),*(struct`),*(struct`),*(struct`),*(struct`),union(*`,*`),union(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`),*(void),*(void),*(struct`))),long,long,struct(*(*(struct`)),*((*`,*`,*`)->(*`)),*(void),int,int,int,int),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),int,int,long,*(*(struct(*`,*`,long,int,*`,union`))),int,int,*(struct(int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),long,*(char),*(char),int,int,*((*`,*`)->(*`)),*((*`,*`)->(int)),*((long,int,int)->(*`)),*(struct`),int)),*(void),*(struct(*(char),*(struct`),*(void),*(struct`),*(struct`),*(struct`),long,long,int,enum(int,int,int,int,int),enum(int,int,int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int),int,int,*(struct`),long,long,struct(*`,*`,*`,int,int,int,int),*(struct`),*(struct`),int,int,long,*(*`),int,int,*(struct`),*(void),*(struct`),*(struct`),*(struct`),*(struct`),union(*`,*`),union(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`),*(void),*(void),*(struct`))),*(struct(*(char),*(struct`),*(void),*(struct`),*(struct`),*(struct`),long,long,int,enum(int,int,int,int,int),enum(int,int,int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int),int,int,*(struct`),long,long,struct(*`,*`,*`,int,int,int,int),*(struct`),*(struct`),int,int,long,*(*`),int,int,*(struct`),*(void),*(struct`),*(struct`),*(struct`),*(struct`),union(*`,*`),union(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`),*(void),*(void),*(struct`))),*(struct(*(char),*(struct`),*(void),*(struct`),*(struct`),*(struct`),long,long,int,enum(int,int,int,int,int),enum(int,int,int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int),int,int,*(struct`),long,long,struct(*`,*`,*`,int,int,int,int),*(struct`),*(struct`),int,int,long,*(*`),int,int,*(struct`),*(void),*(struct`),*(struct`),*(struct`),*(struct`),union(*`,*`),union(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`),*(void),*(void),*(struct`))),*(struct(*(char),*(struct`),*(void),*(struct`),*(struct`),*(struct`),long,long,int,enum(int,int,int,int,int),enum(int,int,int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int),int,int,*(struct`),long,long,struct(*`,*`,*`,int,int,int,int),*(struct`),*(struct`),int,int,long,*(*`),int,int,*(struct`),*(void),*(struct`),*(struct`),*(struct`),*(struct`),union(*`,*`),union(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`),*(void),*(void),*(struct`))),union(*(struct(*`,*`,*`,*`,*`,*`,long,long,int,enum(int,int,int,int,int),enum(int,int,int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int),int,int,*`,long,long,struct`,*`,*`,int,int,long,*`,int,int,*`,*`,*`,*`,*`,*`,union`,union`,*`,*`,*`)),*(struct)),union(*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(void)),*(void),*(void),*(struct(long,array(char)))))
;	O
current	O
!=	O
NULL	O
&&	O
count	int
<	O
symbol_count	O
;	O
current	O
=	O
current	O
->	O
archive_next	*(struct(*(char),*(struct),*(void),*(struct),*(struct(*(char),*(struct`),*(void),*(struct`),*(struct`),*(struct`),long,long,int,enum(int,int,int,int,int),enum(int,int,int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int),int,int,*(struct`),long,long,struct(*`,*`,*`,int,int,int,int),*(struct`),*(struct`),int,int,long,*(*`),int,int,*(struct`),*(void),*(struct`),*(struct`),*(struct`),*(struct`),union(*`,*`),union(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`),*(void),*(void),*(struct`))),*(struct(*(char),*(struct`),*(void),*(struct`),*(struct`),*(struct`),long,long,int,enum(int,int,int,int,int),enum(int,int,int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int),int,int,*(struct`),long,long,struct(*`,*`,*`,int,int,int,int),*(struct`),*(struct`),int,int,long,*(*`),int,int,*(struct`),*(void),*(struct`),*(struct`),*(struct`),*(struct`),union(*`,*`),union(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`),*(void),*(void),*(struct`))),long,long,int,enum(int,int,int,int,int),enum(int,int,int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int),int,int,*(struct(*(char),*(struct`),*(void),*(struct`),*(struct`),*(struct`),long,long,int,enum(int,int,int,int,int),enum(int,int,int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int),int,int,*(struct`),long,long,struct(*`,*`,*`,int,int,int,int),*(struct`),*(struct`),int,int,long,*(*`),int,int,*(struct`),*(void),*(struct`),*(struct`),*(struct`),*(struct`),union(*`,*`),union(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`),*(void),*(void),*(struct`))),long,long,struct(*(*(struct`)),*((*`,*`,*`)->(*`)),*(void),int,int,int,int),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),int,int,long,*(*(struct(*`,*`,long,int,*`,union`))),int,int,*(struct(int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),long,*(char),*(char),int,int,*((*`,*`)->(*`)),*((*`,*`)->(int)),*((long,int,int)->(*`)),*(struct`),int)),*(void),*(struct(*(char),*(struct`),*(void),*(struct`),*(struct`),*(struct`),long,long,int,enum(int,int,int,int,int),enum(int,int,int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int),int,int,*(struct`),long,long,struct(*`,*`,*`,int,int,int,int),*(struct`),*(struct`),int,int,long,*(*`),int,int,*(struct`),*(void),*(struct`),*(struct`),*(struct`),*(struct`),union(*`,*`),union(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`),*(void),*(void),*(struct`))),*(struct(*(char),*(struct`),*(void),*(struct`),*(struct`),*(struct`),long,long,int,enum(int,int,int,int,int),enum(int,int,int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int),int,int,*(struct`),long,long,struct(*`,*`,*`,int,int,int,int),*(struct`),*(struct`),int,int,long,*(*`),int,int,*(struct`),*(void),*(struct`),*(struct`),*(struct`),*(struct`),union(*`,*`),union(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`),*(void),*(void),*(struct`))),*(struct(*(char),*(struct`),*(void),*(struct`),*(struct`),*(struct`),long,long,int,enum(int,int,int,int,int),enum(int,int,int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int),int,int,*(struct`),long,long,struct(*`,*`,*`,int,int,int,int),*(struct`),*(struct`),int,int,long,*(*`),int,int,*(struct`),*(void),*(struct`),*(struct`),*(struct`),*(struct`),union(*`,*`),union(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`),*(void),*(void),*(struct`))),*(struct(*(char),*(struct`),*(void),*(struct`),*(struct`),*(struct`),long,long,int,enum(int,int,int,int,int),enum(int,int,int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int),int,int,*(struct`),long,long,struct(*`,*`,*`,int,int,int,int),*(struct`),*(struct`),int,int,long,*(*`),int,int,*(struct`),*(void),*(struct`),*(struct`),*(struct`),*(struct`),union(*`,*`),union(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`),*(void),*(void),*(struct`))),union(*(struct(*`,*`,*`,*`,*`,*`,long,long,int,enum(int,int,int,int,int),enum(int,int,int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int),int,int,*`,long,long,struct`,*`,*`,int,int,long,*`,int,int,*`,*`,*`,*`,*`,*`,union`,union`,*`,*`,*`)),*(struct)),union(*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(void)),*(void),*(void),*(struct(long,array(char)))))
)	O
{	O
for	O
(	O
;	O
count	int
<	O
symbol_count	O
&&	O
map	O
[	O
count	int
]	O
.	O
u	union(long,*(struct))
.	O
abfd	*(struct)
==	O
current	O
;	O
count	int
++	O
)	O
{	O
bfd_putb64	(long,*(void))->(void)
(	O
(	O
bfd_vma	long
)	O
archive_member_file_ptr	O
,	O
buf	*(void)
)	O
;	O
if	O
(	O
bfd_bwrite	(*(void),long,*(struct))->(long)
(	O
buf	*(void)
,	O
8	int
,	O
arch	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
)	O
!=	O
8	int
)	O
return	O
FALSE	O
;	O
}	O
archive_member_file_ptr	O
+=	O
sizeof	O
(	O
struct	O
ar_hdr	O
)	O
;	O
if	O
(	O
!	O
bfd_is_thin_archive	(*(struct(*(char),*(struct),*(void),*(struct),*(struct(*`,*`,*`,*`,*`,*`,long,long,int,enum(int,int,int,int,int),enum(int,int,int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int),int,int,*`,long,long,struct`,*`,*`,int,int,long,*`,int,int,*`,*`,*`,*`,*`,*`,union`,union`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,long,long,int,enum(int,int,int,int,int),enum(int,int,int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int),int,int,*`,long,long,struct`,*`,*`,int,int,long,*`,int,int,*`,*`,*`,*`,*`,*`,union`,union`,*`,*`,*`)),long,long,int,enum(int,int,int,int,int),enum(int,int,int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int),int,int,*(struct(*`,*`,*`,*`,*`,*`,long,long,int,enum(int,int,int,int,int),enum(int,int,int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int),int,int,*`,long,long,struct`,*`,*`,int,int,long,*`,int,int,*`,*`,*`,*`,*`,*`,union`,union`,*`,*`,*`)),long,long,struct(*(*`),*((*`,*`,*`)->(*`)),*(void),int,int,int,int),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,int,long,*(*(struct`)),int,int,*(struct(int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),long,*`,*`,int,int,*`,*`,*`,*`,int)),*(void),*(struct(*`,*`,*`,*`,*`,*`,long,long,int,enum(int,int,int,int,int),enum(int,int,int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int),int,int,*`,long,long,struct`,*`,*`,int,int,long,*`,int,int,*`,*`,*`,*`,*`,*`,union`,union`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,long,long,int,enum(int,int,int,int,int),enum(int,int,int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int),int,int,*`,long,long,struct`,*`,*`,int,int,long,*`,int,int,*`,*`,*`,*`,*`,*`,union`,union`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,long,long,int,enum(int,int,int,int,int),enum(int,int,int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int),int,int,*`,long,long,struct`,*`,*`,int,int,long,*`,int,int,*`,*`,*`,*`,*`,*`,union`,union`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,long,long,int,enum(int,int,int,int,int),enum(int,int,int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int),int,int,*`,long,long,struct`,*`,*`,int,int,long,*`,int,int,*`,*`,*`,*`,*`,*`,union`,union`,*`,*`,*`)),union(*(struct`),*(struct`)),union(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(void)),*(void),*(void),*(struct(long,array(char))))))->(int)
(	O
arch	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
)	O
)	O
archive_member_file_ptr	O
+=	O
arelt_size	O
(	O
current	O
)	O
;	O
archive_member_file_ptr	O
+=	O
archive_member_file_ptr	O
%	O
2	int
;	O
}	O
for	O
(	O
count	int
=	O
0	int
;	O
count	int
<	O
symbol_count	O
;	O
count	int
++	O
)	O
{	O
size_t	long
len	long
=	O
strlen	(*(char))->(long)
(	O
*	O
map	O
[	O
count	int
]	O
.	O
name	*(char)
)	O
+	O
1	int
;	O
if	O
(	O
bfd_bwrite	(*(void),long,*(struct))->(long)
(	O
*	O
map	O
[	O
count	int
]	O
.	O
name	*(char)
,	O
len	long
,	O
arch	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
)	O
!=	O
len	long
)	O
return	O
FALSE	O
;	O
}	O
while	O
(	O
padding	O
!=	O
0	int
)	O
{	O
if	O
(	O
bfd_bwrite	(*(void),long,*(struct))->(long)
(	O
""	*(char)
,	O
1	int
,	O
arch	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
)	O
!=	O
1	int
)	O
return	O
FALSE	O
;	O
--	O
padding	O
;	O
}	O
return	O
TRUE	int
;	O
}	O
