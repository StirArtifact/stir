typedef	O
struct	O
{	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
lu	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
;	O
gsl_permutation	struct(long,*(long))
*	O
permutation	*(struct(long,*(long)))
;	O
}	O
newton_state_t	struct(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,*(long))))
;	O
static	O
int	O
newton_alloc	(*(void),long)->(int)
(	O
void	O
*	O
vstate	*(void)
,	O
size_t	long
n	int
)	O
;	O
static	O
int	O
newton_set	(*(void),*(struct(*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),long,*(void))),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
void	O
*	O
vstate	*(void)
,	O
gsl_multiroot_function_fdf	struct(*((*(struct(long,long,*`,*`,int)),*(void),*(struct(long,long,*`,*`,int)))->(int)),*((*(struct(long,long,*`,*`,int)),*(void),*(struct(long,long,long,*`,*`,int)))->(int)),*((*(struct(long,long,*`,*`,int)),*(void),*(struct(long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)))->(int)),long,*(void))
*	O
fdf	*((double,*(void),*(double),*(double))->(void))
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
x	double
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
f	*(double)
,	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
J	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
dx	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
static	O
int	O
newton_iterate	(*(void),*(struct(*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),long,*(void))),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
void	O
*	O
vstate	*(void)
,	O
gsl_multiroot_function_fdf	struct(*((*(struct(long,long,*`,*`,int)),*(void),*(struct(long,long,*`,*`,int)))->(int)),*((*(struct(long,long,*`,*`,int)),*(void),*(struct(long,long,long,*`,*`,int)))->(int)),*((*(struct(long,long,*`,*`,int)),*(void),*(struct(long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)))->(int)),long,*(void))
*	O
fdf	*((double,*(void),*(double),*(double))->(void))
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
x	double
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
f	*(double)
,	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
J	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
dx	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
static	O
void	O
newton_free	(*(void))->(void)
(	O
void	O
*	O
vstate	*(void)
)	O
;	O
static	O
int	O
newton_alloc	(*(void),long)->(int)
(	O
void	O
*	O
vstate	*(void)
,	O
size_t	long
n	int
)	O
{	O
newton_state_t	struct(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,*(long))))
*	O
state	*(int)
=	O
(	O
newton_state_t	struct(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,*(long))))
*	O
)	O
vstate	*(void)
;	O
gsl_permutation	struct(long,*(long))
*	O
p	int
;	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
;	O
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
=	O
gsl_matrix_calloc	(long,long)->(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
n	int
,	O
n	int
)	O
;	O
if	O
(	O
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
==	O
0	int
)	O
{	O
GSL_ERROR	O
(	O
"failed to allocate space for lu"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	*(int)
->	O
lu	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
;	O
p	int
=	O
gsl_permutation_calloc	(long)->(*(struct(long,*(long))))
(	O
n	int
)	O
;	O
if	O
(	O
p	int
==	O
0	int
)	O
{	O
gsl_matrix_free	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
)	O
;	O
GSL_ERROR	O
(	O
"failed to allocate space for permutation"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	*(int)
->	O
permutation	*(struct(long,*(long)))
=	O
p	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
int	O
newton_set	(*(void),*(struct(*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),long,*(void))),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
void	O
*	O
vstate	*(void)
,	O
gsl_multiroot_function_fdf	struct(*((*(struct(long,long,*`,*`,int)),*(void),*(struct(long,long,*`,*`,int)))->(int)),*((*(struct(long,long,*`,*`,int)),*(void),*(struct(long,long,long,*`,*`,int)))->(int)),*((*(struct(long,long,*`,*`,int)),*(void),*(struct(long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)))->(int)),long,*(void))
*	O
FDF	*(struct(*((*(struct`),*(void),*(struct`))->(int)),*((*(struct`),*(void),*(struct`))->(int)),*((*(struct`),*(void),*(struct`),*(struct`))->(int)),long,*(void)))
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
x	double
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
f	*(double)
,	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
J	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
dx	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
{	O
newton_state_t	struct(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,*(long))))
*	O
state	*(int)
=	O
(	O
newton_state_t	struct(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,*(long))))
*	O
)	O
vstate	*(void)
;	O
size_t	long
i	long
,	O
n	int
=	O
FDF	*(struct(*((*(struct`),*(void),*(struct`))->(int)),*((*(struct`),*(void),*(struct`))->(int)),*((*(struct`),*(void),*(struct`),*(struct`))->(int)),long,*(void)))
->	O
n	int
;	O
state	*(int)
=	O
0	int
;	O
GSL_MULTIROOT_FN_EVAL_F_DF	O
(	O
FDF	*(struct(*((*(struct`),*(void),*(struct`))->(int)),*((*(struct`),*(void),*(struct`))->(int)),*((*(struct`),*(void),*(struct`),*(struct`))->(int)),long,*(void)))
,	O
x	double
,	O
f	*(double)
,	O
J	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
n	int
;	O
i	long
++	O
)	O
{	O
gsl_vector_set	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,double)->(void)
(	O
dx	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
i	long
,	O
0.0	int
)	O
;	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
int	O
newton_iterate	(*(void),*(struct(*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),long,*(void))),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
void	O
*	O
vstate	*(void)
,	O
gsl_multiroot_function_fdf	struct(*((*(struct(long,long,*`,*`,int)),*(void),*(struct(long,long,*`,*`,int)))->(int)),*((*(struct(long,long,*`,*`,int)),*(void),*(struct(long,long,long,*`,*`,int)))->(int)),*((*(struct(long,long,*`,*`,int)),*(void),*(struct(long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)))->(int)),long,*(void))
*	O
fdf	*((double,*(void),*(double),*(double))->(void))
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
x	double
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
f	*(double)
,	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
J	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
dx	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
{	O
newton_state_t	struct(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,*(long))))
*	O
state	*(int)
=	O
(	O
newton_state_t	struct(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,*(long))))
*	O
)	O
vstate	*(void)
;	O
int	O
signum	*(int)
;	O
size_t	long
i	long
;	O
size_t	long
n	int
=	O
fdf	*((double,*(void),*(double),*(double))->(void))
->	O
n	int
;	O
gsl_matrix_memcpy	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
state	*(int)
->	O
lu	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
J	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_linalg_LU_decomp	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,*(long))),*(int))->(int)
(	O
state	*(int)
->	O
lu	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
state	*(int)
->	O
permutation	*(struct(long,*(long)))
,	O
&	O
signum	*(int)
)	O
;	O
{	O
int	O
status	int
=	O
gsl_linalg_LU_solve	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,*(long))),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
state	*(int)
->	O
lu	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
state	*(int)
->	O
permutation	*(struct(long,*(long)))
,	O
f	*(double)
,	O
dx	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
}	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
n	int
;	O
i	long
++	O
)	O
{	O
double	O
e	int
=	O
gsl_vector_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(double)
(	O
dx	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
i	long
)	O
;	O
double	O
y	double
=	O
gsl_vector_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(double)
(	O
x	double
,	O
i	long
)	O
;	O
gsl_vector_set	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,double)->(void)
(	O
dx	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
i	long
,	O
-	O
e	int
)	O
;	O
gsl_vector_set	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,double)->(void)
(	O
x	double
,	O
i	long
,	O
y	double
-	O
e	int
)	O
;	O
}	O
{	O
int	O
status	int
=	O
GSL_MULTIROOT_FN_EVAL_F_DF	O
(	O
fdf	*((double,*(void),*(double),*(double))->(void))
,	O
x	double
,	O
f	*(double)
,	O
J	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
if	O
(	O
status	int
!=	O
GSL_SUCCESS	int
)	O
{	O
return	O
GSL_EBADFUNC	int
;	O
}	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
void	O
newton_free	(*(void))->(void)
(	O
void	O
*	O
vstate	*(void)
)	O
{	O
newton_state_t	struct(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,*(long))))
*	O
state	*(int)
=	O
(	O
newton_state_t	struct(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,*(long))))
*	O
)	O
vstate	*(void)
;	O
gsl_matrix_free	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
state	*(int)
->	O
lu	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_permutation_free	(*(struct(long,*(long))))->(void)
(	O
state	*(int)
->	O
permutation	*(struct(long,*(long)))
)	O
;	O
}	O
static	O
const	O
gsl_multiroot_fdfsolver_type	struct(*(char),long,*((*(void),long)->(int)),*((*(void),*(struct(*`,*`,*`,long,*`)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)))->(int)),*((*(void),*(struct(*`,*`,*`,long,*`)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)))->(int)),*((*(void))->(void)))
newton_type	struct(*(char),long,*((*(void),long)->(int)),*((*(void),*(struct(*`,*`,*`,long,*`)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)))->(int)),*((*(void),*(struct(*`,*`,*`,long,*`)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)))->(int)),*((*(void))->(void)))
=	O
{	O
"newton"	*(char)
,	O
sizeof	O
(	O
newton_state_t	struct(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,*(long))))
)	O
,	O
&	O
newton_alloc	(*(void),long)->(int)
,	O
&	O
newton_set	(*(void),*(struct(*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),long,*(void))),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
,	O
&	O
newton_iterate	(*(void),*(struct(*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),long,*(void))),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
,	O
&	O
newton_free	(*(void))->(void)
}	O
;	O
const	O
gsl_multiroot_fdfsolver_type	struct(*(char),long,*((*(void),long)->(int)),*((*(void),*(struct(*`,*`,*`,long,*`)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)))->(int)),*((*(void),*(struct(*`,*`,*`,long,*`)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)))->(int)),*((*(void))->(void)))
*	O
gsl_multiroot_fdfsolver_newton	*(struct(*(char),long,*((*(void),long)->(int)),*((*(void),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`))->(int)),*((*(void),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`))->(int)),*((*(void))->(void))))
=	O
&	O
newton_type	struct(*(char),long,*((*(void),long)->(int)),*((*(void),*(struct(*`,*`,*`,long,*`)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)))->(int)),*((*(void),*(struct(*`,*`,*`,long,*`)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)))->(int)),*((*(void))->(void)))
;	O
