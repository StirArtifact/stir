static	O
char	O
*	O
my_ltostr	(long,*(char))->(*(char))
(	O
long	O
v	long
,	O
char	O
*	O
str	*(*(char))
)	O
{	O
long	O
d	long
,	O
r	long
;	O
char	O
temp	array(char)
[	O
20	int
]	O
;	O
int	O
count	int
,	O
k	int
,	O
start	*(int)
;	O
if	O
(	O
v	long
<	O
0	int
)	O
{	O
str	*(*(char))
[	O
0	int
]	O
=	O
'-'	O
;	O
start	*(int)
=	O
1	int
;	O
v	long
=	O
-	O
v	long
;	O
}	O
else	O
start	*(int)
=	O
0	int
;	O
count	int
=	O
0	int
;	O
do	O
{	O
d	long
=	O
v	long
/	O
10	int
;	O
r	long
=	O
v	long
-	O
d	long
*	O
10	int
;	O
temp	array(char)
[	O
start	*(int)
+	O
count	int
]	O
=	O
'0'	O
+	O
(	O
char	O
)	O
r	long
;	O
count	int
++	O
;	O
v	long
=	O
d	long
;	O
}	O
while	O
(	O
v	long
)	O
;	O
for	O
(	O
k	int
=	O
0	int
;	O
k	int
<	O
count	int
;	O
k	int
++	O
)	O
str	*(*(char))
[	O
k	int
+	O
start	*(int)
]	O
=	O
temp	array(char)
[	O
start	*(int)
+	O
count	int
-	O
k	int
-	O
1	int
]	O
;	O
str	*(*(char))
[	O
count	int
+	O
start	*(int)
]	O
=	O
0	int
;	O
return	O
str	*(*(char))
;	O
}	O
static	O
void	O
get_Name_type	(*(struct),*(struct),*(char),*(char))->(void)
(	O
ASN1_TYPE	O
cert_def	*(struct)
,	O
ASN1_TYPE	O
cert	*(struct)
,	O
const	O
char	O
*	O
root	*(struct)
,	O
unsigned	O
char	O
*	O
ans	*(char)
)	O
{	O
int	O
k	int
,	O
k2	int
,	O
result	int
,	O
len	int
;	O
char	O
name	*(char)
[	O
128	int
]	O
,	O
str	*(*(char))
[	O
1024	int
]	O
,	O
str2	array(char)
[	O
1024	int
]	O
,	O
name2	array(char)
[	O
128	int
]	O
,	O
counter	array(char)
[	O
5	int
]	O
,	O
name3	array(char)
[	O
128	int
]	O
;	O
ASN1_TYPE	O
value	*(void)
=	O
ASN1_TYPE_EMPTY	O
;	O
char	O
errorDescription	*(char)
[	O
ASN1_MAX_ERROR_DESCRIPTION_SIZE	int
]	O
;	O
char	O
*	O
answer	*(char)
=	O
(	O
char	O
*	O
)	O
ans	*(char)
;	O
answer	*(char)
[	O
0	int
]	O
=	O
0	int
;	O
k	int
=	O
1	int
;	O
do	O
{	O
strcpy	(*(char),*(char))->(*(char))
(	O
name	*(char)
,	O
root	*(struct)
)	O
;	O
strcat	(*(char),*(char))->(*(char))
(	O
name	*(char)
,	O
".rdnSequence.?"	*(char)
)	O
;	O
my_ltostr	(long,*(char))->(*(char))
(	O
k	int
,	O
counter	array(char)
)	O
;	O
strcat	(*(char),*(char))->(*(char))
(	O
name	*(char)
,	O
counter	array(char)
)	O
;	O
len	int
=	O
sizeof	O
(	O
str	*(*(char))
)	O
-	O
1	int
;	O
result	int
=	O
asn1_read_value	(*(struct),*(char),*(void),*(int))->(int)
(	O
cert	*(struct)
,	O
name	*(char)
,	O
str	*(*(char))
,	O
&	O
len	int
)	O
;	O
if	O
(	O
result	int
==	O
ASN1_ELEMENT_NOT_FOUND	int
)	O
break	O
;	O
k2	int
=	O
1	int
;	O
do	O
{	O
strcpy	(*(char),*(char))->(*(char))
(	O
name2	array(char)
,	O
name	*(char)
)	O
;	O
strcat	(*(char),*(char))->(*(char))
(	O
name2	array(char)
,	O
".?"	*(char)
)	O
;	O
my_ltostr	(long,*(char))->(*(char))
(	O
k2	int
,	O
counter	array(char)
)	O
;	O
strcat	(*(char),*(char))->(*(char))
(	O
name2	array(char)
,	O
counter	array(char)
)	O
;	O
len	int
=	O
sizeof	O
(	O
str	*(*(char))
)	O
-	O
1	int
;	O
result	int
=	O
asn1_read_value	(*(struct),*(char),*(void),*(int))->(int)
(	O
cert	*(struct)
,	O
name2	array(char)
,	O
str	*(*(char))
,	O
&	O
len	int
)	O
;	O
if	O
(	O
result	int
==	O
ASN1_ELEMENT_NOT_FOUND	int
)	O
break	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
name3	array(char)
,	O
name2	array(char)
)	O
;	O
strcat	(*(char),*(char))->(*(char))
(	O
name3	array(char)
,	O
".type"	*(char)
)	O
;	O
len	int
=	O
sizeof	O
(	O
str	*(*(char))
)	O
-	O
1	int
;	O
result	int
=	O
asn1_read_value	(*(struct),*(char),*(void),*(int))->(int)
(	O
cert	*(struct)
,	O
name3	array(char)
,	O
str	*(*(char))
,	O
&	O
len	int
)	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
name3	array(char)
,	O
name2	array(char)
)	O
;	O
strcat	(*(char),*(char))->(*(char))
(	O
name3	array(char)
,	O
".value"	*(char)
)	O
;	O
if	O
(	O
result	int
==	O
ASN1_SUCCESS	int
)	O
{	O
len	int
=	O
sizeof	O
(	O
str2	array(char)
)	O
-	O
1	int
;	O
result	int
=	O
asn1_read_value	(*(struct),*(char),*(void),*(int))->(int)
(	O
cert_def	*(struct)
,	O
"PKIX1Implicit88.id-at-countryName"	*(char)
,	O
str2	array(char)
,	O
&	O
len	int
)	O
;	O
if	O
(	O
!	O
strcmp	(*(char),*(char))->(int)
(	O
str	*(*(char))
,	O
str2	array(char)
)	O
)	O
{	O
asn1_create_element	(*(struct),*(char),*(*(struct)))->(int)
(	O
cert_def	*(struct)
,	O
"PKIX1Implicit88.X520OrganizationName"	*(char)
,	O
&	O
value	*(void)
)	O
;	O
len	int
=	O
sizeof	O
(	O
str	*(*(char))
)	O
-	O
1	int
;	O
asn1_read_value	(*(struct),*(char),*(void),*(int))->(int)
(	O
cert	*(struct)
,	O
name3	array(char)
,	O
str	*(*(char))
,	O
&	O
len	int
)	O
;	O
asn1_der_decoding	(*(*(struct)),*(void),int,*(char))->(int)
(	O
&	O
value	*(void)
,	O
str	*(*(char))
,	O
len	int
,	O
errorDescription	*(char)
)	O
;	O
len	int
=	O
sizeof	O
(	O
str	*(*(char))
)	O
-	O
1	int
;	O
asn1_read_value	(*(struct),*(char),*(void),*(int))->(int)
(	O
value	*(void)
,	O
""	*(char)
,	O
str	*(*(char))
,	O
&	O
len	int
)	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
name3	array(char)
,	O
str	*(*(char))
)	O
;	O
len	int
=	O
sizeof	O
(	O
str	*(*(char))
)	O
-	O
1	int
;	O
asn1_read_value	(*(struct),*(char),*(void),*(int))->(int)
(	O
value	*(void)
,	O
name3	array(char)
,	O
str	*(*(char))
,	O
&	O
len	int
)	O
;	O
str	*(*(char))
[	O
len	int
]	O
=	O
0	int
;	O
strcat	(*(char),*(char))->(*(char))
(	O
answer	*(char)
,	O
" C="	*(char)
)	O
;	O
strcat	(*(char),*(char))->(*(char))
(	O
answer	*(char)
,	O
str	*(*(char))
)	O
;	O
asn1_delete_structure	(*(*(struct)))->(int)
(	O
&	O
value	*(void)
)	O
;	O
}	O
else	O
{	O
len	int
=	O
sizeof	O
(	O
str2	array(char)
)	O
-	O
1	int
;	O
result	int
=	O
asn1_read_value	(*(struct),*(char),*(void),*(int))->(int)
(	O
cert_def	*(struct)
,	O
"PKIX1Implicit88.id-at-organizationName"	*(char)
,	O
str2	array(char)
,	O
&	O
len	int
)	O
;	O
if	O
(	O
!	O
strcmp	(*(char),*(char))->(int)
(	O
str	*(*(char))
,	O
str2	array(char)
)	O
)	O
{	O
asn1_create_element	(*(struct),*(char),*(*(struct)))->(int)
(	O
cert_def	*(struct)
,	O
"PKIX1Implicit88.X520OrganizationName"	*(char)
,	O
&	O
value	*(void)
)	O
;	O
len	int
=	O
sizeof	O
(	O
str	*(*(char))
)	O
-	O
1	int
;	O
asn1_read_value	(*(struct),*(char),*(void),*(int))->(int)
(	O
cert	*(struct)
,	O
name3	array(char)
,	O
str	*(*(char))
,	O
&	O
len	int
)	O
;	O
asn1_der_decoding	(*(*(struct)),*(void),int,*(char))->(int)
(	O
&	O
value	*(void)
,	O
str	*(*(char))
,	O
len	int
,	O
errorDescription	*(char)
)	O
;	O
len	int
=	O
sizeof	O
(	O
str	*(*(char))
)	O
-	O
1	int
;	O
asn1_read_value	(*(struct),*(char),*(void),*(int))->(int)
(	O
value	*(void)
,	O
""	*(char)
,	O
str	*(*(char))
,	O
&	O
len	int
)	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
name3	array(char)
,	O
str	*(*(char))
)	O
;	O
len	int
=	O
sizeof	O
(	O
str	*(*(char))
)	O
-	O
1	int
;	O
asn1_read_value	(*(struct),*(char),*(void),*(int))->(int)
(	O
value	*(void)
,	O
name3	array(char)
,	O
str	*(*(char))
,	O
&	O
len	int
)	O
;	O
str	*(*(char))
[	O
len	int
]	O
=	O
0	int
;	O
strcat	(*(char),*(char))->(*(char))
(	O
answer	*(char)
,	O
" O="	*(char)
)	O
;	O
strcat	(*(char),*(char))->(*(char))
(	O
answer	*(char)
,	O
str	*(*(char))
)	O
;	O
asn1_delete_structure	(*(*(struct)))->(int)
(	O
&	O
value	*(void)
)	O
;	O
}	O
else	O
{	O
len	int
=	O
sizeof	O
(	O
str2	array(char)
)	O
-	O
1	int
;	O
result	int
=	O
asn1_read_value	(*(struct),*(char),*(void),*(int))->(int)
(	O
cert_def	*(struct)
,	O
"PKIX1Implicit88.id-at-organizationalUnitName"	*(char)
,	O
str2	array(char)
,	O
&	O
len	int
)	O
;	O
if	O
(	O
!	O
strcmp	(*(char),*(char))->(int)
(	O
str	*(*(char))
,	O
str2	array(char)
)	O
)	O
{	O
asn1_create_element	(*(struct),*(char),*(*(struct)))->(int)
(	O
cert_def	*(struct)
,	O
"PKIX1Implicit88.X520OrganizationalUnitName"	*(char)
,	O
&	O
value	*(void)
)	O
;	O
len	int
=	O
sizeof	O
(	O
str	*(*(char))
)	O
-	O
1	int
;	O
asn1_read_value	(*(struct),*(char),*(void),*(int))->(int)
(	O
cert	*(struct)
,	O
name3	array(char)
,	O
str	*(*(char))
,	O
&	O
len	int
)	O
;	O
asn1_der_decoding	(*(*(struct)),*(void),int,*(char))->(int)
(	O
&	O
value	*(void)
,	O
str	*(*(char))
,	O
len	int
,	O
errorDescription	*(char)
)	O
;	O
len	int
=	O
sizeof	O
(	O
str	*(*(char))
)	O
-	O
1	int
;	O
asn1_read_value	(*(struct),*(char),*(void),*(int))->(int)
(	O
value	*(void)
,	O
""	*(char)
,	O
str	*(*(char))
,	O
&	O
len	int
)	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
name3	array(char)
,	O
str	*(*(char))
)	O
;	O
len	int
=	O
sizeof	O
(	O
str	*(*(char))
)	O
-	O
1	int
;	O
asn1_read_value	(*(struct),*(char),*(void),*(int))->(int)
(	O
value	*(void)
,	O
name3	array(char)
,	O
str	*(*(char))
,	O
&	O
len	int
)	O
;	O
str	*(*(char))
[	O
len	int
]	O
=	O
0	int
;	O
strcat	(*(char),*(char))->(*(char))
(	O
answer	*(char)
,	O
" OU="	*(char)
)	O
;	O
strcat	(*(char),*(char))->(*(char))
(	O
answer	*(char)
,	O
str	*(*(char))
)	O
;	O
asn1_delete_structure	(*(*(struct)))->(int)
(	O
&	O
value	*(void)
)	O
;	O
}	O
}	O
}	O
}	O
k2	int
++	O
;	O
}	O
while	O
(	O
1	int
)	O
;	O
k	int
++	O
;	O
}	O
while	O
(	O
1	int
)	O
;	O
}	O
static	O
void	O
create_certificate	(*(struct),*(char),*(int))->(void)
(	O
ASN1_TYPE	O
cert_def	*(struct)
,	O
unsigned	O
char	O
*	O
der	*(char)
,	O
int	O
*	O
der_len	int
)	O
{	O
int	O
result	int
,	O
k	int
,	O
len	int
;	O
unsigned	O
char	O
str	*(*(char))
[	O
1024	int
]	O
;	O
const	O
unsigned	O
char	O
*	O
str2	array(char)
;	O
ASN1_TYPE	O
cert1	*(struct)
=	O
ASN1_TYPE_EMPTY	O
;	O
ASN1_TYPE	O
value	*(void)
=	O
ASN1_TYPE_EMPTY	O
;	O
ASN1_TYPE	O
param	*(struct)
=	O
ASN1_TYPE_EMPTY	O
;	O
ASN1_TYPE	O
constr	*(struct)
=	O
ASN1_TYPE_EMPTY	O
;	O
char	O
errorDescription	*(char)
[	O
ASN1_MAX_ERROR_DESCRIPTION_SIZE	int
]	O
;	O
int	O
max_len	int
;	O
max_len	int
=	O
*	O
der_len	int
;	O
result	int
=	O
asn1_create_element	(*(struct),*(char),*(*(struct)))->(int)
(	O
cert_def	*(struct)
,	O
"PKIX1Implicit88.Certificate"	*(char)
,	O
&	O
cert1	*(struct)
)	O
;	O
result	int
=	O
asn1_write_value	(*(struct),*(char),*(void),int)->(int)
(	O
cert1	*(struct)
,	O
"tbsCertificate.version"	*(char)
,	O
"v3"	*(char)
,	O
0	int
)	O
;	O
result	int
=	O
asn1_write_value	(*(struct),*(char),*(void),int)->(int)
(	O
cert1	*(struct)
,	O
"tbsCertificate.serialNumber"	*(char)
,	O
"17"	*(char)
,	O
0	int
)	O
;	O
len	int
=	O
sizeof	O
(	O
str	*(*(char))
)	O
-	O
1	int
;	O
result	int
=	O
asn1_read_value	(*(struct),*(char),*(void),*(int))->(int)
(	O
cert_def	*(struct)
,	O
"PKIX1Implicit88.id-dsa-with-sha1"	*(char)
,	O
str	*(*(char))
,	O
&	O
len	int
)	O
;	O
result	int
=	O
asn1_write_value	(*(struct),*(char),*(void),int)->(int)
(	O
cert1	*(struct)
,	O
"tbsCertificate.signature.algorithm"	*(char)
,	O
str	*(*(char))
,	O
1	int
)	O
;	O
result	int
=	O
asn1_write_value	(*(struct),*(char),*(void),int)->(int)
(	O
cert1	*(struct)
,	O
"tbsCertificate.signature.parameters"	*(char)
,	O
NULL	O
,	O
0	int
)	O
;	O
result	int
=	O
asn1_write_value	(*(struct),*(char),*(void),int)->(int)
(	O
cert1	*(struct)
,	O
"tbsCertificate.issuer"	*(char)
,	O
"rdnSequence"	*(char)
,	O
12	int
)	O
;	O
result	int
=	O
asn1_write_value	(*(struct),*(char),*(void),int)->(int)
(	O
cert1	*(struct)
,	O
"tbsCertificate.issuer.rdnSequence"	*(char)
,	O
"NEW"	*(char)
,	O
1	int
)	O
;	O
result	int
=	O
asn1_write_value	(*(struct),*(char),*(void),int)->(int)
(	O
cert1	*(struct)
,	O
"tbsCertificate.issuer.rdnSequence.?LAST"	*(char)
,	O
"NEW"	*(char)
,	O
1	int
)	O
;	O
len	int
=	O
sizeof	O
(	O
str	*(*(char))
)	O
-	O
1	int
;	O
result	int
=	O
asn1_read_value	(*(struct),*(char),*(void),*(int))->(int)
(	O
cert_def	*(struct)
,	O
"PKIX1Implicit88.id-at-countryName"	*(char)
,	O
str	*(*(char))
,	O
&	O
len	int
)	O
;	O
result	int
=	O
asn1_write_value	(*(struct),*(char),*(void),int)->(int)
(	O
cert1	*(struct)
,	O
"tbsCertificate.issuer.rdnSequence.?LAST.?LAST.type"	*(char)
,	O
str	*(*(char))
,	O
1	int
)	O
;	O
result	int
=	O
asn1_create_element	(*(struct),*(char),*(*(struct)))->(int)
(	O
cert_def	*(struct)
,	O
"PKIX1Implicit88.X520countryName"	*(char)
,	O
&	O
value	*(void)
)	O
;	O
result	int
=	O
asn1_write_value	(*(struct),*(char),*(void),int)->(int)
(	O
value	*(void)
,	O
""	*(char)
,	O
"US"	*(char)
,	O
2	int
)	O
;	O
*	O
der_len	int
=	O
max_len	int
;	O
result	int
=	O
asn1_der_coding	(*(struct),*(char),*(void),*(int),*(char))->(int)
(	O
value	*(void)
,	O
""	*(char)
,	O
der	*(char)
,	O
der_len	int
,	O
errorDescription	*(char)
)	O
;	O
asn1_delete_structure	(*(*(struct)))->(int)
(	O
&	O
value	*(void)
)	O
;	O
result	int
=	O
asn1_write_value	(*(struct),*(char),*(void),int)->(int)
(	O
cert1	*(struct)
,	O
"tbsCertificate.issuer.rdnSequence.?LAST.?LAST.value"	*(char)
,	O
der	*(char)
,	O
*	O
der_len	int
)	O
;	O
result	int
=	O
asn1_write_value	(*(struct),*(char),*(void),int)->(int)
(	O
cert1	*(struct)
,	O
"tbsCertificate.issuer.rdnSequence"	*(char)
,	O
"NEW"	*(char)
,	O
1	int
)	O
;	O
result	int
=	O
asn1_write_value	(*(struct),*(char),*(void),int)->(int)
(	O
cert1	*(struct)
,	O
"tbsCertificate.issuer.rdnSequence.?LAST"	*(char)
,	O
"NEW"	*(char)
,	O
1	int
)	O
;	O
len	int
=	O
sizeof	O
(	O
str	*(*(char))
)	O
-	O
1	int
;	O
result	int
=	O
asn1_read_value	(*(struct),*(char),*(void),*(int))->(int)
(	O
cert_def	*(struct)
,	O
"PKIX1Implicit88.id-at-organizationName"	*(char)
,	O
str	*(*(char))
,	O
&	O
len	int
)	O
;	O
result	int
=	O
asn1_write_value	(*(struct),*(char),*(void),int)->(int)
(	O
cert1	*(struct)
,	O
"tbsCertificate.issuer.rdnSequence.?LAST.?LAST.type"	*(char)
,	O
str	*(*(char))
,	O
1	int
)	O
;	O
result	int
=	O
asn1_create_element	(*(struct),*(char),*(*(struct)))->(int)
(	O
cert_def	*(struct)
,	O
"PKIX1Implicit88.X520OrganizationName"	*(char)
,	O
&	O
value	*(void)
)	O
;	O
result	int
=	O
asn1_write_value	(*(struct),*(char),*(void),int)->(int)
(	O
value	*(void)
,	O
""	*(char)
,	O
"printableString"	*(char)
,	O
1	int
)	O
;	O
result	int
=	O
asn1_write_value	(*(struct),*(char),*(void),int)->(int)
(	O
value	*(void)
,	O
"printableString"	*(char)
,	O
"gov"	*(char)
,	O
3	int
)	O
;	O
*	O
der_len	int
=	O
max_len	int
;	O
result	int
=	O
asn1_der_coding	(*(struct),*(char),*(void),*(int),*(char))->(int)
(	O
value	*(void)
,	O
""	*(char)
,	O
der	*(char)
,	O
der_len	int
,	O
errorDescription	*(char)
)	O
;	O
asn1_delete_structure	(*(*(struct)))->(int)
(	O
&	O
value	*(void)
)	O
;	O
result	int
=	O
asn1_write_value	(*(struct),*(char),*(void),int)->(int)
(	O
cert1	*(struct)
,	O
"tbsCertificate.issuer.rdnSequence.?LAST.?LAST.value"	*(char)
,	O
der	*(char)
,	O
*	O
der_len	int
)	O
;	O
result	int
=	O
asn1_write_value	(*(struct),*(char),*(void),int)->(int)
(	O
cert1	*(struct)
,	O
"tbsCertificate.issuer.rdnSequence"	*(char)
,	O
"NEW"	*(char)
,	O
1	int
)	O
;	O
result	int
=	O
asn1_write_value	(*(struct),*(char),*(void),int)->(int)
(	O
cert1	*(struct)
,	O
"tbsCertificate.issuer.rdnSequence.?LAST"	*(char)
,	O
"NEW"	*(char)
,	O
1	int
)	O
;	O
len	int
=	O
sizeof	O
(	O
str	*(*(char))
)	O
-	O
1	int
;	O
result	int
=	O
asn1_read_value	(*(struct),*(char),*(void),*(int))->(int)
(	O
cert_def	*(struct)
,	O
"PKIX1Implicit88.id-at-organizationalUnitName"	*(char)
,	O
str	*(*(char))
,	O
&	O
len	int
)	O
;	O
result	int
=	O
asn1_write_value	(*(struct),*(char),*(void),int)->(int)
(	O
cert1	*(struct)
,	O
"tbsCertificate.issuer.rdnSequence.?LAST.?LAST.type"	*(char)
,	O
str	*(*(char))
,	O
1	int
)	O
;	O
result	int
=	O
asn1_create_element	(*(struct),*(char),*(*(struct)))->(int)
(	O
cert_def	*(struct)
,	O
"PKIX1Implicit88.X520OrganizationalUnitName"	*(char)
,	O
&	O
value	*(void)
)	O
;	O
result	int
=	O
asn1_write_value	(*(struct),*(char),*(void),int)->(int)
(	O
value	*(void)
,	O
""	*(char)
,	O
"printableString"	*(char)
,	O
1	int
)	O
;	O
result	int
=	O
asn1_write_value	(*(struct),*(char),*(void),int)->(int)
(	O
value	*(void)
,	O
"printableString"	*(char)
,	O
"nist"	*(char)
,	O
4	int
)	O
;	O
*	O
der_len	int
=	O
max_len	int
;	O
result	int
=	O
asn1_der_coding	(*(struct),*(char),*(void),*(int),*(char))->(int)
(	O
value	*(void)
,	O
""	*(char)
,	O
der	*(char)
,	O
der_len	int
,	O
errorDescription	*(char)
)	O
;	O
asn1_delete_structure	(*(*(struct)))->(int)
(	O
&	O
value	*(void)
)	O
;	O
result	int
=	O
asn1_write_value	(*(struct),*(char),*(void),int)->(int)
(	O
cert1	*(struct)
,	O
"tbsCertificate.issuer.rdnSequence.?LAST.?LAST.value"	*(char)
,	O
der	*(char)
,	O
*	O
der_len	int
)	O
;	O
result	int
=	O
asn1_write_value	(*(struct),*(char),*(void),int)->(int)
(	O
cert1	*(struct)
,	O
"tbsCertificate.validity.notBefore"	*(char)
,	O
"utcTime"	*(char)
,	O
1	int
)	O
;	O
result	int
=	O
asn1_write_value	(*(struct),*(char),*(void),int)->(int)
(	O
cert1	*(struct)
,	O
"tbsCertificate.validity.notBefore.utcTime"	*(char)
,	O
"970630000000Z"	*(char)
,	O
1	int
)	O
;	O
result	int
=	O
asn1_write_value	(*(struct),*(char),*(void),int)->(int)
(	O
cert1	*(struct)
,	O
"tbsCertificate.validity.notAfter"	*(char)
,	O
"utcTime"	*(char)
,	O
1	int
)	O
;	O
result	int
=	O
asn1_write_value	(*(struct),*(char),*(void),int)->(int)
(	O
cert1	*(struct)
,	O
"tbsCertificate.validity.notAfter.utcTime"	*(char)
,	O
"971231000000Z"	*(char)
,	O
1	int
)	O
;	O
result	int
=	O
asn1_write_value	(*(struct),*(char),*(void),int)->(int)
(	O
cert1	*(struct)
,	O
"tbsCertificate.subject"	*(char)
,	O
"rdnSequence"	*(char)
,	O
1	int
)	O
;	O
result	int
=	O
asn1_write_value	(*(struct),*(char),*(void),int)->(int)
(	O
cert1	*(struct)
,	O
"tbsCertificate.subject.rdnSequence"	*(char)
,	O
"NEW"	*(char)
,	O
1	int
)	O
;	O
result	int
=	O
asn1_write_value	(*(struct),*(char),*(void),int)->(int)
(	O
cert1	*(struct)
,	O
"tbsCertificate.subject.rdnSequence.?LAST"	*(char)
,	O
"NEW"	*(char)
,	O
1	int
)	O
;	O
len	int
=	O
sizeof	O
(	O
str	*(*(char))
)	O
-	O
1	int
;	O
result	int
=	O
asn1_read_value	(*(struct),*(char),*(void),*(int))->(int)
(	O
cert_def	*(struct)
,	O
"PKIX1Implicit88.id-at-countryName"	*(char)
,	O
str	*(*(char))
,	O
&	O
len	int
)	O
;	O
result	int
=	O
asn1_write_value	(*(struct),*(char),*(void),int)->(int)
(	O
cert1	*(struct)
,	O
"tbsCertificate.subject.rdnSequence.?LAST.?LAST.type"	*(char)
,	O
str	*(*(char))
,	O
1	int
)	O
;	O
result	int
=	O
asn1_create_element	(*(struct),*(char),*(*(struct)))->(int)
(	O
cert_def	*(struct)
,	O
"PKIX1Implicit88.X520countryName"	*(char)
,	O
&	O
value	*(void)
)	O
;	O
result	int
=	O
asn1_write_value	(*(struct),*(char),*(void),int)->(int)
(	O
value	*(void)
,	O
""	*(char)
,	O
"US"	*(char)
,	O
2	int
)	O
;	O
*	O
der_len	int
=	O
max_len	int
;	O
result	int
=	O
asn1_der_coding	(*(struct),*(char),*(void),*(int),*(char))->(int)
(	O
value	*(void)
,	O
""	*(char)
,	O
der	*(char)
,	O
der_len	int
,	O
errorDescription	*(char)
)	O
;	O
asn1_delete_structure	(*(*(struct)))->(int)
(	O
&	O
value	*(void)
)	O
;	O
result	int
=	O
asn1_write_value	(*(struct),*(char),*(void),int)->(int)
(	O
cert1	*(struct)
,	O
"tbsCertificate.subject.rdnSequence.?LAST.?LAST.value"	*(char)
,	O
der	*(char)
,	O
*	O
der_len	int
)	O
;	O
result	int
=	O
asn1_write_value	(*(struct),*(char),*(void),int)->(int)
(	O
cert1	*(struct)
,	O
"tbsCertificate.subject.rdnSequence"	*(char)
,	O
"NEW"	*(char)
,	O
4	int
)	O
;	O
result	int
=	O
asn1_write_value	(*(struct),*(char),*(void),int)->(int)
(	O
cert1	*(struct)
,	O
"tbsCertificate.subject.rdnSequence.?LAST"	*(char)
,	O
"NEW"	*(char)
,	O
4	int
)	O
;	O
len	int
=	O
sizeof	O
(	O
str	*(*(char))
)	O
-	O
1	int
;	O
result	int
=	O
asn1_read_value	(*(struct),*(char),*(void),*(int))->(int)
(	O
cert_def	*(struct)
,	O
"PKIX1Implicit88.id-at-organizationName"	*(char)
,	O
str	*(*(char))
,	O
&	O
len	int
)	O
;	O
result	int
=	O
asn1_write_value	(*(struct),*(char),*(void),int)->(int)
(	O
cert1	*(struct)
,	O
"tbsCertificate.subject.rdnSequence.?LAST.?LAST.type"	*(char)
,	O
str	*(*(char))
,	O
1	int
)	O
;	O
result	int
=	O
asn1_create_element	(*(struct),*(char),*(*(struct)))->(int)
(	O
cert_def	*(struct)
,	O
"PKIX1Implicit88.X520OrganizationName"	*(char)
,	O
&	O
value	*(void)
)	O
;	O
result	int
=	O
asn1_write_value	(*(struct),*(char),*(void),int)->(int)
(	O
value	*(void)
,	O
""	*(char)
,	O
"printableString"	*(char)
,	O
1	int
)	O
;	O
result	int
=	O
asn1_write_value	(*(struct),*(char),*(void),int)->(int)
(	O
value	*(void)
,	O
"printableString"	*(char)
,	O
"gov"	*(char)
,	O
3	int
)	O
;	O
*	O
der_len	int
=	O
max_len	int
;	O
result	int
=	O
asn1_der_coding	(*(struct),*(char),*(void),*(int),*(char))->(int)
(	O
value	*(void)
,	O
""	*(char)
,	O
der	*(char)
,	O
der_len	int
,	O
errorDescription	*(char)
)	O
;	O
asn1_delete_structure	(*(*(struct)))->(int)
(	O
&	O
value	*(void)
)	O
;	O
result	int
=	O
asn1_write_value	(*(struct),*(char),*(void),int)->(int)
(	O
cert1	*(struct)
,	O
"tbsCertificate.subject.rdnSequence.?LAST.?LAST.value"	*(char)
,	O
der	*(char)
,	O
*	O
der_len	int
)	O
;	O
result	int
=	O
asn1_write_value	(*(struct),*(char),*(void),int)->(int)
(	O
cert1	*(struct)
,	O
"tbsCertificate.subject.rdnSequence"	*(char)
,	O
"NEW"	*(char)
,	O
4	int
)	O
;	O
result	int
=	O
asn1_write_value	(*(struct),*(char),*(void),int)->(int)
(	O
cert1	*(struct)
,	O
"tbsCertificate.subject.rdnSequence.?LAST"	*(char)
,	O
"NEW"	*(char)
,	O
4	int
)	O
;	O
len	int
=	O
sizeof	O
(	O
str	*(*(char))
)	O
-	O
1	int
;	O
result	int
=	O
asn1_read_value	(*(struct),*(char),*(void),*(int))->(int)
(	O
cert_def	*(struct)
,	O
"PKIX1Implicit88.id-at-organizationalUnitName"	*(char)
,	O
str	*(*(char))
,	O
&	O
len	int
)	O
;	O
result	int
=	O
asn1_write_value	(*(struct),*(char),*(void),int)->(int)
(	O
cert1	*(struct)
,	O
"tbsCertificate.subject.rdnSequence.?LAST.?LAST.type"	*(char)
,	O
str	*(*(char))
,	O
1	int
)	O
;	O
result	int
=	O
asn1_create_element	(*(struct),*(char),*(*(struct)))->(int)
(	O
cert_def	*(struct)
,	O
"PKIX1Implicit88.X520OrganizationalUnitName"	*(char)
,	O
&	O
value	*(void)
)	O
;	O
result	int
=	O
asn1_write_value	(*(struct),*(char),*(void),int)->(int)
(	O
value	*(void)
,	O
""	*(char)
,	O
"printableString"	*(char)
,	O
1	int
)	O
;	O
result	int
=	O
asn1_write_value	(*(struct),*(char),*(void),int)->(int)
(	O
value	*(void)
,	O
"printableString"	*(char)
,	O
"nist"	*(char)
,	O
4	int
)	O
;	O
*	O
der_len	int
=	O
max_len	int
;	O
result	int
=	O
asn1_der_coding	(*(struct),*(char),*(void),*(int),*(char))->(int)
(	O
value	*(void)
,	O
""	*(char)
,	O
der	*(char)
,	O
der_len	int
,	O
errorDescription	*(char)
)	O
;	O
asn1_delete_structure	(*(*(struct)))->(int)
(	O
&	O
value	*(void)
)	O
;	O
result	int
=	O
asn1_write_value	(*(struct),*(char),*(void),int)->(int)
(	O
cert1	*(struct)
,	O
"tbsCertificate.subject.rdnSequence.?LAST.?LAST.value"	*(char)
,	O
der	*(char)
,	O
*	O
der_len	int
)	O
;	O
len	int
=	O
sizeof	O
(	O
str	*(*(char))
)	O
-	O
1	int
;	O
result	int
=	O
asn1_read_value	(*(struct),*(char),*(void),*(int))->(int)
(	O
cert_def	*(struct)
,	O
"PKIX1Implicit88.id-dsa"	*(char)
,	O
str	*(*(char))
,	O
&	O
len	int
)	O
;	O
result	int
=	O
asn1_write_value	(*(struct),*(char),*(void),int)->(int)
(	O
cert1	*(struct)
,	O
"tbsCertificate.subjectPublicKeyInfo.algorithm.algorithm"	*(char)
,	O
str	*(*(char))
,	O
1	int
)	O
;	O
result	int
=	O
asn1_create_element	(*(struct),*(char),*(*(struct)))->(int)
(	O
cert_def	*(struct)
,	O
"PKIX1Implicit88.Dss-Parms"	*(char)
,	O
&	O
param	*(struct)
)	O
;	O
str2	array(char)
=	O
(	O
const	O
unsigned	O
char	O
*	O
)	O
"\xd4\x38"	*(char)
;	O
result	int
=	O
asn1_write_value	(*(struct),*(char),*(void),int)->(int)
(	O
param	*(struct)
,	O
"p"	*(char)
,	O
str2	array(char)
,	O
128	int
)	O
;	O
str2	array(char)
=	O
(	O
const	O
unsigned	O
char	O
*	O
)	O
"\xd4\x38"	*(char)
;	O
result	int
=	O
asn1_write_value	(*(struct),*(char),*(void),int)->(int)
(	O
param	*(struct)
,	O
"q"	*(char)
,	O
str2	array(char)
,	O
20	int
)	O
;	O
str2	array(char)
=	O
(	O
const	O
unsigned	O
char	O
*	O
)	O
"\xd4\x38"	*(char)
;	O
result	int
=	O
asn1_write_value	(*(struct),*(char),*(void),int)->(int)
(	O
param	*(struct)
,	O
"g"	*(char)
,	O
str2	array(char)
,	O
128	int
)	O
;	O
*	O
der_len	int
=	O
max_len	int
;	O
result	int
=	O
asn1_der_coding	(*(struct),*(char),*(void),*(int),*(char))->(int)
(	O
param	*(struct)
,	O
""	*(char)
,	O
der	*(char)
,	O
der_len	int
,	O
errorDescription	*(char)
)	O
;	O
asn1_delete_structure	(*(*(struct)))->(int)
(	O
&	O
param	*(struct)
)	O
;	O
result	int
=	O
asn1_write_value	(*(struct),*(char),*(void),int)->(int)
(	O
cert1	*(struct)
,	O
"tbsCertificate.subjectPublicKeyInfo.algorithm.parameters"	*(char)
,	O
der	*(char)
,	O
*	O
der_len	int
)	O
;	O
str2	array(char)
=	O
(	O
const	O
unsigned	O
char	O
*	O
)	O
"\x02\x81"	*(char)
;	O
result	int
=	O
asn1_write_value	(*(struct),*(char),*(void),int)->(int)
(	O
cert1	*(struct)
,	O
"tbsCertificate.subjectPublicKeyInfo.subjectPublicKey"	*(char)
,	O
str2	array(char)
,	O
1048	int
)	O
;	O
result	int
=	O
asn1_write_value	(*(struct),*(char),*(void),int)->(int)
(	O
cert1	*(struct)
,	O
"tbsCertificate.issuerUniqueID"	*(char)
,	O
NULL	O
,	O
0	int
)	O
;	O
result	int
=	O
asn1_write_value	(*(struct),*(char),*(void),int)->(int)
(	O
cert1	*(struct)
,	O
"tbsCertificate.subjectUniqueID"	*(char)
,	O
NULL	O
,	O
0	int
)	O
;	O
result	int
=	O
asn1_write_value	(*(struct),*(char),*(void),int)->(int)
(	O
cert1	*(struct)
,	O
"tbsCertificate.extensions"	*(char)
,	O
"NEW"	*(char)
,	O
1	int
)	O
;	O
len	int
=	O
sizeof	O
(	O
str	*(*(char))
)	O
-	O
1	int
;	O
result	int
=	O
asn1_read_value	(*(struct),*(char),*(void),*(int))->(int)
(	O
cert_def	*(struct)
,	O
"PKIX1Implicit88.id-ce-basicConstraints"	*(char)
,	O
str	*(*(char))
,	O
&	O
len	int
)	O
;	O
result	int
=	O
asn1_write_value	(*(struct),*(char),*(void),int)->(int)
(	O
cert1	*(struct)
,	O
"tbsCertificate.extensions.?LAST.extnID"	*(char)
,	O
str	*(*(char))
,	O
1	int
)	O
;	O
result	int
=	O
asn1_write_value	(*(struct),*(char),*(void),int)->(int)
(	O
cert1	*(struct)
,	O
"tbsCertificate.extensions.?LAST.critical"	*(char)
,	O
"TRUE"	*(char)
,	O
1	int
)	O
;	O
result	int
=	O
asn1_create_element	(*(struct),*(char),*(*(struct)))->(int)
(	O
cert_def	*(struct)
,	O
"PKIX1Implicit88.BasicConstraints"	*(char)
,	O
&	O
constr	*(struct)
)	O
;	O
result	int
=	O
asn1_write_value	(*(struct),*(char),*(void),int)->(int)
(	O
constr	*(struct)
,	O
"cA"	*(char)
,	O
"TRUE"	*(char)
,	O
1	int
)	O
;	O
result	int
=	O
asn1_write_value	(*(struct),*(char),*(void),int)->(int)
(	O
constr	*(struct)
,	O
"pathLenConstraint"	*(char)
,	O
NULL	O
,	O
0	int
)	O
;	O
*	O
der_len	int
=	O
max_len	int
;	O
result	int
=	O
asn1_der_coding	(*(struct),*(char),*(void),*(int),*(char))->(int)
(	O
constr	*(struct)
,	O
""	*(char)
,	O
der	*(char)
,	O
der_len	int
,	O
errorDescription	*(char)
)	O
;	O
result	int
=	O
asn1_delete_structure	(*(*(struct)))->(int)
(	O
&	O
constr	*(struct)
)	O
;	O
result	int
=	O
asn1_write_value	(*(struct),*(char),*(void),int)->(int)
(	O
cert1	*(struct)
,	O
"tbsCertificate.extensions.?LAST.extnValue"	*(char)
,	O
der	*(char)
,	O
*	O
der_len	int
)	O
;	O
result	int
=	O
asn1_write_value	(*(struct),*(char),*(void),int)->(int)
(	O
cert1	*(struct)
,	O
"tbsCertificate.extensions"	*(char)
,	O
"NEW"	*(char)
,	O
1	int
)	O
;	O
len	int
=	O
sizeof	O
(	O
str	*(*(char))
)	O
-	O
1	int
;	O
result	int
=	O
asn1_read_value	(*(struct),*(char),*(void),*(int))->(int)
(	O
cert_def	*(struct)
,	O
"PKIX1Implicit88.id-ce-subjectKeyIdentifier"	*(char)
,	O
str	*(*(char))
,	O
&	O
len	int
)	O
;	O
result	int
=	O
asn1_write_value	(*(struct),*(char),*(void),int)->(int)
(	O
cert1	*(struct)
,	O
"tbsCertificate.extensions.?LAST.extnID"	*(char)
,	O
str	*(*(char))
,	O
1	int
)	O
;	O
result	int
=	O
asn1_write_value	(*(struct),*(char),*(void),int)->(int)
(	O
cert1	*(struct)
,	O
"tbsCertificate.extensions.?LAST.critical"	*(char)
,	O
"FALSE"	*(char)
,	O
1	int
)	O
;	O
str2	array(char)
=	O
(	O
const	O
unsigned	O
char	O
*	O
)	O
"\x04\x14\xe7\x26\xc5"	*(char)
;	O
result	int
=	O
asn1_write_value	(*(struct),*(char),*(void),int)->(int)
(	O
cert1	*(struct)
,	O
"tbsCertificate.extensions.?LAST.extnValue"	*(char)
,	O
str2	array(char)
,	O
22	int
)	O
;	O
len	int
=	O
sizeof	O
(	O
str	*(*(char))
)	O
-	O
1	int
;	O
result	int
=	O
asn1_read_value	(*(struct),*(char),*(void),*(int))->(int)
(	O
cert_def	*(struct)
,	O
"PKIX1Implicit88.id-dsa-with-sha1"	*(char)
,	O
str	*(*(char))
,	O
&	O
len	int
)	O
;	O
result	int
=	O
asn1_write_value	(*(struct),*(char),*(void),int)->(int)
(	O
cert1	*(struct)
,	O
"signatureAlgorithm.algorithm"	*(char)
,	O
str	*(*(char))
,	O
1	int
)	O
;	O
result	int
=	O
asn1_write_value	(*(struct),*(char),*(void),int)->(int)
(	O
cert1	*(struct)
,	O
"signatureAlgorithm.parameters"	*(char)
,	O
NULL	O
,	O
0	int
)	O
;	O
*	O
der_len	int
=	O
max_len	int
;	O
result	int
=	O
asn1_der_coding	(*(struct),*(char),*(void),*(int),*(char))->(int)
(	O
cert1	*(struct)
,	O
"tbsCertificate"	*(char)
,	O
der	*(char)
,	O
der_len	int
,	O
errorDescription	*(char)
)	O
;	O
if	O
(	O
result	int
!=	O
ASN1_SUCCESS	int
)	O
{	O
printf	(*(char))->(int)
(	O
"\n'tbsCertificate' encoding creation: ERROR\n"	*(char)
)	O
;	O
}	O
result	int
=	O
asn1_write_value	(*(struct),*(char),*(void),int)->(int)
(	O
cert1	*(struct)
,	O
"signature"	*(char)
,	O
str2	array(char)
,	O
368	int
)	O
;	O
*	O
der_len	int
=	O
max_len	int
;	O
result	int
=	O
asn1_der_coding	(*(struct),*(char),*(void),*(int),*(char))->(int)
(	O
cert1	*(struct)
,	O
""	*(char)
,	O
der	*(char)
,	O
der_len	int
,	O
errorDescription	*(char)
)	O
;	O
if	O
(	O
result	int
!=	O
ASN1_SUCCESS	int
)	O
{	O
printf	(*(char))->(int)
(	O
"\n'certificate' encoding creation: ERROR\n"	*(char)
)	O
;	O
return	O
;	O
}	O
printf	(*(char))->(int)
(	O
"-----------------\nCertificate Encoding:\nNumber of bytes=%i\n"	*(char)
,	O
*	O
der_len	int
)	O
;	O
for	O
(	O
k	int
=	O
0	int
;	O
k	int
<	O
*	O
der_len	int
;	O
k	int
++	O
)	O
printf	(*(char))->(int)
(	O
"%02x "	*(char)
,	O
der	*(char)
[	O
k	int
]	O
)	O
;	O
printf	(*(char))->(int)
(	O
"\n-----------------\n"	*(char)
)	O
;	O
asn1_delete_structure	(*(*(struct)))->(int)
(	O
&	O
cert1	*(struct)
)	O
;	O
}	O
static	O
void	O
get_certificate	(*(struct),*(char),int)->(void)
(	O
ASN1_TYPE	O
cert_def	*(struct)
,	O
unsigned	O
char	O
*	O
der	*(char)
,	O
int	O
der_len	int
)	O
{	O
int	O
result	int
,	O
len	int
,	O
start	*(int)
,	O
end	*(int)
;	O
unsigned	O
char	O
str	*(*(char))
[	O
1024	int
]	O
,	O
str2	array(char)
[	O
1024	int
]	O
;	O
ASN1_TYPE	O
cert2	*(struct)
=	O
ASN1_TYPE_EMPTY	O
;	O
char	O
errorDescription	*(char)
[	O
ASN1_MAX_ERROR_DESCRIPTION_SIZE	int
]	O
;	O
asn1_create_element	(*(struct),*(char),*(*(struct)))->(int)
(	O
cert_def	*(struct)
,	O
"PKIX1Implicit88.Certificate"	*(char)
,	O
&	O
cert2	*(struct)
)	O
;	O
result	int
=	O
asn1_der_decoding	(*(*(struct)),*(void),int,*(char))->(int)
(	O
&	O
cert2	*(struct)
,	O
der	*(char)
,	O
der_len	int
,	O
errorDescription	*(char)
)	O
;	O
if	O
(	O
result	int
!=	O
ASN1_SUCCESS	int
)	O
{	O
printf	(*(char))->(int)
(	O
"Problems with DER encoding\n"	*(char)
)	O
;	O
return	O
;	O
}	O
get_Name_type	(*(struct),*(struct),*(char),*(char))->(void)
(	O
cert_def	*(struct)
,	O
cert2	*(struct)
,	O
"tbsCertificate.issuer"	*(char)
,	O
str	*(*(char))
)	O
;	O
printf	(*(char))->(int)
(	O
"certificate:\nissuer :%s\n"	*(char)
,	O
str	*(*(char))
)	O
;	O
get_Name_type	(*(struct),*(struct),*(char),*(char))->(void)
(	O
cert_def	*(struct)
,	O
cert2	*(struct)
,	O
"tbsCertificate.subject"	*(char)
,	O
str	*(*(char))
)	O
;	O
printf	(*(char))->(int)
(	O
"subject:%s\n"	*(char)
,	O
str	*(*(char))
)	O
;	O
len	int
=	O
sizeof	O
(	O
str	*(*(char))
)	O
-	O
1	int
;	O
result	int
=	O
asn1_read_value	(*(struct),*(char),*(void),*(int))->(int)
(	O
cert2	*(struct)
,	O
"signatureAlgorithm.algorithm"	*(char)
,	O
str	*(*(char))
,	O
&	O
len	int
)	O
;	O
len	int
=	O
sizeof	O
(	O
str2	array(char)
)	O
-	O
1	int
;	O
result	int
=	O
asn1_read_value	(*(struct),*(char),*(void),*(int))->(int)
(	O
cert_def	*(struct)
,	O
"PKIX1Implicit88.id-dsa-with-sha1"	*(char)
,	O
str2	array(char)
,	O
&	O
len	int
)	O
;	O
if	O
(	O
!	O
strcmp	(*(char),*(char))->(int)
(	O
(	O
char	O
*	O
)	O
str	*(*(char))
,	O
(	O
char	O
*	O
)	O
str2	array(char)
)	O
)	O
{	O
result	int
=	O
asn1_der_decoding_startEnd	(*(struct),*(void),int,*(char),*(int),*(int))->(int)
(	O
cert2	*(struct)
,	O
der	*(char)
,	O
der_len	int
,	O
"tbsCertificate"	*(char)
,	O
&	O
start	*(int)
,	O
&	O
end	*(int)
)	O
;	O
len	int
=	O
sizeof	O
(	O
str	*(*(char))
)	O
-	O
1	int
;	O
result	int
=	O
asn1_read_value	(*(struct),*(char),*(void),*(int))->(int)
(	O
cert2	*(struct)
,	O
"signature"	*(char)
,	O
str	*(*(char))
,	O
&	O
len	int
)	O
;	O
}	O
asn1_delete_structure	(*(*(struct)))->(int)
(	O
&	O
cert2	*(struct)
)	O
;	O
}	O
extern	O
const	O
ASN1_ARRAY_TYPE	O
pkix_asn1_tab	array(struct(*(char),int,*(void)))
[	O
]	O
;	O
int	O
main	(int,array(*(char)))->(int)
(	O
int	O
argc	int
,	O
char	O
*	O
argv	array(*(char))
[	O
]	O
)	O
{	O
int	O
result	int
,	O
der_len	int
;	O
unsigned	O
char	O
der	*(char)
[	O
1024	int
]	O
;	O
ASN1_TYPE	O
PKIX1Implicit88	*(struct)
=	O
ASN1_TYPE_EMPTY	O
;	O
char	O
errorDescription	*(char)
[	O
ASN1_MAX_ERROR_DESCRIPTION_SIZE	int
]	O
;	O
if	O
(	O
1	int
)	O
result	int
=	O
asn1_array2tree	(*(struct(*(char),int,*(void))),*(*(struct)),*(char))->(int)
(	O
pkix_asn1_tab	array(struct(*(char),int,*(void)))
,	O
&	O
PKIX1Implicit88	*(struct)
,	O
errorDescription	*(char)
)	O
;	O
else	O
result	int
=	O
asn1_parser2tree	(*(char),*(*(struct)),*(char))->(int)
(	O
"pkix.asn"	*(char)
,	O
&	O
PKIX1Implicit88	*(struct)
,	O
errorDescription	*(char)
)	O
;	O
if	O
(	O
result	int
!=	O
ASN1_SUCCESS	int
)	O
{	O
asn1_perror	(int)->(void)
(	O
result	int
)	O
;	O
printf	(*(char))->(int)
(	O
"%s"	*(char)
,	O
errorDescription	*(char)
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
der_len	int
=	O
1024	int
;	O
create_certificate	(*(struct),*(char),*(int))->(void)
(	O
PKIX1Implicit88	*(struct)
,	O
der	*(char)
,	O
&	O
der_len	int
)	O
;	O
get_certificate	(*(struct),*(char),int)->(void)
(	O
PKIX1Implicit88	*(struct)
,	O
der	*(char)
,	O
der_len	int
)	O
;	O
asn1_delete_structure	(*(*(struct)))->(int)
(	O
&	O
PKIX1Implicit88	*(struct)
)	O
;	O
return	O
0	int
;	O
}	O
