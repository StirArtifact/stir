typedef	O
void	O
(	O
*	O
sig_t	*((int)->(void))
)	O
(	O
int	O
)	O
;	O
static	O
void	O
connect_timed_out	()->(void)
(	O
void	O
)	O
;	O
byte	O
*	O
hostname_or_ip_to_address	(*(char))->(*(char))
(	O
char	O
*	O
hostname_specifier	*(char)
)	O
;	O
int	O
tcp_fast_connections	int
=	O
0	int
;	O
static	O
int	O
connection_timeout_counter	int
=	O
TCP_TIME_OUT	int
;	O
static	O
int	O
allow_time_outs	int
=	O
TCP_ALLOW_TIMEOUTS	int
;	O
typedef	O
void	O
SIGFUN	(int)->(void)
(	O
int	O
sig	int
)	O
;	O
int	O
tcp_to_host	(*(char),*(char))->(int)
(	O
char	O
*	O
host	*(char)
,	O
char	O
*	O
service	*(char)
)	O
{	O
struct	O
sockaddr_in	struct(short,short,struct(int),array(char))
name	struct(short,short,struct(int),array(char))
;	O
byte	O
*	O
address	*(char)
;	O
int	O
connection	int
;	O
address	*(char)
=	O
hostname_or_ip_to_address	(*(char))->(*(char))
(	O
host	*(char)
)	O
;	O
if	O
(	O
!	O
address	*(char)
)	O
return	O
(	O
-	O
1	int
)	O
;	O
memset	(*(void),int,long)->(*(void))
(	O
&	O
name	struct(short,short,struct(int),array(char))
,	O
0	int
,	O
sizeof	O
(	O
name	struct(short,short,struct(int),array(char))
)	O
)	O
;	O
name	struct(short,short,struct(int),array(char))
.	O
sin_family	short
=	O
AF_INET	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
&	O
name	struct(short,short,struct(int),array(char))
.	O
sin_addr	struct(int)
.	O
s_addr	int
,	O
address	*(char)
,	O
4	int
)	O
;	O
if	O
(	O
isdigit	(int)->(int)
(	O
*	O
service	*(char)
)	O
)	O
name	struct(short,short,struct(int),array(char))
.	O
sin_port	short
=	O
htons	(short)->(short)
(	O
atoi	(*(char))->(int)
(	O
service	*(char)
)	O
)	O
;	O
else	O
{	O
struct	O
servent	struct(*(char),*(*(char)),int,*(char))
*	O
server	*(struct(*(char),*(*(char)),int,*(char)))
;	O
server	*(struct(*(char),*(*(char)),int,*(char)))
=	O
getservbyname	(*(char),*(char))->(*(struct(*(char),*(*(char)),int,*(char))))
(	O
service	*(char)
,	O
"tcp"	*(char)
)	O
;	O
if	O
(	O
!	O
server	*(struct(*(char),*(*(char)),int,*(char)))
)	O
return	O
(	O
-	O
1	int
)	O
;	O
name	struct(short,short,struct(int),array(char))
.	O
sin_port	short
=	O
server	*(struct(*(char),*(*(char)),int,*(char)))
->	O
s_port	int
;	O
}	O
connection	int
=	O
socket	(int,int,int)->(int)
(	O
PF_INET	int
,	O
SOCK_STREAM	int
,	O
IP	int
)	O
;	O
if	O
(	O
connection	int
<	O
0	int
)	O
return	O
(	O
-	O
1	int
)	O
;	O
{	O
int	O
error	int
;	O
if	O
(	O
allow_time_outs	int
)	O
{	O
signal	(int,*((int)->(void)))->(*((int)->(void)))
(	O
SIGALRM	int
,	O
(	O
sig_t	*((int)->(void))
)	O
connect_timed_out	()->(void)
)	O
;	O
alarm	(int)->(int)
(	O
connection_timeout_counter	int
)	O
;	O
error	int
=	O
connect	(int,*(struct(short,array(char))),int)->(int)
(	O
connection	int
,	O
(	O
struct	O
sockaddr	struct(short,array(char))
*	O
)	O
&	O
name	struct(short,short,struct(int),array(char))
,	O
sizeof	O
(	O
name	struct(short,short,struct(int),array(char))
)	O
)	O
;	O
alarm	(int)->(int)
(	O
0	int
)	O
;	O
signal	(int,*((int)->(void)))->(*((int)->(void)))
(	O
SIGALRM	int
,	O
(	O
SIGFUN	(int)->(void)
*	O
)	O
NULL	O
)	O
;	O
}	O
else	O
error	int
=	O
connect	(int,*(struct(short,array(char))),int)->(int)
(	O
connection	int
,	O
(	O
struct	O
sockaddr	struct(short,array(char))
*	O
)	O
&	O
name	struct(short,short,struct(int),array(char))
,	O
sizeof	O
(	O
name	struct(short,short,struct(int),array(char))
)	O
)	O
;	O
if	O
(	O
error	int
<	O
0	int
)	O
{	O
close	(int)->(int)
(	O
connection	int
)	O
;	O
return	O
(	O
-	O
1	int
)	O
;	O
}	O
}	O
return	O
(	O
connection	int
)	O
;	O
}	O
static	O
void	O
connect_timed_out	()->(void)
(	O
void	O
)	O
{	O
alarm	(int)->(int)
(	O
0	int
)	O
;	O
}	O
static	O
byte	O
address_buffer	array(char)
[	O
8	int
]	O
;	O
byte	O
*	O
hostname_or_ip_to_address	(*(char))->(*(char))
(	O
char	O
*	O
hostname_specifier	*(char)
)	O
{	O
struct	O
hostent	struct(*(char),*(*(char)),int,int,*(*(char)))
*	O
entry	*(struct(*(char),*(*(char)),int,int,*(*(char))))
;	O
{	O
register	O
int	O
i	int
,	O
dots	int
=	O
0	int
,	O
invalid	int
=	O
0	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
hostname_specifier	*(char)
[	O
i	int
]	O
;	O
i	int
++	O
)	O
{	O
if	O
(	O
hostname_specifier	*(char)
[	O
i	int
]	O
==	O
'.'	O
)	O
dots	int
++	O
;	O
else	O
if	O
(	O
!	O
isdigit	(int)->(int)
(	O
hostname_specifier	*(char)
[	O
i	int
]	O
)	O
)	O
{	O
invalid	int
=	O
1	int
;	O
break	O
;	O
}	O
}	O
if	O
(	O
dots	int
==	O
3	int
&&	O
!	O
invalid	int
)	O
{	O
int	O
offset	int
=	O
0	int
;	O
i	int
=	O
0	int
;	O
while	O
(	O
hostname_specifier	*(char)
[	O
i	int
]	O
)	O
{	O
int	O
number	int
=	O
0	int
;	O
while	O
(	O
(	O
hostname_specifier	*(char)
[	O
i	int
]	O
!=	O
'\0'	O
)	O
&&	O
(	O
hostname_specifier	*(char)
[	O
i	int
]	O
!=	O
'.'	O
)	O
)	O
number	int
=	O
(	O
number	int
*	O
10	int
)	O
+	O
hostname_specifier	*(char)
[	O
i	int
++	O
]	O
-	O
'0'	O
;	O
address_buffer	array(char)
[	O
offset	int
++	O
]	O
=	O
number	int
;	O
if	O
(	O
hostname_specifier	*(char)
[	O
i	int
]	O
)	O
i	int
++	O
;	O
}	O
return	O
(	O
address_buffer	array(char)
)	O
;	O
}	O
}	O
entry	*(struct(*(char),*(*(char)),int,int,*(*(char))))
=	O
gethostbyname	(*(char))->(*(struct(*(char),*(*(char)),int,int,*(*(char)))))
(	O
hostname_specifier	*(char)
)	O
;	O
if	O
(	O
entry	*(struct(*(char),*(*(char)),int,int,*(*(char))))
)	O
{	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
address_buffer	array(char)
,	O
entry	*(struct(*(char),*(*(char)),int,int,*(*(char))))
->	O
h_addr	O
,	O
4	int
)	O
;	O
return	O
(	O
address_buffer	array(char)
)	O
;	O
}	O
else	O
return	O
(	O
(	O
byte	O
*	O
)	O
NULL	O
)	O
;	O
}	O
