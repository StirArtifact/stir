int	O
_mu_msgset_translate_pair	(*(struct(*(struct),*(struct),int,long)),int,*(long),*(long))->(int)
(	O
mu_msgset_t	*(struct)
mset	*(struct)
,	O
int	O
mode	int
,	O
size_t	long
*	O
pbeg	*(long)
,	O
size_t	long
*	O
pend	*(long)
)	O
{	O
if	O
(	O
mset	*(struct)
->	O
mbox	*(struct)
)	O
{	O
int	O
cmd	int
,	O
rc	int
;	O
size_t	long
n	long
=	O
1	int
;	O
size_t	long
beg	long
=	O
*	O
pbeg	*(long)
;	O
size_t	long
end	long
=	O
*	O
pend	*(long)
;	O
switch	O
(	O
mode	int
)	O
{	O
case	O
MU_MSGSET_NUM	int
:	O
cmd	int
=	O
MU_MAILBOX_UID_TO_MSGNO	int
;	O
break	O
;	O
case	O
MU_MSGSET_UID	int
:	O
cmd	int
=	O
MU_MAILBOX_MSGNO_TO_UID	int
;	O
break	O
;	O
default	O
:	O
return	O
EINVAL	int
;	O
}	O
rc	int
=	O
mu_mailbox_translate	(*(struct),int,long,*(long))->(int)
(	O
mset	*(struct)
->	O
mbox	*(struct)
,	O
cmd	int
,	O
beg	long
,	O
&	O
n	long
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
if	O
(	O
rc	int
==	O
MU_ERR_NOENT	O
&&	O
cmd	int
==	O
MU_MAILBOX_UID_TO_MSGNO	int
)	O
{	O
size_t	long
x	long
;	O
if	O
(	O
end	long
==	O
MU_MSGNO_LAST	int
)	O
{	O
rc	int
=	O
mu_mailbox_uidnext	(*(struct),*(long))->(int)
(	O
mset	*(struct)
->	O
mbox	*(struct)
,	O
&	O
x	long
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
}	O
else	O
x	long
=	O
end	long
;	O
for	O
(	O
;	O
rc	int
==	O
MU_ERR_NOENT	O
&&	O
beg	long
<	O
x	long
;	O
beg	long
++	O
)	O
rc	int
=	O
mu_mailbox_translate	(*(struct),int,long,*(long))->(int)
(	O
mset	*(struct)
->	O
mbox	*(struct)
,	O
cmd	int
,	O
beg	long
,	O
&	O
n	long
)	O
;	O
}	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
}	O
*	O
pbeg	*(long)
=	O
n	long
;	O
if	O
(	O
beg	long
==	O
end	long
)	O
*	O
pend	*(long)
=	O
n	long
;	O
else	O
if	O
(	O
end	long
!=	O
MU_MSGNO_LAST	int
)	O
{	O
rc	int
=	O
mu_mailbox_translate	(*(struct),int,long,*(long))->(int)
(	O
mset	*(struct)
->	O
mbox	*(struct)
,	O
cmd	int
,	O
end	long
,	O
&	O
n	long
)	O
;	O
if	O
(	O
rc	int
==	O
MU_ERR_NOENT	O
&&	O
cmd	int
==	O
MU_MAILBOX_UID_TO_MSGNO	int
)	O
{	O
for	O
(	O
;	O
rc	int
==	O
MU_ERR_NOENT	O
&&	O
beg	long
<	O
end	long
;	O
end	long
--	O
)	O
rc	int
=	O
mu_mailbox_translate	(*(struct),int,long,*(long))->(int)
(	O
mset	*(struct)
->	O
mbox	*(struct)
,	O
cmd	int
,	O
end	long
,	O
&	O
n	long
)	O
;	O
}	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
*	O
pend	*(long)
=	O
n	long
;	O
}	O
}	O
return	O
0	int
;	O
}	O
int	O
_mu_msgset_translate_range	(*(struct(*(struct),*(struct),int,long)),int,*(struct(long,long)))->(int)
(	O
mu_msgset_t	*(struct)
mset	*(struct)
,	O
int	O
mode	int
,	O
struct	O
mu_msgrange	struct(long,long)
*	O
r	*(struct(long,long))
)	O
{	O
return	O
_mu_msgset_translate_pair	(*(struct(*(struct),*(struct),int,long)),int,*(long),*(long))->(int)
(	O
mset	*(struct)
,	O
mode	int
,	O
&	O
r	*(struct(long,long))
->	O
msg_beg	long
,	O
&	O
r	*(struct(long,long))
->	O
msg_end	long
)	O
;	O
}	O
struct	O
trans_closure	struct(*(struct(*(struct),*(struct),int,long)),int)
{	O
mu_msgset_t	*(struct)
mset	*(struct)
;	O
int	O
flags	int
;	O
}	O
;	O
static	O
int	O
trans_range	(*(void),*(void))->(int)
(	O
void	O
*	O
item	*(void)
,	O
void	O
*	O
data	*(void)
)	O
{	O
struct	O
mu_msgrange	struct(long,long)
const	O
*	O
range	*(char)
=	O
item	*(void)
;	O
struct	O
trans_closure	struct(*(struct(*(struct),*(struct),int,long)),int)
*	O
clos	*(struct(*(struct(*(struct`),*(struct`),int,long)),int))
=	O
data	*(void)
;	O
struct	O
mu_msgrange	struct(long,long)
*	O
copy	*(struct(long,long))
;	O
int	O
rc	int
;	O
copy	*(struct(long,long))
=	O
malloc	(long)->(*(void))
(	O
sizeof	O
*	O
copy	*(struct(long,long))
)	O
;	O
if	O
(	O
!	O
copy	*(struct(long,long))
)	O
return	O
errno	O
;	O
*	O
copy	*(struct(long,long))
=	O
*	O
range	*(char)
;	O
rc	int
=	O
_mu_msgset_translate_range	(*(struct(*(struct),*(struct),int,long)),int,*(struct(long,long)))->(int)
(	O
clos	*(struct(*(struct(*(struct`),*(struct`),int,long)),int))
->	O
mset	*(struct)
,	O
_MU_MSGSET_MODE	O
(	O
clos	*(struct(*(struct(*(struct`),*(struct`),int,long)),int))
->	O
flags	int
)	O
,	O
copy	*(struct(long,long))
)	O
;	O
switch	O
(	O
rc	int
)	O
{	O
case	O
0	int
:	O
rc	int
=	O
mu_list_append	(*(struct),*(void))->(int)
(	O
clos	*(struct(*(struct(*(struct`),*(struct`),int,long)),int))
->	O
mset	*(struct)
->	O
list	*(struct)
,	O
copy	*(struct(long,long))
)	O
;	O
break	O
;	O
case	O
MU_ERR_NOENT	O
:	O
if	O
(	O
clos	*(struct(*(struct(*(struct`),*(struct`),int,long)),int))
->	O
flags	int
&	O
MU_MSGSET_IGNORE_TRANSERR	int
)	O
rc	int
=	O
0	int
;	O
default	O
:	O
free	(*(void))->(void)
(	O
copy	*(struct(long,long))
)	O
;	O
}	O
return	O
rc	int
;	O
}	O
int	O
mu_msgset_translate	(*(*(struct)),*(struct),int)->(int)
(	O
mu_msgset_t	*(struct)
*	O
dst	*(struct)
,	O
mu_msgset_t	*(struct)
src	*(struct)
,	O
int	O
flags	int
)	O
{	O
int	O
rc	int
;	O
mu_msgset_t	*(struct)
tmp	*(struct(*(struct),*(struct),int,long))
;	O
rc	int
=	O
mu_msgset_create	(*(*(struct)),*(struct),int)->(int)
(	O
&	O
tmp	*(struct(*(struct),*(struct),int,long))
,	O
src	*(struct)
->	O
mbox	*(struct)
,	O
src	*(struct)
->	O
flags	int
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
tmp	*(struct(*(struct),*(struct),int,long))
->	O
format	long
=	O
src	*(struct)
->	O
format	long
;	O
if	O
(	O
_MU_MSGSET_MODE	O
(	O
flags	int
)	O
==	O
src	*(struct)
->	O
flags	int
)	O
{	O
rc	int
=	O
mu_msgset_copy	(*(struct),*(struct))->(int)
(	O
src	*(struct)
,	O
tmp	*(struct(*(struct),*(struct),int,long))
)	O
;	O
}	O
else	O
{	O
struct	O
trans_closure	struct(*(struct(*(struct),*(struct),int,long)),int)
tc	struct(*(struct(*(struct),*(struct),int,long)),int)
;	O
tc	struct(*(struct(*(struct),*(struct),int,long)),int)
.	O
mset	*(struct)
=	O
tmp	*(struct(*(struct),*(struct),int,long))
;	O
tc	struct(*(struct(*(struct),*(struct),int,long)),int)
.	O
flags	int
=	O
flags	int
;	O
rc	int
=	O
mu_list_foreach	(*(struct),*((*(void),*(void))->(int)),*(void))->(int)
(	O
src	*(struct)
->	O
list	*(struct)
,	O
trans_range	(*(void),*(void))->(int)
,	O
&	O
tc	struct(*(struct(*(struct),*(struct),int,long)),int)
)	O
;	O
}	O
if	O
(	O
rc	int
)	O
mu_msgset_destroy	(*(*(struct)))->(void)
(	O
&	O
tmp	*(struct(*(struct),*(struct),int,long))
)	O
;	O
else	O
*	O
dst	*(struct)
=	O
tmp	*(struct(*(struct),*(struct),int,long))
;	O
return	O
rc	int
;	O
}	O
