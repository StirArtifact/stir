enum	O
_BAR_SIZES	enum(int,int,int,int,int)
{	O
_BAR_FILENAME_SIZE	int
=	O
20	int
,	O
_BAR_RATIO_SIZE	int
=	O
3	int
,	O
_BAR_METER_COST	int
=	O
2	int
,	O
_BAR_DOWNBYTES_SIZE	int
=	O
8	int
,	O
_BAR_SPEED_SIZE	int
=	O
8	int
,	O
}	O
;	O
enum	O
_BAR_DECOR_SIZE	enum(int)
{	O
_BAR_DECOR_COST	int
=	O
_BAR_FILENAME_SIZE	int
+	O
1	int
+	O
_BAR_RATIO_SIZE	int
+	O
2	int
+	O
_BAR_METER_COST	int
+	O
1	int
+	O
_BAR_DOWNBYTES_SIZE	int
+	O
1	int
+	O
_BAR_SPEED_SIZE	int
+	O
3	int
}	O
;	O
enum	O
_SCREEN_WIDTH	enum(int,int)
{	O
DEFAULT_SCREEN_WIDTH	int
=	O
70	int
,	O
MINIMUM_SCREEN_WIDTH	int
=	O
45	int
,	O
}	O
;	O
enum	O
_bar_slot_status_t	enum(int,int,int)
{	O
EMPTY	int
=	O
0	int
,	O
DOWNLOADING	int
=	O
1	int
,	O
COMPLETE	int
=	O
2	int
}	O
;	O
enum	O
_BAR_SETTINGS	enum(int)
{	O
SPEED_RING_SIZE	int
=	O
24	int
,	O
}	O
;	O
typedef	O
struct	O
{	O
char	O
*	O
progress	*(char)
,	O
*	O
filename	*(*(char))
,	O
speed_buf	array(char)
[	O
_BAR_SPEED_SIZE	int
]	O
,	O
human_size	array(char)
[	O
_BAR_DOWNBYTES_SIZE	int
]	O
;	O
uint64_t	long
file_size	long
,	O
time_ring	array(long)
[	O
SPEED_RING_SIZE	int
]	O
,	O
bytes_ring	array(long)
[	O
SPEED_RING_SIZE	int
]	O
,	O
bytes_downloaded	long
;	O
int	O
ring_pos	int
,	O
ring_used	int
,	O
tick	long
,	O
numfiles	int
;	O
enum	O
_bar_slot_status_t	enum(int,int,int)
status	int
;	O
bool	bool
redraw	bool
:	O
1	int
;	O
}	O
_bar_slot_t	struct(*(char),*(char),array(char),array(char),long,array(long),array(long),long,int,int,int,int,enum(int,int,int),bool)
;	O
struct	O
wget_bar_st	struct(*(struct(*(char),*(char),array(char),array(char),long,array(long),array(long),long,int,int,int,int,enum(int,int,int),bool)),*(char),*(char),*(char),*(char),int,int,*(struct))
{	O
_bar_slot_t	struct(*(char),*(char),array(char),array(char),long,array(long),array(long),long,int,int,int,int,enum(int,int,int),bool)
*	O
slots	*(struct(*(char),*(char),array(char),array(char),long,array(long),array(long),long,int,int,int,int,enum(int,int,int),bool))
;	O
char	O
*	O
progress_mem_holder	*(char)
,	O
*	O
unknown_size	*(char)
,	O
*	O
known_size	*(char)
,	O
*	O
spaces	*(char)
;	O
int	O
nslots	int
,	O
max_width	int
;	O
wget_thread_mutex	*(struct)
mutex	*(*(struct))
;	O
}	O
;	O
static	O
wget_report_speed	enum(int,int)
report_speed_type	enum(int,int)
=	O
WGET_REPORT_SPEED_BYTES	int
;	O
static	O
char	O
report_speed_type_char	char
=	O
'B'	O
;	O
static	O
unsigned	O
short	O
speed_modifier	short
=	O
1000	int
;	O
static	O
void	O
_bar_update_speed_stats	(*(struct(*(char),*(char),array(char),array(char),long,array(long),array(long),long,int,int,int,int,enum(int,int,int),bool)))->(void)
(	O
_bar_slot_t	struct(*(char),*(char),array(char),array(char),long,array(long),array(long),long,int,int,int,int,enum(int,int,int),bool)
*	O
slotp	*(struct(*(char),*(char),array(char),array(char),long,array(long),array(long),long,int,int,int,int,enum(int,int,int),bool))
)	O
{	O
int	O
ring_pos	int
=	O
slotp	*(struct(*(char),*(char),array(char),array(char),long,array(long),array(long),long,int,int,int,int,enum(int,int,int),bool))
->	O
ring_pos	int
;	O
int	O
ring_used	int
=	O
slotp	*(struct(*(char),*(char),array(char),array(char),long,array(long),array(long),long,int,int,int,int,enum(int,int,int),bool))
->	O
ring_used	int
;	O
int	O
next_pos	int
;	O
if	O
(	O
slotp	*(struct(*(char),*(char),array(char),array(char),long,array(long),array(long),long,int,int,int,int,enum(int,int,int),bool))
->	O
bytes_downloaded	long
==	O
slotp	*(struct(*(char),*(char),array(char),array(char),long,array(long),array(long),long,int,int,int,int,enum(int,int,int),bool))
->	O
bytes_ring	array(long)
[	O
ring_pos	int
]	O
)	O
{	O
return	O
;	O
}	O
uint64_t	long
curtime	long
=	O
wget_get_timemillis	()->(long long)
(	O
)	O
;	O
if	O
(	O
++	O
ring_pos	int
==	O
SPEED_RING_SIZE	int
)	O
ring_pos	int
=	O
0	int
;	O
slotp	*(struct(*(char),*(char),array(char),array(char),long,array(long),array(long),long,int,int,int,int,enum(int,int,int),bool))
->	O
bytes_ring	array(long)
[	O
ring_pos	int
]	O
=	O
slotp	*(struct(*(char),*(char),array(char),array(char),long,array(long),array(long),long,int,int,int,int,enum(int,int,int),bool))
->	O
bytes_downloaded	long
;	O
slotp	*(struct(*(char),*(char),array(char),array(char),long,array(long),array(long),long,int,int,int,int,enum(int,int,int),bool))
->	O
time_ring	array(long)
[	O
ring_pos	int
]	O
=	O
curtime	long
;	O
if	O
(	O
ring_used	int
<	O
SPEED_RING_SIZE	int
)	O
{	O
ring_used	int
++	O
;	O
next_pos	int
=	O
1	int
;	O
}	O
else	O
{	O
next_pos	int
=	O
(	O
ring_pos	int
+	O
1	int
==	O
SPEED_RING_SIZE	int
)	O
?	O
0	int
:	O
ring_pos	int
+	O
1	int
;	O
}	O
if	O
(	O
ring_used	int
<	O
2	int
)	O
{	O
wget_strlcpy	(*(char),*(char),long)->(long)
(	O
slotp	*(struct(*(char),*(char),array(char),array(char),long,array(long),array(long),long,int,int,int,int,enum(int,int,int),bool))
->	O
speed_buf	array(char)
,	O
" --.-K"	*(char)
,	O
sizeof	O
(	O
slotp	*(struct(*(char),*(char),array(char),array(char),long,array(long),array(long),long,int,int,int,int,enum(int,int,int),bool))
->	O
speed_buf	array(char)
)	O
)	O
;	O
}	O
else	O
{	O
size_t	long
bytes	long
=	O
slotp	*(struct(*(char),*(char),array(char),array(char),long,array(long),array(long),long,int,int,int,int,enum(int,int,int),bool))
->	O
bytes_ring	array(long)
[	O
ring_pos	int
]	O
-	O
slotp	*(struct(*(char),*(char),array(char),array(char),long,array(long),array(long),long,int,int,int,int,enum(int,int,int),bool))
->	O
bytes_ring	array(long)
[	O
next_pos	int
]	O
;	O
size_t	long
time	struct(long,long)
=	O
slotp	*(struct(*(char),*(char),array(char),array(char),long,array(long),array(long),long,int,int,int,int,enum(int,int,int),bool))
->	O
time_ring	array(long)
[	O
ring_pos	int
]	O
-	O
slotp	*(struct(*(char),*(char),array(char),array(char),long,array(long),array(long),long,int,int,int,int,enum(int,int,int),bool))
->	O
time_ring	array(long)
[	O
next_pos	int
]	O
;	O
size_t	long
speed	long
=	O
(	O
bytes	long
*	O
speed_modifier	short
)	O
/	O
(	O
time	struct(long,long)
?	O
time	struct(long,long)
:	O
1	int
)	O
;	O
wget_human_readable	(*(char),long,long)->(*(char))
(	O
slotp	*(struct(*(char),*(char),array(char),array(char),long,array(long),array(long),long,int,int,int,int,enum(int,int,int),bool))
->	O
speed_buf	array(char)
,	O
sizeof	O
(	O
slotp	*(struct(*(char),*(char),array(char),array(char),long,array(long),array(long),long,int,int,int,int,enum(int,int,int),bool))
->	O
speed_buf	array(char)
)	O
,	O
speed	long
)	O
;	O
}	O
slotp	*(struct(*(char),*(char),array(char),array(char),long,array(long),array(long),long,int,int,int,int,enum(int,int,int),bool))
->	O
ring_pos	int
=	O
ring_pos	int
;	O
slotp	*(struct(*(char),*(char),array(char),array(char),long,array(long),array(long),long,int,int,int,int,enum(int,int,int),bool))
->	O
ring_used	int
=	O
ring_used	int
;	O
}	O
static	O
volatile	O
sig_atomic_t	int
winsize_changed	int
;	O
static	O
inline	O
WGET_GCC_ALWAYS_INLINE	O
void	O
_restore_cursor_position	()->(void)
(	O
void	O
)	O
{	O
fputs	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
"\0338"	*(char)
,	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
}	O
static	O
inline	O
WGET_GCC_ALWAYS_INLINE	O
void	O
_bar_print_slot	(*(struct(*(struct(*`,*`,array(char),array(char),long,array(long),array(long),long,int,int,int,int,enum(int,int,int),bool)),*(char),*(char),*(char),*(char),int,int,*(struct))),int)->(void)
(	O
const	O
wget_bar	struct
*	O
bar	*(struct)
,	O
int	O
slot	int
)	O
{	O
wget_fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(long)
(	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"\0337\033[%dA\033[1G"	*(char)
,	O
bar	*(struct)
->	O
nslots	int
-	O
slot	int
)	O
;	O
}	O
static	O
inline	O
WGET_GCC_ALWAYS_INLINE	O
void	O
_bar_set_progress	(*(struct(*(struct(*`,*`,array(char),array(char),long,array(long),array(long),long,int,int,int,int,enum(int,int,int),bool)),*(char),*(char),*(char),*(char),int,int,*(struct))),int)->(void)
(	O
const	O
wget_bar	struct
*	O
bar	*(struct)
,	O
int	O
slot	int
)	O
{	O
_bar_slot_t	struct(*(char),*(char),array(char),array(char),long,array(long),array(long),long,int,int,int,int,enum(int,int,int),bool)
*	O
slotp	*(struct(*(char),*(char),array(char),array(char),long,array(long),array(long),long,int,int,int,int,enum(int,int,int),bool))
=	O
&	O
bar	*(struct)
->	O
slots	*(struct(*(char),*(char),array(char),array(char),long,array(long),array(long),long,int,int,int,int,enum(int,int,int),bool))
[	O
slot	int
]	O
;	O
if	O
(	O
slotp	*(struct(*(char),*(char),array(char),array(char),long,array(long),array(long),long,int,int,int,int,enum(int,int,int),bool))
->	O
file_size	long
>	O
0	int
)	O
{	O
size_t	long
bytes	long
=	O
slotp	*(struct(*(char),*(char),array(char),array(char),long,array(long),array(long),long,int,int,int,int,enum(int,int,int),bool))
->	O
bytes_downloaded	long
;	O
int	O
cols	int
=	O
(	O
int	O
)	O
(	O
(	O
bytes	long
/	O
(	O
double	O
)	O
slotp	*(struct(*(char),*(char),array(char),array(char),long,array(long),array(long),long,int,int,int,int,enum(int,int,int),bool))
->	O
file_size	long
)	O
*	O
bar	*(struct)
->	O
max_width	int
)	O
;	O
if	O
(	O
cols	int
>	O
bar	*(struct)
->	O
max_width	int
)	O
cols	int
=	O
bar	*(struct)
->	O
max_width	int
;	O
else	O
if	O
(	O
cols	int
<=	O
0	int
)	O
cols	int
=	O
1	int
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
slotp	*(struct(*(char),*(char),array(char),array(char),long,array(long),array(long),long,int,int,int,int,enum(int,int,int),bool))
->	O
progress	*(char)
,	O
bar	*(struct)
->	O
known_size	*(char)
,	O
cols	int
-	O
1	int
)	O
;	O
slotp	*(struct(*(char),*(char),array(char),array(char),long,array(long),array(long),long,int,int,int,int,enum(int,int,int),bool))
->	O
progress	*(char)
[	O
cols	int
-	O
1	int
]	O
=	O
'>'	O
;	O
if	O
(	O
cols	int
<	O
bar	*(struct)
->	O
max_width	int
)	O
memset	(*(void),int,long)->(*(void))
(	O
slotp	*(struct(*(char),*(char),array(char),array(char),long,array(long),array(long),long,int,int,int,int,enum(int,int,int),bool))
->	O
progress	*(char)
+	O
cols	int
,	O
' '	O
,	O
bar	*(struct)
->	O
max_width	int
-	O
cols	int
)	O
;	O
}	O
else	O
{	O
int	O
ind	int
=	O
slotp	*(struct(*(char),*(char),array(char),array(char),long,array(long),array(long),long,int,int,int,int,enum(int,int,int),bool))
->	O
tick	long
%	O
(	O
bar	*(struct)
->	O
max_width	int
*	O
2	int
-	O
6	int
)	O
;	O
int	O
pre_space	int
;	O
if	O
(	O
ind	int
<=	O
bar	*(struct)
->	O
max_width	int
-	O
3	int
)	O
pre_space	int
=	O
ind	int
;	O
else	O
pre_space	int
=	O
bar	*(struct)
->	O
max_width	int
-	O
(	O
ind	int
-	O
bar	*(struct)
->	O
max_width	int
+	O
5	int
)	O
;	O
memset	(*(void),int,long)->(*(void))
(	O
slotp	*(struct(*(char),*(char),array(char),array(char),long,array(long),array(long),long,int,int,int,int,enum(int,int,int),bool))
->	O
progress	*(char)
,	O
' '	O
,	O
bar	*(struct)
->	O
max_width	int
)	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
slotp	*(struct(*(char),*(char),array(char),array(char),long,array(long),array(long),long,int,int,int,int,enum(int,int,int),bool))
->	O
progress	*(char)
+	O
pre_space	int
,	O
"<=>"	*(char)
,	O
3	int
)	O
;	O
}	O
slotp	*(struct(*(char),*(char),array(char),array(char),long,array(long),array(long),long,int,int,int,int,enum(int,int,int),bool))
->	O
progress	*(char)
[	O
bar	*(struct)
->	O
max_width	int
]	O
=	O
0	int
;	O
}	O
static	O
void	O
inspect_multibyte	(*(char),long,*(long),*(long))->(void)
(	O
char	O
*	O
s	*(char)
,	O
size_t	long
available_space	long
,	O
size_t	long
*	O
inspectedp	*(long)
,	O
size_t	long
*	O
padp	*(long)
)	O
{	O
unsigned	O
int	O
displayed	int
=	O
0	int
;	O
int	O
inspected	int
=	O
0	int
;	O
wchar_t	int
wide	int
;	O
int	O
mblen	(*(char),long)->(int)
;	O
size_t	long
remaining	long
;	O
if	O
(	O
!	O
s	*(char)
)	O
{	O
*	O
inspectedp	*(long)
=	O
inspected	int
;	O
*	O
padp	*(long)
=	O
available_space	long
;	O
return	O
;	O
}	O
remaining	long
=	O
strlen	(*(char))->(long)
(	O
s	*(char)
)	O
;	O
while	O
(	O
(	O
mblen	(*(char),long)->(int)
=	O
mbtowc	(*(int),*(char),long)->(int)
(	O
&	O
wide	int
,	O
&	O
s	*(char)
[	O
inspected	int
]	O
,	O
remaining	long
)	O
)	O
>	O
0	int
)	O
{	O
int	O
wid	int
=	O
wcwidth	(int)->(int)
(	O
wide	int
)	O
;	O
if	O
(	O
(	O
wid	int
==	O
0	int
&&	O
displayed	int
==	O
available_space	long
)	O
||	O
displayed	int
+	O
wid	int
>	O
available_space	long
)	O
break	O
;	O
inspected	int
+=	O
mblen	(*(char),long)->(int)
;	O
remaining	long
-=	O
mblen	(*(char),long)->(int)
;	O
displayed	int
+=	O
wid	int
;	O
}	O
*	O
inspectedp	*(long)
=	O
inspected	int
;	O
*	O
padp	*(long)
=	O
available_space	long
-	O
displayed	int
;	O
}	O
static	O
void	O
_bar_update_slot	(*(struct(*(struct(*`,*`,array(char),array(char),long,array(long),array(long),long,int,int,int,int,enum(int,int,int),bool)),*(char),*(char),*(char),*(char),int,int,*(struct))),int)->(void)
(	O
const	O
wget_bar	struct
*	O
bar	*(struct)
,	O
int	O
slot	int
)	O
{	O
_bar_slot_t	struct(*(char),*(char),array(char),array(char),long,array(long),array(long),long,int,int,int,int,enum(int,int,int),bool)
*	O
slotp	*(struct(*(char),*(char),array(char),array(char),long,array(long),array(long),long,int,int,int,int,enum(int,int,int),bool))
=	O
&	O
bar	*(struct)
->	O
slots	*(struct(*(char),*(char),array(char),array(char),long,array(long),array(long),long,int,int,int,int,enum(int,int,int),bool))
[	O
slot	int
]	O
;	O
if	O
(	O
slotp	*(struct(*(char),*(char),array(char),array(char),long,array(long),array(long),long,int,int,int,int,enum(int,int,int),bool))
->	O
status	int
==	O
DOWNLOADING	int
||	O
slotp	*(struct(*(char),*(char),array(char),array(char),long,array(long),array(long),long,int,int,int,int,enum(int,int,int),bool))
->	O
status	int
==	O
COMPLETE	int
)	O
{	O
uint64_t	long
max	int
,	O
cur	long
;	O
int	O
ratio	int
;	O
size_t	long
consumed	long
,	O
pad	long
;	O
max	int
=	O
slotp	*(struct(*(char),*(char),array(char),array(char),long,array(long),array(long),long,int,int,int,int,enum(int,int,int),bool))
->	O
file_size	long
;	O
cur	long
=	O
slotp	*(struct(*(char),*(char),array(char),array(char),long,array(long),array(long),long,int,int,int,int,enum(int,int,int),bool))
->	O
bytes_downloaded	long
;	O
ratio	int
=	O
max	int
?	O
(	O
int	O
)	O
(	O
(	O
100	int
*	O
cur	long
)	O
/	O
max	int
)	O
:	O
0	int
;	O
wget_human_readable	(*(char),long,long)->(*(char))
(	O
slotp	*(struct(*(char),*(char),array(char),array(char),long,array(long),array(long),long,int,int,int,int,enum(int,int,int),bool))
->	O
human_size	array(char)
,	O
sizeof	O
(	O
slotp	*(struct(*(char),*(char),array(char),array(char),long,array(long),array(long),long,int,int,int,int,enum(int,int,int),bool))
->	O
human_size	array(char)
)	O
,	O
cur	long
)	O
;	O
_bar_update_speed_stats	(*(struct(*(char),*(char),array(char),array(char),long,array(long),array(long),long,int,int,int,int,enum(int,int,int),bool)))->(void)
(	O
slotp	*(struct(*(char),*(char),array(char),array(char),long,array(long),array(long),long,int,int,int,int,enum(int,int,int),bool))
)	O
;	O
_bar_set_progress	(*(struct(*(struct(*`,*`,array(char),array(char),long,array(long),array(long),long,int,int,int,int,enum(int,int,int),bool)),*(char),*(char),*(char),*(char),int,int,*(struct))),int)->(void)
(	O
bar	*(struct)
,	O
slot	int
)	O
;	O
_bar_print_slot	(*(struct(*(struct(*`,*`,array(char),array(char),long,array(long),array(long),long,int,int,int,int,enum(int,int,int),bool)),*(char),*(char),*(char),*(char),int,int,*(struct))),int)->(void)
(	O
bar	*(struct)
,	O
slot	int
)	O
;	O
inspect_multibyte	(*(char),long,*(long),*(long))->(void)
(	O
slotp	*(struct(*(char),*(char),array(char),array(char),long,array(long),array(long),long,int,int,int,int,enum(int,int,int),bool))
->	O
filename	*(*(char))
,	O
_BAR_FILENAME_SIZE	int
,	O
&	O
consumed	long
,	O
&	O
pad	long
)	O
;	O
wget_fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(long)
(	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%-*.*s %*d%% [%s] %*s %*s%c/s"	*(char)
,	O
(	O
int	O
)	O
(	O
consumed	long
+	O
pad	long
)	O
,	O
(	O
int	O
)	O
(	O
consumed	long
+	O
pad	long
)	O
,	O
slotp	*(struct(*(char),*(char),array(char),array(char),long,array(long),array(long),long,int,int,int,int,enum(int,int,int),bool))
->	O
filename	*(*(char))
,	O
_BAR_RATIO_SIZE	int
,	O
ratio	int
,	O
slotp	*(struct(*(char),*(char),array(char),array(char),long,array(long),array(long),long,int,int,int,int,enum(int,int,int),bool))
->	O
progress	*(char)
,	O
_BAR_DOWNBYTES_SIZE	int
,	O
slotp	*(struct(*(char),*(char),array(char),array(char),long,array(long),array(long),long,int,int,int,int,enum(int,int,int),bool))
->	O
human_size	array(char)
,	O
_BAR_SPEED_SIZE	int
,	O
slotp	*(struct(*(char),*(char),array(char),array(char),long,array(long),array(long),long,int,int,int,int,enum(int,int,int),bool))
->	O
speed_buf	array(char)
,	O
report_speed_type_char	char
)	O
;	O
_restore_cursor_position	()->(void)
(	O
)	O
;	O
fflush	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
slotp	*(struct(*(char),*(char),array(char),array(char),long,array(long),array(long),long,int,int,int,int,enum(int,int,int),bool))
->	O
tick	long
++	O
;	O
}	O
}	O
static	O
int	O
_bar_get_width	()->(int)
(	O
void	O
)	O
{	O
int	O
width	*(int)
=	O
DEFAULT_SCREEN_WIDTH	int
;	O
if	O
(	O
wget_get_screen_size	(*(int),*(int))->(int)
(	O
&	O
width	*(int)
,	O
NULL	O
)	O
==	O
0	int
)	O
{	O
if	O
(	O
width	*(int)
<	O
MINIMUM_SCREEN_WIDTH	int
)	O
width	*(int)
=	O
MINIMUM_SCREEN_WIDTH	int
;	O
else	O
width	*(int)
--	O
;	O
}	O
return	O
width	*(int)
-	O
_BAR_DECOR_COST	int
;	O
}	O
static	O
void	O
_bar_update_winsize	(*(struct(*(struct(*`,*`,array(char),array(char),long,array(long),array(long),long,int,int,int,int,enum(int,int,int),bool)),*(char),*(char),*(char),*(char),int,int,*(struct))),bool)->(void)
(	O
wget_bar	struct
*	O
bar	*(struct)
,	O
bool	bool
slots_changed	bool
)	O
{	O
if	O
(	O
winsize_changed	int
||	O
slots_changed	bool
)	O
{	O
char	O
*	O
progress_mem_holder	*(char)
;	O
int	O
max_width	int
=	O
_bar_get_width	()->(int)
(	O
)	O
;	O
if	O
(	O
!	O
(	O
progress_mem_holder	*(char)
=	O
wget_calloc	(long,long)->(*(void))
(	O
bar	*(struct)
->	O
nslots	int
,	O
max_width	int
+	O
1	int
)	O
)	O
)	O
return	O
;	O
if	O
(	O
bar	*(struct)
->	O
max_width	int
<	O
max_width	int
)	O
{	O
char	O
*	O
known_size	*(char)
=	O
wget_malloc	(long)->(*(void))
(	O
max_width	int
)	O
;	O
char	O
*	O
unknown_size	*(char)
=	O
wget_malloc	(long)->(*(void))
(	O
max_width	int
)	O
;	O
char	O
*	O
spaces	*(char)
=	O
wget_malloc	(long)->(*(void))
(	O
max_width	int
)	O
;	O
if	O
(	O
!	O
known_size	*(char)
||	O
!	O
unknown_size	*(char)
||	O
!	O
spaces	*(char)
)	O
{	O
xfree	O
(	O
spaces	*(char)
)	O
;	O
xfree	O
(	O
unknown_size	*(char)
)	O
;	O
xfree	O
(	O
known_size	*(char)
)	O
;	O
xfree	O
(	O
progress_mem_holder	*(char)
)	O
;	O
return	O
;	O
}	O
xfree	O
(	O
bar	*(struct)
->	O
known_size	*(char)
)	O
;	O
bar	*(struct)
->	O
known_size	*(char)
=	O
known_size	*(char)
;	O
memset	(*(void),int,long)->(*(void))
(	O
bar	*(struct)
->	O
known_size	*(char)
,	O
'='	O
,	O
max_width	int
)	O
;	O
xfree	O
(	O
bar	*(struct)
->	O
unknown_size	*(char)
)	O
;	O
bar	*(struct)
->	O
unknown_size	*(char)
=	O
unknown_size	*(char)
;	O
memset	(*(void),int,long)->(*(void))
(	O
bar	*(struct)
->	O
unknown_size	*(char)
,	O
'*'	O
,	O
max_width	int
)	O
;	O
xfree	O
(	O
bar	*(struct)
->	O
spaces	*(char)
)	O
;	O
bar	*(struct)
->	O
spaces	*(char)
=	O
spaces	*(char)
;	O
memset	(*(void),int,long)->(*(void))
(	O
bar	*(struct)
->	O
spaces	*(char)
,	O
' '	O
,	O
max_width	int
)	O
;	O
}	O
xfree	O
(	O
bar	*(struct)
->	O
progress_mem_holder	*(char)
)	O
;	O
bar	*(struct)
->	O
progress_mem_holder	*(char)
=	O
progress_mem_holder	*(char)
;	O
for	O
(	O
int	O
i	int
=	O
0	int
;	O
i	int
<	O
bar	*(struct)
->	O
nslots	int
;	O
i	int
++	O
)	O
{	O
bar	*(struct)
->	O
slots	*(struct(*(char),*(char),array(char),array(char),long,array(long),array(long),long,int,int,int,int,enum(int,int,int),bool))
[	O
i	int
]	O
.	O
progress	*(char)
=	O
bar	*(struct)
->	O
progress_mem_holder	*(char)
+	O
(	O
i	int
*	O
max_width	int
)	O
;	O
}	O
bar	*(struct)
->	O
max_width	int
=	O
max_width	int
;	O
}	O
winsize_changed	int
=	O
0	int
;	O
}	O
static	O
void	O
_bar_update	(*(struct(*(struct(*`,*`,array(char),array(char),long,array(long),array(long),long,int,int,int,int,enum(int,int,int),bool)),*(char),*(char),*(char),*(char),int,int,*(struct))))->(void)
(	O
wget_bar	struct
*	O
bar	*(struct)
)	O
{	O
_bar_update_winsize	(*(struct(*(struct(*`,*`,array(char),array(char),long,array(long),array(long),long,int,int,int,int,enum(int,int,int),bool)),*(char),*(char),*(char),*(char),int,int,*(struct))),bool)->(void)
(	O
bar	*(struct)
,	O
false	int
)	O
;	O
for	O
(	O
int	O
i	int
=	O
0	int
;	O
i	int
<	O
bar	*(struct)
->	O
nslots	int
;	O
i	int
++	O
)	O
{	O
if	O
(	O
bar	*(struct)
->	O
slots	*(struct(*(char),*(char),array(char),array(char),long,array(long),array(long),long,int,int,int,int,enum(int,int,int),bool))
[	O
i	int
]	O
.	O
redraw	bool
||	O
winsize_changed	int
)	O
{	O
_bar_update_slot	(*(struct(*(struct(*`,*`,array(char),array(char),long,array(long),array(long),long,int,int,int,int,enum(int,int,int),bool)),*(char),*(char),*(char),*(char),int,int,*(struct))),int)->(void)
(	O
bar	*(struct)
,	O
i	int
)	O
;	O
bar	*(struct)
->	O
slots	*(struct(*(char),*(char),array(char),array(char),long,array(long),array(long),long,int,int,int,int,enum(int,int,int),bool))
[	O
i	int
]	O
.	O
redraw	bool
=	O
0	int
;	O
}	O
}	O
}	O
wget_bar	struct
*	O
wget_bar_init	(*(struct),int)->(*(struct))
(	O
wget_bar	struct
*	O
bar	*(struct)
,	O
int	O
nslots	int
)	O
{	O
int	O
max_width	int
=	O
_bar_get_width	()->(int)
(	O
)	O
;	O
if	O
(	O
nslots	int
<	O
1	int
||	O
max_width	int
<	O
1	int
)	O
return	O
NULL	O
;	O
if	O
(	O
!	O
bar	*(struct)
)	O
{	O
if	O
(	O
!	O
(	O
bar	*(struct)
=	O
wget_calloc	(long,long)->(*(void))
(	O
1	int
,	O
sizeof	O
(	O
*	O
bar	*(struct)
)	O
)	O
)	O
)	O
return	O
NULL	O
;	O
}	O
else	O
memset	(*(void),int,long)->(*(void))
(	O
bar	*(struct)
,	O
0	int
,	O
sizeof	O
(	O
*	O
bar	*(struct)
)	O
)	O
;	O
wget_thread_mutex_init	(*(*(struct)))->(int)
(	O
&	O
bar	*(struct)
->	O
mutex	*(*(struct))
)	O
;	O
wget_bar_set_slots	(*(struct),int)->(void)
(	O
bar	*(struct)
,	O
nslots	int
)	O
;	O
return	O
bar	*(struct)
;	O
}	O
void	O
wget_bar_set_slots	(*(struct),int)->(void)
(	O
wget_bar	struct
*	O
bar	*(struct)
,	O
int	O
nslots	int
)	O
{	O
wget_thread_mutex_lock	(*(struct))->(void)
(	O
bar	*(struct)
->	O
mutex	*(*(struct))
)	O
;	O
int	O
more_slots	int
=	O
nslots	int
-	O
bar	*(struct)
->	O
nslots	int
;	O
if	O
(	O
more_slots	int
>	O
0	int
)	O
{	O
_bar_slot_t	struct(*(char),*(char),array(char),array(char),long,array(long),array(long),long,int,int,int,int,enum(int,int,int),bool)
*	O
slots	*(struct(*(char),*(char),array(char),array(char),long,array(long),array(long),long,int,int,int,int,enum(int,int,int),bool))
=	O
wget_realloc	(*(void),long)->(*(void))
(	O
bar	*(struct)
->	O
slots	*(struct(*(char),*(char),array(char),array(char),long,array(long),array(long),long,int,int,int,int,enum(int,int,int),bool))
,	O
nslots	int
*	O
sizeof	O
(	O
_bar_slot_t	struct(*(char),*(char),array(char),array(char),long,array(long),array(long),long,int,int,int,int,enum(int,int,int),bool)
)	O
)	O
;	O
if	O
(	O
!	O
slots	*(struct(*(char),*(char),array(char),array(char),long,array(long),array(long),long,int,int,int,int,enum(int,int,int),bool))
)	O
{	O
wget_thread_mutex_unlock	(*(struct))->(void)
(	O
bar	*(struct)
->	O
mutex	*(*(struct))
)	O
;	O
return	O
;	O
}	O
bar	*(struct)
->	O
slots	*(struct(*(char),*(char),array(char),array(char),long,array(long),array(long),long,int,int,int,int,enum(int,int,int),bool))
=	O
slots	*(struct(*(char),*(char),array(char),array(char),long,array(long),array(long),long,int,int,int,int,enum(int,int,int),bool))
;	O
memset	(*(void),int,long)->(*(void))
(	O
bar	*(struct)
->	O
slots	*(struct(*(char),*(char),array(char),array(char),long,array(long),array(long),long,int,int,int,int,enum(int,int,int),bool))
+	O
bar	*(struct)
->	O
nslots	int
,	O
0	int
,	O
more_slots	int
*	O
sizeof	O
(	O
_bar_slot_t	struct(*(char),*(char),array(char),array(char),long,array(long),array(long),long,int,int,int,int,enum(int,int,int),bool)
)	O
)	O
;	O
bar	*(struct)
->	O
nslots	int
=	O
nslots	int
;	O
for	O
(	O
int	O
i	int
=	O
0	int
;	O
i	int
<	O
more_slots	int
;	O
i	int
++	O
)	O
fputs	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
"\n"	*(char)
,	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
_bar_update_winsize	(*(struct(*(struct(*`,*`,array(char),array(char),long,array(long),array(long),long,int,int,int,int,enum(int,int,int),bool)),*(char),*(char),*(char),*(char),int,int,*(struct))),bool)->(void)
(	O
bar	*(struct)
,	O
true	int
)	O
;	O
_bar_update	(*(struct(*(struct(*`,*`,array(char),array(char),long,array(long),array(long),long,int,int,int,int,enum(int,int,int),bool)),*(char),*(char),*(char),*(char),int,int,*(struct))))->(void)
(	O
bar	*(struct)
)	O
;	O
}	O
wget_thread_mutex_unlock	(*(struct))->(void)
(	O
bar	*(struct)
->	O
mutex	*(*(struct))
)	O
;	O
}	O
void	O
wget_bar_slot_begin	(*(struct),int,*(char),int,long)->(void)
(	O
wget_bar	struct
*	O
bar	*(struct)
,	O
int	O
slot	int
,	O
const	O
char	O
*	O
filename	*(*(char))
,	O
int	O
new_file	int
,	O
ssize_t	long
file_size	long
)	O
{	O
wget_thread_mutex_lock	(*(struct))->(void)
(	O
bar	*(struct)
->	O
mutex	*(*(struct))
)	O
;	O
_bar_slot_t	struct(*(char),*(char),array(char),array(char),long,array(long),array(long),long,int,int,int,int,enum(int,int,int),bool)
*	O
slotp	*(struct(*(char),*(char),array(char),array(char),long,array(long),array(long),long,int,int,int,int,enum(int,int,int),bool))
=	O
&	O
bar	*(struct)
->	O
slots	*(struct(*(char),*(char),array(char),array(char),long,array(long),array(long),long,int,int,int,int,enum(int,int,int),bool))
[	O
slot	int
]	O
;	O
xfree	O
(	O
slotp	*(struct(*(char),*(char),array(char),array(char),long,array(long),array(long),long,int,int,int,int,enum(int,int,int),bool))
->	O
filename	*(*(char))
)	O
;	O
if	O
(	O
new_file	int
)	O
slotp	*(struct(*(char),*(char),array(char),array(char),long,array(long),array(long),long,int,int,int,int,enum(int,int,int),bool))
->	O
numfiles	int
++	O
;	O
if	O
(	O
slotp	*(struct(*(char),*(char),array(char),array(char),long,array(long),array(long),long,int,int,int,int,enum(int,int,int),bool))
->	O
numfiles	int
==	O
1	int
)	O
{	O
slotp	*(struct(*(char),*(char),array(char),array(char),long,array(long),array(long),long,int,int,int,int,enum(int,int,int),bool))
->	O
filename	*(*(char))
=	O
wget_strdup	(*(char))->(*(char))
(	O
filename	*(*(char))
)	O
;	O
}	O
else	O
{	O
slotp	*(struct(*(char),*(char),array(char),array(char),long,array(long),array(long),long,int,int,int,int,enum(int,int,int),bool))
->	O
filename	*(*(char))
=	O
wget_aprintf	(*(char))->(*(char))
(	O
"%d files"	*(char)
,	O
slotp	*(struct(*(char),*(char),array(char),array(char),long,array(long),array(long),long,int,int,int,int,enum(int,int,int),bool))
->	O
numfiles	int
)	O
;	O
}	O
slotp	*(struct(*(char),*(char),array(char),array(char),long,array(long),array(long),long,int,int,int,int,enum(int,int,int),bool))
->	O
tick	long
=	O
0	int
;	O
slotp	*(struct(*(char),*(char),array(char),array(char),long,array(long),array(long),long,int,int,int,int,enum(int,int,int),bool))
->	O
file_size	long
+=	O
file_size	long
;	O
slotp	*(struct(*(char),*(char),array(char),array(char),long,array(long),array(long),long,int,int,int,int,enum(int,int,int),bool))
->	O
status	int
=	O
DOWNLOADING	int
;	O
slotp	*(struct(*(char),*(char),array(char),array(char),long,array(long),array(long),long,int,int,int,int,enum(int,int,int),bool))
->	O
redraw	bool
=	O
1	int
;	O
slotp	*(struct(*(char),*(char),array(char),array(char),long,array(long),array(long),long,int,int,int,int,enum(int,int,int),bool))
->	O
ring_pos	int
=	O
0	int
;	O
slotp	*(struct(*(char),*(char),array(char),array(char),long,array(long),array(long),long,int,int,int,int,enum(int,int,int),bool))
->	O
ring_used	int
=	O
0	int
;	O
memset	(*(void),int,long)->(*(void))
(	O
&	O
slotp	*(struct(*(char),*(char),array(char),array(char),long,array(long),array(long),long,int,int,int,int,enum(int,int,int),bool))
->	O
time_ring	array(long)
,	O
0	int
,	O
sizeof	O
(	O
slotp	*(struct(*(char),*(char),array(char),array(char),long,array(long),array(long),long,int,int,int,int,enum(int,int,int),bool))
->	O
time_ring	array(long)
)	O
)	O
;	O
memset	(*(void),int,long)->(*(void))
(	O
&	O
slotp	*(struct(*(char),*(char),array(char),array(char),long,array(long),array(long),long,int,int,int,int,enum(int,int,int),bool))
->	O
bytes_ring	array(long)
,	O
0	int
,	O
sizeof	O
(	O
slotp	*(struct(*(char),*(char),array(char),array(char),long,array(long),array(long),long,int,int,int,int,enum(int,int,int),bool))
->	O
bytes_ring	array(long)
)	O
)	O
;	O
wget_thread_mutex_unlock	(*(struct))->(void)
(	O
bar	*(struct)
->	O
mutex	*(*(struct))
)	O
;	O
}	O
void	O
wget_bar_slot_downloaded	(*(struct),int,long)->(void)
(	O
wget_bar	struct
*	O
bar	*(struct)
,	O
int	O
slot	int
,	O
size_t	long
nbytes	long
)	O
{	O
wget_thread_mutex_lock	(*(struct))->(void)
(	O
bar	*(struct)
->	O
mutex	*(*(struct))
)	O
;	O
bar	*(struct)
->	O
slots	*(struct(*(char),*(char),array(char),array(char),long,array(long),array(long),long,int,int,int,int,enum(int,int,int),bool))
[	O
slot	int
]	O
.	O
bytes_downloaded	long
+=	O
nbytes	long
;	O
bar	*(struct)
->	O
slots	*(struct(*(char),*(char),array(char),array(char),long,array(long),array(long),long,int,int,int,int,enum(int,int,int),bool))
[	O
slot	int
]	O
.	O
redraw	bool
=	O
1	int
;	O
wget_thread_mutex_unlock	(*(struct))->(void)
(	O
bar	*(struct)
->	O
mutex	*(*(struct))
)	O
;	O
}	O
void	O
wget_bar_slot_deregister	(*(struct),int)->(void)
(	O
wget_bar	struct
*	O
bar	*(struct)
,	O
int	O
slot	int
)	O
{	O
wget_thread_mutex_lock	(*(struct))->(void)
(	O
bar	*(struct)
->	O
mutex	*(*(struct))
)	O
;	O
if	O
(	O
slot	int
>=	O
0	int
&&	O
slot	int
<	O
bar	*(struct)
->	O
nslots	int
)	O
{	O
_bar_slot_t	struct(*(char),*(char),array(char),array(char),long,array(long),array(long),long,int,int,int,int,enum(int,int,int),bool)
*	O
slotp	*(struct(*(char),*(char),array(char),array(char),long,array(long),array(long),long,int,int,int,int,enum(int,int,int),bool))
=	O
&	O
bar	*(struct)
->	O
slots	*(struct(*(char),*(char),array(char),array(char),long,array(long),array(long),long,int,int,int,int,enum(int,int,int),bool))
[	O
slot	int
]	O
;	O
slotp	*(struct(*(char),*(char),array(char),array(char),long,array(long),array(long),long,int,int,int,int,enum(int,int,int),bool))
->	O
status	int
=	O
COMPLETE	int
;	O
_bar_update_slot	(*(struct(*(struct(*`,*`,array(char),array(char),long,array(long),array(long),long,int,int,int,int,enum(int,int,int),bool)),*(char),*(char),*(char),*(char),int,int,*(struct))),int)->(void)
(	O
bar	*(struct)
,	O
slot	int
)	O
;	O
}	O
wget_thread_mutex_unlock	(*(struct))->(void)
(	O
bar	*(struct)
->	O
mutex	*(*(struct))
)	O
;	O
}	O
void	O
wget_bar_update	(*(struct))->(void)
(	O
wget_bar	struct
*	O
bar	*(struct)
)	O
{	O
wget_thread_mutex_lock	(*(struct))->(void)
(	O
bar	*(struct)
->	O
mutex	*(*(struct))
)	O
;	O
_bar_update	(*(struct(*(struct(*`,*`,array(char),array(char),long,array(long),array(long),long,int,int,int,int,enum(int,int,int),bool)),*(char),*(char),*(char),*(char),int,int,*(struct))))->(void)
(	O
bar	*(struct)
)	O
;	O
wget_thread_mutex_unlock	(*(struct))->(void)
(	O
bar	*(struct)
->	O
mutex	*(*(struct))
)	O
;	O
}	O
void	O
wget_bar_deinit	(*(struct))->(void)
(	O
wget_bar	struct
*	O
bar	*(struct)
)	O
{	O
if	O
(	O
bar	*(struct)
)	O
{	O
for	O
(	O
int	O
i	int
=	O
0	int
;	O
i	int
<	O
bar	*(struct)
->	O
nslots	int
;	O
i	int
++	O
)	O
{	O
xfree	O
(	O
bar	*(struct)
->	O
slots	*(struct(*(char),*(char),array(char),array(char),long,array(long),array(long),long,int,int,int,int,enum(int,int,int),bool))
[	O
i	int
]	O
.	O
filename	*(*(char))
)	O
;	O
}	O
xfree	O
(	O
bar	*(struct)
->	O
progress_mem_holder	*(char)
)	O
;	O
xfree	O
(	O
bar	*(struct)
->	O
spaces	*(char)
)	O
;	O
xfree	O
(	O
bar	*(struct)
->	O
known_size	*(char)
)	O
;	O
xfree	O
(	O
bar	*(struct)
->	O
unknown_size	*(char)
)	O
;	O
xfree	O
(	O
bar	*(struct)
->	O
slots	*(struct(*(char),*(char),array(char),array(char),long,array(long),array(long),long,int,int,int,int,enum(int,int,int),bool))
)	O
;	O
wget_thread_mutex_destroy	(*(*(struct)))->(int)
(	O
&	O
bar	*(struct)
->	O
mutex	*(*(struct))
)	O
;	O
}	O
}	O
void	O
wget_bar_free	(*(*(struct)))->(void)
(	O
wget_bar	struct
*	O
*	O
bar	*(struct)
)	O
{	O
if	O
(	O
bar	*(struct)
)	O
{	O
wget_bar_deinit	(*(struct))->(void)
(	O
*	O
bar	*(struct)
)	O
;	O
xfree	O
(	O
*	O
bar	*(struct)
)	O
;	O
}	O
}	O
void	O
wget_bar_print	(*(struct),int,*(char))->(void)
(	O
wget_bar	struct
*	O
bar	*(struct)
,	O
int	O
slot	int
,	O
const	O
char	O
*	O
display	*(char)
)	O
{	O
wget_thread_mutex_lock	(*(struct))->(void)
(	O
bar	*(struct)
->	O
mutex	*(*(struct))
)	O
;	O
_bar_print_slot	(*(struct(*(struct(*`,*`,array(char),array(char),long,array(long),array(long),long,int,int,int,int,enum(int,int,int),bool)),*(char),*(char),*(char),*(char),int,int,*(struct))),int)->(void)
(	O
bar	*(struct)
,	O
slot	int
)	O
;	O
wget_fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(long)
(	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"\033[27G[%-*.*s]"	*(char)
,	O
bar	*(struct)
->	O
max_width	int
,	O
bar	*(struct)
->	O
max_width	int
,	O
display	*(char)
)	O
;	O
_restore_cursor_position	()->(void)
(	O
)	O
;	O
fflush	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
wget_thread_mutex_unlock	(*(struct))->(void)
(	O
bar	*(struct)
->	O
mutex	*(*(struct))
)	O
;	O
}	O
void	O
wget_bar_vprintf	(*(struct),int,*(char),array(struct(int,int,*(void),*(void))))->(void)
(	O
wget_bar	struct
*	O
bar	*(struct)
,	O
int	O
slot	int
,	O
const	O
char	O
*	O
fmt	*(char)
,	O
va_list	array(struct(int,int,*(void),*(void)))
args	array(struct(int,int,*(void),*(void)))
)	O
{	O
char	O
text	*(void)
[	O
bar	*(struct)
->	O
max_width	int
+	O
1	int
]	O
;	O
wget_vsnprintf	(*(char),long,*(char),array(struct(int,int,*(void),*(void))))->(long)
(	O
text	*(void)
,	O
sizeof	O
(	O
text	*(void)
)	O
,	O
fmt	*(char)
,	O
args	array(struct(int,int,*(void),*(void)))
)	O
;	O
wget_bar_print	(*(struct),int,*(char))->(void)
(	O
bar	*(struct)
,	O
slot	int
,	O
text	*(void)
)	O
;	O
}	O
void	O
wget_bar_printf	(*(struct),int,*(char))->(void)
(	O
wget_bar	struct
*	O
bar	*(struct)
,	O
int	O
slot	int
,	O
const	O
char	O
*	O
fmt	*(char)
,	O
...	O
)	O
{	O
va_list	array(struct(int,int,*(void),*(void)))
args	array(struct(int,int,*(void),*(void)))
;	O
va_start	O
(	O
args	array(struct(int,int,*(void),*(void)))
,	O
fmt	*(char)
)	O
;	O
wget_bar_vprintf	(*(struct),int,*(char),array(struct(int,int,*(void),*(void))))->(void)
(	O
bar	*(struct)
,	O
slot	int
,	O
fmt	*(char)
,	O
args	array(struct(int,int,*(void),*(void)))
)	O
;	O
va_end	O
(	O
args	array(struct(int,int,*(void),*(void)))
)	O
;	O
}	O
void	O
wget_bar_screen_resized	()->(void)
(	O
void	O
)	O
{	O
winsize_changed	int
=	O
1	int
;	O
}	O
void	O
wget_bar_write_line	(*(struct),*(char),long)->(void)
(	O
wget_bar	struct
*	O
bar	*(struct)
,	O
const	O
char	O
*	O
buf	*(char)
,	O
size_t	long
len	long
)	O
{	O
wget_thread_mutex_lock	(*(struct))->(void)
(	O
bar	*(struct)
->	O
mutex	*(*(struct))
)	O
;	O
wget_fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(long)
(	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"\0337\033[1S\033[%dA\033[1G\033[0J\033[31m"	*(char)
,	O
bar	*(struct)
->	O
nslots	int
+	O
1	int
)	O
;	O
fwrite	(*(void),long,long,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(long)
(	O
buf	*(char)
,	O
1	int
,	O
len	long
,	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
fputs	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
"\033[m"	*(char)
,	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
_restore_cursor_position	()->(void)
(	O
)	O
;	O
_bar_update	(*(struct(*(struct(*`,*`,array(char),array(char),long,array(long),array(long),long,int,int,int,int,enum(int,int,int),bool)),*(char),*(char),*(char),*(char),int,int,*(struct))))->(void)
(	O
bar	*(struct)
)	O
;	O
wget_thread_mutex_unlock	(*(struct))->(void)
(	O
bar	*(struct)
->	O
mutex	*(*(struct))
)	O
;	O
}	O
void	O
wget_bar_set_speed_type	(enum(int,int))->(void)
(	O
wget_report_speed	enum(int,int)
type	*(char)
)	O
{	O
report_speed_type	enum(int,int)
=	O
type	*(char)
;	O
if	O
(	O
type	*(char)
==	O
WGET_REPORT_SPEED_BITS	int
)	O
{	O
report_speed_type_char	char
=	O
'b'	O
;	O
speed_modifier	short
=	O
8	int
;	O
}	O
}	O
