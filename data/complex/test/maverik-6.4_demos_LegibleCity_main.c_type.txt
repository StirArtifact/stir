MAV_class	O
*	O
mav_class_character	*(int)
;	O
MAV_class	O
*	O
mav_class_feature	*(int)
;	O
MAV_class	O
*	O
mav_class_vector	*(int)
;	O
MAV_BB	O
city_bb	int
;	O
MAV_SMS	O
*	O
city_build	*(int)
;	O
MAV_SMS	O
*	O
city_sms	*(int)
;	O
int	O
apply_lod	int
=	O
1	int
;	O
int	O
apply_fog	int
=	O
1	int
;	O
float	O
fog_distance	float
=	O
300.0	int
;	O
float	O
box_distance	float
=	O
200.0	int
;	O
int	O
Keyboard_Function	(*(int),*(int))->(int)
(	O
MAV_object	O
*	O
obj	*(int)
,	O
MAV_keyboardEvent	O
*	O
ev	*(int)
)	O
{	O
int	O
rv	int
=	O
0	int
;	O
if	O
(	O
ev	*(int)
->	O
movement	O
==	O
MAV_PRESSED	O
)	O
{	O
switch	O
(	O
ev	*(int)
->	O
key	O
)	O
{	O
case	O
'q'	O
:	O
exit	O
(	O
1	int
)	O
;	O
break	O
;	O
case	O
'h'	O
:	O
fprintf	()->(int)
(	O
stderr	O
,	O
"\nh  this help page\n"	*(char)
)	O
;	O
fprintf	()->(int)
(	O
stderr	O
,	O
"-  decrease fog distance\n"	*(char)
)	O
;	O
fprintf	()->(int)
(	O
stderr	O
,	O
"=  increase fog distance\n"	*(char)
)	O
;	O
fprintf	()->(int)
(	O
stderr	O
,	O
"f  toggle fog\n"	*(char)
)	O
;	O
fprintf	()->(int)
(	O
stderr	O
,	O
"[  decrease box level of detail distance\n"	*(char)
)	O
;	O
fprintf	()->(int)
(	O
stderr	O
,	O
"]  increase box level of detail distance\n"	*(char)
)	O
;	O
fprintf	()->(int)
(	O
stderr	O
,	O
"l  toggle level of detail\n"	*(char)
)	O
;	O
fprintf	()->(int)
(	O
stderr	O
,	O
"left   mouse button  forward and yaw\n"	*(char)
)	O
;	O
fprintf	()->(int)
(	O
stderr	O
,	O
"middle mouse button  pitch and yaw\n"	*(char)
)	O
;	O
fprintf	()->(int)
(	O
stderr	O
,	O
"right  mouse button  right and up\n"	*(char)
)	O
;	O
fprintf	()->(int)
(	O
stderr	O
,	O
"cursor keys also navigate\n\n"	*(char)
)	O
;	O
break	O
;	O
case	O
'-'	O
:	O
fog_distance	float
-=	O
10.0	int
;	O
if	O
(	O
fog_distance	float
<	O
1.0	int
)	O
fog_distance	float
=	O
1.0	int
;	O
if	O
(	O
box_distance	float
>	O
fog_distance	float
)	O
box_distance	float
=	O
fog_distance	float
;	O
fprintf	()->(int)
(	O
stdout	O
,	O
"Fog distance= %f\n"	*(char)
,	O
fog_distance	float
)	O
;	O
mav_windowFogSet	()->(int)
(	O
mav_win_all	O
,	O
MAV_FOG_LINEAR	O
,	O
1.0	int
,	O
fog_distance	float
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
)	O
;	O
rv	int
=	O
1	int
;	O
break	O
;	O
case	O
'='	O
:	O
fog_distance	float
+=	O
10.0	int
;	O
fprintf	()->(int)
(	O
stdout	O
,	O
"Fog distance= %f\n"	*(char)
,	O
fog_distance	float
)	O
;	O
mav_windowFogSet	()->(int)
(	O
mav_win_all	O
,	O
MAV_FOG_LINEAR	O
,	O
1.0	int
,	O
fog_distance	float
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
)	O
;	O
rv	int
=	O
1	int
;	O
break	O
;	O
case	O
'['	O
:	O
box_distance	float
-=	O
10.0	int
;	O
if	O
(	O
box_distance	float
<	O
0.0	int
)	O
box_distance	float
=	O
0.0	int
;	O
fprintf	()->(int)
(	O
stdout	O
,	O
"Box distance= %f\n"	*(char)
,	O
box_distance	float
)	O
;	O
rv	int
=	O
1	int
;	O
break	O
;	O
case	O
']'	O
:	O
box_distance	float
+=	O
10.0	int
;	O
if	O
(	O
box_distance	float
>	O
fog_distance	float
)	O
fog_distance	float
=	O
box_distance	float
;	O
fprintf	()->(int)
(	O
stdout	O
,	O
"Box distance= %f\n"	*(char)
,	O
box_distance	float
)	O
;	O
rv	int
=	O
1	int
;	O
break	O
;	O
case	O
'f'	O
:	O
apply_fog	int
=	O
!	O
apply_fog	int
;	O
rv	int
=	O
1	int
;	O
if	O
(	O
apply_fog	int
)	O
{	O
mav_windowFogSet	()->(int)
(	O
mav_win_all	O
,	O
MAV_FOG_LINEAR	O
,	O
1.0	int
,	O
fog_distance	float
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
)	O
;	O
fprintf	()->(int)
(	O
stderr	O
,	O
"enabled fog\n"	*(char)
)	O
;	O
}	O
else	O
{	O
mav_windowFogSet	()->(int)
(	O
mav_win_all	O
,	O
MAV_FOG_NONE	O
,	O
1.0	int
,	O
fog_distance	float
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
)	O
;	O
fprintf	()->(int)
(	O
stderr	O
,	O
"disabled fog\n"	*(char)
)	O
;	O
}	O
break	O
;	O
case	O
'l'	O
:	O
apply_lod	int
=	O
!	O
apply_lod	int
;	O
rv	int
=	O
1	int
;	O
break	O
;	O
}	O
}	O
return	O
rv	int
;	O
}	O
int	O
main	(int,array(*(char)))->(int)
(	O
int	O
argc	int
,	O
char	O
*	O
argv	array(*(char))
[	O
]	O
)	O
{	O
MAV_viewParams	O
vp	O
;	O
if	O
(	O
!	O
(	O
argc	int
==	O
1	int
||	O
argc	int
==	O
2	int
)	O
)	O
{	O
printf	O
(	O
"usage %s: [amsterdam|manhattan|karlsruhe]\n"	*(char)
,	O
argv	array(*(char))
[	O
0	int
]	O
)	O
;	O
exit	O
(	O
1	int
)	O
;	O
}	O
mav_initialise	()->(int)
(	O
&	O
argc	int
,	O
argv	array(*(char))
)	O
;	O
mav_class_character	*(int)
=	O
mav_classNew	()->(int)
(	O
)	O
;	O
mav_callbackDrawSet	()->(int)
(	O
mav_win_all	O
,	O
mav_class_character	*(int)
,	O
mav_characterDraw	(*(int),*(int))->(int)
)	O
;	O
mav_callbackBBSet	()->(int)
(	O
mav_win_all	O
,	O
mav_class_character	*(int)
,	O
mav_characterBBox	(*(int),*(int))->(int)
)	O
;	O
mav_class_feature	*(int)
=	O
mav_classNew	()->(int)
(	O
)	O
;	O
mav_callbackDrawSet	()->(int)
(	O
mav_win_all	O
,	O
mav_class_feature	*(int)
,	O
mav_featureDraw	(*(int),*(int))->(int)
)	O
;	O
mav_callbackBBSet	()->(int)
(	O
mav_win_all	O
,	O
mav_class_feature	*(int)
,	O
mav_featureBBox	(*(int),*(int))->(int)
)	O
;	O
mav_class_vector	*(int)
=	O
mav_classNew	()->(int)
(	O
)	O
;	O
mav_callbackDrawSet	()->(int)
(	O
mav_win_all	O
,	O
mav_class_vector	*(int)
,	O
mav_vectorDraw	(*(int),*(int))->(int)
)	O
;	O
mav_callbackBBSet	()->(int)
(	O
mav_win_all	O
,	O
mav_class_vector	*(int)
,	O
mav_vectorBBox	(*(int),*(int))->(int)
)	O
;	O
city_build	*(int)
=	O
mav_SMSObjListNew	()->(int)
(	O
)	O
;	O
city_sms	*(int)
=	O
mav_SMSHBBNew	()->(int)
(	O
)	O
;	O
fprintf	()->(int)
(	O
stderr	O
,	O
"building city (takes a minute, but it's worth it)..."	*(char)
)	O
;	O
Make_Font	()->(void)
(	O
)	O
;	O
if	O
(	O
argc	int
==	O
1	int
)	O
{	O
Make_Streets	(*(char),*(char))->(void)
(	O
"data/amsterdam.str"	*(char)
,	O
"data/amsterdam.lst"	*(char)
)	O
;	O
}	O
else	O
{	O
if	O
(	O
!	O
strcmp	O
(	O
argv	array(*(char))
[	O
1	int
]	O
,	O
"amsterdam"	*(char)
)	O
)	O
{	O
Make_Streets	(*(char),*(char))->(void)
(	O
"data/amsterdam.str"	*(char)
,	O
"data/amsterdam.lst"	*(char)
)	O
;	O
}	O
else	O
if	O
(	O
!	O
strcmp	O
(	O
argv	array(*(char))
[	O
1	int
]	O
,	O
"manhattan"	*(char)
)	O
)	O
{	O
Make_Streets	(*(char),*(char))->(void)
(	O
"data/manhattan.str"	*(char)
,	O
"data/manhattan.lst"	*(char)
)	O
;	O
}	O
else	O
if	O
(	O
!	O
strcmp	O
(	O
argv	array(*(char))
[	O
1	int
]	O
,	O
"karlsruhe"	*(char)
)	O
)	O
{	O
Make_Streets	(*(char),*(char))->(void)
(	O
"data/karlsruhe.str"	*(char)
,	O
"data/karlsruhe.lst"	*(char)
)	O
;	O
}	O
else	O
{	O
printf	O
(	O
"\nunknown city %s\n"	*(char)
,	O
argv	array(*(char))
[	O
1	int
]	O
)	O
;	O
printf	O
(	O
"usage %s: [amsterdam|manhattan|karlsruhe]\n"	*(char)
,	O
argv	array(*(char))
[	O
0	int
]	O
)	O
;	O
exit	O
(	O
1	int
)	O
;	O
}	O
}	O
mav_HBBConstructFromSMS	()->(int)
(	O
city_sms	*(int)
,	O
city_build	*(int)
)	O
;	O
mav_SMSDelete	()->(int)
(	O
city_build	*(int)
,	O
MAV_FALSE	O
)	O
;	O
mav_SMSSelectabilitySet	()->(int)
(	O
city_sms	*(int)
,	O
mav_win_all	O
,	O
MAV_FALSE	O
)	O
;	O
mav_windowPerspectiveSet	()->(int)
(	O
mav_win_all	O
,	O
1.0	int
,	O
10000	int
,	O
50.0	int
,	O
(	O
(	O
float	O
)	O
mav_win_current	O
->	O
width	O
)	O
/	O
mav_win_current	O
->	O
height	O
)	O
;	O
mav_windowBackgroundColourSet	()->(int)
(	O
mav_win_all	O
,	O
0.0	int
,	O
0.0	int
,	O
0.0	int
)	O
;	O
mav_windowBackfaceCullSet	()->(int)
(	O
mav_win_all	O
,	O
MAV_TRUE	O
)	O
;	O
mav_navigationMouse	()->(int)
(	O
mav_win_all	O
,	O
mav_navigationMouseDefault	O
)	O
;	O
mav_navigationMouseDefaultParams	()->(int)
(	O
mav_win_all	O
,	O
MAV_LEFT_BUTTON	O
,	O
mav_navigateYawFixedUp	O
,	O
0.5	int
,	O
-	O
0.001	int
,	O
mav_navigateForwardsFixedUp	O
,	O
0.5	int
,	O
0.001	int
)	O
;	O
mav_navigationMouseDefaultParams	()->(int)
(	O
mav_win_all	O
,	O
MAV_MIDDLE_BUTTON	O
,	O
mav_navigateYawFixedUp	O
,	O
0.5	int
,	O
-	O
0.001	int
,	O
mav_navigatePitch	O
,	O
0.5	int
,	O
0.001	int
)	O
;	O
mav_navigationMouseDefaultParams	()->(int)
(	O
mav_win_all	O
,	O
MAV_RIGHT_BUTTON	O
,	O
mav_navigateRightFixedUp	O
,	O
0.5	int
,	O
0.001	int
,	O
mav_navigateUpFixedUp	O
,	O
0.5	int
,	O
0.001	int
)	O
;	O
mav_navigationKeyboard	()->(int)
(	O
mav_win_all	O
,	O
mav_navigationKeyboardDefault	O
)	O
;	O
mav_navigationKeyboardDefaultParams	()->(int)
(	O
mav_win_all	O
,	O
100	int
,	O
0.25	int
,	O
0.001	int
)	O
;	O
mav_callbackKeyboardSet	()->(int)
(	O
mav_win_all	O
,	O
mav_class_world	O
,	O
Keyboard_Function	(*(int),*(int))->(int)
)	O
;	O
mav_paletteLightingModelSet	()->(int)
(	O
mav_palette_default	O
,	O
0.4	int
,	O
0.4	int
,	O
0.4	int
,	O
1.0	int
,	O
MAV_TRUE	O
)	O
;	O
mav_paletteLightSet	()->(int)
(	O
mav_palette_default	O
,	O
1	int
,	O
0.0	int
,	O
0.0	int
,	O
0.0	int
,	O
0.0	int
,	O
1.0	int
,	O
1.0	int
,	O
1.0	int
,	O
1.0	int
,	O
1.0	int
,	O
1.0	int
,	O
1.0	int
,	O
1.0	int
)	O
;	O
vp	O
.	O
eye	O
.	O
x	O
=	O
0.5	int
*	O
(	O
city_bb	int
.	O
min	O
.	O
x	O
+	O
city_bb	int
.	O
max	O
.	O
x	O
)	O
;	O
vp	O
.	O
eye	O
.	O
y	O
=	O
0.5	int
*	O
(	O
city_bb	int
.	O
min	O
.	O
y	O
+	O
city_bb	int
.	O
max	O
.	O
y	O
)	O
+	O
50.0	int
;	O
vp	O
.	O
eye	O
.	O
z	O
=	O
0.5	int
*	O
(	O
city_bb	int
.	O
min	O
.	O
z	O
+	O
city_bb	int
.	O
max	O
.	O
z	O
)	O
;	O
vp	O
.	O
view	O
.	O
x	O
=	O
0.0	int
;	O
vp	O
.	O
view	O
.	O
y	O
=	O
0.0	int
;	O
vp	O
.	O
view	O
.	O
z	O
=	O
1.0	int
;	O
vp	O
.	O
up	O
.	O
x	O
=	O
0	int
;	O
vp	O
.	O
up	O
.	O
y	O
=	O
1	int
;	O
vp	O
.	O
up	O
.	O
z	O
=	O
0	int
;	O
vp	O
.	O
fixed_up	O
=	O
vp	O
.	O
up	O
;	O
vp	O
.	O
mod	O
=	O
NULL	O
;	O
mav_windowViewParamsSet	()->(int)
(	O
mav_win_all	O
,	O
&	O
vp	O
)	O
;	O
mav_windowFogSet	()->(int)
(	O
mav_win_all	O
,	O
MAV_FOG_LINEAR	O
,	O
1.0	int
,	O
fog_distance	float
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
)	O
;	O
fprintf	()->(int)
(	O
stderr	O
,	O
"*** press h for controls ***\n"	*(char)
)	O
;	O
while	O
(	O
1	int
)	O
{	O
if	O
(	O
mav_eventsCheck	()->(int)
(	O
)	O
||	O
mav_needFrameDraw	O
)	O
{	O
mav_frameBegin	()->(int)
(	O
)	O
;	O
mav_SMSDisplay	()->(int)
(	O
mav_win_all	O
,	O
city_sms	*(int)
)	O
;	O
mav_frameEnd	()->(int)
(	O
)	O
;	O
}	O
else	O
{	O
mav_sleep	()->(int)
(	O
0.01	int
)	O
;	O
}	O
}	O
}	O
