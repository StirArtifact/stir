struct	O
top	struct(*(struct(*(char),*(char),*(char),*(()->(void)))),struct(*(char),bool,bool,bool,bool,bool,bool,bool,int,bool,int,int,bool,bool,bool,int,*(char),struct(bool,long),*(char),long,bool,bool,*(char),long,*(struct(*(char),enum(int,int,int))),*(struct),*(struct),*(struct)),struct(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),struct(bool,*(char),*(char),*(char),*(char),*(char))),struct(*(char),int,struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(struct(*(char),*(char),long,*(struct),long,*(struct),long,*(struct),bool,*(struct),*(struct),int,long,*(struct),*(struct),long,*(struct),*(struct))),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)),struct(*(char),long)),struct(*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char),bool))
*	O
top	struct(*(struct(*(char),*(char),*(char),*(()->(void)))),struct(*(char),bool,bool,bool,bool,bool,bool,bool,int,bool,int,int,bool,bool,bool,int,*(char),struct(bool,long),*(char),long,bool,bool,*(char),long,*(struct(*(char),enum(int,int,int))),*(struct),*(struct),*(struct)),struct(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),struct(bool,*(char),*(char),*(char),*(char),*(char))),struct(*(char),int,struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(struct(*(char),*(char),long,*(struct),long,*(struct),long,*(struct),bool,*(struct),*(struct),int,long,*(struct),*(struct),long,*(struct),*(struct))),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)),struct(*(char),long)),struct(*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char),bool))
;	O
static	O
struct	O
fro	struct(int,long,enum(int,int,int),*(char),*(char),*(char),*((*(struct(int,long,enum(int,int,int),*(char),*(char),*(char),*((*`)->(void)),*(struct`),long)))->(void)),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char))),long)
*	O
workptr	*(struct(int,long,enum(int,int,int),*(char),*(char),*(char),*((*(struct`))->(void)),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),long))
;	O
static	O
int	O
exitstatus	int
;	O
static	O
void	O
cleanup	()->(void)
(	O
void	O
)	O
{	O
if	O
(	O
FLOW	O
(	O
erroneousp	bool
)	O
)	O
exitstatus	int
=	O
EXIT_FAILURE	int
;	O
fro_zclose	(*(*(struct(int,long,enum(int,int,int),*(char),*(char),*(char),*((*`)->(void)),*(struct`),long))))->(void)
(	O
&	O
FLOW	O
(	O
from	*(struct)
)	O
)	O
;	O
fro_zclose	(*(*(struct(int,long,enum(int,int,int),*(char),*(char),*(char),*((*`)->(void)),*(struct`),long))))->(void)
(	O
&	O
workptr	*(struct(int,long,enum(int,int,int),*(char),*(char),*(char),*((*(struct`))->(void)),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),long))
)	O
;	O
Ozclose	(*(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char)))))->(void)
(	O
&	O
FLOW	O
(	O
res	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
)	O
;	O
ORCSclose	()->(void)
(	O
)	O
;	O
dirtempunlink	()->(void)
(	O
)	O
;	O
}	O
static	O
exiting	O
void	O
exiterr	*(()->(void))
(	O
void	O
)	O
{	O
ORCSerror	()->(void)
(	O
)	O
;	O
dirtempunlink	()->(void)
(	O
)	O
;	O
tempunlink	()->(void)
(	O
)	O
;	O
exit_failurefully	()->(void)
(	O
)	O
;	O
}	O
static	O
bool	bool
unlock	(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*`,long,array(long))),*(struct(long,long,long,*`,long,array(long))),*(char),struct(*(char),long),*(struct(*`,*`)),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)))->(bool)
(	O
struct	O
delta	struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long)),bool,long)
*	O
delta	struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long)),bool,long)
)	O
{	O
struct	O
link	struct(*(void),*(struct(*(void),*(struct(*(void),*(struct`))))))
box	*(struct(*(void),*(struct(*(void),*(struct`)))))
,	O
*	O
tp	*(struct(*(void),*(struct(*(void),*(struct`)))))
;	O
if	O
(	O
delta	struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long)),bool,long)
&&	O
delta	struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long)),bool,long)
->	O
lockedby	*(char)
&&	O
caller_login_p	(*(char))->(bool)
(	O
delta	struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long)),bool,long)
->	O
lockedby	*(char)
)	O
&&	O
(	O
box	*(struct(*(void),*(struct(*(void),*(struct`)))))
.	O
next	*(struct(*(void),*(struct(*(void),*(struct`)))))
=	O
GROK	O
(	O
locks	*(struct)
)	O
)	O
&&	O
(	O
tp	*(struct(*(void),*(struct(*(void),*(struct`)))))
=	O
lock_delta_memq	O
(	O
&	O
box	*(struct(*(void),*(struct(*(void),*(struct`)))))
,	O
delta	struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long)),bool,long)
)	O
)	O
)	O
{	O
lock_drop	(*(struct(*(void),*(struct(*`,*`)))),*(struct(*(void),*(struct(*`,*`)))))->(void)
(	O
&	O
box	*(struct(*(void),*(struct(*(void),*(struct`)))))
,	O
tp	*(struct(*(void),*(struct(*(void),*(struct`)))))
)	O
;	O
return	O
true	int
;	O
}	O
return	O
false	int
;	O
}	O
static	O
int	O
get_directory	(*(char),*(*(*(char))))->(int)
(	O
char	O
const	O
*	O
dirname	*(char)
,	O
char	O
*	O
*	O
*	O
aargv	*(*(*(char)))
)	O
{	O
DIR	struct
*	O
d	*(struct)
;	O
struct	O
dirent	struct(long,long,short,char,array(char))
*	O
e	*(char)
;	O
struct	O
divvy	struct(*(char),*(struct),*(void),long)
*	O
justme	*(struct(*(char),*(struct),*(void),long))
=	O
make_space	(array(char))->(*(struct(*(char),*(struct),*(void),long)))
(	O
"justme"	*(char)
)	O
;	O
size_t	long
i	int
,	O
entries	long
=	O
0	int
;	O
struct	O
wlink	struct(*(void),*(struct(*(void),*(struct(*(void),*(struct`))))))
head	*(char)
,	O
*	O
tp	*(struct(*(void),*(struct(*(void),*(struct`)))))
;	O
if	O
(	O
!	O
(	O
d	*(struct)
=	O
opendir	(*(char))->(*(struct))
(	O
dirname	*(char)
)	O
)	O
)	O
fatal_sys	(*(char))->(void)
(	O
dirname	*(char)
)	O
;	O
head	*(char)
.	O
next	*(struct(*(void),*(struct(*(void),*(struct`)))))
=	O
NULL	O
;	O
tp	*(struct(*(void),*(struct(*(void),*(struct`)))))
=	O
&	O
head	*(char)
;	O
while	O
(	O
(	O
errno	O
=	O
0	int
,	O
e	*(char)
=	O
readdir	(*(struct))->(*(struct(long,long,short,char,array(char))))
(	O
d	*(struct)
)	O
)	O
)	O
{	O
char	O
const	O
*	O
en	*(char)
=	O
e	*(char)
->	O
d_name	array(char)
;	O
if	O
(	O
en	*(char)
[	O
0	int
]	O
==	O
'.'	O
&&	O
(	O
!	O
en	*(char)
[	O
1	int
]	O
||	O
(	O
en	*(char)
[	O
1	int
]	O
==	O
'.'	O
&&	O
!	O
en	*(char)
[	O
2	int
]	O
)	O
)	O
)	O
continue	O
;	O
if	O
(	O
rcssuffix	(*(char))->(*(char))
(	O
en	*(char)
)	O
)	O
continue	O
;	O
tp	*(struct(*(void),*(struct(*(void),*(struct`)))))
=	O
wextend	(*(struct(*(void),*(struct(*`,*`)))),*(void),*(struct(*(char),*(struct),*(void),long)))->(*(struct(*(void),*(struct(*`,*`)))))
(	O
tp	*(struct(*(void),*(struct(*(void),*(struct`)))))
,	O
str_save	(*(char))->(*(char))
(	O
en	*(char)
)	O
,	O
justme	*(struct(*(char),*(struct),*(void),long))
)	O
;	O
entries	long
++	O
;	O
}	O
if	O
(	O
errno	O
||	O
PROB	O
(	O
closedir	(*(struct))->(int)
(	O
d	*(struct)
)	O
)	O
)	O
fatal_sys	(*(char))->(void)
(	O
dirname	*(char)
)	O
;	O
*	O
aargv	*(*(*(char)))
=	O
pointer_array	(*(struct(*(char),*(struct),*(void),long)),long)->(*(void))
(	O
PLEXUS	O
,	O
entries	long
)	O
;	O
for	O
(	O
tp	*(struct(*(void),*(struct(*(void),*(struct`)))))
=	O
head	*(char)
.	O
next	*(struct(*(void),*(struct(*(void),*(struct`)))))
,	O
i	int
=	O
0	int
;	O
i	int
<	O
entries	long
;	O
tp	*(struct(*(void),*(struct(*(void),*(struct`)))))
=	O
tp	*(struct(*(void),*(struct(*(void),*(struct`)))))
->	O
next	*(struct(*(void),*(struct(*(void),*(struct`)))))
,	O
i	int
++	O
)	O
(	O
*	O
aargv	*(*(*(char)))
)	O
[	O
i	int
]	O
=	O
tp	*(struct(*(void),*(struct(*(void),*(struct`)))))
->	O
entry	*(void)
;	O
close_space	(*(struct(*(char),*(struct),*(void),long)))->(void)
(	O
justme	*(struct(*(char),*(struct),*(void),long))
)	O
;	O
return	O
entries	long
;	O
}	O
int	O
main	(int,*(*(char)))->(int)
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	*(*(char))
)	O
{	O
char	O
*	O
a	*(char)
,	O
*	O
*	O
newargv	*(*(*(char)))
;	O
char	O
const	O
*	O
rev	*(char)
,	O
*	O
p	*(char)
;	O
bool	bool
dounlock	bool
,	O
perform	bool
,	O
unlocked	bool
,	O
unlockflag	bool
,	O
waslocked	bool
,	O
Ttimeflag	bool
;	O
int	O
expmode	int
;	O
struct	O
wlink	struct(*(void),*(struct(*(void),*(struct(*(void),*(struct`))))))
*	O
deltas	*(struct)
;	O
struct	O
delta	struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long)),bool,long)
*	O
delta	struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long)),bool,long)
;	O
struct	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
workstat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
;	O
const	O
struct	O
program	struct(*(char),*(char),*(char),*(()->(void)))
program	struct(*(char),*(char),*(char),*(()->(void)))
=	O
{	O
.	O
invoke	*(char)
=	O
argv	*(*(char))
[	O
0	int
]	O
,	O
.	O
name	*(char)
=	O
"rcsclean"	*(char)
,	O
.	O
help	*(char)
=	O
help	*(char)
,	O
.	O
exiterr	*(()->(void))
=	O
exiterr	*(()->(void))
}	O
;	O
CHECK_HV	O
(	O
)	O
;	O
gnurcs_init	(*(struct(*(char),*(char),*(char),*(()->(void)))))->(void)
(	O
&	O
program	struct(*(char),*(char),*(char),*(()->(void)))
)	O
;	O
setrid	()->(void)
(	O
)	O
;	O
expmode	int
=	O
-	O
1	int
;	O
rev	*(char)
=	O
NULL	O
;	O
BE	O
(	O
pe	*(char)
)	O
=	O
X_DEFAULT	*(char)
;	O
perform	bool
=	O
true	int
;	O
unlockflag	bool
=	O
false	int
;	O
Ttimeflag	bool
=	O
false	int
;	O
argc	int
=	O
getRCSINIT	(int,*(*(char)),*(*(*(char))))->(int)
(	O
argc	int
,	O
argv	*(*(char))
,	O
&	O
newargv	*(*(*(char)))
)	O
;	O
argv	*(*(char))
=	O
newargv	*(*(*(char)))
;	O
for	O
(	O
;	O
;	O
)	O
{	O
if	O
(	O
--	O
argc	int
<	O
1	int
)	O
{	O
argc	int
=	O
get_directory	(*(char),*(*(*(char))))->(int)
(	O
"."	*(char)
,	O
&	O
newargv	*(*(*(char)))
)	O
;	O
argv	*(*(char))
=	O
newargv	*(*(*(char)))
;	O
break	O
;	O
}	O
a	*(char)
=	O
*	O
++	O
argv	*(*(char))
;	O
if	O
(	O
!	O
*	O
a	*(char)
||	O
*	O
a	*(char)
++	O
!=	O
'-'	O
)	O
break	O
;	O
switch	O
(	O
*	O
a	*(char)
++	O
)	O
{	O
case	O
'k'	O
:	O
if	O
(	O
0	int
<=	O
expmode	int
)	O
redefined	(int)->(void)
(	O
'k'	O
)	O
;	O
if	O
(	O
PROB	O
(	O
expmode	int
=	O
str2expmode	(*(char))->(int)
(	O
a	*(char)
)	O
)	O
)	O
goto	O
unknown	O
;	O
break	O
;	O
case	O
'n'	O
:	O
perform	bool
=	O
false	int
;	O
goto	O
handle_revision	O
;	O
case	O
'q'	O
:	O
BE	O
(	O
quiet	bool
)	O
=	O
true	int
;	O
case	O
'r'	O
:	O
handle_revision	O
:	O
if	O
(	O
*	O
a	*(char)
)	O
{	O
if	O
(	O
rev	*(char)
)	O
PWARN	O
(	O
"redefinition of %s"	*(char)
,	O
ks_revno	array(char)
)	O
;	O
rev	*(char)
=	O
a	*(char)
;	O
}	O
break	O
;	O
case	O
'T'	O
:	O
if	O
(	O
*	O
a	*(char)
)	O
goto	O
unknown	O
;	O
Ttimeflag	bool
=	O
true	int
;	O
break	O
;	O
case	O
'u'	O
:	O
unlockflag	bool
=	O
true	int
;	O
goto	O
handle_revision	O
;	O
case	O
'V'	O
:	O
setRCSversion	(*(char))->(void)
(	O
*	O
argv	*(*(char))
)	O
;	O
break	O
;	O
case	O
'x'	O
:	O
BE	O
(	O
pe	*(char)
)	O
=	O
a	*(char)
;	O
break	O
;	O
case	O
'z'	O
:	O
zone_set	(*(char))->(void)
(	O
a	*(char)
)	O
;	O
break	O
;	O
default	O
:	O
unknown	O
:	O
bad_option	(*(char))->(void)
(	O
*	O
argv	*(*(char))
)	O
;	O
}	O
}	O
dounlock	bool
=	O
perform	bool
&	O
unlockflag	bool
;	O
if	O
(	O
FLOW	O
(	O
erroneousp	bool
)	O
)	O
cleanup	()->(void)
(	O
)	O
;	O
else	O
for	O
(	O
;	O
0	int
<	O
argc	int
;	O
cleanup	()->(void)
(	O
)	O
,	O
++	O
argv	*(*(char))
,	O
--	O
argc	int
)	O
{	O
struct	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
*	O
repo_stat	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
;	O
char	O
const	O
*	O
mani_filename	*(char)
;	O
ffree	()->(void)
(	O
)	O
;	O
if	O
(	O
!	O
(	O
0	int
<	O
pairnames	(int,*(*(char)),*((*(struct(*`,bool,struct`,*`,struct`,*`,int)))->(*(struct))),bool,bool)->(int)
(	O
argc	int
,	O
argv	*(*(char))
,	O
dounlock	bool
?	O
rcswriteopen	(*(struct(*((*`)->(*`)),bool,struct(*(char),long),*(struct),struct(*(char),long),*(struct(long,long,long,int,int,int,int,long,long,long,long,struct`,struct`,struct`,array(long))),int)))->(*(struct))
:	O
rcsreadopen	(*(struct(*((*`)->(*`)),bool,struct(*(char),long),*(struct),struct(*(char),long),*(struct(long,long,long,int,int,int,int,long,long,long,long,struct`,struct`,struct`,array(long))),int)))->(*(struct))
,	O
true	int
,	O
true	int
)	O
&&	O
(	O
mani_filename	*(char)
=	O
MANI	O
(	O
filename	*(char)
)	O
)	O
&&	O
(	O
workptr	*(struct(int,long,enum(int,int,int),*(char),*(char),*(char),*((*(struct`))->(void)),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),long))
=	O
fro_open	(*(char),*(char),*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))))->(*(struct(int,long,enum(int,int,int),*(char),*(char),*(char),*((*`)->(void)),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),long)))
(	O
mani_filename	*(char)
,	O
FOPEN_R_WORK	*(char)
,	O
&	O
workstat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
)	O
)	O
)	O
)	O
continue	O
;	O
repo_stat	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
=	O
&	O
REPO	O
(	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
)	O
;	O
if	O
(	O
SAME_INODE	O
(	O
REPO	O
(	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
)	O
,	O
workstat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
)	O
)	O
{	O
RERR	O
(	O
"RCS file is the same as working file %s."	*(char)
,	O
mani_filename	*(char)
)	O
;	O
continue	O
;	O
}	O
p	*(char)
=	O
NULL	O
;	O
if	O
(	O
rev	*(char)
)	O
{	O
struct	O
cbuf	struct(*(char),long)
numeric	struct(*(char),long)
;	O
if	O
(	O
!	O
fully_numeric	(*(struct(*(char),long)),*(char),*(struct))->(bool)
(	O
&	O
numeric	struct(*(char),long)
,	O
rev	*(char)
,	O
workptr	*(struct(int,long,enum(int,int,int),*(char),*(char),*(char),*((*(struct`))->(void)),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),long))
)	O
)	O
continue	O
;	O
p	*(char)
=	O
numeric	struct(*(char),long)
.	O
string	*(char)
;	O
}	O
else	O
if	O
(	O
REPO	O
(	O
tip	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
)	O
)	O
switch	O
(	O
unlockflag	bool
?	O
findlock	(bool,*(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long))))->(int)
(	O
false	int
,	O
&	O
delta	struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long)),bool,long)
)	O
:	O
0	int
)	O
{	O
default	O
:	O
continue	O
;	O
case	O
0	int
:	O
p	*(char)
=	O
GROK	O
(	O
branch	*(char)
)	O
?	O
GROK	O
(	O
branch	*(char)
)	O
:	O
""	*(char)
;	O
break	O
;	O
case	O
1	int
:	O
p	*(char)
=	O
delta	struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long)),bool,long)
->	O
num	*(char)
;	O
break	O
;	O
}	O
delta	struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long)),bool,long)
=	O
NULL	O
;	O
deltas	*(struct)
=	O
NULL	O
;	O
if	O
(	O
p	*(char)
&&	O
!	O
(	O
delta	struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long)),bool,long)
=	O
gr_revno	(*(char),*(*(struct)))->(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)))
(	O
p	*(char)
,	O
&	O
deltas	*(struct)
)	O
)	O
)	O
continue	O
;	O
waslocked	bool
=	O
delta	struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long)),bool,long)
&&	O
delta	struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long)),bool,long)
->	O
lockedby	*(char)
;	O
BE	O
(	O
inclusive_of_Locker_in_Id_val	bool
)	O
=	O
unlock	(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*`,long,array(long))),*(struct(long,long,long,*`,long,array(long))),*(char),struct(*(char),long),*(struct(*`,*`)),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)))->(bool)
(	O
delta	struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long)),bool,long)
)	O
;	O
unlocked	bool
=	O
BE	O
(	O
inclusive_of_Locker_in_Id_val	bool
)	O
&	O
unlockflag	bool
;	O
if	O
(	O
unlocked	bool
<	O
waslocked	bool
&&	O
workstat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_mode	int
&	O
(	O
S_IWUSR	O
|	O
S_IWGRP	O
|	O
S_IWOTH	O
)	O
)	O
continue	O
;	O
if	O
(	O
unlocked	bool
&&	O
!	O
checkaccesslist	()->(bool)
(	O
)	O
)	O
continue	O
;	O
if	O
(	O
PROB	O
(	O
dorewrite	(bool,int)->(int)
(	O
dounlock	bool
,	O
unlocked	bool
)	O
)	O
)	O
continue	O
;	O
if	O
(	O
0	int
<=	O
expmode	int
)	O
BE	O
(	O
kws	int
)	O
=	O
expmode	int
;	O
else	O
if	O
(	O
waslocked	bool
&&	O
BE	O
(	O
kws	int
)	O
==	O
kwsub_kv	int
&&	O
WORKMODE	O
(	O
repo_stat	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
->	O
st_mode	int
,	O
true	int
)	O
==	O
workstat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_mode	int
)	O
BE	O
(	O
kws	int
)	O
=	O
kwsub_kvl	int
;	O
write_desc_maybe	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(void)
(	O
FLOW	O
(	O
to	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
)	O
;	O
if	O
(	O
!	O
delta	struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long)),bool,long)
?	O
workstat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_size	long
!=	O
0	int
:	O
0	int
<	O
rcsfcmp	(*(struct),*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)))->(int)
(	O
workptr	*(struct(int,long,enum(int,int,int),*(char),*(char),*(char),*((*(struct`))->(void)),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),long))
,	O
&	O
workstat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
,	O
buildrevision	(*(struct),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),bool)->(*(char))
(	O
deltas	*(struct)
,	O
delta	struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long)),bool,long)
,	O
NULL	O
,	O
false	int
)	O
,	O
delta	struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long)),bool,long)
)	O
)	O
continue	O
;	O
if	O
(	O
BE	O
(	O
quiet	bool
)	O
<	O
unlocked	bool
)	O
aprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(void)
(	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"rcs -u%s %s\n"	*(char)
,	O
delta	struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long)),bool,long)
->	O
num	*(char)
,	O
REPO	O
(	O
filename	*(char)
)	O
)	O
;	O
if	O
(	O
perform	bool
&	O
unlocked	bool
)	O
{	O
struct	O
fro	struct(int,long,enum(int,int,int),*(char),*(char),*(char),*((*(struct(int,long,enum(int,int,int),*(char),*(char),*(char),*((*`)->(void)),*(struct`),long)))->(void)),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char))),long)
*	O
from	*(struct)
=	O
FLOW	O
(	O
from	*(struct)
)	O
;	O
SAME_AFTER	O
(	O
from	*(struct)
,	O
delta	struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long)),bool,long)
->	O
text	*(struct)
)	O
;	O
if	O
(	O
deltas	*(struct)
->	O
entry	*(void)
!=	O
delta	struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long)),bool,long)
)	O
fro_trundling	(bool,*(struct(int,long,enum(int,int,int),*(char),*(char),*(char),*((*`)->(void)),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),long)))->(void)
(	O
true	int
,	O
from	*(struct)
)	O
;	O
if	O
(	O
PROB	O
(	O
donerewrite	(int,long)->(int)
(	O
true	int
,	O
Ttimeflag	bool
?	O
repo_stat	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
->	O
st_mtime	O
:	O
(	O
time_t	long
)	O
-	O
1	int
)	O
)	O
)	O
continue	O
;	O
}	O
if	O
(	O
!	O
BE	O
(	O
quiet	bool
)	O
)	O
aprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(void)
(	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"rm -f %s\n"	*(char)
,	O
mani_filename	*(char)
)	O
;	O
fro_zclose	(*(*(struct(int,long,enum(int,int,int),*(char),*(char),*(char),*((*`)->(void)),*(struct`),long))))->(void)
(	O
&	O
workptr	*(struct(int,long,enum(int,int,int),*(char),*(char),*(char),*((*(struct`))->(void)),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),long))
)	O
;	O
if	O
(	O
perform	bool
&&	O
PROB	O
(	O
un_link	(*(char))->(int)
(	O
mani_filename	*(char)
)	O
)	O
)	O
syserror_errno	O
(	O
mani_filename	*(char)
)	O
;	O
}	O
tempunlink	()->(void)
(	O
)	O
;	O
if	O
(	O
!	O
BE	O
(	O
quiet	bool
)	O
)	O
fclose	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
gnurcs_goodbye	()->(void)
(	O
)	O
;	O
return	O
exitstatus	int
;	O
}	O
