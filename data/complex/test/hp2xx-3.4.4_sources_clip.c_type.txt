static	O
short	O
ClipAreaCode	(double,double,double,double,double,double)->(short)
(	O
double	O
x1	*(double)
,	O
double	O
y1	(double)->(double)
,	O
double	O
x2	*(double)
,	O
double	O
y2	*(double)
,	O
double	O
px	double
,	O
double	O
py	double
)	O
{	O
short	O
code	short
=	O
CLIP_INSIDE	int
;	O
if	O
(	O
px	double
<	O
x1	*(double)
-	O
1.e-3	int
)	O
code	short
|=	O
CLIP_LEFT	int
;	O
else	O
if	O
(	O
px	double
>	O
x2	*(double)
+	O
1.e-3	int
)	O
code	short
|=	O
CLIP_RIGHT	int
;	O
if	O
(	O
py	double
<	O
y1	(double)->(double)
-	O
1.e-3	int
)	O
code	short
|=	O
CLIP_BELOW	int
;	O
else	O
if	O
(	O
py	double
>	O
y2	*(double)
+	O
1.e-3	int
)	O
code	short
|=	O
CLIP_ABOVE	int
;	O
return	O
code	short
;	O
}	O
static	O
int	O
ClipWithBorder	(double,double,*(double),*(double))->(int)
(	O
double	O
delta	double
,	O
double	O
diff	double
,	O
double	O
*	O
tEnter	*(double)
,	O
double	O
*	O
tLeave	*(double)
)	O
{	O
double	O
t	double
;	O
t	double
=	O
diff	double
/	O
delta	double
;	O
if	O
(	O
fabs	(double)->(double)
(	O
t	double
)	O
<	O
1.e-5	int
)	O
return	O
0	int
;	O
if	O
(	O
delta	double
<	O
0.0	int
)	O
{	O
if	O
(	O
t	double
>	O
*	O
tLeave	*(double)
)	O
return	O
0	int
;	O
else	O
if	O
(	O
t	double
>	O
*	O
tEnter	*(double)
)	O
*	O
tEnter	*(double)
=	O
t	double
;	O
}	O
else	O
{	O
if	O
(	O
t	double
<	O
*	O
tEnter	*(double)
)	O
return	O
0	int
;	O
else	O
if	O
(	O
t	double
<	O
*	O
tLeave	*(double)
)	O
*	O
tLeave	*(double)
=	O
t	double
;	O
}	O
return	O
1	int
;	O
}	O
short	O
DtClipLine	(double,double,double,double,*(double),*(double),*(double),*(double))->(short)
(	O
double	O
xmin	double
,	O
double	O
ymin	double
,	O
double	O
xmax	double
,	O
double	O
ymax	double
,	O
double	O
*	O
x1	*(double)
,	O
double	O
*	O
y1	(double)->(double)
,	O
double	O
*	O
x2	*(double)
,	O
double	O
*	O
y2	*(double)
)	O
{	O
short	O
area_code1	short
,	O
area_code2	short
;	O
double	O
eps	double
;	O
eps	double
=	O
1.e-10	int
;	O
area_code1	short
=	O
ClipAreaCode	(double,double,double,double,double,double)->(short)
(	O
xmin	double
,	O
ymin	double
,	O
xmax	double
,	O
ymax	double
,	O
*	O
x1	*(double)
,	O
*	O
y1	(double)->(double)
)	O
;	O
area_code2	short
=	O
ClipAreaCode	(double,double,double,double,double,double)->(short)
(	O
xmin	double
,	O
ymin	double
,	O
xmax	double
,	O
ymax	double
,	O
*	O
x2	*(double)
,	O
*	O
y2	*(double)
)	O
;	O
if	O
(	O
ClipFullyInside	O
(	O
area_code1	short
,	O
area_code2	short
)	O
)	O
return	O
CLIP_DRAW	int
;	O
if	O
(	O
ClipSurelyOutside	O
(	O
area_code1	short
,	O
area_code2	short
)	O
)	O
{	O
return	O
CLIP_NODRAW	int
;	O
}	O
else	O
{	O
double	O
dx	double
,	O
dy	double
;	O
int	O
dx0	int
,	O
dy0	int
;	O
double	O
tEnter	*(double)
,	O
tLeave	*(double)
;	O
double	O
*	O
tE	*(double)
=	O
&	O
tEnter	*(double)
;	O
double	O
*	O
tL	*(double)
=	O
&	O
tLeave	*(double)
;	O
dx	double
=	O
*	O
x2	*(double)
-	O
*	O
x1	*(double)
;	O
dy	double
=	O
*	O
y2	*(double)
-	O
*	O
y1	(double)->(double)
;	O
tEnter	*(double)
=	O
0.0	int
;	O
tLeave	*(double)
=	O
1.	int
;	O
dx0	int
=	O
(	O
-	O
eps	double
<	O
dx	double
&&	O
dx	double
<	O
eps	double
)	O
;	O
dy0	int
=	O
(	O
-	O
eps	double
<	O
dy	double
&&	O
dy	double
<	O
eps	double
)	O
;	O
if	O
(	O
dx0	int
||	O
ClipWithBorder	(double,double,*(double),*(double))->(int)
(	O
-	O
dx	double
,	O
-	O
(	O
xmin	double
-	O
*	O
x1	*(double)
)	O
,	O
tE	*(double)
,	O
tL	*(double)
)	O
)	O
if	O
(	O
dy0	int
||	O
ClipWithBorder	(double,double,*(double),*(double))->(int)
(	O
dy	double
,	O
(	O
ymax	double
-	O
*	O
y1	(double)->(double)
)	O
,	O
tE	*(double)
,	O
tL	*(double)
)	O
)	O
if	O
(	O
dx0	int
||	O
ClipWithBorder	(double,double,*(double),*(double))->(int)
(	O
dx	double
,	O
(	O
xmax	double
-	O
*	O
x1	*(double)
)	O
,	O
tE	*(double)
,	O
tL	*(double)
)	O
)	O
if	O
(	O
dy0	int
||	O
ClipWithBorder	(double,double,*(double),*(double))->(int)
(	O
-	O
dy	double
,	O
-	O
(	O
ymin	double
-	O
*	O
y1	(double)->(double)
)	O
,	O
tE	*(double)
,	O
tL	*(double)
)	O
)	O
{	O
*	O
x2	*(double)
=	O
*	O
x1	*(double)
+	O
(	O
tLeave	*(double)
*	O
dx	double
)	O
;	O
*	O
y2	*(double)
=	O
*	O
y1	(double)->(double)
+	O
(	O
tLeave	*(double)
*	O
dy	double
)	O
;	O
*	O
x1	*(double)
=	O
*	O
x1	*(double)
+	O
(	O
tEnter	*(double)
*	O
dx	double
)	O
;	O
*	O
y1	(double)->(double)
=	O
*	O
y1	(double)->(double)
+	O
(	O
tEnter	*(double)
*	O
dy	double
)	O
;	O
return	O
CLIP_DRAW	int
;	O
}	O
}	O
return	O
CLIP_NODRAW	int
;	O
}	O
