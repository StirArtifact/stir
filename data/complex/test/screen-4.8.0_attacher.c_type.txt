static	O
int	O
WriteMessage	(int,*(struct(int,int,array(char),union(struct(int,int,int,int,int,array(char),array(char),array(char)),struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int),struct(array(char),int),struct(array(char),int,array(char),int,array(char),array(char)),array(char)))))->(int)
__P	O
(	O
(	O
int	O
,	O
struct	O
msg	struct(int,int,array(char),union(struct(int,int,int,int,int,array(char),array(char),array(char)),struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int),struct(array(char),int),struct(array(char),int,array(char),int,array(char),array(char)),array(char)))
*	O
)	O
)	O
;	O
static	O
sigret_t	void
AttacherSigInt	(int)->(void)
__P	O
(	O
SIGPROTOARG	O
)	O
;	O
static	O
sigret_t	void
AttacherWinch	(int)->(void)
__P	O
(	O
SIGPROTOARG	O
)	O
;	O
static	O
sigret_t	void
DoLock	(int)->(void)
__P	O
(	O
SIGPROTOARG	O
)	O
;	O
static	O
void	O
LockTerminal	()->(void)
__P	O
(	O
(	O
void	O
)	O
)	O
;	O
static	O
sigret_t	void
LockHup	(int)->(void)
__P	O
(	O
SIGPROTOARG	O
)	O
;	O
static	O
void	O
screen_builtin_lck	()->(void)
__P	O
(	O
(	O
void	O
)	O
)	O
;	O
static	O
sigret_t	void
AttachSigCont	(int)->(void)
__P	O
(	O
SIGPROTOARG	O
)	O
;	O
extern	O
int	O
real_uid	int
,	O
real_gid	int
,	O
eff_uid	int
,	O
eff_gid	int
;	O
extern	O
int	O
ServerSocket	int
;	O
extern	O
struct	O
display	struct(*(struct(*(struct(*(struct`),*(struct`),struct(*`,*`,*`,*`,*`,*`,int,int,*`,*`,*`,struct`,int,int,int,int,int,int,struct`),*(struct`),*(struct`),*(struct`),*((*`,int)->(void)),*(char),int,int,*(struct`),*(struct`),int,array(char),*(char),char,int,int,int,int,int,int,int,int,struct(char,char,char,char,char,char),int,char,int,int,int,int,int,int,int,int,int,int,int,int,int,int,struct(char,char,array(int)),int,struct(char,char,char,char,char,char),struct(long,long),int,char,int,*(char),int,int,int,int,int,int,struct(*`,*`,*`,int,int,int,struct`,int,int,*`,*`),struct(*`,*`,*`,int,int,int,struct`,int,int,*`,*`),int,*(struct`),int,array(char),int,struct(*`,*`,*`,int,int,int,struct`,int,int,*`,*`),struct(*`,*`,*`,int,int,int,struct`,int,int,*`,*`),struct(*`,*`,*`,int,int,int,struct`,int,int,*`,*`),struct(struct`),struct(struct`),int,int,*(char),int,int,int,*(char),int,int,int,int,*(char),*(char),int,*(char),struct(*`,*`,*`,int,int,int,struct`,int,int,*`,*`),int,int,array(union(int,int,*(char))),array(*(char)),array(char),int,short,array(char),*(*`),int,int,int,int,int,int,int,int,int,*(char),struct(short,int,array(char),array(char),array(char),array(char),struct`,int,struct`,array(int),array(char)),int,int,int,struct(*`,*`,*`,int,int,int,struct`,int,int,*`,*`),int,struct(*`,*`,*`,int,int,int,struct`,int,int,*`,*`))),*(struct(*(struct`),array(char),*(char),int,int,int,int,int,struct(*`,int,int),int,array(*(char)),*(struct`))),struct(*(struct(*`,*`,*`,*`,*`,*`,int,int,*`,*`,*`,struct`,int,int,int,int,int,int,struct`)),*(struct(*`,*`,struct`,*`,*`,*`,*`,*`,int,int,*`,*`,int,array(char),*`,char,int,int,int,int,int,int,int,int,struct`,int,char,int,int,int,int,int,int,int,int,int,int,int,int,int,int,struct`,int,struct`,struct`,int,char,int,*`,int,int,int,int,int,int,struct`,struct`,int,*`,int,array(char),int,struct`,struct`,struct`,struct`,struct`,int,int,*`,int,int,int,*`,int,int,int,int,*`,*`,int,*`,struct`,int,int,array(union(int,int,*(char))),array(*(char)),array(char),int,short,array(char),*`,int,int,int,int,int,int,int,int,int,*`,struct`,int,int,int,struct`,int,struct`)),*(struct(*`,*`,*`,*`,*`,*`,int,int,*`,*`,*`,struct`,int,int,int,int,int,int,struct`)),*(struct(*`,*`,*`,*`,*`,*`,int,int,*`,*`,*`,struct`,int,int,int,int,int,int,struct`)),*(struct(*`,*`,*`,*`,*`,*`,int,int,*`,*`,*`,struct`,int,int,int,int,int,int,struct`)),*(struct(*`,*`,*`,*`,*`,*`,int,int,*`,*`,*`,struct`,int,int,int,int,int,int,struct`)),int,int,*(struct(*`,*`,int,int,int,int,int,int)),*(struct(*`,int,int,int,int,int,*`,*`,*`,*`,int,int,struct`,struct`)),*(struct(*`,*`,*`,*`,*`,*`,int,int,*`,*`,*`,struct`,int,int,int,int,int,int,struct`)),struct(*(struct`),int,int,int,int,int,*(struct`),*(void),*(struct`),*(struct`),int,int,struct(array(char),int,int),struct(int,*`,*`,int,int,int)),int,int,int,int,int,int,struct(*(struct`),*((*`,*`)->(void)),*(char),int,int,int,struct(long,long),int,int,*(int),*(int))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,int,*(struct`),*(struct`),*(struct`),struct(*`,int,int,int,int,int,*`,*`,*`,*`,int,int,struct`,struct`),int,int,int,int,int,int,struct(*`,*`,*`,int,int,int,struct`,int,int,*`,*`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,int,*(struct`),*(struct`),*(struct`),struct(*`,int,int,int,int,int,*`,*`,*`,*`,int,int,struct`,struct`),int,int,int,int,int,int,struct(*`,*`,*`,int,int,int,struct`,int,int,*`,*`))),*(struct(*(struct`),*(char),int,struct(*`,*`,*`,*`,*`,*`,int,int,*`,*`,*`,struct`,int,int,int,int,int,int,struct`),*(struct`),*(struct`),int)),*((*(char),int)->(void)),*(char),int,int,*(struct),*(struct),int,array(char),*(char),char,int,int,int,int,int,int,int,int,struct(char,char,char,char,char,char),int,char,int,int,int,int,int,int,int,int,int,int,int,int,int,int,struct(char,char,array(int)),int,struct(char,char,char,char,char,char),struct(long,long),int,char,int,*(char),int,int,int,int,int,int,struct(*(struct(*`,*`,*`,int,int,int,struct`,int,int,*`,*`)),*((*`,*`)->(void)),*(char),int,int,int,struct(long,long),int,int,*(int),*(int)),struct(*(struct(*`,*`,*`,int,int,int,struct`,int,int,*`,*`)),*((*`,*`)->(void)),*(char),int,int,int,struct(long,long),int,int,*(int),*(int)),int,*(struct(int,*(*`),*(int),int)),int,array(char),int,struct(*(struct(*`,*`,*`,int,int,int,struct`,int,int,*`,*`)),*((*`,*`)->(void)),*(char),int,int,int,struct(long,long),int,int,*(int),*(int)),struct(*(struct(*`,*`,*`,int,int,int,struct`,int,int,*`,*`)),*((*`,*`)->(void)),*(char),int,int,int,struct(long,long),int,int,*(int),*(int)),struct(*(struct(*`,*`,*`,int,int,int,struct`,int,int,*`,*`)),*((*`,*`)->(void)),*(char),int,int,int,struct(long,long),int,int,*(int),*(int)),struct(struct(int,int,int,int,char,array(char),int,int)),struct(struct(int,int,int,int,char,array(char),int,int)),int,int,*(char),int,int,int,*(char),int,int,int,int,*(char),*(char),int,*(char),struct(*(struct(*`,*`,*`,int,int,int,struct`,int,int,*`,*`)),*((*`,*`)->(void)),*(char),int,int,int,struct(long,long),int,int,*(int),*(int)),int,int,array(union(int,int,*(char))),array(*(char)),array(char),int,short,array(char),*(*(*(char))),int,int,int,int,int,int,int,int,int,*(char),struct(short,int,array(char),array(char),array(char),array(char),struct(short,short),int,struct(int,int),array(int),array(char)),int,int,int,struct(*(struct(*`,*`,*`,int,int,int,struct`,int,int,*`,*`)),*((*`,*`)->(void)),*(char),int,int,int,struct(long,long),int,int,*(int),*(int)),int,struct(*(struct(*`,*`,*`,int,int,int,struct`,int,int,*`,*`)),*((*`,*`)->(void)),*(char),int,int,int,struct(long,long),int,int,*(int),*(int)))),*(struct(*(struct(*(struct`),array(char),*(char),int,int,int,int,int,struct(*`,int,int),int,array(*(char)),*(struct`))),array(char),*(char),int,int,int,int,int,struct(*(char),int,int),int,array(*(char)),*(struct(*(struct`),*(struct`))))),struct(*(struct(*(struct(*`,*`,*`,*`,*`,*`,int,int,*`,*`,*`,struct`,int,int,int,int,int,int,struct`)),*(struct(*`,*`,struct`,*`,*`,*`,*`,*`,int,int,*`,*`,int,array(char),*`,char,int,int,int,int,int,int,int,int,struct`,int,char,int,int,int,int,int,int,int,int,int,int,int,int,int,int,struct`,int,struct`,struct`,int,char,int,*`,int,int,int,int,int,int,struct`,struct`,int,*`,int,array(char),int,struct`,struct`,struct`,struct`,struct`,int,int,*`,int,int,int,*`,int,int,int,int,*`,*`,int,*`,struct`,int,int,array(union(int,int,*(char))),array(*(char)),array(char),int,short,array(char),*`,int,int,int,int,int,int,int,int,int,*`,struct`,int,int,int,struct`,int,struct`)),*(struct(*`,*`,*`,*`,*`,*`,int,int,*`,*`,*`,struct`,int,int,int,int,int,int,struct`)),*(struct(*`,*`,*`,*`,*`,*`,int,int,*`,*`,*`,struct`,int,int,int,int,int,int,struct`)),*(struct(*`,*`,*`,*`,*`,*`,int,int,*`,*`,*`,struct`,int,int,int,int,int,int,struct`)),*(struct(*`,*`,*`,*`,*`,*`,int,int,*`,*`,*`,struct`,int,int,int,int,int,int,struct`)),int,int,*(struct(*`,*`,int,int,int,int,int,int)),*(struct(*`,int,int,int,int,int,*`,*`,*`,*`,int,int,struct`,struct`)),*(struct(*`,*`,*`,*`,*`,*`,int,int,*`,*`,*`,struct`,int,int,int,int,int,int,struct`)),struct(*(struct`),int,int,int,int,int,*(struct`),*(void),*(struct`),*(struct`),int,int,struct(array(char),int,int),struct(int,*`,*`,int,int,int)),int,int,int,int,int,int,struct(*(struct`),*((*`,*`)->(void)),*(char),int,int,int,struct(long,long),int,int,*(int),*(int)))),*(struct(*(struct(*`,*`,struct`,*`,*`,*`,*`,*`,int,int,*`,*`,int,array(char),*`,char,int,int,int,int,int,int,int,int,struct`,int,char,int,int,int,int,int,int,int,int,int,int,int,int,int,int,struct`,int,struct`,struct`,int,char,int,*`,int,int,int,int,int,int,struct`,struct`,int,*`,int,array(char),int,struct`,struct`,struct`,struct`,struct`,int,int,*`,int,int,int,*`,int,int,int,int,*`,*`,int,*`,struct`,int,int,array(union(int,int,*(char))),array(*(char)),array(char),int,short,array(char),*`,int,int,int,int,int,int,int,int,int,*`,struct`,int,int,int,struct`,int,struct`)),*(struct(*`,array(char),*`,int,int,int,int,int,struct`,int,array(*(char)),*`)),struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,int,*(struct`),*(struct`),*(struct`),struct(*`,int,int,int,int,int,*`,*`,*`,*`,int,int,struct`,struct`),int,int,int,int,int,int,struct(*`,*`,*`,int,int,int,struct`,int,int,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,int,int,*`,*`,*`,struct`,int,int,int,int,int,int,struct`)),*(struct(*`,*`,*`,*`,*`,*`,int,int,*`,*`,*`,struct`,int,int,int,int,int,int,struct`)),*(struct(*`,*`,int,struct`,*`,*`,int)),*((*`,int)->(void)),*(char),int,int,*(struct),*(struct),int,array(char),*(char),char,int,int,int,int,int,int,int,int,struct(char,char,char,char,char,char),int,char,int,int,int,int,int,int,int,int,int,int,int,int,int,int,struct(char,char,array(int)),int,struct(char,char,char,char,char,char),struct(long,long),int,char,int,*(char),int,int,int,int,int,int,struct(*(struct`),*((*`,*`)->(void)),*(char),int,int,int,struct(long,long),int,int,*(int),*(int)),struct(*(struct`),*((*`,*`)->(void)),*(char),int,int,int,struct(long,long),int,int,*(int),*(int)),int,*(struct(int,*`,*`,int)),int,array(char),int,struct(*(struct`),*((*`,*`)->(void)),*(char),int,int,int,struct(long,long),int,int,*(int),*(int)),struct(*(struct`),*((*`,*`)->(void)),*(char),int,int,int,struct(long,long),int,int,*(int),*(int)),struct(*(struct`),*((*`,*`)->(void)),*(char),int,int,int,struct(long,long),int,int,*(int),*(int)),struct(struct(int,int,int,int,char,array(char),int,int)),struct(struct(int,int,int,int,char,array(char),int,int)),int,int,*(char),int,int,int,*(char),int,int,int,int,*(char),*(char),int,*(char),struct(*(struct`),*((*`,*`)->(void)),*(char),int,int,int,struct(long,long),int,int,*(int),*(int)),int,int,array(union(int,int,*(char))),array(*(char)),array(char),int,short,array(char),*(*(*`)),int,int,int,int,int,int,int,int,int,*(char),struct(short,int,array(char),array(char),array(char),array(char),struct(short,short),int,struct(int,int),array(int),array(char)),int,int,int,struct(*(struct`),*((*`,*`)->(void)),*(char),int,int,int,struct(long,long),int,int,*(int),*(int)),int,struct(*(struct`),*((*`,*`)->(void)),*(char),int,int,int,struct(long,long),int,int,*(int),*(int)))),*(struct(*(struct(*`,*`,*`,*`,*`,*`,int,int,*`,*`,*`,struct`,int,int,int,int,int,int,struct`)),*(struct(*`,*`,struct`,*`,*`,*`,*`,*`,int,int,*`,*`,int,array(char),*`,char,int,int,int,int,int,int,int,int,struct`,int,char,int,int,int,int,int,int,int,int,int,int,int,int,int,int,struct`,int,struct`,struct`,int,char,int,*`,int,int,int,int,int,int,struct`,struct`,int,*`,int,array(char),int,struct`,struct`,struct`,struct`,struct`,int,int,*`,int,int,int,*`,int,int,int,int,*`,*`,int,*`,struct`,int,int,array(union(int,int,*(char))),array(*(char)),array(char),int,short,array(char),*`,int,int,int,int,int,int,int,int,int,*`,struct`,int,int,int,struct`,int,struct`)),*(struct(*`,*`,*`,*`,*`,*`,int,int,*`,*`,*`,struct`,int,int,int,int,int,int,struct`)),*(struct(*`,*`,*`,*`,*`,*`,int,int,*`,*`,*`,struct`,int,int,int,int,int,int,struct`)),*(struct(*`,*`,*`,*`,*`,*`,int,int,*`,*`,*`,struct`,int,int,int,int,int,int,struct`)),*(struct(*`,*`,*`,*`,*`,*`,int,int,*`,*`,*`,struct`,int,int,int,int,int,int,struct`)),int,int,*(struct(*`,*`,int,int,int,int,int,int)),*(struct(*`,int,int,int,int,int,*`,*`,*`,*`,int,int,struct`,struct`)),*(struct(*`,*`,*`,*`,*`,*`,int,int,*`,*`,*`,struct`,int,int,int,int,int,int,struct`)),struct(*(struct`),int,int,int,int,int,*(struct`),*(void),*(struct`),*(struct`),int,int,struct(array(char),int,int),struct(int,*`,*`,int,int,int)),int,int,int,int,int,int,struct(*(struct`),*((*`,*`)->(void)),*(char),int,int,int,struct(long,long),int,int,*(int),*(int)))),*(struct(*(struct(*`,*`,*`,*`,*`,*`,int,int,*`,*`,*`,struct`,int,int,int,int,int,int,struct`)),*(struct(*`,*`,struct`,*`,*`,*`,*`,*`,int,int,*`,*`,int,array(char),*`,char,int,int,int,int,int,int,int,int,struct`,int,char,int,int,int,int,int,int,int,int,int,int,int,int,int,int,struct`,int,struct`,struct`,int,char,int,*`,int,int,int,int,int,int,struct`,struct`,int,*`,int,array(char),int,struct`,struct`,struct`,struct`,struct`,int,int,*`,int,int,int,*`,int,int,int,int,*`,*`,int,*`,struct`,int,int,array(union(int,int,*(char))),array(*(char)),array(char),int,short,array(char),*`,int,int,int,int,int,int,int,int,int,*`,struct`,int,int,int,struct`,int,struct`)),*(struct(*`,*`,*`,*`,*`,*`,int,int,*`,*`,*`,struct`,int,int,int,int,int,int,struct`)),*(struct(*`,*`,*`,*`,*`,*`,int,int,*`,*`,*`,struct`,int,int,int,int,int,int,struct`)),*(struct(*`,*`,*`,*`,*`,*`,int,int,*`,*`,*`,struct`,int,int,int,int,int,int,struct`)),*(struct(*`,*`,*`,*`,*`,*`,int,int,*`,*`,*`,struct`,int,int,int,int,int,int,struct`)),int,int,*(struct(*`,*`,int,int,int,int,int,int)),*(struct(*`,int,int,int,int,int,*`,*`,*`,*`,int,int,struct`,struct`)),*(struct(*`,*`,*`,*`,*`,*`,int,int,*`,*`,*`,struct`,int,int,int,int,int,int,struct`)),struct(*(struct`),int,int,int,int,int,*(struct`),*(void),*(struct`),*(struct`),int,int,struct(array(char),int,int),struct(int,*`,*`,int,int,int)),int,int,int,int,int,int,struct(*(struct`),*((*`,*`)->(void)),*(char),int,int,int,struct(long,long),int,int,*(int),*(int)))),*(struct(*(struct(*`,*`,*`,*`,*`,*`,int,int,*`,*`,*`,struct`,int,int,int,int,int,int,struct`)),*(struct(*`,*`,struct`,*`,*`,*`,*`,*`,int,int,*`,*`,int,array(char),*`,char,int,int,int,int,int,int,int,int,struct`,int,char,int,int,int,int,int,int,int,int,int,int,int,int,int,int,struct`,int,struct`,struct`,int,char,int,*`,int,int,int,int,int,int,struct`,struct`,int,*`,int,array(char),int,struct`,struct`,struct`,struct`,struct`,int,int,*`,int,int,int,*`,int,int,int,int,*`,*`,int,*`,struct`,int,int,array(union(int,int,*(char))),array(*(char)),array(char),int,short,array(char),*`,int,int,int,int,int,int,int,int,int,*`,struct`,int,int,int,struct`,int,struct`)),*(struct(*`,*`,*`,*`,*`,*`,int,int,*`,*`,*`,struct`,int,int,int,int,int,int,struct`)),*(struct(*`,*`,*`,*`,*`,*`,int,int,*`,*`,*`,struct`,int,int,int,int,int,int,struct`)),*(struct(*`,*`,*`,*`,*`,*`,int,int,*`,*`,*`,struct`,int,int,int,int,int,int,struct`)),*(struct(*`,*`,*`,*`,*`,*`,int,int,*`,*`,*`,struct`,int,int,int,int,int,int,struct`)),int,int,*(struct(*`,*`,int,int,int,int,int,int)),*(struct(*`,int,int,int,int,int,*`,*`,*`,*`,int,int,struct`,struct`)),*(struct(*`,*`,*`,*`,*`,*`,int,int,*`,*`,*`,struct`,int,int,int,int,int,int,struct`)),struct(*(struct`),int,int,int,int,int,*(struct`),*(void),*(struct`),*(struct`),int,int,struct(array(char),int,int),struct(int,*`,*`,int,int,int)),int,int,int,int,int,int,struct(*(struct`),*((*`,*`)->(void)),*(char),int,int,int,struct(long,long),int,int,*(int),*(int)))),*(struct(*(struct(*`,*`,*`,*`,*`,*`,int,int,*`,*`,*`,struct`,int,int,int,int,int,int,struct`)),*(struct(*`,*`,struct`,*`,*`,*`,*`,*`,int,int,*`,*`,int,array(char),*`,char,int,int,int,int,int,int,int,int,struct`,int,char,int,int,int,int,int,int,int,int,int,int,int,int,int,int,struct`,int,struct`,struct`,int,char,int,*`,int,int,int,int,int,int,struct`,struct`,int,*`,int,array(char),int,struct`,struct`,struct`,struct`,struct`,int,int,*`,int,int,int,*`,int,int,int,int,*`,*`,int,*`,struct`,int,int,array(union(int,int,*(char))),array(*(char)),array(char),int,short,array(char),*`,int,int,int,int,int,int,int,int,int,*`,struct`,int,int,int,struct`,int,struct`)),*(struct(*`,*`,*`,*`,*`,*`,int,int,*`,*`,*`,struct`,int,int,int,int,int,int,struct`)),*(struct(*`,*`,*`,*`,*`,*`,int,int,*`,*`,*`,struct`,int,int,int,int,int,int,struct`)),*(struct(*`,*`,*`,*`,*`,*`,int,int,*`,*`,*`,struct`,int,int,int,int,int,int,struct`)),*(struct(*`,*`,*`,*`,*`,*`,int,int,*`,*`,*`,struct`,int,int,int,int,int,int,struct`)),int,int,*(struct(*`,*`,int,int,int,int,int,int)),*(struct(*`,int,int,int,int,int,*`,*`,*`,*`,int,int,struct`,struct`)),*(struct(*`,*`,*`,*`,*`,*`,int,int,*`,*`,*`,struct`,int,int,int,int,int,int,struct`)),struct(*(struct`),int,int,int,int,int,*(struct`),*(void),*(struct`),*(struct`),int,int,struct(array(char),int,int),struct(int,*`,*`,int,int,int)),int,int,int,int,int,int,struct(*(struct`),*((*`,*`)->(void)),*(char),int,int,int,struct(long,long),int,int,*(int),*(int)))),int,int,*(struct(*(struct(*`,*`,int,int,int,int,int,int)),*(struct(*`,*`,*`,*`,*`,*`,int,int,*`,*`,*`,struct`,int,int,int,int,int,int,struct`)),int,int,int,int,int,int)),*(struct(*(struct(*`,*`,*`,*`,*`,*`,int,int,*`,*`,*`,struct`,int,int,int,int,int,int,struct`)),int,int,int,int,int,*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(void),*(struct(*`,int,int,int,int,int,*`,*`,*`,*`,int,int,struct`,struct`)),*(struct(*`,int,int,int,int,int,*`,*`,*`,*`,int,int,struct`,struct`)),int,int,struct(array(char),int,int),struct(int,*(int),*(int),int,int,int))),*(struct(*(struct(*`,*`,*`,*`,*`,*`,int,int,*`,*`,*`,struct`,int,int,int,int,int,int,struct`)),*(struct(*`,*`,struct`,*`,*`,*`,*`,*`,int,int,*`,*`,int,array(char),*`,char,int,int,int,int,int,int,int,int,struct`,int,char,int,int,int,int,int,int,int,int,int,int,int,int,int,int,struct`,int,struct`,struct`,int,char,int,*`,int,int,int,int,int,int,struct`,struct`,int,*`,int,array(char),int,struct`,struct`,struct`,struct`,struct`,int,int,*`,int,int,int,*`,int,int,int,int,*`,*`,int,*`,struct`,int,int,array(union(int,int,*(char))),array(*(char)),array(char),int,short,array(char),*`,int,int,int,int,int,int,int,int,int,*`,struct`,int,int,int,struct`,int,struct`)),*(struct(*`,*`,*`,*`,*`,*`,int,int,*`,*`,*`,struct`,int,int,int,int,int,int,struct`)),*(struct(*`,*`,*`,*`,*`,*`,int,int,*`,*`,*`,struct`,int,int,int,int,int,int,struct`)),*(struct(*`,*`,*`,*`,*`,*`,int,int,*`,*`,*`,struct`,int,int,int,int,int,int,struct`)),*(struct(*`,*`,*`,*`,*`,*`,int,int,*`,*`,*`,struct`,int,int,int,int,int,int,struct`)),int,int,*(struct(*`,*`,int,int,int,int,int,int)),*(struct(*`,int,int,int,int,int,*`,*`,*`,*`,int,int,struct`,struct`)),*(struct(*`,*`,*`,*`,*`,*`,int,int,*`,*`,*`,struct`,int,int,int,int,int,int,struct`)),struct(*(struct`),int,int,int,int,int,*(struct`),*(void),*(struct`),*(struct`),int,int,struct(array(char),int,int),struct(int,*`,*`,int,int,int)),int,int,int,int,int,int,struct(*(struct`),*((*`,*`)->(void)),*(char),int,int,int,struct(long,long),int,int,*(int),*(int)))),struct(*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,int,*(struct`),*(struct`),*(struct`),struct(*`,int,int,int,int,int,*`,*`,*`,*`,int,int,struct`,struct`),int,int,int,int,int,int,struct(*`,*`,*`,int,int,int,struct`,int,int,*`,*`))),int,int,int,int,int,*(struct(*((*`,*`)->(void)),*(()->(void)),*((int,int,int,int)->(void)),*((int,int,int,int)->(void)),*((int,int,int,*`,int)->(int)),*((int,int)->(int)),*(()->(void)),*((*`)->(void)))),*(void),*(struct(*(struct`),int,int,int,int,int,*(struct`),*(void),*(struct`),*(struct`),int,int,struct(array(char),int,int),struct(int,*`,*`,int,int,int))),*(struct(*(struct`),int,int,int,int,int,*(struct`),*(void),*(struct`),*(struct`),int,int,struct(array(char),int,int),struct(int,*`,*`,int,int,int))),int,int,struct(array(char),int,int),struct(int,*(int),*(int),int,int,int)),int,int,int,int,int,int,struct(*(struct(*(struct`),*((*`,*`)->(void)),*(char),int,int,int,struct(long,long),int,int,*(int),*(int))),*((*(struct`),*(char))->(void)),*(char),int,int,int,struct(long,long),int,int,*(int),*(int))),*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,int,*(struct`),*(struct`),*(struct`),struct(*`,int,int,int,int,int,*`,*`,*`,*`,int,int,struct`,struct`),int,int,int,int,int,int,struct(*`,*`,*`,int,int,int,struct`,int,int,*`,*`))),*(struct(*(struct`),*(struct`),struct(*`,*`,*`,*`,*`,*`,int,int,*`,*`,*`,struct`,int,int,int,int,int,int,struct`),*(struct`),*(struct`),*(struct`),*((*`,int)->(void)),*(char),int,int,*(struct`),*(struct`),int,array(char),*(char),char,int,int,int,int,int,int,int,int,struct(char,char,char,char,char,char),int,char,int,int,int,int,int,int,int,int,int,int,int,int,int,int,struct(char,char,array(int)),int,struct(char,char,char,char,char,char),struct(long,long),int,char,int,*(char),int,int,int,int,int,int,struct(*`,*`,*`,int,int,int,struct`,int,int,*`,*`),struct(*`,*`,*`,int,int,int,struct`,int,int,*`,*`),int,*(struct`),int,array(char),int,struct(*`,*`,*`,int,int,int,struct`,int,int,*`,*`),struct(*`,*`,*`,int,int,int,struct`,int,int,*`,*`),struct(*`,*`,*`,int,int,int,struct`,int,int,*`,*`),struct(struct`),struct(struct`),int,int,*(char),int,int,int,*(char),int,int,int,int,*(char),*(char),int,*(char),struct(*`,*`,*`,int,int,int,struct`,int,int,*`,*`),int,int,array(union(int,int,*(char))),array(*(char)),array(char),int,short,array(char),*(*`),int,int,int,int,int,int,int,int,int,*(char),struct(short,int,array(char),array(char),array(char),array(char),struct`,int,struct`,array(int),array(char)),int,int,int,struct(*`,*`,*`,int,int,int,struct`,int,int,*`,*`),int,struct(*`,*`,*`,int,int,int,struct`,int,int,*`,*`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,int,*(struct`),*(struct`),*(struct`),struct(*`,int,int,int,int,int,*`,*`,*`,*`,int,int,struct`,struct`),int,int,int,int,int,int,struct(*`,*`,*`,int,int,int,struct`,int,int,*`,*`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,int,*(struct`),*(struct`),*(struct`),struct(*`,int,int,int,int,int,*`,*`,*`,*`,int,int,struct`,struct`),int,int,int,int,int,int,struct(*`,*`,*`,int,int,int,struct`,int,int,*`,*`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,int,*(struct`),*(struct`),*(struct`),struct(*`,int,int,int,int,int,*`,*`,*`,*`,int,int,struct`,struct`),int,int,int,int,int,int,struct(*`,*`,*`,int,int,int,struct`,int,int,*`,*`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,int,*(struct`),*(struct`),*(struct`),struct(*`,int,int,int,int,int,*`,*`,*`,*`,int,int,struct`,struct`),int,int,int,int,int,int,struct(*`,*`,*`,int,int,int,struct`,int,int,*`,*`))),int,int,*(struct(*(struct`),*(struct`),int,int,int,int,int,int)),*(struct(*(struct`),int,int,int,int,int,*(struct`),*(void),*(struct`),*(struct`),int,int,struct(array(char),int,int),struct(int,*`,*`,int,int,int))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,int,*(struct`),*(struct`),*(struct`),struct(*`,int,int,int,int,int,*`,*`,*`,*`,int,int,struct`,struct`),int,int,int,int,int,int,struct(*`,*`,*`,int,int,int,struct`,int,int,*`,*`))),struct(*(struct(*`,*`,*`,*`,*`,*`,int,int,*`,*`,*`,struct`,int,int,int,int,int,int,struct`)),int,int,int,int,int,*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(void),*(struct(*`,int,int,int,int,int,*`,*`,*`,*`,int,int,struct`,struct`)),*(struct(*`,int,int,int,int,int,*`,*`,*`,*`,int,int,struct`,struct`)),int,int,struct(array(char),int,int),struct(int,*(int),*(int),int,int,int)),int,int,int,int,int,int,struct(*(struct(*`,*`,*`,int,int,int,struct`,int,int,*`,*`)),*((*`,*`)->(void)),*(char),int,int,int,struct(long,long),int,int,*(int),*(int)))),*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,int,*(struct`),*(struct`),*(struct`),struct(*`,int,int,int,int,int,*`,*`,*`,*`,int,int,struct`,struct`),int,int,int,int,int,int,struct(*`,*`,*`,int,int,int,struct`,int,int,*`,*`))),*(struct(*(struct`),*(struct`),struct(*`,*`,*`,*`,*`,*`,int,int,*`,*`,*`,struct`,int,int,int,int,int,int,struct`),*(struct`),*(struct`),*(struct`),*((*`,int)->(void)),*(char),int,int,*(struct`),*(struct`),int,array(char),*(char),char,int,int,int,int,int,int,int,int,struct(char,char,char,char,char,char),int,char,int,int,int,int,int,int,int,int,int,int,int,int,int,int,struct(char,char,array(int)),int,struct(char,char,char,char,char,char),struct(long,long),int,char,int,*(char),int,int,int,int,int,int,struct(*`,*`,*`,int,int,int,struct`,int,int,*`,*`),struct(*`,*`,*`,int,int,int,struct`,int,int,*`,*`),int,*(struct`),int,array(char),int,struct(*`,*`,*`,int,int,int,struct`,int,int,*`,*`),struct(*`,*`,*`,int,int,int,struct`,int,int,*`,*`),struct(*`,*`,*`,int,int,int,struct`,int,int,*`,*`),struct(struct`),struct(struct`),int,int,*(char),int,int,int,*(char),int,int,int,int,*(char),*(char),int,*(char),struct(*`,*`,*`,int,int,int,struct`,int,int,*`,*`),int,int,array(union(int,int,*(char))),array(*(char)),array(char),int,short,array(char),*(*`),int,int,int,int,int,int,int,int,int,*(char),struct(short,int,array(char),array(char),array(char),array(char),struct`,int,struct`,array(int),array(char)),int,int,int,struct(*`,*`,*`,int,int,int,struct`,int,int,*`,*`),int,struct(*`,*`,*`,int,int,int,struct`,int,int,*`,*`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,int,*(struct`),*(struct`),*(struct`),struct(*`,int,int,int,int,int,*`,*`,*`,*`,int,int,struct`,struct`),int,int,int,int,int,int,struct(*`,*`,*`,int,int,int,struct`,int,int,*`,*`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,int,*(struct`),*(struct`),*(struct`),struct(*`,int,int,int,int,int,*`,*`,*`,*`,int,int,struct`,struct`),int,int,int,int,int,int,struct(*`,*`,*`,int,int,int,struct`,int,int,*`,*`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,int,*(struct`),*(struct`),*(struct`),struct(*`,int,int,int,int,int,*`,*`,*`,*`,int,int,struct`,struct`),int,int,int,int,int,int,struct(*`,*`,*`,int,int,int,struct`,int,int,*`,*`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,int,*(struct`),*(struct`),*(struct`),struct(*`,int,int,int,int,int,*`,*`,*`,*`,int,int,struct`,struct`),int,int,int,int,int,int,struct(*`,*`,*`,int,int,int,struct`,int,int,*`,*`))),int,int,*(struct(*(struct`),*(struct`),int,int,int,int,int,int)),*(struct(*(struct`),int,int,int,int,int,*(struct`),*(void),*(struct`),*(struct`),int,int,struct(array(char),int,int),struct(int,*`,*`,int,int,int))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,int,*(struct`),*(struct`),*(struct`),struct(*`,int,int,int,int,int,*`,*`,*`,*`,int,int,struct`,struct`),int,int,int,int,int,int,struct(*`,*`,*`,int,int,int,struct`,int,int,*`,*`))),struct(*(struct(*`,*`,*`,*`,*`,*`,int,int,*`,*`,*`,struct`,int,int,int,int,int,int,struct`)),int,int,int,int,int,*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(void),*(struct(*`,int,int,int,int,int,*`,*`,*`,*`,int,int,struct`,struct`)),*(struct(*`,int,int,int,int,int,*`,*`,*`,*`,int,int,struct`,struct`)),int,int,struct(array(char),int,int),struct(int,*(int),*(int),int,int,int)),int,int,int,int,int,int,struct(*(struct(*`,*`,*`,int,int,int,struct`,int,int,*`,*`)),*((*`,*`)->(void)),*(char),int,int,int,struct(long,long),int,int,*(int),*(int)))),*(struct(*(struct(*(struct`),*(char),int,struct(*`,*`,*`,*`,*`,*`,int,int,*`,*`,*`,struct`,int,int,int,int,int,int,struct`),*(struct`),*(struct`),int)),*(char),int,struct(*(struct(*`,*`,*`,*`,*`,*`,int,int,*`,*`,*`,struct`,int,int,int,int,int,int,struct`)),*(struct(*`,*`,struct`,*`,*`,*`,*`,*`,int,int,*`,*`,int,array(char),*`,char,int,int,int,int,int,int,int,int,struct`,int,char,int,int,int,int,int,int,int,int,int,int,int,int,int,int,struct`,int,struct`,struct`,int,char,int,*`,int,int,int,int,int,int,struct`,struct`,int,*`,int,array(char),int,struct`,struct`,struct`,struct`,struct`,int,int,*`,int,int,int,*`,int,int,int,int,*`,*`,int,*`,struct`,int,int,array(union(int,int,*(char))),array(*(char)),array(char),int,short,array(char),*`,int,int,int,int,int,int,int,int,int,*`,struct`,int,int,int,struct`,int,struct`)),*(struct(*`,*`,*`,*`,*`,*`,int,int,*`,*`,*`,struct`,int,int,int,int,int,int,struct`)),*(struct(*`,*`,*`,*`,*`,*`,int,int,*`,*`,*`,struct`,int,int,int,int,int,int,struct`)),*(struct(*`,*`,*`,*`,*`,*`,int,int,*`,*`,*`,struct`,int,int,int,int,int,int,struct`)),*(struct(*`,*`,*`,*`,*`,*`,int,int,*`,*`,*`,struct`,int,int,int,int,int,int,struct`)),int,int,*(struct(*`,*`,int,int,int,int,int,int)),*(struct(*`,int,int,int,int,int,*`,*`,*`,*`,int,int,struct`,struct`)),*(struct(*`,*`,*`,*`,*`,*`,int,int,*`,*`,*`,struct`,int,int,int,int,int,int,struct`)),struct(*(struct`),int,int,int,int,int,*(struct`),*(void),*(struct`),*(struct`),int,int,struct(array(char),int,int),struct(int,*`,*`,int,int,int)),int,int,int,int,int,int,struct(*(struct`),*((*`,*`)->(void)),*(char),int,int,int,struct(long,long),int,int,*(int),*(int))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,int,*(struct`),*(struct`),*(struct`),struct(*`,int,int,int,int,int,*`,*`,*`,*`,int,int,struct`,struct`),int,int,int,int,int,int,struct(*`,*`,*`,int,int,int,struct`,int,int,*`,*`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,int,*(struct`),*(struct`),*(struct`),struct(*`,int,int,int,int,int,*`,*`,*`,*`,int,int,struct`,struct`),int,int,int,int,int,int,struct(*`,*`,*`,int,int,int,struct`,int,int,*`,*`))),int)),*((*(char),int)->(void)),*(char),int,int,*(struct),*(struct),int,array(char),*(char),char,int,int,int,int,int,int,int,int,struct(char,char,char,char,char,char),int,char,int,int,int,int,int,int,int,int,int,int,int,int,int,int,struct(char,char,array(int)),int,struct(char,char,char,char,char,char),struct(long,long),int,char,int,*(char),int,int,int,int,int,int,struct(*(struct(*(struct(*`,*`,*`,int,int,int,struct`,int,int,*`,*`)),*((*`,*`)->(void)),*(char),int,int,int,struct(long,long),int,int,*(int),*(int))),*((*(struct(*`,*`,*`,int,int,int,struct`,int,int,*`,*`)),*(char))->(void)),*(char),int,int,int,struct(long,long),int,int,*(int),*(int)),struct(*(struct(*(struct(*`,*`,*`,int,int,int,struct`,int,int,*`,*`)),*((*`,*`)->(void)),*(char),int,int,int,struct(long,long),int,int,*(int),*(int))),*((*(struct(*`,*`,*`,int,int,int,struct`,int,int,*`,*`)),*(char))->(void)),*(char),int,int,int,struct(long,long),int,int,*(int),*(int)),int,*(struct(int,*(*(char)),*(int),int)),int,array(char),int,struct(*(struct(*(struct(*`,*`,*`,int,int,int,struct`,int,int,*`,*`)),*((*`,*`)->(void)),*(char),int,int,int,struct(long,long),int,int,*(int),*(int))),*((*(struct(*`,*`,*`,int,int,int,struct`,int,int,*`,*`)),*(char))->(void)),*(char),int,int,int,struct(long,long),int,int,*(int),*(int)),struct(*(struct(*(struct(*`,*`,*`,int,int,int,struct`,int,int,*`,*`)),*((*`,*`)->(void)),*(char),int,int,int,struct(long,long),int,int,*(int),*(int))),*((*(struct(*`,*`,*`,int,int,int,struct`,int,int,*`,*`)),*(char))->(void)),*(char),int,int,int,struct(long,long),int,int,*(int),*(int)),struct(*(struct(*(struct(*`,*`,*`,int,int,int,struct`,int,int,*`,*`)),*((*`,*`)->(void)),*(char),int,int,int,struct(long,long),int,int,*(int),*(int))),*((*(struct(*`,*`,*`,int,int,int,struct`,int,int,*`,*`)),*(char))->(void)),*(char),int,int,int,struct(long,long),int,int,*(int),*(int)),struct(struct(int,int,int,int,char,array(char),int,int)),struct(struct(int,int,int,int,char,array(char),int,int)),int,int,*(char),int,int,int,*(char),int,int,int,int,*(char),*(char),int,*(char),struct(*(struct(*(struct(*`,*`,*`,int,int,int,struct`,int,int,*`,*`)),*((*`,*`)->(void)),*(char),int,int,int,struct(long,long),int,int,*(int),*(int))),*((*(struct(*`,*`,*`,int,int,int,struct`,int,int,*`,*`)),*(char))->(void)),*(char),int,int,int,struct(long,long),int,int,*(int),*(int)),int,int,array(union(int,int,*(char))),array(*(char)),array(char),int,short,array(char),*(*(*(char))),int,int,int,int,int,int,int,int,int,*(char),struct(short,int,array(char),array(char),array(char),array(char),struct(short,short),int,struct(int,int),array(int),array(char)),int,int,int,struct(*(struct(*(struct(*`,*`,*`,int,int,int,struct`,int,int,*`,*`)),*((*`,*`)->(void)),*(char),int,int,int,struct(long,long),int,int,*(int),*(int))),*((*(struct(*`,*`,*`,int,int,int,struct`,int,int,*`,*`)),*(char))->(void)),*(char),int,int,int,struct(long,long),int,int,*(int),*(int)),int,struct(*(struct(*(struct(*`,*`,*`,int,int,int,struct`,int,int,*`,*`)),*((*`,*`)->(void)),*(char),int,int,int,struct(long,long),int,int,*(int),*(int))),*((*(struct(*`,*`,*`,int,int,int,struct`,int,int,*`,*`)),*(char))->(void)),*(char),int,int,int,struct(long,long),int,int,*(int),*(int)))
*	O
displays	*(struct(*(struct(*(struct`),*(struct`),struct(*`,*`,*`,*`,*`,*`,int,int,*`,*`,*`,struct`,int,int,int,int,int,int,struct`),*(struct`),*(struct`),*(struct`),*((*`,int)->(void)),*(char),int,int,*(struct`),*(struct`),int,array(char),*(char),char,int,int,int,int,int,int,int,int,struct(char,char,char,char,char,char),int,char,int,int,int,int,int,int,int,int,int,int,int,int,int,int,struct(char,char,array(int)),int,struct(char,char,char,char,char,char),struct(long,long),int,char,int,*(char),int,int,int,int,int,int,struct(*`,*`,*`,int,int,int,struct`,int,int,*`,*`),struct(*`,*`,*`,int,int,int,struct`,int,int,*`,*`),int,*(struct`),int,array(char),int,struct(*`,*`,*`,int,int,int,struct`,int,int,*`,*`),struct(*`,*`,*`,int,int,int,struct`,int,int,*`,*`),struct(*`,*`,*`,int,int,int,struct`,int,int,*`,*`),struct(struct`),struct(struct`),int,int,*(char),int,int,int,*(char),int,int,int,int,*(char),*(char),int,*(char),struct(*`,*`,*`,int,int,int,struct`,int,int,*`,*`),int,int,array(union(int,int,*(char))),array(*(char)),array(char),int,short,array(char),*(*`),int,int,int,int,int,int,int,int,int,*(char),struct(short,int,array(char),array(char),array(char),array(char),struct`,int,struct`,array(int),array(char)),int,int,int,struct(*`,*`,*`,int,int,int,struct`,int,int,*`,*`),int,struct(*`,*`,*`,int,int,int,struct`,int,int,*`,*`))),*(struct(*(struct`),array(char),*(char),int,int,int,int,int,struct(*`,int,int),int,array(*(char)),*(struct`))),struct(*(struct(*`,*`,*`,*`,*`,*`,int,int,*`,*`,*`,struct`,int,int,int,int,int,int,struct`)),*(struct(*`,*`,struct`,*`,*`,*`,*`,*`,int,int,*`,*`,int,array(char),*`,char,int,int,int,int,int,int,int,int,struct`,int,char,int,int,int,int,int,int,int,int,int,int,int,int,int,int,struct`,int,struct`,struct`,int,char,int,*`,int,int,int,int,int,int,struct`,struct`,int,*`,int,array(char),int,struct`,struct`,struct`,struct`,struct`,int,int,*`,int,int,int,*`,int,int,int,int,*`,*`,int,*`,struct`,int,int,array(union(int,int,*(char))),array(*(char)),array(char),int,short,array(char),*`,int,int,int,int,int,int,int,int,int,*`,struct`,int,int,int,struct`,int,struct`)),*(struct(*`,*`,*`,*`,*`,*`,int,int,*`,*`,*`,struct`,int,int,int,int,int,int,struct`)),*(struct(*`,*`,*`,*`,*`,*`,int,int,*`,*`,*`,struct`,int,int,int,int,int,int,struct`)),*(struct(*`,*`,*`,*`,*`,*`,int,int,*`,*`,*`,struct`,int,int,int,int,int,int,struct`)),*(struct(*`,*`,*`,*`,*`,*`,int,int,*`,*`,*`,struct`,int,int,int,int,int,int,struct`)),int,int,*(struct(*`,*`,int,int,int,int,int,int)),*(struct(*`,int,int,int,int,int,*`,*`,*`,*`,int,int,struct`,struct`)),*(struct(*`,*`,*`,*`,*`,*`,int,int,*`,*`,*`,struct`,int,int,int,int,int,int,struct`)),struct(*(struct`),int,int,int,int,int,*(struct`),*(void),*(struct`),*(struct`),int,int,struct(array(char),int,int),struct(int,*`,*`,int,int,int)),int,int,int,int,int,int,struct(*(struct`),*((*`,*`)->(void)),*(char),int,int,int,struct(long,long),int,int,*(int),*(int))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,int,*(struct`),*(struct`),*(struct`),struct(*`,int,int,int,int,int,*`,*`,*`,*`,int,int,struct`,struct`),int,int,int,int,int,int,struct(*`,*`,*`,int,int,int,struct`,int,int,*`,*`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,int,*(struct`),*(struct`),*(struct`),struct(*`,int,int,int,int,int,*`,*`,*`,*`,int,int,struct`,struct`),int,int,int,int,int,int,struct(*`,*`,*`,int,int,int,struct`,int,int,*`,*`))),*(struct(*(struct`),*(char),int,struct(*`,*`,*`,*`,*`,*`,int,int,*`,*`,*`,struct`,int,int,int,int,int,int,struct`),*(struct`),*(struct`),int)),*((*(char),int)->(void)),*(char),int,int,*(struct(*(struct`),int,*(void),struct(*`,int,int,int,int,int,*`,*`,*`,*`,int,int,struct`,struct`),*(struct`),int,*(struct`),*(struct`),*(struct`),int,struct(*`,*`,*`,int,int,int,struct`,int,int,*`,*`),struct(*`,*`,*`,int,int,int,struct`,int,int,*`,*`),struct(*`,*`,*`,int,int,int,struct`,int,int,*`,*`),struct(*`,*`,*`,int,int,int,struct`,int,int,*`,*`),int,int,array(char),int,array(char),int,int,int,*(char),*(char),array(char),int,*(struct`),int,array(int),int,int,*(struct`),array(*(char)),*(char),*(char),enum(int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int),*(struct`),struct(char,char,char,char,char,char),char,char,char,int,int,array(int),int,struct(int,int,int,struct`,int,int,array(int)),int,int,int,int,int,int,int,int,int,int,int,*(char),int,int,int,int,int,array(char),*(char),*(char),int,int,*(struct`),int,int,int,int,char,char,int,int,int,int,int,int,*(struct`),struct(*`,*`,int,*`,struct`),int,int,array(*(char)),*(char),*(char),int,*(char),struct(short,int,array(char),array(char),array(char),array(char),struct`,int,struct`,array(int),array(char)),array(char),int,*(struct`),struct(int,*`,int,int,int,*`,int,struct`),struct(*`,*`,*`,int,int,int,struct`,int,int,*`,*`),int)),*(struct(*(struct`),int,*(void),struct(*`,int,int,int,int,int,*`,*`,*`,*`,int,int,struct`,struct`),*(struct`),int,*(struct`),*(struct`),*(struct`),int,struct(*`,*`,*`,int,int,int,struct`,int,int,*`,*`),struct(*`,*`,*`,int,int,int,struct`,int,int,*`,*`),struct(*`,*`,*`,int,int,int,struct`,int,int,*`,*`),struct(*`,*`,*`,int,int,int,struct`,int,int,*`,*`),int,int,array(char),int,array(char),int,int,int,*(char),*(char),array(char),int,*(struct`),int,array(int),int,int,*(struct`),array(*(char)),*(char),*(char),enum(int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int),*(struct`),struct(char,char,char,char,char,char),char,char,char,int,int,array(int),int,struct(int,int,int,struct`,int,int,array(int)),int,int,int,int,int,int,int,int,int,int,int,*(char),int,int,int,int,int,array(char),*(char),*(char),int,int,*(struct`),int,int,int,int,char,char,int,int,int,int,int,int,*(struct`),struct(*`,*`,int,*`,struct`),int,int,array(*(char)),*(char),*(char),int,*(char),struct(short,int,array(char),array(char),array(char),array(char),struct`,int,struct`,array(int),array(char)),array(char),int,*(struct`),struct(int,*`,int,int,int,*`,int,struct`),struct(*`,*`,*`,int,int,int,struct`,int,int,*`,*`),int)),int,array(char),*(char),char,int,int,int,int,int,int,int,int,struct(char,char,char,char,char,char),int,char,int,int,int,int,int,int,int,int,int,int,int,int,int,int,struct(char,char,array(int)),int,struct(char,char,char,char,char,char),struct(long,long),int,char,int,*(char),int,int,int,int,int,int,struct(*(struct(*`,*`,*`,int,int,int,struct`,int,int,*`,*`)),*((*`,*`)->(void)),*(char),int,int,int,struct(long,long),int,int,*(int),*(int)),struct(*(struct(*`,*`,*`,int,int,int,struct`,int,int,*`,*`)),*((*`,*`)->(void)),*(char),int,int,int,struct(long,long),int,int,*(int),*(int)),int,*(struct(int,*(*`),*(int),int)),int,array(char),int,struct(*(struct(*`,*`,*`,int,int,int,struct`,int,int,*`,*`)),*((*`,*`)->(void)),*(char),int,int,int,struct(long,long),int,int,*(int),*(int)),struct(*(struct(*`,*`,*`,int,int,int,struct`,int,int,*`,*`)),*((*`,*`)->(void)),*(char),int,int,int,struct(long,long),int,int,*(int),*(int)),struct(*(struct(*`,*`,*`,int,int,int,struct`,int,int,*`,*`)),*((*`,*`)->(void)),*(char),int,int,int,struct(long,long),int,int,*(int),*(int)),struct(struct(int,int,int,int,char,array(char),int,int)),struct(struct(int,int,int,int,char,array(char),int,int)),int,int,*(char),int,int,int,*(char),int,int,int,int,*(char),*(char),int,*(char),struct(*(struct(*`,*`,*`,int,int,int,struct`,int,int,*`,*`)),*((*`,*`)->(void)),*(char),int,int,int,struct(long,long),int,int,*(int),*(int)),int,int,array(union(int,int,*(char))),array(*(char)),array(char),int,short,array(char),*(*(*(char))),int,int,int,int,int,int,int,int,int,*(char),struct(short,int,array(char),array(char),array(char),array(char),struct(short,short),int,struct(int,int),array(int),array(char)),int,int,int,struct(*(struct(*`,*`,*`,int,int,int,struct`,int,int,*`,*`)),*((*`,*`)->(void)),*(char),int,int,int,struct(long,long),int,int,*(int),*(int)),int,struct(*(struct(*`,*`,*`,int,int,int,struct`,int,int,*`,*`)),*((*`,*`)->(void)),*(char),int,int,int,struct(long,long),int,int,*(int),*(int))))
;	O
extern	O
char	O
*	O
SockName	*(char)
,	O
*	O
SockMatch	*(char)
,	O
SockPath	array(char)
[	O
]	O
;	O
extern	O
char	O
HostName	array(char)
[	O
]	O
;	O
extern	O
struct	O
passwd	struct(*(char),*(char),int,int,*(char),*(char),*(char))
*	O
ppp	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
;	O
extern	O
char	O
*	O
attach_tty	*(char)
,	O
*	O
attach_term	*(char)
,	O
*	O
LoginName	*(char)
,	O
*	O
preselect	array(char)
;	O
extern	O
bool	bool
attach_tty_is_in_new_ns	bool
;	O
extern	O
char	O
attach_tty_name_in_ns	array(char)
[	O
]	O
;	O
extern	O
int	O
xflag	int
,	O
dflag	int
,	O
rflag	int
,	O
quietflag	int
,	O
adaptflag	int
;	O
extern	O
struct	O
mode	struct(struct(int,int,int,int,char,array(char),int,int))
attach_Mode	struct(struct(int,int,int,int,char,array(char),int,int))
;	O
extern	O
struct	O
NewWindow	struct(int,*(char),*(*(char)),*(char),*(char),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,*(char),*(char),int)
nwin_options	struct(int,*(char),*(*(char)),*(char),*(char),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,*(char),*(char),int)
;	O
extern	O
int	O
MasterPid	int
,	O
attach_fd	int
;	O
extern	O
char	O
*	O
multi	*(char)
;	O
extern	O
int	O
multiattach	int
,	O
multi_uid	int
,	O
own_uid	int
;	O
extern	O
int	O
tty_mode	int
,	O
tty_oldmode	int
;	O
static	O
int	O
ContinuePlease	int
;	O
static	O
sigret_t	void
AttachSigCont	(int)->(void)
SIGDEFARG	O
{	O
debug	O
(	O
"SigCont()\n"	*(char)
)	O
;	O
ContinuePlease	int
=	O
1	int
;	O
SIGRETURN	O
;	O
}	O
static	O
int	O
QueryResult	int
;	O
static	O
sigret_t	void
QueryResultSuccess	(int)->(void)
SIGDEFARG	O
{	O
QueryResult	int
=	O
1	int
;	O
SIGRETURN	O
;	O
}	O
static	O
sigret_t	void
QueryResultFail	(int)->(void)
SIGDEFARG	O
{	O
QueryResult	int
=	O
2	int
;	O
SIGRETURN	O
;	O
}	O
static	O
int	O
WriteMessage	(int,*(struct(int,int,array(char),union(struct(int,int,int,int,int,array(char),array(char),array(char)),struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int),struct(array(char),int),struct(array(char),int,array(char),int,array(char),array(char)),array(char)))))->(int)
(	O
s	int
,	O
m	union(struct(int,int,int,int,int,array(char),array(char),array(char)),struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int),struct(array(char),int),struct(array(char),int,array(char),int,array(char),array(char)),array(char))
)	O
int	O
s	int
;	O
struct	O
msg	struct(int,int,array(char),union(struct(int,int,int,int,int,array(char),array(char),array(char)),struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int),struct(array(char),int),struct(array(char),int,array(char),int,array(char),array(char)),array(char)))
*	O
m	union(struct(int,int,int,int,int,array(char),array(char),array(char)),struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int),struct(array(char),int),struct(array(char),int,array(char),int,array(char),array(char)),array(char))
;	O
{	O
int	O
r	int
,	O
l	int
=	O
sizeof	O
(	O
*	O
m	union(struct(int,int,int,int,int,array(char),array(char),array(char)),struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int),struct(array(char),int),struct(array(char),int,array(char),int,array(char),array(char)),array(char))
)	O
;	O
bool	bool
is_socket	bool
;	O
is_socket	bool
=	O
IsSocket	(*(char))->(bool)
(	O
SockPath	array(char)
)	O
;	O
if	O
(	O
is_socket	bool
&&	O
m	union(struct(int,int,int,int,int,array(char),array(char),array(char)),struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int),struct(array(char),int),struct(array(char),int,array(char),int,array(char),array(char)),array(char))
->	O
type	enum(int,int,int,int)
==	O
MSG_ATTACH	int
)	O
return	O
SendAttachMsg	(int,*(struct(int,int,array(char),union(struct(int,int,int,int,int,array(char),array(char),array(char)),struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int),struct(array(char),int),struct(array(char),int,array(char),int,array(char),array(char)),array(char)))),int)->(int)
(	O
s	int
,	O
m	union(struct(int,int,int,int,int,array(char),array(char),array(char)),struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int),struct(array(char),int),struct(array(char),int,array(char),int,array(char),array(char)),array(char))
,	O
attach_fd	int
)	O
;	O
while	O
(	O
l	int
>	O
0	int
)	O
{	O
r	int
=	O
write	*((*(void),*(char),long)->(long))
(	O
s	int
,	O
(	O
char	O
*	O
)	O
m	union(struct(int,int,int,int,int,array(char),array(char),array(char)),struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int),struct(array(char),int),struct(array(char),int,array(char),int,array(char),array(char)),array(char))
+	O
(	O
sizeof	O
(	O
*	O
m	union(struct(int,int,int,int,int,array(char),array(char),array(char)),struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int),struct(array(char),int),struct(array(char),int,array(char),int,array(char),array(char)),array(char))
)	O
-	O
l	int
)	O
,	O
l	int
)	O
;	O
if	O
(	O
r	int
==	O
-	O
1	int
&&	O
errno	O
==	O
EINTR	int
)	O
continue	O
;	O
if	O
(	O
r	int
==	O
-	O
1	int
||	O
r	int
==	O
0	int
)	O
return	O
-	O
1	int
;	O
l	int
-=	O
r	int
;	O
}	O
return	O
0	int
;	O
}	O
int	O
Attach	(int)->(int)
(	O
how	int
)	O
int	O
how	int
;	O
{	O
int	O
n	int
,	O
lasts	int
;	O
struct	O
msg	struct(int,int,array(char),union(struct(int,int,int,int,int,array(char),array(char),array(char)),struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int),struct(array(char),int),struct(array(char),int,array(char),int,array(char),array(char)),array(char)))
m	union(struct(int,int,int,int,int,array(char),array(char),array(char)),struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int),struct(array(char),int),struct(array(char),int,array(char),int,array(char),array(char)),array(char))
;	O
struct	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
st	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
;	O
char	O
*	O
s	int
;	O
bool	bool
is_socket	bool
;	O
debug2	O
(	O
"Attach: how=%d, tty=%s\n"	*(char)
,	O
how	int
,	O
attach_tty	*(char)
)	O
;	O
if	O
(	O
(	O
how	int
==	O
MSG_ATTACH	int
||	O
how	int
==	O
MSG_CONT	int
)	O
&&	O
multiattach	int
)	O
{	O
real_uid	int
=	O
multi_uid	int
;	O
eff_uid	int
=	O
own_uid	int
;	O
if	O
(	O
setresuid	(int,int,int)->(int)
(	O
multi_uid	int
,	O
own_uid	int
,	O
multi_uid	int
)	O
)	O
Panic	(int,*(char))->(void)
(	O
errno	O
,	O
"setresuid"	*(char)
)	O
;	O
if	O
(	O
chmod	(*(char),int)->(int)
(	O
attach_tty	*(char)
,	O
0666	int
)	O
)	O
Panic	(int,*(char))->(void)
(	O
errno	O
,	O
"chmod %s"	*(char)
,	O
attach_tty	*(char)
)	O
;	O
tty_oldmode	int
=	O
tty_mode	int
;	O
}	O
bzero	(*(void),long)->(void)
(	O
(	O
char	O
*	O
)	O
&	O
m	union(struct(int,int,int,int,int,array(char),array(char),array(char)),struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int),struct(array(char),int),struct(array(char),int,array(char),int,array(char),array(char)),array(char))
,	O
sizeof	O
(	O
m	union(struct(int,int,int,int,int,array(char),array(char),array(char)),struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int),struct(array(char),int),struct(array(char),int,array(char),int,array(char),array(char)),array(char))
)	O
)	O
;	O
m	union(struct(int,int,int,int,int,array(char),array(char),array(char)),struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int),struct(array(char),int),struct(array(char),int,array(char),int,array(char),array(char)),array(char))
.	O
type	enum(int,int,int,int)
=	O
how	int
;	O
m	union(struct(int,int,int,int,int,array(char),array(char),array(char)),struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int),struct(array(char),int),struct(array(char),int,array(char),int,array(char),array(char)),array(char))
.	O
protocol_revision	int
=	O
MSG_REVISION	O
;	O
strncpy	(*(char),*(char),long)->(*(char))
(	O
m	union(struct(int,int,int,int,int,array(char),array(char),array(char)),struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int),struct(array(char),int),struct(array(char),int,array(char),int,array(char),array(char)),array(char))
.	O
m_tty	array(char)
,	O
attach_tty_is_in_new_ns	bool
?	O
attach_tty_name_in_ns	array(char)
:	O
attach_tty	*(char)
,	O
sizeof	O
(	O
m	union(struct(int,int,int,int,int,array(char),array(char),array(char)),struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int),struct(array(char),int),struct(array(char),int,array(char),int,array(char),array(char)),array(char))
.	O
m_tty	array(char)
)	O
-	O
1	int
)	O
;	O
m	union(struct(int,int,int,int,int,array(char),array(char),array(char)),struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int),struct(array(char),int),struct(array(char),int,array(char),int,array(char),array(char)),array(char))
.	O
m_tty	array(char)
[	O
sizeof	O
(	O
m	union(struct(int,int,int,int,int,array(char),array(char),array(char)),struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int),struct(array(char),int),struct(array(char),int,array(char),int,array(char),array(char)),array(char))
.	O
m_tty	array(char)
)	O
-	O
1	int
]	O
=	O
0	int
;	O
is_socket	bool
=	O
IsSocket	(*(char))->(bool)
(	O
SockPath	array(char)
)	O
;	O
if	O
(	O
how	int
==	O
MSG_WINCH	int
)	O
{	O
if	O
(	O
(	O
lasts	int
=	O
MakeClientSocket	(int,bool)->(int)
(	O
0	int
,	O
is_socket	bool
)	O
)	O
>=	O
0	int
)	O
{	O
WriteMessage	(int,*(struct(int,int,array(char),union(struct(int,int,int,int,int,array(char),array(char),array(char)),struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int),struct(array(char),int),struct(array(char),int,array(char),int,array(char),array(char)),array(char)))))->(int)
(	O
lasts	int
,	O
&	O
m	union(struct(int,int,int,int,int,array(char),array(char),array(char)),struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int),struct(array(char),int),struct(array(char),int,array(char),int,array(char),array(char)),array(char))
)	O
;	O
close	*((*(void))->(int))
(	O
lasts	int
)	O
;	O
}	O
return	O
0	int
;	O
}	O
if	O
(	O
how	int
==	O
MSG_CONT	int
)	O
{	O
if	O
(	O
(	O
lasts	int
=	O
MakeClientSocket	(int,bool)->(int)
(	O
0	int
,	O
is_socket	bool
)	O
)	O
<	O
0	int
)	O
{	O
Panic	(int,*(char))->(void)
(	O
0	int
,	O
"Sorry, cannot contact session \"%s\" again.\r\n"	*(char)
,	O
SockName	*(char)
)	O
;	O
}	O
}	O
else	O
{	O
n	int
=	O
FindSocket	(*(int),*(int),*(int),*(char),*(bool))->(int)
(	O
&	O
lasts	int
,	O
(	O
int	O
*	O
)	O
0	int
,	O
(	O
int	O
*	O
)	O
0	int
,	O
SockMatch	*(char)
,	O
&	O
is_socket	bool
)	O
;	O
switch	O
(	O
n	int
)	O
{	O
case	O
0	int
:	O
if	O
(	O
rflag	int
&&	O
(	O
rflag	int
&	O
1	int
)	O
==	O
0	int
)	O
return	O
0	int
;	O
if	O
(	O
quietflag	int
)	O
eexit	(int)->(void)
(	O
10	int
)	O
;	O
if	O
(	O
SockMatch	*(char)
&&	O
*	O
SockMatch	*(char)
)	O
{	O
Panic	(int,*(char))->(void)
(	O
0	int
,	O
"There is no screen to be %sed matching %s."	*(char)
,	O
xflag	int
?	O
"attach"	*(char)
:	O
dflag	int
?	O
"detach"	*(char)
:	O
"resum"	*(char)
,	O
SockMatch	*(char)
)	O
;	O
}	O
else	O
{	O
Panic	(int,*(char))->(void)
(	O
0	int
,	O
"There is no screen to be %sed."	*(char)
,	O
xflag	int
?	O
"attach"	*(char)
:	O
dflag	int
?	O
"detach"	*(char)
:	O
"resum"	*(char)
)	O
;	O
}	O
case	O
1	int
:	O
break	O
;	O
default	O
:	O
if	O
(	O
rflag	int
<	O
3	int
)	O
{	O
if	O
(	O
quietflag	int
)	O
eexit	(int)->(void)
(	O
10	int
+	O
n	int
)	O
;	O
Panic	(int,*(char))->(void)
(	O
0	int
,	O
"Type \"screen [-d] -r [pid.]tty.host\" to resume one of them."	*(char)
)	O
;	O
}	O
}	O
}	O
if	O
(	O
!	O
multiattach	int
)	O
{	O
if	O
(	O
setuid	(int)->(int)
(	O
real_uid	int
)	O
)	O
Panic	(int,*(char))->(void)
(	O
errno	O
,	O
"setuid"	*(char)
)	O
;	O
}	O
else	O
{	O
xseteuid	(int)->(void)
(	O
real_uid	int
)	O
;	O
}	O
eff_uid	int
=	O
real_uid	int
;	O
if	O
(	O
setgid	(int)->(int)
(	O
real_gid	int
)	O
)	O
Panic	(int,*(char))->(void)
(	O
errno	O
,	O
"setgid"	*(char)
)	O
;	O
eff_gid	int
=	O
real_gid	int
;	O
debug2	O
(	O
"Attach: uid %d euid %d\n"	*(char)
,	O
(	O
int	O
)	O
getuid	()->(int)
(	O
)	O
,	O
(	O
int	O
)	O
geteuid	()->(int)
(	O
)	O
)	O
;	O
MasterPid	int
=	O
0	int
;	O
for	O
(	O
s	int
=	O
SockName	*(char)
;	O
*	O
s	int
;	O
s	int
++	O
)	O
{	O
if	O
(	O
*	O
s	int
>	O
'9'	O
||	O
*	O
s	int
<	O
'0'	O
)	O
break	O
;	O
MasterPid	int
=	O
10	int
*	O
MasterPid	int
+	O
(	O
*	O
s	int
-	O
'0'	O
)	O
;	O
}	O
debug1	O
(	O
"Attach decided, it is '%s'\n"	*(char)
,	O
SockPath	array(char)
)	O
;	O
debug1	O
(	O
"Attach found MasterPid == %d\n"	*(char)
,	O
MasterPid	int
)	O
;	O
if	O
(	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
(	O
SockPath	array(char)
,	O
&	O
st	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
)	O
==	O
-	O
1	int
)	O
Panic	(int,*(char))->(void)
(	O
errno	O
,	O
"stat %s"	*(char)
,	O
SockPath	array(char)
)	O
;	O
if	O
(	O
(	O
st	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_mode	int
&	O
0600	int
)	O
!=	O
0600	int
)	O
Panic	(int,*(char))->(void)
(	O
0	int
,	O
"Socket is in wrong mode (%03o)"	*(char)
,	O
(	O
int	O
)	O
st	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_mode	int
)	O
;	O
if	O
(	O
(	O
xflag	int
||	O
rflag	int
)	O
&&	O
dflag	int
&&	O
(	O
st	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_mode	int
&	O
0700	int
)	O
==	O
0600	int
)	O
dflag	int
=	O
0	int
;	O
if	O
(	O
(	O
dflag	int
||	O
!	O
xflag	int
)	O
&&	O
(	O
st	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_mode	int
&	O
0700	int
)	O
!=	O
(	O
dflag	int
?	O
0700	int
:	O
0600	int
)	O
)	O
Panic	(int,*(char))->(void)
(	O
0	int
,	O
"That screen is %sdetached."	*(char)
,	O
dflag	int
?	O
"already "	*(char)
:	O
"not "	*(char)
)	O
;	O
if	O
(	O
dflag	int
&&	O
(	O
how	int
==	O
MSG_DETACH	int
||	O
how	int
==	O
MSG_POW_DETACH	int
)	O
)	O
{	O
m	union(struct(int,int,int,int,int,array(char),array(char),array(char)),struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int),struct(array(char),int),struct(array(char),int,array(char),int,array(char),array(char)),array(char))
.	O
m	union(struct(int,int,int,int,int,array(char),array(char),array(char)),struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int),struct(array(char),int),struct(array(char),int,array(char),int,array(char),array(char)),array(char))
.	O
detach	struct(array(char),int)
.	O
dpid	int
=	O
getpid	()->(int)
(	O
)	O
;	O
strncpy	(*(char),*(char),long)->(*(char))
(	O
m	union(struct(int,int,int,int,int,array(char),array(char),array(char)),struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int),struct(array(char),int),struct(array(char),int,array(char),int,array(char),array(char)),array(char))
.	O
m	union(struct(int,int,int,int,int,array(char),array(char),array(char)),struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int),struct(array(char),int),struct(array(char),int,array(char),int,array(char),array(char)),array(char))
.	O
detach	struct(array(char),int)
.	O
duser	array(char)
,	O
LoginName	*(char)
,	O
sizeof	O
(	O
m	union(struct(int,int,int,int,int,array(char),array(char),array(char)),struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int),struct(array(char),int),struct(array(char),int,array(char),int,array(char),array(char)),array(char))
.	O
m	union(struct(int,int,int,int,int,array(char),array(char),array(char)),struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int),struct(array(char),int),struct(array(char),int,array(char),int,array(char),array(char)),array(char))
.	O
detach	struct(array(char),int)
.	O
duser	array(char)
)	O
-	O
1	int
)	O
;	O
m	union(struct(int,int,int,int,int,array(char),array(char),array(char)),struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int),struct(array(char),int),struct(array(char),int,array(char),int,array(char),array(char)),array(char))
.	O
m	union(struct(int,int,int,int,int,array(char),array(char),array(char)),struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int),struct(array(char),int),struct(array(char),int,array(char),int,array(char),array(char)),array(char))
.	O
detach	struct(array(char),int)
.	O
duser	array(char)
[	O
sizeof	O
(	O
m	union(struct(int,int,int,int,int,array(char),array(char),array(char)),struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int),struct(array(char),int),struct(array(char),int,array(char),int,array(char),array(char)),array(char))
.	O
m	union(struct(int,int,int,int,int,array(char),array(char),array(char)),struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int),struct(array(char),int),struct(array(char),int,array(char),int,array(char),array(char)),array(char))
.	O
detach	struct(array(char),int)
.	O
duser	array(char)
)	O
-	O
1	int
]	O
=	O
0	int
;	O
if	O
(	O
dflag	int
==	O
2	int
)	O
m	union(struct(int,int,int,int,int,array(char),array(char),array(char)),struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int),struct(array(char),int),struct(array(char),int,array(char),int,array(char),array(char)),array(char))
.	O
type	enum(int,int,int,int)
=	O
MSG_POW_DETACH	int
;	O
else	O
m	union(struct(int,int,int,int,int,array(char),array(char),array(char)),struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int),struct(array(char),int),struct(array(char),int,array(char),int,array(char),array(char)),array(char))
.	O
type	enum(int,int,int,int)
=	O
MSG_DETACH	int
;	O
signal	(int,*((int)->(void)))->(*((int)->(void)))
(	O
SIGCONT	int
,	O
AttachSigCont	(int)->(void)
)	O
;	O
if	O
(	O
WriteMessage	(int,*(struct(int,int,array(char),union(struct(int,int,int,int,int,array(char),array(char),array(char)),struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int),struct(array(char),int),struct(array(char),int,array(char),int,array(char),array(char)),array(char)))))->(int)
(	O
lasts	int
,	O
&	O
m	union(struct(int,int,int,int,int,array(char),array(char),array(char)),struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int),struct(array(char),int),struct(array(char),int,array(char),int,array(char),array(char)),array(char))
)	O
)	O
Panic	(int,*(char))->(void)
(	O
errno	O
,	O
"WriteMessage"	*(char)
)	O
;	O
close	*((*(void))->(int))
(	O
lasts	int
)	O
;	O
while	O
(	O
!	O
ContinuePlease	int
)	O
pause	()->(int)
(	O
)	O
;	O
signal	(int,*((int)->(void)))->(*((int)->(void)))
(	O
SIGCONT	int
,	O
SIG_DFL	O
)	O
;	O
ContinuePlease	int
=	O
0	int
;	O
if	O
(	O
how	int
!=	O
MSG_ATTACH	int
)	O
return	O
0	int
;	O
sleep	(int)->(int)
(	O
1	int
)	O
;	O
if	O
(	O
(	O
lasts	int
=	O
MakeClientSocket	(int,bool)->(int)
(	O
0	int
,	O
is_socket	bool
)	O
)	O
==	O
-	O
1	int
)	O
Panic	(int,*(char))->(void)
(	O
0	int
,	O
"Cannot contact screen again. Sigh."	*(char)
)	O
;	O
m	union(struct(int,int,int,int,int,array(char),array(char),array(char)),struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int),struct(array(char),int),struct(array(char),int,array(char),int,array(char),array(char)),array(char))
.	O
type	enum(int,int,int,int)
=	O
how	int
;	O
}	O
ASSERT	O
(	O
how	int
==	O
MSG_ATTACH	int
||	O
how	int
==	O
MSG_CONT	int
)	O
;	O
strncpy	(*(char),*(char),long)->(*(char))
(	O
m	union(struct(int,int,int,int,int,array(char),array(char),array(char)),struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int),struct(array(char),int),struct(array(char),int,array(char),int,array(char),array(char)),array(char))
.	O
m	union(struct(int,int,int,int,int,array(char),array(char),array(char)),struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int),struct(array(char),int),struct(array(char),int,array(char),int,array(char),array(char)),array(char))
.	O
attach	struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int)
.	O
envterm	array(char)
,	O
attach_term	*(char)
,	O
MAXTERMLEN	int
)	O
;	O
m	union(struct(int,int,int,int,int,array(char),array(char),array(char)),struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int),struct(array(char),int),struct(array(char),int,array(char),int,array(char),array(char)),array(char))
.	O
m	union(struct(int,int,int,int,int,array(char),array(char),array(char)),struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int),struct(array(char),int),struct(array(char),int,array(char),int,array(char),array(char)),array(char))
.	O
attach	struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int)
.	O
envterm	array(char)
[	O
MAXTERMLEN	int
]	O
=	O
0	int
;	O
debug1	O
(	O
"attach: sending %d bytes... "	*(char)
,	O
(	O
int	O
)	O
sizeof	O
(	O
m	union(struct(int,int,int,int,int,array(char),array(char),array(char)),struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int),struct(array(char),int),struct(array(char),int,array(char),int,array(char),array(char)),array(char))
)	O
)	O
;	O
strncpy	(*(char),*(char),long)->(*(char))
(	O
m	union(struct(int,int,int,int,int,array(char),array(char),array(char)),struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int),struct(array(char),int),struct(array(char),int,array(char),int,array(char),array(char)),array(char))
.	O
m	union(struct(int,int,int,int,int,array(char),array(char),array(char)),struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int),struct(array(char),int),struct(array(char),int,array(char),int,array(char),array(char)),array(char))
.	O
attach	struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int)
.	O
auser	array(char)
,	O
LoginName	*(char)
,	O
sizeof	O
(	O
m	union(struct(int,int,int,int,int,array(char),array(char),array(char)),struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int),struct(array(char),int),struct(array(char),int,array(char),int,array(char),array(char)),array(char))
.	O
m	union(struct(int,int,int,int,int,array(char),array(char),array(char)),struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int),struct(array(char),int),struct(array(char),int,array(char),int,array(char),array(char)),array(char))
.	O
attach	struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int)
.	O
auser	array(char)
)	O
-	O
1	int
)	O
;	O
m	union(struct(int,int,int,int,int,array(char),array(char),array(char)),struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int),struct(array(char),int),struct(array(char),int,array(char),int,array(char),array(char)),array(char))
.	O
m	union(struct(int,int,int,int,int,array(char),array(char),array(char)),struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int),struct(array(char),int),struct(array(char),int,array(char),int,array(char),array(char)),array(char))
.	O
attach	struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int)
.	O
auser	array(char)
[	O
sizeof	O
(	O
m	union(struct(int,int,int,int,int,array(char),array(char),array(char)),struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int),struct(array(char),int),struct(array(char),int,array(char),int,array(char),array(char)),array(char))
.	O
m	union(struct(int,int,int,int,int,array(char),array(char),array(char)),struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int),struct(array(char),int),struct(array(char),int,array(char),int,array(char),array(char)),array(char))
.	O
attach	struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int)
.	O
auser	array(char)
)	O
-	O
1	int
]	O
=	O
0	int
;	O
m	union(struct(int,int,int,int,int,array(char),array(char),array(char)),struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int),struct(array(char),int),struct(array(char),int,array(char),int,array(char),array(char)),array(char))
.	O
m	union(struct(int,int,int,int,int,array(char),array(char),array(char)),struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int),struct(array(char),int),struct(array(char),int,array(char),int,array(char),array(char)),array(char))
.	O
attach	struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int)
.	O
esc	int
=	O
DefaultEsc	int
;	O
m	union(struct(int,int,int,int,int,array(char),array(char),array(char)),struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int),struct(array(char),int),struct(array(char),int,array(char),int,array(char),array(char)),array(char))
.	O
m	union(struct(int,int,int,int,int,array(char),array(char),array(char)),struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int),struct(array(char),int),struct(array(char),int,array(char),int,array(char),array(char)),array(char))
.	O
attach	struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int)
.	O
meta_esc	int
=	O
DefaultMetaEsc	int
;	O
strncpy	(*(char),*(char),long)->(*(char))
(	O
m	union(struct(int,int,int,int,int,array(char),array(char),array(char)),struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int),struct(array(char),int),struct(array(char),int,array(char),int,array(char),array(char)),array(char))
.	O
m	union(struct(int,int,int,int,int,array(char),array(char),array(char)),struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int),struct(array(char),int),struct(array(char),int,array(char),int,array(char),array(char)),array(char))
.	O
attach	struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int)
.	O
preselect	array(char)
,	O
preselect	array(char)
?	O
preselect	array(char)
:	O
""	*(char)
,	O
sizeof	O
(	O
m	union(struct(int,int,int,int,int,array(char),array(char),array(char)),struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int),struct(array(char),int),struct(array(char),int,array(char),int,array(char),array(char)),array(char))
.	O
m	union(struct(int,int,int,int,int,array(char),array(char),array(char)),struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int),struct(array(char),int),struct(array(char),int,array(char),int,array(char),array(char)),array(char))
.	O
attach	struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int)
.	O
preselect	array(char)
)	O
-	O
1	int
)	O
;	O
m	union(struct(int,int,int,int,int,array(char),array(char),array(char)),struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int),struct(array(char),int),struct(array(char),int,array(char),int,array(char),array(char)),array(char))
.	O
m	union(struct(int,int,int,int,int,array(char),array(char),array(char)),struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int),struct(array(char),int),struct(array(char),int,array(char),int,array(char),array(char)),array(char))
.	O
attach	struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int)
.	O
preselect	array(char)
[	O
sizeof	O
(	O
m	union(struct(int,int,int,int,int,array(char),array(char),array(char)),struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int),struct(array(char),int),struct(array(char),int,array(char),int,array(char),array(char)),array(char))
.	O
m	union(struct(int,int,int,int,int,array(char),array(char),array(char)),struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int),struct(array(char),int),struct(array(char),int,array(char),int,array(char),array(char)),array(char))
.	O
attach	struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int)
.	O
preselect	array(char)
)	O
-	O
1	int
]	O
=	O
0	int
;	O
m	union(struct(int,int,int,int,int,array(char),array(char),array(char)),struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int),struct(array(char),int),struct(array(char),int,array(char),int,array(char),array(char)),array(char))
.	O
m	union(struct(int,int,int,int,int,array(char),array(char),array(char)),struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int),struct(array(char),int),struct(array(char),int,array(char),int,array(char),array(char)),array(char))
.	O
attach	struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int)
.	O
apid	int
=	O
getpid	()->(int)
(	O
)	O
;	O
m	union(struct(int,int,int,int,int,array(char),array(char),array(char)),struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int),struct(array(char),int),struct(array(char),int,array(char),int,array(char),array(char)),array(char))
.	O
m	union(struct(int,int,int,int,int,array(char),array(char),array(char)),struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int),struct(array(char),int),struct(array(char),int,array(char),int,array(char),array(char)),array(char))
.	O
attach	struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int)
.	O
adaptflag	int
=	O
adaptflag	int
;	O
m	union(struct(int,int,int,int,int,array(char),array(char),array(char)),struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int),struct(array(char),int),struct(array(char),int,array(char),int,array(char),array(char)),array(char))
.	O
m	union(struct(int,int,int,int,int,array(char),array(char),array(char)),struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int),struct(array(char),int),struct(array(char),int,array(char),int,array(char),array(char)),array(char))
.	O
attach	struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int)
.	O
lines	int
=	O
m	union(struct(int,int,int,int,int,array(char),array(char),array(char)),struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int),struct(array(char),int),struct(array(char),int,array(char),int,array(char),array(char)),array(char))
.	O
m	union(struct(int,int,int,int,int,array(char),array(char),array(char)),struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int),struct(array(char),int),struct(array(char),int,array(char),int,array(char),array(char)),array(char))
.	O
attach	struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int)
.	O
columns	int
=	O
0	int
;	O
if	O
(	O
(	O
s	int
=	O
getenv	(*(char))->(*(char))
(	O
"LINES"	*(char)
)	O
)	O
)	O
m	union(struct(int,int,int,int,int,array(char),array(char),array(char)),struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int),struct(array(char),int),struct(array(char),int,array(char),int,array(char),array(char)),array(char))
.	O
m	union(struct(int,int,int,int,int,array(char),array(char),array(char)),struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int),struct(array(char),int),struct(array(char),int,array(char),int,array(char),array(char)),array(char))
.	O
attach	struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int)
.	O
lines	int
=	O
atoi	(*(char))->(int)
(	O
s	int
)	O
;	O
if	O
(	O
(	O
s	int
=	O
getenv	(*(char))->(*(char))
(	O
"COLUMNS"	*(char)
)	O
)	O
)	O
m	union(struct(int,int,int,int,int,array(char),array(char),array(char)),struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int),struct(array(char),int),struct(array(char),int,array(char),int,array(char),array(char)),array(char))
.	O
m	union(struct(int,int,int,int,int,array(char),array(char),array(char)),struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int),struct(array(char),int),struct(array(char),int,array(char),int,array(char),array(char)),array(char))
.	O
attach	struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int)
.	O
columns	int
=	O
atoi	(*(char))->(int)
(	O
s	int
)	O
;	O
m	union(struct(int,int,int,int,int,array(char),array(char),array(char)),struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int),struct(array(char),int),struct(array(char),int,array(char),int,array(char),array(char)),array(char))
.	O
m	union(struct(int,int,int,int,int,array(char),array(char),array(char)),struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int),struct(array(char),int),struct(array(char),int,array(char),int,array(char),array(char)),array(char))
.	O
attach	struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int)
.	O
encoding	int
=	O
nwin_options	struct(int,*(char),*(*(char)),*(char),*(char),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,*(char),*(char),int)
.	O
encoding	int
>	O
0	int
?	O
nwin_options	struct(int,*(char),*(*(char)),*(char),*(char),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,*(char),*(char),int)
.	O
encoding	int
+	O
1	int
:	O
0	int
;	O
if	O
(	O
dflag	int
==	O
2	int
)	O
m	union(struct(int,int,int,int,int,array(char),array(char),array(char)),struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int),struct(array(char),int),struct(array(char),int,array(char),int,array(char),array(char)),array(char))
.	O
m	union(struct(int,int,int,int,int,array(char),array(char),array(char)),struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int),struct(array(char),int),struct(array(char),int,array(char),int,array(char),array(char)),array(char))
.	O
attach	struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int)
.	O
detachfirst	int
=	O
MSG_POW_DETACH	int
;	O
else	O
if	O
(	O
dflag	int
)	O
m	union(struct(int,int,int,int,int,array(char),array(char),array(char)),struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int),struct(array(char),int),struct(array(char),int,array(char),int,array(char),array(char)),array(char))
.	O
m	union(struct(int,int,int,int,int,array(char),array(char),array(char)),struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int),struct(array(char),int),struct(array(char),int,array(char),int,array(char),array(char)),array(char))
.	O
attach	struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int)
.	O
detachfirst	int
=	O
MSG_DETACH	int
;	O
else	O
m	union(struct(int,int,int,int,int,array(char),array(char),array(char)),struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int),struct(array(char),int),struct(array(char),int,array(char),int,array(char),array(char)),array(char))
.	O
m	union(struct(int,int,int,int,int,array(char),array(char),array(char)),struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int),struct(array(char),int),struct(array(char),int,array(char),int,array(char),array(char)),array(char))
.	O
attach	struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int)
.	O
detachfirst	int
=	O
MSG_ATTACH	int
;	O
if	O
(	O
multi	*(char)
&&	O
(	O
how	int
==	O
MSG_ATTACH	int
||	O
how	int
==	O
MSG_CONT	int
)	O
)	O
signal	(int,*((int)->(void)))->(*((int)->(void)))
(	O
SIGCONT	int
,	O
AttachSigCont	(int)->(void)
)	O
;	O
if	O
(	O
WriteMessage	(int,*(struct(int,int,array(char),union(struct(int,int,int,int,int,array(char),array(char),array(char)),struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int),struct(array(char),int),struct(array(char),int,array(char),int,array(char),array(char)),array(char)))))->(int)
(	O
lasts	int
,	O
&	O
m	union(struct(int,int,int,int,int,array(char),array(char),array(char)),struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int),struct(array(char),int),struct(array(char),int,array(char),int,array(char),array(char)),array(char))
)	O
)	O
Panic	(int,*(char))->(void)
(	O
errno	O
,	O
"WriteMessage"	*(char)
)	O
;	O
close	*((*(void))->(int))
(	O
lasts	int
)	O
;	O
debug1	O
(	O
"Attach(%d): sent\n"	*(char)
,	O
m	union(struct(int,int,int,int,int,array(char),array(char),array(char)),struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int),struct(array(char),int),struct(array(char),int,array(char),int,array(char),array(char)),array(char))
.	O
type	enum(int,int,int,int)
)	O
;	O
if	O
(	O
multi	*(char)
&&	O
(	O
how	int
==	O
MSG_ATTACH	int
||	O
how	int
==	O
MSG_CONT	int
)	O
)	O
{	O
while	O
(	O
!	O
ContinuePlease	int
)	O
pause	()->(int)
(	O
)	O
;	O
signal	(int,*((int)->(void)))->(*((int)->(void)))
(	O
SIGCONT	int
,	O
SIG_DFL	O
)	O
;	O
ContinuePlease	int
=	O
0	int
;	O
xseteuid	(int)->(void)
(	O
own_uid	int
)	O
;	O
if	O
(	O
tty_oldmode	int
>=	O
0	int
)	O
if	O
(	O
chmod	(*(char),int)->(int)
(	O
attach_tty	*(char)
,	O
tty_oldmode	int
)	O
)	O
Panic	(int,*(char))->(void)
(	O
errno	O
,	O
"chmod %s"	*(char)
,	O
attach_tty	*(char)
)	O
;	O
tty_oldmode	int
=	O
-	O
1	int
;	O
xseteuid	(int)->(void)
(	O
real_uid	int
)	O
;	O
}	O
rflag	int
=	O
0	int
;	O
return	O
1	int
;	O
}	O
static	O
int	O
AttacherPanic	int
=	O
0	int
;	O
static	O
sigret_t	void
AttacherSigAlarm	(int)->(void)
SIGDEFARG	O
{	O
SIGRETURN	O
;	O
}	O
static	O
sigret_t	void
AttacherSigInt	(int)->(void)
SIGDEFARG	O
{	O
signal	(int,*((int)->(void)))->(*((int)->(void)))
(	O
SIGINT	int
,	O
AttacherSigInt	(int)->(void)
)	O
;	O
Kill	(int,int)->(void)
(	O
MasterPid	int
,	O
SIGINT	int
)	O
;	O
SIGRETURN	O
;	O
}	O
sigret_t	void
AttacherFinit	(int)->(void)
SIGDEFARG	O
{	O
struct	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
statb	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
;	O
struct	O
msg	struct(int,int,array(char),union(struct(int,int,int,int,int,array(char),array(char),array(char)),struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int),struct(array(char),int),struct(array(char),int,array(char),int,array(char),array(char)),array(char)))
m	union(struct(int,int,int,int,int,array(char),array(char),array(char)),struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int),struct(array(char),int),struct(array(char),int,array(char),int,array(char),array(char)),array(char))
;	O
int	O
s	int
;	O
bool	bool
is_socket	bool
;	O
debug	O
(	O
"AttacherFinit();\n"	*(char)
)	O
;	O
signal	(int,*((int)->(void)))->(*((int)->(void)))
(	O
SIGHUP	int
,	O
SIG_IGN	O
)	O
;	O
if	O
(	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
(	O
SockPath	array(char)
,	O
&	O
statb	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
)	O
==	O
0	int
&&	O
(	O
statb	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_mode	int
&	O
0777	int
)	O
!=	O
0600	int
)	O
{	O
debug	O
(	O
"Detaching backend!\n"	*(char)
)	O
;	O
bzero	(*(void),long)->(void)
(	O
(	O
char	O
*	O
)	O
&	O
m	union(struct(int,int,int,int,int,array(char),array(char),array(char)),struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int),struct(array(char),int),struct(array(char),int,array(char),int,array(char),array(char)),array(char))
,	O
sizeof	O
(	O
m	union(struct(int,int,int,int,int,array(char),array(char),array(char)),struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int),struct(array(char),int),struct(array(char),int,array(char),int,array(char),array(char)),array(char))
)	O
)	O
;	O
strncpy	(*(char),*(char),long)->(*(char))
(	O
m	union(struct(int,int,int,int,int,array(char),array(char),array(char)),struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int),struct(array(char),int),struct(array(char),int,array(char),int,array(char),array(char)),array(char))
.	O
m_tty	array(char)
,	O
attach_tty_is_in_new_ns	bool
?	O
attach_tty_name_in_ns	array(char)
:	O
attach_tty	*(char)
,	O
sizeof	O
(	O
m	union(struct(int,int,int,int,int,array(char),array(char),array(char)),struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int),struct(array(char),int),struct(array(char),int,array(char),int,array(char),array(char)),array(char))
.	O
m_tty	array(char)
)	O
-	O
1	int
)	O
;	O
m	union(struct(int,int,int,int,int,array(char),array(char),array(char)),struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int),struct(array(char),int),struct(array(char),int,array(char),int,array(char),array(char)),array(char))
.	O
m_tty	array(char)
[	O
sizeof	O
(	O
m	union(struct(int,int,int,int,int,array(char),array(char),array(char)),struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int),struct(array(char),int),struct(array(char),int,array(char),int,array(char),array(char)),array(char))
.	O
m_tty	array(char)
)	O
-	O
1	int
]	O
=	O
0	int
;	O
debug1	O
(	O
"attach_tty is %s\n"	*(char)
,	O
attach_tty	*(char)
)	O
;	O
m	union(struct(int,int,int,int,int,array(char),array(char),array(char)),struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int),struct(array(char),int),struct(array(char),int,array(char),int,array(char),array(char)),array(char))
.	O
m	union(struct(int,int,int,int,int,array(char),array(char),array(char)),struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int),struct(array(char),int),struct(array(char),int,array(char),int,array(char),array(char)),array(char))
.	O
detach	struct(array(char),int)
.	O
dpid	int
=	O
getpid	()->(int)
(	O
)	O
;	O
m	union(struct(int,int,int,int,int,array(char),array(char),array(char)),struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int),struct(array(char),int),struct(array(char),int,array(char),int,array(char),array(char)),array(char))
.	O
type	enum(int,int,int,int)
=	O
MSG_HANGUP	int
;	O
m	union(struct(int,int,int,int,int,array(char),array(char),array(char)),struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int),struct(array(char),int),struct(array(char),int,array(char),int,array(char),array(char)),array(char))
.	O
protocol_revision	int
=	O
MSG_REVISION	O
;	O
is_socket	bool
=	O
IsSocket	(*(char))->(bool)
(	O
SockPath	array(char)
)	O
;	O
if	O
(	O
(	O
s	int
=	O
MakeClientSocket	(int,bool)->(int)
(	O
0	int
,	O
is_socket	bool
)	O
)	O
>=	O
0	int
)	O
{	O
WriteMessage	(int,*(struct(int,int,array(char),union(struct(int,int,int,int,int,array(char),array(char),array(char)),struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int),struct(array(char),int),struct(array(char),int,array(char),int,array(char),array(char)),array(char)))))->(int)
(	O
s	int
,	O
&	O
m	union(struct(int,int,int,int,int,array(char),array(char),array(char)),struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int),struct(array(char),int),struct(array(char),int,array(char),int,array(char),array(char)),array(char))
)	O
;	O
close	*((*(void))->(int))
(	O
s	int
)	O
;	O
}	O
}	O
if	O
(	O
tty_oldmode	int
>=	O
0	int
)	O
{	O
if	O
(	O
setuid	(int)->(int)
(	O
own_uid	int
)	O
)	O
Panic	(int,*(char))->(void)
(	O
errno	O
,	O
"setuid"	*(char)
)	O
;	O
chmod	(*(char),int)->(int)
(	O
attach_tty	*(char)
,	O
tty_oldmode	int
)	O
;	O
}	O
exit	(int)->(void)
(	O
0	int
)	O
;	O
SIGRETURN	O
;	O
}	O
static	O
sigret_t	void
AttacherFinitBye	(int)->(void)
SIGDEFARG	O
{	O
int	O
ppid	int
;	O
debug	O
(	O
"AttacherFintBye()\n"	*(char)
)	O
;	O
if	O
(	O
setgid	(int)->(int)
(	O
real_gid	int
)	O
)	O
Panic	(int,*(char))->(void)
(	O
errno	O
,	O
"setgid"	*(char)
)	O
;	O
if	O
(	O
setuid	(int)->(int)
(	O
own_uid	int
)	O
)	O
Panic	(int,*(char))->(void)
(	O
errno	O
,	O
"setuid"	*(char)
)	O
;	O
if	O
(	O
(	O
ppid	int
=	O
getppid	()->(int)
(	O
)	O
)	O
>	O
1	int
)	O
Kill	(int,int)->(void)
(	O
ppid	int
,	O
SIGHUP	int
)	O
;	O
exit	(int)->(void)
(	O
0	int
)	O
;	O
SIGRETURN	O
;	O
}	O
static	O
int	O
SuspendPlease	int
;	O
static	O
sigret_t	void
SigStop	(int)->(void)
SIGDEFARG	O
{	O
debug	O
(	O
"SigStop()\n"	*(char)
)	O
;	O
SuspendPlease	int
=	O
1	int
;	O
SIGRETURN	O
;	O
}	O
static	O
int	O
LockPlease	int
;	O
static	O
sigret_t	void
DoLock	(int)->(void)
SIGDEFARG	O
{	O
debug	O
(	O
"DoLock()\n"	*(char)
)	O
;	O
LockPlease	int
=	O
1	int
;	O
SIGRETURN	O
;	O
}	O
static	O
int	O
SigWinchPlease	int
;	O
static	O
sigret_t	void
AttacherWinch	(int)->(void)
SIGDEFARG	O
{	O
debug	O
(	O
"AttacherWinch()\n"	*(char)
)	O
;	O
SigWinchPlease	int
=	O
1	int
;	O
SIGRETURN	O
;	O
}	O
void	O
Attacher	()->(void)
(	O
)	O
{	O
signal	(int,*((int)->(void)))->(*((int)->(void)))
(	O
SIGHUP	int
,	O
AttacherFinit	(int)->(void)
)	O
;	O
signal	(int,*((int)->(void)))->(*((int)->(void)))
(	O
SIG_BYE	O
,	O
AttacherFinit	(int)->(void)
)	O
;	O
signal	(int,*((int)->(void)))->(*((int)->(void)))
(	O
SIG_POWER_BYE	O
,	O
AttacherFinitBye	(int)->(void)
)	O
;	O
signal	(int,*((int)->(void)))->(*((int)->(void)))
(	O
SIG_LOCK	O
,	O
DoLock	(int)->(void)
)	O
;	O
signal	(int,*((int)->(void)))->(*((int)->(void)))
(	O
SIGINT	int
,	O
AttacherSigInt	(int)->(void)
)	O
;	O
signal	(int,*((int)->(void)))->(*((int)->(void)))
(	O
SIG_STOP	O
,	O
SigStop	(int)->(void)
)	O
;	O
signal	(int,*((int)->(void)))->(*((int)->(void)))
(	O
SIGWINCH	int
,	O
AttacherWinch	(int)->(void)
)	O
;	O
debug	O
(	O
"attacher: going for a nap.\n"	*(char)
)	O
;	O
dflag	int
=	O
0	int
;	O
xflag	int
=	O
1	int
;	O
for	O
(	O
;	O
;	O
)	O
{	O
signal	(int,*((int)->(void)))->(*((int)->(void)))
(	O
SIGALRM	int
,	O
AttacherSigAlarm	(int)->(void)
)	O
;	O
alarm	(int)->(int)
(	O
15	int
)	O
;	O
pause	()->(int)
(	O
)	O
;	O
alarm	(int)->(int)
(	O
0	int
)	O
;	O
if	O
(	O
kill	(int,int)->(int)
(	O
MasterPid	int
,	O
0	int
)	O
<	O
0	int
&&	O
errno	O
!=	O
EPERM	int
)	O
{	O
debug1	O
(	O
"attacher: Panic! MasterPid %d does not exist.\n"	*(char)
,	O
MasterPid	int
)	O
;	O
AttacherPanic	int
++	O
;	O
}	O
if	O
(	O
AttacherPanic	int
)	O
{	O
fcntl	(int,int)->(int)
(	O
0	int
,	O
F_SETFL	int
,	O
0	int
)	O
;	O
SetTTY	(int,*(struct(struct(int,int,int,int,char,array(char),int,int))))->(void)
(	O
0	int
,	O
&	O
attach_Mode	struct(struct(int,int,int,int,char,array(char),int,int))
)	O
;	O
printf	(*(char))->(int)
(	O
"\nError: Cannot find master process to attach to!\n"	*(char)
)	O
;	O
eexit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
if	O
(	O
SuspendPlease	int
)	O
{	O
SuspendPlease	int
=	O
0	int
;	O
signal	(int,*((int)->(void)))->(*((int)->(void)))
(	O
SIGTSTP	int
,	O
SIG_DFL	O
)	O
;	O
debug	O
(	O
"attacher: killing myself SIGTSTP\n"	*(char)
)	O
;	O
kill	(int,int)->(int)
(	O
getpid	()->(int)
(	O
)	O
,	O
SIGTSTP	int
)	O
;	O
debug	O
(	O
"attacher: continuing from stop\n"	*(char)
)	O
;	O
signal	(int,*((int)->(void)))->(*((int)->(void)))
(	O
SIG_STOP	O
,	O
SigStop	(int)->(void)
)	O
;	O
(	O
void	O
)	O
Attach	(int)->(int)
(	O
MSG_CONT	int
)	O
;	O
}	O
if	O
(	O
LockPlease	int
)	O
{	O
LockPlease	int
=	O
0	int
;	O
LockTerminal	()->(void)
(	O
)	O
;	O
(	O
void	O
)	O
Attach	(int)->(int)
(	O
MSG_CONT	int
)	O
;	O
}	O
if	O
(	O
SigWinchPlease	int
)	O
{	O
SigWinchPlease	int
=	O
0	int
;	O
(	O
void	O
)	O
Attach	(int)->(int)
(	O
MSG_WINCH	int
)	O
;	O
}	O
}	O
}	O
static	O
char	O
LockEnd	array(char)
[	O
]	O
=	O
"Welcome back to screen !!\n"	*(char)
;	O
static	O
sigret_t	void
LockHup	(int)->(void)
SIGDEFARG	O
{	O
int	O
ppid	int
=	O
getppid	()->(int)
(	O
)	O
;	O
if	O
(	O
setgid	(int)->(int)
(	O
real_gid	int
)	O
)	O
Panic	(int,*(char))->(void)
(	O
errno	O
,	O
"setgid"	*(char)
)	O
;	O
if	O
(	O
setuid	(int)->(int)
(	O
own_uid	int
)	O
)	O
Panic	(int,*(char))->(void)
(	O
errno	O
,	O
"setuid"	*(char)
)	O
;	O
if	O
(	O
ppid	int
>	O
1	int
)	O
Kill	(int,int)->(void)
(	O
ppid	int
,	O
SIGHUP	int
)	O
;	O
exit	(int)->(void)
(	O
0	int
)	O
;	O
}	O
static	O
void	O
LockTerminal	()->(void)
(	O
)	O
{	O
char	O
*	O
prg	*(char)
;	O
int	O
sig	int
,	O
pid	int
;	O
sigret_t	void
(	O
*	O
sigs	array(*((int)->(void)))
[	O
NSIG	O
]	O
)	O
__P	O
(	O
SIGPROTOARG	O
)	O
;	O
for	O
(	O
sig	int
=	O
1	int
;	O
sig	int
<	O
NSIG	O
;	O
sig	int
++	O
)	O
sigs	array(*((int)->(void)))
[	O
sig	int
]	O
=	O
signal	(int,*((int)->(void)))->(*((int)->(void)))
(	O
sig	int
,	O
sig	int
==	O
SIGCHLD	int
?	O
SIG_DFL	O
:	O
SIG_IGN	O
)	O
;	O
signal	(int,*((int)->(void)))->(*((int)->(void)))
(	O
SIGHUP	int
,	O
LockHup	(int)->(void)
)	O
;	O
printf	(*(char))->(int)
(	O
"\n"	*(char)
)	O
;	O
prg	*(char)
=	O
getenv	(*(char))->(*(char))
(	O
"LOCKPRG"	*(char)
)	O
;	O
if	O
(	O
prg	*(char)
&&	O
strcmp	(*(char),*(char))->(int)
(	O
prg	*(char)
,	O
"builtin"	*(char)
)	O
&&	O
!	O
access	(*(char),int)->(int)
(	O
prg	*(char)
,	O
X_OK	int
)	O
)	O
{	O
signal	(int,*((int)->(void)))->(*((int)->(void)))
(	O
SIGCHLD	int
,	O
SIG_DFL	O
)	O
;	O
debug1	O
(	O
"lockterminal: '%s' seems executable, execl it!\n"	*(char)
,	O
prg	*(char)
)	O
;	O
if	O
(	O
(	O
pid	int
=	O
fork	()->(int)
(	O
)	O
)	O
==	O
0	int
)	O
{	O
displays	*(struct(*(struct(*(struct`),*(struct`),struct(*`,*`,*`,*`,*`,*`,int,int,*`,*`,*`,struct`,int,int,int,int,int,int,struct`),*(struct`),*(struct`),*(struct`),*((*`,int)->(void)),*(char),int,int,*(struct`),*(struct`),int,array(char),*(char),char,int,int,int,int,int,int,int,int,struct(char,char,char,char,char,char),int,char,int,int,int,int,int,int,int,int,int,int,int,int,int,int,struct(char,char,array(int)),int,struct(char,char,char,char,char,char),struct(long,long),int,char,int,*(char),int,int,int,int,int,int,struct(*`,*`,*`,int,int,int,struct`,int,int,*`,*`),struct(*`,*`,*`,int,int,int,struct`,int,int,*`,*`),int,*(struct`),int,array(char),int,struct(*`,*`,*`,int,int,int,struct`,int,int,*`,*`),struct(*`,*`,*`,int,int,int,struct`,int,int,*`,*`),struct(*`,*`,*`,int,int,int,struct`,int,int,*`,*`),struct(struct`),struct(struct`),int,int,*(char),int,int,int,*(char),int,int,int,int,*(char),*(char),int,*(char),struct(*`,*`,*`,int,int,int,struct`,int,int,*`,*`),int,int,array(union(int,int,*(char))),array(*(char)),array(char),int,short,array(char),*(*`),int,int,int,int,int,int,int,int,int,*(char),struct(short,int,array(char),array(char),array(char),array(char),struct`,int,struct`,array(int),array(char)),int,int,int,struct(*`,*`,*`,int,int,int,struct`,int,int,*`,*`),int,struct(*`,*`,*`,int,int,int,struct`,int,int,*`,*`))),*(struct(*(struct`),array(char),*(char),int,int,int,int,int,struct(*`,int,int),int,array(*(char)),*(struct`))),struct(*(struct(*`,*`,*`,*`,*`,*`,int,int,*`,*`,*`,struct`,int,int,int,int,int,int,struct`)),*(struct(*`,*`,struct`,*`,*`,*`,*`,*`,int,int,*`,*`,int,array(char),*`,char,int,int,int,int,int,int,int,int,struct`,int,char,int,int,int,int,int,int,int,int,int,int,int,int,int,int,struct`,int,struct`,struct`,int,char,int,*`,int,int,int,int,int,int,struct`,struct`,int,*`,int,array(char),int,struct`,struct`,struct`,struct`,struct`,int,int,*`,int,int,int,*`,int,int,int,int,*`,*`,int,*`,struct`,int,int,array(union(int,int,*(char))),array(*(char)),array(char),int,short,array(char),*`,int,int,int,int,int,int,int,int,int,*`,struct`,int,int,int,struct`,int,struct`)),*(struct(*`,*`,*`,*`,*`,*`,int,int,*`,*`,*`,struct`,int,int,int,int,int,int,struct`)),*(struct(*`,*`,*`,*`,*`,*`,int,int,*`,*`,*`,struct`,int,int,int,int,int,int,struct`)),*(struct(*`,*`,*`,*`,*`,*`,int,int,*`,*`,*`,struct`,int,int,int,int,int,int,struct`)),*(struct(*`,*`,*`,*`,*`,*`,int,int,*`,*`,*`,struct`,int,int,int,int,int,int,struct`)),int,int,*(struct(*`,*`,int,int,int,int,int,int)),*(struct(*`,int,int,int,int,int,*`,*`,*`,*`,int,int,struct`,struct`)),*(struct(*`,*`,*`,*`,*`,*`,int,int,*`,*`,*`,struct`,int,int,int,int,int,int,struct`)),struct(*(struct`),int,int,int,int,int,*(struct`),*(void),*(struct`),*(struct`),int,int,struct(array(char),int,int),struct(int,*`,*`,int,int,int)),int,int,int,int,int,int,struct(*(struct`),*((*`,*`)->(void)),*(char),int,int,int,struct(long,long),int,int,*(int),*(int))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,int,*(struct`),*(struct`),*(struct`),struct(*`,int,int,int,int,int,*`,*`,*`,*`,int,int,struct`,struct`),int,int,int,int,int,int,struct(*`,*`,*`,int,int,int,struct`,int,int,*`,*`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,int,*(struct`),*(struct`),*(struct`),struct(*`,int,int,int,int,int,*`,*`,*`,*`,int,int,struct`,struct`),int,int,int,int,int,int,struct(*`,*`,*`,int,int,int,struct`,int,int,*`,*`))),*(struct(*(struct`),*(char),int,struct(*`,*`,*`,*`,*`,*`,int,int,*`,*`,*`,struct`,int,int,int,int,int,int,struct`),*(struct`),*(struct`),int)),*((*(char),int)->(void)),*(char),int,int,*(struct(*(struct`),int,*(void),struct(*`,int,int,int,int,int,*`,*`,*`,*`,int,int,struct`,struct`),*(struct`),int,*(struct`),*(struct`),*(struct`),int,struct(*`,*`,*`,int,int,int,struct`,int,int,*`,*`),struct(*`,*`,*`,int,int,int,struct`,int,int,*`,*`),struct(*`,*`,*`,int,int,int,struct`,int,int,*`,*`),struct(*`,*`,*`,int,int,int,struct`,int,int,*`,*`),int,int,array(char),int,array(char),int,int,int,*(char),*(char),array(char),int,*(struct`),int,array(int),int,int,*(struct`),array(*(char)),*(char),*(char),enum(int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int),*(struct`),struct(char,char,char,char,char,char),char,char,char,int,int,array(int),int,struct(int,int,int,struct`,int,int,array(int)),int,int,int,int,int,int,int,int,int,int,int,*(char),int,int,int,int,int,array(char),*(char),*(char),int,int,*(struct`),int,int,int,int,char,char,int,int,int,int,int,int,*(struct`),struct(*`,*`,int,*`,struct`),int,int,array(*(char)),*(char),*(char),int,*(char),struct(short,int,array(char),array(char),array(char),array(char),struct`,int,struct`,array(int),array(char)),array(char),int,*(struct`),struct(int,*`,int,int,int,*`,int,struct`),struct(*`,*`,*`,int,int,int,struct`,int,int,*`,*`),int)),*(struct(*(struct`),int,*(void),struct(*`,int,int,int,int,int,*`,*`,*`,*`,int,int,struct`,struct`),*(struct`),int,*(struct`),*(struct`),*(struct`),int,struct(*`,*`,*`,int,int,int,struct`,int,int,*`,*`),struct(*`,*`,*`,int,int,int,struct`,int,int,*`,*`),struct(*`,*`,*`,int,int,int,struct`,int,int,*`,*`),struct(*`,*`,*`,int,int,int,struct`,int,int,*`,*`),int,int,array(char),int,array(char),int,int,int,*(char),*(char),array(char),int,*(struct`),int,array(int),int,int,*(struct`),array(*(char)),*(char),*(char),enum(int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int),*(struct`),struct(char,char,char,char,char,char),char,char,char,int,int,array(int),int,struct(int,int,int,struct`,int,int,array(int)),int,int,int,int,int,int,int,int,int,int,int,*(char),int,int,int,int,int,array(char),*(char),*(char),int,int,*(struct`),int,int,int,int,char,char,int,int,int,int,int,int,*(struct`),struct(*`,*`,int,*`,struct`),int,int,array(*(char)),*(char),*(char),int,*(char),struct(short,int,array(char),array(char),array(char),array(char),struct`,int,struct`,array(int),array(char)),array(char),int,*(struct`),struct(int,*`,int,int,int,*`,int,struct`),struct(*`,*`,*`,int,int,int,struct`,int,int,*`,*`),int)),int,array(char),*(char),char,int,int,int,int,int,int,int,int,struct(char,char,char,char,char,char),int,char,int,int,int,int,int,int,int,int,int,int,int,int,int,int,struct(char,char,array(int)),int,struct(char,char,char,char,char,char),struct(long,long),int,char,int,*(char),int,int,int,int,int,int,struct(*(struct(*`,*`,*`,int,int,int,struct`,int,int,*`,*`)),*((*`,*`)->(void)),*(char),int,int,int,struct(long,long),int,int,*(int),*(int)),struct(*(struct(*`,*`,*`,int,int,int,struct`,int,int,*`,*`)),*((*`,*`)->(void)),*(char),int,int,int,struct(long,long),int,int,*(int),*(int)),int,*(struct(int,*(*`),*(int),int)),int,array(char),int,struct(*(struct(*`,*`,*`,int,int,int,struct`,int,int,*`,*`)),*((*`,*`)->(void)),*(char),int,int,int,struct(long,long),int,int,*(int),*(int)),struct(*(struct(*`,*`,*`,int,int,int,struct`,int,int,*`,*`)),*((*`,*`)->(void)),*(char),int,int,int,struct(long,long),int,int,*(int),*(int)),struct(*(struct(*`,*`,*`,int,int,int,struct`,int,int,*`,*`)),*((*`,*`)->(void)),*(char),int,int,int,struct(long,long),int,int,*(int),*(int)),struct(struct(int,int,int,int,char,array(char),int,int)),struct(struct(int,int,int,int,char,array(char),int,int)),int,int,*(char),int,int,int,*(char),int,int,int,int,*(char),*(char),int,*(char),struct(*(struct(*`,*`,*`,int,int,int,struct`,int,int,*`,*`)),*((*`,*`)->(void)),*(char),int,int,int,struct(long,long),int,int,*(int),*(int)),int,int,array(union(int,int,*(char))),array(*(char)),array(char),int,short,array(char),*(*(*(char))),int,int,int,int,int,int,int,int,int,*(char),struct(short,int,array(char),array(char),array(char),array(char),struct(short,short),int,struct(int,int),array(int),array(char)),int,int,int,struct(*(struct(*`,*`,*`,int,int,int,struct`,int,int,*`,*`)),*((*`,*`)->(void)),*(char),int,int,int,struct(long,long),int,int,*(int),*(int)),int,struct(*(struct(*`,*`,*`,int,int,int,struct`,int,int,*`,*`)),*((*`,*`)->(void)),*(char),int,int,int,struct(long,long),int,int,*(int),*(int))))
=	O
0	int
;	O
ServerSocket	int
=	O
-	O
1	int
;	O
if	O
(	O
setgid	(int)->(int)
(	O
real_gid	int
)	O
)	O
Panic	(int,*(char))->(void)
(	O
errno	O
,	O
"setgid"	*(char)
)	O
;	O
if	O
(	O
setuid	(int)->(int)
(	O
own_uid	int
)	O
)	O
Panic	(int,*(char))->(void)
(	O
errno	O
,	O
"setuid"	*(char)
)	O
;	O
closeallfiles	(int)->(void)
(	O
0	int
)	O
;	O
execl	(*(char),*(char))->(int)
(	O
prg	*(char)
,	O
"SCREEN-LOCK"	*(char)
,	O
NULL	O
)	O
;	O
exit	(int)->(void)
(	O
errno	O
)	O
;	O
}	O
if	O
(	O
pid	int
==	O
-	O
1	int
)	O
Msg	(int,*(char))->(void)
(	O
errno	O
,	O
"Cannot lock terminal - fork failed"	*(char)
)	O
;	O
else	O
{	O
int	O
wstat	int
;	O
int	O
wret	int
;	O
errno	O
=	O
0	int
;	O
while	O
(	O
(	O
(	O
wret	int
=	O
wait	(*(int))->(int)
(	O
&	O
wstat	int
)	O
)	O
!=	O
pid	int
)	O
||	O
(	O
(	O
wret	int
==	O
-	O
1	int
)	O
&&	O
(	O
errno	O
==	O
EINTR	int
)	O
)	O
)	O
errno	O
=	O
0	int
;	O
if	O
(	O
errno	O
)	O
{	O
Msg	(int,*(char))->(void)
(	O
errno	O
,	O
"Lock"	*(char)
)	O
;	O
sleep	(int)->(int)
(	O
2	int
)	O
;	O
}	O
else	O
if	O
(	O
WTERMSIG	O
(	O
wstat	int
)	O
!=	O
0	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"Lock: %s: Killed by signal: %d%s\n"	*(char)
,	O
prg	*(char)
,	O
WTERMSIG	O
(	O
wstat	int
)	O
,	O
WIFCORESIG	O
(	O
wstat	int
)	O
?	O
" (Core dumped)"	*(char)
:	O
""	*(char)
)	O
;	O
sleep	(int)->(int)
(	O
2	int
)	O
;	O
}	O
else	O
if	O
(	O
WEXITSTATUS	O
(	O
wstat	int
)	O
)	O
{	O
debug2	O
(	O
"Lock: %s: return code %d\n"	*(char)
,	O
prg	*(char)
,	O
WEXITSTATUS	O
(	O
wstat	int
)	O
)	O
;	O
}	O
else	O
printf	(*(char))->(int)
(	O
"%s"	*(char)
,	O
LockEnd	array(char)
)	O
;	O
}	O
}	O
else	O
{	O
if	O
(	O
prg	*(char)
)	O
{	O
debug1	O
(	O
"lockterminal: '%s' seems NOT executable, we use our builtin\n"	*(char)
,	O
prg	*(char)
)	O
;	O
}	O
else	O
{	O
debug	O
(	O
"lockterminal: using buitin.\n"	*(char)
)	O
;	O
}	O
screen_builtin_lck	()->(void)
(	O
)	O
;	O
}	O
for	O
(	O
sig	int
=	O
1	int
;	O
sig	int
<	O
NSIG	O
;	O
sig	int
++	O
)	O
{	O
if	O
(	O
sigs	array(*((int)->(void)))
[	O
sig	int
]	O
!=	O
(	O
sigret_t	void
(	O
*	O
)	O
__P	O
(	O
SIGPROTOARG	O
)	O
)	O
-	O
1	int
)	O
signal	(int,*((int)->(void)))->(*((int)->(void)))
(	O
sig	int
,	O
sigs	array(*((int)->(void)))
[	O
sig	int
]	O
)	O
;	O
}	O
}	O
static	O
void	O
screen_builtin_lck	()->(void)
(	O
)	O
{	O
char	O
fullname	array(char)
[	O
100	int
]	O
,	O
*	O
cp1	*(char)
,	O
message	array(char)
[	O
100	int
+	O
100	int
]	O
;	O
char	O
*	O
pass	*(char)
=	O
0	int
,	O
mypass	array(char)
[	O
16	int
+	O
1	int
]	O
,	O
salt	array(char)
[	O
3	int
]	O
;	O
int	O
using_pam	int
=	O
1	int
;	O
using_pam	int
=	O
0	int
;	O
pass	*(char)
=	O
ppp	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
->	O
pw_passwd	*(char)
;	O
if	O
(	O
pass	*(char)
==	O
0	int
||	O
*	O
pass	*(char)
==	O
0	int
)	O
{	O
if	O
(	O
(	O
pass	*(char)
=	O
getpass	(*(char))->(*(char))
(	O
"Key:   "	*(char)
)	O
)	O
)	O
{	O
strncpy	(*(char),*(char),long)->(*(char))
(	O
mypass	array(char)
,	O
pass	*(char)
,	O
sizeof	O
(	O
mypass	array(char)
)	O
-	O
1	int
)	O
;	O
mypass	array(char)
[	O
sizeof	O
(	O
mypass	array(char)
)	O
-	O
1	int
]	O
=	O
0	int
;	O
if	O
(	O
*	O
mypass	array(char)
==	O
0	int
)	O
return	O
;	O
if	O
(	O
(	O
pass	*(char)
=	O
getpass	(*(char))->(*(char))
(	O
"Again: "	*(char)
)	O
)	O
)	O
{	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
mypass	array(char)
,	O
pass	*(char)
)	O
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"Passwords don't match.\007\n"	*(char)
)	O
;	O
sleep	(int)->(int)
(	O
2	int
)	O
;	O
return	O
;	O
}	O
}	O
}	O
if	O
(	O
pass	*(char)
==	O
0	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"Getpass error.\007\n"	*(char)
)	O
;	O
sleep	(int)->(int)
(	O
2	int
)	O
;	O
return	O
;	O
}	O
salt	array(char)
[	O
0	int
]	O
=	O
'A'	O
+	O
(	O
int	O
)	O
(	O
time	struct(long,long)
(	O
0	int
)	O
%	O
26	int
)	O
;	O
salt	array(char)
[	O
1	int
]	O
=	O
'A'	O
+	O
(	O
int	O
)	O
(	O
(	O
time	struct(long,long)
(	O
0	int
)	O
>>	O
6	int
)	O
%	O
26	int
)	O
;	O
salt	array(char)
[	O
2	int
]	O
=	O
0	int
;	O
pass	*(char)
=	O
crypt	(*(char),*(char))->(*(char))
(	O
mypass	array(char)
,	O
salt	array(char)
)	O
;	O
if	O
(	O
!	O
pass	*(char)
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"crypt() error.\007\n"	*(char)
)	O
;	O
sleep	(int)->(int)
(	O
2	int
)	O
;	O
return	O
;	O
}	O
pass	*(char)
=	O
ppp	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
->	O
pw_passwd	*(char)
=	O
SaveStr	(*(char))->(*(char))
(	O
pass	*(char)
)	O
;	O
}	O
debug	O
(	O
"screen_builtin_lck looking in gcos field\n"	*(char)
)	O
;	O
strncpy	(*(char),*(char),long)->(*(char))
(	O
fullname	array(char)
,	O
ppp	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
->	O
pw_gecos	*(char)
,	O
sizeof	O
(	O
fullname	array(char)
)	O
-	O
9	int
)	O
;	O
fullname	array(char)
[	O
sizeof	O
(	O
fullname	array(char)
)	O
-	O
9	int
]	O
=	O
0	int
;	O
if	O
(	O
(	O
cp1	*(char)
=	O
index	(*(char),int)->(*(char))
(	O
fullname	array(char)
,	O
','	O
)	O
)	O
!=	O
NULL	O
)	O
*	O
cp1	*(char)
=	O
'\0'	O
;	O
if	O
(	O
(	O
cp1	*(char)
=	O
index	(*(char),int)->(*(char))
(	O
fullname	array(char)
,	O
'&'	O
)	O
)	O
!=	O
NULL	O
)	O
{	O
strncpy	(*(char),*(char),long)->(*(char))
(	O
cp1	*(char)
,	O
ppp	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
->	O
pw_name	*(char)
,	O
8	int
)	O
;	O
cp1	*(char)
[	O
8	int
]	O
=	O
0	int
;	O
if	O
(	O
*	O
cp1	*(char)
>=	O
'a'	O
&&	O
*	O
cp1	*(char)
<=	O
'z'	O
)	O
*	O
cp1	*(char)
-=	O
'a'	O
-	O
'A'	O
;	O
}	O
sprintf	(*(char),*(char))->(int)
(	O
message	array(char)
,	O
"Screen used by %s%s<%s> on %s.\nPassword:\007"	*(char)
,	O
fullname	array(char)
,	O
fullname	array(char)
[	O
0	int
]	O
?	O
" "	*(char)
:	O
""	*(char)
,	O
ppp	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
->	O
pw_name	*(char)
,	O
HostName	array(char)
)	O
;	O
for	O
(	O
;	O
;	O
)	O
{	O
debug	O
(	O
"screen_builtin_lck awaiting password\n"	*(char)
)	O
;	O
errno	O
=	O
0	int
;	O
if	O
(	O
(	O
cp1	*(char)
=	O
getpass	(*(char))->(*(char))
(	O
message	array(char)
)	O
)	O
==	O
NULL	O
)	O
{	O
AttacherFinit	(int)->(void)
(	O
SIGARG	int
)	O
;	O
}	O
if	O
(	O
using_pam	int
)	O
{	O
}	O
else	O
{	O
char	O
*	O
buf	*(char)
=	O
crypt	(*(char),*(char))->(*(char))
(	O
cp1	*(char)
,	O
pass	*(char)
)	O
;	O
if	O
(	O
buf	*(char)
&&	O
!	O
strncmp	(*(char),*(char),long)->(int)
(	O
buf	*(char)
,	O
pass	*(char)
,	O
strlen	(*(char))->(long)
(	O
pass	*(char)
)	O
)	O
)	O
break	O
;	O
}	O
debug	O
(	O
"screen_builtin_lck: NO!!!!!\n"	*(char)
)	O
;	O
bzero	(*(void),long)->(void)
(	O
cp1	*(char)
,	O
strlen	(*(char))->(long)
(	O
cp1	*(char)
)	O
)	O
;	O
}	O
bzero	(*(void),long)->(void)
(	O
cp1	*(char)
,	O
strlen	(*(char))->(long)
(	O
cp1	*(char)
)	O
)	O
;	O
debug	O
(	O
"password ok.\n"	*(char)
)	O
;	O
}	O
void	O
SendCmdMessage	(*(char),*(char),*(*(char)),int)->(void)
(	O
sty	*(char)
,	O
match	*(char)
,	O
av	*(*(char))
,	O
query	int
)	O
char	O
*	O
sty	*(char)
;	O
char	O
*	O
match	*(char)
;	O
char	O
*	O
*	O
av	*(*(char))
;	O
int	O
query	int
;	O
{	O
int	O
i	int
,	O
s	int
;	O
struct	O
msg	struct(int,int,array(char),union(struct(int,int,int,int,int,array(char),array(char),array(char)),struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int),struct(array(char),int),struct(array(char),int,array(char),int,array(char),array(char)),array(char)))
m	union(struct(int,int,int,int,int,array(char),array(char),array(char)),struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int),struct(array(char),int),struct(array(char),int,array(char),int,array(char),array(char)),array(char))
;	O
char	O
*	O
p	*(char)
;	O
int	O
len	int
,	O
n	int
;	O
bool	bool
is_socket	bool
;	O
if	O
(	O
sty	*(char)
==	O
0	int
)	O
{	O
i	int
=	O
FindSocket	(*(int),*(int),*(int),*(char),*(bool))->(int)
(	O
&	O
s	int
,	O
(	O
int	O
*	O
)	O
0	int
,	O
(	O
int	O
*	O
)	O
0	int
,	O
match	*(char)
,	O
&	O
is_socket	bool
)	O
;	O
if	O
(	O
i	int
==	O
0	int
)	O
Panic	(int,*(char))->(void)
(	O
0	int
,	O
"No screen session found."	*(char)
)	O
;	O
if	O
(	O
i	int
!=	O
1	int
)	O
Panic	(int,*(char))->(void)
(	O
0	int
,	O
"Use -S to specify a session."	*(char)
)	O
;	O
}	O
else	O
{	O
if	O
(	O
strlen	(*(char))->(long)
(	O
sty	*(char)
)	O
>	O
NAME_MAX	int
)	O
sty	*(char)
[	O
NAME_MAX	int
]	O
=	O
0	int
;	O
if	O
(	O
strlen	(*(char))->(long)
(	O
sty	*(char)
)	O
>	O
2	int
*	O
MAXSTR	int
-	O
1	int
)	O
sty	*(char)
[	O
2	int
*	O
MAXSTR	int
-	O
1	int
]	O
=	O
0	int
;	O
sprintf	(*(char),*(char))->(int)
(	O
SockPath	array(char)
+	O
strlen	(*(char))->(long)
(	O
SockPath	array(char)
)	O
,	O
"/%s"	*(char)
,	O
sty	*(char)
)	O
;	O
is_socket	bool
=	O
IsSocket	(*(char))->(bool)
(	O
SockPath	array(char)
)	O
;	O
if	O
(	O
(	O
s	int
=	O
MakeClientSocket	(int,bool)->(int)
(	O
1	int
,	O
is_socket	bool
)	O
)	O
==	O
-	O
1	int
)	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
bzero	(*(void),long)->(void)
(	O
(	O
char	O
*	O
)	O
&	O
m	union(struct(int,int,int,int,int,array(char),array(char),array(char)),struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int),struct(array(char),int),struct(array(char),int,array(char),int,array(char),array(char)),array(char))
,	O
sizeof	O
(	O
m	union(struct(int,int,int,int,int,array(char),array(char),array(char)),struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int),struct(array(char),int),struct(array(char),int,array(char),int,array(char),array(char)),array(char))
)	O
)	O
;	O
m	union(struct(int,int,int,int,int,array(char),array(char),array(char)),struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int),struct(array(char),int),struct(array(char),int,array(char),int,array(char),array(char)),array(char))
.	O
type	enum(int,int,int,int)
=	O
query	int
?	O
MSG_QUERY	int
:	O
MSG_COMMAND	int
;	O
if	O
(	O
attach_tty	*(char)
)	O
{	O
strncpy	(*(char),*(char),long)->(*(char))
(	O
m	union(struct(int,int,int,int,int,array(char),array(char),array(char)),struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int),struct(array(char),int),struct(array(char),int,array(char),int,array(char),array(char)),array(char))
.	O
m_tty	array(char)
,	O
attach_tty_is_in_new_ns	bool
?	O
attach_tty_name_in_ns	array(char)
:	O
attach_tty	*(char)
,	O
sizeof	O
(	O
m	union(struct(int,int,int,int,int,array(char),array(char),array(char)),struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int),struct(array(char),int),struct(array(char),int,array(char),int,array(char),array(char)),array(char))
.	O
m_tty	array(char)
)	O
-	O
1	int
)	O
;	O
m	union(struct(int,int,int,int,int,array(char),array(char),array(char)),struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int),struct(array(char),int),struct(array(char),int,array(char),int,array(char),array(char)),array(char))
.	O
m_tty	array(char)
[	O
sizeof	O
(	O
m	union(struct(int,int,int,int,int,array(char),array(char),array(char)),struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int),struct(array(char),int),struct(array(char),int,array(char),int,array(char),array(char)),array(char))
.	O
m_tty	array(char)
)	O
-	O
1	int
]	O
=	O
0	int
;	O
}	O
p	*(char)
=	O
m	union(struct(int,int,int,int,int,array(char),array(char),array(char)),struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int),struct(array(char),int),struct(array(char),int,array(char),int,array(char),array(char)),array(char))
.	O
m	union(struct(int,int,int,int,int,array(char),array(char),array(char)),struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int),struct(array(char),int),struct(array(char),int,array(char),int,array(char),array(char)),array(char))
.	O
command	struct(array(char),int,array(char),int,array(char),array(char))
.	O
cmd	array(char)
;	O
n	int
=	O
0	int
;	O
for	O
(	O
;	O
*	O
av	*(*(char))
&&	O
n	int
<	O
MAXARGS	int
-	O
1	int
;	O
++	O
av	*(*(char))
,	O
++	O
n	int
)	O
{	O
len	int
=	O
strlen	(*(char))->(long)
(	O
*	O
av	*(*(char))
)	O
+	O
1	int
;	O
if	O
(	O
p	*(char)
+	O
len	int
>=	O
m	union(struct(int,int,int,int,int,array(char),array(char),array(char)),struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int),struct(array(char),int),struct(array(char),int,array(char),int,array(char),array(char)),array(char))
.	O
m	union(struct(int,int,int,int,int,array(char),array(char),array(char)),struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int),struct(array(char),int),struct(array(char),int,array(char),int,array(char),array(char)),array(char))
.	O
command	struct(array(char),int,array(char),int,array(char),array(char))
.	O
cmd	array(char)
+	O
sizeof	O
(	O
m	union(struct(int,int,int,int,int,array(char),array(char),array(char)),struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int),struct(array(char),int),struct(array(char),int,array(char),int,array(char),array(char)),array(char))
.	O
m	union(struct(int,int,int,int,int,array(char),array(char),array(char)),struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int),struct(array(char),int),struct(array(char),int,array(char),int,array(char),array(char)),array(char))
.	O
command	struct(array(char),int,array(char),int,array(char),array(char))
.	O
cmd	array(char)
)	O
-	O
1	int
)	O
break	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
p	*(char)
,	O
*	O
av	*(*(char))
)	O
;	O
p	*(char)
+=	O
len	int
;	O
}	O
*	O
p	*(char)
=	O
0	int
;	O
m	union(struct(int,int,int,int,int,array(char),array(char),array(char)),struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int),struct(array(char),int),struct(array(char),int,array(char),int,array(char),array(char)),array(char))
.	O
m	union(struct(int,int,int,int,int,array(char),array(char),array(char)),struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int),struct(array(char),int),struct(array(char),int,array(char),int,array(char),array(char)),array(char))
.	O
command	struct(array(char),int,array(char),int,array(char),array(char))
.	O
nargs	int
=	O
n	int
;	O
strncpy	(*(char),*(char),long)->(*(char))
(	O
m	union(struct(int,int,int,int,int,array(char),array(char),array(char)),struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int),struct(array(char),int),struct(array(char),int,array(char),int,array(char),array(char)),array(char))
.	O
m	union(struct(int,int,int,int,int,array(char),array(char),array(char)),struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int),struct(array(char),int),struct(array(char),int,array(char),int,array(char),array(char)),array(char))
.	O
attach	struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int)
.	O
auser	array(char)
,	O
LoginName	*(char)
,	O
sizeof	O
(	O
m	union(struct(int,int,int,int,int,array(char),array(char),array(char)),struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int),struct(array(char),int),struct(array(char),int,array(char),int,array(char),array(char)),array(char))
.	O
m	union(struct(int,int,int,int,int,array(char),array(char),array(char)),struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int),struct(array(char),int),struct(array(char),int,array(char),int,array(char),array(char)),array(char))
.	O
attach	struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int)
.	O
auser	array(char)
)	O
-	O
1	int
)	O
;	O
m	union(struct(int,int,int,int,int,array(char),array(char),array(char)),struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int),struct(array(char),int),struct(array(char),int,array(char),int,array(char),array(char)),array(char))
.	O
m	union(struct(int,int,int,int,int,array(char),array(char),array(char)),struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int),struct(array(char),int),struct(array(char),int,array(char),int,array(char),array(char)),array(char))
.	O
command	struct(array(char),int,array(char),int,array(char),array(char))
.	O
auser	array(char)
[	O
sizeof	O
(	O
m	union(struct(int,int,int,int,int,array(char),array(char),array(char)),struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int),struct(array(char),int),struct(array(char),int,array(char),int,array(char),array(char)),array(char))
.	O
m	union(struct(int,int,int,int,int,array(char),array(char),array(char)),struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int),struct(array(char),int),struct(array(char),int,array(char),int,array(char),array(char)),array(char))
.	O
command	struct(array(char),int,array(char),int,array(char),array(char))
.	O
auser	array(char)
)	O
-	O
1	int
]	O
=	O
0	int
;	O
m	union(struct(int,int,int,int,int,array(char),array(char),array(char)),struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int),struct(array(char),int),struct(array(char),int,array(char),int,array(char),array(char)),array(char))
.	O
protocol_revision	int
=	O
MSG_REVISION	O
;	O
strncpy	(*(char),*(char),long)->(*(char))
(	O
m	union(struct(int,int,int,int,int,array(char),array(char),array(char)),struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int),struct(array(char),int),struct(array(char),int,array(char),int,array(char),array(char)),array(char))
.	O
m	union(struct(int,int,int,int,int,array(char),array(char),array(char)),struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int),struct(array(char),int),struct(array(char),int,array(char),int,array(char),array(char)),array(char))
.	O
command	struct(array(char),int,array(char),int,array(char),array(char))
.	O
preselect	array(char)
,	O
preselect	array(char)
?	O
preselect	array(char)
:	O
""	*(char)
,	O
sizeof	O
(	O
m	union(struct(int,int,int,int,int,array(char),array(char),array(char)),struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int),struct(array(char),int),struct(array(char),int,array(char),int,array(char),array(char)),array(char))
.	O
m	union(struct(int,int,int,int,int,array(char),array(char),array(char)),struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int),struct(array(char),int),struct(array(char),int,array(char),int,array(char),array(char)),array(char))
.	O
command	struct(array(char),int,array(char),int,array(char),array(char))
.	O
preselect	array(char)
)	O
-	O
1	int
)	O
;	O
m	union(struct(int,int,int,int,int,array(char),array(char),array(char)),struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int),struct(array(char),int),struct(array(char),int,array(char),int,array(char),array(char)),array(char))
.	O
m	union(struct(int,int,int,int,int,array(char),array(char),array(char)),struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int),struct(array(char),int),struct(array(char),int,array(char),int,array(char),array(char)),array(char))
.	O
command	struct(array(char),int,array(char),int,array(char),array(char))
.	O
preselect	array(char)
[	O
sizeof	O
(	O
m	union(struct(int,int,int,int,int,array(char),array(char),array(char)),struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int),struct(array(char),int),struct(array(char),int,array(char),int,array(char),array(char)),array(char))
.	O
m	union(struct(int,int,int,int,int,array(char),array(char),array(char)),struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int),struct(array(char),int),struct(array(char),int,array(char),int,array(char),array(char)),array(char))
.	O
command	struct(array(char),int,array(char),int,array(char),array(char))
.	O
preselect	array(char)
)	O
-	O
1	int
]	O
=	O
0	int
;	O
m	union(struct(int,int,int,int,int,array(char),array(char),array(char)),struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int),struct(array(char),int),struct(array(char),int,array(char),int,array(char),array(char)),array(char))
.	O
m	union(struct(int,int,int,int,int,array(char),array(char),array(char)),struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int),struct(array(char),int),struct(array(char),int,array(char),int,array(char),array(char)),array(char))
.	O
command	struct(array(char),int,array(char),int,array(char),array(char))
.	O
apid	int
=	O
getpid	()->(int)
(	O
)	O
;	O
debug1	O
(	O
"SendCommandMsg writing '%s'\n"	*(char)
,	O
m	union(struct(int,int,int,int,int,array(char),array(char),array(char)),struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int),struct(array(char),int),struct(array(char),int,array(char),int,array(char),array(char)),array(char))
.	O
m	union(struct(int,int,int,int,int,array(char),array(char),array(char)),struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int),struct(array(char),int),struct(array(char),int,array(char),int,array(char),array(char)),array(char))
.	O
command	struct(array(char),int,array(char),int,array(char),array(char))
.	O
cmd	array(char)
)	O
;	O
if	O
(	O
query	int
)	O
{	O
char	O
*	O
sp	*(char)
=	O
SockPath	array(char)
+	O
strlen	(*(char))->(long)
(	O
SockPath	array(char)
)	O
;	O
char	O
query	int
[	O
]	O
=	O
"-queryX"	*(char)
;	O
char	O
c	char
;	O
int	O
r	int
=	O
-	O
1	int
;	O
for	O
(	O
c	char
=	O
'A'	O
;	O
c	char
<=	O
'Z'	O
;	O
c	char
++	O
)	O
{	O
query	int
[	O
6	int
]	O
=	O
c	char
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
sp	*(char)
,	O
query	int
)	O
;	O
if	O
(	O
(	O
r	int
=	O
MakeServerSocket	(bool)->(int)
(	O
is_socket	bool
)	O
)	O
>=	O
0	int
)	O
break	O
;	O
}	O
if	O
(	O
r	int
<	O
0	int
)	O
{	O
for	O
(	O
c	char
=	O
'0'	O
;	O
c	char
<=	O
'9'	O
;	O
c	char
++	O
)	O
{	O
query	int
[	O
6	int
]	O
=	O
c	char
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
sp	*(char)
,	O
query	int
)	O
;	O
if	O
(	O
(	O
r	int
=	O
MakeServerSocket	(bool)->(int)
(	O
is_socket	bool
)	O
)	O
>=	O
0	int
)	O
break	O
;	O
}	O
}	O
if	O
(	O
r	int
<	O
0	int
)	O
Panic	(int,*(char))->(void)
(	O
0	int
,	O
"Could not create a listening socket to read the results."	*(char)
)	O
;	O
strncpy	(*(char),*(char),long)->(*(char))
(	O
m	union(struct(int,int,int,int,int,array(char),array(char),array(char)),struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int),struct(array(char),int),struct(array(char),int,array(char),int,array(char),array(char)),array(char))
.	O
m	union(struct(int,int,int,int,int,array(char),array(char),array(char)),struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int),struct(array(char),int),struct(array(char),int,array(char),int,array(char),array(char)),array(char))
.	O
command	struct(array(char),int,array(char),int,array(char),array(char))
.	O
writeback	array(char)
,	O
SockPath	array(char)
,	O
sizeof	O
(	O
m	union(struct(int,int,int,int,int,array(char),array(char),array(char)),struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int),struct(array(char),int),struct(array(char),int,array(char),int,array(char),array(char)),array(char))
.	O
m	union(struct(int,int,int,int,int,array(char),array(char),array(char)),struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int),struct(array(char),int),struct(array(char),int,array(char),int,array(char),array(char)),array(char))
.	O
command	struct(array(char),int,array(char),int,array(char),array(char))
.	O
writeback	array(char)
)	O
-	O
1	int
)	O
;	O
m	union(struct(int,int,int,int,int,array(char),array(char),array(char)),struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int),struct(array(char),int),struct(array(char),int,array(char),int,array(char),array(char)),array(char))
.	O
m	union(struct(int,int,int,int,int,array(char),array(char),array(char)),struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int),struct(array(char),int),struct(array(char),int,array(char),int,array(char),array(char)),array(char))
.	O
command	struct(array(char),int,array(char),int,array(char),array(char))
.	O
writeback	array(char)
[	O
sizeof	O
(	O
m	union(struct(int,int,int,int,int,array(char),array(char),array(char)),struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int),struct(array(char),int),struct(array(char),int,array(char),int,array(char),array(char)),array(char))
.	O
m	union(struct(int,int,int,int,int,array(char),array(char),array(char)),struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int),struct(array(char),int),struct(array(char),int,array(char),int,array(char),array(char)),array(char))
.	O
command	struct(array(char),int,array(char),int,array(char),array(char))
.	O
writeback	array(char)
)	O
-	O
1	int
]	O
=	O
'\0'	O
;	O
signal	(int,*((int)->(void)))->(*((int)->(void)))
(	O
SIGCONT	int
,	O
QueryResultSuccess	(int)->(void)
)	O
;	O
signal	(int,*((int)->(void)))->(*((int)->(void)))
(	O
SIG_BYE	O
,	O
QueryResultFail	(int)->(void)
)	O
;	O
if	O
(	O
WriteMessage	(int,*(struct(int,int,array(char),union(struct(int,int,int,int,int,array(char),array(char),array(char)),struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int),struct(array(char),int),struct(array(char),int,array(char),int,array(char),array(char)),array(char)))))->(int)
(	O
s	int
,	O
&	O
m	union(struct(int,int,int,int,int,array(char),array(char),array(char)),struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int),struct(array(char),int),struct(array(char),int,array(char),int,array(char),array(char)),array(char))
)	O
)	O
Msg	(int,*(char))->(void)
(	O
errno	O
,	O
"write"	*(char)
)	O
;	O
close	*((*(void))->(int))
(	O
s	int
)	O
;	O
while	O
(	O
!	O
QueryResult	int
)	O
pause	()->(int)
(	O
)	O
;	O
signal	(int,*((int)->(void)))->(*((int)->(void)))
(	O
SIGCONT	int
,	O
SIG_DFL	O
)	O
;	O
signal	(int,*((int)->(void)))->(*((int)->(void)))
(	O
SIG_BYE	O
,	O
SIG_DFL	O
)	O
;	O
ReceiveRaw	(int)->(void)
(	O
r	int
)	O
;	O
unlink	(*(char))->(int)
(	O
SockPath	array(char)
)	O
;	O
if	O
(	O
QueryResult	int
==	O
2	int
)	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
else	O
{	O
if	O
(	O
WriteMessage	(int,*(struct(int,int,array(char),union(struct(int,int,int,int,int,array(char),array(char),array(char)),struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int),struct(array(char),int),struct(array(char),int,array(char),int,array(char),array(char)),array(char)))))->(int)
(	O
s	int
,	O
&	O
m	union(struct(int,int,int,int,int,array(char),array(char),array(char)),struct(array(char),int,int,int,int,array(char),int,int,array(char),int,int),struct(array(char),int),struct(array(char),int,array(char),int,array(char),array(char)),array(char))
)	O
)	O
Msg	(int,*(char))->(void)
(	O
errno	O
,	O
"write"	*(char)
)	O
;	O
close	*((*(void))->(int))
(	O
s	int
)	O
;	O
}	O
}	O
