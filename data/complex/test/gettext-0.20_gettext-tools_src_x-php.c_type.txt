static	O
bool	bool
extract_all	bool
=	O
false	int
;	O
static	O
hash_table	struct(long,long,*(struct),*(struct),struct(long,*(struct(*(char),*(struct(*`,*`,array(char))),array(char))),*(char),*(char),*(char),union(long,*(void)),long,union(*((long)->(*(void))),*((*(void),long)->(*(void)))),union(*((*(void))->(void)),*((*(void),*(void))->(void))),*(void),int,int,int))
keywords	struct(long,long,*(struct),*(struct),struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),long,union(*((long)->(*`)),*((*`,long)->(*`))),union(*((*`)->(void)),*((*`,*`)->(void))),*(void),int,int,int))
;	O
static	O
bool	bool
default_keywords	bool
=	O
true	int
;	O
void	O
x_php_extract_all	()->(void)
(	O
)	O
{	O
extract_all	bool
=	O
true	int
;	O
}	O
void	O
x_php_keyword	(*(char))->(void)
(	O
const	O
char	O
*	O
name	*(char)
)	O
{	O
if	O
(	O
name	*(char)
==	O
NULL	O
)	O
default_keywords	bool
=	O
false	int
;	O
else	O
{	O
const	O
char	O
*	O
end	*(char)
;	O
struct	O
callshape	struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long))
shape	*(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long)))
;	O
const	O
char	O
*	O
colon	*(char)
;	O
if	O
(	O
keywords	struct(long,long,*(struct),*(struct),struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),long,union(*((long)->(*`)),*((*`,long)->(*`))),union(*((*`)->(void)),*((*`,*`)->(void))),*(void),int,int,int))
.	O
table	*(struct)
==	O
NULL	O
)	O
hash_init	(*(struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))),long)->(int)
(	O
&	O
keywords	struct(long,long,*(struct),*(struct),struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),long,union(*((long)->(*`)),*((*`,long)->(*`))),union(*((*`)->(void)),*((*`,*`)->(void))),*(void),int,int,int))
,	O
100	int
)	O
;	O
split_keywordspec	(*(char),*(*(char)),*(struct(int,int,int,bool,bool,int,struct(*(*`),long,long))))->(void)
(	O
name	*(char)
,	O
&	O
end	*(char)
,	O
&	O
shape	*(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long)))
)	O
;	O
colon	*(char)
=	O
strchr	(*(char),int)->(*(char))
(	O
name	*(char)
,	O
':'	O
)	O
;	O
if	O
(	O
colon	*(char)
==	O
NULL	O
||	O
colon	*(char)
>=	O
end	*(char)
)	O
insert_keyword_callshape	(*(struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))),*(char),long,*(struct(int,int,int,bool,bool,int,struct(*(*`),long,long))))->(void)
(	O
&	O
keywords	struct(long,long,*(struct),*(struct),struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),long,union(*((long)->(*`)),*((*`,long)->(*`))),union(*((*`)->(void)),*((*`,*`)->(void))),*(void),int,int,int))
,	O
name	*(char)
,	O
end	*(char)
-	O
name	*(char)
,	O
&	O
shape	*(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long)))
)	O
;	O
}	O
}	O
static	O
void	O
init_keywords	()->(void)
(	O
)	O
{	O
if	O
(	O
default_keywords	bool
)	O
{	O
x_php_keyword	(*(char))->(void)
(	O
"_"	*(char)
)	O
;	O
x_php_keyword	(*(char))->(void)
(	O
"gettext"	*(char)
)	O
;	O
x_php_keyword	(*(char))->(void)
(	O
"dgettext:2"	*(char)
)	O
;	O
x_php_keyword	(*(char))->(void)
(	O
"dcgettext:2"	*(char)
)	O
;	O
x_php_keyword	(*(char))->(void)
(	O
"ngettext:1,2"	*(char)
)	O
;	O
x_php_keyword	(*(char))->(void)
(	O
"dngettext:2,3"	*(char)
)	O
;	O
x_php_keyword	(*(char))->(void)
(	O
"dcngettext:2,3"	*(char)
)	O
;	O
default_keywords	bool
=	O
false	int
;	O
}	O
}	O
void	O
init_flag_table_php	()->(void)
(	O
)	O
{	O
xgettext_record_flag	(*(char))->(void)
(	O
"_:1:pass-php-format"	*(char)
)	O
;	O
xgettext_record_flag	(*(char))->(void)
(	O
"gettext:1:pass-php-format"	*(char)
)	O
;	O
xgettext_record_flag	(*(char))->(void)
(	O
"dgettext:2:pass-php-format"	*(char)
)	O
;	O
xgettext_record_flag	(*(char))->(void)
(	O
"dcgettext:2:pass-php-format"	*(char)
)	O
;	O
xgettext_record_flag	(*(char))->(void)
(	O
"ngettext:1:pass-php-format"	*(char)
)	O
;	O
xgettext_record_flag	(*(char))->(void)
(	O
"ngettext:2:pass-php-format"	*(char)
)	O
;	O
xgettext_record_flag	(*(char))->(void)
(	O
"dngettext:2:pass-php-format"	*(char)
)	O
;	O
xgettext_record_flag	(*(char))->(void)
(	O
"dngettext:3:pass-php-format"	*(char)
)	O
;	O
xgettext_record_flag	(*(char))->(void)
(	O
"dcngettext:2:pass-php-format"	*(char)
)	O
;	O
xgettext_record_flag	(*(char))->(void)
(	O
"dcngettext:3:pass-php-format"	*(char)
)	O
;	O
xgettext_record_flag	(*(char))->(void)
(	O
"sprintf:1:php-format"	*(char)
)	O
;	O
xgettext_record_flag	(*(char))->(void)
(	O
"printf:1:php-format"	*(char)
)	O
;	O
}	O
static	O
FILE	struct
*	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
;	O
static	O
unsigned	O
char	O
phase1_pushback	array(char)
[	O
2	int
]	O
;	O
static	O
int	O
phase1_pushback_length	int
;	O
static	O
int	O
phase1_getc	()->(int)
(	O
)	O
{	O
int	O
c	int
;	O
if	O
(	O
phase1_pushback_length	int
)	O
c	int
=	O
phase1_pushback	array(char)
[	O
--	O
phase1_pushback_length	int
]	O
;	O
else	O
{	O
c	int
=	O
getc	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
if	O
(	O
c	int
==	O
EOF	O
)	O
{	O
if	O
(	O
ferror	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
)	O
error	(int,int,*(char))->(void)
(	O
EXIT_FAILURE	int
,	O
errno	O
,	O
_	O
(	O
"error while reading \"%s\""	*(char)
)	O
,	O
real_file_name	*(char)
)	O
;	O
return	O
EOF	O
;	O
}	O
}	O
if	O
(	O
c	int
==	O
'\n'	O
)	O
line_number	long
++	O
;	O
return	O
c	int
;	O
}	O
static	O
void	O
phase1_ungetc	(int)->(void)
(	O
int	O
c	int
)	O
{	O
if	O
(	O
c	int
!=	O
EOF	O
)	O
{	O
if	O
(	O
c	int
==	O
'\n'	O
)	O
--	O
line_number	long
;	O
if	O
(	O
phase1_pushback_length	int
==	O
SIZEOF	O
(	O
phase1_pushback	array(char)
)	O
)	O
abort	()->(void)
(	O
)	O
;	O
phase1_pushback	array(char)
[	O
phase1_pushback_length	int
++	O
]	O
=	O
c	int
;	O
}	O
}	O
static	O
void	O
skip_html	()->(void)
(	O
)	O
{	O
for	O
(	O
;	O
;	O
)	O
{	O
int	O
c	int
=	O
phase1_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
c	int
==	O
EOF	O
)	O
return	O
;	O
if	O
(	O
c	int
==	O
'<'	O
)	O
{	O
int	O
c2	int
=	O
phase1_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
c2	int
==	O
EOF	O
)	O
break	O
;	O
if	O
(	O
c2	int
==	O
'?'	O
)	O
{	O
int	O
c3	int
=	O
phase1_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
c3	int
!=	O
'='	O
)	O
phase1_ungetc	(int)->(void)
(	O
c3	int
)	O
;	O
return	O
;	O
}	O
if	O
(	O
c2	int
==	O
'%'	O
)	O
{	O
int	O
c3	int
=	O
phase1_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
c3	int
!=	O
'='	O
)	O
phase1_ungetc	(int)->(void)
(	O
c3	int
)	O
;	O
return	O
;	O
}	O
if	O
(	O
c2	int
==	O
'<'	O
)	O
{	O
phase1_ungetc	(int)->(void)
(	O
c2	int
)	O
;	O
continue	O
;	O
}	O
while	O
(	O
c2	int
==	O
' '	O
||	O
c2	int
==	O
'\t'	O
||	O
c2	int
==	O
'\n'	O
||	O
c2	int
==	O
'\r'	O
)	O
c2	int
=	O
phase1_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
c2	int
!=	O
's'	O
&&	O
c2	int
!=	O
'S'	O
)	O
{	O
phase1_ungetc	(int)->(void)
(	O
c2	int
)	O
;	O
continue	O
;	O
}	O
c2	int
=	O
phase1_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
c2	int
!=	O
'c'	O
&&	O
c2	int
!=	O
'C'	O
)	O
{	O
phase1_ungetc	(int)->(void)
(	O
c2	int
)	O
;	O
continue	O
;	O
}	O
c2	int
=	O
phase1_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
c2	int
!=	O
'r'	O
&&	O
c2	int
!=	O
'R'	O
)	O
{	O
phase1_ungetc	(int)->(void)
(	O
c2	int
)	O
;	O
continue	O
;	O
}	O
c2	int
=	O
phase1_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
c2	int
!=	O
'i'	O
&&	O
c2	int
!=	O
'I'	O
)	O
{	O
phase1_ungetc	(int)->(void)
(	O
c2	int
)	O
;	O
continue	O
;	O
}	O
c2	int
=	O
phase1_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
c2	int
!=	O
'p'	O
&&	O
c2	int
!=	O
'P'	O
)	O
{	O
phase1_ungetc	(int)->(void)
(	O
c2	int
)	O
;	O
continue	O
;	O
}	O
c2	int
=	O
phase1_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
c2	int
!=	O
't'	O
&&	O
c2	int
!=	O
'T'	O
)	O
{	O
phase1_ungetc	(int)->(void)
(	O
c2	int
)	O
;	O
continue	O
;	O
}	O
c2	int
=	O
phase1_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
!	O
(	O
c2	int
==	O
' '	O
||	O
c2	int
==	O
'\t'	O
||	O
c2	int
==	O
'\n'	O
||	O
c2	int
==	O
'\r'	O
)	O
)	O
{	O
phase1_ungetc	(int)->(void)
(	O
c2	int
)	O
;	O
continue	O
;	O
}	O
do	O
c2	int
=	O
phase1_getc	()->(int)
(	O
)	O
;	O
while	O
(	O
c2	int
==	O
' '	O
||	O
c2	int
==	O
'\t'	O
||	O
c2	int
==	O
'\n'	O
||	O
c2	int
==	O
'\r'	O
)	O
;	O
if	O
(	O
c2	int
!=	O
'l'	O
&&	O
c2	int
!=	O
'L'	O
)	O
{	O
phase1_ungetc	(int)->(void)
(	O
c2	int
)	O
;	O
continue	O
;	O
}	O
c2	int
=	O
phase1_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
c2	int
!=	O
'a'	O
&&	O
c2	int
!=	O
'A'	O
)	O
{	O
phase1_ungetc	(int)->(void)
(	O
c2	int
)	O
;	O
continue	O
;	O
}	O
c2	int
=	O
phase1_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
c2	int
!=	O
'n'	O
&&	O
c2	int
!=	O
'N'	O
)	O
{	O
phase1_ungetc	(int)->(void)
(	O
c2	int
)	O
;	O
continue	O
;	O
}	O
c2	int
=	O
phase1_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
c2	int
!=	O
'g'	O
&&	O
c2	int
!=	O
'G'	O
)	O
{	O
phase1_ungetc	(int)->(void)
(	O
c2	int
)	O
;	O
continue	O
;	O
}	O
c2	int
=	O
phase1_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
c2	int
!=	O
'u'	O
&&	O
c2	int
!=	O
'U'	O
)	O
{	O
phase1_ungetc	(int)->(void)
(	O
c2	int
)	O
;	O
continue	O
;	O
}	O
c2	int
=	O
phase1_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
c2	int
!=	O
'a'	O
&&	O
c2	int
!=	O
'A'	O
)	O
{	O
phase1_ungetc	(int)->(void)
(	O
c2	int
)	O
;	O
continue	O
;	O
}	O
c2	int
=	O
phase1_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
c2	int
!=	O
'g'	O
&&	O
c2	int
!=	O
'G'	O
)	O
{	O
phase1_ungetc	(int)->(void)
(	O
c2	int
)	O
;	O
continue	O
;	O
}	O
c2	int
=	O
phase1_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
c2	int
!=	O
'e'	O
&&	O
c2	int
!=	O
'E'	O
)	O
{	O
phase1_ungetc	(int)->(void)
(	O
c2	int
)	O
;	O
continue	O
;	O
}	O
c2	int
=	O
phase1_getc	()->(int)
(	O
)	O
;	O
while	O
(	O
c2	int
==	O
' '	O
||	O
c2	int
==	O
'\t'	O
||	O
c2	int
==	O
'\n'	O
||	O
c2	int
==	O
'\r'	O
)	O
c2	int
=	O
phase1_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
c2	int
!=	O
'='	O
)	O
{	O
phase1_ungetc	(int)->(void)
(	O
c2	int
)	O
;	O
continue	O
;	O
}	O
c2	int
=	O
phase1_getc	()->(int)
(	O
)	O
;	O
while	O
(	O
c2	int
==	O
' '	O
||	O
c2	int
==	O
'\t'	O
||	O
c2	int
==	O
'\n'	O
||	O
c2	int
==	O
'\r'	O
)	O
c2	int
=	O
phase1_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
c2	int
==	O
'"'	O
)	O
{	O
c2	int
=	O
phase1_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
c2	int
!=	O
'p'	O
)	O
{	O
phase1_ungetc	(int)->(void)
(	O
c2	int
)	O
;	O
continue	O
;	O
}	O
c2	int
=	O
phase1_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
c2	int
!=	O
'h'	O
)	O
{	O
phase1_ungetc	(int)->(void)
(	O
c2	int
)	O
;	O
continue	O
;	O
}	O
c2	int
=	O
phase1_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
c2	int
!=	O
'p'	O
)	O
{	O
phase1_ungetc	(int)->(void)
(	O
c2	int
)	O
;	O
continue	O
;	O
}	O
c2	int
=	O
phase1_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
c2	int
!=	O
'"'	O
)	O
{	O
phase1_ungetc	(int)->(void)
(	O
c2	int
)	O
;	O
continue	O
;	O
}	O
}	O
else	O
if	O
(	O
c2	int
==	O
'\''	O
)	O
{	O
c2	int
=	O
phase1_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
c2	int
!=	O
'p'	O
)	O
{	O
phase1_ungetc	(int)->(void)
(	O
c2	int
)	O
;	O
continue	O
;	O
}	O
c2	int
=	O
phase1_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
c2	int
!=	O
'h'	O
)	O
{	O
phase1_ungetc	(int)->(void)
(	O
c2	int
)	O
;	O
continue	O
;	O
}	O
c2	int
=	O
phase1_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
c2	int
!=	O
'p'	O
)	O
{	O
phase1_ungetc	(int)->(void)
(	O
c2	int
)	O
;	O
continue	O
;	O
}	O
c2	int
=	O
phase1_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
c2	int
!=	O
'\''	O
)	O
{	O
phase1_ungetc	(int)->(void)
(	O
c2	int
)	O
;	O
continue	O
;	O
}	O
}	O
else	O
{	O
if	O
(	O
c2	int
!=	O
'p'	O
)	O
{	O
phase1_ungetc	(int)->(void)
(	O
c2	int
)	O
;	O
continue	O
;	O
}	O
c2	int
=	O
phase1_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
c2	int
!=	O
'h'	O
)	O
{	O
phase1_ungetc	(int)->(void)
(	O
c2	int
)	O
;	O
continue	O
;	O
}	O
c2	int
=	O
phase1_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
c2	int
!=	O
'p'	O
)	O
{	O
phase1_ungetc	(int)->(void)
(	O
c2	int
)	O
;	O
continue	O
;	O
}	O
}	O
c2	int
=	O
phase1_getc	()->(int)
(	O
)	O
;	O
while	O
(	O
c2	int
==	O
' '	O
||	O
c2	int
==	O
'\t'	O
||	O
c2	int
==	O
'\n'	O
||	O
c2	int
==	O
'\r'	O
)	O
c2	int
=	O
phase1_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
c2	int
!=	O
'>'	O
)	O
{	O
phase1_ungetc	(int)->(void)
(	O
c2	int
)	O
;	O
continue	O
;	O
}	O
return	O
;	O
}	O
}	O
}	O
static	O
char	O
*	O
buffer	*(char)
;	O
static	O
size_t	long
bufmax	long
;	O
static	O
size_t	long
buflen	long
;	O
static	O
inline	O
void	O
comment_start	()->(void)
(	O
)	O
{	O
buflen	long
=	O
0	int
;	O
}	O
static	O
inline	O
void	O
comment_add	(int)->(void)
(	O
int	O
c	int
)	O
{	O
if	O
(	O
buflen	long
>=	O
bufmax	long
)	O
{	O
bufmax	long
=	O
2	int
*	O
bufmax	long
+	O
10	int
;	O
buffer	*(char)
=	O
xrealloc	(*(void),long)->(*(void))
(	O
buffer	*(char)
,	O
bufmax	long
)	O
;	O
}	O
buffer	*(char)
[	O
buflen	long
++	O
]	O
=	O
c	int
;	O
}	O
static	O
inline	O
void	O
comment_line_end	(long)->(void)
(	O
size_t	long
chars_to_remove	long
)	O
{	O
buflen	long
-=	O
chars_to_remove	long
;	O
while	O
(	O
buflen	long
>=	O
1	int
&&	O
(	O
buffer	*(char)
[	O
buflen	long
-	O
1	int
]	O
==	O
' '	O
||	O
buffer	*(char)
[	O
buflen	long
-	O
1	int
]	O
==	O
'\t'	O
)	O
)	O
--	O
buflen	long
;	O
if	O
(	O
chars_to_remove	long
==	O
0	int
&&	O
buflen	long
>=	O
bufmax	long
)	O
{	O
bufmax	long
=	O
2	int
*	O
bufmax	long
+	O
10	int
;	O
buffer	*(char)
=	O
xrealloc	(*(void),long)->(*(void))
(	O
buffer	*(char)
,	O
bufmax	long
)	O
;	O
}	O
buffer	*(char)
[	O
buflen	long
]	O
=	O
'\0'	O
;	O
savable_comment_add	(*(char))->(void)
(	O
buffer	*(char)
)	O
;	O
}	O
static	O
int	O
last_comment_line	int
;	O
static	O
int	O
last_non_comment_line	int
;	O
static	O
unsigned	O
char	O
phase3_pushback	array(char)
[	O
1	int
]	O
;	O
static	O
int	O
phase3_pushback_length	int
;	O
static	O
int	O
phase3_getc	()->(int)
(	O
)	O
{	O
int	O
lineno	int
;	O
int	O
c	int
;	O
if	O
(	O
phase3_pushback_length	int
)	O
return	O
phase3_pushback	array(char)
[	O
--	O
phase3_pushback_length	int
]	O
;	O
c	int
=	O
phase1_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
c	int
==	O
'#'	O
)	O
{	O
bool	bool
last_was_qmark	bool
=	O
false	int
;	O
comment_start	()->(void)
(	O
)	O
;	O
lineno	int
=	O
line_number	long
;	O
for	O
(	O
;	O
;	O
)	O
{	O
c	int
=	O
phase1_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
c	int
==	O
'\n'	O
||	O
c	int
==	O
EOF	O
)	O
{	O
comment_line_end	(long)->(void)
(	O
0	int
)	O
;	O
break	O
;	O
}	O
if	O
(	O
last_was_qmark	bool
&&	O
c	int
==	O
'>'	O
)	O
{	O
comment_line_end	(long)->(void)
(	O
1	int
)	O
;	O
skip_html	()->(void)
(	O
)	O
;	O
break	O
;	O
}	O
if	O
(	O
!	O
(	O
buflen	long
==	O
0	int
&&	O
(	O
c	int
==	O
' '	O
||	O
c	int
==	O
'\t'	O
)	O
)	O
)	O
comment_add	(int)->(void)
(	O
c	int
)	O
;	O
last_was_qmark	bool
=	O
(	O
c	int
==	O
'?'	O
||	O
c	int
==	O
'%'	O
)	O
;	O
}	O
last_comment_line	int
=	O
lineno	int
;	O
return	O
'\n'	O
;	O
}	O
else	O
if	O
(	O
c	int
==	O
'/'	O
)	O
{	O
c	int
=	O
phase1_getc	()->(int)
(	O
)	O
;	O
switch	O
(	O
c	int
)	O
{	O
default	O
:	O
phase1_ungetc	(int)->(void)
(	O
c	int
)	O
;	O
return	O
'/'	O
;	O
case	O
'*'	O
:	O
{	O
bool	bool
last_was_star	bool
;	O
comment_start	()->(void)
(	O
)	O
;	O
lineno	int
=	O
line_number	long
;	O
last_was_star	bool
=	O
false	int
;	O
for	O
(	O
;	O
;	O
)	O
{	O
c	int
=	O
phase1_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
c	int
==	O
EOF	O
)	O
break	O
;	O
if	O
(	O
buflen	long
==	O
0	int
&&	O
(	O
c	int
==	O
' '	O
||	O
c	int
==	O
'\t'	O
)	O
)	O
continue	O
;	O
comment_add	(int)->(void)
(	O
c	int
)	O
;	O
switch	O
(	O
c	int
)	O
{	O
case	O
'\n'	O
:	O
comment_line_end	(long)->(void)
(	O
1	int
)	O
;	O
comment_start	()->(void)
(	O
)	O
;	O
lineno	int
=	O
line_number	long
;	O
last_was_star	bool
=	O
false	int
;	O
continue	O
;	O
case	O
'*'	O
:	O
last_was_star	bool
=	O
true	int
;	O
continue	O
;	O
case	O
'/'	O
:	O
if	O
(	O
last_was_star	bool
)	O
{	O
comment_line_end	(long)->(void)
(	O
2	int
)	O
;	O
break	O
;	O
}	O
default	O
:	O
last_was_star	bool
=	O
false	int
;	O
continue	O
;	O
}	O
break	O
;	O
}	O
last_comment_line	int
=	O
lineno	int
;	O
return	O
' '	O
;	O
}	O
case	O
'/'	O
:	O
{	O
bool	bool
last_was_qmark	bool
=	O
false	int
;	O
comment_start	()->(void)
(	O
)	O
;	O
lineno	int
=	O
line_number	long
;	O
for	O
(	O
;	O
;	O
)	O
{	O
c	int
=	O
phase1_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
c	int
==	O
'\n'	O
||	O
c	int
==	O
EOF	O
)	O
{	O
comment_line_end	(long)->(void)
(	O
0	int
)	O
;	O
break	O
;	O
}	O
if	O
(	O
last_was_qmark	bool
&&	O
c	int
==	O
'>'	O
)	O
{	O
comment_line_end	(long)->(void)
(	O
1	int
)	O
;	O
skip_html	()->(void)
(	O
)	O
;	O
break	O
;	O
}	O
if	O
(	O
!	O
(	O
buflen	long
==	O
0	int
&&	O
(	O
c	int
==	O
' '	O
||	O
c	int
==	O
'\t'	O
)	O
)	O
)	O
comment_add	(int)->(void)
(	O
c	int
)	O
;	O
last_was_qmark	bool
=	O
(	O
c	int
==	O
'?'	O
||	O
c	int
==	O
'%'	O
)	O
;	O
}	O
last_comment_line	int
=	O
lineno	int
;	O
return	O
'\n'	O
;	O
}	O
}	O
}	O
else	O
return	O
c	int
;	O
}	O
enum	O
token_type_ty	enum(int,int,int,int,int,int,int,int,int,int,int,int)
{	O
token_type_eof	int
,	O
token_type_lparen	int
,	O
token_type_rparen	int
,	O
token_type_comma	int
,	O
token_type_lbracket	int
,	O
token_type_rbracket	int
,	O
token_type_dot	int
,	O
token_type_operator1	int
,	O
token_type_operator2	int
,	O
token_type_string_literal	int
,	O
token_type_symbol	int
,	O
token_type_other	int
}	O
;	O
typedef	O
enum	O
token_type_ty	enum(int,int,int,int,int,int,int,int,int,int,int,int)
token_type_ty	enum(int,int,int,int,int,int,int,int,int,int,int,int)
;	O
typedef	O
struct	O
token_ty	struct
token_ty	struct
;	O
struct	O
token_ty	struct
{	O
token_type_ty	enum(int,int,int,int,int,int,int,int,int,int,int,int)
type	char
;	O
char	O
*	O
string	*(char)
;	O
refcounted_string_list_ty	struct
*	O
comment	*(struct(*(*(char)),long,long))
;	O
int	O
line_number	long
;	O
}	O
;	O
static	O
inline	O
void	O
free_token	(*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(struct(int,struct`)),int)))->(void)
(	O
token_ty	struct
*	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(struct(int,struct(*`,long,long))),int))
)	O
{	O
if	O
(	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(struct(int,struct(*`,long,long))),int))
->	O
type	char
==	O
token_type_string_literal	int
||	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(struct(int,struct(*`,long,long))),int))
->	O
type	char
==	O
token_type_symbol	int
)	O
free	(*(void))->(void)
(	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(struct(int,struct(*`,long,long))),int))
->	O
string	*(char)
)	O
;	O
if	O
(	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(struct(int,struct(*`,long,long))),int))
->	O
type	char
==	O
token_type_string_literal	int
)	O
drop_reference	(*(struct(int,struct(*(*`),long,long))))->(void)
(	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(struct(int,struct(*`,long,long))),int))
->	O
comment	*(struct(*(*(char)),long,long))
)	O
;	O
}	O
static	O
token_ty	struct
phase4_pushback	array(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(struct(int,struct(*(*`),long,long))),int))
[	O
3	int
]	O
;	O
static	O
int	O
phase4_pushback_length	int
;	O
static	O
void	O
phase4_get	(*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(struct(int,struct`)),int)))->(void)
(	O
token_ty	struct
*	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(struct(int,struct(*`,long,long))),int))
)	O
{	O
static	O
char	O
*	O
buffer	*(char)
;	O
static	O
int	O
bufmax	long
;	O
int	O
bufpos	int
;	O
int	O
c	int
;	O
if	O
(	O
phase4_pushback_length	int
)	O
{	O
*	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(struct(int,struct(*`,long,long))),int))
=	O
phase4_pushback	array(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(struct(int,struct(*(*`),long,long))),int))
[	O
--	O
phase4_pushback_length	int
]	O
;	O
return	O
;	O
}	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(struct(int,struct(*`,long,long))),int))
->	O
string	*(char)
=	O
NULL	O
;	O
for	O
(	O
;	O
;	O
)	O
{	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(struct(int,struct(*`,long,long))),int))
->	O
line_number	long
=	O
line_number	long
;	O
c	int
=	O
phase3_getc	()->(int)
(	O
)	O
;	O
switch	O
(	O
c	int
)	O
{	O
case	O
EOF	O
:	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(struct(int,struct(*`,long,long))),int))
->	O
type	char
=	O
token_type_eof	int
;	O
return	O
;	O
case	O
'\n'	O
:	O
if	O
(	O
last_non_comment_line	int
>	O
last_comment_line	int
)	O
savable_comment_reset	()->(void)
(	O
)	O
;	O
case	O
' '	O
:	O
case	O
'\t'	O
:	O
case	O
'\r'	O
:	O
continue	O
;	O
}	O
last_non_comment_line	int
=	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(struct(int,struct(*`,long,long))),int))
->	O
line_number	long
;	O
switch	O
(	O
c	int
)	O
{	O
case	O
'A'	O
:	O
case	O
'B'	O
:	O
case	O
'C'	O
:	O
case	O
'D'	O
:	O
case	O
'E'	O
:	O
case	O
'F'	O
:	O
case	O
'G'	O
:	O
case	O
'H'	O
:	O
case	O
'I'	O
:	O
case	O
'J'	O
:	O
case	O
'K'	O
:	O
case	O
'L'	O
:	O
case	O
'M'	O
:	O
case	O
'N'	O
:	O
case	O
'O'	O
:	O
case	O
'P'	O
:	O
case	O
'Q'	O
:	O
case	O
'R'	O
:	O
case	O
'S'	O
:	O
case	O
'T'	O
:	O
case	O
'U'	O
:	O
case	O
'V'	O
:	O
case	O
'W'	O
:	O
case	O
'X'	O
:	O
case	O
'Y'	O
:	O
case	O
'Z'	O
:	O
case	O
'_'	O
:	O
case	O
'a'	O
:	O
case	O
'b'	O
:	O
case	O
'c'	O
:	O
case	O
'd'	O
:	O
case	O
'e'	O
:	O
case	O
'f'	O
:	O
case	O
'g'	O
:	O
case	O
'h'	O
:	O
case	O
'i'	O
:	O
case	O
'j'	O
:	O
case	O
'k'	O
:	O
case	O
'l'	O
:	O
case	O
'm'	O
:	O
case	O
'n'	O
:	O
case	O
'o'	O
:	O
case	O
'p'	O
:	O
case	O
'q'	O
:	O
case	O
'r'	O
:	O
case	O
's'	O
:	O
case	O
't'	O
:	O
case	O
'u'	O
:	O
case	O
'v'	O
:	O
case	O
'w'	O
:	O
case	O
'x'	O
:	O
case	O
'y'	O
:	O
case	O
'z'	O
:	O
case	O
127	int
:	O
case	O
128	int
:	O
case	O
129	int
:	O
case	O
130	int
:	O
case	O
131	int
:	O
case	O
132	int
:	O
case	O
133	int
:	O
case	O
134	int
:	O
case	O
135	int
:	O
case	O
136	int
:	O
case	O
137	int
:	O
case	O
138	int
:	O
case	O
139	int
:	O
case	O
140	int
:	O
case	O
141	int
:	O
case	O
142	int
:	O
case	O
143	int
:	O
case	O
144	int
:	O
case	O
145	int
:	O
case	O
146	int
:	O
case	O
147	int
:	O
case	O
148	int
:	O
case	O
149	int
:	O
case	O
150	int
:	O
case	O
151	int
:	O
case	O
152	int
:	O
case	O
153	int
:	O
case	O
154	int
:	O
case	O
155	int
:	O
case	O
156	int
:	O
case	O
157	int
:	O
case	O
158	int
:	O
case	O
159	int
:	O
case	O
160	int
:	O
case	O
161	int
:	O
case	O
162	int
:	O
case	O
163	int
:	O
case	O
164	int
:	O
case	O
165	int
:	O
case	O
166	int
:	O
case	O
167	int
:	O
case	O
168	int
:	O
case	O
169	int
:	O
case	O
170	int
:	O
case	O
171	int
:	O
case	O
172	int
:	O
case	O
173	int
:	O
case	O
174	int
:	O
case	O
175	int
:	O
case	O
176	int
:	O
case	O
177	int
:	O
case	O
178	int
:	O
case	O
179	int
:	O
case	O
180	int
:	O
case	O
181	int
:	O
case	O
182	int
:	O
case	O
183	int
:	O
case	O
184	int
:	O
case	O
185	int
:	O
case	O
186	int
:	O
case	O
187	int
:	O
case	O
188	int
:	O
case	O
189	int
:	O
case	O
190	int
:	O
case	O
191	int
:	O
case	O
192	int
:	O
case	O
193	int
:	O
case	O
194	int
:	O
case	O
195	int
:	O
case	O
196	int
:	O
case	O
197	int
:	O
case	O
198	int
:	O
case	O
199	int
:	O
case	O
200	int
:	O
case	O
201	int
:	O
case	O
202	int
:	O
case	O
203	int
:	O
case	O
204	int
:	O
case	O
205	int
:	O
case	O
206	int
:	O
case	O
207	int
:	O
case	O
208	int
:	O
case	O
209	int
:	O
case	O
210	int
:	O
case	O
211	int
:	O
case	O
212	int
:	O
case	O
213	int
:	O
case	O
214	int
:	O
case	O
215	int
:	O
case	O
216	int
:	O
case	O
217	int
:	O
case	O
218	int
:	O
case	O
219	int
:	O
case	O
220	int
:	O
case	O
221	int
:	O
case	O
222	int
:	O
case	O
223	int
:	O
case	O
224	int
:	O
case	O
225	int
:	O
case	O
226	int
:	O
case	O
227	int
:	O
case	O
228	int
:	O
case	O
229	int
:	O
case	O
230	int
:	O
case	O
231	int
:	O
case	O
232	int
:	O
case	O
233	int
:	O
case	O
234	int
:	O
case	O
235	int
:	O
case	O
236	int
:	O
case	O
237	int
:	O
case	O
238	int
:	O
case	O
239	int
:	O
case	O
240	int
:	O
case	O
241	int
:	O
case	O
242	int
:	O
case	O
243	int
:	O
case	O
244	int
:	O
case	O
245	int
:	O
case	O
246	int
:	O
case	O
247	int
:	O
case	O
248	int
:	O
case	O
249	int
:	O
case	O
250	int
:	O
case	O
251	int
:	O
case	O
252	int
:	O
case	O
253	int
:	O
case	O
254	int
:	O
case	O
255	int
:	O
bufpos	int
=	O
0	int
;	O
for	O
(	O
;	O
;	O
)	O
{	O
if	O
(	O
bufpos	int
>=	O
bufmax	long
)	O
{	O
bufmax	long
=	O
2	int
*	O
bufmax	long
+	O
10	int
;	O
buffer	*(char)
=	O
xrealloc	(*(void),long)->(*(void))
(	O
buffer	*(char)
,	O
bufmax	long
)	O
;	O
}	O
buffer	*(char)
[	O
bufpos	int
++	O
]	O
=	O
c	int
;	O
c	int
=	O
phase1_getc	()->(int)
(	O
)	O
;	O
switch	O
(	O
c	int
)	O
{	O
case	O
'A'	O
:	O
case	O
'B'	O
:	O
case	O
'C'	O
:	O
case	O
'D'	O
:	O
case	O
'E'	O
:	O
case	O
'F'	O
:	O
case	O
'G'	O
:	O
case	O
'H'	O
:	O
case	O
'I'	O
:	O
case	O
'J'	O
:	O
case	O
'K'	O
:	O
case	O
'L'	O
:	O
case	O
'M'	O
:	O
case	O
'N'	O
:	O
case	O
'O'	O
:	O
case	O
'P'	O
:	O
case	O
'Q'	O
:	O
case	O
'R'	O
:	O
case	O
'S'	O
:	O
case	O
'T'	O
:	O
case	O
'U'	O
:	O
case	O
'V'	O
:	O
case	O
'W'	O
:	O
case	O
'X'	O
:	O
case	O
'Y'	O
:	O
case	O
'Z'	O
:	O
case	O
'_'	O
:	O
case	O
'a'	O
:	O
case	O
'b'	O
:	O
case	O
'c'	O
:	O
case	O
'd'	O
:	O
case	O
'e'	O
:	O
case	O
'f'	O
:	O
case	O
'g'	O
:	O
case	O
'h'	O
:	O
case	O
'i'	O
:	O
case	O
'j'	O
:	O
case	O
'k'	O
:	O
case	O
'l'	O
:	O
case	O
'm'	O
:	O
case	O
'n'	O
:	O
case	O
'o'	O
:	O
case	O
'p'	O
:	O
case	O
'q'	O
:	O
case	O
'r'	O
:	O
case	O
's'	O
:	O
case	O
't'	O
:	O
case	O
'u'	O
:	O
case	O
'v'	O
:	O
case	O
'w'	O
:	O
case	O
'x'	O
:	O
case	O
'y'	O
:	O
case	O
'z'	O
:	O
case	O
'0'	O
:	O
case	O
'1'	O
:	O
case	O
'2'	O
:	O
case	O
'3'	O
:	O
case	O
'4'	O
:	O
case	O
'5'	O
:	O
case	O
'6'	O
:	O
case	O
'7'	O
:	O
case	O
'8'	O
:	O
case	O
'9'	O
:	O
case	O
127	int
:	O
case	O
128	int
:	O
case	O
129	int
:	O
case	O
130	int
:	O
case	O
131	int
:	O
case	O
132	int
:	O
case	O
133	int
:	O
case	O
134	int
:	O
case	O
135	int
:	O
case	O
136	int
:	O
case	O
137	int
:	O
case	O
138	int
:	O
case	O
139	int
:	O
case	O
140	int
:	O
case	O
141	int
:	O
case	O
142	int
:	O
case	O
143	int
:	O
case	O
144	int
:	O
case	O
145	int
:	O
case	O
146	int
:	O
case	O
147	int
:	O
case	O
148	int
:	O
case	O
149	int
:	O
case	O
150	int
:	O
case	O
151	int
:	O
case	O
152	int
:	O
case	O
153	int
:	O
case	O
154	int
:	O
case	O
155	int
:	O
case	O
156	int
:	O
case	O
157	int
:	O
case	O
158	int
:	O
case	O
159	int
:	O
case	O
160	int
:	O
case	O
161	int
:	O
case	O
162	int
:	O
case	O
163	int
:	O
case	O
164	int
:	O
case	O
165	int
:	O
case	O
166	int
:	O
case	O
167	int
:	O
case	O
168	int
:	O
case	O
169	int
:	O
case	O
170	int
:	O
case	O
171	int
:	O
case	O
172	int
:	O
case	O
173	int
:	O
case	O
174	int
:	O
case	O
175	int
:	O
case	O
176	int
:	O
case	O
177	int
:	O
case	O
178	int
:	O
case	O
179	int
:	O
case	O
180	int
:	O
case	O
181	int
:	O
case	O
182	int
:	O
case	O
183	int
:	O
case	O
184	int
:	O
case	O
185	int
:	O
case	O
186	int
:	O
case	O
187	int
:	O
case	O
188	int
:	O
case	O
189	int
:	O
case	O
190	int
:	O
case	O
191	int
:	O
case	O
192	int
:	O
case	O
193	int
:	O
case	O
194	int
:	O
case	O
195	int
:	O
case	O
196	int
:	O
case	O
197	int
:	O
case	O
198	int
:	O
case	O
199	int
:	O
case	O
200	int
:	O
case	O
201	int
:	O
case	O
202	int
:	O
case	O
203	int
:	O
case	O
204	int
:	O
case	O
205	int
:	O
case	O
206	int
:	O
case	O
207	int
:	O
case	O
208	int
:	O
case	O
209	int
:	O
case	O
210	int
:	O
case	O
211	int
:	O
case	O
212	int
:	O
case	O
213	int
:	O
case	O
214	int
:	O
case	O
215	int
:	O
case	O
216	int
:	O
case	O
217	int
:	O
case	O
218	int
:	O
case	O
219	int
:	O
case	O
220	int
:	O
case	O
221	int
:	O
case	O
222	int
:	O
case	O
223	int
:	O
case	O
224	int
:	O
case	O
225	int
:	O
case	O
226	int
:	O
case	O
227	int
:	O
case	O
228	int
:	O
case	O
229	int
:	O
case	O
230	int
:	O
case	O
231	int
:	O
case	O
232	int
:	O
case	O
233	int
:	O
case	O
234	int
:	O
case	O
235	int
:	O
case	O
236	int
:	O
case	O
237	int
:	O
case	O
238	int
:	O
case	O
239	int
:	O
case	O
240	int
:	O
case	O
241	int
:	O
case	O
242	int
:	O
case	O
243	int
:	O
case	O
244	int
:	O
case	O
245	int
:	O
case	O
246	int
:	O
case	O
247	int
:	O
case	O
248	int
:	O
case	O
249	int
:	O
case	O
250	int
:	O
case	O
251	int
:	O
case	O
252	int
:	O
case	O
253	int
:	O
case	O
254	int
:	O
case	O
255	int
:	O
continue	O
;	O
default	O
:	O
phase1_ungetc	(int)->(void)
(	O
c	int
)	O
;	O
break	O
;	O
}	O
break	O
;	O
}	O
if	O
(	O
bufpos	int
>=	O
bufmax	long
)	O
{	O
bufmax	long
=	O
2	int
*	O
bufmax	long
+	O
10	int
;	O
buffer	*(char)
=	O
xrealloc	(*(void),long)->(*(void))
(	O
buffer	*(char)
,	O
bufmax	long
)	O
;	O
}	O
buffer	*(char)
[	O
bufpos	int
]	O
=	O
0	int
;	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(struct(int,struct(*`,long,long))),int))
->	O
string	*(char)
=	O
xstrdup	(*(char))->(*(char))
(	O
buffer	*(char)
)	O
;	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(struct(int,struct(*`,long,long))),int))
->	O
type	char
=	O
token_type_symbol	int
;	O
return	O
;	O
case	O
'\''	O
:	O
bufpos	int
=	O
0	int
;	O
for	O
(	O
;	O
;	O
)	O
{	O
c	int
=	O
phase1_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
c	int
==	O
EOF	O
||	O
c	int
==	O
'\''	O
)	O
break	O
;	O
if	O
(	O
c	int
==	O
'\\'	O
)	O
{	O
c	int
=	O
phase1_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
c	int
!=	O
'\\'	O
&&	O
c	int
!=	O
'\''	O
)	O
{	O
phase1_ungetc	(int)->(void)
(	O
c	int
)	O
;	O
c	int
=	O
'\\'	O
;	O
}	O
}	O
if	O
(	O
bufpos	int
>=	O
bufmax	long
)	O
{	O
bufmax	long
=	O
2	int
*	O
bufmax	long
+	O
10	int
;	O
buffer	*(char)
=	O
xrealloc	(*(void),long)->(*(void))
(	O
buffer	*(char)
,	O
bufmax	long
)	O
;	O
}	O
buffer	*(char)
[	O
bufpos	int
++	O
]	O
=	O
c	int
;	O
}	O
if	O
(	O
bufpos	int
>=	O
bufmax	long
)	O
{	O
bufmax	long
=	O
2	int
*	O
bufmax	long
+	O
10	int
;	O
buffer	*(char)
=	O
xrealloc	(*(void),long)->(*(void))
(	O
buffer	*(char)
,	O
bufmax	long
)	O
;	O
}	O
buffer	*(char)
[	O
bufpos	int
]	O
=	O
0	int
;	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(struct(int,struct(*`,long,long))),int))
->	O
type	char
=	O
token_type_string_literal	int
;	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(struct(int,struct(*`,long,long))),int))
->	O
string	*(char)
=	O
xstrdup	(*(char))->(*(char))
(	O
buffer	*(char)
)	O
;	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(struct(int,struct(*`,long,long))),int))
->	O
comment	*(struct(*(*(char)),long,long))
=	O
add_reference	(*(struct(int,struct(*(*`),long,long))))->(*(struct(int,struct(*(*`),long,long))))
(	O
savable_comment	*(struct(int,struct(*(*(char)),long,long)))
)	O
;	O
return	O
;	O
case	O
'"'	O
:	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(struct(int,struct(*`,long,long))),int))
->	O
type	char
=	O
token_type_string_literal	int
;	O
bufpos	int
=	O
0	int
;	O
for	O
(	O
;	O
;	O
)	O
{	O
c	int
=	O
phase1_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
c	int
==	O
EOF	O
||	O
c	int
==	O
'"'	O
)	O
break	O
;	O
if	O
(	O
c	int
==	O
'$'	O
)	O
{	O
c	int
=	O
phase1_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
(	O
c	int
>=	O
'A'	O
&&	O
c	int
<=	O
'Z'	O
)	O
||	O
(	O
c	int
>=	O
'a'	O
&&	O
c	int
<=	O
'z'	O
)	O
||	O
c	int
==	O
'_'	O
||	O
c	int
==	O
'{'	O
||	O
c	int
>=	O
0x7f	int
)	O
{	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(struct(int,struct(*`,long,long))),int))
->	O
type	char
=	O
token_type_other	int
;	O
continue	O
;	O
}	O
phase1_ungetc	(int)->(void)
(	O
c	int
)	O
;	O
c	int
=	O
'$'	O
;	O
}	O
if	O
(	O
c	int
==	O
'{'	O
)	O
{	O
c	int
=	O
phase1_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
c	int
==	O
'$'	O
)	O
{	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(struct(int,struct(*`,long,long))),int))
->	O
type	char
=	O
token_type_other	int
;	O
continue	O
;	O
}	O
phase1_ungetc	(int)->(void)
(	O
c	int
)	O
;	O
c	int
=	O
'{'	O
;	O
}	O
if	O
(	O
c	int
==	O
'\\'	O
)	O
{	O
int	O
n	long
,	O
j	int
;	O
c	int
=	O
phase1_getc	()->(int)
(	O
)	O
;	O
switch	O
(	O
c	int
)	O
{	O
case	O
'"'	O
:	O
case	O
'\\'	O
:	O
case	O
'$'	O
:	O
break	O
;	O
case	O
'0'	O
:	O
case	O
'1'	O
:	O
case	O
'2'	O
:	O
case	O
'3'	O
:	O
case	O
'4'	O
:	O
case	O
'5'	O
:	O
case	O
'6'	O
:	O
case	O
'7'	O
:	O
n	long
=	O
0	int
;	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<	O
3	int
;	O
++	O
j	int
)	O
{	O
n	long
=	O
n	long
*	O
8	int
+	O
c	int
-	O
'0'	O
;	O
c	int
=	O
phase1_getc	()->(int)
(	O
)	O
;	O
switch	O
(	O
c	int
)	O
{	O
default	O
:	O
break	O
;	O
case	O
'0'	O
:	O
case	O
'1'	O
:	O
case	O
'2'	O
:	O
case	O
'3'	O
:	O
case	O
'4'	O
:	O
case	O
'5'	O
:	O
case	O
'6'	O
:	O
case	O
'7'	O
:	O
continue	O
;	O
}	O
break	O
;	O
}	O
phase1_ungetc	(int)->(void)
(	O
c	int
)	O
;	O
c	int
=	O
n	long
;	O
break	O
;	O
case	O
'x'	O
:	O
n	long
=	O
0	int
;	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<	O
2	int
;	O
++	O
j	int
)	O
{	O
c	int
=	O
phase1_getc	()->(int)
(	O
)	O
;	O
switch	O
(	O
c	int
)	O
{	O
case	O
'0'	O
:	O
case	O
'1'	O
:	O
case	O
'2'	O
:	O
case	O
'3'	O
:	O
case	O
'4'	O
:	O
case	O
'5'	O
:	O
case	O
'6'	O
:	O
case	O
'7'	O
:	O
case	O
'8'	O
:	O
case	O
'9'	O
:	O
n	long
=	O
n	long
*	O
16	int
+	O
c	int
-	O
'0'	O
;	O
break	O
;	O
case	O
'A'	O
:	O
case	O
'B'	O
:	O
case	O
'C'	O
:	O
case	O
'D'	O
:	O
case	O
'E'	O
:	O
case	O
'F'	O
:	O
n	long
=	O
n	long
*	O
16	int
+	O
10	int
+	O
c	int
-	O
'A'	O
;	O
break	O
;	O
case	O
'a'	O
:	O
case	O
'b'	O
:	O
case	O
'c'	O
:	O
case	O
'd'	O
:	O
case	O
'e'	O
:	O
case	O
'f'	O
:	O
n	long
=	O
n	long
*	O
16	int
+	O
10	int
+	O
c	int
-	O
'a'	O
;	O
break	O
;	O
default	O
:	O
phase1_ungetc	(int)->(void)
(	O
c	int
)	O
;	O
c	int
=	O
0	int
;	O
break	O
;	O
}	O
if	O
(	O
c	int
==	O
0	int
)	O
break	O
;	O
}	O
if	O
(	O
j	int
==	O
0	int
)	O
{	O
phase1_ungetc	(int)->(void)
(	O
'x'	O
)	O
;	O
c	int
=	O
'\\'	O
;	O
}	O
else	O
c	int
=	O
n	long
;	O
break	O
;	O
case	O
'n'	O
:	O
c	int
=	O
'\n'	O
;	O
break	O
;	O
case	O
't'	O
:	O
c	int
=	O
'\t'	O
;	O
break	O
;	O
case	O
'r'	O
:	O
c	int
=	O
'\r'	O
;	O
break	O
;	O
default	O
:	O
phase1_ungetc	(int)->(void)
(	O
c	int
)	O
;	O
c	int
=	O
'\\'	O
;	O
break	O
;	O
}	O
}	O
if	O
(	O
bufpos	int
>=	O
bufmax	long
)	O
{	O
bufmax	long
=	O
2	int
*	O
bufmax	long
+	O
10	int
;	O
buffer	*(char)
=	O
xrealloc	(*(void),long)->(*(void))
(	O
buffer	*(char)
,	O
bufmax	long
)	O
;	O
}	O
buffer	*(char)
[	O
bufpos	int
++	O
]	O
=	O
c	int
;	O
}	O
if	O
(	O
bufpos	int
>=	O
bufmax	long
)	O
{	O
bufmax	long
=	O
2	int
*	O
bufmax	long
+	O
10	int
;	O
buffer	*(char)
=	O
xrealloc	(*(void),long)->(*(void))
(	O
buffer	*(char)
,	O
bufmax	long
)	O
;	O
}	O
buffer	*(char)
[	O
bufpos	int
]	O
=	O
0	int
;	O
if	O
(	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(struct(int,struct(*`,long,long))),int))
->	O
type	char
==	O
token_type_string_literal	int
)	O
{	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(struct(int,struct(*`,long,long))),int))
->	O
string	*(char)
=	O
xstrdup	(*(char))->(*(char))
(	O
buffer	*(char)
)	O
;	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(struct(int,struct(*`,long,long))),int))
->	O
comment	*(struct(*(*(char)),long,long))
=	O
add_reference	(*(struct(int,struct(*(*`),long,long))))->(*(struct(int,struct(*(*`),long,long))))
(	O
savable_comment	*(struct(int,struct(*(*(char)),long,long)))
)	O
;	O
}	O
return	O
;	O
case	O
'?'	O
:	O
case	O
'%'	O
:	O
{	O
int	O
c2	int
=	O
phase1_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
c2	int
==	O
'>'	O
)	O
{	O
skip_html	()->(void)
(	O
)	O
;	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(struct(int,struct(*`,long,long))),int))
->	O
type	char
=	O
token_type_other	int
;	O
}	O
else	O
{	O
phase1_ungetc	(int)->(void)
(	O
c2	int
)	O
;	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(struct(int,struct(*`,long,long))),int))
->	O
type	char
=	O
(	O
c	int
==	O
'%'	O
?	O
token_type_operator1	int
:	O
token_type_other	int
)	O
;	O
}	O
return	O
;	O
}	O
case	O
'('	O
:	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(struct(int,struct(*`,long,long))),int))
->	O
type	char
=	O
token_type_lparen	int
;	O
return	O
;	O
case	O
')'	O
:	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(struct(int,struct(*`,long,long))),int))
->	O
type	char
=	O
token_type_rparen	int
;	O
return	O
;	O
case	O
','	O
:	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(struct(int,struct(*`,long,long))),int))
->	O
type	char
=	O
token_type_comma	int
;	O
return	O
;	O
case	O
'['	O
:	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(struct(int,struct(*`,long,long))),int))
->	O
type	char
=	O
token_type_lbracket	int
;	O
return	O
;	O
case	O
']'	O
:	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(struct(int,struct(*`,long,long))),int))
->	O
type	char
=	O
token_type_rbracket	int
;	O
return	O
;	O
case	O
'.'	O
:	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(struct(int,struct(*`,long,long))),int))
->	O
type	char
=	O
token_type_dot	int
;	O
return	O
;	O
case	O
'*'	O
:	O
case	O
'/'	O
:	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(struct(int,struct(*`,long,long))),int))
->	O
type	char
=	O
token_type_operator1	int
;	O
return	O
;	O
case	O
'+'	O
:	O
case	O
'-'	O
:	O
{	O
int	O
c2	int
=	O
phase1_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
c2	int
==	O
c	int
)	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(struct(int,struct(*`,long,long))),int))
->	O
type	char
=	O
token_type_operator1	int
;	O
else	O
{	O
phase1_ungetc	(int)->(void)
(	O
c2	int
)	O
;	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(struct(int,struct(*`,long,long))),int))
->	O
type	char
=	O
token_type_operator2	int
;	O
}	O
return	O
;	O
}	O
case	O
'!'	O
:	O
case	O
'~'	O
:	O
case	O
'@'	O
:	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(struct(int,struct(*`,long,long))),int))
->	O
type	char
=	O
token_type_operator2	int
;	O
return	O
;	O
case	O
'<'	O
:	O
{	O
int	O
c2	int
=	O
phase1_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
c2	int
==	O
'<'	O
)	O
{	O
int	O
c3	int
=	O
phase1_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
c3	int
==	O
'<'	O
)	O
{	O
int	O
label_start	int
=	O
0	int
;	O
do	O
c	int
=	O
phase3_getc	()->(int)
(	O
)	O
;	O
while	O
(	O
c	int
==	O
' '	O
||	O
c	int
==	O
'\t'	O
||	O
c	int
==	O
'\n'	O
||	O
c	int
==	O
'\r'	O
)	O
;	O
bufpos	int
=	O
0	int
;	O
do	O
{	O
if	O
(	O
bufpos	int
>=	O
bufmax	long
)	O
{	O
bufmax	long
=	O
2	int
*	O
bufmax	long
+	O
10	int
;	O
buffer	*(char)
=	O
xrealloc	(*(void),long)->(*(void))
(	O
buffer	*(char)
,	O
bufmax	long
)	O
;	O
}	O
buffer	*(char)
[	O
bufpos	int
++	O
]	O
=	O
c	int
;	O
c	int
=	O
phase3_getc	()->(int)
(	O
)	O
;	O
}	O
while	O
(	O
c	int
!=	O
EOF	O
&&	O
c	int
!=	O
'\n'	O
&&	O
c	int
!=	O
'\r'	O
)	O
;	O
if	O
(	O
*	O
buffer	*(char)
==	O
'\''	O
||	O
*	O
buffer	*(char)
==	O
'"'	O
)	O
{	O
label_start	int
++	O
;	O
bufpos	int
--	O
;	O
}	O
for	O
(	O
;	O
;	O
)	O
{	O
c	int
=	O
phase1_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
c	int
==	O
EOF	O
)	O
break	O
;	O
if	O
(	O
c	int
==	O
'\n'	O
||	O
c	int
==	O
'\r'	O
)	O
{	O
int	O
bufidx	int
=	O
label_start	int
;	O
while	O
(	O
bufidx	int
<	O
bufpos	int
)	O
{	O
c	int
=	O
phase1_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
c	int
==	O
EOF	O
)	O
break	O
;	O
if	O
(	O
c	int
!=	O
buffer	*(char)
[	O
bufidx	int
]	O
)	O
{	O
phase1_ungetc	(int)->(void)
(	O
c	int
)	O
;	O
break	O
;	O
}	O
bufidx	int
++	O
;	O
}	O
if	O
(	O
bufidx	int
==	O
bufpos	int
)	O
{	O
c	int
=	O
phase1_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
c	int
!=	O
';'	O
)	O
phase1_ungetc	(int)->(void)
(	O
c	int
)	O
;	O
c	int
=	O
phase1_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
c	int
==	O
'\n'	O
||	O
c	int
==	O
'\r'	O
)	O
break	O
;	O
}	O
}	O
}	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(struct(int,struct(*`,long,long))),int))
->	O
type	char
=	O
token_type_other	int
;	O
return	O
;	O
}	O
phase1_ungetc	(int)->(void)
(	O
c3	int
)	O
;	O
}	O
while	O
(	O
c2	int
==	O
' '	O
||	O
c2	int
==	O
'\t'	O
||	O
c2	int
==	O
'\n'	O
||	O
c2	int
==	O
'\r'	O
)	O
c2	int
=	O
phase1_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
c2	int
==	O
'/'	O
)	O
{	O
do	O
c2	int
=	O
phase1_getc	()->(int)
(	O
)	O
;	O
while	O
(	O
c2	int
==	O
' '	O
||	O
c2	int
==	O
'\t'	O
||	O
c2	int
==	O
'\n'	O
||	O
c2	int
==	O
'\r'	O
)	O
;	O
if	O
(	O
c2	int
==	O
's'	O
||	O
c2	int
==	O
'S'	O
)	O
{	O
c2	int
=	O
phase1_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
c2	int
==	O
'c'	O
||	O
c2	int
==	O
'C'	O
)	O
{	O
c2	int
=	O
phase1_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
c2	int
==	O
'r'	O
||	O
c2	int
==	O
'R'	O
)	O
{	O
c2	int
=	O
phase1_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
c2	int
==	O
'i'	O
||	O
c2	int
==	O
'I'	O
)	O
{	O
c2	int
=	O
phase1_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
c2	int
==	O
'p'	O
||	O
c2	int
==	O
'P'	O
)	O
{	O
c2	int
=	O
phase1_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
c2	int
==	O
't'	O
||	O
c2	int
==	O
'T'	O
)	O
{	O
do	O
c2	int
=	O
phase1_getc	()->(int)
(	O
)	O
;	O
while	O
(	O
c2	int
==	O
' '	O
||	O
c2	int
==	O
'\t'	O
||	O
c2	int
==	O
'\n'	O
||	O
c2	int
==	O
'\r'	O
)	O
;	O
if	O
(	O
c2	int
==	O
'>'	O
)	O
{	O
skip_html	()->(void)
(	O
)	O
;	O
}	O
else	O
phase1_ungetc	(int)->(void)
(	O
c2	int
)	O
;	O
}	O
else	O
phase1_ungetc	(int)->(void)
(	O
c2	int
)	O
;	O
}	O
else	O
phase1_ungetc	(int)->(void)
(	O
c2	int
)	O
;	O
}	O
else	O
phase1_ungetc	(int)->(void)
(	O
c2	int
)	O
;	O
}	O
else	O
phase1_ungetc	(int)->(void)
(	O
c2	int
)	O
;	O
}	O
else	O
phase1_ungetc	(int)->(void)
(	O
c2	int
)	O
;	O
}	O
else	O
phase1_ungetc	(int)->(void)
(	O
c2	int
)	O
;	O
}	O
else	O
phase1_ungetc	(int)->(void)
(	O
c2	int
)	O
;	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(struct(int,struct(*`,long,long))),int))
->	O
type	char
=	O
token_type_other	int
;	O
return	O
;	O
}	O
case	O
'`'	O
:	O
default	O
:	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(struct(int,struct(*`,long,long))),int))
->	O
type	char
=	O
token_type_other	int
;	O
return	O
;	O
}	O
}	O
}	O
static	O
void	O
phase4_unget	(*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(struct(int,struct`)),int)))->(void)
(	O
token_ty	struct
*	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(struct(int,struct(*`,long,long))),int))
)	O
{	O
if	O
(	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(struct(int,struct(*`,long,long))),int))
->	O
type	char
!=	O
token_type_eof	int
)	O
{	O
if	O
(	O
phase4_pushback_length	int
==	O
SIZEOF	O
(	O
phase4_pushback	array(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(struct(int,struct(*(*`),long,long))),int))
)	O
)	O
abort	()->(void)
(	O
)	O
;	O
phase4_pushback	array(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(struct(int,struct(*(*`),long,long))),int))
[	O
phase4_pushback_length	int
++	O
]	O
=	O
*	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(struct(int,struct(*`,long,long))),int))
;	O
}	O
}	O
static	O
token_type_ty	enum(int,int,int,int,int,int,int,int,int,int,int,int)
phase5_last	enum(int,int,int,int,int,int,int,int,int,int,int,int)
;	O
static	O
void	O
x_php_lex	(*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(struct(int,struct`)),int)))->(void)
(	O
token_ty	struct
*	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(struct(int,struct(*`,long,long))),int))
)	O
{	O
phase4_get	(*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(struct(int,struct`)),int)))->(void)
(	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(struct(int,struct(*`,long,long))),int))
)	O
;	O
if	O
(	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(struct(int,struct(*`,long,long))),int))
->	O
type	char
==	O
token_type_string_literal	int
&&	O
!	O
(	O
phase5_last	enum(int,int,int,int,int,int,int,int,int,int,int,int)
==	O
token_type_dot	int
||	O
phase5_last	enum(int,int,int,int,int,int,int,int,int,int,int,int)
==	O
token_type_operator1	int
||	O
phase5_last	enum(int,int,int,int,int,int,int,int,int,int,int,int)
==	O
token_type_operator2	int
||	O
phase5_last	enum(int,int,int,int,int,int,int,int,int,int,int,int)
==	O
token_type_rparen	int
)	O
)	O
{	O
char	O
*	O
sum	*(char)
=	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(struct(int,struct(*`,long,long))),int))
->	O
string	*(char)
;	O
size_t	long
sum_len	long
=	O
strlen	(*(char))->(long)
(	O
sum	*(char)
)	O
;	O
for	O
(	O
;	O
;	O
)	O
{	O
token_ty	struct
token2	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(struct(int,struct(*(*`),long,long))),int)
;	O
phase4_get	(*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(struct(int,struct`)),int)))->(void)
(	O
&	O
token2	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(struct(int,struct(*(*`),long,long))),int)
)	O
;	O
if	O
(	O
token2	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(struct(int,struct(*(*`),long,long))),int)
.	O
type	char
==	O
token_type_dot	int
)	O
{	O
token_ty	struct
token3	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(struct(int,struct(*(*`),long,long))),int)
;	O
phase4_get	(*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(struct(int,struct`)),int)))->(void)
(	O
&	O
token3	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(struct(int,struct(*(*`),long,long))),int)
)	O
;	O
if	O
(	O
token3	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(struct(int,struct(*(*`),long,long))),int)
.	O
type	char
==	O
token_type_string_literal	int
)	O
{	O
token_ty	struct
token_after	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(struct(int,struct(*(*`),long,long))),int)
;	O
phase4_get	(*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(struct(int,struct`)),int)))->(void)
(	O
&	O
token_after	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(struct(int,struct(*(*`),long,long))),int)
)	O
;	O
if	O
(	O
token_after	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(struct(int,struct(*(*`),long,long))),int)
.	O
type	char
!=	O
token_type_operator1	int
)	O
{	O
char	O
*	O
addend	*(char)
=	O
token3	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(struct(int,struct(*(*`),long,long))),int)
.	O
string	*(char)
;	O
size_t	long
addend_len	long
=	O
strlen	(*(char))->(long)
(	O
addend	*(char)
)	O
;	O
sum	*(char)
=	O
(	O
char	O
*	O
)	O
xrealloc	(*(void),long)->(*(void))
(	O
sum	*(char)
,	O
sum_len	long
+	O
addend_len	long
+	O
1	int
)	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
sum	*(char)
+	O
sum_len	long
,	O
addend	*(char)
,	O
addend_len	long
+	O
1	int
)	O
;	O
sum_len	long
+=	O
addend_len	long
;	O
phase4_unget	(*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(struct(int,struct`)),int)))->(void)
(	O
&	O
token_after	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(struct(int,struct(*(*`),long,long))),int)
)	O
;	O
free_token	(*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(struct(int,struct`)),int)))->(void)
(	O
&	O
token3	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(struct(int,struct(*(*`),long,long))),int)
)	O
;	O
free_token	(*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(struct(int,struct`)),int)))->(void)
(	O
&	O
token2	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(struct(int,struct(*(*`),long,long))),int)
)	O
;	O
continue	O
;	O
}	O
phase4_unget	(*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(struct(int,struct`)),int)))->(void)
(	O
&	O
token_after	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(struct(int,struct(*(*`),long,long))),int)
)	O
;	O
}	O
phase4_unget	(*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(struct(int,struct`)),int)))->(void)
(	O
&	O
token3	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(struct(int,struct(*(*`),long,long))),int)
)	O
;	O
}	O
phase4_unget	(*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(struct(int,struct`)),int)))->(void)
(	O
&	O
token2	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(struct(int,struct(*(*`),long,long))),int)
)	O
;	O
break	O
;	O
}	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(struct(int,struct(*`,long,long))),int))
->	O
string	*(char)
=	O
sum	*(char)
;	O
}	O
phase5_last	enum(int,int,int,int,int,int,int,int,int,int,int,int)
=	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(struct(int,struct(*`,long,long))),int))
->	O
type	char
;	O
}	O
static	O
flag_context_list_table_ty	struct(long,long,*(struct),*(struct),struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),long,union(*((long)->(*`)),*((*`,long)->(*`))),union(*((*`)->(void)),*((*`,*`)->(void))),*(void),int,int,int))
*	O
flag_context_list_table	*(struct(long,long,*(struct),*(struct),struct(long,*(struct(*`,*`,array(char))),*(char),*(char),*(char),union(long,*(void)),long,union(*((long)->(*`)),*((*`,long)->(*`))),union(*((*`)->(void)),*((*`,*`)->(void))),*(void),int,int,int)))
;	O
static	O
bool	bool
extract_balanced	(*(struct(*(*(struct`)),long,long,bool,struct(long,long,*(struct`),*(struct`),struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int)))),enum(int,int,int,int,int,int,int,int,int,int,int,int),struct(int,int,int,int,int,int),struct(int,*(struct(int,struct(int,int,int,int,int,int),*(struct`)))),*(struct(*(struct(*`,long,long,bool,struct`)),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long))))))->(bool)
(	O
message_list_ty	struct
*	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
,	O
token_type_ty	enum(int,int,int,int,int,int,int,int,int,int,int,int)
delim	enum(int,int,int,int,int,int,int,int,int,int,int,int)
,	O
flag_context_ty	struct
outer_context	struct(int,int,int,int,int,int)
,	O
flag_context_list_iterator_ty	struct
context_iter	struct(int,*(struct(int,struct(int,int,int,int,int,int),*(struct(int,struct`,*`)))))
,	O
struct	O
arglist_parser	struct(*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int)))),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long))))
*	O
argparser	*(struct(*(struct(*(*`),long,long,bool,struct(long,long,*`,*`,struct`))),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long)))))
)	O
{	O
int	O
arg	int
=	O
1	int
;	O
int	O
state	*(int)
;	O
const	O
struct	O
callshapes	struct(*(char),long,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long))))
*	O
next_shapes	*(struct(*(char),long,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long)))))
=	O
NULL	O
;	O
flag_context_list_iterator_ty	struct
next_context_iter	struct(int,*(struct(int,struct(int,int,int,int,int,int),*(struct(int,struct`,*`)))))
=	O
passthrough_context_list_iterator	struct(int,*(struct(int,struct(int,int,int,int,int,int),*(struct(int,struct`,*`)))))
;	O
flag_context_ty	struct
inner_context	struct(int,int,int,int,int,int)
=	O
inherited_context	(struct(int,int,int,int,int,int),struct(int,int,int,int,int,int))->(struct(int,int,int,int,int,int))
(	O
outer_context	struct(int,int,int,int,int,int)
,	O
flag_context_list_iterator_advance	(*(struct(int,*(struct(int,struct`,*`)))))->(struct(int,int,int,int,int,int))
(	O
&	O
context_iter	struct(int,*(struct(int,struct(int,int,int,int,int,int),*(struct(int,struct`,*`)))))
)	O
)	O
;	O
state	*(int)
=	O
0	int
;	O
for	O
(	O
;	O
;	O
)	O
{	O
token_ty	struct
token	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(struct(int,struct(*(*`),long,long))),int)
;	O
x_php_lex	(*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(struct(int,struct`)),int)))->(void)
(	O
&	O
token	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(struct(int,struct(*(*`),long,long))),int)
)	O
;	O
switch	O
(	O
token	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(struct(int,struct(*(*`),long,long))),int)
.	O
type	char
)	O
{	O
case	O
token_type_symbol	int
:	O
{	O
void	O
*	O
keyword_value	*(void)
;	O
if	O
(	O
hash_find_entry	(*(struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))),*(void),long,*(*(void)))->(int)
(	O
&	O
keywords	struct(long,long,*(struct),*(struct),struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),long,union(*((long)->(*`)),*((*`,long)->(*`))),union(*((*`)->(void)),*((*`,*`)->(void))),*(void),int,int,int))
,	O
token	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(struct(int,struct(*(*`),long,long))),int)
.	O
string	*(char)
,	O
strlen	(*(char))->(long)
(	O
token	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(struct(int,struct(*(*`),long,long))),int)
.	O
string	*(char)
)	O
,	O
&	O
keyword_value	*(void)
)	O
==	O
0	int
)	O
{	O
next_shapes	*(struct(*(char),long,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long)))))
=	O
(	O
const	O
struct	O
callshapes	struct(*(char),long,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long))))
*	O
)	O
keyword_value	*(void)
;	O
state	*(int)
=	O
1	int
;	O
}	O
else	O
state	*(int)
=	O
0	int
;	O
}	O
next_context_iter	struct(int,*(struct(int,struct(int,int,int,int,int,int),*(struct(int,struct`,*`)))))
=	O
flag_context_list_iterator	(*(struct(int,struct(int,int,int,int,int,int),*(struct(int,struct`,*`)))))->(struct(int,*(struct(int,struct(int,int,int,int,int,int),*(struct`)))))
(	O
flag_context_list_table_lookup	(*(struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))),*(void),long)->(*(struct(int,struct(int,int,int,int,int,int),*(struct(int,struct`,*`)))))
(	O
flag_context_list_table	*(struct(long,long,*(struct),*(struct),struct(long,*(struct(*`,*`,array(char))),*(char),*(char),*(char),union(long,*(void)),long,union(*((long)->(*`)),*((*`,long)->(*`))),union(*((*`)->(void)),*((*`,*`)->(void))),*(void),int,int,int)))
,	O
token	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(struct(int,struct(*(*`),long,long))),int)
.	O
string	*(char)
,	O
strlen	(*(char))->(long)
(	O
token	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(struct(int,struct(*(*`),long,long))),int)
.	O
string	*(char)
)	O
)	O
)	O
;	O
free	(*(void))->(void)
(	O
token	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(struct(int,struct(*(*`),long,long))),int)
.	O
string	*(char)
)	O
;	O
continue	O
;	O
case	O
token_type_lparen	int
:	O
if	O
(	O
extract_balanced	(*(struct(*(*(struct`)),long,long,bool,struct(long,long,*(struct`),*(struct`),struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int)))),enum(int,int,int,int,int,int,int,int,int,int,int,int),struct(int,int,int,int,int,int),struct(int,*(struct(int,struct(int,int,int,int,int,int),*(struct`)))),*(struct(*(struct(*`,long,long,bool,struct`)),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long))))))->(bool)
(	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
,	O
token_type_rparen	int
,	O
inner_context	struct(int,int,int,int,int,int)
,	O
next_context_iter	struct(int,*(struct(int,struct(int,int,int,int,int,int),*(struct(int,struct`,*`)))))
,	O
arglist_parser_alloc	(*(struct(*(*(struct`)),long,long,bool,struct(long,long,*(struct`),*(struct`),struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int)))),*(struct(*(char),long,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long))))))->(*(struct(*(struct(*`,long,long,bool,struct`)),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long))))))
(	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
,	O
state	*(int)
?	O
next_shapes	*(struct(*(char),long,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long)))))
:	O
NULL	O
)	O
)	O
)	O
{	O
arglist_parser_done	(*(struct(*(struct(*`,long,long,bool,struct`)),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long))))),int)->(void)
(	O
argparser	*(struct(*(struct(*(*`),long,long,bool,struct(long,long,*`,*`,struct`))),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long)))))
,	O
arg	int
)	O
;	O
return	O
true	int
;	O
}	O
next_context_iter	struct(int,*(struct(int,struct(int,int,int,int,int,int),*(struct(int,struct`,*`)))))
=	O
null_context_list_iterator	struct(int,*(struct(int,struct(int,int,int,int,int,int),*(struct(int,struct`,*`)))))
;	O
state	*(int)
=	O
0	int
;	O
continue	O
;	O
case	O
token_type_rparen	int
:	O
if	O
(	O
delim	enum(int,int,int,int,int,int,int,int,int,int,int,int)
==	O
token_type_rparen	int
||	O
delim	enum(int,int,int,int,int,int,int,int,int,int,int,int)
==	O
token_type_eof	int
)	O
{	O
arglist_parser_done	(*(struct(*(struct(*`,long,long,bool,struct`)),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long))))),int)->(void)
(	O
argparser	*(struct(*(struct(*(*`),long,long,bool,struct(long,long,*`,*`,struct`))),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long)))))
,	O
arg	int
)	O
;	O
return	O
false	int
;	O
}	O
next_context_iter	struct(int,*(struct(int,struct(int,int,int,int,int,int),*(struct(int,struct`,*`)))))
=	O
null_context_list_iterator	struct(int,*(struct(int,struct(int,int,int,int,int,int),*(struct(int,struct`,*`)))))
;	O
state	*(int)
=	O
0	int
;	O
continue	O
;	O
case	O
token_type_comma	int
:	O
arg	int
++	O
;	O
inner_context	struct(int,int,int,int,int,int)
=	O
inherited_context	(struct(int,int,int,int,int,int),struct(int,int,int,int,int,int))->(struct(int,int,int,int,int,int))
(	O
outer_context	struct(int,int,int,int,int,int)
,	O
flag_context_list_iterator_advance	(*(struct(int,*(struct(int,struct`,*`)))))->(struct(int,int,int,int,int,int))
(	O
&	O
context_iter	struct(int,*(struct(int,struct(int,int,int,int,int,int),*(struct(int,struct`,*`)))))
)	O
)	O
;	O
next_context_iter	struct(int,*(struct(int,struct(int,int,int,int,int,int),*(struct(int,struct`,*`)))))
=	O
passthrough_context_list_iterator	struct(int,*(struct(int,struct(int,int,int,int,int,int),*(struct(int,struct`,*`)))))
;	O
state	*(int)
=	O
0	int
;	O
continue	O
;	O
case	O
token_type_lbracket	int
:	O
if	O
(	O
extract_balanced	(*(struct(*(*(struct`)),long,long,bool,struct(long,long,*(struct`),*(struct`),struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int)))),enum(int,int,int,int,int,int,int,int,int,int,int,int),struct(int,int,int,int,int,int),struct(int,*(struct(int,struct(int,int,int,int,int,int),*(struct`)))),*(struct(*(struct(*`,long,long,bool,struct`)),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long))))))->(bool)
(	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
,	O
token_type_rbracket	int
,	O
null_context	struct(int,int,int,int,int,int)
,	O
null_context_list_iterator	struct(int,*(struct(int,struct(int,int,int,int,int,int),*(struct(int,struct`,*`)))))
,	O
arglist_parser_alloc	(*(struct(*(*(struct`)),long,long,bool,struct(long,long,*(struct`),*(struct`),struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int)))),*(struct(*(char),long,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long))))))->(*(struct(*(struct(*`,long,long,bool,struct`)),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long))))))
(	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
,	O
NULL	O
)	O
)	O
)	O
{	O
arglist_parser_done	(*(struct(*(struct(*`,long,long,bool,struct`)),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long))))),int)->(void)
(	O
argparser	*(struct(*(struct(*(*`),long,long,bool,struct(long,long,*`,*`,struct`))),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long)))))
,	O
arg	int
)	O
;	O
return	O
true	int
;	O
}	O
next_context_iter	struct(int,*(struct(int,struct(int,int,int,int,int,int),*(struct(int,struct`,*`)))))
=	O
null_context_list_iterator	struct(int,*(struct(int,struct(int,int,int,int,int,int),*(struct(int,struct`,*`)))))
;	O
state	*(int)
=	O
0	int
;	O
continue	O
;	O
case	O
token_type_rbracket	int
:	O
if	O
(	O
delim	enum(int,int,int,int,int,int,int,int,int,int,int,int)
==	O
token_type_rbracket	int
||	O
delim	enum(int,int,int,int,int,int,int,int,int,int,int,int)
==	O
token_type_eof	int
)	O
{	O
arglist_parser_done	(*(struct(*(struct(*`,long,long,bool,struct`)),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long))))),int)->(void)
(	O
argparser	*(struct(*(struct(*(*`),long,long,bool,struct(long,long,*`,*`,struct`))),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long)))))
,	O
arg	int
)	O
;	O
return	O
false	int
;	O
}	O
next_context_iter	struct(int,*(struct(int,struct(int,int,int,int,int,int),*(struct(int,struct`,*`)))))
=	O
null_context_list_iterator	struct(int,*(struct(int,struct(int,int,int,int,int,int),*(struct(int,struct`,*`)))))
;	O
state	*(int)
=	O
0	int
;	O
continue	O
;	O
case	O
token_type_string_literal	int
:	O
{	O
lex_pos_ty	struct
pos	struct(*(char),long)
;	O
pos	struct(*(char),long)
.	O
file_name	*(char)
=	O
logical_file_name	*(char)
;	O
pos	struct(*(char),long)
.	O
line_number	long
=	O
token	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(struct(int,struct(*(*`),long,long))),int)
.	O
line_number	long
;	O
if	O
(	O
extract_all	bool
)	O
remember_a_message	(*(struct(*(*(struct`)),long,long,bool,struct(long,long,*(struct`),*(struct`),struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int)))),*(char),*(char),bool,struct(int,int,int,int,int,int),*(struct(*(char),long)),*(char),*(struct(int,struct(*(*`),long,long))),bool)->(*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*`,long,long)),*(struct(*`,long,long)),long,*(struct(*`,long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`)),int,*(struct(*`,long,*`,*`,*`,*`)))))
(	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
,	O
NULL	O
,	O
token	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(struct(int,struct(*(*`),long,long))),int)
.	O
string	*(char)
,	O
false	int
,	O
inner_context	struct(int,int,int,int,int,int)
,	O
&	O
pos	struct(*(char),long)
,	O
NULL	O
,	O
token	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(struct(int,struct(*(*`),long,long))),int)
.	O
comment	*(struct(*(*(char)),long,long))
,	O
false	int
)	O
;	O
else	O
{	O
mixed_string_ty	struct
*	O
ms	*(struct(*(*(struct(char,long,array(char)))),long,enum(int,int,int,int,int,int),*(char),int))
=	O
mixed_string_alloc_simple	(*(char),enum(int,int,int,int,int,int),*(char),int)->(*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)))
(	O
token	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(struct(int,struct(*(*`),long,long))),int)
.	O
string	*(char)
,	O
lc_string	int
,	O
pos	struct(*(char),long)
.	O
file_name	*(char)
,	O
pos	struct(*(char),long)
.	O
line_number	long
)	O
;	O
free	(*(void))->(void)
(	O
token	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(struct(int,struct(*(*`),long,long))),int)
.	O
string	*(char)
)	O
;	O
arglist_parser_remember	(*(struct(*(struct(*`,long,long,bool,struct`)),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long))))),int,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),*(char),long,*(struct(int,struct(*(*`),long,long))),bool)->(void)
(	O
argparser	*(struct(*(struct(*(*`),long,long,bool,struct(long,long,*`,*`,struct`))),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long)))))
,	O
arg	int
,	O
ms	*(struct(*(*(struct(char,long,array(char)))),long,enum(int,int,int,int,int,int),*(char),int))
,	O
inner_context	struct(int,int,int,int,int,int)
,	O
pos	struct(*(char),long)
.	O
file_name	*(char)
,	O
pos	struct(*(char),long)
.	O
line_number	long
,	O
token	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(struct(int,struct(*(*`),long,long))),int)
.	O
comment	*(struct(*(*(char)),long,long))
,	O
false	int
)	O
;	O
}	O
drop_reference	(*(struct(int,struct(*(*`),long,long))))->(void)
(	O
token	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(struct(int,struct(*(*`),long,long))),int)
.	O
comment	*(struct(*(*(char)),long,long))
)	O
;	O
}	O
next_context_iter	struct(int,*(struct(int,struct(int,int,int,int,int,int),*(struct(int,struct`,*`)))))
=	O
null_context_list_iterator	struct(int,*(struct(int,struct(int,int,int,int,int,int),*(struct(int,struct`,*`)))))
;	O
state	*(int)
=	O
0	int
;	O
continue	O
;	O
case	O
token_type_dot	int
:	O
case	O
token_type_operator1	int
:	O
case	O
token_type_operator2	int
:	O
case	O
token_type_other	int
:	O
next_context_iter	struct(int,*(struct(int,struct(int,int,int,int,int,int),*(struct(int,struct`,*`)))))
=	O
null_context_list_iterator	struct(int,*(struct(int,struct(int,int,int,int,int,int),*(struct(int,struct`,*`)))))
;	O
state	*(int)
=	O
0	int
;	O
continue	O
;	O
case	O
token_type_eof	int
:	O
arglist_parser_done	(*(struct(*(struct(*`,long,long,bool,struct`)),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long))))),int)->(void)
(	O
argparser	*(struct(*(struct(*(*`),long,long,bool,struct(long,long,*`,*`,struct`))),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long)))))
,	O
arg	int
)	O
;	O
return	O
true	int
;	O
default	O
:	O
abort	()->(void)
(	O
)	O
;	O
}	O
}	O
}	O
void	O
extract_php	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char),*(char),*(struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))),*(struct(*(*(struct`)),long,long,bool,*(char))))->(void)
(	O
FILE	struct
*	O
f	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
const	O
char	O
*	O
real_filename	*(char)
,	O
const	O
char	O
*	O
logical_filename	*(char)
,	O
flag_context_list_table_ty	struct(long,long,*(struct),*(struct),struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),long,union(*((long)->(*`)),*((*`,long)->(*`))),union(*((*`)->(void)),*((*`,*`)->(void))),*(void),int,int,int))
*	O
flag_table	*(struct(long,long,*(struct),*(struct),struct(long,*(struct(*`,*`,array(char))),*(char),*(char),*(char),union(long,*(void)),long,union(*((long)->(*`)),*((*`,long)->(*`))),union(*((*`)->(void)),*((*`,*`)->(void))),*(void),int,int,int)))
,	O
msgdomain_list_ty	struct
*	O
mdlp	*(struct(*(*(struct(*`,*`))),long,long,bool,*(char)))
)	O
{	O
message_list_ty	struct
*	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
=	O
mdlp	*(struct(*(*(struct(*`,*`))),long,long,bool,*(char)))
->	O
item	*(*(char))
[	O
0	int
]	O
->	O
messages	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
;	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
=	O
f	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
;	O
real_file_name	*(char)
=	O
real_filename	*(char)
;	O
logical_file_name	*(char)
=	O
xstrdup	(*(char))->(*(char))
(	O
logical_filename	*(char)
)	O
;	O
line_number	long
=	O
1	int
;	O
last_comment_line	int
=	O
-	O
1	int
;	O
last_non_comment_line	int
=	O
-	O
1	int
;	O
phase5_last	enum(int,int,int,int,int,int,int,int,int,int,int,int)
=	O
token_type_eof	int
;	O
flag_context_list_table	*(struct(long,long,*(struct),*(struct),struct(long,*(struct(*`,*`,array(char))),*(char),*(char),*(char),union(long,*(void)),long,union(*((long)->(*`)),*((*`,long)->(*`))),union(*((*`)->(void)),*((*`,*`)->(void))),*(void),int,int,int)))
=	O
flag_table	*(struct(long,long,*(struct),*(struct),struct(long,*(struct(*`,*`,array(char))),*(char),*(char),*(char),union(long,*(void)),long,union(*((long)->(*`)),*((*`,long)->(*`))),union(*((*`)->(void)),*((*`,*`)->(void))),*(void),int,int,int)))
;	O
init_keywords	()->(void)
(	O
)	O
;	O
skip_html	()->(void)
(	O
)	O
;	O
while	O
(	O
!	O
extract_balanced	(*(struct(*(*(struct`)),long,long,bool,struct(long,long,*(struct`),*(struct`),struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int)))),enum(int,int,int,int,int,int,int,int,int,int,int,int),struct(int,int,int,int,int,int),struct(int,*(struct(int,struct(int,int,int,int,int,int),*(struct`)))),*(struct(*(struct(*`,long,long,bool,struct`)),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long))))))->(bool)
(	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
,	O
token_type_eof	int
,	O
null_context	struct(int,int,int,int,int,int)
,	O
null_context_list_iterator	struct(int,*(struct(int,struct(int,int,int,int,int,int),*(struct(int,struct`,*`)))))
,	O
arglist_parser_alloc	(*(struct(*(*(struct`)),long,long,bool,struct(long,long,*(struct`),*(struct`),struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int)))),*(struct(*(char),long,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long))))))->(*(struct(*(struct(*`,long,long,bool,struct`)),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long))))))
(	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
,	O
NULL	O
)	O
)	O
)	O
;	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
=	O
NULL	O
;	O
real_file_name	*(char)
=	O
NULL	O
;	O
logical_file_name	*(char)
=	O
NULL	O
;	O
line_number	long
=	O
0	int
;	O
}	O
