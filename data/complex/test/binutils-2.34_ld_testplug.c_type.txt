extern	O
enum	O
ld_plugin_status	O
onload	O
(	O
struct	O
ld_plugin_tv	O
*	O
tv	O
)	O
;	O
static	O
enum	O
ld_plugin_status	O
onclaim_file	O
(	O
const	O
struct	O
ld_plugin_input_file	O
*	O
file	*(void)
,	O
int	O
*	O
claimed	O
)	O
;	O
static	O
enum	O
ld_plugin_status	O
onall_symbols_read	O
(	O
void	O
)	O
;	O
static	O
enum	O
ld_plugin_status	O
oncleanup	O
(	O
void	O
)	O
;	O
typedef	O
struct	O
claim_file	O
{	O
struct	O
claim_file	O
*	O
next	*(struct(*(struct(*(struct`),*(char),long)),*(char),long))
;	O
struct	O
ld_plugin_input_file	O
file	*(void)
;	O
bfd_boolean	int
claimed	O
;	O
struct	O
ld_plugin_symbol	O
*	O
symbols	O
;	O
int	O
n_syms_allocated	O
;	O
int	O
n_syms_used	O
;	O
}	O
claim_file_t	O
;	O
typedef	O
enum	O
addfile_enum	O
{	O
ADD_FILE	O
,	O
ADD_LIB	O
,	O
ADD_DIR	O
}	O
addfile_enum_t	O
;	O
typedef	O
struct	O
add_file	O
{	O
struct	O
add_file	O
*	O
next	*(struct(*(struct(*(struct`),*(char),long)),*(char),long))
;	O
const	O
char	O
*	O
name	*(char)
;	O
addfile_enum_t	O
type	enum(int,int,int,int)
;	O
}	O
add_file_t	O
;	O
typedef	O
struct	O
tag_name	O
{	O
enum	O
ld_plugin_tag	O
tag	O
;	O
const	O
char	O
*	O
name	*(char)
;	O
}	O
tag_name_t	O
;	O
static	O
const	O
tag_name_t	O
tag_names	O
[	O
]	O
=	O
{	O
ADDENTRY	O
(	O
LDPT_NULL	O
)	O
,	O
ADDENTRY	O
(	O
LDPT_API_VERSION	O
)	O
,	O
ADDENTRY	O
(	O
LDPT_GOLD_VERSION	O
)	O
,	O
ADDENTRY	O
(	O
LDPT_LINKER_OUTPUT	O
)	O
,	O
ADDENTRY	O
(	O
LDPT_OPTION	O
)	O
,	O
ADDENTRY	O
(	O
LDPT_REGISTER_CLAIM_FILE_HOOK	O
)	O
,	O
ADDENTRY	O
(	O
LDPT_REGISTER_ALL_SYMBOLS_READ_HOOK	O
)	O
,	O
ADDENTRY	O
(	O
LDPT_REGISTER_CLEANUP_HOOK	O
)	O
,	O
ADDENTRY	O
(	O
LDPT_ADD_SYMBOLS	O
)	O
,	O
ADDENTRY	O
(	O
LDPT_GET_SYMBOLS	O
)	O
,	O
ADDENTRY	O
(	O
LDPT_GET_SYMBOLS_V2	O
)	O
,	O
ADDENTRY	O
(	O
LDPT_ADD_INPUT_FILE	O
)	O
,	O
ADDENTRY	O
(	O
LDPT_MESSAGE	O
)	O
,	O
ADDENTRY	O
(	O
LDPT_GET_INPUT_FILE	O
)	O
,	O
ADDENTRY	O
(	O
LDPT_GET_VIEW	O
)	O
,	O
ADDENTRY	O
(	O
LDPT_RELEASE_INPUT_FILE	O
)	O
,	O
ADDENTRY	O
(	O
LDPT_ADD_INPUT_LIBRARY	O
)	O
,	O
ADDENTRY	O
(	O
LDPT_OUTPUT_NAME	O
)	O
,	O
ADDENTRY	O
(	O
LDPT_SET_EXTRA_LIBRARY_PATH	O
)	O
,	O
ADDENTRY	O
(	O
LDPT_GNU_LD_VERSION	O
)	O
}	O
;	O
static	O
ld_plugin_register_claim_file	O
tv_register_claim_file	O
=	O
0	int
;	O
static	O
ld_plugin_register_all_symbols_read	O
tv_register_all_symbols_read	O
=	O
0	int
;	O
static	O
ld_plugin_register_cleanup	O
tv_register_cleanup	O
=	O
0	int
;	O
static	O
ld_plugin_add_symbols	O
tv_add_symbols	O
=	O
0	int
;	O
static	O
ld_plugin_get_symbols	O
tv_get_symbols	O
=	O
0	int
;	O
static	O
ld_plugin_get_symbols	O
tv_get_symbols_v2	O
=	O
0	int
;	O
static	O
ld_plugin_add_input_file	O
tv_add_input_file	O
=	O
0	int
;	O
static	O
ld_plugin_message	O
tv_message	O
=	O
0	int
;	O
static	O
ld_plugin_get_input_file	O
tv_get_input_file	O
=	O
0	int
;	O
static	O
ld_plugin_get_view	O
tv_get_view	O
=	O
0	int
;	O
static	O
ld_plugin_release_input_file	O
tv_release_input_file	O
=	O
0	int
;	O
static	O
ld_plugin_add_input_library	O
tv_add_input_library	O
=	O
0	int
;	O
static	O
ld_plugin_set_extra_library_path	O
tv_set_extra_library_path	O
=	O
0	int
;	O
static	O
enum	O
ld_plugin_output_file_type	O
linker_output	O
;	O
static	O
const	O
char	O
*	O
output_name	O
;	O
static	O
enum	O
ld_plugin_status	O
onload_ret	O
=	O
LDPS_OK	O
;	O
static	O
enum	O
ld_plugin_status	O
claim_file_ret	O
=	O
LDPS_OK	O
;	O
static	O
enum	O
ld_plugin_status	O
all_symbols_read_ret	O
=	O
LDPS_OK	O
;	O
static	O
enum	O
ld_plugin_status	O
cleanup_ret	O
=	O
LDPS_OK	O
;	O
static	O
bfd_boolean	int
register_claimfile_hook	O
=	O
FALSE	O
;	O
static	O
bfd_boolean	int
register_allsymbolsread_hook	O
=	O
FALSE	O
;	O
static	O
bfd_boolean	int
register_cleanup_hook	O
=	O
FALSE	O
;	O
static	O
bfd_boolean	int
dumpresolutions	O
=	O
FALSE	O
;	O
static	O
claim_file_t	O
*	O
claimfiles_list	O
=	O
NULL	O
;	O
static	O
claim_file_t	O
*	O
*	O
claimfiles_tail_chain_ptr	O
=	O
&	O
claimfiles_list	O
;	O
static	O
claim_file_t	O
*	O
last_claimfile	O
=	O
NULL	O
;	O
static	O
add_file_t	O
*	O
addfiles_list	O
=	O
NULL	O
;	O
static	O
add_file_t	O
*	O
*	O
addfiles_tail_chain_ptr	O
=	O
&	O
addfiles_list	O
;	O
static	O
int	O
bytes_to_read_before_claim	O
=	O
0	int
;	O
static	O
enum	O
ld_plugin_status	O
record_claim_file	O
(	O
const	O
char	O
*	O
file	*(void)
)	O
{	O
claim_file_t	O
*	O
newfile	O
;	O
newfile	O
=	O
malloc	(long)->(*(void))
(	O
sizeof	O
*	O
newfile	O
)	O
;	O
if	O
(	O
!	O
newfile	O
)	O
return	O
LDPS_ERR	O
;	O
memset	(*(void),int,long)->(*(void))
(	O
newfile	O
,	O
0	int
,	O
sizeof	O
*	O
newfile	O
)	O
;	O
newfile	O
->	O
file	*(void)
.	O
name	*(char)
=	O
file	*(void)
;	O
*	O
claimfiles_tail_chain_ptr	O
=	O
newfile	O
;	O
claimfiles_tail_chain_ptr	O
=	O
&	O
newfile	O
->	O
next	*(struct(*(struct(*(struct`),*(char),long)),*(char),long))
;	O
last_claimfile	O
=	O
newfile	O
;	O
return	O
LDPS_OK	O
;	O
}	O
static	O
enum	O
ld_plugin_status	O
record_read_length	O
(	O
const	O
char	O
*	O
length	O
)	O
{	O
const	O
char	O
*	O
tmp	O
;	O
tmp	O
=	O
length	O
;	O
while	O
(	O
*	O
tmp	O
!=	O
'\0'	O
&&	O
isdigit	O
(	O
*	O
tmp	O
)	O
)	O
++	O
tmp	O
;	O
if	O
(	O
*	O
tmp	O
!=	O
'\0'	O
||	O
*	O
length	O
==	O
'\0'	O
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"APB: Bad length string: %s\n"	*(char)
,	O
tmp	O
)	O
;	O
return	O
LDPS_ERR	O
;	O
}	O
bytes_to_read_before_claim	O
=	O
atoi	(*(char))->(int)
(	O
length	O
)	O
;	O
return	O
LDPS_OK	O
;	O
}	O
static	O
enum	O
ld_plugin_status	O
record_add_file	O
(	O
const	O
char	O
*	O
file	*(void)
,	O
addfile_enum_t	O
type	enum(int,int,int,int)
)	O
{	O
add_file_t	O
*	O
newfile	O
;	O
newfile	O
=	O
malloc	(long)->(*(void))
(	O
sizeof	O
*	O
newfile	O
)	O
;	O
if	O
(	O
!	O
newfile	O
)	O
return	O
LDPS_ERR	O
;	O
newfile	O
->	O
next	*(struct(*(struct(*(struct`),*(char),long)),*(char),long))
=	O
NULL	O
;	O
newfile	O
->	O
name	*(char)
=	O
file	*(void)
;	O
newfile	O
->	O
type	enum(int,int,int,int)
=	O
type	enum(int,int,int,int)
;	O
*	O
addfiles_tail_chain_ptr	O
=	O
newfile	O
;	O
addfiles_tail_chain_ptr	O
=	O
&	O
newfile	O
->	O
next	*(struct(*(struct(*(struct`),*(char),long)),*(char),long))
;	O
return	O
LDPS_OK	O
;	O
}	O
static	O
enum	O
ld_plugin_status	O
parse_symdefstr	O
(	O
const	O
char	O
*	O
str	O
,	O
struct	O
ld_plugin_symbol	O
*	O
sym	*(struct)
)	O
{	O
int	O
n	O
;	O
long	O
long	O
size	int
;	O
const	O
char	O
*	O
colon1	O
,	O
*	O
colon2	O
,	O
*	O
colon5	O
;	O
colon1	O
=	O
strchr	(*(char),int)->(*(char))
(	O
str	O
,	O
':'	O
)	O
;	O
if	O
(	O
!	O
colon1	O
)	O
return	O
LDPS_ERR	O
;	O
colon2	O
=	O
strchr	(*(char),int)->(*(char))
(	O
colon1	O
+	O
1	int
,	O
':'	O
)	O
;	O
if	O
(	O
!	O
colon2	O
)	O
return	O
LDPS_ERR	O
;	O
if	O
(	O
colon1	O
==	O
str	O
)	O
return	O
LDPS_ERR	O
;	O
colon5	O
=	O
strchr	(*(char),int)->(*(char))
(	O
colon2	O
+	O
1	int
,	O
':'	O
)	O
;	O
if	O
(	O
!	O
colon5	O
)	O
return	O
LDPS_ERR	O
;	O
colon5	O
=	O
strchr	(*(char),int)->(*(char))
(	O
colon5	O
+	O
1	int
,	O
':'	O
)	O
;	O
if	O
(	O
!	O
colon5	O
)	O
return	O
LDPS_ERR	O
;	O
colon5	O
=	O
strchr	(*(char),int)->(*(char))
(	O
colon5	O
+	O
1	int
,	O
':'	O
)	O
;	O
n	O
=	O
sscanf	(*(char),*(char))->(int)
(	O
colon2	O
+	O
1	int
,	O
"%i:%i:%lli"	*(char)
,	O
&	O
sym	*(struct)
->	O
def	O
,	O
&	O
sym	*(struct)
->	O
visibility	O
,	O
&	O
size	int
)	O
;	O
if	O
(	O
n	O
!=	O
3	int
)	O
return	O
LDPS_ERR	O
;	O
sym	*(struct)
->	O
size	int
=	O
size	int
;	O
sym	*(struct)
->	O
resolution	O
=	O
LDPR_UNKNOWN	O
;	O
sym	*(struct)
->	O
name	*(char)
=	O
malloc	(long)->(*(void))
(	O
colon1	O
-	O
str	O
+	O
1	int
)	O
;	O
if	O
(	O
!	O
sym	*(struct)
->	O
name	*(char)
)	O
return	O
LDPS_ERR	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
sym	*(struct)
->	O
name	*(char)
,	O
str	O
,	O
colon1	O
-	O
str	O
)	O
;	O
sym	*(struct)
->	O
name	*(char)
[	O
colon1	O
-	O
str	O
]	O
=	O
'\0'	O
;	O
if	O
(	O
colon2	O
>	O
(	O
colon1	O
+	O
1	int
)	O
)	O
{	O
sym	*(struct)
->	O
version	O
=	O
malloc	(long)->(*(void))
(	O
colon2	O
-	O
colon1	O
)	O
;	O
if	O
(	O
!	O
sym	*(struct)
->	O
version	O
)	O
return	O
LDPS_ERR	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
sym	*(struct)
->	O
version	O
,	O
colon1	O
+	O
1	int
,	O
colon2	O
-	O
(	O
colon1	O
+	O
1	int
)	O
)	O
;	O
sym	*(struct)
->	O
version	O
[	O
colon2	O
-	O
(	O
colon1	O
+	O
1	int
)	O
]	O
=	O
'\0'	O
;	O
}	O
else	O
sym	*(struct)
->	O
version	O
=	O
NULL	O
;	O
if	O
(	O
colon5	O
&&	O
colon5	O
[	O
1	int
]	O
)	O
{	O
sym	*(struct)
->	O
comdat_key	O
=	O
malloc	(long)->(*(void))
(	O
strlen	(*(char))->(long)
(	O
colon5	O
+	O
1	int
)	O
+	O
1	int
)	O
;	O
if	O
(	O
!	O
sym	*(struct)
->	O
comdat_key	O
)	O
return	O
LDPS_ERR	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
sym	*(struct)
->	O
comdat_key	O
,	O
colon5	O
+	O
1	int
)	O
;	O
}	O
else	O
sym	*(struct)
->	O
comdat_key	O
=	O
0	int
;	O
return	O
LDPS_OK	O
;	O
}	O
static	O
enum	O
ld_plugin_status	O
record_claimed_file_symbol	O
(	O
const	O
char	O
*	O
symdefstr	O
)	O
{	O
struct	O
ld_plugin_symbol	O
sym	*(struct)
;	O
if	O
(	O
!	O
last_claimfile	O
)	O
return	O
LDPS_ERR	O
;	O
if	O
(	O
parse_symdefstr	O
(	O
symdefstr	O
,	O
&	O
sym	*(struct)
)	O
!=	O
LDPS_OK	O
)	O
return	O
LDPS_ERR	O
;	O
if	O
(	O
last_claimfile	O
->	O
n_syms_allocated	O
==	O
last_claimfile	O
->	O
n_syms_used	O
)	O
{	O
int	O
new_n_syms	O
=	O
last_claimfile	O
->	O
n_syms_allocated	O
?	O
2	int
*	O
last_claimfile	O
->	O
n_syms_allocated	O
:	O
10	int
;	O
last_claimfile	O
->	O
symbols	O
=	O
realloc	(*(void),long)->(*(void))
(	O
last_claimfile	O
->	O
symbols	O
,	O
new_n_syms	O
*	O
sizeof	O
*	O
last_claimfile	O
->	O
symbols	O
)	O
;	O
if	O
(	O
!	O
last_claimfile	O
->	O
symbols	O
)	O
return	O
LDPS_ERR	O
;	O
last_claimfile	O
->	O
n_syms_allocated	O
=	O
new_n_syms	O
;	O
}	O
last_claimfile	O
->	O
symbols	O
[	O
last_claimfile	O
->	O
n_syms_used	O
++	O
]	O
=	O
sym	*(struct)
;	O
return	O
LDPS_OK	O
;	O
}	O
static	O
enum	O
ld_plugin_status	O
set_ret_val	O
(	O
const	O
char	O
*	O
whichval	O
,	O
enum	O
ld_plugin_status	O
retval	O
)	O
{	O
if	O
(	O
!	O
strcmp	(*(char),*(char))->(int)
(	O
"onload"	*(char)
,	O
whichval	O
)	O
)	O
onload_ret	O
=	O
retval	O
;	O
else	O
if	O
(	O
!	O
strcmp	(*(char),*(char))->(int)
(	O
"claimfile"	*(char)
,	O
whichval	O
)	O
)	O
claim_file_ret	O
=	O
retval	O
;	O
else	O
if	O
(	O
!	O
strcmp	(*(char),*(char))->(int)
(	O
"allsymbolsread"	*(char)
,	O
whichval	O
)	O
)	O
all_symbols_read_ret	O
=	O
retval	O
;	O
else	O
if	O
(	O
!	O
strcmp	(*(char),*(char))->(int)
(	O
"cleanup"	*(char)
,	O
whichval	O
)	O
)	O
cleanup_ret	O
=	O
retval	O
;	O
else	O
return	O
LDPS_ERR	O
;	O
return	O
LDPS_OK	O
;	O
}	O
static	O
enum	O
ld_plugin_status	O
set_register_hook	O
(	O
const	O
char	O
*	O
whichhook	O
,	O
bfd_boolean	int
yesno	O
)	O
{	O
if	O
(	O
!	O
strcmp	(*(char),*(char))->(int)
(	O
"claimfile"	*(char)
,	O
whichhook	O
)	O
)	O
register_claimfile_hook	O
=	O
yesno	O
;	O
else	O
if	O
(	O
!	O
strcmp	(*(char),*(char))->(int)
(	O
"allsymbolsread"	*(char)
,	O
whichhook	O
)	O
)	O
register_allsymbolsread_hook	O
=	O
yesno	O
;	O
else	O
if	O
(	O
!	O
strcmp	(*(char),*(char))->(int)
(	O
"cleanup"	*(char)
,	O
whichhook	O
)	O
)	O
register_cleanup_hook	O
=	O
yesno	O
;	O
else	O
return	O
LDPS_ERR	O
;	O
return	O
LDPS_OK	O
;	O
}	O
static	O
enum	O
ld_plugin_status	O
parse_option	O
(	O
const	O
char	O
*	O
opt	O
)	O
{	O
if	O
(	O
!	O
strncmp	(*(char),*(char),long)->(int)
(	O
"fail"	*(char)
,	O
opt	O
,	O
4	int
)	O
)	O
return	O
set_ret_val	O
(	O
opt	O
+	O
4	int
,	O
LDPS_ERR	O
)	O
;	O
else	O
if	O
(	O
!	O
strncmp	(*(char),*(char),long)->(int)
(	O
"pass"	*(char)
,	O
opt	O
,	O
4	int
)	O
)	O
return	O
set_ret_val	O
(	O
opt	O
+	O
4	int
,	O
LDPS_OK	O
)	O
;	O
else	O
if	O
(	O
!	O
strncmp	(*(char),*(char),long)->(int)
(	O
"register"	*(char)
,	O
opt	O
,	O
8	int
)	O
)	O
return	O
set_register_hook	O
(	O
opt	O
+	O
8	int
,	O
TRUE	int
)	O
;	O
else	O
if	O
(	O
!	O
strncmp	(*(char),*(char),long)->(int)
(	O
"noregister"	*(char)
,	O
opt	O
,	O
10	int
)	O
)	O
return	O
set_register_hook	O
(	O
opt	O
+	O
10	int
,	O
FALSE	O
)	O
;	O
else	O
if	O
(	O
!	O
strncmp	(*(char),*(char),long)->(int)
(	O
"claim:"	*(char)
,	O
opt	O
,	O
6	int
)	O
)	O
return	O
record_claim_file	O
(	O
opt	O
+	O
6	int
)	O
;	O
else	O
if	O
(	O
!	O
strncmp	(*(char),*(char),long)->(int)
(	O
"read:"	*(char)
,	O
opt	O
,	O
5	int
)	O
)	O
return	O
record_read_length	O
(	O
opt	O
+	O
5	int
)	O
;	O
else	O
if	O
(	O
!	O
strncmp	(*(char),*(char),long)->(int)
(	O
"sym:"	*(char)
,	O
opt	O
,	O
4	int
)	O
)	O
return	O
record_claimed_file_symbol	O
(	O
opt	O
+	O
4	int
)	O
;	O
else	O
if	O
(	O
!	O
strncmp	(*(char),*(char),long)->(int)
(	O
"add:"	*(char)
,	O
opt	O
,	O
4	int
)	O
)	O
return	O
record_add_file	O
(	O
opt	O
+	O
4	int
,	O
ADD_FILE	O
)	O
;	O
else	O
if	O
(	O
!	O
strncmp	(*(char),*(char),long)->(int)
(	O
"lib:"	*(char)
,	O
opt	O
,	O
4	int
)	O
)	O
return	O
record_add_file	O
(	O
opt	O
+	O
4	int
,	O
ADD_LIB	O
)	O
;	O
else	O
if	O
(	O
!	O
strncmp	(*(char),*(char),long)->(int)
(	O
"dir:"	*(char)
,	O
opt	O
,	O
4	int
)	O
)	O
return	O
record_add_file	O
(	O
opt	O
+	O
4	int
,	O
ADD_DIR	O
)	O
;	O
else	O
if	O
(	O
!	O
strcmp	(*(char),*(char))->(int)
(	O
"dumpresolutions"	*(char)
,	O
opt	O
)	O
)	O
dumpresolutions	O
=	O
TRUE	int
;	O
else	O
return	O
LDPS_ERR	O
;	O
return	O
LDPS_OK	O
;	O
}	O
static	O
void	O
dump_tv_tag	O
(	O
size_t	long
n	O
,	O
struct	O
ld_plugin_tv	O
*	O
tv	O
)	O
{	O
size_t	long
tag	O
;	O
char	O
unknownbuf	O
[	O
40	int
]	O
;	O
const	O
char	O
*	O
name	*(char)
;	O
for	O
(	O
tag	O
=	O
0	int
;	O
tag	O
<	O
ARRAY_SIZE	O
(	O
tag_names	O
)	O
;	O
tag	O
++	O
)	O
if	O
(	O
tag_names	O
[	O
tag	O
]	O
.	O
tag	O
==	O
tv	O
->	O
tv_tag	O
)	O
break	O
;	O
sprintf	(*(char),*(char))->(int)
(	O
unknownbuf	O
,	O
"unknown tag #%d"	*(char)
,	O
tv	O
->	O
tv_tag	O
)	O
;	O
name	*(char)
=	O
(	O
tag	O
<	O
ARRAY_SIZE	O
(	O
tag_names	O
)	O
)	O
?	O
tag_names	O
[	O
tag	O
]	O
.	O
name	*(char)
:	O
unknownbuf	O
;	O
switch	O
(	O
tv	O
->	O
tv_tag	O
)	O
{	O
case	O
LDPT_OPTION	O
:	O
case	O
LDPT_OUTPUT_NAME	O
:	O
TV_MESSAGE	O
(	O
LDPL_INFO	O
,	O
"tv[%d]: %s '%s'"	*(char)
,	O
n	O
,	O
name	*(char)
,	O
tv	O
->	O
tv_u	O
.	O
tv_string	O
)	O
;	O
break	O
;	O
case	O
LDPT_REGISTER_CLAIM_FILE_HOOK	O
:	O
case	O
LDPT_REGISTER_ALL_SYMBOLS_READ_HOOK	O
:	O
case	O
LDPT_REGISTER_CLEANUP_HOOK	O
:	O
case	O
LDPT_ADD_SYMBOLS	O
:	O
case	O
LDPT_GET_SYMBOLS	O
:	O
case	O
LDPT_GET_SYMBOLS_V2	O
:	O
case	O
LDPT_ADD_INPUT_FILE	O
:	O
case	O
LDPT_MESSAGE	O
:	O
case	O
LDPT_GET_INPUT_FILE	O
:	O
case	O
LDPT_GET_VIEW	O
:	O
case	O
LDPT_RELEASE_INPUT_FILE	O
:	O
case	O
LDPT_ADD_INPUT_LIBRARY	O
:	O
case	O
LDPT_SET_EXTRA_LIBRARY_PATH	O
:	O
TV_MESSAGE	O
(	O
LDPL_INFO	O
,	O
"tv[%d]: %s func@0x%p"	*(char)
,	O
n	O
,	O
name	*(char)
,	O
(	O
void	O
*	O
)	O
(	O
tv	O
->	O
tv_u	O
.	O
tv_message	O
)	O
)	O
;	O
break	O
;	O
case	O
LDPT_NULL	O
:	O
case	O
LDPT_API_VERSION	O
:	O
case	O
LDPT_GOLD_VERSION	O
:	O
case	O
LDPT_LINKER_OUTPUT	O
:	O
case	O
LDPT_GNU_LD_VERSION	O
:	O
default	O
:	O
TV_MESSAGE	O
(	O
LDPL_INFO	O
,	O
"tv[%d]: %s value %W (%d)"	*(char)
,	O
n	O
,	O
name	*(char)
,	O
(	O
bfd_vma	long
)	O
tv	O
->	O
tv_u	O
.	O
tv_val	O
,	O
tv	O
->	O
tv_u	O
.	O
tv_val	O
)	O
;	O
break	O
;	O
}	O
}	O
static	O
enum	O
ld_plugin_status	O
parse_tv_tag	O
(	O
struct	O
ld_plugin_tv	O
*	O
tv	O
)	O
{	O
switch	O
(	O
tv	O
->	O
tv_tag	O
)	O
{	O
case	O
LDPT_OPTION	O
:	O
return	O
parse_option	O
(	O
tv	O
->	O
tv_u	O
.	O
tv_string	O
)	O
;	O
case	O
LDPT_NULL	O
:	O
case	O
LDPT_GOLD_VERSION	O
:	O
case	O
LDPT_GNU_LD_VERSION	O
:	O
case	O
LDPT_API_VERSION	O
:	O
default	O
:	O
break	O
;	O
case	O
LDPT_OUTPUT_NAME	O
:	O
output_name	O
=	O
tv	O
->	O
tv_u	O
.	O
tv_string	O
;	O
break	O
;	O
case	O
LDPT_LINKER_OUTPUT	O
:	O
linker_output	O
=	O
tv	O
->	O
tv_u	O
.	O
tv_val	O
;	O
break	O
;	O
case	O
LDPT_REGISTER_CLAIM_FILE_HOOK	O
:	O
SETVAR	O
(	O
tv_register_claim_file	O
)	O
;	O
break	O
;	O
case	O
LDPT_REGISTER_ALL_SYMBOLS_READ_HOOK	O
:	O
SETVAR	O
(	O
tv_register_all_symbols_read	O
)	O
;	O
break	O
;	O
case	O
LDPT_REGISTER_CLEANUP_HOOK	O
:	O
SETVAR	O
(	O
tv_register_cleanup	O
)	O
;	O
break	O
;	O
case	O
LDPT_ADD_SYMBOLS	O
:	O
SETVAR	O
(	O
tv_add_symbols	O
)	O
;	O
break	O
;	O
case	O
LDPT_GET_SYMBOLS	O
:	O
SETVAR	O
(	O
tv_get_symbols	O
)	O
;	O
break	O
;	O
case	O
LDPT_GET_SYMBOLS_V2	O
:	O
tv_get_symbols_v2	O
=	O
tv	O
->	O
tv_u	O
.	O
tv_get_symbols	O
;	O
break	O
;	O
case	O
LDPT_ADD_INPUT_FILE	O
:	O
SETVAR	O
(	O
tv_add_input_file	O
)	O
;	O
break	O
;	O
case	O
LDPT_MESSAGE	O
:	O
SETVAR	O
(	O
tv_message	O
)	O
;	O
break	O
;	O
case	O
LDPT_GET_INPUT_FILE	O
:	O
SETVAR	O
(	O
tv_get_input_file	O
)	O
;	O
break	O
;	O
case	O
LDPT_GET_VIEW	O
:	O
SETVAR	O
(	O
tv_get_view	O
)	O
;	O
break	O
;	O
case	O
LDPT_RELEASE_INPUT_FILE	O
:	O
SETVAR	O
(	O
tv_release_input_file	O
)	O
;	O
break	O
;	O
case	O
LDPT_ADD_INPUT_LIBRARY	O
:	O
SETVAR	O
(	O
tv_add_input_library	O
)	O
;	O
break	O
;	O
case	O
LDPT_SET_EXTRA_LIBRARY_PATH	O
:	O
SETVAR	O
(	O
tv_set_extra_library_path	O
)	O
;	O
break	O
;	O
}	O
return	O
LDPS_OK	O
;	O
}	O
enum	O
ld_plugin_status	O
parse_and_dump_tv_tag	O
(	O
size_t	long
n	O
,	O
struct	O
ld_plugin_tv	O
*	O
tv	O
)	O
{	O
enum	O
ld_plugin_status	O
rv	O
=	O
parse_tv_tag	O
(	O
tv	O
)	O
;	O
dump_tv_tag	O
(	O
n	O
,	O
tv	O
)	O
;	O
return	O
rv	O
;	O
}	O
enum	O
ld_plugin_status	O
onload	O
(	O
struct	O
ld_plugin_tv	O
*	O
tv	O
)	O
{	O
size_t	long
n	O
=	O
0	int
;	O
enum	O
ld_plugin_status	O
rv	O
;	O
if	O
(	O
!	O
tv	O
)	O
return	O
LDPS_ERR	O
;	O
if	O
(	O
tv	O
[	O
0	int
]	O
.	O
tv_tag	O
==	O
LDPT_MESSAGE	O
)	O
tv_message	O
=	O
tv	O
[	O
0	int
]	O
.	O
tv_u	O
.	O
tv_message	O
;	O
fflush	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
NULL	O
)	O
;	O
TV_MESSAGE	O
(	O
LDPL_INFO	O
,	O
"Hello from testplugin."	*(char)
)	O
;	O
do	O
if	O
(	O
(	O
rv	O
=	O
parse_and_dump_tv_tag	O
(	O
n	O
++	O
,	O
tv	O
)	O
)	O
!=	O
LDPS_OK	O
)	O
return	O
rv	O
;	O
while	O
(	O
(	O
tv	O
++	O
)	O
->	O
tv_tag	O
!=	O
LDPT_NULL	O
)	O
;	O
if	O
(	O
register_claimfile_hook	O
)	O
{	O
if	O
(	O
!	O
tv_register_claim_file	O
)	O
{	O
TV_MESSAGE	O
(	O
LDPL_FATAL	O
,	O
"No register_claim_file hook"	*(char)
)	O
;	O
fflush	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
NULL	O
)	O
;	O
return	O
LDPS_ERR	O
;	O
}	O
(	O
*	O
tv_register_claim_file	O
)	O
(	O
onclaim_file	O
)	O
;	O
}	O
if	O
(	O
register_allsymbolsread_hook	O
)	O
{	O
if	O
(	O
!	O
tv_register_all_symbols_read	O
)	O
{	O
TV_MESSAGE	O
(	O
LDPL_FATAL	O
,	O
"No register_all_symbols_read hook"	*(char)
)	O
;	O
fflush	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
NULL	O
)	O
;	O
return	O
LDPS_ERR	O
;	O
}	O
(	O
*	O
tv_register_all_symbols_read	O
)	O
(	O
onall_symbols_read	O
)	O
;	O
}	O
if	O
(	O
register_cleanup_hook	O
)	O
{	O
if	O
(	O
!	O
tv_register_cleanup	O
)	O
{	O
TV_MESSAGE	O
(	O
LDPL_FATAL	O
,	O
"No register_cleanup hook"	*(char)
)	O
;	O
fflush	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
NULL	O
)	O
;	O
return	O
LDPS_ERR	O
;	O
}	O
(	O
*	O
tv_register_cleanup	O
)	O
(	O
oncleanup	O
)	O
;	O
}	O
fflush	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
NULL	O
)	O
;	O
return	O
onload_ret	O
;	O
}	O
static	O
enum	O
ld_plugin_status	O
onclaim_file	O
(	O
const	O
struct	O
ld_plugin_input_file	O
*	O
file	*(void)
,	O
int	O
*	O
claimed	O
)	O
{	O
if	O
(	O
bytes_to_read_before_claim	O
>	O
0	int
)	O
{	O
char	O
*	O
buffer	O
=	O
malloc	(long)->(*(void))
(	O
bytes_to_read_before_claim	O
)	O
;	O
if	O
(	O
buffer	O
==	O
NULL	O
)	O
return	O
LDPS_ERR	O
;	O
if	O
(	O
read	*((*(void),*(char),long)->(long))
(	O
file	*(void)
->	O
fd	int
,	O
buffer	O
,	O
bytes_to_read_before_claim	O
)	O
<	O
0	int
)	O
return	O
LDPS_ERR	O
;	O
free	(*(void))->(void)
(	O
buffer	O
)	O
;	O
}	O
claim_file_t	O
*	O
claimfile	O
=	O
claimfiles_list	O
;	O
while	O
(	O
claimfile	O
)	O
{	O
if	O
(	O
!	O
strcmp	(*(char),*(char))->(int)
(	O
file	*(void)
->	O
name	*(char)
,	O
claimfile	O
->	O
file	*(void)
.	O
name	*(char)
)	O
)	O
break	O
;	O
claimfile	O
=	O
claimfile	O
->	O
next	*(struct(*(struct(*(struct`),*(char),long)),*(char),long))
;	O
}	O
TV_MESSAGE	O
(	O
LDPL_INFO	O
,	O
"hook called: claim_file %s [@%ld/%ld] %s"	*(char)
,	O
file	*(void)
->	O
name	*(char)
,	O
(	O
long	O
)	O
file	*(void)
->	O
offset	long
,	O
(	O
long	O
)	O
file	*(void)
->	O
filesize	O
,	O
claimfile	O
?	O
"CLAIMED"	*(char)
:	O
"not claimed"	*(char)
)	O
;	O
fflush	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
NULL	O
)	O
;	O
*	O
claimed	O
=	O
(	O
claimfile	O
!=	O
0	int
)	O
;	O
if	O
(	O
claimfile	O
)	O
{	O
claimfile	O
->	O
claimed	O
=	O
TRUE	int
;	O
claimfile	O
->	O
file	*(void)
=	O
*	O
file	*(void)
;	O
if	O
(	O
claimfile	O
->	O
n_syms_used	O
&&	O
!	O
tv_add_symbols	O
)	O
return	O
LDPS_ERR	O
;	O
else	O
if	O
(	O
claimfile	O
->	O
n_syms_used	O
)	O
return	O
(	O
*	O
tv_add_symbols	O
)	O
(	O
claimfile	O
->	O
file	*(void)
.	O
handle	O
,	O
claimfile	O
->	O
n_syms_used	O
,	O
claimfile	O
->	O
symbols	O
)	O
;	O
}	O
return	O
claim_file_ret	O
;	O
}	O
static	O
enum	O
ld_plugin_status	O
onall_symbols_read	O
(	O
void	O
)	O
{	O
static	O
const	O
char	O
*	O
resolutions	O
[	O
]	O
=	O
{	O
"LDPR_UNKNOWN"	*(char)
,	O
"LDPR_UNDEF"	*(char)
,	O
"LDPR_PREVAILING_DEF"	*(char)
,	O
"LDPR_PREVAILING_DEF_IRONLY"	*(char)
,	O
"LDPR_PREEMPTED_REG"	*(char)
,	O
"LDPR_PREEMPTED_IR"	*(char)
,	O
"LDPR_RESOLVED_IR"	*(char)
,	O
"LDPR_RESOLVED_EXEC"	*(char)
,	O
"LDPR_RESOLVED_DYN"	*(char)
,	O
"LDPR_PREVAILING_DEF_IRONLY_EXP"	*(char)
,	O
}	O
;	O
claim_file_t	O
*	O
claimfile	O
=	O
dumpresolutions	O
?	O
claimfiles_list	O
:	O
NULL	O
;	O
add_file_t	O
*	O
addfile	O
=	O
addfiles_list	O
;	O
TV_MESSAGE	O
(	O
LDPL_INFO	O
,	O
"hook called: all symbols read."	*(char)
)	O
;	O
for	O
(	O
;	O
claimfile	O
;	O
claimfile	O
=	O
claimfile	O
->	O
next	*(struct(*(struct(*(struct`),*(char),long)),*(char),long))
)	O
{	O
enum	O
ld_plugin_status	O
rv	O
;	O
int	O
n	O
;	O
if	O
(	O
claimfile	O
->	O
n_syms_used	O
&&	O
!	O
tv_get_symbols_v2	O
)	O
return	O
LDPS_ERR	O
;	O
else	O
if	O
(	O
!	O
claimfile	O
->	O
n_syms_used	O
)	O
continue	O
;	O
rv	O
=	O
tv_get_symbols_v2	O
(	O
claimfile	O
->	O
file	*(void)
.	O
handle	O
,	O
claimfile	O
->	O
n_syms_used	O
,	O
claimfile	O
->	O
symbols	O
)	O
;	O
if	O
(	O
rv	O
!=	O
LDPS_OK	O
)	O
return	O
rv	O
;	O
for	O
(	O
n	O
=	O
0	int
;	O
n	O
<	O
claimfile	O
->	O
n_syms_used	O
;	O
n	O
++	O
)	O
TV_MESSAGE	O
(	O
LDPL_INFO	O
,	O
"Sym: '%s%s%s' Resolution: %s"	*(char)
,	O
claimfile	O
->	O
symbols	O
[	O
n	O
]	O
.	O
name	*(char)
,	O
claimfile	O
->	O
symbols	O
[	O
n	O
]	O
.	O
version	O
?	O
"@"	*(char)
:	O
""	*(char)
,	O
(	O
claimfile	O
->	O
symbols	O
[	O
n	O
]	O
.	O
version	O
?	O
claimfile	O
->	O
symbols	O
[	O
n	O
]	O
.	O
version	O
:	O
""	*(char)
)	O
,	O
resolutions	O
[	O
claimfile	O
->	O
symbols	O
[	O
n	O
]	O
.	O
resolution	O
]	O
)	O
;	O
}	O
for	O
(	O
;	O
addfile	O
;	O
addfile	O
=	O
addfile	O
->	O
next	*(struct(*(struct(*(struct`),*(char),long)),*(char),long))
)	O
{	O
enum	O
ld_plugin_status	O
rv	O
;	O
if	O
(	O
addfile	O
->	O
type	enum(int,int,int,int)
==	O
ADD_LIB	O
&&	O
tv_add_input_library	O
)	O
rv	O
=	O
(	O
*	O
tv_add_input_library	O
)	O
(	O
addfile	O
->	O
name	*(char)
)	O
;	O
else	O
if	O
(	O
addfile	O
->	O
type	enum(int,int,int,int)
==	O
ADD_FILE	O
&&	O
tv_add_input_file	O
)	O
rv	O
=	O
(	O
*	O
tv_add_input_file	O
)	O
(	O
addfile	O
->	O
name	*(char)
)	O
;	O
else	O
if	O
(	O
addfile	O
->	O
type	enum(int,int,int,int)
==	O
ADD_DIR	O
&&	O
tv_set_extra_library_path	O
)	O
rv	O
=	O
(	O
*	O
tv_set_extra_library_path	O
)	O
(	O
addfile	O
->	O
name	*(char)
)	O
;	O
else	O
rv	O
=	O
LDPS_ERR	O
;	O
if	O
(	O
rv	O
!=	O
LDPS_OK	O
)	O
return	O
rv	O
;	O
}	O
fflush	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
NULL	O
)	O
;	O
return	O
all_symbols_read_ret	O
;	O
}	O
static	O
enum	O
ld_plugin_status	O
oncleanup	O
(	O
void	O
)	O
{	O
TV_MESSAGE	O
(	O
LDPL_INFO	O
,	O
"hook called: cleanup."	*(char)
)	O
;	O
fflush	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
NULL	O
)	O
;	O
return	O
cleanup_ret	O
;	O
}	O
