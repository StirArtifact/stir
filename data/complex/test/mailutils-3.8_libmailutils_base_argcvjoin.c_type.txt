int	O
mu_argcv_join	(int,*(*(char)),*(char),enum(int,int),*(*(char)))->(int)
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	*(*(char))
,	O
char	O
*	O
delim	*(char)
,	O
enum	O
mu_argcv_escape	enum(int,int)
esc	enum(int,int)
,	O
char	O
*	O
*	O
pstring	*(*(char))
)	O
{	O
size_t	long
i	long
,	O
j	long
,	O
len	long
;	O
char	O
*	O
buffer	*(char)
;	O
size_t	long
delimlen	long
=	O
strlen	(*(char))->(long)
(	O
delim	*(char)
)	O
;	O
int	O
quote_hex	int
=	O
0	int
;	O
if	O
(	O
pstring	*(*(char))
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
buffer	*(char)
=	O
malloc	(long)->(*(void))
(	O
1	int
)	O
;	O
if	O
(	O
buffer	*(char)
==	O
NULL	O
)	O
return	O
ENOMEM	int
;	O
*	O
buffer	*(char)
=	O
'\0'	O
;	O
for	O
(	O
len	long
=	O
i	long
=	O
j	long
=	O
0	int
;	O
i	long
<	O
argc	long
;	O
i	long
++	O
)	O
{	O
int	O
quote	*(int)
;	O
int	O
toklen	int
;	O
switch	O
(	O
esc	enum(int,int)
)	O
{	O
case	O
mu_argcv_escape_no	int
:	O
toklen	int
=	O
strlen	(*(char))->(long)
(	O
argv	*(*(char))
[	O
i	long
]	O
)	O
;	O
quote	*(int)
=	O
0	int
;	O
break	O
;	O
case	O
mu_argcv_escape_c	int
:	O
toklen	int
=	O
mu_wordsplit_c_quoted_length	(*(char),int,*(int))->(long)
(	O
argv	*(*(char))
[	O
i	long
]	O
,	O
quote_hex	int
,	O
&	O
quote	*(int)
)	O
;	O
break	O
;	O
default	O
:	O
return	O
EINVAL	int
;	O
}	O
len	long
+=	O
toklen	int
+	O
delimlen	long
;	O
if	O
(	O
quote	*(int)
)	O
len	long
+=	O
2	int
;	O
buffer	*(char)
=	O
realloc	(*(void),long)->(*(void))
(	O
buffer	*(char)
,	O
len	long
+	O
1	int
)	O
;	O
if	O
(	O
buffer	*(char)
==	O
NULL	O
)	O
return	O
ENOMEM	int
;	O
if	O
(	O
i	long
!=	O
0	int
)	O
{	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
buffer	*(char)
+	O
j	long
,	O
delim	*(char)
,	O
delimlen	long
)	O
;	O
j	long
+=	O
delimlen	long
;	O
}	O
if	O
(	O
quote	*(int)
)	O
buffer	*(char)
[	O
j	long
++	O
]	O
=	O
'"'	O
;	O
switch	O
(	O
esc	enum(int,int)
)	O
{	O
case	O
mu_argcv_escape_no	int
:	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
buffer	*(char)
+	O
j	long
,	O
argv	*(*(char))
[	O
i	long
]	O
,	O
toklen	int
)	O
;	O
break	O
;	O
case	O
mu_argcv_escape_c	int
:	O
mu_wordsplit_c_quote_copy	(*(char),*(char),int)->(void)
(	O
buffer	*(char)
+	O
j	long
,	O
argv	*(*(char))
[	O
i	long
]	O
,	O
quote_hex	int
)	O
;	O
break	O
;	O
}	O
j	long
+=	O
toklen	int
;	O
if	O
(	O
quote	*(int)
)	O
buffer	*(char)
[	O
j	long
++	O
]	O
=	O
'"'	O
;	O
}	O
buffer	*(char)
[	O
j	long
]	O
=	O
0	int
;	O
*	O
pstring	*(*(char))
=	O
buffer	*(char)
;	O
return	O
0	int
;	O
}	O
int	O
mu_argcv_string	(int,*(*(char)),*(*(char)))->(int)
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	*(*(char))
,	O
char	O
*	O
*	O
pstring	*(*(char))
)	O
{	O
return	O
mu_argcv_join	(int,*(*(char)),*(char),enum(int,int),*(*(char)))->(int)
(	O
argc	long
,	O
argv	*(*(char))
,	O
" "	*(char)
,	O
mu_argcv_escape_c	int
,	O
pstring	*(*(char))
)	O
;	O
}	O
