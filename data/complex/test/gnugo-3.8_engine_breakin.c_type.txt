struct	O
break_in_data	O
{	O
int	O
str	int
;	O
int	O
move	*(int)
;	O
}	O
;	O
static	O
struct	O
break_in_data	O
break_in_list	O
[	O
MAX_BREAK_INS	O
]	O
;	O
static	O
int	O
num_break_ins	O
;	O
static	O
void	O
enlarge_goal	O
(	O
signed	O
char	O
goal	*(char)
[	O
BOARDMAX	O
]	O
)	O
{	O
int	O
pos	int
;	O
for	O
(	O
pos	int
=	O
BOARDMIN	O
;	O
pos	int
<	O
BOARDMAX	O
;	O
pos	int
++	O
)	O
{	O
if	O
(	O
board	*(char)
[	O
pos	int
]	O
==	O
EMPTY	int
&&	O
!	O
goal	*(char)
[	O
pos	int
]	O
)	O
{	O
int	O
k	int
;	O
int	O
goal_neighbors	O
=	O
0	int
;	O
for	O
(	O
k	int
=	O
0	int
;	O
k	int
<	O
4	int
;	O
k	int
++	O
)	O
if	O
(	O
board	*(char)
[	O
pos	int
+	O
delta	array(int)
[	O
k	int
]	O
]	O
==	O
EMPTY	int
&&	O
goal	*(char)
[	O
pos	int
+	O
delta	array(int)
[	O
k	int
]	O
]	O
==	O
1	int
)	O
goal_neighbors	O
++	O
;	O
if	O
(	O
goal_neighbors	O
>=	O
2	int
)	O
goal	*(char)
[	O
pos	int
]	O
=	O
2	int
;	O
}	O
}	O
}	O
static	O
void	O
compute_smaller_goal	O
(	O
int	O
owner	array(int)
,	O
int	O
color_to_move	int
,	O
const	O
struct	O
connection_data	O
*	O
conn	*(struct)
,	O
const	O
signed	O
char	O
goal	*(char)
[	O
BOARDMAX	O
]	O
,	O
signed	O
char	O
smaller_goal	O
[	O
BOARDMAX	O
]	O
)	O
{	O
int	O
k	int
,	O
j	int
;	O
int	O
own_stones_visited	O
[	O
BOARDMAX	O
]	O
;	O
memset	O
(	O
smaller_goal	O
,	O
0	int
,	O
BOARDMAX	O
)	O
;	O
for	O
(	O
k	int
=	O
0	int
;	O
k	int
<	O
conn	*(struct)
->	O
queue_end	O
;	O
k	int
++	O
)	O
{	O
int	O
pos	int
=	O
conn	*(struct)
->	O
queue	O
[	O
k	int
]	O
;	O
int	O
goal_neighbors	O
=	O
0	int
;	O
if	O
(	O
owner	array(int)
==	O
color_to_move	int
)	O
{	O
int	O
coming_from	int
=	O
conn	*(struct)
->	O
coming_from	int
[	O
pos	int
]	O
;	O
if	O
(	O
coming_from	int
==	O
NO_MOVE	O
)	O
own_stones_visited	O
[	O
pos	int
]	O
=	O
0	int
;	O
else	O
{	O
own_stones_visited	O
[	O
pos	int
]	O
=	O
own_stones_visited	O
[	O
coming_from	int
]	O
;	O
if	O
(	O
!	O
goal	*(char)
[	O
pos	int
]	O
&&	O
board	*(char)
[	O
pos	int
]	O
==	O
OTHER_COLOR	O
(	O
owner	array(int)
)	O
)	O
{	O
int	O
i	int
;	O
int	O
stones	*(int)
[	O
MAX_BOARD	int
*	O
MAX_BOARD	int
]	O
;	O
int	O
num_stones	int
=	O
findstones	(int,int,*(int))->(int)
(	O
pos	int
,	O
MAX_BOARD	int
*	O
MAX_BOARD	int
,	O
stones	*(int)
)	O
;	O
int	O
smallest_distance	O
=	O
3	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
num_stones	int
;	O
i	int
++	O
)	O
{	O
int	O
distance	int
=	O
(	O
gg_abs	O
(	O
I	O
(	O
stones	*(int)
[	O
i	int
]	O
)	O
-	O
I	O
(	O
coming_from	int
)	O
)	O
+	O
gg_abs	O
(	O
J	O
(	O
stones	*(int)
[	O
i	int
]	O
)	O
-	O
J	O
(	O
coming_from	int
)	O
)	O
)	O
;	O
if	O
(	O
distance	int
<	O
smallest_distance	O
)	O
smallest_distance	O
=	O
distance	int
;	O
}	O
own_stones_visited	O
[	O
pos	int
]	O
+=	O
smallest_distance	O
;	O
}	O
if	O
(	O
own_stones_visited	O
[	O
pos	int
]	O
>	O
2	int
)	O
continue	O
;	O
}	O
}	O
if	O
(	O
!	O
goal	*(char)
[	O
pos	int
]	O
)	O
continue	O
;	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<	O
4	int
;	O
j	int
++	O
)	O
if	O
(	O
ON_BOARD	O
(	O
pos	int
+	O
delta	array(int)
[	O
j	int
]	O
)	O
&&	O
goal	*(char)
[	O
pos	int
+	O
delta	array(int)
[	O
j	int
]	O
]	O
&&	O
(	O
board	*(char)
[	O
pos	int
]	O
==	O
EMPTY	int
||	O
goal	*(char)
[	O
pos	int
]	O
==	O
OTHER_COLOR	O
(	O
owner	array(int)
)	O
)	O
)	O
goal_neighbors	O
++	O
;	O
if	O
(	O
goal_neighbors	O
>=	O
2	int
)	O
smaller_goal	O
[	O
pos	int
]	O
=	O
1	int
;	O
}	O
if	O
(	O
owner	array(int)
==	O
color_to_move	int
)	O
{	O
signed	O
char	O
marked	O
[	O
BOARDMAX	O
]	O
;	O
int	O
sizes	O
[	O
BOARDMAX	O
/	O
2	int
]	O
;	O
signed	O
char	O
mark	char
=	O
0	int
;	O
int	O
biggest_region	O
=	O
1	int
;	O
memset	O
(	O
marked	O
,	O
0	int
,	O
BOARDMAX	O
)	O
;	O
for	O
(	O
k	int
=	O
0	int
;	O
k	int
<	O
conn	*(struct)
->	O
queue_end	O
;	O
k	int
++	O
)	O
{	O
int	O
pos	int
=	O
conn	*(struct)
->	O
queue	O
[	O
k	int
]	O
;	O
if	O
(	O
ON_BOARD	O
(	O
pos	int
)	O
&&	O
smaller_goal	O
[	O
pos	int
]	O
&&	O
!	O
marked	O
[	O
pos	int
]	O
)	O
{	O
int	O
queue_start	O
=	O
0	int
;	O
int	O
queue_end	O
=	O
1	int
;	O
int	O
queue	O
[	O
BOARDMAX	O
]	O
;	O
mark	char
++	O
;	O
sizes	O
[	O
(	O
int	O
)	O
mark	char
]	O
=	O
1	int
;	O
marked	O
[	O
pos	int
]	O
=	O
mark	char
;	O
queue	O
[	O
0	int
]	O
=	O
pos	int
;	O
while	O
(	O
queue_start	O
<	O
queue_end	O
)	O
{	O
test_gray_border	()->(int)
(	O
)	O
;	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<	O
4	int
;	O
j	int
++	O
)	O
{	O
int	O
pos2	int
=	O
queue	O
[	O
queue_start	O
]	O
+	O
delta	array(int)
[	O
j	int
]	O
;	O
if	O
(	O
!	O
ON_BOARD	O
(	O
pos2	int
)	O
)	O
continue	O
;	O
ASSERT1	O
(	O
marked	O
[	O
pos2	int
]	O
==	O
0	int
||	O
marked	O
[	O
pos2	int
]	O
==	O
mark	char
,	O
pos2	int
)	O
;	O
if	O
(	O
smaller_goal	O
[	O
pos2	int
]	O
&&	O
!	O
marked	O
[	O
pos2	int
]	O
)	O
{	O
sizes	O
[	O
(	O
int	O
)	O
mark	char
]	O
++	O
;	O
marked	O
[	O
pos2	int
]	O
=	O
mark	char
;	O
queue	O
[	O
queue_end	O
++	O
]	O
=	O
pos2	int
;	O
}	O
}	O
queue_start	O
++	O
;	O
}	O
}	O
}	O
for	O
(	O
k	int
=	O
1	int
;	O
k	int
<=	O
mark	char
;	O
k	int
++	O
)	O
{	O
if	O
(	O
sizes	O
[	O
k	int
]	O
>	O
sizes	O
[	O
biggest_region	O
]	O
)	O
biggest_region	O
=	O
k	int
;	O
}	O
memset	O
(	O
smaller_goal	O
,	O
0	int
,	O
BOARDMAX	O
)	O
;	O
for	O
(	O
k	int
=	O
0	int
;	O
k	int
<	O
conn	*(struct)
->	O
queue_end	O
;	O
k	int
++	O
)	O
{	O
int	O
pos	int
=	O
conn	*(struct)
->	O
queue	O
[	O
k	int
]	O
;	O
if	O
(	O
marked	O
[	O
pos	int
]	O
==	O
biggest_region	O
)	O
smaller_goal	O
[	O
pos	int
]	O
=	O
1	int
;	O
}	O
}	O
}	O
static	O
int	O
break_in_goal_from_str	O
(	O
int	O
str	int
,	O
signed	O
char	O
goal	*(char)
[	O
BOARDMAX	O
]	O
,	O
int	O
*	O
num_non_territory	O
,	O
int	O
non_territory	array(int)
[	O
BOARDMAX	O
]	O
,	O
int	O
color_to_move	int
,	O
int	O
info_pos	O
)	O
{	O
int	O
move	*(int)
=	O
NO_MOVE	O
;	O
int	O
saved_move	O
=	O
NO_MOVE	O
;	O
signed	O
char	O
smaller_goal	O
[	O
BOARDMAX	O
]	O
;	O
struct	O
connection_data	O
conn	*(struct)
;	O
if	O
(	O
color_to_move	int
==	O
board	*(char)
[	O
str	int
]	O
)	O
compute_connection_distances	O
(	O
str	int
,	O
NO_MOVE	O
,	O
FP	O
(	O
3.01	int
)	O
,	O
&	O
conn	*(struct)
,	O
1	int
)	O
;	O
else	O
compute_connection_distances	O
(	O
str	int
,	O
NO_MOVE	O
,	O
FP	O
(	O
2.81	int
)	O
,	O
&	O
conn	*(struct)
,	O
1	int
)	O
;	O
sort_connection_queue_tail	O
(	O
&	O
conn	*(struct)
)	O
;	O
expand_connection_queue	O
(	O
&	O
conn	*(struct)
)	O
;	O
compute_smaller_goal	O
(	O
OTHER_COLOR	O
(	O
board	*(char)
[	O
str	int
]	O
)	O
,	O
color_to_move	int
,	O
&	O
conn	*(struct)
,	O
goal	*(char)
,	O
smaller_goal	O
)	O
;	O
if	O
(	O
0	int
&&	O
(	O
debug	int
&	O
DEBUG_BREAKIN	O
)	O
)	O
print_connection_distances	O
(	O
&	O
conn	*(struct)
)	O
;	O
DEBUG	O
(	O
DEBUG_BREAKIN	O
,	O
"Trying to break in from %1m to:\n"	*(char)
,	O
str	int
)	O
;	O
if	O
(	O
debug	int
&	O
DEBUG_BREAKIN	O
)	O
goaldump	(array(char))->(void)
(	O
smaller_goal	O
)	O
;	O
while	O
(	O
(	O
color_to_move	int
==	O
board	*(char)
[	O
str	int
]	O
&&	O
break_in	(int,array(char),*(int))->(int)
(	O
str	int
,	O
smaller_goal	O
,	O
&	O
move	*(int)
)	O
)	O
||	O
(	O
color_to_move	int
==	O
OTHER_COLOR	O
(	O
board	*(char)
[	O
str	int
]	O
)	O
&&	O
!	O
block_off	(int,array(char),*(int))->(int)
(	O
str	int
,	O
smaller_goal	O
,	O
NULL	O
)	O
)	O
)	O
{	O
int	O
k	int
;	O
int	O
save_num	O
=	O
*	O
num_non_territory	O
;	O
int	O
affected_size	O
=	O
0	int
;	O
int	O
cut_off_distance	O
=	O
FP	O
(	O
3.5	int
)	O
;	O
if	O
(	O
ON_BOARD	O
(	O
move	*(int)
)	O
&&	O
goal	*(char)
[	O
move	*(int)
]	O
)	O
{	O
non_territory	array(int)
[	O
(	O
*	O
num_non_territory	O
)	O
++	O
]	O
=	O
move	*(int)
;	O
if	O
(	O
info_pos	O
)	O
DEBUG	O
(	O
DEBUG_TERRITORY	O
|	O
DEBUG_BREAKIN	O
,	O
"%1m: Erasing territory at %1m -a.\n"	*(char)
,	O
info_pos	O
,	O
move	*(int)
)	O
;	O
else	O
DEBUG	O
(	O
DEBUG_TERRITORY	O
|	O
DEBUG_BREAKIN	O
,	O
"Erasing territory at %1m -a.\n"	*(char)
,	O
move	*(int)
)	O
;	O
}	O
for	O
(	O
k	int
=	O
0	int
;	O
k	int
<	O
conn	*(struct)
.	O
queue_end	O
;	O
k	int
++	O
)	O
{	O
int	O
pos	int
=	O
conn	*(struct)
.	O
queue	O
[	O
k	int
]	O
;	O
if	O
(	O
conn	*(struct)
.	O
distances	O
[	O
pos	int
]	O
>	O
cut_off_distance	O
+	O
FP	O
(	O
0.31	int
)	O
)	O
break	O
;	O
if	O
(	O
goal	*(char)
[	O
pos	int
]	O
&&	O
(	O
!	O
ON_BOARD	O
(	O
conn	*(struct)
.	O
coming_from	int
[	O
pos	int
]	O
)	O
||	O
!	O
goal	*(char)
[	O
conn	*(struct)
.	O
coming_from	int
[	O
pos	int
]	O
]	O
)	O
)	O
{	O
non_territory	array(int)
[	O
(	O
*	O
num_non_territory	O
)	O
++	O
]	O
=	O
pos	int
;	O
if	O
(	O
info_pos	O
)	O
DEBUG	O
(	O
DEBUG_TERRITORY	O
|	O
DEBUG_BREAKIN	O
,	O
"%1m: Erasing territory at %1m -b.\n"	*(char)
,	O
info_pos	O
,	O
pos	int
)	O
;	O
else	O
DEBUG	O
(	O
DEBUG_TERRITORY	O
|	O
DEBUG_BREAKIN	O
,	O
"Erasing territory at %1m -b.\n"	*(char)
,	O
pos	int
)	O
;	O
if	O
(	O
conn	*(struct)
.	O
distances	O
[	O
pos	int
]	O
<	O
cut_off_distance	O
)	O
cut_off_distance	O
=	O
conn	*(struct)
.	O
distances	O
[	O
pos	int
]	O
;	O
}	O
if	O
(	O
*	O
num_non_territory	O
>=	O
save_num	O
+	O
4	int
)	O
break	O
;	O
}	O
if	O
(	O
*	O
num_non_territory	O
==	O
save_num	O
)	O
break	O
;	O
for	O
(	O
k	int
=	O
save_num	O
;	O
k	int
<	O
*	O
num_non_territory	O
;	O
k	int
++	O
)	O
{	O
int	O
j	int
;	O
int	O
pos	int
=	O
non_territory	array(int)
[	O
k	int
]	O
;	O
if	O
(	O
goal	*(char)
[	O
pos	int
]	O
)	O
{	O
affected_size	O
++	O
;	O
goal	*(char)
[	O
pos	int
]	O
=	O
0	int
;	O
}	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<	O
4	int
;	O
j	int
++	O
)	O
if	O
(	O
ON_BOARD	O
(	O
pos	int
+	O
delta	array(int)
[	O
j	int
]	O
)	O
&&	O
goal	*(char)
[	O
pos	int
+	O
delta	array(int)
[	O
j	int
]	O
]	O
)	O
affected_size	O
++	O
;	O
if	O
(	O
affected_size	O
>=	O
5	int
)	O
{	O
*	O
num_non_territory	O
=	O
k	int
;	O
break	O
;	O
}	O
}	O
compute_smaller_goal	O
(	O
OTHER_COLOR	O
(	O
board	*(char)
[	O
str	int
]	O
)	O
,	O
color_to_move	int
,	O
&	O
conn	*(struct)
,	O
goal	*(char)
,	O
smaller_goal	O
)	O
;	O
DEBUG	O
(	O
DEBUG_BREAKIN	O
,	O
"Now trying to break to smaller goal:\n"	*(char)
,	O
str	int
)	O
;	O
if	O
(	O
debug	int
&	O
DEBUG_BREAKIN	O
)	O
goaldump	(array(char))->(void)
(	O
smaller_goal	O
)	O
;	O
if	O
(	O
saved_move	O
==	O
NO_MOVE	O
)	O
saved_move	O
=	O
move	*(int)
;	O
}	O
return	O
saved_move	O
;	O
}	O
static	O
void	O
break_in_goal	O
(	O
int	O
color_to_move	int
,	O
int	O
owner	array(int)
,	O
signed	O
char	O
goal	*(char)
[	O
BOARDMAX	O
]	O
,	O
struct	O
influence_data	O
*	O
q	*(struct)
,	O
int	O
store	int
,	O
int	O
info_pos	O
)	O
{	O
struct	O
connection_data	O
conn	*(struct)
;	O
int	O
k	int
;	O
int	O
intruder	O
=	O
OTHER_COLOR	O
(	O
owner	array(int)
)	O
;	O
signed	O
char	O
used	O
[	O
BOARDMAX	O
]	O
;	O
int	O
non_territory	array(int)
[	O
BOARDMAX	O
]	O
;	O
int	O
num_non_territory	O
=	O
0	int
;	O
int	O
candidate_strings	O
[	O
MAX_TRIES	O
]	O
;	O
int	O
candidates	O
=	O
0	int
;	O
int	O
min_distance	O
=	O
FP	O
(	O
5.0	int
)	O
;	O
DEBUG	O
(	O
DEBUG_BREAKIN	O
,	O
"Trying to break (%C to move) %C's territory "	*(char)
,	O
color_to_move	int
,	O
owner	array(int)
)	O
;	O
if	O
(	O
debug	int
&	O
DEBUG_BREAKIN	O
)	O
goaldump	(array(char))->(void)
(	O
goal	*(char)
)	O
;	O
init_connection_data	O
(	O
intruder	O
,	O
goal	*(char)
,	O
NO_MOVE	O
,	O
FP	O
(	O
3.01	int
)	O
,	O
&	O
conn	*(struct)
,	O
1	int
)	O
;	O
k	int
=	O
conn	*(struct)
.	O
queue_end	O
;	O
spread_connection_distances	O
(	O
intruder	O
,	O
&	O
conn	*(struct)
)	O
;	O
sort_connection_queue_tail	O
(	O
&	O
conn	*(struct)
)	O
;	O
if	O
(	O
0	int
&&	O
(	O
debug	int
&	O
DEBUG_BREAKIN	O
)	O
)	O
print_connection_distances	O
(	O
&	O
conn	*(struct)
)	O
;	O
memset	O
(	O
used	O
,	O
0	int
,	O
BOARDMAX	O
)	O
;	O
for	O
(	O
;	O
k	int
<	O
conn	*(struct)
.	O
queue_end	O
;	O
k	int
++	O
)	O
{	O
int	O
pos	int
=	O
conn	*(struct)
.	O
queue	O
[	O
k	int
]	O
;	O
if	O
(	O
conn	*(struct)
.	O
distances	O
[	O
pos	int
]	O
>	O
min_distance	O
+	O
FP	O
(	O
1.001	int
)	O
)	O
break	O
;	O
if	O
(	O
board	*(char)
[	O
pos	int
]	O
==	O
intruder	O
&&	O
influence_considered_lively	(*(struct),int)->(int)
(	O
q	*(struct)
,	O
pos	int
)	O
)	O
{	O
int	O
pos2	int
=	O
pos	int
;	O
while	O
(	O
ON_BOARD	O
(	O
pos2	int
)	O
)	O
{	O
pos2	int
=	O
conn	*(struct)
.	O
coming_from	int
[	O
pos2	int
]	O
;	O
if	O
(	O
IS_STONE	O
(	O
board	*(char)
[	O
pos2	int
]	O
)	O
)	O
pos2	int
=	O
find_origin	(int)->(int)
(	O
pos2	int
)	O
;	O
if	O
(	O
used	O
[	O
pos2	int
]	O
)	O
break	O
;	O
}	O
used	O
[	O
pos	int
]	O
=	O
1	int
;	O
if	O
(	O
ON_BOARD	O
(	O
pos2	int
)	O
)	O
continue	O
;	O
if	O
(	O
candidates	O
==	O
0	int
)	O
min_distance	O
=	O
conn	*(struct)
.	O
distances	O
[	O
pos	int
]	O
;	O
candidate_strings	O
[	O
candidates	O
++	O
]	O
=	O
pos	int
;	O
if	O
(	O
candidates	O
==	O
MAX_TRIES	O
)	O
break	O
;	O
}	O
}	O
memset	O
(	O
non_territory	array(int)
,	O
0	int
,	O
BOARDMAX	O
)	O
;	O
for	O
(	O
k	int
=	O
0	int
;	O
k	int
<	O
candidates	O
;	O
k	int
++	O
)	O
{	O
int	O
move	*(int)
=	O
break_in_goal_from_str	O
(	O
candidate_strings	O
[	O
k	int
]	O
,	O
goal	*(char)
,	O
&	O
num_non_territory	O
,	O
non_territory	array(int)
,	O
color_to_move	int
,	O
info_pos	O
)	O
;	O
if	O
(	O
store	int
&&	O
ON_BOARD	O
(	O
move	*(int)
)	O
&&	O
num_break_ins	O
<	O
MAX_BREAK_INS	O
)	O
{	O
break_in_list	O
[	O
num_break_ins	O
]	O
.	O
str	int
=	O
candidate_strings	O
[	O
k	int
]	O
;	O
break_in_list	O
[	O
num_break_ins	O
]	O
.	O
move	*(int)
=	O
move	*(int)
;	O
num_break_ins	O
++	O
;	O
}	O
}	O
for	O
(	O
k	int
=	O
0	int
;	O
k	int
<	O
num_non_territory	O
;	O
k	int
++	O
)	O
influence_erase_territory	(*(struct),int,int)->(void)
(	O
q	*(struct)
,	O
non_territory	array(int)
[	O
k	int
]	O
,	O
owner	array(int)
)	O
;	O
if	O
(	O
0	int
&&	O
num_non_territory	O
>	O
0	int
&&	O
(	O
debug	int
&	O
DEBUG_BREAKIN	O
)	O
)	O
showboard	(int)->(void)
(	O
0	int
)	O
;	O
}	O
void	O
break_territories	(int,*(struct),int,int)->(void)
(	O
int	O
color_to_move	int
,	O
struct	O
influence_data	O
*	O
q	*(struct)
,	O
int	O
store	int
,	O
int	O
info_pos	O
)	O
{	O
struct	O
moyo_data	struct(int,array(int),array(int),array(int),array(float))
territories	O
;	O
int	O
k	int
;	O
if	O
(	O
!	O
experimental_break_in	int
||	O
get_level	()->(int)
(	O
)	O
<	O
10	int
)	O
return	O
;	O
influence_get_territory_segmentation	(*(struct),*(struct(int,array(int),array(int),array(int),array(float))))->(void)
(	O
q	*(struct)
,	O
&	O
territories	O
)	O
;	O
for	O
(	O
k	int
=	O
1	int
;	O
k	int
<=	O
territories	O
.	O
number	int
;	O
k	int
++	O
)	O
{	O
signed	O
char	O
goal	*(char)
[	O
BOARDMAX	O
]	O
;	O
int	O
pos	int
;	O
int	O
size	int
=	O
0	int
;	O
memset	O
(	O
goal	*(char)
,	O
0	int
,	O
BOARDMAX	O
)	O
;	O
for	O
(	O
pos	int
=	O
BOARDMIN	O
;	O
pos	int
<	O
BOARDMAX	O
;	O
pos	int
++	O
)	O
if	O
(	O
ON_BOARD	O
(	O
pos	int
)	O
&&	O
territories	O
.	O
segmentation	array(int)
[	O
pos	int
]	O
==	O
k	int
)	O
{	O
goal	*(char)
[	O
pos	int
]	O
=	O
1	int
;	O
if	O
(	O
board	*(char)
[	O
pos	int
]	O
!=	O
territories	O
.	O
owner	array(int)
[	O
k	int
]	O
)	O
size	int
++	O
;	O
}	O
if	O
(	O
size	int
<	O
10	int
)	O
continue	O
;	O
if	O
(	O
color_to_move	int
==	O
OTHER_COLOR	O
(	O
territories	O
.	O
owner	array(int)
[	O
k	int
]	O
)	O
)	O
enlarge_goal	O
(	O
goal	*(char)
)	O
;	O
break_in_goal	O
(	O
color_to_move	int
,	O
territories	O
.	O
owner	array(int)
[	O
k	int
]	O
,	O
goal	*(char)
,	O
q	*(struct)
,	O
store	int
,	O
info_pos	O
)	O
;	O
}	O
}	O
void	O
clear_break_in_list	()->(void)
(	O
)	O
{	O
num_break_ins	O
=	O
0	int
;	O
}	O
void	O
break_in_move_reasons	(int)->(void)
(	O
int	O
color	int
)	O
{	O
int	O
k	int
;	O
for	O
(	O
k	int
=	O
0	int
;	O
k	int
<	O
num_break_ins	O
;	O
k	int
++	O
)	O
if	O
(	O
board	*(char)
[	O
break_in_list	O
[	O
k	int
]	O
.	O
str	int
]	O
==	O
color	int
)	O
add_expand_territory_move	(int)->(void)
(	O
break_in_list	O
[	O
k	int
]	O
.	O
move	*(int)
)	O
;	O
}	O
