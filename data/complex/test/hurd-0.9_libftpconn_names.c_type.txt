struct	O
get_names_state	struct(*(char),long,long,int,long,array(char))
{	O
char	O
*	O
name	*(char)
;	O
size_t	long
name_len	long
;	O
size_t	long
name_alloced	long
;	O
int	O
name_partial	int
;	O
size_t	long
buf_len	long
;	O
char	O
buf	array(char)
[	O
7000	int
]	O
;	O
}	O
;	O
error_t	int
ftp_conn_start_get_names	(*(struct(*(struct(*`,long,int,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),struct(*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,int,*`,*`)->(int)),*((*`,int,*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int))),int,int,*(char),long,long,long,*(char),long,*(char),*(char),*(void),int,*(struct(short,array(char))))),*(char),*(int),*(*(void)))->(int)
(	O
struct	O
ftp_conn	struct(*(struct),*(struct(*((*(struct`),*(char))->(void)),*((*(struct`),int,*(char))->(void)),*((*(struct`))->(void)),*((*(struct`),int,*(*`))->(int)),*((*(struct`))->(void)),*((*(struct`))->(int)),*((*(struct`))->(void)),*((*(struct`))->(int)))),struct(*((*(struct(*`,*`,struct`,int,int,*`,long,long,long,*`,long,*`,*`,*`,int,*`)),*(char),*(*(struct`)))->(int)),*((*(struct(*`,*`,struct`,int,int,*`,long,long,long,*`,long,*`,*`,*`,int,*`)),*(char),*(int))->(int)),*((*(struct(*`,*`,struct`,int,int,*`,long,long,long,*`,long,*`,*`,*`,int,*`)),*(char),int,*(int),*(*(void)))->(int)),*((*(struct(*`,*`,struct`,int,int,*`,long,long,long,*`,long,*`,*`,*`,int,*`)),int,*(void),*((*`,*`,*`,*`)->(int)),*(void))->(int)),*((*(struct(*`,*`,struct`,int,int,*`,long,long,long,*`,long,*`,*`,*`,int,*`)),*(char),*(char),*(*(char)))->(int)),*((*(struct(*`,*`,struct`,int,int,*`,long,long,long,*`,long,*`,*`,*`,int,*`)),*(*(char)))->(int))),int,int,*(char),long,long,long,*(char),long,*(char),*(char),*(void),int,*(struct(short,array(char))))
*	O
conn	*(struct)
,	O
const	O
char	O
*	O
name	*(char)
,	O
int	O
*	O
fd	*(int)
,	O
void	O
*	O
*	O
state	*(int)
)	O
{	O
error_t	int
err	int
;	O
struct	O
get_names_state	struct(*(char),long,long,int,long,array(char))
*	O
s	*(struct(*(char),long,long,int,long,array(char)))
=	O
malloc	(long)->(*(void))
(	O
sizeof	O
(	O
struct	O
get_names_state	struct(*(char),long,long,int,long,array(char))
)	O
)	O
;	O
if	O
(	O
!	O
s	*(struct(*(char),long,long,int,long,array(char)))
)	O
return	O
ENOMEM	int
;	O
err	int
=	O
ftp_conn_start_list	(*(struct(*(struct(*`,long,int,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),struct(*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,int,*`,*`)->(int)),*((*`,int,*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int))),int,int,*(char),long,long,long,*(char),long,*(char),*(char),*(void),int,*(struct(short,array(char))))),*(char),*(int))->(int)
(	O
conn	*(struct)
,	O
name	*(char)
,	O
fd	*(int)
)	O
;	O
if	O
(	O
err	int
)	O
free	(*(void))->(void)
(	O
s	*(struct(*(char),long,long,int,long,array(char)))
)	O
;	O
else	O
{	O
s	*(struct(*(char),long,long,int,long,array(char)))
->	O
name	*(char)
=	O
0	int
;	O
s	*(struct(*(char),long,long,int,long,array(char)))
->	O
name_len	long
=	O
s	*(struct(*(char),long,long,int,long,array(char)))
->	O
name_alloced	long
=	O
0	int
;	O
s	*(struct(*(char),long,long,int,long,array(char)))
->	O
name_partial	int
=	O
0	int
;	O
s	*(struct(*(char),long,long,int,long,array(char)))
->	O
buf_len	long
=	O
0	int
;	O
*	O
state	*(int)
=	O
s	*(struct(*(char),long,long,int,long,array(char)))
;	O
}	O
return	O
err	int
;	O
}	O
error_t	int
ftp_conn_cont_get_names	(*(struct(*(struct(*`,long,int,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),struct(*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,int,*`,*`)->(int)),*((*`,int,*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int))),int,int,*(char),long,long,long,*(char),long,*(char),*(char),*(void),int,*(struct(short,array(char))))),int,*(void),*((*(char),*(void))->(int)),*(void))->(int)
(	O
struct	O
ftp_conn	struct(*(struct),*(struct(*((*(struct`),*(char))->(void)),*((*(struct`),int,*(char))->(void)),*((*(struct`))->(void)),*((*(struct`),int,*(*`))->(int)),*((*(struct`))->(void)),*((*(struct`))->(int)),*((*(struct`))->(void)),*((*(struct`))->(int)))),struct(*((*(struct(*`,*`,struct`,int,int,*`,long,long,long,*`,long,*`,*`,*`,int,*`)),*(char),*(*(struct`)))->(int)),*((*(struct(*`,*`,struct`,int,int,*`,long,long,long,*`,long,*`,*`,*`,int,*`)),*(char),*(int))->(int)),*((*(struct(*`,*`,struct`,int,int,*`,long,long,long,*`,long,*`,*`,*`,int,*`)),*(char),int,*(int),*(*(void)))->(int)),*((*(struct(*`,*`,struct`,int,int,*`,long,long,long,*`,long,*`,*`,*`,int,*`)),int,*(void),*((*`,*`,*`,*`)->(int)),*(void))->(int)),*((*(struct(*`,*`,struct`,int,int,*`,long,long,long,*`,long,*`,*`,*`,int,*`)),*(char),*(char),*(*(char)))->(int)),*((*(struct(*`,*`,struct`,int,int,*`,long,long,long,*`,long,*`,*`,*`,int,*`)),*(*(char)))->(int))),int,int,*(char),long,long,long,*(char),long,*(char),*(char),*(void),int,*(struct(short,array(char))))
*	O
conn	*(struct)
,	O
int	O
fd	*(int)
,	O
void	O
*	O
state	*(int)
,	O
ftp_conn_add_name_fun_t	*((*(char),*(void))->(int))
add_name	*((*(char),*(void))->(int))
,	O
void	O
*	O
hook	*(void)
)	O
{	O
char	O
*	O
p	*(char)
,	O
*	O
nl	*(char)
;	O
ssize_t	long
rd	long
;	O
size_t	long
name_len	long
;	O
error_t	int
err	int
=	O
0	int
;	O
struct	O
get_names_state	struct(*(char),long,long,int,long,array(char))
*	O
s	*(struct(*(char),long,long,int,long,array(char)))
=	O
state	*(int)
;	O
int	O
(	O
*	O
icheck	*((*(struct(*(struct`),*(struct`),struct(*`,*`,*`,*`,*`,*`),int,int,*(char),long,long,long,*(char),long,*(char),*(char),*(void),int,*(struct`))))->(int))
)	O
(	O
struct	O
ftp_conn	struct(*(struct),*(struct(*((*(struct`),*(char))->(void)),*((*(struct`),int,*(char))->(void)),*((*(struct`))->(void)),*((*(struct`),int,*(*`))->(int)),*((*(struct`))->(void)),*((*(struct`))->(int)),*((*(struct`))->(void)),*((*(struct`))->(int)))),struct(*((*(struct(*`,*`,struct`,int,int,*`,long,long,long,*`,long,*`,*`,*`,int,*`)),*(char),*(*(struct`)))->(int)),*((*(struct(*`,*`,struct`,int,int,*`,long,long,long,*`,long,*`,*`,*`,int,*`)),*(char),*(int))->(int)),*((*(struct(*`,*`,struct`,int,int,*`,long,long,long,*`,long,*`,*`,*`,int,*`)),*(char),int,*(int),*(*(void)))->(int)),*((*(struct(*`,*`,struct`,int,int,*`,long,long,long,*`,long,*`,*`,*`,int,*`)),int,*(void),*((*`,*`,*`,*`)->(int)),*(void))->(int)),*((*(struct(*`,*`,struct`,int,int,*`,long,long,long,*`,long,*`,*`,*`,int,*`)),*(char),*(char),*(*(char)))->(int)),*((*(struct(*`,*`,struct`,int,int,*`,long,long,long,*`,long,*`,*`,*`,int,*`)),*(*(char)))->(int))),int,int,*(char),long,long,long,*(char),long,*(char),*(char),*(void),int,*(struct(short,array(char))))
*	O
conn	*(struct)
)	O
=	O
conn	*(struct)
->	O
hooks	*(struct(*((*(struct`),*(char))->(void)),*((*(struct`),int,*(char))->(void)),*((*(struct`))->(void)),*((*(struct`),int,*(*`))->(int)),*((*(struct`))->(void)),*((*(struct`))->(int)),*((*(struct`))->(void)),*((*(struct`))->(int))))
->	O
interrupt_check	*((*(struct))->(int))
;	O
rd	long
=	O
read	(int,*(void),long)->(long)
(	O
fd	*(int)
,	O
s	*(struct(*(char),long,long,int,long,array(char)))
->	O
buf	array(char)
+	O
s	*(struct(*(char),long,long,int,long,array(char)))
->	O
buf_len	long
,	O
sizeof	O
(	O
s	*(struct(*(char),long,long,int,long,array(char)))
->	O
buf	array(char)
)	O
-	O
s	*(struct(*(char),long,long,int,long,array(char)))
->	O
buf_len	long
)	O
;	O
if	O
(	O
rd	long
<	O
0	int
)	O
{	O
err	int
=	O
errno	O
;	O
goto	O
finished	O
;	O
}	O
if	O
(	O
icheck	*((*(struct(*(struct`),*(struct`),struct(*`,*`,*`,*`,*`,*`),int,int,*(char),long,long,long,*(char),long,*(char),*(char),*(void),int,*(struct`))))->(int))
&&	O
(	O
*	O
icheck	*((*(struct(*(struct`),*(struct`),struct(*`,*`,*`,*`,*`,*`),int,int,*(char),long,long,long,*(char),long,*(char),*(char),*(void),int,*(struct`))))->(int))
)	O
(	O
conn	*(struct)
)	O
)	O
{	O
err	int
=	O
EINTR	int
;	O
goto	O
finished	O
;	O
}	O
if	O
(	O
rd	long
==	O
0	int
)	O
if	O
(	O
s	*(struct(*(char),long,long,int,long,array(char)))
->	O
buf_len	long
==	O
0	int
)	O
goto	O
finished	O
;	O
else	O
nl	*(char)
=	O
s	*(struct(*(char),long,long,int,long,array(char)))
->	O
buf	array(char)
+	O
s	*(struct(*(char),long,long,int,long,array(char)))
->	O
buf_len	long
;	O
else	O
{	O
nl	*(char)
=	O
memchr	(*(void),int,long)->(*(void))
(	O
s	*(struct(*(char),long,long,int,long,array(char)))
->	O
buf	array(char)
+	O
s	*(struct(*(char),long,long,int,long,array(char)))
->	O
buf_len	long
,	O
'\n'	O
,	O
rd	long
)	O
;	O
s	*(struct(*(char),long,long,int,long,array(char)))
->	O
buf_len	long
+=	O
rd	long
;	O
}	O
if	O
(	O
!	O
nl	*(char)
&&	O
s	*(struct(*(char),long,long,int,long,array(char)))
->	O
buf_len	long
<	O
sizeof	O
(	O
s	*(struct(*(char),long,long,int,long,array(char)))
->	O
buf	array(char)
)	O
)	O
return	O
EAGAIN	int
;	O
p	*(char)
=	O
s	*(struct(*(char),long,long,int,long,array(char)))
->	O
buf	array(char)
;	O
do	O
{	O
name_len	long
=	O
(	O
nl	*(char)
?	O
nl	*(char)
-	O
p	*(char)
:	O
s	*(struct(*(char),long,long,int,long,array(char)))
->	O
buf	array(char)
+	O
s	*(struct(*(char),long,long,int,long,array(char)))
->	O
buf_len	long
-	O
p	*(char)
)	O
;	O
if	O
(	O
name_len	long
>	O
0	int
&&	O
p	*(char)
[	O
name_len	long
-	O
1	int
]	O
==	O
'\r'	O
)	O
name_len	long
--	O
;	O
if	O
(	O
name_len	long
>	O
0	int
)	O
{	O
size_t	long
old_len	long
=	O
s	*(struct(*(char),long,long,int,long,array(char)))
->	O
name_len	long
;	O
size_t	long
total_len	long
=	O
old_len	long
+	O
name_len	long
+	O
1	int
;	O
if	O
(	O
total_len	long
>	O
s	*(struct(*(char),long,long,int,long,array(char)))
->	O
name_alloced	long
)	O
{	O
char	O
*	O
new_name	*(char)
=	O
realloc	(*(void),long)->(*(void))
(	O
s	*(struct(*(char),long,long,int,long,array(char)))
->	O
name	*(char)
,	O
total_len	long
)	O
;	O
if	O
(	O
!	O
new_name	*(char)
)	O
goto	O
enomem	O
;	O
s	*(struct(*(char),long,long,int,long,array(char)))
->	O
name	*(char)
=	O
new_name	*(char)
;	O
s	*(struct(*(char),long,long,int,long,array(char)))
->	O
name_alloced	long
=	O
total_len	long
;	O
}	O
strncpy	(*(char),*(char),long)->(*(char))
(	O
s	*(struct(*(char),long,long,int,long,array(char)))
->	O
name	*(char)
+	O
old_len	long
,	O
p	*(char)
,	O
name_len	long
)	O
;	O
s	*(struct(*(char),long,long,int,long,array(char)))
->	O
name	*(char)
[	O
old_len	long
+	O
name_len	long
]	O
=	O
'\0'	O
;	O
s	*(struct(*(char),long,long,int,long,array(char)))
->	O
name_len	long
=	O
total_len	long
-	O
1	int
;	O
}	O
if	O
(	O
nl	*(char)
)	O
{	O
char	O
*	O
name	*(char)
=	O
s	*(struct(*(char),long,long,int,long,array(char)))
->	O
name	*(char)
;	O
if	O
(	O
conn	*(struct)
->	O
syshooks	struct(*((*(struct(*`,*`,struct`,int,int,*`,long,long,long,*`,long,*`,*`,*`,int,*`)),*(char),*(*(struct`)))->(int)),*((*(struct(*`,*`,struct`,int,int,*`,long,long,long,*`,long,*`,*`,*`,int,*`)),*(char),*(int))->(int)),*((*(struct(*`,*`,struct`,int,int,*`,long,long,long,*`,long,*`,*`,*`,int,*`)),*(char),int,*(int),*(*(void)))->(int)),*((*(struct(*`,*`,struct`,int,int,*`,long,long,long,*`,long,*`,*`,*`,int,*`)),int,*(void),*((*`,*`,*`,*`)->(int)),*(void))->(int)),*((*(struct(*`,*`,struct`,int,int,*`,long,long,long,*`,long,*`,*`,*`,int,*`)),*(char),*(char),*(*(char)))->(int)),*((*(struct(*`,*`,struct`,int,int,*`,long,long,long,*`,long,*`,*`,*`,int,*`)),*(*(char)))->(int)))
.	O
basename	(*(char))->(*(char))
)	O
{	O
err	int
=	O
(	O
*	O
conn	*(struct)
->	O
syshooks	struct(*((*(struct(*`,*`,struct`,int,int,*`,long,long,long,*`,long,*`,*`,*`,int,*`)),*(char),*(*(struct`)))->(int)),*((*(struct(*`,*`,struct`,int,int,*`,long,long,long,*`,long,*`,*`,*`,int,*`)),*(char),*(int))->(int)),*((*(struct(*`,*`,struct`,int,int,*`,long,long,long,*`,long,*`,*`,*`,int,*`)),*(char),int,*(int),*(*(void)))->(int)),*((*(struct(*`,*`,struct`,int,int,*`,long,long,long,*`,long,*`,*`,*`,int,*`)),int,*(void),*((*`,*`,*`,*`)->(int)),*(void))->(int)),*((*(struct(*`,*`,struct`,int,int,*`,long,long,long,*`,long,*`,*`,*`,int,*`)),*(char),*(char),*(*(char)))->(int)),*((*(struct(*`,*`,struct`,int,int,*`,long,long,long,*`,long,*`,*`,*`,int,*`)),*(*(char)))->(int)))
.	O
basename	(*(char))->(*(char))
)	O
(	O
conn	*(struct)
,	O
&	O
name	*(char)
)	O
;	O
if	O
(	O
err	int
)	O
goto	O
finished	O
;	O
}	O
err	int
=	O
(	O
*	O
add_name	*((*(char),*(void))->(int))
)	O
(	O
name	*(char)
,	O
hook	*(void)
)	O
;	O
if	O
(	O
name	*(char)
<	O
s	*(struct(*(char),long,long,int,long,array(char)))
->	O
name	*(char)
||	O
name	*(char)
>	O
s	*(struct(*(char),long,long,int,long,array(char)))
->	O
name	*(char)
+	O
s	*(struct(*(char),long,long,int,long,array(char)))
->	O
name_len	long
)	O
free	(*(void))->(void)
(	O
name	*(char)
)	O
;	O
if	O
(	O
err	int
)	O
goto	O
finished	O
;	O
s	*(struct(*(char),long,long,int,long,array(char)))
->	O
name_len	long
=	O
0	int
;	O
s	*(struct(*(char),long,long,int,long,array(char)))
->	O
name_partial	int
=	O
0	int
;	O
p	*(char)
=	O
nl	*(char)
+	O
1	int
;	O
nl	*(char)
=	O
memchr	(*(void),int,long)->(*(void))
(	O
p	*(char)
,	O
'\n'	O
,	O
s	*(struct(*(char),long,long,int,long,array(char)))
->	O
buf	array(char)
+	O
s	*(struct(*(char),long,long,int,long,array(char)))
->	O
buf_len	long
-	O
p	*(char)
)	O
;	O
}	O
else	O
{	O
s	*(struct(*(char),long,long,int,long,array(char)))
->	O
name_partial	int
=	O
1	int
;	O
p	*(char)
+=	O
name_len	long
;	O
}	O
}	O
while	O
(	O
nl	*(char)
)	O
;	O
s	*(struct(*(char),long,long,int,long,array(char)))
->	O
buf_len	long
-=	O
(	O
p	*(char)
-	O
s	*(struct(*(char),long,long,int,long,array(char)))
->	O
buf	array(char)
)	O
;	O
if	O
(	O
s	*(struct(*(char),long,long,int,long,array(char)))
->	O
buf_len	long
>	O
0	int
)	O
memmove	(*(void),*(void),long)->(*(void))
(	O
s	*(struct(*(char),long,long,int,long,array(char)))
->	O
buf	array(char)
,	O
p	*(char)
,	O
s	*(struct(*(char),long,long,int,long,array(char)))
->	O
buf_len	long
)	O
;	O
return	O
EAGAIN	int
;	O
enomem	O
:	O
err	int
=	O
ENOMEM	int
;	O
finished	O
:	O
if	O
(	O
s	*(struct(*(char),long,long,int,long,array(char)))
->	O
name	*(char)
)	O
free	(*(void))->(void)
(	O
s	*(struct(*(char),long,long,int,long,array(char)))
->	O
name	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
s	*(struct(*(char),long,long,int,long,array(char)))
)	O
;	O
close	(int)->(int)
(	O
fd	*(int)
)	O
;	O
if	O
(	O
err	int
&&	O
rd	long
>	O
0	int
)	O
ftp_conn_abort	(*(struct(*(struct(*`,long,int,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),struct(*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,int,*`,*`)->(int)),*((*`,int,*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int))),int,int,*(char),long,long,long,*(char),long,*(char),*(char),*(void),int,*(struct(short,array(char))))))->(void)
(	O
conn	*(struct)
)	O
;	O
else	O
if	O
(	O
err	int
)	O
ftp_conn_finish_transfer	(*(struct(*(struct(*`,long,int,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),struct(*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,int,*`,*`)->(int)),*((*`,int,*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int))),int,int,*(char),long,long,long,*(char),long,*(char),*(char),*(void),int,*(struct(short,array(char))))))->(int)
(	O
conn	*(struct)
)	O
;	O
else	O
err	int
=	O
ftp_conn_finish_transfer	(*(struct(*(struct(*`,long,int,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),struct(*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,int,*`,*`)->(int)),*((*`,int,*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int))),int,int,*(char),long,long,long,*(char),long,*(char),*(char),*(void),int,*(struct(short,array(char))))))->(int)
(	O
conn	*(struct)
)	O
;	O
return	O
err	int
;	O
}	O
error_t	int
ftp_conn_get_names	(*(struct(*(struct(*`,long,int,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),struct(*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,int,*`,*`)->(int)),*((*`,int,*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int))),int,int,*(char),long,long,long,*(char),long,*(char),*(char),*(void),int,*(struct(short,array(char))))),*(char),*((*(char),*(void))->(int)),*(void))->(int)
(	O
struct	O
ftp_conn	struct(*(struct),*(struct(*((*(struct`),*(char))->(void)),*((*(struct`),int,*(char))->(void)),*((*(struct`))->(void)),*((*(struct`),int,*(*`))->(int)),*((*(struct`))->(void)),*((*(struct`))->(int)),*((*(struct`))->(void)),*((*(struct`))->(int)))),struct(*((*(struct(*`,*`,struct`,int,int,*`,long,long,long,*`,long,*`,*`,*`,int,*`)),*(char),*(*(struct`)))->(int)),*((*(struct(*`,*`,struct`,int,int,*`,long,long,long,*`,long,*`,*`,*`,int,*`)),*(char),*(int))->(int)),*((*(struct(*`,*`,struct`,int,int,*`,long,long,long,*`,long,*`,*`,*`,int,*`)),*(char),int,*(int),*(*(void)))->(int)),*((*(struct(*`,*`,struct`,int,int,*`,long,long,long,*`,long,*`,*`,*`,int,*`)),int,*(void),*((*`,*`,*`,*`)->(int)),*(void))->(int)),*((*(struct(*`,*`,struct`,int,int,*`,long,long,long,*`,long,*`,*`,*`,int,*`)),*(char),*(char),*(*(char)))->(int)),*((*(struct(*`,*`,struct`,int,int,*`,long,long,long,*`,long,*`,*`,*`,int,*`)),*(*(char)))->(int))),int,int,*(char),long,long,long,*(char),long,*(char),*(char),*(void),int,*(struct(short,array(char))))
*	O
conn	*(struct)
,	O
const	O
char	O
*	O
name	*(char)
,	O
ftp_conn_add_name_fun_t	*((*(char),*(void))->(int))
add_name	*((*(char),*(void))->(int))
,	O
void	O
*	O
hook	*(void)
)	O
{	O
int	O
fd	*(int)
;	O
void	O
*	O
state	*(int)
;	O
error_t	int
err	int
=	O
ftp_conn_start_get_names	(*(struct(*(struct(*`,long,int,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),struct(*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,int,*`,*`)->(int)),*((*`,int,*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int))),int,int,*(char),long,long,long,*(char),long,*(char),*(char),*(void),int,*(struct(short,array(char))))),*(char),*(int),*(*(void)))->(int)
(	O
conn	*(struct)
,	O
name	*(char)
,	O
&	O
fd	*(int)
,	O
&	O
state	*(int)
)	O
;	O
if	O
(	O
err	int
)	O
return	O
err	int
;	O
do	O
err	int
=	O
ftp_conn_cont_get_names	(*(struct(*(struct(*`,long,int,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),struct(*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,int,*`,*`)->(int)),*((*`,int,*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int))),int,int,*(char),long,long,long,*(char),long,*(char),*(char),*(void),int,*(struct(short,array(char))))),int,*(void),*((*(char),*(void))->(int)),*(void))->(int)
(	O
conn	*(struct)
,	O
fd	*(int)
,	O
state	*(int)
,	O
add_name	*((*(char),*(void))->(int))
,	O
hook	*(void)
)	O
;	O
while	O
(	O
err	int
==	O
EAGAIN	int
)	O
;	O
return	O
err	int
;	O
}	O
