error_t	O
trivfs_S_io_map	(*(struct),int,int,*(int),*(int),*(int),*(int))->(int)
(	O
struct	O
trivfs_protid	O
*	O
cred	*(struct)
,	O
mach_port_t	O
reply	int
,	O
mach_msg_type_name_t	O
reply_type	int
,	O
memory_object_t	O
*	O
rd_obj	*(int)
,	O
mach_msg_type_name_t	O
*	O
rd_type	*(int)
,	O
memory_object_t	O
*	O
wr_obj	*(int)
,	O
mach_msg_type_name_t	O
*	O
wr_type	*(int)
)	O
{	O
if	O
(	O
!	O
cred	*(struct)
)	O
return	O
EOPNOTSUPP	O
;	O
else	O
if	O
(	O
!	O
(	O
cred	*(struct)
->	O
po	O
->	O
openmodes	O
&	O
(	O
O_READ	O
|	O
O_WRITE	O
)	O
)	O
)	O
return	O
EBADF	O
;	O
else	O
{	O
mach_port_t	O
memobj	O
;	O
int	O
flags	int
=	O
cred	*(struct)
->	O
po	O
->	O
openmodes	O
;	O
vm_prot_t	O
prot	O
=	O
(	O
(	O
flags	int
&	O
O_READ	O
)	O
?	O
VM_PROT_READ	O
:	O
0	int
)	O
|	O
(	O
(	O
flags	int
&	O
O_WRITE	O
)	O
?	O
VM_PROT_WRITE	O
:	O
0	int
)	O
;	O
struct	O
open	*(struct)
*	O
open	*(struct)
=	O
(	O
struct	O
open	*(struct)
*	O
)	O
cred	*(struct)
->	O
po	O
->	O
hook	O
;	O
error_t	O
err	O
=	O
dev_get_memory_object	O
(	O
open	*(struct)
->	O
dev	*(struct)
,	O
prot	O
,	O
&	O
memobj	O
)	O
;	O
if	O
(	O
!	O
err	O
)	O
{	O
if	O
(	O
flags	int
&	O
O_READ	O
)	O
*	O
rd_obj	*(int)
=	O
memobj	O
;	O
else	O
*	O
rd_obj	*(int)
=	O
MACH_PORT_NULL	O
;	O
if	O
(	O
flags	int
&	O
O_WRITE	O
)	O
*	O
wr_obj	*(int)
=	O
memobj	O
;	O
else	O
*	O
wr_obj	*(int)
=	O
MACH_PORT_NULL	O
;	O
if	O
(	O
(	O
flags	int
&	O
(	O
O_READ	O
|	O
O_WRITE	O
)	O
)	O
==	O
(	O
O_READ	O
|	O
O_WRITE	O
)	O
&&	O
memobj	O
!=	O
MACH_PORT_NULL	O
)	O
mach_port_mod_refs	()->(int)
(	O
mach_task_self	()->(int)
(	O
)	O
,	O
memobj	O
,	O
MACH_PORT_RIGHT_SEND	O
,	O
1	int
)	O
;	O
}	O
*	O
rd_type	*(int)
=	O
*	O
wr_type	*(int)
=	O
MACH_MSG_TYPE_MOVE_SEND	O
;	O
return	O
err	O
;	O
}	O
}	O
error_t	O
trivfs_S_io_read	(*(struct),int,int,*(*(char)),*(int),int,int)->(int)
(	O
struct	O
trivfs_protid	O
*	O
cred	*(struct)
,	O
mach_port_t	O
reply	int
,	O
mach_msg_type_name_t	O
reply_type	int
,	O
char	O
*	O
*	O
data	*(*(char))
,	O
mach_msg_type_number_t	O
*	O
data_len	*(int)
,	O
loff_t	O
offs	int
,	O
mach_msg_type_number_t	O
amount	int
)	O
{	O
if	O
(	O
!	O
cred	*(struct)
)	O
return	O
EOPNOTSUPP	O
;	O
else	O
if	O
(	O
!	O
(	O
cred	*(struct)
->	O
po	O
->	O
openmodes	O
&	O
O_READ	O
)	O
)	O
return	O
EBADF	O
;	O
else	O
return	O
open_read	()->(int)
(	O
(	O
struct	O
open	*(struct)
*	O
)	O
cred	*(struct)
->	O
po	O
->	O
hook	O
,	O
offs	int
,	O
amount	int
,	O
(	O
void	O
*	O
*	O
)	O
data	*(*(char))
,	O
data_len	*(int)
)	O
;	O
}	O
error_t	O
trivfs_S_io_readable	(*(struct),int,int,*(int))->(int)
(	O
struct	O
trivfs_protid	O
*	O
cred	*(struct)
,	O
mach_port_t	O
reply	int
,	O
mach_msg_type_name_t	O
reply_type	int
,	O
mach_msg_type_number_t	O
*	O
amount	int
)	O
{	O
if	O
(	O
!	O
cred	*(struct)
)	O
return	O
EOPNOTSUPP	O
;	O
else	O
if	O
(	O
!	O
(	O
cred	*(struct)
->	O
po	O
->	O
openmodes	O
&	O
O_READ	O
)	O
)	O
return	O
EBADF	O
;	O
else	O
{	O
struct	O
open	*(struct)
*	O
open	*(struct)
=	O
(	O
struct	O
open	*(struct)
*	O
)	O
cred	*(struct)
->	O
po	O
->	O
hook	O
;	O
*	O
amount	int
=	O
open	*(struct)
->	O
dev	*(struct)
->	O
store	*(struct)
->	O
size	long
-	O
open	*(struct)
->	O
offs	int
;	O
return	O
0	int
;	O
}	O
}	O
error_t	O
trivfs_S_io_write	(*(struct),int,int,*(char),int,int,*(int))->(int)
(	O
struct	O
trivfs_protid	O
*	O
cred	*(struct)
,	O
mach_port_t	O
reply	int
,	O
mach_msg_type_name_t	O
reply_type	int
,	O
char	O
*	O
data	*(*(char))
,	O
mach_msg_type_number_t	O
data_len	*(int)
,	O
loff_t	O
offs	int
,	O
mach_msg_type_number_t	O
*	O
amount	int
)	O
{	O
if	O
(	O
!	O
cred	*(struct)
)	O
return	O
EOPNOTSUPP	O
;	O
else	O
if	O
(	O
!	O
(	O
cred	*(struct)
->	O
po	O
->	O
openmodes	O
&	O
O_WRITE	O
)	O
)	O
return	O
EBADF	O
;	O
else	O
return	O
open_write	()->(int)
(	O
(	O
struct	O
open	*(struct)
*	O
)	O
cred	*(struct)
->	O
po	O
->	O
hook	O
,	O
offs	int
,	O
(	O
void	O
*	O
)	O
data	*(*(char))
,	O
data_len	*(int)
,	O
amount	int
)	O
;	O
}	O
error_t	O
trivfs_S_io_seek	(*(struct),int,int,long,int,*(long))->(int)
(	O
struct	O
trivfs_protid	O
*	O
cred	*(struct)
,	O
mach_port_t	O
reply	int
,	O
mach_msg_type_name_t	O
reply_type	int
,	O
off_t	long
offs	int
,	O
int	O
whence	int
,	O
off_t	long
*	O
new_offs	*(long)
)	O
{	O
if	O
(	O
!	O
cred	*(struct)
)	O
return	O
EOPNOTSUPP	O
;	O
else	O
return	O
open_seek	()->(int)
(	O
(	O
struct	O
open	*(struct)
*	O
)	O
cred	*(struct)
->	O
po	O
->	O
hook	O
,	O
offs	int
,	O
whence	int
,	O
new_offs	*(long)
)	O
;	O
}	O
error_t	O
trivfs_S_io_select	(*(struct),int,int,*(int))->(int)
(	O
struct	O
trivfs_protid	O
*	O
cred	*(struct)
,	O
mach_port_t	O
reply	int
,	O
mach_msg_type_name_t	O
reply_type	int
,	O
int	O
*	O
type	*(int)
)	O
{	O
if	O
(	O
!	O
cred	*(struct)
)	O
return	O
EOPNOTSUPP	O
;	O
*	O
type	*(int)
&=	O
~	O
SELECT_URG	O
;	O
return	O
0	int
;	O
}	O
error_t	O
trivfs_S_io_select_timeout	(*(struct),int,int,struct,*(int))->(int)
(	O
struct	O
trivfs_protid	O
*	O
cred	*(struct)
,	O
mach_port_t	O
reply	int
,	O
mach_msg_type_name_t	O
reply_type	int
,	O
struct	O
timespec	O
ts	struct
,	O
int	O
*	O
type	*(int)
)	O
{	O
return	O
trivfs_S_io_select	(*(struct),int,int,*(int))->(int)
(	O
cred	*(struct)
,	O
reply	int
,	O
reply_type	int
,	O
type	*(int)
)	O
;	O
}	O
error_t	O
trivfs_S_file_set_size	(*(struct),int,int,long)->(int)
(	O
struct	O
trivfs_protid	O
*	O
cred	*(struct)
,	O
mach_port_t	O
reply	int
,	O
mach_msg_type_name_t	O
reply_type	int
,	O
off_t	long
size	long
)	O
{	O
if	O
(	O
!	O
cred	*(struct)
)	O
return	O
EOPNOTSUPP	O
;	O
else	O
if	O
(	O
size	long
<	O
0	int
)	O
return	O
EINVAL	O
;	O
else	O
return	O
0	int
;	O
}	O
error_t	O
trivfs_S_io_get_openmodes	(*(struct),int,int,*(int))->(int)
(	O
struct	O
trivfs_protid	O
*	O
cred	*(struct)
,	O
mach_port_t	O
reply	int
,	O
mach_msg_type_name_t	O
reply_type	int
,	O
int	O
*	O
bits	*(int)
)	O
{	O
if	O
(	O
!	O
cred	*(struct)
)	O
return	O
EOPNOTSUPP	O
;	O
else	O
{	O
*	O
bits	*(int)
=	O
cred	*(struct)
->	O
po	O
->	O
openmodes	O
;	O
return	O
0	int
;	O
}	O
}	O
error_t	O
trivfs_S_io_set_all_openmodes	(*(struct),int,int,int)->(int)
(	O
struct	O
trivfs_protid	O
*	O
cred	*(struct)
,	O
mach_port_t	O
reply	int
,	O
mach_msg_type_name_t	O
reply_type	int
,	O
int	O
mode	int
)	O
{	O
if	O
(	O
!	O
cred	*(struct)
)	O
return	O
EOPNOTSUPP	O
;	O
else	O
return	O
0	int
;	O
}	O
error_t	O
trivfs_S_io_set_some_openmodes	(*(struct),int,int,int)->(int)
(	O
struct	O
trivfs_protid	O
*	O
cred	*(struct)
,	O
mach_port_t	O
reply	int
,	O
mach_msg_type_name_t	O
reply_type	int
,	O
int	O
bits	*(int)
)	O
{	O
if	O
(	O
!	O
cred	*(struct)
)	O
return	O
EOPNOTSUPP	O
;	O
else	O
return	O
0	int
;	O
}	O
error_t	O
trivfs_S_io_clear_some_openmodes	(*(struct),int,int,int)->(int)
(	O
struct	O
trivfs_protid	O
*	O
cred	*(struct)
,	O
mach_port_t	O
reply	int
,	O
mach_msg_type_name_t	O
reply_type	int
,	O
int	O
bits	*(int)
)	O
{	O
if	O
(	O
!	O
cred	*(struct)
)	O
return	O
EOPNOTSUPP	O
;	O
else	O
return	O
0	int
;	O
}	O
error_t	O
trivfs_S_io_get_owner	(*(struct),int,int,*(int))->(int)
(	O
struct	O
trivfs_protid	O
*	O
cred	*(struct)
,	O
mach_port_t	O
reply	int
,	O
mach_msg_type_name_t	O
reply_type	int
,	O
pid_t	O
*	O
owner	*(int)
)	O
{	O
if	O
(	O
!	O
cred	*(struct)
)	O
return	O
EOPNOTSUPP	O
;	O
else	O
{	O
struct	O
open	*(struct)
*	O
open	*(struct)
=	O
(	O
struct	O
open	*(struct)
*	O
)	O
cred	*(struct)
->	O
po	O
->	O
hook	O
;	O
*	O
owner	*(int)
=	O
open	*(struct)
->	O
dev	*(struct)
->	O
owner	*(int)
;	O
return	O
0	int
;	O
}	O
}	O
error_t	O
trivfs_S_io_mod_owner	(*(struct),int,int,int)->(int)
(	O
struct	O
trivfs_protid	O
*	O
cred	*(struct)
,	O
mach_port_t	O
reply	int
,	O
mach_msg_type_name_t	O
reply_type	int
,	O
pid_t	O
owner	*(int)
)	O
{	O
if	O
(	O
!	O
cred	*(struct)
)	O
return	O
EOPNOTSUPP	O
;	O
else	O
{	O
struct	O
open	*(struct)
*	O
open	*(struct)
=	O
(	O
struct	O
open	*(struct)
*	O
)	O
cred	*(struct)
->	O
po	O
->	O
hook	O
;	O
open	*(struct)
->	O
dev	*(struct)
->	O
owner	*(int)
=	O
owner	*(int)
;	O
return	O
0	int
;	O
}	O
}	O
error_t	O
trivfs_S_file_sync	(*(struct),int,int,int,int)->(int)
(	O
struct	O
trivfs_protid	O
*	O
cred	*(struct)
,	O
mach_port_t	O
reply	int
,	O
mach_msg_type_name_t	O
reply_type	int
,	O
int	O
wait	int
,	O
int	O
omit_metadata	int
)	O
{	O
if	O
(	O
cred	*(struct)
)	O
return	O
dev_sync	()->(int)
(	O
(	O
(	O
struct	O
open	*(struct)
*	O
)	O
cred	*(struct)
->	O
po	O
->	O
hook	O
)	O
->	O
dev	*(struct)
,	O
wait	int
)	O
;	O
else	O
return	O
EOPNOTSUPP	O
;	O
}	O
error_t	O
trivfs_S_file_syncfs	(*(struct),int,int,int,int)->(int)
(	O
struct	O
trivfs_protid	O
*	O
cred	*(struct)
,	O
mach_port_t	O
reply	int
,	O
mach_msg_type_name_t	O
reply_type	int
,	O
int	O
wait	int
,	O
int	O
dochildren	int
)	O
{	O
if	O
(	O
cred	*(struct)
)	O
return	O
dev_sync	()->(int)
(	O
(	O
(	O
struct	O
open	*(struct)
*	O
)	O
cred	*(struct)
->	O
po	O
->	O
hook	O
)	O
->	O
dev	*(struct)
,	O
wait	int
)	O
;	O
else	O
return	O
EOPNOTSUPP	O
;	O
}	O
error_t	O
trivfs_S_file_get_storage_info	(*(struct),int,int,*(*(int)),*(int),*(int),*(*(int)),*(int),*(*(long)),*(int),*(*(char)),*(int))->(int)
(	O
struct	O
trivfs_protid	O
*	O
cred	*(struct)
,	O
mach_port_t	O
reply	int
,	O
mach_msg_type_name_t	O
reply_type	int
,	O
mach_port_t	O
*	O
*	O
ports	*(*(int))
,	O
mach_msg_type_name_t	O
*	O
ports_type	*(int)
,	O
mach_msg_type_number_t	O
*	O
num_ports	*(int)
,	O
int	O
*	O
*	O
ints	*(*(int))
,	O
mach_msg_type_number_t	O
*	O
num_ints	*(int)
,	O
off_t	long
*	O
*	O
offsets	*(*(long))
,	O
mach_msg_type_number_t	O
*	O
num_offsets	*(int)
,	O
char	O
*	O
*	O
data	*(*(char))
,	O
mach_msg_type_number_t	O
*	O
data_len	*(int)
)	O
{	O
*	O
ports_type	*(int)
=	O
MACH_MSG_TYPE_COPY_SEND	O
;	O
if	O
(	O
!	O
cred	*(struct)
||	O
!	O
cred	*(struct)
->	O
po	O
->	O
hook	O
)	O
return	O
EOPNOTSUPP	O
;	O
else	O
{	O
error_t	O
err	O
;	O
struct	O
dev	*(struct)
*	O
dev	*(struct)
=	O
(	O
(	O
struct	O
open	*(struct)
*	O
)	O
cred	*(struct)
->	O
po	O
->	O
hook	O
)	O
->	O
dev	*(struct)
;	O
struct	O
store	*(struct)
*	O
store	*(struct)
=	O
dev	*(struct)
->	O
store	*(struct)
;	O
if	O
(	O
dev	*(struct)
->	O
enforced	O
&&	O
!	O
(	O
store	*(struct)
->	O
flags	int
&	O
STORE_ENFORCED	O
)	O
)	O
{	O
size_t	long
name_len	long
=	O
(	O
store	*(struct)
->	O
name	O
?	O
strlen	O
(	O
store	*(struct)
->	O
name	O
)	O
+	O
1	int
:	O
0	int
)	O
;	O
int	O
i	int
;	O
*	O
num_ports	*(int)
=	O
0	int
;	O
i	int
=	O
0	int
;	O
(	O
*	O
ints	*(*(int))
)	O
[	O
i	int
++	O
]	O
=	O
STORAGE_OTHER	O
;	O
(	O
*	O
ints	*(*(int))
)	O
[	O
i	int
++	O
]	O
=	O
store	*(struct)
->	O
flags	int
;	O
(	O
*	O
ints	*(*(int))
)	O
[	O
i	int
++	O
]	O
=	O
store	*(struct)
->	O
block_size	O
;	O
(	O
*	O
ints	*(*(int))
)	O
[	O
i	int
++	O
]	O
=	O
1	int
;	O
(	O
*	O
ints	*(*(int))
)	O
[	O
i	int
++	O
]	O
=	O
name_len	long
;	O
(	O
*	O
ints	*(*(int))
)	O
[	O
i	int
++	O
]	O
=	O
0	int
;	O
*	O
num_ints	*(int)
=	O
i	int
;	O
i	int
=	O
0	int
;	O
(	O
*	O
offsets	*(*(long))
)	O
[	O
i	int
++	O
]	O
=	O
0	int
;	O
(	O
*	O
offsets	*(*(long))
)	O
[	O
i	int
++	O
]	O
=	O
store	*(struct)
->	O
size	long
;	O
*	O
num_offsets	*(int)
=	O
i	int
;	O
if	O
(	O
store	*(struct)
->	O
name	O
)	O
memcpy	O
(	O
*	O
data	*(*(char))
,	O
store	*(struct)
->	O
name	O
,	O
name_len	long
)	O
;	O
*	O
data_len	*(int)
=	O
name_len	long
;	O
return	O
0	int
;	O
}	O
if	O
(	O
!	O
cred	*(struct)
->	O
isroot	O
&&	O
!	O
store_is_securely_returnable	()->(int)
(	O
store	*(struct)
,	O
cred	*(struct)
->	O
po	O
->	O
openmodes	O
)	O
)	O
{	O
struct	O
store	*(struct)
*	O
clone	*(struct)
;	O
err	O
=	O
store_clone	()->(int)
(	O
store	*(struct)
,	O
&	O
clone	*(struct)
)	O
;	O
if	O
(	O
!	O
err	O
)	O
{	O
err	O
=	O
store_set_flags	()->(int)
(	O
clone	*(struct)
,	O
STORE_INACTIVE	O
)	O
;	O
if	O
(	O
err	O
==	O
EINVAL	O
)	O
err	O
=	O
EACCES	O
;	O
else	O
err	O
=	O
store_return	()->(int)
(	O
clone	*(struct)
,	O
ports	*(*(int))
,	O
num_ports	*(int)
,	O
ints	*(*(int))
,	O
num_ints	*(int)
,	O
offsets	*(*(long))
,	O
num_offsets	*(int)
,	O
data	*(*(char))
,	O
data_len	*(int)
)	O
;	O
store_free	()->(int)
(	O
clone	*(struct)
)	O
;	O
}	O
}	O
else	O
err	O
=	O
store_return	()->(int)
(	O
store	*(struct)
,	O
ports	*(*(int))
,	O
num_ports	*(int)
,	O
ints	*(*(int))
,	O
num_ints	*(int)
,	O
offsets	*(*(long))
,	O
num_offsets	*(int)
,	O
data	*(*(char))
,	O
data_len	*(int)
)	O
;	O
return	O
err	O
;	O
}	O
}	O
