typedef	O
struct	O
{	O
FILE	struct
*	O
f	*(char)
;	O
EPChar	*(char)
p	*(char)
;	O
EUint32	long
tam	long
;	O
EChar	char
Name	array(char)
[	O
500	int
]	O
;	O
}	O
INIFILE	struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long long,*`,*`,*`,*`,int,int,array(char))),int,int,long,short,char,array(char),*(void),long long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long long,*`,*`,*`,*`,int,int,array(char))),*(void),int,int,array(char))),*(char),long,array(char))
,	O
*	O
PINIFILE	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long long,*(struct`),*(struct`),*(struct`),*(void),int,int,array(char))),*(char),long,array(char)))
;	O
PINIFILE	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long long,*(struct`),*(struct`),*(struct`),*(void),int,int,array(char))),*(char),long,array(char)))
EDMAPROC	O
edma_open_ini	(*(char))->(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long long,*`,*`,*`,*`,int,int,array(char))),*(char),long,array(char))))
(	O
EPChar	*(char)
Name	array(char)
)	O
{	O
PINIFILE	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long long,*(struct`),*(struct`),*(struct`),*(void),int,int,array(char))),*(char),long,array(char)))
pini	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long long,*(struct`),*(struct`),*(struct`),*(void),int,int,array(char))),*(char),long,array(char)))
;	O
EUint32	long
tam	long
;	O
if	O
(	O
Name	array(char)
==	O
NULL	O
)	O
{	O
edma_printf_err	(*(char))->(long)
(	O
"%s"	*(char)
,	O
"[edma_open_ini] Invalid file name"	*(char)
)	O
;	O
return	O
NULL	O
;	O
}	O
pini	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long long,*(struct`),*(struct`),*(struct`),*(void),int,int,array(char))),*(char),long,array(char)))
=	O
(	O
PINIFILE	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long long,*(struct`),*(struct`),*(struct`),*(void),int,int,array(char))),*(char),long,array(char)))
)	O
edma_palloc	(long)->(long)
(	O
sizeof	O
(	O
INIFILE	struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long long,*`,*`,*`,*`,int,int,array(char))),int,int,long,short,char,array(char),*(void),long long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long long,*`,*`,*`,*`,int,int,array(char))),*(void),int,int,array(char))),*(char),long,array(char))
)	O
)	O
;	O
if	O
(	O
pini	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long long,*(struct`),*(struct`),*(struct`),*(void),int,int,array(char))),*(char),long,array(char)))
==	O
NULL	O
)	O
{	O
printf	(*(char))->(int)
(	O
"\nCan't alloc INIFILE struct"	*(char)
)	O
;	O
return	O
0	int
;	O
}	O
strncpy	(*(char),*(char),int)->(*(char))
(	O
pini	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long long,*(struct`),*(struct`),*(struct`),*(void),int,int,array(char))),*(char),long,array(char)))
->	O
Name	array(char)
,	O
Name	array(char)
,	O
500	int
)	O
;	O
pini	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long long,*(struct`),*(struct`),*(struct`),*(void),int,int,array(char))),*(char),long,array(char)))
->	O
f	*(char)
=	O
fopen	(*(char),*(char))->(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long long,*`,*`,*`,*`,int,int,array(char))),int,int,long,short,char,array(char),*(void),long long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long long,*`,*`,*`,*`,int,int,array(char))),*(void),int,int,array(char))))
(	O
Name	array(char)
,	O
"rb"	*(char)
)	O
;	O
if	O
(	O
pini	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long long,*(struct`),*(struct`),*(struct`),*(void),int,int,array(char))),*(char),long,array(char)))
->	O
f	*(char)
==	O
NULL	O
)	O
{	O
printf	(*(char))->(int)
(	O
"\n[%s] Can't Open file %s"	*(char)
,	O
__FUNCTION__	O
,	O
Name	array(char)
)	O
;	O
return	O
0	int
;	O
}	O
fseek	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long long,*`,*`,*`,*`,int,int,array(char))),int,int,long,short,char,array(char),*(void),long long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long long,*`,*`,*`,*`,int,int,array(char))),*(void),int,int,array(char))),long,int)->(int)
(	O
pini	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long long,*(struct`),*(struct`),*(struct`),*(void),int,int,array(char))),*(char),long,array(char)))
->	O
f	*(char)
,	O
0	int
,	O
SEEK_END	int
)	O
;	O
pini	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long long,*(struct`),*(struct`),*(struct`),*(void),int,int,array(char))),*(char),long,array(char)))
->	O
tam	long
=	O
ftell	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long long,*`,*`,*`,*`,int,int,array(char))),int,int,long,short,char,array(char),*(void),long long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long long,*`,*`,*`,*`,int,int,array(char))),*(void),int,int,array(char))))->(long)
(	O
pini	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long long,*(struct`),*(struct`),*(struct`),*(void),int,int,array(char))),*(char),long,array(char)))
->	O
f	*(char)
)	O
;	O
pini	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long long,*(struct`),*(struct`),*(struct`),*(void),int,int,array(char))),*(char),long,array(char)))
->	O
p	*(char)
=	O
(	O
EPChar	*(char)
)	O
edma_palloc	(long)->(long)
(	O
pini	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long long,*(struct`),*(struct`),*(struct`),*(void),int,int,array(char))),*(char),long,array(char)))
->	O
tam	long
)	O
;	O
if	O
(	O
pini	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long long,*(struct`),*(struct`),*(struct`),*(void),int,int,array(char))),*(char),long,array(char)))
->	O
p	*(char)
==	O
NULL	O
)	O
{	O
printf	(*(char))->(int)
(	O
"\nCan't alloc %ld bytes for file %s"	*(char)
,	O
pini	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long long,*(struct`),*(struct`),*(struct`),*(void),int,int,array(char))),*(char),long,array(char)))
->	O
tam	long
,	O
Name	array(char)
)	O
;	O
return	O
0	int
;	O
}	O
memset	(*(void),int,int)->(*(void))
(	O
pini	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long long,*(struct`),*(struct`),*(struct`),*(void),int,int,array(char))),*(char),long,array(char)))
->	O
p	*(char)
,	O
0	int
,	O
pini	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long long,*(struct`),*(struct`),*(struct`),*(void),int,int,array(char))),*(char),long,array(char)))
->	O
tam	long
)	O
;	O
fseek	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long long,*`,*`,*`,*`,int,int,array(char))),int,int,long,short,char,array(char),*(void),long long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long long,*`,*`,*`,*`,int,int,array(char))),*(void),int,int,array(char))),long,int)->(int)
(	O
pini	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long long,*(struct`),*(struct`),*(struct`),*(void),int,int,array(char))),*(char),long,array(char)))
->	O
f	*(char)
,	O
0	int
,	O
SEEK_SET	int
)	O
;	O
tam	long
=	O
fread	(*(void),int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long long,*`,*`,*`,*`,int,int,array(char))),int,int,long,short,char,array(char),*(void),long long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long long,*`,*`,*`,*`,int,int,array(char))),*(void),int,int,array(char))))->(int)
(	O
pini	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long long,*(struct`),*(struct`),*(struct`),*(void),int,int,array(char))),*(char),long,array(char)))
->	O
p	*(char)
,	O
sizeof	O
(	O
char	O
)	O
,	O
pini	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long long,*(struct`),*(struct`),*(struct`),*(void),int,int,array(char))),*(char),long,array(char)))
->	O
tam	long
,	O
pini	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long long,*(struct`),*(struct`),*(struct`),*(void),int,int,array(char))),*(char),long,array(char)))
->	O
f	*(char)
)	O
;	O
fclose	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long long,*`,*`,*`,*`,int,int,array(char))),int,int,long,short,char,array(char),*(void),long long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long long,*`,*`,*`,*`,int,int,array(char))),*(void),int,int,array(char))))->(int)
(	O
pini	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long long,*(struct`),*(struct`),*(struct`),*(void),int,int,array(char))),*(char),long,array(char)))
->	O
f	*(char)
)	O
;	O
return	O
pini	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long long,*(struct`),*(struct`),*(struct`),*(void),int,int,array(char))),*(char),long,array(char)))
;	O
}	O
ESint32	long
EDMAPROC	O
edma_close_ini	(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long long,*`,*`,*`,*`,int,int,array(char))),*(char),long,array(char))))->(long)
(	O
PINIFILE	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long long,*(struct`),*(struct`),*(struct`),*(void),int,int,array(char))),*(char),long,array(char)))
pini	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long long,*(struct`),*(struct`),*(struct`),*(void),int,int,array(char))),*(char),long,array(char)))
)	O
{	O
if	O
(	O
pini	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long long,*(struct`),*(struct`),*(struct`),*(void),int,int,array(char))),*(char),long,array(char)))
==	O
NULL	O
)	O
{	O
edma_printf_err	(*(char))->(long)
(	O
"%s"	*(char)
,	O
"[edma_close_ini] Invalid file handler"	*(char)
)	O
;	O
return	O
-	O
1	int
;	O
}	O
edma_pfree	(long,*(void))->(void)
(	O
(	O
HMEM	long
)	O
pini	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long long,*(struct`),*(struct`),*(struct`),*(void),int,int,array(char))),*(char),long,array(char)))
->	O
p	*(char)
,	O
pini	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long long,*(struct`),*(struct`),*(struct`),*(void),int,int,array(char))),*(char),long,array(char)))
->	O
p	*(char)
)	O
;	O
edma_pfree	(long,*(void))->(void)
(	O
(	O
HMEM	long
)	O
pini	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long long,*(struct`),*(struct`),*(struct`),*(void),int,int,array(char))),*(char),long,array(char)))
,	O
pini	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long long,*(struct`),*(struct`),*(struct`),*(void),int,int,array(char))),*(char),long,array(char)))
)	O
;	O
return	O
0	int
;	O
}	O
ESint32	long
EDMAPROC	O
edma_get_ini_int	(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long long,*`,*`,*`,*`,int,int,array(char))),*(char),long,array(char))),*(char),*(char),long)->(long)
(	O
PINIFILE	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long long,*(struct`),*(struct`),*(struct`),*(void),int,int,array(char))),*(char),long,array(char)))
pini	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long long,*(struct`),*(struct`),*(struct`),*(void),int,int,array(char))),*(char),long,array(char)))
,	O
EPChar	*(char)
Section	*(char)
,	O
EPChar	*(char)
Val	*(char)
,	O
ESint32	long
def	long
)	O
{	O
EPChar	*(char)
pi	*(char)
;	O
EPChar	*(char)
pe	*(char)
;	O
EUint32	long
i	long
;	O
if	O
(	O
pini	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long long,*(struct`),*(struct`),*(struct`),*(void),int,int,array(char))),*(char),long,array(char)))
==	O
NULL	O
)	O
{	O
edma_printf_err	(*(char))->(long)
(	O
"%s"	*(char)
,	O
"[edma_get_ini_int] Invalid file handler"	*(char)
)	O
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
Section	*(char)
==	O
NULL	O
)	O
{	O
edma_printf_err	(*(char))->(long)
(	O
"%s"	*(char)
,	O
"[edma_get_ini_int] Invalid Section"	*(char)
)	O
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
Val	*(char)
==	O
NULL	O
)	O
{	O
edma_printf_err	(*(char))->(long)
(	O
"%s"	*(char)
,	O
"[edma_get_ini_int] Invalid Field"	*(char)
)	O
;	O
return	O
-	O
1	int
;	O
}	O
pi	*(char)
=	O
strstr	(*(char),*(char))->(*(char))
(	O
pini	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long long,*(struct`),*(struct`),*(struct`),*(void),int,int,array(char))),*(char),long,array(char)))
->	O
p	*(char)
,	O
Section	*(char)
)	O
;	O
if	O
(	O
pi	*(char)
==	O
NULL	O
)	O
return	O
def	long
;	O
pe	*(char)
=	O
strchr	(*(char),int)->(*(char))
(	O
pi	*(char)
,	O
'['	O
)	O
;	O
if	O
(	O
pe	*(char)
!=	O
NULL	O
)	O
*	O
pe	*(char)
=	O
0	int
;	O
pi	*(char)
=	O
strstr	(*(char),*(char))->(*(char))
(	O
pi	*(char)
,	O
Val	*(char)
)	O
;	O
if	O
(	O
pi	*(char)
==	O
NULL	O
)	O
{	O
*	O
pe	*(char)
=	O
'['	O
;	O
return	O
def	long
;	O
}	O
pi	*(char)
=	O
strchr	(*(char),int)->(*(char))
(	O
pi	*(char)
,	O
'='	O
)	O
;	O
pi	*(char)
++	O
;	O
i	long
=	O
atoi	(*(char))->(int)
(	O
pi	*(char)
)	O
;	O
*	O
pe	*(char)
=	O
'['	O
;	O
return	O
i	long
;	O
}	O
EUint32	long
EDMAPROC	O
edma_get_ini_string	(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long long,*`,*`,*`,*`,int,int,array(char))),*(char),long,array(char))),*(char),*(char),*(char),*(char),long)->(long)
(	O
PINIFILE	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long long,*(struct`),*(struct`),*(struct`),*(void),int,int,array(char))),*(char),long,array(char)))
pini	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long long,*(struct`),*(struct`),*(struct`),*(void),int,int,array(char))),*(char),long,array(char)))
,	O
EPChar	*(char)
Section	*(char)
,	O
EPChar	*(char)
Val	*(char)
,	O
EPChar	*(char)
def	long
,	O
EPChar	*(char)
Buffer	*(char)
,	O
EUint32	long
size	long
)	O
{	O
EPChar	*(char)
pi	*(char)
;	O
EPChar	*(char)
pe	*(char)
,	O
pe1	*(char)
;	O
EChar	char
sec	array(char)
[	O
80	int
]	O
;	O
EUint32	long
n	long
;	O
if	O
(	O
pini	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long long,*(struct`),*(struct`),*(struct`),*(void),int,int,array(char))),*(char),long,array(char)))
==	O
NULL	O
)	O
{	O
edma_printf_err	(*(char))->(long)
(	O
"%s"	*(char)
,	O
"[edma_get_ini_string] Invalid file handler"	*(char)
)	O
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
Section	*(char)
==	O
NULL	O
)	O
{	O
edma_printf_err	(*(char))->(long)
(	O
"%s"	*(char)
,	O
"[edma_get_ini_string] Invalid Section"	*(char)
)	O
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
Val	*(char)
==	O
NULL	O
)	O
{	O
edma_printf_err	(*(char))->(long)
(	O
"%s"	*(char)
,	O
"[edma_get_ini_string] Invalid Field"	*(char)
)	O
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
Buffer	*(char)
==	O
NULL	O
)	O
{	O
edma_printf_err	(*(char))->(long)
(	O
"%s"	*(char)
,	O
"[edma_get_ini_string] Invalid Target buffer"	*(char)
)	O
;	O
return	O
-	O
1	int
;	O
}	O
memset	(*(void),int,int)->(*(void))
(	O
Buffer	*(char)
,	O
0	int
,	O
size	long
)	O
;	O
snprintf	(*(char),int,*(char))->(int)
(	O
sec	array(char)
,	O
80	int
,	O
"[%s]"	*(char)
,	O
Section	*(char)
)	O
;	O
pi	*(char)
=	O
strstr	(*(char),*(char))->(*(char))
(	O
pini	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long long,*(struct`),*(struct`),*(struct`),*(void),int,int,array(char))),*(char),long,array(char)))
->	O
p	*(char)
,	O
sec	array(char)
)	O
;	O
if	O
(	O
pi	*(char)
==	O
NULL	O
)	O
{	O
return	O
0	int
;	O
}	O
pi	*(char)
++	O
;	O
pe	*(char)
=	O
strchr	(*(char),int)->(*(char))
(	O
pi	*(char)
,	O
'['	O
)	O
;	O
if	O
(	O
pe	*(char)
!=	O
NULL	O
)	O
*	O
pe	*(char)
=	O
0	int
;	O
pi	*(char)
=	O
strstr	(*(char),*(char))->(*(char))
(	O
pi	*(char)
,	O
Val	*(char)
)	O
;	O
if	O
(	O
(	O
pi	*(char)
==	O
NULL	O
)	O
)	O
{	O
*	O
pe	*(char)
=	O
'['	O
;	O
return	O
0	int
;	O
}	O
pi	*(char)
=	O
strchr	(*(char),int)->(*(char))
(	O
pi	*(char)
,	O
'='	O
)	O
;	O
pe1	*(char)
=	O
strchr	(*(char),int)->(*(char))
(	O
pi	*(char)
,	O
13	int
)	O
;	O
if	O
(	O
pe1	*(char)
==	O
NULL	O
)	O
{	O
pe1	*(char)
=	O
strchr	(*(char),int)->(*(char))
(	O
pi	*(char)
,	O
10	int
)	O
;	O
if	O
(	O
pe1	*(char)
==	O
NULL	O
)	O
{	O
printf	(*(char))->(int)
(	O
"%s"	*(char)
,	O
"[edma_get_ini_string] Can't locate end of line"	*(char)
)	O
;	O
return	O
0	int
;	O
}	O
}	O
n	long
=	O
pe1	*(char)
-	O
pi	*(char)
;	O
n	long
--	O
;	O
pi	*(char)
++	O
;	O
strncpy	(*(char),*(char),int)->(*(char))
(	O
Buffer	*(char)
,	O
pi	*(char)
,	O
n	long
)	O
;	O
Buffer	*(char)
[	O
n	long
]	O
=	O
0	int
;	O
*	O
pe	*(char)
=	O
'['	O
;	O
n	long
=	O
strlen	(*(char))->(int)
(	O
Buffer	*(char)
)	O
;	O
return	O
n	long
;	O
}	O
ESint32	long
EDMAPROC	O
edma_clean_ini_string	(*(char))->(long)
(	O
EPChar	*(char)
Buffer	*(char)
)	O
{	O
EUint32	long
i	long
;	O
if	O
(	O
Buffer	*(char)
==	O
NULL	O
)	O
{	O
edma_printf_err	(*(char))->(long)
(	O
"%s"	*(char)
,	O
"[edma_clean_ini_string] Invalid buffer"	*(char)
)	O
;	O
return	O
-	O
1	int
;	O
}	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
strlen	(*(char))->(int)
(	O
Buffer	*(char)
)	O
;	O
i	long
++	O
)	O
{	O
if	O
(	O
Buffer	*(char)
[	O
i	long
]	O
==	O
'\\'	O
)	O
Buffer	*(char)
[	O
i	long
]	O
=	O
'/'	O
;	O
}	O
return	O
0	int
;	O
}	O
