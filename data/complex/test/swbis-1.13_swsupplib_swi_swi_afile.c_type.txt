typedef	O
struct	O
{	O
int	O
did_itM	int
;	O
char	O
*	O
tagM	*(char)
;	O
}	O
G_CONTROL_SCRIPT	struct(int,*(char))
;	O
static	O
G_CONTROL_SCRIPT	struct(int,*(char))
pp_g_scripts	array(struct(int,*(char)))
[	O
]	O
=	O
{	O
{	O
0	int
,	O
"checkinstall"	*(char)
}	O
,	O
{	O
0	int
,	O
"preinstall"	*(char)
}	O
,	O
{	O
0	int
,	O
"postinstall"	*(char)
}	O
,	O
{	O
0	int
,	O
"verify"	*(char)
}	O
,	O
{	O
0	int
,	O
"fix"	*(char)
}	O
,	O
{	O
0	int
,	O
"checkremove"	*(char)
}	O
,	O
{	O
0	int
,	O
"preremove"	*(char)
}	O
,	O
{	O
0	int
,	O
"postremove"	*(char)
}	O
,	O
{	O
0	int
,	O
"configure"	*(char)
}	O
,	O
{	O
0	int
,	O
"unconfigure"	*(char)
}	O
,	O
{	O
0	int
,	O
"request"	*(char)
}	O
,	O
{	O
0	int
,	O
"unpreinstall"	*(char)
}	O
,	O
{	O
0	int
,	O
"unpostinstall"	*(char)
}	O
,	O
{	O
0	int
,	O
"space"	*(char)
}	O
,	O
{	O
0	int
,	O
(	O
char	O
*	O
)	O
NULL	O
}	O
}	O
;	O
static	O
void	O
make_case_pattern_for_unused_tags	(*(struct(*(char),*(char),int,int,int,char,int)))->(void)
(	O
STROB	struct(*(char),*(char),int,int,int,char,int)
*	O
buf	*(struct(*(char),*(char),int,int,int,char,int))
)	O
{	O
int	O
is_first	int
=	O
1	int
;	O
G_CONTROL_SCRIPT	struct(int,*(char))
*	O
script_ent	*(struct(int,*(char)))
;	O
strob_sprintf	(*(struct(*(char),*(char),int,int,int,char,int)),int,*(char))->(int)
(	O
buf	*(struct(*(char),*(char),int,int,int,char,int))
,	O
STROB_DO_APPEND	int
,	O
"\t\t"	*(char)
)	O
;	O
script_ent	*(struct(int,*(char)))
=	O
pp_g_scripts	array(struct(int,*(char)))
;	O
while	O
(	O
(	O
script_ent	*(struct(int,*(char)))
)	O
->	O
tagM	*(char)
)	O
{	O
if	O
(	O
script_ent	*(struct(int,*(char)))
->	O
did_itM	int
==	O
0	int
)	O
{	O
if	O
(	O
is_first	int
==	O
0	int
)	O
strob_sprintf	(*(struct(*(char),*(char),int,int,int,char,int)),int,*(char))->(int)
(	O
buf	*(struct(*(char),*(char),int,int,int,char,int))
,	O
STROB_DO_APPEND	int
,	O
"|"	*(char)
)	O
;	O
strob_sprintf	(*(struct(*(char),*(char),int,int,int,char,int)),int,*(char))->(int)
(	O
buf	*(struct(*(char),*(char),int,int,int,char,int))
,	O
STROB_DO_APPEND	int
,	O
"%s"	*(char)
,	O
script_ent	*(struct(int,*(char)))
->	O
tagM	*(char)
)	O
;	O
is_first	int
=	O
0	int
;	O
}	O
else	O
{	O
script_ent	*(struct(int,*(char)))
->	O
did_itM	int
=	O
0	int
;	O
}	O
script_ent	*(struct(int,*(char)))
++	O
;	O
}	O
strob_sprintf	(*(struct(*(char),*(char),int,int,int,char,int)),int,*(char))->(int)
(	O
buf	*(struct(*(char),*(char),int,int,int,char,int))
,	O
STROB_DO_APPEND	int
,	O
")\n"	*(char)
)	O
;	O
strob_sprintf	(*(struct(*(char),*(char),int,int,int,char,int)),int,*(char))->(int)
(	O
buf	*(struct(*(char),*(char),int,int,int,char,int))
,	O
STROB_DO_APPEND	int
,	O
"\t\t\techo \"$0: no ${SWBCS_SCRIPT_TAG} script for ${SWBCS_MATCH}\" 1>&2\n"	*(char)
"\t\t\texit "	*(char)
SWBIS_STATUS_COMMAND_NOT_FOUND	*(char)
"\n"	*(char)
"\t\t\t;;\n"	*(char)
)	O
;	O
}	O
static	O
int	O
set_is_ieee_control_script	(*(char),int)->(int)
(	O
char	O
*	O
pathname	*(char)
,	O
int	O
do_set	int
)	O
{	O
char	O
*	O
base	int
;	O
G_CONTROL_SCRIPT	struct(int,*(char))
*	O
script_ent	*(struct(int,*(char)))
;	O
base	int
=	O
swlib_basename	(*(struct(*(char),*(char),int,int,int,char,int)),*(char))->(*(char))
(	O
NULL	O
,	O
pathname	*(char)
)	O
;	O
swi_com_assert_pointer	(*(void),*(char),int)->(void)
(	O
(	O
void	O
*	O
)	O
base	int
,	O
__FILE__	O
,	O
__LINE__	O
)	O
;	O
script_ent	*(struct(int,*(char)))
=	O
pp_g_scripts	array(struct(int,*(char)))
;	O
while	O
(	O
(	O
script_ent	*(struct(int,*(char)))
)	O
->	O
tagM	*(char)
)	O
{	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
base	int
,	O
(	O
script_ent	*(struct(int,*(char)))
)	O
->	O
tagM	*(char)
)	O
==	O
0	int
)	O
{	O
if	O
(	O
do_set	int
)	O
{	O
(	O
script_ent	*(struct(int,*(char)))
)	O
->	O
did_itM	int
=	O
1	int
;	O
}	O
return	O
1	int
;	O
}	O
script_ent	*(struct(int,*(char)))
++	O
;	O
}	O
return	O
0	int
;	O
}	O
static	O
char	O
*	O
get_attribute_from_INFO_object	(*(struct(struct(char,char,int,*(char),long,long,int,*(struct`),*(struct`),int,char,*(char)),int,int,*(struct(struct`,*`,int,*`,int,int,int,int)),*(void),int)),*(char))->(*(char))
(	O
SWI_CONTROL_SCRIPT	struct(struct(char,char,int,*(char),long,long,int,*(struct(*(char),*(void),array(*(void)),*(int),int,struct(*`,int,int),*((*`,*`,int)->(*`)))),*(struct(*(char),*(char),*(char),int,*(struct`),int,int,*(struct`),*(struct`),*(void),int)),int,char,*(char)),int,int,*(struct(struct(char,char,int,*(char),long,long,int,*(struct`),*(struct`),int,char,*(char)),*(char),int,*(char),int,int,int,int)),*(void),int)
*	O
control_script	*(struct(struct(char,char,int,*(char),long,long,int,*(struct(*`,*`,array(*(void)),*`,int,struct`,*`)),*(struct(*`,*`,*`,int,*`,int,int,*`,*`,*`,int)),int,char,*(char)),int,int,*(struct(struct(char,char,int,*`,long,long,int,*`,*`,int,char,*`),*(char),int,*(char),int,int,int,int)),*(void),int))
,	O
char	O
*	O
attr_name	*(char)
)	O
{	O
SWI_XFILE	struct(struct(char,char,int,*(char),long,long,int,*(struct(*(char),*(void),array(*(void)),*(int),int,struct(*`,int,int),*((*`,*`,int)->(*`)))),*(struct(*(char),*(char),*(char),int,*(struct`),int,int,*(struct`),*(struct`),*(void),int)),int,char,*(char)),*(void),*(char),*(char),int,array(char),*(struct(array(*(struct(struct(char,char,int,*(char),long,long,int,*(struct(*`,*`,array(*(void)),*`,int,struct`,*`)),*(struct(*`,*`,*`,int,*`,int,int,*`,*`,*`,int)),int,char,*(char)),int,int,*(struct(struct(char,char,int,*`,long,long,int,*`,*`,int,char,*`),*(char),int,*(char),int,int,int,int)),*(void),int))))),*(struct(*(char),*(void),array(*(void)),*(int),int,struct(*(int),int,int),*((*`,*`,int)->(*`)))),int,*(struct(*(*(char)),int,int,long,int)),int,int,int,int)
*	O
xfile	*(struct(struct(char,char,int,*(char),long,long,int,*(struct(*`,*`,array(*(void)),*`,int,struct`,*`)),*(struct(*`,*`,*`,int,*`,int,int,*`,*`,*`,int)),int,char,*(char)),*(void),*(char),*(char),int,array(char),*(struct(array(*(struct(struct(char,char,int,*(char),long,long,int,*(struct(*`,*`,array(*(void)),*`,int,struct`,*`)),*(struct(*`,*`,*`,int,*`,int,int,*`,*`,*`,int)),int,char,*(char)),int,int,*(struct(struct(char,char,int,*`,long,long,int,*`,*`,int,char,*`),*(char),int,*(char),int,int,int,int)),*(void),int))))),*(struct(*(char),*(void),array(*(void)),*(int),int,struct(*`,int,int),*((*`,*`,int)->(*`)))),int,*(struct(*(*`),int,int,long,int)),int,int,int,int))
;	O
SWHEADER	struct(*(char),*(void),array(*(void)),*(int),int,struct(*(int),int,int),*((*(void),*(int),int)->(*(char))))
*	O
h	*(struct(short,long,long,long,long,long,long,long,long,long,long,long,long,long,*(char),*(char),*(char),*(char),char,char,char,char,int,int,*(struct(int,array(char),short,array(char),short,array(char),short,array(char),short)),*(void),long,long,long,long))
;	O
SWHEADER_STATE	struct(*(int),int,int)
state	*(int)
;	O
char	O
*	O
val	array(int)
;	O
xfile	*(struct(struct(char,char,int,*(char),long,long,int,*(struct(*`,*`,array(*(void)),*`,int,struct`,*`)),*(struct(*`,*`,*`,int,*`,int,int,*`,*`,*`,int)),int,char,*(char)),*(void),*(char),*(char),int,array(char),*(struct(array(*(struct(struct(char,char,int,*(char),long,long,int,*(struct(*`,*`,array(*(void)),*`,int,struct`,*`)),*(struct(*`,*`,*`,int,*`,int,int,*`,*`,*`,int)),int,char,*(char)),int,int,*(struct(struct(char,char,int,*`,long,long,int,*`,*`,int,char,*`),*(char),int,*(char),int,int,int,int)),*(void),int))))),*(struct(*(char),*(void),array(*(void)),*(int),int,struct(*`,int,int),*((*`,*`,int)->(*`)))),int,*(struct(*(*`),int,int,long,int)),int,int,int,int))
=	O
control_script	*(struct(struct(char,char,int,*(char),long,long,int,*(struct(*`,*`,array(*(void)),*`,int,struct`,*`)),*(struct(*`,*`,*`,int,*`,int,int,*`,*`,*`,int)),int,char,*(char)),int,int,*(struct(struct(char,char,int,*`,long,long,int,*`,*`,int,char,*`),*(char),int,*(char),int,int,int,int)),*(void),int))
->	O
swi_xfileM	*(void)
;	O
if	O
(	O
!	O
xfile	*(struct(struct(char,char,int,*(char),long,long,int,*(struct(*`,*`,array(*(void)),*`,int,struct`,*`)),*(struct(*`,*`,*`,int,*`,int,int,*`,*`,*`,int)),int,char,*(char)),*(void),*(char),*(char),int,array(char),*(struct(array(*(struct(struct(char,char,int,*(char),long,long,int,*(struct(*`,*`,array(*(void)),*`,int,struct`,*`)),*(struct(*`,*`,*`,int,*`,int,int,*`,*`,*`,int)),int,char,*(char)),int,int,*(struct(struct(char,char,int,*`,long,long,int,*`,*`,int,char,*`),*(char),int,*(char),int,int,int,int)),*(void),int))))),*(struct(*(char),*(void),array(*(void)),*(int),int,struct(*`,int,int),*((*`,*`,int)->(*`)))),int,*(struct(*(*`),int,int,long,int)),int,int,int,int))
)	O
return	O
NULL	O
;	O
h	*(struct(short,long,long,long,long,long,long,long,long,long,long,long,long,long,*(char),*(char),*(char),*(char),char,char,char,char,int,int,*(struct(int,array(char),short,array(char),short,array(char),short,array(char),short)),*(void),long,long,long,long))
=	O
xfile	*(struct(struct(char,char,int,*(char),long,long,int,*(struct(*`,*`,array(*(void)),*`,int,struct`,*`)),*(struct(*`,*`,*`,int,*`,int,int,*`,*`,*`,int)),int,char,*(char)),*(void),*(char),*(char),int,array(char),*(struct(array(*(struct(struct(char,char,int,*(char),long,long,int,*(struct(*`,*`,array(*(void)),*`,int,struct`,*`)),*(struct(*`,*`,*`,int,*`,int,int,*`,*`,*`,int)),int,char,*(char)),int,int,*(struct(struct(char,char,int,*`,long,long,int,*`,*`,int,char,*`),*(char),int,*(char),int,int,int,int)),*(void),int))))),*(struct(*(char),*(void),array(*(void)),*(int),int,struct(*`,int,int),*((*`,*`,int)->(*`)))),int,*(struct(*(*`),int,int,long,int)),int,int,int,int))
->	O
info_headerM	*(struct(*(char),*(void),array(*(void)),*(int),int,struct(*(int),int,int),*((*(void),*(int),int)->(*(char)))))
;	O
if	O
(	O
!	O
h	*(struct(short,long,long,long,long,long,long,long,long,long,long,long,long,long,*(char),*(char),*(char),*(char),char,char,char,char,int,int,*(struct(int,array(char),short,array(char),short,array(char),short,array(char),short)),*(void),long,long,long,long))
)	O
return	O
NULL	O
;	O
swheader_store_state	(*(struct(*(char),*(void),array(*(void)),*(int),int,struct(*(int),int,int),*((*`,*`,int)->(*`)))),*(struct(*(int),int,int)))->(void)
(	O
h	*(struct(short,long,long,long,long,long,long,long,long,long,long,long,long,long,*(char),*(char),*(char),*(char),char,char,char,char,int,int,*(struct(int,array(char),short,array(char),short,array(char),short,array(char),short)),*(void),long,long,long,long))
,	O
&	O
state	*(int)
)	O
;	O
swheader_reset	(*(struct(*(char),*(void),array(*(void)),*(int),int,struct(*(int),int,int),*((*`,*`,int)->(*`)))))->(void)
(	O
h	*(struct(short,long,long,long,long,long,long,long,long,long,long,long,long,long,*(char),*(char),*(char),*(char),char,char,char,char,int,int,*(struct(int,array(char),short,array(char),short,array(char),short,array(char),short)),*(void),long,long,long,long))
)	O
;	O
swheader_set_current_offset_p	(*(struct(*(char),*(void),array(*(void)),*(int),int,struct(*(int),int,int),*((*`,*`,int)->(*`)))),*(int))->(void)
(	O
h	*(struct(short,long,long,long,long,long,long,long,long,long,long,long,long,long,*(char),*(char),*(char),*(char),char,char,char,char,int,int,*(struct(int,array(char),short,array(char),short,array(char),short,array(char),short)),*(void),long,long,long,long))
,	O
&	O
(	O
xfile	*(struct(struct(char,char,int,*(char),long,long,int,*(struct(*`,*`,array(*(void)),*`,int,struct`,*`)),*(struct(*`,*`,*`,int,*`,int,int,*`,*`,*`,int)),int,char,*(char)),*(void),*(char),*(char),int,array(char),*(struct(array(*(struct(struct(char,char,int,*(char),long,long,int,*(struct(*`,*`,array(*(void)),*`,int,struct`,*`)),*(struct(*`,*`,*`,int,*`,int,int,*`,*`,*`,int)),int,char,*(char)),int,int,*(struct(struct(char,char,int,*`,long,long,int,*`,*`,int,char,*`),*(char),int,*(char),int,int,int,int)),*(void),int))))),*(struct(*(char),*(void),array(*(void)),*(int),int,struct(*`,int,int),*((*`,*`,int)->(*`)))),int,*(struct(*(*`),int,int,long,int)),int,int,int,int))
->	O
INFO_header_indexM	int
)	O
)	O
;	O
swheader_set_current_offset_p_value	(*(struct(*(char),*(void),array(*(void)),*(int),int,struct(*(int),int,int),*((*`,*`,int)->(*`)))),int)->(void)
(	O
h	*(struct(short,long,long,long,long,long,long,long,long,long,long,long,long,long,*(char),*(char),*(char),*(char),char,char,char,char,int,int,*(struct(int,array(char),short,array(char),short,array(char),short,array(char),short)),*(void),long,long,long,long))
,	O
control_script	*(struct(struct(char,char,int,*(char),long,long,int,*(struct(*`,*`,array(*(void)),*`,int,struct`,*`)),*(struct(*`,*`,*`,int,*`,int,int,*`,*`,*`,int)),int,char,*(char)),int,int,*(struct(struct(char,char,int,*`,long,long,int,*`,*`,int,char,*`),*(char),int,*(char),int,int,int,int)),*(void),int))
->	O
INFO_offsetM	int
)	O
;	O
val	array(int)
=	O
swheader_get_single_attribute_value	(*(struct(*(char),*(void),array(*(void)),*(int),int,struct(*(int),int,int),*((*`,*`,int)->(*`)))),*(char))->(*(char))
(	O
h	*(struct(short,long,long,long,long,long,long,long,long,long,long,long,long,long,*(char),*(char),*(char),*(char),char,char,char,char,int,int,*(struct(int,array(char),short,array(char),short,array(char),short,array(char),short)),*(void),long,long,long,long))
,	O
attr_name	*(char)
)	O
;	O
swheader_restore_state	(*(struct(*(char),*(void),array(*(void)),*(int),int,struct(*(int),int,int),*((*`,*`,int)->(*`)))),*(struct(*(int),int,int)))->(void)
(	O
h	*(struct(short,long,long,long,long,long,long,long,long,long,long,long,long,long,*(char),*(char),*(char),*(char),char,char,char,char,int,int,*(struct(int,array(char),short,array(char),short,array(char),short,array(char),short)),*(void),long,long,long,long))
,	O
&	O
state	*(int)
)	O
;	O
return	O
val	array(int)
;	O
}	O
void	O
swi_scripts_delete	(*(struct(array(*(struct(struct(char,char,int,*(char),long,long,int,*(struct(*`,*`,array(*(void)),*`,int,struct`,*`)),*(struct(*`,*`,*`,int,*`,int,int,*`,*`,*`,int)),int,char,*(char)),int,int,*(struct(struct(char,char,int,*`,long,long,int,*`,*`,int,char,*`),*(char),int,*(char),int,int,int,int)),*(void),int))))))->(void)
(	O
SWI_SCRIPTS	struct(array(*(struct(struct(char,char,int,*(char),long,long,int,*(struct(*`,*`,array(*(void)),*`,int,struct`,*`)),*(struct(*`,*`,*`,int,*`,int,int,*`,*`,*`,int)),int,char,*(char)),int,int,*(struct(struct(char,char,int,*`,long,long,int,*`,*`,int,char,*`),*(char),int,*(char),int,int,int,int)),*(void),int))))
*	O
s	*(struct(*(char),*(char),int,int,int,char,int))
)	O
{	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
SWI_MAX_OBJ	int
;	O
i	int
++	O
)	O
{	O
if	O
(	O
s	*(struct(*(char),*(char),int,int,int,char,int))
->	O
swi_coM	array(*(struct(struct(char,char,int,*(char),long,long,int,*(struct(*`,*`,array(*(void)),*`,int,struct`,*`)),*(struct(*`,*`,*`,int,*`,int,int,*`,*`,*`,int)),int,char,*(char)),int,int,*(struct(struct(char,char,int,*`,long,long,int,*`,*`,int,char,*`),*(char),int,*(char),int,int,int,int)),*(void),int)))
[	O
i	int
]	O
)	O
swi_control_script_delete	(*(struct(struct(char,char,int,*(char),long,long,int,*(struct`),*(struct`),int,char,*(char)),int,int,*(struct(struct`,*`,int,*`,int,int,int,int)),*(void),int)))->(void)
(	O
s	*(struct(*(char),*(char),int,int,int,char,int))
->	O
swi_coM	array(*(struct(struct(char,char,int,*(char),long,long,int,*(struct(*`,*`,array(*(void)),*`,int,struct`,*`)),*(struct(*`,*`,*`,int,*`,int,int,*`,*`,*`,int)),int,char,*(char)),int,int,*(struct(struct(char,char,int,*`,long,long,int,*`,*`,int,char,*`),*(char),int,*(char),int,int,int,int)),*(void),int)))
[	O
i	int
]	O
)	O
;	O
}	O
free	(*(void))->(void)
(	O
s	*(struct(*(char),*(char),int,int,int,char,int))
)	O
;	O
}	O
SWI_SCRIPTS	struct(array(*(struct(struct(char,char,int,*(char),long,long,int,*(struct(*`,*`,array(*(void)),*`,int,struct`,*`)),*(struct(*`,*`,*`,int,*`,int,int,*`,*`,*`,int)),int,char,*(char)),int,int,*(struct(struct(char,char,int,*`,long,long,int,*`,*`,int,char,*`),*(char),int,*(char),int,int,int,int)),*(void),int))))
*	O
swi_scripts_create	()->(*(struct(array(*(struct(struct(char,char,int,*(char),long,long,int,*(struct(*`,*`,array(*(void)),*`,int,struct`,*`)),*(struct(*`,*`,*`,int,*`,int,int,*`,*`,*`,int)),int,char,*(char)),int,int,*(struct(struct(char,char,int,*`,long,long,int,*`,*`,int,char,*`),*(char),int,*(char),int,int,int,int)),*(void),int))))))
(	O
void	O
)	O
{	O
SWI_SCRIPTS	struct(array(*(struct(struct(char,char,int,*(char),long,long,int,*(struct(*`,*`,array(*(void)),*`,int,struct`,*`)),*(struct(*`,*`,*`,int,*`,int,int,*`,*`,*`,int)),int,char,*(char)),int,int,*(struct(struct(char,char,int,*`,long,long,int,*`,*`,int,char,*`),*(char),int,*(char),int,int,int,int)),*(void),int))))
*	O
s	*(struct(*(char),*(char),int,int,int,char,int))
=	O
(	O
SWI_SCRIPTS	struct(array(*(struct(struct(char,char,int,*(char),long,long,int,*(struct(*`,*`,array(*(void)),*`,int,struct`,*`)),*(struct(*`,*`,*`,int,*`,int,int,*`,*`,*`,int)),int,char,*(char)),int,int,*(struct(struct(char,char,int,*`,long,long,int,*`,*`,int,char,*`),*(char),int,*(char),int,int,int,int)),*(void),int))))
*	O
)	O
malloc	(long)->(*(void))
(	O
sizeof	O
(	O
SWI_SCRIPTS	struct(array(*(struct(struct(char,char,int,*(char),long,long,int,*(struct(*`,*`,array(*(void)),*`,int,struct`,*`)),*(struct(*`,*`,*`,int,*`,int,int,*`,*`,*`,int)),int,char,*(char)),int,int,*(struct(struct(char,char,int,*`,long,long,int,*`,*`,int,char,*`),*(char),int,*(char),int,int,int,int)),*(void),int))))
)	O
)	O
;	O
SWSWI_E_DEBUG	O
(	O
""	*(char)
)	O
;	O
swi_com_assert_pointer	(*(void),*(char),int)->(void)
(	O
(	O
void	O
*	O
)	O
s	*(struct(*(char),*(char),int,int,int,char,int))
,	O
__FILE__	O
,	O
__LINE__	O
)	O
;	O
swiInitListOfObjects	(*(*(void)))->(void)
(	O
(	O
void	O
*	O
*	O
)	O
(	O
s	*(struct(*(char),*(char),int,int,int,char,int))
->	O
swi_coM	array(*(struct(struct(char,char,int,*(char),long,long,int,*(struct(*`,*`,array(*(void)),*`,int,struct`,*`)),*(struct(*`,*`,*`,int,*`,int,int,*`,*`,*`,int)),int,char,*(char)),int,int,*(struct(struct(char,char,int,*`,long,long,int,*`,*`,int,char,*`),*(char),int,*(char),int,int,int,int)),*(void),int)))
)	O
)	O
;	O
return	O
s	*(struct(*(char),*(char),int,int,int,char,int))
;	O
}	O
void	O
swi_file_member_delete	(*(struct(struct(char,char,int,*(char),long,long,int,*(struct`),*(struct`),int,char,*(char)),*(char),int,*(char),int,int,int,int)))->(void)
(	O
SWI_FILE_MEMBER	struct(struct(char,char,int,*(char),long,long,int,*(struct(*(char),*(void),array(*(void)),*(int),int,struct(*`,int,int),*((*`,*`,int)->(*`)))),*(struct(*(char),*(char),*(char),int,*(struct`),int,int,*(struct`),*(struct`),*(void),int)),int,char,*(char)),*(char),int,*(char),int,int,int,int)
*	O
s	*(struct(*(char),*(char),int,int,int,char,int))
)	O
{	O
if	O
(	O
s	*(struct(*(char),*(char),int,int,int,char,int))
->	O
refcountM	int
>	O
1	int
)	O
{	O
(	O
s	*(struct(*(char),*(char),int,int,int,char,int))
->	O
refcountM	int
)	O
--	O
;	O
return	O
;	O
}	O
if	O
(	O
s	*(struct(*(char),*(char),int,int,int,char,int))
->	O
pathnameM	*(char)
)	O
free	(*(void))->(void)
(	O
s	*(struct(*(char),*(char),int,int,int,char,int))
->	O
pathnameM	*(char)
)	O
;	O
if	O
(	O
s	*(struct(*(char),*(char),int,int,int,char,int))
->	O
dataM	*(char)
)	O
free	(*(void))->(void)
(	O
s	*(struct(*(char),*(char),int,int,int,char,int))
->	O
dataM	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
s	*(struct(*(char),*(char),int,int,int,char,int))
)	O
;	O
}	O
SWI_FILE_MEMBER	struct(struct(char,char,int,*(char),long,long,int,*(struct(*(char),*(void),array(*(void)),*(int),int,struct(*`,int,int),*((*`,*`,int)->(*`)))),*(struct(*(char),*(char),*(char),int,*(struct`),int,int,*(struct`),*(struct`),*(void),int)),int,char,*(char)),*(char),int,*(char),int,int,int,int)
*	O
swi_file_member_create	()->(*(struct(struct(char,char,int,*(char),long,long,int,*(struct`),*(struct`),int,char,*(char)),*(char),int,*(char),int,int,int,int)))
(	O
void	O
)	O
{	O
SWI_FILE_MEMBER	struct(struct(char,char,int,*(char),long,long,int,*(struct(*(char),*(void),array(*(void)),*(int),int,struct(*`,int,int),*((*`,*`,int)->(*`)))),*(struct(*(char),*(char),*(char),int,*(struct`),int,int,*(struct`),*(struct`),*(void),int)),int,char,*(char)),*(char),int,*(char),int,int,int,int)
*	O
s	*(struct(*(char),*(char),int,int,int,char,int))
=	O
(	O
SWI_FILE_MEMBER	struct(struct(char,char,int,*(char),long,long,int,*(struct(*(char),*(void),array(*(void)),*(int),int,struct(*`,int,int),*((*`,*`,int)->(*`)))),*(struct(*(char),*(char),*(char),int,*(struct`),int,int,*(struct`),*(struct`),*(void),int)),int,char,*(char)),*(char),int,*(char),int,int,int,int)
*	O
)	O
malloc	(long)->(*(void))
(	O
sizeof	O
(	O
SWI_FILE_MEMBER	struct(struct(char,char,int,*(char),long,long,int,*(struct(*(char),*(void),array(*(void)),*(int),int,struct(*`,int,int),*((*`,*`,int)->(*`)))),*(struct(*(char),*(char),*(char),int,*(struct`),int,int,*(struct`),*(struct`),*(void),int)),int,char,*(char)),*(char),int,*(char),int,int,int,int)
)	O
)	O
;	O
swi_com_assert_pointer	(*(void),*(char),int)->(void)
(	O
(	O
void	O
*	O
)	O
s	*(struct(*(char),*(char),int,int,int,char,int))
,	O
__FILE__	O
,	O
__LINE__	O
)	O
;	O
swi_vbase_init	(*(void),int,*(struct(*(char),*(void),array(*(void)),*(int),int,struct(*(int),int,int),*((*`,*`,int)->(*`)))),*(struct(int,int,int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char))))->(void)
(	O
s	*(struct(*(char),*(char),int,int,int,char,int))
,	O
SWI_I_TYPE_AFILE	char
,	O
NULL	O
,	O
NULL	O
)	O
;	O
s	*(struct(*(char),*(char),int,int,int,char,int))
->	O
refcountM	int
=	O
1	int
;	O
s	*(struct(*(char),*(char),int,int,int,char,int))
->	O
pathnameM	*(char)
=	O
NULL	O
;	O
s	*(struct(*(char),*(char),int,int,int,char,int))
->	O
lenM	int
=	O
-	O
1	int
;	O
s	*(struct(*(char),*(char),int,int,int,char,int))
->	O
dataM	*(char)
=	O
NULL	O
;	O
return	O
s	*(struct(*(char),*(char),int,int,int,char,int))
;	O
}	O
void	O
swi_control_script_delete	(*(struct(struct(char,char,int,*(char),long,long,int,*(struct`),*(struct`),int,char,*(char)),int,int,*(struct(struct`,*`,int,*`,int,int,int,int)),*(void),int)))->(void)
(	O
SWI_CONTROL_SCRIPT	struct(struct(char,char,int,*(char),long,long,int,*(struct(*(char),*(void),array(*(void)),*(int),int,struct(*`,int,int),*((*`,*`,int)->(*`)))),*(struct(*(char),*(char),*(char),int,*(struct`),int,int,*(struct`),*(struct`),*(void),int)),int,char,*(char)),int,int,*(struct(struct(char,char,int,*(char),long,long,int,*(struct`),*(struct`),int,char,*(char)),*(char),int,*(char),int,int,int,int)),*(void),int)
*	O
s	*(struct(*(char),*(char),int,int,int,char,int))
)	O
{	O
if	O
(	O
s	*(struct(*(char),*(char),int,int,int,char,int))
->	O
baseM	struct(char,char,int,*(char),long,long,int,*(struct(*(char),*(void),array(*(void)),*(int),int,struct(*(int),int,int),*((*`,*`,int)->(*`)))),*(struct(*(char),*(char),*(char),int,*(struct(*`,int,int,long,int)),int,int,*(struct(array(char),array(char),array(char),array(char),int,*`,*`)),*(struct(*`,*`,*`,*`,*`,char,char,char,char,int)),*(void),int)),int,char,*(char))
.	O
b_tagM	*(char)
)	O
free	(*(void))->(void)
(	O
s	*(struct(*(char),*(char),int,int,int,char,int))
->	O
baseM	struct(char,char,int,*(char),long,long,int,*(struct(*(char),*(void),array(*(void)),*(int),int,struct(*(int),int,int),*((*`,*`,int)->(*`)))),*(struct(*(char),*(char),*(char),int,*(struct(*`,int,int,long,int)),int,int,*(struct(array(char),array(char),array(char),array(char),int,*`,*`)),*(struct(*`,*`,*`,*`,*`,char,char,char,char,int)),*(void),int)),int,char,*(char))
.	O
b_tagM	*(char)
)	O
;	O
if	O
(	O
s	*(struct(*(char),*(char),int,int,int,char,int))
->	O
afileM	*(struct(struct(char,char,int,*(char),long,long,int,*(struct(*`,*`,array(*(void)),*`,int,struct`,*`)),*(struct(*`,*`,*`,int,*`,int,int,*`,*`,*`,int)),int,char,*(char)),*(char),int,*(char),int,int,int,int))
)	O
swi_file_member_delete	(*(struct(struct(char,char,int,*(char),long,long,int,*(struct`),*(struct`),int,char,*(char)),*(char),int,*(char),int,int,int,int)))->(void)
(	O
s	*(struct(*(char),*(char),int,int,int,char,int))
->	O
afileM	*(struct(struct(char,char,int,*(char),long,long,int,*(struct(*`,*`,array(*(void)),*`,int,struct`,*`)),*(struct(*`,*`,*`,int,*`,int,int,*`,*`,*`,int)),int,char,*(char)),*(char),int,*(char),int,int,int,int))
)	O
;	O
free	(*(void))->(void)
(	O
s	*(struct(*(char),*(char),int,int,int,char,int))
)	O
;	O
}	O
SWI_CONTROL_SCRIPT	struct(struct(char,char,int,*(char),long,long,int,*(struct(*(char),*(void),array(*(void)),*(int),int,struct(*`,int,int),*((*`,*`,int)->(*`)))),*(struct(*(char),*(char),*(char),int,*(struct`),int,int,*(struct`),*(struct`),*(void),int)),int,char,*(char)),int,int,*(struct(struct(char,char,int,*(char),long,long,int,*(struct`),*(struct`),int,char,*(char)),*(char),int,*(char),int,int,int,int)),*(void),int)
*	O
swi_control_script_create	()->(*(struct(struct(char,char,int,*(char),long,long,int,*(struct`),*(struct`),int,char,*(char)),int,int,*(struct(struct`,*`,int,*`,int,int,int,int)),*(void),int)))
(	O
void	O
)	O
{	O
static	O
int	O
id	*(char)
=	O
0	int
;	O
SWI_CONTROL_SCRIPT	struct(struct(char,char,int,*(char),long,long,int,*(struct(*(char),*(void),array(*(void)),*(int),int,struct(*`,int,int),*((*`,*`,int)->(*`)))),*(struct(*(char),*(char),*(char),int,*(struct`),int,int,*(struct`),*(struct`),*(void),int)),int,char,*(char)),int,int,*(struct(struct(char,char,int,*(char),long,long,int,*(struct`),*(struct`),int,char,*(char)),*(char),int,*(char),int,int,int,int)),*(void),int)
*	O
s	*(struct(*(char),*(char),int,int,int,char,int))
;	O
SWSWI_E_DEBUG	O
(	O
""	*(char)
)	O
;	O
s	*(struct(*(char),*(char),int,int,int,char,int))
=	O
(	O
SWI_CONTROL_SCRIPT	struct(struct(char,char,int,*(char),long,long,int,*(struct(*(char),*(void),array(*(void)),*(int),int,struct(*`,int,int),*((*`,*`,int)->(*`)))),*(struct(*(char),*(char),*(char),int,*(struct`),int,int,*(struct`),*(struct`),*(void),int)),int,char,*(char)),int,int,*(struct(struct(char,char,int,*(char),long,long,int,*(struct`),*(struct`),int,char,*(char)),*(char),int,*(char),int,int,int,int)),*(void),int)
*	O
)	O
malloc	(long)->(*(void))
(	O
sizeof	O
(	O
SWI_CONTROL_SCRIPT	struct(struct(char,char,int,*(char),long,long,int,*(struct(*(char),*(void),array(*(void)),*(int),int,struct(*`,int,int),*((*`,*`,int)->(*`)))),*(struct(*(char),*(char),*(char),int,*(struct`),int,int,*(struct`),*(struct`),*(void),int)),int,char,*(char)),int,int,*(struct(struct(char,char,int,*(char),long,long,int,*(struct`),*(struct`),int,char,*(char)),*(char),int,*(char),int,int,int,int)),*(void),int)
)	O
)	O
;	O
swi_com_assert_pointer	(*(void),*(char),int)->(void)
(	O
(	O
void	O
*	O
)	O
s	*(struct(*(char),*(char),int,int,int,char,int))
,	O
__FILE__	O
,	O
__LINE__	O
)	O
;	O
swi_vbase_init	(*(void),int,*(struct(*(char),*(void),array(*(void)),*(int),int,struct(*(int),int,int),*((*`,*`,int)->(*`)))),*(struct(int,int,int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char))))->(void)
(	O
s	*(struct(*(char),*(char),int,int,int,char,int))
,	O
SWI_I_TYPE_SCRIPT	char
,	O
NULL	O
,	O
NULL	O
)	O
;	O
s	*(struct(*(char),*(char),int,int,int,char,int))
->	O
sidM	int
=	O
++	O
id	*(char)
;	O
s	*(struct(*(char),*(char),int,int,int,char,int))
->	O
afileM	*(struct(struct(char,char,int,*(char),long,long,int,*(struct(*`,*`,array(*(void)),*`,int,struct`,*`)),*(struct(*`,*`,*`,int,*`,int,int,*`,*`,*`,int)),int,char,*(char)),*(char),int,*(char),int,int,int,int))
=	O
NULL	O
;	O
s	*(struct(*(char),*(char),int,int,int,char,int))
->	O
swi_xfileM	*(void)
=	O
(	O
void	O
*	O
)	O
NULL	O
;	O
s	*(struct(*(char),*(char),int,int,int,char,int))
->	O
INFO_offsetM	int
=	O
-	O
1	int
;	O
s	*(struct(*(char),*(char),int,int,int,char,int))
->	O
resultM	int
=	O
SWI_RESULT_UNDEFINED	O
;	O
return	O
s	*(struct(*(char),*(char),int,int,int,char,int))
;	O
}	O
void	O
swi_add_script	(*(struct(array(*(struct(struct(char,char,int,*(char),long,long,int,*(struct(*`,*`,array(*(void)),*`,int,struct`,*`)),*(struct(*`,*`,*`,int,*`,int,int,*`,*`,*`,int)),int,char,*(char)),int,int,*(struct(struct(char,char,int,*`,long,long,int,*`,*`,int,char,*`),*(char),int,*(char),int,int,int,int)),*(void),int))))),*(struct(struct(char,char,int,*(char),long,long,int,*(struct`),*(struct`),int,char,*(char)),int,int,*(struct(struct`,*`,int,*`,int,int,int,int)),*(void),int)))->(void)
(	O
SWI_SCRIPTS	struct(array(*(struct(struct(char,char,int,*(char),long,long,int,*(struct(*`,*`,array(*(void)),*`,int,struct`,*`)),*(struct(*`,*`,*`,int,*`,int,int,*`,*`,*`,int)),int,char,*(char)),int,int,*(struct(struct(char,char,int,*`,long,long,int,*`,*`,int,char,*`),*(char),int,*(char),int,int,int,int)),*(void),int))))
*	O
thisisit	*(struct(array(*(struct(struct(char,char,int,*(char),long,long,int,*(struct(*`,*`,array(*(void)),*`,int,struct`,*`)),*(struct(*`,*`,*`,int,*`,int,int,*`,*`,*`,int)),int,char,*(char)),int,int,*(struct(struct(char,char,int,*`,long,long,int,*`,*`,int,char,*`),*(char),int,*(char),int,int,int,int)),*(void),int)))))
,	O
SWI_CONTROL_SCRIPT	struct(struct(char,char,int,*(char),long,long,int,*(struct(*(char),*(void),array(*(void)),*(int),int,struct(*`,int,int),*((*`,*`,int)->(*`)))),*(struct(*(char),*(char),*(char),int,*(struct`),int,int,*(struct`),*(struct`),*(void),int)),int,char,*(char)),int,int,*(struct(struct(char,char,int,*(char),long,long,int,*(struct`),*(struct`),int,char,*(char)),*(char),int,*(char),int,int,int,int)),*(void),int)
*	O
v	int
)	O
{	O
SWSWI_E_DEBUG	O
(	O
"ENTERING"	*(char)
)	O
;	O
swiAddObjectToList	(*(*(void)),*(void))->(int)
(	O
(	O
void	O
*	O
*	O
)	O
(	O
thisisit	*(struct(array(*(struct(struct(char,char,int,*(char),long,long,int,*(struct(*`,*`,array(*(void)),*`,int,struct`,*`)),*(struct(*`,*`,*`,int,*`,int,int,*`,*`,*`,int)),int,char,*(char)),int,int,*(struct(struct(char,char,int,*`,long,long,int,*`,*`,int,char,*`),*(char),int,*(char),int,int,int,int)),*(void),int)))))
->	O
swi_coM	array(*(struct(struct(char,char,int,*(char),long,long,int,*(struct(*`,*`,array(*(void)),*`,int,struct`,*`)),*(struct(*`,*`,*`,int,*`,int,int,*`,*`,*`,int)),int,char,*(char)),int,int,*(struct(struct(char,char,int,*`,long,long,int,*`,*`,int,char,*`),*(char),int,*(char),int,int,int,int)),*(void),int)))
)	O
,	O
(	O
void	O
*	O
)	O
v	int
)	O
;	O
SWSWI_E_DEBUG	O
(	O
"LEAVING"	*(char)
)	O
;	O
}	O
int	O
swi_control_script_get_return_code	(*(char))->(int)
(	O
char	O
*	O
posix_result	*(char)
)	O
{	O
if	O
(	O
strcasecmp	(*(char),*(char))->(int)
(	O
posix_result	*(char)
,	O
SW_RESULT_NONE	*(char)
)	O
==	O
0	int
)	O
{	O
return	O
SWI_RESULT_UNDEFINED	O
;	O
}	O
else	O
if	O
(	O
strcasecmp	(*(char),*(char))->(int)
(	O
posix_result	*(char)
,	O
SW_RESULT_SUCCESS	*(char)
)	O
==	O
0	int
)	O
{	O
return	O
SWI_RESULT_SUCCESS	O
;	O
}	O
else	O
if	O
(	O
strcasecmp	(*(char),*(char))->(int)
(	O
posix_result	*(char)
,	O
SW_RESULT_WARNING	*(char)
)	O
==	O
0	int
)	O
{	O
return	O
SWI_RESULT_WARNING	O
;	O
}	O
else	O
if	O
(	O
strcasecmp	(*(char),*(char))->(int)
(	O
posix_result	*(char)
,	O
SW_RESULT_FAILURE	*(char)
)	O
==	O
0	int
)	O
{	O
return	O
SWI_RESULT_FAILURE	O
;	O
}	O
else	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s: unrecognized  POSIX result string: [%s]\n"	*(char)
,	O
swlib_utilname_get	()->(*(char))
(	O
)	O
,	O
posix_result	*(char)
)	O
;	O
return	O
SWI_RESULT_FAILURE	O
;	O
}	O
}	O
char	O
*	O
swi_control_script_posix_result	(*(struct(struct(char,char,int,*(char),long,long,int,*(struct`),*(struct`),int,char,*(char)),int,int,*(struct(struct`,*`,int,*`,int,int,int,int)),*(void),int)))->(*(char))
(	O
SWI_CONTROL_SCRIPT	struct(struct(char,char,int,*(char),long,long,int,*(struct(*(char),*(void),array(*(void)),*(int),int,struct(*`,int,int),*((*`,*`,int)->(*`)))),*(struct(*(char),*(char),*(char),int,*(struct`),int,int,*(struct`),*(struct`),*(void),int)),int,char,*(char)),int,int,*(struct(struct(char,char,int,*(char),long,long,int,*(struct`),*(struct`),int,char,*(char)),*(char),int,*(char),int,int,int,int)),*(void),int)
*	O
s	*(struct(*(char),*(char),int,int,int,char,int))
)	O
{	O
if	O
(	O
s	*(struct(*(char),*(char),int,int,int,char,int))
->	O
resultM	int
==	O
SWI_RESULT_UNDEFINED	O
||	O
s	*(struct(*(char),*(char),int,int,int,char,int))
->	O
resultM	int
<	O
0	int
)	O
{	O
return	O
SW_RESULT_NONE	*(char)
;	O
}	O
else	O
if	O
(	O
s	*(struct(*(char),*(char),int,int,int,char,int))
->	O
resultM	int
==	O
SW_SUCCESS	int
)	O
{	O
return	O
SW_RESULT_SUCCESS	*(char)
;	O
}	O
else	O
if	O
(	O
s	*(struct(*(char),*(char),int,int,int,char,int))
->	O
resultM	int
==	O
SW_ERROR	int
)	O
{	O
return	O
SW_RESULT_FAILURE	*(char)
;	O
}	O
else	O
if	O
(	O
s	*(struct(*(char),*(char),int,int,int,char,int))
->	O
resultM	int
==	O
SW_WARNING	int
)	O
{	O
return	O
SW_RESULT_WARNING	*(char)
;	O
}	O
else	O
if	O
(	O
s	*(struct(*(char),*(char),int,int,int,char,int))
->	O
resultM	int
==	O
SW_NOTE	int
)	O
{	O
return	O
SW_RESULT_WARNING	*(char)
;	O
}	O
else	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s: internal error: bad result code: [%d]\n"	*(char)
,	O
swlib_utilname_get	()->(*(char))
(	O
)	O
,	O
s	*(struct(*(char),*(char),int,int,int,char,int))
->	O
resultM	int
)	O
;	O
return	O
SW_RESULT_FAILURE	*(char)
;	O
}	O
}	O
int	O
swi_afile_write_script_cases	(*(struct(array(*(struct(struct(char,char,int,*(char),long,long,int,*(struct(*`,*`,array(*(void)),*`,int,struct`,*`)),*(struct(*`,*`,*`,int,*`,int,int,*`,*`,*`,int)),int,char,*(char)),int,int,*(struct(struct(char,char,int,*`,long,long,int,*`,*`,int,char,*`),*(char),int,*(char),int,int,int,int)),*(void),int))))),*(struct(*(char),*(char),int,int,int,char,int)),*(char))->(int)
(	O
SWI_SCRIPTS	struct(array(*(struct(struct(char,char,int,*(char),long,long,int,*(struct(*`,*`,array(*(void)),*`,int,struct`,*`)),*(struct(*`,*`,*`,int,*`,int,int,*`,*`,*`,int)),int,char,*(char)),int,int,*(struct(struct(char,char,int,*`,long,long,int,*`,*`,int,char,*`),*(char),int,*(char),int,int,int,int)),*(void),int))))
*	O
scripts	*(struct(array(*(struct(struct(char,char,int,*(char),long,long,int,*(struct(*`,*`,array(*(void)),*`,int,struct`,*`)),*(struct(*`,*`,*`,int,*`,int,int,*`,*`,*`,int)),int,char,*(char)),int,int,*(struct(struct(char,char,int,*`,long,long,int,*`,*`,int,char,*`),*(char),int,*(char),int,int,int,int)),*(void),int)))))
,	O
STROB	struct(*(char),*(char),int,int,int,char,int)
*	O
buf	*(struct(*(char),*(char),int,int,int,char,int))
,	O
char	O
*	O
installed_isc_path	*(char)
)	O
{	O
int	O
i	int
;	O
char	O
*	O
lslash	*(char)
;	O
char	O
*	O
name	*(char)
;	O
char	O
*	O
interpreter	*(char)
;	O
G_CONTROL_SCRIPT	struct(int,*(char))
*	O
script_ent	*(struct(int,*(char)))
;	O
SWI_CONTROL_SCRIPT	struct(struct(char,char,int,*(char),long,long,int,*(struct(*(char),*(void),array(*(void)),*(int),int,struct(*`,int,int),*((*`,*`,int)->(*`)))),*(struct(*(char),*(char),*(char),int,*(struct`),int,int,*(struct`),*(struct`),*(void),int)),int,char,*(char)),int,int,*(struct(struct(char,char,int,*(char),long,long,int,*(struct`),*(struct`),int,char,*(char)),*(char),int,*(char),int,int,int,int)),*(void),int)
*	O
control_script	*(struct(struct(char,char,int,*(char),long,long,int,*(struct(*`,*`,array(*(void)),*`,int,struct`,*`)),*(struct(*`,*`,*`,int,*`,int,int,*`,*`,*`,int)),int,char,*(char)),int,int,*(struct(struct(char,char,int,*`,long,long,int,*`,*`,int,char,*`),*(char),int,*(char),int,int,int,int)),*(void),int))
;	O
STROB	struct(*(char),*(char),int,int,int,char,int)
*	O
vintbuf	*(struct(*(char),*(char),int,int,int,char,int))
;	O
vintbuf	*(struct(*(char),*(char),int,int,int,char,int))
=	O
strob_open	(long)->(*(struct(*(char),*(char),int,int,int,char,int)))
(	O
10	int
)	O
;	O
script_ent	*(struct(int,*(char)))
=	O
pp_g_scripts	array(struct(int,*(char)))
;	O
while	O
(	O
(	O
script_ent	*(struct(int,*(char)))
)	O
->	O
tagM	*(char)
)	O
{	O
(	O
script_ent	*(struct(int,*(char)))
)	O
->	O
did_itM	int
=	O
0	int
;	O
script_ent	*(struct(int,*(char)))
++	O
;	O
}	O
strob_sprintf	(*(struct(*(char),*(char),int,int,int,char,int)),int,*(char))->(int)
(	O
buf	*(struct(*(char),*(char),int,int,int,char,int))
,	O
STROB_DO_APPEND	int
,	O
"		case \"${SWBCS_SCRIPT_TAG}\" in\n"	*(char)
)	O
;	O
SWLIB_ASSERT	O
(	O
installed_isc_path	*(char)
!=	O
NULL	O
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
SWI_MAX_OBJ	int
;	O
i	int
++	O
)	O
{	O
script_ent	*(struct(int,*(char)))
=	O
pp_g_scripts	array(struct(int,*(char)))
;	O
control_script	*(struct(struct(char,char,int,*(char),long,long,int,*(struct(*`,*`,array(*(void)),*`,int,struct`,*`)),*(struct(*`,*`,*`,int,*`,int,int,*`,*`,*`,int)),int,char,*(char)),int,int,*(struct(struct(char,char,int,*`,long,long,int,*`,*`,int,char,*`),*(char),int,*(char),int,int,int,int)),*(void),int))
=	O
scripts	*(struct(array(*(struct(struct(char,char,int,*(char),long,long,int,*(struct(*`,*`,array(*(void)),*`,int,struct`,*`)),*(struct(*`,*`,*`,int,*`,int,int,*`,*`,*`,int)),int,char,*(char)),int,int,*(struct(struct(char,char,int,*`,long,long,int,*`,*`,int,char,*`),*(char),int,*(char),int,int,int,int)),*(void),int)))))
->	O
swi_coM	array(*(struct(struct(char,char,int,*(char),long,long,int,*(struct(*`,*`,array(*(void)),*`,int,struct`,*`)),*(struct(*`,*`,*`,int,*`,int,int,*`,*`,*`,int)),int,char,*(char)),int,int,*(struct(struct(char,char,int,*`,long,long,int,*`,*`,int,char,*`),*(char),int,*(char),int,int,int,int)),*(void),int)))
[	O
i	int
]	O
;	O
if	O
(	O
control_script	*(struct(struct(char,char,int,*(char),long,long,int,*(struct(*`,*`,array(*(void)),*`,int,struct`,*`)),*(struct(*`,*`,*`,int,*`,int,int,*`,*`,*`,int)),int,char,*(char)),int,int,*(struct(struct(char,char,int,*`,long,long,int,*`,*`,int,char,*`),*(char),int,*(char),int,int,int,int)),*(void),int))
)	O
{	O
set_is_ieee_control_script	(*(char),int)->(int)
(	O
control_script	*(struct(struct(char,char,int,*(char),long,long,int,*(struct(*`,*`,array(*(void)),*`,int,struct`,*`)),*(struct(*`,*`,*`,int,*`,int,int,*`,*`,*`,int)),int,char,*(char)),int,int,*(struct(struct(char,char,int,*`,long,long,int,*`,*`,int,char,*`),*(char),int,*(char),int,int,int,int)),*(void),int))
->	O
baseM	struct(char,char,int,*(char),long,long,int,*(struct(*(char),*(void),array(*(void)),*(int),int,struct(*(int),int,int),*((*`,*`,int)->(*`)))),*(struct(*(char),*(char),*(char),int,*(struct(*`,int,int,long,int)),int,int,*(struct(array(char),array(char),array(char),array(char),int,*`,*`)),*(struct(*`,*`,*`,*`,*`,char,char,char,char,int)),*(void),int)),int,char,*(char))
.	O
b_tagM	*(char)
,	O
1	int
)	O
;	O
interpreter	*(char)
=	O
get_attribute_from_INFO_object	(*(struct(struct(char,char,int,*(char),long,long,int,*(struct`),*(struct`),int,char,*(char)),int,int,*(struct(struct`,*`,int,*`,int,int,int,int)),*(void),int)),*(char))->(*(char))
(	O
control_script	*(struct(struct(char,char,int,*(char),long,long,int,*(struct(*`,*`,array(*(void)),*`,int,struct`,*`)),*(struct(*`,*`,*`,int,*`,int,int,*`,*`,*`,int)),int,char,*(char)),int,int,*(struct(struct(char,char,int,*`,long,long,int,*`,*`,int,char,*`),*(char),int,*(char),int,int,int,int)),*(void),int))
,	O
SW_A_interpreter	*(char)
)	O
;	O
if	O
(	O
interpreter	*(char)
==	O
NULL	O
)	O
{	O
interpreter	*(char)
=	O
""	*(char)
;	O
}	O
if	O
(	O
strlen	(*(char))->(long)
(	O
interpreter	*(char)
)	O
&&	O
swlib_check_clean_path	(*(char))->(int)
(	O
interpreter	*(char)
)	O
)	O
{	O
interpreter	*(char)
=	O
""	*(char)
;	O
}	O
if	O
(	O
strlen	(*(char))->(long)
(	O
interpreter	*(char)
)	O
)	O
{	O
strob_sprintf	(*(struct(*(char),*(char),int,int,int,char,int)),int,*(char))->(int)
(	O
vintbuf	*(struct(*(char),*(char),int,int,int,char,int))
,	O
STROB_NO_APPEND	int
,	O
"INTERPRETER=\"%s\"\n"	*(char)
,	O
interpreter	*(char)
)	O
;	O
}	O
else	O
{	O
strob_strcpy	(*(struct(*(char),*(char),int,int,int,char,int)),*(char))->(*(char))
(	O
vintbuf	*(struct(*(char),*(char),int,int,int,char,int))
,	O
""	*(char)
)	O
;	O
}	O
lslash	*(char)
=	O
strrchr	(*(char),int)->(*(char))
(	O
control_script	*(struct(struct(char,char,int,*(char),long,long,int,*(struct(*`,*`,array(*(void)),*`,int,struct`,*`)),*(struct(*`,*`,*`,int,*`,int,int,*`,*`,*`,int)),int,char,*(char)),int,int,*(struct(struct(char,char,int,*`,long,long,int,*`,*`,int,char,*`),*(char),int,*(char),int,int,int,int)),*(void),int))
->	O
afileM	*(struct(struct(char,char,int,*(char),long,long,int,*(struct(*`,*`,array(*(void)),*`,int,struct`,*`)),*(struct(*`,*`,*`,int,*`,int,int,*`,*`,*`,int)),int,char,*(char)),*(char),int,*(char),int,int,int,int))
->	O
pathnameM	*(char)
,	O
'/'	O
)	O
;	O
SWLIB_ASSERT	O
(	O
lslash	*(char)
!=	O
NULL	O
)	O
;	O
*	O
lslash	*(char)
=	O
'\0'	O
;	O
name	*(char)
=	O
lslash	*(char)
+	O
1	int
;	O
strob_sprintf	(*(struct(*(char),*(char),int,int,int,char,int)),int,*(char))->(int)
(	O
buf	*(struct(*(char),*(char),int,int,int,char,int))
,	O
STROB_DO_APPEND	int
,	O
"\t\t%s)\n"	*(char)
"\t\t\texport SW_CONTROL_TAG=\"%s\"\n"	*(char)
"\t\t\t%s\n"	*(char)
"\t\tcase \"$SW_CATALOG\" in\n"	*(char)
"\t\t\t  # User specified SW_CATALOG as really, really absolute\n"	*(char)
"\t\t\t/*) export SW_CONTROL_DIRECTORY=\"${SW_CATALOG}/%s/%s\"\n"	*(char)
"\t\t\t;;\n"	*(char)
"\t\t\t  # Normal case\n"	*(char)
"\t\t\t*) export SW_CONTROL_DIRECTORY=\"${SW_ROOT_DIRECTORY}/${SW_CATALOG}/%s/%s\"\n"	*(char)
"\t\t\t;;\n"	*(char)
"\t\tesac\n"	*(char)
"\t\t\tSWBCS_SCRIPT_NAME=\"%s\"\n"	*(char)
"\t\t\t;;\n"	*(char)
,	O
control_script	*(struct(struct(char,char,int,*(char),long,long,int,*(struct(*`,*`,array(*(void)),*`,int,struct`,*`)),*(struct(*`,*`,*`,int,*`,int,int,*`,*`,*`,int)),int,char,*(char)),int,int,*(struct(struct(char,char,int,*`,long,long,int,*`,*`,int,char,*`),*(char),int,*(char),int,int,int,int)),*(void),int))
->	O
baseM	struct(char,char,int,*(char),long,long,int,*(struct(*(char),*(void),array(*(void)),*(int),int,struct(*(int),int,int),*((*`,*`,int)->(*`)))),*(struct(*(char),*(char),*(char),int,*(struct(*`,int,int,long,int)),int,int,*(struct(array(char),array(char),array(char),array(char),int,*`,*`)),*(struct(*`,*`,*`,*`,*`,char,char,char,char,int)),*(void),int)),int,char,*(char))
.	O
b_tagM	*(char)
,	O
control_script	*(struct(struct(char,char,int,*(char),long,long,int,*(struct(*`,*`,array(*(void)),*`,int,struct`,*`)),*(struct(*`,*`,*`,int,*`,int,int,*`,*`,*`,int)),int,char,*(char)),int,int,*(struct(struct(char,char,int,*`,long,long,int,*`,*`,int,char,*`),*(char),int,*(char),int,int,int,int)),*(void),int))
->	O
baseM	struct(char,char,int,*(char),long,long,int,*(struct(*(char),*(void),array(*(void)),*(int),int,struct(*(int),int,int),*((*`,*`,int)->(*`)))),*(struct(*(char),*(char),*(char),int,*(struct(*`,int,int,long,int)),int,int,*(struct(array(char),array(char),array(char),array(char),int,*`,*`)),*(struct(*`,*`,*`,*`,*`,char,char,char,char,int)),*(void),int)),int,char,*(char))
.	O
b_tagM	*(char)
,	O
strob_str	(*(struct(*(char),*(char),int,int,int,char,int)))->(*(char))
(	O
vintbuf	*(struct(*(char),*(char),int,int,int,char,int))
)	O
,	O
SWINSTALL_INCAT_NAME	*(char)
,	O
control_script	*(struct(struct(char,char,int,*(char),long,long,int,*(struct(*`,*`,array(*(void)),*`,int,struct`,*`)),*(struct(*`,*`,*`,int,*`,int,int,*`,*`,*`,int)),int,char,*(char)),int,int,*(struct(struct(char,char,int,*`,long,long,int,*`,*`,int,char,*`),*(char),int,*(char),int,int,int,int)),*(void),int))
->	O
afileM	*(struct(struct(char,char,int,*(char),long,long,int,*(struct(*`,*`,array(*(void)),*`,int,struct`,*`)),*(struct(*`,*`,*`,int,*`,int,int,*`,*`,*`,int)),int,char,*(char)),*(char),int,*(char),int,int,int,int))
->	O
pathnameM	*(char)
,	O
SWINSTALL_INCAT_NAME	*(char)
,	O
control_script	*(struct(struct(char,char,int,*(char),long,long,int,*(struct(*`,*`,array(*(void)),*`,int,struct`,*`)),*(struct(*`,*`,*`,int,*`,int,int,*`,*`,*`,int)),int,char,*(char)),int,int,*(struct(struct(char,char,int,*`,long,long,int,*`,*`,int,char,*`),*(char),int,*(char),int,int,int,int)),*(void),int))
->	O
afileM	*(struct(struct(char,char,int,*(char),long,long,int,*(struct(*`,*`,array(*(void)),*`,int,struct`,*`)),*(struct(*`,*`,*`,int,*`,int,int,*`,*`,*`,int)),int,char,*(char)),*(char),int,*(char),int,int,int,int))
->	O
pathnameM	*(char)
,	O
name	*(char)
)	O
;	O
*	O
lslash	*(char)
=	O
'/'	O
;	O
}	O
else	O
{	O
break	O
;	O
}	O
}	O
make_case_pattern_for_unused_tags	(*(struct(*(char),*(char),int,int,int,char,int)))->(void)
(	O
buf	*(struct(*(char),*(char),int,int,int,char,int))
)	O
;	O
strob_sprintf	(*(struct(*(char),*(char),int,int,int,char,int)),int,*(char))->(int)
(	O
buf	*(struct(*(char),*(char),int,int,int,char,int))
,	O
STROB_DO_APPEND	int
,	O
"		*)\n"	*(char)
"			echo \"$0: invalid tag\" 1>&2\n"	*(char)
"			exit 1\n"	*(char)
"			;;\n"	*(char)
)	O
;	O
strob_sprintf	(*(struct(*(char),*(char),int,int,int,char,int)),int,*(char))->(int)
(	O
buf	*(struct(*(char),*(char),int,int,int,char,int))
,	O
STROB_DO_APPEND	int
,	O
"		esac\n"	*(char)
)	O
;	O
strob_close	(*(struct(*(char),*(char),int,int,int,char,int)))->(int)
(	O
vintbuf	*(struct(*(char),*(char),int,int,int,char,int))
)	O
;	O
return	O
0	int
;	O
}	O
int	O
swi_afile_is_ieee_control_script	(*(char))->(int)
(	O
char	O
*	O
pathname	*(char)
)	O
{	O
int	O
ret	int
;	O
ret	int
=	O
set_is_ieee_control_script	(*(char),int)->(int)
(	O
pathname	*(char)
,	O
0	int
)	O
;	O
return	O
ret	int
;	O
}	O
