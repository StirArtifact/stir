char	O
*	O
tilde_expand_word	(*(char))->(*(char))
(	O
const	O
char	O
*	O
filename	*(char)
)	O
{	O
char	O
*	O
dirname	*(char)
=	O
filename	*(char)
?	O
xstrdup	(*(char))->(*(char))
(	O
filename	*(char)
)	O
:	O
NULL	O
;	O
if	O
(	O
dirname	*(char)
&&	O
*	O
dirname	*(char)
==	O
'~'	O
)	O
{	O
char	O
*	O
temp_name	*(char)
;	O
if	O
(	O
!	O
dirname	*(char)
[	O
1	int
]	O
||	O
IS_SLASH	O
(	O
dirname	*(char)
[	O
1	int
]	O
)	O
)	O
{	O
char	O
*	O
temp_home	*(char)
=	O
getenv	(*(char))->(*(char))
(	O
"HOME"	*(char)
)	O
;	O
if	O
(	O
!	O
temp_home	*(char)
)	O
{	O
struct	O
passwd	struct(*(char),*(char),int,int,*(char),*(char),*(char))
*	O
entry	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
;	O
entry	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
=	O
(	O
struct	O
passwd	struct(*(char),*(char),int,int,*(char),*(char),*(char))
*	O
)	O
getpwuid	(int)->(*(struct(*(char),*(char),int,int,*(char),*(char),*(char))))
(	O
getuid	()->(int)
(	O
)	O
)	O
;	O
if	O
(	O
entry	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
)	O
temp_home	*(char)
=	O
entry	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
->	O
pw_dir	*(char)
;	O
}	O
temp_name	*(char)
=	O
xmalloc	(long)->(*(void))
(	O
1	int
+	O
strlen	(*(char))->(long)
(	O
&	O
dirname	*(char)
[	O
1	int
]	O
)	O
+	O
(	O
temp_home	*(char)
?	O
strlen	(*(char))->(long)
(	O
temp_home	*(char)
)	O
:	O
0	int
)	O
)	O
;	O
if	O
(	O
temp_home	*(char)
)	O
strcpy	(*(char),*(char))->(*(char))
(	O
temp_name	*(char)
,	O
temp_home	*(char)
)	O
;	O
else	O
temp_name	*(char)
[	O
0	int
]	O
=	O
0	int
;	O
strcat	(*(char),*(char))->(*(char))
(	O
temp_name	*(char)
,	O
&	O
dirname	*(char)
[	O
1	int
]	O
)	O
;	O
free	(*(void))->(void)
(	O
dirname	*(char)
)	O
;	O
dirname	*(char)
=	O
xstrdup	(*(char))->(*(char))
(	O
temp_name	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
temp_name	*(char)
)	O
;	O
}	O
else	O
{	O
struct	O
passwd	struct(*(char),*(char),int,int,*(char),*(char),*(char))
*	O
user_entry	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
;	O
char	O
*	O
username	*(char)
=	O
xmalloc	(long)->(*(void))
(	O
257	int
)	O
;	O
int	O
i	int
,	O
c	int
;	O
for	O
(	O
i	int
=	O
1	int
;	O
(	O
c	int
=	O
dirname	*(char)
[	O
i	int
]	O
)	O
;	O
i	int
++	O
)	O
{	O
if	O
(	O
IS_SLASH	O
(	O
c	int
)	O
)	O
break	O
;	O
else	O
username	*(char)
[	O
i	int
-	O
1	int
]	O
=	O
c	int
;	O
}	O
username	*(char)
[	O
i	int
-	O
1	int
]	O
=	O
0	int
;	O
user_entry	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
=	O
(	O
struct	O
passwd	struct(*(char),*(char),int,int,*(char),*(char),*(char))
*	O
)	O
getpwnam	(*(char))->(*(struct(*(char),*(char),int,int,*(char),*(char),*(char))))
(	O
username	*(char)
)	O
;	O
if	O
(	O
user_entry	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
)	O
{	O
temp_name	*(char)
=	O
xmalloc	(long)->(*(void))
(	O
1	int
+	O
strlen	(*(char))->(long)
(	O
user_entry	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
->	O
pw_dir	*(char)
)	O
+	O
strlen	(*(char))->(long)
(	O
&	O
dirname	*(char)
[	O
i	int
]	O
)	O
)	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
temp_name	*(char)
,	O
user_entry	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
->	O
pw_dir	*(char)
)	O
;	O
strcat	(*(char),*(char))->(*(char))
(	O
temp_name	*(char)
,	O
&	O
dirname	*(char)
[	O
i	int
]	O
)	O
;	O
free	(*(void))->(void)
(	O
dirname	*(char)
)	O
;	O
dirname	*(char)
=	O
xstrdup	(*(char))->(*(char))
(	O
temp_name	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
temp_name	*(char)
)	O
;	O
}	O
endpwent	()->(void)
(	O
)	O
;	O
free	(*(void))->(void)
(	O
username	*(char)
)	O
;	O
}	O
}	O
return	O
dirname	*(char)
;	O
}	O
