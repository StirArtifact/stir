static	O
char	O
*	O
months	array(*(char))
[	O
]	O
=	O
{	O
"Jan"	*(char)
,	O
"Feb"	*(char)
,	O
"Mar"	*(char)
,	O
"Apr"	*(char)
,	O
"May"	*(char)
,	O
"Jun"	*(char)
,	O
"Jul"	*(char)
,	O
"Aug"	*(char)
,	O
"Sep"	*(char)
,	O
"Oct"	*(char)
,	O
"Nov"	*(char)
,	O
"Dec"	*(char)
}	O
;	O
char	O
*	O
program_name	*(char)
;	O
int	O
debugging_enabled	int
=	O
0	int
;	O
long	O
time_warp_leniency	long
=	O
60	int
;	O
long	O
time_warp_suspicious	long
=	O
31536000	int
;	O
int	O
print_file_problems	int
=	O
0	int
;	O
int	O
print_year	int
=	O
0	int
;	O
time_t	long
last_time	long
=	O
0	int
;	O
int	O
nasty_reboot	int
=	O
0	int
;	O
int	O
nasty_supplant	int
=	O
0	int
;	O
int	O
nasty_time_warp	int
=	O
0	int
;	O
int	O
print_all_days	int
=	O
0	int
;	O
time_t	long
next_midnight	long
;	O
int	O
print_individual_totals	int
=	O
0	int
;	O
int	O
print_midnight_totals	int
=	O
0	int
;	O
int	O
print_zero_totals	int
=	O
0	int
;	O
struct	O
hashtab	struct(long,long,long,*(*(struct(*(void),int,int,*(void),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int))))),int)
*	O
user_totals	*(struct(long,long,long,*(*(struct(*`,int,int,*`,*`,*`,*`))),int))
=	O
NULL	O
;	O
struct	O
user_data	struct(long)
{	O
unsigned	O
long	O
time	struct(long,long)
;	O
}	O
;	O
struct	O
hashtab	struct(long,long,long,*(*(struct(*(void),int,int,*(void),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int))))),int)
*	O
names	*(struct(long,long,long,*(*(struct(*`,int,int,*`,*`,*`,*`))),int))
=	O
NULL	O
;	O
struct	O
hashtab	struct(long,long,long,*(*(struct(*(void),int,int,*(void),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int))))),int)
*	O
login_table	*(struct(long,long,long,*(*(struct(*`,int,int,*`,*`,*`,*`))),int))
;	O
struct	O
login_data	struct(array(char),long)
{	O
char	O
ut_name	O
[	O
NAME_LEN	O
]	O
;	O
time_t	long
time	struct(long,long)
;	O
}	O
;	O
void	O
do_statistics	(*(char))->(void)
(	O
char	O
*	O
)	O
;	O
void	O
log_in	(*(struct(short,int,array(char),array(char),array(char),array(char),struct(short,short),int,struct(int,int),array(int),array(char))))->(void)
(	O
struct	O
utmp	struct(short,int,array(char),array(char),array(char),array(char),struct(short,short),int,struct(int,int),array(int),array(char))
*	O
)	O
;	O
void	O
update_user_time	(*(char),long,*(char))->(void)
(	O
char	O
*	O
,	O
time_t	long
,	O
char	O
*	O
)	O
;	O
void	O
log_out	(*(struct(short,int,array(char),array(char),array(char),array(char),struct(short,short),int,struct(int,int),array(int),array(char))))->(void)
(	O
struct	O
utmp	struct(short,int,array(char),array(char),array(char),array(char),struct(short,short),int,struct(int,int),array(int),array(char))
*	O
)	O
;	O
void	O
log_everyone_out	(long,int,int,*(char))->(void)
(	O
time_t	long
,	O
int	O
,	O
int	O
,	O
char	O
*	O
)	O
;	O
void	O
parse_entries	()->(void)
(	O
void	O
)	O
;	O
void	O
do_totals	(*(long),long,int,int,*(char))->(void)
(	O
time_t	long
*	O
,	O
time_t	long
,	O
int	O
,	O
int	O
,	O
char	O
*	O
)	O
;	O
void	O
update_system_time	(long)->(void)
(	O
time_t	long
)	O
;	O
time_t	long
midnight_after_me	(long)->(long)
(	O
time_t	long
)	O
;	O
int	O
main	(int,array(*(char)))->(int)
(	O
int	O
argc	int
,	O
char	O
*	O
argv	array(*(char))
[	O
]	O
)	O
{	O
int	O
c	int
;	O
int	O
other_wtmp_file_specified	int
=	O
0	int
;	O
program_name	*(char)
=	O
argv	array(*(char))
[	O
0	int
]	O
;	O
utmp_init	(int)->(void)
(	O
0	int
)	O
;	O
while	O
(	O
1	int
)	O
{	O
int	O
option_index	int
=	O
0	int
;	O
static	O
struct	O
option	struct(*(char),int,*(int),int)
long_options	array(struct(*(char),int,*(int),int))
[	O
]	O
=	O
{	O
{	O
"complain"	*(char)
,	O
no_argument	int
,	O
NULL	O
,	O
1	int
}	O
,	O
{	O
"reboots"	*(char)
,	O
no_argument	int
,	O
NULL	O
,	O
2	int
}	O
,	O
{	O
"supplants"	*(char)
,	O
no_argument	int
,	O
NULL	O
,	O
3	int
}	O
,	O
{	O
"timewarps"	*(char)
,	O
no_argument	int
,	O
NULL	O
,	O
4	int
}	O
,	O
{	O
"print-zeros"	*(char)
,	O
no_argument	int
,	O
NULL	O
,	O
5	int
}	O
,	O
{	O
"debug"	*(char)
,	O
no_argument	int
,	O
NULL	O
,	O
6	int
}	O
,	O
{	O
"tw-leniency"	*(char)
,	O
required_argument	int
,	O
NULL	O
,	O
7	int
}	O
,	O
{	O
"version"	*(char)
,	O
no_argument	int
,	O
NULL	O
,	O
8	int
}	O
,	O
{	O
"help"	*(char)
,	O
no_argument	int
,	O
NULL	O
,	O
9	int
}	O
,	O
{	O
"daily-totals"	*(char)
,	O
no_argument	int
,	O
NULL	O
,	O
10	int
}	O
,	O
{	O
"individual-totals"	*(char)
,	O
no_argument	int
,	O
NULL	O
,	O
11	int
}	O
,	O
{	O
"file"	*(char)
,	O
required_argument	int
,	O
NULL	O
,	O
12	int
}	O
,	O
{	O
"compatibility"	*(char)
,	O
no_argument	int
,	O
NULL	O
,	O
13	int
}	O
,	O
{	O
"print-year"	*(char)
,	O
no_argument	int
,	O
NULL	O
,	O
14	int
}	O
,	O
{	O
"all-days"	*(char)
,	O
no_argument	int
,	O
NULL	O
,	O
15	int
}	O
,	O
{	O
"tw-suspicious"	*(char)
,	O
required_argument	int
,	O
NULL	O
,	O
16	int
}	O
,	O
{	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
}	O
}	O
;	O
c	int
=	O
getopt_long	(int,*(*(char)),*(char),*(struct(*(char),int,*(int),int)),*(int))->(int)
(	O
argc	int
,	O
argv	array(*(char))
,	O
"adf:hpVyz"	*(char)
,	O
long_options	array(struct(*(char),int,*(int),int))
,	O
&	O
option_index	int
)	O
;	O
if	O
(	O
c	int
==	O
EOF	O
)	O
break	O
;	O
switch	O
(	O
c	int
)	O
{	O
case	O
1	int
:	O
print_file_problems	int
=	O
1	int
;	O
break	O
;	O
case	O
2	int
:	O
nasty_reboot	int
=	O
1	int
;	O
break	O
;	O
case	O
3	int
:	O
nasty_supplant	int
=	O
1	int
;	O
break	O
;	O
case	O
4	int
:	O
nasty_time_warp	int
=	O
1	int
;	O
break	O
;	O
case	O
'z'	O
:	O
case	O
5	int
:	O
print_zero_totals	int
=	O
1	int
;	O
break	O
;	O
case	O
6	int
:	O
debugging_enabled	int
=	O
1	int
;	O
print_file_problems	int
=	O
1	int
;	O
break	O
;	O
case	O
7	int
:	O
time_warp_leniency	long
=	O
strtol	(*(char),*(*(char)),int)->(long)
(	O
optarg	*(char)
,	O
(	O
char	O
*	O
*	O
)	O
NULL	O
,	O
10	int
)	O
;	O
if	O
(	O
time_warp_leniency	long
<	O
0	int
)	O
fatal	(*(char))->(void)
(	O
"time warp leniency value has to be non-negative"	*(char)
)	O
;	O
break	O
;	O
case	O
'V'	O
:	O
case	O
8	int
:	O
(	O
void	O
)	O
printf	(*(char))->(int)
(	O
"%s: GNU Accounting Utilities (release %s)\n"	*(char)
,	O
program_name	*(char)
,	O
VERSION_STRING	*(char)
)	O
;	O
exit	(int)->(void)
(	O
EXIT_SUCCESS	int
)	O
;	O
case	O
10	int
:	O
case	O
'd'	O
:	O
print_midnight_totals	int
=	O
1	int
;	O
break	O
;	O
case	O
11	int
:	O
case	O
'p'	O
:	O
print_individual_totals	int
=	O
1	int
;	O
break	O
;	O
case	O
12	int
:	O
case	O
'f'	O
:	O
add_utmp_file	(*(char))->(void)
(	O
optarg	*(char)
)	O
;	O
other_wtmp_file_specified	int
=	O
1	int
;	O
break	O
;	O
case	O
13	int
:	O
nasty_time_warp	int
=	O
1	int
;	O
nasty_supplant	int
=	O
1	int
;	O
nasty_reboot	int
=	O
1	int
;	O
break	O
;	O
case	O
'y'	O
:	O
case	O
14	int
:	O
print_year	int
=	O
1	int
;	O
break	O
;	O
case	O
'a'	O
:	O
case	O
15	int
:	O
print_all_days	int
=	O
1	int
;	O
break	O
;	O
case	O
16	int
:	O
time_warp_suspicious	long
=	O
strtol	(*(char),*(*(char)),int)->(long)
(	O
optarg	*(char)
,	O
(	O
char	O
*	O
*	O
)	O
NULL	O
,	O
10	int
)	O
;	O
if	O
(	O
time_warp_suspicious	long
<	O
0	int
)	O
fatal	(*(char))->(void)
(	O
"time warp suspicious value has to be non-negative"	*(char)
)	O
;	O
if	O
(	O
time_warp_suspicious	long
<=	O
time_warp_leniency	long
)	O
fatal	(*(char))->(void)
(	O
"time warp suspicious value has to greater than the time warp leniency value"	*(char)
)	O
;	O
break	O
;	O
case	O
'h'	O
:	O
case	O
9	int
:	O
default	O
:	O
give_usage	()->(void)
(	O
)	O
;	O
exit	(int)->(void)
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
}	O
if	O
(	O
optind	int
<	O
argc	int
)	O
{	O
names	*(struct(long,long,long,*(*(struct(*`,int,int,*`,*`,*`,*`))),int))
=	O
hashtab_init	(int)->(*(struct(long,long,long,*(*(struct`)),int)))
(	O
0	int
)	O
;	O
while	O
(	O
optind	int
<	O
argc	int
)	O
hashtab_create	(*(struct(long,long,long,*(*(struct`)),int)),*(void),int)->(*(struct(*(void),int,int,*(void),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))))
(	O
names	*(struct(long,long,long,*(*(struct(*`,int,int,*`,*`,*`,*`))),int))
,	O
argv	array(*(char))
[	O
optind	int
++	O
]	O
,	O
0	int
)	O
;	O
if	O
(	O
debugging_enabled	int
)	O
hashtab_dump_keys	(*(struct(long,long,long,*(*(struct`)),int)),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(void)
(	O
names	*(struct(long,long,long,*(*(struct(*`,int,int,*`,*`,*`,*`))),int))
,	O
stddebug	O
)	O
;	O
}	O
if	O
(	O
!	O
other_wtmp_file_specified	int
)	O
add_utmp_file	(*(char))->(void)
(	O
WTMP_FILE_LOC	*(char)
)	O
;	O
user_totals	*(struct(long,long,long,*(*(struct(*`,int,int,*`,*`,*`,*`))),int))
=	O
hashtab_init	(int)->(*(struct(long,long,long,*(*(struct`)),int)))
(	O
0	int
)	O
;	O
login_table	*(struct(long,long,long,*(*(struct(*`,int,int,*`,*`,*`,*`))),int))
=	O
hashtab_init	(int)->(*(struct(long,long,long,*(*(struct`)),int)))
(	O
0	int
)	O
;	O
parse_entries	()->(void)
(	O
)	O
;	O
{	O
time_t	long
now	long
=	O
time	struct(long,long)
(	O
(	O
time_t	long
*	O
)	O
0	int
)	O
;	O
if	O
(	O
now	long
<	O
last_time	long
)	O
now	long
=	O
last_time	long
;	O
do_totals	(*(long),long,int,int,*(char))->(void)
(	O
&	O
next_midnight	long
,	O
now	long
,	O
TRUE	int
,	O
TRUE	int
,	O
"midnight logout"	*(char)
)	O
;	O
log_everyone_out	(long,int,int,*(char))->(void)
(	O
now	long
,	O
TRUE	int
,	O
FALSE	int
,	O
"catch-up"	*(char)
)	O
;	O
}	O
do_statistics	(*(char))->(void)
(	O
print_midnight_totals	int
?	O
(	O
print_year	int
?	O
"Today\t"	*(char)
:	O
"Today"	*(char)
)	O
:	O
""	*(char)
)	O
;	O
exit	(int)->(void)
(	O
EXIT_SUCCESS	int
)	O
;	O
}	O
void	O
give_usage	()->(void)
(	O
void	O
)	O
{	O
(	O
void	O
)	O
printf	(*(char))->(int)
(	O
"\n"	*(char)
"Usage: %s [OPTION] ...\n"	*(char)
"\n"	*(char)
"OPTIONS:\n"	*(char)
"  -d, --daily-totals        Print totals for each day\n"	*(char)
"  -p, --individual-totals   Print time totals for each user\n"	*(char)
"  -f, --file <file>         Read from <file>\n"	*(char)
"  --complain                Print errors for whatever problem\n"	*(char)
"  --reboots                 Count the time between login and reboot\n"	*(char)
"  --supplants               Count the time between logins on the terminal\n"	*(char)
"  --timewarps               Count the time between login and time warp\n"	*(char)
"  --compatibility           Shortcut for --reboots --supplants --timewarps\n"	*(char)
"  -a, --all-days            Do not skip days without login activity\n"	*(char)
"  --tw-leniency <value>     Set the time warp leniency <value> in seconds\n"	*(char)
"  --tw-suspicious <value>   Set the time warp suspicious <value> in seconds\n"	*(char)
"  --print-year              Print year when displaying dates\n"	*(char)
"  --print-zeros             Don't suppress zeros in category totals\n"	*(char)
"  --debug                   Print verbose internal information\n"	*(char)
"  -V, --version             Show version and exit\n"	*(char)
"  -h, --help                Show help and exit\n"	*(char)
,	O
program_name	*(char)
)	O
;	O
print_wtmp_file_location	()->(void)
(	O
)	O
;	O
}	O
void	O
update_system_time	(long)->(void)
(	O
time_t	long
the_time	long
)	O
{	O
struct	O
hashtab_order	struct(int,*(struct),*(struct))
ho	*(struct(int,*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(long,long,long,*(*`),int))))
;	O
struct	O
hashtab_elem	struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct))),*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct))),*(struct))
*	O
he	*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(long,long,long,*(*`),int))))
;	O
for	O
(	O
he	*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(long,long,long,*(*`),int))))
=	O
hashtab_first	(*(struct(long,long,long,*(*(struct`)),int)),*(struct(int,*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))))->(*(struct(*(void),int,int,*(void),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))))
(	O
login_table	*(struct(long,long,long,*(*(struct(*`,int,int,*`,*`,*`,*`))),int))
,	O
&	O
ho	*(struct(int,*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(long,long,long,*(*`),int))))
)	O
;	O
he	*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(long,long,long,*(*`),int))))
!=	O
NULL	O
;	O
he	*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(long,long,long,*(*`),int))))
=	O
hashtab_next	(*(struct(int,*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))))->(*(struct(*(void),int,int,*(void),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))))
(	O
&	O
ho	*(struct(int,*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(long,long,long,*(*`),int))))
)	O
)	O
{	O
struct	O
login_data	struct(array(char),long)
*	O
l	*(struct(array(char),long))
=	O
hashtab_get_value	(*(struct(*(void),int,int,*(void),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))))->(*(void))
(	O
he	*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(long,long,long,*(*`),int))))
)	O
;	O
l	*(struct(array(char),long))
->	O
time	struct(long,long)
+=	O
the_time	long
;	O
}	O
}	O
void	O
log_everyone_out	(long,int,int,*(char))->(void)
(	O
time_t	long
the_time	long
,	O
int	O
update_time_flag	int
,	O
int	O
change_login_flag	int
,	O
char	O
*	O
debug_str	*(char)
)	O
{	O
struct	O
hashtab_order	struct(int,*(struct),*(struct))
ho	*(struct(int,*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(long,long,long,*(*`),int))))
;	O
struct	O
hashtab_elem	struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct))),*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct))),*(struct))
*	O
he	*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(long,long,long,*(*`),int))))
;	O
for	O
(	O
he	*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(long,long,long,*(*`),int))))
=	O
hashtab_first	(*(struct(long,long,long,*(*(struct`)),int)),*(struct(int,*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))))->(*(struct(*(void),int,int,*(void),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))))
(	O
login_table	*(struct(long,long,long,*(*(struct(*`,int,int,*`,*`,*`,*`))),int))
,	O
&	O
ho	*(struct(int,*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(long,long,long,*(*`),int))))
)	O
;	O
he	*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(long,long,long,*(*`),int))))
!=	O
NULL	O
;	O
he	*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(long,long,long,*(*`),int))))
=	O
hashtab_next	(*(struct(int,*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))))->(*(struct(*(void),int,int,*(void),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))))
(	O
&	O
ho	*(struct(int,*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(long,long,long,*(*`),int))))
)	O
)	O
{	O
struct	O
login_data	struct(array(char),long)
*	O
l	*(struct(array(char),long))
=	O
hashtab_get_value	(*(struct(*(void),int,int,*(void),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))))->(*(void))
(	O
he	*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(long,long,long,*(*`),int))))
)	O
;	O
if	O
(	O
update_time_flag	int
)	O
update_user_time	(*(char),long,*(char))->(void)
(	O
l	*(struct(array(char),long))
->	O
ut_name	O
,	O
the_time	long
-	O
l	*(struct(array(char),long))
->	O
time	struct(long,long)
,	O
debug_str	*(char)
)	O
;	O
if	O
(	O
change_login_flag	int
)	O
l	*(struct(array(char),long))
->	O
time	struct(long,long)
=	O
the_time	long
;	O
else	O
hashtab_delete	(*(struct(*(void),int,int,*(void),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))))->(void)
(	O
he	*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(long,long,long,*(*`),int))))
)	O
;	O
}	O
}	O
void	O
log_in	(*(struct(short,int,array(char),array(char),array(char),array(char),struct(short,short),int,struct(int,int),array(int),array(char))))->(void)
(	O
struct	O
utmp	struct(short,int,array(char),array(char),array(char),array(char),struct(short,short),int,struct(int,int),array(int),array(char))
*	O
entry	*(struct(short,int,array(char),array(char),array(char),array(char),struct(short,short),int,struct(int,int),array(int),array(char)))
)	O
{	O
struct	O
hashtab_elem	struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct))),*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct))),*(struct))
*	O
he	*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(long,long,long,*(*`),int))))
;	O
if	O
(	O
entry	*(struct(short,int,array(char),array(char),array(char),array(char),struct(short,short),int,struct(int,int),array(int),array(char)))
->	O
ut_line	array(char)
[	O
0	int
]	O
==	O
'\0'	O
)	O
{	O
if	O
(	O
print_file_problems	int
)	O
{	O
utmp_print_file_and_line	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(void)
(	O
stddebug	O
)	O
;	O
(	O
void	O
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stddebug	O
,	O
": problem: trying to hash rec with ut_line == NULL\n"	*(char)
)	O
;	O
}	O
return	O
;	O
}	O
he	*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(long,long,long,*(*`),int))))
=	O
hashtab_find	(*(struct(long,long,long,*(*(struct`)),int)),*(void),int)->(*(struct(*(void),int,int,*(void),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))))
(	O
login_table	*(struct(long,long,long,*(*(struct(*`,int,int,*`,*`,*`,*`))),int))
,	O
entry	*(struct(short,int,array(char),array(char),array(char),array(char),struct(short,short),int,struct(int,int),array(int),array(char)))
->	O
ut_line	array(char)
,	O
(	O
unsigned	O
int	O
)	O
TTY_LEN	O
)	O
;	O
if	O
(	O
he	*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(long,long,long,*(*`),int))))
!=	O
NULL	O
)	O
{	O
struct	O
login_data	struct(array(char),long)
*	O
l	*(struct(array(char),long))
=	O
hashtab_get_value	(*(struct(*(void),int,int,*(void),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))))->(*(void))
(	O
he	*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(long,long,long,*(*`),int))))
)	O
;	O
if	O
(	O
print_file_problems	int
)	O
{	O
char	O
*	O
ttyname	*(char)
=	O
hashtab_get_key	(*(struct(*(void),int,int,*(void),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))))->(*(void))
(	O
he	*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(long,long,long,*(*`),int))))
)	O
;	O
utmp_print_file_and_line	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(void)
(	O
stddebug	O
)	O
;	O
(	O
void	O
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stddebug	O
,	O
": problem: duplicate record for line `%.*s'\n"	*(char)
,	O
TTY_LEN	O
,	O
ttyname	*(char)
)	O
;	O
}	O
if	O
(	O
nasty_supplant	int
)	O
update_user_time	(*(char),long,*(char))->(void)
(	O
l	*(struct(array(char),long))
->	O
ut_name	O
,	O
entry	*(struct(short,int,array(char),array(char),array(char),array(char),struct(short,short),int,struct(int,int),array(int),array(char)))
->	O
ut_time	O
-	O
l	*(struct(array(char),long))
->	O
time	struct(long,long)
,	O
"supplant"	*(char)
)	O
;	O
(	O
void	O
)	O
strncpy	(*(char),*(char),long)->(*(char))
(	O
l	*(struct(array(char),long))
->	O
ut_name	O
,	O
entry	*(struct(short,int,array(char),array(char),array(char),array(char),struct(short,short),int,struct(int,int),array(int),array(char)))
->	O
ut_name	O
,	O
(	O
size_t	long
)	O
NAME_LEN	O
)	O
;	O
l	*(struct(array(char),long))
->	O
time	struct(long,long)
=	O
entry	*(struct(short,int,array(char),array(char),array(char),array(char),struct(short,short),int,struct(int,int),array(int),array(char)))
->	O
ut_time	O
;	O
}	O
else	O
{	O
struct	O
login_data	struct(array(char),long)
l	*(struct(array(char),long))
;	O
(	O
void	O
)	O
strncpy	(*(char),*(char),long)->(*(char))
(	O
l	*(struct(array(char),long))
.	O
ut_name	O
,	O
entry	*(struct(short,int,array(char),array(char),array(char),array(char),struct(short,short),int,struct(int,int),array(int),array(char)))
->	O
ut_name	O
,	O
(	O
size_t	long
)	O
NAME_LEN	O
)	O
;	O
l	*(struct(array(char),long))
.	O
time	struct(long,long)
=	O
entry	*(struct(short,int,array(char),array(char),array(char),array(char),struct(short,short),int,struct(int,int),array(int),array(char)))
->	O
ut_time	O
;	O
he	*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(long,long,long,*(*`),int))))
=	O
hashtab_create	(*(struct(long,long,long,*(*(struct`)),int)),*(void),int)->(*(struct(*(void),int,int,*(void),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))))
(	O
login_table	*(struct(long,long,long,*(*(struct(*`,int,int,*`,*`,*`,*`))),int))
,	O
entry	*(struct(short,int,array(char),array(char),array(char),array(char),struct(short,short),int,struct(int,int),array(int),array(char)))
->	O
ut_line	array(char)
,	O
TTY_LEN	O
)	O
;	O
hashtab_set_value	(*(struct(*(void),int,int,*(void),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))),*(void),int)->(void)
(	O
he	*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(long,long,long,*(*`),int))))
,	O
&	O
l	*(struct(array(char),long))
,	O
sizeof	O
(	O
l	*(struct(array(char),long))
)	O
)	O
;	O
}	O
}	O
void	O
log_out	(*(struct(short,int,array(char),array(char),array(char),array(char),struct(short,short),int,struct(int,int),array(int),array(char))))->(void)
(	O
struct	O
utmp	struct(short,int,array(char),array(char),array(char),array(char),struct(short,short),int,struct(int,int),array(int),array(char))
*	O
entry	*(struct(short,int,array(char),array(char),array(char),array(char),struct(short,short),int,struct(int,int),array(int),array(char)))
)	O
{	O
struct	O
hashtab_elem	struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct))),*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct))),*(struct))
*	O
he	*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(long,long,long,*(*`),int))))
;	O
if	O
(	O
entry	*(struct(short,int,array(char),array(char),array(char),array(char),struct(short,short),int,struct(int,int),array(int),array(char)))
->	O
ut_line	array(char)
[	O
0	int
]	O
==	O
'\0'	O
)	O
{	O
if	O
(	O
print_file_problems	int
)	O
{	O
utmp_print_file_and_line	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(void)
(	O
stddebug	O
)	O
;	O
(	O
void	O
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stddebug	O
,	O
": problem: trying to hash rec with ut_line == NULL\n"	*(char)
)	O
;	O
}	O
return	O
;	O
}	O
he	*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(long,long,long,*(*`),int))))
=	O
hashtab_find	(*(struct(long,long,long,*(*(struct`)),int)),*(void),int)->(*(struct(*(void),int,int,*(void),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))))
(	O
login_table	*(struct(long,long,long,*(*(struct(*`,int,int,*`,*`,*`,*`))),int))
,	O
entry	*(struct(short,int,array(char),array(char),array(char),array(char),struct(short,short),int,struct(int,int),array(int),array(char)))
->	O
ut_line	array(char)
,	O
(	O
unsigned	O
int	O
)	O
TTY_LEN	O
)	O
;	O
if	O
(	O
he	*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(long,long,long,*(*`),int))))
!=	O
NULL	O
)	O
{	O
struct	O
login_data	struct(array(char),long)
*	O
l	*(struct(array(char),long))
=	O
hashtab_get_value	(*(struct(*(void),int,int,*(void),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))))->(*(void))
(	O
he	*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(long,long,long,*(*`),int))))
)	O
;	O
update_user_time	(*(char),long,*(char))->(void)
(	O
l	*(struct(array(char),long))
->	O
ut_name	O
,	O
entry	*(struct(short,int,array(char),array(char),array(char),array(char),struct(short,short),int,struct(int,int),array(int),array(char)))
->	O
ut_time	O
-	O
l	*(struct(array(char),long))
->	O
time	struct(long,long)
,	O
"logout"	*(char)
)	O
;	O
hashtab_delete	(*(struct(*(void),int,int,*(void),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))))->(void)
(	O
he	*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(long,long,long,*(*`),int))))
)	O
;	O
}	O
else	O
{	O
if	O
(	O
print_file_problems	int
)	O
{	O
utmp_print_file_and_line	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(void)
(	O
stddebug	O
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stddebug	O
,	O
": problem: missing login record for `%.*s'\n"	*(char)
,	O
TTY_LEN	O
,	O
entry	*(struct(short,int,array(char),array(char),array(char),array(char),struct(short,short),int,struct(int,int),array(int),array(char)))
->	O
ut_line	array(char)
)	O
;	O
}	O
}	O
}	O
void	O
do_totals	(*(long),long,int,int,*(char))->(void)
(	O
time_t	long
*	O
next_midnight	long
,	O
time_t	long
current_time	long
,	O
int	O
update_time_flag	int
,	O
int	O
change_login_flag	int
,	O
char	O
*	O
debug_str	*(char)
)	O
{	O
while	O
(	O
*	O
next_midnight	long
<	O
current_time	long
)	O
{	O
log_everyone_out	(long,int,int,*(char))->(void)
(	O
*	O
next_midnight	long
,	O
update_time_flag	int
,	O
change_login_flag	int
,	O
debug_str	*(char)
)	O
;	O
if	O
(	O
print_midnight_totals	int
)	O
{	O
char	O
month_day_string	array(char)
[	O
256	int
]	O
;	O
time_t	long
temp_time	long
=	O
*	O
next_midnight	long
-	O
10	int
;	O
struct	O
tm	struct(int,int,int,int,int,int,int,int,int,long,*(char))
*	O
temp_tm	*(struct(int,int,int,int,int,int,int,int,int,long,*(char)))
=	O
localtime	(*(long))->(*(struct(int,int,int,int,int,int,int,int,int,long,*(char))))
(	O
&	O
temp_time	long
)	O
;	O
if	O
(	O
print_year	int
)	O
(	O
void	O
)	O
snprintf	(*(char),long,*(char))->(int)
(	O
month_day_string	array(char)
,	O
(	O
size_t	long
)	O
sizeof	O
(	O
month_day_string	array(char)
)	O
,	O
"%s %2d %4d"	*(char)
,	O
months	array(*(char))
[	O
temp_tm	*(struct(int,int,int,int,int,int,int,int,int,long,*(char)))
->	O
tm_mon	int
]	O
,	O
temp_tm	*(struct(int,int,int,int,int,int,int,int,int,long,*(char)))
->	O
tm_mday	int
,	O
1900	int
+	O
temp_tm	*(struct(int,int,int,int,int,int,int,int,int,long,*(char)))
->	O
tm_year	int
)	O
;	O
else	O
(	O
void	O
)	O
snprintf	(*(char),long,*(char))->(int)
(	O
month_day_string	array(char)
,	O
(	O
size_t	long
)	O
sizeof	O
(	O
month_day_string	array(char)
)	O
,	O
"%s %2d"	*(char)
,	O
months	array(*(char))
[	O
temp_tm	*(struct(int,int,int,int,int,int,int,int,int,long,*(char)))
->	O
tm_mon	int
]	O
,	O
temp_tm	*(struct(int,int,int,int,int,int,int,int,int,long,*(char)))
->	O
tm_mday	int
)	O
;	O
do_statistics	(*(char))->(void)
(	O
month_day_string	array(char)
)	O
;	O
}	O
*	O
next_midnight	long
=	O
midnight_after_me	(long)->(long)
(	O
(	O
print_midnight_totals	int
&&	O
print_all_days	int
)	O
?	O
*	O
next_midnight	long
:	O
current_time	long
)	O
;	O
}	O
}	O
void	O
do_statistics	(*(char))->(void)
(	O
char	O
*	O
date_string	*(char)
)	O
{	O
unsigned	O
long	O
total	long
;	O
double	O
float_total	double
;	O
struct	O
hashtab_order	struct(int,*(struct),*(struct))
ho	*(struct(int,*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(long,long,long,*(*`),int))))
;	O
struct	O
hashtab_elem	struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct))),*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct))),*(struct))
*	O
he	*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(long,long,long,*(*`),int))))
;	O
total	long
=	O
0	int
;	O
float_total	double
=	O
0.0	int
;	O
for	O
(	O
he	*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(long,long,long,*(*`),int))))
=	O
hashtab_first	(*(struct(long,long,long,*(*(struct`)),int)),*(struct(int,*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))))->(*(struct(*(void),int,int,*(void),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))))
(	O
user_totals	*(struct(long,long,long,*(*(struct(*`,int,int,*`,*`,*`,*`))),int))
,	O
&	O
ho	*(struct(int,*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(long,long,long,*(*`),int))))
)	O
;	O
he	*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(long,long,long,*(*`),int))))
!=	O
NULL	O
;	O
he	*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(long,long,long,*(*`),int))))
=	O
hashtab_next	(*(struct(int,*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))))->(*(struct(*(void),int,int,*(void),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))))
(	O
&	O
ho	*(struct(int,*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(long,long,long,*(*`),int))))
)	O
)	O
{	O
char	O
*	O
username	*(char)
=	O
hashtab_get_key	(*(struct(*(void),int,int,*(void),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))))->(*(void))
(	O
he	*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(long,long,long,*(*`),int))))
)	O
;	O
if	O
(	O
(	O
names	*(struct(long,long,long,*(*(struct(*`,int,int,*`,*`,*`,*`))),int))
==	O
NULL	O
)	O
||	O
hashtab_find	(*(struct(long,long,long,*(*(struct`)),int)),*(void),int)->(*(struct(*(void),int,int,*(void),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))))
(	O
names	*(struct(long,long,long,*(*(struct(*`,int,int,*`,*`,*`,*`))),int))
,	O
username	*(char)
,	O
(	O
unsigned	O
int	O
)	O
NAME_LEN	O
)	O
)	O
{	O
struct	O
user_data	struct(long)
*	O
u	*(struct(long))
=	O
hashtab_get_value	(*(struct(*(void),int,int,*(void),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))))->(*(void))
(	O
he	*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(long,long,long,*(*`),int))))
)	O
;	O
total	long
+=	O
u	*(struct(long))
->	O
time	struct(long,long)
;	O
if	O
(	O
(	O
print_individual_totals	int
)	O
&&	O
!	O
(	O
(	O
u	*(struct(long))
->	O
time	struct(long,long)
==	O
0	int
)	O
&&	O
!	O
print_zero_totals	int
)	O
)	O
printf	(*(char))->(int)
(	O
"%s%-*.*s %*.2f\n"	*(char)
,	O
(	O
print_year	int
?	O
"\t\t"	*(char)
:	O
"\t"	*(char)
)	O
,	O
NAME_LEN	O
,	O
NAME_LEN	O
,	O
username	*(char)
,	O
number_precision	int
,	O
(	O
double	O
)	O
u	*(struct(long))
->	O
time	struct(long,long)
/	O
3600.0	int
)	O
;	O
}	O
hashtab_delete	(*(struct(*(void),int,int,*(void),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))))->(void)
(	O
he	*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(long,long,long,*(*`),int))))
)	O
;	O
}	O
float_total	double
=	O
(	O
double	O
)	O
total	long
/	O
3600.0	int
;	O
if	O
(	O
print_midnight_totals	int
)	O
{	O
if	O
(	O
!	O
(	O
(	O
float_total	double
==	O
0.0	int
)	O
&&	O
!	O
print_zero_totals	int
)	O
)	O
printf	(*(char))->(int)
(	O
"%s\ttotal %*.2f\n"	*(char)
,	O
date_string	*(char)
,	O
number_precision	int
+	O
3	int
,	O
float_total	double
)	O
;	O
}	O
else	O
printf	(*(char))->(int)
(	O
"%stotal %*.2f\n"	*(char)
,	O
(	O
print_year	int
?	O
"\t\t"	*(char)
:	O
"\t"	*(char)
)	O
,	O
number_precision	int
+	O
3	int
,	O
float_total	double
)	O
;	O
}	O
void	O
update_user_time	(*(char),long,*(char))->(void)
(	O
char	O
*	O
name	*(char)
,	O
time_t	long
the_time	long
,	O
char	O
*	O
debug_label	*(char)
)	O
{	O
struct	O
hashtab_elem	struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct))),*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct))),*(struct))
*	O
he	*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(long,long,long,*(*`),int))))
;	O
if	O
(	O
the_time	long
<	O
0	int
)	O
{	O
utmp_print_file_and_line	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(void)
(	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stddebug	O
,	O
": problem: update user %.*s (for %s) with %ld seconds?!\n"	*(char)
,	O
NAME_LEN	O
,	O
name	*(char)
,	O
debug_label	*(char)
,	O
(	O
long	O
)	O
the_time	long
)	O
;	O
fatal	(*(char))->(void)
(	O
"Possible overflow of time_t!  Can't continue."	*(char)
)	O
;	O
}	O
if	O
(	O
debugging_enabled	int
&&	O
(	O
(	O
names	*(struct(long,long,long,*(*(struct(*`,int,int,*`,*`,*`,*`))),int))
==	O
NULL	O
)	O
||	O
hashtab_find	(*(struct(long,long,long,*(*(struct`)),int)),*(void),int)->(*(struct(*(void),int,int,*(void),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))))
(	O
names	*(struct(long,long,long,*(*(struct(*`,int,int,*`,*`,*`,*`))),int))
,	O
name	*(char)
,	O
(	O
unsigned	O
int	O
)	O
NAME_LEN	O
)	O
)	O
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stddebug	O
,	O
"\t\t\t\t\t%*.2f %-*.*s (%s)\n"	*(char)
,	O
NAME_LEN	O
,	O
(	O
double	O
)	O
the_time	long
/	O
3600.0	int
,	O
NAME_LEN	O
,	O
NAME_LEN	O
,	O
name	*(char)
,	O
debug_label	*(char)
)	O
;	O
he	*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(long,long,long,*(*`),int))))
=	O
hashtab_find	(*(struct(long,long,long,*(*(struct`)),int)),*(void),int)->(*(struct(*(void),int,int,*(void),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))))
(	O
user_totals	*(struct(long,long,long,*(*(struct(*`,int,int,*`,*`,*`,*`))),int))
,	O
name	*(char)
,	O
(	O
unsigned	O
int	O
)	O
NAME_LEN	O
)	O
;	O
if	O
(	O
he	*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(long,long,long,*(*`),int))))
==	O
NULL	O
)	O
{	O
struct	O
user_data	struct(long)
u	*(struct(long))
;	O
u	*(struct(long))
.	O
time	struct(long,long)
=	O
0	int
;	O
he	*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(long,long,long,*(*`),int))))
=	O
hashtab_create	(*(struct(long,long,long,*(*(struct`)),int)),*(void),int)->(*(struct(*(void),int,int,*(void),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))))
(	O
user_totals	*(struct(long,long,long,*(*(struct(*`,int,int,*`,*`,*`,*`))),int))
,	O
name	*(char)
,	O
NAME_LEN	O
)	O
;	O
hashtab_set_value	(*(struct(*(void),int,int,*(void),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))),*(void),int)->(void)
(	O
he	*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(long,long,long,*(*`),int))))
,	O
&	O
u	*(struct(long))
,	O
sizeof	O
(	O
u	*(struct(long))
)	O
)	O
;	O
}	O
{	O
struct	O
user_data	struct(long)
*	O
u	*(struct(long))
=	O
hashtab_get_value	(*(struct(*(void),int,int,*(void),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))))->(*(void))
(	O
he	*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(long,long,long,*(*`),int))))
)	O
;	O
u	*(struct(long))
->	O
time	struct(long,long)
+=	O
the_time	long
;	O
}	O
}	O
time_t	long
midnight_after_me	(long)->(long)
(	O
time_t	long
now_time	long
)	O
{	O
struct	O
tm	struct(int,int,int,int,int,int,int,int,int,long,*(char))
*	O
tm_ptr	*(struct(int,int,int,int,int,int,int,int,int,long,*(char)))
,	O
temp_tm	*(struct(int,int,int,int,int,int,int,int,int,long,*(char)))
;	O
tm_ptr	*(struct(int,int,int,int,int,int,int,int,int,long,*(char)))
=	O
localtime	(*(long))->(*(struct(int,int,int,int,int,int,int,int,int,long,*(char))))
(	O
&	O
now_time	long
)	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
(	O
void	O
*	O
)	O
&	O
temp_tm	*(struct(int,int,int,int,int,int,int,int,int,long,*(char)))
,	O
(	O
void	O
*	O
)	O
tm_ptr	*(struct(int,int,int,int,int,int,int,int,int,long,*(char)))
,	O
(	O
size_t	long
)	O
sizeof	O
(	O
struct	O
tm	struct(int,int,int,int,int,int,int,int,int,long,*(char))
)	O
)	O
;	O
temp_tm	*(struct(int,int,int,int,int,int,int,int,int,long,*(char)))
.	O
tm_sec	int
=	O
0	int
;	O
temp_tm	*(struct(int,int,int,int,int,int,int,int,int,long,*(char)))
.	O
tm_min	int
=	O
0	int
;	O
temp_tm	*(struct(int,int,int,int,int,int,int,int,int,long,*(char)))
.	O
tm_hour	int
=	O
0	int
;	O
temp_tm	*(struct(int,int,int,int,int,int,int,int,int,long,*(char)))
.	O
tm_mday	int
++	O
;	O
temp_tm	*(struct(int,int,int,int,int,int,int,int,int,long,*(char)))
.	O
tm_isdst	int
=	O
-	O
1	int
;	O
return	O
mktime	(*(struct(int,int,int,int,int,int,int,int,int,long,*(char))))->(long)
(	O
&	O
temp_tm	*(struct(int,int,int,int,int,int,int,int,int,long,*(char)))
)	O
;	O
}	O
