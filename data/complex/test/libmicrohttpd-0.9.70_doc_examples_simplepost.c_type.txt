struct	O
connection_info_struct	struct(int,*(char),*(struct))
{	O
int	O
connectiontype	int
;	O
char	O
*	O
answerstring	*(char)
;	O
struct	O
MHD_PostProcessor	O
*	O
postprocessor	*(struct)
;	O
}	O
;	O
const	O
char	O
*	O
askpage	*(char)
=	O
"<html><body>                       What's your name, Sir?<br>                       <form action=\"/namepost\" method=\"post\">                       <input name=\"name\" type=\"text\">                       <input type=\"submit\" value=\" Send \"></form>                       </body></html>"	*(char)
;	O
const	O
char	O
*	O
greetingpage	*(char)
=	O
"<html><body><h1>Welcome, %s!</center></h1></body></html>"	*(char)
;	O
const	O
char	O
*	O
errorpage	*(char)
=	O
"<html><body>This doesn't seem to be right.</body></html>"	*(char)
;	O
static	O
int	O
send_page	(*(struct),*(char))->(int)
(	O
struct	O
MHD_Connection	O
*	O
connection	*(struct)
,	O
const	O
char	O
*	O
page	*(char)
)	O
{	O
int	O
ret	int
;	O
struct	O
MHD_Response	O
*	O
response	*(struct)
;	O
response	*(struct)
=	O
MHD_create_response_from_buffer	(long,*(void),enum(int,int,int))->(*(struct))
(	O
strlen	(*(char))->(long)
(	O
page	*(char)
)	O
,	O
(	O
void	O
*	O
)	O
page	*(char)
,	O
MHD_RESPMEM_PERSISTENT	int
)	O
;	O
if	O
(	O
!	O
response	*(struct)
)	O
return	O
MHD_NO	int
;	O
ret	int
=	O
MHD_queue_response	(*(struct),int,*(struct))->(int)
(	O
connection	*(struct)
,	O
MHD_HTTP_OK	int
,	O
response	*(struct)
)	O
;	O
MHD_destroy_response	(*(struct))->(void)
(	O
response	*(struct)
)	O
;	O
return	O
ret	int
;	O
}	O
static	O
int	O
iterate_post	(*(void),enum(int,int,int,int,int,int),*(char),*(char),*(char),*(char),*(char),long,long)->(int)
(	O
void	O
*	O
coninfo_cls	*(void)
,	O
enum	O
MHD_ValueKind	enum(int,int,int,int,int,int)
kind	enum(int,int,int,int,int,int)
,	O
const	O
char	O
*	O
key	*(char)
,	O
const	O
char	O
*	O
filename	*(char)
,	O
const	O
char	O
*	O
content_type	*(char)
,	O
const	O
char	O
*	O
transfer_encoding	*(char)
,	O
const	O
char	O
*	O
data	*(char)
,	O
uint64_t	long
off	long
,	O
size_t	long
size	long
)	O
{	O
struct	O
connection_info_struct	struct(int,*(char),*(struct))
*	O
con_info	*(struct(int,*(char),*(struct)))
=	O
coninfo_cls	*(void)
;	O
(	O
void	O
)	O
kind	enum(int,int,int,int,int,int)
;	O
(	O
void	O
)	O
filename	*(char)
;	O
(	O
void	O
)	O
content_type	*(char)
;	O
(	O
void	O
)	O
transfer_encoding	*(char)
;	O
(	O
void	O
)	O
off	long
;	O
if	O
(	O
0	int
==	O
strcmp	(*(char),*(char))->(int)
(	O
key	*(char)
,	O
"name"	*(char)
)	O
)	O
{	O
if	O
(	O
(	O
size	long
>	O
0	int
)	O
&&	O
(	O
size	long
<=	O
MAXNAMESIZE	int
)	O
)	O
{	O
char	O
*	O
answerstring	*(char)
;	O
answerstring	*(char)
=	O
malloc	(long)->(*(void))
(	O
MAXANSWERSIZE	int
)	O
;	O
if	O
(	O
!	O
answerstring	*(char)
)	O
return	O
MHD_NO	int
;	O
snprintf	(*(char),long,*(char))->(int)
(	O
answerstring	*(char)
,	O
MAXANSWERSIZE	int
,	O
greetingpage	*(char)
,	O
data	*(char)
)	O
;	O
con_info	*(struct(int,*(char),*(struct)))
->	O
answerstring	*(char)
=	O
answerstring	*(char)
;	O
}	O
else	O
con_info	*(struct(int,*(char),*(struct)))
->	O
answerstring	*(char)
=	O
NULL	O
;	O
return	O
MHD_NO	int
;	O
}	O
return	O
MHD_YES	int
;	O
}	O
static	O
void	O
request_completed	(*(void),*(struct),*(*(void)),enum(int,int,int,int,int,int))->(void)
(	O
void	O
*	O
cls	*(void)
,	O
struct	O
MHD_Connection	O
*	O
connection	*(struct)
,	O
void	O
*	O
*	O
con_cls	*(*(void))
,	O
enum	O
MHD_RequestTerminationCode	enum(int,int,int,int,int,int)
toe	enum(int,int,int,int,int,int)
)	O
{	O
struct	O
connection_info_struct	struct(int,*(char),*(struct))
*	O
con_info	*(struct(int,*(char),*(struct)))
=	O
*	O
con_cls	*(*(void))
;	O
(	O
void	O
)	O
cls	*(void)
;	O
(	O
void	O
)	O
connection	*(struct)
;	O
(	O
void	O
)	O
toe	enum(int,int,int,int,int,int)
;	O
if	O
(	O
NULL	O
==	O
con_info	*(struct(int,*(char),*(struct)))
)	O
return	O
;	O
if	O
(	O
con_info	*(struct(int,*(char),*(struct)))
->	O
connectiontype	int
==	O
POST	int
)	O
{	O
MHD_destroy_post_processor	(*(struct))->(int)
(	O
con_info	*(struct(int,*(char),*(struct)))
->	O
postprocessor	*(struct)
)	O
;	O
if	O
(	O
con_info	*(struct(int,*(char),*(struct)))
->	O
answerstring	*(char)
)	O
free	(*(void))->(void)
(	O
con_info	*(struct(int,*(char),*(struct)))
->	O
answerstring	*(char)
)	O
;	O
}	O
free	(*(void))->(void)
(	O
con_info	*(struct(int,*(char),*(struct)))
)	O
;	O
*	O
con_cls	*(*(void))
=	O
NULL	O
;	O
}	O
static	O
int	O
answer_to_connection	(*(void),*(struct),*(char),*(char),*(char),*(char),*(long),*(*(void)))->(int)
(	O
void	O
*	O
cls	*(void)
,	O
struct	O
MHD_Connection	O
*	O
connection	*(struct)
,	O
const	O
char	O
*	O
url	*(char)
,	O
const	O
char	O
*	O
method	*(char)
,	O
const	O
char	O
*	O
version	*(char)
,	O
const	O
char	O
*	O
upload_data	*(char)
,	O
size_t	long
*	O
upload_data_size	*(long)
,	O
void	O
*	O
*	O
con_cls	*(*(void))
)	O
{	O
(	O
void	O
)	O
cls	*(void)
;	O
(	O
void	O
)	O
url	*(char)
;	O
(	O
void	O
)	O
version	*(char)
;	O
if	O
(	O
NULL	O
==	O
*	O
con_cls	*(*(void))
)	O
{	O
struct	O
connection_info_struct	struct(int,*(char),*(struct))
*	O
con_info	*(struct(int,*(char),*(struct)))
;	O
con_info	*(struct(int,*(char),*(struct)))
=	O
malloc	(long)->(*(void))
(	O
sizeof	O
(	O
struct	O
connection_info_struct	struct(int,*(char),*(struct))
)	O
)	O
;	O
if	O
(	O
NULL	O
==	O
con_info	*(struct(int,*(char),*(struct)))
)	O
return	O
MHD_NO	int
;	O
con_info	*(struct(int,*(char),*(struct)))
->	O
answerstring	*(char)
=	O
NULL	O
;	O
if	O
(	O
0	int
==	O
strcmp	(*(char),*(char))->(int)
(	O
method	*(char)
,	O
"POST"	*(char)
)	O
)	O
{	O
con_info	*(struct(int,*(char),*(struct)))
->	O
postprocessor	*(struct)
=	O
MHD_create_post_processor	(*(struct),long,*((*(void),enum(int,int,int,int,int,int),*(char),*(char),*(char),*(char),*(char),long,long)->(int)),*(void))->(*(struct))
(	O
connection	*(struct)
,	O
POSTBUFFERSIZE	int
,	O
iterate_post	(*(void),enum(int,int,int,int,int,int),*(char),*(char),*(char),*(char),*(char),long,long)->(int)
,	O
(	O
void	O
*	O
)	O
con_info	*(struct(int,*(char),*(struct)))
)	O
;	O
if	O
(	O
NULL	O
==	O
con_info	*(struct(int,*(char),*(struct)))
->	O
postprocessor	*(struct)
)	O
{	O
free	(*(void))->(void)
(	O
con_info	*(struct(int,*(char),*(struct)))
)	O
;	O
return	O
MHD_NO	int
;	O
}	O
con_info	*(struct(int,*(char),*(struct)))
->	O
connectiontype	int
=	O
POST	int
;	O
}	O
else	O
con_info	*(struct(int,*(char),*(struct)))
->	O
connectiontype	int
=	O
GET	int
;	O
*	O
con_cls	*(*(void))
=	O
(	O
void	O
*	O
)	O
con_info	*(struct(int,*(char),*(struct)))
;	O
return	O
MHD_YES	int
;	O
}	O
if	O
(	O
0	int
==	O
strcmp	(*(char),*(char))->(int)
(	O
method	*(char)
,	O
"GET"	*(char)
)	O
)	O
{	O
return	O
send_page	(*(struct),*(char))->(int)
(	O
connection	*(struct)
,	O
askpage	*(char)
)	O
;	O
}	O
if	O
(	O
0	int
==	O
strcmp	(*(char),*(char))->(int)
(	O
method	*(char)
,	O
"POST"	*(char)
)	O
)	O
{	O
struct	O
connection_info_struct	struct(int,*(char),*(struct))
*	O
con_info	*(struct(int,*(char),*(struct)))
=	O
*	O
con_cls	*(*(void))
;	O
if	O
(	O
*	O
upload_data_size	*(long)
!=	O
0	int
)	O
{	O
MHD_post_process	(*(struct),*(char),long)->(int)
(	O
con_info	*(struct(int,*(char),*(struct)))
->	O
postprocessor	*(struct)
,	O
upload_data	*(char)
,	O
*	O
upload_data_size	*(long)
)	O
;	O
*	O
upload_data_size	*(long)
=	O
0	int
;	O
return	O
MHD_YES	int
;	O
}	O
else	O
if	O
(	O
NULL	O
!=	O
con_info	*(struct(int,*(char),*(struct)))
->	O
answerstring	*(char)
)	O
return	O
send_page	(*(struct),*(char))->(int)
(	O
connection	*(struct)
,	O
con_info	*(struct(int,*(char),*(struct)))
->	O
answerstring	*(char)
)	O
;	O
}	O
return	O
send_page	(*(struct),*(char))->(int)
(	O
connection	*(struct)
,	O
errorpage	*(char)
)	O
;	O
}	O
int	O
main	()->(int)
(	O
)	O
{	O
struct	O
MHD_Daemon	O
*	O
daemon	(int,int)->(int)
;	O
daemon	(int,int)->(int)
=	O
MHD_start_daemon	(int,short,*((*(void),*(struct(short,array(char))),int)->(int)),*(void),*((*(void),*(struct),*(char),*(char),*(char),*(char),*(long),*(*(void)))->(int)),*(void))->(*(struct))
(	O
MHD_USE_AUTO	int
|	O
MHD_USE_INTERNAL_POLLING_THREAD	int
,	O
PORT	int
,	O
NULL	O
,	O
NULL	O
,	O
&	O
answer_to_connection	(*(void),*(struct),*(char),*(char),*(char),*(char),*(long),*(*(void)))->(int)
,	O
NULL	O
,	O
MHD_OPTION_NOTIFY_COMPLETED	int
,	O
request_completed	(*(void),*(struct),*(*(void)),enum(int,int,int,int,int,int))->(void)
,	O
NULL	O
,	O
MHD_OPTION_END	int
)	O
;	O
if	O
(	O
NULL	O
==	O
daemon	(int,int)->(int)
)	O
return	O
1	int
;	O
(	O
void	O
)	O
getchar	()->(int)
(	O
)	O
;	O
MHD_stop_daemon	(*(struct))->(void)
(	O
daemon	(int,int)->(int)
)	O
;	O
return	O
0	int
;	O
}	O
