int	O
checkCutOrCopyDir	(int)->(int)
(	O
int	O
i	int
)	O
{	O
if	O
(	O
numCutDirs	int
==	O
0	int
&&	O
numCopyDirs	int
==	O
0	int
)	O
return	O
0	int
;	O
int	O
j	int
;	O
char	O
str	O
[	O
dirs	array(*(struct(*(char),int,char,char)))
[	O
i	int
]	O
->	O
namelen	int
+	O
cwdlen	int
+	O
2	int
]	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
str	O
,	O
cwd	short
)	O
;	O
strcat	(*(char),*(char))->(*(char))
(	O
str	O
,	O
"/"	*(char)
)	O
;	O
strcat	(*(char),*(char))->(*(char))
(	O
str	O
,	O
dirs	array(*(struct(*(char),int,char,char)))
[	O
i	int
]	O
->	O
name	*(char)
)	O
;	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<	O
numCutDirs	int
;	O
j	int
++	O
)	O
{	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
cutDirs	array(*(char))
[	O
j	int
]	O
,	O
str	O
)	O
==	O
0	int
)	O
return	O
1	int
;	O
}	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<	O
numCopyDirs	int
;	O
j	int
++	O
)	O
{	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
copyDirs	array(*(char))
[	O
j	int
]	O
,	O
str	O
)	O
==	O
0	int
)	O
return	O
2	int
;	O
}	O
return	O
0	int
;	O
}	O
int	O
checkCutOrCopyFile	(int)->(int)
(	O
int	O
i	int
)	O
{	O
if	O
(	O
numCutFiles	int
==	O
0	int
&&	O
numCopyFiles	int
==	O
0	int
)	O
return	O
0	int
;	O
int	O
j	int
;	O
char	O
str	O
[	O
files	array(*(struct(*(char),int,char,char)))
[	O
i	int
]	O
->	O
namelen	int
+	O
cwdlen	int
+	O
2	int
]	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
str	O
,	O
cwd	short
)	O
;	O
strcat	(*(char),*(char))->(*(char))
(	O
str	O
,	O
"/"	*(char)
)	O
;	O
strcat	(*(char),*(char))->(*(char))
(	O
str	O
,	O
files	array(*(struct(*(char),int,char,char)))
[	O
i	int
]	O
->	O
name	*(char)
)	O
;	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<	O
numCutFiles	int
;	O
j	int
++	O
)	O
{	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
cutFiles	array(*(char))
[	O
j	int
]	O
,	O
str	O
)	O
==	O
0	int
)	O
return	O
1	int
;	O
}	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<	O
numCopyFiles	int
;	O
j	int
++	O
)	O
{	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
copyFiles	array(*(char))
[	O
j	int
]	O
,	O
str	O
)	O
==	O
0	int
)	O
return	O
2	int
;	O
}	O
return	O
0	int
;	O
}	O
void	O
__removeCutCopyItem	(*(*(struct(*(char),int,char,char))),int,*(*(char)),*(int))->(void)
(	O
struct	O
dirstruct	struct(*(char),int,char,char)
*	O
*	O
fileDirItems	*(*(struct(*(char),int,char,char)))
,	O
int	O
fileDirIndex	int
,	O
char	O
*	O
*	O
cutCopyItems	*(*(char))
,	O
int	O
*	O
cutCopyItemCount	*(int)
)	O
{	O
if	O
(	O
*	O
cutCopyItemCount	*(int)
==	O
0	int
)	O
return	O
;	O
int	O
j	int
,	O
k	int
;	O
char	O
*	O
str	O
=	O
(	O
char	O
*	O
)	O
malloc	(long)->(*(void))
(	O
fileDirItems	*(*(struct(*(char),int,char,char)))
[	O
fileDirIndex	int
]	O
->	O
namelen	int
+	O
cwdlen	int
+	O
2	int
)	O
;	O
if	O
(	O
!	O
str	O
)	O
{	O
msgBoxH	(*(char),int,enum(int,int,int))->(int)
(	O
"Insufficient memory"	*(char)
,	O
OK	int
,	O
ERROR	int
)	O
;	O
return	O
;	O
}	O
strcpy	(*(char),*(char))->(*(char))
(	O
str	O
,	O
cwd	short
)	O
;	O
strcat	(*(char),*(char))->(*(char))
(	O
str	O
,	O
"/"	*(char)
)	O
;	O
strcat	(*(char),*(char))->(*(char))
(	O
str	O
,	O
fileDirItems	*(*(struct(*(char),int,char,char)))
[	O
fileDirIndex	int
]	O
->	O
name	*(char)
)	O
;	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<	O
*	O
cutCopyItemCount	*(int)
;	O
j	int
++	O
)	O
{	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
str	O
,	O
cutCopyItems	*(*(char))
[	O
j	int
]	O
)	O
==	O
0	int
)	O
{	O
free	(*(void))->(void)
(	O
cutCopyItems	*(*(char))
[	O
j	int
]	O
)	O
;	O
for	O
(	O
k	int
=	O
j	int
;	O
k	int
<	O
(	O
*	O
cutCopyItemCount	*(int)
)	O
-	O
1	int
;	O
k	int
++	O
)	O
{	O
cutCopyItems	*(*(char))
[	O
k	int
]	O
=	O
cutCopyItems	*(*(char))
[	O
k	int
+	O
1	int
]	O
;	O
}	O
(	O
*	O
cutCopyItemCount	*(int)
)	O
--	O
;	O
cutCopyItems	*(*(char))
[	O
k	int
]	O
=	O
NULL	O
;	O
break	O
;	O
}	O
}	O
free	(*(void))->(void)
(	O
str	O
)	O
;	O
}	O
void	O
removeCutFile	(int)->(void)
(	O
int	O
i	int
)	O
{	O
__removeCutCopyItem	(*(*(struct(*(char),int,char,char))),int,*(*(char)),*(int))->(void)
(	O
files	array(*(struct(*(char),int,char,char)))
,	O
i	int
,	O
cutFiles	array(*(char))
,	O
&	O
numCutFiles	int
)	O
;	O
}	O
void	O
removeCopyFile	(int)->(void)
(	O
int	O
i	int
)	O
{	O
__removeCutCopyItem	(*(*(struct(*(char),int,char,char))),int,*(*(char)),*(int))->(void)
(	O
files	array(*(struct(*(char),int,char,char)))
,	O
i	int
,	O
copyFiles	array(*(char))
,	O
&	O
numCopyFiles	int
)	O
;	O
}	O
void	O
removeCutDir	(int)->(void)
(	O
int	O
i	int
)	O
{	O
__removeCutCopyItem	(*(*(struct(*(char),int,char,char))),int,*(*(char)),*(int))->(void)
(	O
dirs	array(*(struct(*(char),int,char,char)))
,	O
i	int
,	O
cutDirs	array(*(char))
,	O
&	O
numCutDirs	int
)	O
;	O
}	O
void	O
removeCopyDir	(int)->(void)
(	O
int	O
i	int
)	O
{	O
__removeCutCopyItem	(*(*(struct(*(char),int,char,char))),int,*(*(char)),*(int))->(void)
(	O
dirs	array(*(struct(*(char),int,char,char)))
,	O
i	int
,	O
copyDirs	array(*(char))
,	O
&	O
numCopyDirs	int
)	O
;	O
}	O
void	O
__saveCutCopyItem	(*(*(struct(*(char),int,char,char))),int,*(*(char)),*(int))->(void)
(	O
struct	O
dirstruct	struct(*(char),int,char,char)
*	O
*	O
fileDirItems	*(*(struct(*(char),int,char,char)))
,	O
int	O
fileDirIndex	int
,	O
char	O
*	O
*	O
cutCopyItems	*(*(char))
,	O
int	O
*	O
cutCopyItemCount	*(int)
)	O
{	O
int	O
k	int
=	O
*	O
cutCopyItemCount	*(int)
;	O
if	O
(	O
k	int
>=	O
MAX_CUT_COPY	int
)	O
{	O
msgBoxH	(*(char),int,enum(int,int,int))->(int)
(	O
"Unable to perform operation.\nClipboard is full."	*(char)
,	O
OK	int
,	O
ERROR	int
)	O
;	O
return	O
;	O
}	O
if	O
(	O
cutCopyItems	*(*(char))
[	O
k	int
]	O
)	O
free	(*(void))->(void)
(	O
cutCopyItems	*(*(char))
[	O
k	int
]	O
)	O
;	O
char	O
*	O
s	*(char)
=	O
(	O
char	O
*	O
)	O
malloc	(long)->(*(void))
(	O
fileDirItems	*(*(struct(*(char),int,char,char)))
[	O
fileDirIndex	int
]	O
->	O
namelen	int
+	O
cwdlen	int
+	O
2	int
)	O
;	O
if	O
(	O
!	O
s	*(char)
)	O
{	O
msgBoxH	(*(char),int,enum(int,int,int))->(int)
(	O
"Insufficient memory"	*(char)
,	O
OK	int
,	O
ERROR	int
)	O
;	O
return	O
;	O
}	O
strcpy	(*(char),*(char))->(*(char))
(	O
s	*(char)
,	O
cwd	short
)	O
;	O
strcat	(*(char),*(char))->(*(char))
(	O
s	*(char)
,	O
"/"	*(char)
)	O
;	O
strcat	(*(char),*(char))->(*(char))
(	O
s	*(char)
,	O
fileDirItems	*(*(struct(*(char),int,char,char)))
[	O
fileDirIndex	int
]	O
->	O
name	*(char)
)	O
;	O
cutCopyItems	*(*(char))
[	O
k	int
]	O
=	O
s	*(char)
;	O
(	O
*	O
cutCopyItemCount	*(int)
)	O
++	O
;	O
}	O
void	O
saveCutFile	(int)->(void)
(	O
int	O
i	int
)	O
{	O
__saveCutCopyItem	(*(*(struct(*(char),int,char,char))),int,*(*(char)),*(int))->(void)
(	O
files	array(*(struct(*(char),int,char,char)))
,	O
i	int
,	O
cutFiles	array(*(char))
,	O
&	O
numCutFiles	int
)	O
;	O
}	O
void	O
saveCopyFile	(int)->(void)
(	O
int	O
i	int
)	O
{	O
__saveCutCopyItem	(*(*(struct(*(char),int,char,char))),int,*(*(char)),*(int))->(void)
(	O
files	array(*(struct(*(char),int,char,char)))
,	O
i	int
,	O
copyFiles	array(*(char))
,	O
&	O
numCopyFiles	int
)	O
;	O
}	O
void	O
saveCutDir	(int)->(void)
(	O
int	O
i	int
)	O
{	O
__saveCutCopyItem	(*(*(struct(*(char),int,char,char))),int,*(*(char)),*(int))->(void)
(	O
dirs	array(*(struct(*(char),int,char,char)))
,	O
i	int
,	O
cutDirs	array(*(char))
,	O
&	O
numCutDirs	int
)	O
;	O
}	O
void	O
saveCopyDir	(int)->(void)
(	O
int	O
i	int
)	O
{	O
__saveCutCopyItem	(*(*(struct(*(char),int,char,char))),int,*(*(char)),*(int))->(void)
(	O
dirs	array(*(struct(*(char),int,char,char)))
,	O
i	int
,	O
copyDirs	array(*(char))
,	O
&	O
numCopyDirs	int
)	O
;	O
}	O
