typedef	O
struct	O
{	O
int	O
id	int
,	O
http_links	int
,	O
https_links	int
,	O
http_links_same_host	int
,	O
https_links_same_host	int
,	O
status	int
,	O
redirs	int
,	O
redir_insecure	int
,	O
landed_on_https	int
;	O
char	O
host	*(char)
[	O
256	int
]	O
;	O
}	O
stats_t	struct(int,int,int,int,int,int,int,int,int,array(char))
;	O
static	O
stats_t	struct(int,int,int,int,int,int,int,int,int,array(char))
stats	*(struct(*(char),*(char),short,long long))
;	O
static	O
void	O
write_stats	()->(void)
(	O
void	O
)	O
{	O
FILE	struct
*	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
;	O
if	O
(	O
(	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
=	O
fopen	(*(char),*(char))->(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))
(	O
"out.csv"	*(char)
,	O
"a"	*(char)
)	O
)	O
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%d,%s,%d,%d,%d,%d,%d,%d,%d,%d\n"	*(char)
,	O
stats	*(struct(*(char),*(char),short,long long))
.	O
id	int
,	O
stats	*(struct(*(char),*(char),short,long long))
.	O
host	*(char)
,	O
stats	*(struct(*(char),*(char),short,long long))
.	O
status	int
,	O
stats	*(struct(*(char),*(char),short,long long))
.	O
redir_insecure	int
,	O
stats	*(struct(*(char),*(char),short,long long))
.	O
redirs	int
,	O
stats	*(struct(*(char),*(char),short,long long))
.	O
landed_on_https	int
,	O
stats	*(struct(*(char),*(char),short,long long))
.	O
http_links_same_host	int
,	O
stats	*(struct(*(char),*(char),short,long long))
.	O
http_links	int
,	O
stats	*(struct(*(char),*(char),short,long long))
.	O
https_links_same_host	int
,	O
stats	*(struct(*(char),*(char),short,long long))
.	O
https_links	int
)	O
;	O
fclose	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
}	O
}	O
static	O
int	O
_normalize_uri	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(struct(*(char),long)),*(char),*(struct(*(char),long,long,bool,bool,bool)))->(int)
(	O
wget_iri	struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)
*	O
base	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool))
,	O
wget_string	struct(*(char),long)
*	O
url	*(char)
,	O
const	O
char	O
*	O
encoding	*(char)
,	O
wget_buffer	struct(*(char),long,long,bool,bool,bool)
*	O
buf	*(char)
)	O
{	O
char	O
*	O
urlpart_encoded	*(char)
;	O
size_t	long
urlpart_encoded_length	long
;	O
int	O
rc	int
;	O
if	O
(	O
url	*(char)
->	O
len	long
==	O
0	int
||	O
(	O
url	*(char)
->	O
len	long
>=	O
1	int
&&	O
*	O
url	*(char)
->	O
p	*(char)
==	O
'#'	O
)	O
)	O
return	O
-	O
1	int
;	O
char	O
*	O
urlpart	*(char)
=	O
wget_strmemdup	(*(void),long)->(*(char))
(	O
url	*(char)
->	O
p	*(char)
,	O
url	*(char)
->	O
len	long
)	O
;	O
if	O
(	O
!	O
urlpart	*(char)
)	O
return	O
-	O
2	int
;	O
wget_iri_unescape_url_inline	(*(char))->(*(char))
(	O
urlpart	*(char)
)	O
;	O
rc	int
=	O
wget_memiconv	(*(char),*(void),long,*(char),*(*(char)),*(long))->(int)
(	O
encoding	*(char)
,	O
urlpart	*(char)
,	O
strlen	(*(char))->(long)
(	O
urlpart	*(char)
)	O
,	O
"utf-8"	*(char)
,	O
&	O
urlpart_encoded	*(char)
,	O
&	O
urlpart_encoded_length	long
)	O
;	O
wget_xfree	O
(	O
urlpart	*(char)
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
-	O
3	int
;	O
rc	int
=	O
!	O
wget_iri_relative_to_abs	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(char),long,*(struct(*(char),long,long,bool,bool,bool)))->(*(char))
(	O
base	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool))
,	O
urlpart_encoded	*(char)
,	O
urlpart_encoded_length	long
,	O
buf	*(char)
)	O
;	O
wget_xfree	O
(	O
urlpart_encoded	*(char)
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
-	O
4	int
;	O
return	O
0	int
;	O
}	O
static	O
char	O
*	O
_normalize_location	(*(char),*(char))->(*(char))
(	O
const	O
char	O
*	O
base	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool))
,	O
const	O
char	O
*	O
url	*(char)
)	O
{	O
wget_buffer	struct(*(char),long,long,bool,bool,bool)
buf	*(char)
;	O
wget_string	struct(*(char),long)
url_s	struct(*(char),long)
=	O
{	O
.	O
p	*(char)
=	O
url	*(char)
,	O
.	O
len	long
=	O
strlen	(*(char))->(long)
(	O
url	*(char)
)	O
}	O
;	O
wget_iri	struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)
*	O
base_iri	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool))
=	O
wget_iri_parse	(*(char),*(char))->(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
(	O
base	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool))
,	O
"utf-8"	*(char)
)	O
;	O
char	O
sbuf	array(char)
[	O
1024	int
]	O
,	O
*	O
norm_url	*(char)
=	O
NULL	O
;	O
int	O
rc	int
;	O
if	O
(	O
!	O
base_iri	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool))
)	O
return	O
NULL	O
;	O
wget_buffer_init	(*(struct(*(char),long,long,bool,bool,bool)),*(char),long)->(int)
(	O
&	O
buf	*(char)
,	O
sbuf	array(char)
,	O
sizeof	O
(	O
sbuf	array(char)
)	O
)	O
;	O
if	O
(	O
(	O
rc	int
=	O
_normalize_uri	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(struct(*(char),long)),*(char),*(struct(*(char),long,long,bool,bool,bool)))->(int)
(	O
base_iri	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool))
,	O
&	O
url_s	struct(*(char),long)
,	O
"utf-8"	*(char)
,	O
&	O
buf	*(char)
)	O
)	O
==	O
0	int
)	O
{	O
norm_url	*(char)
=	O
wget_strmemdup	(*(void),long)->(*(char))
(	O
buf	*(char)
.	O
data	*(void)
,	O
buf	*(char)
.	O
length	long
)	O
;	O
}	O
wget_buffer_deinit	(*(struct(*(char),long,long,bool,bool,bool)))->(void)
(	O
&	O
buf	*(char)
)	O
;	O
wget_iri_free	(*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool))))->(void)
(	O
&	O
base_iri	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool))
)	O
;	O
return	O
norm_url	*(char)
;	O
}	O
static	O
void	O
html_parse	(*(char),long,*(char),*(char))->(void)
(	O
const	O
char	O
*	O
html	*(char)
,	O
size_t	long
html_len	long
,	O
const	O
char	O
*	O
encoding	*(char)
,	O
const	O
char	O
*	O
hosturl	*(char)
)	O
{	O
wget_iri	struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)
*	O
base	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool))
=	O
wget_iri_parse	(*(char),*(char))->(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
(	O
hosturl	*(char)
,	O
"utf-8"	*(char)
)	O
;	O
wget_iri	struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)
*	O
allocated_base	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool))
=	O
NULL	O
;	O
const	O
char	O
*	O
reason	array(char)
;	O
char	O
*	O
utf8	*(char)
=	O
NULL	O
;	O
wget_buffer	struct(*(char),long,long,bool,bool,bool)
buf	*(char)
;	O
char	O
sbuf	array(char)
[	O
1024	int
]	O
;	O
if	O
(	O
(	O
unsigned	O
char	O
)	O
html	*(char)
[	O
0	int
]	O
==	O
0xFE	int
&&	O
(	O
unsigned	O
char	O
)	O
html	*(char)
[	O
1	int
]	O
==	O
0xFF	int
)	O
{	O
encoding	*(char)
=	O
"UTF-16BE"	*(char)
;	O
reason	array(char)
=	O
"set by BOM"	*(char)
;	O
html	*(char)
+=	O
2	int
;	O
html_len	long
-=	O
2	int
;	O
}	O
else	O
if	O
(	O
(	O
unsigned	O
char	O
)	O
html	*(char)
[	O
0	int
]	O
==	O
0xFF	int
&&	O
(	O
unsigned	O
char	O
)	O
html	*(char)
[	O
1	int
]	O
==	O
0xFE	int
)	O
{	O
encoding	*(char)
=	O
"UTF-16LE"	*(char)
;	O
reason	array(char)
=	O
"set by BOM"	*(char)
;	O
html	*(char)
+=	O
2	int
;	O
html_len	long
-=	O
2	int
;	O
}	O
else	O
if	O
(	O
(	O
unsigned	O
char	O
)	O
html	*(char)
[	O
0	int
]	O
==	O
0xEF	int
&&	O
(	O
unsigned	O
char	O
)	O
html	*(char)
[	O
1	int
]	O
==	O
0xBB	int
&&	O
(	O
unsigned	O
char	O
)	O
html	*(char)
[	O
2	int
]	O
==	O
0xBF	int
)	O
{	O
encoding	*(char)
=	O
"UTF-8"	*(char)
;	O
reason	array(char)
=	O
"set by BOM"	*(char)
;	O
html	*(char)
+=	O
3	int
;	O
html_len	long
-=	O
3	int
;	O
}	O
else	O
{	O
reason	array(char)
=	O
"set by server response"	*(char)
;	O
}	O
if	O
(	O
wget_memiconv	(*(char),*(void),long,*(char),*(*(char)),*(long))->(int)
(	O
encoding	*(char)
,	O
html	*(char)
,	O
html_len	long
,	O
"UTF-8"	*(char)
,	O
&	O
utf8	*(char)
,	O
NULL	O
)	O
==	O
0	int
)	O
{	O
wget_info_printf	(*(char))->(void)
(	O
"  Convert encoding '%s' (%s) to UTF-8\n"	*(char)
,	O
encoding	*(char)
?	O
encoding	*(char)
:	O
"iso-8859-1"	*(char)
,	O
reason	array(char)
)	O
;	O
html	*(char)
=	O
utf8	*(char)
;	O
}	O
else	O
{	O
wget_info_printf	(*(char))->(void)
(	O
"Failed to convert non-ASCII encoding '%s' (%s) to UTF-8, skip parsing\n"	*(char)
,	O
encoding	*(char)
,	O
reason	array(char)
)	O
;	O
return	O
;	O
}	O
wget_html_parsed_result	struct(*(struct),*(char),struct(*(char),long),bool)
*	O
parsed	*(struct(*(struct),*(char),struct(*(char),long),bool))
=	O
wget_html_get_urls_inline	(*(char),*(struct),*(struct))->(*(struct(*(struct),*(char),struct(*(char),long),bool)))
(	O
html	*(char)
,	O
NULL	O
,	O
NULL	O
)	O
;	O
if	O
(	O
!	O
encoding	*(char)
)	O
{	O
if	O
(	O
parsed	*(struct(*(struct),*(char),struct(*(char),long),bool))
->	O
encoding	*(char)
)	O
{	O
encoding	*(char)
=	O
parsed	*(struct(*(struct),*(char),struct(*(char),long),bool))
->	O
encoding	*(char)
;	O
reason	array(char)
=	O
"set by document"	*(char)
;	O
}	O
else	O
{	O
encoding	*(char)
=	O
"CP1252"	*(char)
;	O
reason	array(char)
=	O
"default, encoding not specified"	*(char)
;	O
}	O
}	O
wget_info_printf	(*(char))->(void)
(	O
"  URI content encoding = '%s' (%s)\n"	*(char)
,	O
encoding	*(char)
,	O
reason	array(char)
)	O
;	O
wget_buffer_init	(*(struct(*(char),long,long,bool,bool,bool)),*(char),long)->(int)
(	O
&	O
buf	*(char)
,	O
sbuf	array(char)
,	O
sizeof	O
(	O
sbuf	array(char)
)	O
)	O
;	O
if	O
(	O
parsed	*(struct(*(struct),*(char),struct(*(char),long),bool))
->	O
base	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool))
.	O
p	*(char)
)	O
{	O
wget_info_printf	(*(char))->(void)
(	O
"  base='%.*s'\n"	*(char)
,	O
(	O
int	O
)	O
parsed	*(struct(*(struct),*(char),struct(*(char),long),bool))
->	O
base	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool))
.	O
len	long
,	O
parsed	*(struct(*(struct),*(char),struct(*(char),long),bool))
->	O
base	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool))
.	O
p	*(char)
)	O
;	O
if	O
(	O
_normalize_uri	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(struct(*(char),long)),*(char),*(struct(*(char),long,long,bool,bool,bool)))->(int)
(	O
base	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool))
,	O
&	O
parsed	*(struct(*(struct),*(char),struct(*(char),long),bool))
->	O
base	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool))
,	O
encoding	*(char)
,	O
&	O
buf	*(char)
)	O
==	O
0	int
)	O
{	O
if	O
(	O
buf	*(char)
.	O
length	long
)	O
{	O
wget_iri	struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)
*	O
newbase	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool))
=	O
wget_iri_parse	(*(char),*(char))->(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
(	O
buf	*(char)
.	O
data	*(void)
,	O
"utf-8"	*(char)
)	O
;	O
if	O
(	O
newbase	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool))
)	O
{	O
wget_iri_free	(*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool))))->(void)
(	O
&	O
base	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool))
)	O
;	O
base	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool))
=	O
newbase	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool))
;	O
}	O
}	O
}	O
}	O
for	O
(	O
int	O
it	int
=	O
0	int
;	O
it	int
<	O
wget_vector_size	(*(struct))->(int)
(	O
parsed	*(struct(*(struct),*(char),struct(*(char),long),bool))
->	O
uris	*(struct)
)	O
;	O
it	int
++	O
)	O
{	O
wget_html_parsed_url	struct(struct(*(char),long),array(char),array(char),bool)
*	O
html_url	*(struct(struct(*(char),long),array(char),array(char),bool))
=	O
wget_vector_get	(*(struct),int)->(*(void))
(	O
parsed	*(struct(*(struct),*(char),struct(*(char),long),bool))
->	O
uris	*(struct)
,	O
it	int
)	O
;	O
wget_string	struct(*(char),long)
*	O
url	*(char)
=	O
&	O
html_url	*(struct(struct(*(char),long),array(char),array(char),bool))
->	O
url	*(char)
;	O
if	O
(	O
_normalize_uri	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(struct(*(char),long)),*(char),*(struct(*(char),long,long,bool,bool,bool)))->(int)
(	O
base	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool))
,	O
url	*(char)
,	O
encoding	*(char)
,	O
&	O
buf	*(char)
)	O
||	O
buf	*(char)
.	O
length	long
==	O
0	int
)	O
continue	O
;	O
wget_iri	struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)
*	O
canon_url	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool))
=	O
wget_iri_parse	(*(char),*(char))->(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
(	O
buf	*(char)
.	O
data	*(void)
,	O
"utf-8"	*(char)
)	O
;	O
if	O
(	O
!	O
canon_url	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool))
)	O
continue	O
;	O
int	O
same_host	int
=	O
!	O
wget_strcasecmp	(*(char),*(char))->(int)
(	O
canon_url	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool))
->	O
host	*(char)
,	O
base	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool))
->	O
host	*(char)
)	O
;	O
if	O
(	O
canon_url	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool))
->	O
scheme	enum(int,int)
==	O
WGET_IRI_SCHEME_HTTPS	int
)	O
{	O
stats	*(struct(*(char),*(char),short,long long))
.	O
https_links	int
++	O
;	O
stats	*(struct(*(char),*(char),short,long long))
.	O
https_links_same_host	int
+=	O
same_host	int
;	O
}	O
else	O
if	O
(	O
canon_url	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool))
->	O
scheme	enum(int,int)
==	O
WGET_IRI_SCHEME_HTTP	int
)	O
{	O
stats	*(struct(*(char),*(char),short,long long))
.	O
http_links	int
++	O
;	O
stats	*(struct(*(char),*(char),short,long long))
.	O
http_links_same_host	int
+=	O
same_host	int
;	O
}	O
wget_iri_free	(*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool))))->(void)
(	O
&	O
canon_url	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool))
)	O
;	O
}	O
wget_buffer_deinit	(*(struct(*(char),long,long,bool,bool,bool)))->(void)
(	O
&	O
buf	*(char)
)	O
;	O
wget_iri_free	(*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool))))->(void)
(	O
&	O
allocated_base	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool))
)	O
;	O
wget_html_free_urls_inline	(*(*(struct(*(struct`),*(char),struct(*`,long),bool))))->(void)
(	O
&	O
parsed	*(struct(*(struct),*(char),struct(*(char),long),bool))
)	O
;	O
wget_iri_free	(*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool))))->(void)
(	O
&	O
base	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool))
)	O
;	O
wget_xfree	O
(	O
utf8	*(char)
)	O
;	O
wget_info_printf	(*(char))->(void)
(	O
"  same host: http=%d https=%d\n"	*(char)
,	O
stats	*(struct(*(char),*(char),short,long long))
.	O
http_links_same_host	int
,	O
stats	*(struct(*(char),*(char),short,long long))
.	O
https_links_same_host	int
)	O
;	O
wget_info_printf	(*(char))->(void)
(	O
"      total: http=%d https=%d\n"	*(char)
,	O
stats	*(struct(*(char),*(char),short,long long))
.	O
http_links	int
,	O
stats	*(struct(*(char),*(char),short,long long))
.	O
https_links	int
)	O
;	O
}	O
int	O
main	(int,*(*(char)))->(int)
(	O
int	O
argc	int
WGET_GCC_UNUSED	O
,	O
const	O
char	O
*	O
const	O
*	O
argv	*(*(char))
WGET_GCC_UNUSED	O
)	O
{	O
wget_http_response	struct
*	O
resp	*(*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`,struct`,struct`,long,int,enum(int,int),array(char),array(char),array(char),bool,bool,long long,long long)),*(struct),*(struct),*(struct),*(struct),*(struct),*(char),*(char),*(char),*(char),*(char),*(struct(*`,long,long,bool,bool,bool)),*(struct(*`,long,long,bool,bool,bool)),long,long,long,long,long,array(char),int,short,short,short,enum(int,int),char,char,char,bool,bool,bool,long long)))
=	O
NULL	O
;	O
char	O
*	O
url	*(char)
=	O
NULL	O
;	O
wget_global_init	(int)->(void)
(	O
WGET_ERROR_STREAM	int
,	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
WGET_INFO_STREAM	int
,	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
WGET_DNS_CACHING	int
,	O
1	int
,	O
0	int
)	O
;	O
struct	O
sigaction	struct(union(*((int)->(void)),*((int,*(struct(int,int,int,int,union`)),*(void))->(void))),struct(array(long)),int,*(()->(void)))
sig_action	struct(union(*((int)->(void)),*((int,*(struct`),*(void))->(void))),struct(array(long)),int,*(()->(void)))
;	O
memset	(*(void),int,long)->(*(void))
(	O
&	O
sig_action	struct(union(*((int)->(void)),*((int,*(struct`),*(void))->(void))),struct(array(long)),int,*(()->(void)))
,	O
0	int
,	O
sizeof	O
(	O
sig_action	struct(union(*((int)->(void)),*((int,*(struct`),*(void))->(void))),struct(array(long)),int,*(()->(void)))
)	O
)	O
;	O
sig_action	struct(union(*((int)->(void)),*((int,*(struct`),*(void))->(void))),struct(array(long)),int,*(()->(void)))
.	O
sa_sigaction	*((int,*(struct(int,int,int,int,union(array(int),struct`,struct`,struct`,struct`,struct`,struct`,struct`))),*(void))->(void))
=	O
(	O
void	O
(	O
*	O
)	O
(	O
int	O
,	O
siginfo_t	struct(int,int,int,int,union(array(int),struct(int,int),struct(int,int,union(int,*(void))),struct(int,int,union(int,*(void))),struct(int,int,int,long,long),struct(*(void),short,union(struct(*`,*`),int)),struct(long,int),struct(*(void),int,int)))
*	O
,	O
void	O
*	O
)	O
)	O
SIG_IGN	O
;	O
sigaction	struct(union(*((int)->(void)),*((int,*(struct(int,int,int,int,union`)),*(void))->(void))),struct(array(long)),int,*(()->(void)))
(	O
SIGPIPE	int
,	O
&	O
sig_action	struct(union(*((int)->(void)),*((int,*(struct`),*(void))->(void))),struct(array(long)),int,*(()->(void)))
,	O
NULL	O
)	O
;	O
wget_tcp_set_timeout	(*(struct),int)->(void)
(	O
NULL	O
,	O
5000	int
)	O
;	O
wget_tcp_set_connect_timeout	(*(struct),int)->(void)
(	O
NULL	O
,	O
5000	int
)	O
;	O
wget_dns_set_timeout	(*(struct),int)->(void)
(	O
NULL	O
,	O
5000	int
)	O
;	O
wget_ssl_set_config_int	(int,int)->(void)
(	O
WGET_SSL_OCSP	int
,	O
0	int
)	O
;	O
wget_ssl_set_config_int	(int,int)->(void)
(	O
WGET_SSL_OCSP_STAPLING	int
,	O
0	int
)	O
;	O
while	O
(	O
fscanf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stdin	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%d,%255s"	*(char)
,	O
&	O
stats	*(struct(*(char),*(char),short,long long))
.	O
id	int
,	O
stats	*(struct(*(char),*(char),short,long long))
.	O
host	*(char)
)	O
==	O
2	int
)	O
{	O
wget_xfree	O
(	O
url	*(char)
)	O
;	O
if	O
(	O
!	O
wget_strncasecmp_ascii	(*(char),*(char),long)->(int)
(	O
stats	*(struct(*(char),*(char),short,long long))
.	O
host	*(char)
,	O
"http://"	*(char)
,	O
7	int
)	O
)	O
url	*(char)
=	O
wget_aprintf	(*(char))->(*(char))
(	O
"https://%s"	*(char)
,	O
stats	*(struct(*(char),*(char),short,long long))
.	O
host	*(char)
+	O
7	int
)	O
;	O
else	O
if	O
(	O
wget_strncasecmp_ascii	(*(char),*(char),long)->(int)
(	O
stats	*(struct(*(char),*(char),short,long long))
.	O
host	*(char)
,	O
"https://"	*(char)
,	O
8	int
)	O
)	O
url	*(char)
=	O
wget_aprintf	(*(char))->(*(char))
(	O
"https://%s"	*(char)
,	O
stats	*(struct(*(char),*(char),short,long long))
.	O
host	*(char)
)	O
;	O
else	O
url	*(char)
=	O
wget_strdup	(*(char))->(*(char))
(	O
stats	*(struct(*(char),*(char),short,long long))
.	O
host	*(char)
)	O
;	O
stats	*(struct(*(char),*(char),short,long long))
.	O
http_links	int
=	O
stats	*(struct(*(char),*(char),short,long long))
.	O
https_links	int
=	O
0	int
;	O
stats	*(struct(*(char),*(char),short,long long))
.	O
http_links_same_host	int
=	O
stats	*(struct(*(char),*(char),short,long long))
.	O
https_links_same_host	int
=	O
0	int
;	O
stats	*(struct(*(char),*(char),short,long long))
.	O
status	int
=	O
-	O
1	int
;	O
stats	*(struct(*(char),*(char),short,long long))
.	O
redirs	int
=	O
stats	*(struct(*(char),*(char),short,long long))
.	O
redir_insecure	int
=	O
stats	*(struct(*(char),*(char),short,long long))
.	O
landed_on_https	int
=	O
0	int
;	O
for	O
(	O
int	O
redirs	int
=	O
0	int
,	O
max	int
=	O
10	int
;	O
redirs	int
<	O
max	int
;	O
redirs	int
++	O
)	O
{	O
wget_http_free_response	(*(*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),long,long,long,long,long,array(char),int,short,short,short,enum(int,int),char,char,char,bool,bool,bool,long long))))->(void)
(	O
&	O
resp	*(*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`,struct`,struct`,long,int,enum(int,int),array(char),array(char),array(char),bool,bool,long long,long long)),*(struct),*(struct),*(struct),*(struct),*(struct),*(char),*(char),*(char),*(char),*(char),*(struct(*`,long,long,bool,bool,bool)),*(struct(*`,long,long,bool,bool,bool)),long,long,long,long,long,array(char),int,short,short,short,enum(int,int),char,char,char,bool,bool,bool,long long)))
)	O
;	O
wget_info_printf	(*(char))->(void)
(	O
"%s%s\n"	*(char)
,	O
redirs	int
?	O
"  -> "	*(char)
:	O
""	*(char)
,	O
url	*(char)
)	O
;	O
resp	*(*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`,struct`,struct`,long,int,enum(int,int),array(char),array(char),array(char),bool,bool,long long,long long)),*(struct),*(struct),*(struct),*(struct),*(struct),*(char),*(char),*(char),*(char),*(char),*(struct(*`,long,long,bool,bool,bool)),*(struct(*`,long,long,bool,bool,bool)),long,long,long,long,long,array(char),int,short,short,short,enum(int,int),char,char,char,bool,bool,bool,long long)))
=	O
wget_http_get	(int)->(*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`,struct`,struct`,long,int,enum(int,int),array(char),array(char),array(char),bool,bool,long long,long long)),*(struct),*(struct),*(struct),*(struct),*(struct),*(char),*(char),*(char),*(char),*(char),*(struct(*`,long,long,bool,bool,bool)),*(struct(*`,long,long,bool,bool,bool)),long,long,long,long,long,array(char),int,short,short,short,enum(int,int),char,char,char,bool,bool,bool,long long)))
(	O
WGET_HTTP_URL	int
,	O
url	*(char)
,	O
WGET_HTTP_HEADER_ADD	int
,	O
"User-Agent"	*(char)
,	O
"Mozilla/5.0"	*(char)
,	O
WGET_HTTP_HEADER_ADD	int
,	O
"Accept-Encoding"	*(char)
,	O
"gzip, br"	*(char)
,	O
WGET_HTTP_HEADER_ADD	int
,	O
"Accept"	*(char)
,	O
"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8"	*(char)
,	O
WGET_HTTP_HEADER_ADD	int
,	O
"Accept-Encoding"	*(char)
,	O
"gzip, br"	*(char)
,	O
WGET_HTTP_MAX_REDIRECTIONS	int
,	O
0	int
,	O
0	int
)	O
;	O
if	O
(	O
!	O
resp	*(*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`,struct`,struct`,long,int,enum(int,int),array(char),array(char),array(char),bool,bool,long long,long long)),*(struct),*(struct),*(struct),*(struct),*(struct),*(char),*(char),*(char),*(char),*(char),*(struct(*`,long,long,bool,bool,bool)),*(struct(*`,long,long,bool,bool,bool)),long,long,long,long,long,array(char),int,short,short,short,enum(int,int),char,char,char,bool,bool,bool,long long)))
)	O
{	O
wget_info_printf	(*(char))->(void)
(	O
"  No connection / response\n"	*(char)
)	O
;	O
break	O
;	O
}	O
stats	*(struct(*(char),*(char),short,long long))
.	O
status	int
=	O
resp	*(*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`,struct`,struct`,long,int,enum(int,int),array(char),array(char),array(char),bool,bool,long long,long long)),*(struct),*(struct),*(struct),*(struct),*(struct),*(char),*(char),*(char),*(char),*(char),*(struct(*`,long,long,bool,bool,bool)),*(struct(*`,long,long,bool,bool,bool)),long,long,long,long,long,array(char),int,short,short,short,enum(int,int),char,char,char,bool,bool,bool,long long)))
->	O
code	short
;	O
if	O
(	O
resp	*(*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`,struct`,struct`,long,int,enum(int,int),array(char),array(char),array(char),bool,bool,long long,long long)),*(struct),*(struct),*(struct),*(struct),*(struct),*(char),*(char),*(char),*(char),*(char),*(struct(*`,long,long,bool,bool,bool)),*(struct(*`,long,long,bool,bool,bool)),long,long,long,long,long,array(char),int,short,short,short,enum(int,int),char,char,char,bool,bool,bool,long long)))
->	O
code	short
!=	O
200	int
)	O
{	O
if	O
(	O
resp	*(*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`,struct`,struct`,long,int,enum(int,int),array(char),array(char),array(char),bool,bool,long long,long long)),*(struct),*(struct),*(struct),*(struct),*(struct),*(char),*(char),*(char),*(char),*(char),*(struct(*`,long,long,bool,bool,bool)),*(struct(*`,long,long,bool,bool,bool)),long,long,long,long,long,array(char),int,short,short,short,enum(int,int),char,char,char,bool,bool,bool,long long)))
->	O
location	*(char)
)	O
{	O
stats	*(struct(*(char),*(char),short,long long))
.	O
redirs	int
++	O
;	O
wget_info_printf	(*(char))->(void)
(	O
"  Response code %hd, %s\n"	*(char)
,	O
resp	*(*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`,struct`,struct`,long,int,enum(int,int),array(char),array(char),array(char),bool,bool,long long,long long)),*(struct),*(struct),*(struct),*(struct),*(struct),*(char),*(char),*(char),*(char),*(char),*(struct(*`,long,long,bool,bool,bool)),*(struct(*`,long,long,bool,bool,bool)),long,long,long,long,long,array(char),int,short,short,short,enum(int,int),char,char,char,bool,bool,bool,long long)))
->	O
code	short
,	O
resp	*(*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`,struct`,struct`,long,int,enum(int,int),array(char),array(char),array(char),bool,bool,long long,long long)),*(struct),*(struct),*(struct),*(struct),*(struct),*(char),*(char),*(char),*(char),*(char),*(struct(*`,long,long,bool,bool,bool)),*(struct(*`,long,long,bool,bool,bool)),long,long,long,long,long,array(char),int,short,short,short,enum(int,int),char,char,char,bool,bool,bool,long long)))
->	O
location	*(char)
)	O
;	O
char	O
*	O
newurl	*(char)
=	O
_normalize_location	(*(char),*(char))->(*(char))
(	O
url	*(char)
,	O
resp	*(*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`,struct`,struct`,long,int,enum(int,int),array(char),array(char),array(char),bool,bool,long long,long long)),*(struct),*(struct),*(struct),*(struct),*(struct),*(char),*(char),*(char),*(char),*(char),*(struct(*`,long,long,bool,bool,bool)),*(struct(*`,long,long,bool,bool,bool)),long,long,long,long,long,array(char),int,short,short,short,enum(int,int),char,char,char,bool,bool,bool,long long)))
->	O
location	*(char)
)	O
;	O
if	O
(	O
!	O
newurl	*(char)
)	O
{	O
wget_info_printf	(*(char))->(void)
(	O
"  Failed to normalize '%s', '%s'\n"	*(char)
,	O
url	*(char)
,	O
resp	*(*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`,struct`,struct`,long,int,enum(int,int),array(char),array(char),array(char),bool,bool,long long,long long)),*(struct),*(struct),*(struct),*(struct),*(struct),*(char),*(char),*(char),*(char),*(char),*(struct(*`,long,long,bool,bool,bool)),*(struct(*`,long,long,bool,bool,bool)),long,long,long,long,long,array(char),int,short,short,short,enum(int,int),char,char,char,bool,bool,bool,long long)))
->	O
location	*(char)
)	O
;	O
break	O
;	O
}	O
wget_xfree	O
(	O
url	*(char)
)	O
;	O
url	*(char)
=	O
newurl	*(char)
;	O
if	O
(	O
wget_strncasecmp	(*(char),*(char),long)->(int)
(	O
url	*(char)
,	O
"https://"	*(char)
,	O
8	int
)	O
)	O
stats	*(struct(*(char),*(char),short,long long))
.	O
redir_insecure	int
++	O
;	O
continue	O
;	O
}	O
wget_info_printf	(*(char))->(void)
(	O
"  Response code %hd\n"	*(char)
,	O
resp	*(*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`,struct`,struct`,long,int,enum(int,int),array(char),array(char),array(char),bool,bool,long long,long long)),*(struct),*(struct),*(struct),*(struct),*(struct),*(char),*(char),*(char),*(char),*(char),*(struct(*`,long,long,bool,bool,bool)),*(struct(*`,long,long,bool,bool,bool)),long,long,long,long,long,array(char),int,short,short,short,enum(int,int),char,char,char,bool,bool,bool,long long)))
->	O
code	short
)	O
;	O
break	O
;	O
}	O
if	O
(	O
wget_strncasecmp	(*(char),*(char),long)->(int)
(	O
url	*(char)
,	O
"https://"	*(char)
,	O
8	int
)	O
)	O
break	O
;	O
stats	*(struct(*(char),*(char),short,long long))
.	O
landed_on_https	int
=	O
1	int
;	O
if	O
(	O
wget_strcasecmp_ascii	(*(char),*(char))->(int)
(	O
resp	*(*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`,struct`,struct`,long,int,enum(int,int),array(char),array(char),array(char),bool,bool,long long,long long)),*(struct),*(struct),*(struct),*(struct),*(struct),*(char),*(char),*(char),*(char),*(char),*(struct(*`,long,long,bool,bool,bool)),*(struct(*`,long,long,bool,bool,bool)),long,long,long,long,long,array(char),int,short,short,short,enum(int,int),char,char,char,bool,bool,bool,long long)))
->	O
content_type	*(char)
,	O
"text/html"	*(char)
)	O
)	O
{	O
wget_info_printf	(*(char))->(void)
(	O
"  No HTML: %s\n"	*(char)
,	O
resp	*(*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`,struct`,struct`,long,int,enum(int,int),array(char),array(char),array(char),bool,bool,long long,long long)),*(struct),*(struct),*(struct),*(struct),*(struct),*(char),*(char),*(char),*(char),*(char),*(struct(*`,long,long,bool,bool,bool)),*(struct(*`,long,long,bool,bool,bool)),long,long,long,long,long,array(char),int,short,short,short,enum(int,int),char,char,char,bool,bool,bool,long long)))
->	O
content_type	*(char)
)	O
;	O
break	O
;	O
}	O
if	O
(	O
resp	*(*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`,struct`,struct`,long,int,enum(int,int),array(char),array(char),array(char),bool,bool,long long,long long)),*(struct),*(struct),*(struct),*(struct),*(struct),*(char),*(char),*(char),*(char),*(char),*(struct(*`,long,long,bool,bool,bool)),*(struct(*`,long,long,bool,bool,bool)),long,long,long,long,long,array(char),int,short,short,short,enum(int,int),char,char,char,bool,bool,bool,long long)))
->	O
body	*(char)
)	O
html_parse	(*(char),long,*(char),*(char))->(void)
(	O
resp	*(*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`,struct`,struct`,long,int,enum(int,int),array(char),array(char),array(char),bool,bool,long long,long long)),*(struct),*(struct),*(struct),*(struct),*(struct),*(char),*(char),*(char),*(char),*(char),*(struct(*`,long,long,bool,bool,bool)),*(struct(*`,long,long,bool,bool,bool)),long,long,long,long,long,array(char),int,short,short,short,enum(int,int),char,char,char,bool,bool,bool,long long)))
->	O
body	*(char)
->	O
data	*(void)
,	O
resp	*(*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`,struct`,struct`,long,int,enum(int,int),array(char),array(char),array(char),bool,bool,long long,long long)),*(struct),*(struct),*(struct),*(struct),*(struct),*(char),*(char),*(char),*(char),*(char),*(struct(*`,long,long,bool,bool,bool)),*(struct(*`,long,long,bool,bool,bool)),long,long,long,long,long,array(char),int,short,short,short,enum(int,int),char,char,char,bool,bool,bool,long long)))
->	O
body	*(char)
->	O
length	long
,	O
resp	*(*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`,struct`,struct`,long,int,enum(int,int),array(char),array(char),array(char),bool,bool,long long,long long)),*(struct),*(struct),*(struct),*(struct),*(struct),*(char),*(char),*(char),*(char),*(char),*(struct(*`,long,long,bool,bool,bool)),*(struct(*`,long,long,bool,bool,bool)),long,long,long,long,long,array(char),int,short,short,short,enum(int,int),char,char,char,bool,bool,bool,long long)))
->	O
content_type_encoding	*(char)
,	O
url	*(char)
)	O
;	O
break	O
;	O
}	O
wget_http_free_response	(*(*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),long,long,long,long,long,array(char),int,short,short,short,enum(int,int),char,char,char,bool,bool,bool,long long))))->(void)
(	O
&	O
resp	*(*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`,struct`,struct`,long,int,enum(int,int),array(char),array(char),array(char),bool,bool,long long,long long)),*(struct),*(struct),*(struct),*(struct),*(struct),*(char),*(char),*(char),*(char),*(char),*(struct(*`,long,long,bool,bool,bool)),*(struct(*`,long,long,bool,bool,bool)),long,long,long,long,long,array(char),int,short,short,short,enum(int,int),char,char,char,bool,bool,bool,long long)))
)	O
;	O
write_stats	()->(void)
(	O
)	O
;	O
}	O
wget_xfree	O
(	O
url	*(char)
)	O
;	O
wget_global_deinit	()->(void)
(	O
)	O
;	O
return	O
0	int
;	O
}	O
