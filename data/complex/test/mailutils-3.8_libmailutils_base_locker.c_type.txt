struct	O
_mu_locker	struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct(*(char),*(char)),struct(*(char)),struct(int)))
{	O
unsigned	O
refcnt	int
;	O
enum	O
mu_locker_mode	enum(int,int,int)
mode	enum(int,int,int)
;	O
char	O
*	O
file	*(char)
;	O
int	O
flags	int
;	O
int	O
expire_time	int
;	O
int	O
retries	int
;	O
int	O
retry_sleep	int
;	O
union	O
lock_data	union(struct(*(char),*(char)),struct(*(char)),struct(int))
{	O
struct	O
{	O
char	O
*	O
dotlock	*(char)
;	O
char	O
*	O
nfslock	*(char)
;	O
}	O
dot	struct(*(char),*(char))
;	O
struct	O
{	O
char	O
*	O
name	*(char)
;	O
}	O
external	struct(*(char))
;	O
struct	O
{	O
int	O
fd	int
;	O
}	O
kernel	struct(int)
;	O
}	O
data	*(void)
;	O
}	O
;	O
struct	O
locker_tab	struct(*((*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct`,struct`,struct`))))->(int)),*((*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct`,struct`,struct`))))->(void)),*((*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct`,struct`,struct`))))->(int)),*((*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct`,struct`,struct`))),enum(int,int,int))->(int)),*((*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct`,struct`,struct`))))->(int)))
{	O
int	O
(	O
*	O
init	*((*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct`,struct`,struct`))))->(int))
)	O
(	O
mu_locker_t	*(struct)
)	O
;	O
void	O
(	O
*	O
destroy	*((*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct`,struct`,struct`))))->(void))
)	O
(	O
mu_locker_t	*(struct)
)	O
;	O
int	O
(	O
*	O
prelock	*((*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct`,struct`,struct`))))->(int))
)	O
(	O
mu_locker_t	*(struct)
)	O
;	O
int	O
(	O
*	O
lock	*((*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct`,struct`,struct`))),enum(int,int,int))->(int))
)	O
(	O
mu_locker_t	*(struct)
,	O
enum	O
mu_locker_mode	enum(int,int,int)
)	O
;	O
int	O
(	O
*	O
unlock	*((*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct`,struct`,struct`))))->(int))
)	O
(	O
mu_locker_t	*(struct)
)	O
;	O
}	O
;	O
static	O
int	O
init_dotlock	(*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct(*`,*`),struct(*`),struct(int)))))->(int)
(	O
mu_locker_t	*(struct)
)	O
;	O
static	O
void	O
destroy_dotlock	(*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct(*`,*`),struct(*`),struct(int)))))->(void)
(	O
mu_locker_t	*(struct)
)	O
;	O
static	O
int	O
lock_dotlock	(*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct(*`,*`),struct(*`),struct(int)))),enum(int,int,int))->(int)
(	O
mu_locker_t	*(struct)
,	O
enum	O
mu_locker_mode	enum(int,int,int)
)	O
;	O
static	O
int	O
unlock_dotlock	(*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct(*`,*`),struct(*`),struct(int)))))->(int)
(	O
mu_locker_t	*(struct)
)	O
;	O
static	O
int	O
init_external	(*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct(*`,*`),struct(*`),struct(int)))))->(int)
(	O
mu_locker_t	*(struct)
)	O
;	O
static	O
void	O
destroy_external	(*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct(*`,*`),struct(*`),struct(int)))))->(void)
(	O
mu_locker_t	*(struct)
)	O
;	O
static	O
int	O
lock_external	(*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct(*`,*`),struct(*`),struct(int)))),enum(int,int,int))->(int)
(	O
mu_locker_t	*(struct)
,	O
enum	O
mu_locker_mode	enum(int,int,int)
)	O
;	O
static	O
int	O
unlock_external	(*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct(*`,*`),struct(*`),struct(int)))))->(int)
(	O
mu_locker_t	*(struct)
)	O
;	O
static	O
int	O
init_kernel	(*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct(*`,*`),struct(*`),struct(int)))))->(int)
(	O
mu_locker_t	*(struct)
)	O
;	O
static	O
int	O
lock_kernel	(*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct(*`,*`),struct(*`),struct(int)))),enum(int,int,int))->(int)
(	O
mu_locker_t	*(struct)
,	O
enum	O
mu_locker_mode	enum(int,int,int)
)	O
;	O
static	O
int	O
unlock_kernel	(*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct(*`,*`),struct(*`),struct(int)))))->(int)
(	O
mu_locker_t	*(struct)
)	O
;	O
static	O
int	O
prelock_common	(*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct(*`,*`),struct(*`),struct(int)))))->(int)
(	O
mu_locker_t	*(struct)
)	O
;	O
static	O
struct	O
locker_tab	struct(*((*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct`,struct`,struct`))))->(int)),*((*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct`,struct`,struct`))))->(void)),*((*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct`,struct`,struct`))))->(int)),*((*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct`,struct`,struct`))),enum(int,int,int))->(int)),*((*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct`,struct`,struct`))))->(int)))
locker_tab	struct(*((*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct`,struct`,struct`))))->(int)),*((*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct`,struct`,struct`))))->(void)),*((*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct`,struct`,struct`))))->(int)),*((*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct`,struct`,struct`))),enum(int,int,int))->(int)),*((*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct`,struct`,struct`))))->(int)))
[	O
]	O
=	O
{	O
{	O
init_dotlock	(*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct(*`,*`),struct(*`),struct(int)))))->(int)
,	O
destroy_dotlock	(*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct(*`,*`),struct(*`),struct(int)))))->(void)
,	O
prelock_common	(*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct(*`,*`),struct(*`),struct(int)))))->(int)
,	O
lock_dotlock	(*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct(*`,*`),struct(*`),struct(int)))),enum(int,int,int))->(int)
,	O
unlock_dotlock	(*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct(*`,*`),struct(*`),struct(int)))))->(int)
}	O
,	O
{	O
init_external	(*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct(*`,*`),struct(*`),struct(int)))))->(int)
,	O
destroy_external	(*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct(*`,*`),struct(*`),struct(int)))))->(void)
,	O
prelock_common	(*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct(*`,*`),struct(*`),struct(int)))))->(int)
,	O
lock_external	(*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct(*`,*`),struct(*`),struct(int)))),enum(int,int,int))->(int)
,	O
unlock_external	(*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct(*`,*`),struct(*`),struct(int)))))->(int)
}	O
,	O
{	O
init_kernel	(*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct(*`,*`),struct(*`),struct(int)))))->(int)
,	O
NULL	O
,	O
NULL	O
,	O
lock_kernel	(*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct(*`,*`),struct(*`),struct(int)))),enum(int,int,int))->(int)
,	O
unlock_kernel	(*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct(*`,*`),struct(*`),struct(int)))))->(int)
}	O
,	O
{	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
}	O
}	O
;	O
static	O
int	O
stat_check	(*(char),int,int)->(int)
(	O
const	O
char	O
*	O
file	*(char)
,	O
int	O
fd	int
,	O
int	O
links	int
)	O
{	O
struct	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
fn_stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
;	O
struct	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
fd_stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
;	O
int	O
err	long
=	O
0	int
;	O
int	O
localfd	int
=	O
-	O
1	int
;	O
if	O
(	O
fd	int
==	O
-	O
1	int
)	O
{	O
localfd	int
=	O
open	(*(char),int)->(int)
(	O
file	*(char)
,	O
O_RDONLY	int
)	O
;	O
if	O
(	O
localfd	int
==	O
-	O
1	int
)	O
return	O
errno	O
;	O
fd	int
=	O
localfd	int
;	O
}	O
if	O
(	O
lstat	(*(char),*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))))->(int)
(	O
file	*(char)
,	O
&	O
fn_stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
)	O
||	O
fstat	(int,*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))))->(int)
(	O
fd	int
,	O
&	O
fd_stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
)	O
)	O
err	long
=	O
errno	O
;	O
else	O
{	O
CHK	O
(	O
!	O
S_ISREG	O
(	O
fn_stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_mode	int
)	O
)	O
;	O
CHK	O
(	O
!	O
S_ISREG	O
(	O
fd_stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_mode	int
)	O
)	O
;	O
CHK	O
(	O
fn_stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_nlink	long
!=	O
links	int
)	O
;	O
CHK	O
(	O
fn_stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_dev	long
!=	O
fd_stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_dev	long
)	O
;	O
CHK	O
(	O
fn_stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_ino	long
!=	O
fd_stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_ino	long
)	O
;	O
CHK	O
(	O
fn_stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_mode	int
!=	O
fd_stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_mode	int
)	O
;	O
CHK	O
(	O
fn_stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_nlink	long
!=	O
fd_stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_nlink	long
)	O
;	O
CHK	O
(	O
fn_stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_uid	int
!=	O
fd_stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_uid	int
)	O
;	O
CHK	O
(	O
fn_stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_gid	int
!=	O
fd_stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_gid	int
)	O
;	O
CHK	O
(	O
fn_stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_rdev	long
!=	O
fd_stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_rdev	long
)	O
;	O
}	O
if	O
(	O
localfd	int
!=	O
-	O
1	int
)	O
close	*((*(void))->(int))
(	O
localfd	int
)	O
;	O
return	O
err	long
;	O
}	O
static	O
int	O
check_file_permissions	(*(char))->(int)
(	O
const	O
char	O
*	O
file	*(char)
)	O
{	O
int	O
fd	int
=	O
-	O
1	int
;	O
int	O
err	long
=	O
0	int
;	O
if	O
(	O
(	O
fd	int
=	O
open	(*(char),int)->(int)
(	O
file	*(char)
,	O
O_RDONLY	int
)	O
)	O
==	O
-	O
1	int
)	O
return	O
errno	O
==	O
ENOENT	int
?	O
0	int
:	O
errno	O
;	O
err	long
=	O
stat_check	(*(char),int,int)->(int)
(	O
file	*(char)
,	O
fd	int
,	O
1	int
)	O
;	O
close	*((*(void))->(int))
(	O
fd	int
)	O
;	O
fd	int
=	O
-	O
1	int
;	O
if	O
(	O
err	long
)	O
{	O
if	O
(	O
err	long
==	O
EINVAL	int
)	O
err	long
=	O
MU_ERR_LOCK_BAD_FILE	O
;	O
return	O
err	long
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
prelock_common	(*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct(*`,*`),struct(*`),struct(int)))))->(int)
(	O
mu_locker_t	*(struct)
locker	*(struct)
)	O
{	O
return	O
check_file_permissions	(*(char))->(int)
(	O
locker	*(struct)
->	O
file	*(char)
)	O
;	O
}	O
static	O
int	O
mu_locker_default_flags	int
=	O
MU_LOCKER_DEFAULT	O
;	O
static	O
time_t	long
mu_locker_retry_timeout	long
=	O
MU_LOCKER_RETRY_SLEEP	O
;	O
static	O
size_t	long
mu_locker_retry_count	long
=	O
MU_LOCKER_RETRIES	O
;	O
static	O
time_t	long
mu_locker_expire_timeout	long
=	O
MU_LOCKER_EXPIRE_TIME	O
;	O
static	O
char	O
*	O
mu_locker_external_program	*(char)
=	O
NULL	O
;	O
int	O
mu_locker_set_default_flags	(int,enum(int,int,int))->(int)
(	O
int	O
flags	int
,	O
enum	O
mu_locker_set_mode	enum(int,int,int)
mode	enum(int,int,int)
)	O
{	O
switch	O
(	O
mode	enum(int,int,int)
)	O
{	O
case	O
mu_locker_assign	int
:	O
mu_locker_default_flags	int
=	O
flags	int
;	O
break	O
;	O
case	O
mu_locker_set_bit	int
:	O
mu_locker_default_flags	int
|=	O
flags	int
;	O
break	O
;	O
case	O
mu_locker_clear_bit	int
:	O
mu_locker_default_flags	int
&=	O
~	O
flags	int
;	O
break	O
;	O
default	O
:	O
return	O
EINVAL	int
;	O
}	O
return	O
0	int
;	O
}	O
void	O
mu_locker_set_default_retry_timeout	(long)->(void)
(	O
time_t	long
to	long
)	O
{	O
mu_locker_retry_timeout	long
=	O
to	long
;	O
}	O
void	O
mu_locker_set_default_retry_count	(long)->(void)
(	O
size_t	long
n	long
)	O
{	O
mu_locker_retry_count	long
=	O
n	long
;	O
}	O
void	O
mu_locker_set_default_expire_timeout	(long)->(void)
(	O
time_t	long
t	long
)	O
{	O
mu_locker_expire_timeout	long
=	O
t	long
;	O
}	O
int	O
mu_locker_set_default_external_program	(*(char))->(int)
(	O
char	O
const	O
*	O
path	*(char)
)	O
{	O
char	O
*	O
p	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
path	*(char)
)	O
;	O
if	O
(	O
!	O
p	*(char)
)	O
return	O
ENOMEM	int
;	O
free	(*(void))->(void)
(	O
mu_locker_external_program	*(char)
)	O
;	O
mu_locker_external_program	*(char)
=	O
p	*(char)
;	O
return	O
0	int
;	O
}	O
int	O
mu_locker_mod_flags	(*(struct),int,enum(int,int,int))->(int)
(	O
mu_locker_t	*(struct)
locker	*(struct)
,	O
int	O
flags	int
,	O
enum	O
mu_locker_set_mode	enum(int,int,int)
mode	enum(int,int,int)
)	O
{	O
unsigned	O
otype	int
,	O
ntype	int
;	O
int	O
new_flags	int
;	O
if	O
(	O
!	O
locker	*(struct)
)	O
return	O
MU_ERR_LOCKER_NULL	O
;	O
switch	O
(	O
mode	enum(int,int,int)
)	O
{	O
case	O
mu_locker_assign	int
:	O
new_flags	int
=	O
flags	int
;	O
break	O
;	O
case	O
mu_locker_set_bit	int
:	O
new_flags	int
=	O
locker	*(struct)
->	O
flags	int
|	O
flags	int
;	O
break	O
;	O
case	O
mu_locker_clear_bit	int
:	O
new_flags	int
=	O
locker	*(struct)
->	O
flags	int
&	O
~	O
flags	int
;	O
break	O
;	O
default	O
:	O
return	O
EINVAL	int
;	O
}	O
otype	int
=	O
MU_LOCKER_TYPE	O
(	O
locker	*(struct)
)	O
;	O
if	O
(	O
otype	int
>=	O
MU_LOCKER_NTYPES	O
)	O
return	O
EINVAL	int
;	O
ntype	int
=	O
MU_LOCKER_FLAG_TO_TYPE	O
(	O
new_flags	int
)	O
;	O
if	O
(	O
ntype	int
>=	O
MU_LOCKER_NTYPES	O
)	O
return	O
EINVAL	int
;	O
if	O
(	O
ntype	int
!=	O
otype	int
)	O
{	O
int	O
rc	int
;	O
if	O
(	O
locker_tab	struct(*((*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct`,struct`,struct`))))->(int)),*((*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct`,struct`,struct`))))->(void)),*((*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct`,struct`,struct`))))->(int)),*((*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct`,struct`,struct`))),enum(int,int,int))->(int)),*((*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct`,struct`,struct`))))->(int)))
[	O
otype	int
]	O
.	O
destroy	*((*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct`,struct`,struct`))))->(void))
)	O
locker_tab	struct(*((*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct`,struct`,struct`))))->(int)),*((*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct`,struct`,struct`))))->(void)),*((*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct`,struct`,struct`))))->(int)),*((*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct`,struct`,struct`))),enum(int,int,int))->(int)),*((*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct`,struct`,struct`))))->(int)))
[	O
otype	int
]	O
.	O
destroy	*((*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct`,struct`,struct`))))->(void))
(	O
locker	*(struct)
)	O
;	O
locker	*(struct)
->	O
flags	int
=	O
new_flags	int
;	O
if	O
(	O
locker_tab	struct(*((*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct`,struct`,struct`))))->(int)),*((*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct`,struct`,struct`))))->(void)),*((*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct`,struct`,struct`))))->(int)),*((*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct`,struct`,struct`))),enum(int,int,int))->(int)),*((*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct`,struct`,struct`))))->(int)))
[	O
ntype	int
]	O
.	O
init	*((*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct`,struct`,struct`))))->(int))
)	O
{	O
rc	int
=	O
locker_tab	struct(*((*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct`,struct`,struct`))))->(int)),*((*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct`,struct`,struct`))))->(void)),*((*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct`,struct`,struct`))))->(int)),*((*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct`,struct`,struct`))),enum(int,int,int))->(int)),*((*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct`,struct`,struct`))))->(int)))
[	O
ntype	int
]	O
.	O
init	*((*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct`,struct`,struct`))))->(int))
(	O
locker	*(struct)
)	O
;	O
if	O
(	O
rc	int
)	O
locker	*(struct)
->	O
flags	int
=	O
MU_LOCKER_NULL	O
;	O
return	O
rc	int
;	O
}	O
}	O
else	O
locker	*(struct)
->	O
flags	int
=	O
new_flags	int
;	O
return	O
0	int
;	O
}	O
int	O
mu_locker_set_flags	(*(struct),int)->(int)
(	O
mu_locker_t	*(struct)
locker	*(struct)
,	O
int	O
flags	int
)	O
{	O
return	O
mu_locker_mod_flags	(*(struct),int,enum(int,int,int))->(int)
(	O
locker	*(struct)
,	O
flags	int
,	O
mu_locker_assign	int
)	O
;	O
}	O
int	O
mu_locker_set_expire_time	(*(struct),int)->(int)
(	O
mu_locker_t	*(struct)
locker	*(struct)
,	O
int	O
etime	int
)	O
{	O
if	O
(	O
!	O
locker	*(struct)
)	O
return	O
MU_ERR_LOCKER_NULL	O
;	O
if	O
(	O
etime	int
<=	O
0	int
)	O
return	O
EINVAL	int
;	O
locker	*(struct)
->	O
expire_time	int
=	O
etime	int
;	O
return	O
0	int
;	O
}	O
int	O
mu_locker_set_retries	(*(struct),int)->(int)
(	O
mu_locker_t	*(struct)
locker	*(struct)
,	O
int	O
retries	int
)	O
{	O
if	O
(	O
!	O
locker	*(struct)
)	O
return	O
MU_ERR_LOCKER_NULL	O
;	O
if	O
(	O
retries	int
<=	O
0	int
)	O
return	O
EINVAL	int
;	O
locker	*(struct)
->	O
retries	int
=	O
retries	int
;	O
return	O
0	int
;	O
}	O
int	O
mu_locker_set_retry_sleep	(*(struct),int)->(int)
(	O
mu_locker_t	*(struct)
locker	*(struct)
,	O
int	O
retry_sleep	int
)	O
{	O
if	O
(	O
!	O
locker	*(struct)
)	O
return	O
MU_ERR_LOCKER_NULL	O
;	O
if	O
(	O
retry_sleep	int
<=	O
0	int
)	O
return	O
EINVAL	int
;	O
locker	*(struct)
->	O
retry_sleep	int
=	O
retry_sleep	int
;	O
return	O
0	int
;	O
}	O
int	O
mu_locker_set_external	(*(struct),*(char))->(int)
(	O
mu_locker_t	*(struct)
locker	*(struct)
,	O
const	O
char	O
*	O
program	*(char)
)	O
{	O
char	O
*	O
p	*(char)
=	O
NULL	O
;	O
if	O
(	O
!	O
locker	*(struct)
)	O
return	O
MU_ERR_LOCKER_NULL	O
;	O
if	O
(	O
MU_LOCKER_TYPE	O
(	O
locker	*(struct)
)	O
!=	O
MU_LOCKER_TYPE_EXTERNAL	int
)	O
return	O
EINVAL	int
;	O
if	O
(	O
program	*(char)
!=	O
0	int
)	O
{	O
p	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
program	*(char)
)	O
;	O
if	O
(	O
!	O
p	*(char)
)	O
return	O
ENOMEM	int
;	O
}	O
free	(*(void))->(void)
(	O
locker	*(struct)
->	O
data	*(void)
.	O
external	struct(*(char))
.	O
name	*(char)
)	O
;	O
locker	*(struct)
->	O
data	*(void)
.	O
external	struct(*(char))
.	O
name	*(char)
=	O
p	*(char)
;	O
return	O
0	int
;	O
}	O
int	O
mu_locker_get_flags	(*(struct),*(int))->(int)
(	O
mu_locker_t	*(struct)
locker	*(struct)
,	O
int	O
*	O
flags	int
)	O
{	O
if	O
(	O
!	O
locker	*(struct)
)	O
return	O
MU_ERR_LOCKER_NULL	O
;	O
if	O
(	O
!	O
flags	int
)	O
return	O
EINVAL	int
;	O
*	O
flags	int
=	O
locker	*(struct)
->	O
flags	int
;	O
return	O
0	int
;	O
}	O
int	O
mu_locker_get_expire_time	(*(struct),*(int))->(int)
(	O
mu_locker_t	*(struct)
locker	*(struct)
,	O
int	O
*	O
ptime	*(int)
)	O
{	O
if	O
(	O
!	O
locker	*(struct)
)	O
return	O
MU_ERR_LOCKER_NULL	O
;	O
if	O
(	O
!	O
ptime	*(int)
)	O
return	O
EINVAL	int
;	O
*	O
ptime	*(int)
=	O
locker	*(struct)
->	O
expire_time	int
;	O
return	O
0	int
;	O
}	O
int	O
mu_locker_get_retries	(*(struct),*(int))->(int)
(	O
mu_locker_t	*(struct)
locker	*(struct)
,	O
int	O
*	O
retries	int
)	O
{	O
if	O
(	O
!	O
locker	*(struct)
)	O
return	O
MU_ERR_LOCKER_NULL	O
;	O
if	O
(	O
!	O
retries	int
)	O
return	O
EINVAL	int
;	O
*	O
retries	int
=	O
locker	*(struct)
->	O
retries	int
;	O
return	O
0	int
;	O
}	O
int	O
mu_locker_get_retry_sleep	(*(struct),*(int))->(int)
(	O
mu_locker_t	*(struct)
locker	*(struct)
,	O
int	O
*	O
retry_sleep	int
)	O
{	O
if	O
(	O
!	O
locker	*(struct)
)	O
return	O
MU_ERR_LOCKER_NULL	O
;	O
if	O
(	O
!	O
retry_sleep	int
)	O
return	O
EINVAL	int
;	O
*	O
retry_sleep	int
=	O
locker	*(struct)
->	O
retry_sleep	int
;	O
return	O
0	int
;	O
}	O
int	O
mu_locker_create	(*(*(struct)),*(char),int)->(int)
(	O
mu_locker_t	*(struct)
*	O
plocker	*(*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct(*`,*`),struct(*`),struct(int)))))
,	O
const	O
char	O
*	O
fname	*(char)
,	O
int	O
flags	int
)	O
{	O
unsigned	O
type	enum(int,int,int,int)
;	O
mu_locker_t	*(struct)
l	*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct(*(char),*(char)),struct(*(char)),struct(int))))
;	O
char	O
*	O
filename	*(char)
;	O
int	O
err	long
=	O
0	int
;	O
if	O
(	O
plocker	*(*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct(*`,*`),struct(*`),struct(int)))))
==	O
NULL	O
)	O
return	O
MU_ERR_OUT_PTR_NULL	O
;	O
if	O
(	O
fname	*(char)
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
if	O
(	O
(	O
err	long
=	O
mu_unroll_symlink	(*(char),*(*(char)))->(int)
(	O
fname	*(char)
,	O
&	O
filename	*(char)
)	O
)	O
)	O
{	O
if	O
(	O
err	long
==	O
ENOENT	int
)	O
{	O
char	O
*	O
p	*(char)
,	O
*	O
new_name	*(char)
,	O
*	O
tmp	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
fname	*(char)
)	O
;	O
if	O
(	O
!	O
tmp	*(char)
)	O
return	O
ENOMEM	int
;	O
p	*(char)
=	O
strrchr	(*(char),int)->(*(char))
(	O
tmp	*(char)
,	O
'/'	O
)	O
;	O
if	O
(	O
!	O
p	*(char)
)	O
filename	*(char)
=	O
tmp	*(char)
;	O
else	O
{	O
*	O
p	*(char)
=	O
0	int
;	O
err	long
=	O
mu_unroll_symlink	(*(char),*(*(char)))->(int)
(	O
tmp	*(char)
,	O
&	O
filename	*(char)
)	O
;	O
if	O
(	O
err	long
)	O
{	O
free	(*(void))->(void)
(	O
tmp	*(char)
)	O
;	O
return	O
err	long
;	O
}	O
new_name	*(char)
=	O
mu_make_file_name_suf	(*(char),*(char),*(char))->(*(char))
(	O
filename	*(char)
,	O
p	*(char)
+	O
1	int
,	O
NULL	O
)	O
;	O
free	(*(void))->(void)
(	O
tmp	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
filename	*(char)
)	O
;	O
if	O
(	O
!	O
new_name	*(char)
)	O
return	O
ENOMEM	int
;	O
filename	*(char)
=	O
new_name	*(char)
;	O
}	O
}	O
else	O
return	O
err	long
;	O
}	O
l	*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct(*(char),*(char)),struct(*(char)),struct(int))))
=	O
calloc	(long,long)->(*(void))
(	O
1	int
,	O
sizeof	O
(	O
*	O
l	*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct(*(char),*(char)),struct(*(char)),struct(int))))
)	O
)	O
;	O
if	O
(	O
l	*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct(*(char),*(char)),struct(*(char)),struct(int))))
==	O
NULL	O
)	O
{	O
free	(*(void))->(void)
(	O
filename	*(char)
)	O
;	O
return	O
ENOMEM	int
;	O
}	O
l	*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct(*(char),*(char)),struct(*(char)),struct(int))))
->	O
file	*(char)
=	O
filename	*(char)
;	O
if	O
(	O
l	*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct(*(char),*(char)),struct(*(char)),struct(int))))
->	O
file	*(char)
==	O
NULL	O
)	O
{	O
free	(*(void))->(void)
(	O
l	*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct(*(char),*(char)),struct(*(char)),struct(int))))
)	O
;	O
return	O
ENOMEM	int
;	O
}	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
filename	*(char)
,	O
"/dev/null"	*(char)
)	O
==	O
0	int
)	O
l	*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct(*(char),*(char)),struct(*(char)),struct(int))))
->	O
flags	int
=	O
MU_LOCKER_NULL	O
;	O
else	O
if	O
(	O
flags	int
)	O
l	*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct(*(char),*(char)),struct(*(char)),struct(int))))
->	O
flags	int
=	O
flags	int
;	O
else	O
l	*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct(*(char),*(char)),struct(*(char)),struct(int))))
->	O
flags	int
=	O
mu_locker_default_flags	int
;	O
l	*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct(*(char),*(char)),struct(*(char)),struct(int))))
->	O
expire_time	int
=	O
mu_locker_expire_timeout	long
;	O
l	*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct(*(char),*(char)),struct(*(char)),struct(int))))
->	O
retries	int
=	O
mu_locker_retry_count	long
;	O
l	*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct(*(char),*(char)),struct(*(char)),struct(int))))
->	O
retry_sleep	int
=	O
mu_locker_retry_timeout	long
;	O
type	enum(int,int,int,int)
=	O
MU_LOCKER_TYPE	O
(	O
l	*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct(*(char),*(char)),struct(*(char)),struct(int))))
)	O
;	O
if	O
(	O
type	enum(int,int,int,int)
>=	O
MU_LOCKER_NTYPES	O
)	O
{	O
free	(*(void))->(void)
(	O
l	*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct(*(char),*(char)),struct(*(char)),struct(int))))
->	O
file	*(char)
)	O
;	O
return	O
EINVAL	int
;	O
}	O
err	long
=	O
locker_tab	struct(*((*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct`,struct`,struct`))))->(int)),*((*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct`,struct`,struct`))))->(void)),*((*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct`,struct`,struct`))))->(int)),*((*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct`,struct`,struct`))),enum(int,int,int))->(int)),*((*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct`,struct`,struct`))))->(int)))
[	O
type	enum(int,int,int,int)
]	O
.	O
init	*((*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct`,struct`,struct`))))->(int))
?	O
locker_tab	struct(*((*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct`,struct`,struct`))))->(int)),*((*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct`,struct`,struct`))))->(void)),*((*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct`,struct`,struct`))))->(int)),*((*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct`,struct`,struct`))),enum(int,int,int))->(int)),*((*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct`,struct`,struct`))))->(int)))
[	O
type	enum(int,int,int,int)
]	O
.	O
init	*((*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct`,struct`,struct`))))->(int))
(	O
l	*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct(*(char),*(char)),struct(*(char)),struct(int))))
)	O
:	O
0	int
;	O
if	O
(	O
err	long
)	O
{	O
mu_locker_destroy	(*(*(struct)))->(void)
(	O
&	O
l	*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct(*(char),*(char)),struct(*(char)),struct(int))))
)	O
;	O
return	O
err	long
;	O
}	O
*	O
plocker	*(*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct(*`,*`),struct(*`),struct(int)))))
=	O
l	*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct(*(char),*(char)),struct(*(char)),struct(int))))
;	O
return	O
0	int
;	O
}	O
void	O
mu_locker_destroy	(*(*(struct)))->(void)
(	O
mu_locker_t	*(struct)
*	O
plocker	*(*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct(*`,*`),struct(*`),struct(int)))))
)	O
{	O
if	O
(	O
plocker	*(*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct(*`,*`),struct(*`),struct(int)))))
&&	O
*	O
plocker	*(*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct(*`,*`),struct(*`),struct(int)))))
)	O
{	O
unsigned	O
type	enum(int,int,int,int)
=	O
MU_LOCKER_TYPE	O
(	O
*	O
plocker	*(*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct(*`,*`),struct(*`),struct(int)))))
)	O
;	O
if	O
(	O
type	enum(int,int,int,int)
<	O
MU_LOCKER_NTYPES	O
)	O
{	O
if	O
(	O
locker_tab	struct(*((*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct`,struct`,struct`))))->(int)),*((*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct`,struct`,struct`))))->(void)),*((*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct`,struct`,struct`))))->(int)),*((*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct`,struct`,struct`))),enum(int,int,int))->(int)),*((*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct`,struct`,struct`))))->(int)))
[	O
type	enum(int,int,int,int)
]	O
.	O
destroy	*((*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct`,struct`,struct`))))->(void))
)	O
locker_tab	struct(*((*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct`,struct`,struct`))))->(int)),*((*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct`,struct`,struct`))))->(void)),*((*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct`,struct`,struct`))))->(int)),*((*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct`,struct`,struct`))),enum(int,int,int))->(int)),*((*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct`,struct`,struct`))))->(int)))
[	O
type	enum(int,int,int,int)
]	O
.	O
destroy	*((*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct`,struct`,struct`))))->(void))
(	O
*	O
plocker	*(*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct(*`,*`),struct(*`),struct(int)))))
)	O
;	O
free	(*(void))->(void)
(	O
(	O
*	O
plocker	*(*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct(*`,*`),struct(*`),struct(int)))))
)	O
->	O
file	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
*	O
plocker	*(*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct(*`,*`),struct(*`),struct(int)))))
)	O
;	O
*	O
plocker	*(*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct(*`,*`),struct(*`),struct(int)))))
=	O
NULL	O
;	O
}	O
}	O
}	O
int	O
mu_locker_lock_mode	(*(struct),enum(int,int,int))->(int)
(	O
mu_locker_t	*(struct)
lock	*((*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct`,struct`,struct`))),enum(int,int,int))->(int))
,	O
enum	O
mu_locker_mode	enum(int,int,int)
mode	enum(int,int,int)
)	O
{	O
int	O
rc	int
;	O
unsigned	O
type	enum(int,int,int,int)
;	O
unsigned	O
retries	int
=	O
1	int
;	O
if	O
(	O
lock	*((*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct`,struct`,struct`))),enum(int,int,int))->(int))
==	O
NULL	O
||	O
(	O
type	enum(int,int,int,int)
=	O
MU_LOCKER_TYPE	O
(	O
lock	*((*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct`,struct`,struct`))),enum(int,int,int))->(int))
)	O
)	O
>=	O
MU_LOCKER_NTYPES	O
)	O
return	O
EINVAL	int
;	O
if	O
(	O
locker_tab	struct(*((*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct`,struct`,struct`))))->(int)),*((*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct`,struct`,struct`))))->(void)),*((*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct`,struct`,struct`))))->(int)),*((*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct`,struct`,struct`))),enum(int,int,int))->(int)),*((*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct`,struct`,struct`))))->(int)))
[	O
type	enum(int,int,int,int)
]	O
.	O
prelock	*((*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct`,struct`,struct`))))->(int))
&&	O
(	O
rc	int
=	O
locker_tab	struct(*((*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct`,struct`,struct`))))->(int)),*((*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct`,struct`,struct`))))->(void)),*((*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct`,struct`,struct`))))->(int)),*((*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct`,struct`,struct`))),enum(int,int,int))->(int)),*((*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct`,struct`,struct`))))->(int)))
[	O
type	enum(int,int,int,int)
]	O
.	O
prelock	*((*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct`,struct`,struct`))))->(int))
(	O
lock	*((*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct`,struct`,struct`))),enum(int,int,int))->(int))
)	O
)	O
)	O
return	O
rc	int
;	O
if	O
(	O
lock	*((*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct`,struct`,struct`))),enum(int,int,int))->(int))
->	O
refcnt	int
>	O
0	int
)	O
{	O
lock	*((*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct`,struct`,struct`))),enum(int,int,int))->(int))
->	O
refcnt	int
++	O
;	O
if	O
(	O
mode	enum(int,int,int)
==	O
lock	*((*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct`,struct`,struct`))),enum(int,int,int))->(int))
->	O
mode	enum(int,int,int)
)	O
return	O
0	int
;	O
}	O
lock	*((*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct`,struct`,struct`))),enum(int,int,int))->(int))
->	O
mode	enum(int,int,int)
=	O
mode	enum(int,int,int)
;	O
if	O
(	O
lock	*((*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct`,struct`,struct`))),enum(int,int,int))->(int))
->	O
flags	int
&	O
MU_LOCKER_RETRY	int
)	O
retries	int
=	O
lock	*((*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct`,struct`,struct`))),enum(int,int,int))->(int))
->	O
retries	int
;	O
if	O
(	O
locker_tab	struct(*((*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct`,struct`,struct`))))->(int)),*((*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct`,struct`,struct`))))->(void)),*((*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct`,struct`,struct`))))->(int)),*((*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct`,struct`,struct`))),enum(int,int,int))->(int)),*((*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct`,struct`,struct`))))->(int)))
[	O
type	enum(int,int,int,int)
]	O
.	O
lock	*((*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct`,struct`,struct`))),enum(int,int,int))->(int))
)	O
{	O
while	O
(	O
retries	int
--	O
)	O
{	O
rc	int
=	O
locker_tab	struct(*((*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct`,struct`,struct`))))->(int)),*((*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct`,struct`,struct`))))->(void)),*((*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct`,struct`,struct`))))->(int)),*((*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct`,struct`,struct`))),enum(int,int,int))->(int)),*((*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct`,struct`,struct`))))->(int)))
[	O
type	enum(int,int,int,int)
]	O
.	O
lock	*((*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct`,struct`,struct`))),enum(int,int,int))->(int))
(	O
lock	*((*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct`,struct`,struct`))),enum(int,int,int))->(int))
,	O
mode	enum(int,int,int)
)	O
;	O
if	O
(	O
rc	int
==	O
EAGAIN	int
&&	O
retries	int
)	O
{	O
sleep	(int)->(int)
(	O
lock	*((*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct`,struct`,struct`))),enum(int,int,int))->(int))
->	O
retry_sleep	int
)	O
;	O
continue	O
;	O
}	O
if	O
(	O
rc	int
==	O
0	int
)	O
lock	*((*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct`,struct`,struct`))),enum(int,int,int))->(int))
->	O
refcnt	int
++	O
;	O
break	O
;	O
}	O
}	O
else	O
rc	int
=	O
0	int
;	O
return	O
rc	int
;	O
}	O
int	O
mu_locker_lock	(*(struct))->(int)
(	O
mu_locker_t	*(struct)
lock	*((*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct`,struct`,struct`))),enum(int,int,int))->(int))
)	O
{	O
return	O
mu_locker_lock_mode	(*(struct),enum(int,int,int))->(int)
(	O
lock	*((*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct`,struct`,struct`))),enum(int,int,int))->(int))
,	O
mu_lck_exc	int
)	O
;	O
}	O
int	O
mu_locker_unlock	(*(struct))->(int)
(	O
mu_locker_t	*(struct)
lock	*((*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct`,struct`,struct`))),enum(int,int,int))->(int))
)	O
{	O
int	O
rc	int
=	O
0	int
;	O
unsigned	O
type	enum(int,int,int,int)
;	O
if	O
(	O
!	O
lock	*((*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct`,struct`,struct`))),enum(int,int,int))->(int))
)	O
return	O
MU_ERR_LOCKER_NULL	O
;	O
if	O
(	O
lock	*((*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct`,struct`,struct`))),enum(int,int,int))->(int))
->	O
refcnt	int
==	O
0	int
)	O
return	O
MU_ERR_LOCK_NOT_HELD	O
;	O
if	O
(	O
(	O
rc	int
=	O
check_file_permissions	(*(char))->(int)
(	O
lock	*((*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct`,struct`,struct`))),enum(int,int,int))->(int))
->	O
file	*(char)
)	O
)	O
)	O
return	O
rc	int
;	O
if	O
(	O
--	O
lock	*((*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct`,struct`,struct`))),enum(int,int,int))->(int))
->	O
refcnt	int
>	O
0	int
)	O
return	O
0	int
;	O
type	enum(int,int,int,int)
=	O
MU_LOCKER_TYPE	O
(	O
lock	*((*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct`,struct`,struct`))),enum(int,int,int))->(int))
)	O
;	O
if	O
(	O
locker_tab	struct(*((*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct`,struct`,struct`))))->(int)),*((*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct`,struct`,struct`))))->(void)),*((*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct`,struct`,struct`))))->(int)),*((*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct`,struct`,struct`))),enum(int,int,int))->(int)),*((*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct`,struct`,struct`))))->(int)))
[	O
type	enum(int,int,int,int)
]	O
.	O
unlock	*((*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct`,struct`,struct`))))->(int))
)	O
rc	int
=	O
locker_tab	struct(*((*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct`,struct`,struct`))))->(int)),*((*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct`,struct`,struct`))))->(void)),*((*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct`,struct`,struct`))))->(int)),*((*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct`,struct`,struct`))),enum(int,int,int))->(int)),*((*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct`,struct`,struct`))))->(int)))
[	O
type	enum(int,int,int,int)
]	O
.	O
unlock	*((*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct`,struct`,struct`))))->(int))
(	O
lock	*((*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct`,struct`,struct`))),enum(int,int,int))->(int))
)	O
;	O
else	O
rc	int
=	O
0	int
;	O
return	O
rc	int
;	O
}	O
int	O
mu_locker_remove_lock	(*(struct))->(int)
(	O
mu_locker_t	*(struct)
lock	*((*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct`,struct`,struct`))),enum(int,int,int))->(int))
)	O
{	O
if	O
(	O
!	O
lock	*((*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct`,struct`,struct`))),enum(int,int,int))->(int))
)	O
return	O
MU_ERR_LOCKER_NULL	O
;	O
lock	*((*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct`,struct`,struct`))),enum(int,int,int))->(int))
->	O
refcnt	int
=	O
1	int
;	O
return	O
mu_locker_unlock	(*(struct))->(int)
(	O
lock	*((*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct`,struct`,struct`))),enum(int,int,int))->(int))
)	O
;	O
}	O
static	O
void	O
expire_stale_lock	(*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct(*`,*`),struct(*`),struct(int)))))->(void)
(	O
mu_locker_t	*(struct)
lock	*((*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct`,struct`,struct`))),enum(int,int,int))->(int))
)	O
{	O
int	O
stale	int
=	O
0	int
;	O
int	O
fd	int
=	O
open	(*(char),int)->(int)
(	O
lock	*((*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct`,struct`,struct`))),enum(int,int,int))->(int))
->	O
data	*(void)
.	O
dot	struct(*(char),*(char))
.	O
dotlock	*(char)
,	O
O_RDONLY	int
)	O
;	O
if	O
(	O
fd	int
==	O
-	O
1	int
)	O
return	O
;	O
if	O
(	O
lock	*((*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct`,struct`,struct`))),enum(int,int,int))->(int))
->	O
flags	int
&	O
MU_LOCKER_PID	int
)	O
{	O
char	O
buf	*(char)
[	O
16	int
]	O
;	O
pid_t	int
pid	int
;	O
int	O
nread	int
=	O
read	*((*(void),*(char),long)->(long))
(	O
fd	int
,	O
buf	*(char)
,	O
sizeof	O
(	O
buf	*(char)
)	O
-	O
1	int
)	O
;	O
if	O
(	O
nread	int
>	O
0	int
)	O
{	O
buf	*(char)
[	O
nread	int
]	O
=	O
'\0'	O
;	O
pid	int
=	O
strtol	(*(char),*(*(char)),int)->(long)
(	O
buf	*(char)
,	O
NULL	O
,	O
10	int
)	O
;	O
if	O
(	O
pid	int
>	O
0	int
)	O
{	O
if	O
(	O
kill	(int,int)->(int)
(	O
pid	int
,	O
0	int
)	O
==	O
-	O
1	int
)	O
stale	int
=	O
1	int
;	O
}	O
else	O
stale	int
=	O
1	int
;	O
}	O
}	O
if	O
(	O
lock	*((*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct`,struct`,struct`))),enum(int,int,int))->(int))
->	O
flags	int
&	O
MU_LOCKER_TIME	int
)	O
{	O
struct	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
stbuf	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
;	O
fstat	(int,*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))))->(int)
(	O
fd	int
,	O
&	O
stbuf	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
)	O
;	O
if	O
(	O
(	O
time	struct(long,long)
(	O
NULL	O
)	O
-	O
stbuf	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_mtime	O
)	O
>	O
lock	*((*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct`,struct`,struct`))),enum(int,int,int))->(int))
->	O
expire_time	int
)	O
stale	int
=	O
1	int
;	O
}	O
close	*((*(void))->(int))
(	O
fd	int
)	O
;	O
if	O
(	O
stale	int
)	O
unlink	(*(char))->(int)
(	O
lock	*((*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct`,struct`,struct`))),enum(int,int,int))->(int))
->	O
data	*(void)
.	O
dot	struct(*(char),*(char))
.	O
dotlock	*(char)
)	O
;	O
}	O
static	O
int	O
init_dotlock	(*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct(*`,*`),struct(*`),struct(int)))))->(int)
(	O
mu_locker_t	*(struct)
locker	*(struct)
)	O
{	O
char	O
*	O
tmp	*(char)
,	O
*	O
p	*(char)
;	O
tmp	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
locker	*(struct)
->	O
file	*(char)
)	O
;	O
if	O
(	O
!	O
tmp	*(char)
)	O
return	O
ENOMEM	int
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
tmp	*(char)
,	O
locker	*(struct)
->	O
file	*(char)
)	O
;	O
p	*(char)
=	O
strrchr	(*(char),int)->(*(char))
(	O
tmp	*(char)
,	O
'/'	O
)	O
;	O
if	O
(	O
!	O
p	*(char)
)	O
{	O
free	(*(void))->(void)
(	O
tmp	*(char)
)	O
;	O
tmp	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
"."	*(char)
)	O
;	O
if	O
(	O
!	O
tmp	*(char)
)	O
return	O
ENOMEM	int
;	O
}	O
else	O
*	O
p	*(char)
=	O
0	int
;	O
if	O
(	O
access	(*(char),int)->(int)
(	O
tmp	*(char)
,	O
W_OK	int
)	O
)	O
{	O
free	(*(void))->(void)
(	O
tmp	*(char)
)	O
;	O
return	O
mu_locker_set_flags	(*(struct),int)->(int)
(	O
locker	*(struct)
,	O
MU_LOCKER_KERNEL	O
|	O
MU_LOCKER_OPTIONS	O
(	O
locker	*(struct)
->	O
flags	int
)	O
)	O
;	O
}	O
free	(*(void))->(void)
(	O
tmp	*(char)
)	O
;	O
locker	*(struct)
->	O
data	*(void)
.	O
dot	struct(*(char),*(char))
.	O
dotlock	*(char)
=	O
malloc	(long)->(*(void))
(	O
strlen	(*(char))->(long)
(	O
locker	*(struct)
->	O
file	*(char)
)	O
+	O
sizeof	O
(	O
DOTLOCK_SUFFIX	*(char)
)	O
)	O
;	O
if	O
(	O
!	O
locker	*(struct)
->	O
data	*(void)
.	O
dot	struct(*(char),*(char))
.	O
dotlock	*(char)
)	O
return	O
ENOMEM	int
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
locker	*(struct)
->	O
data	*(void)
.	O
dot	struct(*(char),*(char))
.	O
dotlock	*(char)
,	O
locker	*(struct)
->	O
file	*(char)
)	O
;	O
strcat	(*(char),*(char))->(*(char))
(	O
locker	*(struct)
->	O
data	*(void)
.	O
dot	struct(*(char),*(char))
.	O
dotlock	*(char)
,	O
DOTLOCK_SUFFIX	*(char)
)	O
;	O
return	O
0	int
;	O
}	O
static	O
void	O
destroy_dotlock	(*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct(*`,*`),struct(*`),struct(int)))))->(void)
(	O
mu_locker_t	*(struct)
locker	*(struct)
)	O
{	O
free	(*(void))->(void)
(	O
locker	*(struct)
->	O
data	*(void)
.	O
dot	struct(*(char),*(char))
.	O
dotlock	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
locker	*(struct)
->	O
data	*(void)
.	O
dot	struct(*(char),*(char))
.	O
nfslock	*(char)
)	O
;	O
}	O
static	O
int	O
lock_dotlock	(*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct(*`,*`),struct(*`),struct(int)))),enum(int,int,int))->(int)
(	O
mu_locker_t	*(struct)
locker	*(struct)
,	O
enum	O
mu_locker_mode	enum(int,int,int)
mode	enum(int,int,int)
)	O
{	O
int	O
rc	int
;	O
char	O
*	O
host	*(*(char))
=	O
NULL	O
;	O
char	O
pid	int
[	O
11	int
]	O
;	O
char	O
now	array(char)
[	O
11	int
]	O
;	O
size_t	long
sz	long
=	O
0	int
;	O
int	O
err	long
=	O
0	int
;	O
int	O
fd	int
;	O
if	O
(	O
locker	*(struct)
->	O
data	*(void)
.	O
dot	struct(*(char),*(char))
.	O
nfslock	*(char)
)	O
{	O
unlink	(*(char))->(int)
(	O
locker	*(struct)
->	O
data	*(void)
.	O
dot	struct(*(char),*(char))
.	O
nfslock	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
locker	*(struct)
->	O
data	*(void)
.	O
dot	struct(*(char),*(char))
.	O
nfslock	*(char)
)	O
;	O
locker	*(struct)
->	O
data	*(void)
.	O
dot	struct(*(char),*(char))
.	O
nfslock	*(char)
=	O
NULL	O
;	O
}	O
expire_stale_lock	(*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct(*`,*`),struct(*`),struct(int)))))->(void)
(	O
locker	*(struct)
)	O
;	O
rc	int
=	O
mu_get_host_name	(*(*(char)))->(int)
(	O
&	O
host	*(*(char))
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
snprintf	(*(char),long,*(char))->(int)
(	O
now	array(char)
,	O
sizeof	O
(	O
now	array(char)
)	O
,	O
"%lu"	*(char)
,	O
(	O
unsigned	O
long	O
)	O
time	struct(long,long)
(	O
0	int
)	O
)	O
;	O
now	array(char)
[	O
sizeof	O
(	O
now	array(char)
)	O
-	O
1	int
]	O
=	O
0	int
;	O
snprintf	(*(char),long,*(char))->(int)
(	O
pid	int
,	O
sizeof	O
(	O
pid	int
)	O
,	O
"%lu"	*(char)
,	O
(	O
unsigned	O
long	O
)	O
getpid	()->(int)
(	O
)	O
)	O
;	O
pid	int
[	O
sizeof	O
(	O
pid	int
)	O
-	O
1	int
]	O
=	O
0	int
;	O
sz	long
=	O
strlen	(*(char))->(long)
(	O
locker	*(struct)
->	O
file	*(char)
)	O
+	O
1	int
+	O
strlen	(*(char))->(long)
(	O
pid	int
)	O
+	O
1	int
+	O
strlen	(*(char))->(long)
(	O
now	array(char)
)	O
+	O
1	int
+	O
strlen	(*(char))->(long)
(	O
host	*(*(char))
)	O
+	O
1	int
;	O
locker	*(struct)
->	O
data	*(void)
.	O
dot	struct(*(char),*(char))
.	O
nfslock	*(char)
=	O
malloc	(long)->(*(void))
(	O
sz	long
)	O
;	O
if	O
(	O
!	O
locker	*(struct)
->	O
data	*(void)
.	O
dot	struct(*(char),*(char))
.	O
nfslock	*(char)
)	O
{	O
free	(*(void))->(void)
(	O
host	*(*(char))
)	O
;	O
return	O
ENOMEM	int
;	O
}	O
snprintf	(*(char),long,*(char))->(int)
(	O
locker	*(struct)
->	O
data	*(void)
.	O
dot	struct(*(char),*(char))
.	O
nfslock	*(char)
,	O
sz	long
,	O
"%s.%s.%s.%s"	*(char)
,	O
locker	*(struct)
->	O
file	*(char)
,	O
pid	int
,	O
now	array(char)
,	O
host	*(*(char))
)	O
;	O
free	(*(void))->(void)
(	O
host	*(*(char))
)	O
;	O
fd	int
=	O
open	(*(char),int)->(int)
(	O
locker	*(struct)
->	O
data	*(void)
.	O
dot	struct(*(char),*(char))
.	O
nfslock	*(char)
,	O
O_WRONLY	int
|	O
O_CREAT	int
|	O
O_EXCL	int
,	O
LOCKFILE_ATTR	int
)	O
;	O
if	O
(	O
fd	int
==	O
-	O
1	int
)	O
{	O
if	O
(	O
errno	O
==	O
EEXIST	int
)	O
return	O
EAGAIN	int
;	O
else	O
return	O
errno	O
;	O
}	O
close	*((*(void))->(int))
(	O
fd	int
)	O
;	O
if	O
(	O
link	(*(char),*(char))->(int)
(	O
locker	*(struct)
->	O
data	*(void)
.	O
dot	struct(*(char),*(char))
.	O
nfslock	*(char)
,	O
locker	*(struct)
->	O
data	*(void)
.	O
dot	struct(*(char),*(char))
.	O
dotlock	*(char)
)	O
==	O
-	O
1	int
)	O
{	O
unlink	(*(char))->(int)
(	O
locker	*(struct)
->	O
data	*(void)
.	O
dot	struct(*(char),*(char))
.	O
nfslock	*(char)
)	O
;	O
if	O
(	O
errno	O
==	O
EEXIST	int
)	O
return	O
MU_ERR_LOCK_CONFLICT	O
;	O
return	O
errno	O
;	O
}	O
if	O
(	O
(	O
fd	int
=	O
open	(*(char),int)->(int)
(	O
locker	*(struct)
->	O
data	*(void)
.	O
dot	struct(*(char),*(char))
.	O
dotlock	*(char)
,	O
O_RDWR	int
)	O
)	O
==	O
-	O
1	int
)	O
{	O
unlink	(*(char))->(int)
(	O
locker	*(struct)
->	O
data	*(void)
.	O
dot	struct(*(char),*(char))
.	O
nfslock	*(char)
)	O
;	O
return	O
errno	O
;	O
}	O
err	long
=	O
stat_check	(*(char),int,int)->(int)
(	O
locker	*(struct)
->	O
data	*(void)
.	O
dot	struct(*(char),*(char))
.	O
nfslock	*(char)
,	O
fd	int
,	O
2	int
)	O
;	O
if	O
(	O
err	long
)	O
{	O
unlink	(*(char))->(int)
(	O
locker	*(struct)
->	O
data	*(void)
.	O
dot	struct(*(char),*(char))
.	O
nfslock	*(char)
)	O
;	O
if	O
(	O
err	long
==	O
EINVAL	int
)	O
return	O
MU_ERR_LOCK_BAD_LOCK	O
;	O
return	O
errno	O
;	O
}	O
unlink	(*(char))->(int)
(	O
locker	*(struct)
->	O
data	*(void)
.	O
dot	struct(*(char),*(char))
.	O
nfslock	*(char)
)	O
;	O
assert	O
(	O
locker	*(struct)
->	O
refcnt	int
==	O
0	int
)	O
;	O
if	O
(	O
locker	*(struct)
->	O
flags	int
&	O
MU_LOCKER_PID	int
)	O
{	O
char	O
buf	*(char)
[	O
16	int
]	O
;	O
sprintf	(*(char),*(char))->(int)
(	O
buf	*(char)
,	O
"%ld"	*(char)
,	O
(	O
long	O
)	O
getpid	()->(int)
(	O
)	O
)	O
;	O
write	*((*(void),*(char),long)->(long))
(	O
fd	int
,	O
buf	*(char)
,	O
strlen	(*(char))->(long)
(	O
buf	*(char)
)	O
)	O
;	O
}	O
close	*((*(void))->(int))
(	O
fd	int
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
unlock_dotlock	(*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct(*`,*`),struct(*`),struct(int)))))->(int)
(	O
mu_locker_t	*(struct)
locker	*(struct)
)	O
{	O
if	O
(	O
unlink	(*(char))->(int)
(	O
locker	*(struct)
->	O
data	*(void)
.	O
dot	struct(*(char),*(char))
.	O
dotlock	*(char)
)	O
==	O
-	O
1	int
)	O
{	O
int	O
err	long
=	O
errno	O
;	O
if	O
(	O
err	long
==	O
ENOENT	int
)	O
{	O
locker	*(struct)
->	O
refcnt	int
=	O
0	int
;	O
err	long
=	O
MU_ERR_LOCK_NOT_HELD	O
;	O
return	O
err	long
;	O
}	O
return	O
err	long
;	O
}	O
return	O
0	int
;	O
}	O
int	O
mu_locker_touchlock	(*(struct))->(int)
(	O
mu_locker_t	*(struct)
lock	*((*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct`,struct`,struct`))),enum(int,int,int))->(int))
)	O
{	O
if	O
(	O
!	O
lock	*((*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct`,struct`,struct`))),enum(int,int,int))->(int))
)	O
return	O
MU_ERR_LOCKER_NULL	O
;	O
if	O
(	O
MU_LOCKER_TYPE	O
(	O
lock	*((*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct`,struct`,struct`))),enum(int,int,int))->(int))
)	O
!=	O
MU_LOCKER_TYPE_DOTLOCK	int
)	O
return	O
0	int
;	O
if	O
(	O
lock	*((*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct`,struct`,struct`))),enum(int,int,int))->(int))
->	O
refcnt	int
>	O
0	int
)	O
return	O
utime	(*(char),*(struct(long,long)))->(int)
(	O
lock	*((*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct`,struct`,struct`))),enum(int,int,int))->(int))
->	O
data	*(void)
.	O
dot	struct(*(char),*(char))
.	O
dotlock	*(char)
,	O
NULL	O
)	O
;	O
return	O
MU_ERR_LOCK_NOT_HELD	O
;	O
}	O
static	O
int	O
init_kernel	(*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct(*`,*`),struct(*`),struct(int)))))->(int)
(	O
mu_locker_t	*(struct)
locker	*(struct)
)	O
{	O
return	O
0	int
;	O
}	O
static	O
int	O
lock_kernel	(*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct(*`,*`),struct(*`),struct(int)))),enum(int,int,int))->(int)
(	O
mu_locker_t	*(struct)
locker	*(struct)
,	O
enum	O
mu_locker_mode	enum(int,int,int)
mode	enum(int,int,int)
)	O
{	O
int	O
fd	int
;	O
struct	O
flock	struct(short,short,long,long,int)
fl	struct(short,short,long,long,int)
;	O
switch	O
(	O
mode	enum(int,int,int)
)	O
{	O
case	O
mu_lck_shr	int
:	O
case	O
mu_lck_opt	int
:	O
mode	enum(int,int,int)
=	O
O_RDONLY	int
;	O
fl	struct(short,short,long,long,int)
.	O
l_type	short
=	O
F_RDLCK	int
;	O
break	O
;	O
case	O
mu_lck_exc	int
:	O
mode	enum(int,int,int)
=	O
O_RDWR	int
;	O
fl	struct(short,short,long,long,int)
.	O
l_type	short
=	O
F_WRLCK	int
;	O
break	O
;	O
default	O
:	O
return	O
EINVAL	int
;	O
}	O
fd	int
=	O
open	(*(char),int)->(int)
(	O
locker	*(struct)
->	O
file	*(char)
,	O
O_RDWR	int
)	O
;	O
if	O
(	O
fd	int
==	O
-	O
1	int
)	O
return	O
errno	O
;	O
locker	*(struct)
->	O
data	*(void)
.	O
kernel	struct(int)
.	O
fd	int
=	O
fd	int
;	O
fl	struct(short,short,long,long,int)
.	O
l_whence	short
=	O
SEEK_SET	int
;	O
fl	struct(short,short,long,long,int)
.	O
l_start	long
=	O
0	int
;	O
fl	struct(short,short,long,long,int)
.	O
l_len	long
=	O
0	int
;	O
if	O
(	O
fcntl	(int,int)->(int)
(	O
fd	int
,	O
F_SETLK	int
,	O
&	O
fl	struct(short,short,long,long,int)
)	O
)	O
{	O
if	O
(	O
errno	O
==	O
EAGAIN	int
)	O
return	O
EAGAIN	int
;	O
return	O
errno	O
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
unlock_kernel	(*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct(*`,*`),struct(*`),struct(int)))))->(int)
(	O
mu_locker_t	*(struct)
locker	*(struct)
)	O
{	O
struct	O
flock	struct(short,short,long,long,int)
fl	struct(short,short,long,long,int)
;	O
fl	struct(short,short,long,long,int)
.	O
l_type	short
=	O
F_UNLCK	int
;	O
fl	struct(short,short,long,long,int)
.	O
l_whence	short
=	O
SEEK_SET	int
;	O
fl	struct(short,short,long,long,int)
.	O
l_start	long
=	O
0	int
;	O
fl	struct(short,short,long,long,int)
.	O
l_len	long
=	O
0	int
;	O
if	O
(	O
fcntl	(int,int)->(int)
(	O
locker	*(struct)
->	O
data	*(void)
.	O
kernel	struct(int)
.	O
fd	int
,	O
F_SETLK	int
,	O
&	O
fl	struct(short,short,long,long,int)
)	O
)	O
{	O
if	O
(	O
errno	O
==	O
EAGAIN	int
)	O
return	O
EAGAIN	int
;	O
return	O
errno	O
;	O
}	O
close	*((*(void))->(int))
(	O
locker	*(struct)
->	O
data	*(void)
.	O
kernel	struct(int)
.	O
fd	int
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
init_external	(*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct(*`,*`),struct(*`),struct(int)))))->(int)
(	O
mu_locker_t	*(struct)
locker	*(struct)
)	O
{	O
if	O
(	O
!	O
(	O
locker	*(struct)
->	O
data	*(void)
.	O
external	struct(*(char))
.	O
name	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
mu_locker_external_program	*(char)
?	O
mu_locker_external_program	*(char)
:	O
MU_LOCKER_EXTERNAL_PROGRAM	*(char)
)	O
)	O
)	O
return	O
ENOMEM	int
;	O
return	O
0	int
;	O
}	O
static	O
void	O
destroy_external	(*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct(*`,*`),struct(*`),struct(int)))))->(void)
(	O
mu_locker_t	*(struct)
locker	*(struct)
)	O
{	O
free	(*(void))->(void)
(	O
locker	*(struct)
->	O
data	*(void)
.	O
external	struct(*(char))
.	O
name	*(char)
)	O
;	O
}	O
static	O
int	O
external_locker	(*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct(*`,*`),struct(*`),struct(int)))),int)->(int)
(	O
mu_locker_t	*(struct)
l	*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct(*(char),*(char)),struct(*(char)),struct(int))))
,	O
int	O
lock	*((*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct`,struct`,struct`))),enum(int,int,int))->(int))
)	O
{	O
int	O
err	long
=	O
0	int
;	O
char	O
*	O
av	array(*(char))
[	O
6	int
]	O
;	O
int	O
ac	int
=	O
0	int
;	O
char	O
aforce	array(char)
[	O
3	int
+	O
DEC_DIGS_PER_INT	O
+	O
1	int
]	O
;	O
char	O
aretry	array(char)
[	O
3	int
+	O
DEC_DIGS_PER_INT	O
+	O
1	int
]	O
;	O
int	O
status	int
=	O
0	int
;	O
assert	O
(	O
l	*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct(*(char),*(char)),struct(*(char)),struct(int))))
)	O
;	O
assert	O
(	O
l	*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct(*(char),*(char)),struct(*(char)),struct(int))))
->	O
flags	int
&	O
MU_LOCKER_EXTERNAL	O
)	O
;	O
assert	O
(	O
lock	*((*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct`,struct`,struct`))),enum(int,int,int))->(int))
==	O
!	O
l	*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct(*(char),*(char)),struct(*(char)),struct(int))))
->	O
refcnt	int
)	O
;	O
av	array(*(char))
[	O
ac	int
++	O
]	O
=	O
l	*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct(*(char),*(char)),struct(*(char)),struct(int))))
->	O
data	*(void)
.	O
external	struct(*(char))
.	O
name	*(char)
?	O
l	*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct(*(char),*(char)),struct(*(char)),struct(int))))
->	O
data	*(void)
.	O
external	struct(*(char))
.	O
name	*(char)
:	O
MU_LOCKER_EXTERNAL_PROGRAM	*(char)
;	O
if	O
(	O
l	*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct(*(char),*(char)),struct(*(char)),struct(int))))
->	O
flags	int
&	O
MU_LOCKER_TIME	int
)	O
{	O
snprintf	(*(char),long,*(char))->(int)
(	O
aforce	array(char)
,	O
sizeof	O
(	O
aforce	array(char)
)	O
,	O
"-f%d"	*(char)
,	O
l	*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct(*(char),*(char)),struct(*(char)),struct(int))))
->	O
expire_time	int
)	O
;	O
aforce	array(char)
[	O
sizeof	O
(	O
aforce	array(char)
)	O
-	O
1	int
]	O
=	O
0	int
;	O
av	array(*(char))
[	O
ac	int
++	O
]	O
=	O
aforce	array(char)
;	O
}	O
if	O
(	O
l	*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct(*(char),*(char)),struct(*(char)),struct(int))))
->	O
flags	int
&	O
MU_LOCKER_RETRY	int
)	O
{	O
snprintf	(*(char),long,*(char))->(int)
(	O
aretry	array(char)
,	O
sizeof	O
(	O
aretry	array(char)
)	O
,	O
"-r%d"	*(char)
,	O
l	*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct(*(char),*(char)),struct(*(char)),struct(int))))
->	O
retries	int
)	O
;	O
aretry	array(char)
[	O
sizeof	O
(	O
aretry	array(char)
)	O
-	O
1	int
]	O
=	O
0	int
;	O
av	array(*(char))
[	O
ac	int
++	O
]	O
=	O
aretry	array(char)
;	O
}	O
if	O
(	O
!	O
lock	*((*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct`,struct`,struct`))),enum(int,int,int))->(int))
)	O
av	array(*(char))
[	O
ac	int
++	O
]	O
=	O
"-u"	*(char)
;	O
av	array(*(char))
[	O
ac	int
++	O
]	O
=	O
l	*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct(*(char),*(char)),struct(*(char)),struct(int))))
->	O
file	*(char)
;	O
av	array(*(char))
[	O
ac	int
++	O
]	O
=	O
NULL	O
;	O
if	O
(	O
(	O
err	long
=	O
mu_spawnvp	(*(char),array(*(char)),*(int))->(int)
(	O
av	array(*(char))
[	O
0	int
]	O
,	O
av	array(*(char))
,	O
&	O
status	int
)	O
)	O
)	O
return	O
err	long
;	O
if	O
(	O
!	O
WIFEXITED	O
(	O
status	int
)	O
)	O
{	O
err	long
=	O
MU_ERR_LOCK_EXT_KILLED	O
;	O
}	O
else	O
{	O
switch	O
(	O
WEXITSTATUS	O
(	O
status	int
)	O
)	O
{	O
case	O
127	int
:	O
err	long
=	O
MU_ERR_LOCK_EXT_FAIL	O
;	O
break	O
;	O
case	O
MU_DL_EX_OK	int
:	O
err	long
=	O
0	int
;	O
l	*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct(*(char),*(char)),struct(*(char)),struct(int))))
->	O
refcnt	int
=	O
lock	*((*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct`,struct`,struct`))),enum(int,int,int))->(int))
;	O
break	O
;	O
case	O
MU_DL_EX_NEXIST	int
:	O
err	long
=	O
MU_ERR_LOCK_NOT_HELD	O
;	O
break	O
;	O
case	O
MU_DL_EX_EXIST	int
:	O
err	long
=	O
MU_ERR_LOCK_CONFLICT	O
;	O
break	O
;	O
case	O
MU_DL_EX_PERM	int
:	O
err	long
=	O
EPERM	int
;	O
break	O
;	O
default	O
:	O
case	O
MU_DL_EX_ERROR	int
:	O
err	long
=	O
MU_ERR_LOCK_EXT_ERR	O
;	O
break	O
;	O
}	O
}	O
return	O
err	long
;	O
}	O
static	O
int	O
lock_external	(*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct(*`,*`),struct(*`),struct(int)))),enum(int,int,int))->(int)
(	O
mu_locker_t	*(struct)
locker	*(struct)
,	O
enum	O
mu_locker_mode	enum(int,int,int)
mode	enum(int,int,int)
)	O
{	O
return	O
external_locker	(*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct(*`,*`),struct(*`),struct(int)))),int)->(int)
(	O
locker	*(struct)
,	O
1	int
)	O
;	O
}	O
static	O
int	O
unlock_external	(*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct(*`,*`),struct(*`),struct(int)))))->(int)
(	O
mu_locker_t	*(struct)
locker	*(struct)
)	O
{	O
return	O
external_locker	(*(struct(int,enum(int,int,int),*(char),int,int,int,int,union(struct(*`,*`),struct(*`),struct(int)))),int)->(int)
(	O
locker	*(struct)
,	O
0	int
)	O
;	O
}	O
