char	O
const	O
*	O
simple_backup_suffix	*(char)
=	O
"~"	*(char)
;	O
static	O
void	O
check_extension	(*(char),long,char)->(void)
(	O
char	O
*	O
file	*(char)
,	O
size_t	long
filelen	long
,	O
char	O
e	char
)	O
{	O
char	O
*	O
base	*(char)
=	O
last_component	(*(char))->(*(char))
(	O
file	*(char)
)	O
;	O
size_t	long
baselen	long
=	O
base_len	(*(char))->(long)
(	O
base	*(char)
)	O
;	O
size_t	long
baselen_max	long
=	O
HAVE_LONG_FILE_NAMES	int
?	O
255	int
:	O
NAME_MAX_MINIMUM	O
;	O
if	O
(	O
HAVE_DOS_FILE_NAMES	int
||	O
NAME_MAX_MINIMUM	O
<	O
baselen	long
)	O
{	O
long	O
name_max	long
;	O
char	O
tmp	array(char)
[	O
sizeof	O
"."	*(char)
]	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
tmp	array(char)
,	O
base	*(char)
,	O
sizeof	O
"."	*(char)
)	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
base	*(char)
,	O
"."	*(char)
)	O
;	O
errno	O
=	O
0	int
;	O
name_max	long
=	O
pathconf	(*(char),int)->(long)
(	O
file	*(char)
,	O
_PC_NAME_MAX	int
)	O
;	O
if	O
(	O
0	int
<=	O
name_max	long
||	O
errno	O
==	O
0	int
)	O
{	O
long	O
size	long
=	O
baselen_max	long
=	O
name_max	long
;	O
if	O
(	O
name_max	long
!=	O
size	long
)	O
baselen_max	long
=	O
SIZE_MAX	O
;	O
}	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
base	*(char)
,	O
tmp	array(char)
,	O
sizeof	O
"."	*(char)
)	O
;	O
}	O
if	O
(	O
HAVE_DOS_FILE_NAMES	int
&&	O
baselen_max	long
<=	O
12	int
)	O
{	O
char	O
*	O
dot	*(char)
=	O
strchr	(*(char),int)->(*(char))
(	O
base	*(char)
,	O
'.'	O
)	O
;	O
if	O
(	O
!	O
dot	*(char)
)	O
baselen_max	long
=	O
8	int
;	O
else	O
{	O
char	O
const	O
*	O
second_dot	*(char)
=	O
strchr	(*(char),int)->(*(char))
(	O
dot	*(char)
+	O
1	int
,	O
'.'	O
)	O
;	O
baselen_max	long
=	O
(	O
second_dot	*(char)
?	O
second_dot	*(char)
-	O
base	*(char)
:	O
dot	*(char)
+	O
1	int
-	O
base	*(char)
+	O
3	int
)	O
;	O
}	O
}	O
if	O
(	O
baselen_max	long
<	O
baselen	long
)	O
{	O
baselen	long
=	O
file	*(char)
+	O
filelen	long
-	O
base	*(char)
;	O
if	O
(	O
baselen_max	long
<=	O
baselen	long
)	O
baselen	long
=	O
baselen_max	long
-	O
1	int
;	O
base	*(char)
[	O
baselen	long
]	O
=	O
e	char
;	O
base	*(char)
[	O
baselen	long
+	O
1	int
]	O
=	O
'\0'	O
;	O
}	O
}	O
enum	O
numbered_backup_result	enum(int,int,int)
{	O
BACKUP_IS_SAME_LENGTH	int
,	O
BACKUP_IS_LONGER	int
,	O
BACKUP_IS_NEW	int
}	O
;	O
static	O
enum	O
numbered_backup_result	enum(int,int,int)
numbered_backup	(*(*(char)),long,long)->(enum(int,int,int))
(	O
char	O
*	O
*	O
buffer	*(*(char))
,	O
size_t	long
buffer_size	long
,	O
size_t	long
filelen	long
)	O
{	O
enum	O
numbered_backup_result	enum(int,int,int)
result	enum(int,int,int)
=	O
BACKUP_IS_NEW	int
;	O
DIR	struct
*	O
dirp	*(struct)
;	O
struct	O
dirent	struct(long,long,short,char,array(char))
*	O
dp	*(struct(long,long,short,char,array(char)))
;	O
char	O
*	O
buf	*(char)
=	O
*	O
buffer	*(*(char))
;	O
size_t	long
versionlenmax	long
=	O
1	int
;	O
char	O
*	O
base	*(char)
=	O
last_component	(*(char))->(*(char))
(	O
buf	*(char)
)	O
;	O
size_t	long
base_offset	long
=	O
base	*(char)
-	O
buf	*(char)
;	O
size_t	long
baselen	long
=	O
base_len	(*(char))->(long)
(	O
base	*(char)
)	O
;	O
char	O
tmp	array(char)
[	O
sizeof	O
"."	*(char)
]	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
tmp	array(char)
,	O
base	*(char)
,	O
sizeof	O
"."	*(char)
)	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
base	*(char)
,	O
"."	*(char)
)	O
;	O
dirp	*(struct)
=	O
opendir	(*(char))->(*(struct))
(	O
buf	*(char)
)	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
base	*(char)
,	O
tmp	array(char)
,	O
sizeof	O
"."	*(char)
)	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
base	*(char)
+	O
baselen	long
,	O
".~1~"	*(char)
)	O
;	O
if	O
(	O
!	O
dirp	*(struct)
)	O
return	O
result	enum(int,int,int)
;	O
while	O
(	O
(	O
dp	*(struct(long,long,short,char,array(char)))
=	O
readdir	(*(struct))->(*(struct(long,long,short,char,array(char))))
(	O
dirp	*(struct)
)	O
)	O
!=	O
NULL	O
)	O
{	O
char	O
const	O
*	O
p	*(void)
;	O
char	O
*	O
q	*(char)
;	O
bool	bool
all_9s	bool
;	O
size_t	long
versionlen	long
;	O
size_t	long
new_buflen	long
;	O
if	O
(	O
!	O
REAL_DIR_ENTRY	O
(	O
dp	*(struct(long,long,short,char,array(char)))
)	O
||	O
_D_EXACT_NAMLEN	O
(	O
dp	*(struct(long,long,short,char,array(char)))
)	O
<	O
baselen	long
+	O
4	int
)	O
continue	O
;	O
if	O
(	O
memcmp	(*(void),*(void),long)->(int)
(	O
buf	*(char)
+	O
base_offset	long
,	O
dp	*(struct(long,long,short,char,array(char)))
->	O
d_name	array(char)
,	O
baselen	long
+	O
2	int
)	O
!=	O
0	int
)	O
continue	O
;	O
p	*(void)
=	O
dp	*(struct(long,long,short,char,array(char)))
->	O
d_name	array(char)
+	O
baselen	long
+	O
2	int
;	O
if	O
(	O
!	O
(	O
'1'	O
<=	O
*	O
p	*(void)
&&	O
*	O
p	*(void)
<=	O
'9'	O
)	O
)	O
continue	O
;	O
all_9s	bool
=	O
(	O
*	O
p	*(void)
==	O
'9'	O
)	O
;	O
for	O
(	O
versionlen	long
=	O
1	int
;	O
ISDIGIT	O
(	O
p	*(void)
[	O
versionlen	long
]	O
)	O
;	O
versionlen	long
++	O
)	O
all_9s	bool
&=	O
(	O
p	*(void)
[	O
versionlen	long
]	O
==	O
'9'	O
)	O
;	O
if	O
(	O
!	O
(	O
p	*(void)
[	O
versionlen	long
]	O
==	O
'~'	O
&&	O
!	O
p	*(void)
[	O
versionlen	long
+	O
1	int
]	O
&&	O
(	O
versionlenmax	long
<	O
versionlen	long
||	O
(	O
versionlenmax	long
==	O
versionlen	long
&&	O
memcmp	(*(void),*(void),long)->(int)
(	O
buf	*(char)
+	O
filelen	long
+	O
2	int
,	O
p	*(void)
,	O
versionlen	long
)	O
<=	O
0	int
)	O
)	O
)	O
)	O
continue	O
;	O
versionlenmax	long
=	O
all_9s	bool
+	O
versionlen	long
;	O
result	enum(int,int,int)
=	O
(	O
all_9s	bool
?	O
BACKUP_IS_LONGER	int
:	O
BACKUP_IS_SAME_LENGTH	int
)	O
;	O
new_buflen	long
=	O
filelen	long
+	O
2	int
+	O
versionlenmax	long
+	O
1	int
;	O
if	O
(	O
buffer_size	long
<=	O
new_buflen	long
)	O
{	O
buf	*(char)
=	O
xnrealloc	(*(void),long,long)->(*(void))
(	O
buf	*(char)
,	O
2	int
,	O
new_buflen	long
)	O
;	O
buffer_size	long
=	O
new_buflen	long
*	O
2	int
;	O
}	O
q	*(char)
=	O
buf	*(char)
+	O
filelen	long
;	O
*	O
q	*(char)
++	O
=	O
'.'	O
;	O
*	O
q	*(char)
++	O
=	O
'~'	O
;	O
*	O
q	*(char)
=	O
'0'	O
;	O
q	*(char)
+=	O
all_9s	bool
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
q	*(char)
,	O
p	*(void)
,	O
versionlen	long
+	O
2	int
)	O
;	O
q	*(char)
+=	O
versionlen	long
;	O
while	O
(	O
*	O
--	O
q	*(char)
==	O
'9'	O
)	O
*	O
q	*(char)
=	O
'0'	O
;	O
++	O
*	O
q	*(char)
;	O
}	O
closedir	(*(struct))->(int)
(	O
dirp	*(struct)
)	O
;	O
*	O
buffer	*(*(char))
=	O
buf	*(char)
;	O
return	O
result	enum(int,int,int)
;	O
}	O
char	O
*	O
find_backup_file_name	(*(char),enum(int,int,int,int))->(*(char))
(	O
char	O
const	O
*	O
file	*(char)
,	O
enum	O
backup_type	enum(int,int,int,int)
backup_type	enum(int,int,int,int)
)	O
{	O
size_t	long
filelen	long
=	O
strlen	(*(char))->(long)
(	O
file	*(char)
)	O
;	O
char	O
*	O
s	long
;	O
size_t	long
ssize	long
;	O
bool	bool
simple	bool
=	O
true	int
;	O
size_t	long
simple_backup_suffix_size	long
=	O
strlen	(*(char))->(long)
(	O
simple_backup_suffix	*(char)
)	O
+	O
1	int
;	O
size_t	long
backup_suffix_size_guess	long
=	O
simple_backup_suffix_size	long
;	O
enum	O
{	O
GUESS	int
=	O
sizeof	O
".~12345~"	*(char)
}	O
;	O
if	O
(	O
backup_suffix_size_guess	long
<	O
GUESS	int
)	O
backup_suffix_size_guess	long
=	O
GUESS	int
;	O
ssize	long
=	O
filelen	long
+	O
backup_suffix_size_guess	long
+	O
1	int
;	O
s	long
=	O
xmalloc	(long)->(*(void))
(	O
ssize	long
)	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
s	long
,	O
file	*(char)
,	O
filelen	long
+	O
1	int
)	O
;	O
if	O
(	O
backup_type	enum(int,int,int,int)
!=	O
simple_backups	int
)	O
switch	O
(	O
numbered_backup	(*(*(char)),long,long)->(enum(int,int,int))
(	O
&	O
s	long
,	O
ssize	long
,	O
filelen	long
)	O
)	O
{	O
case	O
BACKUP_IS_SAME_LENGTH	int
:	O
return	O
s	long
;	O
case	O
BACKUP_IS_LONGER	int
:	O
simple	bool
=	O
false	int
;	O
break	O
;	O
case	O
BACKUP_IS_NEW	int
:	O
simple	bool
=	O
(	O
backup_type	enum(int,int,int,int)
==	O
numbered_existing_backups	int
)	O
;	O
break	O
;	O
}	O
if	O
(	O
simple	bool
)	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
s	long
+	O
filelen	long
,	O
simple_backup_suffix	*(char)
,	O
simple_backup_suffix_size	long
)	O
;	O
check_extension	(*(char),long,char)->(void)
(	O
s	long
,	O
filelen	long
,	O
'~'	O
)	O
;	O
return	O
s	long
;	O
}	O
static	O
char	O
const	O
*	O
const	O
backup_args	array(*(char))
[	O
]	O
=	O
{	O
"none"	*(char)
,	O
"off"	*(char)
,	O
"simple"	*(char)
,	O
"never"	*(char)
,	O
"existing"	*(char)
,	O
"nil"	*(char)
,	O
"numbered"	*(char)
,	O
"t"	*(char)
,	O
NULL	O
}	O
;	O
static	O
const	O
enum	O
backup_type	enum(int,int,int,int)
backup_types	array(enum(int,int,int,int))
[	O
]	O
=	O
{	O
no_backups	int
,	O
no_backups	int
,	O
simple_backups	int
,	O
simple_backups	int
,	O
numbered_existing_backups	int
,	O
numbered_existing_backups	int
,	O
numbered_backups	int
,	O
numbered_backups	int
}	O
;	O
ARGMATCH_VERIFY	O
(	O
backup_args	array(*(char))
,	O
backup_types	array(enum(int,int,int,int))
)	O
;	O
enum	O
backup_type	enum(int,int,int,int)
get_version	(*(char),*(char))->(enum(int,int,int,int))
(	O
char	O
const	O
*	O
context	*(char)
,	O
char	O
const	O
*	O
version	*(char)
)	O
{	O
if	O
(	O
version	*(char)
==	O
0	int
||	O
*	O
version	*(char)
==	O
0	int
)	O
return	O
numbered_existing_backups	int
;	O
else	O
return	O
XARGMATCH	O
(	O
context	*(char)
,	O
version	*(char)
,	O
backup_args	array(*(char))
,	O
backup_types	array(enum(int,int,int,int))
)	O
;	O
}	O
enum	O
backup_type	enum(int,int,int,int)
xget_version	(*(char),*(char))->(enum(int,int,int,int))
(	O
char	O
const	O
*	O
context	*(char)
,	O
char	O
const	O
*	O
version	*(char)
)	O
{	O
if	O
(	O
version	*(char)
&&	O
*	O
version	*(char)
)	O
return	O
get_version	(*(char),*(char))->(enum(int,int,int,int))
(	O
context	*(char)
,	O
version	*(char)
)	O
;	O
else	O
return	O
get_version	(*(char),*(char))->(enum(int,int,int,int))
(	O
"$VERSION_CONTROL"	*(char)
,	O
getenv	(*(char))->(*(char))
(	O
"VERSION_CONTROL"	*(char)
)	O
)	O
;	O
}	O
