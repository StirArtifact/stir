int	O
mail_followup	(int,*(*(char)))->(int)
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	*(*(char))
)	O
{	O
mu_message_t	*(struct)
msg	*(struct)
;	O
mu_header_t	*(struct)
hdr	*(struct)
;	O
char	O
*	O
str	*(struct)
;	O
msgset_t	struct
*	O
msglist	*(struct(*(struct(*(struct`),int,*(long))),int,*(long)))
,	O
*	O
mp	*(struct(*(struct(*(struct`),int,*(long))),int,*(long)))
;	O
compose_env_t	struct(*(struct),*(struct),*(*(char)),int,int,*(struct),*(struct))
env	*(struct)
;	O
int	O
status	int
;	O
size_t	long
n	*(long)
;	O
compose_init	(*(struct(*(struct),*(struct),*(*(char)),int,int,*(struct),*(struct))))->(void)
(	O
&	O
env	*(struct)
)	O
;	O
if	O
(	O
msgset_parse	(int,*(*(char)),int,*(*(struct(*(struct`),int,*(long)))))->(int)
(	O
argc	int
,	O
argv	*(*(char))
,	O
MSG_NODELETED	int
,	O
&	O
msglist	*(struct(*(struct(*(struct`),int,*(long))),int,*(long)))
)	O
)	O
return	O
1	int
;	O
n	*(long)
=	O
get_cursor	()->(long)
(	O
)	O
;	O
if	O
(	O
n	*(long)
==	O
0	int
)	O
{	O
mu_error	(*(char))->(int)
(	O
_	O
(	O
"No applicable message"	*(char)
)	O
)	O
;	O
return	O
1	int
;	O
}	O
if	O
(	O
util_get_message	(*(struct),long,*(*(struct)))->(int)
(	O
mbox	*(struct)
,	O
n	*(long)
,	O
&	O
msg	*(struct)
)	O
)	O
{	O
msgset_free	(*(struct(*(struct(*`,int,*`)),int,*(long))))->(void)
(	O
msglist	*(struct(*(struct(*(struct`),int,*(long))),int,*(long)))
)	O
;	O
return	O
1	int
;	O
}	O
mu_message_get_header	(*(struct),*(*(struct)))->(int)
(	O
msg	*(struct)
,	O
&	O
hdr	*(struct)
)	O
;	O
if	O
(	O
mu_header_aget_value	O
(	O
hdr	*(struct)
,	O
MU_HEADER_SUBJECT	*(char)
,	O
&	O
str	*(struct)
)	O
==	O
0	int
)	O
{	O
char	O
*	O
p	*(char)
=	O
NULL	O
;	O
if	O
(	O
mu_unre_subject	(*(char),*(*(char)))->(int)
(	O
str	*(struct)
,	O
NULL	O
)	O
)	O
util_strcat	(*(*(char)),*(char))->(void)
(	O
&	O
p	*(char)
,	O
util_reply_prefix	()->(*(char))
(	O
)	O
)	O
;	O
util_strcat	(*(*(char)),*(char))->(void)
(	O
&	O
p	*(char)
,	O
str	*(struct)
)	O
;	O
free	(*(void))->(void)
(	O
str	*(struct)
)	O
;	O
compose_header_set	(*(struct(*(struct),*(struct),*(*(char)),int,int,*(struct),*(struct))),*(char),*(char),int)->(int)
(	O
&	O
env	*(struct)
,	O
MU_HEADER_SUBJECT	*(char)
,	O
p	*(char)
,	O
COMPOSE_REPLACE	int
)	O
;	O
free	(*(void))->(void)
(	O
p	*(char)
)	O
;	O
}	O
compose_header_set	(*(struct(*(struct),*(struct),*(*(char)),int,int,*(struct),*(struct))),*(char),*(char),int)->(int)
(	O
&	O
env	*(struct)
,	O
MU_HEADER_TO	*(char)
,	O
util_get_sender	(int,int)->(*(char))
(	O
get_cursor	()->(long)
(	O
)	O
,	O
0	int
)	O
,	O
COMPOSE_SINGLE_LINE	int
)	O
;	O
for	O
(	O
mp	*(struct(*(struct(*(struct`),int,*(long))),int,*(long)))
=	O
msglist	*(struct(*(struct(*(struct`),int,*(long))),int,*(long)))
;	O
mp	*(struct(*(struct(*(struct`),int,*(long))),int,*(long)))
;	O
mp	*(struct(*(struct(*(struct`),int,*(long))),int,*(long)))
=	O
mp	*(struct(*(struct(*(struct`),int,*(long))),int,*(long)))
->	O
next	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
)	O
compose_header_set	(*(struct(*(struct),*(struct),*(*(char)),int,int,*(struct),*(struct))),*(char),*(char),int)->(int)
(	O
&	O
env	*(struct)
,	O
MU_HEADER_TO	*(char)
,	O
util_get_sender	(int,int)->(*(char))
(	O
mp	*(struct(*(struct(*(struct`),int,*(long))),int,*(long)))
->	O
msg_part	*(long)
[	O
0	int
]	O
,	O
0	int
)	O
,	O
COMPOSE_SINGLE_LINE	int
)	O
;	O
msgset_free	(*(struct(*(struct(*`,int,*`)),int,*(long))))->(void)
(	O
msglist	*(struct(*(struct(*(struct`),int,*(long))),int,*(long)))
)	O
;	O
mu_printf	(*(char))->(int)
(	O
"To: %s\n"	*(char)
,	O
compose_header_get	(*(struct(*(struct),*(struct),*(*(char)),int,int,*(struct),*(struct))),*(char),*(char))->(*(char))
(	O
&	O
env	*(struct)
,	O
MU_HEADER_TO	*(char)
,	O
""	*(char)
)	O
)	O
;	O
mu_printf	(*(char))->(int)
(	O
"Subject: %s\n\n"	*(char)
,	O
compose_header_get	(*(struct(*(struct),*(struct),*(*(char)),int,int,*(struct),*(struct))),*(char),*(char))->(*(char))
(	O
&	O
env	*(struct)
,	O
MU_HEADER_SUBJECT	*(char)
,	O
""	*(char)
)	O
)	O
;	O
status	int
=	O
mail_send0	(*(struct(*(struct),*(struct),*(*(char)),int,int,*(struct),*(struct))),int)->(int)
(	O
&	O
env	*(struct)
,	O
mu_isupper	O
(	O
argv	*(*(char))
[	O
0	int
]	O
[	O
0	int
]	O
)	O
)	O
;	O
compose_destroy	(*(struct(*(struct),*(struct),*(*(char)),int,int,*(struct),*(struct))))->(void)
(	O
&	O
env	*(struct)
)	O
;	O
return	O
status	int
;	O
}	O
