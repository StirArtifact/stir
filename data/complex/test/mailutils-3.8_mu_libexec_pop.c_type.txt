char	O
pop_docstring	array(char)
[	O
]	O
=	O
N_	O
(	O
"POP3 client shell"	*(char)
)	O
;	O
static	O
mu_pop3_t	*(struct)
pop3	*(*(struct))
;	O
enum	O
pop_session_status	enum(int,int,int)
{	O
pop_session_disconnected	int
,	O
pop_session_connected	int
,	O
pop_session_logged_in	int
}	O
;	O
static	O
enum	O
pop_session_status	enum(int,int,int)
pop_session_status	enum(int,int,int)
;	O
static	O
int	O
connect_argc	int
;	O
static	O
char	O
*	O
*	O
connect_argv	*(*(char))
;	O
static	O
int	O
port	int
=	O
110	int
;	O
static	O
char	O
*	O
username	*(char)
;	O
const	O
char	O
*	O
pop_session_str	(enum(int,int,int))->(*(char))
(	O
enum	O
pop_session_status	enum(int,int,int)
stat	*(int)
)	O
{	O
switch	O
(	O
stat	*(int)
)	O
{	O
case	O
pop_session_disconnected	int
:	O
return	O
"disconnected"	*(char)
;	O
case	O
pop_session_connected	int
:	O
return	O
"connected"	*(char)
;	O
case	O
pop_session_logged_in	int
:	O
return	O
"logged in"	*(char)
;	O
}	O
return	O
"unknown"	*(char)
;	O
}	O
static	O
void	O
pop_prompt_env	()->(void)
(	O
void	O
)	O
{	O
mu_assoc_t	*(struct)
assoc	*(struct)
=	O
mutool_shell_prompt_assoc	()->(*(struct))
(	O
)	O
;	O
if	O
(	O
pop_session_status	enum(int,int,int)
==	O
pop_session_logged_in	int
)	O
mu_assoc_install	(*(struct),*(char),*(void))->(int)
(	O
assoc	*(struct)
,	O
"user"	*(char)
,	O
username	*(char)
)	O
;	O
if	O
(	O
pop_session_status	enum(int,int,int)
!=	O
pop_session_disconnected	int
)	O
mu_assoc_install	(*(struct),*(char),*(void))->(int)
(	O
assoc	*(struct)
,	O
"host"	*(char)
,	O
host	*(*(char))
)	O
;	O
mu_assoc_install	(*(struct),*(char),*(void))->(int)
(	O
assoc	*(struct)
,	O
"status"	*(char)
,	O
(	O
void	O
*	O
)	O
pop_session_str	(enum(int,int,int))->(*(char))
(	O
pop_session_status	enum(int,int,int)
)	O
)	O
;	O
}	O
static	O
void	O
pop_set_verbose	()->(void)
(	O
void	O
)	O
{	O
if	O
(	O
pop3	*(*(struct))
)	O
{	O
if	O
(	O
QRY_VERBOSE	O
(	O
)	O
)	O
mu_pop3_trace	(*(struct),int)->(int)
(	O
pop3	*(*(struct))
,	O
MU_POP3_TRACE_SET	int
)	O
;	O
else	O
mu_pop3_trace	(*(struct),int)->(int)
(	O
pop3	*(*(struct))
,	O
MU_POP3_TRACE_CLR	int
)	O
;	O
}	O
}	O
static	O
void	O
pop_set_verbose_mask	()->(void)
(	O
void	O
)	O
{	O
if	O
(	O
pop3	*(*(struct))
)	O
{	O
mu_pop3_trace_mask	(*(struct),int,int)->(int)
(	O
pop3	*(*(struct))
,	O
QRY_VERBOSE_MASK	O
(	O
MU_XSCRIPT_SECURE	int
)	O
?	O
MU_POP3_TRACE_SET	int
:	O
MU_POP3_TRACE_CLR	int
,	O
MU_XSCRIPT_SECURE	int
)	O
;	O
mu_pop3_trace_mask	(*(struct),int,int)->(int)
(	O
pop3	*(*(struct))
,	O
QRY_VERBOSE_MASK	O
(	O
MU_XSCRIPT_PAYLOAD	int
)	O
?	O
MU_POP3_TRACE_SET	int
:	O
MU_POP3_TRACE_CLR	int
,	O
MU_XSCRIPT_PAYLOAD	int
)	O
;	O
}	O
}	O
static	O
int	O
com_verbose	(int,*(*(char)))->(int)
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	*(*(char))
)	O
{	O
return	O
shell_verbose	(int,*(*(char)),*(()->(void)),*(()->(void)))->(int)
(	O
argc	long
,	O
argv	*(*(char))
,	O
pop_set_verbose	()->(void)
,	O
pop_set_verbose_mask	()->(void)
)	O
;	O
}	O
static	O
int	O
com_user	(int,*(*(char)))->(int)
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	*(*(char))
)	O
{	O
int	O
status	int
;	O
status	int
=	O
mu_pop3_user	(*(struct),*(char))->(int)
(	O
pop3	*(*(struct))
,	O
argv	*(*(char))
[	O
1	int
]	O
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
{	O
username	*(char)
=	O
mu_strdup	(*(char))->(*(char))
(	O
argv	*(*(char))
[	O
1	int
]	O
)	O
;	O
pop_prompt_env	()->(void)
(	O
)	O
;	O
}	O
return	O
status	int
;	O
}	O
static	O
int	O
com_apop	(int,*(*(char)))->(int)
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	*(*(char))
)	O
{	O
int	O
status	int
;	O
char	O
*	O
pwd	*(char)
,	O
*	O
passbuf	*(char)
=	O
NULL	O
;	O
if	O
(	O
argc	long
==	O
3	int
)	O
pwd	*(char)
=	O
argv	*(*(char))
[	O
2	int
]	O
;	O
else	O
if	O
(	O
!	O
mutool_shell_interactive	int
)	O
{	O
mu_error	(*(char))->(int)
(	O
_	O
(	O
"apop: password required"	*(char)
)	O
)	O
;	O
return	O
1	int
;	O
}	O
else	O
{	O
status	int
=	O
mu_getpass	(*(struct),*(struct),*(char),*(*(char)))->(int)
(	O
mu_strin	*(struct)
,	O
mu_strout	*(struct)
,	O
"Password:"	*(char)
,	O
&	O
passbuf	*(char)
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
pwd	*(char)
=	O
passbuf	*(char)
;	O
}	O
status	int
=	O
mu_pop3_apop	(*(struct),*(char),*(char))->(int)
(	O
pop3	*(*(struct))
,	O
argv	*(*(char))
[	O
1	int
]	O
,	O
pwd	*(char)
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
{	O
username	*(char)
=	O
mu_strdup	(*(char))->(*(char))
(	O
argv	*(*(char))
[	O
1	int
]	O
)	O
;	O
pop_session_status	enum(int,int,int)
=	O
pop_session_logged_in	int
;	O
}	O
free	(*(void))->(void)
(	O
passbuf	*(char)
)	O
;	O
return	O
status	int
;	O
}	O
static	O
int	O
com_capa	(int,*(*(char)))->(int)
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	*(*(char))
)	O
{	O
mu_iterator_t	*(struct)
iterator	*(struct)
=	O
NULL	O
;	O
int	O
status	int
=	O
0	int
;	O
int	O
reread	int
=	O
0	int
;	O
int	O
i	long
=	O
1	int
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<	O
argc	long
;	O
i	long
++	O
)	O
{	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
argv	*(*(char))
[	O
i	long
]	O
,	O
"-reread"	*(char)
)	O
==	O
0	int
)	O
reread	int
=	O
1	int
;	O
else	O
break	O
;	O
}	O
if	O
(	O
i	long
<	O
argc	long
)	O
{	O
if	O
(	O
reread	int
)	O
{	O
status	int
=	O
mu_pop3_capa	(*(struct),int,*(*(struct)))->(int)
(	O
pop3	*(*(struct))
,	O
1	int
,	O
NULL	O
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
}	O
for	O
(	O
;	O
i	long
<	O
argc	long
;	O
i	long
++	O
)	O
{	O
const	O
char	O
*	O
elt	*(char)
;	O
int	O
rc	int
=	O
mu_pop3_capa_test	(*(struct),*(char),*(*(char)))->(int)
(	O
pop3	*(*(struct))
,	O
argv	*(*(char))
[	O
i	long
]	O
,	O
&	O
elt	*(char)
)	O
;	O
switch	O
(	O
rc	int
)	O
{	O
case	O
0	int
:	O
if	O
(	O
*	O
elt	*(char)
)	O
mu_printf	(*(char))->(int)
(	O
"%s: %s\n"	*(char)
,	O
argv	*(*(char))
[	O
i	long
]	O
,	O
elt	*(char)
)	O
;	O
else	O
mu_printf	(*(char))->(int)
(	O
"%s is set\n"	*(char)
,	O
argv	*(*(char))
[	O
i	long
]	O
)	O
;	O
break	O
;	O
case	O
MU_ERR_NOENT	O
:	O
mu_printf	(*(char))->(int)
(	O
"%s is not set\n"	*(char)
,	O
argv	*(*(char))
[	O
i	long
]	O
)	O
;	O
break	O
;	O
default	O
:	O
return	O
rc	int
;	O
}	O
}	O
}	O
else	O
{	O
status	int
=	O
mu_pop3_capa	(*(struct),int,*(*(struct)))->(int)
(	O
pop3	*(*(struct))
,	O
reread	int
,	O
&	O
iterator	*(struct)
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
{	O
for	O
(	O
mu_iterator_first	(*(struct))->(int)
(	O
iterator	*(struct)
)	O
;	O
!	O
mu_iterator_is_done	(*(struct))->(int)
(	O
iterator	*(struct)
)	O
;	O
mu_iterator_next	(*(struct))->(int)
(	O
iterator	*(struct)
)	O
)	O
{	O
char	O
*	O
capa	*(struct(*(char),*(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*`,*`,*`)->(void)),*(char))),*(struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char))),*((enum(int,int),*(struct`),*(char),*(*`),*(void),*(struct`))->(int)),*((*(void))->(void))))
=	O
NULL	O
;	O
mu_iterator_current	(*(struct),*(*(void)))->(int)
(	O
iterator	*(struct)
,	O
(	O
void	O
*	O
*	O
)	O
&	O
capa	*(struct(*(char),*(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*`,*`,*`)->(void)),*(char))),*(struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char))),*((enum(int,int),*(struct`),*(char),*(*`),*(void),*(struct`))->(int)),*((*(void))->(void))))
)	O
;	O
mu_printf	(*(char))->(int)
(	O
"CAPA: %s\n"	*(char)
,	O
mu_prstr	(*(char))->(*(char))
(	O
capa	*(struct(*(char),*(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*`,*`,*`)->(void)),*(char))),*(struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char))),*((enum(int,int),*(struct`),*(char),*(*`),*(void),*(struct`))->(int)),*((*(void))->(void))))
)	O
)	O
;	O
}	O
mu_iterator_destroy	(*(*(struct)))->(void)
(	O
&	O
iterator	*(struct)
)	O
;	O
}	O
}	O
return	O
status	int
;	O
}	O
static	O
int	O
com_uidl	(int,*(*(char)))->(int)
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	*(*(char))
)	O
{	O
int	O
status	int
=	O
0	int
;	O
if	O
(	O
argc	long
==	O
1	int
)	O
{	O
mu_stream_t	*(struct)
out	*(struct)
=	O
mutool_open_pager	()->(*(struct))
(	O
)	O
;	O
mu_iterator_t	*(struct)
uidl_iterator	*(struct)
=	O
NULL	O
;	O
status	int
=	O
mu_pop3_uidl_all	(*(struct),*(*(struct)))->(int)
(	O
pop3	*(*(struct))
,	O
&	O
uidl_iterator	*(struct)
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
{	O
for	O
(	O
mu_iterator_first	(*(struct))->(int)
(	O
uidl_iterator	*(struct)
)	O
;	O
!	O
mu_iterator_is_done	(*(struct))->(int)
(	O
uidl_iterator	*(struct)
)	O
;	O
mu_iterator_next	(*(struct))->(int)
(	O
uidl_iterator	*(struct)
)	O
)	O
{	O
char	O
*	O
uidl	array(char)
=	O
NULL	O
;	O
mu_iterator_current	(*(struct),*(*(void)))->(int)
(	O
uidl_iterator	*(struct)
,	O
(	O
void	O
*	O
*	O
)	O
&	O
uidl	array(char)
)	O
;	O
mu_stream_printf	(*(struct),*(char))->(int)
(	O
out	*(struct)
,	O
"UIDL: %s\n"	*(char)
,	O
mu_prstr	(*(char))->(*(char))
(	O
uidl	array(char)
)	O
)	O
;	O
}	O
mu_iterator_destroy	(*(*(struct)))->(void)
(	O
&	O
uidl_iterator	*(struct)
)	O
;	O
}	O
mu_stream_destroy	(*(*(struct)))->(void)
(	O
&	O
out	*(struct)
)	O
;	O
}	O
else	O
{	O
char	O
*	O
uidl	array(char)
=	O
NULL	O
;	O
unsigned	O
int	O
msgno	long
=	O
strtoul	(*(char),*(*(char)),int)->(long)
(	O
argv	*(*(char))
[	O
1	int
]	O
,	O
NULL	O
,	O
10	int
)	O
;	O
status	int
=	O
mu_pop3_uidl	(*(struct),int,*(*(char)))->(int)
(	O
pop3	*(*(struct))
,	O
msgno	long
,	O
&	O
uidl	array(char)
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
mu_printf	(*(char))->(int)
(	O
"Msg: %d UIDL: %s\n"	*(char)
,	O
msgno	long
,	O
mu_prstr	(*(char))->(*(char))
(	O
uidl	array(char)
)	O
)	O
;	O
free	(*(void))->(void)
(	O
uidl	array(char)
)	O
;	O
}	O
return	O
status	int
;	O
}	O
static	O
int	O
com_list	(int,*(*(char)))->(int)
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	*(*(char))
)	O
{	O
int	O
status	int
=	O
0	int
;	O
if	O
(	O
argc	long
==	O
1	int
)	O
{	O
mu_stream_t	*(struct)
out	*(struct)
=	O
mutool_open_pager	()->(*(struct))
(	O
)	O
;	O
mu_iterator_t	*(struct)
list_iterator	*(struct)
;	O
status	int
=	O
mu_pop3_list_all	(*(struct),*(*(struct)))->(int)
(	O
pop3	*(*(struct))
,	O
&	O
list_iterator	*(struct)
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
{	O
for	O
(	O
mu_iterator_first	(*(struct))->(int)
(	O
list_iterator	*(struct)
)	O
;	O
!	O
mu_iterator_is_done	(*(struct))->(int)
(	O
list_iterator	*(struct)
)	O
;	O
mu_iterator_next	(*(struct))->(int)
(	O
list_iterator	*(struct)
)	O
)	O
{	O
char	O
*	O
list	*(struct)
=	O
NULL	O
;	O
mu_iterator_current	(*(struct),*(*(void)))->(int)
(	O
list_iterator	*(struct)
,	O
(	O
void	O
*	O
*	O
)	O
&	O
list	*(struct)
)	O
;	O
mu_stream_printf	(*(struct),*(char))->(int)
(	O
out	*(struct)
,	O
"LIST: %s\n"	*(char)
,	O
mu_prstr	(*(char))->(*(char))
(	O
list	*(struct)
)	O
)	O
;	O
}	O
mu_iterator_destroy	(*(*(struct)))->(void)
(	O
&	O
list_iterator	*(struct)
)	O
;	O
mu_stream_destroy	(*(*(struct)))->(void)
(	O
&	O
out	*(struct)
)	O
;	O
}	O
}	O
else	O
{	O
size_t	long
size	long
=	O
0	int
;	O
unsigned	O
int	O
msgno	long
=	O
strtoul	(*(char),*(*(char)),int)->(long)
(	O
argv	*(*(char))
[	O
1	int
]	O
,	O
NULL	O
,	O
10	int
)	O
;	O
status	int
=	O
mu_pop3_list	(*(struct),int,*(long))->(int)
(	O
pop3	*(*(struct))
,	O
msgno	long
,	O
&	O
size	long
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
mu_printf	(*(char))->(int)
(	O
"Msg: %u Size: %lu\n"	*(char)
,	O
msgno	long
,	O
(	O
unsigned	O
long	O
)	O
size	long
)	O
;	O
}	O
return	O
status	int
;	O
}	O
static	O
int	O
com_noop	(int,*(*(char)))->(int)
(	O
int	O
argc	long
MU_ARG_UNUSED	O
,	O
char	O
*	O
*	O
argv	*(*(char))
MU_ARG_UNUSED	O
)	O
{	O
return	O
mu_pop3_noop	(*(struct))->(int)
(	O
pop3	*(*(struct))
)	O
;	O
}	O
static	O
int	O
com_pass	(int,*(*(char)))->(int)
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	*(*(char))
)	O
{	O
int	O
status	int
;	O
char	O
*	O
pwd	*(char)
,	O
*	O
passbuf	*(char)
=	O
NULL	O
;	O
if	O
(	O
argc	long
==	O
1	int
)	O
{	O
if	O
(	O
!	O
mutool_shell_interactive	int
)	O
{	O
mu_error	(*(char))->(int)
(	O
_	O
(	O
"pass: password required"	*(char)
)	O
)	O
;	O
return	O
1	int
;	O
}	O
status	int
=	O
mu_getpass	(*(struct),*(struct),*(char),*(*(char)))->(int)
(	O
mu_strin	*(struct)
,	O
mu_strout	*(struct)
,	O
"Password:"	*(char)
,	O
&	O
passbuf	*(char)
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
pwd	*(char)
=	O
passbuf	*(char)
;	O
}	O
else	O
pwd	*(char)
=	O
argv	*(*(char))
[	O
1	int
]	O
;	O
status	int
=	O
mu_pop3_pass	(*(struct),*(char))->(int)
(	O
pop3	*(*(struct))
,	O
pwd	*(char)
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
{	O
pop_session_status	enum(int,int,int)
=	O
pop_session_logged_in	int
;	O
pop_prompt_env	()->(void)
(	O
)	O
;	O
}	O
free	(*(void))->(void)
(	O
passbuf	*(char)
)	O
;	O
return	O
status	int
;	O
}	O
static	O
int	O
com_stat	(int,*(*(char)))->(int)
(	O
int	O
argc	long
MU_ARG_UNUSED	O
,	O
char	O
*	O
*	O
argv	*(*(char))
MU_ARG_UNUSED	O
)	O
{	O
size_t	long
count	long
=	O
0	int
;	O
mu_off_t	long
size	long
=	O
0	int
;	O
int	O
status	int
=	O
0	int
;	O
status	int
=	O
mu_pop3_stat	(*(struct),*(long),*(long))->(int)
(	O
pop3	*(*(struct))
,	O
&	O
count	long
,	O
&	O
size	long
)	O
;	O
mu_printf	(*(char))->(int)
(	O
"Mesgs: %lu Size %lu\n"	*(char)
,	O
(	O
unsigned	O
long	O
)	O
count	long
,	O
(	O
unsigned	O
long	O
)	O
size	long
)	O
;	O
return	O
status	int
;	O
}	O
static	O
int	O
com_stls	(int,*(*(char)))->(int)
(	O
int	O
argc	long
MU_ARG_UNUSED	O
,	O
char	O
*	O
*	O
argv	*(*(char))
MU_ARG_UNUSED	O
)	O
{	O
return	O
mu_pop3_stls	(*(struct))->(int)
(	O
pop3	*(*(struct))
)	O
;	O
}	O
static	O
int	O
com_dele	(int,*(*(char)))->(int)
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	*(*(char))
)	O
{	O
unsigned	O
msgno	long
;	O
msgno	long
=	O
strtoul	(*(char),*(*(char)),int)->(long)
(	O
argv	*(*(char))
[	O
1	int
]	O
,	O
NULL	O
,	O
10	int
)	O
;	O
return	O
mu_pop3_dele	(*(struct),int)->(int)
(	O
pop3	*(*(struct))
,	O
msgno	long
)	O
;	O
}	O
static	O
int	O
com_rset	(int,*(*(char)))->(int)
(	O
int	O
argc	long
MU_ARG_UNUSED	O
,	O
char	O
*	O
*	O
argv	*(*(char))
MU_ARG_UNUSED	O
)	O
{	O
return	O
mu_pop3_rset	(*(struct))->(int)
(	O
pop3	*(*(struct))
)	O
;	O
}	O
static	O
int	O
com_top	(int,*(*(char)))->(int)
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	*(*(char))
)	O
{	O
mu_stream_t	*(struct)
stream	*(struct)
;	O
unsigned	O
int	O
msgno	long
;	O
unsigned	O
int	O
lines	int
;	O
int	O
status	int
;	O
msgno	long
=	O
strtoul	(*(char),*(*(char)),int)->(long)
(	O
argv	*(*(char))
[	O
1	int
]	O
,	O
NULL	O
,	O
10	int
)	O
;	O
if	O
(	O
argc	long
==	O
3	int
)	O
lines	int
=	O
strtoul	(*(char),*(*(char)),int)->(long)
(	O
argv	*(*(char))
[	O
2	int
]	O
,	O
NULL	O
,	O
10	int
)	O
;	O
else	O
lines	int
=	O
5	int
;	O
status	int
=	O
mu_pop3_top	(*(struct),int,int,*(*(struct)))->(int)
(	O
pop3	*(*(struct))
,	O
msgno	long
,	O
lines	int
,	O
&	O
stream	*(struct)
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
{	O
mu_stream_t	*(struct)
out	*(struct)
=	O
mutool_open_pager	()->(*(struct))
(	O
)	O
;	O
mu_stream_copy	(*(struct),*(struct),long,*(long))->(int)
(	O
out	*(struct)
,	O
stream	*(struct)
,	O
0	int
,	O
NULL	O
)	O
;	O
mu_stream_destroy	(*(*(struct)))->(void)
(	O
&	O
out	*(struct)
)	O
;	O
mu_stream_destroy	(*(*(struct)))->(void)
(	O
&	O
stream	*(struct)
)	O
;	O
}	O
return	O
status	int
;	O
}	O
static	O
int	O
com_retr	(int,*(*(char)))->(int)
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	*(*(char))
)	O
{	O
mu_stream_t	*(struct)
stream	*(struct)
;	O
unsigned	O
int	O
msgno	long
;	O
int	O
status	int
;	O
msgno	long
=	O
strtoul	(*(char),*(*(char)),int)->(long)
(	O
argv	*(*(char))
[	O
1	int
]	O
,	O
NULL	O
,	O
10	int
)	O
;	O
status	int
=	O
mu_pop3_retr	(*(struct),int,*(*(struct)))->(int)
(	O
pop3	*(*(struct))
,	O
msgno	long
,	O
&	O
stream	*(struct)
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
{	O
mu_stream_t	*(struct)
out	*(struct)
=	O
mutool_open_pager	()->(*(struct))
(	O
)	O
;	O
mu_stream_copy	(*(struct),*(struct),long,*(long))->(int)
(	O
out	*(struct)
,	O
stream	*(struct)
,	O
0	int
,	O
NULL	O
)	O
;	O
mu_stream_destroy	(*(*(struct)))->(void)
(	O
&	O
out	*(struct)
)	O
;	O
mu_stream_destroy	(*(*(struct)))->(void)
(	O
&	O
stream	*(struct)
)	O
;	O
}	O
return	O
status	int
;	O
}	O
static	O
int	O
com_disconnect	(int,*(*(char)))->(int)
(	O
int	O
argc	long
MU_ARG_UNUSED	O
,	O
char	O
*	O
*	O
argv	*(*(char))
MU_ARG_UNUSED	O
)	O
{	O
if	O
(	O
pop3	*(*(struct))
)	O
{	O
mu_pop3_disconnect	(*(struct))->(int)
(	O
pop3	*(*(struct))
)	O
;	O
mu_pop3_destroy	(*(*(struct)))->(void)
(	O
&	O
pop3	*(*(struct))
)	O
;	O
pop3	*(*(struct))
=	O
NULL	O
;	O
mu_argcv_free	(long,*(*(char)))->(void)
(	O
connect_argc	int
,	O
connect_argv	*(*(char))
)	O
;	O
connect_argc	int
=	O
0	int
;	O
connect_argv	*(*(char))
=	O
NULL	O
;	O
pop_session_status	enum(int,int,int)
=	O
pop_session_disconnected	int
;	O
pop_prompt_env	()->(void)
(	O
)	O
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
com_connect	(int,*(*(char)))->(int)
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	*(*(char))
)	O
{	O
int	O
status	int
;	O
int	O
tls	int
=	O
0	int
;	O
int	O
i	long
=	O
1	int
;	O
int	O
n	*(long)
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<	O
argc	long
;	O
i	long
++	O
)	O
{	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
argv	*(*(char))
[	O
i	long
]	O
,	O
"-tls"	*(char)
)	O
==	O
0	int
)	O
{	O
mu_error	(*(char))->(int)
(	O
"TLS not supported"	*(char)
)	O
;	O
return	O
0	int
;	O
}	O
else	O
break	O
;	O
}	O
argc	long
-=	O
i	long
;	O
argv	*(*(char))
+=	O
i	long
;	O
if	O
(	O
pop_session_status	enum(int,int,int)
!=	O
pop_session_disconnected	int
)	O
com_disconnect	(int,*(*(char)))->(int)
(	O
0	int
,	O
NULL	O
)	O
;	O
status	int
=	O
mu_pop3_create	(*(*(struct)))->(int)
(	O
&	O
pop3	*(*(struct))
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
{	O
mu_stream_t	*(struct)
tcp	*(struct)
;	O
struct	O
mu_sockaddr	struct(*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(char))),*(struct(*(struct`),*(struct`),*(struct`),int,*(char))),*(struct(short,array(char))),int,*(char))),*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(char))),*(struct(*(struct`),*(struct`),*(struct`),int,*(char))),*(struct(short,array(char))),int,*(char))),*(struct(short,array(char))),int,*(char))
*	O
sa	*(struct)
;	O
struct	O
mu_sockaddr_hints	struct(int,int,int,int,short)
hints	*(struct(*(char),*(char)))
;	O
if	O
(	O
QRY_VERBOSE	O
(	O
)	O
)	O
{	O
pop_set_verbose	()->(void)
(	O
)	O
;	O
pop_set_verbose_mask	()->(void)
(	O
)	O
;	O
}	O
memset	(*(void),int,long)->(*(void))
(	O
&	O
hints	*(struct(*(char),*(char)))
,	O
0	int
,	O
sizeof	O
(	O
hints	*(struct(*(char),*(char)))
)	O
)	O
;	O
hints	*(struct(*(char),*(char)))
.	O
flags	int
=	O
MU_AH_DETECT_FAMILY	int
;	O
hints	*(struct(*(char),*(char)))
.	O
port	int
=	O
tls	int
?	O
MU_POP3_DEFAULT_SSL_PORT	int
:	O
MU_POP3_DEFAULT_PORT	int
;	O
hints	*(struct(*(char),*(char)))
.	O
protocol	int
=	O
IPPROTO_TCP	int
;	O
hints	*(struct(*(char),*(char)))
.	O
socktype	int
=	O
SOCK_STREAM	int
;	O
status	int
=	O
mu_sockaddr_from_node	(*(*(struct(*(struct`),*(struct`),*(struct`),int,*(char)))),*(char),*(char),*(struct(int,int,int,int,short)))->(int)
(	O
&	O
sa	*(struct)
,	O
argv	*(*(char))
[	O
0	int
]	O
,	O
argv	*(*(char))
[	O
1	int
]	O
,	O
&	O
hints	*(struct(*(char),*(char)))
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
{	O
n	*(long)
=	O
port_from_sa	(*(struct(*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),*(struct(short,array(char))),int,*(char))))->(int)
(	O
sa	*(struct)
)	O
;	O
status	int
=	O
mu_tcp_stream_create_from_sa	(*(*(struct)),*(struct),*(struct),int)->(int)
(	O
&	O
tcp	*(struct)
,	O
sa	*(struct)
,	O
NULL	O
,	O
0	int
)	O
;	O
if	O
(	O
status	int
)	O
mu_sockaddr_free	(*(struct(*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),*(struct(short,array(char))),int,*(char))))->(void)
(	O
sa	*(struct)
)	O
;	O
}	O
if	O
(	O
status	int
==	O
0	int
)	O
{	O
mu_pop3_set_carrier	(*(struct),*(struct))->(int)
(	O
pop3	*(*(struct))
,	O
tcp	*(struct)
)	O
;	O
status	int
=	O
mu_pop3_connect	(*(struct))->(int)
(	O
pop3	*(*(struct))
)	O
;	O
}	O
else	O
{	O
mu_pop3_destroy	(*(*(struct)))->(void)
(	O
&	O
pop3	*(*(struct))
)	O
;	O
pop3	*(*(struct))
=	O
NULL	O
;	O
}	O
}	O
if	O
(	O
status	int
)	O
mu_error	(*(char))->(int)
(	O
"Failed to create pop3: %s"	*(char)
,	O
mu_strerror	(int)->(*(char))
(	O
status	int
)	O
)	O
;	O
else	O
{	O
connect_argc	int
=	O
argc	long
;	O
connect_argv	*(*(char))
=	O
mu_calloc	(long,long)->(*(void))
(	O
argc	long
+	O
1	int
,	O
sizeof	O
(	O
*	O
connect_argv	*(*(char))
)	O
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
argc	long
;	O
i	long
++	O
)	O
connect_argv	*(*(char))
[	O
i	long
]	O
=	O
mu_strdup	(*(char))->(*(char))
(	O
argv	*(*(char))
[	O
i	long
]	O
)	O
;	O
connect_argv	*(*(char))
[	O
i	long
]	O
=	O
NULL	O
;	O
port	int
=	O
n	*(long)
;	O
pop_session_status	enum(int,int,int)
=	O
pop_session_connected	int
;	O
pop_prompt_env	()->(void)
(	O
)	O
;	O
}	O
return	O
status	int
;	O
}	O
static	O
int	O
com_quit	(int,*(*(char)))->(int)
(	O
int	O
argc	long
MU_ARG_UNUSED	O
,	O
char	O
*	O
*	O
argv	*(*(char))
MU_ARG_UNUSED	O
)	O
{	O
int	O
status	int
=	O
0	int
;	O
if	O
(	O
pop3	*(*(struct))
)	O
{	O
if	O
(	O
mu_pop3_quit	(*(struct))->(int)
(	O
pop3	*(*(struct))
)	O
==	O
0	int
)	O
{	O
status	int
=	O
com_disconnect	(int,*(*(char)))->(int)
(	O
0	int
,	O
NULL	O
)	O
;	O
}	O
else	O
{	O
mu_printf	(*(char))->(int)
(	O
"Try 'exit' to leave %s\n"	*(char)
,	O
mu_program_name	*(char)
)	O
;	O
}	O
}	O
else	O
mu_printf	(*(char))->(int)
(	O
"Try 'exit' to leave %s\n"	*(char)
,	O
mu_program_name	*(char)
)	O
;	O
return	O
status	int
;	O
}	O
struct	O
mutool_command	struct(*(char),int,int,int,*((int,*(*(char)))->(int)),*(char),*(char))
pop_comtab	array(struct(*(char),int,int,int,*((int,*(*(char)))->(int)),*(char),*(char)))
[	O
]	O
=	O
{	O
{	O
"apop"	*(char)
,	O
2	int
,	O
3	int
,	O
0	int
,	O
com_apop	(int,*(*(char)))->(int)
,	O
N_	O
(	O
"USER [PASS]"	*(char)
)	O
,	O
N_	O
(	O
"authenticate with APOP"	*(char)
)	O
}	O
,	O
{	O
"capa"	*(char)
,	O
1	int
,	O
-	O
1	int
,	O
0	int
,	O
com_capa	(int,*(*(char)))->(int)
,	O
N_	O
(	O
"[-reread] [NAME...]"	*(char)
)	O
,	O
N_	O
(	O
"list server capabilities"	*(char)
)	O
}	O
,	O
{	O
"disconnect"	*(char)
,	O
1	int
,	O
1	int
,	O
0	int
,	O
com_disconnect	(int,*(*(char)))->(int)
,	O
NULL	O
,	O
N_	O
(	O
"close connection"	*(char)
)	O
}	O
,	O
{	O
"dele"	*(char)
,	O
2	int
,	O
2	int
,	O
0	int
,	O
com_dele	(int,*(*(char)))->(int)
,	O
N_	O
(	O
"NUMBER"	*(char)
)	O
,	O
N_	O
(	O
"mark message for deletion"	*(char)
)	O
}	O
,	O
{	O
"list"	*(char)
,	O
1	int
,	O
2	int
,	O
0	int
,	O
com_list	(int,*(*(char)))->(int)
,	O
N_	O
(	O
"[NUMBER]"	*(char)
)	O
,	O
N_	O
(	O
"list messages"	*(char)
)	O
}	O
,	O
{	O
"noop"	*(char)
,	O
1	int
,	O
1	int
,	O
0	int
,	O
com_noop	(int,*(*(char)))->(int)
,	O
NULL	O
,	O
N_	O
(	O
"send a \"no operation\""	*(char)
)	O
}	O
,	O
{	O
"pass"	*(char)
,	O
1	int
,	O
2	int
,	O
0	int
,	O
com_pass	(int,*(*(char)))->(int)
,	O
N_	O
(	O
"[PASSWORD]"	*(char)
)	O
,	O
N_	O
(	O
"user password"	*(char)
)	O
}	O
,	O
{	O
"connect"	*(char)
,	O
1	int
,	O
4	int
,	O
0	int
,	O
com_connect	(int,*(*(char)))->(int)
,	O
N_	O
(	O
"[-tls] HOSTNAME [PORT]"	*(char)
)	O
,	O
N_	O
(	O
"open connection"	*(char)
)	O
}	O
,	O
{	O
"quit"	*(char)
,	O
1	int
,	O
1	int
,	O
0	int
,	O
com_quit	(int,*(*(char)))->(int)
,	O
NULL	O
,	O
N_	O
(	O
"quit pop3 session"	*(char)
)	O
}	O
,	O
{	O
"retr"	*(char)
,	O
2	int
,	O
2	int
,	O
0	int
,	O
com_retr	(int,*(*(char)))->(int)
,	O
"NUMBER"	*(char)
,	O
N_	O
(	O
"retrieve a message"	*(char)
)	O
}	O
,	O
{	O
"rset"	*(char)
,	O
1	int
,	O
1	int
,	O
0	int
,	O
com_rset	(int,*(*(char)))->(int)
,	O
NULL	O
,	O
N_	O
(	O
"remove deletion marks"	*(char)
)	O
}	O
,	O
{	O
"stat"	*(char)
,	O
1	int
,	O
1	int
,	O
0	int
,	O
com_stat	(int,*(*(char)))->(int)
,	O
NULL	O
,	O
N_	O
(	O
"get the mailbox size and number of messages in it"	*(char)
)	O
}	O
,	O
{	O
"stls"	*(char)
,	O
1	int
,	O
1	int
,	O
0	int
,	O
com_stls	(int,*(*(char)))->(int)
,	O
NULL	O
,	O
N_	O
(	O
"start TLS negotiation"	*(char)
)	O
}	O
,	O
{	O
"top"	*(char)
,	O
2	int
,	O
3	int
,	O
0	int
,	O
com_top	(int,*(*(char)))->(int)
,	O
"MSGNO [NUMBER]"	*(char)
,	O
N_	O
(	O
"display message headers and first NUMBER (default 5) lines of"	*(char)
" its body"	*(char)
)	O
}	O
,	O
{	O
"uidl"	*(char)
,	O
1	int
,	O
2	int
,	O
0	int
,	O
com_uidl	(int,*(*(char)))->(int)
,	O
N_	O
(	O
"[NUMBER]"	*(char)
)	O
,	O
N_	O
(	O
"show unique message identifiers"	*(char)
)	O
}	O
,	O
{	O
"user"	*(char)
,	O
2	int
,	O
2	int
,	O
0	int
,	O
com_user	(int,*(*(char)))->(int)
,	O
N_	O
(	O
"NAME"	*(char)
)	O
,	O
N_	O
(	O
"send login"	*(char)
)	O
}	O
,	O
{	O
"verbose"	*(char)
,	O
1	int
,	O
4	int
,	O
0	int
,	O
com_verbose	(int,*(*(char)))->(int)
,	O
"[on|off|mask|unmask] [secure [payload]]"	*(char)
,	O
N_	O
(	O
"control the protocol tracing"	*(char)
)	O
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
int	O
main	(int,*(*(char)))->(int)
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	*(*(char))
)	O
{	O
mu_registrar_record	(*(struct(int,*(char),int,int,int,*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*(void),*((*`,*`,int)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,int)->(int)))))->(int)
(	O
mu_pop_record	*(struct(int,*(char),int,int,int,*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*(void),*((*(struct`),*(struct`),int)->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(char),int)->(int))))
)	O
;	O
mu_registrar_record	(*(struct(int,*(char),int,int,int,*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*(void),*((*`,*`,int)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,int)->(int)))))->(int)
(	O
mu_pops_record	*(struct(int,*(char),int,int,int,*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*(void),*((*(struct`),*(struct`),int)->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(char),int)->(int))))
)	O
;	O
mu_action_getopt	(*(int),*(*(*(char))),*(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*`,*`,*`)->(void)),*(char))),*(char),*(char))->(void)
(	O
&	O
argc	long
,	O
&	O
argv	*(*(char))
,	O
NULL	O
,	O
pop_docstring	array(char)
,	O
NULL	O
)	O
;	O
if	O
(	O
argc	long
)	O
{	O
mu_error	(*(char))->(int)
(	O
_	O
(	O
"too many arguments"	*(char)
)	O
)	O
;	O
return	O
1	int
;	O
}	O
mutool_shell_prompt	*(char)
=	O
mu_strdup	(*(char))->(*(char))
(	O
"pop> "	*(char)
)	O
;	O
pop_prompt_env	()->(void)
(	O
)	O
;	O
mutool_shell	(*(char),*(struct(*(char),int,int,int,*((int,*`)->(int)),*(char),*(char))))->(int)
(	O
"pop"	*(char)
,	O
pop_comtab	array(struct(*(char),int,int,int,*((int,*(*(char)))->(int)),*(char),*(char)))
)	O
;	O
return	O
0	int
;	O
}	O
