Ring	struct(*(char),*(char),*(char),*(char),*(char),int,long,long)
ttyoring	struct(*(char),*(char),*(char),*(char),*(char),int,long,long)
,	O
ttyiring	struct(*(char),*(char),*(char),*(char),*(char),int,long,long)
;	O
unsigned	O
char	O
ttyobuf	array(char)
[	O
2	int
*	O
BUFSIZ	int
]	O
,	O
ttyibuf	array(char)
[	O
BUFSIZ	int
]	O
;	O
int	O
termdata	int
;	O
cc_t	char
termAytChar	char
;	O
void	O
init_terminal	()->(void)
(	O
void	O
)	O
{	O
if	O
(	O
ring_init	(*(struct(*(char),*(char),*(char),*(char),*(char),int,long,long)),*(char),int)->(int)
(	O
&	O
ttyoring	struct(*(char),*(char),*(char),*(char),*(char),int,long,long)
,	O
ttyobuf	array(char)
,	O
sizeof	O
ttyobuf	array(char)
)	O
!=	O
1	int
)	O
{	O
exit	(int)->(void)
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
if	O
(	O
ring_init	(*(struct(*(char),*(char),*(char),*(char),*(char),int,long,long)),*(char),int)->(int)
(	O
&	O
ttyiring	struct(*(char),*(char),*(char),*(char),*(char),int,long,long)
,	O
ttyibuf	array(char)
,	O
sizeof	O
ttyibuf	array(char)
)	O
!=	O
1	int
)	O
{	O
exit	(int)->(void)
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
autoflush	int
=	O
TerminalAutoFlush	()->(int)
(	O
)	O
;	O
}	O
int	O
ttyflush	(int)->(int)
(	O
int	O
drop	int
)	O
{	O
register	O
int	O
n	int
,	O
n0	int
,	O
n1	int
;	O
n0	int
=	O
ring_full_count	(*(struct(*(char),*(char),*(char),*(char),*(char),int,long,long)))->(int)
(	O
&	O
ttyoring	struct(*(char),*(char),*(char),*(char),*(char),int,long,long)
)	O
;	O
if	O
(	O
(	O
n1	int
=	O
n	int
=	O
ring_full_consecutive	(*(struct(*(char),*(char),*(char),*(char),*(char),int,long,long)))->(int)
(	O
&	O
ttyoring	struct(*(char),*(char),*(char),*(char),*(char),int,long,long)
)	O
)	O
>	O
0	int
)	O
{	O
if	O
(	O
drop	int
)	O
{	O
TerminalFlushOutput	()->(void)
(	O
)	O
;	O
}	O
else	O
{	O
n	int
=	O
TerminalWrite	(*(char),int)->(int)
(	O
(	O
char	O
*	O
)	O
ttyoring	struct(*(char),*(char),*(char),*(char),*(char),int,long,long)
.	O
consume	*(char)
,	O
n	int
)	O
;	O
}	O
}	O
if	O
(	O
n	int
>	O
0	int
)	O
{	O
if	O
(	O
termdata	int
&&	O
n	int
)	O
{	O
Dump	(char,*(char),int)->(void)
(	O
'>'	O
,	O
ttyoring	struct(*(char),*(char),*(char),*(char),*(char),int,long,long)
.	O
consume	*(char)
,	O
n	int
)	O
;	O
}	O
if	O
(	O
n1	int
==	O
n	int
&&	O
n0	int
>	O
n	int
)	O
{	O
n1	int
=	O
n0	int
-	O
n	int
;	O
if	O
(	O
!	O
drop	int
)	O
n1	int
=	O
TerminalWrite	(*(char),int)->(int)
(	O
(	O
char	O
*	O
)	O
ttyoring	struct(*(char),*(char),*(char),*(char),*(char),int,long,long)
.	O
bottom	*(char)
,	O
n1	int
)	O
;	O
if	O
(	O
n1	int
>	O
0	int
)	O
n	int
+=	O
n1	int
;	O
}	O
ring_consumed	(*(struct(*(char),*(char),*(char),*(char),*(char),int,long,long)),int)->(void)
(	O
&	O
ttyoring	struct(*(char),*(char),*(char),*(char),*(char),int,long,long)
,	O
n	int
)	O
;	O
}	O
if	O
(	O
n	int
<	O
0	int
)	O
return	O
-	O
1	int
;	O
if	O
(	O
n	int
==	O
n0	int
)	O
{	O
if	O
(	O
n0	int
)	O
return	O
-	O
1	int
;	O
return	O
0	int
;	O
}	O
return	O
n0	int
-	O
n	int
+	O
1	int
;	O
}	O
int	O
getconnmode	()->(int)
(	O
void	O
)	O
{	O
extern	O
int	O
linemode	int
;	O
int	O
mode	int
=	O
0	int
;	O
extern	O
int	O
kludgelinemode	int
;	O
if	O
(	O
In3270	int
)	O
return	O
(	O
MODE_FLOW	int
)	O
;	O
if	O
(	O
my_want_state_is_dont	O
(	O
TELOPT_ECHO	int
)	O
)	O
mode	int
|=	O
MODE_ECHO	int
;	O
if	O
(	O
localflow	int
)	O
mode	int
|=	O
MODE_FLOW	int
;	O
if	O
(	O
my_want_state_is_will	O
(	O
TELOPT_BINARY	int
)	O
)	O
mode	int
|=	O
MODE_INBIN	int
;	O
if	O
(	O
his_want_state_is_will	O
(	O
TELOPT_BINARY	int
)	O
)	O
mode	int
|=	O
MODE_OUTBIN	int
;	O
if	O
(	O
kludgelinemode	int
)	O
{	O
if	O
(	O
my_want_state_is_dont	O
(	O
TELOPT_SGA	int
)	O
)	O
{	O
mode	int
|=	O
(	O
MODE_TRAPSIG	int
|	O
MODE_EDIT	int
)	O
;	O
if	O
(	O
dontlecho	int
&&	O
(	O
clocks	struct(int,int,int,int,int)
.	O
echotoggle	int
>	O
clocks	struct(int,int,int,int,int)
.	O
modenegotiated	int
)	O
)	O
{	O
mode	int
&=	O
~	O
MODE_ECHO	int
;	O
}	O
}	O
return	O
(	O
mode	int
)	O
;	O
}	O
if	O
(	O
my_want_state_is_will	O
(	O
TELOPT_LINEMODE	int
)	O
)	O
mode	int
|=	O
linemode	int
;	O
return	O
(	O
mode	int
)	O
;	O
}	O
void	O
setconnmode	(int)->(void)
(	O
int	O
force	int
)	O
{	O
register	O
int	O
newmode	int
;	O
newmode	int
=	O
getconnmode	()->(int)
(	O
)	O
|	O
(	O
force	int
?	O
MODE_FORCE	int
:	O
0	int
)	O
;	O
TerminalNewMode	(int)->(void)
(	O
newmode	int
)	O
;	O
}	O
void	O
setcommandmode	()->(void)
(	O
void	O
)	O
{	O
TerminalNewMode	(int)->(void)
(	O
-	O
1	int
)	O
;	O
}	O
