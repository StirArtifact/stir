int	O
getword	(*(*(char)),*(*(char)),int)->(int)
(	O
char	O
*	O
*	O
pret	*(*(struct))
,	O
const	O
char	O
*	O
*	O
pstr	*(*(char))
,	O
int	O
delim	int
)	O
{	O
size_t	long
len	int
;	O
char	O
*	O
ret	*(char)
;	O
const	O
char	O
*	O
start	long
=	O
*	O
pstr	*(*(char))
;	O
const	O
char	O
*	O
end	long
=	O
strchr	(*(char),int)->(*(char))
(	O
start	long
,	O
delim	int
)	O
;	O
free	(*(void))->(void)
(	O
*	O
pret	*(*(struct))
)	O
;	O
*	O
pret	*(*(struct))
=	O
NULL	O
;	O
if	O
(	O
!	O
end	long
)	O
return	O
MU_ERR_BAD_2047_INPUT	O
;	O
len	int
=	O
end	long
-	O
start	long
;	O
ret	*(char)
=	O
malloc	(long)->(*(void))
(	O
len	int
+	O
1	int
)	O
;	O
if	O
(	O
!	O
ret	*(char)
)	O
return	O
ENOMEM	int
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
ret	*(char)
,	O
start	long
,	O
len	int
)	O
;	O
ret	*(char)
[	O
len	int
]	O
=	O
0	int
;	O
*	O
pstr	*(*(char))
=	O
end	long
+	O
1	int
;	O
*	O
pret	*(*(struct))
=	O
ret	*(char)
;	O
return	O
0	int
;	O
}	O
static	O
int	O
_rfc2047_decode_param	(*(char),*(char),*(struct(*(char),*(char),*(char))))->(int)
(	O
const	O
char	O
*	O
tocode	*(char)
,	O
const	O
char	O
*	O
input	*(char)
,	O
struct	O
mu_mime_param	struct(*(char),*(char),*(char))
*	O
param	*(*(struct(*(char),*(char),*(char))))
)	O
{	O
int	O
status	int
=	O
0	int
;	O
const	O
char	O
*	O
fromstr	*(char)
;	O
size_t	long
run_count	long
=	O
0	int
;	O
char	O
*	O
fromcode	*(char)
=	O
NULL	O
;	O
char	O
*	O
encoding_type	*(char)
=	O
NULL	O
;	O
char	O
*	O
encoded_text	*(char)
=	O
NULL	O
;	O
char	O
*	O
tocodetmp	*(char)
=	O
NULL	O
;	O
mu_stream_t	*(struct)
str	*(struct)
;	O
memset	(*(void),int,long)->(*(void))
(	O
param	*(*(struct(*(char),*(char),*(char))))
,	O
0	int
,	O
sizeof	O
(	O
*	O
param	*(*(struct(*(char),*(char),*(char))))
)	O
)	O
;	O
status	int
=	O
mu_memory_stream_create	(*(*(struct)),int)->(int)
(	O
&	O
str	*(struct)
,	O
MU_STREAM_RDWR	O
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
if	O
(	O
tocode	*(char)
&&	O
(	O
param	*(*(struct(*(char),*(char),*(char))))
->	O
cset	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
tocode	*(char)
)	O
)	O
==	O
NULL	O
)	O
{	O
mu_stream_destroy	(*(*(struct)))->(void)
(	O
&	O
str	*(struct)
)	O
;	O
return	O
ENOMEM	int
;	O
}	O
fromstr	*(char)
=	O
input	*(char)
;	O
while	O
(	O
*	O
fromstr	*(char)
)	O
{	O
if	O
(	O
strncmp	(*(char),*(char),long)->(int)
(	O
fromstr	*(char)
,	O
"=?"	*(char)
,	O
2	int
)	O
==	O
0	int
)	O
{	O
mu_stream_t	*(struct)
filter	*(struct)
=	O
NULL	O
;	O
mu_stream_t	*(struct)
in_stream	*(struct)
=	O
NULL	O
;	O
const	O
char	O
*	O
filter_type	*(char)
=	O
NULL	O
;	O
size_t	long
size	long
;	O
const	O
char	O
*	O
sp	*(char)
=	O
fromstr	*(char)
+	O
2	int
;	O
char	O
*	O
lang	*(char)
;	O
status	int
=	O
getword	(*(*(char)),*(*(char)),int)->(int)
(	O
&	O
fromcode	*(char)
,	O
&	O
sp	*(char)
,	O
'?'	O
)	O
;	O
if	O
(	O
status	int
)	O
break	O
;	O
lang	*(char)
=	O
strchr	(*(char),int)->(*(char))
(	O
fromcode	*(char)
,	O
'*'	O
)	O
;	O
if	O
(	O
lang	*(char)
)	O
*	O
lang	*(char)
++	O
=	O
0	int
;	O
if	O
(	O
!	O
param	*(*(struct(*(char),*(char),*(char))))
->	O
cset	*(char)
)	O
{	O
param	*(*(struct(*(char),*(char),*(char))))
->	O
cset	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
fromcode	*(char)
)	O
;	O
if	O
(	O
!	O
param	*(*(struct(*(char),*(char),*(char))))
->	O
cset	*(char)
)	O
{	O
status	int
=	O
ENOMEM	int
;	O
break	O
;	O
}	O
}	O
if	O
(	O
lang	*(char)
&&	O
!	O
param	*(*(struct(*(char),*(char),*(char))))
->	O
lang	*(char)
&&	O
(	O
param	*(*(struct(*(char),*(char),*(char))))
->	O
lang	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
lang	*(char)
)	O
)	O
==	O
NULL	O
)	O
{	O
status	int
=	O
ENOMEM	int
;	O
break	O
;	O
}	O
if	O
(	O
!	O
tocode	*(char)
)	O
{	O
if	O
(	O
(	O
tocodetmp	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
fromcode	*(char)
)	O
)	O
==	O
NULL	O
)	O
{	O
status	int
=	O
ENOMEM	int
;	O
break	O
;	O
}	O
tocode	*(char)
=	O
tocodetmp	*(char)
;	O
}	O
status	int
=	O
getword	(*(*(char)),*(*(char)),int)->(int)
(	O
&	O
encoding_type	*(char)
,	O
&	O
sp	*(char)
,	O
'?'	O
)	O
;	O
if	O
(	O
status	int
)	O
break	O
;	O
status	int
=	O
getword	(*(*(char)),*(*(char)),int)->(int)
(	O
&	O
encoded_text	*(char)
,	O
&	O
sp	*(char)
,	O
'?'	O
)	O
;	O
if	O
(	O
status	int
)	O
break	O
;	O
if	O
(	O
sp	*(char)
==	O
NULL	O
||	O
sp	*(char)
[	O
0	int
]	O
!=	O
'='	O
)	O
{	O
status	int
=	O
MU_ERR_BAD_2047_INPUT	O
;	O
break	O
;	O
}	O
size	long
=	O
strlen	(*(char))->(long)
(	O
encoded_text	*(char)
)	O
;	O
switch	O
(	O
encoding_type	*(char)
[	O
0	int
]	O
)	O
{	O
case	O
'b'	O
:	O
case	O
'B'	O
:	O
filter_type	*(char)
=	O
"base64"	*(char)
;	O
break	O
;	O
case	O
'q'	O
:	O
case	O
'Q'	O
:	O
filter_type	*(char)
=	O
"Q"	*(char)
;	O
break	O
;	O
default	O
:	O
status	int
=	O
MU_ERR_BAD_2047_INPUT	O
;	O
break	O
;	O
}	O
if	O
(	O
status	int
!=	O
0	int
)	O
break	O
;	O
mu_static_memory_stream_create	(*(*(struct)),*(void),long)->(int)
(	O
&	O
in_stream	*(struct)
,	O
encoded_text	*(char)
,	O
size	long
)	O
;	O
mu_stream_seek	(*(struct),long,int,*(long))->(int)
(	O
in_stream	*(struct)
,	O
0	int
,	O
MU_SEEK_SET	int
,	O
NULL	O
)	O
;	O
status	int
=	O
mu_decode_filter	(*(*(struct)),*(struct),*(char),*(char),*(char))->(int)
(	O
&	O
filter	*(struct)
,	O
in_stream	*(struct)
,	O
filter_type	*(char)
,	O
fromcode	*(char)
,	O
tocode	*(char)
)	O
;	O
mu_stream_unref	(*(struct))->(void)
(	O
in_stream	*(struct)
)	O
;	O
if	O
(	O
status	int
!=	O
0	int
)	O
break	O
;	O
status	int
=	O
mu_stream_copy	(*(struct),*(struct),long,*(long))->(int)
(	O
str	*(struct)
,	O
filter	*(struct)
,	O
0	int
,	O
NULL	O
)	O
;	O
mu_stream_destroy	(*(*(struct)))->(void)
(	O
&	O
filter	*(struct)
)	O
;	O
if	O
(	O
status	int
)	O
break	O
;	O
fromstr	*(char)
=	O
sp	*(char)
+	O
1	int
;	O
run_count	long
=	O
1	int
;	O
}	O
else	O
if	O
(	O
run_count	long
)	O
{	O
if	O
(	O
*	O
fromstr	*(char)
==	O
' '	O
||	O
*	O
fromstr	*(char)
==	O
'\t'	O
)	O
{	O
run_count	long
++	O
;	O
fromstr	*(char)
++	O
;	O
continue	O
;	O
}	O
else	O
{	O
if	O
(	O
--	O
run_count	long
)	O
{	O
status	int
=	O
mu_stream_write	(*(struct),*(void),long,*(long))->(int)
(	O
str	*(struct)
,	O
fromstr	*(char)
-	O
run_count	long
,	O
run_count	long
,	O
NULL	O
)	O
;	O
if	O
(	O
status	int
)	O
break	O
;	O
run_count	long
=	O
0	int
;	O
}	O
status	int
=	O
mu_stream_write	(*(struct),*(void),long,*(long))->(int)
(	O
str	*(struct)
,	O
fromstr	*(char)
,	O
1	int
,	O
NULL	O
)	O
;	O
if	O
(	O
status	int
)	O
break	O
;	O
fromstr	*(char)
++	O
;	O
}	O
}	O
else	O
{	O
status	int
=	O
mu_stream_write	(*(struct),*(void),long,*(long))->(int)
(	O
str	*(struct)
,	O
fromstr	*(char)
,	O
1	int
,	O
NULL	O
)	O
;	O
if	O
(	O
status	int
)	O
break	O
;	O
fromstr	*(char)
++	O
;	O
}	O
}	O
if	O
(	O
status	int
==	O
0	int
&&	O
*	O
fromstr	*(char)
)	O
status	int
=	O
mu_stream_write	(*(struct),*(void),long,*(long))->(int)
(	O
str	*(struct)
,	O
fromstr	*(char)
,	O
strlen	(*(char))->(long)
(	O
fromstr	*(char)
)	O
,	O
NULL	O
)	O
;	O
free	(*(void))->(void)
(	O
fromcode	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
encoding_type	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
encoded_text	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
tocodetmp	*(char)
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
{	O
mu_off_t	long
size	long
;	O
mu_stream_size	(*(struct),*(long))->(int)
(	O
str	*(struct)
,	O
&	O
size	long
)	O
;	O
param	*(*(struct(*(char),*(char),*(char))))
->	O
value	*(char)
=	O
malloc	(long)->(*(void))
(	O
size	long
+	O
1	int
)	O
;	O
if	O
(	O
!	O
param	*(*(struct(*(char),*(char),*(char))))
->	O
value	*(char)
)	O
status	int
=	O
ENOMEM	int
;	O
else	O
{	O
mu_stream_seek	(*(struct),long,int,*(long))->(int)
(	O
str	*(struct)
,	O
0	int
,	O
MU_SEEK_SET	int
,	O
NULL	O
)	O
;	O
status	int
=	O
mu_stream_read	(*(struct),*(void),long,*(long))->(int)
(	O
str	*(struct)
,	O
param	*(*(struct(*(char),*(char),*(char))))
->	O
value	*(char)
,	O
size	long
,	O
NULL	O
)	O
;	O
param	*(*(struct(*(char),*(char),*(char))))
->	O
value	*(char)
[	O
size	long
]	O
=	O
0	int
;	O
}	O
}	O
mu_stream_destroy	(*(*(struct)))->(void)
(	O
&	O
str	*(struct)
)	O
;	O
return	O
status	int
;	O
}	O
int	O
mu_rfc2047_decode_param	(*(char),*(char),*(*(struct(*(char),*(char),*(char)))))->(int)
(	O
const	O
char	O
*	O
tocode	*(char)
,	O
const	O
char	O
*	O
input	*(char)
,	O
struct	O
mu_mime_param	struct(*(char),*(char),*(char))
*	O
*	O
param_ptr	*(*(struct(*(char),*(char),*(char))))
)	O
{	O
int	O
rc	int
;	O
struct	O
mu_mime_param	struct(*(char),*(char),*(char))
*	O
p	*(struct(*(char),*(char),*(char)))
;	O
if	O
(	O
!	O
input	*(char)
)	O
return	O
EINVAL	int
;	O
if	O
(	O
!	O
param_ptr	*(*(struct(*(char),*(char),*(char))))
)	O
return	O
MU_ERR_OUT_PTR_NULL	O
;	O
p	*(struct(*(char),*(char),*(char)))
=	O
malloc	(long)->(*(void))
(	O
sizeof	O
(	O
*	O
p	*(struct(*(char),*(char),*(char)))
)	O
)	O
;	O
if	O
(	O
!	O
p	*(struct(*(char),*(char),*(char)))
)	O
return	O
errno	O
;	O
rc	int
=	O
_rfc2047_decode_param	(*(char),*(char),*(struct(*(char),*(char),*(char))))->(int)
(	O
tocode	*(char)
,	O
input	*(char)
,	O
p	*(struct(*(char),*(char),*(char)))
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
*	O
param_ptr	*(*(struct(*(char),*(char),*(char))))
=	O
p	*(struct(*(char),*(char),*(char)))
;	O
else	O
mu_mime_param_free	(*(struct(*(char),*(char),*(char))))->(void)
(	O
p	*(struct(*(char),*(char),*(char)))
)	O
;	O
return	O
rc	int
;	O
}	O
int	O
mu_rfc2047_decode	(*(char),*(char),*(*(char)))->(int)
(	O
const	O
char	O
*	O
tocode	*(char)
,	O
const	O
char	O
*	O
input	*(char)
,	O
char	O
*	O
*	O
ptostr	*(*(char))
)	O
{	O
int	O
rc	int
;	O
struct	O
mu_mime_param	struct(*(char),*(char),*(char))
param	*(*(struct(*(char),*(char),*(char))))
;	O
if	O
(	O
!	O
input	*(char)
)	O
return	O
EINVAL	int
;	O
if	O
(	O
!	O
ptostr	*(*(char))
)	O
return	O
MU_ERR_OUT_PTR_NULL	O
;	O
rc	int
=	O
_rfc2047_decode_param	(*(char),*(char),*(struct(*(char),*(char),*(char))))->(int)
(	O
tocode	*(char)
,	O
input	*(char)
,	O
&	O
param	*(*(struct(*(char),*(char),*(char))))
)	O
;	O
free	(*(void))->(void)
(	O
param	*(*(struct(*(char),*(char),*(char))))
.	O
cset	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
param	*(*(struct(*(char),*(char),*(char))))
.	O
lang	*(char)
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
*	O
ptostr	*(*(char))
=	O
param	*(*(struct(*(char),*(char),*(char))))
.	O
value	*(char)
;	O
return	O
rc	int
;	O
}	O
int	O
mu_rfc2047_encode	(*(char),*(char),*(char),*(*(char)))->(int)
(	O
const	O
char	O
*	O
charset	*(char)
,	O
const	O
char	O
*	O
encoding	*(char)
,	O
const	O
char	O
*	O
text	*(char)
,	O
char	O
*	O
*	O
result	*(*(char))
)	O
{	O
mu_stream_t	*(struct)
input_stream	*(struct)
;	O
mu_stream_t	*(struct)
inter_stream	*(struct)
;	O
int	O
rc	int
;	O
if	O
(	O
charset	*(char)
==	O
NULL	O
||	O
encoding	*(char)
==	O
NULL	O
||	O
text	*(char)
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
if	O
(	O
strlen	(*(char))->(long)
(	O
charset	*(char)
)	O
>	O
MAX_ENCODED_WORD	int
-	O
8	int
)	O
return	O
EINVAL	int
;	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
encoding	*(char)
,	O
"base64"	*(char)
)	O
==	O
0	int
)	O
encoding	*(char)
=	O
"B"	*(char)
;	O
else	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
encoding	*(char)
,	O
"quoted-printable"	*(char)
)	O
==	O
0	int
)	O
encoding	*(char)
=	O
"Q"	*(char)
;	O
else	O
if	O
(	O
encoding	*(char)
[	O
1	int
]	O
||	O
!	O
strchr	(*(char),int)->(*(char))
(	O
"BQ"	*(char)
,	O
encoding	*(char)
[	O
0	int
]	O
)	O
)	O
return	O
MU_ERR_BAD_2047_ENCODING	O
;	O
rc	int
=	O
mu_static_memory_stream_create	(*(*(struct)),*(void),long)->(int)
(	O
&	O
input_stream	*(struct)
,	O
text	*(char)
,	O
strlen	(*(char))->(long)
(	O
text	*(char)
)	O
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
rc	int
=	O
mu_filter_create	(*(*(struct)),*(struct),*(char),int,int)->(int)
(	O
&	O
inter_stream	*(struct)
,	O
input_stream	*(struct)
,	O
encoding	*(char)
,	O
MU_FILTER_ENCODE	int
,	O
MU_STREAM_READ	int
)	O
;	O
mu_stream_unref	(*(struct))->(void)
(	O
input_stream	*(struct)
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
mu_stream_t	*(struct)
output_stream	*(struct)
;	O
rc	int
=	O
mu_memory_stream_create	(*(*(struct)),int)->(int)
(	O
&	O
output_stream	*(struct)
,	O
MU_STREAM_RDWR	O
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
char	O
buf	*(void)
[	O
MAX_ENCODED_WORD	int
]	O
;	O
size_t	long
start	long
,	O
bs	long
,	O
n	long
;	O
char	O
putback	array(char)
[	O
2	int
]	O
;	O
int	O
pbi	int
=	O
0	int
;	O
start	long
=	O
snprintf	(*(char),long,*(char))->(int)
(	O
buf	*(void)
,	O
sizeof	O
buf	*(void)
,	O
"=?%s?%s?"	*(char)
,	O
charset	*(char)
,	O
encoding	*(char)
)	O
;	O
bs	long
=	O
sizeof	O
buf	*(void)
-	O
start	long
-	O
2	int
;	O
if	O
(	O
encoding	*(char)
[	O
0	int
]	O
==	O
'B'	O
)	O
{	O
bs	long
-=	O
bs	long
%	O
4	int
;	O
}	O
while	O
(	O
1	int
)	O
{	O
if	O
(	O
pbi	int
)	O
{	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
pbi	int
;	O
i	int
++	O
)	O
buf	*(void)
[	O
start	long
+	O
i	int
]	O
=	O
putback	array(char)
[	O
pbi	int
-	O
i	int
]	O
;	O
}	O
rc	int
=	O
mu_stream_read	(*(struct),*(void),long,*(long))->(int)
(	O
inter_stream	*(struct)
,	O
buf	*(void)
+	O
start	long
+	O
pbi	int
,	O
bs	long
-	O
pbi	int
,	O
&	O
n	long
)	O
;	O
if	O
(	O
rc	int
)	O
break	O
;	O
n	long
+=	O
pbi	int
;	O
pbi	int
=	O
0	int
;	O
if	O
(	O
n	long
==	O
0	int
)	O
break	O
;	O
if	O
(	O
encoding	*(char)
[	O
0	int
]	O
==	O
'Q'	O
)	O
{	O
if	O
(	O
buf	*(void)
[	O
n	long
+	O
start	long
-	O
1	int
]	O
==	O
'='	O
)	O
{	O
putback	array(char)
[	O
pbi	int
++	O
]	O
=	O
buf	*(void)
[	O
start	long
+	O
--	O
n	long
]	O
;	O
}	O
else	O
if	O
(	O
buf	*(void)
[	O
n	long
+	O
start	long
-	O
2	int
]	O
==	O
'='	O
)	O
{	O
putback	array(char)
[	O
pbi	int
++	O
]	O
=	O
buf	*(void)
[	O
start	long
+	O
--	O
n	long
]	O
;	O
putback	array(char)
[	O
pbi	int
++	O
]	O
=	O
buf	*(void)
[	O
start	long
+	O
--	O
n	long
]	O
;	O
}	O
}	O
rc	int
=	O
mu_stream_write	(*(struct),*(void),long,*(long))->(int)
(	O
output_stream	*(struct)
,	O
buf	*(void)
,	O
n	long
+	O
start	long
,	O
NULL	O
)	O
;	O
if	O
(	O
rc	int
)	O
break	O
;	O
rc	int
=	O
mu_stream_write	(*(struct),*(void),long,*(long))->(int)
(	O
output_stream	*(struct)
,	O
"?="	*(char)
,	O
2	int
,	O
NULL	O
)	O
;	O
if	O
(	O
rc	int
)	O
break	O
;	O
if	O
(	O
n	long
==	O
bs	long
)	O
rc	int
=	O
mu_stream_write	(*(struct),*(void),long,*(long))->(int)
(	O
output_stream	*(struct)
,	O
"\n "	*(char)
,	O
2	int
,	O
NULL	O
)	O
;	O
else	O
break	O
;	O
}	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
mu_off_t	long
sz	long
;	O
char	O
*	O
ptr	*(void)
;	O
mu_stream_size	(*(struct),*(long))->(int)
(	O
output_stream	*(struct)
,	O
&	O
sz	long
)	O
;	O
ptr	*(void)
=	O
malloc	(long)->(*(void))
(	O
sz	long
+	O
1	int
)	O
;	O
if	O
(	O
!	O
ptr	*(void)
)	O
rc	int
=	O
ENOMEM	int
;	O
else	O
{	O
if	O
(	O
(	O
rc	int
=	O
mu_stream_seek	(*(struct),long,int,*(long))->(int)
(	O
output_stream	*(struct)
,	O
0	int
,	O
MU_SEEK_SET	int
,	O
NULL	O
)	O
)	O
==	O
0	int
&&	O
(	O
rc	int
=	O
mu_stream_read	(*(struct),*(void),long,*(long))->(int)
(	O
output_stream	*(struct)
,	O
ptr	*(void)
,	O
sz	long
,	O
NULL	O
)	O
)	O
==	O
0	int
)	O
{	O
ptr	*(void)
[	O
sz	long
]	O
=	O
0	int
;	O
*	O
result	*(*(char))
=	O
ptr	*(void)
;	O
}	O
}	O
}	O
mu_stream_destroy	(*(*(struct)))->(void)
(	O
&	O
output_stream	*(struct)
)	O
;	O
}	O
mu_stream_destroy	(*(*(struct)))->(void)
(	O
&	O
inter_stream	*(struct)
)	O
;	O
}	O
else	O
mu_stream_destroy	(*(*(struct)))->(void)
(	O
&	O
input_stream	*(struct)
)	O
;	O
return	O
rc	int
;	O
}	O
