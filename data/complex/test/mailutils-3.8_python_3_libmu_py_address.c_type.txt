static	O
PyObject	O
*	O
_repr	(*(int))->(*(int))
(	O
PyObject	O
*	O
self	*(int)
)	O
{	O
char	O
buf	*(char)
[	O
80	int
]	O
;	O
sprintf	O
(	O
buf	*(char)
,	O
"<"	*(char)
PY_MODULE	*(char)
"."	*(char)
PY_CSNAME	*(char)
" instance at %p>"	*(char)
,	O
self	*(int)
)	O
;	O
return	O
PyUnicode_FromString	()->(int)
(	O
buf	*(char)
)	O
;	O
}	O
static	O
PyTypeObject	O
PyAddressType	int
=	O
{	O
.	O
ob_base	O
=	O
{	O
PyObject_HEAD_INIT	()->(int)
(	O
NULL	O
)	O
}	O
,	O
.	O
tp_name	O
=	O
PY_MODULE	*(char)
"."	*(char)
PY_CSNAME	*(char)
,	O
.	O
tp_basicsize	O
=	O
sizeof	O
(	O
PyAddress	O
)	O
,	O
.	O
tp_dealloc	O
=	O
(	O
destructor	O
)	O
_py_dealloc	(*(int))->(void)
,	O
.	O
tp_repr	O
=	O
_repr	(*(int))->(*(int))
,	O
.	O
tp_str	O
=	O
_repr	(*(int))->(*(int))
,	O
.	O
tp_flags	O
=	O
Py_TPFLAGS_DEFAULT	O
,	O
.	O
tp_doc	O
=	O
""	*(char)
,	O
}	O
;	O
PyAddress	O
*	O
PyAddress_NEW	()->(*(int))
(	O
)	O
{	O
return	O
(	O
PyAddress	O
*	O
)	O
PyObject_NEW	O
(	O
PyAddress	O
,	O
&	O
PyAddressType	int
)	O
;	O
}	O
int	O
PyAddress_Check	(*(int))->(int)
(	O
PyObject	O
*	O
x	*(int)
)	O
{	O
return	O
x	*(int)
->	O
ob_type	O
==	O
&	O
PyAddressType	int
;	O
}	O
static	O
PyObject	O
*	O
api_address_create	(*(int),*(int))->(*(int))
(	O
PyObject	O
*	O
self	*(int)
,	O
PyObject	O
*	O
args	*(int)
)	O
{	O
int	O
status	int
;	O
char	O
*	O
str	int
;	O
PyAddress	O
*	O
py_addr	O
;	O
if	O
(	O
!	O
PyArg_ParseTuple	()->(int)
(	O
args	*(int)
,	O
"O!s"	*(char)
,	O
&	O
PyAddressType	int
,	O
&	O
py_addr	O
,	O
&	O
str	int
)	O
)	O
return	O
NULL	O
;	O
status	int
=	O
mu_address_create	(*(int),*(char))->(int)
(	O
&	O
py_addr	O
->	O
addr	int
,	O
str	int
)	O
;	O
return	O
_ro	(*(int))->(*(int))
(	O
PyLong_FromLong	()->(int)
(	O
status	int
)	O
)	O
;	O
}	O
static	O
PyObject	O
*	O
api_address_createv	(*(int),*(int))->(*(int))
(	O
PyObject	O
*	O
self	*(int)
,	O
PyObject	O
*	O
args	*(int)
)	O
{	O
int	O
status	int
;	O
PyAddress	O
*	O
py_addr	O
;	O
PyObject	O
*	O
py_seq	O
;	O
char	O
*	O
*	O
sv	*(*(char))
;	O
size_t	int
len	int
;	O
if	O
(	O
!	O
PyArg_ParseTuple	()->(int)
(	O
args	*(int)
,	O
"O!O"	*(char)
,	O
&	O
PyAddressType	int
,	O
&	O
py_addr	O
,	O
&	O
py_seq	O
)	O
)	O
return	O
NULL	O
;	O
if	O
(	O
!	O
PySequence_Check	()->(int)
(	O
py_seq	O
)	O
)	O
{	O
PyErr_SetString	()->(int)
(	O
PyExc_TypeError	O
,	O
""	*(char)
)	O
;	O
return	O
NULL	O
;	O
}	O
len	int
=	O
PySequence_Size	()->(int)
(	O
py_seq	O
)	O
;	O
sv	*(*(char))
=	O
(	O
char	O
*	O
*	O
)	O
malloc	O
(	O
(	O
len	int
+	O
1	int
)	O
*	O
sizeof	O
(	O
char	O
*	O
)	O
)	O
;	O
if	O
(	O
!	O
sv	*(*(char))
)	O
{	O
PyErr_NoMemory	()->(int)
(	O
)	O
;	O
return	O
NULL	O
;	O
}	O
else	O
{	O
PyObject	O
*	O
py_item	O
;	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
len	int
;	O
i	int
++	O
)	O
{	O
py_item	O
=	O
PySequence_GetItem	()->(int)
(	O
py_seq	O
,	O
i	int
)	O
;	O
if	O
(	O
py_item	O
&&	O
PyUnicode_Check	()->(int)
(	O
py_item	O
)	O
)	O
if	O
(	O
(	O
sv	*(*(char))
[	O
i	int
]	O
=	O
strdup	O
(	O
PyUnicode_AsUTF8	()->(int)
(	O
py_item	O
)	O
)	O
)	O
==	O
NULL	O
)	O
{	O
PyErr_NoMemory	()->(int)
(	O
)	O
;	O
return	O
NULL	O
;	O
}	O
Py_DECREF	()->(int)
(	O
py_item	O
)	O
;	O
}	O
if	O
(	O
PyErr_Occurred	()->(int)
(	O
)	O
)	O
{	O
PyErr_Print	()->(int)
(	O
)	O
;	O
return	O
NULL	O
;	O
}	O
}	O
status	int
=	O
mu_address_createv	(*(int),array(*(char)),int)->(int)
(	O
&	O
py_addr	O
->	O
addr	int
,	O
(	O
const	O
char	O
*	O
*	O
)	O
sv	*(*(char))
,	O
len	int
)	O
;	O
return	O
_ro	(*(int))->(*(int))
(	O
PyLong_FromLong	()->(int)
(	O
status	int
)	O
)	O
;	O
}	O
static	O
PyObject	O
*	O
api_address_destroy	(*(int),*(int))->(*(int))
(	O
PyObject	O
*	O
self	*(int)
,	O
PyObject	O
*	O
args	*(int)
)	O
{	O
PyAddress	O
*	O
py_addr	O
;	O
if	O
(	O
!	O
PyArg_ParseTuple	()->(int)
(	O
args	*(int)
,	O
"O!"	*(char)
,	O
&	O
PyAddressType	int
,	O
&	O
py_addr	O
)	O
)	O
return	O
NULL	O
;	O
mu_address_destroy	(*(int))->(void)
(	O
&	O
py_addr	O
->	O
addr	int
)	O
;	O
return	O
_ro	(*(int))->(*(int))
(	O
Py_None	O
)	O
;	O
}	O
static	O
PyObject	O
*	O
api_address_is_group	(*(int),*(int))->(*(int))
(	O
PyObject	O
*	O
self	*(int)
,	O
PyObject	O
*	O
args	*(int)
)	O
{	O
int	O
status	int
,	O
isgroup	int
;	O
Py_ssize_t	O
n	*(int)
;	O
PyAddress	O
*	O
py_addr	O
;	O
if	O
(	O
!	O
PyArg_ParseTuple	()->(int)
(	O
args	*(int)
,	O
"O!n"	*(char)
,	O
&	O
PyAddressType	int
,	O
&	O
py_addr	O
,	O
&	O
n	*(int)
)	O
)	O
return	O
NULL	O
;	O
ASSERT_INDEX_RANGE	O
(	O
n	*(int)
,	O
"address"	*(char)
)	O
;	O
status	int
=	O
mu_address_is_group	()->(int)
(	O
py_addr	O
->	O
addr	int
,	O
n	*(int)
,	O
&	O
isgroup	int
)	O
;	O
return	O
status_object	(int,*(int))->(*(int))
(	O
status	int
,	O
PyBool_FromLong	()->(int)
(	O
isgroup	int
)	O
)	O
;	O
}	O
static	O
PyObject	O
*	O
api_address_get_count	(*(int),*(int))->(*(int))
(	O
PyObject	O
*	O
self	*(int)
,	O
PyObject	O
*	O
args	*(int)
)	O
{	O
size_t	int
count	O
=	O
0	int
;	O
PyAddress	O
*	O
py_addr	O
;	O
if	O
(	O
!	O
PyArg_ParseTuple	()->(int)
(	O
args	*(int)
,	O
"O!"	*(char)
,	O
&	O
PyAddressType	int
,	O
&	O
py_addr	O
)	O
)	O
return	O
NULL	O
;	O
mu_address_get_count	()->(int)
(	O
py_addr	O
->	O
addr	int
,	O
&	O
count	O
)	O
;	O
return	O
_ro	(*(int))->(*(int))
(	O
PyLong_FromSize_t	()->(int)
(	O
count	O
)	O
)	O
;	O
}	O
static	O
PyObject	O
*	O
api_address_get_email	(*(int),*(int))->(*(int))
(	O
PyObject	O
*	O
self	*(int)
,	O
PyObject	O
*	O
args	*(int)
)	O
{	O
int	O
status	int
;	O
Py_ssize_t	O
n	*(int)
;	O
const	O
char	O
*	O
buf	*(char)
=	O
NULL	O
;	O
PyAddress	O
*	O
py_addr	O
;	O
if	O
(	O
!	O
PyArg_ParseTuple	()->(int)
(	O
args	*(int)
,	O
"O!n"	*(char)
,	O
&	O
PyAddressType	int
,	O
&	O
py_addr	O
,	O
&	O
n	*(int)
)	O
)	O
return	O
NULL	O
;	O
ASSERT_INDEX_RANGE	O
(	O
n	*(int)
,	O
"address"	*(char)
)	O
;	O
status	int
=	O
mu_address_sget_email	()->(int)
(	O
py_addr	O
->	O
addr	int
,	O
n	*(int)
,	O
&	O
buf	*(char)
)	O
;	O
return	O
status_object	(int,*(int))->(*(int))
(	O
status	int
,	O
PyUnicode_FromString	()->(int)
(	O
mu_prstr	()->(int)
(	O
buf	*(char)
)	O
)	O
)	O
;	O
}	O
static	O
PyObject	O
*	O
api_address_get_local_part	(*(int),*(int))->(*(int))
(	O
PyObject	O
*	O
self	*(int)
,	O
PyObject	O
*	O
args	*(int)
)	O
{	O
int	O
status	int
;	O
Py_ssize_t	O
n	*(int)
;	O
const	O
char	O
*	O
buf	*(char)
=	O
NULL	O
;	O
PyAddress	O
*	O
py_addr	O
;	O
if	O
(	O
!	O
PyArg_ParseTuple	()->(int)
(	O
args	*(int)
,	O
"O!n"	*(char)
,	O
&	O
PyAddressType	int
,	O
&	O
py_addr	O
,	O
&	O
n	*(int)
)	O
)	O
return	O
NULL	O
;	O
ASSERT_INDEX_RANGE	O
(	O
n	*(int)
,	O
"address part"	*(char)
)	O
;	O
status	int
=	O
mu_address_sget_local_part	()->(int)
(	O
py_addr	O
->	O
addr	int
,	O
n	*(int)
,	O
&	O
buf	*(char)
)	O
;	O
return	O
status_object	(int,*(int))->(*(int))
(	O
status	int
,	O
PyUnicode_FromString	()->(int)
(	O
mu_prstr	()->(int)
(	O
buf	*(char)
)	O
)	O
)	O
;	O
}	O
static	O
PyObject	O
*	O
api_address_get_domain	(*(int),*(int))->(*(int))
(	O
PyObject	O
*	O
self	*(int)
,	O
PyObject	O
*	O
args	*(int)
)	O
{	O
int	O
status	int
;	O
Py_ssize_t	O
n	*(int)
;	O
const	O
char	O
*	O
buf	*(char)
=	O
NULL	O
;	O
PyAddress	O
*	O
py_addr	O
;	O
if	O
(	O
!	O
PyArg_ParseTuple	()->(int)
(	O
args	*(int)
,	O
"O!n"	*(char)
,	O
&	O
PyAddressType	int
,	O
&	O
py_addr	O
,	O
&	O
n	*(int)
)	O
)	O
return	O
NULL	O
;	O
ASSERT_INDEX_RANGE	O
(	O
n	*(int)
,	O
"address part"	*(char)
)	O
;	O
status	int
=	O
mu_address_sget_domain	()->(int)
(	O
py_addr	O
->	O
addr	int
,	O
n	*(int)
,	O
&	O
buf	*(char)
)	O
;	O
return	O
status_object	(int,*(int))->(*(int))
(	O
status	int
,	O
PyUnicode_FromString	()->(int)
(	O
mu_prstr	()->(int)
(	O
buf	*(char)
)	O
)	O
)	O
;	O
}	O
static	O
PyObject	O
*	O
api_address_get_personal	(*(int),*(int))->(*(int))
(	O
PyObject	O
*	O
self	*(int)
,	O
PyObject	O
*	O
args	*(int)
)	O
{	O
int	O
status	int
;	O
Py_ssize_t	O
n	*(int)
;	O
const	O
char	O
*	O
buf	*(char)
=	O
NULL	O
;	O
PyAddress	O
*	O
py_addr	O
;	O
if	O
(	O
!	O
PyArg_ParseTuple	()->(int)
(	O
args	*(int)
,	O
"O!n"	*(char)
,	O
&	O
PyAddressType	int
,	O
&	O
py_addr	O
,	O
&	O
n	*(int)
)	O
)	O
return	O
NULL	O
;	O
ASSERT_INDEX_RANGE	O
(	O
n	*(int)
,	O
"address part"	*(char)
)	O
;	O
status	int
=	O
mu_address_sget_personal	()->(int)
(	O
py_addr	O
->	O
addr	int
,	O
n	*(int)
,	O
&	O
buf	*(char)
)	O
;	O
return	O
status_object	(int,*(int))->(*(int))
(	O
status	int
,	O
PyUnicode_FromString	()->(int)
(	O
mu_prstr	()->(int)
(	O
buf	*(char)
)	O
)	O
)	O
;	O
}	O
static	O
PyObject	O
*	O
api_address_get_comments	(*(int),*(int))->(*(int))
(	O
PyObject	O
*	O
self	*(int)
,	O
PyObject	O
*	O
args	*(int)
)	O
{	O
int	O
status	int
;	O
Py_ssize_t	O
n	*(int)
;	O
const	O
char	O
*	O
buf	*(char)
=	O
NULL	O
;	O
PyAddress	O
*	O
py_addr	O
;	O
if	O
(	O
!	O
PyArg_ParseTuple	()->(int)
(	O
args	*(int)
,	O
"O!n"	*(char)
,	O
&	O
PyAddressType	int
,	O
&	O
py_addr	O
,	O
&	O
n	*(int)
)	O
)	O
return	O
NULL	O
;	O
ASSERT_INDEX_RANGE	O
(	O
n	*(int)
,	O
"address part"	*(char)
)	O
;	O
status	int
=	O
mu_address_sget_comments	()->(int)
(	O
py_addr	O
->	O
addr	int
,	O
n	*(int)
,	O
&	O
buf	*(char)
)	O
;	O
return	O
status_object	(int,*(int))->(*(int))
(	O
status	int
,	O
PyUnicode_FromString	()->(int)
(	O
mu_prstr	()->(int)
(	O
buf	*(char)
)	O
)	O
)	O
;	O
}	O
static	O
PyObject	O
*	O
api_address_get_route	(*(int),*(int))->(*(int))
(	O
PyObject	O
*	O
self	*(int)
,	O
PyObject	O
*	O
args	*(int)
)	O
{	O
int	O
status	int
;	O
Py_ssize_t	O
n	*(int)
;	O
const	O
char	O
*	O
buf	*(char)
=	O
NULL	O
;	O
PyAddress	O
*	O
py_addr	O
;	O
if	O
(	O
!	O
PyArg_ParseTuple	()->(int)
(	O
args	*(int)
,	O
"O!n"	*(char)
,	O
&	O
PyAddressType	int
,	O
&	O
py_addr	O
,	O
&	O
n	*(int)
)	O
)	O
return	O
NULL	O
;	O
ASSERT_INDEX_RANGE	O
(	O
n	*(int)
,	O
"address part"	*(char)
)	O
;	O
status	int
=	O
mu_address_sget_route	()->(int)
(	O
py_addr	O
->	O
addr	int
,	O
n	*(int)
,	O
&	O
buf	*(char)
)	O
;	O
return	O
status_object	(int,*(int))->(*(int))
(	O
status	int
,	O
PyUnicode_FromString	()->(int)
(	O
mu_prstr	()->(int)
(	O
buf	*(char)
)	O
)	O
)	O
;	O
}	O
static	O
PyObject	O
*	O
api_address_to_string	(*(int),*(int))->(*(int))
(	O
PyObject	O
*	O
self	*(int)
,	O
PyObject	O
*	O
args	*(int)
)	O
{	O
int	O
status	int
;	O
char	O
const	O
*	O
sptr	*(*(char))
;	O
PyAddress	O
*	O
py_addr	O
;	O
if	O
(	O
!	O
PyArg_ParseTuple	()->(int)
(	O
args	*(int)
,	O
"O!"	*(char)
,	O
&	O
PyAddressType	int
,	O
&	O
py_addr	O
)	O
)	O
return	O
NULL	O
;	O
status	int
=	O
mu_address_sget_printable	(int,*(*(char)))->(int)
(	O
py_addr	O
->	O
addr	int
,	O
&	O
sptr	*(*(char))
)	O
;	O
return	O
status_object	(int,*(int))->(*(int))
(	O
status	int
,	O
PyUnicode_FromString	()->(int)
(	O
mu_prstr	()->(int)
(	O
sptr	*(*(char))
)	O
)	O
)	O
;	O
}	O
static	O
PyMethodDef	O
methods	array(int)
[	O
]	O
=	O
{	O
{	O
"create"	*(char)
,	O
(	O
PyCFunction	O
)	O
api_address_create	(*(int),*(int))->(*(int))
,	O
METH_VARARGS	O
,	O
"Allocate and initialize 'addr' by parsing the RFC822 "	*(char)
"address-list 'string'."	*(char)
}	O
,	O
{	O
"createv"	*(char)
,	O
(	O
PyCFunction	O
)	O
api_address_createv	(*(int),*(int))->(*(int))
,	O
METH_VARARGS	O
,	O
"Allocate and initialize 'addr' by parsing the RFC822 address-list."	*(char)
}	O
,	O
{	O
"destroy"	*(char)
,	O
(	O
PyCFunction	O
)	O
api_address_destroy	(*(int),*(int))->(*(int))
,	O
METH_VARARGS	O
,	O
"Destroy 'addr'."	*(char)
}	O
,	O
{	O
"is_group"	*(char)
,	O
(	O
PyCFunction	O
)	O
api_address_is_group	(*(int),*(int))->(*(int))
,	O
METH_VARARGS	O
,	O
"Return True if address is just the name of a group, False otherwise."	*(char)
}	O
,	O
{	O
"get_count"	*(char)
,	O
(	O
PyCFunction	O
)	O
api_address_get_count	(*(int),*(int))->(*(int))
,	O
METH_VARARGS	O
,	O
"Return a count of the addresses in the address list."	*(char)
}	O
,	O
{	O
"get_email"	*(char)
,	O
(	O
PyCFunction	O
)	O
api_address_get_email	(*(int),*(int))->(*(int))
,	O
METH_VARARGS	O
,	O
"Return the Nth email address component of the address list."	*(char)
}	O
,	O
{	O
"get_local_part"	*(char)
,	O
(	O
PyCFunction	O
)	O
api_address_get_local_part	(*(int),*(int))->(*(int))
,	O
METH_VARARGS	O
,	O
"Return local part of the Nth email address from the address list."	*(char)
}	O
,	O
{	O
"get_domain"	*(char)
,	O
(	O
PyCFunction	O
)	O
api_address_get_domain	(*(int),*(int))->(*(int))
,	O
METH_VARARGS	O
,	O
"Return domain part of the Nth email address from the address list."	*(char)
}	O
,	O
{	O
"get_personal"	*(char)
,	O
(	O
PyCFunction	O
)	O
api_address_get_personal	(*(int),*(int))->(*(int))
,	O
METH_VARARGS	O
,	O
"Return personal part of the Nth email address from the address list."	*(char)
}	O
,	O
{	O
"get_comments"	*(char)
,	O
(	O
PyCFunction	O
)	O
api_address_get_comments	(*(int),*(int))->(*(int))
,	O
METH_VARARGS	O
,	O
"Return comment part of the Nth email address from the list."	*(char)
}	O
,	O
{	O
"get_route"	*(char)
,	O
(	O
PyCFunction	O
)	O
api_address_get_route	(*(int),*(int))->(*(int))
,	O
METH_VARARGS	O
,	O
"Return route part of the Nth email address from the list."	*(char)
}	O
,	O
{	O
"to_string"	*(char)
,	O
(	O
PyCFunction	O
)	O
api_address_to_string	(*(int),*(int))->(*(int))
,	O
METH_VARARGS	O
,	O
"Return the entire address list as a single RFC822 formatted address list."	*(char)
}	O
,	O
{	O
NULL	O
,	O
NULL	O
,	O
0	int
,	O
NULL	O
}	O
}	O
;	O
static	O
struct	O
PyModuleDef	O
moduledef	struct
=	O
{	O
PyModuleDef_HEAD_INIT	O
,	O
PY_MODULE	*(char)
,	O
NULL	O
,	O
-	O
1	int
,	O
methods	array(int)
}	O
;	O
int	O
mu_py_init_address	()->(int)
(	O
void	O
)	O
{	O
PyAddressType	int
.	O
tp_new	O
=	O
PyType_GenericNew	O
;	O
return	O
PyType_Ready	()->(int)
(	O
&	O
PyAddressType	int
)	O
;	O
}	O
void	O
_mu_py_attach_address	()->(void)
(	O
void	O
)	O
{	O
PyObject	O
*	O
m	O
;	O
if	O
(	O
(	O
m	O
=	O
_mu_py_attach_module	(*(struct))->(*(int))
(	O
&	O
moduledef	struct
)	O
)	O
)	O
{	O
Py_INCREF	()->(int)
(	O
&	O
PyAddressType	int
)	O
;	O
PyModule_AddObject	()->(int)
(	O
m	O
,	O
PY_CSNAME	*(char)
,	O
(	O
PyObject	O
*	O
)	O
&	O
PyAddressType	int
)	O
;	O
}	O
}	O
