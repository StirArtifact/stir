static	O
double	O
gamma_large	(*(struct(*(struct(*`,long,long,long,*`,*`,*`)),*(void))),double)->(double)
(	O
const	O
gsl_rng	struct(*(struct(*(char),long,long,long,*((*`,long)->(void)),*((*`)->(long)),*((*`)->(double)))),*(void))
*	O
r	*(struct(double,double))
,	O
const	O
double	O
a	double
)	O
;	O
static	O
double	O
gamma_frac	(*(struct(*(struct(*`,long,long,long,*`,*`,*`)),*(void))),double)->(double)
(	O
const	O
gsl_rng	struct(*(struct(*(char),long,long,long,*((*`,long)->(void)),*((*`)->(long)),*((*`)->(double)))),*(void))
*	O
r	*(struct(double,double))
,	O
const	O
double	O
a	double
)	O
;	O
double	O
gsl_ran_gamma_knuth	(*(struct(*(struct(*`,long,long,long,*`,*`,*`)),*(void))),double,double)->(double)
(	O
const	O
gsl_rng	struct(*(struct(*(char),long,long,long,*((*`,long)->(void)),*((*`)->(long)),*((*`)->(double)))),*(void))
*	O
r	*(struct(double,double))
,	O
const	O
double	O
a	double
,	O
const	O
double	O
b	double
)	O
{	O
unsigned	O
int	O
na	int
=	O
floor	(double)->(double)
(	O
a	double
)	O
;	O
if	O
(	O
a	double
>=	O
UINT_MAX	O
)	O
{	O
return	O
b	double
*	O
(	O
gamma_large	(*(struct(*(struct(*`,long,long,long,*`,*`,*`)),*(void))),double)->(double)
(	O
r	*(struct(double,double))
,	O
floor	(double)->(double)
(	O
a	double
)	O
)	O
+	O
gamma_frac	(*(struct(*(struct(*`,long,long,long,*`,*`,*`)),*(void))),double)->(double)
(	O
r	*(struct(double,double))
,	O
a	double
-	O
floor	(double)->(double)
(	O
a	double
)	O
)	O
)	O
;	O
}	O
else	O
if	O
(	O
a	double
==	O
na	int
)	O
{	O
return	O
b	double
*	O
gsl_ran_gamma_int	(*(struct(*(struct(*`,long,long,long,*`,*`,*`)),*(void))),int)->(double)
(	O
r	*(struct(double,double))
,	O
na	int
)	O
;	O
}	O
else	O
if	O
(	O
na	int
==	O
0	int
)	O
{	O
return	O
b	double
*	O
gamma_frac	(*(struct(*(struct(*`,long,long,long,*`,*`,*`)),*(void))),double)->(double)
(	O
r	*(struct(double,double))
,	O
a	double
)	O
;	O
}	O
else	O
{	O
return	O
b	double
*	O
(	O
gsl_ran_gamma_int	(*(struct(*(struct(*`,long,long,long,*`,*`,*`)),*(void))),int)->(double)
(	O
r	*(struct(double,double))
,	O
na	int
)	O
+	O
gamma_frac	(*(struct(*(struct(*`,long,long,long,*`,*`,*`)),*(void))),double)->(double)
(	O
r	*(struct(double,double))
,	O
a	double
-	O
na	int
)	O
)	O
;	O
}	O
}	O
double	O
gsl_ran_gamma_int	(*(struct(*(struct(*`,long,long,long,*`,*`,*`)),*(void))),int)->(double)
(	O
const	O
gsl_rng	struct(*(struct(*(char),long,long,long,*((*`,long)->(void)),*((*`)->(long)),*((*`)->(double)))),*(void))
*	O
r	*(struct(double,double))
,	O
const	O
unsigned	O
int	O
a	double
)	O
{	O
if	O
(	O
a	double
<	O
12	int
)	O
{	O
unsigned	O
int	O
i	long
;	O
double	O
prod	double
=	O
1	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
a	double
;	O
i	long
++	O
)	O
{	O
prod	double
*=	O
gsl_rng_uniform_pos	(*(struct(*(struct(*`,long,long,long,*`,*`,*`)),*(void))))->(double)
(	O
r	*(struct(double,double))
)	O
;	O
}	O
return	O
-	O
log	(double)->(double)
(	O
prod	double
)	O
;	O
}	O
else	O
{	O
return	O
gamma_large	(*(struct(*(struct(*`,long,long,long,*`,*`,*`)),*(void))),double)->(double)
(	O
r	*(struct(double,double))
,	O
(	O
double	O
)	O
a	double
)	O
;	O
}	O
}	O
static	O
double	O
gamma_large	(*(struct(*(struct(*`,long,long,long,*`,*`,*`)),*(void))),double)->(double)
(	O
const	O
gsl_rng	struct(*(struct(*(char),long,long,long,*((*`,long)->(void)),*((*`)->(long)),*((*`)->(double)))),*(void))
*	O
r	*(struct(double,double))
,	O
const	O
double	O
a	double
)	O
{	O
double	O
sqa	double
,	O
x	double
,	O
y	double
,	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
;	O
sqa	double
=	O
sqrt	(double)->(double)
(	O
2	int
*	O
a	double
-	O
1	int
)	O
;	O
do	O
{	O
do	O
{	O
y	double
=	O
tan	(double)->(double)
(	O
M_PI	int
*	O
gsl_rng_uniform	(*(struct(*(struct(*`,long,long,long,*`,*`,*`)),*(void))))->(double)
(	O
r	*(struct(double,double))
)	O
)	O
;	O
x	double
=	O
sqa	double
*	O
y	double
+	O
a	double
-	O
1	int
;	O
}	O
while	O
(	O
x	double
<=	O
0	int
)	O
;	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
=	O
gsl_rng_uniform	(*(struct(*(struct(*`,long,long,long,*`,*`,*`)),*(void))))->(double)
(	O
r	*(struct(double,double))
)	O
;	O
}	O
while	O
(	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
>	O
(	O
1	int
+	O
y	double
*	O
y	double
)	O
*	O
exp	(double)->(double)
(	O
(	O
a	double
-	O
1	int
)	O
*	O
log	(double)->(double)
(	O
x	double
/	O
(	O
a	double
-	O
1	int
)	O
)	O
-	O
sqa	double
*	O
y	double
)	O
)	O
;	O
return	O
x	double
;	O
}	O
static	O
double	O
gamma_frac	(*(struct(*(struct(*`,long,long,long,*`,*`,*`)),*(void))),double)->(double)
(	O
const	O
gsl_rng	struct(*(struct(*(char),long,long,long,*((*`,long)->(void)),*((*`)->(long)),*((*`)->(double)))),*(void))
*	O
r	*(struct(double,double))
,	O
const	O
double	O
a	double
)	O
{	O
double	O
p	int
,	O
q	double
,	O
x	double
,	O
u	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
,	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
;	O
if	O
(	O
a	double
==	O
0	int
)	O
{	O
return	O
0	int
;	O
}	O
p	int
=	O
M_E	int
/	O
(	O
a	double
+	O
M_E	int
)	O
;	O
do	O
{	O
u	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
=	O
gsl_rng_uniform	(*(struct(*(struct(*`,long,long,long,*`,*`,*`)),*(void))))->(double)
(	O
r	*(struct(double,double))
)	O
;	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
=	O
gsl_rng_uniform_pos	(*(struct(*(struct(*`,long,long,long,*`,*`,*`)),*(void))))->(double)
(	O
r	*(struct(double,double))
)	O
;	O
if	O
(	O
u	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
<	O
p	int
)	O
{	O
x	double
=	O
exp	(double)->(double)
(	O
(	O
1	int
/	O
a	double
)	O
*	O
log	(double)->(double)
(	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
)	O
)	O
;	O
q	double
=	O
exp	(double)->(double)
(	O
-	O
x	double
)	O
;	O
}	O
else	O
{	O
x	double
=	O
1	int
-	O
log	(double)->(double)
(	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
)	O
;	O
q	double
=	O
exp	(double)->(double)
(	O
(	O
a	double
-	O
1	int
)	O
*	O
log	(double)->(double)
(	O
x	double
)	O
)	O
;	O
}	O
}	O
while	O
(	O
gsl_rng_uniform	(*(struct(*(struct(*`,long,long,long,*`,*`,*`)),*(void))))->(double)
(	O
r	*(struct(double,double))
)	O
>=	O
q	double
)	O
;	O
return	O
x	double
;	O
}	O
double	O
gsl_ran_gamma_pdf	(double,double,double)->(double)
(	O
const	O
double	O
x	double
,	O
const	O
double	O
a	double
,	O
const	O
double	O
b	double
)	O
{	O
if	O
(	O
x	double
<	O
0	int
)	O
{	O
return	O
0	int
;	O
}	O
else	O
if	O
(	O
x	double
==	O
0	int
)	O
{	O
if	O
(	O
a	double
==	O
1	int
)	O
return	O
1	int
/	O
b	double
;	O
else	O
return	O
0	int
;	O
}	O
else	O
if	O
(	O
a	double
==	O
1	int
)	O
{	O
return	O
exp	(double)->(double)
(	O
-	O
x	double
/	O
b	double
)	O
/	O
b	double
;	O
}	O
else	O
{	O
double	O
p	int
;	O
double	O
lngamma	double
=	O
gsl_sf_lngamma	(double)->(double)
(	O
a	double
)	O
;	O
p	int
=	O
exp	(double)->(double)
(	O
(	O
a	double
-	O
1	int
)	O
*	O
log	(double)->(double)
(	O
x	double
/	O
b	double
)	O
-	O
x	double
/	O
b	double
-	O
lngamma	double
)	O
/	O
b	double
;	O
return	O
p	int
;	O
}	O
}	O
double	O
gsl_ran_gamma_mt	(*(struct(*(struct(*`,long,long,long,*`,*`,*`)),*(void))),double,double)->(double)
(	O
const	O
gsl_rng	struct(*(struct(*(char),long,long,long,*((*`,long)->(void)),*((*`)->(long)),*((*`)->(double)))),*(void))
*	O
r	*(struct(double,double))
,	O
const	O
double	O
a	double
,	O
const	O
double	O
b	double
)	O
{	O
return	O
gsl_ran_gamma	(*(struct(*(struct(*`,long,long,long,*`,*`,*`)),*(void))),double,double)->(double)
(	O
r	*(struct(double,double))
,	O
a	double
,	O
b	double
)	O
;	O
}	O
double	O
gsl_ran_gamma	(*(struct(*(struct(*`,long,long,long,*`,*`,*`)),*(void))),double,double)->(double)
(	O
const	O
gsl_rng	struct(*(struct(*(char),long,long,long,*((*`,long)->(void)),*((*`)->(long)),*((*`)->(double)))),*(void))
*	O
r	*(struct(double,double))
,	O
const	O
double	O
a	double
,	O
const	O
double	O
b	double
)	O
{	O
if	O
(	O
a	double
<	O
1	int
)	O
{	O
double	O
u	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
=	O
gsl_rng_uniform_pos	(*(struct(*(struct(*`,long,long,long,*`,*`,*`)),*(void))))->(double)
(	O
r	*(struct(double,double))
)	O
;	O
return	O
gsl_ran_gamma	(*(struct(*(struct(*`,long,long,long,*`,*`,*`)),*(void))),double,double)->(double)
(	O
r	*(struct(double,double))
,	O
1.0	int
+	O
a	double
,	O
b	double
)	O
*	O
pow	(double,double)->(double)
(	O
u	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
,	O
1.0	int
/	O
a	double
)	O
;	O
}	O
{	O
double	O
x	double
,	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
,	O
u	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
;	O
double	O
d	double
=	O
a	double
-	O
1.0	int
/	O
3.0	int
;	O
double	O
c	*(float)
=	O
(	O
1.0	int
/	O
3.0	int
)	O
/	O
sqrt	(double)->(double)
(	O
d	double
)	O
;	O
while	O
(	O
1	int
)	O
{	O
do	O
{	O
x	double
=	O
gsl_ran_gaussian_ziggurat	(*(struct(*(struct(*`,long,long,long,*`,*`,*`)),*(void))),double)->(double)
(	O
r	*(struct(double,double))
,	O
1.0	int
)	O
;	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
=	O
1.0	int
+	O
c	*(float)
*	O
x	double
;	O
}	O
while	O
(	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
<=	O
0	int
)	O
;	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
=	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
*	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
*	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
;	O
u	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
=	O
gsl_rng_uniform_pos	(*(struct(*(struct(*`,long,long,long,*`,*`,*`)),*(void))))->(double)
(	O
r	*(struct(double,double))
)	O
;	O
if	O
(	O
u	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
<	O
1	int
-	O
0.0331	int
*	O
x	double
*	O
x	double
*	O
x	double
*	O
x	double
)	O
break	O
;	O
if	O
(	O
log	(double)->(double)
(	O
u	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
)	O
<	O
0.5	int
*	O
x	double
*	O
x	double
+	O
d	double
*	O
(	O
1	int
-	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
+	O
log	(double)->(double)
(	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
)	O
)	O
)	O
break	O
;	O
}	O
return	O
b	double
*	O
d	double
*	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
;	O
}	O
}	O
