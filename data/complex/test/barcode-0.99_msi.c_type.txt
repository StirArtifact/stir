static	O
char	O
*	O
patterns	array(*(char))
[	O
]	O
=	O
{	O
"13"	*(char)
,	O
"31"	*(char)
}	O
;	O
static	O
char	O
*	O
fillers	array(*(char))
[	O
]	O
=	O
{	O
"031"	*(char)
,	O
"131"	*(char)
}	O
;	O
static	O
int	O
width	int
=	O
16	int
,	O
startpos	int
=	O
6	int
;	O
int	O
Barcode_msi_verify	(*(char))->(int)
(	O
char	O
*	O
text	*(char)
)	O
{	O
int	O
i	int
;	O
if	O
(	O
!	O
strlen	(*(char))->(long)
(	O
text	*(char)
)	O
)	O
return	O
-	O
1	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
text	*(char)
[	O
i	int
]	O
;	O
i	int
++	O
)	O
{	O
if	O
(	O
!	O
isdigit	(int)->(int)
(	O
text	*(char)
[	O
i	int
]	O
)	O
)	O
return	O
-	O
1	int
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
add_one	(*(char),int)->(int)
(	O
char	O
*	O
ptr	*(char)
,	O
int	O
code	int
)	O
{	O
sprintf	(*(char),*(char))->(int)
(	O
ptr	*(char)
,	O
"%s%s%s%s"	*(char)
,	O
patterns	array(*(char))
[	O
(	O
code	int
>>	O
3	int
)	O
&	O
1	int
]	O
,	O
patterns	array(*(char))
[	O
(	O
code	int
>>	O
2	int
)	O
&	O
1	int
]	O
,	O
patterns	array(*(char))
[	O
(	O
code	int
>>	O
1	int
)	O
&	O
1	int
]	O
,	O
patterns	array(*(char))
[	O
code	int
&	O
1	int
]	O
)	O
;	O
return	O
0	int
;	O
}	O
int	O
Barcode_msi_encode	(*(struct(int,*(char),*(char),*(char),*(char),int,int,int,int,int,double,int)))->(int)
(	O
struct	O
Barcode_Item	struct(int,*(char),*(char),*(char),*(char),int,int,int,int,int,double,int)
*	O
bc	*(struct(int,*(char),*(char),*(char),*(char),int,int,int,int,int,double,int))
)	O
{	O
static	O
char	O
*	O
text	*(char)
;	O
static	O
char	O
*	O
partial	*(char)
;	O
static	O
char	O
*	O
textinfo	*(char)
;	O
char	O
*	O
ptr	*(char)
,	O
*	O
textptr	*(char)
;	O
int	O
i	int
,	O
code	int
,	O
textpos	int
,	O
usesum	int
,	O
checksum	int
=	O
0	int
;	O
if	O
(	O
bc	*(struct(int,*(char),*(char),*(char),*(char),int,int,int,int,int,double,int))
->	O
partial	*(char)
)	O
free	(*(void))->(void)
(	O
bc	*(struct(int,*(char),*(char),*(char),*(char),int,int,int,int,int,double,int))
->	O
partial	*(char)
)	O
;	O
if	O
(	O
bc	*(struct(int,*(char),*(char),*(char),*(char),int,int,int,int,int,double,int))
->	O
textinfo	*(char)
)	O
free	(*(void))->(void)
(	O
bc	*(struct(int,*(char),*(char),*(char),*(char),int,int,int,int,int,double,int))
->	O
textinfo	*(char)
)	O
;	O
bc	*(struct(int,*(char),*(char),*(char),*(char),int,int,int,int,int,double,int))
->	O
partial	*(char)
=	O
bc	*(struct(int,*(char),*(char),*(char),*(char),int,int,int,int,int,double,int))
->	O
textinfo	*(char)
=	O
NULL	O
;	O
if	O
(	O
!	O
bc	*(struct(int,*(char),*(char),*(char),*(char),int,int,int,int,int,double,int))
->	O
encoding	*(char)
)	O
bc	*(struct(int,*(char),*(char),*(char),*(char),int,int,int,int,int,double,int))
->	O
encoding	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
"msi"	*(char)
)	O
;	O
if	O
(	O
(	O
bc	*(struct(int,*(char),*(char),*(char),*(char),int,int,int,int,int,double,int))
->	O
flags	int
&	O
BARCODE_NO_CHECKSUM	int
)	O
)	O
usesum	int
=	O
0	int
;	O
else	O
usesum	int
=	O
1	int
;	O
text	*(char)
=	O
bc	*(struct(int,*(char),*(char),*(char),*(char),int,int,int,int,int,double,int))
->	O
ascii	*(char)
;	O
partial	*(char)
=	O
malloc	(long)->(*(void))
(	O
3	int
+	O
8	int
*	O
(	O
strlen	(*(char))->(long)
(	O
text	*(char)
)	O
+	O
1	int
)	O
+	O
3	int
+	O
2	int
)	O
;	O
if	O
(	O
!	O
partial	*(char)
)	O
{	O
bc	*(struct(int,*(char),*(char),*(char),*(char),int,int,int,int,int,double,int))
->	O
error	int
=	O
errno	O
;	O
return	O
-	O
1	int
;	O
}	O
textinfo	*(char)
=	O
malloc	(long)->(*(void))
(	O
10	int
*	O
strlen	(*(char))->(long)
(	O
text	*(char)
)	O
+	O
2	int
)	O
;	O
if	O
(	O
!	O
textinfo	*(char)
)	O
{	O
bc	*(struct(int,*(char),*(char),*(char),*(char),int,int,int,int,int,double,int))
->	O
error	int
=	O
errno	O
;	O
free	(*(void))->(void)
(	O
partial	*(char)
)	O
;	O
return	O
-	O
1	int
;	O
}	O
strcpy	(*(char),*(char))->(*(char))
(	O
partial	*(char)
,	O
fillers	array(*(char))
[	O
0	int
]	O
)	O
;	O
ptr	*(char)
=	O
partial	*(char)
+	O
strlen	(*(char))->(long)
(	O
partial	*(char)
)	O
;	O
textptr	*(char)
=	O
textinfo	*(char)
;	O
textpos	int
=	O
startpos	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
strlen	(*(char))->(long)
(	O
text	*(char)
)	O
;	O
i	int
++	O
)	O
{	O
code	int
=	O
text	*(char)
[	O
i	int
]	O
-	O
'0'	O
;	O
add_one	(*(char),int)->(int)
(	O
ptr	*(char)
,	O
code	int
)	O
;	O
sprintf	(*(char),*(char))->(int)
(	O
textptr	*(char)
,	O
"%i:12:%c "	*(char)
,	O
textpos	int
,	O
text	*(char)
[	O
i	int
]	O
)	O
;	O
textpos	int
+=	O
width	int
;	O
textptr	*(char)
+=	O
strlen	(*(char))->(long)
(	O
textptr	*(char)
)	O
;	O
ptr	*(char)
+=	O
strlen	(*(char))->(long)
(	O
ptr	*(char)
)	O
;	O
if	O
(	O
usesum	int
)	O
{	O
if	O
(	O
(	O
i	int
^	O
strlen	(*(char))->(long)
(	O
text	*(char)
)	O
)	O
&	O
1	int
)	O
{	O
checksum	int
+=	O
2	int
*	O
code	int
+	O
(	O
2	int
*	O
code	int
)	O
/	O
10	int
;	O
}	O
else	O
{	O
checksum	int
+=	O
code	int
;	O
}	O
}	O
}	O
if	O
(	O
usesum	int
)	O
{	O
checksum	int
=	O
(	O
checksum	int
+	O
9	int
)	O
/	O
10	int
*	O
10	int
-	O
checksum	int
;	O
add_one	(*(char),int)->(int)
(	O
ptr	*(char)
,	O
checksum	int
)	O
;	O
ptr	*(char)
+=	O
strlen	(*(char))->(long)
(	O
ptr	*(char)
)	O
;	O
}	O
strcpy	(*(char),*(char))->(*(char))
(	O
ptr	*(char)
,	O
fillers	array(*(char))
[	O
1	int
]	O
)	O
;	O
bc	*(struct(int,*(char),*(char),*(char),*(char),int,int,int,int,int,double,int))
->	O
partial	*(char)
=	O
partial	*(char)
;	O
bc	*(struct(int,*(char),*(char),*(char),*(char),int,int,int,int,int,double,int))
->	O
textinfo	*(char)
=	O
textinfo	*(char)
;	O
return	O
0	int
;	O
}	O
