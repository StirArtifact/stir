static	O
void	O
replay_node	(*(struct(*(struct(*`,short,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))),int,*(float),*(float))->(void)
(	O
SGFNode	struct(*(struct(*(struct(*`,short,*`)),short,*(char))),*(struct(*(struct(*`,short,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))),*(struct(*(struct(*`,short,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))),*(struct(*(struct(*`,short,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))))
*	O
node	*(struct(*(struct(*(struct`),short,*(char))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`)))))
,	O
int	O
color_to_test	int
,	O
float	O
*	O
replay_score	*(float)
,	O
float	O
*	O
total_score	*(float)
)	O
;	O
void	O
play_replay	(*(struct(*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))),int)->(void)
(	O
SGFTree	struct(*(struct(*(struct(*`,short,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))),*(struct(*(struct(*`,short,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))))
*	O
tree	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`)))))
,	O
int	O
color_to_replay	int
)	O
{	O
char	O
*	O
tmpc	*(char)
=	O
NULL	O
;	O
float	O
replay_score	*(float)
=	O
0.0	int
;	O
float	O
total_score	*(float)
=	O
0.0	int
;	O
SGFNode	struct(*(struct(*(struct(*`,short,*`)),short,*(char))),*(struct(*(struct(*`,short,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))),*(struct(*(struct(*`,short,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))),*(struct(*(struct(*`,short,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))))
*	O
node	*(struct(*(struct(*(struct`),short,*(char))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`)))))
=	O
tree	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`)))))
->	O
root	*(struct(*(struct(*(struct`),short,*(char))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`)))))
;	O
clear_board	()->(void)
(	O
)	O
;	O
if	O
(	O
!	O
quiet	int
)	O
{	O
printf	(*(char))->(int)
(	O
"Board Size:   %d\n"	*(char)
,	O
board_size	int
)	O
;	O
if	O
(	O
sgfGetCharProperty	(*(struct(*(struct(*`,short,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))),*(char),*(*(char)))->(int)
(	O
node	*(struct(*(struct(*(struct`),short,*(char))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`)))))
,	O
"HA"	*(char)
,	O
&	O
tmpc	*(char)
)	O
)	O
printf	(*(char))->(int)
(	O
"Handicap:     %s\n"	*(char)
,	O
tmpc	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"Komi:         %.1f\n"	*(char)
,	O
komi	float
)	O
;	O
if	O
(	O
sgfGetCharProperty	(*(struct(*(struct(*`,short,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))),*(char),*(*(char)))->(int)
(	O
node	*(struct(*(struct(*(struct`),short,*(char))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`)))))
,	O
"RU"	*(char)
,	O
&	O
tmpc	*(char)
)	O
)	O
printf	(*(char))->(int)
(	O
"Ruleset:      %s\n"	*(char)
,	O
tmpc	*(char)
)	O
;	O
if	O
(	O
sgfGetCharProperty	(*(struct(*(struct(*`,short,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))),*(char),*(*(char)))->(int)
(	O
node	*(struct(*(struct(*(struct`),short,*(char))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`)))))
,	O
"GN"	*(char)
,	O
&	O
tmpc	*(char)
)	O
)	O
printf	(*(char))->(int)
(	O
"Game Name:    %s\n"	*(char)
,	O
tmpc	*(char)
)	O
;	O
if	O
(	O
sgfGetCharProperty	(*(struct(*(struct(*`,short,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))),*(char),*(*(char)))->(int)
(	O
node	*(struct(*(struct(*(struct`),short,*(char))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`)))))
,	O
"DT"	*(char)
,	O
&	O
tmpc	*(char)
)	O
)	O
printf	(*(char))->(int)
(	O
"Game Date:    %s\n"	*(char)
,	O
tmpc	*(char)
)	O
;	O
if	O
(	O
sgfGetCharProperty	(*(struct(*(struct(*`,short,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))),*(char),*(*(char)))->(int)
(	O
node	*(struct(*(struct(*(struct`),short,*(char))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`)))))
,	O
"GC"	*(char)
,	O
&	O
tmpc	*(char)
)	O
)	O
printf	(*(char))->(int)
(	O
"Game Comment: %s\n"	*(char)
,	O
tmpc	*(char)
)	O
;	O
if	O
(	O
sgfGetCharProperty	(*(struct(*(struct(*`,short,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))),*(char),*(*(char)))->(int)
(	O
node	*(struct(*(struct(*(struct`),short,*(char))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`)))))
,	O
"US"	*(char)
,	O
&	O
tmpc	*(char)
)	O
)	O
printf	(*(char))->(int)
(	O
"Game User:    %s\n"	*(char)
,	O
tmpc	*(char)
)	O
;	O
if	O
(	O
sgfGetCharProperty	(*(struct(*(struct(*`,short,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))),*(char),*(*(char)))->(int)
(	O
node	*(struct(*(struct(*(struct`),short,*(char))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`)))))
,	O
"PB"	*(char)
,	O
&	O
tmpc	*(char)
)	O
)	O
printf	(*(char))->(int)
(	O
"Black Player: %s\n"	*(char)
,	O
tmpc	*(char)
)	O
;	O
if	O
(	O
sgfGetCharProperty	(*(struct(*(struct(*`,short,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))),*(char),*(*(char)))->(int)
(	O
node	*(struct(*(struct(*(struct`),short,*(char))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`)))))
,	O
"PW"	*(char)
,	O
&	O
tmpc	*(char)
)	O
)	O
printf	(*(char))->(int)
(	O
"White Player: %s\n"	*(char)
,	O
tmpc	*(char)
)	O
;	O
if	O
(	O
sgfGetCharProperty	(*(struct(*(struct(*`,short,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))),*(char),*(*(char)))->(int)
(	O
node	*(struct(*(struct(*(struct`),short,*(char))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`)))))
,	O
"RE"	*(char)
,	O
&	O
tmpc	*(char)
)	O
)	O
printf	(*(char))->(int)
(	O
"Result:       %s\n"	*(char)
,	O
tmpc	*(char)
)	O
;	O
}	O
while	O
(	O
node	*(struct(*(struct(*(struct`),short,*(char))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`)))))
)	O
{	O
replay_node	(*(struct(*(struct(*`,short,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))),int,*(float),*(float))->(void)
(	O
node	*(struct(*(struct(*(struct`),short,*(char))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`)))))
,	O
color_to_replay	int
,	O
&	O
replay_score	*(float)
,	O
&	O
total_score	*(float)
)	O
;	O
sgffile_output	(*(struct(*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))))->(void)
(	O
tree	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`)))))
)	O
;	O
node	*(struct(*(struct(*(struct`),short,*(char))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`)))))
=	O
node	*(struct(*(struct(*(struct`),short,*(char))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`)))))
->	O
child	*(struct(*(struct(*(struct`),short,*(char))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`)))))
;	O
}	O
if	O
(	O
!	O
quiet	int
)	O
printf	(*(char))->(int)
(	O
"Global score: %.2f / %.2f\n"	*(char)
,	O
replay_score	*(float)
,	O
total_score	*(float)
)	O
;	O
if	O
(	O
showtime	int
)	O
{	O
gprintf	(*(char))->(int)
(	O
"SLOWEST MOVE: %d at %1m "	*(char)
,	O
slowest_movenum	int
,	O
slowest_move	int
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"(%.2f seconds)\n"	*(char)
,	O
slowest_time	double
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"AVERAGE TIME: %.2f seconds per move\n"	*(char)
,	O
total_time	double
/	O
movenum	int
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"TOTAL TIME: %.2f seconds\n"	*(char)
,	O
total_time	double
)	O
;	O
}	O
}	O
static	O
void	O
replay_node	(*(struct(*(struct(*`,short,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))),int,*(float),*(float))->(void)
(	O
SGFNode	struct(*(struct(*(struct(*`,short,*`)),short,*(char))),*(struct(*(struct(*`,short,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))),*(struct(*(struct(*`,short,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))),*(struct(*(struct(*`,short,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))))
*	O
node	*(struct(*(struct(*(struct`),short,*(char))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`)))))
,	O
int	O
color_to_replay	int
,	O
float	O
*	O
replay_score	*(float)
,	O
float	O
*	O
total_score	*(float)
)	O
{	O
SGFProperty	struct(*(struct(*(struct(*`,short,*`)),short,*(char))),short,*(char))
*	O
sgf_prop	*(struct(*(struct(*(struct`),short,*(char))),short,*(char)))
;	O
SGFProperty	struct(*(struct(*(struct(*`,short,*`)),short,*(char))),short,*(char))
*	O
move_prop	*(struct(*(struct(*(struct`),short,*(char))),short,*(char)))
=	O
NULL	O
;	O
int	O
color	int
;	O
int	O
old_move	int
;	O
int	O
new_move	int
;	O
char	O
buf	*(char)
[	O
BUFSIZE	int
]	O
;	O
for	O
(	O
sgf_prop	*(struct(*(struct(*(struct`),short,*(char))),short,*(char)))
=	O
node	*(struct(*(struct(*(struct`),short,*(char))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`)))))
->	O
props	*(struct(*(struct(*(struct`),short,*(char))),short,*(char)))
;	O
sgf_prop	*(struct(*(struct(*(struct`),short,*(char))),short,*(char)))
;	O
sgf_prop	*(struct(*(struct(*(struct`),short,*(char))),short,*(char)))
=	O
sgf_prop	*(struct(*(struct(*(struct`),short,*(char))),short,*(char)))
->	O
next	*(struct(*(struct(*(struct`),short,*(char))),short,*(char)))
)	O
{	O
switch	O
(	O
sgf_prop	*(struct(*(struct(*(struct`),short,*(char))),short,*(char)))
->	O
name	short
)	O
{	O
case	O
SGFAB	int
:	O
add_stone	(int,int)->(void)
(	O
get_sgfmove	(*(struct(*(struct(*`,short,*`)),short,*(char))))->(int)
(	O
sgf_prop	*(struct(*(struct(*(struct`),short,*(char))),short,*(char)))
)	O
,	O
BLACK	int
)	O
;	O
break	O
;	O
case	O
SGFAW	int
:	O
add_stone	(int,int)->(void)
(	O
get_sgfmove	(*(struct(*(struct(*`,short,*`)),short,*(char))))->(int)
(	O
sgf_prop	*(struct(*(struct(*(struct`),short,*(char))),short,*(char)))
)	O
,	O
WHITE	int
)	O
;	O
break	O
;	O
case	O
SGFB	int
:	O
case	O
SGFW	int
:	O
move_prop	*(struct(*(struct(*(struct`),short,*(char))),short,*(char)))
=	O
sgf_prop	*(struct(*(struct(*(struct`),short,*(char))),short,*(char)))
;	O
break	O
;	O
}	O
}	O
if	O
(	O
!	O
move_prop	*(struct(*(struct(*(struct`),short,*(char))),short,*(char)))
)	O
return	O
;	O
old_move	int
=	O
get_sgfmove	(*(struct(*(struct(*`,short,*`)),short,*(char))))->(int)
(	O
move_prop	*(struct(*(struct(*(struct`),short,*(char))),short,*(char)))
)	O
;	O
color	int
=	O
(	O
move_prop	*(struct(*(struct(*(struct`),short,*(char))),short,*(char)))
->	O
name	short
==	O
SGFW	int
)	O
?	O
WHITE	int
:	O
BLACK	int
;	O
if	O
(	O
color	int
==	O
color_to_replay	int
||	O
color_to_replay	int
==	O
GRAY	int
)	O
{	O
float	O
new_move_value	float
=	O
0.0	int
;	O
float	O
old_move_value	float
=	O
0.0	int
;	O
int	O
resign	*(int)
;	O
new_move	int
=	O
genmove	(int,*(float),*(int))->(int)
(	O
color	int
,	O
NULL	O
,	O
&	O
resign	*(int)
)	O
;	O
if	O
(	O
new_move	int
!=	O
PASS_MOVE	int
)	O
new_move_value	float
=	O
potential_moves	array(float)
[	O
new_move	int
]	O
;	O
if	O
(	O
old_move	int
!=	O
PASS_MOVE	int
)	O
old_move_value	float
=	O
potential_moves	array(float)
[	O
old_move	int
]	O
;	O
if	O
(	O
new_move	int
!=	O
old_move	int
||	O
!	O
quiet	int
)	O
{	O
mprintf	(*(char))->(void)
(	O
"Move %d (%C): "	*(char)
,	O
movenum	int
+	O
1	int
,	O
color	int
)	O
;	O
if	O
(	O
resign	*(int)
)	O
printf	(*(char))->(int)
(	O
"GNU Go resigns "	*(char)
)	O
;	O
else	O
{	O
mprintf	(*(char))->(void)
(	O
"GNU Go plays %1m "	*(char)
,	O
new_move	int
)	O
;	O
if	O
(	O
new_move	int
!=	O
PASS_MOVE	int
)	O
printf	(*(char))->(int)
(	O
"(%.2f) "	*(char)
,	O
new_move_value	float
)	O
;	O
}	O
mprintf	(*(char))->(void)
(	O
"- Game move %1m "	*(char)
,	O
old_move	int
)	O
;	O
if	O
(	O
new_move	int
!=	O
PASS_MOVE	int
&&	O
old_move_value	float
>	O
0.0	int
)	O
printf	(*(char))->(int)
(	O
"(%.2f) "	*(char)
,	O
old_move_value	float
)	O
;	O
printf	(*(char))->(int)
(	O
"\n"	*(char)
)	O
;	O
*	O
replay_score	*(float)
+=	O
new_move_value	float
-	O
old_move_value	float
;	O
*	O
total_score	*(float)
+=	O
new_move_value	float
;	O
}	O
if	O
(	O
new_move	int
!=	O
old_move	int
)	O
{	O
if	O
(	O
resign	*(int)
)	O
gg_snprintf	(*(char),long,*(char))->(void)
(	O
buf	*(char)
,	O
BUFSIZE	int
,	O
"GNU Go resigns - Game move %s (%.2f)"	*(char)
,	O
location_to_string	(int)->(*(char))
(	O
old_move	int
)	O
,	O
old_move_value	float
)	O
;	O
else	O
{	O
gg_snprintf	(*(char),long,*(char))->(void)
(	O
buf	*(char)
,	O
BUFSIZE	int
,	O
"GNU Go plays %s (%.2f) - Game move %s (%.2f)"	*(char)
,	O
location_to_string	(int)->(*(char))
(	O
new_move	int
)	O
,	O
new_move_value	float
,	O
location_to_string	(int)->(*(char))
(	O
old_move	int
)	O
,	O
old_move_value	float
)	O
;	O
if	O
(	O
new_move	int
!=	O
PASS_MOVE	int
)	O
sgfCircle	(*(struct(*(struct(*`,short,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))),int,int)->(*(struct(*(struct(*`,short,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))))
(	O
node	*(struct(*(struct(*(struct`),short,*(char))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`)))))
,	O
I	O
(	O
new_move	int
)	O
,	O
J	O
(	O
new_move	int
)	O
)	O
;	O
}	O
}	O
else	O
gg_snprintf	(*(char),long,*(char))->(void)
(	O
buf	*(char)
,	O
BUFSIZE	int
,	O
"GNU Go plays the same move %s (%.2f)"	*(char)
,	O
location_to_string	(int)->(*(char))
(	O
new_move	int
)	O
,	O
new_move_value	float
)	O
;	O
sgfAddComment	(*(struct(*(struct(*`,short,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))),*(char))->(*(struct(*(struct(*`,short,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))))
(	O
node	*(struct(*(struct(*(struct`),short,*(char))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`)))))
,	O
buf	*(char)
)	O
;	O
sgffile_add_debuginfo	(*(struct(*(struct(*`,short,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))),float)->(void)
(	O
node	*(struct(*(struct(*(struct`),short,*(char))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`)))))
,	O
0.0	int
)	O
;	O
}	O
play_move	(int,int)->(void)
(	O
old_move	int
,	O
color	int
)	O
;	O
}	O
