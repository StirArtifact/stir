void	O
recfmt_parse_args	(int,*(*(char)))->(void)
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	*(*(char))
)	O
;	O
bool	bool
recfmt_process_data	(*(struct))->(bool)
(	O
rec_db_t	*(struct)
db	*(struct)
)	O
;	O
void	O
recfmt_process_db	(*(struct),*(char))->(void)
(	O
rec_db_t	*(struct)
db	*(struct)
,	O
char	O
*	O
template	*(char)
)	O
;	O
char	O
*	O
recfmt_apply_template	(*(struct),*(char))->(*(char))
(	O
rec_record_t	*(struct)
record	*(struct)
,	O
char	O
*	O
template	*(char)
)	O
;	O
char	O
*	O
recfmt_get_subst	(*(struct),*(char))->(*(char))
(	O
rec_record_t	*(struct)
record	*(struct)
,	O
char	O
*	O
str	*(char)
)	O
;	O
char	O
*	O
recfmt_template	*(char)
=	O
NULL	O
;	O
enum	O
{	O
COMMON_ARGS	O
,	O
FILE_ARG	int
}	O
;	O
static	O
const	O
struct	O
option	struct(*(char),int,*(int),int)
GNU_longOptions	array(struct(*(char),int,*(int),int))
[	O
]	O
=	O
{	O
COMMON_LONG_ARGS	O
,	O
{	O
"file"	*(char)
,	O
required_argument	int
,	O
NULL	O
,	O
FILE_ARG	int
}	O
,	O
{	O
NULL	O
,	O
0	int
,	O
NULL	O
,	O
0	int
}	O
}	O
;	O
void	O
recutl_print_help	()->(void)
(	O
void	O
)	O
{	O
printf	(*(char))->(int)
(	O
_	O
(	O
"Usage: recfmt [OPTION]... [TEMPLATE]\n"	*(char)
)	O
)	O
;	O
fputs	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
_	O
(	O
"Apply a template to records read from standard input.\n"	*(char)
)	O
,	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
puts	(*(char))->(int)
(	O
""	*(char)
)	O
;	O
fputs	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
_	O
(	O
"  -f, --file=FILENAME                 read the template to apply from a file.\n"	*(char)
)	O
,	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
recutl_print_help_common	()->(void)
(	O
)	O
;	O
puts	(*(char))->(int)
(	O
""	*(char)
)	O
;	O
recutl_print_help_footer	()->(void)
(	O
)	O
;	O
}	O
void	O
recfmt_parse_args	(int,*(*(char)))->(void)
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	*(*(char))
)	O
{	O
char	O
c	int
;	O
int	O
ret	int
;	O
while	O
(	O
(	O
ret	int
=	O
getopt_long	(int,*(*(char)),*(char),*(struct(*(char),int,*(int),int)),*(int))->(int)
(	O
argc	int
,	O
argv	*(*(char))
,	O
"f:"	*(char)
,	O
GNU_longOptions	array(struct(*(char),int,*(int),int))
,	O
NULL	O
)	O
)	O
!=	O
-	O
1	int
)	O
{	O
c	int
=	O
ret	int
;	O
switch	O
(	O
c	int
)	O
{	O
COMMON_ARGS_CASES	O
case	O
FILE_ARG	int
:	O
case	O
'f'	O
:	O
{	O
recfmt_template	*(char)
=	O
recutl_read_file	(*(char))->(*(char))
(	O
optarg	*(char)
)	O
;	O
if	O
(	O
!	O
recfmt_template	*(char)
)	O
{	O
recutl_fatal	(*(char))->(void)
(	O
_	O
(	O
"can't open file %s for reading.\n"	*(char)
)	O
,	O
optarg	*(char)
)	O
;	O
}	O
break	O
;	O
}	O
default	O
:	O
{	O
exit	(int)->(void)
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
}	O
}	O
if	O
(	O
optind	int
<	O
argc	int
)	O
{	O
if	O
(	O
recfmt_template	*(char)
)	O
{	O
recutl_fatal	(*(char))->(void)
(	O
_	O
(	O
"don't specify a template in the command line and -f at the same time.\n"	*(char)
)	O
)	O
;	O
}	O
if	O
(	O
(	O
argc	int
-	O
optind	int
)	O
!=	O
1	int
)	O
{	O
recutl_print_help	()->(void)
(	O
)	O
;	O
exit	(int)->(void)
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
recfmt_template	*(char)
=	O
xstrdup	(*(char))->(*(char))
(	O
argv	*(*(char))
[	O
optind	int
++	O
]	O
)	O
;	O
}	O
}	O
char	O
*	O
recfmt_get_subst	(*(struct),*(char))->(*(char))
(	O
rec_record_t	*(struct)
record	*(struct)
,	O
char	O
*	O
str	*(char)
)	O
{	O
char	O
*	O
res	*(char)
;	O
rec_sex_t	*(struct)
sex	*(struct)
;	O
sex	*(struct)
=	O
rec_sex_new	(bool)->(*(struct))
(	O
false	int
)	O
;	O
if	O
(	O
!	O
rec_sex_compile	(*(struct),*(char))->(bool)
(	O
sex	*(struct)
,	O
str	*(char)
)	O
)	O
{	O
recutl_fatal	(*(char))->(void)
(	O
_	O
(	O
"invalid expression in a template slot.\n"	*(char)
)	O
)	O
;	O
}	O
res	*(char)
=	O
rec_sex_eval_str	(*(struct),*(struct))->(*(char))
(	O
sex	*(struct)
,	O
record	*(struct)
)	O
;	O
if	O
(	O
!	O
res	*(char)
)	O
{	O
recutl_fatal	(*(char))->(void)
(	O
_	O
(	O
"error evaluating expression in a template slot.\n"	*(char)
)	O
)	O
;	O
}	O
rec_sex_destroy	(*(struct))->(void)
(	O
sex	*(struct)
)	O
;	O
return	O
res	*(char)
;	O
}	O
char	O
*	O
recfmt_apply_template	(*(struct),*(char))->(*(char))
(	O
rec_record_t	*(struct)
record	*(struct)
,	O
char	O
*	O
template	*(char)
)	O
{	O
rec_buf_t	*(struct)
result_buf	*(struct)
;	O
char	O
*	O
result	*(*(char))
;	O
char	O
*	O
tmp	*(char)
;	O
size_t	long
tmp_size	long
;	O
size_t	long
result_size	long
;	O
char	O
*	O
p	*(void)
;	O
regex_t	struct(*(struct),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int)
regexp	struct(*(struct),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int)
;	O
regmatch_t	struct(long,long)
matches	struct(long,long)
;	O
char	O
*	O
subst_str	*(char)
;	O
if	O
(	O
regcomp	O
(	O
&	O
regexp	struct(*(struct),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int)
,	O
"\\{\\{"	*(char)
"[^}]*"	*(char)
"\\}\\}"	*(char)
,	O
REG_EXTENDED	int
)	O
!=	O
0	int
)	O
{	O
recutl_fatal	(*(char))->(void)
(	O
_	O
(	O
"recfmt_apply_template: error compiling regexp. Please report this.\n"	*(char)
)	O
)	O
;	O
}	O
result_buf	*(struct)
=	O
rec_buf_new	(*(*(char)),*(long))->(*(struct))
(	O
&	O
result	*(*(char))
,	O
&	O
result_size	long
)	O
;	O
p	*(void)
=	O
template	*(char)
;	O
while	O
(	O
*	O
p	*(void)
&&	O
(	O
regexec	O
(	O
&	O
regexp	struct(*(struct),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int)
,	O
p	*(void)
,	O
1	int
,	O
&	O
matches	struct(long,long)
,	O
0	int
)	O
==	O
0	int
)	O
&&	O
(	O
matches	struct(long,long)
.	O
rm_so	long
!=	O
-	O
1	int
)	O
)	O
{	O
if	O
(	O
matches	struct(long,long)
.	O
rm_so	long
>	O
0	int
)	O
{	O
tmp	*(char)
=	O
xmalloc	(long)->(*(void))
(	O
matches	struct(long,long)
.	O
rm_so	long
+	O
1	int
)	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
tmp	*(char)
,	O
p	*(void)
,	O
matches	struct(long,long)
.	O
rm_so	long
)	O
;	O
tmp	*(char)
[	O
matches	struct(long,long)
.	O
rm_so	long
]	O
=	O
'\0'	O
;	O
rec_buf_puts	(*(char),*(struct))->(int)
(	O
tmp	*(char)
,	O
result_buf	*(struct)
)	O
;	O
free	(*(void))->(void)
(	O
tmp	*(char)
)	O
;	O
}	O
tmp_size	long
=	O
matches	struct(long,long)
.	O
rm_eo	long
-	O
matches	struct(long,long)
.	O
rm_so	long
-	O
4	int
;	O
tmp	*(char)
=	O
xmalloc	(long)->(*(void))
(	O
tmp_size	long
+	O
1	int
)	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
tmp	*(char)
,	O
p	*(void)
+	O
matches	struct(long,long)
.	O
rm_so	long
+	O
2	int
,	O
tmp_size	long
)	O
;	O
tmp	*(char)
[	O
tmp_size	long
]	O
=	O
'\0'	O
;	O
p	*(void)
=	O
p	*(void)
+	O
matches	struct(long,long)
.	O
rm_eo	long
;	O
subst_str	*(char)
=	O
recfmt_get_subst	(*(struct),*(char))->(*(char))
(	O
record	*(struct)
,	O
tmp	*(char)
)	O
;	O
if	O
(	O
subst_str	*(char)
)	O
{	O
rec_buf_puts	(*(char),*(struct))->(int)
(	O
subst_str	*(char)
,	O
result_buf	*(struct)
)	O
;	O
free	(*(void))->(void)
(	O
subst_str	*(char)
)	O
;	O
}	O
free	(*(void))->(void)
(	O
tmp	*(char)
)	O
;	O
}	O
if	O
(	O
*	O
p	*(void)
)	O
{	O
rec_buf_puts	(*(char),*(struct))->(int)
(	O
p	*(void)
,	O
result_buf	*(struct)
)	O
;	O
}	O
rec_buf_close	(*(struct))->(void)
(	O
result_buf	*(struct)
)	O
;	O
return	O
result	*(*(char))
;	O
}	O
void	O
recfmt_process_db	(*(struct),*(char))->(void)
(	O
rec_db_t	*(struct)
db	*(struct)
,	O
char	O
*	O
template	*(char)
)	O
{	O
size_t	long
n_rset	long
;	O
rec_rset_t	*(struct)
rset	*(struct)
;	O
rec_record_t	*(struct)
record	*(struct)
;	O
char	O
*	O
result	*(*(char))
;	O
rec_mset_iterator_t	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
iter	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
;	O
for	O
(	O
n_rset	long
=	O
0	int
;	O
n_rset	long
<	O
rec_db_size	(*(struct))->(long)
(	O
db	*(struct)
)	O
;	O
n_rset	long
++	O
)	O
{	O
rset	*(struct)
=	O
rec_db_get_rset	(*(struct),long)->(*(struct))
(	O
db	*(struct)
,	O
n_rset	long
)	O
;	O
iter	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
=	O
rec_mset_iterator	(*(struct))->(struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long)))
(	O
rec_rset_mset	(*(struct))->(*(struct))
(	O
rset	*(struct)
)	O
)	O
;	O
while	O
(	O
rec_mset_iterator_next	(*(struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))),int,*(*(void)),*(*(struct)))->(bool)
(	O
&	O
iter	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
,	O
MSET_RECORD	int
,	O
(	O
const	O
void	O
*	O
*	O
)	O
&	O
record	*(struct)
,	O
NULL	O
)	O
)	O
{	O
result	*(*(char))
=	O
recfmt_apply_template	(*(struct),*(char))->(*(char))
(	O
record	*(struct)
,	O
template	*(char)
)	O
;	O
if	O
(	O
result	*(*(char))
&&	O
(	O
*	O
result	*(*(char))
!=	O
'\0'	O
)	O
)	O
{	O
printf	(*(char))->(int)
(	O
"%s"	*(char)
,	O
result	*(*(char))
)	O
;	O
free	(*(void))->(void)
(	O
result	*(*(char))
)	O
;	O
}	O
}	O
rec_mset_iterator_free	(*(struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))))->(void)
(	O
&	O
iter	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
)	O
;	O
}	O
}	O
int	O
main	(int,array(*(char)))->(int)
(	O
int	O
argc	int
,	O
char	O
*	O
argv	*(*(char))
[	O
]	O
)	O
{	O
rec_db_t	*(struct)
db	*(struct)
;	O
recutl_init	(*(char))->(void)
(	O
"recfmt"	*(char)
)	O
;	O
recfmt_parse_args	(int,*(*(char)))->(void)
(	O
argc	int
,	O
argv	*(*(char))
)	O
;	O
db	*(struct)
=	O
recutl_read_db_from_file	(*(char))->(*(struct))
(	O
NULL	O
)	O
;	O
if	O
(	O
db	*(struct)
&&	O
recfmt_template	*(char)
)	O
{	O
recfmt_process_db	(*(struct),*(char))->(void)
(	O
db	*(struct)
,	O
recfmt_template	*(char)
)	O
;	O
}	O
return	O
EXIT_SUCCESS	int
;	O
}	O
