enum	O
echo_mode	enum(int,int)
{	O
ECHO_ECHO	int
,	O
ECHO_NULL	int
}	O
;	O
struct	O
dico_handle_struct	struct(enum(int,int),*(char),long)
{	O
enum	O
echo_mode	enum(int,int)
mode	int
;	O
char	O
*	O
prefix	*(char)
;	O
size_t	long
prefix_len	long
;	O
}	O
;	O
static	O
int	O
echo_init	(int,*(*(char)))->(int)
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	*(*(char))
)	O
{	O
return	O
0	int
;	O
}	O
static	O
dico_handle_t	*(struct)
echo_init_db	(*(char),int,*(*(char)))->(*(struct(enum(int,int),*(char),long)))
(	O
const	O
char	O
*	O
dbname	*(char)
,	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	*(*(char))
)	O
{	O
int	O
null_mode	int
=	O
0	int
;	O
dico_handle_t	*(struct)
hp	*(struct)
;	O
char	O
*	O
prefix	*(char)
=	O
NULL	O
;	O
struct	O
dico_option	struct(*(char),long,enum(int,int,int,int,int,int,int,int,int),*(void),union(long,*(*(char))),*((*(struct(*(char),long,enum(int,int,int,int,int,int,int,int,int),*(void),union(long,*`),*((*`,*`)->(int)))),*(char))->(int)))
init_db_option	array(struct(*(char),long,enum(int,int,int,int,int,int,int,int,int),*(void),union(long,*(*(char))),*((*(struct(*`,long,enum(int,int,int,int,int,int,int,int,int),*`,union`,*`)),*(char))->(int))))
[	O
]	O
=	O
{	O
{	O
DICO_OPTSTR	O
(	O
null	O
)	O
,	O
dico_opt_bool	int
,	O
&	O
null_mode	int
}	O
,	O
{	O
DICO_OPTSTR	O
(	O
prefix	*(char)
)	O
,	O
dico_opt_string	int
,	O
&	O
prefix	*(char)
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
if	O
(	O
dico_parseopt	(*(struct(*(char),long,enum(int,int,int,int,int,int,int,int,int),*(void),union(long,*(*`)),*((*`,*`)->(int)))),int,*(*(char)),int,*(int))->(int)
(	O
init_db_option	array(struct(*(char),long,enum(int,int,int,int,int,int,int,int,int),*(void),union(long,*(*(char))),*((*(struct(*`,long,enum(int,int,int,int,int,int,int,int,int),*`,union`,*`)),*(char))->(int))))
,	O
argc	int
,	O
argv	*(*(char))
,	O
0	int
,	O
NULL	O
)	O
)	O
return	O
NULL	O
;	O
hp	*(struct)
=	O
malloc	(long)->(*(void))
(	O
sizeof	O
(	O
*	O
hp	*(struct)
)	O
)	O
;	O
if	O
(	O
hp	*(struct)
)	O
{	O
hp	*(struct)
->	O
mode	int
=	O
null_mode	int
?	O
ECHO_NULL	int
:	O
ECHO_ECHO	int
;	O
if	O
(	O
prefix	*(char)
)	O
{	O
hp	*(struct)
->	O
prefix	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
prefix	*(char)
)	O
;	O
if	O
(	O
!	O
hp	*(struct)
->	O
prefix	*(char)
)	O
{	O
dico_log	(int,int,*(char))->(void)
(	O
L_ERR	int
,	O
0	int
,	O
"not enough memory"	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
hp	*(struct)
)	O
;	O
return	O
NULL	O
;	O
}	O
hp	*(struct)
->	O
prefix_len	long
=	O
strlen	(*(char))->(long)
(	O
prefix	*(char)
)	O
;	O
}	O
else	O
{	O
hp	*(struct)
->	O
prefix	*(char)
=	O
NULL	O
;	O
hp	*(struct)
->	O
prefix_len	long
=	O
0	int
;	O
}	O
}	O
else	O
dico_log	(int,int,*(char))->(void)
(	O
L_ERR	int
,	O
0	int
,	O
"not enough memory"	*(char)
)	O
;	O
return	O
hp	*(struct)
;	O
}	O
static	O
int	O
echo_free_db	(*(struct(enum(int,int),*(char),long)))->(int)
(	O
dico_handle_t	*(struct)
hp	*(struct)
)	O
{	O
free	(*(void))->(void)
(	O
hp	*(struct)
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
echo_open	(*(struct(enum(int,int),*(char),long)))->(int)
(	O
dico_handle_t	*(struct)
dp	*(struct(enum(int,int),*(char),long))
)	O
{	O
return	O
0	int
;	O
}	O
static	O
int	O
echo_close	(*(struct(enum(int,int),*(char),long)))->(int)
(	O
dico_handle_t	*(struct)
hp	*(struct)
)	O
{	O
return	O
0	int
;	O
}	O
static	O
char	O
*	O
echo_info	(*(struct(enum(int,int),*(char),long)))->(*(char))
(	O
dico_handle_t	*(struct)
ep	*(struct(enum(int,int),*(char),long))
)	O
{	O
static	O
char	O
*	O
echo_info_str	array(*(char))
[	O
2	int
]	O
=	O
{	O
"ECHO database.\n\nThis database echoes each query.\n"	*(char)
,	O
"NULL database.\n\nThis database returns NULL (no result) to any match and define\nrequests.\n"	*(char)
}	O
;	O
return	O
strdup	(*(char))->(*(char))
(	O
echo_info_str	array(*(char))
[	O
ep	*(struct(enum(int,int),*(char),long))
->	O
mode	int
]	O
)	O
;	O
}	O
static	O
char	O
*	O
echo_descr	(*(struct(enum(int,int),*(char),long)))->(*(char))
(	O
dico_handle_t	*(struct)
ep	*(struct(enum(int,int),*(char),long))
)	O
{	O
static	O
char	O
*	O
echo_descr_str	array(*(char))
[	O
2	int
]	O
=	O
{	O
"GNU Dico ECHO database"	*(char)
,	O
"GNU Dico NULL database"	*(char)
}	O
;	O
char	O
*	O
res	*(char)
;	O
if	O
(	O
ep	*(struct(enum(int,int),*(char),long))
->	O
mode	int
==	O
ECHO_ECHO	int
&&	O
ep	*(struct(enum(int,int),*(char),long))
->	O
prefix	*(char)
)	O
{	O
size_t	long
len	int
=	O
strlen	(*(char))->(long)
(	O
echo_descr_str	array(*(char))
[	O
ep	*(struct(enum(int,int),*(char),long))
->	O
mode	int
]	O
)	O
+	O
ep	*(struct(enum(int,int),*(char),long))
->	O
prefix_len	long
+	O
11	int
;	O
res	*(char)
=	O
malloc	(long)->(*(void))
(	O
len	int
)	O
;	O
if	O
(	O
res	*(char)
)	O
snprintf	(*(char),long,*(char))->(int)
(	O
res	*(char)
,	O
len	int
,	O
"%s (prefix %s)"	*(char)
,	O
echo_descr_str	array(*(char))
[	O
ep	*(struct(enum(int,int),*(char),long))
->	O
mode	int
]	O
,	O
ep	*(struct(enum(int,int),*(char),long))
->	O
prefix	*(char)
)	O
;	O
}	O
else	O
res	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
echo_descr_str	array(*(char))
[	O
ep	*(struct(enum(int,int),*(char),long))
->	O
mode	int
]	O
)	O
;	O
return	O
res	*(char)
;	O
}	O
static	O
dico_result_t	*(struct)
new_result	(*(struct(enum(int,int),*(char),long)),*(char))->(*(struct))
(	O
dico_handle_t	*(struct)
ep	*(struct(enum(int,int),*(char),long))
,	O
char	O
const	O
*	O
word	*(char)
)	O
{	O
char	O
*	O
res	*(char)
=	O
malloc	(long)->(*(void))
(	O
strlen	(*(char))->(long)
(	O
word	*(char)
)	O
+	O
ep	*(struct(enum(int,int),*(char),long))
->	O
prefix_len	long
+	O
1	int
)	O
;	O
if	O
(	O
!	O
res	*(char)
)	O
dico_log	(int,int,*(char))->(void)
(	O
L_ERR	int
,	O
0	int
,	O
"not enough memory"	*(char)
)	O
;	O
else	O
{	O
if	O
(	O
ep	*(struct(enum(int,int),*(char),long))
->	O
prefix	*(char)
)	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
res	*(char)
,	O
ep	*(struct(enum(int,int),*(char),long))
->	O
prefix	*(char)
,	O
ep	*(struct(enum(int,int),*(char),long))
->	O
prefix_len	long
)	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
res	*(char)
+	O
ep	*(struct(enum(int,int),*(char),long))
->	O
prefix_len	long
,	O
word	*(char)
)	O
;	O
}	O
return	O
(	O
dico_result_t	*(struct)
)	O
res	*(char)
;	O
}	O
static	O
dico_result_t	*(struct)
echo_match	(*(struct(enum(int,int),*(char),long)),*(struct(*(char),*(char),*((int,*`,*`)->(int)),*(void),int,*(struct))),*(char))->(*(struct))
(	O
dico_handle_t	*(struct)
ep	*(struct(enum(int,int),*(char),long))
,	O
const	O
dico_strategy_t	*(struct)
strat	*(struct)
,	O
const	O
char	O
*	O
word	*(char)
)	O
{	O
if	O
(	O
ep	*(struct(enum(int,int),*(char),long))
->	O
mode	int
==	O
ECHO_NULL	int
)	O
return	O
NULL	O
;	O
return	O
new_result	(*(struct(enum(int,int),*(char),long)),*(char))->(*(struct))
(	O
ep	*(struct(enum(int,int),*(char),long))
,	O
word	*(char)
)	O
;	O
}	O
static	O
dico_result_t	*(struct)
echo_define	(*(struct(enum(int,int),*(char),long)),*(char))->(*(struct))
(	O
dico_handle_t	*(struct)
ep	*(struct(enum(int,int),*(char),long))
,	O
const	O
char	O
*	O
word	*(char)
)	O
{	O
if	O
(	O
ep	*(struct(enum(int,int),*(char),long))
->	O
mode	int
==	O
ECHO_NULL	int
)	O
return	O
NULL	O
;	O
return	O
new_result	(*(struct(enum(int,int),*(char),long)),*(char))->(*(struct))
(	O
ep	*(struct(enum(int,int),*(char),long))
,	O
word	*(char)
)	O
;	O
}	O
static	O
int	O
echo_output_result	(*(struct),long,*(struct))->(int)
(	O
dico_result_t	*(struct)
rp	*(struct)
,	O
size_t	long
n	long
,	O
dico_stream_t	*(struct)
str	*(struct)
)	O
{	O
char	O
*	O
word	*(char)
=	O
(	O
char	O
*	O
)	O
rp	*(struct)
;	O
dico_stream_write	(*(struct),*(void),long)->(int)
(	O
str	*(struct)
,	O
word	*(char)
,	O
strlen	(*(char))->(long)
(	O
word	*(char)
)	O
)	O
;	O
return	O
0	int
;	O
}	O
static	O
size_t	long
echo_result_count	(*(struct))->(long)
(	O
dico_result_t	*(struct)
rp	*(struct)
)	O
{	O
return	O
1	int
;	O
}	O
static	O
size_t	long
echo_compare_count	(*(struct))->(long)
(	O
dico_result_t	*(struct)
rp	*(struct)
)	O
{	O
return	O
1	int
;	O
}	O
static	O
void	O
echo_free_result	(*(struct))->(void)
(	O
dico_result_t	*(struct)
rp	*(struct)
)	O
{	O
free	(*(void))->(void)
(	O
rp	*(struct)
)	O
;	O
}	O
static	O
char	O
*	O
echo_mime_header	(*(struct(enum(int,int),*(char),long)))->(*(char))
(	O
dico_handle_t	*(struct)
ep	*(struct(enum(int,int),*(char),long))
)	O
{	O
return	O
strdup	(*(char))->(*(char))
(	O
"Content-Type: text/plain; charset=utf-8\nContent-Transfer-Encoding: 8bit\n"	*(char)
)	O
;	O
}	O
struct	O
dico_database_module	struct(int,int,*((int,*(*(char)))->(int)),*((*(char),int,*(*(char)))->(*(struct))),*((*(struct))->(int)),*((*(struct))->(int)),*((*(struct))->(int)),*((*(struct))->(*(char))),*((*(struct))->(*(char))),*((*(struct),array(*(struct)))->(int)),*((*(struct),*(struct),*(char))->(*(struct))),*((*(struct),*(char))->(*(struct))),*((*(struct),long,*(struct))->(int)),*((*(struct))->(long)),*((*(struct))->(long)),*((*(struct))->(void)),*((*(struct),*(struct))->(int)),*((int,*(*(char)))->(int)),*((*(struct))->(*(char))),*((*(char),int,*(*(char)),*(void))->(*(struct))),*((*(struct))->(int)),*((*(struct),long)->(*(struct))))
DICO_EXPORT	O
(	O
echo	O
,	O
module	O
)	O
=	O
{	O
.	O
dico_version	int
=	O
DICO_MODULE_VERSION	int
,	O
.	O
dico_capabilities	int
=	O
DICO_CAPA_NONE	int
,	O
.	O
dico_init	*((int,*(*(char)))->(int))
=	O
echo_init	(int,*(*(char)))->(int)
,	O
.	O
dico_init_db	*((*(char),int,*(*(char)))->(*(struct)))
=	O
echo_init_db	(*(char),int,*(*(char)))->(*(struct(enum(int,int),*(char),long)))
,	O
.	O
dico_free_db	*((*(struct))->(int))
=	O
echo_free_db	(*(struct(enum(int,int),*(char),long)))->(int)
,	O
.	O
dico_open	*((*(struct))->(int))
=	O
echo_open	(*(struct(enum(int,int),*(char),long)))->(int)
,	O
.	O
dico_close	*((*(struct))->(int))
=	O
echo_close	(*(struct(enum(int,int),*(char),long)))->(int)
,	O
.	O
dico_db_info	*((*(struct))->(*(char)))
=	O
echo_info	(*(struct(enum(int,int),*(char),long)))->(*(char))
,	O
.	O
dico_db_descr	*((*(struct))->(*(char)))
=	O
echo_descr	(*(struct(enum(int,int),*(char),long)))->(*(char))
,	O
.	O
dico_match	*((*(struct),*(struct),*(char))->(*(struct)))
=	O
echo_match	(*(struct(enum(int,int),*(char),long)),*(struct(*(char),*(char),*((int,*`,*`)->(int)),*(void),int,*(struct))),*(char))->(*(struct))
,	O
.	O
dico_define	*((*(struct),*(char))->(*(struct)))
=	O
echo_define	(*(struct(enum(int,int),*(char),long)),*(char))->(*(struct))
,	O
.	O
dico_output_result	*((*(struct),long,*(struct))->(int))
=	O
echo_output_result	(*(struct),long,*(struct))->(int)
,	O
.	O
dico_result_count	*((*(struct))->(long))
=	O
echo_result_count	(*(struct))->(long)
,	O
.	O
dico_compare_count	*((*(struct))->(long))
=	O
echo_compare_count	(*(struct))->(long)
,	O
.	O
dico_free_result	*((*(struct))->(void))
=	O
echo_free_result	(*(struct))->(void)
,	O
.	O
dico_db_mime_header	*((*(struct))->(*(char)))
=	O
echo_mime_header	(*(struct(enum(int,int),*(char),long)))->(*(char))
}	O
;	O
