struct	O
css_context	struct(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(char),struct(*(char),long,long,bool,bool,bool),char)
{	O
wget_iri	struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)
*	O
base	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool))
;	O
const	O
char	O
*	O
encoding	*(char)
;	O
wget_buffer	struct(*(char),long,long,bool,bool,bool)
uri_buf	struct(*(char),long,long,bool,bool,bool)
;	O
char	O
encoding_allocated	char
;	O
}	O
;	O
static	O
void	O
WGET_GCC_NORETURN	O
usage	(*(char))->(void)
(	O
const	O
char	O
*	O
myname	*(char)
)	O
{	O
error_printf_exit	O
(	O
"\nUsage: %s [options] file...\n"	*(char)
"  --base <URI>          Default base for relative URIs, default: http://www.example.com\n"	*(char)
"  --encoding <Encoding> Default file character encoding, default: iso-8859-1\n"	*(char)
"\n"	*(char)
"  Examples:\n"	*(char)
"    %s --base http://www.mydomain.com x.css\n"	*(char)
"    cat x.css | %s --base http://www.mydomain.com -\n"	*(char)
"\n"	*(char)
"  Print URIs as found (without a base):\n"	*(char)
"    %s --base \"\" x.css\n\n"	*(char)
,	O
myname	*(char)
,	O
myname	*(char)
,	O
myname	*(char)
,	O
myname	*(char)
)	O
;	O
}	O
static	O
void	O
css_parse_encoding	(*(void),*(char),long)->(void)
(	O
void	O
*	O
context	*(void)
,	O
const	O
char	O
*	O
encoding	*(char)
,	O
size_t	long
len	long
)	O
{	O
struct	O
css_context	struct(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(char),struct(*(char),long,long,bool,bool,bool),char)
*	O
ctx	*(void)
=	O
context	*(void)
;	O
if	O
(	O
!	O
ctx	*(void)
->	O
encoding_allocated	char
&&	O
wget_strncasecmp_ascii	(*(char),*(char),long)->(int)
(	O
ctx	*(void)
->	O
encoding	*(char)
,	O
encoding	*(char)
,	O
len	long
)	O
)	O
{	O
if	O
(	O
ctx	*(void)
->	O
encoding	*(char)
)	O
info_printf	O
(	O
"Encoding changed from '%s' to '%.*s'\n"	*(char)
,	O
ctx	*(void)
->	O
encoding	*(char)
,	O
(	O
int	O
)	O
len	long
,	O
encoding	*(char)
)	O
;	O
else	O
info_printf	O
(	O
"Encoding set to '%.*s'\n"	*(char)
,	O
(	O
int	O
)	O
len	long
,	O
encoding	*(char)
)	O
;	O
ctx	*(void)
->	O
encoding	*(char)
=	O
wget_strmemdup	(*(void),long)->(*(char))
(	O
encoding	*(char)
,	O
len	long
)	O
;	O
ctx	*(void)
->	O
encoding_allocated	char
=	O
1	int
;	O
}	O
}	O
static	O
void	O
css_parse_uri	(*(void),*(char),long,long)->(void)
(	O
void	O
*	O
context	*(void)
,	O
const	O
char	O
*	O
url	*(char)
,	O
size_t	long
len	long
,	O
size_t	long
pos	int
WGET_GCC_UNUSED	O
)	O
{	O
struct	O
css_context	struct(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(char),struct(*(char),long,long,bool,bool,bool),char)
*	O
ctx	*(void)
=	O
context	*(void)
;	O
if	O
(	O
!	O
ctx	*(void)
->	O
base	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool))
)	O
{	O
wget_info_printf	(*(char))->(void)
(	O
"  %.*s\n"	*(char)
,	O
(	O
int	O
)	O
len	long
,	O
url	*(char)
)	O
;	O
}	O
else	O
if	O
(	O
wget_iri_relative_to_abs	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(char),long,*(struct(*(char),long,long,bool,bool,bool)))->(*(char))
(	O
ctx	*(void)
->	O
base	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool))
,	O
url	*(char)
,	O
len	long
,	O
&	O
ctx	*(void)
->	O
uri_buf	struct(*(char),long,long,bool,bool,bool)
)	O
)	O
{	O
wget_info_printf	(*(char))->(void)
(	O
"  %.*s -> %s\n"	*(char)
,	O
(	O
int	O
)	O
len	long
,	O
url	*(char)
,	O
ctx	*(void)
->	O
uri_buf	struct(*(char),long,long,bool,bool,bool)
.	O
data	*(void)
)	O
;	O
}	O
else	O
{	O
error_printf	O
(	O
"Cannot resolve relative URI %.*s\n"	*(char)
,	O
(	O
int	O
)	O
len	long
,	O
url	*(char)
)	O
;	O
}	O
}	O
static	O
void	O
css_parse_localfile	(*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(char))->(void)
(	O
const	O
char	O
*	O
fname	*(char)
,	O
wget_iri	struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)
*	O
base	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool))
,	O
const	O
char	O
*	O
encoding	*(char)
)	O
{	O
struct	O
css_context	struct(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(char),struct(*(char),long,long,bool,bool,bool),char)
context	*(void)
=	O
{	O
.	O
base	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool))
=	O
base	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool))
,	O
.	O
encoding	*(char)
=	O
encoding	*(char)
}	O
;	O
wget_buffer_init	(*(struct(*(char),long,long,bool,bool,bool)),*(char),long)->(int)
(	O
&	O
context	*(void)
.	O
uri_buf	struct(*(char),long,long,bool,bool,bool)
,	O
NULL	O
,	O
128	int
)	O
;	O
wget_css_parse_file	(*(char),*((*(void),*(char),long,long)->(void)),*((*(void),*(char),long)->(void)),*(void))->(void)
(	O
fname	*(char)
,	O
css_parse_uri	(*(void),*(char),long,long)->(void)
,	O
css_parse_encoding	(*(void),*(char),long)->(void)
,	O
&	O
context	*(void)
)	O
;	O
if	O
(	O
context	*(void)
.	O
encoding_allocated	char
)	O
wget_xfree	O
(	O
context	*(void)
.	O
encoding	*(char)
)	O
;	O
wget_buffer_deinit	(*(struct(*(char),long,long,bool,bool,bool)))->(void)
(	O
&	O
context	*(void)
.	O
uri_buf	struct(*(char),long,long,bool,bool,bool)
)	O
;	O
}	O
int	O
main	(int,*(*(char)))->(int)
(	O
int	O
argc	int
,	O
const	O
char	O
*	O
const	O
*	O
argv	*(*(char))
)	O
{	O
const	O
char	O
*	O
base	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool))
=	O
"http://www.example.com"	*(char)
;	O
const	O
char	O
*	O
local_encoding	*(char)
=	O
wget_local_charset_encoding	()->(*(char))
(	O
)	O
;	O
wget_iri	struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)
*	O
base_uri	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool))
;	O
const	O
char	O
*	O
css_encoding	*(char)
=	O
NULL	O
;	O
int	O
argpos	int
;	O
wget_logger_set_stream	(*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(void)
(	O
wget_get_logger	(int)->(*(struct))
(	O
WGET_LOGGER_ERROR	int
)	O
,	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
wget_logger_set_stream	(*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(void)
(	O
wget_get_logger	(int)->(*(struct))
(	O
WGET_LOGGER_INFO	int
)	O
,	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
for	O
(	O
argpos	int
=	O
1	int
;	O
argpos	int
<	O
argc	int
;	O
argpos	int
++	O
)	O
{	O
if	O
(	O
!	O
strcmp	(*(char),*(char))->(int)
(	O
argv	*(*(char))
[	O
argpos	int
]	O
,	O
"--base"	*(char)
)	O
&&	O
argc	int
-	O
argpos	int
>	O
1	int
)	O
{	O
base	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool))
=	O
argv	*(*(char))
[	O
++	O
argpos	int
]	O
;	O
info_printf	O
(	O
"Base URL encoding = '%s'\n"	*(char)
,	O
local_encoding	*(char)
)	O
;	O
}	O
else	O
if	O
(	O
!	O
strcmp	(*(char),*(char))->(int)
(	O
argv	*(*(char))
[	O
argpos	int
]	O
,	O
"--encoding"	*(char)
)	O
&&	O
argc	int
-	O
argpos	int
>	O
1	int
)	O
{	O
css_encoding	*(char)
=	O
argv	*(*(char))
[	O
++	O
argpos	int
]	O
;	O
}	O
else	O
if	O
(	O
!	O
strcmp	(*(char),*(char))->(int)
(	O
argv	*(*(char))
[	O
argpos	int
]	O
,	O
"--"	*(char)
)	O
)	O
{	O
argpos	int
++	O
;	O
break	O
;	O
}	O
else	O
if	O
(	O
argv	*(*(char))
[	O
argpos	int
]	O
[	O
0	int
]	O
==	O
'-'	O
)	O
{	O
usage	(*(char))->(void)
(	O
argv	*(*(char))
[	O
0	int
]	O
)	O
;	O
}	O
else	O
break	O
;	O
}	O
base_uri	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool))
=	O
wget_iri_parse	(*(char),*(char))->(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
(	O
base	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool))
,	O
local_encoding	*(char)
)	O
;	O
for	O
(	O
;	O
argpos	int
<	O
argc	int
;	O
argpos	int
++	O
)	O
{	O
css_parse_localfile	(*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(char))->(void)
(	O
argv	*(*(char))
[	O
argpos	int
]	O
,	O
base_uri	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool))
,	O
css_encoding	*(char)
)	O
;	O
}	O
wget_iri_free	(*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool))))->(void)
(	O
&	O
base_uri	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool))
)	O
;	O
return	O
0	int
;	O
}	O
