static	O
int	O
copy_range	(*(void),*(void))->(int)
(	O
void	O
*	O
item	*(void)
,	O
void	O
*	O
data	*(void)
)	O
{	O
struct	O
mu_msgrange	struct(long,long)
const	O
*	O
range	*(char)
=	O
item	*(void)
;	O
mu_list_t	*(struct)
list	*(struct)
=	O
data	*(void)
;	O
struct	O
mu_msgrange	struct(long,long)
*	O
copy	*(struct(long,long))
;	O
copy	*(struct(long,long))
=	O
malloc	(long)->(*(void))
(	O
sizeof	O
(	O
*	O
copy	*(struct(long,long))
)	O
)	O
;	O
if	O
(	O
!	O
copy	*(struct(long,long))
)	O
return	O
ENOMEM	int
;	O
*	O
copy	*(struct(long,long))
=	O
*	O
range	*(char)
;	O
return	O
mu_list_append	(*(struct),*(void))->(int)
(	O
list	*(struct)
,	O
copy	*(struct(long,long))
)	O
;	O
}	O
int	O
mu_msgset_copy	(*(struct),*(struct))->(int)
(	O
mu_msgset_t	*(struct)
src	*(struct)
,	O
mu_msgset_t	*(struct)
dst	*(struct)
)	O
{	O
mu_list_t	*(struct)
list	*(struct)
;	O
int	O
rc	int
;	O
if	O
(	O
!	O
src	*(struct)
||	O
!	O
dst	*(struct)
)	O
return	O
EINVAL	int
;	O
rc	int
=	O
mu_list_create	(*(*(struct)))->(int)
(	O
&	O
list	*(struct)
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
rc	int
=	O
mu_list_foreach	(*(struct),*((*(void),*(void))->(int)),*(void))->(int)
(	O
src	*(struct)
->	O
list	*(struct)
,	O
copy_range	(*(void),*(void))->(int)
,	O
list	*(struct)
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
mu_list_append_list	(*(struct),*(struct))->(void)
(	O
dst	*(struct)
->	O
list	*(struct)
,	O
list	*(struct)
)	O
;	O
mu_list_destroy	(*(*(struct)))->(void)
(	O
&	O
list	*(struct)
)	O
;	O
return	O
rc	int
;	O
}	O
