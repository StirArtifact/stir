static	O
mu_stream_t	*(struct)
base64stream	(int)->(*(struct))
(	O
int	O
flg	int
)	O
{	O
mu_stream_t	*(struct)
flt	*((*(struct(int,*(char),int,int,int,*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*(void),*((*`,*`,int)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,int)->(int)))),*(void))->(int))
,	O
str	*(char)
;	O
int	O
mode	int
;	O
switch	O
(	O
flg	int
)	O
{	O
case	O
MU_STREAM_READ	int
:	O
mode	int
=	O
MU_FILTER_DECODE	int
;	O
str	*(char)
=	O
mu_strin	*(struct)
;	O
break	O
;	O
case	O
MU_STREAM_WRITE	int
:	O
mode	int
=	O
MU_FILTER_ENCODE	int
;	O
str	*(char)
=	O
mu_strout	*(struct)
;	O
break	O
;	O
default	O
:	O
abort	()->(void)
(	O
)	O
;	O
}	O
MU_ASSERT	O
(	O
mu_filter_create	(*(*(struct)),*(struct),*(char),int,int)->(int)
(	O
&	O
flt	*((*(struct(int,*(char),int,int,int,*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*(void),*((*`,*`,int)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,int)->(int)))),*(void))->(int))
,	O
str	*(char)
,	O
"base64"	*(char)
,	O
mode	int
,	O
flg	int
)	O
)	O
;	O
return	O
flt	*((*(struct(int,*(char),int,int,int,*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*(void),*((*`,*`,int)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,int)->(int)))),*(void))->(int))
;	O
}	O
int	O
main	(int,*(*(char)))->(int)
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	*(*(char))
)	O
{	O
mu_stream_t	*(struct)
flt	*((*(struct(int,*(char),int,int,int,*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*(void),*((*`,*`,int)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,int)->(int)))),*(void))->(int))
,	O
input	*(char)
,	O
output	*(char)
;	O
char	O
const	O
*	O
iargv	array(*(char))
[	O
]	O
=	O
{	O
"iconv"	*(char)
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
}	O
;	O
assert	O
(	O
argc	long
==	O
3	int
)	O
;	O
iargv	array(*(char))
[	O
1	int
]	O
=	O
argv	*(*(char))
[	O
1	int
]	O
;	O
iargv	array(*(char))
[	O
2	int
]	O
=	O
argv	*(*(char))
[	O
2	int
]	O
;	O
mu_stdstream_setup	(int)->(void)
(	O
MU_STDSTREAM_RESET_NONE	int
)	O
;	O
input	*(char)
=	O
base64stream	(int)->(*(struct))
(	O
MU_STREAM_READ	int
)	O
;	O
output	*(char)
=	O
base64stream	(int)->(*(struct))
(	O
MU_STREAM_WRITE	int
)	O
;	O
MU_ASSERT	O
(	O
mu_filter_chain_create	(*(*(struct)),*(struct),int,int,long,*(*(char)))->(int)
(	O
&	O
flt	*((*(struct(int,*(char),int,int,int,*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*(void),*((*`,*`,int)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,int)->(int)))),*(void))->(int))
,	O
input	*(char)
,	O
MU_FILTER_ENCODE	int
,	O
MU_STREAM_READ	int
,	O
MU_ARRAY_SIZE	O
(	O
iargv	array(*(char))
)	O
-	O
1	int
,	O
(	O
char	O
*	O
*	O
)	O
iargv	array(*(char))
)	O
)	O
;	O
mu_stream_unref	(*(struct))->(void)
(	O
input	*(char)
)	O
;	O
MU_ASSERT	O
(	O
mu_stream_copy	(*(struct),*(struct),long,*(long))->(int)
(	O
output	*(char)
,	O
flt	*((*(struct(int,*(char),int,int,int,*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*(void),*((*`,*`,int)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,int)->(int)))),*(void))->(int))
,	O
0	int
,	O
NULL	O
)	O
)	O
;	O
mu_stream_destroy	(*(*(struct)))->(void)
(	O
&	O
flt	*((*(struct(int,*(char),int,int,int,*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*(void),*((*`,*`,int)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,int)->(int)))),*(void))->(int))
)	O
;	O
mu_stream_destroy	(*(*(struct)))->(void)
(	O
&	O
output	*(char)
)	O
;	O
return	O
0	int
;	O
}	O
