int	O
mu_create_temp_file	(*(char),long,*(int),int)->(int)
(	O
char	O
*	O
filename	*(char)
,	O
size_t	long
suflen	long
,	O
int	O
*	O
pfd	*(int)
,	O
int	O
isdir	int
)	O
{	O
int	O
rc	int
;	O
size_t	long
len	int
;	O
char	O
*	O
carrybuf	*(char)
;	O
char	O
*	O
p	*(char)
,	O
*	O
cp	*(struct(int,int,array(char),array(char)))
,	O
*	O
start	*(char)
,	O
*	O
end	struct(*(char),int,int)
;	O
struct	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
st	*(struct(long,long,long))
;	O
static	O
int	O
first_call	int
;	O
static	O
char	O
randstate	array(char)
[	O
256	int
]	O
;	O
static	O
const	O
unsigned	O
char	O
alphabet	array(char)
[	O
]	O
=	O
"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"	*(char)
;	O
if	O
(	O
!	O
first_call	int
)	O
{	O
struct	O
timeval	struct(long,long)
tv	struct(long,long)
;	O
gettimeofday	(*(struct(long,long)),*(void))->(int)
(	O
&	O
tv	struct(long,long)
,	O
NULL	O
)	O
;	O
initstate	(int,*(char),long)->(*(char))
(	O
(	O
(	O
unsigned	O
long	O
)	O
tv	struct(long,long)
.	O
tv_usec	long
<<	O
16	int
)	O
^	O
tv	struct(long,long)
.	O
tv_sec	long
,	O
randstate	array(char)
,	O
sizeof	O
(	O
randstate	array(char)
)	O
)	O
;	O
first_call	int
=	O
1	int
;	O
}	O
setstate	(*(char))->(*(char))
(	O
randstate	array(char)
)	O
;	O
end	struct(*(char),int,int)
=	O
filename	*(char)
+	O
strlen	(*(char))->(long)
(	O
filename	*(char)
)	O
-	O
suflen	long
-	O
1	int
;	O
for	O
(	O
p	*(char)
=	O
end	struct(*(char),int,int)
;	O
p	*(char)
>=	O
filename	*(char)
&&	O
*	O
p	*(char)
==	O
'X'	O
;	O
p	*(char)
--	O
)	O
*	O
p	*(char)
=	O
alphabet	array(char)
[	O
random	()->(long)
(	O
)	O
%	O
(	O
sizeof	O
(	O
alphabet	array(char)
)	O
-	O
1	int
)	O
]	O
;	O
len	int
=	O
end	struct(*(char),int,int)
-	O
p	*(char)
;	O
if	O
(	O
len	int
==	O
0	int
)	O
return	O
EINVAL	int
;	O
start	*(char)
=	O
p	*(char)
+	O
1	int
;	O
carrybuf	*(char)
=	O
malloc	(long)->(*(void))
(	O
len	int
)	O
;	O
if	O
(	O
!	O
carrybuf	*(char)
)	O
return	O
ENOMEM	int
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
carrybuf	*(char)
,	O
start	*(char)
,	O
len	int
)	O
;	O
for	O
(	O
;	O
;	O
)	O
{	O
if	O
(	O
isdir	int
)	O
{	O
if	O
(	O
mkdir	(*(char),int)->(int)
(	O
filename	*(char)
,	O
0700	int
)	O
==	O
0	int
)	O
{	O
rc	int
=	O
0	int
;	O
break	O
;	O
}	O
}	O
else	O
if	O
(	O
pfd	*(int)
)	O
{	O
if	O
(	O
(	O
*	O
pfd	*(int)
=	O
open	(*(char),int)->(int)
(	O
filename	*(char)
,	O
O_CREAT	int
|	O
O_EXCL	int
|	O
O_RDWR	int
,	O
0600	int
)	O
)	O
>=	O
0	int
)	O
{	O
rc	int
=	O
0	int
;	O
break	O
;	O
}	O
}	O
else	O
if	O
(	O
lstat	(*(char),*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))))->(int)
(	O
filename	*(char)
,	O
&	O
st	*(struct(long,long,long))
)	O
&&	O
errno	O
==	O
ENOENT	int
)	O
{	O
rc	int
=	O
0	int
;	O
break	O
;	O
}	O
if	O
(	O
errno	O
!=	O
EEXIST	int
)	O
{	O
rc	int
=	O
errno	O
;	O
break	O
;	O
}	O
for	O
(	O
p	*(char)
=	O
start	*(char)
,	O
cp	*(struct(int,int,array(char),array(char)))
=	O
carrybuf	*(char)
;	O
;	O
p	*(char)
++	O
,	O
cp	*(struct(int,int,array(char),array(char)))
++	O
)	O
{	O
char	O
*	O
q	*(char)
;	O
if	O
(	O
p	*(char)
==	O
end	struct(*(char),int,int)
)	O
return	O
EEXIST	int
;	O
q	*(char)
=	O
strchr	(*(char),int)->(*(char))
(	O
(	O
char	O
*	O
)	O
alphabet	array(char)
,	O
*	O
p	*(char)
)	O
;	O
if	O
(	O
!	O
q	*(char)
)	O
abort	()->(void)
(	O
)	O
;	O
*	O
p	*(char)
=	O
(	O
q	*(char)
[	O
1	int
]	O
==	O
0	int
)	O
?	O
alphabet	array(char)
[	O
0	int
]	O
:	O
q	*(char)
[	O
1	int
]	O
;	O
if	O
(	O
*	O
p	*(char)
!=	O
*	O
cp	*(struct(int,int,array(char),array(char)))
)	O
break	O
;	O
}	O
}	O
free	(*(void))->(void)
(	O
carrybuf	*(char)
)	O
;	O
return	O
rc	int
;	O
}	O
int	O
mu_tempfile	(*(struct(*(char),*(char))),int,*(int),*(*(char)))->(int)
(	O
struct	O
mu_tempfile_hints	struct(*(char),*(char))
*	O
hints	*(struct(*(char),*(char)))
,	O
int	O
flags	int
,	O
int	O
*	O
pfd	*(int)
,	O
char	O
*	O
*	O
namep	*(*(char))
)	O
{	O
char	O
*	O
filename	*(char)
;	O
const	O
char	O
*	O
tmpdir	*(char)
=	O
getenv	(*(char))->(*(char))
(	O
"TMPDIR"	*(char)
)	O
;	O
const	O
char	O
*	O
suf	*(char)
=	O
NULL	O
;	O
int	O
create_dir	int
=	O
0	int
;	O
int	O
rc	int
;	O
struct	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
st	*(struct(long,long,long))
;	O
if	O
(	O
pfd	*(int)
==	O
NULL	O
&&	O
namep	*(*(char))
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
if	O
(	O
hints	*(struct(*(char),*(char)))
)	O
{	O
if	O
(	O
flags	int
&	O
MU_TEMPFILE_TMPDIR	int
)	O
tmpdir	*(char)
=	O
hints	*(struct(*(char),*(char)))
->	O
tmpdir	*(char)
;	O
if	O
(	O
flags	int
&	O
MU_TEMPFILE_SUFFIX	int
)	O
suf	*(char)
=	O
hints	*(struct(*(char),*(char)))
->	O
suffix	*(char)
;	O
create_dir	int
=	O
flags	int
&	O
MU_TEMPFILE_MKDIR	int
;	O
}	O
if	O
(	O
!	O
tmpdir	*(char)
)	O
tmpdir	*(char)
=	O
P_tmpdir	*(char)
;	O
if	O
(	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
(	O
tmpdir	*(char)
,	O
&	O
st	*(struct(long,long,long))
)	O
)	O
return	O
errno	O
;	O
filename	*(char)
=	O
mu_make_file_name_suf	(*(char),*(char),*(char))->(*(char))
(	O
tmpdir	*(char)
,	O
"muXXXXXX"	*(char)
,	O
suf	*(char)
)	O
;	O
rc	int
=	O
mu_create_temp_file	(*(char),long,*(int),int)->(int)
(	O
filename	*(char)
,	O
suf	*(char)
?	O
strlen	(*(char))->(long)
(	O
suf	*(char)
)	O
:	O
0	int
,	O
pfd	*(int)
,	O
create_dir	int
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
if	O
(	O
namep	*(*(char))
)	O
*	O
namep	*(*(char))
=	O
filename	*(char)
;	O
else	O
{	O
unlink	(*(char))->(int)
(	O
filename	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
filename	*(char)
)	O
;	O
}	O
}	O
return	O
rc	int
;	O
}	O
char	O
*	O
mu_tempname	(*(char))->(*(char))
(	O
const	O
char	O
*	O
tmpdir	*(char)
)	O
{	O
struct	O
mu_tempfile_hints	struct(*(char),*(char))
hints	*(struct(*(char),*(char)))
;	O
char	O
*	O
filename	*(char)
=	O
NULL	O
;	O
int	O
fd	int
;	O
hints	*(struct(*(char),*(char)))
.	O
tmpdir	*(char)
=	O
(	O
char	O
*	O
)	O
tmpdir	*(char)
;	O
if	O
(	O
mu_tempfile	(*(struct(*(char),*(char))),int,*(int),*(*(char)))->(int)
(	O
&	O
hints	*(struct(*(char),*(char)))
,	O
MU_TEMPFILE_TMPDIR	int
,	O
&	O
fd	int
,	O
&	O
filename	*(char)
)	O
)	O
return	O
NULL	O
;	O
close	(int)->(int)
(	O
fd	int
)	O
;	O
return	O
filename	*(char)
;	O
}	O
