void	O
trimnl	(*(char),long)->(void)
(	O
char	O
*	O
buf	*(void)
,	O
size_t	long
len	int
)	O
{	O
if	O
(	O
len	int
>	O
1	int
&&	O
buf	*(void)
[	O
--	O
len	int
]	O
==	O
'\n'	O
)	O
{	O
buf	*(void)
[	O
len	int
]	O
=	O
0	int
;	O
if	O
(	O
len	int
>	O
1	int
&&	O
buf	*(void)
[	O
--	O
len	int
]	O
==	O
'\r'	O
)	O
buf	*(void)
[	O
len	int
]	O
=	O
0	int
;	O
}	O
}	O
char	O
*	O
make_full_file_name	(*(char),*(char))->(*(char))
(	O
const	O
char	O
*	O
dir	*(char)
,	O
const	O
char	O
*	O
file	*(char)
)	O
{	O
char	O
*	O
s	*(char)
=	O
dico_full_file_name	(*(char),*(char))->(*(char))
(	O
dir	*(char)
,	O
file	*(char)
)	O
;	O
if	O
(	O
!	O
s	*(char)
)	O
xalloc_die	()->(void)
(	O
)	O
;	O
return	O
s	*(char)
;	O
}	O
dico_list_t	*(struct)
xdico_list_create	()->(*(struct))
(	O
void	O
)	O
{	O
dico_list_t	*(struct)
p	*(char)
=	O
dico_list_create	()->(*(struct))
(	O
)	O
;	O
if	O
(	O
!	O
p	*(char)
)	O
xalloc_die	()->(void)
(	O
)	O
;	O
return	O
p	*(char)
;	O
}	O
dico_iterator_t	*(struct)
xdico_list_iterator	(*(struct))->(*(struct))
(	O
dico_list_t	*(struct)
list	array(*(struct))
)	O
{	O
dico_iterator_t	*(struct)
p	*(char)
=	O
dico_list_iterator	(*(struct))->(*(struct))
(	O
list	array(*(struct))
)	O
;	O
if	O
(	O
!	O
p	*(char)
&&	O
errno	O
==	O
ENOMEM	int
)	O
xalloc_die	()->(void)
(	O
)	O
;	O
return	O
p	*(char)
;	O
}	O
void	O
xdico_list_append	(*(struct),*(void))->(void)
(	O
struct	O
dico_list	O
*	O
list	array(*(struct))
,	O
void	O
*	O
data	*(void)
)	O
{	O
if	O
(	O
dico_list_append	(*(struct),*(void))->(int)
(	O
list	array(*(struct))
,	O
data	*(void)
)	O
&&	O
errno	O
==	O
ENOMEM	int
)	O
xalloc_die	()->(void)
(	O
)	O
;	O
}	O
void	O
xdico_list_prepend	(*(struct),*(void))->(void)
(	O
struct	O
dico_list	O
*	O
list	array(*(struct))
,	O
void	O
*	O
data	*(void)
)	O
{	O
if	O
(	O
dico_list_prepend	(*(struct),*(void))->(int)
(	O
list	array(*(struct))
,	O
data	*(void)
)	O
&&	O
errno	O
==	O
ENOMEM	int
)	O
xalloc_die	()->(void)
(	O
)	O
;	O
}	O
dico_assoc_list_t	*(struct)
xdico_assoc_create	(int)->(*(struct))
(	O
int	O
flags	int
)	O
{	O
dico_assoc_list_t	*(struct)
p	*(char)
=	O
dico_assoc_create	(int)->(*(struct))
(	O
flags	int
)	O
;	O
if	O
(	O
!	O
p	*(char)
)	O
xalloc_die	()->(void)
(	O
)	O
;	O
return	O
p	*(char)
;	O
}	O
void	O
xdico_assoc_append	(*(struct),*(char),*(char))->(void)
(	O
dico_assoc_list_t	*(struct)
assoc	*(struct)
,	O
const	O
char	O
*	O
key	*(char)
,	O
const	O
char	O
*	O
value	*(char)
)	O
{	O
if	O
(	O
dico_assoc_append	(*(struct),*(char),*(char))->(int)
(	O
assoc	*(struct)
,	O
key	*(char)
,	O
value	*(char)
)	O
&&	O
errno	O
==	O
ENOMEM	int
)	O
xalloc_die	()->(void)
(	O
)	O
;	O
}	O
int	O
xdico_assoc_add	(*(struct),*(char),*(char),long,int)->(int)
(	O
dico_assoc_list_t	*(struct)
assoc	*(struct)
,	O
const	O
char	O
*	O
key	*(char)
,	O
const	O
char	O
*	O
value	*(char)
,	O
size_t	long
count	long
,	O
int	O
replace	int
)	O
{	O
int	O
rc	int
=	O
dico_assoc_add	(*(struct),*(char),*(char),long,int)->(int)
(	O
assoc	*(struct)
,	O
key	*(char)
,	O
value	*(char)
,	O
count	long
,	O
replace	int
)	O
;	O
if	O
(	O
rc	int
&&	O
errno	O
==	O
ENOMEM	int
)	O
xalloc_die	()->(void)
(	O
)	O
;	O
return	O
rc	int
;	O
}	O
char	O
*	O
xdico_assign_string	(*(*(char)),*(char))->(*(char))
(	O
char	O
*	O
*	O
dest	*(*(char))
,	O
char	O
*	O
str	*(struct)
)	O
{	O
if	O
(	O
*	O
dest	*(*(char))
)	O
free	(*(void))->(void)
(	O
*	O
dest	*(*(char))
)	O
;	O
return	O
*	O
dest	*(*(char))
=	O
str	*(struct)
?	O
xstrdup	(*(char))->(*(char))
(	O
str	*(struct)
)	O
:	O
NULL	O
;	O
}	O
static	O
char	O
*	O
mech_to_capa_table	array(array(*(char)))
[	O
]	O
[	O
2	int
]	O
=	O
{	O
{	O
"EXTERNAL"	*(char)
,	O
"external"	*(char)
}	O
,	O
{	O
"SKEY"	*(char)
,	O
"skey"	*(char)
}	O
,	O
{	O
"GSSAPI"	*(char)
,	O
"gssapi"	*(char)
}	O
,	O
{	O
"KERBEROS_V4"	*(char)
,	O
"kerberos_v4"	*(char)
}	O
}	O
;	O
char	O
*	O
xdico_sasl_mech_to_capa	(*(char))->(*(char))
(	O
char	O
*	O
mech	*(char)
)	O
{	O
int	O
i	int
;	O
size_t	long
len	int
;	O
char	O
*	O
rets	*(char)
,	O
*	O
p	*(char)
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
DICO_ARRAY_SIZE	O
(	O
mech_to_capa_table	array(array(*(char)))
)	O
;	O
i	int
++	O
)	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
mech_to_capa_table	array(array(*(char)))
[	O
i	int
]	O
[	O
0	int
]	O
,	O
mech	*(char)
)	O
==	O
0	int
)	O
return	O
xstrdup	(*(char))->(*(char))
(	O
mech_to_capa_table	array(array(*(char)))
[	O
i	int
]	O
[	O
1	int
]	O
)	O
;	O
len	int
=	O
strlen	(*(char))->(long)
(	O
mech	*(char)
)	O
+	O
1	int
;	O
rets	*(char)
=	O
p	*(char)
=	O
xmalloc	(long)->(*(void))
(	O
len	int
+	O
1	int
)	O
;	O
*	O
p	*(char)
++	O
=	O
'x'	O
;	O
for	O
(	O
;	O
*	O
mech	*(char)
;	O
mech	*(char)
++	O
)	O
*	O
p	*(char)
++	O
=	O
tolower	(int)->(int)
(	O
*	O
mech	*(char)
)	O
;	O
*	O
p	*(char)
=	O
0	int
;	O
return	O
rets	*(char)
;	O
}	O
int	O
xdico_sasl_capa_match_p	(*(char),*(char))->(int)
(	O
const	O
char	O
*	O
mech	*(char)
,	O
const	O
char	O
*	O
capa	*(char)
)	O
{	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
DICO_ARRAY_SIZE	O
(	O
mech_to_capa_table	array(array(*(char)))
)	O
;	O
i	int
++	O
)	O
if	O
(	O
c_strcasecmp	(*(char),*(char))->(int)
(	O
mech_to_capa_table	array(array(*(char)))
[	O
i	int
]	O
[	O
0	int
]	O
,	O
mech	*(char)
)	O
==	O
0	int
)	O
return	O
c_strcasecmp	(*(char),*(char))->(int)
(	O
mech_to_capa_table	array(array(*(char)))
[	O
i	int
]	O
[	O
1	int
]	O
,	O
capa	*(char)
)	O
==	O
0	int
;	O
if	O
(	O
*	O
capa	*(char)
==	O
'x'	O
)	O
return	O
c_strcasecmp	(*(char),*(char))->(int)
(	O
mech	*(char)
,	O
capa	*(char)
+	O
1	int
)	O
==	O
0	int
;	O
return	O
0	int
;	O
}	O
int	O
dicod_free_item	(*(void),*(void))->(int)
(	O
void	O
*	O
item	*(void)
,	O
void	O
*	O
data	*(void)
DICO_ARG_UNUSED	O
)	O
{	O
free	(*(void))->(void)
(	O
item	*(void)
)	O
;	O
return	O
0	int
;	O
}	O
