static	O
char	O
rcsid	array(char)
[	O
]	O
=	O
"$Id: rpc_parse.c,v 1.1.1.1 2005/10/28 14:46:46 k0ro Exp $"	*(char)
;	O
static	O
void	O
isdefined	()->(void)
(	O
)	O
;	O
static	O
void	O
def_struct	()->(void)
(	O
)	O
,	O
def_program	()->(void)
(	O
)	O
,	O
def_enum	()->(void)
(	O
)	O
,	O
def_const	()->(void)
(	O
)	O
,	O
def_union	()->(void)
(	O
)	O
,	O
def_typedef	()->(void)
(	O
)	O
,	O
get_declaration	()->(void)
(	O
)	O
,	O
get_type	()->(void)
(	O
)	O
,	O
unsigned_dec	()->(void)
(	O
)	O
;	O
definition	struct(*(char),enum(int,int,int,int,int,int),union(*(char),struct(*(struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),int,array(char)),struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(*(char),struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),*(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)))),struct(*(struct(*(char),*(char),*(struct`)))),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct(*(char),*(char),*(struct`),*(struct`))))))
*	O
get_definition	()->(*(struct(*(char),enum(int,int,int,int,int,int),union(*(char),struct(*`,int,array(char)),struct(struct`,*`,*`),struct(*`),struct(*`,*`,int,array(char),enum(int,int,int,int,int),*`),struct(*`,*`)))))
(	O
)	O
{	O
definition	struct(*(char),enum(int,int,int,int,int,int),union(*(char),struct(*(struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),int,array(char)),struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(*(char),struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),*(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)))),struct(*(struct(*(char),*(char),*(struct`)))),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct(*(char),*(char),*(struct`),*(struct`))))))
*	O
defp	*(struct(*(char),enum(int,int,int,int,int,int),union(*(char),struct(*(struct`),int,array(char)),struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`),*(struct`)),struct(*(struct`)),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct`)))))
;	O
token	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char))
tok	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char))
;	O
defp	*(struct(*(char),enum(int,int,int,int,int,int),union(*(char),struct(*(struct`),int,array(char)),struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`),*(struct`)),struct(*(struct`)),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct`)))))
=	O
ALLOC	O
(	O
definition	struct(*(char),enum(int,int,int,int,int,int),union(*(char),struct(*(struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),int,array(char)),struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(*(char),struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),*(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)))),struct(*(struct(*(char),*(char),*(struct`)))),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct(*(char),*(char),*(struct`),*(struct`))))))
)	O
;	O
get_token	()->(void)
(	O
&	O
tok	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char))
)	O
;	O
switch	O
(	O
tok	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char))
.	O
kind	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
)	O
{	O
case	O
TOK_STRUCT	int
:	O
def_struct	()->(void)
(	O
defp	*(struct(*(char),enum(int,int,int,int,int,int),union(*(char),struct(*(struct`),int,array(char)),struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`),*(struct`)),struct(*(struct`)),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct`)))))
)	O
;	O
break	O
;	O
case	O
TOK_UNION	int
:	O
def_union	()->(void)
(	O
defp	*(struct(*(char),enum(int,int,int,int,int,int),union(*(char),struct(*(struct`),int,array(char)),struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`),*(struct`)),struct(*(struct`)),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct`)))))
)	O
;	O
break	O
;	O
case	O
TOK_TYPEDEF	int
:	O
def_typedef	()->(void)
(	O
defp	*(struct(*(char),enum(int,int,int,int,int,int),union(*(char),struct(*(struct`),int,array(char)),struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`),*(struct`)),struct(*(struct`)),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct`)))))
)	O
;	O
break	O
;	O
case	O
TOK_ENUM	int
:	O
def_enum	()->(void)
(	O
defp	*(struct(*(char),enum(int,int,int,int,int,int),union(*(char),struct(*(struct`),int,array(char)),struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`),*(struct`)),struct(*(struct`)),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct`)))))
)	O
;	O
break	O
;	O
case	O
TOK_PROGRAM	int
:	O
def_program	()->(void)
(	O
defp	*(struct(*(char),enum(int,int,int,int,int,int),union(*(char),struct(*(struct`),int,array(char)),struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`),*(struct`)),struct(*(struct`)),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct`)))))
)	O
;	O
break	O
;	O
case	O
TOK_CONST	int
:	O
def_const	()->(void)
(	O
defp	*(struct(*(char),enum(int,int,int,int,int,int),union(*(char),struct(*(struct`),int,array(char)),struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`),*(struct`)),struct(*(struct`)),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct`)))))
)	O
;	O
break	O
;	O
case	O
TOK_EOF	int
:	O
return	O
(	O
NULL	O
)	O
;	O
break	O
;	O
default	O
:	O
error	()->(void)
(	O
"definition keyword expected"	*(char)
)	O
;	O
}	O
scan	()->(void)
(	O
TOK_SEMICOLON	int
,	O
&	O
tok	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char))
)	O
;	O
isdefined	()->(void)
(	O
defp	*(struct(*(char),enum(int,int,int,int,int,int),union(*(char),struct(*(struct`),int,array(char)),struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`),*(struct`)),struct(*(struct`)),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct`)))))
)	O
;	O
return	O
(	O
defp	*(struct(*(char),enum(int,int,int,int,int,int),union(*(char),struct(*(struct`),int,array(char)),struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`),*(struct`)),struct(*(struct`)),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct`)))))
)	O
;	O
}	O
static	O
void	O
isdefined	()->(void)
(	O
defp	*(struct(*(char),enum(int,int,int,int,int,int),union(*(char),struct(*(struct`),int,array(char)),struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`),*(struct`)),struct(*(struct`)),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct`)))))
)	O
definition	struct(*(char),enum(int,int,int,int,int,int),union(*(char),struct(*(struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),int,array(char)),struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(*(char),struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),*(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)))),struct(*(struct(*(char),*(char),*(struct`)))),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct(*(char),*(char),*(struct`),*(struct`))))))
*	O
defp	*(struct(*(char),enum(int,int,int,int,int,int),union(*(char),struct(*(struct`),int,array(char)),struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`),*(struct`)),struct(*(struct`)),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct`)))))
;	O
{	O
STOREVAL	O
(	O
&	O
defined	*(struct(*(char),*(struct(*(char),*(struct`)))))
,	O
defp	*(struct(*(char),enum(int,int,int,int,int,int),union(*(char),struct(*(struct`),int,array(char)),struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`),*(struct`)),struct(*(struct`)),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct`)))))
)	O
;	O
}	O
static	O
void	O
def_struct	()->(void)
(	O
defp	*(struct(*(char),enum(int,int,int,int,int,int),union(*(char),struct(*(struct`),int,array(char)),struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`),*(struct`)),struct(*(struct`)),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct`)))))
)	O
definition	struct(*(char),enum(int,int,int,int,int,int),union(*(char),struct(*(struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),int,array(char)),struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(*(char),struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),*(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)))),struct(*(struct(*(char),*(char),*(struct`)))),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct(*(char),*(char),*(struct`),*(struct`))))))
*	O
defp	*(struct(*(char),enum(int,int,int,int,int,int),union(*(char),struct(*(struct`),int,array(char)),struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`),*(struct`)),struct(*(struct`)),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct`)))))
;	O
{	O
token	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char))
tok	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char))
;	O
declaration	struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char))
dec	struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char))
;	O
decl_list	struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))))))
*	O
decls	*(struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`)))))
;	O
decl_list	struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))))))
*	O
*	O
tailp	*(*(struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(struct`,*`)))))
;	O
defp	*(struct(*(char),enum(int,int,int,int,int,int),union(*(char),struct(*(struct`),int,array(char)),struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`),*(struct`)),struct(*(struct`)),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct`)))))
->	O
def_kind	enum(int,int,int,int,int,int)
=	O
DEF_STRUCT	int
;	O
scan	()->(void)
(	O
TOK_IDENT	int
,	O
&	O
tok	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char))
)	O
;	O
defp	*(struct(*(char),enum(int,int,int,int,int,int),union(*(char),struct(*(struct`),int,array(char)),struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`),*(struct`)),struct(*(struct`)),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct`)))))
->	O
def_name	*(char)
=	O
tok	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char))
.	O
str	*(char)
;	O
scan	()->(void)
(	O
TOK_LBRACE	int
,	O
&	O
tok	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char))
)	O
;	O
tailp	*(*(struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(struct`,*`)))))
=	O
&	O
defp	*(struct(*(char),enum(int,int,int,int,int,int),union(*(char),struct(*(struct`),int,array(char)),struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`),*(struct`)),struct(*(struct`)),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct`)))))
->	O
def	union(*(char),struct(*(struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),int,array(char)),struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(*(char),struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),*(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)))),struct(*(struct(*(char),*(char),*(struct`)))),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct(*(char),*(char),*(struct`),*(struct`)))))
.	O
st	struct(*(struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(struct`,*`)))),int,array(char))
.	O
decls	*(struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`)))))
;	O
do	O
{	O
get_declaration	()->(void)
(	O
&	O
dec	struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char))
,	O
DEF_STRUCT	int
)	O
;	O
decls	*(struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`)))))
=	O
ALLOC	O
(	O
decl_list	struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))))))
)	O
;	O
decls	*(struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`)))))
->	O
decl	struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char))
=	O
dec	struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char))
;	O
*	O
tailp	*(*(struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(struct`,*`)))))
=	O
decls	*(struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`)))))
;	O
tailp	*(*(struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(struct`,*`)))))
=	O
&	O
decls	*(struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`)))))
->	O
next	*(struct(*(char),*(struct(*(char),*(struct`)))))
;	O
scan	()->(void)
(	O
TOK_SEMICOLON	int
,	O
&	O
tok	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char))
)	O
;	O
peek	()->(void)
(	O
&	O
tok	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char))
)	O
;	O
}	O
while	O
(	O
tok	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char))
.	O
kind	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
!=	O
TOK_RBRACE	int
)	O
;	O
get_token	()->(void)
(	O
&	O
tok	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char))
)	O
;	O
*	O
tailp	*(*(struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(struct`,*`)))))
=	O
NULL	O
;	O
}	O
static	O
void	O
def_program	()->(void)
(	O
defp	*(struct(*(char),enum(int,int,int,int,int,int),union(*(char),struct(*(struct`),int,array(char)),struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`),*(struct`)),struct(*(struct`)),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct`)))))
)	O
definition	struct(*(char),enum(int,int,int,int,int,int),union(*(char),struct(*(struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),int,array(char)),struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(*(char),struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),*(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)))),struct(*(struct(*(char),*(char),*(struct`)))),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct(*(char),*(char),*(struct`),*(struct`))))))
*	O
defp	*(struct(*(char),enum(int,int,int,int,int,int),union(*(char),struct(*(struct`),int,array(char)),struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`),*(struct`)),struct(*(struct`)),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct`)))))
;	O
{	O
token	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char))
tok	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char))
;	O
version_list	struct(*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))))),*(struct(*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(struct`),*(struct`))))))
*	O
vlist	*(struct(*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(struct`),*(struct`)))))
;	O
version_list	struct(*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))))),*(struct(*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(struct`),*(struct`))))))
*	O
*	O
vtailp	*(*(struct(*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))))
;	O
proc_list	struct(*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))))))
*	O
plist	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
;	O
proc_list	struct(*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))))))
*	O
*	O
ptailp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`)))))
;	O
int	O
dummy	int
;	O
defp	*(struct(*(char),enum(int,int,int,int,int,int),union(*(char),struct(*(struct`),int,array(char)),struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`),*(struct`)),struct(*(struct`)),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct`)))))
->	O
def_kind	enum(int,int,int,int,int,int)
=	O
DEF_PROGRAM	int
;	O
scan	()->(void)
(	O
TOK_IDENT	int
,	O
&	O
tok	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char))
)	O
;	O
defp	*(struct(*(char),enum(int,int,int,int,int,int),union(*(char),struct(*(struct`),int,array(char)),struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`),*(struct`)),struct(*(struct`)),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct`)))))
->	O
def_name	*(char)
=	O
tok	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char))
.	O
str	*(char)
;	O
scan	()->(void)
(	O
TOK_LBRACE	int
,	O
&	O
tok	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char))
)	O
;	O
vtailp	*(*(struct(*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))))
=	O
&	O
defp	*(struct(*(char),enum(int,int,int,int,int,int),union(*(char),struct(*(struct`),int,array(char)),struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`),*(struct`)),struct(*(struct`)),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct`)))))
->	O
def	union(*(char),struct(*(struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),int,array(char)),struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(*(char),struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),*(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)))),struct(*(struct(*(char),*(char),*(struct`)))),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct(*(char),*(char),*(struct`),*(struct`)))))
.	O
pr	struct(*(char),*(struct(*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))))
.	O
versions	*(struct(*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(struct`),*(struct`)))))
;	O
scan	()->(void)
(	O
TOK_VERSION	int
,	O
&	O
tok	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char))
)	O
;	O
do	O
{	O
scan	()->(void)
(	O
TOK_IDENT	int
,	O
&	O
tok	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char))
)	O
;	O
vlist	*(struct(*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(struct`),*(struct`)))))
=	O
ALLOC	O
(	O
version_list	struct(*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))))),*(struct(*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(struct`),*(struct`))))))
)	O
;	O
vlist	*(struct(*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(struct`),*(struct`)))))
->	O
vers_name	*(char)
=	O
tok	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char))
.	O
str	*(char)
;	O
scan	()->(void)
(	O
TOK_LBRACE	int
,	O
&	O
tok	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char))
)	O
;	O
ptailp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`)))))
=	O
&	O
vlist	*(struct(*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(struct`),*(struct`)))))
->	O
procs	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
;	O
do	O
{	O
plist	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
=	O
ALLOC	O
(	O
proc_list	struct(*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))))))
)	O
;	O
get_type	()->(void)
(	O
&	O
plist	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
->	O
res_prefix	*(char)
,	O
&	O
plist	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
->	O
res_type	*(char)
,	O
&	O
dummy	int
,	O
DEF_PROGRAM	int
)	O
;	O
if	O
(	O
streq	()->(int)
(	O
plist	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
->	O
res_type	*(char)
,	O
"opaque"	*(char)
)	O
)	O
{	O
error	()->(void)
(	O
"illegal result type"	*(char)
)	O
;	O
}	O
scan	()->(void)
(	O
TOK_IDENT	int
,	O
&	O
tok	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char))
)	O
;	O
plist	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
->	O
proc_name	*(char)
=	O
tok	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char))
.	O
str	*(char)
;	O
scan	()->(void)
(	O
TOK_LPAREN	int
,	O
&	O
tok	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char))
)	O
;	O
get_type	()->(void)
(	O
&	O
plist	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
->	O
arg_prefix	*(char)
,	O
&	O
plist	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
->	O
arg_type	*(char)
,	O
&	O
dummy	int
,	O
DEF_PROGRAM	int
)	O
;	O
if	O
(	O
streq	()->(int)
(	O
plist	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
->	O
arg_type	*(char)
,	O
"opaque"	*(char)
)	O
)	O
{	O
error	()->(void)
(	O
"illegal argument type"	*(char)
)	O
;	O
}	O
scan	()->(void)
(	O
TOK_RPAREN	int
,	O
&	O
tok	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char))
)	O
;	O
scan	()->(void)
(	O
TOK_EQUAL	int
,	O
&	O
tok	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char))
)	O
;	O
scan_num	()->(void)
(	O
&	O
tok	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char))
)	O
;	O
scan	()->(void)
(	O
TOK_SEMICOLON	int
,	O
&	O
tok	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char))
)	O
;	O
plist	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
->	O
proc_num	*(char)
=	O
tok	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char))
.	O
str	*(char)
;	O
*	O
ptailp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`)))))
=	O
plist	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
;	O
ptailp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`)))))
=	O
&	O
plist	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
->	O
next	*(struct(*(char),*(struct(*(char),*(struct`)))))
;	O
peek	()->(void)
(	O
&	O
tok	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char))
)	O
;	O
}	O
while	O
(	O
tok	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char))
.	O
kind	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
!=	O
TOK_RBRACE	int
)	O
;	O
*	O
vtailp	*(*(struct(*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))))
=	O
vlist	*(struct(*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(struct`),*(struct`)))))
;	O
vtailp	*(*(struct(*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))))
=	O
&	O
vlist	*(struct(*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(struct`),*(struct`)))))
->	O
next	*(struct(*(char),*(struct(*(char),*(struct`)))))
;	O
scan	()->(void)
(	O
TOK_RBRACE	int
,	O
&	O
tok	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char))
)	O
;	O
scan	()->(void)
(	O
TOK_EQUAL	int
,	O
&	O
tok	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char))
)	O
;	O
scan_num	()->(void)
(	O
&	O
tok	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char))
)	O
;	O
vlist	*(struct(*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(struct`),*(struct`)))))
->	O
vers_num	*(char)
=	O
tok	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char))
.	O
str	*(char)
;	O
scan	()->(void)
(	O
TOK_SEMICOLON	int
,	O
&	O
tok	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char))
)	O
;	O
scan2	()->(void)
(	O
TOK_VERSION	int
,	O
TOK_RBRACE	int
,	O
&	O
tok	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char))
)	O
;	O
}	O
while	O
(	O
tok	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char))
.	O
kind	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
==	O
TOK_VERSION	int
)	O
;	O
scan	()->(void)
(	O
TOK_EQUAL	int
,	O
&	O
tok	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char))
)	O
;	O
scan_num	()->(void)
(	O
&	O
tok	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char))
)	O
;	O
defp	*(struct(*(char),enum(int,int,int,int,int,int),union(*(char),struct(*(struct`),int,array(char)),struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`),*(struct`)),struct(*(struct`)),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct`)))))
->	O
def	union(*(char),struct(*(struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),int,array(char)),struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(*(char),struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),*(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)))),struct(*(struct(*(char),*(char),*(struct`)))),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct(*(char),*(char),*(struct`),*(struct`)))))
.	O
pr	struct(*(char),*(struct(*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))))
.	O
prog_num	*(char)
=	O
tok	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char))
.	O
str	*(char)
;	O
*	O
vtailp	*(*(struct(*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))))
=	O
NULL	O
;	O
}	O
static	O
void	O
def_enum	()->(void)
(	O
defp	*(struct(*(char),enum(int,int,int,int,int,int),union(*(char),struct(*(struct`),int,array(char)),struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`),*(struct`)),struct(*(struct`)),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct`)))))
)	O
definition	struct(*(char),enum(int,int,int,int,int,int),union(*(char),struct(*(struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),int,array(char)),struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(*(char),struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),*(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)))),struct(*(struct(*(char),*(char),*(struct`)))),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct(*(char),*(char),*(struct`),*(struct`))))))
*	O
defp	*(struct(*(char),enum(int,int,int,int,int,int),union(*(char),struct(*(struct`),int,array(char)),struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`),*(struct`)),struct(*(struct`)),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct`)))))
;	O
{	O
token	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char))
tok	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char))
;	O
enumval_list	struct(*(char),*(char),*(struct(*(char),*(char),*(struct(*(char),*(char),*(struct`))))))
*	O
elist	*(struct(*(char),*(char),*(struct(*(char),*(char),*(struct`)))))
;	O
enumval_list	struct(*(char),*(char),*(struct(*(char),*(char),*(struct(*(char),*(char),*(struct`))))))
*	O
*	O
tailp	*(*(struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(struct`,*`)))))
;	O
defp	*(struct(*(char),enum(int,int,int,int,int,int),union(*(char),struct(*(struct`),int,array(char)),struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`),*(struct`)),struct(*(struct`)),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct`)))))
->	O
def_kind	enum(int,int,int,int,int,int)
=	O
DEF_ENUM	int
;	O
scan	()->(void)
(	O
TOK_IDENT	int
,	O
&	O
tok	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char))
)	O
;	O
defp	*(struct(*(char),enum(int,int,int,int,int,int),union(*(char),struct(*(struct`),int,array(char)),struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`),*(struct`)),struct(*(struct`)),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct`)))))
->	O
def_name	*(char)
=	O
tok	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char))
.	O
str	*(char)
;	O
scan	()->(void)
(	O
TOK_LBRACE	int
,	O
&	O
tok	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char))
)	O
;	O
tailp	*(*(struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(struct`,*`)))))
=	O
&	O
defp	*(struct(*(char),enum(int,int,int,int,int,int),union(*(char),struct(*(struct`),int,array(char)),struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`),*(struct`)),struct(*(struct`)),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct`)))))
->	O
def	union(*(char),struct(*(struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),int,array(char)),struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(*(char),struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),*(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)))),struct(*(struct(*(char),*(char),*(struct`)))),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct(*(char),*(char),*(struct`),*(struct`)))))
.	O
en	struct(*(struct(*(char),*(char),*(struct(*`,*`,*`)))))
.	O
vals	*(struct(*(char),*(char),*(struct(*(char),*(char),*(struct`)))))
;	O
do	O
{	O
scan	()->(void)
(	O
TOK_IDENT	int
,	O
&	O
tok	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char))
)	O
;	O
elist	*(struct(*(char),*(char),*(struct(*(char),*(char),*(struct`)))))
=	O
ALLOC	O
(	O
enumval_list	struct(*(char),*(char),*(struct(*(char),*(char),*(struct(*(char),*(char),*(struct`))))))
)	O
;	O
elist	*(struct(*(char),*(char),*(struct(*(char),*(char),*(struct`)))))
->	O
name	*(char)
=	O
tok	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char))
.	O
str	*(char)
;	O
elist	*(struct(*(char),*(char),*(struct(*(char),*(char),*(struct`)))))
->	O
assignment	*(char)
=	O
NULL	O
;	O
scan3	()->(void)
(	O
TOK_COMMA	int
,	O
TOK_RBRACE	int
,	O
TOK_EQUAL	int
,	O
&	O
tok	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char))
)	O
;	O
if	O
(	O
tok	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char))
.	O
kind	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
==	O
TOK_EQUAL	int
)	O
{	O
scan_num	()->(void)
(	O
&	O
tok	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char))
)	O
;	O
elist	*(struct(*(char),*(char),*(struct(*(char),*(char),*(struct`)))))
->	O
assignment	*(char)
=	O
tok	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char))
.	O
str	*(char)
;	O
scan2	()->(void)
(	O
TOK_COMMA	int
,	O
TOK_RBRACE	int
,	O
&	O
tok	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char))
)	O
;	O
}	O
*	O
tailp	*(*(struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(struct`,*`)))))
=	O
elist	*(struct(*(char),*(char),*(struct(*(char),*(char),*(struct`)))))
;	O
tailp	*(*(struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(struct`,*`)))))
=	O
&	O
elist	*(struct(*(char),*(char),*(struct(*(char),*(char),*(struct`)))))
->	O
next	*(struct(*(char),*(struct(*(char),*(struct`)))))
;	O
}	O
while	O
(	O
tok	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char))
.	O
kind	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
!=	O
TOK_RBRACE	int
)	O
;	O
*	O
tailp	*(*(struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(struct`,*`)))))
=	O
NULL	O
;	O
}	O
static	O
void	O
def_const	()->(void)
(	O
defp	*(struct(*(char),enum(int,int,int,int,int,int),union(*(char),struct(*(struct`),int,array(char)),struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`),*(struct`)),struct(*(struct`)),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct`)))))
)	O
definition	struct(*(char),enum(int,int,int,int,int,int),union(*(char),struct(*(struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),int,array(char)),struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(*(char),struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),*(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)))),struct(*(struct(*(char),*(char),*(struct`)))),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct(*(char),*(char),*(struct`),*(struct`))))))
*	O
defp	*(struct(*(char),enum(int,int,int,int,int,int),union(*(char),struct(*(struct`),int,array(char)),struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`),*(struct`)),struct(*(struct`)),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct`)))))
;	O
{	O
token	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char))
tok	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char))
;	O
defp	*(struct(*(char),enum(int,int,int,int,int,int),union(*(char),struct(*(struct`),int,array(char)),struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`),*(struct`)),struct(*(struct`)),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct`)))))
->	O
def_kind	enum(int,int,int,int,int,int)
=	O
DEF_CONST	int
;	O
scan	()->(void)
(	O
TOK_IDENT	int
,	O
&	O
tok	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char))
)	O
;	O
defp	*(struct(*(char),enum(int,int,int,int,int,int),union(*(char),struct(*(struct`),int,array(char)),struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`),*(struct`)),struct(*(struct`)),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct`)))))
->	O
def_name	*(char)
=	O
tok	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char))
.	O
str	*(char)
;	O
scan	()->(void)
(	O
TOK_EQUAL	int
,	O
&	O
tok	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char))
)	O
;	O
scan2	()->(void)
(	O
TOK_IDENT	int
,	O
TOK_STRCONST	int
,	O
&	O
tok	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char))
)	O
;	O
defp	*(struct(*(char),enum(int,int,int,int,int,int),union(*(char),struct(*(struct`),int,array(char)),struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`),*(struct`)),struct(*(struct`)),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct`)))))
->	O
def	union(*(char),struct(*(struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),int,array(char)),struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(*(char),struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),*(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)))),struct(*(struct(*(char),*(char),*(struct`)))),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct(*(char),*(char),*(struct`),*(struct`)))))
.	O
co	*(char)
=	O
tok	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char))
.	O
str	*(char)
;	O
}	O
static	O
void	O
def_union	()->(void)
(	O
defp	*(struct(*(char),enum(int,int,int,int,int,int),union(*(char),struct(*(struct`),int,array(char)),struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`),*(struct`)),struct(*(struct`)),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct`)))))
)	O
definition	struct(*(char),enum(int,int,int,int,int,int),union(*(char),struct(*(struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),int,array(char)),struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(*(char),struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),*(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)))),struct(*(struct(*(char),*(char),*(struct`)))),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct(*(char),*(char),*(struct`),*(struct`))))))
*	O
defp	*(struct(*(char),enum(int,int,int,int,int,int),union(*(char),struct(*(struct`),int,array(char)),struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`),*(struct`)),struct(*(struct`)),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct`)))))
;	O
{	O
token	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char))
tok	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char))
;	O
declaration	struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char))
dec	struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char))
;	O
case_list	struct(*(char),struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(*(char),struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(*(char),struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))))))
*	O
cases	*(struct(*(char),struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(*(char),struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`)))))
;	O
case_list	struct(*(char),struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(*(char),struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(*(char),struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))))))
*	O
*	O
tailp	*(*(struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(struct`,*`)))))
;	O
defp	*(struct(*(char),enum(int,int,int,int,int,int),union(*(char),struct(*(struct`),int,array(char)),struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`),*(struct`)),struct(*(struct`)),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct`)))))
->	O
def_kind	enum(int,int,int,int,int,int)
=	O
DEF_UNION	int
;	O
scan	()->(void)
(	O
TOK_IDENT	int
,	O
&	O
tok	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char))
)	O
;	O
defp	*(struct(*(char),enum(int,int,int,int,int,int),union(*(char),struct(*(struct`),int,array(char)),struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`),*(struct`)),struct(*(struct`)),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct`)))))
->	O
def_name	*(char)
=	O
tok	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char))
.	O
str	*(char)
;	O
scan	()->(void)
(	O
TOK_SWITCH	int
,	O
&	O
tok	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char))
)	O
;	O
scan	()->(void)
(	O
TOK_LPAREN	int
,	O
&	O
tok	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char))
)	O
;	O
get_declaration	()->(void)
(	O
&	O
dec	struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char))
,	O
DEF_UNION	int
)	O
;	O
defp	*(struct(*(char),enum(int,int,int,int,int,int),union(*(char),struct(*(struct`),int,array(char)),struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`),*(struct`)),struct(*(struct`)),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct`)))))
->	O
def	union(*(char),struct(*(struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),int,array(char)),struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(*(char),struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),*(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)))),struct(*(struct(*(char),*(char),*(struct`)))),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct(*(char),*(char),*(struct`),*(struct`)))))
.	O
un	struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(*(char),struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(*`,struct`,*`)))),*(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char))))
.	O
enum_decl	struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char))
=	O
dec	struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char))
;	O
tailp	*(*(struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(struct`,*`)))))
=	O
&	O
defp	*(struct(*(char),enum(int,int,int,int,int,int),union(*(char),struct(*(struct`),int,array(char)),struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`),*(struct`)),struct(*(struct`)),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct`)))))
->	O
def	union(*(char),struct(*(struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),int,array(char)),struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(*(char),struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),*(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)))),struct(*(struct(*(char),*(char),*(struct`)))),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct(*(char),*(char),*(struct`),*(struct`)))))
.	O
un	struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(*(char),struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(*`,struct`,*`)))),*(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char))))
.	O
cases	*(struct(*(char),struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(*(char),struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`)))))
;	O
scan	()->(void)
(	O
TOK_RPAREN	int
,	O
&	O
tok	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char))
)	O
;	O
scan	()->(void)
(	O
TOK_LBRACE	int
,	O
&	O
tok	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char))
)	O
;	O
scan	()->(void)
(	O
TOK_CASE	int
,	O
&	O
tok	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char))
)	O
;	O
while	O
(	O
tok	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char))
.	O
kind	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
==	O
TOK_CASE	int
)	O
{	O
scan	()->(void)
(	O
TOK_IDENT	int
,	O
&	O
tok	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char))
)	O
;	O
cases	*(struct(*(char),struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(*(char),struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`)))))
=	O
ALLOC	O
(	O
case_list	struct(*(char),struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(*(char),struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(*(char),struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))))))
)	O
;	O
cases	*(struct(*(char),struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(*(char),struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`)))))
->	O
case_name	*(char)
=	O
tok	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char))
.	O
str	*(char)
;	O
scan	()->(void)
(	O
TOK_COLON	int
,	O
&	O
tok	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char))
)	O
;	O
get_declaration	()->(void)
(	O
&	O
dec	struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char))
,	O
DEF_UNION	int
)	O
;	O
cases	*(struct(*(char),struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(*(char),struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`)))))
->	O
case_decl	struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char))
=	O
dec	struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char))
;	O
*	O
tailp	*(*(struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(struct`,*`)))))
=	O
cases	*(struct(*(char),struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(*(char),struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`)))))
;	O
tailp	*(*(struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(struct`,*`)))))
=	O
&	O
cases	*(struct(*(char),struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(*(char),struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`)))))
->	O
next	*(struct(*(char),*(struct(*(char),*(struct`)))))
;	O
scan	()->(void)
(	O
TOK_SEMICOLON	int
,	O
&	O
tok	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char))
)	O
;	O
scan3	()->(void)
(	O
TOK_CASE	int
,	O
TOK_DEFAULT	int
,	O
TOK_RBRACE	int
,	O
&	O
tok	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char))
)	O
;	O
}	O
*	O
tailp	*(*(struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(struct`,*`)))))
=	O
NULL	O
;	O
if	O
(	O
tok	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char))
.	O
kind	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
==	O
TOK_DEFAULT	int
)	O
{	O
scan	()->(void)
(	O
TOK_COLON	int
,	O
&	O
tok	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char))
)	O
;	O
get_declaration	()->(void)
(	O
&	O
dec	struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char))
,	O
DEF_UNION	int
)	O
;	O
defp	*(struct(*(char),enum(int,int,int,int,int,int),union(*(char),struct(*(struct`),int,array(char)),struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`),*(struct`)),struct(*(struct`)),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct`)))))
->	O
def	union(*(char),struct(*(struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),int,array(char)),struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(*(char),struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),*(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)))),struct(*(struct(*(char),*(char),*(struct`)))),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct(*(char),*(char),*(struct`),*(struct`)))))
.	O
un	struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(*(char),struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(*`,struct`,*`)))),*(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char))))
.	O
default_decl	*(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)))
=	O
ALLOC	O
(	O
declaration	struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char))
)	O
;	O
*	O
defp	*(struct(*(char),enum(int,int,int,int,int,int),union(*(char),struct(*(struct`),int,array(char)),struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`),*(struct`)),struct(*(struct`)),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct`)))))
->	O
def	union(*(char),struct(*(struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),int,array(char)),struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(*(char),struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),*(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)))),struct(*(struct(*(char),*(char),*(struct`)))),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct(*(char),*(char),*(struct`),*(struct`)))))
.	O
un	struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(*(char),struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(*`,struct`,*`)))),*(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char))))
.	O
default_decl	*(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)))
=	O
dec	struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char))
;	O
scan	()->(void)
(	O
TOK_SEMICOLON	int
,	O
&	O
tok	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char))
)	O
;	O
scan	()->(void)
(	O
TOK_RBRACE	int
,	O
&	O
tok	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char))
)	O
;	O
}	O
else	O
{	O
defp	*(struct(*(char),enum(int,int,int,int,int,int),union(*(char),struct(*(struct`),int,array(char)),struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`),*(struct`)),struct(*(struct`)),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct`)))))
->	O
def	union(*(char),struct(*(struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),int,array(char)),struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(*(char),struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),*(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)))),struct(*(struct(*(char),*(char),*(struct`)))),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct(*(char),*(char),*(struct`),*(struct`)))))
.	O
un	struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(*(char),struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(*`,struct`,*`)))),*(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char))))
.	O
default_decl	*(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)))
=	O
NULL	O
;	O
}	O
}	O
static	O
void	O
def_typedef	()->(void)
(	O
defp	*(struct(*(char),enum(int,int,int,int,int,int),union(*(char),struct(*(struct`),int,array(char)),struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`),*(struct`)),struct(*(struct`)),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct`)))))
)	O
definition	struct(*(char),enum(int,int,int,int,int,int),union(*(char),struct(*(struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),int,array(char)),struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(*(char),struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),*(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)))),struct(*(struct(*(char),*(char),*(struct`)))),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct(*(char),*(char),*(struct`),*(struct`))))))
*	O
defp	*(struct(*(char),enum(int,int,int,int,int,int),union(*(char),struct(*(struct`),int,array(char)),struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`),*(struct`)),struct(*(struct`)),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct`)))))
;	O
{	O
declaration	struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char))
dec	struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char))
;	O
defp	*(struct(*(char),enum(int,int,int,int,int,int),union(*(char),struct(*(struct`),int,array(char)),struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`),*(struct`)),struct(*(struct`)),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct`)))))
->	O
def_kind	enum(int,int,int,int,int,int)
=	O
DEF_TYPEDEF	int
;	O
get_declaration	()->(void)
(	O
&	O
dec	struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char))
,	O
DEF_TYPEDEF	int
)	O
;	O
defp	*(struct(*(char),enum(int,int,int,int,int,int),union(*(char),struct(*(struct`),int,array(char)),struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`),*(struct`)),struct(*(struct`)),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct`)))))
->	O
def_name	*(char)
=	O
dec	struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char))
.	O
name	*(char)
;	O
defp	*(struct(*(char),enum(int,int,int,int,int,int),union(*(char),struct(*(struct`),int,array(char)),struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`),*(struct`)),struct(*(struct`)),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct`)))))
->	O
def	union(*(char),struct(*(struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),int,array(char)),struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(*(char),struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),*(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)))),struct(*(struct(*(char),*(char),*(struct`)))),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct(*(char),*(char),*(struct`),*(struct`)))))
.	O
ty	struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char))
.	O
old_prefix	*(char)
=	O
dec	struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char))
.	O
prefix	*(char)
;	O
defp	*(struct(*(char),enum(int,int,int,int,int,int),union(*(char),struct(*(struct`),int,array(char)),struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`),*(struct`)),struct(*(struct`)),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct`)))))
->	O
def	union(*(char),struct(*(struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),int,array(char)),struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(*(char),struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),*(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)))),struct(*(struct(*(char),*(char),*(struct`)))),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct(*(char),*(char),*(struct`),*(struct`)))))
.	O
ty	struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char))
.	O
old_type	*(char)
=	O
dec	struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char))
.	O
type	*(char)
;	O
defp	*(struct(*(char),enum(int,int,int,int,int,int),union(*(char),struct(*(struct`),int,array(char)),struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`),*(struct`)),struct(*(struct`)),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct`)))))
->	O
def	union(*(char),struct(*(struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),int,array(char)),struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(*(char),struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),*(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)))),struct(*(struct(*(char),*(char),*(struct`)))),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct(*(char),*(char),*(struct`),*(struct`)))))
.	O
ty	struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char))
.	O
old_storage	int
=	O
dec	struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char))
.	O
storage	int
;	O
strncpy	O
(	O
defp	*(struct(*(char),enum(int,int,int,int,int,int),union(*(char),struct(*(struct`),int,array(char)),struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`),*(struct`)),struct(*(struct`)),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct`)))))
->	O
def	union(*(char),struct(*(struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),int,array(char)),struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(*(char),struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),*(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)))),struct(*(struct(*(char),*(char),*(struct`)))),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct(*(char),*(char),*(struct`),*(struct`)))))
.	O
ty	struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char))
.	O
old_pstorage	array(char)
,	O
dec	struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char))
.	O
pstorage	array(char)
,	O
128	int
)	O
;	O
defp	*(struct(*(char),enum(int,int,int,int,int,int),union(*(char),struct(*(struct`),int,array(char)),struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`),*(struct`)),struct(*(struct`)),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct`)))))
->	O
def	union(*(char),struct(*(struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),int,array(char)),struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(*(char),struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),*(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)))),struct(*(struct(*(char),*(char),*(struct`)))),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct(*(char),*(char),*(struct`),*(struct`)))))
.	O
ty	struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char))
.	O
rel	enum(int,int,int,int,int)
=	O
dec	struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char))
.	O
rel	enum(int,int,int,int,int)
;	O
defp	*(struct(*(char),enum(int,int,int,int,int,int),union(*(char),struct(*(struct`),int,array(char)),struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`),*(struct`)),struct(*(struct`)),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct`)))))
->	O
def	union(*(char),struct(*(struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),int,array(char)),struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(*(char),struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),*(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)))),struct(*(struct(*(char),*(char),*(struct`)))),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct(*(char),*(char),*(struct`),*(struct`)))))
.	O
ty	struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char))
.	O
array_max	*(char)
=	O
dec	struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char))
.	O
array_max	*(char)
;	O
}	O
static	O
void	O
get_declaration	()->(void)
(	O
dec	struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char))
,	O
dkind	enum(int,int,int,int,int,int)
)	O
declaration	struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char))
*	O
dec	struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char))
;	O
defkind	enum(int,int,int,int,int,int)
dkind	enum(int,int,int,int,int,int)
;	O
{	O
token	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char))
tok	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char))
;	O
int	O
count	int
;	O
get_type	()->(void)
(	O
&	O
dec	struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char))
->	O
prefix	*(char)
,	O
&	O
dec	struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char))
->	O
type	*(char)
,	O
&	O
dec	struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char))
->	O
storage	int
,	O
dkind	enum(int,int,int,int,int,int)
)	O
;	O
dec	struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char))
->	O
rel	enum(int,int,int,int,int)
=	O
REL_ALIAS	int
;	O
dec	struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char))
->	O
pstorage	array(char)
[	O
0	int
]	O
=	O
'\0'	O
;	O
if	O
(	O
streq	()->(int)
(	O
dec	struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char))
->	O
type	*(char)
,	O
"void"	*(char)
)	O
)	O
{	O
return	O
;	O
}	O
scan2	()->(void)
(	O
TOK_STAR	int
,	O
TOK_IDENT	int
,	O
&	O
tok	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char))
)	O
;	O
if	O
(	O
tok	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char))
.	O
kind	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
==	O
TOK_STAR	int
)	O
{	O
dec	struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char))
->	O
rel	enum(int,int,int,int,int)
=	O
REL_POINTER	int
;	O
scan	()->(void)
(	O
TOK_IDENT	int
,	O
&	O
tok	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char))
)	O
;	O
}	O
dec	struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char))
->	O
name	*(char)
=	O
tok	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char))
.	O
str	*(char)
;	O
if	O
(	O
peekscan	()->(int)
(	O
TOK_LBRACKET	int
,	O
&	O
tok	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char))
)	O
)	O
{	O
if	O
(	O
dec	struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char))
->	O
rel	enum(int,int,int,int,int)
==	O
REL_POINTER	int
)	O
{	O
error	()->(void)
(	O
"no array-of-pointer declarations -- use typedef"	*(char)
)	O
;	O
}	O
dec	struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char))
->	O
rel	enum(int,int,int,int,int)
=	O
REL_VECTOR	int
;	O
scan_num	()->(void)
(	O
&	O
tok	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char))
)	O
;	O
if	O
(	O
isdigit	(int)->(int)
(	O
*	O
tok	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char))
.	O
str	*(char)
)	O
)	O
{	O
dec	struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char))
->	O
rel	enum(int,int,int,int,int)
=	O
REL_VECTOR	int
;	O
count	int
=	O
atoi	(*(char))->(int)
(	O
tok	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char))
.	O
str	*(char)
)	O
;	O
dec	struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char))
->	O
storage	int
*=	O
count	int
;	O
}	O
else	O
{	O
dec	struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char))
->	O
rel	enum(int,int,int,int,int)
=	O
REL_ARRAY2	int
;	O
}	O
dec	struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char))
->	O
array_max	*(char)
=	O
tok	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char))
.	O
str	*(char)
;	O
scan	()->(void)
(	O
TOK_RBRACKET	int
,	O
&	O
tok	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char))
)	O
;	O
}	O
else	O
if	O
(	O
peekscan	()->(int)
(	O
TOK_LANGLE	int
,	O
&	O
tok	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char))
)	O
)	O
{	O
if	O
(	O
dec	struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char))
->	O
rel	enum(int,int,int,int,int)
==	O
REL_POINTER	int
)	O
{	O
error	()->(void)
(	O
"no array-of-pointer declarations -- use typedef"	*(char)
)	O
;	O
}	O
dec	struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char))
->	O
rel	enum(int,int,int,int,int)
=	O
REL_ARRAY	int
;	O
if	O
(	O
peekscan	()->(int)
(	O
TOK_RANGLE	int
,	O
&	O
tok	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char))
)	O
)	O
{	O
dec	struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char))
->	O
array_max	*(char)
=	O
"~0"	*(char)
;	O
}	O
else	O
{	O
scan_num	()->(void)
(	O
&	O
tok	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char))
)	O
;	O
dec	struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char))
->	O
array_max	*(char)
=	O
tok	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char))
.	O
str	*(char)
;	O
scan	()->(void)
(	O
TOK_RANGLE	int
,	O
&	O
tok	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char))
)	O
;	O
}	O
}	O
if	O
(	O
streq	()->(int)
(	O
dec	struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char))
->	O
type	*(char)
,	O
"opaque"	*(char)
)	O
)	O
{	O
if	O
(	O
dec	struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char))
->	O
rel	enum(int,int,int,int,int)
!=	O
REL_ARRAY	int
&&	O
dec	struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char))
->	O
rel	enum(int,int,int,int,int)
!=	O
REL_VECTOR	int
)	O
{	O
error	()->(void)
(	O
"array declaration expected"	*(char)
)	O
;	O
}	O
}	O
else	O
if	O
(	O
streq	()->(int)
(	O
dec	struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char))
->	O
type	*(char)
,	O
"string"	*(char)
)	O
)	O
{	O
if	O
(	O
dec	struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char))
->	O
rel	enum(int,int,int,int,int)
!=	O
REL_ARRAY	int
)	O
{	O
error	()->(void)
(	O
"variable-length array declaration expected"	*(char)
)	O
;	O
}	O
}	O
}	O
static	O
void	O
get_type	()->(void)
(	O
prefixp	*(*(char))
,	O
typep	*(*(char))
,	O
stg	*(int)
,	O
dkind	enum(int,int,int,int,int,int)
)	O
char	O
*	O
*	O
prefixp	*(*(char))
;	O
char	O
*	O
*	O
typep	*(*(char))
;	O
int	O
*	O
stg	*(int)
;	O
defkind	enum(int,int,int,int,int,int)
dkind	enum(int,int,int,int,int,int)
;	O
{	O
token	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char))
tok	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char))
;	O
*	O
stg	*(int)
=	O
-	O
1	int
;	O
*	O
prefixp	*(*(char))
=	O
NULL	O
;	O
get_token	()->(void)
(	O
&	O
tok	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char))
)	O
;	O
switch	O
(	O
tok	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char))
.	O
kind	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
)	O
{	O
case	O
TOK_IDENT	int
:	O
*	O
typep	*(*(char))
=	O
tok	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char))
.	O
str	*(char)
;	O
break	O
;	O
case	O
TOK_STRUCT	int
:	O
case	O
TOK_ENUM	int
:	O
case	O
TOK_UNION	int
:	O
*	O
prefixp	*(*(char))
=	O
tok	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char))
.	O
str	*(char)
;	O
scan	()->(void)
(	O
TOK_IDENT	int
,	O
&	O
tok	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char))
)	O
;	O
*	O
typep	*(*(char))
=	O
tok	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char))
.	O
str	*(char)
;	O
break	O
;	O
case	O
TOK_UNSIGNED	int
:	O
unsigned_dec	()->(void)
(	O
typep	*(*(char))
,	O
stg	*(int)
)	O
;	O
break	O
;	O
case	O
TOK_SHORT	int
:	O
*	O
typep	*(*(char))
=	O
"byte_short"	*(char)
;	O
*	O
stg	*(int)
=	O
2	int
;	O
(	O
void	O
)	O
peekscan	()->(int)
(	O
TOK_INT	int
,	O
&	O
tok	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char))
)	O
;	O
break	O
;	O
case	O
TOK_LONG	int
:	O
*	O
typep	*(*(char))
=	O
"byte_long"	*(char)
;	O
*	O
stg	*(int)
=	O
4	int
;	O
(	O
void	O
)	O
peekscan	()->(int)
(	O
TOK_INT	int
,	O
&	O
tok	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char))
)	O
;	O
break	O
;	O
case	O
TOK_VOID	int
:	O
if	O
(	O
dkind	enum(int,int,int,int,int,int)
!=	O
DEF_UNION	int
&&	O
dkind	enum(int,int,int,int,int,int)
!=	O
DEF_PROGRAM	int
)	O
{	O
error	()->(void)
(	O
"voids allowed only inside union and program definitions"	*(char)
)	O
;	O
}	O
*	O
typep	*(*(char))
=	O
tok	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char))
.	O
str	*(char)
;	O
break	O
;	O
case	O
TOK_STRING	int
:	O
case	O
TOK_OPAQUE	int
:	O
case	O
TOK_CHAR	int
:	O
case	O
TOK_BOOL	int
:	O
*	O
typep	*(*(char))
=	O
tok	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char))
.	O
str	*(char)
;	O
*	O
stg	*(int)
=	O
1	int
;	O
break	O
;	O
case	O
TOK_FLOAT	int
:	O
*	O
typep	*(*(char))
=	O
"byte_float"	*(char)
;	O
*	O
stg	*(int)
=	O
4	int
;	O
break	O
;	O
case	O
TOK_DOUBLE	int
:	O
*	O
typep	*(*(char))
=	O
"byte_double"	*(char)
;	O
*	O
stg	*(int)
=	O
8	int
;	O
break	O
;	O
case	O
TOK_INT	int
:	O
*	O
typep	*(*(char))
=	O
"byte_int"	*(char)
;	O
*	O
stg	*(int)
=	O
4	int
;	O
break	O
;	O
default	O
:	O
error	()->(void)
(	O
"expected type specifier"	*(char)
)	O
;	O
}	O
}	O
static	O
void	O
unsigned_dec	()->(void)
(	O
typep	*(*(char))
,	O
stg	*(int)
)	O
char	O
*	O
*	O
typep	*(*(char))
;	O
int	O
*	O
stg	*(int)
;	O
{	O
token	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char))
tok	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char))
;	O
peek	()->(void)
(	O
&	O
tok	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char))
)	O
;	O
switch	O
(	O
tok	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char))
.	O
kind	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
)	O
{	O
case	O
TOK_CHAR	int
:	O
get_token	()->(void)
(	O
&	O
tok	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char))
)	O
;	O
*	O
typep	*(*(char))
=	O
"byte_u_char"	*(char)
;	O
*	O
stg	*(int)
=	O
1	int
;	O
break	O
;	O
case	O
TOK_SHORT	int
:	O
get_token	()->(void)
(	O
&	O
tok	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char))
)	O
;	O
*	O
typep	*(*(char))
=	O
"byte_u_short"	*(char)
;	O
*	O
stg	*(int)
=	O
2	int
;	O
(	O
void	O
)	O
peekscan	()->(int)
(	O
TOK_INT	int
,	O
&	O
tok	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char))
)	O
;	O
break	O
;	O
case	O
TOK_LONG	int
:	O
get_token	()->(void)
(	O
&	O
tok	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char))
)	O
;	O
*	O
typep	*(*(char))
=	O
"byte_u_long"	*(char)
;	O
*	O
stg	*(int)
=	O
4	int
;	O
(	O
void	O
)	O
peekscan	()->(int)
(	O
TOK_INT	int
,	O
&	O
tok	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char))
)	O
;	O
break	O
;	O
case	O
TOK_INT	int
:	O
get_token	()->(void)
(	O
&	O
tok	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char))
)	O
;	O
*	O
typep	*(*(char))
=	O
"byte_u_int"	*(char)
;	O
*	O
stg	*(int)
=	O
4	int
;	O
break	O
;	O
default	O
:	O
*	O
typep	*(*(char))
=	O
"byte_u_int"	*(char)
;	O
*	O
stg	*(int)
=	O
4	int
;	O
break	O
;	O
}	O
}	O
