char	O
*	O
mu_tilde_expansion	(*(char),int,*(char))->(*(char))
(	O
const	O
char	O
*	O
ref	*(char)
,	O
int	O
delim	int
,	O
const	O
char	O
*	O
homedir	*(char)
)	O
{	O
char	O
*	O
base	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
ref	*(char)
)	O
;	O
char	O
*	O
home	*(char)
=	O
NULL	O
;	O
char	O
*	O
proto	*(char)
=	O
NULL	O
;	O
size_t	long
proto_len	long
=	O
0	int
;	O
char	O
*	O
p	*(char)
;	O
if	O
(	O
!	O
base	*(char)
)	O
return	O
NULL	O
;	O
for	O
(	O
p	*(char)
=	O
base	*(char)
;	O
*	O
p	*(char)
&&	O
mu_isascii	O
(	O
*	O
p	*(char)
)	O
&&	O
mu_isalnum	O
(	O
*	O
p	*(char)
)	O
;	O
p	*(char)
++	O
)	O
;	O
if	O
(	O
*	O
p	*(char)
==	O
':'	O
)	O
{	O
p	*(char)
++	O
;	O
proto_len	long
=	O
p	*(char)
-	O
base	*(char)
;	O
proto	*(char)
=	O
malloc	(long)->(*(void))
(	O
proto_len	long
+	O
1	int
)	O
;	O
if	O
(	O
!	O
proto	*(char)
)	O
return	O
NULL	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
proto	*(char)
,	O
base	*(char)
,	O
proto_len	long
)	O
;	O
proto	*(char)
[	O
proto_len	long
]	O
=	O
0	int
;	O
if	O
(	O
*	O
p	*(char)
==	O
delim	int
)	O
p	*(char)
++	O
;	O
if	O
(	O
*	O
p	*(char)
==	O
delim	int
)	O
p	*(char)
++	O
;	O
}	O
else	O
p	*(char)
=	O
base	*(char)
;	O
if	O
(	O
*	O
p	*(char)
==	O
'~'	O
)	O
{	O
p	*(char)
++	O
;	O
if	O
(	O
*	O
p	*(char)
==	O
delim	int
||	O
*	O
p	*(char)
==	O
'\0'	O
)	O
{	O
char	O
*	O
s	*(char)
;	O
if	O
(	O
!	O
homedir	*(char)
)	O
{	O
home	*(char)
=	O
mu_get_homedir	()->(*(char))
(	O
)	O
;	O
if	O
(	O
!	O
home	*(char)
)	O
return	O
base	*(char)
;	O
homedir	*(char)
=	O
home	*(char)
;	O
}	O
s	*(char)
=	O
calloc	(long,long)->(*(void))
(	O
proto_len	long
+	O
strlen	(*(char))->(long)
(	O
homedir	*(char)
)	O
+	O
strlen	(*(char))->(long)
(	O
p	*(char)
)	O
+	O
1	int
,	O
1	int
)	O
;	O
if	O
(	O
proto_len	long
)	O
strcpy	(*(char),*(char))->(*(char))
(	O
s	*(char)
,	O
proto	*(char)
)	O
;	O
else	O
s	*(char)
[	O
0	int
]	O
=	O
0	int
;	O
strcat	(*(char),*(char))->(*(char))
(	O
s	*(char)
,	O
homedir	*(char)
)	O
;	O
strcat	(*(char),*(char))->(*(char))
(	O
s	*(char)
,	O
p	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
base	*(char)
)	O
;	O
base	*(char)
=	O
s	*(char)
;	O
}	O
else	O
{	O
struct	O
mu_auth_data	struct(*(char),*(char),*(char),int,int,*(char),*(char),*(char),*(char),long,int,int)
*	O
auth	*(*(struct(*(char),*(char),*(char),int,int,*(char),*(char),*(char),*(char),long,int,int)))
;	O
char	O
*	O
s	*(char)
=	O
p	*(char)
;	O
char	O
*	O
name	*(char)
;	O
while	O
(	O
*	O
s	*(char)
&&	O
*	O
s	*(char)
!=	O
delim	int
)	O
s	*(char)
++	O
;	O
name	*(char)
=	O
calloc	(long,long)->(*(void))
(	O
s	*(char)
-	O
p	*(char)
+	O
1	int
,	O
1	int
)	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
name	*(char)
,	O
p	*(char)
,	O
s	*(char)
-	O
p	*(char)
)	O
;	O
name	*(char)
[	O
s	*(char)
-	O
p	*(char)
]	O
=	O
'\0'	O
;	O
auth	*(*(struct(*(char),*(char),*(char),int,int,*(char),*(char),*(char),*(char),long,int,int)))
=	O
mu_get_auth_by_name	(*(char))->(*(struct(*(char),*(char),*(char),int,int,*(char),*(char),*(char),*(char),long,int,int)))
(	O
name	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
name	*(char)
)	O
;	O
if	O
(	O
auth	*(*(struct(*(char),*(char),*(char),int,int,*(char),*(char),*(char),*(char),long,int,int)))
)	O
{	O
char	O
*	O
buf	*(char)
=	O
calloc	(long,long)->(*(void))
(	O
proto_len	long
+	O
strlen	(*(char))->(long)
(	O
auth	*(*(struct(*(char),*(char),*(char),int,int,*(char),*(char),*(char),*(char),long,int,int)))
->	O
dir	*(char)
)	O
+	O
strlen	(*(char))->(long)
(	O
s	*(char)
)	O
+	O
1	int
,	O
1	int
)	O
;	O
if	O
(	O
proto_len	long
)	O
strcpy	(*(char),*(char))->(*(char))
(	O
buf	*(char)
,	O
proto	*(char)
)	O
;	O
else	O
buf	*(char)
[	O
0	int
]	O
=	O
0	int
;	O
strcat	(*(char),*(char))->(*(char))
(	O
buf	*(char)
,	O
auth	*(*(struct(*(char),*(char),*(char),int,int,*(char),*(char),*(char),*(char),long,int,int)))
->	O
dir	*(char)
)	O
;	O
strcat	(*(char),*(char))->(*(char))
(	O
buf	*(char)
,	O
s	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
base	*(char)
)	O
;	O
base	*(char)
=	O
buf	*(char)
;	O
mu_auth_data_free	(*(struct(*(char),*(char),*(char),int,int,*(char),*(char),*(char),*(char),long,int,int)))->(void)
(	O
auth	*(*(struct(*(char),*(char),*(char),int,int,*(char),*(char),*(char),*(char),long,int,int)))
)	O
;	O
}	O
}	O
}	O
if	O
(	O
home	*(char)
)	O
free	(*(void))->(void)
(	O
home	*(char)
)	O
;	O
return	O
base	*(char)
;	O
}	O
