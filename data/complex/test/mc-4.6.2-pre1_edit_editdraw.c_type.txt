static	O
void	O
status_string	(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),int,int,*(char),*(char),long,long,array(*(char)),array(*(char)),long,int,long,long,long,long,long,long,long,int,int,int,int,int,int,int,int,long,long,long,long,long,long,int,int,long,int,array(int),array(long),*(struct(int,int,*`,*`)),long,*(long),long,long,long,int,struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,*(struct),*(*(struct`)),long,struct(short,char,char,char,char),*(char),*(struct),int,int,array(struct(short,short)),*(struct(long,long)),*(struct(long,long)),int,array(*(char)))),*(char),int)->(void)
(	O
WEdit	struct
*	O
edit	*(struct)
,	O
char	O
*	O
s	*(char)
,	O
int	O
w	*(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*(struct`),*(void))->(int)),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
)	O
{	O
char	O
byte_str	array(char)
[	O
16	int
]	O
;	O
if	O
(	O
edit	*(struct)
->	O
curs1	long
<	O
edit	*(struct)
->	O
last_byte	long
)	O
{	O
unsigned	O
char	O
cur_byte	char
=	O
edit_get_byte	(*(struct),long)->(int)
(	O
edit	*(struct)
,	O
edit	*(struct)
->	O
curs1	long
)	O
;	O
g_snprintf	(*(char),long,*(char))->(int)
(	O
byte_str	array(char)
,	O
sizeof	O
(	O
byte_str	array(char)
)	O
,	O
"%c %3d 0x%02X"	*(char)
,	O
is_printable	(int)->(int)
(	O
cur_byte	char
)	O
?	O
cur_byte	char
:	O
'.'	O
,	O
(	O
int	O
)	O
cur_byte	char
,	O
(	O
unsigned	O
)	O
cur_byte	char
)	O
;	O
}	O
else	O
{	O
strcpy	(*(char),*(char))->(*(char))
(	O
byte_str	array(char)
,	O
"<EOF>"	*(char)
)	O
;	O
}	O
g_snprintf	(*(char),long,*(char))->(int)
(	O
s	*(char)
,	O
w	*(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*(struct`),*(void))->(int)),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
,	O
"[%c%c%c%c] %2ld L:[%3ld+%2ld %3ld/%3ld] *(%-4ld/%4ldb)= %s"	*(char)
,	O
edit	*(struct)
->	O
mark1	long
!=	O
edit	*(struct)
->	O
mark2	long
?	O
(	O
column_highlighting	int
?	O
'C'	O
:	O
'B'	O
)	O
:	O
'-'	O
,	O
edit	*(struct)
->	O
modified	long
?	O
'M'	O
:	O
'-'	O
,	O
edit	*(struct)
->	O
macro_i	int
<	O
0	int
?	O
'-'	O
:	O
'R'	O
,	O
edit	*(struct)
->	O
overwrite	int
==	O
0	int
?	O
'-'	O
:	O
'O'	O
,	O
edit	*(struct)
->	O
curs_col	long
,	O
edit	*(struct)
->	O
start_line	long
+	O
1	int
,	O
edit	*(struct)
->	O
curs_row	long
,	O
edit	*(struct)
->	O
curs_line	long
+	O
1	int
,	O
edit	*(struct)
->	O
total_lines	long
+	O
1	int
,	O
edit	*(struct)
->	O
curs1	long
,	O
edit	*(struct)
->	O
last_byte	long
,	O
byte_str	array(char)
)	O
;	O
}	O
static	O
inline	O
void	O
printwstr	(*(char),int)->(void)
(	O
const	O
char	O
*	O
s	*(char)
,	O
int	O
len	int
)	O
{	O
if	O
(	O
len	int
>	O
0	int
)	O
tty_printf	(*(char))->(void)
(	O
"%-*.*s"	*(char)
,	O
len	int
,	O
len	int
,	O
s	*(char)
)	O
;	O
}	O
void	O
edit_status	(*(struct))->(void)
(	O
WEdit	struct
*	O
edit	*(struct)
)	O
{	O
const	O
int	O
w	*(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*(struct`),*(void))->(int)),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
=	O
edit	*(struct)
->	O
widget	*(struct)
.	O
cols	int
;	O
const	O
size_t	long
status_size	long
=	O
w	*(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*(struct`),*(void))->(int)),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
+	O
1	int
;	O
char	O
*	O
const	O
status	int
=	O
g_malloc	(long)->(*(void))
(	O
status_size	long
)	O
;	O
int	O
status_len	int
;	O
const	O
char	O
*	O
fname	*(char)
=	O
""	*(char)
;	O
int	O
fname_len	int
;	O
const	O
int	O
gap	int
=	O
3	int
;	O
const	O
int	O
right_gap	int
=	O
2	int
;	O
const	O
int	O
preferred_fname_len	int
=	O
16	int
;	O
status_string	(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),int,int,*(char),*(char),long,long,array(*(char)),array(*(char)),long,int,long,long,long,long,long,long,long,int,int,int,int,int,int,int,int,long,long,long,long,long,long,int,int,long,int,array(int),array(long),*(struct(int,int,*`,*`)),long,*(long),long,long,long,int,struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,*(struct),*(*(struct`)),long,struct(short,char,char,char,char),*(char),*(struct),int,int,array(struct(short,short)),*(struct(long,long)),*(struct(long,long)),int,array(*(char)))),*(char),int)->(void)
(	O
edit	*(struct)
,	O
status	int
,	O
status_size	long
)	O
;	O
status_len	int
=	O
(	O
int	O
)	O
strlen	(*(char))->(long)
(	O
status	int
)	O
;	O
if	O
(	O
edit	*(struct)
->	O
filename	*(char)
)	O
fname	*(char)
=	O
edit	*(struct)
->	O
filename	*(char)
;	O
fname_len	int
=	O
strlen	(*(char))->(long)
(	O
fname	*(char)
)	O
;	O
if	O
(	O
fname_len	int
<	O
preferred_fname_len	int
)	O
fname_len	int
=	O
preferred_fname_len	int
;	O
if	O
(	O
fname_len	int
+	O
gap	int
+	O
status_len	int
+	O
right_gap	int
>=	O
w	*(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*(struct`),*(void))->(int)),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
)	O
{	O
if	O
(	O
preferred_fname_len	int
+	O
gap	int
+	O
status_len	int
+	O
right_gap	int
>=	O
w	*(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*(struct`),*(void))->(int)),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
)	O
fname_len	int
=	O
preferred_fname_len	int
;	O
else	O
fname_len	int
=	O
w	*(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*(struct`),*(void))->(int)),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
-	O
(	O
gap	int
+	O
status_len	int
+	O
right_gap	int
)	O
;	O
fname	*(char)
=	O
name_trunc	(*(char),int)->(*(char))
(	O
fname	*(char)
,	O
fname_len	int
)	O
;	O
}	O
widget_move	O
(	O
edit	*(struct)
,	O
0	int
,	O
0	int
)	O
;	O
attrset	(int)->(void)
(	O
SELECTED_COLOR	O
)	O
;	O
printwstr	(*(char),int)->(void)
(	O
fname	*(char)
,	O
fname_len	int
+	O
gap	int
)	O
;	O
printwstr	(*(char),int)->(void)
(	O
status	int
,	O
w	*(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*(struct`),*(void))->(int)),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
-	O
(	O
fname_len	int
+	O
gap	int
)	O
)	O
;	O
attrset	(int)->(void)
(	O
EDITOR_NORMAL_COLOR	O
)	O
;	O
g_free	(*(void))->(void)
(	O
status	int
)	O
;	O
}	O
void	O
edit_scroll_screen_over_cursor	(*(struct))->(void)
(	O
WEdit	struct
*	O
edit	*(struct)
)	O
{	O
int	O
p	*(void)
;	O
int	O
outby	int
;	O
int	O
b_extreme	int
,	O
t_extreme	int
,	O
l_extreme	int
,	O
r_extreme	int
;	O
if	O
(	O
edit	*(struct)
->	O
num_widget_lines	int
<=	O
0	int
||	O
edit	*(struct)
->	O
num_widget_columns	int
<=	O
0	int
)	O
return	O
;	O
r_extreme	int
=	O
EDIT_RIGHT_EXTREME	O
;	O
l_extreme	int
=	O
EDIT_LEFT_EXTREME	O
;	O
b_extreme	int
=	O
EDIT_BOTTOM_EXTREME	O
;	O
t_extreme	int
=	O
EDIT_TOP_EXTREME	O
;	O
if	O
(	O
edit	*(struct)
->	O
found_len	int
)	O
{	O
b_extreme	int
=	O
max	long
(	O
edit	*(struct)
->	O
num_widget_lines	int
/	O
4	int
,	O
b_extreme	int
)	O
;	O
t_extreme	int
=	O
max	long
(	O
edit	*(struct)
->	O
num_widget_lines	int
/	O
4	int
,	O
t_extreme	int
)	O
;	O
}	O
if	O
(	O
b_extreme	int
+	O
t_extreme	int
+	O
1	int
>	O
edit	*(struct)
->	O
num_widget_lines	int
)	O
{	O
int	O
n	long
;	O
n	long
=	O
b_extreme	int
+	O
t_extreme	int
;	O
b_extreme	int
=	O
(	O
b_extreme	int
*	O
(	O
edit	*(struct)
->	O
num_widget_lines	int
-	O
1	int
)	O
)	O
/	O
n	long
;	O
t_extreme	int
=	O
(	O
t_extreme	int
*	O
(	O
edit	*(struct)
->	O
num_widget_lines	int
-	O
1	int
)	O
)	O
/	O
n	long
;	O
}	O
if	O
(	O
l_extreme	int
+	O
r_extreme	int
+	O
1	int
>	O
edit	*(struct)
->	O
num_widget_columns	int
)	O
{	O
int	O
n	long
;	O
n	long
=	O
l_extreme	int
+	O
t_extreme	int
;	O
l_extreme	int
=	O
(	O
l_extreme	int
*	O
(	O
edit	*(struct)
->	O
num_widget_columns	int
-	O
1	int
)	O
)	O
/	O
n	long
;	O
r_extreme	int
=	O
(	O
r_extreme	int
*	O
(	O
edit	*(struct)
->	O
num_widget_columns	int
-	O
1	int
)	O
)	O
/	O
n	long
;	O
}	O
p	*(void)
=	O
edit_get_col	(*(struct))->(int)
(	O
edit	*(struct)
)	O
;	O
edit_update_curs_row	(*(struct))->(void)
(	O
edit	*(struct)
)	O
;	O
outby	int
=	O
p	*(void)
+	O
edit	*(struct)
->	O
start_col	long
-	O
edit	*(struct)
->	O
num_widget_columns	int
+	O
1	int
+	O
(	O
r_extreme	int
+	O
edit	*(struct)
->	O
found_len	int
)	O
;	O
if	O
(	O
outby	int
>	O
0	int
)	O
edit_scroll_right	(*(struct),int)->(void)
(	O
edit	*(struct)
,	O
outby	int
)	O
;	O
outby	int
=	O
l_extreme	int
-	O
p	*(void)
-	O
edit	*(struct)
->	O
start_col	long
;	O
if	O
(	O
outby	int
>	O
0	int
)	O
edit_scroll_left	(*(struct),int)->(void)
(	O
edit	*(struct)
,	O
outby	int
)	O
;	O
p	*(void)
=	O
edit	*(struct)
->	O
curs_row	long
;	O
outby	int
=	O
p	*(void)
-	O
edit	*(struct)
->	O
num_widget_lines	int
+	O
1	int
+	O
b_extreme	int
;	O
if	O
(	O
outby	int
>	O
0	int
)	O
edit_scroll_downward	(*(struct),int)->(void)
(	O
edit	*(struct)
,	O
outby	int
)	O
;	O
outby	int
=	O
t_extreme	int
-	O
p	*(void)
;	O
if	O
(	O
outby	int
>	O
0	int
)	O
edit_scroll_upward	(*(struct),long)->(void)
(	O
edit	*(struct)
,	O
outby	int
)	O
;	O
edit_update_curs_row	(*(struct))->(void)
(	O
edit	*(struct)
)	O
;	O
}	O
static	O
void	O
print_to_widget	(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),int,int,*(char),*(char),long,long,array(*(char)),array(*(char)),long,int,long,long,long,long,long,long,long,int,int,int,int,int,int,int,int,long,long,long,long,long,long,int,int,long,int,array(int),array(long),*(struct(int,int,*`,*`)),long,*(long),long,long,long,int,struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,*(struct),*(*(struct`)),long,struct(short,char,char,char,char),*(char),*(struct),int,int,array(struct(short,short)),*(struct(long,long)),*(struct(long,long)),int,array(*(char)))),long,int,int,long,array(int))->(void)
(	O
WEdit	struct
*	O
edit	*(struct)
,	O
long	O
row	long
,	O
int	O
start_col	long
,	O
int	O
start_col_real	int
,	O
long	O
end_col	long
,	O
unsigned	O
int	O
line	int
[	O
]	O
)	O
{	O
unsigned	O
int	O
*	O
p	*(void)
;	O
int	O
x	array(long)
=	O
start_col_real	int
+	O
EDIT_TEXT_HORIZONTAL_OFFSET	int
;	O
int	O
x1	int
=	O
start_col	long
+	O
EDIT_TEXT_HORIZONTAL_OFFSET	int
;	O
int	O
y	short
=	O
row	long
+	O
EDIT_TEXT_VERTICAL_OFFSET	int
;	O
int	O
cols_to_skip	int
=	O
abs	(int)->(int)
(	O
x	array(long)
)	O
;	O
set_color	O
(	O
EDITOR_NORMAL_COLOR	O
)	O
;	O
edit_move	O
(	O
x1	int
,	O
y	short
)	O
;	O
hline	(int,int)->(void)
(	O
' '	O
,	O
end_col	long
+	O
1	int
-	O
EDIT_TEXT_HORIZONTAL_OFFSET	int
-	O
x1	int
)	O
;	O
edit_move	O
(	O
x1	int
+	O
FONT_OFFSET_X	int
,	O
y	short
+	O
FONT_OFFSET_Y	int
)	O
;	O
p	*(void)
=	O
line	int
;	O
while	O
(	O
*	O
p	*(void)
)	O
{	O
int	O
style	int
;	O
int	O
textchar	int
;	O
int	O
color	*(int)
;	O
if	O
(	O
cols_to_skip	int
)	O
{	O
p	*(void)
++	O
;	O
cols_to_skip	int
--	O
;	O
continue	O
;	O
}	O
style	int
=	O
*	O
p	*(void)
&	O
0xFF00	int
;	O
textchar	int
=	O
*	O
p	*(void)
&	O
0xFF	int
;	O
color	*(int)
=	O
*	O
p	*(void)
>>	O
16	int
;	O
if	O
(	O
style	int
&	O
MOD_ABNORMAL	O
)	O
{	O
color	*(int)
=	O
0	int
;	O
}	O
if	O
(	O
style	int
&	O
MOD_WHITESPACE	O
)	O
{	O
if	O
(	O
style	int
&	O
MOD_MARKED	O
)	O
{	O
textchar	int
=	O
' '	O
;	O
set_color	O
(	O
EDITOR_MARKED_COLOR	O
)	O
;	O
}	O
else	O
{	O
set_color	O
(	O
EDITOR_WHITESPACE_COLOR	O
)	O
;	O
}	O
}	O
else	O
{	O
if	O
(	O
style	int
&	O
MOD_BOLD	O
)	O
{	O
set_color	O
(	O
EDITOR_BOLD_COLOR	O
)	O
;	O
}	O
else	O
if	O
(	O
style	int
&	O
MOD_MARKED	O
)	O
{	O
set_color	O
(	O
EDITOR_MARKED_COLOR	O
)	O
;	O
}	O
else	O
{	O
lowlevel_set_color	O
(	O
color	*(int)
)	O
;	O
}	O
}	O
addch	O
(	O
textchar	int
)	O
;	O
p	*(void)
++	O
;	O
}	O
}	O
int	O
visible_tabs	int
=	O
1	int
,	O
visible_tws	int
=	O
1	int
;	O
static	O
void	O
edit_draw_this_line	(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),int,int,*(char),*(char),long,long,array(*(char)),array(*(char)),long,int,long,long,long,long,long,long,long,int,int,int,int,int,int,int,int,long,long,long,long,long,long,int,int,long,int,array(int),array(long),*(struct(int,int,*`,*`)),long,*(long),long,long,long,int,struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,*(struct),*(*(struct`)),long,struct(short,char,char,char,char),*(char),*(struct),int,int,array(struct(short,short)),*(struct(long,long)),*(struct(long,long)),int,array(*(char)))),long,long,long,long)->(void)
(	O
WEdit	struct
*	O
edit	*(struct)
,	O
long	O
b	*(void)
,	O
long	O
row	long
,	O
long	O
start_col	long
,	O
long	O
end_col	long
)	O
{	O
static	O
unsigned	O
int	O
line	int
[	O
MAX_LINE_LEN	int
]	O
;	O
unsigned	O
int	O
*	O
p	*(void)
=	O
line	int
;	O
long	O
m1	long
=	O
0	int
,	O
m2	long
=	O
0	int
,	O
q	long
,	O
c1	int
,	O
c2	int
,	O
tws	long
;	O
int	O
col	int
,	O
start_col_real	int
;	O
unsigned	O
int	O
c	int
;	O
int	O
color	*(int)
;	O
int	O
i	array(int)
;	O
edit_get_syntax_color	(*(struct),long,*(int))->(void)
(	O
edit	*(struct)
,	O
b	*(void)
-	O
1	int
,	O
&	O
color	*(int)
)	O
;	O
q	long
=	O
edit_move_forward3	(*(struct),long,int,long)->(long)
(	O
edit	*(struct)
,	O
b	*(void)
,	O
start_col	long
-	O
edit	*(struct)
->	O
start_col	long
,	O
0	int
)	O
;	O
start_col_real	int
=	O
(	O
col	int
=	O
(	O
int	O
)	O
edit_move_forward3	(*(struct),long,int,long)->(long)
(	O
edit	*(struct)
,	O
b	*(void)
,	O
0	int
,	O
q	long
)	O
)	O
+	O
edit	*(struct)
->	O
start_col	long
;	O
c1	int
=	O
min	long
(	O
edit	*(struct)
->	O
column1	int
,	O
edit	*(struct)
->	O
column2	int
)	O
;	O
c2	int
=	O
max	long
(	O
edit	*(struct)
->	O
column1	int
,	O
edit	*(struct)
->	O
column2	int
)	O
;	O
if	O
(	O
col	int
+	O
16	int
>	O
-	O
edit	*(struct)
->	O
start_col	long
)	O
{	O
eval_marks	(*(struct),*(long),*(long))->(int)
(	O
edit	*(struct)
,	O
&	O
m1	long
,	O
&	O
m2	long
)	O
;	O
if	O
(	O
row	long
<=	O
edit	*(struct)
->	O
total_lines	long
-	O
edit	*(struct)
->	O
start_line	long
)	O
{	O
if	O
(	O
use_colors	int
&&	O
visible_tws	int
)	O
{	O
tws	long
=	O
edit_eol	(*(struct),long)->(long)
(	O
edit	*(struct)
,	O
b	*(void)
)	O
;	O
while	O
(	O
tws	long
>	O
b	*(void)
&&	O
(	O
(	O
c	int
=	O
edit_get_byte	(*(struct),long)->(int)
(	O
edit	*(struct)
,	O
tws	long
-	O
1	int
)	O
)	O
==	O
' '	O
||	O
c	int
==	O
'\t'	O
)	O
)	O
tws	long
--	O
;	O
}	O
while	O
(	O
col	int
<=	O
end_col	long
-	O
edit	*(struct)
->	O
start_col	long
)	O
{	O
*	O
p	*(void)
=	O
0	int
;	O
if	O
(	O
q	long
==	O
edit	*(struct)
->	O
curs1	long
)	O
*	O
p	*(void)
|=	O
MOD_CURSOR	O
;	O
if	O
(	O
q	long
>=	O
m1	long
&&	O
q	long
<	O
m2	long
)	O
{	O
if	O
(	O
column_highlighting	int
)	O
{	O
int	O
x	array(long)
;	O
x	array(long)
=	O
edit_move_forward3	(*(struct),long,int,long)->(long)
(	O
edit	*(struct)
,	O
b	*(void)
,	O
0	int
,	O
q	long
)	O
;	O
if	O
(	O
x	array(long)
>=	O
c1	int
&&	O
x	array(long)
<	O
c2	int
)	O
*	O
p	*(void)
|=	O
MOD_MARKED	O
;	O
}	O
else	O
*	O
p	*(void)
|=	O
MOD_MARKED	O
;	O
}	O
if	O
(	O
q	long
==	O
edit	*(struct)
->	O
bracket	long
)	O
*	O
p	*(void)
|=	O
MOD_BOLD	O
;	O
if	O
(	O
q	long
>=	O
edit	*(struct)
->	O
found_start	long
&&	O
q	long
<	O
edit	*(struct)
->	O
found_start	long
+	O
edit	*(struct)
->	O
found_len	int
)	O
*	O
p	*(void)
|=	O
MOD_BOLD	O
;	O
c	int
=	O
edit_get_byte	(*(struct),long)->(int)
(	O
edit	*(struct)
,	O
q	long
)	O
;	O
edit_get_syntax_color	(*(struct),long,*(int))->(void)
(	O
edit	*(struct)
,	O
q	long
,	O
&	O
color	*(int)
)	O
;	O
*	O
p	*(void)
|=	O
color	*(int)
<<	O
16	int
;	O
switch	O
(	O
c	int
)	O
{	O
case	O
'\n'	O
:	O
col	int
=	O
end_col	long
-	O
edit	*(struct)
->	O
start_col	long
+	O
1	int
;	O
*	O
(	O
p	*(void)
++	O
)	O
|=	O
' '	O
;	O
break	O
;	O
case	O
'\t'	O
:	O
i	array(int)
=	O
TAB_SIZE	O
-	O
(	O
(	O
int	O
)	O
col	int
%	O
TAB_SIZE	O
)	O
;	O
col	int
+=	O
i	array(int)
;	O
if	O
(	O
use_colors	int
&&	O
visible_tabs	int
)	O
{	O
c	int
=	O
(	O
*	O
p	*(void)
&	O
~	O
MOD_CURSOR	O
)	O
|	O
MOD_WHITESPACE	O
;	O
if	O
(	O
i	array(int)
>	O
2	int
)	O
{	O
*	O
(	O
p	*(void)
++	O
)	O
|=	O
'<'	O
|	O
MOD_WHITESPACE	O
;	O
while	O
(	O
--	O
i	array(int)
>	O
1	int
)	O
*	O
(	O
p	*(void)
++	O
)	O
=	O
c	int
|	O
'-'	O
;	O
*	O
(	O
p	*(void)
++	O
)	O
=	O
c	int
|	O
'>'	O
;	O
}	O
else	O
if	O
(	O
i	array(int)
>	O
1	int
)	O
{	O
*	O
(	O
p	*(void)
++	O
)	O
|=	O
'<'	O
|	O
MOD_WHITESPACE	O
;	O
*	O
(	O
p	*(void)
++	O
)	O
=	O
c	int
|	O
'>'	O
;	O
}	O
else	O
*	O
(	O
p	*(void)
++	O
)	O
|=	O
'>'	O
|	O
MOD_WHITESPACE	O
;	O
}	O
else	O
if	O
(	O
use_colors	int
&&	O
visible_tws	int
&&	O
q	long
>=	O
tws	long
)	O
{	O
*	O
p	*(void)
|=	O
'.'	O
|	O
MOD_WHITESPACE	O
;	O
c	int
=	O
*	O
(	O
p	*(void)
++	O
)	O
&	O
~	O
MOD_CURSOR	O
;	O
while	O
(	O
--	O
i	array(int)
)	O
*	O
(	O
p	*(void)
++	O
)	O
=	O
c	int
;	O
}	O
else	O
{	O
*	O
p	*(void)
|=	O
' '	O
;	O
c	int
=	O
*	O
(	O
p	*(void)
++	O
)	O
&	O
~	O
MOD_CURSOR	O
;	O
while	O
(	O
--	O
i	array(int)
)	O
*	O
(	O
p	*(void)
++	O
)	O
=	O
c	int
;	O
}	O
break	O
;	O
case	O
' '	O
:	O
if	O
(	O
use_colors	int
&&	O
visible_tws	int
&&	O
q	long
>=	O
tws	long
)	O
{	O
*	O
(	O
p	*(void)
++	O
)	O
|=	O
'.'	O
|	O
MOD_WHITESPACE	O
;	O
col	int
++	O
;	O
break	O
;	O
}	O
default	O
:	O
c	int
=	O
convert_to_display_c	O
(	O
c	int
)	O
;	O
if	O
(	O
c	int
<	O
32	int
)	O
{	O
*	O
(	O
p	*(void)
++	O
)	O
=	O
'^'	O
|	O
MOD_ABNORMAL	O
;	O
*	O
(	O
p	*(void)
++	O
)	O
=	O
(	O
c	int
+	O
0x40	int
)	O
|	O
MOD_ABNORMAL	O
;	O
col	int
+=	O
2	int
;	O
break	O
;	O
}	O
if	O
(	O
c	int
==	O
127	int
)	O
{	O
*	O
(	O
p	*(void)
++	O
)	O
=	O
'^'	O
|	O
MOD_ABNORMAL	O
;	O
*	O
(	O
p	*(void)
++	O
)	O
=	O
'?'	O
|	O
MOD_ABNORMAL	O
;	O
col	int
+=	O
2	int
;	O
break	O
;	O
}	O
if	O
(	O
is_printable	(int)->(int)
(	O
c	int
)	O
)	O
{	O
*	O
(	O
p	*(void)
++	O
)	O
|=	O
c	int
;	O
}	O
else	O
{	O
*	O
(	O
p	*(void)
++	O
)	O
=	O
'.'	O
|	O
MOD_ABNORMAL	O
;	O
}	O
col	int
++	O
;	O
break	O
;	O
}	O
q	long
++	O
;	O
}	O
}	O
}	O
else	O
{	O
start_col_real	int
=	O
start_col	long
=	O
0	int
;	O
}	O
*	O
p	*(void)
=	O
0	int
;	O
print_to_widget	(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),int,int,*(char),*(char),long,long,array(*(char)),array(*(char)),long,int,long,long,long,long,long,long,long,int,int,int,int,int,int,int,int,long,long,long,long,long,long,int,int,long,int,array(int),array(long),*(struct(int,int,*`,*`)),long,*(long),long,long,long,int,struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,*(struct),*(*(struct`)),long,struct(short,char,char,char,char),*(char),*(struct),int,int,array(struct(short,short)),*(struct(long,long)),*(struct(long,long)),int,array(*(char)))),long,int,int,long,array(int))->(void)
(	O
edit	*(struct)
,	O
row	long
,	O
start_col	long
,	O
start_col_real	int
,	O
end_col	long
,	O
line	int
)	O
;	O
}	O
static	O
void	O
edit_draw_this_char	(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),int,int,*(char),*(char),long,long,array(*(char)),array(*(char)),long,int,long,long,long,long,long,long,long,int,int,int,int,int,int,int,int,long,long,long,long,long,long,int,int,long,int,array(int),array(long),*(struct(int,int,*`,*`)),long,*(long),long,long,long,int,struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,*(struct),*(*(struct`)),long,struct(short,char,char,char,char),*(char),*(struct),int,int,array(struct(short,short)),*(struct(long,long)),*(struct(long,long)),int,array(*(char)))),long,long)->(void)
(	O
WEdit	struct
*	O
edit	*(struct)
,	O
long	O
curs	long
,	O
long	O
row	long
)	O
{	O
int	O
b	*(void)
=	O
edit_bol	(*(struct),long)->(long)
(	O
edit	*(struct)
,	O
curs	long
)	O
;	O
edit_draw_this_line	(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),int,int,*(char),*(char),long,long,array(*(char)),array(*(char)),long,int,long,long,long,long,long,long,long,int,int,int,int,int,int,int,int,long,long,long,long,long,long,int,int,long,int,array(int),array(long),*(struct(int,int,*`,*`)),long,*(long),long,long,long,int,struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,*(struct),*(*(struct`)),long,struct(short,char,char,char,char),*(char),*(struct),int,int,array(struct(short,short)),*(struct(long,long)),*(struct(long,long)),int,array(*(char)))),long,long,long,long)->(void)
(	O
edit	*(struct)
,	O
b	*(void)
,	O
row	long
,	O
0	int
,	O
edit	*(struct)
->	O
num_widget_columns	int
-	O
1	int
)	O
;	O
}	O
static	O
void	O
render_edit_text	(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),int,int,*(char),*(char),long,long,array(*(char)),array(*(char)),long,int,long,long,long,long,long,long,long,int,int,int,int,int,int,int,int,long,long,long,long,long,long,int,int,long,int,array(int),array(long),*(struct(int,int,*`,*`)),long,*(long),long,long,long,int,struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,*(struct),*(*(struct`)),long,struct(short,char,char,char,char),*(char),*(struct),int,int,array(struct(short,short)),*(struct(long,long)),*(struct(long,long)),int,array(*(char)))),long,long,long,long)->(void)
(	O
WEdit	struct
*	O
edit	*(struct)
,	O
long	O
start_row	long
,	O
long	O
start_column	long
,	O
long	O
end_row	long
,	O
long	O
end_column	long
)	O
{	O
long	O
row	long
=	O
0	int
,	O
curs_row	long
;	O
static	O
int	O
prev_curs_row	int
=	O
0	int
;	O
static	O
long	O
prev_curs	long
=	O
0	int
;	O
int	O
force	int
=	O
edit	*(struct)
->	O
force	int
;	O
long	O
b	*(void)
;	O
if	O
(	O
(	O
!	O
(	O
force	int
&	O
REDRAW_CHAR_ONLY	O
)	O
)	O
||	O
(	O
force	int
&	O
REDRAW_PAGE	O
)	O
)	O
{	O
if	O
(	O
!	O
(	O
force	int
&	O
REDRAW_IN_BOUNDS	O
)	O
)	O
{	O
start_row	long
=	O
0	int
;	O
end_row	long
=	O
edit	*(struct)
->	O
num_widget_lines	int
-	O
1	int
;	O
start_column	long
=	O
0	int
;	O
end_column	long
=	O
edit	*(struct)
->	O
num_widget_columns	int
-	O
1	int
;	O
}	O
if	O
(	O
force	int
&	O
REDRAW_PAGE	O
)	O
{	O
row	long
=	O
start_row	long
;	O
b	*(void)
=	O
edit_move_forward	(*(struct),long,int,long)->(long)
(	O
edit	*(struct)
,	O
edit	*(struct)
->	O
start_display	long
,	O
start_row	long
,	O
0	int
)	O
;	O
while	O
(	O
row	long
<=	O
end_row	long
)	O
{	O
if	O
(	O
key_pending	O
(	O
edit	*(struct)
)	O
)	O
goto	O
exit_render	O
;	O
edit_draw_this_line	(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),int,int,*(char),*(char),long,long,array(*(char)),array(*(char)),long,int,long,long,long,long,long,long,long,int,int,int,int,int,int,int,int,long,long,long,long,long,long,int,int,long,int,array(int),array(long),*(struct(int,int,*`,*`)),long,*(long),long,long,long,int,struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,*(struct),*(*(struct`)),long,struct(short,char,char,char,char),*(char),*(struct),int,int,array(struct(short,short)),*(struct(long,long)),*(struct(long,long)),int,array(*(char)))),long,long,long,long)->(void)
(	O
edit	*(struct)
,	O
b	*(void)
,	O
row	long
,	O
start_column	long
,	O
end_column	long
)	O
;	O
b	*(void)
=	O
edit_move_forward	(*(struct),long,int,long)->(long)
(	O
edit	*(struct)
,	O
b	*(void)
,	O
1	int
,	O
0	int
)	O
;	O
row	long
++	O
;	O
}	O
}	O
else	O
{	O
curs_row	long
=	O
edit	*(struct)
->	O
curs_row	long
;	O
if	O
(	O
force	int
&	O
REDRAW_BEFORE_CURSOR	O
)	O
{	O
if	O
(	O
start_row	long
<	O
curs_row	long
)	O
{	O
long	O
upto	int
=	O
curs_row	long
-	O
1	int
<=	O
end_row	long
?	O
curs_row	long
-	O
1	int
:	O
end_row	long
;	O
row	long
=	O
start_row	long
;	O
b	*(void)
=	O
edit	*(struct)
->	O
start_display	long
;	O
while	O
(	O
row	long
<=	O
upto	int
)	O
{	O
if	O
(	O
key_pending	O
(	O
edit	*(struct)
)	O
)	O
goto	O
exit_render	O
;	O
edit_draw_this_line	(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),int,int,*(char),*(char),long,long,array(*(char)),array(*(char)),long,int,long,long,long,long,long,long,long,int,int,int,int,int,int,int,int,long,long,long,long,long,long,int,int,long,int,array(int),array(long),*(struct(int,int,*`,*`)),long,*(long),long,long,long,int,struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,*(struct),*(*(struct`)),long,struct(short,char,char,char,char),*(char),*(struct),int,int,array(struct(short,short)),*(struct(long,long)),*(struct(long,long)),int,array(*(char)))),long,long,long,long)->(void)
(	O
edit	*(struct)
,	O
b	*(void)
,	O
row	long
,	O
start_column	long
,	O
end_column	long
)	O
;	O
b	*(void)
=	O
edit_move_forward	(*(struct),long,int,long)->(long)
(	O
edit	*(struct)
,	O
b	*(void)
,	O
1	int
,	O
0	int
)	O
;	O
}	O
}	O
}	O
b	*(void)
=	O
edit_bol	(*(struct),long)->(long)
(	O
edit	*(struct)
,	O
edit	*(struct)
->	O
curs1	long
)	O
;	O
if	O
(	O
curs_row	long
>=	O
start_row	long
&&	O
curs_row	long
<=	O
end_row	long
)	O
{	O
if	O
(	O
key_pending	O
(	O
edit	*(struct)
)	O
)	O
goto	O
exit_render	O
;	O
edit_draw_this_line	(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),int,int,*(char),*(char),long,long,array(*(char)),array(*(char)),long,int,long,long,long,long,long,long,long,int,int,int,int,int,int,int,int,long,long,long,long,long,long,int,int,long,int,array(int),array(long),*(struct(int,int,*`,*`)),long,*(long),long,long,long,int,struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,*(struct),*(*(struct`)),long,struct(short,char,char,char,char),*(char),*(struct),int,int,array(struct(short,short)),*(struct(long,long)),*(struct(long,long)),int,array(*(char)))),long,long,long,long)->(void)
(	O
edit	*(struct)
,	O
b	*(void)
,	O
curs_row	long
,	O
start_column	long
,	O
end_column	long
)	O
;	O
}	O
if	O
(	O
force	int
&	O
REDRAW_AFTER_CURSOR	O
)	O
{	O
if	O
(	O
end_row	long
>	O
curs_row	long
)	O
{	O
row	long
=	O
curs_row	long
+	O
1	int
<	O
start_row	long
?	O
start_row	long
:	O
curs_row	long
+	O
1	int
;	O
b	*(void)
=	O
edit_move_forward	(*(struct),long,int,long)->(long)
(	O
edit	*(struct)
,	O
b	*(void)
,	O
1	int
,	O
0	int
)	O
;	O
while	O
(	O
row	long
<=	O
end_row	long
)	O
{	O
if	O
(	O
key_pending	O
(	O
edit	*(struct)
)	O
)	O
goto	O
exit_render	O
;	O
edit_draw_this_line	(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),int,int,*(char),*(char),long,long,array(*(char)),array(*(char)),long,int,long,long,long,long,long,long,long,int,int,int,int,int,int,int,int,long,long,long,long,long,long,int,int,long,int,array(int),array(long),*(struct(int,int,*`,*`)),long,*(long),long,long,long,int,struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,*(struct),*(*(struct`)),long,struct(short,char,char,char,char),*(char),*(struct),int,int,array(struct(short,short)),*(struct(long,long)),*(struct(long,long)),int,array(*(char)))),long,long,long,long)->(void)
(	O
edit	*(struct)
,	O
b	*(void)
,	O
row	long
,	O
start_column	long
,	O
end_column	long
)	O
;	O
b	*(void)
=	O
edit_move_forward	(*(struct),long,int,long)->(long)
(	O
edit	*(struct)
,	O
b	*(void)
,	O
1	int
,	O
0	int
)	O
;	O
row	long
++	O
;	O
}	O
}	O
}	O
if	O
(	O
force	int
&	O
REDRAW_LINE_ABOVE	O
&&	O
curs_row	long
>=	O
1	int
)	O
{	O
row	long
=	O
curs_row	long
-	O
1	int
;	O
b	*(void)
=	O
edit_move_backward	(*(struct),long,int)->(long)
(	O
edit	*(struct)
,	O
edit_bol	(*(struct),long)->(long)
(	O
edit	*(struct)
,	O
edit	*(struct)
->	O
curs1	long
)	O
,	O
1	int
)	O
;	O
if	O
(	O
row	long
>=	O
start_row	long
&&	O
row	long
<=	O
end_row	long
)	O
{	O
if	O
(	O
key_pending	O
(	O
edit	*(struct)
)	O
)	O
goto	O
exit_render	O
;	O
edit_draw_this_line	(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),int,int,*(char),*(char),long,long,array(*(char)),array(*(char)),long,int,long,long,long,long,long,long,long,int,int,int,int,int,int,int,int,long,long,long,long,long,long,int,int,long,int,array(int),array(long),*(struct(int,int,*`,*`)),long,*(long),long,long,long,int,struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,*(struct),*(*(struct`)),long,struct(short,char,char,char,char),*(char),*(struct),int,int,array(struct(short,short)),*(struct(long,long)),*(struct(long,long)),int,array(*(char)))),long,long,long,long)->(void)
(	O
edit	*(struct)
,	O
b	*(void)
,	O
row	long
,	O
start_column	long
,	O
end_column	long
)	O
;	O
}	O
}	O
if	O
(	O
force	int
&	O
REDRAW_LINE_BELOW	O
&&	O
row	long
<	O
edit	*(struct)
->	O
num_widget_lines	int
-	O
1	int
)	O
{	O
row	long
=	O
curs_row	long
+	O
1	int
;	O
b	*(void)
=	O
edit_bol	(*(struct),long)->(long)
(	O
edit	*(struct)
,	O
edit	*(struct)
->	O
curs1	long
)	O
;	O
b	*(void)
=	O
edit_move_forward	(*(struct),long,int,long)->(long)
(	O
edit	*(struct)
,	O
b	*(void)
,	O
1	int
,	O
0	int
)	O
;	O
if	O
(	O
row	long
>=	O
start_row	long
&&	O
row	long
<=	O
end_row	long
)	O
{	O
if	O
(	O
key_pending	O
(	O
edit	*(struct)
)	O
)	O
goto	O
exit_render	O
;	O
edit_draw_this_line	(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),int,int,*(char),*(char),long,long,array(*(char)),array(*(char)),long,int,long,long,long,long,long,long,long,int,int,int,int,int,int,int,int,long,long,long,long,long,long,int,int,long,int,array(int),array(long),*(struct(int,int,*`,*`)),long,*(long),long,long,long,int,struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,*(struct),*(*(struct`)),long,struct(short,char,char,char,char),*(char),*(struct),int,int,array(struct(short,short)),*(struct(long,long)),*(struct(long,long)),int,array(*(char)))),long,long,long,long)->(void)
(	O
edit	*(struct)
,	O
b	*(void)
,	O
row	long
,	O
start_column	long
,	O
end_column	long
)	O
;	O
}	O
}	O
}	O
}	O
else	O
{	O
if	O
(	O
prev_curs_row	int
<	O
edit	*(struct)
->	O
curs_row	long
)	O
{	O
edit_draw_this_char	(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),int,int,*(char),*(char),long,long,array(*(char)),array(*(char)),long,int,long,long,long,long,long,long,long,int,int,int,int,int,int,int,int,long,long,long,long,long,long,int,int,long,int,array(int),array(long),*(struct(int,int,*`,*`)),long,*(long),long,long,long,int,struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,*(struct),*(*(struct`)),long,struct(short,char,char,char,char),*(char),*(struct),int,int,array(struct(short,short)),*(struct(long,long)),*(struct(long,long)),int,array(*(char)))),long,long)->(void)
(	O
edit	*(struct)
,	O
prev_curs	long
,	O
prev_curs_row	int
)	O
;	O
edit_draw_this_char	(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),int,int,*(char),*(char),long,long,array(*(char)),array(*(char)),long,int,long,long,long,long,long,long,long,int,int,int,int,int,int,int,int,long,long,long,long,long,long,int,int,long,int,array(int),array(long),*(struct(int,int,*`,*`)),long,*(long),long,long,long,int,struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,*(struct),*(*(struct`)),long,struct(short,char,char,char,char),*(char),*(struct),int,int,array(struct(short,short)),*(struct(long,long)),*(struct(long,long)),int,array(*(char)))),long,long)->(void)
(	O
edit	*(struct)
,	O
edit	*(struct)
->	O
curs1	long
,	O
edit	*(struct)
->	O
curs_row	long
)	O
;	O
}	O
else	O
{	O
edit_draw_this_char	(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),int,int,*(char),*(char),long,long,array(*(char)),array(*(char)),long,int,long,long,long,long,long,long,long,int,int,int,int,int,int,int,int,long,long,long,long,long,long,int,int,long,int,array(int),array(long),*(struct(int,int,*`,*`)),long,*(long),long,long,long,int,struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,*(struct),*(*(struct`)),long,struct(short,char,char,char,char),*(char),*(struct),int,int,array(struct(short,short)),*(struct(long,long)),*(struct(long,long)),int,array(*(char)))),long,long)->(void)
(	O
edit	*(struct)
,	O
edit	*(struct)
->	O
curs1	long
,	O
edit	*(struct)
->	O
curs_row	long
)	O
;	O
edit_draw_this_char	(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),int,int,*(char),*(char),long,long,array(*(char)),array(*(char)),long,int,long,long,long,long,long,long,long,int,int,int,int,int,int,int,int,long,long,long,long,long,long,int,int,long,int,array(int),array(long),*(struct(int,int,*`,*`)),long,*(long),long,long,long,int,struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,*(struct),*(*(struct`)),long,struct(short,char,char,char,char),*(char),*(struct),int,int,array(struct(short,short)),*(struct(long,long)),*(struct(long,long)),int,array(*(char)))),long,long)->(void)
(	O
edit	*(struct)
,	O
prev_curs	long
,	O
prev_curs_row	int
)	O
;	O
}	O
}	O
edit	*(struct)
->	O
force	int
=	O
0	int
;	O
prev_curs_row	int
=	O
edit	*(struct)
->	O
curs_row	long
;	O
prev_curs	long
=	O
edit	*(struct)
->	O
curs1	long
;	O
exit_render	O
:	O
edit	*(struct)
->	O
screen_modified	int
=	O
0	int
;	O
return	O
;	O
}	O
static	O
void	O
edit_render	(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),int,int,*(char),*(char),long,long,array(*(char)),array(*(char)),long,int,long,long,long,long,long,long,long,int,int,int,int,int,int,int,int,long,long,long,long,long,long,int,int,long,int,array(int),array(long),*(struct(int,int,*`,*`)),long,*(long),long,long,long,int,struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,*(struct),*(*(struct`)),long,struct(short,char,char,char,char),*(char),*(struct),int,int,array(struct(short,short)),*(struct(long,long)),*(struct(long,long)),int,array(*(char)))),int,int,int,int,int)->(void)
(	O
WEdit	struct
*	O
edit	*(struct)
,	O
int	O
page	int
,	O
int	O
row_start	int
,	O
int	O
col_start	int
,	O
int	O
row_end	int
,	O
int	O
col_end	int
)	O
{	O
if	O
(	O
page	int
)	O
edit	*(struct)
->	O
force	int
|=	O
REDRAW_PAGE	O
|	O
REDRAW_IN_BOUNDS	O
;	O
if	O
(	O
edit	*(struct)
->	O
force	int
&	O
REDRAW_COMPLETELY	O
)	O
buttonbar_redraw	(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))))->(void)
(	O
edit	*(struct)
->	O
widget	*(struct)
.	O
parent	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`)))))
)	O
;	O
render_edit_text	(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),int,int,*(char),*(char),long,long,array(*(char)),array(*(char)),long,int,long,long,long,long,long,long,long,int,int,int,int,int,int,int,int,long,long,long,long,long,long,int,int,long,int,array(int),array(long),*(struct(int,int,*`,*`)),long,*(long),long,long,long,int,struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,*(struct),*(*(struct`)),long,struct(short,char,char,char,char),*(char),*(struct),int,int,array(struct(short,short)),*(struct(long,long)),*(struct(long,long)),int,array(*(char)))),long,long,long,long)->(void)
(	O
edit	*(struct)
,	O
row_start	int
,	O
col_start	int
,	O
row_end	int
,	O
col_end	int
)	O
;	O
if	O
(	O
edit	*(struct)
->	O
force	int
)	O
edit	*(struct)
->	O
force	int
|=	O
REDRAW_PAGE	O
;	O
}	O
void	O
edit_render_keypress	(*(struct))->(void)
(	O
WEdit	struct
*	O
edit	*(struct)
)	O
{	O
edit_render	(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),int,int,*(char),*(char),long,long,array(*(char)),array(*(char)),long,int,long,long,long,long,long,long,long,int,int,int,int,int,int,int,int,long,long,long,long,long,long,int,int,long,int,array(int),array(long),*(struct(int,int,*`,*`)),long,*(long),long,long,long,int,struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,*(struct),*(*(struct`)),long,struct(short,char,char,char,char),*(char),*(struct),int,int,array(struct(short,short)),*(struct(long,long)),*(struct(long,long)),int,array(*(char)))),int,int,int,int,int)->(void)
(	O
edit	*(struct)
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
)	O
;	O
}	O
