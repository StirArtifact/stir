mp_limb_t	long
mpn_divrem	O
(	O
mp_ptr	*(long)
qp	*(long)
,	O
mp_size_t	long
qxn	long
,	O
mp_ptr	*(long)
np	*(long)
,	O
mp_size_t	long
nn	long
,	O
mp_srcptr	*(long)
dp	*(long)
,	O
mp_size_t	long
dn	long
)	O
{	O
ASSERT	O
(	O
qxn	long
>=	O
0	int
)	O
;	O
ASSERT	O
(	O
nn	long
>=	O
dn	long
)	O
;	O
ASSERT	O
(	O
dn	long
>=	O
1	int
)	O
;	O
ASSERT	O
(	O
dp	*(long)
[	O
dn	long
-	O
1	int
]	O
&	O
GMP_NUMB_HIGHBIT	O
)	O
;	O
ASSERT	O
(	O
!	O
MPN_OVERLAP_P	O
(	O
np	*(long)
,	O
nn	long
,	O
dp	*(long)
,	O
dn	long
)	O
)	O
;	O
ASSERT	O
(	O
!	O
MPN_OVERLAP_P	O
(	O
qp	*(long)
,	O
nn	long
-	O
dn	long
+	O
qxn	long
,	O
np	*(long)
,	O
nn	long
)	O
||	O
qp	*(long)
==	O
np	*(long)
+	O
dn	long
+	O
qxn	long
)	O
;	O
ASSERT	O
(	O
!	O
MPN_OVERLAP_P	O
(	O
qp	*(long)
,	O
nn	long
-	O
dn	long
+	O
qxn	long
,	O
dp	*(long)
,	O
dn	long
)	O
)	O
;	O
ASSERT_MPN	O
(	O
np	*(long)
,	O
nn	long
)	O
;	O
ASSERT_MPN	O
(	O
dp	*(long)
,	O
dn	long
)	O
;	O
if	O
(	O
dn	long
==	O
1	int
)	O
{	O
mp_limb_t	long
ret	long
;	O
mp_ptr	*(long)
q2p	*(long)
;	O
mp_size_t	long
qn	long
;	O
TMP_DECL	O
;	O
TMP_MARK	O
;	O
q2p	*(long)
=	O
TMP_ALLOC_LIMBS	O
(	O
nn	long
+	O
qxn	long
)	O
;	O
np	*(long)
[	O
0	int
]	O
=	O
mpn_divrem_1	O
(	O
q2p	*(long)
,	O
qxn	long
,	O
np	*(long)
,	O
nn	long
,	O
dp	*(long)
[	O
0	int
]	O
)	O
;	O
qn	long
=	O
nn	long
+	O
qxn	long
-	O
1	int
;	O
MPN_COPY	O
(	O
qp	*(long)
,	O
q2p	*(long)
,	O
qn	long
)	O
;	O
ret	long
=	O
q2p	*(long)
[	O
qn	long
]	O
;	O
TMP_FREE	O
;	O
return	O
ret	long
;	O
}	O
else	O
if	O
(	O
dn	long
==	O
2	int
)	O
{	O
return	O
mpn_divrem_2	O
(	O
qp	*(long)
,	O
qxn	long
,	O
np	*(long)
,	O
nn	long
,	O
dp	*(long)
)	O
;	O
}	O
else	O
{	O
mp_ptr	*(long)
rp	*(long)
,	O
q2p	*(long)
;	O
mp_limb_t	long
qhl	long
;	O
mp_size_t	long
qn	long
;	O
TMP_DECL	O
;	O
TMP_MARK	O
;	O
if	O
(	O
UNLIKELY	O
(	O
qxn	long
!=	O
0	int
)	O
)	O
{	O
mp_ptr	*(long)
n2p	*(long)
;	O
n2p	*(long)
=	O
TMP_ALLOC_LIMBS	O
(	O
nn	long
+	O
qxn	long
)	O
;	O
MPN_ZERO	O
(	O
n2p	*(long)
,	O
qxn	long
)	O
;	O
MPN_COPY	O
(	O
n2p	*(long)
+	O
qxn	long
,	O
np	*(long)
,	O
nn	long
)	O
;	O
q2p	*(long)
=	O
TMP_ALLOC_LIMBS	O
(	O
nn	long
-	O
dn	long
+	O
qxn	long
+	O
1	int
)	O
;	O
rp	*(long)
=	O
TMP_ALLOC_LIMBS	O
(	O
dn	long
)	O
;	O
mpn_tdiv_qr	O
(	O
q2p	*(long)
,	O
rp	*(long)
,	O
0L	int
,	O
n2p	*(long)
,	O
nn	long
+	O
qxn	long
,	O
dp	*(long)
,	O
dn	long
)	O
;	O
MPN_COPY	O
(	O
np	*(long)
,	O
rp	*(long)
,	O
dn	long
)	O
;	O
qn	long
=	O
nn	long
-	O
dn	long
+	O
qxn	long
;	O
MPN_COPY	O
(	O
qp	*(long)
,	O
q2p	*(long)
,	O
qn	long
)	O
;	O
qhl	long
=	O
q2p	*(long)
[	O
qn	long
]	O
;	O
}	O
else	O
{	O
q2p	*(long)
=	O
TMP_ALLOC_LIMBS	O
(	O
nn	long
-	O
dn	long
+	O
1	int
)	O
;	O
rp	*(long)
=	O
TMP_ALLOC_LIMBS	O
(	O
dn	long
)	O
;	O
mpn_tdiv_qr	O
(	O
q2p	*(long)
,	O
rp	*(long)
,	O
0L	int
,	O
np	*(long)
,	O
nn	long
,	O
dp	*(long)
,	O
dn	long
)	O
;	O
MPN_COPY	O
(	O
np	*(long)
,	O
rp	*(long)
,	O
dn	long
)	O
;	O
qn	long
=	O
nn	long
-	O
dn	long
;	O
MPN_COPY	O
(	O
qp	*(long)
,	O
q2p	*(long)
,	O
qn	long
)	O
;	O
qhl	long
=	O
q2p	*(long)
[	O
qn	long
]	O
;	O
}	O
TMP_FREE	O
;	O
return	O
qhl	long
;	O
}	O
}	O
