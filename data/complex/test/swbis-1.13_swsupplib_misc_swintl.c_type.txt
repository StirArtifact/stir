const	O
struct	O
swintl_lang_map	struct(*(char),*(char))
swintl_lang_table	array(struct(*(char),*(char)))
[	O
]	O
=	O
{	O
{	O
"C"	*(char)
,	O
""	*(char)
}	O
,	O
{	O
"da"	*(char)
,	O
"Danish"	*(char)
}	O
,	O
{	O
"de"	*(char)
,	O
"German"	*(char)
}	O
,	O
{	O
"cs"	*(char)
,	O
"Czech"	*(char)
}	O
,	O
{	O
"en"	*(char)
,	O
"English"	*(char)
}	O
,	O
{	O
"es"	*(char)
,	O
"Spanish"	*(char)
}	O
,	O
{	O
"fi"	*(char)
,	O
"Finnish"	*(char)
}	O
,	O
{	O
"fr"	*(char)
,	O
"French"	*(char)
}	O
,	O
{	O
"hy"	*(char)
,	O
"Armenian"	*(char)
}	O
,	O
{	O
"hr"	*(char)
,	O
"Croatian"	*(char)
}	O
,	O
{	O
"hu"	*(char)
,	O
"Hungarian"	*(char)
}	O
,	O
{	O
"in"	*(char)
,	O
"Indonesian"	*(char)
}	O
,	O
{	O
"is"	*(char)
,	O
"Icelandic"	*(char)
}	O
,	O
{	O
"it"	*(char)
,	O
"Italian"	*(char)
}	O
,	O
{	O
"iw"	*(char)
,	O
"Hebrew"	*(char)
}	O
,	O
{	O
"ja"	*(char)
,	O
"Japanese"	*(char)
}	O
,	O
{	O
"ji"	*(char)
,	O
"Yiddish"	*(char)
}	O
,	O
{	O
"jw"	*(char)
,	O
"Javanese"	*(char)
}	O
,	O
{	O
"ko"	*(char)
,	O
"Korean"	*(char)
}	O
,	O
{	O
"no"	*(char)
,	O
"Norwegian"	*(char)
}	O
,	O
{	O
"pl"	*(char)
,	O
"Polish"	*(char)
}	O
,	O
{	O
"pt"	*(char)
,	O
"Portuguese"	*(char)
}	O
,	O
{	O
"pt_BR"	*(char)
,	O
"pt_BR"	*(char)
}	O
,	O
{	O
"ru"	*(char)
,	O
"Russian"	*(char)
}	O
,	O
{	O
"sk"	*(char)
,	O
"Slovak"	*(char)
}	O
,	O
{	O
"sv"	*(char)
,	O
"Swedish"	*(char)
}	O
,	O
{	O
"tr"	*(char)
,	O
"Turkish"	*(char)
}	O
,	O
{	O
"zh"	*(char)
,	O
"Chinese"	*(char)
}	O
,	O
{	O
(	O
char	O
*	O
)	O
NULL	O
,	O
(	O
char	O
*	O
)	O
(	O
NULL	O
)	O
}	O
}	O
;	O
char	O
*	O
swintl_get_lang_code	(*(char))->(*(char))
(	O
char	O
*	O
lang_name	*(char)
)	O
{	O
int	O
i	int
=	O
0	int
;	O
while	O
(	O
swintl_lang_table	array(struct(*(char),*(char)))
[	O
i	int
]	O
.	O
language_code_	*(char)
!=	O
NULL	O
)	O
{	O
if	O
(	O
!	O
strcmp	(*(char),*(char))->(int)
(	O
lang_name	*(char)
,	O
swintl_lang_table	array(struct(*(char),*(char)))
[	O
i	int
]	O
.	O
language_name_	*(char)
)	O
)	O
return	O
swintl_lang_table	array(struct(*(char),*(char)))
[	O
i	int
]	O
.	O
language_code_	*(char)
;	O
i	int
++	O
;	O
}	O
return	O
NULL	O
;	O
}	O
char	O
*	O
swintl_get_lang_name	(*(char))->(*(char))
(	O
char	O
*	O
lang_code	*(char)
)	O
{	O
int	O
i	int
=	O
0	int
;	O
while	O
(	O
swintl_lang_table	array(struct(*(char),*(char)))
[	O
i	int
]	O
.	O
language_code_	*(char)
!=	O
NULL	O
)	O
{	O
if	O
(	O
!	O
strcmp	(*(char),*(char))->(int)
(	O
lang_code	*(char)
,	O
swintl_lang_table	array(struct(*(char),*(char)))
[	O
i	int
]	O
.	O
language_code_	*(char)
)	O
)	O
return	O
swintl_lang_table	array(struct(*(char),*(char)))
[	O
i	int
]	O
.	O
language_name_	*(char)
;	O
i	int
++	O
;	O
}	O
return	O
NULL	O
;	O
}	O
