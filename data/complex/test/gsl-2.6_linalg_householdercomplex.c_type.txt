gsl_complex	struct(array(double))
gsl_linalg_complex_householder_transform	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(struct(array(double)))
(	O
gsl_vector_complex	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
)	O
{	O
const	O
size_t	long
n	int
=	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
size	long
;	O
if	O
(	O
n	int
==	O
1	int
)	O
{	O
gsl_complex	struct(array(double))
alpha	long double
=	O
gsl_vector_complex_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(struct(array(double)))
(	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
,	O
0	int
)	O
;	O
double	O
absa	double
=	O
gsl_complex_abs	(struct(array(double)))->(double)
(	O
alpha	long double
)	O
;	O
double	O
beta_r	double
=	O
-	O
(	O
GSL_REAL	O
(	O
alpha	long double
)	O
>=	O
0	int
?	O
+	O
1	int
:	O
-	O
1	int
)	O
*	O
absa	double
;	O
gsl_complex	struct(array(double))
tau	double
;	O
if	O
(	O
beta_r	double
==	O
0.0	int
)	O
{	O
GSL_REAL	O
(	O
tau	double
)	O
=	O
0.0	int
;	O
GSL_IMAG	O
(	O
tau	double
)	O
=	O
0.0	int
;	O
}	O
else	O
{	O
GSL_REAL	O
(	O
tau	double
)	O
=	O
(	O
beta_r	double
-	O
GSL_REAL	O
(	O
alpha	long double
)	O
)	O
/	O
beta_r	double
;	O
GSL_IMAG	O
(	O
tau	double
)	O
=	O
-	O
GSL_IMAG	O
(	O
alpha	long double
)	O
/	O
beta_r	double
;	O
{	O
gsl_complex	struct(array(double))
beta	long double
=	O
gsl_complex_rect	(double,double)->(struct(array(double)))
(	O
beta_r	double
,	O
0.0	int
)	O
;	O
gsl_vector_complex_set	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,struct(array(double)))->(void)
(	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
,	O
0	int
,	O
beta	long double
)	O
;	O
}	O
}	O
return	O
tau	double
;	O
}	O
else	O
{	O
gsl_complex	struct(array(double))
tau	double
;	O
double	O
beta_r	double
;	O
gsl_vector_complex_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
x	double
=	O
gsl_vector_complex_subvector	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
,	O
1	int
,	O
n	int
-	O
1	int
)	O
;	O
gsl_complex	struct(array(double))
alpha	long double
=	O
gsl_vector_complex_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(struct(array(double)))
(	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
,	O
0	int
)	O
;	O
double	O
absa	double
=	O
gsl_complex_abs	(struct(array(double)))->(double)
(	O
alpha	long double
)	O
;	O
double	O
xnorm	double
=	O
gsl_blas_dznrm2	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(double)
(	O
&	O
x	double
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
if	O
(	O
xnorm	double
==	O
0	int
&&	O
GSL_IMAG	O
(	O
alpha	long double
)	O
==	O
0	int
)	O
{	O
gsl_complex	struct(array(double))
zero	struct(array(double))
=	O
gsl_complex_rect	(double,double)->(struct(array(double)))
(	O
0.0	int
,	O
0.0	int
)	O
;	O
return	O
zero	struct(array(double))
;	O
}	O
beta_r	double
=	O
-	O
(	O
GSL_REAL	O
(	O
alpha	long double
)	O
>=	O
0	int
?	O
+	O
1	int
:	O
-	O
1	int
)	O
*	O
hypot	(double,double)->(double)
(	O
absa	double
,	O
xnorm	double
)	O
;	O
GSL_REAL	O
(	O
tau	double
)	O
=	O
(	O
beta_r	double
-	O
GSL_REAL	O
(	O
alpha	long double
)	O
)	O
/	O
beta_r	double
;	O
GSL_IMAG	O
(	O
tau	double
)	O
=	O
-	O
GSL_IMAG	O
(	O
alpha	long double
)	O
/	O
beta_r	double
;	O
{	O
gsl_complex	struct(array(double))
amb	struct(array(double))
=	O
gsl_complex_sub_real	(struct(array(double)),double)->(struct(array(double)))
(	O
alpha	long double
,	O
beta_r	double
)	O
;	O
gsl_complex	struct(array(double))
s	*(float)
=	O
gsl_complex_inverse	(struct(array(double)))->(struct(array(double)))
(	O
amb	struct(array(double))
)	O
;	O
gsl_blas_zscal	(struct(array(double)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
s	*(float)
,	O
&	O
x	double
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
}	O
{	O
gsl_complex	struct(array(double))
beta	long double
=	O
gsl_complex_rect	(double,double)->(struct(array(double)))
(	O
beta_r	double
,	O
0.0	int
)	O
;	O
gsl_vector_complex_set	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,struct(array(double)))->(void)
(	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
,	O
0	int
,	O
beta	long double
)	O
;	O
}	O
return	O
tau	double
;	O
}	O
}	O
int	O
gsl_linalg_complex_householder_hv	(struct(array(double)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
gsl_complex	struct(array(double))
tau	double
,	O
const	O
gsl_vector_complex	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
,	O
gsl_vector_complex	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
)	O
{	O
const	O
size_t	long
N	int
=	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
size	long
;	O
if	O
(	O
GSL_REAL	O
(	O
tau	double
)	O
==	O
0.0	int
&&	O
GSL_IMAG	O
(	O
tau	double
)	O
==	O
0.0	int
)	O
return	O
GSL_SUCCESS	int
;	O
{	O
gsl_complex	struct(array(double))
z0	struct(array(double))
=	O
gsl_vector_complex_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(struct(array(double)))
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
,	O
0	int
)	O
;	O
gsl_complex	struct(array(double))
z1	struct(array(double))
,	O
z	double
;	O
gsl_complex	struct(array(double))
tz	struct(array(double))
,	O
ntz	struct(array(double))
;	O
gsl_vector_complex_const_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
v1	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_vector_complex_const_subvector	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
,	O
1	int
,	O
N	int
-	O
1	int
)	O
;	O
gsl_vector_complex_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
w1	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_vector_complex_subvector	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
,	O
1	int
,	O
N	int
-	O
1	int
)	O
;	O
gsl_blas_zdotc	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(array(double))))->(int)
(	O
&	O
v1	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
w1	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
z1	struct(array(double))
)	O
;	O
z	double
=	O
gsl_complex_add	(struct(array(double)),struct(array(double)))->(struct(array(double)))
(	O
z0	struct(array(double))
,	O
z1	struct(array(double))
)	O
;	O
tz	struct(array(double))
=	O
gsl_complex_mul	(struct(array(double)),struct(array(double)))->(struct(array(double)))
(	O
tau	double
,	O
z	double
)	O
;	O
ntz	struct(array(double))
=	O
gsl_complex_negative	(struct(array(double)))->(struct(array(double)))
(	O
tz	struct(array(double))
)	O
;	O
{	O
gsl_complex	struct(array(double))
w0	struct(array(double))
=	O
gsl_vector_complex_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(struct(array(double)))
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
,	O
0	int
)	O
;	O
gsl_complex	struct(array(double))
w0ntz	struct(array(double))
=	O
gsl_complex_add	(struct(array(double)),struct(array(double)))->(struct(array(double)))
(	O
w0	struct(array(double))
,	O
ntz	struct(array(double))
)	O
;	O
gsl_vector_complex_set	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,struct(array(double)))->(void)
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
,	O
0	int
,	O
w0ntz	struct(array(double))
)	O
;	O
}	O
gsl_blas_zaxpy	(struct(array(double)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
ntz	struct(array(double))
,	O
&	O
v1	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
w1	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
int	O
gsl_linalg_complex_householder_left	(struct(array(double)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
const	O
gsl_complex	struct(array(double))
tau	double
,	O
const	O
gsl_vector_complex	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
,	O
gsl_matrix_complex	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
A	*(float)
,	O
gsl_vector_complex	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
{	O
const	O
size_t	long
M	int
=	O
A	*(float)
->	O
size1	long
;	O
const	O
size_t	long
N	int
=	O
A	*(float)
->	O
size2	long
;	O
if	O
(	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
size	long
!=	O
M	int
)	O
{	O
GSL_ERROR	O
(	O
"matrix must match Householder vector dimensions"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
->	O
size	long
!=	O
N	int
)	O
{	O
GSL_ERROR	O
(	O
"workspace must match matrix"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
gsl_complex	struct(array(double))
v0	struct(array(double))
,	O
mtau	struct(array(double))
;	O
if	O
(	O
GSL_REAL	O
(	O
tau	double
)	O
==	O
0.0	int
&&	O
GSL_IMAG	O
(	O
tau	double
)	O
==	O
0.0	int
)	O
return	O
GSL_SUCCESS	int
;	O
v0	struct(array(double))
=	O
gsl_vector_complex_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(struct(array(double)))
(	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
,	O
0	int
)	O
;	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
data	*(long double)
[	O
0	int
]	O
=	O
1.0	int
;	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
data	*(long double)
[	O
1	int
]	O
=	O
0.0	int
;	O
gsl_blas_zgemv	(enum(int,int,int),struct(array(double)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),struct(array(double)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
CblasConjTrans	int
,	O
GSL_COMPLEX_ONE	O
,	O
A	*(float)
,	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
,	O
GSL_COMPLEX_ZERO	O
,	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
GSL_REAL	O
(	O
mtau	struct(array(double))
)	O
=	O
-	O
GSL_REAL	O
(	O
tau	double
)	O
;	O
GSL_IMAG	O
(	O
mtau	struct(array(double))
)	O
=	O
-	O
GSL_IMAG	O
(	O
tau	double
)	O
;	O
gsl_blas_zgerc	(struct(array(double)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
mtau	struct(array(double))
,	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
,	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
A	*(float)
)	O
;	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
data	*(long double)
[	O
0	int
]	O
=	O
GSL_REAL	O
(	O
v0	struct(array(double))
)	O
;	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
data	*(long double)
[	O
1	int
]	O
=	O
GSL_IMAG	O
(	O
v0	struct(array(double))
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
int	O
gsl_linalg_complex_householder_hm	(struct(array(double)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
gsl_complex	struct(array(double))
tau	double
,	O
const	O
gsl_vector_complex	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
,	O
gsl_matrix_complex	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
A	*(float)
)	O
{	O
size_t	long
i	long
,	O
j	long
;	O
if	O
(	O
GSL_REAL	O
(	O
tau	double
)	O
==	O
0.0	int
&&	O
GSL_IMAG	O
(	O
tau	double
)	O
==	O
0.0	int
)	O
{	O
return	O
GSL_SUCCESS	int
;	O
}	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
A	*(float)
->	O
size2	long
;	O
j	long
++	O
)	O
{	O
gsl_complex	struct(array(double))
tauwj	struct(array(double))
;	O
gsl_complex	struct(array(double))
wj	struct(array(double))
=	O
gsl_matrix_complex_get	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long)->(struct(array(double)))
(	O
A	*(float)
,	O
0	int
,	O
j	long
)	O
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<	O
A	*(float)
->	O
size1	long
;	O
i	long
++	O
)	O
{	O
gsl_complex	struct(array(double))
Aij	struct(array(double))
=	O
gsl_matrix_complex_get	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long)->(struct(array(double)))
(	O
A	*(float)
,	O
i	long
,	O
j	long
)	O
;	O
gsl_complex	struct(array(double))
vi	double
=	O
gsl_vector_complex_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(struct(array(double)))
(	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
,	O
i	long
)	O
;	O
gsl_complex	struct(array(double))
Av	struct(array(double))
=	O
gsl_complex_mul	(struct(array(double)),struct(array(double)))->(struct(array(double)))
(	O
Aij	struct(array(double))
,	O
gsl_complex_conjugate	(struct(array(double)))->(struct(array(double)))
(	O
vi	double
)	O
)	O
;	O
wj	struct(array(double))
=	O
gsl_complex_add	(struct(array(double)),struct(array(double)))->(struct(array(double)))
(	O
wj	struct(array(double))
,	O
Av	struct(array(double))
)	O
;	O
}	O
tauwj	struct(array(double))
=	O
gsl_complex_mul	(struct(array(double)),struct(array(double)))->(struct(array(double)))
(	O
tau	double
,	O
wj	struct(array(double))
)	O
;	O
{	O
gsl_complex	struct(array(double))
A0j	struct(array(double))
=	O
gsl_matrix_complex_get	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long)->(struct(array(double)))
(	O
A	*(float)
,	O
0	int
,	O
j	long
)	O
;	O
gsl_complex	struct(array(double))
Atw	struct(array(double))
=	O
gsl_complex_sub	(struct(array(double)),struct(array(double)))->(struct(array(double)))
(	O
A0j	struct(array(double))
,	O
tauwj	struct(array(double))
)	O
;	O
gsl_matrix_complex_set	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,struct(array(double)))->(void)
(	O
A	*(float)
,	O
0	int
,	O
j	long
,	O
Atw	struct(array(double))
)	O
;	O
}	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<	O
A	*(float)
->	O
size1	long
;	O
i	long
++	O
)	O
{	O
gsl_complex	struct(array(double))
vi	double
=	O
gsl_vector_complex_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(struct(array(double)))
(	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
,	O
i	long
)	O
;	O
gsl_complex	struct(array(double))
tauvw	struct(array(double))
=	O
gsl_complex_mul	(struct(array(double)),struct(array(double)))->(struct(array(double)))
(	O
vi	double
,	O
tauwj	struct(array(double))
)	O
;	O
gsl_complex	struct(array(double))
Aij	struct(array(double))
=	O
gsl_matrix_complex_get	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long)->(struct(array(double)))
(	O
A	*(float)
,	O
i	long
,	O
j	long
)	O
;	O
gsl_complex	struct(array(double))
Atwv	struct(array(double))
=	O
gsl_complex_sub	(struct(array(double)),struct(array(double)))->(struct(array(double)))
(	O
Aij	struct(array(double))
,	O
tauvw	struct(array(double))
)	O
;	O
gsl_matrix_complex_set	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,struct(array(double)))->(void)
(	O
A	*(float)
,	O
i	long
,	O
j	long
,	O
Atwv	struct(array(double))
)	O
;	O
}	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
int	O
gsl_linalg_complex_householder_mh	(struct(array(double)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
gsl_complex	struct(array(double))
tau	double
,	O
const	O
gsl_vector_complex	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
,	O
gsl_matrix_complex	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
A	*(float)
)	O
{	O
size_t	long
i	long
,	O
j	long
;	O
if	O
(	O
GSL_REAL	O
(	O
tau	double
)	O
==	O
0.0	int
&&	O
GSL_IMAG	O
(	O
tau	double
)	O
==	O
0.0	int
)	O
{	O
return	O
GSL_SUCCESS	int
;	O
}	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
A	*(float)
->	O
size1	long
;	O
i	long
++	O
)	O
{	O
gsl_complex	struct(array(double))
tauwi	struct(array(double))
;	O
gsl_complex	struct(array(double))
Ai0	struct(array(double))
=	O
gsl_matrix_complex_get	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long)->(struct(array(double)))
(	O
A	*(float)
,	O
i	long
,	O
0	int
)	O
;	O
gsl_complex	struct(array(double))
wi	struct(array(double))
=	O
Ai0	struct(array(double))
;	O
for	O
(	O
j	long
=	O
1	int
;	O
j	long
<	O
A	*(float)
->	O
size2	long
;	O
j	long
++	O
)	O
{	O
gsl_complex	struct(array(double))
Aij	struct(array(double))
=	O
gsl_matrix_complex_get	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long)->(struct(array(double)))
(	O
A	*(float)
,	O
i	long
,	O
j	long
)	O
;	O
gsl_complex	struct(array(double))
vj	double
=	O
gsl_vector_complex_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(struct(array(double)))
(	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
,	O
j	long
)	O
;	O
gsl_complex	struct(array(double))
Av	struct(array(double))
=	O
gsl_complex_mul	(struct(array(double)),struct(array(double)))->(struct(array(double)))
(	O
Aij	struct(array(double))
,	O
vj	double
)	O
;	O
wi	struct(array(double))
=	O
gsl_complex_add	(struct(array(double)),struct(array(double)))->(struct(array(double)))
(	O
wi	struct(array(double))
,	O
Av	struct(array(double))
)	O
;	O
}	O
tauwi	struct(array(double))
=	O
gsl_complex_mul	(struct(array(double)),struct(array(double)))->(struct(array(double)))
(	O
tau	double
,	O
wi	struct(array(double))
)	O
;	O
{	O
gsl_complex	struct(array(double))
Atw	struct(array(double))
=	O
gsl_complex_sub	(struct(array(double)),struct(array(double)))->(struct(array(double)))
(	O
Ai0	struct(array(double))
,	O
tauwi	struct(array(double))
)	O
;	O
gsl_matrix_complex_set	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,struct(array(double)))->(void)
(	O
A	*(float)
,	O
i	long
,	O
0	int
,	O
Atw	struct(array(double))
)	O
;	O
}	O
for	O
(	O
j	long
=	O
1	int
;	O
j	long
<	O
A	*(float)
->	O
size2	long
;	O
j	long
++	O
)	O
{	O
gsl_complex	struct(array(double))
vj	double
=	O
gsl_vector_complex_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(struct(array(double)))
(	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
,	O
j	long
)	O
;	O
gsl_complex	struct(array(double))
tauwv	struct(array(double))
=	O
gsl_complex_mul	(struct(array(double)),struct(array(double)))->(struct(array(double)))
(	O
gsl_complex_conjugate	(struct(array(double)))->(struct(array(double)))
(	O
vj	double
)	O
,	O
tauwi	struct(array(double))
)	O
;	O
gsl_complex	struct(array(double))
Aij	struct(array(double))
=	O
gsl_matrix_complex_get	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long)->(struct(array(double)))
(	O
A	*(float)
,	O
i	long
,	O
j	long
)	O
;	O
gsl_complex	struct(array(double))
Atwv	struct(array(double))
=	O
gsl_complex_sub	(struct(array(double)),struct(array(double)))->(struct(array(double)))
(	O
Aij	struct(array(double))
,	O
tauwv	struct(array(double))
)	O
;	O
gsl_matrix_complex_set	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,struct(array(double)))->(void)
(	O
A	*(float)
,	O
i	long
,	O
j	long
,	O
Atwv	struct(array(double))
)	O
;	O
}	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
