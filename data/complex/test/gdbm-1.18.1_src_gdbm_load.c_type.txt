int	O
replace	int
=	O
0	int
;	O
int	O
meta_mask	int
=	O
0	int
;	O
int	O
no_meta_option	int
;	O
int	O
mode	int
;	O
uid_t	int
owner_uid	int
;	O
gid_t	int
owner_gid	int
;	O
char	O
*	O
parseopt_program_doc	*(char)
=	O
"load a GDBM database from a file"	*(char)
;	O
char	O
*	O
parseopt_program_args	*(char)
=	O
"FILE [DB_FILE]"	*(char)
;	O
struct	O
gdbm_option	struct(int,*(char),*(char),*(char),int)
optab	array(struct(int,*(char),*(char),*(char),int))
[	O
]	O
=	O
{	O
{	O
'r'	O
,	O
"replace"	*(char)
,	O
NULL	O
,	O
N_	O
(	O
"replace records in the existing database"	*(char)
)	O
}	O
,	O
{	O
'm'	O
,	O
"mode"	*(char)
,	O
N_	O
(	O
"MODE"	*(char)
)	O
,	O
N_	O
(	O
"set file mode"	*(char)
)	O
}	O
,	O
{	O
'u'	O
,	O
"user"	*(char)
,	O
N_	O
(	O
"NAME|UID[:NAME|GID]"	*(char)
)	O
,	O
N_	O
(	O
"set file owner"	*(char)
)	O
}	O
,	O
{	O
'n'	O
,	O
"no-meta"	*(char)
,	O
NULL	O
,	O
N_	O
(	O
"do not attempt to set file meta-data"	*(char)
)	O
}	O
,	O
{	O
'M'	O
,	O
"mmap"	*(char)
,	O
NULL	O
,	O
N_	O
(	O
"use memory mapping"	*(char)
)	O
}	O
,	O
{	O
'c'	O
,	O
"cache-size"	*(char)
,	O
N_	O
(	O
"NUM"	*(char)
)	O
,	O
N_	O
(	O
"set the cache size"	*(char)
)	O
}	O
,	O
{	O
'b'	O
,	O
"block-size"	*(char)
,	O
N_	O
(	O
"NUM"	*(char)
)	O
,	O
N_	O
(	O
"set the block size"	*(char)
)	O
}	O
,	O
{	O
0	int
}	O
}	O
;	O
static	O
int	O
set_meta_info	(*(struct(*(char),int,int,int,int,int,int,int,int,int,int,*(char),enum(int,int,int,int),*((*`)->(void)),int,*(struct(int,int,long,int,int,int,int,long,struct`)),*(long),*(struct(*`,long,char,struct`)),long,long,*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int)))),int,*(struct(*`,long,char,struct`)),int,int,int,int,long,*(void),long,long,long)))->(int)
(	O
GDBM_FILE	*(struct)
dbf	*(struct)
)	O
{	O
if	O
(	O
meta_mask	int
)	O
{	O
int	O
fd	int
=	O
gdbm_fdesc	(*(struct))->(int)
(	O
dbf	*(struct)
)	O
;	O
if	O
(	O
meta_mask	int
&	O
GDBM_META_MASK_OWNER	int
)	O
{	O
if	O
(	O
fchown	(int,int,int)->(int)
(	O
fd	int
,	O
owner_uid	int
,	O
owner_gid	int
)	O
)	O
{	O
GDBM_SET_ERRNO	O
(	O
dbf	*(struct)
,	O
GDBM_ERR_FILE_OWNER	int
,	O
FALSE	int
)	O
;	O
return	O
1	int
;	O
}	O
}	O
if	O
(	O
(	O
meta_mask	int
&	O
GDBM_META_MASK_MODE	int
)	O
&&	O
fchmod	(int,int)->(int)
(	O
fd	int
,	O
mode	int
)	O
)	O
{	O
GDBM_SET_ERRNO	O
(	O
dbf	*(struct)
,	O
GDBM_ERR_FILE_OWNER	int
,	O
FALSE	int
)	O
;	O
return	O
1	int
;	O
}	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
get_int	(*(char))->(int)
(	O
const	O
char	O
*	O
arg	*(char)
)	O
{	O
char	O
*	O
p	*(char)
;	O
long	O
n	int
;	O
errno	O
=	O
0	int
;	O
n	int
=	O
strtol	(*(char),*(*(char)),int)->(long)
(	O
arg	*(char)
,	O
&	O
p	*(char)
,	O
0	int
)	O
;	O
if	O
(	O
*	O
p	*(char)
)	O
{	O
error	(*(char))->(void)
(	O
_	O
(	O
"invalid number: %s"	*(char)
)	O
,	O
arg	*(char)
)	O
;	O
exit	(int)->(void)
(	O
EXIT_USAGE	int
)	O
;	O
}	O
if	O
(	O
errno	O
)	O
{	O
error	(*(char))->(void)
(	O
_	O
(	O
"invalid number: %s: %s"	*(char)
)	O
,	O
arg	*(char)
,	O
strerror	(int)->(*(char))
(	O
errno	O
)	O
)	O
;	O
exit	(int)->(void)
(	O
EXIT_USAGE	int
)	O
;	O
}	O
return	O
n	int
;	O
}	O
int	O
main	(int,*(*(char)))->(int)
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	*(*(char))
)	O
{	O
GDBM_FILE	*(struct)
dbf	*(struct)
=	O
NULL	O
;	O
int	O
rc	int
,	O
opt	int
;	O
char	O
*	O
dbname	*(char)
,	O
*	O
filename	*(char)
;	O
FILE	struct
*	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
;	O
unsigned	O
long	O
err_line	long
,	O
n	int
;	O
char	O
*	O
end	*(char)
;	O
int	O
oflags	int
=	O
GDBM_NEWDB	int
|	O
GDBM_NOMMAP	int
;	O
int	O
cache_size	long
=	O
0	int
;	O
int	O
block_size	int
=	O
0	int
;	O
setlocale	(int,*(char))->(*(char))
(	O
LC_ALL	O
,	O
""	*(char)
)	O
;	O
bindtextdomain	(*(char),*(char))->(*(char))
(	O
PACKAGE	*(char)
,	O
LOCALEDIR	O
)	O
;	O
textdomain	(*(char))->(*(char))
(	O
PACKAGE	*(char)
)	O
;	O
set_progname	(*(char))->(void)
(	O
argv	*(*(char))
[	O
0	int
]	O
)	O
;	O
for	O
(	O
opt	int
=	O
parseopt_first	(int,*(*(char)),*(struct(int,*(char),*(char),*(char),int)))->(int)
(	O
argc	int
,	O
argv	*(*(char))
,	O
optab	array(struct(int,*(char),*(char),*(char),int))
)	O
;	O
opt	int
!=	O
EOF	O
;	O
opt	int
=	O
parseopt_next	()->(int)
(	O
)	O
)	O
{	O
switch	O
(	O
opt	int
)	O
{	O
case	O
'b'	O
:	O
block_size	int
=	O
get_int	(*(char))->(int)
(	O
optarg	*(char)
)	O
;	O
break	O
;	O
case	O
'c'	O
:	O
cache_size	long
=	O
get_int	(*(char))->(int)
(	O
optarg	*(char)
)	O
;	O
break	O
;	O
case	O
'm'	O
:	O
{	O
errno	O
=	O
0	int
;	O
n	int
=	O
strtoul	(*(char),*(*(char)),int)->(long)
(	O
optarg	*(char)
,	O
&	O
end	*(char)
,	O
8	int
)	O
;	O
if	O
(	O
*	O
end	*(char)
==	O
0	int
&&	O
errno	O
==	O
0	int
)	O
{	O
mode	int
=	O
n	int
&	O
0777	int
;	O
meta_mask	int
|=	O
GDBM_META_MASK_MODE	int
;	O
}	O
else	O
{	O
error	(*(char))->(void)
(	O
"%s"	*(char)
,	O
_	O
(	O
"invalid octal number"	*(char)
)	O
)	O
;	O
exit	(int)->(void)
(	O
EXIT_USAGE	int
)	O
;	O
}	O
}	O
break	O
;	O
case	O
'u'	O
:	O
{	O
size_t	long
len	long
;	O
struct	O
passwd	struct(*(char),*(char),int,int,*(char),*(char),*(char))
*	O
pw	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
;	O
len	long
=	O
strcspn	(*(char),*(char))->(long)
(	O
optarg	*(char)
,	O
".:"	*(char)
)	O
;	O
if	O
(	O
optarg	*(char)
[	O
len	long
]	O
)	O
optarg	*(char)
[	O
len	long
++	O
]	O
=	O
0	int
;	O
pw	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
=	O
getpwnam	(*(char))->(*(struct(*(char),*(char),int,int,*(char),*(char),*(char))))
(	O
optarg	*(char)
)	O
;	O
if	O
(	O
pw	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
)	O
owner_uid	int
=	O
pw	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
->	O
pw_uid	int
;	O
else	O
{	O
errno	O
=	O
0	int
;	O
n	int
=	O
strtoul	(*(char),*(*(char)),int)->(long)
(	O
optarg	*(char)
,	O
&	O
end	*(char)
,	O
10	int
)	O
;	O
if	O
(	O
*	O
end	*(char)
==	O
0	int
&&	O
errno	O
==	O
0	int
)	O
owner_uid	int
=	O
n	int
;	O
else	O
{	O
error	(*(char))->(void)
(	O
_	O
(	O
"invalid user name: %s"	*(char)
)	O
,	O
optarg	*(char)
)	O
;	O
exit	(int)->(void)
(	O
EXIT_USAGE	int
)	O
;	O
}	O
}	O
if	O
(	O
optarg	*(char)
[	O
len	long
]	O
)	O
{	O
char	O
*	O
grname	*(char)
=	O
optarg	*(char)
+	O
len	long
;	O
struct	O
group	struct(*(char),*(char),int,*(*(char)))
*	O
gr	*(struct(*(char),*(char),int,*(*(char))))
=	O
getgrnam	(*(char))->(*(struct(*(char),*(char),int,*(*(char)))))
(	O
grname	*(char)
)	O
;	O
if	O
(	O
gr	*(struct(*(char),*(char),int,*(*(char))))
)	O
owner_gid	int
=	O
gr	*(struct(*(char),*(char),int,*(*(char))))
->	O
gr_gid	int
;	O
else	O
{	O
errno	O
=	O
0	int
;	O
n	int
=	O
strtoul	(*(char),*(*(char)),int)->(long)
(	O
grname	*(char)
,	O
&	O
end	*(char)
,	O
10	int
)	O
;	O
if	O
(	O
*	O
end	*(char)
==	O
0	int
&&	O
errno	O
==	O
0	int
)	O
owner_gid	int
=	O
n	int
;	O
else	O
{	O
error	(*(char))->(void)
(	O
_	O
(	O
"invalid group name: %s"	*(char)
)	O
,	O
grname	*(char)
)	O
;	O
exit	(int)->(void)
(	O
EXIT_USAGE	int
)	O
;	O
}	O
}	O
}	O
else	O
{	O
if	O
(	O
!	O
pw	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
)	O
{	O
pw	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
=	O
getpwuid	(int)->(*(struct(*(char),*(char),int,int,*(char),*(char),*(char))))
(	O
owner_uid	int
)	O
;	O
if	O
(	O
!	O
pw	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
)	O
{	O
error	(*(char))->(void)
(	O
_	O
(	O
"no such UID: %lu"	*(char)
)	O
,	O
(	O
unsigned	O
long	O
)	O
owner_uid	int
)	O
;	O
exit	(int)->(void)
(	O
EXIT_USAGE	int
)	O
;	O
}	O
}	O
owner_gid	int
=	O
pw	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
->	O
pw_gid	int
;	O
}	O
meta_mask	int
|=	O
GDBM_META_MASK_OWNER	int
;	O
}	O
break	O
;	O
case	O
'r'	O
:	O
replace	int
=	O
1	int
;	O
break	O
;	O
case	O
'n'	O
:	O
no_meta_option	int
=	O
1	int
;	O
break	O
;	O
case	O
'M'	O
:	O
oflags	int
&=	O
~	O
GDBM_NOMMAP	int
;	O
break	O
;	O
default	O
:	O
error	(*(char))->(void)
(	O
_	O
(	O
"unknown option"	*(char)
)	O
)	O
;	O
exit	(int)->(void)
(	O
EXIT_USAGE	int
)	O
;	O
}	O
}	O
argc	int
-=	O
optind	int
;	O
argv	*(*(char))
+=	O
optind	int
;	O
if	O
(	O
argc	int
==	O
0	int
)	O
{	O
parseopt_print_help	()->(void)
(	O
)	O
;	O
exit	(int)->(void)
(	O
EXIT_OK	int
)	O
;	O
}	O
if	O
(	O
argc	int
>	O
2	int
)	O
{	O
error	(*(char))->(void)
(	O
_	O
(	O
"too many arguments; try `%s -h' for more info"	*(char)
)	O
,	O
progname	*(char)
)	O
;	O
exit	(int)->(void)
(	O
EXIT_USAGE	int
)	O
;	O
}	O
filename	*(char)
=	O
argv	*(*(char))
[	O
0	int
]	O
;	O
if	O
(	O
argc	int
==	O
2	int
)	O
dbname	*(char)
=	O
argv	*(*(char))
[	O
1	int
]	O
;	O
else	O
dbname	*(char)
=	O
NULL	O
;	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
filename	*(char)
,	O
"-"	*(char)
)	O
==	O
0	int
)	O
{	O
filename	*(char)
=	O
"<stdin>"	*(char)
;	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
=	O
stdin	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
;	O
}	O
else	O
{	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
=	O
fopen	(*(char),*(char))->(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))
(	O
filename	*(char)
,	O
"r"	*(char)
)	O
;	O
if	O
(	O
!	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
{	O
sys_perror	(int,*(char))->(void)
(	O
errno	O
,	O
_	O
(	O
"cannot open %s"	*(char)
)	O
,	O
filename	*(char)
)	O
;	O
exit	(int)->(void)
(	O
EXIT_FATAL	int
)	O
;	O
}	O
}	O
if	O
(	O
dbname	*(char)
)	O
{	O
dbf	*(struct)
=	O
gdbm_open	(*(char),int,int,int,*((*(char))->(void)))->(*(struct))
(	O
dbname	*(char)
,	O
block_size	int
,	O
oflags	int
,	O
0600	int
,	O
NULL	O
)	O
;	O
if	O
(	O
!	O
dbf	*(struct)
)	O
{	O
gdbm_perror	(*(char))->(void)
(	O
_	O
(	O
"gdbm_open failed"	*(char)
)	O
)	O
;	O
exit	(int)->(void)
(	O
EXIT_FATAL	int
)	O
;	O
}	O
if	O
(	O
cache_size	long
&&	O
gdbm_setopt	(*(struct),int,*(void),int)->(int)
(	O
dbf	*(struct)
,	O
GDBM_SETCACHESIZE	int
,	O
&	O
cache_size	long
,	O
sizeof	O
(	O
int	O
)	O
)	O
==	O
-	O
1	int
)	O
error	(*(char))->(void)
(	O
_	O
(	O
"gdbm_setopt failed: %s"	*(char)
)	O
,	O
gdbm_strerror	(int)->(*(char))
(	O
gdbm_errno	O
)	O
)	O
;	O
}	O
rc	int
=	O
gdbm_load_from_file	(*(*(struct)),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),int,int,*(long))->(int)
(	O
&	O
dbf	*(struct)
,	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
replace	int
,	O
no_meta_option	int
?	O
(	O
GDBM_META_MASK_MODE	int
|	O
GDBM_META_MASK_OWNER	int
)	O
:	O
meta_mask	int
,	O
&	O
err_line	long
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
switch	O
(	O
gdbm_errno	O
)	O
{	O
case	O
GDBM_ERR_FILE_OWNER	int
:	O
case	O
GDBM_ERR_FILE_MODE	int
:	O
error	(*(char))->(void)
(	O
_	O
(	O
"error restoring metadata: %s (%s)"	*(char)
)	O
,	O
gdbm_strerror	(int)->(*(char))
(	O
gdbm_errno	O
)	O
,	O
strerror	(int)->(*(char))
(	O
errno	O
)	O
)	O
;	O
rc	int
=	O
EXIT_MILD	int
;	O
break	O
;	O
default	O
:	O
if	O
(	O
err_line	long
)	O
gdbm_perror	(*(char))->(void)
(	O
"%s:%lu"	*(char)
,	O
filename	*(char)
,	O
err_line	long
)	O
;	O
else	O
gdbm_perror	(*(char))->(void)
(	O
_	O
(	O
"cannot load from %s"	*(char)
)	O
,	O
filename	*(char)
)	O
;	O
rc	int
=	O
EXIT_FATAL	int
;	O
}	O
}	O
if	O
(	O
dbf	*(struct)
)	O
{	O
if	O
(	O
!	O
no_meta_option	int
&&	O
set_meta_info	(*(struct(*(char),int,int,int,int,int,int,int,int,int,int,*(char),enum(int,int,int,int),*((*`)->(void)),int,*(struct(int,int,long,int,int,int,int,long,struct`)),*(long),*(struct(*`,long,char,struct`)),long,long,*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int)))),int,*(struct(*`,long,char,struct`)),int,int,int,int,long,*(void),long,long,long)))->(int)
(	O
dbf	*(struct)
)	O
)	O
{	O
error	(*(char))->(void)
(	O
_	O
(	O
"error restoring metadata: %s (%s)"	*(char)
)	O
,	O
gdbm_strerror	(int)->(*(char))
(	O
gdbm_errno	O
)	O
,	O
strerror	(int)->(*(char))
(	O
errno	O
)	O
)	O
;	O
rc	int
=	O
EXIT_MILD	int
;	O
}	O
if	O
(	O
!	O
dbname	*(char)
)	O
{	O
if	O
(	O
gdbm_setopt	(*(struct),int,*(void),int)->(int)
(	O
dbf	*(struct)
,	O
GDBM_GETDBNAME	int
,	O
&	O
dbname	*(char)
,	O
sizeof	O
(	O
dbname	*(char)
)	O
)	O
)	O
gdbm_perror	(*(char))->(void)
(	O
_	O
(	O
"gdbm_setopt failed"	*(char)
)	O
)	O
;	O
else	O
{	O
printf	(*(char))->(int)
(	O
"%s: created %s\n"	*(char)
,	O
progname	*(char)
,	O
dbname	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
dbname	*(char)
)	O
;	O
}	O
}	O
gdbm_close	(*(struct))->(int)
(	O
dbf	*(struct)
)	O
;	O
}	O
exit	(int)->(void)
(	O
rc	int
)	O
;	O
}	O
