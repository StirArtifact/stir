int	O
gsl_multifit_linear_solve	(double,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(double),*(double),*(struct(long,long,long,long,*(struct(long,long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),double)))->(int)
(	O
const	O
double	O
lambda	double
,	O
const	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
X	*(float)
,	O
const	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
y	double
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
c	*(float)
,	O
double	O
*	O
rnorm	*(double)
,	O
double	O
*	O
snorm	*(double)
,	O
gsl_multifit_linear_workspace	struct(long,long,long,long,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),double)
*	O
work	*(struct(long,long,long,long,*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),double))
)	O
{	O
size_t	long
rank	*(long)
;	O
int	O
status	int
;	O
status	int
=	O
multifit_linear_solve	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),double,double,*(long),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(double),*(double),*(struct(long,long,long,long,*(struct(long,long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),double)))->(int)
(	O
X	*(float)
,	O
y	double
,	O
GSL_DBL_EPSILON	int
,	O
lambda	double
,	O
&	O
rank	*(long)
,	O
c	*(float)
,	O
rnorm	*(double)
,	O
snorm	*(double)
,	O
work	*(struct(long,long,long,long,*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),double))
)	O
;	O
return	O
status	int
;	O
}	O
int	O
gsl_multifit_linear_applyW	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
const	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
X	*(float)
,	O
const	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
,	O
const	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
y	double
,	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
WX	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
Wy	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
{	O
const	O
size_t	long
n	int
=	O
X	*(float)
->	O
size1	long
;	O
const	O
size_t	long
p	int
=	O
X	*(float)
->	O
size2	long
;	O
if	O
(	O
n	int
!=	O
y	double
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"y vector does not match X"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
!=	O
NULL	O
&&	O
n	int
!=	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"weight vector does not match X"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
n	int
!=	O
WX	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size1	long
||	O
p	int
!=	O
WX	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size2	long
)	O
{	O
GSL_ERROR	O
(	O
"WX matrix dimensions do not match X"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
n	int
!=	O
Wy	*(struct(long,long,*(double),*(struct(long,*(double))),int))
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"Wy vector must be length n"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
size_t	long
i	long
;	O
if	O
(	O
WX	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
!=	O
X	*(float)
)	O
gsl_matrix_memcpy	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
WX	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
X	*(float)
)	O
;	O
if	O
(	O
Wy	*(struct(long,long,*(double),*(struct(long,*(double))),int))
!=	O
y	double
)	O
gsl_vector_memcpy	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
Wy	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
y	double
)	O
;	O
if	O
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
!=	O
NULL	O
)	O
{	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
n	int
;	O
++	O
i	long
)	O
{	O
double	O
wi	double
=	O
gsl_vector_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(double)
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
,	O
i	long
)	O
;	O
double	O
swi	double
;	O
gsl_vector_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
row	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_row	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
WX	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
i	long
)	O
;	O
double	O
*	O
yi	*(double)
=	O
gsl_vector_ptr	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(*(double))
(	O
Wy	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
i	long
)	O
;	O
if	O
(	O
wi	double
<	O
0.0	int
)	O
wi	double
=	O
0.0	int
;	O
swi	double
=	O
sqrt	(double)->(double)
(	O
wi	double
)	O
;	O
gsl_vector_scale	(*(struct(long,long,*(double),*(struct(long,*`)),int)),double)->(int)
(	O
&	O
row	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
swi	double
)	O
;	O
*	O
yi	*(double)
*=	O
swi	double
;	O
}	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
int	O
gsl_multifit_linear_wstdform1	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,long,*(struct(long,long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),double)))->(int)
(	O
const	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
L	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
const	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
X	*(float)
,	O
const	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
,	O
const	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
y	double
,	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
Xs	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
ys	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
gsl_multifit_linear_workspace	struct(long,long,long,long,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),double)
*	O
work	*(struct(long,long,long,long,*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),double))
)	O
{	O
const	O
size_t	long
n	int
=	O
X	*(float)
->	O
size1	long
;	O
const	O
size_t	long
p	int
=	O
X	*(float)
->	O
size2	long
;	O
if	O
(	O
n	int
>	O
work	*(struct(long,long,long,long,*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),double))
->	O
nmax	long
||	O
p	int
>	O
work	*(struct(long,long,long,long,*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),double))
->	O
pmax	long
)	O
{	O
GSL_ERROR	O
(	O
"observation matrix larger than workspace"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
L	*(struct(long,long,*(double),*(struct(long,*(double))),int))
!=	O
NULL	O
&&	O
p	int
!=	O
L	*(struct(long,long,*(double),*(struct(long,*(double))),int))
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"L vector does not match X"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
n	int
!=	O
y	double
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"y vector does not match X"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
!=	O
NULL	O
&&	O
n	int
!=	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"weight vector does not match X"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
n	int
!=	O
Xs	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size1	long
||	O
p	int
!=	O
Xs	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size2	long
)	O
{	O
GSL_ERROR	O
(	O
"Xs matrix dimensions do not match X"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
n	int
!=	O
ys	*(struct(long,long,*(double),*(struct(long,*(double))),int))
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"ys vector must be length n"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
int	O
status	int
=	O
GSL_SUCCESS	int
;	O
status	int
=	O
gsl_multifit_linear_applyW	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
X	*(float)
,	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
,	O
y	double
,	O
Xs	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
ys	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
if	O
(	O
L	*(struct(long,long,*(double),*(struct(long,*(double))),int))
!=	O
NULL	O
)	O
{	O
size_t	long
j	long
;	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
p	int
;	O
++	O
j	long
)	O
{	O
gsl_vector_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
Xj	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_column	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
Xs	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
j	long
)	O
;	O
double	O
lj	double
=	O
gsl_vector_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(double)
(	O
L	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
j	long
)	O
;	O
if	O
(	O
lj	double
==	O
0.0	int
)	O
{	O
GSL_ERROR	O
(	O
"L matrix is singular"	*(char)
,	O
GSL_EDOM	int
)	O
;	O
}	O
gsl_vector_scale	(*(struct(long,long,*(double),*(struct(long,*`)),int)),double)->(int)
(	O
&	O
Xj	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
1.0	int
/	O
lj	double
)	O
;	O
}	O
}	O
return	O
status	int
;	O
}	O
}	O
int	O
gsl_multifit_linear_stdform1	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,long,*(struct(long,long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),double)))->(int)
(	O
const	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
L	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
const	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
X	*(float)
,	O
const	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
y	double
,	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
Xs	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
ys	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
gsl_multifit_linear_workspace	struct(long,long,long,long,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),double)
*	O
work	*(struct(long,long,long,long,*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),double))
)	O
{	O
int	O
status	int
;	O
status	int
=	O
gsl_multifit_linear_wstdform1	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,long,*(struct(long,long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),double)))->(int)
(	O
L	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
X	*(float)
,	O
NULL	O
,	O
y	double
,	O
Xs	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
ys	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
work	*(struct(long,long,long,long,*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),double))
)	O
;	O
return	O
status	int
;	O
}	O
int	O
gsl_multifit_linear_L_decomp	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
L	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
tau	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
{	O
const	O
size_t	long
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
=	O
L	*(struct(long,long,*(double),*(struct(long,*(double))),int))
->	O
size1	long
;	O
const	O
size_t	long
p	int
=	O
L	*(struct(long,long,*(double),*(struct(long,*(double))),int))
->	O
size2	long
;	O
int	O
status	int
;	O
if	O
(	O
tau	*(struct(long,long,*(double),*(struct(long,*(double))),int))
->	O
size	long
!=	O
GSL_MIN	O
(	O
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
,	O
p	int
)	O
)	O
{	O
GSL_ERROR	O
(	O
"tau vector must be min(m,p)"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
>=	O
p	int
)	O
{	O
status	int
=	O
gsl_linalg_QR_decomp	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
L	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
tau	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
return	O
status	int
;	O
}	O
else	O
{	O
gsl_matrix_view	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
LTQR	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_view_array	(*(double),long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
L	*(struct(long,long,*(double),*(struct(long,*(double))),int))
->	O
data	*(long double)
,	O
p	int
,	O
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
)	O
;	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
LT	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_alloc	(long,long)->(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
p	int
,	O
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
)	O
;	O
gsl_matrix_transpose_memcpy	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
LT	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
L	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_matrix_memcpy	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
&	O
LTQR	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
LT	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_matrix_free	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
LT	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
status	int
=	O
gsl_linalg_QR_decomp	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
&	O
LTQR	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
tau	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
return	O
status	int
;	O
}	O
}	O
int	O
gsl_multifit_linear_wstdform2	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,long,*(struct(long,long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),double)))->(int)
(	O
const	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
LQR	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
const	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
Ltau	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
const	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
X	*(float)
,	O
const	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
,	O
const	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
y	double
,	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
Xs	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
ys	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
M	int
,	O
gsl_multifit_linear_workspace	struct(long,long,long,long,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),double)
*	O
work	*(struct(long,long,long,long,*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),double))
)	O
{	O
const	O
size_t	long
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
=	O
LQR	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size1	long
;	O
const	O
size_t	long
n	int
=	O
X	*(float)
->	O
size1	long
;	O
const	O
size_t	long
p	int
=	O
X	*(float)
->	O
size2	long
;	O
if	O
(	O
n	int
>	O
work	*(struct(long,long,long,long,*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),double))
->	O
nmax	long
||	O
p	int
>	O
work	*(struct(long,long,long,long,*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),double))
->	O
pmax	long
)	O
{	O
GSL_ERROR	O
(	O
"observation matrix larger than workspace"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
p	int
!=	O
LQR	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size2	long
)	O
{	O
GSL_ERROR	O
(	O
"LQR and X matrices have different numbers of columns"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
n	int
!=	O
y	double
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"y vector does not match X"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
!=	O
NULL	O
&&	O
n	int
!=	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"weights vector must be length n"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
>=	O
p	int
)	O
{	O
if	O
(	O
n	int
!=	O
Xs	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size1	long
||	O
p	int
!=	O
Xs	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size2	long
)	O
{	O
GSL_ERROR	O
(	O
"Xs matrix must be n-by-p"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
n	int
!=	O
ys	*(struct(long,long,*(double),*(struct(long,*(double))),int))
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"ys vector must have length n"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
int	O
status	int
;	O
size_t	long
i	long
;	O
gsl_matrix_const_view	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
R	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_const_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
LQR	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
0	int
,	O
0	int
,	O
p	int
,	O
p	int
)	O
;	O
status	int
=	O
gsl_multifit_linear_applyW	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
X	*(float)
,	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
,	O
y	double
,	O
Xs	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
ys	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
n	int
;	O
++	O
i	long
)	O
{	O
gsl_vector_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
=	O
gsl_matrix_row	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
Xs	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
i	long
)	O
;	O
gsl_blas_dtrsv	(enum(int,int),enum(int,int,int),enum(int,int),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
CblasUpper	int
,	O
CblasTrans	int
,	O
CblasNonUnit	int
,	O
&	O
R	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
else	O
{	O
const	O
size_t	long
pm	long
=	O
p	int
-	O
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
;	O
const	O
size_t	long
npm	long
=	O
n	int
-	O
pm	long
;	O
if	O
(	O
npm	long
!=	O
Xs	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size1	long
||	O
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
!=	O
Xs	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size2	long
)	O
{	O
GSL_ERROR	O
(	O
"Xs matrix must be (n-p+m)-by-m"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
npm	long
!=	O
ys	*(struct(long,long,*(double),*(struct(long,*(double))),int))
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"ys vector must be of length (n-p+m)"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
n	int
!=	O
M	int
->	O
size1	long
||	O
p	int
!=	O
M	int
->	O
size2	long
)	O
{	O
GSL_ERROR	O
(	O
"M matrix must be n-by-p"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
int	O
status	int
;	O
gsl_matrix_view	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
A	*(float)
=	O
gsl_matrix_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
work	*(struct(long,long,long,long,*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),double))
->	O
A	*(float)
,	O
0	int
,	O
0	int
,	O
n	int
,	O
p	int
)	O
;	O
gsl_vector_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
b	double
=	O
gsl_vector_subvector	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
work	*(struct(long,long,long,long,*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),double))
->	O
t	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
0	int
,	O
n	int
)	O
;	O
gsl_matrix_view	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
LTQR	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_view_array	(*(double),long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
LQR	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
data	*(long double)
,	O
p	int
,	O
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
)	O
;	O
gsl_matrix_view	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
Rp	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_view_array	(*(double),long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
LQR	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
data	*(long double)
,	O
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
,	O
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
)	O
;	O
gsl_vector_const_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
LTtau	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_vector_const_subvector	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
Ltau	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
0	int
,	O
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
)	O
;	O
gsl_matrix_view	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
MQR	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
M	int
,	O
0	int
,	O
0	int
,	O
n	int
,	O
pm	long
)	O
;	O
gsl_vector_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
Mtau	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_subcolumn	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
M	int
,	O
p	int
-	O
1	int
,	O
0	int
,	O
GSL_MIN	O
(	O
n	int
,	O
pm	long
)	O
)	O
;	O
gsl_matrix_view	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
AKo	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
AKp	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
HqTAKp	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
;	O
gsl_vector_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
;	O
size_t	long
i	long
;	O
status	int
=	O
gsl_multifit_linear_applyW	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
X	*(float)
,	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
,	O
y	double
,	O
&	O
A	*(float)
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
b	double
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
gsl_linalg_QR_matQ	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
&	O
LTQR	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
LTtau	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
A	*(float)
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
AKp	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
&	O
A	*(float)
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
0	int
,	O
0	int
,	O
n	int
,	O
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
)	O
;	O
AKo	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
&	O
A	*(float)
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
0	int
,	O
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
,	O
n	int
,	O
pm	long
)	O
;	O
gsl_matrix_memcpy	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
&	O
MQR	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
AKo	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
gsl_linalg_QR_decomp	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
&	O
MQR	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
Mtau	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
gsl_linalg_QR_QTmat	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
&	O
MQR	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
Mtau	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
AKp	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
HqTAKp	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
&	O
AKp	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
pm	long
,	O
0	int
,	O
npm	long
,	O
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
)	O
;	O
gsl_matrix_memcpy	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
Xs	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
&	O
HqTAKp	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
npm	long
;	O
++	O
i	long
)	O
{	O
gsl_vector_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
x	double
=	O
gsl_matrix_row	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
Xs	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
i	long
)	O
;	O
gsl_blas_dtrsv	(enum(int,int),enum(int,int,int),enum(int,int),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
CblasUpper	int
,	O
CblasNoTrans	int
,	O
CblasNonUnit	int
,	O
&	O
Rp	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
x	double
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
}	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
=	O
gsl_vector_subvector	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
&	O
b	double
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
pm	long
,	O
npm	long
)	O
;	O
gsl_linalg_QR_QTvec	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
&	O
MQR	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
Mtau	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
b	double
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
gsl_vector_memcpy	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
ys	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
&	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
}	O
int	O
gsl_multifit_linear_stdform2	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,long,*(struct(long,long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),double)))->(int)
(	O
const	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
LQR	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
const	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
Ltau	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
const	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
X	*(float)
,	O
const	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
y	double
,	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
Xs	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
ys	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
M	int
,	O
gsl_multifit_linear_workspace	struct(long,long,long,long,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),double)
*	O
work	*(struct(long,long,long,long,*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),double))
)	O
{	O
int	O
status	int
;	O
status	int
=	O
gsl_multifit_linear_wstdform2	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,long,*(struct(long,long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),double)))->(int)
(	O
LQR	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
Ltau	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
X	*(float)
,	O
NULL	O
,	O
y	double
,	O
Xs	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
ys	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
M	int
,	O
work	*(struct(long,long,long,long,*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),double))
)	O
;	O
return	O
status	int
;	O
}	O
int	O
gsl_multifit_linear_genform1	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,long,*(struct(long,long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),double)))->(int)
(	O
const	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
L	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
const	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
cs	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
c	*(float)
,	O
gsl_multifit_linear_workspace	struct(long,long,long,long,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),double)
*	O
work	*(struct(long,long,long,long,*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),double))
)	O
{	O
if	O
(	O
L	*(struct(long,long,*(double),*(struct(long,*(double))),int))
->	O
size	long
>	O
work	*(struct(long,long,long,long,*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),double))
->	O
pmax	long
)	O
{	O
GSL_ERROR	O
(	O
"L vector does not match workspace"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
L	*(struct(long,long,*(double),*(struct(long,*(double))),int))
->	O
size	long
!=	O
cs	*(struct(long,long,*(double),*(struct(long,*(double))),int))
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"cs vector does not match L"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
L	*(struct(long,long,*(double),*(struct(long,*(double))),int))
->	O
size	long
!=	O
c	*(float)
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"c vector does not match L"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
gsl_vector_memcpy	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
c	*(float)
,	O
cs	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_div	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
c	*(float)
,	O
L	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
int	O
gsl_multifit_linear_wgenform2	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,long,*(struct(long,long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),double)))->(int)
(	O
const	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
LQR	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
const	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
Ltau	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
const	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
X	*(float)
,	O
const	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
,	O
const	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
y	double
,	O
const	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
cs	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
const	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
M	int
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
c	*(float)
,	O
gsl_multifit_linear_workspace	struct(long,long,long,long,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),double)
*	O
work	*(struct(long,long,long,long,*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),double))
)	O
{	O
const	O
size_t	long
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
=	O
LQR	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size1	long
;	O
const	O
size_t	long
n	int
=	O
X	*(float)
->	O
size1	long
;	O
const	O
size_t	long
p	int
=	O
X	*(float)
->	O
size2	long
;	O
if	O
(	O
n	int
>	O
work	*(struct(long,long,long,long,*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),double))
->	O
nmax	long
||	O
p	int
>	O
work	*(struct(long,long,long,long,*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),double))
->	O
pmax	long
)	O
{	O
GSL_ERROR	O
(	O
"X matrix does not match workspace"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
p	int
!=	O
LQR	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size2	long
)	O
{	O
GSL_ERROR	O
(	O
"LQR matrix does not match X"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
p	int
!=	O
c	*(float)
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"c vector does not match X"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
!=	O
NULL	O
&&	O
n	int
!=	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"w vector does not match X"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
n	int
!=	O
y	double
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"y vector does not match X"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
>=	O
p	int
)	O
{	O
if	O
(	O
p	int
!=	O
cs	*(struct(long,long,*(double),*(struct(long,*(double))),int))
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"cs vector must be length p"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
int	O
s	*(float)
;	O
gsl_matrix_const_view	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
R	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_const_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
LQR	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
0	int
,	O
0	int
,	O
p	int
,	O
p	int
)	O
;	O
gsl_vector_memcpy	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
c	*(float)
,	O
cs	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
s	*(float)
=	O
gsl_blas_dtrsv	(enum(int,int),enum(int,int,int),enum(int,int),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
CblasUpper	int
,	O
CblasNoTrans	int
,	O
CblasNonUnit	int
,	O
&	O
R	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
c	*(float)
)	O
;	O
return	O
s	*(float)
;	O
}	O
}	O
else	O
{	O
if	O
(	O
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
!=	O
cs	*(struct(long,long,*(double),*(struct(long,*(double))),int))
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"cs vector must be length m"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
n	int
!=	O
M	int
->	O
size1	long
||	O
p	int
!=	O
M	int
->	O
size2	long
)	O
{	O
GSL_ERROR	O
(	O
"M matrix must be size n-by-p"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
int	O
status	int
;	O
const	O
size_t	long
pm	long
=	O
p	int
-	O
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
;	O
gsl_matrix_view	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
A	*(float)
=	O
gsl_matrix_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
work	*(struct(long,long,long,long,*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),double))
->	O
A	*(float)
,	O
0	int
,	O
0	int
,	O
n	int
,	O
p	int
)	O
;	O
gsl_vector_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
b	double
=	O
gsl_vector_subvector	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
work	*(struct(long,long,long,long,*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),double))
->	O
t	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
0	int
,	O
n	int
)	O
;	O
gsl_matrix_view	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
Rp	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_view_array	(*(double),long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
LQR	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
data	*(long double)
,	O
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
,	O
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
)	O
;	O
gsl_matrix_view	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
LTQR	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_view_array	(*(double),long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
LQR	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
data	*(long double)
,	O
p	int
,	O
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
)	O
;	O
gsl_vector_const_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
LTtau	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_vector_const_subvector	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
Ltau	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
0	int
,	O
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
)	O
;	O
gsl_matrix_const_view	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
MQR	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_const_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
M	int
,	O
0	int
,	O
0	int
,	O
n	int
,	O
pm	long
)	O
;	O
gsl_vector_const_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
Mtau	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_const_subcolumn	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
M	int
,	O
p	int
-	O
1	int
,	O
0	int
,	O
GSL_MIN	O
(	O
n	int
,	O
pm	long
)	O
)	O
;	O
gsl_matrix_const_view	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
To	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_const_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
&	O
MQR	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
0	int
,	O
0	int
,	O
pm	long
,	O
pm	long
)	O
;	O
gsl_vector_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
workp	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_vector_subvector	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
work	*(struct(long,long,long,long,*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),double))
->	O
xt	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
0	int
,	O
p	int
)	O
;	O
gsl_vector_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
v1	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
v2	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
;	O
status	int
=	O
gsl_multifit_linear_applyW	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
X	*(float)
,	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
,	O
y	double
,	O
&	O
A	*(float)
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
b	double
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
gsl_vector_set_zero	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
c	*(float)
)	O
;	O
v1	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_vector_subvector	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
c	*(float)
,	O
0	int
,	O
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
)	O
;	O
gsl_vector_memcpy	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
&	O
v1	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
cs	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_blas_dtrsv	(enum(int,int),enum(int,int,int),enum(int,int),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
CblasUpper	int
,	O
CblasTrans	int
,	O
CblasNonUnit	int
,	O
&	O
Rp	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
v1	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
gsl_linalg_QR_Qvec	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
&	O
LTQR	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
LTtau	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
c	*(float)
)	O
;	O
gsl_blas_dgemv	(enum(int,int,int),double,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),double,*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
CblasNoTrans	int
,	O
-	O
1.0	int
,	O
&	O
A	*(float)
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
c	*(float)
,	O
1.0	int
,	O
&	O
b	double
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
gsl_linalg_QR_QTvec	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
&	O
MQR	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
Mtau	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
b	double
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
v1	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_vector_subvector	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
&	O
b	double
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
0	int
,	O
pm	long
)	O
;	O
gsl_blas_dtrsv	(enum(int,int),enum(int,int,int),enum(int,int),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
CblasUpper	int
,	O
CblasNoTrans	int
,	O
CblasNonUnit	int
,	O
&	O
To	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
v1	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
gsl_vector_set_zero	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
&	O
workp	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
v2	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_vector_subvector	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
&	O
workp	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
,	O
pm	long
)	O
;	O
gsl_vector_memcpy	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
&	O
v2	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
v1	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
gsl_linalg_QR_Qvec	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
&	O
LTQR	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
LTtau	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
workp	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
gsl_vector_add	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
c	*(float)
,	O
&	O
workp	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
}	O
int	O
gsl_multifit_linear_genform2	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,long,*(struct(long,long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),double)))->(int)
(	O
const	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
LQR	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
const	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
Ltau	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
const	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
X	*(float)
,	O
const	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
y	double
,	O
const	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
cs	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
const	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
M	int
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
c	*(float)
,	O
gsl_multifit_linear_workspace	struct(long,long,long,long,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),double)
*	O
work	*(struct(long,long,long,long,*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),double))
)	O
{	O
int	O
status	int
;	O
status	int
=	O
gsl_multifit_linear_wgenform2	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,long,*(struct(long,long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),double)))->(int)
(	O
LQR	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
Ltau	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
X	*(float)
,	O
NULL	O
,	O
y	double
,	O
cs	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
M	int
,	O
c	*(float)
,	O
work	*(struct(long,long,long,long,*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),double))
)	O
;	O
return	O
status	int
;	O
}	O
int	O
gsl_multifit_linear_lreg	(double,double,*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
const	O
double	O
smin	double
,	O
const	O
double	O
smax	double
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
reg_param	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
{	O
if	O
(	O
smax	double
<=	O
0.0	int
)	O
{	O
GSL_ERROR	O
(	O
"smax must be positive"	*(char)
,	O
GSL_EINVAL	int
)	O
;	O
}	O
else	O
{	O
const	O
size_t	long
N	int
=	O
reg_param	*(struct(long,long,*(double),*(struct(long,*(double))),int))
->	O
size	long
;	O
const	O
double	O
smin_ratio	double
=	O
16.0	int
*	O
GSL_DBL_EPSILON	int
;	O
const	O
double	O
new_smin	double
=	O
GSL_MAX	O
(	O
smin	double
,	O
smax	double
*	O
smin_ratio	double
)	O
;	O
double	O
ratio	double
;	O
size_t	long
i	long
;	O
gsl_vector_set	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,double)->(void)
(	O
reg_param	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
N	int
-	O
1	int
,	O
new_smin	double
)	O
;	O
ratio	double
=	O
pow	(double,double)->(double)
(	O
smax	double
/	O
new_smin	double
,	O
1.0	int
/	O
(	O
(	O
double	O
)	O
N	int
-	O
1.0	int
)	O
)	O
;	O
for	O
(	O
i	long
=	O
N	int
-	O
1	int
;	O
i	long
>	O
0	int
&&	O
i	long
--	O
;	O
)	O
{	O
double	O
rp1	double
=	O
gsl_vector_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(double)
(	O
reg_param	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
i	long
+	O
1	int
)	O
;	O
gsl_vector_set	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,double)->(void)
(	O
reg_param	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
i	long
,	O
ratio	double
*	O
rp1	double
)	O
;	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
int	O
gsl_multifit_linear_lcurve	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,long,*(struct(long,long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),double)))->(int)
(	O
const	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
y	double
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
reg_param	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
rho	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
eta	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
gsl_multifit_linear_workspace	struct(long,long,long,long,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),double)
*	O
work	*(struct(long,long,long,long,*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),double))
)	O
{	O
const	O
size_t	long
n	int
=	O
y	double
->	O
size	long
;	O
const	O
size_t	long
N	int
=	O
rho	*(struct(long,long,*(double),*(struct(long,*(double))),int))
->	O
size	long
;	O
if	O
(	O
n	int
!=	O
work	*(struct(long,long,long,long,*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),double))
->	O
n	int
)	O
{	O
GSL_ERROR	O
(	O
"y vector does not match workspace"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
N	int
<	O
3	int
)	O
{	O
GSL_ERROR	O
(	O
"at least 3 points are needed for L-curve analysis"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
N	int
!=	O
eta	*(struct(long,long,*(double),*(struct(long,*(double))),int))
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"size of rho and eta vectors do not match"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
reg_param	*(struct(long,long,*(double),*(struct(long,*(double))),int))
->	O
size	long
!=	O
eta	*(struct(long,long,*(double),*(struct(long,*(double))),int))
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"size of reg_param and eta vectors do not match"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
int	O
status	int
=	O
GSL_SUCCESS	int
;	O
const	O
size_t	long
p	int
=	O
work	*(struct(long,long,long,long,*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),double))
->	O
p	int
;	O
size_t	long
i	long
,	O
j	long
;	O
gsl_matrix_view	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
A	*(float)
=	O
gsl_matrix_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
work	*(struct(long,long,long,long,*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),double))
->	O
A	*(float)
,	O
0	int
,	O
0	int
,	O
n	int
,	O
p	int
)	O
;	O
gsl_vector_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
S	*(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_vector_subvector	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
work	*(struct(long,long,long,long,*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),double))
->	O
S	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
0	int
,	O
p	int
)	O
;	O
gsl_vector_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
xt	*(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_vector_subvector	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
work	*(struct(long,long,long,long,*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),double))
->	O
xt	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
0	int
,	O
p	int
)	O
;	O
gsl_vector_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
workp	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_subcolumn	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
work	*(struct(long,long,long,long,*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),double))
->	O
QSI	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
0	int
,	O
0	int
,	O
p	int
)	O
;	O
gsl_vector_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
workp2	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_vector_subvector	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
work	*(struct(long,long,long,long,*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),double))
->	O
D	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
0	int
,	O
p	int
)	O
;	O
const	O
double	O
smax	double
=	O
gsl_vector_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(double)
(	O
&	O
S	*(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
0	int
)	O
;	O
const	O
double	O
smin	double
=	O
gsl_vector_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(double)
(	O
&	O
S	*(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
p	int
-	O
1	int
)	O
;	O
double	O
dr	double
;	O
double	O
normy	double
=	O
gsl_blas_dnrm2	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(double)
(	O
y	double
)	O
;	O
double	O
normUTy	double
;	O
gsl_blas_dgemv	(enum(int,int,int),double,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),double,*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
CblasTrans	int
,	O
1.0	int
,	O
&	O
A	*(float)
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
y	double
,	O
0.0	int
,	O
&	O
xt	*(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
normUTy	double
=	O
gsl_blas_dnrm2	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(double)
(	O
&	O
xt	*(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
dr	double
=	O
normy	double
*	O
normy	double
-	O
normUTy	double
*	O
normUTy	double
;	O
gsl_multifit_linear_lreg	(double,double,*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
smin	double
,	O
smax	double
,	O
reg_param	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
N	int
;	O
++	O
i	long
)	O
{	O
double	O
lambda	double
=	O
gsl_vector_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(double)
(	O
reg_param	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
i	long
)	O
;	O
double	O
lambda_sq	double
=	O
lambda	double
*	O
lambda	double
;	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
p	int
;	O
++	O
j	long
)	O
{	O
double	O
sj	double
=	O
gsl_vector_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(double)
(	O
&	O
S	*(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
j	long
)	O
;	O
double	O
xtj	double
=	O
gsl_vector_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(double)
(	O
&	O
xt	*(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
j	long
)	O
;	O
double	O
f	*(double)
=	O
sj	double
/	O
(	O
sj	double
*	O
sj	double
+	O
lambda_sq	double
)	O
;	O
gsl_vector_set	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,double)->(void)
(	O
&	O
workp	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
j	long
,	O
f	*(double)
*	O
xtj	double
)	O
;	O
gsl_vector_set	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,double)->(void)
(	O
&	O
workp2	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
j	long
,	O
(	O
1.0	int
-	O
sj	double
*	O
f	*(double)
)	O
*	O
xtj	double
)	O
;	O
}	O
gsl_vector_set	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,double)->(void)
(	O
eta	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
i	long
,	O
gsl_blas_dnrm2	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(double)
(	O
&	O
workp	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
)	O
;	O
gsl_vector_set	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,double)->(void)
(	O
rho	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
i	long
,	O
gsl_blas_dnrm2	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(double)
(	O
&	O
workp2	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
)	O
;	O
}	O
if	O
(	O
n	int
>	O
p	int
&&	O
dr	double
>	O
0.0	int
)	O
{	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
N	int
;	O
++	O
i	long
)	O
{	O
double	O
rhoi	double
=	O
gsl_vector_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(double)
(	O
rho	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
i	long
)	O
;	O
double	O
*	O
ptr	*(double)
=	O
gsl_vector_ptr	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(*(double))
(	O
rho	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
i	long
)	O
;	O
*	O
ptr	*(double)
=	O
sqrt	(double)->(double)
(	O
rhoi	double
*	O
rhoi	double
+	O
dr	double
)	O
;	O
}	O
}	O
gsl_vector_set_all	(*(struct(long,long,*(double),*(struct(long,*`)),int)),double)->(void)
(	O
work	*(struct(long,long,long,long,*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),double))
->	O
D	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
1.0	int
)	O
;	O
return	O
status	int
;	O
}	O
}	O
int	O
gsl_multifit_linear_lcorner	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(long))->(int)
(	O
const	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
rho	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
const	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
eta	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
size_t	long
*	O
idx	*(long)
)	O
{	O
const	O
size_t	long
n	int
=	O
rho	*(struct(long,long,*(double),*(struct(long,*(double))),int))
->	O
size	long
;	O
if	O
(	O
n	int
<	O
3	int
)	O
{	O
GSL_ERROR	O
(	O
"at least 3 points are needed for L-curve analysis"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
n	int
!=	O
eta	*(struct(long,long,*(double),*(struct(long,*(double))),int))
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"size of rho and eta vectors do not match"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
int	O
s	*(float)
=	O
GSL_SUCCESS	int
;	O
size_t	long
i	long
;	O
double	O
x1	double
,	O
y1	(double)->(double)
;	O
double	O
x2	double
,	O
y2	double
;	O
double	O
rmin	double
=	O
-	O
1.0	int
;	O
x1	double
=	O
log	(double)->(double)
(	O
gsl_vector_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(double)
(	O
rho	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
0	int
)	O
)	O
;	O
y1	(double)->(double)
=	O
log	(double)->(double)
(	O
gsl_vector_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(double)
(	O
eta	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
0	int
)	O
)	O
;	O
x2	double
=	O
log	(double)->(double)
(	O
gsl_vector_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(double)
(	O
rho	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
1	int
)	O
)	O
;	O
y2	double
=	O
log	(double)->(double)
(	O
gsl_vector_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(double)
(	O
eta	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
1	int
)	O
)	O
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<	O
n	int
-	O
1	int
;	O
++	O
i	long
)	O
{	O
double	O
x3	double
=	O
log	(double)->(double)
(	O
gsl_vector_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(double)
(	O
rho	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
i	long
+	O
1	int
)	O
)	O
;	O
double	O
y3	double
=	O
log	(double)->(double)
(	O
gsl_vector_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(double)
(	O
eta	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
i	long
+	O
1	int
)	O
)	O
;	O
double	O
x21	double
=	O
x2	double
-	O
x1	double
;	O
double	O
y21	double
=	O
y2	double
-	O
y1	(double)->(double)
;	O
double	O
x31	double
=	O
x3	double
-	O
x1	double
;	O
double	O
y31	double
=	O
y3	double
-	O
y1	(double)->(double)
;	O
double	O
h21	double
=	O
x21	double
*	O
x21	double
+	O
y21	double
*	O
y21	double
;	O
double	O
h31	double
=	O
x31	double
*	O
x31	double
+	O
y31	double
*	O
y31	double
;	O
double	O
d	double
=	O
fabs	(double)->(double)
(	O
2.0	int
*	O
(	O
x21	double
*	O
y31	double
-	O
x31	double
*	O
y21	double
)	O
)	O
;	O
double	O
r	*(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
sqrt	(double)->(double)
(	O
h21	double
*	O
h31	double
*	O
(	O
(	O
x3	double
-	O
x2	double
)	O
*	O
(	O
x3	double
-	O
x2	double
)	O
+	O
(	O
y3	double
-	O
y2	double
)	O
*	O
(	O
y3	double
-	O
y2	double
)	O
)	O
)	O
/	O
d	double
;	O
if	O
(	O
gsl_finite	(double)->(int)
(	O
r	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
)	O
{	O
if	O
(	O
r	*(struct(long,long,*(double),*(struct(long,*(double))),int))
<	O
rmin	double
||	O
rmin	double
<	O
0.0	int
)	O
{	O
rmin	double
=	O
r	*(struct(long,long,*(double),*(struct(long,*(double))),int))
;	O
*	O
idx	*(long)
=	O
i	long
;	O
}	O
}	O
x1	double
=	O
x2	double
;	O
y1	(double)->(double)
=	O
y2	double
;	O
x2	double
=	O
x3	double
;	O
y2	double
=	O
y3	double
;	O
}	O
if	O
(	O
rmin	double
<	O
0.0	int
)	O
{	O
GSL_ERROR	O
(	O
"failed to find minimum radius"	*(char)
,	O
GSL_EINVAL	int
)	O
;	O
}	O
return	O
s	*(float)
;	O
}	O
}	O
int	O
gsl_multifit_linear_lcorner2	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(long))->(int)
(	O
const	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
reg_param	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
const	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
eta	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
size_t	long
*	O
idx	*(long)
)	O
{	O
const	O
size_t	long
n	int
=	O
reg_param	*(struct(long,long,*(double),*(struct(long,*(double))),int))
->	O
size	long
;	O
if	O
(	O
n	int
<	O
3	int
)	O
{	O
GSL_ERROR	O
(	O
"at least 3 points are needed for L-curve analysis"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
n	int
!=	O
eta	*(struct(long,long,*(double),*(struct(long,*(double))),int))
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"size of reg_param and eta vectors do not match"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
int	O
s	*(float)
=	O
GSL_SUCCESS	int
;	O
size_t	long
i	long
;	O
double	O
x1	double
,	O
y1	(double)->(double)
;	O
double	O
x2	double
,	O
y2	double
;	O
double	O
rmin	double
=	O
-	O
1.0	int
;	O
x1	double
=	O
gsl_vector_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(double)
(	O
reg_param	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
0	int
)	O
;	O
x1	double
*=	O
x1	double
;	O
y1	(double)->(double)
=	O
gsl_vector_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(double)
(	O
eta	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
0	int
)	O
;	O
y1	(double)->(double)
*=	O
y1	(double)->(double)
;	O
x2	double
=	O
gsl_vector_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(double)
(	O
reg_param	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
1	int
)	O
;	O
x2	double
*=	O
x2	double
;	O
y2	double
=	O
gsl_vector_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(double)
(	O
eta	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
1	int
)	O
;	O
y2	double
*=	O
y2	double
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<	O
n	int
-	O
1	int
;	O
++	O
i	long
)	O
{	O
double	O
lamip1	double
=	O
gsl_vector_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(double)
(	O
reg_param	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
i	long
+	O
1	int
)	O
;	O
double	O
etaip1	double
=	O
gsl_vector_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(double)
(	O
eta	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
i	long
+	O
1	int
)	O
;	O
double	O
x3	double
=	O
lamip1	double
*	O
lamip1	double
;	O
double	O
y3	double
=	O
etaip1	double
*	O
etaip1	double
;	O
double	O
x21	double
=	O
x2	double
-	O
x1	double
;	O
double	O
y21	double
=	O
y2	double
-	O
y1	(double)->(double)
;	O
double	O
x31	double
=	O
x3	double
-	O
x1	double
;	O
double	O
y31	double
=	O
y3	double
-	O
y1	(double)->(double)
;	O
double	O
h21	double
=	O
x21	double
*	O
x21	double
+	O
y21	double
*	O
y21	double
;	O
double	O
h31	double
=	O
x31	double
*	O
x31	double
+	O
y31	double
*	O
y31	double
;	O
double	O
d	double
=	O
fabs	(double)->(double)
(	O
2.0	int
*	O
(	O
x21	double
*	O
y31	double
-	O
x31	double
*	O
y21	double
)	O
)	O
;	O
double	O
r	*(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
sqrt	(double)->(double)
(	O
h21	double
*	O
h31	double
*	O
(	O
(	O
x3	double
-	O
x2	double
)	O
*	O
(	O
x3	double
-	O
x2	double
)	O
+	O
(	O
y3	double
-	O
y2	double
)	O
*	O
(	O
y3	double
-	O
y2	double
)	O
)	O
)	O
/	O
d	double
;	O
if	O
(	O
gsl_finite	(double)->(int)
(	O
r	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
)	O
{	O
if	O
(	O
r	*(struct(long,long,*(double),*(struct(long,*(double))),int))
<	O
rmin	double
||	O
rmin	double
<	O
0.0	int
)	O
{	O
rmin	double
=	O
r	*(struct(long,long,*(double),*(struct(long,*(double))),int))
;	O
*	O
idx	*(long)
=	O
i	long
;	O
}	O
}	O
x1	double
=	O
x2	double
;	O
y1	(double)->(double)
=	O
y2	double
;	O
x2	double
=	O
x3	double
;	O
y2	double
=	O
y3	double
;	O
}	O
if	O
(	O
rmin	double
<	O
0.0	int
)	O
{	O
GSL_ERROR	O
(	O
"failed to find minimum radius"	*(char)
,	O
GSL_EINVAL	int
)	O
;	O
}	O
return	O
s	*(float)
;	O
}	O
}	O
int	O
gsl_multifit_linear_Lk	(long,long,*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
const	O
size_t	long
p	int
,	O
const	O
size_t	long
k	long
,	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
L	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
{	O
if	O
(	O
p	int
<=	O
k	long
)	O
{	O
GSL_ERROR	O
(	O
"p must be larger than derivative order"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
k	long
>=	O
GSL_MULTIFIT_MAXK	int
-	O
1	int
)	O
{	O
GSL_ERROR	O
(	O
"derivative order k too large"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
p	int
-	O
k	long
!=	O
L	*(struct(long,long,*(double),*(struct(long,*(double))),int))
->	O
size1	long
||	O
p	int
!=	O
L	*(struct(long,long,*(double),*(struct(long,*(double))),int))
->	O
size2	long
)	O
{	O
GSL_ERROR	O
(	O
"L matrix must be (p-k)-by-p"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
double	O
c_data	array(double)
[	O
GSL_MULTIFIT_MAXK	int
]	O
;	O
gsl_vector_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
cv	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_vector_view_array	(*(double),long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
c_data	array(double)
,	O
k	long
+	O
1	int
)	O
;	O
size_t	long
i	long
,	O
j	long
;	O
if	O
(	O
k	long
==	O
0	int
)	O
{	O
gsl_matrix_set_identity	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
L	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
gsl_matrix_set_zero	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
L	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_set_zero	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
&	O
cv	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
gsl_vector_set	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,double)->(void)
(	O
&	O
cv	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
0	int
,	O
-	O
1.0	int
)	O
;	O
gsl_vector_set	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,double)->(void)
(	O
&	O
cv	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
1	int
,	O
1.0	int
)	O
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<	O
k	long
;	O
++	O
i	long
)	O
{	O
double	O
cjm1	double
=	O
0.0	int
;	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
k	long
+	O
1	int
;	O
++	O
j	long
)	O
{	O
double	O
cj	double
=	O
gsl_vector_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(double)
(	O
&	O
cv	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
j	long
)	O
;	O
gsl_vector_set	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,double)->(void)
(	O
&	O
cv	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
j	long
,	O
cjm1	double
-	O
cj	double
)	O
;	O
cjm1	double
=	O
cj	double
;	O
}	O
}	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
k	long
+	O
1	int
;	O
++	O
i	long
)	O
{	O
gsl_vector_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
=	O
gsl_matrix_superdiagonal	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
L	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
i	long
)	O
;	O
double	O
ci	double
=	O
gsl_vector_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(double)
(	O
&	O
cv	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
i	long
)	O
;	O
gsl_vector_set_all	(*(struct(long,long,*(double),*(struct(long,*`)),int)),double)->(void)
(	O
&	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
ci	double
)	O
;	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
int	O
gsl_multifit_linear_Lsobolev	(long,long,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,long,*(struct(long,long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),double)))->(int)
(	O
const	O
size_t	long
p	int
,	O
const	O
size_t	long
kmax	long
,	O
const	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
alpha	long double
,	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
L	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
gsl_multifit_linear_workspace	struct(long,long,long,long,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),double)
*	O
work	*(struct(long,long,long,long,*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),double))
)	O
{	O
if	O
(	O
p	int
>	O
work	*(struct(long,long,long,long,*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),double))
->	O
pmax	long
)	O
{	O
GSL_ERROR	O
(	O
"p is larger than workspace"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
p	int
<=	O
kmax	long
)	O
{	O
GSL_ERROR	O
(	O
"p must be larger than derivative order"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
kmax	long
+	O
1	int
!=	O
alpha	long double
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"alpha must be size kmax + 1"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
p	int
!=	O
L	*(struct(long,long,*(double),*(struct(long,*(double))),int))
->	O
size1	long
)	O
{	O
GSL_ERROR	O
(	O
"L matrix is wrong size"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
L	*(struct(long,long,*(double),*(struct(long,*(double))),int))
->	O
size1	long
!=	O
L	*(struct(long,long,*(double),*(struct(long,*(double))),int))
->	O
size2	long
)	O
{	O
GSL_ERROR	O
(	O
"L matrix is not square"	*(char)
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
{	O
int	O
s	*(float)
;	O
size_t	long
j	long
,	O
k	long
;	O
gsl_vector_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
d	double
=	O
gsl_matrix_diagonal	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
L	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
const	O
double	O
alpha0	double
=	O
gsl_vector_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(double)
(	O
alpha	long double
,	O
0	int
)	O
;	O
gsl_matrix_set_zero	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
L	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_add_constant	(*(struct(long,long,*(double),*(struct(long,*`)),int)),double)->(int)
(	O
&	O
d	double
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
alpha0	double
*	O
alpha0	double
)	O
;	O
for	O
(	O
k	long
=	O
1	int
;	O
k	long
<=	O
kmax	long
;	O
++	O
k	long
)	O
{	O
gsl_matrix_view	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
Lk	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
work	*(struct(long,long,long,long,*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),double))
->	O
Q	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
0	int
,	O
0	int
,	O
p	int
-	O
k	long
,	O
p	int
)	O
;	O
double	O
ak	double
=	O
gsl_vector_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(double)
(	O
alpha	long double
,	O
k	long
)	O
;	O
s	*(float)
=	O
gsl_multifit_linear_Lk	(long,long,*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
p	int
,	O
k	long
,	O
&	O
Lk	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
if	O
(	O
s	*(float)
)	O
return	O
s	*(float)
;	O
gsl_matrix_scale	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),double)->(int)
(	O
&	O
Lk	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
ak	double
)	O
;	O
gsl_blas_dsyrk	(enum(int,int),enum(int,int,int),double,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),double,*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
CblasLower	int
,	O
CblasTrans	int
,	O
1.0	int
,	O
&	O
Lk	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
1.0	int
,	O
L	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
}	O
s	*(float)
=	O
gsl_linalg_cholesky_decomp	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
L	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
if	O
(	O
s	*(float)
)	O
return	O
s	*(float)
;	O
gsl_matrix_transpose_tricpy	(enum(int,int),enum(int,int),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
CblasLower	int
,	O
CblasUnit	int
,	O
L	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
L	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
p	int
;	O
++	O
j	long
)	O
{	O
for	O
(	O
k	long
=	O
0	int
;	O
k	long
<	O
j	long
;	O
++	O
k	long
)	O
gsl_matrix_set	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,double)->(void)
(	O
L	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
j	long
,	O
k	long
,	O
0.0	int
)	O
;	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
