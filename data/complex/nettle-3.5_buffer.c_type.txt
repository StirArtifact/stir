int	O
nettle_buffer_grow	(*(struct(*(char),long,*(void),*((*`,*`,long)->(*`)),long)),long)->(int)
(	O
struct	O
nettle_buffer	struct(*(char),long,*(void),*((*(void),*(void),long)->(*(void))),long)
*	O
buffer	*(struct(*(char),long,*(void),*((*(void),*(void),long)->(*(void))),long))
,	O
size_t	long
length	long
)	O
{	O
assert	O
(	O
buffer	*(struct(*(char),long,*(void),*((*(void),*(void),long)->(*(void))),long))
->	O
size	long
<=	O
buffer	*(struct(*(char),long,*(void),*((*(void),*(void),long)->(*(void))),long))
->	O
alloc	long
)	O
;	O
if	O
(	O
buffer	*(struct(*(char),long,*(void),*((*(void),*(void),long)->(*(void))),long))
->	O
size	long
+	O
length	long
>	O
buffer	*(struct(*(char),long,*(void),*((*(void),*(void),long)->(*(void))),long))
->	O
alloc	long
)	O
{	O
size_t	long
alloc	long
;	O
uint8_t	char
*	O
p	*(void)
;	O
if	O
(	O
!	O
buffer	*(struct(*(char),long,*(void),*((*(void),*(void),long)->(*(void))),long))
->	O
realloc	(*(void),long)->(*(void))
)	O
return	O
0	int
;	O
alloc	long
=	O
buffer	*(struct(*(char),long,*(void),*((*(void),*(void),long)->(*(void))),long))
->	O
alloc	long
*	O
2	int
+	O
length	long
+	O
100	int
;	O
p	*(void)
=	O
buffer	*(struct(*(char),long,*(void),*((*(void),*(void),long)->(*(void))),long))
->	O
realloc	(*(void),long)->(*(void))
(	O
buffer	*(struct(*(char),long,*(void),*((*(void),*(void),long)->(*(void))),long))
->	O
realloc_ctx	*(void)
,	O
buffer	*(struct(*(char),long,*(void),*((*(void),*(void),long)->(*(void))),long))
->	O
contents	*(char)
,	O
alloc	long
)	O
;	O
if	O
(	O
!	O
p	*(void)
)	O
return	O
0	int
;	O
buffer	*(struct(*(char),long,*(void),*((*(void),*(void),long)->(*(void))),long))
->	O
contents	*(char)
=	O
p	*(void)
;	O
buffer	*(struct(*(char),long,*(void),*((*(void),*(void),long)->(*(void))),long))
->	O
alloc	long
=	O
alloc	long
;	O
}	O
return	O
1	int
;	O
}	O
void	O
nettle_buffer_init_realloc	(*(struct(*(char),long,*(void),*((*`,*`,long)->(*`)),long)),*(void),*((*(void),*(void),long)->(*(void))))->(void)
(	O
struct	O
nettle_buffer	struct(*(char),long,*(void),*((*(void),*(void),long)->(*(void))),long)
*	O
buffer	*(struct(*(char),long,*(void),*((*(void),*(void),long)->(*(void))),long))
,	O
void	O
*	O
realloc_ctx	*(void)
,	O
nettle_realloc_func	(*(void),*(void),long)->(*(void))
*	O
realloc	(*(void),long)->(*(void))
)	O
{	O
buffer	*(struct(*(char),long,*(void),*((*(void),*(void),long)->(*(void))),long))
->	O
contents	*(char)
=	O
NULL	O
;	O
buffer	*(struct(*(char),long,*(void),*((*(void),*(void),long)->(*(void))),long))
->	O
alloc	long
=	O
0	int
;	O
buffer	*(struct(*(char),long,*(void),*((*(void),*(void),long)->(*(void))),long))
->	O
realloc	(*(void),long)->(*(void))
=	O
realloc	(*(void),long)->(*(void))
;	O
buffer	*(struct(*(char),long,*(void),*((*(void),*(void),long)->(*(void))),long))
->	O
realloc_ctx	*(void)
=	O
realloc_ctx	*(void)
;	O
buffer	*(struct(*(char),long,*(void),*((*(void),*(void),long)->(*(void))),long))
->	O
size	long
=	O
0	int
;	O
}	O
void	O
nettle_buffer_init_size	(*(struct(*(char),long,*(void),*((*`,*`,long)->(*`)),long)),long,*(char))->(void)
(	O
struct	O
nettle_buffer	struct(*(char),long,*(void),*((*(void),*(void),long)->(*(void))),long)
*	O
buffer	*(struct(*(char),long,*(void),*((*(void),*(void),long)->(*(void))),long))
,	O
size_t	long
length	long
,	O
uint8_t	char
*	O
space	*(char)
)	O
{	O
buffer	*(struct(*(char),long,*(void),*((*(void),*(void),long)->(*(void))),long))
->	O
contents	*(char)
=	O
space	*(char)
;	O
buffer	*(struct(*(char),long,*(void),*((*(void),*(void),long)->(*(void))),long))
->	O
alloc	long
=	O
length	long
;	O
buffer	*(struct(*(char),long,*(void),*((*(void),*(void),long)->(*(void))),long))
->	O
realloc	(*(void),long)->(*(void))
=	O
NULL	O
;	O
buffer	*(struct(*(char),long,*(void),*((*(void),*(void),long)->(*(void))),long))
->	O
realloc_ctx	*(void)
=	O
NULL	O
;	O
buffer	*(struct(*(char),long,*(void),*((*(void),*(void),long)->(*(void))),long))
->	O
size	long
=	O
0	int
;	O
}	O
void	O
nettle_buffer_clear	(*(struct(*(char),long,*(void),*((*`,*`,long)->(*`)),long)))->(void)
(	O
struct	O
nettle_buffer	struct(*(char),long,*(void),*((*(void),*(void),long)->(*(void))),long)
*	O
buffer	*(struct(*(char),long,*(void),*((*(void),*(void),long)->(*(void))),long))
)	O
{	O
if	O
(	O
buffer	*(struct(*(char),long,*(void),*((*(void),*(void),long)->(*(void))),long))
->	O
realloc	(*(void),long)->(*(void))
)	O
buffer	*(struct(*(char),long,*(void),*((*(void),*(void),long)->(*(void))),long))
->	O
realloc	(*(void),long)->(*(void))
(	O
buffer	*(struct(*(char),long,*(void),*((*(void),*(void),long)->(*(void))),long))
->	O
realloc_ctx	*(void)
,	O
buffer	*(struct(*(char),long,*(void),*((*(void),*(void),long)->(*(void))),long))
->	O
contents	*(char)
,	O
0	int
)	O
;	O
buffer	*(struct(*(char),long,*(void),*((*(void),*(void),long)->(*(void))),long))
->	O
contents	*(char)
=	O
NULL	O
;	O
buffer	*(struct(*(char),long,*(void),*((*(void),*(void),long)->(*(void))),long))
->	O
alloc	long
=	O
0	int
;	O
buffer	*(struct(*(char),long,*(void),*((*(void),*(void),long)->(*(void))),long))
->	O
size	long
=	O
0	int
;	O
}	O
void	O
nettle_buffer_reset	(*(struct(*(char),long,*(void),*((*`,*`,long)->(*`)),long)))->(void)
(	O
struct	O
nettle_buffer	struct(*(char),long,*(void),*((*(void),*(void),long)->(*(void))),long)
*	O
buffer	*(struct(*(char),long,*(void),*((*(void),*(void),long)->(*(void))),long))
)	O
{	O
buffer	*(struct(*(char),long,*(void),*((*(void),*(void),long)->(*(void))),long))
->	O
size	long
=	O
0	int
;	O
}	O
uint8_t	char
*	O
nettle_buffer_space	(*(struct(*(char),long,*(void),*((*`,*`,long)->(*`)),long)),long)->(*(char))
(	O
struct	O
nettle_buffer	struct(*(char),long,*(void),*((*(void),*(void),long)->(*(void))),long)
*	O
buffer	*(struct(*(char),long,*(void),*((*(void),*(void),long)->(*(void))),long))
,	O
size_t	long
length	long
)	O
{	O
uint8_t	char
*	O
p	*(void)
;	O
if	O
(	O
!	O
nettle_buffer_grow	(*(struct(*(char),long,*(void),*((*`,*`,long)->(*`)),long)),long)->(int)
(	O
buffer	*(struct(*(char),long,*(void),*((*(void),*(void),long)->(*(void))),long))
,	O
length	long
)	O
)	O
return	O
NULL	O
;	O
p	*(void)
=	O
buffer	*(struct(*(char),long,*(void),*((*(void),*(void),long)->(*(void))),long))
->	O
contents	*(char)
+	O
buffer	*(struct(*(char),long,*(void),*((*(void),*(void),long)->(*(void))),long))
->	O
size	long
;	O
buffer	*(struct(*(char),long,*(void),*((*(void),*(void),long)->(*(void))),long))
->	O
size	long
+=	O
length	long
;	O
return	O
p	*(void)
;	O
}	O
int	O
nettle_buffer_write	(*(struct(*(char),long,*(void),*((*`,*`,long)->(*`)),long)),long,*(char))->(int)
(	O
struct	O
nettle_buffer	struct(*(char),long,*(void),*((*(void),*(void),long)->(*(void))),long)
*	O
buffer	*(struct(*(char),long,*(void),*((*(void),*(void),long)->(*(void))),long))
,	O
size_t	long
length	long
,	O
const	O
uint8_t	char
*	O
data	*(char)
)	O
{	O
uint8_t	char
*	O
p	*(void)
=	O
nettle_buffer_space	(*(struct(*(char),long,*(void),*((*`,*`,long)->(*`)),long)),long)->(*(char))
(	O
buffer	*(struct(*(char),long,*(void),*((*(void),*(void),long)->(*(void))),long))
,	O
length	long
)	O
;	O
if	O
(	O
p	*(void)
)	O
{	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
p	*(void)
,	O
data	*(char)
,	O
length	long
)	O
;	O
return	O
1	int
;	O
}	O
else	O
return	O
0	int
;	O
}	O
int	O
nettle_buffer_copy	(*(struct(*(char),long,*(void),*((*`,*`,long)->(*`)),long)),*(struct(*(char),long,*(void),*((*`,*`,long)->(*`)),long)))->(int)
(	O
struct	O
nettle_buffer	struct(*(char),long,*(void),*((*(void),*(void),long)->(*(void))),long)
*	O
dst	*(char)
,	O
const	O
struct	O
nettle_buffer	struct(*(char),long,*(void),*((*(void),*(void),long)->(*(void))),long)
*	O
src	*(char)
)	O
{	O
return	O
nettle_buffer_write	(*(struct(*(char),long,*(void),*((*`,*`,long)->(*`)),long)),long,*(char))->(int)
(	O
dst	*(char)
,	O
src	*(char)
->	O
size	long
,	O
src	*(char)
->	O
contents	*(char)
)	O
;	O
}	O
