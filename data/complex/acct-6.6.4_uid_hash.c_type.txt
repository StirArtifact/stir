struct	O
hashtab	struct(long,long,long,*(*(struct(*(void),int,int,*(void),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int))))),int)
*	O
uid_table	*(struct(long,long,long,*(*(struct(*`,int,int,*`,*`,*`,*`))),int))
=	O
NULL	O
;	O
struct	O
hashtab	struct(long,long,long,*(*(struct(*(void),int,int,*(void),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int))))),int)
*	O
gid_table	*(struct(long,long,long,*(*(struct(*`,int,int,*`,*`,*`,*`))),int))
=	O
NULL	O
;	O
struct	O
uid_data	struct(*(char))
{	O
char	O
*	O
name	*(char)
;	O
}	O
;	O
struct	O
gid_data	struct(*(char))
{	O
char	O
*	O
name	*(char)
;	O
}	O
;	O
char	O
*	O
uid_name	(int)->(*(char))
(	O
int	O
uid	int
)	O
{	O
struct	O
hashtab_elem	struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct))),*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct))),*(struct))
*	O
he	*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(long,long,long,*(*`),int))))
;	O
if	O
(	O
uid_table	*(struct(long,long,long,*(*(struct(*`,int,int,*`,*`,*`,*`))),int))
==	O
NULL	O
)	O
uid_table	*(struct(long,long,long,*(*(struct(*`,int,int,*`,*`,*`,*`))),int))
=	O
hashtab_init	(int)->(*(struct(long,long,long,*(*(struct`)),int)))
(	O
sizeof	O
(	O
int	O
)	O
)	O
;	O
he	*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(long,long,long,*(*`),int))))
=	O
hashtab_find	(*(struct(long,long,long,*(*(struct`)),int)),*(void),int)->(*(struct(*(void),int,int,*(void),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))))
(	O
uid_table	*(struct(long,long,long,*(*(struct(*`,int,int,*`,*`,*`,*`))),int))
,	O
(	O
void	O
*	O
)	O
&	O
uid	int
,	O
sizeof	O
(	O
uid	int
)	O
)	O
;	O
if	O
(	O
he	*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(long,long,long,*(*`),int))))
==	O
NULL	O
)	O
{	O
struct	O
passwd	struct(*(char),*(char),int,int,*(char),*(char),*(char))
*	O
thispw	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
=	O
getpwuid	(int)->(*(struct(*(char),*(char),int,int,*(char),*(char),*(char))))
(	O
uid	int
)	O
;	O
struct	O
uid_data	struct(*(char))
ud	struct(*(char))
;	O
if	O
(	O
thispw	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
!=	O
NULL	O
)	O
{	O
ud	struct(*(char))
.	O
name	*(char)
=	O
(	O
char	O
*	O
)	O
xmalloc	(long)->(*(void))
(	O
sizeof	O
(	O
char	O
)	O
*	O
(	O
strlen	(*(char))->(long)
(	O
thispw	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
->	O
pw_name	*(char)
)	O
+	O
1	int
)	O
)	O
;	O
(	O
void	O
)	O
strcpy	(*(char),*(char))->(*(char))
(	O
ud	struct(*(char))
.	O
name	*(char)
,	O
thispw	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
->	O
pw_name	*(char)
)	O
;	O
}	O
else	O
{	O
int	O
digits	int
=	O
2	int
,	O
uid_copy	int
=	O
uid	int
;	O
for	O
(	O
;	O
uid_copy	int
;	O
digits	int
++	O
,	O
uid_copy	int
/=	O
10	int
)	O
;	O
ud	struct(*(char))
.	O
name	*(char)
=	O
(	O
char	O
*	O
)	O
xmalloc	(long)->(*(void))
(	O
sizeof	O
(	O
char	O
)	O
*	O
digits	int
)	O
;	O
(	O
void	O
)	O
sprintf	(*(char),*(char))->(int)
(	O
ud	struct(*(char))
.	O
name	*(char)
,	O
"%d"	*(char)
,	O
uid	int
)	O
;	O
}	O
he	*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(long,long,long,*(*`),int))))
=	O
hashtab_create	(*(struct(long,long,long,*(*(struct`)),int)),*(void),int)->(*(struct(*(void),int,int,*(void),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))))
(	O
uid_table	*(struct(long,long,long,*(*(struct(*`,int,int,*`,*`,*`,*`))),int))
,	O
(	O
void	O
*	O
)	O
&	O
uid	int
,	O
sizeof	O
(	O
uid	int
)	O
)	O
;	O
hashtab_set_value	(*(struct(*(void),int,int,*(void),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))),*(void),int)->(void)
(	O
he	*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(long,long,long,*(*`),int))))
,	O
&	O
ud	struct(*(char))
,	O
sizeof	O
(	O
ud	struct(*(char))
)	O
)	O
;	O
}	O
struct	O
uid_data	struct(*(char))
*	O
ud	struct(*(char))
=	O
hashtab_get_value	(*(struct(*(void),int,int,*(void),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))))->(*(void))
(	O
he	*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(long,long,long,*(*`),int))))
)	O
;	O
return	O
ud	struct(*(char))
->	O
name	*(char)
;	O
}	O
char	O
*	O
gid_name	(int)->(*(char))
(	O
int	O
gid	int
)	O
{	O
struct	O
hashtab_elem	struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct))),*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct))),*(struct))
*	O
he	*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(long,long,long,*(*`),int))))
;	O
if	O
(	O
gid_table	*(struct(long,long,long,*(*(struct(*`,int,int,*`,*`,*`,*`))),int))
==	O
NULL	O
)	O
gid_table	*(struct(long,long,long,*(*(struct(*`,int,int,*`,*`,*`,*`))),int))
=	O
hashtab_init	(int)->(*(struct(long,long,long,*(*(struct`)),int)))
(	O
sizeof	O
(	O
int	O
)	O
)	O
;	O
he	*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(long,long,long,*(*`),int))))
=	O
hashtab_find	(*(struct(long,long,long,*(*(struct`)),int)),*(void),int)->(*(struct(*(void),int,int,*(void),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))))
(	O
gid_table	*(struct(long,long,long,*(*(struct(*`,int,int,*`,*`,*`,*`))),int))
,	O
(	O
void	O
*	O
)	O
&	O
gid	int
,	O
sizeof	O
(	O
gid	int
)	O
)	O
;	O
if	O
(	O
he	*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(long,long,long,*(*`),int))))
==	O
NULL	O
)	O
{	O
struct	O
group	struct(*(char),*(char),int,*(*(char)))
*	O
grp	*(struct(*(char),*(char),int,*(*(char))))
;	O
struct	O
gid_data	struct(*(char))
gd	struct(*(char))
;	O
if	O
(	O
(	O
grp	*(struct(*(char),*(char),int,*(*(char))))
=	O
getgrgid	(int)->(*(struct(*(char),*(char),int,*(*(char)))))
(	O
gid	int
)	O
)	O
!=	O
NULL	O
)	O
{	O
gd	struct(*(char))
.	O
name	*(char)
=	O
(	O
char	O
*	O
)	O
xmalloc	(long)->(*(void))
(	O
sizeof	O
(	O
char	O
)	O
*	O
(	O
strlen	(*(char))->(long)
(	O
grp	*(struct(*(char),*(char),int,*(*(char))))
->	O
gr_name	*(char)
)	O
+	O
1	int
)	O
)	O
;	O
(	O
void	O
)	O
strcpy	(*(char),*(char))->(*(char))
(	O
gd	struct(*(char))
.	O
name	*(char)
,	O
grp	*(struct(*(char),*(char),int,*(*(char))))
->	O
gr_name	*(char)
)	O
;	O
}	O
else	O
{	O
int	O
digits	int
=	O
2	int
,	O
gid_copy	int
=	O
gid	int
;	O
for	O
(	O
;	O
gid_copy	int
;	O
digits	int
++	O
,	O
gid_copy	int
/=	O
10	int
)	O
;	O
gd	struct(*(char))
.	O
name	*(char)
=	O
(	O
char	O
*	O
)	O
xmalloc	(long)->(*(void))
(	O
sizeof	O
(	O
char	O
)	O
*	O
digits	int
)	O
;	O
(	O
void	O
)	O
sprintf	(*(char),*(char))->(int)
(	O
gd	struct(*(char))
.	O
name	*(char)
,	O
"%d"	*(char)
,	O
gid	int
)	O
;	O
}	O
he	*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(long,long,long,*(*`),int))))
=	O
hashtab_create	(*(struct(long,long,long,*(*(struct`)),int)),*(void),int)->(*(struct(*(void),int,int,*(void),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))))
(	O
gid_table	*(struct(long,long,long,*(*(struct(*`,int,int,*`,*`,*`,*`))),int))
,	O
(	O
void	O
*	O
)	O
&	O
gid	int
,	O
sizeof	O
(	O
gid	int
)	O
)	O
;	O
hashtab_set_value	(*(struct(*(void),int,int,*(void),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))),*(void),int)->(void)
(	O
he	*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(long,long,long,*(*`),int))))
,	O
&	O
gd	struct(*(char))
,	O
sizeof	O
(	O
gd	struct(*(char))
)	O
)	O
;	O
}	O
struct	O
gid_data	struct(*(char))
*	O
gd	struct(*(char))
=	O
hashtab_get_value	(*(struct(*(void),int,int,*(void),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))))->(*(void))
(	O
he	*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(long,long,long,*(*`),int))))
)	O
;	O
return	O
gd	struct(*(char))
->	O
name	*(char)
;	O
}	O
