static	O
int	O
handler	*((int,*(void),*(struct(short,short,struct(int),array(char))),*(struct(short,short,struct(int),array(char))),*(struct(int,int,char,short,short,short,char,char,short,struct(int),struct(int))),*(struct(char,char,short,union(char,struct`,struct`,int,struct`,struct`),union(struct`,struct`,long,array(char)))),int)->(int))
(	O
int	O
code	int
,	O
void	O
*	O
closure	*(void)
,	O
struct	O
sockaddr_in	struct(short,short,struct(int),array(char))
*	O
dest	*(struct(short,short,int,struct(union(array(char),array(short),array(int))),int))
,	O
struct	O
sockaddr_in	struct(short,short,struct(int),array(char))
*	O
from	*(struct(short,short,int,struct(union(array(char),array(short),array(int))),int))
,	O
struct	O
ip	struct(int,int,char,short,short,short,char,char,short,struct(int),struct(int))
*	O
ip	struct(int,int,char,short,short,short,char,char,short,struct(int),struct(int))
,	O
icmphdr_t	struct
*	O
icmp	*(*(struct(char,char,short,union(char,struct(int),struct(short,short),int,struct(short,short),struct(char,char,short)),union(struct(int,int,int),struct(struct`),long,array(char)))))
,	O
int	O
datalen	int
)	O
;	O
int	O
print_echo	(int,*(struct(double,double,double,double)),*(struct(short,short,struct(int),array(char))),*(struct(short,short,struct(int),array(char))),*(struct(int,int,char,short,short,short,char,char,short,struct(int),struct(int))),*(struct(char,char,short,union(char,struct(int),struct(short,short),int,struct(short,short),struct(char,char,short)),union(struct(int,int,int),struct(struct`),long,array(char)))),int)->(int)
(	O
int	O
dup	(int)->(int)
,	O
struct	O
ping_stat	struct(double,double,double,double)
*	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
,	O
struct	O
sockaddr_in	struct(short,short,struct(int),array(char))
*	O
dest	*(struct(short,short,int,struct(union(array(char),array(short),array(int))),int))
,	O
struct	O
sockaddr_in	struct(short,short,struct(int),array(char))
*	O
from	*(struct(short,short,int,struct(union(array(char),array(short),array(int))),int))
,	O
struct	O
ip	struct(int,int,char,short,short,short,char,char,short,struct(int),struct(int))
*	O
ip	struct(int,int,char,short,short,short,char,char,short,struct(int),struct(int))
,	O
icmphdr_t	struct
*	O
icmp	*(*(struct(char,char,short,union(char,struct(int),struct(short,short),int,struct(short,short),struct(char,char,short)),union(struct(int,int,int),struct(struct`),long,array(char)))))
,	O
int	O
datalen	int
)	O
;	O
static	O
int	O
echo_finish	()->(int)
(	O
void	O
)	O
;	O
void	O
print_icmp_header	(*(struct(short,short,struct(int),array(char))),*(struct(int,int,char,short,short,short,char,char,short,struct(int),struct(int))),*(struct(char,char,short,union(char,struct(int),struct(short,short),int,struct(short,short),struct(char,char,short)),union(struct(int,int,int),struct(struct`),long,array(char)))),int)->(void)
(	O
struct	O
sockaddr_in	struct(short,short,struct(int),array(char))
*	O
from	*(struct(short,short,int,struct(union(array(char),array(short),array(int))),int))
,	O
struct	O
ip	struct(int,int,char,short,short,short,char,char,short,struct(int),struct(int))
*	O
ip	struct(int,int,char,short,short,short,char,char,short,struct(int),struct(int))
,	O
icmphdr_t	struct
*	O
icmp	*(*(struct(char,char,short,union(char,struct(int),struct(short,short),int,struct(short,short),struct(char,char,short)),union(struct(int,int,int),struct(struct`),long,array(char)))))
,	O
int	O
len	char
)	O
;	O
static	O
void	O
print_ip_opt	(*(struct(int,int,char,short,short,short,char,char,short,struct(int),struct(int))),int)->(void)
(	O
struct	O
ip	struct(int,int,char,short,short,short,char,char,short,struct(int),struct(int))
*	O
ip	struct(int,int,char,short,short,short,char,char,short,struct(int),struct(int))
,	O
int	O
hlen	int
)	O
;	O
int	O
ping_echo	(*(char))->(int)
(	O
char	O
*	O
hostname	*(char)
)	O
{	O
char	O
rspace	array(char)
[	O
3	int
+	O
4	int
*	O
NROUTES	int
+	O
1	int
]	O
;	O
struct	O
ping_stat	struct(double,double,double,double)
ping_stat	struct(double,double,double,double)
;	O
int	O
status	int
;	O
if	O
(	O
options	int
&	O
OPT_FLOOD	int
&&	O
options	int
&	O
OPT_INTERVAL	int
)	O
error	(int,int,*(char))->(void)
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
"-f and -i incompatible options"	*(char)
)	O
;	O
memset	(*(void),int,long)->(*(void))
(	O
&	O
ping_stat	struct(double,double,double,double)
,	O
0	int
,	O
sizeof	O
(	O
ping_stat	struct(double,double,double,double)
)	O
)	O
;	O
ping_stat	struct(double,double,double,double)
.	O
tmin	double
=	O
999999999.0	int
;	O
ping_set_type	(*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct`,array(char)),struct(short,short,int,struct`,int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct`,array(char)),struct(short,short,int,struct`,int)),long,long,long)),int)->(void)
(	O
ping	*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),long,long,long))
,	O
ICMP_ECHO	int
)	O
;	O
ping_set_packetsize	(*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct`,array(char)),struct(short,short,int,struct`,int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct`,array(char)),struct(short,short,int,struct`,int)),long,long,long)),long)->(void)
(	O
ping	*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),long,long,long))
,	O
data_length	long
)	O
;	O
ping_set_event_handler	(*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct`,array(char)),struct(short,short,int,struct`,int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct`,array(char)),struct(short,short,int,struct`,int)),long,long,long)),*((int,*(void),*(struct(short,short,struct`,array(char))),*(struct(short,short,struct`,array(char))),*(struct(int,int,char,short,short,short,char,char,short,struct`,struct`)),*(struct(char,char,short,union`,union`)),int)->(int)),*(void))->(void)
(	O
ping	*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),long,long,long))
,	O
handler	*((int,*(void),*(struct(short,short,struct(int),array(char))),*(struct(short,short,struct(int),array(char))),*(struct(int,int,char,short,short,short,char,char,short,struct(int),struct(int))),*(struct(char,char,short,union(char,struct`,struct`,int,struct`,struct`),union(struct`,struct`,long,array(char)))),int)->(int))
,	O
&	O
ping_stat	struct(double,double,double,double)
)	O
;	O
if	O
(	O
ping_set_dest	(*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct`,array(char)),struct(short,short,int,struct`,int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct`,array(char)),struct(short,short,int,struct`,int)),long,long,long)),*(char))->(int)
(	O
ping	*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),long,long,long))
,	O
hostname	*(char)
)	O
)	O
error	(int,int,*(char))->(void)
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
"unknown host"	*(char)
)	O
;	O
if	O
(	O
options	int
&	O
OPT_RROUTE	int
)	O
{	O
memset	(*(void),int,long)->(*(void))
(	O
rspace	array(char)
,	O
0	int
,	O
sizeof	O
(	O
rspace	array(char)
)	O
)	O
;	O
rspace	array(char)
[	O
IPOPT_OPTVAL	int
]	O
=	O
IPOPT_RR	int
;	O
rspace	array(char)
[	O
IPOPT_OLEN	int
]	O
=	O
sizeof	O
(	O
rspace	array(char)
)	O
-	O
1	int
;	O
rspace	array(char)
[	O
IPOPT_OFFSET	int
]	O
=	O
IPOPT_MINOFF	int
;	O
if	O
(	O
setsockopt	(int,int,int,*(void),int)->(int)
(	O
ping	*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),long,long,long))
->	O
ping_fd	int
,	O
IPPROTO_IP	int
,	O
IP_OPTIONS	int
,	O
rspace	array(char)
,	O
sizeof	O
(	O
rspace	array(char)
)	O
)	O
<	O
0	int
)	O
error	(int,int,*(char))->(void)
(	O
EXIT_FAILURE	int
,	O
errno	O
,	O
"setsockopt"	*(char)
)	O
;	O
}	O
printf	(*(char))->(int)
(	O
"PING %s (%s): %d data bytes\n"	*(char)
,	O
ping	*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),long,long,long))
->	O
ping_hostname	*(char)
,	O
inet_ntoa	(struct(int))->(*(char))
(	O
ping	*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),long,long,long))
->	O
ping_dest	union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union(array(char),array(short),array(int))),int))
.	O
ping_sockaddr	struct(short,short,struct(int),array(char))
.	O
sin_addr	struct(int)
)	O
,	O
data_length	long
)	O
;	O
status	int
=	O
ping_run	(*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct`,array(char)),struct(short,short,int,struct`,int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct`,array(char)),struct(short,short,int,struct`,int)),long,long,long)),*(()->(int)))->(int)
(	O
ping	*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),long,long,long))
,	O
echo_finish	()->(int)
)	O
;	O
free	(*(void))->(void)
(	O
ping	*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),long,long,long))
->	O
ping_hostname	*(char)
)	O
;	O
return	O
status	int
;	O
}	O
int	O
handler	*((int,*(void),*(struct(short,short,struct(int),array(char))),*(struct(short,short,struct(int),array(char))),*(struct(int,int,char,short,short,short,char,char,short,struct(int),struct(int))),*(struct(char,char,short,union(char,struct`,struct`,int,struct`,struct`),union(struct`,struct`,long,array(char)))),int)->(int))
(	O
int	O
code	int
,	O
void	O
*	O
closure	*(void)
,	O
struct	O
sockaddr_in	struct(short,short,struct(int),array(char))
*	O
dest	*(struct(short,short,int,struct(union(array(char),array(short),array(int))),int))
,	O
struct	O
sockaddr_in	struct(short,short,struct(int),array(char))
*	O
from	*(struct(short,short,int,struct(union(array(char),array(short),array(int))),int))
,	O
struct	O
ip	struct(int,int,char,short,short,short,char,char,short,struct(int),struct(int))
*	O
ip	struct(int,int,char,short,short,short,char,char,short,struct(int),struct(int))
,	O
icmphdr_t	struct
*	O
icmp	*(*(struct(char,char,short,union(char,struct(int),struct(short,short),int,struct(short,short),struct(char,char,short)),union(struct(int,int,int),struct(struct`),long,array(char)))))
,	O
int	O
datalen	int
)	O
{	O
switch	O
(	O
code	int
)	O
{	O
case	O
PEV_RESPONSE	int
:	O
case	O
PEV_DUPLICATE	int
:	O
print_echo	(int,*(struct(double,double,double,double)),*(struct(short,short,struct(int),array(char))),*(struct(short,short,struct(int),array(char))),*(struct(int,int,char,short,short,short,char,char,short,struct(int),struct(int))),*(struct(char,char,short,union(char,struct(int),struct(short,short),int,struct(short,short),struct(char,char,short)),union(struct(int,int,int),struct(struct`),long,array(char)))),int)->(int)
(	O
code	int
==	O
PEV_DUPLICATE	int
,	O
(	O
struct	O
ping_stat	struct(double,double,double,double)
*	O
)	O
closure	*(void)
,	O
dest	*(struct(short,short,int,struct(union(array(char),array(short),array(int))),int))
,	O
from	*(struct(short,short,int,struct(union(array(char),array(short),array(int))),int))
,	O
ip	struct(int,int,char,short,short,short,char,char,short,struct(int),struct(int))
,	O
icmp	*(*(struct(char,char,short,union(char,struct(int),struct(short,short),int,struct(short,short),struct(char,char,short)),union(struct(int,int,int),struct(struct`),long,array(char)))))
,	O
datalen	int
)	O
;	O
break	O
;	O
case	O
PEV_NOECHO	int
:	O
;	O
print_icmp_header	(*(struct(short,short,struct(int),array(char))),*(struct(int,int,char,short,short,short,char,char,short,struct(int),struct(int))),*(struct(char,char,short,union(char,struct(int),struct(short,short),int,struct(short,short),struct(char,char,short)),union(struct(int,int,int),struct(struct`),long,array(char)))),int)->(void)
(	O
from	*(struct(short,short,int,struct(union(array(char),array(short),array(int))),int))
,	O
ip	struct(int,int,char,short,short,short,char,char,short,struct(int),struct(int))
,	O
icmp	*(*(struct(char,char,short,union(char,struct(int),struct(short,short),int,struct(short,short),struct(char,char,short)),union(struct(int,int,int),struct(struct`),long,array(char)))))
,	O
datalen	int
)	O
;	O
}	O
return	O
0	int
;	O
}	O
int	O
print_echo	(int,*(struct(double,double,double,double)),*(struct(short,short,struct(int),array(char))),*(struct(short,short,struct(int),array(char))),*(struct(int,int,char,short,short,short,char,char,short,struct(int),struct(int))),*(struct(char,char,short,union(char,struct(int),struct(short,short),int,struct(short,short),struct(char,char,short)),union(struct(int,int,int),struct(struct`),long,array(char)))),int)->(int)
(	O
int	O
dupflag	int
,	O
struct	O
ping_stat	struct(double,double,double,double)
*	O
ping_stat	struct(double,double,double,double)
,	O
struct	O
sockaddr_in	struct(short,short,struct(int),array(char))
*	O
dest	*(struct(short,short,int,struct(union(array(char),array(short),array(int))),int))
,	O
struct	O
sockaddr_in	struct(short,short,struct(int),array(char))
*	O
from	*(struct(short,short,int,struct(union(array(char),array(short),array(int))),int))
,	O
struct	O
ip	struct(int,int,char,short,short,short,char,char,short,struct(int),struct(int))
*	O
ip	struct(int,int,char,short,short,short,char,char,short,struct(int),struct(int))
,	O
icmphdr_t	struct
*	O
icmp	*(*(struct(char,char,short,union(char,struct(int),struct(short,short),int,struct(short,short),struct(char,char,short)),union(struct(int,int,int),struct(struct`),long,array(char)))))
,	O
int	O
datalen	int
)	O
{	O
int	O
hlen	int
;	O
struct	O
timeval	struct(long,long)
tv	struct(long,long)
;	O
int	O
timing	int
=	O
0	int
;	O
double	O
triptime	double
=	O
0.0	int
;	O
gettimeofday	(*(struct(long,long)),*(void))->(int)
(	O
&	O
tv	struct(long,long)
,	O
NULL	O
)	O
;	O
hlen	int
=	O
ip	struct(int,int,char,short,short,short,char,char,short,struct(int),struct(int))
->	O
ip_hl	int
<<	O
2	int
;	O
datalen	int
-=	O
hlen	int
;	O
if	O
(	O
PING_TIMING	O
(	O
datalen	int
-	O
8	int
)	O
)	O
{	O
struct	O
timeval	struct(long,long)
tv1	struct(long,long)
,	O
*	O
tp	*(struct(long,long))
;	O
timing	int
++	O
;	O
tp	*(struct(long,long))
=	O
(	O
struct	O
timeval	struct(long,long)
*	O
)	O
icmp	*(*(struct(char,char,short,union(char,struct(int),struct(short,short),int,struct(short,short),struct(char,char,short)),union(struct(int,int,int),struct(struct`),long,array(char)))))
->	O
icmp_data	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
&	O
tv1	struct(long,long)
,	O
tp	*(struct(long,long))
,	O
sizeof	O
(	O
tv1	struct(long,long)
)	O
)	O
;	O
tvsub	(*(struct(long,long)),*(struct(long,long)))->(void)
(	O
&	O
tv	struct(long,long)
,	O
&	O
tv1	struct(long,long)
)	O
;	O
triptime	double
=	O
(	O
(	O
double	O
)	O
tv	struct(long,long)
.	O
tv_sec	long
)	O
*	O
1000.0	int
+	O
(	O
(	O
double	O
)	O
tv	struct(long,long)
.	O
tv_usec	long
)	O
/	O
1000.0	int
;	O
ping_stat	struct(double,double,double,double)
->	O
tsum	double
+=	O
triptime	double
;	O
ping_stat	struct(double,double,double,double)
->	O
tsumsq	double
+=	O
triptime	double
*	O
triptime	double
;	O
if	O
(	O
triptime	double
<	O
ping_stat	struct(double,double,double,double)
->	O
tmin	double
)	O
ping_stat	struct(double,double,double,double)
->	O
tmin	double
=	O
triptime	double
;	O
if	O
(	O
triptime	double
>	O
ping_stat	struct(double,double,double,double)
->	O
tmax	double
)	O
ping_stat	struct(double,double,double,double)
->	O
tmax	double
=	O
triptime	double
;	O
}	O
if	O
(	O
options	int
&	O
OPT_QUIET	int
)	O
return	O
0	int
;	O
if	O
(	O
options	int
&	O
OPT_FLOOD	int
)	O
{	O
putchar	(int)->(int)
(	O
'\b'	O
)	O
;	O
return	O
0	int
;	O
}	O
printf	(*(char))->(int)
(	O
"%d bytes from %s: icmp_seq=%u"	*(char)
,	O
datalen	int
,	O
inet_ntoa	(struct(int))->(*(char))
(	O
*	O
(	O
struct	O
in_addr	struct(int)
*	O
)	O
&	O
from	*(struct(short,short,int,struct(union(array(char),array(short),array(int))),int))
->	O
sin_addr	struct(int)
.	O
s_addr	int
)	O
,	O
icmp	*(*(struct(char,char,short,union(char,struct(int),struct(short,short),int,struct(short,short),struct(char,char,short)),union(struct(int,int,int),struct(struct`),long,array(char)))))
->	O
icmp_seq	O
)	O
;	O
printf	(*(char))->(int)
(	O
" ttl=%d"	*(char)
,	O
ip	struct(int,int,char,short,short,short,char,char,short,struct(int),struct(int))
->	O
ip_ttl	char
)	O
;	O
if	O
(	O
timing	int
)	O
printf	(*(char))->(int)
(	O
" time=%.3f ms"	*(char)
,	O
triptime	double
)	O
;	O
if	O
(	O
dupflag	int
)	O
printf	(*(char))->(int)
(	O
" (DUP!)"	*(char)
)	O
;	O
print_ip_opt	(*(struct(int,int,char,short,short,short,char,char,short,struct(int),struct(int))),int)->(void)
(	O
ip	struct(int,int,char,short,short,short,char,char,short,struct(int),struct(int))
,	O
hlen	int
)	O
;	O
printf	(*(char))->(int)
(	O
"\n"	*(char)
)	O
;	O
return	O
0	int
;	O
}	O
char	O
*	O
ipaddr2str	(struct(int))->(*(char))
(	O
struct	O
in_addr	struct(int)
ina	struct(int)
)	O
{	O
struct	O
hostent	struct(*(char),*(*(char)),int,int,*(*(char)))
*	O
hp	*(struct(*(char),*(*(char)),int,int,*(*(char))))
;	O
if	O
(	O
options	int
&	O
OPT_NUMERIC	int
||	O
!	O
(	O
hp	*(struct(*(char),*(*(char)),int,int,*(*(char))))
=	O
gethostbyaddr	(*(void),int,int)->(*(struct(*(char),*(*(char)),int,int,*(*(char)))))
(	O
(	O
char	O
*	O
)	O
&	O
ina	struct(int)
,	O
4	int
,	O
AF_INET	O
)	O
)	O
)	O
return	O
xstrdup	(*(char))->(*(char))
(	O
inet_ntoa	(struct(int))->(*(char))
(	O
ina	struct(int)
)	O
)	O
;	O
else	O
{	O
char	O
*	O
ipstr	*(char)
=	O
inet_ntoa	(struct(int))->(*(char))
(	O
ina	struct(int)
)	O
;	O
int	O
len	char
=	O
strlen	(*(char))->(long)
(	O
hp	*(struct(*(char),*(*(char)),int,int,*(*(char))))
->	O
h_name	*(char)
)	O
+	O
1	int
;	O
char	O
*	O
buf	*(char)
;	O
if	O
(	O
ipstr	*(char)
)	O
len	char
+=	O
strlen	(*(char))->(long)
(	O
ipstr	*(char)
)	O
+	O
3	int
;	O
buf	*(char)
=	O
xmalloc	(long)->(*(void))
(	O
len	char
)	O
;	O
if	O
(	O
ipstr	*(char)
)	O
snprintf	(*(char),long,*(char))->(int)
(	O
buf	*(char)
,	O
len	char
,	O
"%s (%s)"	*(char)
,	O
hp	*(struct(*(char),*(*(char)),int,int,*(*(char))))
->	O
h_name	*(char)
,	O
ipstr	*(char)
)	O
;	O
else	O
snprintf	(*(char),long,*(char))->(int)
(	O
buf	*(char)
,	O
len	char
,	O
"%s"	*(char)
,	O
hp	*(struct(*(char),*(*(char)),int,int,*(*(char))))
->	O
h_name	*(char)
)	O
;	O
return	O
buf	*(char)
;	O
}	O
}	O
struct	O
icmp_diag	struct(int,*(char),*((*(struct(char,char,short,union(char,struct`,struct`,int,struct`,struct`),union(struct`,struct`,long,array(char)))),*(void))->(void)),*(void))
{	O
int	O
type	enum(int,int,int,int)
;	O
char	O
*	O
text	*(char)
;	O
void	O
(	O
*	O
fun	*((*(struct(char,char,short,union(char,struct`,struct`,int,struct`,struct`),union(struct`,struct`,long,array(char)))),*(void))->(void))
)	O
(	O
icmphdr_t	struct
*	O
,	O
void	O
*	O
data	array(int)
)	O
;	O
void	O
*	O
data	array(int)
;	O
}	O
;	O
struct	O
icmp_code_descr	struct(int,*(char))
{	O
int	O
code	int
;	O
char	O
*	O
diag	*(char)
;	O
}	O
icmp_code_descr	struct(int,*(char))
[	O
]	O
=	O
{	O
{	O
ICMP_NET_UNREACH	int
,	O
"Destination Net Unreachable"	*(char)
}	O
,	O
{	O
ICMP_HOST_UNREACH	int
,	O
"Destination Host Unreachable"	*(char)
}	O
,	O
{	O
ICMP_PROT_UNREACH	int
,	O
"Destination Protocol Unreachable"	*(char)
}	O
,	O
{	O
ICMP_PORT_UNREACH	int
,	O
"Destination Port Unreachable"	*(char)
}	O
,	O
{	O
ICMP_FRAG_NEEDED	int
,	O
"Fragmentation needed and DF set"	*(char)
}	O
,	O
{	O
ICMP_SR_FAILED	int
,	O
"Source Route Failed"	*(char)
}	O
,	O
{	O
ICMP_NET_UNKNOWN	int
,	O
"Network Unknown"	*(char)
}	O
,	O
{	O
ICMP_HOST_UNKNOWN	int
,	O
"Host Unknown"	*(char)
}	O
,	O
{	O
ICMP_HOST_ISOLATED	int
,	O
"Host Isolated"	*(char)
}	O
,	O
{	O
ICMP_NET_UNR_TOS	int
,	O
"Destination Network Unreachable At This TOS"	*(char)
}	O
,	O
{	O
ICMP_HOST_UNR_TOS	int
,	O
"Destination Host Unreachable At This TOS"	*(char)
}	O
,	O
{	O
ICMP_PKT_FILTERED	int
,	O
"Packet Filtered"	*(char)
}	O
,	O
{	O
ICMP_PREC_VIOLATION	int
,	O
"Precedence Violation"	*(char)
}	O
,	O
{	O
ICMP_PREC_CUTOFF	int
,	O
"Precedence Cutoff"	*(char)
}	O
,	O
{	O
ICMP_REDIR_NET	int
,	O
"Redirect Network"	*(char)
}	O
,	O
{	O
ICMP_REDIR_HOST	int
,	O
"Redirect Host"	*(char)
}	O
,	O
{	O
ICMP_REDIR_NETTOS	int
,	O
"Redirect Type of Service and Network"	*(char)
}	O
,	O
{	O
ICMP_REDIR_HOSTTOS	int
,	O
"Redirect Type of Service and Host"	*(char)
}	O
,	O
{	O
ICMP_EXC_TTL	int
,	O
"Time to live exceeded"	*(char)
}	O
,	O
{	O
ICMP_EXC_FRAGTIME	int
,	O
"Frag reassembly time exceeded"	*(char)
}	O
}	O
;	O
static	O
void	O
print_icmp_code	(int,*(char))->(void)
(	O
int	O
code	int
,	O
char	O
*	O
prefix	*(char)
)	O
{	O
struct	O
icmp_code_descr	struct(int,*(char))
*	O
p	*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),long,long,long))
;	O
for	O
(	O
p	*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),long,long,long))
=	O
icmp_code_descr	struct(int,*(char))
;	O
p	*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),long,long,long))
<	O
icmp_code_descr	struct(int,*(char))
+	O
NITEMS	O
(	O
icmp_code_descr	struct(int,*(char))
)	O
;	O
p	*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),long,long,long))
++	O
)	O
if	O
(	O
p	*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),long,long,long))
->	O
code	int
==	O
code	int
)	O
{	O
printf	(*(char))->(int)
(	O
"%s\n"	*(char)
,	O
p	*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),long,long,long))
->	O
diag	*(char)
)	O
;	O
return	O
;	O
}	O
printf	(*(char))->(int)
(	O
"%s, Unknown Code: %d\n"	*(char)
,	O
prefix	*(char)
,	O
code	int
)	O
;	O
}	O
static	O
void	O
print_ip_header	(*(struct(int,int,char,short,short,short,char,char,short,struct(int),struct(int))))->(void)
(	O
struct	O
ip	struct(int,int,char,short,short,short,char,char,short,struct(int),struct(int))
*	O
ip	struct(int,int,char,short,short,short,char,char,short,struct(int),struct(int))
)	O
{	O
int	O
hlen	int
;	O
unsigned	O
char	O
*	O
cp	*(char)
;	O
hlen	int
=	O
ip	struct(int,int,char,short,short,short,char,char,short,struct(int),struct(int))
->	O
ip_hl	int
<<	O
2	int
;	O
cp	*(char)
=	O
(	O
unsigned	O
char	O
*	O
)	O
ip	struct(int,int,char,short,short,short,char,char,short,struct(int),struct(int))
+	O
20	int
;	O
printf	(*(char))->(int)
(	O
"Vr HL TOS  Len   ID Flg  off TTL Pro  cks      Src      Dst Data\n"	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
" %1x  %1x  %02x %04x %04x"	*(char)
,	O
ip	struct(int,int,char,short,short,short,char,char,short,struct(int),struct(int))
->	O
ip_v	int
,	O
ip	struct(int,int,char,short,short,short,char,char,short,struct(int),struct(int))
->	O
ip_hl	int
,	O
ip	struct(int,int,char,short,short,short,char,char,short,struct(int),struct(int))
->	O
ip_tos	char
,	O
ip	struct(int,int,char,short,short,short,char,char,short,struct(int),struct(int))
->	O
ip_len	short
,	O
ip	struct(int,int,char,short,short,short,char,char,short,struct(int),struct(int))
->	O
ip_id	short
)	O
;	O
printf	(*(char))->(int)
(	O
"   %1x %04x"	*(char)
,	O
(	O
(	O
ip	struct(int,int,char,short,short,short,char,char,short,struct(int),struct(int))
->	O
ip_off	short
)	O
&	O
0xe000	int
)	O
>>	O
13	int
,	O
(	O
ip	struct(int,int,char,short,short,short,char,char,short,struct(int),struct(int))
->	O
ip_off	short
)	O
&	O
0x1fff	int
)	O
;	O
printf	(*(char))->(int)
(	O
"  %02x  %02x %04x"	*(char)
,	O
ip	struct(int,int,char,short,short,short,char,char,short,struct(int),struct(int))
->	O
ip_ttl	char
,	O
ip	struct(int,int,char,short,short,short,char,char,short,struct(int),struct(int))
->	O
ip_p	char
,	O
ip	struct(int,int,char,short,short,short,char,char,short,struct(int),struct(int))
->	O
ip_sum	short
)	O
;	O
printf	(*(char))->(int)
(	O
" %s "	*(char)
,	O
inet_ntoa	(struct(int))->(*(char))
(	O
*	O
(	O
(	O
struct	O
in_addr	struct(int)
*	O
)	O
&	O
ip	struct(int,int,char,short,short,short,char,char,short,struct(int),struct(int))
->	O
ip_src	struct(int)
)	O
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
" %s "	*(char)
,	O
inet_ntoa	(struct(int))->(*(char))
(	O
*	O
(	O
(	O
struct	O
in_addr	struct(int)
*	O
)	O
&	O
ip	struct(int,int,char,short,short,short,char,char,short,struct(int),struct(int))
->	O
ip_dst	struct(int)
)	O
)	O
)	O
;	O
while	O
(	O
hlen	int
--	O
>	O
20	int
)	O
printf	(*(char))->(int)
(	O
"%02x"	*(char)
,	O
*	O
cp	*(char)
++	O
)	O
;	O
printf	(*(char))->(int)
(	O
"\n"	*(char)
)	O
;	O
}	O
void	O
print_ip_data	(*(struct(char,char,short,union(char,struct(int),struct(short,short),int,struct(short,short),struct(char,char,short)),union(struct(int,int,int),struct(struct`),long,array(char)))),*(void))->(void)
(	O
icmphdr_t	struct
*	O
icmp	*(*(struct(char,char,short,union(char,struct(int),struct(short,short),int,struct(short,short),struct(char,char,short)),union(struct(int,int,int),struct(struct`),long,array(char)))))
,	O
void	O
*	O
data	array(int)
)	O
{	O
int	O
hlen	int
;	O
unsigned	O
char	O
*	O
cp	*(char)
;	O
struct	O
ip	struct(int,int,char,short,short,short,char,char,short,struct(int),struct(int))
*	O
ip	struct(int,int,char,short,short,short,char,char,short,struct(int),struct(int))
=	O
&	O
icmp	*(*(struct(char,char,short,union(char,struct(int),struct(short,short),int,struct(short,short),struct(char,char,short)),union(struct(int,int,int),struct(struct`),long,array(char)))))
->	O
icmp_ip	O
;	O
print_ip_header	(*(struct(int,int,char,short,short,short,char,char,short,struct(int),struct(int))))->(void)
(	O
ip	struct(int,int,char,short,short,short,char,char,short,struct(int),struct(int))
)	O
;	O
hlen	int
=	O
ip	struct(int,int,char,short,short,short,char,char,short,struct(int),struct(int))
->	O
ip_hl	int
<<	O
2	int
;	O
cp	*(char)
=	O
(	O
unsigned	O
char	O
*	O
)	O
ip	struct(int,int,char,short,short,short,char,char,short,struct(int),struct(int))
+	O
hlen	int
;	O
if	O
(	O
ip	struct(int,int,char,short,short,short,char,char,short,struct(int),struct(int))
->	O
ip_p	char
==	O
6	int
)	O
printf	(*(char))->(int)
(	O
"TCP: from port %u, to port %u (decimal)\n"	*(char)
,	O
(	O
*	O
cp	*(char)
*	O
256	int
+	O
*	O
(	O
cp	*(char)
+	O
1	int
)	O
)	O
,	O
(	O
*	O
(	O
cp	*(char)
+	O
2	int
)	O
*	O
256	int
+	O
*	O
(	O
cp	*(char)
+	O
3	int
)	O
)	O
)	O
;	O
else	O
if	O
(	O
ip	struct(int,int,char,short,short,short,char,char,short,struct(int),struct(int))
->	O
ip_p	char
==	O
17	int
)	O
printf	(*(char))->(int)
(	O
"UDP: from port %u, to port %u (decimal)\n"	*(char)
,	O
(	O
*	O
cp	*(char)
*	O
256	int
+	O
*	O
(	O
cp	*(char)
+	O
1	int
)	O
)	O
,	O
(	O
*	O
(	O
cp	*(char)
+	O
2	int
)	O
*	O
256	int
+	O
*	O
(	O
cp	*(char)
+	O
3	int
)	O
)	O
)	O
;	O
}	O
static	O
void	O
print_icmp	(*(struct(char,char,short,union(char,struct(int),struct(short,short),int,struct(short,short),struct(char,char,short)),union(struct(int,int,int),struct(struct`),long,array(char)))),*(void))->(void)
(	O
icmphdr_t	struct
*	O
icmp	*(*(struct(char,char,short,union(char,struct(int),struct(short,short),int,struct(short,short),struct(char,char,short)),union(struct(int,int,int),struct(struct`),long,array(char)))))
,	O
void	O
*	O
data	array(int)
)	O
{	O
print_icmp_code	(int,*(char))->(void)
(	O
icmp	*(*(struct(char,char,short,union(char,struct(int),struct(short,short),int,struct(short,short),struct(char,char,short)),union(struct(int,int,int),struct(struct`),long,array(char)))))
->	O
icmp_code	char
,	O
data	array(int)
)	O
;	O
print_ip_data	(*(struct(char,char,short,union(char,struct(int),struct(short,short),int,struct(short,short),struct(char,char,short)),union(struct(int,int,int),struct(struct`),long,array(char)))),*(void))->(void)
(	O
icmp	*(*(struct(char,char,short,union(char,struct(int),struct(short,short),int,struct(short,short),struct(char,char,short)),union(struct(int,int,int),struct(struct`),long,array(char)))))
,	O
NULL	O
)	O
;	O
}	O
static	O
void	O
print_parameterprob	(*(struct(char,char,short,union(char,struct(int),struct(short,short),int,struct(short,short),struct(char,char,short)),union(struct(int,int,int),struct(struct`),long,array(char)))),*(void))->(void)
(	O
icmphdr_t	struct
*	O
icmp	*(*(struct(char,char,short,union(char,struct(int),struct(short,short),int,struct(short,short),struct(char,char,short)),union(struct(int,int,int),struct(struct`),long,array(char)))))
,	O
void	O
*	O
data	array(int)
)	O
{	O
printf	(*(char))->(int)
(	O
"Parameter problem: IP address = %s\n"	*(char)
,	O
inet_ntoa	(struct(int))->(*(char))
(	O
icmp	*(*(struct(char,char,short,union(char,struct(int),struct(short,short),int,struct(short,short),struct(char,char,short)),union(struct(int,int,int),struct(struct`),long,array(char)))))
->	O
icmp_gwaddr	O
)	O
)	O
;	O
print_ip_data	(*(struct(char,char,short,union(char,struct(int),struct(short,short),int,struct(short,short),struct(char,char,short)),union(struct(int,int,int),struct(struct`),long,array(char)))),*(void))->(void)
(	O
icmp	*(*(struct(char,char,short,union(char,struct(int),struct(short,short),int,struct(short,short),struct(char,char,short)),union(struct(int,int,int),struct(struct`),long,array(char)))))
,	O
data	array(int)
)	O
;	O
}	O
struct	O
icmp_diag	struct(int,*(char),*((*(struct(char,char,short,union(char,struct`,struct`,int,struct`,struct`),union(struct`,struct`,long,array(char)))),*(void))->(void)),*(void))
icmp_diag	struct(int,*(char),*((*(struct(char,char,short,union(char,struct`,struct`,int,struct`,struct`),union(struct`,struct`,long,array(char)))),*(void))->(void)),*(void))
[	O
]	O
=	O
{	O
{	O
ICMP_ECHOREPLY	int
,	O
"Echo Reply"	*(char)
,	O
NULL	O
}	O
,	O
{	O
ICMP_DEST_UNREACH	int
,	O
NULL	O
,	O
print_icmp	(*(struct(char,char,short,union(char,struct(int),struct(short,short),int,struct(short,short),struct(char,char,short)),union(struct(int,int,int),struct(struct`),long,array(char)))),*(void))->(void)
,	O
"Dest Unreachable"	*(char)
}	O
,	O
{	O
ICMP_SOURCE_QUENCH	int
,	O
"Source Quench"	*(char)
,	O
print_ip_data	(*(struct(char,char,short,union(char,struct(int),struct(short,short),int,struct(short,short),struct(char,char,short)),union(struct(int,int,int),struct(struct`),long,array(char)))),*(void))->(void)
}	O
,	O
{	O
ICMP_REDIRECT	int
,	O
NULL	O
,	O
print_icmp	(*(struct(char,char,short,union(char,struct(int),struct(short,short),int,struct(short,short),struct(char,char,short)),union(struct(int,int,int),struct(struct`),long,array(char)))),*(void))->(void)
,	O
"Redirect"	*(char)
}	O
,	O
{	O
ICMP_ECHO	int
,	O
"Echo Request"	*(char)
,	O
NULL	O
}	O
,	O
{	O
ICMP_TIME_EXCEEDED	int
,	O
NULL	O
,	O
print_icmp	(*(struct(char,char,short,union(char,struct(int),struct(short,short),int,struct(short,short),struct(char,char,short)),union(struct(int,int,int),struct(struct`),long,array(char)))),*(void))->(void)
,	O
"Time exceeded"	*(char)
}	O
,	O
{	O
ICMP_PARAMETERPROB	int
,	O
NULL	O
,	O
print_parameterprob	(*(struct(char,char,short,union(char,struct(int),struct(short,short),int,struct(short,short),struct(char,char,short)),union(struct(int,int,int),struct(struct`),long,array(char)))),*(void))->(void)
}	O
,	O
{	O
ICMP_TIMESTAMP	int
,	O
"Timestamp"	*(char)
,	O
NULL	O
}	O
,	O
{	O
ICMP_TIMESTAMPREPLY	int
,	O
"Timestamp Reply"	*(char)
,	O
NULL	O
}	O
,	O
{	O
ICMP_INFO_REQUEST	int
,	O
"Information Request"	*(char)
,	O
NULL	O
}	O
,	O
}	O
;	O
void	O
print_icmp_header	(*(struct(short,short,struct(int),array(char))),*(struct(int,int,char,short,short,short,char,char,short,struct(int),struct(int))),*(struct(char,char,short,union(char,struct(int),struct(short,short),int,struct(short,short),struct(char,char,short)),union(struct(int,int,int),struct(struct`),long,array(char)))),int)->(void)
(	O
struct	O
sockaddr_in	struct(short,short,struct(int),array(char))
*	O
from	*(struct(short,short,int,struct(union(array(char),array(short),array(int))),int))
,	O
struct	O
ip	struct(int,int,char,short,short,short,char,char,short,struct(int),struct(int))
*	O
ip	struct(int,int,char,short,short,short,char,char,short,struct(int),struct(int))
,	O
icmphdr_t	struct
*	O
icmp	*(*(struct(char,char,short,union(char,struct(int),struct(short,short),int,struct(short,short),struct(char,char,short)),union(struct(int,int,int),struct(struct`),long,array(char)))))
,	O
int	O
len	char
)	O
{	O
int	O
hlen	int
;	O
struct	O
ip	struct(int,int,char,short,short,short,char,char,short,struct(int),struct(int))
*	O
orig_ip	*(struct(int,int,char,short,short,short,char,char,short,struct(int),struct(int)))
;	O
char	O
*	O
s	long
;	O
struct	O
icmp_diag	struct(int,*(char),*((*(struct(char,char,short,union(char,struct`,struct`,int,struct`,struct`),union(struct`,struct`,long,array(char)))),*(void))->(void)),*(void))
*	O
p	*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),long,long,long))
;	O
hlen	int
=	O
ip	struct(int,int,char,short,short,short,char,char,short,struct(int),struct(int))
->	O
ip_hl	int
<<	O
2	int
;	O
orig_ip	*(struct(int,int,char,short,short,short,char,char,short,struct(int),struct(int)))
=	O
&	O
icmp	*(*(struct(char,char,short,union(char,struct(int),struct(short,short),int,struct(short,short),struct(char,char,short)),union(struct(int,int,int),struct(struct`),long,array(char)))))
->	O
icmp_ip	O
;	O
if	O
(	O
!	O
(	O
options	int
&	O
OPT_VERBOSE	int
||	O
orig_ip	*(struct(int,int,char,short,short,short,char,char,short,struct(int),struct(int)))
->	O
ip_dst	struct(int)
.	O
s_addr	int
==	O
ping	*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),long,long,long))
->	O
ping_dest	union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union(array(char),array(short),array(int))),int))
.	O
ping_sockaddr	struct(short,short,struct(int),array(char))
.	O
sin_addr	struct(int)
.	O
s_addr	int
)	O
)	O
return	O
;	O
printf	(*(char))->(int)
(	O
"%d bytes from %s: "	*(char)
,	O
len	char
-	O
hlen	int
,	O
s	long
=	O
ipaddr2str	(struct(int))->(*(char))
(	O
from	*(struct(short,short,int,struct(union(array(char),array(short),array(int))),int))
->	O
sin_addr	struct(int)
)	O
)	O
;	O
free	(*(void))->(void)
(	O
s	long
)	O
;	O
for	O
(	O
p	*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),long,long,long))
=	O
icmp_diag	struct(int,*(char),*((*(struct(char,char,short,union(char,struct`,struct`,int,struct`,struct`),union(struct`,struct`,long,array(char)))),*(void))->(void)),*(void))
;	O
p	*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),long,long,long))
<	O
icmp_diag	struct(int,*(char),*((*(struct(char,char,short,union(char,struct`,struct`,int,struct`,struct`),union(struct`,struct`,long,array(char)))),*(void))->(void)),*(void))
+	O
NITEMS	O
(	O
icmp_diag	struct(int,*(char),*((*(struct(char,char,short,union(char,struct`,struct`,int,struct`,struct`),union(struct`,struct`,long,array(char)))),*(void))->(void)),*(void))
)	O
;	O
p	*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),long,long,long))
++	O
)	O
{	O
if	O
(	O
p	*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),long,long,long))
->	O
type	enum(int,int,int,int)
==	O
icmp	*(*(struct(char,char,short,union(char,struct(int),struct(short,short),int,struct(short,short),struct(char,char,short)),union(struct(int,int,int),struct(struct`),long,array(char)))))
->	O
icmp_type	char
)	O
{	O
if	O
(	O
p	*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),long,long,long))
->	O
text	*(char)
)	O
printf	(*(char))->(int)
(	O
"%s\n"	*(char)
,	O
p	*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),long,long,long))
->	O
text	*(char)
)	O
;	O
if	O
(	O
p	*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),long,long,long))
->	O
fun	*((*(struct(char,char,short,union(char,struct`,struct`,int,struct`,struct`),union(struct`,struct`,long,array(char)))),*(void))->(void))
)	O
p	*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),long,long,long))
->	O
fun	*((*(struct(char,char,short,union(char,struct`,struct`,int,struct`,struct`),union(struct`,struct`,long,array(char)))),*(void))->(void))
(	O
icmp	*(*(struct(char,char,short,union(char,struct(int),struct(short,short),int,struct(short,short),struct(char,char,short)),union(struct(int,int,int),struct(struct`),long,array(char)))))
,	O
p	*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),long,long,long))
->	O
data	array(int)
)	O
;	O
return	O
;	O
}	O
}	O
printf	(*(char))->(int)
(	O
"Bad ICMP type: %d\n"	*(char)
,	O
icmp	*(*(struct(char,char,short,union(char,struct(int),struct(short,short),int,struct(short,short),struct(char,char,short)),union(struct(int,int,int),struct(struct`),long,array(char)))))
->	O
icmp_type	char
)	O
;	O
}	O
void	O
print_ip_opt	(*(struct(int,int,char,short,short,short,char,char,short,struct(int),struct(int))),int)->(void)
(	O
struct	O
ip	struct(int,int,char,short,short,short,char,char,short,struct(int),struct(int))
*	O
ip	struct(int,int,char,short,short,short,char,char,short,struct(int),struct(int))
,	O
int	O
hlen	int
)	O
{	O
unsigned	O
char	O
*	O
cp	*(char)
;	O
int	O
i	int
,	O
j	int
,	O
l	int
;	O
static	O
int	O
old_rrlen	int
;	O
static	O
char	O
old_rr	array(char)
[	O
MAX_IPOPTLEN	int
]	O
;	O
cp	*(char)
=	O
(	O
unsigned	O
char	O
*	O
)	O
(	O
ip	struct(int,int,char,short,short,short,char,char,short,struct(int),struct(int))
+	O
1	int
)	O
;	O
for	O
(	O
;	O
hlen	int
>	O
(	O
int	O
)	O
sizeof	O
(	O
struct	O
ip	struct(int,int,char,short,short,short,char,char,short,struct(int),struct(int))
)	O
;	O
--	O
hlen	int
,	O
++	O
cp	*(char)
)	O
switch	O
(	O
*	O
cp	*(char)
)	O
{	O
case	O
IPOPT_EOL	int
:	O
hlen	int
=	O
0	int
;	O
break	O
;	O
case	O
IPOPT_LSRR	int
:	O
printf	(*(char))->(int)
(	O
"\nLSRR: "	*(char)
)	O
;	O
hlen	int
-=	O
2	int
;	O
j	int
=	O
*	O
++	O
cp	*(char)
;	O
++	O
cp	*(char)
;	O
if	O
(	O
j	int
>	O
IPOPT_MINOFF	int
)	O
for	O
(	O
;	O
;	O
)	O
{	O
l	int
=	O
*	O
++	O
cp	*(char)
;	O
l	int
=	O
(	O
l	int
<<	O
8	int
)	O
+	O
*	O
++	O
cp	*(char)
;	O
l	int
=	O
(	O
l	int
<<	O
8	int
)	O
+	O
*	O
++	O
cp	*(char)
;	O
l	int
=	O
(	O
l	int
<<	O
8	int
)	O
+	O
*	O
++	O
cp	*(char)
;	O
if	O
(	O
l	int
==	O
0	int
)	O
{	O
printf	(*(char))->(int)
(	O
"\t0.0.0.0"	*(char)
)	O
;	O
}	O
else	O
{	O
struct	O
in_addr	struct(int)
ina	struct(int)
;	O
char	O
*	O
s	long
;	O
ina	struct(int)
.	O
s_addr	int
=	O
ntohl	(int)->(int)
(	O
l	int
)	O
;	O
printf	(*(char))->(int)
(	O
"\t%s"	*(char)
,	O
s	long
=	O
ipaddr2str	(struct(int))->(*(char))
(	O
ina	struct(int)
)	O
)	O
;	O
free	(*(void))->(void)
(	O
s	long
)	O
;	O
}	O
hlen	int
-=	O
4	int
;	O
j	int
-=	O
4	int
;	O
if	O
(	O
j	int
<=	O
IPOPT_MINOFF	int
)	O
break	O
;	O
putchar	(int)->(int)
(	O
'\n'	O
)	O
;	O
}	O
break	O
;	O
case	O
IPOPT_RR	int
:	O
j	int
=	O
*	O
++	O
cp	*(char)
;	O
i	int
=	O
*	O
++	O
cp	*(char)
;	O
hlen	int
-=	O
2	int
;	O
if	O
(	O
i	int
>	O
j	int
)	O
i	int
=	O
j	int
;	O
i	int
-=	O
IPOPT_MINOFF	int
;	O
if	O
(	O
i	int
<=	O
0	int
)	O
continue	O
;	O
if	O
(	O
i	int
==	O
old_rrlen	int
&&	O
cp	*(char)
==	O
(	O
unsigned	O
char	O
*	O
)	O
(	O
ip	struct(int,int,char,short,short,short,char,char,short,struct(int),struct(int))
+	O
1	int
)	O
+	O
2	int
&&	O
!	O
memcmp	(*(void),*(void),long)->(int)
(	O
(	O
char	O
*	O
)	O
cp	*(char)
,	O
old_rr	array(char)
,	O
i	int
)	O
&&	O
!	O
(	O
options	int
&	O
OPT_FLOOD	int
)	O
)	O
{	O
printf	(*(char))->(int)
(	O
"\t (same route)"	*(char)
)	O
;	O
i	int
=	O
(	O
(	O
i	int
+	O
3	int
)	O
/	O
4	int
)	O
*	O
4	int
;	O
hlen	int
-=	O
i	int
;	O
cp	*(char)
+=	O
i	int
;	O
break	O
;	O
}	O
if	O
(	O
i	int
<	O
MAX_IPOPTLEN	int
)	O
{	O
old_rrlen	int
=	O
i	int
;	O
memmove	(*(void),*(void),long)->(*(void))
(	O
old_rr	array(char)
,	O
cp	*(char)
,	O
i	int
)	O
;	O
}	O
else	O
old_rrlen	int
=	O
0	int
;	O
printf	(*(char))->(int)
(	O
"\nRR: "	*(char)
)	O
;	O
j	int
=	O
0	int
;	O
for	O
(	O
;	O
;	O
)	O
{	O
l	int
=	O
*	O
++	O
cp	*(char)
;	O
l	int
=	O
(	O
l	int
<<	O
8	int
)	O
+	O
*	O
++	O
cp	*(char)
;	O
l	int
=	O
(	O
l	int
<<	O
8	int
)	O
+	O
*	O
++	O
cp	*(char)
;	O
l	int
=	O
(	O
l	int
<<	O
8	int
)	O
+	O
*	O
++	O
cp	*(char)
;	O
if	O
(	O
l	int
==	O
0	int
)	O
{	O
printf	(*(char))->(int)
(	O
"\t0.0.0.0"	*(char)
)	O
;	O
}	O
else	O
{	O
struct	O
in_addr	struct(int)
ina	struct(int)
;	O
char	O
*	O
s	long
;	O
ina	struct(int)
.	O
s_addr	int
=	O
ntohl	(int)->(int)
(	O
l	int
)	O
;	O
printf	(*(char))->(int)
(	O
"\t%s"	*(char)
,	O
s	long
=	O
ipaddr2str	(struct(int))->(*(char))
(	O
ina	struct(int)
)	O
)	O
;	O
free	(*(void))->(void)
(	O
s	long
)	O
;	O
}	O
hlen	int
-=	O
4	int
;	O
i	int
-=	O
4	int
;	O
j	int
+=	O
4	int
;	O
if	O
(	O
i	int
<=	O
0	int
)	O
break	O
;	O
if	O
(	O
j	int
>=	O
MAX_IPOPTLEN	int
)	O
{	O
printf	(*(char))->(int)
(	O
"\t (truncated route)"	*(char)
)	O
;	O
break	O
;	O
}	O
putchar	(int)->(int)
(	O
'\n'	O
)	O
;	O
}	O
break	O
;	O
case	O
IPOPT_NOP	int
:	O
printf	(*(char))->(int)
(	O
"\nNOP"	*(char)
)	O
;	O
break	O
;	O
default	O
:	O
printf	(*(char))->(int)
(	O
"\nunknown option %x"	*(char)
,	O
*	O
cp	*(char)
)	O
;	O
break	O
;	O
}	O
}	O
int	O
echo_finish	()->(int)
(	O
void	O
)	O
{	O
ping_finish	()->(int)
(	O
)	O
;	O
if	O
(	O
ping	*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),long,long,long))
->	O
ping_num_recv	long
&&	O
PING_TIMING	O
(	O
data_length	long
)	O
)	O
{	O
struct	O
ping_stat	struct(double,double,double,double)
*	O
ping_stat	struct(double,double,double,double)
=	O
(	O
struct	O
ping_stat	struct(double,double,double,double)
*	O
)	O
ping	*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),long,long,long))
->	O
ping_closure	*(void)
;	O
double	O
total	double
=	O
ping	*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),long,long,long))
->	O
ping_num_recv	long
+	O
ping	*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),long,long,long))
->	O
ping_num_rept	long
;	O
double	O
avg	double
=	O
ping_stat	struct(double,double,double,double)
->	O
tsum	double
/	O
total	double
;	O
double	O
vari	double
=	O
ping_stat	struct(double,double,double,double)
->	O
tsumsq	double
/	O
total	double
-	O
avg	double
*	O
avg	double
;	O
printf	(*(char))->(int)
(	O
"round-trip min/avg/max/stddev = %.3f/%.3f/%.3f/%.3f ms\n"	*(char)
,	O
ping_stat	struct(double,double,double,double)
->	O
tmin	double
,	O
avg	double
,	O
ping_stat	struct(double,double,double,double)
->	O
tmax	double
,	O
nsqrt	(double,double)->(double)
(	O
vari	double
,	O
0.0005	int
)	O
)	O
;	O
}	O
return	O
(	O
ping	*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),long,long,long))
->	O
ping_num_recv	long
==	O
0	int
)	O
;	O
}	O
