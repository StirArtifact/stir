static	O
int	O
can_compress	(*(struct))->(int)
(	O
struct	O
MHD_Connection	O
*	O
con	*(struct)
)	O
{	O
const	O
char	O
*	O
ae	*(char)
;	O
const	O
char	O
*	O
de	*(char)
;	O
ae	*(char)
=	O
MHD_lookup_connection_value	(*(struct),enum(int,int,int,int,int,int),*(char))->(*(char))
(	O
con	*(struct)
,	O
MHD_HEADER_KIND	int
,	O
MHD_HTTP_HEADER_ACCEPT_ENCODING	*(char)
)	O
;	O
if	O
(	O
NULL	O
==	O
ae	*(char)
)	O
return	O
MHD_NO	int
;	O
if	O
(	O
0	int
==	O
strcmp	(*(char),*(char))->(int)
(	O
ae	*(char)
,	O
"*"	*(char)
)	O
)	O
return	O
MHD_YES	int
;	O
de	*(char)
=	O
strstr	(*(char),*(char))->(*(char))
(	O
ae	*(char)
,	O
"deflate"	*(char)
)	O
;	O
if	O
(	O
NULL	O
==	O
de	*(char)
)	O
return	O
MHD_NO	int
;	O
if	O
(	O
(	O
(	O
de	*(char)
==	O
ae	*(char)
)	O
||	O
(	O
de	*(char)
[	O
-	O
1	int
]	O
==	O
','	O
)	O
||	O
(	O
de	*(char)
[	O
-	O
1	int
]	O
==	O
' '	O
)	O
)	O
&&	O
(	O
(	O
de	*(char)
[	O
strlen	(*(char))->(long)
(	O
"deflate"	*(char)
)	O
]	O
==	O
'\0'	O
)	O
||	O
(	O
de	*(char)
[	O
strlen	(*(char))->(long)
(	O
"deflate"	*(char)
)	O
]	O
==	O
','	O
)	O
||	O
(	O
de	*(char)
[	O
strlen	(*(char))->(long)
(	O
"deflate"	*(char)
)	O
]	O
==	O
';'	O
)	O
)	O
)	O
return	O
MHD_YES	int
;	O
return	O
MHD_NO	int
;	O
}	O
static	O
int	O
body_compress	(*(*(void)),*(long))->(int)
(	O
void	O
*	O
*	O
buf	*(void)
,	O
size_t	long
*	O
buf_size	*(long)
)	O
{	O
Bytef	char
*	O
cbuf	*(char)
;	O
uLongf	long
cbuf_size	long
;	O
int	O
ret	int
;	O
cbuf_size	long
=	O
compressBound	(long)->(long)
(	O
*	O
buf_size	*(long)
)	O
;	O
cbuf	*(char)
=	O
malloc	(long)->(*(void))
(	O
cbuf_size	long
)	O
;	O
if	O
(	O
NULL	O
==	O
cbuf	*(char)
)	O
return	O
MHD_NO	int
;	O
ret	int
=	O
compress	(*(char),*(long),*(char),long)->(int)
(	O
cbuf	*(char)
,	O
&	O
cbuf_size	long
,	O
(	O
const	O
Bytef	char
*	O
)	O
*	O
buf	*(void)
,	O
*	O
buf_size	*(long)
)	O
;	O
if	O
(	O
(	O
Z_OK	int
!=	O
ret	int
)	O
||	O
(	O
cbuf_size	long
>=	O
*	O
buf_size	*(long)
)	O
)	O
{	O
free	(*(void))->(void)
(	O
cbuf	*(char)
)	O
;	O
return	O
MHD_NO	int
;	O
}	O
free	(*(void))->(void)
(	O
*	O
buf	*(void)
)	O
;	O
*	O
buf	*(void)
=	O
(	O
void	O
*	O
)	O
cbuf	*(char)
;	O
*	O
buf_size	*(long)
=	O
(	O
size_t	long
)	O
cbuf_size	long
;	O
return	O
MHD_YES	int
;	O
}	O
static	O
int	O
ahc_echo	(*(void),*(struct),*(char),*(char),*(char),*(char),*(long),*(*(void)))->(int)
(	O
void	O
*	O
cls	*(void)
,	O
struct	O
MHD_Connection	O
*	O
connection	*(struct)
,	O
const	O
char	O
*	O
url	*(char)
,	O
const	O
char	O
*	O
method	int
,	O
const	O
char	O
*	O
version	*(char)
,	O
const	O
char	O
*	O
upload_data	*(char)
,	O
size_t	long
*	O
upload_data_size	*(long)
,	O
void	O
*	O
*	O
ptr	*(void)
)	O
{	O
struct	O
MHD_Response	O
*	O
response	*(struct)
;	O
int	O
ret	int
;	O
int	O
comp	int
;	O
size_t	long
body_len	long
;	O
char	O
*	O
body_str	*(char)
;	O
(	O
void	O
)	O
cls	*(void)
;	O
(	O
void	O
)	O
url	*(char)
;	O
(	O
void	O
)	O
version	*(char)
;	O
(	O
void	O
)	O
upload_data	*(char)
;	O
(	O
void	O
)	O
upload_data_size	*(long)
;	O
if	O
(	O
0	int
!=	O
strcmp	(*(char),*(char))->(int)
(	O
method	int
,	O
"GET"	*(char)
)	O
)	O
return	O
MHD_NO	int
;	O
if	O
(	O
!	O
*	O
ptr	*(void)
)	O
{	O
*	O
ptr	*(void)
=	O
(	O
void	O
*	O
)	O
1	int
;	O
return	O
MHD_YES	int
;	O
}	O
*	O
ptr	*(void)
=	O
NULL	O
;	O
body_str	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
PAGE	O
)	O
;	O
if	O
(	O
NULL	O
==	O
body_str	*(char)
)	O
{	O
return	O
MHD_NO	int
;	O
}	O
body_len	long
=	O
strlen	(*(char))->(long)
(	O
body_str	*(char)
)	O
;	O
comp	int
=	O
MHD_NO	int
;	O
if	O
(	O
MHD_YES	int
==	O
can_compress	(*(struct))->(int)
(	O
connection	*(struct)
)	O
)	O
comp	int
=	O
body_compress	(*(*(void)),*(long))->(int)
(	O
(	O
void	O
*	O
*	O
)	O
&	O
body_str	*(char)
,	O
&	O
body_len	long
)	O
;	O
response	*(struct)
=	O
MHD_create_response_from_buffer	(long,*(void),enum(int,int,int))->(*(struct))
(	O
body_len	long
,	O
body_str	*(char)
,	O
MHD_RESPMEM_MUST_FREE	int
)	O
;	O
if	O
(	O
NULL	O
==	O
response	*(struct)
)	O
{	O
free	(*(void))->(void)
(	O
body_str	*(char)
)	O
;	O
return	O
MHD_NO	int
;	O
}	O
if	O
(	O
MHD_YES	int
==	O
comp	int
)	O
{	O
if	O
(	O
MHD_NO	int
==	O
MHD_add_response_header	(*(struct),*(char),*(char))->(int)
(	O
response	*(struct)
,	O
MHD_HTTP_HEADER_CONTENT_ENCODING	*(char)
,	O
"deflate"	*(char)
)	O
)	O
{	O
MHD_destroy_response	(*(struct))->(void)
(	O
response	*(struct)
)	O
;	O
return	O
MHD_NO	int
;	O
}	O
}	O
ret	int
=	O
MHD_queue_response	(*(struct),int,*(struct))->(int)
(	O
connection	*(struct)
,	O
200	int
,	O
response	*(struct)
)	O
;	O
MHD_destroy_response	(*(struct))->(void)
(	O
response	*(struct)
)	O
;	O
return	O
ret	int
;	O
}	O
int	O
main	(int,*(*(char)))->(int)
(	O
int	O
argc	int
,	O
char	O
*	O
const	O
*	O
argv	*(*(char))
)	O
{	O
struct	O
MHD_Daemon	O
*	O
d	*(struct)
;	O
if	O
(	O
argc	int
!=	O
2	int
)	O
{	O
printf	(*(char))->(int)
(	O
"%s PORT\n"	*(char)
,	O
argv	*(*(char))
[	O
0	int
]	O
)	O
;	O
return	O
1	int
;	O
}	O
d	*(struct)
=	O
MHD_start_daemon	(int,short,*((*(void),*(struct(short,array(char))),int)->(int)),*(void),*((*(void),*(struct),*(char),*(char),*(char),*(char),*(long),*(*(void)))->(int)),*(void))->(*(struct))
(	O
MHD_USE_AUTO	int
|	O
MHD_USE_INTERNAL_POLLING_THREAD	int
|	O
MHD_USE_ERROR_LOG	int
,	O
atoi	(*(char))->(int)
(	O
argv	*(*(char))
[	O
1	int
]	O
)	O
,	O
NULL	O
,	O
NULL	O
,	O
&	O
ahc_echo	(*(void),*(struct),*(char),*(char),*(char),*(char),*(long),*(*(void)))->(int)
,	O
NULL	O
,	O
MHD_OPTION_END	int
)	O
;	O
if	O
(	O
NULL	O
==	O
d	*(struct)
)	O
return	O
1	int
;	O
(	O
void	O
)	O
getc	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
stdin	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
MHD_stop_daemon	(*(struct))->(void)
(	O
d	*(struct)
)	O
;	O
return	O
0	int
;	O
}	O
