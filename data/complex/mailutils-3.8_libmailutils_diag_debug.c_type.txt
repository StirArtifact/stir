int	O
mu_debug_line_info	int
;	O
struct	O
debug_category	struct(*(char),int,int)
{	O
char	O
*	O
name	*(char)
;	O
mu_debug_level_t	int
level	int
;	O
int	O
isset	int
;	O
}	O
;	O
static	O
struct	O
debug_category	struct(*(char),int,int)
default_cattab	array(struct(*(char),int,int))
[	O
]	O
=	O
{	O
{	O
"all"	*(char)
}	O
,	O
}	O
;	O
static	O
struct	O
debug_category	struct(*(char),int,int)
*	O
cattab	*(struct(*(char),int,int))
=	O
default_cattab	array(struct(*(char),int,int))
;	O
static	O
size_t	long
catcnt	long
=	O
MU_ARRAY_SIZE	O
(	O
default_cattab	array(struct(*(char),int,int))
)	O
;	O
static	O
size_t	long
catmax	long
=	O
0	int
;	O
size_t	long
mu_debug_register_category	(*(char))->(long)
(	O
char	O
*	O
name	*(char)
)	O
{	O
struct	O
debug_category	struct(*(char),int,int)
*	O
newtab	*(struct(*(char),int,int))
;	O
size_t	long
n	int
;	O
if	O
(	O
cattab	*(struct(*(char),int,int))
==	O
default_cattab	array(struct(*(char),int,int))
)	O
{	O
n	int
=	O
2	int
*	O
catcnt	long
;	O
newtab	*(struct(*(char),int,int))
=	O
calloc	(long,long)->(*(void))
(	O
n	int
,	O
sizeof	O
(	O
newtab	*(struct(*(char),int,int))
[	O
0	int
]	O
)	O
)	O
;	O
if	O
(	O
!	O
newtab	*(struct(*(char),int,int))
)	O
{	O
mu_error	(*(char))->(int)
(	O
_	O
(	O
"cannot reallocate debug category table"	*(char)
)	O
)	O
;	O
return	O
(	O
size_t	long
)	O
-	O
1	int
;	O
}	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
newtab	*(struct(*(char),int,int))
,	O
cattab	*(struct(*(char),int,int))
,	O
catcnt	long
*	O
sizeof	O
(	O
cattab	*(struct(*(char),int,int))
[	O
0	int
]	O
)	O
)	O
;	O
cattab	*(struct(*(char),int,int))
=	O
newtab	*(struct(*(char),int,int))
;	O
catmax	long
=	O
n	int
;	O
}	O
else	O
if	O
(	O
catcnt	long
==	O
catmax	long
)	O
{	O
n	int
=	O
catmax	long
+	O
MU_DEFAULT_CATMAX	O
;	O
newtab	*(struct(*(char),int,int))
=	O
realloc	(*(void),long)->(*(void))
(	O
cattab	*(struct(*(char),int,int))
,	O
n	int
*	O
sizeof	O
(	O
cattab	*(struct(*(char),int,int))
[	O
0	int
]	O
)	O
)	O
;	O
if	O
(	O
!	O
newtab	*(struct(*(char),int,int))
)	O
{	O
mu_error	(*(char))->(int)
(	O
_	O
(	O
"cannot reallocate debug category table"	*(char)
)	O
)	O
;	O
return	O
(	O
size_t	long
)	O
-	O
1	int
;	O
}	O
else	O
{	O
cattab	*(struct(*(char),int,int))
=	O
newtab	*(struct(*(char),int,int))
;	O
catmax	long
=	O
n	int
;	O
}	O
}	O
cattab	*(struct(*(char),int,int))
[	O
catcnt	long
]	O
.	O
name	*(char)
=	O
name	*(char)
;	O
cattab	*(struct(*(char),int,int))
[	O
catcnt	long
]	O
.	O
level	int
=	O
0	int
;	O
cattab	*(struct(*(char),int,int))
[	O
catcnt	long
]	O
.	O
isset	int
=	O
0	int
;	O
return	O
catcnt	long
++	O
;	O
}	O
size_t	long
mu_debug_next_handle	()->(long)
(	O
)	O
{	O
return	O
catcnt	long
?	O
catcnt	long
:	O
1	int
;	O
}	O
int	O
mu_debug_level_p	(int,int)->(int)
(	O
mu_debug_handle_t	int
catn	int
,	O
mu_debug_level_t	int
level	int
)	O
{	O
return	O
catn	int
<	O
catcnt	long
&&	O
(	O
(	O
cattab	*(struct(*(char),int,int))
[	O
catn	int
]	O
.	O
isset	int
?	O
cattab	*(struct(*(char),int,int))
[	O
catn	int
]	O
.	O
level	int
:	O
cattab	*(struct(*(char),int,int))
[	O
0	int
]	O
.	O
level	int
)	O
&	O
MU_DEBUG_LEVEL_MASK	O
(	O
level	int
)	O
)	O
;	O
}	O
int	O
mu_debug_category_match	(int,int)->(int)
(	O
mu_debug_handle_t	int
catn	int
,	O
mu_debug_level_t	int
mask	int
)	O
{	O
return	O
catn	int
<	O
catcnt	long
&&	O
(	O
(	O
cattab	*(struct(*(char),int,int))
[	O
catn	int
]	O
.	O
isset	int
?	O
cattab	*(struct(*(char),int,int))
[	O
catn	int
]	O
.	O
level	int
:	O
cattab	*(struct(*(char),int,int))
[	O
0	int
]	O
.	O
level	int
)	O
&	O
mask	int
)	O
;	O
}	O
static	O
mu_debug_handle_t	int
find_category	(*(char),long)->(int)
(	O
const	O
char	O
*	O
name	*(char)
,	O
size_t	long
len	long
)	O
{	O
mu_debug_handle_t	int
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
catcnt	long
;	O
i	int
++	O
)	O
{	O
if	O
(	O
strlen	(*(char))->(long)
(	O
cattab	*(struct(*(char),int,int))
[	O
i	int
]	O
.	O
name	*(char)
)	O
==	O
len	long
&&	O
memcmp	(*(void),*(void),long)->(int)
(	O
cattab	*(struct(*(char),int,int))
[	O
i	int
]	O
.	O
name	*(char)
,	O
name	*(char)
,	O
len	long
)	O
==	O
0	int
)	O
return	O
i	int
;	O
}	O
return	O
(	O
mu_debug_handle_t	int
)	O
-	O
1	int
;	O
}	O
void	O
mu_debug_enable_category	(*(char),long,int)->(void)
(	O
const	O
char	O
*	O
catname	*(char)
,	O
size_t	long
catlen	long
,	O
mu_debug_level_t	int
level	int
)	O
{	O
mu_debug_handle_t	int
catn	int
=	O
find_category	(*(char),long)->(int)
(	O
catname	*(char)
,	O
catlen	long
)	O
;	O
if	O
(	O
catn	int
==	O
(	O
mu_debug_handle_t	int
)	O
-	O
1	int
)	O
{	O
mu_error	(*(char))->(int)
(	O
_	O
(	O
"unknown category: %.*s"	*(char)
)	O
,	O
(	O
int	O
)	O
catlen	long
,	O
catname	*(char)
)	O
;	O
return	O
;	O
}	O
cattab	*(struct(*(char),int,int))
[	O
catn	int
]	O
.	O
level	int
=	O
level	int
;	O
cattab	*(struct(*(char),int,int))
[	O
catn	int
]	O
.	O
isset	int
=	O
1	int
;	O
}	O
void	O
mu_debug_disable_category	(*(char),long)->(void)
(	O
const	O
char	O
*	O
catname	*(char)
,	O
size_t	long
catlen	long
)	O
{	O
size_t	long
catn	int
=	O
find_category	(*(char),long)->(int)
(	O
catname	*(char)
,	O
catlen	long
)	O
;	O
if	O
(	O
catn	int
==	O
(	O
mu_debug_handle_t	int
)	O
-	O
1	int
)	O
{	O
mu_error	(*(char))->(int)
(	O
_	O
(	O
"unknown category: %.*s"	*(char)
)	O
,	O
(	O
int	O
)	O
catlen	long
,	O
catname	*(char)
)	O
;	O
return	O
;	O
}	O
cattab	*(struct(*(char),int,int))
[	O
catn	int
]	O
.	O
isset	int
=	O
0	int
;	O
}	O
int	O
mu_debug_category_level	(*(char),long,*(int))->(int)
(	O
const	O
char	O
*	O
catname	*(char)
,	O
size_t	long
catlen	long
,	O
mu_debug_level_t	int
*	O
plev	*(int)
)	O
{	O
mu_debug_handle_t	int
catn	int
;	O
if	O
(	O
catname	*(char)
)	O
{	O
catn	int
=	O
find_category	(*(char),long)->(int)
(	O
catname	*(char)
,	O
catlen	long
)	O
;	O
if	O
(	O
catn	int
==	O
(	O
mu_debug_handle_t	int
)	O
-	O
1	int
)	O
return	O
MU_ERR_NOENT	O
;	O
}	O
else	O
catn	int
=	O
0	int
;	O
*	O
plev	*(int)
=	O
cattab	*(struct(*(char),int,int))
[	O
catn	int
]	O
.	O
level	int
;	O
return	O
0	int
;	O
}	O
int	O
mu_debug_set_category_level	(int,int)->(int)
(	O
mu_debug_handle_t	int
catn	int
,	O
mu_debug_level_t	int
level	int
)	O
{	O
if	O
(	O
catn	int
<	O
catcnt	long
)	O
{	O
cattab	*(struct(*(char),int,int))
[	O
catn	int
]	O
.	O
isset	int
=	O
1	int
;	O
cattab	*(struct(*(char),int,int))
[	O
catn	int
]	O
.	O
level	int
=	O
level	int
;	O
return	O
0	int
;	O
}	O
return	O
MU_ERR_NOENT	O
;	O
}	O
int	O
mu_debug_get_category_level	(int,*(int))->(int)
(	O
mu_debug_handle_t	int
catn	int
,	O
mu_debug_level_t	int
*	O
plev	*(int)
)	O
{	O
if	O
(	O
catn	int
<	O
catcnt	long
)	O
{	O
if	O
(	O
!	O
cattab	*(struct(*(char),int,int))
[	O
catn	int
]	O
.	O
isset	int
)	O
*	O
plev	*(int)
=	O
0	int
;	O
else	O
*	O
plev	*(int)
=	O
cattab	*(struct(*(char),int,int))
[	O
catn	int
]	O
.	O
level	int
;	O
return	O
0	int
;	O
}	O
return	O
MU_ERR_NOENT	O
;	O
}	O
static	O
char	O
*	O
mu_debug_level_str	array(*(char))
[	O
]	O
=	O
{	O
"error"	*(char)
,	O
"trace0"	*(char)
,	O
"trace1"	*(char)
,	O
"trace2"	*(char)
,	O
"trace3"	*(char)
,	O
"trace4"	*(char)
,	O
"trace5"	*(char)
,	O
"trace6"	*(char)
,	O
"trace7"	*(char)
,	O
"trace8"	*(char)
,	O
"trace9"	*(char)
,	O
"prot"	*(char)
}	O
;	O
static	O
int	O
mu_debug_level_from_string	(*(char),*(int),*(*(char)))->(int)
(	O
const	O
char	O
*	O
str	*(char)
,	O
mu_debug_level_t	int
*	O
lev	*(int)
,	O
char	O
*	O
*	O
endp	*(*(char))
)	O
{	O
int	O
i	int
;	O
const	O
char	O
*	O
p	*(char)
;	O
char	O
*	O
q	*(char)
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
MU_ARRAY_SIZE	O
(	O
mu_debug_level_str	array(*(char))
)	O
;	O
i	int
++	O
)	O
{	O
for	O
(	O
p	*(char)
=	O
str	*(char)
,	O
q	*(char)
=	O
mu_debug_level_str	array(*(char))
[	O
i	int
]	O
;	O
;	O
p	*(char)
++	O
,	O
q	*(char)
++	O
)	O
{	O
if	O
(	O
!	O
*	O
q	*(char)
)	O
{	O
if	O
(	O
endp	*(*(char))
)	O
*	O
endp	*(*(char))
=	O
(	O
char	O
*	O
)	O
p	*(char)
;	O
*	O
lev	*(int)
=	O
i	int
;	O
return	O
0	int
;	O
}	O
if	O
(	O
*	O
q	*(char)
!=	O
*	O
p	*(char)
)	O
break	O
;	O
}	O
}	O
return	O
MU_ERR_NOENT	O
;	O
}	O
static	O
void	O
parse_spec	(*(char))->(void)
(	O
const	O
char	O
*	O
spec	*(char)
)	O
{	O
char	O
*	O
q	*(char)
;	O
mu_debug_level_t	int
level	int
;	O
if	O
(	O
mu_isdigit	O
(	O
*	O
spec	*(char)
)	O
)	O
{	O
level	int
=	O
strtoul	(*(char),*(*(char)),int)->(long)
(	O
spec	*(char)
,	O
&	O
q	*(char)
,	O
0	int
)	O
;	O
if	O
(	O
*	O
q	*(char)
)	O
mu_error	(*(char))->(int)
(	O
_	O
(	O
"%s: wrong debug spec near %s"	*(char)
)	O
,	O
spec	*(char)
,	O
q	*(char)
)	O
;	O
else	O
{	O
cattab	*(struct(*(char),int,int))
[	O
0	int
]	O
.	O
level	int
=	O
level	int
;	O
cattab	*(struct(*(char),int,int))
[	O
0	int
]	O
.	O
isset	int
=	O
1	int
;	O
}	O
return	O
;	O
}	O
if	O
(	O
*	O
spec	*(char)
==	O
'!'	O
)	O
mu_debug_disable_category	(*(char),long)->(void)
(	O
spec	*(char)
+	O
1	int
,	O
strlen	(*(char))->(long)
(	O
spec	*(char)
+	O
1	int
)	O
)	O
;	O
else	O
{	O
char	O
*	O
p	*(char)
;	O
size_t	long
len	long
;	O
p	*(char)
=	O
strchr	(*(char),int)->(*(char))
(	O
spec	*(char)
,	O
'.'	O
)	O
;	O
if	O
(	O
p	*(char)
)	O
{	O
struct	O
mu_wordsplit	struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct(long,*(*`),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*`),*(*`),long,long,*(*`),long,*(*`),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct`),*(struct`),array(char),int)))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*(char)),*(char),long,*(void))->(int)),*(void),*((*(*(char)),*(char),long,*(*(char)),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
;	O
len	long
=	O
p	*(char)
-	O
spec	*(char)
;	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
.	O
ws_delim	*(char)
=	O
","	*(char)
;	O
if	O
(	O
mu_wordsplit	struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct(long,*(*`),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*`),*(*`),long,long,*(*`),long,*(*`),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct`),*(struct`),array(char),int)))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*(char)),*(char),long,*(void))->(int)),*(void),*((*(*(char)),*(char),long,*(*(char)),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)
(	O
p	*(char)
+	O
1	int
,	O
&	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
,	O
MU_WRDSF_DELIM	O
|	O
MU_WRDSF_WS	O
|	O
MU_WRDSF_NOVAR	O
|	O
MU_WRDSF_NOCMD	O
)	O
)	O
{	O
mu_error	(*(char))->(int)
(	O
_	O
(	O
"cannot split line `%s': %s"	*(char)
)	O
,	O
p	*(char)
+	O
1	int
,	O
mu_wordsplit_strerror	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)))->(*(char))
(	O
&	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
)	O
)	O
;	O
return	O
;	O
}	O
else	O
{	O
size_t	long
i	int
;	O
mu_debug_level_t	int
lev	*(int)
=	O
0	int
;	O
mu_debug_level_t	int
xlev	int
=	O
0	int
;	O
char	O
*	O
end	struct(*(char),int,int)
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
.	O
ws_wordc	long
;	O
i	int
++	O
)	O
{	O
char	O
*	O
s	*(char)
=	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
.	O
ws_wordv	*(*(char))
[	O
i	int
]	O
;	O
int	O
exact	int
=	O
0	int
;	O
mu_debug_level_t	int
n	int
;	O
mu_debug_level_t	int
*	O
tgt	*(int)
=	O
&	O
lev	*(int)
;	O
if	O
(	O
*	O
s	*(char)
==	O
'!'	O
)	O
{	O
if	O
(	O
i	int
==	O
0	int
)	O
lev	*(int)
=	O
MU_DEBUG_LEVEL_UPTO	O
(	O
MU_DEBUG_PROT	int
)	O
;	O
tgt	*(int)
=	O
&	O
xlev	int
;	O
s	*(char)
++	O
;	O
}	O
if	O
(	O
*	O
s	*(char)
==	O
'='	O
)	O
{	O
exact	int
=	O
1	int
;	O
s	*(char)
++	O
;	O
}	O
if	O
(	O
mu_debug_level_from_string	(*(char),*(int),*(*(char)))->(int)
(	O
s	*(char)
,	O
&	O
n	int
,	O
&	O
end	struct(*(char),int,int)
)	O
)	O
{	O
mu_error	(*(char))->(int)
(	O
_	O
(	O
"unknown level `%s'"	*(char)
)	O
,	O
s	*(char)
)	O
;	O
continue	O
;	O
}	O
else	O
if	O
(	O
*	O
end	struct(*(char),int,int)
==	O
'-'	O
)	O
{	O
mu_debug_level_t	int
l	int
;	O
s	*(char)
=	O
end	struct(*(char),int,int)
+	O
1	int
;	O
if	O
(	O
mu_debug_level_from_string	(*(char),*(int),*(*(char)))->(int)
(	O
s	*(char)
,	O
&	O
l	int
,	O
&	O
end	struct(*(char),int,int)
)	O
)	O
{	O
mu_error	(*(char))->(int)
(	O
_	O
(	O
"unknown level `%s'"	*(char)
)	O
,	O
s	*(char)
)	O
;	O
continue	O
;	O
}	O
else	O
if	O
(	O
*	O
end	struct(*(char),int,int)
)	O
{	O
mu_error	(*(char))->(int)
(	O
_	O
(	O
"invalid level: %s"	*(char)
)	O
,	O
s	*(char)
)	O
;	O
continue	O
;	O
}	O
if	O
(	O
n	int
<	O
l	int
)	O
*	O
tgt	*(int)
|=	O
MU_DEBUG_LEVEL_RANGE	O
(	O
n	int
,	O
l	int
)	O
;	O
else	O
*	O
tgt	*(int)
|=	O
MU_DEBUG_LEVEL_RANGE	O
(	O
l	int
,	O
n	int
)	O
;	O
}	O
else	O
if	O
(	O
*	O
end	struct(*(char),int,int)
)	O
{	O
mu_error	(*(char))->(int)
(	O
_	O
(	O
"invalid level: %s"	*(char)
)	O
,	O
s	*(char)
)	O
;	O
continue	O
;	O
}	O
else	O
if	O
(	O
exact	int
)	O
*	O
tgt	*(int)
|=	O
MU_DEBUG_LEVEL_MASK	O
(	O
n	int
)	O
;	O
else	O
*	O
tgt	*(int)
|=	O
MU_DEBUG_LEVEL_UPTO	O
(	O
n	int
)	O
;	O
}	O
level	int
=	O
lev	*(int)
&	O
~	O
xlev	int
;	O
}	O
}	O
else	O
{	O
len	long
=	O
strlen	(*(char))->(long)
(	O
spec	*(char)
)	O
;	O
level	int
=	O
MU_DEBUG_LEVEL_UPTO	O
(	O
MU_DEBUG_PROT	int
)	O
;	O
}	O
mu_debug_enable_category	(*(char),long,int)->(void)
(	O
spec	*(char)
,	O
len	long
,	O
level	int
)	O
;	O
}	O
}	O
void	O
mu_debug_parse_spec	(*(char))->(void)
(	O
const	O
char	O
*	O
spec	*(char)
)	O
{	O
struct	O
mu_wordsplit	struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct(long,*(*`),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*`),*(*`),long,long,*(*`),long,*(*`),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct`),*(struct`),array(char),int)))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*(char)),*(char),long,*(void))->(int)),*(void),*((*(*(char)),*(char),long,*(*(char)),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
;	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
.	O
ws_delim	*(char)
=	O
";"	*(char)
;	O
if	O
(	O
mu_wordsplit	struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct(long,*(*`),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*`),*(*`),long,long,*(*`),long,*(*`),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct`),*(struct`),array(char),int)))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*(char)),*(char),long,*(void))->(int)),*(void),*((*(*(char)),*(char),long,*(*(char)),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)
(	O
spec	*(char)
,	O
&	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
,	O
MU_WRDSF_DELIM	O
|	O
MU_WRDSF_WS	O
|	O
MU_WRDSF_NOVAR	O
|	O
MU_WRDSF_NOCMD	O
)	O
)	O
{	O
mu_error	(*(char))->(int)
(	O
_	O
(	O
"cannot split line `%s': %s"	*(char)
)	O
,	O
spec	*(char)
,	O
mu_wordsplit_strerror	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)))->(*(char))
(	O
&	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
)	O
)	O
;	O
}	O
else	O
{	O
size_t	long
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
.	O
ws_wordc	long
;	O
i	int
++	O
)	O
parse_spec	(*(char))->(void)
(	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
.	O
ws_wordv	*(*(char))
[	O
i	int
]	O
)	O
;	O
mu_wordsplit_free	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)))->(void)
(	O
&	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
)	O
;	O
}	O
}	O
void	O
mu_debug_clear_all	()->(void)
(	O
)	O
{	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
catcnt	long
;	O
i	int
++	O
)	O
cattab	*(struct(*(char),int,int))
[	O
i	int
]	O
.	O
isset	int
=	O
0	int
;	O
}	O
static	O
int	O
name_matches	(*(*(char)),*(char))->(int)
(	O
char	O
*	O
*	O
names	*(char)
,	O
char	O
*	O
str	*(char)
)	O
{	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
names	*(char)
[	O
i	int
]	O
;	O
i	int
++	O
)	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
names	*(char)
[	O
i	int
]	O
,	O
str	*(char)
)	O
==	O
0	int
)	O
return	O
1	int
;	O
return	O
0	int
;	O
}	O
int	O
mu_debug_format_spec	(*(struct),*(char),int)->(int)
(	O
mu_stream_t	*(struct)
str	*(char)
,	O
const	O
char	O
*	O
names	*(char)
,	O
int	O
showunset	int
)	O
{	O
int	O
i	int
;	O
size_t	long
cnt	*(long)
=	O
0	int
;	O
int	O
rc	int
=	O
0	int
;	O
struct	O
mu_wordsplit	struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct(long,*(*`),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*`),*(*`),long,long,*(*`),long,*(*`),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct`),*(struct`),array(char),int)))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*(char)),*(char),long,*(void))->(int)),*(void),*((*(*(char)),*(char),long,*(*(char)),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
;	O
if	O
(	O
names	*(char)
)	O
{	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
.	O
ws_delim	*(char)
=	O
";"	*(char)
;	O
if	O
(	O
mu_wordsplit	struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct(long,*(*`),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*`),*(*`),long,long,*(*`),long,*(*`),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct`),*(struct`),array(char),int)))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*(char)),*(char),long,*(void))->(int)),*(void),*((*(*(char)),*(char),long,*(*(char)),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)
(	O
names	*(char)
,	O
&	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
,	O
MU_WRDSF_DELIM	O
|	O
MU_WRDSF_WS	O
|	O
MU_WRDSF_NOVAR	O
|	O
MU_WRDSF_NOCMD	O
)	O
)	O
return	O
errno	O
;	O
}	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
catcnt	long
;	O
i	int
++	O
)	O
{	O
if	O
(	O
names	*(char)
&&	O
!	O
name_matches	(*(*(char)),*(char))->(int)
(	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
.	O
ws_wordv	*(*(char))
,	O
cattab	*(struct(*(char),int,int))
[	O
i	int
]	O
.	O
name	*(char)
)	O
)	O
continue	O
;	O
if	O
(	O
cattab	*(struct(*(char),int,int))
[	O
i	int
]	O
.	O
isset	int
&&	O
cattab	*(struct(*(char),int,int))
[	O
i	int
]	O
.	O
level	int
)	O
{	O
if	O
(	O
cnt	*(long)
)	O
{	O
rc	int
=	O
mu_stream_printf	(*(struct),*(char))->(int)
(	O
str	*(char)
,	O
";"	*(char)
)	O
;	O
if	O
(	O
rc	int
)	O
break	O
;	O
}	O
rc	int
=	O
mu_stream_printf	(*(struct),*(char))->(int)
(	O
str	*(char)
,	O
"%s"	*(char)
,	O
cattab	*(struct(*(char),int,int))
[	O
i	int
]	O
.	O
name	*(char)
)	O
;	O
if	O
(	O
rc	int
)	O
break	O
;	O
if	O
(	O
cattab	*(struct(*(char),int,int))
[	O
i	int
]	O
.	O
level	int
!=	O
_LEVEL_ALL	O
)	O
{	O
mu_debug_level_t	int
j	int
=	O
MU_DEBUG_ERROR	int
,	O
minl	int
,	O
maxl	int
;	O
int	O
delim	int
=	O
'.'	O
;	O
while	O
(	O
1	int
)	O
{	O
for	O
(	O
;	O
j	int
<=	O
MU_DEBUG_PROT	int
;	O
j	int
++	O
)	O
if	O
(	O
cattab	*(struct(*(char),int,int))
[	O
i	int
]	O
.	O
level	int
&	O
MU_DEBUG_LEVEL_MASK	O
(	O
j	int
)	O
)	O
break	O
;	O
if	O
(	O
j	int
>	O
MU_DEBUG_PROT	int
)	O
break	O
;	O
minl	int
=	O
j	int
;	O
for	O
(	O
;	O
j	int
+	O
1	int
<=	O
MU_DEBUG_PROT	int
&&	O
cattab	*(struct(*(char),int,int))
[	O
i	int
]	O
.	O
level	int
&	O
MU_DEBUG_LEVEL_MASK	O
(	O
j	int
+	O
1	int
)	O
;	O
j	int
++	O
)	O
;	O
maxl	int
=	O
j	int
++	O
;	O
if	O
(	O
minl	int
==	O
maxl	int
)	O
rc	int
=	O
mu_stream_printf	(*(struct),*(char))->(int)
(	O
str	*(char)
,	O
"%c=%s"	*(char)
,	O
delim	int
,	O
mu_debug_level_str	array(*(char))
[	O
minl	int
]	O
)	O
;	O
else	O
if	O
(	O
minl	int
==	O
0	int
)	O
rc	int
=	O
mu_stream_printf	(*(struct),*(char))->(int)
(	O
str	*(char)
,	O
"%c%s"	*(char)
,	O
delim	int
,	O
mu_debug_level_str	array(*(char))
[	O
maxl	int
]	O
)	O
;	O
else	O
rc	int
=	O
mu_stream_printf	(*(struct),*(char))->(int)
(	O
str	*(char)
,	O
"%c%s-%s"	*(char)
,	O
delim	int
,	O
mu_debug_level_str	array(*(char))
[	O
minl	int
]	O
,	O
mu_debug_level_str	array(*(char))
[	O
maxl	int
]	O
)	O
;	O
if	O
(	O
rc	int
)	O
break	O
;	O
delim	int
=	O
','	O
;	O
}	O
}	O
cnt	*(long)
++	O
;	O
}	O
else	O
if	O
(	O
showunset	int
)	O
{	O
if	O
(	O
cnt	*(long)
)	O
{	O
rc	int
=	O
mu_stream_printf	(*(struct),*(char))->(int)
(	O
str	*(char)
,	O
";"	*(char)
)	O
;	O
if	O
(	O
rc	int
)	O
break	O
;	O
}	O
rc	int
=	O
mu_stream_printf	(*(struct),*(char))->(int)
(	O
str	*(char)
,	O
"!%s"	*(char)
,	O
cattab	*(struct(*(char),int,int))
[	O
i	int
]	O
.	O
name	*(char)
)	O
;	O
if	O
(	O
rc	int
)	O
break	O
;	O
cnt	*(long)
++	O
;	O
}	O
}	O
if	O
(	O
names	*(char)
)	O
mu_wordsplit_free	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)))->(void)
(	O
&	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
)	O
;	O
return	O
rc	int
;	O
}	O
static	O
mu_iterator_t	*(struct)
iterator_head	*(struct)
;	O
struct	O
debug_iterator	struct(long,int)
{	O
size_t	long
pos	long
;	O
int	O
flags	int
;	O
}	O
;	O
static	O
int	O
first	*((*(void))->(int))
(	O
void	O
*	O
owner	*(void)
)	O
{	O
struct	O
debug_iterator	struct(long,int)
*	O
itr	*(struct)
=	O
owner	*(void)
;	O
itr	*(struct)
->	O
flags	int
&=	O
~	O
ITR_FINISHED	int
;	O
if	O
(	O
itr	*(struct)
->	O
flags	int
&	O
ITR_BACKWARDS	int
)	O
itr	*(struct)
->	O
pos	long
=	O
catcnt	long
-	O
1	int
;	O
else	O
itr	*(struct)
->	O
pos	long
=	O
0	int
;	O
return	O
0	int
;	O
}	O
static	O
int	O
next	*((*(void))->(int))
(	O
void	O
*	O
owner	*(void)
)	O
{	O
struct	O
debug_iterator	struct(long,int)
*	O
itr	*(struct)
=	O
owner	*(void)
;	O
itr	*(struct)
->	O
flags	int
&=	O
~	O
ITR_FINISHED	int
;	O
do	O
{	O
if	O
(	O
itr	*(struct)
->	O
flags	int
&	O
ITR_BACKWARDS	int
)	O
{	O
if	O
(	O
itr	*(struct)
->	O
pos	long
)	O
itr	*(struct)
->	O
pos	long
--	O
;	O
else	O
itr	*(struct)
->	O
flags	int
|=	O
ITR_FINISHED	int
;	O
}	O
else	O
{	O
if	O
(	O
itr	*(struct)
->	O
pos	long
<	O
catcnt	long
-	O
1	int
)	O
itr	*(struct)
->	O
pos	long
++	O
;	O
else	O
itr	*(struct)
->	O
flags	int
|=	O
ITR_FINISHED	int
;	O
}	O
}	O
while	O
(	O
(	O
itr	*(struct)
->	O
flags	int
&	O
ITR_SKIPUNSET	int
)	O
&&	O
!	O
(	O
itr	*(struct)
->	O
flags	int
&	O
ITR_FINISHED	int
)	O
&&	O
!	O
cattab	*(struct(*(char),int,int))
[	O
itr	*(struct)
->	O
pos	long
]	O
.	O
isset	int
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
getitem	*((*(void),*(*(void)),*(*(void)))->(int))
(	O
void	O
*	O
owner	*(void)
,	O
void	O
*	O
*	O
pret	*(*(void))
,	O
const	O
void	O
*	O
*	O
pkey	*(*(void))
)	O
{	O
struct	O
debug_iterator	struct(long,int)
*	O
itr	*(struct)
=	O
owner	*(void)
;	O
*	O
(	O
mu_debug_level_t	int
*	O
)	O
pret	*(*(void))
=	O
cattab	*(struct(*(char),int,int))
[	O
itr	*(struct)
->	O
pos	long
]	O
.	O
level	int
;	O
if	O
(	O
pkey	*(*(void))
)	O
*	O
pkey	*(*(void))
=	O
cattab	*(struct(*(char),int,int))
[	O
itr	*(struct)
->	O
pos	long
]	O
.	O
name	*(char)
;	O
return	O
0	int
;	O
}	O
static	O
int	O
finished_p	*((*(void))->(int))
(	O
void	O
*	O
owner	*(void)
)	O
{	O
struct	O
debug_iterator	struct(long,int)
*	O
itr	*(struct)
=	O
owner	*(void)
;	O
return	O
itr	*(struct)
->	O
flags	int
&	O
ITR_FINISHED	int
;	O
}	O
static	O
int	O
delitem	*((*(void),*(void))->(int))
(	O
void	O
*	O
owner	*(void)
,	O
void	O
*	O
item	*(void)
)	O
{	O
struct	O
debug_iterator	struct(long,int)
*	O
itr	*(struct)
=	O
owner	*(void)
;	O
return	O
mu_c_strcasecmp	(*(char),*(char))->(int)
(	O
cattab	*(struct(*(char),int,int))
[	O
itr	*(struct)
->	O
pos	long
]	O
.	O
name	*(char)
,	O
(	O
char	O
*	O
)	O
item	*(void)
)	O
==	O
0	int
?	O
MU_ITR_DELITEM_NEXT	int
:	O
MU_ITR_DELITEM_NOTHING	int
;	O
}	O
static	O
int	O
list_data_dup	(*(*(void)),*(void))->(int)
(	O
void	O
*	O
*	O
ptr	*(void)
,	O
void	O
*	O
owner	*(void)
)	O
{	O
*	O
ptr	*(void)
=	O
malloc	(long)->(*(void))
(	O
sizeof	O
(	O
struct	O
debug_iterator	struct(long,int)
)	O
)	O
;	O
if	O
(	O
*	O
ptr	*(void)
==	O
NULL	O
)	O
return	O
ENOMEM	int
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
*	O
ptr	*(void)
,	O
owner	*(void)
,	O
sizeof	O
(	O
struct	O
debug_iterator	struct(long,int)
)	O
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
list_itrctl	(*(void),enum(int,int,int,int,int,int,int,int,int,int),*(void))->(int)
(	O
void	O
*	O
owner	*(void)
,	O
enum	O
mu_itrctl_req	enum(int,int,int,int,int,int,int,int,int,int)
req	enum(int,int,int,int,int,int,int,int,int,int)
,	O
void	O
*	O
arg	*(char)
)	O
{	O
struct	O
debug_iterator	struct(long,int)
*	O
itr	*(struct)
=	O
owner	*(void)
;	O
switch	O
(	O
req	enum(int,int,int,int,int,int,int,int,int,int)
)	O
{	O
case	O
mu_itrctl_tell	int
:	O
if	O
(	O
!	O
arg	*(char)
)	O
return	O
EINVAL	int
;	O
*	O
(	O
size_t	long
*	O
)	O
arg	*(char)
=	O
itr	*(struct)
->	O
pos	long
+	O
1	int
;	O
break	O
;	O
case	O
mu_itrctl_delete	int
:	O
case	O
mu_itrctl_delete_nd	int
:	O
cattab	*(struct(*(char),int,int))
[	O
itr	*(struct)
->	O
pos	long
]	O
.	O
level	int
=	O
0	int
;	O
cattab	*(struct(*(char),int,int))
[	O
itr	*(struct)
->	O
pos	long
]	O
.	O
isset	int
=	O
0	int
;	O
break	O
;	O
case	O
mu_itrctl_replace	int
:	O
case	O
mu_itrctl_replace_nd	int
:	O
if	O
(	O
!	O
arg	*(char)
)	O
return	O
EINVAL	int
;	O
cattab	*(struct(*(char),int,int))
[	O
itr	*(struct)
->	O
pos	long
]	O
.	O
level	int
=	O
*	O
(	O
mu_debug_level_t	int
*	O
)	O
arg	*(char)
;	O
break	O
;	O
case	O
mu_itrctl_qry_direction	int
:	O
if	O
(	O
!	O
arg	*(char)
)	O
return	O
EINVAL	int
;	O
else	O
*	O
(	O
int	O
*	O
)	O
arg	*(char)
=	O
itr	*(struct)
->	O
flags	int
&	O
ITR_BACKWARDS	int
;	O
break	O
;	O
case	O
mu_itrctl_set_direction	int
:	O
if	O
(	O
!	O
arg	*(char)
)	O
return	O
EINVAL	int
;	O
else	O
itr	*(struct)
->	O
flags	int
|=	O
ITR_BACKWARDS	int
;	O
break	O
;	O
case	O
mu_itrctl_count	int
:	O
if	O
(	O
!	O
arg	*(char)
)	O
return	O
EINVAL	int
;	O
*	O
(	O
size_t	long
*	O
)	O
arg	*(char)
=	O
catcnt	long
;	O
break	O
;	O
default	O
:	O
return	O
ENOSYS	int
;	O
}	O
return	O
0	int
;	O
}	O
int	O
mu_debug_get_iterator	(*(*(struct)),int)->(int)
(	O
mu_iterator_t	*(struct)
*	O
piterator	*(*(struct))
,	O
int	O
skipunset	int
)	O
{	O
int	O
status	int
;	O
mu_iterator_t	*(struct)
iterator	*(struct)
;	O
struct	O
debug_iterator	struct(long,int)
*	O
itr	*(struct)
;	O
itr	*(struct)
=	O
malloc	(long)->(*(void))
(	O
sizeof	O
*	O
itr	*(struct)
)	O
;	O
if	O
(	O
!	O
itr	*(struct)
)	O
return	O
ENOMEM	int
;	O
itr	*(struct)
->	O
pos	long
=	O
0	int
;	O
itr	*(struct)
->	O
flags	int
=	O
skipunset	int
?	O
ITR_SKIPUNSET	int
:	O
0	int
;	O
status	int
=	O
mu_iterator_create	(*(*(struct)),*(void))->(int)
(	O
&	O
iterator	*(struct)
,	O
itr	*(struct)
)	O
;	O
if	O
(	O
status	int
)	O
{	O
free	(*(void))->(void)
(	O
itr	*(struct)
)	O
;	O
return	O
status	int
;	O
}	O
mu_iterator_set_first	(*(struct),*((*(void))->(int)))->(int)
(	O
iterator	*(struct)
,	O
first	*((*(void))->(int))
)	O
;	O
mu_iterator_set_next	(*(struct),*((*(void))->(int)))->(int)
(	O
iterator	*(struct)
,	O
next	*((*(void))->(int))
)	O
;	O
mu_iterator_set_getitem	(*(struct),*((*(void),*(*(void)),*(*(void)))->(int)))->(int)
(	O
iterator	*(struct)
,	O
getitem	*((*(void),*(*(void)),*(*(void)))->(int))
)	O
;	O
mu_iterator_set_finished_p	(*(struct),*((*(void))->(int)))->(int)
(	O
iterator	*(struct)
,	O
finished_p	*((*(void))->(int))
)	O
;	O
mu_iterator_set_delitem	(*(struct),*((*(void),*(void))->(int)))->(int)
(	O
iterator	*(struct)
,	O
delitem	*((*(void),*(void))->(int))
)	O
;	O
mu_iterator_set_dup	(*(struct),*((*(*(void)),*(void))->(int)))->(int)
(	O
iterator	*(struct)
,	O
list_data_dup	(*(*(void)),*(void))->(int)
)	O
;	O
mu_iterator_set_itrctl	(*(struct),*((*(void),enum(int,int,int,int,int,int,int,int,int,int),*(void))->(int)))->(int)
(	O
iterator	*(struct)
,	O
list_itrctl	(*(void),enum(int,int,int,int,int,int,int,int,int,int),*(void))->(int)
)	O
;	O
mu_iterator_attach	(*(*(struct)),*(struct))->(int)
(	O
&	O
iterator_head	*(struct)
,	O
iterator	*(struct)
)	O
;	O
*	O
piterator	*(*(struct))
=	O
iterator	*(struct)
;	O
return	O
0	int
;	O
}	O
void	O
mu_debug_log	(*(char))->(void)
(	O
const	O
char	O
*	O
fmt	*(char)
,	O
...	O
)	O
{	O
va_list	array(struct(int,int,*(void),*(void)))
ap	array(struct(int,int,*(void),*(void)))
;	O
char	O
*	O
buf	*(void)
=	O
NULL	O
;	O
size_t	long
buflen	long
=	O
0	int
;	O
size_t	long
n	int
;	O
int	O
rc	int
;	O
mu_diag_init	()->(void)
(	O
)	O
;	O
va_start	O
(	O
ap	array(struct(int,int,*(void),*(void)))
,	O
fmt	*(char)
)	O
;	O
rc	int
=	O
mu_vasnprintf	(*(*(char)),*(long),*(char),array(struct(int,int,*(void),*(void))))->(int)
(	O
&	O
buf	*(void)
,	O
&	O
buflen	long
,	O
fmt	*(char)
,	O
ap	array(struct(int,int,*(void),*(void)))
)	O
;	O
va_end	O
(	O
ap	array(struct(int,int,*(void),*(void)))
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
size_t	long
i	int
;	O
int	O
nl	int
=	O
0	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
buf	*(void)
[	O
i	int
]	O
;	O
i	int
+=	O
n	int
)	O
{	O
n	int
=	O
strcspn	(*(char),*(char))->(long)
(	O
buf	*(void)
+	O
i	int
,	O
"\n"	*(char)
)	O
;	O
if	O
(	O
(	O
nl	int
=	O
buf	*(void)
[	O
i	int
+	O
n	int
]	O
)	O
)	O
++	O
n	int
;	O
mu_stream_printf	(*(struct),*(char))->(int)
(	O
mu_strerr	*(struct)
,	O
"\033s<%d>"	*(char)
,	O
MU_LOG_DEBUG	int
)	O
;	O
mu_stream_write	(*(struct),*(void),long,*(long))->(int)
(	O
mu_strerr	*(struct)
,	O
buf	*(void)
+	O
i	int
,	O
n	int
,	O
NULL	O
)	O
;	O
}	O
if	O
(	O
!	O
nl	int
)	O
mu_stream_write	(*(struct),*(void),long,*(long))->(int)
(	O
mu_strerr	*(struct)
,	O
"\n"	*(char)
,	O
1	int
,	O
NULL	O
)	O
;	O
}	O
}	O
void	O
mu_debug_log_begin	(*(char))->(void)
(	O
const	O
char	O
*	O
fmt	*(char)
,	O
...	O
)	O
{	O
va_list	array(struct(int,int,*(void),*(void)))
ap	array(struct(int,int,*(void),*(void)))
;	O
mu_diag_init	()->(void)
(	O
)	O
;	O
mu_stream_flush	(*(struct))->(int)
(	O
mu_strerr	*(struct)
)	O
;	O
va_start	O
(	O
ap	array(struct(int,int,*(void),*(void)))
,	O
fmt	*(char)
)	O
;	O
mu_stream_printf	(*(struct),*(char))->(int)
(	O
mu_strerr	*(struct)
,	O
"\033s<%d>"	*(char)
,	O
MU_LOG_DEBUG	int
)	O
;	O
mu_stream_vprintf	(*(struct),*(char),array(struct(int,int,*(void),*(void))))->(int)
(	O
mu_strerr	*(struct)
,	O
fmt	*(char)
,	O
ap	array(struct(int,int,*(void),*(void)))
)	O
;	O
va_end	O
(	O
ap	array(struct(int,int,*(void),*(void)))
)	O
;	O
}	O
void	O
mu_debug_log_cont	(*(char))->(void)
(	O
const	O
char	O
*	O
fmt	*(char)
,	O
...	O
)	O
{	O
va_list	array(struct(int,int,*(void),*(void)))
ap	array(struct(int,int,*(void),*(void)))
;	O
va_start	O
(	O
ap	array(struct(int,int,*(void),*(void)))
,	O
fmt	*(char)
)	O
;	O
mu_stream_vprintf	(*(struct),*(char),array(struct(int,int,*(void),*(void))))->(int)
(	O
mu_strerr	*(struct)
,	O
fmt	*(char)
,	O
ap	array(struct(int,int,*(void),*(void)))
)	O
;	O
va_end	O
(	O
ap	array(struct(int,int,*(void),*(void)))
)	O
;	O
}	O
void	O
mu_debug_log_end	(*(char))->(void)
(	O
const	O
char	O
*	O
fmt	*(char)
,	O
...	O
)	O
{	O
va_list	array(struct(int,int,*(void),*(void)))
ap	array(struct(int,int,*(void),*(void)))
;	O
va_start	O
(	O
ap	array(struct(int,int,*(void),*(void)))
,	O
fmt	*(char)
)	O
;	O
mu_stream_vprintf	(*(struct),*(char),array(struct(int,int,*(void),*(void))))->(int)
(	O
mu_strerr	*(struct)
,	O
fmt	*(char)
,	O
ap	array(struct(int,int,*(void),*(void)))
)	O
;	O
mu_stream_write	(*(struct),*(void),long,*(long))->(int)
(	O
mu_strerr	*(struct)
,	O
"\n"	*(char)
,	O
1	int
,	O
NULL	O
)	O
;	O
va_end	O
(	O
ap	array(struct(int,int,*(void),*(void)))
)	O
;	O
}	O
void	O
mu_debug_log_nl	()->(void)
(	O
)	O
{	O
mu_stream_write	(*(struct),*(void),long,*(long))->(int)
(	O
mu_strerr	*(struct)
,	O
"\n"	*(char)
,	O
1	int
,	O
NULL	O
)	O
;	O
}	O
