error_t	O
ps_tty_create	(int,*(*(struct)))->(int)
(	O
file_t	O
port	int
,	O
struct	O
ps_tty	O
*	O
*	O
tty	*(*(struct))
)	O
{	O
*	O
tty	*(*(struct))
=	O
NEW	()->(int)
(	O
struct	O
ps_tty	O
)	O
;	O
if	O
(	O
*	O
tty	*(*(struct))
==	O
NULL	O
)	O
return	O
ENOMEM	O
;	O
(	O
*	O
tty	*(*(struct))
)	O
->	O
port	int
=	O
port	int
;	O
(	O
*	O
tty	*(*(struct))
)	O
->	O
name_state	O
=	O
PS_TTY_NAME_PENDING	O
;	O
(	O
*	O
tty	*(*(struct))
)	O
->	O
short_name	O
=	O
NULL	O
;	O
(	O
*	O
tty	*(*(struct))
)	O
->	O
short_name_alloced	O
=	O
FALSE	O
;	O
return	O
0	int
;	O
}	O
void	O
ps_tty_free	(*(struct))->(void)
(	O
struct	O
ps_tty	O
*	O
tty	*(*(struct))
)	O
{	O
mach_port_deallocate	()->(int)
(	O
mach_task_self	()->(int)
(	O
)	O
,	O
tty	*(*(struct))
->	O
port	int
)	O
;	O
if	O
(	O
tty	*(*(struct))
->	O
name_state	O
==	O
PS_TTY_NAME_OK	O
&&	O
tty	*(*(struct))
->	O
name	*(char)
!=	O
NULL	O
)	O
free	()->(int)
(	O
(	O
char	O
*	O
)	O
tty	*(*(struct))
->	O
name	*(char)
)	O
;	O
if	O
(	O
tty	*(*(struct))
->	O
short_name_alloced	O
)	O
free	()->(int)
(	O
(	O
char	O
*	O
)	O
tty	*(*(struct))
->	O
short_name	O
)	O
;	O
free	()->(int)
(	O
tty	*(*(struct))
)	O
;	O
}	O
const	O
char	O
*	O
ps_tty_name	(*(struct))->(*(char))
(	O
struct	O
ps_tty	O
*	O
tty	*(*(struct))
)	O
{	O
if	O
(	O
tty	*(*(struct))
->	O
name_state	O
==	O
PS_TTY_NAME_PENDING	O
)	O
{	O
string_t	O
buf	O
;	O
if	O
(	O
ps_term_get_nodename	()->(int)
(	O
tty	*(*(struct))
->	O
port	int
,	O
buf	O
)	O
!=	O
0	int
)	O
tty	*(*(struct))
->	O
name_state	O
=	O
PS_TTY_NAME_ERROR	O
;	O
else	O
{	O
tty	*(*(struct))
->	O
name	*(char)
=	O
strdup	O
(	O
buf	O
)	O
;	O
tty	*(*(struct))
->	O
name_state	O
=	O
(	O
tty	*(*(struct))
->	O
name	*(char)
?	O
PS_TTY_NAME_OK	O
:	O
PS_TTY_NAME_ERROR	O
)	O
;	O
}	O
}	O
if	O
(	O
tty	*(*(struct))
->	O
name_state	O
==	O
PS_TTY_NAME_OK	O
)	O
return	O
tty	*(*(struct))
->	O
name	*(char)
;	O
else	O
return	O
NULL	O
;	O
}	O
struct	O
ps_tty_abbrev	struct(*(char),*(char))
{	O
const	O
char	O
*	O
pfx	*(char)
;	O
const	O
char	O
*	O
subst	*(char)
;	O
}	O
;	O
const	O
struct	O
ps_tty_abbrev	struct(*(char),*(char))
ps_tty_abbrevs	array(struct(*(char),*(char)))
[	O
]	O
=	O
{	O
{	O
"/tmp/console"	*(char)
,	O
"oc"	*(char)
}	O
,	O
{	O
"/dev/console"	*(char)
,	O
"co"	*(char)
}	O
,	O
{	O
"/dev/tty"	*(char)
,	O
""	*(char)
}	O
,	O
{	O
"/dev/pty"	*(char)
,	O
""	*(char)
}	O
,	O
{	O
"/dev/com"	*(char)
,	O
"c"	*(char)
}	O
,	O
{	O
"/dev/"	*(char)
,	O
""	*(char)
}	O
,	O
{	O
0	int
}	O
}	O
;	O
const	O
char	O
*	O
ps_tty_short_name	(*(struct))->(*(char))
(	O
struct	O
ps_tty	O
*	O
tty	*(*(struct))
)	O
{	O
if	O
(	O
tty	*(*(struct))
->	O
short_name	O
!=	O
NULL	O
)	O
return	O
tty	*(*(struct))
->	O
short_name	O
;	O
else	O
{	O
const	O
struct	O
ps_tty_abbrev	struct(*(char),*(char))
*	O
abbrev	*(struct(*(char),*(char)))
;	O
const	O
char	O
*	O
name	*(char)
=	O
ps_tty_name	(*(struct))->(*(char))
(	O
tty	*(*(struct))
)	O
;	O
if	O
(	O
name	*(char)
)	O
for	O
(	O
abbrev	*(struct(*(char),*(char)))
=	O
ps_tty_abbrevs	array(struct(*(char),*(char)))
;	O
abbrev	*(struct(*(char),*(char)))
->	O
pfx	*(char)
!=	O
NULL	O
;	O
abbrev	*(struct(*(char),*(char)))
++	O
)	O
{	O
const	O
char	O
*	O
subst	*(char)
=	O
abbrev	*(struct(*(char),*(char)))
->	O
subst	*(char)
;	O
size_t	long
pfx_len	long
=	O
strlen	O
(	O
abbrev	*(struct(*(char),*(char)))
->	O
pfx	*(char)
)	O
;	O
if	O
(	O
strncmp	O
(	O
name	*(char)
,	O
abbrev	*(struct(*(char),*(char)))
->	O
pfx	*(char)
,	O
pfx_len	long
)	O
==	O
0	int
)	O
{	O
if	O
(	O
name	*(char)
[	O
pfx_len	long
]	O
==	O
'\0'	O
)	O
tty	*(*(struct))
->	O
short_name	O
=	O
abbrev	*(struct(*(char),*(char)))
->	O
subst	*(char)
;	O
else	O
if	O
(	O
!	O
subst	*(char)
||	O
subst	*(char)
[	O
0	int
]	O
==	O
'\0'	O
)	O
tty	*(*(struct))
->	O
short_name	O
=	O
name	*(char)
+	O
pfx_len	long
;	O
else	O
{	O
size_t	long
slen	long
=	O
strlen	O
(	O
subst	*(char)
)	O
;	O
size_t	long
nlen	long
=	O
strlen	O
(	O
name	*(char)
+	O
pfx_len	long
)	O
+	O
1	int
;	O
char	O
*	O
n	*(char)
=	O
malloc	O
(	O
slen	long
+	O
nlen	long
)	O
;	O
if	O
(	O
n	*(char)
)	O
{	O
memcpy	O
(	O
n	*(char)
,	O
subst	*(char)
,	O
slen	long
)	O
;	O
memcpy	O
(	O
&	O
n	*(char)
[	O
slen	long
]	O
,	O
&	O
name	*(char)
[	O
pfx_len	long
]	O
,	O
nlen	long
)	O
;	O
tty	*(*(struct))
->	O
short_name	O
=	O
n	*(char)
;	O
tty	*(*(struct))
->	O
short_name_alloced	O
=	O
TRUE	O
;	O
}	O
}	O
break	O
;	O
}	O
}	O
if	O
(	O
tty	*(*(struct))
->	O
short_name	O
==	O
NULL	O
)	O
tty	*(*(struct))
->	O
short_name	O
=	O
name	*(char)
;	O
return	O
tty	*(*(struct))
->	O
short_name	O
;	O
}	O
}	O
