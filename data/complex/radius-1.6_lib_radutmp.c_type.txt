struct	O
_radut_file	struct(*(char),int,int,int,int,struct(array(char),array(char),int,array(char),int,int,int,long,long,int,int,long,array(char),int,array(char)))
{	O
const	O
char	O
*	O
name	*(char)
;	O
int	O
fd	int
;	O
int	O
eof	int
;	O
int	O
readonly	int
;	O
int	O
append	int
;	O
struct	O
radutmp	struct(array(char),array(char),int,array(char),int,int,int,long,long,int,int,long,array(char),int,array(char))
ut	*(struct(array(char),array(char),int,array(char),int,int,int,long,long,int,int,long,array(char),int,array(char)))
;	O
}	O
;	O
radut_file_t	*(struct)
grad_ut_setent	(*(char),int)->(*(struct))
(	O
const	O
char	O
*	O
name	*(char)
,	O
int	O
append	int
)	O
{	O
int	O
fd	int
;	O
int	O
ro	int
=	O
0	int
;	O
radut_file_t	*(struct)
fp	*((*(void),*(char),*(struct(*(char),int,int,int,int,*((*`,*`)->(int)))))->(int))
;	O
if	O
(	O
(	O
fd	int
=	O
open	(*(char),int)->(int)
(	O
name	*(char)
,	O
O_RDWR	int
|	O
O_CREAT	int
,	O
0644	int
)	O
)	O
<	O
0	int
)	O
{	O
ro	int
=	O
1	int
;	O
fd	int
=	O
open	(*(char),int)->(int)
(	O
name	*(char)
,	O
O_RDONLY	int
)	O
;	O
}	O
if	O
(	O
fd	int
==	O
-	O
1	int
)	O
{	O
grad_log	(int,*(char))->(void)
(	O
GRAD_LOG_ERR	int
|	O
GRAD_LOG_PERROR	int
,	O
_	O
(	O
"grad_ut_setent(): cannot open `%s'"	*(char)
)	O
,	O
name	*(char)
)	O
;	O
return	O
NULL	O
;	O
}	O
fp	*((*(void),*(char),*(struct(*(char),int,int,int,int,*((*`,*`)->(int)))))->(int))
=	O
grad_emalloc	(long)->(*(void))
(	O
sizeof	O
(	O
*	O
fp	*((*(void),*(char),*(struct(*(char),int,int,int,int,*((*`,*`)->(int)))))->(int))
)	O
)	O
;	O
fp	*((*(void),*(char),*(struct(*(char),int,int,int,int,*((*`,*`)->(int)))))->(int))
->	O
name	*(char)
=	O
name	*(char)
;	O
fp	*((*(void),*(char),*(struct(*(char),int,int,int,int,*((*`,*`)->(int)))))->(int))
->	O
fd	int
=	O
fd	int
;	O
fp	*((*(void),*(char),*(struct(*(char),int,int,int,int,*((*`,*`)->(int)))))->(int))
->	O
append	int
=	O
append	int
;	O
fp	*((*(void),*(char),*(struct(*(char),int,int,int,int,*((*`,*`)->(int)))))->(int))
->	O
eof	int
=	O
append	int
;	O
fp	*((*(void),*(char),*(struct(*(char),int,int,int,int,*((*`,*`)->(int)))))->(int))
->	O
readonly	int
=	O
ro	int
;	O
return	O
fp	*((*(void),*(char),*(struct(*(char),int,int,int,int,*((*`,*`)->(int)))))->(int))
;	O
}	O
void	O
grad_ut_rewind	(*(struct))->(void)
(	O
radut_file_t	*(struct)
file	*(char)
)	O
{	O
lseek	(int,long,int)->(long)
(	O
file	*(char)
->	O
fd	int
,	O
0	int
,	O
SEEK_SET	int
)	O
;	O
file	*(char)
->	O
eof	int
=	O
0	int
;	O
}	O
void	O
grad_ut_endent	(*(struct))->(void)
(	O
radut_file_t	*(struct)
file	*(char)
)	O
{	O
if	O
(	O
!	O
file	*(char)
)	O
return	O
;	O
close	(int)->(int)
(	O
file	*(char)
->	O
fd	int
)	O
;	O
grad_free	(*(void))->(void)
(	O
file	*(char)
)	O
;	O
}	O
struct	O
radutmp	struct(array(char),array(char),int,array(char),int,int,int,long,long,int,int,long,array(char),int,array(char))
*	O
grad_ut_getent	(*(struct))->(*(struct(array(char),array(char),int,array(char),int,int,int,long,long,int,int,long,array(char),int,array(char))))
(	O
radut_file_t	*(struct)
file	*(char)
)	O
{	O
int	O
rc	int
;	O
rc	int
=	O
read	(int,*(void),long)->(long)
(	O
file	*(char)
->	O
fd	int
,	O
&	O
file	*(char)
->	O
ut	*(struct(array(char),array(char),int,array(char),int,int,int,long,long,int,int,long,array(char),int,array(char)))
,	O
sizeof	O
(	O
file	*(char)
->	O
ut	*(struct(array(char),array(char),int,array(char),int,int,int,long,long,int,int,long,array(char),int,array(char)))
)	O
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
file	*(char)
->	O
eof	int
++	O
;	O
return	O
NULL	O
;	O
}	O
else	O
if	O
(	O
rc	int
!=	O
sizeof	O
(	O
file	*(char)
->	O
ut	*(struct(array(char),array(char),int,array(char),int,int,int,long,long,int,int,long,array(char),int,array(char)))
)	O
)	O
return	O
NULL	O
;	O
return	O
&	O
file	*(char)
->	O
ut	*(struct(array(char),array(char),int,array(char),int,int,int,long,long,int,int,long,array(char),int,array(char)))
;	O
}	O
int	O
grad_ut_putent	(*(struct),*(struct(array(char),array(char),int,array(char),int,int,int,long,long,int,int,long,array(char),int,array(char))))->(int)
(	O
radut_file_t	*(struct)
file	*(char)
,	O
struct	O
radutmp	struct(array(char),array(char),int,array(char),int,int,int,long,long,int,int,long,array(char),int,array(char))
*	O
ent	*(struct(array(char),array(char),int,array(char),int,int,int,long,long,int,int,long,array(char),int,array(char)))
)	O
{	O
if	O
(	O
file	*(char)
->	O
readonly	int
)	O
{	O
grad_log	(int,*(char))->(void)
(	O
GRAD_LOG_ERR	int
,	O
"grad_ut_putent(%s): file opened readonly"	*(char)
,	O
file	*(char)
->	O
name	*(char)
)	O
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
file	*(char)
->	O
append	int
)	O
{	O
off_t	long
size	int
;	O
grad_lock_file	(int,long,long,int)->(void)
(	O
file	*(char)
->	O
fd	int
,	O
sizeof	O
(	O
*	O
ent	*(struct(array(char),array(char),int,array(char),int,int,int,long,long,int,int,long,array(char),int,array(char)))
)	O
,	O
0	int
,	O
SEEK_END	int
)	O
;	O
size	int
=	O
lseek	(int,long,int)->(long)
(	O
file	*(char)
->	O
fd	int
,	O
0	int
,	O
SEEK_END	int
)	O
;	O
if	O
(	O
size	int
<	O
0	int
)	O
{	O
grad_log	(int,*(char))->(void)
(	O
GRAD_LOG_ERR	int
|	O
GRAD_LOG_PERROR	int
,	O
"grad_ut_putent(%s): lseek"	*(char)
,	O
file	*(char)
->	O
name	*(char)
)	O
;	O
grad_unlock_file	(int,long,long,int)->(void)
(	O
file	*(char)
->	O
fd	int
,	O
sizeof	O
(	O
*	O
ent	*(struct(array(char),array(char),int,array(char),int,int,int,long,long,int,int,long,array(char),int,array(char)))
)	O
,	O
0	int
,	O
SEEK_END	int
)	O
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
size	int
%	O
sizeof	O
(	O
*	O
ent	*(struct(array(char),array(char),int,array(char),int,int,int,long,long,int,int,long,array(char),int,array(char)))
)	O
)	O
{	O
grad_log	(int,*(char))->(void)
(	O
GRAD_LOG_CRIT	int
,	O
"grad_ut_putent(%s): File size is not a multiple of radutmp entry size"	*(char)
,	O
file	*(char)
->	O
name	*(char)
)	O
;	O
grad_unlock_file	(int,long,long,int)->(void)
(	O
file	*(char)
->	O
fd	int
,	O
sizeof	O
(	O
*	O
ent	*(struct(array(char),array(char),int,array(char),int,int,int,long,long,int,int,long,array(char),int,array(char)))
)	O
,	O
0	int
,	O
SEEK_END	int
)	O
;	O
return	O
-	O
1	int
;	O
}	O
}	O
else	O
{	O
if	O
(	O
!	O
file	*(char)
->	O
eof	int
&&	O
lseek	(int,long,int)->(long)
(	O
file	*(char)
->	O
fd	int
,	O
-	O
(	O
off_t	long
)	O
sizeof	O
(	O
file	*(char)
->	O
ut	*(struct(array(char),array(char),int,array(char),int,int,int,long,long,int,int,long,array(char),int,array(char)))
)	O
,	O
SEEK_CUR	int
)	O
<	O
0	int
)	O
{	O
grad_log	(int,*(char))->(void)
(	O
GRAD_LOG_ERR	int
|	O
GRAD_LOG_PERROR	int
,	O
"grad_ut_putent(%s): lseek"	*(char)
,	O
file	*(char)
->	O
name	*(char)
)	O
;	O
lseek	(int,long,int)->(long)
(	O
file	*(char)
->	O
fd	int
,	O
(	O
off_t	long
)	O
0	int
,	O
SEEK_SET	int
)	O
;	O
return	O
-	O
1	int
;	O
}	O
grad_lock_file	(int,long,long,int)->(void)
(	O
file	*(char)
->	O
fd	int
,	O
sizeof	O
(	O
*	O
ent	*(struct(array(char),array(char),int,array(char),int,int,int,long,long,int,int,long,array(char),int,array(char)))
)	O
,	O
0	int
,	O
SEEK_CUR	int
)	O
;	O
}	O
if	O
(	O
write	(int,*(void),long)->(long)
(	O
file	*(char)
->	O
fd	int
,	O
ent	*(struct(array(char),array(char),int,array(char),int,int,int,long,long,int,int,long,array(char),int,array(char)))
,	O
sizeof	O
(	O
*	O
ent	*(struct(array(char),array(char),int,array(char),int,int,int,long,long,int,int,long,array(char),int,array(char)))
)	O
)	O
!=	O
sizeof	O
(	O
*	O
ent	*(struct(array(char),array(char),int,array(char),int,int,int,long,long,int,int,long,array(char),int,array(char)))
)	O
)	O
{	O
grad_log	(int,*(char))->(void)
(	O
GRAD_LOG_ERR	int
|	O
GRAD_LOG_PERROR	int
,	O
"grad_ut_putent(%s): write"	*(char)
,	O
file	*(char)
->	O
name	*(char)
)	O
;	O
grad_lock_file	(int,long,long,int)->(void)
(	O
file	*(char)
->	O
fd	int
,	O
sizeof	O
(	O
*	O
ent	*(struct(array(char),array(char),int,array(char),int,int,int,long,long,int,int,long,array(char),int,array(char)))
)	O
,	O
0	int
,	O
SEEK_CUR	int
)	O
;	O
return	O
-	O
1	int
;	O
}	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
&	O
file	*(char)
->	O
ut	*(struct(array(char),array(char),int,array(char),int,int,int,long,long,int,int,long,array(char),int,array(char)))
,	O
ent	*(struct(array(char),array(char),int,array(char),int,int,int,long,long,int,int,long,array(char),int,array(char)))
,	O
sizeof	O
(	O
file	*(char)
->	O
ut	*(struct(array(char),array(char),int,array(char),int,int,int,long,long,int,int,long,array(char),int,array(char)))
)	O
)	O
;	O
grad_unlock_file	(int,long,long,int)->(void)
(	O
file	*(char)
->	O
fd	int
,	O
sizeof	O
(	O
*	O
ent	*(struct(array(char),array(char),int,array(char),int,int,int,long,long,int,int,long,array(char),int,array(char)))
)	O
,	O
-	O
(	O
off_t	long
)	O
sizeof	O
(	O
file	*(char)
->	O
fd	int
)	O
,	O
SEEK_CUR	int
)	O
;	O
return	O
0	int
;	O
}	O
int	O
grad_utmp_putent	(*(char),*(struct(array(char),array(char),int,array(char),int,int,int,long,long,int,int,long,array(char),int,array(char))),int)->(int)
(	O
const	O
char	O
*	O
filename	*(char)
,	O
struct	O
radutmp	struct(array(char),array(char),int,array(char),int,int,int,long,long,int,int,long,array(char),int,array(char))
*	O
ut	*(struct(array(char),array(char),int,array(char),int,int,int,long,long,int,int,long,array(char),int,array(char)))
,	O
int	O
status	int
)	O
{	O
radut_file_t	*(struct)
file	*(char)
;	O
struct	O
radutmp	struct(array(char),array(char),int,array(char),int,int,int,long,long,int,int,long,array(char),int,array(char))
*	O
ent	*(struct(array(char),array(char),int,array(char),int,int,int,long,long,int,int,long,array(char),int,array(char)))
;	O
char	O
ipbuf	array(char)
[	O
GRAD_IPV4_STRING_LENGTH	int
]	O
;	O
int	O
rc	int
=	O
PUTENT_SUCCESS	int
;	O
if	O
(	O
(	O
file	*(char)
=	O
grad_ut_setent	(*(char),int)->(*(struct))
(	O
filename	*(char)
,	O
0	int
)	O
)	O
==	O
NULL	O
)	O
return	O
PUTENT_NOENT	int
;	O
while	O
(	O
(	O
ent	*(struct(array(char),array(char),int,array(char),int,int,int,long,long,int,int,long,array(char),int,array(char)))
=	O
grad_ut_getent	(*(struct))->(*(struct(array(char),array(char),int,array(char),int,int,int,long,long,int,int,long,array(char),int,array(char))))
(	O
file	*(char)
)	O
)	O
!=	O
NULL	O
&&	O
(	O
ent	*(struct(array(char),array(char),int,array(char),int,int,int,long,long,int,int,long,array(char),int,array(char)))
->	O
nas_address	int
!=	O
ut	*(struct(array(char),array(char),int,array(char),int,int,int,long,long,int,int,long,array(char),int,array(char)))
->	O
nas_address	int
||	O
ent	*(struct(array(char),array(char),int,array(char),int,int,int,long,long,int,int,long,array(char),int,array(char)))
->	O
nas_port	int
!=	O
ut	*(struct(array(char),array(char),int,array(char),int,int,int,long,long,int,int,long,array(char),int,array(char)))
->	O
nas_port	int
)	O
)	O
;	O
if	O
(	O
!	O
ent	*(struct(array(char),array(char),int,array(char),int,int,int,long,long,int,int,long,array(char),int,array(char)))
)	O
{	O
rc	int
=	O
PUTENT_NOENT	int
;	O
}	O
else	O
if	O
(	O
strncmp	(*(char),*(char),long)->(int)
(	O
ent	*(struct(array(char),array(char),int,array(char),int,int,int,long,long,int,int,long,array(char),int,array(char)))
->	O
session_id	array(char)
,	O
ut	*(struct(array(char),array(char),int,array(char),int,int,int,long,long,int,int,long,array(char),int,array(char)))
->	O
session_id	array(char)
,	O
sizeof	O
(	O
ent	*(struct(array(char),array(char),int,array(char),int,int,int,long,long,int,int,long,array(char),int,array(char)))
->	O
session_id	array(char)
)	O
)	O
==	O
0	int
)	O
{	O
switch	O
(	O
status	int
)	O
{	O
case	O
DV_ACCT_STATUS_TYPE_ALIVE	int
:	O
if	O
(	O
ent	*(struct(array(char),array(char),int,array(char),int,int,int,long,long,int,int,long,array(char),int,array(char)))
->	O
type	enum(int,int,int,int)
==	O
P_LOGIN	int
)	O
{	O
ut	*(struct(array(char),array(char),int,array(char),int,int,int,long,long,int,int,long,array(char),int,array(char)))
->	O
time	struct(long,long)
=	O
ent	*(struct(array(char),array(char),int,array(char),int,int,int,long,long,int,int,long,array(char),int,array(char)))
->	O
time	struct(long,long)
;	O
if	O
(	O
ent	*(struct(array(char),array(char),int,array(char),int,int,int,long,long,int,int,long,array(char),int,array(char)))
->	O
login	array(char)
[	O
0	int
]	O
!=	O
0	int
)	O
rc	int
=	O
PUTENT_UPDATE	int
;	O
}	O
break	O
;	O
case	O
DV_ACCT_STATUS_TYPE_START	int
:	O
if	O
(	O
ent	*(struct(array(char),array(char),int,array(char),int,int,int,long,long,int,int,long,array(char),int,array(char)))
->	O
time	struct(long,long)
<	O
ut	*(struct(array(char),array(char),int,array(char),int,int,int,long,long,int,int,long,array(char),int,array(char)))
->	O
time	struct(long,long)
)	O
break	O
;	O
if	O
(	O
ent	*(struct(array(char),array(char),int,array(char),int,int,int,long,long,int,int,long,array(char),int,array(char)))
->	O
type	enum(int,int,int,int)
==	O
P_LOGIN	int
)	O
{	O
grad_log	(int,*(char))->(void)
(	O
GRAD_LOG_INFO	int
,	O
_	O
(	O
"login: entry for NAS %s port %d duplicate"	*(char)
)	O
,	O
grad_ip_iptostr	(int,*(char))->(*(char))
(	O
ntohl	(int)->(int)
(	O
ent	*(struct(array(char),array(char),int,array(char),int,int,int,long,long,int,int,long,array(char),int,array(char)))
->	O
nas_address	int
)	O
,	O
ipbuf	array(char)
)	O
,	O
ent	*(struct(array(char),array(char),int,array(char),int,int,int,long,long,int,int,long,array(char),int,array(char)))
->	O
nas_port	int
)	O
;	O
}	O
else	O
{	O
grad_log	(int,*(char))->(void)
(	O
GRAD_LOG_INFO	int
,	O
_	O
(	O
"login: entry for NAS %s port %d wrong order"	*(char)
)	O
,	O
grad_ip_iptostr	(int,*(char))->(*(char))
(	O
ntohl	(int)->(int)
(	O
ent	*(struct(array(char),array(char),int,array(char),int,int,int,long,long,int,int,long,array(char),int,array(char)))
->	O
nas_address	int
)	O
,	O
ipbuf	array(char)
)	O
,	O
ent	*(struct(array(char),array(char),int,array(char),int,int,int,long,long,int,int,long,array(char),int,array(char)))
->	O
nas_port	int
)	O
;	O
}	O
}	O
}	O
else	O
{	O
if	O
(	O
status	int
==	O
DV_ACCT_STATUS_TYPE_STOP	int
)	O
{	O
if	O
(	O
ent	*(struct(array(char),array(char),int,array(char),int,int,int,long,long,int,int,long,array(char),int,array(char)))
->	O
type	enum(int,int,int,int)
==	O
P_LOGIN	int
)	O
{	O
grad_log	(int,*(char))->(void)
(	O
GRAD_LOG_ERR	int
,	O
_	O
(	O
"logout: entry for NAS %s port %d has wrong ID (expected %s found %s)"	*(char)
)	O
,	O
grad_ip_iptostr	(int,*(char))->(*(char))
(	O
ntohl	(int)->(int)
(	O
ut	*(struct(array(char),array(char),int,array(char),int,int,int,long,long,int,int,long,array(char),int,array(char)))
->	O
nas_address	int
)	O
,	O
ipbuf	array(char)
)	O
,	O
ent	*(struct(array(char),array(char),int,array(char),int,int,int,long,long,int,int,long,array(char),int,array(char)))
->	O
nas_port	int
,	O
ut	*(struct(array(char),array(char),int,array(char),int,int,int,long,long,int,int,long,array(char),int,array(char)))
->	O
session_id	array(char)
,	O
ent	*(struct(array(char),array(char),int,array(char),int,int,int,long,long,int,int,long,array(char),int,array(char)))
->	O
session_id	array(char)
)	O
;	O
}	O
}	O
}	O
if	O
(	O
ent	*(struct(array(char),array(char),int,array(char),int,int,int,long,long,int,int,long,array(char),int,array(char)))
)	O
ut	*(struct(array(char),array(char),int,array(char),int,int,int,long,long,int,int,long,array(char),int,array(char)))
->	O
duration	long
=	O
ut	*(struct(array(char),array(char),int,array(char),int,int,int,long,long,int,int,long,array(char),int,array(char)))
->	O
time	struct(long,long)
-	O
ent	*(struct(array(char),array(char),int,array(char),int,int,int,long,long,int,int,long,array(char),int,array(char)))
->	O
time	struct(long,long)
;	O
switch	O
(	O
status	int
)	O
{	O
case	O
DV_ACCT_STATUS_TYPE_START	int
:	O
case	O
DV_ACCT_STATUS_TYPE_ALIVE	int
:	O
ut	*(struct(array(char),array(char),int,array(char),int,int,int,long,long,int,int,long,array(char),int,array(char)))
->	O
type	enum(int,int,int,int)
=	O
P_LOGIN	int
;	O
break	O
;	O
case	O
DV_ACCT_STATUS_TYPE_STOP	int
:	O
ut	*(struct(array(char),array(char),int,array(char),int,int,int,long,long,int,int,long,array(char),int,array(char)))
->	O
type	enum(int,int,int,int)
=	O
P_IDLE	int
;	O
if	O
(	O
!	O
ent	*(struct(array(char),array(char),int,array(char),int,int,int,long,long,int,int,long,array(char),int,array(char)))
)	O
{	O
grad_log	(int,*(char))->(void)
(	O
GRAD_LOG_ERR	int
,	O
_	O
(	O
"logout: login entry for NAS %s port %d not found"	*(char)
)	O
,	O
grad_ip_iptostr	(int,*(char))->(*(char))
(	O
ntohl	(int)->(int)
(	O
ut	*(struct(array(char),array(char),int,array(char),int,int,int,long,long,int,int,long,array(char),int,array(char)))
->	O
nas_address	int
)	O
,	O
ipbuf	array(char)
)	O
,	O
ut	*(struct(array(char),array(char),int,array(char),int,int,int,long,long,int,int,long,array(char),int,array(char)))
->	O
nas_port	int
)	O
;	O
}	O
break	O
;	O
}	O
grad_ut_putent	(*(struct),*(struct(array(char),array(char),int,array(char),int,int,int,long,long,int,int,long,array(char),int,array(char))))->(int)
(	O
file	*(char)
,	O
ut	*(struct(array(char),array(char),int,array(char),int,int,int,long,long,int,int,long,array(char),int,array(char)))
)	O
;	O
grad_ut_endent	(*(struct))->(void)
(	O
file	*(char)
)	O
;	O
return	O
rc	int
;	O
}	O
int	O
grad_radwtmp_putent	(*(char),*(struct(array(char),array(char),int,array(char),int,int,int,long,long,int,int,long,array(char),int,array(char))))->(int)
(	O
const	O
char	O
*	O
filename	*(char)
,	O
struct	O
radutmp	struct(array(char),array(char),int,array(char),int,int,int,long,long,int,int,long,array(char),int,array(char))
*	O
ut	*(struct(array(char),array(char),int,array(char),int,int,int,long,long,int,int,long,array(char),int,array(char)))
)	O
{	O
radut_file_t	*(struct)
file	*(char)
;	O
file	*(char)
=	O
grad_ut_setent	(*(char),int)->(*(struct))
(	O
filename	*(char)
,	O
1	int
)	O
;	O
if	O
(	O
file	*(char)
==	O
NULL	O
)	O
{	O
grad_log	(int,*(char))->(void)
(	O
GRAD_LOG_ERR	int
|	O
GRAD_LOG_PERROR	int
,	O
_	O
(	O
"can't open %s"	*(char)
)	O
,	O
grad_wtmp_file	*(char)
)	O
;	O
return	O
1	int
;	O
}	O
grad_ut_putent	(*(struct),*(struct(array(char),array(char),int,array(char),int,int,int,long,long,int,int,long,array(char),int,array(char))))->(int)
(	O
file	*(char)
,	O
ut	*(struct(array(char),array(char),int,array(char),int,int,int,long,long,int,int,long,array(char),int,array(char)))
)	O
;	O
grad_ut_endent	(*(struct))->(void)
(	O
file	*(char)
)	O
;	O
return	O
0	int
;	O
}	O
