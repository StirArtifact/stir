enum	O
{	O
IO_SIZE	int
=	O
32	int
*	O
1024	int
}	O
;	O
int	O
qcopy_file_preserving	(*(char),*(char))->(int)
(	O
const	O
char	O
*	O
src_filename	*(char)
,	O
const	O
char	O
*	O
dest_filename	*(char)
)	O
{	O
int	O
err	int
=	O
0	int
;	O
int	O
src_fd	int
;	O
struct	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
statbuf	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
;	O
int	O
mode	int
;	O
int	O
dest_fd	int
;	O
char	O
*	O
buf	*(void)
=	O
xmalloc	(long)->(*(void))
(	O
IO_SIZE	int
)	O
;	O
src_fd	int
=	O
open	(*(char),int)->(int)
(	O
src_filename	*(char)
,	O
O_RDONLY	int
|	O
O_BINARY	int
)	O
;	O
if	O
(	O
src_fd	int
<	O
0	int
)	O
{	O
err	int
=	O
GL_COPY_ERR_OPEN_READ	int
;	O
goto	O
error	(int,int,*(char))->(void)
;	O
}	O
if	O
(	O
fstat	(int,*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))))->(int)
(	O
src_fd	int
,	O
&	O
statbuf	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
)	O
<	O
0	int
)	O
{	O
err	int
=	O
GL_COPY_ERR_OPEN_READ	int
;	O
goto	O
error_src	O
;	O
}	O
mode	int
=	O
statbuf	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_mode	int
&	O
07777	int
;	O
dest_fd	int
=	O
open	(*(char),int)->(int)
(	O
dest_filename	*(char)
,	O
O_WRONLY	int
|	O
O_CREAT	int
|	O
O_TRUNC	int
|	O
O_BINARY	int
,	O
0600	int
)	O
;	O
if	O
(	O
dest_fd	int
<	O
0	int
)	O
{	O
err	int
=	O
GL_COPY_ERR_OPEN_BACKUP_WRITE	int
;	O
goto	O
error_src	O
;	O
}	O
for	O
(	O
;	O
;	O
)	O
{	O
size_t	long
n_read	long
=	O
safe_read	(int,*(void),long)->(long)
(	O
src_fd	int
,	O
buf	*(void)
,	O
IO_SIZE	int
)	O
;	O
if	O
(	O
n_read	long
==	O
SAFE_READ_ERROR	O
)	O
{	O
err	int
=	O
GL_COPY_ERR_READ	int
;	O
goto	O
error_src_dest	O
;	O
}	O
if	O
(	O
n_read	long
==	O
0	int
)	O
break	O
;	O
if	O
(	O
full_write	(int,*(void),long)->(long)
(	O
dest_fd	int
,	O
buf	*(void)
,	O
n_read	long
)	O
<	O
n_read	long
)	O
{	O
err	int
=	O
GL_COPY_ERR_WRITE	int
;	O
goto	O
error_src_dest	O
;	O
}	O
}	O
free	(*(void))->(void)
(	O
buf	*(void)
)	O
;	O
buf	*(void)
=	O
NULL	O
;	O
{	O
struct	O
timespec	struct(long,long)
ts	array(struct(long,long))
[	O
2	int
]	O
;	O
ts	array(struct(long,long))
[	O
0	int
]	O
=	O
get_stat_atime	(*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))))->(struct(long,long))
(	O
&	O
statbuf	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
)	O
;	O
ts	array(struct(long,long))
[	O
1	int
]	O
=	O
get_stat_mtime	(*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))))->(struct(long,long))
(	O
&	O
statbuf	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
)	O
;	O
utimens	(*(char),array(struct(long,long)))->(int)
(	O
dest_filename	*(char)
,	O
ts	array(struct(long,long))
)	O
;	O
}	O
ignore_value	O
(	O
chown	(*(char),int,int)->(int)
(	O
dest_filename	*(char)
,	O
statbuf	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_uid	int
,	O
statbuf	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_gid	int
)	O
)	O
;	O
switch	O
(	O
qcopy_acl	(*(char),int,*(char),int,int)->(int)
(	O
src_filename	*(char)
,	O
src_fd	int
,	O
dest_filename	*(char)
,	O
dest_fd	int
,	O
mode	int
)	O
)	O
{	O
case	O
-	O
2	int
:	O
err	int
=	O
GL_COPY_ERR_GET_ACL	int
;	O
goto	O
error_src_dest	O
;	O
case	O
-	O
1	int
:	O
err	int
=	O
GL_COPY_ERR_SET_ACL	int
;	O
goto	O
error_src_dest	O
;	O
}	O
if	O
(	O
close	(int)->(int)
(	O
dest_fd	int
)	O
<	O
0	int
)	O
{	O
err	int
=	O
GL_COPY_ERR_WRITE	int
;	O
goto	O
error_src	O
;	O
}	O
if	O
(	O
close	(int)->(int)
(	O
src_fd	int
)	O
<	O
0	int
)	O
{	O
err	int
=	O
GL_COPY_ERR_AFTER_READ	int
;	O
goto	O
error	(int,int,*(char))->(void)
;	O
}	O
return	O
0	int
;	O
error_src_dest	O
:	O
close	(int)->(int)
(	O
dest_fd	int
)	O
;	O
error_src	O
:	O
close	(int)->(int)
(	O
src_fd	int
)	O
;	O
error	(int,int,*(char))->(void)
:	O
free	(*(void))->(void)
(	O
buf	*(void)
)	O
;	O
return	O
err	int
;	O
}	O
void	O
copy_file_preserving	(*(char),*(char))->(void)
(	O
const	O
char	O
*	O
src_filename	*(char)
,	O
const	O
char	O
*	O
dest_filename	*(char)
)	O
{	O
switch	O
(	O
qcopy_file_preserving	(*(char),*(char))->(int)
(	O
src_filename	*(char)
,	O
dest_filename	*(char)
)	O
)	O
{	O
case	O
0	int
:	O
return	O
;	O
case	O
GL_COPY_ERR_OPEN_READ	int
:	O
error	(int,int,*(char))->(void)
(	O
EXIT_FAILURE	int
,	O
errno	O
,	O
_	O
(	O
"error while opening %s for reading"	*(char)
)	O
,	O
quote	(*(char))->(*(char))
(	O
src_filename	*(char)
)	O
)	O
;	O
case	O
GL_COPY_ERR_OPEN_BACKUP_WRITE	int
:	O
error	(int,int,*(char))->(void)
(	O
EXIT_FAILURE	int
,	O
errno	O
,	O
_	O
(	O
"cannot open backup file %s for writing"	*(char)
)	O
,	O
quote	(*(char))->(*(char))
(	O
dest_filename	*(char)
)	O
)	O
;	O
case	O
GL_COPY_ERR_READ	int
:	O
error	(int,int,*(char))->(void)
(	O
EXIT_FAILURE	int
,	O
errno	O
,	O
_	O
(	O
"error reading %s"	*(char)
)	O
,	O
quote	(*(char))->(*(char))
(	O
src_filename	*(char)
)	O
)	O
;	O
case	O
GL_COPY_ERR_WRITE	int
:	O
error	(int,int,*(char))->(void)
(	O
EXIT_FAILURE	int
,	O
errno	O
,	O
_	O
(	O
"error writing %s"	*(char)
)	O
,	O
quote	(*(char))->(*(char))
(	O
dest_filename	*(char)
)	O
)	O
;	O
case	O
GL_COPY_ERR_AFTER_READ	int
:	O
error	(int,int,*(char))->(void)
(	O
EXIT_FAILURE	int
,	O
errno	O
,	O
_	O
(	O
"error after reading %s"	*(char)
)	O
,	O
quote	(*(char))->(*(char))
(	O
src_filename	*(char)
)	O
)	O
;	O
case	O
GL_COPY_ERR_GET_ACL	int
:	O
error	(int,int,*(char))->(void)
(	O
EXIT_FAILURE	int
,	O
errno	O
,	O
"%s"	*(char)
,	O
quote	(*(char))->(*(char))
(	O
src_filename	*(char)
)	O
)	O
;	O
case	O
GL_COPY_ERR_SET_ACL	int
:	O
error	(int,int,*(char))->(void)
(	O
EXIT_FAILURE	int
,	O
errno	O
,	O
_	O
(	O
"preserving permissions for %s"	*(char)
)	O
,	O
quote	(*(char))->(*(char))
(	O
dest_filename	*(char)
)	O
)	O
;	O
default	O
:	O
abort	()->(void)
(	O
)	O
;	O
}	O
}	O
