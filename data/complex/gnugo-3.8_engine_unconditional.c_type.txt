static	O
int	O
capture_non_invincible_strings	(int,array(int),*(int))->(int)
(	O
int	O
color	int
,	O
int	O
exceptions	array(int)
[	O
BOARDMAX	O
]	O
,	O
int	O
*	O
none_invincible	*(int)
)	O
{	O
int	O
other	int
=	O
OTHER_COLOR	O
(	O
color	int
)	O
;	O
int	O
something_captured	int
=	O
1	int
;	O
int	O
string_found	int
=	O
0	int
;	O
int	O
moves_played	int
=	O
0	int
;	O
int	O
save_moves	int
;	O
int	O
libs	*(int)
[	O
MAXLIBS	O
]	O
;	O
int	O
liberties	*(int)
;	O
int	O
pos	int
;	O
int	O
k	int
;	O
while	O
(	O
something_captured	int
)	O
{	O
something_captured	int
=	O
0	int
;	O
string_found	int
=	O
0	int
;	O
for	O
(	O
pos	int
=	O
BOARDMIN	O
;	O
pos	int
<	O
BOARDMAX	O
;	O
pos	int
++	O
)	O
{	O
if	O
(	O
board	*(char)
[	O
pos	int
]	O
!=	O
color	int
||	O
find_origin	(int)->(int)
(	O
pos	int
)	O
!=	O
pos	int
)	O
continue	O
;	O
if	O
(	O
exceptions	array(int)
&&	O
exceptions	array(int)
[	O
pos	int
]	O
)	O
continue	O
;	O
string_found	int
=	O
1	int
;	O
liberties	*(int)
=	O
findlib	(int,int,*(int))->(int)
(	O
pos	int
,	O
MAXLIBS	O
,	O
libs	*(int)
)	O
;	O
save_moves	int
=	O
moves_played	int
;	O
for	O
(	O
k	int
=	O
0	int
;	O
k	int
<	O
liberties	*(int)
;	O
k	int
++	O
)	O
{	O
if	O
(	O
trymove	(int,int,*(char),int)->(int)
(	O
libs	*(int)
[	O
k	int
]	O
,	O
other	int
,	O
"unconditional_life"	*(char)
,	O
pos	int
)	O
)	O
moves_played	int
++	O
;	O
}	O
if	O
(	O
board	*(char)
[	O
pos	int
]	O
==	O
EMPTY	int
)	O
something_captured	int
=	O
1	int
;	O
else	O
if	O
(	O
findlib	(int,int,*(int))->(int)
(	O
pos	int
,	O
2	int
,	O
libs	*(int)
)	O
==	O
1	int
)	O
{	O
int	O
success	int
=	O
tryko	(int,int,*(char))->(int)
(	O
libs	*(int)
[	O
0	int
]	O
,	O
other	int
,	O
"unconditional_life"	*(char)
)	O
;	O
gg_assert	O
(	O
success	int
)	O
;	O
moves_played	int
++	O
;	O
something_captured	int
=	O
1	int
;	O
}	O
else	O
while	O
(	O
moves_played	int
>	O
save_moves	int
)	O
{	O
popgo	()->(void)
(	O
)	O
;	O
moves_played	int
--	O
;	O
}	O
}	O
}	O
if	O
(	O
none_invincible	*(int)
)	O
*	O
none_invincible	*(int)
=	O
!	O
string_found	int
;	O
return	O
moves_played	int
;	O
}	O
void	O
unconditional_life	(array(int),int)->(void)
(	O
int	O
unconditional_territory	array(int)
[	O
BOARDMAX	O
]	O
,	O
int	O
color	int
)	O
{	O
int	O
found_one	int
;	O
int	O
other	int
=	O
OTHER_COLOR	O
(	O
color	int
)	O
;	O
int	O
libs	*(int)
[	O
MAXLIBS	O
]	O
;	O
int	O
liberties	*(int)
;	O
int	O
pos	int
;	O
int	O
k	int
,	O
r	int
;	O
int	O
moves_played	int
;	O
int	O
potential_sekis	array(int)
[	O
BOARDMAX	O
]	O
;	O
int	O
none_invincible	*(int)
;	O
memset	(*(void),int,long)->(*(void))
(	O
unconditional_territory	array(int)
,	O
0	int
,	O
sizeof	O
(	O
unconditional_territory	array(int)
[	O
0	int
]	O
)	O
*	O
BOARDMAX	O
)	O
;	O
memset	(*(void),int,long)->(*(void))
(	O
potential_sekis	array(int)
,	O
0	int
,	O
sizeof	O
(	O
potential_sekis	array(int)
)	O
)	O
;	O
for	O
(	O
pos	int
=	O
BOARDMIN	O
;	O
pos	int
<	O
BOARDMAX	O
;	O
pos	int
++	O
)	O
{	O
int	O
isolated	int
=	O
1	int
;	O
int	O
stones	*(int)
[	O
2	int
]	O
;	O
int	O
pos2	int
;	O
if	O
(	O
board	*(char)
[	O
pos	int
]	O
!=	O
color	int
||	O
find_origin	(int)->(int)
(	O
pos	int
)	O
!=	O
pos	int
||	O
countstones	(int)->(int)
(	O
pos	int
)	O
!=	O
2	int
)	O
continue	O
;	O
findstones	(int,int,*(int))->(int)
(	O
pos	int
,	O
2	int
,	O
stones	*(int)
)	O
;	O
for	O
(	O
k	int
=	O
0	int
;	O
k	int
<	O
2	int
&&	O
isolated	int
;	O
k	int
++	O
)	O
{	O
for	O
(	O
r	int
=	O
0	int
;	O
r	int
<	O
8	int
&&	O
isolated	int
;	O
r	int
++	O
)	O
{	O
pos2	int
=	O
stones	*(int)
[	O
k	int
]	O
+	O
delta	array(int)
[	O
r	int
]	O
;	O
if	O
(	O
!	O
ON_BOARD	O
(	O
pos2	int
)	O
||	O
(	O
board	*(char)
[	O
pos2	int
]	O
==	O
color	int
&&	O
!	O
same_string	(int,int)->(int)
(	O
pos	int
,	O
pos2	int
)	O
)	O
)	O
isolated	int
=	O
0	int
;	O
}	O
}	O
if	O
(	O
isolated	int
)	O
{	O
potential_sekis	array(int)
[	O
stones	*(int)
[	O
0	int
]	O
]	O
=	O
1	int
;	O
potential_sekis	array(int)
[	O
stones	*(int)
[	O
1	int
]	O
]	O
=	O
1	int
;	O
}	O
}	O
moves_played	int
=	O
capture_non_invincible_strings	(int,array(int),*(int))->(int)
(	O
color	int
,	O
potential_sekis	array(int)
,	O
&	O
none_invincible	*(int)
)	O
;	O
if	O
(	O
none_invincible	*(int)
)	O
{	O
while	O
(	O
moves_played	int
>	O
0	int
)	O
{	O
popgo	()->(void)
(	O
)	O
;	O
moves_played	int
--	O
;	O
}	O
return	O
;	O
}	O
for	O
(	O
pos	int
=	O
BOARDMIN	O
;	O
pos	int
<	O
BOARDMAX	O
;	O
pos	int
++	O
)	O
{	O
if	O
(	O
board	*(char)
[	O
pos	int
]	O
!=	O
color	int
||	O
potential_sekis	array(int)
[	O
pos	int
]	O
||	O
find_origin	(int)->(int)
(	O
pos	int
)	O
!=	O
pos	int
)	O
continue	O
;	O
liberties	*(int)
=	O
findlib	(int,int,*(int))->(int)
(	O
pos	int
,	O
MAXLIBS	O
,	O
libs	*(int)
)	O
;	O
for	O
(	O
k	int
=	O
0	int
;	O
k	int
<	O
liberties	*(int)
;	O
k	int
++	O
)	O
{	O
if	O
(	O
trymove	(int,int,*(char),int)->(int)
(	O
libs	*(int)
[	O
k	int
]	O
,	O
other	int
,	O
"unconditional_life"	*(char)
,	O
pos	int
)	O
)	O
moves_played	int
++	O
;	O
}	O
}	O
found_one	int
=	O
1	int
;	O
while	O
(	O
found_one	int
)	O
{	O
found_one	int
=	O
0	int
;	O
for	O
(	O
pos	int
=	O
BOARDMIN	O
;	O
pos	int
<	O
BOARDMAX	O
;	O
pos	int
++	O
)	O
{	O
if	O
(	O
board	*(char)
[	O
pos	int
]	O
!=	O
other	int
||	O
countlib	(int)->(int)
(	O
pos	int
)	O
>	O
1	int
)	O
continue	O
;	O
findlib	(int,int,*(int))->(int)
(	O
pos	int
,	O
1	int
,	O
libs	*(int)
)	O
;	O
if	O
(	O
trymove	(int,int,*(char),int)->(int)
(	O
libs	*(int)
[	O
0	int
]	O
,	O
other	int
,	O
"unconditional_life"	*(char)
,	O
pos	int
)	O
)	O
{	O
moves_played	int
++	O
;	O
found_one	int
=	O
1	int
;	O
}	O
}	O
}	O
for	O
(	O
pos	int
=	O
BOARDMIN	O
;	O
pos	int
<	O
BOARDMAX	O
;	O
pos	int
++	O
)	O
{	O
if	O
(	O
!	O
potential_sekis	array(int)
[	O
pos	int
]	O
||	O
board	*(char)
[	O
pos	int
]	O
==	O
EMPTY	int
||	O
find_origin	(int)->(int)
(	O
pos	int
)	O
!=	O
pos	int
)	O
continue	O
;	O
for	O
(	O
r	int
=	O
0	int
;	O
r	int
<	O
4	int
;	O
r	int
++	O
)	O
{	O
int	O
up	int
=	O
delta	array(int)
[	O
r	int
]	O
;	O
int	O
right	int
=	O
delta	array(int)
[	O
(	O
r	int
+	O
1	int
)	O
%	O
4	int
]	O
;	O
int	O
locally_played_moves	int
=	O
0	int
;	O
if	O
(	O
board	*(char)
[	O
pos	int
+	O
up	int
]	O
!=	O
color	int
||	O
board	*(char)
[	O
pos	int
+	O
up	int
+	O
up	int
]	O
!=	O
EMPTY	int
||	O
board	*(char)
[	O
pos	int
-	O
up	int
]	O
!=	O
EMPTY	int
)	O
continue	O
;	O
for	O
(	O
k	int
=	O
0	int
;	O
k	int
<	O
2	int
;	O
k	int
++	O
)	O
{	O
if	O
(	O
k	int
==	O
1	int
)	O
right	int
=	O
-	O
right	int
;	O
if	O
(	O
board	*(char)
[	O
pos	int
+	O
right	int
]	O
!=	O
EMPTY	int
||	O
board	*(char)
[	O
pos	int
+	O
up	int
-	O
right	int
]	O
!=	O
EMPTY	int
)	O
continue	O
;	O
if	O
(	O
board	*(char)
[	O
pos	int
-	O
right	int
]	O
==	O
EMPTY	int
&&	O
trymove	(int,int,*(char),int)->(int)
(	O
pos	int
-	O
right	int
,	O
other	int
,	O
"unconditional_life"	*(char)
,	O
pos	int
)	O
)	O
locally_played_moves	int
++	O
;	O
if	O
(	O
board	*(char)
[	O
pos	int
+	O
up	int
+	O
right	int
]	O
==	O
EMPTY	int
&&	O
trymove	(int,int,*(char),int)->(int)
(	O
pos	int
+	O
up	int
+	O
right	int
,	O
other	int
,	O
"unconditional_life"	*(char)
,	O
pos	int
)	O
)	O
locally_played_moves	int
++	O
;	O
if	O
(	O
board	*(char)
[	O
pos	int
-	O
right	int
]	O
==	O
other	int
&&	O
board	*(char)
[	O
pos	int
+	O
up	int
+	O
right	int
]	O
==	O
other	int
&&	O
same_string	(int,int)->(int)
(	O
pos	int
-	O
right	int
,	O
pos	int
+	O
up	int
+	O
right	int
)	O
)	O
{	O
while	O
(	O
locally_played_moves	int
>	O
0	int
)	O
{	O
popgo	()->(void)
(	O
)	O
;	O
locally_played_moves	int
--	O
;	O
}	O
trymove	(int,int,*(char),int)->(int)
(	O
pos	int
-	O
up	int
,	O
color	int
,	O
"unconditional_life"	*(char)
,	O
pos	int
)	O
;	O
moves_played	int
++	O
;	O
break	O
;	O
}	O
else	O
{	O
while	O
(	O
locally_played_moves	int
>	O
0	int
)	O
{	O
popgo	()->(void)
(	O
)	O
;	O
locally_played_moves	int
--	O
;	O
}	O
}	O
}	O
if	O
(	O
countstones	(int)->(int)
(	O
pos	int
)	O
>	O
2	int
)	O
break	O
;	O
}	O
}	O
for	O
(	O
pos	int
=	O
BOARDMIN	O
;	O
pos	int
<	O
BOARDMAX	O
;	O
pos	int
++	O
)	O
{	O
if	O
(	O
!	O
potential_sekis	array(int)
[	O
pos	int
]	O
||	O
board	*(char)
[	O
pos	int
]	O
==	O
EMPTY	int
)	O
continue	O
;	O
liberties	*(int)
=	O
findlib	(int,int,*(int))->(int)
(	O
pos	int
,	O
MAXLIBS	O
,	O
libs	*(int)
)	O
;	O
for	O
(	O
k	int
=	O
0	int
;	O
k	int
<	O
liberties	*(int)
;	O
k	int
++	O
)	O
{	O
if	O
(	O
trymove	(int,int,*(char),int)->(int)
(	O
libs	*(int)
[	O
k	int
]	O
,	O
other	int
,	O
"unconditional_life"	*(char)
,	O
pos	int
)	O
)	O
moves_played	int
++	O
;	O
}	O
}	O
for	O
(	O
pos	int
=	O
BOARDMIN	O
;	O
pos	int
<	O
BOARDMAX	O
;	O
pos	int
++	O
)	O
{	O
int	O
apos	int
;	O
int	O
bpos	int
;	O
int	O
aopen	int
,	O
bopen	int
;	O
int	O
alib	int
,	O
blib	int
;	O
if	O
(	O
board	*(char)
[	O
pos	int
]	O
!=	O
other	int
||	O
countlib	(int)->(int)
(	O
pos	int
)	O
!=	O
2	int
)	O
continue	O
;	O
findlib	(int,int,*(int))->(int)
(	O
pos	int
,	O
2	int
,	O
libs	*(int)
)	O
;	O
apos	int
=	O
libs	*(int)
[	O
0	int
]	O
;	O
bpos	int
=	O
libs	*(int)
[	O
1	int
]	O
;	O
if	O
(	O
abs	(int)->(int)
(	O
I	O
(	O
apos	int
)	O
-	O
I	O
(	O
bpos	int
)	O
)	O
+	O
abs	(int)->(int)
(	O
J	O
(	O
apos	int
)	O
-	O
J	O
(	O
bpos	int
)	O
)	O
!=	O
1	int
)	O
continue	O
;	O
aopen	int
=	O
approxlib	(int,int,int,*(int))->(int)
(	O
apos	int
,	O
color	int
,	O
4	int
,	O
NULL	O
)	O
;	O
bopen	int
=	O
approxlib	(int,int,int,*(int))->(int)
(	O
bpos	int
,	O
color	int
,	O
4	int
,	O
NULL	O
)	O
;	O
alib	int
=	O
approxlib	(int,int,int,*(int))->(int)
(	O
apos	int
,	O
other	int
,	O
4	int
,	O
NULL	O
)	O
;	O
blib	int
=	O
approxlib	(int,int,int,*(int))->(int)
(	O
bpos	int
,	O
other	int
,	O
4	int
,	O
NULL	O
)	O
;	O
if	O
(	O
aopen	int
>	O
bopen	int
||	O
(	O
aopen	int
==	O
bopen	int
&&	O
alib	int
>=	O
blib	int
)	O
)	O
{	O
trymove	(int,int,*(char),int)->(int)
(	O
apos	int
,	O
other	int
,	O
"unconditional_life"	*(char)
,	O
pos	int
)	O
;	O
moves_played	int
++	O
;	O
}	O
else	O
{	O
trymove	(int,int,*(char),int)->(int)
(	O
bpos	int
,	O
other	int
,	O
"unconditional_life"	*(char)
,	O
pos	int
)	O
;	O
moves_played	int
++	O
;	O
}	O
}	O
for	O
(	O
pos	int
=	O
BOARDMIN	O
;	O
pos	int
<	O
BOARDMAX	O
;	O
pos	int
++	O
)	O
{	O
if	O
(	O
board	*(char)
[	O
pos	int
]	O
==	O
color	int
&&	O
!	O
potential_sekis	array(int)
[	O
pos	int
]	O
)	O
{	O
unconditional_territory	array(int)
[	O
pos	int
]	O
=	O
1	int
;	O
if	O
(	O
find_origin	(int)->(int)
(	O
pos	int
)	O
==	O
pos	int
)	O
{	O
liberties	*(int)
=	O
findlib	(int,int,*(int))->(int)
(	O
pos	int
,	O
MAXLIBS	O
,	O
libs	*(int)
)	O
;	O
for	O
(	O
k	int
=	O
0	int
;	O
k	int
<	O
liberties	*(int)
;	O
k	int
++	O
)	O
unconditional_territory	array(int)
[	O
libs	*(int)
[	O
k	int
]	O
]	O
=	O
2	int
;	O
}	O
}	O
else	O
if	O
(	O
board	*(char)
[	O
pos	int
]	O
==	O
other	int
&&	O
countlib	(int)->(int)
(	O
pos	int
)	O
==	O
1	int
)	O
{	O
unconditional_territory	array(int)
[	O
pos	int
]	O
=	O
2	int
;	O
findlib	(int,int,*(int))->(int)
(	O
pos	int
,	O
1	int
,	O
libs	*(int)
)	O
;	O
unconditional_territory	array(int)
[	O
libs	*(int)
[	O
0	int
]	O
]	O
=	O
2	int
;	O
}	O
}	O
while	O
(	O
moves_played	int
>	O
0	int
)	O
{	O
popgo	()->(void)
(	O
)	O
;	O
moves_played	int
--	O
;	O
}	O
}	O
void	O
find_unconditionally_meaningless_moves	(array(int),int)->(void)
(	O
int	O
unconditional_territory	array(int)
[	O
BOARDMAX	O
]	O
,	O
int	O
color	int
)	O
{	O
int	O
*	O
meaningless_moves	*(int)
;	O
int	O
other	int
=	O
OTHER_COLOR	O
(	O
color	int
)	O
;	O
int	O
friendly_unconditional	array(int)
[	O
BOARDMAX	O
]	O
;	O
int	O
opponent_unconditional	array(int)
[	O
BOARDMAX	O
]	O
;	O
int	O
pos	int
;	O
int	O
pos2	int
;	O
gg_assert	O
(	O
color	int
==	O
BLACK	int
||	O
color	int
==	O
WHITE	int
)	O
;	O
if	O
(	O
color	int
==	O
BLACK	int
)	O
meaningless_moves	*(int)
=	O
meaningless_black_moves	array(int)
;	O
else	O
meaningless_moves	*(int)
=	O
meaningless_white_moves	array(int)
;	O
for	O
(	O
pos	int
=	O
BOARDMIN	O
;	O
pos	int
<	O
BOARDMAX	O
;	O
pos	int
++	O
)	O
if	O
(	O
board	*(char)
[	O
pos	int
]	O
==	O
EMPTY	int
)	O
{	O
if	O
(	O
unconditional_territory	array(int)
[	O
pos	int
]	O
)	O
meaningless_moves	*(int)
[	O
pos	int
]	O
=	O
NO_MOVE	O
;	O
else	O
meaningless_moves	*(int)
[	O
pos	int
]	O
=	O
-	O
1	int
;	O
}	O
for	O
(	O
pos	int
=	O
BOARDMIN	O
;	O
pos	int
<	O
BOARDMAX	O
;	O
pos	int
++	O
)	O
{	O
if	O
(	O
board	*(char)
[	O
pos	int
]	O
!=	O
EMPTY	int
||	O
meaningless_moves	*(int)
[	O
pos	int
]	O
!=	O
-	O
1	int
)	O
continue	O
;	O
if	O
(	O
!	O
tryko	(int,int,*(char))->(int)
(	O
pos	int
,	O
color	int
,	O
"find_unconditionally_meaningless_moves"	*(char)
)	O
)	O
continue	O
;	O
unconditional_life	(array(int),int)->(void)
(	O
opponent_unconditional	array(int)
,	O
other	int
)	O
;	O
if	O
(	O
opponent_unconditional	array(int)
[	O
pos	int
]	O
)	O
{	O
meaningless_moves	*(int)
[	O
pos	int
]	O
=	O
NO_MOVE	O
;	O
}	O
else	O
{	O
unconditional_life	(array(int),int)->(void)
(	O
friendly_unconditional	array(int)
,	O
color	int
)	O
;	O
if	O
(	O
friendly_unconditional	array(int)
[	O
pos	int
]	O
)	O
for	O
(	O
pos2	int
=	O
BOARDMIN	O
;	O
pos2	int
<	O
BOARDMAX	O
;	O
pos2	int
++	O
)	O
if	O
(	O
board	*(char)
[	O
pos2	int
]	O
==	O
EMPTY	int
&&	O
meaningless_moves	*(int)
[	O
pos2	int
]	O
==	O
-	O
1	int
&&	O
friendly_unconditional	array(int)
[	O
pos2	int
]	O
)	O
{	O
meaningless_moves	*(int)
[	O
pos2	int
]	O
=	O
pos	int
;	O
}	O
}	O
popgo	()->(void)
(	O
)	O
;	O
}	O
for	O
(	O
pos	int
=	O
BOARDMIN	O
;	O
pos	int
<	O
BOARDMAX	O
;	O
pos	int
++	O
)	O
if	O
(	O
board	*(char)
[	O
pos	int
]	O
==	O
EMPTY	int
&&	O
meaningless_moves	*(int)
[	O
pos	int
]	O
>	O
0	int
)	O
while	O
(	O
meaningless_moves	*(int)
[	O
meaningless_moves	*(int)
[	O
pos	int
]	O
]	O
>	O
0	int
)	O
meaningless_moves	*(int)
[	O
pos	int
]	O
=	O
meaningless_moves	*(int)
[	O
meaningless_moves	*(int)
[	O
pos	int
]	O
]	O
;	O
}	O
int	O
unconditionally_meaningless_move	(int,int,*(int))->(int)
(	O
int	O
pos	int
,	O
int	O
color	int
,	O
int	O
*	O
replacement_move	*(int)
)	O
{	O
if	O
(	O
color	int
==	O
WHITE	int
&&	O
meaningless_white_moves	array(int)
[	O
pos	int
]	O
!=	O
-	O
1	int
)	O
{	O
*	O
replacement_move	*(int)
=	O
meaningless_white_moves	array(int)
[	O
pos	int
]	O
;	O
return	O
1	int
;	O
}	O
if	O
(	O
color	int
==	O
BLACK	int
&&	O
meaningless_black_moves	array(int)
[	O
pos	int
]	O
!=	O
-	O
1	int
)	O
{	O
*	O
replacement_move	*(int)
=	O
meaningless_black_moves	array(int)
[	O
pos	int
]	O
;	O
return	O
1	int
;	O
}	O
return	O
0	int
;	O
}	O
void	O
clear_unconditionally_meaningless_moves	()->(void)
(	O
)	O
{	O
int	O
pos	int
;	O
for	O
(	O
pos	int
=	O
BOARDMIN	O
;	O
pos	int
<	O
BOARDMAX	O
;	O
pos	int
++	O
)	O
if	O
(	O
ON_BOARD	O
(	O
pos	int
)	O
)	O
{	O
meaningless_black_moves	array(int)
[	O
pos	int
]	O
=	O
-	O
1	int
;	O
meaningless_white_moves	array(int)
[	O
pos	int
]	O
=	O
-	O
1	int
;	O
}	O
}	O
void	O
unconditional_move_reasons	(int)->(void)
(	O
int	O
color	int
)	O
{	O
int	O
replacement_move	*(int)
;	O
int	O
pos	int
;	O
for	O
(	O
pos	int
=	O
BOARDMIN	O
;	O
pos	int
<	O
BOARDMAX	O
;	O
pos	int
++	O
)	O
if	O
(	O
board	*(char)
[	O
pos	int
]	O
==	O
EMPTY	int
&&	O
unconditionally_meaningless_move	(int,int,*(int))->(int)
(	O
pos	int
,	O
color	int
,	O
&	O
replacement_move	*(int)
)	O
)	O
{	O
if	O
(	O
replacement_move	*(int)
==	O
NO_MOVE	O
)	O
{	O
TRACE	O
(	O
"%1m unconditional antisuji.\n"	*(char)
,	O
pos	int
)	O
;	O
add_antisuji_move	(int)->(void)
(	O
pos	int
)	O
;	O
}	O
else	O
{	O
TRACE	O
(	O
"%1m unconditionally replaced to %1m.\n"	*(char)
,	O
pos	int
,	O
replacement_move	*(int)
)	O
;	O
add_replacement_move	(int,int,int)->(void)
(	O
pos	int
,	O
replacement_move	*(int)
,	O
color	int
)	O
;	O
}	O
}	O
}	O
