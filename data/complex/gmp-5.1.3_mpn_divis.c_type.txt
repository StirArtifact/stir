int	O
mpn_divisible_p	O
(	O
mp_srcptr	*(long)
ap	*(long)
,	O
mp_size_t	long
an	long
,	O
mp_srcptr	*(long)
dp	*(long)
,	O
mp_size_t	long
dn	long
)	O
{	O
mp_limb_t	long
alow	long
,	O
dlow	long
,	O
dmask	long
;	O
mp_ptr	*(long)
qp	*(long)
,	O
rp	*(long)
,	O
tp	*(long)
;	O
mp_size_t	long
i	long
;	O
mp_limb_t	long
di	long
;	O
unsigned	O
twos	int
;	O
TMP_DECL	O
;	O
ASSERT	O
(	O
an	long
>=	O
0	int
)	O
;	O
ASSERT	O
(	O
an	long
==	O
0	int
||	O
ap	*(long)
[	O
an	long
-	O
1	int
]	O
!=	O
0	int
)	O
;	O
ASSERT	O
(	O
dn	long
>=	O
1	int
)	O
;	O
ASSERT	O
(	O
dp	*(long)
[	O
dn	long
-	O
1	int
]	O
!=	O
0	int
)	O
;	O
ASSERT_MPN	O
(	O
ap	*(long)
,	O
an	long
)	O
;	O
ASSERT_MPN	O
(	O
dp	*(long)
,	O
dn	long
)	O
;	O
if	O
(	O
an	long
<	O
dn	long
)	O
return	O
(	O
an	long
==	O
0	int
)	O
;	O
for	O
(	O
;	O
;	O
)	O
{	O
alow	long
=	O
*	O
ap	*(long)
;	O
dlow	long
=	O
*	O
dp	*(long)
;	O
if	O
(	O
dlow	long
!=	O
0	int
)	O
break	O
;	O
if	O
(	O
alow	long
!=	O
0	int
)	O
return	O
0	int
;	O
an	long
--	O
;	O
ASSERT	O
(	O
an	long
>=	O
1	int
)	O
;	O
dn	long
--	O
;	O
ASSERT	O
(	O
dn	long
>=	O
1	int
)	O
;	O
ap	*(long)
++	O
;	O
dp	*(long)
++	O
;	O
}	O
dmask	long
=	O
LOW_ZEROS_MASK	O
(	O
dlow	long
)	O
;	O
if	O
(	O
(	O
alow	long
&	O
dmask	long
)	O
!=	O
0	int
)	O
return	O
0	int
;	O
if	O
(	O
dn	long
==	O
1	int
)	O
{	O
if	O
(	O
ABOVE_THRESHOLD	O
(	O
an	long
,	O
BMOD_1_TO_MOD_1_THRESHOLD	int
)	O
)	O
return	O
mpn_mod_1	O
(	O
ap	*(long)
,	O
an	long
,	O
dlow	long
)	O
==	O
0	int
;	O
count_trailing_zeros	O
(	O
twos	int
,	O
dlow	long
)	O
;	O
dlow	long
>>=	O
twos	int
;	O
return	O
mpn_modexact_1_odd	O
(	O
ap	*(long)
,	O
an	long
,	O
dlow	long
)	O
==	O
0	int
;	O
}	O
if	O
(	O
dn	long
==	O
2	int
)	O
{	O
mp_limb_t	long
dsecond	long
=	O
dp	*(long)
[	O
1	int
]	O
;	O
if	O
(	O
dsecond	long
<=	O
dmask	long
)	O
{	O
count_trailing_zeros	O
(	O
twos	int
,	O
dlow	long
)	O
;	O
dlow	long
=	O
(	O
dlow	long
>>	O
twos	int
)	O
|	O
(	O
dsecond	long
<<	O
(	O
GMP_NUMB_BITS	O
-	O
twos	int
)	O
)	O
;	O
ASSERT_LIMB	O
(	O
dlow	long
)	O
;	O
return	O
MPN_MOD_OR_MODEXACT_1_ODD	O
(	O
ap	*(long)
,	O
an	long
,	O
dlow	long
)	O
==	O
0	int
;	O
}	O
}	O
TMP_MARK	O
;	O
rp	*(long)
=	O
TMP_ALLOC_LIMBS	O
(	O
an	long
+	O
1	int
)	O
;	O
qp	*(long)
=	O
TMP_ALLOC_LIMBS	O
(	O
an	long
-	O
dn	long
+	O
1	int
)	O
;	O
count_trailing_zeros	O
(	O
twos	int
,	O
dp	*(long)
[	O
0	int
]	O
)	O
;	O
if	O
(	O
twos	int
!=	O
0	int
)	O
{	O
tp	*(long)
=	O
TMP_ALLOC_LIMBS	O
(	O
dn	long
)	O
;	O
ASSERT_NOCARRY	O
(	O
mpn_rshift	O
(	O
tp	*(long)
,	O
dp	*(long)
,	O
dn	long
,	O
twos	int
)	O
)	O
;	O
dp	*(long)
=	O
tp	*(long)
;	O
ASSERT_NOCARRY	O
(	O
mpn_rshift	O
(	O
rp	*(long)
,	O
ap	*(long)
,	O
an	long
,	O
twos	int
)	O
)	O
;	O
}	O
else	O
{	O
MPN_COPY	O
(	O
rp	*(long)
,	O
ap	*(long)
,	O
an	long
)	O
;	O
}	O
if	O
(	O
rp	*(long)
[	O
an	long
-	O
1	int
]	O
>=	O
dp	*(long)
[	O
dn	long
-	O
1	int
]	O
)	O
{	O
rp	*(long)
[	O
an	long
]	O
=	O
0	int
;	O
an	long
++	O
;	O
}	O
else	O
if	O
(	O
an	long
==	O
dn	long
)	O
{	O
TMP_FREE	O
;	O
return	O
0	int
;	O
}	O
ASSERT	O
(	O
an	long
>	O
dn	long
)	O
;	O
if	O
(	O
BELOW_THRESHOLD	O
(	O
dn	long
,	O
DC_BDIV_QR_THRESHOLD	int
)	O
||	O
BELOW_THRESHOLD	O
(	O
an	long
-	O
dn	long
,	O
DC_BDIV_QR_THRESHOLD	int
)	O
)	O
{	O
binvert_limb	O
(	O
di	long
,	O
dp	*(long)
[	O
0	int
]	O
)	O
;	O
mpn_sbpi1_bdiv_qr	O
(	O
qp	*(long)
,	O
rp	*(long)
,	O
an	long
,	O
dp	*(long)
,	O
dn	long
,	O
-	O
di	long
)	O
;	O
rp	*(long)
+=	O
an	long
-	O
dn	long
;	O
}	O
else	O
if	O
(	O
BELOW_THRESHOLD	O
(	O
dn	long
,	O
MU_BDIV_QR_THRESHOLD	int
)	O
)	O
{	O
binvert_limb	O
(	O
di	long
,	O
dp	*(long)
[	O
0	int
]	O
)	O
;	O
mpn_dcpi1_bdiv_qr	O
(	O
qp	*(long)
,	O
rp	*(long)
,	O
an	long
,	O
dp	*(long)
,	O
dn	long
,	O
-	O
di	long
)	O
;	O
rp	*(long)
+=	O
an	long
-	O
dn	long
;	O
}	O
else	O
{	O
tp	*(long)
=	O
TMP_ALLOC_LIMBS	O
(	O
mpn_mu_bdiv_qr_itch	O
(	O
an	long
,	O
dn	long
)	O
)	O
;	O
mpn_mu_bdiv_qr	O
(	O
qp	*(long)
,	O
rp	*(long)
,	O
rp	*(long)
,	O
an	long
,	O
dp	*(long)
,	O
dn	long
,	O
tp	*(long)
)	O
;	O
}	O
i	long
=	O
0	int
;	O
do	O
{	O
if	O
(	O
rp	*(long)
[	O
i	long
]	O
!=	O
0	int
)	O
{	O
TMP_FREE	O
;	O
return	O
0	int
;	O
}	O
}	O
while	O
(	O
++	O
i	long
<	O
dn	long
)	O
;	O
TMP_FREE	O
;	O
return	O
1	int
;	O
}	O
