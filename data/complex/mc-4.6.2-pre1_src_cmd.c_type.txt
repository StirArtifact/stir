int	O
output_starts_shell	int
=	O
0	int
;	O
int	O
use_internal_edit	int
=	O
1	int
;	O
int	O
view_file_at_line	(*(char),int,int,int)->(int)
(	O
const	O
char	O
*	O
filename	*(char)
,	O
int	O
plain_view	int
,	O
int	O
internal	int
,	O
int	O
start_line	int
)	O
{	O
static	O
const	O
char	O
*	O
viewer	*(char)
=	O
NULL	O
;	O
int	O
move_dir	*(int)
=	O
0	int
;	O
if	O
(	O
plain_view	int
)	O
{	O
int	O
changed_hex_mode	int
=	O
0	int
;	O
int	O
changed_nroff_flag	int
=	O
0	int
;	O
int	O
changed_magic_flag	int
=	O
0	int
;	O
altered_hex_mode	int
=	O
0	int
;	O
altered_nroff_flag	int
=	O
0	int
;	O
altered_magic_flag	int
=	O
0	int
;	O
if	O
(	O
default_hex_mode	int
)	O
changed_hex_mode	int
=	O
1	int
;	O
if	O
(	O
default_nroff_flag	int
)	O
changed_nroff_flag	int
=	O
1	int
;	O
if	O
(	O
default_magic_flag	int
)	O
changed_magic_flag	int
=	O
1	int
;	O
default_hex_mode	int
=	O
0	int
;	O
default_nroff_flag	int
=	O
0	int
;	O
default_magic_flag	int
=	O
0	int
;	O
mc_internal_viewer	(*(char),*(char),*(int),int)->(int)
(	O
NULL	O
,	O
filename	*(char)
,	O
&	O
move_dir	*(int)
,	O
start_line	int
)	O
;	O
if	O
(	O
changed_hex_mode	int
&&	O
!	O
altered_hex_mode	int
)	O
default_hex_mode	int
=	O
1	int
;	O
if	O
(	O
changed_nroff_flag	int
&&	O
!	O
altered_nroff_flag	int
)	O
default_nroff_flag	int
=	O
1	int
;	O
if	O
(	O
changed_magic_flag	int
&&	O
!	O
altered_magic_flag	int
)	O
default_magic_flag	int
=	O
1	int
;	O
repaint_screen	()->(void)
(	O
)	O
;	O
return	O
move_dir	*(int)
;	O
}	O
if	O
(	O
internal	int
)	O
{	O
char	O
view_entry	array(char)
[	O
BUF_TINY	int
]	O
;	O
if	O
(	O
start_line	int
!=	O
0	int
)	O
g_snprintf	(*(char),long,*(char))->(int)
(	O
view_entry	array(char)
,	O
sizeof	O
(	O
view_entry	array(char)
)	O
,	O
"View:%d"	*(char)
,	O
start_line	int
)	O
;	O
else	O
strcpy	(*(char),*(char))->(*(char))
(	O
view_entry	array(char)
,	O
"View"	*(char)
)	O
;	O
if	O
(	O
regex_command	(*(char),*(char),*(int))->(int)
(	O
filename	*(char)
,	O
view_entry	array(char)
,	O
&	O
move_dir	*(int)
)	O
==	O
0	int
)	O
{	O
mc_internal_viewer	(*(char),*(char),*(int),int)->(int)
(	O
NULL	O
,	O
filename	*(char)
,	O
&	O
move_dir	*(int)
,	O
start_line	int
)	O
;	O
repaint_screen	()->(void)
(	O
)	O
;	O
}	O
}	O
else	O
{	O
if	O
(	O
!	O
viewer	*(char)
)	O
{	O
viewer	*(char)
=	O
getenv	(*(char))->(*(char))
(	O
"VIEWER"	*(char)
)	O
;	O
if	O
(	O
!	O
viewer	*(char)
)	O
viewer	*(char)
=	O
getenv	(*(char))->(*(char))
(	O
"PAGER"	*(char)
)	O
;	O
if	O
(	O
!	O
viewer	*(char)
)	O
viewer	*(char)
=	O
"view"	*(char)
;	O
}	O
execute_with_vfs_arg	(*(char),*(char))->(void)
(	O
viewer	*(char)
,	O
filename	*(char)
)	O
;	O
}	O
return	O
move_dir	*(int)
;	O
}	O
int	O
view_file	(*(char),int,int)->(int)
(	O
const	O
char	O
*	O
filename	*(char)
,	O
int	O
plain_view	int
,	O
int	O
internal	int
)	O
{	O
return	O
view_file_at_line	(*(char),int,int,int)->(int)
(	O
filename	*(char)
,	O
plain_view	int
,	O
internal	int
,	O
0	int
)	O
;	O
}	O
static	O
int	O
scan_for_file	(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),struct(*(struct`),int),int,int,array(char),array(char),*(struct(*`,*`,*`)),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*`,*`)->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char))),int,int)->(int)
(	O
WPanel	struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))),*(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))),*((*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*(struct(int,int,int,enum(int,int,int,int,int,int,int,int,int))),*(void))->(int)),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))))),struct(*(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),struct(int,int,int,int))),int),int,int,array(char),array(char),*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`))))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char))
*	O
panel	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),struct(*(struct(int,*`,struct`,struct`)),int),int,int,array(char),array(char),*(struct(*(void),*(struct`),*(struct`))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char)))
,	O
int	O
idx	int
,	O
int	O
direction	int
)	O
{	O
int	O
i	array(int)
=	O
idx	int
+	O
direction	int
;	O
while	O
(	O
i	array(int)
!=	O
idx	int
)	O
{	O
if	O
(	O
i	array(int)
<	O
0	int
)	O
i	array(int)
=	O
panel	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),struct(*(struct(int,*`,struct`,struct`)),int),int,int,array(char),array(char),*(struct(*(void),*(struct`),*(struct`))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char)))
->	O
count	int
-	O
1	int
;	O
if	O
(	O
i	array(int)
==	O
panel	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),struct(*(struct(int,*`,struct`,struct`)),int),int,int,array(char),array(char),*(struct(*(void),*(struct`),*(struct`))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char)))
->	O
count	int
)	O
i	array(int)
=	O
0	int
;	O
if	O
(	O
!	O
S_ISDIR	O
(	O
panel	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),struct(*(struct(int,*`,struct`,struct`)),int),int,int,array(char),array(char),*(struct(*(void),*(struct`),*(struct`))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char)))
->	O
dir	*(struct)
.	O
list	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
[	O
i	array(int)
]	O
.	O
st	*(struct)
.	O
st_mode	int
)	O
)	O
return	O
i	array(int)
;	O
i	array(int)
+=	O
direction	int
;	O
}	O
return	O
i	array(int)
;	O
}	O
static	O
void	O
do_view_cmd	(int)->(void)
(	O
int	O
normal	int
)	O
{	O
int	O
dir	*(struct)
,	O
file_idx	int
;	O
if	O
(	O
S_ISDIR	O
(	O
selection	O
(	O
current_panel	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),struct(*(struct(int,*`,struct`,struct`)),int),int,int,array(char),array(char),*(struct(*(void),*(struct`),*(struct`))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char)))
)	O
->	O
st	*(struct)
.	O
st_mode	int
)	O
||	O
link_isdir	(*(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),struct(int,int,int,int))))->(int)
(	O
selection	O
(	O
current_panel	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),struct(*(struct(int,*`,struct`,struct`)),int),int,int,array(char),array(char),*(struct(*(void),*(struct`),*(struct`))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char)))
)	O
)	O
)	O
{	O
if	O
(	O
confirm_view_dir	int
&&	O
(	O
current_panel	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),struct(*(struct(int,*`,struct`,struct`)),int),int,int,array(char),array(char),*(struct(*(void),*(struct`),*(struct`))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char)))
->	O
marked	int
||	O
current_panel	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),struct(*(struct(int,*`,struct`,struct`)),int),int,int,array(char),array(char),*(struct(*(void),*(struct`),*(struct`))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char)))
->	O
dirs_marked	int
)	O
)	O
{	O
if	O
(	O
query_dialog	(*(char),*(char),int,int)->(int)
(	O
_	O
(	O
" Confirmation "	*(char)
)	O
,	O
_	O
(	O
"Files tagged, want to cd?"	*(char)
)	O
,	O
0	int
,	O
2	int
,	O
_	O
(	O
"&Yes"	*(char)
)	O
,	O
_	O
(	O
"&No"	*(char)
)	O
)	O
!=	O
0	int
)	O
{	O
return	O
;	O
}	O
}	O
if	O
(	O
!	O
do_cd	(*(char),enum(int,int))->(int)
(	O
selection	O
(	O
current_panel	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),struct(*(struct(int,*`,struct`,struct`)),int),int,int,array(char),array(char),*(struct(*(void),*(struct`),*(struct`))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char)))
)	O
->	O
fname	*(char)
,	O
cd_exact	int
)	O
)	O
message	*(char)
(	O
1	int
,	O
MSG_ERROR	O
,	O
_	O
(	O
"Cannot change directory"	*(char)
)	O
)	O
;	O
return	O
;	O
}	O
file_idx	int
=	O
current_panel	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),struct(*(struct(int,*`,struct`,struct`)),int),int,int,array(char),array(char),*(struct(*(void),*(struct`),*(struct`))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char)))
->	O
selected	int
;	O
while	O
(	O
1	int
)	O
{	O
char	O
*	O
filename	*(char)
;	O
filename	*(char)
=	O
current_panel	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),struct(*(struct(int,*`,struct`,struct`)),int),int,int,array(char),array(char),*(struct(*(void),*(struct`),*(struct`))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char)))
->	O
dir	*(struct)
.	O
list	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
[	O
file_idx	int
]	O
.	O
fname	*(char)
;	O
dir	*(struct)
=	O
view_file	(*(char),int,int)->(int)
(	O
filename	*(char)
,	O
normal	int
,	O
use_internal_view	int
)	O
;	O
if	O
(	O
dir	*(struct)
==	O
0	int
)	O
break	O
;	O
file_idx	int
=	O
scan_for_file	(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),struct(*(struct`),int),int,int,array(char),array(char),*(struct(*`,*`,*`)),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*`,*`)->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char))),int,int)->(int)
(	O
current_panel	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),struct(*(struct(int,*`,struct`,struct`)),int),int,int,array(char),array(char),*(struct(*(void),*(struct`),*(struct`))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char)))
,	O
file_idx	int
,	O
dir	*(struct)
)	O
;	O
}	O
}	O
void	O
view_cmd	()->(void)
(	O
void	O
)	O
{	O
do_view_cmd	(int)->(void)
(	O
0	int
)	O
;	O
}	O
void	O
view_file_cmd	()->(void)
(	O
void	O
)	O
{	O
char	O
*	O
filename	*(char)
;	O
filename	*(char)
=	O
input_expand_dialog	(*(char),*(char),*(char))->(*(char))
(	O
_	O
(	O
" View file "	*(char)
)	O
,	O
_	O
(	O
" Filename:"	*(char)
)	O
,	O
selection	O
(	O
current_panel	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),struct(*(struct(int,*`,struct`,struct`)),int),int,int,array(char),array(char),*(struct(*(void),*(struct`),*(struct`))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char)))
)	O
->	O
fname	*(char)
)	O
;	O
if	O
(	O
!	O
filename	*(char)
)	O
return	O
;	O
view_file	(*(char),int,int)->(int)
(	O
filename	*(char)
,	O
0	int
,	O
use_internal_view	int
)	O
;	O
g_free	(*(void))->(void)
(	O
filename	*(char)
)	O
;	O
}	O
void	O
view_simple_cmd	()->(void)
(	O
void	O
)	O
{	O
do_view_cmd	(int)->(void)
(	O
1	int
)	O
;	O
}	O
void	O
filtered_view_cmd	()->(void)
(	O
void	O
)	O
{	O
char	O
*	O
command	*(char)
;	O
command	*(char)
=	O
input_dialog	(*(char),*(char),*(char))->(*(char))
(	O
_	O
(	O
" Filtered view "	*(char)
)	O
,	O
_	O
(	O
" Filter command and arguments:"	*(char)
)	O
,	O
selection	O
(	O
current_panel	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),struct(*(struct(int,*`,struct`,struct`)),int),int,int,array(char),array(char),*(struct(*(void),*(struct`),*(struct`))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char)))
)	O
->	O
fname	*(char)
)	O
;	O
if	O
(	O
!	O
command	*(char)
)	O
return	O
;	O
mc_internal_viewer	(*(char),*(char),*(int),int)->(int)
(	O
command	*(char)
,	O
""	*(char)
,	O
NULL	O
,	O
0	int
)	O
;	O
g_free	(*(void))->(void)
(	O
command	*(char)
)	O
;	O
}	O
void	O
do_edit_at_line	(*(char),int)->(void)
(	O
const	O
char	O
*	O
what	*(char)
,	O
int	O
start_line	int
)	O
{	O
static	O
const	O
char	O
*	O
editor	*(char)
=	O
NULL	O
;	O
if	O
(	O
use_internal_edit	int
)	O
{	O
edit_file	(*(char),int)->(int)
(	O
what	*(char)
,	O
start_line	int
)	O
;	O
update_panels	(int,*(char))->(void)
(	O
UP_OPTIMIZE	int
,	O
UP_KEEPSEL	O
)	O
;	O
repaint_screen	()->(void)
(	O
)	O
;	O
return	O
;	O
}	O
if	O
(	O
!	O
editor	*(char)
)	O
{	O
editor	*(char)
=	O
getenv	(*(char))->(*(char))
(	O
"EDITOR"	*(char)
)	O
;	O
if	O
(	O
!	O
editor	*(char)
)	O
editor	*(char)
=	O
get_default_editor	*(char)
(	O
)	O
;	O
}	O
execute_with_vfs_arg	(*(char),*(char))->(void)
(	O
editor	*(char)
,	O
what	*(char)
)	O
;	O
update_panels	(int,*(char))->(void)
(	O
UP_OPTIMIZE	int
,	O
UP_KEEPSEL	O
)	O
;	O
repaint_screen	()->(void)
(	O
)	O
;	O
}	O
static	O
void	O
do_edit	(*(char))->(void)
(	O
const	O
char	O
*	O
what	*(char)
)	O
{	O
do_edit_at_line	(*(char),int)->(void)
(	O
what	*(char)
,	O
0	int
)	O
;	O
}	O
void	O
edit_cmd	()->(void)
(	O
void	O
)	O
{	O
if	O
(	O
regex_command	(*(char),*(char),*(int))->(int)
(	O
selection	O
(	O
current_panel	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),struct(*(struct(int,*`,struct`,struct`)),int),int,int,array(char),array(char),*(struct(*(void),*(struct`),*(struct`))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char)))
)	O
->	O
fname	*(char)
,	O
"Edit"	*(char)
,	O
0	int
)	O
==	O
0	int
)	O
do_edit	(*(char))->(void)
(	O
selection	O
(	O
current_panel	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),struct(*(struct(int,*`,struct`,struct`)),int),int,int,array(char),array(char),*(struct(*(void),*(struct`),*(struct`))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char)))
)	O
->	O
fname	*(char)
)	O
;	O
}	O
void	O
edit_cmd_new	()->(void)
(	O
void	O
)	O
{	O
do_edit	(*(char))->(void)
(	O
NULL	O
)	O
;	O
}	O
void	O
copy_cmd	()->(void)
(	O
void	O
)	O
{	O
save_cwds_stat	()->(void)
(	O
)	O
;	O
if	O
(	O
panel_operate	(*(void),enum(int,int,int),int)->(int)
(	O
current_panel	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),struct(*(struct(int,*`,struct`,struct`)),int),int,int,array(char),array(char),*(struct(*(void),*(struct`),*(struct`))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char)))
,	O
OP_COPY	int
,	O
0	int
)	O
)	O
{	O
update_panels	(int,*(char))->(void)
(	O
UP_OPTIMIZE	int
,	O
UP_KEEPSEL	O
)	O
;	O
repaint_screen	()->(void)
(	O
)	O
;	O
}	O
}	O
void	O
ren_cmd	()->(void)
(	O
void	O
)	O
{	O
save_cwds_stat	()->(void)
(	O
)	O
;	O
if	O
(	O
panel_operate	(*(void),enum(int,int,int),int)->(int)
(	O
current_panel	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),struct(*(struct(int,*`,struct`,struct`)),int),int,int,array(char),array(char),*(struct(*(void),*(struct`),*(struct`))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char)))
,	O
OP_MOVE	int
,	O
0	int
)	O
)	O
{	O
update_panels	(int,*(char))->(void)
(	O
UP_OPTIMIZE	int
,	O
UP_KEEPSEL	O
)	O
;	O
repaint_screen	()->(void)
(	O
)	O
;	O
}	O
}	O
void	O
copy_cmd_local	()->(void)
(	O
void	O
)	O
{	O
save_cwds_stat	()->(void)
(	O
)	O
;	O
if	O
(	O
panel_operate	(*(void),enum(int,int,int),int)->(int)
(	O
current_panel	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),struct(*(struct(int,*`,struct`,struct`)),int),int,int,array(char),array(char),*(struct(*(void),*(struct`),*(struct`))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char)))
,	O
OP_COPY	int
,	O
1	int
)	O
)	O
{	O
update_panels	(int,*(char))->(void)
(	O
UP_OPTIMIZE	int
,	O
UP_KEEPSEL	O
)	O
;	O
repaint_screen	()->(void)
(	O
)	O
;	O
}	O
}	O
void	O
ren_cmd_local	()->(void)
(	O
void	O
)	O
{	O
save_cwds_stat	()->(void)
(	O
)	O
;	O
if	O
(	O
panel_operate	(*(void),enum(int,int,int),int)->(int)
(	O
current_panel	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),struct(*(struct(int,*`,struct`,struct`)),int),int,int,array(char),array(char),*(struct(*(void),*(struct`),*(struct`))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char)))
,	O
OP_MOVE	int
,	O
1	int
)	O
)	O
{	O
update_panels	(int,*(char))->(void)
(	O
UP_OPTIMIZE	int
,	O
UP_KEEPSEL	O
)	O
;	O
repaint_screen	()->(void)
(	O
)	O
;	O
}	O
}	O
void	O
mkdir_cmd	()->(void)
(	O
void	O
)	O
{	O
char	O
*	O
dir	*(struct)
,	O
*	O
absdir	*(char)
;	O
dir	*(struct)
=	O
input_expand_dialog	(*(char),*(char),*(char))->(*(char))
(	O
_	O
(	O
"Create a new Directory"	*(char)
)	O
,	O
_	O
(	O
" Enter directory name:"	*(char)
)	O
,	O
""	*(char)
)	O
;	O
if	O
(	O
!	O
dir	*(struct)
)	O
return	O
;	O
if	O
(	O
dir	*(struct)
[	O
0	int
]	O
==	O
'/'	O
||	O
dir	*(struct)
[	O
0	int
]	O
==	O
'~'	O
)	O
absdir	*(char)
=	O
g_strdup	(*(char))->(*(char))
(	O
dir	*(struct)
)	O
;	O
else	O
absdir	*(char)
=	O
concat_dir_and_file	(*(char),*(char))->(*(char))
(	O
current_panel	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),struct(*(struct(int,*`,struct`,struct`)),int),int,int,array(char),array(char),*(struct(*(void),*(struct`),*(struct`))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char)))
->	O
cwd	short
,	O
dir	*(struct)
)	O
;	O
save_cwds_stat	()->(void)
(	O
)	O
;	O
if	O
(	O
my_mkdir	(*(char),int)->(int)
(	O
absdir	*(char)
,	O
0777	int
)	O
==	O
0	int
)	O
{	O
update_panels	(int,*(char))->(void)
(	O
UP_OPTIMIZE	int
,	O
dir	*(struct)
)	O
;	O
repaint_screen	()->(void)
(	O
)	O
;	O
select_item	(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),struct(*(struct`),int),int,int,array(char),array(char),*(struct(*`,*`,*`)),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*`,*`)->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char))))->(void)
(	O
current_panel	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),struct(*(struct(int,*`,struct`,struct`)),int),int,int,array(char),array(char),*(struct(*(void),*(struct`),*(struct`))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char)))
)	O
;	O
}	O
else	O
{	O
message	*(char)
(	O
1	int
,	O
MSG_ERROR	O
,	O
"  %s  "	*(char)
,	O
unix_error_string	(int)->(*(char))
(	O
errno	O
)	O
)	O
;	O
}	O
g_free	(*(void))->(void)
(	O
absdir	*(char)
)	O
;	O
g_free	(*(void))->(void)
(	O
dir	*(struct)
)	O
;	O
}	O
void	O
delete_cmd	()->(void)
(	O
void	O
)	O
{	O
save_cwds_stat	()->(void)
(	O
)	O
;	O
if	O
(	O
panel_operate	(*(void),enum(int,int,int),int)->(int)
(	O
current_panel	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),struct(*(struct(int,*`,struct`,struct`)),int),int,int,array(char),array(char),*(struct(*(void),*(struct`),*(struct`))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char)))
,	O
OP_DELETE	int
,	O
0	int
)	O
)	O
{	O
update_panels	(int,*(char))->(void)
(	O
UP_OPTIMIZE	int
,	O
UP_KEEPSEL	O
)	O
;	O
repaint_screen	()->(void)
(	O
)	O
;	O
}	O
}	O
void	O
delete_cmd_local	()->(void)
(	O
void	O
)	O
{	O
save_cwds_stat	()->(void)
(	O
)	O
;	O
if	O
(	O
panel_operate	(*(void),enum(int,int,int),int)->(int)
(	O
current_panel	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),struct(*(struct(int,*`,struct`,struct`)),int),int,int,array(char),array(char),*(struct(*(void),*(struct`),*(struct`))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char)))
,	O
OP_DELETE	int
,	O
1	int
)	O
)	O
{	O
update_panels	(int,*(char))->(void)
(	O
UP_OPTIMIZE	int
,	O
UP_KEEPSEL	O
)	O
;	O
repaint_screen	()->(void)
(	O
)	O
;	O
}	O
}	O
void	O
find_cmd	()->(void)
(	O
void	O
)	O
{	O
do_find	()->(void)
(	O
)	O
;	O
}	O
static	O
void	O
set_panel_filter_to	(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),struct(*(struct`),int),int,int,array(char),array(char),*(struct(*`,*`,*`)),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*`,*`)->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char))),*(char))->(void)
(	O
WPanel	struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))),*(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))),*((*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*(struct(int,int,int,enum(int,int,int,int,int,int,int,int,int))),*(void))->(int)),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))))),struct(*(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),struct(int,int,int,int))),int),int,int,array(char),array(char),*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`))))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char))
*	O
p	*(void)
,	O
char	O
*	O
allocated_filter_string	*(char)
)	O
{	O
g_free	(*(void))->(void)
(	O
p	*(void)
->	O
filter	*(char)
)	O
;	O
p	*(void)
->	O
filter	*(char)
=	O
0	int
;	O
if	O
(	O
!	O
(	O
allocated_filter_string	*(char)
[	O
0	int
]	O
==	O
'*'	O
&&	O
allocated_filter_string	*(char)
[	O
1	int
]	O
==	O
0	int
)	O
)	O
p	*(void)
->	O
filter	*(char)
=	O
allocated_filter_string	*(char)
;	O
else	O
g_free	(*(void))->(void)
(	O
allocated_filter_string	*(char)
)	O
;	O
reread_cmd	()->(void)
(	O
)	O
;	O
}	O
static	O
void	O
set_panel_filter	(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),struct(*(struct`),int),int,int,array(char),array(char),*(struct(*`,*`,*`)),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*`,*`)->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char))))->(void)
(	O
WPanel	struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))),*(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))),*((*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*(struct(int,int,int,enum(int,int,int,int,int,int,int,int,int))),*(void))->(int)),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))))),struct(*(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),struct(int,int,int,int))),int),int,int,array(char),array(char),*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`))))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char))
*	O
p	*(void)
)	O
{	O
char	O
*	O
reg_exp	*(char)
;	O
const	O
char	O
*	O
x	array(long)
;	O
x	array(long)
=	O
p	*(void)
->	O
filter	*(char)
?	O
p	*(void)
->	O
filter	*(char)
:	O
easy_patterns	int
?	O
"*"	*(char)
:	O
"."	*(char)
;	O
reg_exp	*(char)
=	O
input_dialog_help	(*(char),*(char),*(char),*(char))->(*(char))
(	O
_	O
(	O
" Filter "	*(char)
)	O
,	O
_	O
(	O
" Set expression for filtering filenames"	*(char)
)	O
,	O
"[Filter...]"	*(char)
,	O
x	array(long)
)	O
;	O
if	O
(	O
!	O
reg_exp	*(char)
)	O
return	O
;	O
set_panel_filter_to	(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),struct(*(struct`),int),int,int,array(char),array(char),*(struct(*`,*`,*`)),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*`,*`)->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char))),*(char))->(void)
(	O
p	*(void)
,	O
reg_exp	*(char)
)	O
;	O
}	O
void	O
filter_cmd	()->(void)
(	O
void	O
)	O
{	O
WPanel	struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))),*(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))),*((*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*(struct(int,int,int,enum(int,int,int,int,int,int,int,int,int))),*(void))->(int)),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))))),struct(*(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),struct(int,int,int,int))),int),int,int,array(char),array(char),*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`))))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char))
*	O
p	*(void)
;	O
if	O
(	O
!	O
SELECTED_IS_PANEL	O
)	O
return	O
;	O
p	*(void)
=	O
MENU_PANEL	O
;	O
set_panel_filter	(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),struct(*(struct`),int),int,int,array(char),array(char),*(struct(*`,*`,*`)),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*`,*`)->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char))))->(void)
(	O
p	*(void)
)	O
;	O
}	O
void	O
reread_cmd	()->(void)
(	O
void	O
)	O
{	O
int	O
flag	int
;	O
if	O
(	O
get_current_type	()->(int)
(	O
)	O
==	O
view_listing	int
&&	O
get_other_type	()->(int)
(	O
)	O
==	O
view_listing	int
)	O
flag	int
=	O
strcmp	(*(char),*(char))->(int)
(	O
current_panel	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),struct(*(struct(int,*`,struct`,struct`)),int),int,int,array(char),array(char),*(struct(*(void),*(struct`),*(struct`))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char)))
->	O
cwd	short
,	O
other_panel	O
->	O
cwd	short
)	O
?	O
UP_ONLY_CURRENT	int
:	O
0	int
;	O
else	O
flag	int
=	O
UP_ONLY_CURRENT	int
;	O
update_panels	(int,*(char))->(void)
(	O
UP_RELOAD	int
|	O
flag	int
,	O
UP_KEEPSEL	O
)	O
;	O
repaint_screen	()->(void)
(	O
)	O
;	O
}	O
void	O
reverse_selection_cmd	()->(void)
(	O
void	O
)	O
{	O
file_entry	struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),struct(int,int,int,int))
*	O
file	*(char)
;	O
int	O
i	array(int)
;	O
for	O
(	O
i	array(int)
=	O
0	int
;	O
i	array(int)
<	O
current_panel	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),struct(*(struct(int,*`,struct`,struct`)),int),int,int,array(char),array(char),*(struct(*(void),*(struct`),*(struct`))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char)))
->	O
count	int
;	O
i	array(int)
++	O
)	O
{	O
file	*(char)
=	O
&	O
current_panel	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),struct(*(struct(int,*`,struct`,struct`)),int),int,int,array(char),array(char),*(struct(*(void),*(struct`),*(struct`))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char)))
->	O
dir	*(struct)
.	O
list	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
[	O
i	array(int)
]	O
;	O
if	O
(	O
S_ISDIR	O
(	O
file	*(char)
->	O
st	*(struct)
.	O
st_mode	int
)	O
)	O
continue	O
;	O
do_file_mark	(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),struct(*(struct`),int),int,int,array(char),array(char),*(struct(*`,*`,*`)),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*`,*`)->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char))),int,int)->(void)
(	O
current_panel	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),struct(*(struct(int,*`,struct`,struct`)),int),int,int,array(char),array(char),*(struct(*(void),*(struct`),*(struct`))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char)))
,	O
i	array(int)
,	O
!	O
file	*(char)
->	O
f	float
.	O
marked	int
)	O
;	O
}	O
}	O
static	O
void	O
select_unselect_cmd	(*(char),int)->(void)
(	O
const	O
char	O
*	O
title	*(char)
,	O
int	O
cmd	*(char)
)	O
{	O
char	O
*	O
reg_exp	*(char)
,	O
*	O
reg_exp_t	*(char)
;	O
int	O
i	array(int)
;	O
int	O
c	int
;	O
int	O
dirflag	int
=	O
0	int
;	O
reg_exp	*(char)
=	O
input_dialog	(*(char),*(char),*(char))->(*(char))
(	O
title	*(char)
,	O
""	*(char)
,	O
easy_patterns	int
?	O
"*"	*(char)
:	O
"."	*(char)
)	O
;	O
if	O
(	O
!	O
reg_exp	*(char)
)	O
return	O
;	O
if	O
(	O
!	O
*	O
reg_exp	*(char)
)	O
{	O
g_free	(*(void))->(void)
(	O
reg_exp	*(char)
)	O
;	O
return	O
;	O
}	O
reg_exp_t	*(char)
=	O
reg_exp	*(char)
;	O
if	O
(	O
*	O
reg_exp_t	*(char)
==	O
PATH_SEP	char
)	O
{	O
dirflag	int
=	O
1	int
;	O
reg_exp_t	*(char)
++	O
;	O
}	O
if	O
(	O
reg_exp_t	*(char)
[	O
strlen	(*(char))->(long)
(	O
reg_exp_t	*(char)
)	O
-	O
1	int
]	O
==	O
PATH_SEP	char
)	O
{	O
dirflag	int
=	O
1	int
;	O
reg_exp_t	*(char)
[	O
strlen	(*(char))->(long)
(	O
reg_exp_t	*(char)
)	O
-	O
1	int
]	O
=	O
0	int
;	O
}	O
for	O
(	O
i	array(int)
=	O
0	int
;	O
i	array(int)
<	O
current_panel	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),struct(*(struct(int,*`,struct`,struct`)),int),int,int,array(char),array(char),*(struct(*(void),*(struct`),*(struct`))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char)))
->	O
count	int
;	O
i	array(int)
++	O
)	O
{	O
if	O
(	O
!	O
strcmp	(*(char),*(char))->(int)
(	O
current_panel	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),struct(*(struct(int,*`,struct`,struct`)),int),int,int,array(char),array(char),*(struct(*(void),*(struct`),*(struct`))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char)))
->	O
dir	*(struct)
.	O
list	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
[	O
i	array(int)
]	O
.	O
fname	*(char)
,	O
".."	*(char)
)	O
)	O
continue	O
;	O
if	O
(	O
S_ISDIR	O
(	O
current_panel	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),struct(*(struct(int,*`,struct`,struct`)),int),int,int,array(char),array(char),*(struct(*(void),*(struct`),*(struct`))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char)))
->	O
dir	*(struct)
.	O
list	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
[	O
i	array(int)
]	O
.	O
st	*(struct)
.	O
st_mode	int
)	O
)	O
{	O
if	O
(	O
!	O
dirflag	int
)	O
continue	O
;	O
}	O
else	O
{	O
if	O
(	O
dirflag	int
)	O
continue	O
;	O
}	O
c	int
=	O
regexp_match	(*(char),*(char),int)->(int)
(	O
reg_exp_t	*(char)
,	O
current_panel	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),struct(*(struct(int,*`,struct`,struct`)),int),int,int,array(char),array(char),*(struct(*(void),*(struct`),*(struct`))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char)))
->	O
dir	*(struct)
.	O
list	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
[	O
i	array(int)
]	O
.	O
fname	*(char)
,	O
match_file	int
)	O
;	O
if	O
(	O
c	int
==	O
-	O
1	int
)	O
{	O
message	*(char)
(	O
1	int
,	O
MSG_ERROR	O
,	O
_	O
(	O
"  Malformed regular expression  "	*(char)
)	O
)	O
;	O
g_free	(*(void))->(void)
(	O
reg_exp	*(char)
)	O
;	O
return	O
;	O
}	O
if	O
(	O
c	int
)	O
{	O
do_file_mark	(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),struct(*(struct`),int),int,int,array(char),array(char),*(struct(*`,*`,*`)),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*`,*`)->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char))),int,int)->(void)
(	O
current_panel	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),struct(*(struct(int,*`,struct`,struct`)),int),int,int,array(char),array(char),*(struct(*(void),*(struct`),*(struct`))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char)))
,	O
i	array(int)
,	O
cmd	*(char)
)	O
;	O
}	O
}	O
g_free	(*(void))->(void)
(	O
reg_exp	*(char)
)	O
;	O
}	O
void	O
select_cmd	()->(void)
(	O
void	O
)	O
{	O
select_unselect_cmd	(*(char),int)->(void)
(	O
_	O
(	O
" Select "	*(char)
)	O
,	O
1	int
)	O
;	O
}	O
void	O
unselect_cmd	()->(void)
(	O
void	O
)	O
{	O
select_unselect_cmd	(*(char),int)->(void)
(	O
_	O
(	O
" Unselect "	*(char)
)	O
,	O
0	int
)	O
;	O
}	O
static	O
int	O
check_for_default	(*(char),*(char))->(int)
(	O
char	O
*	O
default_file	*(char)
,	O
char	O
*	O
file	*(char)
)	O
{	O
struct	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
s	*(char)
;	O
off_t	long
count	int
=	O
0	int
;	O
double	O
bytes	*(struct)
=	O
0	int
;	O
FileOpContext	struct(enum(int,int,int),double,long,long,int,long,double,int,int,long,int,int,*((*(char),*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))))->(int)),int,int,int,int,*(char),struct(*(struct),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),struct(int,*(int),*(int)),int,int,int,*(void))
*	O
ctx	*(struct(enum(int,int,int),double,long,long,int,long,double,int,int,long,int,int,*((*(char),*(struct`))->(int)),int,int,int,int,*(char),struct(*(struct),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),struct(int,*(int),*(int)),int,int,int,*(void)))
;	O
if	O
(	O
mc_stat	(*(char),*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))))->(int)
(	O
file	*(char)
,	O
&	O
s	*(char)
)	O
)	O
{	O
if	O
(	O
mc_stat	(*(char),*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))))->(int)
(	O
default_file	*(char)
,	O
&	O
s	*(char)
)	O
)	O
{	O
return	O
-	O
1	int
;	O
}	O
ctx	*(struct(enum(int,int,int),double,long,long,int,long,double,int,int,long,int,int,*((*(char),*(struct`))->(int)),int,int,int,int,*(char),struct(*(struct),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),struct(int,*(int),*(int)),int,int,int,*(void)))
=	O
file_op_context_new	(enum(int,int,int))->(*(struct(enum(int,int,int),double,long,long,int,long,double,int,int,long,int,int,*((*`,*`)->(int)),int,int,int,int,*(char),struct(*(struct`),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),struct(int,*(int),*(int)),int,int,int,*(void))))
(	O
OP_COPY	int
)	O
;	O
file_op_context_create_ui	(*(struct(enum(int,int,int),double,long,long,int,long,double,int,int,long,int,int,*((*`,*`)->(int)),int,int,int,int,*(char),struct(*(struct`),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),struct(int,*(int),*(int)),int,int,int,*(void))),int)->(void)
(	O
ctx	*(struct(enum(int,int,int),double,long,long,int,long,double,int,int,long,int,int,*((*(char),*(struct`))->(int)),int,int,int,int,*(char),struct(*(struct),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),struct(int,*(int),*(int)),int,int,int,*(void)))
,	O
0	int
)	O
;	O
copy_file_file	(*(struct(enum(int,int,int),double,long,long,int,long,double,int,int,long,int,int,*((*`,*`)->(int)),int,int,int,int,*(char),struct(*(struct`),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),struct(int,*(int),*(int)),int,int,int,*(void))),*(char),*(char),int,*(long),*(double),int)->(int)
(	O
ctx	*(struct(enum(int,int,int),double,long,long,int,long,double,int,int,long,int,int,*((*(char),*(struct`))->(int)),int,int,int,int,*(char),struct(*(struct),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),struct(int,*(int),*(int)),int,int,int,*(void)))
,	O
default_file	*(char)
,	O
file	*(char)
,	O
1	int
,	O
&	O
count	int
,	O
&	O
bytes	*(struct)
,	O
1	int
)	O
;	O
file_op_context_destroy	(*(struct(enum(int,int,int),double,long,long,int,long,double,int,int,long,int,int,*((*`,*`)->(int)),int,int,int,int,*(char),struct(*(struct`),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),struct(int,*(int),*(int)),int,int,int,*(void))))->(void)
(	O
ctx	*(struct(enum(int,int,int),double,long,long,int,long,double,int,int,long,int,int,*((*(char),*(struct`))->(int)),int,int,int,int,*(char),struct(*(struct),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),struct(int,*(int),*(int)),int,int,int,*(void)))
)	O
;	O
}	O
return	O
0	int
;	O
}	O
void	O
ext_cmd	()->(void)
(	O
void	O
)	O
{	O
char	O
*	O
buffer	*(char)
;	O
char	O
*	O
extdir	*(char)
;	O
int	O
dir	*(struct)
;	O
dir	*(struct)
=	O
0	int
;	O
if	O
(	O
geteuid	()->(int)
(	O
)	O
==	O
0	int
)	O
{	O
dir	*(struct)
=	O
query_dialog	(*(char),*(char),int,int)->(int)
(	O
_	O
(	O
"Extension file edit"	*(char)
)	O
,	O
_	O
(	O
" Which extension file you want to edit? "	*(char)
)	O
,	O
0	int
,	O
2	int
,	O
_	O
(	O
"&User"	*(char)
)	O
,	O
_	O
(	O
"&System Wide"	*(char)
)	O
)	O
;	O
}	O
extdir	*(char)
=	O
concat_dir_and_file	(*(char),*(char))->(*(char))
(	O
mc_home	*(char)
,	O
MC_LIB_EXT	*(char)
)	O
;	O
if	O
(	O
dir	*(struct)
==	O
0	int
)	O
{	O
buffer	*(char)
=	O
concat_dir_and_file	(*(char),*(char))->(*(char))
(	O
home_dir	*(char)
,	O
MC_USER_EXT	*(char)
)	O
;	O
check_for_default	(*(char),*(char))->(int)
(	O
extdir	*(char)
,	O
buffer	*(char)
)	O
;	O
do_edit	(*(char))->(void)
(	O
buffer	*(char)
)	O
;	O
g_free	(*(void))->(void)
(	O
buffer	*(char)
)	O
;	O
}	O
else	O
if	O
(	O
dir	*(struct)
==	O
1	int
)	O
do_edit	(*(char))->(void)
(	O
extdir	*(char)
)	O
;	O
g_free	(*(void))->(void)
(	O
extdir	*(char)
)	O
;	O
flush_extension_file	()->(void)
(	O
)	O
;	O
}	O
static	O
void	O
menu_edit_cmd	(int)->(void)
(	O
int	O
where	int
)	O
{	O
char	O
*	O
buffer	*(char)
;	O
char	O
*	O
menufile	*(char)
;	O
int	O
dir	*(struct)
=	O
0	int
;	O
dir	*(struct)
=	O
query_dialog	(*(char),*(char),int,int)->(int)
(	O
_	O
(	O
" Menu edit "	*(char)
)	O
,	O
_	O
(	O
" Which menu file do you want to edit? "	*(char)
)	O
,	O
0	int
,	O
geteuid	()->(int)
(	O
)	O
?	O
2	int
:	O
3	int
,	O
_	O
(	O
"&Local"	*(char)
)	O
,	O
_	O
(	O
"&Home"	*(char)
)	O
,	O
_	O
(	O
"&System Wide"	*(char)
)	O
)	O
;	O
menufile	*(char)
=	O
concat_dir_and_file	(*(char),*(char))->(*(char))
(	O
mc_home	*(char)
,	O
where	int
?	O
CEDIT_GLOBAL_MENU	*(char)
:	O
MC_GLOBAL_MENU	*(char)
)	O
;	O
switch	O
(	O
dir	*(struct)
)	O
{	O
case	O
0	int
:	O
buffer	*(char)
=	O
g_strdup	(*(char))->(*(char))
(	O
where	int
?	O
CEDIT_LOCAL_MENU	*(char)
:	O
MC_LOCAL_MENU	*(char)
)	O
;	O
check_for_default	(*(char),*(char))->(int)
(	O
menufile	*(char)
,	O
buffer	*(char)
)	O
;	O
break	O
;	O
case	O
1	int
:	O
buffer	*(char)
=	O
concat_dir_and_file	(*(char),*(char))->(*(char))
(	O
home_dir	*(char)
,	O
where	int
?	O
CEDIT_HOME_MENU	*(char)
:	O
MC_HOME_MENU	*(char)
)	O
;	O
check_for_default	(*(char),*(char))->(int)
(	O
menufile	*(char)
,	O
buffer	*(char)
)	O
;	O
break	O
;	O
case	O
2	int
:	O
buffer	*(char)
=	O
concat_dir_and_file	(*(char),*(char))->(*(char))
(	O
mc_home	*(char)
,	O
where	int
?	O
CEDIT_GLOBAL_MENU	*(char)
:	O
MC_GLOBAL_MENU	*(char)
)	O
;	O
break	O
;	O
default	O
:	O
g_free	(*(void))->(void)
(	O
menufile	*(char)
)	O
;	O
return	O
;	O
}	O
do_edit	(*(char))->(void)
(	O
buffer	*(char)
)	O
;	O
if	O
(	O
dir	*(struct)
==	O
0	int
)	O
chmod	(*(char),int)->(int)
(	O
buffer	*(char)
,	O
0600	int
)	O
;	O
g_free	(*(void))->(void)
(	O
buffer	*(char)
)	O
;	O
g_free	(*(void))->(void)
(	O
menufile	*(char)
)	O
;	O
}	O
void	O
quick_chdir_cmd	()->(void)
(	O
void	O
)	O
{	O
char	O
*	O
target	*(void)
;	O
target	*(void)
=	O
hotlist_cmd	(int)->(*(char))
(	O
LIST_HOTLIST	int
)	O
;	O
if	O
(	O
!	O
target	*(void)
)	O
return	O
;	O
if	O
(	O
get_current_type	()->(int)
(	O
)	O
==	O
view_tree	int
)	O
tree_chdir	(*(struct),*(char))->(void)
(	O
the_tree	*(struct)
,	O
target	*(void)
)	O
;	O
else	O
if	O
(	O
!	O
do_cd	(*(char),enum(int,int))->(int)
(	O
target	*(void)
,	O
cd_exact	int
)	O
)	O
message	*(char)
(	O
1	int
,	O
MSG_ERROR	O
,	O
_	O
(	O
"Cannot change directory"	*(char)
)	O
)	O
;	O
g_free	(*(void))->(void)
(	O
target	*(void)
)	O
;	O
}	O
void	O
edit_mc_menu_cmd	()->(void)
(	O
void	O
)	O
{	O
menu_edit_cmd	(int)->(void)
(	O
0	int
)	O
;	O
}	O
void	O
edit_user_menu_cmd	()->(void)
(	O
void	O
)	O
{	O
menu_edit_cmd	(int)->(void)
(	O
1	int
)	O
;	O
}	O
void	O
edit_syntax_cmd	()->(void)
(	O
void	O
)	O
{	O
char	O
*	O
buffer	*(char)
;	O
char	O
*	O
extdir	*(char)
;	O
int	O
dir	*(struct)
=	O
0	int
;	O
if	O
(	O
geteuid	()->(int)
(	O
)	O
==	O
0	int
)	O
{	O
dir	*(struct)
=	O
query_dialog	(*(char),*(char),int,int)->(int)
(	O
_	O
(	O
"Syntax file edit"	*(char)
)	O
,	O
_	O
(	O
" Which syntax file you want to edit? "	*(char)
)	O
,	O
0	int
,	O
2	int
,	O
_	O
(	O
"&User"	*(char)
)	O
,	O
_	O
(	O
"&System Wide"	*(char)
)	O
)	O
;	O
}	O
extdir	*(char)
=	O
concat_dir_and_file	(*(char),*(char))->(*(char))
(	O
mc_home	*(char)
,	O
"syntax"	*(char)
PATH_SEP_STR	*(char)
"Syntax"	*(char)
)	O
;	O
if	O
(	O
dir	*(struct)
==	O
0	int
)	O
{	O
buffer	*(char)
=	O
concat_dir_and_file	(*(char),*(char))->(*(char))
(	O
home_dir	*(char)
,	O
SYNTAX_FILE	O
)	O
;	O
check_for_default	(*(char),*(char))->(int)
(	O
extdir	*(char)
,	O
buffer	*(char)
)	O
;	O
do_edit	(*(char))->(void)
(	O
buffer	*(char)
)	O
;	O
g_free	(*(void))->(void)
(	O
buffer	*(char)
)	O
;	O
}	O
else	O
if	O
(	O
dir	*(struct)
==	O
1	int
)	O
do_edit	(*(char))->(void)
(	O
extdir	*(char)
)	O
;	O
g_free	(*(void))->(void)
(	O
extdir	*(char)
)	O
;	O
}	O
void	O
reselect_vfs	()->(void)
(	O
void	O
)	O
{	O
char	O
*	O
target	*(void)
;	O
target	*(void)
=	O
hotlist_cmd	(int)->(*(char))
(	O
LIST_VFSLIST	int
)	O
;	O
if	O
(	O
!	O
target	*(void)
)	O
return	O
;	O
if	O
(	O
!	O
do_cd	(*(char),enum(int,int))->(int)
(	O
target	*(void)
,	O
cd_exact	int
)	O
)	O
message	*(char)
(	O
1	int
,	O
MSG_ERROR	O
,	O
_	O
(	O
"Cannot change directory"	*(char)
)	O
)	O
;	O
g_free	(*(void))->(void)
(	O
target	*(void)
)	O
;	O
}	O
static	O
int	O
compare_files	(*(char),*(char),long)->(int)
(	O
char	O
*	O
name1	*(char)
,	O
char	O
*	O
name2	*(char)
,	O
off_t	long
size	long
)	O
{	O
int	O
file1	int
,	O
file2	int
;	O
int	O
result	long
=	O
-	O
1	int
;	O
file1	int
=	O
open	(*(char),int)->(int)
(	O
name1	*(char)
,	O
O_RDONLY	int
)	O
;	O
if	O
(	O
file1	int
>=	O
0	int
)	O
{	O
file2	int
=	O
open	(*(char),int)->(int)
(	O
name2	*(char)
,	O
O_RDONLY	int
)	O
;	O
if	O
(	O
file2	int
>=	O
0	int
)	O
{	O
char	O
*	O
data1	*(char)
,	O
*	O
data2	*(char)
;	O
data1	*(char)
=	O
mmap	(*(void),long,int,int,int,long)->(*(void))
(	O
0	int
,	O
size	long
,	O
PROT_READ	int
,	O
MAP_FILE	int
|	O
MAP_PRIVATE	int
,	O
file1	int
,	O
0	int
)	O
;	O
if	O
(	O
data1	*(char)
!=	O
(	O
char	O
*	O
)	O
-	O
1	int
)	O
{	O
data2	*(char)
=	O
mmap	(*(void),long,int,int,int,long)->(*(void))
(	O
0	int
,	O
size	long
,	O
PROT_READ	int
,	O
MAP_FILE	int
|	O
MAP_PRIVATE	int
,	O
file2	int
,	O
0	int
)	O
;	O
if	O
(	O
data2	*(char)
!=	O
(	O
char	O
*	O
)	O
-	O
1	int
)	O
{	O
rotate_dash	()->(void)
(	O
)	O
;	O
result	long
=	O
memcmp	(*(void),*(void),long)->(int)
(	O
data1	*(char)
,	O
data2	*(char)
,	O
size	long
)	O
;	O
munmap	(*(void),long)->(int)
(	O
data2	*(char)
,	O
size	long
)	O
;	O
}	O
munmap	(*(void),long)->(int)
(	O
data1	*(char)
,	O
size	long
)	O
;	O
}	O
close	*((*(void))->(int))
(	O
file2	int
)	O
;	O
}	O
close	*((*(void))->(int))
(	O
file1	int
)	O
;	O
}	O
return	O
result	long
;	O
}	O
enum	O
CompareMode	enum(int,int,int)
{	O
compare_quick	int
,	O
compare_size_only	int
,	O
compare_thourough	int
}	O
;	O
static	O
void	O
compare_dir	(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),struct(*(struct`),int),int,int,array(char),array(char),*(struct(*`,*`,*`)),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*`,*`)->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char))),*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),struct(*(struct`),int),int,int,array(char),array(char),*(struct(*`,*`,*`)),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*`,*`)->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char))),enum(int,int,int))->(void)
(	O
WPanel	struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))),*(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))),*((*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*(struct(int,int,int,enum(int,int,int,int,int,int,int,int,int))),*(void))->(int)),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))))),struct(*(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),struct(int,int,int,int))),int),int,int,array(char),array(char),*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`))))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char))
*	O
panel	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),struct(*(struct(int,*`,struct`,struct`)),int),int,int,array(char),array(char),*(struct(*(void),*(struct`),*(struct`))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char)))
,	O
WPanel	struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))),*(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))),*((*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*(struct(int,int,int,enum(int,int,int,int,int,int,int,int,int))),*(void))->(int)),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))))),struct(*(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),struct(int,int,int,int))),int),int,int,array(char),array(char),*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`))))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char))
*	O
other	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),struct(*(struct(int,*`,struct`,struct`)),int),int,int,array(char),array(char),*(struct(*(void),*(struct`),*(struct`))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char)))
,	O
enum	O
CompareMode	enum(int,int,int)
mode	int
)	O
{	O
int	O
i	array(int)
,	O
j	int
;	O
char	O
*	O
src_name	*(char)
,	O
*	O
dst_name	*(char)
;	O
panel	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),struct(*(struct(int,*`,struct`,struct`)),int),int,int,array(char),array(char),*(struct(*(void),*(struct`),*(struct`))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char)))
->	O
marked	int
=	O
0	int
;	O
panel	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),struct(*(struct(int,*`,struct`,struct`)),int),int,int,array(char),array(char),*(struct(*(void),*(struct`),*(struct`))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char)))
->	O
total	long
=	O
0	int
;	O
panel	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),struct(*(struct(int,*`,struct`,struct`)),int),int,int,array(char),array(char),*(struct(*(void),*(struct`),*(struct`))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char)))
->	O
dirs_marked	int
=	O
0	int
;	O
for	O
(	O
i	array(int)
=	O
0	int
;	O
i	array(int)
<	O
panel	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),struct(*(struct(int,*`,struct`,struct`)),int),int,int,array(char),array(char),*(struct(*(void),*(struct`),*(struct`))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char)))
->	O
count	int
;	O
i	array(int)
++	O
)	O
{	O
file_entry	struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),struct(int,int,int,int))
*	O
source	*(struct)
=	O
&	O
panel	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),struct(*(struct(int,*`,struct`,struct`)),int),int,int,array(char),array(char),*(struct(*(void),*(struct`),*(struct`))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char)))
->	O
dir	*(struct)
.	O
list	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
[	O
i	array(int)
]	O
;	O
file_mark	(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),struct(*(struct`),int),int,int,array(char),array(char),*(struct(*`,*`,*`)),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*`,*`)->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char))),int,int)->(void)
(	O
panel	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),struct(*(struct(int,*`,struct`,struct`)),int),int,int,array(char),array(char),*(struct(*(void),*(struct`),*(struct`))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char)))
,	O
i	array(int)
,	O
0	int
)	O
;	O
if	O
(	O
S_ISDIR	O
(	O
source	*(struct)
->	O
st	*(struct)
.	O
st_mode	int
)	O
)	O
continue	O
;	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<	O
other	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),struct(*(struct(int,*`,struct`,struct`)),int),int,int,array(char),array(char),*(struct(*(void),*(struct`),*(struct`))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char)))
->	O
count	int
;	O
j	int
++	O
)	O
{	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
source	*(struct)
->	O
fname	*(char)
,	O
other	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),struct(*(struct(int,*`,struct`,struct`)),int),int,int,array(char),array(char),*(struct(*(void),*(struct`),*(struct`))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char)))
->	O
dir	*(struct)
.	O
list	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
[	O
j	int
]	O
.	O
fname	*(char)
)	O
==	O
0	int
)	O
break	O
;	O
}	O
if	O
(	O
j	int
>=	O
other	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),struct(*(struct(int,*`,struct`,struct`)),int),int,int,array(char),array(char),*(struct(*(void),*(struct`),*(struct`))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char)))
->	O
count	int
)	O
do_file_mark	(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),struct(*(struct`),int),int,int,array(char),array(char),*(struct(*`,*`,*`)),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*`,*`)->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char))),int,int)->(void)
(	O
panel	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),struct(*(struct(int,*`,struct`,struct`)),int),int,int,array(char),array(char),*(struct(*(void),*(struct`),*(struct`))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char)))
,	O
i	array(int)
,	O
1	int
)	O
;	O
else	O
{	O
file_entry	struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),struct(int,int,int,int))
*	O
target	*(void)
=	O
&	O
other	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),struct(*(struct(int,*`,struct`,struct`)),int),int,int,array(char),array(char),*(struct(*(void),*(struct`),*(struct`))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char)))
->	O
dir	*(struct)
.	O
list	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
[	O
j	int
]	O
;	O
if	O
(	O
mode	int
!=	O
compare_size_only	int
)	O
{	O
if	O
(	O
source	*(struct)
->	O
st	*(struct)
.	O
st_mtime	O
<	O
target	*(void)
->	O
st	*(struct)
.	O
st_mtime	O
)	O
continue	O
;	O
}	O
if	O
(	O
source	*(struct)
->	O
st	*(struct)
.	O
st_size	long
!=	O
target	*(void)
->	O
st	*(struct)
.	O
st_size	long
)	O
{	O
do_file_mark	(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),struct(*(struct`),int),int,int,array(char),array(char),*(struct(*`,*`,*`)),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*`,*`)->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char))),int,int)->(void)
(	O
panel	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),struct(*(struct(int,*`,struct`,struct`)),int),int,int,array(char),array(char),*(struct(*(void),*(struct`),*(struct`))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char)))
,	O
i	array(int)
,	O
1	int
)	O
;	O
continue	O
;	O
}	O
if	O
(	O
mode	int
==	O
compare_size_only	int
)	O
continue	O
;	O
if	O
(	O
mode	int
==	O
compare_quick	int
)	O
{	O
if	O
(	O
source	*(struct)
->	O
st	*(struct)
.	O
st_mtime	O
>	O
target	*(void)
->	O
st	*(struct)
.	O
st_mtime	O
)	O
{	O
do_file_mark	(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),struct(*(struct`),int),int,int,array(char),array(char),*(struct(*`,*`,*`)),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*`,*`)->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char))),int,int)->(void)
(	O
panel	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),struct(*(struct(int,*`,struct`,struct`)),int),int,int,array(char),array(char),*(struct(*(void),*(struct`),*(struct`))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char)))
,	O
i	array(int)
,	O
1	int
)	O
;	O
}	O
continue	O
;	O
}	O
src_name	*(char)
=	O
concat_dir_and_file	(*(char),*(char))->(*(char))
(	O
panel	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),struct(*(struct(int,*`,struct`,struct`)),int),int,int,array(char),array(char),*(struct(*(void),*(struct`),*(struct`))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char)))
->	O
cwd	short
,	O
source	*(struct)
->	O
fname	*(char)
)	O
;	O
dst_name	*(char)
=	O
concat_dir_and_file	(*(char),*(char))->(*(char))
(	O
other	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),struct(*(struct(int,*`,struct`,struct`)),int),int,int,array(char),array(char),*(struct(*(void),*(struct`),*(struct`))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char)))
->	O
cwd	short
,	O
target	*(void)
->	O
fname	*(char)
)	O
;	O
if	O
(	O
compare_files	(*(char),*(char),long)->(int)
(	O
src_name	*(char)
,	O
dst_name	*(char)
,	O
source	*(struct)
->	O
st	*(struct)
.	O
st_size	long
)	O
)	O
do_file_mark	(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),struct(*(struct`),int),int,int,array(char),array(char),*(struct(*`,*`,*`)),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*`,*`)->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char))),int,int)->(void)
(	O
panel	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),struct(*(struct(int,*`,struct`,struct`)),int),int,int,array(char),array(char),*(struct(*(void),*(struct`),*(struct`))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char)))
,	O
i	array(int)
,	O
1	int
)	O
;	O
g_free	(*(void))->(void)
(	O
src_name	*(char)
)	O
;	O
g_free	(*(void))->(void)
(	O
dst_name	*(char)
)	O
;	O
}	O
}	O
}	O
void	O
compare_dirs_cmd	()->(void)
(	O
void	O
)	O
{	O
int	O
choice	int
;	O
enum	O
CompareMode	enum(int,int,int)
thorough_flag	enum(int,int,int)
;	O
choice	int
=	O
query_dialog	(*(char),*(char),int,int)->(int)
(	O
_	O
(	O
" Compare directories "	*(char)
)	O
,	O
_	O
(	O
" Select compare method: "	*(char)
)	O
,	O
0	int
,	O
3	int
,	O
_	O
(	O
"&Quick"	*(char)
)	O
,	O
_	O
(	O
"&Size only"	*(char)
)	O
,	O
_	O
(	O
"&Thorough"	*(char)
)	O
,	O
_	O
(	O
"&Cancel"	*(char)
)	O
)	O
;	O
if	O
(	O
choice	int
<	O
0	int
||	O
choice	int
>	O
2	int
)	O
return	O
;	O
else	O
thorough_flag	enum(int,int,int)
=	O
choice	int
;	O
if	O
(	O
get_current_type	()->(int)
(	O
)	O
==	O
view_listing	int
&&	O
get_other_type	()->(int)
(	O
)	O
==	O
view_listing	int
)	O
{	O
compare_dir	(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),struct(*(struct`),int),int,int,array(char),array(char),*(struct(*`,*`,*`)),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*`,*`)->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char))),*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),struct(*(struct`),int),int,int,array(char),array(char),*(struct(*`,*`,*`)),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*`,*`)->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char))),enum(int,int,int))->(void)
(	O
current_panel	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),struct(*(struct(int,*`,struct`,struct`)),int),int,int,array(char),array(char),*(struct(*(void),*(struct`),*(struct`))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char)))
,	O
other_panel	O
,	O
thorough_flag	enum(int,int,int)
)	O
;	O
compare_dir	(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),struct(*(struct`),int),int,int,array(char),array(char),*(struct(*`,*`,*`)),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*`,*`)->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char))),*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),struct(*(struct`),int),int,int,array(char),array(char),*(struct(*`,*`,*`)),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*`,*`)->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char))),enum(int,int,int))->(void)
(	O
other_panel	O
,	O
current_panel	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),struct(*(struct(int,*`,struct`,struct`)),int),int,int,array(char),array(char),*(struct(*(void),*(struct`),*(struct`))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char)))
,	O
thorough_flag	enum(int,int,int)
)	O
;	O
}	O
else	O
{	O
message	*(char)
(	O
1	int
,	O
MSG_ERROR	O
,	O
_	O
(	O
" Both panels should be in the "	*(char)
"listing mode to use this command "	*(char)
)	O
)	O
;	O
}	O
}	O
void	O
history_cmd	()->(void)
(	O
void	O
)	O
{	O
Listbox	struct(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))),*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),*(struct(*`,int,*`,*`,*`)),*(struct(*`,int,*`,*`,*`)),*(struct(*`,int,*`,*`,*`)),int,int,int,int,int,int,*((*`)->(int)),int,int)))
*	O
listbox	*(struct(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`))),*(struct(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`),*(struct`),*(struct`),*(struct`),int,int,int,int,int,int,*((*`)->(int)),int,int))))
;	O
GList	struct
*	O
current	*(struct)
;	O
if	O
(	O
cmdline	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,int,int,int,int,int,int,int,int,*(char),*(struct(*(void),*(struct`),*(struct`))),int,*(*(char)),int,*(char)))
->	O
need_push	int
)	O
{	O
if	O
(	O
push_history	(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),int,int,int,int,int,int,int,int,int,*(char),*(struct(*`,*`,*`)),int,*(*(char)),int,*(char))),*(char))->(int)
(	O
cmdline	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,int,int,int,int,int,int,int,int,*(char),*(struct(*(void),*(struct`),*(struct`))),int,*(*(char)),int,*(char)))
,	O
cmdline	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,int,int,int,int,int,int,int,int,*(char),*(struct(*(void),*(struct`),*(struct`))),int,*(*(char)),int,*(char)))
->	O
buffer	*(char)
)	O
==	O
2	int
)	O
cmdline	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,int,int,int,int,int,int,int,int,*(char),*(struct(*(void),*(struct`),*(struct`))),int,*(*(char)),int,*(char)))
->	O
need_push	int
=	O
0	int
;	O
}	O
if	O
(	O
!	O
cmdline	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,int,int,int,int,int,int,int,int,*(char),*(struct(*(void),*(struct`),*(struct`))),int,*(*(char)),int,*(char)))
->	O
history	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
)	O
{	O
message	*(char)
(	O
1	int
,	O
MSG_ERROR	O
,	O
_	O
(	O
" The command history is empty "	*(char)
)	O
)	O
;	O
return	O
;	O
}	O
current	*(struct)
=	O
g_list_first	(*(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`)))))->(*(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`)))))
(	O
cmdline	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,int,int,int,int,int,int,int,int,*(char),*(struct(*(void),*(struct`),*(struct`))),int,*(*(char)),int,*(char)))
->	O
history	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
)	O
;	O
listbox	*(struct(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`))),*(struct(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`),*(struct`),*(struct`),*(struct`),int,int,int,int,int,int,*((*`)->(int)),int,int))))
=	O
create_listbox_window	(int,int,*(char),*(char))->(*(struct(*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)),*(struct(struct`,*`,*`,*`,int,int,int,int,int,int,*`,int,int)))))
(	O
60	int
,	O
10	int
,	O
_	O
(	O
" Command history "	*(char)
)	O
,	O
"[Command Menu]"	*(char)
)	O
;	O
while	O
(	O
current	*(struct)
)	O
{	O
LISTBOX_APPEND_TEXT	O
(	O
listbox	*(struct(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`))),*(struct(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`),*(struct`),*(struct`),*(struct`),int,int,int,int,int,int,*((*`)->(int)),int,int))))
,	O
0	int
,	O
(	O
char	O
*	O
)	O
current	*(struct)
->	O
data	*(void)
,	O
current	*(struct)
)	O
;	O
current	*(struct)
=	O
g_list_next	O
(	O
current	*(struct)
)	O
;	O
}	O
run_dlg	(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))))->(int)
(	O
listbox	*(struct(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`))),*(struct(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`),*(struct`),*(struct`),*(struct`),int,int,int,int,int,int,*((*`)->(int)),int,int))))
->	O
dlg	*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
)	O
;	O
if	O
(	O
listbox	*(struct(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`))),*(struct(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`),*(struct`),*(struct`),*(struct`),int,int,int,int,int,int,*((*`)->(int)),int,int))))
->	O
dlg	*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
->	O
ret_value	int
==	O
B_CANCEL	int
)	O
current	*(struct)
=	O
NULL	O
;	O
else	O
current	*(struct)
=	O
listbox	*(struct(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`))),*(struct(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`),*(struct`),*(struct`),*(struct`),int,int,int,int,int,int,*((*`)->(int)),int,int))))
->	O
list	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
->	O
current	*(struct)
->	O
data	*(void)
;	O
destroy_dlg	(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))))->(void)
(	O
listbox	*(struct(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`))),*(struct(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`),*(struct`),*(struct`),*(struct`),int,int,int,int,int,int,*((*`)->(int)),int,int))))
->	O
dlg	*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
)	O
;	O
g_free	(*(void))->(void)
(	O
listbox	*(struct(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`))),*(struct(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`),*(struct`),*(struct`),*(struct`),int,int,int,int,int,int,*((*`)->(int)),int,int))))
)	O
;	O
if	O
(	O
!	O
current	*(struct)
)	O
return	O
;	O
cmdline	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,int,int,int,int,int,int,int,int,*(char),*(struct(*(void),*(struct`),*(struct`))),int,*(*(char)),int,*(char)))
->	O
history	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
=	O
current	*(struct)
;	O
assign_text	(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),int,int,int,int,int,int,int,int,int,*(char),*(struct(*`,*`,*`)),int,*(*(char)),int,*(char))),*(char))->(void)
(	O
cmdline	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,int,int,int,int,int,int,int,int,*(char),*(struct(*(void),*(struct`),*(struct`))),int,*(*(char)),int,*(char)))
,	O
(	O
char	O
*	O
)	O
current	*(struct)
->	O
data	*(void)
)	O
;	O
update_input	(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),int,int,int,int,int,int,int,int,int,*(char),*(struct(*`,*`,*`)),int,*(*(char)),int,*(char))),int)->(void)
(	O
cmdline	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,int,int,int,int,int,int,int,int,*(char),*(struct(*(void),*(struct`),*(struct`))),int,*(*(char)),int,*(char)))
,	O
1	int
)	O
;	O
}	O
void	O
swap_cmd	()->(void)
(	O
void	O
)	O
{	O
swap_panels	()->(void)
(	O
)	O
;	O
touchwin	O
(	O
stdscr	O
)	O
;	O
repaint_screen	()->(void)
(	O
)	O
;	O
}	O
void	O
view_other_cmd	()->(void)
(	O
void	O
)	O
{	O
static	O
int	O
message_flag	int
=	O
TRUE	O
;	O
if	O
(	O
!	O
xterm_flag	int
&&	O
!	O
console_flag	char
&&	O
!	O
use_subshell	int
&&	O
!	O
output_starts_shell	int
)	O
{	O
if	O
(	O
message_flag	int
)	O
message	*(char)
(	O
1	int
,	O
MSG_ERROR	O
,	O
_	O
(	O
" Not an xterm or Linux console; \n"	*(char)
" the panels cannot be toggled. "	*(char)
)	O
)	O
;	O
message_flag	int
=	O
FALSE	O
;	O
}	O
else	O
{	O
toggle_panels	()->(void)
(	O
)	O
;	O
}	O
}	O
static	O
void	O
do_link	(int,*(char))->(void)
(	O
int	O
symbolic_link	int
,	O
const	O
char	O
*	O
fname	*(char)
)	O
{	O
char	O
*	O
dest	*(int)
=	O
NULL	O
,	O
*	O
src	*(void)
=	O
NULL	O
;	O
if	O
(	O
!	O
symbolic_link	int
)	O
{	O
src	*(void)
=	O
g_strdup_printf	(*(char))->(*(char))
(	O
_	O
(	O
"Link %s to:"	*(char)
)	O
,	O
name_trunc	(*(char),int)->(*(char))
(	O
fname	*(char)
,	O
46	int
)	O
)	O
;	O
dest	*(int)
=	O
input_expand_dialog	(*(char),*(char),*(char))->(*(char))
(	O
_	O
(	O
" Link "	*(char)
)	O
,	O
src	*(void)
,	O
""	*(char)
)	O
;	O
if	O
(	O
!	O
dest	*(int)
||	O
!	O
*	O
dest	*(int)
)	O
goto	O
cleanup	O
;	O
save_cwds_stat	()->(void)
(	O
)	O
;	O
if	O
(	O
-	O
1	int
==	O
mc_link	(*(char),*(char))->(int)
(	O
fname	*(char)
,	O
dest	*(int)
)	O
)	O
message	*(char)
(	O
1	int
,	O
MSG_ERROR	O
,	O
_	O
(	O
" link: %s "	*(char)
)	O
,	O
unix_error_string	(int)->(*(char))
(	O
errno	O
)	O
)	O
;	O
}	O
else	O
{	O
char	O
*	O
s	*(char)
;	O
char	O
*	O
d	double
;	O
s	*(char)
=	O
concat_dir_and_file	(*(char),*(char))->(*(char))
(	O
current_panel	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),struct(*(struct(int,*`,struct`,struct`)),int),int,int,array(char),array(char),*(struct(*(void),*(struct`),*(struct`))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char)))
->	O
cwd	short
,	O
fname	*(char)
)	O
;	O
if	O
(	O
get_other_type	()->(int)
(	O
)	O
==	O
view_listing	int
)	O
{	O
d	double
=	O
concat_dir_and_file	(*(char),*(char))->(*(char))
(	O
other_panel	O
->	O
cwd	short
,	O
fname	*(char)
)	O
;	O
}	O
else	O
{	O
d	double
=	O
g_strdup	(*(char))->(*(char))
(	O
fname	*(char)
)	O
;	O
}	O
symlink_dialog	(*(char),*(char),*(*(char)),*(*(char)))->(void)
(	O
s	*(char)
,	O
d	double
,	O
&	O
dest	*(int)
,	O
&	O
src	*(void)
)	O
;	O
g_free	(*(void))->(void)
(	O
d	double
)	O
;	O
g_free	(*(void))->(void)
(	O
s	*(char)
)	O
;	O
if	O
(	O
!	O
dest	*(int)
||	O
!	O
*	O
dest	*(int)
||	O
!	O
src	*(void)
||	O
!	O
*	O
src	*(void)
)	O
goto	O
cleanup	O
;	O
save_cwds_stat	()->(void)
(	O
)	O
;	O
if	O
(	O
-	O
1	int
==	O
mc_symlink	(*(char),*(char))->(int)
(	O
dest	*(int)
,	O
src	*(void)
)	O
)	O
message	*(char)
(	O
1	int
,	O
MSG_ERROR	O
,	O
_	O
(	O
" symlink: %s "	*(char)
)	O
,	O
unix_error_string	(int)->(*(char))
(	O
errno	O
)	O
)	O
;	O
}	O
update_panels	(int,*(char))->(void)
(	O
UP_OPTIMIZE	int
,	O
UP_KEEPSEL	O
)	O
;	O
repaint_screen	()->(void)
(	O
)	O
;	O
cleanup	O
:	O
g_free	(*(void))->(void)
(	O
src	*(void)
)	O
;	O
g_free	(*(void))->(void)
(	O
dest	*(int)
)	O
;	O
}	O
void	O
link_cmd	()->(void)
(	O
void	O
)	O
{	O
do_link	(int,*(char))->(void)
(	O
0	int
,	O
selection	O
(	O
current_panel	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),struct(*(struct(int,*`,struct`,struct`)),int),int,int,array(char),array(char),*(struct(*(void),*(struct`),*(struct`))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char)))
)	O
->	O
fname	*(char)
)	O
;	O
}	O
void	O
symlink_cmd	()->(void)
(	O
void	O
)	O
{	O
char	O
*	O
filename	*(char)
=	O
NULL	O
;	O
filename	*(char)
=	O
selection	O
(	O
current_panel	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),struct(*(struct(int,*`,struct`,struct`)),int),int,int,array(char),array(char),*(struct(*(void),*(struct`),*(struct`))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char)))
)	O
->	O
fname	*(char)
;	O
if	O
(	O
filename	*(char)
)	O
{	O
do_link	(int,*(char))->(void)
(	O
1	int
,	O
filename	*(char)
)	O
;	O
}	O
}	O
void	O
edit_symlink_cmd	()->(void)
(	O
void	O
)	O
{	O
if	O
(	O
S_ISLNK	O
(	O
selection	O
(	O
current_panel	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),struct(*(struct(int,*`,struct`,struct`)),int),int,int,array(char),array(char),*(struct(*(void),*(struct`),*(struct`))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char)))
)	O
->	O
st	*(struct)
.	O
st_mode	int
)	O
)	O
{	O
char	O
buffer	*(char)
[	O
MC_MAXPATHLEN	O
]	O
;	O
char	O
*	O
p	*(void)
=	O
NULL	O
;	O
int	O
i	array(int)
;	O
char	O
*	O
dest	*(int)
,	O
*	O
q	*(char)
;	O
p	*(void)
=	O
selection	O
(	O
current_panel	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),struct(*(struct(int,*`,struct`,struct`)),int),int,int,array(char),array(char),*(struct(*(void),*(struct`),*(struct`))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char)))
)	O
->	O
fname	*(char)
;	O
q	*(char)
=	O
g_strdup_printf	(*(char))->(*(char))
(	O
_	O
(	O
" Symlink `%s\' points to: "	*(char)
)	O
,	O
name_trunc	(*(char),int)->(*(char))
(	O
p	*(void)
,	O
32	int
)	O
)	O
;	O
i	array(int)
=	O
readlink	(*(char),*(char),long)->(long)
(	O
p	*(void)
,	O
buffer	*(char)
,	O
MC_MAXPATHLEN	O
-	O
1	int
)	O
;	O
if	O
(	O
i	array(int)
>	O
0	int
)	O
{	O
buffer	*(char)
[	O
i	array(int)
]	O
=	O
0	int
;	O
dest	*(int)
=	O
input_expand_dialog	(*(char),*(char),*(char))->(*(char))
(	O
_	O
(	O
" Edit symlink "	*(char)
)	O
,	O
q	*(char)
,	O
buffer	*(char)
)	O
;	O
if	O
(	O
dest	*(int)
)	O
{	O
if	O
(	O
*	O
dest	*(int)
&&	O
strcmp	(*(char),*(char))->(int)
(	O
buffer	*(char)
,	O
dest	*(int)
)	O
)	O
{	O
save_cwds_stat	()->(void)
(	O
)	O
;	O
if	O
(	O
-	O
1	int
==	O
mc_unlink	(*(char))->(int)
(	O
p	*(void)
)	O
)	O
{	O
message	*(char)
(	O
1	int
,	O
MSG_ERROR	O
,	O
_	O
(	O
" edit symlink, unable to remove %s: %s "	*(char)
)	O
,	O
p	*(void)
,	O
unix_error_string	(int)->(*(char))
(	O
errno	O
)	O
)	O
;	O
}	O
else	O
{	O
if	O
(	O
-	O
1	int
==	O
mc_symlink	(*(char),*(char))->(int)
(	O
dest	*(int)
,	O
p	*(void)
)	O
)	O
message	*(char)
(	O
1	int
,	O
MSG_ERROR	O
,	O
_	O
(	O
" edit symlink: %s "	*(char)
)	O
,	O
unix_error_string	(int)->(*(char))
(	O
errno	O
)	O
)	O
;	O
}	O
update_panels	(int,*(char))->(void)
(	O
UP_OPTIMIZE	int
,	O
UP_KEEPSEL	O
)	O
;	O
repaint_screen	()->(void)
(	O
)	O
;	O
}	O
g_free	(*(void))->(void)
(	O
dest	*(int)
)	O
;	O
}	O
}	O
g_free	(*(void))->(void)
(	O
q	*(char)
)	O
;	O
}	O
else	O
{	O
message	*(char)
(	O
1	int
,	O
MSG_ERROR	O
,	O
_	O
(	O
"`%s' is not a symbolic link"	*(char)
)	O
,	O
selection	O
(	O
current_panel	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),struct(*(struct(int,*`,struct`,struct`)),int),int,int,array(char),array(char),*(struct(*(void),*(struct`),*(struct`))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char)))
)	O
->	O
fname	*(char)
)	O
;	O
}	O
}	O
void	O
help_cmd	()->(void)
(	O
void	O
)	O
{	O
interactive_display	(*(char),*(char))->(void)
(	O
NULL	O
,	O
"[main]"	*(char)
)	O
;	O
}	O
void	O
user_file_menu_cmd	()->(void)
(	O
void	O
)	O
{	O
user_menu_cmd	(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),int,int,*(char),*(char),long,long,array(*(char)),array(*(char)),long,int,long,long,long,long,long,long,long,int,int,int,int,int,int,int,int,long,long,long,long,long,long,int,int,long,int,array(int),array(long),*(struct(int,int,*`,*`)),long,*(long),long,long,long,int,struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,*(struct),*(*(struct`)),long,struct(short,char,char,char,char),*(char),*(struct),int,int,array(struct(short,short)),*(struct(long,long)),*(struct(long,long)),int,array(*(char)))))->(void)
(	O
NULL	O
)	O
;	O
}	O
char	O
*	O
guess_message_value	()->(*(char))
(	O
void	O
)	O
{	O
static	O
const	O
char	O
*	O
const	O
var	array(*(char))
[	O
]	O
=	O
{	O
"LANGUAGE"	*(char)
,	O
"LC_ALL"	*(char)
,	O
"LC_MESSAGES"	*(char)
,	O
"LANG"	*(char)
,	O
NULL	O
}	O
;	O
unsigned	O
i	array(int)
=	O
0	int
;	O
const	O
char	O
*	O
locale	*(char)
=	O
NULL	O
;	O
while	O
(	O
var	array(*(char))
[	O
i	array(int)
]	O
!=	O
NULL	O
)	O
{	O
locale	*(char)
=	O
getenv	(*(char))->(*(char))
(	O
var	array(*(char))
[	O
i	array(int)
]	O
)	O
;	O
if	O
(	O
locale	*(char)
!=	O
NULL	O
&&	O
locale	*(char)
[	O
0	int
]	O
!=	O
'\0'	O
)	O
break	O
;	O
i	array(int)
++	O
;	O
}	O
if	O
(	O
locale	*(char)
==	O
NULL	O
)	O
locale	*(char)
=	O
""	*(char)
;	O
return	O
g_strdup	(*(char))->(*(char))
(	O
locale	*(char)
)	O
;	O
}	O
char	O
*	O
get_random_hint	(int)->(*(char))
(	O
int	O
force	int
)	O
{	O
char	O
*	O
data	*(void)
,	O
*	O
result	long
,	O
*	O
eol	*(char)
;	O
int	O
len	int
;	O
int	O
start	*(int)
;	O
static	O
int	O
last_sec	int
;	O
static	O
struct	O
timeval	struct(long,long)
tv	*(struct(long,long))
;	O
gettimeofday	(*(struct(long,long)),*(void))->(int)
(	O
&	O
tv	*(struct(long,long))
,	O
NULL	O
)	O
;	O
if	O
(	O
!	O
force	int
&&	O
!	O
(	O
tv	*(struct(long,long))
.	O
tv_sec	long
>	O
last_sec	int
+	O
60	int
)	O
)	O
return	O
g_strdup	(*(char))->(*(char))
(	O
""	*(char)
)	O
;	O
last_sec	int
=	O
tv	*(struct(long,long))
.	O
tv_sec	long
;	O
data	*(void)
=	O
load_mc_home_file	(*(char),*(*(char)))->(*(char))
(	O
MC_HINT	*(char)
,	O
NULL	O
)	O
;	O
if	O
(	O
!	O
data	*(void)
)	O
return	O
0	int
;	O
srand	(int)->(void)
(	O
tv	*(struct(long,long))
.	O
tv_sec	long
)	O
;	O
len	int
=	O
strlen	(*(char))->(long)
(	O
data	*(void)
)	O
;	O
start	*(int)
=	O
rand	()->(int)
(	O
)	O
%	O
len	int
;	O
for	O
(	O
;	O
start	*(int)
;	O
start	*(int)
--	O
)	O
{	O
if	O
(	O
data	*(void)
[	O
start	*(int)
]	O
==	O
'\n'	O
)	O
{	O
start	*(int)
++	O
;	O
break	O
;	O
}	O
}	O
eol	*(char)
=	O
strchr	(*(char),int)->(*(char))
(	O
&	O
data	*(void)
[	O
start	*(int)
]	O
,	O
'\n'	O
)	O
;	O
if	O
(	O
eol	*(char)
)	O
*	O
eol	*(char)
=	O
0	int
;	O
result	long
=	O
g_strdup	(*(char))->(*(char))
(	O
&	O
data	*(void)
[	O
start	*(int)
]	O
)	O
;	O
g_free	(*(void))->(void)
(	O
data	*(void)
)	O
;	O
return	O
result	long
;	O
}	O
static	O
void	O
nice_cd	(*(char),*(char),*(char),*(char),int)->(void)
(	O
const	O
char	O
*	O
text	*(char)
,	O
const	O
char	O
*	O
xtext	*(char)
,	O
const	O
char	O
*	O
help	*(char)
,	O
const	O
char	O
*	O
prefix	*(char)
,	O
int	O
to_home	int
)	O
{	O
char	O
*	O
machine	*(char)
;	O
char	O
*	O
cd_path	*(char)
;	O
if	O
(	O
!	O
SELECTED_IS_PANEL	O
)	O
return	O
;	O
machine	*(char)
=	O
input_dialog_help	(*(char),*(char),*(char),*(char))->(*(char))
(	O
text	*(char)
,	O
xtext	*(char)
,	O
help	*(char)
,	O
""	*(char)
)	O
;	O
if	O
(	O
!	O
machine	*(char)
)	O
return	O
;	O
to_home	int
=	O
0	int
;	O
if	O
(	O
strncmp	(*(char),*(char),long)->(int)
(	O
prefix	*(char)
,	O
machine	*(char)
,	O
strlen	(*(char))->(long)
(	O
prefix	*(char)
)	O
)	O
==	O
0	int
)	O
cd_path	*(char)
=	O
g_strconcat	(*(char))->(*(char))
(	O
machine	*(char)
,	O
to_home	int
?	O
"/~/"	*(char)
:	O
(	O
char	O
*	O
)	O
NULL	O
,	O
(	O
char	O
*	O
)	O
NULL	O
)	O
;	O
else	O
cd_path	*(char)
=	O
g_strconcat	(*(char))->(*(char))
(	O
prefix	*(char)
,	O
machine	*(char)
,	O
to_home	int
?	O
"/~/"	*(char)
:	O
(	O
char	O
*	O
)	O
NULL	O
,	O
(	O
char	O
*	O
)	O
NULL	O
)	O
;	O
if	O
(	O
do_panel_cd	(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),struct(*(struct`),int),int,int,array(char),array(char),*(struct(*`,*`,*`)),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*`,*`)->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char))),*(char),enum(int,int))->(int)
(	O
MENU_PANEL	O
,	O
cd_path	*(char)
,	O
0	int
)	O
)	O
directory_history_add	(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),struct(*(struct`),int),int,int,array(char),array(char),*(struct(*`,*`,*`)),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*`,*`)->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char))),*(char))->(void)
(	O
MENU_PANEL	O
,	O
(	O
MENU_PANEL	O
)	O
->	O
cwd	short
)	O
;	O
else	O
message	*(char)
(	O
1	int
,	O
MSG_ERROR	O
,	O
_	O
(	O
" Cannot chdir to %s "	*(char)
)	O
,	O
cd_path	*(char)
)	O
;	O
g_free	(*(void))->(void)
(	O
cd_path	*(char)
)	O
;	O
g_free	(*(void))->(void)
(	O
machine	*(char)
)	O
;	O
}	O
static	O
const	O
char	O
*	O
machine_str	*(char)
=	O
N_	O
(	O
" Enter machine name (F1 for details): "	*(char)
)	O
;	O
void	O
ftplink_cmd	()->(void)
(	O
void	O
)	O
{	O
nice_cd	(*(char),*(char),*(char),*(char),int)->(void)
(	O
_	O
(	O
" FTP to machine "	*(char)
)	O
,	O
_	O
(	O
machine_str	*(char)
)	O
,	O
"[FTP File System]"	*(char)
,	O
"/#ftp:"	*(char)
,	O
1	int
)	O
;	O
}	O
void	O
fishlink_cmd	()->(void)
(	O
void	O
)	O
{	O
nice_cd	(*(char),*(char),*(char),*(char),int)->(void)
(	O
_	O
(	O
" Shell link to machine "	*(char)
)	O
,	O
_	O
(	O
machine_str	*(char)
)	O
,	O
"[FIle transfer over SHell filesystem]"	*(char)
,	O
"/#sh:"	*(char)
,	O
1	int
)	O
;	O
}	O
void	O
quick_cd_cmd	()->(void)
(	O
void	O
)	O
{	O
char	O
*	O
p	*(void)
=	O
cd_dialog	()->(*(char))
(	O
)	O
;	O
if	O
(	O
p	*(void)
&&	O
*	O
p	*(void)
)	O
{	O
char	O
*	O
q	*(char)
=	O
g_strconcat	(*(char))->(*(char))
(	O
"cd "	*(char)
,	O
p	*(void)
,	O
(	O
char	O
*	O
)	O
NULL	O
)	O
;	O
do_cd_command	(*(char))->(void)
(	O
q	*(char)
)	O
;	O
g_free	(*(void))->(void)
(	O
q	*(char)
)	O
;	O
}	O
g_free	(*(void))->(void)
(	O
p	*(void)
)	O
;	O
}	O
void	O
single_dirsize_cmd	()->(void)
(	O
void	O
)	O
{	O
WPanel	struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))),*(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))),*((*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*(struct(int,int,int,enum(int,int,int,int,int,int,int,int,int))),*(void))->(int)),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))))),struct(*(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),struct(int,int,int,int))),int),int,int,array(char),array(char),*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`))))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char))
*	O
panel	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),struct(*(struct(int,*`,struct`,struct`)),int),int,int,array(char),array(char),*(struct(*(void),*(struct`),*(struct`))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char)))
=	O
current_panel	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),struct(*(struct(int,*`,struct`,struct`)),int),int,int,array(char),array(char),*(struct(*(void),*(struct`),*(struct`))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char)))
;	O
file_entry	struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),struct(int,int,int,int))
*	O
entry	*(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),struct(int,int,int,int)))
;	O
off_t	long
marked	int
;	O
double	O
total	long
;	O
entry	*(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),struct(int,int,int,int)))
=	O
&	O
(	O
panel	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),struct(*(struct(int,*`,struct`,struct`)),int),int,int,array(char),array(char),*(struct(*(void),*(struct`),*(struct`))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char)))
->	O
dir	*(struct)
.	O
list	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
[	O
panel	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),struct(*(struct(int,*`,struct`,struct`)),int),int,int,array(char),array(char),*(struct(*(void),*(struct`),*(struct`))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char)))
->	O
selected	int
]	O
)	O
;	O
if	O
(	O
S_ISDIR	O
(	O
entry	*(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),struct(int,int,int,int)))
->	O
st	*(struct)
.	O
st_mode	int
)	O
&&	O
strcmp	(*(char),*(char))->(int)
(	O
entry	*(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),struct(int,int,int,int)))
->	O
fname	*(char)
,	O
".."	*(char)
)	O
!=	O
0	int
)	O
{	O
total	long
=	O
0.0	int
;	O
compute_dir_size	(*(char),*(long),*(double))->(void)
(	O
entry	*(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),struct(int,int,int,int)))
->	O
fname	*(char)
,	O
&	O
marked	int
,	O
&	O
total	long
)	O
;	O
entry	*(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),struct(int,int,int,int)))
->	O
st	*(struct)
.	O
st_size	long
=	O
(	O
off_t	long
)	O
total	long
;	O
entry	*(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),struct(int,int,int,int)))
->	O
f	float
.	O
dir_size_computed	int
=	O
1	int
;	O
}	O
if	O
(	O
mark_moves_down	int
)	O
send_message	(*(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))),enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))
(	O
&	O
(	O
panel	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),struct(*(struct(int,*`,struct`,struct`)),int),int,int,array(char),array(char),*(struct(*(void),*(struct`),*(struct`))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char)))
->	O
widget	*(struct)
)	O
,	O
WIDGET_KEY	int
,	O
KEY_DOWN	int
)	O
;	O
recalculate_panel_summary	(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),struct(*(struct`),int),int,int,array(char),array(char),*(struct(*`,*`,*`)),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*`,*`)->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char))))->(void)
(	O
panel	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),struct(*(struct(int,*`,struct`,struct`)),int),int,int,array(char),array(char),*(struct(*(void),*(struct`),*(struct`))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char)))
)	O
;	O
panel	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),struct(*(struct(int,*`,struct`,struct`)),int),int,int,array(char),array(char),*(struct(*(void),*(struct`),*(struct`))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char)))
->	O
dirty	int
=	O
1	int
;	O
}	O
void	O
dirsizes_cmd	()->(void)
(	O
void	O
)	O
{	O
WPanel	struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))),*(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))),*((*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*(struct(int,int,int,enum(int,int,int,int,int,int,int,int,int))),*(void))->(int)),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))))),struct(*(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),struct(int,int,int,int))),int),int,int,array(char),array(char),*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`))))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char))
*	O
panel	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),struct(*(struct(int,*`,struct`,struct`)),int),int,int,array(char),array(char),*(struct(*(void),*(struct`),*(struct`))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char)))
=	O
current_panel	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),struct(*(struct(int,*`,struct`,struct`)),int),int,int,array(char),array(char),*(struct(*(void),*(struct`),*(struct`))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char)))
;	O
int	O
i	array(int)
;	O
off_t	long
marked	int
;	O
double	O
total	long
;	O
for	O
(	O
i	array(int)
=	O
0	int
;	O
i	array(int)
<	O
panel	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),struct(*(struct(int,*`,struct`,struct`)),int),int,int,array(char),array(char),*(struct(*(void),*(struct`),*(struct`))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char)))
->	O
count	int
;	O
i	array(int)
++	O
)	O
if	O
(	O
S_ISDIR	O
(	O
panel	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),struct(*(struct(int,*`,struct`,struct`)),int),int,int,array(char),array(char),*(struct(*(void),*(struct`),*(struct`))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char)))
->	O
dir	*(struct)
.	O
list	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
[	O
i	array(int)
]	O
.	O
st	*(struct)
.	O
st_mode	int
)	O
&&	O
(	O
(	O
panel	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),struct(*(struct(int,*`,struct`,struct`)),int),int,int,array(char),array(char),*(struct(*(void),*(struct`),*(struct`))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char)))
->	O
dirs_marked	int
&&	O
panel	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),struct(*(struct(int,*`,struct`,struct`)),int),int,int,array(char),array(char),*(struct(*(void),*(struct`),*(struct`))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char)))
->	O
dir	*(struct)
.	O
list	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
[	O
i	array(int)
]	O
.	O
f	float
.	O
marked	int
)	O
||	O
!	O
panel	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),struct(*(struct(int,*`,struct`,struct`)),int),int,int,array(char),array(char),*(struct(*(void),*(struct`),*(struct`))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char)))
->	O
dirs_marked	int
)	O
&&	O
strcmp	(*(char),*(char))->(int)
(	O
panel	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),struct(*(struct(int,*`,struct`,struct`)),int),int,int,array(char),array(char),*(struct(*(void),*(struct`),*(struct`))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char)))
->	O
dir	*(struct)
.	O
list	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
[	O
i	array(int)
]	O
.	O
fname	*(char)
,	O
".."	*(char)
)	O
!=	O
0	int
)	O
{	O
total	long
=	O
0.0l	int
;	O
compute_dir_size	(*(char),*(long),*(double))->(void)
(	O
panel	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),struct(*(struct(int,*`,struct`,struct`)),int),int,int,array(char),array(char),*(struct(*(void),*(struct`),*(struct`))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char)))
->	O
dir	*(struct)
.	O
list	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
[	O
i	array(int)
]	O
.	O
fname	*(char)
,	O
&	O
marked	int
,	O
&	O
total	long
)	O
;	O
panel	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),struct(*(struct(int,*`,struct`,struct`)),int),int,int,array(char),array(char),*(struct(*(void),*(struct`),*(struct`))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char)))
->	O
dir	*(struct)
.	O
list	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
[	O
i	array(int)
]	O
.	O
st	*(struct)
.	O
st_size	long
=	O
(	O
off_t	long
)	O
total	long
;	O
panel	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),struct(*(struct(int,*`,struct`,struct`)),int),int,int,array(char),array(char),*(struct(*(void),*(struct`),*(struct`))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char)))
->	O
dir	*(struct)
.	O
list	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
[	O
i	array(int)
]	O
.	O
f	float
.	O
dir_size_computed	int
=	O
1	int
;	O
}	O
recalculate_panel_summary	(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),struct(*(struct`),int),int,int,array(char),array(char),*(struct(*`,*`,*`)),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*`,*`)->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char))))->(void)
(	O
panel	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),struct(*(struct(int,*`,struct`,struct`)),int),int,int,array(char),array(char),*(struct(*(void),*(struct`),*(struct`))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char)))
)	O
;	O
panel_re_sort	(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),struct(*(struct`),int),int,int,array(char),array(char),*(struct(*`,*`,*`)),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*`,*`)->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char))))->(void)
(	O
panel	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),struct(*(struct(int,*`,struct`,struct`)),int),int,int,array(char),array(char),*(struct(*(void),*(struct`),*(struct`))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char)))
)	O
;	O
panel	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),struct(*(struct(int,*`,struct`,struct`)),int),int,int,array(char),array(char),*(struct(*(void),*(struct`),*(struct`))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char)))
->	O
dirty	int
=	O
1	int
;	O
}	O
void	O
save_setup_cmd	()->(void)
(	O
void	O
)	O
{	O
char	O
*	O
str	*(char)
;	O
save_setup	()->(void)
(	O
)	O
;	O
sync_profiles	()->(void)
(	O
)	O
;	O
str	*(char)
=	O
g_strconcat	(*(char))->(*(char))
(	O
_	O
(	O
" Setup saved to ~/"	*(char)
)	O
,	O
PROFILE_NAME	*(char)
,	O
(	O
char	O
*	O
)	O
NULL	O
)	O
;	O
message	*(char)
(	O
0	int
,	O
_	O
(	O
" Setup "	*(char)
)	O
,	O
str	*(char)
)	O
;	O
g_free	(*(void))->(void)
(	O
str	*(char)
)	O
;	O
}	O
static	O
void	O
configure_panel_listing	(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),struct(*(struct`),int),int,int,array(char),array(char),*(struct(*`,*`,*`)),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*`,*`)->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char))),int,int,*(char),*(char))->(void)
(	O
WPanel	struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))),*(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))),*((*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*(struct(int,int,int,enum(int,int,int,int,int,int,int,int,int))),*(void))->(int)),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))))),struct(*(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),struct(int,int,int,int))),int),int,int,array(char),array(char),*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`))))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char))
*	O
p	*(void)
,	O
int	O
view_type	int
,	O
int	O
use_msformat	*(int)
,	O
char	O
*	O
user	*(*(char))
,	O
char	O
*	O
status	int
)	O
{	O
p	*(void)
->	O
user_mini_status	int
=	O
use_msformat	*(int)
;	O
p	*(void)
->	O
list_type	int
=	O
view_type	int
;	O
if	O
(	O
view_type	int
==	O
list_user	int
||	O
use_msformat	*(int)
)	O
{	O
g_free	(*(void))->(void)
(	O
p	*(void)
->	O
user_format	*(char)
)	O
;	O
p	*(void)
->	O
user_format	*(char)
=	O
user	*(*(char))
;	O
g_free	(*(void))->(void)
(	O
p	*(void)
->	O
user_status_format	array(*(char))
[	O
view_type	int
]	O
)	O
;	O
p	*(void)
->	O
user_status_format	array(*(char))
[	O
view_type	int
]	O
=	O
status	int
;	O
set_panel_formats	(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),struct(*(struct`),int),int,int,array(char),array(char),*(struct(*`,*`,*`)),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*`,*`)->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char))))->(int)
(	O
p	*(void)
)	O
;	O
}	O
else	O
{	O
g_free	(*(void))->(void)
(	O
user	*(*(char))
)	O
;	O
g_free	(*(void))->(void)
(	O
status	int
)	O
;	O
}	O
set_panel_formats	(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),struct(*(struct`),int),int,int,array(char),array(char),*(struct(*`,*`,*`)),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*`,*`)->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char))))->(int)
(	O
p	*(void)
)	O
;	O
do_refresh	()->(void)
(	O
)	O
;	O
}	O
void	O
info_cmd_no_menu	()->(void)
(	O
void	O
)	O
{	O
if	O
(	O
get_display_type	(int)->(int)
(	O
0	int
)	O
==	O
view_info	int
)	O
set_display_type	(int,int)->(void)
(	O
0	int
,	O
view_listing	int
)	O
;	O
else	O
if	O
(	O
get_display_type	(int)->(int)
(	O
1	int
)	O
==	O
view_info	int
)	O
set_display_type	(int,int)->(void)
(	O
1	int
,	O
view_listing	int
)	O
;	O
else	O
set_display_type	(int,int)->(void)
(	O
current_panel	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),struct(*(struct(int,*`,struct`,struct`)),int),int,int,array(char),array(char),*(struct(*(void),*(struct`),*(struct`))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char)))
==	O
left_panel	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),struct(*(struct(int,*`,struct`,struct`)),int),int,int,array(char),array(char),*(struct(*(void),*(struct`),*(struct`))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char)))
?	O
1	int
:	O
0	int
,	O
view_info	int
)	O
;	O
}	O
void	O
quick_cmd_no_menu	()->(void)
(	O
void	O
)	O
{	O
if	O
(	O
get_display_type	(int)->(int)
(	O
0	int
)	O
==	O
view_quick	int
)	O
set_display_type	(int,int)->(void)
(	O
0	int
,	O
view_listing	int
)	O
;	O
else	O
if	O
(	O
get_display_type	(int)->(int)
(	O
1	int
)	O
==	O
view_quick	int
)	O
set_display_type	(int,int)->(void)
(	O
1	int
,	O
view_listing	int
)	O
;	O
else	O
set_display_type	(int,int)->(void)
(	O
current_panel	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),struct(*(struct(int,*`,struct`,struct`)),int),int,int,array(char),array(char),*(struct(*(void),*(struct`),*(struct`))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char)))
==	O
left_panel	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),struct(*(struct(int,*`,struct`,struct`)),int),int,int,array(char),array(char),*(struct(*(void),*(struct`),*(struct`))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char)))
?	O
1	int
:	O
0	int
,	O
view_quick	int
)	O
;	O
}	O
static	O
void	O
switch_to_listing	(int)->(void)
(	O
int	O
panel_index	int
)	O
{	O
if	O
(	O
get_display_type	(int)->(int)
(	O
panel_index	int
)	O
!=	O
view_listing	int
)	O
set_display_type	(int,int)->(void)
(	O
panel_index	int
,	O
view_listing	int
)	O
;	O
}	O
void	O
listing_cmd	()->(void)
(	O
void	O
)	O
{	O
int	O
view_type	int
,	O
use_msformat	*(int)
;	O
char	O
*	O
user	*(*(char))
,	O
*	O
status	int
;	O
WPanel	struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))),*(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))),*((*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*(struct(int,int,int,enum(int,int,int,int,int,int,int,int,int))),*(void))->(int)),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))))),struct(*(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),struct(int,int,int,int))),int),int,int,array(char),array(char),*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`))))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char))
*	O
p	*(void)
;	O
int	O
display_type	int
;	O
display_type	int
=	O
get_display_type	(int)->(int)
(	O
MENU_PANEL_IDX	O
)	O
;	O
if	O
(	O
display_type	int
==	O
view_listing	int
)	O
p	*(void)
=	O
MENU_PANEL_IDX	O
==	O
0	int
?	O
left_panel	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),struct(*(struct(int,*`,struct`,struct`)),int),int,int,array(char),array(char),*(struct(*(void),*(struct`),*(struct`))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char)))
:	O
right_panel	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),struct(*(struct(int,*`,struct`,struct`)),int),int,int,array(char),array(char),*(struct(*(void),*(struct`),*(struct`))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char)))
;	O
else	O
p	*(void)
=	O
0	int
;	O
view_type	int
=	O
display_box	(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),struct(*(struct`),int),int,int,array(char),array(char),*(struct(*`,*`,*`)),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*`,*`)->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char))),*(*(char)),*(*(char)),*(int),int)->(int)
(	O
p	*(void)
,	O
&	O
user	*(*(char))
,	O
&	O
status	int
,	O
&	O
use_msformat	*(int)
,	O
MENU_PANEL_IDX	O
)	O
;	O
if	O
(	O
view_type	int
==	O
-	O
1	int
)	O
return	O
;	O
switch_to_listing	(int)->(void)
(	O
MENU_PANEL_IDX	O
)	O
;	O
p	*(void)
=	O
MENU_PANEL_IDX	O
==	O
0	int
?	O
left_panel	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),struct(*(struct(int,*`,struct`,struct`)),int),int,int,array(char),array(char),*(struct(*(void),*(struct`),*(struct`))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char)))
:	O
right_panel	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),struct(*(struct(int,*`,struct`,struct`)),int),int,int,array(char),array(char),*(struct(*(void),*(struct`),*(struct`))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char)))
;	O
configure_panel_listing	(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),struct(*(struct`),int),int,int,array(char),array(char),*(struct(*`,*`,*`)),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*`,*`)->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char))),int,int,*(char),*(char))->(void)
(	O
p	*(void)
,	O
view_type	int
,	O
use_msformat	*(int)
,	O
user	*(*(char))
,	O
status	int
)	O
;	O
}	O
void	O
tree_cmd	()->(void)
(	O
void	O
)	O
{	O
set_display_type	(int,int)->(void)
(	O
MENU_PANEL_IDX	O
,	O
view_tree	int
)	O
;	O
}	O
void	O
info_cmd	()->(void)
(	O
void	O
)	O
{	O
set_display_type	(int,int)->(void)
(	O
MENU_PANEL_IDX	O
,	O
view_info	int
)	O
;	O
}	O
void	O
quick_view_cmd	()->(void)
(	O
void	O
)	O
{	O
if	O
(	O
(	O
WPanel	struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))),*(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))),*((*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*(struct(int,int,int,enum(int,int,int,int,int,int,int,int,int))),*(void))->(int)),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))))),struct(*(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),struct(int,int,int,int))),int),int,int,array(char),array(char),*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`))))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char))
*	O
)	O
get_panel_widget	(int)->(*(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))))
(	O
MENU_PANEL_IDX	O
)	O
==	O
current_panel	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),struct(*(struct(int,*`,struct`,struct`)),int),int,int,array(char),array(char),*(struct(*(void),*(struct`),*(struct`))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char)))
)	O
change_panel	()->(void)
(	O
)	O
;	O
set_display_type	(int,int)->(void)
(	O
MENU_PANEL_IDX	O
,	O
view_quick	int
)	O
;	O
}	O
static	O
int	O
set_basic_panel_listing_to	(int,int)->(int)
(	O
int	O
panel_index	int
,	O
int	O
listing_mode	int
)	O
{	O
WPanel	struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))),*(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))),*((*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*(struct(int,int,int,enum(int,int,int,int,int,int,int,int,int))),*(void))->(int)),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))))),struct(*(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),struct(int,int,int,int))),int),int,int,array(char),array(char),*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`))))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char))
*	O
p	*(void)
=	O
(	O
WPanel	struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))),*(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))),*((*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*(struct(int,int,int,enum(int,int,int,int,int,int,int,int,int))),*(void))->(int)),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))))),struct(*(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),struct(int,int,int,int))),int),int,int,array(char),array(char),*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`))))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char))
*	O
)	O
get_panel_widget	(int)->(*(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))))
(	O
panel_index	int
)	O
;	O
switch_to_listing	(int)->(void)
(	O
panel_index	int
)	O
;	O
p	*(void)
->	O
list_type	int
=	O
listing_mode	int
;	O
if	O
(	O
set_panel_formats	(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),struct(*(struct`),int),int,int,array(char),array(char),*(struct(*`,*`,*`)),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*`,*`)->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char))))->(int)
(	O
p	*(void)
)	O
)	O
return	O
0	int
;	O
do_refresh	()->(void)
(	O
)	O
;	O
return	O
1	int
;	O
}	O
void	O
toggle_listing_cmd	()->(void)
(	O
void	O
)	O
{	O
int	O
current	*(struct)
=	O
get_current_index	()->(int)
(	O
)	O
;	O
WPanel	struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))),*(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))),*((*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*(struct(int,int,int,enum(int,int,int,int,int,int,int,int,int))),*(void))->(int)),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))))),struct(*(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),struct(int,int,int,int))),int),int,int,array(char),array(char),*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`))))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char))
*	O
p	*(void)
=	O
(	O
WPanel	struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))),*(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))),*((*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*(struct(int,int,int,enum(int,int,int,int,int,int,int,int,int))),*(void))->(int)),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))))),struct(*(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),struct(int,int,int,int))),int),int,int,array(char),array(char),*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`))))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char))
*	O
)	O
get_panel_widget	(int)->(*(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))))
(	O
current	*(struct)
)	O
;	O
set_basic_panel_listing_to	(int,int)->(int)
(	O
current	*(struct)
,	O
(	O
p	*(void)
->	O
list_type	int
+	O
1	int
)	O
%	O
LIST_TYPES	int
)	O
;	O
}	O
