struct	O
locals	struct(*(struct(*(*(struct(*`,*`))),long,long,bool,*(char))))
{	O
msgdomain_list_ty	struct
*	O
mdlp	*(struct(*(*(struct(*`,*`))),long,long,bool,*(char)))
;	O
}	O
;	O
static	O
bool	bool
execute_and_read_po_output	(*(char),*(char),*(*(char)),*(void))->(bool)
(	O
const	O
char	O
*	O
progname	*(char)
,	O
const	O
char	O
*	O
prog_path	*(char)
,	O
char	O
*	O
*	O
prog_argv	*(*(char))
,	O
void	O
*	O
private_data	*(void)
)	O
{	O
struct	O
locals	struct(*(struct(*(*(struct(*`,*`))),long,long,bool,*(char))))
*	O
l	*(struct(*(struct(*(*`),long,long,bool,*(char)))))
=	O
(	O
struct	O
locals	struct(*(struct(*(*(struct(*`,*`))),long,long,bool,*(char))))
*	O
)	O
private_data	*(void)
;	O
pid_t	int
child	int
;	O
int	O
fd	array(int)
[	O
1	int
]	O
;	O
FILE	struct
*	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
;	O
int	O
exitstatus	int
;	O
child	int
=	O
create_pipe_in	(*(char),*(char),*(*(char)),*(char),bool,bool,bool,array(int))->(int)
(	O
progname	*(char)
,	O
prog_path	*(char)
,	O
prog_argv	*(*(char))
,	O
DEV_NULL	*(char)
,	O
false	int
,	O
true	int
,	O
true	int
,	O
fd	array(int)
)	O
;	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
=	O
fdopen	(int,*(char))->(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))
(	O
fd	array(int)
[	O
0	int
]	O
,	O
"r"	*(char)
)	O
;	O
if	O
(	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
==	O
NULL	O
)	O
error	(int,int,*(char))->(void)
(	O
EXIT_FAILURE	int
,	O
errno	O
,	O
_	O
(	O
"fdopen() failed"	*(char)
)	O
)	O
;	O
l	*(struct(*(struct(*(*`),long,long,bool,*(char)))))
->	O
mdlp	*(struct(*(*(struct(*`,*`))),long,long,bool,*(char)))
=	O
read_catalog_stream	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char),*(char),*(struct(*((*`,*`,*`,*`)->(void)),bool)))->(*(struct(*(*(struct`)),long,long,bool,*(char))))
(	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"(pipe)"	*(char)
,	O
"(pipe)"	*(char)
,	O
&	O
input_format_po	struct(*((*(struct(*`)),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),*(char))->(void)),bool)
)	O
;	O
fclose	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
exitstatus	int
=	O
wait_subprocess	(int,*(char),bool,bool,bool,bool,*(int))->(int)
(	O
child	int
,	O
progname	*(char)
,	O
false	int
,	O
false	int
,	O
true	int
,	O
true	int
,	O
NULL	O
)	O
;	O
if	O
(	O
exitstatus	int
!=	O
0	int
)	O
error	(int,int,*(char))->(void)
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
_	O
(	O
"%s subprocess failed with exit code %d"	*(char)
)	O
,	O
progname	*(char)
,	O
exitstatus	int
)	O
;	O
return	O
false	int
;	O
}	O
msgdomain_list_ty	struct
*	O
msgdomain_read_java	(*(char),*(char))->(*(struct(*(*(struct`)),long,long,bool,*(char))))
(	O
const	O
char	O
*	O
resource_name	*(char)
,	O
const	O
char	O
*	O
locale_name	*(char)
)	O
{	O
const	O
char	O
*	O
class_name	*(char)
=	O
"gnu.gettext.DumpResource"	*(char)
;	O
const	O
char	O
*	O
gettextjar	*(char)
;	O
const	O
char	O
*	O
args	*(*(char))
[	O
3	int
]	O
;	O
struct	O
locals	struct(*(struct(*(*(struct(*`,*`))),long,long,bool,*(char))))
locals	struct(*(struct(*(*(struct(*`,*`))),long,long,bool,*(char))))
;	O
gettextjar	*(char)
=	O
getenv	(*(char))->(*(char))
(	O
"GETTEXTJAR"	*(char)
)	O
;	O
if	O
(	O
gettextjar	*(char)
==	O
NULL	O
||	O
gettextjar	*(char)
[	O
0	int
]	O
==	O
'\0'	O
)	O
gettextjar	*(char)
=	O
relocate	O
(	O
GETTEXTJAR	O
)	O
;	O
if	O
(	O
resource_name	*(char)
==	O
NULL	O
)	O
resource_name	*(char)
=	O
"Messages"	*(char)
;	O
args	*(*(char))
[	O
0	int
]	O
=	O
resource_name	*(char)
;	O
if	O
(	O
locale_name	*(char)
!=	O
NULL	O
)	O
{	O
args	*(*(char))
[	O
1	int
]	O
=	O
locale_name	*(char)
;	O
args	*(*(char))
[	O
2	int
]	O
=	O
NULL	O
;	O
}	O
else	O
args	*(*(char))
[	O
1	int
]	O
=	O
NULL	O
;	O
if	O
(	O
execute_java_class	(*(char),*(*(char)),int,bool,*(char),*(*(char)),bool,bool,*((*(char),*(char),*(*(char)),*(void))->(bool)),*(void))->(bool)
(	O
class_name	*(char)
,	O
&	O
gettextjar	*(char)
,	O
1	int
,	O
false	int
,	O
NULL	O
,	O
args	*(*(char))
,	O
verbose	bool
,	O
false	int
,	O
execute_and_read_po_output	(*(char),*(char),*(*(char)),*(void))->(bool)
,	O
&	O
locals	struct(*(struct(*(*(struct(*`,*`))),long,long,bool,*(char))))
)	O
)	O
exit	(int)->(void)
(	O
EXIT_FAILURE	int
)	O
;	O
return	O
locals	struct(*(struct(*(*(struct(*`,*`))),long,long,bool,*(char))))
.	O
mdlp	*(struct(*(*(struct(*`,*`))),long,long,bool,*(char)))
;	O
}	O
