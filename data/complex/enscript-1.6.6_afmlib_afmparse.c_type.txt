struct	O
parse_ctx_st	struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char))),array(char),int)
{	O
FILE	struct
*	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
;	O
char	O
token	array(char)
[	O
1024	int
]	O
;	O
unsigned	O
int	O
tokenlen	int
;	O
}	O
;	O
typedef	O
struct	O
parse_ctx_st	struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char))),array(char),int)
ParseCtx	struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),array(char),int)
;	O
static	O
struct	O
keyname_st	struct(*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int))
{	O
char	O
*	O
name	*(char)
;	O
AFMKey	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
key	*(char)
;	O
}	O
keynames	array(struct(*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)))
[	O
]	O
=	O
{	O
{	O
"Ascender"	*(char)
,	O
kAscender	int
}	O
,	O
{	O
"Axes"	*(char)
,	O
kAxes	int
}	O
,	O
{	O
"AxisLabel"	*(char)
,	O
kAxisLabel	int
}	O
,	O
{	O
"AxisType"	*(char)
,	O
kAxisType	int
}	O
,	O
{	O
"B"	*(char)
,	O
kB	int
}	O
,	O
{	O
"BlendAxisTypes"	*(char)
,	O
kBlendAxisTypes	int
}	O
,	O
{	O
"BlendDesignMap"	*(char)
,	O
kBlendDesignMap	int
}	O
,	O
{	O
"BlendDesignPositions"	*(char)
,	O
kBlendDesignPositions	int
}	O
,	O
{	O
"C"	*(char)
,	O
kC	int
}	O
,	O
{	O
"CC"	*(char)
,	O
kCC	int
}	O
,	O
{	O
"CH"	*(char)
,	O
kCH	int
}	O
,	O
{	O
"CapHeight"	*(char)
,	O
kCapHeight	int
}	O
,	O
{	O
"CharWidth"	*(char)
,	O
kCharWidth	int
}	O
,	O
{	O
"CharacterSet"	*(char)
,	O
kCharacterSet	int
}	O
,	O
{	O
"Characters"	*(char)
,	O
kCharacters	int
}	O
,	O
{	O
"Comment"	*(char)
,	O
kComment	int
}	O
,	O
{	O
"Descendents"	*(char)
,	O
kDescendents	int
}	O
,	O
{	O
"Descender"	*(char)
,	O
kDescender	int
}	O
,	O
{	O
"EncodingScheme"	*(char)
,	O
kEncodingScheme	int
}	O
,	O
{	O
"EndAxis"	*(char)
,	O
kEndAxis	int
}	O
,	O
{	O
"EndCharMetrics"	*(char)
,	O
kEndCharMetrics	int
}	O
,	O
{	O
"EndCompFontMetrics"	*(char)
,	O
kEndCompFontMetrics	int
}	O
,	O
{	O
"EndComposites"	*(char)
,	O
kEndComposites	int
}	O
,	O
{	O
"EndDescendent"	*(char)
,	O
kEndDescendent	int
}	O
,	O
{	O
"EndDirection"	*(char)
,	O
kEndDirection	int
}	O
,	O
{	O
"EndFontMetrics"	*(char)
,	O
kEndFontMetrics	int
}	O
,	O
{	O
"EndKernData"	*(char)
,	O
kEndKernData	int
}	O
,	O
{	O
"EndKernPairs"	*(char)
,	O
kEndKernPairs	int
}	O
,	O
{	O
"EndMaster"	*(char)
,	O
kEndMaster	int
}	O
,	O
{	O
"EndMasterFontMetrics"	*(char)
,	O
kEndMasterFontMetrics	int
}	O
,	O
{	O
"EndTrackKern"	*(char)
,	O
kEndTrackKern	int
}	O
,	O
{	O
"EscChar"	*(char)
,	O
kEscChar	int
}	O
,	O
{	O
"FamilyName"	*(char)
,	O
kFamilyName	int
}	O
,	O
{	O
"FontBBox"	*(char)
,	O
kFontBBox	int
}	O
,	O
{	O
"FontName"	*(char)
,	O
kFontName	int
}	O
,	O
{	O
"FullName"	*(char)
,	O
kFullName	int
}	O
,	O
{	O
"IsBaseFont"	*(char)
,	O
kIsBaseFont	int
}	O
,	O
{	O
"IsFixedPitch"	*(char)
,	O
kIsFixedPitch	int
}	O
,	O
{	O
"IsFixedV"	*(char)
,	O
kIsFixedV	int
}	O
,	O
{	O
"ItalicAngle"	*(char)
,	O
kItalicAngle	int
}	O
,	O
{	O
"KP"	*(char)
,	O
kKP	int
}	O
,	O
{	O
"KPH"	*(char)
,	O
kKPH	int
}	O
,	O
{	O
"KPX"	*(char)
,	O
kKPX	int
}	O
,	O
{	O
"KPY"	*(char)
,	O
kKPY	int
}	O
,	O
{	O
"L"	*(char)
,	O
kL	int
}	O
,	O
{	O
"MappingScheme"	*(char)
,	O
kMappingScheme	int
}	O
,	O
{	O
"Masters"	*(char)
,	O
kMasters	int
}	O
,	O
{	O
"MetricsSets"	*(char)
,	O
kMetricsSets	int
}	O
,	O
{	O
"N"	*(char)
,	O
kN	int
}	O
,	O
{	O
"Notice"	*(char)
,	O
kNotice	int
}	O
,	O
{	O
"PCC"	*(char)
,	O
kPCC	int
}	O
,	O
{	O
"StartAxis"	*(char)
,	O
kStartAxis	int
}	O
,	O
{	O
"StartCharMetrics"	*(char)
,	O
kStartCharMetrics	int
}	O
,	O
{	O
"StartCompFontMetrics"	*(char)
,	O
kStartCompFontMetrics	int
}	O
,	O
{	O
"StartComposites"	*(char)
,	O
kStartComposites	int
}	O
,	O
{	O
"StartDescendent"	*(char)
,	O
kStartDescendent	int
}	O
,	O
{	O
"StartDirection"	*(char)
,	O
kStartDirection	int
}	O
,	O
{	O
"StartFontMetrics"	*(char)
,	O
kStartFontMetrics	int
}	O
,	O
{	O
"StartKernData"	*(char)
,	O
kStartKernData	int
}	O
,	O
{	O
"StartKernPairs"	*(char)
,	O
kStartKernPairs	int
}	O
,	O
{	O
"StartMaster"	*(char)
,	O
kStartMaster	int
}	O
,	O
{	O
"StartMasterFontMetrics"	*(char)
,	O
kStartMasterFontMetrics	int
}	O
,	O
{	O
"StartTrackKern"	*(char)
,	O
kStartTrackKern	int
}	O
,	O
{	O
"TrackKern"	*(char)
,	O
kTrackKern	int
}	O
,	O
{	O
"UnderlinePosition"	*(char)
,	O
kUnderlinePosition	int
}	O
,	O
{	O
"UnderlineThickness"	*(char)
,	O
kUnderlineThickness	int
}	O
,	O
{	O
"VV"	*(char)
,	O
kVV	int
}	O
,	O
{	O
"VVector"	*(char)
,	O
kVVector	int
}	O
,	O
{	O
"Version"	*(char)
,	O
kVersion	int
}	O
,	O
{	O
"W"	*(char)
,	O
kW	int
}	O
,	O
{	O
"W0"	*(char)
,	O
kW0	int
}	O
,	O
{	O
"W0X"	*(char)
,	O
kW0X	int
}	O
,	O
{	O
"W0Y"	*(char)
,	O
kW0Y	int
}	O
,	O
{	O
"W1"	*(char)
,	O
kW1	int
}	O
,	O
{	O
"W1X"	*(char)
,	O
kW1X	int
}	O
,	O
{	O
"W1Y"	*(char)
,	O
kW1Y	int
}	O
,	O
{	O
"WX"	*(char)
,	O
kWX	int
}	O
,	O
{	O
"WY"	*(char)
,	O
kWY	int
}	O
,	O
{	O
"Weight"	*(char)
,	O
kWeight	int
}	O
,	O
{	O
"WeightVector"	*(char)
,	O
kWeightVector	int
}	O
,	O
{	O
"XHeight"	*(char)
,	O
kXHeight	int
}	O
,	O
{	O
NULL	O
,	O
0	int
}	O
,	O
}	O
;	O
static	O
void	O
parse_error	int
___P	O
(	O
(	O
AFMHandle	*(struct)
handle	*(struct)
,	O
AFMError	int
error	int
)	O
)	O
;	O
static	O
int	O
get_token	(*(struct(int,*(struct),array(struct(array(long),int,struct(array(long)))),int)),*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),array(char),int)))->(int)
___P	O
(	O
(	O
AFMHandle	*(struct)
handle	*(struct)
,	O
ParseCtx	struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),array(char),int)
*	O
ctx	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),array(char),int))
)	O
)	O
;	O
static	O
int	O
get_line_token	(*(struct(int,*(struct),array(struct(array(long),int,struct(array(long)))),int)),*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),array(char),int)))->(int)
___P	O
(	O
(	O
AFMHandle	*(struct)
handle	*(struct)
,	O
ParseCtx	struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),array(char),int)
*	O
ctx	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),array(char),int))
)	O
)	O
;	O
static	O
void	O
get_key	(*(struct(int,*(struct),array(struct(array(long),int,struct(array(long)))),int)),*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),array(char),int)),*(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)))->(void)
___P	O
(	O
(	O
AFMHandle	*(struct)
handle	*(struct)
,	O
ParseCtx	struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),array(char),int)
*	O
ctx	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),array(char),int))
,	O
AFMKey	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
*	O
key_return	*(*(char))
)	O
)	O
;	O
static	O
void	O
get_type	(*(struct(int,*(struct),array(struct(array(long),int,struct(array(long)))),int)),*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),array(char),int)),int,*(struct(int,union(*(char),*(char),double,long,*(struct`),enum(int,int)))))->(void)
___P	O
(	O
(	O
AFMHandle	*(struct)
handle	*(struct)
,	O
ParseCtx	struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),array(char),int)
*	O
ctx	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),array(char),int))
,	O
int	O
type	int
,	O
AFMNode	struct(int,union(*(char),*(char),double,long,*(struct),enum(int,int)))
*	O
type_return	*(struct(int,union(*(char),*(char),double,long,*(struct(double,*`)),enum(int,int))))
)	O
)	O
;	O
static	O
void	O
read_character_metrics	(*(struct(int,*(struct),array(struct(array(long),int,struct(array(long)))),int)),*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),array(char),int)),*(struct(*(struct(*`,*`,*`)),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct`),*(struct`),*(struct`),*(struct`)),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*`,double,double,double,double,double,double,double,*`)),long,*(struct(*`,long,*`)),long,*(struct(*`,*`,double,double)),long,*(struct(long,double,double,double,double)))))->(void)
___P	O
(	O
(	O
AFMHandle	*(struct)
handle	*(struct)
,	O
ParseCtx	struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),array(char),int)
*	O
ctx	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),array(char),int))
,	O
AFMFont	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
)	O
)	O
;	O
static	O
void	O
read_kern_pairs	(*(struct(int,*(struct),array(struct(array(long),int,struct(array(long)))),int)),*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),array(char),int)),*(struct(*(struct(*`,*`,*`)),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct`),*(struct`),*(struct`),*(struct`)),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*`,double,double,double,double,double,double,double,*`)),long,*(struct(*`,long,*`)),long,*(struct(*`,*`,double,double)),long,*(struct(long,double,double,double,double)))))->(void)
___P	O
(	O
(	O
AFMHandle	*(struct)
handle	*(struct)
,	O
ParseCtx	struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),array(char),int)
*	O
ctx	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),array(char),int))
,	O
AFMFont	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
)	O
)	O
;	O
static	O
void	O
read_track_kerns	(*(struct(int,*(struct),array(struct(array(long),int,struct(array(long)))),int)),*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),array(char),int)),*(struct(*(struct(*`,*`,*`)),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct`),*(struct`),*(struct`),*(struct`)),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*`,double,double,double,double,double,double,double,*`)),long,*(struct(*`,long,*`)),long,*(struct(*`,*`,double,double)),long,*(struct(long,double,double,double,double)))))->(void)
___P	O
(	O
(	O
AFMHandle	*(struct)
handle	*(struct)
,	O
ParseCtx	struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),array(char),int)
*	O
ctx	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),array(char),int))
,	O
AFMFont	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
)	O
)	O
;	O
static	O
void	O
read_composites	(*(struct(int,*(struct),array(struct(array(long),int,struct(array(long)))),int)),*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),array(char),int)),*(struct(*(struct(*`,*`,*`)),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct`),*(struct`),*(struct`),*(struct`)),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*`,double,double,double,double,double,double,double,*`)),long,*(struct(*`,long,*`)),long,*(struct(*`,*`,double,double)),long,*(struct(long,double,double,double,double)))))->(void)
___P	O
(	O
(	O
AFMHandle	*(struct)
handle	*(struct)
,	O
ParseCtx	struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),array(char),int)
*	O
ctx	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),array(char),int))
,	O
AFMFont	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
)	O
)	O
;	O
void	O
afm_parse_file	(*(struct(int,*(struct),array(struct(array(long),int,struct(array(long)))),int)),*(char),*(struct(*(struct(*`,*`,*`)),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct`),*(struct`),*(struct`),*(struct`)),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*`,double,double,double,double,double,double,double,*`)),long,*(struct(*`,long,*`)),long,*(struct(*`,*`,double,double)),long,*(struct(long,double,double,double,double)))))->(void)
(	O
AFMHandle	*(struct)
handle	*(struct)
,	O
const	O
char	O
*	O
filename	*(char)
,	O
AFMFont	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
)	O
{	O
AFMKey	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
key	*(char)
;	O
AFMNode	struct(int,union(*(char),*(char),double,long,*(struct),enum(int,int)))
node	struct(int,union(*(char),*(char),double,long,*(struct(double,*(struct`))),enum(int,int)))
;	O
ParseCtx	struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),array(char),int)
context	struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),array(char),int)
;	O
ParseCtx	struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),array(char),int)
*	O
ctx	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),array(char),int))
=	O
&	O
context	struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),array(char),int)
;	O
int	O
wd	int
=	O
0	int
;	O
int	O
done	int
=	O
0	int
;	O
ctx	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),array(char),int))
->	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
=	O
fopen	(*(char),*(char))->(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))
(	O
filename	*(char)
,	O
"r"	*(char)
)	O
;	O
if	O
(	O
ctx	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),array(char),int))
->	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
==	O
NULL	O
)	O
parse_error	int
(	O
handle	*(struct)
,	O
SYSERROR	O
(	O
AFM_ERROR_FILE_IO	int
)	O
)	O
;	O
get_key	(*(struct(int,*(struct),array(struct(array(long),int,struct(array(long)))),int)),*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),array(char),int)),*(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)))->(void)
(	O
handle	*(struct)
,	O
ctx	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),array(char),int))
,	O
&	O
key	*(char)
)	O
;	O
if	O
(	O
key	*(char)
!=	O
kStartFontMetrics	int
)	O
parse_error	int
(	O
handle	*(struct)
,	O
AFM_ERROR_NOT_AFM_FILE	int
)	O
;	O
GET_VALUE	O
(	O
AFM_TYPE_NUMBER	int
)	O
;	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
->	O
version	double
=	O
node	struct(int,union(*(char),*(char),double,long,*(struct(double,*(struct`))),enum(int,int)))
.	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
number	double
;	O
while	O
(	O
!	O
done	int
)	O
{	O
get_key	(*(struct(int,*(struct),array(struct(array(long),int,struct(array(long)))),int)),*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),array(char),int)),*(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)))->(void)
(	O
handle	*(struct)
,	O
ctx	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),array(char),int))
,	O
&	O
key	*(char)
)	O
;	O
switch	O
(	O
key	*(char)
)	O
{	O
case	O
kComment	int
:	O
(	O
void	O
)	O
get_line_token	(*(struct(int,*(struct),array(struct(array(long),int,struct(array(long)))),int)),*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),array(char),int)))->(int)
(	O
handle	*(struct)
,	O
ctx	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),array(char),int))
)	O
;	O
continue	O
;	O
break	O
;	O
case	O
kStartFontMetrics	int
:	O
GET_VALUE	O
(	O
AFM_TYPE_NUMBER	int
)	O
;	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
->	O
version	double
=	O
node	struct(int,union(*(char),*(char),double,long,*(struct(double,*(struct`))),enum(int,int)))
.	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
number	double
;	O
break	O
;	O
case	O
kEndFontMetrics	int
:	O
done	int
=	O
1	int
;	O
break	O
;	O
case	O
kStartCompFontMetrics	int
:	O
case	O
kEndCompFontMetrics	int
:	O
case	O
kStartMasterFontMetrics	int
:	O
case	O
kEndMasterFontMetrics	int
:	O
parse_error	int
(	O
handle	*(struct)
,	O
AFM_ERROR_UNSUPPORTED_FORMAT	int
)	O
;	O
break	O
;	O
case	O
kFontName	int
:	O
GET_VALUE	O
(	O
AFM_TYPE_STRING	int
)	O
;	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
->	O
global_info	struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*(struct(int,union`)))),*(struct(double,*(struct(int,union`)))),*(struct(double,*(struct(int,union`)))),*(struct(double,*(struct(int,union`)))))
.	O
FontName	*(char)
=	O
node	struct(int,union(*(char),*(char),double,long,*(struct(double,*(struct`))),enum(int,int)))
.	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
string	*(char)
;	O
break	O
;	O
case	O
kFullName	int
:	O
GET_VALUE	O
(	O
AFM_TYPE_STRING	int
)	O
;	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
->	O
global_info	struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*(struct(int,union`)))),*(struct(double,*(struct(int,union`)))),*(struct(double,*(struct(int,union`)))),*(struct(double,*(struct(int,union`)))))
.	O
FullName	*(char)
=	O
node	struct(int,union(*(char),*(char),double,long,*(struct(double,*(struct`))),enum(int,int)))
.	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
string	*(char)
;	O
break	O
;	O
case	O
kFamilyName	int
:	O
GET_VALUE	O
(	O
AFM_TYPE_STRING	int
)	O
;	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
->	O
global_info	struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*(struct(int,union`)))),*(struct(double,*(struct(int,union`)))),*(struct(double,*(struct(int,union`)))),*(struct(double,*(struct(int,union`)))))
.	O
FamilyName	*(char)
=	O
node	struct(int,union(*(char),*(char),double,long,*(struct(double,*(struct`))),enum(int,int)))
.	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
string	*(char)
;	O
break	O
;	O
case	O
kWeight	int
:	O
GET_VALUE	O
(	O
AFM_TYPE_STRING	int
)	O
;	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
->	O
global_info	struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*(struct(int,union`)))),*(struct(double,*(struct(int,union`)))),*(struct(double,*(struct(int,union`)))),*(struct(double,*(struct(int,union`)))))
.	O
Weight	*(char)
=	O
node	struct(int,union(*(char),*(char),double,long,*(struct(double,*(struct`))),enum(int,int)))
.	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
string	*(char)
;	O
break	O
;	O
case	O
kFontBBox	int
:	O
GET_VALUE	O
(	O
AFM_TYPE_NUMBER	int
)	O
;	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
->	O
global_info	struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*(struct(int,union`)))),*(struct(double,*(struct(int,union`)))),*(struct(double,*(struct(int,union`)))),*(struct(double,*(struct(int,union`)))))
.	O
FontBBox_llx	double
=	O
node	struct(int,union(*(char),*(char),double,long,*(struct(double,*(struct`))),enum(int,int)))
.	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
number	double
;	O
GET_VALUE	O
(	O
AFM_TYPE_NUMBER	int
)	O
;	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
->	O
global_info	struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*(struct(int,union`)))),*(struct(double,*(struct(int,union`)))),*(struct(double,*(struct(int,union`)))),*(struct(double,*(struct(int,union`)))))
.	O
FontBBox_lly	double
=	O
node	struct(int,union(*(char),*(char),double,long,*(struct(double,*(struct`))),enum(int,int)))
.	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
number	double
;	O
GET_VALUE	O
(	O
AFM_TYPE_NUMBER	int
)	O
;	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
->	O
global_info	struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*(struct(int,union`)))),*(struct(double,*(struct(int,union`)))),*(struct(double,*(struct(int,union`)))),*(struct(double,*(struct(int,union`)))))
.	O
FontBBox_urx	double
=	O
node	struct(int,union(*(char),*(char),double,long,*(struct(double,*(struct`))),enum(int,int)))
.	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
number	double
;	O
GET_VALUE	O
(	O
AFM_TYPE_NUMBER	int
)	O
;	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
->	O
global_info	struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*(struct(int,union`)))),*(struct(double,*(struct(int,union`)))),*(struct(double,*(struct(int,union`)))),*(struct(double,*(struct(int,union`)))))
.	O
FontBBox_ury	double
=	O
node	struct(int,union(*(char),*(char),double,long,*(struct(double,*(struct`))),enum(int,int)))
.	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
number	double
;	O
break	O
;	O
case	O
kVersion	int
:	O
GET_VALUE	O
(	O
AFM_TYPE_STRING	int
)	O
;	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
->	O
global_info	struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*(struct(int,union`)))),*(struct(double,*(struct(int,union`)))),*(struct(double,*(struct(int,union`)))),*(struct(double,*(struct(int,union`)))))
.	O
Version	*(char)
=	O
node	struct(int,union(*(char),*(char),double,long,*(struct(double,*(struct`))),enum(int,int)))
.	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
string	*(char)
;	O
break	O
;	O
case	O
kNotice	int
:	O
GET_VALUE	O
(	O
AFM_TYPE_STRING	int
)	O
;	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
->	O
global_info	struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*(struct(int,union`)))),*(struct(double,*(struct(int,union`)))),*(struct(double,*(struct(int,union`)))),*(struct(double,*(struct(int,union`)))))
.	O
Notice	*(char)
=	O
node	struct(int,union(*(char),*(char),double,long,*(struct(double,*(struct`))),enum(int,int)))
.	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
string	*(char)
;	O
break	O
;	O
case	O
kEncodingScheme	int
:	O
GET_VALUE	O
(	O
AFM_TYPE_STRING	int
)	O
;	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
->	O
global_info	struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*(struct(int,union`)))),*(struct(double,*(struct(int,union`)))),*(struct(double,*(struct(int,union`)))),*(struct(double,*(struct(int,union`)))))
.	O
EncodingScheme	*(char)
=	O
node	struct(int,union(*(char),*(char),double,long,*(struct(double,*(struct`))),enum(int,int)))
.	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
string	*(char)
;	O
break	O
;	O
case	O
kMappingScheme	int
:	O
GET_VALUE	O
(	O
AFM_TYPE_INTEGER	int
)	O
;	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
->	O
global_info	struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*(struct(int,union`)))),*(struct(double,*(struct(int,union`)))),*(struct(double,*(struct(int,union`)))),*(struct(double,*(struct(int,union`)))))
.	O
MappingScheme	long
=	O
node	struct(int,union(*(char),*(char),double,long,*(struct(double,*(struct`))),enum(int,int)))
.	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
integer	long
;	O
break	O
;	O
case	O
kEscChar	int
:	O
GET_VALUE	O
(	O
AFM_TYPE_INTEGER	int
)	O
;	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
->	O
global_info	struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*(struct(int,union`)))),*(struct(double,*(struct(int,union`)))),*(struct(double,*(struct(int,union`)))),*(struct(double,*(struct(int,union`)))))
.	O
EscChar	long
=	O
node	struct(int,union(*(char),*(char),double,long,*(struct(double,*(struct`))),enum(int,int)))
.	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
integer	long
;	O
break	O
;	O
case	O
kCharacterSet	int
:	O
GET_VALUE	O
(	O
AFM_TYPE_STRING	int
)	O
;	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
->	O
global_info	struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*(struct(int,union`)))),*(struct(double,*(struct(int,union`)))),*(struct(double,*(struct(int,union`)))),*(struct(double,*(struct(int,union`)))))
.	O
CharacterSet	*(char)
=	O
node	struct(int,union(*(char),*(char),double,long,*(struct(double,*(struct`))),enum(int,int)))
.	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
string	*(char)
;	O
break	O
;	O
case	O
kCharacters	int
:	O
GET_VALUE	O
(	O
AFM_TYPE_INTEGER	int
)	O
;	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
->	O
global_info	struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*(struct(int,union`)))),*(struct(double,*(struct(int,union`)))),*(struct(double,*(struct(int,union`)))),*(struct(double,*(struct(int,union`)))))
.	O
Characters	long
=	O
node	struct(int,union(*(char),*(char),double,long,*(struct(double,*(struct`))),enum(int,int)))
.	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
integer	long
;	O
break	O
;	O
case	O
kIsBaseFont	int
:	O
GET_VALUE	O
(	O
AFM_TYPE_BOOLEAN	int
)	O
;	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
->	O
global_info	struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*(struct(int,union`)))),*(struct(double,*(struct(int,union`)))),*(struct(double,*(struct(int,union`)))),*(struct(double,*(struct(int,union`)))))
.	O
IsBaseFont	enum(int,int)
=	O
node	struct(int,union(*(char),*(char),double,long,*(struct(double,*(struct`))),enum(int,int)))
.	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
boolean	enum(int,int)
;	O
break	O
;	O
case	O
kVVector	int
:	O
GET_VALUE	O
(	O
AFM_TYPE_NUMBER	int
)	O
;	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
->	O
global_info	struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*(struct(int,union`)))),*(struct(double,*(struct(int,union`)))),*(struct(double,*(struct(int,union`)))),*(struct(double,*(struct(int,union`)))))
.	O
VVector_0	double
=	O
node	struct(int,union(*(char),*(char),double,long,*(struct(double,*(struct`))),enum(int,int)))
.	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
number	double
;	O
GET_VALUE	O
(	O
AFM_TYPE_NUMBER	int
)	O
;	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
->	O
global_info	struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*(struct(int,union`)))),*(struct(double,*(struct(int,union`)))),*(struct(double,*(struct(int,union`)))),*(struct(double,*(struct(int,union`)))))
.	O
VVector_1	double
=	O
node	struct(int,union(*(char),*(char),double,long,*(struct(double,*(struct`))),enum(int,int)))
.	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
number	double
;	O
break	O
;	O
case	O
kIsFixedV	int
:	O
GET_VALUE	O
(	O
AFM_TYPE_BOOLEAN	int
)	O
;	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
->	O
global_info	struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*(struct(int,union`)))),*(struct(double,*(struct(int,union`)))),*(struct(double,*(struct(int,union`)))),*(struct(double,*(struct(int,union`)))))
.	O
IsFixedV	enum(int,int)
=	O
node	struct(int,union(*(char),*(char),double,long,*(struct(double,*(struct`))),enum(int,int)))
.	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
boolean	enum(int,int)
;	O
break	O
;	O
case	O
kCapHeight	int
:	O
GET_VALUE	O
(	O
AFM_TYPE_NUMBER	int
)	O
;	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
->	O
global_info	struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*(struct(int,union`)))),*(struct(double,*(struct(int,union`)))),*(struct(double,*(struct(int,union`)))),*(struct(double,*(struct(int,union`)))))
.	O
CapHeight	double
=	O
node	struct(int,union(*(char),*(char),double,long,*(struct(double,*(struct`))),enum(int,int)))
.	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
number	double
;	O
break	O
;	O
case	O
kXHeight	int
:	O
GET_VALUE	O
(	O
AFM_TYPE_NUMBER	int
)	O
;	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
->	O
global_info	struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*(struct(int,union`)))),*(struct(double,*(struct(int,union`)))),*(struct(double,*(struct(int,union`)))),*(struct(double,*(struct(int,union`)))))
.	O
XHeight	double
=	O
node	struct(int,union(*(char),*(char),double,long,*(struct(double,*(struct`))),enum(int,int)))
.	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
number	double
;	O
break	O
;	O
case	O
kAscender	int
:	O
GET_VALUE	O
(	O
AFM_TYPE_NUMBER	int
)	O
;	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
->	O
global_info	struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*(struct(int,union`)))),*(struct(double,*(struct(int,union`)))),*(struct(double,*(struct(int,union`)))),*(struct(double,*(struct(int,union`)))))
.	O
Ascender	double
=	O
node	struct(int,union(*(char),*(char),double,long,*(struct(double,*(struct`))),enum(int,int)))
.	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
number	double
;	O
break	O
;	O
case	O
kDescender	int
:	O
GET_VALUE	O
(	O
AFM_TYPE_NUMBER	int
)	O
;	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
->	O
global_info	struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*(struct(int,union`)))),*(struct(double,*(struct(int,union`)))),*(struct(double,*(struct(int,union`)))),*(struct(double,*(struct(int,union`)))))
.	O
Descender	double
=	O
node	struct(int,union(*(char),*(char),double,long,*(struct(double,*(struct`))),enum(int,int)))
.	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
number	double
;	O
break	O
;	O
case	O
kStartDirection	int
:	O
GET_VALUE	O
(	O
AFM_TYPE_INTEGER	int
)	O
;	O
wd	int
=	O
node	struct(int,union(*(char),*(char),double,long,*(struct(double,*(struct`))),enum(int,int)))
.	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
integer	long
;	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
->	O
writing_direction_metrics	array(struct(enum(int,int),double,double,double,double,double,enum(int,int)))
[	O
wd	int
]	O
.	O
is_valid	enum(int,int)
=	O
AFMTrue	int
;	O
break	O
;	O
case	O
kUnderlinePosition	int
:	O
GET_VALUE	O
(	O
AFM_TYPE_NUMBER	int
)	O
;	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
->	O
writing_direction_metrics	array(struct(enum(int,int),double,double,double,double,double,enum(int,int)))
[	O
wd	int
]	O
.	O
UnderlinePosition	double
=	O
node	struct(int,union(*(char),*(char),double,long,*(struct(double,*(struct`))),enum(int,int)))
.	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
number	double
;	O
break	O
;	O
case	O
kUnderlineThickness	int
:	O
GET_VALUE	O
(	O
AFM_TYPE_NUMBER	int
)	O
;	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
->	O
writing_direction_metrics	array(struct(enum(int,int),double,double,double,double,double,enum(int,int)))
[	O
wd	int
]	O
.	O
UnderlineThickness	double
=	O
node	struct(int,union(*(char),*(char),double,long,*(struct(double,*(struct`))),enum(int,int)))
.	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
number	double
;	O
break	O
;	O
case	O
kItalicAngle	int
:	O
GET_VALUE	O
(	O
AFM_TYPE_NUMBER	int
)	O
;	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
->	O
writing_direction_metrics	array(struct(enum(int,int),double,double,double,double,double,enum(int,int)))
[	O
wd	int
]	O
.	O
ItalicAngle	double
=	O
node	struct(int,union(*(char),*(char),double,long,*(struct(double,*(struct`))),enum(int,int)))
.	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
number	double
;	O
break	O
;	O
case	O
kCharWidth	int
:	O
GET_VALUE	O
(	O
AFM_TYPE_NUMBER	int
)	O
;	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
->	O
writing_direction_metrics	array(struct(enum(int,int),double,double,double,double,double,enum(int,int)))
[	O
wd	int
]	O
.	O
CharWidth_x	double
=	O
node	struct(int,union(*(char),*(char),double,long,*(struct(double,*(struct`))),enum(int,int)))
.	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
number	double
;	O
GET_VALUE	O
(	O
AFM_TYPE_NUMBER	int
)	O
;	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
->	O
writing_direction_metrics	array(struct(enum(int,int),double,double,double,double,double,enum(int,int)))
[	O
wd	int
]	O
.	O
CharWidth_y	double
=	O
node	struct(int,union(*(char),*(char),double,long,*(struct(double,*(struct`))),enum(int,int)))
.	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
number	double
;	O
break	O
;	O
case	O
kIsFixedPitch	int
:	O
GET_VALUE	O
(	O
AFM_TYPE_BOOLEAN	int
)	O
;	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
->	O
writing_direction_metrics	array(struct(enum(int,int),double,double,double,double,double,enum(int,int)))
[	O
wd	int
]	O
.	O
IsFixedPitch	enum(int,int)
=	O
node	struct(int,union(*(char),*(char),double,long,*(struct(double,*(struct`))),enum(int,int)))
.	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
boolean	enum(int,int)
;	O
break	O
;	O
case	O
kEndDirection	int
:	O
break	O
;	O
case	O
kStartCharMetrics	int
:	O
GET_VALUE	O
(	O
AFM_TYPE_INTEGER	int
)	O
;	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
->	O
num_character_metrics	long
=	O
node	struct(int,union(*(char),*(char),double,long,*(struct(double,*(struct`))),enum(int,int)))
.	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
integer	long
;	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
->	O
character_metrics	*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))
=	O
(	O
(	O
AFMIndividualCharacterMetrics	struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char))))
*	O
)	O
calloc	(long,long)->(*(void))
(	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
->	O
num_character_metrics	long
+	O
1	int
,	O
sizeof	O
(	O
AFMIndividualCharacterMetrics	struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char))))
)	O
)	O
)	O
;	O
if	O
(	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
->	O
character_metrics	*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))
==	O
NULL	O
)	O
parse_error	int
(	O
handle	*(struct)
,	O
AFM_ERROR_MEMORY	int
)	O
;	O
read_character_metrics	(*(struct(int,*(struct),array(struct(array(long),int,struct(array(long)))),int)),*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),array(char),int)),*(struct(*(struct(*`,*`,*`)),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct`),*(struct`),*(struct`),*(struct`)),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*`,double,double,double,double,double,double,double,*`)),long,*(struct(*`,long,*`)),long,*(struct(*`,*`,double,double)),long,*(struct(long,double,double,double,double)))))->(void)
(	O
handle	*(struct)
,	O
ctx	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),array(char),int))
,	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
)	O
;	O
break	O
;	O
case	O
kStartKernData	int
:	O
break	O
;	O
case	O
kStartKernPairs	int
:	O
if	O
(	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
->	O
info_level	int
&	O
AFM_I_KERN_PAIRS	int
)	O
{	O
GET_VALUE	O
(	O
AFM_TYPE_INTEGER	int
)	O
;	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
->	O
num_kern_pairs	long
=	O
node	struct(int,union(*(char),*(char),double,long,*(struct(double,*(struct`))),enum(int,int)))
.	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
integer	long
;	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
->	O
kern_pairs	*(struct(*(char),*(char),double,double))
=	O
(	O
AFMPairWiseKerning	struct(*(char),*(char),double,double)
*	O
)	O
calloc	(long,long)->(*(void))
(	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
->	O
num_kern_pairs	long
+	O
1	int
,	O
sizeof	O
(	O
AFMPairWiseKerning	struct(*(char),*(char),double,double)
)	O
)	O
;	O
if	O
(	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
->	O
kern_pairs	*(struct(*(char),*(char),double,double))
==	O
NULL	O
)	O
parse_error	int
(	O
handle	*(struct)
,	O
AFM_ERROR_MEMORY	int
)	O
;	O
read_kern_pairs	(*(struct(int,*(struct),array(struct(array(long),int,struct(array(long)))),int)),*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),array(char),int)),*(struct(*(struct(*`,*`,*`)),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct`),*(struct`),*(struct`),*(struct`)),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*`,double,double,double,double,double,double,double,*`)),long,*(struct(*`,long,*`)),long,*(struct(*`,*`,double,double)),long,*(struct(long,double,double,double,double)))))->(void)
(	O
handle	*(struct)
,	O
ctx	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),array(char),int))
,	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
)	O
;	O
}	O
else	O
{	O
do	O
{	O
(	O
void	O
)	O
get_line_token	(*(struct(int,*(struct),array(struct(array(long),int,struct(array(long)))),int)),*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),array(char),int)))->(int)
(	O
handle	*(struct)
,	O
ctx	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),array(char),int))
)	O
;	O
get_key	(*(struct(int,*(struct),array(struct(array(long),int,struct(array(long)))),int)),*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),array(char),int)),*(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)))->(void)
(	O
handle	*(struct)
,	O
ctx	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),array(char),int))
,	O
&	O
key	*(char)
)	O
;	O
}	O
while	O
(	O
key	*(char)
!=	O
kEndKernPairs	int
)	O
;	O
}	O
break	O
;	O
case	O
kStartTrackKern	int
:	O
if	O
(	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
->	O
info_level	int
&	O
AFM_I_TRACK_KERNS	int
)	O
{	O
GET_VALUE	O
(	O
AFM_TYPE_INTEGER	int
)	O
;	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
->	O
num_track_kerns	long
=	O
node	struct(int,union(*(char),*(char),double,long,*(struct(double,*(struct`))),enum(int,int)))
.	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
integer	long
;	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
->	O
track_kerns	*(struct(long,double,double,double,double))
=	O
(	O
AFMTrackKern	struct(long,double,double,double,double)
*	O
)	O
calloc	(long,long)->(*(void))
(	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
->	O
num_track_kerns	long
+	O
1	int
,	O
sizeof	O
(	O
AFMTrackKern	struct(long,double,double,double,double)
)	O
)	O
;	O
if	O
(	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
->	O
track_kerns	*(struct(long,double,double,double,double))
==	O
NULL	O
)	O
parse_error	int
(	O
handle	*(struct)
,	O
AFM_ERROR_MEMORY	int
)	O
;	O
read_track_kerns	(*(struct(int,*(struct),array(struct(array(long),int,struct(array(long)))),int)),*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),array(char),int)),*(struct(*(struct(*`,*`,*`)),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct`),*(struct`),*(struct`),*(struct`)),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*`,double,double,double,double,double,double,double,*`)),long,*(struct(*`,long,*`)),long,*(struct(*`,*`,double,double)),long,*(struct(long,double,double,double,double)))))->(void)
(	O
handle	*(struct)
,	O
ctx	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),array(char),int))
,	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
)	O
;	O
}	O
else	O
{	O
do	O
{	O
(	O
void	O
)	O
get_line_token	(*(struct(int,*(struct),array(struct(array(long),int,struct(array(long)))),int)),*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),array(char),int)))->(int)
(	O
handle	*(struct)
,	O
ctx	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),array(char),int))
)	O
;	O
get_key	(*(struct(int,*(struct),array(struct(array(long),int,struct(array(long)))),int)),*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),array(char),int)),*(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)))->(void)
(	O
handle	*(struct)
,	O
ctx	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),array(char),int))
,	O
&	O
key	*(char)
)	O
;	O
}	O
while	O
(	O
key	*(char)
!=	O
kEndTrackKern	int
)	O
;	O
}	O
break	O
;	O
case	O
kEndKernData	int
:	O
break	O
;	O
case	O
kStartComposites	int
:	O
if	O
(	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
->	O
info_level	int
&	O
AFM_I_COMPOSITES	int
)	O
{	O
GET_VALUE	O
(	O
AFM_TYPE_INTEGER	int
)	O
;	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
->	O
num_composites	long
=	O
node	struct(int,union(*(char),*(char),double,long,*(struct(double,*(struct`))),enum(int,int)))
.	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
integer	long
;	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
->	O
composites	*(struct(*(char),long,*(struct(*(char),double,double))))
=	O
(	O
AFMComposite	struct(*(char),long,*(struct(*(char),double,double)))
*	O
)	O
calloc	(long,long)->(*(void))
(	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
->	O
num_composites	long
+	O
1	int
,	O
sizeof	O
(	O
AFMComposite	struct(*(char),long,*(struct(*(char),double,double)))
)	O
)	O
;	O
if	O
(	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
->	O
composites	*(struct(*(char),long,*(struct(*(char),double,double))))
==	O
NULL	O
)	O
parse_error	int
(	O
handle	*(struct)
,	O
AFM_ERROR_MEMORY	int
)	O
;	O
read_composites	(*(struct(int,*(struct),array(struct(array(long),int,struct(array(long)))),int)),*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),array(char),int)),*(struct(*(struct(*`,*`,*`)),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct`),*(struct`),*(struct`),*(struct`)),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*`,double,double,double,double,double,double,double,*`)),long,*(struct(*`,long,*`)),long,*(struct(*`,*`,double,double)),long,*(struct(long,double,double,double,double)))))->(void)
(	O
handle	*(struct)
,	O
ctx	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),array(char),int))
,	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
)	O
;	O
}	O
else	O
{	O
do	O
{	O
(	O
void	O
)	O
get_line_token	(*(struct(int,*(struct),array(struct(array(long),int,struct(array(long)))),int)),*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),array(char),int)))->(int)
(	O
handle	*(struct)
,	O
ctx	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),array(char),int))
)	O
;	O
get_key	(*(struct(int,*(struct),array(struct(array(long),int,struct(array(long)))),int)),*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),array(char),int)),*(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)))->(void)
(	O
handle	*(struct)
,	O
ctx	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),array(char),int))
,	O
&	O
key	*(char)
)	O
;	O
}	O
while	O
(	O
key	*(char)
!=	O
kEndComposites	int
)	O
;	O
}	O
break	O
;	O
default	O
:	O
break	O
;	O
}	O
}	O
fclose	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
ctx	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),array(char),int))
->	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
if	O
(	O
!	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
->	O
writing_direction_metrics	array(struct(enum(int,int),double,double,double,double,double,enum(int,int)))
[	O
0	int
]	O
.	O
is_valid	enum(int,int)
&&	O
!	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
->	O
writing_direction_metrics	array(struct(enum(int,int),double,double,double,double,double,enum(int,int)))
[	O
1	int
]	O
.	O
is_valid	enum(int,int)
)	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
->	O
writing_direction_metrics	array(struct(enum(int,int),double,double,double,double,double,enum(int,int)))
[	O
0	int
]	O
.	O
is_valid	enum(int,int)
=	O
AFMTrue	int
;	O
if	O
(	O
!	O
strhash_get	(*(struct),*(char),int,*(*(void)))->(int)
(	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
->	O
private	*(struct)
->	O
fontnames	*(struct)
,	O
"space"	*(char)
,	O
5	int
,	O
(	O
void	O
*	O
)	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
->	O
private	*(struct)
->	O
undef	*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))
)	O
)	O
{	O
assert	O
(	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
->	O
num_character_metrics	long
>	O
0	int
)	O
;	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
->	O
private	*(struct)
->	O
undef	*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))
=	O
&	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
->	O
character_metrics	*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))
[	O
0	int
]	O
;	O
}	O
if	O
(	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
->	O
writing_direction_metrics	array(struct(enum(int,int),double,double,double,double,double,enum(int,int)))
[	O
0	int
]	O
.	O
is_valid	enum(int,int)
&&	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
->	O
writing_direction_metrics	array(struct(enum(int,int),double,double,double,double,double,enum(int,int)))
[	O
0	int
]	O
.	O
IsFixedPitch	enum(int,int)
)	O
{	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
->	O
writing_direction_metrics	array(struct(enum(int,int),double,double,double,double,double,enum(int,int)))
[	O
0	int
]	O
.	O
CharWidth_x	double
=	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
->	O
character_metrics	*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))
[	O
0	int
]	O
.	O
w0x	double
;	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
->	O
writing_direction_metrics	array(struct(enum(int,int),double,double,double,double,double,enum(int,int)))
[	O
0	int
]	O
.	O
CharWidth_y	double
=	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
->	O
character_metrics	*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))
[	O
0	int
]	O
.	O
w0y	double
;	O
}	O
if	O
(	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
->	O
writing_direction_metrics	array(struct(enum(int,int),double,double,double,double,double,enum(int,int)))
[	O
1	int
]	O
.	O
is_valid	enum(int,int)
&&	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
->	O
writing_direction_metrics	array(struct(enum(int,int),double,double,double,double,double,enum(int,int)))
[	O
1	int
]	O
.	O
IsFixedPitch	enum(int,int)
)	O
{	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
->	O
writing_direction_metrics	array(struct(enum(int,int),double,double,double,double,double,enum(int,int)))
[	O
1	int
]	O
.	O
CharWidth_x	double
=	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
->	O
character_metrics	*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))
[	O
1	int
]	O
.	O
w1x	double
;	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
->	O
writing_direction_metrics	array(struct(enum(int,int),double,double,double,double,double,enum(int,int)))
[	O
1	int
]	O
.	O
CharWidth_y	double
=	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
->	O
character_metrics	*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))
[	O
1	int
]	O
.	O
w1y	double
;	O
}	O
}	O
static	O
void	O
parse_error	int
(	O
AFMHandle	*(struct)
handle	*(struct)
,	O
AFMError	int
error	int
)	O
{	O
handle	*(struct)
->	O
parse_error	int
=	O
error	int
;	O
longjmp	(array(struct(array(long),int,struct(array(long)))),int)->(void)
(	O
handle	*(struct)
->	O
jmpbuf	array(struct(array(long),int,struct(array(long))))
,	O
1	int
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"AFM: fatal internal longjmp() error.\n"	*(char)
)	O
;	O
abort	()->(void)
(	O
)	O
;	O
}	O
static	O
int	O
get_token	(*(struct(int,*(struct),array(struct(array(long),int,struct(array(long)))),int)),*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),array(char),int)))->(int)
(	O
AFMHandle	*(struct)
handle	*(struct)
,	O
ParseCtx	struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),array(char),int)
*	O
ctx	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),array(char),int))
)	O
{	O
int	O
ch	char
;	O
int	O
i	int
;	O
while	O
(	O
(	O
ch	char
=	O
getc	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
ctx	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),array(char),int))
->	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
)	O
!=	O
EOF	O
)	O
if	O
(	O
!	O
ISSPACE	O
(	O
ch	char
)	O
)	O
break	O
;	O
if	O
(	O
ch	char
==	O
EOF	O
)	O
return	O
0	int
;	O
ungetc	(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
ch	char
,	O
ctx	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),array(char),int))
->	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
for	O
(	O
i	int
=	O
0	int
,	O
ch	char
=	O
getc	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
ctx	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),array(char),int))
->	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
i	int
<	O
sizeof	O
(	O
ctx	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),array(char),int))
->	O
token	array(char)
)	O
&&	O
ch	char
!=	O
EOF	O
&&	O
!	O
ISSPACE	O
(	O
ch	char
)	O
;	O
i	int
++	O
,	O
ch	char
=	O
getc	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
ctx	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),array(char),int))
->	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
)	O
ctx	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),array(char),int))
->	O
token	array(char)
[	O
i	int
]	O
=	O
ch	char
;	O
if	O
(	O
i	int
>=	O
sizeof	O
(	O
ctx	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),array(char),int))
->	O
token	array(char)
)	O
)	O
parse_error	int
(	O
handle	*(struct)
,	O
AFM_ERROR_SYNTAX	int
)	O
;	O
ctx	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),array(char),int))
->	O
token	array(char)
[	O
i	int
]	O
=	O
'\0'	O
;	O
ctx	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),array(char),int))
->	O
tokenlen	int
=	O
i	int
;	O
return	O
1	int
;	O
}	O
static	O
int	O
get_line_token	(*(struct(int,*(struct),array(struct(array(long),int,struct(array(long)))),int)),*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),array(char),int)))->(int)
(	O
AFMHandle	*(struct)
handle	*(struct)
,	O
ParseCtx	struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),array(char),int)
*	O
ctx	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),array(char),int))
)	O
{	O
int	O
i	int
,	O
ch	char
;	O
while	O
(	O
(	O
ch	char
=	O
getc	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
ctx	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),array(char),int))
->	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
)	O
!=	O
EOF	O
)	O
if	O
(	O
!	O
ISSPACE	O
(	O
ch	char
)	O
)	O
break	O
;	O
if	O
(	O
ch	char
==	O
EOF	O
)	O
return	O
0	int
;	O
ungetc	(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
ch	char
,	O
ctx	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),array(char),int))
->	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
for	O
(	O
i	int
=	O
0	int
,	O
ch	char
=	O
getc	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
ctx	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),array(char),int))
->	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
i	int
<	O
sizeof	O
(	O
ctx	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),array(char),int))
->	O
token	array(char)
)	O
&&	O
ch	char
!=	O
EOF	O
&&	O
ch	char
!=	O
'\n'	O
;	O
i	int
++	O
,	O
ch	char
=	O
getc	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
ctx	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),array(char),int))
->	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
)	O
ctx	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),array(char),int))
->	O
token	array(char)
[	O
i	int
]	O
=	O
ch	char
;	O
if	O
(	O
i	int
>=	O
sizeof	O
(	O
ctx	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),array(char),int))
->	O
token	array(char)
)	O
)	O
parse_error	int
(	O
handle	*(struct)
,	O
AFM_ERROR_SYNTAX	int
)	O
;	O
for	O
(	O
i	int
--	O
;	O
i	int
>=	O
0	int
&&	O
ISSPACE	O
(	O
ctx	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),array(char),int))
->	O
token	array(char)
[	O
i	int
]	O
)	O
;	O
i	int
--	O
)	O
;	O
i	int
++	O
;	O
ctx	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),array(char),int))
->	O
token	array(char)
[	O
i	int
]	O
=	O
'\0'	O
;	O
ctx	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),array(char),int))
->	O
tokenlen	int
=	O
i	int
;	O
return	O
1	int
;	O
}	O
static	O
int	O
match_key	(*(char))->(int)
(	O
char	O
*	O
key	*(char)
)	O
{	O
int	O
lower	int
=	O
0	int
;	O
int	O
upper	int
=	O
NUM_KEYS	O
;	O
int	O
midpoint	int
,	O
cmpvalue	int
;	O
AFMBoolean	enum(int,int)
found	enum(int,int)
=	O
AFMFalse	int
;	O
while	O
(	O
(	O
upper	int
>=	O
lower	int
)	O
&&	O
!	O
found	enum(int,int)
)	O
{	O
midpoint	int
=	O
(	O
lower	int
+	O
upper	int
)	O
/	O
2	int
;	O
if	O
(	O
keynames	array(struct(*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)))
[	O
midpoint	int
]	O
.	O
name	*(char)
==	O
NULL	O
)	O
break	O
;	O
cmpvalue	int
=	O
strcmp	(*(char),*(char))->(int)
(	O
key	*(char)
,	O
keynames	array(struct(*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)))
[	O
midpoint	int
]	O
.	O
name	*(char)
)	O
;	O
if	O
(	O
cmpvalue	int
==	O
0	int
)	O
found	enum(int,int)
=	O
AFMTrue	int
;	O
else	O
if	O
(	O
cmpvalue	int
<	O
0	int
)	O
upper	int
=	O
midpoint	int
-	O
1	int
;	O
else	O
lower	int
=	O
midpoint	int
+	O
1	int
;	O
}	O
if	O
(	O
found	enum(int,int)
)	O
return	O
keynames	array(struct(*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)))
[	O
midpoint	int
]	O
.	O
key	*(char)
;	O
return	O
-	O
1	int
;	O
}	O
static	O
void	O
get_key	(*(struct(int,*(struct),array(struct(array(long),int,struct(array(long)))),int)),*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),array(char),int)),*(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)))->(void)
(	O
AFMHandle	*(struct)
handle	*(struct)
,	O
ParseCtx	struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),array(char),int)
*	O
ctx	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),array(char),int))
,	O
AFMKey	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
*	O
key_return	*(*(char))
)	O
{	O
int	O
key	*(char)
;	O
char	O
msg	array(char)
[	O
256	int
]	O
;	O
while	O
(	O
1	int
)	O
{	O
if	O
(	O
!	O
get_token	(*(struct(int,*(struct),array(struct(array(long),int,struct(array(long)))),int)),*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),array(char),int)))->(int)
(	O
handle	*(struct)
,	O
ctx	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),array(char),int))
)	O
)	O
parse_error	int
(	O
handle	*(struct)
,	O
AFM_ERROR_SYNTAX	int
)	O
;	O
key	*(char)
=	O
match_key	(*(char))->(int)
(	O
ctx	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),array(char),int))
->	O
token	array(char)
)	O
;	O
if	O
(	O
key	*(char)
>=	O
0	int
)	O
{	O
*	O
key_return	*(*(char))
=	O
key	*(char)
;	O
return	O
;	O
}	O
sprintf	(*(char),*(char))->(int)
(	O
msg	array(char)
,	O
"skipping key \"%s\""	*(char)
,	O
ctx	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),array(char),int))
->	O
token	array(char)
)	O
;	O
afm_error	(*(struct(int,*(struct),array(struct(array(long),int,struct(array(long)))),int)),*(char))->(void)
(	O
handle	*(struct)
,	O
msg	array(char)
)	O
;	O
get_line_token	(*(struct(int,*(struct),array(struct(array(long),int,struct(array(long)))),int)),*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),array(char),int)))->(int)
(	O
handle	*(struct)
,	O
ctx	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),array(char),int))
)	O
;	O
}	O
}	O
static	O
void	O
get_type	(*(struct(int,*(struct),array(struct(array(long),int,struct(array(long)))),int)),*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),array(char),int)),int,*(struct(int,union(*(char),*(char),double,long,*(struct`),enum(int,int)))))->(void)
(	O
AFMHandle	*(struct)
handle	*(struct)
,	O
ParseCtx	struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),array(char),int)
*	O
ctx	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),array(char),int))
,	O
int	O
type	int
,	O
AFMNode	struct(int,union(*(char),*(char),double,long,*(struct),enum(int,int)))
*	O
type_return	*(struct(int,union(*(char),*(char),double,long,*(struct(double,*`)),enum(int,int))))
)	O
{	O
char	O
buf	*(char)
[	O
256	int
]	O
;	O
switch	O
(	O
type	int
)	O
{	O
case	O
AFM_TYPE_STRING	int
:	O
if	O
(	O
!	O
get_line_token	(*(struct(int,*(struct),array(struct(array(long),int,struct(array(long)))),int)),*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),array(char),int)))->(int)
(	O
handle	*(struct)
,	O
ctx	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),array(char),int))
)	O
)	O
parse_error	int
(	O
handle	*(struct)
,	O
AFM_ERROR_SYNTAX	int
)	O
;	O
type_return	*(struct(int,union(*(char),*(char),double,long,*(struct(double,*`)),enum(int,int))))
->	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
string	*(char)
=	O
(	O
AFMString	*(char)
)	O
calloc	(long,long)->(*(void))
(	O
1	int
,	O
ctx	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),array(char),int))
->	O
tokenlen	int
+	O
1	int
)	O
;	O
if	O
(	O
type_return	*(struct(int,union(*(char),*(char),double,long,*(struct(double,*`)),enum(int,int))))
->	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
string	*(char)
==	O
NULL	O
)	O
parse_error	int
(	O
handle	*(struct)
,	O
AFM_ERROR_MEMORY	int
)	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
type_return	*(struct(int,union(*(char),*(char),double,long,*(struct(double,*`)),enum(int,int))))
->	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
string	*(char)
,	O
ctx	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),array(char),int))
->	O
token	array(char)
,	O
ctx	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),array(char),int))
->	O
tokenlen	int
)	O
;	O
break	O
;	O
case	O
AFM_TYPE_NAME	int
:	O
if	O
(	O
!	O
get_token	(*(struct(int,*(struct),array(struct(array(long),int,struct(array(long)))),int)),*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),array(char),int)))->(int)
(	O
handle	*(struct)
,	O
ctx	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),array(char),int))
)	O
)	O
parse_error	int
(	O
handle	*(struct)
,	O
AFM_ERROR_SYNTAX	int
)	O
;	O
type_return	*(struct(int,union(*(char),*(char),double,long,*(struct(double,*`)),enum(int,int))))
->	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
name	*(char)
=	O
(	O
AFMName	*(char)
)	O
calloc	(long,long)->(*(void))
(	O
1	int
,	O
ctx	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),array(char),int))
->	O
tokenlen	int
+	O
1	int
)	O
;	O
if	O
(	O
type_return	*(struct(int,union(*(char),*(char),double,long,*(struct(double,*`)),enum(int,int))))
->	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
string	*(char)
==	O
NULL	O
)	O
parse_error	int
(	O
handle	*(struct)
,	O
AFM_ERROR_MEMORY	int
)	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
type_return	*(struct(int,union(*(char),*(char),double,long,*(struct(double,*`)),enum(int,int))))
->	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
name	*(char)
,	O
ctx	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),array(char),int))
->	O
token	array(char)
,	O
ctx	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),array(char),int))
->	O
tokenlen	int
)	O
;	O
break	O
;	O
case	O
AFM_TYPE_NUMBER	int
:	O
if	O
(	O
!	O
get_token	(*(struct(int,*(struct),array(struct(array(long),int,struct(array(long)))),int)),*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),array(char),int)))->(int)
(	O
handle	*(struct)
,	O
ctx	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),array(char),int))
)	O
)	O
parse_error	int
(	O
handle	*(struct)
,	O
AFM_ERROR_SYNTAX	int
)	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
buf	*(char)
,	O
ctx	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),array(char),int))
->	O
token	array(char)
,	O
ctx	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),array(char),int))
->	O
tokenlen	int
)	O
;	O
buf	*(char)
[	O
ctx	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),array(char),int))
->	O
tokenlen	int
]	O
=	O
'\0'	O
;	O
type_return	*(struct(int,union(*(char),*(char),double,long,*(struct(double,*`)),enum(int,int))))
->	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
number	double
=	O
atof	(*(char))->(double)
(	O
buf	*(char)
)	O
;	O
break	O
;	O
case	O
AFM_TYPE_INTEGER	int
:	O
if	O
(	O
!	O
get_token	(*(struct(int,*(struct),array(struct(array(long),int,struct(array(long)))),int)),*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),array(char),int)))->(int)
(	O
handle	*(struct)
,	O
ctx	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),array(char),int))
)	O
)	O
parse_error	int
(	O
handle	*(struct)
,	O
AFM_ERROR_SYNTAX	int
)	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
buf	*(char)
,	O
ctx	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),array(char),int))
->	O
token	array(char)
,	O
ctx	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),array(char),int))
->	O
tokenlen	int
)	O
;	O
buf	*(char)
[	O
ctx	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),array(char),int))
->	O
tokenlen	int
]	O
=	O
'\0'	O
;	O
type_return	*(struct(int,union(*(char),*(char),double,long,*(struct(double,*`)),enum(int,int))))
->	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
integer	long
=	O
atoi	(*(char))->(int)
(	O
buf	*(char)
)	O
;	O
break	O
;	O
case	O
AFM_TYPE_ARRAY	int
:	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"Array types not implemented yet.\n"	*(char)
)	O
;	O
abort	()->(void)
(	O
)	O
;	O
break	O
;	O
case	O
AFM_TYPE_BOOLEAN	int
:	O
if	O
(	O
!	O
get_token	(*(struct(int,*(struct),array(struct(array(long),int,struct(array(long)))),int)),*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),array(char),int)))->(int)
(	O
handle	*(struct)
,	O
ctx	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),array(char),int))
)	O
)	O
parse_error	int
(	O
handle	*(struct)
,	O
AFM_ERROR_SYNTAX	int
)	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
buf	*(char)
,	O
ctx	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),array(char),int))
->	O
token	array(char)
,	O
ctx	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),array(char),int))
->	O
tokenlen	int
)	O
;	O
buf	*(char)
[	O
ctx	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),array(char),int))
->	O
tokenlen	int
]	O
=	O
'\0'	O
;	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
buf	*(char)
,	O
"true"	*(char)
)	O
==	O
0	int
)	O
type_return	*(struct(int,union(*(char),*(char),double,long,*(struct(double,*`)),enum(int,int))))
->	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
boolean	enum(int,int)
=	O
AFMTrue	int
;	O
else	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
buf	*(char)
,	O
"false"	*(char)
)	O
==	O
0	int
)	O
type_return	*(struct(int,union(*(char),*(char),double,long,*(struct(double,*`)),enum(int,int))))
->	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
boolean	enum(int,int)
=	O
AFMFalse	int
;	O
else	O
parse_error	int
(	O
handle	*(struct)
,	O
AFM_ERROR_SYNTAX	int
)	O
;	O
break	O
;	O
default	O
:	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"get_type(): illegal type %d\n"	*(char)
,	O
type_return	*(struct(int,union(*(char),*(char),double,long,*(struct(double,*`)),enum(int,int))))
->	O
type	int
)	O
;	O
abort	()->(void)
(	O
)	O
;	O
break	O
;	O
}	O
}	O
static	O
void	O
read_character_metrics	(*(struct(int,*(struct),array(struct(array(long),int,struct(array(long)))),int)),*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),array(char),int)),*(struct(*(struct(*`,*`,*`)),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct`),*(struct`),*(struct`),*(struct`)),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*`,double,double,double,double,double,double,double,*`)),long,*(struct(*`,long,*`)),long,*(struct(*`,*`,double,double)),long,*(struct(long,double,double,double,double)))))->(void)
(	O
AFMHandle	*(struct)
handle	*(struct)
,	O
ParseCtx	struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),array(char),int)
*	O
ctx	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),array(char),int))
,	O
AFMFont	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
)	O
{	O
int	O
i	int
=	O
0	int
;	O
AFMNode	struct(int,union(*(char),*(char),double,long,*(struct),enum(int,int)))
node	struct(int,union(*(char),*(char),double,long,*(struct(double,*(struct`))),enum(int,int)))
;	O
AFMIndividualCharacterMetrics	struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char))))
*	O
cm	*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))
=	O
NULL	O
;	O
AFMKey	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
key	*(char)
;	O
int	O
done	int
=	O
0	int
;	O
int	O
first	int
=	O
1	int
;	O
while	O
(	O
!	O
done	int
)	O
{	O
get_key	(*(struct(int,*(struct),array(struct(array(long),int,struct(array(long)))),int)),*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),array(char),int)),*(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)))->(void)
(	O
handle	*(struct)
,	O
ctx	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),array(char),int))
,	O
&	O
key	*(char)
)	O
;	O
switch	O
(	O
key	*(char)
)	O
{	O
case	O
kC	int
:	O
if	O
(	O
first	int
)	O
first	int
=	O
0	int
;	O
else	O
i	int
++	O
;	O
if	O
(	O
i	int
>=	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
->	O
num_character_metrics	long
)	O
parse_error	int
(	O
handle	*(struct)
,	O
AFM_ERROR_SYNTAX	int
)	O
;	O
cm	*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))
=	O
&	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
->	O
character_metrics	*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))
[	O
i	int
]	O
;	O
GET_VALUE	O
(	O
AFM_TYPE_INTEGER	int
)	O
;	O
cm	*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))
->	O
character_code	long
=	O
node	struct(int,union(*(char),*(char),double,long,*(struct(double,*(struct`))),enum(int,int)))
.	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
integer	long
;	O
if	O
(	O
cm	*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))
->	O
character_code	long
>=	O
0	int
&&	O
cm	*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))
->	O
character_code	long
<=	O
255	int
)	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
->	O
encoding	array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char))))))
[	O
cm	*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))
->	O
character_code	long
]	O
=	O
cm	*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))
;	O
break	O
;	O
case	O
kCH	int
:	O
printf	(*(char))->(int)
(	O
"* CH\n"	*(char)
)	O
;	O
break	O
;	O
case	O
kWX	int
:	O
case	O
kW0X	int
:	O
GET_VALUE	O
(	O
AFM_TYPE_NUMBER	int
)	O
;	O
cm	*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))
->	O
w0x	double
=	O
node	struct(int,union(*(char),*(char),double,long,*(struct(double,*(struct`))),enum(int,int)))
.	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
number	double
;	O
cm	*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))
->	O
w0y	double
=	O
0.0	int
;	O
break	O
;	O
case	O
kW1X	int
:	O
GET_VALUE	O
(	O
AFM_TYPE_NUMBER	int
)	O
;	O
cm	*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))
->	O
w1x	double
=	O
node	struct(int,union(*(char),*(char),double,long,*(struct(double,*(struct`))),enum(int,int)))
.	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
number	double
;	O
cm	*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))
->	O
w1y	double
=	O
0.0	int
;	O
break	O
;	O
case	O
kWY	int
:	O
case	O
kW0Y	int
:	O
GET_VALUE	O
(	O
AFM_TYPE_NUMBER	int
)	O
;	O
cm	*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))
->	O
w0y	double
=	O
node	struct(int,union(*(char),*(char),double,long,*(struct(double,*(struct`))),enum(int,int)))
.	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
number	double
;	O
cm	*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))
->	O
w0x	double
=	O
0.0	int
;	O
break	O
;	O
case	O
kW1Y	int
:	O
GET_VALUE	O
(	O
AFM_TYPE_NUMBER	int
)	O
;	O
cm	*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))
->	O
w1y	double
=	O
node	struct(int,union(*(char),*(char),double,long,*(struct(double,*(struct`))),enum(int,int)))
.	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
number	double
;	O
cm	*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))
->	O
w1x	double
=	O
0.0	int
;	O
break	O
;	O
case	O
kW	int
:	O
case	O
kW0	int
:	O
GET_VALUE	O
(	O
AFM_TYPE_NUMBER	int
)	O
;	O
cm	*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))
->	O
w0x	double
=	O
node	struct(int,union(*(char),*(char),double,long,*(struct(double,*(struct`))),enum(int,int)))
.	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
number	double
;	O
GET_VALUE	O
(	O
AFM_TYPE_NUMBER	int
)	O
;	O
cm	*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))
->	O
w0y	double
=	O
node	struct(int,union(*(char),*(char),double,long,*(struct(double,*(struct`))),enum(int,int)))
.	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
number	double
;	O
break	O
;	O
case	O
kW1	int
:	O
GET_VALUE	O
(	O
AFM_TYPE_NUMBER	int
)	O
;	O
cm	*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))
->	O
w1x	double
=	O
node	struct(int,union(*(char),*(char),double,long,*(struct(double,*(struct`))),enum(int,int)))
.	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
number	double
;	O
GET_VALUE	O
(	O
AFM_TYPE_NUMBER	int
)	O
;	O
cm	*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))
->	O
w1y	double
=	O
node	struct(int,union(*(char),*(char),double,long,*(struct(double,*(struct`))),enum(int,int)))
.	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
number	double
;	O
break	O
;	O
case	O
kVV	int
:	O
GET_VALUE	O
(	O
AFM_TYPE_NUMBER	int
)	O
;	O
cm	*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))
->	O
vv_x	double
=	O
node	struct(int,union(*(char),*(char),double,long,*(struct(double,*(struct`))),enum(int,int)))
.	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
number	double
;	O
GET_VALUE	O
(	O
AFM_TYPE_NUMBER	int
)	O
;	O
cm	*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))
->	O
vv_y	double
=	O
node	struct(int,union(*(char),*(char),double,long,*(struct(double,*(struct`))),enum(int,int)))
.	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
number	double
;	O
break	O
;	O
case	O
kN	int
:	O
GET_VALUE	O
(	O
AFM_TYPE_NAME	int
)	O
;	O
cm	*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))
->	O
name	*(char)
=	O
node	struct(int,union(*(char),*(char),double,long,*(struct(double,*(struct`))),enum(int,int)))
.	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
name	*(char)
;	O
if	O
(	O
!	O
strhash_put	(*(struct),*(char),int,*(void),*(*(void)))->(int)
(	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
->	O
private	*(struct)
->	O
fontnames	*(struct)
,	O
cm	*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))
->	O
name	*(char)
,	O
strlen	(*(char))->(long)
(	O
cm	*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))
->	O
name	*(char)
)	O
,	O
cm	*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))
,	O
NULL	O
)	O
)	O
parse_error	int
(	O
handle	*(struct)
,	O
AFM_ERROR_MEMORY	int
)	O
;	O
break	O
;	O
case	O
kB	int
:	O
GET_VALUE	O
(	O
AFM_TYPE_NUMBER	int
)	O
;	O
cm	*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))
->	O
llx	double
=	O
node	struct(int,union(*(char),*(char),double,long,*(struct(double,*(struct`))),enum(int,int)))
.	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
number	double
;	O
GET_VALUE	O
(	O
AFM_TYPE_NUMBER	int
)	O
;	O
cm	*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))
->	O
lly	double
=	O
node	struct(int,union(*(char),*(char),double,long,*(struct(double,*(struct`))),enum(int,int)))
.	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
number	double
;	O
GET_VALUE	O
(	O
AFM_TYPE_NUMBER	int
)	O
;	O
cm	*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))
->	O
urx	double
=	O
node	struct(int,union(*(char),*(char),double,long,*(struct(double,*(struct`))),enum(int,int)))
.	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
number	double
;	O
GET_VALUE	O
(	O
AFM_TYPE_NUMBER	int
)	O
;	O
cm	*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))
->	O
ury	double
=	O
node	struct(int,union(*(char),*(char),double,long,*(struct(double,*(struct`))),enum(int,int)))
.	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
number	double
;	O
break	O
;	O
case	O
kL	int
:	O
get_line_token	(*(struct(int,*(struct),array(struct(array(long),int,struct(array(long)))),int)),*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),array(char),int)))->(int)
(	O
handle	*(struct)
,	O
ctx	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),array(char),int))
)	O
;	O
break	O
;	O
case	O
kEndCharMetrics	int
:	O
if	O
(	O
i	int
!=	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
->	O
num_character_metrics	long
-	O
1	int
)	O
{	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
->	O
num_character_metrics	long
=	O
i	int
+	O
1	int
;	O
}	O
done	int
=	O
1	int
;	O
break	O
;	O
default	O
:	O
parse_error	int
(	O
handle	*(struct)
,	O
AFM_ERROR_SYNTAX	int
)	O
;	O
break	O
;	O
}	O
}	O
}	O
static	O
void	O
read_kern_pairs	(*(struct(int,*(struct),array(struct(array(long),int,struct(array(long)))),int)),*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),array(char),int)),*(struct(*(struct(*`,*`,*`)),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct`),*(struct`),*(struct`),*(struct`)),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*`,double,double,double,double,double,double,double,*`)),long,*(struct(*`,long,*`)),long,*(struct(*`,*`,double,double)),long,*(struct(long,double,double,double,double)))))->(void)
(	O
AFMHandle	*(struct)
handle	*(struct)
,	O
ParseCtx	struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),array(char),int)
*	O
ctx	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),array(char),int))
,	O
AFMFont	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
)	O
{	O
int	O
i	int
;	O
AFMNode	struct(int,union(*(char),*(char),double,long,*(struct),enum(int,int)))
node	struct(int,union(*(char),*(char),double,long,*(struct(double,*(struct`))),enum(int,int)))
;	O
AFMPairWiseKerning	struct(*(char),*(char),double,double)
*	O
kp	*(struct(*(char),*(char),double,double))
;	O
AFMKey	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
key	*(char)
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
->	O
num_kern_pairs	long
;	O
i	int
++	O
)	O
{	O
kp	*(struct(*(char),*(char),double,double))
=	O
&	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
->	O
kern_pairs	*(struct(*(char),*(char),double,double))
[	O
i	int
]	O
;	O
get_key	(*(struct(int,*(struct),array(struct(array(long),int,struct(array(long)))),int)),*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),array(char),int)),*(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)))->(void)
(	O
handle	*(struct)
,	O
ctx	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),array(char),int))
,	O
&	O
key	*(char)
)	O
;	O
switch	O
(	O
key	*(char)
)	O
{	O
case	O
kKP	int
:	O
case	O
kKPX	int
:	O
case	O
kKPY	int
:	O
GET_VALUE	O
(	O
AFM_TYPE_NAME	int
)	O
;	O
kp	*(struct(*(char),*(char),double,double))
->	O
name1	*(char)
=	O
node	struct(int,union(*(char),*(char),double,long,*(struct(double,*(struct`))),enum(int,int)))
.	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
name	*(char)
;	O
GET_VALUE	O
(	O
AFM_TYPE_NAME	int
)	O
;	O
kp	*(struct(*(char),*(char),double,double))
->	O
name2	*(char)
=	O
node	struct(int,union(*(char),*(char),double,long,*(struct(double,*(struct`))),enum(int,int)))
.	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
name	*(char)
;	O
GET_VALUE	O
(	O
AFM_TYPE_NUMBER	int
)	O
;	O
switch	O
(	O
key	*(char)
)	O
{	O
case	O
kKP	int
:	O
kp	*(struct(*(char),*(char),double,double))
->	O
kx	double
=	O
node	struct(int,union(*(char),*(char),double,long,*(struct(double,*(struct`))),enum(int,int)))
.	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
number	double
;	O
GET_VALUE	O
(	O
AFM_TYPE_NUMBER	int
)	O
;	O
kp	*(struct(*(char),*(char),double,double))
->	O
ky	double
=	O
node	struct(int,union(*(char),*(char),double,long,*(struct(double,*(struct`))),enum(int,int)))
.	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
number	double
;	O
break	O
;	O
case	O
kKPX	int
:	O
kp	*(struct(*(char),*(char),double,double))
->	O
kx	double
=	O
node	struct(int,union(*(char),*(char),double,long,*(struct(double,*(struct`))),enum(int,int)))
.	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
number	double
;	O
kp	*(struct(*(char),*(char),double,double))
->	O
ky	double
=	O
0.0	int
;	O
break	O
;	O
case	O
kKPY	int
:	O
kp	*(struct(*(char),*(char),double,double))
->	O
ky	double
=	O
node	struct(int,union(*(char),*(char),double,long,*(struct(double,*(struct`))),enum(int,int)))
.	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
number	double
;	O
kp	*(struct(*(char),*(char),double,double))
->	O
kx	double
=	O
0.0	int
;	O
break	O
;	O
default	O
:	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"AFM: fatal corruption\n"	*(char)
)	O
;	O
abort	()->(void)
(	O
)	O
;	O
break	O
;	O
}	O
break	O
;	O
case	O
kKPH	int
:	O
break	O
;	O
default	O
:	O
parse_error	int
(	O
handle	*(struct)
,	O
AFM_ERROR_SYNTAX	int
)	O
;	O
break	O
;	O
}	O
}	O
get_key	(*(struct(int,*(struct),array(struct(array(long),int,struct(array(long)))),int)),*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),array(char),int)),*(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)))->(void)
(	O
handle	*(struct)
,	O
ctx	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),array(char),int))
,	O
&	O
key	*(char)
)	O
;	O
if	O
(	O
key	*(char)
!=	O
kEndKernPairs	int
)	O
parse_error	int
(	O
handle	*(struct)
,	O
AFM_ERROR_SYNTAX	int
)	O
;	O
}	O
static	O
void	O
read_track_kerns	(*(struct(int,*(struct),array(struct(array(long),int,struct(array(long)))),int)),*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),array(char),int)),*(struct(*(struct(*`,*`,*`)),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct`),*(struct`),*(struct`),*(struct`)),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*`,double,double,double,double,double,double,double,*`)),long,*(struct(*`,long,*`)),long,*(struct(*`,*`,double,double)),long,*(struct(long,double,double,double,double)))))->(void)
(	O
AFMHandle	*(struct)
handle	*(struct)
,	O
ParseCtx	struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),array(char),int)
*	O
ctx	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),array(char),int))
,	O
AFMFont	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
)	O
{	O
int	O
i	int
;	O
AFMNode	struct(int,union(*(char),*(char),double,long,*(struct),enum(int,int)))
node	struct(int,union(*(char),*(char),double,long,*(struct(double,*(struct`))),enum(int,int)))
;	O
AFMTrackKern	struct(long,double,double,double,double)
*	O
tk	*(struct(long,double,double,double,double))
;	O
AFMKey	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
key	*(char)
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
->	O
num_kern_pairs	long
;	O
i	int
++	O
)	O
{	O
tk	*(struct(long,double,double,double,double))
=	O
&	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
->	O
track_kerns	*(struct(long,double,double,double,double))
[	O
i	int
]	O
;	O
get_key	(*(struct(int,*(struct),array(struct(array(long),int,struct(array(long)))),int)),*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),array(char),int)),*(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)))->(void)
(	O
handle	*(struct)
,	O
ctx	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),array(char),int))
,	O
&	O
key	*(char)
)	O
;	O
if	O
(	O
key	*(char)
!=	O
kTrackKern	int
)	O
parse_error	int
(	O
handle	*(struct)
,	O
AFM_ERROR_SYNTAX	int
)	O
;	O
GET_VALUE	O
(	O
AFM_TYPE_INTEGER	int
)	O
;	O
tk	*(struct(long,double,double,double,double))
->	O
degree	long
=	O
node	struct(int,union(*(char),*(char),double,long,*(struct(double,*(struct`))),enum(int,int)))
.	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
integer	long
;	O
GET_VALUE	O
(	O
AFM_TYPE_NUMBER	int
)	O
;	O
tk	*(struct(long,double,double,double,double))
->	O
min_ptsize	double
=	O
node	struct(int,union(*(char),*(char),double,long,*(struct(double,*(struct`))),enum(int,int)))
.	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
number	double
;	O
GET_VALUE	O
(	O
AFM_TYPE_NUMBER	int
)	O
;	O
tk	*(struct(long,double,double,double,double))
->	O
min_kern	double
=	O
node	struct(int,union(*(char),*(char),double,long,*(struct(double,*(struct`))),enum(int,int)))
.	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
number	double
;	O
GET_VALUE	O
(	O
AFM_TYPE_NUMBER	int
)	O
;	O
tk	*(struct(long,double,double,double,double))
->	O
max_ptsize	double
=	O
node	struct(int,union(*(char),*(char),double,long,*(struct(double,*(struct`))),enum(int,int)))
.	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
number	double
;	O
GET_VALUE	O
(	O
AFM_TYPE_NUMBER	int
)	O
;	O
tk	*(struct(long,double,double,double,double))
->	O
max_kern	double
=	O
node	struct(int,union(*(char),*(char),double,long,*(struct(double,*(struct`))),enum(int,int)))
.	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
number	double
;	O
}	O
get_key	(*(struct(int,*(struct),array(struct(array(long),int,struct(array(long)))),int)),*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),array(char),int)),*(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)))->(void)
(	O
handle	*(struct)
,	O
ctx	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),array(char),int))
,	O
&	O
key	*(char)
)	O
;	O
if	O
(	O
key	*(char)
!=	O
kEndTrackKern	int
)	O
parse_error	int
(	O
handle	*(struct)
,	O
AFM_ERROR_SYNTAX	int
)	O
;	O
}	O
static	O
void	O
read_composites	(*(struct(int,*(struct),array(struct(array(long),int,struct(array(long)))),int)),*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),array(char),int)),*(struct(*(struct(*`,*`,*`)),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct`),*(struct`),*(struct`),*(struct`)),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*`,double,double,double,double,double,double,double,*`)),long,*(struct(*`,long,*`)),long,*(struct(*`,*`,double,double)),long,*(struct(long,double,double,double,double)))))->(void)
(	O
AFMHandle	*(struct)
handle	*(struct)
,	O
ParseCtx	struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),array(char),int)
*	O
ctx	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),array(char),int))
,	O
AFMFont	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
)	O
{	O
int	O
i	int
,	O
j	int
;	O
AFMNode	struct(int,union(*(char),*(char),double,long,*(struct),enum(int,int)))
node	struct(int,union(*(char),*(char),double,long,*(struct(double,*(struct`))),enum(int,int)))
;	O
AFMComposite	struct(*(char),long,*(struct(*(char),double,double)))
*	O
cm	*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))
;	O
AFMKey	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
key	*(char)
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
->	O
num_composites	long
;	O
i	int
++	O
)	O
{	O
cm	*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))
=	O
&	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
->	O
composites	*(struct(*(char),long,*(struct(*(char),double,double))))
[	O
i	int
]	O
;	O
get_key	(*(struct(int,*(struct),array(struct(array(long),int,struct(array(long)))),int)),*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),array(char),int)),*(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)))->(void)
(	O
handle	*(struct)
,	O
ctx	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),array(char),int))
,	O
&	O
key	*(char)
)	O
;	O
if	O
(	O
key	*(char)
!=	O
kCC	int
)	O
parse_error	int
(	O
handle	*(struct)
,	O
AFM_ERROR_SYNTAX	int
)	O
;	O
GET_VALUE	O
(	O
AFM_TYPE_NAME	int
)	O
;	O
cm	*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))
->	O
name	*(char)
=	O
node	struct(int,union(*(char),*(char),double,long,*(struct(double,*(struct`))),enum(int,int)))
.	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
name	*(char)
;	O
if	O
(	O
!	O
strhash_put	(*(struct),*(char),int,*(void),*(*(void)))->(int)
(	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
->	O
private	*(struct)
->	O
compositenames	*(struct)
,	O
cm	*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))
->	O
name	*(char)
,	O
strlen	(*(char))->(long)
(	O
cm	*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))
->	O
name	*(char)
)	O
,	O
cm	*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))
,	O
NULL	O
)	O
)	O
parse_error	int
(	O
handle	*(struct)
,	O
AFM_ERROR_MEMORY	int
)	O
;	O
GET_VALUE	O
(	O
AFM_TYPE_INTEGER	int
)	O
;	O
cm	*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))
->	O
num_components	long
=	O
node	struct(int,union(*(char),*(char),double,long,*(struct(double,*(struct`))),enum(int,int)))
.	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
integer	long
;	O
cm	*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))
->	O
components	*(struct(*(char),double,double))
=	O
(	O
AFMCompositeComponent	struct(*(char),double,double)
*	O
)	O
calloc	(long,long)->(*(void))
(	O
cm	*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))
->	O
num_components	long
+	O
1	int
,	O
sizeof	O
(	O
AFMCompositeComponent	struct(*(char),double,double)
)	O
)	O
;	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<	O
cm	*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))
->	O
num_components	long
;	O
j	int
++	O
)	O
{	O
get_key	(*(struct(int,*(struct),array(struct(array(long),int,struct(array(long)))),int)),*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),array(char),int)),*(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)))->(void)
(	O
handle	*(struct)
,	O
ctx	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),array(char),int))
,	O
&	O
key	*(char)
)	O
;	O
if	O
(	O
key	*(char)
!=	O
kPCC	int
)	O
parse_error	int
(	O
handle	*(struct)
,	O
AFM_ERROR_SYNTAX	int
)	O
;	O
GET_VALUE	O
(	O
AFM_TYPE_NAME	int
)	O
;	O
cm	*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))
->	O
components	*(struct(*(char),double,double))
[	O
j	int
]	O
.	O
name	*(char)
=	O
node	struct(int,union(*(char),*(char),double,long,*(struct(double,*(struct`))),enum(int,int)))
.	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
name	*(char)
;	O
GET_VALUE	O
(	O
AFM_TYPE_NUMBER	int
)	O
;	O
cm	*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))
->	O
components	*(struct(*(char),double,double))
[	O
j	int
]	O
.	O
deltax	double
=	O
node	struct(int,union(*(char),*(char),double,long,*(struct(double,*(struct`))),enum(int,int)))
.	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
number	double
;	O
GET_VALUE	O
(	O
AFM_TYPE_NUMBER	int
)	O
;	O
cm	*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))
->	O
components	*(struct(*(char),double,double))
[	O
j	int
]	O
.	O
deltay	double
=	O
node	struct(int,union(*(char),*(char),double,long,*(struct(double,*(struct`))),enum(int,int)))
.	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
number	double
;	O
}	O
}	O
get_key	(*(struct(int,*(struct),array(struct(array(long),int,struct(array(long)))),int)),*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),array(char),int)),*(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)))->(void)
(	O
handle	*(struct)
,	O
ctx	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),array(char),int))
,	O
&	O
key	*(char)
)	O
;	O
if	O
(	O
key	*(char)
!=	O
kEndComposites	int
)	O
parse_error	int
(	O
handle	*(struct)
,	O
AFM_ERROR_SYNTAX	int
)	O
;	O
}	O
