static	O
char	O
*	O
extract_rules	O
(	O
FILE	struct
*	O
fp	O
,	O
const	O
char	O
*	O
real_filename	O
,	O
const	O
char	O
*	O
logical_filename	O
,	O
const	O
char	O
*	O
locale	O
)	O
{	O
xmlDocPtr	O
doc	O
;	O
xmlNodePtr	O
node	O
,	O
n	O
;	O
size_t	long
locale_length	O
;	O
char	O
*	O
buffer	O
=	O
NULL	O
,	O
*	O
p	O
;	O
size_t	long
bufmax	O
=	O
0	int
;	O
size_t	long
buflen	O
=	O
0	int
;	O
doc	O
=	O
xmlReadFd	O
(	O
fileno	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
fp	O
)	O
,	O
logical_filename	O
,	O
NULL	O
,	O
XML_PARSE_NONET	O
|	O
XML_PARSE_NOWARNING	O
|	O
XML_PARSE_NOBLANKS	O
)	O
;	O
if	O
(	O
doc	O
==	O
NULL	O
)	O
error	O
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
_	O
(	O
"Could not parse file %s as XML"	*(char)
)	O
,	O
logical_filename	O
)	O
;	O
node	O
=	O
xmlDocGetRootElement	O
(	O
doc	O
)	O
;	O
if	O
(	O
!	O
node	O
||	O
!	O
xmlStrEqual	O
(	O
node	O
->	O
name	O
,	O
BAD_CAST	O
"supplementalData"	*(char)
)	O
)	O
{	O
error_at_line	O
(	O
0	int
,	O
0	int
,	O
logical_filename	O
,	O
xmlGetLineNo	O
(	O
node	O
)	O
,	O
_	O
(	O
"The root element must be <%s>"	*(char)
)	O
,	O
"supplementalData"	*(char)
)	O
;	O
goto	O
out	O
;	O
}	O
for	O
(	O
n	O
=	O
node	O
->	O
children	O
;	O
n	O
;	O
n	O
=	O
n	O
->	O
next	O
)	O
{	O
if	O
(	O
n	O
->	O
type	enum(int,int)
==	O
XML_ELEMENT_NODE	O
&&	O
xmlStrEqual	O
(	O
n	O
->	O
name	O
,	O
BAD_CAST	O
"plurals"	*(char)
)	O
)	O
break	O
;	O
}	O
if	O
(	O
!	O
n	O
)	O
{	O
error	O
(	O
0	int
,	O
0	int
,	O
_	O
(	O
"The element <%s> does not contain a <%s> element"	*(char)
)	O
,	O
"supplementalData"	*(char)
,	O
"plurals"	*(char)
)	O
;	O
goto	O
out	O
;	O
}	O
locale_length	O
=	O
strlen	(*(char))->(long)
(	O
locale	O
)	O
;	O
for	O
(	O
n	O
=	O
n	O
->	O
children	O
;	O
n	O
;	O
n	O
=	O
n	O
->	O
next	O
)	O
{	O
xmlChar	O
*	O
locales	O
;	O
xmlChar	O
*	O
cp	O
;	O
xmlNodePtr	O
n2	O
;	O
bool	O
found	O
=	O
false	O
;	O
if	O
(	O
n	O
->	O
type	enum(int,int)
!=	O
XML_ELEMENT_NODE	O
||	O
!	O
xmlStrEqual	O
(	O
n	O
->	O
name	O
,	O
BAD_CAST	O
"pluralRules"	*(char)
)	O
)	O
continue	O
;	O
if	O
(	O
!	O
xmlHasProp	O
(	O
n	O
,	O
BAD_CAST	O
"locales"	*(char)
)	O
)	O
{	O
error_at_line	O
(	O
0	int
,	O
0	int
,	O
logical_filename	O
,	O
xmlGetLineNo	O
(	O
n	O
)	O
,	O
_	O
(	O
"The element <%s> does not have attribute <%s>"	*(char)
)	O
,	O
"pluralRules"	*(char)
,	O
"locales"	*(char)
)	O
;	O
continue	O
;	O
}	O
cp	O
=	O
locales	O
=	O
xmlGetProp	O
(	O
n	O
,	O
BAD_CAST	O
"locales"	*(char)
)	O
;	O
while	O
(	O
*	O
cp	O
!=	O
'\0'	O
)	O
{	O
while	O
(	O
c_isspace	O
(	O
*	O
cp	O
)	O
)	O
cp	O
++	O
;	O
if	O
(	O
xmlStrncmp	O
(	O
cp	O
,	O
BAD_CAST	O
locale	O
,	O
locale_length	O
)	O
==	O
0	int
&&	O
(	O
*	O
(	O
cp	O
+	O
locale_length	O
)	O
==	O
'\0'	O
||	O
c_isspace	O
(	O
*	O
(	O
cp	O
+	O
locale_length	O
)	O
)	O
)	O
)	O
{	O
found	O
=	O
true	O
;	O
break	O
;	O
}	O
while	O
(	O
*	O
cp	O
&&	O
!	O
c_isspace	O
(	O
*	O
cp	O
)	O
)	O
cp	O
++	O
;	O
}	O
xmlFree	O
(	O
locales	O
)	O
;	O
if	O
(	O
!	O
found	O
)	O
continue	O
;	O
for	O
(	O
n2	O
=	O
n	O
->	O
children	O
;	O
n2	O
;	O
n2	O
=	O
n2	O
->	O
next	O
)	O
{	O
xmlChar	O
*	O
count	O
;	O
xmlChar	O
*	O
content	O
;	O
size_t	long
length	O
;	O
if	O
(	O
n2	O
->	O
type	enum(int,int)
!=	O
XML_ELEMENT_NODE	O
||	O
!	O
xmlStrEqual	O
(	O
n2	O
->	O
name	O
,	O
BAD_CAST	O
"pluralRule"	*(char)
)	O
)	O
continue	O
;	O
if	O
(	O
!	O
xmlHasProp	O
(	O
n2	O
,	O
BAD_CAST	O
"count"	*(char)
)	O
)	O
{	O
error_at_line	O
(	O
0	int
,	O
0	int
,	O
logical_filename	O
,	O
xmlGetLineNo	O
(	O
n2	O
)	O
,	O
_	O
(	O
"The element <%s> does not have attribute <%s>"	*(char)
)	O
,	O
"pluralRule"	*(char)
,	O
"count"	*(char)
)	O
;	O
break	O
;	O
}	O
count	O
=	O
xmlGetProp	O
(	O
n2	O
,	O
BAD_CAST	O
"count"	*(char)
)	O
;	O
content	O
=	O
xmlNodeGetContent	O
(	O
n2	O
)	O
;	O
length	O
=	O
xmlStrlen	O
(	O
count	O
)	O
+	O
strlen	(*(char))->(long)
(	O
": "	*(char)
)	O
+	O
xmlStrlen	O
(	O
content	O
)	O
+	O
strlen	(*(char))->(long)
(	O
"; "	*(char)
)	O
;	O
if	O
(	O
buflen	O
+	O
length	O
+	O
1	int
>	O
bufmax	O
)	O
{	O
bufmax	O
*=	O
2	int
;	O
if	O
(	O
bufmax	O
<	O
buflen	O
+	O
length	O
+	O
1	int
)	O
bufmax	O
=	O
buflen	O
+	O
length	O
+	O
1	int
;	O
buffer	O
=	O
(	O
char	O
*	O
)	O
xrealloc	O
(	O
buffer	O
,	O
bufmax	O
)	O
;	O
}	O
sprintf	(*(char),*(char))->(int)
(	O
buffer	O
+	O
buflen	O
,	O
"%s: %s; "	*(char)
,	O
count	O
,	O
content	O
)	O
;	O
xmlFree	O
(	O
count	O
)	O
;	O
xmlFree	O
(	O
content	O
)	O
;	O
buflen	O
+=	O
length	O
;	O
}	O
}	O
if	O
(	O
buffer	O
)	O
{	O
p	O
=	O
strrchr	(*(char),int)->(*(char))
(	O
buffer	O
,	O
';'	O
)	O
;	O
if	O
(	O
p	O
)	O
*	O
p	O
=	O
'\0'	O
;	O
}	O
out	O
:	O
xmlFreeDoc	O
(	O
doc	O
)	O
;	O
return	O
buffer	O
;	O
}	O
static	O
void	O
usage	O
(	O
int	O
status	O
)	O
{	O
if	O
(	O
status	O
!=	O
EXIT_SUCCESS	O
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
_	O
(	O
"Try '%s --help' for more information.\n"	*(char)
)	O
,	O
program_name	O
)	O
;	O
else	O
{	O
printf	(*(char))->(int)
(	O
_	O
(	O
"Usage: %s [OPTION...] [LOCALE RULES]...\n"	*(char)
)	O
,	O
program_name	O
)	O
;	O
printf	(*(char))->(int)
(	O
"\n"	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"Extract or convert Unicode CLDR plural rules.\n\nIf both LOCALE and RULES are specified, it reads CLDR plural rules for\nLOCALE from RULES and print them in a form suitable for gettext use.\nIf no argument is given, it reads CLDR plural rules from the standard input.\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
"\n"	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"Mandatory arguments to long options are mandatory for short options too.\nSimilarly for optional arguments.\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
"\n"	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"  -c, --cldr                  print plural rules in the CLDR format\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"  -h, --help                  display this help and exit\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"  -V, --version               output version information and exit\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
"\n"	*(char)
)	O
;	O
fputs	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
_	O
(	O
"Report bugs to <bug-gnu-gettext@gnu.org>.\n"	*(char)
)	O
,	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
}	O
exit	O
(	O
status	O
)	O
;	O
}	O
static	O
const	O
struct	O
option	O
long_options	O
[	O
]	O
=	O
{	O
{	O
"cldr"	*(char)
,	O
no_argument	O
,	O
NULL	O
,	O
'c'	O
}	O
,	O
{	O
"help"	*(char)
,	O
no_argument	O
,	O
NULL	O
,	O
'h'	O
}	O
,	O
{	O
"version"	*(char)
,	O
no_argument	O
,	O
NULL	O
,	O
'V'	O
}	O
,	O
{	O
NULL	O
,	O
0	int
,	O
NULL	O
,	O
0	int
}	O
}	O
;	O
int	O
main	O
(	O
int	O
argc	O
,	O
char	O
*	O
*	O
argv	O
)	O
{	O
bool	O
opt_cldr_format	O
=	O
false	O
;	O
bool	O
do_help	O
=	O
false	O
;	O
bool	O
do_version	O
=	O
false	O
;	O
int	O
optchar	O
;	O
set_program_name	O
(	O
argv	O
[	O
0	int
]	O
)	O
;	O
setlocale	O
(	O
LC_ALL	O
,	O
""	*(char)
)	O
;	O
bindtextdomain	O
(	O
PACKAGE	O
,	O
relocate	O
(	O
LOCALEDIR	O
)	O
)	O
;	O
bindtextdomain	O
(	O
"bison-runtime"	*(char)
,	O
relocate	O
(	O
BISON_LOCALEDIR	O
)	O
)	O
;	O
textdomain	O
(	O
PACKAGE	O
)	O
;	O
atexit	O
(	O
close_stdout	O
)	O
;	O
while	O
(	O
(	O
optchar	O
=	O
getopt_long	O
(	O
argc	O
,	O
argv	O
,	O
"chV"	*(char)
,	O
long_options	O
,	O
NULL	O
)	O
)	O
!=	O
EOF	O
)	O
switch	O
(	O
optchar	O
)	O
{	O
case	O
'\0'	O
:	O
break	O
;	O
case	O
'c'	O
:	O
opt_cldr_format	O
=	O
true	O
;	O
break	O
;	O
case	O
'h'	O
:	O
do_help	O
=	O
true	O
;	O
break	O
;	O
case	O
'V'	O
:	O
do_version	O
=	O
true	O
;	O
break	O
;	O
default	O
:	O
usage	O
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
if	O
(	O
do_version	O
)	O
{	O
printf	(*(char))->(int)
(	O
"%s (GNU %s) %s\n"	*(char)
,	O
basename	(*(char))->(*(char))
(	O
program_name	O
)	O
,	O
PACKAGE	O
,	O
VERSION	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"Copyright (C) %s Free Software Foundation, Inc.\nLicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\n"	*(char)
)	O
,	O
"2015-2019"	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"Written by %s.\n"	*(char)
)	O
,	O
proper_name	O
(	O
"Daiki Ueno"	*(char)
)	O
)	O
;	O
exit	O
(	O
EXIT_SUCCESS	O
)	O
;	O
}	O
if	O
(	O
do_help	O
)	O
usage	O
(	O
EXIT_SUCCESS	O
)	O
;	O
if	O
(	O
argc	O
==	O
optind	O
+	O
2	int
)	O
{	O
const	O
char	O
*	O
locale	O
=	O
argv	O
[	O
optind	O
]	O
;	O
const	O
char	O
*	O
logical_filename	O
=	O
argv	O
[	O
optind	O
+	O
1	int
]	O
;	O
char	O
*	O
extracted_rules	O
;	O
FILE	struct
*	O
fp	O
;	O
LIBXML_TEST_VERSION	O
fp	O
=	O
fopen	(*(char),*(char))->(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))
(	O
logical_filename	O
,	O
"r"	*(char)
)	O
;	O
if	O
(	O
fp	O
==	O
NULL	O
)	O
error	O
(	O
1	int
,	O
0	int
,	O
_	O
(	O
"%s cannot be read"	*(char)
)	O
,	O
logical_filename	O
)	O
;	O
extracted_rules	O
=	O
extract_rules	O
(	O
fp	O
,	O
logical_filename	O
,	O
logical_filename	O
,	O
locale	O
)	O
;	O
fclose	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
fp	O
)	O
;	O
if	O
(	O
extracted_rules	O
==	O
NULL	O
)	O
error	O
(	O
1	int
,	O
0	int
,	O
_	O
(	O
"cannot extract rules for %s"	*(char)
)	O
,	O
locale	O
)	O
;	O
if	O
(	O
opt_cldr_format	O
)	O
printf	(*(char))->(int)
(	O
"%s\n"	*(char)
,	O
extracted_rules	O
)	O
;	O
else	O
{	O
struct	O
cldr_plural_rule_list_ty	O
*	O
result	O
;	O
result	O
=	O
cldr_plural_parse	O
(	O
extracted_rules	O
)	O
;	O
if	O
(	O
result	O
==	O
NULL	O
)	O
error	O
(	O
1	int
,	O
0	int
,	O
_	O
(	O
"cannot parse CLDR rule"	*(char)
)	O
)	O
;	O
cldr_plural_rule_list_print	O
(	O
result	O
,	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
cldr_plural_rule_list_free	O
(	O
result	O
)	O
;	O
}	O
free	O
(	O
extracted_rules	O
)	O
;	O
}	O
else	O
if	O
(	O
argc	O
==	O
optind	O
)	O
{	O
char	O
*	O
line	O
=	O
NULL	O
;	O
size_t	long
line_size	O
=	O
0	int
;	O
for	O
(	O
;	O
;	O
)	O
{	O
int	O
line_len	O
;	O
struct	O
cldr_plural_rule_list_ty	O
*	O
result	O
;	O
line_len	O
=	O
getline	(*(*(char)),*(long),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(long)
(	O
&	O
line	O
,	O
&	O
line_size	O
,	O
stdin	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
if	O
(	O
line_len	O
<	O
0	int
)	O
break	O
;	O
if	O
(	O
line_len	O
>	O
0	int
&&	O
line	O
[	O
line_len	O
-	O
1	int
]	O
==	O
'\n'	O
)	O
line	O
[	O
--	O
line_len	O
]	O
=	O
'\0'	O
;	O
result	O
=	O
cldr_plural_parse	O
(	O
line	O
)	O
;	O
if	O
(	O
result	O
)	O
{	O
cldr_plural_rule_list_print	O
(	O
result	O
,	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
cldr_plural_rule_list_free	O
(	O
result	O
)	O
;	O
}	O
}	O
free	O
(	O
line	O
)	O
;	O
}	O
else	O
{	O
error	O
(	O
1	int
,	O
0	int
,	O
_	O
(	O
"extra operand %s"	*(char)
)	O
,	O
argv	O
[	O
optind	O
]	O
)	O
;	O
}	O
return	O
0	int
;	O
}	O
