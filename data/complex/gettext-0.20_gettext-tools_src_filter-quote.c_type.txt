struct	O
result	struct(*(char),*(char),bool)
{	O
char	O
*	O
output	*(char)
;	O
char	O
*	O
offset	*(char)
;	O
bool	bool
bold	bool
;	O
}	O
;	O
static	O
void	O
convert_quote_callback	(char,*(char),long,*(void))->(void)
(	O
char	O
quote	char
,	O
const	O
char	O
*	O
quoted	*(char)
,	O
size_t	long
quoted_length	long
,	O
void	O
*	O
data	*(void)
)	O
{	O
struct	O
result	struct(*(char),*(char),bool)
*	O
result	struct(*(char),*(char),bool)
=	O
data	*(void)
;	O
switch	O
(	O
quote	char
)	O
{	O
case	O
'\0'	O
:	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
result	struct(*(char),*(char),bool)
->	O
offset	*(char)
,	O
quoted	*(char)
,	O
quoted_length	long
)	O
;	O
result	struct(*(char),*(char),bool)
->	O
offset	*(char)
+=	O
quoted_length	long
;	O
break	O
;	O
case	O
'"'	O
:	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
result	struct(*(char),*(char),bool)
->	O
offset	*(char)
,	O
"\xe2\x80\x9c"	*(char)
,	O
3	int
)	O
;	O
result	struct(*(char),*(char),bool)
->	O
offset	*(char)
+=	O
3	int
;	O
if	O
(	O
result	struct(*(char),*(char),bool)
->	O
bold	bool
)	O
{	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
result	struct(*(char),*(char),bool)
->	O
offset	*(char)
,	O
BOLD_START	*(char)
,	O
4	int
)	O
;	O
result	struct(*(char),*(char),bool)
->	O
offset	*(char)
+=	O
4	int
;	O
}	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
result	struct(*(char),*(char),bool)
->	O
offset	*(char)
,	O
quoted	*(char)
,	O
quoted_length	long
)	O
;	O
result	struct(*(char),*(char),bool)
->	O
offset	*(char)
+=	O
quoted_length	long
;	O
if	O
(	O
result	struct(*(char),*(char),bool)
->	O
bold	bool
)	O
{	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
result	struct(*(char),*(char),bool)
->	O
offset	*(char)
,	O
BOLD_END	*(char)
,	O
4	int
)	O
;	O
result	struct(*(char),*(char),bool)
->	O
offset	*(char)
+=	O
4	int
;	O
}	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
result	struct(*(char),*(char),bool)
->	O
offset	*(char)
,	O
"\xe2\x80\x9d"	*(char)
,	O
3	int
)	O
;	O
result	struct(*(char),*(char),bool)
->	O
offset	*(char)
+=	O
3	int
;	O
break	O
;	O
case	O
'\''	O
:	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
result	struct(*(char),*(char),bool)
->	O
offset	*(char)
,	O
"\xe2\x80\x98"	*(char)
,	O
3	int
)	O
;	O
result	struct(*(char),*(char),bool)
->	O
offset	*(char)
+=	O
3	int
;	O
if	O
(	O
result	struct(*(char),*(char),bool)
->	O
bold	bool
)	O
{	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
result	struct(*(char),*(char),bool)
->	O
offset	*(char)
,	O
BOLD_START	*(char)
,	O
4	int
)	O
;	O
result	struct(*(char),*(char),bool)
->	O
offset	*(char)
+=	O
4	int
;	O
}	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
result	struct(*(char),*(char),bool)
->	O
offset	*(char)
,	O
quoted	*(char)
,	O
quoted_length	long
)	O
;	O
result	struct(*(char),*(char),bool)
->	O
offset	*(char)
+=	O
quoted_length	long
;	O
if	O
(	O
result	struct(*(char),*(char),bool)
->	O
bold	bool
)	O
{	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
result	struct(*(char),*(char),bool)
->	O
offset	*(char)
,	O
BOLD_END	*(char)
,	O
4	int
)	O
;	O
result	struct(*(char),*(char),bool)
->	O
offset	*(char)
+=	O
4	int
;	O
}	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
result	struct(*(char),*(char),bool)
->	O
offset	*(char)
,	O
"\xe2\x80\x99"	*(char)
,	O
3	int
)	O
;	O
result	struct(*(char),*(char),bool)
->	O
offset	*(char)
+=	O
3	int
;	O
break	O
;	O
}	O
}	O
static	O
void	O
convert_ascii_quote_to_unicode	(*(char),long,*(*(char)),*(long),bool)->(void)
(	O
const	O
char	O
*	O
input	*(char)
,	O
size_t	long
input_len	long
,	O
char	O
*	O
*	O
output_p	*(*(char))
,	O
size_t	long
*	O
output_len_p	*(long)
,	O
bool	bool
bold	bool
)	O
{	O
const	O
char	O
*	O
p	*(char)
;	O
size_t	long
quote_count	long
;	O
struct	O
result	struct(*(char),*(char),bool)
result	struct(*(char),*(char),bool)
;	O
quote_count	long
=	O
0	int
;	O
for	O
(	O
p	*(char)
=	O
input	*(char)
;	O
p	*(char)
<	O
input	*(char)
+	O
input_len	long
;	O
p	*(char)
++	O
)	O
{	O
size_t	long
len	long
;	O
p	*(char)
=	O
strpbrk	(*(char),*(char))->(*(char))
(	O
p	*(char)
,	O
"`'\""	*(char)
)	O
;	O
if	O
(	O
!	O
p	*(char)
)	O
break	O
;	O
len	long
=	O
strspn	(*(char),*(char))->(long)
(	O
p	*(char)
,	O
"`'\""	*(char)
)	O
;	O
quote_count	long
+=	O
len	long
;	O
p	*(char)
+=	O
len	long
;	O
}	O
result	struct(*(char),*(char),bool)
.	O
output	*(char)
=	O
XNMALLOC	O
(	O
input_len	long
-	O
quote_count	long
+	O
(	O
bold	bool
?	O
7	int
:	O
3	int
)	O
*	O
quote_count	long
+	O
1	int
,	O
char	O
)	O
;	O
result	struct(*(char),*(char),bool)
.	O
offset	*(char)
=	O
result	struct(*(char),*(char),bool)
.	O
output	*(char)
;	O
result	struct(*(char),*(char),bool)
.	O
bold	bool
=	O
bold	bool
;	O
scan_quoted	(*(char),long,*((char,*(char),long,*(void))->(void)),*(void))->(void)
(	O
input	*(char)
,	O
input_len	long
,	O
convert_quote_callback	(char,*(char),long,*(void))->(void)
,	O
&	O
result	struct(*(char),*(char),bool)
)	O
;	O
*	O
output_p	*(*(char))
=	O
result	struct(*(char),*(char),bool)
.	O
output	*(char)
;	O
*	O
output_len_p	*(long)
=	O
result	struct(*(char),*(char),bool)
.	O
offset	*(char)
-	O
result	struct(*(char),*(char),bool)
.	O
output	*(char)
;	O
}	O
void	O
ascii_quote_to_unicode	(*(char),long,*(*(char)),*(long))->(void)
(	O
const	O
char	O
*	O
input	*(char)
,	O
size_t	long
input_len	long
,	O
char	O
*	O
*	O
output_p	*(*(char))
,	O
size_t	long
*	O
output_len_p	*(long)
)	O
{	O
convert_ascii_quote_to_unicode	(*(char),long,*(*(char)),*(long),bool)->(void)
(	O
input	*(char)
,	O
input_len	long
,	O
output_p	*(*(char))
,	O
output_len_p	*(long)
,	O
false	int
)	O
;	O
}	O
void	O
ascii_quote_to_unicode_bold	(*(char),long,*(*(char)),*(long))->(void)
(	O
const	O
char	O
*	O
input	*(char)
,	O
size_t	long
input_len	long
,	O
char	O
*	O
*	O
output_p	*(*(char))
,	O
size_t	long
*	O
output_len_p	*(long)
)	O
{	O
convert_ascii_quote_to_unicode	(*(char),long,*(*(char)),*(long),bool)->(void)
(	O
input	*(char)
,	O
input_len	long
,	O
output_p	*(*(char))
,	O
output_len_p	*(long)
,	O
true	int
)	O
;	O
}	O
