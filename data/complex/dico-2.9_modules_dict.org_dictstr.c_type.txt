struct	O
_dict_chunk	struct(int,int)
{	O
unsigned	O
length	long
;	O
unsigned	O
offset	long
;	O
}	O
;	O
struct	O
_dict_chunk_cache	struct(int,*(char),long,int)
{	O
int	O
num	int
;	O
char	O
*	O
buffer	*(char)
;	O
size_t	long
size	long
;	O
unsigned	O
refcount	int
;	O
}	O
;	O
struct	O
_dict_stream	struct(int,*(struct),int,long,int,int,long,int,int,int,int,int,*(struct(int,int)),*(char),*(char),long,long,long,long,*(char),struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long),int,long,long,*(*(struct(int,*(char),long,int))))
{	O
int	O
type	enum(int,int,int)
;	O
dico_stream_t	*(struct)
transport	*(struct)
;	O
int	O
transport_error	int
;	O
size_t	long
header_length	long
;	O
int	O
method	int
;	O
int	O
flags	int
;	O
time_t	long
mtime	long
;	O
int	O
extra_flags	int
;	O
int	O
os	int
;	O
int	O
version	*(char)
;	O
unsigned	O
chunk_size	int
;	O
unsigned	O
chunk_count	int
;	O
struct	O
_dict_chunk	struct(int,int)
*	O
chunk	*(struct(int,int))
;	O
char	O
*	O
orig_name	*(char)
;	O
char	O
*	O
comment	*(char)
;	O
unsigned	O
long	O
crc	long
;	O
unsigned	O
long	O
size	long
;	O
unsigned	O
long	O
compressed_size	long
;	O
size_t	long
offset	long
;	O
char	O
*	O
buffer	*(char)
;	O
z_stream	struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long)
zstream	struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long)
;	O
int	O
zstr_ready	int
;	O
size_t	long
cache_size	long
;	O
size_t	long
cache_used	long
;	O
struct	O
_dict_chunk_cache	struct(int,*(char),long,int)
*	O
*	O
cache	*(*(struct(int,*(char),long,int)))
;	O
}	O
;	O
static	O
struct	O
_dict_chunk_cache	struct(int,*(char),long,int)
*	O
cache_create_chunk	(*(struct(int,*(struct),int,long,int,int,long,int,int,int,int,int,*(struct(int,int)),*(char),*(char),long,long,long,long,*(char),struct(*(char),int,long,*(char),int,long,*(char),*(struct`),*((*`,int,int)->(*`)),*((*`,*`)->(void)),*(void),int,long,long),int,long,long,*(*(struct`)))))->(*(struct(int,*(char),long,int)))
(	O
struct	O
_dict_stream	struct(int,*(struct),int,long,int,int,long,int,int,int,int,int,*(struct(int,int)),*(char),*(char),long,long,long,long,*(char),struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long),int,long,long,*(*(struct(int,*(char),long,int))))
*	O
str	*(struct)
)	O
{	O
struct	O
_dict_chunk_cache	struct(int,*(char),long,int)
*	O
cp	*(struct(int,*(char),long,int))
=	O
malloc	(long)->(*(void))
(	O
sizeof	O
(	O
*	O
cp	*(struct(int,*(char),long,int))
)	O
+	O
str	*(struct)
->	O
chunk_size	int
)	O
;	O
if	O
(	O
cp	*(struct(int,*(char),long,int))
)	O
{	O
cp	*(struct(int,*(char),long,int))
->	O
buffer	*(char)
=	O
(	O
char	O
*	O
)	O
(	O
cp	*(struct(int,*(char),long,int))
+	O
1	int
)	O
;	O
cp	*(struct(int,*(char),long,int))
->	O
num	int
=	O
-	O
1	int
;	O
cp	*(struct(int,*(char),long,int))
->	O
refcount	int
=	O
0	int
;	O
cp	*(struct(int,*(char),long,int))
->	O
size	long
=	O
0	int
;	O
}	O
return	O
cp	*(struct(int,*(char),long,int))
;	O
}	O
static	O
int	O
cache_alloc	(*(struct(int,*(struct),int,long,int,int,long,int,int,int,int,int,*(struct(int,int)),*(char),*(char),long,long,long,long,*(char),struct(*(char),int,long,*(char),int,long,*(char),*(struct`),*((*`,int,int)->(*`)),*((*`,*`)->(void)),*(void),int,long,long),int,long,long,*(*(struct`)))))->(int)
(	O
struct	O
_dict_stream	struct(int,*(struct),int,long,int,int,long,int,int,int,int,int,*(struct(int,int)),*(char),*(char),long,long,long,long,*(char),struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long),int,long,long,*(*(struct(int,*(char),long,int))))
*	O
str	*(struct)
)	O
{	O
int	O
n	long
;	O
struct	O
_dict_chunk_cache	struct(int,*(char),long,int)
*	O
cp	*(struct(int,*(char),long,int))
;	O
if	O
(	O
!	O
str	*(struct)
->	O
cache	*(*(struct(int,*(char),long,int)))
)	O
{	O
str	*(struct)
->	O
cache	*(*(struct(int,*(char),long,int)))
=	O
calloc	(long,long)->(*(void))
(	O
str	*(struct)
->	O
cache_size	long
,	O
sizeof	O
(	O
str	*(struct)
->	O
cache	*(*(struct(int,*(char),long,int)))
[	O
0	int
]	O
)	O
)	O
;	O
if	O
(	O
!	O
str	*(struct)
->	O
cache	*(*(struct(int,*(char),long,int)))
)	O
return	O
1	int
;	O
}	O
if	O
(	O
str	*(struct)
->	O
cache_used	long
<	O
str	*(struct)
->	O
cache_size	long
)	O
{	O
cp	*(struct(int,*(char),long,int))
=	O
cache_create_chunk	(*(struct(int,*(struct),int,long,int,int,long,int,int,int,int,int,*(struct(int,int)),*(char),*(char),long,long,long,long,*(char),struct(*(char),int,long,*(char),int,long,*(char),*(struct`),*((*`,int,int)->(*`)),*((*`,*`)->(void)),*(void),int,long,long),int,long,long,*(*(struct`)))))->(*(struct(int,*(char),long,int)))
(	O
str	*(struct)
)	O
;	O
if	O
(	O
!	O
cp	*(struct(int,*(char),long,int))
)	O
return	O
1	int
;	O
n	long
=	O
str	*(struct)
->	O
cache_used	long
++	O
;	O
str	*(struct)
->	O
cache	*(*(struct(int,*(char),long,int)))
[	O
n	long
]	O
=	O
cp	*(struct(int,*(char),long,int))
;	O
}	O
else	O
{	O
n	long
=	O
str	*(struct)
->	O
cache_used	long
-	O
1	int
;	O
cp	*(struct(int,*(char),long,int))
=	O
str	*(struct)
->	O
cache	*(*(struct(int,*(char),long,int)))
[	O
n	long
]	O
;	O
cp	*(struct(int,*(char),long,int))
->	O
refcount	int
=	O
0	int
;	O
cp	*(struct(int,*(char),long,int))
->	O
num	int
=	O
-	O
1	int
;	O
}	O
return	O
n	long
;	O
}	O
static	O
void	O
cache_destroy	(*(struct(int,*(struct),int,long,int,int,long,int,int,int,int,int,*(struct(int,int)),*(char),*(char),long,long,long,long,*(char),struct(*(char),int,long,*(char),int,long,*(char),*(struct`),*((*`,int,int)->(*`)),*((*`,*`)->(void)),*(void),int,long,long),int,long,long,*(*(struct`)))))->(void)
(	O
struct	O
_dict_stream	struct(int,*(struct),int,long,int,int,long,int,int,int,int,int,*(struct(int,int)),*(char),*(char),long,long,long,long,*(char),struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long),int,long,long,*(*(struct(int,*(char),long,int))))
*	O
str	*(struct)
)	O
{	O
if	O
(	O
str	*(struct)
->	O
cache	*(*(struct(int,*(char),long,int)))
)	O
{	O
size_t	long
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
str	*(struct)
->	O
cache_used	long
;	O
i	long
++	O
)	O
{	O
if	O
(	O
!	O
str	*(struct)
->	O
cache	*(*(struct(int,*(char),long,int)))
[	O
i	long
]	O
)	O
break	O
;	O
free	(*(void))->(void)
(	O
str	*(struct)
->	O
cache	*(*(struct(int,*(char),long,int)))
[	O
i	long
]	O
)	O
;	O
}	O
free	(*(void))->(void)
(	O
str	*(struct)
->	O
cache	*(*(struct(int,*(char),long,int)))
)	O
;	O
str	*(struct)
->	O
cache	*(*(struct(int,*(char),long,int)))
=	O
NULL	O
;	O
}	O
}	O
static	O
void	O
cache_promote	(*(struct(int,*(struct),int,long,int,int,long,int,int,int,int,int,*(struct(int,int)),*(char),*(char),long,long,long,long,*(char),struct(*(char),int,long,*(char),int,long,*(char),*(struct`),*((*`,int,int)->(*`)),*((*`,*`)->(void)),*(void),int,long,long),int,long,long,*(*(struct`)))),int)->(void)
(	O
struct	O
_dict_stream	struct(int,*(struct),int,long,int,int,long,int,int,int,int,int,*(struct(int,int)),*(char),*(char),long,long,long,long,*(char),struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long),int,long,long,*(*(struct(int,*(char),long,int))))
*	O
str	*(struct)
,	O
int	O
n	long
)	O
{	O
int	O
i	long
;	O
unsigned	O
refcount	int
=	O
++	O
str	*(struct)
->	O
cache	*(*(struct(int,*(char),long,int)))
[	O
n	long
]	O
->	O
refcount	int
;	O
for	O
(	O
i	long
=	O
n	long
-	O
1	int
;	O
i	long
>=	O
0	int
;	O
i	long
--	O
)	O
if	O
(	O
str	*(struct)
->	O
cache	*(*(struct(int,*(char),long,int)))
[	O
i	long
]	O
->	O
refcount	int
>=	O
refcount	int
)	O
break	O
;	O
i	long
++	O
;	O
if	O
(	O
i	long
!=	O
n	long
)	O
{	O
struct	O
_dict_chunk_cache	struct(int,*(char),long,int)
*	O
tmp	*(struct(int,*(char),long,int))
=	O
str	*(struct)
->	O
cache	*(*(struct(int,*(char),long,int)))
[	O
n	long
]	O
;	O
str	*(struct)
->	O
cache	*(*(struct(int,*(char),long,int)))
[	O
n	long
]	O
=	O
str	*(struct)
->	O
cache	*(*(struct(int,*(char),long,int)))
[	O
i	long
]	O
;	O
str	*(struct)
->	O
cache	*(*(struct(int,*(char),long,int)))
[	O
i	long
]	O
=	O
tmp	*(struct(int,*(char),long,int))
;	O
}	O
}	O
static	O
int	O
cache_get	(*(struct(int,*(struct),int,long,int,int,long,int,int,int,int,int,*(struct(int,int)),*(char),*(char),long,long,long,long,*(char),struct(*(char),int,long,*(char),int,long,*(char),*(struct`),*((*`,int,int)->(*`)),*((*`,*`)->(void)),*(void),int,long,long),int,long,long,*(*(struct`)))),int,*(*(struct(int,*(char),long,int))))->(int)
(	O
struct	O
_dict_stream	struct(int,*(struct),int,long,int,int,long,int,int,int,int,int,*(struct(int,int)),*(char),*(char),long,long,long,long,*(char),struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long),int,long,long,*(*(struct(int,*(char),long,int))))
*	O
str	*(struct)
,	O
int	O
chunk_num	int
,	O
struct	O
_dict_chunk_cache	struct(int,*(char),long,int)
*	O
*	O
retptr	*(*(struct(int,*(char),long,int)))
)	O
{	O
int	O
i	long
;	O
struct	O
_dict_chunk_cache	struct(int,*(char),long,int)
*	O
cp	*(struct(int,*(char),long,int))
;	O
size_t	long
rdbytes	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
str	*(struct)
->	O
cache_used	long
;	O
i	long
++	O
)	O
{	O
if	O
(	O
str	*(struct)
->	O
cache	*(*(struct(int,*(char),long,int)))
[	O
i	long
]	O
->	O
num	int
==	O
chunk_num	int
)	O
{	O
cp	*(struct(int,*(char),long,int))
=	O
str	*(struct)
->	O
cache	*(*(struct(int,*(char),long,int)))
[	O
i	long
]	O
;	O
cache_promote	(*(struct(int,*(struct),int,long,int,int,long,int,int,int,int,int,*(struct(int,int)),*(char),*(char),long,long,long,long,*(char),struct(*(char),int,long,*(char),int,long,*(char),*(struct`),*((*`,int,int)->(*`)),*((*`,*`)->(void)),*(void),int,long,long),int,long,long,*(*(struct`)))),int)->(void)
(	O
str	*(struct)
,	O
i	long
)	O
;	O
*	O
retptr	*(*(struct(int,*(char),long,int)))
=	O
cp	*(struct(int,*(char),long,int))
;	O
return	O
0	int
;	O
}	O
}	O
i	long
=	O
cache_alloc	(*(struct(int,*(struct),int,long,int,int,long,int,int,int,int,int,*(struct(int,int)),*(char),*(char),long,long,long,long,*(char),struct(*(char),int,long,*(char),int,long,*(char),*(struct`),*((*`,int,int)->(*`)),*((*`,*`)->(void)),*(void),int,long,long),int,long,long,*(*(struct`)))))->(int)
(	O
str	*(struct)
)	O
;	O
cp	*(struct(int,*(char),long,int))
=	O
str	*(struct)
->	O
cache	*(*(struct(int,*(char),long,int)))
[	O
i	long
]	O
;	O
cp	*(struct(int,*(char),long,int))
->	O
num	int
=	O
chunk_num	int
;	O
cache_promote	(*(struct(int,*(struct),int,long,int,int,long,int,int,int,int,int,*(struct(int,int)),*(char),*(char),long,long,long,long,*(char),struct(*(char),int,long,*(char),int,long,*(char),*(struct`),*((*`,int,int)->(*`)),*((*`,*`)->(void)),*(void),int,long,long),int,long,long,*(*(struct`)))),int)->(void)
(	O
str	*(struct)
,	O
i	long
)	O
;	O
if	O
(	O
dico_stream_seek	(*(struct),long,int)->(long)
(	O
str	*(struct)
->	O
transport	*(struct)
,	O
str	*(struct)
->	O
chunk	*(struct(int,int))
[	O
chunk_num	int
]	O
.	O
offset	long
,	O
DICO_SEEK_SET	int
)	O
<	O
0	int
)	O
return	O
str	*(struct)
->	O
transport_error	int
=	O
dico_stream_last_error	(*(struct))->(int)
(	O
str	*(struct)
->	O
transport	*(struct)
)	O
;	O
if	O
(	O
!	O
str	*(struct)
->	O
zstr_ready	int
)	O
{	O
str	*(struct)
->	O
zstream	struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long)
.	O
zalloc	*((*(void),int,int)->(*(void)))
=	O
NULL	O
;	O
str	*(struct)
->	O
zstream	struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long)
.	O
zfree	*((*(void),*(void))->(void))
=	O
NULL	O
;	O
str	*(struct)
->	O
zstream	struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long)
.	O
opaque	*(void)
=	O
NULL	O
;	O
str	*(struct)
->	O
zstream	struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long)
.	O
next_in	*(char)
=	O
0	int
;	O
str	*(struct)
->	O
zstream	struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long)
.	O
avail_in	int
=	O
0	int
;	O
str	*(struct)
->	O
zstream	struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long)
.	O
next_out	*(char)
=	O
NULL	O
;	O
str	*(struct)
->	O
zstream	struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long)
.	O
avail_out	int
=	O
0	int
;	O
if	O
(	O
inflateInit2	O
(	O
&	O
str	*(struct)
->	O
zstream	struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long)
,	O
-	O
15	int
)	O
!=	O
Z_OK	int
)	O
{	O
dico_log	(int,int,*(char))->(void)
(	O
L_ERR	int
,	O
0	int
,	O
_	O
(	O
"cannot initialize inflation engine: %s"	*(char)
)	O
,	O
str	*(struct)
->	O
zstream	struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long)
.	O
msg	*(char)
)	O
;	O
return	O
DE_INFLATE	O
;	O
}	O
str	*(struct)
->	O
zstr_ready	int
=	O
1	int
;	O
}	O
if	O
(	O
dico_stream_read	(*(struct),*(void),long,*(long))->(int)
(	O
str	*(struct)
->	O
transport	*(struct)
,	O
str	*(struct)
->	O
buffer	*(char)
,	O
str	*(struct)
->	O
chunk	*(struct(int,int))
[	O
chunk_num	int
]	O
.	O
length	long
,	O
&	O
rdbytes	long
)	O
<	O
0	int
)	O
return	O
str	*(struct)
->	O
transport_error	int
=	O
dico_stream_last_error	(*(struct))->(int)
(	O
str	*(struct)
->	O
transport	*(struct)
)	O
;	O
str	*(struct)
->	O
zstream	struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long)
.	O
next_in	*(char)
=	O
(	O
unsigned	O
char	O
*	O
)	O
str	*(struct)
->	O
buffer	*(char)
;	O
str	*(struct)
->	O
zstream	struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long)
.	O
avail_in	int
=	O
rdbytes	long
;	O
str	*(struct)
->	O
zstream	struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long)
.	O
next_out	*(char)
=	O
(	O
unsigned	O
char	O
*	O
)	O
cp	*(struct(int,*(char),long,int))
->	O
buffer	*(char)
;	O
str	*(struct)
->	O
zstream	struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long)
.	O
avail_out	int
=	O
str	*(struct)
->	O
chunk_size	int
;	O
if	O
(	O
inflate	(*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*`,int,int)->(*`)),*((*`,*`)->(void)),*(void),int,long,long)),int)->(int)
(	O
&	O
str	*(struct)
->	O
zstream	struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long)
,	O
Z_PARTIAL_FLUSH	int
)	O
!=	O
Z_OK	int
)	O
{	O
dico_log	(int,int,*(char))->(void)
(	O
L_ERR	int
,	O
0	int
,	O
"inflate: %s"	*(char)
,	O
str	*(struct)
->	O
zstream	struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long)
.	O
msg	*(char)
)	O
;	O
return	O
DE_INFLATE	O
;	O
}	O
if	O
(	O
str	*(struct)
->	O
zstream	struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long)
.	O
avail_in	int
)	O
{	O
dico_log	(int,int,*(char))->(void)
(	O
L_ERR	int
,	O
0	int
,	O
_	O
(	O
"%s:%d: INTERNAL ERROR: "	*(char)
"inflate did not flush (%d pending, %d avail)"	*(char)
)	O
,	O
__FILE__	O
,	O
__LINE__	O
,	O
str	*(struct)
->	O
zstream	struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long)
.	O
avail_in	int
,	O
str	*(struct)
->	O
zstream	struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long)
.	O
avail_out	int
)	O
;	O
return	O
DE_INFLATE	O
;	O
}	O
cp	*(struct(int,*(char),long,int))
->	O
size	long
=	O
str	*(struct)
->	O
chunk_size	int
-	O
str	*(struct)
->	O
zstream	struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long)
.	O
avail_out	int
;	O
*	O
retptr	*(*(struct(int,*(char),long,int)))
=	O
cp	*(struct(int,*(char),long,int))
;	O
return	O
0	int
;	O
}	O
static	O
int	O
_dict_read_dzip	(*(struct(int,*(struct),int,long,int,int,long,int,int,int,int,int,*(struct(int,int)),*(char),*(char),long,long,long,long,*(char),struct(*(char),int,long,*(char),int,long,*(char),*(struct`),*((*`,int,int)->(*`)),*((*`,*`)->(void)),*(void),int,long,long),int,long,long,*(*(struct`)))),*(char),long,*(long))->(int)
(	O
struct	O
_dict_stream	struct(int,*(struct),int,long,int,int,long,int,int,int,int,int,*(struct(int,int)),*(char),*(char),long,long,long,long,*(char),struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long),int,long,long,*(*(struct(int,*(char),long,int))))
*	O
str	*(struct)
,	O
char	O
*	O
buf	*(void)
,	O
size_t	long
size	long
,	O
size_t	long
*	O
pret	*(*(void))
)	O
{	O
int	O
chunk_num	int
=	O
str	*(struct)
->	O
offset	long
/	O
str	*(struct)
->	O
chunk_size	int
;	O
size_t	long
chunk_off	long
=	O
str	*(struct)
->	O
offset	long
-	O
chunk_num	int
*	O
str	*(struct)
->	O
chunk_size	int
;	O
size_t	long
rdbytes	long
=	O
0	int
;	O
int	O
rc	int
;	O
while	O
(	O
size	long
)	O
{	O
struct	O
_dict_chunk_cache	struct(int,*(char),long,int)
*	O
cp	*(struct(int,*(char),long,int))
;	O
size_t	long
n	long
;	O
rc	int
=	O
cache_get	(*(struct(int,*(struct),int,long,int,int,long,int,int,int,int,int,*(struct(int,int)),*(char),*(char),long,long,long,long,*(char),struct(*(char),int,long,*(char),int,long,*(char),*(struct`),*((*`,int,int)->(*`)),*((*`,*`)->(void)),*(void),int,long,long),int,long,long,*(*(struct`)))),int,*(*(struct(int,*(char),long,int))))->(int)
(	O
str	*(struct)
,	O
chunk_num	int
,	O
&	O
cp	*(struct(int,*(char),long,int))
)	O
;	O
if	O
(	O
rc	int
)	O
break	O
;	O
n	long
=	O
cp	*(struct(int,*(char),long,int))
->	O
size	long
-	O
chunk_off	long
;	O
if	O
(	O
n	long
>	O
size	long
)	O
n	long
=	O
size	long
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
buf	*(void)
,	O
cp	*(struct(int,*(char),long,int))
->	O
buffer	*(char)
+	O
chunk_off	long
,	O
n	long
)	O
;	O
size	long
-=	O
n	long
;	O
buf	*(void)
+=	O
n	long
;	O
rdbytes	long
+=	O
n	long
;	O
str	*(struct)
->	O
offset	long
+=	O
n	long
;	O
chunk_num	int
++	O
;	O
chunk_off	long
=	O
0	int
;	O
}	O
*	O
pret	*(*(void))
=	O
rdbytes	long
;	O
return	O
rc	int
;	O
}	O
static	O
int	O
_dict_seek_dzip	(*(struct(int,*(struct),int,long,int,int,long,int,int,int,int,int,*(struct(int,int)),*(char),*(char),long,long,long,long,*(char),struct(*(char),int,long,*(char),int,long,*(char),*(struct`),*((*`,int,int)->(*`)),*((*`,*`)->(void)),*(void),int,long,long),int,long,long,*(*(struct`)))),long,int,*(long))->(int)
(	O
struct	O
_dict_stream	struct(int,*(struct),int,long,int,int,long,int,int,int,int,int,*(struct(int,int)),*(char),*(char),long,long,long,long,*(char),struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long),int,long,long,*(*(struct(int,*(char),long,int))))
*	O
str	*(struct)
,	O
off_t	long
needle	*(int)
,	O
int	O
whence	int
,	O
off_t	long
*	O
presult	*(long)
)	O
{	O
off_t	long
offset	long
;	O
switch	O
(	O
whence	int
)	O
{	O
case	O
DICO_SEEK_SET	int
:	O
offset	long
=	O
needle	*(int)
;	O
break	O
;	O
case	O
DICO_SEEK_CUR	int
:	O
offset	long
=	O
str	*(struct)
->	O
offset	long
+	O
needle	*(int)
;	O
break	O
;	O
case	O
DICO_SEEK_END	int
:	O
offset	long
=	O
str	*(struct)
->	O
size	long
+	O
needle	*(int)
;	O
break	O
;	O
default	O
:	O
return	O
EINVAL	int
;	O
}	O
if	O
(	O
offset	long
<	O
0	int
||	O
offset	long
>	O
str	*(struct)
->	O
size	long
)	O
return	O
EINVAL	int
;	O
*	O
presult	*(long)
=	O
str	*(struct)
->	O
offset	long
=	O
offset	long
;	O
return	O
0	int
;	O
}	O
static	O
int	O
_dict_close	(*(void))->(int)
(	O
void	O
*	O
data	*(void)
)	O
{	O
struct	O
_dict_stream	struct(int,*(struct),int,long,int,int,long,int,int,int,int,int,*(struct(int,int)),*(char),*(char),long,long,long,long,*(char),struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long),int,long,long,*(*(struct(int,*(char),long,int))))
*	O
str	*(struct)
=	O
data	*(void)
;	O
return	O
dico_stream_close	(*(struct))->(int)
(	O
str	*(struct)
->	O
transport	*(struct)
)	O
;	O
}	O
static	O
int	O
_dict_destroy	(*(void))->(int)
(	O
void	O
*	O
data	*(void)
)	O
{	O
struct	O
_dict_stream	struct(int,*(struct),int,long,int,int,long,int,int,int,int,int,*(struct(int,int)),*(char),*(char),long,long,long,long,*(char),struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long),int,long,long,*(*(struct(int,*(char),long,int))))
*	O
str	*(struct)
=	O
data	*(void)
;	O
if	O
(	O
str	*(struct)
->	O
zstr_ready	int
)	O
{	O
if	O
(	O
inflateEnd	(*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*`,int,int)->(*`)),*((*`,*`)->(void)),*(void),int,long,long)))->(int)
(	O
&	O
str	*(struct)
->	O
zstream	struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long)
)	O
)	O
dico_log	(int,int,*(char))->(void)
(	O
L_ERR	int
,	O
0	int
,	O
_	O
(	O
"%s:%d: INTERNAL ERROR: "	*(char)
"cannot shut down inflation engine: %s"	*(char)
)	O
,	O
__FILE__	O
,	O
__LINE__	O
,	O
str	*(struct)
->	O
zstream	struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long)
.	O
msg	*(char)
)	O
;	O
}	O
cache_destroy	(*(struct(int,*(struct),int,long,int,int,long,int,int,int,int,int,*(struct(int,int)),*(char),*(char),long,long,long,long,*(char),struct(*(char),int,long,*(char),int,long,*(char),*(struct`),*((*`,int,int)->(*`)),*((*`,*`)->(void)),*(void),int,long,long),int,long,long,*(*(struct`)))))->(void)
(	O
str	*(struct)
)	O
;	O
free	(*(void))->(void)
(	O
str	*(struct)
->	O
buffer	*(char)
)	O
;	O
dico_stream_destroy	(*(*(struct)))->(void)
(	O
&	O
str	*(struct)
->	O
transport	*(struct)
)	O
;	O
free	(*(void))->(void)
(	O
str	*(struct)
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
stream_get8	(*(struct),*(char))->(int)
(	O
dico_stream_t	*(struct)
str	*(struct)
,	O
unsigned	O
char	O
*	O
p	*(char)
)	O
{	O
return	O
dico_stream_read	(*(struct),*(void),long,*(long))->(int)
(	O
str	*(struct)
,	O
p	*(char)
,	O
1	int
,	O
NULL	O
)	O
;	O
}	O
static	O
int	O
stream_get16	(*(struct),*(short))->(int)
(	O
dico_stream_t	*(struct)
str	*(struct)
,	O
uint16_t	short
*	O
pres	*(short)
)	O
{	O
unsigned	O
char	O
buf	*(void)
[	O
2	int
]	O
;	O
int	O
rc	int
=	O
dico_stream_read	(*(struct),*(void),long,*(long))->(int)
(	O
str	*(struct)
,	O
buf	*(void)
,	O
sizeof	O
buf	*(void)
,	O
NULL	O
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
*	O
pres	*(short)
=	O
buf	*(void)
[	O
0	int
]	O
+	O
(	O
(	O
(	O
uint16_t	short
)	O
buf	*(void)
[	O
1	int
]	O
)	O
<<	O
8	int
)	O
;	O
return	O
rc	int
;	O
}	O
static	O
int	O
stream_get32	(*(struct),*(int))->(int)
(	O
dico_stream_t	*(struct)
str	*(struct)
,	O
uint32_t	int
*	O
pres	*(short)
)	O
{	O
unsigned	O
char	O
buf	*(void)
[	O
4	int
]	O
;	O
int	O
rc	int
=	O
dico_stream_read	(*(struct),*(void),long,*(long))->(int)
(	O
str	*(struct)
,	O
buf	*(void)
,	O
sizeof	O
buf	*(void)
,	O
NULL	O
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
*	O
pres	*(short)
=	O
(	O
(	O
(	O
uint16_t	short
)	O
buf	*(void)
[	O
3	int
]	O
)	O
<<	O
24	int
)	O
+	O
(	O
(	O
(	O
uint16_t	short
)	O
buf	*(void)
[	O
2	int
]	O
)	O
<<	O
16	int
)	O
+	O
(	O
(	O
(	O
uint16_t	short
)	O
buf	*(void)
[	O
1	int
]	O
)	O
<<	O
8	int
)	O
+	O
buf	*(void)
[	O
0	int
]	O
;	O
return	O
rc	int
;	O
}	O
static	O
int	O
_dict_open	(*(void),int)->(int)
(	O
void	O
*	O
data	*(void)
,	O
int	O
flags	int
)	O
{	O
struct	O
_dict_stream	struct(int,*(struct),int,long,int,int,long,int,int,int,int,int,*(struct(int,int)),*(char),*(char),long,long,long,long,*(char),struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long),int,long,long,*(*(struct(int,*(char),long,int))))
*	O
str	*(struct)
=	O
data	*(void)
;	O
unsigned	O
char	O
id	array(char)
[	O
2	int
]	O
;	O
int	O
rc	int
;	O
unsigned	O
char	O
buf8	char
;	O
uint16_t	short
buf16	short
;	O
uint32_t	int
buf32	int
;	O
unsigned	O
i	long
;	O
unsigned	O
offset	long
;	O
off_t	long
pos	long
;	O
if	O
(	O
dico_stream_open	(*(struct))->(int)
(	O
str	*(struct)
->	O
transport	*(struct)
)	O
)	O
return	O
str	*(struct)
->	O
transport_error	int
=	O
dico_stream_last_error	(*(struct))->(int)
(	O
str	*(struct)
->	O
transport	*(struct)
)	O
;	O
str	*(struct)
->	O
header_length	long
=	O
GZ_XLEN	int
-	O
1	int
;	O
str	*(struct)
->	O
type	enum(int,int,int)
=	O
DICTORG_UNKNOWN	int
;	O
rc	int
=	O
dico_stream_read	(*(struct),*(void),long,*(long))->(int)
(	O
str	*(struct)
->	O
transport	*(struct)
,	O
id	array(char)
,	O
2	int
,	O
NULL	O
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
dico_stream_close	(*(struct))->(int)
(	O
str	*(struct)
->	O
transport	*(struct)
)	O
;	O
return	O
str	*(struct)
->	O
transport_error	int
=	O
dico_stream_last_error	(*(struct))->(int)
(	O
str	*(struct)
->	O
transport	*(struct)
)	O
;	O
}	O
if	O
(	O
id	array(char)
[	O
0	int
]	O
!=	O
GZ_MAGIC1	int
||	O
id	array(char)
[	O
1	int
]	O
!=	O
GZ_MAGIC2	int
)	O
{	O
str	*(struct)
->	O
type	enum(int,int,int)
=	O
DICTORG_TEXT	int
;	O
dico_stream_size	(*(struct),*(long))->(int)
(	O
str	*(struct)
->	O
transport	*(struct)
,	O
&	O
pos	long
)	O
;	O
str	*(struct)
->	O
compressed_size	long
=	O
str	*(struct)
->	O
size	long
=	O
pos	long
;	O
return	O
0	int
;	O
}	O
str	*(struct)
->	O
type	enum(int,int,int)
=	O
DICTORG_GZIP	int
;	O
stream_get8	(*(struct),*(char))->(int)
(	O
str	*(struct)
->	O
transport	*(struct)
,	O
&	O
buf8	char
)	O
;	O
str	*(struct)
->	O
method	int
=	O
buf8	char
;	O
stream_get8	(*(struct),*(char))->(int)
(	O
str	*(struct)
->	O
transport	*(struct)
,	O
&	O
buf8	char
)	O
;	O
str	*(struct)
->	O
flags	int
=	O
buf8	char
;	O
stream_get32	(*(struct),*(int))->(int)
(	O
str	*(struct)
->	O
transport	*(struct)
,	O
&	O
buf32	int
)	O
;	O
str	*(struct)
->	O
mtime	long
=	O
buf32	int
;	O
stream_get8	(*(struct),*(char))->(int)
(	O
str	*(struct)
->	O
transport	*(struct)
,	O
&	O
buf8	char
)	O
;	O
str	*(struct)
->	O
extra_flags	int
=	O
buf8	char
;	O
stream_get8	(*(struct),*(char))->(int)
(	O
str	*(struct)
->	O
transport	*(struct)
,	O
&	O
buf8	char
)	O
;	O
str	*(struct)
->	O
os	int
=	O
buf8	char
;	O
if	O
(	O
str	*(struct)
->	O
flags	int
&	O
GZ_FEXTRA	int
)	O
{	O
stream_get16	(*(struct),*(short))->(int)
(	O
str	*(struct)
->	O
transport	*(struct)
,	O
&	O
buf16	short
)	O
;	O
str	*(struct)
->	O
header_length	long
+=	O
buf16	short
+	O
2	int
;	O
dico_stream_read	(*(struct),*(void),long,*(long))->(int)
(	O
str	*(struct)
->	O
transport	*(struct)
,	O
id	array(char)
,	O
2	int
,	O
NULL	O
)	O
;	O
if	O
(	O
id	array(char)
[	O
0	int
]	O
==	O
GZ_RND_S1	char
&&	O
id	array(char)
[	O
1	int
]	O
==	O
GZ_RND_S2	char
)	O
{	O
dico_stream_seek	(*(struct),long,int)->(long)
(	O
str	*(struct)
->	O
transport	*(struct)
,	O
2	int
,	O
DICO_SEEK_CUR	int
)	O
;	O
stream_get16	(*(struct),*(short))->(int)
(	O
str	*(struct)
->	O
transport	*(struct)
,	O
&	O
buf16	short
)	O
;	O
str	*(struct)
->	O
version	*(char)
=	O
buf16	short
;	O
if	O
(	O
str	*(struct)
->	O
version	*(char)
!=	O
1	int
)	O
return	O
DE_UNSUPPORTED_VERSION	O
;	O
stream_get16	(*(struct),*(short))->(int)
(	O
str	*(struct)
->	O
transport	*(struct)
,	O
&	O
buf16	short
)	O
;	O
str	*(struct)
->	O
chunk_size	int
=	O
buf16	short
;	O
str	*(struct)
->	O
buffer	*(char)
=	O
malloc	(long)->(*(void))
(	O
buf16	short
)	O
;	O
if	O
(	O
!	O
str	*(struct)
->	O
buffer	*(char)
)	O
return	O
ENOMEM	int
;	O
stream_get16	(*(struct),*(short))->(int)
(	O
str	*(struct)
->	O
transport	*(struct)
,	O
&	O
buf16	short
)	O
;	O
str	*(struct)
->	O
chunk_count	int
=	O
buf16	short
;	O
if	O
(	O
str	*(struct)
->	O
chunk_count	int
==	O
0	int
)	O
return	O
DE_BAD_HEADER	O
;	O
str	*(struct)
->	O
chunk	*(struct(int,int))
=	O
calloc	(long,long)->(*(void))
(	O
str	*(struct)
->	O
chunk_count	int
,	O
sizeof	O
(	O
str	*(struct)
->	O
chunk	*(struct(int,int))
[	O
0	int
]	O
)	O
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
str	*(struct)
->	O
chunk_count	int
;	O
i	long
++	O
)	O
{	O
stream_get16	(*(struct),*(short))->(int)
(	O
str	*(struct)
->	O
transport	*(struct)
,	O
&	O
buf16	short
)	O
;	O
str	*(struct)
->	O
chunk	*(struct(int,int))
[	O
i	long
]	O
.	O
length	long
=	O
buf16	short
;	O
}	O
str	*(struct)
->	O
type	enum(int,int,int)
=	O
DICTORG_DZIP	int
;	O
}	O
else	O
dico_stream_seek	(*(struct),long,int)->(long)
(	O
str	*(struct)
->	O
transport	*(struct)
,	O
str	*(struct)
->	O
header_length	long
,	O
DICO_SEEK_SET	int
)	O
;	O
}	O
str	*(struct)
->	O
orig_name	*(char)
=	O
NULL	O
;	O
if	O
(	O
str	*(struct)
->	O
flags	int
&	O
GZ_FNAME	int
)	O
{	O
size_t	long
size	long
=	O
0	int
,	O
rdbytes	long
;	O
dico_stream_getdelim	(*(struct),*(*(char)),*(long),int,*(long))->(int)
(	O
str	*(struct)
->	O
transport	*(struct)
,	O
&	O
str	*(struct)
->	O
orig_name	*(char)
,	O
&	O
size	long
,	O
0	int
,	O
&	O
rdbytes	long
)	O
;	O
str	*(struct)
->	O
header_length	long
+=	O
rdbytes	long
;	O
}	O
else	O
str	*(struct)
->	O
orig_name	*(char)
=	O
NULL	O
;	O
str	*(struct)
->	O
comment	*(char)
=	O
NULL	O
;	O
if	O
(	O
str	*(struct)
->	O
flags	int
&	O
GZ_COMMENT	int
)	O
{	O
size_t	long
size	long
=	O
0	int
,	O
rdbytes	long
;	O
dico_stream_getdelim	(*(struct),*(*(char)),*(long),int,*(long))->(int)
(	O
str	*(struct)
->	O
transport	*(struct)
,	O
&	O
str	*(struct)
->	O
comment	*(char)
,	O
&	O
size	long
,	O
0	int
,	O
&	O
rdbytes	long
)	O
;	O
str	*(struct)
->	O
header_length	long
+=	O
rdbytes	long
;	O
}	O
if	O
(	O
str	*(struct)
->	O
flags	int
&	O
GZ_FHCRC	int
)	O
{	O
dico_stream_seek	(*(struct),long,int)->(long)
(	O
str	*(struct)
->	O
transport	*(struct)
,	O
2	int
,	O
DICO_SEEK_CUR	int
)	O
;	O
str	*(struct)
->	O
header_length	long
+=	O
2	int
;	O
}	O
pos	long
=	O
dico_stream_seek	(*(struct),long,int)->(long)
(	O
str	*(struct)
->	O
transport	*(struct)
,	O
0	int
,	O
DICO_SEEK_CUR	int
)	O
;	O
if	O
(	O
pos	long
!=	O
str	*(struct)
->	O
header_length	long
+	O
1	int
)	O
{	O
dico_log	(int,int,*(char))->(void)
(	O
L_ERR	int
,	O
0	int
,	O
_	O
(	O
"file position (%lu) != header length + 1 (%lu)"	*(char)
)	O
,	O
(	O
unsigned	O
long	O
)	O
pos	long
,	O
(	O
unsigned	O
long	O
)	O
(	O
str	*(struct)
->	O
header_length	long
+	O
1	int
)	O
)	O
;	O
return	O
DE_BAD_HEADER	O
;	O
}	O
offset	long
=	O
str	*(struct)
->	O
header_length	long
+	O
1	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
str	*(struct)
->	O
chunk_count	int
;	O
i	long
++	O
)	O
{	O
str	*(struct)
->	O
chunk	*(struct(int,int))
[	O
i	long
]	O
.	O
offset	long
=	O
offset	long
;	O
offset	long
+=	O
str	*(struct)
->	O
chunk	*(struct(int,int))
[	O
i	long
]	O
.	O
length	long
;	O
}	O
dico_stream_seek	(*(struct),long,int)->(long)
(	O
str	*(struct)
->	O
transport	*(struct)
,	O
-	O
8	int
,	O
DICO_SEEK_END	int
)	O
;	O
stream_get32	(*(struct),*(int))->(int)
(	O
str	*(struct)
->	O
transport	*(struct)
,	O
&	O
buf32	int
)	O
;	O
str	*(struct)
->	O
crc	long
=	O
buf32	int
;	O
stream_get32	(*(struct),*(int))->(int)
(	O
str	*(struct)
->	O
transport	*(struct)
,	O
&	O
buf32	int
)	O
;	O
str	*(struct)
->	O
size	long
=	O
buf32	int
;	O
str	*(struct)
->	O
compressed_size	long
=	O
dico_stream_seek	(*(struct),long,int)->(long)
(	O
str	*(struct)
->	O
transport	*(struct)
,	O
0	int
,	O
DICO_SEEK_CUR	int
)	O
;	O
if	O
(	O
dico_stream_last_error	(*(struct))->(int)
(	O
str	*(struct)
->	O
transport	*(struct)
)	O
)	O
return	O
DE_BAD_HEADER	O
;	O
return	O
0	int
;	O
}	O
static	O
const	O
char	O
*	O
_dict_strerror	(*(void),int)->(*(char))
(	O
void	O
*	O
data	*(void)
,	O
int	O
rc	int
)	O
{	O
struct	O
_dict_stream	struct(int,*(struct),int,long,int,int,long,int,int,int,int,int,*(struct(int,int)),*(char),*(char),long,long,long,long,*(char),struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long),int,long,long,*(*(struct(int,*(char),long,int))))
*	O
str	*(struct)
=	O
data	*(void)
;	O
if	O
(	O
str	*(struct)
->	O
transport_error	int
)	O
{	O
str	*(struct)
->	O
transport_error	int
=	O
0	int
;	O
return	O
dico_stream_strerror	(*(struct),int)->(*(char))
(	O
str	*(struct)
->	O
transport	*(struct)
,	O
rc	int
)	O
;	O
}	O
switch	O
(	O
rc	int
)	O
{	O
case	O
DE_UNKNOWN_FORMAT	O
:	O
return	O
_	O
(	O
"unknown dictionary format"	*(char)
)	O
;	O
case	O
DE_UNSUPPORTED_FORMAT	O
:	O
return	O
_	O
(	O
"unsupported dictionary format"	*(char)
)	O
;	O
case	O
DE_UNSUPPORTED_VERSION	O
:	O
return	O
_	O
(	O
"unsupported dictionary version"	*(char)
)	O
;	O
case	O
DE_BAD_HEADER	O
:	O
return	O
_	O
(	O
"malformed header"	*(char)
)	O
;	O
case	O
DE_GZIP_SEEK	O
:	O
return	O
_	O
(	O
"cannot seek on pure gzip format files"	*(char)
)	O
;	O
case	O
DE_INFLATE	O
:	O
return	O
_	O
(	O
"error decompressing stream"	*(char)
)	O
;	O
default	O
:	O
return	O
strerror	(int)->(*(char))
(	O
rc	int
)	O
;	O
}	O
}	O
static	O
int	O
_dict_read_text	(*(struct(int,*(struct),int,long,int,int,long,int,int,int,int,int,*(struct(int,int)),*(char),*(char),long,long,long,long,*(char),struct(*(char),int,long,*(char),int,long,*(char),*(struct`),*((*`,int,int)->(*`)),*((*`,*`)->(void)),*(void),int,long,long),int,long,long,*(*(struct`)))),*(char),long,*(long))->(int)
(	O
struct	O
_dict_stream	struct(int,*(struct),int,long,int,int,long,int,int,int,int,int,*(struct(int,int)),*(char),*(char),long,long,long,long,*(char),struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long),int,long,long,*(*(struct(int,*(char),long,int))))
*	O
str	*(struct)
,	O
char	O
*	O
buf	*(void)
,	O
size_t	long
size	long
,	O
size_t	long
*	O
pret	*(*(void))
)	O
{	O
if	O
(	O
dico_stream_read	(*(struct),*(void),long,*(long))->(int)
(	O
str	*(struct)
->	O
transport	*(struct)
,	O
buf	*(void)
,	O
size	long
,	O
pret	*(*(void))
)	O
)	O
return	O
str	*(struct)
->	O
transport_error	int
=	O
dico_stream_last_error	(*(struct))->(int)
(	O
str	*(struct)
->	O
transport	*(struct)
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
_dict_read	(*(void),*(char),long,*(long))->(int)
(	O
void	O
*	O
data	*(void)
,	O
char	O
*	O
buf	*(void)
,	O
size_t	long
size	long
,	O
size_t	long
*	O
pret	*(*(void))
)	O
{	O
struct	O
_dict_stream	struct(int,*(struct),int,long,int,int,long,int,int,int,int,int,*(struct(int,int)),*(char),*(char),long,long,long,long,*(char),struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long),int,long,long,*(*(struct(int,*(char),long,int))))
*	O
str	*(struct)
=	O
data	*(void)
;	O
switch	O
(	O
str	*(struct)
->	O
type	enum(int,int,int)
)	O
{	O
case	O
DICTORG_UNKNOWN	int
:	O
return	O
DE_UNKNOWN_FORMAT	O
;	O
case	O
DICTORG_TEXT	int
:	O
return	O
_dict_read_text	(*(struct(int,*(struct),int,long,int,int,long,int,int,int,int,int,*(struct(int,int)),*(char),*(char),long,long,long,long,*(char),struct(*(char),int,long,*(char),int,long,*(char),*(struct`),*((*`,int,int)->(*`)),*((*`,*`)->(void)),*(void),int,long,long),int,long,long,*(*(struct`)))),*(char),long,*(long))->(int)
(	O
str	*(struct)
,	O
buf	*(void)
,	O
size	long
,	O
pret	*(*(void))
)	O
;	O
case	O
DICTORG_GZIP	int
:	O
return	O
DE_GZIP_SEEK	O
;	O
case	O
DICTORG_DZIP	int
:	O
return	O
_dict_read_dzip	(*(struct(int,*(struct),int,long,int,int,long,int,int,int,int,int,*(struct(int,int)),*(char),*(char),long,long,long,long,*(char),struct(*(char),int,long,*(char),int,long,*(char),*(struct`),*((*`,int,int)->(*`)),*((*`,*`)->(void)),*(void),int,long,long),int,long,long,*(*(struct`)))),*(char),long,*(long))->(int)
(	O
str	*(struct)
,	O
buf	*(void)
,	O
size	long
,	O
pret	*(*(void))
)	O
;	O
}	O
return	O
DE_UNSUPPORTED_FORMAT	O
;	O
}	O
static	O
int	O
_dict_seek_text	(*(struct(int,*(struct),int,long,int,int,long,int,int,int,int,int,*(struct(int,int)),*(char),*(char),long,long,long,long,*(char),struct(*(char),int,long,*(char),int,long,*(char),*(struct`),*((*`,int,int)->(*`)),*((*`,*`)->(void)),*(void),int,long,long),int,long,long,*(*(struct`)))),long,int,*(long))->(int)
(	O
struct	O
_dict_stream	struct(int,*(struct),int,long,int,int,long,int,int,int,int,int,*(struct(int,int)),*(char),*(char),long,long,long,long,*(char),struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long),int,long,long,*(*(struct(int,*(char),long,int))))
*	O
str	*(struct)
,	O
off_t	long
needle	*(int)
,	O
int	O
whence	int
,	O
off_t	long
*	O
presult	*(long)
)	O
{	O
off_t	long
off	long
=	O
dico_stream_seek	(*(struct),long,int)->(long)
(	O
str	*(struct)
->	O
transport	*(struct)
,	O
needle	*(int)
,	O
whence	int
)	O
;	O
if	O
(	O
off	long
<	O
0	int
)	O
return	O
str	*(struct)
->	O
transport_error	int
=	O
dico_stream_last_error	(*(struct))->(int)
(	O
str	*(struct)
->	O
transport	*(struct)
)	O
;	O
*	O
presult	*(long)
=	O
off	long
;	O
return	O
0	int
;	O
}	O
static	O
int	O
_dict_seek	(*(void),long,int,*(long))->(int)
(	O
void	O
*	O
data	*(void)
,	O
off_t	long
needle	*(int)
,	O
int	O
whence	int
,	O
off_t	long
*	O
presult	*(long)
)	O
{	O
struct	O
_dict_stream	struct(int,*(struct),int,long,int,int,long,int,int,int,int,int,*(struct(int,int)),*(char),*(char),long,long,long,long,*(char),struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long),int,long,long,*(*(struct(int,*(char),long,int))))
*	O
str	*(struct)
=	O
data	*(void)
;	O
switch	O
(	O
str	*(struct)
->	O
type	enum(int,int,int)
)	O
{	O
case	O
DICTORG_UNKNOWN	int
:	O
return	O
DE_UNKNOWN_FORMAT	O
;	O
case	O
DICTORG_TEXT	int
:	O
return	O
_dict_seek_text	(*(struct(int,*(struct),int,long,int,int,long,int,int,int,int,int,*(struct(int,int)),*(char),*(char),long,long,long,long,*(char),struct(*(char),int,long,*(char),int,long,*(char),*(struct`),*((*`,int,int)->(*`)),*((*`,*`)->(void)),*(void),int,long,long),int,long,long,*(*(struct`)))),long,int,*(long))->(int)
(	O
str	*(struct)
,	O
needle	*(int)
,	O
whence	int
,	O
presult	*(long)
)	O
;	O
case	O
DICTORG_GZIP	int
:	O
return	O
DE_GZIP_SEEK	O
;	O
case	O
DICTORG_DZIP	int
:	O
return	O
_dict_seek_dzip	(*(struct(int,*(struct),int,long,int,int,long,int,int,int,int,int,*(struct(int,int)),*(char),*(char),long,long,long,long,*(char),struct(*(char),int,long,*(char),int,long,*(char),*(struct`),*((*`,int,int)->(*`)),*((*`,*`)->(void)),*(void),int,long,long),int,long,long,*(*(struct`)))),long,int,*(long))->(int)
(	O
str	*(struct)
,	O
needle	*(int)
,	O
whence	int
,	O
presult	*(long)
)	O
;	O
}	O
return	O
DE_UNSUPPORTED_FORMAT	O
;	O
}	O
dico_stream_t	*(struct)
dict_stream_create	(*(char),long)->(*(struct))
(	O
const	O
char	O
*	O
filename	*(char)
,	O
size_t	long
cache_size	long
)	O
{	O
int	O
rc	int
;	O
dico_stream_t	*(struct)
str	*(struct)
;	O
struct	O
_dict_stream	struct(int,*(struct),int,long,int,int,long,int,int,int,int,int,*(struct(int,int)),*(char),*(char),long,long,long,long,*(char),struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long),int,long,long,*(*(struct(int,*(char),long,int))))
*	O
s	*(char)
=	O
malloc	(long)->(*(void))
(	O
sizeof	O
(	O
*	O
s	*(char)
)	O
)	O
;	O
if	O
(	O
!	O
s	*(char)
)	O
return	O
NULL	O
;	O
rc	int
=	O
dico_stream_create	(*(*(struct)),int,*(void))->(int)
(	O
&	O
str	*(struct)
,	O
DICO_STREAM_READ	int
|	O
DICO_STREAM_SEEK	int
,	O
s	*(char)
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
free	(*(void))->(void)
(	O
s	*(char)
)	O
;	O
return	O
NULL	O
;	O
}	O
memset	(*(void),int,long)->(*(void))
(	O
s	*(char)
,	O
0	int
,	O
sizeof	O
(	O
*	O
s	*(char)
)	O
)	O
;	O
s	*(char)
->	O
type	enum(int,int,int)
=	O
DICTORG_UNKNOWN	int
;	O
s	*(char)
->	O
cache_size	long
=	O
cache_size	long
?	O
cache_size	long
:	O
10	int
;	O
s	*(char)
->	O
transport	*(struct)
=	O
dico_mapfile_stream_create	(*(char),int)->(*(struct))
(	O
filename	*(char)
,	O
DICO_STREAM_READ	int
|	O
DICO_STREAM_SEEK	int
)	O
;	O
dico_stream_set_open	(*(struct),*((*(void),int)->(int)))->(void)
(	O
str	*(struct)
,	O
_dict_open	(*(void),int)->(int)
)	O
;	O
dico_stream_set_read	(*(struct),*((*(void),*(char),long,*(long))->(int)))->(void)
(	O
str	*(struct)
,	O
_dict_read	(*(void),*(char),long,*(long))->(int)
)	O
;	O
dico_stream_set_seek	(*(struct),*((*(void),long,int,*(long))->(int)))->(void)
(	O
str	*(struct)
,	O
_dict_seek	(*(void),long,int,*(long))->(int)
)	O
;	O
dico_stream_set_close	(*(struct),*((*(void))->(int)))->(void)
(	O
str	*(struct)
,	O
_dict_close	(*(void))->(int)
)	O
;	O
dico_stream_set_destroy	(*(struct),*((*(void))->(int)))->(void)
(	O
str	*(struct)
,	O
_dict_destroy	(*(void))->(int)
)	O
;	O
dico_stream_set_error_string	(*(struct),*((*(void),int)->(*(char))))->(void)
(	O
str	*(struct)
,	O
_dict_strerror	(*(void),int)->(*(char))
)	O
;	O
return	O
str	*(struct)
;	O
}	O
