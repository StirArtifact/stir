typedef	O
struct	O
{	O
EUint32	long
nElems	long
;	O
EDMAT_BUFFER	struct(long,long,*(void))
List	struct(long,long,*(void))
;	O
}	O
DtID	struct(long,struct(long,long,*(void)))
;	O
typedef	O
struct	O
{	O
EChar	char
ClassName	*(char)
[	O
80	int
]	O
;	O
EChar	char
StringId	array(char)
[	O
80	int
]	O
;	O
EChar	char
ByteId	array(char)
[	O
80	int
]	O
;	O
EChar	char
Description	array(char)
[	O
80	int
]	O
;	O
EUint32	long
Offset	long
;	O
}	O
ID_LIST	struct(array(char),array(char),array(char),array(char),long)
;	O
EUint32	long
EDMAPROC	O
IDborn	(int)->(long)
(	O
OBJID	int
IdObj	int
)	O
{	O
DtID	struct(long,struct(long,long,*(void)))
*	O
m	*(struct(long,struct(long,long,*(void))))
;	O
m	*(struct(long,struct(long,long,*(void))))
=	O
(	O
DtID	struct(long,struct(long,long,*(void)))
*	O
)	O
edma_get_data_ref	(int)->(*(void))
(	O
IdObj	int
)	O
;	O
return	O
0	int
;	O
}	O
EUint32	long
EDMAPROC	O
IDrip	(int)->(long)
(	O
OBJID	int
IdObj	int
)	O
{	O
DtID	struct(long,struct(long,long,*(void)))
*	O
m	*(struct(long,struct(long,long,*(void))))
;	O
m	*(struct(long,struct(long,long,*(void))))
=	O
(	O
DtID	struct(long,struct(long,long,*(void)))
*	O
)	O
edma_get_data_ref	(int)->(*(void))
(	O
IdObj	int
)	O
;	O
edma_buffer_free	(*(struct(long,long,*(void))))->(int)
(	O
&	O
m	*(struct(long,struct(long,long,*(void))))
->	O
List	struct(long,long,*(void))
)	O
;	O
return	O
0	int
;	O
}	O
EUint32	long
EDMAPROC	O
IDGetClassZsZ	(int,*(char),*(*(char)))->(long)
(	O
OBJID	int
IdObj	int
,	O
EPChar	*(char)
Id	int
,	O
EPChar	*(char)
*	O
Result	*(*(char))
)	O
{	O
DtID	struct(long,struct(long,long,*(void)))
*	O
m	*(struct(long,struct(long,long,*(void))))
;	O
EUint32	long
i	int
;	O
ID_LIST	struct(array(char),array(char),array(char),array(char),long)
*	O
Aux	*(struct(array(char),array(char),array(char),array(char),long))
;	O
m	*(struct(long,struct(long,long,*(void))))
=	O
(	O
DtID	struct(long,struct(long,long,*(void)))
*	O
)	O
edma_get_data_ref	(int)->(*(void))
(	O
IdObj	int
)	O
;	O
Aux	*(struct(array(char),array(char),array(char),array(char),long))
=	O
(	O
ID_LIST	struct(array(char),array(char),array(char),array(char),long)
*	O
)	O
(	O
m	*(struct(long,struct(long,long,*(void))))
->	O
List	struct(long,long,*(void))
.	O
dat	*(void)
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
m	*(struct(long,struct(long,long,*(void))))
->	O
nElems	long
;	O
i	int
++	O
)	O
{	O
if	O
(	O
strncmp	(*(char),*(char),int)->(int)
(	O
Aux	*(struct(array(char),array(char),array(char),array(char),long))
[	O
i	int
]	O
.	O
StringId	array(char)
,	O
Id	int
,	O
80	int
)	O
==	O
0	int
)	O
break	O
;	O
}	O
if	O
(	O
i	int
!=	O
m	*(struct(long,struct(long,long,*(void))))
->	O
nElems	long
)	O
*	O
Result	*(*(char))
=	O
Aux	*(struct(array(char),array(char),array(char),array(char),long))
[	O
i	int
]	O
.	O
ClassName	*(char)
;	O
else	O
{	O
*	O
Result	*(*(char))
=	O
NULL	O
;	O
edma_printf_obj	(int,*(char))->(long)
(	O
IdObj	int
,	O
"No class matches %s"	*(char)
,	O
Id	int
)	O
;	O
}	O
return	O
0	int
;	O
}	O
EUint32	long
EDMAPROC	O
IDGetClassExZZsZ	(int,*(char),*(char),*(*(char)))->(long)
(	O
OBJID	int
IdObj	int
,	O
EPChar	*(char)
Id	int
,	O
EPChar	*(char)
Id1	*(char)
,	O
EPChar	*(char)
*	O
Result	*(*(char))
)	O
{	O
DtID	struct(long,struct(long,long,*(void)))
*	O
m	*(struct(long,struct(long,long,*(void))))
;	O
m	*(struct(long,struct(long,long,*(void))))
=	O
(	O
DtID	struct(long,struct(long,long,*(void)))
*	O
)	O
edma_get_data_ref	(int)->(*(void))
(	O
IdObj	int
)	O
;	O
edma_printf_obj	(int,*(char))->(long)
(	O
IdObj	int
,	O
"%s"	*(char)
,	O
"GetClassEx not implemented"	*(char)
)	O
;	O
return	O
0	int
;	O
}	O
EUint32	long
EDMAPROC	O
IDSetDBZ	(int,*(char))->(long)
(	O
OBJID	int
IdObj	int
,	O
EPChar	*(char)
Name	*(char)
)	O
{	O
DtID	struct(long,struct(long,long,*(void)))
*	O
m	*(struct(long,struct(long,long,*(void))))
;	O
FILE	struct
*	O
f	*(char)
;	O
EUint32	long
i	int
,	O
n	long
;	O
ID_LIST	struct(array(char),array(char),array(char),array(char),long)
*	O
Aux	*(struct(array(char),array(char),array(char),array(char),long))
;	O
EChar	char
temp	array(char)
[	O
1024	int
]	O
,	O
*	O
aux	*(char)
;	O
m	*(struct(long,struct(long,long,*(void))))
=	O
(	O
DtID	struct(long,struct(long,long,*(void)))
*	O
)	O
edma_get_data_ref	(int)->(*(void))
(	O
IdObj	int
)	O
;	O
edma_buffer_alloc	(*(struct(long,long,*(void))),long)->(int)
(	O
&	O
m	*(struct(long,struct(long,long,*(void))))
->	O
List	struct(long,long,*(void))
,	O
sizeof	O
(	O
ID_LIST	struct(array(char),array(char),array(char),array(char),long)
)	O
*	O
MAX_ID	int
)	O
;	O
if	O
(	O
m	*(struct(long,struct(long,long,*(void))))
->	O
List	struct(long,long,*(void))
.	O
h	long
==	O
0	int
)	O
{	O
edma_printf_obj	(int,*(char))->(long)
(	O
IdObj	int
,	O
"%s"	*(char)
,	O
"Can't create shared memory block"	*(char)
)	O
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
(	O
f	*(char)
=	O
fopen	(*(char),*(char))->(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long long,*`,*`,*`,*`,int,int,array(char))),int,int,long,short,char,array(char),*(void),long long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long long,*`,*`,*`,*`,int,int,array(char))),*(void),int,int,array(char))))
(	O
Name	*(char)
,	O
"rt"	*(char)
)	O
)	O
==	O
NULL	O
)	O
{	O
edma_printf_obj	(int,*(char))->(long)
(	O
IdObj	int
,	O
"Can't open config file %s"	*(char)
,	O
Name	*(char)
)	O
;	O
edma_buffer_free	(*(struct(long,long,*(void))))->(int)
(	O
&	O
m	*(struct(long,struct(long,long,*(void))))
->	O
List	struct(long,long,*(void))
)	O
;	O
return	O
-	O
1	int
;	O
}	O
fscanf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long long,*`,*`,*`,*`,int,int,array(char))),int,int,long,short,char,array(char),*(void),long long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long long,*`,*`,*`,*`,int,int,array(char))),*(void),int,int,array(char))),*(char))->(int)
(	O
f	*(char)
,	O
"%ld\n"	*(char)
,	O
&	O
n	long
)	O
;	O
m	*(struct(long,struct(long,long,*(void))))
->	O
nElems	long
=	O
n	long
;	O
Aux	*(struct(array(char),array(char),array(char),array(char),long))
=	O
(	O
ID_LIST	struct(array(char),array(char),array(char),array(char),long)
*	O
)	O
(	O
m	*(struct(long,struct(long,long,*(void))))
->	O
List	struct(long,long,*(void))
.	O
dat	*(void)
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
n	long
;	O
i	int
++	O
)	O
{	O
memset	(*(void),int,int)->(*(void))
(	O
temp	array(char)
,	O
0	int
,	O
1024	int
)	O
;	O
fgets	(*(char),int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long long,*`,*`,*`,*`,int,int,array(char))),int,int,long,short,char,array(char),*(void),long long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long long,*`,*`,*`,*`,int,int,array(char))),*(void),int,int,array(char))))->(*(char))
(	O
temp	array(char)
,	O
1024	int
,	O
f	*(char)
)	O
;	O
aux	*(char)
=	O
temp	array(char)
;	O
while	O
(	O
*	O
++	O
aux	*(char)
!=	O
0	int
)	O
if	O
(	O
*	O
aux	*(char)
==	O
'\n'	O
||	O
*	O
aux	*(char)
==	O
'\r'	O
)	O
*	O
aux	*(char)
=	O
0	int
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
Aux	*(struct(array(char),array(char),array(char),array(char),long))
[	O
i	int
]	O
.	O
ClassName	*(char)
,	O
strtok	(*(char),*(char))->(*(char))
(	O
temp	array(char)
,	O
":"	*(char)
)	O
)	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
Aux	*(struct(array(char),array(char),array(char),array(char),long))
[	O
i	int
]	O
.	O
StringId	array(char)
,	O
strtok	(*(char),*(char))->(*(char))
(	O
NULL	O
,	O
":"	*(char)
)	O
)	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
Aux	*(struct(array(char),array(char),array(char),array(char),long))
[	O
i	int
]	O
.	O
Description	array(char)
,	O
strtok	(*(char),*(char))->(*(char))
(	O
NULL	O
,	O
":"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
"(%s)(%s)(%s)\n"	*(char)
,	O
Aux	*(struct(array(char),array(char),array(char),array(char),long))
[	O
i	int
]	O
.	O
ClassName	*(char)
,	O
Aux	*(struct(array(char),array(char),array(char),array(char),long))
[	O
i	int
]	O
.	O
StringId	array(char)
,	O
Aux	*(struct(array(char),array(char),array(char),array(char),long))
[	O
i	int
]	O
.	O
Description	array(char)
)	O
;	O
}	O
fclose	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long long,*`,*`,*`,*`,int,int,array(char))),int,int,long,short,char,array(char),*(void),long long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long long,*`,*`,*`,*`,int,int,array(char))),*(void),int,int,array(char))))->(int)
(	O
f	*(char)
)	O
;	O
return	O
0	int
;	O
}	O
EUint32	long
EDMAPROC	O
IDGetItemU32sZsZsZ	(int,long,*(char),*(char),*(char))->(long)
(	O
OBJID	int
IdObj	int
,	O
EUint32	long
i	int
,	O
EPChar	*(char)
cn	*(char)
,	O
EPChar	*(char)
sid	*(char)
,	O
EPChar	*(char)
des	*(char)
)	O
{	O
DtID	struct(long,struct(long,long,*(void)))
*	O
m	*(struct(long,struct(long,long,*(void))))
;	O
ID_LIST	struct(array(char),array(char),array(char),array(char),long)
*	O
Aux	*(struct(array(char),array(char),array(char),array(char),long))
;	O
m	*(struct(long,struct(long,long,*(void))))
=	O
(	O
DtID	struct(long,struct(long,long,*(void)))
*	O
)	O
edma_get_data_ref	(int)->(*(void))
(	O
IdObj	int
)	O
;	O
Aux	*(struct(array(char),array(char),array(char),array(char),long))
=	O
(	O
ID_LIST	struct(array(char),array(char),array(char),array(char),long)
*	O
)	O
(	O
m	*(struct(long,struct(long,long,*(void))))
->	O
List	struct(long,long,*(void))
.	O
dat	*(void)
)	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
cn	*(char)
,	O
Aux	*(struct(array(char),array(char),array(char),array(char),long))
[	O
i	int
]	O
.	O
ClassName	*(char)
)	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
sid	*(char)
,	O
Aux	*(struct(array(char),array(char),array(char),array(char),long))
[	O
i	int
]	O
.	O
StringId	array(char)
)	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
des	*(char)
,	O
Aux	*(struct(array(char),array(char),array(char),array(char),long))
[	O
i	int
]	O
.	O
Description	array(char)
)	O
;	O
return	O
0	int
;	O
}	O
EUint32	long
EDMAPROC	O
IDAddItemZZZ	(int)->(long)
(	O
OBJID	int
IdObj	int
)	O
{	O
DtID	struct(long,struct(long,long,*(void)))
*	O
m	*(struct(long,struct(long,long,*(void))))
;	O
m	*(struct(long,struct(long,long,*(void))))
=	O
(	O
DtID	struct(long,struct(long,long,*(void)))
*	O
)	O
edma_get_data_ref	(int)->(*(void))
(	O
IdObj	int
)	O
;	O
edma_printf_obj	(int,*(char))->(long)
(	O
IdObj	int
,	O
"%s"	*(char)
,	O
"AddItem not implemented"	*(char)
)	O
;	O
return	O
0	int
;	O
}	O
EUint32	long
EDMAPROC	O
IDDeleteItemZZ	(int)->(long)
(	O
OBJID	int
IdObj	int
)	O
{	O
DtID	struct(long,struct(long,long,*(void)))
*	O
m	*(struct(long,struct(long,long,*(void))))
;	O
m	*(struct(long,struct(long,long,*(void))))
=	O
(	O
DtID	struct(long,struct(long,long,*(void)))
*	O
)	O
edma_get_data_ref	(int)->(*(void))
(	O
IdObj	int
)	O
;	O
edma_printf_obj	(int,*(char))->(long)
(	O
IdObj	int
,	O
"%s"	*(char)
,	O
"DeleteItem not implemented"	*(char)
)	O
;	O
return	O
0	int
;	O
}	O
