mode_t	int
nfs_mode_to_hurd_mode	(int,int)->(int)
(	O
int	O
type	int
,	O
int	O
mode	int
)	O
{	O
int	O
hurdmode	int
;	O
switch	O
(	O
type	int
)	O
{	O
case	O
NFDIR	int
:	O
hurdmode	int
=	O
S_IFDIR	O
;	O
break	O
;	O
case	O
NFCHR	int
:	O
hurdmode	int
=	O
S_IFCHR	O
;	O
break	O
;	O
case	O
NFBLK	int
:	O
hurdmode	int
=	O
S_IFBLK	O
;	O
break	O
;	O
case	O
NFREG	int
:	O
hurdmode	int
=	O
S_IFREG	O
;	O
break	O
;	O
case	O
NFLNK	int
:	O
hurdmode	int
=	O
S_IFLNK	O
;	O
break	O
;	O
case	O
NFSOCK	int
:	O
hurdmode	int
=	O
S_IFSOCK	O
;	O
break	O
;	O
default	O
:	O
if	O
(	O
protocol_version	int
==	O
2	int
)	O
switch	O
(	O
type	int
)	O
{	O
case	O
NF2NON	int
:	O
case	O
NF2BAD	O
:	O
default	O
:	O
hurdmode	int
=	O
S_IFREG	O
;	O
break	O
;	O
case	O
NF2FIFO	int
:	O
hurdmode	int
=	O
S_IFIFO	O
;	O
break	O
;	O
}	O
else	O
switch	O
(	O
type	int
)	O
{	O
case	O
NF3FIFO	int
:	O
hurdmode	int
=	O
S_IFIFO	O
;	O
break	O
;	O
default	O
:	O
hurdmode	int
=	O
S_IFREG	O
;	O
break	O
;	O
}	O
break	O
;	O
}	O
hurdmode	int
|=	O
mode	int
&	O
~	O
NFSMODE_FMT	int
;	O
return	O
hurdmode	int
;	O
}	O
int	O
hurd_mode_to_nfs_mode	(int)->(int)
(	O
mode_t	int
mode	int
)	O
{	O
return	O
mode	int
&	O
07777	int
;	O
}	O
int	O
hurd_mode_to_nfs_type	(int)->(int)
(	O
mode_t	int
mode	int
)	O
{	O
switch	O
(	O
mode	int
&	O
S_IFMT	O
)	O
{	O
case	O
S_IFDIR	O
:	O
return	O
NFDIR	int
;	O
case	O
S_IFCHR	O
:	O
default	O
:	O
return	O
NFCHR	int
;	O
case	O
S_IFBLK	O
:	O
return	O
NFBLK	int
;	O
case	O
S_IFREG	O
:	O
return	O
NFREG	int
;	O
case	O
S_IFLNK	O
:	O
return	O
NFLNK	int
;	O
case	O
S_IFSOCK	O
:	O
return	O
NFSOCK	int
;	O
case	O
S_IFIFO	O
:	O
return	O
protocol_version	int
==	O
2	int
?	O
NF2FIFO	int
:	O
NF3FIFO	int
;	O
}	O
}	O
int	O
*	O
xdr_encode_fhandle	(*(int),*(struct(long,array(char))))->(*(int))
(	O
int	O
*	O
p	*(int)
,	O
struct	O
fhandle	struct(long,array(char))
*	O
fhandle	struct(long,array(char))
)	O
{	O
if	O
(	O
protocol_version	int
==	O
2	int
)	O
{	O
memcpy	O
(	O
p	*(int)
,	O
fhandle	struct(long,array(char))
->	O
data	array(char)
,	O
NFS2_FHSIZE	int
)	O
;	O
return	O
p	*(int)
+	O
INTSIZE	O
(	O
NFS2_FHSIZE	int
)	O
;	O
}	O
else	O
return	O
xdr_encode_data	(*(int),*(char),long)->(*(int))
(	O
p	*(int)
,	O
fhandle	struct(long,array(char))
->	O
data	array(char)
,	O
fhandle	struct(long,array(char))
->	O
size	long
)	O
;	O
}	O
int	O
*	O
xdr_encode_data	(*(int),*(char),long)->(*(int))
(	O
int	O
*	O
p	*(int)
,	O
char	O
*	O
data	array(char)
,	O
size_t	long
len	long
)	O
{	O
int	O
nints	int
=	O
INTSIZE	O
(	O
len	long
)	O
;	O
p	*(int)
[	O
nints	int
]	O
=	O
0	int
;	O
*	O
(	O
p	*(int)
++	O
)	O
=	O
htonl	()->(int)
(	O
len	long
)	O
;	O
memcpy	O
(	O
p	*(int)
,	O
data	array(char)
,	O
len	long
)	O
;	O
return	O
p	*(int)
+	O
nints	int
;	O
}	O
int	O
*	O
xdr_encode_64bit	(*(int),long long)->(*(int))
(	O
int	O
*	O
p	*(int)
,	O
long	O
long	O
n	long long
)	O
{	O
*	O
(	O
p	*(int)
++	O
)	O
=	O
htonl	()->(int)
(	O
n	long long
&	O
0xffffffff00000000LL	int
>>	O
32	int
)	O
;	O
*	O
(	O
p	*(int)
++	O
)	O
=	O
htonl	()->(int)
(	O
n	long long
&	O
0xffffffff	int
)	O
;	O
return	O
p	*(int)
;	O
}	O
int	O
*	O
xdr_encode_string	(*(int),*(char))->(*(int))
(	O
int	O
*	O
p	*(int)
,	O
char	O
*	O
string	*(char)
)	O
{	O
return	O
xdr_encode_data	(*(int),*(char),long)->(*(int))
(	O
p	*(int)
,	O
string	*(char)
,	O
strlen	O
(	O
string	*(char)
)	O
)	O
;	O
}	O
int	O
*	O
xdr_encode_sattr_mode	(*(int),int)->(*(int))
(	O
int	O
*	O
p	*(int)
,	O
mode_t	int
mode	int
)	O
{	O
if	O
(	O
protocol_version	int
==	O
2	int
)	O
{	O
*	O
(	O
p	*(int)
++	O
)	O
=	O
htonl	()->(int)
(	O
hurd_mode_to_nfs_mode	(int)->(int)
(	O
mode	int
)	O
)	O
;	O
*	O
(	O
p	*(int)
++	O
)	O
=	O
-	O
1	int
;	O
*	O
(	O
p	*(int)
++	O
)	O
=	O
-	O
1	int
;	O
*	O
(	O
p	*(int)
++	O
)	O
=	O
-	O
1	int
;	O
*	O
(	O
p	*(int)
++	O
)	O
=	O
-	O
1	int
;	O
*	O
(	O
p	*(int)
++	O
)	O
=	O
-	O
1	int
;	O
*	O
(	O
p	*(int)
++	O
)	O
=	O
-	O
1	int
;	O
*	O
(	O
p	*(int)
++	O
)	O
=	O
-	O
1	int
;	O
}	O
else	O
{	O
*	O
(	O
p	*(int)
++	O
)	O
=	O
htonl	()->(int)
(	O
1	int
)	O
;	O
*	O
(	O
p	*(int)
++	O
)	O
=	O
htonl	()->(int)
(	O
hurd_mode_to_nfs_mode	(int)->(int)
(	O
mode	int
)	O
)	O
;	O
*	O
(	O
p	*(int)
++	O
)	O
=	O
0	int
;	O
*	O
(	O
p	*(int)
++	O
)	O
=	O
0	int
;	O
*	O
(	O
p	*(int)
++	O
)	O
=	O
0	int
;	O
*	O
(	O
p	*(int)
++	O
)	O
=	O
DONT_CHANGE	int
;	O
*	O
(	O
p	*(int)
++	O
)	O
=	O
DONT_CHANGE	int
;	O
}	O
return	O
p	*(int)
;	O
}	O
int	O
*	O
xdr_encode_sattr_ids	(*(int),int,int)->(*(int))
(	O
int	O
*	O
p	*(int)
,	O
u_int	int
uid	int
,	O
u_int	int
gid	int
)	O
{	O
if	O
(	O
protocol_version	int
==	O
2	int
)	O
{	O
*	O
(	O
p	*(int)
++	O
)	O
=	O
-	O
1	int
;	O
*	O
(	O
p	*(int)
++	O
)	O
=	O
htonl	()->(int)
(	O
uid	int
)	O
;	O
*	O
(	O
p	*(int)
++	O
)	O
=	O
htonl	()->(int)
(	O
gid	int
)	O
;	O
*	O
(	O
p	*(int)
++	O
)	O
=	O
-	O
1	int
;	O
*	O
(	O
p	*(int)
++	O
)	O
=	O
-	O
1	int
;	O
*	O
(	O
p	*(int)
++	O
)	O
=	O
-	O
1	int
;	O
*	O
(	O
p	*(int)
++	O
)	O
=	O
-	O
1	int
;	O
*	O
(	O
p	*(int)
++	O
)	O
=	O
-	O
1	int
;	O
}	O
else	O
{	O
*	O
(	O
p	*(int)
++	O
)	O
=	O
0	int
;	O
*	O
(	O
p	*(int)
++	O
)	O
=	O
htonl	()->(int)
(	O
1	int
)	O
;	O
*	O
(	O
p	*(int)
++	O
)	O
=	O
htonl	()->(int)
(	O
uid	int
)	O
;	O
*	O
(	O
p	*(int)
++	O
)	O
=	O
htonl	()->(int)
(	O
1	int
)	O
;	O
*	O
(	O
p	*(int)
++	O
)	O
=	O
htonl	()->(int)
(	O
gid	int
)	O
;	O
*	O
(	O
p	*(int)
++	O
)	O
=	O
0	int
;	O
*	O
(	O
p	*(int)
++	O
)	O
=	O
DONT_CHANGE	int
;	O
*	O
(	O
p	*(int)
++	O
)	O
=	O
DONT_CHANGE	int
;	O
}	O
return	O
p	*(int)
;	O
}	O
int	O
*	O
xdr_encode_sattr_size	(*(int),long)->(*(int))
(	O
int	O
*	O
p	*(int)
,	O
off_t	long
size	long
)	O
{	O
if	O
(	O
protocol_version	int
==	O
2	int
)	O
{	O
*	O
(	O
p	*(int)
++	O
)	O
=	O
-	O
1	int
;	O
*	O
(	O
p	*(int)
++	O
)	O
=	O
-	O
1	int
;	O
*	O
(	O
p	*(int)
++	O
)	O
=	O
-	O
1	int
;	O
*	O
(	O
p	*(int)
++	O
)	O
=	O
htonl	()->(int)
(	O
size	long
)	O
;	O
*	O
(	O
p	*(int)
++	O
)	O
=	O
-	O
1	int
;	O
*	O
(	O
p	*(int)
++	O
)	O
=	O
-	O
1	int
;	O
*	O
(	O
p	*(int)
++	O
)	O
=	O
-	O
1	int
;	O
*	O
(	O
p	*(int)
++	O
)	O
=	O
-	O
1	int
;	O
}	O
else	O
{	O
*	O
(	O
p	*(int)
++	O
)	O
=	O
0	int
;	O
*	O
(	O
p	*(int)
++	O
)	O
=	O
0	int
;	O
*	O
(	O
p	*(int)
++	O
)	O
=	O
0	int
;	O
*	O
(	O
p	*(int)
++	O
)	O
=	O
htonl	()->(int)
(	O
1	int
)	O
;	O
p	*(int)
=	O
xdr_encode_64bit	(*(int),long long)->(*(int))
(	O
p	*(int)
,	O
size	long
)	O
;	O
*	O
(	O
p	*(int)
++	O
)	O
=	O
DONT_CHANGE	int
;	O
*	O
(	O
p	*(int)
++	O
)	O
=	O
DONT_CHANGE	int
;	O
}	O
return	O
p	*(int)
;	O
}	O
int	O
*	O
xdr_encode_sattr_times	(*(int),*(struct(long,long)),*(struct(long,long)))->(*(int))
(	O
int	O
*	O
p	*(int)
,	O
struct	O
timespec	struct(long,long)
*	O
atime	*(struct(long,long))
,	O
struct	O
timespec	struct(long,long)
*	O
mtime	*(struct(long,long))
)	O
{	O
if	O
(	O
protocol_version	int
==	O
2	int
)	O
{	O
*	O
(	O
p	*(int)
++	O
)	O
=	O
-	O
1	int
;	O
*	O
(	O
p	*(int)
++	O
)	O
=	O
-	O
1	int
;	O
*	O
(	O
p	*(int)
++	O
)	O
=	O
-	O
1	int
;	O
*	O
(	O
p	*(int)
++	O
)	O
=	O
-	O
1	int
;	O
*	O
(	O
p	*(int)
++	O
)	O
=	O
htonl	()->(int)
(	O
atime	*(struct(long,long))
->	O
tv_sec	long
)	O
;	O
*	O
(	O
p	*(int)
++	O
)	O
=	O
htonl	()->(int)
(	O
atime	*(struct(long,long))
->	O
tv_nsec	long
/	O
1000	int
)	O
;	O
*	O
(	O
p	*(int)
++	O
)	O
=	O
htonl	()->(int)
(	O
mtime	*(struct(long,long))
->	O
tv_sec	long
)	O
;	O
*	O
(	O
p	*(int)
++	O
)	O
=	O
htonl	()->(int)
(	O
mtime	*(struct(long,long))
->	O
tv_nsec	long
/	O
1000	int
)	O
;	O
}	O
else	O
{	O
*	O
(	O
p	*(int)
++	O
)	O
=	O
0	int
;	O
*	O
(	O
p	*(int)
++	O
)	O
=	O
0	int
;	O
*	O
(	O
p	*(int)
++	O
)	O
=	O
0	int
;	O
*	O
(	O
p	*(int)
++	O
)	O
=	O
0	int
;	O
*	O
(	O
p	*(int)
++	O
)	O
=	O
htonl	()->(int)
(	O
SET_TO_CLIENT_TIME	int
)	O
;	O
*	O
(	O
p	*(int)
++	O
)	O
=	O
htonl	()->(int)
(	O
atime	*(struct(long,long))
->	O
tv_sec	long
)	O
;	O
*	O
(	O
p	*(int)
++	O
)	O
=	O
htonl	()->(int)
(	O
atime	*(struct(long,long))
->	O
tv_nsec	long
)	O
;	O
*	O
(	O
p	*(int)
++	O
)	O
=	O
htonl	()->(int)
(	O
SET_TO_CLIENT_TIME	int
)	O
;	O
*	O
(	O
p	*(int)
++	O
)	O
=	O
htonl	()->(int)
(	O
mtime	*(struct(long,long))
->	O
tv_sec	long
)	O
;	O
*	O
(	O
p	*(int)
++	O
)	O
=	O
htonl	()->(int)
(	O
mtime	*(struct(long,long))
->	O
tv_nsec	long
)	O
;	O
}	O
return	O
p	*(int)
;	O
}	O
int	O
*	O
xdr_encode_create_state	(*(int),int,int)->(*(int))
(	O
int	O
*	O
p	*(int)
,	O
mode_t	int
mode	int
,	O
uid_t	int
owner	int
)	O
{	O
if	O
(	O
protocol_version	int
==	O
2	int
)	O
{	O
*	O
(	O
p	*(int)
++	O
)	O
=	O
htonl	()->(int)
(	O
hurd_mode_to_nfs_mode	(int)->(int)
(	O
mode	int
)	O
)	O
;	O
*	O
(	O
p	*(int)
++	O
)	O
=	O
htonl	()->(int)
(	O
owner	int
)	O
;	O
*	O
(	O
p	*(int)
++	O
)	O
=	O
-	O
1	int
;	O
*	O
(	O
p	*(int)
++	O
)	O
=	O
0	int
;	O
*	O
(	O
p	*(int)
++	O
)	O
=	O
-	O
1	int
;	O
*	O
(	O
p	*(int)
++	O
)	O
=	O
-	O
1	int
;	O
*	O
(	O
p	*(int)
++	O
)	O
=	O
-	O
1	int
;	O
*	O
(	O
p	*(int)
++	O
)	O
=	O
-	O
1	int
;	O
}	O
else	O
{	O
*	O
(	O
p	*(int)
++	O
)	O
=	O
htonl	()->(int)
(	O
1	int
)	O
;	O
*	O
(	O
p	*(int)
++	O
)	O
=	O
htonl	()->(int)
(	O
hurd_mode_to_nfs_mode	(int)->(int)
(	O
mode	int
)	O
)	O
;	O
*	O
(	O
p	*(int)
++	O
)	O
=	O
htonl	()->(int)
(	O
1	int
)	O
;	O
*	O
(	O
p	*(int)
++	O
)	O
=	O
htonl	()->(int)
(	O
owner	int
)	O
;	O
*	O
(	O
p	*(int)
++	O
)	O
=	O
0	int
;	O
*	O
(	O
p	*(int)
++	O
)	O
=	O
htonl	()->(int)
(	O
1	int
)	O
;	O
p	*(int)
=	O
xdr_encode_64bit	(*(int),long long)->(*(int))
(	O
p	*(int)
,	O
0	int
)	O
;	O
*	O
(	O
p	*(int)
++	O
)	O
=	O
htonl	()->(int)
(	O
SET_TO_SERVER_TIME	int
)	O
;	O
*	O
(	O
p	*(int)
++	O
)	O
=	O
htonl	()->(int)
(	O
SET_TO_SERVER_TIME	int
)	O
;	O
}	O
return	O
p	*(int)
;	O
}	O
int	O
*	O
xdr_encode_sattr_stat	(*(int),*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))))->(*(int))
(	O
int	O
*	O
p	*(int)
,	O
struct	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
*	O
st	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
)	O
{	O
if	O
(	O
protocol_version	int
==	O
2	int
)	O
{	O
*	O
(	O
p	*(int)
++	O
)	O
=	O
htonl	()->(int)
(	O
hurd_mode_to_nfs_mode	(int)->(int)
(	O
st	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
->	O
st_mode	int
)	O
)	O
;	O
*	O
(	O
p	*(int)
++	O
)	O
=	O
htonl	()->(int)
(	O
st	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
->	O
st_uid	int
)	O
;	O
*	O
(	O
p	*(int)
++	O
)	O
=	O
htonl	()->(int)
(	O
st	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
->	O
st_gid	int
)	O
;	O
*	O
(	O
p	*(int)
++	O
)	O
=	O
htonl	()->(int)
(	O
st	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
->	O
st_size	long
)	O
;	O
*	O
(	O
p	*(int)
++	O
)	O
=	O
htonl	()->(int)
(	O
st	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
->	O
st_atim	struct(long,long)
.	O
tv_sec	long
)	O
;	O
*	O
(	O
p	*(int)
++	O
)	O
=	O
htonl	()->(int)
(	O
st	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
->	O
st_atim	struct(long,long)
.	O
tv_nsec	long
/	O
1000	int
)	O
;	O
*	O
(	O
p	*(int)
++	O
)	O
=	O
htonl	()->(int)
(	O
st	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
->	O
st_mtim	struct(long,long)
.	O
tv_sec	long
)	O
;	O
*	O
(	O
p	*(int)
++	O
)	O
=	O
htonl	()->(int)
(	O
st	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
->	O
st_mtim	struct(long,long)
.	O
tv_nsec	long
/	O
1000	int
)	O
;	O
}	O
else	O
{	O
*	O
(	O
p	*(int)
++	O
)	O
=	O
htonl	()->(int)
(	O
1	int
)	O
;	O
*	O
(	O
p	*(int)
++	O
)	O
=	O
htonl	()->(int)
(	O
hurd_mode_to_nfs_mode	(int)->(int)
(	O
st	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
->	O
st_mode	int
)	O
)	O
;	O
*	O
(	O
p	*(int)
++	O
)	O
=	O
htonl	()->(int)
(	O
1	int
)	O
;	O
*	O
(	O
p	*(int)
++	O
)	O
=	O
htonl	()->(int)
(	O
st	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
->	O
st_uid	int
)	O
;	O
*	O
(	O
p	*(int)
++	O
)	O
=	O
htonl	()->(int)
(	O
1	int
)	O
;	O
*	O
(	O
p	*(int)
++	O
)	O
=	O
htonl	()->(int)
(	O
st	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
->	O
st_gid	int
)	O
;	O
*	O
(	O
p	*(int)
++	O
)	O
=	O
htonl	()->(int)
(	O
1	int
)	O
;	O
p	*(int)
=	O
xdr_encode_64bit	(*(int),long long)->(*(int))
(	O
p	*(int)
,	O
st	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
->	O
st_size	long
)	O
;	O
*	O
(	O
p	*(int)
++	O
)	O
=	O
htonl	()->(int)
(	O
SET_TO_CLIENT_TIME	int
)	O
;	O
*	O
(	O
p	*(int)
++	O
)	O
=	O
htonl	()->(int)
(	O
st	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
->	O
st_atim	struct(long,long)
.	O
tv_sec	long
)	O
;	O
*	O
(	O
p	*(int)
++	O
)	O
=	O
htonl	()->(int)
(	O
st	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
->	O
st_atim	struct(long,long)
.	O
tv_nsec	long
)	O
;	O
*	O
(	O
p	*(int)
++	O
)	O
=	O
htonl	()->(int)
(	O
SET_TO_CLIENT_TIME	int
)	O
;	O
*	O
(	O
p	*(int)
++	O
)	O
=	O
htonl	()->(int)
(	O
st	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
->	O
st_mtim	struct(long,long)
.	O
tv_sec	long
)	O
;	O
*	O
(	O
p	*(int)
++	O
)	O
=	O
htonl	()->(int)
(	O
st	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
->	O
st_mtim	struct(long,long)
.	O
tv_nsec	long
)	O
;	O
}	O
return	O
p	*(int)
;	O
}	O
int	O
*	O
xdr_decode_64bit	(*(int),*(long long))->(*(int))
(	O
int	O
*	O
p	*(int)
,	O
long	O
long	O
*	O
n	long long
)	O
{	O
long	O
long	O
high	long long
,	O
low	long long
;	O
high	long long
=	O
ntohl	()->(int)
(	O
*	O
p	*(int)
)	O
;	O
p	*(int)
++	O
;	O
low	long long
=	O
ntohl	()->(int)
(	O
*	O
p	*(int)
)	O
;	O
p	*(int)
++	O
;	O
*	O
n	long long
=	O
(	O
(	O
high	long long
&	O
0xffffffff	int
)	O
<<	O
32	int
)	O
|	O
(	O
low	long long
&	O
0xffffffff	int
)	O
;	O
return	O
p	*(int)
;	O
}	O
int	O
*	O
xdr_decode_fhandle	(*(int),*(*(struct)))->(*(int))
(	O
int	O
*	O
p	*(int)
,	O
struct	O
node	O
*	O
*	O
npp	*(*(struct))
)	O
{	O
struct	O
fhandle	struct(long,array(char))
handle	struct(long,array(char))
;	O
if	O
(	O
protocol_version	int
==	O
2	int
)	O
handle	struct(long,array(char))
.	O
size	long
=	O
NFS2_FHSIZE	int
;	O
else	O
{	O
handle	struct(long,array(char))
.	O
size	long
=	O
ntohl	()->(int)
(	O
*	O
p	*(int)
)	O
;	O
p	*(int)
++	O
;	O
}	O
memcpy	O
(	O
&	O
handle	struct(long,array(char))
.	O
data	array(char)
,	O
p	*(int)
,	O
handle	struct(long,array(char))
.	O
size	long
)	O
;	O
lookup_fhandle	(*(struct(long,array(char))),*(*(struct)))->(void)
(	O
&	O
handle	struct(long,array(char))
,	O
npp	*(*(struct))
)	O
;	O
return	O
p	*(int)
+	O
handle	struct(long,array(char))
.	O
size	long
/	O
sizeof	O
(	O
int	O
)	O
;	O
}	O
int	O
*	O
xdr_decode_fattr	(*(int),*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))))->(*(int))
(	O
int	O
*	O
p	*(int)
,	O
struct	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
*	O
st	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
)	O
{	O
int	O
type	int
,	O
mode	int
;	O
type	int
=	O
ntohl	()->(int)
(	O
*	O
p	*(int)
)	O
;	O
p	*(int)
++	O
;	O
mode	int
=	O
ntohl	()->(int)
(	O
*	O
p	*(int)
)	O
;	O
p	*(int)
++	O
;	O
st	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
->	O
st_mode	int
=	O
nfs_mode_to_hurd_mode	(int,int)->(int)
(	O
type	int
,	O
mode	int
)	O
;	O
st	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
->	O
st_nlink	long
=	O
ntohl	()->(int)
(	O
*	O
p	*(int)
)	O
;	O
p	*(int)
++	O
;	O
st	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
->	O
st_uid	int
=	O
ntohl	()->(int)
(	O
*	O
p	*(int)
)	O
;	O
p	*(int)
++	O
;	O
st	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
->	O
st_gid	int
=	O
ntohl	()->(int)
(	O
*	O
p	*(int)
)	O
;	O
p	*(int)
++	O
;	O
if	O
(	O
protocol_version	int
==	O
2	int
)	O
{	O
st	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
->	O
st_size	long
=	O
ntohl	()->(int)
(	O
*	O
p	*(int)
)	O
;	O
p	*(int)
++	O
;	O
st	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
->	O
st_blksize	long
=	O
ntohl	()->(int)
(	O
*	O
p	*(int)
)	O
;	O
p	*(int)
++	O
;	O
st	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
->	O
st_rdev	long
=	O
ntohl	()->(int)
(	O
*	O
p	*(int)
)	O
;	O
p	*(int)
++	O
;	O
st	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
->	O
st_blocks	long
=	O
ntohl	()->(int)
(	O
*	O
p	*(int)
)	O
;	O
p	*(int)
++	O
;	O
}	O
else	O
{	O
long	O
long	O
size	long
;	O
int	O
major	int
,	O
minor	int
;	O
p	*(int)
=	O
xdr_decode_64bit	(*(int),*(long long))->(*(int))
(	O
p	*(int)
,	O
&	O
size	long
)	O
;	O
st	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
->	O
st_size	long
=	O
size	long
;	O
p	*(int)
=	O
xdr_decode_64bit	(*(int),*(long long))->(*(int))
(	O
p	*(int)
,	O
&	O
size	long
)	O
;	O
st	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
->	O
st_blocks	long
=	O
size	long
/	O
512	int
;	O
st	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
->	O
st_blksize	long
=	O
read_size	int
<	O
write_size	int
?	O
read_size	int
:	O
write_size	int
;	O
major	int
=	O
ntohl	()->(int)
(	O
*	O
p	*(int)
)	O
;	O
p	*(int)
++	O
;	O
minor	int
=	O
ntohl	()->(int)
(	O
*	O
p	*(int)
)	O
;	O
p	*(int)
++	O
;	O
st	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
->	O
st_rdev	long
=	O
makedev	()->(int)
(	O
major	int
,	O
minor	int
)	O
;	O
}	O
st	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
->	O
st_fsid	O
=	O
ntohl	()->(int)
(	O
*	O
p	*(int)
)	O
;	O
p	*(int)
++	O
;	O
st	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
->	O
st_ino	long
=	O
ntohl	()->(int)
(	O
*	O
p	*(int)
)	O
;	O
p	*(int)
++	O
;	O
st	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
->	O
st_atim	struct(long,long)
.	O
tv_sec	long
=	O
ntohl	()->(int)
(	O
*	O
p	*(int)
)	O
;	O
p	*(int)
++	O
;	O
st	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
->	O
st_atim	struct(long,long)
.	O
tv_nsec	long
=	O
ntohl	()->(int)
(	O
*	O
p	*(int)
)	O
;	O
p	*(int)
++	O
;	O
st	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
->	O
st_mtim	struct(long,long)
.	O
tv_sec	long
=	O
ntohl	()->(int)
(	O
*	O
p	*(int)
)	O
;	O
p	*(int)
++	O
;	O
st	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
->	O
st_mtim	struct(long,long)
.	O
tv_nsec	long
=	O
ntohl	()->(int)
(	O
*	O
p	*(int)
)	O
;	O
p	*(int)
++	O
;	O
st	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
->	O
st_ctim	struct(long,long)
.	O
tv_sec	long
=	O
ntohl	()->(int)
(	O
*	O
p	*(int)
)	O
;	O
p	*(int)
++	O
;	O
st	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
->	O
st_ctim	struct(long,long)
.	O
tv_nsec	long
=	O
ntohl	()->(int)
(	O
*	O
p	*(int)
)	O
;	O
p	*(int)
++	O
;	O
if	O
(	O
protocol_version	int
<	O
3	int
)	O
{	O
st	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
->	O
st_atim	struct(long,long)
.	O
tv_nsec	long
*=	O
1000	int
;	O
st	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
->	O
st_mtim	struct(long,long)
.	O
tv_nsec	long
*=	O
1000	int
;	O
st	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
->	O
st_ctim	struct(long,long)
.	O
tv_nsec	long
*=	O
1000	int
;	O
}	O
return	O
p	*(int)
;	O
}	O
int	O
*	O
xdr_decode_string	(*(int),*(char))->(*(int))
(	O
int	O
*	O
p	*(int)
,	O
char	O
*	O
buf	*(void)
)	O
{	O
int	O
len	long
;	O
len	long
=	O
ntohl	()->(int)
(	O
*	O
p	*(int)
)	O
;	O
p	*(int)
++	O
;	O
memcpy	O
(	O
buf	*(void)
,	O
p	*(int)
,	O
len	long
)	O
;	O
buf	*(void)
[	O
len	long
]	O
=	O
'\0'	O
;	O
return	O
p	*(int)
+	O
INTSIZE	O
(	O
len	long
)	O
;	O
}	O
int	O
*	O
nfs_initialize_rpc	(int,*(struct),long,*(*(void)),*(struct),int)->(*(int))
(	O
int	O
rpc_proc	int
,	O
struct	O
iouser	O
*	O
cred	*(struct)
,	O
size_t	long
len	long
,	O
void	O
*	O
*	O
bufp	*(*(void))
,	O
struct	O
node	O
*	O
np	*(struct)
,	O
uid_t	int
second_gid	int
)	O
{	O
uid_t	int
uid	int
;	O
uid_t	int
gid	int
;	O
error_t	int
err	int
;	O
if	O
(	O
cred	*(struct)
==	O
(	O
struct	O
iouser	O
*	O
)	O
-	O
1	int
)	O
{	O
uid	int
=	O
gid	int
=	O
0	int
;	O
second_gid	int
=	O
-	O
1	int
;	O
}	O
else	O
if	O
(	O
cred	*(struct)
&&	O
(	O
cred	*(struct)
->	O
uids	O
->	O
num	O
||	O
cred	*(struct)
->	O
gids	O
->	O
num	O
)	O
)	O
{	O
if	O
(	O
idvec_contains	()->(int)
(	O
cred	*(struct)
->	O
uids	O
,	O
0	int
)	O
)	O
{	O
err	int
=	O
netfs_validate_stat	()->(int)
(	O
np	*(struct)
,	O
0	int
)	O
;	O
uid	int
=	O
0	int
;	O
gid	int
=	O
err	int
?	O
-	O
2	int
:	O
0	int
;	O
if	O
(	O
err	int
)	O
printf	O
(	O
"NFS warning, internal stat failure\n"	*(char)
)	O
;	O
}	O
else	O
{	O
if	O
(	O
cred	*(struct)
->	O
uids	O
->	O
num	O
==	O
0	int
)	O
uid	int
=	O
-	O
2	int
;	O
else	O
if	O
(	O
cred	*(struct)
->	O
uids	O
->	O
num	O
==	O
1	int
)	O
uid	int
=	O
cred	*(struct)
->	O
uids	O
->	O
ids	O
[	O
0	int
]	O
;	O
else	O
{	O
err	int
=	O
netfs_validate_stat	()->(int)
(	O
np	*(struct)
,	O
0	int
)	O
;	O
if	O
(	O
err	int
)	O
{	O
uid	int
=	O
cred	*(struct)
->	O
uids	O
->	O
ids	O
[	O
0	int
]	O
;	O
printf	O
(	O
"NFS warning, internal stat failure\n"	*(char)
)	O
;	O
}	O
else	O
{	O
if	O
(	O
idvec_contains	()->(int)
(	O
cred	*(struct)
->	O
uids	O
,	O
np	*(struct)
->	O
nn_stat	O
.	O
st_uid	int
)	O
)	O
uid	int
=	O
np	*(struct)
->	O
nn_stat	O
.	O
st_uid	int
;	O
else	O
uid	int
=	O
cred	*(struct)
->	O
uids	O
->	O
ids	O
[	O
0	int
]	O
;	O
}	O
}	O
if	O
(	O
cred	*(struct)
->	O
gids	O
->	O
num	O
==	O
0	int
)	O
{	O
gid	int
=	O
-	O
2	int
;	O
second_gid	int
=	O
-	O
1	int
;	O
}	O
else	O
if	O
(	O
cred	*(struct)
->	O
gids	O
->	O
num	O
==	O
1	int
)	O
{	O
gid	int
=	O
cred	*(struct)
->	O
gids	O
->	O
ids	O
[	O
0	int
]	O
;	O
second_gid	int
=	O
-	O
1	int
;	O
}	O
else	O
{	O
err	int
=	O
netfs_validate_stat	()->(int)
(	O
np	*(struct)
,	O
0	int
)	O
;	O
if	O
(	O
err	int
)	O
{	O
gid	int
=	O
cred	*(struct)
->	O
gids	O
->	O
ids	O
[	O
0	int
]	O
;	O
printf	O
(	O
"NFS warning, internal stat failure\n"	*(char)
)	O
;	O
}	O
else	O
{	O
if	O
(	O
idvec_contains	()->(int)
(	O
cred	*(struct)
->	O
gids	O
,	O
np	*(struct)
->	O
nn_stat	O
.	O
st_gid	int
)	O
)	O
gid	int
=	O
np	*(struct)
->	O
nn_stat	O
.	O
st_gid	int
;	O
else	O
gid	int
=	O
cred	*(struct)
->	O
gids	O
->	O
ids	O
[	O
0	int
]	O
;	O
}	O
if	O
(	O
second_gid	int
!=	O
-	O
1	int
&&	O
!	O
idvec_contains	()->(int)
(	O
cred	*(struct)
->	O
gids	O
,	O
second_gid	int
)	O
)	O
second_gid	int
=	O
-	O
1	int
;	O
}	O
}	O
}	O
else	O
uid	int
=	O
gid	int
=	O
second_gid	int
=	O
-	O
1	int
;	O
return	O
initialize_rpc	(int,int,int,long,*(*(void)),int,int,int)->(*(int))
(	O
NFS_PROGRAM	O
,	O
NFS_VERSION	O
,	O
rpc_proc	int
,	O
len	long
,	O
bufp	*(*(void))
,	O
uid	int
,	O
gid	int
,	O
second_gid	int
)	O
;	O
}	O
error_t	int
nfs_error_trans	(int)->(int)
(	O
int	O
error	int
)	O
{	O
switch	O
(	O
error	int
)	O
{	O
case	O
NFS_OK	int
:	O
return	O
0	int
;	O
case	O
NFSERR_PERM	int
:	O
return	O
EPERM	int
;	O
case	O
NFSERR_NOENT	int
:	O
return	O
ENOENT	int
;	O
case	O
NFSERR_IO	int
:	O
return	O
EIO	int
;	O
case	O
NFSERR_NXIO	int
:	O
return	O
ENXIO	int
;	O
case	O
NFSERR_ACCES	int
:	O
return	O
EACCES	int
;	O
case	O
NFSERR_EXIST	int
:	O
return	O
EEXIST	int
;	O
case	O
NFSERR_NODEV	int
:	O
return	O
ENODEV	int
;	O
case	O
NFSERR_NOTDIR	int
:	O
return	O
ENOTDIR	int
;	O
case	O
NFSERR_ISDIR	int
:	O
return	O
EISDIR	int
;	O
case	O
NFSERR_FBIG	int
:	O
return	O
E2BIG	int
;	O
case	O
NFSERR_NOSPC	int
:	O
return	O
ENOSPC	int
;	O
case	O
NFSERR_ROFS	int
:	O
return	O
EROFS	int
;	O
case	O
NFSERR_NAMETOOLONG	int
:	O
return	O
ENAMETOOLONG	int
;	O
case	O
NFSERR_NOTEMPTY	int
:	O
return	O
ENOTEMPTY	int
;	O
case	O
NFSERR_DQUOT	int
:	O
return	O
EDQUOT	int
;	O
case	O
NFSERR_STALE	int
:	O
return	O
ESTALE	int
;	O
case	O
NFSERR_WFLUSH	int
:	O
return	O
EINVAL	int
;	O
default	O
:	O
if	O
(	O
protocol_version	int
==	O
2	int
)	O
return	O
EINVAL	int
;	O
else	O
switch	O
(	O
error	int
)	O
{	O
case	O
NFSERR_XDEV	int
:	O
return	O
EXDEV	int
;	O
case	O
NFSERR_INVAL	int
:	O
case	O
NFSERR_REMOTE	int
:	O
default	O
:	O
return	O
EINVAL	int
;	O
case	O
NFSERR_MLINK	int
:	O
return	O
EMLINK	int
;	O
case	O
NFSERR_NOTSUPP	int
:	O
case	O
NFSERR_BADTYPE	int
:	O
return	O
EOPNOTSUPP	int
;	O
case	O
NFSERR_SERVERFAULT	int
:	O
return	O
EIO	int
;	O
case	O
NFSERR_BADHANDLE	int
:	O
case	O
NFSERR_NOT_SYNC	int
:	O
case	O
NFSERR_BAD_COOKIE	int
:	O
case	O
NFSERR_TOOSMALL	int
:	O
case	O
NFSERR_JUKEBOX	int
:	O
return	O
EGRATUITOUS	O
;	O
}	O
}	O
}	O
