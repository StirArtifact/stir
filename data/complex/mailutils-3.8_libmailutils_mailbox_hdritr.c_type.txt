struct	O
header_iterator	struct(*(struct(*(char),long,long,*(struct(*(struct`),*(struct`),long,long,long,long,long)),*(struct(*(struct`),*(struct`),long,long,long,long,long)),int,long,long,long,*(struct),*(struct),*(struct),*((*(void),*(*`),*(long))->(int)),*(void))),long,int)
{	O
mu_header_t	*(struct)
header	*(struct)
;	O
size_t	long
index	(*(char),int)->(*(char))
;	O
int	O
backwards	int
;	O
}	O
;	O
static	O
int	O
hdr_first	(*(void))->(int)
(	O
void	O
*	O
owner	*(void)
)	O
{	O
struct	O
header_iterator	struct(*(struct(*(char),long,long,*(struct(*(struct`),*(struct`),long,long,long,long,long)),*(struct(*(struct`),*(struct`),long,long,long,long,long)),int,long,long,long,*(struct),*(struct),*(struct),*((*(void),*(*`),*(long))->(int)),*(void))),long,int)
*	O
itr	*(struct)
=	O
owner	*(void)
;	O
if	O
(	O
itr	*(struct)
->	O
backwards	int
)	O
{	O
if	O
(	O
mu_header_get_field_count	(*(struct),*(long))->(int)
(	O
itr	*(struct)
->	O
header	*(struct)
,	O
&	O
itr	*(struct)
->	O
index	(*(char),int)->(*(char))
)	O
)	O
return	O
1	int
;	O
}	O
else	O
itr	*(struct)
->	O
index	(*(char),int)->(*(char))
=	O
1	int
;	O
return	O
0	int
;	O
}	O
static	O
int	O
hdr_next	(*(void))->(int)
(	O
void	O
*	O
owner	*(void)
)	O
{	O
struct	O
header_iterator	struct(*(struct(*(char),long,long,*(struct(*(struct`),*(struct`),long,long,long,long,long)),*(struct(*(struct`),*(struct`),long,long,long,long,long)),int,long,long,long,*(struct),*(struct),*(struct),*((*(void),*(*`),*(long))->(int)),*(void))),long,int)
*	O
itr	*(struct)
=	O
owner	*(void)
;	O
if	O
(	O
itr	*(struct)
->	O
backwards	int
)	O
{	O
if	O
(	O
itr	*(struct)
->	O
index	(*(char),int)->(*(char))
!=	O
0	int
)	O
itr	*(struct)
->	O
index	(*(char),int)->(*(char))
--	O
;	O
}	O
else	O
itr	*(struct)
->	O
index	(*(char),int)->(*(char))
++	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
hdr_getitem	(*(void),*(*(void)),*(*(void)))->(int)
(	O
void	O
*	O
owner	*(void)
,	O
void	O
*	O
*	O
pret	*(*(void))
,	O
const	O
void	O
*	O
*	O
pkey	*(*(void))
)	O
{	O
struct	O
header_iterator	struct(*(struct(*(char),long,long,*(struct(*(struct`),*(struct`),long,long,long,long,long)),*(struct(*(struct`),*(struct`),long,long,long,long,long)),int,long,long,long,*(struct),*(struct),*(struct),*((*(void),*(*`),*(long))->(int)),*(void))),long,int)
*	O
itr	*(struct)
=	O
owner	*(void)
;	O
int	O
rc	int
;	O
size_t	long
count	*(long)
;	O
rc	int
=	O
mu_header_get_field_count	(*(struct),*(long))->(int)
(	O
itr	*(struct)
->	O
header	*(struct)
,	O
&	O
count	*(long)
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
if	O
(	O
itr	*(struct)
->	O
index	(*(char),int)->(*(char))
<	O
1	int
||	O
itr	*(struct)
->	O
index	(*(char),int)->(*(char))
>	O
count	*(long)
)	O
return	O
MU_ERR_NOENT	O
;	O
rc	int
=	O
mu_header_sget_field_value	(*(struct),long,*(*(char)))->(int)
(	O
itr	*(struct)
->	O
header	*(struct)
,	O
itr	*(struct)
->	O
index	(*(char),int)->(*(char))
,	O
(	O
const	O
char	O
*	O
*	O
)	O
pret	*(*(void))
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
if	O
(	O
pkey	*(*(void))
)	O
rc	int
=	O
mu_header_sget_field_name	(*(struct),long,*(*(char)))->(int)
(	O
itr	*(struct)
->	O
header	*(struct)
,	O
itr	*(struct)
->	O
index	(*(char),int)->(*(char))
,	O
(	O
const	O
char	O
*	O
*	O
)	O
pkey	*(*(void))
)	O
;	O
}	O
return	O
rc	int
;	O
}	O
static	O
int	O
hdr_finished_p	(*(void))->(int)
(	O
void	O
*	O
owner	*(void)
)	O
{	O
struct	O
header_iterator	struct(*(struct(*(char),long,long,*(struct(*(struct`),*(struct`),long,long,long,long,long)),*(struct(*(struct`),*(struct`),long,long,long,long,long)),int,long,long,long,*(struct),*(struct),*(struct),*((*(void),*(*`),*(long))->(int)),*(void))),long,int)
*	O
itr	*(struct)
=	O
owner	*(void)
;	O
size_t	long
count	*(long)
;	O
if	O
(	O
itr	*(struct)
->	O
backwards	int
)	O
return	O
itr	*(struct)
->	O
index	(*(char),int)->(*(char))
<	O
1	int
;	O
if	O
(	O
mu_header_get_field_count	(*(struct),*(long))->(int)
(	O
itr	*(struct)
->	O
header	*(struct)
,	O
&	O
count	*(long)
)	O
)	O
return	O
1	int
;	O
return	O
itr	*(struct)
->	O
index	(*(char),int)->(*(char))
>	O
count	*(long)
;	O
}	O
static	O
int	O
hdr_destroy	(*(struct),*(void))->(int)
(	O
mu_iterator_t	*(struct)
iterator	*(struct)
,	O
void	O
*	O
data	*(void)
)	O
{	O
struct	O
header_iterator	struct(*(struct(*(char),long,long,*(struct(*(struct`),*(struct`),long,long,long,long,long)),*(struct(*(struct`),*(struct`),long,long,long,long,long)),int,long,long,long,*(struct),*(struct),*(struct),*((*(void),*(*`),*(long))->(int)),*(void))),long,int)
*	O
itr	*(struct)
=	O
data	*(void)
;	O
mu_iterator_detach	(*(*(struct)),*(struct))->(int)
(	O
&	O
itr	*(struct)
->	O
header	*(struct)
->	O
itr	*(struct)
,	O
iterator	*(struct)
)	O
;	O
free	(*(void))->(void)
(	O
data	*(void)
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
hdr_delitem	(*(void),*(void))->(int)
(	O
void	O
*	O
owner	*(void)
,	O
void	O
*	O
item	*(void)
)	O
{	O
struct	O
header_iterator	struct(*(struct(*(char),long,long,*(struct(*(struct`),*(struct`),long,long,long,long,long)),*(struct(*(struct`),*(struct`),long,long,long,long,long)),int,long,long,long,*(struct),*(struct),*(struct),*((*(void),*(*`),*(long))->(int)),*(void))),long,int)
*	O
itr	*(struct)
=	O
owner	*(void)
;	O
const	O
void	O
*	O
ptr	*(*(void))
;	O
if	O
(	O
mu_header_get_itemptr	(*(struct),long,*(*(void)))->(int)
(	O
itr	*(struct)
->	O
header	*(struct)
,	O
itr	*(struct)
->	O
index	(*(char),int)->(*(char))
,	O
&	O
ptr	*(*(void))
)	O
)	O
return	O
MU_ITR_DELITEM_NOTHING	int
;	O
if	O
(	O
ptr	*(*(void))
==	O
item	*(void)
&&	O
!	O
itr	*(struct)
->	O
backwards	int
)	O
return	O
MU_ITR_DELITEM_ADVANCE	int
;	O
return	O
MU_ITR_DELITEM_NOTHING	int
;	O
}	O
static	O
int	O
hdr_data_dup	(*(*(void)),*(void))->(int)
(	O
void	O
*	O
*	O
ptr	*(*(void))
,	O
void	O
*	O
owner	*(void)
)	O
{	O
struct	O
header_iterator	struct(*(struct(*(char),long,long,*(struct(*(struct`),*(struct`),long,long,long,long,long)),*(struct(*(struct`),*(struct`),long,long,long,long,long)),int,long,long,long,*(struct),*(struct),*(struct),*((*(void),*(*`),*(long))->(int)),*(void))),long,int)
*	O
itr	*(struct)
=	O
owner	*(void)
;	O
*	O
ptr	*(*(void))
=	O
malloc	(long)->(*(void))
(	O
sizeof	O
(	O
struct	O
header_iterator	struct(*(struct(*(char),long,long,*(struct(*(struct`),*(struct`),long,long,long,long,long)),*(struct(*(struct`),*(struct`),long,long,long,long,long)),int,long,long,long,*(struct),*(struct),*(struct),*((*(void),*(*`),*(long))->(int)),*(void))),long,int)
)	O
)	O
;	O
if	O
(	O
*	O
ptr	*(*(void))
==	O
NULL	O
)	O
return	O
ENOMEM	int
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
*	O
ptr	*(*(void))
,	O
owner	*(void)
,	O
sizeof	O
(	O
struct	O
header_iterator	struct(*(struct(*(char),long,long,*(struct(*(struct`),*(struct`),long,long,long,long,long)),*(struct(*(struct`),*(struct`),long,long,long,long,long)),int,long,long,long,*(struct),*(struct),*(struct),*((*(void),*(*`),*(long))->(int)),*(void))),long,int)
)	O
)	O
;	O
mu_iterator_attach	(*(*(struct)),*(struct))->(int)
(	O
&	O
itr	*(struct)
->	O
header	*(struct)
->	O
itr	*(struct)
,	O
*	O
ptr	*(*(void))
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
hdr_itrctl	(*(void),enum(int,int,int,int,int,int,int,int,int,int),*(void))->(int)
(	O
void	O
*	O
owner	*(void)
,	O
enum	O
mu_itrctl_req	enum(int,int,int,int,int,int,int,int,int,int)
req	enum(int,int,int,int,int,int,int,int,int,int)
,	O
void	O
*	O
arg	*(void)
)	O
{	O
struct	O
header_iterator	struct(*(struct(*(char),long,long,*(struct(*(struct`),*(struct`),long,long,long,long,long)),*(struct(*(struct`),*(struct`),long,long,long,long,long)),int,long,long,long,*(struct),*(struct),*(struct),*((*(void),*(*`),*(long))->(int)),*(void))),long,int)
*	O
itr	*(struct)
=	O
owner	*(void)
;	O
switch	O
(	O
req	enum(int,int,int,int,int,int,int,int,int,int)
)	O
{	O
case	O
mu_itrctl_tell	int
:	O
if	O
(	O
hdr_finished_p	(*(void))->(int)
(	O
owner	*(void)
)	O
)	O
return	O
MU_ERR_NOENT	O
;	O
else	O
*	O
(	O
size_t	long
*	O
)	O
arg	*(void)
=	O
itr	*(struct)
->	O
index	(*(char),int)->(*(char))
;	O
return	O
0	int
;	O
break	O
;	O
case	O
mu_itrctl_delete	int
:	O
if	O
(	O
hdr_finished_p	(*(void))->(int)
(	O
owner	*(void)
)	O
)	O
return	O
MU_ERR_NOENT	O
;	O
else	O
return	O
mu_header_remove	(*(struct),*(char),int)->(int)
(	O
itr	*(struct)
->	O
header	*(struct)
,	O
NULL	O
,	O
itr	*(struct)
->	O
index	(*(char),int)->(*(char))
)	O
;	O
break	O
;	O
case	O
mu_itrctl_qry_direction	int
:	O
if	O
(	O
!	O
arg	*(void)
)	O
return	O
EINVAL	int
;	O
else	O
*	O
(	O
int	O
*	O
)	O
arg	*(void)
=	O
itr	*(struct)
->	O
backwards	int
;	O
break	O
;	O
case	O
mu_itrctl_set_direction	int
:	O
if	O
(	O
!	O
arg	*(void)
)	O
return	O
EINVAL	int
;	O
else	O
itr	*(struct)
->	O
backwards	int
=	O
!	O
!	O
*	O
(	O
int	O
*	O
)	O
arg	*(void)
;	O
break	O
;	O
case	O
mu_itrctl_count	int
:	O
if	O
(	O
!	O
arg	*(void)
)	O
return	O
EINVAL	int
;	O
return	O
mu_header_get_field_count	(*(struct),*(long))->(int)
(	O
itr	*(struct)
->	O
header	*(struct)
,	O
arg	*(void)
)	O
;	O
default	O
:	O
return	O
ENOSYS	int
;	O
}	O
return	O
0	int
;	O
}	O
int	O
mu_header_get_iterator	(*(struct),*(*(struct)))->(int)
(	O
mu_header_t	*(struct)
hdr	*(struct)
,	O
mu_iterator_t	*(struct)
*	O
piterator	*(*(struct))
)	O
{	O
mu_iterator_t	*(struct)
iterator	*(struct)
;	O
int	O
status	int
;	O
struct	O
header_iterator	struct(*(struct(*(char),long,long,*(struct(*(struct`),*(struct`),long,long,long,long,long)),*(struct(*(struct`),*(struct`),long,long,long,long,long)),int,long,long,long,*(struct),*(struct),*(struct),*((*(void),*(*`),*(long))->(int)),*(void))),long,int)
*	O
itr	*(struct)
;	O
if	O
(	O
!	O
hdr	*(struct)
)	O
return	O
EINVAL	int
;	O
itr	*(struct)
=	O
calloc	(long,long)->(*(void))
(	O
1	int
,	O
sizeof	O
*	O
itr	*(struct)
)	O
;	O
if	O
(	O
!	O
itr	*(struct)
)	O
return	O
ENOMEM	int
;	O
itr	*(struct)
->	O
header	*(struct)
=	O
hdr	*(struct)
;	O
itr	*(struct)
->	O
index	(*(char),int)->(*(char))
=	O
1	int
;	O
status	int
=	O
mu_iterator_create	(*(*(struct)),*(void))->(int)
(	O
&	O
iterator	*(struct)
,	O
itr	*(struct)
)	O
;	O
if	O
(	O
status	int
)	O
{	O
free	(*(void))->(void)
(	O
itr	*(struct)
)	O
;	O
return	O
status	int
;	O
}	O
mu_iterator_set_first	(*(struct),*((*(void))->(int)))->(int)
(	O
iterator	*(struct)
,	O
hdr_first	(*(void))->(int)
)	O
;	O
mu_iterator_set_next	(*(struct),*((*(void))->(int)))->(int)
(	O
iterator	*(struct)
,	O
hdr_next	(*(void))->(int)
)	O
;	O
mu_iterator_set_getitem	(*(struct),*((*(void),*(*(void)),*(*(void)))->(int)))->(int)
(	O
iterator	*(struct)
,	O
hdr_getitem	(*(void),*(*(void)),*(*(void)))->(int)
)	O
;	O
mu_iterator_set_finished_p	(*(struct),*((*(void))->(int)))->(int)
(	O
iterator	*(struct)
,	O
hdr_finished_p	(*(void))->(int)
)	O
;	O
mu_iterator_set_delitem	(*(struct),*((*(void),*(void))->(int)))->(int)
(	O
iterator	*(struct)
,	O
hdr_delitem	(*(void),*(void))->(int)
)	O
;	O
mu_iterator_set_destroy	(*(struct),*((*(struct),*(void))->(int)))->(int)
(	O
iterator	*(struct)
,	O
hdr_destroy	(*(struct),*(void))->(int)
)	O
;	O
mu_iterator_set_dup	(*(struct),*((*(*(void)),*(void))->(int)))->(int)
(	O
iterator	*(struct)
,	O
hdr_data_dup	(*(*(void)),*(void))->(int)
)	O
;	O
mu_iterator_set_itrctl	(*(struct),*((*(void),enum(int,int,int,int,int,int,int,int,int,int),*(void))->(int)))->(int)
(	O
iterator	*(struct)
,	O
hdr_itrctl	(*(void),enum(int,int,int,int,int,int,int,int,int,int),*(void))->(int)
)	O
;	O
mu_iterator_attach	(*(*(struct)),*(struct))->(int)
(	O
&	O
hdr	*(struct)
->	O
itr	*(struct)
,	O
iterator	*(struct)
)	O
;	O
*	O
piterator	*(*(struct))
=	O
iterator	*(struct)
;	O
return	O
0	int
;	O
}	O
