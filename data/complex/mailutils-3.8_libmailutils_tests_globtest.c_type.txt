int	O
main	(int,*(*(char)))->(int)
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	*(*(char))
)	O
{	O
char	O
*	O
pattern	*(void)
=	O
NULL	O
;	O
int	O
flags	int
=	O
0	int
;	O
int	O
rc	int
;	O
int	O
i	long
;	O
mu_set_program_name	(*(char))->(void)
(	O
argv	*(*(char))
[	O
0	int
]	O
)	O
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<	O
argc	long
;	O
i	long
++	O
)	O
{	O
char	O
*	O
a	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))))
=	O
argv	*(*(char))
[	O
i	long
]	O
;	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
a	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))))
,	O
"-i"	*(char)
)	O
==	O
0	int
)	O
flags	int
|=	O
MU_GLOBF_ICASE	int
;	O
else	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
a	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))))
,	O
"-s"	*(char)
)	O
==	O
0	int
)	O
flags	int
|=	O
MU_GLOBF_SUB	int
;	O
else	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
a	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))))
,	O
"-c"	*(char)
)	O
==	O
0	int
)	O
flags	int
|=	O
MU_GLOBF_COLLAPSE	int
;	O
else	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
a	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))))
,	O
"--"	*(char)
)	O
==	O
0	int
)	O
{	O
i	long
++	O
;	O
break	O
;	O
}	O
else	O
if	O
(	O
*	O
a	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))))
!=	O
'-'	O
)	O
break	O
;	O
else	O
{	O
mu_error	(*(char))->(int)
(	O
"unknown option %s"	*(char)
,	O
a	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))))
)	O
;	O
return	O
1	int
;	O
}	O
}	O
if	O
(	O
i	long
==	O
argc	long
)	O
{	O
mu_printf	(*(char))->(int)
(	O
"usage: %s [-ics] PATTERN [WORD...]\n"	*(char)
,	O
mu_program_name	*(char)
)	O
;	O
return	O
1	int
;	O
}	O
pattern	*(void)
=	O
argv	*(*(char))
[	O
i	long
++	O
]	O
;	O
if	O
(	O
i	long
==	O
argc	long
)	O
{	O
char	O
*	O
regstr	*(char)
;	O
rc	int
=	O
mu_glob_to_regex	(*(*(char)),*(char),int)->(int)
(	O
&	O
regstr	*(char)
,	O
pattern	*(void)
,	O
flags	int
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_error	(*(char))->(int)
(	O
"convert: %s"	*(char)
,	O
mu_strerror	(int)->(*(char))
(	O
rc	int
)	O
)	O
;	O
return	O
1	int
;	O
}	O
mu_printf	(*(char))->(int)
(	O
"%s\n"	*(char)
,	O
regstr	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
regstr	*(char)
)	O
;	O
}	O
else	O
{	O
regex_t	struct(*(struct),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int)
regex	*((*(struct),*(struct(int,int,*(char),*(char),*(void))),*(char))->(int))
;	O
size_t	long
nmatch	long
=	O
0	int
;	O
regmatch_t	struct(int,int)
*	O
matches	*((*(struct),*(struct(int,int,*(char),*(char),*(void))),*(char))->(int))
=	O
NULL	O
;	O
rc	int
=	O
mu_glob_compile	(*(struct(*(struct),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int)),*(char),int)->(int)
(	O
&	O
regex	*((*(struct),*(struct(int,int,*(char),*(char),*(void))),*(char))->(int))
,	O
pattern	*(void)
,	O
flags	int
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_error	(*(char))->(int)
(	O
"compile: %s"	*(char)
,	O
mu_strerror	(int)->(*(char))
(	O
rc	int
)	O
)	O
;	O
return	O
1	int
;	O
}	O
if	O
(	O
flags	int
&	O
MU_GLOBF_SUB	int
)	O
{	O
nmatch	long
=	O
regex	*((*(struct),*(struct(int,int,*(char),*(char),*(void))),*(char))->(int))
.	O
re_nsub	long
+	O
1	int
;	O
matches	*((*(struct),*(struct(int,int,*(char),*(char),*(void))),*(char))->(int))
=	O
mu_calloc	(long,long)->(*(void))
(	O
nmatch	long
,	O
sizeof	O
matches	*((*(struct),*(struct(int,int,*(char),*(char),*(void))),*(char))->(int))
[	O
0	int
]	O
)	O
;	O
}	O
for	O
(	O
;	O
i	long
<	O
argc	long
;	O
i	long
++	O
)	O
{	O
char	O
*	O
a	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))))
=	O
argv	*(*(char))
[	O
i	long
]	O
;	O
rc	int
=	O
regexec	(*(struct(*(struct),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int)),*(char),long,array(struct(int,int)),int)->(int)
(	O
&	O
regex	*((*(struct),*(struct(int,int,*(char),*(char),*(void))),*(char))->(int))
,	O
a	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))))
,	O
nmatch	long
,	O
matches	*((*(struct),*(struct(int,int,*(char),*(char),*(void))),*(char))->(int))
,	O
0	int
)	O
;	O
mu_printf	(*(char))->(int)
(	O
"%s: %s\n"	*(char)
,	O
a	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))))
,	O
rc	int
==	O
0	int
?	O
"OK"	*(char)
:	O
"NO"	*(char)
)	O
;	O
if	O
(	O
flags	int
&	O
MU_GLOBF_SUB	int
)	O
{	O
size_t	long
j	long
;	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
nmatch	long
;	O
j	long
++	O
)	O
printf	(*(char))->(int)
(	O
"%02zu: %.*s\n"	*(char)
,	O
j	long
,	O
(	O
int	O
)	O
(	O
matches	*((*(struct),*(struct(int,int,*(char),*(char),*(void))),*(char))->(int))
[	O
j	long
]	O
.	O
rm_eo	int
-	O
matches	*((*(struct),*(struct(int,int,*(char),*(char),*(void))),*(char))->(int))
[	O
j	long
]	O
.	O
rm_so	int
)	O
,	O
a	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))))
+	O
matches	*((*(struct),*(struct(int,int,*(char),*(char),*(void))),*(char))->(int))
[	O
j	long
]	O
.	O
rm_so	int
)	O
;	O
}	O
}	O
}	O
return	O
0	int
;	O
}	O
