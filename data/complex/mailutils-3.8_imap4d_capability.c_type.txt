static	O
mu_list_t	*(struct)
capa_list	*(struct)
;	O
static	O
int	O
comp	(*(void),*(void))->(int)
(	O
const	O
void	O
*	O
item	*(void)
,	O
const	O
void	O
*	O
data	*(void)
)	O
{	O
return	O
strcmp	(*(char),*(char))->(int)
(	O
(	O
char	O
*	O
)	O
item	*(void)
,	O
(	O
char	O
*	O
)	O
data	*(void)
)	O
;	O
}	O
void	O
imap4d_capability_add	(*(char))->(void)
(	O
const	O
char	O
*	O
str	*(struct)
)	O
{	O
if	O
(	O
!	O
capa_list	*(struct)
)	O
{	O
mu_list_create	(*(*(struct)))->(int)
(	O
&	O
capa_list	*(struct)
)	O
;	O
mu_list_set_comparator	(*(struct),*((*(void),*(void))->(int)))->(*((*(void),*(void))->(int)))
(	O
capa_list	*(struct)
,	O
comp	(*(void),*(void))->(int)
)	O
;	O
}	O
mu_list_append	(*(struct),*(void))->(int)
(	O
capa_list	*(struct)
,	O
(	O
void	O
*	O
)	O
str	*(struct)
)	O
;	O
}	O
void	O
imap4d_capability_remove	(*(char))->(void)
(	O
const	O
char	O
*	O
str	*(struct)
)	O
{	O
mu_list_remove	(*(struct),*(void))->(int)
(	O
capa_list	*(struct)
,	O
(	O
void	O
*	O
)	O
str	*(struct)
)	O
;	O
}	O
void	O
imap4d_capability_init	()->(void)
(	O
)	O
{	O
static	O
char	O
*	O
capa	*(struct(*(char),*(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*`,*`,*`)->(void)),*(char))),*(struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char))),*((enum(int,int),*(struct`),*(char),*(*`),*(void),*(struct`))->(int)),*((*(void))->(void))))
[	O
]	O
=	O
{	O
"IMAP4rev1"	*(char)
,	O
"NAMESPACE"	*(char)
,	O
"ID"	*(char)
,	O
"IDLE"	*(char)
,	O
"LITERAL+"	*(char)
,	O
"UNSELECT"	*(char)
,	O
NULL	O
}	O
;	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
capa	*(struct(*(char),*(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*`,*`,*`)->(void)),*(char))),*(struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char))),*((enum(int,int),*(struct`),*(char),*(*`),*(void),*(struct`))->(int)),*((*(void))->(void))))
[	O
i	int
]	O
;	O
i	int
++	O
)	O
imap4d_capability_add	(*(char))->(void)
(	O
capa	*(struct(*(char),*(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*`,*`,*`)->(void)),*(char))),*(struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char))),*((enum(int,int),*(struct`),*(char),*(*`),*(void),*(struct`))->(int)),*((*(void))->(void))))
[	O
i	int
]	O
)	O
;	O
}	O
static	O
int	O
print_capa	(*(void),*(void))->(int)
(	O
void	O
*	O
item	*(void)
,	O
void	O
*	O
data	*(void)
)	O
{	O
io_sendf	(*(char))->(int)
(	O
" %s"	*(char)
,	O
(	O
char	O
*	O
)	O
item	*(void)
)	O
;	O
return	O
0	int
;	O
}	O
int	O
imap4d_capability	(*(struct(enum(int,int,int,int,int),*(struct(*`,*`,*`,*`)))),*(struct(*(char),*((*`,*`,*`)->(int)),int,int,int,*(char))),*(struct))->(int)
(	O
struct	O
imap4d_session	struct(enum(int,int,int,int,int),*(struct(*(char),*(char),*(char),*(char))))
*	O
session	*(struct(enum(int,int,int,int,int),*(struct(*(char),*(char),*(char),*(char)))))
,	O
struct	O
imap4d_command	struct(*(char),*((*(struct),*(struct(*(char),*((*`,*`,*`)->(int)),int,int,int,*(char))),*(struct))->(int)),int,int,int,*(char))
*	O
command	*(char)
,	O
imap4d_tokbuf_t	*(struct)
tok	*(*(struct))
)	O
{	O
if	O
(	O
imap4d_tokbuf_argc	(*(struct))->(int)
(	O
tok	*(*(struct))
)	O
!=	O
2	int
)	O
return	O
io_completion_response	(*(struct(*(char),*((*`,*`,*`)->(int)),int,int,int,*(char))),int,*(char))->(int)
(	O
command	*(char)
,	O
RESP_BAD	int
,	O
"Invalid arguments"	*(char)
)	O
;	O
io_sendf	(*(char))->(int)
(	O
"* CAPABILITY"	*(char)
)	O
;	O
mu_list_foreach	(*(struct),*((*(void),*(void))->(int)),*(void))->(int)
(	O
capa_list	*(struct)
,	O
print_capa	(*(void),*(void))->(int)
,	O
NULL	O
)	O
;	O
imap4d_auth_capability	(*(struct(enum(int,int,int,int,int),*(struct(*`,*`,*`,*`)))))->(void)
(	O
session	*(struct(enum(int,int,int,int,int),*(struct(*(char),*(char),*(char),*(char)))))
)	O
;	O
io_sendf	(*(char))->(int)
(	O
"\n"	*(char)
)	O
;	O
return	O
io_completion_response	(*(struct(*(char),*((*`,*`,*`)->(int)),int,int,int,*(char))),int,*(char))->(int)
(	O
command	*(char)
,	O
RESP_OK	int
,	O
"Completed"	*(char)
)	O
;	O
}	O
