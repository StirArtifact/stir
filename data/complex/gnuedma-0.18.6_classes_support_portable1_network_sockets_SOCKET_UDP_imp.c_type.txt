typedef	O
struct	O
{	O
EUint32	long
s	long
;	O
EPChar	*(char)
resource	*(char)
;	O
EUint32	long
LocalPort	long
;	O
EUint32	long
LocalAddr	long
;	O
EUint32	long
RemoteAddr	long
;	O
EUint32	long
RemotePort	long
;	O
}	O
DtSSOCK	struct(long,*(char),long,long,long,long)
;	O
EUint32	long
EDMAPROC	O
SOCKET_UDPbindZU32	(int,*(char),long)->(long)
(	O
OBJID	int
IdObj	int
,	O
EPChar	*(char)
Name	*(char)
,	O
EUint32	long
port	long
)	O
{	O
DtSSOCK	struct(long,*(char),long,long,long,long)
*	O
m	*(struct(long,*(char),long,long,long,long))
;	O
struct	O
sockaddr_in	struct(short,short,struct(int),array(char))
local	struct(short,short,struct(int),array(char))
;	O
struct	O
hostent	struct(*(char),*(*(char)),int,int,*(*(char)))
*	O
maq	*(struct(*(char),*(*(char)),int,int,*(*(char))))
;	O
EUint32	long
n	long
;	O
EChar	char
res	array(char)
[	O
1024	int
]	O
;	O
m	*(struct(long,*(char),long,long,long,long))
=	O
(	O
DtSSOCK	struct(long,*(char),long,long,long,long)
*	O
)	O
edma_get_data_ref	(int)->(*(void))
(	O
IdObj	int
)	O
;	O
sprintf	(*(char),*(char))->(int)
(	O
res	array(char)
,	O
"%s:%ld"	*(char)
,	O
Name	*(char)
,	O
port	long
)	O
;	O
edma_wprop3	(int,*(char))->(int)
(	O
IdObj	int
,	O
"resource"	*(char)
,	O
res	array(char)
)	O
;	O
local	struct(short,short,struct(int),array(char))
.	O
sin_family	short
=	O
AF_INET	O
;	O
local	struct(short,short,struct(int),array(char))
.	O
sin_port	short
=	O
htons	(short)->(short)
(	O
port	long
)	O
;	O
if	O
(	O
Name	*(char)
==	O
NULL	O
)	O
local	struct(short,short,struct(int),array(char))
.	O
sin_addr	struct(int)
.	O
s_addr	int
=	O
htons	(short)->(short)
(	O
INADDR_ANY	O
)	O
;	O
else	O
if	O
(	O
isdigit	(int)->(int)
(	O
Name	*(char)
[	O
0	int
]	O
)	O
)	O
local	struct(short,short,struct(int),array(char))
.	O
sin_addr	struct(int)
.	O
s_addr	int
=	O
inet_addr	(*(char))->(int)
(	O
Name	*(char)
)	O
;	O
else	O
{	O
maq	*(struct(*(char),*(*(char)),int,int,*(*(char))))
=	O
gethostbyname	(*(char))->(*(struct(*(char),*(*(char)),int,int,*(*(char)))))
(	O
Name	*(char)
)	O
;	O
if	O
(	O
maq	*(struct(*(char),*(*(char)),int,int,*(*(char))))
==	O
NULL	O
)	O
{	O
edma_printf_obj	(int,*(char))->(long)
(	O
IdObj	int
,	O
"(bind)Can't locate host %s"	*(char)
,	O
Name	*(char)
)	O
;	O
return	O
1	int
;	O
}	O
else	O
{	O
local	struct(short,short,struct(int),array(char))
.	O
sin_addr	struct(int)
=	O
(	O
*	O
(	O
struct	O
in_addr	struct(int)
*	O
)	O
(	O
maq	*(struct(*(char),*(*(char)),int,int,*(*(char))))
->	O
h_addr	O
)	O
)	O
;	O
}	O
}	O
bzero	(*(void),int)->(void)
(	O
&	O
(	O
local	struct(short,short,struct(int),array(char))
.	O
sin_zero	array(char)
)	O
,	O
8	int
)	O
;	O
n	long
=	O
bind	(int,*(struct(short,array(char))),int)->(int)
(	O
m	*(struct(long,*(char),long,long,long,long))
->	O
s	long
,	O
(	O
struct	O
sockaddr	struct(short,array(char))
*	O
)	O
&	O
local	struct(short,short,struct(int),array(char))
,	O
sizeof	O
(	O
struct	O
sockaddr_in	struct(short,short,struct(int),array(char))
)	O
)	O
;	O
if	O
(	O
n	long
==	O
-	O
1	int
)	O
edma_printf_obj	(int,*(char))->(long)
(	O
IdObj	int
,	O
"(bind) Error"	*(char)
)	O
;	O
return	O
n	long
;	O
}	O
EUint32	long
EDMAPROC	O
SOCKET_UDPsendAU32	(int,struct(long,long,*(void)),long)->(long)
(	O
OBJID	int
IdObj	int
,	O
EDMAT_BUFFER	struct(long,long,*(void))
Buff	struct(long,long,*(void))
,	O
EUint32	long
len	int
)	O
{	O
DtSSOCK	struct(long,*(char),long,long,long,long)
*	O
m	*(struct(long,*(char),long,long,long,long))
;	O
struct	O
sockaddr_in	struct(short,short,struct(int),array(char))
remote	struct(short,short,struct(int),array(char))
;	O
EUint32	long
i	int
;	O
m	*(struct(long,*(char),long,long,long,long))
=	O
(	O
DtSSOCK	struct(long,*(char),long,long,long,long)
*	O
)	O
edma_get_data_ref	(int)->(*(void))
(	O
IdObj	int
)	O
;	O
remote	struct(short,short,struct(int),array(char))
.	O
sin_family	short
=	O
AF_INET	O
;	O
remote	struct(short,short,struct(int),array(char))
.	O
sin_port	short
=	O
m	*(struct(long,*(char),long,long,long,long))
->	O
RemotePort	long
;	O
remote	struct(short,short,struct(int),array(char))
.	O
sin_addr	struct(int)
.	O
s_addr	int
=	O
m	*(struct(long,*(char),long,long,long,long))
->	O
RemoteAddr	long
;	O
i	int
=	O
sendto	(int,*(void),int,int,*(struct(short,array(char))),int)->(int)
(	O
m	*(struct(long,*(char),long,long,long,long))
->	O
s	long
,	O
Buff	struct(long,long,*(void))
.	O
dat	*(void)
,	O
len	int
,	O
0	int
,	O
(	O
struct	O
sockaddr	struct(short,array(char))
*	O
)	O
&	O
remote	struct(short,short,struct(int),array(char))
,	O
sizeof	O
(	O
struct	O
sockaddr_in	struct(short,short,struct(int),array(char))
)	O
)	O
;	O
if	O
(	O
i	int
==	O
-	O
1	int
)	O
perror	(*(char))->(void)
(	O
""	*(char)
)	O
;	O
return	O
0	int
;	O
}	O
EUint32	long
EDMAPROC	O
SOCKET_UDPrecvsAsU32	(int,*(struct(long,long,*(void))),*(long))->(long)
(	O
OBJID	int
IdObj	int
,	O
EDMAT_BUFFER	struct(long,long,*(void))
*	O
Buff	struct(long,long,*(void))
,	O
EPUint32	*(long)
len	int
)	O
{	O
DtSSOCK	struct(long,*(char),long,long,long,long)
*	O
m	*(struct(long,*(char),long,long,long,long))
;	O
struct	O
sockaddr_in	struct(short,short,struct(int),array(char))
remote	struct(short,short,struct(int),array(char))
;	O
ESint32	int
i	int
;	O
m	*(struct(long,*(char),long,long,long,long))
=	O
(	O
DtSSOCK	struct(long,*(char),long,long,long,long)
*	O
)	O
edma_get_data_ref	(int)->(*(void))
(	O
IdObj	int
)	O
;	O
remote	struct(short,short,struct(int),array(char))
.	O
sin_family	short
=	O
AF_INET	O
;	O
remote	struct(short,short,struct(int),array(char))
.	O
sin_port	short
=	O
m	*(struct(long,*(char),long,long,long,long))
->	O
RemotePort	long
;	O
remote	struct(short,short,struct(int),array(char))
.	O
sin_addr	struct(int)
.	O
s_addr	int
=	O
m	*(struct(long,*(char),long,long,long,long))
->	O
RemoteAddr	long
;	O
i	int
=	O
recvfrom	(int,*(void),int,int,*(struct(short,array(char))),*(int))->(int)
(	O
m	*(struct(long,*(char),long,long,long,long))
->	O
s	long
,	O
Buff	struct(long,long,*(void))
->	O
dat	*(void)
,	O
*	O
len	int
,	O
0	int
,	O
(	O
struct	O
sockaddr	struct(short,array(char))
*	O
)	O
&	O
remote	struct(short,short,struct(int),array(char))
,	O
(	O
int	O
*	O
)	O
len	int
)	O
;	O
m	*(struct(long,*(char),long,long,long,long))
->	O
RemotePort	long
=	O
remote	struct(short,short,struct(int),array(char))
.	O
sin_port	short
;	O
m	*(struct(long,*(char),long,long,long,long))
->	O
RemoteAddr	long
=	O
remote	struct(short,short,struct(int),array(char))
.	O
sin_addr	struct(int)
.	O
s_addr	int
;	O
return	O
i	int
;	O
}	O
EUint32	long
EDMAPROC	O
SOCKET_UDPSetRemoteZU32	(int,*(char),long)->(long)
(	O
OBJID	int
IdObj	int
,	O
EPChar	*(char)
Name	*(char)
,	O
EUint32	long
port	long
)	O
{	O
DtSSOCK	struct(long,*(char),long,long,long,long)
*	O
m	*(struct(long,*(char),long,long,long,long))
;	O
struct	O
hostent	struct(*(char),*(*(char)),int,int,*(*(char)))
*	O
maq	*(struct(*(char),*(*(char)),int,int,*(*(char))))
;	O
struct	O
sockaddr_in	struct(short,short,struct(int),array(char))
remote	struct(short,short,struct(int),array(char))
;	O
m	*(struct(long,*(char),long,long,long,long))
=	O
(	O
DtSSOCK	struct(long,*(char),long,long,long,long)
*	O
)	O
edma_get_data_ref	(int)->(*(void))
(	O
IdObj	int
)	O
;	O
m	*(struct(long,*(char),long,long,long,long))
->	O
RemotePort	long
=	O
htons	(short)->(short)
(	O
port	long
)	O
;	O
if	O
(	O
Name	*(char)
==	O
NULL	O
)	O
{	O
m	*(struct(long,*(char),long,long,long,long))
->	O
RemoteAddr	long
=	O
htons	(short)->(short)
(	O
INADDR_ANY	O
)	O
;	O
return	O
0	int
;	O
}	O
if	O
(	O
isdigit	(int)->(int)
(	O
Name	*(char)
[	O
0	int
]	O
)	O
)	O
{	O
m	*(struct(long,*(char),long,long,long,long))
->	O
RemoteAddr	long
=	O
inet_addr	(*(char))->(int)
(	O
Name	*(char)
)	O
;	O
}	O
else	O
{	O
maq	*(struct(*(char),*(*(char)),int,int,*(*(char))))
=	O
gethostbyname	(*(char))->(*(struct(*(char),*(*(char)),int,int,*(*(char)))))
(	O
Name	*(char)
)	O
;	O
if	O
(	O
maq	*(struct(*(char),*(*(char)),int,int,*(*(char))))
==	O
NULL	O
)	O
{	O
edma_printf_obj	(int,*(char))->(long)
(	O
IdObj	int
,	O
"(SetRemote)Can't locate host %s"	*(char)
,	O
Name	*(char)
)	O
;	O
return	O
1	int
;	O
}	O
else	O
{	O
remote	struct(short,short,struct(int),array(char))
.	O
sin_addr	struct(int)
=	O
(	O
*	O
(	O
struct	O
in_addr	struct(int)
*	O
)	O
(	O
maq	*(struct(*(char),*(*(char)),int,int,*(*(char))))
->	O
h_addr	O
)	O
)	O
;	O
m	*(struct(long,*(char),long,long,long,long))
->	O
RemoteAddr	long
=	O
remote	struct(short,short,struct(int),array(char))
.	O
sin_addr	struct(int)
.	O
s_addr	int
;	O
}	O
}	O
return	O
0	int
;	O
}	O
EUint32	long
EDMAPROC	O
SOCKET_UDPborn	(int)->(long)
(	O
OBJID	int
IdObj	int
)	O
{	O
DtSSOCK	struct(long,*(char),long,long,long,long)
*	O
m	*(struct(long,*(char),long,long,long,long))
;	O
m	*(struct(long,*(char),long,long,long,long))
=	O
(	O
DtSSOCK	struct(long,*(char),long,long,long,long)
*	O
)	O
edma_get_data_ref	(int)->(*(void))
(	O
IdObj	int
)	O
;	O
m	*(struct(long,*(char),long,long,long,long))
->	O
s	long
=	O
socket	(int,int,int)->(int)
(	O
AF_INET	O
,	O
SOCK_DGRAM	int
,	O
0	int
)	O
;	O
if	O
(	O
m	*(struct(long,*(char),long,long,long,long))
->	O
s	long
==	O
-	O
1	int
)	O
{	O
edma_printf_obj	(int,*(char))->(long)
(	O
IdObj	int
,	O
"%s"	*(char)
,	O
"Can't create datagram socket"	*(char)
)	O
;	O
return	O
1	int
;	O
}	O
return	O
0	int
;	O
}	O
EUint32	long
EDMAPROC	O
SOCKET_UDPrip	(int)->(long)
(	O
OBJID	int
IdObj	int
)	O
{	O
DtSSOCK	struct(long,*(char),long,long,long,long)
*	O
m	*(struct(long,*(char),long,long,long,long))
;	O
m	*(struct(long,*(char),long,long,long,long))
=	O
(	O
DtSSOCK	struct(long,*(char),long,long,long,long)
*	O
)	O
edma_get_data_ref	(int)->(*(void))
(	O
IdObj	int
)	O
;	O
close	(int)->(int)
(	O
m	*(struct(long,*(char),long,long,long,long))
->	O
s	long
)	O
;	O
return	O
0	int
;	O
}	O
EUint32	long
EDMAPROC	O
SOCKET_UDPSendAS32rS32	(int,struct(long,long,*(void)),long)->(long)
(	O
OBJID	int
IdObj	int
,	O
EDMAT_BUFFER	struct(long,long,*(void))
Buff	struct(long,long,*(void))
,	O
EUint32	long
len	int
)	O
{	O
DtSSOCK	struct(long,*(char),long,long,long,long)
*	O
m	*(struct(long,*(char),long,long,long,long))
;	O
EUint32	long
i	int
;	O
m	*(struct(long,*(char),long,long,long,long))
=	O
(	O
DtSSOCK	struct(long,*(char),long,long,long,long)
*	O
)	O
edma_get_data_ref	(int)->(*(void))
(	O
IdObj	int
)	O
;	O
i	int
=	O
(	O
ESint32	int
)	O
edma_met3	(int,*(char))->(int)
(	O
IdObj	int
,	O
"send"	*(char)
,	O
Buff	struct(long,long,*(void))
,	O
len	int
)	O
;	O
if	O
(	O
i	int
==	O
-	O
1	int
)	O
perror	(*(char))->(void)
(	O
""	*(char)
)	O
;	O
return	O
(	O
ESint32	int
)	O
i	int
;	O
}	O
EUint32	long
EDMAPROC	O
SOCKET_UDPRecvsAsS32rS32	(int,*(struct(long,long,*(void))),*(long))->(long)
(	O
OBJID	int
IdObj	int
,	O
EDMAT_BUFFER	struct(long,long,*(void))
*	O
Buff	struct(long,long,*(void))
,	O
EPUint32	*(long)
len	int
)	O
{	O
DtSSOCK	struct(long,*(char),long,long,long,long)
*	O
m	*(struct(long,*(char),long,long,long,long))
;	O
ESint32	int
i	int
;	O
m	*(struct(long,*(char),long,long,long,long))
=	O
(	O
DtSSOCK	struct(long,*(char),long,long,long,long)
*	O
)	O
edma_get_data_ref	(int)->(*(void))
(	O
IdObj	int
)	O
;	O
i	int
=	O
(	O
ESint32	int
)	O
edma_met3	(int,*(char))->(int)
(	O
IdObj	int
,	O
"recv"	*(char)
,	O
Buff	struct(long,long,*(void))
,	O
len	int
)	O
;	O
*	O
len	int
=	O
i	int
;	O
return	O
i	int
;	O
}	O
EUint32	long
EDMAPROC	O
SOCKET_UDPOpenZS32rS32	(int,*(char),int)->(long)
(	O
OBJID	int
IdObj	int
,	O
EPChar	*(char)
Name	*(char)
,	O
ESint32	int
mode	int
)	O
{	O
DtSSOCK	struct(long,*(char),long,long,long,long)
*	O
m	*(struct(long,*(char),long,long,long,long))
;	O
EChar	char
addr	array(char)
[	O
1024	int
]	O
;	O
EChar	char
temp	array(char)
[	O
1024	int
]	O
;	O
EUint32	long
port	long
;	O
EPChar	*(char)
aux	*(char)
;	O
ESint32	int
r	int
;	O
m	*(struct(long,*(char),long,long,long,long))
=	O
(	O
DtSSOCK	struct(long,*(char),long,long,long,long)
*	O
)	O
edma_get_data_ref	(int)->(*(void))
(	O
IdObj	int
)	O
;	O
if	O
(	O
mode	int
>=	O
2	int
)	O
{	O
edma_printf_obj	(int,*(char))->(long)
(	O
IdObj	int
,	O
"%s"	*(char)
,	O
"[ERROR] Append Mode (3) not support over this channel"	*(char)
)	O
;	O
return	O
-	O
1	int
;	O
}	O
strcpy	(*(char),*(char))->(*(char))
(	O
temp	array(char)
,	O
Name	*(char)
)	O
;	O
aux	*(char)
=	O
strchr	(*(char),int)->(*(char))
(	O
temp	array(char)
,	O
':'	O
)	O
;	O
if	O
(	O
aux	*(char)
==	O
NULL	O
)	O
{	O
port	long
=	O
0	int
;	O
if	O
(	O
mode	int
!=	O
1	int
)	O
{	O
edma_printf_obj	(int,*(char))->(long)
(	O
IdObj	int
,	O
"%s"	*(char)
,	O
"[ERROR] No port specified for Read Openning"	*(char)
)	O
;	O
return	O
-	O
1	int
;	O
}	O
}	O
else	O
{	O
port	long
=	O
atoi	(*(char))->(int)
(	O
aux	*(char)
+	O
1	int
)	O
;	O
*	O
aux	*(char)
=	O
0	int
;	O
}	O
strncpy	(*(char),*(char),int)->(*(char))
(	O
addr	array(char)
,	O
temp	array(char)
,	O
1024	int
)	O
;	O
switch	O
(	O
mode	int
)	O
{	O
case	O
0	int
:	O
r	int
=	O
(	O
ESint32	int
)	O
edma_met3	(int,*(char))->(int)
(	O
IdObj	int
,	O
"bind"	*(char)
,	O
addr	array(char)
,	O
port	long
)	O
;	O
if	O
(	O
r	int
==	O
-	O
1	int
)	O
return	O
r	int
;	O
break	O
;	O
case	O
1	int
:	O
r	int
=	O
(	O
ESint32	int
)	O
edma_met3	(int,*(char))->(int)
(	O
IdObj	int
,	O
"SetRemote"	*(char)
,	O
addr	array(char)
,	O
port	long
)	O
;	O
if	O
(	O
r	int
==	O
-	O
1	int
)	O
return	O
r	int
;	O
break	O
;	O
case	O
2	int
:	O
break	O
;	O
}	O
return	O
0	int
;	O
}	O
EUint32	long
EDMAPROC	O
SOCKET_UDPCloserS32	(int)->(long)
(	O
OBJID	int
IdObj	int
)	O
{	O
DtSSOCK	struct(long,*(char),long,long,long,long)
*	O
m	*(struct(long,*(char),long,long,long,long))
;	O
m	*(struct(long,*(char),long,long,long,long))
=	O
(	O
DtSSOCK	struct(long,*(char),long,long,long,long)
*	O
)	O
edma_get_data_ref	(int)->(*(void))
(	O
IdObj	int
)	O
;	O
return	O
0	int
;	O
}	O
EUint32	long
EDMAPROC	O
SOCKET_UDPWaitsOrS32	(int,*(int))->(long)
(	O
OBJID	int
IdObj	int
,	O
OBJID	int
*	O
id	int
)	O
{	O
DtSSOCK	struct(long,*(char),long,long,long,long)
*	O
m	*(struct(long,*(char),long,long,long,long))
;	O
ESint32	int
r	int
;	O
m	*(struct(long,*(char),long,long,long,long))
=	O
(	O
DtSSOCK	struct(long,*(char),long,long,long,long)
*	O
)	O
edma_get_data_ref	(int)->(*(void))
(	O
IdObj	int
)	O
;	O
return	O
r	int
;	O
}	O
EUint32	long
EDMAPROC	O
SOCKET_UDPConfigOrS32	(int,int)->(long)
(	O
OBJID	int
IdObj	int
,	O
OBJID	int
id	int
)	O
{	O
DtSSOCK	struct(long,*(char),long,long,long,long)
*	O
m	*(struct(long,*(char),long,long,long,long))
;	O
m	*(struct(long,*(char),long,long,long,long))
=	O
(	O
DtSSOCK	struct(long,*(char),long,long,long,long)
*	O
)	O
edma_get_data_ref	(int)->(*(void))
(	O
IdObj	int
)	O
;	O
return	O
0	int
;	O
}	O
