WGET_GCC_NONNULL_ALL	O
static	O
int	O
compare_pin	(*(struct(*(char),*(void),*(char),long)),*(struct(*(char),*(void),*(char),long)))->(int)
(	O
wget_hpkp_pin	struct(*(char),*(void),*(char),long)
*	O
p1	*(struct(*(char),*(void),*(char),long))
,	O
wget_hpkp_pin	struct(*(char),*(void),*(char),long)
*	O
p2	*(struct(*(char),*(void),*(char),long))
)	O
{	O
int	O
n	long
;	O
if	O
(	O
(	O
n	long
=	O
strcmp	(*(char),*(char))->(int)
(	O
p1	*(struct(*(char),*(void),*(char),long))
->	O
hash_type	*(char)
,	O
p2	*(struct(*(char),*(void),*(char),long))
->	O
hash_type	*(char)
)	O
)	O
)	O
return	O
n	long
;	O
if	O
(	O
p1	*(struct(*(char),*(void),*(char),long))
->	O
pinsize	long
<	O
p2	*(struct(*(char),*(void),*(char),long))
->	O
pinsize	long
)	O
return	O
-	O
1	int
;	O
if	O
(	O
p1	*(struct(*(char),*(void),*(char),long))
->	O
pinsize	long
>	O
p2	*(struct(*(char),*(void),*(char),long))
->	O
pinsize	long
)	O
return	O
1	int
;	O
return	O
memcmp	(*(void),*(void),long)->(int)
(	O
p1	*(struct(*(char),*(void),*(char),long))
->	O
pin	*(void)
,	O
p2	*(struct(*(char),*(void),*(char),long))
->	O
pin	*(void)
,	O
p1	*(struct(*(char),*(void),*(char),long))
->	O
pinsize	long
)	O
;	O
}	O
static	O
void	O
hpkp_pin_free	(*(void))->(void)
(	O
void	O
*	O
pin	*(void)
)	O
{	O
wget_hpkp_pin	struct(*(char),*(void),*(char),long)
*	O
p	*(char)
=	O
pin	*(void)
;	O
if	O
(	O
p	*(char)
)	O
{	O
xfree	O
(	O
p	*(char)
->	O
hash_type	*(char)
)	O
;	O
xfree	O
(	O
p	*(char)
->	O
pin	*(void)
)	O
;	O
xfree	O
(	O
p	*(char)
->	O
pin_b64	*(char)
)	O
;	O
xfree	O
(	O
p	*(char)
)	O
;	O
}	O
}	O
void	O
wget_hpkp_pin_add	(*(struct),*(char),*(char))->(void)
(	O
wget_hpkp	struct
*	O
hpkp	*(*(struct))
,	O
const	O
char	O
*	O
pin_type	*(char)
,	O
const	O
char	O
*	O
pin_b64	*(char)
)	O
{	O
wget_hpkp_pin	struct(*(char),*(void),*(char),long)
*	O
pin	*(void)
=	O
wget_calloc	(long,long)->(*(void))
(	O
1	int
,	O
sizeof	O
(	O
wget_hpkp_pin	struct(*(char),*(void),*(char),long)
)	O
)	O
;	O
size_t	long
len_b64	long
=	O
strlen	(*(char))->(long)
(	O
pin_b64	*(char)
)	O
;	O
pin	*(void)
->	O
hash_type	*(char)
=	O
wget_strdup	(*(char))->(*(char))
(	O
pin_type	*(char)
)	O
;	O
pin	*(void)
->	O
pin_b64	*(char)
=	O
wget_strdup	(*(char))->(*(char))
(	O
pin_b64	*(char)
)	O
;	O
pin	*(void)
->	O
pin	*(void)
=	O
(	O
unsigned	O
char	O
*	O
)	O
wget_base64_decode_alloc	(*(char),long,*(long))->(*(char))
(	O
pin_b64	*(char)
,	O
len_b64	long
,	O
&	O
pin	*(void)
->	O
pinsize	long
)	O
;	O
if	O
(	O
!	O
hpkp	*(*(struct))
->	O
pins	*(*(void))
)	O
{	O
hpkp	*(*(struct))
->	O
pins	*(*(void))
=	O
wget_vector_create	(int,*((*(void),*(void))->(int)))->(*(struct))
(	O
5	int
,	O
(	O
wget_vector_compare_fn	(*(void),*(void))->(int)
*	O
)	O
compare_pin	(*(struct(*(char),*(void),*(char),long)),*(struct(*(char),*(void),*(char),long)))->(int)
)	O
;	O
wget_vector_set_destructor	(*(struct),*((*(void))->(void)))->(void)
(	O
hpkp	*(*(struct))
->	O
pins	*(*(void))
,	O
hpkp_pin_free	(*(void))->(void)
)	O
;	O
}	O
wget_vector_add	(*(struct),*(void))->(int)
(	O
hpkp	*(*(struct))
->	O
pins	*(*(void))
,	O
pin	*(void)
)	O
;	O
}	O
void	O
wget_hpkp_free	(*(struct))->(void)
(	O
wget_hpkp	struct
*	O
hpkp	*(*(struct))
)	O
{	O
if	O
(	O
hpkp	*(*(struct))
)	O
{	O
xfree	O
(	O
hpkp	*(*(struct))
->	O
host	*(char)
)	O
;	O
wget_vector_free	(*(*(struct)))->(void)
(	O
&	O
hpkp	*(*(struct))
->	O
pins	*(*(void))
)	O
;	O
xfree	O
(	O
hpkp	*(*(struct))
)	O
;	O
}	O
}	O
wget_hpkp	struct
*	O
wget_hpkp_new	()->(*(struct))
(	O
void	O
)	O
{	O
wget_hpkp	struct
*	O
hpkp	*(*(struct))
=	O
wget_calloc	(long,long)->(*(void))
(	O
1	int
,	O
sizeof	O
(	O
wget_hpkp	struct
)	O
)	O
;	O
hpkp	*(*(struct))
->	O
created	long
=	O
time	struct(long,long)
(	O
NULL	O
)	O
;	O
return	O
hpkp	*(*(struct))
;	O
}	O
void	O
wget_hpkp_set_host	(*(struct),*(char))->(void)
(	O
wget_hpkp	struct
*	O
hpkp	*(*(struct))
,	O
const	O
char	O
*	O
host	*(char)
)	O
{	O
xfree	O
(	O
hpkp	*(*(struct))
->	O
host	*(char)
)	O
;	O
hpkp	*(*(struct))
->	O
host	*(char)
=	O
wget_strdup	(*(char))->(*(char))
(	O
host	*(char)
)	O
;	O
}	O
void	O
wget_hpkp_set_maxage	(*(struct),long)->(void)
(	O
wget_hpkp	struct
*	O
hpkp	*(*(struct))
,	O
time_t	long
maxage	long
)	O
{	O
int64_t	long
now	long
;	O
if	O
(	O
maxage	long
<=	O
0	int
||	O
maxage	long
>=	O
INT64_MAX	O
/	O
2	int
||	O
(	O
now	long
=	O
time	struct(long,long)
(	O
NULL	O
)	O
)	O
<	O
0	int
||	O
now	long
>=	O
INT64_MAX	O
/	O
2	int
)	O
{	O
hpkp	*(*(struct))
->	O
maxage	long
=	O
0	int
;	O
hpkp	*(*(struct))
->	O
expires	long
=	O
0	int
;	O
}	O
else	O
{	O
hpkp	*(*(struct))
->	O
maxage	long
=	O
maxage	long
;	O
hpkp	*(*(struct))
->	O
expires	long
=	O
now	long
+	O
maxage	long
;	O
}	O
}	O
void	O
wget_hpkp_set_include_subdomains	(*(struct),bool)->(void)
(	O
wget_hpkp	struct
*	O
hpkp	*(*(struct))
,	O
bool	bool
include_subdomains	int
)	O
{	O
hpkp	*(*(struct))
->	O
include_subdomains	int
=	O
include_subdomains	int
;	O
}	O
int	O
wget_hpkp_get_n_pins	(*(struct))->(int)
(	O
wget_hpkp	struct
*	O
hpkp	*(*(struct))
)	O
{	O
return	O
wget_vector_size	(*(struct))->(int)
(	O
hpkp	*(*(struct))
->	O
pins	*(*(void))
)	O
;	O
}	O
void	O
wget_hpkp_get_pins_b64	(*(struct),*(*(char)),*(*(char)))->(void)
(	O
wget_hpkp	struct
*	O
hpkp	*(*(struct))
,	O
const	O
char	O
*	O
*	O
pin_types	*(*(char))
,	O
const	O
char	O
*	O
*	O
pins_b64	*(*(char))
)	O
{	O
int	O
i	int
,	O
n_pins	int
;	O
n_pins	int
=	O
wget_vector_size	(*(struct))->(int)
(	O
hpkp	*(*(struct))
->	O
pins	*(*(void))
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
n_pins	int
;	O
i	int
++	O
)	O
{	O
wget_hpkp_pin	struct(*(char),*(void),*(char),long)
*	O
pin	*(void)
=	O
(	O
wget_hpkp_pin	struct(*(char),*(void),*(char),long)
*	O
)	O
wget_vector_get	(*(struct),int)->(*(void))
(	O
hpkp	*(*(struct))
->	O
pins	*(*(void))
,	O
i	int
)	O
;	O
pin_types	*(*(char))
[	O
i	int
]	O
=	O
pin	*(void)
->	O
hash_type	*(char)
;	O
pins_b64	*(*(char))
[	O
i	int
]	O
=	O
pin	*(void)
->	O
pin_b64	*(char)
;	O
}	O
}	O
void	O
wget_hpkp_get_pins	(*(struct),*(*(char)),*(long),*(*(void)))->(void)
(	O
wget_hpkp	struct
*	O
hpkp	*(*(struct))
,	O
const	O
char	O
*	O
*	O
pin_types	*(*(char))
,	O
size_t	long
*	O
sizes	*(long)
,	O
const	O
void	O
*	O
*	O
pins	*(*(void))
)	O
{	O
int	O
i	int
,	O
n_pins	int
;	O
n_pins	int
=	O
wget_vector_size	(*(struct))->(int)
(	O
hpkp	*(*(struct))
->	O
pins	*(*(void))
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
n_pins	int
;	O
i	int
++	O
)	O
{	O
wget_hpkp_pin	struct(*(char),*(void),*(char),long)
*	O
pin	*(void)
=	O
(	O
wget_hpkp_pin	struct(*(char),*(void),*(char),long)
*	O
)	O
wget_vector_get	(*(struct),int)->(*(void))
(	O
hpkp	*(*(struct))
->	O
pins	*(*(void))
,	O
i	int
)	O
;	O
pin_types	*(*(char))
[	O
i	int
]	O
=	O
pin	*(void)
->	O
hash_type	*(char)
;	O
sizes	*(long)
[	O
i	int
]	O
=	O
pin	*(void)
->	O
pinsize	long
;	O
pins	*(*(void))
[	O
i	int
]	O
=	O
pin	*(void)
->	O
pin	*(void)
;	O
}	O
}	O
const	O
char	O
*	O
wget_hpkp_get_host	(*(struct))->(*(char))
(	O
wget_hpkp	struct
*	O
hpkp	*(*(struct))
)	O
{	O
return	O
hpkp	*(*(struct))
->	O
host	*(char)
;	O
}	O
time_t	long
wget_hpkp_get_maxage	(*(struct))->(long)
(	O
wget_hpkp	struct
*	O
hpkp	*(*(struct))
)	O
{	O
return	O
hpkp	*(*(struct))
->	O
maxage	long
;	O
}	O
bool	bool
wget_hpkp_get_include_subdomains	(*(struct))->(bool)
(	O
wget_hpkp	struct
*	O
hpkp	*(*(struct))
)	O
{	O
return	O
hpkp	*(*(struct))
->	O
include_subdomains	int
;	O
}	O
