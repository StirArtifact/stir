struct	O
header_closure	struct(*(struct),int,*(char),*(*(char)),long,long)
{	O
mu_header_t	*(struct)
header	*(struct)
;	O
int	O
index	(*(char),int)->(*(char))
;	O
char	O
*	O
delim	*(char)
;	O
char	O
*	O
*	O
valv	*(*(char))
;	O
size_t	long
valc	long
;	O
size_t	long
vali	long
;	O
}	O
;	O
static	O
void	O
cleanup	(*(struct(*(struct),int,*(char),*(*(char)),long,long)))->(void)
(	O
struct	O
header_closure	struct(*(struct),int,*(char),*(*(char)),long,long)
*	O
hc	*(struct(*(struct),int,*(char),*(*(char)),long,long))
)	O
{	O
mu_argcv_free	(long,*(*(char)))->(void)
(	O
hc	*(struct(*(struct),int,*(char),*(*(char)),long,long))
->	O
valc	long
,	O
hc	*(struct(*(struct),int,*(char),*(*(char)),long,long))
->	O
valv	*(*(char))
)	O
;	O
hc	*(struct(*(struct),int,*(char),*(*(char)),long,long))
->	O
valv	*(*(char))
=	O
NULL	O
;	O
hc	*(struct(*(struct),int,*(char),*(*(char)),long,long))
->	O
valc	long
=	O
hc	*(struct(*(struct),int,*(char),*(*(char)),long,long))
->	O
vali	long
=	O
0	int
;	O
}	O
static	O
int	O
retrieve_next_header	(*(struct(*(struct),int,*(char),*(*(char)),long,long)),*(char),*(*(char)))->(int)
(	O
struct	O
header_closure	struct(*(struct),int,*(char),*(*(char)),long,long)
*	O
hc	*(struct(*(struct),int,*(char),*(*(char)),long,long))
,	O
char	O
*	O
name	*(char)
,	O
char	O
*	O
*	O
pval	*(void)
)	O
{	O
const	O
char	O
*	O
buf	*(char)
;	O
cleanup	(*(struct(*(struct),int,*(char),*(*(char)),long,long)))->(void)
(	O
hc	*(struct(*(struct),int,*(char),*(*(char)),long,long))
)	O
;	O
while	O
(	O
!	O
mu_header_sget_field_name	(*(struct),long,*(*(char)))->(int)
(	O
hc	*(struct(*(struct),int,*(char),*(*(char)),long,long))
->	O
header	*(struct)
,	O
hc	*(struct(*(struct),int,*(char),*(*(char)),long,long))
->	O
index	(*(char),int)->(*(char))
,	O
&	O
buf	*(char)
)	O
)	O
{	O
int	O
i	long
=	O
hc	*(struct(*(struct),int,*(char),*(*(char)),long,long))
->	O
index	(*(char),int)->(*(char))
++	O
;	O
if	O
(	O
mu_c_strcasecmp	(*(char),*(char))->(int)
(	O
buf	*(char)
,	O
name	*(char)
)	O
==	O
0	int
)	O
{	O
const	O
char	O
*	O
value	*(void)
;	O
struct	O
mu_wordsplit	struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct(long,*(*`),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*`),*(*`),long,long,*(*`),long,*(*`),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct`),*(struct`),array(char),int)))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*(char)),*(char),long,*(void))->(int)),*(void),*((*(*(char)),*(char),long,*(*(char)),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
;	O
if	O
(	O
mu_header_sget_field_value	(*(struct),long,*(*(char)))->(int)
(	O
hc	*(struct(*(struct),int,*(char),*(*(char)),long,long))
->	O
header	*(struct)
,	O
i	long
,	O
&	O
value	*(void)
)	O
)	O
return	O
1	int
;	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
.	O
ws_delim	*(char)
=	O
hc	*(struct(*(struct),int,*(char),*(*(char)),long,long))
->	O
delim	*(char)
;	O
if	O
(	O
mu_wordsplit	struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct(long,*(*`),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*`),*(*`),long,long,*(*`),long,*(*`),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct`),*(struct`),array(char),int)))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*(char)),*(char),long,*(void))->(int)),*(void),*((*(*(char)),*(char),long,*(*(char)),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)
(	O
value	*(void)
,	O
&	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
,	O
MU_WRDSF_DELIM	O
|	O
MU_WRDSF_SQUEEZE_DELIMS	O
|	O
MU_WRDSF_WS	O
|	O
MU_WRDSF_NOVAR	O
|	O
MU_WRDSF_NOCMD	O
)	O
)	O
{	O
mu_error	(*(char))->(int)
(	O
_	O
(	O
"cannot split line `%s': %s"	*(char)
)	O
,	O
value	*(void)
,	O
mu_wordsplit_strerror	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)))->(*(char))
(	O
&	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
)	O
)	O
;	O
return	O
1	int
;	O
}	O
if	O
(	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
.	O
ws_wordc	long
==	O
0	int
)	O
{	O
cleanup	(*(struct(*(struct),int,*(char),*(*(char)),long,long)))->(void)
(	O
hc	*(struct(*(struct),int,*(char),*(*(char)),long,long))
)	O
;	O
mu_wordsplit_free	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)))->(void)
(	O
&	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
)	O
;	O
return	O
1	int
;	O
}	O
mu_wordsplit_get_words	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)),*(long),*(*(*(char))))->(int)
(	O
&	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
,	O
&	O
hc	*(struct(*(struct),int,*(char),*(*(char)),long,long))
->	O
valc	long
,	O
&	O
hc	*(struct(*(struct),int,*(char),*(*(char)),long,long))
->	O
valv	*(*(char))
)	O
;	O
mu_wordsplit_free	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)))->(void)
(	O
&	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
)	O
;	O
hc	*(struct(*(struct),int,*(char),*(*(char)),long,long))
->	O
vali	long
=	O
0	int
;	O
*	O
pval	*(void)
=	O
hc	*(struct(*(struct),int,*(char),*(*(char)),long,long))
->	O
valv	*(*(char))
[	O
hc	*(struct(*(struct),int,*(char),*(*(char)),long,long))
->	O
vali	long
++	O
]	O
;	O
return	O
0	int
;	O
}	O
}	O
return	O
1	int
;	O
}	O
static	O
int	O
list_retrieve_header	(*(void),*(void),long,*(*(char)))->(int)
(	O
void	O
*	O
item	*(void)
,	O
void	O
*	O
data	*(void)
,	O
size_t	long
idx	long
,	O
char	O
*	O
*	O
pval	*(void)
)	O
{	O
struct	O
header_closure	struct(*(struct),int,*(char),*(*(char)),long,long)
*	O
hc	*(struct(*(struct),int,*(char),*(*(char)),long,long))
=	O
data	*(void)
;	O
char	O
*	O
p	*(char)
;	O
if	O
(	O
idx	long
==	O
0	int
)	O
hc	*(struct(*(struct),int,*(char),*(*(char)),long,long))
->	O
index	(*(char),int)->(*(char))
=	O
1	int
;	O
while	O
(	O
1	int
)	O
{	O
if	O
(	O
!	O
hc	*(struct(*(struct),int,*(char),*(*(char)),long,long))
->	O
valv	*(*(char))
)	O
{	O
if	O
(	O
retrieve_next_header	(*(struct(*(struct),int,*(char),*(*(char)),long,long)),*(char),*(*(char)))->(int)
(	O
hc	*(struct(*(struct),int,*(char),*(*(char)),long,long))
,	O
(	O
char	O
*	O
)	O
item	*(void)
,	O
&	O
p	*(char)
)	O
)	O
return	O
MU_ERR_NOENT	O
;	O
}	O
else	O
if	O
(	O
hc	*(struct(*(struct),int,*(char),*(*(char)),long,long))
->	O
vali	long
==	O
hc	*(struct(*(struct),int,*(char),*(*(char)),long,long))
->	O
valc	long
)	O
{	O
cleanup	(*(struct(*(struct),int,*(char),*(*(char)),long,long)))->(void)
(	O
hc	*(struct(*(struct),int,*(char),*(*(char)),long,long))
)	O
;	O
continue	O
;	O
}	O
else	O
p	*(char)
=	O
hc	*(struct(*(struct),int,*(char),*(*(char)),long,long))
->	O
valv	*(*(char))
[	O
hc	*(struct(*(struct),int,*(char),*(*(char)),long,long))
->	O
vali	long
++	O
]	O
;	O
if	O
(	O
(	O
*	O
pval	*(void)
=	O
strdup	(*(char))->(*(char))
(	O
p	*(char)
)	O
)	O
==	O
NULL	O
)	O
return	O
errno	O
;	O
return	O
0	int
;	O
}	O
return	O
MU_ERR_NOENT	O
;	O
}	O
static	O
int	O
list_test	(*(struct))->(int)
(	O
mu_sieve_machine_t	*(struct)
mach	*(struct)
)	O
{	O
mu_sieve_value_t	struct(enum(int,int,int,int,int),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(char),long,struct(long,long)))
*	O
h	*(struct(enum(int,int,int,int,int),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(char),long,struct(long,long))))
,	O
*	O
v	array(*(char))
;	O
struct	O
header_closure	struct(*(struct),int,*(char),*(*(char)),long,long)
clos	*(void)
;	O
int	O
result	*(struct)
;	O
memset	(*(void),int,long)->(*(void))
(	O
&	O
clos	*(void)
,	O
0	int
,	O
sizeof	O
clos	*(void)
)	O
;	O
if	O
(	O
!	O
mu_sieve_get_tag	(*(struct),*(char),enum(int,int,int,int,int),*(void))->(int)
(	O
mach	*(struct)
,	O
"delim"	*(char)
,	O
SVT_STRING	int
,	O
&	O
clos	*(void)
.	O
delim	*(char)
)	O
)	O
clos	*(void)
.	O
delim	*(char)
=	O
","	*(char)
;	O
h	*(struct(enum(int,int,int,int,int),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(char),long,struct(long,long))))
=	O
mu_sieve_get_arg_untyped	(*(struct),long)->(*(struct(enum(int,int,int,int,int),*(char),struct(struct(*`,int,int),struct(*`,int,int)),union(*(char),long,struct(long,long)))))
(	O
mach	*(struct)
,	O
0	int
)	O
;	O
v	array(*(char))
=	O
mu_sieve_get_arg_untyped	(*(struct),long)->(*(struct(enum(int,int,int,int,int),*(char),struct(struct(*`,int,int),struct(*`,int,int)),union(*(char),long,struct(long,long)))))
(	O
mach	*(struct)
,	O
1	int
)	O
;	O
mu_message_get_header	(*(struct),*(*(struct)))->(int)
(	O
mu_sieve_get_message	(*(struct))->(*(struct))
(	O
mach	*(struct)
)	O
,	O
&	O
clos	*(void)
.	O
header	*(struct)
)	O
;	O
result	*(struct)
=	O
mu_sieve_vlist_compare	(*(struct),*(struct(enum(int,int,int,int,int),*(char),struct(struct(*`,int,int),struct(*`,int,int)),union(*(char),long,struct(long,long)))),*(struct(enum(int,int,int,int,int),*(char),struct(struct(*`,int,int),struct(*`,int,int)),union(*(char),long,struct(long,long)))),*((*(void),*(void),long,*(*(char)))->(int)),*((*(void),*(void),*(void),*(*(void)))->(int)),*(void))->(int)
(	O
mach	*(struct)
,	O
h	*(struct(enum(int,int,int,int,int),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(char),long,struct(long,long))))
,	O
v	array(*(char))
,	O
list_retrieve_header	(*(void),*(void),long,*(*(char)))->(int)
,	O
NULL	O
,	O
&	O
clos	*(void)
)	O
;	O
cleanup	(*(struct(*(struct),int,*(char),*(*(char)),long,long)))->(void)
(	O
&	O
clos	*(void)
)	O
;	O
return	O
result	*(struct)
;	O
}	O
static	O
mu_sieve_data_type	enum(int,int,int,int,int)
list_req_args	array(enum(int,int,int,int,int))
[	O
]	O
=	O
{	O
SVT_STRING_LIST	int
,	O
SVT_STRING_LIST	int
,	O
SVT_VOID	int
}	O
;	O
static	O
mu_sieve_tag_def_t	struct(*(char),enum(int,int,int,int,int))
match_part_tags	array(struct(*(char),enum(int,int,int,int,int)))
[	O
]	O
=	O
{	O
{	O
"is"	*(char)
,	O
SVT_VOID	int
}	O
,	O
{	O
"contains"	*(char)
,	O
SVT_VOID	int
}	O
,	O
{	O
"matches"	*(char)
,	O
SVT_VOID	int
}	O
,	O
{	O
"regex"	*(char)
,	O
SVT_VOID	int
}	O
,	O
{	O
"count"	*(char)
,	O
SVT_STRING	int
}	O
,	O
{	O
"value"	*(char)
,	O
SVT_STRING	int
}	O
,	O
{	O
"comparator"	*(char)
,	O
SVT_STRING	int
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
static	O
mu_sieve_tag_def_t	struct(*(char),enum(int,int,int,int,int))
delim_part_tags	array(struct(*(char),enum(int,int,int,int,int)))
[	O
]	O
=	O
{	O
{	O
"delim"	*(char)
,	O
SVT_STRING	int
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
static	O
mu_sieve_tag_group_t	struct(*(struct(*(char),enum(int,int,int,int,int))),*((*(struct))->(int)))
list_tag_groups	array(struct(*(struct(*(char),enum(int,int,int,int,int))),*((*(struct))->(int))))
[	O
]	O
=	O
{	O
{	O
match_part_tags	array(struct(*(char),enum(int,int,int,int,int)))
,	O
mu_sieve_match_part_checker	(*(struct))->(int)
}	O
,	O
{	O
delim_part_tags	array(struct(*(char),enum(int,int,int,int,int)))
,	O
NULL	O
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
int	O
SIEVE_EXPORT	O
(	O
list	*(struct)
,	O
init	O
)	O
(	O
mu_sieve_machine_t	*(struct)
mach	*(struct)
)	O
{	O
mu_sieve_register_test	(*(struct),*(char),*((*(struct))->(int)),*(enum(int,int,int,int,int)),*(struct(*(struct(*`,enum(int,int,int,int,int))),*((*`)->(int)))),int)->(void)
(	O
mach	*(struct)
,	O
"list"	*(char)
,	O
list_test	(*(struct))->(int)
,	O
list_req_args	array(enum(int,int,int,int,int))
,	O
list_tag_groups	array(struct(*(struct(*(char),enum(int,int,int,int,int))),*((*(struct))->(int))))
,	O
1	int
)	O
;	O
return	O
0	int
;	O
}	O
