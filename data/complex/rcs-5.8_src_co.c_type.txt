struct	O
top	struct(*(struct(*(char),*(char),*(char),*(()->(void)))),struct(*(char),bool,bool,bool,bool,bool,bool,bool,int,bool,int,int,bool,bool,bool,int,*(char),struct(bool,long),*(char),long,bool,bool,*(char),long,*(struct(*(char),enum(int,int,int))),*(struct),*(struct),*(struct)),struct(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),struct(bool,*(char),*(char),*(char),*(char),*(char))),struct(*(char),int,struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(struct(*(char),*(char),long,*(struct),long,*(struct),long,*(struct),bool,*(struct),*(struct),int,long,*(struct),*(struct),long,*(struct),*(struct))),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)),struct(*(char),long)),struct(*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char),bool))
*	O
top	struct(*(struct(*(char),*(char),*(char),*(()->(void)))),struct(*(char),bool,bool,bool,bool,bool,bool,bool,int,bool,int,int,bool,bool,bool,int,*(char),struct(bool,long),*(char),long,bool,bool,*(char),long,*(struct(*(char),enum(int,int,int))),*(struct),*(struct),*(struct)),struct(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),struct(bool,*(char),*(char),*(char),*(char),*(char))),struct(*(char),int,struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(struct(*(char),*(char),long,*(struct),long,*(struct),long,*(struct),bool,*(struct),*(struct),int,long,*(struct),*(struct),long,*(struct),*(struct))),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)),struct(*(char),long)),struct(*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char),bool))
;	O
static	O
char	O
const	O
quietarg	array(char)
[	O
]	O
=	O
"-q"	*(char)
;	O
static	O
char	O
const	O
*	O
expandarg	*(char)
,	O
*	O
suffixarg	*(char)
,	O
*	O
versionarg	*(char)
,	O
*	O
zonearg	*(char)
;	O
static	O
char	O
const	O
*	O
*	O
joinlist	*(*(char))
;	O
static	O
FILE	struct
*	O
neworkptr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
;	O
static	O
int	O
exitstatus	int
;	O
static	O
bool	bool
forceflag	bool
;	O
static	O
int	O
lastjoin	int
;	O
struct	O
jstuff	struct(*(struct(*(char),*(struct),*(void),long)),struct(*(void),*(struct(*(void),*(struct(*`,*`))))),*(struct(*(void),*(struct(*(void),*(struct`))))),*(struct(*(char),*(char))))
{	O
struct	O
divvy	struct(*(char),*(struct),*(void),long)
*	O
jstuff	struct(*(struct(*(char),*(struct),*(void),long)),struct(*(void),*(struct(*(void),*(struct(*`,*`))))),*(struct(*(void),*(struct(*(void),*(struct`))))),*(struct(*(char),*(char))))
;	O
struct	O
link	struct(*(void),*(struct(*(void),*(struct(*(void),*(struct`))))))
head	*(char)
,	O
*	O
tp	*(struct(*(void),*(struct(*(void),*(struct`)))))
;	O
struct	O
symdef	struct(*(char),*(char))
*	O
merge	(bool,*(char),array(struct(*(char),*(char))))->(int)
;	O
}	O
;	O
static	O
struct	O
jstuff	struct(*(struct(*(char),*(struct),*(void),long)),struct(*(void),*(struct(*(void),*(struct(*`,*`))))),*(struct(*(void),*(struct(*(void),*(struct`))))),*(struct(*(char),*(char))))
jstuff	struct(*(struct(*(char),*(struct),*(void),long)),struct(*(void),*(struct(*(void),*(struct(*`,*`))))),*(struct(*(void),*(struct(*(void),*(struct`))))),*(struct(*(char),*(char))))
;	O
static	O
int	O
lockflag	bool
;	O
static	O
bool	bool
mtimeflag	bool
;	O
static	O
struct	O
delta	struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long)),bool,long)
*	O
targetdelta	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
;	O
static	O
struct	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
workstat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
;	O
static	O
void	O
cleanup	()->(void)
(	O
void	O
)	O
{	O
FILE	struct
*	O
mstdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
=	O
MANI	O
(	O
standard_output	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
if	O
(	O
FLOW	O
(	O
erroneousp	bool
)	O
)	O
exitstatus	int
=	O
EXIT_FAILURE	int
;	O
fro_zclose	(*(*(struct(int,long,enum(int,int,int),*(char),*(char),*(char),*((*`)->(void)),*(struct`),long))))->(void)
(	O
&	O
FLOW	O
(	O
from	*(struct)
)	O
)	O
;	O
ORCSclose	()->(void)
(	O
)	O
;	O
if	O
(	O
FLOW	O
(	O
from	*(struct)
)	O
&&	O
STDIO_P	O
(	O
FLOW	O
(	O
from	*(struct)
)	O
)	O
&&	O
FLOW	O
(	O
res	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
&&	O
FLOW	O
(	O
res	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
!=	O
mstdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
Ozclose	(*(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char)))))->(void)
(	O
&	O
FLOW	O
(	O
res	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
)	O
;	O
if	O
(	O
neworkptr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
!=	O
mstdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
Ozclose	(*(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char)))))->(void)
(	O
&	O
neworkptr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
dirtempunlink	()->(void)
(	O
)	O
;	O
}	O
static	O
exiting	O
void	O
exiterr	*(()->(void))
(	O
void	O
)	O
{	O
ORCSerror	()->(void)
(	O
)	O
;	O
dirtempunlink	()->(void)
(	O
)	O
;	O
tempunlink	()->(void)
(	O
)	O
;	O
exit_failurefully	()->(void)
(	O
)	O
;	O
}	O
static	O
bool	bool
rmworkfile	()->(bool)
(	O
void	O
)	O
{	O
if	O
(	O
workstat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_mode	int
&	O
(	O
S_IWUSR	O
|	O
S_IWGRP	O
|	O
S_IWOTH	O
)	O
&&	O
!	O
forceflag	bool
)	O
{	O
char	O
const	O
*	O
mani_filename	*(char)
=	O
MANI	O
(	O
filename	*(char)
)	O
;	O
if	O
(	O
!	O
yesorno	(bool,*(char))->(bool)
(	O
false	int
,	O
"writable %s exists%s; remove it? [ny](n): "	*(char)
,	O
mani_filename	*(char)
,	O
(	O
stat_mine_p	(*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))))->(bool)
(	O
&	O
workstat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
)	O
?	O
""	*(char)
:	O
", and you do not own it"	*(char)
)	O
)	O
)	O
{	O
if	O
(	O
!	O
BE	O
(	O
quiet	bool
)	O
&&	O
ttystdin	()->(bool)
(	O
)	O
)	O
PERR	O
(	O
"checkout aborted"	*(char)
)	O
;	O
else	O
PERR	O
(	O
"writable %s exists; checkout aborted"	*(char)
,	O
mani_filename	*(char)
)	O
;	O
return	O
false	int
;	O
}	O
}	O
return	O
true	int
;	O
}	O
static	O
int	O
rmlock	(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*`,long,array(long))),*(struct(long,long,long,*`,long,array(long))),*(char),struct(*(char),long),*(struct(*`,*`)),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)))->(int)
(	O
struct	O
delta	struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long)),bool,long)
const	O
*	O
delta	struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long)),bool,long)
)	O
{	O
struct	O
link	struct(*(void),*(struct(*(void),*(struct(*(void),*(struct`))))))
box	*(struct(*(void),*(struct(*(void),*(struct`)))))
,	O
*	O
tp	*(struct(*(void),*(struct(*(void),*(struct`)))))
;	O
struct	O
rcslock	struct(*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long)))
const	O
*	O
rl	*(struct(*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long))))
;	O
box	*(struct(*(void),*(struct(*(void),*(struct`)))))
.	O
next	*(struct(*(void),*(struct(*(void),*(struct`)))))
=	O
GROK	O
(	O
locks	*(struct)
)	O
;	O
if	O
(	O
!	O
(	O
tp	*(struct(*(void),*(struct(*(void),*(struct`)))))
=	O
lock_delta_memq	O
(	O
&	O
box	*(struct(*(void),*(struct(*(void),*(struct`)))))
,	O
delta	struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long)),bool,long)
)	O
)	O
)	O
return	O
0	int
;	O
rl	*(struct(*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long))))
=	O
tp	*(struct(*(void),*(struct(*(void),*(struct`)))))
->	O
next	*(struct(*(void),*(struct(*(void),*(struct`)))))
->	O
entry	*(void)
;	O
if	O
(	O
!	O
caller_login_p	(*(char))->(bool)
(	O
rl	*(struct(*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long))))
->	O
login	*(char)
)	O
)	O
{	O
RERR	O
(	O
"revision %s locked by %s; use co -r or rcs -u"	*(char)
,	O
delta	struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long)),bool,long)
->	O
num	*(char)
,	O
rl	*(struct(*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long))))
->	O
login	*(char)
)	O
;	O
return	O
-	O
1	int
;	O
}	O
lock_drop	(*(struct(*(void),*(struct(*`,*`)))),*(struct(*(void),*(struct(*`,*`)))))->(void)
(	O
&	O
box	*(struct(*(void),*(struct(*(void),*(struct`)))))
,	O
tp	*(struct(*(void),*(struct(*(void),*(struct`)))))
)	O
;	O
return	O
1	int
;	O
}	O
static	O
void	O
jpush	(*(char))->(void)
(	O
char	O
const	O
*	O
rev	*(char)
)	O
{	O
jstuff	struct(*(struct(*(char),*(struct),*(void),long)),struct(*(void),*(struct(*(void),*(struct(*`,*`))))),*(struct(*(void),*(struct(*(void),*(struct`))))),*(struct(*(char),*(char))))
.	O
tp	*(struct(*(void),*(struct(*(void),*(struct`)))))
=	O
extend	(*(struct(*(void),*(struct(*`,*`)))),*(void),*(struct(*(char),*(struct),*(void),long)))->(*(struct(*(void),*(struct(*`,*`)))))
(	O
jstuff	struct(*(struct(*(char),*(struct),*(void),long)),struct(*(void),*(struct(*(void),*(struct(*`,*`))))),*(struct(*(void),*(struct(*(void),*(struct`))))),*(struct(*(char),*(char))))
.	O
tp	*(struct(*(void),*(struct(*(void),*(struct`)))))
,	O
rev	*(char)
,	O
jstuff	struct(*(struct(*(char),*(struct),*(void),long)),struct(*(void),*(struct(*(void),*(struct(*`,*`))))),*(struct(*(void),*(struct(*(void),*(struct`))))),*(struct(*(char),*(char))))
.	O
jstuff	struct(*(struct(*(char),*(struct),*(void),long)),struct(*(void),*(struct(*(void),*(struct(*`,*`))))),*(struct(*(void),*(struct(*(void),*(struct`))))),*(struct(*(char),*(char))))
)	O
;	O
lastjoin	int
++	O
;	O
}	O
static	O
char	O
*	O
addjoin	(*(char))->(*(char))
(	O
char	O
*	O
joinrev	*(char)
)	O
{	O
register	O
char	O
*	O
j	*(char)
;	O
register	O
struct	O
delta	struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long)),bool,long)
*	O
d	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
;	O
char	O
terminator	char
;	O
struct	O
cbuf	struct(*(char),long)
numrev	struct(*(char),long)
;	O
j	*(char)
=	O
joinrev	*(char)
;	O
for	O
(	O
;	O
;	O
)	O
{	O
switch	O
(	O
*	O
j	*(char)
++	O
)	O
{	O
default	O
:	O
continue	O
;	O
case	O
0	int
:	O
case	O
' '	O
:	O
case	O
'\t'	O
:	O
case	O
'\n'	O
:	O
case	O
':'	O
:	O
case	O
','	O
:	O
case	O
';'	O
:	O
break	O
;	O
}	O
break	O
;	O
}	O
terminator	char
=	O
*	O
--	O
j	*(char)
;	O
*	O
j	*(char)
=	O
'\0'	O
;	O
d	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
=	O
NULL	O
;	O
if	O
(	O
fully_numeric_no_k	O
(	O
&	O
numrev	struct(*(char),long)
,	O
joinrev	*(char)
)	O
)	O
d	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
=	O
delta_from_ref	(*(char))->(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)))
(	O
numrev	struct(*(char),long)
.	O
string	*(char)
)	O
;	O
*	O
j	*(char)
=	O
terminator	char
;	O
if	O
(	O
d	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
)	O
{	O
jpush	(*(char))->(void)
(	O
d	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
num	*(char)
)	O
;	O
return	O
j	*(char)
;	O
}	O
return	O
NULL	O
;	O
}	O
static	O
char	O
const	O
*	O
getancestor	(*(char),*(char))->(*(char))
(	O
char	O
const	O
*	O
r1	*(char)
,	O
char	O
const	O
*	O
r2	*(char)
)	O
{	O
char	O
const	O
*	O
t1	*(char)
,	O
*	O
t2	*(char)
;	O
int	O
l1	int
,	O
l2	int
,	O
l3	int
;	O
char	O
const	O
*	O
r	*(struct(*(char),*(char),long,*(struct),long,*(struct),long,*(struct),bool,*(struct),*(struct),int,long,*(struct),*(struct),long,*(struct),*(struct)))
;	O
l1	int
=	O
countnumflds	(*(char))->(int)
(	O
r1	*(char)
)	O
;	O
l2	int
=	O
countnumflds	(*(char))->(int)
(	O
r2	*(char)
)	O
;	O
if	O
(	O
(	O
2	int
<	O
l1	int
||	O
2	int
<	O
l2	int
)	O
&&	O
!	O
NUM_EQ	O
(	O
r1	*(char)
,	O
r2	*(char)
)	O
)	O
{	O
l3	int
=	O
0	int
;	O
while	O
(	O
NUMF_EQ	O
(	O
1	int
+	O
l3	int
,	O
r1	*(char)
,	O
r2	*(char)
)	O
&&	O
NUMF_EQ	O
(	O
2	int
+	O
l3	int
,	O
r1	*(char)
,	O
r2	*(char)
)	O
)	O
l3	int
+=	O
2	int
;	O
if	O
(	O
l3	int
==	O
0	int
)	O
{	O
t1	*(char)
=	O
TAKE	O
(	O
l1	int
>	O
2	int
?	O
2	int
:	O
l1	int
,	O
r1	*(char)
)	O
;	O
t2	*(char)
=	O
TAKE	O
(	O
l2	int
>	O
2	int
?	O
2	int
:	O
l2	int
,	O
r2	*(char)
)	O
;	O
r	*(struct(*(char),*(char),long,*(struct),long,*(struct),long,*(struct),bool,*(struct),*(struct),int,long,*(struct),*(struct),long,*(struct),*(struct)))
=	O
NUM_LT	O
(	O
t1	*(char)
,	O
t2	*(char)
)	O
?	O
t1	*(char)
:	O
t2	*(char)
;	O
if	O
(	O
!	O
NUM_EQ	O
(	O
r	*(struct(*(char),*(char),long,*(struct),long,*(struct),long,*(struct),bool,*(struct),*(struct),int,long,*(struct),*(struct),long,*(struct),*(struct)))
,	O
r1	*(char)
)	O
&&	O
!	O
NUM_EQ	O
(	O
r	*(struct(*(char),*(char),long,*(struct),long,*(struct),long,*(struct),bool,*(struct),*(struct),int,long,*(struct),*(struct),long,*(struct),*(struct)))
,	O
r2	*(char)
)	O
)	O
return	O
str_save	(*(char))->(*(char))
(	O
r	*(struct(*(char),*(char),long,*(struct),long,*(struct),long,*(struct),bool,*(struct),*(struct),int,long,*(struct),*(struct),long,*(struct),*(struct)))
)	O
;	O
}	O
else	O
if	O
(	O
!	O
NUMF_EQ	O
(	O
1	int
+	O
l3	int
,	O
r1	*(char)
,	O
r2	*(char)
)	O
)	O
return	O
str_save	(*(char))->(*(char))
(	O
TAKE	O
(	O
l3	int
,	O
r1	*(char)
)	O
)	O
;	O
}	O
RERR	O
(	O
"common ancestor of %s and %s undefined"	*(char)
,	O
r1	*(char)
,	O
r2	*(char)
)	O
;	O
return	O
NULL	O
;	O
}	O
static	O
bool	bool
preparejoin	(*(char))->(bool)
(	O
register	O
char	O
*	O
j	*(char)
)	O
{	O
bool	bool
rv	bool
=	O
true	int
;	O
jstuff	struct(*(struct(*(char),*(struct),*(void),long)),struct(*(void),*(struct(*(void),*(struct(*`,*`))))),*(struct(*(void),*(struct(*(void),*(struct`))))),*(struct(*(char),*(char))))
.	O
jstuff	struct(*(struct(*(char),*(struct),*(void),long)),struct(*(void),*(struct(*(void),*(struct(*`,*`))))),*(struct(*(void),*(struct(*(void),*(struct`))))),*(struct(*(char),*(char))))
=	O
make_space	(array(char))->(*(struct(*(char),*(struct),*(void),long)))
(	O
"jstuff"	*(char)
)	O
;	O
jstuff	struct(*(struct(*(char),*(struct),*(void),long)),struct(*(void),*(struct(*(void),*(struct(*`,*`))))),*(struct(*(void),*(struct(*(void),*(struct`))))),*(struct(*(char),*(char))))
.	O
head	*(char)
.	O
next	*(struct(*(void),*(struct(*(void),*(struct`)))))
=	O
NULL	O
;	O
jstuff	struct(*(struct(*(char),*(struct),*(void),long)),struct(*(void),*(struct(*(void),*(struct(*`,*`))))),*(struct(*(void),*(struct(*(void),*(struct`))))),*(struct(*(char),*(char))))
.	O
tp	*(struct(*(void),*(struct(*(void),*(struct`)))))
=	O
&	O
jstuff	struct(*(struct(*(char),*(struct),*(void),long)),struct(*(void),*(struct(*(void),*(struct(*`,*`))))),*(struct(*(void),*(struct(*(void),*(struct`))))),*(struct(*(char),*(char))))
.	O
head	*(char)
;	O
if	O
(	O
!	O
jstuff	struct(*(struct(*(char),*(struct),*(void),long)),struct(*(void),*(struct(*(void),*(struct(*`,*`))))),*(struct(*(void),*(struct(*(void),*(struct`))))),*(struct(*(char),*(char))))
.	O
merge	(bool,*(char),array(struct(*(char),*(char))))->(int)
)	O
{	O
jstuff	struct(*(struct(*(char),*(struct),*(void),long)),struct(*(void),*(struct(*(void),*(struct(*`,*`))))),*(struct(*(void),*(struct(*(void),*(struct`))))),*(struct(*(char),*(char))))
.	O
merge	(bool,*(char),array(struct(*(char),*(char))))->(int)
=	O
ZLLOC	O
(	O
1	int
,	O
struct	O
symdef	struct(*(char),*(char))
)	O
;	O
jstuff	struct(*(struct(*(char),*(struct),*(void),long)),struct(*(void),*(struct(*(void),*(struct(*`,*`))))),*(struct(*(void),*(struct(*(void),*(struct`))))),*(struct(*(char),*(char))))
.	O
merge	(bool,*(char),array(struct(*(char),*(char))))->(int)
->	O
meaningful	*(char)
=	O
"merge"	*(char)
;	O
}	O
lastjoin	int
=	O
-	O
1	int
;	O
for	O
(	O
;	O
;	O
)	O
{	O
while	O
(	O
(	O
*	O
j	*(char)
==	O
' '	O
)	O
||	O
(	O
*	O
j	*(char)
==	O
'\t'	O
)	O
||	O
(	O
*	O
j	*(char)
==	O
','	O
)	O
)	O
j	*(char)
++	O
;	O
if	O
(	O
*	O
j	*(char)
==	O
'\0'	O
)	O
break	O
;	O
if	O
(	O
!	O
(	O
j	*(char)
=	O
addjoin	(*(char))->(*(char))
(	O
j	*(char)
)	O
)	O
)	O
return	O
false	int
;	O
while	O
(	O
(	O
*	O
j	*(char)
==	O
' '	O
)	O
||	O
(	O
*	O
j	*(char)
==	O
'\t'	O
)	O
)	O
j	*(char)
++	O
;	O
if	O
(	O
*	O
j	*(char)
==	O
':'	O
)	O
{	O
j	*(char)
++	O
;	O
while	O
(	O
(	O
*	O
j	*(char)
==	O
' '	O
)	O
||	O
(	O
*	O
j	*(char)
==	O
'\t'	O
)	O
)	O
j	*(char)
++	O
;	O
if	O
(	O
*	O
j	*(char)
!=	O
'\0'	O
)	O
{	O
if	O
(	O
!	O
(	O
j	*(char)
=	O
addjoin	(*(char))->(*(char))
(	O
j	*(char)
)	O
)	O
)	O
return	O
false	int
;	O
}	O
else	O
{	O
RFATAL	O
(	O
"join pair incomplete"	*(char)
)	O
;	O
}	O
}	O
else	O
{	O
if	O
(	O
lastjoin	int
==	O
0	int
)	O
{	O
char	O
const	O
*	O
two	*(char)
=	O
jstuff	struct(*(struct(*(char),*(struct),*(void),long)),struct(*(void),*(struct(*(void),*(struct(*`,*`))))),*(struct(*(void),*(struct(*(void),*(struct`))))),*(struct(*(char),*(char))))
.	O
tp	*(struct(*(void),*(struct(*(void),*(struct`)))))
->	O
entry	*(void)
;	O
if	O
(	O
!	O
(	O
jstuff	struct(*(struct(*(char),*(struct),*(void),long)),struct(*(void),*(struct(*(void),*(struct(*`,*`))))),*(struct(*(void),*(struct(*(void),*(struct`))))),*(struct(*(char),*(char))))
.	O
tp	*(struct(*(void),*(struct(*(void),*(struct`)))))
->	O
entry	*(void)
=	O
getancestor	(*(char),*(char))->(*(char))
(	O
targetdelta	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
num	*(char)
,	O
two	*(char)
)	O
)	O
)	O
{	O
rv	bool
=	O
false	int
;	O
goto	O
done	bool
;	O
}	O
jpush	(*(char))->(void)
(	O
two	*(char)
)	O
;	O
}	O
else	O
{	O
RFATAL	O
(	O
"join pair incomplete"	*(char)
)	O
;	O
}	O
}	O
}	O
if	O
(	O
lastjoin	int
<	O
1	int
)	O
RFATAL	O
(	O
"empty join"	*(char)
)	O
;	O
done	bool
:	O
joinlist	*(*(char))
=	O
pointer_array	(*(struct(*(char),*(struct),*(void),long)),long)->(*(void))
(	O
PLEXUS	O
,	O
1	int
+	O
lastjoin	int
)	O
;	O
jstuff	struct(*(struct(*(char),*(struct),*(void),long)),struct(*(void),*(struct(*(void),*(struct(*`,*`))))),*(struct(*(void),*(struct(*(void),*(struct`))))),*(struct(*(char),*(char))))
.	O
tp	*(struct(*(void),*(struct(*(void),*(struct`)))))
=	O
jstuff	struct(*(struct(*(char),*(struct),*(void),long)),struct(*(void),*(struct(*(void),*(struct(*`,*`))))),*(struct(*(void),*(struct(*(void),*(struct`))))),*(struct(*(char),*(char))))
.	O
head	*(char)
.	O
next	*(struct(*(void),*(struct(*(void),*(struct`)))))
;	O
for	O
(	O
int	O
i	int
=	O
0	int
;	O
i	int
<=	O
lastjoin	int
;	O
i	int
++	O
,	O
jstuff	struct(*(struct(*(char),*(struct),*(void),long)),struct(*(void),*(struct(*(void),*(struct(*`,*`))))),*(struct(*(void),*(struct(*(void),*(struct`))))),*(struct(*(char),*(char))))
.	O
tp	*(struct(*(void),*(struct(*(void),*(struct`)))))
=	O
jstuff	struct(*(struct(*(char),*(struct),*(void),long)),struct(*(void),*(struct(*(void),*(struct(*`,*`))))),*(struct(*(void),*(struct(*(void),*(struct`))))),*(struct(*(char),*(char))))
.	O
tp	*(struct(*(void),*(struct(*(void),*(struct`)))))
->	O
next	*(struct(*(void),*(struct(*(void),*(struct`)))))
)	O
joinlist	*(*(char))
[	O
i	int
]	O
=	O
jstuff	struct(*(struct(*(char),*(struct),*(void),long)),struct(*(void),*(struct(*(void),*(struct(*`,*`))))),*(struct(*(void),*(struct(*(void),*(struct`))))),*(struct(*(char),*(char))))
.	O
tp	*(struct(*(void),*(struct(*(void),*(struct`)))))
->	O
entry	*(void)
;	O
close_space	(*(struct(*(char),*(struct),*(void),long)))->(void)
(	O
jstuff	struct(*(struct(*(char),*(struct),*(void),long)),struct(*(void),*(struct(*(void),*(struct(*`,*`))))),*(struct(*(void),*(struct(*(void),*(struct`))))),*(struct(*(char),*(char))))
.	O
jstuff	struct(*(struct(*(char),*(struct),*(void),long)),struct(*(void),*(struct(*(void),*(struct(*`,*`))))),*(struct(*(void),*(struct(*(void),*(struct`))))),*(struct(*(char),*(char))))
)	O
;	O
jstuff	struct(*(struct(*(char),*(struct),*(void),long)),struct(*(void),*(struct(*(void),*(struct(*`,*`))))),*(struct(*(void),*(struct(*(void),*(struct`))))),*(struct(*(char),*(char))))
.	O
jstuff	struct(*(struct(*(char),*(struct),*(void),long)),struct(*(void),*(struct(*(void),*(struct(*`,*`))))),*(struct(*(void),*(struct(*(void),*(struct`))))),*(struct(*(char),*(char))))
=	O
NULL	O
;	O
return	O
rv	bool
;	O
}	O
static	O
bool	bool
buildjoin	(*(char))->(bool)
(	O
char	O
const	O
*	O
initialfile	*(char)
)	O
{	O
char	O
const	O
*	O
rev2	*(char)
,	O
*	O
rev3	*(char)
;	O
int	O
i	int
;	O
char	O
const	O
*	O
cov	array(*(char))
[	O
10	int
]	O
,	O
*	O
mergev	array(*(char))
[	O
11	int
]	O
;	O
char	O
const	O
*	O
*	O
p	*(char)
;	O
size_t	long
len	char
;	O
char	O
const	O
*	O
subs	*(char)
=	O
NULL	O
;	O
rev2	*(char)
=	O
maketemp	(int)->(*(char))
(	O
0	int
)	O
;	O
rev3	*(char)
=	O
maketemp	(int)->(*(char))
(	O
3	int
)	O
;	O
cov	array(*(char))
[	O
1	int
]	O
=	O
PEER_CO	O
(	O
)	O
;	O
p	*(char)
=	O
&	O
cov	array(*(char))
[	O
3	int
]	O
;	O
if	O
(	O
expandarg	*(char)
)	O
*	O
p	*(char)
++	O
=	O
expandarg	*(char)
;	O
if	O
(	O
suffixarg	*(char)
)	O
*	O
p	*(char)
++	O
=	O
suffixarg	*(char)
;	O
if	O
(	O
versionarg	*(char)
)	O
*	O
p	*(char)
++	O
=	O
versionarg	*(char)
;	O
if	O
(	O
zonearg	*(char)
)	O
*	O
p	*(char)
++	O
=	O
zonearg	*(char)
;	O
*	O
p	*(char)
++	O
=	O
quietarg	array(char)
;	O
*	O
p	*(char)
++	O
=	O
REPO	O
(	O
filename	*(char)
)	O
;	O
*	O
p	*(char)
=	O
'\0'	O
;	O
mergev	array(*(char))
[	O
1	int
]	O
=	O
find_peer_prog	(*(struct(*(char),*(char))))->(*(char))
(	O
jstuff	struct(*(struct(*(char),*(struct),*(void),long)),struct(*(void),*(struct(*(void),*(struct(*`,*`))))),*(struct(*(void),*(struct(*(void),*(struct`))))),*(struct(*(char),*(char))))
.	O
merge	(bool,*(char),array(struct(*(char),*(char))))->(int)
)	O
;	O
mergev	array(*(char))
[	O
2	int
]	O
=	O
mergev	array(*(char))
[	O
4	int
]	O
=	O
"-L"	*(char)
;	O
i	int
=	O
0	int
;	O
while	O
(	O
i	int
<	O
lastjoin	int
)	O
{	O
if	O
(	O
i	int
==	O
0	int
)	O
subs	*(char)
=	O
targetdelta	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
num	*(char)
;	O
else	O
{	O
ACCF	O
(	O
"%s,%s:%s"	*(char)
,	O
subs	*(char)
,	O
joinlist	*(*(char))
[	O
i	int
-	O
2	int
]	O
,	O
joinlist	*(*(char))
[	O
i	int
-	O
1	int
]	O
)	O
;	O
subs	*(char)
=	O
finish_string	(*(struct(*(char),*(struct),*(void),long)),*(long))->(*(char))
(	O
SINGLE	O
,	O
&	O
len	char
)	O
;	O
}	O
diagnose	(*(char))->(void)
(	O
"revision %s"	*(char)
,	O
joinlist	*(*(char))
[	O
i	int
]	O
)	O
;	O
ACCF	O
(	O
"-p%s"	*(char)
,	O
joinlist	*(*(char))
[	O
i	int
]	O
)	O
;	O
cov	array(*(char))
[	O
2	int
]	O
=	O
finish_string	(*(struct(*(char),*(struct),*(void),long)),*(long))->(*(char))
(	O
SINGLE	O
,	O
&	O
len	char
)	O
;	O
if	O
(	O
runv	(int,*(char),*(*(char)))->(int)
(	O
-	O
1	int
,	O
rev2	*(char)
,	O
cov	array(*(char))
)	O
)	O
goto	O
badmerge	O
;	O
diagnose	(*(char))->(void)
(	O
"revision %s"	*(char)
,	O
joinlist	*(*(char))
[	O
i	int
+	O
1	int
]	O
)	O
;	O
ACCF	O
(	O
"-p%s"	*(char)
,	O
joinlist	*(*(char))
[	O
i	int
+	O
1	int
]	O
)	O
;	O
cov	array(*(char))
[	O
2	int
]	O
=	O
finish_string	(*(struct(*(char),*(struct),*(void),long)),*(long))->(*(char))
(	O
SINGLE	O
,	O
&	O
len	char
)	O
;	O
if	O
(	O
runv	(int,*(char),*(*(char)))->(int)
(	O
-	O
1	int
,	O
rev3	*(char)
,	O
cov	array(*(char))
)	O
)	O
goto	O
badmerge	O
;	O
diagnose	(*(char))->(void)
(	O
"merging..."	*(char)
)	O
;	O
mergev	array(*(char))
[	O
3	int
]	O
=	O
subs	*(char)
;	O
mergev	array(*(char))
[	O
5	int
]	O
=	O
joinlist	*(*(char))
[	O
i	int
+	O
1	int
]	O
;	O
p	*(char)
=	O
&	O
mergev	array(*(char))
[	O
6	int
]	O
;	O
if	O
(	O
BE	O
(	O
quiet	bool
)	O
)	O
*	O
p	*(char)
++	O
=	O
quietarg	array(char)
;	O
if	O
(	O
lastjoin	int
<=	O
i	int
+	O
2	int
&&	O
MANI	O
(	O
standard_output	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
)	O
*	O
p	*(char)
++	O
=	O
"-p"	*(char)
;	O
*	O
p	*(char)
++	O
=	O
initialfile	*(char)
;	O
*	O
p	*(char)
++	O
=	O
rev2	*(char)
;	O
*	O
p	*(char)
++	O
=	O
rev3	*(char)
;	O
*	O
p	*(char)
=	O
'\0'	O
;	O
if	O
(	O
DIFF_TROUBLE	int
==	O
runv	(int,*(char),*(*(char)))->(int)
(	O
-	O
1	int
,	O
NULL	O
,	O
mergev	array(*(char))
)	O
)	O
goto	O
badmerge	O
;	O
i	int
=	O
i	int
+	O
2	int
;	O
}	O
return	O
true	int
;	O
badmerge	O
:	O
FLOW	O
(	O
erroneousp	bool
)	O
=	O
true	int
;	O
return	O
false	int
;	O
}	O
int	O
main	(int,*(*(char)))->(int)
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	*(*(char))
)	O
{	O
char	O
*	O
a	*(char)
,	O
*	O
joinflag	*(char)
,	O
*	O
*	O
newargv	*(*(*(char)))
;	O
char	O
const	O
*	O
author	*(char)
,	O
*	O
date	*(char)
,	O
*	O
rev	*(char)
,	O
*	O
state	*(char)
;	O
char	O
const	O
*	O
joinname	*(char)
,	O
*	O
newdate	*(char)
,	O
*	O
neworkname	*(char)
;	O
int	O
changelock	int
;	O
int	O
expmode	int
,	O
r	*(struct(*(char),*(char),long,*(struct),long,*(struct),long,*(struct),bool,*(struct),*(struct),int,long,*(struct),*(struct),long,*(struct),*(struct)))
,	O
workstatstat	int
;	O
bool	bool
tostdout	bool
,	O
Ttimeflag	bool
;	O
char	O
finaldate	array(char)
[	O
datesize	O
]	O
;	O
struct	O
wlink	struct(*(void),*(struct(*(void),*(struct(*(void),*(struct`))))))
*	O
deltas	*(struct)
;	O
const	O
struct	O
program	struct(*(char),*(char),*(char),*(()->(void)))
program	struct(*(char),*(char),*(char),*(()->(void)))
=	O
{	O
.	O
invoke	*(char)
=	O
argv	*(*(char))
[	O
0	int
]	O
,	O
.	O
name	*(char)
=	O
"co"	*(char)
,	O
.	O
help	*(char)
=	O
help	*(char)
,	O
.	O
exiterr	*(()->(void))
=	O
exiterr	*(()->(void))
}	O
;	O
CHECK_HV	O
(	O
)	O
;	O
gnurcs_init	(*(struct(*(char),*(char),*(char),*(()->(void)))))->(void)
(	O
&	O
program	struct(*(char),*(char),*(char),*(()->(void)))
)	O
;	O
setrid	()->(void)
(	O
)	O
;	O
author	*(char)
=	O
date	*(char)
=	O
rev	*(char)
=	O
state	*(char)
=	O
NULL	O
;	O
joinflag	*(char)
=	O
NULL	O
;	O
expmode	int
=	O
-	O
1	int
;	O
BE	O
(	O
pe	*(char)
)	O
=	O
X_DEFAULT	*(char)
;	O
tostdout	bool
=	O
false	int
;	O
Ttimeflag	bool
=	O
false	int
;	O
argc	int
=	O
getRCSINIT	(int,*(*(char)),*(*(*(char))))->(int)
(	O
argc	int
,	O
argv	*(*(char))
,	O
&	O
newargv	*(*(*(char)))
)	O
;	O
argv	*(*(char))
=	O
newargv	*(*(*(char)))
;	O
while	O
(	O
a	*(char)
=	O
*	O
++	O
argv	*(*(char))
,	O
0	int
<	O
--	O
argc	int
&&	O
*	O
a	*(char)
++	O
==	O
'-'	O
)	O
{	O
switch	O
(	O
*	O
a	*(char)
++	O
)	O
{	O
case	O
'r'	O
:	O
revno	*(char)
:	O
if	O
(	O
*	O
a	*(char)
)	O
{	O
if	O
(	O
rev	*(char)
)	O
PWARN	O
(	O
"redefinition of %s"	*(char)
,	O
ks_revno	array(char)
)	O
;	O
rev	*(char)
=	O
a	*(char)
;	O
}	O
break	O
;	O
case	O
'f'	O
:	O
forceflag	bool
=	O
true	int
;	O
goto	O
revno	*(char)
;	O
case	O
'l'	O
:	O
if	O
(	O
lockflag	bool
<	O
0	int
)	O
{	O
PWARN	O
(	O
"-u overridden by -l."	*(char)
)	O
;	O
}	O
lockflag	bool
=	O
1	int
;	O
goto	O
revno	*(char)
;	O
case	O
'u'	O
:	O
if	O
(	O
0	int
<	O
lockflag	bool
)	O
{	O
PWARN	O
(	O
"-l overridden by -u."	*(char)
)	O
;	O
}	O
lockflag	bool
=	O
-	O
1	int
;	O
goto	O
revno	*(char)
;	O
case	O
'p'	O
:	O
tostdout	bool
=	O
true	int
;	O
goto	O
revno	*(char)
;	O
case	O
'I'	O
:	O
BE	O
(	O
interactive	bool
)	O
=	O
true	int
;	O
goto	O
revno	*(char)
;	O
case	O
'q'	O
:	O
BE	O
(	O
quiet	bool
)	O
=	O
true	int
;	O
goto	O
revno	*(char)
;	O
case	O
'd'	O
:	O
if	O
(	O
date	*(char)
)	O
redefined	(int)->(void)
(	O
'd'	O
)	O
;	O
str2date	(*(char),array(char))->(void)
(	O
a	*(char)
,	O
finaldate	array(char)
)	O
;	O
date	*(char)
=	O
finaldate	array(char)
;	O
break	O
;	O
case	O
'j'	O
:	O
if	O
(	O
*	O
a	*(char)
)	O
{	O
if	O
(	O
joinflag	*(char)
)	O
redefined	(int)->(void)
(	O
'j'	O
)	O
;	O
joinflag	*(char)
=	O
a	*(char)
;	O
}	O
break	O
;	O
case	O
'M'	O
:	O
mtimeflag	bool
=	O
true	int
;	O
goto	O
revno	*(char)
;	O
case	O
's'	O
:	O
if	O
(	O
*	O
a	*(char)
)	O
{	O
if	O
(	O
state	*(char)
)	O
redefined	(int)->(void)
(	O
's'	O
)	O
;	O
state	*(char)
=	O
a	*(char)
;	O
}	O
break	O
;	O
case	O
'T'	O
:	O
if	O
(	O
*	O
a	*(char)
)	O
goto	O
unknown	O
;	O
Ttimeflag	bool
=	O
true	int
;	O
break	O
;	O
case	O
'w'	O
:	O
if	O
(	O
author	*(char)
)	O
redefined	(int)->(void)
(	O
'w'	O
)	O
;	O
if	O
(	O
*	O
a	*(char)
)	O
author	*(char)
=	O
a	*(char)
;	O
else	O
author	*(char)
=	O
getcaller	()->(*(char))
(	O
)	O
;	O
break	O
;	O
case	O
'x'	O
:	O
suffixarg	*(char)
=	O
*	O
argv	*(*(char))
;	O
BE	O
(	O
pe	*(char)
)	O
=	O
a	*(char)
;	O
break	O
;	O
case	O
'V'	O
:	O
versionarg	*(char)
=	O
*	O
argv	*(*(char))
;	O
setRCSversion	(*(char))->(void)
(	O
versionarg	*(char)
)	O
;	O
break	O
;	O
case	O
'z'	O
:	O
zonearg	*(char)
=	O
*	O
argv	*(*(char))
;	O
zone_set	(*(char))->(void)
(	O
a	*(char)
)	O
;	O
break	O
;	O
case	O
'k'	O
:	O
expandarg	*(char)
=	O
*	O
argv	*(*(char))
;	O
if	O
(	O
0	int
<=	O
expmode	int
)	O
redefined	(int)->(void)
(	O
'k'	O
)	O
;	O
if	O
(	O
0	int
<=	O
(	O
expmode	int
=	O
str2expmode	(*(char))->(int)
(	O
a	*(char)
)	O
)	O
)	O
break	O
;	O
default	O
:	O
unknown	O
:	O
bad_option	(*(char))->(void)
(	O
*	O
argv	*(*(char))
)	O
;	O
}	O
;	O
}	O
if	O
(	O
FLOW	O
(	O
erroneousp	bool
)	O
)	O
cleanup	()->(void)
(	O
)	O
;	O
else	O
if	O
(	O
argc	int
<	O
1	int
)	O
PFATAL	O
(	O
"no input file"	*(char)
)	O
;	O
else	O
for	O
(	O
;	O
0	int
<	O
argc	int
;	O
cleanup	()->(void)
(	O
)	O
,	O
++	O
argv	*(*(char))
,	O
--	O
argc	int
)	O
{	O
struct	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
*	O
repo_stat	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
;	O
char	O
const	O
*	O
mani_filename	*(char)
;	O
int	O
kws	int
;	O
ffree	()->(void)
(	O
)	O
;	O
if	O
(	O
pairnames	(int,*(*(char)),*((*(struct(*`,bool,struct`,*`,struct`,*`,int)))->(*(struct))),bool,bool)->(int)
(	O
argc	int
,	O
argv	*(*(char))
,	O
lockflag	bool
?	O
rcswriteopen	(*(struct(*((*`)->(*`)),bool,struct(*(char),long),*(struct),struct(*(char),long),*(struct(long,long,long,int,int,int,int,long,long,long,long,struct`,struct`,struct`,array(long))),int)))->(*(struct))
:	O
rcsreadopen	(*(struct(*((*`)->(*`)),bool,struct(*(char),long),*(struct),struct(*(char),long),*(struct(long,long,long,int,int,int,int,long,long,long,long,struct`,struct`,struct`,array(long))),int)))->(*(struct))
,	O
true	int
,	O
false	int
)	O
<=	O
0	int
)	O
continue	O
;	O
repo_stat	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
=	O
&	O
REPO	O
(	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
)	O
;	O
mani_filename	*(char)
=	O
MANI	O
(	O
filename	*(char)
)	O
;	O
kws	int
=	O
BE	O
(	O
kws	int
)	O
;	O
diagnose	(*(char))->(void)
(	O
"%s  -->  %s"	*(char)
,	O
REPO	O
(	O
filename	*(char)
)	O
,	O
tostdout	bool
?	O
"standard output"	*(char)
:	O
mani_filename	*(char)
)	O
;	O
workstatstat	int
=	O
-	O
1	int
;	O
if	O
(	O
tostdout	bool
)	O
{	O
neworkname	*(char)
=	O
NULL	O
;	O
neworkptr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
=	O
MANI	O
(	O
standard_output	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
=	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
;	O
}	O
else	O
{	O
workstatstat	int
=	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
(	O
mani_filename	*(char)
,	O
&	O
workstat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
)	O
;	O
if	O
(	O
!	O
PROB	O
(	O
workstatstat	int
)	O
&&	O
SAME_INODE	O
(	O
REPO	O
(	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
)	O
,	O
workstat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
)	O
)	O
{	O
RERR	O
(	O
"RCS file is the same as working file %s."	*(char)
,	O
mani_filename	*(char)
)	O
;	O
continue	O
;	O
}	O
neworkname	*(char)
=	O
makedirtemp	(bool)->(*(char))
(	O
true	int
)	O
;	O
if	O
(	O
!	O
(	O
neworkptr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
=	O
fopen_safer	(*(char),*(char))->(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))
(	O
neworkname	*(char)
,	O
FOPEN_W_WORK	*(char)
)	O
)	O
)	O
{	O
if	O
(	O
errno	O
==	O
EACCES	int
)	O
MERR	O
(	O
"permission denied on parent directory"	*(char)
)	O
;	O
else	O
syserror_errno	O
(	O
neworkname	*(char)
)	O
;	O
continue	O
;	O
}	O
}	O
if	O
(	O
!	O
REPO	O
(	O
tip	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
)	O
)	O
{	O
diagnose	(*(char))->(void)
(	O
"no revisions present; generating empty revision 0.0"	*(char)
)	O
;	O
if	O
(	O
lockflag	bool
)	O
PWARN	O
(	O
"no revisions, so nothing can be %slocked"	*(char)
,	O
lockflag	bool
<	O
0	int
?	O
"un"	*(char)
:	O
""	*(char)
)	O
;	O
Ozclose	(*(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char)))))->(void)
(	O
&	O
FLOW	O
(	O
res	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
)	O
;	O
if	O
(	O
!	O
PROB	O
(	O
workstatstat	int
)	O
)	O
if	O
(	O
!	O
rmworkfile	()->(bool)
(	O
)	O
)	O
continue	O
;	O
changelock	int
=	O
0	int
;	O
newdate	*(char)
=	O
NULL	O
;	O
}	O
else	O
{	O
struct	O
cbuf	struct(*(char),long)
numericrev	struct(*(char),long)
;	O
int	O
locks	*(struct)
=	O
lockflag	bool
?	O
findlock	(bool,*(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long))))->(int)
(	O
false	int
,	O
&	O
targetdelta	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
)	O
:	O
0	int
;	O
struct	O
fro	struct(int,long,enum(int,int,int),*(char),*(char),*(char),*((*(struct(int,long,enum(int,int,int),*(char),*(char),*(char),*((*`)->(void)),*(struct`),long)))->(void)),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char))),long)
*	O
from	*(struct)
=	O
FLOW	O
(	O
from	*(struct)
)	O
;	O
if	O
(	O
rev	*(char)
)	O
{	O
if	O
(	O
!	O
fully_numeric_no_k	O
(	O
&	O
numericrev	struct(*(char),long)
,	O
rev	*(char)
)	O
)	O
continue	O
;	O
}	O
else	O
{	O
switch	O
(	O
locks	*(struct)
)	O
{	O
default	O
:	O
continue	O
;	O
case	O
0	int
:	O
numericrev	struct(*(char),long)
.	O
string	*(char)
=	O
GROK	O
(	O
branch	*(char)
)	O
?	O
GROK	O
(	O
branch	*(char)
)	O
:	O
""	*(char)
;	O
break	O
;	O
case	O
1	int
:	O
numericrev	struct(*(char),long)
.	O
string	*(char)
=	O
str_save	(*(char))->(*(char))
(	O
targetdelta	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
num	*(char)
)	O
;	O
break	O
;	O
}	O
}	O
if	O
(	O
!	O
(	O
targetdelta	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
=	O
genrevs	(*(char),*(char),*(char),*(char),*(*(struct)))->(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)))
(	O
numericrev	struct(*(char),long)
.	O
string	*(char)
,	O
date	*(char)
,	O
author	*(char)
,	O
state	*(char)
,	O
&	O
deltas	*(struct)
)	O
)	O
)	O
continue	O
;	O
changelock	int
=	O
lockflag	bool
<	O
0	int
?	O
rmlock	(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*`,long,array(long))),*(struct(long,long,long,*`,long,array(long))),*(char),struct(*(char),long),*(struct(*`,*`)),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)))->(int)
(	O
targetdelta	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
)	O
:	O
lockflag	bool
==	O
0	int
?	O
0	int
:	O
addlock	(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct(*`,*`)),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)),bool)->(int)
(	O
targetdelta	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
,	O
true	int
)	O
;	O
if	O
(	O
changelock	int
<	O
0	int
||	O
(	O
changelock	int
&&	O
!	O
checkaccesslist	()->(bool)
(	O
)	O
)	O
||	O
PROB	O
(	O
dorewrite	(bool,int)->(int)
(	O
lockflag	bool
,	O
changelock	int
)	O
)	O
)	O
continue	O
;	O
if	O
(	O
0	int
<=	O
expmode	int
)	O
kws	int
=	O
BE	O
(	O
kws	int
)	O
=	O
expmode	int
;	O
if	O
(	O
0	int
<	O
lockflag	bool
&&	O
kws	int
==	O
kwsub_v	int
)	O
{	O
RERR	O
(	O
"cannot combine -kv and -l"	*(char)
)	O
;	O
continue	O
;	O
}	O
if	O
(	O
joinflag	*(char)
&&	O
!	O
preparejoin	(*(char))->(bool)
(	O
joinflag	*(char)
)	O
)	O
continue	O
;	O
diagnose	(*(char))->(void)
(	O
"revision %s%s"	*(char)
,	O
targetdelta	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
num	*(char)
,	O
0	int
<	O
lockflag	bool
?	O
" (locked)"	*(char)
:	O
lockflag	bool
<	O
0	int
?	O
" (unlocked)"	*(char)
:	O
""	*(char)
)	O
;	O
SAME_AFTER	O
(	O
from	*(struct)
,	O
targetdelta	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
text	*(struct)
)	O
;	O
if	O
(	O
!	O
PROB	O
(	O
workstatstat	int
)	O
)	O
if	O
(	O
!	O
rmworkfile	()->(bool)
(	O
)	O
)	O
continue	O
;	O
write_desc_maybe	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(void)
(	O
FLOW	O
(	O
to	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
)	O
;	O
BE	O
(	O
inclusive_of_Locker_in_Id_val	bool
)	O
=	O
0	int
<	O
lockflag	bool
;	O
targetdelta	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
name	*(char)
=	O
namedrev	(*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)))->(*(char))
(	O
rev	*(char)
,	O
targetdelta	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
)	O
;	O
joinname	*(char)
=	O
buildrevision	(*(struct),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),bool)->(*(char))
(	O
deltas	*(struct)
,	O
targetdelta	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
,	O
joinflag	*(char)
&&	O
tostdout	bool
?	O
NULL	O
:	O
neworkptr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
kws	int
<	O
MIN_UNEXPAND	O
)	O
;	O
if	O
(	O
FLOW	O
(	O
res	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
==	O
neworkptr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
FLOW	O
(	O
res	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
=	O
NULL	O
;	O
if	O
(	O
changelock	int
&&	O
deltas	*(struct)
->	O
entry	*(void)
!=	O
targetdelta	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
)	O
fro_trundling	(bool,*(struct(int,long,enum(int,int,int),*(char),*(char),*(char),*((*`)->(void)),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),long)))->(void)
(	O
true	int
,	O
from	*(struct)
)	O
;	O
if	O
(	O
PROB	O
(	O
donerewrite	(int,long)->(int)
(	O
changelock	int
,	O
Ttimeflag	bool
?	O
repo_stat	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
->	O
st_mtime	O
:	O
(	O
time_t	long
)	O
-	O
1	int
)	O
)	O
)	O
continue	O
;	O
if	O
(	O
changelock	int
)	O
{	O
locks	*(struct)
+=	O
lockflag	bool
;	O
if	O
(	O
1	int
<	O
locks	*(struct)
)	O
RWARN	O
(	O
"You now have %d locks."	*(char)
,	O
locks	*(struct)
)	O
;	O
}	O
newdate	*(char)
=	O
targetdelta	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
date	*(char)
;	O
if	O
(	O
joinflag	*(char)
)	O
{	O
newdate	*(char)
=	O
NULL	O
;	O
if	O
(	O
!	O
joinname	*(char)
)	O
{	O
aflush	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(void)
(	O
neworkptr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
joinname	*(char)
=	O
neworkname	*(char)
;	O
}	O
if	O
(	O
kws	int
==	O
kwsub_b	int
)	O
MERR	O
(	O
"merging binary files"	*(char)
)	O
;	O
if	O
(	O
!	O
buildjoin	(*(char))->(bool)
(	O
joinname	*(char)
)	O
)	O
continue	O
;	O
}	O
}	O
if	O
(	O
!	O
tostdout	bool
)	O
{	O
mode_t	int
m	*(struct)
=	O
WORKMODE	O
(	O
repo_stat	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
->	O
st_mode	int
,	O
!	O
(	O
kws	int
==	O
kwsub_v	int
||	O
(	O
lockflag	bool
<=	O
0	int
&&	O
BE	O
(	O
strictly_locking	bool
)	O
)	O
)	O
)	O
;	O
time_t	long
t	long
=	O
mtimeflag	bool
&&	O
newdate	*(char)
?	O
date2time	(array(char))->(long)
(	O
newdate	*(char)
)	O
:	O
(	O
time_t	long
)	O
-	O
1	int
;	O
aflush	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(void)
(	O
neworkptr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
IGNOREINTS	O
(	O
)	O
;	O
r	*(struct(*(char),*(char),long,*(struct),long,*(struct),long,*(struct),bool,*(struct),*(struct),int,long,*(struct),*(struct),long,*(struct),*(struct)))
=	O
chnamemod	(*(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char)))),*(char),*(char),int,int,long)->(int)
(	O
&	O
neworkptr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
neworkname	*(char)
,	O
mani_filename	*(char)
,	O
1	int
,	O
m	*(struct)
,	O
t	long
)	O
;	O
keepdirtemp	(*(char))->(void)
(	O
neworkname	*(char)
)	O
;	O
RESTOREINTS	O
(	O
)	O
;	O
if	O
(	O
PROB	O
(	O
r	*(struct(*(char),*(char),long,*(struct),long,*(struct),long,*(struct),bool,*(struct),*(struct),int,long,*(struct),*(struct),long,*(struct),*(struct)))
)	O
)	O
{	O
syserror_errno	O
(	O
mani_filename	*(char)
)	O
;	O
PERR	O
(	O
"see %s"	*(char)
,	O
neworkname	*(char)
)	O
;	O
continue	O
;	O
}	O
diagnose	(*(char))->(void)
(	O
"done"	*(char)
)	O
;	O
}	O
}	O
tempunlink	()->(void)
(	O
)	O
;	O
Ozclose	(*(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char)))))->(void)
(	O
&	O
MANI	O
(	O
standard_output	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
)	O
;	O
gnurcs_goodbye	()->(void)
(	O
)	O
;	O
return	O
exitstatus	int
;	O
}	O
