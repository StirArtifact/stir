static	O
struct	O
quoting_options	O
*	O
sh_quoting_options	*(struct)
;	O
static	O
void	O
init_sh_quoting_options	()->(void)
(	O
void	O
)	O
{	O
sh_quoting_options	*(struct)
=	O
clone_quoting_options	(*(struct))->(*(struct))
(	O
NULL	O
)	O
;	O
set_quoting_style	(*(struct),enum(int,int,int,int,int,int,int,int,int))->(void)
(	O
sh_quoting_options	*(struct)
,	O
shell_quoting_style	int
)	O
;	O
}	O
size_t	long
shell_quote_length	(*(char))->(long)
(	O
const	O
char	O
*	O
string	*(char)
)	O
{	O
if	O
(	O
sh_quoting_options	*(struct)
==	O
NULL	O
)	O
init_sh_quoting_options	()->(void)
(	O
)	O
;	O
return	O
quotearg_buffer	(*(char),long,*(char),long,*(struct))->(long)
(	O
NULL	O
,	O
0	int
,	O
string	*(char)
,	O
strlen	(*(char))->(long)
(	O
string	*(char)
)	O
,	O
sh_quoting_options	*(struct)
)	O
;	O
}	O
char	O
*	O
shell_quote_copy	(*(char),*(char))->(*(char))
(	O
char	O
*	O
p	*(char)
,	O
const	O
char	O
*	O
string	*(char)
)	O
{	O
if	O
(	O
sh_quoting_options	*(struct)
==	O
NULL	O
)	O
init_sh_quoting_options	()->(void)
(	O
)	O
;	O
return	O
p	*(char)
+	O
quotearg_buffer	(*(char),long,*(char),long,*(struct))->(long)
(	O
p	*(char)
,	O
(	O
size_t	long
)	O
(	O
-	O
1	int
)	O
,	O
string	*(char)
,	O
strlen	(*(char))->(long)
(	O
string	*(char)
)	O
,	O
sh_quoting_options	*(struct)
)	O
;	O
}	O
char	O
*	O
shell_quote	(*(char))->(*(char))
(	O
const	O
char	O
*	O
string	*(char)
)	O
{	O
if	O
(	O
sh_quoting_options	*(struct)
==	O
NULL	O
)	O
init_sh_quoting_options	()->(void)
(	O
)	O
;	O
return	O
quotearg_alloc	(*(char),long,*(struct))->(*(char))
(	O
string	*(char)
,	O
strlen	(*(char))->(long)
(	O
string	*(char)
)	O
,	O
sh_quoting_options	*(struct)
)	O
;	O
}	O
char	O
*	O
shell_quote_argv	(*(*(char)))->(*(char))
(	O
char	O
*	O
*	O
argv	*(*(char))
)	O
{	O
if	O
(	O
*	O
argv	*(*(char))
!=	O
NULL	O
)	O
{	O
char	O
*	O
*	O
argp	*(*(char))
;	O
size_t	long
length	long
;	O
char	O
*	O
command	*(char)
;	O
char	O
*	O
p	*(char)
;	O
length	long
=	O
0	int
;	O
for	O
(	O
argp	*(*(char))
=	O
argv	*(*(char))
;	O
;	O
)	O
{	O
length	long
+=	O
shell_quote_length	(*(char))->(long)
(	O
*	O
argp	*(*(char))
)	O
+	O
1	int
;	O
argp	*(*(char))
++	O
;	O
if	O
(	O
*	O
argp	*(*(char))
==	O
NULL	O
)	O
break	O
;	O
}	O
command	*(char)
=	O
XNMALLOC	O
(	O
length	long
,	O
char	O
)	O
;	O
p	*(char)
=	O
command	*(char)
;	O
for	O
(	O
argp	*(*(char))
=	O
argv	*(*(char))
;	O
;	O
)	O
{	O
p	*(char)
=	O
shell_quote_copy	(*(char),*(char))->(*(char))
(	O
p	*(char)
,	O
*	O
argp	*(*(char))
)	O
;	O
argp	*(*(char))
++	O
;	O
if	O
(	O
*	O
argp	*(*(char))
==	O
NULL	O
)	O
break	O
;	O
*	O
p	*(char)
++	O
=	O
' '	O
;	O
}	O
*	O
p	*(char)
=	O
'\0'	O
;	O
return	O
command	*(char)
;	O
}	O
else	O
return	O
xstrdup	(*(char))->(*(char))
(	O
""	*(char)
)	O
;	O
}	O
