int	O
mu_spawnvp	(*(char),array(*(char)),*(int))->(int)
(	O
const	O
char	O
*	O
prog	*(char)
,	O
char	O
*	O
av	array(*(char))
[	O
]	O
,	O
int	O
*	O
stat	*(int)
)	O
{	O
pid_t	int
pid	int
;	O
int	O
err	long
=	O
0	int
;	O
int	O
progstat	int
;	O
struct	O
sigaction	struct(union(*((int)->(void)),*((int,*(struct(int,int,int,int,union`)),*(void))->(void))),struct(array(long)),int,*(()->(void)))
ignore	struct(union(*((int)->(void)),*((int,*(struct`),*(void))->(void))),struct(array(long)),int,*(()->(void)))
;	O
struct	O
sigaction	struct(union(*((int)->(void)),*((int,*(struct(int,int,int,int,union`)),*(void))->(void))),struct(array(long)),int,*(()->(void)))
saveintr	struct(union(*((int)->(void)),*((int,*(struct`),*(void))->(void))),struct(array(long)),int,*(()->(void)))
;	O
struct	O
sigaction	struct(union(*((int)->(void)),*((int,*(struct(int,int,int,int,union`)),*(void))->(void))),struct(array(long)),int,*(()->(void)))
savequit	struct(union(*((int)->(void)),*((int,*(struct`),*(void))->(void))),struct(array(long)),int,*(()->(void)))
;	O
sigset_t	struct(array(long))
chldmask	struct(array(long))
;	O
sigset_t	struct(array(long))
savemask	struct(array(long))
;	O
if	O
(	O
!	O
prog	*(char)
||	O
!	O
av	array(*(char))
)	O
return	O
EINVAL	int
;	O
ignore	struct(union(*((int)->(void)),*((int,*(struct`),*(void))->(void))),struct(array(long)),int,*(()->(void)))
.	O
sa_handler	*((int)->(void))
=	O
SIG_IGN	O
;	O
ignore	struct(union(*((int)->(void)),*((int,*(struct`),*(void))->(void))),struct(array(long)),int,*(()->(void)))
.	O
sa_flags	int
=	O
0	int
;	O
sigemptyset	(*(struct(array(long))))->(int)
(	O
&	O
ignore	struct(union(*((int)->(void)),*((int,*(struct`),*(void))->(void))),struct(array(long)),int,*(()->(void)))
.	O
sa_mask	struct(array(long))
)	O
;	O
if	O
(	O
sigaction	struct(union(*((int)->(void)),*((int,*(struct(int,int,int,int,union`)),*(void))->(void))),struct(array(long)),int,*(()->(void)))
(	O
SIGINT	int
,	O
&	O
ignore	struct(union(*((int)->(void)),*((int,*(struct`),*(void))->(void))),struct(array(long)),int,*(()->(void)))
,	O
&	O
saveintr	struct(union(*((int)->(void)),*((int,*(struct`),*(void))->(void))),struct(array(long)),int,*(()->(void)))
)	O
<	O
0	int
)	O
return	O
errno	O
;	O
if	O
(	O
sigaction	struct(union(*((int)->(void)),*((int,*(struct(int,int,int,int,union`)),*(void))->(void))),struct(array(long)),int,*(()->(void)))
(	O
SIGQUIT	int
,	O
&	O
ignore	struct(union(*((int)->(void)),*((int,*(struct`),*(void))->(void))),struct(array(long)),int,*(()->(void)))
,	O
&	O
savequit	struct(union(*((int)->(void)),*((int,*(struct`),*(void))->(void))),struct(array(long)),int,*(()->(void)))
)	O
<	O
0	int
)	O
{	O
sigaction	struct(union(*((int)->(void)),*((int,*(struct(int,int,int,int,union`)),*(void))->(void))),struct(array(long)),int,*(()->(void)))
(	O
SIGINT	int
,	O
&	O
saveintr	struct(union(*((int)->(void)),*((int,*(struct`),*(void))->(void))),struct(array(long)),int,*(()->(void)))
,	O
NULL	O
)	O
;	O
return	O
errno	O
;	O
}	O
sigemptyset	(*(struct(array(long))))->(int)
(	O
&	O
chldmask	struct(array(long))
)	O
;	O
sigaddset	(*(struct(array(long))),int)->(int)
(	O
&	O
chldmask	struct(array(long))
,	O
SIGCHLD	int
)	O
;	O
if	O
(	O
sigprocmask	(int,*(struct(array(long))),*(struct(array(long))))->(int)
(	O
SIG_BLOCK	int
,	O
&	O
chldmask	struct(array(long))
,	O
&	O
savemask	struct(array(long))
)	O
<	O
0	int
)	O
{	O
sigaction	struct(union(*((int)->(void)),*((int,*(struct(int,int,int,int,union`)),*(void))->(void))),struct(array(long)),int,*(()->(void)))
(	O
SIGINT	int
,	O
&	O
saveintr	struct(union(*((int)->(void)),*((int,*(struct`),*(void))->(void))),struct(array(long)),int,*(()->(void)))
,	O
NULL	O
)	O
;	O
sigaction	struct(union(*((int)->(void)),*((int,*(struct(int,int,int,int,union`)),*(void))->(void))),struct(array(long)),int,*(()->(void)))
(	O
SIGQUIT	int
,	O
&	O
savequit	struct(union(*((int)->(void)),*((int,*(struct`),*(void))->(void))),struct(array(long)),int,*(()->(void)))
,	O
NULL	O
)	O
;	O
return	O
errno	O
;	O
}	O
pid	int
=	O
fork	()->(int)
(	O
)	O
;	O
if	O
(	O
pid	int
<	O
0	int
)	O
{	O
err	long
=	O
errno	O
;	O
}	O
else	O
if	O
(	O
pid	int
==	O
0	int
)	O
{	O
sigaction	struct(union(*((int)->(void)),*((int,*(struct(int,int,int,int,union`)),*(void))->(void))),struct(array(long)),int,*(()->(void)))
(	O
SIGINT	int
,	O
&	O
saveintr	struct(union(*((int)->(void)),*((int,*(struct`),*(void))->(void))),struct(array(long)),int,*(()->(void)))
,	O
NULL	O
)	O
;	O
sigaction	struct(union(*((int)->(void)),*((int,*(struct(int,int,int,int,union`)),*(void))->(void))),struct(array(long)),int,*(()->(void)))
(	O
SIGQUIT	int
,	O
&	O
savequit	struct(union(*((int)->(void)),*((int,*(struct`),*(void))->(void))),struct(array(long)),int,*(()->(void)))
,	O
NULL	O
)	O
;	O
sigprocmask	(int,*(struct(array(long))),*(struct(array(long))))->(int)
(	O
SIG_SETMASK	int
,	O
&	O
savemask	struct(array(long))
,	O
NULL	O
)	O
;	O
execvp	(*(char),array(*(char)))->(int)
(	O
prog	*(char)
,	O
av	array(*(char))
)	O
;	O
_exit	(int)->(void)
(	O
127	int
)	O
;	O
}	O
else	O
{	O
while	O
(	O
waitpid	(int,*(int),int)->(int)
(	O
pid	int
,	O
&	O
progstat	int
,	O
0	int
)	O
<	O
0	int
)	O
if	O
(	O
errno	O
!=	O
EINTR	int
)	O
{	O
err	long
=	O
errno	O
;	O
break	O
;	O
}	O
if	O
(	O
err	long
==	O
0	int
&&	O
stat	*(int)
)	O
*	O
stat	*(int)
=	O
progstat	int
;	O
}	O
if	O
(	O
sigaction	struct(union(*((int)->(void)),*((int,*(struct(int,int,int,int,union`)),*(void))->(void))),struct(array(long)),int,*(()->(void)))
(	O
SIGINT	int
,	O
&	O
saveintr	struct(union(*((int)->(void)),*((int,*(struct`),*(void))->(void))),struct(array(long)),int,*(()->(void)))
,	O
NULL	O
)	O
<	O
0	int
)	O
err	long
=	O
err	long
?	O
err	long
:	O
errno	O
;	O
if	O
(	O
sigaction	struct(union(*((int)->(void)),*((int,*(struct(int,int,int,int,union`)),*(void))->(void))),struct(array(long)),int,*(()->(void)))
(	O
SIGQUIT	int
,	O
&	O
savequit	struct(union(*((int)->(void)),*((int,*(struct`),*(void))->(void))),struct(array(long)),int,*(()->(void)))
,	O
NULL	O
)	O
<	O
0	int
)	O
err	long
=	O
err	long
?	O
err	long
:	O
errno	O
;	O
if	O
(	O
sigprocmask	(int,*(struct(array(long))),*(struct(array(long))))->(int)
(	O
SIG_SETMASK	int
,	O
&	O
savemask	struct(array(long))
,	O
NULL	O
)	O
<	O
0	int
)	O
err	long
=	O
err	long
?	O
err	long
:	O
errno	O
;	O
return	O
err	long
;	O
}	O
