enum	O
mu_iconv_fallback_mode	enum(int,int,int)
mu_default_fallback_mode	enum(int,int,int)
=	O
mu_fallback_copy_octal	int
;	O
int	O
mu_set_default_fallback	(*(char))->(int)
(	O
const	O
char	O
*	O
str	*(struct)
)	O
{	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
str	*(struct)
,	O
"none"	*(char)
)	O
==	O
0	int
)	O
mu_default_fallback_mode	enum(int,int,int)
=	O
mu_fallback_none	int
;	O
else	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
str	*(struct)
,	O
"copy-pass"	*(char)
)	O
==	O
0	int
)	O
mu_default_fallback_mode	enum(int,int,int)
=	O
mu_fallback_copy_pass	int
;	O
else	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
str	*(struct)
,	O
"copy-octal"	*(char)
)	O
==	O
0	int
)	O
mu_default_fallback_mode	enum(int,int,int)
=	O
mu_fallback_copy_octal	int
;	O
else	O
return	O
EINVAL	int
;	O
return	O
0	int
;	O
}	O
int	O
mu_decode_filter_args	(*(*(struct)),*(struct),*(char),int,*(*(char)),*(char),*(char))->(int)
(	O
mu_stream_t	*(struct)
*	O
pfilter	*(*(struct))
,	O
mu_stream_t	*(struct)
input	*(char)
,	O
const	O
char	O
*	O
filter_name	*(char)
,	O
int	O
argc	int
,	O
const	O
char	O
*	O
*	O
argv	*(*(char))
,	O
const	O
char	O
*	O
fromcode	*(char)
,	O
const	O
char	O
*	O
tocode	*(char)
)	O
{	O
int	O
xargc	int
,	O
i	int
;	O
char	O
*	O
*	O
xargv	*(*(char))
;	O
int	O
rc	int
;	O
xargc	int
=	O
argc	int
+	O
5	int
;	O
xargv	*(*(char))
=	O
calloc	(long,long)->(*(void))
(	O
xargc	int
+	O
1	int
,	O
sizeof	O
(	O
xargv	*(*(char))
[	O
0	int
]	O
)	O
)	O
;	O
if	O
(	O
!	O
xargv	*(*(char))
)	O
return	O
ENOMEM	int
;	O
i	int
=	O
0	int
;	O
if	O
(	O
filter_name	*(char)
)	O
xargv	*(*(char))
[	O
i	int
++	O
]	O
=	O
(	O
char	O
*	O
)	O
filter_name	*(char)
;	O
for	O
(	O
;	O
i	int
<	O
argc	int
;	O
i	int
++	O
)	O
xargv	*(*(char))
[	O
i	int
]	O
=	O
(	O
char	O
*	O
)	O
argv	*(*(char))
[	O
i	int
]	O
;	O
if	O
(	O
i	int
)	O
xargv	*(*(char))
[	O
i	int
++	O
]	O
=	O
"+"	*(char)
;	O
xargv	*(*(char))
[	O
i	int
++	O
]	O
=	O
"ICONV"	*(char)
;	O
xargv	*(*(char))
[	O
i	int
++	O
]	O
=	O
(	O
char	O
*	O
)	O
fromcode	*(char)
;	O
xargv	*(*(char))
[	O
i	int
++	O
]	O
=	O
(	O
char	O
*	O
)	O
tocode	*(char)
;	O
xargv	*(*(char))
[	O
i	int
]	O
=	O
NULL	O
;	O
rc	int
=	O
mu_filter_chain_create	(*(*(struct)),*(struct),int,int,long,*(*(char)))->(int)
(	O
pfilter	*(*(struct))
,	O
input	*(char)
,	O
MU_FILTER_DECODE	int
,	O
MU_STREAM_READ	int
,	O
i	int
,	O
xargv	*(*(char))
)	O
;	O
free	(*(void))->(void)
(	O
xargv	*(*(char))
)	O
;	O
return	O
rc	int
;	O
}	O
int	O
mu_decode_filter	(*(*(struct)),*(struct),*(char),*(char),*(char))->(int)
(	O
mu_stream_t	*(struct)
*	O
pfilter	*(*(struct))
,	O
mu_stream_t	*(struct)
input	*(char)
,	O
const	O
char	O
*	O
filter_name	*(char)
,	O
const	O
char	O
*	O
fromcode	*(char)
,	O
const	O
char	O
*	O
tocode	*(char)
)	O
{	O
return	O
mu_decode_filter_args	(*(*(struct)),*(struct),*(char),int,*(*(char)),*(char),*(char))->(int)
(	O
pfilter	*(*(struct))
,	O
input	*(char)
,	O
filter_name	*(char)
,	O
0	int
,	O
NULL	O
,	O
fromcode	*(char)
,	O
tocode	*(char)
)	O
;	O
}	O
