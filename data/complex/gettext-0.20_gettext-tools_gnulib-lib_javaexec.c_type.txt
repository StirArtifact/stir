bool	bool
execute_java_class	(*(char),*(*(char)),int,bool,*(char),*(*(char)),bool,bool,*((*(char),*(char),*(*(char)),*(void))->(bool)),*(void))->(bool)
(	O
const	O
char	O
*	O
class_name	*(char)
,	O
const	O
char	O
*	O
const	O
*	O
classpaths	*(*(char))
,	O
unsigned	O
int	O
classpaths_count	int
,	O
bool	bool
use_minimal_classpath	bool
,	O
const	O
char	O
*	O
exe_dir	*(char)
,	O
const	O
char	O
*	O
const	O
*	O
args	*(*(char))
,	O
bool	bool
verbose	bool
,	O
bool	bool
quiet	bool
,	O
execute_fn	(*(char),*(char),*(*(char)),*(void))->(bool)
*	O
executer	*((*(char),*(char),*(*(char)),*(void))->(bool))
,	O
void	O
*	O
private_data	*(void)
)	O
{	O
bool	bool
err	bool
=	O
false	int
;	O
unsigned	O
int	O
nargs	int
;	O
char	O
*	O
old_JAVA_HOME	*(char)
;	O
{	O
const	O
char	O
*	O
const	O
*	O
arg	*(*(char))
;	O
for	O
(	O
nargs	int
=	O
0	int
,	O
arg	*(*(char))
=	O
args	*(*(char))
;	O
*	O
arg	*(*(char))
!=	O
NULL	O
;	O
nargs	int
++	O
,	O
arg	*(*(char))
++	O
)	O
;	O
}	O
if	O
(	O
exe_dir	*(char)
!=	O
NULL	O
)	O
{	O
char	O
*	O
exe_pathname	*(char)
=	O
xconcatenated_filename	(*(char),*(char),*(char))->(*(char))
(	O
exe_dir	*(char)
,	O
class_name	*(char)
,	O
EXEEXT	O
)	O
;	O
char	O
*	O
old_classpath	*(char)
;	O
char	O
*	O
*	O
argv	*(*(char))
=	O
(	O
char	O
*	O
*	O
)	O
xmalloca	O
(	O
(	O
1	int
+	O
nargs	int
+	O
1	int
)	O
*	O
sizeof	O
(	O
char	O
*	O
)	O
)	O
;	O
unsigned	O
int	O
i	int
;	O
old_classpath	*(char)
=	O
set_classpath	(*(*(char)),int,bool,bool)->(*(char))
(	O
classpaths	*(*(char))
,	O
classpaths_count	int
,	O
use_minimal_classpath	bool
,	O
verbose	bool
)	O
;	O
argv	*(*(char))
[	O
0	int
]	O
=	O
exe_pathname	*(char)
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<=	O
nargs	int
;	O
i	int
++	O
)	O
argv	*(*(char))
[	O
1	int
+	O
i	int
]	O
=	O
(	O
char	O
*	O
)	O
args	*(*(char))
[	O
i	int
]	O
;	O
if	O
(	O
verbose	bool
)	O
{	O
char	O
*	O
command	*(char)
=	O
shell_quote_argv	(*(*(char)))->(*(char))
(	O
argv	*(*(char))
)	O
;	O
printf	(*(char))->(int)
(	O
"%s\n"	*(char)
,	O
command	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
command	*(char)
)	O
;	O
}	O
err	bool
=	O
executer	*((*(char),*(char),*(*(char)),*(void))->(bool))
(	O
class_name	*(char)
,	O
exe_pathname	*(char)
,	O
argv	*(*(char))
,	O
private_data	*(void)
)	O
;	O
reset_classpath	(*(char))->(void)
(	O
old_classpath	*(char)
)	O
;	O
freea	(*(void))->(void)
(	O
argv	*(*(char))
)	O
;	O
goto	O
done1	O
;	O
}	O
{	O
const	O
char	O
*	O
java	*(char)
=	O
getenv	(*(char))->(*(char))
(	O
"JAVA"	*(char)
)	O
;	O
if	O
(	O
java	*(char)
!=	O
NULL	O
&&	O
java	*(char)
[	O
0	int
]	O
!=	O
'\0'	O
)	O
{	O
char	O
*	O
old_classpath	*(char)
;	O
unsigned	O
int	O
command_length	int
;	O
char	O
*	O
command	*(char)
;	O
char	O
*	O
argv	*(*(char))
[	O
4	int
]	O
;	O
const	O
char	O
*	O
const	O
*	O
arg	*(*(char))
;	O
char	O
*	O
p	*(char)
;	O
old_classpath	*(char)
=	O
set_classpath	(*(*(char)),int,bool,bool)->(*(char))
(	O
classpaths	*(*(char))
,	O
classpaths_count	int
,	O
false	int
,	O
verbose	bool
)	O
;	O
command_length	int
=	O
strlen	(*(char))->(long)
(	O
java	*(char)
)	O
;	O
command_length	int
+=	O
1	int
+	O
shell_quote_length	(*(char))->(long)
(	O
class_name	*(char)
)	O
;	O
for	O
(	O
arg	*(*(char))
=	O
args	*(*(char))
;	O
*	O
arg	*(*(char))
!=	O
NULL	O
;	O
arg	*(*(char))
++	O
)	O
command_length	int
+=	O
1	int
+	O
shell_quote_length	(*(char))->(long)
(	O
*	O
arg	*(*(char))
)	O
;	O
command_length	int
+=	O
1	int
;	O
command	*(char)
=	O
(	O
char	O
*	O
)	O
xmalloca	O
(	O
command_length	int
)	O
;	O
p	*(char)
=	O
command	*(char)
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
p	*(char)
,	O
java	*(char)
,	O
strlen	(*(char))->(long)
(	O
java	*(char)
)	O
)	O
;	O
p	*(char)
+=	O
strlen	(*(char))->(long)
(	O
java	*(char)
)	O
;	O
*	O
p	*(char)
++	O
=	O
' '	O
;	O
p	*(char)
=	O
shell_quote_copy	(*(char),*(char))->(*(char))
(	O
p	*(char)
,	O
class_name	*(char)
)	O
;	O
for	O
(	O
arg	*(*(char))
=	O
args	*(*(char))
;	O
*	O
arg	*(*(char))
!=	O
NULL	O
;	O
arg	*(*(char))
++	O
)	O
{	O
*	O
p	*(char)
++	O
=	O
' '	O
;	O
p	*(char)
=	O
shell_quote_copy	(*(char),*(char))->(*(char))
(	O
p	*(char)
,	O
*	O
arg	*(*(char))
)	O
;	O
}	O
*	O
p	*(char)
++	O
=	O
'\0'	O
;	O
if	O
(	O
p	*(char)
-	O
command	*(char)
>	O
command_length	int
)	O
abort	()->(void)
(	O
)	O
;	O
if	O
(	O
verbose	bool
)	O
printf	(*(char))->(int)
(	O
"%s\n"	*(char)
,	O
command	*(char)
)	O
;	O
argv	*(*(char))
[	O
0	int
]	O
=	O
BOURNE_SHELL	*(char)
;	O
argv	*(*(char))
[	O
1	int
]	O
=	O
"-c"	*(char)
;	O
argv	*(*(char))
[	O
2	int
]	O
=	O
command	*(char)
;	O
argv	*(*(char))
[	O
3	int
]	O
=	O
NULL	O
;	O
err	bool
=	O
executer	*((*(char),*(char),*(*(char)),*(void))->(bool))
(	O
java	*(char)
,	O
BOURNE_SHELL	*(char)
,	O
argv	*(*(char))
,	O
private_data	*(void)
)	O
;	O
freea	(*(void))->(void)
(	O
command	*(char)
)	O
;	O
reset_classpath	(*(char))->(void)
(	O
old_classpath	*(char)
)	O
;	O
goto	O
done1	O
;	O
}	O
}	O
old_JAVA_HOME	*(char)
=	O
getenv	(*(char))->(*(char))
(	O
"JAVA_HOME"	*(char)
)	O
;	O
if	O
(	O
old_JAVA_HOME	*(char)
!=	O
NULL	O
)	O
{	O
old_JAVA_HOME	*(char)
=	O
xstrdup	(*(char))->(*(char))
(	O
old_JAVA_HOME	*(char)
)	O
;	O
unsetenv	(*(char))->(int)
(	O
"JAVA_HOME"	*(char)
)	O
;	O
}	O
{	O
static	O
bool	bool
gij_tested	bool
;	O
static	O
bool	bool
gij_present	bool
;	O
if	O
(	O
!	O
gij_tested	bool
)	O
{	O
char	O
*	O
argv	*(*(char))
[	O
3	int
]	O
;	O
int	O
exitstatus	int
;	O
argv	*(*(char))
[	O
0	int
]	O
=	O
"gij"	*(char)
;	O
argv	*(*(char))
[	O
1	int
]	O
=	O
"--version"	*(char)
;	O
argv	*(*(char))
[	O
2	int
]	O
=	O
NULL	O
;	O
exitstatus	int
=	O
execute	(*(char),*(char),*(*(char)),bool,bool,bool,bool,bool,bool,*(int))->(int)
(	O
"gij"	*(char)
,	O
"gij"	*(char)
,	O
argv	*(*(char))
,	O
false	int
,	O
false	int
,	O
true	int
,	O
true	int
,	O
true	int
,	O
false	int
,	O
NULL	O
)	O
;	O
gij_present	bool
=	O
(	O
exitstatus	int
==	O
0	int
)	O
;	O
gij_tested	bool
=	O
true	int
;	O
}	O
if	O
(	O
gij_present	bool
)	O
{	O
char	O
*	O
old_classpath	*(char)
;	O
char	O
*	O
*	O
argv	*(*(char))
=	O
(	O
char	O
*	O
*	O
)	O
xmalloca	O
(	O
(	O
2	int
+	O
nargs	int
+	O
1	int
)	O
*	O
sizeof	O
(	O
char	O
*	O
)	O
)	O
;	O
unsigned	O
int	O
i	int
;	O
old_classpath	*(char)
=	O
set_classpath	(*(*(char)),int,bool,bool)->(*(char))
(	O
classpaths	*(*(char))
,	O
classpaths_count	int
,	O
use_minimal_classpath	bool
,	O
verbose	bool
)	O
;	O
argv	*(*(char))
[	O
0	int
]	O
=	O
"gij"	*(char)
;	O
argv	*(*(char))
[	O
1	int
]	O
=	O
(	O
char	O
*	O
)	O
class_name	*(char)
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<=	O
nargs	int
;	O
i	int
++	O
)	O
argv	*(*(char))
[	O
2	int
+	O
i	int
]	O
=	O
(	O
char	O
*	O
)	O
args	*(*(char))
[	O
i	int
]	O
;	O
if	O
(	O
verbose	bool
)	O
{	O
char	O
*	O
command	*(char)
=	O
shell_quote_argv	(*(*(char)))->(*(char))
(	O
argv	*(*(char))
)	O
;	O
printf	(*(char))->(int)
(	O
"%s\n"	*(char)
,	O
command	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
command	*(char)
)	O
;	O
}	O
err	bool
=	O
executer	*((*(char),*(char),*(*(char)),*(void))->(bool))
(	O
"gij"	*(char)
,	O
"gij"	*(char)
,	O
argv	*(*(char))
,	O
private_data	*(void)
)	O
;	O
reset_classpath	(*(char))->(void)
(	O
old_classpath	*(char)
)	O
;	O
freea	(*(void))->(void)
(	O
argv	*(*(char))
)	O
;	O
goto	O
done2	O
;	O
}	O
}	O
{	O
static	O
bool	bool
java_tested	bool
;	O
static	O
bool	bool
java_present	bool
;	O
if	O
(	O
!	O
java_tested	bool
)	O
{	O
char	O
*	O
argv	*(*(char))
[	O
3	int
]	O
;	O
int	O
exitstatus	int
;	O
argv	*(*(char))
[	O
0	int
]	O
=	O
"java"	*(char)
;	O
argv	*(*(char))
[	O
1	int
]	O
=	O
"-version"	*(char)
;	O
argv	*(*(char))
[	O
2	int
]	O
=	O
NULL	O
;	O
exitstatus	int
=	O
execute	(*(char),*(char),*(*(char)),bool,bool,bool,bool,bool,bool,*(int))->(int)
(	O
"java"	*(char)
,	O
"java"	*(char)
,	O
argv	*(*(char))
,	O
false	int
,	O
false	int
,	O
true	int
,	O
true	int
,	O
true	int
,	O
false	int
,	O
NULL	O
)	O
;	O
java_present	bool
=	O
(	O
exitstatus	int
==	O
0	int
)	O
;	O
java_tested	bool
=	O
true	int
;	O
}	O
if	O
(	O
java_present	bool
)	O
{	O
char	O
*	O
old_classpath	*(char)
;	O
char	O
*	O
*	O
argv	*(*(char))
=	O
(	O
char	O
*	O
*	O
)	O
xmalloca	O
(	O
(	O
2	int
+	O
nargs	int
+	O
1	int
)	O
*	O
sizeof	O
(	O
char	O
*	O
)	O
)	O
;	O
unsigned	O
int	O
i	int
;	O
old_classpath	*(char)
=	O
set_classpath	(*(*(char)),int,bool,bool)->(*(char))
(	O
classpaths	*(*(char))
,	O
classpaths_count	int
,	O
use_minimal_classpath	bool
,	O
verbose	bool
)	O
;	O
argv	*(*(char))
[	O
0	int
]	O
=	O
"java"	*(char)
;	O
argv	*(*(char))
[	O
1	int
]	O
=	O
(	O
char	O
*	O
)	O
class_name	*(char)
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<=	O
nargs	int
;	O
i	int
++	O
)	O
argv	*(*(char))
[	O
2	int
+	O
i	int
]	O
=	O
(	O
char	O
*	O
)	O
args	*(*(char))
[	O
i	int
]	O
;	O
if	O
(	O
verbose	bool
)	O
{	O
char	O
*	O
command	*(char)
=	O
shell_quote_argv	(*(*(char)))->(*(char))
(	O
argv	*(*(char))
)	O
;	O
printf	(*(char))->(int)
(	O
"%s\n"	*(char)
,	O
command	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
command	*(char)
)	O
;	O
}	O
err	bool
=	O
executer	*((*(char),*(char),*(*(char)),*(void))->(bool))
(	O
"java"	*(char)
,	O
"java"	*(char)
,	O
argv	*(*(char))
,	O
private_data	*(void)
)	O
;	O
reset_classpath	(*(char))->(void)
(	O
old_classpath	*(char)
)	O
;	O
freea	(*(void))->(void)
(	O
argv	*(*(char))
)	O
;	O
goto	O
done2	O
;	O
}	O
}	O
{	O
static	O
bool	bool
jre_tested	bool
;	O
static	O
bool	bool
jre_present	bool
;	O
if	O
(	O
!	O
jre_tested	bool
)	O
{	O
char	O
*	O
argv	*(*(char))
[	O
2	int
]	O
;	O
int	O
exitstatus	int
;	O
argv	*(*(char))
[	O
0	int
]	O
=	O
"jre"	*(char)
;	O
argv	*(*(char))
[	O
1	int
]	O
=	O
NULL	O
;	O
exitstatus	int
=	O
execute	(*(char),*(char),*(*(char)),bool,bool,bool,bool,bool,bool,*(int))->(int)
(	O
"jre"	*(char)
,	O
"jre"	*(char)
,	O
argv	*(*(char))
,	O
false	int
,	O
false	int
,	O
true	int
,	O
true	int
,	O
true	int
,	O
false	int
,	O
NULL	O
)	O
;	O
jre_present	bool
=	O
(	O
exitstatus	int
==	O
0	int
||	O
exitstatus	int
==	O
1	int
)	O
;	O
jre_tested	bool
=	O
true	int
;	O
}	O
if	O
(	O
jre_present	bool
)	O
{	O
char	O
*	O
old_classpath	*(char)
;	O
char	O
*	O
*	O
argv	*(*(char))
=	O
(	O
char	O
*	O
*	O
)	O
xmalloca	O
(	O
(	O
2	int
+	O
nargs	int
+	O
1	int
)	O
*	O
sizeof	O
(	O
char	O
*	O
)	O
)	O
;	O
unsigned	O
int	O
i	int
;	O
old_classpath	*(char)
=	O
set_classpath	(*(*(char)),int,bool,bool)->(*(char))
(	O
classpaths	*(*(char))
,	O
classpaths_count	int
,	O
use_minimal_classpath	bool
,	O
verbose	bool
)	O
;	O
argv	*(*(char))
[	O
0	int
]	O
=	O
"jre"	*(char)
;	O
argv	*(*(char))
[	O
1	int
]	O
=	O
(	O
char	O
*	O
)	O
class_name	*(char)
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<=	O
nargs	int
;	O
i	int
++	O
)	O
argv	*(*(char))
[	O
2	int
+	O
i	int
]	O
=	O
(	O
char	O
*	O
)	O
args	*(*(char))
[	O
i	int
]	O
;	O
if	O
(	O
verbose	bool
)	O
{	O
char	O
*	O
command	*(char)
=	O
shell_quote_argv	(*(*(char)))->(*(char))
(	O
argv	*(*(char))
)	O
;	O
printf	(*(char))->(int)
(	O
"%s\n"	*(char)
,	O
command	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
command	*(char)
)	O
;	O
}	O
err	bool
=	O
executer	*((*(char),*(char),*(*(char)),*(void))->(bool))
(	O
"jre"	*(char)
,	O
"jre"	*(char)
,	O
argv	*(*(char))
,	O
private_data	*(void)
)	O
;	O
reset_classpath	(*(char))->(void)
(	O
old_classpath	*(char)
)	O
;	O
freea	(*(void))->(void)
(	O
argv	*(*(char))
)	O
;	O
goto	O
done2	O
;	O
}	O
}	O
if	O
(	O
!	O
quiet	bool
)	O
error	(int,int,*(char))->(void)
(	O
0	int
,	O
0	int
,	O
_	O
(	O
"Java virtual machine not found, try installing gij or set $JAVA"	*(char)
)	O
)	O
;	O
err	bool
=	O
true	int
;	O
done2	O
:	O
if	O
(	O
old_JAVA_HOME	*(char)
!=	O
NULL	O
)	O
{	O
xsetenv	(*(char),*(char),int)->(void)
(	O
"JAVA_HOME"	*(char)
,	O
old_JAVA_HOME	*(char)
,	O
1	int
)	O
;	O
free	(*(void))->(void)
(	O
old_JAVA_HOME	*(char)
)	O
;	O
}	O
done1	O
:	O
return	O
err	bool
;	O
}	O
