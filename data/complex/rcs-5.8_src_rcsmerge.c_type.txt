struct	O
top	struct(*(struct(*(char),*(char),*(char),*(()->(void)))),struct(*(char),bool,bool,bool,bool,bool,bool,bool,int,bool,int,int,bool,bool,bool,int,*(char),struct(bool,long),*(char),long,bool,bool,*(char),long,*(struct(*(char),enum(int,int,int))),*(struct),*(struct),*(struct)),struct(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),struct(bool,*(char),*(char),*(char),*(char),*(char))),struct(*(char),int,struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(struct(*(char),*(char),long,*(struct),long,*(struct),long,*(struct),bool,*(struct),*(struct),int,long,*(struct),*(struct),long,*(struct),*(struct))),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)),struct(*(char),long)),struct(*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char),bool))
*	O
top	struct(*(struct(*(char),*(char),*(char),*(()->(void)))),struct(*(char),bool,bool,bool,bool,bool,bool,bool,int,bool,int,int,bool,bool,bool,int,*(char),struct(bool,long),*(char),long,bool,bool,*(char),long,*(struct(*(char),enum(int,int,int))),*(struct),*(struct),*(struct)),struct(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),struct(bool,*(char),*(char),*(char),*(char),*(char))),struct(*(char),int,struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(struct(*(char),*(char),long,*(struct),long,*(struct),long,*(struct),bool,*(struct),*(struct),int,long,*(struct),*(struct),long,*(struct),*(struct))),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)),struct(*(char),long)),struct(*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char),bool))
;	O
static	O
exiting	O
void	O
exiterr	*(()->(void))
(	O
void	O
)	O
{	O
tempunlink	()->(void)
(	O
)	O
;	O
exit_diff_trouble	()->(void)
(	O
)	O
;	O
}	O
int	O
main	(int,*(*(char)))->(int)
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	*(*(char))
)	O
{	O
register	O
int	O
i	int
;	O
char	O
*	O
a	*(char)
,	O
*	O
*	O
newargv	*(*(*(char)))
;	O
struct	O
symdef	struct(*(char),*(char))
three_manifestations	array(struct(*(char),*(char)))
[	O
3	int
]	O
;	O
char	O
const	O
*	O
rev	*(char)
[	O
3	int
]	O
;	O
char	O
const	O
*	O
edarg	*(char)
,	O
*	O
expandarg	*(char)
,	O
*	O
suffixarg	*(char)
,	O
*	O
versionarg	*(char)
,	O
*	O
zonearg	*(char)
;	O
bool	bool
tostdout	bool
;	O
int	O
status	int
,	O
exitstatus	int
;	O
struct	O
fro	struct(int,long,enum(int,int,int),*(char),*(char),*(char),*((*(struct(int,long,enum(int,int,int),*(char),*(char),*(char),*((*`)->(void)),*(struct`),long)))->(void)),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char))),long)
*	O
workptr	*(struct(int,long,enum(int,int,int),*(char),*(char),*(char),*((*(struct`))->(void)),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),long))
;	O
struct	O
delta	struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long)),bool,long)
*	O
target	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)))
;	O
const	O
struct	O
program	struct(*(char),*(char),*(char),*(()->(void)))
program	struct(*(char),*(char),*(char),*(()->(void)))
=	O
{	O
.	O
invoke	*(char)
=	O
argv	*(*(char))
[	O
0	int
]	O
,	O
.	O
name	*(char)
=	O
"rcsmerge"	*(char)
,	O
.	O
help	*(char)
=	O
help	*(char)
,	O
.	O
exiterr	*(()->(void))
=	O
exiterr	*(()->(void))
}	O
;	O
CHECK_HV	O
(	O
)	O
;	O
gnurcs_init	(*(struct(*(char),*(char),*(char),*(()->(void)))))->(void)
(	O
&	O
program	struct(*(char),*(char),*(char),*(()->(void)))
)	O
;	O
edarg	*(char)
=	O
rev	*(char)
[	O
1	int
]	O
=	O
rev	*(char)
[	O
2	int
]	O
=	O
NULL	O
;	O
status	int
=	O
0	int
;	O
tostdout	bool
=	O
false	int
;	O
expandarg	*(char)
=	O
suffixarg	*(char)
=	O
versionarg	*(char)
=	O
zonearg	*(char)
=	O
quietarg	*(char)
;	O
BE	O
(	O
pe	*(char)
)	O
=	O
X_DEFAULT	*(char)
;	O
argc	int
=	O
getRCSINIT	(int,*(*(char)),*(*(*(char))))->(int)
(	O
argc	int
,	O
argv	*(*(char))
,	O
&	O
newargv	*(*(*(char)))
)	O
;	O
argv	*(*(char))
=	O
newargv	*(*(*(char)))
;	O
while	O
(	O
a	*(char)
=	O
*	O
++	O
argv	*(*(char))
,	O
0	int
<	O
--	O
argc	int
&&	O
*	O
a	*(char)
++	O
==	O
'-'	O
)	O
{	O
switch	O
(	O
*	O
a	*(char)
++	O
)	O
{	O
case	O
'p'	O
:	O
tostdout	bool
=	O
true	int
;	O
goto	O
revno	*(char)
;	O
case	O
'q'	O
:	O
BE	O
(	O
quiet	bool
)	O
=	O
true	int
;	O
revno	*(char)
:	O
if	O
(	O
!	O
*	O
a	*(char)
)	O
break	O
;	O
case	O
'r'	O
:	O
if	O
(	O
!	O
rev	*(char)
[	O
1	int
]	O
)	O
rev	*(char)
[	O
1	int
]	O
=	O
a	*(char)
;	O
else	O
if	O
(	O
!	O
rev	*(char)
[	O
2	int
]	O
)	O
rev	*(char)
[	O
2	int
]	O
=	O
a	*(char)
;	O
else	O
PERR	O
(	O
"too many %ss"	*(char)
,	O
ks_revno	array(char)
)	O
;	O
break	O
;	O
case	O
'A'	O
:	O
case	O
'E'	O
:	O
case	O
'e'	O
:	O
if	O
(	O
*	O
a	*(char)
)	O
goto	O
unknown	O
;	O
edarg	*(char)
=	O
*	O
argv	*(*(char))
;	O
break	O
;	O
case	O
'x'	O
:	O
suffixarg	*(char)
=	O
*	O
argv	*(*(char))
;	O
BE	O
(	O
pe	*(char)
)	O
=	O
a	*(char)
;	O
break	O
;	O
case	O
'z'	O
:	O
zonearg	*(char)
=	O
*	O
argv	*(*(char))
;	O
zone_set	(*(char))->(void)
(	O
a	*(char)
)	O
;	O
break	O
;	O
case	O
'T'	O
:	O
if	O
(	O
*	O
a	*(char)
)	O
goto	O
unknown	O
;	O
break	O
;	O
case	O
'V'	O
:	O
versionarg	*(char)
=	O
*	O
argv	*(*(char))
;	O
setRCSversion	(*(char))->(void)
(	O
versionarg	*(char)
)	O
;	O
break	O
;	O
case	O
'k'	O
:	O
expandarg	*(char)
=	O
*	O
argv	*(*(char))
;	O
if	O
(	O
0	int
<=	O
str2expmode	(*(char))->(int)
(	O
expandarg	*(char)
+	O
2	int
)	O
)	O
break	O
;	O
default	O
:	O
unknown	O
:	O
bad_option	(*(char))->(void)
(	O
*	O
argv	*(*(char))
)	O
;	O
}	O
;	O
}	O
if	O
(	O
!	O
rev	*(char)
[	O
1	int
]	O
)	O
PFATAL	O
(	O
"no base %s given"	*(char)
,	O
ks_revno	array(char)
)	O
;	O
if	O
(	O
!	O
FLOW	O
(	O
erroneousp	bool
)	O
)	O
{	O
if	O
(	O
argc	int
<	O
1	int
)	O
PFATAL	O
(	O
"no input file"	*(char)
)	O
;	O
if	O
(	O
0	int
<	O
pairnames	(int,*(*(char)),*((*(struct(*`,bool,struct`,*`,struct`,*`,int)))->(*(struct))),bool,bool)->(int)
(	O
argc	int
,	O
argv	*(*(char))
,	O
rcsreadopen	(*(struct(*((*`)->(*`)),bool,struct(*(char),long),*(struct),struct(*(char),long),*(struct(long,long,long,int,int,int,int,long,long,long,long,struct`,struct`,struct`,array(long))),int)))->(*(struct))
,	O
true	int
,	O
false	int
)	O
)	O
{	O
struct	O
cbuf	struct(*(char),long)
numericrev	struct(*(char),long)
;	O
char	O
const	O
*	O
repo_filename	*(char)
=	O
REPO	O
(	O
filename	*(char)
)	O
;	O
char	O
const	O
*	O
mani_filename	*(char)
=	O
MANI	O
(	O
filename	*(char)
)	O
;	O
char	O
const	O
*	O
defbr	*(char)
=	O
GROK	O
(	O
branch	*(char)
)	O
;	O
struct	O
delta	struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long)),bool,long)
*	O
tip	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
=	O
REPO	O
(	O
tip	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
)	O
;	O
if	O
(	O
argc	int
>	O
2	int
||	O
(	O
argc	int
==	O
2	int
&&	O
argv	*(*(char))
[	O
1	int
]	O
)	O
)	O
PWARN	O
(	O
"excess arguments ignored"	*(char)
)	O
;	O
if	O
(	O
BE	O
(	O
kws	int
)	O
==	O
kwsub_b	int
)	O
MERR	O
(	O
"merging binary files"	*(char)
)	O
;	O
diagnose	(*(char))->(void)
(	O
"RCS file: %s"	*(char)
,	O
repo_filename	*(char)
)	O
;	O
if	O
(	O
!	O
(	O
workptr	*(struct(int,long,enum(int,int,int),*(char),*(char),*(char),*((*(struct`))->(void)),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),long))
=	O
fro_open	(*(char),*(char),*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))))->(*(struct(int,long,enum(int,int,int),*(char),*(char),*(char),*((*`)->(void)),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),long)))
(	O
mani_filename	*(char)
,	O
FOPEN_R_WORK	*(char)
,	O
NULL	O
)	O
)	O
)	O
fatal_sys	(*(char))->(void)
(	O
mani_filename	*(char)
)	O
;	O
if	O
(	O
!	O
tip	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
)	O
RFATAL	O
(	O
"no revisions present"	*(char)
)	O
;	O
if	O
(	O
!	O
*	O
rev	*(char)
[	O
1	int
]	O
)	O
rev	*(char)
[	O
1	int
]	O
=	O
defbr	*(char)
?	O
defbr	*(char)
:	O
tip	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
num	*(char)
;	O
if	O
(	O
fully_numeric	(*(struct(*(char),long)),*(char),*(struct))->(bool)
(	O
&	O
numericrev	struct(*(char),long)
,	O
rev	*(char)
[	O
1	int
]	O
,	O
workptr	*(struct(int,long,enum(int,int,int),*(char),*(char),*(char),*((*(struct`))->(void)),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),long))
)	O
&&	O
(	O
target	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)))
=	O
delta_from_ref	(*(char))->(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)))
(	O
numericrev	struct(*(char),long)
.	O
string	*(char)
)	O
)	O
)	O
{	O
LABEL	O
(	O
1	int
)	O
=	O
target	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)))
->	O
num	*(char)
;	O
if	O
(	O
!	O
rev	*(char)
[	O
2	int
]	O
||	O
!	O
*	O
rev	*(char)
[	O
2	int
]	O
)	O
rev	*(char)
[	O
2	int
]	O
=	O
defbr	*(char)
?	O
defbr	*(char)
:	O
tip	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
num	*(char)
;	O
if	O
(	O
fully_numeric	(*(struct(*(char),long)),*(char),*(struct))->(bool)
(	O
&	O
numericrev	struct(*(char),long)
,	O
rev	*(char)
[	O
2	int
]	O
,	O
workptr	*(struct(int,long,enum(int,int,int),*(char),*(char),*(char),*((*(struct`))->(void)),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),long))
)	O
&&	O
(	O
target	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)))
=	O
delta_from_ref	(*(char))->(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)))
(	O
numericrev	struct(*(char),long)
.	O
string	*(char)
)	O
)	O
)	O
{	O
LABEL	O
(	O
2	int
)	O
=	O
target	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)))
->	O
num	*(char)
;	O
if	O
(	O
STR_SAME	O
(	O
LABEL	O
(	O
1	int
)	O
,	O
LABEL	O
(	O
2	int
)	O
)	O
)	O
{	O
if	O
(	O
tostdout	bool
)	O
{	O
fro_spew	(*(struct(int,long,enum(int,int,int),*(char),*(char),*(char),*((*`)->(void)),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),long)),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(void)
(	O
workptr	*(struct(int,long,enum(int,int,int),*(char),*(char),*(char),*((*(struct`))->(void)),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),long))
,	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
fclose	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
}	O
}	O
else	O
{	O
fro_zclose	(*(*(struct(int,long,enum(int,int,int),*(char),*(char),*(char),*((*`)->(void)),*(struct`),long))))->(void)
(	O
&	O
workptr	*(struct(int,long,enum(int,int,int),*(char),*(char),*(char),*((*(struct`))->(void)),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),long))
)	O
;	O
for	O
(	O
i	int
=	O
1	int
;	O
i	int
<=	O
2	int
;	O
i	int
++	O
)	O
{	O
struct	O
cbuf	struct(*(char),long)
commarg	struct(*(char),long)
=	O
minus_p	(*(char),*(char))->(struct(*(char),long))
(	O
LABEL	O
(	O
i	int
)	O
,	O
rev	*(char)
[	O
i	int
]	O
)	O
;	O
if	O
(	O
run	(int,*(char))->(int)
(	O
-	O
1	int
,	O
FNAME	O
(	O
i	int
)	O
=	O
maketemp	(int)->(*(char))
(	O
i	int
+	O
2	int
)	O
,	O
PEER_CO	O
(	O
)	O
,	O
quietarg	*(char)
,	O
commarg	struct(*(char),long)
.	O
string	*(char)
,	O
expandarg	*(char)
,	O
suffixarg	*(char)
,	O
versionarg	*(char)
,	O
zonearg	*(char)
,	O
repo_filename	*(char)
,	O
NULL	O
)	O
)	O
RFATAL	O
(	O
"co failed"	*(char)
)	O
;	O
}	O
diagnose	(*(char))->(void)
(	O
"Merging differences between %s and %s into %s%s"	*(char)
,	O
LABEL	O
(	O
1	int
)	O
,	O
LABEL	O
(	O
2	int
)	O
,	O
mani_filename	*(char)
,	O
tostdout	bool
?	O
"; result to stdout"	*(char)
:	O
""	*(char)
)	O
;	O
FNAME	O
(	O
0	int
)	O
=	O
LABEL	O
(	O
0	int
)	O
=	O
mani_filename	*(char)
;	O
status	int
=	O
merge	(bool,*(char),array(struct(*(char),*(char))))->(int)
(	O
tostdout	bool
,	O
edarg	*(char)
,	O
three_manifestations	array(struct(*(char),*(char)))
)	O
;	O
}	O
}	O
}	O
fro_zclose	(*(*(struct(int,long,enum(int,int,int),*(char),*(char),*(char),*((*`)->(void)),*(struct`),long))))->(void)
(	O
&	O
workptr	*(struct(int,long,enum(int,int,int),*(char),*(char),*(char),*((*(struct`))->(void)),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),long))
)	O
;	O
}	O
}	O
tempunlink	()->(void)
(	O
)	O
;	O
exitstatus	int
=	O
FLOW	O
(	O
erroneousp	bool
)	O
?	O
DIFF_TROUBLE	int
:	O
status	int
;	O
gnurcs_goodbye	()->(void)
(	O
)	O
;	O
return	O
exitstatus	int
;	O
}	O
