typedef	O
struct	O
{	O
size_t	long
n	int
;	O
size_t	long
p	int
;	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
dx_gn	*(struct(long,long,*(double),*(struct(long,*(double))),int))
;	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
dx_sd	*(struct(long,long,*(double),*(struct(long,*(double))),int))
;	O
double	O
norm_Dgn	double
;	O
double	O
norm_Dsd	double
;	O
double	O
norm_Dinvg	double
;	O
double	O
norm_JDinv2g	double
;	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
workp	*(struct(long,long,*(double),*(struct(long,*(double))),int))
;	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
workn	*(struct(long,long,*(double),*(struct(long,*(double))),int))
;	O
gsl_multifit_nlinear_parameters	struct(*(struct(*(char),*((*`,long,long)->(*`)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,double,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`)->(void)))),*(struct(*(char),*((*`,*`)->(int)),*((*`,*`)->(int)))),*(struct(*(char),*((long,long)->(*`)),*((*`,*`)->(int)),*((double,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(void)))),enum(int,int),double,double,double,double,double)
params	*(void)
;	O
}	O
dogleg_state_t	struct(long,long,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),double,double,double,double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),struct(*(struct(*(char),*((*`,long,long)->(*`)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,double,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`)->(void)))),*(struct(*(char),*((*`,*`)->(int)),*((*`,*`)->(int)))),*(struct(*(char),*((long,long)->(*`)),*((*`,*`)->(int)),*((double,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(void)))),enum(int,int),double,double,double,double,double))
;	O
static	O
void	O
*	O
dogleg_alloc	(*(void),long,long)->(*(void))
(	O
const	O
void	O
*	O
params	*(void)
,	O
const	O
size_t	long
n	int
,	O
const	O
size_t	long
p	int
)	O
;	O
static	O
void	O
dogleg_free	(*(void))->(void)
(	O
void	O
*	O
vstate	*(void)
)	O
;	O
static	O
int	O
dogleg_init	(*(void),*(void))->(int)
(	O
const	O
void	O
*	O
vtrust_state	*(void)
,	O
void	O
*	O
vstate	*(void)
)	O
;	O
static	O
int	O
dogleg_preloop	(*(void),*(void))->(int)
(	O
const	O
void	O
*	O
vtrust_state	*(void)
,	O
void	O
*	O
vstate	*(void)
)	O
;	O
static	O
int	O
dogleg_step	(*(void),double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(void))->(int)
(	O
const	O
void	O
*	O
vtrust_state	*(void)
,	O
const	O
double	O
delta	double
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
dx	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
void	O
*	O
vstate	*(void)
)	O
;	O
static	O
int	O
dogleg_double_step	(*(void),double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(void))->(int)
(	O
const	O
void	O
*	O
vtrust_state	*(void)
,	O
const	O
double	O
delta	double
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
dx	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
void	O
*	O
vstate	*(void)
)	O
;	O
static	O
int	O
dogleg_preduction	(*(void),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(double),*(void))->(int)
(	O
const	O
void	O
*	O
vtrust_state	*(void)
,	O
const	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
dx	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
double	O
*	O
pred	*(double)
,	O
void	O
*	O
vstate	*(void)
)	O
;	O
static	O
int	O
dogleg_calc_gn	(*(struct(*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(double),*(struct(*`,*`,*`,enum(int,int),double,double,double,double,double)),*(void),*(struct(*`,*`,*`,long,long,*`,long,long,long)),*(double))),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
const	O
gsl_multifit_nlinear_trust_state	struct(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(double),*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`)),enum(int,int),double,double,double,double,double)),*(void),*(struct(*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),long,long,*(void),long,long,long)),*(double))
*	O
trust_state	*(struct(*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(double),*(struct(*(struct`),*(struct`),*(struct`),enum(int,int),double,double,double,double,double)),*(void),*(struct(*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),long,long,*(void),long,long,long)),*(double)))
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
dx	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
static	O
double	O
dogleg_beta	(double,double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),double,double,double,double,*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),struct(*(struct`),*(struct`),*(struct`),enum(int,int),double,double,double,double,double))))->(double)
(	O
const	O
double	O
t	double
,	O
const	O
double	O
delta	double
,	O
const	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
diag	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
dogleg_state_t	struct(long,long,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),double,double,double,double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),struct(*(struct(*(char),*((*`,long,long)->(*`)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,double,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`)->(void)))),*(struct(*(char),*((*`,*`)->(int)),*((*`,*`)->(int)))),*(struct(*(char),*((long,long)->(*`)),*((*`,*`)->(int)),*((double,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(void)))),enum(int,int),double,double,double,double,double))
*	O
state	*(int)
)	O
;	O
static	O
void	O
*	O
dogleg_alloc	(*(void),long,long)->(*(void))
(	O
const	O
void	O
*	O
params	*(void)
,	O
const	O
size_t	long
n	int
,	O
const	O
size_t	long
p	int
)	O
{	O
const	O
gsl_multifit_nlinear_parameters	struct(*(struct(*(char),*((*`,long,long)->(*`)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,double,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`)->(void)))),*(struct(*(char),*((*`,*`)->(int)),*((*`,*`)->(int)))),*(struct(*(char),*((long,long)->(*`)),*((*`,*`)->(int)),*((double,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(void)))),enum(int,int),double,double,double,double,double)
*	O
mparams	*(struct(*(struct(*(char),*((*`,long,long)->(*`)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,double,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`)->(void)))),*(struct(*(char),*((*`,*`)->(int)),*((*`,*`)->(int)))),*(struct(*(char),*((long,long)->(*`)),*((*`,*`)->(int)),*((double,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(void)))),enum(int,int),double,double,double,double,double))
=	O
(	O
const	O
gsl_multifit_nlinear_parameters	struct(*(struct(*(char),*((*`,long,long)->(*`)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,double,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`)->(void)))),*(struct(*(char),*((*`,*`)->(int)),*((*`,*`)->(int)))),*(struct(*(char),*((long,long)->(*`)),*((*`,*`)->(int)),*((double,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(void)))),enum(int,int),double,double,double,double,double)
*	O
)	O
params	*(void)
;	O
dogleg_state_t	struct(long,long,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),double,double,double,double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),struct(*(struct(*(char),*((*`,long,long)->(*`)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,double,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`)->(void)))),*(struct(*(char),*((*`,*`)->(int)),*((*`,*`)->(int)))),*(struct(*(char),*((long,long)->(*`)),*((*`,*`)->(int)),*((double,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(void)))),enum(int,int),double,double,double,double,double))
*	O
state	*(int)
;	O
state	*(int)
=	O
calloc	(long,long)->(*(void))
(	O
1	int
,	O
sizeof	O
(	O
dogleg_state_t	struct(long,long,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),double,double,double,double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),struct(*(struct(*(char),*((*`,long,long)->(*`)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,double,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`)->(void)))),*(struct(*(char),*((*`,*`)->(int)),*((*`,*`)->(int)))),*(struct(*(char),*((long,long)->(*`)),*((*`,*`)->(int)),*((double,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(void)))),enum(int,int),double,double,double,double,double))
)	O
)	O
;	O
if	O
(	O
state	*(int)
==	O
NULL	O
)	O
{	O
GSL_ERROR_NULL	O
(	O
"failed to allocate dogleg state"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	*(int)
->	O
dx_gn	*(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_vector_alloc	(long)->(*(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
p	int
)	O
;	O
if	O
(	O
state	*(int)
->	O
dx_gn	*(struct(long,long,*(double),*(struct(long,*(double))),int))
==	O
NULL	O
)	O
{	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for dx_gn"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	*(int)
->	O
dx_sd	*(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_vector_alloc	(long)->(*(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
p	int
)	O
;	O
if	O
(	O
state	*(int)
->	O
dx_sd	*(struct(long,long,*(double),*(struct(long,*(double))),int))
==	O
NULL	O
)	O
{	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for dx_sd"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	*(int)
->	O
workp	*(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_vector_alloc	(long)->(*(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
p	int
)	O
;	O
if	O
(	O
state	*(int)
->	O
workp	*(struct(long,long,*(double),*(struct(long,*(double))),int))
==	O
NULL	O
)	O
{	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for workp"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	*(int)
->	O
workn	*(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_vector_alloc	(long)->(*(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
n	int
)	O
;	O
if	O
(	O
state	*(int)
->	O
workn	*(struct(long,long,*(double),*(struct(long,*(double))),int))
==	O
NULL	O
)	O
{	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for workn"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	*(int)
->	O
n	int
=	O
n	int
;	O
state	*(int)
->	O
p	int
=	O
p	int
;	O
state	*(int)
->	O
params	*(void)
=	O
*	O
mparams	*(struct(*(struct(*(char),*((*`,long,long)->(*`)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,double,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`)->(void)))),*(struct(*(char),*((*`,*`)->(int)),*((*`,*`)->(int)))),*(struct(*(char),*((long,long)->(*`)),*((*`,*`)->(int)),*((double,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(void)))),enum(int,int),double,double,double,double,double))
;	O
return	O
state	*(int)
;	O
}	O
static	O
void	O
dogleg_free	(*(void))->(void)
(	O
void	O
*	O
vstate	*(void)
)	O
{	O
dogleg_state_t	struct(long,long,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),double,double,double,double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),struct(*(struct(*(char),*((*`,long,long)->(*`)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,double,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`)->(void)))),*(struct(*(char),*((*`,*`)->(int)),*((*`,*`)->(int)))),*(struct(*(char),*((long,long)->(*`)),*((*`,*`)->(int)),*((double,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(void)))),enum(int,int),double,double,double,double,double))
*	O
state	*(int)
=	O
(	O
dogleg_state_t	struct(long,long,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),double,double,double,double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),struct(*(struct(*(char),*((*`,long,long)->(*`)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,double,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`)->(void)))),*(struct(*(char),*((*`,*`)->(int)),*((*`,*`)->(int)))),*(struct(*(char),*((long,long)->(*`)),*((*`,*`)->(int)),*((double,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(void)))),enum(int,int),double,double,double,double,double))
*	O
)	O
vstate	*(void)
;	O
if	O
(	O
state	*(int)
->	O
dx_gn	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
state	*(int)
->	O
dx_gn	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
if	O
(	O
state	*(int)
->	O
dx_sd	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
state	*(int)
->	O
dx_sd	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
if	O
(	O
state	*(int)
->	O
workp	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
state	*(int)
->	O
workp	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
if	O
(	O
state	*(int)
->	O
workn	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
state	*(int)
->	O
workn	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
)	O
;	O
}	O
static	O
int	O
dogleg_init	(*(void),*(void))->(int)
(	O
const	O
void	O
*	O
vtrust_state	*(void)
,	O
void	O
*	O
vstate	*(void)
)	O
{	O
(	O
void	O
)	O
vtrust_state	*(void)
;	O
(	O
void	O
)	O
vstate	*(void)
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
int	O
dogleg_preloop	(*(void),*(void))->(int)
(	O
const	O
void	O
*	O
vtrust_state	*(void)
,	O
void	O
*	O
vstate	*(void)
)	O
{	O
const	O
gsl_multifit_nlinear_trust_state	struct(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(double),*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`)),enum(int,int),double,double,double,double,double)),*(void),*(struct(*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),long,long,*(void),long,long,long)),*(double))
*	O
trust_state	*(struct(*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(double),*(struct(*(struct`),*(struct`),*(struct`),enum(int,int),double,double,double,double,double)),*(void),*(struct(*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),long,long,*(void),long,long,long)),*(double)))
=	O
(	O
const	O
gsl_multifit_nlinear_trust_state	struct(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(double),*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`)),enum(int,int),double,double,double,double,double)),*(void),*(struct(*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),long,long,*(void),long,long,long)),*(double))
*	O
)	O
vtrust_state	*(void)
;	O
dogleg_state_t	struct(long,long,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),double,double,double,double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),struct(*(struct(*(char),*((*`,long,long)->(*`)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,double,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`)->(void)))),*(struct(*(char),*((*`,*`)->(int)),*((*`,*`)->(int)))),*(struct(*(char),*((long,long)->(*`)),*((*`,*`)->(int)),*((double,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(void)))),enum(int,int),double,double,double,double,double))
*	O
state	*(int)
=	O
(	O
dogleg_state_t	struct(long,long,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),double,double,double,double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),struct(*(struct(*(char),*((*`,long,long)->(*`)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,double,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`)->(void)))),*(struct(*(char),*((*`,*`)->(int)),*((*`,*`)->(int)))),*(struct(*(char),*((long,long)->(*`)),*((*`,*`)->(int)),*((double,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(void)))),enum(int,int),double,double,double,double,double))
*	O
)	O
vstate	*(void)
;	O
double	O
u	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
;	O
double	O
alpha	long double
;	O
gsl_vector_memcpy	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
state	*(int)
->	O
workp	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
trust_state	*(struct(*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(double),*(struct(*(struct`),*(struct`),*(struct`),enum(int,int),double,double,double,double,double)),*(void),*(struct(*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),long,long,*(void),long,long,long)),*(double)))
->	O
g	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_div	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
state	*(int)
->	O
workp	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
trust_state	*(struct(*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(double),*(struct(*(struct`),*(struct`),*(struct`),enum(int,int),double,double,double,double,double)),*(void),*(struct(*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),long,long,*(void),long,long,long)),*(double)))
->	O
diag	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
state	*(int)
->	O
norm_Dinvg	double
=	O
gsl_blas_dnrm2	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(double)
(	O
state	*(int)
->	O
workp	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_div	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
state	*(int)
->	O
workp	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
trust_state	*(struct(*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(double),*(struct(*(struct`),*(struct`),*(struct`),enum(int,int),double,double,double,double,double)),*(void),*(struct(*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),long,long,*(void),long,long,long)),*(double)))
->	O
diag	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_blas_dgemv	(enum(int,int,int),double,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),double,*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
CblasNoTrans	int
,	O
1.0	int
,	O
trust_state	*(struct(*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(double),*(struct(*(struct`),*(struct`),*(struct`),enum(int,int),double,double,double,double,double)),*(void),*(struct(*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),long,long,*(void),long,long,long)),*(double)))
->	O
J	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
state	*(int)
->	O
workp	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
0.0	int
,	O
state	*(int)
->	O
workn	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
state	*(int)
->	O
norm_JDinv2g	double
=	O
gsl_blas_dnrm2	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(double)
(	O
state	*(int)
->	O
workn	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
u	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
=	O
state	*(int)
->	O
norm_Dinvg	double
/	O
state	*(int)
->	O
norm_JDinv2g	double
;	O
alpha	long double
=	O
u	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
*	O
u	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
;	O
gsl_vector_memcpy	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
state	*(int)
->	O
dx_sd	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
state	*(int)
->	O
workp	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_scale	(*(struct(long,long,*(double),*(struct(long,*`)),int)),double)->(int)
(	O
state	*(int)
->	O
dx_sd	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
-	O
alpha	long double
)	O
;	O
state	*(int)
->	O
norm_Dsd	double
=	O
scaled_enorm	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(double)
(	O
trust_state	*(struct(*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(double),*(struct(*(struct`),*(struct`),*(struct`),enum(int,int),double,double,double,double,double)),*(void),*(struct(*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),long,long,*(void),long,long,long)),*(double)))
->	O
diag	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
state	*(int)
->	O
dx_sd	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
state	*(int)
->	O
norm_Dgn	double
=	O
-	O
1.0	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
int	O
dogleg_step	(*(void),double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(void))->(int)
(	O
const	O
void	O
*	O
vtrust_state	*(void)
,	O
const	O
double	O
delta	double
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
dx	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
void	O
*	O
vstate	*(void)
)	O
{	O
const	O
gsl_multifit_nlinear_trust_state	struct(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(double),*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`)),enum(int,int),double,double,double,double,double)),*(void),*(struct(*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),long,long,*(void),long,long,long)),*(double))
*	O
trust_state	*(struct(*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(double),*(struct(*(struct`),*(struct`),*(struct`),enum(int,int),double,double,double,double,double)),*(void),*(struct(*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),long,long,*(void),long,long,long)),*(double)))
=	O
(	O
const	O
gsl_multifit_nlinear_trust_state	struct(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(double),*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`)),enum(int,int),double,double,double,double,double)),*(void),*(struct(*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),long,long,*(void),long,long,long)),*(double))
*	O
)	O
vtrust_state	*(void)
;	O
dogleg_state_t	struct(long,long,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),double,double,double,double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),struct(*(struct(*(char),*((*`,long,long)->(*`)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,double,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`)->(void)))),*(struct(*(char),*((*`,*`)->(int)),*((*`,*`)->(int)))),*(struct(*(char),*((long,long)->(*`)),*((*`,*`)->(int)),*((double,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(void)))),enum(int,int),double,double,double,double,double))
*	O
state	*(int)
=	O
(	O
dogleg_state_t	struct(long,long,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),double,double,double,double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),struct(*(struct(*(char),*((*`,long,long)->(*`)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,double,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`)->(void)))),*(struct(*(char),*((*`,*`)->(int)),*((*`,*`)->(int)))),*(struct(*(char),*((long,long)->(*`)),*((*`,*`)->(int)),*((double,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(void)))),enum(int,int),double,double,double,double,double))
*	O
)	O
vstate	*(void)
;	O
if	O
(	O
state	*(int)
->	O
norm_Dsd	double
>=	O
delta	double
)	O
{	O
gsl_vector_memcpy	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
dx	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
state	*(int)
->	O
dx_sd	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_scale	(*(struct(long,long,*(double),*(struct(long,*`)),int)),double)->(int)
(	O
dx	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
delta	double
/	O
state	*(int)
->	O
norm_Dsd	double
)	O
;	O
}	O
else	O
{	O
if	O
(	O
state	*(int)
->	O
norm_Dgn	double
<	O
0.0	int
)	O
{	O
int	O
status	int
=	O
dogleg_calc_gn	(*(struct(*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(double),*(struct(*`,*`,*`,enum(int,int),double,double,double,double,double)),*(void),*(struct(*`,*`,*`,long,long,*`,long,long,long)),*(double))),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
trust_state	*(struct(*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(double),*(struct(*(struct`),*(struct`),*(struct`),enum(int,int),double,double,double,double,double)),*(void),*(struct(*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),long,long,*(void),long,long,long)),*(double)))
,	O
state	*(int)
->	O
dx_gn	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
state	*(int)
->	O
norm_Dgn	double
=	O
scaled_enorm	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(double)
(	O
trust_state	*(struct(*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(double),*(struct(*(struct`),*(struct`),*(struct`),enum(int,int),double,double,double,double,double)),*(void),*(struct(*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),long,long,*(void),long,long,long)),*(double)))
->	O
diag	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
state	*(int)
->	O
dx_gn	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
}	O
if	O
(	O
state	*(int)
->	O
norm_Dgn	double
<=	O
delta	double
)	O
{	O
gsl_vector_memcpy	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
dx	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
state	*(int)
->	O
dx_gn	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
}	O
else	O
{	O
double	O
beta	long double
=	O
dogleg_beta	(double,double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),double,double,double,double,*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),struct(*(struct`),*(struct`),*(struct`),enum(int,int),double,double,double,double,double))))->(double)
(	O
1.0	int
,	O
delta	double
,	O
trust_state	*(struct(*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(double),*(struct(*(struct`),*(struct`),*(struct`),enum(int,int),double,double,double,double,double)),*(void),*(struct(*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),long,long,*(void),long,long,long)),*(double)))
->	O
diag	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
state	*(int)
)	O
;	O
scaled_addition	(double,*(struct(long,long,*(double),*(struct(long,*`)),int)),double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
1.0	int
,	O
state	*(int)
->	O
dx_gn	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
-	O
1.0	int
,	O
state	*(int)
->	O
dx_sd	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
state	*(int)
->	O
workp	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
scaled_addition	(double,*(struct(long,long,*(double),*(struct(long,*`)),int)),double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
beta	long double
,	O
state	*(int)
->	O
workp	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
1.0	int
,	O
state	*(int)
->	O
dx_sd	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
dx	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
}	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
int	O
dogleg_double_step	(*(void),double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(void))->(int)
(	O
const	O
void	O
*	O
vtrust_state	*(void)
,	O
const	O
double	O
delta	double
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
dx	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
void	O
*	O
vstate	*(void)
)	O
{	O
const	O
double	O
alpha_fac	double
=	O
0.8	int
;	O
const	O
gsl_multifit_nlinear_trust_state	struct(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(double),*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`)),enum(int,int),double,double,double,double,double)),*(void),*(struct(*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),long,long,*(void),long,long,long)),*(double))
*	O
trust_state	*(struct(*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(double),*(struct(*(struct`),*(struct`),*(struct`),enum(int,int),double,double,double,double,double)),*(void),*(struct(*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),long,long,*(void),long,long,long)),*(double)))
=	O
(	O
const	O
gsl_multifit_nlinear_trust_state	struct(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(double),*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`)),enum(int,int),double,double,double,double,double)),*(void),*(struct(*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),long,long,*(void),long,long,long)),*(double))
*	O
)	O
vtrust_state	*(void)
;	O
dogleg_state_t	struct(long,long,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),double,double,double,double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),struct(*(struct(*(char),*((*`,long,long)->(*`)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,double,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`)->(void)))),*(struct(*(char),*((*`,*`)->(int)),*((*`,*`)->(int)))),*(struct(*(char),*((long,long)->(*`)),*((*`,*`)->(int)),*((double,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(void)))),enum(int,int),double,double,double,double,double))
*	O
state	*(int)
=	O
(	O
dogleg_state_t	struct(long,long,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),double,double,double,double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),struct(*(struct(*(char),*((*`,long,long)->(*`)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,double,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`)->(void)))),*(struct(*(char),*((*`,*`)->(int)),*((*`,*`)->(int)))),*(struct(*(char),*((long,long)->(*`)),*((*`,*`)->(int)),*((double,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(void)))),enum(int,int),double,double,double,double,double))
*	O
)	O
vstate	*(void)
;	O
if	O
(	O
state	*(int)
->	O
norm_Dsd	double
>=	O
delta	double
)	O
{	O
gsl_vector_memcpy	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
dx	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
state	*(int)
->	O
dx_sd	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_scale	(*(struct(long,long,*(double),*(struct(long,*`)),int)),double)->(int)
(	O
dx	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
delta	double
/	O
state	*(int)
->	O
norm_Dsd	double
)	O
;	O
}	O
else	O
{	O
if	O
(	O
state	*(int)
->	O
norm_Dgn	double
<	O
0.0	int
)	O
{	O
int	O
status	int
=	O
dogleg_calc_gn	(*(struct(*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(double),*(struct(*`,*`,*`,enum(int,int),double,double,double,double,double)),*(void),*(struct(*`,*`,*`,long,long,*`,long,long,long)),*(double))),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
trust_state	*(struct(*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(double),*(struct(*(struct`),*(struct`),*(struct`),enum(int,int),double,double,double,double,double)),*(void),*(struct(*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),long,long,*(void),long,long,long)),*(double)))
,	O
state	*(int)
->	O
dx_gn	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
state	*(int)
->	O
norm_Dgn	double
=	O
scaled_enorm	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(double)
(	O
trust_state	*(struct(*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(double),*(struct(*(struct`),*(struct`),*(struct`),enum(int,int),double,double,double,double,double)),*(void),*(struct(*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),long,long,*(void),long,long,long)),*(double)))
->	O
diag	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
state	*(int)
->	O
dx_gn	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
}	O
if	O
(	O
state	*(int)
->	O
norm_Dgn	double
<=	O
delta	double
)	O
{	O
gsl_vector_memcpy	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
dx	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
state	*(int)
->	O
dx_gn	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
}	O
else	O
{	O
double	O
t	double
,	O
u	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
,	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
,	O
c	*(float)
;	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
=	O
state	*(int)
->	O
norm_Dinvg	double
/	O
state	*(int)
->	O
norm_JDinv2g	double
;	O
u	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
=	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
*	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
;	O
gsl_blas_ddot	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(double))->(int)
(	O
trust_state	*(struct(*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(double),*(struct(*(struct`),*(struct`),*(struct`),enum(int,int),double,double,double,double,double)),*(void),*(struct(*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),long,long,*(void),long,long,long)),*(double)))
->	O
g	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
state	*(int)
->	O
dx_gn	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
&	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
)	O
;	O
c	*(float)
=	O
u	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
*	O
(	O
state	*(int)
->	O
norm_Dinvg	double
/	O
fabs	(double)->(double)
(	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
)	O
)	O
*	O
state	*(int)
->	O
norm_Dinvg	double
;	O
t	double
=	O
1.0	int
-	O
alpha_fac	double
*	O
(	O
1.0	int
-	O
c	*(float)
)	O
;	O
if	O
(	O
t	double
*	O
state	*(int)
->	O
norm_Dgn	double
<=	O
delta	double
)	O
{	O
gsl_vector_memcpy	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
dx	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
state	*(int)
->	O
dx_gn	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_scale	(*(struct(long,long,*(double),*(struct(long,*`)),int)),double)->(int)
(	O
dx	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
delta	double
/	O
state	*(int)
->	O
norm_Dgn	double
)	O
;	O
}	O
else	O
{	O
double	O
beta	long double
=	O
dogleg_beta	(double,double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),double,double,double,double,*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),struct(*(struct`),*(struct`),*(struct`),enum(int,int),double,double,double,double,double))))->(double)
(	O
t	double
,	O
delta	double
,	O
trust_state	*(struct(*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(double),*(struct(*(struct`),*(struct`),*(struct`),enum(int,int),double,double,double,double,double)),*(void),*(struct(*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),long,long,*(void),long,long,long)),*(double)))
->	O
diag	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
state	*(int)
)	O
;	O
scaled_addition	(double,*(struct(long,long,*(double),*(struct(long,*`)),int)),double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
t	double
,	O
state	*(int)
->	O
dx_gn	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
-	O
1.0	int
,	O
state	*(int)
->	O
dx_sd	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
state	*(int)
->	O
workp	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
scaled_addition	(double,*(struct(long,long,*(double),*(struct(long,*`)),int)),double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
beta	long double
,	O
state	*(int)
->	O
workp	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
1.0	int
,	O
state	*(int)
->	O
dx_sd	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
dx	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
}	O
}	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
int	O
dogleg_preduction	(*(void),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(double),*(void))->(int)
(	O
const	O
void	O
*	O
vtrust_state	*(void)
,	O
const	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
dx	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
double	O
*	O
pred	*(double)
,	O
void	O
*	O
vstate	*(void)
)	O
{	O
const	O
gsl_multifit_nlinear_trust_state	struct(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(double),*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`)),enum(int,int),double,double,double,double,double)),*(void),*(struct(*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),long,long,*(void),long,long,long)),*(double))
*	O
trust_state	*(struct(*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(double),*(struct(*(struct`),*(struct`),*(struct`),enum(int,int),double,double,double,double,double)),*(void),*(struct(*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),long,long,*(void),long,long,long)),*(double)))
=	O
(	O
const	O
gsl_multifit_nlinear_trust_state	struct(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(double),*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`)),enum(int,int),double,double,double,double,double)),*(void),*(struct(*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),long,long,*(void),long,long,long)),*(double))
*	O
)	O
vtrust_state	*(void)
;	O
dogleg_state_t	struct(long,long,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),double,double,double,double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),struct(*(struct(*(char),*((*`,long,long)->(*`)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,double,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`)->(void)))),*(struct(*(char),*((*`,*`)->(int)),*((*`,*`)->(int)))),*(struct(*(char),*((long,long)->(*`)),*((*`,*`)->(int)),*((double,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(void)))),enum(int,int),double,double,double,double,double))
*	O
state	*(int)
=	O
(	O
dogleg_state_t	struct(long,long,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),double,double,double,double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),struct(*(struct(*(char),*((*`,long,long)->(*`)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,double,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`)->(void)))),*(struct(*(char),*((*`,*`)->(int)),*((*`,*`)->(int)))),*(struct(*(char),*((long,long)->(*`)),*((*`,*`)->(int)),*((double,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(void)))),enum(int,int),double,double,double,double,double))
*	O
)	O
vstate	*(void)
;	O
*	O
pred	*(double)
=	O
quadratic_preduction	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(double)
(	O
trust_state	*(struct(*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(double),*(struct(*(struct`),*(struct`),*(struct`),enum(int,int),double,double,double,double,double)),*(void),*(struct(*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),long,long,*(void),long,long,long)),*(double)))
->	O
f	*(double)
,	O
trust_state	*(struct(*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(double),*(struct(*(struct`),*(struct`),*(struct`),enum(int,int),double,double,double,double,double)),*(void),*(struct(*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),long,long,*(void),long,long,long)),*(double)))
->	O
J	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
dx	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
state	*(int)
->	O
workn	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
int	O
dogleg_calc_gn	(*(struct(*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(double),*(struct(*`,*`,*`,enum(int,int),double,double,double,double,double)),*(void),*(struct(*`,*`,*`,long,long,*`,long,long,long)),*(double))),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
const	O
gsl_multifit_nlinear_trust_state	struct(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(double),*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`)),enum(int,int),double,double,double,double,double)),*(void),*(struct(*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),long,long,*(void),long,long,long)),*(double))
*	O
trust_state	*(struct(*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(double),*(struct(*(struct`),*(struct`),*(struct`),enum(int,int),double,double,double,double,double)),*(void),*(struct(*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),long,long,*(void),long,long,long)),*(double)))
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
dx	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
{	O
int	O
status	int
;	O
const	O
gsl_multifit_nlinear_parameters	struct(*(struct(*(char),*((*`,long,long)->(*`)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,double,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`)->(void)))),*(struct(*(char),*((*`,*`)->(int)),*((*`,*`)->(int)))),*(struct(*(char),*((long,long)->(*`)),*((*`,*`)->(int)),*((double,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(void)))),enum(int,int),double,double,double,double,double)
*	O
params	*(void)
=	O
trust_state	*(struct(*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(double),*(struct(*(struct`),*(struct`),*(struct`),enum(int,int),double,double,double,double,double)),*(void),*(struct(*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),long,long,*(void),long,long,long)),*(double)))
->	O
params	*(void)
;	O
status	int
=	O
(	O
params	*(void)
->	O
solver	*(struct(*(char),*((long,long)->(*(void))),*((*(void),*(void))->(int)),*((double,*(void),*(void))->(int)),*((*(struct`),*(struct`),*(void),*(void))->(int)),*((*(double),*(void))->(int)),*((*(void))->(void))))
->	O
init	*((*(void),*(void))->(int))
)	O
(	O
trust_state	*(struct(*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(double),*(struct(*(struct`),*(struct`),*(struct`),enum(int,int),double,double,double,double,double)),*(void),*(struct(*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),long,long,*(void),long,long,long)),*(double)))
,	O
trust_state	*(struct(*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(double),*(struct(*(struct`),*(struct`),*(struct`),enum(int,int),double,double,double,double,double)),*(void),*(struct(*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),long,long,*(void),long,long,long)),*(double)))
->	O
solver_state	*(void)
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
status	int
=	O
(	O
params	*(void)
->	O
solver	*(struct(*(char),*((long,long)->(*(void))),*((*(void),*(void))->(int)),*((double,*(void),*(void))->(int)),*((*(struct`),*(struct`),*(void),*(void))->(int)),*((*(double),*(void))->(int)),*((*(void))->(void))))
->	O
presolve	*((double,*(void),*(void))->(int))
)	O
(	O
0.0	int
,	O
trust_state	*(struct(*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(double),*(struct(*(struct`),*(struct`),*(struct`),enum(int,int),double,double,double,double,double)),*(void),*(struct(*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),long,long,*(void),long,long,long)),*(double)))
,	O
trust_state	*(struct(*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(double),*(struct(*(struct`),*(struct`),*(struct`),enum(int,int),double,double,double,double,double)),*(void),*(struct(*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),long,long,*(void),long,long,long)),*(double)))
->	O
solver_state	*(void)
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
status	int
=	O
(	O
params	*(void)
->	O
solver	*(struct(*(char),*((long,long)->(*(void))),*((*(void),*(void))->(int)),*((double,*(void),*(void))->(int)),*((*(struct`),*(struct`),*(void),*(void))->(int)),*((*(double),*(void))->(int)),*((*(void))->(void))))
->	O
solve	*((*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(void),*(void))->(int))
)	O
(	O
trust_state	*(struct(*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(double),*(struct(*(struct`),*(struct`),*(struct`),enum(int,int),double,double,double,double,double)),*(void),*(struct(*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),long,long,*(void),long,long,long)),*(double)))
->	O
f	*(double)
,	O
dx	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
trust_state	*(struct(*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(double),*(struct(*(struct`),*(struct`),*(struct`),enum(int,int),double,double,double,double,double)),*(void),*(struct(*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),long,long,*(void),long,long,long)),*(double)))
,	O
trust_state	*(struct(*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(double),*(struct(*(struct`),*(struct`),*(struct`),enum(int,int),double,double,double,double,double)),*(void),*(struct(*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),long,long,*(void),long,long,long)),*(double)))
->	O
solver_state	*(void)
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
double	O
dogleg_beta	(double,double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),double,double,double,double,*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),struct(*(struct`),*(struct`),*(struct`),enum(int,int),double,double,double,double,double))))->(double)
(	O
const	O
double	O
t	double
,	O
const	O
double	O
delta	double
,	O
const	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
diag	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
dogleg_state_t	struct(long,long,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),double,double,double,double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),struct(*(struct(*(char),*((*`,long,long)->(*`)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,double,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`)->(void)))),*(struct(*(char),*((*`,*`)->(int)),*((*`,*`)->(int)))),*(struct(*(char),*((long,long)->(*`)),*((*`,*`)->(int)),*((double,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(void)))),enum(int,int),double,double,double,double,double))
*	O
state	*(int)
)	O
{	O
double	O
beta	long double
;	O
double	O
a	double
,	O
b	double
,	O
c	*(float)
;	O
scaled_addition	(double,*(struct(long,long,*(double),*(struct(long,*`)),int)),double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
t	double
,	O
state	*(int)
->	O
dx_gn	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
-	O
1.0	int
,	O
state	*(int)
->	O
dx_sd	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
state	*(int)
->	O
workp	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
a	double
=	O
scaled_enorm	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(double)
(	O
diag	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
state	*(int)
->	O
workp	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
a	double
*=	O
a	double
;	O
gsl_vector_mul	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
state	*(int)
->	O
workp	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
diag	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_mul	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
state	*(int)
->	O
workp	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
diag	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_blas_ddot	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(double))->(int)
(	O
state	*(int)
->	O
dx_sd	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
state	*(int)
->	O
workp	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
&	O
b	double
)	O
;	O
b	double
*=	O
2.0	int
;	O
c	*(float)
=	O
(	O
state	*(int)
->	O
norm_Dsd	double
+	O
delta	double
)	O
*	O
(	O
state	*(int)
->	O
norm_Dsd	double
-	O
delta	double
)	O
;	O
if	O
(	O
b	double
>	O
0.0	int
)	O
{	O
beta	long double
=	O
(	O
-	O
2.0	int
*	O
c	*(float)
)	O
/	O
(	O
b	double
+	O
sqrt	(double)->(double)
(	O
b	double
*	O
b	double
-	O
4.0	int
*	O
a	double
*	O
c	*(float)
)	O
)	O
;	O
}	O
else	O
{	O
beta	long double
=	O
(	O
-	O
b	double
+	O
sqrt	(double)->(double)
(	O
b	double
*	O
b	double
-	O
4.0	int
*	O
a	double
*	O
c	*(float)
)	O
)	O
/	O
(	O
2.0	int
*	O
a	double
)	O
;	O
}	O
return	O
beta	long double
;	O
}	O
static	O
const	O
gsl_multifit_nlinear_trs	struct(*(char),*((*(void),long,long)->(*(void))),*((*(void),*(void))->(int)),*((*(void),*(void))->(int)),*((*(void),double,*(struct(long,long,*`,*`,int)),*(void))->(int)),*((*(void),*(struct(long,long,*`,*`,int)),*(double),*(void))->(int)),*((*(void))->(void)))
dogleg_type	struct(*(char),*((*(void),long,long)->(*(void))),*((*(void),*(void))->(int)),*((*(void),*(void))->(int)),*((*(void),double,*(struct(long,long,*`,*`,int)),*(void))->(int)),*((*(void),*(struct(long,long,*`,*`,int)),*(double),*(void))->(int)),*((*(void))->(void)))
=	O
{	O
"dogleg"	*(char)
,	O
dogleg_alloc	(*(void),long,long)->(*(void))
,	O
dogleg_init	(*(void),*(void))->(int)
,	O
dogleg_preloop	(*(void),*(void))->(int)
,	O
dogleg_step	(*(void),double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(void))->(int)
,	O
dogleg_preduction	(*(void),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(double),*(void))->(int)
,	O
dogleg_free	(*(void))->(void)
}	O
;	O
const	O
gsl_multifit_nlinear_trs	struct(*(char),*((*(void),long,long)->(*(void))),*((*(void),*(void))->(int)),*((*(void),*(void))->(int)),*((*(void),double,*(struct(long,long,*`,*`,int)),*(void))->(int)),*((*(void),*(struct(long,long,*`,*`,int)),*(double),*(void))->(int)),*((*(void))->(void)))
*	O
gsl_multifit_nlinear_trs_dogleg	*(struct(*(char),*((*(void),long,long)->(*(void))),*((*(void),*(void))->(int)),*((*(void),*(void))->(int)),*((*(void),double,*(struct`),*(void))->(int)),*((*(void),*(struct`),*(double),*(void))->(int)),*((*(void))->(void))))
=	O
&	O
dogleg_type	struct(*(char),*((*(void),long,long)->(*(void))),*((*(void),*(void))->(int)),*((*(void),*(void))->(int)),*((*(void),double,*(struct(long,long,*`,*`,int)),*(void))->(int)),*((*(void),*(struct(long,long,*`,*`,int)),*(double),*(void))->(int)),*((*(void))->(void)))
;	O
static	O
const	O
gsl_multifit_nlinear_trs	struct(*(char),*((*(void),long,long)->(*(void))),*((*(void),*(void))->(int)),*((*(void),*(void))->(int)),*((*(void),double,*(struct(long,long,*`,*`,int)),*(void))->(int)),*((*(void),*(struct(long,long,*`,*`,int)),*(double),*(void))->(int)),*((*(void))->(void)))
ddogleg_type	struct(*(char),*((*(void),long,long)->(*(void))),*((*(void),*(void))->(int)),*((*(void),*(void))->(int)),*((*(void),double,*(struct(long,long,*`,*`,int)),*(void))->(int)),*((*(void),*(struct(long,long,*`,*`,int)),*(double),*(void))->(int)),*((*(void))->(void)))
=	O
{	O
"double-dogleg"	*(char)
,	O
dogleg_alloc	(*(void),long,long)->(*(void))
,	O
dogleg_init	(*(void),*(void))->(int)
,	O
dogleg_preloop	(*(void),*(void))->(int)
,	O
dogleg_double_step	(*(void),double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(void))->(int)
,	O
dogleg_preduction	(*(void),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(double),*(void))->(int)
,	O
dogleg_free	(*(void))->(void)
}	O
;	O
const	O
gsl_multifit_nlinear_trs	struct(*(char),*((*(void),long,long)->(*(void))),*((*(void),*(void))->(int)),*((*(void),*(void))->(int)),*((*(void),double,*(struct(long,long,*`,*`,int)),*(void))->(int)),*((*(void),*(struct(long,long,*`,*`,int)),*(double),*(void))->(int)),*((*(void))->(void)))
*	O
gsl_multifit_nlinear_trs_ddogleg	*(struct(*(char),*((*(void),long,long)->(*(void))),*((*(void),*(void))->(int)),*((*(void),*(void))->(int)),*((*(void),double,*(struct`),*(void))->(int)),*((*(void),*(struct`),*(double),*(void))->(int)),*((*(void))->(void))))
=	O
&	O
ddogleg_type	struct(*(char),*((*(void),long,long)->(*(void))),*((*(void),*(void))->(int)),*((*(void),*(void))->(int)),*((*(void),double,*(struct(long,long,*`,*`,int)),*(void))->(int)),*((*(void),*(struct(long,long,*`,*`,int)),*(double),*(void))->(int)),*((*(void))->(void)))
;	O
