static	O
int	O
removedir	(*(char))->(int)
(	O
const	O
char	O
*	O
path	*(char)
)	O
;	O
int	O
mu_remove_file	(*(char))->(int)
(	O
const	O
char	O
*	O
path	*(char)
)	O
{	O
int	O
rc	int
=	O
0	int
;	O
struct	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
st	*(struct(long,long,long))
;	O
if	O
(	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
(	O
path	*(char)
,	O
&	O
st	*(struct(long,long,long))
)	O
)	O
{	O
mu_debug	O
(	O
MU_DEBCAT_STREAM	int
,	O
MU_DEBUG_ERROR	int
,	O
(	O
_	O
(	O
"can't stat file %s: %s"	*(char)
)	O
,	O
path	*(char)
,	O
mu_strerror	(int)->(*(char))
(	O
errno	O
)	O
)	O
)	O
;	O
return	O
errno	O
;	O
}	O
if	O
(	O
S_ISDIR	O
(	O
st	*(struct(long,long,long))
.	O
st_mode	int
)	O
)	O
rc	int
=	O
removedir	(*(char))->(int)
(	O
path	*(char)
)	O
;	O
else	O
if	O
(	O
unlink	(*(char))->(int)
(	O
path	*(char)
)	O
)	O
{	O
rc	int
=	O
errno	O
;	O
mu_debug	O
(	O
MU_DEBCAT_STREAM	int
,	O
MU_DEBUG_ERROR	int
,	O
(	O
_	O
(	O
"can't unlink file %s: %s"	*(char)
)	O
,	O
path	*(char)
,	O
mu_strerror	(int)->(*(char))
(	O
rc	int
)	O
)	O
)	O
;	O
}	O
return	O
rc	int
;	O
}	O
struct	O
nameent	struct(int,array(char))
{	O
int	O
isdir	int
;	O
char	O
name	*(char)
[	O
1	int
]	O
;	O
}	O
;	O
static	O
int	O
name_add	(*(struct),*(char))->(int)
(	O
mu_list_t	*(struct)
list	*(struct)
,	O
char	O
const	O
*	O
name	*(char)
)	O
{	O
int	O
rc	int
;	O
size_t	long
len	int
=	O
strlen	(*(char))->(long)
(	O
name	*(char)
)	O
;	O
struct	O
nameent	struct(int,array(char))
*	O
ent	*(struct(int,array(char)))
=	O
malloc	(long)->(*(void))
(	O
sizeof	O
(	O
*	O
ent	*(struct(int,array(char)))
)	O
+	O
len	int
)	O
;	O
if	O
(	O
!	O
ent	*(struct(int,array(char)))
)	O
{	O
mu_debug	O
(	O
MU_DEBCAT_STREAM	int
,	O
MU_DEBUG_ERROR	int
,	O
(	O
"%s"	*(char)
,	O
mu_strerror	(int)->(*(char))
(	O
errno	O
)	O
)	O
)	O
;	O
return	O
1	int
;	O
}	O
ent	*(struct(int,array(char)))
->	O
isdir	int
=	O
-	O
1	int
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
ent	*(struct(int,array(char)))
->	O
name	*(char)
,	O
name	*(char)
)	O
;	O
rc	int
=	O
mu_list_append	(*(struct),*(void))->(int)
(	O
list	*(struct)
,	O
ent	*(struct(int,array(char)))
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_debug	O
(	O
MU_DEBCAT_STREAM	int
,	O
MU_DEBUG_ERROR	int
,	O
(	O
"mu_list_append: %s"	*(char)
,	O
mu_strerror	(int)->(*(char))
(	O
rc	int
)	O
)	O
)	O
;	O
free	(*(void))->(void)
(	O
ent	*(struct(int,array(char)))
)	O
;	O
}	O
return	O
rc	int
;	O
}	O
static	O
int	O
lsdir	(*(char),*(struct))->(int)
(	O
const	O
char	O
*	O
path	*(char)
,	O
mu_list_t	*(struct)
list	*(struct)
)	O
{	O
DIR	struct
*	O
dirp	*(struct)
;	O
struct	O
dirent	struct(long,long,short,char,array(char))
*	O
dp	*(struct(long,long,short,char,array(char)))
;	O
int	O
rc	int
=	O
0	int
;	O
dirp	*(struct)
=	O
opendir	(*(char))->(*(struct))
(	O
path	*(char)
)	O
;	O
if	O
(	O
dirp	*(struct)
==	O
NULL	O
)	O
{	O
rc	int
=	O
errno	O
;	O
mu_debug	O
(	O
MU_DEBCAT_STREAM	int
,	O
MU_DEBUG_ERROR	int
,	O
(	O
"cannot open directory %s: %s"	*(char)
,	O
path	*(char)
,	O
mu_strerror	(int)->(*(char))
(	O
errno	O
)	O
)	O
)	O
;	O
return	O
rc	int
;	O
}	O
while	O
(	O
(	O
dp	*(struct(long,long,short,char,array(char)))
=	O
readdir	(*(struct))->(*(struct(long,long,short,char,array(char))))
(	O
dirp	*(struct)
)	O
)	O
)	O
{	O
char	O
const	O
*	O
ename	*(char)
=	O
dp	*(struct(long,long,short,char,array(char)))
->	O
d_name	array(char)
;	O
char	O
*	O
filename	*(char)
;	O
if	O
(	O
ename	*(char)
[	O
ename	*(char)
[	O
0	int
]	O
!=	O
'.'	O
?	O
0	int
:	O
ename	*(char)
[	O
1	int
]	O
!=	O
'.'	O
?	O
1	int
:	O
2	int
]	O
==	O
0	int
)	O
continue	O
;	O
filename	*(char)
=	O
mu_make_file_name	O
(	O
path	*(char)
,	O
ename	*(char)
)	O
;	O
if	O
(	O
!	O
filename	*(char)
)	O
{	O
rc	int
=	O
errno	O
;	O
mu_debug	O
(	O
MU_DEBCAT_STREAM	int
,	O
MU_DEBUG_ERROR	int
,	O
(	O
"%s: can't create file name: %s"	*(char)
,	O
path	*(char)
,	O
mu_strerror	(int)->(*(char))
(	O
errno	O
)	O
)	O
)	O
;	O
break	O
;	O
}	O
rc	int
=	O
name_add	(*(struct),*(char))->(int)
(	O
list	*(struct)
,	O
filename	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
filename	*(char)
)	O
;	O
if	O
(	O
rc	int
)	O
break	O
;	O
}	O
closedir	(*(struct))->(int)
(	O
dirp	*(struct)
)	O
;	O
return	O
rc	int
;	O
}	O
static	O
int	O
namecmp	(*(void),*(void))->(int)
(	O
const	O
void	O
*	O
a	*(struct(int,int,array(char),array(char)))
,	O
const	O
void	O
*	O
b	*(struct(int,int,array(char),array(char)))
)	O
{	O
struct	O
nameent	struct(int,array(char))
const	O
*	O
enta	*(struct(int,array(char)))
=	O
a	*(struct(int,int,array(char),array(char)))
;	O
struct	O
nameent	struct(int,array(char))
const	O
*	O
entb	*(struct(int,array(char)))
=	O
b	*(struct(int,int,array(char),array(char)))
;	O
int	O
d	int
=	O
enta	*(struct(int,array(char)))
->	O
isdir	int
-	O
entb	*(struct(int,array(char)))
->	O
isdir	int
;	O
if	O
(	O
d	int
)	O
return	O
d	int
;	O
return	O
strcmp	(*(char),*(char))->(int)
(	O
entb	*(struct(int,array(char)))
->	O
name	*(char)
,	O
enta	*(struct(int,array(char)))
->	O
name	*(char)
)	O
;	O
}	O
static	O
int	O
check_parent_access	(*(char))->(int)
(	O
const	O
char	O
*	O
path	*(char)
)	O
{	O
int	O
rc	int
;	O
char	O
*	O
name	*(char)
,	O
*	O
p	*(char)
;	O
name	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
path	*(char)
)	O
;	O
if	O
(	O
!	O
name	*(char)
)	O
return	O
errno	O
;	O
p	*(char)
=	O
strrchr	(*(char),int)->(*(char))
(	O
name	*(char)
,	O
'/'	O
)	O
;	O
if	O
(	O
p	*(char)
)	O
*	O
p	*(char)
=	O
0	int
;	O
else	O
strcpy	(*(char),*(char))->(*(char))
(	O
name	*(char)
,	O
"."	*(char)
)	O
;	O
rc	int
=	O
access	(*(char),int)->(int)
(	O
name	*(char)
,	O
R_OK	int
|	O
W_OK	int
|	O
X_OK	int
)	O
;	O
free	(*(void))->(void)
(	O
name	*(char)
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_debug	O
(	O
MU_DEBCAT_STREAM	int
,	O
MU_DEBUG_ERROR	int
,	O
(	O
_	O
(	O
"not enough privileges to remove files from %s"	*(char)
)	O
,	O
name	*(char)
)	O
)	O
;	O
return	O
EACCES	int
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
removedir	(*(char))->(int)
(	O
const	O
char	O
*	O
path	*(char)
)	O
{	O
int	O
rc	int
;	O
struct	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
st	*(struct(long,long,long))
;	O
mu_list_t	*(struct)
namelist	*(struct)
;	O
mu_iterator_t	*(struct)
itr	*(struct)
;	O
struct	O
nameent	struct(int,array(char))
*	O
ent	*(struct(int,array(char)))
;	O
rc	int
=	O
check_parent_access	(*(char))->(int)
(	O
path	*(char)
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
rc	int
=	O
mu_list_create	(*(*(struct)))->(int)
(	O
&	O
namelist	*(struct)
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_debug	O
(	O
MU_DEBCAT_STREAM	int
,	O
MU_DEBUG_ERROR	int
,	O
(	O
"mu_list_create: %s"	*(char)
,	O
mu_strerror	(int)->(*(char))
(	O
rc	int
)	O
)	O
)	O
;	O
return	O
rc	int
;	O
}	O
mu_list_set_destroy_item	(*(struct),*((*(void))->(void)))->(*((*(void))->(void)))
(	O
namelist	*(struct)
,	O
mu_list_free_item	(*(void))->(void)
)	O
;	O
mu_list_set_comparator	(*(struct),*((*(void),*(void))->(int)))->(*((*(void),*(void))->(int)))
(	O
namelist	*(struct)
,	O
namecmp	(*(void),*(void))->(int)
)	O
;	O
rc	int
=	O
name_add	(*(struct),*(char))->(int)
(	O
namelist	*(struct)
,	O
path	*(char)
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_list_destroy	(*(*(struct)))->(void)
(	O
&	O
namelist	*(struct)
)	O
;	O
return	O
rc	int
;	O
}	O
rc	int
=	O
mu_list_get_iterator	(*(struct),*(*(struct)))->(int)
(	O
namelist	*(struct)
,	O
&	O
itr	*(struct)
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_debug	O
(	O
MU_DEBCAT_STREAM	int
,	O
MU_DEBUG_ERROR	int
,	O
(	O
"mu_list_get_iterator: %s"	*(char)
,	O
mu_strerror	(int)->(*(char))
(	O
rc	int
)	O
)	O
)	O
;	O
mu_list_destroy	(*(*(struct)))->(void)
(	O
&	O
namelist	*(struct)
)	O
;	O
return	O
rc	int
;	O
}	O
for	O
(	O
mu_iterator_first	(*(struct))->(int)
(	O
itr	*(struct)
)	O
;	O
!	O
mu_iterator_is_done	(*(struct))->(int)
(	O
itr	*(struct)
)	O
;	O
mu_iterator_next	(*(struct))->(int)
(	O
itr	*(struct)
)	O
)	O
{	O
mu_iterator_current	(*(struct),*(*(void)))->(int)
(	O
itr	*(struct)
,	O
(	O
void	O
*	O
*	O
)	O
&	O
ent	*(struct(int,array(char)))
)	O
;	O
if	O
(	O
lstat	(*(char),*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))))->(int)
(	O
ent	*(struct(int,array(char)))
->	O
name	*(char)
,	O
&	O
st	*(struct(long,long,long))
)	O
)	O
{	O
rc	int
=	O
errno	O
;	O
if	O
(	O
rc	int
==	O
ENOENT	int
)	O
continue	O
;	O
mu_debug	O
(	O
MU_DEBCAT_STREAM	int
,	O
MU_DEBUG_ERROR	int
,	O
(	O
_	O
(	O
"can't lstat file %s: %s"	*(char)
)	O
,	O
ent	*(struct(int,array(char)))
->	O
name	*(char)
,	O
mu_strerror	(int)->(*(char))
(	O
rc	int
)	O
)	O
)	O
;	O
break	O
;	O
}	O
if	O
(	O
S_ISDIR	O
(	O
st	*(struct(long,long,long))
.	O
st_mode	int
)	O
)	O
{	O
ent	*(struct(int,array(char)))
->	O
isdir	int
=	O
1	int
;	O
if	O
(	O
access	(*(char),int)->(int)
(	O
ent	*(struct(int,array(char)))
->	O
name	*(char)
,	O
R_OK	int
|	O
W_OK	int
|	O
X_OK	int
)	O
)	O
{	O
rc	int
=	O
EACCES	int
;	O
mu_debug	O
(	O
MU_DEBCAT_STREAM	int
,	O
MU_DEBUG_ERROR	int
,	O
(	O
_	O
(	O
"not enough privileges to remove files from %s"	*(char)
)	O
,	O
ent	*(struct(int,array(char)))
->	O
name	*(char)
)	O
)	O
;	O
}	O
else	O
rc	int
=	O
lsdir	(*(char),*(struct))->(int)
(	O
ent	*(struct(int,array(char)))
->	O
name	*(char)
,	O
namelist	*(struct)
)	O
;	O
if	O
(	O
rc	int
)	O
break	O
;	O
}	O
else	O
ent	*(struct(int,array(char)))
->	O
isdir	int
=	O
0	int
;	O
}	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
mu_list_sort	(*(struct),*((*(void),*(void))->(int)))->(void)
(	O
namelist	*(struct)
,	O
namecmp	(*(void),*(void))->(int)
)	O
;	O
for	O
(	O
mu_iterator_first	(*(struct))->(int)
(	O
itr	*(struct)
)	O
;	O
!	O
mu_iterator_is_done	(*(struct))->(int)
(	O
itr	*(struct)
)	O
;	O
mu_iterator_next	(*(struct))->(int)
(	O
itr	*(struct)
)	O
)	O
{	O
mu_iterator_current	(*(struct),*(*(void)))->(int)
(	O
itr	*(struct)
,	O
(	O
void	O
*	O
*	O
)	O
&	O
ent	*(struct(int,array(char)))
)	O
;	O
rc	int
=	O
(	O
ent	*(struct(int,array(char)))
->	O
isdir	int
?	O
rmdir	(*(char))->(int)
:	O
unlink	(*(char))->(int)
)	O
(	O
ent	*(struct(int,array(char)))
->	O
name	*(char)
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_debug	O
(	O
MU_DEBCAT_STREAM	int
,	O
MU_DEBUG_ERROR	int
,	O
(	O
_	O
(	O
"can't remove %s: %s"	*(char)
)	O
,	O
ent	*(struct(int,array(char)))
->	O
name	*(char)
,	O
mu_strerror	(int)->(*(char))
(	O
rc	int
)	O
)	O
)	O
;	O
}	O
}	O
}	O
mu_iterator_destroy	(*(*(struct)))->(void)
(	O
&	O
itr	*(struct)
)	O
;	O
mu_list_destroy	(*(*(struct)))->(void)
(	O
&	O
namelist	*(struct)
)	O
;	O
return	O
rc	int
;	O
}	O
