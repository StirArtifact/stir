struct	O
nprefix	struct(*(char),long,int,long,long,long,*(char),long)
{	O
char	O
*	O
prefix	*(char)
;	O
size_t	long
pfxlen	long
;	O
int	O
lim	int
;	O
size_t	long
skip	long
;	O
size_t	long
count	long
;	O
size_t	long
n	long
;	O
char	O
*	O
last_match_str	*(char)
;	O
size_t	long
last_match_len	long
;	O
}	O
;	O
static	O
int	O
nprefix_sel	(int,*(struct(*(char),*(void),*(struct(*`,*`,*`,*`,int,*`)),int)),*(char))->(int)
(	O
int	O
cmd	int
,	O
dico_key_t	*(struct)
key	*(char)
,	O
const	O
char	O
*	O
dict_word	*(char)
)	O
{	O
char	O
const	O
*	O
key_word	*(char)
=	O
key	*(char)
->	O
word	*(char)
;	O
struct	O
nprefix	struct(*(char),long,int,long,long,long,*(char),long)
*	O
np	*(struct(*(char),long,int,long,long,long,*(char),long))
;	O
size_t	long
wordlen	long
;	O
switch	O
(	O
cmd	int
)	O
{	O
case	O
DICO_SELECT_BEGIN	int
:	O
{	O
char	O
*	O
p	*(char)
;	O
size_t	long
skip	long
,	O
count	long
;	O
np	*(struct(*(char),long,int,long,long,long,*(char),long))
=	O
calloc	(long,long)->(*(void))
(	O
1	int
,	O
sizeof	O
(	O
np	*(struct(*(char),long,int,long,long,long,*(char),long))
[	O
0	int
]	O
)	O
)	O
;	O
if	O
(	O
!	O
np	*(struct(*(char),long,int,long,long,long,*(char),long))
)	O
{	O
DICO_LOG_MEMERR	O
(	O
)	O
;	O
return	O
1	int
;	O
}	O
np	*(struct(*(char),long,int,long,long,long,*(char),long))
->	O
prefix	*(char)
=	O
(	O
char	O
*	O
)	O
key_word	*(char)
;	O
np	*(struct(*(char),long,int,long,long,long,*(char),long))
->	O
lim	int
=	O
0	int
;	O
skip	long
=	O
strtoul	(*(char),*(*(char)),int)->(long)
(	O
key_word	*(char)
,	O
&	O
p	*(char)
,	O
10	int
)	O
;	O
if	O
(	O
*	O
p	*(char)
==	O
'#'	O
)	O
{	O
count	long
=	O
strtoul	(*(char),*(*(char)),int)->(long)
(	O
p	*(char)
+	O
1	int
,	O
&	O
p	*(char)
,	O
10	int
)	O
;	O
if	O
(	O
*	O
p	*(char)
==	O
'#'	O
)	O
{	O
np	*(struct(*(char),long,int,long,long,long,*(char),long))
->	O
prefix	*(char)
=	O
p	*(char)
+	O
1	int
;	O
np	*(struct(*(char),long,int,long,long,long,*(char),long))
->	O
skip	long
=	O
skip	long
;	O
np	*(struct(*(char),long,int,long,long,long,*(char),long))
->	O
count	long
=	O
count	long
;	O
np	*(struct(*(char),long,int,long,long,long,*(char),long))
->	O
lim	int
=	O
1	int
;	O
}	O
}	O
np	*(struct(*(char),long,int,long,long,long,*(char),long))
->	O
pfxlen	long
=	O
utf8_strlen	(*(char))->(long)
(	O
np	*(struct(*(char),long,int,long,long,long,*(char),long))
->	O
prefix	*(char)
)	O
;	O
key	*(char)
->	O
call_data	*(void)
=	O
np	*(struct(*(char),long,int,long,long,long,*(char),long))
;	O
break	O
;	O
}	O
case	O
DICO_SELECT_RUN	int
:	O
np	*(struct(*(char),long,int,long,long,long,*(char),long))
=	O
key	*(char)
->	O
call_data	*(void)
;	O
if	O
(	O
np	*(struct(*(char),long,int,long,long,long,*(char),long))
->	O
last_match_str	*(char)
&&	O
utf8_strcasecmp	(*(char),*(char))->(int)
(	O
(	O
char	O
*	O
)	O
dict_word	*(char)
,	O
np	*(struct(*(char),long,int,long,long,long,*(char),long))
->	O
last_match_str	*(char)
)	O
==	O
0	int
)	O
return	O
0	int
;	O
if	O
(	O
np	*(struct(*(char),long,int,long,long,long,*(char),long))
->	O
lim	int
&&	O
np	*(struct(*(char),long,int,long,long,long,*(char),long))
->	O
n	long
>	O
np	*(struct(*(char),long,int,long,long,long,*(char),long))
->	O
skip	long
+	O
np	*(struct(*(char),long,int,long,long,long,*(char),long))
->	O
count	long
)	O
return	O
0	int
;	O
wordlen	long
=	O
utf8_strlen	(*(char))->(long)
(	O
dict_word	*(char)
)	O
;	O
if	O
(	O
wordlen	long
>=	O
np	*(struct(*(char),long,int,long,long,long,*(char),long))
->	O
pfxlen	long
&&	O
utf8_strncasecmp	(*(char),*(char),long)->(int)
(	O
(	O
char	O
*	O
)	O
dict_word	*(char)
,	O
np	*(struct(*(char),long,int,long,long,long,*(char),long))
->	O
prefix	*(char)
,	O
np	*(struct(*(char),long,int,long,long,long,*(char),long))
->	O
pfxlen	long
)	O
==	O
0	int
)	O
{	O
size_t	long
s	*(char)
=	O
strlen	(*(char))->(long)
(	O
dict_word	*(char)
)	O
+	O
1	int
;	O
if	O
(	O
np	*(struct(*(char),long,int,long,long,long,*(char),long))
->	O
last_match_len	long
<	O
s	*(char)
)	O
{	O
char	O
*	O
p	*(char)
=	O
realloc	(*(void),long)->(*(void))
(	O
np	*(struct(*(char),long,int,long,long,long,*(char),long))
->	O
last_match_str	*(char)
,	O
s	*(char)
)	O
;	O
if	O
(	O
!	O
p	*(char)
)	O
return	O
0	int
;	O
np	*(struct(*(char),long,int,long,long,long,*(char),long))
->	O
last_match_str	*(char)
=	O
p	*(char)
;	O
np	*(struct(*(char),long,int,long,long,long,*(char),long))
->	O
last_match_len	long
=	O
s	*(char)
;	O
}	O
strcpy	(*(char),*(char))->(*(char))
(	O
np	*(struct(*(char),long,int,long,long,long,*(char),long))
->	O
last_match_str	*(char)
,	O
dict_word	*(char)
)	O
;	O
if	O
(	O
!	O
np	*(struct(*(char),long,int,long,long,long,*(char),long))
->	O
lim	int
)	O
return	O
1	int
;	O
np	*(struct(*(char),long,int,long,long,long,*(char),long))
->	O
n	long
++	O
;	O
return	O
np	*(struct(*(char),long,int,long,long,long,*(char),long))
->	O
n	long
>	O
np	*(struct(*(char),long,int,long,long,long,*(char),long))
->	O
skip	long
&&	O
np	*(struct(*(char),long,int,long,long,long,*(char),long))
->	O
n	long
<=	O
np	*(struct(*(char),long,int,long,long,long,*(char),long))
->	O
skip	long
+	O
np	*(struct(*(char),long,int,long,long,long,*(char),long))
->	O
count	long
;	O
}	O
break	O
;	O
case	O
DICO_SELECT_END	int
:	O
np	*(struct(*(char),long,int,long,long,long,*(char),long))
=	O
key	*(char)
->	O
call_data	*(void)
;	O
free	(*(void))->(void)
(	O
np	*(struct(*(char),long,int,long,long,long,*(char),long))
->	O
last_match_str	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
np	*(struct(*(char),long,int,long,long,long,*(char),long))
)	O
;	O
break	O
;	O
}	O
return	O
0	int
;	O
}	O
static	O
struct	O
dico_strategy	struct(*(char),*(char),*((int,*(struct),*(char))->(int)),*(void),int,*(struct))
nprefix_strat	array(struct(*(char),*(char),*((int,*(struct(*`,*`,*`,int)),*(char))->(int)),*(void),int,*(struct)))
[	O
]	O
=	O
{	O
{	O
"nprefix"	*(char)
,	O
"Match prefixes, [skip#count#]prefix"	*(char)
,	O
nprefix_sel	(int,*(struct(*(char),*(void),*(struct(*`,*`,*`,*`,int,*`)),int)),*(char))->(int)
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
static	O
int	O
nprefix_init	(int,*(*(char)))->(int)
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	*(*(char))
)	O
{	O
dico_strategy_add	(*(struct(*(char),*(char),*((int,*`,*`)->(int)),*(void),int,*(struct))))->(int)
(	O
nprefix_strat	array(struct(*(char),*(char),*((int,*(struct(*`,*`,*`,int)),*(char))->(int)),*(void),int,*(struct)))
)	O
;	O
return	O
0	int
;	O
}	O
struct	O
dico_database_module	struct(int,int,*((int,*(*(char)))->(int)),*((*(char),int,*(*(char)))->(*(struct))),*((*(struct))->(int)),*((*(struct))->(int)),*((*(struct))->(int)),*((*(struct))->(*(char))),*((*(struct))->(*(char))),*((*(struct),array(*(struct)))->(int)),*((*(struct),*(struct),*(char))->(*(struct))),*((*(struct),*(char))->(*(struct))),*((*(struct),long,*(struct))->(int)),*((*(struct))->(long)),*((*(struct))->(long)),*((*(struct))->(void)),*((*(struct),*(struct))->(int)),*((int,*(*(char)))->(int)),*((*(struct))->(*(char))),*((*(char),int,*(*(char)),*(void))->(*(struct))),*((*(struct))->(int)),*((*(struct),long)->(*(struct))))
DICO_EXPORT	O
(	O
nprefix	struct(*(char),long,int,long,long,long,*(char),long)
,	O
module	O
)	O
=	O
{	O
DICO_MODULE_VERSION	int
,	O
DICO_CAPA_NODB	int
,	O
nprefix_init	(int,*(*(char)))->(int)
,	O
}	O
;	O
