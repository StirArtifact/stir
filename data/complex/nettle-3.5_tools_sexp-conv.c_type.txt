static	O
void	O
sexp_convert_item	(*(struct(*(struct(*`,enum(int,int,int),char,*`,union`,char,enum(int,int,int,int,int,int,int,int,int,int))),enum(int,int,int),int,int)),*(struct(enum(int,int,int,int,int,int,int,int,int,int),struct(*(char),long,*(void),*((*`,*`,long)->(*`)),long),struct(*(char),long,*(void),*((*`,*`,long)->(*`)),long))),*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,*(struct(*`,int,int,int,*`,*`,*`,*`,*`,*`,*`,*`)),int,int,*(struct(*`,int,int,int,*`,*`,*`)),*(void),struct(*(char),short,char,char),int,int)),enum(int,int,int),int)->(void)
(	O
struct	O
sexp_parser	struct(*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),enum(int,int,int),char,*(struct(*(char),int,int,int,*((*`)->(void)),*((long)->(long)),*((*`,*`,long,*`)->(long)),*((*`,*`)->(long)),*((*`)->(void)),*((long)->(long)),*((*`,*`,*`,long,*`)->(int)),*((*`)->(int)))),union(struct(*(char),short,char,char),struct(char,char)),char,enum(int,int,int,int,int,int,int,int,int,int))),enum(int,int,int),int,int)
*	O
parser	*(struct(*(struct(*(struct`),enum(int,int,int),char,*(struct`),union(struct`,struct`),char,enum(int,int,int,int,int,int,int,int,int,int))),enum(int,int,int),int,int))
,	O
struct	O
sexp_compound_token	struct(enum(int,int,int,int,int,int,int,int,int,int),struct(*(char),long,*(void),*((*(void),*(void),long)->(*(void))),long),struct(*(char),long,*(void),*((*(void),*(void),long)->(*(void))),long))
*	O
token	enum(int,int,int,int,int,int,int,int,int,int)
,	O
struct	O
sexp_output	struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char))),int,*(struct(*(char),int,int,int,*((*(void))->(void)),*((long)->(long)),*((*(void),*(char),long,*(char))->(long)),*((*(void),*(char))->(long)),*((*(void))->(void)),*((long)->(long)),*((*(void),*(long),*(char),long,*(char))->(int)),*((*(void))->(int)))),int,int,*(struct(*(char),int,int,int,*((*(void))->(void)),*((*(void),long,*(char))->(void)),*((*(void),long,*(char))->(void)))),*(void),struct(*(char),short,char,char),int,int)
*	O
output	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,*(struct(*(char),int,int,int,*((*`)->(void)),*((long)->(long)),*((*`,*`,long,*`)->(long)),*((*`,*`)->(long)),*((*`)->(void)),*((long)->(long)),*((*`,*`,*`,long,*`)->(int)),*((*`)->(int)))),int,int,*(struct(*(char),int,int,int,*((*`)->(void)),*((*`,long,*`)->(void)),*((*`,long,*`)->(void)))),*(void),struct(*(char),short,char,char),int,int))
,	O
enum	O
sexp_mode	enum(int,int,int)
mode_out	enum(int,int,int)
,	O
unsigned	O
indent	int
)	O
{	O
if	O
(	O
mode_out	enum(int,int,int)
==	O
SEXP_TRANSPORT	int
)	O
{	O
sexp_put_char	(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,*(struct(*`,int,int,int,*`,*`,*`,*`,*`,*`,*`,*`)),int,int,*(struct(*`,int,int,int,*`,*`,*`)),*(void),struct(*(char),short,char,char),int,int)),char)->(void)
(	O
output	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,*(struct(*(char),int,int,int,*((*`)->(void)),*((long)->(long)),*((*`,*`,long,*`)->(long)),*((*`,*`)->(long)),*((*`)->(void)),*((long)->(long)),*((*`,*`,*`,long,*`)->(int)),*((*`)->(int)))),int,int,*(struct(*(char),int,int,int,*((*`)->(void)),*((*`,long,*`)->(void)),*((*`,long,*`)->(void)))),*(void),struct(*(char),short,char,char),int,int))
,	O
'{'	O
)	O
;	O
sexp_put_code_start	(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,*(struct(*`,int,int,int,*`,*`,*`,*`,*`,*`,*`,*`)),int,int,*(struct(*`,int,int,int,*`,*`,*`)),*(void),struct(*(char),short,char,char),int,int)),*(struct(*(char),int,int,int,*((*`)->(void)),*((long)->(long)),*((*`,*`,long,*`)->(long)),*((*`,*`)->(long)),*((*`)->(void)),*((long)->(long)),*((*`,*`,*`,long,*`)->(int)),*((*`)->(int)))))->(void)
(	O
output	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,*(struct(*(char),int,int,int,*((*`)->(void)),*((long)->(long)),*((*`,*`,long,*`)->(long)),*((*`,*`)->(long)),*((*`)->(void)),*((long)->(long)),*((*`,*`,*`,long,*`)->(int)),*((*`)->(int)))),int,int,*(struct(*(char),int,int,int,*((*`)->(void)),*((*`,long,*`)->(void)),*((*`,long,*`)->(void)))),*(void),struct(*(char),short,char,char),int,int))
,	O
&	O
nettle_base64	struct(*(char),int,int,int,*((*(void))->(void)),*((long)->(long)),*((*(void),*(char),long,*(char))->(long)),*((*(void),*(char))->(long)),*((*(void))->(void)),*((long)->(long)),*((*(void),*(long),*(char),long,*(char))->(int)),*((*(void))->(int)))
)	O
;	O
sexp_convert_item	(*(struct(*(struct(*`,enum(int,int,int),char,*`,union`,char,enum(int,int,int,int,int,int,int,int,int,int))),enum(int,int,int),int,int)),*(struct(enum(int,int,int,int,int,int,int,int,int,int),struct(*(char),long,*(void),*((*`,*`,long)->(*`)),long),struct(*(char),long,*(void),*((*`,*`,long)->(*`)),long))),*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,*(struct(*`,int,int,int,*`,*`,*`,*`,*`,*`,*`,*`)),int,int,*(struct(*`,int,int,int,*`,*`,*`)),*(void),struct(*(char),short,char,char),int,int)),enum(int,int,int),int)->(void)
(	O
parser	*(struct(*(struct(*(struct`),enum(int,int,int),char,*(struct`),union(struct`,struct`),char,enum(int,int,int,int,int,int,int,int,int,int))),enum(int,int,int),int,int))
,	O
token	enum(int,int,int,int,int,int,int,int,int,int)
,	O
output	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,*(struct(*(char),int,int,int,*((*`)->(void)),*((long)->(long)),*((*`,*`,long,*`)->(long)),*((*`,*`)->(long)),*((*`)->(void)),*((long)->(long)),*((*`,*`,*`,long,*`)->(int)),*((*`)->(int)))),int,int,*(struct(*(char),int,int,int,*((*`)->(void)),*((*`,long,*`)->(void)),*((*`,long,*`)->(void)))),*(void),struct(*(char),short,char,char),int,int))
,	O
SEXP_CANONICAL	int
,	O
0	int
)	O
;	O
sexp_put_code_end	(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,*(struct(*`,int,int,int,*`,*`,*`,*`,*`,*`,*`,*`)),int,int,*(struct(*`,int,int,int,*`,*`,*`)),*(void),struct(*(char),short,char,char),int,int)))->(void)
(	O
output	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,*(struct(*(char),int,int,int,*((*`)->(void)),*((long)->(long)),*((*`,*`,long,*`)->(long)),*((*`,*`)->(long)),*((*`)->(void)),*((long)->(long)),*((*`,*`,*`,long,*`)->(int)),*((*`)->(int)))),int,int,*(struct(*(char),int,int,int,*((*`)->(void)),*((*`,long,*`)->(void)),*((*`,long,*`)->(void)))),*(void),struct(*(char),short,char,char),int,int))
)	O
;	O
sexp_put_char	(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,*(struct(*`,int,int,int,*`,*`,*`,*`,*`,*`,*`,*`)),int,int,*(struct(*`,int,int,int,*`,*`,*`)),*(void),struct(*(char),short,char,char),int,int)),char)->(void)
(	O
output	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,*(struct(*(char),int,int,int,*((*`)->(void)),*((long)->(long)),*((*`,*`,long,*`)->(long)),*((*`,*`)->(long)),*((*`)->(void)),*((long)->(long)),*((*`,*`,*`,long,*`)->(int)),*((*`)->(int)))),int,int,*(struct(*(char),int,int,int,*((*`)->(void)),*((*`,long,*`)->(void)),*((*`,long,*`)->(void)))),*(void),struct(*(char),short,char,char),int,int))
,	O
'}'	O
)	O
;	O
}	O
else	O
switch	O
(	O
token	enum(int,int,int,int,int,int,int,int,int,int)
->	O
type	enum(int,int,int,int,int,int,int,int,int,int)
)	O
{	O
case	O
SEXP_LIST_END	int
:	O
die	(*(char))->(void)
(	O
"Unmatched end of list.\n"	*(char)
)	O
;	O
case	O
SEXP_EOF	int
:	O
die	(*(char))->(void)
(	O
"Unexpected end of file.\n"	*(char)
)	O
;	O
case	O
SEXP_CODING_END	int
:	O
die	(*(char))->(void)
(	O
"Unexpected end of coding.\n"	*(char)
)	O
;	O
case	O
SEXP_LIST_START	int
:	O
{	O
unsigned	O
item	int
;	O
sexp_put_char	(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,*(struct(*`,int,int,int,*`,*`,*`,*`,*`,*`,*`,*`)),int,int,*(struct(*`,int,int,int,*`,*`,*`)),*(void),struct(*(char),short,char,char),int,int)),char)->(void)
(	O
output	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,*(struct(*(char),int,int,int,*((*`)->(void)),*((long)->(long)),*((*`,*`,long,*`)->(long)),*((*`,*`)->(long)),*((*`)->(void)),*((long)->(long)),*((*`,*`,*`,long,*`)->(int)),*((*`)->(int)))),int,int,*(struct(*(char),int,int,int,*((*`)->(void)),*((*`,long,*`)->(void)),*((*`,long,*`)->(void)))),*(void),struct(*(char),short,char,char),int,int))
,	O
'('	O
)	O
;	O
for	O
(	O
item	int
=	O
0	int
;	O
sexp_parse	(*(struct(*(struct(*`,enum(int,int,int),char,*`,union`,char,enum(int,int,int,int,int,int,int,int,int,int))),enum(int,int,int),int,int)),*(struct(enum(int,int,int,int,int,int,int,int,int,int),struct(*(char),long,*(void),*((*`,*`,long)->(*`)),long),struct(*(char),long,*(void),*((*`,*`,long)->(*`)),long))))->(void)
(	O
parser	*(struct(*(struct(*(struct`),enum(int,int,int),char,*(struct`),union(struct`,struct`),char,enum(int,int,int,int,int,int,int,int,int,int))),enum(int,int,int),int,int))
,	O
token	enum(int,int,int,int,int,int,int,int,int,int)
)	O
,	O
token	enum(int,int,int,int,int,int,int,int,int,int)
->	O
type	enum(int,int,int,int,int,int,int,int,int,int)
!=	O
SEXP_LIST_END	int
;	O
item	int
++	O
)	O
{	O
if	O
(	O
mode_out	enum(int,int,int)
==	O
SEXP_ADVANCED	int
)	O
{	O
switch	O
(	O
item	int
)	O
{	O
case	O
0	int
:	O
if	O
(	O
token	enum(int,int,int,int,int,int,int,int,int,int)
->	O
type	enum(int,int,int,int,int,int,int,int,int,int)
==	O
SEXP_COMMENT	int
)	O
{	O
indent	int
=	O
output	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,*(struct(*(char),int,int,int,*((*`)->(void)),*((long)->(long)),*((*`,*`,long,*`)->(long)),*((*`,*`)->(long)),*((*`)->(void)),*((long)->(long)),*((*`,*`,*`,long,*`)->(int)),*((*`)->(int)))),int,int,*(struct(*(char),int,int,int,*((*`)->(void)),*((*`,long,*`)->(void)),*((*`,long,*`)->(void)))),*(void),struct(*(char),short,char,char),int,int))
->	O
pos	int
;	O
item	int
++	O
;	O
}	O
break	O
;	O
case	O
1	int
:	O
sexp_put_char	(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,*(struct(*`,int,int,int,*`,*`,*`,*`,*`,*`,*`,*`)),int,int,*(struct(*`,int,int,int,*`,*`,*`)),*(void),struct(*(char),short,char,char),int,int)),char)->(void)
(	O
output	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,*(struct(*(char),int,int,int,*((*`)->(void)),*((long)->(long)),*((*`,*`,long,*`)->(long)),*((*`,*`)->(long)),*((*`)->(void)),*((long)->(long)),*((*`,*`,*`,long,*`)->(int)),*((*`)->(int)))),int,int,*(struct(*(char),int,int,int,*((*`)->(void)),*((*`,long,*`)->(void)),*((*`,long,*`)->(void)))),*(void),struct(*(char),short,char,char),int,int))
,	O
' '	O
)	O
;	O
indent	int
=	O
output	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,*(struct(*(char),int,int,int,*((*`)->(void)),*((long)->(long)),*((*`,*`,long,*`)->(long)),*((*`,*`)->(long)),*((*`)->(void)),*((long)->(long)),*((*`,*`,*`,long,*`)->(int)),*((*`)->(int)))),int,int,*(struct(*(char),int,int,int,*((*`)->(void)),*((*`,long,*`)->(void)),*((*`,long,*`)->(void)))),*(void),struct(*(char),short,char,char),int,int))
->	O
pos	int
;	O
break	O
;	O
default	O
:	O
sexp_put_newline	(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,*(struct(*`,int,int,int,*`,*`,*`,*`,*`,*`,*`,*`)),int,int,*(struct(*`,int,int,int,*`,*`,*`)),*(void),struct(*(char),short,char,char),int,int)),int)->(void)
(	O
output	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,*(struct(*(char),int,int,int,*((*`)->(void)),*((long)->(long)),*((*`,*`,long,*`)->(long)),*((*`,*`)->(long)),*((*`)->(void)),*((long)->(long)),*((*`,*`,*`,long,*`)->(int)),*((*`)->(int)))),int,int,*(struct(*(char),int,int,int,*((*`)->(void)),*((*`,long,*`)->(void)),*((*`,long,*`)->(void)))),*(void),struct(*(char),short,char,char),int,int))
,	O
indent	int
)	O
;	O
break	O
;	O
}	O
}	O
sexp_convert_item	(*(struct(*(struct(*`,enum(int,int,int),char,*`,union`,char,enum(int,int,int,int,int,int,int,int,int,int))),enum(int,int,int),int,int)),*(struct(enum(int,int,int,int,int,int,int,int,int,int),struct(*(char),long,*(void),*((*`,*`,long)->(*`)),long),struct(*(char),long,*(void),*((*`,*`,long)->(*`)),long))),*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,*(struct(*`,int,int,int,*`,*`,*`,*`,*`,*`,*`,*`)),int,int,*(struct(*`,int,int,int,*`,*`,*`)),*(void),struct(*(char),short,char,char),int,int)),enum(int,int,int),int)->(void)
(	O
parser	*(struct(*(struct(*(struct`),enum(int,int,int),char,*(struct`),union(struct`,struct`),char,enum(int,int,int,int,int,int,int,int,int,int))),enum(int,int,int),int,int))
,	O
token	enum(int,int,int,int,int,int,int,int,int,int)
,	O
output	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,*(struct(*(char),int,int,int,*((*`)->(void)),*((long)->(long)),*((*`,*`,long,*`)->(long)),*((*`,*`)->(long)),*((*`)->(void)),*((long)->(long)),*((*`,*`,*`,long,*`)->(int)),*((*`)->(int)))),int,int,*(struct(*(char),int,int,int,*((*`)->(void)),*((*`,long,*`)->(void)),*((*`,long,*`)->(void)))),*(void),struct(*(char),short,char,char),int,int))
,	O
mode_out	enum(int,int,int)
,	O
indent	int
)	O
;	O
}	O
sexp_put_char	(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,*(struct(*`,int,int,int,*`,*`,*`,*`,*`,*`,*`,*`)),int,int,*(struct(*`,int,int,int,*`,*`,*`)),*(void),struct(*(char),short,char,char),int,int)),char)->(void)
(	O
output	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,*(struct(*(char),int,int,int,*((*`)->(void)),*((long)->(long)),*((*`,*`,long,*`)->(long)),*((*`,*`)->(long)),*((*`)->(void)),*((long)->(long)),*((*`,*`,*`,long,*`)->(int)),*((*`)->(int)))),int,int,*(struct(*(char),int,int,int,*((*`)->(void)),*((*`,long,*`)->(void)),*((*`,long,*`)->(void)))),*(void),struct(*(char),short,char,char),int,int))
,	O
')'	O
)	O
;	O
break	O
;	O
}	O
case	O
SEXP_STRING	int
:	O
sexp_put_string	(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,*(struct(*`,int,int,int,*`,*`,*`,*`,*`,*`,*`,*`)),int,int,*(struct(*`,int,int,int,*`,*`,*`)),*(void),struct(*(char),short,char,char),int,int)),enum(int,int,int),*(struct(*(char),long,*(void),*((*`,*`,long)->(*`)),long)))->(void)
(	O
output	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,*(struct(*(char),int,int,int,*((*`)->(void)),*((long)->(long)),*((*`,*`,long,*`)->(long)),*((*`,*`)->(long)),*((*`)->(void)),*((long)->(long)),*((*`,*`,*`,long,*`)->(int)),*((*`)->(int)))),int,int,*(struct(*(char),int,int,int,*((*`)->(void)),*((*`,long,*`)->(void)),*((*`,long,*`)->(void)))),*(void),struct(*(char),short,char,char),int,int))
,	O
mode_out	enum(int,int,int)
,	O
&	O
token	enum(int,int,int,int,int,int,int,int,int,int)
->	O
string	*(struct(*(char),long,*(void),*((*(void),*(void),long)->(*(void))),long))
)	O
;	O
break	O
;	O
case	O
SEXP_DISPLAY	int
:	O
sexp_put_char	(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,*(struct(*`,int,int,int,*`,*`,*`,*`,*`,*`,*`,*`)),int,int,*(struct(*`,int,int,int,*`,*`,*`)),*(void),struct(*(char),short,char,char),int,int)),char)->(void)
(	O
output	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,*(struct(*(char),int,int,int,*((*`)->(void)),*((long)->(long)),*((*`,*`,long,*`)->(long)),*((*`,*`)->(long)),*((*`)->(void)),*((long)->(long)),*((*`,*`,*`,long,*`)->(int)),*((*`)->(int)))),int,int,*(struct(*(char),int,int,int,*((*`)->(void)),*((*`,long,*`)->(void)),*((*`,long,*`)->(void)))),*(void),struct(*(char),short,char,char),int,int))
,	O
'['	O
)	O
;	O
sexp_put_string	(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,*(struct(*`,int,int,int,*`,*`,*`,*`,*`,*`,*`,*`)),int,int,*(struct(*`,int,int,int,*`,*`,*`)),*(void),struct(*(char),short,char,char),int,int)),enum(int,int,int),*(struct(*(char),long,*(void),*((*`,*`,long)->(*`)),long)))->(void)
(	O
output	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,*(struct(*(char),int,int,int,*((*`)->(void)),*((long)->(long)),*((*`,*`,long,*`)->(long)),*((*`,*`)->(long)),*((*`)->(void)),*((long)->(long)),*((*`,*`,*`,long,*`)->(int)),*((*`)->(int)))),int,int,*(struct(*(char),int,int,int,*((*`)->(void)),*((*`,long,*`)->(void)),*((*`,long,*`)->(void)))),*(void),struct(*(char),short,char,char),int,int))
,	O
mode_out	enum(int,int,int)
,	O
&	O
token	enum(int,int,int,int,int,int,int,int,int,int)
->	O
display	struct(*(char),long,*(void),*((*(void),*(void),long)->(*(void))),long)
)	O
;	O
sexp_put_char	(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,*(struct(*`,int,int,int,*`,*`,*`,*`,*`,*`,*`,*`)),int,int,*(struct(*`,int,int,int,*`,*`,*`)),*(void),struct(*(char),short,char,char),int,int)),char)->(void)
(	O
output	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,*(struct(*(char),int,int,int,*((*`)->(void)),*((long)->(long)),*((*`,*`,long,*`)->(long)),*((*`,*`)->(long)),*((*`)->(void)),*((long)->(long)),*((*`,*`,*`,long,*`)->(int)),*((*`)->(int)))),int,int,*(struct(*(char),int,int,int,*((*`)->(void)),*((*`,long,*`)->(void)),*((*`,long,*`)->(void)))),*(void),struct(*(char),short,char,char),int,int))
,	O
']'	O
)	O
;	O
sexp_put_string	(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,*(struct(*`,int,int,int,*`,*`,*`,*`,*`,*`,*`,*`)),int,int,*(struct(*`,int,int,int,*`,*`,*`)),*(void),struct(*(char),short,char,char),int,int)),enum(int,int,int),*(struct(*(char),long,*(void),*((*`,*`,long)->(*`)),long)))->(void)
(	O
output	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,*(struct(*(char),int,int,int,*((*`)->(void)),*((long)->(long)),*((*`,*`,long,*`)->(long)),*((*`,*`)->(long)),*((*`)->(void)),*((long)->(long)),*((*`,*`,*`,long,*`)->(int)),*((*`)->(int)))),int,int,*(struct(*(char),int,int,int,*((*`)->(void)),*((*`,long,*`)->(void)),*((*`,long,*`)->(void)))),*(void),struct(*(char),short,char,char),int,int))
,	O
mode_out	enum(int,int,int)
,	O
&	O
token	enum(int,int,int,int,int,int,int,int,int,int)
->	O
string	*(struct(*(char),long,*(void),*((*(void),*(void),long)->(*(void))),long))
)	O
;	O
break	O
;	O
case	O
SEXP_COMMENT	int
:	O
if	O
(	O
mode_out	enum(int,int,int)
==	O
SEXP_ADVANCED	int
)	O
{	O
sexp_put_data	(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,*(struct(*`,int,int,int,*`,*`,*`,*`,*`,*`,*`,*`)),int,int,*(struct(*`,int,int,int,*`,*`,*`)),*(void),struct(*(char),short,char,char),int,int)),int,*(char))->(void)
(	O
output	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,*(struct(*(char),int,int,int,*((*`)->(void)),*((long)->(long)),*((*`,*`,long,*`)->(long)),*((*`,*`)->(long)),*((*`)->(void)),*((long)->(long)),*((*`,*`,*`,long,*`)->(int)),*((*`)->(int)))),int,int,*(struct(*(char),int,int,int,*((*`)->(void)),*((*`,long,*`)->(void)),*((*`,long,*`)->(void)))),*(void),struct(*(char),short,char,char),int,int))
,	O
token	enum(int,int,int,int,int,int,int,int,int,int)
->	O
string	*(struct(*(char),long,*(void),*((*(void),*(void),long)->(*(void))),long))
.	O
size	long
,	O
token	enum(int,int,int,int,int,int,int,int,int,int)
->	O
string	*(struct(*(char),long,*(void),*((*(void),*(void),long)->(*(void))),long))
.	O
contents	*(char)
)	O
;	O
sexp_put_soft_newline	(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,*(struct(*`,int,int,int,*`,*`,*`,*`,*`,*`,*`,*`)),int,int,*(struct(*`,int,int,int,*`,*`,*`)),*(void),struct(*(char),short,char,char),int,int)),int)->(void)
(	O
output	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,*(struct(*(char),int,int,int,*((*`)->(void)),*((long)->(long)),*((*`,*`,long,*`)->(long)),*((*`,*`)->(long)),*((*`)->(void)),*((long)->(long)),*((*`,*`,*`,long,*`)->(int)),*((*`)->(int)))),int,int,*(struct(*(char),int,int,int,*((*`)->(void)),*((*`,long,*`)->(void)),*((*`,long,*`)->(void)))),*(void),struct(*(char),short,char,char),int,int))
,	O
indent	int
)	O
;	O
}	O
break	O
;	O
default	O
:	O
abort	()->(void)
(	O
)	O
;	O
}	O
}	O
struct	O
conv_options	struct(enum(int,int,int),int,int,int,int,*(struct(*(char),int,int,int,*((*(void))->(void)),*((*(void),long,*(char))->(void)),*((*(void),long,*(char))->(void)))))
{	O
enum	O
sexp_mode	enum(int,int,int)
mode	enum(int,int,int)
;	O
int	O
prefer_hex	int
;	O
int	O
once	int
;	O
int	O
lock	int
;	O
unsigned	O
width	int
;	O
const	O
struct	O
nettle_hash	struct(*(char),int,int,int,*((*(void))->(void)),*((*(void),long,*(char))->(void)),*((*(void),long,*(char))->(void)))
*	O
hash	*(struct(*(char),int,int,int,*((*(void))->(void)),*((*(void),long,*(char))->(void)),*((*(void),long,*(char))->(void))))
;	O
}	O
;	O
enum	O
{	O
OPT_ONCE	int
=	O
300	int
,	O
OPT_HASH	int
,	O
OPT_LOCK	int
,	O
OPT_HELP	int
}	O
;	O
static	O
int	O
match_argument	(*(char),*(char))->(int)
(	O
const	O
char	O
*	O
given	*(char)
,	O
const	O
char	O
*	O
name	*(char)
)	O
{	O
return	O
!	O
strcmp	(*(char),*(char))->(int)
(	O
given	*(char)
,	O
name	*(char)
)	O
;	O
}	O
static	O
void	O
parse_options	(*(struct(enum(int,int,int),int,int,int,int,*(struct(*`,int,int,int,*`,*`,*`)))),int,*(*(char)))->(void)
(	O
struct	O
conv_options	struct(enum(int,int,int),int,int,int,int,*(struct(*(char),int,int,int,*((*(void))->(void)),*((*(void),long,*(char))->(void)),*((*(void),long,*(char))->(void)))))
*	O
o	*(struct(enum(int,int,int),int,int,int,int,*(struct(*(char),int,int,int,*((*`)->(void)),*((*`,long,*`)->(void)),*((*`,long,*`)->(void))))))
,	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	*(*(char))
)	O
{	O
o	*(struct(enum(int,int,int),int,int,int,int,*(struct(*(char),int,int,int,*((*`)->(void)),*((*`,long,*`)->(void)),*((*`,long,*`)->(void))))))
->	O
mode	enum(int,int,int)
=	O
SEXP_ADVANCED	int
;	O
o	*(struct(enum(int,int,int),int,int,int,int,*(struct(*(char),int,int,int,*((*`)->(void)),*((*`,long,*`)->(void)),*((*`,long,*`)->(void))))))
->	O
prefer_hex	int
=	O
0	int
;	O
o	*(struct(enum(int,int,int),int,int,int,int,*(struct(*(char),int,int,int,*((*`)->(void)),*((*`,long,*`)->(void)),*((*`,long,*`)->(void))))))
->	O
once	int
=	O
0	int
;	O
o	*(struct(enum(int,int,int),int,int,int,int,*(struct(*(char),int,int,int,*((*`)->(void)),*((*`,long,*`)->(void)),*((*`,long,*`)->(void))))))
->	O
lock	int
=	O
0	int
;	O
o	*(struct(enum(int,int,int),int,int,int,int,*(struct(*(char),int,int,int,*((*`)->(void)),*((*`,long,*`)->(void)),*((*`,long,*`)->(void))))))
->	O
hash	*(struct(*(char),int,int,int,*((*(void))->(void)),*((*(void),long,*(char))->(void)),*((*(void),long,*(char))->(void))))
=	O
NULL	O
;	O
o	*(struct(enum(int,int,int),int,int,int,int,*(struct(*(char),int,int,int,*((*`)->(void)),*((*`,long,*`)->(void)),*((*`,long,*`)->(void))))))
->	O
width	int
=	O
72	int
;	O
for	O
(	O
;	O
;	O
)	O
{	O
static	O
const	O
struct	O
nettle_hash	struct(*(char),int,int,int,*((*(void))->(void)),*((*(void),long,*(char))->(void)),*((*(void),long,*(char))->(void)))
*	O
hashes	array(*(struct(*(char),int,int,int,*((*(void))->(void)),*((*(void),long,*(char))->(void)),*((*(void),long,*(char))->(void)))))
[	O
]	O
=	O
{	O
&	O
nettle_md5	struct(*(char),int,int,int,*((*(void))->(void)),*((*(void),long,*(char))->(void)),*((*(void),long,*(char))->(void)))
,	O
&	O
nettle_sha1	struct(*(char),int,int,int,*((*(void))->(void)),*((*(void),long,*(char))->(void)),*((*(void),long,*(char))->(void)))
,	O
&	O
nettle_sha256	struct(*(char),int,int,int,*((*(void))->(void)),*((*(void),long,*(char))->(void)),*((*(void),long,*(char))->(void)))
,	O
NULL	O
}	O
;	O
static	O
const	O
struct	O
option	struct(*(char),int,*(int),int)
options	array(struct(*(char),int,*(int),int))
[	O
]	O
=	O
{	O
{	O
"help"	*(char)
,	O
no_argument	int
,	O
NULL	O
,	O
OPT_HELP	int
}	O
,	O
{	O
"version"	*(char)
,	O
no_argument	int
,	O
NULL	O
,	O
'V'	O
}	O
,	O
{	O
"once"	*(char)
,	O
no_argument	int
,	O
NULL	O
,	O
OPT_ONCE	int
}	O
,	O
{	O
"syntax"	*(char)
,	O
required_argument	int
,	O
NULL	O
,	O
's'	O
}	O
,	O
{	O
"hash"	*(char)
,	O
optional_argument	int
,	O
NULL	O
,	O
OPT_HASH	int
}	O
,	O
{	O
"raw-hash"	*(char)
,	O
optional_argument	int
,	O
NULL	O
,	O
OPT_HASH	int
}	O
,	O
{	O
"width"	*(char)
,	O
required_argument	int
,	O
NULL	O
,	O
'w'	O
}	O
,	O
{	O
"lock"	*(char)
,	O
no_argument	int
,	O
NULL	O
,	O
OPT_LOCK	int
}	O
,	O
{	O
NULL	O
,	O
0	int
,	O
NULL	O
,	O
0	int
}	O
}	O
;	O
int	O
c	int
;	O
int	O
option_index	int
=	O
0	int
;	O
unsigned	O
i	int
;	O
c	int
=	O
getopt_long	(int,*(*(char)),*(char),*(struct(*(char),int,*(int),int)),*(int))->(int)
(	O
argc	int
,	O
argv	*(*(char))
,	O
"Vs:w:"	*(char)
,	O
options	array(struct(*(char),int,*(int),int))
,	O
&	O
option_index	int
)	O
;	O
switch	O
(	O
c	int
)	O
{	O
default	O
:	O
abort	()->(void)
(	O
)	O
;	O
case	O
-	O
1	int
:	O
if	O
(	O
optind	int
!=	O
argc	int
)	O
die	(*(char))->(void)
(	O
"sexp-conv: Command line takes no arguments, only options.\n"	*(char)
)	O
;	O
return	O
;	O
case	O
'?'	O
:	O
exit	(int)->(void)
(	O
EXIT_FAILURE	int
)	O
;	O
case	O
'w'	O
:	O
{	O
char	O
*	O
end	*(char)
;	O
int	O
width	int
=	O
strtol	(*(char),*(*(char)),int)->(long)
(	O
optarg	*(char)
,	O
&	O
end	*(char)
,	O
0	int
)	O
;	O
if	O
(	O
!	O
*	O
optarg	*(char)
||	O
*	O
end	*(char)
||	O
width	int
<	O
0	int
)	O
die	(*(char))->(void)
(	O
"sexp-conv: Invalid width `%s'.\n"	*(char)
,	O
optarg	*(char)
)	O
;	O
o	*(struct(enum(int,int,int),int,int,int,int,*(struct(*(char),int,int,int,*((*`)->(void)),*((*`,long,*`)->(void)),*((*`,long,*`)->(void))))))
->	O
width	int
=	O
width	int
;	O
break	O
;	O
}	O
case	O
's'	O
:	O
if	O
(	O
o	*(struct(enum(int,int,int),int,int,int,int,*(struct(*(char),int,int,int,*((*`)->(void)),*((*`,long,*`)->(void)),*((*`,long,*`)->(void))))))
->	O
hash	*(struct(*(char),int,int,int,*((*(void))->(void)),*((*(void),long,*(char))->(void)),*((*(void),long,*(char))->(void))))
)	O
werror	(*(char))->(void)
(	O
"sexp-conv: Combining --hash and -s usually makes no sense.\n"	*(char)
)	O
;	O
if	O
(	O
match_argument	(*(char),*(char))->(int)
(	O
optarg	*(char)
,	O
"advanced"	*(char)
)	O
)	O
o	*(struct(enum(int,int,int),int,int,int,int,*(struct(*(char),int,int,int,*((*`)->(void)),*((*`,long,*`)->(void)),*((*`,long,*`)->(void))))))
->	O
mode	enum(int,int,int)
=	O
SEXP_ADVANCED	int
;	O
else	O
if	O
(	O
match_argument	(*(char),*(char))->(int)
(	O
optarg	*(char)
,	O
"transport"	*(char)
)	O
)	O
o	*(struct(enum(int,int,int),int,int,int,int,*(struct(*(char),int,int,int,*((*`)->(void)),*((*`,long,*`)->(void)),*((*`,long,*`)->(void))))))
->	O
mode	enum(int,int,int)
=	O
SEXP_TRANSPORT	int
;	O
else	O
if	O
(	O
match_argument	(*(char),*(char))->(int)
(	O
optarg	*(char)
,	O
"canonical"	*(char)
)	O
)	O
o	*(struct(enum(int,int,int),int,int,int,int,*(struct(*(char),int,int,int,*((*`)->(void)),*((*`,long,*`)->(void)),*((*`,long,*`)->(void))))))
->	O
mode	enum(int,int,int)
=	O
SEXP_CANONICAL	int
;	O
else	O
if	O
(	O
match_argument	(*(char),*(char))->(int)
(	O
optarg	*(char)
,	O
"hex"	*(char)
)	O
)	O
{	O
o	*(struct(enum(int,int,int),int,int,int,int,*(struct(*(char),int,int,int,*((*`)->(void)),*((*`,long,*`)->(void)),*((*`,long,*`)->(void))))))
->	O
mode	enum(int,int,int)
=	O
SEXP_ADVANCED	int
;	O
o	*(struct(enum(int,int,int),int,int,int,int,*(struct(*(char),int,int,int,*((*`)->(void)),*((*`,long,*`)->(void)),*((*`,long,*`)->(void))))))
->	O
prefer_hex	int
=	O
1	int
;	O
}	O
else	O
die	(*(char))->(void)
(	O
"Available syntax variants: advanced, transport, canonical\n"	*(char)
)	O
;	O
break	O
;	O
case	O
OPT_ONCE	int
:	O
o	*(struct(enum(int,int,int),int,int,int,int,*(struct(*(char),int,int,int,*((*`)->(void)),*((*`,long,*`)->(void)),*((*`,long,*`)->(void))))))
->	O
once	int
=	O
1	int
;	O
break	O
;	O
case	O
OPT_HASH	int
:	O
o	*(struct(enum(int,int,int),int,int,int,int,*(struct(*(char),int,int,int,*((*`)->(void)),*((*`,long,*`)->(void)),*((*`,long,*`)->(void))))))
->	O
mode	enum(int,int,int)
=	O
SEXP_CANONICAL	int
;	O
if	O
(	O
!	O
optarg	*(char)
)	O
o	*(struct(enum(int,int,int),int,int,int,int,*(struct(*(char),int,int,int,*((*`)->(void)),*((*`,long,*`)->(void)),*((*`,long,*`)->(void))))))
->	O
hash	*(struct(*(char),int,int,int,*((*(void))->(void)),*((*(void),long,*(char))->(void)),*((*(void),long,*(char))->(void))))
=	O
&	O
nettle_sha1	struct(*(char),int,int,int,*((*(void))->(void)),*((*(void),long,*(char))->(void)),*((*(void),long,*(char))->(void)))
;	O
else	O
for	O
(	O
i	int
=	O
0	int
;	O
;	O
i	int
++	O
)	O
{	O
if	O
(	O
!	O
hashes	array(*(struct(*(char),int,int,int,*((*(void))->(void)),*((*(void),long,*(char))->(void)),*((*(void),long,*(char))->(void)))))
[	O
i	int
]	O
)	O
die	(*(char))->(void)
(	O
"sexp_conv: Unknown hash algorithm `%s'\n"	*(char)
,	O
optarg	*(char)
)	O
;	O
if	O
(	O
match_argument	(*(char),*(char))->(int)
(	O
optarg	*(char)
,	O
hashes	array(*(struct(*(char),int,int,int,*((*(void))->(void)),*((*(void),long,*(char))->(void)),*((*(void),long,*(char))->(void)))))
[	O
i	int
]	O
->	O
name	*(char)
)	O
)	O
{	O
o	*(struct(enum(int,int,int),int,int,int,int,*(struct(*(char),int,int,int,*((*`)->(void)),*((*`,long,*`)->(void)),*((*`,long,*`)->(void))))))
->	O
hash	*(struct(*(char),int,int,int,*((*(void))->(void)),*((*(void),long,*(char))->(void)),*((*(void),long,*(char))->(void))))
=	O
hashes	array(*(struct(*(char),int,int,int,*((*(void))->(void)),*((*(void),long,*(char))->(void)),*((*(void),long,*(char))->(void)))))
[	O
i	int
]	O
;	O
break	O
;	O
}	O
}	O
break	O
;	O
case	O
OPT_LOCK	int
:	O
o	*(struct(enum(int,int,int),int,int,int,int,*(struct(*(char),int,int,int,*((*`)->(void)),*((*`,long,*`)->(void)),*((*`,long,*`)->(void))))))
->	O
lock	int
=	O
1	int
;	O
break	O
;	O
case	O
OPT_HELP	int
:	O
printf	(*(char))->(int)
(	O
"Usage: sexp-conv [OPTION...]\n"	*(char)
"  Conversion:     sexp-conv [OPTION...] <INPUT-SEXP\n"	*(char)
"  Fingerprinting: sexp-conv --hash=HASH <INPUT-SEXP\n\n"	*(char)
"Reads an s-expression on stdin, and outputs the same\n"	*(char)
"sexp on stdout, possibly with a different syntax.\n\n"	*(char)
"       --hash[=ALGORITHM]   Outputs only the hash of the expression.\n"	*(char)
"                            Available hash algorithms:\n"	*(char)
"                            "	*(char)
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
hashes	array(*(struct(*(char),int,int,int,*((*(void))->(void)),*((*(void),long,*(char))->(void)),*((*(void),long,*(char))->(void)))))
[	O
i	int
]	O
;	O
i	int
++	O
)	O
{	O
if	O
(	O
i	int
)	O
printf	(*(char))->(int)
(	O
", "	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"%s"	*(char)
,	O
hashes	array(*(struct(*(char),int,int,int,*((*(void))->(void)),*((*(void),long,*(char))->(void)),*((*(void),long,*(char))->(void)))))
[	O
i	int
]	O
->	O
name	*(char)
)	O
;	O
}	O
printf	(*(char))->(int)
(	O
" (default is sha1).\n"	*(char)
"   -s, --syntax=SYNTAX      The syntax used for the output. Available\n"	*(char)
"                            variants: advanced, hex, transport, canonical\n"	*(char)
"       --once               Process only the first s-expression.\n"	*(char)
"   -w, --width=WIDTH        Linewidth for base64 encoded data.\n"	*(char)
"                            Zero means no limit.\n"	*(char)
"       --lock               Lock output file.\n"	*(char)
"       --raw-hash           Alias for --hash, for compatibility\n"	*(char)
"                            with lsh-1.x.\n\n"	*(char)
"Report bugs to "	*(char)
BUG_ADDRESS	*(char)
".\n"	*(char)
)	O
;	O
exit	(int)->(void)
(	O
EXIT_SUCCESS	int
)	O
;	O
case	O
'V'	O
:	O
printf	(*(char))->(int)
(	O
"sexp-conv ("	*(char)
PACKAGE_STRING	*(char)
")\n"	*(char)
)	O
;	O
exit	(int)->(void)
(	O
EXIT_SUCCESS	int
)	O
;	O
}	O
}	O
}	O
int	O
main	(int,*(*(char)))->(int)
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	*(*(char))
)	O
{	O
struct	O
conv_options	struct(enum(int,int,int),int,int,int,int,*(struct(*(char),int,int,int,*((*(void))->(void)),*((*(void),long,*(char))->(void)),*((*(void),long,*(char))->(void)))))
options	array(struct(*(char),int,*(int),int))
;	O
struct	O
sexp_input	struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char))),enum(int,int,int),char,*(struct(*(char),int,int,int,*((*(void))->(void)),*((long)->(long)),*((*(void),*(char),long,*(char))->(long)),*((*(void),*(char))->(long)),*((*(void))->(void)),*((long)->(long)),*((*(void),*(long),*(char),long,*(char))->(int)),*((*(void))->(int)))),union(struct(*(char),short,char,char),struct(char,char)),char,enum(int,int,int,int,int,int,int,int,int,int))
input	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),enum(int,int,int),char,*(struct(*(char),int,int,int,*((*`)->(void)),*((long)->(long)),*((*`,*`,long,*`)->(long)),*((*`,*`)->(long)),*((*`)->(void)),*((long)->(long)),*((*`,*`,*`,long,*`)->(int)),*((*`)->(int)))),union(struct(*(char),short,char,char),struct(char,char)),char,enum(int,int,int,int,int,int,int,int,int,int)))
;	O
struct	O
sexp_parser	struct(*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),enum(int,int,int),char,*(struct(*(char),int,int,int,*((*`)->(void)),*((long)->(long)),*((*`,*`,long,*`)->(long)),*((*`,*`)->(long)),*((*`)->(void)),*((long)->(long)),*((*`,*`,*`,long,*`)->(int)),*((*`)->(int)))),union(struct(*(char),short,char,char),struct(char,char)),char,enum(int,int,int,int,int,int,int,int,int,int))),enum(int,int,int),int,int)
parser	*(struct(*(struct(*(struct`),enum(int,int,int),char,*(struct`),union(struct`,struct`),char,enum(int,int,int,int,int,int,int,int,int,int))),enum(int,int,int),int,int))
;	O
struct	O
sexp_compound_token	struct(enum(int,int,int,int,int,int,int,int,int,int),struct(*(char),long,*(void),*((*(void),*(void),long)->(*(void))),long),struct(*(char),long,*(void),*((*(void),*(void),long)->(*(void))),long))
token	enum(int,int,int,int,int,int,int,int,int,int)
;	O
struct	O
sexp_output	struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char))),int,*(struct(*(char),int,int,int,*((*(void))->(void)),*((long)->(long)),*((*(void),*(char),long,*(char))->(long)),*((*(void),*(char))->(long)),*((*(void))->(void)),*((long)->(long)),*((*(void),*(long),*(char),long,*(char))->(int)),*((*(void))->(int)))),int,int,*(struct(*(char),int,int,int,*((*(void))->(void)),*((*(void),long,*(char))->(void)),*((*(void),long,*(char))->(void)))),*(void),struct(*(char),short,char,char),int,int)
output	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,*(struct(*(char),int,int,int,*((*`)->(void)),*((long)->(long)),*((*`,*`,long,*`)->(long)),*((*`,*`)->(long)),*((*`)->(void)),*((long)->(long)),*((*`,*`,*`,long,*`)->(int)),*((*`)->(int)))),int,int,*(struct(*(char),int,int,int,*((*`)->(void)),*((*`,long,*`)->(void)),*((*`,long,*`)->(void)))),*(void),struct(*(char),short,char,char),int,int))
;	O
parse_options	(*(struct(enum(int,int,int),int,int,int,int,*(struct(*`,int,int,int,*`,*`,*`)))),int,*(*(char)))->(void)
(	O
&	O
options	array(struct(*(char),int,*(int),int))
,	O
argc	int
,	O
argv	*(*(char))
)	O
;	O
sexp_input_init	(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),enum(int,int,int),char,*(struct(*`,int,int,int,*`,*`,*`,*`,*`,*`,*`,*`)),union(struct(*`,short,char,char),struct(char,char)),char,enum(int,int,int,int,int,int,int,int,int,int))),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(void)
(	O
&	O
input	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),enum(int,int,int),char,*(struct(*(char),int,int,int,*((*`)->(void)),*((long)->(long)),*((*`,*`,long,*`)->(long)),*((*`,*`)->(long)),*((*`)->(void)),*((long)->(long)),*((*`,*`,*`,long,*`)->(int)),*((*`)->(int)))),union(struct(*(char),short,char,char),struct(char,char)),char,enum(int,int,int,int,int,int,int,int,int,int)))
,	O
stdin	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
sexp_parse_init	(*(struct(*(struct(*`,enum(int,int,int),char,*`,union`,char,enum(int,int,int,int,int,int,int,int,int,int))),enum(int,int,int),int,int)),*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),enum(int,int,int),char,*(struct(*`,int,int,int,*`,*`,*`,*`,*`,*`,*`,*`)),union(struct(*`,short,char,char),struct(char,char)),char,enum(int,int,int,int,int,int,int,int,int,int))),enum(int,int,int))->(void)
(	O
&	O
parser	*(struct(*(struct(*(struct`),enum(int,int,int),char,*(struct`),union(struct`,struct`),char,enum(int,int,int,int,int,int,int,int,int,int))),enum(int,int,int),int,int))
,	O
&	O
input	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),enum(int,int,int),char,*(struct(*(char),int,int,int,*((*`)->(void)),*((long)->(long)),*((*`,*`,long,*`)->(long)),*((*`,*`)->(long)),*((*`)->(void)),*((long)->(long)),*((*`,*`,*`,long,*`)->(int)),*((*`)->(int)))),union(struct(*(char),short,char,char),struct(char,char)),char,enum(int,int,int,int,int,int,int,int,int,int)))
,	O
SEXP_ADVANCED	int
)	O
;	O
sexp_compound_token_init	(*(struct(enum(int,int,int,int,int,int,int,int,int,int),struct(*(char),long,*(void),*((*`,*`,long)->(*`)),long),struct(*(char),long,*(void),*((*`,*`,long)->(*`)),long))))->(void)
(	O
&	O
token	enum(int,int,int,int,int,int,int,int,int,int)
)	O
;	O
sexp_output_init	(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,*(struct(*`,int,int,int,*`,*`,*`,*`,*`,*`,*`,*`)),int,int,*(struct(*`,int,int,int,*`,*`,*`)),*(void),struct(*(char),short,char,char),int,int)),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),int,int)->(void)
(	O
&	O
output	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,*(struct(*(char),int,int,int,*((*`)->(void)),*((long)->(long)),*((*`,*`,long,*`)->(long)),*((*`,*`)->(long)),*((*`)->(void)),*((long)->(long)),*((*`,*`,*`,long,*`)->(int)),*((*`)->(int)))),int,int,*(struct(*(char),int,int,int,*((*`)->(void)),*((*`,long,*`)->(void)),*((*`,long,*`)->(void)))),*(void),struct(*(char),short,char,char),int,int))
,	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
options	array(struct(*(char),int,*(int),int))
.	O
width	int
,	O
options	array(struct(*(char),int,*(int),int))
.	O
prefer_hex	int
)	O
;	O
if	O
(	O
options	array(struct(*(char),int,*(int),int))
.	O
lock	int
)	O
{	O
struct	O
flock	struct(short,short,long,long,int)
fl	struct(short,short,long,long,int)
;	O
memset	(*(void),int,long)->(*(void))
(	O
&	O
fl	struct(short,short,long,long,int)
,	O
0	int
,	O
sizeof	O
(	O
fl	struct(short,short,long,long,int)
)	O
)	O
;	O
fl	struct(short,short,long,long,int)
.	O
l_type	short
=	O
F_WRLCK	int
;	O
fl	struct(short,short,long,long,int)
.	O
l_whence	short
=	O
SEEK_SET	int
;	O
fl	struct(short,short,long,long,int)
.	O
l_start	long
=	O
0	int
;	O
fl	struct(short,short,long,long,int)
.	O
l_len	long
=	O
0	int
;	O
if	O
(	O
fcntl	(int,int)->(int)
(	O
STDOUT_FILENO	int
,	O
F_SETLKW	int
,	O
&	O
fl	struct(short,short,long,long,int)
)	O
==	O
-	O
1	int
)	O
die	(*(char))->(void)
(	O
"Locking output file failed: %s\n"	*(char)
,	O
strerror	(int)->(*(char))
(	O
errno	O
)	O
)	O
;	O
}	O
if	O
(	O
options	array(struct(*(char),int,*(int),int))
.	O
hash	*(struct(*(char),int,int,int,*((*(void))->(void)),*((*(void),long,*(char))->(void)),*((*(void),long,*(char))->(void))))
)	O
{	O
void	O
*	O
ctx	*(void)
=	O
xalloc	(long)->(*(void))
(	O
options	array(struct(*(char),int,*(int),int))
.	O
hash	*(struct(*(char),int,int,int,*((*(void))->(void)),*((*(void),long,*(char))->(void)),*((*(void),long,*(char))->(void))))
->	O
context_size	int
)	O
;	O
sexp_output_hash_init	(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,*(struct(*`,int,int,int,*`,*`,*`,*`,*`,*`,*`,*`)),int,int,*(struct(*`,int,int,int,*`,*`,*`)),*(void),struct(*(char),short,char,char),int,int)),*(struct(*(char),int,int,int,*((*`)->(void)),*((*`,long,*`)->(void)),*((*`,long,*`)->(void)))),*(void))->(void)
(	O
&	O
output	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,*(struct(*(char),int,int,int,*((*`)->(void)),*((long)->(long)),*((*`,*`,long,*`)->(long)),*((*`,*`)->(long)),*((*`)->(void)),*((long)->(long)),*((*`,*`,*`,long,*`)->(int)),*((*`)->(int)))),int,int,*(struct(*(char),int,int,int,*((*`)->(void)),*((*`,long,*`)->(void)),*((*`,long,*`)->(void)))),*(void),struct(*(char),short,char,char),int,int))
,	O
options	array(struct(*(char),int,*(int),int))
.	O
hash	*(struct(*(char),int,int,int,*((*(void))->(void)),*((*(void),long,*(char))->(void)),*((*(void),long,*(char))->(void))))
,	O
ctx	*(void)
)	O
;	O
}	O
sexp_get_char	(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),enum(int,int,int),char,*(struct(*`,int,int,int,*`,*`,*`,*`,*`,*`,*`,*`)),union(struct(*`,short,char,char),struct(char,char)),char,enum(int,int,int,int,int,int,int,int,int,int))))->(void)
(	O
&	O
input	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),enum(int,int,int),char,*(struct(*(char),int,int,int,*((*`)->(void)),*((long)->(long)),*((*`,*`,long,*`)->(long)),*((*`,*`)->(long)),*((*`)->(void)),*((long)->(long)),*((*`,*`,*`,long,*`)->(int)),*((*`)->(int)))),union(struct(*(char),short,char,char),struct(char,char)),char,enum(int,int,int,int,int,int,int,int,int,int)))
)	O
;	O
sexp_parse	(*(struct(*(struct(*`,enum(int,int,int),char,*`,union`,char,enum(int,int,int,int,int,int,int,int,int,int))),enum(int,int,int),int,int)),*(struct(enum(int,int,int,int,int,int,int,int,int,int),struct(*(char),long,*(void),*((*`,*`,long)->(*`)),long),struct(*(char),long,*(void),*((*`,*`,long)->(*`)),long))))->(void)
(	O
&	O
parser	*(struct(*(struct(*(struct`),enum(int,int,int),char,*(struct`),union(struct`,struct`),char,enum(int,int,int,int,int,int,int,int,int,int))),enum(int,int,int),int,int))
,	O
&	O
token	enum(int,int,int,int,int,int,int,int,int,int)
)	O
;	O
if	O
(	O
token	enum(int,int,int,int,int,int,int,int,int,int)
.	O
type	enum(int,int,int,int,int,int,int,int,int,int)
==	O
SEXP_EOF	int
)	O
{	O
if	O
(	O
options	array(struct(*(char),int,*(int),int))
.	O
once	int
)	O
die	(*(char))->(void)
(	O
"sexp-conv: No input expression.\n"	*(char)
)	O
;	O
return	O
EXIT_SUCCESS	int
;	O
}	O
do	O
{	O
sexp_convert_item	(*(struct(*(struct(*`,enum(int,int,int),char,*`,union`,char,enum(int,int,int,int,int,int,int,int,int,int))),enum(int,int,int),int,int)),*(struct(enum(int,int,int,int,int,int,int,int,int,int),struct(*(char),long,*(void),*((*`,*`,long)->(*`)),long),struct(*(char),long,*(void),*((*`,*`,long)->(*`)),long))),*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,*(struct(*`,int,int,int,*`,*`,*`,*`,*`,*`,*`,*`)),int,int,*(struct(*`,int,int,int,*`,*`,*`)),*(void),struct(*(char),short,char,char),int,int)),enum(int,int,int),int)->(void)
(	O
&	O
parser	*(struct(*(struct(*(struct`),enum(int,int,int),char,*(struct`),union(struct`,struct`),char,enum(int,int,int,int,int,int,int,int,int,int))),enum(int,int,int),int,int))
,	O
&	O
token	enum(int,int,int,int,int,int,int,int,int,int)
,	O
&	O
output	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,*(struct(*(char),int,int,int,*((*`)->(void)),*((long)->(long)),*((*`,*`,long,*`)->(long)),*((*`,*`)->(long)),*((*`)->(void)),*((long)->(long)),*((*`,*`,*`,long,*`)->(int)),*((*`)->(int)))),int,int,*(struct(*(char),int,int,int,*((*`)->(void)),*((*`,long,*`)->(void)),*((*`,long,*`)->(void)))),*(void),struct(*(char),short,char,char),int,int))
,	O
options	array(struct(*(char),int,*(int),int))
.	O
mode	enum(int,int,int)
,	O
0	int
)	O
;	O
if	O
(	O
options	array(struct(*(char),int,*(int),int))
.	O
hash	*(struct(*(char),int,int,int,*((*(void))->(void)),*((*(void),long,*(char))->(void)),*((*(void),long,*(char))->(void))))
)	O
{	O
sexp_put_digest	(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,*(struct(*`,int,int,int,*`,*`,*`,*`,*`,*`,*`,*`)),int,int,*(struct(*`,int,int,int,*`,*`,*`)),*(void),struct(*(char),short,char,char),int,int)))->(void)
(	O
&	O
output	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,*(struct(*(char),int,int,int,*((*`)->(void)),*((long)->(long)),*((*`,*`,long,*`)->(long)),*((*`,*`)->(long)),*((*`)->(void)),*((long)->(long)),*((*`,*`,*`,long,*`)->(int)),*((*`)->(int)))),int,int,*(struct(*(char),int,int,int,*((*`)->(void)),*((*`,long,*`)->(void)),*((*`,long,*`)->(void)))),*(void),struct(*(char),short,char,char),int,int))
)	O
;	O
sexp_put_newline	(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,*(struct(*`,int,int,int,*`,*`,*`,*`,*`,*`,*`,*`)),int,int,*(struct(*`,int,int,int,*`,*`,*`)),*(void),struct(*(char),short,char,char),int,int)),int)->(void)
(	O
&	O
output	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,*(struct(*(char),int,int,int,*((*`)->(void)),*((long)->(long)),*((*`,*`,long,*`)->(long)),*((*`,*`)->(long)),*((*`)->(void)),*((long)->(long)),*((*`,*`,*`,long,*`)->(int)),*((*`)->(int)))),int,int,*(struct(*(char),int,int,int,*((*`)->(void)),*((*`,long,*`)->(void)),*((*`,long,*`)->(void)))),*(void),struct(*(char),short,char,char),int,int))
,	O
0	int
)	O
;	O
}	O
else	O
if	O
(	O
options	array(struct(*(char),int,*(int),int))
.	O
mode	enum(int,int,int)
!=	O
SEXP_CANONICAL	int
)	O
sexp_put_newline	(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,*(struct(*`,int,int,int,*`,*`,*`,*`,*`,*`,*`,*`)),int,int,*(struct(*`,int,int,int,*`,*`,*`)),*(void),struct(*(char),short,char,char),int,int)),int)->(void)
(	O
&	O
output	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,*(struct(*(char),int,int,int,*((*`)->(void)),*((long)->(long)),*((*`,*`,long,*`)->(long)),*((*`,*`)->(long)),*((*`)->(void)),*((long)->(long)),*((*`,*`,*`,long,*`)->(int)),*((*`)->(int)))),int,int,*(struct(*(char),int,int,int,*((*`)->(void)),*((*`,long,*`)->(void)),*((*`,long,*`)->(void)))),*(void),struct(*(char),short,char,char),int,int))
,	O
0	int
)	O
;	O
sexp_parse	(*(struct(*(struct(*`,enum(int,int,int),char,*`,union`,char,enum(int,int,int,int,int,int,int,int,int,int))),enum(int,int,int),int,int)),*(struct(enum(int,int,int,int,int,int,int,int,int,int),struct(*(char),long,*(void),*((*`,*`,long)->(*`)),long),struct(*(char),long,*(void),*((*`,*`,long)->(*`)),long))))->(void)
(	O
&	O
parser	*(struct(*(struct(*(struct`),enum(int,int,int),char,*(struct`),union(struct`,struct`),char,enum(int,int,int,int,int,int,int,int,int,int))),enum(int,int,int),int,int))
,	O
&	O
token	enum(int,int,int,int,int,int,int,int,int,int)
)	O
;	O
}	O
while	O
(	O
!	O
options	array(struct(*(char),int,*(int),int))
.	O
once	int
&&	O
token	enum(int,int,int,int,int,int,int,int,int,int)
.	O
type	enum(int,int,int,int,int,int,int,int,int,int)
!=	O
SEXP_EOF	int
)	O
;	O
sexp_compound_token_clear	(*(struct(enum(int,int,int,int,int,int,int,int,int,int),struct(*(char),long,*(void),*((*`,*`,long)->(*`)),long),struct(*(char),long,*(void),*((*`,*`,long)->(*`)),long))))->(void)
(	O
&	O
token	enum(int,int,int,int,int,int,int,int,int,int)
)	O
;	O
if	O
(	O
fflush	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
output	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,*(struct(*(char),int,int,int,*((*`)->(void)),*((long)->(long)),*((*`,*`,long,*`)->(long)),*((*`,*`)->(long)),*((*`)->(void)),*((long)->(long)),*((*`,*`,*`,long,*`)->(int)),*((*`)->(int)))),int,int,*(struct(*(char),int,int,int,*((*`)->(void)),*((*`,long,*`)->(void)),*((*`,long,*`)->(void)))),*(void),struct(*(char),short,char,char),int,int))
.	O
f	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
<	O
0	int
)	O
die	(*(char))->(void)
(	O
"Final fflush failed: %s.\n"	*(char)
,	O
strerror	(int)->(*(char))
(	O
errno	O
)	O
)	O
;	O
return	O
EXIT_SUCCESS	int
;	O
}	O
