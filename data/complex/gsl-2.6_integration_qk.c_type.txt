void	O
gsl_integration_qk	(int,array(double),array(double),array(double),array(double),array(double),*(struct(*((double,*`)->(double)),*(void))),double,double,*(double),*(double),*(double),*(double))->(void)
(	O
const	O
int	O
n	int
,	O
const	O
double	O
xgk	array(double)
[	O
]	O
,	O
const	O
double	O
wg	array(double)
[	O
]	O
,	O
const	O
double	O
wgk	array(double)
[	O
]	O
,	O
double	O
fv1	array(double)
[	O
]	O
,	O
double	O
fv2	array(double)
[	O
]	O
,	O
const	O
gsl_function	struct(*((double,*(void))->(double)),*(void))
*	O
f	*(double)
,	O
double	O
a	double
,	O
double	O
b	double
,	O
double	O
*	O
result	*(double)
,	O
double	O
*	O
abserr	*(double)
,	O
double	O
*	O
resabs	*(double)
,	O
double	O
*	O
resasc	*(double)
)	O
{	O
const	O
double	O
center	double
=	O
0.5	int
*	O
(	O
a	double
+	O
b	double
)	O
;	O
const	O
double	O
half_length	double
=	O
0.5	int
*	O
(	O
b	double
-	O
a	double
)	O
;	O
const	O
double	O
abs_half_length	double
=	O
fabs	(double)->(double)
(	O
half_length	double
)	O
;	O
const	O
double	O
f_center	double
=	O
GSL_FN_EVAL	O
(	O
f	*(double)
,	O
center	double
)	O
;	O
double	O
result_gauss	double
=	O
0	int
;	O
double	O
result_kronrod	double
=	O
f_center	double
*	O
wgk	array(double)
[	O
n	int
-	O
1	int
]	O
;	O
double	O
result_abs	double
=	O
fabs	(double)->(double)
(	O
result_kronrod	double
)	O
;	O
double	O
result_asc	double
=	O
0	int
;	O
double	O
mean	double
=	O
0	int
,	O
err	double
=	O
0	int
;	O
int	O
j	int
;	O
if	O
(	O
n	int
%	O
2	int
==	O
0	int
)	O
{	O
result_gauss	double
=	O
f_center	double
*	O
wg	array(double)
[	O
n	int
/	O
2	int
-	O
1	int
]	O
;	O
}	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<	O
(	O
n	int
-	O
1	int
)	O
/	O
2	int
;	O
j	int
++	O
)	O
{	O
const	O
int	O
jtw	int
=	O
j	int
*	O
2	int
+	O
1	int
;	O
const	O
double	O
abscissa	double
=	O
half_length	double
*	O
xgk	array(double)
[	O
jtw	int
]	O
;	O
const	O
double	O
fval1	double
=	O
GSL_FN_EVAL	O
(	O
f	*(double)
,	O
center	double
-	O
abscissa	double
)	O
;	O
const	O
double	O
fval2	double
=	O
GSL_FN_EVAL	O
(	O
f	*(double)
,	O
center	double
+	O
abscissa	double
)	O
;	O
const	O
double	O
fsum	double
=	O
fval1	double
+	O
fval2	double
;	O
fv1	array(double)
[	O
jtw	int
]	O
=	O
fval1	double
;	O
fv2	array(double)
[	O
jtw	int
]	O
=	O
fval2	double
;	O
result_gauss	double
+=	O
wg	array(double)
[	O
j	int
]	O
*	O
fsum	double
;	O
result_kronrod	double
+=	O
wgk	array(double)
[	O
jtw	int
]	O
*	O
fsum	double
;	O
result_abs	double
+=	O
wgk	array(double)
[	O
jtw	int
]	O
*	O
(	O
fabs	(double)->(double)
(	O
fval1	double
)	O
+	O
fabs	(double)->(double)
(	O
fval2	double
)	O
)	O
;	O
}	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<	O
n	int
/	O
2	int
;	O
j	int
++	O
)	O
{	O
int	O
jtwm1	int
=	O
j	int
*	O
2	int
;	O
const	O
double	O
abscissa	double
=	O
half_length	double
*	O
xgk	array(double)
[	O
jtwm1	int
]	O
;	O
const	O
double	O
fval1	double
=	O
GSL_FN_EVAL	O
(	O
f	*(double)
,	O
center	double
-	O
abscissa	double
)	O
;	O
const	O
double	O
fval2	double
=	O
GSL_FN_EVAL	O
(	O
f	*(double)
,	O
center	double
+	O
abscissa	double
)	O
;	O
fv1	array(double)
[	O
jtwm1	int
]	O
=	O
fval1	double
;	O
fv2	array(double)
[	O
jtwm1	int
]	O
=	O
fval2	double
;	O
result_kronrod	double
+=	O
wgk	array(double)
[	O
jtwm1	int
]	O
*	O
(	O
fval1	double
+	O
fval2	double
)	O
;	O
result_abs	double
+=	O
wgk	array(double)
[	O
jtwm1	int
]	O
*	O
(	O
fabs	(double)->(double)
(	O
fval1	double
)	O
+	O
fabs	(double)->(double)
(	O
fval2	double
)	O
)	O
;	O
}	O
;	O
mean	double
=	O
result_kronrod	double
*	O
0.5	int
;	O
result_asc	double
=	O
wgk	array(double)
[	O
n	int
-	O
1	int
]	O
*	O
fabs	(double)->(double)
(	O
f_center	double
-	O
mean	double
)	O
;	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<	O
n	int
-	O
1	int
;	O
j	int
++	O
)	O
{	O
result_asc	double
+=	O
wgk	array(double)
[	O
j	int
]	O
*	O
(	O
fabs	(double)->(double)
(	O
fv1	array(double)
[	O
j	int
]	O
-	O
mean	double
)	O
+	O
fabs	(double)->(double)
(	O
fv2	array(double)
[	O
j	int
]	O
-	O
mean	double
)	O
)	O
;	O
}	O
err	double
=	O
(	O
result_kronrod	double
-	O
result_gauss	double
)	O
*	O
half_length	double
;	O
result_kronrod	double
*=	O
half_length	double
;	O
result_abs	double
*=	O
abs_half_length	double
;	O
result_asc	double
*=	O
abs_half_length	double
;	O
*	O
result	*(double)
=	O
result_kronrod	double
;	O
*	O
resabs	*(double)
=	O
result_abs	double
;	O
*	O
resasc	*(double)
=	O
result_asc	double
;	O
*	O
abserr	*(double)
=	O
rescale_error	(double,double,double)->(double)
(	O
err	double
,	O
result_abs	double
,	O
result_asc	double
)	O
;	O
}	O
