struct	O
rec_record_s	struct(*(void),int,int,*(char),long,*(char),long,*(char),*(struct))
{	O
void	O
*	O
container	*(void)
;	O
int	O
field_type	int
;	O
int	O
comment_type	int
;	O
char	O
*	O
source	*(char)
;	O
size_t	long
location	long
;	O
char	O
*	O
location_str	*(char)
;	O
size_t	long
char_location	long
;	O
char	O
*	O
char_location_str	*(char)
;	O
rec_mset_t	*(struct)
mset	*(struct)
;	O
}	O
;	O
static	O
void	O
rec_record_init	(*(struct(*(void),int,int,*(char),long,*(char),long,*(char),*(struct))))->(void)
(	O
rec_record_t	*(struct)
record	*(struct)
)	O
;	O
static	O
void	O
rec_record_field_disp_fn	(*(void))->(void)
(	O
void	O
*	O
data	*(void)
)	O
;	O
static	O
bool	bool
rec_record_field_equal_fn	(*(void),*(void))->(bool)
(	O
void	O
*	O
data1	*(void)
,	O
void	O
*	O
data2	*(void)
)	O
;	O
static	O
void	O
*	O
rec_record_field_dup_fn	(*(void))->(*(void))
(	O
void	O
*	O
data	*(void)
)	O
;	O
static	O
void	O
rec_record_comment_disp_fn	(*(void))->(void)
(	O
void	O
*	O
data	*(void)
)	O
;	O
static	O
bool	bool
rec_record_comment_equal_fn	(*(void),*(void))->(bool)
(	O
void	O
*	O
data1	*(void)
,	O
void	O
*	O
data2	*(void)
)	O
;	O
static	O
void	O
*	O
rec_record_comment_dup_fn	(*(void))->(*(void))
(	O
void	O
*	O
data	*(void)
)	O
;	O
rec_record_t	*(struct)
rec_record_new	()->(*(struct))
(	O
void	O
)	O
{	O
rec_record_t	*(struct)
record	*(struct)
;	O
record	*(struct)
=	O
malloc	(long)->(*(void))
(	O
sizeof	O
(	O
struct	O
rec_record_s	struct(*(void),int,int,*(char),long,*(char),long,*(char),*(struct))
)	O
)	O
;	O
if	O
(	O
record	*(struct)
)	O
{	O
rec_record_init	(*(struct(*(void),int,int,*(char),long,*(char),long,*(char),*(struct))))->(void)
(	O
record	*(struct)
)	O
;	O
record	*(struct)
->	O
container	*(void)
=	O
NULL	O
;	O
record	*(struct)
->	O
source	*(char)
=	O
NULL	O
;	O
record	*(struct)
->	O
location	long
=	O
0	int
;	O
record	*(struct)
->	O
location_str	*(char)
=	O
NULL	O
;	O
record	*(struct)
->	O
char_location	long
=	O
0	int
;	O
record	*(struct)
->	O
char_location_str	*(char)
=	O
NULL	O
;	O
record	*(struct)
->	O
mset	*(struct)
=	O
rec_mset_new	()->(*(struct))
(	O
)	O
;	O
if	O
(	O
record	*(struct)
->	O
mset	*(struct)
)	O
{	O
record	*(struct)
->	O
field_type	int
=	O
rec_mset_register_type	(*(struct),*(char),*((*(void))->(void)),*((*(void),*(void))->(bool)),*((*(void))->(*(void))),*((*(void),*(void),int)->(int)))->(int)
(	O
record	*(struct)
->	O
mset	*(struct)
,	O
"field"	*(char)
,	O
rec_record_field_disp_fn	(*(void))->(void)
,	O
rec_record_field_equal_fn	(*(void),*(void))->(bool)
,	O
rec_record_field_dup_fn	(*(void))->(*(void))
,	O
NULL	O
)	O
;	O
record	*(struct)
->	O
comment_type	int
=	O
rec_mset_register_type	(*(struct),*(char),*((*(void))->(void)),*((*(void),*(void))->(bool)),*((*(void))->(*(void))),*((*(void),*(void),int)->(int)))->(int)
(	O
record	*(struct)
->	O
mset	*(struct)
,	O
"comment"	*(char)
,	O
rec_record_comment_disp_fn	(*(void))->(void)
,	O
rec_record_comment_equal_fn	(*(void),*(void))->(bool)
,	O
rec_record_comment_dup_fn	(*(void))->(*(void))
,	O
NULL	O
)	O
;	O
}	O
else	O
{	O
rec_record_destroy	(*(struct))->(void)
(	O
record	*(struct)
)	O
;	O
record	*(struct)
=	O
NULL	O
;	O
}	O
}	O
return	O
record	*(struct)
;	O
}	O
void	O
rec_record_destroy	(*(struct))->(void)
(	O
rec_record_t	*(struct)
record	*(struct)
)	O
{	O
if	O
(	O
record	*(struct)
)	O
{	O
free	(*(void))->(void)
(	O
record	*(struct)
->	O
source	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
record	*(struct)
->	O
location_str	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
record	*(struct)
->	O
char_location_str	*(char)
)	O
;	O
rec_mset_destroy	(*(struct))->(void)
(	O
record	*(struct)
->	O
mset	*(struct)
)	O
;	O
free	(*(void))->(void)
(	O
record	*(struct)
)	O
;	O
}	O
}	O
rec_record_t	*(struct)
rec_record_dup	(*(struct))->(*(struct))
(	O
rec_record_t	*(struct)
record	*(struct)
)	O
{	O
rec_record_t	*(struct)
new	*(struct(*(void),int,int,*(char),long,*(char),long,*(char),*(struct)))
;	O
new	*(struct(*(void),int,int,*(char),long,*(char),long,*(char),*(struct)))
=	O
malloc	(long)->(*(void))
(	O
sizeof	O
(	O
struct	O
rec_record_s	struct(*(void),int,int,*(char),long,*(char),long,*(char),*(struct))
)	O
)	O
;	O
if	O
(	O
new	*(struct(*(void),int,int,*(char),long,*(char),long,*(char),*(struct)))
)	O
{	O
rec_record_init	(*(struct(*(void),int,int,*(char),long,*(char),long,*(char),*(struct))))->(void)
(	O
new	*(struct(*(void),int,int,*(char),long,*(char),long,*(char),*(struct)))
)	O
;	O
new	*(struct(*(void),int,int,*(char),long,*(char),long,*(char),*(struct)))
->	O
field_type	int
=	O
record	*(struct)
->	O
field_type	int
;	O
new	*(struct(*(void),int,int,*(char),long,*(char),long,*(char),*(struct)))
->	O
comment_type	int
=	O
record	*(struct)
->	O
comment_type	int
;	O
new	*(struct(*(void),int,int,*(char),long,*(char),long,*(char),*(struct)))
->	O
mset	*(struct)
=	O
rec_mset_dup	(*(struct))->(*(struct))
(	O
record	*(struct)
->	O
mset	*(struct)
)	O
;	O
if	O
(	O
!	O
new	*(struct(*(void),int,int,*(char),long,*(char),long,*(char),*(struct)))
->	O
mset	*(struct)
)	O
{	O
rec_record_destroy	(*(struct))->(void)
(	O
new	*(struct(*(void),int,int,*(char),long,*(char),long,*(char),*(struct)))
)	O
;	O
return	O
NULL	O
;	O
}	O
new	*(struct(*(void),int,int,*(char),long,*(char),long,*(char),*(struct)))
->	O
source	*(char)
=	O
NULL	O
;	O
if	O
(	O
record	*(struct)
->	O
source	*(char)
)	O
{	O
new	*(struct(*(void),int,int,*(char),long,*(char),long,*(char),*(struct)))
->	O
source	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
record	*(struct)
->	O
source	*(char)
)	O
;	O
if	O
(	O
!	O
new	*(struct(*(void),int,int,*(char),long,*(char),long,*(char),*(struct)))
->	O
source	*(char)
)	O
{	O
rec_record_destroy	(*(struct))->(void)
(	O
new	*(struct(*(void),int,int,*(char),long,*(char),long,*(char),*(struct)))
)	O
;	O
return	O
NULL	O
;	O
}	O
}	O
new	*(struct(*(void),int,int,*(char),long,*(char),long,*(char),*(struct)))
->	O
location	long
=	O
record	*(struct)
->	O
location	long
;	O
new	*(struct(*(void),int,int,*(char),long,*(char),long,*(char),*(struct)))
->	O
char_location	long
=	O
record	*(struct)
->	O
char_location	long
;	O
new	*(struct(*(void),int,int,*(char),long,*(char),long,*(char),*(struct)))
->	O
location_str	*(char)
=	O
NULL	O
;	O
if	O
(	O
record	*(struct)
->	O
location_str	*(char)
)	O
{	O
new	*(struct(*(void),int,int,*(char),long,*(char),long,*(char),*(struct)))
->	O
location_str	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
record	*(struct)
->	O
location_str	*(char)
)	O
;	O
if	O
(	O
!	O
new	*(struct(*(void),int,int,*(char),long,*(char),long,*(char),*(struct)))
->	O
location_str	*(char)
)	O
{	O
rec_record_destroy	(*(struct))->(void)
(	O
new	*(struct(*(void),int,int,*(char),long,*(char),long,*(char),*(struct)))
)	O
;	O
return	O
NULL	O
;	O
}	O
}	O
new	*(struct(*(void),int,int,*(char),long,*(char),long,*(char),*(struct)))
->	O
char_location_str	*(char)
=	O
NULL	O
;	O
if	O
(	O
record	*(struct)
->	O
char_location_str	*(char)
)	O
{	O
new	*(struct(*(void),int,int,*(char),long,*(char),long,*(char),*(struct)))
->	O
char_location_str	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
record	*(struct)
->	O
char_location_str	*(char)
)	O
;	O
if	O
(	O
!	O
new	*(struct(*(void),int,int,*(char),long,*(char),long,*(char),*(struct)))
->	O
char_location_str	*(char)
)	O
{	O
rec_record_destroy	(*(struct))->(void)
(	O
new	*(struct(*(void),int,int,*(char),long,*(char),long,*(char),*(struct)))
)	O
;	O
return	O
NULL	O
;	O
}	O
}	O
new	*(struct(*(void),int,int,*(char),long,*(char),long,*(char),*(struct)))
->	O
container	*(void)
=	O
record	*(struct)
->	O
container	*(void)
;	O
}	O
return	O
new	*(struct(*(void),int,int,*(char),long,*(char),long,*(char),*(struct)))
;	O
}	O
bool	bool
rec_record_subset_p	(*(struct),*(struct))->(bool)
(	O
rec_record_t	*(struct)
record1	*(struct)
,	O
rec_record_t	*(struct)
record2	*(struct)
)	O
{	O
bool	bool
result	*(*(char))
;	O
rec_mset_iterator_t	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
iter1	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
;	O
rec_mset_elem_t	*(struct)
elem1	*(struct)
;	O
const	O
void	O
*	O
data	*(void)
;	O
result	*(*(char))
=	O
true	int
;	O
iter1	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
=	O
rec_mset_iterator	(*(struct))->(struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long)))
(	O
record1	*(struct)
->	O
mset	*(struct)
)	O
;	O
while	O
(	O
rec_mset_iterator_next	(*(struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))),int,*(*(void)),*(*(struct)))->(bool)
(	O
&	O
iter1	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
,	O
MSET_ANY	int
,	O
&	O
data	*(void)
,	O
&	O
elem1	*(struct)
)	O
)	O
{	O
bool	bool
elem_found	bool
=	O
false	int
;	O
rec_mset_elem_t	*(struct)
elem2	*(struct)
;	O
rec_mset_iterator_t	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
iter2	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
=	O
rec_mset_iterator	(*(struct))->(struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long)))
(	O
record2	*(struct)
->	O
mset	*(struct)
)	O
;	O
while	O
(	O
rec_mset_iterator_next	(*(struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))),int,*(*(void)),*(*(struct)))->(bool)
(	O
&	O
iter2	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
,	O
MSET_ANY	int
,	O
&	O
data	*(void)
,	O
&	O
elem2	*(struct)
)	O
)	O
{	O
if	O
(	O
rec_mset_elem_equal_p	(*(struct),*(struct))->(bool)
(	O
elem1	*(struct)
,	O
elem2	*(struct)
)	O
)	O
{	O
elem_found	bool
=	O
true	int
;	O
break	O
;	O
}	O
}	O
if	O
(	O
!	O
elem_found	bool
)	O
{	O
result	*(*(char))
=	O
false	int
;	O
break	O
;	O
}	O
rec_mset_iterator_free	(*(struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))))->(void)
(	O
&	O
iter2	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
)	O
;	O
}	O
rec_mset_iterator_free	(*(struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))))->(void)
(	O
&	O
iter1	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
)	O
;	O
return	O
result	*(*(char))
;	O
}	O
bool	bool
rec_record_equal_p	(*(struct),*(struct))->(bool)
(	O
rec_record_t	*(struct)
record1	*(struct)
,	O
rec_record_t	*(struct)
record2	*(struct)
)	O
{	O
return	O
(	O
(	O
rec_record_subset_p	(*(struct),*(struct))->(bool)
(	O
record1	*(struct)
,	O
record2	*(struct)
)	O
)	O
&&	O
(	O
rec_record_subset_p	(*(struct),*(struct))->(bool)
(	O
record2	*(struct)
,	O
record1	*(struct)
)	O
)	O
)	O
;	O
}	O
rec_mset_t	*(struct)
rec_record_mset	(*(struct))->(*(struct))
(	O
rec_record_t	*(struct)
record	*(struct)
)	O
{	O
return	O
record	*(struct)
->	O
mset	*(struct)
;	O
}	O
size_t	long
rec_record_num_elems	(*(struct))->(long)
(	O
rec_record_t	*(struct)
record	*(struct)
)	O
{	O
return	O
rec_mset_count	(*(struct),int)->(long)
(	O
record	*(struct)
->	O
mset	*(struct)
,	O
MSET_ANY	int
)	O
;	O
}	O
size_t	long
rec_record_num_fields	(*(struct))->(long)
(	O
rec_record_t	*(struct)
record	*(struct)
)	O
{	O
return	O
rec_mset_count	(*(struct),int)->(long)
(	O
record	*(struct)
->	O
mset	*(struct)
,	O
record	*(struct)
->	O
field_type	int
)	O
;	O
}	O
size_t	long
rec_record_num_comments	(*(struct))->(long)
(	O
rec_record_t	*(struct)
record	*(struct)
)	O
{	O
return	O
rec_mset_count	(*(struct),int)->(long)
(	O
record	*(struct)
->	O
mset	*(struct)
,	O
record	*(struct)
->	O
comment_type	int
)	O
;	O
}	O
size_t	long
rec_record_get_field_index	(*(struct),*(struct))->(long)
(	O
rec_record_t	*(struct)
record	*(struct)
,	O
rec_field_t	*(struct)
field	*(struct)
)	O
{	O
size_t	long
res	long
=	O
0	int
;	O
rec_mset_iterator_t	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
iter	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
;	O
rec_field_t	*(struct)
list_field	*(struct)
;	O
iter	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
=	O
rec_mset_iterator	(*(struct))->(struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long)))
(	O
record	*(struct)
->	O
mset	*(struct)
)	O
;	O
while	O
(	O
rec_mset_iterator_next	(*(struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))),int,*(*(void)),*(*(struct)))->(bool)
(	O
&	O
iter	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
,	O
MSET_FIELD	int
,	O
(	O
const	O
void	O
*	O
*	O
)	O
&	O
list_field	*(struct)
,	O
NULL	O
)	O
)	O
{	O
if	O
(	O
field	*(struct)
==	O
list_field	*(struct)
)	O
{	O
break	O
;	O
}	O
res	long
++	O
;	O
}	O
rec_mset_iterator_free	(*(struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))))->(void)
(	O
&	O
iter	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
)	O
;	O
return	O
res	long
;	O
}	O
bool	bool
rec_record_field_p	(*(struct),*(char))->(bool)
(	O
rec_record_t	*(struct)
record	*(struct)
,	O
const	O
char	O
*	O
field_name	*(char)
)	O
{	O
return	O
(	O
rec_record_get_num_fields_by_name	(*(struct),*(char))->(long)
(	O
record	*(struct)
,	O
field_name	*(char)
)	O
>	O
0	int
)	O
;	O
}	O
size_t	long
rec_record_get_num_fields_by_name	(*(struct),*(char))->(long)
(	O
rec_record_t	*(struct)
record	*(struct)
,	O
const	O
char	O
*	O
field_name	*(char)
)	O
{	O
rec_mset_iterator_t	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
iter	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
;	O
rec_field_t	*(struct)
field	*(struct)
;	O
int	O
num_fields	int
=	O
0	int
;	O
iter	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
=	O
rec_mset_iterator	(*(struct))->(struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long)))
(	O
record	*(struct)
->	O
mset	*(struct)
)	O
;	O
while	O
(	O
rec_mset_iterator_next	(*(struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))),int,*(*(void)),*(*(struct)))->(bool)
(	O
&	O
iter	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
,	O
MSET_FIELD	int
,	O
(	O
const	O
void	O
*	O
*	O
)	O
&	O
field	*(struct)
,	O
NULL	O
)	O
)	O
{	O
if	O
(	O
rec_field_name_equal_p	(*(char),*(char))->(bool)
(	O
rec_field_name	(*(struct))->(*(char))
(	O
field	*(struct)
)	O
,	O
field_name	*(char)
)	O
)	O
{	O
num_fields	int
++	O
;	O
}	O
}	O
rec_mset_iterator_free	(*(struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))))->(void)
(	O
&	O
iter	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
)	O
;	O
return	O
num_fields	int
;	O
}	O
rec_field_t	*(struct)
rec_record_get_field_by_name	(*(struct),*(char),long)->(*(struct))
(	O
rec_record_t	*(struct)
record	*(struct)
,	O
const	O
char	O
*	O
field_name	*(char)
,	O
size_t	long
n	int
)	O
{	O
size_t	long
num_fields	int
=	O
0	int
;	O
rec_field_t	*(struct)
field	*(struct)
=	O
NULL	O
;	O
rec_field_t	*(struct)
result	*(*(char))
=	O
NULL	O
;	O
rec_mset_iterator_t	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
iter	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
;	O
iter	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
=	O
rec_mset_iterator	(*(struct))->(struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long)))
(	O
record	*(struct)
->	O
mset	*(struct)
)	O
;	O
while	O
(	O
rec_mset_iterator_next	(*(struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))),int,*(*(void)),*(*(struct)))->(bool)
(	O
&	O
iter	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
,	O
MSET_FIELD	int
,	O
(	O
const	O
void	O
*	O
*	O
)	O
&	O
field	*(struct)
,	O
NULL	O
)	O
)	O
{	O
if	O
(	O
rec_field_name_equal_p	(*(char),*(char))->(bool)
(	O
rec_field_name	(*(struct))->(*(char))
(	O
field	*(struct)
)	O
,	O
field_name	*(char)
)	O
)	O
{	O
if	O
(	O
n	int
==	O
num_fields	int
)	O
{	O
result	*(*(char))
=	O
field	*(struct)
;	O
break	O
;	O
}	O
num_fields	int
++	O
;	O
}	O
}	O
rec_mset_iterator_free	(*(struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))))->(void)
(	O
&	O
iter	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
)	O
;	O
return	O
result	*(*(char))
;	O
}	O
void	O
rec_record_remove_field_by_name	(*(struct),*(char),long)->(void)
(	O
rec_record_t	*(struct)
record	*(struct)
,	O
const	O
char	O
*	O
field_name	*(char)
,	O
size_t	long
n	int
)	O
{	O
rec_field_t	*(struct)
field	*(struct)
;	O
rec_mset_iterator_t	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
iter	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
;	O
rec_mset_elem_t	*(struct)
elem	*(struct)
;	O
int	O
num_fields	int
=	O
0	int
;	O
iter	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
=	O
rec_mset_iterator	(*(struct))->(struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long)))
(	O
record	*(struct)
->	O
mset	*(struct)
)	O
;	O
while	O
(	O
rec_mset_iterator_next	(*(struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))),int,*(*(void)),*(*(struct)))->(bool)
(	O
&	O
iter	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
,	O
MSET_FIELD	int
,	O
(	O
const	O
void	O
*	O
*	O
)	O
&	O
field	*(struct)
,	O
&	O
elem	*(struct)
)	O
)	O
{	O
if	O
(	O
rec_field_name_equal_p	(*(char),*(char))->(bool)
(	O
rec_field_name	(*(struct))->(*(char))
(	O
field	*(struct)
)	O
,	O
field_name	*(char)
)	O
)	O
{	O
if	O
(	O
(	O
n	int
==	O
-	O
1	int
)	O
||	O
(	O
n	int
==	O
num_fields	int
)	O
)	O
{	O
rec_mset_remove_elem	(*(struct),*(struct))->(bool)
(	O
record	*(struct)
->	O
mset	*(struct)
,	O
elem	*(struct)
)	O
;	O
}	O
num_fields	int
++	O
;	O
}	O
}	O
rec_mset_iterator_free	(*(struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))))->(void)
(	O
&	O
iter	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
)	O
;	O
}	O
size_t	long
rec_record_get_field_index_by_name	(*(struct),*(struct))->(long)
(	O
rec_record_t	*(struct)
record	*(struct)
,	O
rec_field_t	*(struct)
field	*(struct)
)	O
{	O
size_t	long
res	long
=	O
0	int
;	O
rec_mset_iterator_t	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
iter	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
;	O
rec_field_t	*(struct)
list_field	*(struct)
;	O
iter	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
=	O
rec_mset_iterator	(*(struct))->(struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long)))
(	O
record	*(struct)
->	O
mset	*(struct)
)	O
;	O
while	O
(	O
rec_mset_iterator_next	(*(struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))),int,*(*(void)),*(*(struct)))->(bool)
(	O
&	O
iter	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
,	O
MSET_FIELD	int
,	O
(	O
const	O
void	O
*	O
*	O
)	O
&	O
list_field	*(struct)
,	O
NULL	O
)	O
)	O
{	O
if	O
(	O
field	*(struct)
==	O
list_field	*(struct)
)	O
{	O
break	O
;	O
}	O
if	O
(	O
rec_field_equal_p	(*(struct),*(struct))->(bool)
(	O
field	*(struct)
,	O
list_field	*(struct)
)	O
)	O
{	O
res	long
++	O
;	O
}	O
}	O
rec_mset_iterator_free	(*(struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))))->(void)
(	O
&	O
iter	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
)	O
;	O
return	O
res	long
;	O
}	O
rec_comment_t	*(char)
rec_record_to_comment	(*(struct))->(*(char))
(	O
rec_record_t	*(struct)
record	*(struct)
)	O
{	O
rec_buf_t	*(struct)
buf	*(struct)
;	O
rec_comment_t	*(char)
res	long
;	O
char	O
*	O
comment_str	*(char)
;	O
size_t	long
comment_str_size	long
;	O
rec_mset_iterator_t	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
iter	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
;	O
rec_mset_elem_t	*(struct)
elem	*(struct)
;	O
const	O
void	O
*	O
data	*(void)
;	O
buf	*(struct)
=	O
rec_buf_new	(*(*(char)),*(long))->(*(struct))
(	O
&	O
comment_str	*(char)
,	O
&	O
comment_str_size	long
)	O
;	O
iter	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
=	O
rec_mset_iterator	(*(struct))->(struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long)))
(	O
record	*(struct)
->	O
mset	*(struct)
)	O
;	O
while	O
(	O
rec_mset_iterator_next	(*(struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))),int,*(*(void)),*(*(struct)))->(bool)
(	O
&	O
iter	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
,	O
MSET_ANY	int
,	O
&	O
data	*(void)
,	O
&	O
elem	*(struct)
)	O
)	O
{	O
if	O
(	O
rec_mset_elem_type	(*(struct))->(int)
(	O
elem	*(struct)
)	O
==	O
MSET_FIELD	int
)	O
{	O
rec_buf_puts	(*(char),*(struct))->(int)
(	O
rec_write_field_str	(*(struct),enum(int,int,int,int))->(*(char))
(	O
(	O
rec_field_t	*(struct)
)	O
data	*(void)
,	O
REC_WRITER_NORMAL	int
)	O
,	O
buf	*(struct)
)	O
;	O
rec_buf_putc	(int,*(struct))->(int)
(	O
'\n'	O
,	O
buf	*(struct)
)	O
;	O
}	O
else	O
{	O
rec_buf_puts	(*(char),*(struct))->(int)
(	O
rec_write_comment_str	(*(char),enum(int,int,int,int))->(*(char))
(	O
rec_comment_text	(*(char))->(*(char))
(	O
(	O
rec_comment_t	*(char)
)	O
data	*(void)
)	O
,	O
REC_WRITER_NORMAL	int
)	O
,	O
buf	*(struct)
)	O
;	O
rec_buf_putc	(int,*(struct))->(int)
(	O
'\n'	O
,	O
buf	*(struct)
)	O
;	O
}	O
}	O
rec_mset_iterator_free	(*(struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))))->(void)
(	O
&	O
iter	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
)	O
;	O
rec_buf_close	(*(struct))->(void)
(	O
buf	*(struct)
)	O
;	O
if	O
(	O
comment_str	*(char)
[	O
comment_str_size	long
-	O
1	int
]	O
==	O
'\n'	O
)	O
{	O
comment_str	*(char)
[	O
comment_str_size	long
-	O
1	int
]	O
=	O
'\0'	O
;	O
}	O
res	long
=	O
rec_comment_new	(*(char))->(*(char))
(	O
comment_str	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
comment_str	*(char)
)	O
;	O
return	O
res	long
;	O
}	O
char	O
*	O
rec_record_source	(*(struct))->(*(char))
(	O
rec_record_t	*(struct)
record	*(struct)
)	O
{	O
char	O
*	O
res	long
;	O
if	O
(	O
record	*(struct)
->	O
source	*(char)
)	O
{	O
res	long
=	O
record	*(struct)
->	O
source	*(char)
;	O
}	O
else	O
{	O
res	long
=	O
""	*(char)
;	O
}	O
return	O
res	long
;	O
}	O
void	O
rec_record_set_source	(*(struct),*(char))->(void)
(	O
rec_record_t	*(struct)
record	*(struct)
,	O
char	O
*	O
source	*(char)
)	O
{	O
if	O
(	O
record	*(struct)
->	O
source	*(char)
)	O
{	O
free	(*(void))->(void)
(	O
record	*(struct)
->	O
source	*(char)
)	O
;	O
record	*(struct)
->	O
source	*(char)
=	O
NULL	O
;	O
}	O
record	*(struct)
->	O
source	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
source	*(char)
)	O
;	O
}	O
size_t	long
rec_record_location	(*(struct))->(long)
(	O
rec_record_t	*(struct)
record	*(struct)
)	O
{	O
return	O
record	*(struct)
->	O
location	long
;	O
}	O
char	O
*	O
rec_record_location_str	(*(struct))->(*(char))
(	O
rec_record_t	*(struct)
record	*(struct)
)	O
{	O
char	O
*	O
res	long
;	O
if	O
(	O
record	*(struct)
->	O
location_str	*(char)
)	O
{	O
res	long
=	O
record	*(struct)
->	O
location_str	*(char)
;	O
}	O
else	O
{	O
res	long
=	O
""	*(char)
;	O
}	O
return	O
res	long
;	O
}	O
void	O
rec_record_set_location	(*(struct),long)->(void)
(	O
rec_record_t	*(struct)
record	*(struct)
,	O
size_t	long
location	long
)	O
{	O
record	*(struct)
->	O
location	long
=	O
location	long
;	O
if	O
(	O
record	*(struct)
->	O
location_str	*(char)
)	O
{	O
free	(*(void))->(void)
(	O
record	*(struct)
->	O
location_str	*(char)
)	O
;	O
record	*(struct)
->	O
location_str	*(char)
=	O
NULL	O
;	O
}	O
asprintf	(*(*(char)),*(char))->(int)
(	O
&	O
(	O
record	*(struct)
->	O
location_str	*(char)
)	O
,	O
"%zu"	*(char)
,	O
record	*(struct)
->	O
location	long
)	O
;	O
}	O
size_t	long
rec_record_char_location	(*(struct))->(long)
(	O
rec_record_t	*(struct)
record	*(struct)
)	O
{	O
return	O
record	*(struct)
->	O
char_location	long
;	O
}	O
char	O
*	O
rec_record_char_location_str	(*(struct))->(*(char))
(	O
rec_record_t	*(struct)
record	*(struct)
)	O
{	O
char	O
*	O
res	long
;	O
if	O
(	O
record	*(struct)
->	O
char_location_str	*(char)
)	O
{	O
res	long
=	O
record	*(struct)
->	O
char_location_str	*(char)
;	O
}	O
else	O
{	O
res	long
=	O
""	*(char)
;	O
}	O
return	O
res	long
;	O
}	O
void	O
rec_record_set_char_location	(*(struct),long)->(void)
(	O
rec_record_t	*(struct)
record	*(struct)
,	O
size_t	long
location	long
)	O
{	O
record	*(struct)
->	O
char_location	long
=	O
location	long
;	O
if	O
(	O
record	*(struct)
->	O
char_location_str	*(char)
)	O
{	O
free	(*(void))->(void)
(	O
record	*(struct)
->	O
char_location_str	*(char)
)	O
;	O
record	*(struct)
->	O
char_location_str	*(char)
=	O
NULL	O
;	O
}	O
asprintf	(*(*(char)),*(char))->(int)
(	O
&	O
(	O
record	*(struct)
->	O
char_location_str	*(char)
)	O
,	O
"%zu"	*(char)
,	O
record	*(struct)
->	O
char_location	long
)	O
;	O
}	O
bool	bool
rec_record_contains_value	(*(struct),*(char),bool)->(bool)
(	O
rec_record_t	*(struct)
record	*(struct)
,	O
const	O
char	O
*	O
str	*(char)
,	O
bool	bool
case_insensitive	bool
)	O
{	O
bool	bool
res	long
=	O
false	int
;	O
rec_mset_iterator_t	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
iter	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
;	O
rec_field_t	*(struct)
field	*(struct)
;	O
const	O
char	O
*	O
field_value	*(char)
;	O
char	O
*	O
occur	*(char)
;	O
iter	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
=	O
rec_mset_iterator	(*(struct))->(struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long)))
(	O
record	*(struct)
->	O
mset	*(struct)
)	O
;	O
while	O
(	O
rec_mset_iterator_next	(*(struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))),int,*(*(void)),*(*(struct)))->(bool)
(	O
&	O
iter	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
,	O
MSET_FIELD	int
,	O
(	O
const	O
void	O
*	O
*	O
)	O
&	O
field	*(struct)
,	O
NULL	O
)	O
)	O
{	O
field_value	*(char)
=	O
rec_field_value	(*(struct))->(*(char))
(	O
field	*(struct)
)	O
;	O
if	O
(	O
case_insensitive	bool
)	O
{	O
occur	*(char)
=	O
strcasestr	(*(char),*(char))->(*(char))
(	O
field_value	*(char)
,	O
str	*(char)
)	O
;	O
}	O
else	O
{	O
occur	*(char)
=	O
strstr	(*(char),*(char))->(*(char))
(	O
field_value	*(char)
,	O
str	*(char)
)	O
;	O
}	O
res	long
=	O
(	O
occur	*(char)
!=	O
NULL	O
)	O
;	O
if	O
(	O
res	long
)	O
{	O
break	O
;	O
}	O
}	O
rec_mset_iterator_free	(*(struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))))->(void)
(	O
&	O
iter	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
)	O
;	O
return	O
res	long
;	O
}	O
bool	bool
rec_record_contains_field	(*(struct),*(char),*(char))->(bool)
(	O
rec_record_t	*(struct)
record	*(struct)
,	O
const	O
char	O
*	O
field_name	*(char)
,	O
const	O
char	O
*	O
field_value	*(char)
)	O
{	O
bool	bool
res	long
=	O
false	int
;	O
rec_mset_iterator_t	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
iter	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
;	O
rec_field_t	*(struct)
field	*(struct)
;	O
iter	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
=	O
rec_mset_iterator	(*(struct))->(struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long)))
(	O
record	*(struct)
->	O
mset	*(struct)
)	O
;	O
while	O
(	O
rec_mset_iterator_next	(*(struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))),int,*(*(void)),*(*(struct)))->(bool)
(	O
&	O
iter	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
,	O
MSET_FIELD	int
,	O
(	O
const	O
void	O
*	O
*	O
)	O
&	O
field	*(struct)
,	O
NULL	O
)	O
)	O
{	O
if	O
(	O
rec_field_name_equal_p	(*(char),*(char))->(bool)
(	O
field_name	*(char)
,	O
rec_field_name	(*(struct))->(*(char))
(	O
field	*(struct)
)	O
)	O
&&	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
field_value	*(char)
,	O
rec_field_value	(*(struct))->(*(char))
(	O
field	*(struct)
)	O
)	O
==	O
0	int
)	O
)	O
{	O
res	long
=	O
true	int
;	O
break	O
;	O
}	O
}	O
rec_mset_iterator_free	(*(struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))))->(void)
(	O
&	O
iter	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
)	O
;	O
return	O
res	long
;	O
}	O
void	O
*	O
rec_record_container	(*(struct))->(*(void))
(	O
rec_record_t	*(struct)
record	*(struct)
)	O
{	O
return	O
record	*(struct)
->	O
container	*(void)
;	O
}	O
void	O
rec_record_set_container	(*(struct),*(void))->(void)
(	O
rec_record_t	*(struct)
record	*(struct)
,	O
void	O
*	O
container	*(void)
)	O
{	O
record	*(struct)
->	O
container	*(void)
=	O
container	*(void)
;	O
}	O
void	O
rec_record_uniq	(*(struct))->(void)
(	O
rec_record_t	*(struct)
record	*(struct)
)	O
{	O
rec_mset_iterator_t	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
iter1	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
,	O
iter2	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
;	O
rec_mset_elem_t	*(struct)
elem1	*(struct)
;	O
rec_field_t	*(struct)
field1	*(struct)
,	O
field2	*(struct)
;	O
bool	bool
*	O
to_remove	*(bool)
;	O
size_t	long
num_fields	int
,	O
i	long
,	O
j	long
;	O
num_fields	int
=	O
rec_record_num_fields	(*(struct))->(long)
(	O
record	*(struct)
)	O
;	O
to_remove	*(bool)
=	O
malloc	(long)->(*(void))
(	O
sizeof	O
(	O
bool	bool
)	O
*	O
num_fields	int
)	O
;	O
memset	(*(void),int,long)->(*(void))
(	O
to_remove	*(bool)
,	O
false	int
,	O
num_fields	int
)	O
;	O
i	long
=	O
0	int
;	O
iter1	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
=	O
rec_mset_iterator	(*(struct))->(struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long)))
(	O
record	*(struct)
->	O
mset	*(struct)
)	O
;	O
while	O
(	O
rec_mset_iterator_next	(*(struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))),int,*(*(void)),*(*(struct)))->(bool)
(	O
&	O
iter1	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
,	O
MSET_FIELD	int
,	O
(	O
const	O
void	O
*	O
*	O
)	O
&	O
field1	*(struct)
,	O
NULL	O
)	O
)	O
{	O
if	O
(	O
!	O
to_remove	*(bool)
[	O
i	long
]	O
)	O
{	O
j	long
=	O
0	int
;	O
iter2	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
=	O
rec_mset_iterator	(*(struct))->(struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long)))
(	O
record	*(struct)
->	O
mset	*(struct)
)	O
;	O
while	O
(	O
rec_mset_iterator_next	(*(struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))),int,*(*(void)),*(*(struct)))->(bool)
(	O
&	O
iter2	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
,	O
MSET_FIELD	int
,	O
(	O
const	O
void	O
*	O
*	O
)	O
&	O
field2	*(struct)
,	O
NULL	O
)	O
)	O
{	O
if	O
(	O
(	O
j	long
!=	O
i	long
)	O
&&	O
rec_field_name_equal_p	(*(char),*(char))->(bool)
(	O
rec_field_name	(*(struct))->(*(char))
(	O
field1	*(struct)
)	O
,	O
rec_field_name	(*(struct))->(*(char))
(	O
field2	*(struct)
)	O
)	O
&&	O
rec_field_name_equal_p	(*(char),*(char))->(bool)
(	O
rec_field_value	(*(struct))->(*(char))
(	O
field1	*(struct)
)	O
,	O
rec_field_value	(*(struct))->(*(char))
(	O
field2	*(struct)
)	O
)	O
)	O
{	O
to_remove	*(bool)
[	O
j	long
]	O
=	O
true	int
;	O
}	O
j	long
++	O
;	O
}	O
rec_mset_iterator_free	(*(struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))))->(void)
(	O
&	O
iter2	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
)	O
;	O
}	O
i	long
++	O
;	O
}	O
rec_mset_iterator_free	(*(struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))))->(void)
(	O
&	O
iter1	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
)	O
;	O
i	long
=	O
0	int
;	O
iter1	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
=	O
rec_mset_iterator	(*(struct))->(struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long)))
(	O
record	*(struct)
->	O
mset	*(struct)
)	O
;	O
while	O
(	O
rec_mset_iterator_next	(*(struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))),int,*(*(void)),*(*(struct)))->(bool)
(	O
&	O
iter1	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
,	O
MSET_FIELD	int
,	O
(	O
const	O
void	O
*	O
*	O
)	O
&	O
field1	*(struct)
,	O
&	O
elem1	*(struct)
)	O
)	O
{	O
if	O
(	O
to_remove	*(bool)
[	O
i	long
]	O
)	O
{	O
rec_mset_remove_elem	(*(struct),*(struct))->(bool)
(	O
record	*(struct)
->	O
mset	*(struct)
,	O
elem1	*(struct)
)	O
;	O
}	O
i	long
++	O
;	O
}	O
free	(*(void))->(void)
(	O
to_remove	*(bool)
)	O
;	O
}	O
void	O
rec_record_append	(*(struct),*(struct))->(void)
(	O
rec_record_t	*(struct)
dest_record	*(struct)
,	O
rec_record_t	*(struct)
src_record	*(struct)
)	O
{	O
rec_mset_iterator_t	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
iter	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
;	O
rec_field_t	*(struct)
field	*(struct)
;	O
iter	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
=	O
rec_mset_iterator	(*(struct))->(struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long)))
(	O
src_record	*(struct)
->	O
mset	*(struct)
)	O
;	O
while	O
(	O
rec_mset_iterator_next	(*(struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))),int,*(*(void)),*(*(struct)))->(bool)
(	O
&	O
iter	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
,	O
MSET_FIELD	int
,	O
(	O
const	O
void	O
*	O
*	O
)	O
&	O
field	*(struct)
,	O
NULL	O
)	O
)	O
{	O
if	O
(	O
!	O
rec_mset_append	(*(struct),int,*(void),int)->(*(struct))
(	O
rec_record_mset	(*(struct))->(*(struct))
(	O
dest_record	*(struct)
)	O
,	O
MSET_FIELD	int
,	O
(	O
void	O
*	O
)	O
rec_field_dup	(*(struct))->(*(struct))
(	O
field	*(struct)
)	O
,	O
MSET_FIELD	int
)	O
)	O
{	O
return	O
;	O
}	O
}	O
rec_mset_iterator_free	(*(struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))))->(void)
(	O
&	O
iter	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
)	O
;	O
}	O
void	O
rec_record_reset_marks	(*(struct))->(void)
(	O
rec_record_t	*(struct)
record	*(struct)
)	O
{	O
rec_mset_iterator_t	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
iter	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
;	O
rec_field_t	*(struct)
field	*(struct)
;	O
iter	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
=	O
rec_mset_iterator	(*(struct))->(struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long)))
(	O
record	*(struct)
->	O
mset	*(struct)
)	O
;	O
while	O
(	O
rec_mset_iterator_next	(*(struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))),int,*(*(void)),*(*(struct)))->(bool)
(	O
&	O
iter	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
,	O
MSET_FIELD	int
,	O
(	O
const	O
void	O
*	O
*	O
)	O
&	O
field	*(struct)
,	O
NULL	O
)	O
)	O
{	O
rec_field_set_mark	(*(struct),int)->(void)
(	O
field	*(struct)
,	O
0	int
)	O
;	O
}	O
rec_mset_iterator_free	(*(struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))))->(void)
(	O
&	O
iter	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
)	O
;	O
}	O
bool	bool
rec_record_mark_field	(*(struct),*(struct),int)->(bool)
(	O
rec_record_t	*(struct)
record	*(struct)
,	O
rec_field_t	*(struct)
field	*(struct)
,	O
int	O
mark	int
)	O
{	O
rec_mset_iterator_t	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
iter	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
;	O
rec_field_t	*(struct)
iter_field	*(struct)
;	O
iter	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
=	O
rec_mset_iterator	(*(struct))->(struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long)))
(	O
record	*(struct)
->	O
mset	*(struct)
)	O
;	O
while	O
(	O
rec_mset_iterator_next	(*(struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))),int,*(*(void)),*(*(struct)))->(bool)
(	O
&	O
iter	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
,	O
MSET_FIELD	int
,	O
(	O
const	O
void	O
*	O
*	O
)	O
&	O
iter_field	*(struct)
,	O
NULL	O
)	O
)	O
{	O
if	O
(	O
field	*(struct)
==	O
iter_field	*(struct)
)	O
{	O
rec_field_set_mark	(*(struct),int)->(void)
(	O
field	*(struct)
,	O
mark	int
)	O
;	O
rec_mset_iterator_free	(*(struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))))->(void)
(	O
&	O
iter	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
)	O
;	O
return	O
true	int
;	O
}	O
}	O
rec_mset_iterator_free	(*(struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))))->(void)
(	O
&	O
iter	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
)	O
;	O
return	O
false	int
;	O
}	O
int	O
rec_record_field_mark	(*(struct),*(struct))->(int)
(	O
rec_record_t	*(struct)
record	*(struct)
,	O
rec_field_t	*(struct)
field	*(struct)
)	O
{	O
return	O
rec_field_mark	(*(struct))->(int)
(	O
field	*(struct)
)	O
;	O
}	O
static	O
void	O
rec_record_init	(*(struct(*(void),int,int,*(char),long,*(char),long,*(char),*(struct))))->(void)
(	O
rec_record_t	*(struct)
record	*(struct)
)	O
{	O
memset	(*(void),int,long)->(*(void))
(	O
record	*(struct)
,	O
0	int
,	O
sizeof	O
(	O
struct	O
rec_record_s	struct(*(void),int,int,*(char),long,*(char),long,*(char),*(struct))
)	O
)	O
;	O
}	O
static	O
void	O
rec_record_field_disp_fn	(*(void))->(void)
(	O
void	O
*	O
data	*(void)
)	O
{	O
rec_field_destroy	(*(struct))->(void)
(	O
(	O
rec_field_t	*(struct)
)	O
data	*(void)
)	O
;	O
}	O
static	O
bool	bool
rec_record_field_equal_fn	(*(void),*(void))->(bool)
(	O
void	O
*	O
data1	*(void)
,	O
void	O
*	O
data2	*(void)
)	O
{	O
return	O
(	O
data1	*(void)
==	O
data2	*(void)
)	O
;	O
}	O
static	O
void	O
*	O
rec_record_field_dup_fn	(*(void))->(*(void))
(	O
void	O
*	O
data	*(void)
)	O
{	O
rec_field_t	*(struct)
copy	*(struct)
;	O
copy	*(struct)
=	O
rec_field_dup	(*(struct))->(*(struct))
(	O
(	O
rec_field_t	*(struct)
)	O
data	*(void)
)	O
;	O
return	O
(	O
void	O
*	O
)	O
copy	*(struct)
;	O
}	O
static	O
void	O
rec_record_comment_disp_fn	(*(void))->(void)
(	O
void	O
*	O
data	*(void)
)	O
{	O
rec_comment_destroy	(*(char))->(void)
(	O
(	O
rec_comment_t	*(char)
)	O
data	*(void)
)	O
;	O
}	O
static	O
bool	bool
rec_record_comment_equal_fn	(*(void),*(void))->(bool)
(	O
void	O
*	O
data1	*(void)
,	O
void	O
*	O
data2	*(void)
)	O
{	O
return	O
(	O
data1	*(void)
==	O
data2	*(void)
)	O
;	O
}	O
static	O
void	O
*	O
rec_record_comment_dup_fn	(*(void))->(*(void))
(	O
void	O
*	O
data	*(void)
)	O
{	O
rec_comment_t	*(char)
copy	*(struct)
;	O
copy	*(struct)
=	O
rec_comment_dup	(*(char))->(*(char))
(	O
(	O
rec_comment_t	*(char)
)	O
data	*(void)
)	O
;	O
return	O
(	O
void	O
*	O
)	O
copy	*(struct)
;	O
}	O
