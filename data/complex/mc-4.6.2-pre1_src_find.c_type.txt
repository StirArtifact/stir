static	O
int	O
FIND_X	int
=	O
50	int
;	O
static	O
int	O
FIND2_X	int
=	O
64	int
;	O
enum	O
{	O
B_STOP	int
=	O
B_USER	int
+	O
1	int
,	O
B_AGAIN	int
,	O
B_PANELIZE	int
,	O
B_TREE	int
,	O
B_VIEW	int
}	O
;	O
typedef	O
enum	O
{	O
FIND_CONT	int
,	O
FIND_SUSPEND	int
,	O
FIND_ABORT	int
}	O
FindProgressStatus	enum(int,int,int)
;	O
char	O
*	O
find_ignore_dirs	*(char)
=	O
0	int
;	O
static	O
WInput	struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*(struct`),*(void))->(int)),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))),int,int,int,int,int,int,int,int,int,*(char),*(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`)))),int,*(*(char)),int,*(char))
*	O
in_start	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,int,int,int,int,int,int,int,int,*(char),*(struct(*(void),*(struct`),*(struct`))),int,*(*(char)),int,*(char)))
;	O
static	O
WInput	struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*(struct`),*(void))->(int)),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))),int,int,int,int,int,int,int,int,int,*(char),*(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`)))),int,*(*(char)),int,*(char))
*	O
in_name	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,int,int,int,int,int,int,int,int,*(char),*(struct(*(void),*(struct`),*(struct`))),int,*(*(char)),int,*(char)))
;	O
static	O
WInput	struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*(struct`),*(void))->(int)),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))),int,int,int,int,int,int,int,int,int,*(char),*(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`)))),int,*(*(char)),int,*(char))
*	O
in_with	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,int,int,int,int,int,int,int,int,*(char),*(struct(*(void),*(struct`),*(struct`))),int,*(*(char)),int,*(char)))
;	O
static	O
WCheck	struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))),*(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))),*((*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*(struct(int,int,int,enum(int,int,int,int,int,int,int,int,int))),*(void))->(int)),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))))),int,*(char),int,int)
*	O
case_sense	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,*(char),int,int))
;	O
static	O
WCheck	struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))),*(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))),*((*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*(struct(int,int,int,enum(int,int,int,int,int,int,int,int,int))),*(void))->(int)),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))))),int,*(char),int,int)
*	O
find_regex_cbox	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,*(char),int,int))
;	O
static	O
int	O
running	int
=	O
0	int
;	O
static	O
char	O
*	O
find_pattern	*(char)
;	O
static	O
char	O
*	O
content_pattern	*(char)
;	O
static	O
int	O
count	int
;	O
static	O
int	O
matches	int
;	O
static	O
int	O
is_start	int
;	O
static	O
char	O
*	O
old_dir	*(char)
;	O
static	O
int	O
resuming	int
;	O
static	O
int	O
last_line	int
;	O
static	O
int	O
last_pos	int
;	O
static	O
Dlg_head	struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct),*((*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`))),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`))))))
*	O
find_dlg	*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
;	O
static	O
WButton	struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))),*(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))),*((*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*(struct(int,int,int,enum(int,int,int,int,int,int,int,int,int))),*(void))->(int)),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))))),int,int,int,*(char),int,int,*((int)->(int)))
*	O
stop_button	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,int,int,*(char),int,int,*((int)->(int))))
;	O
static	O
WLabel	struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*(struct`),*(void))->(int)),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))),int,*(char),int)
*	O
status_label	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,*(char),int))
;	O
static	O
WListbox	struct
*	O
find_list	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),int,int,int,int,int,int,*((*(struct`))->(int)),int,int))
;	O
typedef	O
struct	O
dir_stack	struct(*(char),*(struct(*(char),*(struct(*(char),*(struct`))))))
{	O
char	O
*	O
name	*(char)
;	O
struct	O
dir_stack	struct(*(char),*(struct(*(char),*(struct(*(char),*(struct`))))))
*	O
prev	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`)))))
;	O
}	O
dir_stack	struct(*(char),*(struct(*(char),*(struct(*(char),*(struct`))))))
;	O
static	O
dir_stack	struct(*(char),*(struct(*(char),*(struct(*(char),*(struct`))))))
*	O
dir_stack_base	*(struct(*(char),*(struct(*(char),*(struct`)))))
=	O
0	int
;	O
static	O
struct	O
{	O
const	O
char	O
*	O
text	*(char)
;	O
int	O
len	int
;	O
int	O
x	array(long)
;	O
}	O
fbuts	array(struct(*(char),int,int))
[	O
]	O
=	O
{	O
{	O
N_	O
(	O
"&Suspend"	*(char)
)	O
,	O
11	int
,	O
29	int
}	O
,	O
{	O
N_	O
(	O
"Con&tinue"	*(char)
)	O
,	O
12	int
,	O
29	int
}	O
,	O
{	O
N_	O
(	O
"&Chdir"	*(char)
)	O
,	O
11	int
,	O
3	int
}	O
,	O
{	O
N_	O
(	O
"&Again"	*(char)
)	O
,	O
9	int
,	O
17	int
}	O
,	O
{	O
N_	O
(	O
"&Quit"	*(char)
)	O
,	O
8	int
,	O
43	int
}	O
,	O
{	O
N_	O
(	O
"Pane&lize"	*(char)
)	O
,	O
12	int
,	O
3	int
}	O
,	O
{	O
N_	O
(	O
"&View - F3"	*(char)
)	O
,	O
13	int
,	O
20	int
}	O
,	O
{	O
N_	O
(	O
"&Edit - F4"	*(char)
)	O
,	O
13	int
,	O
38	int
}	O
}	O
;	O
static	O
inline	O
char	O
*	O
add_to_list	(*(char),*(void))->(*(char))
(	O
const	O
char	O
*	O
text	*(char)
,	O
void	O
*	O
data	*(void)
)	O
{	O
return	O
listbox_add_item	(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),*(struct(*`,int,*`,*`,*`)),*(struct(*`,int,*`,*`,*`)),*(struct(*`,int,*`,*`,*`)),int,int,int,int,int,int,*((*`)->(int)),int,int)),enum(int,int,int),int,*(char),*(void))->(*(char))
(	O
find_list	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),int,int,int,int,int,int,*((*(struct`))->(int)),int,int))
,	O
0	int
,	O
0	int
,	O
text	*(char)
,	O
data	*(void)
)	O
;	O
}	O
static	O
inline	O
void	O
stop_idle	(*(void))->(void)
(	O
void	O
*	O
data	*(void)
)	O
{	O
set_idle_proc	(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))),int)->(void)
(	O
data	*(void)
,	O
0	int
)	O
;	O
}	O
static	O
inline	O
void	O
status_update	(*(char))->(void)
(	O
const	O
char	O
*	O
text	*(char)
)	O
{	O
label_set_text	(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),int,*(char),int)),*(char))->(void)
(	O
status_label	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,*(char),int))
,	O
text	*(char)
)	O
;	O
}	O
static	O
void	O
get_list_info	(*(*(char)),*(*(char)))->(void)
(	O
char	O
*	O
*	O
file	*(char)
,	O
char	O
*	O
*	O
dir	*(struct)
)	O
{	O
listbox_get_current	(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),*(struct(*`,int,*`,*`,*`)),*(struct(*`,int,*`,*`,*`)),*(struct(*`,int,*`,*`,*`)),int,int,int,int,int,int,*((*`)->(int)),int,int)),*(*(char)),*(*(char)))->(void)
(	O
find_list	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),int,int,int,int,int,int,*((*(struct`))->(int)),int,int))
,	O
file	*(char)
,	O
dir	*(struct)
)	O
;	O
}	O
static	O
regex_t	struct(*(struct),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int)
*	O
r	*(struct)
;	O
static	O
int	O
case_sensitive	int
=	O
1	int
;	O
static	O
gboolean	int
find_regex_flag	int
=	O
TRUE	O
;	O
static	O
int	O
find_recursively	int
=	O
1	int
;	O
static	O
cb_ret_t	enum(int,int)
find_parm_callback	(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))
(	O
struct	O
Dlg_head	struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct),*((*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`))),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`))))))
*	O
h	*(struct)
,	O
dlg_msg_t	enum(int,int,int,int,int,int,int,int,int,int,int,int,int)
msg	*(char)
,	O
int	O
parm	int
)	O
{	O
int	O
flags	enum(int,int,int,int)
;	O
switch	O
(	O
msg	*(char)
)	O
{	O
case	O
DLG_VALIDATE	int
:	O
if	O
(	O
(	O
h	*(struct)
->	O
ret_value	int
!=	O
B_ENTER	int
)	O
||	O
!	O
in_with	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,int,int,int,int,int,int,int,int,*(char),*(struct(*(void),*(struct`),*(struct`))),int,*(*(char)),int,*(char)))
->	O
buffer	*(char)
[	O
0	int
]	O
||	O
!	O
(	O
find_regex_cbox	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,*(char),int,int))
->	O
state	*(int)
&	O
C_BOOL	int
)	O
)	O
return	O
MSG_HANDLED	int
;	O
flags	enum(int,int,int,int)
=	O
REG_EXTENDED	int
|	O
REG_NOSUB	O
;	O
if	O
(	O
!	O
(	O
case_sense	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,*(char),int,int))
->	O
state	*(int)
&	O
C_BOOL	int
)	O
)	O
flags	enum(int,int,int,int)
|=	O
REG_ICASE	O
;	O
if	O
(	O
regcomp	(*(struct(*(struct),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int)),*(char),int)->(int)
(	O
r	*(struct)
,	O
in_with	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,int,int,int,int,int,int,int,int,*(char),*(struct(*(void),*(struct`),*(struct`))),int,*(*(char)),int,*(char)))
->	O
buffer	*(char)
,	O
flags	enum(int,int,int,int)
)	O
)	O
{	O
message	*(char)
(	O
1	int
,	O
MSG_ERROR	O
,	O
_	O
(	O
"  Malformed regular expression  "	*(char)
)	O
)	O
;	O
dlg_select_widget	(*(void))->(void)
(	O
in_with	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,int,int,int,int,int,int,int,int,*(char),*(struct(*(void),*(struct`),*(struct`))),int,*(*(char)),int,*(char)))
)	O
;	O
h	*(struct)
->	O
running	int
=	O
1	int
;	O
}	O
return	O
MSG_HANDLED	int
;	O
default	O
:	O
return	O
default_dlg_callback	(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))
(	O
h	*(struct)
,	O
msg	*(char)
,	O
parm	int
)	O
;	O
}	O
}	O
static	O
int	O
find_parameters	(*(*(char)),*(*(char)),*(*(char)))->(int)
(	O
char	O
*	O
*	O
start_dir	*(*(char))
,	O
char	O
*	O
*	O
pattern	*(char)
,	O
char	O
*	O
*	O
content	*(*(char))
)	O
{	O
int	O
return_value	int
;	O
char	O
*	O
temp_dir	*(char)
;	O
static	O
const	O
char	O
*	O
case_label	*(char)
=	O
N_	O
(	O
"case &Sensitive"	*(char)
)	O
;	O
static	O
const	O
char	O
*	O
recurs_label	*(char)
=	O
N_	O
(	O
"find Re&cursively"	*(char)
)	O
;	O
WCheck	struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))),*(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))),*((*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*(struct(int,int,int,enum(int,int,int,int,int,int,int,int,int))),*(void))->(int)),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))))),int,*(char),int,int)
*	O
recursively_cbox	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,*(char),int,int))
;	O
static	O
char	O
*	O
in_contents	*(char)
=	O
NULL	O
;	O
static	O
char	O
*	O
in_start_dir	*(char)
=	O
NULL	O
;	O
static	O
char	O
*	O
in_start_name	*(char)
=	O
NULL	O
;	O
static	O
const	O
char	O
*	O
labs	(long)->(long)
[	O
]	O
=	O
{	O
N_	O
(	O
"Start at:"	*(char)
)	O
,	O
N_	O
(	O
"Filename:"	*(char)
)	O
,	O
N_	O
(	O
"Content: "	*(char)
)	O
}	O
;	O
static	O
const	O
char	O
*	O
buts	array(*(char))
[	O
]	O
=	O
{	O
N_	O
(	O
"&OK"	*(char)
)	O
,	O
N_	O
(	O
"&Tree"	*(char)
)	O
,	O
N_	O
(	O
"&Cancel"	*(char)
)	O
}	O
;	O
static	O
int	O
ilen	int
=	O
30	int
,	O
istart	int
=	O
14	int
;	O
static	O
int	O
b0	int
=	O
3	int
,	O
b1	int
=	O
16	int
,	O
b2	int
=	O
36	int
;	O
static	O
int	O
i18n_flag	int
=	O
0	int
;	O
if	O
(	O
!	O
i18n_flag	int
)	O
{	O
register	O
int	O
i	array(int)
=	O
sizeof	O
(	O
labs	(long)->(long)
)	O
/	O
sizeof	O
(	O
labs	(long)->(long)
[	O
0	int
]	O
)	O
;	O
int	O
l1	int
,	O
maxlen	int
=	O
0	int
;	O
while	O
(	O
i	array(int)
--	O
)	O
{	O
l1	int
=	O
strlen	(*(char))->(long)
(	O
labs	(long)->(long)
[	O
i	array(int)
]	O
=	O
_	O
(	O
labs	(long)->(long)
[	O
i	array(int)
]	O
)	O
)	O
;	O
if	O
(	O
l1	int
>	O
maxlen	int
)	O
maxlen	int
=	O
l1	int
;	O
}	O
i	array(int)
=	O
maxlen	int
+	O
ilen	int
+	O
7	int
;	O
if	O
(	O
i	array(int)
>	O
FIND_X	int
)	O
FIND_X	int
=	O
i	array(int)
;	O
for	O
(	O
i	array(int)
=	O
sizeof	O
(	O
buts	array(*(char))
)	O
/	O
sizeof	O
(	O
buts	array(*(char))
[	O
0	int
]	O
)	O
,	O
l1	int
=	O
0	int
;	O
i	array(int)
--	O
;	O
)	O
{	O
l1	int
+=	O
strlen	(*(char))->(long)
(	O
buts	array(*(char))
[	O
i	array(int)
]	O
=	O
_	O
(	O
buts	array(*(char))
[	O
i	array(int)
]	O
)	O
)	O
;	O
}	O
l1	int
+=	O
21	int
;	O
if	O
(	O
l1	int
>	O
FIND_X	int
)	O
FIND_X	int
=	O
l1	int
;	O
ilen	int
=	O
FIND_X	int
-	O
7	int
-	O
maxlen	int
;	O
istart	int
=	O
FIND_X	int
-	O
3	int
-	O
ilen	int
;	O
b1	int
=	O
b0	int
+	O
strlen	(*(char))->(long)
(	O
buts	array(*(char))
[	O
0	int
]	O
)	O
+	O
7	int
;	O
b2	int
=	O
FIND_X	int
-	O
(	O
strlen	(*(char))->(long)
(	O
buts	array(*(char))
[	O
2	int
]	O
)	O
+	O
6	int
)	O
;	O
i18n_flag	int
=	O
1	int
;	O
case_label	*(char)
=	O
_	O
(	O
case_label	*(char)
)	O
;	O
recurs_label	*(char)
=	O
_	O
(	O
recurs_label	*(char)
)	O
;	O
}	O
find_par_start	O
:	O
if	O
(	O
!	O
in_start_dir	*(char)
)	O
in_start_dir	*(char)
=	O
g_strdup	(*(char))->(*(char))
(	O
"."	*(char)
)	O
;	O
if	O
(	O
!	O
in_start_name	*(char)
)	O
in_start_name	*(char)
=	O
g_strdup	(*(char))->(*(char))
(	O
easy_patterns	int
?	O
"*"	*(char)
:	O
"."	*(char)
)	O
;	O
if	O
(	O
!	O
in_contents	*(char)
)	O
in_contents	*(char)
=	O
g_strdup	(*(char))->(*(char))
(	O
""	*(char)
)	O
;	O
find_dlg	*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
=	O
create_dlg	(int,int,int,int,*(int),*((*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(char),*(char),int)->(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))))
(	O
0	int
,	O
0	int
,	O
FIND_Y	int
,	O
FIND_X	int
,	O
dialog_colors	array(int)
,	O
find_parm_callback	(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))
,	O
"[Find File]"	*(char)
,	O
_	O
(	O
"Find File"	*(char)
)	O
,	O
DLG_CENTER	O
|	O
DLG_REVERSE	O
)	O
;	O
add_widget	(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))),*(void))->(int)
(	O
find_dlg	*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
,	O
button_new	(int,int,int,int,*(char),*((int)->(int)))->(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),int,int,int,*(char),int,int,*((int)->(int)))))
(	O
12	int
,	O
b2	int
,	O
B_CANCEL	int
,	O
NORMAL_BUTTON	int
,	O
buts	array(*(char))
[	O
2	int
]	O
,	O
0	int
)	O
)	O
;	O
add_widget	(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))),*(void))->(int)
(	O
find_dlg	*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
,	O
button_new	(int,int,int,int,*(char),*((int)->(int)))->(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),int,int,int,*(char),int,int,*((int)->(int)))))
(	O
12	int
,	O
b1	int
,	O
B_TREE	int
,	O
NORMAL_BUTTON	int
,	O
buts	array(*(char))
[	O
1	int
]	O
,	O
0	int
)	O
)	O
;	O
add_widget	(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))),*(void))->(int)
(	O
find_dlg	*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
,	O
button_new	(int,int,int,int,*(char),*((int)->(int)))->(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),int,int,int,*(char),int,int,*((int)->(int)))))
(	O
12	int
,	O
b0	int
,	O
B_ENTER	int
,	O
DEFPUSH_BUTTON	int
,	O
buts	array(*(char))
[	O
0	int
]	O
,	O
0	int
)	O
)	O
;	O
recursively_cbox	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,*(char),int,int))
=	O
check_new	(int,int,int,*(char))->(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),int,*(char),int,int)))
(	O
6	int
,	O
istart	int
,	O
find_recursively	int
,	O
recurs_label	*(char)
)	O
;	O
find_regex_cbox	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,*(char),int,int))
=	O
check_new	(int,int,int,*(char))->(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),int,*(char),int,int)))
(	O
10	int
,	O
istart	int
,	O
find_regex_flag	int
,	O
_	O
(	O
"&Regular expression"	*(char)
)	O
)	O
;	O
add_widget	(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))),*(void))->(int)
(	O
find_dlg	*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
,	O
find_regex_cbox	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,*(char),int,int))
)	O
;	O
case_sense	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,*(char),int,int))
=	O
check_new	(int,int,int,*(char))->(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),int,*(char),int,int)))
(	O
9	int
,	O
istart	int
,	O
case_sensitive	int
,	O
case_label	*(char)
)	O
;	O
add_widget	(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))),*(void))->(int)
(	O
find_dlg	*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
,	O
case_sense	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,*(char),int,int))
)	O
;	O
in_with	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,int,int,int,int,int,int,int,int,*(char),*(struct(*(void),*(struct`),*(struct`))),int,*(*(char)),int,*(char)))
=	O
input_new	(int,int,int,int,*(char),*(char))->(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),int,int,int,int,int,int,int,int,int,*(char),*(struct(*`,*`,*`)),int,*(*(char)),int,*(char))))
(	O
8	int
,	O
istart	int
,	O
INPUT_COLOR	O
,	O
ilen	int
,	O
in_contents	*(char)
,	O
"content"	*(char)
)	O
;	O
add_widget	(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))),*(void))->(int)
(	O
find_dlg	*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
,	O
in_with	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,int,int,int,int,int,int,int,int,*(char),*(struct(*(void),*(struct`),*(struct`))),int,*(*(char)),int,*(char)))
)	O
;	O
add_widget	(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))),*(void))->(int)
(	O
find_dlg	*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
,	O
recursively_cbox	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,*(char),int,int))
)	O
;	O
in_name	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,int,int,int,int,int,int,int,int,*(char),*(struct(*(void),*(struct`),*(struct`))),int,*(*(char)),int,*(char)))
=	O
input_new	(int,int,int,int,*(char),*(char))->(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),int,int,int,int,int,int,int,int,int,*(char),*(struct(*`,*`,*`)),int,*(*(char)),int,*(char))))
(	O
5	int
,	O
istart	int
,	O
INPUT_COLOR	O
,	O
ilen	int
,	O
in_start_name	*(char)
,	O
"name"	*(char)
)	O
;	O
add_widget	(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))),*(void))->(int)
(	O
find_dlg	*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
,	O
in_name	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,int,int,int,int,int,int,int,int,*(char),*(struct(*(void),*(struct`),*(struct`))),int,*(*(char)),int,*(char)))
)	O
;	O
in_start	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,int,int,int,int,int,int,int,int,*(char),*(struct(*(void),*(struct`),*(struct`))),int,*(*(char)),int,*(char)))
=	O
input_new	(int,int,int,int,*(char),*(char))->(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),int,int,int,int,int,int,int,int,int,*(char),*(struct(*`,*`,*`)),int,*(*(char)),int,*(char))))
(	O
3	int
,	O
istart	int
,	O
INPUT_COLOR	O
,	O
ilen	int
,	O
in_start_dir	*(char)
,	O
"start"	*(char)
)	O
;	O
add_widget	(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))),*(void))->(int)
(	O
find_dlg	*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
,	O
in_start	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,int,int,int,int,int,int,int,int,*(char),*(struct(*(void),*(struct`),*(struct`))),int,*(*(char)),int,*(char)))
)	O
;	O
add_widget	(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))),*(void))->(int)
(	O
find_dlg	*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
,	O
label_new	(int,int,*(char))->(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),int,*(char),int)))
(	O
8	int
,	O
3	int
,	O
labs	(long)->(long)
[	O
2	int
]	O
)	O
)	O
;	O
add_widget	(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))),*(void))->(int)
(	O
find_dlg	*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
,	O
label_new	(int,int,*(char))->(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),int,*(char),int)))
(	O
5	int
,	O
3	int
,	O
labs	(long)->(long)
[	O
1	int
]	O
)	O
)	O
;	O
add_widget	(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))),*(void))->(int)
(	O
find_dlg	*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
,	O
label_new	(int,int,*(char))->(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),int,*(char),int)))
(	O
3	int
,	O
3	int
,	O
labs	(long)->(long)
[	O
0	int
]	O
)	O
)	O
;	O
dlg_select_widget	(*(void))->(void)
(	O
in_name	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,int,int,int,int,int,int,int,int,*(char),*(struct(*(void),*(struct`),*(struct`))),int,*(*(char)),int,*(char)))
)	O
;	O
run_dlg	(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))))->(int)
(	O
find_dlg	*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
)	O
;	O
switch	O
(	O
find_dlg	*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
->	O
ret_value	int
)	O
{	O
case	O
B_CANCEL	int
:	O
return_value	int
=	O
0	int
;	O
break	O
;	O
case	O
B_TREE	int
:	O
temp_dir	*(char)
=	O
g_strdup	(*(char))->(*(char))
(	O
in_start	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,int,int,int,int,int,int,int,int,*(char),*(struct(*(void),*(struct`),*(struct`))),int,*(*(char)),int,*(char)))
->	O
buffer	*(char)
)	O
;	O
case_sensitive	int
=	O
case_sense	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,*(char),int,int))
->	O
state	*(int)
&	O
C_BOOL	int
;	O
find_regex_flag	int
=	O
find_regex_cbox	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,*(char),int,int))
->	O
state	*(int)
&	O
C_BOOL	int
;	O
find_recursively	int
=	O
recursively_cbox	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,*(char),int,int))
->	O
state	*(int)
&	O
C_BOOL	int
;	O
destroy_dlg	(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))))->(void)
(	O
find_dlg	*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
)	O
;	O
g_free	(*(void))->(void)
(	O
in_start_dir	*(char)
)	O
;	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
temp_dir	*(char)
,	O
"."	*(char)
)	O
==	O
0	int
)	O
{	O
g_free	(*(void))->(void)
(	O
temp_dir	*(char)
)	O
;	O
temp_dir	*(char)
=	O
g_strdup	(*(char))->(*(char))
(	O
current_panel	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),struct(*(struct(int,*`,struct`,struct`)),int),int,int,array(char),array(char),*(struct(*(void),*(struct`),*(struct`))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char)))
->	O
cwd	short
)	O
;	O
}	O
in_start_dir	*(char)
=	O
tree_box	(*(char))->(*(char))
(	O
temp_dir	*(char)
)	O
;	O
if	O
(	O
in_start_dir	*(char)
)	O
g_free	(*(void))->(void)
(	O
temp_dir	*(char)
)	O
;	O
else	O
in_start_dir	*(char)
=	O
temp_dir	*(char)
;	O
goto	O
find_par_start	O
;	O
break	O
;	O
default	O
:	O
g_free	(*(void))->(void)
(	O
in_contents	*(char)
)	O
;	O
if	O
(	O
in_with	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,int,int,int,int,int,int,int,int,*(char),*(struct(*(void),*(struct`),*(struct`))),int,*(*(char)),int,*(char)))
->	O
buffer	*(char)
[	O
0	int
]	O
)	O
{	O
*	O
content	*(*(char))
=	O
g_strdup	(*(char))->(*(char))
(	O
in_with	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,int,int,int,int,int,int,int,int,*(char),*(struct(*(void),*(struct`),*(struct`))),int,*(*(char)),int,*(char)))
->	O
buffer	*(char)
)	O
;	O
in_contents	*(char)
=	O
g_strdup	(*(char))->(*(char))
(	O
*	O
content	*(*(char))
)	O
;	O
}	O
else	O
{	O
*	O
content	*(*(char))
=	O
in_contents	*(char)
=	O
NULL	O
;	O
r	*(struct)
=	O
0	int
;	O
}	O
case_sensitive	int
=	O
case_sense	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,*(char),int,int))
->	O
state	*(int)
&	O
C_BOOL	int
;	O
find_regex_flag	int
=	O
find_regex_cbox	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,*(char),int,int))
->	O
state	*(int)
&	O
C_BOOL	int
;	O
find_recursively	int
=	O
recursively_cbox	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,*(char),int,int))
->	O
state	*(int)
&	O
C_BOOL	int
;	O
return_value	int
=	O
1	int
;	O
*	O
start_dir	*(*(char))
=	O
g_strdup	(*(char))->(*(char))
(	O
in_start	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,int,int,int,int,int,int,int,int,*(char),*(struct(*(void),*(struct`),*(struct`))),int,*(*(char)),int,*(char)))
->	O
buffer	*(char)
)	O
;	O
*	O
pattern	*(char)
=	O
g_strdup	(*(char))->(*(char))
(	O
in_name	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,int,int,int,int,int,int,int,int,*(char),*(struct(*(void),*(struct`),*(struct`))),int,*(*(char)),int,*(char)))
->	O
buffer	*(char)
)	O
;	O
g_free	(*(void))->(void)
(	O
in_start_dir	*(char)
)	O
;	O
in_start_dir	*(char)
=	O
g_strdup	(*(char))->(*(char))
(	O
*	O
start_dir	*(*(char))
)	O
;	O
g_free	(*(void))->(void)
(	O
in_start_name	*(char)
)	O
;	O
in_start_name	*(char)
=	O
g_strdup	(*(char))->(*(char))
(	O
*	O
pattern	*(char)
)	O
;	O
}	O
destroy_dlg	(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))))->(void)
(	O
find_dlg	*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
)	O
;	O
return	O
return_value	int
;	O
}	O
static	O
void	O
push_directory	(*(char))->(void)
(	O
const	O
char	O
*	O
dir	*(struct)
)	O
{	O
dir_stack	struct(*(char),*(struct(*(char),*(struct(*(char),*(struct`))))))
*	O
new	*(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*(struct`),*(void))->(int)),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
;	O
new	*(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*(struct`),*(void))->(int)),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
=	O
g_new	O
(	O
dir_stack	struct(*(char),*(struct(*(char),*(struct(*(char),*(struct`))))))
,	O
1	int
)	O
;	O
new	*(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*(struct`),*(void))->(int)),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
->	O
name	*(char)
=	O
concat_dir_and_file	(*(char),*(char))->(*(char))
(	O
dir	*(struct)
,	O
""	*(char)
)	O
;	O
new	*(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*(struct`),*(void))->(int)),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
->	O
prev	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`)))))
=	O
dir_stack_base	*(struct(*(char),*(struct(*(char),*(struct`)))))
;	O
dir_stack_base	*(struct(*(char),*(struct(*(char),*(struct`)))))
=	O
new	*(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*(struct`),*(void))->(int)),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
;	O
}	O
static	O
char	O
*	O
pop_directory	()->(*(char))
(	O
void	O
)	O
{	O
char	O
*	O
name	*(char)
;	O
dir_stack	struct(*(char),*(struct(*(char),*(struct(*(char),*(struct`))))))
*	O
next	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`)))))
;	O
if	O
(	O
dir_stack_base	*(struct(*(char),*(struct(*(char),*(struct`)))))
)	O
{	O
name	*(char)
=	O
dir_stack_base	*(struct(*(char),*(struct(*(char),*(struct`)))))
->	O
name	*(char)
;	O
next	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`)))))
=	O
dir_stack_base	*(struct(*(char),*(struct(*(char),*(struct`)))))
->	O
prev	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`)))))
;	O
g_free	(*(void))->(void)
(	O
dir_stack_base	*(struct(*(char),*(struct(*(char),*(struct`)))))
)	O
;	O
dir_stack_base	*(struct(*(char),*(struct(*(char),*(struct`)))))
=	O
next	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`)))))
;	O
return	O
name	*(char)
;	O
}	O
else	O
return	O
0	int
;	O
}	O
static	O
void	O
insert_file	(*(char),*(char))->(void)
(	O
const	O
char	O
*	O
dir	*(struct)
,	O
const	O
char	O
*	O
file	*(char)
)	O
{	O
char	O
*	O
tmp_name	*(char)
;	O
static	O
char	O
*	O
dirname	*(char)
;	O
while	O
(	O
dir	*(struct)
[	O
0	int
]	O
==	O
PATH_SEP	char
&&	O
dir	*(struct)
[	O
1	int
]	O
==	O
PATH_SEP	char
)	O
dir	*(struct)
++	O
;	O
if	O
(	O
old_dir	*(char)
)	O
{	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
old_dir	*(char)
,	O
dir	*(struct)
)	O
)	O
{	O
g_free	(*(void))->(void)
(	O
old_dir	*(char)
)	O
;	O
old_dir	*(char)
=	O
g_strdup	(*(char))->(*(char))
(	O
dir	*(struct)
)	O
;	O
dirname	*(char)
=	O
add_to_list	(*(char),*(void))->(*(char))
(	O
dir	*(struct)
,	O
NULL	O
)	O
;	O
}	O
}	O
else	O
{	O
old_dir	*(char)
=	O
g_strdup	(*(char))->(*(char))
(	O
dir	*(struct)
)	O
;	O
dirname	*(char)
=	O
add_to_list	(*(char),*(void))->(*(char))
(	O
dir	*(struct)
,	O
NULL	O
)	O
;	O
}	O
tmp_name	*(char)
=	O
g_strconcat	(*(char))->(*(char))
(	O
"    "	*(char)
,	O
file	*(char)
,	O
(	O
char	O
*	O
)	O
NULL	O
)	O
;	O
add_to_list	(*(char),*(void))->(*(char))
(	O
tmp_name	*(char)
,	O
dirname	*(char)
)	O
;	O
g_free	(*(void))->(void)
(	O
tmp_name	*(char)
)	O
;	O
}	O
static	O
void	O
find_add_match	(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))),*(char),*(char))->(void)
(	O
Dlg_head	struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct),*((*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`))),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`))))))
*	O
h	*(struct)
,	O
const	O
char	O
*	O
dir	*(struct)
,	O
const	O
char	O
*	O
file	*(char)
)	O
{	O
int	O
p	*(void)
=	O
++	O
matches	int
&	O
7	int
;	O
(	O
void	O
)	O
h	*(struct)
;	O
insert_file	(*(char),*(char))->(void)
(	O
dir	*(struct)
,	O
file	*(char)
)	O
;	O
if	O
(	O
!	O
p	*(void)
)	O
listbox_select_last	(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),*(struct(*`,int,*`,*`,*`)),*(struct(*`,int,*`,*`,*`)),*(struct(*`,int,*`,*`,*`)),int,int,int,int,int,int,*((*`)->(int)),int,int)),int)->(void)
(	O
find_list	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),int,int,int,int,int,int,*((*(struct`))->(int)),int,int))
,	O
1	int
)	O
;	O
else	O
listbox_select_last	(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),*(struct(*`,int,*`,*`,*`)),*(struct(*`,int,*`,*`,*`)),*(struct(*`,int,*`,*`,*`)),int,int,int,int,int,int,*((*`)->(int)),int,int)),int)->(void)
(	O
find_list	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),int,int,int,int,int,int,*((*(struct`))->(int)),int,int))
,	O
0	int
)	O
;	O
send_message	(*(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))),enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))
(	O
&	O
find_list	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),int,int,int,int,int,int,*((*(struct`))->(int)),int,int))
->	O
widget	*(struct)
,	O
WIDGET_DRAW	int
,	O
0	int
)	O
;	O
if	O
(	O
p	*(void)
==	O
7	int
)	O
mc_refresh	()->(void)
(	O
)	O
;	O
}	O
static	O
char	O
*	O
get_line_at	(int,*(char),*(int),*(int),int,*(int))->(*(char))
(	O
int	O
file_fd	int
,	O
char	O
*	O
buf	*(char)
,	O
int	O
*	O
pos	*(char)
,	O
int	O
*	O
n_read	*(int)
,	O
int	O
buf_size	long
,	O
int	O
*	O
has_newline	*(int)
)	O
{	O
char	O
*	O
buffer	*(char)
=	O
0	int
;	O
int	O
buffer_size	int
=	O
0	int
;	O
char	O
ch	int
=	O
0	int
;	O
int	O
i	array(int)
=	O
0	int
;	O
for	O
(	O
;	O
;	O
)	O
{	O
if	O
(	O
*	O
pos	*(char)
>=	O
*	O
n_read	*(int)
)	O
{	O
*	O
pos	*(char)
=	O
0	int
;	O
if	O
(	O
(	O
*	O
n_read	*(int)
=	O
mc_read	(int,*(void),int)->(int)
(	O
file_fd	int
,	O
buf	*(char)
,	O
buf_size	long
)	O
)	O
<=	O
0	int
)	O
break	O
;	O
}	O
ch	int
=	O
buf	*(char)
[	O
(	O
*	O
pos	*(char)
)	O
++	O
]	O
;	O
if	O
(	O
ch	int
==	O
0	int
)	O
{	O
if	O
(	O
i	array(int)
==	O
0	int
)	O
continue	O
;	O
else	O
break	O
;	O
}	O
if	O
(	O
i	array(int)
>=	O
buffer_size	int
-	O
1	int
)	O
{	O
buffer	*(char)
=	O
g_realloc	(*(void),long)->(*(void))
(	O
buffer	*(char)
,	O
buffer_size	int
+=	O
80	int
)	O
;	O
}	O
if	O
(	O
ch	int
==	O
'\n'	O
)	O
break	O
;	O
buffer	*(char)
[	O
i	array(int)
++	O
]	O
=	O
ch	int
;	O
}	O
*	O
has_newline	*(int)
=	O
ch	int
?	O
1	int
:	O
0	int
;	O
if	O
(	O
buffer	*(char)
)	O
{	O
buffer	*(char)
[	O
i	array(int)
]	O
=	O
0	int
;	O
}	O
return	O
buffer	*(char)
;	O
}	O
static	O
FindProgressStatus	enum(int,int,int)
check_find_events	(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))))->(enum(int,int,int))
(	O
Dlg_head	struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct),*((*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`))),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`))))))
*	O
h	*(struct)
)	O
{	O
Gpm_Event	struct(int,int,int,enum(int,int,int,int,int,int,int,int,int))
event	*(struct(int,int,int,enum(int,int,int,int,int,int,int,int,int)))
;	O
int	O
c	int
;	O
c	int
=	O
get_event	(*(struct(int,int,int,enum(int,int,int,int,int,int,int,int,int))),int,int)->(int)
(	O
&	O
event	*(struct(int,int,int,enum(int,int,int,int,int,int,int,int,int)))
,	O
h	*(struct)
->	O
mouse_status	int
==	O
MOU_REPEAT	int
,	O
0	int
)	O
;	O
if	O
(	O
c	int
!=	O
EV_NONE	O
)	O
{	O
dlg_process_event	(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))),int,*(struct(int,int,int,enum(int,int,int,int,int,int,int,int,int))))->(void)
(	O
h	*(struct)
,	O
c	int
,	O
&	O
event	*(struct(int,int,int,enum(int,int,int,int,int,int,int,int,int)))
)	O
;	O
if	O
(	O
h	*(struct)
->	O
ret_value	int
==	O
B_ENTER	int
||	O
h	*(struct)
->	O
ret_value	int
==	O
B_CANCEL	int
||	O
h	*(struct)
->	O
ret_value	int
==	O
B_AGAIN	int
||	O
h	*(struct)
->	O
ret_value	int
==	O
B_PANELIZE	int
)	O
{	O
return	O
FIND_ABORT	int
;	O
}	O
if	O
(	O
!	O
(	O
h	*(struct)
->	O
flags	enum(int,int,int,int)
&	O
DLG_WANT_IDLE	O
)	O
)	O
{	O
return	O
FIND_SUSPEND	int
;	O
}	O
}	O
return	O
FIND_CONT	int
;	O
}	O
static	O
int	O
search_content	(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))),*(char),*(char))->(int)
(	O
Dlg_head	struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct),*((*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`))),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`))))))
*	O
h	*(struct)
,	O
const	O
char	O
*	O
directory	enum(int,int,int,int,int,int,int,int,int)
,	O
const	O
char	O
*	O
filename	*(char)
)	O
{	O
struct	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
s	*(char)
;	O
char	O
buffer	*(char)
[	O
BUF_SMALL	int
]	O
;	O
char	O
*	O
fname	*(char)
;	O
int	O
file_fd	int
;	O
int	O
ret_val	int
=	O
0	int
;	O
fname	*(char)
=	O
concat_dir_and_file	(*(char),*(char))->(*(char))
(	O
directory	enum(int,int,int,int,int,int,int,int,int)
,	O
filename	*(char)
)	O
;	O
if	O
(	O
mc_stat	(*(char),*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))))->(int)
(	O
fname	*(char)
,	O
&	O
s	*(char)
)	O
!=	O
0	int
||	O
!	O
S_ISREG	O
(	O
s	*(char)
.	O
st_mode	int
)	O
)	O
{	O
g_free	(*(void))->(void)
(	O
fname	*(char)
)	O
;	O
return	O
0	int
;	O
}	O
file_fd	int
=	O
mc_open	(*(char),int)->(int)
(	O
fname	*(char)
,	O
O_RDONLY	int
)	O
;	O
g_free	(*(void))->(void)
(	O
fname	*(char)
)	O
;	O
if	O
(	O
file_fd	int
==	O
-	O
1	int
)	O
return	O
0	int
;	O
g_snprintf	(*(char),long,*(char))->(int)
(	O
buffer	*(char)
,	O
sizeof	O
(	O
buffer	*(char)
)	O
,	O
_	O
(	O
"Grepping in %s"	*(char)
)	O
,	O
name_trunc	(*(char),int)->(*(char))
(	O
filename	*(char)
,	O
FIND2_X_USE	O
)	O
)	O
;	O
status_update	(*(char))->(void)
(	O
buffer	*(char)
)	O
;	O
mc_refresh	()->(void)
(	O
)	O
;	O
enable_interrupt_key	O
(	O
)	O
;	O
got_interrupt	O
(	O
)	O
;	O
{	O
int	O
line	int
=	O
1	int
;	O
int	O
pos	*(char)
=	O
0	int
;	O
int	O
n_read	*(int)
=	O
0	int
;	O
int	O
has_newline	*(int)
;	O
char	O
*	O
p	*(void)
;	O
int	O
found	int
=	O
0	int
;	O
typedef	O
const	O
char	O
*	O
(	O
*	O
search_fn	*((*(char),*(char))->(*(char)))
)	O
(	O
const	O
char	O
*	O
,	O
const	O
char	O
*	O
)	O
;	O
search_fn	*((*(char),*(char))->(*(char)))
search_func	*((*(void),*(void))->(int))
;	O
if	O
(	O
resuming	int
)	O
{	O
resuming	int
=	O
0	int
;	O
line	int
=	O
last_line	int
;	O
pos	*(char)
=	O
last_pos	int
;	O
}	O
search_func	*((*(void),*(void))->(int))
=	O
(	O
case_sensitive	int
)	O
?	O
cstrstr	(*(char),*(char))->(*(char))
:	O
cstrcasestr	(*(char),*(char))->(*(char))
;	O
while	O
(	O
(	O
p	*(void)
=	O
get_line_at	(int,*(char),*(int),*(int),int,*(int))->(*(char))
(	O
file_fd	int
,	O
buffer	*(char)
,	O
&	O
pos	*(char)
,	O
&	O
n_read	*(int)
,	O
sizeof	O
(	O
buffer	*(char)
)	O
,	O
&	O
has_newline	*(int)
)	O
)	O
&&	O
(	O
ret_val	int
==	O
0	int
)	O
)	O
{	O
if	O
(	O
found	int
==	O
0	int
)	O
{	O
if	O
(	O
find_regex_flag	int
)	O
{	O
if	O
(	O
regexec	(*(struct(*(struct),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int)),*(char),long,array(struct(int,int)),int)->(int)
(	O
r	*(struct)
,	O
p	*(void)
,	O
1	int
,	O
0	int
,	O
0	int
)	O
==	O
0	int
)	O
{	O
g_free	(*(void))->(void)
(	O
p	*(void)
)	O
;	O
p	*(void)
=	O
g_strdup_printf	(*(char))->(*(char))
(	O
"%d:%s"	*(char)
,	O
line	int
,	O
filename	*(char)
)	O
;	O
find_add_match	(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))),*(char),*(char))->(void)
(	O
h	*(struct)
,	O
directory	enum(int,int,int,int,int,int,int,int,int)
,	O
p	*(void)
)	O
;	O
found	int
=	O
1	int
;	O
}	O
}	O
else	O
{	O
if	O
(	O
search_func	*((*(void),*(void))->(int))
(	O
p	*(void)
,	O
content_pattern	*(char)
)	O
!=	O
NULL	O
)	O
{	O
char	O
*	O
match	*(char)
=	O
g_strdup_printf	(*(char))->(*(char))
(	O
"%d:%s"	*(char)
,	O
line	int
,	O
filename	*(char)
)	O
;	O
find_add_match	(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))),*(char),*(char))->(void)
(	O
h	*(struct)
,	O
directory	enum(int,int,int,int,int,int,int,int,int)
,	O
match	*(char)
)	O
;	O
found	int
=	O
TRUE	O
;	O
}	O
}	O
}	O
if	O
(	O
has_newline	*(int)
)	O
{	O
line	int
++	O
;	O
found	int
=	O
0	int
;	O
}	O
g_free	(*(void))->(void)
(	O
p	*(void)
)	O
;	O
if	O
(	O
(	O
line	int
&	O
0xff	int
)	O
==	O
0	int
)	O
{	O
FindProgressStatus	enum(int,int,int)
res	enum(int,int,int)
;	O
res	enum(int,int,int)
=	O
check_find_events	(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))))->(enum(int,int,int))
(	O
h	*(struct)
)	O
;	O
switch	O
(	O
res	enum(int,int,int)
)	O
{	O
case	O
FIND_ABORT	int
:	O
stop_idle	(*(void))->(void)
(	O
h	*(struct)
)	O
;	O
ret_val	int
=	O
1	int
;	O
break	O
;	O
case	O
FIND_SUSPEND	int
:	O
resuming	int
=	O
1	int
;	O
last_line	int
=	O
line	int
;	O
last_pos	int
=	O
pos	*(char)
;	O
ret_val	int
=	O
1	int
;	O
break	O
;	O
default	O
:	O
break	O
;	O
}	O
}	O
}	O
}	O
disable_interrupt_key	O
(	O
)	O
;	O
mc_close	(int)->(int)
(	O
file_fd	int
)	O
;	O
return	O
ret_val	int
;	O
}	O
static	O
int	O
do_search	(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))))->(int)
(	O
struct	O
Dlg_head	struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct),*((*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`))),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`))))))
*	O
h	*(struct)
)	O
{	O
static	O
struct	O
dirent	struct(long,long,short,char,array(char))
*	O
dp	*(struct(long,long,short,char,array(char)))
=	O
0	int
;	O
static	O
DIR	struct
*	O
dirp	*(struct)
=	O
0	int
;	O
static	O
char	O
*	O
directory	enum(int,int,int,int,int,int,int,int,int)
;	O
struct	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
tmp_stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
;	O
static	O
int	O
pos	*(char)
;	O
static	O
int	O
subdirs_left	int
=	O
0	int
;	O
if	O
(	O
!	O
h	*(struct)
)	O
{	O
if	O
(	O
dirp	*(struct)
)	O
{	O
mc_closedir	(*(struct))->(int)
(	O
dirp	*(struct)
)	O
;	O
dirp	*(struct)
=	O
0	int
;	O
}	O
g_free	(*(void))->(void)
(	O
directory	enum(int,int,int,int,int,int,int,int,int)
)	O
;	O
directory	enum(int,int,int,int,int,int,int,int,int)
=	O
NULL	O
;	O
dp	*(struct(long,long,short,char,array(char)))
=	O
0	int
;	O
return	O
1	int
;	O
}	O
do_search_begin	O
:	O
while	O
(	O
!	O
dp	*(struct(long,long,short,char,array(char)))
)	O
{	O
if	O
(	O
dirp	*(struct)
)	O
{	O
mc_closedir	(*(struct))->(int)
(	O
dirp	*(struct)
)	O
;	O
dirp	*(struct)
=	O
0	int
;	O
}	O
while	O
(	O
!	O
dirp	*(struct)
)	O
{	O
char	O
*	O
tmp	*(char)
;	O
attrset	(int)->(void)
(	O
REVERSE_COLOR	O
)	O
;	O
while	O
(	O
1	int
)	O
{	O
tmp	*(char)
=	O
pop_directory	()->(*(char))
(	O
)	O
;	O
if	O
(	O
!	O
tmp	*(char)
)	O
{	O
running	int
=	O
0	int
;	O
status_update	(*(char))->(void)
(	O
_	O
(	O
"Finished"	*(char)
)	O
)	O
;	O
stop_idle	(*(void))->(void)
(	O
h	*(struct)
)	O
;	O
return	O
0	int
;	O
}	O
if	O
(	O
find_ignore_dirs	*(char)
)	O
{	O
int	O
found	int
;	O
char	O
*	O
temp_dir	*(char)
=	O
g_strconcat	(*(char))->(*(char))
(	O
":"	*(char)
,	O
tmp	*(char)
,	O
":"	*(char)
,	O
(	O
char	O
*	O
)	O
NULL	O
)	O
;	O
found	int
=	O
strstr	(*(char),*(char))->(*(char))
(	O
find_ignore_dirs	*(char)
,	O
temp_dir	*(char)
)	O
!=	O
0	int
;	O
g_free	(*(void))->(void)
(	O
temp_dir	*(char)
)	O
;	O
if	O
(	O
found	int
)	O
g_free	(*(void))->(void)
(	O
tmp	*(char)
)	O
;	O
else	O
break	O
;	O
}	O
else	O
break	O
;	O
}	O
g_free	(*(void))->(void)
(	O
directory	enum(int,int,int,int,int,int,int,int,int)
)	O
;	O
directory	enum(int,int,int,int,int,int,int,int,int)
=	O
tmp	*(char)
;	O
if	O
(	O
verbose	int
)	O
{	O
char	O
buffer	*(char)
[	O
BUF_SMALL	int
]	O
;	O
g_snprintf	(*(char),long,*(char))->(int)
(	O
buffer	*(char)
,	O
sizeof	O
(	O
buffer	*(char)
)	O
,	O
_	O
(	O
"Searching %s"	*(char)
)	O
,	O
name_trunc	(*(char),int)->(*(char))
(	O
directory	enum(int,int,int,int,int,int,int,int,int)
,	O
FIND2_X_USE	O
)	O
)	O
;	O
status_update	(*(char))->(void)
(	O
buffer	*(char)
)	O
;	O
}	O
if	O
(	O
!	O
mc_stat	(*(char),*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))))->(int)
(	O
directory	enum(int,int,int,int,int,int,int,int,int)
,	O
&	O
tmp_stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
)	O
)	O
subdirs_left	int
=	O
tmp_stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_nlink	long
-	O
2	int
;	O
else	O
subdirs_left	int
=	O
0	int
;	O
dirp	*(struct)
=	O
mc_opendir	(*(char))->(*(struct))
(	O
directory	enum(int,int,int,int,int,int,int,int,int)
)	O
;	O
}	O
dp	*(struct(long,long,short,char,array(char)))
=	O
mc_readdir	(*(struct))->(*(struct(long,long,short,char,array(char))))
(	O
dirp	*(struct)
)	O
;	O
}	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
dp	*(struct(long,long,short,char,array(char)))
->	O
d_name	array(char)
,	O
"."	*(char)
)	O
==	O
0	int
||	O
strcmp	(*(char),*(char))->(int)
(	O
dp	*(struct(long,long,short,char,array(char)))
->	O
d_name	array(char)
,	O
".."	*(char)
)	O
==	O
0	int
)	O
{	O
dp	*(struct(long,long,short,char,array(char)))
=	O
mc_readdir	(*(struct))->(*(struct(long,long,short,char,array(char))))
(	O
dirp	*(struct)
)	O
;	O
return	O
1	int
;	O
}	O
if	O
(	O
subdirs_left	int
&&	O
find_recursively	int
&&	O
directory	enum(int,int,int,int,int,int,int,int,int)
)	O
{	O
char	O
*	O
tmp_name	*(char)
=	O
concat_dir_and_file	(*(char),*(char))->(*(char))
(	O
directory	enum(int,int,int,int,int,int,int,int,int)
,	O
dp	*(struct(long,long,short,char,array(char)))
->	O
d_name	array(char)
)	O
;	O
if	O
(	O
!	O
mc_lstat	(*(char),*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))))->(int)
(	O
tmp_name	*(char)
,	O
&	O
tmp_stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
)	O
&&	O
S_ISDIR	O
(	O
tmp_stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_mode	int
)	O
)	O
{	O
push_directory	(*(char))->(void)
(	O
tmp_name	*(char)
)	O
;	O
subdirs_left	int
--	O
;	O
}	O
g_free	(*(void))->(void)
(	O
tmp_name	*(char)
)	O
;	O
}	O
if	O
(	O
regexp_match	(*(char),*(char),int)->(int)
(	O
find_pattern	*(char)
,	O
dp	*(struct(long,long,short,char,array(char)))
->	O
d_name	array(char)
,	O
match_file	int
)	O
)	O
{	O
if	O
(	O
content_pattern	*(char)
)	O
{	O
if	O
(	O
search_content	(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))),*(char),*(char))->(int)
(	O
h	*(struct)
,	O
directory	enum(int,int,int,int,int,int,int,int,int)
,	O
dp	*(struct(long,long,short,char,array(char)))
->	O
d_name	array(char)
)	O
)	O
{	O
return	O
1	int
;	O
}	O
}	O
else	O
find_add_match	(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))),*(char),*(char))->(void)
(	O
h	*(struct)
,	O
directory	enum(int,int,int,int,int,int,int,int,int)
,	O
dp	*(struct(long,long,short,char,array(char)))
->	O
d_name	array(char)
)	O
;	O
}	O
dp	*(struct(long,long,short,char,array(char)))
=	O
mc_readdir	(*(struct))->(*(struct(long,long,short,char,array(char))))
(	O
dirp	*(struct)
)	O
;	O
count	int
++	O
;	O
if	O
(	O
!	O
(	O
count	int
&	O
31	int
)	O
)	O
{	O
const	O
char	O
*	O
rotating_dash	*(char)
=	O
"|/-\\"	*(char)
;	O
if	O
(	O
verbose	int
)	O
{	O
pos	*(char)
=	O
(	O
pos	*(char)
+	O
1	int
)	O
%	O
4	int
;	O
attrset	(int)->(void)
(	O
DLG_NORMALC	O
(	O
h	*(struct)
)	O
)	O
;	O
dlg_move	O
(	O
h	*(struct)
,	O
FIND2_Y	O
-	O
6	int
,	O
FIND2_X	int
-	O
4	int
)	O
;	O
addch	O
(	O
rotating_dash	*(char)
[	O
pos	*(char)
]	O
)	O
;	O
mc_refresh	()->(void)
(	O
)	O
;	O
}	O
}	O
else	O
goto	O
do_search_begin	O
;	O
return	O
1	int
;	O
}	O
static	O
void	O
init_find_vars	()->(void)
(	O
void	O
)	O
{	O
char	O
*	O
dir	*(struct)
;	O
g_free	(*(void))->(void)
(	O
old_dir	*(char)
)	O
;	O
old_dir	*(char)
=	O
0	int
;	O
count	int
=	O
0	int
;	O
matches	int
=	O
0	int
;	O
while	O
(	O
(	O
dir	*(struct)
=	O
pop_directory	()->(*(char))
(	O
)	O
)	O
!=	O
NULL	O
)	O
g_free	(*(void))->(void)
(	O
dir	*(struct)
)	O
;	O
}	O
static	O
char	O
*	O
make_fullname	(*(char),*(char))->(*(char))
(	O
const	O
char	O
*	O
dirname	*(char)
,	O
const	O
char	O
*	O
filename	*(char)
)	O
{	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
dirname	*(char)
,	O
"."	*(char)
)	O
==	O
0	int
||	O
strcmp	(*(char),*(char))->(int)
(	O
dirname	*(char)
,	O
"."	*(char)
PATH_SEP_STR	*(char)
)	O
==	O
0	int
)	O
return	O
g_strdup	(*(char))->(*(char))
(	O
filename	*(char)
)	O
;	O
if	O
(	O
strncmp	(*(char),*(char),long)->(int)
(	O
dirname	*(char)
,	O
"."	*(char)
PATH_SEP_STR	*(char)
,	O
2	int
)	O
==	O
0	int
)	O
return	O
concat_dir_and_file	(*(char),*(char))->(*(char))
(	O
dirname	*(char)
+	O
2	int
,	O
filename	*(char)
)	O
;	O
return	O
concat_dir_and_file	(*(char),*(char))->(*(char))
(	O
dirname	*(char)
,	O
filename	*(char)
)	O
;	O
}	O
static	O
void	O
find_do_view_edit	(int,int,*(char),*(char))->(void)
(	O
int	O
unparsed_view	int
,	O
int	O
edit	int
,	O
char	O
*	O
dir	*(struct)
,	O
char	O
*	O
file	*(char)
)	O
{	O
char	O
*	O
fullname	*(char)
;	O
const	O
char	O
*	O
filename	*(char)
;	O
int	O
line	int
;	O
if	O
(	O
content_pattern	*(char)
)	O
{	O
filename	*(char)
=	O
strchr	(*(char),int)->(*(char))
(	O
file	*(char)
+	O
4	int
,	O
':'	O
)	O
+	O
1	int
;	O
line	int
=	O
atoi	(*(char))->(int)
(	O
file	*(char)
+	O
4	int
)	O
;	O
}	O
else	O
{	O
filename	*(char)
=	O
file	*(char)
+	O
4	int
;	O
line	int
=	O
0	int
;	O
}	O
fullname	*(char)
=	O
make_fullname	(*(char),*(char))->(*(char))
(	O
dir	*(struct)
,	O
filename	*(char)
)	O
;	O
if	O
(	O
edit	int
)	O
do_edit_at_line	(*(char),int)->(void)
(	O
fullname	*(char)
,	O
line	int
)	O
;	O
else	O
view_file_at_line	(*(char),int,int,int)->(int)
(	O
fullname	*(char)
,	O
unparsed_view	int
,	O
use_internal_view	int
,	O
line	int
)	O
;	O
g_free	(*(void))->(void)
(	O
fullname	*(char)
)	O
;	O
}	O
static	O
int	O
view_edit_currently_selected_file	(int,int)->(int)
(	O
int	O
unparsed_view	int
,	O
int	O
edit	int
)	O
{	O
WLEntry	struct(*(char),int,*(void),*(struct(*(char),int,*(void),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))))),*(struct(*(char),int,*(void),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))))))
*	O
entry	*(struct(*(char),int,*(void),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`)))))
=	O
find_list	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),int,int,int,int,int,int,*((*(struct`))->(int)),int,int))
->	O
current	*(struct)
;	O
char	O
*	O
dir	*(struct)
;	O
if	O
(	O
!	O
entry	*(struct(*(char),int,*(void),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`)))))
)	O
return	O
MSG_NOT_HANDLED	int
;	O
dir	*(struct)
=	O
entry	*(struct(*(char),int,*(void),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`)))))
->	O
data	*(void)
;	O
if	O
(	O
!	O
entry	*(struct(*(char),int,*(void),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`)))))
->	O
text	*(char)
||	O
!	O
dir	*(struct)
)	O
return	O
MSG_NOT_HANDLED	int
;	O
find_do_view_edit	(int,int,*(char),*(char))->(void)
(	O
unparsed_view	int
,	O
edit	int
,	O
dir	*(struct)
,	O
entry	*(struct(*(char),int,*(void),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`)))))
->	O
text	*(char)
)	O
;	O
return	O
MSG_HANDLED	int
;	O
}	O
static	O
cb_ret_t	enum(int,int)
find_callback	(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))
(	O
struct	O
Dlg_head	struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct),*((*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`))),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`))))))
*	O
h	*(struct)
,	O
dlg_msg_t	enum(int,int,int,int,int,int,int,int,int,int,int,int,int)
msg	*(char)
,	O
int	O
parm	int
)	O
{	O
switch	O
(	O
msg	*(char)
)	O
{	O
case	O
DLG_KEY	int
:	O
if	O
(	O
parm	int
==	O
KEY_F	O
(	O
3	int
)	O
||	O
parm	int
==	O
KEY_F	O
(	O
13	int
)	O
)	O
{	O
int	O
unparsed_view	int
=	O
(	O
parm	int
==	O
KEY_F	O
(	O
13	int
)	O
)	O
;	O
return	O
view_edit_currently_selected_file	(int,int)->(int)
(	O
unparsed_view	int
,	O
0	int
)	O
;	O
}	O
if	O
(	O
parm	int
==	O
KEY_F	O
(	O
4	int
)	O
)	O
{	O
return	O
view_edit_currently_selected_file	(int,int)->(int)
(	O
0	int
,	O
1	int
)	O
;	O
}	O
return	O
MSG_NOT_HANDLED	int
;	O
case	O
DLG_IDLE	int
:	O
do_search	(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))))->(int)
(	O
h	*(struct)
)	O
;	O
return	O
MSG_HANDLED	int
;	O
default	O
:	O
return	O
default_dlg_callback	(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))
(	O
h	*(struct)
,	O
msg	*(char)
,	O
parm	int
)	O
;	O
}	O
}	O
static	O
int	O
start_stop	(int)->(int)
(	O
int	O
button	int
)	O
{	O
(	O
void	O
)	O
button	int
;	O
running	int
=	O
is_start	int
;	O
set_idle_proc	(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))),int)->(void)
(	O
find_dlg	*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
,	O
running	int
)	O
;	O
is_start	int
=	O
!	O
is_start	int
;	O
status_update	(*(char))->(void)
(	O
is_start	int
?	O
_	O
(	O
"Stopped"	*(char)
)	O
:	O
_	O
(	O
"Searching"	*(char)
)	O
)	O
;	O
button_set_text	(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),int,int,int,*(char),int,int,*((int)->(int)))),*(char))->(void)
(	O
stop_button	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,int,int,*(char),int,int,*((int)->(int))))
,	O
fbuts	array(struct(*(char),int,int))
[	O
is_start	int
]	O
.	O
text	*(char)
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
find_do_view_file	(int)->(int)
(	O
int	O
button	int
)	O
{	O
(	O
void	O
)	O
button	int
;	O
view_edit_currently_selected_file	(int,int)->(int)
(	O
0	int
,	O
0	int
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
find_do_edit_file	(int)->(int)
(	O
int	O
button	int
)	O
{	O
(	O
void	O
)	O
button	int
;	O
view_edit_currently_selected_file	(int,int)->(int)
(	O
0	int
,	O
1	int
)	O
;	O
return	O
0	int
;	O
}	O
static	O
void	O
setup_gui	()->(void)
(	O
void	O
)	O
{	O
static	O
int	O
i18n_flag	int
=	O
0	int
;	O
if	O
(	O
!	O
i18n_flag	int
)	O
{	O
register	O
int	O
i	array(int)
=	O
sizeof	O
(	O
fbuts	array(struct(*(char),int,int))
)	O
/	O
sizeof	O
(	O
fbuts	array(struct(*(char),int,int))
[	O
0	int
]	O
)	O
;	O
while	O
(	O
i	array(int)
--	O
)	O
fbuts	array(struct(*(char),int,int))
[	O
i	array(int)
]	O
.	O
len	int
=	O
strlen	(*(char))->(long)
(	O
fbuts	array(struct(*(char),int,int))
[	O
i	array(int)
]	O
.	O
text	*(char)
=	O
_	O
(	O
fbuts	array(struct(*(char),int,int))
[	O
i	array(int)
]	O
.	O
text	*(char)
)	O
)	O
+	O
3	int
;	O
fbuts	array(struct(*(char),int,int))
[	O
2	int
]	O
.	O
len	int
+=	O
2	int
;	O
i18n_flag	int
=	O
1	int
;	O
}	O
{	O
int	O
l0	int
=	O
max	long
(	O
fbuts	array(struct(*(char),int,int))
[	O
0	int
]	O
.	O
len	int
,	O
fbuts	array(struct(*(char),int,int))
[	O
1	int
]	O
.	O
len	int
)	O
;	O
int	O
l1	int
=	O
fbuts	array(struct(*(char),int,int))
[	O
2	int
]	O
.	O
len	int
+	O
fbuts	array(struct(*(char),int,int))
[	O
3	int
]	O
.	O
len	int
+	O
l0	int
+	O
fbuts	array(struct(*(char),int,int))
[	O
4	int
]	O
.	O
len	int
;	O
int	O
l2	int
=	O
fbuts	array(struct(*(char),int,int))
[	O
5	int
]	O
.	O
len	int
+	O
fbuts	array(struct(*(char),int,int))
[	O
6	int
]	O
.	O
len	int
+	O
fbuts	array(struct(*(char),int,int))
[	O
7	int
]	O
.	O
len	int
;	O
int	O
r1	int
,	O
r2	int
;	O
FIND2_X	int
=	O
COLS	O
-	O
16	int
;	O
if	O
(	O
l1	int
+	O
9	int
>	O
FIND2_X	int
)	O
FIND2_X	int
=	O
l1	int
+	O
9	int
;	O
if	O
(	O
l2	int
+	O
8	int
>	O
FIND2_X	int
)	O
FIND2_X	int
=	O
l2	int
+	O
8	int
;	O
r1	int
=	O
(	O
FIND2_X	int
-	O
4	int
-	O
l1	int
)	O
%	O
5	int
;	O
l1	int
=	O
(	O
FIND2_X	int
-	O
4	int
-	O
l1	int
)	O
/	O
5	int
;	O
r2	int
=	O
(	O
FIND2_X	int
-	O
4	int
-	O
l2	int
)	O
%	O
4	int
;	O
l2	int
=	O
(	O
FIND2_X	int
-	O
4	int
-	O
l2	int
)	O
/	O
4	int
;	O
fbuts	array(struct(*(char),int,int))
[	O
2	int
]	O
.	O
x	array(long)
=	O
2	int
+	O
r1	int
/	O
2	int
+	O
l1	int
;	O
fbuts	array(struct(*(char),int,int))
[	O
3	int
]	O
.	O
x	array(long)
=	O
fbuts	array(struct(*(char),int,int))
[	O
2	int
]	O
.	O
x	array(long)
+	O
fbuts	array(struct(*(char),int,int))
[	O
2	int
]	O
.	O
len	int
+	O
l1	int
;	O
fbuts	array(struct(*(char),int,int))
[	O
0	int
]	O
.	O
x	array(long)
=	O
fbuts	array(struct(*(char),int,int))
[	O
3	int
]	O
.	O
x	array(long)
+	O
fbuts	array(struct(*(char),int,int))
[	O
3	int
]	O
.	O
len	int
+	O
l1	int
;	O
fbuts	array(struct(*(char),int,int))
[	O
4	int
]	O
.	O
x	array(long)
=	O
fbuts	array(struct(*(char),int,int))
[	O
0	int
]	O
.	O
x	array(long)
+	O
l0	int
+	O
l1	int
;	O
fbuts	array(struct(*(char),int,int))
[	O
5	int
]	O
.	O
x	array(long)
=	O
2	int
+	O
r2	int
/	O
2	int
+	O
l2	int
;	O
fbuts	array(struct(*(char),int,int))
[	O
6	int
]	O
.	O
x	array(long)
=	O
fbuts	array(struct(*(char),int,int))
[	O
5	int
]	O
.	O
x	array(long)
+	O
fbuts	array(struct(*(char),int,int))
[	O
5	int
]	O
.	O
len	int
+	O
l2	int
;	O
fbuts	array(struct(*(char),int,int))
[	O
7	int
]	O
.	O
x	array(long)
=	O
fbuts	array(struct(*(char),int,int))
[	O
6	int
]	O
.	O
x	array(long)
+	O
fbuts	array(struct(*(char),int,int))
[	O
6	int
]	O
.	O
len	int
+	O
l2	int
;	O
}	O
find_dlg	*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
=	O
create_dlg	(int,int,int,int,*(int),*((*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(char),*(char),int)->(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))))
(	O
0	int
,	O
0	int
,	O
FIND2_Y	O
,	O
FIND2_X	int
,	O
dialog_colors	array(int)
,	O
find_callback	(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))
,	O
"[Find File]"	*(char)
,	O
_	O
(	O
"Find File"	*(char)
)	O
,	O
DLG_CENTER	O
|	O
DLG_REVERSE	O
)	O
;	O
add_widget	(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))),*(void))->(int)
(	O
find_dlg	*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
,	O
button_new	(int,int,int,int,*(char),*((int)->(int)))->(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),int,int,int,*(char),int,int,*((int)->(int)))))
(	O
FIND2_Y	O
-	O
3	int
,	O
fbuts	array(struct(*(char),int,int))
[	O
7	int
]	O
.	O
x	array(long)
,	O
B_VIEW	int
,	O
NORMAL_BUTTON	int
,	O
fbuts	array(struct(*(char),int,int))
[	O
7	int
]	O
.	O
text	*(char)
,	O
find_do_edit_file	(int)->(int)
)	O
)	O
;	O
add_widget	(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))),*(void))->(int)
(	O
find_dlg	*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
,	O
button_new	(int,int,int,int,*(char),*((int)->(int)))->(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),int,int,int,*(char),int,int,*((int)->(int)))))
(	O
FIND2_Y	O
-	O
3	int
,	O
fbuts	array(struct(*(char),int,int))
[	O
6	int
]	O
.	O
x	array(long)
,	O
B_VIEW	int
,	O
NORMAL_BUTTON	int
,	O
fbuts	array(struct(*(char),int,int))
[	O
6	int
]	O
.	O
text	*(char)
,	O
find_do_view_file	(int)->(int)
)	O
)	O
;	O
add_widget	(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))),*(void))->(int)
(	O
find_dlg	*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
,	O
button_new	(int,int,int,int,*(char),*((int)->(int)))->(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),int,int,int,*(char),int,int,*((int)->(int)))))
(	O
FIND2_Y	O
-	O
3	int
,	O
fbuts	array(struct(*(char),int,int))
[	O
5	int
]	O
.	O
x	array(long)
,	O
B_PANELIZE	int
,	O
NORMAL_BUTTON	int
,	O
fbuts	array(struct(*(char),int,int))
[	O
5	int
]	O
.	O
text	*(char)
,	O
0	int
)	O
)	O
;	O
add_widget	(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))),*(void))->(int)
(	O
find_dlg	*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
,	O
button_new	(int,int,int,int,*(char),*((int)->(int)))->(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),int,int,int,*(char),int,int,*((int)->(int)))))
(	O
FIND2_Y	O
-	O
4	int
,	O
fbuts	array(struct(*(char),int,int))
[	O
4	int
]	O
.	O
x	array(long)
,	O
B_CANCEL	int
,	O
NORMAL_BUTTON	int
,	O
fbuts	array(struct(*(char),int,int))
[	O
4	int
]	O
.	O
text	*(char)
,	O
0	int
)	O
)	O
;	O
stop_button	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,int,int,*(char),int,int,*((int)->(int))))
=	O
button_new	(int,int,int,int,*(char),*((int)->(int)))->(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),int,int,int,*(char),int,int,*((int)->(int)))))
(	O
FIND2_Y	O
-	O
4	int
,	O
fbuts	array(struct(*(char),int,int))
[	O
0	int
]	O
.	O
x	array(long)
,	O
B_STOP	int
,	O
NORMAL_BUTTON	int
,	O
fbuts	array(struct(*(char),int,int))
[	O
0	int
]	O
.	O
text	*(char)
,	O
start_stop	(int)->(int)
)	O
;	O
add_widget	(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))),*(void))->(int)
(	O
find_dlg	*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
,	O
stop_button	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,int,int,*(char),int,int,*((int)->(int))))
)	O
;	O
add_widget	(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))),*(void))->(int)
(	O
find_dlg	*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
,	O
button_new	(int,int,int,int,*(char),*((int)->(int)))->(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),int,int,int,*(char),int,int,*((int)->(int)))))
(	O
FIND2_Y	O
-	O
4	int
,	O
fbuts	array(struct(*(char),int,int))
[	O
3	int
]	O
.	O
x	array(long)
,	O
B_AGAIN	int
,	O
NORMAL_BUTTON	int
,	O
fbuts	array(struct(*(char),int,int))
[	O
3	int
]	O
.	O
text	*(char)
,	O
0	int
)	O
)	O
;	O
add_widget	(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))),*(void))->(int)
(	O
find_dlg	*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
,	O
button_new	(int,int,int,int,*(char),*((int)->(int)))->(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),int,int,int,*(char),int,int,*((int)->(int)))))
(	O
FIND2_Y	O
-	O
4	int
,	O
fbuts	array(struct(*(char),int,int))
[	O
2	int
]	O
.	O
x	array(long)
,	O
B_ENTER	int
,	O
DEFPUSH_BUTTON	int
,	O
fbuts	array(struct(*(char),int,int))
[	O
2	int
]	O
.	O
text	*(char)
,	O
0	int
)	O
)	O
;	O
status_label	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,*(char),int))
=	O
label_new	(int,int,*(char))->(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),int,*(char),int)))
(	O
FIND2_Y	O
-	O
6	int
,	O
4	int
,	O
_	O
(	O
"Searching"	*(char)
)	O
)	O
;	O
add_widget	(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))),*(void))->(int)
(	O
find_dlg	*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
,	O
status_label	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,*(char),int))
)	O
;	O
find_list	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),int,int,int,int,int,int,*((*(struct`))->(int)),int,int))
=	O
listbox_new	(int,int,int,int,*((*(struct(struct`,*`,*`,*`,int,int,int,int,int,int,*`,int,int)))->(int)))->(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),*(struct(*`,int,*`,*`,*`)),*(struct(*`,int,*`,*`,*`)),*(struct(*`,int,*`,*`,*`)),int,int,int,int,int,int,*((*`)->(int)),int,int)))
(	O
2	int
,	O
2	int
,	O
FIND2_X	int
-	O
4	int
,	O
FIND2_Y	O
-	O
9	int
,	O
0	int
)	O
;	O
add_widget	(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))),*(void))->(int)
(	O
find_dlg	*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
,	O
find_list	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),int,int,int,int,int,int,*((*(struct`))->(int)),int,int))
)	O
;	O
}	O
static	O
int	O
run_process	()->(int)
(	O
void	O
)	O
{	O
resuming	int
=	O
0	int
;	O
set_idle_proc	(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))),int)->(void)
(	O
find_dlg	*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
,	O
1	int
)	O
;	O
run_dlg	(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))))->(int)
(	O
find_dlg	*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
)	O
;	O
return	O
find_dlg	*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
->	O
ret_value	int
;	O
}	O
static	O
void	O
kill_gui	()->(void)
(	O
void	O
)	O
{	O
set_idle_proc	(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))),int)->(void)
(	O
find_dlg	*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
,	O
0	int
)	O
;	O
destroy_dlg	(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))))->(void)
(	O
find_dlg	*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
)	O
;	O
}	O
static	O
int	O
find_file	(*(char),*(char),*(char),*(*(char)),*(*(char)))->(int)
(	O
char	O
*	O
start_dir	*(*(char))
,	O
char	O
*	O
pattern	*(char)
,	O
char	O
*	O
content	*(*(char))
,	O
char	O
*	O
*	O
dirname	*(char)
,	O
char	O
*	O
*	O
filename	*(char)
)	O
{	O
int	O
return_value	int
=	O
0	int
;	O
char	O
*	O
dir	*(struct)
;	O
char	O
*	O
dir_tmp	*(char)
,	O
*	O
file_tmp	*(char)
;	O
setup_gui	()->(void)
(	O
)	O
;	O
find_pattern	*(char)
=	O
pattern	*(char)
;	O
content_pattern	*(char)
=	O
content	*(*(char))
;	O
init_find_vars	()->(void)
(	O
)	O
;	O
push_directory	(*(char))->(void)
(	O
start_dir	*(*(char))
)	O
;	O
return_value	int
=	O
run_process	()->(int)
(	O
)	O
;	O
while	O
(	O
(	O
dir	*(struct)
=	O
pop_directory	()->(*(char))
(	O
)	O
)	O
!=	O
NULL	O
)	O
g_free	(*(void))->(void)
(	O
dir	*(struct)
)	O
;	O
get_list_info	(*(*(char)),*(*(char)))->(void)
(	O
&	O
file_tmp	*(char)
,	O
&	O
dir_tmp	*(char)
)	O
;	O
if	O
(	O
dir_tmp	*(char)
)	O
*	O
dirname	*(char)
=	O
g_strdup	(*(char))->(*(char))
(	O
dir_tmp	*(char)
)	O
;	O
if	O
(	O
file_tmp	*(char)
)	O
*	O
filename	*(char)
=	O
g_strdup	(*(char))->(*(char))
(	O
file_tmp	*(char)
)	O
;	O
if	O
(	O
return_value	int
==	O
B_PANELIZE	int
&&	O
*	O
filename	*(char)
)	O
{	O
int	O
status	int
,	O
link_to_dir	int
,	O
stale_link	int
;	O
int	O
next_free	int
=	O
0	int
;	O
int	O
i	array(int)
;	O
struct	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
st	*(struct)
;	O
WLEntry	struct(*(char),int,*(void),*(struct(*(char),int,*(void),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))))),*(struct(*(char),int,*(void),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))))))
*	O
entry	*(struct(*(char),int,*(void),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`)))))
=	O
find_list	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),int,int,int,int,int,int,*((*(struct`))->(int)),int,int))
->	O
list	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
;	O
dir_list	struct(*(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),struct(int,int,int,int))),int)
*	O
list	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
=	O
&	O
current_panel	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),struct(*(struct(int,*`,struct`,struct`)),int),int,int,array(char),array(char),*(struct(*(void),*(struct`),*(struct`))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char)))
->	O
dir	*(struct)
;	O
char	O
*	O
name	*(char)
;	O
for	O
(	O
i	array(int)
=	O
0	int
;	O
entry	*(struct(*(char),int,*(void),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`)))))
&&	O
i	array(int)
<	O
find_list	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),int,int,int,int,int,int,*((*(struct`))->(int)),int,int))
->	O
count	int
;	O
entry	*(struct(*(char),int,*(void),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`)))))
=	O
entry	*(struct(*(char),int,*(void),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`)))))
->	O
next	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`)))))
,	O
i	array(int)
++	O
)	O
{	O
const	O
char	O
*	O
filename	*(char)
;	O
if	O
(	O
!	O
entry	*(struct(*(char),int,*(void),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`)))))
->	O
text	*(char)
||	O
!	O
entry	*(struct(*(char),int,*(void),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`)))))
->	O
data	*(void)
)	O
continue	O
;	O
if	O
(	O
content_pattern	*(char)
)	O
filename	*(char)
=	O
strchr	(*(char),int)->(*(char))
(	O
entry	*(struct(*(char),int,*(void),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`)))))
->	O
text	*(char)
+	O
4	int
,	O
':'	O
)	O
+	O
1	int
;	O
else	O
filename	*(char)
=	O
entry	*(struct(*(char),int,*(void),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`)))))
->	O
text	*(char)
+	O
4	int
;	O
name	*(char)
=	O
make_fullname	(*(char),*(char))->(*(char))
(	O
entry	*(struct(*(char),int,*(void),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`)))))
->	O
data	*(void)
,	O
filename	*(char)
)	O
;	O
status	int
=	O
handle_path	(*(struct(*(struct(int,*`,struct`,struct`)),int)),*(char),*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))),int,*(int),*(int))->(int)
(	O
list	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
,	O
name	*(char)
,	O
&	O
st	*(struct)
,	O
next_free	int
,	O
&	O
link_to_dir	int
,	O
&	O
stale_link	int
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
{	O
g_free	(*(void))->(void)
(	O
name	*(char)
)	O
;	O
continue	O
;	O
}	O
if	O
(	O
status	int
==	O
-	O
1	int
)	O
{	O
g_free	(*(void))->(void)
(	O
name	*(char)
)	O
;	O
break	O
;	O
}	O
if	O
(	O
content_pattern	*(char)
&&	O
next_free	int
>	O
0	int
)	O
{	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
list	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
->	O
list	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
[	O
next_free	int
-	O
1	int
]	O
.	O
fname	*(char)
,	O
name	*(char)
)	O
==	O
0	int
)	O
{	O
g_free	(*(void))->(void)
(	O
name	*(char)
)	O
;	O
continue	O
;	O
}	O
}	O
if	O
(	O
!	O
next_free	int
)	O
panel_clean_dir	(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),struct(*(struct`),int),int,int,array(char),array(char),*(struct(*`,*`,*`)),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*`,*`)->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char))))->(void)
(	O
current_panel	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),struct(*(struct(int,*`,struct`,struct`)),int),int,int,array(char),array(char),*(struct(*(void),*(struct`),*(struct`))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char)))
)	O
;	O
list	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
->	O
list	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
[	O
next_free	int
]	O
.	O
fnamelen	int
=	O
strlen	(*(char))->(long)
(	O
name	*(char)
)	O
;	O
list	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
->	O
list	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
[	O
next_free	int
]	O
.	O
fname	*(char)
=	O
name	*(char)
;	O
list	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
->	O
list	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
[	O
next_free	int
]	O
.	O
f	float
.	O
marked	int
=	O
0	int
;	O
list	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
->	O
list	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
[	O
next_free	int
]	O
.	O
f	float
.	O
link_to_dir	int
=	O
link_to_dir	int
;	O
list	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
->	O
list	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
[	O
next_free	int
]	O
.	O
f	float
.	O
stale_link	int
=	O
stale_link	int
;	O
list	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
->	O
list	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
[	O
next_free	int
]	O
.	O
f	float
.	O
dir_size_computed	int
=	O
0	int
;	O
list	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
->	O
list	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
[	O
next_free	int
]	O
.	O
st	*(struct)
=	O
st	*(struct)
;	O
next_free	int
++	O
;	O
if	O
(	O
!	O
(	O
next_free	int
&	O
15	int
)	O
)	O
rotate_dash	()->(void)
(	O
)	O
;	O
}	O
if	O
(	O
next_free	int
)	O
{	O
current_panel	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),struct(*(struct(int,*`,struct`,struct`)),int),int,int,array(char),array(char),*(struct(*(void),*(struct`),*(struct`))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char)))
->	O
count	int
=	O
next_free	int
;	O
current_panel	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),struct(*(struct(int,*`,struct`,struct`)),int),int,int,array(char),array(char),*(struct(*(void),*(struct`),*(struct`))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char)))
->	O
is_panelized	int
=	O
1	int
;	O
if	O
(	O
start_dir	*(*(char))
[	O
0	int
]	O
==	O
PATH_SEP	char
)	O
{	O
strcpy	(*(char),*(char))->(*(char))
(	O
current_panel	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),struct(*(struct(int,*`,struct`,struct`)),int),int,int,array(char),array(char),*(struct(*(void),*(struct`),*(struct`))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char)))
->	O
cwd	short
,	O
PATH_SEP_STR	*(char)
)	O
;	O
chdir	(*(char))->(int)
(	O
PATH_SEP_STR	*(char)
)	O
;	O
}	O
}	O
}	O
kill_gui	()->(void)
(	O
)	O
;	O
do_search	(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))))->(int)
(	O
0	int
)	O
;	O
g_free	(*(void))->(void)
(	O
old_dir	*(char)
)	O
;	O
old_dir	*(char)
=	O
0	int
;	O
return	O
return_value	int
;	O
}	O
void	O
do_find	()->(void)
(	O
void	O
)	O
{	O
char	O
*	O
start_dir	*(*(char))
=	O
NULL	O
,	O
*	O
pattern	*(char)
=	O
NULL	O
,	O
*	O
content	*(*(char))
=	O
NULL	O
;	O
char	O
*	O
filename	*(char)
,	O
*	O
dirname	*(char)
;	O
int	O
v	*(void)
,	O
dir_and_file_set	int
;	O
regex_t	struct(*(struct),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int)
rx	struct(*(struct),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int)
;	O
for	O
(	O
r	*(struct)
=	O
&	O
rx	struct(*(struct),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int)
;	O
find_parameters	(*(*(char)),*(*(char)),*(*(char)))->(int)
(	O
&	O
start_dir	*(*(char))
,	O
&	O
pattern	*(char)
,	O
&	O
content	*(*(char))
)	O
;	O
r	*(struct)
=	O
&	O
rx	struct(*(struct),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int)
)	O
{	O
dirname	*(char)
=	O
filename	*(char)
=	O
NULL	O
;	O
is_start	int
=	O
0	int
;	O
v	*(void)
=	O
find_file	(*(char),*(char),*(char),*(*(char)),*(*(char)))->(int)
(	O
start_dir	*(*(char))
,	O
pattern	*(char)
,	O
content	*(*(char))
,	O
&	O
dirname	*(char)
,	O
&	O
filename	*(char)
)	O
;	O
g_free	(*(void))->(void)
(	O
start_dir	*(*(char))
)	O
;	O
g_free	(*(void))->(void)
(	O
pattern	*(char)
)	O
;	O
if	O
(	O
find_regex_flag	int
&&	O
r	*(struct)
)	O
regfree	(*(struct(*(struct),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int)))->(void)
(	O
r	*(struct)
)	O
;	O
if	O
(	O
v	*(void)
==	O
B_ENTER	int
)	O
{	O
if	O
(	O
dirname	*(char)
||	O
filename	*(char)
)	O
{	O
if	O
(	O
dirname	*(char)
)	O
{	O
do_cd	(*(char),enum(int,int))->(int)
(	O
dirname	*(char)
,	O
cd_exact	int
)	O
;	O
if	O
(	O
filename	*(char)
)	O
try_to_select	(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),struct(*(struct`),int),int,int,array(char),array(char),*(struct(*`,*`,*`)),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*`,*`)->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char))),*(char))->(void)
(	O
current_panel	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),struct(*(struct(int,*`,struct`,struct`)),int),int,int,array(char),array(char),*(struct(*(void),*(struct`),*(struct`))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char)))
,	O
filename	*(char)
+	O
(	O
content	*(*(char))
?	O
(	O
strchr	(*(char),int)->(*(char))
(	O
filename	*(char)
+	O
4	int
,	O
':'	O
)	O
-	O
filename	*(char)
+	O
1	int
)	O
:	O
4	int
)	O
)	O
;	O
}	O
else	O
if	O
(	O
filename	*(char)
)	O
do_cd	(*(char),enum(int,int))->(int)
(	O
filename	*(char)
,	O
cd_exact	int
)	O
;	O
select_item	(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),struct(*(struct`),int),int,int,array(char),array(char),*(struct(*`,*`,*`)),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*`,*`)->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char))))->(void)
(	O
current_panel	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),struct(*(struct(int,*`,struct`,struct`)),int),int,int,array(char),array(char),*(struct(*(void),*(struct`),*(struct`))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char)))
)	O
;	O
}	O
g_free	(*(void))->(void)
(	O
dirname	*(char)
)	O
;	O
g_free	(*(void))->(void)
(	O
filename	*(char)
)	O
;	O
break	O
;	O
}	O
g_free	(*(void))->(void)
(	O
content	*(*(char))
)	O
;	O
dir_and_file_set	int
=	O
dirname	*(char)
&&	O
filename	*(char)
;	O
g_free	(*(void))->(void)
(	O
dirname	*(char)
)	O
;	O
g_free	(*(void))->(void)
(	O
filename	*(char)
)	O
;	O
if	O
(	O
v	*(void)
==	O
B_CANCEL	int
)	O
break	O
;	O
if	O
(	O
v	*(void)
==	O
B_PANELIZE	int
)	O
{	O
if	O
(	O
dir_and_file_set	int
)	O
{	O
try_to_select	(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),struct(*(struct`),int),int,int,array(char),array(char),*(struct(*`,*`,*`)),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*`,*`)->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char))),*(char))->(void)
(	O
current_panel	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),struct(*(struct(int,*`,struct`,struct`)),int),int,int,array(char),array(char),*(struct(*(void),*(struct`),*(struct`))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char)))
,	O
NULL	O
)	O
;	O
panel_re_sort	(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),struct(*(struct`),int),int,int,array(char),array(char),*(struct(*`,*`,*`)),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*`,*`)->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char))))->(void)
(	O
current_panel	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),struct(*(struct(int,*`,struct`,struct`)),int),int,int,array(char),array(char),*(struct(*(void),*(struct`),*(struct`))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char)))
)	O
;	O
try_to_select	(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),struct(*(struct`),int),int,int,array(char),array(char),*(struct(*`,*`,*`)),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*`,*`)->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char))),*(char))->(void)
(	O
current_panel	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),struct(*(struct(int,*`,struct`,struct`)),int),int,int,array(char),array(char),*(struct(*(void),*(struct`),*(struct`))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char)))
,	O
NULL	O
)	O
;	O
}	O
break	O
;	O
}	O
}	O
}	O
