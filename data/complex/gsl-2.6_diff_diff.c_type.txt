int	O
gsl_diff_backward	(*(struct(*((double,*`)->(double)),*(void))),double,*(double),*(double))->(int)
(	O
const	O
gsl_function	struct(*((double,*(void))->(double)),*(void))
*	O
f	*(double)
,	O
double	O
x	double
,	O
double	O
*	O
result	*(double)
,	O
double	O
*	O
abserr	*(double)
)	O
{	O
int	O
i	int
,	O
k	int
;	O
double	O
h	double
=	O
GSL_SQRT_DBL_EPSILON	int
;	O
double	O
a	double
[	O
3	int
]	O
,	O
d	array(double)
[	O
3	int
]	O
,	O
a2	double
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
3	int
;	O
i	int
++	O
)	O
{	O
a	double
[	O
i	int
]	O
=	O
x	double
+	O
(	O
i	int
-	O
2.0	int
)	O
*	O
h	double
;	O
d	array(double)
[	O
i	int
]	O
=	O
GSL_FN_EVAL	O
(	O
f	*(double)
,	O
a	double
[	O
i	int
]	O
)	O
;	O
}	O
for	O
(	O
k	int
=	O
1	int
;	O
k	int
<	O
4	int
;	O
k	int
++	O
)	O
{	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
3	int
-	O
k	int
;	O
i	int
++	O
)	O
{	O
d	array(double)
[	O
i	int
]	O
=	O
(	O
d	array(double)
[	O
i	int
+	O
1	int
]	O
-	O
d	array(double)
[	O
i	int
]	O
)	O
/	O
(	O
a	double
[	O
i	int
+	O
k	int
]	O
-	O
a	double
[	O
i	int
]	O
)	O
;	O
}	O
}	O
a2	double
=	O
fabs	(double)->(double)
(	O
d	array(double)
[	O
0	int
]	O
+	O
d	array(double)
[	O
1	int
]	O
+	O
d	array(double)
[	O
2	int
]	O
)	O
;	O
if	O
(	O
a2	double
<	O
100.0	int
*	O
GSL_SQRT_DBL_EPSILON	int
)	O
{	O
a2	double
=	O
100.0	int
*	O
GSL_SQRT_DBL_EPSILON	int
;	O
}	O
h	double
=	O
sqrt	(double)->(double)
(	O
GSL_SQRT_DBL_EPSILON	int
/	O
(	O
2.0	int
*	O
a2	double
)	O
)	O
;	O
if	O
(	O
h	double
>	O
100.0	int
*	O
GSL_SQRT_DBL_EPSILON	int
)	O
{	O
h	double
=	O
100.0	int
*	O
GSL_SQRT_DBL_EPSILON	int
;	O
}	O
*	O
result	*(double)
=	O
(	O
GSL_FN_EVAL	O
(	O
f	*(double)
,	O
x	double
)	O
-	O
GSL_FN_EVAL	O
(	O
f	*(double)
,	O
x	double
-	O
h	double
)	O
)	O
/	O
h	double
;	O
*	O
abserr	*(double)
=	O
fabs	(double)->(double)
(	O
10.0	int
*	O
a2	double
*	O
h	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
int	O
gsl_diff_forward	(*(struct(*((double,*`)->(double)),*(void))),double,*(double),*(double))->(int)
(	O
const	O
gsl_function	struct(*((double,*(void))->(double)),*(void))
*	O
f	*(double)
,	O
double	O
x	double
,	O
double	O
*	O
result	*(double)
,	O
double	O
*	O
abserr	*(double)
)	O
{	O
int	O
i	int
,	O
k	int
;	O
double	O
h	double
=	O
GSL_SQRT_DBL_EPSILON	int
;	O
double	O
a	double
[	O
3	int
]	O
,	O
d	array(double)
[	O
3	int
]	O
,	O
a2	double
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
3	int
;	O
i	int
++	O
)	O
{	O
a	double
[	O
i	int
]	O
=	O
x	double
+	O
i	int
*	O
h	double
;	O
d	array(double)
[	O
i	int
]	O
=	O
GSL_FN_EVAL	O
(	O
f	*(double)
,	O
a	double
[	O
i	int
]	O
)	O
;	O
}	O
for	O
(	O
k	int
=	O
1	int
;	O
k	int
<	O
4	int
;	O
k	int
++	O
)	O
{	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
3	int
-	O
k	int
;	O
i	int
++	O
)	O
{	O
d	array(double)
[	O
i	int
]	O
=	O
(	O
d	array(double)
[	O
i	int
+	O
1	int
]	O
-	O
d	array(double)
[	O
i	int
]	O
)	O
/	O
(	O
a	double
[	O
i	int
+	O
k	int
]	O
-	O
a	double
[	O
i	int
]	O
)	O
;	O
}	O
}	O
a2	double
=	O
fabs	(double)->(double)
(	O
d	array(double)
[	O
0	int
]	O
+	O
d	array(double)
[	O
1	int
]	O
+	O
d	array(double)
[	O
2	int
]	O
)	O
;	O
if	O
(	O
a2	double
<	O
100.0	int
*	O
GSL_SQRT_DBL_EPSILON	int
)	O
{	O
a2	double
=	O
100.0	int
*	O
GSL_SQRT_DBL_EPSILON	int
;	O
}	O
h	double
=	O
sqrt	(double)->(double)
(	O
GSL_SQRT_DBL_EPSILON	int
/	O
(	O
2.0	int
*	O
a2	double
)	O
)	O
;	O
if	O
(	O
h	double
>	O
100.0	int
*	O
GSL_SQRT_DBL_EPSILON	int
)	O
{	O
h	double
=	O
100.0	int
*	O
GSL_SQRT_DBL_EPSILON	int
;	O
}	O
*	O
result	*(double)
=	O
(	O
GSL_FN_EVAL	O
(	O
f	*(double)
,	O
x	double
+	O
h	double
)	O
-	O
GSL_FN_EVAL	O
(	O
f	*(double)
,	O
x	double
)	O
)	O
/	O
h	double
;	O
*	O
abserr	*(double)
=	O
fabs	(double)->(double)
(	O
10.0	int
*	O
a2	double
*	O
h	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
int	O
gsl_diff_central	(*(struct(*((double,*`)->(double)),*(void))),double,*(double),*(double))->(int)
(	O
const	O
gsl_function	struct(*((double,*(void))->(double)),*(void))
*	O
f	*(double)
,	O
double	O
x	double
,	O
double	O
*	O
result	*(double)
,	O
double	O
*	O
abserr	*(double)
)	O
{	O
int	O
i	int
,	O
k	int
;	O
double	O
h	double
=	O
GSL_SQRT_DBL_EPSILON	int
;	O
double	O
a	double
[	O
4	int
]	O
,	O
d	array(double)
[	O
4	int
]	O
,	O
a3	double
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
4	int
;	O
i	int
++	O
)	O
{	O
a	double
[	O
i	int
]	O
=	O
x	double
+	O
(	O
i	int
-	O
2.0	int
)	O
*	O
h	double
;	O
d	array(double)
[	O
i	int
]	O
=	O
GSL_FN_EVAL	O
(	O
f	*(double)
,	O
a	double
[	O
i	int
]	O
)	O
;	O
}	O
for	O
(	O
k	int
=	O
1	int
;	O
k	int
<	O
5	int
;	O
k	int
++	O
)	O
{	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
4	int
-	O
k	int
;	O
i	int
++	O
)	O
{	O
d	array(double)
[	O
i	int
]	O
=	O
(	O
d	array(double)
[	O
i	int
+	O
1	int
]	O
-	O
d	array(double)
[	O
i	int
]	O
)	O
/	O
(	O
a	double
[	O
i	int
+	O
k	int
]	O
-	O
a	double
[	O
i	int
]	O
)	O
;	O
}	O
}	O
a3	double
=	O
fabs	(double)->(double)
(	O
d	array(double)
[	O
0	int
]	O
+	O
d	array(double)
[	O
1	int
]	O
+	O
d	array(double)
[	O
2	int
]	O
+	O
d	array(double)
[	O
3	int
]	O
)	O
;	O
if	O
(	O
a3	double
<	O
100.0	int
*	O
GSL_SQRT_DBL_EPSILON	int
)	O
{	O
a3	double
=	O
100.0	int
*	O
GSL_SQRT_DBL_EPSILON	int
;	O
}	O
h	double
=	O
pow	(double,double)->(double)
(	O
GSL_SQRT_DBL_EPSILON	int
/	O
(	O
2.0	int
*	O
a3	double
)	O
,	O
1.0	int
/	O
3.0	int
)	O
;	O
if	O
(	O
h	double
>	O
100.0	int
*	O
GSL_SQRT_DBL_EPSILON	int
)	O
{	O
h	double
=	O
100.0	int
*	O
GSL_SQRT_DBL_EPSILON	int
;	O
}	O
*	O
result	*(double)
=	O
(	O
GSL_FN_EVAL	O
(	O
f	*(double)
,	O
x	double
+	O
h	double
)	O
-	O
GSL_FN_EVAL	O
(	O
f	*(double)
,	O
x	double
-	O
h	double
)	O
)	O
/	O
(	O
2.0	int
*	O
h	double
)	O
;	O
*	O
abserr	*(double)
=	O
fabs	(double)->(double)
(	O
100.0	int
*	O
a3	double
*	O
h	double
*	O
h	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
