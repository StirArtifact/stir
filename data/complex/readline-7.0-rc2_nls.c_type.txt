static	O
int	O
utf8locale	(*(char))->(int)
PARAMS	O
(	O
(	O
char	O
*	O
)	O
)	O
;	O
static	O
char	O
*	O
find_codeset	(*(char),*(long))->(*(char))
PARAMS	O
(	O
(	O
char	O
*	O
,	O
size_t	long
*	O
)	O
)	O
;	O
static	O
char	O
*	O
_rl_get_locale_var	(*(char))->(*(char))
PARAMS	O
(	O
(	O
const	O
char	O
*	O
)	O
)	O
;	O
static	O
char	O
*	O
_rl_get_locale_var	(*(char))->(*(char))
(	O
v	*(char)
)	O
const	O
char	O
*	O
v	*(char)
;	O
{	O
char	O
*	O
lspec	*(char)
;	O
lspec	*(char)
=	O
sh_get_env_value	(*(char))->(*(char))
(	O
"LC_ALL"	*(char)
)	O
;	O
if	O
(	O
lspec	*(char)
==	O
0	int
||	O
*	O
lspec	*(char)
==	O
0	int
)	O
lspec	*(char)
=	O
sh_get_env_value	(*(char))->(*(char))
(	O
v	*(char)
)	O
;	O
if	O
(	O
lspec	*(char)
==	O
0	int
||	O
*	O
lspec	*(char)
==	O
0	int
)	O
lspec	*(char)
=	O
sh_get_env_value	(*(char))->(*(char))
(	O
"LANG"	*(char)
)	O
;	O
return	O
lspec	*(char)
;	O
}	O
static	O
int	O
utf8locale	(*(char))->(int)
(	O
lspec	*(char)
)	O
char	O
*	O
lspec	*(char)
;	O
{	O
char	O
*	O
cp	*(char)
;	O
size_t	long
len	long
;	O
cp	*(char)
=	O
nl_langinfo	(int)->(*(char))
(	O
CODESET	int
)	O
;	O
return	O
(	O
STREQ	O
(	O
cp	*(char)
,	O
"UTF-8"	*(char)
)	O
||	O
STREQ	O
(	O
cp	*(char)
,	O
"utf8"	*(char)
)	O
)	O
;	O
}	O
int	O
_rl_init_eightbit	()->(int)
(	O
)	O
{	O
char	O
*	O
lspec	*(char)
,	O
*	O
t	*(char)
;	O
lspec	*(char)
=	O
_rl_get_locale_var	(*(char))->(*(char))
(	O
"LC_CTYPE"	*(char)
)	O
;	O
if	O
(	O
lspec	*(char)
==	O
0	int
||	O
*	O
lspec	*(char)
==	O
0	int
)	O
lspec	*(char)
=	O
setlocale	(int,*(char))->(*(char))
(	O
LC_CTYPE	O
,	O
(	O
char	O
*	O
)	O
NULL	O
)	O
;	O
if	O
(	O
lspec	*(char)
==	O
0	int
)	O
lspec	*(char)
=	O
""	*(char)
;	O
t	*(char)
=	O
setlocale	(int,*(char))->(*(char))
(	O
LC_CTYPE	O
,	O
lspec	*(char)
)	O
;	O
if	O
(	O
t	*(char)
&&	O
*	O
t	*(char)
)	O
_rl_utf8locale	int
=	O
utf8locale	(*(char))->(int)
(	O
t	*(char)
)	O
;	O
if	O
(	O
t	*(char)
&&	O
*	O
t	*(char)
&&	O
(	O
t	*(char)
[	O
0	int
]	O
!=	O
'C'	O
||	O
t	*(char)
[	O
1	int
]	O
)	O
&&	O
(	O
STREQ	O
(	O
t	*(char)
,	O
"POSIX"	*(char)
)	O
==	O
0	int
)	O
)	O
{	O
_rl_meta_flag	int
=	O
1	int
;	O
_rl_convert_meta_chars_to_ascii	int
=	O
0	int
;	O
_rl_output_meta_chars	int
=	O
1	int
;	O
return	O
(	O
1	int
)	O
;	O
}	O
else	O
return	O
(	O
0	int
)	O
;	O
}	O
static	O
char	O
*	O
find_codeset	(*(char),*(long))->(*(char))
(	O
name	*(char)
,	O
lenp	*(long)
)	O
char	O
*	O
name	*(char)
;	O
size_t	long
*	O
lenp	*(long)
;	O
{	O
char	O
*	O
cp	*(char)
,	O
*	O
language	*(char)
,	O
*	O
result	*(char)
;	O
cp	*(char)
=	O
language	*(char)
=	O
name	*(char)
;	O
result	*(char)
=	O
(	O
char	O
*	O
)	O
0	int
;	O
while	O
(	O
*	O
cp	*(char)
&&	O
*	O
cp	*(char)
!=	O
'_'	O
&&	O
*	O
cp	*(char)
!=	O
'@'	O
&&	O
*	O
cp	*(char)
!=	O
'+'	O
&&	O
*	O
cp	*(char)
!=	O
','	O
)	O
cp	*(char)
++	O
;	O
if	O
(	O
language	*(char)
==	O
cp	*(char)
)	O
{	O
*	O
lenp	*(long)
=	O
strlen	(*(char))->(long)
(	O
language	*(char)
)	O
;	O
result	*(char)
=	O
language	*(char)
;	O
}	O
else	O
{	O
if	O
(	O
*	O
cp	*(char)
==	O
'_'	O
)	O
do	O
++	O
cp	*(char)
;	O
while	O
(	O
*	O
cp	*(char)
&&	O
*	O
cp	*(char)
!=	O
'.'	O
&&	O
*	O
cp	*(char)
!=	O
'@'	O
&&	O
*	O
cp	*(char)
!=	O
'+'	O
&&	O
*	O
cp	*(char)
!=	O
','	O
&&	O
*	O
cp	*(char)
!=	O
'_'	O
)	O
;	O
result	*(char)
=	O
cp	*(char)
;	O
if	O
(	O
*	O
cp	*(char)
==	O
'.'	O
)	O
do	O
++	O
cp	*(char)
;	O
while	O
(	O
*	O
cp	*(char)
&&	O
*	O
cp	*(char)
!=	O
'@'	O
)	O
;	O
if	O
(	O
cp	*(char)
-	O
result	*(char)
>	O
2	int
)	O
{	O
result	*(char)
++	O
;	O
*	O
lenp	*(long)
=	O
cp	*(char)
-	O
result	*(char)
;	O
}	O
else	O
{	O
*	O
lenp	*(long)
=	O
strlen	(*(char))->(long)
(	O
language	*(char)
)	O
;	O
result	*(char)
=	O
language	*(char)
;	O
}	O
}	O
return	O
result	*(char)
;	O
}	O
