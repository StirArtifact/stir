struct	O
dico_pcre_flag	struct(int,int)
{	O
int	O
c	int
;	O
int	O
flag	int
;	O
}	O
;	O
static	O
struct	O
dico_pcre_flag	struct(int,int)
flagtab	array(struct(int,int))
[	O
]	O
=	O
{	O
{	O
'a'	O
,	O
PCRE_ANCHORED	int
}	O
,	O
{	O
'e'	O
,	O
PCRE_EXTENDED	int
}	O
,	O
{	O
'i'	O
,	O
PCRE_CASELESS	int
}	O
,	O
{	O
'G'	O
,	O
PCRE_UNGREEDY	int
}	O
,	O
{	O
0	int
}	O
,	O
}	O
;	O
static	O
int	O
pcre_flag	(int,*(int))->(int)
(	O
int	O
c	int
,	O
int	O
*	O
pflags	*(int)
)	O
{	O
struct	O
dico_pcre_flag	struct(int,int)
*	O
p	*(char)
;	O
for	O
(	O
p	*(char)
=	O
flagtab	array(struct(int,int))
;	O
p	*(char)
->	O
c	int
;	O
p	*(char)
++	O
)	O
{	O
if	O
(	O
p	*(char)
->	O
c	int
==	O
c	int
)	O
{	O
*	O
pflags	*(int)
|=	O
p	*(char)
->	O
flag	int
;	O
return	O
0	int
;	O
}	O
else	O
if	O
(	O
p	*(char)
->	O
c	int
==	O
tolower	(int)->(int)
(	O
c	int
)	O
||	O
p	*(char)
->	O
c	int
==	O
toupper	(int)->(int)
(	O
c	int
)	O
)	O
{	O
*	O
pflags	*(int)
&=	O
~	O
p	*(char)
->	O
flag	int
;	O
return	O
0	int
;	O
}	O
}	O
return	O
1	int
;	O
}	O
static	O
pcre	struct
*	O
compile_pattern	(*(char))->(*(struct))
(	O
const	O
char	O
*	O
pattern	*(char)
)	O
{	O
int	O
cflags	int
=	O
PCRE_UTF8	int
|	O
PCRE_NEWLINE_ANY	int
;	O
const	O
char	O
*	O
error	*(char)
;	O
int	O
error_offset	int
;	O
char	O
*	O
tmp	*(char)
=	O
NULL	O
;	O
pcre	struct
*	O
pre	*(struct)
;	O
if	O
(	O
pattern	*(char)
[	O
0	int
]	O
==	O
'/'	O
)	O
{	O
size_t	long
len	int
;	O
char	O
*	O
p	*(char)
;	O
pattern	*(char)
++	O
;	O
p	*(char)
=	O
strrchr	(*(char),int)->(*(char))
(	O
pattern	*(char)
,	O
'/'	O
)	O
;	O
if	O
(	O
!	O
p	*(char)
)	O
{	O
dico_log	(int,int,*(char))->(void)
(	O
L_ERR	int
,	O
0	int
,	O
_	O
(	O
"PCRE missing terminating /: %s"	*(char)
)	O
,	O
pattern	*(char)
-	O
1	int
)	O
;	O
return	O
NULL	O
;	O
}	O
len	int
=	O
p	*(char)
-	O
pattern	*(char)
;	O
while	O
(	O
*	O
++	O
p	*(char)
)	O
{	O
if	O
(	O
pcre_flag	(int,*(int))->(int)
(	O
*	O
p	*(char)
,	O
&	O
cflags	int
)	O
)	O
{	O
dico_log	(int,int,*(char))->(void)
(	O
L_ERR	int
,	O
0	int
,	O
_	O
(	O
"PCRE error: invalid flag %c"	*(char)
)	O
,	O
*	O
p	*(char)
)	O
;	O
return	O
NULL	O
;	O
}	O
}	O
tmp	*(char)
=	O
malloc	(long)->(*(void))
(	O
len	int
+	O
1	int
)	O
;	O
if	O
(	O
!	O
tmp	*(char)
)	O
return	O
NULL	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
tmp	*(char)
,	O
pattern	*(char)
,	O
len	int
)	O
;	O
tmp	*(char)
[	O
len	int
]	O
=	O
0	int
;	O
pattern	*(char)
=	O
tmp	*(char)
;	O
}	O
pre	*(struct)
=	O
pcre_compile	(*(char),int,*(*(char)),*(int),*(char))->(*(struct))
(	O
pattern	*(char)
,	O
cflags	int
,	O
&	O
error	*(char)
,	O
&	O
error_offset	int
,	O
0	int
)	O
;	O
if	O
(	O
!	O
pre	*(struct)
)	O
{	O
dico_log	(int,int,*(char))->(void)
(	O
L_ERR	int
,	O
0	int
,	O
_	O
(	O
"pcre_compile(\"%s\") failed at offset %d: %s"	*(char)
)	O
,	O
pattern	*(char)
,	O
error_offset	int
,	O
error	*(char)
)	O
;	O
}	O
free	(*(void))->(void)
(	O
tmp	*(char)
)	O
;	O
return	O
pre	*(struct)
;	O
}	O
static	O
int	O
pcre_sel	(int,*(struct(*(char),*(void),*(struct(*`,*`,*`,*`,int,*`)),int)),*(char))->(int)
(	O
int	O
cmd	int
,	O
dico_key_t	*(struct)
key	*(char)
,	O
const	O
char	O
*	O
dict_word	*(char)
)	O
{	O
int	O
rc	int
=	O
0	int
;	O
char	O
const	O
*	O
word	*(char)
=	O
key	*(char)
->	O
word	*(char)
;	O
pcre	struct
*	O
pre	*(struct)
=	O
key	*(char)
->	O
call_data	*(void)
;	O
switch	O
(	O
cmd	int
)	O
{	O
case	O
DICO_SELECT_BEGIN	int
:	O
pre	*(struct)
=	O
compile_pattern	(*(char))->(*(struct))
(	O
word	*(char)
)	O
;	O
if	O
(	O
!	O
pre	*(struct)
)	O
return	O
1	int
;	O
key	*(char)
->	O
call_data	*(void)
=	O
pre	*(struct)
;	O
break	O
;	O
case	O
DICO_SELECT_RUN	int
:	O
rc	int
=	O
pcre_exec	(*(struct),*(struct(long,*(void),long,*(void),*(char),long,*(*(char)),*(void))),*(char),int,int,int,*(int),int)->(int)
(	O
pre	*(struct)
,	O
0	int
,	O
dict_word	*(char)
,	O
strlen	(*(char))->(long)
(	O
dict_word	*(char)
)	O
,	O
0	int
,	O
0	int
,	O
NULL	O
,	O
0	int
)	O
>=	O
0	int
;	O
break	O
;	O
case	O
DICO_SELECT_END	int
:	O
pcre_free	*((*(void))->(void))
(	O
pre	*(struct)
)	O
;	O
break	O
;	O
}	O
return	O
rc	int
;	O
}	O
static	O
struct	O
dico_strategy	struct(*(char),*(char),*((int,*(struct),*(char))->(int)),*(void),int,*(struct))
pcre_strat	struct(*(char),*(char),*((int,*(struct(*`,*`,*`,int)),*(char))->(int)),*(void),int,*(struct))
=	O
{	O
"pcre"	*(char)
,	O
"Match using Perl-compatible regular expressions"	*(char)
,	O
pcre_sel	(int,*(struct(*(char),*(void),*(struct(*`,*`,*`,*`,int,*`)),int)),*(char))->(int)
}	O
;	O
static	O
int	O
pcre_init	(int,*(*(char)))->(int)
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	*(*(char))
)	O
{	O
dico_strategy_add	(*(struct(*(char),*(char),*((int,*`,*`)->(int)),*(void),int,*(struct))))->(int)
(	O
&	O
pcre_strat	struct(*(char),*(char),*((int,*(struct(*`,*`,*`,int)),*(char))->(int)),*(void),int,*(struct))
)	O
;	O
return	O
0	int
;	O
}	O
struct	O
dico_database_module	struct(int,int,*((int,*(*(char)))->(int)),*((*(char),int,*(*(char)))->(*(struct))),*((*(struct))->(int)),*((*(struct))->(int)),*((*(struct))->(int)),*((*(struct))->(*(char))),*((*(struct))->(*(char))),*((*(struct),array(*(struct)))->(int)),*((*(struct),*(struct),*(char))->(*(struct))),*((*(struct),*(char))->(*(struct))),*((*(struct),long,*(struct))->(int)),*((*(struct))->(long)),*((*(struct))->(long)),*((*(struct))->(void)),*((*(struct),*(struct))->(int)),*((int,*(*(char)))->(int)),*((*(struct))->(*(char))),*((*(char),int,*(*(char)),*(void))->(*(struct))),*((*(struct))->(int)),*((*(struct),long)->(*(struct))))
DICO_EXPORT	O
(	O
pcre	struct
,	O
module	O
)	O
=	O
{	O
DICO_MODULE_VERSION	int
,	O
DICO_CAPA_NODB	int
,	O
pcre_init	(int,*(*(char)))->(int)
,	O
}	O
;	O
