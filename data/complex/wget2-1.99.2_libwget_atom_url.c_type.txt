struct	O
_atom_context	struct(*(struct))
{	O
wget_vector	struct
*	O
urls	*(*(struct))
;	O
}	O
;	O
static	O
void	O
_atom_get_url	(*(void),int,*(char),*(char),*(char),long,long)->(void)
(	O
void	O
*	O
context	*(void)
,	O
int	O
flags	int
,	O
const	O
char	O
*	O
dir	array(char)
,	O
const	O
char	O
*	O
attr	array(char)
,	O
const	O
char	O
*	O
val	*(char)
,	O
size_t	long
len	long
,	O
size_t	long
pos	int
WGET_GCC_UNUSED	O
)	O
{	O
struct	O
_atom_context	struct(*(struct))
*	O
ctx	*(void)
=	O
context	*(void)
;	O
wget_string	struct(*(char),long)
*	O
url	*(char)
;	O
if	O
(	O
!	O
val	*(char)
||	O
!	O
len	long
)	O
return	O
;	O
if	O
(	O
(	O
flags	int
&	O
XML_FLG_ATTRIBUTE	O
)	O
)	O
{	O
if	O
(	O
!	O
wget_strcasecmp_ascii	(*(char),*(char))->(int)
(	O
attr	array(char)
,	O
"href"	*(char)
)	O
||	O
!	O
wget_strcasecmp_ascii	(*(char),*(char))->(int)
(	O
attr	array(char)
,	O
"uri"	*(char)
)	O
||	O
!	O
wget_strcasecmp_ascii	(*(char),*(char))->(int)
(	O
attr	array(char)
,	O
"src"	*(char)
)	O
||	O
!	O
wget_strcasecmp_ascii	(*(char),*(char))->(int)
(	O
attr	array(char)
,	O
"scheme"	*(char)
)	O
||	O
!	O
wget_strcasecmp_ascii	(*(char),*(char))->(int)
(	O
attr	array(char)
,	O
"xmlns"	*(char)
)	O
||	O
!	O
wget_strncasecmp_ascii	(*(char),*(char),long)->(int)
(	O
attr	array(char)
,	O
"xmlns:"	*(char)
,	O
6	int
)	O
)	O
{	O
for	O
(	O
;	O
len	long
&&	O
c_isspace	(int)->(bool)
(	O
*	O
val	*(char)
)	O
;	O
val	*(char)
++	O
,	O
len	long
--	O
)	O
;	O
for	O
(	O
;	O
len	long
&&	O
c_isspace	(int)->(bool)
(	O
val	*(char)
[	O
len	long
-	O
1	int
]	O
)	O
;	O
len	long
--	O
)	O
;	O
if	O
(	O
!	O
(	O
url	*(char)
=	O
wget_malloc	(long)->(*(void))
(	O
sizeof	O
(	O
wget_string	struct(*(char),long)
)	O
)	O
)	O
)	O
return	O
;	O
url	*(char)
->	O
p	*(char)
=	O
val	*(char)
;	O
url	*(char)
->	O
len	long
=	O
len	long
;	O
if	O
(	O
!	O
ctx	*(void)
->	O
urls	*(*(struct))
)	O
ctx	*(void)
->	O
urls	*(*(struct))
=	O
wget_vector_create	(int,*((*(void),*(void))->(int)))->(*(struct))
(	O
32	int
,	O
NULL	O
)	O
;	O
wget_vector_add	(*(struct),*(void))->(int)
(	O
ctx	*(void)
->	O
urls	*(*(struct))
,	O
url	*(char)
)	O
;	O
}	O
}	O
else	O
if	O
(	O
(	O
flags	int
&	O
XML_FLG_CONTENT	O
)	O
)	O
{	O
const	O
char	O
*	O
elem	*(void)
=	O
strrchr	(*(char),int)->(*(char))
(	O
dir	array(char)
,	O
'/'	O
)	O
;	O
if	O
(	O
elem	*(void)
)	O
{	O
elem	*(void)
++	O
;	O
if	O
(	O
!	O
wget_strcasecmp_ascii	(*(char),*(char))->(int)
(	O
elem	*(void)
,	O
"icon"	*(char)
)	O
||	O
!	O
wget_strcasecmp_ascii	(*(char),*(char))->(int)
(	O
elem	*(void)
,	O
"id"	*(char)
)	O
||	O
!	O
wget_strcasecmp_ascii	(*(char),*(char))->(int)
(	O
elem	*(void)
,	O
"logo"	*(char)
)	O
)	O
{	O
for	O
(	O
;	O
len	long
&&	O
c_isspace	(int)->(bool)
(	O
*	O
val	*(char)
)	O
;	O
val	*(char)
++	O
,	O
len	long
--	O
)	O
;	O
for	O
(	O
;	O
len	long
&&	O
c_isspace	(int)->(bool)
(	O
val	*(char)
[	O
len	long
-	O
1	int
]	O
)	O
;	O
len	long
--	O
)	O
;	O
if	O
(	O
!	O
(	O
url	*(char)
=	O
wget_malloc	(long)->(*(void))
(	O
sizeof	O
(	O
wget_string	struct(*(char),long)
)	O
)	O
)	O
)	O
return	O
;	O
url	*(char)
->	O
p	*(char)
=	O
val	*(char)
;	O
url	*(char)
->	O
len	long
=	O
len	long
;	O
if	O
(	O
!	O
ctx	*(void)
->	O
urls	*(*(struct))
)	O
ctx	*(void)
->	O
urls	*(*(struct))
=	O
wget_vector_create	(int,*((*(void),*(void))->(int)))->(*(struct))
(	O
32	int
,	O
NULL	O
)	O
;	O
wget_vector_add	(*(struct),*(void))->(int)
(	O
ctx	*(void)
->	O
urls	*(*(struct))
,	O
url	*(char)
)	O
;	O
}	O
}	O
}	O
}	O
void	O
wget_atom_get_urls_inline	(*(char),*(*(struct)))->(void)
(	O
const	O
char	O
*	O
atom	*(char)
,	O
wget_vector	struct
*	O
*	O
urls	*(*(struct))
)	O
{	O
struct	O
_atom_context	struct(*(struct))
context	*(void)
=	O
{	O
.	O
urls	*(*(struct))
=	O
NULL	O
}	O
;	O
wget_xml_parse_buffer	(*(char),*((*(void),int,*(char),*(char),*(char),long,long)->(void)),*(void),int)->(int)
(	O
atom	*(char)
,	O
_atom_get_url	(*(void),int,*(char),*(char),*(char),long,long)->(void)
,	O
&	O
context	*(void)
,	O
XML_HINT_REMOVE_EMPTY_CONTENT	O
)	O
;	O
*	O
urls	*(*(struct))
=	O
context	*(void)
.	O
urls	*(*(struct))
;	O
}	O
