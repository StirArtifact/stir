char	O
*	O
g_program	*(char)
;	O
void	O
usage	()->(void)
(	O
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s file1 [file2 [...]]\n"	*(char)
,	O
g_program	*(char)
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
off64_t	long
file_length	(int)->(long)
(	O
fd	int
)	O
int	O
fd	int
;	O
{	O
off64_t	long
current	long
,	O
length	long
;	O
current	long
=	O
lseek64	(int,long,int)->(long)
(	O
fd	int
,	O
0	int
,	O
SEEK_CUR	int
)	O
;	O
length	long
=	O
lseek64	(int,long,int)->(long)
(	O
fd	int
,	O
0	int
,	O
SEEK_END	int
)	O
;	O
lseek64	(int,long,int)->(long)
(	O
fd	int
,	O
current	long
,	O
SEEK_SET	int
)	O
;	O
return	O
length	long
;	O
}	O
int	O
wipe	(*(char))->(int)
(	O
file	*(char)
)	O
char	O
*	O
file	*(char)
;	O
{	O
int	O
fd	int
;	O
unsigned	O
char	O
*	O
buf	*(char)
;	O
off64_t	long
len	long
,	O
i	long
;	O
ssize_t	long
j	long
,	O
bytes_to_write	long
;	O
fd	int
=	O
open64	(*(char),int)->(int)
(	O
file	*(char)
,	O
O_RDWR	int
|	O
O_BINARY	int
)	O
;	O
if	O
(	O
fd	int
==	O
-	O
1	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s: can't open file '%s'.\n"	*(char)
,	O
g_program	*(char)
,	O
file	*(char)
)	O
;	O
return	O
1	int
;	O
}	O
len	long
=	O
file_length	(int)->(long)
(	O
fd	int
)	O
;	O
if	O
(	O
len	long
==	O
0	int
)	O
return	O
0	int
;	O
buf	*(char)
=	O
(	O
unsigned	O
char	O
*	O
)	O
malloc	(long)->(*(void))
(	O
WIPE_BUFFER_SIZE	O
)	O
;	O
if	O
(	O
buf	*(char)
==	O
NULL	O
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s: virtual memory exhausted.\n"	*(char)
,	O
g_program	*(char)
)	O
;	O
return	O
1	int
;	O
}	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
len	long
;	O
i	long
+=	O
WIPE_BUFFER_SIZE	O
)	O
{	O
bytes_to_write	long
=	O
min	O
(	O
len	long
-	O
i	long
,	O
WIPE_BUFFER_SIZE	O
)	O
;	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
bytes_to_write	long
;	O
j	long
++	O
)	O
buf	*(char)
[	O
j	long
]	O
=	O
rand	()->(int)
(	O
)	O
%	O
0xFF	int
;	O
if	O
(	O
write	*((*(void),*(char),long)->(long))
(	O
fd	int
,	O
buf	*(char)
,	O
bytes_to_write	long
)	O
!=	O
bytes_to_write	long
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s: can't write to file %s.\n"	*(char)
,	O
g_program	*(char)
,	O
file	*(char)
)	O
;	O
return	O
1	int
;	O
}	O
}	O
close	*((*(void))->(int))
(	O
fd	int
)	O
;	O
sync	()->(void)
(	O
)	O
;	O
return	O
0	int
;	O
}	O
int	O
main	(int,array(*(char)))->(int)
(	O
argc	int
,	O
argv	array(*(char))
)	O
int	O
argc	int
;	O
char	O
*	O
argv	array(*(char))
[	O
]	O
;	O
{	O
int	O
i	long
,	O
errors	int
=	O
0	int
;	O
g_program	*(char)
=	O
argv	array(*(char))
[	O
0	int
]	O
;	O
if	O
(	O
argc	int
<	O
2	int
)	O
usage	()->(void)
(	O
)	O
;	O
srand	(int)->(void)
(	O
time	struct(long,long)
(	O
NULL	O
)	O
)	O
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<	O
argc	int
;	O
i	long
++	O
)	O
errors	int
+=	O
wipe	(*(char))->(int)
(	O
argv	array(*(char))
[	O
i	long
]	O
)	O
;	O
return	O
(	O
errors	int
!=	O
0	int
)	O
;	O
}	O
