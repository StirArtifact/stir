struct	O
rec_db_s	struct(long,*(struct),*(struct))
{	O
size_t	long
size	*((*(struct))->(long))
;	O
gl_list_t	*(struct)
rset_list	*(struct)
;	O
rec_aggregate_reg_t	*(struct)
aggregates	*(struct)
;	O
}	O
;	O
static	O
bool	bool
rec_db_rset_equals_fn	(*(void),*(void))->(bool)
(	O
const	O
void	O
*	O
elt1	*(void)
,	O
const	O
void	O
*	O
elt2	*(void)
)	O
;	O
static	O
void	O
rec_db_rset_dispose_fn	(*(void))->(void)
(	O
const	O
void	O
*	O
elt	*(void)
)	O
;	O
static	O
rec_record_t	*(struct)
rec_db_process_fex	(*(struct(long,*(struct),*(struct))),*(struct),*(struct),*(struct))->(*(struct))
(	O
rec_db_t	*(struct)
db	*(struct)
,	O
rec_rset_t	*(struct)
rset	*(struct)
,	O
rec_record_t	*(struct)
record	*(struct)
,	O
rec_fex_t	*(struct)
fex	*(struct)
)	O
;	O
static	O
bool	bool
rec_db_record_selected_p	(long,*(struct),*(long),*(struct),*(char),bool)->(bool)
(	O
size_t	long
num_rec	long
,	O
rec_record_t	*(struct)
record	*(struct)
,	O
size_t	long
*	O
index	(*(char),int)->(*(char))
,	O
rec_sex_t	*(struct)
sex	*(struct)
,	O
const	O
char	O
*	O
fast_string	*(char)
,	O
bool	bool
case_insensitive_p	bool
)	O
;	O
static	O
void	O
rec_db_add_random_indexes	(*(*(long)),long,long)->(void)
(	O
size_t	long
*	O
*	O
index	(*(char),int)->(*(char))
,	O
size_t	long
num	*(int)
,	O
size_t	long
limit	long
)	O
;	O
static	O
bool	bool
rec_db_index_p	(*(long),long)->(bool)
(	O
size_t	long
*	O
index	(*(char),int)->(*(char))
,	O
size_t	long
num	*(int)
)	O
;	O
static	O
bool	bool
rec_db_set_act_rename	(*(struct),*(struct),*(struct),bool,*(char))->(bool)
(	O
rec_rset_t	*(struct)
rset	*(struct)
,	O
rec_record_t	*(struct)
record	*(struct)
,	O
rec_fex_t	*(struct)
fex	*(struct)
,	O
bool	bool
rename_descriptor	bool
,	O
const	O
char	O
*	O
arg	*(char)
)	O
;	O
static	O
bool	bool
rec_db_set_act_set	(*(struct),*(struct),*(struct),bool,*(char))->(bool)
(	O
rec_rset_t	*(struct)
rset	*(struct)
,	O
rec_record_t	*(struct)
record	*(struct)
,	O
rec_fex_t	*(struct)
fex	*(struct)
,	O
bool	bool
xxx	bool
,	O
const	O
char	O
*	O
arg	*(char)
)	O
;	O
static	O
bool	bool
rec_db_set_act_add	(*(struct),*(struct),*(struct),*(char))->(bool)
(	O
rec_rset_t	*(struct)
rset	*(struct)
,	O
rec_record_t	*(struct)
record	*(struct)
,	O
rec_fex_t	*(struct)
fex	*(struct)
,	O
const	O
char	O
*	O
arg	*(char)
)	O
;	O
static	O
bool	bool
rec_db_set_act_delete	(*(struct),*(struct),*(struct),bool)->(bool)
(	O
rec_rset_t	*(struct)
rset	*(struct)
,	O
rec_record_t	*(struct)
record	*(struct)
,	O
rec_fex_t	*(struct)
fex	*(struct)
,	O
bool	bool
comment_out	bool
)	O
;	O
static	O
rec_rset_t	*(struct)
rec_db_join	(*(struct(long,*(struct),*(struct))),*(char),*(char),*(char))->(*(struct))
(	O
rec_db_t	*(struct)
db	*(struct)
,	O
const	O
char	O
*	O
type1	*(struct)
,	O
const	O
char	O
*	O
field	*(struct)
,	O
const	O
char	O
*	O
type2	int
)	O
;	O
static	O
rec_record_t	*(struct)
rec_db_merge_records	(*(struct),*(struct),*(char))->(*(struct))
(	O
rec_record_t	*(struct)
record1	*(struct)
,	O
rec_record_t	*(struct)
record2	*(struct)
,	O
const	O
char	O
*	O
prefix	*(char)
)	O
;	O
rec_db_t	*(struct)
rec_db_new	()->(*(struct))
(	O
void	O
)	O
{	O
rec_db_t	*(struct)
new	*(struct(long,*(struct),*(struct)))
;	O
new	*(struct(long,*(struct),*(struct)))
=	O
malloc	(long)->(*(void))
(	O
sizeof	O
(	O
struct	O
rec_db_s	struct(long,*(struct),*(struct))
)	O
)	O
;	O
if	O
(	O
new	*(struct(long,*(struct),*(struct)))
)	O
{	O
new	*(struct(long,*(struct),*(struct)))
->	O
size	*((*(struct))->(long))
=	O
0	int
;	O
new	*(struct(long,*(struct),*(struct)))
->	O
rset_list	*(struct)
=	O
gl_list_nx_create_empty	(*(struct(*((*`,*`,*`,*`,bool)->(*`)),*((*`,*`,*`,*`,bool,long,*`)->(*`)),*((*`)->(long)),*((*`,*`)->(*`)),*((*`,*`,*`)->(int)),*((*`,*`)->(*`)),*((*`,*`)->(*`)),*((*`,long)->(*`)),*((*`,long,*`)->(*`)),*((*`,long,long,*`)->(*`)),*((*`,long,long,*`)->(long)),*((*`,*`)->(*`)),*((*`,*`)->(*`)),*((*`,*`,*`)->(*`)),*((*`,*`,*`)->(*`)),*((*`,long,*`)->(*`)),*((*`,*`)->(bool)),*((*`,long)->(bool)),*((*`,*`)->(bool)),*((*`)->(void)),*((*`)->(struct`)),*((*`,long,long)->(struct`)),*((*`,*`,*`)->(bool)),*((*`)->(void)),*((*`,*`,*`)->(*`)),*((*`,*`,long,long,*`)->(*`)),*((*`,*`,*`)->(long)),*((*`,*`,long,long,*`)->(long)),*((*`,*`,*`)->(*`)),*((*`,*`,*`)->(bool)))),*((*(void),*(void))->(bool)),*((*(void))->(long)),*((*(void))->(void)),bool)->(*(struct))
(	O
GL_ARRAY_LIST	O
,	O
rec_db_rset_equals_fn	(*(void),*(void))->(bool)
,	O
NULL	O
,	O
rec_db_rset_dispose_fn	(*(void))->(void)
,	O
true	int
)	O
;	O
if	O
(	O
new	*(struct(long,*(struct),*(struct)))
->	O
rset_list	*(struct)
==	O
NULL	O
)	O
{	O
free	(*(void))->(void)
(	O
new	*(struct(long,*(struct),*(struct)))
)	O
;	O
new	*(struct(long,*(struct),*(struct)))
=	O
NULL	O
;	O
}	O
new	*(struct(long,*(struct),*(struct)))
->	O
aggregates	*(struct)
=	O
rec_aggregate_reg_new	()->(*(struct))
(	O
)	O
;	O
if	O
(	O
!	O
new	*(struct(long,*(struct),*(struct)))
->	O
aggregates	*(struct)
)	O
{	O
free	(*(void))->(void)
(	O
new	*(struct(long,*(struct),*(struct)))
)	O
;	O
return	O
NULL	O
;	O
}	O
rec_aggregate_reg_add_standard	(*(struct))->(void)
(	O
new	*(struct(long,*(struct),*(struct)))
->	O
aggregates	*(struct)
)	O
;	O
}	O
return	O
new	*(struct(long,*(struct),*(struct)))
;	O
}	O
void	O
rec_db_destroy	(*(struct))->(void)
(	O
rec_db_t	*(struct)
db	*(struct)
)	O
{	O
if	O
(	O
db	*(struct)
)	O
{	O
rec_aggregate_reg_destroy	(*(struct))->(void)
(	O
db	*(struct)
->	O
aggregates	*(struct)
)	O
;	O
gl_list_free	(*(struct))->(void)
(	O
db	*(struct)
->	O
rset_list	*(struct)
)	O
;	O
free	(*(void))->(void)
(	O
db	*(struct)
)	O
;	O
}	O
}	O
size_t	long
rec_db_size	(*(struct))->(long)
(	O
rec_db_t	*(struct)
db	*(struct)
)	O
{	O
return	O
db	*(struct)
->	O
size	*((*(struct))->(long))
;	O
}	O
rec_rset_t	*(struct)
rec_db_get_rset	(*(struct),long)->(*(struct))
(	O
rec_db_t	*(struct)
db	*(struct)
,	O
size_t	long
position	long
)	O
{	O
rec_rset_t	*(struct)
rset	*(struct)
;	O
rset	*(struct)
=	O
NULL	O
;	O
if	O
(	O
db	*(struct)
->	O
size	*((*(struct))->(long))
>	O
0	int
)	O
{	O
if	O
(	O
position	long
>=	O
db	*(struct)
->	O
size	*((*(struct))->(long))
)	O
{	O
position	long
=	O
db	*(struct)
->	O
size	*((*(struct))->(long))
-	O
1	int
;	O
}	O
rset	*(struct)
=	O
(	O
rec_rset_t	*(struct)
)	O
gl_list_get_at	(*(struct),long)->(*(void))
(	O
db	*(struct)
->	O
rset_list	*(struct)
,	O
position	long
)	O
;	O
}	O
return	O
rset	*(struct)
;	O
}	O
bool	bool
rec_db_insert_rset	(*(struct),*(struct),long)->(bool)
(	O
rec_db_t	*(struct)
db	*(struct)
,	O
rec_rset_t	*(struct)
rset	*(struct)
,	O
size_t	long
position	long
)	O
{	O
gl_list_node_t	*(struct)
node	*(struct)
;	O
node	*(struct)
=	O
NULL	O
;	O
if	O
(	O
position	long
==	O
0	int
)	O
{	O
node	*(struct)
=	O
gl_list_nx_add_first	(*(struct),*(void))->(*(struct))
(	O
db	*(struct)
->	O
rset_list	*(struct)
,	O
(	O
void	O
*	O
)	O
rset	*(struct)
)	O
;	O
}	O
else	O
if	O
(	O
position	long
>=	O
db	*(struct)
->	O
size	*((*(struct))->(long))
)	O
{	O
node	*(struct)
=	O
gl_list_nx_add_last	(*(struct),*(void))->(*(struct))
(	O
db	*(struct)
->	O
rset_list	*(struct)
,	O
(	O
void	O
*	O
)	O
rset	*(struct)
)	O
;	O
}	O
else	O
{	O
node	*(struct)
=	O
gl_list_nx_add_at	(*(struct),long,*(void))->(*(struct))
(	O
db	*(struct)
->	O
rset_list	*(struct)
,	O
position	long
,	O
(	O
void	O
*	O
)	O
rset	*(struct)
)	O
;	O
}	O
if	O
(	O
node	*(struct)
!=	O
NULL	O
)	O
{	O
db	*(struct)
->	O
size	*((*(struct))->(long))
++	O
;	O
return	O
true	int
;	O
}	O
return	O
false	int
;	O
}	O
bool	bool
rec_db_remove_rset	(*(struct),long)->(bool)
(	O
rec_db_t	*(struct)
db	*(struct)
,	O
size_t	long
position	long
)	O
{	O
bool	bool
removed	bool
;	O
removed	bool
=	O
false	int
;	O
if	O
(	O
db	*(struct)
->	O
size	*((*(struct))->(long))
>	O
0	int
)	O
{	O
if	O
(	O
position	long
>=	O
db	*(struct)
->	O
size	*((*(struct))->(long))
)	O
{	O
position	long
=	O
db	*(struct)
->	O
size	*((*(struct))->(long))
-	O
1	int
;	O
}	O
if	O
(	O
gl_list_remove_at	(*(struct),long)->(bool)
(	O
db	*(struct)
->	O
rset_list	*(struct)
,	O
position	long
)	O
)	O
{	O
db	*(struct)
->	O
size	*((*(struct))->(long))
--	O
;	O
removed	bool
=	O
true	int
;	O
}	O
}	O
return	O
removed	bool
;	O
}	O
bool	bool
rec_db_type_p	(*(struct),*(char))->(bool)
(	O
rec_db_t	*(struct)
db	*(struct)
,	O
const	O
char	O
*	O
type	enum(int,int,int,int)
)	O
{	O
return	O
(	O
rec_db_get_rset_by_type	(*(struct),*(char))->(*(struct))
(	O
db	*(struct)
,	O
type	enum(int,int,int,int)
)	O
!=	O
NULL	O
)	O
;	O
}	O
rec_rset_t	*(struct)
rec_db_get_rset_by_type	(*(struct),*(char))->(*(struct))
(	O
rec_db_t	*(struct)
db	*(struct)
,	O
const	O
char	O
*	O
type	enum(int,int,int,int)
)	O
{	O
int	O
i	long
;	O
rec_rset_t	*(struct)
rset	*(struct)
;	O
bool	bool
found	bool
;	O
char	O
*	O
rtype	*(char)
;	O
found	bool
=	O
false	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
rec_db_size	(*(struct))->(long)
(	O
db	*(struct)
)	O
;	O
i	long
++	O
)	O
{	O
rset	*(struct)
=	O
rec_db_get_rset	(*(struct),long)->(*(struct))
(	O
db	*(struct)
,	O
i	long
)	O
;	O
rtype	*(char)
=	O
rec_rset_type	(*(struct))->(*(char))
(	O
rset	*(struct)
)	O
;	O
if	O
(	O
rtype	*(char)
==	O
NULL	O
)	O
{	O
if	O
(	O
type	enum(int,int,int,int)
==	O
NULL	O
)	O
{	O
found	bool
=	O
true	int
;	O
break	O
;	O
}	O
}	O
else	O
{	O
if	O
(	O
(	O
type	enum(int,int,int,int)
!=	O
NULL	O
)	O
&&	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
rtype	*(char)
,	O
type	enum(int,int,int,int)
)	O
==	O
0	int
)	O
)	O
{	O
found	bool
=	O
true	int
;	O
break	O
;	O
}	O
}	O
}	O
if	O
(	O
!	O
found	bool
)	O
{	O
rset	*(struct)
=	O
NULL	O
;	O
}	O
return	O
rset	*(struct)
;	O
}	O
rec_rset_t	*(struct)
rec_db_query	(*(struct),*(char),*(char),*(long),*(struct),*(char),long,*(struct),*(char),*(struct),*(struct),int)->(*(struct))
(	O
rec_db_t	*(struct)
db	*(struct)
,	O
const	O
char	O
*	O
type	enum(int,int,int,int)
,	O
const	O
char	O
*	O
join	*(char)
,	O
size_t	long
*	O
index	(*(char),int)->(*(char))
,	O
rec_sex_t	*(struct)
sex	*(struct)
,	O
const	O
char	O
*	O
fast_string	*(char)
,	O
size_t	long
random	()->(long)
,	O
rec_fex_t	*(struct)
fex	*(struct)
,	O
const	O
char	O
*	O
password	*(char)
,	O
rec_fex_t	*(struct)
group_by	*(struct)
,	O
rec_fex_t	*(struct)
sort_by	*(struct)
,	O
int	O
flags	int
)	O
{	O
rec_rset_t	*(struct)
res	*(struct)
=	O
NULL	O
;	O
rec_rset_t	*(struct)
rset	*(struct)
=	O
NULL	O
;	O
res	*(struct)
=	O
rec_rset_new	()->(*(struct))
(	O
)	O
;	O
if	O
(	O
!	O
res	*(struct)
)	O
{	O
return	O
NULL	O
;	O
}	O
rset	*(struct)
=	O
rec_db_get_rset_by_type	(*(struct),*(char))->(*(struct))
(	O
db	*(struct)
,	O
type	enum(int,int,int,int)
)	O
;	O
if	O
(	O
!	O
rset	*(struct)
)	O
{	O
if	O
(	O
!	O
type	enum(int,int,int,int)
&&	O
(	O
rec_db_size	(*(struct))->(long)
(	O
db	*(struct)
)	O
==	O
1	int
)	O
)	O
{	O
rset	*(struct)
=	O
rec_db_get_rset	(*(struct),long)->(*(struct))
(	O
db	*(struct)
,	O
0	int
)	O
;	O
}	O
else	O
{	O
return	O
res	*(struct)
;	O
}	O
}	O
else	O
{	O
if	O
(	O
join	*(char)
)	O
{	O
rec_type_t	*(struct)
ref_type	*(struct)
=	O
rec_rset_get_field_type	(*(struct),*(char))->(*(struct))
(	O
rset	*(struct)
,	O
join	*(char)
)	O
;	O
if	O
(	O
ref_type	*(struct)
&&	O
(	O
rec_type_kind	(*(struct))->(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int))
(	O
ref_type	*(struct)
)	O
==	O
REC_TYPE_REC	int
)	O
)	O
{	O
const	O
char	O
*	O
referred_type	*(char)
=	O
rec_type_rec	(*(struct))->(*(char))
(	O
ref_type	*(struct)
)	O
;	O
if	O
(	O
rec_db_get_rset_by_type	(*(struct),*(char))->(*(struct))
(	O
db	*(struct)
,	O
referred_type	*(char)
)	O
)	O
{	O
rset	*(struct)
=	O
rec_db_join	(*(struct(long,*(struct),*(struct))),*(char),*(char),*(char))->(*(struct))
(	O
db	*(struct)
,	O
type	enum(int,int,int,int)
,	O
join	*(char)
,	O
referred_type	*(char)
)	O
;	O
if	O
(	O
!	O
rset	*(struct)
)	O
{	O
return	O
NULL	O
;	O
}	O
}	O
}	O
}	O
}	O
if	O
(	O
flags	int
&	O
REC_F_DESCRIPTOR	int
)	O
{	O
rec_record_t	*(struct)
descriptor	*(struct)
=	O
rec_rset_descriptor	(*(struct))->(*(struct))
(	O
rset	*(struct)
)	O
;	O
if	O
(	O
descriptor	*(struct)
)	O
{	O
descriptor	*(struct)
=	O
rec_record_dup	(*(struct))->(*(struct))
(	O
descriptor	*(struct)
)	O
;	O
if	O
(	O
!	O
descriptor	*(struct)
)	O
{	O
free	(*(void))->(void)
(	O
res	*(struct)
)	O
;	O
return	O
NULL	O
;	O
}	O
}	O
rec_rset_set_descriptor	(*(struct),*(struct))->(void)
(	O
res	*(struct)
,	O
descriptor	*(struct)
)	O
;	O
}	O
if	O
(	O
random	()->(long)
>	O
0	int
)	O
{	O
rec_db_add_random_indexes	(*(*(long)),long,long)->(void)
(	O
&	O
index	(*(char),int)->(*(char))
,	O
random	()->(long)
,	O
rec_rset_num_records	(*(struct))->(long)
(	O
rset	*(struct)
)	O
)	O
;	O
if	O
(	O
!	O
index	(*(char),int)->(*(char))
)	O
{	O
return	O
NULL	O
;	O
}	O
}	O
if	O
(	O
fex	*(struct)
&&	O
!	O
group_by	*(struct)
&&	O
rec_fex_all_calls_p	(*(struct))->(bool)
(	O
fex	*(struct)
)	O
)	O
{	O
rec_record_t	*(struct)
record	*(struct)
=	O
rec_db_process_fex	(*(struct(long,*(struct),*(struct))),*(struct),*(struct),*(struct))->(*(struct))
(	O
db	*(struct)
,	O
rset	*(struct)
,	O
NULL	O
,	O
fex	*(struct)
)	O
;	O
if	O
(	O
record	*(struct)
)	O
{	O
rec_record_set_container	(*(struct),*(void))->(void)
(	O
record	*(struct)
,	O
res	*(struct)
)	O
;	O
if	O
(	O
!	O
rec_mset_append	(*(struct),int,*(void),int)->(*(struct))
(	O
rec_rset_mset	(*(struct))->(*(struct))
(	O
res	*(struct)
)	O
,	O
MSET_RECORD	int
,	O
(	O
void	O
*	O
)	O
record	*(struct)
,	O
MSET_RECORD	int
)	O
)	O
{	O
return	O
NULL	O
;	O
}	O
}	O
}	O
else	O
{	O
rec_record_t	*(struct)
record	*(struct)
=	O
NULL	O
;	O
size_t	long
num_rec	long
=	O
-	O
1	int
;	O
if	O
(	O
group_by	*(struct)
)	O
{	O
if	O
(	O
!	O
rec_rset_sort	(*(struct),*(struct))->(*(struct))
(	O
rset	*(struct)
,	O
group_by	*(struct)
)	O
)	O
{	O
return	O
NULL	O
;	O
}	O
if	O
(	O
!	O
rec_rset_group	(*(struct),*(struct))->(*(struct))
(	O
rset	*(struct)
,	O
group_by	*(struct)
)	O
)	O
{	O
return	O
NULL	O
;	O
}	O
}	O
if	O
(	O
!	O
rec_rset_sort	(*(struct),*(struct))->(*(struct))
(	O
rset	*(struct)
,	O
sort_by	*(struct)
)	O
)	O
{	O
return	O
NULL	O
;	O
}	O
rec_mset_iterator_t	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
iter	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
=	O
rec_mset_iterator	(*(struct))->(struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long)))
(	O
rec_rset_mset	(*(struct))->(*(struct))
(	O
rset	*(struct)
)	O
)	O
;	O
while	O
(	O
rec_mset_iterator_next	(*(struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))),int,*(*(void)),*(*(struct)))->(bool)
(	O
&	O
iter	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
,	O
MSET_RECORD	int
,	O
(	O
const	O
void	O
*	O
*	O
)	O
&	O
record	*(struct)
,	O
NULL	O
)	O
)	O
{	O
rec_record_t	*(struct)
res_record	*(struct)
;	O
num_rec	long
++	O
;	O
if	O
(	O
!	O
rec_db_record_selected_p	(long,*(struct),*(long),*(struct),*(char),bool)->(bool)
(	O
num_rec	long
,	O
record	*(struct)
,	O
index	(*(char),int)->(*(char))
,	O
sex	*(struct)
,	O
fast_string	*(char)
,	O
flags	int
&	O
REC_F_ICASE	int
)	O
)	O
{	O
continue	O
;	O
}	O
res_record	*(struct)
=	O
rec_db_process_fex	(*(struct(long,*(struct),*(struct))),*(struct),*(struct),*(struct))->(*(struct))
(	O
db	*(struct)
,	O
rset	*(struct)
,	O
record	*(struct)
,	O
fex	*(struct)
)	O
;	O
if	O
(	O
!	O
res_record	*(struct)
)	O
{	O
return	O
NULL	O
;	O
}	O
if	O
(	O
rec_record_num_elems	(*(struct))->(long)
(	O
res_record	*(struct)
)	O
==	O
0	int
)	O
{	O
continue	O
;	O
}	O
if	O
(	O
flags	int
&	O
REC_F_UNIQ	int
)	O
{	O
rec_record_uniq	(*(struct))->(void)
(	O
res_record	*(struct)
)	O
;	O
}	O
rec_record_set_container	(*(struct),*(void))->(void)
(	O
res_record	*(struct)
,	O
res	*(struct)
)	O
;	O
if	O
(	O
!	O
rec_mset_append	(*(struct),int,*(void),int)->(*(struct))
(	O
rec_rset_mset	(*(struct))->(*(struct))
(	O
res	*(struct)
)	O
,	O
MSET_RECORD	int
,	O
(	O
void	O
*	O
)	O
res_record	*(struct)
,	O
MSET_RECORD	int
)	O
)	O
{	O
return	O
NULL	O
;	O
}	O
}	O
rec_mset_iterator_free	(*(struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))))->(void)
(	O
&	O
iter	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
)	O
;	O
}	O
return	O
res	*(struct)
;	O
}	O
bool	bool
rec_db_insert	(*(struct),*(char),*(long),*(struct),*(char),long,*(char),*(struct),int)->(bool)
(	O
rec_db_t	*(struct)
db	*(struct)
,	O
const	O
char	O
*	O
type	enum(int,int,int,int)
,	O
size_t	long
*	O
index	(*(char),int)->(*(char))
,	O
rec_sex_t	*(struct)
sex	*(struct)
,	O
const	O
char	O
*	O
fast_string	*(char)
,	O
size_t	long
random	()->(long)
,	O
const	O
char	O
*	O
password	*(char)
,	O
rec_record_t	*(struct)
record	*(struct)
,	O
int	O
flags	int
)	O
{	O
if	O
(	O
!	O
record	*(struct)
||	O
(	O
rec_record_num_fields	(*(struct))->(long)
(	O
record	*(struct)
)	O
==	O
0	int
)	O
)	O
{	O
return	O
true	int
;	O
}	O
if	O
(	O
index	(*(char),int)->(*(char))
||	O
sex	*(struct)
||	O
fast_string	*(char)
||	O
(	O
random	()->(long)
>	O
0	int
)	O
)	O
{	O
rec_rset_t	*(struct)
rset	*(struct)
=	O
rec_db_get_rset_by_type	(*(struct),*(char))->(*(struct))
(	O
db	*(struct)
,	O
type	enum(int,int,int,int)
)	O
;	O
if	O
(	O
rset	*(struct)
)	O
{	O
size_t	long
num_rec	long
=	O
-	O
1	int
;	O
if	O
(	O
random	()->(long)
>	O
0	int
)	O
{	O
rec_db_add_random_indexes	(*(*(long)),long,long)->(void)
(	O
&	O
index	(*(char),int)->(*(char))
,	O
random	()->(long)
,	O
rec_rset_num_records	(*(struct))->(long)
(	O
rset	*(struct)
)	O
)	O
;	O
if	O
(	O
!	O
index	(*(char),int)->(*(char))
)	O
{	O
return	O
false	int
;	O
}	O
}	O
if	O
(	O
!	O
(	O
flags	int
&	O
REC_F_NOAUTO	int
)	O
)	O
{	O
if	O
(	O
!	O
rec_rset_add_auto_fields	(*(struct),*(struct))->(*(struct))
(	O
rset	*(struct)
,	O
record	*(struct)
)	O
)	O
{	O
return	O
false	int
;	O
}	O
}	O
{	O
rec_record_t	*(struct)
rset_record	*(struct)
=	O
NULL	O
;	O
rec_mset_elem_t	*(struct)
elem	*(struct)
;	O
rec_mset_iterator_t	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
iter	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
=	O
rec_mset_iterator	(*(struct))->(struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long)))
(	O
rec_rset_mset	(*(struct))->(*(struct))
(	O
rset	*(struct)
)	O
)	O
;	O
while	O
(	O
rec_mset_iterator_next	(*(struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))),int,*(*(void)),*(*(struct)))->(bool)
(	O
&	O
iter	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
,	O
MSET_RECORD	int
,	O
(	O
const	O
void	O
*	O
*	O
)	O
&	O
rset_record	*(struct)
,	O
&	O
elem	*(struct)
)	O
)	O
{	O
num_rec	long
++	O
;	O
if	O
(	O
!	O
rec_db_record_selected_p	(long,*(struct),*(long),*(struct),*(char),bool)->(bool)
(	O
num_rec	long
,	O
rset_record	*(struct)
,	O
index	(*(char),int)->(*(char))
,	O
sex	*(struct)
,	O
fast_string	*(char)
,	O
flags	int
&	O
REC_F_ICASE	int
)	O
)	O
{	O
continue	O
;	O
}	O
rec_record_set_container	(*(struct),*(void))->(void)
(	O
record	*(struct)
,	O
rset	*(struct)
)	O
;	O
rec_mset_elem_set_data	(*(struct),*(void))->(void)
(	O
elem	*(struct)
,	O
(	O
void	O
*	O
)	O
rec_record_dup	(*(struct))->(*(struct))
(	O
record	*(struct)
)	O
)	O
;	O
}	O
rec_mset_iterator_free	(*(struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))))->(void)
(	O
&	O
iter	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
)	O
;	O
}	O
}	O
}	O
else	O
{	O
rec_rset_t	*(struct)
rset	*(struct)
=	O
rec_db_get_rset_by_type	(*(struct),*(char))->(*(struct))
(	O
db	*(struct)
,	O
type	enum(int,int,int,int)
)	O
;	O
if	O
(	O
rset	*(struct)
)	O
{	O
rec_record_set_container	(*(struct),*(void))->(void)
(	O
record	*(struct)
,	O
rset	*(struct)
)	O
;	O
if	O
(	O
!	O
(	O
flags	int
&	O
REC_F_NOAUTO	int
)	O
)	O
{	O
if	O
(	O
!	O
rec_rset_add_auto_fields	(*(struct),*(struct))->(*(struct))
(	O
rset	*(struct)
,	O
record	*(struct)
)	O
)	O
{	O
return	O
false	int
;	O
}	O
}	O
if	O
(	O
rec_rset_num_records	(*(struct))->(long)
(	O
rset	*(struct)
)	O
==	O
0	int
)	O
{	O
rec_mset_insert_at	(*(struct),int,*(void),long)->(*(struct))
(	O
rec_rset_mset	(*(struct))->(*(struct))
(	O
rset	*(struct)
)	O
,	O
MSET_RECORD	int
,	O
(	O
void	O
*	O
)	O
record	*(struct)
,	O
rec_rset_descriptor_pos	(*(struct))->(long)
(	O
rset	*(struct)
)	O
)	O
;	O
}	O
else	O
{	O
rec_mset_t	*(struct)
mset	*(struct)
=	O
rec_rset_mset	(*(struct))->(*(struct))
(	O
rset	*(struct)
)	O
;	O
rec_record_t	*(struct)
last_record	*(struct)
=	O
(	O
rec_record_t	*(struct)
)	O
rec_mset_get_at	(*(struct),int,long)->(*(void))
(	O
mset	*(struct)
,	O
MSET_RECORD	int
,	O
rec_rset_num_records	(*(struct))->(long)
(	O
rset	*(struct)
)	O
-	O
1	int
)	O
;	O
if	O
(	O
!	O
rec_mset_insert_after	(*(struct),int,*(void),*(struct))->(*(struct))
(	O
mset	*(struct)
,	O
MSET_RECORD	int
,	O
(	O
void	O
*	O
)	O
record	*(struct)
,	O
rec_mset_search	(*(struct),*(void))->(*(struct))
(	O
mset	*(struct)
,	O
(	O
void	O
*	O
)	O
last_record	*(struct)
)	O
)	O
)	O
{	O
return	O
NULL	O
;	O
}	O
}	O
}	O
else	O
{	O
rset	*(struct)
=	O
rec_rset_new	()->(*(struct))
(	O
)	O
;	O
if	O
(	O
!	O
rset	*(struct)
)	O
{	O
return	O
false	int
;	O
}	O
rec_rset_set_type	(*(struct),*(char))->(void)
(	O
rset	*(struct)
,	O
type	enum(int,int,int,int)
)	O
;	O
rec_record_set_container	(*(struct),*(void))->(void)
(	O
record	*(struct)
,	O
rset	*(struct)
)	O
;	O
if	O
(	O
!	O
rec_mset_append	(*(struct),int,*(void),int)->(*(struct))
(	O
rec_rset_mset	(*(struct))->(*(struct))
(	O
rset	*(struct)
)	O
,	O
MSET_RECORD	int
,	O
(	O
void	O
*	O
)	O
record	*(struct)
,	O
MSET_ANY	int
)	O
)	O
{	O
return	O
false	int
;	O
}	O
if	O
(	O
type	enum(int,int,int,int)
)	O
{	O
rec_db_insert_rset	(*(struct),*(struct),long)->(bool)
(	O
db	*(struct)
,	O
rset	*(struct)
,	O
rec_db_size	(*(struct))->(long)
(	O
db	*(struct)
)	O
)	O
;	O
}	O
else	O
{	O
rec_db_insert_rset	(*(struct),*(struct),long)->(bool)
(	O
db	*(struct)
,	O
rset	*(struct)
,	O
0	int
)	O
;	O
}	O
}	O
}	O
return	O
true	int
;	O
}	O
bool	bool
rec_db_delete	(*(struct),*(char),*(long),*(struct),*(char),long,int)->(bool)
(	O
rec_db_t	*(struct)
db	*(struct)
,	O
const	O
char	O
*	O
type	enum(int,int,int,int)
,	O
size_t	long
*	O
index	(*(char),int)->(*(char))
,	O
rec_sex_t	*(struct)
sex	*(struct)
,	O
const	O
char	O
*	O
fast_string	*(char)
,	O
size_t	long
random	()->(long)
,	O
int	O
flags	int
)	O
{	O
rec_rset_t	*(struct)
rset	*(struct)
=	O
rec_db_get_rset_by_type	(*(struct),*(char))->(*(struct))
(	O
db	*(struct)
,	O
type	enum(int,int,int,int)
)	O
;	O
if	O
(	O
!	O
type	enum(int,int,int,int)
&&	O
!	O
rset	*(struct)
&&	O
(	O
rec_db_size	(*(struct))->(long)
(	O
db	*(struct)
)	O
==	O
1	int
)	O
)	O
{	O
rset	*(struct)
=	O
rec_db_get_rset	(*(struct),long)->(*(struct))
(	O
db	*(struct)
,	O
0	int
)	O
;	O
}	O
if	O
(	O
rec_rset_num_records	(*(struct))->(long)
(	O
rset	*(struct)
)	O
==	O
0	int
)	O
{	O
return	O
true	int
;	O
}	O
if	O
(	O
random	()->(long)
>	O
0	int
)	O
{	O
rec_db_add_random_indexes	(*(*(long)),long,long)->(void)
(	O
&	O
index	(*(char),int)->(*(char))
,	O
random	()->(long)
,	O
rec_rset_num_records	(*(struct))->(long)
(	O
rset	*(struct)
)	O
)	O
;	O
if	O
(	O
!	O
index	(*(char),int)->(*(char))
)	O
{	O
return	O
false	int
;	O
}	O
}	O
{	O
rec_record_t	*(struct)
record	*(struct)
=	O
NULL	O
;	O
rec_mset_elem_t	*(struct)
elem	*(struct)
;	O
size_t	long
num_rec	long
=	O
-	O
1	int
;	O
rec_mset_iterator_t	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
iter	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
=	O
rec_mset_iterator	(*(struct))->(struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long)))
(	O
rec_rset_mset	(*(struct))->(*(struct))
(	O
rset	*(struct)
)	O
)	O
;	O
while	O
(	O
rec_mset_iterator_next	(*(struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))),int,*(*(void)),*(*(struct)))->(bool)
(	O
&	O
iter	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
,	O
MSET_RECORD	int
,	O
(	O
const	O
void	O
*	O
*	O
)	O
&	O
record	*(struct)
,	O
&	O
elem	*(struct)
)	O
)	O
{	O
num_rec	long
++	O
;	O
if	O
(	O
!	O
rec_db_record_selected_p	(long,*(struct),*(long),*(struct),*(char),bool)->(bool)
(	O
num_rec	long
,	O
record	*(struct)
,	O
index	(*(char),int)->(*(char))
,	O
sex	*(struct)
,	O
fast_string	*(char)
,	O
flags	int
&	O
REC_F_ICASE	int
)	O
)	O
{	O
continue	O
;	O
}	O
if	O
(	O
flags	int
&	O
REC_F_COMMENT_OUT	int
)	O
{	O
rec_comment_t	*(char)
comment	*(char)
=	O
rec_record_to_comment	(*(struct))->(*(char))
(	O
record	*(struct)
)	O
;	O
if	O
(	O
!	O
comment	*(char)
)	O
{	O
return	O
false	int
;	O
}	O
rec_record_destroy	(*(struct))->(void)
(	O
record	*(struct)
)	O
;	O
rec_mset_elem_set_data	(*(struct),*(void))->(void)
(	O
elem	*(struct)
,	O
(	O
void	O
*	O
)	O
comment	*(char)
)	O
;	O
rec_mset_elem_set_type	(*(struct),int)->(void)
(	O
elem	*(struct)
,	O
MSET_COMMENT	int
)	O
;	O
}	O
else	O
{	O
rec_mset_remove_elem	(*(struct),*(struct))->(bool)
(	O
rec_rset_mset	(*(struct))->(*(struct))
(	O
rset	*(struct)
)	O
,	O
elem	*(struct)
)	O
;	O
}	O
}	O
rec_mset_iterator_free	(*(struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))))->(void)
(	O
&	O
iter	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
)	O
;	O
}	O
return	O
true	int
;	O
}	O
bool	bool
rec_db_set	(*(struct),*(char),*(long),*(struct),*(char),long,*(struct),int,*(char),int)->(bool)
(	O
rec_db_t	*(struct)
db	*(struct)
,	O
const	O
char	O
*	O
type	enum(int,int,int,int)
,	O
size_t	long
*	O
index	(*(char),int)->(*(char))
,	O
rec_sex_t	*(struct)
sex	*(struct)
,	O
const	O
char	O
*	O
fast_string	*(char)
,	O
size_t	long
random	()->(long)
,	O
rec_fex_t	*(struct)
fex	*(struct)
,	O
int	O
action	int
,	O
const	O
char	O
*	O
action_arg	*(char)
,	O
int	O
flags	int
)	O
{	O
rec_rset_t	*(struct)
rset	*(struct)
=	O
rec_db_get_rset_by_type	(*(struct),*(char))->(*(struct))
(	O
db	*(struct)
,	O
type	enum(int,int,int,int)
)	O
;	O
if	O
(	O
!	O
type	enum(int,int,int,int)
&&	O
!	O
rset	*(struct)
&&	O
(	O
rec_db_size	(*(struct))->(long)
(	O
db	*(struct)
)	O
==	O
1	int
)	O
)	O
{	O
rset	*(struct)
=	O
rec_db_get_rset	(*(struct),long)->(*(struct))
(	O
db	*(struct)
,	O
0	int
)	O
;	O
}	O
if	O
(	O
rec_rset_num_records	(*(struct))->(long)
(	O
rset	*(struct)
)	O
==	O
0	int
)	O
{	O
return	O
true	int
;	O
}	O
if	O
(	O
random	()->(long)
>	O
0	int
)	O
{	O
rec_db_add_random_indexes	(*(*(long)),long,long)->(void)
(	O
&	O
index	(*(char),int)->(*(char))
,	O
random	()->(long)
,	O
rec_rset_num_records	(*(struct))->(long)
(	O
rset	*(struct)
)	O
)	O
;	O
if	O
(	O
!	O
index	(*(char),int)->(*(char))
)	O
{	O
return	O
false	int
;	O
}	O
}	O
{	O
rec_record_t	*(struct)
record	*(struct)
=	O
NULL	O
;	O
size_t	long
num_rec	long
=	O
-	O
1	int
;	O
rec_mset_iterator_t	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
iter	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
=	O
rec_mset_iterator	(*(struct))->(struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long)))
(	O
rec_rset_mset	(*(struct))->(*(struct))
(	O
rset	*(struct)
)	O
)	O
;	O
bool	bool
descriptor_renamed	bool
=	O
false	int
;	O
while	O
(	O
rec_mset_iterator_next	(*(struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))),int,*(*(void)),*(*(struct)))->(bool)
(	O
&	O
iter	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
,	O
MSET_RECORD	int
,	O
(	O
const	O
void	O
*	O
*	O
)	O
&	O
record	*(struct)
,	O
NULL	O
)	O
)	O
{	O
num_rec	long
++	O
;	O
if	O
(	O
!	O
rec_db_record_selected_p	(long,*(struct),*(long),*(struct),*(char),bool)->(bool)
(	O
num_rec	long
,	O
record	*(struct)
,	O
index	(*(char),int)->(*(char))
,	O
sex	*(struct)
,	O
fast_string	*(char)
,	O
flags	int
&	O
REC_F_ICASE	int
)	O
)	O
{	O
continue	O
;	O
}	O
switch	O
(	O
action	int
)	O
{	O
case	O
REC_SET_ACT_RENAME	int
:	O
{	O
bool	bool
rename_descriptor	bool
=	O
false	int
;	O
if	O
(	O
!	O
descriptor_renamed	bool
&&	O
(	O
sex	*(struct)
==	O
NULL	O
)	O
&&	O
(	O
index	(*(char),int)->(*(char))
==	O
NULL	O
)	O
&&	O
(	O
random	()->(long)
==	O
0	int
)	O
&&	O
(	O
fast_string	*(char)
==	O
NULL	O
)	O
)	O
{	O
rename_descriptor	bool
=	O
true	int
;	O
descriptor_renamed	bool
=	O
true	int
;	O
}	O
if	O
(	O
!	O
rec_db_set_act_rename	(*(struct),*(struct),*(struct),bool,*(char))->(bool)
(	O
rset	*(struct)
,	O
record	*(struct)
,	O
fex	*(struct)
,	O
rename_descriptor	bool
,	O
action_arg	*(char)
)	O
)	O
{	O
return	O
false	int
;	O
}	O
break	O
;	O
}	O
case	O
REC_SET_ACT_SET	int
:	O
{	O
if	O
(	O
!	O
rec_db_set_act_set	(*(struct),*(struct),*(struct),bool,*(char))->(bool)
(	O
rset	*(struct)
,	O
record	*(struct)
,	O
fex	*(struct)
,	O
false	int
,	O
action_arg	*(char)
)	O
)	O
{	O
return	O
false	int
;	O
}	O
break	O
;	O
}	O
case	O
REC_SET_ACT_ADD	int
:	O
{	O
if	O
(	O
!	O
rec_db_set_act_add	(*(struct),*(struct),*(struct),*(char))->(bool)
(	O
rset	*(struct)
,	O
record	*(struct)
,	O
fex	*(struct)
,	O
action_arg	*(char)
)	O
)	O
{	O
return	O
false	int
;	O
}	O
break	O
;	O
}	O
case	O
REC_SET_ACT_SETADD	int
:	O
{	O
if	O
(	O
!	O
rec_db_set_act_set	(*(struct),*(struct),*(struct),bool,*(char))->(bool)
(	O
rset	*(struct)
,	O
record	*(struct)
,	O
fex	*(struct)
,	O
true	int
,	O
action_arg	*(char)
)	O
)	O
{	O
return	O
false	int
;	O
}	O
break	O
;	O
}	O
case	O
REC_SET_ACT_DELETE	int
:	O
{	O
if	O
(	O
!	O
rec_db_set_act_delete	(*(struct),*(struct),*(struct),bool)->(bool)
(	O
rset	*(struct)
,	O
record	*(struct)
,	O
fex	*(struct)
,	O
false	int
)	O
)	O
{	O
return	O
false	int
;	O
}	O
break	O
;	O
}	O
case	O
REC_SET_ACT_COMMENT	int
:	O
{	O
if	O
(	O
!	O
rec_db_set_act_delete	(*(struct),*(struct),*(struct),bool)->(bool)
(	O
rset	*(struct)
,	O
record	*(struct)
,	O
fex	*(struct)
,	O
true	int
)	O
)	O
{	O
return	O
false	int
;	O
}	O
break	O
;	O
}	O
default	O
:	O
{	O
return	O
true	int
;	O
}	O
}	O
}	O
rec_mset_iterator_free	(*(struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))))->(void)
(	O
&	O
iter	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
)	O
;	O
}	O
return	O
true	int
;	O
}	O
rec_aggregate_reg_t	*(struct)
rec_db_aggregates	(*(struct))->(*(struct))
(	O
rec_db_t	*(struct)
db	*(struct)
)	O
{	O
return	O
db	*(struct)
->	O
aggregates	*(struct)
;	O
}	O
static	O
rec_record_t	*(struct)
rec_db_merge_records	(*(struct),*(struct),*(char))->(*(struct))
(	O
rec_record_t	*(struct)
record1	*(struct)
,	O
rec_record_t	*(struct)
record2	*(struct)
,	O
const	O
char	O
*	O
prefix	*(char)
)	O
{	O
rec_mset_iterator_t	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
iter	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
;	O
rec_field_t	*(struct)
field	*(struct)
;	O
rec_record_t	*(struct)
merge	*(struct)
=	O
NULL	O
;	O
merge	*(struct)
=	O
rec_record_dup	(*(struct))->(*(struct))
(	O
record1	*(struct)
)	O
;	O
if	O
(	O
!	O
merge	*(struct)
)	O
{	O
return	O
NULL	O
;	O
}	O
iter	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
=	O
rec_mset_iterator	(*(struct))->(struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long)))
(	O
rec_record_mset	(*(struct))->(*(struct))
(	O
record2	*(struct)
)	O
)	O
;	O
while	O
(	O
rec_mset_iterator_next	(*(struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))),int,*(*(void)),*(*(struct)))->(bool)
(	O
&	O
iter	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
,	O
MSET_FIELD	int
,	O
(	O
const	O
void	O
*	O
*	O
)	O
&	O
field	*(struct)
,	O
NULL	O
)	O
)	O
{	O
rec_field_t	*(struct)
new_field	*(struct)
=	O
rec_field_dup	(*(struct))->(*(struct))
(	O
field	*(struct)
)	O
;	O
if	O
(	O
!	O
new_field	*(struct)
)	O
{	O
return	O
NULL	O
;	O
}	O
{	O
const	O
char	O
*	O
field_name	*(char)
=	O
rec_field_name	(*(struct))->(*(char))
(	O
new_field	*(struct)
)	O
;	O
char	O
*	O
new_name	*(char)
=	O
malloc	(long)->(*(void))
(	O
strlen	(*(char))->(long)
(	O
field_name	*(char)
)	O
+	O
strlen	(*(char))->(long)
(	O
prefix	*(char)
)	O
+	O
2	int
)	O
;	O
if	O
(	O
!	O
new_name	*(char)
)	O
{	O
return	O
NULL	O
;	O
}	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
new_name	*(char)
,	O
prefix	*(char)
,	O
strlen	(*(char))->(long)
(	O
prefix	*(char)
)	O
)	O
;	O
new_name	*(char)
[	O
strlen	(*(char))->(long)
(	O
prefix	*(char)
)	O
]	O
=	O
'_'	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
new_name	*(char)
+	O
strlen	(*(char))->(long)
(	O
prefix	*(char)
)	O
+	O
1	int
,	O
field_name	*(char)
,	O
strlen	(*(char))->(long)
(	O
field_name	*(char)
)	O
+	O
1	int
)	O
;	O
if	O
(	O
!	O
rec_field_set_name	(*(struct),*(char))->(bool)
(	O
new_field	*(struct)
,	O
new_name	*(char)
)	O
)	O
{	O
return	O
NULL	O
;	O
}	O
free	(*(void))->(void)
(	O
new_name	*(char)
)	O
;	O
}	O
if	O
(	O
!	O
rec_mset_append	(*(struct),int,*(void),int)->(*(struct))
(	O
rec_record_mset	(*(struct))->(*(struct))
(	O
merge	*(struct)
)	O
,	O
MSET_FIELD	int
,	O
(	O
void	O
*	O
)	O
new_field	*(struct)
,	O
MSET_ANY	int
)	O
)	O
{	O
return	O
NULL	O
;	O
}	O
}	O
rec_mset_iterator_free	(*(struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))))->(void)
(	O
&	O
iter	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
)	O
;	O
return	O
merge	*(struct)
;	O
}	O
static	O
rec_rset_t	*(struct)
rec_db_join	(*(struct(long,*(struct),*(struct))),*(char),*(char),*(char))->(*(struct))
(	O
rec_db_t	*(struct)
db	*(struct)
,	O
const	O
char	O
*	O
type1	*(struct)
,	O
const	O
char	O
*	O
field	*(struct)
,	O
const	O
char	O
*	O
type2	int
)	O
{	O
const	O
char	O
*	O
key	*(char)
=	O
NULL	O
;	O
rec_rset_t	*(struct)
join	*(char)
=	O
NULL	O
;	O
rec_rset_t	*(struct)
rset1	*(struct)
=	O
rec_db_get_rset_by_type	(*(struct),*(char))->(*(struct))
(	O
db	*(struct)
,	O
type1	*(struct)
)	O
;	O
rec_rset_t	*(struct)
rset2	*(struct)
=	O
rec_db_get_rset_by_type	(*(struct),*(char))->(*(struct))
(	O
db	*(struct)
,	O
type2	int
)	O
;	O
if	O
(	O
!	O
rset1	*(struct)
||	O
!	O
rset2	*(struct)
)	O
{	O
return	O
NULL	O
;	O
}	O
key	*(char)
=	O
rec_rset_key	(*(struct))->(*(char))
(	O
rset2	*(struct)
)	O
;	O
if	O
(	O
!	O
key	*(char)
)	O
{	O
return	O
NULL	O
;	O
}	O
join	*(char)
=	O
rec_rset_new	()->(*(struct))
(	O
)	O
;	O
if	O
(	O
!	O
join	*(char)
)	O
{	O
return	O
NULL	O
;	O
}	O
else	O
{	O
rec_record_t	*(struct)
record1	*(struct)
=	O
NULL	O
;	O
rec_mset_iterator_t	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
iter1	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
=	O
rec_mset_iterator	(*(struct))->(struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long)))
(	O
rec_rset_mset	(*(struct))->(*(struct))
(	O
rset1	*(struct)
)	O
)	O
;	O
while	O
(	O
rec_mset_iterator_next	(*(struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))),int,*(*(void)),*(*(struct)))->(bool)
(	O
&	O
iter1	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
,	O
MSET_RECORD	int
,	O
(	O
const	O
void	O
*	O
*	O
)	O
&	O
record1	*(struct)
,	O
NULL	O
)	O
)	O
{	O
size_t	long
num_foreign_keys	long
=	O
rec_record_get_num_fields_by_name	(*(struct),*(char))->(long)
(	O
record1	*(struct)
,	O
field	*(struct)
)	O
;	O
size_t	long
num_foreign_key	long
=	O
0	int
;	O
for	O
(	O
num_foreign_key	long
=	O
0	int
;	O
num_foreign_key	long
<	O
num_foreign_keys	long
;	O
num_foreign_key	long
++	O
)	O
{	O
rec_record_t	*(struct)
record2	*(struct)
=	O
NULL	O
;	O
rec_mset_iterator_t	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
iter2	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
=	O
rec_mset_iterator	(*(struct))->(struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long)))
(	O
rec_rset_mset	(*(struct))->(*(struct))
(	O
rset2	*(struct)
)	O
)	O
;	O
while	O
(	O
rec_mset_iterator_next	(*(struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))),int,*(*(void)),*(*(struct)))->(bool)
(	O
&	O
iter2	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
,	O
MSET_RECORD	int
,	O
(	O
const	O
void	O
*	O
*	O
)	O
&	O
record2	*(struct)
,	O
NULL	O
)	O
)	O
{	O
bool	bool
found	bool
=	O
false	int
;	O
size_t	long
i	long
=	O
0	int
;	O
rec_field_t	*(struct)
key_field	*(struct)
=	O
rec_record_get_field_by_name	(*(struct),*(char),long)->(*(struct))
(	O
record2	*(struct)
,	O
key	*(char)
,	O
num_foreign_key	long
)	O
;	O
if	O
(	O
!	O
key_field	*(struct)
)	O
{	O
break	O
;	O
}	O
found	bool
=	O
false	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
rec_record_get_num_fields_by_name	(*(struct),*(char))->(long)
(	O
record1	*(struct)
,	O
field	*(struct)
)	O
;	O
i	long
++	O
)	O
{	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
rec_field_value	(*(struct))->(*(char))
(	O
key_field	*(struct)
)	O
,	O
rec_field_value	(*(struct))->(*(char))
(	O
rec_record_get_field_by_name	(*(struct),*(char),long)->(*(struct))
(	O
record1	*(struct)
,	O
field	*(struct)
,	O
i	long
)	O
)	O
)	O
==	O
0	int
)	O
{	O
found	bool
=	O
true	int
;	O
break	O
;	O
}	O
}	O
if	O
(	O
!	O
found	bool
)	O
{	O
continue	O
;	O
}	O
rec_record_t	*(struct)
record	*(struct)
=	O
rec_db_merge_records	(*(struct),*(struct),*(char))->(*(struct))
(	O
record1	*(struct)
,	O
record2	*(struct)
,	O
field	*(struct)
)	O
;	O
if	O
(	O
!	O
record	*(struct)
)	O
{	O
return	O
NULL	O
;	O
}	O
while	O
(	O
rec_record_get_num_fields_by_name	(*(struct),*(char))->(long)
(	O
record	*(struct)
,	O
field	*(struct)
)	O
>	O
0	int
)	O
{	O
rec_record_remove_field_by_name	(*(struct),*(char),long)->(void)
(	O
record	*(struct)
,	O
field	*(struct)
,	O
0	int
)	O
;	O
}	O
rec_record_set_container	(*(struct),*(void))->(void)
(	O
record	*(struct)
,	O
join	*(char)
)	O
;	O
if	O
(	O
!	O
rec_mset_append	(*(struct),int,*(void),int)->(*(struct))
(	O
rec_rset_mset	(*(struct))->(*(struct))
(	O
join	*(char)
)	O
,	O
MSET_RECORD	int
,	O
(	O
void	O
*	O
)	O
record	*(struct)
,	O
MSET_ANY	int
)	O
)	O
{	O
return	O
NULL	O
;	O
}	O
}	O
rec_mset_iterator_free	(*(struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))))->(void)
(	O
&	O
iter2	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
)	O
;	O
}	O
}	O
rec_mset_iterator_free	(*(struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))))->(void)
(	O
&	O
iter1	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
)	O
;	O
}	O
{	O
rec_record_t	*(struct)
new_descriptor	*(struct)
=	O
rec_record_new	()->(*(struct))
(	O
)	O
;	O
if	O
(	O
!	O
new_descriptor	*(struct)
)	O
{	O
return	O
NULL	O
;	O
}	O
{	O
rec_field_t	*(struct)
new_field	*(struct)
=	O
NULL	O
;	O
char	O
*	O
new_rset_type	*(char)
=	O
rec_concat_strings	(*(char),*(char),*(char))->(*(char))
(	O
type1	*(struct)
,	O
"_"	*(char)
,	O
field	*(struct)
)	O
;	O
if	O
(	O
!	O
new_rset_type	*(char)
)	O
{	O
return	O
NULL	O
;	O
}	O
new_field	*(struct)
=	O
rec_field_new	(*(char),*(char))->(*(struct))
(	O
rec_std_field_name	(enum(int,int,int,int,int,int,int,int,int,int,int,int,int))->(*(char))
(	O
REC_FIELD_REC	int
)	O
,	O
new_rset_type	*(char)
)	O
;	O
if	O
(	O
!	O
rec_mset_append	(*(struct),int,*(void),int)->(*(struct))
(	O
rec_record_mset	(*(struct))->(*(struct))
(	O
new_descriptor	*(struct)
)	O
,	O
MSET_FIELD	int
,	O
(	O
void	O
*	O
)	O
new_field	*(struct)
,	O
MSET_ANY	int
)	O
)	O
{	O
return	O
NULL	O
;	O
}	O
}	O
rec_rset_set_descriptor	(*(struct),*(struct))->(void)
(	O
join	*(char)
,	O
new_descriptor	*(struct)
)	O
;	O
}	O
return	O
join	*(char)
;	O
}	O
static	O
bool	bool
rec_db_set_act_rename	(*(struct),*(struct),*(struct),bool,*(char))->(bool)
(	O
rec_rset_t	*(struct)
rset	*(struct)
,	O
rec_record_t	*(struct)
record	*(struct)
,	O
rec_fex_t	*(struct)
fex	*(struct)
,	O
bool	bool
rename_descriptor	bool
,	O
const	O
char	O
*	O
arg	*(char)
)	O
{	O
size_t	long
j	long
,	O
min	int
,	O
max	int
,	O
renamed	long
;	O
size_t	long
num_fields	long
;	O
rec_fex_elem_t	*(struct)
fex_elem	*(struct)
;	O
rec_field_t	*(struct)
field	*(struct)
;	O
const	O
char	O
*	O
field_name	*(char)
;	O
fex_elem	*(struct)
=	O
rec_fex_get	(*(struct),long)->(*(struct))
(	O
fex	*(struct)
,	O
0	int
)	O
;	O
field_name	*(char)
=	O
rec_fex_elem_field_name	(*(struct))->(*(char))
(	O
fex_elem	*(struct)
)	O
;	O
min	int
=	O
rec_fex_elem_min	(*(struct))->(int)
(	O
fex_elem	*(struct)
)	O
;	O
max	int
=	O
rec_fex_elem_max	(*(struct))->(int)
(	O
fex_elem	*(struct)
)	O
;	O
num_fields	long
=	O
rec_record_get_num_fields_by_name	(*(struct),*(char))->(long)
(	O
record	*(struct)
,	O
field_name	*(char)
)	O
;	O
if	O
(	O
min	int
==	O
-	O
1	int
)	O
{	O
min	int
=	O
0	int
;	O
max	int
=	O
num_fields	long
-	O
1	int
;	O
}	O
if	O
(	O
max	int
==	O
-	O
1	int
)	O
{	O
max	int
=	O
min	int
;	O
}	O
renamed	long
=	O
0	int
;	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
num_fields	long
;	O
j	long
++	O
)	O
{	O
if	O
(	O
(	O
j	long
>=	O
min	int
)	O
&&	O
(	O
j	long
<=	O
max	int
)	O
)	O
{	O
field	*(struct)
=	O
rec_record_get_field_by_name	(*(struct),*(char),long)->(*(struct))
(	O
record	*(struct)
,	O
field_name	*(char)
,	O
j	long
-	O
renamed	long
)	O
;	O
if	O
(	O
field	*(struct)
)	O
{	O
rec_field_set_name	(*(struct),*(char))->(bool)
(	O
field	*(struct)
,	O
arg	*(char)
)	O
;	O
renamed	long
++	O
;	O
}	O
if	O
(	O
rename_descriptor	bool
)	O
{	O
rec_rset_rename_field	(*(struct),*(char),*(char))->(void)
(	O
rset	*(struct)
,	O
field_name	*(char)
,	O
arg	*(char)
)	O
;	O
}	O
}	O
}	O
return	O
true	int
;	O
}	O
static	O
bool	bool
rec_db_set_act_set	(*(struct),*(struct),*(struct),bool,*(char))->(bool)
(	O
rec_rset_t	*(struct)
rset	*(struct)
,	O
rec_record_t	*(struct)
record	*(struct)
,	O
rec_fex_t	*(struct)
fex	*(struct)
,	O
bool	bool
add_p	bool
,	O
const	O
char	O
*	O
arg	*(char)
)	O
{	O
size_t	long
i	long
,	O
j	long
,	O
min	int
,	O
max	int
;	O
size_t	long
num_fields	long
;	O
rec_fex_elem_t	*(struct)
fex_elem	*(struct)
;	O
rec_field_t	*(struct)
field	*(struct)
;	O
const	O
char	O
*	O
field_name	*(char)
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
rec_fex_size	(*(struct))->(long)
(	O
fex	*(struct)
)	O
;	O
i	long
++	O
)	O
{	O
fex_elem	*(struct)
=	O
rec_fex_get	(*(struct),long)->(*(struct))
(	O
fex	*(struct)
,	O
i	long
)	O
;	O
field_name	*(char)
=	O
rec_fex_elem_field_name	(*(struct))->(*(char))
(	O
fex_elem	*(struct)
)	O
;	O
min	int
=	O
rec_fex_elem_min	(*(struct))->(int)
(	O
fex_elem	*(struct)
)	O
;	O
max	int
=	O
rec_fex_elem_max	(*(struct))->(int)
(	O
fex_elem	*(struct)
)	O
;	O
num_fields	long
=	O
rec_record_get_num_fields_by_name	(*(struct),*(char))->(long)
(	O
record	*(struct)
,	O
field_name	*(char)
)	O
;	O
if	O
(	O
min	int
==	O
-	O
1	int
)	O
{	O
min	int
=	O
0	int
;	O
max	int
=	O
num_fields	long
-	O
1	int
;	O
}	O
if	O
(	O
max	int
==	O
-	O
1	int
)	O
{	O
max	int
=	O
min	int
;	O
}	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
num_fields	long
;	O
j	long
++	O
)	O
{	O
if	O
(	O
(	O
j	long
>=	O
min	int
)	O
&&	O
(	O
j	long
<=	O
max	int
)	O
)	O
{	O
field	*(struct)
=	O
rec_record_get_field_by_name	(*(struct),*(char),long)->(*(struct))
(	O
record	*(struct)
,	O
field_name	*(char)
,	O
j	long
)	O
;	O
if	O
(	O
field	*(struct)
)	O
{	O
rec_field_set_value	(*(struct),*(char))->(bool)
(	O
field	*(struct)
,	O
arg	*(char)
)	O
;	O
}	O
}	O
}	O
if	O
(	O
add_p	bool
&&	O
(	O
num_fields	long
==	O
0	int
)	O
)	O
{	O
field	*(struct)
=	O
rec_field_new	(*(char),*(char))->(*(struct))
(	O
field_name	*(char)
,	O
arg	*(char)
)	O
;	O
if	O
(	O
!	O
rec_mset_append	(*(struct),int,*(void),int)->(*(struct))
(	O
rec_record_mset	(*(struct))->(*(struct))
(	O
record	*(struct)
)	O
,	O
MSET_FIELD	int
,	O
(	O
void	O
*	O
)	O
field	*(struct)
,	O
MSET_ANY	int
)	O
)	O
{	O
return	O
false	int
;	O
}	O
}	O
}	O
return	O
true	int
;	O
}	O
static	O
bool	bool
rec_db_set_act_add	(*(struct),*(struct),*(struct),*(char))->(bool)
(	O
rec_rset_t	*(struct)
rset	*(struct)
,	O
rec_record_t	*(struct)
record	*(struct)
,	O
rec_fex_t	*(struct)
fex	*(struct)
,	O
const	O
char	O
*	O
arg	*(char)
)	O
{	O
size_t	long
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
rec_fex_size	(*(struct))->(long)
(	O
fex	*(struct)
)	O
;	O
i	long
++	O
)	O
{	O
rec_fex_elem_t	*(struct)
fex_elem	*(struct)
=	O
rec_fex_get	(*(struct),long)->(*(struct))
(	O
fex	*(struct)
,	O
i	long
)	O
;	O
const	O
char	O
*	O
field_name	*(char)
=	O
rec_fex_elem_field_name	(*(struct))->(*(char))
(	O
fex_elem	*(struct)
)	O
;	O
rec_field_t	*(struct)
field	*(struct)
=	O
rec_field_new	(*(char),*(char))->(*(struct))
(	O
field_name	*(char)
,	O
arg	*(char)
)	O
;	O
if	O
(	O
!	O
field	*(struct)
)	O
{	O
return	O
false	int
;	O
}	O
if	O
(	O
!	O
rec_mset_append	(*(struct),int,*(void),int)->(*(struct))
(	O
rec_record_mset	(*(struct))->(*(struct))
(	O
record	*(struct)
)	O
,	O
MSET_FIELD	int
,	O
(	O
void	O
*	O
)	O
field	*(struct)
,	O
MSET_ANY	int
)	O
)	O
{	O
return	O
false	int
;	O
}	O
}	O
return	O
true	int
;	O
}	O
static	O
bool	bool
rec_db_set_act_delete	(*(struct),*(struct),*(struct),bool)->(bool)
(	O
rec_rset_t	*(struct)
rset	*(struct)
,	O
rec_record_t	*(struct)
record	*(struct)
,	O
rec_fex_t	*(struct)
fex	*(struct)
,	O
bool	bool
comment_out	bool
)	O
{	O
size_t	long
i	long
,	O
j	long
;	O
size_t	long
num_fields	long
;	O
bool	bool
*	O
deletion_mask	*(bool)
;	O
rec_field_t	*(struct)
field	*(struct)
;	O
rec_mset_iterator_t	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
iter	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
;	O
rec_mset_elem_t	*(struct)
elem	*(struct)
;	O
deletion_mask	*(bool)
=	O
malloc	(long)->(*(void))
(	O
sizeof	O
(	O
bool	bool
)	O
*	O
rec_record_num_fields	(*(struct))->(long)
(	O
record	*(struct)
)	O
)	O
;	O
if	O
(	O
!	O
deletion_mask	*(bool)
)	O
{	O
return	O
false	int
;	O
}	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
rec_record_num_fields	(*(struct))->(long)
(	O
record	*(struct)
)	O
;	O
i	long
++	O
)	O
{	O
deletion_mask	*(bool)
[	O
i	long
]	O
=	O
false	int
;	O
}	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
rec_fex_size	(*(struct))->(long)
(	O
fex	*(struct)
)	O
;	O
i	long
++	O
)	O
{	O
rec_fex_elem_t	*(struct)
fex_elem	*(struct)
=	O
rec_fex_get	(*(struct),long)->(*(struct))
(	O
fex	*(struct)
,	O
i	long
)	O
;	O
const	O
char	O
*	O
field_name	*(char)
=	O
rec_fex_elem_field_name	(*(struct))->(*(char))
(	O
fex_elem	*(struct)
)	O
;	O
size_t	long
min	int
=	O
rec_fex_elem_min	(*(struct))->(int)
(	O
fex_elem	*(struct)
)	O
;	O
size_t	long
max	int
=	O
rec_fex_elem_max	(*(struct))->(int)
(	O
fex_elem	*(struct)
)	O
;	O
num_fields	long
=	O
rec_record_get_num_fields_by_name	(*(struct),*(char))->(long)
(	O
record	*(struct)
,	O
field_name	*(char)
)	O
;	O
if	O
(	O
min	int
==	O
-	O
1	int
)	O
{	O
min	int
=	O
0	int
;	O
max	int
=	O
num_fields	long
-	O
1	int
;	O
}	O
if	O
(	O
max	int
==	O
-	O
1	int
)	O
{	O
max	int
=	O
min	int
;	O
}	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
num_fields	long
;	O
j	long
++	O
)	O
{	O
if	O
(	O
(	O
j	long
>=	O
min	int
)	O
&&	O
(	O
j	long
<=	O
max	int
)	O
)	O
{	O
field	*(struct)
=	O
rec_record_get_field_by_name	(*(struct),*(char),long)->(*(struct))
(	O
record	*(struct)
,	O
rec_fex_elem_field_name	(*(struct))->(*(char))
(	O
fex_elem	*(struct)
)	O
,	O
j	long
)	O
;	O
deletion_mask	*(bool)
[	O
rec_record_get_field_index	(*(struct),*(struct))->(long)
(	O
record	*(struct)
,	O
field	*(struct)
)	O
]	O
=	O
true	int
;	O
}	O
}	O
}	O
i	long
=	O
0	int
;	O
iter	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
=	O
rec_mset_iterator	(*(struct))->(struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long)))
(	O
rec_record_mset	(*(struct))->(*(struct))
(	O
record	*(struct)
)	O
)	O
;	O
while	O
(	O
rec_mset_iterator_next	(*(struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))),int,*(*(void)),*(*(struct)))->(bool)
(	O
&	O
iter	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
,	O
MSET_FIELD	int
,	O
(	O
const	O
void	O
*	O
*	O
)	O
&	O
field	*(struct)
,	O
&	O
elem	*(struct)
)	O
)	O
{	O
if	O
(	O
deletion_mask	*(bool)
[	O
i	long
]	O
)	O
{	O
if	O
(	O
comment_out	bool
)	O
{	O
rec_comment_t	*(char)
comment	*(char)
=	O
rec_field_to_comment	(*(struct))->(*(char))
(	O
field	*(struct)
)	O
;	O
if	O
(	O
!	O
comment	*(char)
)	O
{	O
return	O
false	int
;	O
}	O
rec_field_destroy	(*(struct))->(void)
(	O
field	*(struct)
)	O
;	O
rec_mset_elem_set_data	(*(struct),*(void))->(void)
(	O
elem	*(struct)
,	O
(	O
void	O
*	O
)	O
comment	*(char)
)	O
;	O
rec_mset_elem_set_type	(*(struct),int)->(void)
(	O
elem	*(struct)
,	O
MSET_COMMENT	int
)	O
;	O
}	O
else	O
{	O
rec_mset_remove_elem	(*(struct),*(struct))->(bool)
(	O
rec_record_mset	(*(struct))->(*(struct))
(	O
record	*(struct)
)	O
,	O
elem	*(struct)
)	O
;	O
}	O
}	O
i	long
++	O
;	O
}	O
rec_mset_iterator_free	(*(struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))))->(void)
(	O
&	O
iter	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
)	O
;	O
return	O
true	int
;	O
}	O
static	O
bool	bool
rec_db_index_p	(*(long),long)->(bool)
(	O
size_t	long
*	O
index	(*(char),int)->(*(char))
,	O
size_t	long
num	*(int)
)	O
{	O
while	O
(	O
(	O
index	(*(char),int)->(*(char))
[	O
0	int
]	O
!=	O
REC_Q_NOINDEX	O
)	O
||	O
(	O
index	(*(char),int)->(*(char))
[	O
1	int
]	O
!=	O
REC_Q_NOINDEX	O
)	O
)	O
{	O
bool	bool
found	bool
=	O
false	int
;	O
size_t	long
min	int
=	O
index	(*(char),int)->(*(char))
[	O
0	int
]	O
;	O
size_t	long
max	int
=	O
index	(*(char),int)->(*(char))
[	O
1	int
]	O
;	O
if	O
(	O
max	int
==	O
REC_Q_NOINDEX	O
)	O
{	O
found	bool
=	O
(	O
num	*(int)
==	O
min	int
)	O
;	O
}	O
else	O
{	O
found	bool
=	O
(	O
(	O
num	*(int)
>=	O
min	int
)	O
&&	O
(	O
num	*(int)
<=	O
max	int
)	O
)	O
;	O
}	O
if	O
(	O
found	bool
)	O
{	O
return	O
true	int
;	O
}	O
index	(*(char),int)->(*(char))
=	O
index	(*(char),int)->(*(char))
+	O
2	int
;	O
}	O
return	O
false	int
;	O
}	O
static	O
void	O
rec_db_add_random_indexes	(*(*(long)),long,long)->(void)
(	O
size_t	long
*	O
*	O
index	(*(char),int)->(*(char))
,	O
size_t	long
num	*(int)
,	O
size_t	long
limit	long
)	O
{	O
size_t	long
i	long
;	O
char	O
random_state	array(char)
[	O
128	int
]	O
;	O
struct	O
random_data	struct(*(int),*(int),*(int),int,int,int,*(int))
random_data	struct(*(int),*(int),*(int),int,int,int,*(int))
;	O
*	O
index	(*(char),int)->(*(char))
=	O
malloc	(long)->(*(void))
(	O
sizeof	O
(	O
size_t	long
)	O
*	O
(	O
(	O
num	*(int)
+	O
1	int
)	O
*	O
2	int
)	O
)	O
;	O
if	O
(	O
*	O
index	(*(char),int)->(*(char))
==	O
NULL	O
)	O
{	O
return	O
;	O
}	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
(	O
(	O
num	*(int)
+	O
1	int
)	O
*	O
2	int
)	O
;	O
i	long
++	O
)	O
{	O
(	O
*	O
index	(*(char),int)->(*(char))
)	O
[	O
i	long
]	O
=	O
REC_Q_NOINDEX	O
;	O
}	O
memset	(*(void),int,long)->(*(void))
(	O
&	O
random_data	struct(*(int),*(int),*(int),int,int,int,*(int))
,	O
0	int
,	O
sizeof	O
(	O
random_data	struct(*(int),*(int),*(int),int,int,int,*(int))
)	O
)	O
;	O
initstate_r	(int,*(char),long,*(struct(*(int),*(int),*(int),int,int,int,*(int))))->(int)
(	O
time	struct(long,long)
(	O
NULL	O
)	O
,	O
(	O
char	O
*	O
)	O
&	O
random_state	array(char)
,	O
128	int
,	O
&	O
random_data	struct(*(int),*(int),*(int),int,int,int,*(int))
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
(	O
num	*(int)
*	O
2	int
)	O
;	O
i	long
=	O
i	long
+	O
2	int
)	O
{	O
size_t	long
random_value	long
=	O
0	int
;	O
random_r	(*(struct(*(int),*(int),*(int),int,int,int,*(int))),*(int))->(int)
(	O
&	O
random_data	struct(*(int),*(int),*(int),int,int,int,*(int))
,	O
(	O
int32_t	int
*	O
)	O
&	O
random_value	long
)	O
;	O
random_value	long
=	O
random_value	long
%	O
limit	long
;	O
if	O
(	O
rec_db_index_p	(*(long),long)->(bool)
(	O
*	O
index	(*(char),int)->(*(char))
,	O
random_value	long
)	O
)	O
{	O
size_t	long
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
limit	long
;	O
i	long
++	O
)	O
{	O
if	O
(	O
!	O
rec_db_index_p	(*(long),long)->(bool)
(	O
*	O
index	(*(char),int)->(*(char))
,	O
i	long
)	O
)	O
{	O
random_value	long
=	O
i	long
;	O
break	O
;	O
}	O
}	O
}	O
(	O
*	O
index	(*(char),int)->(*(char))
)	O
[	O
i	long
]	O
=	O
random_value	long
;	O
(	O
*	O
index	(*(char),int)->(*(char))
)	O
[	O
i	long
+	O
1	int
]	O
=	O
REC_Q_NOINDEX	O
;	O
}	O
}	O
static	O
bool	bool
rec_db_record_selected_p	(long,*(struct),*(long),*(struct),*(char),bool)->(bool)
(	O
size_t	long
num_record	long
,	O
rec_record_t	*(struct)
record	*(struct)
,	O
size_t	long
*	O
index	(*(char),int)->(*(char))
,	O
rec_sex_t	*(struct)
sex	*(struct)
,	O
const	O
char	O
*	O
fast_string	*(char)
,	O
bool	bool
case_insensitive_p	bool
)	O
{	O
if	O
(	O
fast_string	*(char)
)	O
{	O
return	O
rec_record_contains_value	(*(struct),*(char),bool)->(bool)
(	O
record	*(struct)
,	O
fast_string	*(char)
,	O
case_insensitive_p	bool
)	O
;	O
}	O
if	O
(	O
sex	*(struct)
)	O
{	O
bool	bool
eval_status	bool
;	O
return	O
rec_sex_eval	(*(struct),*(struct),*(bool))->(bool)
(	O
sex	*(struct)
,	O
record	*(struct)
,	O
&	O
eval_status	bool
)	O
;	O
}	O
if	O
(	O
index	(*(char),int)->(*(char))
)	O
{	O
return	O
rec_db_index_p	(*(long),long)->(bool)
(	O
index	(*(char),int)->(*(char))
,	O
num_record	long
)	O
;	O
}	O
return	O
true	int
;	O
}	O
static	O
rec_record_t	*(struct)
rec_db_process_fex	(*(struct(long,*(struct),*(struct))),*(struct),*(struct),*(struct))->(*(struct))
(	O
rec_db_t	*(struct)
db	*(struct)
,	O
rec_rset_t	*(struct)
rset	*(struct)
,	O
rec_record_t	*(struct)
record	*(struct)
,	O
rec_fex_t	*(struct)
fex	*(struct)
)	O
{	O
rec_record_t	*(struct)
res	*(struct)
=	O
NULL	O
;	O
size_t	long
fex_size	long
,	O
i	long
,	O
j	long
=	O
0	int
;	O
if	O
(	O
!	O
fex	*(struct)
)	O
{	O
return	O
rec_record_dup	(*(struct))->(*(struct))
(	O
record	*(struct)
)	O
;	O
}	O
res	*(struct)
=	O
rec_record_new	()->(*(struct))
(	O
)	O
;	O
if	O
(	O
!	O
res	*(struct)
)	O
{	O
return	O
NULL	O
;	O
}	O
fex_size	long
=	O
rec_fex_size	(*(struct))->(long)
(	O
fex	*(struct)
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
fex_size	long
;	O
i	long
++	O
)	O
{	O
rec_fex_elem_t	*(struct)
elem	*(struct)
=	O
rec_fex_get	(*(struct),long)->(*(struct))
(	O
fex	*(struct)
,	O
i	long
)	O
;	O
const	O
char	O
*	O
field_name	*(char)
=	O
rec_fex_elem_field_name	(*(struct))->(*(char))
(	O
elem	*(struct)
)	O
;	O
const	O
char	O
*	O
alias	*(char)
=	O
rec_fex_elem_rewrite_to	(*(struct))->(*(char))
(	O
elem	*(struct)
)	O
;	O
const	O
char	O
*	O
function_name	*(char)
=	O
rec_fex_elem_function_name	(*(struct))->(*(char))
(	O
elem	*(struct)
)	O
;	O
size_t	long
min	int
=	O
rec_fex_elem_min	(*(struct))->(int)
(	O
elem	*(struct)
)	O
;	O
size_t	long
max	int
=	O
rec_fex_elem_max	(*(struct))->(int)
(	O
elem	*(struct)
)	O
;	O
if	O
(	O
function_name	*(char)
)	O
{	O
rec_aggregate_t	*((*(struct),*(struct),*(char))->(*(char)))
func	*((*(struct),*(struct),*(char))->(*(char)))
=	O
rec_aggregate_reg_get	(*(struct),*(char))->(*((*(struct),*(struct),*(char))->(*(char))))
(	O
rec_db_aggregates	(*(struct))->(*(struct))
(	O
db	*(struct)
)	O
,	O
function_name	*(char)
)	O
;	O
if	O
(	O
func	*((*(struct),*(struct),*(char))->(*(char)))
)	O
{	O
char	O
*	O
func_res	*(char)
=	O
(	O
func	*((*(struct),*(struct),*(char))->(*(char)))
)	O
(	O
rset	*(struct)
,	O
record	*(struct)
,	O
field_name	*(char)
)	O
;	O
if	O
(	O
func_res	*(char)
)	O
{	O
rec_field_t	*(struct)
agg_field	*(struct)
=	O
NULL	O
;	O
char	O
*	O
agg_field_name	*(char)
=	O
NULL	O
;	O
char	O
*	O
agg_field_value	*(char)
=	O
func_res	*(char)
;	O
if	O
(	O
alias	*(char)
)	O
{	O
agg_field_name	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
alias	*(char)
)	O
;	O
if	O
(	O
!	O
agg_field_name	*(char)
)	O
{	O
return	O
NULL	O
;	O
}	O
}	O
else	O
{	O
agg_field_name	*(char)
=	O
malloc	(long)->(*(void))
(	O
strlen	(*(char))->(long)
(	O
function_name	*(char)
)	O
+	O
1	int
+	O
strlen	(*(char))->(long)
(	O
field_name	*(char)
)	O
+	O
1	int
)	O
;	O
if	O
(	O
!	O
agg_field_name	*(char)
)	O
{	O
return	O
NULL	O
;	O
}	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
agg_field_name	*(char)
,	O
function_name	*(char)
,	O
strlen	(*(char))->(long)
(	O
function_name	*(char)
)	O
+	O
1	int
)	O
;	O
strcat	(*(char),*(char))->(*(char))
(	O
agg_field_name	*(char)
,	O
"_"	*(char)
)	O
;	O
strcat	(*(char),*(char))->(*(char))
(	O
agg_field_name	*(char)
,	O
field_name	*(char)
)	O
;	O
}	O
agg_field	*(struct)
=	O
rec_field_new	(*(char),*(char))->(*(struct))
(	O
agg_field_name	*(char)
,	O
agg_field_value	*(char)
)	O
;	O
if	O
(	O
!	O
agg_field	*(struct)
)	O
{	O
return	O
NULL	O
;	O
}	O
if	O
(	O
!	O
rec_mset_append	(*(struct),int,*(void),int)->(*(struct))
(	O
rec_record_mset	(*(struct))->(*(struct))
(	O
res	*(struct)
)	O
,	O
MSET_FIELD	int
,	O
(	O
void	O
*	O
)	O
agg_field	*(struct)
,	O
MSET_FIELD	int
)	O
)	O
{	O
return	O
NULL	O
;	O
}	O
free	(*(void))->(void)
(	O
agg_field_name	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
func_res	*(char)
)	O
;	O
}	O
}	O
}	O
else	O
{	O
if	O
(	O
(	O
min	int
==	O
-	O
1	int
)	O
&&	O
(	O
max	int
==	O
-	O
1	int
)	O
)	O
{	O
min	int
=	O
0	int
;	O
max	int
=	O
rec_record_get_num_fields_by_name	(*(struct),*(char))->(long)
(	O
record	*(struct)
,	O
field_name	*(char)
)	O
;	O
}	O
else	O
if	O
(	O
max	int
==	O
-	O
1	int
)	O
{	O
max	int
=	O
min	int
+	O
1	int
;	O
}	O
else	O
{	O
max	int
++	O
;	O
}	O
for	O
(	O
j	long
=	O
min	int
;	O
j	long
<	O
max	int
;	O
j	long
++	O
)	O
{	O
rec_field_t	*(struct)
res_field	*(struct)
=	O
NULL	O
;	O
rec_field_t	*(struct)
field	*(struct)
=	O
rec_record_get_field_by_name	(*(struct),*(char),long)->(*(struct))
(	O
record	*(struct)
,	O
field_name	*(char)
,	O
j	long
)	O
;	O
if	O
(	O
!	O
field	*(struct)
)	O
{	O
continue	O
;	O
}	O
res_field	*(struct)
=	O
rec_field_dup	(*(struct))->(*(struct))
(	O
field	*(struct)
)	O
;	O
if	O
(	O
alias	*(char)
)	O
{	O
if	O
(	O
!	O
rec_field_set_name	(*(struct),*(char))->(bool)
(	O
res_field	*(struct)
,	O
alias	*(char)
)	O
)	O
{	O
return	O
NULL	O
;	O
}	O
}	O
if	O
(	O
!	O
rec_mset_append	(*(struct),int,*(void),int)->(*(struct))
(	O
rec_record_mset	(*(struct))->(*(struct))
(	O
res	*(struct)
)	O
,	O
MSET_FIELD	int
,	O
(	O
void	O
*	O
)	O
res_field	*(struct)
,	O
MSET_FIELD	int
)	O
)	O
{	O
return	O
NULL	O
;	O
}	O
}	O
}	O
}	O
if	O
(	O
record	*(struct)
)	O
{	O
rec_record_set_location	(*(struct),long)->(void)
(	O
res	*(struct)
,	O
rec_record_location	(*(struct))->(long)
(	O
record	*(struct)
)	O
)	O
;	O
rec_record_set_char_location	(*(struct),long)->(void)
(	O
res	*(struct)
,	O
rec_record_char_location	(*(struct))->(long)
(	O
record	*(struct)
)	O
)	O
;	O
}	O
return	O
res	*(struct)
;	O
}	O
static	O
bool	bool
rec_db_rset_equals_fn	(*(void),*(void))->(bool)
(	O
const	O
void	O
*	O
elt1	*(void)
,	O
const	O
void	O
*	O
elt2	*(void)
)	O
{	O
return	O
false	int
;	O
}	O
static	O
void	O
rec_db_rset_dispose_fn	(*(void))->(void)
(	O
const	O
void	O
*	O
elt	*(void)
)	O
{	O
rec_rset_t	*(struct)
rset	*(struct)
;	O
rset	*(struct)
=	O
(	O
rec_rset_t	*(struct)
)	O
elt	*(void)
;	O
rec_rset_destroy	(*(struct))->(void)
(	O
rset	*(struct)
)	O
;	O
}	O
