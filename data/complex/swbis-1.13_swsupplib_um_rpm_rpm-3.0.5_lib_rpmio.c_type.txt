typedef	O
struct	O
_FDSTACK_s	struct(*(struct(*((*(void),*(char),long)->(long)),*((*(void),*(char),long)->(long)),*((*(void),long,int)->(int)),*((*(void))->(int)),*((*(void),*(char),*(char),int)->(*(struct`))),*((*(struct`),*(char),*(char),int)->(*(struct`))),*((*(char),*(char),int)->(*(struct`))),*((*(void))->(int)),*((*(char),int,int)->(*(struct`))),*((*(char),*(char))->(*(struct`))),*((*(struct`))->(*(void))),*((*(struct`))->(int)),*((*(char),int)->(int)),*((*(char))->(int)),*((*(char))->(int)),*((*(char),*(char))->(int)),*((*(char))->(int)))),*(void),int)
{	O
FDIO_t	*(struct)
io	*(struct(*((*(void),*(char),long)->(long)),*((*(void),*(char),long)->(long)),*((*(void),long,int)->(int)),*((*(void))->(int)),*((*(void),*(char),*(char),int)->(*(struct`))),*((*(struct`),*(char),*(char),int)->(*(struct`))),*((*(char),*(char),int)->(*(struct`))),*((*(void))->(int)),*((*(char),int,int)->(*(struct`))),*((*(char),*(char))->(*(struct`))),*((*(struct`))->(*(void))),*((*(struct`))->(int)),*((*(char),int)->(int)),*((*(char))->(int)),*((*(char))->(int)),*((*(char),*(char))->(int)),*((*(char))->(int))))
;	O
void	O
*	O
fp	*(void)
;	O
int	O
fdno	int
;	O
}	O
FDSTACK_t	struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)
;	O
typedef	O
struct	O
{	O
int	O
count	long
;	O
off_t	long
bytes	long
;	O
time_t	long
msecs	long
;	O
}	O
OPSTAT_t	struct(int,long,long)
;	O
typedef	O
struct	O
{	O
struct	O
timeval	struct(long,long)
create	struct(long,long)
;	O
struct	O
timeval	struct(long,long)
begin	struct(long,long)
;	O
OPSTAT_t	struct(int,long,long)
ops	array(struct(int,long,long))
[	O
4	int
]	O
;	O
}	O
FDSTAT_t	struct(struct(long,long),struct(long,long),array(struct(int,long,long)))
;	O
struct	O
_FD_s	struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*(void),int,long,long,int,int,int,*(void),*(struct(struct(long,long),struct(long,long),array(struct(int,long,long)))),int,int,long,long)
{	O
int	O
nrefs	int
;	O
int	O
flags	int
;	O
int	O
magic	array(char)
;	O
int	O
nfps	int
;	O
FDSTACK_t	struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)
fps	array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int))
[	O
8	int
]	O
;	O
int	O
urlType	int
;	O
void	O
*	O
url	*(char)
;	O
int	O
rd_timeoutsecs	int
;	O
ssize_t	long
bytesRemain	long
;	O
ssize_t	long
contentLength	long
;	O
int	O
persist	int
;	O
int	O
wr_chunked	int
;	O
int	O
syserrno	int
;	O
const	O
void	O
*	O
errcookie	*(void)
;	O
FDSTAT_t	struct(struct(long,long),struct(long,long),array(struct(int,long,long)))
*	O
stats	*(struct(struct(long,long),struct(long,long),array(struct(int,long,long))))
;	O
int	O
ftpFileDoneNeeded	int
;	O
unsigned	O
int	O
firstFree	int
;	O
long	O
int	O
fileSize	long
;	O
long	O
int	O
fd_cpioPos	long
;	O
}	O
;	O
int	O
noLibio	int
=	O
1	int
;	O
static	O
int	O
ftpTimeoutSecs	int
=	O
TIMEOUT_SECS	int
;	O
static	O
int	O
httpTimeoutSecs	int
=	O
TIMEOUT_SECS	int
;	O
int	O
_ftp_debug	int
=	O
0	int
;	O
int	O
_rpmio_debug	int
=	O
0	int
;	O
const	O
FDIO_t	*(struct)
fdGetIo	(*(struct))->(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))))
(	O
FD_t	*(struct)
fd	*(struct)
)	O
{	O
FDSANE	O
(	O
fd	*(struct)
)	O
;	O
return	O
fd	*(struct)
->	O
fps	array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int))
[	O
fd	*(struct)
->	O
nfps	int
]	O
.	O
io	*(struct(*((*(void),*(char),long)->(long)),*((*(void),*(char),long)->(long)),*((*(void),long,int)->(int)),*((*(void))->(int)),*((*(void),*(char),*(char),int)->(*(struct`))),*((*(struct`),*(char),*(char),int)->(*(struct`))),*((*(char),*(char),int)->(*(struct`))),*((*(void))->(int)),*((*(char),int,int)->(*(struct`))),*((*(char),*(char))->(*(struct`))),*((*(struct`))->(*(void))),*((*(struct`))->(int)),*((*(char),int)->(int)),*((*(char))->(int)),*((*(char))->(int)),*((*(char),*(char))->(int)),*((*(char))->(int))))
;	O
}	O
void	O
fdSetIo	(*(struct),*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))))->(void)
(	O
FD_t	*(struct)
fd	*(struct)
,	O
FDIO_t	*(struct)
io	*(struct(*((*(void),*(char),long)->(long)),*((*(void),*(char),long)->(long)),*((*(void),long,int)->(int)),*((*(void))->(int)),*((*(void),*(char),*(char),int)->(*(struct`))),*((*(struct`),*(char),*(char),int)->(*(struct`))),*((*(char),*(char),int)->(*(struct`))),*((*(void))->(int)),*((*(char),int,int)->(*(struct`))),*((*(char),*(char))->(*(struct`))),*((*(struct`))->(*(void))),*((*(struct`))->(int)),*((*(char),int)->(int)),*((*(char))->(int)),*((*(char))->(int)),*((*(char),*(char))->(int)),*((*(char))->(int))))
)	O
{	O
FDSANE	O
(	O
fd	*(struct)
)	O
;	O
fd	*(struct)
->	O
fps	array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int))
[	O
fd	*(struct)
->	O
nfps	int
]	O
.	O
io	*(struct(*((*(void),*(char),long)->(long)),*((*(void),*(char),long)->(long)),*((*(void),long,int)->(int)),*((*(void))->(int)),*((*(void),*(char),*(char),int)->(*(struct`))),*((*(struct`),*(char),*(char),int)->(*(struct`))),*((*(char),*(char),int)->(*(struct`))),*((*(void))->(int)),*((*(char),int,int)->(*(struct`))),*((*(char),*(char))->(*(struct`))),*((*(struct`))->(*(void))),*((*(struct`))->(int)),*((*(char),int)->(int)),*((*(char))->(int)),*((*(char))->(int)),*((*(char),*(char))->(int)),*((*(char))->(int))))
=	O
io	*(struct(*((*(void),*(char),long)->(long)),*((*(void),*(char),long)->(long)),*((*(void),long,int)->(int)),*((*(void))->(int)),*((*(void),*(char),*(char),int)->(*(struct`))),*((*(struct`),*(char),*(char),int)->(*(struct`))),*((*(char),*(char),int)->(*(struct`))),*((*(void))->(int)),*((*(char),int,int)->(*(struct`))),*((*(char),*(char))->(*(struct`))),*((*(struct`))->(*(void))),*((*(struct`))->(int)),*((*(char),int)->(int)),*((*(char))->(int)),*((*(char))->(int)),*((*(char),*(char))->(int)),*((*(char))->(int))))
;	O
return	O
;	O
}	O
inline	O
void	O
*	O
fdGetFp	(*(struct))->(*(void))
(	O
FD_t	*(struct)
fd	*(struct)
)	O
{	O
FDSANE	O
(	O
fd	*(struct)
)	O
;	O
return	O
fd	*(struct)
->	O
fps	array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int))
[	O
fd	*(struct)
->	O
nfps	int
]	O
.	O
fp	*(void)
;	O
}	O
static	O
inline	O
void	O
fdSetFp	(*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*(void),int,long,long,int,int,int,*(void),*(struct(struct`,struct`,array(struct(int,long,long)))),int,int,long,long)),*(void))->(void)
(	O
FD_t	*(struct)
fd	*(struct)
,	O
void	O
*	O
fp	*(void)
)	O
{	O
FDSANE	O
(	O
fd	*(struct)
)	O
;	O
fd	*(struct)
->	O
fps	array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int))
[	O
fd	*(struct)
->	O
nfps	int
]	O
.	O
fp	*(void)
=	O
fp	*(void)
;	O
}	O
static	O
inline	O
int	O
fdGetFdno	(*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*(void),int,long,long,int,int,int,*(void),*(struct(struct`,struct`,array(struct(int,long,long)))),int,int,long,long)))->(int)
(	O
FD_t	*(struct)
fd	*(struct)
)	O
{	O
FDSANE	O
(	O
fd	*(struct)
)	O
;	O
return	O
fd	*(struct)
->	O
fps	array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int))
[	O
fd	*(struct)
->	O
nfps	int
]	O
.	O
fdno	int
;	O
}	O
void	O
fdSetFdno	(*(struct),int)->(void)
(	O
FD_t	*(struct)
fd	*(struct)
,	O
int	O
fdno	int
)	O
{	O
FDSANE	O
(	O
fd	*(struct)
)	O
;	O
fd	*(struct)
->	O
fps	array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int))
[	O
fd	*(struct)
->	O
nfps	int
]	O
.	O
fdno	int
=	O
fdno	int
;	O
}	O
void	O
fdSetContentLength	(*(struct),long)->(void)
(	O
FD_t	*(struct)
fd	*(struct)
,	O
ssize_t	long
contentLength	long
)	O
{	O
FDSANE	O
(	O
fd	*(struct)
)	O
;	O
fd	*(struct)
->	O
contentLength	long
=	O
fd	*(struct)
->	O
bytesRemain	long
=	O
contentLength	long
;	O
}	O
static	O
const	O
char	O
*	O
fdbg	(*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*(void),int,long,long,int,int,int,*(void),*(struct(struct`,struct`,array(struct(int,long,long)))),int,int,long,long)))->(*(char))
(	O
FD_t	*(struct)
fd	*(struct)
)	O
{	O
static	O
char	O
buf	*(char)
[	O
BUFSIZ	int
]	O
;	O
char	O
*	O
be	*(char)
=	O
buf	*(char)
;	O
int	O
i	int
;	O
if	O
(	O
fd	*(struct)
->	O
bytesRemain	long
!=	O
-	O
1	int
)	O
{	O
sprintf	(*(char),*(char))->(int)
(	O
be	*(char)
,	O
" clen %d"	*(char)
,	O
fd	*(struct)
->	O
bytesRemain	long
)	O
;	O
be	*(char)
+=	O
strlen	(*(char))->(long)
(	O
be	*(char)
)	O
;	O
}	O
if	O
(	O
fd	*(struct)
->	O
wr_chunked	int
)	O
{	O
strcpy	(*(char),*(char))->(*(char))
(	O
be	*(char)
,	O
" chunked"	*(char)
)	O
;	O
be	*(char)
+=	O
strlen	(*(char))->(long)
(	O
be	*(char)
)	O
;	O
}	O
*	O
be	*(char)
++	O
=	O
'\t'	O
;	O
for	O
(	O
i	int
=	O
fd	*(struct)
->	O
nfps	int
;	O
i	int
>=	O
0	int
;	O
i	int
--	O
)	O
{	O
FDSTACK_t	struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)
*	O
fps	array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int))
=	O
&	O
fd	*(struct)
->	O
fps	array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int))
[	O
i	int
]	O
;	O
if	O
(	O
i	int
!=	O
fd	*(struct)
->	O
nfps	int
)	O
*	O
be	*(char)
++	O
=	O
' '	O
;	O
*	O
be	*(char)
++	O
=	O
'|'	O
;	O
*	O
be	*(char)
++	O
=	O
' '	O
;	O
if	O
(	O
fps	array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int))
->	O
io	*(struct(*((*(void),*(char),long)->(long)),*((*(void),*(char),long)->(long)),*((*(void),long,int)->(int)),*((*(void))->(int)),*((*(void),*(char),*(char),int)->(*(struct`))),*((*(struct`),*(char),*(char),int)->(*(struct`))),*((*(char),*(char),int)->(*(struct`))),*((*(void))->(int)),*((*(char),int,int)->(*(struct`))),*((*(char),*(char))->(*(struct`))),*((*(struct`))->(*(void))),*((*(struct`))->(int)),*((*(char),int)->(int)),*((*(char))->(int)),*((*(char))->(int)),*((*(char),*(char))->(int)),*((*(char))->(int))))
==	O
fdio	*(struct(*((*(void),*(char),long)->(long)),*((*(void),*(char),long)->(long)),*((*(void),long,int)->(int)),*((*(void))->(int)),*((*(void),*(char),*(char),int)->(*(struct`))),*((*(struct`),*(char),*(char),int)->(*(struct`))),*((*(char),*(char),int)->(*(struct`))),*((*(void))->(int)),*((*(char),int,int)->(*(struct`))),*((*(char),*(char))->(*(struct`))),*((*(struct`))->(*(void))),*((*(struct`))->(int)),*((*(char),int)->(int)),*((*(char))->(int)),*((*(char))->(int)),*((*(char),*(char))->(int)),*((*(char))->(int))))
)	O
{	O
sprintf	(*(char),*(char))->(int)
(	O
be	*(char)
,	O
"FD %d fp %p"	*(char)
,	O
fps	array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int))
->	O
fdno	int
,	O
fps	array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int))
->	O
fp	*(void)
)	O
;	O
}	O
else	O
if	O
(	O
fps	array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int))
->	O
io	*(struct(*((*(void),*(char),long)->(long)),*((*(void),*(char),long)->(long)),*((*(void),long,int)->(int)),*((*(void))->(int)),*((*(void),*(char),*(char),int)->(*(struct`))),*((*(struct`),*(char),*(char),int)->(*(struct`))),*((*(char),*(char),int)->(*(struct`))),*((*(void))->(int)),*((*(char),int,int)->(*(struct`))),*((*(char),*(char))->(*(struct`))),*((*(struct`))->(*(void))),*((*(struct`))->(int)),*((*(char),int)->(int)),*((*(char))->(int)),*((*(char))->(int)),*((*(char),*(char))->(int)),*((*(char))->(int))))
==	O
ufdio	*(struct(*((*(void),*(char),long)->(long)),*((*(void),*(char),long)->(long)),*((*(void),long,int)->(int)),*((*(void))->(int)),*((*(void),*(char),*(char),int)->(*(struct`))),*((*(struct`),*(char),*(char),int)->(*(struct`))),*((*(char),*(char),int)->(*(struct`))),*((*(void))->(int)),*((*(char),int,int)->(*(struct`))),*((*(char),*(char))->(*(struct`))),*((*(struct`))->(*(void))),*((*(struct`))->(int)),*((*(char),int)->(int)),*((*(char))->(int)),*((*(char))->(int)),*((*(char),*(char))->(int)),*((*(char))->(int))))
)	O
{	O
sprintf	(*(char),*(char))->(int)
(	O
be	*(char)
,	O
"UFD %d fp %p"	*(char)
,	O
fps	array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int))
->	O
fdno	int
,	O
fps	array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int))
->	O
fp	*(void)
)	O
;	O
}	O
else	O
if	O
(	O
fps	array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int))
->	O
io	*(struct(*((*(void),*(char),long)->(long)),*((*(void),*(char),long)->(long)),*((*(void),long,int)->(int)),*((*(void))->(int)),*((*(void),*(char),*(char),int)->(*(struct`))),*((*(struct`),*(char),*(char),int)->(*(struct`))),*((*(char),*(char),int)->(*(struct`))),*((*(void))->(int)),*((*(char),int,int)->(*(struct`))),*((*(char),*(char))->(*(struct`))),*((*(struct`))->(*(void))),*((*(struct`))->(int)),*((*(char),int)->(int)),*((*(char))->(int)),*((*(char))->(int)),*((*(char),*(char))->(int)),*((*(char))->(int))))
==	O
fadio	*(struct(*((*(void),*(char),long)->(long)),*((*(void),*(char),long)->(long)),*((*(void),long,int)->(int)),*((*(void))->(int)),*((*(void),*(char),*(char),int)->(*(struct`))),*((*(struct`),*(char),*(char),int)->(*(struct`))),*((*(char),*(char),int)->(*(struct`))),*((*(void))->(int)),*((*(char),int,int)->(*(struct`))),*((*(char),*(char))->(*(struct`))),*((*(struct`))->(*(void))),*((*(struct`))->(int)),*((*(char),int)->(int)),*((*(char))->(int)),*((*(char))->(int)),*((*(char),*(char))->(int)),*((*(char))->(int))))
)	O
{	O
sprintf	(*(char),*(char))->(int)
(	O
be	*(char)
,	O
"FAD %d fp %p"	*(char)
,	O
fps	array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int))
->	O
fdno	int
,	O
fps	array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int))
->	O
fp	*(void)
)	O
;	O
}	O
else	O
if	O
(	O
fps	array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int))
->	O
io	*(struct(*((*(void),*(char),long)->(long)),*((*(void),*(char),long)->(long)),*((*(void),long,int)->(int)),*((*(void))->(int)),*((*(void),*(char),*(char),int)->(*(struct`))),*((*(struct`),*(char),*(char),int)->(*(struct`))),*((*(char),*(char),int)->(*(struct`))),*((*(void))->(int)),*((*(char),int,int)->(*(struct`))),*((*(char),*(char))->(*(struct`))),*((*(struct`))->(*(void))),*((*(struct`))->(int)),*((*(char),int)->(int)),*((*(char))->(int)),*((*(char))->(int)),*((*(char),*(char))->(int)),*((*(char))->(int))))
==	O
fpio	*(struct(*((*(void),*(char),long)->(long)),*((*(void),*(char),long)->(long)),*((*(void),long,int)->(int)),*((*(void))->(int)),*((*(void),*(char),*(char),int)->(*(struct`))),*((*(struct`),*(char),*(char),int)->(*(struct`))),*((*(char),*(char),int)->(*(struct`))),*((*(void))->(int)),*((*(char),int,int)->(*(struct`))),*((*(char),*(char))->(*(struct`))),*((*(struct`))->(*(void))),*((*(struct`))->(int)),*((*(char),int)->(int)),*((*(char))->(int)),*((*(char))->(int)),*((*(char),*(char))->(int)),*((*(char))->(int))))
)	O
{	O
sprintf	(*(char),*(char))->(int)
(	O
be	*(char)
,	O
"%s %p(%d) fdno %d"	*(char)
,	O
(	O
fps	array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int))
->	O
fdno	int
<	O
0	int
?	O
"LIBIO"	*(char)
:	O
"FP"	*(char)
)	O
,	O
fps	array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int))
->	O
fp	*(void)
,	O
fileno	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
(	O
(	O
FILE	struct
*	O
)	O
fps	array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int))
->	O
fp	*(void)
)	O
)	O
,	O
fps	array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int))
->	O
fdno	int
)	O
;	O
}	O
else	O
{	O
sprintf	(*(char),*(char))->(int)
(	O
be	*(char)
,	O
"??? io %p fp %p fdno %d ???"	*(char)
,	O
fps	array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int))
->	O
io	*(struct(*((*(void),*(char),long)->(long)),*((*(void),*(char),long)->(long)),*((*(void),long,int)->(int)),*((*(void))->(int)),*((*(void),*(char),*(char),int)->(*(struct`))),*((*(struct`),*(char),*(char),int)->(*(struct`))),*((*(char),*(char),int)->(*(struct`))),*((*(void))->(int)),*((*(char),int,int)->(*(struct`))),*((*(char),*(char))->(*(struct`))),*((*(struct`))->(*(void))),*((*(struct`))->(int)),*((*(char),int)->(int)),*((*(char))->(int)),*((*(char))->(int)),*((*(char),*(char))->(int)),*((*(char))->(int))))
,	O
fps	array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int))
->	O
fp	*(void)
,	O
fps	array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int))
->	O
fdno	int
)	O
;	O
}	O
be	*(char)
+=	O
strlen	(*(char))->(long)
(	O
be	*(char)
)	O
;	O
*	O
be	*(char)
=	O
'\0'	O
;	O
}	O
return	O
buf	*(char)
;	O
}	O
inline	O
void	O
fdPush	(*(struct),*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)->(void)
(	O
FD_t	*(struct)
fd	*(struct)
,	O
FDIO_t	*(struct)
io	*(struct(*((*(void),*(char),long)->(long)),*((*(void),*(char),long)->(long)),*((*(void),long,int)->(int)),*((*(void))->(int)),*((*(void),*(char),*(char),int)->(*(struct`))),*((*(struct`),*(char),*(char),int)->(*(struct`))),*((*(char),*(char),int)->(*(struct`))),*((*(void))->(int)),*((*(char),int,int)->(*(struct`))),*((*(char),*(char))->(*(struct`))),*((*(struct`))->(*(void))),*((*(struct`))->(int)),*((*(char),int)->(int)),*((*(char))->(int)),*((*(char))->(int)),*((*(char),*(char))->(int)),*((*(char))->(int))))
,	O
void	O
*	O
fp	*(void)
,	O
int	O
fdno	int
)	O
{	O
FDSANE	O
(	O
fd	*(struct)
)	O
;	O
if	O
(	O
fd	*(struct)
->	O
nfps	int
>=	O
(	O
sizeof	O
(	O
fd	*(struct)
->	O
fps	array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int))
)	O
/	O
sizeof	O
(	O
fd	*(struct)
->	O
fps	array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int))
[	O
0	int
]	O
)	O
-	O
1	int
)	O
)	O
return	O
;	O
fd	*(struct)
->	O
nfps	int
++	O
;	O
fdSetIo	(*(struct),*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))))->(void)
(	O
fd	*(struct)
,	O
io	*(struct(*((*(void),*(char),long)->(long)),*((*(void),*(char),long)->(long)),*((*(void),long,int)->(int)),*((*(void))->(int)),*((*(void),*(char),*(char),int)->(*(struct`))),*((*(struct`),*(char),*(char),int)->(*(struct`))),*((*(char),*(char),int)->(*(struct`))),*((*(void))->(int)),*((*(char),int,int)->(*(struct`))),*((*(char),*(char))->(*(struct`))),*((*(struct`))->(*(void))),*((*(struct`))->(int)),*((*(char),int)->(int)),*((*(char))->(int)),*((*(char))->(int)),*((*(char),*(char))->(int)),*((*(char))->(int))))
)	O
;	O
fdSetFp	(*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*(void),int,long,long,int,int,int,*(void),*(struct(struct`,struct`,array(struct(int,long,long)))),int,int,long,long)),*(void))->(void)
(	O
fd	*(struct)
,	O
fp	*(void)
)	O
;	O
fdSetFdno	(*(struct),int)->(void)
(	O
fd	*(struct)
,	O
fdno	int
)	O
;	O
DBGIO	O
(	O
0	int
,	O
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"==>\tfdPush(%p,%p,%p,%d) lvl %d %s\n"	*(char)
,	O
fd	*(struct)
,	O
io	*(struct(*((*(void),*(char),long)->(long)),*((*(void),*(char),long)->(long)),*((*(void),long,int)->(int)),*((*(void))->(int)),*((*(void),*(char),*(char),int)->(*(struct`))),*((*(struct`),*(char),*(char),int)->(*(struct`))),*((*(char),*(char),int)->(*(struct`))),*((*(void))->(int)),*((*(char),int,int)->(*(struct`))),*((*(char),*(char))->(*(struct`))),*((*(struct`))->(*(void))),*((*(struct`))->(int)),*((*(char),int)->(int)),*((*(char))->(int)),*((*(char))->(int)),*((*(char),*(char))->(int)),*((*(char))->(int))))
,	O
fp	*(void)
,	O
fdno	int
,	O
fd	*(struct)
->	O
nfps	int
,	O
fdbg	(*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*(void),int,long,long,int,int,int,*(void),*(struct(struct`,struct`,array(struct(int,long,long)))),int,int,long,long)))->(*(char))
(	O
fd	*(struct)
)	O
)	O
)	O
;	O
}	O
inline	O
void	O
fdPop	(*(struct))->(void)
(	O
FD_t	*(struct)
fd	*(struct)
)	O
{	O
FDSANE	O
(	O
fd	*(struct)
)	O
;	O
if	O
(	O
fd	*(struct)
->	O
nfps	int
<	O
0	int
)	O
return	O
;	O
DBGIO	O
(	O
0	int
,	O
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"==>\tfdPop(%p) lvl %d io %p fp %p fdno %d %s\n"	*(char)
,	O
fd	*(struct)
,	O
fd	*(struct)
->	O
nfps	int
,	O
fdGetIo	(*(struct))->(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))))
(	O
fd	*(struct)
)	O
,	O
fdGetFp	(*(struct))->(*(void))
(	O
fd	*(struct)
)	O
,	O
fdGetFdno	(*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*(void),int,long,long,int,int,int,*(void),*(struct(struct`,struct`,array(struct(int,long,long)))),int,int,long,long)))->(int)
(	O
fd	*(struct)
)	O
,	O
fdbg	(*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*(void),int,long,long,int,int,int,*(void),*(struct(struct`,struct`,array(struct(int,long,long)))),int,int,long,long)))->(*(char))
(	O
fd	*(struct)
)	O
)	O
)	O
;	O
fdSetIo	(*(struct),*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))))->(void)
(	O
fd	*(struct)
,	O
NULL	O
)	O
;	O
fdSetFp	(*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*(void),int,long,long,int,int,int,*(void),*(struct(struct`,struct`,array(struct(int,long,long)))),int,int,long,long)),*(void))->(void)
(	O
fd	*(struct)
,	O
NULL	O
)	O
;	O
fdSetFdno	(*(struct),int)->(void)
(	O
fd	*(struct)
,	O
-	O
1	int
)	O
;	O
fd	*(struct)
->	O
nfps	int
--	O
;	O
}	O
static	O
inline	O
void	O
fdstat_enter	(*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*(void),int,long,long,int,int,int,*(void),*(struct(struct`,struct`,array(struct(int,long,long)))),int,int,long,long)),int)->(void)
(	O
FD_t	*(struct)
fd	*(struct)
,	O
int	O
opx	int
)	O
{	O
if	O
(	O
fd	*(struct)
->	O
stats	*(struct(struct(long,long),struct(long,long),array(struct(int,long,long))))
==	O
NULL	O
)	O
return	O
;	O
fd	*(struct)
->	O
stats	*(struct(struct(long,long),struct(long,long),array(struct(int,long,long))))
->	O
ops	array(struct(int,long,long))
[	O
opx	int
]	O
.	O
count	long
++	O
;	O
gettimeofday	(*(struct(long,long)),*(void))->(int)
(	O
&	O
fd	*(struct)
->	O
stats	*(struct(struct(long,long),struct(long,long),array(struct(int,long,long))))
->	O
begin	struct(long,long)
,	O
NULL	O
)	O
;	O
}	O
static	O
inline	O
time_t	long
tvsub	(*(struct(long,long)),*(struct(long,long)))->(long)
(	O
struct	O
timeval	struct(long,long)
*	O
etv	*(struct(long,long))
,	O
struct	O
timeval	struct(long,long)
*	O
btv	*(struct(long,long))
)	O
{	O
time_t	long
secs	int
,	O
usecs	long
;	O
if	O
(	O
!	O
(	O
etv	*(struct(long,long))
&&	O
btv	*(struct(long,long))
)	O
)	O
return	O
0	int
;	O
secs	int
=	O
etv	*(struct(long,long))
->	O
tv_sec	long
-	O
btv	*(struct(long,long))
->	O
tv_sec	long
;	O
usecs	long
=	O
etv	*(struct(long,long))
->	O
tv_usec	long
-	O
btv	*(struct(long,long))
->	O
tv_usec	long
;	O
while	O
(	O
usecs	long
<	O
0	int
)	O
{	O
secs	int
++	O
;	O
usecs	long
+=	O
1000000	int
;	O
}	O
return	O
(	O
(	O
secs	int
*	O
1000	int
)	O
+	O
(	O
usecs	long
/	O
1000	int
)	O
)	O
;	O
}	O
static	O
inline	O
void	O
fdstat_exit	(*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*(void),int,long,long,int,int,int,*(void),*(struct(struct`,struct`,array(struct(int,long,long)))),int,int,long,long)),int,long)->(void)
(	O
FD_t	*(struct)
fd	*(struct)
,	O
int	O
opx	int
,	O
ssize_t	long
rc	long
)	O
{	O
struct	O
timeval	struct(long,long)
end	struct(long,long)
;	O
if	O
(	O
rc	long
==	O
-	O
1	int
)	O
fd	*(struct)
->	O
syserrno	int
=	O
errno	O
;	O
if	O
(	O
fd	*(struct)
->	O
stats	*(struct(struct(long,long),struct(long,long),array(struct(int,long,long))))
==	O
NULL	O
)	O
return	O
;	O
gettimeofday	(*(struct(long,long)),*(void))->(int)
(	O
&	O
end	struct(long,long)
,	O
NULL	O
)	O
;	O
if	O
(	O
rc	long
>=	O
0	int
)	O
{	O
switch	O
(	O
opx	int
)	O
{	O
case	O
FDSTAT_SEEK	int
:	O
fd	*(struct)
->	O
stats	*(struct(struct(long,long),struct(long,long),array(struct(int,long,long))))
->	O
ops	array(struct(int,long,long))
[	O
opx	int
]	O
.	O
bytes	long
=	O
rc	long
;	O
break	O
;	O
default	O
:	O
fd	*(struct)
->	O
stats	*(struct(struct(long,long),struct(long,long),array(struct(int,long,long))))
->	O
ops	array(struct(int,long,long))
[	O
opx	int
]	O
.	O
bytes	long
+=	O
rc	long
;	O
if	O
(	O
fd	*(struct)
->	O
bytesRemain	long
>	O
0	int
)	O
fd	*(struct)
->	O
bytesRemain	long
-=	O
rc	long
;	O
break	O
;	O
}	O
}	O
fd	*(struct)
->	O
stats	*(struct(struct(long,long),struct(long,long),array(struct(int,long,long))))
->	O
ops	array(struct(int,long,long))
[	O
opx	int
]	O
.	O
msecs	long
+=	O
tvsub	(*(struct(long,long)),*(struct(long,long)))->(long)
(	O
&	O
end	struct(long,long)
,	O
&	O
fd	*(struct)
->	O
stats	*(struct(struct(long,long),struct(long,long),array(struct(int,long,long))))
->	O
begin	struct(long,long)
)	O
;	O
fd	*(struct)
->	O
stats	*(struct(struct(long,long),struct(long,long),array(struct(int,long,long))))
->	O
begin	struct(long,long)
=	O
end	struct(long,long)
;	O
}	O
static	O
void	O
fdstat_print	(*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*(void),int,long,long,int,int,int,*(void),*(struct(struct`,struct`,array(struct(int,long,long)))),int,int,long,long)),*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(void)
(	O
FD_t	*(struct)
fd	*(struct)
,	O
const	O
char	O
*	O
msg	*(char)
,	O
FILE	struct
*	O
fp	*(void)
)	O
{	O
int	O
opx	int
;	O
if	O
(	O
fd	*(struct)
->	O
stats	*(struct(struct(long,long),struct(long,long),array(struct(int,long,long))))
==	O
NULL	O
)	O
return	O
;	O
for	O
(	O
opx	int
=	O
0	int
;	O
opx	int
<	O
4	int
;	O
opx	int
++	O
)	O
{	O
OPSTAT_t	struct(int,long,long)
*	O
ops	array(struct(int,long,long))
=	O
&	O
fd	*(struct)
->	O
stats	*(struct(struct(long,long),struct(long,long),array(struct(int,long,long))))
->	O
ops	array(struct(int,long,long))
[	O
opx	int
]	O
;	O
if	O
(	O
ops	array(struct(int,long,long))
->	O
count	long
<=	O
0	int
)	O
continue	O
;	O
switch	O
(	O
opx	int
)	O
{	O
case	O
FDSTAT_READ	int
:	O
if	O
(	O
msg	*(char)
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
fp	*(void)
,	O
"%s:"	*(char)
,	O
msg	*(char)
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
fp	*(void)
,	O
"%8d reads, %8ld total bytes in %d.%03d secs\n"	*(char)
,	O
ops	array(struct(int,long,long))
->	O
count	long
,	O
(	O
long	O
)	O
ops	array(struct(int,long,long))
->	O
bytes	long
,	O
(	O
int	O
)	O
(	O
ops	array(struct(int,long,long))
->	O
msecs	long
/	O
1000	int
)	O
,	O
(	O
int	O
)	O
(	O
ops	array(struct(int,long,long))
->	O
msecs	long
%	O
1000	int
)	O
)	O
;	O
break	O
;	O
case	O
FDSTAT_WRITE	int
:	O
if	O
(	O
msg	*(char)
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
fp	*(void)
,	O
"%s:"	*(char)
,	O
msg	*(char)
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
fp	*(void)
,	O
"%8d writes, %8ld total bytes in %d.%03d secs\n"	*(char)
,	O
ops	array(struct(int,long,long))
->	O
count	long
,	O
(	O
long	O
)	O
ops	array(struct(int,long,long))
->	O
bytes	long
,	O
(	O
int	O
)	O
(	O
ops	array(struct(int,long,long))
->	O
msecs	long
/	O
1000	int
)	O
,	O
(	O
int	O
)	O
(	O
ops	array(struct(int,long,long))
->	O
msecs	long
%	O
1000	int
)	O
)	O
;	O
break	O
;	O
case	O
FDSTAT_SEEK	int
:	O
break	O
;	O
case	O
FDSTAT_CLOSE	int
:	O
break	O
;	O
}	O
}	O
}	O
off_t	long
fdSize	(*(struct))->(long)
(	O
FD_t	*(struct)
fd	*(struct)
)	O
{	O
struct	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
sb	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
;	O
off_t	long
rc	long
=	O
-	O
1	int
;	O
FDSANE	O
(	O
fd	*(struct)
)	O
;	O
if	O
(	O
fd	*(struct)
->	O
contentLength	long
>=	O
0	int
)	O
rc	long
=	O
fd	*(struct)
->	O
contentLength	long
;	O
else	O
switch	O
(	O
fd	*(struct)
->	O
urlType	int
)	O
{	O
case	O
URL_IS_PATH	int
:	O
case	O
URL_IS_UNKNOWN	int
:	O
if	O
(	O
fstat	(int,*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))))->(int)
(	O
Fileno	(*(struct))->(int)
(	O
fd	*(struct)
)	O
,	O
&	O
sb	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
)	O
==	O
0	int
)	O
rc	long
=	O
sb	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_size	long
;	O
case	O
URL_IS_FTP	int
:	O
case	O
URL_IS_HTTP	int
:	O
case	O
URL_IS_DASH	int
:	O
break	O
;	O
}	O
return	O
rc	long
;	O
}	O
void	O
fdSetSyserrno	(*(struct),int,*(void))->(void)
(	O
FD_t	*(struct)
fd	*(struct)
,	O
int	O
syserrno	int
,	O
const	O
void	O
*	O
errcookie	*(void)
)	O
{	O
FDSANE	O
(	O
fd	*(struct)
)	O
;	O
fd	*(struct)
->	O
syserrno	int
=	O
syserrno	int
;	O
fd	*(struct)
->	O
errcookie	*(void)
=	O
errcookie	*(void)
;	O
}	O
int	O
fdGetRdTimeoutSecs	(*(struct))->(int)
(	O
FD_t	*(struct)
fd	*(struct)
)	O
{	O
FDSANE	O
(	O
fd	*(struct)
)	O
;	O
return	O
fd	*(struct)
->	O
rd_timeoutsecs	int
;	O
}	O
long	O
int	O
fdGetCpioPos	(*(struct))->(long)
(	O
FD_t	*(struct)
fd	*(struct)
)	O
{	O
FDSANE	O
(	O
fd	*(struct)
)	O
;	O
return	O
fd	*(struct)
->	O
fd_cpioPos	long
;	O
}	O
void	O
fdSetCpioPos	(*(struct),long)->(void)
(	O
FD_t	*(struct)
fd	*(struct)
,	O
long	O
int	O
cpioPos	long
)	O
{	O
FDSANE	O
(	O
fd	*(struct)
)	O
;	O
fd	*(struct)
->	O
fd_cpioPos	long
=	O
cpioPos	long
;	O
}	O
FD_t	*(struct)
fdDup	(int)->(*(struct))
(	O
int	O
fdno	int
)	O
{	O
FD_t	*(struct)
fd	*(struct)
;	O
int	O
nfdno	int
;	O
if	O
(	O
(	O
nfdno	int
=	O
dup	(int)->(int)
(	O
fdno	int
)	O
)	O
<	O
0	int
)	O
return	O
NULL	O
;	O
fd	*(struct)
=	O
fdNew	O
(	O
"open (fdDup)"	*(char)
)	O
;	O
fdSetFdno	(*(struct),int)->(void)
(	O
fd	*(struct)
,	O
nfdno	int
)	O
;	O
DBGIO	O
(	O
fd	*(struct)
,	O
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"==> fdDup(%d) fd %p %s\n"	*(char)
,	O
fdno	int
,	O
fd	*(struct)
,	O
fdbg	(*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*(void),int,long,long,int,int,int,*(void),*(struct(struct`,struct`,array(struct(int,long,long)))),int,int,long,long)))->(*(char))
(	O
fd	*(struct)
)	O
)	O
)	O
;	O
return	O
fd	*(struct)
;	O
}	O
static	O
inline	O
FD_t	*(struct)
c2f	(*(void))->(*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*(void),int,long,long,int,int,int,*(void),*(struct(struct`,struct`,array(struct(int,long,long)))),int,int,long,long)))
(	O
void	O
*	O
cookie	*(void)
)	O
{	O
FD_t	*(struct)
fd	*(struct)
=	O
(	O
FD_t	*(struct)
)	O
cookie	*(void)
;	O
FDSANE	O
(	O
fd	*(struct)
)	O
;	O
return	O
fd	*(struct)
;	O
}	O
static	O
inline	O
int	O
fdSeekNot	(*(void),long,int)->(int)
(	O
void	O
*	O
cookie	*(void)
,	O
off_t	long
pos	long
,	O
int	O
whence	int
)	O
{	O
FD_t	*(struct)
fd	*(struct)
=	O
c2f	(*(void))->(*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*(void),int,long,long,int,int,int,*(void),*(struct(struct`,struct`,array(struct(int,long,long)))),int,int,long,long)))
(	O
cookie	*(void)
)	O
;	O
FDSANE	O
(	O
fd	*(struct)
)	O
;	O
return	O
-	O
2	int
;	O
}	O
static	O
inline	O
FD_t	*(struct)
XfdLink	(*(void),*(char),*(char),int)->(*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*(void),int,long,long,int,int,int,*(void),*(struct(struct`,struct`,array(struct(int,long,long)))),int,int,long,long)))
(	O
void	O
*	O
cookie	*(void)
,	O
const	O
char	O
*	O
msg	*(char)
,	O
const	O
char	O
*	O
file	*(char)
,	O
unsigned	O
line	int
)	O
{	O
FD_t	*(struct)
fd	*(struct)
;	O
if	O
(	O
cookie	*(void)
==	O
NULL	O
)	O
DBGREFS	O
(	O
0	int
,	O
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"--> fd  %p ++ %d %s at %s:%u\n"	*(char)
,	O
cookie	*(void)
,	O
FDNREFS	O
(	O
cookie	*(void)
)	O
+	O
1	int
,	O
msg	*(char)
,	O
file	*(char)
,	O
line	int
)	O
)	O
;	O
fd	*(struct)
=	O
c2f	(*(void))->(*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*(void),int,long,long,int,int,int,*(void),*(struct(struct`,struct`,array(struct(int,long,long)))),int,int,long,long)))
(	O
cookie	*(void)
)	O
;	O
if	O
(	O
fd	*(struct)
)	O
{	O
fd	*(struct)
->	O
nrefs	int
++	O
;	O
DBGREFS	O
(	O
fd	*(struct)
,	O
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"--> fd  %p ++ %d %s at %s:%u %s\n"	*(char)
,	O
fd	*(struct)
,	O
fd	*(struct)
->	O
nrefs	int
,	O
msg	*(char)
,	O
file	*(char)
,	O
line	int
,	O
fdbg	(*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*(void),int,long,long,int,int,int,*(void),*(struct(struct`,struct`,array(struct(int,long,long)))),int,int,long,long)))->(*(char))
(	O
fd	*(struct)
)	O
)	O
)	O
;	O
}	O
return	O
fd	*(struct)
;	O
}	O
static	O
inline	O
FD_t	*(struct)
XfdFree	(*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*(void),int,long,long,int,int,int,*(void),*(struct(struct`,struct`,array(struct(int,long,long)))),int,int,long,long)),*(char),*(char),int)->(*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*(void),int,long,long,int,int,int,*(void),*(struct(struct`,struct`,array(struct(int,long,long)))),int,int,long,long)))
(	O
FD_t	*(struct)
fd	*(struct)
,	O
const	O
char	O
*	O
msg	*(char)
,	O
const	O
char	O
*	O
file	*(char)
,	O
unsigned	O
line	int
)	O
{	O
if	O
(	O
fd	*(struct)
==	O
NULL	O
)	O
DBGREFS	O
(	O
0	int
,	O
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"--> fd  %p -- %d %s at %s:%u\n"	*(char)
,	O
fd	*(struct)
,	O
FDNREFS	O
(	O
fd	*(struct)
)	O
,	O
msg	*(char)
,	O
file	*(char)
,	O
line	int
)	O
)	O
;	O
FDSANE	O
(	O
fd	*(struct)
)	O
;	O
if	O
(	O
fd	*(struct)
)	O
{	O
DBGREFS	O
(	O
fd	*(struct)
,	O
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"--> fd  %p -- %d %s at %s:%u %s\n"	*(char)
,	O
fd	*(struct)
,	O
fd	*(struct)
->	O
nrefs	int
,	O
msg	*(char)
,	O
file	*(char)
,	O
line	int
,	O
fdbg	(*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*(void),int,long,long,int,int,int,*(void),*(struct(struct`,struct`,array(struct(int,long,long)))),int,int,long,long)))->(*(char))
(	O
fd	*(struct)
)	O
)	O
)	O
;	O
if	O
(	O
--	O
fd	*(struct)
->	O
nrefs	int
>	O
0	int
)	O
return	O
fd	*(struct)
;	O
if	O
(	O
fd	*(struct)
->	O
stats	*(struct(struct(long,long),struct(long,long),array(struct(int,long,long))))
)	O
free	(*(void))->(void)
(	O
fd	*(struct)
->	O
stats	*(struct(struct(long,long),struct(long,long),array(struct(int,long,long))))
)	O
;	O
free	(*(void))->(void)
(	O
fd	*(struct)
)	O
;	O
}	O
return	O
NULL	O
;	O
}	O
static	O
inline	O
FD_t	*(struct)
XfdNew	(*(char),*(char),int)->(*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*(void),int,long,long,int,int,int,*(void),*(struct(struct`,struct`,array(struct(int,long,long)))),int,int,long,long)))
(	O
const	O
char	O
*	O
msg	*(char)
,	O
const	O
char	O
*	O
file	*(char)
,	O
unsigned	O
line	int
)	O
{	O
FD_t	*(struct)
fd	*(struct)
=	O
(	O
FD_t	*(struct)
)	O
xmalloc	(long)->(*(void))
(	O
sizeof	O
(	O
struct	O
_FD_s	struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*(void),int,long,long,int,int,int,*(void),*(struct(struct(long,long),struct(long,long),array(struct(int,long,long)))),int,int,long,long)
)	O
)	O
;	O
if	O
(	O
fd	*(struct)
==	O
NULL	O
)	O
return	O
NULL	O
;	O
fd	*(struct)
->	O
nrefs	int
=	O
0	int
;	O
fd	*(struct)
->	O
flags	int
=	O
0	int
;	O
fd	*(struct)
->	O
magic	array(char)
=	O
FDMAGIC	int
;	O
fd	*(struct)
->	O
urlType	int
=	O
URL_IS_UNKNOWN	int
;	O
fd	*(struct)
->	O
nfps	int
=	O
0	int
;	O
memset	(*(void),int,long)->(*(void))
(	O
fd	*(struct)
->	O
fps	array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int))
,	O
0	int
,	O
sizeof	O
(	O
fd	*(struct)
->	O
fps	array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int))
)	O
)	O
;	O
fd	*(struct)
->	O
fps	array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int))
[	O
0	int
]	O
.	O
io	*(struct(*((*(void),*(char),long)->(long)),*((*(void),*(char),long)->(long)),*((*(void),long,int)->(int)),*((*(void))->(int)),*((*(void),*(char),*(char),int)->(*(struct`))),*((*(struct`),*(char),*(char),int)->(*(struct`))),*((*(char),*(char),int)->(*(struct`))),*((*(void))->(int)),*((*(char),int,int)->(*(struct`))),*((*(char),*(char))->(*(struct`))),*((*(struct`))->(*(void))),*((*(struct`))->(int)),*((*(char),int)->(int)),*((*(char))->(int)),*((*(char))->(int)),*((*(char),*(char))->(int)),*((*(char))->(int))))
=	O
fdio	*(struct(*((*(void),*(char),long)->(long)),*((*(void),*(char),long)->(long)),*((*(void),long,int)->(int)),*((*(void))->(int)),*((*(void),*(char),*(char),int)->(*(struct`))),*((*(struct`),*(char),*(char),int)->(*(struct`))),*((*(char),*(char),int)->(*(struct`))),*((*(void))->(int)),*((*(char),int,int)->(*(struct`))),*((*(char),*(char))->(*(struct`))),*((*(struct`))->(*(void))),*((*(struct`))->(int)),*((*(char),int)->(int)),*((*(char))->(int)),*((*(char))->(int)),*((*(char),*(char))->(int)),*((*(char))->(int))))
;	O
fd	*(struct)
->	O
fps	array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int))
[	O
0	int
]	O
.	O
fp	*(void)
=	O
NULL	O
;	O
fd	*(struct)
->	O
fps	array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int))
[	O
0	int
]	O
.	O
fdno	int
=	O
-	O
1	int
;	O
fd	*(struct)
->	O
url	*(char)
=	O
NULL	O
;	O
fd	*(struct)
->	O
rd_timeoutsecs	int
=	O
1	int
;	O
fd	*(struct)
->	O
contentLength	long
=	O
fd	*(struct)
->	O
bytesRemain	long
=	O
-	O
1	int
;	O
fd	*(struct)
->	O
wr_chunked	int
=	O
0	int
;	O
fd	*(struct)
->	O
syserrno	int
=	O
0	int
;	O
fd	*(struct)
->	O
errcookie	*(void)
=	O
NULL	O
;	O
fd	*(struct)
->	O
stats	*(struct(struct(long,long),struct(long,long),array(struct(int,long,long))))
=	O
calloc	(long,long)->(*(void))
(	O
1	int
,	O
sizeof	O
(	O
FDSTAT_t	struct(struct(long,long),struct(long,long),array(struct(int,long,long)))
)	O
)	O
;	O
gettimeofday	(*(struct(long,long)),*(void))->(int)
(	O
&	O
fd	*(struct)
->	O
stats	*(struct(struct(long,long),struct(long,long),array(struct(int,long,long))))
->	O
create	struct(long,long)
,	O
NULL	O
)	O
;	O
fd	*(struct)
->	O
stats	*(struct(struct(long,long),struct(long,long),array(struct(int,long,long))))
->	O
begin	struct(long,long)
=	O
fd	*(struct)
->	O
stats	*(struct(struct(long,long),struct(long,long),array(struct(int,long,long))))
->	O
create	struct(long,long)
;	O
fd	*(struct)
->	O
ftpFileDoneNeeded	int
=	O
0	int
;	O
fd	*(struct)
->	O
firstFree	int
=	O
0	int
;	O
fd	*(struct)
->	O
fileSize	long
=	O
0	int
;	O
fd	*(struct)
->	O
fd_cpioPos	long
=	O
0	int
;	O
return	O
XfdLink	(*(void),*(char),*(char),int)->(*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*(void),int,long,long,int,int,int,*(void),*(struct(struct`,struct`,array(struct(int,long,long)))),int,int,long,long)))
(	O
fd	*(struct)
,	O
msg	*(char)
,	O
file	*(char)
,	O
line	int
)	O
;	O
}	O
int	O
fdFileno	(*(void))->(int)
(	O
void	O
*	O
cookie	*(void)
)	O
{	O
FD_t	*(struct)
fd	*(struct)
;	O
if	O
(	O
cookie	*(void)
==	O
NULL	O
)	O
return	O
-	O
2	int
;	O
fd	*(struct)
=	O
c2f	(*(void))->(*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*(void),int,long,long,int,int,int,*(void),*(struct(struct`,struct`,array(struct(int,long,long)))),int,int,long,long)))
(	O
cookie	*(void)
)	O
;	O
return	O
fd	*(struct)
->	O
fps	array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int))
[	O
0	int
]	O
.	O
fdno	int
;	O
}	O
ssize_t	long
fdRead	(*(void),*(char),long)->(long)
(	O
void	O
*	O
cookie	*(void)
,	O
char	O
*	O
buf	*(char)
,	O
size_t	long
count	long
)	O
{	O
FD_t	*(struct)
fd	*(struct)
=	O
c2f	(*(void))->(*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*(void),int,long,long,int,int,int,*(void),*(struct(struct`,struct`,array(struct(int,long,long)))),int,int,long,long)))
(	O
cookie	*(void)
)	O
;	O
ssize_t	long
rc	long
;	O
if	O
(	O
fd	*(struct)
->	O
bytesRemain	long
==	O
0	int
)	O
return	O
0	int
;	O
fdstat_enter	(*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*(void),int,long,long,int,int,int,*(void),*(struct(struct`,struct`,array(struct(int,long,long)))),int,int,long,long)),int)->(void)
(	O
fd	*(struct)
,	O
FDSTAT_READ	int
)	O
;	O
rc	long
=	O
read	*((*(void),*(char),long)->(long))
(	O
fdFileno	(*(void))->(int)
(	O
fd	*(struct)
)	O
,	O
buf	*(char)
,	O
(	O
count	long
>	O
fd	*(struct)
->	O
bytesRemain	long
?	O
fd	*(struct)
->	O
bytesRemain	long
:	O
count	long
)	O
)	O
;	O
fdstat_exit	(*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*(void),int,long,long,int,int,int,*(void),*(struct(struct`,struct`,array(struct(int,long,long)))),int,int,long,long)),int,long)->(void)
(	O
fd	*(struct)
,	O
FDSTAT_READ	int
,	O
rc	long
)	O
;	O
DBGIO	O
(	O
fd	*(struct)
,	O
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"==>\tfdRead(%p,%p,%ld) rc %ld %s\n"	*(char)
,	O
cookie	*(void)
,	O
buf	*(char)
,	O
(	O
long	O
)	O
count	long
,	O
(	O
long	O
)	O
rc	long
,	O
fdbg	(*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*(void),int,long,long,int,int,int,*(void),*(struct(struct`,struct`,array(struct(int,long,long)))),int,int,long,long)))->(*(char))
(	O
fd	*(struct)
)	O
)	O
)	O
;	O
return	O
rc	long
;	O
}	O
ssize_t	long
fdWrite	(*(void),*(char),long)->(long)
(	O
void	O
*	O
cookie	*(void)
,	O
const	O
char	O
*	O
buf	*(char)
,	O
size_t	long
count	long
)	O
{	O
FD_t	*(struct)
fd	*(struct)
=	O
c2f	(*(void))->(*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*(void),int,long,long,int,int,int,*(void),*(struct(struct`,struct`,array(struct(int,long,long)))),int,int,long,long)))
(	O
cookie	*(void)
)	O
;	O
int	O
fdno	int
=	O
fdFileno	(*(void))->(int)
(	O
fd	*(struct)
)	O
;	O
ssize_t	long
rc	long
;	O
if	O
(	O
fd	*(struct)
->	O
bytesRemain	long
==	O
0	int
)	O
return	O
0	int
;	O
if	O
(	O
fd	*(struct)
->	O
wr_chunked	int
)	O
{	O
char	O
chunksize	array(char)
[	O
20	int
]	O
;	O
sprintf	(*(char),*(char))->(int)
(	O
chunksize	array(char)
,	O
"%x\r\n"	*(char)
,	O
count	long
)	O
;	O
rc	long
=	O
write	*((*(void),*(char),long)->(long))
(	O
fdno	int
,	O
chunksize	array(char)
,	O
strlen	(*(char))->(long)
(	O
chunksize	array(char)
)	O
)	O
;	O
if	O
(	O
rc	long
==	O
-	O
1	int
)	O
fd	*(struct)
->	O
syserrno	int
=	O
errno	O
;	O
}	O
if	O
(	O
count	long
==	O
0	int
)	O
return	O
0	int
;	O
fdstat_enter	(*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*(void),int,long,long,int,int,int,*(void),*(struct(struct`,struct`,array(struct(int,long,long)))),int,int,long,long)),int)->(void)
(	O
fd	*(struct)
,	O
FDSTAT_WRITE	int
)	O
;	O
rc	long
=	O
write	*((*(void),*(char),long)->(long))
(	O
fdno	int
,	O
buf	*(char)
,	O
(	O
count	long
>	O
fd	*(struct)
->	O
bytesRemain	long
?	O
fd	*(struct)
->	O
bytesRemain	long
:	O
count	long
)	O
)	O
;	O
fdstat_exit	(*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*(void),int,long,long,int,int,int,*(void),*(struct(struct`,struct`,array(struct(int,long,long)))),int,int,long,long)),int,long)->(void)
(	O
fd	*(struct)
,	O
FDSTAT_WRITE	int
,	O
rc	long
)	O
;	O
if	O
(	O
fd	*(struct)
->	O
wr_chunked	int
)	O
{	O
int	O
ec	int
;	O
ec	int
=	O
write	*((*(void),*(char),long)->(long))
(	O
fdno	int
,	O
"\r\n"	*(char)
,	O
sizeof	O
(	O
"\r\n"	*(char)
)	O
-	O
1	int
)	O
;	O
if	O
(	O
ec	int
==	O
-	O
1	int
)	O
fd	*(struct)
->	O
syserrno	int
=	O
errno	O
;	O
}	O
DBGIO	O
(	O
fd	*(struct)
,	O
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"==>\tfdWrite(%p,%p,%ld) rc %ld %s\n"	*(char)
,	O
cookie	*(void)
,	O
buf	*(char)
,	O
(	O
long	O
)	O
count	long
,	O
(	O
long	O
)	O
rc	long
,	O
fdbg	(*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*(void),int,long,long,int,int,int,*(void),*(struct(struct`,struct`,array(struct(int,long,long)))),int,int,long,long)))->(*(char))
(	O
fd	*(struct)
)	O
)	O
)	O
;	O
return	O
rc	long
;	O
}	O
static	O
inline	O
int	O
fdSeek	(*(void),long,int)->(int)
(	O
void	O
*	O
cookie	*(void)
,	O
off_t	long
pos	long
,	O
int	O
whence	int
)	O
{	O
FD_t	*(struct)
fd	*(struct)
=	O
c2f	(*(void))->(*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*(void),int,long,long,int,int,int,*(void),*(struct(struct`,struct`,array(struct(int,long,long)))),int,int,long,long)))
(	O
cookie	*(void)
)	O
;	O
off_t	long
rc	long
;	O
assert	O
(	O
fd	*(struct)
->	O
bytesRemain	long
==	O
-	O
1	int
)	O
;	O
fdstat_enter	(*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*(void),int,long,long,int,int,int,*(void),*(struct(struct`,struct`,array(struct(int,long,long)))),int,int,long,long)),int)->(void)
(	O
fd	*(struct)
,	O
FDSTAT_SEEK	int
)	O
;	O
rc	long
=	O
lseek	(int,long,int)->(long)
(	O
fdFileno	(*(void))->(int)
(	O
fd	*(struct)
)	O
,	O
pos	long
,	O
whence	int
)	O
;	O
fdstat_exit	(*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*(void),int,long,long,int,int,int,*(void),*(struct(struct`,struct`,array(struct(int,long,long)))),int,int,long,long)),int,long)->(void)
(	O
fd	*(struct)
,	O
FDSTAT_SEEK	int
,	O
rc	long
)	O
;	O
DBGIO	O
(	O
fd	*(struct)
,	O
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"==>\tfdSeek(%p,%ld,%d) rc %lx %s\n"	*(char)
,	O
cookie	*(void)
,	O
pos	long
,	O
whence	int
,	O
(	O
long	O
)	O
rc	long
,	O
fdbg	(*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*(void),int,long,long,int,int,int,*(void),*(struct(struct`,struct`,array(struct(int,long,long)))),int,int,long,long)))->(*(char))
(	O
fd	*(struct)
)	O
)	O
)	O
;	O
return	O
rc	long
;	O
}	O
int	O
fdClose	(*(void))->(int)
(	O
void	O
*	O
cookie	*(void)
)	O
{	O
FD_t	*(struct)
fd	*(struct)
;	O
int	O
fdno	int
;	O
int	O
rc	long
;	O
if	O
(	O
cookie	*(void)
==	O
NULL	O
)	O
return	O
-	O
2	int
;	O
fd	*(struct)
=	O
c2f	(*(void))->(*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*(void),int,long,long,int,int,int,*(void),*(struct(struct`,struct`,array(struct(int,long,long)))),int,int,long,long)))
(	O
cookie	*(void)
)	O
;	O
fdno	int
=	O
fdFileno	(*(void))->(int)
(	O
fd	*(struct)
)	O
;	O
fdSetFdno	(*(struct),int)->(void)
(	O
fd	*(struct)
,	O
-	O
1	int
)	O
;	O
fdstat_enter	(*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*(void),int,long,long,int,int,int,*(void),*(struct(struct`,struct`,array(struct(int,long,long)))),int,int,long,long)),int)->(void)
(	O
fd	*(struct)
,	O
FDSTAT_CLOSE	int
)	O
;	O
rc	long
=	O
(	O
(	O
fdno	int
>=	O
0	int
)	O
?	O
close	*((*(void))->(int))
(	O
fdno	int
)	O
:	O
-	O
2	int
)	O
;	O
fdstat_exit	(*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*(void),int,long,long,int,int,int,*(void),*(struct(struct`,struct`,array(struct(int,long,long)))),int,int,long,long)),int,long)->(void)
(	O
fd	*(struct)
,	O
FDSTAT_CLOSE	int
,	O
rc	long
)	O
;	O
DBGIO	O
(	O
fd	*(struct)
,	O
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"==>\tfdClose(%p) rc %lx %s\n"	*(char)
,	O
fd	*(struct)
,	O
(	O
long	O
)	O
rc	long
,	O
fdbg	(*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*(void),int,long,long,int,int,int,*(void),*(struct(struct`,struct`,array(struct(int,long,long)))),int,int,long,long)))->(*(char))
(	O
fd	*(struct)
)	O
)	O
)	O
;	O
fd	*(struct)
=	O
fdFree	O
(	O
fd	*(struct)
,	O
"open (fdClose)"	*(char)
)	O
;	O
return	O
rc	long
;	O
}	O
FD_t	*(struct)
fdOpen	(*(char),int,int)->(*(struct))
(	O
const	O
char	O
*	O
path	*(char)
,	O
int	O
flags	int
,	O
mode_t	int
mode	int
)	O
{	O
FD_t	*(struct)
fd	*(struct)
;	O
int	O
fdno	int
;	O
fdno	int
=	O
open	(*(char),int)->(int)
(	O
path	*(char)
,	O
flags	int
,	O
mode	int
)	O
;	O
if	O
(	O
fdno	int
<	O
0	int
)	O
return	O
NULL	O
;	O
fd	*(struct)
=	O
fdNew	O
(	O
"open (fdOpen)"	*(char)
)	O
;	O
fdSetFdno	(*(struct),int)->(void)
(	O
fd	*(struct)
,	O
fdno	int
)	O
;	O
fd	*(struct)
->	O
flags	int
=	O
flags	int
;	O
DBGIO	O
(	O
fd	*(struct)
,	O
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"==>\tfdOpen(\"%s\",%x,0%o) %s\n"	*(char)
,	O
path	*(char)
,	O
flags	int
,	O
(	O
unsigned	O
)	O
mode	int
,	O
fdbg	(*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*(void),int,long,long,int,int,int,*(void),*(struct(struct`,struct`,array(struct(int,long,long)))),int,int,long,long)))->(*(char))
(	O
fd	*(struct)
)	O
)	O
)	O
;	O
return	O
fd	*(struct)
;	O
}	O
static	O
struct	O
FDIO_s	struct(*((*(void),*(char),long)->(long)),*((*(void),*(char),long)->(long)),*((*(void),long,int)->(int)),*((*(void))->(int)),*((*(void),*(char),*(char),int)->(*(struct))),*((*(struct),*(char),*(char),int)->(*(struct))),*((*(char),*(char),int)->(*(struct))),*((*(void))->(int)),*((*(char),int,int)->(*(struct))),*((*(char),*(char))->(*(struct))),*((*(struct))->(*(void))),*((*(struct))->(int)),*((*(char),int)->(int)),*((*(char))->(int)),*((*(char))->(int)),*((*(char),*(char))->(int)),*((*(char))->(int)))
fdio_s	struct(*((*(void),*(char),long)->(long)),*((*(void),*(char),long)->(long)),*((*(void),long,int)->(int)),*((*(void))->(int)),*((*(void),*(char),*(char),int)->(*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*`,int,long,long,int,int,int,*`,*`,int,int,long,long)))),*((*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*`,int,long,long,int,int,int,*`,*`,int,int,long,long)),*(char),*(char),int)->(*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*`,int,long,long,int,int,int,*`,*`,int,int,long,long)))),*((*(char),*(char),int)->(*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*`,int,long,long,int,int,int,*`,*`,int,int,long,long)))),*((*(void))->(int)),*((*(char),int,int)->(*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*`,int,long,long,int,int,int,*`,*`,int,int,long,long)))),*((*(char),*(char))->(*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*`,int,long,long,int,int,int,*`,*`,int,int,long,long)))),*((*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*`,int,long,long,int,int,int,*`,*`,int,int,long,long)))->(*(void))),*((*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*`,int,long,long,int,int,int,*`,*`,int,int,long,long)))->(int)),*((*(char),int)->(int)),*((*(char))->(int)),*((*(char))->(int)),*((*(char),*(char))->(int)),*((*(char))->(int)))
=	O
{	O
fdRead	(*(void),*(char),long)->(long)
,	O
fdWrite	(*(void),*(char),long)->(long)
,	O
fdSeek	(*(void),long,int)->(int)
,	O
fdClose	(*(void))->(int)
,	O
XfdLink	(*(void),*(char),*(char),int)->(*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*(void),int,long,long,int,int,int,*(void),*(struct(struct`,struct`,array(struct(int,long,long)))),int,int,long,long)))
,	O
XfdFree	(*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*(void),int,long,long,int,int,int,*(void),*(struct(struct`,struct`,array(struct(int,long,long)))),int,int,long,long)),*(char),*(char),int)->(*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*(void),int,long,long,int,int,int,*(void),*(struct(struct`,struct`,array(struct(int,long,long)))),int,int,long,long)))
,	O
XfdNew	(*(char),*(char),int)->(*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*(void),int,long,long,int,int,int,*(void),*(struct(struct`,struct`,array(struct(int,long,long)))),int,int,long,long)))
,	O
fdFileno	(*(void))->(int)
,	O
fdOpen	(*(char),int,int)->(*(struct))
,	O
NULL	O
,	O
fdGetFp	(*(struct))->(*(void))
,	O
NULL	O
,	O
mkdir	(*(char),int)->(int)
,	O
chdir	(*(char))->(int)
,	O
rmdir	(*(char))->(int)
,	O
rename	(*(char),*(char))->(int)
,	O
unlink	(*(char))->(int)
}	O
;	O
FDIO_t	*(struct)
fdio	*(struct(*((*(void),*(char),long)->(long)),*((*(void),*(char),long)->(long)),*((*(void),long,int)->(int)),*((*(void))->(int)),*((*(void),*(char),*(char),int)->(*(struct`))),*((*(struct`),*(char),*(char),int)->(*(struct`))),*((*(char),*(char),int)->(*(struct`))),*((*(void))->(int)),*((*(char),int,int)->(*(struct`))),*((*(char),*(char))->(*(struct`))),*((*(struct`))->(*(void))),*((*(struct`))->(int)),*((*(char),int)->(int)),*((*(char))->(int)),*((*(char))->(int)),*((*(char),*(char))->(int)),*((*(char))->(int))))
=	O
&	O
fdio_s	struct(*((*(void),*(char),long)->(long)),*((*(void),*(char),long)->(long)),*((*(void),long,int)->(int)),*((*(void))->(int)),*((*(void),*(char),*(char),int)->(*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*`,int,long,long,int,int,int,*`,*`,int,int,long,long)))),*((*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*`,int,long,long,int,int,int,*`,*`,int,int,long,long)),*(char),*(char),int)->(*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*`,int,long,long,int,int,int,*`,*`,int,int,long,long)))),*((*(char),*(char),int)->(*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*`,int,long,long,int,int,int,*`,*`,int,int,long,long)))),*((*(void))->(int)),*((*(char),int,int)->(*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*`,int,long,long,int,int,int,*`,*`,int,int,long,long)))),*((*(char),*(char))->(*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*`,int,long,long,int,int,int,*`,*`,int,int,long,long)))),*((*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*`,int,long,long,int,int,int,*`,*`,int,int,long,long)))->(*(void))),*((*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*`,int,long,long,int,int,int,*`,*`,int,int,long,long)))->(int)),*((*(char),int)->(int)),*((*(char))->(int)),*((*(char))->(int)),*((*(char),*(char))->(int)),*((*(char))->(int)))
;	O
int	O
fdWritable	(*(struct),int)->(int)
(	O
FD_t	*(struct)
fd	*(struct)
,	O
int	O
secs	int
)	O
{	O
int	O
fdno	int
;	O
fd_set	struct(array(long))
wrfds	struct(array(long))
;	O
struct	O
timeval	struct(long,long)
timeout	struct(long,long)
,	O
*	O
tvp	*(struct(long,long))
=	O
(	O
secs	int
>=	O
0	int
?	O
&	O
timeout	struct(long,long)
:	O
NULL	O
)	O
;	O
int	O
rc	long
;	O
if	O
(	O
(	O
fdno	int
=	O
fdFileno	(*(void))->(int)
(	O
fd	*(struct)
)	O
)	O
<	O
0	int
)	O
return	O
-	O
1	int
;	O
FD_ZERO	O
(	O
&	O
wrfds	struct(array(long))
)	O
;	O
do	O
{	O
FD_SET	O
(	O
fdno	int
,	O
&	O
wrfds	struct(array(long))
)	O
;	O
if	O
(	O
tvp	*(struct(long,long))
)	O
{	O
tvp	*(struct(long,long))
->	O
tv_sec	long
=	O
secs	int
;	O
tvp	*(struct(long,long))
->	O
tv_usec	long
=	O
0	int
;	O
}	O
errno	O
=	O
0	int
;	O
rc	long
=	O
select	(int,*(struct(array(long))),*(struct(array(long))),*(struct(array(long))),*(struct(long,long)))->(int)
(	O
fdno	int
+	O
1	int
,	O
NULL	O
,	O
&	O
wrfds	struct(array(long))
,	O
NULL	O
,	O
tvp	*(struct(long,long))
)	O
;	O
if	O
(	O
_rpmio_debug	int
&&	O
!	O
(	O
rc	long
==	O
1	int
&&	O
errno	O
==	O
0	int
)	O
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"*** fdWritable fdno %d rc %d %s\n"	*(char)
,	O
fdno	int
,	O
rc	long
,	O
strerror	(int)->(*(char))
(	O
errno	O
)	O
)	O
;	O
if	O
(	O
rc	long
<	O
0	int
)	O
{	O
switch	O
(	O
errno	O
)	O
{	O
case	O
EINTR	int
:	O
continue	O
;	O
break	O
;	O
default	O
:	O
return	O
rc	long
;	O
break	O
;	O
}	O
}	O
return	O
rc	long
;	O
}	O
while	O
(	O
1	int
)	O
;	O
}	O
int	O
fdReadable	(*(struct),int)->(int)
(	O
FD_t	*(struct)
fd	*(struct)
,	O
int	O
secs	int
)	O
{	O
int	O
fdno	int
;	O
fd_set	struct(array(long))
rdfds	struct(array(long))
;	O
struct	O
timeval	struct(long,long)
timeout	struct(long,long)
,	O
*	O
tvp	*(struct(long,long))
=	O
(	O
secs	int
>=	O
0	int
?	O
&	O
timeout	struct(long,long)
:	O
NULL	O
)	O
;	O
int	O
rc	long
;	O
if	O
(	O
(	O
fdno	int
=	O
fdFileno	(*(void))->(int)
(	O
fd	*(struct)
)	O
)	O
<	O
0	int
)	O
return	O
-	O
1	int
;	O
FD_ZERO	O
(	O
&	O
rdfds	struct(array(long))
)	O
;	O
do	O
{	O
FD_SET	O
(	O
fdno	int
,	O
&	O
rdfds	struct(array(long))
)	O
;	O
if	O
(	O
tvp	*(struct(long,long))
)	O
{	O
tvp	*(struct(long,long))
->	O
tv_sec	long
=	O
secs	int
;	O
tvp	*(struct(long,long))
->	O
tv_usec	long
=	O
0	int
;	O
}	O
errno	O
=	O
0	int
;	O
rc	long
=	O
select	(int,*(struct(array(long))),*(struct(array(long))),*(struct(array(long))),*(struct(long,long)))->(int)
(	O
fdno	int
+	O
1	int
,	O
&	O
rdfds	struct(array(long))
,	O
NULL	O
,	O
NULL	O
,	O
tvp	*(struct(long,long))
)	O
;	O
if	O
(	O
rc	long
<	O
0	int
)	O
{	O
switch	O
(	O
errno	O
)	O
{	O
case	O
EINTR	int
:	O
continue	O
;	O
break	O
;	O
default	O
:	O
return	O
rc	long
;	O
break	O
;	O
}	O
}	O
return	O
rc	long
;	O
}	O
while	O
(	O
1	int
)	O
;	O
}	O
static	O
int	O
fdFgets	(*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*(void),int,long,long,int,int,int,*(void),*(struct(struct`,struct`,array(struct(int,long,long)))),int,int,long,long)),*(char),long)->(int)
(	O
FD_t	*(struct)
fd	*(struct)
,	O
char	O
*	O
buf	*(char)
,	O
size_t	long
len	long
)	O
{	O
int	O
fdno	int
;	O
int	O
secs	int
=	O
fd	*(struct)
->	O
rd_timeoutsecs	int
;	O
size_t	long
nb	long
=	O
0	int
;	O
int	O
ec	int
=	O
0	int
;	O
char	O
lastchar	char
=	O
'\0'	O
;	O
if	O
(	O
(	O
fdno	int
=	O
fdFileno	(*(void))->(int)
(	O
fd	*(struct)
)	O
)	O
<	O
0	int
)	O
return	O
0	int
;	O
do	O
{	O
int	O
rc	long
;	O
rc	long
=	O
fdReadable	(*(struct),int)->(int)
(	O
fd	*(struct)
,	O
secs	int
)	O
;	O
switch	O
(	O
rc	long
)	O
{	O
case	O
-	O
1	int
:	O
ec	int
=	O
-	O
1	int
;	O
continue	O
;	O
break	O
;	O
case	O
0	int
:	O
ec	int
=	O
-	O
1	int
;	O
continue	O
;	O
break	O
;	O
default	O
:	O
break	O
;	O
}	O
errno	O
=	O
0	int
;	O
rc	long
=	O
read	*((*(void),*(char),long)->(long))
(	O
fdFileno	(*(void))->(int)
(	O
fd	*(struct)
)	O
,	O
buf	*(char)
+	O
nb	long
,	O
1	int
)	O
;	O
if	O
(	O
rc	long
<	O
0	int
)	O
{	O
fd	*(struct)
->	O
syserrno	int
=	O
errno	O
;	O
switch	O
(	O
errno	O
)	O
{	O
case	O
EWOULDBLOCK	O
:	O
continue	O
;	O
break	O
;	O
default	O
:	O
break	O
;	O
}	O
if	O
(	O
_rpmio_debug	int
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"*** read: fd %p rc %d errno %d %s \"%s\"\n"	*(char)
,	O
fd	*(struct)
,	O
rc	long
,	O
errno	O
,	O
strerror	(int)->(*(char))
(	O
errno	O
)	O
,	O
buf	*(char)
)	O
;	O
ec	int
=	O
-	O
1	int
;	O
break	O
;	O
}	O
else	O
if	O
(	O
rc	long
==	O
0	int
)	O
{	O
if	O
(	O
_rpmio_debug	int
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"*** read: fd %p rc %d EOF errno %d %s \"%s\"\n"	*(char)
,	O
fd	*(struct)
,	O
rc	long
,	O
errno	O
,	O
strerror	(int)->(*(char))
(	O
errno	O
)	O
,	O
buf	*(char)
)	O
;	O
break	O
;	O
}	O
else	O
{	O
nb	long
+=	O
rc	long
;	O
buf	*(char)
[	O
nb	long
]	O
=	O
'\0'	O
;	O
lastchar	char
=	O
buf	*(char)
[	O
nb	long
-	O
1	int
]	O
;	O
}	O
}	O
while	O
(	O
ec	int
==	O
0	int
&&	O
nb	long
<	O
len	long
&&	O
lastchar	char
!=	O
'\n'	O
)	O
;	O
return	O
(	O
ec	int
>=	O
0	int
?	O
nb	long
:	O
ec	int
)	O
;	O
}	O
const	O
char	O
*	O
const	O
ftpStrerror	(int)->(*(char))
(	O
int	O
errorNumber	int
)	O
{	O
switch	O
(	O
errorNumber	int
)	O
{	O
case	O
0	int
:	O
return	O
_	O
(	O
"Success"	*(char)
)	O
;	O
case	O
FTPERR_BAD_SERVER_RESPONSE	O
:	O
return	O
_	O
(	O
"Bad server response"	*(char)
)	O
;	O
case	O
FTPERR_SERVER_IO_ERROR	O
:	O
return	O
_	O
(	O
"Server IO error"	*(char)
)	O
;	O
case	O
FTPERR_SERVER_TIMEOUT	O
:	O
return	O
_	O
(	O
"Server timeout"	*(char)
)	O
;	O
case	O
FTPERR_BAD_HOST_ADDR	O
:	O
return	O
_	O
(	O
"Unable to lookup server host address"	*(char)
)	O
;	O
case	O
FTPERR_BAD_HOSTNAME	O
:	O
return	O
_	O
(	O
"Unable to lookup server host name"	*(char)
)	O
;	O
case	O
FTPERR_FAILED_CONNECT	O
:	O
return	O
_	O
(	O
"Failed to connect to server"	*(char)
)	O
;	O
case	O
FTPERR_FAILED_DATA_CONNECT	O
:	O
return	O
_	O
(	O
"Failed to establish data connection to server"	*(char)
)	O
;	O
case	O
FTPERR_FILE_IO_ERROR	O
:	O
return	O
_	O
(	O
"IO error to local file"	*(char)
)	O
;	O
case	O
FTPERR_PASSIVE_ERROR	O
:	O
return	O
_	O
(	O
"Error setting remote server to passive mode"	*(char)
)	O
;	O
case	O
FTPERR_FILE_NOT_FOUND	O
:	O
return	O
_	O
(	O
"File not found on server"	*(char)
)	O
;	O
case	O
FTPERR_NIC_ABORT_IN_PROGRESS	O
:	O
return	O
_	O
(	O
"Abort in progress"	*(char)
)	O
;	O
case	O
FTPERR_UNKNOWN	O
:	O
default	O
:	O
return	O
_	O
(	O
"Unknown or unexpected error"	*(char)
)	O
;	O
}	O
}	O
const	O
char	O
*	O
urlStrerror	(*(char))->(*(char))
(	O
const	O
char	O
*	O
url	*(char)
)	O
{	O
const	O
char	O
*	O
retstr	*(char)
;	O
switch	O
(	O
urlIsURL	(*(char))->(enum(int,int,int,int,int))
(	O
url	*(char)
)	O
)	O
{	O
case	O
URL_IS_FTP	int
:	O
case	O
URL_IS_HTTP	int
:	O
{	O
urlinfo	struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,*(struct),*(struct),int,*(char),int,int,int,int)
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
;	O
if	O
(	O
urlSplit	(*(char),*(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,*(struct`),*(struct`),int,*(char),int,int,int,int))))->(int)
(	O
url	*(char)
,	O
&	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
)	O
==	O
0	int
)	O
{	O
retstr	*(char)
=	O
ftpStrerror	(int)->(*(char))
(	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
openError	int
)	O
;	O
}	O
else	O
retstr	*(char)
=	O
"Malformed URL"	*(char)
;	O
}	O
break	O
;	O
default	O
:	O
retstr	*(char)
=	O
strerror	(int)->(*(char))
(	O
errno	O
)	O
;	O
break	O
;	O
}	O
return	O
retstr	*(char)
;	O
}	O
static	O
int	O
mygethostbyname	(*(char),*(struct(int)))->(int)
(	O
const	O
char	O
*	O
host	*(char)
,	O
struct	O
in_addr	struct(int)
*	O
address	*(struct(int))
)	O
{	O
struct	O
hostent	struct(*(char),*(*(char)),int,int,*(*(char)))
*	O
hostinfo	*(struct(*(char),*(*(char)),int,int,*(*(char))))
;	O
hostinfo	*(struct(*(char),*(*(char)),int,int,*(*(char))))
=	O
gethostbyname	(*(char))->(*(struct(*(char),*(*(char)),int,int,*(*(char)))))
(	O
host	*(char)
)	O
;	O
if	O
(	O
!	O
hostinfo	*(struct(*(char),*(*(char)),int,int,*(*(char))))
)	O
return	O
1	int
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
address	*(struct(int))
,	O
hostinfo	*(struct(*(char),*(*(char)),int,int,*(*(char))))
->	O
h_addr_list	*(*(char))
[	O
0	int
]	O
,	O
sizeof	O
(	O
*	O
address	*(struct(int))
)	O
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
getHostAddress	(*(char),*(struct(int)))->(int)
(	O
const	O
char	O
*	O
host	*(char)
,	O
struct	O
in_addr	struct(int)
*	O
address	*(struct(int))
)	O
{	O
if	O
(	O
isdigit	(int)->(int)
(	O
host	*(char)
[	O
0	int
]	O
)	O
)	O
{	O
if	O
(	O
!	O
inet_aton	(*(char),*(struct(int)))->(int)
(	O
host	*(char)
,	O
address	*(struct(int))
)	O
)	O
{	O
return	O
FTPERR_BAD_HOST_ADDR	O
;	O
}	O
}	O
else	O
{	O
if	O
(	O
mygethostbyname	(*(char),*(struct(int)))->(int)
(	O
host	*(char)
,	O
address	*(struct(int))
)	O
)	O
{	O
errno	O
=	O
h_errno	O
;	O
return	O
FTPERR_BAD_HOSTNAME	O
;	O
}	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
tcpConnect	(*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*(void),int,long,long,int,int,int,*(void),*(struct(struct`,struct`,array(struct(int,long,long)))),int,int,long,long)),*(char),int)->(int)
(	O
FD_t	*(struct)
ctrl	*(struct)
,	O
const	O
char	O
*	O
host	*(char)
,	O
int	O
port	int
)	O
{	O
struct	O
sockaddr_in	struct(short,short,struct(int),array(char))
sin	struct(short,short,struct(int),array(char))
;	O
int	O
fdno	int
=	O
-	O
1	int
;	O
int	O
rc	long
;	O
sin	struct(short,short,struct(int),array(char))
.	O
sin_family	short
=	O
AF_INET	O
;	O
sin	struct(short,short,struct(int),array(char))
.	O
sin_port	short
=	O
htons	(short)->(short)
(	O
port	int
)	O
;	O
sin	struct(short,short,struct(int),array(char))
.	O
sin_addr	struct(int)
.	O
s_addr	int
=	O
INADDR_ANY	O
;	O
do	O
{	O
if	O
(	O
(	O
rc	long
=	O
getHostAddress	(*(char),*(struct(int)))->(int)
(	O
host	*(char)
,	O
&	O
sin	struct(short,short,struct(int),array(char))
.	O
sin_addr	struct(int)
)	O
)	O
<	O
0	int
)	O
break	O
;	O
if	O
(	O
(	O
fdno	int
=	O
socket	(int,int,int)->(int)
(	O
sin	struct(short,short,struct(int),array(char))
.	O
sin_family	short
,	O
SOCK_STREAM	int
,	O
IPPROTO_IP	int
)	O
)	O
<	O
0	int
)	O
{	O
rc	long
=	O
FTPERR_FAILED_CONNECT	O
;	O
break	O
;	O
}	O
if	O
(	O
connect	(int,union(*(struct(short,array(char))),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct)),int)->(int)
(	O
fdno	int
,	O
(	O
struct	O
sockaddr	struct(short,array(char))
*	O
)	O
&	O
sin	struct(short,short,struct(int),array(char))
,	O
sizeof	O
(	O
sin	struct(short,short,struct(int),array(char))
)	O
)	O
)	O
{	O
rc	long
=	O
FTPERR_FAILED_CONNECT	O
;	O
break	O
;	O
}	O
}	O
while	O
(	O
0	int
)	O
;	O
if	O
(	O
rc	long
<	O
0	int
)	O
goto	O
errxit	O
;	O
if	O
(	O
_ftp_debug	int
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"++ connect %s:%d on fdno %d\n"	*(char)
,	O
inet_ntoa	(struct(int))->(*(char))
(	O
sin	struct(short,short,struct(int),array(char))
.	O
sin_addr	struct(int)
)	O
,	O
ntohs	(short)->(short)
(	O
sin	struct(short,short,struct(int),array(char))
.	O
sin_port	short
)	O
,	O
fdno	int
)	O
;	O
fdSetFdno	(*(struct),int)->(void)
(	O
ctrl	*(struct)
,	O
(	O
fdno	int
>=	O
0	int
?	O
fdno	int
:	O
-	O
1	int
)	O
)	O
;	O
return	O
0	int
;	O
errxit	O
:	O
fdSetSyserrno	(*(struct),int,*(void))->(void)
(	O
ctrl	*(struct)
,	O
errno	O
,	O
ftpStrerror	(int)->(*(char))
(	O
rc	long
)	O
)	O
;	O
if	O
(	O
fdno	int
>=	O
0	int
)	O
close	*((*(void))->(int))
(	O
fdno	int
)	O
;	O
return	O
rc	long
;	O
}	O
static	O
int	O
checkResponse	(*(void),*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*(void),int,long,long,int,int,int,*(void),*(struct(struct`,struct`,array(struct(int,long,long)))),int,int,long,long)),*(int),*(*(char)))->(int)
(	O
void	O
*	O
uu	*(void)
,	O
FD_t	*(struct)
ctrl	*(struct)
,	O
int	O
*	O
ecp	*(int)
,	O
char	O
*	O
*	O
str	*(char)
)	O
{	O
urlinfo	struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,*(struct),*(struct),int,*(char),int,int,int,int)
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
=	O
uu	*(void)
;	O
char	O
*	O
buf	*(char)
;	O
size_t	long
bufAlloced	int
;	O
int	O
bufLength	int
=	O
0	int
;	O
const	O
char	O
*	O
s	*(char)
;	O
char	O
*	O
se	*(char)
;	O
int	O
ec	int
=	O
0	int
;	O
int	O
moretodo	int
=	O
1	int
;	O
char	O
errorCode	array(char)
[	O
4	int
]	O
;	O
URLSANE	O
(	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
)	O
;	O
if	O
(	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
bufAlloced	int
==	O
0	int
||	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
buf	*(char)
==	O
NULL	O
)	O
{	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
bufAlloced	int
=	O
url_iobuf_size	int
;	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
buf	*(char)
=	O
xcalloc	(long,long)->(*(void))
(	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
bufAlloced	int
,	O
sizeof	O
(	O
char	O
)	O
)	O
;	O
}	O
buf	*(char)
=	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
buf	*(char)
;	O
bufAlloced	int
=	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
bufAlloced	int
;	O
*	O
buf	*(char)
=	O
'\0'	O
;	O
errorCode	array(char)
[	O
0	int
]	O
=	O
'\0'	O
;	O
do	O
{	O
int	O
rc	long
;	O
se	*(char)
=	O
buf	*(char)
+	O
bufLength	int
;	O
*	O
se	*(char)
=	O
'\0'	O
;	O
rc	long
=	O
fdFgets	(*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*(void),int,long,long,int,int,int,*(void),*(struct(struct`,struct`,array(struct(int,long,long)))),int,int,long,long)),*(char),long)->(int)
(	O
ctrl	*(struct)
,	O
se	*(char)
,	O
(	O
bufAlloced	int
-	O
bufLength	int
)	O
)	O
;	O
if	O
(	O
rc	long
<	O
0	int
)	O
{	O
ec	int
=	O
FTPERR_BAD_SERVER_RESPONSE	O
;	O
continue	O
;	O
}	O
else	O
if	O
(	O
rc	long
==	O
0	int
||	O
fdWritable	(*(struct),int)->(int)
(	O
ctrl	*(struct)
,	O
0	int
)	O
<	O
1	int
)	O
moretodo	int
=	O
0	int
;	O
for	O
(	O
s	*(char)
=	O
se	*(char)
;	O
*	O
s	*(char)
!=	O
'\0'	O
;	O
s	*(char)
=	O
se	*(char)
)	O
{	O
const	O
char	O
*	O
e	*(char)
;	O
while	O
(	O
*	O
se	*(char)
&&	O
*	O
se	*(char)
!=	O
'\n'	O
)	O
se	*(char)
++	O
;	O
if	O
(	O
se	*(char)
>	O
s	*(char)
&&	O
se	*(char)
[	O
-	O
1	int
]	O
==	O
'\r'	O
)	O
se	*(char)
[	O
-	O
1	int
]	O
=	O
'\0'	O
;	O
if	O
(	O
*	O
se	*(char)
==	O
'\0'	O
)	O
break	O
;	O
if	O
(	O
_ftp_debug	int
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"<- %s\n"	*(char)
,	O
s	*(char)
)	O
;	O
if	O
(	O
*	O
s	*(char)
==	O
'\0'	O
)	O
{	O
moretodo	int
=	O
0	int
;	O
break	O
;	O
}	O
*	O
se	*(char)
++	O
=	O
'\0'	O
;	O
if	O
(	O
!	O
strncmp	(*(char),*(char),long)->(int)
(	O
s	*(char)
,	O
"HTTP"	*(char)
,	O
sizeof	O
(	O
"HTTP"	*(char)
)	O
-	O
1	int
)	O
)	O
{	O
ctrl	*(struct)
->	O
contentLength	long
=	O
-	O
1	int
;	O
if	O
(	O
(	O
e	*(char)
=	O
strchr	(*(char),int)->(*(char))
(	O
s	*(char)
,	O
'.'	O
)	O
)	O
!=	O
NULL	O
)	O
{	O
e	*(char)
++	O
;	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
httpVersion	int
=	O
*	O
e	*(char)
-	O
'0'	O
;	O
if	O
(	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
httpVersion	int
<	O
1	int
||	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
httpVersion	int
>	O
2	int
)	O
ctrl	*(struct)
->	O
persist	int
=	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
httpVersion	int
=	O
0	int
;	O
else	O
ctrl	*(struct)
->	O
persist	int
=	O
1	int
;	O
}	O
if	O
(	O
(	O
e	*(char)
=	O
strchr	(*(char),int)->(*(char))
(	O
s	*(char)
,	O
' '	O
)	O
)	O
!=	O
NULL	O
)	O
{	O
e	*(char)
++	O
;	O
if	O
(	O
strchr	(*(char),int)->(*(char))
(	O
"0123456789"	*(char)
,	O
*	O
e	*(char)
)	O
)	O
strncpy	(*(char),*(char),long)->(*(char))
(	O
errorCode	array(char)
,	O
e	*(char)
,	O
3	int
)	O
;	O
errorCode	array(char)
[	O
3	int
]	O
=	O
'\0'	O
;	O
}	O
continue	O
;	O
}	O
for	O
(	O
e	*(char)
=	O
s	*(char)
;	O
*	O
e	*(char)
&&	O
!	O
(	O
*	O
e	*(char)
==	O
' '	O
||	O
*	O
e	*(char)
==	O
':'	O
)	O
;	O
e	*(char)
++	O
)	O
;	O
if	O
(	O
e	*(char)
>	O
s	*(char)
&&	O
*	O
e	*(char)
++	O
==	O
':'	O
)	O
{	O
size_t	long
ne	long
=	O
(	O
e	*(char)
-	O
s	*(char)
)	O
;	O
while	O
(	O
*	O
e	*(char)
&&	O
*	O
e	*(char)
==	O
' '	O
)	O
e	*(char)
++	O
;	O
if	O
(	O
!	O
strncmp	(*(char),*(char),long)->(int)
(	O
s	*(char)
,	O
"Accept-Ranges:"	*(char)
,	O
ne	long
)	O
)	O
{	O
if	O
(	O
!	O
strcmp	(*(char),*(char))->(int)
(	O
e	*(char)
,	O
"bytes"	*(char)
)	O
)	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
httpHasRange	int
=	O
1	int
;	O
if	O
(	O
!	O
strcmp	(*(char),*(char))->(int)
(	O
e	*(char)
,	O
"none"	*(char)
)	O
)	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
httpHasRange	int
=	O
0	int
;	O
}	O
else	O
if	O
(	O
!	O
strncmp	(*(char),*(char),long)->(int)
(	O
s	*(char)
,	O
"Content-Length:"	*(char)
,	O
ne	long
)	O
)	O
{	O
if	O
(	O
strchr	(*(char),int)->(*(char))
(	O
"0123456789"	*(char)
,	O
*	O
e	*(char)
)	O
)	O
ctrl	*(struct)
->	O
contentLength	long
=	O
atoi	(*(char))->(int)
(	O
e	*(char)
)	O
;	O
}	O
else	O
if	O
(	O
!	O
strncmp	(*(char),*(char),long)->(int)
(	O
s	*(char)
,	O
"Connection:"	*(char)
,	O
ne	long
)	O
)	O
{	O
if	O
(	O
!	O
strcmp	(*(char),*(char))->(int)
(	O
e	*(char)
,	O
"close"	*(char)
)	O
)	O
ctrl	*(struct)
->	O
persist	int
=	O
0	int
;	O
}	O
else	O
;	O
continue	O
;	O
}	O
if	O
(	O
!	O
strncmp	(*(char),*(char),long)->(int)
(	O
s	*(char)
,	O
"<TITLE>"	*(char)
,	O
sizeof	O
(	O
"<TITLE>"	*(char)
)	O
-	O
1	int
)	O
)	O
s	*(char)
+=	O
sizeof	O
(	O
"<TITLE>"	*(char)
)	O
-	O
1	int
;	O
if	O
(	O
strchr	(*(char),int)->(*(char))
(	O
"0123456789"	*(char)
,	O
*	O
s	*(char)
)	O
)	O
{	O
if	O
(	O
errorCode	array(char)
[	O
0	int
]	O
)	O
{	O
if	O
(	O
!	O
strncmp	(*(char),*(char),long)->(int)
(	O
s	*(char)
,	O
errorCode	array(char)
,	O
sizeof	O
(	O
"123"	*(char)
)	O
-	O
1	int
)	O
&&	O
s	*(char)
[	O
3	int
]	O
==	O
' '	O
)	O
moretodo	int
=	O
0	int
;	O
}	O
else	O
{	O
strncpy	(*(char),*(char),long)->(*(char))
(	O
errorCode	array(char)
,	O
s	*(char)
,	O
sizeof	O
(	O
"123"	*(char)
)	O
-	O
1	int
)	O
;	O
errorCode	array(char)
[	O
3	int
]	O
=	O
'\0'	O
;	O
if	O
(	O
s	*(char)
[	O
3	int
]	O
!=	O
'-'	O
)	O
moretodo	int
=	O
0	int
;	O
}	O
}	O
}	O
if	O
(	O
moretodo	int
&&	O
se	*(char)
>	O
s	*(char)
)	O
{	O
bufLength	int
=	O
se	*(char)
-	O
s	*(char)
-	O
1	int
;	O
if	O
(	O
s	*(char)
!=	O
buf	*(char)
)	O
memmove	(*(void),*(void),long)->(*(void))
(	O
buf	*(char)
,	O
s	*(char)
,	O
bufLength	int
)	O
;	O
}	O
else	O
{	O
bufLength	int
=	O
0	int
;	O
}	O
}	O
while	O
(	O
moretodo	int
&&	O
ec	int
==	O
0	int
)	O
;	O
if	O
(	O
str	*(char)
)	O
*	O
str	*(char)
=	O
buf	*(char)
;	O
if	O
(	O
ecp	*(int)
)	O
*	O
ecp	*(int)
=	O
atoi	(*(char))->(int)
(	O
errorCode	array(char)
)	O
;	O
return	O
ec	int
;	O
}	O
static	O
int	O
ftpCheckResponse	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*`,int,long,long,int,int,int,*`,*`,int,int,long,long)),*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*`,int,long,long,int,int,int,*`,*`,int,int,long,long)),int,*(char),int,int,int,int)),*(*(char)))->(int)
(	O
urlinfo	struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,*(struct),*(struct),int,*(char),int,int,int,int)
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
,	O
char	O
*	O
*	O
str	*(char)
)	O
{	O
int	O
ec	int
=	O
0	int
;	O
int	O
rc	long
;	O
URLSANE	O
(	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
)	O
;	O
rc	long
=	O
checkResponse	(*(void),*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*(void),int,long,long,int,int,int,*(void),*(struct(struct`,struct`,array(struct(int,long,long)))),int,int,long,long)),*(int),*(*(char)))->(int)
(	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
,	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
ctrl	*(struct)
,	O
&	O
ec	int
,	O
str	*(char)
)	O
;	O
switch	O
(	O
ec	int
)	O
{	O
case	O
550	int
:	O
return	O
FTPERR_FILE_NOT_FOUND	O
;	O
break	O
;	O
case	O
552	int
:	O
return	O
FTPERR_NIC_ABORT_IN_PROGRESS	O
;	O
break	O
;	O
default	O
:	O
if	O
(	O
ec	int
>=	O
400	int
&&	O
ec	int
<=	O
599	int
)	O
{	O
return	O
FTPERR_BAD_SERVER_RESPONSE	O
;	O
}	O
break	O
;	O
}	O
return	O
rc	long
;	O
}	O
static	O
int	O
ftpCommand	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*`,int,long,long,int,int,int,*`,*`,int,int,long,long)),*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*`,int,long,long,int,int,int,*`,*`,int,int,long,long)),int,*(char),int,int,int,int)),*(*(char)))->(int)
(	O
urlinfo	struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,*(struct),*(struct),int,*(char),int,int,int,int)
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
,	O
char	O
*	O
*	O
str	*(char)
,	O
...	O
)	O
{	O
va_list	array(struct(int,int,*(void),*(void)))
ap	array(struct(int,int,*(void),*(void)))
;	O
int	O
len	long
=	O
0	int
;	O
const	O
char	O
*	O
s	*(char)
,	O
*	O
t	*(char)
;	O
char	O
*	O
te	*(char)
;	O
int	O
rc	long
;	O
URLSANE	O
(	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
)	O
;	O
va_start	O
(	O
ap	array(struct(int,int,*(void),*(void)))
,	O
str	*(char)
)	O
;	O
while	O
(	O
(	O
s	*(char)
=	O
va_arg	O
(	O
ap	array(struct(int,int,*(void),*(void)))
,	O
const	O
char	O
*	O
)	O
)	O
!=	O
NULL	O
)	O
{	O
if	O
(	O
len	long
)	O
len	long
++	O
;	O
len	long
+=	O
strlen	(*(char))->(long)
(	O
s	*(char)
)	O
;	O
}	O
len	long
+=	O
sizeof	O
(	O
"\r\n"	*(char)
)	O
-	O
1	int
;	O
va_end	O
(	O
ap	array(struct(int,int,*(void),*(void)))
)	O
;	O
t	*(char)
=	O
te	*(char)
=	O
alloca	(long)->(*(void))
(	O
len	long
+	O
1	int
)	O
;	O
va_start	O
(	O
ap	array(struct(int,int,*(void),*(void)))
,	O
str	*(char)
)	O
;	O
while	O
(	O
(	O
s	*(char)
=	O
va_arg	O
(	O
ap	array(struct(int,int,*(void),*(void)))
,	O
const	O
char	O
*	O
)	O
)	O
!=	O
NULL	O
)	O
{	O
if	O
(	O
te	*(char)
>	O
t	*(char)
)	O
*	O
te	*(char)
++	O
=	O
' '	O
;	O
te	*(char)
=	O
rpm_stpcpy	()->(int)
(	O
te	*(char)
,	O
s	*(char)
)	O
;	O
}	O
te	*(char)
=	O
rpm_stpcpy	()->(int)
(	O
te	*(char)
,	O
"\r\n"	*(char)
)	O
;	O
va_end	O
(	O
ap	array(struct(int,int,*(void),*(void)))
)	O
;	O
if	O
(	O
_ftp_debug	int
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"-> %s"	*(char)
,	O
t	*(char)
)	O
;	O
if	O
(	O
fdWrite	(*(void),*(char),long)->(long)
(	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
ctrl	*(struct)
,	O
t	*(char)
,	O
(	O
te	*(char)
-	O
t	*(char)
)	O
)	O
!=	O
(	O
te	*(char)
-	O
t	*(char)
)	O
)	O
return	O
FTPERR_SERVER_IO_ERROR	O
;	O
rc	long
=	O
ftpCheckResponse	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*`,int,long,long,int,int,int,*`,*`,int,int,long,long)),*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*`,int,long,long,int,int,int,*`,*`,int,int,long,long)),int,*(char),int,int,int,int)),*(*(char)))->(int)
(	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
,	O
str	*(char)
)	O
;	O
return	O
rc	long
;	O
}	O
static	O
int	O
ftpLogin	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*`,int,long,long,int,int,int,*`,*`,int,int,long,long)),*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*`,int,long,long,int,int,int,*`,*`,int,int,long,long)),int,*(char),int,int,int,int)))->(int)
(	O
urlinfo	struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,*(struct),*(struct),int,*(char),int,int,int,int)
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
)	O
{	O
const	O
char	O
*	O
host	*(char)
;	O
const	O
char	O
*	O
user	*(char)
;	O
const	O
char	O
*	O
password	*(char)
;	O
int	O
port	int
;	O
int	O
rc	long
;	O
URLSANE	O
(	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
)	O
;	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
ctrl	*(struct)
=	O
fdLink	O
(	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
ctrl	*(struct)
,	O
"open ctrl"	*(char)
)	O
;	O
if	O
(	O
(	O
(	O
host	*(char)
=	O
(	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
proxyh	*(char)
?	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
proxyh	*(char)
:	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
host	*(char)
)	O
)	O
==	O
NULL	O
)	O
)	O
{	O
rc	long
=	O
FTPERR_BAD_HOSTNAME	O
;	O
goto	O
errxit	O
;	O
}	O
if	O
(	O
(	O
port	int
=	O
(	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
proxyp	int
>	O
0	int
?	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
proxyp	int
:	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
port	int
)	O
)	O
<	O
0	int
)	O
port	int
=	O
IPPORT_FTP	int
;	O
if	O
(	O
(	O
user	*(char)
=	O
(	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
proxyu	*(char)
?	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
proxyu	*(char)
:	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
user	*(char)
)	O
)	O
==	O
NULL	O
)	O
user	*(char)
=	O
"anonymous"	*(char)
;	O
if	O
(	O
(	O
password	*(char)
=	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
password	*(char)
)	O
==	O
NULL	O
)	O
{	O
if	O
(	O
getuid	()->(int)
(	O
)	O
)	O
{	O
struct	O
passwd	struct(*(char),*(char),int,int,*(char),*(char),*(char))
*	O
pw	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
=	O
getpwuid	(int)->(*(struct(*(char),*(char),int,int,*(char),*(char),*(char))))
(	O
getuid	()->(int)
(	O
)	O
)	O
;	O
char	O
*	O
myp	*(char)
=	O
alloca	(long)->(*(void))
(	O
strlen	(*(char))->(long)
(	O
pw	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
->	O
pw_name	*(char)
)	O
+	O
sizeof	O
(	O
"@"	*(char)
)	O
)	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
myp	*(char)
,	O
pw	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
->	O
pw_name	*(char)
)	O
;	O
strcat	(*(char),*(char))->(*(char))
(	O
myp	*(char)
,	O
"@"	*(char)
)	O
;	O
password	*(char)
=	O
myp	*(char)
;	O
}	O
else	O
{	O
password	*(char)
=	O
"root@"	*(char)
;	O
}	O
}	O
if	O
(	O
fdFileno	(*(void))->(int)
(	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
ctrl	*(struct)
)	O
>=	O
0	int
&&	O
fdWritable	(*(struct),int)->(int)
(	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
ctrl	*(struct)
,	O
0	int
)	O
<	O
1	int
)	O
fdClose	(*(void))->(int)
(	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
ctrl	*(struct)
)	O
;	O
if	O
(	O
fdFileno	(*(void))->(int)
(	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
ctrl	*(struct)
)	O
<	O
0	int
)	O
{	O
rc	long
=	O
tcpConnect	(*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*(void),int,long,long,int,int,int,*(void),*(struct(struct`,struct`,array(struct(int,long,long)))),int,int,long,long)),*(char),int)->(int)
(	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
ctrl	*(struct)
,	O
host	*(char)
,	O
port	int
)	O
;	O
if	O
(	O
rc	long
<	O
0	int
)	O
goto	O
errxit2	O
;	O
}	O
if	O
(	O
(	O
rc	long
=	O
ftpCheckResponse	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*`,int,long,long,int,int,int,*`,*`,int,int,long,long)),*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*`,int,long,long,int,int,int,*`,*`,int,int,long,long)),int,*(char),int,int,int,int)),*(*(char)))->(int)
(	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
,	O
NULL	O
)	O
)	O
)	O
goto	O
errxit	O
;	O
if	O
(	O
(	O
rc	long
=	O
ftpCommand	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*`,int,long,long,int,int,int,*`,*`,int,int,long,long)),*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*`,int,long,long,int,int,int,*`,*`,int,int,long,long)),int,*(char),int,int,int,int)),*(*(char)))->(int)
(	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
,	O
NULL	O
,	O
"USER"	*(char)
,	O
user	*(char)
,	O
NULL	O
)	O
)	O
)	O
goto	O
errxit	O
;	O
if	O
(	O
(	O
rc	long
=	O
ftpCommand	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*`,int,long,long,int,int,int,*`,*`,int,int,long,long)),*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*`,int,long,long,int,int,int,*`,*`,int,int,long,long)),int,*(char),int,int,int,int)),*(*(char)))->(int)
(	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
,	O
NULL	O
,	O
"PASS"	*(char)
,	O
password	*(char)
,	O
NULL	O
)	O
)	O
)	O
goto	O
errxit	O
;	O
if	O
(	O
(	O
rc	long
=	O
ftpCommand	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*`,int,long,long,int,int,int,*`,*`,int,int,long,long)),*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*`,int,long,long,int,int,int,*`,*`,int,int,long,long)),int,*(char),int,int,int,int)),*(*(char)))->(int)
(	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
,	O
NULL	O
,	O
"TYPE"	*(char)
,	O
"I"	*(char)
,	O
NULL	O
)	O
)	O
)	O
goto	O
errxit	O
;	O
return	O
0	int
;	O
errxit	O
:	O
fdSetSyserrno	(*(struct),int,*(void))->(void)
(	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
ctrl	*(struct)
,	O
errno	O
,	O
ftpStrerror	(int)->(*(char))
(	O
rc	long
)	O
)	O
;	O
errxit2	O
:	O
if	O
(	O
fdFileno	(*(void))->(int)
(	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
ctrl	*(struct)
)	O
>=	O
0	int
)	O
fdClose	(*(void))->(int)
(	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
ctrl	*(struct)
)	O
;	O
return	O
rc	long
;	O
}	O
static	O
int	O
ftpReq	(*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*(void),int,long,long,int,int,int,*(void),*(struct(struct`,struct`,array(struct(int,long,long)))),int,int,long,long)),*(char),*(char))->(int)
(	O
FD_t	*(struct)
data	*(void)
,	O
const	O
char	O
*	O
ftpCmd	*(char)
,	O
const	O
char	O
*	O
ftpArg	*(char)
)	O
{	O
urlinfo	struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,*(struct),*(struct),int,*(char),int,int,int,int)
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
=	O
data	*(void)
->	O
url	*(char)
;	O
struct	O
sockaddr_in	struct(short,short,struct(int),array(char))
dataAddress	struct(short,short,struct(int),array(char))
;	O
char	O
*	O
cmd	*(char)
;	O
int	O
cmdlen	int
;	O
char	O
*	O
passReply	*(char)
;	O
char	O
*	O
chptr	*(char)
;	O
int	O
rc	long
;	O
URLSANE	O
(	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
)	O
;	O
if	O
(	O
ftpCmd	*(char)
==	O
NULL	O
)	O
return	O
FTPERR_UNKNOWN	O
;	O
cmdlen	int
=	O
strlen	(*(char))->(long)
(	O
ftpCmd	*(char)
)	O
+	O
(	O
ftpArg	*(char)
?	O
1	int
+	O
strlen	(*(char))->(long)
(	O
ftpArg	*(char)
)	O
:	O
0	int
)	O
+	O
sizeof	O
(	O
"\r\n"	*(char)
)	O
;	O
chptr	*(char)
=	O
cmd	*(char)
=	O
alloca	(long)->(*(void))
(	O
cmdlen	int
)	O
;	O
chptr	*(char)
=	O
rpm_stpcpy	()->(int)
(	O
chptr	*(char)
,	O
ftpCmd	*(char)
)	O
;	O
if	O
(	O
ftpArg	*(char)
)	O
{	O
*	O
chptr	*(char)
++	O
=	O
' '	O
;	O
chptr	*(char)
=	O
rpm_stpcpy	()->(int)
(	O
chptr	*(char)
,	O
ftpArg	*(char)
)	O
;	O
}	O
chptr	*(char)
=	O
rpm_stpcpy	()->(int)
(	O
chptr	*(char)
,	O
"\r\n"	*(char)
)	O
;	O
cmdlen	int
=	O
chptr	*(char)
-	O
cmd	*(char)
;	O
if	O
(	O
!	O
strncmp	(*(char),*(char),long)->(int)
(	O
cmd	*(char)
,	O
"RETR"	*(char)
,	O
4	int
)	O
)	O
{	O
unsigned	O
cl	int
;	O
passReply	*(char)
=	O
NULL	O
;	O
rc	long
=	O
ftpCommand	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*`,int,long,long,int,int,int,*`,*`,int,int,long,long)),*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*`,int,long,long,int,int,int,*`,*`,int,int,long,long)),int,*(char),int,int,int,int)),*(*(char)))->(int)
(	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
,	O
&	O
passReply	*(char)
,	O
"SIZE"	*(char)
,	O
ftpArg	*(char)
,	O
NULL	O
)	O
;	O
if	O
(	O
rc	long
)	O
goto	O
errxit	O
;	O
if	O
(	O
sscanf	(*(char),*(char))->(int)
(	O
passReply	*(char)
,	O
"%d %u"	*(char)
,	O
&	O
rc	long
,	O
&	O
cl	int
)	O
!=	O
2	int
)	O
{	O
rc	long
=	O
FTPERR_BAD_SERVER_RESPONSE	O
;	O
goto	O
errxit	O
;	O
}	O
rc	long
=	O
0	int
;	O
data	*(void)
->	O
contentLength	long
=	O
cl	int
;	O
}	O
passReply	*(char)
=	O
NULL	O
;	O
rc	long
=	O
ftpCommand	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*`,int,long,long,int,int,int,*`,*`,int,int,long,long)),*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*`,int,long,long,int,int,int,*`,*`,int,int,long,long)),int,*(char),int,int,int,int)),*(*(char)))->(int)
(	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
,	O
&	O
passReply	*(char)
,	O
"PASV"	*(char)
,	O
NULL	O
)	O
;	O
if	O
(	O
rc	long
)	O
{	O
rc	long
=	O
FTPERR_PASSIVE_ERROR	O
;	O
goto	O
errxit	O
;	O
}	O
chptr	*(char)
=	O
passReply	*(char)
;	O
while	O
(	O
*	O
chptr	*(char)
&&	O
*	O
chptr	*(char)
!=	O
'('	O
)	O
chptr	*(char)
++	O
;	O
if	O
(	O
*	O
chptr	*(char)
!=	O
'('	O
)	O
return	O
FTPERR_PASSIVE_ERROR	O
;	O
chptr	*(char)
++	O
;	O
passReply	*(char)
=	O
chptr	*(char)
;	O
while	O
(	O
*	O
chptr	*(char)
&&	O
*	O
chptr	*(char)
!=	O
')'	O
)	O
chptr	*(char)
++	O
;	O
if	O
(	O
*	O
chptr	*(char)
!=	O
')'	O
)	O
return	O
FTPERR_PASSIVE_ERROR	O
;	O
*	O
chptr	*(char)
--	O
=	O
'\0'	O
;	O
while	O
(	O
*	O
chptr	*(char)
&&	O
*	O
chptr	*(char)
!=	O
','	O
)	O
chptr	*(char)
--	O
;	O
if	O
(	O
*	O
chptr	*(char)
!=	O
','	O
)	O
return	O
FTPERR_PASSIVE_ERROR	O
;	O
chptr	*(char)
--	O
;	O
while	O
(	O
*	O
chptr	*(char)
&&	O
*	O
chptr	*(char)
!=	O
','	O
)	O
chptr	*(char)
--	O
;	O
if	O
(	O
*	O
chptr	*(char)
!=	O
','	O
)	O
return	O
FTPERR_PASSIVE_ERROR	O
;	O
*	O
chptr	*(char)
++	O
=	O
'\0'	O
;	O
{	O
int	O
i	int
,	O
j	int
;	O
dataAddress	struct(short,short,struct(int),array(char))
.	O
sin_family	short
=	O
AF_INET	O
;	O
if	O
(	O
sscanf	(*(char),*(char))->(int)
(	O
chptr	*(char)
,	O
"%d,%d"	*(char)
,	O
&	O
i	int
,	O
&	O
j	int
)	O
!=	O
2	int
)	O
{	O
rc	long
=	O
FTPERR_PASSIVE_ERROR	O
;	O
goto	O
errxit	O
;	O
}	O
dataAddress	struct(short,short,struct(int),array(char))
.	O
sin_port	short
=	O
htons	(short)->(short)
(	O
(	O
(	O
(	O
unsigned	O
)	O
i	int
)	O
<<	O
8	int
)	O
+	O
j	int
)	O
;	O
}	O
chptr	*(char)
=	O
passReply	*(char)
;	O
while	O
(	O
*	O
chptr	*(char)
++	O
)	O
{	O
if	O
(	O
*	O
chptr	*(char)
==	O
','	O
)	O
*	O
chptr	*(char)
=	O
'.'	O
;	O
}	O
if	O
(	O
!	O
inet_aton	(*(char),*(struct(int)))->(int)
(	O
passReply	*(char)
,	O
&	O
dataAddress	struct(short,short,struct(int),array(char))
.	O
sin_addr	struct(int)
)	O
)	O
{	O
rc	long
=	O
FTPERR_PASSIVE_ERROR	O
;	O
goto	O
errxit	O
;	O
}	O
rc	long
=	O
socket	(int,int,int)->(int)
(	O
AF_INET	O
,	O
SOCK_STREAM	int
,	O
IPPROTO_IP	int
)	O
;	O
fdSetFdno	(*(struct),int)->(void)
(	O
data	*(void)
,	O
(	O
rc	long
>=	O
0	int
?	O
rc	long
:	O
-	O
1	int
)	O
)	O
;	O
if	O
(	O
rc	long
<	O
0	int
)	O
{	O
rc	long
=	O
FTPERR_FAILED_CONNECT	O
;	O
goto	O
errxit	O
;	O
}	O
data	*(void)
=	O
fdLink	O
(	O
data	*(void)
,	O
"open data (ftpReq)"	*(char)
)	O
;	O
while	O
(	O
connect	(int,union(*(struct(short,array(char))),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct)),int)->(int)
(	O
fdFileno	(*(void))->(int)
(	O
data	*(void)
)	O
,	O
(	O
struct	O
sockaddr	struct(short,array(char))
*	O
)	O
&	O
dataAddress	struct(short,short,struct(int),array(char))
,	O
sizeof	O
(	O
dataAddress	struct(short,short,struct(int),array(char))
)	O
)	O
<	O
0	int
)	O
{	O
if	O
(	O
errno	O
==	O
EINTR	int
)	O
continue	O
;	O
rc	long
=	O
FTPERR_FAILED_DATA_CONNECT	O
;	O
goto	O
errxit	O
;	O
}	O
if	O
(	O
_ftp_debug	int
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"-> %s"	*(char)
,	O
cmd	*(char)
)	O
;	O
if	O
(	O
fdWrite	(*(void),*(char),long)->(long)
(	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
ctrl	*(struct)
,	O
cmd	*(char)
,	O
cmdlen	int
)	O
!=	O
cmdlen	int
)	O
{	O
rc	long
=	O
FTPERR_SERVER_IO_ERROR	O
;	O
goto	O
errxit	O
;	O
}	O
if	O
(	O
(	O
rc	long
=	O
ftpCheckResponse	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*`,int,long,long,int,int,int,*`,*`,int,int,long,long)),*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*`,int,long,long,int,int,int,*`,*`,int,int,long,long)),int,*(char),int,int,int,int)),*(*(char)))->(int)
(	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
,	O
NULL	O
)	O
)	O
)	O
{	O
goto	O
errxit	O
;	O
}	O
data	*(void)
->	O
ftpFileDoneNeeded	int
=	O
1	int
;	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
ctrl	*(struct)
=	O
fdLink	O
(	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
ctrl	*(struct)
,	O
"grab data (ftpReq)"	*(char)
)	O
;	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
ctrl	*(struct)
=	O
fdLink	O
(	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
ctrl	*(struct)
,	O
"open data (ftpReq)"	*(char)
)	O
;	O
return	O
0	int
;	O
errxit	O
:	O
fdSetSyserrno	(*(struct),int,*(void))->(void)
(	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
ctrl	*(struct)
,	O
errno	O
,	O
ftpStrerror	(int)->(*(char))
(	O
rc	long
)	O
)	O
;	O
if	O
(	O
fdFileno	(*(void))->(int)
(	O
data	*(void)
)	O
>=	O
0	int
)	O
fdClose	(*(void))->(int)
(	O
data	*(void)
)	O
;	O
return	O
rc	long
;	O
}	O
static	O
int	O
urlConnect	(*(char),*(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,*(struct`),*(struct`),int,*(char),int,int,int,int))))->(int)
(	O
const	O
char	O
*	O
url	*(char)
,	O
urlinfo	struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,*(struct),*(struct),int,*(char),int,int,int,int)
*	O
uret	*(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*`,int,long,long,int,int,int,*`,*`,int,int,long,long)),*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*`,int,long,long,int,int,int,*`,*`,int,int,long,long)),int,*(char),int,int,int,int)))
)	O
{	O
urlinfo	struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,*(struct),*(struct),int,*(char),int,int,int,int)
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
;	O
int	O
rc	long
=	O
0	int
;	O
if	O
(	O
urlSplit	(*(char),*(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,*(struct`),*(struct`),int,*(char),int,int,int,int))))->(int)
(	O
url	*(char)
,	O
&	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
)	O
<	O
0	int
)	O
return	O
-	O
1	int
;	O
if	O
(	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
urltype	enum(int,int,int,int,int)
==	O
URL_IS_FTP	int
)	O
{	O
FD_t	*(struct)
fd	*(struct)
;	O
if	O
(	O
(	O
fd	*(struct)
=	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
ctrl	*(struct)
)	O
==	O
NULL	O
)	O
{	O
fd	*(struct)
=	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
ctrl	*(struct)
=	O
fdNew	O
(	O
"persist ctrl (urlConnect FTP)"	*(char)
)	O
;	O
fdSetIo	(*(struct),*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))))->(void)
(	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
ctrl	*(struct)
,	O
ufdio	*(struct(*((*(void),*(char),long)->(long)),*((*(void),*(char),long)->(long)),*((*(void),long,int)->(int)),*((*(void))->(int)),*((*(void),*(char),*(char),int)->(*(struct`))),*((*(struct`),*(char),*(char),int)->(*(struct`))),*((*(char),*(char),int)->(*(struct`))),*((*(void))->(int)),*((*(char),int,int)->(*(struct`))),*((*(char),*(char))->(*(struct`))),*((*(struct`))->(*(void))),*((*(struct`))->(int)),*((*(char),int)->(int)),*((*(char))->(int)),*((*(char))->(int)),*((*(char),*(char))->(int)),*((*(char))->(int))))
)	O
;	O
}	O
fd	*(struct)
->	O
rd_timeoutsecs	int
=	O
ftpTimeoutSecs	int
;	O
fd	*(struct)
->	O
contentLength	long
=	O
fd	*(struct)
->	O
bytesRemain	long
=	O
-	O
1	int
;	O
fd	*(struct)
->	O
url	*(char)
=	O
NULL	O
;	O
fd	*(struct)
->	O
ftpFileDoneNeeded	int
=	O
0	int
;	O
fd	*(struct)
=	O
fdLink	O
(	O
fd	*(struct)
,	O
"grab ctrl (urlConnect FTP)"	*(char)
)	O
;	O
if	O
(	O
fdFileno	(*(void))->(int)
(	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
ctrl	*(struct)
)	O
<	O
0	int
)	O
{	O
rpmMessage	(int,*(char))->(void)
(	O
RPMMESS_DEBUG	int
,	O
_	O
(	O
"logging into %s as %s, pw %s\n"	*(char)
)	O
,	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
host	*(char)
,	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
user	*(char)
?	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
user	*(char)
:	O
"ftp"	*(char)
,	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
password	*(char)
?	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
password	*(char)
:	O
"(username)"	*(char)
)	O
;	O
if	O
(	O
(	O
rc	long
=	O
ftpLogin	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*`,int,long,long,int,int,int,*`,*`,int,int,long,long)),*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*`,int,long,long,int,int,int,*`,*`,int,int,long,long)),int,*(char),int,int,int,int)))->(int)
(	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
)	O
)	O
<	O
0	int
)	O
{	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
ctrl	*(struct)
=	O
fdFree	O
(	O
fd	*(struct)
,	O
"grab ctrl (urlConnect FTP)"	*(char)
)	O
;	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
openError	int
=	O
rc	long
;	O
}	O
}	O
}	O
if	O
(	O
uret	*(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*`,int,long,long,int,int,int,*`,*`,int,int,long,long)),*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*`,int,long,long,int,int,int,*`,*`,int,int,long,long)),int,*(char),int,int,int,int)))
!=	O
NULL	O
)	O
*	O
uret	*(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*`,int,long,long,int,int,int,*`,*`,int,int,long,long)),*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*`,int,long,long,int,int,int,*`,*`,int,int,long,long)),int,*(char),int,int,int,int)))
=	O
urlLink	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,*(struct),*(struct),int,*(char),int,int,int,int)),*(char))->(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,*(struct),*(struct),int,*(char),int,int,int,int)))
(	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
,	O
"urlConnect"	*(char)
)	O
;	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
=	O
urlFree	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,*(struct),*(struct),int,*(char),int,int,int,int)),*(char))->(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,*(struct),*(struct),int,*(char),int,int,int,int)))
(	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
,	O
"urlSplit (urlConnect)"	*(char)
)	O
;	O
return	O
rc	long
;	O
}	O
static	O
rpmCallbackFunction	*((*(struct),enum(int,int,int,int,int,int,int,int,int,int),long,long,*(void),*(void))->(*(void)))
urlNotify	*((*(struct),enum(int,int,int,int,int,int,int,int,int,int),long,long,*(void),*(void))->(*(void)))
=	O
NULL	O
;	O
static	O
void	O
*	O
urlNotifyData	*(void)
=	O
NULL	O
;	O
static	O
int	O
urlNotifyCount	int
=	O
-	O
1	int
;	O
void	O
urlSetCallback	(*((*(struct),enum(int,int,int,int,int,int,int,int,int,int),long,long,*(void),*(void))->(*(void))),*(void),int)->(void)
(	O
rpmCallbackFunction	*((*(struct),enum(int,int,int,int,int,int,int,int,int,int),long,long,*(void),*(void))->(*(void)))
notify	*((*(struct),enum(int,int,int,int,int,int,int,int,int,int),long,long,*(void),*(void))->(*(void)))
,	O
void	O
*	O
notifyData	*(void)
,	O
int	O
notifyCount	int
)	O
{	O
urlNotify	*((*(struct),enum(int,int,int,int,int,int,int,int,int,int),long,long,*(void),*(void))->(*(void)))
=	O
notify	*((*(struct),enum(int,int,int,int,int,int,int,int,int,int),long,long,*(void),*(void))->(*(void)))
;	O
urlNotifyData	*(void)
=	O
notifyData	*(void)
;	O
urlNotifyCount	int
=	O
(	O
notifyCount	int
>=	O
0	int
)	O
?	O
notifyCount	int
:	O
4096	int
;	O
}	O
int	O
ufdCopy	(*(struct),*(struct))->(int)
(	O
FD_t	*(struct)
sfd	*(struct)
,	O
FD_t	*(struct)
tfd	*(struct)
)	O
{	O
char	O
buf	*(char)
[	O
BUFSIZ	int
]	O
;	O
int	O
itemsRead	int
;	O
int	O
itemsCopied	int
=	O
0	int
;	O
int	O
rc	long
=	O
0	int
;	O
int	O
notifier	int
=	O
-	O
1	int
;	O
if	O
(	O
urlNotify	*((*(struct),enum(int,int,int,int,int,int,int,int,int,int),long,long,*(void),*(void))->(*(void)))
)	O
{	O
(	O
void	O
)	O
(	O
*	O
urlNotify	*((*(struct),enum(int,int,int,int,int,int,int,int,int,int),long,long,*(void),*(void))->(*(void)))
)	O
(	O
NULL	O
,	O
RPMCALLBACK_INST_OPEN_FILE	int
,	O
0	int
,	O
0	int
,	O
NULL	O
,	O
urlNotifyData	*(void)
)	O
;	O
}	O
while	O
(	O
1	int
)	O
{	O
rc	long
=	O
Fread	(*(void),long,long,*(struct))->(long)
(	O
buf	*(char)
,	O
sizeof	O
(	O
buf	*(char)
[	O
0	int
]	O
)	O
,	O
sizeof	O
(	O
buf	*(char)
)	O
,	O
sfd	*(struct)
)	O
;	O
if	O
(	O
rc	long
<	O
0	int
)	O
break	O
;	O
else	O
if	O
(	O
rc	long
==	O
0	int
)	O
{	O
rc	long
=	O
itemsCopied	int
;	O
break	O
;	O
}	O
itemsRead	int
=	O
rc	long
;	O
rc	long
=	O
Fwrite	(*(void),long,long,*(struct))->(long)
(	O
buf	*(char)
,	O
sizeof	O
(	O
buf	*(char)
[	O
0	int
]	O
)	O
,	O
itemsRead	int
,	O
tfd	*(struct)
)	O
;	O
if	O
(	O
rc	long
<	O
0	int
)	O
break	O
;	O
if	O
(	O
rc	long
!=	O
itemsRead	int
)	O
{	O
rc	long
=	O
FTPERR_FILE_IO_ERROR	O
;	O
break	O
;	O
}	O
itemsCopied	int
+=	O
itemsRead	int
;	O
if	O
(	O
urlNotify	*((*(struct),enum(int,int,int,int,int,int,int,int,int,int),long,long,*(void),*(void))->(*(void)))
&&	O
urlNotifyCount	int
>	O
0	int
)	O
{	O
int	O
n	int
=	O
itemsCopied	int
/	O
urlNotifyCount	int
;	O
if	O
(	O
n	int
!=	O
notifier	int
)	O
{	O
(	O
void	O
)	O
(	O
*	O
urlNotify	*((*(struct),enum(int,int,int,int,int,int,int,int,int,int),long,long,*(void),*(void))->(*(void)))
)	O
(	O
NULL	O
,	O
RPMCALLBACK_INST_PROGRESS	int
,	O
itemsCopied	int
,	O
0	int
,	O
NULL	O
,	O
urlNotifyData	*(void)
)	O
;	O
notifier	int
=	O
n	int
;	O
}	O
}	O
}	O
DBGIO	O
(	O
sfd	*(struct)
,	O
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"++ copied %d bytes: %s\n"	*(char)
,	O
itemsCopied	int
,	O
ftpStrerror	(int)->(*(char))
(	O
rc	long
)	O
)	O
)	O
;	O
if	O
(	O
urlNotify	*((*(struct),enum(int,int,int,int,int,int,int,int,int,int),long,long,*(void),*(void))->(*(void)))
)	O
{	O
(	O
void	O
)	O
(	O
*	O
urlNotify	*((*(struct),enum(int,int,int,int,int,int,int,int,int,int),long,long,*(void),*(void))->(*(void)))
)	O
(	O
NULL	O
,	O
RPMCALLBACK_INST_OPEN_FILE	int
,	O
itemsCopied	int
,	O
itemsCopied	int
,	O
NULL	O
,	O
urlNotifyData	*(void)
)	O
;	O
}	O
return	O
rc	long
;	O
}	O
int	O
ufdGetFile	(*(struct),*(struct))->(int)
(	O
FD_t	*(struct)
sfd	*(struct)
,	O
FD_t	*(struct)
tfd	*(struct)
)	O
{	O
int	O
rc	long
;	O
FDSANE	O
(	O
sfd	*(struct)
)	O
;	O
FDSANE	O
(	O
tfd	*(struct)
)	O
;	O
rc	long
=	O
ufdCopy	(*(struct),*(struct))->(int)
(	O
sfd	*(struct)
,	O
tfd	*(struct)
)	O
;	O
Fclose	(*(struct))->(int)
(	O
sfd	*(struct)
)	O
;	O
if	O
(	O
rc	long
>	O
0	int
)	O
rc	long
=	O
0	int
;	O
return	O
rc	long
;	O
}	O
static	O
int	O
ftpCmd	*(char)
(	O
const	O
char	O
*	O
cmd	*(char)
,	O
const	O
char	O
*	O
url	*(char)
,	O
const	O
char	O
*	O
arg2	*(char)
)	O
{	O
urlinfo	struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,*(struct),*(struct),int,*(char),int,int,int,int)
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
;	O
int	O
rc	long
;	O
const	O
char	O
*	O
path	*(char)
;	O
if	O
(	O
urlConnect	(*(char),*(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,*(struct`),*(struct`),int,*(char),int,int,int,int))))->(int)
(	O
url	*(char)
,	O
&	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
)	O
<	O
0	int
)	O
return	O
-	O
1	int
;	O
(	O
void	O
)	O
urlPath	(*(char),*(*(char)))->(int)
(	O
url	*(char)
,	O
&	O
path	*(char)
)	O
;	O
rc	long
=	O
ftpCommand	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*`,int,long,long,int,int,int,*`,*`,int,int,long,long)),*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*`,int,long,long,int,int,int,*`,*`,int,int,long,long)),int,*(char),int,int,int,int)),*(*(char)))->(int)
(	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
,	O
NULL	O
,	O
cmd	*(char)
,	O
path	*(char)
,	O
arg2	*(char)
,	O
NULL	O
)	O
;	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
ctrl	*(struct)
=	O
fdFree	O
(	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
ctrl	*(struct)
,	O
"grab ctrl (ftpCmd)"	*(char)
)	O
;	O
return	O
rc	long
;	O
}	O
static	O
int	O
ftpMkdir	(*(char),int)->(int)
(	O
const	O
char	O
*	O
path	*(char)
,	O
mode_t	int
mode	int
)	O
{	O
int	O
rc	long
;	O
if	O
(	O
(	O
rc	long
=	O
ftpCmd	*(char)
(	O
"MKD"	*(char)
,	O
path	*(char)
,	O
NULL	O
)	O
)	O
!=	O
0	int
)	O
return	O
rc	long
;	O
return	O
rc	long
;	O
}	O
static	O
int	O
ftpChdir	(*(char))->(int)
(	O
const	O
char	O
*	O
path	*(char)
)	O
{	O
return	O
ftpCmd	*(char)
(	O
"CWD"	*(char)
,	O
path	*(char)
,	O
NULL	O
)	O
;	O
}	O
static	O
int	O
ftpRmdir	(*(char))->(int)
(	O
const	O
char	O
*	O
path	*(char)
)	O
{	O
return	O
ftpCmd	*(char)
(	O
"RMD"	*(char)
,	O
path	*(char)
,	O
NULL	O
)	O
;	O
}	O
static	O
int	O
ftpRename	(*(char),*(char))->(int)
(	O
const	O
char	O
*	O
oldpath	*(char)
,	O
const	O
char	O
*	O
newpath	*(char)
)	O
{	O
int	O
rc	long
;	O
if	O
(	O
(	O
rc	long
=	O
ftpCmd	*(char)
(	O
"RNFR"	*(char)
,	O
oldpath	*(char)
,	O
NULL	O
)	O
)	O
!=	O
0	int
)	O
return	O
rc	long
;	O
return	O
ftpCmd	*(char)
(	O
"RNTO"	*(char)
,	O
newpath	*(char)
,	O
NULL	O
)	O
;	O
}	O
static	O
int	O
ftpUnlink	(*(char))->(int)
(	O
const	O
char	O
*	O
path	*(char)
)	O
{	O
return	O
ftpCmd	*(char)
(	O
"DELE"	*(char)
,	O
path	*(char)
,	O
NULL	O
)	O
;	O
}	O
static	O
int	O
ftpAbort	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*`,int,long,long,int,int,int,*`,*`,int,int,long,long)),*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*`,int,long,long,int,int,int,*`,*`,int,int,long,long)),int,*(char),int,int,int,int)),*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*(void),int,long,long,int,int,int,*(void),*(struct(struct`,struct`,array(struct(int,long,long)))),int,int,long,long)))->(int)
(	O
urlinfo	struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,*(struct),*(struct),int,*(char),int,int,int,int)
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
,	O
FD_t	*(struct)
data	*(void)
)	O
{	O
static	O
unsigned	O
char	O
ipbuf	array(char)
[	O
3	int
]	O
=	O
{	O
IAC	int
,	O
IP	int
,	O
IAC	int
}	O
;	O
FD_t	*(struct)
ctrl	*(struct)
;	O
int	O
rc	long
;	O
int	O
tosecs	int
;	O
URLSANE	O
(	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
)	O
;	O
if	O
(	O
data	*(void)
!=	O
NULL	O
)	O
{	O
data	*(void)
->	O
ftpFileDoneNeeded	int
=	O
0	int
;	O
if	O
(	O
fdFileno	(*(void))->(int)
(	O
data	*(void)
)	O
>=	O
0	int
)	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
ctrl	*(struct)
=	O
fdFree	O
(	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
ctrl	*(struct)
,	O
"open data (ftpAbort)"	*(char)
)	O
;	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
ctrl	*(struct)
=	O
fdFree	O
(	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
ctrl	*(struct)
,	O
"grab data (ftpAbort)"	*(char)
)	O
;	O
}	O
ctrl	*(struct)
=	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
ctrl	*(struct)
;	O
DBGIO	O
(	O
0	int
,	O
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"-> ABOR\n"	*(char)
)	O
)	O
;	O
if	O
(	O
send	(int,*(void),long,int)->(long)
(	O
fdFileno	(*(void))->(int)
(	O
ctrl	*(struct)
)	O
,	O
ipbuf	array(char)
,	O
sizeof	O
(	O
ipbuf	array(char)
)	O
,	O
MSG_OOB	int
)	O
!=	O
sizeof	O
(	O
ipbuf	array(char)
)	O
)	O
{	O
fdClose	(*(void))->(int)
(	O
ctrl	*(struct)
)	O
;	O
return	O
FTPERR_SERVER_IO_ERROR	O
;	O
}	O
sprintf	(*(char),*(char))->(int)
(	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
buf	*(char)
,	O
"%cABOR\r\n"	*(char)
,	O
(	O
char	O
)	O
DM	int
)	O
;	O
if	O
(	O
fdWrite	(*(void),*(char),long)->(long)
(	O
ctrl	*(struct)
,	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
buf	*(char)
,	O
7	int
)	O
!=	O
7	int
)	O
{	O
fdClose	(*(void))->(int)
(	O
ctrl	*(struct)
)	O
;	O
return	O
FTPERR_SERVER_IO_ERROR	O
;	O
}	O
if	O
(	O
data	*(void)
&&	O
fdFileno	(*(void))->(int)
(	O
data	*(void)
)	O
>=	O
0	int
)	O
{	O
tosecs	int
=	O
data	*(void)
->	O
rd_timeoutsecs	int
;	O
data	*(void)
->	O
rd_timeoutsecs	int
=	O
10	int
;	O
if	O
(	O
fdReadable	(*(struct),int)->(int)
(	O
data	*(void)
,	O
data	*(void)
->	O
rd_timeoutsecs	int
)	O
>	O
0	int
)	O
{	O
while	O
(	O
timedRead	(*(struct),*(void),int)->(int)
(	O
data	*(void)
,	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
buf	*(char)
,	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
bufAlloced	int
)	O
>	O
0	int
)	O
;	O
}	O
data	*(void)
->	O
rd_timeoutsecs	int
=	O
tosecs	int
;	O
shutdown	(int,int)->(int)
(	O
fdFileno	(*(void))->(int)
(	O
data	*(void)
)	O
,	O
SHUT_RDWR	int
)	O
;	O
close	*((*(void))->(int))
(	O
fdFileno	(*(void))->(int)
(	O
data	*(void)
)	O
)	O
;	O
data	*(void)
->	O
fps	array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int))
[	O
0	int
]	O
.	O
fdno	int
=	O
-	O
1	int
;	O
}	O
tosecs	int
=	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
ctrl	*(struct)
->	O
rd_timeoutsecs	int
;	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
ctrl	*(struct)
->	O
rd_timeoutsecs	int
=	O
10	int
;	O
if	O
(	O
(	O
rc	long
=	O
ftpCheckResponse	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*`,int,long,long,int,int,int,*`,*`,int,int,long,long)),*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*`,int,long,long,int,int,int,*`,*`,int,int,long,long)),int,*(char),int,int,int,int)),*(*(char)))->(int)
(	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
,	O
NULL	O
)	O
)	O
==	O
FTPERR_NIC_ABORT_IN_PROGRESS	O
)	O
{	O
rc	long
=	O
ftpCheckResponse	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*`,int,long,long,int,int,int,*`,*`,int,int,long,long)),*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*`,int,long,long,int,int,int,*`,*`,int,int,long,long)),int,*(char),int,int,int,int)),*(*(char)))->(int)
(	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
,	O
NULL	O
)	O
;	O
}	O
rc	long
=	O
ftpCheckResponse	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*`,int,long,long,int,int,int,*`,*`,int,int,long,long)),*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*`,int,long,long,int,int,int,*`,*`,int,int,long,long)),int,*(char),int,int,int,int)),*(*(char)))->(int)
(	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
,	O
NULL	O
)	O
;	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
ctrl	*(struct)
->	O
rd_timeoutsecs	int
=	O
tosecs	int
;	O
return	O
rc	long
;	O
}	O
static	O
int	O
ftpFileDone	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*`,int,long,long,int,int,int,*`,*`,int,int,long,long)),*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*`,int,long,long,int,int,int,*`,*`,int,int,long,long)),int,*(char),int,int,int,int)),*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*(void),int,long,long,int,int,int,*(void),*(struct(struct`,struct`,array(struct(int,long,long)))),int,int,long,long)))->(int)
(	O
urlinfo	struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,*(struct),*(struct),int,*(char),int,int,int,int)
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
,	O
FD_t	*(struct)
data	*(void)
)	O
{	O
int	O
rc	long
=	O
0	int
;	O
URLSANE	O
(	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
)	O
;	O
assert	O
(	O
data	*(void)
->	O
ftpFileDoneNeeded	int
)	O
;	O
if	O
(	O
data	*(void)
->	O
ftpFileDoneNeeded	int
)	O
{	O
data	*(void)
->	O
ftpFileDoneNeeded	int
=	O
0	int
;	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
ctrl	*(struct)
=	O
fdFree	O
(	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
ctrl	*(struct)
,	O
"open data (ftpFileDone)"	*(char)
)	O
;	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
ctrl	*(struct)
=	O
fdFree	O
(	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
ctrl	*(struct)
,	O
"grab data (ftpFileDone)"	*(char)
)	O
;	O
rc	long
=	O
ftpCheckResponse	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*`,int,long,long,int,int,int,*`,*`,int,int,long,long)),*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*`,int,long,long,int,int,int,*`,*`,int,int,long,long)),int,*(char),int,int,int,int)),*(*(char)))->(int)
(	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
,	O
NULL	O
)	O
;	O
}	O
return	O
rc	long
;	O
}	O
static	O
int	O
httpResp	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*`,int,long,long,int,int,int,*`,*`,int,int,long,long)),*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*`,int,long,long,int,int,int,*`,*`,int,int,long,long)),int,*(char),int,int,int,int)),*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*(void),int,long,long,int,int,int,*(void),*(struct(struct`,struct`,array(struct(int,long,long)))),int,int,long,long)),*(*(char)))->(int)
(	O
urlinfo	struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,*(struct),*(struct),int,*(char),int,int,int,int)
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
,	O
FD_t	*(struct)
ctrl	*(struct)
,	O
char	O
*	O
*	O
str	*(char)
)	O
{	O
int	O
ec	int
=	O
0	int
;	O
int	O
rc	long
;	O
URLSANE	O
(	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
)	O
;	O
rc	long
=	O
checkResponse	(*(void),*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*(void),int,long,long,int,int,int,*(void),*(struct(struct`,struct`,array(struct(int,long,long)))),int,int,long,long)),*(int),*(*(char)))->(int)
(	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
,	O
ctrl	*(struct)
,	O
&	O
ec	int
,	O
str	*(char)
)	O
;	O
if	O
(	O
_ftp_debug	int
&&	O
!	O
(	O
rc	long
==	O
0	int
&&	O
ec	int
==	O
200	int
)	O
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"*** httpResp: rc %d ec %d\n"	*(char)
,	O
rc	long
,	O
ec	int
)	O
;	O
switch	O
(	O
ec	int
)	O
{	O
case	O
200	int
:	O
break	O
;	O
default	O
:	O
rc	long
=	O
FTPERR_FILE_NOT_FOUND	O
;	O
break	O
;	O
}	O
return	O
rc	long
;	O
}	O
static	O
int	O
httpReq	(*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*(void),int,long,long,int,int,int,*(void),*(struct(struct`,struct`,array(struct(int,long,long)))),int,int,long,long)),*(char),*(char))->(int)
(	O
FD_t	*(struct)
ctrl	*(struct)
,	O
const	O
char	O
*	O
httpCmd	*(char)
,	O
const	O
char	O
*	O
httpArg	*(char)
)	O
{	O
urlinfo	struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,*(struct),*(struct),int,*(char),int,int,int,int)
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
=	O
ctrl	*(struct)
->	O
url	*(char)
;	O
const	O
char	O
*	O
host	*(char)
;	O
const	O
char	O
*	O
path	*(char)
;	O
int	O
port	int
;	O
int	O
rc	long
;	O
char	O
*	O
req	*(char)
;	O
size_t	long
len	long
;	O
int	O
retrying	int
=	O
0	int
;	O
URLSANE	O
(	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
)	O
;	O
assert	O
(	O
ctrl	*(struct)
!=	O
NULL	O
)	O
;	O
if	O
(	O
(	O
(	O
host	*(char)
=	O
(	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
proxyh	*(char)
?	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
proxyh	*(char)
:	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
host	*(char)
)	O
)	O
==	O
NULL	O
)	O
)	O
return	O
FTPERR_BAD_HOSTNAME	O
;	O
if	O
(	O
(	O
port	int
=	O
(	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
proxyp	int
>	O
0	int
?	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
proxyp	int
:	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
port	int
)	O
)	O
<	O
0	int
)	O
port	int
=	O
80	int
;	O
path	*(char)
=	O
(	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
proxyh	*(char)
||	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
proxyp	int
>	O
0	int
)	O
?	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
url	*(char)
:	O
httpArg	*(char)
;	O
reopen	O
:	O
if	O
(	O
fdFileno	(*(void))->(int)
(	O
ctrl	*(struct)
)	O
>=	O
0	int
&&	O
(	O
rc	long
=	O
fdWritable	(*(struct),int)->(int)
(	O
ctrl	*(struct)
,	O
0	int
)	O
)	O
<	O
1	int
)	O
{	O
fdClose	(*(void))->(int)
(	O
ctrl	*(struct)
)	O
;	O
}	O
if	O
(	O
fdFileno	(*(void))->(int)
(	O
ctrl	*(struct)
)	O
<	O
0	int
)	O
{	O
rc	long
=	O
tcpConnect	(*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*(void),int,long,long,int,int,int,*(void),*(struct(struct`,struct`,array(struct(int,long,long)))),int,int,long,long)),*(char),int)->(int)
(	O
ctrl	*(struct)
,	O
host	*(char)
,	O
port	int
)	O
;	O
if	O
(	O
rc	long
<	O
0	int
)	O
goto	O
errxit2	O
;	O
ctrl	*(struct)
=	O
fdLink	O
(	O
ctrl	*(struct)
,	O
"open ctrl (httpReq)"	*(char)
)	O
;	O
}	O
len	long
=	O
sizeof	O
(	O
"req x HTTP/1.0\r\nUser-Agent: rpm/3.0.4\r\nHost: y:z\r\nAccept: text/plain\r\nTransfer-Encoding: chunked\r\n\r\n"	*(char)
)	O
+	O
strlen	(*(char))->(long)
(	O
httpCmd	*(char)
)	O
+	O
strlen	(*(char))->(long)
(	O
path	*(char)
)	O
+	O
sizeof	O
(	O
VERSION	*(char)
)	O
+	O
strlen	(*(char))->(long)
(	O
host	*(char)
)	O
+	O
20	int
;	O
req	*(char)
=	O
alloca	(long)->(*(void))
(	O
len	long
)	O
;	O
*	O
req	*(char)
=	O
'\0'	O
;	O
if	O
(	O
!	O
strcmp	(*(char),*(char))->(int)
(	O
httpCmd	*(char)
,	O
"PUT"	*(char)
)	O
)	O
{	O
sprintf	(*(char),*(char))->(int)
(	O
req	*(char)
,	O
"%s %s HTTP/1.%d\r\nUser-Agent: rpm/%s\r\nHost: %s:%d\r\nAccept: text/plain\r\nTransfer-Encoding: chunked\r\n\r\n"	*(char)
,	O
httpCmd	*(char)
,	O
path	*(char)
,	O
(	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
httpVersion	int
?	O
1	int
:	O
0	int
)	O
,	O
VERSION	*(char)
,	O
host	*(char)
,	O
port	int
)	O
;	O
}	O
else	O
{	O
sprintf	(*(char),*(char))->(int)
(	O
req	*(char)
,	O
"%s %s HTTP/1.%d\r\nUser-Agent: rpm/%s\r\nHost: %s:%d\r\nAccept: text/plain\r\n\r\n"	*(char)
,	O
httpCmd	*(char)
,	O
path	*(char)
,	O
(	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
httpVersion	int
?	O
1	int
:	O
0	int
)	O
,	O
VERSION	*(char)
,	O
host	*(char)
,	O
port	int
)	O
;	O
}	O
if	O
(	O
_ftp_debug	int
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"-> %s"	*(char)
,	O
req	*(char)
)	O
;	O
len	long
=	O
strlen	(*(char))->(long)
(	O
req	*(char)
)	O
;	O
if	O
(	O
fdWrite	(*(void),*(char),long)->(long)
(	O
ctrl	*(struct)
,	O
req	*(char)
,	O
len	long
)	O
!=	O
len	long
)	O
{	O
rc	long
=	O
FTPERR_SERVER_IO_ERROR	O
;	O
goto	O
errxit	O
;	O
}	O
if	O
(	O
!	O
strcmp	(*(char),*(char))->(int)
(	O
httpCmd	*(char)
,	O
"PUT"	*(char)
)	O
)	O
{	O
ctrl	*(struct)
->	O
wr_chunked	int
=	O
1	int
;	O
}	O
else	O
{	O
rc	long
=	O
httpResp	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*`,int,long,long,int,int,int,*`,*`,int,int,long,long)),*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*`,int,long,long,int,int,int,*`,*`,int,int,long,long)),int,*(char),int,int,int,int)),*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*(void),int,long,long,int,int,int,*(void),*(struct(struct`,struct`,array(struct(int,long,long)))),int,int,long,long)),*(*(char)))->(int)
(	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
,	O
ctrl	*(struct)
,	O
NULL	O
)	O
;	O
if	O
(	O
rc	long
)	O
{	O
if	O
(	O
!	O
retrying	int
)	O
{	O
retrying	int
=	O
1	int
;	O
fdClose	(*(void))->(int)
(	O
ctrl	*(struct)
)	O
;	O
goto	O
reopen	O
;	O
}	O
goto	O
errxit	O
;	O
}	O
}	O
ctrl	*(struct)
=	O
fdLink	O
(	O
ctrl	*(struct)
,	O
"open data (httpReq)"	*(char)
)	O
;	O
return	O
0	int
;	O
errxit	O
:	O
fdSetSyserrno	(*(struct),int,*(void))->(void)
(	O
ctrl	*(struct)
,	O
errno	O
,	O
ftpStrerror	(int)->(*(char))
(	O
rc	long
)	O
)	O
;	O
errxit2	O
:	O
if	O
(	O
fdFileno	(*(void))->(int)
(	O
ctrl	*(struct)
)	O
>=	O
0	int
)	O
fdClose	(*(void))->(int)
(	O
ctrl	*(struct)
)	O
;	O
return	O
rc	long
;	O
}	O
void	O
*	O
ufdGetUrlinfo	(*(struct))->(*(void))
(	O
FD_t	*(struct)
fd	*(struct)
)	O
{	O
FDSANE	O
(	O
fd	*(struct)
)	O
;	O
if	O
(	O
fd	*(struct)
->	O
url	*(char)
==	O
NULL	O
)	O
return	O
NULL	O
;	O
return	O
urlLink	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,*(struct),*(struct),int,*(char),int,int,int,int)),*(char))->(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,*(struct),*(struct),int,*(char),int,int,int,int)))
(	O
fd	*(struct)
->	O
url	*(char)
,	O
"ufdGetUrlinfo"	*(char)
)	O
;	O
}	O
static	O
ssize_t	long
ufdRead	(*(void),*(char),long)->(long)
(	O
void	O
*	O
cookie	*(void)
,	O
char	O
*	O
buf	*(char)
,	O
size_t	long
count	long
)	O
{	O
FD_t	*(struct)
fd	*(struct)
=	O
c2f	(*(void))->(*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*(void),int,long,long,int,int,int,*(void),*(struct(struct`,struct`,array(struct(int,long,long)))),int,int,long,long)))
(	O
cookie	*(void)
)	O
;	O
int	O
bytesRead	int
;	O
int	O
total	long
=	O
0	int
;	O
if	O
(	O
fdGetIo	(*(struct))->(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))))
(	O
fd	*(struct)
)	O
==	O
fdio	*(struct(*((*(void),*(char),long)->(long)),*((*(void),*(char),long)->(long)),*((*(void),long,int)->(int)),*((*(void))->(int)),*((*(void),*(char),*(char),int)->(*(struct`))),*((*(struct`),*(char),*(char),int)->(*(struct`))),*((*(char),*(char),int)->(*(struct`))),*((*(void))->(int)),*((*(char),int,int)->(*(struct`))),*((*(char),*(char))->(*(struct`))),*((*(struct`))->(*(void))),*((*(struct`))->(int)),*((*(char),int)->(int)),*((*(char))->(int)),*((*(char))->(int)),*((*(char),*(char))->(int)),*((*(char))->(int))))
)	O
{	O
struct	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
sb	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
;	O
int	O
fdno	int
=	O
fdFileno	(*(void))->(int)
(	O
fd	*(struct)
)	O
;	O
fstat	(int,*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))))->(int)
(	O
fdno	int
,	O
&	O
sb	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
)	O
;	O
if	O
(	O
S_ISREG	O
(	O
sb	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_mode	int
)	O
)	O
return	O
fdRead	(*(void),*(char),long)->(long)
(	O
fd	*(struct)
,	O
buf	*(char)
,	O
count	long
)	O
;	O
}	O
UFDONLY	O
(	O
fd	*(struct)
)	O
;	O
assert	O
(	O
fd	*(struct)
->	O
rd_timeoutsecs	int
>=	O
0	int
)	O
;	O
for	O
(	O
total	long
=	O
0	int
;	O
total	long
<	O
count	long
;	O
total	long
+=	O
bytesRead	int
)	O
{	O
int	O
rc	long
;	O
bytesRead	int
=	O
0	int
;	O
if	O
(	O
fd	*(struct)
->	O
bytesRemain	long
==	O
0	int
)	O
return	O
total	long
;	O
rc	long
=	O
fdReadable	(*(struct),int)->(int)
(	O
fd	*(struct)
,	O
fd	*(struct)
->	O
rd_timeoutsecs	int
)	O
;	O
switch	O
(	O
rc	long
)	O
{	O
case	O
-	O
1	int
:	O
case	O
0	int
:	O
return	O
total	long
;	O
break	O
;	O
default	O
:	O
break	O
;	O
}	O
rc	long
=	O
fdRead	(*(void),*(char),long)->(long)
(	O
fd	*(struct)
,	O
buf	*(char)
+	O
total	long
,	O
count	long
-	O
total	long
)	O
;	O
if	O
(	O
rc	long
<	O
0	int
)	O
{	O
switch	O
(	O
errno	O
)	O
{	O
case	O
EWOULDBLOCK	O
:	O
continue	O
;	O
break	O
;	O
default	O
:	O
break	O
;	O
}	O
if	O
(	O
_rpmio_debug	int
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"*** read: rc %d errno %d %s \"%s\"\n"	*(char)
,	O
rc	long
,	O
errno	O
,	O
strerror	(int)->(*(char))
(	O
errno	O
)	O
,	O
buf	*(char)
)	O
;	O
return	O
rc	long
;	O
break	O
;	O
}	O
else	O
if	O
(	O
rc	long
==	O
0	int
)	O
{	O
return	O
total	long
;	O
break	O
;	O
}	O
bytesRead	int
=	O
rc	long
;	O
}	O
return	O
count	long
;	O
}	O
static	O
ssize_t	long
ufdWrite	(*(void),*(char),long)->(long)
(	O
void	O
*	O
cookie	*(void)
,	O
const	O
char	O
*	O
buf	*(char)
,	O
size_t	long
count	long
)	O
{	O
FD_t	*(struct)
fd	*(struct)
=	O
c2f	(*(void))->(*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*(void),int,long,long,int,int,int,*(void),*(struct(struct`,struct`,array(struct(int,long,long)))),int,int,long,long)))
(	O
cookie	*(void)
)	O
;	O
int	O
bytesWritten	int
;	O
int	O
total	long
=	O
0	int
;	O
UFDONLY	O
(	O
fd	*(struct)
)	O
;	O
for	O
(	O
total	long
=	O
0	int
;	O
total	long
<	O
count	long
;	O
total	long
+=	O
bytesWritten	int
)	O
{	O
int	O
rc	long
;	O
bytesWritten	int
=	O
0	int
;	O
if	O
(	O
fd	*(struct)
->	O
bytesRemain	long
==	O
0	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"*** ufdWrite fd %p WRITE PAST END OF CONTENT\n"	*(char)
,	O
fd	*(struct)
)	O
;	O
return	O
total	long
;	O
}	O
rc	long
=	O
fdWritable	(*(struct),int)->(int)
(	O
fd	*(struct)
,	O
2	int
)	O
;	O
switch	O
(	O
rc	long
)	O
{	O
case	O
-	O
1	int
:	O
case	O
0	int
:	O
return	O
total	long
;	O
break	O
;	O
default	O
:	O
break	O
;	O
}	O
rc	long
=	O
fdWrite	(*(void),*(char),long)->(long)
(	O
fd	*(struct)
,	O
buf	*(char)
+	O
total	long
,	O
count	long
-	O
total	long
)	O
;	O
if	O
(	O
rc	long
<	O
0	int
)	O
{	O
switch	O
(	O
errno	O
)	O
{	O
case	O
EWOULDBLOCK	O
:	O
continue	O
;	O
break	O
;	O
default	O
:	O
break	O
;	O
}	O
if	O
(	O
_rpmio_debug	int
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"*** write: rc %d errno %d %s \"%s\"\n"	*(char)
,	O
rc	long
,	O
errno	O
,	O
strerror	(int)->(*(char))
(	O
errno	O
)	O
,	O
buf	*(char)
)	O
;	O
return	O
rc	long
;	O
break	O
;	O
}	O
else	O
if	O
(	O
rc	long
==	O
0	int
)	O
{	O
return	O
total	long
;	O
break	O
;	O
}	O
bytesWritten	int
=	O
rc	long
;	O
}	O
return	O
count	long
;	O
}	O
static	O
int	O
ufdSeek	(*(void),long,int)->(int)
(	O
void	O
*	O
cookie	*(void)
,	O
off_t	long
pos	long
,	O
int	O
whence	int
)	O
{	O
FD_t	*(struct)
fd	*(struct)
=	O
c2f	(*(void))->(*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*(void),int,long,long,int,int,int,*(void),*(struct(struct`,struct`,array(struct(int,long,long)))),int,int,long,long)))
(	O
cookie	*(void)
)	O
;	O
switch	O
(	O
fd	*(struct)
->	O
urlType	int
)	O
{	O
case	O
URL_IS_UNKNOWN	int
:	O
case	O
URL_IS_PATH	int
:	O
break	O
;	O
case	O
URL_IS_DASH	int
:	O
case	O
URL_IS_FTP	int
:	O
case	O
URL_IS_HTTP	int
:	O
default	O
:	O
return	O
-	O
2	int
;	O
break	O
;	O
}	O
return	O
fdSeek	(*(void),long,int)->(int)
(	O
cookie	*(void)
,	O
pos	long
,	O
whence	int
)	O
;	O
}	O
static	O
int	O
ufdClose	(*(void))->(int)
(	O
void	O
*	O
cookie	*(void)
)	O
{	O
FD_t	*(struct)
fd	*(struct)
=	O
c2f	(*(void))->(*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*(void),int,long,long,int,int,int,*(void),*(struct(struct`,struct`,array(struct(int,long,long)))),int,int,long,long)))
(	O
cookie	*(void)
)	O
;	O
UFDONLY	O
(	O
fd	*(struct)
)	O
;	O
if	O
(	O
fd	*(struct)
->	O
url	*(char)
)	O
{	O
urlinfo	struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,*(struct),*(struct),int,*(char),int,int,int,int)
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
=	O
fd	*(struct)
->	O
url	*(char)
;	O
if	O
(	O
fd	*(struct)
==	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
data	*(void)
)	O
fd	*(struct)
=	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
data	*(void)
=	O
fdFree	O
(	O
fd	*(struct)
,	O
"grab data (ufdClose persist)"	*(char)
)	O
;	O
else	O
fd	*(struct)
=	O
fdFree	O
(	O
fd	*(struct)
,	O
"grab data (ufdClose)"	*(char)
)	O
;	O
(	O
void	O
)	O
urlFree	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,*(struct),*(struct),int,*(char),int,int,int,int)),*(char))->(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,*(struct),*(struct),int,*(char),int,int,int,int)))
(	O
fd	*(struct)
->	O
url	*(char)
,	O
"url (ufdClose)"	*(char)
)	O
;	O
fd	*(struct)
->	O
url	*(char)
=	O
NULL	O
;	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
ctrl	*(struct)
=	O
fdFree	O
(	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
ctrl	*(struct)
,	O
"grab ctrl (ufdClose)"	*(char)
)	O
;	O
if	O
(	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
urltype	enum(int,int,int,int,int)
==	O
URL_IS_FTP	int
)	O
{	O
{	O
FILE	struct
*	O
fp	*(void)
=	O
fdGetFILE	O
(	O
fd	*(struct)
)	O
;	O
if	O
(	O
noLibio	int
&&	O
fp	*(void)
)	O
fdSetFp	(*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*(void),int,long,long,int,int,int,*(void),*(struct(struct`,struct`,array(struct(int,long,long)))),int,int,long,long)),*(void))->(void)
(	O
fd	*(struct)
,	O
NULL	O
)	O
;	O
}	O
if	O
(	O
fd	*(struct)
->	O
bytesRemain	long
>	O
0	int
)	O
{	O
if	O
(	O
fd	*(struct)
->	O
ftpFileDoneNeeded	int
)	O
{	O
if	O
(	O
fdReadable	(*(struct),int)->(int)
(	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
ctrl	*(struct)
,	O
0	int
)	O
>	O
0	int
)	O
ftpFileDone	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*`,int,long,long,int,int,int,*`,*`,int,int,long,long)),*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*`,int,long,long,int,int,int,*`,*`,int,int,long,long)),int,*(char),int,int,int,int)),*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*(void),int,long,long,int,int,int,*(void),*(struct(struct`,struct`,array(struct(int,long,long)))),int,int,long,long)))->(int)
(	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
,	O
fd	*(struct)
)	O
;	O
else	O
ftpAbort	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*`,int,long,long,int,int,int,*`,*`,int,int,long,long)),*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*`,int,long,long,int,int,int,*`,*`,int,int,long,long)),int,*(char),int,int,int,int)),*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*(void),int,long,long,int,int,int,*(void),*(struct(struct`,struct`,array(struct(int,long,long)))),int,int,long,long)))->(int)
(	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
,	O
fd	*(struct)
)	O
;	O
}	O
}	O
else	O
{	O
int	O
rc	long
;	O
rc	long
=	O
fdClose	(*(void))->(int)
(	O
fd	*(struct)
)	O
;	O
if	O
(	O
fd	*(struct)
->	O
ftpFileDoneNeeded	int
)	O
ftpFileDone	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*`,int,long,long,int,int,int,*`,*`,int,int,long,long)),*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*`,int,long,long,int,int,int,*`,*`,int,int,long,long)),int,*(char),int,int,int,int)),*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*(void),int,long,long,int,int,int,*(void),*(struct(struct`,struct`,array(struct(int,long,long)))),int,int,long,long)))->(int)
(	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
,	O
fd	*(struct)
)	O
;	O
return	O
rc	long
;	O
}	O
}	O
if	O
(	O
!	O
strcmp	(*(char),*(char))->(int)
(	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
service	*(char)
,	O
"http"	*(char)
)	O
)	O
{	O
if	O
(	O
fd	*(struct)
->	O
wr_chunked	int
)	O
{	O
int	O
rc	long
;	O
fdWrite	(*(void),*(char),long)->(long)
(	O
fd	*(struct)
,	O
NULL	O
,	O
0	int
)	O
;	O
fd	*(struct)
->	O
wr_chunked	int
=	O
0	int
;	O
if	O
(	O
_ftp_debug	int
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"-> \r\n"	*(char)
)	O
;	O
(	O
void	O
)	O
fdWrite	(*(void),*(char),long)->(long)
(	O
fd	*(struct)
,	O
"\r\n"	*(char)
,	O
sizeof	O
(	O
"\r\n"	*(char)
)	O
-	O
1	int
)	O
;	O
rc	long
=	O
httpResp	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*`,int,long,long,int,int,int,*`,*`,int,int,long,long)),*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*`,int,long,long,int,int,int,*`,*`,int,int,long,long)),int,*(char),int,int,int,int)),*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*(void),int,long,long,int,int,int,*(void),*(struct(struct`,struct`,array(struct(int,long,long)))),int,int,long,long)),*(*(char)))->(int)
(	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
,	O
fd	*(struct)
,	O
NULL	O
)	O
;	O
}	O
if	O
(	O
fd	*(struct)
==	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
ctrl	*(struct)
)	O
fd	*(struct)
=	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
ctrl	*(struct)
=	O
fdFree	O
(	O
fd	*(struct)
,	O
"open data (ufdClose HTTP persist ctrl)"	*(char)
)	O
;	O
else	O
if	O
(	O
fd	*(struct)
==	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
data	*(void)
)	O
fd	*(struct)
=	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
data	*(void)
=	O
fdFree	O
(	O
fd	*(struct)
,	O
"open data (ufdClose HTTP persist data)"	*(char)
)	O
;	O
else	O
fd	*(struct)
=	O
fdFree	O
(	O
fd	*(struct)
,	O
"open data (ufdClose HTTP)"	*(char)
)	O
;	O
{	O
FILE	struct
*	O
fp	*(void)
=	O
fdGetFILE	O
(	O
fd	*(struct)
)	O
;	O
if	O
(	O
noLibio	int
&&	O
fp	*(void)
)	O
fdSetFp	(*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*(void),int,long,long,int,int,int,*(void),*(struct(struct`,struct`,array(struct(int,long,long)))),int,int,long,long)),*(void))->(void)
(	O
fd	*(struct)
,	O
NULL	O
)	O
;	O
}	O
if	O
(	O
fd	*(struct)
->	O
persist	int
&&	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
httpVersion	int
&&	O
(	O
fd	*(struct)
==	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
ctrl	*(struct)
||	O
fd	*(struct)
==	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
data	*(void)
)	O
&&	O
fd	*(struct)
->	O
bytesRemain	long
==	O
0	int
)	O
{	O
fd	*(struct)
->	O
contentLength	long
=	O
fd	*(struct)
->	O
bytesRemain	long
=	O
-	O
1	int
;	O
return	O
0	int
;	O
}	O
else	O
{	O
fd	*(struct)
->	O
contentLength	long
=	O
fd	*(struct)
->	O
bytesRemain	long
=	O
-	O
1	int
;	O
}	O
}	O
}	O
return	O
fdClose	(*(void))->(int)
(	O
fd	*(struct)
)	O
;	O
}	O
static	O
FD_t	*(struct)
ftpOpen	(*(char),int,int,*(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,*(struct`),*(struct`),int,*(char),int,int,int,int))))->(*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*(void),int,long,long,int,int,int,*(void),*(struct(struct`,struct`,array(struct(int,long,long)))),int,int,long,long)))
(	O
const	O
char	O
*	O
url	*(char)
,	O
int	O
flags	int
,	O
mode_t	int
mode	int
,	O
urlinfo	struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,*(struct),*(struct),int,*(char),int,int,int,int)
*	O
uret	*(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*`,int,long,long,int,int,int,*`,*`,int,int,long,long)),*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*`,int,long,long,int,int,int,*`,*`,int,int,long,long)),int,*(char),int,int,int,int)))
)	O
{	O
urlinfo	struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,*(struct),*(struct),int,*(char),int,int,int,int)
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
=	O
NULL	O
;	O
FD_t	*(struct)
fd	*(struct)
=	O
NULL	O
;	O
if	O
(	O
urlConnect	(*(char),*(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,*(struct`),*(struct`),int,*(char),int,int,int,int))))->(int)
(	O
url	*(char)
,	O
&	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
)	O
<	O
0	int
)	O
goto	O
exit	(int)->(void)
;	O
if	O
(	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
data	*(void)
==	O
NULL	O
)	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
data	*(void)
=	O
fdNew	O
(	O
"persist data (ftpOpen)"	*(char)
)	O
;	O
if	O
(	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
data	*(void)
->	O
url	*(char)
==	O
NULL	O
)	O
fd	*(struct)
=	O
fdLink	O
(	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
data	*(void)
,	O
"grab data (ftpOpen persist data)"	*(char)
)	O
;	O
else	O
fd	*(struct)
=	O
fdNew	O
(	O
"grab data (ftpOpen)"	*(char)
)	O
;	O
if	O
(	O
fd	*(struct)
)	O
{	O
fdSetIo	(*(struct),*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))))->(void)
(	O
fd	*(struct)
,	O
ufdio	*(struct(*((*(void),*(char),long)->(long)),*((*(void),*(char),long)->(long)),*((*(void),long,int)->(int)),*((*(void))->(int)),*((*(void),*(char),*(char),int)->(*(struct`))),*((*(struct`),*(char),*(char),int)->(*(struct`))),*((*(char),*(char),int)->(*(struct`))),*((*(void))->(int)),*((*(char),int,int)->(*(struct`))),*((*(char),*(char))->(*(struct`))),*((*(struct`))->(*(void))),*((*(struct`))->(int)),*((*(char),int)->(int)),*((*(char))->(int)),*((*(char))->(int)),*((*(char),*(char))->(int)),*((*(char))->(int))))
)	O
;	O
fd	*(struct)
->	O
ftpFileDoneNeeded	int
=	O
0	int
;	O
fd	*(struct)
->	O
rd_timeoutsecs	int
=	O
ftpTimeoutSecs	int
;	O
fd	*(struct)
->	O
contentLength	long
=	O
fd	*(struct)
->	O
bytesRemain	long
=	O
-	O
1	int
;	O
fd	*(struct)
->	O
url	*(char)
=	O
urlLink	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,*(struct),*(struct),int,*(char),int,int,int,int)),*(char))->(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,*(struct),*(struct),int,*(char),int,int,int,int)))
(	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
,	O
"url (ufdOpen FTP)"	*(char)
)	O
;	O
fd	*(struct)
->	O
urlType	int
=	O
URL_IS_FTP	int
;	O
}	O
exit	(int)->(void)
:	O
if	O
(	O
uret	*(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*`,int,long,long,int,int,int,*`,*`,int,int,long,long)),*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*`,int,long,long,int,int,int,*`,*`,int,int,long,long)),int,*(char),int,int,int,int)))
)	O
*	O
uret	*(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*`,int,long,long,int,int,int,*`,*`,int,int,long,long)),*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*`,int,long,long,int,int,int,*`,*`,int,int,long,long)),int,*(char),int,int,int,int)))
=	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
;	O
return	O
fd	*(struct)
;	O
}	O
static	O
FD_t	*(struct)
httpOpen	(*(char),int,int,*(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,*(struct`),*(struct`),int,*(char),int,int,int,int))))->(*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*(void),int,long,long,int,int,int,*(void),*(struct(struct`,struct`,array(struct(int,long,long)))),int,int,long,long)))
(	O
const	O
char	O
*	O
url	*(char)
,	O
int	O
flags	int
,	O
mode_t	int
mode	int
,	O
urlinfo	struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,*(struct),*(struct),int,*(char),int,int,int,int)
*	O
uret	*(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*`,int,long,long,int,int,int,*`,*`,int,int,long,long)),*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*`,int,long,long,int,int,int,*`,*`,int,int,long,long)),int,*(char),int,int,int,int)))
)	O
{	O
urlinfo	struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,*(struct),*(struct),int,*(char),int,int,int,int)
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
=	O
NULL	O
;	O
FD_t	*(struct)
fd	*(struct)
=	O
NULL	O
;	O
if	O
(	O
urlSplit	(*(char),*(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,*(struct`),*(struct`),int,*(char),int,int,int,int))))->(int)
(	O
url	*(char)
,	O
&	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
)	O
)	O
goto	O
exit	(int)->(void)
;	O
if	O
(	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
ctrl	*(struct)
==	O
NULL	O
)	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
ctrl	*(struct)
=	O
fdNew	O
(	O
"persist ctrl (httpOpen)"	*(char)
)	O
;	O
if	O
(	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
ctrl	*(struct)
->	O
nrefs	int
>	O
2	int
&&	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
data	*(void)
==	O
NULL	O
)	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
data	*(void)
=	O
fdNew	O
(	O
"persist data (httpOpen)"	*(char)
)	O
;	O
if	O
(	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
ctrl	*(struct)
->	O
url	*(char)
==	O
NULL	O
)	O
fd	*(struct)
=	O
fdLink	O
(	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
ctrl	*(struct)
,	O
"grab ctrl (httpOpen persist ctrl)"	*(char)
)	O
;	O
else	O
if	O
(	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
data	*(void)
->	O
url	*(char)
==	O
NULL	O
)	O
fd	*(struct)
=	O
fdLink	O
(	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
data	*(void)
,	O
"grab ctrl (httpOpen persist data)"	*(char)
)	O
;	O
else	O
fd	*(struct)
=	O
fdNew	O
(	O
"grab ctrl (httpOpen)"	*(char)
)	O
;	O
if	O
(	O
fd	*(struct)
)	O
{	O
fdSetIo	(*(struct),*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))))->(void)
(	O
fd	*(struct)
,	O
ufdio	*(struct(*((*(void),*(char),long)->(long)),*((*(void),*(char),long)->(long)),*((*(void),long,int)->(int)),*((*(void))->(int)),*((*(void),*(char),*(char),int)->(*(struct`))),*((*(struct`),*(char),*(char),int)->(*(struct`))),*((*(char),*(char),int)->(*(struct`))),*((*(void))->(int)),*((*(char),int,int)->(*(struct`))),*((*(char),*(char))->(*(struct`))),*((*(struct`))->(*(void))),*((*(struct`))->(int)),*((*(char),int)->(int)),*((*(char))->(int)),*((*(char))->(int)),*((*(char),*(char))->(int)),*((*(char))->(int))))
)	O
;	O
fd	*(struct)
->	O
ftpFileDoneNeeded	int
=	O
0	int
;	O
fd	*(struct)
->	O
rd_timeoutsecs	int
=	O
httpTimeoutSecs	int
;	O
fd	*(struct)
->	O
contentLength	long
=	O
fd	*(struct)
->	O
bytesRemain	long
=	O
-	O
1	int
;	O
fd	*(struct)
->	O
url	*(char)
=	O
urlLink	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,*(struct),*(struct),int,*(char),int,int,int,int)),*(char))->(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,*(struct),*(struct),int,*(char),int,int,int,int)))
(	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
,	O
"url (httpOpen)"	*(char)
)	O
;	O
fd	*(struct)
=	O
fdLink	O
(	O
fd	*(struct)
,	O
"grab data (httpOpen)"	*(char)
)	O
;	O
fd	*(struct)
->	O
urlType	int
=	O
URL_IS_HTTP	int
;	O
}	O
exit	(int)->(void)
:	O
if	O
(	O
uret	*(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*`,int,long,long,int,int,int,*`,*`,int,int,long,long)),*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*`,int,long,long,int,int,int,*`,*`,int,int,long,long)),int,*(char),int,int,int,int)))
)	O
*	O
uret	*(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*`,int,long,long,int,int,int,*`,*`,int,int,long,long)),*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*`,int,long,long,int,int,int,*`,*`,int,int,long,long)),int,*(char),int,int,int,int)))
=	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
;	O
return	O
fd	*(struct)
;	O
}	O
static	O
FD_t	*(struct)
ufdOpen	(*(char),int,int)->(*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*(void),int,long,long,int,int,int,*(void),*(struct(struct`,struct`,array(struct(int,long,long)))),int,int,long,long)))
(	O
const	O
char	O
*	O
url	*(char)
,	O
int	O
flags	int
,	O
mode_t	int
mode	int
)	O
{	O
FD_t	*(struct)
fd	*(struct)
=	O
NULL	O
;	O
const	O
char	O
*	O
cmd	*(char)
;	O
urlinfo	struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,*(struct),*(struct),int,*(char),int,int,int,int)
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
;	O
const	O
char	O
*	O
path	*(char)
;	O
urltype	enum(int,int,int,int,int)
urlType	int
=	O
urlPath	(*(char),*(*(char)))->(int)
(	O
url	*(char)
,	O
&	O
path	*(char)
)	O
;	O
if	O
(	O
_rpmio_debug	int
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"*** ufdOpen(%s,0x%x,0%o)\n"	*(char)
,	O
url	*(char)
,	O
flags	int
,	O
(	O
unsigned	O
)	O
mode	int
)	O
;	O
switch	O
(	O
urlType	int
)	O
{	O
case	O
URL_IS_FTP	int
:	O
fd	*(struct)
=	O
ftpOpen	(*(char),int,int,*(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,*(struct`),*(struct`),int,*(char),int,int,int,int))))->(*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*(void),int,long,long,int,int,int,*(void),*(struct(struct`,struct`,array(struct(int,long,long)))),int,int,long,long)))
(	O
url	*(char)
,	O
flags	int
,	O
mode	int
,	O
&	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
)	O
;	O
if	O
(	O
fd	*(struct)
==	O
NULL	O
||	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
==	O
NULL	O
)	O
break	O
;	O
cmd	*(char)
=	O
(	O
(	O
flags	int
&	O
O_WRONLY	int
)	O
?	O
(	O
(	O
flags	int
&	O
O_APPEND	int
)	O
?	O
"APPE"	*(char)
:	O
(	O
(	O
flags	int
&	O
O_CREAT	int
)	O
?	O
"STOR"	*(char)
:	O
"STOR"	*(char)
)	O
)	O
:	O
(	O
(	O
flags	int
&	O
O_CREAT	int
)	O
?	O
"STOR"	*(char)
:	O
"RETR"	*(char)
)	O
)	O
;	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
openError	int
=	O
ftpReq	(*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*(void),int,long,long,int,int,int,*(void),*(struct(struct`,struct`,array(struct(int,long,long)))),int,int,long,long)),*(char),*(char))->(int)
(	O
fd	*(struct)
,	O
cmd	*(char)
,	O
path	*(char)
)	O
;	O
if	O
(	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
openError	int
<	O
0	int
)	O
{	O
fd	*(struct)
=	O
fdLink	O
(	O
fd	*(struct)
,	O
"error data (ufdOpen FTP)"	*(char)
)	O
;	O
}	O
else	O
{	O
fd	*(struct)
->	O
bytesRemain	long
=	O
(	O
(	O
!	O
strcmp	(*(char),*(char))->(int)
(	O
cmd	*(char)
,	O
"RETR"	*(char)
)	O
)	O
?	O
fd	*(struct)
->	O
contentLength	long
:	O
-	O
1	int
)	O
;	O
fd	*(struct)
->	O
wr_chunked	int
=	O
0	int
;	O
}	O
break	O
;	O
case	O
URL_IS_HTTP	int
:	O
fd	*(struct)
=	O
httpOpen	(*(char),int,int,*(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,*(struct`),*(struct`),int,*(char),int,int,int,int))))->(*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*(void),int,long,long,int,int,int,*(void),*(struct(struct`,struct`,array(struct(int,long,long)))),int,int,long,long)))
(	O
url	*(char)
,	O
flags	int
,	O
mode	int
,	O
&	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
)	O
;	O
if	O
(	O
fd	*(struct)
==	O
NULL	O
||	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
==	O
NULL	O
)	O
break	O
;	O
cmd	*(char)
=	O
(	O
(	O
flags	int
&	O
O_WRONLY	int
)	O
?	O
(	O
(	O
flags	int
&	O
O_APPEND	int
)	O
?	O
"PUT"	*(char)
:	O
(	O
(	O
flags	int
&	O
O_CREAT	int
)	O
?	O
"PUT"	*(char)
:	O
"PUT"	*(char)
)	O
)	O
:	O
"GET"	*(char)
)	O
;	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
openError	int
=	O
httpReq	(*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*(void),int,long,long,int,int,int,*(void),*(struct(struct`,struct`,array(struct(int,long,long)))),int,int,long,long)),*(char),*(char))->(int)
(	O
fd	*(struct)
,	O
cmd	*(char)
,	O
path	*(char)
)	O
;	O
if	O
(	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
openError	int
<	O
0	int
)	O
{	O
fd	*(struct)
=	O
fdLink	O
(	O
fd	*(struct)
,	O
"error ctrl (ufdOpen HTTP)"	*(char)
)	O
;	O
fd	*(struct)
=	O
fdLink	O
(	O
fd	*(struct)
,	O
"error data (ufdOpen HTTP)"	*(char)
)	O
;	O
}	O
else	O
{	O
fd	*(struct)
->	O
bytesRemain	long
=	O
(	O
(	O
!	O
strcmp	(*(char),*(char))->(int)
(	O
cmd	*(char)
,	O
"GET"	*(char)
)	O
)	O
?	O
fd	*(struct)
->	O
contentLength	long
:	O
-	O
1	int
)	O
;	O
fd	*(struct)
->	O
wr_chunked	int
=	O
(	O
(	O
!	O
strcmp	(*(char),*(char))->(int)
(	O
cmd	*(char)
,	O
"PUT"	*(char)
)	O
)	O
?	O
fd	*(struct)
->	O
wr_chunked	int
:	O
0	int
)	O
;	O
}	O
break	O
;	O
case	O
URL_IS_DASH	int
:	O
assert	O
(	O
!	O
(	O
flags	int
&	O
O_RDWR	int
)	O
)	O
;	O
fd	*(struct)
=	O
fdDup	(int)->(*(struct))
(	O
(	O
(	O
flags	int
&	O
O_WRONLY	int
)	O
?	O
STDOUT_FILENO	int
:	O
STDIN_FILENO	int
)	O
)	O
;	O
if	O
(	O
fd	*(struct)
)	O
{	O
fdSetIo	(*(struct),*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))))->(void)
(	O
fd	*(struct)
,	O
ufdio	*(struct(*((*(void),*(char),long)->(long)),*((*(void),*(char),long)->(long)),*((*(void),long,int)->(int)),*((*(void))->(int)),*((*(void),*(char),*(char),int)->(*(struct`))),*((*(struct`),*(char),*(char),int)->(*(struct`))),*((*(char),*(char),int)->(*(struct`))),*((*(void))->(int)),*((*(char),int,int)->(*(struct`))),*((*(char),*(char))->(*(struct`))),*((*(struct`))->(*(void))),*((*(struct`))->(int)),*((*(char),int)->(int)),*((*(char))->(int)),*((*(char))->(int)),*((*(char),*(char))->(int)),*((*(char))->(int))))
)	O
;	O
fd	*(struct)
->	O
rd_timeoutsecs	int
=	O
600	int
;	O
fd	*(struct)
->	O
contentLength	long
=	O
fd	*(struct)
->	O
bytesRemain	long
=	O
-	O
1	int
;	O
}	O
break	O
;	O
case	O
URL_IS_PATH	int
:	O
case	O
URL_IS_UNKNOWN	int
:	O
default	O
:	O
fd	*(struct)
=	O
fdOpen	(*(char),int,int)->(*(struct))
(	O
path	*(char)
,	O
flags	int
,	O
mode	int
)	O
;	O
if	O
(	O
fd	*(struct)
)	O
{	O
fdSetIo	(*(struct),*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))))->(void)
(	O
fd	*(struct)
,	O
ufdio	*(struct(*((*(void),*(char),long)->(long)),*((*(void),*(char),long)->(long)),*((*(void),long,int)->(int)),*((*(void))->(int)),*((*(void),*(char),*(char),int)->(*(struct`))),*((*(struct`),*(char),*(char),int)->(*(struct`))),*((*(char),*(char),int)->(*(struct`))),*((*(void))->(int)),*((*(char),int,int)->(*(struct`))),*((*(char),*(char))->(*(struct`))),*((*(struct`))->(*(void))),*((*(struct`))->(int)),*((*(char),int)->(int)),*((*(char))->(int)),*((*(char))->(int)),*((*(char),*(char))->(int)),*((*(char))->(int))))
)	O
;	O
fd	*(struct)
->	O
rd_timeoutsecs	int
=	O
1	int
;	O
fd	*(struct)
->	O
contentLength	long
=	O
fd	*(struct)
->	O
bytesRemain	long
=	O
-	O
1	int
;	O
}	O
break	O
;	O
}	O
if	O
(	O
fd	*(struct)
==	O
NULL	O
)	O
return	O
NULL	O
;	O
fd	*(struct)
->	O
urlType	int
=	O
urlType	int
;	O
if	O
(	O
Fileno	(*(struct))->(int)
(	O
fd	*(struct)
)	O
<	O
0	int
)	O
{	O
ufdClose	(*(void))->(int)
(	O
fd	*(struct)
)	O
;	O
return	O
NULL	O
;	O
}	O
DBGIO	O
(	O
fd	*(struct)
,	O
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"==>\tufdOpen(\"%s\",%x,0%o) %s\n"	*(char)
,	O
url	*(char)
,	O
flags	int
,	O
(	O
unsigned	O
)	O
mode	int
,	O
fdbg	(*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*(void),int,long,long,int,int,int,*(void),*(struct(struct`,struct`,array(struct(int,long,long)))),int,int,long,long)))->(*(char))
(	O
fd	*(struct)
)	O
)	O
)	O
;	O
return	O
fd	*(struct)
;	O
}	O
static	O
struct	O
FDIO_s	struct(*((*(void),*(char),long)->(long)),*((*(void),*(char),long)->(long)),*((*(void),long,int)->(int)),*((*(void))->(int)),*((*(void),*(char),*(char),int)->(*(struct))),*((*(struct),*(char),*(char),int)->(*(struct))),*((*(char),*(char),int)->(*(struct))),*((*(void))->(int)),*((*(char),int,int)->(*(struct))),*((*(char),*(char))->(*(struct))),*((*(struct))->(*(void))),*((*(struct))->(int)),*((*(char),int)->(int)),*((*(char))->(int)),*((*(char))->(int)),*((*(char),*(char))->(int)),*((*(char))->(int)))
ufdio_s	struct(*((*(void),*(char),long)->(long)),*((*(void),*(char),long)->(long)),*((*(void),long,int)->(int)),*((*(void))->(int)),*((*(void),*(char),*(char),int)->(*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*`,int,long,long,int,int,int,*`,*`,int,int,long,long)))),*((*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*`,int,long,long,int,int,int,*`,*`,int,int,long,long)),*(char),*(char),int)->(*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*`,int,long,long,int,int,int,*`,*`,int,int,long,long)))),*((*(char),*(char),int)->(*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*`,int,long,long,int,int,int,*`,*`,int,int,long,long)))),*((*(void))->(int)),*((*(char),int,int)->(*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*`,int,long,long,int,int,int,*`,*`,int,int,long,long)))),*((*(char),*(char))->(*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*`,int,long,long,int,int,int,*`,*`,int,int,long,long)))),*((*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*`,int,long,long,int,int,int,*`,*`,int,int,long,long)))->(*(void))),*((*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*`,int,long,long,int,int,int,*`,*`,int,int,long,long)))->(int)),*((*(char),int)->(int)),*((*(char))->(int)),*((*(char))->(int)),*((*(char),*(char))->(int)),*((*(char))->(int)))
=	O
{	O
ufdRead	(*(void),*(char),long)->(long)
,	O
ufdWrite	(*(void),*(char),long)->(long)
,	O
ufdSeek	(*(void),long,int)->(int)
,	O
ufdClose	(*(void))->(int)
,	O
XfdLink	(*(void),*(char),*(char),int)->(*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*(void),int,long,long,int,int,int,*(void),*(struct(struct`,struct`,array(struct(int,long,long)))),int,int,long,long)))
,	O
XfdFree	(*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*(void),int,long,long,int,int,int,*(void),*(struct(struct`,struct`,array(struct(int,long,long)))),int,int,long,long)),*(char),*(char),int)->(*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*(void),int,long,long,int,int,int,*(void),*(struct(struct`,struct`,array(struct(int,long,long)))),int,int,long,long)))
,	O
XfdNew	(*(char),*(char),int)->(*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*(void),int,long,long,int,int,int,*(void),*(struct(struct`,struct`,array(struct(int,long,long)))),int,int,long,long)))
,	O
fdFileno	(*(void))->(int)
,	O
ufdOpen	(*(char),int,int)->(*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*(void),int,long,long,int,int,int,*(void),*(struct(struct`,struct`,array(struct(int,long,long)))),int,int,long,long)))
,	O
NULL	O
,	O
fdGetFp	(*(struct))->(*(void))
,	O
NULL	O
,	O
Mkdir	(*(char),int)->(int)
,	O
Chdir	(*(char))->(int)
,	O
Rmdir	(*(char))->(int)
,	O
Rename	(*(char),*(char))->(int)
,	O
Unlink	(*(char))->(int)
}	O
;	O
FDIO_t	*(struct)
ufdio	*(struct(*((*(void),*(char),long)->(long)),*((*(void),*(char),long)->(long)),*((*(void),long,int)->(int)),*((*(void))->(int)),*((*(void),*(char),*(char),int)->(*(struct`))),*((*(struct`),*(char),*(char),int)->(*(struct`))),*((*(char),*(char),int)->(*(struct`))),*((*(void))->(int)),*((*(char),int,int)->(*(struct`))),*((*(char),*(char))->(*(struct`))),*((*(struct`))->(*(void))),*((*(struct`))->(int)),*((*(char),int)->(int)),*((*(char))->(int)),*((*(char))->(int)),*((*(char),*(char))->(int)),*((*(char))->(int))))
=	O
&	O
ufdio_s	struct(*((*(void),*(char),long)->(long)),*((*(void),*(char),long)->(long)),*((*(void),long,int)->(int)),*((*(void))->(int)),*((*(void),*(char),*(char),int)->(*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*`,int,long,long,int,int,int,*`,*`,int,int,long,long)))),*((*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*`,int,long,long,int,int,int,*`,*`,int,int,long,long)),*(char),*(char),int)->(*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*`,int,long,long,int,int,int,*`,*`,int,int,long,long)))),*((*(char),*(char),int)->(*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*`,int,long,long,int,int,int,*`,*`,int,int,long,long)))),*((*(void))->(int)),*((*(char),int,int)->(*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*`,int,long,long,int,int,int,*`,*`,int,int,long,long)))),*((*(char),*(char))->(*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*`,int,long,long,int,int,int,*`,*`,int,int,long,long)))),*((*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*`,int,long,long,int,int,int,*`,*`,int,int,long,long)))->(*(void))),*((*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*`,int,long,long,int,int,int,*`,*`,int,int,long,long)))->(int)),*((*(char),int)->(int)),*((*(char))->(int)),*((*(char))->(int)),*((*(char),*(char))->(int)),*((*(char))->(int)))
;	O
long	O
int	O
fadGetFileSize	(*(struct))->(long)
(	O
FD_t	*(struct)
fd	*(struct)
)	O
{	O
FDSANE	O
(	O
fd	*(struct)
)	O
;	O
return	O
fd	*(struct)
->	O
fileSize	long
;	O
}	O
void	O
fadSetFileSize	(*(struct),long)->(void)
(	O
FD_t	*(struct)
fd	*(struct)
,	O
long	O
int	O
fileSize	long
)	O
{	O
FDSANE	O
(	O
fd	*(struct)
)	O
;	O
fd	*(struct)
->	O
fileSize	long
=	O
fileSize	long
;	O
}	O
unsigned	O
int	O
fadGetFirstFree	(*(struct))->(int)
(	O
FD_t	*(struct)
fd	*(struct)
)	O
{	O
FDSANE	O
(	O
fd	*(struct)
)	O
;	O
return	O
fd	*(struct)
->	O
firstFree	int
;	O
}	O
void	O
fadSetFirstFree	(*(struct),int)->(void)
(	O
FD_t	*(struct)
fd	*(struct)
,	O
unsigned	O
int	O
firstFree	int
)	O
{	O
FDSANE	O
(	O
fd	*(struct)
)	O
;	O
fd	*(struct)
->	O
firstFree	int
=	O
firstFree	int
;	O
}	O
extern	O
fdio_open_function_t	(*(char),int,int)->(*(struct))
fadOpen	(*(char),int,int)->(*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*(void),int,long,long,int,int,int,*(void),*(struct(struct`,struct`,array(struct(int,long,long)))),int,int,long,long)))
;	O
static	O
struct	O
FDIO_s	struct(*((*(void),*(char),long)->(long)),*((*(void),*(char),long)->(long)),*((*(void),long,int)->(int)),*((*(void))->(int)),*((*(void),*(char),*(char),int)->(*(struct))),*((*(struct),*(char),*(char),int)->(*(struct))),*((*(char),*(char),int)->(*(struct))),*((*(void))->(int)),*((*(char),int,int)->(*(struct))),*((*(char),*(char))->(*(struct))),*((*(struct))->(*(void))),*((*(struct))->(int)),*((*(char),int)->(int)),*((*(char))->(int)),*((*(char))->(int)),*((*(char),*(char))->(int)),*((*(char))->(int)))
fadio_s	struct(*((*(void),*(char),long)->(long)),*((*(void),*(char),long)->(long)),*((*(void),long,int)->(int)),*((*(void))->(int)),*((*(void),*(char),*(char),int)->(*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*`,int,long,long,int,int,int,*`,*`,int,int,long,long)))),*((*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*`,int,long,long,int,int,int,*`,*`,int,int,long,long)),*(char),*(char),int)->(*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*`,int,long,long,int,int,int,*`,*`,int,int,long,long)))),*((*(char),*(char),int)->(*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*`,int,long,long,int,int,int,*`,*`,int,int,long,long)))),*((*(void))->(int)),*((*(char),int,int)->(*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*`,int,long,long,int,int,int,*`,*`,int,int,long,long)))),*((*(char),*(char))->(*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*`,int,long,long,int,int,int,*`,*`,int,int,long,long)))),*((*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*`,int,long,long,int,int,int,*`,*`,int,int,long,long)))->(*(void))),*((*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*`,int,long,long,int,int,int,*`,*`,int,int,long,long)))->(int)),*((*(char),int)->(int)),*((*(char))->(int)),*((*(char))->(int)),*((*(char),*(char))->(int)),*((*(char))->(int)))
=	O
{	O
fdRead	(*(void),*(char),long)->(long)
,	O
fdWrite	(*(void),*(char),long)->(long)
,	O
fdSeek	(*(void),long,int)->(int)
,	O
fdClose	(*(void))->(int)
,	O
XfdLink	(*(void),*(char),*(char),int)->(*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*(void),int,long,long,int,int,int,*(void),*(struct(struct`,struct`,array(struct(int,long,long)))),int,int,long,long)))
,	O
XfdFree	(*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*(void),int,long,long,int,int,int,*(void),*(struct(struct`,struct`,array(struct(int,long,long)))),int,int,long,long)),*(char),*(char),int)->(*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*(void),int,long,long,int,int,int,*(void),*(struct(struct`,struct`,array(struct(int,long,long)))),int,int,long,long)))
,	O
XfdNew	(*(char),*(char),int)->(*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*(void),int,long,long,int,int,int,*(void),*(struct(struct`,struct`,array(struct(int,long,long)))),int,int,long,long)))
,	O
fdFileno	(*(void))->(int)
,	O
fadOpen	(*(char),int,int)->(*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*(void),int,long,long,int,int,int,*(void),*(struct(struct`,struct`,array(struct(int,long,long)))),int,int,long,long)))
,	O
NULL	O
,	O
fdGetFp	(*(struct))->(*(void))
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
}	O
;	O
FDIO_t	*(struct)
fadio	*(struct(*((*(void),*(char),long)->(long)),*((*(void),*(char),long)->(long)),*((*(void),long,int)->(int)),*((*(void))->(int)),*((*(void),*(char),*(char),int)->(*(struct`))),*((*(struct`),*(char),*(char),int)->(*(struct`))),*((*(char),*(char),int)->(*(struct`))),*((*(void))->(int)),*((*(char),int,int)->(*(struct`))),*((*(char),*(char))->(*(struct`))),*((*(struct`))->(*(void))),*((*(struct`))->(int)),*((*(char),int)->(int)),*((*(char))->(int)),*((*(char))->(int)),*((*(char),*(char))->(int)),*((*(char))->(int))))
=	O
&	O
fadio_s	struct(*((*(void),*(char),long)->(long)),*((*(void),*(char),long)->(long)),*((*(void),long,int)->(int)),*((*(void))->(int)),*((*(void),*(char),*(char),int)->(*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*`,int,long,long,int,int,int,*`,*`,int,int,long,long)))),*((*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*`,int,long,long,int,int,int,*`,*`,int,int,long,long)),*(char),*(char),int)->(*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*`,int,long,long,int,int,int,*`,*`,int,int,long,long)))),*((*(char),*(char),int)->(*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*`,int,long,long,int,int,int,*`,*`,int,int,long,long)))),*((*(void))->(int)),*((*(char),int,int)->(*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*`,int,long,long,int,int,int,*`,*`,int,int,long,long)))),*((*(char),*(char))->(*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*`,int,long,long,int,int,int,*`,*`,int,int,long,long)))),*((*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*`,int,long,long,int,int,int,*`,*`,int,int,long,long)))->(*(void))),*((*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*`,int,long,long,int,int,int,*`,*`,int,int,long,long)))->(int)),*((*(char),int)->(int)),*((*(char))->(int)),*((*(char))->(int)),*((*(char),*(char))->(int)),*((*(char))->(int)))
;	O
static	O
const	O
char	O
*	O
getFdErrstr	(*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*(void),int,long,long,int,int,int,*(void),*(struct(struct`,struct`,array(struct(int,long,long)))),int,int,long,long)))->(*(char))
(	O
FD_t	*(struct)
fd	*(struct)
)	O
{	O
const	O
char	O
*	O
errstr	*(char)
=	O
NULL	O
;	O
{	O
errstr	*(char)
=	O
strerror	(int)->(*(char))
(	O
fd	*(struct)
->	O
syserrno	int
)	O
;	O
}	O
return	O
errstr	*(char)
;	O
}	O
const	O
char	O
*	O
Fstrerror	(*(struct))->(*(char))
(	O
FD_t	*(struct)
fd	*(struct)
)	O
{	O
if	O
(	O
fd	*(struct)
==	O
NULL	O
)	O
return	O
strerror	(int)->(*(char))
(	O
errno	O
)	O
;	O
FDSANE	O
(	O
fd	*(struct)
)	O
;	O
return	O
getFdErrstr	(*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*(void),int,long,long,int,int,int,*(void),*(struct(struct`,struct`,array(struct(int,long,long)))),int,int,long,long)))->(*(char))
(	O
fd	*(struct)
)	O
;	O
}	O
size_t	long
Fread	(*(void),long,long,*(struct))->(long)
(	O
void	O
*	O
buf	*(char)
,	O
size_t	long
size	long
,	O
size_t	long
nmemb	long
,	O
FD_t	*(struct)
fd	*(struct)
)	O
{	O
fdio_read_function_t	(*(void),*(char),long)->(long)
*	O
_read	*((*(void),*(char),long)->(long))
;	O
int	O
rc	long
;	O
FDSANE	O
(	O
fd	*(struct)
)	O
;	O
DBGIO	O
(	O
fd	*(struct)
,	O
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"==> Fread(%p,%u,%u,%p) %s\n"	*(char)
,	O
buf	*(char)
,	O
(	O
unsigned	O
)	O
size	long
,	O
(	O
unsigned	O
)	O
nmemb	long
,	O
fd	*(struct)
,	O
fdbg	(*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*(void),int,long,long,int,int,int,*(void),*(struct(struct`,struct`,array(struct(int,long,long)))),int,int,long,long)))->(*(char))
(	O
fd	*(struct)
)	O
)	O
)	O
;	O
if	O
(	O
fdGetIo	(*(struct))->(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))))
(	O
fd	*(struct)
)	O
==	O
fpio	*(struct(*((*(void),*(char),long)->(long)),*((*(void),*(char),long)->(long)),*((*(void),long,int)->(int)),*((*(void))->(int)),*((*(void),*(char),*(char),int)->(*(struct`))),*((*(struct`),*(char),*(char),int)->(*(struct`))),*((*(char),*(char),int)->(*(struct`))),*((*(void))->(int)),*((*(char),int,int)->(*(struct`))),*((*(char),*(char))->(*(struct`))),*((*(struct`))->(*(void))),*((*(struct`))->(int)),*((*(char),int)->(int)),*((*(char))->(int)),*((*(char))->(int)),*((*(char),*(char))->(int)),*((*(char))->(int))))
)	O
{	O
rc	long
=	O
fread	(*(void),long,long,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(long)
(	O
buf	*(char)
,	O
size	long
,	O
nmemb	long
,	O
fdGetFILE	O
(	O
fd	*(struct)
)	O
)	O
;	O
return	O
rc	long
;	O
}	O
_read	*((*(void),*(char),long)->(long))
=	O
FDIOVEC	O
(	O
fd	*(struct)
,	O
read	*((*(void),*(char),long)->(long))
)	O
;	O
rc	long
=	O
(	O
_read	*((*(void),*(char),long)->(long))
?	O
(	O
*	O
_read	*((*(void),*(char),long)->(long))
)	O
(	O
fd	*(struct)
,	O
buf	*(char)
,	O
size	long
*	O
nmemb	long
)	O
:	O
-	O
2	int
)	O
;	O
return	O
rc	long
;	O
}	O
size_t	long
Fwrite	(*(void),long,long,*(struct))->(long)
(	O
const	O
void	O
*	O
buf	*(char)
,	O
size_t	long
size	long
,	O
size_t	long
nmemb	long
,	O
FD_t	*(struct)
fd	*(struct)
)	O
{	O
fdio_write_function_t	(*(void),*(char),long)->(long)
*	O
_write	*((*(void),*(char),long)->(long))
;	O
int	O
rc	long
;	O
FDSANE	O
(	O
fd	*(struct)
)	O
;	O
DBGIO	O
(	O
fd	*(struct)
,	O
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"==> Fwrite(%p,%u,%u,%p) %s\n"	*(char)
,	O
buf	*(char)
,	O
(	O
unsigned	O
)	O
size	long
,	O
(	O
unsigned	O
)	O
nmemb	long
,	O
fd	*(struct)
,	O
fdbg	(*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*(void),int,long,long,int,int,int,*(void),*(struct(struct`,struct`,array(struct(int,long,long)))),int,int,long,long)))->(*(char))
(	O
fd	*(struct)
)	O
)	O
)	O
;	O
if	O
(	O
fdGetIo	(*(struct))->(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))))
(	O
fd	*(struct)
)	O
==	O
fpio	*(struct(*((*(void),*(char),long)->(long)),*((*(void),*(char),long)->(long)),*((*(void),long,int)->(int)),*((*(void))->(int)),*((*(void),*(char),*(char),int)->(*(struct`))),*((*(struct`),*(char),*(char),int)->(*(struct`))),*((*(char),*(char),int)->(*(struct`))),*((*(void))->(int)),*((*(char),int,int)->(*(struct`))),*((*(char),*(char))->(*(struct`))),*((*(struct`))->(*(void))),*((*(struct`))->(int)),*((*(char),int)->(int)),*((*(char))->(int)),*((*(char))->(int)),*((*(char),*(char))->(int)),*((*(char))->(int))))
)	O
{	O
rc	long
=	O
fwrite	(*(void),long,long,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(long)
(	O
buf	*(char)
,	O
size	long
,	O
nmemb	long
,	O
fdGetFILE	O
(	O
fd	*(struct)
)	O
)	O
;	O
return	O
rc	long
;	O
}	O
_write	*((*(void),*(char),long)->(long))
=	O
FDIOVEC	O
(	O
fd	*(struct)
,	O
write	*((*(void),*(char),long)->(long))
)	O
;	O
rc	long
=	O
(	O
_write	*((*(void),*(char),long)->(long))
?	O
_write	*((*(void),*(char),long)->(long))
(	O
fd	*(struct)
,	O
buf	*(char)
,	O
size	long
*	O
nmemb	long
)	O
:	O
-	O
2	int
)	O
;	O
return	O
rc	long
;	O
}	O
int	O
Fseek	(*(struct),long,int)->(int)
(	O
FD_t	*(struct)
fd	*(struct)
,	O
long	O
int	O
offset	long
,	O
int	O
whence	int
)	O
{	O
fdio_seek_function_t	(*(void),long,int)->(int)
*	O
_seek	*((*(void),long,int)->(int))
;	O
long	O
int	O
rc	long
;	O
FDSANE	O
(	O
fd	*(struct)
)	O
;	O
DBGIO	O
(	O
fd	*(struct)
,	O
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"==> Fseek(%p,%ld,%d) %s\n"	*(char)
,	O
fd	*(struct)
,	O
offset	long
,	O
whence	int
,	O
fdbg	(*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*(void),int,long,long,int,int,int,*(void),*(struct(struct`,struct`,array(struct(int,long,long)))),int,int,long,long)))->(*(char))
(	O
fd	*(struct)
)	O
)	O
)	O
;	O
if	O
(	O
fdGetIo	(*(struct))->(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))))
(	O
fd	*(struct)
)	O
==	O
fpio	*(struct(*((*(void),*(char),long)->(long)),*((*(void),*(char),long)->(long)),*((*(void),long,int)->(int)),*((*(void))->(int)),*((*(void),*(char),*(char),int)->(*(struct`))),*((*(struct`),*(char),*(char),int)->(*(struct`))),*((*(char),*(char),int)->(*(struct`))),*((*(void))->(int)),*((*(char),int,int)->(*(struct`))),*((*(char),*(char))->(*(struct`))),*((*(struct`))->(*(void))),*((*(struct`))->(int)),*((*(char),int)->(int)),*((*(char))->(int)),*((*(char))->(int)),*((*(char),*(char))->(int)),*((*(char))->(int))))
)	O
{	O
rc	long
=	O
fseek	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),long,int)->(int)
(	O
fdGetFILE	O
(	O
fd	*(struct)
)	O
,	O
offset	long
,	O
whence	int
)	O
;	O
return	O
rc	long
;	O
}	O
_seek	*((*(void),long,int)->(int))
=	O
FDIOVEC	O
(	O
fd	*(struct)
,	O
seek	*((*(void),*(long),int)->(int))
)	O
;	O
rc	long
=	O
(	O
_seek	*((*(void),long,int)->(int))
?	O
_seek	*((*(void),long,int)->(int))
(	O
fd	*(struct)
,	O
offset	long
,	O
whence	int
)	O
:	O
-	O
2	int
)	O
;	O
return	O
rc	long
;	O
}	O
int	O
Fclose	(*(struct))->(int)
(	O
FD_t	*(struct)
fd	*(struct)
)	O
{	O
int	O
rc	long
,	O
ec	int
=	O
0	int
;	O
FDSANE	O
(	O
fd	*(struct)
)	O
;	O
DBGIO	O
(	O
fd	*(struct)
,	O
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"==> Fclose(%p) %s\n"	*(char)
,	O
fd	*(struct)
,	O
fdbg	(*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*(void),int,long,long,int,int,int,*(void),*(struct(struct`,struct`,array(struct(int,long,long)))),int,int,long,long)))->(*(char))
(	O
fd	*(struct)
)	O
)	O
)	O
;	O
fd	*(struct)
=	O
fdLink	O
(	O
fd	*(struct)
,	O
"Fclose"	*(char)
)	O
;	O
while	O
(	O
fd	*(struct)
->	O
nfps	int
>=	O
0	int
)	O
{	O
FDSTACK_t	struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)
*	O
fps	array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int))
=	O
&	O
fd	*(struct)
->	O
fps	array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int))
[	O
fd	*(struct)
->	O
nfps	int
]	O
;	O
if	O
(	O
fps	array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int))
->	O
io	*(struct(*((*(void),*(char),long)->(long)),*((*(void),*(char),long)->(long)),*((*(void),long,int)->(int)),*((*(void))->(int)),*((*(void),*(char),*(char),int)->(*(struct`))),*((*(struct`),*(char),*(char),int)->(*(struct`))),*((*(char),*(char),int)->(*(struct`))),*((*(void))->(int)),*((*(char),int,int)->(*(struct`))),*((*(char),*(char))->(*(struct`))),*((*(struct`))->(*(void))),*((*(struct`))->(int)),*((*(char),int)->(int)),*((*(char))->(int)),*((*(char))->(int)),*((*(char),*(char))->(int)),*((*(char))->(int))))
==	O
fpio	*(struct(*((*(void),*(char),long)->(long)),*((*(void),*(char),long)->(long)),*((*(void),long,int)->(int)),*((*(void))->(int)),*((*(void),*(char),*(char),int)->(*(struct`))),*((*(struct`),*(char),*(char),int)->(*(struct`))),*((*(char),*(char),int)->(*(struct`))),*((*(void))->(int)),*((*(char),int,int)->(*(struct`))),*((*(char),*(char))->(*(struct`))),*((*(struct`))->(*(void))),*((*(struct`))->(int)),*((*(char),int)->(int)),*((*(char))->(int)),*((*(char))->(int)),*((*(char),*(char))->(int)),*((*(char))->(int))))
)	O
{	O
FILE	struct
*	O
fp	*(void)
=	O
fdGetFILE	O
(	O
fd	*(struct)
)	O
;	O
int	O
fpno	int
=	O
fileno	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
fp	*(void)
)	O
;	O
if	O
(	O
fd	*(struct)
->	O
nfps	int
>	O
0	int
&&	O
fpno	int
==	O
-	O
1	int
&&	O
fd	*(struct)
->	O
fps	array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int))
[	O
fd	*(struct)
->	O
nfps	int
-	O
1	int
]	O
.	O
io	*(struct(*((*(void),*(char),long)->(long)),*((*(void),*(char),long)->(long)),*((*(void),long,int)->(int)),*((*(void))->(int)),*((*(void),*(char),*(char),int)->(*(struct`))),*((*(struct`),*(char),*(char),int)->(*(struct`))),*((*(char),*(char),int)->(*(struct`))),*((*(void))->(int)),*((*(char),int,int)->(*(struct`))),*((*(char),*(char))->(*(struct`))),*((*(struct`))->(*(void))),*((*(struct`))->(int)),*((*(char),int)->(int)),*((*(char))->(int)),*((*(char))->(int)),*((*(char),*(char))->(int)),*((*(char))->(int))))
==	O
ufdio	*(struct(*((*(void),*(char),long)->(long)),*((*(void),*(char),long)->(long)),*((*(void),long,int)->(int)),*((*(void))->(int)),*((*(void),*(char),*(char),int)->(*(struct`))),*((*(struct`),*(char),*(char),int)->(*(struct`))),*((*(char),*(char),int)->(*(struct`))),*((*(void))->(int)),*((*(char),int,int)->(*(struct`))),*((*(char),*(char))->(*(struct`))),*((*(struct`))->(*(void))),*((*(struct`))->(int)),*((*(char),int)->(int)),*((*(char))->(int)),*((*(char))->(int)),*((*(char),*(char))->(int)),*((*(char))->(int))))
&&	O
fd	*(struct)
->	O
fps	array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int))
[	O
fd	*(struct)
->	O
nfps	int
-	O
1	int
]	O
.	O
fp	*(void)
==	O
fp	*(void)
&&	O
fd	*(struct)
->	O
fps	array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int))
[	O
fd	*(struct)
->	O
nfps	int
-	O
1	int
]	O
.	O
fdno	int
>=	O
0	int
)	O
{	O
fflush	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
fp	*(void)
)	O
;	O
fd	*(struct)
->	O
nfps	int
--	O
;	O
rc	long
=	O
ufdClose	(*(void))->(int)
(	O
fd	*(struct)
)	O
;	O
if	O
(	O
fdGetFdno	(*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*(void),int,long,long,int,int,int,*(void),*(struct(struct`,struct`,array(struct(int,long,long)))),int,int,long,long)))->(int)
(	O
fd	*(struct)
)	O
>=	O
0	int
)	O
break	O
;	O
fdSetFp	(*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*(void),int,long,long,int,int,int,*(void),*(struct(struct`,struct`,array(struct(int,long,long)))),int,int,long,long)),*(void))->(void)
(	O
fd	*(struct)
,	O
NULL	O
)	O
;	O
fd	*(struct)
->	O
nfps	int
++	O
;	O
rc	long
=	O
fclose	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
fp	*(void)
)	O
;	O
fdPop	(*(struct))->(void)
(	O
fd	*(struct)
)	O
;	O
if	O
(	O
noLibio	int
)	O
fdSetFp	(*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*(void),int,long,long,int,int,int,*(void),*(struct(struct`,struct`,array(struct(int,long,long)))),int,int,long,long)),*(void))->(void)
(	O
fd	*(struct)
,	O
NULL	O
)	O
;	O
}	O
else	O
{	O
fflush	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
fp	*(void)
)	O
;	O
rc	long
=	O
fclose	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
fp	*(void)
)	O
;	O
if	O
(	O
fpno	int
==	O
-	O
1	int
)	O
{	O
fd	*(struct)
=	O
fdFree	O
(	O
fd	*(struct)
,	O
"fopencookie (Fclose)"	*(char)
)	O
;	O
fdPop	(*(struct))->(void)
(	O
fd	*(struct)
)	O
;	O
if	O
(	O
rc	long
==	O
-	O
1	int
&&	O
fd	*(struct)
->	O
fps	array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int))
[	O
fd	*(struct)
->	O
nfps	int
]	O
.	O
fdno	int
>=	O
0	int
)	O
{	O
fdio_close_function_t	(*(void))->(int)
*	O
_close	*((*(void))->(int))
=	O
FDIOVEC	O
(	O
fd	*(struct)
,	O
close	*((*(void))->(int))
)	O
;	O
rc	long
=	O
_close	*((*(void))->(int))
(	O
fd	*(struct)
)	O
;	O
}	O
}	O
}	O
}	O
else	O
{	O
fdio_close_function_t	(*(void))->(int)
*	O
_close	*((*(void))->(int))
=	O
FDIOVEC	O
(	O
fd	*(struct)
,	O
close	*((*(void))->(int))
)	O
;	O
rc	long
=	O
_close	*((*(void))->(int))
(	O
fd	*(struct)
)	O
;	O
}	O
if	O
(	O
fd	*(struct)
->	O
nfps	int
==	O
0	int
)	O
break	O
;	O
if	O
(	O
ec	int
==	O
0	int
&&	O
rc	long
)	O
ec	int
=	O
rc	long
;	O
fdPop	(*(struct))->(void)
(	O
fd	*(struct)
)	O
;	O
}	O
fd	*(struct)
=	O
fdFree	O
(	O
fd	*(struct)
,	O
"Fclose"	*(char)
)	O
;	O
return	O
ec	int
;	O
}	O
static	O
inline	O
void	O
cvtfmode	(*(char),*(char),long,*(char),long,*(*(char)),*(int))->(void)
(	O
const	O
char	O
*	O
m	*(char)
,	O
char	O
*	O
stdio	*(char)
,	O
size_t	long
nstdio	long
,	O
char	O
*	O
other	*(char)
,	O
size_t	long
nother	long
,	O
const	O
char	O
*	O
*	O
end	struct(long,long)
,	O
int	O
*	O
f	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
{	O
int	O
flags	int
=	O
0	int
;	O
char	O
c	int
;	O
switch	O
(	O
*	O
m	*(char)
)	O
{	O
case	O
'a'	O
:	O
flags	int
|=	O
O_WRONLY	int
|	O
O_CREAT	int
|	O
O_APPEND	int
;	O
if	O
(	O
--	O
nstdio	long
>	O
0	int
)	O
*	O
stdio	*(char)
++	O
=	O
*	O
m	*(char)
;	O
break	O
;	O
case	O
'w'	O
:	O
flags	int
|=	O
O_WRONLY	int
|	O
O_CREAT	int
|	O
O_TRUNC	int
;	O
if	O
(	O
--	O
nstdio	long
>	O
0	int
)	O
*	O
stdio	*(char)
++	O
=	O
*	O
m	*(char)
;	O
break	O
;	O
case	O
'r'	O
:	O
flags	int
|=	O
O_RDONLY	int
;	O
if	O
(	O
--	O
nstdio	long
>	O
0	int
)	O
*	O
stdio	*(char)
++	O
=	O
*	O
m	*(char)
;	O
break	O
;	O
default	O
:	O
*	O
stdio	*(char)
=	O
'\0'	O
;	O
return	O
;	O
break	O
;	O
}	O
m	*(char)
++	O
;	O
while	O
(	O
(	O
c	int
=	O
*	O
m	*(char)
++	O
)	O
!=	O
'\0'	O
)	O
{	O
switch	O
(	O
c	int
)	O
{	O
case	O
'.'	O
:	O
break	O
;	O
case	O
'+'	O
:	O
flags	int
&=	O
~	O
(	O
O_RDONLY	int
|	O
O_WRONLY	int
)	O
;	O
flags	int
|=	O
O_RDWR	int
;	O
if	O
(	O
--	O
nstdio	long
>	O
0	int
)	O
*	O
stdio	*(char)
++	O
=	O
c	int
;	O
continue	O
;	O
case	O
'b'	O
:	O
if	O
(	O
--	O
nstdio	long
>	O
0	int
)	O
*	O
stdio	*(char)
++	O
=	O
c	int
;	O
continue	O
;	O
case	O
'x'	O
:	O
flags	int
|=	O
O_EXCL	int
;	O
if	O
(	O
--	O
nstdio	long
>	O
0	int
)	O
*	O
stdio	*(char)
++	O
=	O
c	int
;	O
continue	O
;	O
default	O
:	O
if	O
(	O
--	O
nother	long
>	O
0	int
)	O
*	O
other	*(char)
++	O
=	O
c	int
;	O
continue	O
;	O
}	O
break	O
;	O
}	O
*	O
stdio	*(char)
=	O
*	O
other	*(char)
=	O
'\0'	O
;	O
if	O
(	O
end	struct(long,long)
)	O
*	O
end	struct(long,long)
=	O
(	O
*	O
m	*(char)
?	O
m	*(char)
:	O
NULL	O
)	O
;	O
if	O
(	O
f	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
*	O
f	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
=	O
flags	int
;	O
}	O
FD_t	*(struct)
Fdopen	(*(struct),*(char))->(*(struct))
(	O
FD_t	*(struct)
ofd	*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*(void),int,long,long,int,int,int,*(void),*(struct(struct(long,long),struct(long,long),array(struct(int,long,long)))),int,int,long,long))
,	O
const	O
char	O
*	O
fmode	*(char)
)	O
{	O
char	O
stdio	*(char)
[	O
20	int
]	O
,	O
other	*(char)
[	O
20	int
]	O
,	O
zstdio	array(char)
[	O
20	int
]	O
;	O
const	O
char	O
*	O
end	struct(long,long)
=	O
NULL	O
;	O
FDIO_t	*(struct)
iof	*(struct(*((*(void),*(char),long)->(long)),*((*(void),*(char),long)->(long)),*((*(void),long,int)->(int)),*((*(void))->(int)),*((*(void),*(char),*(char),int)->(*(struct`))),*((*(struct`),*(char),*(char),int)->(*(struct`))),*((*(char),*(char),int)->(*(struct`))),*((*(void))->(int)),*((*(char),int,int)->(*(struct`))),*((*(char),*(char))->(*(struct`))),*((*(struct`))->(*(void))),*((*(struct`))->(int)),*((*(char),int)->(int)),*((*(char))->(int)),*((*(char))->(int)),*((*(char),*(char))->(int)),*((*(char))->(int))))
=	O
NULL	O
;	O
FD_t	*(struct)
fd	*(struct)
=	O
ofd	*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*(void),int,long,long,int,int,int,*(void),*(struct(struct(long,long),struct(long,long),array(struct(int,long,long)))),int,int,long,long))
;	O
if	O
(	O
_rpmio_debug	int
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"*** Fdopen(%p,%s) %s\n"	*(char)
,	O
fd	*(struct)
,	O
fmode	*(char)
,	O
fdbg	(*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*(void),int,long,long,int,int,int,*(void),*(struct(struct`,struct`,array(struct(int,long,long)))),int,int,long,long)))->(*(char))
(	O
fd	*(struct)
)	O
)	O
;	O
FDSANE	O
(	O
fd	*(struct)
)	O
;	O
if	O
(	O
fmode	*(char)
==	O
NULL	O
)	O
return	O
NULL	O
;	O
cvtfmode	(*(char),*(char),long,*(char),long,*(*(char)),*(int))->(void)
(	O
fmode	*(char)
,	O
stdio	*(char)
,	O
sizeof	O
(	O
stdio	*(char)
)	O
,	O
other	*(char)
,	O
sizeof	O
(	O
other	*(char)
)	O
,	O
&	O
end	struct(long,long)
,	O
NULL	O
)	O
;	O
if	O
(	O
stdio	*(char)
[	O
0	int
]	O
==	O
'\0'	O
)	O
return	O
NULL	O
;	O
zstdio	array(char)
[	O
0	int
]	O
=	O
'\0'	O
;	O
strncat	(*(char),*(char),long)->(*(char))
(	O
zstdio	array(char)
,	O
stdio	*(char)
,	O
sizeof	O
(	O
zstdio	array(char)
)	O
-	O
strlen	(*(char))->(long)
(	O
zstdio	array(char)
)	O
)	O
;	O
strncat	(*(char),*(char),long)->(*(char))
(	O
zstdio	array(char)
,	O
other	*(char)
,	O
sizeof	O
(	O
zstdio	array(char)
)	O
-	O
strlen	(*(char))->(long)
(	O
zstdio	array(char)
)	O
)	O
;	O
if	O
(	O
end	struct(long,long)
==	O
NULL	O
&&	O
other	*(char)
[	O
0	int
]	O
==	O
'\0'	O
)	O
return	O
fd	*(struct)
;	O
if	O
(	O
end	struct(long,long)
&&	O
*	O
end	struct(long,long)
)	O
{	O
if	O
(	O
!	O
strcmp	(*(char),*(char))->(int)
(	O
end	struct(long,long)
,	O
"fdio"	*(char)
)	O
)	O
{	O
iof	*(struct(*((*(void),*(char),long)->(long)),*((*(void),*(char),long)->(long)),*((*(void),long,int)->(int)),*((*(void))->(int)),*((*(void),*(char),*(char),int)->(*(struct`))),*((*(struct`),*(char),*(char),int)->(*(struct`))),*((*(char),*(char),int)->(*(struct`))),*((*(void))->(int)),*((*(char),int,int)->(*(struct`))),*((*(char),*(char))->(*(struct`))),*((*(struct`))->(*(void))),*((*(struct`))->(int)),*((*(char),int)->(int)),*((*(char))->(int)),*((*(char))->(int)),*((*(char),*(char))->(int)),*((*(char))->(int))))
=	O
fdio	*(struct(*((*(void),*(char),long)->(long)),*((*(void),*(char),long)->(long)),*((*(void),long,int)->(int)),*((*(void))->(int)),*((*(void),*(char),*(char),int)->(*(struct`))),*((*(struct`),*(char),*(char),int)->(*(struct`))),*((*(char),*(char),int)->(*(struct`))),*((*(void))->(int)),*((*(char),int,int)->(*(struct`))),*((*(char),*(char))->(*(struct`))),*((*(struct`))->(*(void))),*((*(struct`))->(int)),*((*(char),int)->(int)),*((*(char))->(int)),*((*(char))->(int)),*((*(char),*(char))->(int)),*((*(char))->(int))))
;	O
}	O
else	O
if	O
(	O
!	O
strcmp	(*(char),*(char))->(int)
(	O
end	struct(long,long)
,	O
"ufdio"	*(char)
)	O
)	O
{	O
iof	*(struct(*((*(void),*(char),long)->(long)),*((*(void),*(char),long)->(long)),*((*(void),long,int)->(int)),*((*(void))->(int)),*((*(void),*(char),*(char),int)->(*(struct`))),*((*(struct`),*(char),*(char),int)->(*(struct`))),*((*(char),*(char),int)->(*(struct`))),*((*(void))->(int)),*((*(char),int,int)->(*(struct`))),*((*(char),*(char))->(*(struct`))),*((*(struct`))->(*(void))),*((*(struct`))->(int)),*((*(char),int)->(int)),*((*(char))->(int)),*((*(char))->(int)),*((*(char),*(char))->(int)),*((*(char))->(int))))
=	O
ufdio	*(struct(*((*(void),*(char),long)->(long)),*((*(void),*(char),long)->(long)),*((*(void),long,int)->(int)),*((*(void))->(int)),*((*(void),*(char),*(char),int)->(*(struct`))),*((*(struct`),*(char),*(char),int)->(*(struct`))),*((*(char),*(char),int)->(*(struct`))),*((*(void))->(int)),*((*(char),int,int)->(*(struct`))),*((*(char),*(char))->(*(struct`))),*((*(struct`))->(*(void))),*((*(struct`))->(int)),*((*(char),int)->(int)),*((*(char))->(int)),*((*(char))->(int)),*((*(char),*(char))->(int)),*((*(char))->(int))))
;	O
}	O
else	O
if	O
(	O
!	O
strcmp	(*(char),*(char))->(int)
(	O
end	struct(long,long)
,	O
"fadio"	*(char)
)	O
)	O
{	O
iof	*(struct(*((*(void),*(char),long)->(long)),*((*(void),*(char),long)->(long)),*((*(void),long,int)->(int)),*((*(void))->(int)),*((*(void),*(char),*(char),int)->(*(struct`))),*((*(struct`),*(char),*(char),int)->(*(struct`))),*((*(char),*(char),int)->(*(struct`))),*((*(void))->(int)),*((*(char),int,int)->(*(struct`))),*((*(char),*(char))->(*(struct`))),*((*(struct`))->(*(void))),*((*(struct`))->(int)),*((*(char),int)->(int)),*((*(char))->(int)),*((*(char))->(int)),*((*(char),*(char))->(int)),*((*(char))->(int))))
=	O
fadio	*(struct(*((*(void),*(char),long)->(long)),*((*(void),*(char),long)->(long)),*((*(void),long,int)->(int)),*((*(void))->(int)),*((*(void),*(char),*(char),int)->(*(struct`))),*((*(struct`),*(char),*(char),int)->(*(struct`))),*((*(char),*(char),int)->(*(struct`))),*((*(void))->(int)),*((*(char),int,int)->(*(struct`))),*((*(char),*(char))->(*(struct`))),*((*(struct`))->(*(void))),*((*(struct`))->(int)),*((*(char),int)->(int)),*((*(char))->(int)),*((*(char))->(int)),*((*(char),*(char))->(int)),*((*(char))->(int))))
;	O
}	O
else	O
if	O
(	O
!	O
strcmp	(*(char),*(char))->(int)
(	O
end	struct(long,long)
,	O
"fpio"	*(char)
)	O
)	O
{	O
iof	*(struct(*((*(void),*(char),long)->(long)),*((*(void),*(char),long)->(long)),*((*(void),long,int)->(int)),*((*(void))->(int)),*((*(void),*(char),*(char),int)->(*(struct`))),*((*(struct`),*(char),*(char),int)->(*(struct`))),*((*(char),*(char),int)->(*(struct`))),*((*(void))->(int)),*((*(char),int,int)->(*(struct`))),*((*(char),*(char))->(*(struct`))),*((*(struct`))->(*(void))),*((*(struct`))->(int)),*((*(char),int)->(int)),*((*(char))->(int)),*((*(char))->(int)),*((*(char),*(char))->(int)),*((*(char))->(int))))
=	O
fpio	*(struct(*((*(void),*(char),long)->(long)),*((*(void),*(char),long)->(long)),*((*(void),long,int)->(int)),*((*(void))->(int)),*((*(void),*(char),*(char),int)->(*(struct`))),*((*(struct`),*(char),*(char),int)->(*(struct`))),*((*(char),*(char),int)->(*(struct`))),*((*(void))->(int)),*((*(char),int,int)->(*(struct`))),*((*(char),*(char))->(*(struct`))),*((*(struct`))->(*(void))),*((*(struct`))->(int)),*((*(char),int)->(int)),*((*(char))->(int)),*((*(char))->(int)),*((*(char),*(char))->(int)),*((*(char))->(int))))
;	O
if	O
(	O
noLibio	int
)	O
{	O
int	O
fdno	int
=	O
Fileno	(*(struct))->(int)
(	O
fd	*(struct)
)	O
;	O
FILE	struct
*	O
fp	*(void)
=	O
fdopen	(int,*(char))->(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))
(	O
fdno	int
,	O
stdio	*(char)
)	O
;	O
if	O
(	O
_rpmio_debug	int
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"*** Fdopen fpio fp %p\n"	*(char)
,	O
fp	*(void)
)	O
;	O
if	O
(	O
fp	*(void)
==	O
NULL	O
)	O
return	O
NULL	O
;	O
if	O
(	O
fdGetFp	(*(struct))->(*(void))
(	O
fd	*(struct)
)	O
==	O
NULL	O
)	O
fdSetFp	(*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*(void),int,long,long,int,int,int,*(void),*(struct(struct`,struct`,array(struct(int,long,long)))),int,int,long,long)),*(void))->(void)
(	O
fd	*(struct)
,	O
fp	*(void)
)	O
;	O
fdPush	(*(struct),*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)->(void)
(	O
fd	*(struct)
,	O
fpio	*(struct(*((*(void),*(char),long)->(long)),*((*(void),*(char),long)->(long)),*((*(void),long,int)->(int)),*((*(void))->(int)),*((*(void),*(char),*(char),int)->(*(struct`))),*((*(struct`),*(char),*(char),int)->(*(struct`))),*((*(char),*(char),int)->(*(struct`))),*((*(void))->(int)),*((*(char),int,int)->(*(struct`))),*((*(char),*(char))->(*(struct`))),*((*(struct`))->(*(void))),*((*(struct`))->(int)),*((*(char),int)->(int)),*((*(char))->(int)),*((*(char))->(int)),*((*(char),*(char))->(int)),*((*(char))->(int))))
,	O
fp	*(void)
,	O
fdno	int
)	O
;	O
}	O
}	O
}	O
else	O
if	O
(	O
other	*(char)
[	O
0	int
]	O
)	O
{	O
for	O
(	O
end	struct(long,long)
=	O
other	*(char)
;	O
*	O
end	struct(long,long)
&&	O
strchr	(*(char),int)->(*(char))
(	O
"0123456789fh"	*(char)
,	O
*	O
end	struct(long,long)
)	O
;	O
end	struct(long,long)
++	O
)	O
;	O
if	O
(	O
*	O
end	struct(long,long)
==	O
'\0'	O
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"fatal error in rpmio.c:%d\n"	*(char)
,	O
__LINE__	O
)	O
;	O
}	O
}	O
if	O
(	O
iof	*(struct(*((*(void),*(char),long)->(long)),*((*(void),*(char),long)->(long)),*((*(void),long,int)->(int)),*((*(void))->(int)),*((*(void),*(char),*(char),int)->(*(struct`))),*((*(struct`),*(char),*(char),int)->(*(struct`))),*((*(char),*(char),int)->(*(struct`))),*((*(void))->(int)),*((*(char),int,int)->(*(struct`))),*((*(char),*(char))->(*(struct`))),*((*(struct`))->(*(void))),*((*(struct`))->(int)),*((*(char),int)->(int)),*((*(char))->(int)),*((*(char))->(int)),*((*(char),*(char))->(int)),*((*(char))->(int))))
==	O
NULL	O
)	O
return	O
fd	*(struct)
;	O
if	O
(	O
!	O
noLibio	int
)	O
{	O
FILE	struct
*	O
fp	*(void)
=	O
NULL	O
;	O
if	O
(	O
fp	*(void)
)	O
{	O
if	O
(	O
fdGetFp	(*(struct))->(*(void))
(	O
fd	*(struct)
)	O
==	O
NULL	O
)	O
fdSetFp	(*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*(void),int,long,long,int,int,int,*(void),*(struct(struct`,struct`,array(struct(int,long,long)))),int,int,long,long)),*(void))->(void)
(	O
fd	*(struct)
,	O
fp	*(void)
)	O
;	O
fdPush	(*(struct),*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)->(void)
(	O
fd	*(struct)
,	O
fpio	*(struct(*((*(void),*(char),long)->(long)),*((*(void),*(char),long)->(long)),*((*(void),long,int)->(int)),*((*(void))->(int)),*((*(void),*(char),*(char),int)->(*(struct`))),*((*(struct`),*(char),*(char),int)->(*(struct`))),*((*(char),*(char),int)->(*(struct`))),*((*(void))->(int)),*((*(char),int,int)->(*(struct`))),*((*(char),*(char))->(*(struct`))),*((*(struct`))->(*(void))),*((*(struct`))->(int)),*((*(char),int)->(int)),*((*(char))->(int)),*((*(char))->(int)),*((*(char),*(char))->(int)),*((*(char))->(int))))
,	O
fp	*(void)
,	O
fileno	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
fp	*(void)
)	O
)	O
;	O
fd	*(struct)
=	O
fdLink	O
(	O
fd	*(struct)
,	O
"fopencookie"	*(char)
)	O
;	O
}	O
}	O
DBGIO	O
(	O
fd	*(struct)
,	O
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"==> Fdopen(%p,\"%s\") returns fd %p %s\n"	*(char)
,	O
ofd	*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*(void),int,long,long,int,int,int,*(void),*(struct(struct(long,long),struct(long,long),array(struct(int,long,long)))),int,int,long,long))
,	O
fmode	*(char)
,	O
fd	*(struct)
,	O
fdbg	(*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*(void),int,long,long,int,int,int,*(void),*(struct(struct`,struct`,array(struct(int,long,long)))),int,int,long,long)))->(*(char))
(	O
fd	*(struct)
)	O
)	O
)	O
;	O
return	O
fd	*(struct)
;	O
}	O
FD_t	*(struct)
Fopen	(*(char),*(char))->(*(struct))
(	O
const	O
char	O
*	O
path	*(char)
,	O
const	O
char	O
*	O
fmode	*(char)
)	O
{	O
char	O
stdio	*(char)
[	O
20	int
]	O
,	O
other	*(char)
[	O
20	int
]	O
;	O
const	O
char	O
*	O
end	struct(long,long)
=	O
NULL	O
;	O
mode_t	int
perms	int
=	O
0666	int
;	O
int	O
flags	int
;	O
FD_t	*(struct)
fd	*(struct)
;	O
if	O
(	O
path	*(char)
==	O
NULL	O
||	O
fmode	*(char)
==	O
NULL	O
)	O
return	O
NULL	O
;	O
cvtfmode	(*(char),*(char),long,*(char),long,*(*(char)),*(int))->(void)
(	O
fmode	*(char)
,	O
stdio	*(char)
,	O
sizeof	O
(	O
stdio	*(char)
)	O
,	O
other	*(char)
,	O
sizeof	O
(	O
other	*(char)
)	O
,	O
&	O
end	struct(long,long)
,	O
&	O
flags	int
)	O
;	O
if	O
(	O
stdio	*(char)
[	O
0	int
]	O
==	O
'\0'	O
)	O
return	O
NULL	O
;	O
if	O
(	O
end	struct(long,long)
==	O
NULL	O
||	O
!	O
strcmp	(*(char),*(char))->(int)
(	O
end	struct(long,long)
,	O
"fdio"	*(char)
)	O
)	O
{	O
if	O
(	O
_rpmio_debug	int
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"*** Fopen fdio path %s fmode %s\n"	*(char)
,	O
path	*(char)
,	O
fmode	*(char)
)	O
;	O
fd	*(struct)
=	O
fdOpen	(*(char),int,int)->(*(struct))
(	O
path	*(char)
,	O
flags	int
,	O
perms	int
)	O
;	O
if	O
(	O
fdFileno	(*(void))->(int)
(	O
fd	*(struct)
)	O
<	O
0	int
)	O
{	O
fdClose	(*(void))->(int)
(	O
fd	*(struct)
)	O
;	O
return	O
NULL	O
;	O
}	O
}	O
else	O
if	O
(	O
!	O
strcmp	(*(char),*(char))->(int)
(	O
end	struct(long,long)
,	O
"fadio"	*(char)
)	O
)	O
{	O
if	O
(	O
_rpmio_debug	int
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"*** Fopen fadio path %s fmode %s\n"	*(char)
,	O
path	*(char)
,	O
fmode	*(char)
)	O
;	O
fd	*(struct)
=	O
fadOpen	(*(char),int,int)->(*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*(void),int,long,long,int,int,int,*(void),*(struct(struct`,struct`,array(struct(int,long,long)))),int,int,long,long)))
(	O
path	*(char)
,	O
flags	int
,	O
perms	int
)	O
;	O
if	O
(	O
fdFileno	(*(void))->(int)
(	O
fd	*(struct)
)	O
<	O
0	int
)	O
{	O
fdClose	(*(void))->(int)
(	O
fd	*(struct)
)	O
;	O
return	O
NULL	O
;	O
}	O
}	O
else	O
{	O
FILE	struct
*	O
fp	*(void)
;	O
int	O
fdno	int
;	O
int	O
isHTTP	int
=	O
0	int
;	O
switch	O
(	O
urlIsURL	(*(char))->(enum(int,int,int,int,int))
(	O
path	*(char)
)	O
)	O
{	O
case	O
URL_IS_HTTP	int
:	O
isHTTP	int
=	O
1	int
;	O
case	O
URL_IS_PATH	int
:	O
case	O
URL_IS_DASH	int
:	O
case	O
URL_IS_FTP	int
:	O
case	O
URL_IS_UNKNOWN	int
:	O
if	O
(	O
_rpmio_debug	int
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"*** Fopen ufdio path %s fmode %s\n"	*(char)
,	O
path	*(char)
,	O
fmode	*(char)
)	O
;	O
fd	*(struct)
=	O
ufdOpen	(*(char),int,int)->(*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*(void),int,long,long,int,int,int,*(void),*(struct(struct`,struct`,array(struct(int,long,long)))),int,int,long,long)))
(	O
path	*(char)
,	O
flags	int
,	O
perms	int
)	O
;	O
if	O
(	O
fd	*(struct)
==	O
NULL	O
||	O
fdFileno	(*(void))->(int)
(	O
fd	*(struct)
)	O
<	O
0	int
)	O
return	O
fd	*(struct)
;	O
break	O
;	O
default	O
:	O
if	O
(	O
_rpmio_debug	int
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"*** Fopen WTFO path %s fmode %s\n"	*(char)
,	O
path	*(char)
,	O
fmode	*(char)
)	O
;	O
return	O
NULL	O
;	O
break	O
;	O
}	O
if	O
(	O
isHTTP	int
&&	O
(	O
(	O
fp	*(void)
=	O
fdGetFp	(*(struct))->(*(void))
(	O
fd	*(struct)
)	O
)	O
!=	O
NULL	O
)	O
&&	O
(	O
(	O
fdno	int
=	O
fdGetFdno	(*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*(void),int,long,long,int,int,int,*(void),*(struct(struct`,struct`,array(struct(int,long,long)))),int,int,long,long)))->(int)
(	O
fd	*(struct)
)	O
)	O
>=	O
0	int
)	O
)	O
{	O
fdPush	(*(struct),*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)->(void)
(	O
fd	*(struct)
,	O
fpio	*(struct(*((*(void),*(char),long)->(long)),*((*(void),*(char),long)->(long)),*((*(void),long,int)->(int)),*((*(void))->(int)),*((*(void),*(char),*(char),int)->(*(struct`))),*((*(struct`),*(char),*(char),int)->(*(struct`))),*((*(char),*(char),int)->(*(struct`))),*((*(void))->(int)),*((*(char),int,int)->(*(struct`))),*((*(char),*(char))->(*(struct`))),*((*(struct`))->(*(void))),*((*(struct`))->(int)),*((*(char),int)->(int)),*((*(char))->(int)),*((*(char))->(int)),*((*(char),*(char))->(int)),*((*(char))->(int))))
,	O
fp	*(void)
,	O
fileno	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
fp	*(void)
)	O
)	O
;	O
return	O
fd	*(struct)
;	O
}	O
}	O
fd	*(struct)
=	O
Fdopen	(*(struct),*(char))->(*(struct))
(	O
fd	*(struct)
,	O
fmode	*(char)
)	O
;	O
return	O
fd	*(struct)
;	O
}	O
int	O
Fflush	(*(struct))->(int)
(	O
FD_t	*(struct)
fd	*(struct)
)	O
{	O
if	O
(	O
fd	*(struct)
==	O
NULL	O
)	O
return	O
-	O
1	int
;	O
if	O
(	O
fdGetIo	(*(struct))->(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))))
(	O
fd	*(struct)
)	O
==	O
fpio	*(struct(*((*(void),*(char),long)->(long)),*((*(void),*(char),long)->(long)),*((*(void),long,int)->(int)),*((*(void))->(int)),*((*(void),*(char),*(char),int)->(*(struct`))),*((*(struct`),*(char),*(char),int)->(*(struct`))),*((*(char),*(char),int)->(*(struct`))),*((*(void))->(int)),*((*(char),int,int)->(*(struct`))),*((*(char),*(char))->(*(struct`))),*((*(struct`))->(*(void))),*((*(struct`))->(int)),*((*(char),int)->(int)),*((*(char))->(int)),*((*(char))->(int)),*((*(char),*(char))->(int)),*((*(char))->(int))))
)	O
return	O
fflush	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
fdGetFILE	O
(	O
fd	*(struct)
)	O
)	O
;	O
return	O
0	int
;	O
}	O
int	O
Ferror	(*(struct))->(int)
(	O
FD_t	*(struct)
fd	*(struct)
)	O
{	O
int	O
i	int
,	O
rc	long
=	O
0	int
;	O
if	O
(	O
fd	*(struct)
==	O
NULL	O
)	O
return	O
-	O
1	int
;	O
for	O
(	O
i	int
=	O
fd	*(struct)
->	O
nfps	int
;	O
rc	long
==	O
0	int
&&	O
i	int
>=	O
0	int
;	O
i	int
--	O
)	O
{	O
FDSTACK_t	struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)
*	O
fps	array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int))
=	O
&	O
fd	*(struct)
->	O
fps	array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int))
[	O
i	int
]	O
;	O
int	O
ec	int
;	O
if	O
(	O
fps	array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int))
->	O
io	*(struct(*((*(void),*(char),long)->(long)),*((*(void),*(char),long)->(long)),*((*(void),long,int)->(int)),*((*(void))->(int)),*((*(void),*(char),*(char),int)->(*(struct`))),*((*(struct`),*(char),*(char),int)->(*(struct`))),*((*(char),*(char),int)->(*(struct`))),*((*(void))->(int)),*((*(char),int,int)->(*(struct`))),*((*(char),*(char))->(*(struct`))),*((*(struct`))->(*(void))),*((*(struct`))->(int)),*((*(char),int)->(int)),*((*(char))->(int)),*((*(char))->(int)),*((*(char),*(char))->(int)),*((*(char))->(int))))
==	O
fpio	*(struct(*((*(void),*(char),long)->(long)),*((*(void),*(char),long)->(long)),*((*(void),long,int)->(int)),*((*(void))->(int)),*((*(void),*(char),*(char),int)->(*(struct`))),*((*(struct`),*(char),*(char),int)->(*(struct`))),*((*(char),*(char),int)->(*(struct`))),*((*(void))->(int)),*((*(char),int,int)->(*(struct`))),*((*(char),*(char))->(*(struct`))),*((*(struct`))->(*(void))),*((*(struct`))->(int)),*((*(char),int)->(int)),*((*(char))->(int)),*((*(char))->(int)),*((*(char),*(char))->(int)),*((*(char))->(int))))
)	O
{	O
ec	int
=	O
ferror	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
fdGetFILE	O
(	O
fd	*(struct)
)	O
)	O
;	O
}	O
else	O
{	O
ec	int
=	O
(	O
fdFileno	(*(void))->(int)
(	O
fd	*(struct)
)	O
<	O
0	int
?	O
-	O
1	int
:	O
0	int
)	O
;	O
}	O
if	O
(	O
rc	long
==	O
0	int
&&	O
ec	int
)	O
rc	long
=	O
ec	int
;	O
}	O
DBGIO	O
(	O
fd	*(struct)
,	O
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"==> Ferror(%p) rc %d %s\n"	*(char)
,	O
fd	*(struct)
,	O
rc	long
,	O
fdbg	(*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*(void),int,long,long,int,int,int,*(void),*(struct(struct`,struct`,array(struct(int,long,long)))),int,int,long,long)))->(*(char))
(	O
fd	*(struct)
)	O
)	O
)	O
;	O
return	O
rc	long
;	O
}	O
int	O
Fileno	(*(struct))->(int)
(	O
FD_t	*(struct)
fd	*(struct)
)	O
{	O
int	O
i	int
,	O
rc	long
=	O
-	O
1	int
;	O
for	O
(	O
i	int
=	O
fd	*(struct)
->	O
nfps	int
;	O
rc	long
==	O
-	O
1	int
&&	O
i	int
>=	O
0	int
;	O
i	int
--	O
)	O
{	O
rc	long
=	O
fd	*(struct)
->	O
fps	array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int))
[	O
i	int
]	O
.	O
fdno	int
;	O
}	O
DBGIO	O
(	O
fd	*(struct)
,	O
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"==> Fileno(%p) rc %d %s\n"	*(char)
,	O
fd	*(struct)
,	O
rc	long
,	O
fdbg	(*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*(void),int,long,long,int,int,int,*(void),*(struct(struct`,struct`,array(struct(int,long,long)))),int,int,long,long)))->(*(char))
(	O
fd	*(struct)
)	O
)	O
)	O
;	O
return	O
rc	long
;	O
}	O
int	O
Fcntl	(*(struct),int,*(void))->(int)
(	O
FD_t	*(struct)
fd	*(struct)
,	O
int	O
op	int
,	O
void	O
*	O
lip	*(void)
)	O
{	O
return	O
fcntl	(int,int)->(int)
(	O
Fileno	(*(struct))->(int)
(	O
fd	*(struct)
)	O
,	O
op	int
,	O
lip	*(void)
)	O
;	O
}	O
ssize_t	long
Pread	(*(struct),*(void),long,long)->(long)
(	O
FD_t	*(struct)
fd	*(struct)
,	O
void	O
*	O
buf	*(char)
,	O
size_t	long
count	long
,	O
off_t	long
offset	long
)	O
{	O
if	O
(	O
Fseek	(*(struct),long,int)->(int)
(	O
fd	*(struct)
,	O
offset	long
,	O
SEEK_SET	int
)	O
<	O
0	int
)	O
return	O
-	O
1	int
;	O
return	O
Fread	(*(void),long,long,*(struct))->(long)
(	O
buf	*(char)
,	O
sizeof	O
(	O
char	O
)	O
,	O
count	long
,	O
fd	*(struct)
)	O
;	O
}	O
ssize_t	long
Pwrite	(*(struct),*(void),long,long)->(long)
(	O
FD_t	*(struct)
fd	*(struct)
,	O
const	O
void	O
*	O
buf	*(char)
,	O
size_t	long
count	long
,	O
off_t	long
offset	long
)	O
{	O
if	O
(	O
Fseek	(*(struct),long,int)->(int)
(	O
fd	*(struct)
,	O
offset	long
,	O
SEEK_SET	int
)	O
<	O
0	int
)	O
return	O
-	O
1	int
;	O
return	O
Fwrite	(*(void),long,long,*(struct))->(long)
(	O
buf	*(char)
,	O
sizeof	O
(	O
char	O
)	O
,	O
count	long
,	O
fd	*(struct)
)	O
;	O
}	O
int	O
Mkdir	(*(char),int)->(int)
(	O
const	O
char	O
*	O
path	*(char)
,	O
mode_t	int
mode	int
)	O
{	O
const	O
char	O
*	O
lpath	*(char)
;	O
int	O
ut	int
=	O
urlPath	(*(char),*(*(char)))->(int)
(	O
path	*(char)
,	O
&	O
lpath	*(char)
)	O
;	O
switch	O
(	O
ut	int
)	O
{	O
case	O
URL_IS_FTP	int
:	O
return	O
ftpMkdir	(*(char),int)->(int)
(	O
path	*(char)
,	O
mode	int
)	O
;	O
break	O
;	O
case	O
URL_IS_HTTP	int
:	O
case	O
URL_IS_PATH	int
:	O
path	*(char)
=	O
lpath	*(char)
;	O
case	O
URL_IS_UNKNOWN	int
:	O
break	O
;	O
case	O
URL_IS_DASH	int
:	O
default	O
:	O
return	O
-	O
2	int
;	O
break	O
;	O
}	O
return	O
mkdir	(*(char),int)->(int)
(	O
path	*(char)
,	O
mode	int
)	O
;	O
}	O
int	O
Chdir	(*(char))->(int)
(	O
const	O
char	O
*	O
path	*(char)
)	O
{	O
const	O
char	O
*	O
lpath	*(char)
;	O
int	O
ut	int
=	O
urlPath	(*(char),*(*(char)))->(int)
(	O
path	*(char)
,	O
&	O
lpath	*(char)
)	O
;	O
switch	O
(	O
ut	int
)	O
{	O
case	O
URL_IS_FTP	int
:	O
return	O
ftpChdir	(*(char))->(int)
(	O
path	*(char)
)	O
;	O
break	O
;	O
case	O
URL_IS_HTTP	int
:	O
case	O
URL_IS_PATH	int
:	O
path	*(char)
=	O
lpath	*(char)
;	O
case	O
URL_IS_UNKNOWN	int
:	O
break	O
;	O
case	O
URL_IS_DASH	int
:	O
default	O
:	O
return	O
-	O
2	int
;	O
break	O
;	O
}	O
return	O
chdir	(*(char))->(int)
(	O
path	*(char)
)	O
;	O
}	O
int	O
Rmdir	(*(char))->(int)
(	O
const	O
char	O
*	O
path	*(char)
)	O
{	O
const	O
char	O
*	O
lpath	*(char)
;	O
int	O
ut	int
=	O
urlPath	(*(char),*(*(char)))->(int)
(	O
path	*(char)
,	O
&	O
lpath	*(char)
)	O
;	O
switch	O
(	O
ut	int
)	O
{	O
case	O
URL_IS_FTP	int
:	O
return	O
ftpRmdir	(*(char))->(int)
(	O
path	*(char)
)	O
;	O
break	O
;	O
case	O
URL_IS_HTTP	int
:	O
case	O
URL_IS_PATH	int
:	O
path	*(char)
=	O
lpath	*(char)
;	O
case	O
URL_IS_UNKNOWN	int
:	O
break	O
;	O
case	O
URL_IS_DASH	int
:	O
default	O
:	O
return	O
-	O
2	int
;	O
break	O
;	O
}	O
return	O
rmdir	(*(char))->(int)
(	O
path	*(char)
)	O
;	O
}	O
int	O
Rename	(*(char),*(char))->(int)
(	O
const	O
char	O
*	O
oldpath	*(char)
,	O
const	O
char	O
*	O
newpath	*(char)
)	O
{	O
const	O
char	O
*	O
oe	*(char)
=	O
NULL	O
;	O
const	O
char	O
*	O
ne	long
=	O
NULL	O
;	O
int	O
oldut	int
,	O
newut	int
;	O
if	O
(	O
!	O
strcmp	(*(char),*(char))->(int)
(	O
oldpath	*(char)
,	O
newpath	*(char)
)	O
)	O
return	O
0	int
;	O
oldut	int
=	O
urlPath	(*(char),*(*(char)))->(int)
(	O
oldpath	*(char)
,	O
&	O
oe	*(char)
)	O
;	O
switch	O
(	O
oldut	int
)	O
{	O
case	O
URL_IS_FTP	int
:	O
case	O
URL_IS_HTTP	int
:	O
case	O
URL_IS_PATH	int
:	O
case	O
URL_IS_UNKNOWN	int
:	O
break	O
;	O
case	O
URL_IS_DASH	int
:	O
default	O
:	O
return	O
-	O
2	int
;	O
break	O
;	O
}	O
newut	int
=	O
urlPath	(*(char),*(*(char)))->(int)
(	O
newpath	*(char)
,	O
&	O
ne	long
)	O
;	O
switch	O
(	O
newut	int
)	O
{	O
case	O
URL_IS_FTP	int
:	O
if	O
(	O
_rpmio_debug	int
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"*** rename old %*s new %*s\n"	*(char)
,	O
(	O
oe	*(char)
-	O
oldpath	*(char)
)	O
,	O
oldpath	*(char)
,	O
(	O
ne	long
-	O
newpath	*(char)
)	O
,	O
newpath	*(char)
)	O
;	O
if	O
(	O
!	O
(	O
oldut	int
==	O
newut	int
&&	O
oe	*(char)
&&	O
ne	long
&&	O
(	O
oe	*(char)
-	O
oldpath	*(char)
)	O
==	O
(	O
ne	long
-	O
newpath	*(char)
)	O
&&	O
!	O
strncasecmp	(*(char),*(char),long)->(int)
(	O
oldpath	*(char)
,	O
newpath	*(char)
,	O
(	O
oe	*(char)
-	O
oldpath	*(char)
)	O
)	O
)	O
)	O
return	O
-	O
2	int
;	O
return	O
ftpRename	(*(char),*(char))->(int)
(	O
oldpath	*(char)
,	O
newpath	*(char)
)	O
;	O
break	O
;	O
case	O
URL_IS_HTTP	int
:	O
case	O
URL_IS_PATH	int
:	O
oldpath	*(char)
=	O
oe	*(char)
;	O
newpath	*(char)
=	O
ne	long
;	O
break	O
;	O
case	O
URL_IS_UNKNOWN	int
:	O
break	O
;	O
case	O
URL_IS_DASH	int
:	O
default	O
:	O
return	O
-	O
2	int
;	O
break	O
;	O
}	O
return	O
rename	(*(char),*(char))->(int)
(	O
oldpath	*(char)
,	O
newpath	*(char)
)	O
;	O
}	O
int	O
Link	(*(char),*(char))->(int)
(	O
const	O
char	O
*	O
oldpath	*(char)
,	O
const	O
char	O
*	O
newpath	*(char)
)	O
{	O
const	O
char	O
*	O
oe	*(char)
=	O
NULL	O
;	O
const	O
char	O
*	O
ne	long
=	O
NULL	O
;	O
int	O
oldut	int
,	O
newut	int
;	O
oldut	int
=	O
urlPath	(*(char),*(*(char)))->(int)
(	O
oldpath	*(char)
,	O
&	O
oe	*(char)
)	O
;	O
switch	O
(	O
oldut	int
)	O
{	O
case	O
URL_IS_FTP	int
:	O
case	O
URL_IS_HTTP	int
:	O
case	O
URL_IS_PATH	int
:	O
case	O
URL_IS_UNKNOWN	int
:	O
break	O
;	O
case	O
URL_IS_DASH	int
:	O
default	O
:	O
return	O
-	O
2	int
;	O
break	O
;	O
}	O
newut	int
=	O
urlPath	(*(char),*(*(char)))->(int)
(	O
newpath	*(char)
,	O
&	O
ne	long
)	O
;	O
switch	O
(	O
newut	int
)	O
{	O
case	O
URL_IS_HTTP	int
:	O
case	O
URL_IS_FTP	int
:	O
case	O
URL_IS_PATH	int
:	O
if	O
(	O
_rpmio_debug	int
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"*** link old %*s new %*s\n"	*(char)
,	O
(	O
oe	*(char)
-	O
oldpath	*(char)
)	O
,	O
oldpath	*(char)
,	O
(	O
ne	long
-	O
newpath	*(char)
)	O
,	O
newpath	*(char)
)	O
;	O
if	O
(	O
!	O
(	O
oldut	int
==	O
newut	int
&&	O
oe	*(char)
&&	O
ne	long
&&	O
(	O
oe	*(char)
-	O
oldpath	*(char)
)	O
==	O
(	O
ne	long
-	O
newpath	*(char)
)	O
&&	O
!	O
strncasecmp	(*(char),*(char),long)->(int)
(	O
oldpath	*(char)
,	O
newpath	*(char)
,	O
(	O
oe	*(char)
-	O
oldpath	*(char)
)	O
)	O
)	O
)	O
return	O
-	O
2	int
;	O
oldpath	*(char)
=	O
oe	*(char)
;	O
newpath	*(char)
=	O
ne	long
;	O
break	O
;	O
case	O
URL_IS_UNKNOWN	int
:	O
break	O
;	O
case	O
URL_IS_DASH	int
:	O
default	O
:	O
return	O
-	O
2	int
;	O
break	O
;	O
}	O
return	O
link	(*(char),*(char))->(int)
(	O
oldpath	*(char)
,	O
newpath	*(char)
)	O
;	O
}	O
int	O
Unlink	(*(char))->(int)
(	O
const	O
char	O
*	O
path	*(char)
)	O
{	O
const	O
char	O
*	O
lpath	*(char)
;	O
int	O
ut	int
=	O
urlPath	(*(char),*(*(char)))->(int)
(	O
path	*(char)
,	O
&	O
lpath	*(char)
)	O
;	O
switch	O
(	O
ut	int
)	O
{	O
case	O
URL_IS_FTP	int
:	O
return	O
ftpUnlink	(*(char))->(int)
(	O
path	*(char)
)	O
;	O
break	O
;	O
case	O
URL_IS_HTTP	int
:	O
case	O
URL_IS_PATH	int
:	O
path	*(char)
=	O
lpath	*(char)
;	O
case	O
URL_IS_UNKNOWN	int
:	O
break	O
;	O
case	O
URL_IS_DASH	int
:	O
default	O
:	O
return	O
-	O
2	int
;	O
break	O
;	O
}	O
return	O
unlink	(*(char))->(int)
(	O
path	*(char)
)	O
;	O
}	O
static	O
int	O
current_mday	int
;	O
static	O
int	O
current_mon	int
;	O
static	O
int	O
current_year	int
;	O
static	O
char	O
*	O
columns	array(*(char))
[	O
MAXCOLS	int
]	O
;	O
static	O
int	O
column_ptr	array(int)
[	O
MAXCOLS	int
]	O
;	O
static	O
int	O
vfs_split_text	(*(char))->(int)
(	O
char	O
*	O
p	*(void)
)	O
{	O
char	O
*	O
original	*(char)
=	O
p	*(void)
;	O
int	O
numcols	int
;	O
for	O
(	O
numcols	int
=	O
0	int
;	O
*	O
p	*(void)
&&	O
numcols	int
<	O
MAXCOLS	int
;	O
numcols	int
++	O
)	O
{	O
while	O
(	O
*	O
p	*(void)
==	O
' '	O
||	O
*	O
p	*(void)
==	O
'\r'	O
||	O
*	O
p	*(void)
==	O
'\n'	O
)	O
{	O
*	O
p	*(void)
=	O
0	int
;	O
p	*(void)
++	O
;	O
}	O
columns	array(*(char))
[	O
numcols	int
]	O
=	O
p	*(void)
;	O
column_ptr	array(int)
[	O
numcols	int
]	O
=	O
p	*(void)
-	O
original	*(char)
;	O
while	O
(	O
*	O
p	*(void)
&&	O
*	O
p	*(void)
!=	O
' '	O
&&	O
*	O
p	*(void)
!=	O
'\r'	O
&&	O
*	O
p	*(void)
!=	O
'\n'	O
)	O
p	*(void)
++	O
;	O
}	O
return	O
numcols	int
;	O
}	O
static	O
int	O
is_num	(int)->(int)
(	O
int	O
idx	int
)	O
{	O
if	O
(	O
!	O
columns	array(*(char))
[	O
idx	int
]	O
||	O
columns	array(*(char))
[	O
idx	int
]	O
[	O
0	int
]	O
<	O
'0'	O
||	O
columns	array(*(char))
[	O
idx	int
]	O
[	O
0	int
]	O
>	O
'9'	O
)	O
return	O
0	int
;	O
return	O
1	int
;	O
}	O
static	O
int	O
is_dos_date	(*(char))->(int)
(	O
char	O
*	O
str	*(char)
)	O
{	O
if	O
(	O
strlen	(*(char))->(long)
(	O
str	*(char)
)	O
==	O
8	int
&&	O
str	*(char)
[	O
2	int
]	O
==	O
str	*(char)
[	O
5	int
]	O
&&	O
strchr	(*(char),int)->(*(char))
(	O
"\\-/"	*(char)
,	O
(	O
int	O
)	O
str	*(char)
[	O
2	int
]	O
)	O
!=	O
NULL	O
)	O
return	O
(	O
1	int
)	O
;	O
return	O
(	O
0	int
)	O
;	O
}	O
static	O
int	O
is_week	(*(char),*(struct(int,int,int,int,int,int,int,int,int,long,*(char))))->(int)
(	O
char	O
*	O
str	*(char)
,	O
struct	O
tm	struct(int,int,int,int,int,int,int,int,int,long,*(char))
*	O
tim	*(struct(int,int,int,int,int,int,int,int,int,long,*(char)))
)	O
{	O
static	O
char	O
*	O
week	*(char)
=	O
"SunMonTueWedThuFriSat"	*(char)
;	O
char	O
*	O
pos	long
;	O
if	O
(	O
(	O
pos	long
=	O
strstr	(*(char),*(char))->(*(char))
(	O
week	*(char)
,	O
str	*(char)
)	O
)	O
!=	O
NULL	O
)	O
{	O
if	O
(	O
tim	*(struct(int,int,int,int,int,int,int,int,int,long,*(char)))
!=	O
NULL	O
)	O
tim	*(struct(int,int,int,int,int,int,int,int,int,long,*(char)))
->	O
tm_wday	int
=	O
(	O
pos	long
-	O
week	*(char)
)	O
/	O
3	int
;	O
return	O
(	O
1	int
)	O
;	O
}	O
return	O
(	O
0	int
)	O
;	O
}	O
static	O
int	O
is_month	(*(char),*(struct(int,int,int,int,int,int,int,int,int,long,*(char))))->(int)
(	O
char	O
*	O
str	*(char)
,	O
struct	O
tm	struct(int,int,int,int,int,int,int,int,int,long,*(char))
*	O
tim	*(struct(int,int,int,int,int,int,int,int,int,long,*(char)))
)	O
{	O
static	O
char	O
*	O
month	*(char)
=	O
"JanFebMarAprMayJunJulAugSepOctNovDec"	*(char)
;	O
char	O
*	O
pos	long
;	O
if	O
(	O
(	O
pos	long
=	O
strstr	(*(char),*(char))->(*(char))
(	O
month	*(char)
,	O
str	*(char)
)	O
)	O
!=	O
NULL	O
)	O
{	O
if	O
(	O
tim	*(struct(int,int,int,int,int,int,int,int,int,long,*(char)))
!=	O
NULL	O
)	O
tim	*(struct(int,int,int,int,int,int,int,int,int,long,*(char)))
->	O
tm_mon	int
=	O
(	O
pos	long
-	O
month	*(char)
)	O
/	O
3	int
;	O
return	O
(	O
1	int
)	O
;	O
}	O
return	O
(	O
0	int
)	O
;	O
}	O
static	O
int	O
is_time	(*(char),*(struct(int,int,int,int,int,int,int,int,int,long,*(char))))->(int)
(	O
char	O
*	O
str	*(char)
,	O
struct	O
tm	struct(int,int,int,int,int,int,int,int,int,long,*(char))
*	O
tim	*(struct(int,int,int,int,int,int,int,int,int,long,*(char)))
)	O
{	O
char	O
*	O
p	*(void)
,	O
*	O
p2	*(char)
;	O
if	O
(	O
(	O
p	*(void)
=	O
strchr	(*(char),int)->(*(char))
(	O
str	*(char)
,	O
':'	O
)	O
)	O
&&	O
(	O
p2	*(char)
=	O
strrchr	(*(char),int)->(*(char))
(	O
str	*(char)
,	O
':'	O
)	O
)	O
)	O
{	O
if	O
(	O
p	*(void)
!=	O
p2	*(char)
)	O
{	O
if	O
(	O
sscanf	(*(char),*(char))->(int)
(	O
str	*(char)
,	O
"%2d:%2d:%2d"	*(char)
,	O
&	O
tim	*(struct(int,int,int,int,int,int,int,int,int,long,*(char)))
->	O
tm_hour	int
,	O
&	O
tim	*(struct(int,int,int,int,int,int,int,int,int,long,*(char)))
->	O
tm_min	int
,	O
&	O
tim	*(struct(int,int,int,int,int,int,int,int,int,long,*(char)))
->	O
tm_sec	int
)	O
!=	O
3	int
)	O
return	O
(	O
0	int
)	O
;	O
}	O
else	O
{	O
if	O
(	O
sscanf	(*(char),*(char))->(int)
(	O
str	*(char)
,	O
"%2d:%2d"	*(char)
,	O
&	O
tim	*(struct(int,int,int,int,int,int,int,int,int,long,*(char)))
->	O
tm_hour	int
,	O
&	O
tim	*(struct(int,int,int,int,int,int,int,int,int,long,*(char)))
->	O
tm_min	int
)	O
!=	O
2	int
)	O
return	O
(	O
0	int
)	O
;	O
}	O
}	O
else	O
return	O
(	O
0	int
)	O
;	O
return	O
(	O
1	int
)	O
;	O
}	O
static	O
int	O
is_year	(*(char),*(struct(int,int,int,int,int,int,int,int,int,long,*(char))))->(int)
(	O
char	O
*	O
str	*(char)
,	O
struct	O
tm	struct(int,int,int,int,int,int,int,int,int,long,*(char))
*	O
tim	*(struct(int,int,int,int,int,int,int,int,int,long,*(char)))
)	O
{	O
long	O
year	long
;	O
if	O
(	O
strchr	(*(char),int)->(*(char))
(	O
str	*(char)
,	O
':'	O
)	O
)	O
return	O
(	O
0	int
)	O
;	O
if	O
(	O
strlen	(*(char))->(long)
(	O
str	*(char)
)	O
!=	O
4	int
)	O
return	O
(	O
0	int
)	O
;	O
if	O
(	O
sscanf	(*(char),*(char))->(int)
(	O
str	*(char)
,	O
"%ld"	*(char)
,	O
&	O
year	long
)	O
!=	O
1	int
)	O
return	O
(	O
0	int
)	O
;	O
if	O
(	O
year	long
<	O
1900	int
||	O
year	long
>	O
3000	int
)	O
return	O
(	O
0	int
)	O
;	O
tim	*(struct(int,int,int,int,int,int,int,int,int,long,*(char)))
->	O
tm_year	int
=	O
(	O
int	O
)	O
(	O
year	long
-	O
1900	int
)	O
;	O
return	O
(	O
1	int
)	O
;	O
}	O
static	O
int	O
vfs_parse_filetype	(char)->(int)
(	O
char	O
c	int
)	O
{	O
switch	O
(	O
c	int
)	O
{	O
case	O
'd'	O
:	O
return	O
S_IFDIR	O
;	O
case	O
'b'	O
:	O
return	O
S_IFBLK	O
;	O
case	O
'c'	O
:	O
return	O
S_IFCHR	O
;	O
case	O
'l'	O
:	O
return	O
S_IFLNK	O
;	O
case	O
's'	O
:	O
case	O
'p'	O
:	O
return	O
S_IFIFO	O
;	O
case	O
'm'	O
:	O
case	O
'n'	O
:	O
case	O
'-'	O
:	O
case	O
'?'	O
:	O
return	O
S_IFREG	O
;	O
default	O
:	O
return	O
-	O
1	int
;	O
}	O
}	O
static	O
int	O
vfs_parse_filemode	(*(char))->(int)
(	O
char	O
*	O
p	*(void)
)	O
{	O
int	O
res	int
=	O
0	int
;	O
switch	O
(	O
*	O
(	O
p	*(void)
++	O
)	O
)	O
{	O
case	O
'r'	O
:	O
res	int
|=	O
0400	int
;	O
break	O
;	O
case	O
'-'	O
:	O
break	O
;	O
default	O
:	O
return	O
-	O
1	int
;	O
}	O
switch	O
(	O
*	O
(	O
p	*(void)
++	O
)	O
)	O
{	O
case	O
'w'	O
:	O
res	int
|=	O
0200	int
;	O
break	O
;	O
case	O
'-'	O
:	O
break	O
;	O
default	O
:	O
return	O
-	O
1	int
;	O
}	O
switch	O
(	O
*	O
(	O
p	*(void)
++	O
)	O
)	O
{	O
case	O
'x'	O
:	O
res	int
|=	O
0100	int
;	O
break	O
;	O
case	O
's'	O
:	O
res	int
|=	O
0100	int
|	O
S_ISUID	O
;	O
break	O
;	O
case	O
'S'	O
:	O
res	int
|=	O
S_ISUID	O
;	O
break	O
;	O
case	O
'-'	O
:	O
break	O
;	O
default	O
:	O
return	O
-	O
1	int
;	O
}	O
switch	O
(	O
*	O
(	O
p	*(void)
++	O
)	O
)	O
{	O
case	O
'r'	O
:	O
res	int
|=	O
0040	int
;	O
break	O
;	O
case	O
'-'	O
:	O
break	O
;	O
default	O
:	O
return	O
-	O
1	int
;	O
}	O
switch	O
(	O
*	O
(	O
p	*(void)
++	O
)	O
)	O
{	O
case	O
'w'	O
:	O
res	int
|=	O
0020	int
;	O
break	O
;	O
case	O
'-'	O
:	O
break	O
;	O
default	O
:	O
return	O
-	O
1	int
;	O
}	O
switch	O
(	O
*	O
(	O
p	*(void)
++	O
)	O
)	O
{	O
case	O
'x'	O
:	O
res	int
|=	O
0010	int
;	O
break	O
;	O
case	O
's'	O
:	O
res	int
|=	O
0010	int
|	O
S_ISGID	O
;	O
break	O
;	O
case	O
'l'	O
:	O
case	O
'S'	O
:	O
res	int
|=	O
S_ISGID	O
;	O
break	O
;	O
case	O
'-'	O
:	O
break	O
;	O
default	O
:	O
return	O
-	O
1	int
;	O
}	O
switch	O
(	O
*	O
(	O
p	*(void)
++	O
)	O
)	O
{	O
case	O
'r'	O
:	O
res	int
|=	O
0004	int
;	O
break	O
;	O
case	O
'-'	O
:	O
break	O
;	O
default	O
:	O
return	O
-	O
1	int
;	O
}	O
switch	O
(	O
*	O
(	O
p	*(void)
++	O
)	O
)	O
{	O
case	O
'w'	O
:	O
res	int
|=	O
0002	int
;	O
break	O
;	O
case	O
'-'	O
:	O
break	O
;	O
default	O
:	O
return	O
-	O
1	int
;	O
}	O
switch	O
(	O
*	O
(	O
p	*(void)
++	O
)	O
)	O
{	O
case	O
'x'	O
:	O
res	int
|=	O
0001	int
;	O
break	O
;	O
case	O
't'	O
:	O
res	int
|=	O
0001	int
|	O
S_ISVTX	O
;	O
break	O
;	O
case	O
'T'	O
:	O
res	int
|=	O
S_ISVTX	O
;	O
break	O
;	O
case	O
'-'	O
:	O
break	O
;	O
default	O
:	O
return	O
-	O
1	int
;	O
}	O
return	O
res	int
;	O
}	O
static	O
int	O
vfs_parse_filedate	(int,*(long))->(int)
(	O
int	O
idx	int
,	O
time_t	long
*	O
t	*(char)
)	O
{	O
char	O
*	O
p	*(void)
;	O
struct	O
tm	struct(int,int,int,int,int,int,int,int,int,long,*(char))
tim	*(struct(int,int,int,int,int,int,int,int,int,long,*(char)))
;	O
int	O
d	array(int)
[	O
3	int
]	O
;	O
int	O
got_year	int
=	O
0	int
;	O
tim	*(struct(int,int,int,int,int,int,int,int,int,long,*(char)))
.	O
tm_year	int
=	O
current_year	int
;	O
tim	*(struct(int,int,int,int,int,int,int,int,int,long,*(char)))
.	O
tm_mon	int
=	O
current_mon	int
;	O
tim	*(struct(int,int,int,int,int,int,int,int,int,long,*(char)))
.	O
tm_mday	int
=	O
current_mday	int
;	O
tim	*(struct(int,int,int,int,int,int,int,int,int,long,*(char)))
.	O
tm_hour	int
=	O
0	int
;	O
tim	*(struct(int,int,int,int,int,int,int,int,int,long,*(char)))
.	O
tm_min	int
=	O
0	int
;	O
tim	*(struct(int,int,int,int,int,int,int,int,int,long,*(char)))
.	O
tm_sec	int
=	O
0	int
;	O
tim	*(struct(int,int,int,int,int,int,int,int,int,long,*(char)))
.	O
tm_isdst	int
=	O
-	O
1	int
;	O
p	*(void)
=	O
columns	array(*(char))
[	O
idx	int
++	O
]	O
;	O
if	O
(	O
is_week	(*(char),*(struct(int,int,int,int,int,int,int,int,int,long,*(char))))->(int)
(	O
p	*(void)
,	O
&	O
tim	*(struct(int,int,int,int,int,int,int,int,int,long,*(char)))
)	O
)	O
p	*(void)
=	O
columns	array(*(char))
[	O
idx	int
++	O
]	O
;	O
if	O
(	O
is_month	(*(char),*(struct(int,int,int,int,int,int,int,int,int,long,*(char))))->(int)
(	O
p	*(void)
,	O
&	O
tim	*(struct(int,int,int,int,int,int,int,int,int,long,*(char)))
)	O
)	O
{	O
if	O
(	O
is_num	(int)->(int)
(	O
idx	int
)	O
)	O
tim	*(struct(int,int,int,int,int,int,int,int,int,long,*(char)))
.	O
tm_mday	int
=	O
(	O
int	O
)	O
atol	(*(char))->(long)
(	O
columns	array(*(char))
[	O
idx	int
++	O
]	O
)	O
;	O
else	O
return	O
0	int
;	O
}	O
else	O
{	O
if	O
(	O
is_dos_date	(*(char))->(int)
(	O
p	*(void)
)	O
)	O
{	O
p	*(void)
[	O
2	int
]	O
=	O
p	*(void)
[	O
5	int
]	O
=	O
'-'	O
;	O
if	O
(	O
sscanf	(*(char),*(char))->(int)
(	O
p	*(void)
,	O
"%2d-%2d-%2d"	*(char)
,	O
&	O
d	array(int)
[	O
0	int
]	O
,	O
&	O
d	array(int)
[	O
1	int
]	O
,	O
&	O
d	array(int)
[	O
2	int
]	O
)	O
==	O
3	int
)	O
{	O
d	array(int)
[	O
0	int
]	O
--	O
;	O
if	O
(	O
d	array(int)
[	O
2	int
]	O
<	O
70	int
)	O
d	array(int)
[	O
2	int
]	O
+=	O
100	int
;	O
tim	*(struct(int,int,int,int,int,int,int,int,int,long,*(char)))
.	O
tm_mon	int
=	O
d	array(int)
[	O
0	int
]	O
;	O
tim	*(struct(int,int,int,int,int,int,int,int,int,long,*(char)))
.	O
tm_mday	int
=	O
d	array(int)
[	O
1	int
]	O
;	O
tim	*(struct(int,int,int,int,int,int,int,int,int,long,*(char)))
.	O
tm_year	int
=	O
d	array(int)
[	O
2	int
]	O
;	O
got_year	int
=	O
1	int
;	O
}	O
else	O
return	O
0	int
;	O
}	O
else	O
return	O
0	int
;	O
}	O
if	O
(	O
is_num	(int)->(int)
(	O
idx	int
)	O
)	O
{	O
if	O
(	O
is_time	(*(char),*(struct(int,int,int,int,int,int,int,int,int,long,*(char))))->(int)
(	O
columns	array(*(char))
[	O
idx	int
]	O
,	O
&	O
tim	*(struct(int,int,int,int,int,int,int,int,int,long,*(char)))
)	O
||	O
(	O
got_year	int
=	O
is_year	(*(char),*(struct(int,int,int,int,int,int,int,int,int,long,*(char))))->(int)
(	O
columns	array(*(char))
[	O
idx	int
]	O
,	O
&	O
tim	*(struct(int,int,int,int,int,int,int,int,int,long,*(char)))
)	O
)	O
)	O
{	O
idx	int
++	O
;	O
if	O
(	O
is_num	(int)->(int)
(	O
idx	int
)	O
&&	O
(	O
(	O
got_year	int
=	O
is_year	(*(char),*(struct(int,int,int,int,int,int,int,int,int,long,*(char))))->(int)
(	O
columns	array(*(char))
[	O
idx	int
]	O
,	O
&	O
tim	*(struct(int,int,int,int,int,int,int,int,int,long,*(char)))
)	O
)	O
||	O
is_time	(*(char),*(struct(int,int,int,int,int,int,int,int,int,long,*(char))))->(int)
(	O
columns	array(*(char))
[	O
idx	int
]	O
,	O
&	O
tim	*(struct(int,int,int,int,int,int,int,int,int,long,*(char)))
)	O
)	O
)	O
idx	int
++	O
;	O
}	O
}	O
else	O
return	O
0	int
;	O
if	O
(	O
!	O
got_year	int
&&	O
current_mon	int
<	O
6	int
&&	O
current_mon	int
<	O
tim	*(struct(int,int,int,int,int,int,int,int,int,long,*(char)))
.	O
tm_mon	int
&&	O
tim	*(struct(int,int,int,int,int,int,int,int,int,long,*(char)))
.	O
tm_mon	int
-	O
current_mon	int
>=	O
6	int
)	O
tim	*(struct(int,int,int,int,int,int,int,int,int,long,*(char)))
.	O
tm_year	int
--	O
;	O
if	O
(	O
(	O
*	O
t	*(char)
=	O
mktime	(*(struct(int,int,int,int,int,int,int,int,int,long,*(char))))->(long)
(	O
&	O
tim	*(struct(int,int,int,int,int,int,int,int,int,long,*(char)))
)	O
)	O
<	O
0	int
)	O
*	O
t	*(char)
=	O
0	int
;	O
return	O
idx	int
;	O
}	O
static	O
int	O
vfs_parse_ls_lga	(*(char),*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))),*(*(char)),*(*(char)))->(int)
(	O
char	O
*	O
p	*(void)
,	O
struct	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
*	O
s	*(char)
,	O
char	O
*	O
*	O
filename	*(*(char))
,	O
char	O
*	O
*	O
linkname	*(*(char))
)	O
{	O
int	O
idx	int
,	O
idx2	int
,	O
num_cols	int
;	O
int	O
i	int
;	O
char	O
*	O
p_copy	*(char)
;	O
if	O
(	O
strncmp	(*(char),*(char),long)->(int)
(	O
p	*(void)
,	O
"total"	*(char)
,	O
5	int
)	O
==	O
0	int
)	O
return	O
0	int
;	O
p_copy	*(char)
=	O
g_strdup	O
(	O
p	*(void)
)	O
;	O
if	O
(	O
(	O
i	int
=	O
vfs_parse_filetype	(char)->(int)
(	O
*	O
(	O
p	*(void)
++	O
)	O
)	O
)	O
==	O
-	O
1	int
)	O
goto	O
error	*(*(char))
;	O
s	*(char)
->	O
st_mode	int
=	O
i	int
;	O
if	O
(	O
*	O
p	*(void)
==	O
' '	O
)	O
p	*(void)
++	O
;	O
if	O
(	O
*	O
p	*(void)
==	O
'['	O
)	O
{	O
if	O
(	O
strlen	(*(char))->(long)
(	O
p	*(void)
)	O
<=	O
8	int
||	O
p	*(void)
[	O
8	int
]	O
!=	O
']'	O
)	O
goto	O
error	*(*(char))
;	O
if	O
(	O
S_ISDIR	O
(	O
s	*(char)
->	O
st_mode	int
)	O
)	O
s	*(char)
->	O
st_mode	int
|=	O
(	O
S_IRUSR	O
|	O
S_IRGRP	O
|	O
S_IROTH	O
|	O
S_IWUSR	O
|	O
S_IXUSR	O
|	O
S_IXGRP	O
|	O
S_IXOTH	O
)	O
;	O
else	O
s	*(char)
->	O
st_mode	int
|=	O
(	O
S_IRUSR	O
|	O
S_IRGRP	O
|	O
S_IROTH	O
|	O
S_IWUSR	O
)	O
;	O
p	*(void)
+=	O
9	int
;	O
}	O
else	O
{	O
if	O
(	O
(	O
i	int
=	O
vfs_parse_filemode	(*(char))->(int)
(	O
p	*(void)
)	O
)	O
==	O
-	O
1	int
)	O
goto	O
error	*(*(char))
;	O
s	*(char)
->	O
st_mode	int
|=	O
i	int
;	O
p	*(void)
+=	O
9	int
;	O
if	O
(	O
*	O
p	*(void)
==	O
'+'	O
)	O
p	*(void)
++	O
;	O
}	O
g_free	O
(	O
p_copy	*(char)
)	O
;	O
p_copy	*(char)
=	O
g_strdup	O
(	O
p	*(void)
)	O
;	O
num_cols	int
=	O
vfs_split_text	(*(char))->(int)
(	O
p	*(void)
)	O
;	O
s	*(char)
->	O
st_nlink	long
=	O
atol	(*(char))->(long)
(	O
columns	array(*(char))
[	O
0	int
]	O
)	O
;	O
if	O
(	O
s	*(char)
->	O
st_nlink	long
<	O
0	int
)	O
goto	O
error	*(*(char))
;	O
if	O
(	O
!	O
is_num	(int)->(int)
(	O
1	int
)	O
)	O
unameToUid	(*(char),*(int))->(int)
(	O
columns	array(*(char))
[	O
1	int
]	O
,	O
&	O
s	*(char)
->	O
st_uid	int
)	O
;	O
else	O
s	*(char)
->	O
st_uid	int
=	O
(	O
uid_t	int
)	O
atol	(*(char))->(long)
(	O
columns	array(*(char))
[	O
1	int
]	O
)	O
;	O
for	O
(	O
idx	int
=	O
3	int
;	O
idx	int
<=	O
5	int
;	O
idx	int
++	O
)	O
if	O
(	O
is_month	(*(char),*(struct(int,int,int,int,int,int,int,int,int,long,*(char))))->(int)
(	O
columns	array(*(char))
[	O
idx	int
]	O
,	O
NULL	O
)	O
||	O
is_week	(*(char),*(struct(int,int,int,int,int,int,int,int,int,long,*(char))))->(int)
(	O
columns	array(*(char))
[	O
idx	int
]	O
,	O
NULL	O
)	O
||	O
is_dos_date	(*(char))->(int)
(	O
columns	array(*(char))
[	O
idx	int
]	O
)	O
)	O
break	O
;	O
if	O
(	O
idx	int
==	O
6	int
||	O
(	O
idx	int
==	O
5	int
&&	O
!	O
S_ISCHR	O
(	O
s	*(char)
->	O
st_mode	int
)	O
&&	O
!	O
S_ISBLK	O
(	O
s	*(char)
->	O
st_mode	int
)	O
)	O
)	O
goto	O
error	*(*(char))
;	O
if	O
(	O
idx	int
==	O
3	int
||	O
(	O
idx	int
==	O
4	int
&&	O
(	O
S_ISCHR	O
(	O
s	*(char)
->	O
st_mode	int
)	O
||	O
S_ISBLK	O
(	O
s	*(char)
->	O
st_mode	int
)	O
)	O
)	O
)	O
idx2	int
=	O
2	int
;	O
else	O
{	O
if	O
(	O
is_num	(int)->(int)
(	O
2	int
)	O
)	O
s	*(char)
->	O
st_gid	int
=	O
(	O
gid_t	int
)	O
atol	(*(char))->(long)
(	O
columns	array(*(char))
[	O
2	int
]	O
)	O
;	O
else	O
gnameToGid	(*(char),*(int))->(int)
(	O
columns	array(*(char))
[	O
1	int
]	O
,	O
&	O
s	*(char)
->	O
st_gid	int
)	O
;	O
idx2	int
=	O
3	int
;	O
}	O
if	O
(	O
S_ISCHR	O
(	O
s	*(char)
->	O
st_mode	int
)	O
||	O
S_ISBLK	O
(	O
s	*(char)
->	O
st_mode	int
)	O
)	O
{	O
int	O
maj	int
,	O
min	int
;	O
if	O
(	O
!	O
is_num	(int)->(int)
(	O
idx2	int
)	O
||	O
sscanf	(*(char),*(char))->(int)
(	O
columns	array(*(char))
[	O
idx2	int
]	O
,	O
" %d,"	*(char)
,	O
&	O
maj	int
)	O
!=	O
1	int
)	O
goto	O
error	*(*(char))
;	O
if	O
(	O
!	O
is_num	(int)->(int)
(	O
++	O
idx2	int
)	O
||	O
sscanf	(*(char),*(char))->(int)
(	O
columns	array(*(char))
[	O
idx2	int
]	O
,	O
" %d"	*(char)
,	O
&	O
min	int
)	O
!=	O
1	int
)	O
goto	O
error	*(*(char))
;	O
s	*(char)
->	O
st_size	long
=	O
0	int
;	O
}	O
else	O
{	O
if	O
(	O
!	O
is_num	(int)->(int)
(	O
idx2	int
)	O
)	O
goto	O
error	*(*(char))
;	O
s	*(char)
->	O
st_size	long
=	O
(	O
size_t	long
)	O
atol	(*(char))->(long)
(	O
columns	array(*(char))
[	O
idx2	int
]	O
)	O
;	O
}	O
idx	int
=	O
vfs_parse_filedate	(int,*(long))->(int)
(	O
idx	int
,	O
&	O
s	*(char)
->	O
st_mtime	O
)	O
;	O
if	O
(	O
!	O
idx	int
)	O
goto	O
error	*(*(char))
;	O
s	*(char)
->	O
st_atime	O
=	O
s	*(char)
->	O
st_ctime	O
=	O
s	*(char)
->	O
st_mtime	O
;	O
s	*(char)
->	O
st_dev	long
=	O
0	int
;	O
s	*(char)
->	O
st_ino	long
=	O
0	int
;	O
for	O
(	O
i	int
=	O
idx	int
+	O
1	int
,	O
idx2	int
=	O
0	int
;	O
i	int
<	O
num_cols	int
;	O
i	int
++	O
)	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
columns	array(*(char))
[	O
i	int
]	O
,	O
"->"	*(char)
)	O
==	O
0	int
)	O
{	O
idx2	int
=	O
i	int
;	O
break	O
;	O
}	O
if	O
(	O
(	O
(	O
S_ISLNK	O
(	O
s	*(char)
->	O
st_mode	int
)	O
||	O
(	O
num_cols	int
==	O
idx	int
+	O
3	int
&&	O
s	*(char)
->	O
st_nlink	long
>	O
1	int
)	O
)	O
)	O
&&	O
idx2	int
)	O
{	O
int	O
p	*(void)
;	O
char	O
*	O
s	*(char)
;	O
if	O
(	O
filename	*(*(char))
)	O
{	O
int	O
nb	long
=	O
column_ptr	array(int)
[	O
idx2	int
]	O
-	O
column_ptr	array(int)
[	O
idx	int
]	O
-	O
1	int
;	O
s	*(char)
=	O
xmalloc	(long)->(*(void))
(	O
nb	long
+	O
1	int
)	O
;	O
strncpy	(*(char),*(char),long)->(*(char))
(	O
s	*(char)
,	O
p_copy	*(char)
+	O
column_ptr	array(int)
[	O
idx	int
]	O
,	O
nb	long
)	O
;	O
*	O
filename	*(*(char))
=	O
s	*(char)
;	O
}	O
if	O
(	O
linkname	*(*(char))
)	O
{	O
s	*(char)
=	O
g_strdup	O
(	O
p_copy	*(char)
+	O
column_ptr	array(int)
[	O
idx2	int
+	O
1	int
]	O
)	O
;	O
p	*(void)
=	O
strlen	(*(char))->(long)
(	O
s	*(char)
)	O
;	O
if	O
(	O
s	*(char)
[	O
p	*(void)
-	O
1	int
]	O
==	O
'\r'	O
||	O
s	*(char)
[	O
p	*(void)
-	O
1	int
]	O
==	O
'\n'	O
)	O
s	*(char)
[	O
p	*(void)
-	O
1	int
]	O
=	O
0	int
;	O
if	O
(	O
s	*(char)
[	O
p	*(void)
-	O
2	int
]	O
==	O
'\r'	O
||	O
s	*(char)
[	O
p	*(void)
-	O
2	int
]	O
==	O
'\n'	O
)	O
s	*(char)
[	O
p	*(void)
-	O
2	int
]	O
=	O
0	int
;	O
*	O
linkname	*(*(char))
=	O
s	*(char)
;	O
}	O
}	O
else	O
{	O
if	O
(	O
filename	*(*(char))
)	O
{	O
int	O
p	*(void)
;	O
char	O
*	O
s	*(char)
;	O
s	*(char)
=	O
g_strdup	O
(	O
p_copy	*(char)
+	O
column_ptr	array(int)
[	O
idx	int
++	O
]	O
)	O
;	O
p	*(void)
=	O
strlen	(*(char))->(long)
(	O
s	*(char)
)	O
;	O
if	O
(	O
s	*(char)
[	O
p	*(void)
-	O
1	int
]	O
==	O
'\r'	O
||	O
s	*(char)
[	O
p	*(void)
-	O
1	int
]	O
==	O
'\n'	O
)	O
s	*(char)
[	O
p	*(void)
-	O
1	int
]	O
=	O
0	int
;	O
if	O
(	O
s	*(char)
[	O
p	*(void)
-	O
2	int
]	O
==	O
'\r'	O
||	O
s	*(char)
[	O
p	*(void)
-	O
2	int
]	O
==	O
'\n'	O
)	O
s	*(char)
[	O
p	*(void)
-	O
2	int
]	O
=	O
0	int
;	O
*	O
filename	*(*(char))
=	O
s	*(char)
;	O
}	O
if	O
(	O
linkname	*(*(char))
)	O
*	O
linkname	*(*(char))
=	O
NULL	O
;	O
}	O
g_free	O
(	O
p_copy	*(char)
)	O
;	O
return	O
1	int
;	O
error	*(*(char))
:	O
if	O
(	O
p_copy	*(char)
!=	O
p	*(void)
)	O
g_free	O
(	O
p_copy	*(char)
)	O
;	O
return	O
0	int
;	O
}	O
typedef	O
enum	O
{	O
DO_FTP_STAT	int
=	O
1	int
,	O
DO_FTP_LSTAT	int
=	O
2	int
,	O
DO_FTP_READLINK	int
=	O
3	int
,	O
DO_FTP_ACCESS	int
=	O
4	int
,	O
DO_FTP_GLOB	int
=	O
5	int
}	O
ftpSysCall_t	enum(int,int,int,int,int)
;	O
static	O
size_t	long
ftpBufAlloced	long
=	O
0	int
;	O
static	O
char	O
*	O
ftpBuf	*(char)
=	O
NULL	O
;	O
static	O
int	O
ftpNLST	(*(char),enum(int,int,int,int,int),*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))),*(char),long)->(int)
(	O
const	O
char	O
*	O
url	*(char)
,	O
ftpSysCall_t	enum(int,int,int,int,int)
ftpSysCall	enum(int,int,int,int,int)
,	O
struct	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
*	O
st	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
,	O
char	O
*	O
rlbuf	*(char)
,	O
size_t	long
rlbufsiz	long
)	O
{	O
FD_t	*(struct)
fd	*(struct)
;	O
const	O
char	O
*	O
path	*(char)
;	O
int	O
bufLength	int
,	O
moretodo	int
;	O
const	O
char	O
*	O
n	int
,	O
*	O
ne	long
,	O
*	O
o	*(char)
,	O
*	O
oe	*(char)
;	O
char	O
*	O
s	*(char)
;	O
char	O
*	O
se	*(char)
;	O
const	O
char	O
*	O
urldn	*(char)
;	O
char	O
*	O
bn	*(char)
=	O
NULL	O
;	O
int	O
nbn	int
=	O
0	int
;	O
urlinfo	struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,*(struct),*(struct),int,*(char),int,int,int,int)
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
;	O
int	O
rc	long
;	O
n	int
=	O
ne	long
=	O
o	*(char)
=	O
oe	*(char)
=	O
NULL	O
;	O
(	O
void	O
)	O
urlPath	(*(char),*(*(char)))->(int)
(	O
url	*(char)
,	O
&	O
path	*(char)
)	O
;	O
if	O
(	O
*	O
path	*(char)
==	O
'\0'	O
)	O
return	O
-	O
2	int
;	O
switch	O
(	O
ftpSysCall	enum(int,int,int,int,int)
)	O
{	O
case	O
DO_FTP_GLOB	int
:	O
fd	*(struct)
=	O
ftpOpen	(*(char),int,int,*(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,*(struct`),*(struct`),int,*(char),int,int,int,int))))->(*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*(void),int,long,long,int,int,int,*(void),*(struct(struct`,struct`,array(struct(int,long,long)))),int,int,long,long)))
(	O
url	*(char)
,	O
0	int
,	O
0	int
,	O
&	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
)	O
;	O
if	O
(	O
fd	*(struct)
==	O
NULL	O
||	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
==	O
NULL	O
)	O
return	O
-	O
1	int
;	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
openError	int
=	O
ftpReq	(*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*(void),int,long,long,int,int,int,*(void),*(struct(struct`,struct`,array(struct(int,long,long)))),int,int,long,long)),*(char),*(char))->(int)
(	O
fd	*(struct)
,	O
"NLST"	*(char)
,	O
path	*(char)
)	O
;	O
break	O
;	O
default	O
:	O
urldn	*(char)
=	O
alloca_strdup	O
(	O
url	*(char)
)	O
;	O
if	O
(	O
(	O
bn	*(char)
=	O
strrchr	(*(char),int)->(*(char))
(	O
urldn	*(char)
,	O
'/'	O
)	O
)	O
==	O
NULL	O
)	O
return	O
-	O
2	int
;	O
else	O
if	O
(	O
bn	*(char)
==	O
path	*(char)
)	O
bn	*(char)
=	O
"."	*(char)
;	O
else	O
*	O
bn	*(char)
++	O
=	O
'\0'	O
;	O
nbn	int
=	O
strlen	(*(char))->(long)
(	O
bn	*(char)
)	O
;	O
rc	long
=	O
ftpChdir	(*(char))->(int)
(	O
urldn	*(char)
)	O
;	O
if	O
(	O
rc	long
<	O
0	int
)	O
return	O
rc	long
;	O
fd	*(struct)
=	O
ftpOpen	(*(char),int,int,*(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,*(struct`),*(struct`),int,*(char),int,int,int,int))))->(*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*(void),int,long,long,int,int,int,*(void),*(struct(struct`,struct`,array(struct(int,long,long)))),int,int,long,long)))
(	O
url	*(char)
,	O
0	int
,	O
0	int
,	O
&	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
)	O
;	O
if	O
(	O
fd	*(struct)
==	O
NULL	O
||	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
==	O
NULL	O
)	O
return	O
-	O
1	int
;	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
openError	int
=	O
ftpReq	(*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*(void),int,long,long,int,int,int,*(void),*(struct(struct`,struct`,array(struct(int,long,long)))),int,int,long,long)),*(char),*(char))->(int)
(	O
fd	*(struct)
,	O
"NLST"	*(char)
,	O
"-la"	*(char)
)	O
;	O
break	O
;	O
}	O
if	O
(	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
openError	int
<	O
0	int
)	O
{	O
fd	*(struct)
=	O
fdLink	O
(	O
fd	*(struct)
,	O
"error data (ftpStat)"	*(char)
)	O
;	O
rc	long
=	O
-	O
2	int
;	O
goto	O
exit	(int)->(void)
;	O
}	O
if	O
(	O
ftpBufAlloced	long
==	O
0	int
||	O
ftpBuf	*(char)
==	O
NULL	O
)	O
{	O
ftpBufAlloced	long
=	O
url_iobuf_size	int
;	O
ftpBuf	*(char)
=	O
xcalloc	(long,long)->(*(void))
(	O
ftpBufAlloced	long
,	O
sizeof	O
(	O
ftpBuf	*(char)
[	O
0	int
]	O
)	O
)	O
;	O
}	O
*	O
ftpBuf	*(char)
=	O
'\0'	O
;	O
bufLength	int
=	O
0	int
;	O
moretodo	int
=	O
1	int
;	O
do	O
{	O
if	O
(	O
(	O
ftpBufAlloced	long
-	O
bufLength	int
)	O
<	O
(	O
1024	int
+	O
80	int
)	O
)	O
{	O
ftpBufAlloced	long
<<=	O
2	int
;	O
ftpBuf	*(char)
=	O
xrealloc	(*(void),long)->(*(void))
(	O
ftpBuf	*(char)
,	O
ftpBufAlloced	long
)	O
;	O
}	O
s	*(char)
=	O
se	*(char)
=	O
ftpBuf	*(char)
+	O
bufLength	int
;	O
*	O
se	*(char)
=	O
'\0'	O
;	O
rc	long
=	O
fdFgets	(*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*(void),int,long,long,int,int,int,*(void),*(struct(struct`,struct`,array(struct(int,long,long)))),int,int,long,long)),*(char),long)->(int)
(	O
fd	*(struct)
,	O
se	*(char)
,	O
(	O
ftpBufAlloced	long
-	O
bufLength	int
)	O
)	O
;	O
if	O
(	O
rc	long
<=	O
0	int
)	O
{	O
moretodo	int
=	O
0	int
;	O
break	O
;	O
}	O
if	O
(	O
ftpSysCall	enum(int,int,int,int,int)
==	O
DO_FTP_GLOB	int
)	O
{	O
bufLength	int
+=	O
strlen	(*(char))->(long)
(	O
se	*(char)
)	O
;	O
continue	O
;	O
}	O
for	O
(	O
s	*(char)
=	O
se	*(char)
;	O
*	O
s	*(char)
!=	O
'\0'	O
;	O
s	*(char)
=	O
se	*(char)
)	O
{	O
int	O
bingo	int
;	O
while	O
(	O
*	O
se	*(char)
&&	O
*	O
se	*(char)
!=	O
'\n'	O
)	O
se	*(char)
++	O
;	O
if	O
(	O
se	*(char)
>	O
s	*(char)
&&	O
se	*(char)
[	O
-	O
1	int
]	O
==	O
'\r'	O
)	O
se	*(char)
[	O
-	O
1	int
]	O
=	O
'\0'	O
;	O
if	O
(	O
*	O
se	*(char)
==	O
'\0'	O
)	O
break	O
;	O
*	O
se	*(char)
++	O
=	O
'\0'	O
;	O
if	O
(	O
!	O
strncmp	(*(char),*(char),long)->(int)
(	O
s	*(char)
,	O
"total "	*(char)
,	O
sizeof	O
(	O
"total "	*(char)
)	O
-	O
1	int
)	O
)	O
continue	O
;	O
o	*(char)
=	O
NULL	O
;	O
for	O
(	O
bingo	int
=	O
0	int
,	O
n	int
=	O
se	*(char)
;	O
n	int
>=	O
s	*(char)
;	O
n	int
--	O
)	O
{	O
switch	O
(	O
*	O
n	int
)	O
{	O
case	O
'\0'	O
:	O
oe	*(char)
=	O
ne	long
=	O
n	int
;	O
break	O
;	O
case	O
' '	O
:	O
if	O
(	O
o	*(char)
||	O
!	O
(	O
n	int
[	O
-	O
3	int
]	O
==	O
' '	O
&&	O
n	int
[	O
-	O
2	int
]	O
==	O
'-'	O
&&	O
n	int
[	O
-	O
1	int
]	O
==	O
'>'	O
)	O
)	O
{	O
while	O
(	O
*	O
(	O
++	O
n	int
)	O
==	O
' '	O
)	O
;	O
bingo	int
++	O
;	O
break	O
;	O
}	O
for	O
(	O
o	*(char)
=	O
n	int
+	O
1	int
;	O
*	O
o	*(char)
==	O
' '	O
;	O
o	*(char)
++	O
)	O
;	O
n	int
-=	O
3	int
;	O
ne	long
=	O
n	int
;	O
break	O
;	O
default	O
:	O
break	O
;	O
}	O
if	O
(	O
bingo	int
)	O
break	O
;	O
}	O
if	O
(	O
nbn	int
!=	O
(	O
ne	long
-	O
n	int
)	O
)	O
continue	O
;	O
if	O
(	O
strncmp	(*(char),*(char),long)->(int)
(	O
n	int
,	O
bn	*(char)
,	O
nbn	int
)	O
)	O
continue	O
;	O
moretodo	int
=	O
0	int
;	O
break	O
;	O
}	O
if	O
(	O
moretodo	int
&&	O
se	*(char)
>	O
s	*(char)
)	O
{	O
bufLength	int
=	O
se	*(char)
-	O
s	*(char)
-	O
1	int
;	O
if	O
(	O
s	*(char)
!=	O
ftpBuf	*(char)
)	O
memmove	(*(void),*(void),long)->(*(void))
(	O
ftpBuf	*(char)
,	O
s	*(char)
,	O
bufLength	int
)	O
;	O
}	O
else	O
{	O
bufLength	int
=	O
0	int
;	O
}	O
}	O
while	O
(	O
moretodo	int
)	O
;	O
switch	O
(	O
ftpSysCall	enum(int,int,int,int,int)
)	O
{	O
case	O
DO_FTP_STAT	int
:	O
if	O
(	O
o	*(char)
&&	O
oe	*(char)
)	O
{	O
}	O
case	O
DO_FTP_LSTAT	int
:	O
if	O
(	O
st	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
==	O
NULL	O
||	O
!	O
(	O
n	int
&&	O
ne	long
)	O
)	O
{	O
rc	long
=	O
-	O
1	int
;	O
}	O
else	O
{	O
rc	long
=	O
(	O
(	O
vfs_parse_ls_lga	(*(char),*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))),*(*(char)),*(*(char)))->(int)
(	O
s	*(char)
,	O
st	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
,	O
NULL	O
,	O
NULL	O
)	O
>	O
0	int
)	O
?	O
0	int
:	O
-	O
1	int
)	O
;	O
}	O
break	O
;	O
case	O
DO_FTP_READLINK	int
:	O
if	O
(	O
rlbuf	*(char)
==	O
NULL	O
||	O
!	O
(	O
o	*(char)
&&	O
oe	*(char)
)	O
)	O
{	O
rc	long
=	O
-	O
1	int
;	O
}	O
else	O
{	O
rc	long
=	O
oe	*(char)
-	O
o	*(char)
;	O
if	O
(	O
rc	long
>	O
rlbufsiz	long
)	O
rc	long
=	O
rlbufsiz	long
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
rlbuf	*(char)
,	O
o	*(char)
,	O
rc	long
)	O
;	O
if	O
(	O
rc	long
<	O
rlbufsiz	long
)	O
rlbuf	*(char)
[	O
rc	long
]	O
=	O
'\0'	O
;	O
}	O
break	O
;	O
case	O
DO_FTP_ACCESS	int
:	O
rc	long
=	O
0	int
;	O
break	O
;	O
case	O
DO_FTP_GLOB	int
:	O
rc	long
=	O
0	int
;	O
break	O
;	O
}	O
exit	(int)->(void)
:	O
ufdClose	(*(void))->(int)
(	O
fd	*(struct)
)	O
;	O
return	O
rc	long
;	O
}	O
static	O
int	O
ftpStat	(*(char),*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))))->(int)
(	O
const	O
char	O
*	O
path	*(char)
,	O
struct	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
*	O
st	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
)	O
{	O
return	O
ftpNLST	(*(char),enum(int,int,int,int,int),*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))),*(char),long)->(int)
(	O
path	*(char)
,	O
DO_FTP_STAT	int
,	O
st	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
,	O
NULL	O
,	O
0	int
)	O
;	O
}	O
static	O
int	O
ftpLstat	(*(char),*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))))->(int)
(	O
const	O
char	O
*	O
path	*(char)
,	O
struct	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
*	O
st	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
)	O
{	O
int	O
rc	long
;	O
rc	long
=	O
ftpNLST	(*(char),enum(int,int,int,int,int),*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))),*(char),long)->(int)
(	O
path	*(char)
,	O
DO_FTP_LSTAT	int
,	O
st	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
,	O
NULL	O
,	O
0	int
)	O
;	O
if	O
(	O
_rpmio_debug	int
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"*** ftpLstat(%s) rc %d\n"	*(char)
,	O
path	*(char)
,	O
rc	long
)	O
;	O
return	O
rc	long
;	O
}	O
static	O
int	O
ftpReadlink	(*(char),*(char),long)->(int)
(	O
const	O
char	O
*	O
path	*(char)
,	O
char	O
*	O
buf	*(char)
,	O
size_t	long
bufsiz	long
)	O
{	O
return	O
ftpNLST	(*(char),enum(int,int,int,int,int),*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))),*(char),long)->(int)
(	O
path	*(char)
,	O
DO_FTP_READLINK	int
,	O
NULL	O
,	O
buf	*(char)
,	O
bufsiz	long
)	O
;	O
}	O
static	O
void	O
ftpGlobfree	(*(struct(long,*(*(char)),long,int,*((*`)->(void)),*((*`)->(*`)),*((*`)->(*`)),*((*`,*`)->(int)),*((*`,*`)->(int)))))->(void)
(	O
glob_t	struct(long,*(*(char)),long,int,*((*(void))->(void)),*((*(void))->(*(struct(long,long,short,char,array(char))))),*((*(char))->(*(void))),*((*(char),*(struct(long,long,long,int,int,int,int,long,long,long,long,struct`,struct`,struct`,array(long))))->(int)),*((*(char),*(struct(long,long,long,int,int,int,int,long,long,long,long,struct`,struct`,struct`,array(long))))->(int)))
*	O
pglob	*(struct(long,*(*(char)),long,int,*((*(void))->(void)),*((*(void))->(*(struct`))),*((*(char))->(*(void))),*((*(char),*(struct`))->(int)),*((*(char),*(struct`))->(int))))
)	O
{	O
if	O
(	O
_rpmio_debug	int
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"*** ftpGlobfree(%p)\n"	*(char)
,	O
pglob	*(struct(long,*(*(char)),long,int,*((*(void))->(void)),*((*(void))->(*(struct`))),*((*(char))->(*(void))),*((*(char),*(struct`))->(int)),*((*(char),*(struct`))->(int))))
)	O
;	O
if	O
(	O
pglob	*(struct(long,*(*(char)),long,int,*((*(void))->(void)),*((*(void))->(*(struct`))),*((*(char))->(*(void))),*((*(char),*(struct`))->(int)),*((*(char),*(struct`))->(int))))
->	O
gl_offs	long
==	O
-	O
1	int
)	O
xfree	O
(	O
pglob	*(struct(long,*(*(char)),long,int,*((*(void))->(void)),*((*(void))->(*(struct`))),*((*(char))->(*(void))),*((*(char),*(struct`))->(int)),*((*(char),*(struct`))->(int))))
->	O
gl_pathv	*(*(char))
)	O
;	O
}	O
int	O
Stat	(*(char),*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))))->(int)
(	O
const	O
char	O
*	O
path	*(char)
,	O
struct	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
*	O
st	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
)	O
{	O
const	O
char	O
*	O
lpath	*(char)
;	O
int	O
ut	int
=	O
urlPath	(*(char),*(*(char)))->(int)
(	O
path	*(char)
,	O
&	O
lpath	*(char)
)	O
;	O
if	O
(	O
_rpmio_debug	int
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"*** Stat(%s,%p)\n"	*(char)
,	O
path	*(char)
,	O
st	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
)	O
;	O
switch	O
(	O
ut	int
)	O
{	O
case	O
URL_IS_FTP	int
:	O
return	O
ftpStat	(*(char),*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))))->(int)
(	O
path	*(char)
,	O
st	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
)	O
;	O
break	O
;	O
case	O
URL_IS_HTTP	int
:	O
case	O
URL_IS_PATH	int
:	O
path	*(char)
=	O
lpath	*(char)
;	O
case	O
URL_IS_UNKNOWN	int
:	O
break	O
;	O
case	O
URL_IS_DASH	int
:	O
default	O
:	O
return	O
-	O
2	int
;	O
break	O
;	O
}	O
return	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
(	O
path	*(char)
,	O
st	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
)	O
;	O
}	O
int	O
Lstat	(*(char),*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))))->(int)
(	O
const	O
char	O
*	O
path	*(char)
,	O
struct	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
*	O
st	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
)	O
{	O
const	O
char	O
*	O
lpath	*(char)
;	O
int	O
ut	int
=	O
urlPath	(*(char),*(*(char)))->(int)
(	O
path	*(char)
,	O
&	O
lpath	*(char)
)	O
;	O
if	O
(	O
_rpmio_debug	int
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"*** Lstat(%s,%p)\n"	*(char)
,	O
path	*(char)
,	O
st	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
)	O
;	O
switch	O
(	O
ut	int
)	O
{	O
case	O
URL_IS_FTP	int
:	O
return	O
ftpLstat	(*(char),*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))))->(int)
(	O
path	*(char)
,	O
st	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
)	O
;	O
break	O
;	O
case	O
URL_IS_HTTP	int
:	O
case	O
URL_IS_PATH	int
:	O
path	*(char)
=	O
lpath	*(char)
;	O
case	O
URL_IS_UNKNOWN	int
:	O
break	O
;	O
case	O
URL_IS_DASH	int
:	O
default	O
:	O
return	O
-	O
2	int
;	O
break	O
;	O
}	O
return	O
lstat	(*(char),*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))))->(int)
(	O
path	*(char)
,	O
st	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
)	O
;	O
}	O
int	O
Readlink	(*(char),*(char),long)->(int)
(	O
const	O
char	O
*	O
path	*(char)
,	O
char	O
*	O
buf	*(char)
,	O
size_t	long
bufsiz	long
)	O
{	O
const	O
char	O
*	O
lpath	*(char)
;	O
int	O
ut	int
=	O
urlPath	(*(char),*(*(char)))->(int)
(	O
path	*(char)
,	O
&	O
lpath	*(char)
)	O
;	O
switch	O
(	O
ut	int
)	O
{	O
case	O
URL_IS_FTP	int
:	O
return	O
ftpReadlink	(*(char),*(char),long)->(int)
(	O
path	*(char)
,	O
buf	*(char)
,	O
bufsiz	long
)	O
;	O
break	O
;	O
case	O
URL_IS_HTTP	int
:	O
case	O
URL_IS_PATH	int
:	O
path	*(char)
=	O
lpath	*(char)
;	O
case	O
URL_IS_UNKNOWN	int
:	O
break	O
;	O
case	O
URL_IS_DASH	int
:	O
default	O
:	O
return	O
-	O
2	int
;	O
break	O
;	O
}	O
return	O
readlink	(*(char),*(char),long)->(long)
(	O
path	*(char)
,	O
buf	*(char)
,	O
bufsiz	long
)	O
;	O
}	O
int	O
Access	(*(char),int)->(int)
(	O
const	O
char	O
*	O
path	*(char)
,	O
int	O
amode	int
)	O
{	O
const	O
char	O
*	O
lpath	*(char)
;	O
int	O
ut	int
=	O
urlPath	(*(char),*(*(char)))->(int)
(	O
path	*(char)
,	O
&	O
lpath	*(char)
)	O
;	O
if	O
(	O
_rpmio_debug	int
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"*** Access(%s,%d)\n"	*(char)
,	O
path	*(char)
,	O
amode	int
)	O
;	O
switch	O
(	O
ut	int
)	O
{	O
case	O
URL_IS_FTP	int
:	O
case	O
URL_IS_HTTP	int
:	O
case	O
URL_IS_PATH	int
:	O
path	*(char)
=	O
lpath	*(char)
;	O
case	O
URL_IS_UNKNOWN	int
:	O
break	O
;	O
case	O
URL_IS_DASH	int
:	O
default	O
:	O
return	O
-	O
2	int
;	O
break	O
;	O
}	O
return	O
access	(*(char),int)->(int)
(	O
path	*(char)
,	O
amode	int
)	O
;	O
}	O
int	O
Glob	(*(char),int,(*(char),int)->(int),*(struct(long,*(*(char)),long,int,*((*`)->(void)),*((*`)->(*`)),*((*`)->(*`)),*((*`,*`)->(int)),*((*`,*`)->(int)))))->(int)
(	O
const	O
char	O
*	O
path	*(char)
,	O
int	O
flags	int
,	O
int	O
errfunc	(*(char),int)->(int)
(	O
const	O
char	O
*	O
epath	*(char)
,	O
int	O
eerrno	int
)	O
,	O
glob_t	struct(long,*(*(char)),long,int,*((*(void))->(void)),*((*(void))->(*(struct(long,long,short,char,array(char))))),*((*(char))->(*(void))),*((*(char),*(struct(long,long,long,int,int,int,int,long,long,long,long,struct`,struct`,struct`,array(long))))->(int)),*((*(char),*(struct(long,long,long,int,int,int,int,long,long,long,long,struct`,struct`,struct`,array(long))))->(int)))
*	O
pglob	*(struct(long,*(*(char)),long,int,*((*(void))->(void)),*((*(void))->(*(struct`))),*((*(char))->(*(void))),*((*(char),*(struct`))->(int)),*((*(char),*(struct`))->(int))))
)	O
{	O
const	O
char	O
*	O
lpath	*(char)
;	O
int	O
ut	int
=	O
urlPath	(*(char),*(*(char)))->(int)
(	O
path	*(char)
,	O
&	O
lpath	*(char)
)	O
;	O
if	O
(	O
_rpmio_debug	int
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"*** Glob(%s,0x%x,%p,%p)\n"	*(char)
,	O
path	*(char)
,	O
flags	int
,	O
errfunc	(*(char),int)->(int)
,	O
pglob	*(struct(long,*(*(char)),long,int,*((*(void))->(void)),*((*(void))->(*(struct`))),*((*(char))->(*(void))),*((*(char),*(struct`))->(int)),*((*(char),*(struct`))->(int))))
)	O
;	O
switch	O
(	O
ut	int
)	O
{	O
case	O
URL_IS_FTP	int
:	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"fatal error in rpmio.c:%d\n"	*(char)
,	O
__LINE__	O
)	O
;	O
exit	(int)->(void)
(	O
222	int
)	O
;	O
break	O
;	O
case	O
URL_IS_HTTP	int
:	O
case	O
URL_IS_PATH	int
:	O
path	*(char)
=	O
lpath	*(char)
;	O
case	O
URL_IS_UNKNOWN	int
:	O
break	O
;	O
case	O
URL_IS_DASH	int
:	O
default	O
:	O
return	O
-	O
2	int
;	O
break	O
;	O
}	O
return	O
glob	(*(char),int,*((*(char),int)->(int)),*(struct(long,*(*(char)),long,int,*((*`)->(void)),*((*`)->(*`)),*((*`)->(*`)),*((*`,*`)->(int)),*((*`,*`)->(int)))))->(int)
(	O
path	*(char)
,	O
flags	int
,	O
errfunc	(*(char),int)->(int)
,	O
pglob	*(struct(long,*(*(char)),long,int,*((*(void))->(void)),*((*(void))->(*(struct`))),*((*(char))->(*(void))),*((*(char),*(struct`))->(int)),*((*(char),*(struct`))->(int))))
)	O
;	O
}	O
void	O
Globfree	(*(struct(long,*(*(char)),long,int,*((*`)->(void)),*((*`)->(*`)),*((*`)->(*`)),*((*`,*`)->(int)),*((*`,*`)->(int)))))->(void)
(	O
glob_t	struct(long,*(*(char)),long,int,*((*(void))->(void)),*((*(void))->(*(struct(long,long,short,char,array(char))))),*((*(char))->(*(void))),*((*(char),*(struct(long,long,long,int,int,int,int,long,long,long,long,struct`,struct`,struct`,array(long))))->(int)),*((*(char),*(struct(long,long,long,int,int,int,int,long,long,long,long,struct`,struct`,struct`,array(long))))->(int)))
*	O
pglob	*(struct(long,*(*(char)),long,int,*((*(void))->(void)),*((*(void))->(*(struct`))),*((*(char))->(*(void))),*((*(char),*(struct`))->(int)),*((*(char),*(struct`))->(int))))
)	O
{	O
if	O
(	O
_rpmio_debug	int
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"*** Globfree(%p)\n"	*(char)
,	O
pglob	*(struct(long,*(*(char)),long,int,*((*(void))->(void)),*((*(void))->(*(struct`))),*((*(char))->(*(void))),*((*(char),*(struct`))->(int)),*((*(char),*(struct`))->(int))))
)	O
;	O
if	O
(	O
pglob	*(struct(long,*(*(char)),long,int,*((*(void))->(void)),*((*(void))->(*(struct`))),*((*(char))->(*(void))),*((*(char),*(struct`))->(int)),*((*(char),*(struct`))->(int))))
->	O
gl_offs	long
==	O
-	O
1	int
)	O
ftpGlobfree	(*(struct(long,*(*(char)),long,int,*((*`)->(void)),*((*`)->(*`)),*((*`)->(*`)),*((*`,*`)->(int)),*((*`,*`)->(int)))))->(void)
(	O
pglob	*(struct(long,*(*(char)),long,int,*((*(void))->(void)),*((*(void))->(*(struct`))),*((*(char))->(*(void))),*((*(char),*(struct`))->(int)),*((*(char),*(struct`))->(int))))
)	O
;	O
else	O
globfree	(*(struct(long,*(*(char)),long,int,*((*`)->(void)),*((*`)->(*`)),*((*`)->(*`)),*((*`,*`)->(int)),*((*`,*`)->(int)))))->(void)
(	O
pglob	*(struct(long,*(*(char)),long,int,*((*(void))->(void)),*((*(void))->(*(struct`))),*((*(char))->(*(void))),*((*(char),*(struct`))->(int)),*((*(char),*(struct`))->(int))))
)	O
;	O
}	O
DIR	struct
*	O
Opendir	(*(char))->(*(struct))
(	O
const	O
char	O
*	O
path	*(char)
)	O
{	O
const	O
char	O
*	O
lpath	*(char)
;	O
int	O
ut	int
=	O
urlPath	(*(char),*(*(char)))->(int)
(	O
path	*(char)
,	O
&	O
lpath	*(char)
)	O
;	O
if	O
(	O
_rpmio_debug	int
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"*** Opendir(%s)\n"	*(char)
,	O
path	*(char)
)	O
;	O
switch	O
(	O
ut	int
)	O
{	O
case	O
URL_IS_FTP	int
:	O
case	O
URL_IS_HTTP	int
:	O
case	O
URL_IS_PATH	int
:	O
path	*(char)
=	O
lpath	*(char)
;	O
case	O
URL_IS_UNKNOWN	int
:	O
break	O
;	O
case	O
URL_IS_DASH	int
:	O
default	O
:	O
return	O
NULL	O
;	O
break	O
;	O
}	O
return	O
opendir	(*(char))->(*(struct))
(	O
path	*(char)
)	O
;	O
}	O
struct	O
dirent	struct(long,long,short,char,array(char))
*	O
Readdir	(*(struct))->(*(struct(long,long,short,char,array(char))))
(	O
DIR	struct
*	O
dir	*(struct)
)	O
{	O
if	O
(	O
_rpmio_debug	int
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"*** Readdir(%p)\n"	*(char)
,	O
dir	*(struct)
)	O
;	O
return	O
readdir	(*(struct))->(*(struct(long,long,short,char,array(char))))
(	O
dir	*(struct)
)	O
;	O
}	O
int	O
Closedir	(*(struct))->(int)
(	O
DIR	struct
*	O
dir	*(struct)
)	O
{	O
if	O
(	O
_rpmio_debug	int
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"*** Closedir(%p)\n"	*(char)
,	O
dir	*(struct)
)	O
;	O
return	O
closedir	(*(struct))->(int)
(	O
dir	*(struct)
)	O
;	O
}	O
static	O
struct	O
FDIO_s	struct(*((*(void),*(char),long)->(long)),*((*(void),*(char),long)->(long)),*((*(void),long,int)->(int)),*((*(void))->(int)),*((*(void),*(char),*(char),int)->(*(struct))),*((*(struct),*(char),*(char),int)->(*(struct))),*((*(char),*(char),int)->(*(struct))),*((*(void))->(int)),*((*(char),int,int)->(*(struct))),*((*(char),*(char))->(*(struct))),*((*(struct))->(*(void))),*((*(struct))->(int)),*((*(char),int)->(int)),*((*(char))->(int)),*((*(char))->(int)),*((*(char),*(char))->(int)),*((*(char))->(int)))
fpio_s	struct(*((*(void),*(char),long)->(long)),*((*(void),*(char),long)->(long)),*((*(void),long,int)->(int)),*((*(void))->(int)),*((*(void),*(char),*(char),int)->(*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*`,int,long,long,int,int,int,*`,*`,int,int,long,long)))),*((*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*`,int,long,long,int,int,int,*`,*`,int,int,long,long)),*(char),*(char),int)->(*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*`,int,long,long,int,int,int,*`,*`,int,int,long,long)))),*((*(char),*(char),int)->(*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*`,int,long,long,int,int,int,*`,*`,int,int,long,long)))),*((*(void))->(int)),*((*(char),int,int)->(*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*`,int,long,long,int,int,int,*`,*`,int,int,long,long)))),*((*(char),*(char))->(*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*`,int,long,long,int,int,int,*`,*`,int,int,long,long)))),*((*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*`,int,long,long,int,int,int,*`,*`,int,int,long,long)))->(*(void))),*((*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*`,int,long,long,int,int,int,*`,*`,int,int,long,long)))->(int)),*((*(char),int)->(int)),*((*(char))->(int)),*((*(char))->(int)),*((*(char),*(char))->(int)),*((*(char))->(int)))
=	O
{	O
ufdRead	(*(void),*(char),long)->(long)
,	O
ufdWrite	(*(void),*(char),long)->(long)
,	O
fdSeek	(*(void),long,int)->(int)
,	O
ufdClose	(*(void))->(int)
,	O
XfdLink	(*(void),*(char),*(char),int)->(*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*(void),int,long,long,int,int,int,*(void),*(struct(struct`,struct`,array(struct(int,long,long)))),int,int,long,long)))
,	O
XfdFree	(*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*(void),int,long,long,int,int,int,*(void),*(struct(struct`,struct`,array(struct(int,long,long)))),int,int,long,long)),*(char),*(char),int)->(*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*(void),int,long,long,int,int,int,*(void),*(struct(struct`,struct`,array(struct(int,long,long)))),int,int,long,long)))
,	O
XfdNew	(*(char),*(char),int)->(*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*(void),int,long,long,int,int,int,*(void),*(struct(struct`,struct`,array(struct(int,long,long)))),int,int,long,long)))
,	O
fdFileno	(*(void))->(int)
,	O
ufdOpen	(*(char),int,int)->(*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*(void),int,long,long,int,int,int,*(void),*(struct(struct`,struct`,array(struct(int,long,long)))),int,int,long,long)))
,	O
NULL	O
,	O
fdGetFp	(*(struct))->(*(void))
,	O
NULL	O
,	O
Mkdir	(*(char),int)->(int)
,	O
Chdir	(*(char))->(int)
,	O
Rmdir	(*(char))->(int)
,	O
Rename	(*(char),*(char))->(int)
,	O
Unlink	(*(char))->(int)
}	O
;	O
FDIO_t	*(struct)
fpio	*(struct(*((*(void),*(char),long)->(long)),*((*(void),*(char),long)->(long)),*((*(void),long,int)->(int)),*((*(void))->(int)),*((*(void),*(char),*(char),int)->(*(struct`))),*((*(struct`),*(char),*(char),int)->(*(struct`))),*((*(char),*(char),int)->(*(struct`))),*((*(void))->(int)),*((*(char),int,int)->(*(struct`))),*((*(char),*(char))->(*(struct`))),*((*(struct`))->(*(void))),*((*(struct`))->(int)),*((*(char),int)->(int)),*((*(char))->(int)),*((*(char))->(int)),*((*(char),*(char))->(int)),*((*(char))->(int))))
=	O
&	O
fpio_s	struct(*((*(void),*(char),long)->(long)),*((*(void),*(char),long)->(long)),*((*(void),long,int)->(int)),*((*(void))->(int)),*((*(void),*(char),*(char),int)->(*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*`,int,long,long,int,int,int,*`,*`,int,int,long,long)))),*((*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*`,int,long,long,int,int,int,*`,*`,int,int,long,long)),*(char),*(char),int)->(*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*`,int,long,long,int,int,int,*`,*`,int,int,long,long)))),*((*(char),*(char),int)->(*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*`,int,long,long,int,int,int,*`,*`,int,int,long,long)))),*((*(void))->(int)),*((*(char),int,int)->(*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*`,int,long,long,int,int,int,*`,*`,int,int,long,long)))),*((*(char),*(char))->(*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*`,int,long,long,int,int,int,*`,*`,int,int,long,long)))),*((*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*`,int,long,long,int,int,int,*`,*`,int,int,long,long)))->(*(void))),*((*(struct(int,int,int,int,array(struct(*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)),int,*`,int,long,long,int,int,int,*`,*`,int,int,long,long)))->(int)),*((*(char),int)->(int)),*((*(char))->(int)),*((*(char))->(int)),*((*(char),*(char))->(int)),*((*(char))->(int)))
;	O
