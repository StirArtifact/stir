static	O
int	O
estimate_corrmc	(*(struct(*((*`,long,*`)->(double)),long,*(void))),array(double),array(double),long,long,*(struct(*(struct(*`,long,long,long,*`,*`,*`)),*(void))),*(struct(long,long,double,double,double,long,int,int,int,*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(long),*(long))),*(double),*(double),array(double),array(double),array(double))->(int)
(	O
gsl_monte_function	struct(*((*(double),long,*(void))->(double)),long,*(void))
*	O
f	*(double)
,	O
const	O
double	O
xl	array(double)
[	O
]	O
,	O
const	O
double	O
xu	array(double)
[	O
]	O
,	O
size_t	long
dim	long
,	O
size_t	long
calls	long
,	O
gsl_rng	struct(*(struct(*(char),long,long,long,*((*`,long)->(void)),*((*`)->(long)),*((*`)->(double)))),*(void))
*	O
r	*(struct(*(struct(*(char),long,long,long,*((*`,long)->(void)),*((*`)->(long)),*((*`)->(double)))),*(void)))
,	O
gsl_monte_miser_state	struct(long,long,double,double,double,long,int,int,int,*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(long),*(long))
*	O
state	*(int)
,	O
double	O
*	O
result	*(double)
,	O
double	O
*	O
abserr	*(double)
,	O
const	O
double	O
xmid	*(double)
[	O
]	O
,	O
double	O
sigma_l	*(double)
[	O
]	O
,	O
double	O
sigma_r	*(double)
[	O
]	O
)	O
;	O
int	O
gsl_monte_miser_integrate	(*(struct(*((*`,long,*`)->(double)),long,*(void))),array(double),array(double),long,long,*(struct(*(struct(*`,long,long,long,*`,*`,*`)),*(void))),*(struct(long,long,double,double,double,long,int,int,int,*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(long),*(long))),*(double),*(double))->(int)
(	O
gsl_monte_function	struct(*((*(double),long,*(void))->(double)),long,*(void))
*	O
f	*(double)
,	O
const	O
double	O
xl	array(double)
[	O
]	O
,	O
const	O
double	O
xu	array(double)
[	O
]	O
,	O
size_t	long
dim	long
,	O
size_t	long
calls	long
,	O
gsl_rng	struct(*(struct(*(char),long,long,long,*((*`,long)->(void)),*((*`)->(long)),*((*`)->(double)))),*(void))
*	O
r	*(struct(*(struct(*(char),long,long,long,*((*`,long)->(void)),*((*`)->(long)),*((*`)->(double)))),*(void)))
,	O
gsl_monte_miser_state	struct(long,long,double,double,double,long,int,int,int,*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(long),*(long))
*	O
state	*(int)
,	O
double	O
*	O
result	*(double)
,	O
double	O
*	O
abserr	*(double)
)	O
{	O
size_t	long
n	int
,	O
estimate_calls	long
,	O
calls_l	long
,	O
calls_r	long
;	O
const	O
size_t	long
min_calls	long
=	O
state	*(int)
->	O
min_calls	long
;	O
size_t	long
i	long
;	O
size_t	long
i_bisect	long
;	O
int	O
found_best	int
;	O
double	O
res_est	double
=	O
0	int
,	O
err_est	double
=	O
0	int
;	O
double	O
res_r	double
=	O
0	int
,	O
err_r	double
=	O
0	int
,	O
res_l	double
=	O
0	int
,	O
err_l	double
=	O
0	int
;	O
double	O
xbi_l	double
,	O
xbi_m	double
,	O
xbi_r	double
,	O
s	double
;	O
double	O
vol	double
;	O
double	O
weight_l	double
,	O
weight_r	double
;	O
double	O
*	O
x	double
=	O
state	*(int)
->	O
x	double
;	O
double	O
*	O
xmid	*(double)
=	O
state	*(int)
->	O
xmid	*(double)
;	O
double	O
*	O
sigma_l	*(double)
=	O
state	*(int)
->	O
sigma_l	*(double)
,	O
*	O
sigma_r	*(double)
=	O
state	*(int)
->	O
sigma_r	*(double)
;	O
if	O
(	O
dim	long
!=	O
state	*(int)
->	O
dim	long
)	O
{	O
GSL_ERROR	O
(	O
"number of dimensions must match allocated size"	*(char)
,	O
GSL_EINVAL	int
)	O
;	O
}	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
dim	long
;	O
i	long
++	O
)	O
{	O
if	O
(	O
xu	array(double)
[	O
i	long
]	O
<=	O
xl	array(double)
[	O
i	long
]	O
)	O
{	O
GSL_ERROR	O
(	O
"xu must be greater than xl"	*(char)
,	O
GSL_EINVAL	int
)	O
;	O
}	O
if	O
(	O
xu	array(double)
[	O
i	long
]	O
-	O
xl	array(double)
[	O
i	long
]	O
>	O
GSL_DBL_MAX	int
)	O
{	O
GSL_ERROR	O
(	O
"Range of integration is too large, please rescale"	*(char)
,	O
GSL_EINVAL	int
)	O
;	O
}	O
}	O
if	O
(	O
state	*(int)
->	O
alpha	double
<	O
0	int
)	O
{	O
GSL_ERROR	O
(	O
"alpha must be non-negative"	*(char)
,	O
GSL_EINVAL	int
)	O
;	O
}	O
vol	double
=	O
1	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
dim	long
;	O
i	long
++	O
)	O
{	O
vol	double
*=	O
xu	array(double)
[	O
i	long
]	O
-	O
xl	array(double)
[	O
i	long
]	O
;	O
}	O
if	O
(	O
calls	long
<	O
state	*(int)
->	O
min_calls_per_bisection	long
)	O
{	O
double	O
m	double
=	O
0.0	int
,	O
q	double
=	O
0.0	int
;	O
if	O
(	O
calls	long
<	O
2	int
)	O
{	O
GSL_ERROR	O
(	O
"insufficient calls for subvolume"	*(char)
,	O
GSL_EFAILED	int
)	O
;	O
}	O
for	O
(	O
n	int
=	O
0	int
;	O
n	int
<	O
calls	long
;	O
n	int
++	O
)	O
{	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
dim	long
;	O
i	long
++	O
)	O
{	O
x	double
[	O
i	long
]	O
=	O
xl	array(double)
[	O
i	long
]	O
+	O
gsl_rng_uniform_pos	(*(struct(*(struct(*`,long,long,long,*`,*`,*`)),*(void))))->(double)
(	O
r	*(struct(*(struct(*(char),long,long,long,*((*`,long)->(void)),*((*`)->(long)),*((*`)->(double)))),*(void)))
)	O
*	O
(	O
xu	array(double)
[	O
i	long
]	O
-	O
xl	array(double)
[	O
i	long
]	O
)	O
;	O
}	O
{	O
double	O
fval	double
=	O
GSL_MONTE_FN_EVAL	O
(	O
f	*(double)
,	O
x	double
)	O
;	O
double	O
d	double
=	O
fval	double
-	O
m	double
;	O
m	double
+=	O
d	double
/	O
(	O
n	int
+	O
1.0	int
)	O
;	O
q	double
+=	O
d	double
*	O
d	double
*	O
(	O
n	int
/	O
(	O
n	int
+	O
1.0	int
)	O
)	O
;	O
}	O
}	O
*	O
result	*(double)
=	O
vol	double
*	O
m	double
;	O
*	O
abserr	*(double)
=	O
vol	double
*	O
sqrt	(double)->(double)
(	O
q	double
/	O
(	O
calls	long
*	O
(	O
calls	long
-	O
1.0	int
)	O
)	O
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
estimate_calls	long
=	O
GSL_MAX	O
(	O
min_calls	long
,	O
calls	long
*	O
(	O
state	*(int)
->	O
estimate_frac	double
)	O
)	O
;	O
if	O
(	O
estimate_calls	long
<	O
4	int
*	O
dim	long
)	O
{	O
GSL_ERROR	O
(	O
"insufficient calls to sample all halfspaces"	*(char)
,	O
GSL_ESANITY	int
)	O
;	O
}	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
dim	long
;	O
i	long
++	O
)	O
{	O
s	double
=	O
(	O
gsl_rng_uniform	(*(struct(*(struct(*`,long,long,long,*`,*`,*`)),*(void))))->(double)
(	O
r	*(struct(*(struct(*(char),long,long,long,*((*`,long)->(void)),*((*`)->(long)),*((*`)->(double)))),*(void)))
)	O
-	O
0.5	int
)	O
>=	O
0.0	int
?	O
state	*(int)
->	O
dither	double
:	O
-	O
state	*(int)
->	O
dither	double
;	O
state	*(int)
->	O
xmid	*(double)
[	O
i	long
]	O
=	O
(	O
0.5	int
+	O
s	double
)	O
*	O
xl	array(double)
[	O
i	long
]	O
+	O
(	O
0.5	int
-	O
s	double
)	O
*	O
xu	array(double)
[	O
i	long
]	O
;	O
}	O
estimate_corrmc	(*(struct(*((*`,long,*`)->(double)),long,*(void))),array(double),array(double),long,long,*(struct(*(struct(*`,long,long,long,*`,*`,*`)),*(void))),*(struct(long,long,double,double,double,long,int,int,int,*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(long),*(long))),*(double),*(double),array(double),array(double),array(double))->(int)
(	O
f	*(double)
,	O
xl	array(double)
,	O
xu	array(double)
,	O
dim	long
,	O
estimate_calls	long
,	O
r	*(struct(*(struct(*(char),long,long,long,*((*`,long)->(void)),*((*`)->(long)),*((*`)->(double)))),*(void)))
,	O
state	*(int)
,	O
&	O
res_est	double
,	O
&	O
err_est	double
,	O
xmid	*(double)
,	O
sigma_l	*(double)
,	O
sigma_r	*(double)
)	O
;	O
calls	long
-=	O
estimate_calls	long
;	O
{	O
double	O
best_var	double
=	O
GSL_DBL_MAX	int
;	O
double	O
beta	double
=	O
2.0	int
/	O
(	O
1.0	int
+	O
state	*(int)
->	O
alpha	double
)	O
;	O
found_best	int
=	O
0	int
;	O
i_bisect	long
=	O
0	int
;	O
weight_l	double
=	O
weight_r	double
=	O
1.0	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
dim	long
;	O
i	long
++	O
)	O
{	O
if	O
(	O
sigma_l	*(double)
[	O
i	long
]	O
>=	O
0	int
&&	O
sigma_r	*(double)
[	O
i	long
]	O
>=	O
0	int
)	O
{	O
double	O
var	double
=	O
pow	(double,double)->(double)
(	O
sigma_l	*(double)
[	O
i	long
]	O
,	O
beta	double
)	O
+	O
pow	(double,double)->(double)
(	O
sigma_r	*(double)
[	O
i	long
]	O
,	O
beta	double
)	O
;	O
if	O
(	O
var	double
<=	O
best_var	double
)	O
{	O
found_best	int
=	O
1	int
;	O
best_var	double
=	O
var	double
;	O
i_bisect	long
=	O
i	long
;	O
weight_l	double
=	O
pow	(double,double)->(double)
(	O
sigma_l	*(double)
[	O
i	long
]	O
,	O
beta	double
)	O
;	O
weight_r	double
=	O
pow	(double,double)->(double)
(	O
sigma_r	*(double)
[	O
i	long
]	O
,	O
beta	double
)	O
;	O
if	O
(	O
weight_l	double
==	O
0	int
&&	O
weight_r	double
==	O
0	int
)	O
{	O
weight_l	double
=	O
1	int
;	O
weight_r	double
=	O
1	int
;	O
}	O
}	O
}	O
else	O
{	O
if	O
(	O
sigma_l	*(double)
[	O
i	long
]	O
<	O
0	int
)	O
{	O
GSL_ERROR	O
(	O
"no points in left-half space!"	*(char)
,	O
GSL_ESANITY	int
)	O
;	O
}	O
if	O
(	O
sigma_r	*(double)
[	O
i	long
]	O
<	O
0	int
)	O
{	O
GSL_ERROR	O
(	O
"no points in right-half space!"	*(char)
,	O
GSL_ESANITY	int
)	O
;	O
}	O
}	O
}	O
}	O
if	O
(	O
!	O
found_best	int
)	O
{	O
i_bisect	long
=	O
gsl_rng_uniform_int	(*(struct(*(struct(*`,long,long,long,*`,*`,*`)),*(void))),long)->(long)
(	O
r	*(struct(*(struct(*(char),long,long,long,*((*`,long)->(void)),*((*`)->(long)),*((*`)->(double)))),*(void)))
,	O
dim	long
)	O
;	O
}	O
xbi_l	double
=	O
xl	array(double)
[	O
i_bisect	long
]	O
;	O
xbi_m	double
=	O
xmid	*(double)
[	O
i_bisect	long
]	O
;	O
xbi_r	double
=	O
xu	array(double)
[	O
i_bisect	long
]	O
;	O
{	O
double	O
fraction_l	double
=	O
fabs	(double)->(double)
(	O
(	O
xbi_m	double
-	O
xbi_l	double
)	O
/	O
(	O
xbi_r	double
-	O
xbi_l	double
)	O
)	O
;	O
double	O
fraction_r	double
=	O
1	int
-	O
fraction_l	double
;	O
double	O
a	double
=	O
fraction_l	double
*	O
weight_l	double
;	O
double	O
b	double
=	O
fraction_r	double
*	O
weight_r	double
;	O
calls_l	long
=	O
min_calls	long
+	O
(	O
calls	long
-	O
2	int
*	O
min_calls	long
)	O
*	O
a	double
/	O
(	O
a	double
+	O
b	double
)	O
;	O
calls_r	long
=	O
min_calls	long
+	O
(	O
calls	long
-	O
2	int
*	O
min_calls	long
)	O
*	O
b	double
/	O
(	O
a	double
+	O
b	double
)	O
;	O
}	O
{	O
int	O
status	int
;	O
double	O
*	O
xu_tmp	*(double)
=	O
(	O
double	O
*	O
)	O
malloc	(long)->(*(void))
(	O
dim	long
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
if	O
(	O
xu_tmp	*(double)
==	O
0	int
)	O
{	O
GSL_ERROR_VAL	O
(	O
"out of memory for left workspace"	*(char)
,	O
GSL_ENOMEM	int
,	O
0	int
)	O
;	O
}	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
dim	long
;	O
i	long
++	O
)	O
{	O
xu_tmp	*(double)
[	O
i	long
]	O
=	O
xu	array(double)
[	O
i	long
]	O
;	O
}	O
xu_tmp	*(double)
[	O
i_bisect	long
]	O
=	O
xbi_m	double
;	O
status	int
=	O
gsl_monte_miser_integrate	(*(struct(*((*`,long,*`)->(double)),long,*(void))),array(double),array(double),long,long,*(struct(*(struct(*`,long,long,long,*`,*`,*`)),*(void))),*(struct(long,long,double,double,double,long,int,int,int,*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(long),*(long))),*(double),*(double))->(int)
(	O
f	*(double)
,	O
xl	array(double)
,	O
xu_tmp	*(double)
,	O
dim	long
,	O
calls_l	long
,	O
r	*(struct(*(struct(*(char),long,long,long,*((*`,long)->(void)),*((*`)->(long)),*((*`)->(double)))),*(void)))
,	O
state	*(int)
,	O
&	O
res_l	double
,	O
&	O
err_l	double
)	O
;	O
free	(*(void))->(void)
(	O
xu_tmp	*(double)
)	O
;	O
if	O
(	O
status	int
!=	O
GSL_SUCCESS	int
)	O
{	O
return	O
status	int
;	O
}	O
}	O
{	O
int	O
status	int
;	O
double	O
*	O
xl_tmp	*(double)
=	O
(	O
double	O
*	O
)	O
malloc	(long)->(*(void))
(	O
dim	long
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
if	O
(	O
xl_tmp	*(double)
==	O
0	int
)	O
{	O
GSL_ERROR_VAL	O
(	O
"out of memory for right workspace"	*(char)
,	O
GSL_ENOMEM	int
,	O
0	int
)	O
;	O
}	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
dim	long
;	O
i	long
++	O
)	O
{	O
xl_tmp	*(double)
[	O
i	long
]	O
=	O
xl	array(double)
[	O
i	long
]	O
;	O
}	O
xl_tmp	*(double)
[	O
i_bisect	long
]	O
=	O
xbi_m	double
;	O
status	int
=	O
gsl_monte_miser_integrate	(*(struct(*((*`,long,*`)->(double)),long,*(void))),array(double),array(double),long,long,*(struct(*(struct(*`,long,long,long,*`,*`,*`)),*(void))),*(struct(long,long,double,double,double,long,int,int,int,*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(long),*(long))),*(double),*(double))->(int)
(	O
f	*(double)
,	O
xl_tmp	*(double)
,	O
xu	array(double)
,	O
dim	long
,	O
calls_r	long
,	O
r	*(struct(*(struct(*(char),long,long,long,*((*`,long)->(void)),*((*`)->(long)),*((*`)->(double)))),*(void)))
,	O
state	*(int)
,	O
&	O
res_r	double
,	O
&	O
err_r	double
)	O
;	O
free	(*(void))->(void)
(	O
xl_tmp	*(double)
)	O
;	O
if	O
(	O
status	int
!=	O
GSL_SUCCESS	int
)	O
{	O
return	O
status	int
;	O
}	O
}	O
*	O
result	*(double)
=	O
res_l	double
+	O
res_r	double
;	O
*	O
abserr	*(double)
=	O
sqrt	(double)->(double)
(	O
err_l	double
*	O
err_l	double
+	O
err_r	double
*	O
err_r	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
gsl_monte_miser_state	struct(long,long,double,double,double,long,int,int,int,*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(long),*(long))
*	O
gsl_monte_miser_alloc	(long)->(*(struct(long,long,double,double,double,long,int,int,int,*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(long),*(long))))
(	O
size_t	long
dim	long
)	O
{	O
gsl_monte_miser_state	struct(long,long,double,double,double,long,int,int,int,*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(long),*(long))
*	O
s	double
=	O
(	O
gsl_monte_miser_state	struct(long,long,double,double,double,long,int,int,int,*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(long),*(long))
*	O
)	O
malloc	(long)->(*(void))
(	O
sizeof	O
(	O
gsl_monte_miser_state	struct(long,long,double,double,double,long,int,int,int,*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(long),*(long))
)	O
)	O
;	O
if	O
(	O
s	double
==	O
0	int
)	O
{	O
GSL_ERROR_VAL	O
(	O
"failed to allocate space for miser state struct"	*(char)
,	O
GSL_ENOMEM	int
,	O
0	int
)	O
;	O
}	O
s	double
->	O
x	double
=	O
(	O
double	O
*	O
)	O
malloc	(long)->(*(void))
(	O
dim	long
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
if	O
(	O
s	double
->	O
x	double
==	O
0	int
)	O
{	O
free	(*(void))->(void)
(	O
s	double
)	O
;	O
GSL_ERROR_VAL	O
(	O
"failed to allocate space for x"	*(char)
,	O
GSL_ENOMEM	int
,	O
0	int
)	O
;	O
}	O
s	double
->	O
xmid	*(double)
=	O
(	O
double	O
*	O
)	O
malloc	(long)->(*(void))
(	O
dim	long
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
if	O
(	O
s	double
->	O
xmid	*(double)
==	O
0	int
)	O
{	O
free	(*(void))->(void)
(	O
s	double
->	O
x	double
)	O
;	O
free	(*(void))->(void)
(	O
s	double
)	O
;	O
GSL_ERROR_VAL	O
(	O
"failed to allocate space for xmid"	*(char)
,	O
GSL_ENOMEM	int
,	O
0	int
)	O
;	O
}	O
s	double
->	O
sigma_l	*(double)
=	O
(	O
double	O
*	O
)	O
malloc	(long)->(*(void))
(	O
dim	long
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
if	O
(	O
s	double
->	O
sigma_l	*(double)
==	O
0	int
)	O
{	O
free	(*(void))->(void)
(	O
s	double
->	O
xmid	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
s	double
->	O
x	double
)	O
;	O
free	(*(void))->(void)
(	O
s	double
)	O
;	O
GSL_ERROR_VAL	O
(	O
"failed to allocate space for sigma_l"	*(char)
,	O
GSL_ENOMEM	int
,	O
0	int
)	O
;	O
}	O
s	double
->	O
sigma_r	*(double)
=	O
(	O
double	O
*	O
)	O
malloc	(long)->(*(void))
(	O
dim	long
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
if	O
(	O
s	double
->	O
sigma_r	*(double)
==	O
0	int
)	O
{	O
free	(*(void))->(void)
(	O
s	double
->	O
sigma_l	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
s	double
->	O
xmid	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
s	double
->	O
x	double
)	O
;	O
free	(*(void))->(void)
(	O
s	double
)	O
;	O
GSL_ERROR_VAL	O
(	O
"failed to allocate space for sigma_r"	*(char)
,	O
GSL_ENOMEM	int
,	O
0	int
)	O
;	O
}	O
s	double
->	O
fmax_l	*(double)
=	O
(	O
double	O
*	O
)	O
malloc	(long)->(*(void))
(	O
dim	long
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
if	O
(	O
s	double
->	O
fmax_l	*(double)
==	O
0	int
)	O
{	O
free	(*(void))->(void)
(	O
s	double
->	O
sigma_r	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
s	double
->	O
sigma_l	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
s	double
->	O
xmid	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
s	double
->	O
x	double
)	O
;	O
free	(*(void))->(void)
(	O
s	double
)	O
;	O
GSL_ERROR_VAL	O
(	O
"failed to allocate space for fmax_l"	*(char)
,	O
GSL_ENOMEM	int
,	O
0	int
)	O
;	O
}	O
s	double
->	O
fmax_r	*(double)
=	O
(	O
double	O
*	O
)	O
malloc	(long)->(*(void))
(	O
dim	long
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
if	O
(	O
s	double
->	O
fmax_r	*(double)
==	O
0	int
)	O
{	O
free	(*(void))->(void)
(	O
s	double
->	O
fmax_l	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
s	double
->	O
sigma_r	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
s	double
->	O
sigma_l	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
s	double
->	O
xmid	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
s	double
->	O
x	double
)	O
;	O
free	(*(void))->(void)
(	O
s	double
)	O
;	O
GSL_ERROR_VAL	O
(	O
"failed to allocate space for fmax_r"	*(char)
,	O
GSL_ENOMEM	int
,	O
0	int
)	O
;	O
}	O
s	double
->	O
fmin_l	*(double)
=	O
(	O
double	O
*	O
)	O
malloc	(long)->(*(void))
(	O
dim	long
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
if	O
(	O
s	double
->	O
fmin_l	*(double)
==	O
0	int
)	O
{	O
free	(*(void))->(void)
(	O
s	double
->	O
fmax_r	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
s	double
->	O
fmax_l	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
s	double
->	O
sigma_r	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
s	double
->	O
sigma_l	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
s	double
->	O
xmid	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
s	double
->	O
x	double
)	O
;	O
free	(*(void))->(void)
(	O
s	double
)	O
;	O
GSL_ERROR_VAL	O
(	O
"failed to allocate space for fmin_l"	*(char)
,	O
GSL_ENOMEM	int
,	O
0	int
)	O
;	O
}	O
s	double
->	O
fmin_r	*(double)
=	O
(	O
double	O
*	O
)	O
malloc	(long)->(*(void))
(	O
dim	long
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
if	O
(	O
s	double
->	O
fmin_r	*(double)
==	O
0	int
)	O
{	O
free	(*(void))->(void)
(	O
s	double
->	O
fmin_l	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
s	double
->	O
fmax_r	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
s	double
->	O
fmax_l	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
s	double
->	O
sigma_r	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
s	double
->	O
sigma_l	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
s	double
->	O
xmid	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
s	double
->	O
x	double
)	O
;	O
free	(*(void))->(void)
(	O
s	double
)	O
;	O
GSL_ERROR_VAL	O
(	O
"failed to allocate space for fmin_r"	*(char)
,	O
GSL_ENOMEM	int
,	O
0	int
)	O
;	O
}	O
s	double
->	O
fsum_l	*(double)
=	O
(	O
double	O
*	O
)	O
malloc	(long)->(*(void))
(	O
dim	long
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
if	O
(	O
s	double
->	O
fsum_l	*(double)
==	O
0	int
)	O
{	O
free	(*(void))->(void)
(	O
s	double
->	O
fmin_r	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
s	double
->	O
fmin_l	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
s	double
->	O
fmax_r	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
s	double
->	O
fmax_l	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
s	double
->	O
sigma_r	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
s	double
->	O
sigma_l	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
s	double
->	O
xmid	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
s	double
->	O
x	double
)	O
;	O
free	(*(void))->(void)
(	O
s	double
)	O
;	O
GSL_ERROR_VAL	O
(	O
"failed to allocate space for fsum_l"	*(char)
,	O
GSL_ENOMEM	int
,	O
0	int
)	O
;	O
}	O
s	double
->	O
fsum_r	*(double)
=	O
(	O
double	O
*	O
)	O
malloc	(long)->(*(void))
(	O
dim	long
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
if	O
(	O
s	double
->	O
fsum_r	*(double)
==	O
0	int
)	O
{	O
free	(*(void))->(void)
(	O
s	double
->	O
fsum_l	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
s	double
->	O
fmin_r	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
s	double
->	O
fmin_l	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
s	double
->	O
fmax_r	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
s	double
->	O
fmax_l	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
s	double
->	O
sigma_r	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
s	double
->	O
sigma_l	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
s	double
->	O
xmid	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
s	double
->	O
x	double
)	O
;	O
free	(*(void))->(void)
(	O
s	double
)	O
;	O
GSL_ERROR_VAL	O
(	O
"failed to allocate space for fsum_r"	*(char)
,	O
GSL_ENOMEM	int
,	O
0	int
)	O
;	O
}	O
s	double
->	O
fsum2_l	*(double)
=	O
(	O
double	O
*	O
)	O
malloc	(long)->(*(void))
(	O
dim	long
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
if	O
(	O
s	double
->	O
fsum2_l	*(double)
==	O
0	int
)	O
{	O
free	(*(void))->(void)
(	O
s	double
->	O
fsum_r	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
s	double
->	O
fsum_l	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
s	double
->	O
fmin_r	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
s	double
->	O
fmin_l	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
s	double
->	O
fmax_r	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
s	double
->	O
fmax_l	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
s	double
->	O
sigma_r	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
s	double
->	O
sigma_l	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
s	double
->	O
xmid	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
s	double
->	O
x	double
)	O
;	O
free	(*(void))->(void)
(	O
s	double
)	O
;	O
GSL_ERROR_VAL	O
(	O
"failed to allocate space for fsum2_l"	*(char)
,	O
GSL_ENOMEM	int
,	O
0	int
)	O
;	O
}	O
s	double
->	O
fsum2_r	*(double)
=	O
(	O
double	O
*	O
)	O
malloc	(long)->(*(void))
(	O
dim	long
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
if	O
(	O
s	double
->	O
fsum2_r	*(double)
==	O
0	int
)	O
{	O
free	(*(void))->(void)
(	O
s	double
->	O
fsum2_l	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
s	double
->	O
fsum_r	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
s	double
->	O
fsum_l	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
s	double
->	O
fmin_r	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
s	double
->	O
fmin_l	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
s	double
->	O
fmax_r	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
s	double
->	O
fmax_l	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
s	double
->	O
sigma_r	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
s	double
->	O
sigma_l	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
s	double
->	O
xmid	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
s	double
->	O
x	double
)	O
;	O
free	(*(void))->(void)
(	O
s	double
)	O
;	O
GSL_ERROR_VAL	O
(	O
"failed to allocate space for fsum2_r"	*(char)
,	O
GSL_ENOMEM	int
,	O
0	int
)	O
;	O
}	O
s	double
->	O
hits_r	*(long)
=	O
(	O
size_t	long
*	O
)	O
malloc	(long)->(*(void))
(	O
dim	long
*	O
sizeof	O
(	O
size_t	long
)	O
)	O
;	O
if	O
(	O
s	double
->	O
hits_r	*(long)
==	O
0	int
)	O
{	O
free	(*(void))->(void)
(	O
s	double
->	O
fsum2_r	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
s	double
->	O
fsum2_l	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
s	double
->	O
fsum_r	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
s	double
->	O
fsum_l	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
s	double
->	O
fmin_r	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
s	double
->	O
fmin_l	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
s	double
->	O
fmax_r	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
s	double
->	O
fmax_l	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
s	double
->	O
sigma_r	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
s	double
->	O
sigma_l	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
s	double
->	O
xmid	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
s	double
->	O
x	double
)	O
;	O
free	(*(void))->(void)
(	O
s	double
)	O
;	O
GSL_ERROR_VAL	O
(	O
"failed to allocate space for fsum2_r"	*(char)
,	O
GSL_ENOMEM	int
,	O
0	int
)	O
;	O
}	O
s	double
->	O
hits_l	*(long)
=	O
(	O
size_t	long
*	O
)	O
malloc	(long)->(*(void))
(	O
dim	long
*	O
sizeof	O
(	O
size_t	long
)	O
)	O
;	O
if	O
(	O
s	double
->	O
hits_l	*(long)
==	O
0	int
)	O
{	O
free	(*(void))->(void)
(	O
s	double
->	O
hits_r	*(long)
)	O
;	O
free	(*(void))->(void)
(	O
s	double
->	O
fsum2_r	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
s	double
->	O
fsum2_l	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
s	double
->	O
fsum_r	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
s	double
->	O
fsum_l	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
s	double
->	O
fmin_r	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
s	double
->	O
fmin_l	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
s	double
->	O
fmax_r	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
s	double
->	O
fmax_l	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
s	double
->	O
sigma_r	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
s	double
->	O
sigma_l	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
s	double
->	O
xmid	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
s	double
->	O
x	double
)	O
;	O
free	(*(void))->(void)
(	O
s	double
)	O
;	O
GSL_ERROR_VAL	O
(	O
"failed to allocate space for fsum2_r"	*(char)
,	O
GSL_ENOMEM	int
,	O
0	int
)	O
;	O
}	O
s	double
->	O
dim	long
=	O
dim	long
;	O
gsl_monte_miser_init	(*(struct(long,long,double,double,double,long,int,int,int,*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(long),*(long))))->(int)
(	O
s	double
)	O
;	O
return	O
s	double
;	O
}	O
int	O
gsl_monte_miser_init	(*(struct(long,long,double,double,double,long,int,int,int,*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(long),*(long))))->(int)
(	O
gsl_monte_miser_state	struct(long,long,double,double,double,long,int,int,int,*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(long),*(long))
*	O
s	double
)	O
{	O
s	double
->	O
min_calls	long
=	O
16	int
*	O
s	double
->	O
dim	long
;	O
s	double
->	O
min_calls_per_bisection	long
=	O
32	int
*	O
s	double
->	O
min_calls	long
;	O
s	double
->	O
estimate_frac	double
=	O
0.1	int
;	O
s	double
->	O
alpha	double
=	O
2.0	int
;	O
s	double
->	O
dither	double
=	O
0.0	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
void	O
gsl_monte_miser_free	(*(struct(long,long,double,double,double,long,int,int,int,*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(long),*(long))))->(void)
(	O
gsl_monte_miser_state	struct(long,long,double,double,double,long,int,int,int,*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(long),*(long))
*	O
s	double
)	O
{	O
RETURN_IF_NULL	O
(	O
s	double
)	O
;	O
free	(*(void))->(void)
(	O
s	double
->	O
hits_r	*(long)
)	O
;	O
free	(*(void))->(void)
(	O
s	double
->	O
hits_l	*(long)
)	O
;	O
free	(*(void))->(void)
(	O
s	double
->	O
fsum2_r	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
s	double
->	O
fsum2_l	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
s	double
->	O
fsum_r	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
s	double
->	O
fsum_l	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
s	double
->	O
fmin_r	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
s	double
->	O
fmin_l	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
s	double
->	O
fmax_r	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
s	double
->	O
fmax_l	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
s	double
->	O
sigma_r	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
s	double
->	O
sigma_l	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
s	double
->	O
xmid	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
s	double
->	O
x	double
)	O
;	O
free	(*(void))->(void)
(	O
s	double
)	O
;	O
}	O
void	O
gsl_monte_miser_params_get	(*(struct(long,long,double,double,double,long,int,int,int,*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(long),*(long))),*(struct(double,long,long,double,double)))->(void)
(	O
const	O
gsl_monte_miser_state	struct(long,long,double,double,double,long,int,int,int,*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(long),*(long))
*	O
s	double
,	O
gsl_monte_miser_params	struct(double,long,long,double,double)
*	O
p	*(struct(double,long,long,double,double))
)	O
{	O
p	*(struct(double,long,long,double,double))
->	O
estimate_frac	double
=	O
s	double
->	O
estimate_frac	double
;	O
p	*(struct(double,long,long,double,double))
->	O
min_calls	long
=	O
s	double
->	O
min_calls	long
;	O
p	*(struct(double,long,long,double,double))
->	O
min_calls_per_bisection	long
=	O
s	double
->	O
min_calls_per_bisection	long
;	O
p	*(struct(double,long,long,double,double))
->	O
alpha	double
=	O
s	double
->	O
alpha	double
;	O
p	*(struct(double,long,long,double,double))
->	O
dither	double
=	O
s	double
->	O
dither	double
;	O
}	O
void	O
gsl_monte_miser_params_set	(*(struct(long,long,double,double,double,long,int,int,int,*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(long),*(long))),*(struct(double,long,long,double,double)))->(void)
(	O
gsl_monte_miser_state	struct(long,long,double,double,double,long,int,int,int,*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(long),*(long))
*	O
s	double
,	O
const	O
gsl_monte_miser_params	struct(double,long,long,double,double)
*	O
p	*(struct(double,long,long,double,double))
)	O
{	O
s	double
->	O
estimate_frac	double
=	O
p	*(struct(double,long,long,double,double))
->	O
estimate_frac	double
;	O
s	double
->	O
min_calls	long
=	O
p	*(struct(double,long,long,double,double))
->	O
min_calls	long
;	O
s	double
->	O
min_calls_per_bisection	long
=	O
p	*(struct(double,long,long,double,double))
->	O
min_calls_per_bisection	long
;	O
s	double
->	O
alpha	double
=	O
p	*(struct(double,long,long,double,double))
->	O
alpha	double
;	O
s	double
->	O
dither	double
=	O
p	*(struct(double,long,long,double,double))
->	O
dither	double
;	O
}	O
static	O
int	O
estimate_corrmc	(*(struct(*((*`,long,*`)->(double)),long,*(void))),array(double),array(double),long,long,*(struct(*(struct(*`,long,long,long,*`,*`,*`)),*(void))),*(struct(long,long,double,double,double,long,int,int,int,*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(long),*(long))),*(double),*(double),array(double),array(double),array(double))->(int)
(	O
gsl_monte_function	struct(*((*(double),long,*(void))->(double)),long,*(void))
*	O
f	*(double)
,	O
const	O
double	O
xl	array(double)
[	O
]	O
,	O
const	O
double	O
xu	array(double)
[	O
]	O
,	O
size_t	long
dim	long
,	O
size_t	long
calls	long
,	O
gsl_rng	struct(*(struct(*(char),long,long,long,*((*`,long)->(void)),*((*`)->(long)),*((*`)->(double)))),*(void))
*	O
r	*(struct(*(struct(*(char),long,long,long,*((*`,long)->(void)),*((*`)->(long)),*((*`)->(double)))),*(void)))
,	O
gsl_monte_miser_state	struct(long,long,double,double,double,long,int,int,int,*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(long),*(long))
*	O
state	*(int)
,	O
double	O
*	O
result	*(double)
,	O
double	O
*	O
abserr	*(double)
,	O
const	O
double	O
xmid	*(double)
[	O
]	O
,	O
double	O
sigma_l	*(double)
[	O
]	O
,	O
double	O
sigma_r	*(double)
[	O
]	O
)	O
{	O
size_t	long
i	long
,	O
n	int
;	O
double	O
*	O
x	double
=	O
state	*(int)
->	O
x	double
;	O
double	O
*	O
fsum_l	*(double)
=	O
state	*(int)
->	O
fsum_l	*(double)
;	O
double	O
*	O
fsum_r	*(double)
=	O
state	*(int)
->	O
fsum_r	*(double)
;	O
double	O
*	O
fsum2_l	*(double)
=	O
state	*(int)
->	O
fsum2_l	*(double)
;	O
double	O
*	O
fsum2_r	*(double)
=	O
state	*(int)
->	O
fsum2_r	*(double)
;	O
size_t	long
*	O
hits_l	*(long)
=	O
state	*(int)
->	O
hits_l	*(long)
;	O
size_t	long
*	O
hits_r	*(long)
=	O
state	*(int)
->	O
hits_r	*(long)
;	O
double	O
m	double
=	O
0.0	int
,	O
q	double
=	O
0.0	int
;	O
double	O
vol	double
=	O
1.0	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
dim	long
;	O
i	long
++	O
)	O
{	O
vol	double
*=	O
xu	array(double)
[	O
i	long
]	O
-	O
xl	array(double)
[	O
i	long
]	O
;	O
hits_l	*(long)
[	O
i	long
]	O
=	O
hits_r	*(long)
[	O
i	long
]	O
=	O
0	int
;	O
fsum_l	*(double)
[	O
i	long
]	O
=	O
fsum_r	*(double)
[	O
i	long
]	O
=	O
0.0	int
;	O
fsum2_l	*(double)
[	O
i	long
]	O
=	O
fsum2_r	*(double)
[	O
i	long
]	O
=	O
0.0	int
;	O
sigma_l	*(double)
[	O
i	long
]	O
=	O
sigma_r	*(double)
[	O
i	long
]	O
=	O
-	O
1	int
;	O
}	O
for	O
(	O
n	int
=	O
0	int
;	O
n	int
<	O
calls	long
;	O
n	int
++	O
)	O
{	O
double	O
fval	double
;	O
unsigned	O
int	O
j	int
=	O
(	O
n	int
/	O
2	int
)	O
%	O
dim	long
;	O
unsigned	O
int	O
side	int
=	O
(	O
n	int
%	O
2	int
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
dim	long
;	O
i	long
++	O
)	O
{	O
double	O
z	double
=	O
gsl_rng_uniform_pos	(*(struct(*(struct(*`,long,long,long,*`,*`,*`)),*(void))))->(double)
(	O
r	*(struct(*(struct(*(char),long,long,long,*((*`,long)->(void)),*((*`)->(long)),*((*`)->(double)))),*(void)))
)	O
;	O
if	O
(	O
i	long
!=	O
j	int
)	O
{	O
x	double
[	O
i	long
]	O
=	O
xl	array(double)
[	O
i	long
]	O
+	O
z	double
*	O
(	O
xu	array(double)
[	O
i	long
]	O
-	O
xl	array(double)
[	O
i	long
]	O
)	O
;	O
}	O
else	O
{	O
if	O
(	O
side	int
==	O
0	int
)	O
{	O
x	double
[	O
i	long
]	O
=	O
xmid	*(double)
[	O
i	long
]	O
+	O
z	double
*	O
(	O
xu	array(double)
[	O
i	long
]	O
-	O
xmid	*(double)
[	O
i	long
]	O
)	O
;	O
}	O
else	O
{	O
x	double
[	O
i	long
]	O
=	O
xl	array(double)
[	O
i	long
]	O
+	O
z	double
*	O
(	O
xmid	*(double)
[	O
i	long
]	O
-	O
xl	array(double)
[	O
i	long
]	O
)	O
;	O
}	O
}	O
}	O
fval	double
=	O
GSL_MONTE_FN_EVAL	O
(	O
f	*(double)
,	O
x	double
)	O
;	O
{	O
double	O
d	double
=	O
fval	double
-	O
m	double
;	O
m	double
+=	O
d	double
/	O
(	O
n	int
+	O
1.0	int
)	O
;	O
q	double
+=	O
d	double
*	O
d	double
*	O
(	O
n	int
/	O
(	O
n	int
+	O
1.0	int
)	O
)	O
;	O
}	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
dim	long
;	O
i	long
++	O
)	O
{	O
if	O
(	O
x	double
[	O
i	long
]	O
<=	O
xmid	*(double)
[	O
i	long
]	O
)	O
{	O
fsum_l	*(double)
[	O
i	long
]	O
+=	O
fval	double
;	O
fsum2_l	*(double)
[	O
i	long
]	O
+=	O
fval	double
*	O
fval	double
;	O
hits_l	*(long)
[	O
i	long
]	O
++	O
;	O
}	O
else	O
{	O
fsum_r	*(double)
[	O
i	long
]	O
+=	O
fval	double
;	O
fsum2_r	*(double)
[	O
i	long
]	O
+=	O
fval	double
*	O
fval	double
;	O
hits_r	*(long)
[	O
i	long
]	O
++	O
;	O
}	O
}	O
}	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
dim	long
;	O
i	long
++	O
)	O
{	O
double	O
fraction_l	double
=	O
(	O
xmid	*(double)
[	O
i	long
]	O
-	O
xl	array(double)
[	O
i	long
]	O
)	O
/	O
(	O
xu	array(double)
[	O
i	long
]	O
-	O
xl	array(double)
[	O
i	long
]	O
)	O
;	O
if	O
(	O
hits_l	*(long)
[	O
i	long
]	O
>	O
0	int
)	O
{	O
fsum_l	*(double)
[	O
i	long
]	O
/=	O
hits_l	*(long)
[	O
i	long
]	O
;	O
sigma_l	*(double)
[	O
i	long
]	O
=	O
sqrt	(double)->(double)
(	O
fsum2_l	*(double)
[	O
i	long
]	O
-	O
fsum_l	*(double)
[	O
i	long
]	O
*	O
fsum_l	*(double)
[	O
i	long
]	O
/	O
hits_l	*(long)
[	O
i	long
]	O
)	O
;	O
sigma_l	*(double)
[	O
i	long
]	O
*=	O
fraction_l	double
*	O
vol	double
/	O
hits_l	*(long)
[	O
i	long
]	O
;	O
}	O
if	O
(	O
hits_r	*(long)
[	O
i	long
]	O
>	O
0	int
)	O
{	O
fsum_r	*(double)
[	O
i	long
]	O
/=	O
hits_r	*(long)
[	O
i	long
]	O
;	O
sigma_r	*(double)
[	O
i	long
]	O
=	O
sqrt	(double)->(double)
(	O
fsum2_r	*(double)
[	O
i	long
]	O
-	O
fsum_r	*(double)
[	O
i	long
]	O
*	O
fsum_r	*(double)
[	O
i	long
]	O
/	O
hits_r	*(long)
[	O
i	long
]	O
)	O
;	O
sigma_r	*(double)
[	O
i	long
]	O
*=	O
(	O
1	int
-	O
fraction_l	double
)	O
*	O
vol	double
/	O
hits_r	*(long)
[	O
i	long
]	O
;	O
}	O
}	O
*	O
result	*(double)
=	O
vol	double
*	O
m	double
;	O
if	O
(	O
calls	long
<	O
2	int
)	O
{	O
*	O
abserr	*(double)
=	O
GSL_POSINF	O
;	O
}	O
else	O
{	O
*	O
abserr	*(double)
=	O
vol	double
*	O
sqrt	(double)->(double)
(	O
q	double
/	O
(	O
calls	long
*	O
(	O
calls	long
-	O
1.0	int
)	O
)	O
)	O
;	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
