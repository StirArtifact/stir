int	O
grecs_assert_value_type	(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)),union(*(struct`),*(char),struct(long,*`)))),int,*(struct(struct(*(char),int,int),struct(*(char),int,int))))->(int)
(	O
const	O
grecs_value_t	struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*(struct`),*(struct`),long,*((*`,*`)->(int)),*((*`)->(void)))),*(char),struct(long,*(*(struct`)))))
*	O
value	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
,	O
int	O
type	int
,	O
grecs_locus_t	struct(struct(*(char),int,int),struct(*(char),int,int))
*	O
refloc	*(struct(struct(*(char),int,int),struct(*(char),int,int)))
)	O
{	O
if	O
(	O
GRECS_VALUE_EMPTY_P	O
(	O
value	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
)	O
)	O
{	O
grecs_error	(*(struct(struct(*(char),int,int),struct(*(char),int,int))),int,*(char))->(void)
(	O
refloc	*(struct(struct(*(char),int,int),struct(*(char),int,int)))
,	O
0	int
,	O
_	O
(	O
"expected %s"	*(char)
)	O
,	O
gettext	(*(char))->(*(char))
(	O
grecs_value_type_string	(int)->(*(char))
(	O
type	int
)	O
)	O
)	O
;	O
return	O
1	int
;	O
}	O
if	O
(	O
value	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
->	O
type	int
!=	O
type	int
)	O
{	O
grecs_error	(*(struct(struct(*(char),int,int),struct(*(char),int,int))),int,*(char))->(void)
(	O
&	O
value	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
->	O
locus	struct(struct(*(char),int,int),struct(*(char),int,int))
,	O
0	int
,	O
_	O
(	O
"expected %s, but found %s"	*(char)
)	O
,	O
gettext	(*(char))->(*(char))
(	O
grecs_value_type_string	(int)->(*(char))
(	O
type	int
)	O
)	O
,	O
gettext	(*(char))->(*(char))
(	O
grecs_value_type_string	(int)->(*(char))
(	O
value	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
->	O
type	int
)	O
)	O
)	O
;	O
return	O
1	int
;	O
}	O
return	O
0	int
;	O
}	O
int	O
grecs_assert_scalar_stmt	(*(struct(struct(*(char),int,int),struct(*(char),int,int))),enum(int,int,int))->(int)
(	O
grecs_locus_t	struct(struct(*(char),int,int),struct(*(char),int,int))
*	O
locus	struct(struct(*(char),int,int),struct(*(char),int,int))
,	O
enum	O
grecs_callback_command	enum(int,int,int)
cmd	enum(int,int,int)
)	O
{	O
if	O
(	O
cmd	enum(int,int,int)
!=	O
grecs_callback_set_value	int
)	O
{	O
grecs_error	(*(struct(struct(*(char),int,int),struct(*(char),int,int))),int,*(char))->(void)
(	O
locus	struct(struct(*(char),int,int),struct(*(char),int,int))
,	O
0	int
,	O
_	O
(	O
"unexpected block statement"	*(char)
)	O
)	O
;	O
return	O
1	int
;	O
}	O
return	O
0	int
;	O
}	O
int	O
grecs_assert_node_value_type	(enum(int,int,int),*(struct(enum(int,int,int),struct(struct(*`,int,int),struct(*`,int,int)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(char),struct(struct(*`,int,int),struct(*`,int,int)),union(*(struct`),*(struct`)))),int)->(int)
(	O
enum	O
grecs_callback_command	enum(int,int,int)
cmd	enum(int,int,int)
,	O
grecs_node_t	struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct(*`,int,int),struct(*`,int,int)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(char),struct(struct(*`,int,int),struct(*`,int,int)),union(*(struct`),*(struct`)))),*(struct(enum(int,int,int),struct(struct(*`,int,int),struct(*`,int,int)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(char),struct(struct(*`,int,int),struct(*`,int,int)),union(*(struct`),*(struct`)))),*(struct(enum(int,int,int),struct(struct(*`,int,int),struct(*`,int,int)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(char),struct(struct(*`,int,int),struct(*`,int,int)),union(*(struct`),*(struct`)))),*(struct(enum(int,int,int),struct(struct(*`,int,int),struct(*`,int,int)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(char),struct(struct(*`,int,int),struct(*`,int,int)),union(*(struct`),*(struct`)))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct(struct`,struct`),union(*`,*`,struct`))),*(struct)))
*	O
node	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
,	O
int	O
type	int
)	O
{	O
return	O
grecs_assert_scalar_stmt	(*(struct(struct(*(char),int,int),struct(*(char),int,int))),enum(int,int,int))->(int)
(	O
&	O
node	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
->	O
locus	struct(struct(*(char),int,int),struct(*(char),int,int))
,	O
cmd	enum(int,int,int)
)	O
||	O
grecs_assert_value_type	(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)),union(*(struct`),*(char),struct(long,*`)))),int,*(struct(struct(*(char),int,int),struct(*(char),int,int))))->(int)
(	O
node	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
->	O
v	*(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)))))
.	O
value	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
,	O
type	int
,	O
&	O
node	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
->	O
locus	struct(struct(*(char),int,int),struct(*(char),int,int))
)	O
;	O
}	O
