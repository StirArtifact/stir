struct	O
sieve_variable	struct(*(char))
{	O
char	O
*	O
value	*(void)
;	O
}	O
;	O
char	O
*	O
mod_lower	(*(struct(struct(struct(*`,int,int),struct(*`,int,int)),int,*(struct),*(struct),*(struct),*(struct),*(*(char)),long,long,*(struct(int,int,*`,*`,*`)),long,long,*(struct(enum(int,int,int,int,int),*`,struct`,union`)),long,long,long,*(union(*`,*`,*`,*`,long,long,long,int,*`,int)),enum(int,int,int,int,int),long,long,*(struct),*(char),*(struct(int,int)),long,long,*(struct),*(char),long,long,long,*((*`,*`,*`)->(int)),int,array(struct(array(long),int,struct(array(long)))),*(struct),*(struct),long,*(struct),int,int,int,struct(struct(*`,int,int),struct(*`,int,int)),int,struct(struct(*`,int,int),struct(*`,int,int)),*(struct),*(struct),*((*`,*`,*`,array(struct(int,int,*(void),*(void))))->(void)),*(struct),*(char),*(void))),*(char))->(*(char))
(	O
mu_sieve_machine_t	*(struct)
mach	*(struct)
,	O
char	O
const	O
*	O
value	*(void)
)	O
{	O
char	O
*	O
newval	*(char)
=	O
mu_sieve_malloc	(*(struct),long)->(*(void))
(	O
mach	*(struct)
,	O
strlen	(*(char))->(long)
(	O
value	*(void)
)	O
+	O
1	int
)	O
;	O
char	O
*	O
p	*(char)
;	O
for	O
(	O
p	*(char)
=	O
newval	*(char)
;	O
*	O
value	*(void)
;	O
p	*(char)
++	O
,	O
value	*(void)
++	O
)	O
*	O
p	*(char)
=	O
tolower	(int)->(int)
(	O
*	O
value	*(void)
)	O
;	O
*	O
p	*(char)
=	O
0	int
;	O
return	O
newval	*(char)
;	O
}	O
char	O
*	O
mod_upper	(*(struct(struct(struct(*`,int,int),struct(*`,int,int)),int,*(struct),*(struct),*(struct),*(struct),*(*(char)),long,long,*(struct(int,int,*`,*`,*`)),long,long,*(struct(enum(int,int,int,int,int),*`,struct`,union`)),long,long,long,*(union(*`,*`,*`,*`,long,long,long,int,*`,int)),enum(int,int,int,int,int),long,long,*(struct),*(char),*(struct(int,int)),long,long,*(struct),*(char),long,long,long,*((*`,*`,*`)->(int)),int,array(struct(array(long),int,struct(array(long)))),*(struct),*(struct),long,*(struct),int,int,int,struct(struct(*`,int,int),struct(*`,int,int)),int,struct(struct(*`,int,int),struct(*`,int,int)),*(struct),*(struct),*((*`,*`,*`,array(struct(int,int,*(void),*(void))))->(void)),*(struct),*(char),*(void))),*(char))->(*(char))
(	O
mu_sieve_machine_t	*(struct)
mach	*(struct)
,	O
char	O
const	O
*	O
value	*(void)
)	O
{	O
char	O
*	O
newval	*(char)
=	O
mu_sieve_malloc	(*(struct),long)->(*(void))
(	O
mach	*(struct)
,	O
strlen	(*(char))->(long)
(	O
value	*(void)
)	O
+	O
1	int
)	O
;	O
char	O
*	O
p	*(char)
;	O
for	O
(	O
p	*(char)
=	O
newval	*(char)
;	O
*	O
value	*(void)
;	O
p	*(char)
++	O
,	O
value	*(void)
++	O
)	O
*	O
p	*(char)
=	O
toupper	(int)->(int)
(	O
*	O
value	*(void)
)	O
;	O
*	O
p	*(char)
=	O
0	int
;	O
return	O
newval	*(char)
;	O
}	O
char	O
*	O
mod_lowerfirst	(*(struct(struct(struct(*`,int,int),struct(*`,int,int)),int,*(struct),*(struct),*(struct),*(struct),*(*(char)),long,long,*(struct(int,int,*`,*`,*`)),long,long,*(struct(enum(int,int,int,int,int),*`,struct`,union`)),long,long,long,*(union(*`,*`,*`,*`,long,long,long,int,*`,int)),enum(int,int,int,int,int),long,long,*(struct),*(char),*(struct(int,int)),long,long,*(struct),*(char),long,long,long,*((*`,*`,*`)->(int)),int,array(struct(array(long),int,struct(array(long)))),*(struct),*(struct),long,*(struct),int,int,int,struct(struct(*`,int,int),struct(*`,int,int)),int,struct(struct(*`,int,int),struct(*`,int,int)),*(struct),*(struct),*((*`,*`,*`,array(struct(int,int,*(void),*(void))))->(void)),*(struct),*(char),*(void))),*(char))->(*(char))
(	O
mu_sieve_machine_t	*(struct)
mach	*(struct)
,	O
char	O
const	O
*	O
value	*(void)
)	O
{	O
char	O
*	O
newval	*(char)
=	O
mu_sieve_strdup	(*(struct),*(char))->(*(char))
(	O
mach	*(struct)
,	O
value	*(void)
)	O
;	O
*	O
newval	*(char)
=	O
tolower	(int)->(int)
(	O
*	O
newval	*(char)
)	O
;	O
return	O
newval	*(char)
;	O
}	O
char	O
*	O
mod_upperfirst	(*(struct(struct(struct(*`,int,int),struct(*`,int,int)),int,*(struct),*(struct),*(struct),*(struct),*(*(char)),long,long,*(struct(int,int,*`,*`,*`)),long,long,*(struct(enum(int,int,int,int,int),*`,struct`,union`)),long,long,long,*(union(*`,*`,*`,*`,long,long,long,int,*`,int)),enum(int,int,int,int,int),long,long,*(struct),*(char),*(struct(int,int)),long,long,*(struct),*(char),long,long,long,*((*`,*`,*`)->(int)),int,array(struct(array(long),int,struct(array(long)))),*(struct),*(struct),long,*(struct),int,int,int,struct(struct(*`,int,int),struct(*`,int,int)),int,struct(struct(*`,int,int),struct(*`,int,int)),*(struct),*(struct),*((*`,*`,*`,array(struct(int,int,*(void),*(void))))->(void)),*(struct),*(char),*(void))),*(char))->(*(char))
(	O
mu_sieve_machine_t	*(struct)
mach	*(struct)
,	O
char	O
const	O
*	O
value	*(void)
)	O
{	O
char	O
*	O
newval	*(char)
=	O
mu_sieve_strdup	(*(struct),*(char))->(*(char))
(	O
mach	*(struct)
,	O
value	*(void)
)	O
;	O
*	O
newval	*(char)
=	O
toupper	(int)->(int)
(	O
*	O
newval	*(char)
)	O
;	O
return	O
newval	*(char)
;	O
}	O
char	O
*	O
mod_quotewildcard	(*(struct(struct(struct(*`,int,int),struct(*`,int,int)),int,*(struct),*(struct),*(struct),*(struct),*(*(char)),long,long,*(struct(int,int,*`,*`,*`)),long,long,*(struct(enum(int,int,int,int,int),*`,struct`,union`)),long,long,long,*(union(*`,*`,*`,*`,long,long,long,int,*`,int)),enum(int,int,int,int,int),long,long,*(struct),*(char),*(struct(int,int)),long,long,*(struct),*(char),long,long,long,*((*`,*`,*`)->(int)),int,array(struct(array(long),int,struct(array(long)))),*(struct),*(struct),long,*(struct),int,int,int,struct(struct(*`,int,int),struct(*`,int,int)),int,struct(struct(*`,int,int),struct(*`,int,int)),*(struct),*(struct),*((*`,*`,*`,array(struct(int,int,*(void),*(void))))->(void)),*(struct),*(char),*(void))),*(char))->(*(char))
(	O
mu_sieve_machine_t	*(struct)
mach	*(struct)
,	O
char	O
const	O
*	O
value	*(void)
)	O
{	O
size_t	long
len	long
;	O
char	O
*	O
newval	*(char)
;	O
char	O
const	O
*	O
p	*(char)
;	O
char	O
*	O
q	*(char)
;	O
len	long
=	O
0	int
;	O
for	O
(	O
p	*(char)
=	O
value	*(void)
;	O
*	O
p	*(char)
;	O
p	*(char)
++	O
)	O
{	O
switch	O
(	O
*	O
p	*(char)
)	O
{	O
case	O
'*'	O
:	O
case	O
'?'	O
:	O
case	O
'\\'	O
:	O
len	long
+=	O
2	int
;	O
break	O
;	O
default	O
:	O
len	long
++	O
;	O
}	O
}	O
newval	*(char)
=	O
mu_sieve_malloc	(*(struct),long)->(*(void))
(	O
mach	*(struct)
,	O
len	long
+	O
1	int
)	O
;	O
for	O
(	O
p	*(char)
=	O
value	*(void)
,	O
q	*(char)
=	O
newval	*(char)
;	O
*	O
p	*(char)
;	O
)	O
{	O
switch	O
(	O
*	O
p	*(char)
)	O
{	O
case	O
'*'	O
:	O
case	O
'?'	O
:	O
case	O
'\\'	O
:	O
*	O
q	*(char)
++	O
=	O
'\\'	O
;	O
}	O
*	O
q	*(char)
++	O
=	O
*	O
p	*(char)
++	O
;	O
}	O
*	O
q	*(char)
=	O
0	int
;	O
return	O
newval	*(char)
;	O
}	O
char	O
*	O
mod_length	(*(struct(struct(struct(*`,int,int),struct(*`,int,int)),int,*(struct),*(struct),*(struct),*(struct),*(*(char)),long,long,*(struct(int,int,*`,*`,*`)),long,long,*(struct(enum(int,int,int,int,int),*`,struct`,union`)),long,long,long,*(union(*`,*`,*`,*`,long,long,long,int,*`,int)),enum(int,int,int,int,int),long,long,*(struct),*(char),*(struct(int,int)),long,long,*(struct),*(char),long,long,long,*((*`,*`,*`)->(int)),int,array(struct(array(long),int,struct(array(long)))),*(struct),*(struct),long,*(struct),int,int,int,struct(struct(*`,int,int),struct(*`,int,int)),int,struct(struct(*`,int,int),struct(*`,int,int)),*(struct),*(struct),*((*`,*`,*`,array(struct(int,int,*(void),*(void))))->(void)),*(struct),*(char),*(void))),*(char))->(*(char))
(	O
mu_sieve_machine_t	*(struct)
mach	*(struct)
,	O
char	O
const	O
*	O
value	*(void)
)	O
{	O
char	O
*	O
newval	*(char)
,	O
*	O
p	*(char)
;	O
int	O
rc	int
=	O
mu_asprintf	(*(*(char)),*(char))->(int)
(	O
&	O
newval	*(char)
,	O
"%zu"	*(char)
,	O
strlen	(*(char))->(long)
(	O
value	*(void)
)	O
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_diag_funcall	(int,*(char),*(char),int)->(void)
(	O
MU_DIAG_ERROR	O
,	O
"mu_asprintf"	*(char)
,	O
NULL	O
,	O
rc	int
)	O
;	O
mu_sieve_abort	(*(struct))->(void)
(	O
mach	*(struct)
)	O
;	O
}	O
p	*(char)
=	O
mu_sieve_strdup	(*(struct),*(char))->(*(char))
(	O
mach	*(struct)
,	O
newval	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
newval	*(char)
)	O
;	O
return	O
p	*(char)
;	O
}	O
static	O
mu_sieve_tag_def_t	struct(*(char),enum(int,int,int,int,int))
set_tags	array(struct(*(char),enum(int,int,int,int,int)))
[	O
]	O
=	O
{	O
{	O
"lower"	*(char)
,	O
SVT_VOID	int
}	O
,	O
{	O
"upper"	*(char)
,	O
SVT_VOID	int
}	O
,	O
{	O
"lowerfirst"	*(char)
,	O
SVT_VOID	int
}	O
,	O
{	O
"upperfirst"	*(char)
,	O
SVT_VOID	int
}	O
,	O
{	O
"quotewildcard"	*(char)
,	O
SVT_VOID	int
}	O
,	O
{	O
"length"	*(char)
,	O
SVT_VOID	int
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
struct	O
modprec	struct(*(char),int,*((*(struct(struct(struct`,struct`),int,*(struct`),*(struct`),*(struct`),*(struct`),*(*`),long,long,*(struct`),long,long,*(struct`),long,long,long,*(union`),enum(int,int,int,int,int),long,long,*(struct`),*(char),*(struct`),long,long,*(struct`),*(char),long,long,long,*((*`,*`,*`)->(int)),int,array(struct(array(long),int,struct(array(long)))),*(struct`),*(struct`),long,*(struct`),int,int,int,struct(struct`,struct`),int,struct(struct`,struct`),*(struct`),*(struct`),*((*`,*`,*`,array(struct(int,int,*(void),*(void))))->(void)),*(struct`),*(char),*(void))),*(char))->(*(char))))
{	O
char	O
*	O
name	*(char)
;	O
unsigned	O
prec	*(*(struct(int,*(char),int,int,int,*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*(void),*((*`,*`,int)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,int)->(int)))))
;	O
char	O
*	O
(	O
*	O
modify	*((*(struct(struct(struct`,struct`),int,*(struct`),*(struct`),*(struct`),*(struct`),*(*`),long,long,*(struct`),long,long,*(struct`),long,long,long,*(union`),enum(int,int,int,int,int),long,long,*(struct`),*(char),*(struct`),long,long,*(struct`),*(char),long,long,long,*((*`,*`,*`)->(int)),int,array(struct(array(long),int,struct(array(long)))),*(struct`),*(struct`),long,*(struct`),int,int,int,struct(struct`,struct`),int,struct(struct`,struct`),*(struct`),*(struct`),*((*`,*`,*`,array(struct(int,int,*(void),*(void))))->(void)),*(struct`),*(char),*(void))),*(char))->(*(char)))
)	O
(	O
mu_sieve_machine_t	*(struct)
mach	*(struct)
,	O
char	O
const	O
*	O
value	*(void)
)	O
;	O
}	O
;	O
static	O
struct	O
modprec	struct(*(char),int,*((*(struct(struct(struct`,struct`),int,*(struct`),*(struct`),*(struct`),*(struct`),*(*`),long,long,*(struct`),long,long,*(struct`),long,long,long,*(union`),enum(int,int,int,int,int),long,long,*(struct`),*(char),*(struct`),long,long,*(struct`),*(char),long,long,long,*((*`,*`,*`)->(int)),int,array(struct(array(long),int,struct(array(long)))),*(struct`),*(struct`),long,*(struct`),int,int,int,struct(struct`,struct`),int,struct(struct`,struct`),*(struct`),*(struct`),*((*`,*`,*`,array(struct(int,int,*(void),*(void))))->(void)),*(struct`),*(char),*(void))),*(char))->(*(char))))
modprec	struct(*(char),int,*((*(struct(struct(struct`,struct`),int,*(struct`),*(struct`),*(struct`),*(struct`),*(*`),long,long,*(struct`),long,long,*(struct`),long,long,long,*(union`),enum(int,int,int,int,int),long,long,*(struct`),*(char),*(struct`),long,long,*(struct`),*(char),long,long,long,*((*`,*`,*`)->(int)),int,array(struct(array(long),int,struct(array(long)))),*(struct`),*(struct`),long,*(struct`),int,int,int,struct(struct`,struct`),int,struct(struct`,struct`),*(struct`),*(struct`),*((*`,*`,*`,array(struct(int,int,*(void),*(void))))->(void)),*(struct`),*(char),*(void))),*(char))->(*(char))))
[	O
]	O
=	O
{	O
{	O
"lower"	*(char)
,	O
40	int
,	O
mod_lower	(*(struct(struct(struct(*`,int,int),struct(*`,int,int)),int,*(struct),*(struct),*(struct),*(struct),*(*(char)),long,long,*(struct(int,int,*`,*`,*`)),long,long,*(struct(enum(int,int,int,int,int),*`,struct`,union`)),long,long,long,*(union(*`,*`,*`,*`,long,long,long,int,*`,int)),enum(int,int,int,int,int),long,long,*(struct),*(char),*(struct(int,int)),long,long,*(struct),*(char),long,long,long,*((*`,*`,*`)->(int)),int,array(struct(array(long),int,struct(array(long)))),*(struct),*(struct),long,*(struct),int,int,int,struct(struct(*`,int,int),struct(*`,int,int)),int,struct(struct(*`,int,int),struct(*`,int,int)),*(struct),*(struct),*((*`,*`,*`,array(struct(int,int,*(void),*(void))))->(void)),*(struct),*(char),*(void))),*(char))->(*(char))
}	O
,	O
{	O
"upper"	*(char)
,	O
40	int
,	O
mod_upper	(*(struct(struct(struct(*`,int,int),struct(*`,int,int)),int,*(struct),*(struct),*(struct),*(struct),*(*(char)),long,long,*(struct(int,int,*`,*`,*`)),long,long,*(struct(enum(int,int,int,int,int),*`,struct`,union`)),long,long,long,*(union(*`,*`,*`,*`,long,long,long,int,*`,int)),enum(int,int,int,int,int),long,long,*(struct),*(char),*(struct(int,int)),long,long,*(struct),*(char),long,long,long,*((*`,*`,*`)->(int)),int,array(struct(array(long),int,struct(array(long)))),*(struct),*(struct),long,*(struct),int,int,int,struct(struct(*`,int,int),struct(*`,int,int)),int,struct(struct(*`,int,int),struct(*`,int,int)),*(struct),*(struct),*((*`,*`,*`,array(struct(int,int,*(void),*(void))))->(void)),*(struct),*(char),*(void))),*(char))->(*(char))
}	O
,	O
{	O
"lowerfirst"	*(char)
,	O
30	int
,	O
mod_lowerfirst	(*(struct(struct(struct(*`,int,int),struct(*`,int,int)),int,*(struct),*(struct),*(struct),*(struct),*(*(char)),long,long,*(struct(int,int,*`,*`,*`)),long,long,*(struct(enum(int,int,int,int,int),*`,struct`,union`)),long,long,long,*(union(*`,*`,*`,*`,long,long,long,int,*`,int)),enum(int,int,int,int,int),long,long,*(struct),*(char),*(struct(int,int)),long,long,*(struct),*(char),long,long,long,*((*`,*`,*`)->(int)),int,array(struct(array(long),int,struct(array(long)))),*(struct),*(struct),long,*(struct),int,int,int,struct(struct(*`,int,int),struct(*`,int,int)),int,struct(struct(*`,int,int),struct(*`,int,int)),*(struct),*(struct),*((*`,*`,*`,array(struct(int,int,*(void),*(void))))->(void)),*(struct),*(char),*(void))),*(char))->(*(char))
}	O
,	O
{	O
"upperfirst"	*(char)
,	O
30	int
,	O
mod_upperfirst	(*(struct(struct(struct(*`,int,int),struct(*`,int,int)),int,*(struct),*(struct),*(struct),*(struct),*(*(char)),long,long,*(struct(int,int,*`,*`,*`)),long,long,*(struct(enum(int,int,int,int,int),*`,struct`,union`)),long,long,long,*(union(*`,*`,*`,*`,long,long,long,int,*`,int)),enum(int,int,int,int,int),long,long,*(struct),*(char),*(struct(int,int)),long,long,*(struct),*(char),long,long,long,*((*`,*`,*`)->(int)),int,array(struct(array(long),int,struct(array(long)))),*(struct),*(struct),long,*(struct),int,int,int,struct(struct(*`,int,int),struct(*`,int,int)),int,struct(struct(*`,int,int),struct(*`,int,int)),*(struct),*(struct),*((*`,*`,*`,array(struct(int,int,*(void),*(void))))->(void)),*(struct),*(char),*(void))),*(char))->(*(char))
}	O
,	O
{	O
"quotewildcard"	*(char)
,	O
20	int
,	O
mod_quotewildcard	(*(struct(struct(struct(*`,int,int),struct(*`,int,int)),int,*(struct),*(struct),*(struct),*(struct),*(*(char)),long,long,*(struct(int,int,*`,*`,*`)),long,long,*(struct(enum(int,int,int,int,int),*`,struct`,union`)),long,long,long,*(union(*`,*`,*`,*`,long,long,long,int,*`,int)),enum(int,int,int,int,int),long,long,*(struct),*(char),*(struct(int,int)),long,long,*(struct),*(char),long,long,long,*((*`,*`,*`)->(int)),int,array(struct(array(long),int,struct(array(long)))),*(struct),*(struct),long,*(struct),int,int,int,struct(struct(*`,int,int),struct(*`,int,int)),int,struct(struct(*`,int,int),struct(*`,int,int)),*(struct),*(struct),*((*`,*`,*`,array(struct(int,int,*(void),*(void))))->(void)),*(struct),*(char),*(void))),*(char))->(*(char))
}	O
,	O
{	O
"length"	*(char)
,	O
10	int
,	O
mod_length	(*(struct(struct(struct(*`,int,int),struct(*`,int,int)),int,*(struct),*(struct),*(struct),*(struct),*(*(char)),long,long,*(struct(int,int,*`,*`,*`)),long,long,*(struct(enum(int,int,int,int,int),*`,struct`,union`)),long,long,long,*(union(*`,*`,*`,*`,long,long,long,int,*`,int)),enum(int,int,int,int,int),long,long,*(struct),*(char),*(struct(int,int)),long,long,*(struct),*(char),long,long,long,*((*`,*`,*`)->(int)),int,array(struct(array(long),int,struct(array(long)))),*(struct),*(struct),long,*(struct),int,int,int,struct(struct(*`,int,int),struct(*`,int,int)),int,struct(struct(*`,int,int),struct(*`,int,int)),*(struct),*(struct),*((*`,*`,*`,array(struct(int,int,*(void),*(void))))->(void)),*(struct),*(char),*(void))),*(char))->(*(char))
}	O
,	O
}	O
;	O
static	O
struct	O
modprec	struct(*(char),int,*((*(struct(struct(struct`,struct`),int,*(struct`),*(struct`),*(struct`),*(struct`),*(*`),long,long,*(struct`),long,long,*(struct`),long,long,long,*(union`),enum(int,int,int,int,int),long,long,*(struct`),*(char),*(struct`),long,long,*(struct`),*(char),long,long,long,*((*`,*`,*`)->(int)),int,array(struct(array(long),int,struct(array(long)))),*(struct`),*(struct`),long,*(struct`),int,int,int,struct(struct`,struct`),int,struct(struct`,struct`),*(struct`),*(struct`),*((*`,*`,*`,array(struct(int,int,*(void),*(void))))->(void)),*(struct`),*(char),*(void))),*(char))->(*(char))))
*	O
findprec	(*(char))->(*(struct(*(char),int,*((*`,*`)->(*`)))))
(	O
char	O
const	O
*	O
name	*(char)
)	O
{	O
int	O
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
MU_ARRAY_SIZE	O
(	O
modprec	struct(*(char),int,*((*(struct(struct(struct`,struct`),int,*(struct`),*(struct`),*(struct`),*(struct`),*(*`),long,long,*(struct`),long,long,*(struct`),long,long,long,*(union`),enum(int,int,int,int,int),long,long,*(struct`),*(char),*(struct`),long,long,*(struct`),*(char),long,long,long,*((*`,*`,*`)->(int)),int,array(struct(array(long),int,struct(array(long)))),*(struct`),*(struct`),long,*(struct`),int,int,int,struct(struct`,struct`),int,struct(struct`,struct`),*(struct`),*(struct`),*((*`,*`,*`,array(struct(int,int,*(void),*(void))))->(void)),*(struct`),*(char),*(void))),*(char))->(*(char))))
)	O
;	O
i	long
++	O
)	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
modprec	struct(*(char),int,*((*(struct(struct(struct`,struct`),int,*(struct`),*(struct`),*(struct`),*(struct`),*(*`),long,long,*(struct`),long,long,*(struct`),long,long,long,*(union`),enum(int,int,int,int,int),long,long,*(struct`),*(char),*(struct`),long,long,*(struct`),*(char),long,long,long,*((*`,*`,*`)->(int)),int,array(struct(array(long),int,struct(array(long)))),*(struct`),*(struct`),long,*(struct`),int,int,int,struct(struct`,struct`),int,struct(struct`,struct`),*(struct`),*(struct`),*((*`,*`,*`,array(struct(int,int,*(void),*(void))))->(void)),*(struct`),*(char),*(void))),*(char))->(*(char))))
[	O
i	long
]	O
.	O
name	*(char)
,	O
name	*(char)
)	O
==	O
0	int
)	O
return	O
&	O
modprec	struct(*(char),int,*((*(struct(struct(struct`,struct`),int,*(struct`),*(struct`),*(struct`),*(struct`),*(*`),long,long,*(struct`),long,long,*(struct`),long,long,long,*(union`),enum(int,int,int,int,int),long,long,*(struct`),*(char),*(struct`),long,long,*(struct`),*(char),long,long,long,*((*`,*`,*`)->(int)),int,array(struct(array(long),int,struct(array(long)))),*(struct`),*(struct`),long,*(struct`),int,int,int,struct(struct`,struct`),int,struct(struct`,struct`),*(struct`),*(struct`),*((*`,*`,*`,array(struct(int,int,*(void),*(void))))->(void)),*(struct`),*(char),*(void))),*(char))->(*(char))))
[	O
i	long
]	O
;	O
mu_error	(*(char))->(int)
(	O
_	O
(	O
"%s:%d: INTERNAL ERROR, please report"	*(char)
)	O
,	O
__FILE__	O
,	O
__LINE__	O
)	O
;	O
abort	()->(void)
(	O
)	O
;	O
}	O
static	O
void	O
variable_set	(*(struct(struct(struct(*`,int,int),struct(*`,int,int)),int,*(struct),*(struct),*(struct),*(struct),*(*(char)),long,long,*(struct(int,int,*`,*`,*`)),long,long,*(struct(enum(int,int,int,int,int),*`,struct`,union`)),long,long,long,*(union(*`,*`,*`,*`,long,long,long,int,*`,int)),enum(int,int,int,int,int),long,long,*(struct),*(char),*(struct(int,int)),long,long,*(struct),*(char),long,long,long,*((*`,*`,*`)->(int)),int,array(struct(array(long),int,struct(array(long)))),*(struct),*(struct),long,*(struct),int,int,int,struct(struct(*`,int,int),struct(*`,int,int)),int,struct(struct(*`,int,int),struct(*`,int,int)),*(struct),*(struct),*((*`,*`,*`,array(struct(int,int,*(void),*(void))))->(void)),*(struct),*(char),*(void))),*(char),*(char))->(void)
(	O
mu_sieve_machine_t	*(struct)
mach	*(struct)
,	O
char	O
const	O
*	O
name	*(char)
,	O
char	O
*	O
value	*(void)
)	O
{	O
struct	O
sieve_variable	struct(*(char))
*	O
var	*(char)
,	O
*	O
*	O
vptr	*(*(struct(*(char))))
;	O
int	O
rc	int
;	O
rc	int
=	O
mu_assoc_install_ref	(*(struct),*(char),*(void))->(int)
(	O
mach	*(struct)
->	O
vartab	*(struct)
,	O
name	*(char)
,	O
&	O
vptr	*(*(struct(*(char))))
)	O
;	O
switch	O
(	O
rc	int
)	O
{	O
case	O
0	int
:	O
var	*(char)
=	O
malloc	(long)->(*(void))
(	O
sizeof	O
(	O
*	O
var	*(char)
)	O
)	O
;	O
if	O
(	O
!	O
var	*(char)
)	O
{	O
mu_sieve_error	(*(struct),*(char))->(void)
(	O
mach	*(struct)
,	O
"variable_set: %s"	*(char)
,	O
mu_strerror	(int)->(*(char))
(	O
rc	int
)	O
)	O
;	O
mu_sieve_abort	(*(struct))->(void)
(	O
mach	*(struct)
)	O
;	O
}	O
*	O
vptr	*(*(struct(*(char))))
=	O
var	*(char)
;	O
break	O
;	O
case	O
MU_ERR_EXISTS	O
:	O
var	*(char)
=	O
*	O
vptr	*(*(struct(*(char))))
;	O
mu_sieve_free	(*(struct),*(void))->(void)
(	O
mach	*(struct)
,	O
var	*(char)
->	O
value	*(void)
)	O
;	O
break	O
;	O
default	O
:	O
mu_sieve_error	(*(struct),*(char))->(void)
(	O
mach	*(struct)
,	O
"variable_set: %s"	*(char)
,	O
mu_strerror	(int)->(*(char))
(	O
rc	int
)	O
)	O
;	O
mu_sieve_abort	(*(struct))->(void)
(	O
mach	*(struct)
)	O
;	O
}	O
var	*(char)
->	O
value	*(void)
=	O
value	*(void)
;	O
}	O
static	O
int	O
sieve_action_set	(*(struct(struct(struct(*`,int,int),struct(*`,int,int)),int,*(struct),*(struct),*(struct),*(struct),*(*(char)),long,long,*(struct(int,int,*`,*`,*`)),long,long,*(struct(enum(int,int,int,int,int),*`,struct`,union`)),long,long,long,*(union(*`,*`,*`,*`,long,long,long,int,*`,int)),enum(int,int,int,int,int),long,long,*(struct),*(char),*(struct(int,int)),long,long,*(struct),*(char),long,long,long,*((*`,*`,*`)->(int)),int,array(struct(array(long),int,struct(array(long)))),*(struct),*(struct),long,*(struct),int,int,int,struct(struct(*`,int,int),struct(*`,int,int)),int,struct(struct(*`,int,int),struct(*`,int,int)),*(struct),*(struct),*((*`,*`,*`,array(struct(int,int,*(void),*(void))))->(void)),*(struct),*(char),*(void))))->(int)
(	O
mu_sieve_machine_t	*(struct)
mach	*(struct)
)	O
{	O
size_t	long
i	long
;	O
char	O
*	O
name	*(char)
;	O
char	O
*	O
value	*(void)
;	O
mu_sieve_get_arg	(*(struct),long,enum(int,int,int,int,int),*(void))->(void)
(	O
mach	*(struct)
,	O
0	int
,	O
SVT_STRING	int
,	O
&	O
name	*(char)
)	O
;	O
mu_sieve_get_arg	(*(struct),long,enum(int,int,int,int,int),*(void))->(void)
(	O
mach	*(struct)
,	O
1	int
,	O
SVT_STRING	int
,	O
&	O
value	*(void)
)	O
;	O
value	*(void)
=	O
mu_sieve_strdup	(*(struct),*(char))->(*(char))
(	O
mach	*(struct)
,	O
value	*(void)
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
mach	*(struct)
->	O
tagcount	long
;	O
i	long
++	O
)	O
{	O
mu_sieve_value_t	struct(enum(int,int,int,int,int),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(char),long,struct(long,long)))
*	O
p	*(char)
=	O
mu_sieve_get_tag_n	(*(struct),long)->(*(struct(enum(int,int,int,int,int),*(char),struct(struct(*`,int,int),struct(*`,int,int)),union(*(char),long,struct(long,long)))))
(	O
mach	*(struct)
,	O
i	long
)	O
;	O
char	O
*	O
str	*(char)
=	O
findprec	(*(char))->(*(struct(*(char),int,*((*`,*`)->(*`)))))
(	O
p	*(char)
->	O
tag	*(char)
)	O
->	O
modify	*((*(struct(struct(struct`,struct`),int,*(struct`),*(struct`),*(struct`),*(struct`),*(*`),long,long,*(struct`),long,long,*(struct`),long,long,long,*(union`),enum(int,int,int,int,int),long,long,*(struct`),*(char),*(struct`),long,long,*(struct`),*(char),long,long,long,*((*`,*`,*`)->(int)),int,array(struct(array(long),int,struct(array(long)))),*(struct`),*(struct`),long,*(struct`),int,int,int,struct(struct`,struct`),int,struct(struct`,struct`),*(struct`),*(struct`),*((*`,*`,*`,array(struct(int,int,*(void),*(void))))->(void)),*(struct`),*(char),*(void))),*(char))->(*(char)))
(	O
mach	*(struct)
,	O
value	*(void)
)	O
;	O
mu_sieve_free	(*(struct),*(void))->(void)
(	O
mach	*(struct)
,	O
value	*(void)
)	O
;	O
value	*(void)
=	O
str	*(char)
;	O
}	O
variable_set	(*(struct(struct(struct(*`,int,int),struct(*`,int,int)),int,*(struct),*(struct),*(struct),*(struct),*(*(char)),long,long,*(struct(int,int,*`,*`,*`)),long,long,*(struct(enum(int,int,int,int,int),*`,struct`,union`)),long,long,long,*(union(*`,*`,*`,*`,long,long,long,int,*`,int)),enum(int,int,int,int,int),long,long,*(struct),*(char),*(struct(int,int)),long,long,*(struct),*(char),long,long,long,*((*`,*`,*`)->(int)),int,array(struct(array(long),int,struct(array(long)))),*(struct),*(struct),long,*(struct),int,int,int,struct(struct(*`,int,int),struct(*`,int,int)),int,struct(struct(*`,int,int),struct(*`,int,int)),*(struct),*(struct),*((*`,*`,*`,array(struct(int,int,*(void),*(void))))->(void)),*(struct),*(char),*(void))),*(char),*(char))->(void)
(	O
mach	*(struct)
,	O
name	*(char)
,	O
value	*(void)
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
varini_append	(*(struct(struct(struct(*`,int,int),struct(*`,int,int)),int,*(struct),*(struct),*(struct),*(struct),*(*(char)),long,long,*(struct(int,int,*`,*`,*`)),long,long,*(struct(enum(int,int,int,int,int),*`,struct`,union`)),long,long,long,*(union(*`,*`,*`,*`,long,long,long,int,*`,int)),enum(int,int,int,int,int),long,long,*(struct),*(char),*(struct(int,int)),long,long,*(struct),*(char),long,long,long,*((*`,*`,*`)->(int)),int,array(struct(array(long),int,struct(array(long)))),*(struct),*(struct),long,*(struct),int,int,int,struct(struct(*`,int,int),struct(*`,int,int)),int,struct(struct(*`,int,int),struct(*`,int,int)),*(struct),*(struct),*((*`,*`,*`,array(struct(int,int,*(void),*(void))))->(void)),*(struct),*(char),*(void))),*(struct(*(char),*(char))))->(int)
(	O
mu_sieve_machine_t	*(struct)
mach	*(struct)
,	O
struct	O
mu_sieve_variable_initializer	struct(*(char),*(char))
*	O
vini	*(struct(*(char),*(char)))
)	O
{	O
if	O
(	O
!	O
mu_sieve_has_variables	(*(struct))->(int)
(	O
mach	*(struct)
)	O
)	O
return	O
EINVAL	int
;	O
if	O
(	O
!	O
mach	*(struct)
->	O
init_var	*(struct)
)	O
{	O
mu_list_create	(*(*(struct)))->(int)
(	O
&	O
mach	*(struct)
->	O
init_var	*(struct)
)	O
;	O
mu_list_set_destroy_item	(*(struct),*((*(void))->(void)))->(*((*(void))->(void)))
(	O
mach	*(struct)
->	O
init_var	*(struct)
,	O
mu_list_free_item	(*(void))->(void)
)	O
;	O
}	O
return	O
mu_list_append	(*(struct),*(void))->(int)
(	O
mach	*(struct)
->	O
init_var	*(struct)
,	O
vini	*(struct(*(char),*(char)))
)	O
;	O
}	O
static	O
struct	O
mu_sieve_variable_initializer	struct(*(char),*(char))
*	O
varini_alloc	(*(char),*(char))->(*(struct(*(char),*(char))))
(	O
const	O
char	O
*	O
name	*(char)
,	O
const	O
char	O
*	O
value	*(void)
)	O
{	O
struct	O
mu_sieve_variable_initializer	struct(*(char),*(char))
*	O
vini	*(struct(*(char),*(char)))
;	O
size_t	long
namelen	long
;	O
namelen	long
=	O
strlen	(*(char))->(long)
(	O
name	*(char)
)	O
;	O
vini	*(struct(*(char),*(char)))
=	O
malloc	(long)->(*(void))
(	O
sizeof	O
(	O
*	O
vini	*(struct(*(char),*(char)))
)	O
+	O
namelen	long
+	O
strlen	(*(char))->(long)
(	O
value	*(void)
)	O
+	O
2	int
)	O
;	O
if	O
(	O
vini	*(struct(*(char),*(char)))
)	O
{	O
char	O
*	O
p	*(char)
=	O
(	O
char	O
*	O
)	O
(	O
vini	*(struct(*(char),*(char)))
+	O
1	int
)	O
;	O
vini	*(struct(*(char),*(char)))
->	O
name	*(char)
=	O
p	*(char)
;	O
vini	*(struct(*(char),*(char)))
->	O
value	*(void)
=	O
p	*(char)
+	O
namelen	long
+	O
1	int
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
vini	*(struct(*(char),*(char)))
->	O
name	*(char)
,	O
name	*(char)
)	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
vini	*(struct(*(char),*(char)))
->	O
value	*(void)
,	O
value	*(void)
)	O
;	O
}	O
return	O
vini	*(struct(*(char),*(char)))
;	O
}	O
int	O
mu_sieve_variable_initialize	(*(struct),*(char),*(char))->(int)
(	O
mu_sieve_machine_t	*(struct)
mach	*(struct)
,	O
char	O
const	O
*	O
name	*(char)
,	O
char	O
const	O
*	O
value	*(void)
)	O
{	O
struct	O
mu_sieve_variable_initializer	struct(*(char),*(char))
*	O
vini	*(struct(*(char),*(char)))
;	O
int	O
rc	int
;	O
if	O
(	O
!	O
name	*(char)
||	O
!	O
value	*(void)
)	O
return	O
EINVAL	int
;	O
if	O
(	O
!	O
mu_sieve_has_variables	(*(struct))->(int)
(	O
mach	*(struct)
)	O
)	O
return	O
EINVAL	int
;	O
vini	*(struct(*(char),*(char)))
=	O
varini_alloc	(*(char),*(char))->(*(struct(*(char),*(char))))
(	O
name	*(char)
,	O
value	*(void)
)	O
;	O
if	O
(	O
!	O
vini	*(struct(*(char),*(char)))
)	O
return	O
ENOMEM	int
;	O
rc	int
=	O
varini_append	(*(struct(struct(struct(*`,int,int),struct(*`,int,int)),int,*(struct),*(struct),*(struct),*(struct),*(*(char)),long,long,*(struct(int,int,*`,*`,*`)),long,long,*(struct(enum(int,int,int,int,int),*`,struct`,union`)),long,long,long,*(union(*`,*`,*`,*`,long,long,long,int,*`,int)),enum(int,int,int,int,int),long,long,*(struct),*(char),*(struct(int,int)),long,long,*(struct),*(char),long,long,long,*((*`,*`,*`)->(int)),int,array(struct(array(long),int,struct(array(long)))),*(struct),*(struct),long,*(struct),int,int,int,struct(struct(*`,int,int),struct(*`,int,int)),int,struct(struct(*`,int,int),struct(*`,int,int)),*(struct),*(struct),*((*`,*`,*`,array(struct(int,int,*(void),*(void))))->(void)),*(struct),*(char),*(void))),*(struct(*(char),*(char))))->(int)
(	O
mach	*(struct)
,	O
vini	*(struct(*(char),*(char)))
)	O
;	O
if	O
(	O
rc	int
)	O
free	(*(void))->(void)
(	O
vini	*(struct(*(char),*(char)))
)	O
;	O
return	O
rc	int
;	O
}	O
static	O
int	O
set_tag_checker	(*(struct(struct(struct(*`,int,int),struct(*`,int,int)),int,*(struct),*(struct),*(struct),*(struct),*(*(char)),long,long,*(struct(int,int,*`,*`,*`)),long,long,*(struct(enum(int,int,int,int,int),*`,struct`,union`)),long,long,long,*(union(*`,*`,*`,*`,long,long,long,int,*`,int)),enum(int,int,int,int,int),long,long,*(struct),*(char),*(struct(int,int)),long,long,*(struct),*(char),long,long,long,*((*`,*`,*`)->(int)),int,array(struct(array(long),int,struct(array(long)))),*(struct),*(struct),long,*(struct),int,int,int,struct(struct(*`,int,int),struct(*`,int,int)),int,struct(struct(*`,int,int),struct(*`,int,int)),*(struct),*(struct),*((*`,*`,*`,array(struct(int,int,*(void),*(void))))->(void)),*(struct),*(char),*(void))))->(int)
(	O
mu_sieve_machine_t	*(struct)
mach	*(struct)
)	O
{	O
int	O
i	long
,	O
j	int
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<	O
mach	*(struct)
->	O
tagcount	long
;	O
i	long
++	O
)	O
{	O
mu_sieve_value_t	struct(enum(int,int,int,int,int),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(char),long,struct(long,long)))
tmp	struct(enum(int,int,int,int,int),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(char),long,struct(long,long)))
=	O
*	O
mu_sieve_get_tag_n	(*(struct),long)->(*(struct(enum(int,int,int,int,int),*(char),struct(struct(*`,int,int),struct(*`,int,int)),union(*(char),long,struct(long,long)))))
(	O
mach	*(struct)
,	O
i	long
)	O
;	O
int	O
tmp_prec	int
=	O
findprec	(*(char))->(*(struct(*(char),int,*((*`,*`)->(*`)))))
(	O
tmp	struct(enum(int,int,int,int,int),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(char),long,struct(long,long)))
.	O
tag	*(char)
)	O
->	O
prec	*(*(struct(int,*(char),int,int,int,*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*(void),*((*`,*`,int)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,int)->(int)))))
;	O
for	O
(	O
j	int
=	O
i	long
-	O
1	int
;	O
j	int
>=	O
0	int
;	O
j	int
--	O
)	O
{	O
mu_sieve_value_t	struct(enum(int,int,int,int,int),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(char),long,struct(long,long)))
*	O
t	long
=	O
mu_sieve_get_tag_n	(*(struct),long)->(*(struct(enum(int,int,int,int,int),*(char),struct(struct(*`,int,int),struct(*`,int,int)),union(*(char),long,struct(long,long)))))
(	O
mach	*(struct)
,	O
j	int
)	O
;	O
int	O
prec	*(*(struct(int,*(char),int,int,int,*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*(void),*((*`,*`,int)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,int)->(int)))))
=	O
findprec	(*(char))->(*(struct(*(char),int,*((*`,*`)->(*`)))))
(	O
t	long
->	O
tag	*(char)
)	O
->	O
prec	*(*(struct(int,*(char),int,int,int,*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*(void),*((*`,*`,int)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,int)->(int)))))
;	O
if	O
(	O
prec	*(*(struct(int,*(char),int,int,int,*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*(void),*((*`,*`,int)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,int)->(int)))))
<	O
tmp_prec	int
)	O
*	O
mu_sieve_get_tag_n	(*(struct),long)->(*(struct(enum(int,int,int,int,int),*(char),struct(struct(*`,int,int),struct(*`,int,int)),union(*(char),long,struct(long,long)))))
(	O
mach	*(struct)
,	O
j	int
+	O
1	int
)	O
=	O
*	O
t	long
;	O
else	O
if	O
(	O
prec	*(*(struct(int,*(char),int,int,int,*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*(void),*((*`,*`,int)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,int)->(int)))))
==	O
tmp_prec	int
)	O
{	O
mu_diag_at_locus_range	(int,*(struct(struct(*(char),int,int),struct(*(char),int,int))),*(char))->(void)
(	O
MU_LOG_ERROR	int
,	O
&	O
t	long
->	O
locus	struct(struct(*(char),int,int),struct(*(char),int,int))
,	O
_	O
(	O
"%s and %s can't be used together"	*(char)
)	O
,	O
tmp	struct(enum(int,int,int,int,int),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(char),long,struct(long,long)))
.	O
tag	*(char)
,	O
t	long
->	O
tag	*(char)
)	O
;	O
mu_diag_at_locus_range	(int,*(struct(struct(*(char),int,int),struct(*(char),int,int))),*(char))->(void)
(	O
MU_LOG_ERROR	int
,	O
&	O
tmp	struct(enum(int,int,int,int,int),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(char),long,struct(long,long)))
.	O
locus	struct(struct(*(char),int,int),struct(*(char),int,int))
,	O
_	O
(	O
"%s encountered here"	*(char)
)	O
,	O
tmp	struct(enum(int,int,int,int,int),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(char),long,struct(long,long)))
.	O
tag	*(char)
)	O
;	O
mu_i_sv_error	(*(struct(struct(struct(*`,int,int),struct(*`,int,int)),int,*(struct),*(struct),*(struct),*(struct),*(*(char)),long,long,*(struct(int,int,*`,*`,*`)),long,long,*(struct(enum(int,int,int,int,int),*`,struct`,union`)),long,long,long,*(union(*`,*`,*`,*`,long,long,long,int,*`,int)),enum(int,int,int,int,int),long,long,*(struct),*(char),*(struct(int,int)),long,long,*(struct),*(char),long,long,long,*((*`,*`,*`)->(int)),int,array(struct(array(long),int,struct(array(long)))),*(struct),*(struct),long,*(struct),int,int,int,struct(struct(*`,int,int),struct(*`,int,int)),int,struct(struct(*`,int,int),struct(*`,int,int)),*(struct),*(struct),*((*`,*`,*`,array(struct(int,int,*(void),*(void))))->(void)),*(struct),*(char),*(void))))->(void)
(	O
mach	*(struct)
)	O
;	O
return	O
1	int
;	O
}	O
else	O
break	O
;	O
}	O
*	O
mu_sieve_get_tag_n	(*(struct),long)->(*(struct(enum(int,int,int,int,int),*(char),struct(struct(*`,int,int),struct(*`,int,int)),union(*(char),long,struct(long,long)))))
(	O
mach	*(struct)
,	O
j	int
+	O
1	int
)	O
=	O
tmp	struct(enum(int,int,int,int,int),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(char),long,struct(long,long)))
;	O
}	O
return	O
0	int
;	O
}	O
static	O
mu_sieve_tag_group_t	struct(*(struct(*(char),enum(int,int,int,int,int))),*((*(struct))->(int)))
set_tag_groups	array(struct(*(struct(*(char),enum(int,int,int,int,int))),*((*(struct(struct`,int,*`,*`,*`,*`,*`,long,long,*`,long,long,*`,long,long,long,*`,enum(int,int,int,int,int),long,long,*`,*`,*`,long,long,*`,*`,long,long,long,*`,int,array(struct(array(long),int,struct(array(long)))),*`,*`,long,*`,int,int,int,struct`,int,struct`,*`,*`,*`,*`,*`,*`)))->(int))))
[	O
]	O
=	O
{	O
{	O
set_tags	array(struct(*(char),enum(int,int,int,int,int)))
,	O
set_tag_checker	(*(struct(struct(struct(*`,int,int),struct(*`,int,int)),int,*(struct),*(struct),*(struct),*(struct),*(*(char)),long,long,*(struct(int,int,*`,*`,*`)),long,long,*(struct(enum(int,int,int,int,int),*`,struct`,union`)),long,long,long,*(union(*`,*`,*`,*`,long,long,long,int,*`,int)),enum(int,int,int,int,int),long,long,*(struct),*(char),*(struct(int,int)),long,long,*(struct),*(char),long,long,long,*((*`,*`,*`)->(int)),int,array(struct(array(long),int,struct(array(long)))),*(struct),*(struct),long,*(struct),int,int,int,struct(struct(*`,int,int),struct(*`,int,int)),int,struct(struct(*`,int,int),struct(*`,int,int)),*(struct),*(struct),*((*`,*`,*`,array(struct(int,int,*(void),*(void))))->(void)),*(struct),*(char),*(void))))->(int)
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
static	O
mu_sieve_data_type	enum(int,int,int,int,int)
set_args	array(enum(int,int,int,int,int))
[	O
]	O
=	O
{	O
SVT_STRING	int
,	O
SVT_STRING	int
,	O
SVT_VOID	int
}	O
;	O
static	O
int	O
retrieve_string	(*(void),*(void),long,*(*(char)))->(int)
(	O
void	O
*	O
item	*(void)
,	O
void	O
*	O
data	*(void)
,	O
size_t	long
idx	long
,	O
char	O
*	O
*	O
pval	*(void)
)	O
{	O
if	O
(	O
idx	long
)	O
return	O
MU_ERR_NOENT	O
;	O
*	O
pval	*(void)
=	O
strdup	(*(char))->(*(char))
(	O
(	O
char	O
*	O
)	O
item	*(void)
)	O
;	O
if	O
(	O
!	O
*	O
pval	*(void)
)	O
return	O
errno	O
;	O
return	O
0	int
;	O
}	O
int	O
fold_string	(*(void),*(void),*(void),*(*(void)))->(int)
(	O
void	O
*	O
item	*(void)
,	O
void	O
*	O
data	*(void)
,	O
void	O
*	O
prev	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(char))),*(struct(*(struct`),*(struct`),*(struct`),int,*(char))),*(struct(short,array(char))),int,*(char)))
,	O
void	O
*	O
*	O
ret	*(*(struct))
)	O
{	O
char	O
*	O
str	*(char)
=	O
item	*(void)
;	O
size_t	long
count	long
=	O
*	O
(	O
size_t	long
*	O
)	O
prev	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(char))),*(struct(*(struct`),*(struct`),*(struct`),int,*(char))),*(struct(short,array(char))),int,*(char)))
;	O
if	O
(	O
*	O
str	*(char)
)	O
++	O
count	long
;	O
*	O
(	O
size_t	long
*	O
)	O
ret	*(*(struct))
=	O
count	long
;	O
return	O
0	int
;	O
}	O
int	O
sieve_test_string	(*(struct(struct(struct(*`,int,int),struct(*`,int,int)),int,*(struct),*(struct),*(struct),*(struct),*(*(char)),long,long,*(struct(int,int,*`,*`,*`)),long,long,*(struct(enum(int,int,int,int,int),*`,struct`,union`)),long,long,long,*(union(*`,*`,*`,*`,long,long,long,int,*`,int)),enum(int,int,int,int,int),long,long,*(struct),*(char),*(struct(int,int)),long,long,*(struct),*(char),long,long,long,*((*`,*`,*`)->(int)),int,array(struct(array(long),int,struct(array(long)))),*(struct),*(struct),long,*(struct),int,int,int,struct(struct(*`,int,int),struct(*`,int,int)),int,struct(struct(*`,int,int),struct(*`,int,int)),*(struct),*(struct),*((*`,*`,*`,array(struct(int,int,*(void),*(void))))->(void)),*(struct),*(char),*(void))))->(int)
(	O
mu_sieve_machine_t	*(struct)
mach	*(struct)
)	O
{	O
mu_sieve_value_t	struct(enum(int,int,int,int,int),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(char),long,struct(long,long)))
*	O
source	*(char)
,	O
*	O
key_list	*(struct(enum(int,int,int,int,int),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(char),long,struct(long,long))))
;	O
source	*(char)
=	O
mu_sieve_get_arg_untyped	(*(struct),long)->(*(struct(enum(int,int,int,int,int),*(char),struct(struct(*`,int,int),struct(*`,int,int)),union(*(char),long,struct(long,long)))))
(	O
mach	*(struct)
,	O
0	int
)	O
;	O
key_list	*(struct(enum(int,int,int,int,int),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(char),long,struct(long,long))))
=	O
mu_sieve_get_arg_untyped	(*(struct),long)->(*(struct(enum(int,int,int,int,int),*(char),struct(struct(*`,int,int),struct(*`,int,int)),union(*(char),long,struct(long,long)))))
(	O
mach	*(struct)
,	O
1	int
)	O
;	O
return	O
mu_sieve_vlist_compare	(*(struct),*(struct(enum(int,int,int,int,int),*(char),struct(struct(*`,int,int),struct(*`,int,int)),union(*(char),long,struct(long,long)))),*(struct(enum(int,int,int,int,int),*(char),struct(struct(*`,int,int),struct(*`,int,int)),union(*(char),long,struct(long,long)))),*((*(void),*(void),long,*(*(char)))->(int)),*((*(void),*(void),*(void),*(*(void)))->(int)),*(void))->(int)
(	O
mach	*(struct)
,	O
source	*(char)
,	O
key_list	*(struct(enum(int,int,int,int,int),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(char),long,struct(long,long))))
,	O
retrieve_string	(*(void),*(void),long,*(*(char)))->(int)
,	O
fold_string	(*(void),*(void),*(void),*(*(void)))->(int)
,	O
mach	*(struct)
)	O
;	O
}	O
static	O
mu_sieve_data_type	enum(int,int,int,int,int)
string_args	array(enum(int,int,int,int,int))
[	O
]	O
=	O
{	O
SVT_STRING_LIST	int
,	O
SVT_STRING_LIST	int
,	O
SVT_VOID	int
}	O
;	O
static	O
mu_sieve_tag_group_t	struct(*(struct(*(char),enum(int,int,int,int,int))),*((*(struct))->(int)))
string_tag_groups	array(struct(*(struct(*(char),enum(int,int,int,int,int))),*((*(struct(struct`,int,*`,*`,*`,*`,*`,long,long,*`,long,long,*`,long,long,long,*`,enum(int,int,int,int,int),long,long,*`,*`,*`,long,long,*`,*`,long,long,long,*`,int,array(struct(array(long),int,struct(array(long)))),*`,*`,long,*`,int,int,int,struct`,int,struct`,*`,*`,*`,*`,*`,*`)))->(int))))
[	O
]	O
=	O
{	O
{	O
mu_sieve_match_part_tags	array(struct(*(char),enum(int,int,int,int,int)))
,	O
mu_sieve_match_part_checker	(*(struct))->(int)
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
int	O
mu_i_sv_expand_variables	(*(char),long,*(*(char)),*(void))->(int)
(	O
char	O
const	O
*	O
input	*(char)
,	O
size_t	long
len	long
,	O
char	O
*	O
*	O
exp	*(char)
,	O
void	O
*	O
data	*(void)
)	O
{	O
mu_sieve_machine_t	*(struct)
mach	*(struct)
=	O
data	*(void)
;	O
if	O
(	O
mu_isdigit	O
(	O
*	O
input	*(char)
)	O
)	O
{	O
char	O
*	O
p	*(char)
;	O
size_t	long
idx	long
=	O
0	int
;	O
while	O
(	O
len	long
)	O
{	O
if	O
(	O
mu_isdigit	O
(	O
*	O
input	*(char)
)	O
)	O
{	O
int	O
d	int
=	O
*	O
input	*(char)
-	O
'0'	O
;	O
idx	long
=	O
idx	long
*	O
10	int
+	O
d	int
;	O
input	*(char)
++	O
;	O
len	long
--	O
;	O
}	O
else	O
return	O
1	int
;	O
}	O
if	O
(	O
idx	long
>	O
mach	*(struct)
->	O
match_count	long
)	O
{	O
*	O
exp	*(char)
=	O
NULL	O
;	O
return	O
0	int
;	O
}	O
len	long
=	O
mach	*(struct)
->	O
match_buf	*(struct(int,int))
[	O
idx	long
]	O
.	O
rm_eo	int
-	O
mach	*(struct)
->	O
match_buf	*(struct(int,int))
[	O
idx	long
]	O
.	O
rm_so	int
;	O
p	*(char)
=	O
malloc	(long)->(*(void))
(	O
len	long
+	O
1	int
)	O
;	O
if	O
(	O
!	O
p	*(char)
)	O
{	O
mu_sieve_error	(*(struct),*(char))->(void)
(	O
mach	*(struct)
,	O
"%s"	*(char)
,	O
mu_strerror	(int)->(*(char))
(	O
errno	O
)	O
)	O
;	O
mu_sieve_abort	(*(struct))->(void)
(	O
mach	*(struct)
)	O
;	O
}	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
p	*(char)
,	O
mach	*(struct)
->	O
match_string	*(char)
+	O
mach	*(struct)
->	O
match_buf	*(struct(int,int))
[	O
idx	long
]	O
.	O
rm_so	int
,	O
len	long
)	O
;	O
p	*(char)
[	O
len	long
]	O
=	O
0	int
;	O
*	O
exp	*(char)
=	O
p	*(char)
;	O
}	O
else	O
if	O
(	O
mu_isalpha	O
(	O
*	O
input	*(char)
)	O
)	O
{	O
size_t	long
i	long
;	O
char	O
*	O
name	*(char)
;	O
struct	O
sieve_variable	struct(*(char))
*	O
var	*(char)
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
len	long
;	O
i	long
++	O
)	O
if	O
(	O
!	O
(	O
mu_isalnum	O
(	O
input	*(char)
[	O
i	long
]	O
)	O
||	O
input	*(char)
[	O
i	long
]	O
==	O
'_'	O
)	O
)	O
return	O
1	int
;	O
name	*(char)
=	O
malloc	(long)->(*(void))
(	O
len	long
+	O
1	int
)	O
;	O
if	O
(	O
!	O
name	*(char)
)	O
{	O
mu_sieve_error	(*(struct),*(char))->(void)
(	O
mach	*(struct)
,	O
"%s"	*(char)
,	O
mu_strerror	(int)->(*(char))
(	O
errno	O
)	O
)	O
;	O
mu_sieve_abort	(*(struct))->(void)
(	O
mach	*(struct)
)	O
;	O
}	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
name	*(char)
,	O
input	*(char)
,	O
len	long
)	O
;	O
name	*(char)
[	O
len	long
]	O
=	O
0	int
;	O
var	*(char)
=	O
mu_assoc_get	(*(struct),*(char))->(*(void))
(	O
mach	*(struct)
->	O
vartab	*(struct)
,	O
name	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
name	*(char)
)	O
;	O
if	O
(	O
var	*(char)
)	O
{	O
*	O
exp	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
var	*(char)
->	O
value	*(void)
)	O
;	O
if	O
(	O
!	O
*	O
exp	*(char)
)	O
{	O
mu_sieve_error	(*(struct),*(char))->(void)
(	O
mach	*(struct)
,	O
"%s"	*(char)
,	O
mu_strerror	(int)->(*(char))
(	O
errno	O
)	O
)	O
;	O
mu_sieve_abort	(*(struct))->(void)
(	O
mach	*(struct)
)	O
;	O
}	O
}	O
else	O
*	O
exp	*(char)
=	O
NULL	O
;	O
}	O
else	O
return	O
1	int
;	O
return	O
0	int
;	O
}	O
int	O
mu_sieve_require_variables	(*(struct))->(int)
(	O
mu_sieve_machine_t	*(struct)
mach	*(struct)
)	O
{	O
int	O
rc	int
;	O
if	O
(	O
mach	*(struct)
->	O
vartab	*(struct)
)	O
return	O
0	int
;	O
rc	int
=	O
mu_assoc_create	(*(*(struct)),int)->(int)
(	O
&	O
mach	*(struct)
->	O
vartab	*(struct)
,	O
MU_ASSOC_ICASE	int
)	O
;	O
if	O
(	O
rc	int
)	O
mu_sieve_error	(*(struct),*(char))->(void)
(	O
mach	*(struct)
,	O
"mu_assoc_create: %s"	*(char)
,	O
mu_strerror	(int)->(*(char))
(	O
rc	int
)	O
)	O
;	O
mu_assoc_set_destroy_item	(*(struct),*((*(void))->(void)))->(int)
(	O
mach	*(struct)
->	O
vartab	*(struct)
,	O
mu_list_free_item	(*(void))->(void)
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
mu_sieve_register_action	(*(struct),*(char),*((*(struct))->(int)),*(enum(int,int,int,int,int)),*(struct(*(struct(*`,enum(int,int,int,int,int))),*((*`)->(int)))),int)->(void)
(	O
mach	*(struct)
,	O
"set"	*(char)
,	O
sieve_action_set	(*(struct(struct(struct(*`,int,int),struct(*`,int,int)),int,*(struct),*(struct),*(struct),*(struct),*(*(char)),long,long,*(struct(int,int,*`,*`,*`)),long,long,*(struct(enum(int,int,int,int,int),*`,struct`,union`)),long,long,long,*(union(*`,*`,*`,*`,long,long,long,int,*`,int)),enum(int,int,int,int,int),long,long,*(struct),*(char),*(struct(int,int)),long,long,*(struct),*(char),long,long,long,*((*`,*`,*`)->(int)),int,array(struct(array(long),int,struct(array(long)))),*(struct),*(struct),long,*(struct),int,int,int,struct(struct(*`,int,int),struct(*`,int,int)),int,struct(struct(*`,int,int),struct(*`,int,int)),*(struct),*(struct),*((*`,*`,*`,array(struct(int,int,*(void),*(void))))->(void)),*(struct),*(char),*(void))))->(int)
,	O
set_args	array(enum(int,int,int,int,int))
,	O
set_tag_groups	array(struct(*(struct(*(char),enum(int,int,int,int,int))),*((*(struct(struct`,int,*`,*`,*`,*`,*`,long,long,*`,long,long,*`,long,long,long,*`,enum(int,int,int,int,int),long,long,*`,*`,*`,long,long,*`,*`,long,long,long,*`,int,array(struct(array(long),int,struct(array(long)))),*`,*`,long,*`,int,int,int,struct`,int,struct`,*`,*`,*`,*`,*`,*`)))->(int))))
,	O
1	int
)	O
;	O
mu_sieve_register_test	(*(struct),*(char),*((*(struct))->(int)),*(enum(int,int,int,int,int)),*(struct(*(struct(*`,enum(int,int,int,int,int))),*((*`)->(int)))),int)->(void)
(	O
mach	*(struct)
,	O
"string"	*(char)
,	O
sieve_test_string	(*(struct(struct(struct(*`,int,int),struct(*`,int,int)),int,*(struct),*(struct),*(struct),*(struct),*(*(char)),long,long,*(struct(int,int,*`,*`,*`)),long,long,*(struct(enum(int,int,int,int,int),*`,struct`,union`)),long,long,long,*(union(*`,*`,*`,*`,long,long,long,int,*`,int)),enum(int,int,int,int,int),long,long,*(struct),*(char),*(struct(int,int)),long,long,*(struct),*(char),long,long,long,*((*`,*`,*`)->(int)),int,array(struct(array(long),int,struct(array(long)))),*(struct),*(struct),long,*(struct),int,int,int,struct(struct(*`,int,int),struct(*`,int,int)),int,struct(struct(*`,int,int),struct(*`,int,int)),*(struct),*(struct),*((*`,*`,*`,array(struct(int,int,*(void),*(void))))->(void)),*(struct),*(char),*(void))))->(int)
,	O
string_args	array(enum(int,int,int,int,int))
,	O
string_tag_groups	array(struct(*(struct(*(char),enum(int,int,int,int,int))),*((*(struct(struct`,int,*`,*`,*`,*`,*`,long,long,*`,long,long,*`,long,long,long,*`,enum(int,int,int,int,int),long,long,*`,*`,*`,long,long,*`,*`,long,long,long,*`,int,array(struct(array(long),int,struct(array(long)))),*`,*`,long,*`,int,int,int,struct`,int,struct`,*`,*`,*`,*`,*`,*`)))->(int))))
,	O
1	int
)	O
;	O
}	O
return	O
rc	int
;	O
}	O
int	O
mu_sieve_has_variables	(*(struct))->(int)
(	O
mu_sieve_machine_t	*(struct)
mach	*(struct)
)	O
{	O
return	O
mach	*(struct)
->	O
vartab	*(struct)
!=	O
NULL	O
;	O
}	O
static	O
int	O
copy_init_var	(*(void),*(void))->(int)
(	O
void	O
*	O
item	*(void)
,	O
void	O
*	O
data	*(void)
)	O
{	O
struct	O
mu_sieve_variable_initializer	struct(*(char),*(char))
*	O
vini	*(struct(*(char),*(char)))
=	O
item	*(void)
,	O
*	O
vini_new	*(struct(*(char),*(char)))
;	O
mu_sieve_machine_t	*(struct)
mach	*(struct)
=	O
data	*(void)
;	O
vini_new	*(struct(*(char),*(char)))
=	O
varini_alloc	(*(char),*(char))->(*(struct(*(char),*(char))))
(	O
vini	*(struct(*(char),*(char)))
->	O
name	*(char)
,	O
vini	*(struct(*(char),*(char)))
->	O
value	*(void)
)	O
;	O
if	O
(	O
!	O
vini_new	*(struct(*(char),*(char)))
)	O
return	O
ENOMEM	int
;	O
return	O
varini_append	(*(struct(struct(struct(*`,int,int),struct(*`,int,int)),int,*(struct),*(struct),*(struct),*(struct),*(*(char)),long,long,*(struct(int,int,*`,*`,*`)),long,long,*(struct(enum(int,int,int,int,int),*`,struct`,union`)),long,long,long,*(union(*`,*`,*`,*`,long,long,long,int,*`,int)),enum(int,int,int,int,int),long,long,*(struct),*(char),*(struct(int,int)),long,long,*(struct),*(char),long,long,long,*((*`,*`,*`)->(int)),int,array(struct(array(long),int,struct(array(long)))),*(struct),*(struct),long,*(struct),int,int,int,struct(struct(*`,int,int),struct(*`,int,int)),int,struct(struct(*`,int,int),struct(*`,int,int)),*(struct),*(struct),*((*`,*`,*`,array(struct(int,int,*(void),*(void))))->(void)),*(struct),*(char),*(void))),*(struct(*(char),*(char))))->(int)
(	O
mach	*(struct)
,	O
vini_new	*(struct(*(char),*(char)))
)	O
;	O
}	O
void	O
mu_i_sv_copy_variables	(*(struct(struct(struct(*`,int,int),struct(*`,int,int)),int,*(struct),*(struct),*(struct),*(struct),*(*(char)),long,long,*(struct(int,int,*`,*`,*`)),long,long,*(struct(enum(int,int,int,int,int),*`,struct`,union`)),long,long,long,*(union(*`,*`,*`,*`,long,long,long,int,*`,int)),enum(int,int,int,int,int),long,long,*(struct),*(char),*(struct(int,int)),long,long,*(struct),*(char),long,long,long,*((*`,*`,*`)->(int)),int,array(struct(array(long),int,struct(array(long)))),*(struct),*(struct),long,*(struct),int,int,int,struct(struct(*`,int,int),struct(*`,int,int)),int,struct(struct(*`,int,int),struct(*`,int,int)),*(struct),*(struct),*((*`,*`,*`,array(struct(int,int,*(void),*(void))))->(void)),*(struct),*(char),*(void))),*(struct(struct(struct(*`,int,int),struct(*`,int,int)),int,*(struct),*(struct),*(struct),*(struct),*(*(char)),long,long,*(struct(int,int,*`,*`,*`)),long,long,*(struct(enum(int,int,int,int,int),*`,struct`,union`)),long,long,long,*(union(*`,*`,*`,*`,long,long,long,int,*`,int)),enum(int,int,int,int,int),long,long,*(struct),*(char),*(struct(int,int)),long,long,*(struct),*(char),long,long,long,*((*`,*`,*`)->(int)),int,array(struct(array(long),int,struct(array(long)))),*(struct),*(struct),long,*(struct),int,int,int,struct(struct(*`,int,int),struct(*`,int,int)),int,struct(struct(*`,int,int),struct(*`,int,int)),*(struct),*(struct),*((*`,*`,*`,array(struct(int,int,*(void),*(void))))->(void)),*(struct),*(char),*(void))))->(void)
(	O
mu_sieve_machine_t	*(struct)
child	*(struct(struct(struct(*(char),int,int),struct(*(char),int,int)),int,*(struct),*(struct),*(struct),*(struct),*(*(char)),long,long,*(struct(int,int,*(char),*(char),*(void))),long,long,*(struct(enum(int,int,int,int,int),*(char),struct(struct`,struct`),union(*`,long,struct`))),long,long,long,*(union(*((*`)->(void)),*((*`)->(int)),*(struct`),*((*`,*`,*`)->(int)),long,long,long,int,*(char),int)),enum(int,int,int,int,int),long,long,*(struct),*(char),*(struct(int,int)),long,long,*(struct),*(char),long,long,long,*((*(struct`),*(struct`),*(char))->(int)),int,array(struct(array(long),int,struct(array(long)))),*(struct),*(struct),long,*(struct),int,int,int,struct(struct(*(char),int,int),struct(*(char),int,int)),int,struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct),*(struct),*((*(struct`),*(char),*(char),array(struct(int,int,*(void),*(void))))->(void)),*(struct),*(char),*(void)))
,	O
mu_sieve_machine_t	*(struct)
parent	*(struct(struct(struct(*(char),int,int),struct(*(char),int,int)),enum(int,int,int),*(char),*(struct(int,union(*`,*`,struct`))),*(struct),*(struct(struct(struct`,struct`),enum(int,int,int),*(char),*(struct`),*(struct`),*(struct`)))))
)	O
{	O
mu_iterator_t	*(struct)
itr	*(struct)
;	O
int	O
rc	int
;	O
mu_sieve_require_variables	(*(struct))->(int)
(	O
child	*(struct(struct(struct(*(char),int,int),struct(*(char),int,int)),int,*(struct),*(struct),*(struct),*(struct),*(*(char)),long,long,*(struct(int,int,*(char),*(char),*(void))),long,long,*(struct(enum(int,int,int,int,int),*(char),struct(struct`,struct`),union(*`,long,struct`))),long,long,long,*(union(*((*`)->(void)),*((*`)->(int)),*(struct`),*((*`,*`,*`)->(int)),long,long,long,int,*(char),int)),enum(int,int,int,int,int),long,long,*(struct),*(char),*(struct(int,int)),long,long,*(struct),*(char),long,long,long,*((*(struct`),*(struct`),*(char))->(int)),int,array(struct(array(long),int,struct(array(long)))),*(struct),*(struct),long,*(struct),int,int,int,struct(struct(*(char),int,int),struct(*(char),int,int)),int,struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct),*(struct),*((*(struct`),*(char),*(char),array(struct(int,int,*(void),*(void))))->(void)),*(struct),*(char),*(void)))
)	O
;	O
rc	int
=	O
mu_assoc_get_iterator	(*(struct),*(*(struct)))->(int)
(	O
parent	*(struct(struct(struct(*(char),int,int),struct(*(char),int,int)),enum(int,int,int),*(char),*(struct(int,union(*`,*`,struct`))),*(struct),*(struct(struct(struct`,struct`),enum(int,int,int),*(char),*(struct`),*(struct`),*(struct`)))))
->	O
vartab	*(struct)
,	O
&	O
itr	*(struct)
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_sieve_error	(*(struct),*(char))->(void)
(	O
child	*(struct(struct(struct(*(char),int,int),struct(*(char),int,int)),int,*(struct),*(struct),*(struct),*(struct),*(*(char)),long,long,*(struct(int,int,*(char),*(char),*(void))),long,long,*(struct(enum(int,int,int,int,int),*(char),struct(struct`,struct`),union(*`,long,struct`))),long,long,long,*(union(*((*`)->(void)),*((*`)->(int)),*(struct`),*((*`,*`,*`)->(int)),long,long,long,int,*(char),int)),enum(int,int,int,int,int),long,long,*(struct),*(char),*(struct(int,int)),long,long,*(struct),*(char),long,long,long,*((*(struct`),*(struct`),*(char))->(int)),int,array(struct(array(long),int,struct(array(long)))),*(struct),*(struct),long,*(struct),int,int,int,struct(struct(*(char),int,int),struct(*(char),int,int)),int,struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct),*(struct),*((*(struct`),*(char),*(char),array(struct(int,int,*(void),*(void))))->(void)),*(struct),*(char),*(void)))
,	O
"mu_assoc_get_iterator: %s"	*(char)
,	O
mu_strerror	(int)->(*(char))
(	O
rc	int
)	O
)	O
;	O
mu_sieve_abort	(*(struct))->(void)
(	O
child	*(struct(struct(struct(*(char),int,int),struct(*(char),int,int)),int,*(struct),*(struct),*(struct),*(struct),*(*(char)),long,long,*(struct(int,int,*(char),*(char),*(void))),long,long,*(struct(enum(int,int,int,int,int),*(char),struct(struct`,struct`),union(*`,long,struct`))),long,long,long,*(union(*((*`)->(void)),*((*`)->(int)),*(struct`),*((*`,*`,*`)->(int)),long,long,long,int,*(char),int)),enum(int,int,int,int,int),long,long,*(struct),*(char),*(struct(int,int)),long,long,*(struct),*(char),long,long,long,*((*(struct`),*(struct`),*(char))->(int)),int,array(struct(array(long),int,struct(array(long)))),*(struct),*(struct),long,*(struct),int,int,int,struct(struct(*(char),int,int),struct(*(char),int,int)),int,struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct),*(struct),*((*(struct`),*(char),*(char),array(struct(int,int,*(void),*(void))))->(void)),*(struct),*(char),*(void)))
)	O
;	O
}	O
for	O
(	O
mu_iterator_first	(*(struct))->(int)
(	O
itr	*(struct)
)	O
;	O
!	O
mu_iterator_is_done	(*(struct))->(int)
(	O
itr	*(struct)
)	O
;	O
mu_iterator_next	(*(struct))->(int)
(	O
itr	*(struct)
)	O
)	O
{	O
const	O
char	O
*	O
name	*(char)
;	O
struct	O
sieve_variable	struct(*(char))
const	O
*	O
val	*(char)
;	O
struct	O
sieve_variable	struct(*(char))
*	O
newval	*(char)
;	O
mu_iterator_current_kv	(*(struct),*(*(void)),*(*(void)))->(int)
(	O
itr	*(struct)
,	O
(	O
const	O
void	O
*	O
*	O
)	O
&	O
name	*(char)
,	O
(	O
void	O
*	O
*	O
)	O
&	O
val	*(char)
)	O
;	O
newval	*(char)
=	O
malloc	(long)->(*(void))
(	O
sizeof	O
(	O
*	O
newval	*(char)
)	O
)	O
;	O
if	O
(	O
!	O
newval	*(char)
)	O
mu_sieve_abort	(*(struct))->(void)
(	O
child	*(struct(struct(struct(*(char),int,int),struct(*(char),int,int)),int,*(struct),*(struct),*(struct),*(struct),*(*(char)),long,long,*(struct(int,int,*(char),*(char),*(void))),long,long,*(struct(enum(int,int,int,int,int),*(char),struct(struct`,struct`),union(*`,long,struct`))),long,long,long,*(union(*((*`)->(void)),*((*`)->(int)),*(struct`),*((*`,*`,*`)->(int)),long,long,long,int,*(char),int)),enum(int,int,int,int,int),long,long,*(struct),*(char),*(struct(int,int)),long,long,*(struct),*(char),long,long,long,*((*(struct`),*(struct`),*(char))->(int)),int,array(struct(array(long),int,struct(array(long)))),*(struct),*(struct),long,*(struct),int,int,int,struct(struct(*(char),int,int),struct(*(char),int,int)),int,struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct),*(struct),*((*(struct`),*(char),*(char),array(struct(int,int,*(void),*(void))))->(void)),*(struct),*(char),*(void)))
)	O
;	O
newval	*(char)
->	O
value	*(void)
=	O
mu_sieve_strdup	(*(struct),*(char))->(*(char))
(	O
child	*(struct(struct(struct(*(char),int,int),struct(*(char),int,int)),int,*(struct),*(struct),*(struct),*(struct),*(*(char)),long,long,*(struct(int,int,*(char),*(char),*(void))),long,long,*(struct(enum(int,int,int,int,int),*(char),struct(struct`,struct`),union(*`,long,struct`))),long,long,long,*(union(*((*`)->(void)),*((*`)->(int)),*(struct`),*((*`,*`,*`)->(int)),long,long,long,int,*(char),int)),enum(int,int,int,int,int),long,long,*(struct),*(char),*(struct(int,int)),long,long,*(struct),*(char),long,long,long,*((*(struct`),*(struct`),*(char))->(int)),int,array(struct(array(long),int,struct(array(long)))),*(struct),*(struct),long,*(struct),int,int,int,struct(struct(*(char),int,int),struct(*(char),int,int)),int,struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct),*(struct),*((*(struct`),*(char),*(char),array(struct(int,int,*(void),*(void))))->(void)),*(struct),*(char),*(void)))
,	O
val	*(char)
->	O
value	*(void)
)	O
;	O
mu_assoc_install	(*(struct),*(char),*(void))->(int)
(	O
child	*(struct(struct(struct(*(char),int,int),struct(*(char),int,int)),int,*(struct),*(struct),*(struct),*(struct),*(*(char)),long,long,*(struct(int,int,*(char),*(char),*(void))),long,long,*(struct(enum(int,int,int,int,int),*(char),struct(struct`,struct`),union(*`,long,struct`))),long,long,long,*(union(*((*`)->(void)),*((*`)->(int)),*(struct`),*((*`,*`,*`)->(int)),long,long,long,int,*(char),int)),enum(int,int,int,int,int),long,long,*(struct),*(char),*(struct(int,int)),long,long,*(struct),*(char),long,long,long,*((*(struct`),*(struct`),*(char))->(int)),int,array(struct(array(long),int,struct(array(long)))),*(struct),*(struct),long,*(struct),int,int,int,struct(struct(*(char),int,int),struct(*(char),int,int)),int,struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct),*(struct),*((*(struct`),*(char),*(char),array(struct(int,int,*(void),*(void))))->(void)),*(struct),*(char),*(void)))
->	O
vartab	*(struct)
,	O
name	*(char)
,	O
newval	*(char)
)	O
;	O
}	O
mu_iterator_destroy	(*(*(struct)))->(void)
(	O
&	O
itr	*(struct)
)	O
;	O
rc	int
=	O
mu_list_foreach	(*(struct),*((*(void),*(void))->(int)),*(void))->(int)
(	O
parent	*(struct(struct(struct(*(char),int,int),struct(*(char),int,int)),enum(int,int,int),*(char),*(struct(int,union(*`,*`,struct`))),*(struct),*(struct(struct(struct`,struct`),enum(int,int,int),*(char),*(struct`),*(struct`),*(struct`)))))
->	O
init_var	*(struct)
,	O
copy_init_var	(*(void),*(void))->(int)
,	O
child	*(struct(struct(struct(*(char),int,int),struct(*(char),int,int)),int,*(struct),*(struct),*(struct),*(struct),*(*(char)),long,long,*(struct(int,int,*(char),*(char),*(void))),long,long,*(struct(enum(int,int,int,int,int),*(char),struct(struct`,struct`),union(*`,long,struct`))),long,long,long,*(union(*((*`)->(void)),*((*`)->(int)),*(struct`),*((*`,*`,*`)->(int)),long,long,long,int,*(char),int)),enum(int,int,int,int,int),long,long,*(struct),*(char),*(struct(int,int)),long,long,*(struct),*(char),long,long,long,*((*(struct`),*(struct`),*(char))->(int)),int,array(struct(array(long),int,struct(array(long)))),*(struct),*(struct),long,*(struct),int,int,int,struct(struct(*(char),int,int),struct(*(char),int,int)),int,struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct),*(struct),*((*(struct`),*(char),*(char),array(struct(int,int,*(void),*(void))))->(void)),*(struct),*(char),*(void)))
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_sieve_error	(*(struct),*(char))->(void)
(	O
child	*(struct(struct(struct(*(char),int,int),struct(*(char),int,int)),int,*(struct),*(struct),*(struct),*(struct),*(*(char)),long,long,*(struct(int,int,*(char),*(char),*(void))),long,long,*(struct(enum(int,int,int,int,int),*(char),struct(struct`,struct`),union(*`,long,struct`))),long,long,long,*(union(*((*`)->(void)),*((*`)->(int)),*(struct`),*((*`,*`,*`)->(int)),long,long,long,int,*(char),int)),enum(int,int,int,int,int),long,long,*(struct),*(char),*(struct(int,int)),long,long,*(struct),*(char),long,long,long,*((*(struct`),*(struct`),*(char))->(int)),int,array(struct(array(long),int,struct(array(long)))),*(struct),*(struct),long,*(struct),int,int,int,struct(struct(*(char),int,int),struct(*(char),int,int)),int,struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct),*(struct),*((*(struct`),*(char),*(char),array(struct(int,int,*(void),*(void))))->(void)),*(struct),*(char),*(void)))
,	O
"copy_init_var: %s"	*(char)
,	O
mu_strerror	(int)->(*(char))
(	O
rc	int
)	O
)	O
;	O
mu_sieve_abort	(*(struct))->(void)
(	O
child	*(struct(struct(struct(*(char),int,int),struct(*(char),int,int)),int,*(struct),*(struct),*(struct),*(struct),*(*(char)),long,long,*(struct(int,int,*(char),*(char),*(void))),long,long,*(struct(enum(int,int,int,int,int),*(char),struct(struct`,struct`),union(*`,long,struct`))),long,long,long,*(union(*((*`)->(void)),*((*`)->(int)),*(struct`),*((*`,*`,*`)->(int)),long,long,long,int,*(char),int)),enum(int,int,int,int,int),long,long,*(struct),*(char),*(struct(int,int)),long,long,*(struct),*(char),long,long,long,*((*(struct`),*(struct`),*(char))->(int)),int,array(struct(array(long),int,struct(array(long)))),*(struct),*(struct),long,*(struct),int,int,int,struct(struct(*(char),int,int),struct(*(char),int,int)),int,struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct),*(struct),*((*(struct`),*(char),*(char),array(struct(int,int,*(void),*(void))))->(void)),*(struct),*(char),*(void)))
)	O
;	O
}	O
}	O
static	O
int	O
sieve_setvar	(*(void),*(void))->(int)
(	O
void	O
*	O
item	*(void)
,	O
void	O
*	O
data	*(void)
)	O
{	O
struct	O
mu_sieve_variable_initializer	struct(*(char),*(char))
*	O
vini	*(struct(*(char),*(char)))
=	O
item	*(void)
;	O
mu_sieve_machine_t	*(struct)
mach	*(struct)
=	O
data	*(void)
;	O
variable_set	(*(struct(struct(struct(*`,int,int),struct(*`,int,int)),int,*(struct),*(struct),*(struct),*(struct),*(*(char)),long,long,*(struct(int,int,*`,*`,*`)),long,long,*(struct(enum(int,int,int,int,int),*`,struct`,union`)),long,long,long,*(union(*`,*`,*`,*`,long,long,long,int,*`,int)),enum(int,int,int,int,int),long,long,*(struct),*(char),*(struct(int,int)),long,long,*(struct),*(char),long,long,long,*((*`,*`,*`)->(int)),int,array(struct(array(long),int,struct(array(long)))),*(struct),*(struct),long,*(struct),int,int,int,struct(struct(*`,int,int),struct(*`,int,int)),int,struct(struct(*`,int,int),struct(*`,int,int)),*(struct),*(struct),*((*`,*`,*`,array(struct(int,int,*(void),*(void))))->(void)),*(struct),*(char),*(void))),*(char),*(char))->(void)
(	O
mach	*(struct)
,	O
vini	*(struct(*(char),*(char)))
->	O
name	*(char)
,	O
mu_sieve_strdup	(*(struct),*(char))->(*(char))
(	O
mach	*(struct)
,	O
vini	*(struct(*(char),*(char)))
->	O
value	*(void)
)	O
)	O
;	O
return	O
0	int
;	O
}	O
void	O
mu_i_sv_init_variables	(*(struct(struct(struct(*`,int,int),struct(*`,int,int)),int,*(struct),*(struct),*(struct),*(struct),*(*(char)),long,long,*(struct(int,int,*`,*`,*`)),long,long,*(struct(enum(int,int,int,int,int),*`,struct`,union`)),long,long,long,*(union(*`,*`,*`,*`,long,long,long,int,*`,int)),enum(int,int,int,int,int),long,long,*(struct),*(char),*(struct(int,int)),long,long,*(struct),*(char),long,long,long,*((*`,*`,*`)->(int)),int,array(struct(array(long),int,struct(array(long)))),*(struct),*(struct),long,*(struct),int,int,int,struct(struct(*`,int,int),struct(*`,int,int)),int,struct(struct(*`,int,int),struct(*`,int,int)),*(struct),*(struct),*((*`,*`,*`,array(struct(int,int,*(void),*(void))))->(void)),*(struct),*(char),*(void))))->(void)
(	O
mu_sieve_machine_t	*(struct)
mach	*(struct)
)	O
{	O
if	O
(	O
mu_sieve_has_variables	(*(struct))->(int)
(	O
mach	*(struct)
)	O
)	O
{	O
mu_assoc_clear	(*(struct))->(void)
(	O
mach	*(struct)
->	O
vartab	*(struct)
)	O
;	O
mu_list_foreach	(*(struct),*((*(void),*(void))->(int)),*(void))->(int)
(	O
mach	*(struct)
->	O
init_var	*(struct)
,	O
sieve_setvar	(*(void),*(void))->(int)
,	O
mach	*(struct)
)	O
;	O
}	O
}	O
