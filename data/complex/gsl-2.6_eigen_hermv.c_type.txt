gsl_eigen_hermv_workspace	struct(long,*(double),*(double),*(double),*(double),*(double))
*	O
gsl_eigen_hermv_alloc	(long)->(*(struct(long,*(double),*(double),*(double),*(double),*(double))))
(	O
const	O
size_t	long
n	int
)	O
{	O
gsl_eigen_hermv_workspace	struct(long,*(double),*(double),*(double),*(double),*(double))
*	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
;	O
if	O
(	O
n	int
==	O
0	int
)	O
{	O
GSL_ERROR_NULL	O
(	O
"matrix dimension must be positive integer"	*(char)
,	O
GSL_EINVAL	int
)	O
;	O
}	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
=	O
(	O
gsl_eigen_hermv_workspace	struct(long,*(double),*(double),*(double),*(double),*(double))
*	O
)	O
malloc	(long)->(*(void))
(	O
sizeof	O
(	O
gsl_eigen_hermv_workspace	struct(long,*(double),*(double),*(double),*(double),*(double))
)	O
)	O
;	O
if	O
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
==	O
0	int
)	O
{	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for workspace"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
d	*(double)
=	O
(	O
double	O
*	O
)	O
malloc	(long)->(*(void))
(	O
n	int
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
if	O
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
d	*(double)
==	O
0	int
)	O
{	O
free	(*(void))->(void)
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for diagonal"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
sd	*(double)
=	O
(	O
double	O
*	O
)	O
malloc	(long)->(*(void))
(	O
n	int
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
if	O
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
sd	*(double)
==	O
0	int
)	O
{	O
free	(*(void))->(void)
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
d	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for subdiagonal"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
tau	double
=	O
(	O
double	O
*	O
)	O
malloc	(long)->(*(void))
(	O
2	int
*	O
n	int
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
if	O
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
tau	double
==	O
0	int
)	O
{	O
free	(*(void))->(void)
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
sd	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
d	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for tau"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
gc	*(double)
=	O
(	O
double	O
*	O
)	O
malloc	(long)->(*(void))
(	O
n	int
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
if	O
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
gc	*(double)
==	O
0	int
)	O
{	O
free	(*(void))->(void)
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
tau	double
)	O
;	O
free	(*(void))->(void)
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
sd	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
d	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for cosines"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
gs	*(double)
=	O
(	O
double	O
*	O
)	O
malloc	(long)->(*(void))
(	O
n	int
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
if	O
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
gs	*(double)
==	O
0	int
)	O
{	O
free	(*(void))->(void)
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
gc	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
tau	double
)	O
;	O
free	(*(void))->(void)
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
sd	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
d	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for sines"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
size	long
=	O
n	int
;	O
return	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
;	O
}	O
void	O
gsl_eigen_hermv_free	(*(struct(long,*(double),*(double),*(double),*(double),*(double))))->(void)
(	O
gsl_eigen_hermv_workspace	struct(long,*(double),*(double),*(double),*(double),*(double))
*	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
)	O
{	O
RETURN_IF_NULL	O
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
)	O
;	O
free	(*(void))->(void)
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
gs	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
gc	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
tau	double
)	O
;	O
free	(*(void))->(void)
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
sd	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
d	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
)	O
;	O
}	O
int	O
gsl_eigen_hermv	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,*(double),*(double),*(double),*(double),*(double))))->(int)
(	O
gsl_matrix_complex	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
A	*(float)
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
eval	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
gsl_matrix_complex	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
evec	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
gsl_eigen_hermv_workspace	struct(long,*(double),*(double),*(double),*(double),*(double))
*	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
)	O
{	O
if	O
(	O
A	*(float)
->	O
size1	long
!=	O
A	*(float)
->	O
size2	long
)	O
{	O
GSL_ERROR	O
(	O
"matrix must be square to compute eigenvalues"	*(char)
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
if	O
(	O
eval	*(struct(long,long,*(double),*(struct(long,*(double))),int))
->	O
size	long
!=	O
A	*(float)
->	O
size1	long
)	O
{	O
GSL_ERROR	O
(	O
"eigenvalue vector must match matrix size"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
evec	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size1	long
!=	O
A	*(float)
->	O
size1	long
||	O
evec	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size2	long
!=	O
A	*(float)
->	O
size1	long
)	O
{	O
GSL_ERROR	O
(	O
"eigenvector matrix must match matrix size"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
const	O
size_t	long
N	int
=	O
A	*(float)
->	O
size1	long
;	O
double	O
*	O
const	O
d	*(double)
=	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
d	*(double)
;	O
double	O
*	O
const	O
sd	*(double)
=	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
sd	*(double)
;	O
size_t	long
a	double
,	O
b	double
;	O
if	O
(	O
N	int
==	O
1	int
)	O
{	O
gsl_complex	struct(array(double))
A00	struct(array(double))
=	O
gsl_matrix_complex_get	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long)->(struct(array(double)))
(	O
A	*(float)
,	O
0	int
,	O
0	int
)	O
;	O
gsl_vector_set	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,double)->(void)
(	O
eval	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
0	int
,	O
GSL_REAL	O
(	O
A00	struct(array(double))
)	O
)	O
;	O
gsl_matrix_complex_set	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,struct(array(double)))->(void)
(	O
evec	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
0	int
,	O
0	int
,	O
GSL_COMPLEX_ONE	O
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
{	O
gsl_vector_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
d_vec	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_vector_view_array	(*(double),long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
d	*(double)
,	O
N	int
)	O
;	O
gsl_vector_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
sd_vec	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_vector_view_array	(*(double),long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
sd	*(double)
,	O
N	int
-	O
1	int
)	O
;	O
gsl_vector_complex_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
tau_vec	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_vector_complex_view_array	(*(double),long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
tau	double
,	O
N	int
-	O
1	int
)	O
;	O
gsl_linalg_hermtd_decomp	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
A	*(float)
,	O
&	O
tau_vec	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
gsl_linalg_hermtd_unpack	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
A	*(float)
,	O
&	O
tau_vec	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
evec	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
&	O
d_vec	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
sd_vec	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
}	O
chop_small_elements	(long,array(double),array(double))->(void)
(	O
N	int
,	O
d	*(double)
,	O
sd	*(double)
)	O
;	O
b	double
=	O
N	int
-	O
1	int
;	O
while	O
(	O
b	double
>	O
0	int
)	O
{	O
if	O
(	O
sd	*(double)
[	O
b	double
-	O
1	int
]	O
==	O
0.0	int
||	O
isnan	(double)->(int)
(	O
sd	*(double)
[	O
b	double
-	O
1	int
]	O
)	O
)	O
{	O
b	double
--	O
;	O
continue	O
;	O
}	O
a	double
=	O
b	double
-	O
1	int
;	O
while	O
(	O
a	double
>	O
0	int
)	O
{	O
if	O
(	O
sd	*(double)
[	O
a	double
-	O
1	int
]	O
==	O
0.0	int
)	O
{	O
break	O
;	O
}	O
a	double
--	O
;	O
}	O
{	O
size_t	long
i	long
;	O
const	O
size_t	long
n_block	long
=	O
b	double
-	O
a	double
+	O
1	int
;	O
double	O
*	O
d_block	*(double)
=	O
d	*(double)
+	O
a	double
;	O
double	O
*	O
sd_block	*(double)
=	O
sd	*(double)
+	O
a	double
;	O
double	O
*	O
const	O
gc	*(double)
=	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
gc	*(double)
;	O
double	O
*	O
const	O
gs	*(double)
=	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
gs	*(double)
;	O
qrstep	(long,array(double),array(double),array(double),array(double))->(void)
(	O
n_block	long
,	O
d_block	*(double)
,	O
sd_block	*(double)
,	O
gc	*(double)
,	O
gs	*(double)
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
n_block	long
-	O
1	int
;	O
i	long
++	O
)	O
{	O
const	O
double	O
c	*(float)
=	O
gc	*(double)
[	O
i	long
]	O
,	O
s	*(float)
=	O
gs	*(double)
[	O
i	long
]	O
;	O
size_t	long
k	long
;	O
for	O
(	O
k	long
=	O
0	int
;	O
k	long
<	O
N	int
;	O
k	long
++	O
)	O
{	O
gsl_complex	struct(array(double))
qki	struct(array(double))
=	O
gsl_matrix_complex_get	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long)->(struct(array(double)))
(	O
evec	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
k	long
,	O
a	double
+	O
i	long
)	O
;	O
gsl_complex	struct(array(double))
qkj	struct(array(double))
=	O
gsl_matrix_complex_get	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long)->(struct(array(double)))
(	O
evec	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
k	long
,	O
a	double
+	O
i	long
+	O
1	int
)	O
;	O
gsl_complex	struct(array(double))
x1	double
=	O
gsl_complex_mul_real	(struct(array(double)),double)->(struct(array(double)))
(	O
qki	struct(array(double))
,	O
c	*(float)
)	O
;	O
gsl_complex	struct(array(double))
y1	(double)->(double)
=	O
gsl_complex_mul_real	(struct(array(double)),double)->(struct(array(double)))
(	O
qkj	struct(array(double))
,	O
-	O
s	*(float)
)	O
;	O
gsl_complex	struct(array(double))
x2	double
=	O
gsl_complex_mul_real	(struct(array(double)),double)->(struct(array(double)))
(	O
qki	struct(array(double))
,	O
s	*(float)
)	O
;	O
gsl_complex	struct(array(double))
y2	struct(array(double))
=	O
gsl_complex_mul_real	(struct(array(double)),double)->(struct(array(double)))
(	O
qkj	struct(array(double))
,	O
c	*(float)
)	O
;	O
gsl_complex	struct(array(double))
qqki	struct(array(double))
=	O
gsl_complex_add	(struct(array(double)),struct(array(double)))->(struct(array(double)))
(	O
x1	double
,	O
y1	(double)->(double)
)	O
;	O
gsl_complex	struct(array(double))
qqkj	struct(array(double))
=	O
gsl_complex_add	(struct(array(double)),struct(array(double)))->(struct(array(double)))
(	O
x2	double
,	O
y2	struct(array(double))
)	O
;	O
gsl_matrix_complex_set	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,struct(array(double)))->(void)
(	O
evec	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
k	long
,	O
a	double
+	O
i	long
,	O
qqki	struct(array(double))
)	O
;	O
gsl_matrix_complex_set	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,struct(array(double)))->(void)
(	O
evec	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
k	long
,	O
a	double
+	O
i	long
+	O
1	int
,	O
qqkj	struct(array(double))
)	O
;	O
}	O
}	O
chop_small_elements	(long,array(double),array(double))->(void)
(	O
n_block	long
,	O
d_block	*(double)
,	O
sd_block	*(double)
)	O
;	O
}	O
}	O
{	O
gsl_vector_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
d_vec	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_vector_view_array	(*(double),long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
d	*(double)
,	O
N	int
)	O
;	O
gsl_vector_memcpy	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
eval	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
&	O
d_vec	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
