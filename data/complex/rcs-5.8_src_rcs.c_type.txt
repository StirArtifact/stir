struct	O
top	struct(*(struct(*(char),*(char),*(char),*(()->(void)))),struct(*(char),bool,bool,bool,bool,bool,bool,bool,int,bool,int,int,bool,bool,bool,int,*(char),struct(bool,long),*(char),long,bool,bool,*(char),long,*(struct(*(char),enum(int,int,int))),*(struct),*(struct),*(struct)),struct(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),struct(bool,*(char),*(char),*(char),*(char),*(char))),struct(*(char),int,struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(struct(*(char),*(char),long,*(struct),long,*(struct),long,*(struct),bool,*(struct),*(struct),int,long,*(struct),*(struct),long,*(struct),*(struct))),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)),struct(*(char),long)),struct(*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char),bool))
*	O
top	struct(*(struct(*(char),*(char),*(char),*(()->(void)))),struct(*(char),bool,bool,bool,bool,bool,bool,bool,int,bool,int,int,bool,bool,bool,int,*(char),struct(bool,long),*(char),long,bool,bool,*(char),long,*(struct(*(char),enum(int,int,int))),*(struct),*(struct),*(struct)),struct(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),struct(bool,*(char),*(char),*(char),*(char),*(char))),struct(*(char),int,struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(struct(*(char),*(char),long,*(struct),long,*(struct),long,*(struct),bool,*(struct),*(struct),int,long,*(struct),*(struct),long,*(struct),*(struct))),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)),struct(*(char),long)),struct(*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char),bool))
;	O
struct	O
u_log	struct(*(char),struct(*(char),long))
{	O
char	O
const	O
*	O
revno	*(char)
;	O
struct	O
cbuf	struct(*(char),long)
message	struct(*(char),long)
;	O
}	O
;	O
struct	O
u_state	struct(*(char),*(char))
{	O
char	O
const	O
*	O
revno	*(char)
;	O
char	O
const	O
*	O
status	int
;	O
}	O
;	O
enum	O
changeaccess	enum(int,int)
{	O
append	int
,	O
erase	int
}	O
;	O
struct	O
chaccess	struct(*(char),enum(int,int))
{	O
char	O
const	O
*	O
login	*(char)
;	O
enum	O
changeaccess	enum(int,int)
command	enum(int,int)
;	O
}	O
;	O
struct	O
delrevpair	struct(*(char),*(char),int)
{	O
char	O
const	O
*	O
strt	*(char)
;	O
char	O
const	O
*	O
end	*(char)
;	O
int	O
code	int
;	O
}	O
;	O
static	O
struct	O
cbuf	struct(*(char),long)
numrev	struct(*(char),long)
;	O
static	O
char	O
const	O
*	O
headstate	*(char)
;	O
static	O
bool	bool
chgheadstate	bool
,	O
lockhead	bool
,	O
unlockcaller	bool
,	O
suppress_mail	bool
;	O
static	O
int	O
exitstatus	int
;	O
static	O
struct	O
link	struct(*(void),*(struct(*(void),*(struct(*(void),*(struct`))))))
*	O
newlocklst	*(struct(*(void),*(struct(*(void),*(struct`)))))
,	O
*	O
rmvlocklst	*(struct(*(void),*(struct(*(void),*(struct`)))))
;	O
static	O
struct	O
link	struct(*(void),*(struct(*(void),*(struct(*(void),*(struct`))))))
messagelst	struct(*(void),*(struct(*(void),*(struct(*`,*`)))))
;	O
static	O
struct	O
link	struct(*(void),*(struct(*(void),*(struct(*(void),*(struct`))))))
statelst	struct(*(void),*(struct(*(void),*(struct(*`,*`)))))
;	O
static	O
struct	O
link	struct(*(void),*(struct(*(void),*(struct(*(void),*(struct`))))))
assoclst	struct(*(void),*(struct(*(void),*(struct(*`,*`)))))
;	O
static	O
struct	O
link	struct(*(void),*(struct(*(void),*(struct(*(void),*(struct`))))))
chaccess	struct(*(char),enum(int,int))
;	O
static	O
struct	O
delrevpair	struct(*(char),*(char),int)
delrev	struct(*(char),*(char),int)
;	O
static	O
struct	O
delta	struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long)),bool,long)
*	O
cuthead	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
,	O
*	O
cuttail	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
,	O
*	O
delstrt	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
;	O
static	O
void	O
cleanup	()->(void)
(	O
void	O
)	O
{	O
if	O
(	O
FLOW	O
(	O
erroneousp	bool
)	O
)	O
exitstatus	int
=	O
EXIT_FAILURE	int
;	O
fro_zclose	(*(*(struct(int,long,enum(int,int,int),*(char),*(char),*(char),*((*`)->(void)),*(struct`),long))))->(void)
(	O
&	O
FLOW	O
(	O
from	*(struct)
)	O
)	O
;	O
Ozclose	(*(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char)))))->(void)
(	O
&	O
FLOW	O
(	O
res	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
)	O
;	O
ORCSclose	()->(void)
(	O
)	O
;	O
dirtempunlink	()->(void)
(	O
)	O
;	O
}	O
static	O
exiting	O
void	O
exiterr	*(()->(void))
(	O
void	O
)	O
{	O
ORCSerror	()->(void)
(	O
)	O
;	O
dirtempunlink	()->(void)
(	O
)	O
;	O
tempunlink	()->(void)
(	O
)	O
;	O
exit_failurefully	()->(void)
(	O
)	O
;	O
}	O
static	O
void	O
getassoclst	(*(*(struct(*(void),*(struct`)))),*(char))->(void)
(	O
struct	O
link	struct(*(void),*(struct(*(void),*(struct(*(void),*(struct`))))))
*	O
*	O
tp	*(struct(*(void),*(struct(*(void),*(struct`)))))
,	O
char	O
*	O
sp	*(char)
)	O
{	O
char	O
option	*(char)
=	O
*	O
sp	*(char)
++	O
;	O
struct	O
u_symdef	struct(struct(*(char),*(char)),bool)
*	O
ud	*(struct(struct(*(char),*(char)),bool))
;	O
char	O
const	O
*	O
name	*(char)
;	O
size_t	long
len	char
;	O
int	O
c	int
=	O
*	O
sp	*(char)
;	O
SKIPWS	O
(	O
)	O
;	O
name	*(char)
=	O
SHSNIP	O
(	O
&	O
len	char
,	O
sp	*(char)
,	O
checksym	(*(char),int)->(*(char))
(	O
sp	*(char)
,	O
':'	O
)	O
)	O
;	O
sp	*(char)
+=	O
len	char
;	O
c	int
=	O
*	O
sp	*(char)
;	O
SKIPWS	O
(	O
)	O
;	O
if	O
(	O
c	int
!=	O
':'	O
&&	O
c	int
!=	O
'\0'	O
)	O
{	O
PERR	O
(	O
"invalid string `%s' after option `-%c'"	*(char)
,	O
sp	*(char)
,	O
option	*(char)
)	O
;	O
return	O
;	O
}	O
ud	*(struct(struct(*(char),*(char)),bool))
=	O
ZLLOC	O
(	O
1	int
,	O
struct	O
u_symdef	struct(struct(*(char),*(char)),bool)
)	O
;	O
ud	*(struct(struct(*(char),*(char)),bool))
->	O
u	struct(*(char),*(char))
.	O
meaningful	*(char)
=	O
name	*(char)
;	O
ud	*(struct(struct(*(char),*(char)),bool))
->	O
override	bool
=	O
(	O
'N'	O
==	O
option	*(char)
)	O
;	O
if	O
(	O
c	int
==	O
'\0'	O
)	O
ud	*(struct(struct(*(char),*(char)),bool))
->	O
u	struct(*(char),*(char))
.	O
underlying	*(char)
=	O
NULL	O
;	O
else	O
{	O
c	int
=	O
*	O
++	O
sp	*(char)
;	O
SKIPWS	O
(	O
)	O
;	O
ud	*(struct(struct(*(char),*(char)),bool))
->	O
u	struct(*(char),*(char))
.	O
underlying	*(char)
=	O
sp	*(char)
;	O
}	O
*	O
tp	*(struct(*(void),*(struct(*(void),*(struct`)))))
=	O
extend	(*(struct(*(void),*(struct(*`,*`)))),*(void),*(struct(*(char),*(struct),*(void),long)))->(*(struct(*(void),*(struct(*`,*`)))))
(	O
*	O
tp	*(struct(*(void),*(struct(*(void),*(struct`)))))
,	O
ud	*(struct(struct(*(char),*(char)),bool))
,	O
PLEXUS	O
)	O
;	O
}	O
static	O
void	O
getchaccess	(*(*(struct(*(void),*(struct`)))),*(char),enum(int,int))->(void)
(	O
struct	O
link	struct(*(void),*(struct(*(void),*(struct(*(void),*(struct`))))))
*	O
*	O
tp	*(struct(*(void),*(struct(*(void),*(struct`)))))
,	O
char	O
const	O
*	O
login	*(char)
,	O
enum	O
changeaccess	enum(int,int)
command	enum(int,int)
)	O
{	O
register	O
struct	O
chaccess	struct(*(char),enum(int,int))
*	O
ch	*(struct(*(char),enum(int,int)))
;	O
ch	*(struct(*(char),enum(int,int)))
=	O
ZLLOC	O
(	O
1	int
,	O
struct	O
chaccess	struct(*(char),enum(int,int))
)	O
;	O
ch	*(struct(*(char),enum(int,int)))
->	O
login	*(char)
=	O
login	*(char)
;	O
ch	*(struct(*(char),enum(int,int)))
->	O
command	enum(int,int)
=	O
command	enum(int,int)
;	O
*	O
tp	*(struct(*(void),*(struct(*(void),*(struct`)))))
=	O
extend	(*(struct(*(void),*(struct(*`,*`)))),*(void),*(struct(*(char),*(struct),*(void),long)))->(*(struct(*(void),*(struct(*`,*`)))))
(	O
*	O
tp	*(struct(*(void),*(struct(*(void),*(struct`)))))
,	O
ch	*(struct(*(char),enum(int,int)))
,	O
PLEXUS	O
)	O
;	O
}	O
static	O
void	O
getaccessor	(*(*(struct(*(void),*(struct`)))),*(char),enum(int,int))->(void)
(	O
struct	O
link	struct(*(void),*(struct(*(void),*(struct(*(void),*(struct`))))))
*	O
*	O
tp	*(struct(*(void),*(struct(*(void),*(struct`)))))
,	O
char	O
*	O
opt	*(char)
,	O
enum	O
changeaccess	enum(int,int)
command	enum(int,int)
)	O
{	O
register	O
int	O
c	int
;	O
register	O
char	O
*	O
sp	*(char)
;	O
sp	*(char)
=	O
opt	*(char)
;	O
while	O
(	O
(	O
c	int
=	O
*	O
++	O
sp	*(char)
)	O
==	O
' '	O
||	O
c	int
==	O
'\n'	O
||	O
c	int
==	O
'\t'	O
||	O
c	int
==	O
','	O
)	O
continue	O
;	O
if	O
(	O
c	int
==	O
'\0'	O
)	O
{	O
if	O
(	O
command	enum(int,int)
==	O
erase	int
&&	O
sp	*(char)
-	O
opt	*(char)
==	O
1	int
)	O
{	O
getchaccess	(*(*(struct(*(void),*(struct`)))),*(char),enum(int,int))->(void)
(	O
tp	*(struct(*(void),*(struct(*(void),*(struct`)))))
,	O
NULL	O
,	O
command	enum(int,int)
)	O
;	O
return	O
;	O
}	O
PERR	O
(	O
"missing login name after option -a or -e"	*(char)
)	O
;	O
return	O
;	O
}	O
while	O
(	O
c	int
!=	O
'\0'	O
)	O
{	O
size_t	long
len	char
;	O
getchaccess	(*(*(struct(*(void),*(struct`)))),*(char),enum(int,int))->(void)
(	O
tp	*(struct(*(void),*(struct(*(void),*(struct`)))))
,	O
SHSNIP	O
(	O
&	O
len	char
,	O
sp	*(char)
,	O
checkid	(*(char),int)->(*(char))
(	O
sp	*(char)
,	O
','	O
)	O
)	O
,	O
command	enum(int,int)
)	O
;	O
sp	*(char)
+=	O
len	char
;	O
c	int
=	O
*	O
sp	*(char)
;	O
while	O
(	O
c	int
==	O
' '	O
||	O
c	int
==	O
'\n'	O
||	O
c	int
==	O
'\t'	O
||	O
c	int
==	O
','	O
)	O
c	int
=	O
(	O
*	O
++	O
sp	*(char)
)	O
;	O
}	O
}	O
static	O
void	O
getmessage	(*(*(struct(*(void),*(struct`)))),*(char))->(void)
(	O
struct	O
link	struct(*(void),*(struct(*(void),*(struct(*(void),*(struct`))))))
*	O
*	O
tp	*(struct(*(void),*(struct(*(void),*(struct`)))))
,	O
char	O
*	O
option	*(char)
)	O
{	O
struct	O
u_log	struct(*(char),struct(*(char),long))
*	O
um	*(struct(*(char),struct(*(char),long)))
;	O
struct	O
cbuf	struct(*(char),long)
cb	*(struct(*(char),long))
;	O
char	O
*	O
m	*(struct)
;	O
if	O
(	O
!	O
(	O
m	*(struct)
=	O
strchr	(*(char),int)->(*(char))
(	O
option	*(char)
,	O
':'	O
)	O
)	O
)	O
{	O
PERR	O
(	O
"-m option lacks %s"	*(char)
,	O
ks_revno	array(char)
)	O
;	O
return	O
;	O
}	O
*	O
m	*(struct)
++	O
=	O
'\0'	O
;	O
cb	*(struct(*(char),long))
=	O
cleanlogmsg	(*(char),long)->(struct(*(char),long))
(	O
m	*(struct)
,	O
strlen	(*(char))->(long)
(	O
m	*(struct)
)	O
)	O
;	O
if	O
(	O
!	O
cb	*(struct(*(char),long))
.	O
size	long
)	O
set_empty_log_message	(*(struct(*(char),long)))->(void)
(	O
&	O
cb	*(struct(*(char),long))
)	O
;	O
um	*(struct(*(char),struct(*(char),long)))
=	O
ZLLOC	O
(	O
1	int
,	O
struct	O
u_log	struct(*(char),struct(*(char),long))
)	O
;	O
um	*(struct(*(char),struct(*(char),long)))
->	O
revno	*(char)
=	O
option	*(char)
;	O
um	*(struct(*(char),struct(*(char),long)))
->	O
message	struct(*(char),long)
=	O
cb	*(struct(*(char),long))
;	O
*	O
tp	*(struct(*(void),*(struct(*(void),*(struct`)))))
=	O
extend	(*(struct(*(void),*(struct(*`,*`)))),*(void),*(struct(*(char),*(struct),*(void),long)))->(*(struct(*(void),*(struct(*`,*`)))))
(	O
*	O
tp	*(struct(*(void),*(struct(*(void),*(struct`)))))
,	O
um	*(struct(*(char),struct(*(char),long)))
,	O
PLEXUS	O
)	O
;	O
}	O
static	O
void	O
getstates	(*(*(struct(*(void),*(struct`)))),*(char))->(void)
(	O
struct	O
link	struct(*(void),*(struct(*(void),*(struct(*(void),*(struct`))))))
*	O
*	O
tp	*(struct(*(void),*(struct(*(void),*(struct`)))))
,	O
char	O
*	O
sp	*(char)
)	O
{	O
char	O
const	O
*	O
temp	*(char)
;	O
struct	O
u_state	struct(*(char),*(char))
*	O
us	*(struct(*(char),*(char)))
;	O
register	O
int	O
c	int
;	O
size_t	long
len	char
;	O
while	O
(	O
(	O
c	int
=	O
*	O
++	O
sp	*(char)
)	O
==	O
' '	O
||	O
c	int
==	O
'\t'	O
||	O
c	int
==	O
'\n'	O
)	O
continue	O
;	O
temp	*(char)
=	O
checkid	(*(char),int)->(*(char))
(	O
sp	*(char)
,	O
':'	O
)	O
;	O
temp	*(char)
=	O
SHSNIP	O
(	O
&	O
len	char
,	O
sp	*(char)
,	O
temp	*(char)
)	O
;	O
sp	*(char)
+=	O
len	char
;	O
c	int
=	O
*	O
sp	*(char)
;	O
while	O
(	O
c	int
==	O
' '	O
||	O
c	int
==	O
'\t'	O
||	O
c	int
==	O
'\n'	O
)	O
c	int
=	O
*	O
++	O
sp	*(char)
;	O
if	O
(	O
c	int
==	O
'\0'	O
)	O
{	O
chgheadstate	bool
=	O
true	int
;	O
headstate	*(char)
=	O
temp	*(char)
;	O
return	O
;	O
}	O
else	O
if	O
(	O
c	int
!=	O
':'	O
)	O
{	O
PERR	O
(	O
"missing ':' after state in option -s"	*(char)
)	O
;	O
return	O
;	O
}	O
while	O
(	O
(	O
c	int
=	O
*	O
++	O
sp	*(char)
)	O
==	O
' '	O
||	O
c	int
==	O
'\t'	O
||	O
c	int
==	O
'\n'	O
)	O
continue	O
;	O
us	*(struct(*(char),*(char)))
=	O
ZLLOC	O
(	O
1	int
,	O
struct	O
u_state	struct(*(char),*(char))
)	O
;	O
us	*(struct(*(char),*(char)))
->	O
status	int
=	O
temp	*(char)
;	O
us	*(struct(*(char),*(char)))
->	O
revno	*(char)
=	O
sp	*(char)
;	O
*	O
tp	*(struct(*(void),*(struct(*(void),*(struct`)))))
=	O
extend	(*(struct(*(void),*(struct(*`,*`)))),*(void),*(struct(*(char),*(struct),*(void),long)))->(*(struct(*(void),*(struct(*`,*`)))))
(	O
*	O
tp	*(struct(*(void),*(struct(*(void),*(struct`)))))
,	O
us	*(struct(*(char),*(char)))
,	O
PLEXUS	O
)	O
;	O
}	O
static	O
void	O
putdelrev	(*(char),*(char),bool)->(void)
(	O
char	O
const	O
*	O
b	*(char)
,	O
char	O
const	O
*	O
e	*(char)
,	O
bool	bool
sawsep	bool
)	O
{	O
if	O
(	O
delrev	struct(*(char),*(char),int)
.	O
strt	*(char)
||	O
delrev	struct(*(char),*(char),int)
.	O
end	*(char)
)	O
{	O
PWARN	O
(	O
"ignoring spurious `-o' range `%s:%s'"	*(char)
,	O
b	*(char)
?	O
b	*(char)
:	O
"(unspecified)"	*(char)
,	O
e	*(char)
?	O
e	*(char)
:	O
"(unspecified)"	*(char)
)	O
;	O
return	O
;	O
}	O
if	O
(	O
!	O
sawsep	bool
)	O
{	O
delrev	struct(*(char),*(char),int)
.	O
strt	*(char)
=	O
b	*(char)
;	O
delrev	struct(*(char),*(char),int)
.	O
code	int
=	O
0	int
;	O
}	O
else	O
if	O
(	O
!	O
b	*(char)
||	O
!	O
b	*(char)
[	O
0	int
]	O
)	O
{	O
delrev	struct(*(char),*(char),int)
.	O
strt	*(char)
=	O
e	*(char)
;	O
delrev	struct(*(char),*(char),int)
.	O
code	int
=	O
1	int
;	O
}	O
else	O
if	O
(	O
!	O
e	*(char)
[	O
0	int
]	O
)	O
{	O
delrev	struct(*(char),*(char),int)
.	O
strt	*(char)
=	O
b	*(char)
;	O
delrev	struct(*(char),*(char),int)
.	O
code	int
=	O
2	int
;	O
}	O
else	O
{	O
delrev	struct(*(char),*(char),int)
.	O
strt	*(char)
=	O
b	*(char)
;	O
delrev	struct(*(char),*(char),int)
.	O
end	*(char)
=	O
e	*(char)
;	O
delrev	struct(*(char),*(char),int)
.	O
code	int
=	O
3	int
;	O
}	O
}	O
static	O
void	O
scanlogtext	(*(struct),*(*(struct(*(void),*(struct`)))),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*`,long,array(long))),*(struct(long,long,long,*`,long,array(long))),*(char),struct(*(char),long),*(struct(*`,*`)),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)),bool)->(void)
(	O
struct	O
editstuff	O
*	O
es	*(struct)
,	O
struct	O
wlink	struct(*(void),*(struct(*(void),*(struct(*(void),*(struct`))))))
*	O
*	O
ls	*(struct(*(void),*(struct(*(void),*(struct`)))))
,	O
struct	O
delta	struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long)),bool,long)
*	O
delta	struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long)),bool,long)
,	O
bool	bool
edit	bool
)	O
{	O
struct	O
delta	struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long)),bool,long)
const	O
*	O
nextdelta	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
;	O
struct	O
fro	struct(int,long,enum(int,int,int),*(char),*(char),*(char),*((*(struct(int,long,enum(int,int,int),*(char),*(char),*(char),*((*`)->(void)),*(struct`),long)))->(void)),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char))),long)
*	O
from	*(struct)
=	O
FLOW	O
(	O
from	*(struct)
)	O
;	O
FILE	struct
*	O
to	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
;	O
struct	O
atat	*(struct)
*	O
log	*(struct)
,	O
*	O
text	*(struct)
;	O
struct	O
range	struct(long,long)
range	struct(long,long)
;	O
for	O
(	O
;	O
;	O
*	O
ls	*(struct(*(void),*(struct(*(void),*(struct`)))))
=	O
(	O
*	O
ls	*(struct(*(void),*(struct(*(void),*(struct`)))))
)	O
->	O
next	*(struct(*(void),*(struct(*(void),*(struct`)))))
)	O
{	O
if	O
(	O
!	O
*	O
ls	*(struct(*(void),*(struct(*(void),*(struct`)))))
)	O
return	O
;	O
to	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
=	O
FLOW	O
(	O
to	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
=	O
NULL	O
;	O
nextdelta	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
=	O
(	O
*	O
ls	*(struct(*(void),*(struct(*(void),*(struct`)))))
)	O
->	O
entry	*(void)
;	O
log	*(struct)
=	O
nextdelta	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
log	*(struct)
;	O
text	*(struct)
=	O
nextdelta	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
text	*(struct)
;	O
range	struct(long,long)
.	O
beg	*(char)
=	O
nextdelta	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
neck	long
;	O
if	O
(	O
nextdelta	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
selector	bool
)	O
{	O
to	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
=	O
FLOW	O
(	O
to	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
=	O
FLOW	O
(	O
rewr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
range	struct(long,long)
.	O
end	*(char)
=	O
log	*(struct)
->	O
beg	*(char)
;	O
fro_spew_partial	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(struct(int,long,enum(int,int,int),*(char),*(char),*(char),*((*`)->(void)),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),long)),*(struct(long,long)))->(void)
(	O
to	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
from	*(struct)
,	O
&	O
range	struct(long,long)
)	O
;	O
}	O
if	O
(	O
nextdelta	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
==	O
cuttail	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
)	O
{	O
if	O
(	O
!	O
delta	struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long)),bool,long)
->	O
pretty_log	struct(*(char),long)
.	O
string	*(char)
)	O
{	O
delta	struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long)),bool,long)
->	O
pretty_log	struct(*(char),long)
=	O
string_from_atat	(*(struct(*(char),*(struct),*(void),long)),*(struct(long,long,long,*(struct(int,long,enum(int,int,int),*`,*`,*`,*`,*`,long)),long,array(long))))->(struct(*(char),long))
(	O
SINGLE	O
,	O
log	*(struct)
)	O
;	O
delta	struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long)),bool,long)
->	O
pretty_log	struct(*(char),long)
=	O
cleanlogmsg	(*(char),long)->(struct(*(char),long))
(	O
delta	struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long)),bool,long)
->	O
pretty_log	struct(*(char),long)
.	O
string	*(char)
,	O
delta	struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long)),bool,long)
->	O
pretty_log	struct(*(char),long)
.	O
size	long
)	O
;	O
}	O
}	O
else	O
if	O
(	O
nextdelta	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
pretty_log	struct(*(char),long)
.	O
string	*(char)
&&	O
nextdelta	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
selector	bool
)	O
{	O
afputc	(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(void)
(	O
SDELIM	char
,	O
to	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
putstring	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),bool,struct(*(char),long),bool)->(void)
(	O
to	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
false	int
,	O
nextdelta	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
pretty_log	struct(*(char),long)
,	O
true	int
)	O
;	O
afputc	(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(void)
(	O
'\n'	O
,	O
to	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
}	O
else	O
if	O
(	O
to	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
atat_put	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(struct(long,long,long,*(struct(int,long,enum(int,int,int),*`,*`,*`,*`,*`,long)),long,array(long))))->(void)
(	O
to	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
log	*(struct)
)	O
;	O
range	struct(long,long)
.	O
beg	*(char)
=	O
ATAT_TEXT_END	O
(	O
log	*(struct)
)	O
;	O
range	struct(long,long)
.	O
end	*(char)
=	O
text	*(struct)
->	O
beg	*(char)
;	O
if	O
(	O
to	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
fro_spew_partial	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(struct(int,long,enum(int,int,int),*(char),*(char),*(char),*((*`)->(void)),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),long)),*(struct(long,long)))->(void)
(	O
to	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
from	*(struct)
,	O
&	O
range	struct(long,long)
)	O
;	O
if	O
(	O
delta	struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long)),bool,long)
==	O
nextdelta	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
)	O
break	O
;	O
if	O
(	O
to	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
atat_put	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(struct(long,long,long,*(struct(int,long,enum(int,int,int),*`,*`,*`,*`,*`,long)),long,array(long))))->(void)
(	O
to	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
text	*(struct)
)	O
;	O
}	O
fro_move	(*(struct(int,long,enum(int,int,int),*(char),*(char),*(char),*((*`)->(void)),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),long)),long)->(void)
(	O
from	*(struct)
,	O
range	struct(long,long)
.	O
end	*(char)
)	O
;	O
if	O
(	O
edit	bool
)	O
editstring	(*(struct),*(struct),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)))->(void)
(	O
es	*(struct)
,	O
text	*(struct)
,	O
NULL	O
)	O
;	O
else	O
enterstring	(*(struct),*(struct))->(void)
(	O
es	*(struct)
,	O
text	*(struct)
)	O
;	O
}	O
static	O
struct	O
link	struct(*(void),*(struct(*(void),*(struct(*(void),*(struct`))))))
*	O
rmnewlocklst	(*(char))->(*(struct(*(void),*(struct(*`,*`)))))
(	O
char	O
const	O
*	O
which	*(char)
)	O
{	O
struct	O
link	struct(*(void),*(struct(*(void),*(struct(*(void),*(struct`))))))
*	O
pt	*(struct(*(void),*(struct(*(void),*(struct`)))))
,	O
*	O
*	O
pre	*(*(struct(*(void),*(struct(*`,*`)))))
;	O
pre	*(*(struct(*(void),*(struct(*`,*`)))))
=	O
&	O
newlocklst	*(struct(*(void),*(struct(*(void),*(struct`)))))
;	O
while	O
(	O
(	O
pt	*(struct(*(void),*(struct(*(void),*(struct`)))))
=	O
*	O
pre	*(*(struct(*(void),*(struct(*`,*`)))))
)	O
)	O
if	O
(	O
STR_DIFF	O
(	O
pt	*(struct(*(void),*(struct(*(void),*(struct`)))))
->	O
entry	*(void)
,	O
which	*(char)
)	O
)	O
pre	*(*(struct(*(void),*(struct(*`,*`)))))
=	O
&	O
pt	*(struct(*(void),*(struct(*(void),*(struct`)))))
->	O
next	*(struct(*(void),*(struct(*(void),*(struct`)))))
;	O
else	O
*	O
pre	*(*(struct(*(void),*(struct(*`,*`)))))
=	O
pt	*(struct(*(void),*(struct(*(void),*(struct`)))))
->	O
next	*(struct(*(void),*(struct(*(void),*(struct`)))))
;	O
return	O
*	O
pre	*(*(struct(*(void),*(struct(*`,*`)))))
;	O
}	O
static	O
bool	bool
doaccess	()->(bool)
(	O
void	O
)	O
{	O
register	O
bool	bool
changed	int
=	O
false	int
;	O
struct	O
link	struct(*(void),*(struct(*(void),*(struct(*(void),*(struct`))))))
*	O
ls	*(struct(*(void),*(struct(*(void),*(struct`)))))
,	O
box	*(struct(*(void),*(struct(*(void),*(struct`)))))
,	O
*	O
tp	*(struct(*(void),*(struct(*(void),*(struct`)))))
;	O
for	O
(	O
ls	*(struct(*(void),*(struct(*(void),*(struct`)))))
=	O
chaccess	struct(*(char),enum(int,int))
.	O
next	*(struct(*(void),*(struct(*(void),*(struct`)))))
;	O
ls	*(struct(*(void),*(struct(*(void),*(struct`)))))
;	O
ls	*(struct(*(void),*(struct(*(void),*(struct`)))))
=	O
ls	*(struct(*(void),*(struct(*(void),*(struct`)))))
->	O
next	*(struct(*(void),*(struct(*(void),*(struct`)))))
)	O
{	O
struct	O
chaccess	struct(*(char),enum(int,int))
const	O
*	O
ch	*(struct(*(char),enum(int,int)))
=	O
ls	*(struct(*(void),*(struct(*(void),*(struct`)))))
->	O
entry	*(void)
;	O
char	O
const	O
*	O
login	*(char)
=	O
ch	*(struct(*(char),enum(int,int)))
->	O
login	*(char)
;	O
switch	O
(	O
ch	*(struct(*(char),enum(int,int)))
->	O
command	enum(int,int)
)	O
{	O
case	O
erase	int
:	O
if	O
(	O
!	O
login	*(char)
)	O
{	O
if	O
(	O
GROK	O
(	O
access	*(struct)
)	O
)	O
{	O
GROK	O
(	O
access	*(struct)
)	O
=	O
NULL	O
;	O
changed	int
=	O
true	int
;	O
}	O
}	O
else	O
for	O
(	O
box	*(struct(*(void),*(struct(*(void),*(struct`)))))
.	O
next	*(struct(*(void),*(struct(*(void),*(struct`)))))
=	O
GROK	O
(	O
access	*(struct)
)	O
,	O
tp	*(struct(*(void),*(struct(*(void),*(struct`)))))
=	O
&	O
box	*(struct(*(void),*(struct(*(void),*(struct`)))))
;	O
tp	*(struct(*(void),*(struct(*(void),*(struct`)))))
->	O
next	*(struct(*(void),*(struct(*(void),*(struct`)))))
;	O
tp	*(struct(*(void),*(struct(*(void),*(struct`)))))
=	O
tp	*(struct(*(void),*(struct(*(void),*(struct`)))))
->	O
next	*(struct(*(void),*(struct(*(void),*(struct`)))))
)	O
if	O
(	O
STR_SAME	O
(	O
login	*(char)
,	O
tp	*(struct(*(void),*(struct(*(void),*(struct`)))))
->	O
next	*(struct(*(void),*(struct(*(void),*(struct`)))))
->	O
entry	*(void)
)	O
)	O
{	O
tp	*(struct(*(void),*(struct(*(void),*(struct`)))))
->	O
next	*(struct(*(void),*(struct(*(void),*(struct`)))))
=	O
tp	*(struct(*(void),*(struct(*(void),*(struct`)))))
->	O
next	*(struct(*(void),*(struct(*(void),*(struct`)))))
->	O
next	*(struct(*(void),*(struct(*(void),*(struct`)))))
;	O
changed	int
=	O
true	int
;	O
GROK	O
(	O
access	*(struct)
)	O
=	O
box	*(struct(*(void),*(struct(*(void),*(struct`)))))
.	O
next	*(struct(*(void),*(struct(*(void),*(struct`)))))
;	O
break	O
;	O
}	O
break	O
;	O
case	O
append	int
:	O
for	O
(	O
box	*(struct(*(void),*(struct(*(void),*(struct`)))))
.	O
next	*(struct(*(void),*(struct(*(void),*(struct`)))))
=	O
GROK	O
(	O
access	*(struct)
)	O
,	O
tp	*(struct(*(void),*(struct(*(void),*(struct`)))))
=	O
&	O
box	*(struct(*(void),*(struct(*(void),*(struct`)))))
;	O
tp	*(struct(*(void),*(struct(*(void),*(struct`)))))
->	O
next	*(struct(*(void),*(struct(*(void),*(struct`)))))
;	O
tp	*(struct(*(void),*(struct(*(void),*(struct`)))))
=	O
tp	*(struct(*(void),*(struct(*(void),*(struct`)))))
->	O
next	*(struct(*(void),*(struct(*(void),*(struct`)))))
)	O
if	O
(	O
STR_SAME	O
(	O
login	*(char)
,	O
tp	*(struct(*(void),*(struct(*(void),*(struct`)))))
->	O
next	*(struct(*(void),*(struct(*(void),*(struct`)))))
->	O
entry	*(void)
)	O
)	O
break	O
;	O
if	O
(	O
!	O
tp	*(struct(*(void),*(struct(*(void),*(struct`)))))
->	O
next	*(struct(*(void),*(struct(*(void),*(struct`)))))
)	O
{	O
extend	(*(struct(*(void),*(struct(*`,*`)))),*(void),*(struct(*(char),*(struct),*(void),long)))->(*(struct(*(void),*(struct(*`,*`)))))
(	O
tp	*(struct(*(void),*(struct(*(void),*(struct`)))))
,	O
login	*(char)
,	O
SINGLE	O
)	O
;	O
changed	int
=	O
true	int
;	O
GROK	O
(	O
access	*(struct)
)	O
=	O
box	*(struct(*(void),*(struct(*(void),*(struct`)))))
.	O
next	*(struct(*(void),*(struct(*(void),*(struct`)))))
;	O
}	O
break	O
;	O
}	O
}	O
return	O
changed	int
;	O
}	O
static	O
bool	bool
sendmail	(*(char),*(char))->(bool)
(	O
char	O
const	O
*	O
Delta	*(char)
,	O
char	O
const	O
*	O
who	*(char)
)	O
{	O
complain	(*(char))->(void)
(	O
"Revision %s is already locked by %s.\n"	*(char)
,	O
Delta	*(char)
,	O
who	*(char)
)	O
;	O
if	O
(	O
suppress_mail	bool
)	O
return	O
true	int
;	O
if	O
(	O
!	O
yesorno	(bool,*(char))->(bool)
(	O
false	int
,	O
"Do you want to break the lock? [ny](n): "	*(char)
)	O
)	O
return	O
false	int
;	O
PWARN	O
(	O
"Mail notification of broken locks is not available."	*(char)
)	O
;	O
PWARN	O
(	O
"Please tell `%s' why you broke the lock."	*(char)
,	O
who	*(char)
)	O
;	O
return	O
true	int
;	O
}	O
static	O
bool	bool
breaklock	(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*`,long,array(long))),*(struct(long,long,long,*`,long,array(long))),*(char),struct(*(char),long),*(struct(*`,*`)),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)))->(bool)
(	O
struct	O
delta	struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long)),bool,long)
const	O
*	O
delta	struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long)),bool,long)
)	O
{	O
struct	O
rcslock	struct(*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long)))
const	O
*	O
rl	*(struct(*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long))))
;	O
struct	O
link	struct(*(void),*(struct(*(void),*(struct(*(void),*(struct`))))))
box	*(struct(*(void),*(struct(*(void),*(struct`)))))
,	O
*	O
tp	*(struct(*(void),*(struct(*(void),*(struct`)))))
;	O
char	O
const	O
*	O
num	*(char)
,	O
*	O
before	*(char)
;	O
num	*(char)
=	O
delta	struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long)),bool,long)
->	O
num	*(char)
;	O
box	*(struct(*(void),*(struct(*(void),*(struct`)))))
.	O
next	*(struct(*(void),*(struct(*(void),*(struct`)))))
=	O
GROK	O
(	O
locks	*(struct)
)	O
;	O
if	O
(	O
!	O
(	O
tp	*(struct(*(void),*(struct(*(void),*(struct`)))))
=	O
lock_delta_memq	O
(	O
&	O
box	*(struct(*(void),*(struct(*(void),*(struct`)))))
,	O
delta	struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long)),bool,long)
)	O
)	O
)	O
{	O
RERR	O
(	O
"no lock set on revision %s"	*(char)
,	O
num	*(char)
)	O
;	O
return	O
false	int
;	O
}	O
rl	*(struct(*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long))))
=	O
tp	*(struct(*(void),*(struct(*(void),*(struct`)))))
->	O
next	*(struct(*(void),*(struct(*(void),*(struct`)))))
->	O
entry	*(void)
;	O
before	*(char)
=	O
rl	*(struct(*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long))))
->	O
login	*(char)
;	O
if	O
(	O
!	O
caller_login_p	(*(char))->(bool)
(	O
before	*(char)
)	O
&&	O
!	O
sendmail	(*(char),*(char))->(bool)
(	O
num	*(char)
,	O
before	*(char)
)	O
)	O
{	O
RERR	O
(	O
"revision %s still locked by %s"	*(char)
,	O
num	*(char)
,	O
before	*(char)
)	O
;	O
return	O
false	int
;	O
}	O
diagnose	(*(char))->(void)
(	O
"%s unlocked"	*(char)
,	O
num	*(char)
)	O
;	O
lock_drop	(*(struct(*(void),*(struct(*`,*`)))),*(struct(*(void),*(struct(*`,*`)))))->(void)
(	O
&	O
box	*(struct(*(void),*(struct(*(void),*(struct`)))))
,	O
tp	*(struct(*(void),*(struct(*(void),*(struct`)))))
)	O
;	O
return	O
true	int
;	O
}	O
static	O
struct	O
delta	struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long)),bool,long)
*	O
searchcutpt	(*(char),int,*(struct(*(void),*(struct(*`,*`)))))->(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*`,long,array(long))),*(struct(long,long,long,*`,long,array(long))),*(char),struct(*(char),long),*(struct(*`,*`)),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)))
(	O
char	O
const	O
*	O
object	*(char)
,	O
int	O
length	int
,	O
struct	O
wlink	struct(*(void),*(struct(*(void),*(struct(*(void),*(struct`))))))
*	O
store	*(*(struct))
)	O
{	O
struct	O
delta	struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long)),bool,long)
*	O
delta	struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long)),bool,long)
;	O
cuthead	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
=	O
NULL	O
;	O
while	O
(	O
delta	struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long)),bool,long)
=	O
store	*(*(struct))
->	O
entry	*(void)
,	O
compartial	(*(char),*(char),int)->(int)
(	O
delta	struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long)),bool,long)
->	O
num	*(char)
,	O
object	*(char)
,	O
length	int
)	O
)	O
{	O
cuthead	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
=	O
delta	struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long)),bool,long)
;	O
store	*(*(struct))
=	O
store	*(*(struct))
->	O
next	*(struct(*(void),*(struct(*(void),*(struct`)))))
;	O
}	O
return	O
delta	struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long)),bool,long)
;	O
}	O
static	O
bool	bool
branchpoint	(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*`,long,array(long))),*(struct(long,long,long,*`,long,array(long))),*(char),struct(*(char),long),*(struct(*`,*`)),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*`,long,array(long))),*(struct(long,long,long,*`,long,array(long))),*(char),struct(*(char),long),*(struct(*`,*`)),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)))->(bool)
(	O
struct	O
delta	struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long)),bool,long)
*	O
strt	*(char)
,	O
struct	O
delta	struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long)),bool,long)
*	O
tail	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
)	O
{	O
struct	O
delta	struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long)),bool,long)
*	O
pt	*(struct(*(void),*(struct(*(void),*(struct`)))))
;	O
for	O
(	O
pt	*(struct(*(void),*(struct(*(void),*(struct`)))))
=	O
strt	*(char)
;	O
pt	*(struct(*(void),*(struct(*(void),*(struct`)))))
!=	O
tail	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
;	O
pt	*(struct(*(void),*(struct(*(void),*(struct`)))))
=	O
pt	*(struct(*(void),*(struct(*(void),*(struct`)))))
->	O
ilk	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
)	O
{	O
if	O
(	O
pt	*(struct(*(void),*(struct(*(void),*(struct`)))))
->	O
branches	*(struct)
)	O
{	O
RERR	O
(	O
"can't remove branch point %s"	*(char)
,	O
pt	*(struct(*(void),*(struct(*(void),*(struct`)))))
->	O
num	*(char)
)	O
;	O
return	O
true	int
;	O
}	O
if	O
(	O
lock_on	(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct(*`,*`)),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)))->(*(struct(*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)))))
(	O
pt	*(struct(*(void),*(struct(*(void),*(struct`)))))
)	O
)	O
{	O
RERR	O
(	O
"can't remove locked revision %s"	*(char)
,	O
pt	*(struct(*(void),*(struct(*(void),*(struct`)))))
->	O
num	*(char)
)	O
;	O
return	O
true	int
;	O
}	O
pt	*(struct(*(void),*(struct(*(void),*(struct`)))))
->	O
selector	bool
=	O
false	int
;	O
diagnose	(*(char))->(void)
(	O
"deleting revision %s"	*(char)
,	O
pt	*(struct(*(void),*(struct(*(void),*(struct`)))))
->	O
num	*(char)
)	O
;	O
}	O
return	O
false	int
;	O
}	O
static	O
bool	bool
removerevs	()->(bool)
(	O
void	O
)	O
{	O
struct	O
delta	struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long)),bool,long)
*	O
target	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)))
,	O
*	O
target2	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
,	O
*	O
temp	*(char)
;	O
struct	O
wlink	struct(*(void),*(struct(*(void),*(struct(*(void),*(struct`))))))
*	O
ls	*(struct(*(void),*(struct(*(void),*(struct`)))))
;	O
int	O
length	int
;	O
int	O
cmp	int
;	O
if	O
(	O
!	O
fully_numeric_no_k	O
(	O
&	O
numrev	struct(*(char),long)
,	O
delrev	struct(*(char),*(char),int)
.	O
strt	*(char)
)	O
)	O
return	O
false	int
;	O
target	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)))
=	O
GENREV	O
(	O
numrev	struct(*(char),long)
.	O
string	*(char)
)	O
;	O
if	O
(	O
!	O
target	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)))
)	O
return	O
false	int
;	O
cmp	int
=	O
cmpnum	(*(char),*(char))->(int)
(	O
target	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)))
->	O
num	*(char)
,	O
numrev	struct(*(char),long)
.	O
string	*(char)
)	O
;	O
length	int
=	O
countnumflds	(*(char))->(int)
(	O
numrev	struct(*(char),long)
.	O
string	*(char)
)	O
;	O
if	O
(	O
delrev	struct(*(char),*(char),int)
.	O
code	int
==	O
0	int
)	O
{	O
if	O
(	O
length	int
&	O
1	int
)	O
temp	*(char)
=	O
SEARCH	O
(	O
target	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)))
->	O
num	*(char)
,	O
length	int
+	O
1	int
)	O
;	O
else	O
if	O
(	O
cmp	int
)	O
{	O
RERR	O
(	O
"Revision %s doesn't exist."	*(char)
,	O
numrev	struct(*(char),long)
.	O
string	*(char)
)	O
;	O
return	O
false	int
;	O
}	O
else	O
temp	*(char)
=	O
SEARCH	O
(	O
numrev	struct(*(char),long)
.	O
string	*(char)
,	O
length	int
)	O
;	O
cuttail	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
=	O
target	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)))
->	O
ilk	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
;	O
if	O
(	O
branchpoint	(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*`,long,array(long))),*(struct(long,long,long,*`,long,array(long))),*(char),struct(*(char),long),*(struct(*`,*`)),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*`,long,array(long))),*(struct(long,long,long,*`,long,array(long))),*(char),struct(*(char),long),*(struct(*`,*`)),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)))->(bool)
(	O
temp	*(char)
,	O
cuttail	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
)	O
)	O
{	O
cuttail	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
=	O
NULL	O
;	O
return	O
false	int
;	O
}	O
delstrt	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
=	O
temp	*(char)
;	O
return	O
true	int
;	O
}	O
if	O
(	O
length	int
&	O
1	int
)	O
{	O
RERR	O
(	O
"invalid branch range %s after -o"	*(char)
,	O
numrev	struct(*(char),long)
.	O
string	*(char)
)	O
;	O
return	O
false	int
;	O
}	O
if	O
(	O
delrev	struct(*(char),*(char),int)
.	O
code	int
==	O
1	int
)	O
{	O
if	O
(	O
length	int
>	O
2	int
)	O
{	O
temp	*(char)
=	O
SEARCH	O
(	O
target	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)))
->	O
num	*(char)
,	O
length	int
-	O
1	int
)	O
;	O
cuttail	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
=	O
target	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)))
->	O
ilk	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
;	O
}	O
else	O
{	O
temp	*(char)
=	O
SEARCH	O
(	O
target	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)))
->	O
num	*(char)
,	O
length	int
)	O
;	O
cuttail	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
=	O
target	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)))
;	O
while	O
(	O
cuttail	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
&&	O
NUMF_EQ	O
(	O
1	int
,	O
target	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)))
->	O
num	*(char)
,	O
cuttail	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
num	*(char)
)	O
)	O
cuttail	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
=	O
cuttail	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
ilk	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
;	O
}	O
if	O
(	O
branchpoint	(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*`,long,array(long))),*(struct(long,long,long,*`,long,array(long))),*(char),struct(*(char),long),*(struct(*`,*`)),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*`,long,array(long))),*(struct(long,long,long,*`,long,array(long))),*(char),struct(*(char),long),*(struct(*`,*`)),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)))->(bool)
(	O
temp	*(char)
,	O
cuttail	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
)	O
)	O
{	O
cuttail	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
=	O
NULL	O
;	O
return	O
false	int
;	O
}	O
delstrt	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
=	O
temp	*(char)
;	O
return	O
true	int
;	O
}	O
if	O
(	O
delrev	struct(*(char),*(char),int)
.	O
code	int
==	O
2	int
)	O
{	O
if	O
(	O
length	int
==	O
2	int
)	O
{	O
temp	*(char)
=	O
SEARCH	O
(	O
target	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)))
->	O
num	*(char)
,	O
1	int
)	O
;	O
if	O
(	O
cmp	int
)	O
cuttail	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
=	O
target	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)))
;	O
else	O
cuttail	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
=	O
target	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)))
->	O
ilk	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
;	O
}	O
else	O
{	O
if	O
(	O
cmp	int
)	O
{	O
cuthead	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
=	O
target	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)))
;	O
if	O
(	O
!	O
(	O
temp	*(char)
=	O
target	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)))
->	O
ilk	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
)	O
)	O
return	O
false	int
;	O
}	O
else	O
temp	*(char)
=	O
SEARCH	O
(	O
target	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)))
->	O
num	*(char)
,	O
length	int
)	O
;	O
GENREV	O
(	O
BRANCHNO	O
(	O
temp	*(char)
->	O
num	*(char)
)	O
)	O
;	O
}	O
if	O
(	O
branchpoint	(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*`,long,array(long))),*(struct(long,long,long,*`,long,array(long))),*(char),struct(*(char),long),*(struct(*`,*`)),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*`,long,array(long))),*(struct(long,long,long,*`,long,array(long))),*(char),struct(*(char),long),*(struct(*`,*`)),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)))->(bool)
(	O
temp	*(char)
,	O
cuttail	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
)	O
)	O
{	O
cuttail	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
=	O
NULL	O
;	O
return	O
false	int
;	O
}	O
delstrt	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
=	O
temp	*(char)
;	O
return	O
true	int
;	O
}	O
if	O
(	O
!	O
fully_numeric_no_k	O
(	O
&	O
numrev	struct(*(char),long)
,	O
delrev	struct(*(char),*(char),int)
.	O
end	*(char)
)	O
)	O
return	O
false	int
;	O
if	O
(	O
length	int
!=	O
countnumflds	(*(char))->(int)
(	O
numrev	struct(*(char),long)
.	O
string	*(char)
)	O
||	O
(	O
length	int
>	O
2	int
&&	O
compartial	(*(char),*(char),int)->(int)
(	O
numrev	struct(*(char),long)
.	O
string	*(char)
,	O
target	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)))
->	O
num	*(char)
,	O
length	int
-	O
1	int
)	O
)	O
)	O
{	O
RERR	O
(	O
"invalid revision range %s-%s"	*(char)
,	O
target	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)))
->	O
num	*(char)
,	O
numrev	struct(*(char),long)
.	O
string	*(char)
)	O
;	O
return	O
false	int
;	O
}	O
target2	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
=	O
GENREV	O
(	O
numrev	struct(*(char),long)
.	O
string	*(char)
)	O
;	O
if	O
(	O
!	O
target2	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
)	O
return	O
false	int
;	O
if	O
(	O
length	int
>	O
2	int
)	O
{	O
if	O
(	O
NUM_GT	O
(	O
target	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)))
->	O
num	*(char)
,	O
target2	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
num	*(char)
)	O
)	O
{	O
cmp	int
=	O
cmpnum	(*(char),*(char))->(int)
(	O
target2	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
num	*(char)
,	O
numrev	struct(*(char),long)
.	O
string	*(char)
)	O
;	O
temp	*(char)
=	O
target	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)))
;	O
target	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)))
=	O
target2	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
;	O
target2	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
=	O
temp	*(char)
;	O
}	O
if	O
(	O
cmp	int
)	O
{	O
if	O
(	O
NUM_EQ	O
(	O
target	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)))
->	O
num	*(char)
,	O
target2	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
num	*(char)
)	O
)	O
{	O
RERR	O
(	O
"Revisions %s-%s don't exist."	*(char)
,	O
delrev	struct(*(char),*(char),int)
.	O
strt	*(char)
,	O
delrev	struct(*(char),*(char),int)
.	O
end	*(char)
)	O
;	O
return	O
false	int
;	O
}	O
cuthead	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
=	O
target	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)))
;	O
temp	*(char)
=	O
target	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)))
->	O
ilk	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
;	O
}	O
else	O
temp	*(char)
=	O
SEARCH	O
(	O
target	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)))
->	O
num	*(char)
,	O
length	int
)	O
;	O
cuttail	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
=	O
target2	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
ilk	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
;	O
}	O
else	O
{	O
if	O
(	O
NUM_LT	O
(	O
target	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)))
->	O
num	*(char)
,	O
target2	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
num	*(char)
)	O
)	O
{	O
temp	*(char)
=	O
target	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)))
;	O
target	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)))
=	O
target2	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
;	O
target2	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
=	O
temp	*(char)
;	O
}	O
else	O
cmp	int
=	O
cmpnum	(*(char),*(char))->(int)
(	O
target2	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
num	*(char)
,	O
numrev	struct(*(char),long)
.	O
string	*(char)
)	O
;	O
if	O
(	O
cmp	int
)	O
{	O
if	O
(	O
NUM_EQ	O
(	O
target	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)))
->	O
num	*(char)
,	O
target2	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
num	*(char)
)	O
)	O
{	O
RERR	O
(	O
"Revisions %s-%s don't exist."	*(char)
,	O
delrev	struct(*(char),*(char),int)
.	O
strt	*(char)
,	O
delrev	struct(*(char),*(char),int)
.	O
end	*(char)
)	O
;	O
return	O
false	int
;	O
}	O
cuttail	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
=	O
target2	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
;	O
}	O
else	O
cuttail	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
=	O
target2	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
ilk	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
;	O
temp	*(char)
=	O
SEARCH	O
(	O
target	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)))
->	O
num	*(char)
,	O
length	int
)	O
;	O
}	O
if	O
(	O
branchpoint	(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*`,long,array(long))),*(struct(long,long,long,*`,long,array(long))),*(char),struct(*(char),long),*(struct(*`,*`)),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*`,long,array(long))),*(struct(long,long,long,*`,long,array(long))),*(char),struct(*(char),long),*(struct(*`,*`)),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)))->(bool)
(	O
temp	*(char)
,	O
cuttail	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
)	O
)	O
{	O
cuttail	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
=	O
NULL	O
;	O
return	O
false	int
;	O
}	O
delstrt	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
=	O
temp	*(char)
;	O
return	O
true	int
;	O
}	O
static	O
bool	bool
doassoc	()->(bool)
(	O
void	O
)	O
{	O
char	O
const	O
*	O
p	*(char)
;	O
bool	bool
changed	int
=	O
false	int
;	O
for	O
(	O
struct	O
link	struct(*(void),*(struct(*(void),*(struct(*(void),*(struct`))))))
*	O
cur	*(struct(*(void),*(struct(*(void),*(struct`)))))
=	O
assoclst	struct(*(void),*(struct(*(void),*(struct(*`,*`)))))
.	O
next	*(struct(*(void),*(struct(*(void),*(struct`)))))
;	O
cur	*(struct(*(void),*(struct(*(void),*(struct`)))))
;	O
cur	*(struct(*(void),*(struct(*(void),*(struct`)))))
=	O
cur	*(struct(*(void),*(struct(*(void),*(struct`)))))
->	O
next	*(struct(*(void),*(struct(*(void),*(struct`)))))
)	O
{	O
struct	O
u_symdef	struct(struct(*(char),*(char)),bool)
const	O
*	O
u	struct(*(char),*(char))
=	O
cur	*(struct(*(void),*(struct(*(void),*(struct`)))))
->	O
entry	*(void)
;	O
char	O
const	O
*	O
ssymbol	*(char)
=	O
u	struct(*(char),*(char))
->	O
u	struct(*(char),*(char))
.	O
meaningful	*(char)
;	O
char	O
const	O
*	O
under	*(char)
=	O
u	struct(*(char),*(char))
->	O
u	struct(*(char),*(char))
.	O
underlying	*(char)
;	O
if	O
(	O
!	O
under	*(char)
)	O
{	O
struct	O
link	struct(*(void),*(struct(*(void),*(struct(*(void),*(struct`))))))
box	*(struct(*(void),*(struct(*(void),*(struct`)))))
,	O
*	O
tp	*(struct(*(void),*(struct(*(void),*(struct`)))))
;	O
struct	O
symdef	struct(*(char),*(char))
const	O
*	O
d	*(struct(*(char),*(char)))
=	O
NULL	O
;	O
for	O
(	O
box	*(struct(*(void),*(struct(*(void),*(struct`)))))
.	O
next	*(struct(*(void),*(struct(*(void),*(struct`)))))
=	O
GROK	O
(	O
symbols	*(struct)
)	O
,	O
tp	*(struct(*(void),*(struct(*(void),*(struct`)))))
=	O
&	O
box	*(struct(*(void),*(struct(*(void),*(struct`)))))
;	O
tp	*(struct(*(void),*(struct(*(void),*(struct`)))))
->	O
next	*(struct(*(void),*(struct(*(void),*(struct`)))))
;	O
tp	*(struct(*(void),*(struct(*(void),*(struct`)))))
=	O
tp	*(struct(*(void),*(struct(*(void),*(struct`)))))
->	O
next	*(struct(*(void),*(struct(*(void),*(struct`)))))
)	O
{	O
d	*(struct(*(char),*(char)))
=	O
tp	*(struct(*(void),*(struct(*(void),*(struct`)))))
->	O
next	*(struct(*(void),*(struct(*(void),*(struct`)))))
->	O
entry	*(void)
;	O
if	O
(	O
STR_SAME	O
(	O
ssymbol	*(char)
,	O
d	*(struct(*(char),*(char)))
->	O
meaningful	*(char)
)	O
)	O
{	O
tp	*(struct(*(void),*(struct(*(void),*(struct`)))))
->	O
next	*(struct(*(void),*(struct(*(void),*(struct`)))))
=	O
tp	*(struct(*(void),*(struct(*(void),*(struct`)))))
->	O
next	*(struct(*(void),*(struct(*(void),*(struct`)))))
->	O
next	*(struct(*(void),*(struct(*(void),*(struct`)))))
;	O
changed	int
=	O
true	int
;	O
break	O
;	O
}	O
}	O
GROK	O
(	O
symbols	*(struct)
)	O
=	O
box	*(struct(*(void),*(struct(*(void),*(struct`)))))
.	O
next	*(struct(*(void),*(struct(*(void),*(struct`)))))
;	O
if	O
(	O
!	O
d	*(struct(*(char),*(char)))
)	O
RWARN	O
(	O
"can't delete nonexisting symbol %s"	*(char)
,	O
ssymbol	*(char)
)	O
;	O
}	O
else	O
{	O
if	O
(	O
under	*(char)
[	O
0	int
]	O
)	O
p	*(char)
=	O
fully_numeric_no_k	O
(	O
&	O
numrev	struct(*(char),long)
,	O
under	*(char)
)	O
?	O
numrev	struct(*(char),long)
.	O
string	*(char)
:	O
NULL	O
;	O
else	O
if	O
(	O
!	O
(	O
p	*(char)
=	O
tiprev	()->(*(char))
(	O
)	O
)	O
)	O
RERR	O
(	O
"no latest revision to associate with symbol %s"	*(char)
,	O
ssymbol	*(char)
)	O
;	O
if	O
(	O
p	*(char)
)	O
changed	int
|=	O
addsymbol	(*(char),*(char),bool)->(int)
(	O
p	*(char)
,	O
ssymbol	*(char)
,	O
u	struct(*(char),*(char))
->	O
override	bool
)	O
;	O
}	O
}	O
return	O
changed	int
;	O
}	O
static	O
bool	bool
setlock	(*(char),*(*(struct(*(void),*(struct`)))))->(bool)
(	O
char	O
const	O
*	O
rev	*(char)
,	O
struct	O
wlink	struct(*(void),*(struct(*(void),*(struct(*(void),*(struct`))))))
*	O
*	O
tp_deltas	*(*(struct(*(void),*(struct(*`,*`)))))
)	O
{	O
struct	O
delta	struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long)),bool,long)
*	O
target	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)))
;	O
int	O
r	*(struct(*(char),*(char),long,*(struct),long,*(struct),long,*(struct),bool,*(struct),*(struct),int,long,*(struct),*(struct),long,*(struct),*(struct)))
;	O
if	O
(	O
fully_numeric_no_k	O
(	O
&	O
numrev	struct(*(char),long)
,	O
rev	*(char)
)	O
)	O
{	O
target	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)))
=	O
gr_revno	(*(char),*(*(struct)))->(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)))
(	O
numrev	struct(*(char),long)
.	O
string	*(char)
,	O
tp_deltas	*(*(struct(*(void),*(struct(*`,*`)))))
)	O
;	O
if	O
(	O
target	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)))
)	O
{	O
if	O
(	O
!	O
(	O
countnumflds	(*(char))->(int)
(	O
numrev	struct(*(char),long)
.	O
string	*(char)
)	O
&	O
1	int
)	O
&&	O
!	O
NUM_EQ	O
(	O
target	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)))
->	O
num	*(char)
,	O
numrev	struct(*(char),long)
.	O
string	*(char)
)	O
)	O
RERR	O
(	O
"can't lock nonexisting revision %s"	*(char)
,	O
numrev	struct(*(char),long)
.	O
string	*(char)
)	O
;	O
else	O
{	O
if	O
(	O
(	O
r	*(struct(*(char),*(char),long,*(struct),long,*(struct),long,*(struct),bool,*(struct),*(struct),int,long,*(struct),*(struct),long,*(struct),*(struct)))
=	O
addlock	(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct(*`,*`)),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)),bool)->(int)
(	O
target	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)))
,	O
false	int
)	O
)	O
<	O
0	int
&&	O
breaklock	(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*`,long,array(long))),*(struct(long,long,long,*`,long,array(long))),*(char),struct(*(char),long),*(struct(*`,*`)),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)))->(bool)
(	O
target	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)))
)	O
)	O
r	*(struct(*(char),*(char),long,*(struct),long,*(struct),long,*(struct),bool,*(struct),*(struct),int,long,*(struct),*(struct),long,*(struct),*(struct)))
=	O
addlock	(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct(*`,*`)),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)),bool)->(int)
(	O
target	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)))
,	O
true	int
)	O
;	O
if	O
(	O
0	int
<=	O
r	*(struct(*(char),*(char),long,*(struct),long,*(struct),long,*(struct),bool,*(struct),*(struct),int,long,*(struct),*(struct),long,*(struct),*(struct)))
)	O
{	O
if	O
(	O
r	*(struct(*(char),*(char),long,*(struct),long,*(struct),long,*(struct),bool,*(struct),*(struct),int,long,*(struct),*(struct),long,*(struct),*(struct)))
)	O
diagnose	(*(char))->(void)
(	O
"%s locked"	*(char)
,	O
target	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)))
->	O
num	*(char)
)	O
;	O
return	O
r	*(struct(*(char),*(char),long,*(struct),long,*(struct),long,*(struct),bool,*(struct),*(struct),int,long,*(struct),*(struct),long,*(struct),*(struct)))
;	O
}	O
}	O
}	O
}	O
return	O
false	int
;	O
}	O
static	O
bool	bool
dolocks	(*(*(struct(*(void),*(struct`)))))->(bool)
(	O
struct	O
wlink	struct(*(void),*(struct(*(void),*(struct(*(void),*(struct`))))))
*	O
*	O
tp_deltas	*(*(struct(*(void),*(struct(*`,*`)))))
)	O
{	O
struct	O
link	struct(*(void),*(struct(*(void),*(struct(*(void),*(struct`))))))
const	O
*	O
lockpt	*(struct(*(void),*(struct(*(void),*(struct`)))))
;	O
struct	O
delta	struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long)),bool,long)
*	O
target	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)))
,	O
*	O
tip	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
=	O
REPO	O
(	O
tip	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
)	O
;	O
bool	bool
changed	int
=	O
false	int
;	O
const	O
char	O
*	O
bye	*(char)
;	O
if	O
(	O
unlockcaller	bool
)	O
{	O
if	O
(	O
tip	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
)	O
{	O
struct	O
link	struct(*(void),*(struct(*(void),*(struct(*(void),*(struct`))))))
*	O
locks	*(struct)
=	O
GROK	O
(	O
locks	*(struct)
)	O
;	O
if	O
(	O
locks	*(struct)
)	O
{	O
switch	O
(	O
findlock	(bool,*(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long))))->(int)
(	O
true	int
,	O
&	O
target	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)))
)	O
)	O
{	O
case	O
0	int
:	O
{	O
struct	O
rcslock	struct(*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long)))
const	O
*	O
rl	*(struct(*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long))))
=	O
locks	*(struct)
->	O
entry	*(void)
;	O
changed	int
|=	O
breaklock	(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*`,long,array(long))),*(struct(long,long,long,*`,long,array(long))),*(char),struct(*(char),long),*(struct(*`,*`)),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)))->(bool)
(	O
rl	*(struct(*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long))))
->	O
delta	struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long)),bool,long)
)	O
;	O
}	O
break	O
;	O
case	O
1	int
:	O
diagnose	(*(char))->(void)
(	O
"%s unlocked"	*(char)
,	O
target	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)))
->	O
num	*(char)
)	O
;	O
changed	int
=	O
true	int
;	O
break	O
;	O
}	O
}	O
else	O
{	O
RWARN	O
(	O
"No locks are set."	*(char)
)	O
;	O
}	O
}	O
else	O
{	O
RWARN	O
(	O
"can't unlock an empty tree"	*(char)
)	O
;	O
}	O
}	O
for	O
(	O
lockpt	*(struct(*(void),*(struct(*(void),*(struct`)))))
=	O
rmvlocklst	*(struct(*(void),*(struct(*(void),*(struct`)))))
;	O
lockpt	*(struct(*(void),*(struct(*(void),*(struct`)))))
;	O
lockpt	*(struct(*(void),*(struct(*(void),*(struct`)))))
=	O
lockpt	*(struct(*(void),*(struct(*(void),*(struct`)))))
->	O
next	*(struct(*(void),*(struct(*(void),*(struct`)))))
)	O
if	O
(	O
fully_numeric_no_k	O
(	O
&	O
numrev	struct(*(char),long)
,	O
(	O
bye	*(char)
=	O
lockpt	*(struct(*(void),*(struct(*(void),*(struct`)))))
->	O
entry	*(void)
)	O
)	O
)	O
{	O
target	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)))
=	O
gr_revno	(*(char),*(*(struct)))->(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)))
(	O
numrev	struct(*(char),long)
.	O
string	*(char)
,	O
tp_deltas	*(*(struct(*(void),*(struct(*`,*`)))))
)	O
;	O
if	O
(	O
target	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)))
)	O
{	O
if	O
(	O
!	O
(	O
countnumflds	(*(char))->(int)
(	O
numrev	struct(*(char),long)
.	O
string	*(char)
)	O
&	O
1	int
)	O
&&	O
!	O
NUM_EQ	O
(	O
target	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)))
->	O
num	*(char)
,	O
numrev	struct(*(char),long)
.	O
string	*(char)
)	O
)	O
RERR	O
(	O
"can't unlock nonexisting revision %s"	*(char)
,	O
bye	*(char)
)	O
;	O
else	O
changed	int
|=	O
breaklock	(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*`,long,array(long))),*(struct(long,long,long,*`,long,array(long))),*(char),struct(*(char),long),*(struct(*`,*`)),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)))->(bool)
(	O
target	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)))
)	O
;	O
}	O
}	O
for	O
(	O
lockpt	*(struct(*(void),*(struct(*(void),*(struct`)))))
=	O
newlocklst	*(struct(*(void),*(struct(*(void),*(struct`)))))
;	O
lockpt	*(struct(*(void),*(struct(*(void),*(struct`)))))
;	O
lockpt	*(struct(*(void),*(struct(*(void),*(struct`)))))
=	O
lockpt	*(struct(*(void),*(struct(*(void),*(struct`)))))
->	O
next	*(struct(*(void),*(struct(*(void),*(struct`)))))
)	O
changed	int
|=	O
setlock	(*(char),*(*(struct(*(void),*(struct`)))))->(bool)
(	O
lockpt	*(struct(*(void),*(struct(*(void),*(struct`)))))
->	O
entry	*(void)
,	O
tp_deltas	*(*(struct(*(void),*(struct(*`,*`)))))
)	O
;	O
if	O
(	O
lockhead	bool
)	O
{	O
char	O
const	O
*	O
defbr	*(char)
=	O
GROK	O
(	O
branch	*(char)
)	O
;	O
if	O
(	O
defbr	*(char)
)	O
changed	int
|=	O
setlock	(*(char),*(*(struct(*(void),*(struct`)))))->(bool)
(	O
defbr	*(char)
,	O
tp_deltas	*(*(struct(*(void),*(struct(*`,*`)))))
)	O
;	O
else	O
if	O
(	O
tip	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
)	O
changed	int
|=	O
setlock	(*(char),*(*(struct(*(void),*(struct`)))))->(bool)
(	O
tip	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
num	*(char)
,	O
tp_deltas	*(*(struct(*(void),*(struct(*`,*`)))))
)	O
;	O
else	O
RWARN	O
(	O
"can't lock an empty tree"	*(char)
)	O
;	O
}	O
return	O
changed	int
;	O
}	O
static	O
bool	bool
domessages	(*(*(struct(*(void),*(struct`)))))->(bool)
(	O
struct	O
wlink	struct(*(void),*(struct(*(void),*(struct(*(void),*(struct`))))))
*	O
*	O
tp_deltas	*(*(struct(*(void),*(struct(*`,*`)))))
)	O
{	O
struct	O
delta	struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long)),bool,long)
*	O
target	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)))
;	O
bool	bool
changed	int
=	O
false	int
;	O
for	O
(	O
struct	O
link	struct(*(void),*(struct(*(void),*(struct(*(void),*(struct`))))))
*	O
ls	*(struct(*(void),*(struct(*(void),*(struct`)))))
=	O
messagelst	struct(*(void),*(struct(*(void),*(struct(*`,*`)))))
.	O
next	*(struct(*(void),*(struct(*(void),*(struct`)))))
;	O
ls	*(struct(*(void),*(struct(*(void),*(struct`)))))
;	O
ls	*(struct(*(void),*(struct(*(void),*(struct`)))))
=	O
ls	*(struct(*(void),*(struct(*(void),*(struct`)))))
->	O
next	*(struct(*(void),*(struct(*(void),*(struct`)))))
)	O
{	O
struct	O
u_log	struct(*(char),struct(*(char),long))
const	O
*	O
um	*(struct(*(char),struct(*(char),long)))
=	O
ls	*(struct(*(void),*(struct(*(void),*(struct`)))))
->	O
entry	*(void)
;	O
if	O
(	O
fully_numeric_no_k	O
(	O
&	O
numrev	struct(*(char),long)
,	O
um	*(struct(*(char),struct(*(char),long)))
->	O
revno	*(char)
)	O
&&	O
(	O
target	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)))
=	O
gr_revno	(*(char),*(*(struct)))->(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)))
(	O
numrev	struct(*(char),long)
.	O
string	*(char)
,	O
tp_deltas	*(*(struct(*(void),*(struct(*`,*`)))))
)	O
)	O
)	O
{	O
target	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)))
->	O
pretty_log	struct(*(char),long)
=	O
um	*(struct(*(char),struct(*(char),long)))
->	O
message	struct(*(char),long)
;	O
changed	int
=	O
true	int
;	O
}	O
}	O
return	O
changed	int
;	O
}	O
static	O
bool	bool
rcs_setstate	(*(char),*(char),*(*(struct(*(void),*(struct`)))))->(bool)
(	O
char	O
const	O
*	O
rev	*(char)
,	O
char	O
const	O
*	O
status	int
,	O
struct	O
wlink	struct(*(void),*(struct(*(void),*(struct(*(void),*(struct`))))))
*	O
*	O
tp_deltas	*(*(struct(*(void),*(struct(*`,*`)))))
)	O
{	O
struct	O
delta	struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long)),bool,long)
*	O
target	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)))
;	O
if	O
(	O
fully_numeric_no_k	O
(	O
&	O
numrev	struct(*(char),long)
,	O
rev	*(char)
)	O
)	O
{	O
target	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)))
=	O
gr_revno	(*(char),*(*(struct)))->(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)))
(	O
numrev	struct(*(char),long)
.	O
string	*(char)
,	O
tp_deltas	*(*(struct(*(void),*(struct(*`,*`)))))
)	O
;	O
if	O
(	O
target	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)))
)	O
{	O
if	O
(	O
!	O
(	O
countnumflds	(*(char))->(int)
(	O
numrev	struct(*(char),long)
.	O
string	*(char)
)	O
&	O
1	int
)	O
&&	O
!	O
NUM_EQ	O
(	O
target	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)))
->	O
num	*(char)
,	O
numrev	struct(*(char),long)
.	O
string	*(char)
)	O
)	O
RERR	O
(	O
"can't set state of nonexisting revision %s"	*(char)
,	O
numrev	struct(*(char),long)
.	O
string	*(char)
)	O
;	O
else	O
if	O
(	O
STR_DIFF	O
(	O
target	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)))
->	O
state	*(char)
,	O
status	int
)	O
)	O
{	O
target	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)))
->	O
state	*(char)
=	O
status	int
;	O
return	O
true	int
;	O
}	O
}	O
}	O
return	O
false	int
;	O
}	O
static	O
bool	bool
buildeltatext	(*(struct),*(*(struct(*(void),*(struct`)))),*(struct(*(void),*(struct(*`,*`)))))->(bool)
(	O
struct	O
editstuff	O
*	O
es	*(struct)
,	O
struct	O
wlink	struct(*(void),*(struct(*(void),*(struct(*(void),*(struct`))))))
*	O
*	O
ls	*(struct(*(void),*(struct(*(void),*(struct`)))))
,	O
struct	O
wlink	struct(*(void),*(struct(*(void),*(struct(*(void),*(struct`))))))
const	O
*	O
deltas	*(struct)
)	O
{	O
FILE	struct
*	O
fcut	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
;	O
FILE	struct
*	O
frew	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
=	O
FLOW	O
(	O
rewr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
fcut	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
=	O
NULL	O
;	O
cuttail	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
selector	bool
=	O
false	int
;	O
scanlogtext	(*(struct),*(*(struct(*(void),*(struct`)))),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*`,long,array(long))),*(struct(long,long,long,*`,long,array(long))),*(char),struct(*(char),long),*(struct(*`,*`)),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)),bool)->(void)
(	O
es	*(struct)
,	O
ls	*(struct(*(void),*(struct(*(void),*(struct`)))))
,	O
deltas	*(struct)
->	O
entry	*(void)
,	O
false	int
)	O
;	O
if	O
(	O
cuthead	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
)	O
{	O
if	O
(	O
!	O
(	O
fcut	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
=	O
tmpfile	()->(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))
(	O
)	O
)	O
)	O
fatal_sys	(*(char))->(void)
(	O
"tmpfile"	*(char)
)	O
;	O
while	O
(	O
deltas	*(struct)
->	O
entry	*(void)
!=	O
cuthead	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
)	O
{	O
*	O
ls	*(struct(*(void),*(struct(*(void),*(struct`)))))
=	O
(	O
*	O
ls	*(struct(*(void),*(struct(*(void),*(struct`)))))
)	O
->	O
next	*(struct(*(void),*(struct(*(void),*(struct`)))))
;	O
deltas	*(struct)
=	O
deltas	*(struct)
->	O
next	*(struct(*(void),*(struct(*(void),*(struct`)))))
;	O
scanlogtext	(*(struct),*(*(struct(*(void),*(struct`)))),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*`,long,array(long))),*(struct(long,long,long,*`,long,array(long))),*(char),struct(*(char),long),*(struct(*`,*`)),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)),bool)->(void)
(	O
es	*(struct)
,	O
ls	*(struct(*(void),*(struct(*(void),*(struct`)))))
,	O
deltas	*(struct)
->	O
entry	*(void)
,	O
true	int
)	O
;	O
}	O
snapshotedit	(*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(void)
(	O
es	*(struct)
,	O
fcut	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
rewind	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(void)
(	O
fcut	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
aflush	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(void)
(	O
fcut	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
}	O
while	O
(	O
deltas	*(struct)
->	O
entry	*(void)
!=	O
cuttail	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
)	O
{	O
*	O
ls	*(struct(*(void),*(struct(*(void),*(struct`)))))
=	O
(	O
*	O
ls	*(struct(*(void),*(struct(*(void),*(struct`)))))
)	O
->	O
next	*(struct(*(void),*(struct(*(void),*(struct`)))))
;	O
deltas	*(struct)
=	O
deltas	*(struct)
->	O
next	*(struct(*(void),*(struct(*(void),*(struct`)))))
;	O
scanlogtext	(*(struct),*(*(struct(*(void),*(struct`)))),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*`,long,array(long))),*(struct(long,long,long,*`,long,array(long))),*(char),struct(*(char),long),*(struct(*`,*`)),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)),bool)->(void)
(	O
es	*(struct)
,	O
ls	*(struct(*(void),*(struct(*(void),*(struct`)))))
,	O
deltas	*(struct)
->	O
entry	*(void)
,	O
true	int
)	O
;	O
}	O
finishedit	(*(struct),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),bool)->(void)
(	O
es	*(struct)
,	O
NULL	O
,	O
NULL	O
,	O
true	int
)	O
;	O
Ozclose	(*(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char)))))->(void)
(	O
&	O
FLOW	O
(	O
res	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
)	O
;	O
if	O
(	O
fcut	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
{	O
char	O
const	O
*	O
diffname	*(char)
=	O
maketemp	(int)->(*(char))
(	O
0	int
)	O
;	O
char	O
const	O
*	O
diffv	array(*(char))
[	O
6	int
+	O
!	O
!	O
OPEN_O_BINARY	int
]	O
;	O
char	O
const	O
*	O
*	O
diffp	*(*(char))
=	O
diffv	array(*(char))
;	O
*	O
++	O
diffp	*(*(char))
=	O
prog_diff	array(char)
;	O
*	O
++	O
diffp	*(*(char))
=	O
diff_flags	array(char)
;	O
*	O
++	O
diffp	*(*(char))
=	O
"-"	*(char)
;	O
*	O
++	O
diffp	*(*(char))
=	O
FLOW	O
(	O
result	*(char)
)	O
;	O
*	O
++	O
diffp	*(*(char))
=	O
'\0'	O
;	O
if	O
(	O
DIFF_TROUBLE	int
==	O
runv	(int,*(char),*(*(char)))->(int)
(	O
fileno	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
fcut	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
,	O
diffname	*(char)
,	O
diffv	array(*(char))
)	O
)	O
RFATAL	O
(	O
"diff failed"	*(char)
)	O
;	O
Ozclose	(*(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char)))))->(void)
(	O
&	O
fcut	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
return	O
putdtext	(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)),*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),bool)->(bool)
(	O
cuttail	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
,	O
diffname	*(char)
,	O
frew	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
true	int
)	O
;	O
}	O
else	O
return	O
putdtext	(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)),*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),bool)->(bool)
(	O
cuttail	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
,	O
FLOW	O
(	O
result	*(char)
)	O
,	O
frew	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
false	int
)	O
;	O
}	O
static	O
void	O
buildtree	()->(void)
(	O
void	O
)	O
{	O
struct	O
delta	struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long)),bool,long)
*	O
Delta	*(char)
;	O
if	O
(	O
cuthead	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
)	O
if	O
(	O
cuthead	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
ilk	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
==	O
delstrt	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
)	O
cuthead	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
ilk	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
=	O
cuttail	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
;	O
else	O
{	O
struct	O
wlink	struct(*(void),*(struct(*(void),*(struct(*(void),*(struct`))))))
*	O
pt	*(struct(*(void),*(struct(*(void),*(struct`)))))
=	O
cuthead	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
branches	*(struct)
,	O
*	O
pre	*(*(struct(*(void),*(struct(*`,*`)))))
=	O
pt	*(struct(*(void),*(struct(*(void),*(struct`)))))
;	O
while	O
(	O
pt	*(struct(*(void),*(struct(*(void),*(struct`)))))
&&	O
pt	*(struct(*(void),*(struct(*(void),*(struct`)))))
->	O
entry	*(void)
!=	O
delstrt	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
)	O
{	O
pre	*(*(struct(*(void),*(struct(*`,*`)))))
=	O
pt	*(struct(*(void),*(struct(*(void),*(struct`)))))
;	O
pt	*(struct(*(void),*(struct(*(void),*(struct`)))))
=	O
pt	*(struct(*(void),*(struct(*(void),*(struct`)))))
->	O
next	*(struct(*(void),*(struct(*(void),*(struct`)))))
;	O
}	O
if	O
(	O
cuttail	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
)	O
pt	*(struct(*(void),*(struct(*(void),*(struct`)))))
->	O
entry	*(void)
=	O
cuttail	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
;	O
else	O
if	O
(	O
pt	*(struct(*(void),*(struct(*(void),*(struct`)))))
==	O
pre	*(*(struct(*(void),*(struct(*`,*`)))))
)	O
cuthead	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
branches	*(struct)
=	O
pt	*(struct(*(void),*(struct(*(void),*(struct`)))))
->	O
next	*(struct(*(void),*(struct(*(void),*(struct`)))))
;	O
else	O
pre	*(*(struct(*(void),*(struct(*`,*`)))))
->	O
next	*(struct(*(void),*(struct(*(void),*(struct`)))))
=	O
pt	*(struct(*(void),*(struct(*(void),*(struct`)))))
->	O
next	*(struct(*(void),*(struct(*(void),*(struct`)))))
;	O
}	O
else	O
{	O
if	O
(	O
!	O
cuttail	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
&&	O
!	O
BE	O
(	O
quiet	bool
)	O
)	O
{	O
if	O
(	O
!	O
yesorno	(bool,*(char))->(bool)
(	O
false	int
,	O
"Do you really want to delete all revisions? [ny](n): "	*(char)
)	O
)	O
{	O
RERR	O
(	O
"No revision deleted"	*(char)
)	O
;	O
Delta	*(char)
=	O
delstrt	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
;	O
while	O
(	O
Delta	*(char)
)	O
{	O
Delta	*(char)
->	O
selector	bool
=	O
true	int
;	O
Delta	*(char)
=	O
Delta	*(char)
->	O
ilk	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
;	O
}	O
return	O
;	O
}	O
}	O
REPO	O
(	O
tip	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
)	O
=	O
cuttail	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
;	O
}	O
return	O
;	O
}	O
int	O
main	(int,*(*(char)))->(int)
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	*(*(char))
)	O
{	O
char	O
*	O
a	*(char)
,	O
*	O
*	O
newargv	*(*(*(char)))
,	O
*	O
textfile	*(char)
;	O
char	O
const	O
*	O
branchsym	*(char)
,	O
*	O
commsyml	*(char)
;	O
bool	bool
branchflag	bool
,	O
initflag	bool
,	O
textflag	bool
;	O
int	O
changed	int
,	O
expmode	int
;	O
bool	bool
strictlock	bool
,	O
strict_selected	bool
,	O
Ttimeflag	bool
;	O
bool	bool
keepRCStime	bool
;	O
size_t	long
commsymlen	long
;	O
struct	O
cbuf	struct(*(char),long)
branchnum	struct(*(char),long)
;	O
struct	O
link	struct(*(void),*(struct(*(void),*(struct(*(void),*(struct`))))))
boxlock	struct(*(void),*(struct(*(void),*(struct(*`,*`)))))
,	O
*	O
tplock	*(struct(*(void),*(struct(*(void),*(struct`)))))
;	O
struct	O
link	struct(*(void),*(struct(*(void),*(struct(*(void),*(struct`))))))
boxrm	struct(*(void),*(struct(*(void),*(struct(*`,*`)))))
,	O
*	O
tprm	*(struct(*(void),*(struct(*(void),*(struct`)))))
;	O
struct	O
link	struct(*(void),*(struct(*(void),*(struct(*(void),*(struct`))))))
*	O
tp_assoc	*(struct(*(void),*(struct(*(void),*(struct`)))))
,	O
*	O
tp_chacc	*(struct(*(void),*(struct(*(void),*(struct`)))))
,	O
*	O
tp_log	*(struct(*(void),*(struct(*(void),*(struct`)))))
,	O
*	O
tp_state	*(struct(*(void),*(struct(*(void),*(struct`)))))
;	O
struct	O
wlink	struct(*(void),*(struct(*(void),*(struct(*(void),*(struct`))))))
*	O
deltas	*(struct)
;	O
const	O
struct	O
program	struct(*(char),*(char),*(char),*(()->(void)))
program	struct(*(char),*(char),*(char),*(()->(void)))
=	O
{	O
.	O
invoke	*(char)
=	O
argv	*(*(char))
[	O
0	int
]	O
,	O
.	O
name	*(char)
=	O
"rcs"	*(char)
,	O
.	O
help	*(char)
=	O
help	*(char)
,	O
.	O
exiterr	*(()->(void))
=	O
exiterr	*(()->(void))
}	O
;	O
CHECK_HV	O
(	O
)	O
;	O
gnurcs_init	(*(struct(*(char),*(char),*(char),*(()->(void)))))->(void)
(	O
&	O
program	struct(*(char),*(char),*(char),*(()->(void)))
)	O
;	O
nosetid	()->(void)
(	O
)	O
;	O
tp_assoc	*(struct(*(void),*(struct(*(void),*(struct`)))))
=	O
&	O
assoclst	struct(*(void),*(struct(*(void),*(struct(*`,*`)))))
;	O
tp_chacc	*(struct(*(void),*(struct(*(void),*(struct`)))))
=	O
&	O
chaccess	struct(*(char),enum(int,int))
;	O
tp_log	*(struct(*(void),*(struct(*(void),*(struct`)))))
=	O
&	O
messagelst	struct(*(void),*(struct(*(void),*(struct(*`,*`)))))
;	O
tp_state	*(struct(*(void),*(struct(*(void),*(struct`)))))
=	O
&	O
statelst	struct(*(void),*(struct(*(void),*(struct(*`,*`)))))
;	O
branchsym	*(char)
=	O
commsyml	*(char)
=	O
textfile	*(char)
=	O
NULL	O
;	O
branchflag	bool
=	O
strictlock	bool
=	O
false	int
;	O
commsymlen	long
=	O
0	int
;	O
boxlock	struct(*(void),*(struct(*(void),*(struct(*`,*`)))))
.	O
next	*(struct(*(void),*(struct(*(void),*(struct`)))))
=	O
newlocklst	*(struct(*(void),*(struct(*(void),*(struct`)))))
;	O
tplock	*(struct(*(void),*(struct(*(void),*(struct`)))))
=	O
&	O
boxlock	struct(*(void),*(struct(*(void),*(struct(*`,*`)))))
;	O
boxrm	struct(*(void),*(struct(*(void),*(struct(*`,*`)))))
.	O
next	*(struct(*(void),*(struct(*(void),*(struct`)))))
=	O
rmvlocklst	*(struct(*(void),*(struct(*(void),*(struct`)))))
;	O
tprm	*(struct(*(void),*(struct(*(void),*(struct`)))))
=	O
&	O
boxrm	struct(*(void),*(struct(*(void),*(struct(*`,*`)))))
;	O
expmode	int
=	O
-	O
1	int
;	O
BE	O
(	O
pe	*(char)
)	O
=	O
X_DEFAULT	*(char)
;	O
initflag	bool
=	O
textflag	bool
=	O
false	int
;	O
strict_selected	bool
=	O
false	int
;	O
Ttimeflag	bool
=	O
false	int
;	O
if	O
(	O
1	int
<	O
argc	int
&&	O
argv	*(*(char))
[	O
1	int
]	O
[	O
0	int
]	O
!=	O
'-'	O
)	O
PWARN	O
(	O
"No options were given; this usage is obsolescent."	*(char)
)	O
;	O
argc	int
=	O
getRCSINIT	(int,*(*(char)),*(*(*(char))))->(int)
(	O
argc	int
,	O
argv	*(*(char))
,	O
&	O
newargv	*(*(*(char)))
)	O
;	O
argv	*(*(char))
=	O
newargv	*(*(*(char)))
;	O
while	O
(	O
a	*(char)
=	O
*	O
++	O
argv	*(*(char))
,	O
0	int
<	O
--	O
argc	int
&&	O
*	O
a	*(char)
++	O
==	O
'-'	O
)	O
{	O
switch	O
(	O
*	O
a	*(char)
++	O
)	O
{	O
case	O
'i'	O
:	O
initflag	bool
=	O
true	int
;	O
break	O
;	O
case	O
'b'	O
:	O
if	O
(	O
branchflag	bool
)	O
redefined	(int)->(void)
(	O
'b'	O
)	O
;	O
branchflag	bool
=	O
true	int
;	O
branchsym	*(char)
=	O
a	*(char)
;	O
break	O
;	O
case	O
'c'	O
:	O
if	O
(	O
commsyml	*(char)
)	O
redefined	(int)->(void)
(	O
'c'	O
)	O
;	O
commsyml	*(char)
=	O
a	*(char)
;	O
commsymlen	long
=	O
strlen	(*(char))->(long)
(	O
a	*(char)
)	O
;	O
break	O
;	O
case	O
'a'	O
:	O
getaccessor	(*(*(struct(*(void),*(struct`)))),*(char),enum(int,int))->(void)
(	O
&	O
tp_chacc	*(struct(*(void),*(struct(*(void),*(struct`)))))
,	O
*	O
argv	*(*(char))
+	O
1	int
,	O
append	int
)	O
;	O
break	O
;	O
case	O
'A'	O
:	O
if	O
(	O
!	O
*	O
a	*(char)
)	O
{	O
PERR	O
(	O
"missing filename after -A"	*(char)
)	O
;	O
break	O
;	O
}	O
*	O
argv	*(*(char))
=	O
a	*(char)
;	O
if	O
(	O
0	int
<	O
pairnames	(int,*(*(char)),*((*(struct(*`,bool,struct`,*`,struct`,*`,int)))->(*(struct))),bool,bool)->(int)
(	O
1	int
,	O
argv	*(*(char))
,	O
rcsreadopen	(*(struct(*((*`)->(*`)),bool,struct(*(char),long),*(struct),struct(*(char),long),*(struct(long,long,long,int,int,int,int,long,long,long,long,struct`,struct`,struct`,array(long))),int)))->(*(struct))
,	O
true	int
,	O
false	int
)	O
)	O
{	O
for	O
(	O
struct	O
link	struct(*(void),*(struct(*(void),*(struct(*(void),*(struct`))))))
*	O
ls	*(struct(*(void),*(struct(*(void),*(struct`)))))
=	O
GROK	O
(	O
access	*(struct)
)	O
;	O
ls	*(struct(*(void),*(struct(*(void),*(struct`)))))
;	O
ls	*(struct(*(void),*(struct(*(void),*(struct`)))))
=	O
ls	*(struct(*(void),*(struct(*(void),*(struct`)))))
->	O
next	*(struct(*(void),*(struct(*(void),*(struct`)))))
)	O
getchaccess	(*(*(struct(*(void),*(struct`)))),*(char),enum(int,int))->(void)
(	O
&	O
tp_chacc	*(struct(*(void),*(struct(*(void),*(struct`)))))
,	O
str_save	(*(char))->(*(char))
(	O
ls	*(struct(*(void),*(struct(*(void),*(struct`)))))
->	O
entry	*(void)
)	O
,	O
append	int
)	O
;	O
fro_zclose	(*(*(struct(int,long,enum(int,int,int),*(char),*(char),*(char),*((*`)->(void)),*(struct`),long))))->(void)
(	O
&	O
FLOW	O
(	O
from	*(struct)
)	O
)	O
;	O
}	O
break	O
;	O
case	O
'e'	O
:	O
getaccessor	(*(*(struct(*(void),*(struct`)))),*(char),enum(int,int))->(void)
(	O
&	O
tp_chacc	*(struct(*(void),*(struct(*(void),*(struct`)))))
,	O
*	O
argv	*(*(char))
+	O
1	int
,	O
erase	int
)	O
;	O
break	O
;	O
case	O
'l'	O
:	O
if	O
(	O
!	O
*	O
a	*(char)
)	O
{	O
lockhead	bool
=	O
true	int
;	O
break	O
;	O
}	O
tplock	*(struct(*(void),*(struct(*(void),*(struct`)))))
=	O
extend	(*(struct(*(void),*(struct(*`,*`)))),*(void),*(struct(*(char),*(struct),*(void),long)))->(*(struct(*(void),*(struct(*`,*`)))))
(	O
tplock	*(struct(*(void),*(struct(*(void),*(struct`)))))
,	O
a	*(char)
,	O
PLEXUS	O
)	O
;	O
break	O
;	O
case	O
'u'	O
:	O
if	O
(	O
!	O
*	O
a	*(char)
)	O
{	O
unlockcaller	bool
=	O
true	int
;	O
break	O
;	O
}	O
tprm	*(struct(*(void),*(struct(*(void),*(struct`)))))
=	O
extend	(*(struct(*(void),*(struct(*`,*`)))),*(void),*(struct(*(char),*(struct),*(void),long)))->(*(struct(*(void),*(struct(*`,*`)))))
(	O
tprm	*(struct(*(void),*(struct(*(void),*(struct`)))))
,	O
a	*(char)
,	O
PLEXUS	O
)	O
;	O
newlocklst	*(struct(*(void),*(struct(*(void),*(struct`)))))
=	O
boxlock	struct(*(void),*(struct(*(void),*(struct(*`,*`)))))
.	O
next	*(struct(*(void),*(struct(*(void),*(struct`)))))
;	O
tplock	*(struct(*(void),*(struct(*(void),*(struct`)))))
=	O
rmnewlocklst	(*(char))->(*(struct(*(void),*(struct(*`,*`)))))
(	O
a	*(char)
)	O
;	O
break	O
;	O
case	O
'L'	O
:	O
if	O
(	O
strict_selected	bool
)	O
{	O
if	O
(	O
!	O
strictlock	bool
)	O
PWARN	O
(	O
"-U overridden by -L"	*(char)
)	O
;	O
}	O
strictlock	bool
=	O
true	int
;	O
strict_selected	bool
=	O
true	int
;	O
break	O
;	O
case	O
'U'	O
:	O
if	O
(	O
strict_selected	bool
)	O
{	O
if	O
(	O
strictlock	bool
)	O
PWARN	O
(	O
"-L overridden by -U"	*(char)
)	O
;	O
}	O
strict_selected	bool
=	O
true	int
;	O
break	O
;	O
case	O
'n'	O
:	O
case	O
'N'	O
:	O
if	O
(	O
!	O
*	O
a	*(char)
)	O
{	O
PERR	O
(	O
"missing symbolic name after -%c"	*(char)
,	O
(	O
*	O
argv	*(*(char))
)	O
[	O
1	int
]	O
)	O
;	O
break	O
;	O
}	O
getassoclst	(*(*(struct(*(void),*(struct`)))),*(char))->(void)
(	O
&	O
tp_assoc	*(struct(*(void),*(struct(*(void),*(struct`)))))
,	O
(	O
*	O
argv	*(*(char))
)	O
+	O
1	int
)	O
;	O
break	O
;	O
case	O
'm'	O
:	O
getmessage	(*(*(struct(*(void),*(struct`)))),*(char))->(void)
(	O
&	O
tp_log	*(struct(*(void),*(struct(*(void),*(struct`)))))
,	O
a	*(char)
)	O
;	O
break	O
;	O
case	O
'M'	O
:	O
suppress_mail	bool
=	O
true	int
;	O
break	O
;	O
case	O
'o'	O
:	O
if	O
(	O
delrev	struct(*(char),*(char),int)
.	O
strt	*(char)
)	O
redefined	(int)->(void)
(	O
'o'	O
)	O
;	O
if	O
(	O
!	O
*	O
a	*(char)
)	O
{	O
PERR	O
(	O
"missing revision range after -o"	*(char)
)	O
;	O
break	O
;	O
}	O
parse_revpairs	(char,*(char),*((*(char),*(char),bool)->(void)))->(void)
(	O
'o'	O
,	O
(	O
*	O
argv	*(*(char))
)	O
+	O
2	int
,	O
putdelrev	(*(char),*(char),bool)->(void)
)	O
;	O
break	O
;	O
case	O
's'	O
:	O
if	O
(	O
!	O
*	O
a	*(char)
)	O
{	O
PERR	O
(	O
"state missing after -s"	*(char)
)	O
;	O
break	O
;	O
}	O
getstates	(*(*(struct(*(void),*(struct`)))),*(char))->(void)
(	O
&	O
tp_state	*(struct(*(void),*(struct(*(void),*(struct`)))))
,	O
(	O
*	O
argv	*(*(char))
)	O
+	O
1	int
)	O
;	O
break	O
;	O
case	O
't'	O
:	O
textflag	bool
=	O
true	int
;	O
if	O
(	O
*	O
a	*(char)
)	O
{	O
if	O
(	O
textfile	*(char)
)	O
redefined	(int)->(void)
(	O
't'	O
)	O
;	O
textfile	*(char)
=	O
a	*(char)
;	O
}	O
break	O
;	O
case	O
'T'	O
:	O
if	O
(	O
*	O
a	*(char)
)	O
goto	O
unknown	O
;	O
Ttimeflag	bool
=	O
true	int
;	O
break	O
;	O
case	O
'I'	O
:	O
BE	O
(	O
interactive	bool
)	O
=	O
true	int
;	O
break	O
;	O
case	O
'q'	O
:	O
BE	O
(	O
quiet	bool
)	O
=	O
true	int
;	O
break	O
;	O
case	O
'x'	O
:	O
BE	O
(	O
pe	*(char)
)	O
=	O
a	*(char)
;	O
break	O
;	O
case	O
'V'	O
:	O
setRCSversion	(*(char))->(void)
(	O
*	O
argv	*(*(char))
)	O
;	O
break	O
;	O
case	O
'z'	O
:	O
zone_set	(*(char))->(void)
(	O
a	*(char)
)	O
;	O
break	O
;	O
case	O
'k'	O
:	O
if	O
(	O
0	int
<=	O
expmode	int
)	O
redefined	(int)->(void)
(	O
'k'	O
)	O
;	O
if	O
(	O
0	int
<=	O
(	O
expmode	int
=	O
str2expmode	(*(char))->(int)
(	O
a	*(char)
)	O
)	O
)	O
break	O
;	O
default	O
:	O
unknown	O
:	O
bad_option	(*(char))->(void)
(	O
*	O
argv	*(*(char))
)	O
;	O
}	O
;	O
}	O
newlocklst	*(struct(*(void),*(struct(*(void),*(struct`)))))
=	O
boxlock	struct(*(void),*(struct(*(void),*(struct(*`,*`)))))
.	O
next	*(struct(*(void),*(struct(*(void),*(struct`)))))
;	O
rmvlocklst	*(struct(*(void),*(struct(*(void),*(struct`)))))
=	O
boxrm	struct(*(void),*(struct(*(void),*(struct(*`,*`)))))
.	O
next	*(struct(*(void),*(struct(*(void),*(struct`)))))
;	O
if	O
(	O
FLOW	O
(	O
erroneousp	bool
)	O
)	O
cleanup	()->(void)
(	O
)	O
;	O
else	O
if	O
(	O
argc	int
<	O
1	int
)	O
PFATAL	O
(	O
"no input file"	*(char)
)	O
;	O
else	O
for	O
(	O
;	O
0	int
<	O
argc	int
;	O
cleanup	()->(void)
(	O
)	O
,	O
++	O
argv	*(*(char))
,	O
--	O
argc	int
)	O
{	O
struct	O
delta	struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long)),bool,long)
*	O
tip	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
;	O
char	O
const	O
*	O
defbr	*(char)
;	O
struct	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
*	O
repo_stat	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
;	O
struct	O
cbuf	struct(*(char),long)
newdesc	struct(*(char),long)
=	O
{	O
.	O
string	*(char)
=	O
NULL	O
,	O
.	O
size	long
=	O
0	int
}	O
;	O
ffree	()->(void)
(	O
)	O
;	O
if	O
(	O
initflag	bool
)	O
{	O
switch	O
(	O
pairnames	(int,*(*(char)),*((*(struct(*`,bool,struct`,*`,struct`,*`,int)))->(*(struct))),bool,bool)->(int)
(	O
argc	int
,	O
argv	*(*(char))
,	O
rcswriteopen	(*(struct(*((*`)->(*`)),bool,struct(*(char),long),*(struct),struct(*(char),long),*(struct(long,long,long,int,int,int,int,long,long,long,long,struct`,struct`,struct`,array(long))),int)))->(*(struct))
,	O
false	int
,	O
false	int
)	O
)	O
{	O
case	O
-	O
1	int
:	O
break	O
;	O
case	O
0	int
:	O
continue	O
;	O
case	O
1	int
:	O
RERR	O
(	O
"already exists"	*(char)
)	O
;	O
continue	O
;	O
}	O
}	O
else	O
{	O
switch	O
(	O
pairnames	(int,*(*(char)),*((*(struct(*`,bool,struct`,*`,struct`,*`,int)))->(*(struct))),bool,bool)->(int)
(	O
argc	int
,	O
argv	*(*(char))
,	O
rcswriteopen	(*(struct(*((*`)->(*`)),bool,struct(*(char),long),*(struct),struct(*(char),long),*(struct(long,long,long,int,int,int,int,long,long,long,long,struct`,struct`,struct`,array(long))),int)))->(*(struct))
,	O
true	int
,	O
false	int
)	O
)	O
{	O
case	O
-	O
1	int
:	O
continue	O
;	O
case	O
0	int
:	O
continue	O
;	O
case	O
1	int
:	O
break	O
;	O
}	O
}	O
repo_stat	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
=	O
&	O
REPO	O
(	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
)	O
;	O
tip	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
=	O
REPO	O
(	O
tip	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
)	O
;	O
defbr	*(char)
=	O
GROK	O
(	O
branch	*(char)
)	O
;	O
diagnose	(*(char))->(void)
(	O
"RCS file: %s"	*(char)
,	O
REPO	O
(	O
filename	*(char)
)	O
)	O
;	O
changed	int
=	O
initflag	bool
|	O
textflag	bool
;	O
keepRCStime	bool
=	O
Ttimeflag	bool
;	O
if	O
(	O
!	O
initflag	bool
)	O
{	O
if	O
(	O
!	O
checkaccesslist	()->(bool)
(	O
)	O
)	O
continue	O
;	O
}	O
if	O
(	O
strict_selected	bool
)	O
{	O
changed	int
|=	O
BE	O
(	O
strictly_locking	bool
)	O
^	O
strictlock	bool
;	O
BE	O
(	O
strictly_locking	bool
)	O
=	O
strictlock	bool
;	O
}	O
if	O
(	O
commsyml	*(char)
&&	O
(	O
commsymlen	long
!=	O
REPO	O
(	O
log_lead	struct(*(char),long)
)	O
.	O
size	long
||	O
MEM_DIFF	O
(	O
commsymlen	long
,	O
commsyml	*(char)
,	O
REPO	O
(	O
log_lead	struct(*(char),long)
)	O
.	O
string	*(char)
)	O
)	O
)	O
{	O
REPO	O
(	O
log_lead	struct(*(char),long)
)	O
.	O
string	*(char)
=	O
commsyml	*(char)
;	O
REPO	O
(	O
log_lead	struct(*(char),long)
)	O
.	O
size	long
=	O
commsymlen	long
;	O
changed	int
=	O
true	int
;	O
}	O
if	O
(	O
0	int
<=	O
expmode	int
&&	O
BE	O
(	O
kws	int
)	O
!=	O
expmode	int
)	O
{	O
BE	O
(	O
kws	int
)	O
=	O
expmode	int
;	O
changed	int
=	O
true	int
;	O
}	O
if	O
(	O
branchflag	bool
&&	O
fully_numeric_no_k	O
(	O
&	O
branchnum	struct(*(char),long)
,	O
branchsym	*(char)
)	O
)	O
{	O
if	O
(	O
countnumflds	(*(char))->(int)
(	O
branchnum	struct(*(char),long)
.	O
string	*(char)
)	O
)	O
{	O
if	O
(	O
!	O
NUM_EQ	O
(	O
defbr	*(char)
,	O
branchnum	struct(*(char),long)
.	O
string	*(char)
)	O
)	O
{	O
defbr	*(char)
=	O
GROK	O
(	O
branch	*(char)
)	O
=	O
branchnum	struct(*(char),long)
.	O
string	*(char)
;	O
changed	int
=	O
true	int
;	O
}	O
}	O
else	O
if	O
(	O
defbr	*(char)
)	O
{	O
defbr	*(char)
=	O
GROK	O
(	O
branch	*(char)
)	O
=	O
NULL	O
;	O
changed	int
=	O
true	int
;	O
}	O
}	O
changed	int
|=	O
doaccess	()->(bool)
(	O
)	O
;	O
changed	int
|=	O
doassoc	()->(bool)
(	O
)	O
;	O
changed	int
|=	O
dolocks	(*(*(struct(*(void),*(struct`)))))->(bool)
(	O
&	O
deltas	*(struct)
)	O
;	O
changed	int
|=	O
domessages	(*(*(struct(*(void),*(struct`)))))->(bool)
(	O
&	O
deltas	*(struct)
)	O
;	O
if	O
(	O
chgheadstate	bool
)	O
{	O
if	O
(	O
!	O
defbr	*(char)
)	O
{	O
if	O
(	O
!	O
tip	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
)	O
RWARN	O
(	O
"can't change states in an empty tree"	*(char)
)	O
;	O
else	O
if	O
(	O
STR_DIFF	O
(	O
tip	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
state	*(char)
,	O
headstate	*(char)
)	O
)	O
{	O
tip	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
state	*(char)
=	O
headstate	*(char)
;	O
changed	int
=	O
true	int
;	O
}	O
}	O
else	O
changed	int
|=	O
rcs_setstate	(*(char),*(char),*(*(struct(*(void),*(struct`)))))->(bool)
(	O
defbr	*(char)
,	O
headstate	*(char)
,	O
&	O
deltas	*(struct)
)	O
;	O
}	O
for	O
(	O
struct	O
link	struct(*(void),*(struct(*(void),*(struct(*(void),*(struct`))))))
*	O
ls	*(struct(*(void),*(struct(*(void),*(struct`)))))
=	O
statelst	struct(*(void),*(struct(*(void),*(struct(*`,*`)))))
.	O
next	*(struct(*(void),*(struct(*(void),*(struct`)))))
;	O
ls	*(struct(*(void),*(struct(*(void),*(struct`)))))
;	O
ls	*(struct(*(void),*(struct(*(void),*(struct`)))))
=	O
ls	*(struct(*(void),*(struct(*(void),*(struct`)))))
->	O
next	*(struct(*(void),*(struct(*(void),*(struct`)))))
)	O
{	O
struct	O
u_state	struct(*(char),*(char))
const	O
*	O
us	*(struct(*(char),*(char)))
=	O
ls	*(struct(*(void),*(struct(*(void),*(struct`)))))
->	O
entry	*(void)
;	O
changed	int
|=	O
rcs_setstate	(*(char),*(char),*(*(struct(*(void),*(struct`)))))->(bool)
(	O
us	*(struct(*(char),*(char)))
->	O
revno	*(char)
,	O
us	*(struct(*(char),*(char)))
->	O
status	int
,	O
&	O
deltas	*(struct)
)	O
;	O
}	O
cuthead	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
=	O
cuttail	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
=	O
NULL	O
;	O
if	O
(	O
delrev	struct(*(char),*(char),int)
.	O
strt	*(char)
&&	O
removerevs	()->(bool)
(	O
)	O
)	O
{	O
if	O
(	O
cuttail	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
)	O
gr_revno	(*(char),*(*(struct)))->(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)))
(	O
cuttail	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
num	*(char)
,	O
&	O
deltas	*(struct)
)	O
;	O
buildtree	()->(void)
(	O
)	O
;	O
tip	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
=	O
REPO	O
(	O
tip	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
)	O
;	O
changed	int
=	O
true	int
;	O
keepRCStime	bool
=	O
false	int
;	O
}	O
if	O
(	O
FLOW	O
(	O
erroneousp	bool
)	O
)	O
continue	O
;	O
putadmin	()->(void)
(	O
)	O
;	O
if	O
(	O
tip	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
)	O
puttree	(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(void)
(	O
tip	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
,	O
FLOW	O
(	O
rewr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
)	O
;	O
putdesc	(*(struct(*(char),long)),bool,*(char))->(void)
(	O
&	O
newdesc	struct(*(char),long)
,	O
textflag	bool
,	O
textfile	*(char)
)	O
;	O
if	O
(	O
1	int
)	O
{	O
if	O
(	O
delrev	struct(*(char),*(char),int)
.	O
strt	*(char)
||	O
messagelst	struct(*(void),*(struct(*(void),*(struct(*`,*`)))))
.	O
next	*(struct(*(void),*(struct(*(void),*(struct`)))))
)	O
{	O
struct	O
fro	struct(int,long,enum(int,int,int),*(char),*(char),*(char),*((*(struct(int,long,enum(int,int,int),*(char),*(char),*(char),*((*`)->(void)),*(struct`),long)))->(void)),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char))),long)
*	O
from	*(struct)
=	O
FLOW	O
(	O
from	*(struct)
)	O
;	O
struct	O
editstuff	O
*	O
es	*(struct)
=	O
make_editstuff	()->(*(struct))
(	O
)	O
;	O
struct	O
wlink	struct(*(void),*(struct(*(void),*(struct(*(void),*(struct`))))))
*	O
ls	*(struct(*(void),*(struct(*(void),*(struct`)))))
=	O
GROK	O
(	O
deltas	*(struct)
)	O
;	O
if	O
(	O
!	O
cuttail	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
||	O
buildeltatext	(*(struct),*(*(struct(*(void),*(struct`)))),*(struct(*(void),*(struct(*`,*`)))))->(bool)
(	O
es	*(struct)
,	O
&	O
ls	*(struct(*(void),*(struct(*(void),*(struct`)))))
,	O
deltas	*(struct)
)	O
)	O
{	O
fro_trundling	(bool,*(struct(int,long,enum(int,int,int),*(char),*(char),*(char),*((*`)->(void)),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),long)))->(void)
(	O
true	int
,	O
from	*(struct)
)	O
;	O
if	O
(	O
cuttail	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
)	O
ls	*(struct(*(void),*(struct(*(void),*(struct`)))))
=	O
ls	*(struct(*(void),*(struct(*(void),*(struct`)))))
->	O
next	*(struct(*(void),*(struct(*(void),*(struct`)))))
;	O
scanlogtext	(*(struct),*(*(struct(*(void),*(struct`)))),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*`,long,array(long))),*(struct(long,long,long,*`,long,array(long))),*(char),struct(*(char),long),*(struct(*`,*`)),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)),bool)->(void)
(	O
es	*(struct)
,	O
&	O
ls	*(struct(*(void),*(struct(*(void),*(struct`)))))
,	O
NULL	O
,	O
false	int
)	O
;	O
changed	int
=	O
true	int
;	O
}	O
unmake_editstuff	(*(struct))->(void)
(	O
es	*(struct)
)	O
;	O
IGNORE_REST	O
(	O
from	*(struct)
)	O
;	O
}	O
else	O
if	O
(	O
GROK	O
(	O
desc	*(struct)
)	O
)	O
SAME_AFTER	O
(	O
FLOW	O
(	O
from	*(struct)
)	O
,	O
GROK	O
(	O
desc	*(struct)
)	O
)	O
;	O
}	O
if	O
(	O
initflag	bool
)	O
{	O
if	O
(	O
PROB	O
(	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
(	O
MANI	O
(	O
filename	*(char)
)	O
,	O
repo_stat	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
)	O
)	O
)	O
{	O
changed	int
=	O
-	O
1	int
;	O
}	O
repo_stat	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
->	O
st_nlink	long
=	O
0	int
;	O
keepRCStime	bool
=	O
false	int
;	O
}	O
if	O
(	O
PROB	O
(	O
donerewrite	(int,long)->(int)
(	O
changed	int
,	O
keepRCStime	bool
?	O
repo_stat	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
->	O
st_mtime	O
:	O
(	O
time_t	long
)	O
-	O
1	int
)	O
)	O
)	O
break	O
;	O
diagnose	(*(char))->(void)
(	O
"done"	*(char)
)	O
;	O
}	O
tempunlink	()->(void)
(	O
)	O
;	O
gnurcs_goodbye	()->(void)
(	O
)	O
;	O
return	O
exitstatus	int
;	O
}	O
