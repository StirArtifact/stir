extern	O
dataobs	struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int)
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
]	O
;	O
extern	O
FILE	struct
*	O
dap_lst	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
;	O
extern	O
FILE	struct
*	O
dap_err	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
;	O
extern	O
char	O
*	O
dap_sttnm	array(*(char))
[	O
NSTATS	O
]	O
;	O
static	O
double	O
gettwo	(double)->(double)
(	O
double	O
x	array(double)
)	O
{	O
double	O
t	double
;	O
for	O
(	O
t	double
=	O
1.0	int
,	O
x	array(double)
=	O
fabs	(double)->(double)
(	O
x	array(double)
)	O
;	O
t	double
>	O
x	array(double)
;	O
t	double
/=	O
2.0	int
)	O
;	O
while	O
(	O
t	double
<	O
x	array(double)
)	O
t	double
*=	O
2.0	int
;	O
return	O
t	double
;	O
}	O
static	O
int	O
rowred	(*(*(double)),array(int),int,int,array(double),int,int,*(int))->(int)
(	O
double	O
*	O
*	O
coeff	*(*(double))
,	O
int	O
rterm	array(int)
[	O
]	O
,	O
int	O
byterm	int
,	O
int	O
ncells	int
,	O
double	O
nobs	array(double)
[	O
]	O
,	O
int	O
row1	int
,	O
int	O
row2	int
,	O
int	O
*	O
nonz	*(int)
)	O
{	O
int	O
*	O
misscol	*(int)
;	O
int	O
celln	int
;	O
int	O
ncols	int
;	O
int	O
col	int
,	O
subcol	int
;	O
int	O
row	int
,	O
subrow	int
;	O
int	O
maxrow	int
;	O
double	O
colmax	double
;	O
double	O
rowmax	double
;	O
double	O
tmp	double
,	O
tmp1	double
,	O
tmp2	double
;	O
int	O
itmp	int
;	O
double	O
mult1	double
,	O
mult2	double
;	O
int	O
nterms	int
;	O
int	O
*	O
term	*(int)
;	O
int	O
t	double
;	O
int	O
elimrow	int
;	O
nterms	int
=	O
0	int
;	O
elimrow	int
=	O
0	int
;	O
misscol	*(int)
=	O
(	O
int	O
*	O
)	O
dap_malloc	(int,*(char))->(*(char))
(	O
sizeof	O
(	O
int	O
)	O
*	O
ncells	int
,	O
""	*(char)
)	O
;	O
term	*(int)
=	O
(	O
int	O
*	O
)	O
dap_malloc	(int,*(char))->(*(char))
(	O
sizeof	O
(	O
int	O
)	O
*	O
ncells	int
,	O
""	*(char)
)	O
;	O
if	O
(	O
byterm	int
)	O
{	O
nterms	int
=	O
0	int
;	O
term	*(int)
[	O
nterms	int
++	O
]	O
=	O
0	int
;	O
for	O
(	O
row	int
=	O
row1	int
+	O
1	int
;	O
row	int
<=	O
row2	int
;	O
row	int
++	O
)	O
{	O
for	O
(	O
t	double
=	O
1	int
;	O
t	double
<	O
nterms	int
;	O
t	double
++	O
)	O
{	O
if	O
(	O
rterm	array(int)
[	O
row	int
]	O
==	O
term	*(int)
[	O
t	double
]	O
)	O
break	O
;	O
}	O
if	O
(	O
t	double
==	O
nterms	int
)	O
term	*(int)
[	O
nterms	int
++	O
]	O
=	O
rterm	array(int)
[	O
row	int
]	O
;	O
}	O
}	O
for	O
(	O
celln	int
=	O
0	int
,	O
ncols	int
=	O
0	int
;	O
celln	int
<	O
ncells	int
;	O
celln	int
++	O
)	O
{	O
if	O
(	O
nobs	array(double)
[	O
celln	int
]	O
==	O
0.0	int
)	O
misscol	*(int)
[	O
ncols	int
++	O
]	O
=	O
celln	int
;	O
}	O
for	O
(	O
t	double
=	O
0	int
;	O
(	O
byterm	int
&&	O
t	double
<	O
nterms	int
)	O
||	O
t	double
<	O
1	int
;	O
t	double
++	O
)	O
{	O
for	O
(	O
row	int
=	O
(	O
t	double
?	O
row1	int
+	O
1	int
:	O
0	int
)	O
;	O
row	int
<=	O
(	O
t	double
?	O
row2	int
:	O
row1	int
)	O
;	O
row	int
++	O
)	O
{	O
if	O
(	O
!	O
byterm	int
||	O
row	int
<=	O
row1	int
||	O
rterm	array(int)
[	O
row	int
]	O
==	O
term	*(int)
[	O
t	double
]	O
)	O
break	O
;	O
}	O
for	O
(	O
col	int
=	O
0	int
;	O
col	int
<	O
ncols	int
;	O
col	int
++	O
)	O
{	O
while	O
(	O
byterm	int
&&	O
row	int
>	O
row1	int
&&	O
rterm	array(int)
[	O
row	int
]	O
!=	O
term	*(int)
[	O
t	double
]	O
&&	O
row	int
<	O
(	O
t	double
?	O
row2	int
:	O
row1	int
)	O
)	O
row	int
++	O
;	O
for	O
(	O
colmax	double
=	O
0.0	int
,	O
maxrow	int
=	O
row	int
,	O
subrow	int
=	O
row	int
;	O
subrow	int
<=	O
(	O
t	double
?	O
row2	int
:	O
row1	int
)	O
;	O
subrow	int
++	O
)	O
{	O
if	O
(	O
byterm	int
&&	O
subrow	int
>	O
row1	int
&&	O
rterm	array(int)
[	O
subrow	int
]	O
!=	O
term	*(int)
[	O
t	double
]	O
)	O
continue	O
;	O
if	O
(	O
(	O
tmp	double
=	O
fabs	(double)->(double)
(	O
coeff	*(*(double))
[	O
subrow	int
]	O
[	O
misscol	*(int)
[	O
col	int
]	O
]	O
)	O
)	O
>	O
colmax	double
)	O
{	O
colmax	double
=	O
tmp	double
;	O
maxrow	int
=	O
subrow	int
;	O
}	O
}	O
if	O
(	O
colmax	double
>	O
dap_redtol	double
)	O
{	O
if	O
(	O
maxrow	int
!=	O
row	int
)	O
{	O
for	O
(	O
subcol	int
=	O
0	int
;	O
subcol	int
<	O
ncells	int
;	O
subcol	int
++	O
)	O
{	O
tmp	double
=	O
coeff	*(*(double))
[	O
row	int
]	O
[	O
subcol	int
]	O
;	O
coeff	*(*(double))
[	O
row	int
]	O
[	O
subcol	int
]	O
=	O
coeff	*(*(double))
[	O
maxrow	int
]	O
[	O
subcol	int
]	O
;	O
coeff	*(*(double))
[	O
maxrow	int
]	O
[	O
subcol	int
]	O
=	O
tmp	double
;	O
itmp	int
=	O
rterm	array(int)
[	O
row	int
]	O
;	O
rterm	array(int)
[	O
row	int
]	O
=	O
rterm	array(int)
[	O
maxrow	int
]	O
;	O
rterm	array(int)
[	O
maxrow	int
]	O
=	O
itmp	int
;	O
}	O
}	O
for	O
(	O
subrow	int
=	O
row	int
+	O
1	int
;	O
subrow	int
<=	O
row2	int
;	O
subrow	int
++	O
)	O
{	O
if	O
(	O
byterm	int
&&	O
subrow	int
>	O
row1	int
&&	O
rterm	array(int)
[	O
subrow	int
]	O
!=	O
term	*(int)
[	O
t	double
]	O
)	O
continue	O
;	O
mult1	double
=	O
coeff	*(*(double))
[	O
subrow	int
]	O
[	O
misscol	*(int)
[	O
col	int
]	O
]	O
;	O
mult2	double
=	O
coeff	*(*(double))
[	O
row	int
]	O
[	O
misscol	*(int)
[	O
col	int
]	O
]	O
;	O
if	O
(	O
fabs	(double)->(double)
(	O
mult1	double
)	O
>	O
dap_redtol	double
*	O
fabs	(double)->(double)
(	O
mult2	double
)	O
)	O
{	O
for	O
(	O
subcol	int
=	O
0	int
,	O
rowmax	double
=	O
0.0	int
;	O
subcol	int
<	O
ncells	int
;	O
subcol	int
++	O
)	O
{	O
tmp	double
=	O
mult2	double
*	O
coeff	*(*(double))
[	O
subrow	int
]	O
[	O
subcol	int
]	O
;	O
tmp1	double
=	O
mult1	double
*	O
coeff	*(*(double))
[	O
row	int
]	O
[	O
subcol	int
]	O
;	O
coeff	*(*(double))
[	O
subrow	int
]	O
[	O
subcol	int
]	O
=	O
tmp	double
-	O
tmp1	double
;	O
tmp2	double
=	O
fabs	(double)->(double)
(	O
coeff	*(*(double))
[	O
subrow	int
]	O
[	O
subcol	int
]	O
)	O
;	O
if	O
(	O
tmp2	double
<	O
dap_redtol	double
*	O
(	O
fabs	(double)->(double)
(	O
tmp	double
)	O
+	O
fabs	(double)->(double)
(	O
tmp1	double
)	O
)	O
)	O
coeff	*(*(double))
[	O
subrow	int
]	O
[	O
subcol	int
]	O
=	O
0.0	int
;	O
else	O
if	O
(	O
tmp2	double
>	O
rowmax	double
)	O
rowmax	double
=	O
tmp2	double
;	O
}	O
tmp	double
=	O
gettwo	(double)->(double)
(	O
rowmax	double
)	O
;	O
for	O
(	O
subcol	int
=	O
0	int
;	O
subcol	int
<	O
ncells	int
;	O
subcol	int
++	O
)	O
{	O
coeff	*(*(double))
[	O
subrow	int
]	O
[	O
subcol	int
]	O
/=	O
tmp	double
;	O
if	O
(	O
fabs	(double)->(double)
(	O
coeff	*(*(double))
[	O
subrow	int
]	O
[	O
subcol	int
]	O
)	O
<	O
dap_redtol	double
)	O
coeff	*(*(double))
[	O
subrow	int
]	O
[	O
subcol	int
]	O
=	O
0.0	int
;	O
}	O
}	O
}	O
row	int
++	O
;	O
}	O
}	O
if	O
(	O
!	O
t	double
)	O
elimrow	int
=	O
row	int
;	O
}	O
if	O
(	O
byterm	int
)	O
{	O
for	O
(	O
t	double
=	O
0	int
;	O
t	double
<	O
nterms	int
;	O
t	double
++	O
)	O
{	O
for	O
(	O
row	int
=	O
(	O
t	double
?	O
row2	int
:	O
row1	int
)	O
;	O
row	int
>	O
(	O
t	double
?	O
row1	int
+	O
1	int
:	O
0	int
)	O
;	O
--	O
row	int
)	O
{	O
if	O
(	O
row	int
<=	O
row1	int
||	O
rterm	array(int)
[	O
row	int
]	O
==	O
term	*(int)
[	O
t	double
]	O
)	O
break	O
;	O
}	O
for	O
(	O
;	O
row	int
>	O
(	O
t	double
?	O
row1	int
+	O
1	int
:	O
0	int
)	O
;	O
--	O
row	int
)	O
{	O
if	O
(	O
row	int
>	O
row1	int
&&	O
rterm	array(int)
[	O
row	int
]	O
!=	O
term	*(int)
[	O
t	double
]	O
)	O
continue	O
;	O
for	O
(	O
col	int
=	O
0	int
;	O
col	int
<	O
ncols	int
;	O
col	int
++	O
)	O
{	O
if	O
(	O
fabs	(double)->(double)
(	O
coeff	*(*(double))
[	O
row	int
]	O
[	O
misscol	*(int)
[	O
col	int
]	O
]	O
)	O
>	O
dap_redtol	double
)	O
break	O
;	O
}	O
if	O
(	O
col	int
<	O
ncols	int
)	O
{	O
for	O
(	O
subrow	int
=	O
row	int
-	O
1	int
;	O
subrow	int
>=	O
(	O
t	double
?	O
row1	int
+	O
1	int
:	O
0	int
)	O
;	O
--	O
subrow	int
)	O
{	O
if	O
(	O
subrow	int
>	O
row1	int
&&	O
rterm	array(int)
[	O
subrow	int
]	O
!=	O
term	*(int)
[	O
t	double
]	O
)	O
continue	O
;	O
mult1	double
=	O
coeff	*(*(double))
[	O
subrow	int
]	O
[	O
misscol	*(int)
[	O
col	int
]	O
]	O
;	O
mult2	double
=	O
coeff	*(*(double))
[	O
row	int
]	O
[	O
misscol	*(int)
[	O
col	int
]	O
]	O
;	O
if	O
(	O
fabs	(double)->(double)
(	O
mult1	double
)	O
>	O
dap_redtol	double
*	O
fabs	(double)->(double)
(	O
mult2	double
)	O
)	O
{	O
for	O
(	O
col	int
=	O
0	int
,	O
rowmax	double
=	O
0.0	int
;	O
col	int
<	O
ncells	int
;	O
col	int
++	O
)	O
{	O
tmp	double
=	O
mult2	double
*	O
coeff	*(*(double))
[	O
subrow	int
]	O
[	O
col	int
]	O
;	O
tmp1	double
=	O
mult1	double
*	O
coeff	*(*(double))
[	O
row	int
]	O
[	O
col	int
]	O
;	O
coeff	*(*(double))
[	O
subrow	int
]	O
[	O
col	int
]	O
=	O
tmp	double
-	O
tmp1	double
;	O
if	O
(	O
fabs	(double)->(double)
(	O
coeff	*(*(double))
[	O
subrow	int
]	O
[	O
col	int
]	O
)	O
<	O
dap_redtol	double
*	O
(	O
fabs	(double)->(double)
(	O
tmp	double
)	O
+	O
fabs	(double)->(double)
(	O
tmp1	double
)	O
)	O
)	O
coeff	*(*(double))
[	O
subrow	int
]	O
[	O
col	int
]	O
=	O
0.0	int
;	O
else	O
if	O
(	O
fabs	(double)->(double)
(	O
coeff	*(*(double))
[	O
subrow	int
]	O
[	O
col	int
]	O
)	O
>	O
rowmax	double
)	O
rowmax	double
=	O
fabs	(double)->(double)
(	O
coeff	*(*(double))
[	O
subrow	int
]	O
[	O
col	int
]	O
)	O
;	O
}	O
tmp	double
=	O
gettwo	(double)->(double)
(	O
rowmax	double
)	O
;	O
for	O
(	O
col	int
=	O
0	int
;	O
col	int
<	O
ncells	int
;	O
col	int
++	O
)	O
{	O
coeff	*(*(double))
[	O
subrow	int
]	O
[	O
col	int
]	O
/=	O
tmp	double
;	O
if	O
(	O
fabs	(double)->(double)
(	O
coeff	*(*(double))
[	O
subrow	int
]	O
[	O
col	int
]	O
)	O
<	O
dap_redtol	double
)	O
coeff	*(*(double))
[	O
subrow	int
]	O
[	O
col	int
]	O
=	O
0.0	int
;	O
}	O
}	O
}	O
}	O
}	O
}	O
}	O
if	O
(	O
nonz	*(int)
)	O
{	O
for	O
(	O
row	int
=	O
0	int
;	O
row	int
<=	O
row2	int
;	O
row	int
++	O
)	O
{	O
nonz	*(int)
[	O
row	int
]	O
=	O
0	int
;	O
for	O
(	O
col	int
=	O
0	int
;	O
col	int
<	O
ncells	int
;	O
col	int
++	O
)	O
{	O
if	O
(	O
fabs	(double)->(double)
(	O
coeff	*(*(double))
[	O
row	int
]	O
[	O
col	int
]	O
)	O
>	O
dap_zerotol	double
)	O
{	O
if	O
(	O
nobs	array(double)
[	O
col	int
]	O
>	O
0.0	int
)	O
{	O
nonz	*(int)
[	O
row	int
]	O
=	O
1	int
;	O
break	O
;	O
}	O
}	O
}	O
}	O
}	O
dap_free	(*(void),*(char))->(void)
(	O
misscol	*(int)
,	O
""	*(char)
)	O
;	O
dap_free	(*(void),*(char))->(void)
(	O
term	*(int)
,	O
""	*(char)
)	O
;	O
if	O
(	O
elimrow	int
==	O
ncols	int
)	O
return	O
elimrow	int
;	O
fputs	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
"error terms insufficient to impute missing cells\n"	*(char)
,	O
dap_err	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
static	O
double	O
lcm	(double,double)->(double)
(	O
double	O
x	array(double)
,	O
double	O
y	double
)	O
{	O
int	O
ix	int
,	O
iy	int
;	O
int	O
q	int
,	O
r	double
;	O
int	O
lcmxy	int
;	O
ix	int
=	O
(	O
int	O
)	O
x	array(double)
;	O
iy	int
=	O
(	O
int	O
)	O
y	double
;	O
lcmxy	int
=	O
ix	int
*	O
iy	int
;	O
for	O
(	O
;	O
;	O
)	O
{	O
q	int
=	O
iy	int
/	O
ix	int
;	O
r	double
=	O
iy	int
-	O
q	int
*	O
ix	int
;	O
if	O
(	O
r	double
)	O
{	O
iy	int
=	O
ix	int
;	O
ix	int
=	O
r	double
;	O
}	O
else	O
break	O
;	O
}	O
return	O
(	O
double	O
)	O
(	O
lcmxy	int
/	O
ix	int
)	O
;	O
}	O
static	O
int	O
orthog	(*(*(double)),int,int,int,int,*(double),*(int),*(int))->(int)
(	O
double	O
*	O
*	O
coeff	*(*(double))
,	O
int	O
row0	int
,	O
int	O
row1	int
,	O
int	O
row2	int
,	O
int	O
ncells	int
,	O
double	O
*	O
nobs	array(double)
,	O
int	O
*	O
indep	*(int)
,	O
int	O
*	O
rterm	array(int)
)	O
{	O
double	O
lcmnobs	double
;	O
int	O
updown	int
;	O
int	O
*	O
term	*(int)
;	O
int	O
nterms	int
;	O
int	O
t	double
;	O
int	O
cr	int
;	O
int	O
cc	int
;	O
int	O
crr	int
;	O
double	O
lensq	double
;	O
double	O
dot	double
;	O
double	O
tmp	double
,	O
tmp1	double
;	O
double	O
mult1	double
,	O
mult2	double
;	O
double	O
rowmax	double
;	O
int	O
df	int
;	O
nterms	int
=	O
0	int
;	O
term	*(int)
=	O
(	O
int	O
*	O
)	O
dap_malloc	(int,*(char))->(*(char))
(	O
sizeof	O
(	O
int	O
)	O
*	O
ncells	int
,	O
""	*(char)
)	O
;	O
if	O
(	O
row2	int
>=	O
row0	int
)	O
updown	int
=	O
1	int
;	O
else	O
updown	int
=	O
-	O
1	int
;	O
df	int
=	O
0	int
;	O
if	O
(	O
rterm	array(int)
)	O
{	O
for	O
(	O
cr	int
=	O
row0	int
,	O
nterms	int
=	O
0	int
;	O
cr	int
!=	O
row2	int
+	O
updown	int
;	O
cr	int
+=	O
updown	int
)	O
{	O
for	O
(	O
t	double
=	O
0	int
;	O
t	double
<	O
nterms	int
;	O
t	double
++	O
)	O
{	O
if	O
(	O
rterm	array(int)
[	O
cr	int
]	O
==	O
term	*(int)
[	O
t	double
]	O
)	O
break	O
;	O
}	O
if	O
(	O
t	double
==	O
nterms	int
)	O
term	*(int)
[	O
nterms	int
++	O
]	O
=	O
rterm	array(int)
[	O
cr	int
]	O
;	O
}	O
}	O
for	O
(	O
cc	int
=	O
0	int
,	O
lcmnobs	double
=	O
1.0	int
;	O
cc	int
<	O
ncells	int
;	O
cc	int
++	O
)	O
{	O
if	O
(	O
nobs	array(double)
[	O
cc	int
]	O
!=	O
0.0	int
)	O
lcmnobs	double
=	O
lcm	(double,double)->(double)
(	O
lcmnobs	double
,	O
nobs	array(double)
[	O
cc	int
]	O
)	O
;	O
}	O
lcmnobs	double
/=	O
gettwo	(double)->(double)
(	O
lcmnobs	double
)	O
;	O
for	O
(	O
t	double
=	O
0	int
;	O
(	O
rterm	array(int)
&&	O
t	double
<	O
nterms	int
)	O
||	O
t	double
<	O
1	int
;	O
t	double
++	O
)	O
{	O
for	O
(	O
cr	int
=	O
row0	int
;	O
cr	int
!=	O
row1	int
+	O
updown	int
;	O
cr	int
+=	O
updown	int
)	O
{	O
if	O
(	O
rterm	array(int)
&&	O
rterm	array(int)
[	O
cr	int
]	O
!=	O
term	*(int)
[	O
t	double
]	O
)	O
continue	O
;	O
for	O
(	O
cc	int
=	O
0	int
;	O
cc	int
<	O
ncells	int
;	O
cc	int
++	O
)	O
{	O
if	O
(	O
fabs	(double)->(double)
(	O
coeff	*(*(double))
[	O
cr	int
]	O
[	O
cc	int
]	O
)	O
>	O
dap_orthtol	double
)	O
break	O
;	O
}	O
if	O
(	O
cc	int
<	O
ncells	int
)	O
break	O
;	O
}	O
for	O
(	O
;	O
cr	int
!=	O
row1	int
+	O
updown	int
;	O
cr	int
+=	O
updown	int
)	O
{	O
if	O
(	O
rterm	array(int)
&&	O
rterm	array(int)
[	O
cr	int
]	O
!=	O
term	*(int)
[	O
t	double
]	O
)	O
continue	O
;	O
for	O
(	O
lensq	double
=	O
0.0	int
,	O
cc	int
=	O
0	int
;	O
cc	int
<	O
ncells	int
;	O
cc	int
++	O
)	O
{	O
if	O
(	O
nobs	array(double)
[	O
cc	int
]	O
>	O
0.0	int
)	O
{	O
tmp	double
=	O
coeff	*(*(double))
[	O
cr	int
]	O
[	O
cc	int
]	O
;	O
lensq	double
+=	O
tmp	double
*	O
tmp	double
*	O
(	O
lcmnobs	double
/	O
nobs	array(double)
[	O
cc	int
]	O
)	O
;	O
}	O
}	O
if	O
(	O
lensq	double
>	O
dap_orthtol	double
)	O
{	O
indep	*(int)
[	O
cr	int
]	O
=	O
1	int
;	O
df	int
++	O
;	O
for	O
(	O
crr	int
=	O
cr	int
+	O
updown	int
;	O
crr	int
!=	O
row2	int
+	O
updown	int
;	O
crr	int
+=	O
updown	int
)	O
{	O
if	O
(	O
rterm	array(int)
&&	O
rterm	array(int)
[	O
crr	int
]	O
!=	O
term	*(int)
[	O
t	double
]	O
)	O
continue	O
;	O
for	O
(	O
dot	double
=	O
0.0	int
,	O
cc	int
=	O
0	int
;	O
cc	int
<	O
ncells	int
;	O
cc	int
++	O
)	O
{	O
if	O
(	O
nobs	array(double)
[	O
cc	int
]	O
>	O
0.0	int
)	O
dot	double
+=	O
coeff	*(*(double))
[	O
cr	int
]	O
[	O
cc	int
]	O
*	O
coeff	*(*(double))
[	O
crr	int
]	O
[	O
cc	int
]	O
*	O
(	O
lcmnobs	double
/	O
nobs	array(double)
[	O
cc	int
]	O
)	O
;	O
}	O
if	O
(	O
fabs	(double)->(double)
(	O
dot	double
)	O
>	O
dap_orthtol	double
*	O
lensq	double
)	O
{	O
mult1	double
=	O
dot	double
;	O
mult2	double
=	O
lensq	double
;	O
for	O
(	O
cc	int
=	O
0	int
,	O
rowmax	double
=	O
0.0	int
;	O
cc	int
<	O
ncells	int
;	O
cc	int
++	O
)	O
{	O
tmp	double
=	O
mult2	double
*	O
coeff	*(*(double))
[	O
crr	int
]	O
[	O
cc	int
]	O
;	O
tmp1	double
=	O
mult1	double
*	O
coeff	*(*(double))
[	O
cr	int
]	O
[	O
cc	int
]	O
;	O
coeff	*(*(double))
[	O
crr	int
]	O
[	O
cc	int
]	O
=	O
tmp	double
-	O
tmp1	double
;	O
if	O
(	O
fabs	(double)->(double)
(	O
coeff	*(*(double))
[	O
crr	int
]	O
[	O
cc	int
]	O
)	O
<	O
dap_orthtol	double
*	O
(	O
fabs	(double)->(double)
(	O
tmp	double
)	O
+	O
fabs	(double)->(double)
(	O
tmp1	double
)	O
)	O
)	O
coeff	*(*(double))
[	O
crr	int
]	O
[	O
cc	int
]	O
=	O
0.0	int
;	O
else	O
if	O
(	O
fabs	(double)->(double)
(	O
coeff	*(*(double))
[	O
crr	int
]	O
[	O
cc	int
]	O
)	O
>	O
rowmax	double
)	O
rowmax	double
=	O
fabs	(double)->(double)
(	O
coeff	*(*(double))
[	O
crr	int
]	O
[	O
cc	int
]	O
)	O
;	O
}	O
tmp	double
=	O
gettwo	(double)->(double)
(	O
rowmax	double
)	O
;	O
for	O
(	O
cc	int
=	O
0	int
;	O
cc	int
<	O
ncells	int
;	O
cc	int
++	O
)	O
{	O
coeff	*(*(double))
[	O
crr	int
]	O
[	O
cc	int
]	O
/=	O
tmp	double
;	O
if	O
(	O
fabs	(double)->(double)
(	O
coeff	*(*(double))
[	O
crr	int
]	O
[	O
cc	int
]	O
)	O
<	O
dap_orthtol	double
)	O
coeff	*(*(double))
[	O
crr	int
]	O
[	O
cc	int
]	O
=	O
0.0	int
;	O
}	O
}	O
}	O
}	O
else	O
{	O
for	O
(	O
cc	int
=	O
0	int
;	O
cc	int
<	O
ncells	int
;	O
cc	int
++	O
)	O
coeff	*(*(double))
[	O
cr	int
]	O
[	O
cc	int
]	O
=	O
0.0	int
;	O
}	O
}	O
while	O
(	O
cr	int
!=	O
row2	int
+	O
updown	int
)	O
{	O
if	O
(	O
!	O
rterm	array(int)
||	O
rterm	array(int)
[	O
cr	int
]	O
==	O
term	*(int)
[	O
t	double
]	O
)	O
{	O
for	O
(	O
lensq	double
=	O
0.0	int
,	O
cc	int
=	O
0	int
;	O
cc	int
<	O
ncells	int
;	O
cc	int
++	O
)	O
{	O
if	O
(	O
nobs	array(double)
[	O
cc	int
]	O
>	O
0.0	int
)	O
{	O
tmp	double
=	O
coeff	*(*(double))
[	O
cr	int
]	O
[	O
cc	int
]	O
;	O
lensq	double
+=	O
tmp	double
*	O
tmp	double
*	O
(	O
lcmnobs	double
/	O
nobs	array(double)
[	O
cc	int
]	O
)	O
;	O
}	O
}	O
if	O
(	O
lensq	double
>	O
dap_orthtol	double
)	O
{	O
indep	*(int)
[	O
cr	int
]	O
=	O
1	int
;	O
df	int
++	O
;	O
}	O
}	O
cr	int
+=	O
updown	int
;	O
}	O
}	O
dap_free	(*(void),*(char))->(void)
(	O
term	*(int)
,	O
""	*(char)
)	O
;	O
return	O
df	int
;	O
}	O
static	O
void	O
sumcheck	(array(char),*(*(double)),int,int,int,*(int))->(void)
(	O
char	O
caller	array(char)
[	O
]	O
,	O
double	O
*	O
*	O
coeff	*(*(double))
,	O
int	O
ncells	int
,	O
int	O
nerrors	int
,	O
int	O
ncontrasts	int
,	O
int	O
*	O
rterm	array(int)
)	O
{	O
int	O
r	double
,	O
c	int
;	O
double	O
elt	double
;	O
double	O
rowsum	double
;	O
double	O
rowmax	double
;	O
for	O
(	O
r	double
=	O
0	int
;	O
r	double
<	O
nerrors	int
+	O
ncontrasts	int
;	O
r	double
++	O
)	O
{	O
for	O
(	O
c	int
=	O
0	int
,	O
rowsum	double
=	O
0.0	int
,	O
rowmax	double
=	O
0.0	int
;	O
c	int
<	O
ncells	int
;	O
c	int
++	O
)	O
{	O
elt	double
=	O
coeff	*(*(double))
[	O
r	double
]	O
[	O
c	int
]	O
;	O
rowsum	double
+=	O
elt	double
;	O
elt	double
=	O
fabs	(double)->(double)
(	O
elt	double
)	O
;	O
if	O
(	O
elt	double
>	O
rowmax	double
)	O
rowmax	double
=	O
elt	double
;	O
}	O
if	O
(	O
fabs	(double)->(double)
(	O
rowsum	double
)	O
>	O
dap_zerotol	double
*	O
rowmax	double
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
dap_err	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"(sumcheck:%s) Unable to fit model:\n"	*(char)
,	O
caller	array(char)
)	O
;	O
if	O
(	O
r	double
<	O
nerrors	int
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
dap_err	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"Error %d sums to %g:\n"	*(char)
,	O
r	double
,	O
rowsum	double
)	O
;	O
else	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
dap_err	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"Contrast %d sums to %g:\n"	*(char)
,	O
r	double
-	O
nerrors	int
,	O
rowsum	double
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
dap_err	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s%d (%x) "	*(char)
,	O
(	O
(	O
r	double
<	O
nerrors	int
)	O
?	O
"E"	*(char)
:	O
"C"	*(char)
)	O
,	O
(	O
(	O
r	double
<	O
nerrors	int
)	O
?	O
r	double
:	O
r	double
-	O
nerrors	int
)	O
,	O
(	O
rterm	array(int)
?	O
rterm	array(int)
[	O
r	double
]	O
:	O
0	int
)	O
)	O
;	O
for	O
(	O
c	int
=	O
0	int
;	O
c	int
<	O
ncells	int
;	O
c	int
++	O
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
dap_err	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
" %g"	*(char)
,	O
coeff	*(*(double))
[	O
r	double
]	O
[	O
c	int
]	O
)	O
;	O
putc	(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
'\n'	O
,	O
dap_err	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
}	O
}	O
static	O
int	O
testparse	(*(char),*(char),*(int),int)->(int)
(	O
char	O
*	O
test	*(char)
,	O
char	O
*	O
termv	*(char)
,	O
int	O
*	O
varv	array(int)
,	O
int	O
nvars	int
)	O
{	O
int	O
nterms	int
;	O
int	O
tv	int
;	O
char	O
*	O
vname	array(char)
;	O
int	O
t	double
;	O
int	O
n	int
;	O
int	O
bit	int
;	O
int	O
term	*(int)
;	O
int	O
vv	int
;	O
int	O
v	int
;	O
int	O
firstv	int
;	O
term	*(int)
=	O
0	int
;	O
vname	array(char)
=	O
dap_malloc	(int,*(char))->(*(char))
(	O
dap_namelen	int
+	O
1	int
,	O
""	*(char)
)	O
;	O
if	O
(	O
!	O
test	*(char)
||	O
!	O
test	*(char)
[	O
0	int
]	O
)	O
return	O
0	int
;	O
for	O
(	O
nterms	int
=	O
1	int
,	O
tv	int
=	O
1	int
;	O
tv	int
<	O
nvars	int
;	O
tv	int
++	O
)	O
nterms	int
*=	O
2	int
;	O
nterms	int
--	O
;	O
for	O
(	O
tv	int
=	O
1	int
;	O
tv	int
<=	O
nterms	int
;	O
tv	int
++	O
)	O
termv	*(char)
[	O
tv	int
]	O
=	O
'e'	O
;	O
for	O
(	O
t	double
=	O
0	int
;	O
test	*(char)
[	O
t	double
]	O
==	O
' '	O
;	O
t	double
++	O
)	O
;	O
for	O
(	O
firstv	int
=	O
1	int
;	O
test	*(char)
[	O
t	double
]	O
;	O
)	O
{	O
if	O
(	O
firstv	int
)	O
term	*(int)
=	O
0	int
;	O
firstv	int
=	O
0	int
;	O
for	O
(	O
n	int
=	O
0	int
;	O
test	*(char)
[	O
t	double
]	O
&&	O
test	*(char)
[	O
t	double
]	O
!=	O
' '	O
&&	O
test	*(char)
[	O
t	double
]	O
!=	O
'*'	O
;	O
)	O
{	O
if	O
(	O
n	int
<	O
dap_namelen	int
)	O
vname	array(char)
[	O
n	int
++	O
]	O
=	O
test	*(char)
[	O
t	double
++	O
]	O
;	O
else	O
{	O
vname	array(char)
[	O
n	int
]	O
=	O
'\0'	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
dap_err	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"(testparse) name too long: %s\n"	*(char)
,	O
vname	array(char)
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
}	O
vname	array(char)
[	O
n	int
]	O
=	O
'\0'	O
;	O
if	O
(	O
(	O
v	int
=	O
dap_varnum	(array(char))->(int)
(	O
vname	array(char)
)	O
)	O
<	O
0	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
dap_err	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"(testparse) unknown variable: %s\n"	*(char)
,	O
vname	array(char)
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
for	O
(	O
bit	int
=	O
0x1	int
,	O
vv	int
=	O
1	int
;	O
vv	int
<	O
nvars	int
;	O
vv	int
++	O
,	O
bit	int
=	O
(	O
bit	int
<<	O
1	int
)	O
)	O
{	O
if	O
(	O
varv	array(int)
[	O
vv	int
]	O
==	O
v	int
)	O
break	O
;	O
}	O
if	O
(	O
vv	int
==	O
nvars	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
dap_err	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"(testparse) variable in test not in model: %s\n"	*(char)
,	O
vname	array(char)
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
term	*(int)
|=	O
bit	int
;	O
while	O
(	O
test	*(char)
[	O
t	double
]	O
==	O
' '	O
)	O
t	double
++	O
;	O
if	O
(	O
test	*(char)
[	O
t	double
]	O
==	O
'*'	O
)	O
{	O
for	O
(	O
t	double
++	O
;	O
test	*(char)
[	O
t	double
]	O
==	O
' '	O
;	O
t	double
++	O
)	O
;	O
}	O
else	O
{	O
termv	*(char)
[	O
term	*(int)
]	O
=	O
'c'	O
;	O
firstv	int
=	O
1	int
;	O
}	O
}	O
dap_free	(*(void),*(char))->(void)
(	O
vname	array(char)
,	O
""	*(char)
)	O
;	O
return	O
nterms	int
;	O
}	O
static	O
int	O
levn	(*(char),*(*(char)),*(int))->(int)
(	O
char	O
*	O
levstr	*(char)
,	O
char	O
*	O
*	O
levval	*(*(char))
,	O
int	O
*	O
nlevels	*(int)
)	O
{	O
int	O
l	int
;	O
for	O
(	O
l	int
=	O
0	int
;	O
l	int
<	O
*	O
nlevels	*(int)
&&	O
levval	*(*(char))
[	O
l	int
]	O
[	O
0	int
]	O
;	O
l	int
++	O
)	O
{	O
if	O
(	O
!	O
strcmp	(*(char),*(char))->(int)
(	O
levstr	*(char)
,	O
levval	*(*(char))
[	O
l	int
]	O
)	O
)	O
return	O
l	int
;	O
}	O
if	O
(	O
l	int
<	O
dap_maxlev	int
-	O
1	int
)	O
{	O
strcpy	(*(char),*(char))->(*(char))
(	O
levval	*(*(char))
[	O
l	int
]	O
,	O
levstr	*(char)
)	O
;	O
if	O
(	O
l	int
<	O
*	O
nlevels	*(int)
)	O
return	O
*	O
nlevels	*(int)
;	O
else	O
return	O
(	O
*	O
nlevels	*(int)
)	O
++	O
;	O
}	O
else	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
dap_err	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"(levn) too many levels: %s\n"	*(char)
,	O
levstr	*(char)
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
}	O
static	O
void	O
putrand	(int,double,array(int))->(void)
(	O
int	O
bits	int
,	O
double	O
coeff	*(*(double))
,	O
int	O
varv	array(int)
[	O
]	O
)	O
{	O
int	O
v	int
;	O
int	O
termn	int
;	O
if	O
(	O
coeff	*(*(double))
!=	O
0.0	int
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
dap_lst	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"\n    %g Var("	*(char)
,	O
coeff	*(*(double))
)	O
;	O
for	O
(	O
v	int
=	O
1	int
,	O
termn	int
=	O
1	int
;	O
bits	int
;	O
bits	int
=	O
(	O
bits	int
>>	O
1	int
)	O
,	O
v	int
++	O
)	O
{	O
if	O
(	O
bits	int
&	O
0x1	int
)	O
{	O
if	O
(	O
termn	int
>	O
1	int
)	O
putc	(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
'*'	O
,	O
dap_lst	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
fputs	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_nam	*(*(char))
[	O
varv	array(int)
[	O
v	int
]	O
]	O
,	O
dap_lst	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
termn	int
++	O
;	O
}	O
}	O
if	O
(	O
coeff	*(*(double))
!=	O
0.0	int
)	O
putc	(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
')'	O
,	O
dap_lst	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
}	O
static	O
int	O
ems	(*(*(double)),*(*(int)),int,*(int),*(int),int,*(double),*(int),*(char),int,*(*(double)))->(int)
(	O
double	O
*	O
*	O
coeff	*(*(double))
,	O
int	O
*	O
*	O
level	double
,	O
int	O
ncells	int
,	O
int	O
*	O
rterm	array(int)
,	O
int	O
*	O
indep	*(int)
,	O
int	O
nrows	int
,	O
double	O
*	O
nobs	array(double)
,	O
int	O
*	O
varv	array(int)
,	O
char	O
*	O
termv	*(char)
,	O
int	O
nterm	int
,	O
double	O
*	O
*	O
emscoeff	*(*(double))
)	O
{	O
int	O
r	double
;	O
int	O
t	double
;	O
int	O
u	int
;	O
int	O
c	int
;	O
double	O
*	O
cum	*(double)
;	O
double	O
df	int
;	O
int	O
*	O
effrow	*(int)
;	O
int	O
neffrows	int
;	O
int	O
*	O
factlev	*(int)
;	O
int	O
nfactlevs	int
;	O
int	O
bits	int
;	O
double	O
*	O
emsc	*(double)
;	O
double	O
*	O
lensq	double
;	O
int	O
basecell	int
;	O
int	O
nextcell	int
;	O
int	O
*	O
used	*(int)
;	O
int	O
s	int
;	O
int	O
same	int
;	O
double	O
tmp	double
;	O
int	O
factor	int
;	O
cum	*(double)
=	O
(	O
double	O
*	O
)	O
dap_malloc	(int,*(char))->(*(char))
(	O
sizeof	O
(	O
double	O
)	O
*	O
ncells	int
,	O
""	*(char)
)	O
;	O
emsc	*(double)
=	O
(	O
double	O
*	O
)	O
dap_malloc	(int,*(char))->(*(char))
(	O
sizeof	O
(	O
double	O
)	O
*	O
ncells	int
,	O
""	*(char)
)	O
;	O
lensq	double
=	O
(	O
double	O
*	O
)	O
dap_malloc	(int,*(char))->(*(char))
(	O
sizeof	O
(	O
double	O
)	O
*	O
ncells	int
,	O
""	*(char)
)	O
;	O
effrow	*(int)
=	O
(	O
int	O
*	O
)	O
dap_malloc	(int,*(char))->(*(char))
(	O
sizeof	O
(	O
int	O
)	O
*	O
ncells	int
,	O
""	*(char)
)	O
;	O
factlev	*(int)
=	O
(	O
int	O
*	O
)	O
dap_malloc	(int,*(char))->(*(char))
(	O
sizeof	O
(	O
int	O
)	O
*	O
ncells	int
,	O
""	*(char)
)	O
;	O
used	*(int)
=	O
(	O
int	O
*	O
)	O
dap_malloc	(int,*(char))->(*(char))
(	O
sizeof	O
(	O
int	O
)	O
*	O
ncells	int
,	O
""	*(char)
)	O
;	O
for	O
(	O
r	double
=	O
0	int
;	O
r	double
<	O
nrows	int
;	O
r	double
++	O
)	O
emsc	*(double)
[	O
r	double
]	O
=	O
0.0	int
;	O
emscoeff	*(*(double))
++	O
;	O
for	O
(	O
t	double
=	O
1	int
,	O
factor	int
=	O
0	int
;	O
t	double
<=	O
nterm	int
;	O
t	double
++	O
)	O
{	O
if	O
(	O
termv	*(char)
[	O
t	double
]	O
==	O
'c'	O
||	O
termv	*(char)
[	O
t	double
]	O
==	O
'n'	O
)	O
{	O
if	O
(	O
varv	array(int)
)	O
{	O
fputs	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
"EMS("	*(char)
,	O
dap_lst	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
putrand	(int,double,array(int))->(void)
(	O
t	double
,	O
0.0	int
,	O
varv	array(int)
)	O
;	O
fputs	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
") ="	*(char)
,	O
dap_lst	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
}	O
emscoeff	*(*(double))
[	O
factor	int
]	O
[	O
0	int
]	O
=	O
1.0	int
;	O
for	O
(	O
r	double
=	O
0	int
,	O
neffrows	int
=	O
0	int
;	O
r	double
<	O
nrows	int
;	O
r	double
++	O
)	O
{	O
if	O
(	O
indep	*(int)
[	O
r	double
]	O
&&	O
rterm	array(int)
[	O
r	double
]	O
==	O
t	double
)	O
effrow	*(int)
[	O
neffrows	int
++	O
]	O
=	O
r	double
;	O
}	O
for	O
(	O
u	int
=	O
1	int
;	O
u	int
<=	O
nterm	int
;	O
u	int
++	O
)	O
{	O
for	O
(	O
r	double
=	O
0	int
;	O
r	double
<	O
nrows	int
;	O
r	double
++	O
)	O
{	O
if	O
(	O
indep	*(int)
[	O
r	double
]	O
&&	O
rterm	array(int)
[	O
r	double
]	O
==	O
u	int
)	O
break	O
;	O
}	O
if	O
(	O
(	O
u	int
&	O
t	double
)	O
==	O
t	double
&&	O
r	double
<	O
nrows	int
)	O
{	O
for	O
(	O
bits	int
=	O
u	int
,	O
nfactlevs	int
=	O
0	int
,	O
r	double
=	O
1	int
;	O
bits	int
;	O
bits	int
=	O
(	O
bits	int
>>	O
1	int
)	O
,	O
r	double
++	O
)	O
{	O
if	O
(	O
bits	int
&	O
0x1	int
)	O
factlev	*(int)
[	O
nfactlevs	int
++	O
]	O
=	O
r	double
;	O
}	O
for	O
(	O
r	double
=	O
0	int
;	O
r	double
<	O
neffrows	int
;	O
r	double
++	O
)	O
{	O
if	O
(	O
indep	*(int)
[	O
r	double
]	O
)	O
{	O
lensq	double
[	O
r	double
]	O
=	O
0.0	int
;	O
emsc	*(double)
[	O
r	double
]	O
=	O
0.0	int
;	O
}	O
}	O
for	O
(	O
c	int
=	O
0	int
;	O
c	int
<	O
ncells	int
;	O
c	int
++	O
)	O
used	*(int)
[	O
c	int
]	O
=	O
0	int
;	O
for	O
(	O
basecell	int
=	O
0	int
,	O
nextcell	int
=	O
0	int
;	O
basecell	int
<	O
ncells	int
;	O
basecell	int
=	O
nextcell	int
)	O
{	O
for	O
(	O
r	double
=	O
0	int
;	O
r	double
<	O
neffrows	int
;	O
r	double
++	O
)	O
cum	*(double)
[	O
r	double
]	O
=	O
0.0	int
;	O
for	O
(	O
c	int
=	O
basecell	int
;	O
c	int
<	O
ncells	int
;	O
)	O
{	O
for	O
(	O
r	double
=	O
0	int
;	O
r	double
<	O
neffrows	int
;	O
r	double
++	O
)	O
{	O
if	O
(	O
indep	*(int)
[	O
r	double
]	O
)	O
{	O
tmp	double
=	O
coeff	*(*(double))
[	O
effrow	*(int)
[	O
r	double
]	O
]	O
[	O
c	int
]	O
;	O
cum	*(double)
[	O
r	double
]	O
+=	O
tmp	double
;	O
lensq	double
[	O
r	double
]	O
+=	O
tmp	double
*	O
tmp	double
/	O
nobs	array(double)
[	O
c	int
]	O
;	O
}	O
}	O
used	*(int)
[	O
c	int
]	O
=	O
1	int
;	O
for	O
(	O
c	int
++	O
;	O
c	int
<	O
ncells	int
;	O
c	int
++	O
)	O
{	O
for	O
(	O
s	int
=	O
0	int
,	O
same	int
=	O
1	int
;	O
s	int
<	O
nfactlevs	int
;	O
s	int
++	O
)	O
{	O
if	O
(	O
level	double
[	O
factlev	*(int)
[	O
s	int
]	O
]	O
[	O
basecell	int
]	O
!=	O
level	double
[	O
factlev	*(int)
[	O
s	int
]	O
]	O
[	O
c	int
]	O
)	O
{	O
if	O
(	O
nextcell	int
==	O
basecell	int
&&	O
!	O
used	*(int)
[	O
c	int
]	O
)	O
nextcell	int
=	O
c	int
;	O
same	int
=	O
0	int
;	O
break	O
;	O
}	O
}	O
if	O
(	O
same	int
)	O
break	O
;	O
}	O
}	O
for	O
(	O
r	double
=	O
0	int
;	O
r	double
<	O
neffrows	int
;	O
r	double
++	O
)	O
{	O
if	O
(	O
indep	*(int)
[	O
r	double
]	O
)	O
{	O
cum	*(double)
[	O
r	double
]	O
*=	O
cum	*(double)
[	O
r	double
]	O
;	O
emsc	*(double)
[	O
r	double
]	O
+=	O
cum	*(double)
[	O
r	double
]	O
;	O
}	O
}	O
if	O
(	O
nextcell	int
==	O
basecell	int
)	O
break	O
;	O
}	O
for	O
(	O
r	double
=	O
0	int
;	O
r	double
<	O
neffrows	int
;	O
r	double
++	O
)	O
{	O
if	O
(	O
indep	*(int)
[	O
r	double
]	O
)	O
emsc	*(double)
[	O
r	double
]	O
/=	O
lensq	double
[	O
r	double
]	O
;	O
}	O
for	O
(	O
r	double
=	O
0	int
,	O
emscoeff	*(*(double))
[	O
factor	int
]	O
[	O
u	int
]	O
=	O
0.0	int
,	O
df	int
=	O
0.0	int
;	O
r	double
<	O
neffrows	int
;	O
r	double
++	O
)	O
{	O
if	O
(	O
indep	*(int)
[	O
r	double
]	O
)	O
{	O
emscoeff	*(*(double))
[	O
factor	int
]	O
[	O
u	int
]	O
+=	O
emsc	*(double)
[	O
r	double
]	O
;	O
df	int
+=	O
1.0	int
;	O
}	O
}	O
if	O
(	O
df	int
>	O
0.0	int
)	O
{	O
emscoeff	*(*(double))
[	O
factor	int
]	O
[	O
u	int
]	O
/=	O
df	int
;	O
if	O
(	O
varv	array(int)
)	O
putrand	(int,double,array(int))->(void)
(	O
u	int
,	O
emscoeff	*(*(double))
[	O
factor	int
]	O
[	O
u	int
]	O
,	O
varv	array(int)
)	O
;	O
}	O
else	O
emscoeff	*(*(double))
[	O
factor	int
]	O
[	O
u	int
]	O
=	O
0.0	int
;	O
}	O
else	O
emscoeff	*(*(double))
[	O
factor	int
]	O
[	O
u	int
]	O
=	O
0.0	int
;	O
}	O
if	O
(	O
varv	array(int)
)	O
fputs	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
"\n    1 Var(Error)\n"	*(char)
,	O
dap_lst	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
factor	int
++	O
;	O
}	O
}	O
dap_free	(*(void),*(char))->(void)
(	O
cum	*(double)
,	O
""	*(char)
)	O
;	O
dap_free	(*(void),*(char))->(void)
(	O
effrow	*(int)
,	O
""	*(char)
)	O
;	O
dap_free	(*(void),*(char))->(void)
(	O
factlev	*(int)
,	O
""	*(char)
)	O
;	O
dap_free	(*(void),*(char))->(void)
(	O
emsc	*(double)
,	O
""	*(char)
)	O
;	O
dap_free	(*(void),*(char))->(void)
(	O
lensq	double
,	O
""	*(char)
)	O
;	O
dap_free	(*(void),*(char))->(void)
(	O
used	*(int)
,	O
""	*(char)
)	O
;	O
return	O
factor	int
;	O
}	O
static	O
void	O
putms	(int,double,*(int))->(void)
(	O
int	O
bits	int
,	O
double	O
coeff	*(*(double))
,	O
int	O
*	O
varv	array(int)
)	O
{	O
int	O
v	int
;	O
int	O
termn	int
;	O
if	O
(	O
coeff	*(*(double))
!=	O
0.0	int
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
dap_lst	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"\n    %g MS("	*(char)
,	O
coeff	*(*(double))
)	O
;	O
if	O
(	O
bits	int
)	O
{	O
for	O
(	O
v	int
=	O
1	int
,	O
termn	int
=	O
1	int
;	O
bits	int
;	O
bits	int
=	O
(	O
bits	int
>>	O
1	int
)	O
,	O
v	int
++	O
)	O
{	O
if	O
(	O
bits	int
&	O
0x1	int
)	O
{	O
if	O
(	O
termn	int
>	O
1	int
)	O
putc	(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
'*'	O
,	O
dap_lst	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
fputs	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_nam	*(*(char))
[	O
varv	array(int)
[	O
v	int
]	O
]	O
,	O
dap_lst	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
termn	int
++	O
;	O
}	O
}	O
}	O
else	O
if	O
(	O
coeff	*(*(double))
!=	O
0.0	int
)	O
fputs	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
"Error"	*(char)
,	O
dap_lst	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
if	O
(	O
coeff	*(*(double))
!=	O
0.0	int
)	O
putc	(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
')'	O
,	O
dap_lst	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
}	O
static	O
int	O
emssolve	(*(*(double)),int,int,*(int),*(int))->(int)
(	O
double	O
*	O
*	O
emscoeff	*(*(double))
,	O
int	O
nterms	int
,	O
int	O
nfactors	int
,	O
int	O
*	O
varv	array(int)
,	O
int	O
*	O
termv	*(char)
)	O
{	O
int	O
r	double
,	O
c	int
;	O
int	O
maxr	int
;	O
int	O
subr	int
;	O
int	O
subc	int
;	O
double	O
rowmax	double
;	O
double	O
colmax	double
;	O
double	O
maxmax	double
;	O
double	O
tmp	double
;	O
int	O
itmp	int
;	O
double	O
mult	double
;	O
emscoeff	*(*(double))
[	O
0	int
]	O
[	O
0	int
]	O
=	O
1.0	int
;	O
termv	*(char)
[	O
0	int
]	O
=	O
0	int
;	O
for	O
(	O
r	double
=	O
1	int
;	O
r	double
<=	O
nterms	int
;	O
r	double
++	O
)	O
{	O
emscoeff	*(*(double))
[	O
0	int
]	O
[	O
r	double
]	O
=	O
0.0	int
;	O
termv	*(char)
[	O
r	double
]	O
=	O
r	double
;	O
}	O
for	O
(	O
c	int
=	O
1	int
,	O
r	double
=	O
1	int
;	O
c	int
<=	O
nfactors	int
;	O
c	int
++	O
)	O
{	O
for	O
(	O
colmax	double
=	O
0.0	int
,	O
maxmax	double
=	O
0.0	int
,	O
maxr	int
=	O
r	double
,	O
subr	int
=	O
r	double
;	O
subr	int
<=	O
nterms	int
;	O
subr	int
++	O
)	O
{	O
for	O
(	O
subc	int
=	O
c	int
,	O
rowmax	double
=	O
0.0	int
;	O
subc	int
<=	O
nfactors	int
;	O
subc	int
++	O
)	O
{	O
if	O
(	O
(	O
tmp	double
=	O
fabs	(double)->(double)
(	O
emscoeff	*(*(double))
[	O
subc	int
]	O
[	O
subr	int
]	O
)	O
)	O
>	O
rowmax	double
)	O
rowmax	double
=	O
tmp	double
;	O
}	O
if	O
(	O
(	O
tmp	double
=	O
fabs	(double)->(double)
(	O
emscoeff	*(*(double))
[	O
c	int
]	O
[	O
subr	int
]	O
/	O
rowmax	double
)	O
)	O
>	O
colmax	double
)	O
{	O
maxmax	double
=	O
rowmax	double
;	O
colmax	double
=	O
tmp	double
;	O
maxr	int
=	O
subr	int
;	O
}	O
}	O
if	O
(	O
colmax	double
>	O
dap_redtol	double
*	O
maxmax	double
)	O
{	O
if	O
(	O
maxr	int
!=	O
r	double
)	O
{	O
for	O
(	O
subc	int
=	O
0	int
;	O
subc	int
<=	O
nfactors	int
+	O
1	int
;	O
subc	int
++	O
)	O
{	O
tmp	double
=	O
emscoeff	*(*(double))
[	O
subc	int
]	O
[	O
r	double
]	O
;	O
emscoeff	*(*(double))
[	O
subc	int
]	O
[	O
r	double
]	O
=	O
emscoeff	*(*(double))
[	O
subc	int
]	O
[	O
maxr	int
]	O
;	O
emscoeff	*(*(double))
[	O
subc	int
]	O
[	O
maxr	int
]	O
=	O
tmp	double
;	O
}	O
itmp	int
=	O
termv	*(char)
[	O
r	double
]	O
;	O
termv	*(char)
[	O
r	double
]	O
=	O
termv	*(char)
[	O
maxr	int
]	O
;	O
termv	*(char)
[	O
maxr	int
]	O
=	O
itmp	int
;	O
}	O
for	O
(	O
subr	int
=	O
0	int
;	O
subr	int
<=	O
nterms	int
;	O
subr	int
++	O
)	O
{	O
if	O
(	O
subr	int
==	O
r	double
)	O
{	O
mult	double
=	O
emscoeff	*(*(double))
[	O
c	int
]	O
[	O
subr	int
]	O
;	O
for	O
(	O
subc	int
=	O
c	int
;	O
subc	int
<=	O
nfactors	int
+	O
1	int
;	O
subc	int
++	O
)	O
emscoeff	*(*(double))
[	O
subc	int
]	O
[	O
subr	int
]	O
/=	O
mult	double
;	O
}	O
else	O
{	O
mult	double
=	O
emscoeff	*(*(double))
[	O
c	int
]	O
[	O
subr	int
]	O
/	O
emscoeff	*(*(double))
[	O
c	int
]	O
[	O
r	double
]	O
;	O
if	O
(	O
fabs	(double)->(double)
(	O
mult	double
)	O
>	O
dap_redtol	double
*	O
maxmax	double
)	O
{	O
for	O
(	O
subc	int
=	O
c	int
;	O
subc	int
<=	O
nfactors	int
+	O
1	int
;	O
subc	int
++	O
)	O
{	O
tmp	double
=	O
fabs	(double)->(double)
(	O
emscoeff	*(*(double))
[	O
subc	int
]	O
[	O
subr	int
]	O
)	O
;	O
emscoeff	*(*(double))
[	O
subc	int
]	O
[	O
subr	int
]	O
-=	O
mult	double
*	O
emscoeff	*(*(double))
[	O
subc	int
]	O
[	O
r	double
]	O
;	O
if	O
(	O
fabs	(double)->(double)
(	O
emscoeff	*(*(double))
[	O
subc	int
]	O
[	O
subr	int
]	O
)	O
<	O
dap_redtol	double
*	O
tmp	double
)	O
emscoeff	*(*(double))
[	O
subc	int
]	O
[	O
subr	int
]	O
=	O
0.0	int
;	O
}	O
}	O
}	O
}	O
r	double
++	O
;	O
}	O
}	O
return	O
r	double
;	O
}	O
static	O
void	O
ftest1	(*(*(double)),*(*(int)),int,*(int),int,int,*(double),*(double),*(double),*(int),*(char),int,*(char),int,int)->(void)
(	O
double	O
*	O
*	O
coeff	*(*(double))
,	O
int	O
*	O
*	O
level	double
,	O
int	O
ncells	int
,	O
int	O
*	O
rterm	array(int)
,	O
int	O
ncontrasts	int
,	O
int	O
nerrors	int
,	O
double	O
*	O
mean	*(double)
,	O
double	O
*	O
vari	*(double)
,	O
double	O
*	O
nobs	array(double)
,	O
int	O
*	O
varv	array(int)
,	O
char	O
*	O
numv	*(char)
,	O
int	O
nnum	int
,	O
char	O
*	O
denv	*(char)
,	O
int	O
nden	int
,	O
int	O
typen	int
)	O
{	O
int	O
corow	int
;	O
int	O
cc	int
;	O
int	O
cr	int
;	O
double	O
numer	double
;	O
double	O
sq	double
;	O
double	O
varnce	double
;	O
double	O
tmp	double
;	O
double	O
denom	double
;	O
double	O
modelss	double
;	O
double	O
n	int
;	O
int	O
cdfi	int
;	O
int	O
edfi	int
;	O
double	O
dedfi	double
;	O
int	O
*	O
indep	*(int)
;	O
double	O
sse	double
;	O
int	O
dfe	int
;	O
double	O
*	O
emsmem	*(double)
;	O
double	O
*	O
*	O
emscoeff	*(*(double))
;	O
int	O
nfactors	int
;	O
int	O
*	O
termv	*(char)
;	O
int	O
ndenterm	int
;	O
int	O
t	double
;	O
double	O
ss	double
,	O
ms	double
;	O
double	O
df	int
;	O
double	O
dfdown	double
,	O
dfup	double
;	O
double	O
fdown	double
,	O
fup	double
;	O
dedfi	double
=	O
0.0	int
;	O
emsmem	*(double)
=	O
NULL	O
;	O
emscoeff	*(*(double))
=	O
NULL	O
;	O
ndenterm	int
=	O
0	int
;	O
ss	double
=	O
0.0	int
;	O
df	int
=	O
0.0	int
;	O
sumcheck	(array(char),*(*(double)),int,int,int,*(int))->(void)
(	O
"ftest1"	*(char)
,	O
coeff	*(*(double))
,	O
ncells	int
,	O
nerrors	int
,	O
ncontrasts	int
,	O
rterm	array(int)
)	O
;	O
indep	*(int)
=	O
(	O
int	O
*	O
)	O
dap_malloc	(int,*(char))->(*(char))
(	O
sizeof	O
(	O
int	O
)	O
*	O
(	O
nerrors	int
+	O
ncontrasts	int
)	O
,	O
""	*(char)
)	O
;	O
if	O
(	O
nden	int
)	O
{	O
emsmem	*(double)
=	O
(	O
double	O
*	O
)	O
dap_malloc	(int,*(char))->(*(char))
(	O
sizeof	O
(	O
double	O
)	O
*	O
2	int
*	O
ncells	int
*	O
ncells	int
,	O
""	*(char)
)	O
;	O
emscoeff	*(*(double))
=	O
(	O
double	O
*	O
*	O
)	O
dap_malloc	(int,*(char))->(*(char))
(	O
sizeof	O
(	O
double	O
*	O
)	O
*	O
2	int
*	O
ncells	int
,	O
""	*(char)
)	O
;	O
for	O
(	O
cr	int
=	O
0	int
;	O
cr	int
<	O
2	int
*	O
ncells	int
;	O
cr	int
++	O
)	O
emscoeff	*(*(double))
[	O
cr	int
]	O
=	O
emsmem	*(double)
+	O
cr	int
*	O
ncells	int
;	O
}	O
termv	*(char)
=	O
(	O
int	O
*	O
)	O
dap_malloc	(int,*(char))->(*(char))
(	O
sizeof	O
(	O
int	O
)	O
*	O
ncells	int
,	O
""	*(char)
)	O
;	O
denom	double
=	O
0.0	int
;	O
for	O
(	O
cr	int
=	O
0	int
;	O
cr	int
<	O
nerrors	int
+	O
ncontrasts	int
;	O
cr	int
++	O
)	O
indep	*(int)
[	O
cr	int
]	O
=	O
0	int
;	O
nfactors	int
=	O
0	int
;	O
if	O
(	O
nerrors	int
)	O
{	O
if	O
(	O
nden	int
)	O
{	O
edfi	int
=	O
orthog	(*(*(double)),int,int,int,int,*(double),*(int),*(int))->(int)
(	O
coeff	*(*(double))
,	O
0	int
,	O
nerrors	int
-	O
1	int
,	O
nerrors	int
-	O
1	int
,	O
ncells	int
,	O
nobs	array(double)
,	O
indep	*(int)
,	O
rterm	array(int)
)	O
;	O
nfactors	int
=	O
ems	(*(*(double)),*(*(int)),int,*(int),*(int),int,*(double),*(int),*(char),int,*(*(double)))->(int)
(	O
coeff	*(*(double))
,	O
level	double
,	O
ncells	int
,	O
rterm	array(int)
,	O
indep	*(int)
,	O
nerrors	int
+	O
ncontrasts	int
,	O
nobs	array(double)
,	O
varv	array(int)
,	O
denv	*(char)
,	O
nden	int
,	O
emscoeff	*(*(double))
)	O
;	O
}	O
else	O
{	O
edfi	int
=	O
nerrors	int
;	O
for	O
(	O
cr	int
=	O
0	int
;	O
cr	int
<	O
nerrors	int
;	O
cr	int
++	O
)	O
{	O
for	O
(	O
cc	int
=	O
0	int
,	O
sq	double
=	O
0.0	int
,	O
varnce	double
=	O
0.0	int
;	O
cc	int
<	O
ncells	int
;	O
cc	int
++	O
)	O
{	O
tmp	double
=	O
coeff	*(*(double))
[	O
cr	int
]	O
[	O
cc	int
]	O
;	O
sq	double
+=	O
tmp	double
*	O
mean	*(double)
[	O
cc	int
]	O
;	O
varnce	double
+=	O
tmp	double
*	O
tmp	double
/	O
nobs	array(double)
[	O
cc	int
]	O
;	O
}	O
denom	double
+=	O
sq	double
*	O
sq	double
/	O
varnce	double
;	O
}	O
}	O
}	O
else	O
edfi	int
=	O
0	int
;	O
corow	int
=	O
nerrors	int
+	O
ncontrasts	int
-	O
1	int
;	O
for	O
(	O
cc	int
=	O
0	int
,	O
n	int
=	O
0.0	int
,	O
sse	double
=	O
0.0	int
;	O
cc	int
<	O
ncells	int
;	O
cc	int
++	O
)	O
{	O
if	O
(	O
nobs	array(double)
[	O
cc	int
]	O
>	O
0.0	int
)	O
{	O
sse	double
+=	O
(	O
nobs	array(double)
[	O
cc	int
]	O
-	O
1.0	int
)	O
*	O
vari	*(double)
[	O
cc	int
]	O
;	O
n	int
+=	O
nobs	array(double)
[	O
cc	int
]	O
;	O
}	O
}	O
dfe	int
=	O
(	O
(	O
int	O
)	O
n	int
)	O
-	O
ncells	int
;	O
if	O
(	O
nden	int
)	O
{	O
orthog	(*(*(double)),int,int,int,int,*(double),*(int),*(int))->(int)
(	O
coeff	*(*(double))
,	O
nerrors	int
,	O
nerrors	int
,	O
corow	int
,	O
ncells	int
,	O
nobs	array(double)
,	O
indep	*(int)
,	O
NULL	O
)	O
;	O
cdfi	int
=	O
orthog	(*(*(double)),int,int,int,int,*(double),*(int),*(int))->(int)
(	O
coeff	*(*(double))
,	O
nerrors	int
,	O
corow	int
,	O
corow	int
,	O
ncells	int
,	O
nobs	array(double)
,	O
indep	*(int)
,	O
rterm	array(int)
)	O
;	O
if	O
(	O
ems	(*(*(double)),*(*(int)),int,*(int),*(int),int,*(double),*(int),*(char),int,*(*(double)))->(int)
(	O
coeff	*(*(double))
,	O
level	double
,	O
ncells	int
,	O
rterm	array(int)
,	O
indep	*(int)
,	O
nerrors	int
+	O
ncontrasts	int
,	O
nobs	array(double)
,	O
varv	array(int)
,	O
numv	*(char)
,	O
nnum	int
,	O
emscoeff	*(*(double))
+	O
nfactors	int
)	O
!=	O
1	int
)	O
{	O
fputs	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
"(ftest1) Only one one term allowed in numerator of F-test with denominator\n"	*(char)
,	O
dap_lst	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
ndenterm	int
=	O
emssolve	(*(*(double)),int,int,*(int),*(int))->(int)
(	O
emscoeff	*(*(double))
,	O
nden	int
,	O
nfactors	int
,	O
varv	array(int)
,	O
termv	*(char)
)	O
;	O
fputs	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
"Error for "	*(char)
,	O
dap_lst	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
putms	(int,double,*(int))->(void)
(	O
rterm	array(int)
[	O
nerrors	int
]	O
,	O
0.0	int
,	O
varv	array(int)
)	O
;	O
fputs	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
" ="	*(char)
,	O
dap_lst	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
for	O
(	O
t	double
=	O
0	int
,	O
denom	double
=	O
0.0	int
,	O
dedfi	double
=	O
0.0	int
;	O
t	double
<	O
ndenterm	int
;	O
t	double
++	O
)	O
{	O
if	O
(	O
termv	*(char)
[	O
t	double
]	O
!=	O
rterm	array(int)
[	O
nerrors	int
]	O
&&	O
emscoeff	*(*(double))
[	O
nfactors	int
+	O
1	int
]	O
[	O
t	double
]	O
)	O
{	O
putms	(int,double,*(int))->(void)
(	O
termv	*(char)
[	O
t	double
]	O
,	O
emscoeff	*(*(double))
[	O
nfactors	int
+	O
1	int
]	O
[	O
t	double
]	O
,	O
varv	array(int)
)	O
;	O
if	O
(	O
termv	*(char)
[	O
t	double
]	O
)	O
{	O
for	O
(	O
cr	int
=	O
0	int
,	O
ss	double
=	O
0.0	int
,	O
df	int
=	O
0.0	int
;	O
cr	int
<	O
nerrors	int
+	O
ncontrasts	int
;	O
cr	int
++	O
)	O
{	O
if	O
(	O
rterm	array(int)
[	O
cr	int
]	O
==	O
termv	*(char)
[	O
t	double
]	O
&&	O
indep	*(int)
[	O
cr	int
]	O
)	O
{	O
for	O
(	O
cc	int
=	O
0	int
,	O
sq	double
=	O
0.0	int
,	O
varnce	double
=	O
0.0	int
;	O
cc	int
<	O
ncells	int
;	O
cc	int
++	O
)	O
{	O
tmp	double
=	O
coeff	*(*(double))
[	O
cr	int
]	O
[	O
cc	int
]	O
;	O
sq	double
+=	O
tmp	double
*	O
mean	*(double)
[	O
cc	int
]	O
;	O
varnce	double
+=	O
tmp	double
*	O
tmp	double
/	O
nobs	array(double)
[	O
cc	int
]	O
;	O
}	O
ss	double
+=	O
sq	double
*	O
sq	double
/	O
varnce	double
;	O
df	int
+=	O
1.0	int
;	O
}	O
}	O
}	O
else	O
{	O
ss	double
=	O
sse	double
;	O
df	int
=	O
(	O
double	O
)	O
dfe	int
;	O
}	O
if	O
(	O
ndenterm	int
>	O
1	int
)	O
{	O
ms	double
=	O
ss	double
/	O
df	int
;	O
tmp	double
=	O
emscoeff	*(*(double))
[	O
nfactors	int
+	O
1	int
]	O
[	O
t	double
]	O
*	O
ms	double
;	O
denom	double
+=	O
tmp	double
;	O
dedfi	double
+=	O
tmp	double
*	O
tmp	double
/	O
df	int
;	O
}	O
}	O
}	O
putc	(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
'\n'	O
,	O
dap_lst	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
if	O
(	O
ndenterm	int
>	O
1	int
)	O
dedfi	double
=	O
denom	double
*	O
denom	double
/	O
dedfi	double
;	O
else	O
{	O
denom	double
=	O
emscoeff	*(*(double))
[	O
nfactors	int
]	O
[	O
t	double
]	O
*	O
ss	double
;	O
edfi	int
=	O
(	O
int	O
)	O
df	int
;	O
}	O
}	O
else	O
{	O
denom	double
+=	O
sse	double
;	O
cdfi	int
=	O
orthog	(*(*(double)),int,int,int,int,*(double),*(int),*(int))->(int)
(	O
coeff	*(*(double))
,	O
0	int
,	O
corow	int
,	O
corow	int
,	O
ncells	int
,	O
nobs	array(double)
,	O
indep	*(int)
,	O
NULL	O
)	O
-	O
edfi	int
;	O
edfi	int
+=	O
dfe	int
;	O
}	O
for	O
(	O
cr	int
=	O
nerrors	int
,	O
numer	double
=	O
0.0	int
;	O
cr	int
<=	O
corow	int
;	O
cr	int
++	O
)	O
{	O
if	O
(	O
indep	*(int)
[	O
cr	int
]	O
)	O
{	O
for	O
(	O
cc	int
=	O
0	int
,	O
sq	double
=	O
0.0	int
,	O
varnce	double
=	O
0.0	int
;	O
cc	int
<	O
ncells	int
;	O
cc	int
++	O
)	O
{	O
tmp	double
=	O
coeff	*(*(double))
[	O
cr	int
]	O
[	O
cc	int
]	O
;	O
sq	double
+=	O
tmp	double
*	O
mean	*(double)
[	O
cc	int
]	O
;	O
varnce	double
+=	O
tmp	double
*	O
tmp	double
/	O
nobs	array(double)
[	O
cc	int
]	O
;	O
}	O
numer	double
+=	O
sq	double
*	O
sq	double
/	O
varnce	double
;	O
}	O
}	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
dap_lst	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"Number of observations = %d\n"	*(char)
,	O
(	O
int	O
)	O
n	int
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
dap_lst	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"H0 SS = %g, df = %d, MS = %g\n"	*(char)
,	O
numer	double
,	O
cdfi	int
,	O
numer	double
/	O
(	O
(	O
double	O
)	O
cdfi	int
)	O
)	O
;	O
modelss	double
=	O
numer	double
;	O
numer	double
/=	O
(	O
double	O
)	O
cdfi	int
;	O
if	O
(	O
nerrors	int
)	O
fputs	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
"Residual "	*(char)
,	O
dap_lst	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
else	O
fputs	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
"Error "	*(char)
,	O
dap_lst	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
if	O
(	O
nden	int
&&	O
ndenterm	int
>	O
1	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
dap_lst	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"df = %g, MS = %g\n"	*(char)
,	O
dedfi	double
,	O
denom	double
)	O
;	O
numer	double
/=	O
denom	double
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
dap_lst	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"F0 = %g\n"	*(char)
,	O
numer	double
)	O
;	O
dfdown	double
=	O
floor	(double)->(double)
(	O
dedfi	double
)	O
;	O
dfup	double
=	O
ceil	(double)->(double)
(	O
dedfi	double
)	O
;	O
if	O
(	O
dfup	double
==	O
dfdown	double
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
dap_lst	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"Prob[F > F0] = %.5f\n"	*(char)
,	O
0.00001	int
*	O
(	O
ceil	(double)->(double)
(	O
100000.0	int
*	O
probf	(double,int,int)->(double)
(	O
numer	double
,	O
cdfi	int
,	O
(	O
int	O
)	O
dedfi	double
)	O
)	O
)	O
)	O
;	O
else	O
{	O
fdown	double
=	O
probf	(double,int,int)->(double)
(	O
numer	double
,	O
cdfi	int
,	O
(	O
int	O
)	O
dfdown	double
)	O
;	O
fup	double
=	O
probf	(double,int,int)->(double)
(	O
numer	double
,	O
cdfi	int
,	O
(	O
int	O
)	O
dfup	double
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
dap_lst	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"Prob[F > F0] = %.5f\n"	*(char)
,	O
0.00001	int
*	O
(	O
ceil	(double)->(double)
(	O
100000.0	int
*	O
(	O
fdown	double
+	O
(	O
dedfi	double
-	O
dfdown	double
)	O
/	O
(	O
dfup	double
-	O
dfdown	double
)	O
*	O
(	O
fup	double
-	O
fdown	double
)	O
)	O
)	O
)	O
)	O
;	O
}	O
}	O
else	O
{	O
dedfi	double
=	O
(	O
double	O
)	O
edfi	int
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
dap_lst	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"SS = %g, df = %d, MS = %g\n"	*(char)
,	O
denom	double
,	O
edfi	int
,	O
denom	double
/	O
dedfi	double
)	O
;	O
if	O
(	O
ncontrasts	int
+	O
nerrors	int
==	O
ncells	int
-	O
1	int
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
dap_lst	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"R-sq = %g\n"	*(char)
,	O
modelss	double
/	O
(	O
modelss	double
+	O
denom	double
)	O
)	O
;	O
denom	double
/=	O
dedfi	double
;	O
numer	double
/=	O
denom	double
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
dap_lst	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"F0 = %g\nProb[F > F0] = %.5f\n"	*(char)
,	O
numer	double
,	O
0.00001	int
*	O
(	O
ceil	(double)->(double)
(	O
100000.0	int
*	O
probf	(double,int,int)->(double)
(	O
numer	double
,	O
cdfi	int
,	O
edfi	int
)	O
)	O
)	O
)	O
;	O
}	O
strcpy	(*(char),*(char))->(*(char))
(	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_str	*(*(char))
[	O
typen	int
]	O
,	O
"MSERROR"	*(char)
)	O
;	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_dbl	*(double)
[	O
varv	array(int)
[	O
0	int
]	O
]	O
=	O
denom	double
;	O
output	()->(void)
(	O
)	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_str	*(*(char))
[	O
typen	int
]	O
,	O
"ERRORDF"	*(char)
)	O
;	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_dbl	*(double)
[	O
varv	array(int)
[	O
0	int
]	O
]	O
=	O
dedfi	double
;	O
output	()->(void)
(	O
)	O
;	O
if	O
(	O
nden	int
)	O
{	O
dap_free	(*(void),*(char))->(void)
(	O
emsmem	*(double)
,	O
""	*(char)
)	O
;	O
dap_free	(*(void),*(char))->(void)
(	O
emscoeff	*(*(double))
,	O
""	*(char)
)	O
;	O
}	O
dap_free	(*(void),*(char))->(void)
(	O
indep	*(int)
,	O
""	*(char)
)	O
;	O
dap_free	(*(void),*(char))->(void)
(	O
termv	*(char)
,	O
""	*(char)
)	O
;	O
}	O
static	O
void	O
puttest	(*(char),int,*(int),int)->(void)
(	O
char	O
*	O
testv	*(char)
,	O
int	O
ntest	int
,	O
int	O
*	O
varv	array(int)
,	O
int	O
nvars	int
)	O
{	O
int	O
t	double
;	O
int	O
v	int
;	O
int	O
bits	int
;	O
int	O
first	int
;	O
for	O
(	O
t	double
=	O
1	int
;	O
t	double
<=	O
ntest	int
;	O
t	double
++	O
)	O
{	O
if	O
(	O
testv	*(char)
[	O
t	double
]	O
==	O
'c'	O
||	O
testv	*(char)
[	O
t	double
]	O
==	O
'n'	O
)	O
{	O
for	O
(	O
bits	int
=	O
t	double
,	O
v	int
=	O
1	int
,	O
first	int
=	O
1	int
;	O
v	int
<	O
nvars	int
;	O
bits	int
=	O
(	O
bits	int
>>	O
1	int
)	O
,	O
v	int
++	O
)	O
{	O
if	O
(	O
bits	int
&	O
0x1	int
)	O
{	O
if	O
(	O
first	int
)	O
{	O
putc	(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
' '	O
,	O
dap_lst	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
first	int
=	O
0	int
;	O
}	O
else	O
putc	(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
'*'	O
,	O
dap_lst	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
dap_lst	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s"	*(char)
,	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_nam	*(*(char))
[	O
varv	array(int)
[	O
v	int
]	O
]	O
)	O
;	O
}	O
}	O
}	O
}	O
putc	(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
'\n'	O
,	O
dap_lst	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
}	O
void	O
ftest	(*(char),*(char),*(char),*(char),*(char))->(void)
(	O
char	O
*	O
fname	array(char)
,	O
char	O
*	O
variables	*(char)
,	O
char	O
*	O
numerator	*(char)
,	O
char	O
*	O
denominator	*(char)
,	O
char	O
*	O
marks	array(char)
)	O
{	O
char	O
*	O
tstname	*(char)
;	O
int	O
typen	int
;	O
int	O
termn	int
;	O
int	O
*	O
varv	array(int)
;	O
int	O
nvars	int
;	O
int	O
*	O
markv	array(int)
;	O
int	O
nmark	int
;	O
int	O
*	O
rterm	array(int)
;	O
int	O
nnum	int
;	O
int	O
nden	int
;	O
char	O
*	O
numv	*(char)
;	O
char	O
*	O
denv	*(char)
;	O
int	O
num	int
;	O
int	O
den	int
;	O
int	O
t	double
;	O
int	O
morecells	int
;	O
int	O
more	int
;	O
int	O
statn	int
;	O
int	O
gotm	int
,	O
gotn	int
,	O
gotv	int
;	O
char	O
*	O
levmem	*(char)
;	O
char	O
*	O
*	O
levptr	*(*(char))
;	O
char	O
*	O
*	O
*	O
levval	*(*(char))
;	O
int	O
*	O
nlevels	*(int)
;	O
int	O
*	O
levelmem	*(int)
;	O
int	O
*	O
*	O
level	double
;	O
int	O
v	int
;	O
int	O
l	int
;	O
double	O
*	O
comem	*(double)
;	O
double	O
*	O
*	O
coeff	*(*(double))
;	O
double	O
*	O
mean	*(double)
;	O
double	O
*	O
nobs	array(double)
;	O
double	O
*	O
vari	*(double)
;	O
int	O
ncells	int
;	O
int	O
ncontrasts	int
;	O
int	O
nerrors	int
;	O
int	O
err	int
;	O
int	O
con	int
;	O
varv	array(int)
=	O
(	O
int	O
*	O
)	O
dap_malloc	(int,*(char))->(*(char))
(	O
sizeof	O
(	O
int	O
)	O
*	O
(	O
dap_maxtreat	int
+	O
1	int
)	O
,	O
""	*(char)
)	O
;	O
markv	array(int)
=	O
(	O
int	O
*	O
)	O
dap_malloc	(int,*(char))->(*(char))
(	O
sizeof	O
(	O
int	O
)	O
*	O
dap_maxvar	int
,	O
""	*(char)
)	O
;	O
rterm	array(int)
=	O
(	O
int	O
*	O
)	O
dap_malloc	(int,*(char))->(*(char))
(	O
sizeof	O
(	O
int	O
)	O
*	O
(	O
dap_maxcell	int
-	O
1	int
)	O
,	O
""	*(char)
)	O
;	O
numv	*(char)
=	O
dap_malloc	(int,*(char))->(*(char))
(	O
dap_maxcell	int
,	O
""	*(char)
)	O
;	O
denv	*(char)
=	O
dap_malloc	(int,*(char))->(*(char))
(	O
dap_maxcell	int
,	O
""	*(char)
)	O
;	O
levmem	*(char)
=	O
dap_malloc	(int,*(char))->(*(char))
(	O
(	O
dap_maxtreat	int
+	O
1	int
)	O
*	O
dap_maxlev	int
*	O
(	O
dap_strlen	int
+	O
1	int
)	O
,	O
""	*(char)
)	O
;	O
levptr	*(*(char))
=	O
(	O
char	O
*	O
*	O
)	O
dap_malloc	(int,*(char))->(*(char))
(	O
sizeof	O
(	O
char	O
*	O
)	O
*	O
(	O
dap_maxtreat	int
+	O
1	int
)	O
*	O
dap_maxlev	int
,	O
""	*(char)
)	O
;	O
levval	*(*(char))
=	O
(	O
char	O
*	O
*	O
*	O
)	O
dap_malloc	(int,*(char))->(*(char))
(	O
sizeof	O
(	O
char	O
*	O
*	O
)	O
*	O
(	O
dap_maxtreat	int
+	O
1	int
)	O
,	O
""	*(char)
)	O
;	O
for	O
(	O
v	int
=	O
0	int
;	O
v	int
<	O
dap_maxtreat	int
+	O
1	int
;	O
v	int
++	O
)	O
{	O
levval	*(*(char))
[	O
v	int
]	O
=	O
levptr	*(*(char))
+	O
v	int
*	O
dap_maxlev	int
;	O
for	O
(	O
l	int
=	O
0	int
;	O
l	int
<	O
dap_maxlev	int
;	O
l	int
++	O
)	O
levval	*(*(char))
[	O
v	int
]	O
[	O
l	int
]	O
=	O
levmem	*(char)
+	O
v	int
*	O
dap_maxlev	int
*	O
(	O
dap_strlen	int
+	O
1	int
)	O
+	O
l	int
*	O
(	O
dap_strlen	int
+	O
1	int
)	O
;	O
}	O
nlevels	*(int)
=	O
(	O
int	O
*	O
)	O
dap_malloc	(int,*(char))->(*(char))
(	O
sizeof	O
(	O
int	O
)	O
*	O
(	O
dap_maxtreat	int
+	O
1	int
)	O
,	O
""	*(char)
)	O
;	O
levelmem	*(int)
=	O
(	O
int	O
*	O
)	O
dap_malloc	(int,*(char))->(*(char))
(	O
sizeof	O
(	O
int	O
)	O
*	O
(	O
dap_maxtreat	int
+	O
1	int
)	O
*	O
dap_maxcell	int
,	O
""	*(char)
)	O
;	O
level	double
=	O
(	O
int	O
*	O
*	O
)	O
dap_malloc	(int,*(char))->(*(char))
(	O
sizeof	O
(	O
int	O
*	O
)	O
*	O
(	O
dap_maxtreat	int
+	O
1	int
)	O
,	O
""	*(char)
)	O
;	O
for	O
(	O
v	int
=	O
0	int
;	O
v	int
<	O
dap_maxtreat	int
+	O
1	int
;	O
v	int
++	O
)	O
level	double
[	O
v	int
]	O
=	O
levelmem	*(int)
+	O
v	int
*	O
dap_maxcell	int
;	O
comem	*(double)
=	O
(	O
double	O
*	O
)	O
dap_malloc	(int,*(char))->(*(char))
(	O
sizeof	O
(	O
double	O
)	O
*	O
dap_maxcell	int
*	O
dap_maxcell	int
,	O
"dap_maxcell"	*(char)
)	O
;	O
coeff	*(*(double))
=	O
(	O
double	O
*	O
*	O
)	O
dap_malloc	(int,*(char))->(*(char))
(	O
sizeof	O
(	O
double	O
*	O
)	O
*	O
dap_maxcell	int
,	O
"dap_maxcell"	*(char)
)	O
;	O
for	O
(	O
ncells	int
=	O
0	int
;	O
ncells	int
<	O
dap_maxcell	int
;	O
ncells	int
++	O
)	O
coeff	*(*(double))
[	O
ncells	int
]	O
=	O
comem	*(double)
+	O
ncells	int
*	O
dap_maxcell	int
;	O
mean	*(double)
=	O
(	O
double	O
*	O
)	O
dap_malloc	(int,*(char))->(*(char))
(	O
sizeof	O
(	O
double	O
)	O
*	O
dap_maxcell	int
,	O
"dap_maxcell"	*(char)
)	O
;	O
nobs	array(double)
=	O
(	O
double	O
*	O
)	O
dap_malloc	(int,*(char))->(*(char))
(	O
sizeof	O
(	O
double	O
)	O
*	O
dap_maxcell	int
,	O
"dap_maxcell"	*(char)
)	O
;	O
vari	*(double)
=	O
(	O
double	O
*	O
)	O
dap_malloc	(int,*(char))->(*(char))
(	O
sizeof	O
(	O
double	O
)	O
*	O
dap_maxcell	int
,	O
"dap_maxcell"	*(char)
)	O
;	O
if	O
(	O
!	O
fname	array(char)
)	O
{	O
fputs	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
"(ftest) No dataset name given.\n"	*(char)
,	O
dap_err	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
tstname	*(char)
=	O
dap_malloc	(int,*(char))->(*(char))
(	O
strlen	(*(char))->(long)
(	O
fname	array(char)
)	O
+	O
5	int
,	O
""	*(char)
)	O
;	O
dap_suffix	(array(char),array(char),array(char))->(void)
(	O
tstname	*(char)
,	O
fname	array(char)
,	O
"<tst"	*(char)
)	O
;	O
inset	(array(char))->(void)
(	O
fname	array(char)
)	O
;	O
if	O
(	O
(	O
typen	int
=	O
dap_varnum	(array(char))->(int)
(	O
"_type_"	*(char)
)	O
)	O
<	O
0	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
dap_err	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"(ftest) no _type_ variable\n"	*(char)
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
if	O
(	O
(	O
termn	int
=	O
dap_varnum	(array(char))->(int)
(	O
"_term_"	*(char)
)	O
)	O
<	O
0	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
dap_err	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"(ftest) no _term_ variable\n"	*(char)
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
if	O
(	O
!	O
variables	*(char)
||	O
!	O
variables	*(char)
[	O
0	int
]	O
)	O
{	O
fputs	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
"(ftest) No variables given.\n"	*(char)
,	O
dap_err	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
nvars	int
=	O
dap_list	(array(char),array(int),int)->(int)
(	O
variables	*(char)
,	O
varv	array(int)
,	O
dap_maxtreat	int
+	O
1	int
)	O
;	O
if	O
(	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_len	*(int)
[	O
varv	array(int)
[	O
0	int
]	O
]	O
!=	O
DBL	O
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
dap_err	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"(ftest) response variable %s must be of type double\n"	*(char)
,	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_nam	*(*(char))
[	O
varv	array(int)
[	O
0	int
]	O
]	O
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
for	O
(	O
v	int
=	O
1	int
;	O
v	int
<	O
nvars	int
;	O
v	int
++	O
)	O
{	O
if	O
(	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_len	*(int)
[	O
varv	array(int)
[	O
v	int
]	O
]	O
<=	O
0	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
dap_err	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"(ftest) classification variable %s must be string\n"	*(char)
,	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_nam	*(*(char))
[	O
varv	array(int)
[	O
v	int
]	O
]	O
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
}	O
outset	(array(char),array(char))->(void)
(	O
tstname	*(char)
,	O
""	*(char)
)	O
;	O
if	O
(	O
numerator	*(char)
&&	O
numerator	*(char)
[	O
0	int
]	O
)	O
{	O
nnum	int
=	O
testparse	(*(char),*(char),*(int),int)->(int)
(	O
numerator	*(char)
,	O
numv	*(char)
,	O
varv	array(int)
,	O
nvars	int
)	O
;	O
num	int
=	O
1	int
;	O
}	O
else	O
{	O
num	int
=	O
0	int
;	O
nnum	int
=	O
0	int
;	O
for	O
(	O
t	double
=	O
1	int
;	O
t	double
<	O
dap_maxcell	int
;	O
t	double
++	O
)	O
numv	*(char)
[	O
t	double
]	O
=	O
'e'	O
;	O
}	O
if	O
(	O
denominator	*(char)
&&	O
denominator	*(char)
[	O
0	int
]	O
)	O
{	O
nden	int
=	O
testparse	(*(char),*(char),*(int),int)->(int)
(	O
denominator	*(char)
,	O
denv	*(char)
,	O
varv	array(int)
,	O
nvars	int
)	O
;	O
for	O
(	O
t	double
=	O
1	int
;	O
t	double
<=	O
nnum	int
;	O
t	double
++	O
)	O
{	O
if	O
(	O
numv	*(char)
[	O
t	double
]	O
==	O
'c'	O
)	O
denv	*(char)
[	O
t	double
]	O
=	O
'e'	O
;	O
}	O
for	O
(	O
t	double
=	O
1	int
;	O
t	double
<=	O
nden	int
;	O
t	double
++	O
)	O
{	O
if	O
(	O
denv	*(char)
[	O
t	double
]	O
!=	O
'e'	O
)	O
{	O
den	int
=	O
1	int
;	O
break	O
;	O
}	O
}	O
if	O
(	O
t	double
>	O
nden	int
)	O
{	O
den	int
=	O
0	int
;	O
nden	int
=	O
0	int
;	O
while	O
(	O
t	double
<	O
dap_maxcell	int
)	O
denv	*(char)
[	O
t	double
++	O
]	O
=	O
'e'	O
;	O
}	O
}	O
else	O
{	O
den	int
=	O
0	int
;	O
nden	int
=	O
0	int
;	O
for	O
(	O
t	double
=	O
1	int
;	O
t	double
<	O
dap_maxcell	int
;	O
t	double
++	O
)	O
denv	*(char)
[	O
t	double
]	O
=	O
'e'	O
;	O
}	O
for	O
(	O
v	int
=	O
1	int
;	O
v	int
<	O
nvars	int
;	O
v	int
++	O
)	O
{	O
nlevels	*(int)
[	O
v	int
]	O
=	O
0	int
;	O
for	O
(	O
l	int
=	O
0	int
;	O
l	int
<	O
dap_maxlev	int
;	O
l	int
++	O
)	O
levval	*(*(char))
[	O
v	int
]	O
[	O
l	int
]	O
[	O
0	int
]	O
=	O
'\0'	O
;	O
}	O
nmark	int
=	O
dap_list	(array(char),array(int),int)->(int)
(	O
marks	array(char)
,	O
markv	array(int)
,	O
dap_maxvar	int
)	O
;	O
for	O
(	O
ncells	int
=	O
0	int
,	O
ncontrasts	int
=	O
0	int
,	O
nerrors	int
=	O
0	int
,	O
more	int
=	O
step	()->(int)
(	O
)	O
,	O
morecells	int
=	O
1	int
;	O
morecells	int
;	O
ncells	int
++	O
)	O
{	O
gotn	int
=	O
0	int
;	O
gotm	int
=	O
0	int
;	O
gotv	int
=	O
0	int
;	O
morecells	int
=	O
more	int
;	O
if	O
(	O
dap_newpart	(array(int),int)->(int)
(	O
markv	array(int)
,	O
nmark	int
)	O
)	O
{	O
dap_swap	()->(void)
(	O
)	O
;	O
dap_head	(array(int),int)->(void)
(	O
markv	array(int)
,	O
nmark	int
)	O
;	O
if	O
(	O
num	int
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
dap_lst	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"Testing Ho: %s\n"	*(char)
,	O
numerator	*(char)
)	O
;	O
else	O
if	O
(	O
nnum	int
>	O
0	int
)	O
{	O
fputs	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
"Testing Ho:"	*(char)
,	O
dap_lst	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
puttest	(*(char),int,*(int),int)->(void)
(	O
numv	*(char)
,	O
nnum	int
,	O
varv	array(int)
,	O
nvars	int
)	O
;	O
}	O
if	O
(	O
den	int
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
dap_lst	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"Denominator: %s\n"	*(char)
,	O
denominator	*(char)
)	O
;	O
else	O
if	O
(	O
nden	int
>	O
0	int
)	O
{	O
fputs	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
"Denominator:"	*(char)
,	O
dap_lst	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
puttest	(*(char),int,*(int),int)->(void)
(	O
denv	*(char)
,	O
nden	int
,	O
varv	array(int)
,	O
nvars	int
)	O
;	O
}	O
ftest1	(*(*(double)),*(*(int)),int,*(int),int,int,*(double),*(double),*(double),*(int),*(char),int,*(char),int,int)->(void)
(	O
coeff	*(*(double))
,	O
level	double
,	O
ncells	int
,	O
rterm	array(int)
,	O
ncontrasts	int
,	O
nerrors	int
,	O
mean	*(double)
,	O
vari	*(double)
,	O
nobs	array(double)
,	O
varv	array(int)
,	O
numv	*(char)
,	O
num	int
*	O
nnum	int
,	O
denv	*(char)
,	O
den	int
*	O
nden	int
,	O
typen	int
)	O
;	O
dap_swap	()->(void)
(	O
)	O
;	O
for	O
(	O
v	int
=	O
1	int
;	O
v	int
<	O
nvars	int
;	O
v	int
++	O
)	O
{	O
nlevels	*(int)
[	O
v	int
]	O
=	O
0	int
;	O
for	O
(	O
l	int
=	O
0	int
;	O
l	int
<	O
dap_maxlev	int
;	O
l	int
++	O
)	O
levval	*(*(char))
[	O
v	int
]	O
[	O
l	int
]	O
[	O
0	int
]	O
=	O
'\0'	O
;	O
}	O
ncells	int
=	O
0	int
;	O
ncontrasts	int
=	O
0	int
;	O
nerrors	int
=	O
0	int
;	O
}	O
for	O
(	O
statn	int
=	O
0	int
;	O
more	int
;	O
)	O
{	O
if	O
(	O
!	O
strcmp	(*(char),*(char))->(int)
(	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_str	*(*(char))
[	O
typen	int
]	O
,	O
"N"	*(char)
)	O
)	O
{	O
nobs	array(double)
[	O
ncells	int
]	O
=	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_dbl	*(double)
[	O
varv	array(int)
[	O
0	int
]	O
]	O
;	O
gotn	int
=	O
1	int
;	O
output	()->(void)
(	O
)	O
;	O
}	O
else	O
if	O
(	O
!	O
strcmp	(*(char),*(char))->(int)
(	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_str	*(*(char))
[	O
typen	int
]	O
,	O
"MEAN"	*(char)
)	O
)	O
{	O
mean	*(double)
[	O
ncells	int
]	O
=	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_dbl	*(double)
[	O
varv	array(int)
[	O
0	int
]	O
]	O
;	O
gotm	int
=	O
1	int
;	O
output	()->(void)
(	O
)	O
;	O
}	O
else	O
if	O
(	O
!	O
strcmp	(*(char),*(char))->(int)
(	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_str	*(*(char))
[	O
typen	int
]	O
,	O
"VAR"	*(char)
)	O
)	O
{	O
vari	*(double)
[	O
ncells	int
]	O
=	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_dbl	*(double)
[	O
varv	array(int)
[	O
0	int
]	O
]	O
;	O
gotv	int
=	O
1	int
;	O
output	()->(void)
(	O
)	O
;	O
}	O
else	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
dap_err	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"(ftest) Bad cell statistic: %s\n"	*(char)
,	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_str	*(*(char))
[	O
typen	int
]	O
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
if	O
(	O
++	O
statn	int
<	O
3	int
)	O
more	int
=	O
step	()->(int)
(	O
)	O
;	O
else	O
{	O
if	O
(	O
nobs	array(double)
[	O
ncells	int
]	O
==	O
1.0	int
)	O
vari	*(double)
[	O
ncells	int
]	O
=	O
0.0	int
;	O
break	O
;	O
}	O
}	O
if	O
(	O
more	int
)	O
{	O
if	O
(	O
!	O
gotm	int
)	O
{	O
fputs	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
"(ftest) Missing MEAN.\n"	*(char)
,	O
dap_err	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
if	O
(	O
!	O
gotn	int
)	O
{	O
fputs	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
"(ftest) Missing N.\n"	*(char)
,	O
dap_err	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
if	O
(	O
!	O
gotv	int
)	O
{	O
fputs	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
"(ftest) Missing VAR.\n"	*(char)
,	O
dap_err	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
for	O
(	O
v	int
=	O
1	int
;	O
v	int
<	O
nvars	int
;	O
v	int
++	O
)	O
level	double
[	O
v	int
]	O
[	O
ncells	int
]	O
=	O
levn	(*(char),*(*(char)),*(int))->(int)
(	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_str	*(*(char))
[	O
varv	array(int)
[	O
v	int
]	O
]	O
,	O
levval	*(*(char))
[	O
v	int
]	O
,	O
&	O
nlevels	*(int)
[	O
v	int
]	O
)	O
;	O
}	O
for	O
(	O
dap_mark	()->(void)
(	O
)	O
,	O
nerrors	int
=	O
0	int
;	O
more	int
;	O
)	O
{	O
more	int
=	O
step	()->(int)
(	O
)	O
;	O
err	int
=	O
!	O
strcmp	(*(char),*(char))->(int)
(	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_str	*(*(char))
[	O
typen	int
]	O
,	O
"ERROR"	*(char)
)	O
;	O
con	int
=	O
!	O
strcmp	(*(char),*(char))->(int)
(	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_str	*(*(char))
[	O
typen	int
]	O
,	O
"CONTR"	*(char)
)	O
;	O
if	O
(	O
den	int
&&	O
err	int
)	O
dap_mark	()->(void)
(	O
)	O
;	O
if	O
(	O
err	int
||	O
(	O
den	int
&&	O
con	int
)	O
)	O
{	O
t	double
=	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_int	*(int)
[	O
termn	int
]	O
;	O
rterm	array(int)
[	O
nerrors	int
]	O
=	O
t	double
;	O
if	O
(	O
!	O
den	int
)	O
{	O
denv	*(char)
[	O
t	double
]	O
=	O
'c'	O
;	O
if	O
(	O
nden	int
<	O
t	double
)	O
nden	int
=	O
t	double
;	O
}	O
if	O
(	O
denv	*(char)
[	O
t	double
]	O
==	O
'c'	O
||	O
denv	*(char)
[	O
t	double
]	O
==	O
'n'	O
)	O
{	O
coeff	*(*(double))
[	O
nerrors	int
]	O
[	O
ncells	int
]	O
=	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_dbl	*(double)
[	O
varv	array(int)
[	O
0	int
]	O
]	O
;	O
nerrors	int
++	O
;	O
output	()->(void)
(	O
)	O
;	O
}	O
}	O
else	O
{	O
if	O
(	O
den	int
)	O
{	O
dap_rewind	()->(void)
(	O
)	O
;	O
more	int
=	O
step	()->(int)
(	O
)	O
;	O
}	O
break	O
;	O
}	O
}	O
for	O
(	O
ncontrasts	int
=	O
0	int
;	O
more	int
;	O
more	int
=	O
step	()->(int)
(	O
)	O
)	O
{	O
if	O
(	O
!	O
strcmp	(*(char),*(char))->(int)
(	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_str	*(*(char))
[	O
typen	int
]	O
,	O
"CONTR"	*(char)
)	O
)	O
{	O
t	double
=	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_int	*(int)
[	O
termn	int
]	O
;	O
rterm	array(int)
[	O
nerrors	int
+	O
ncontrasts	int
]	O
=	O
t	double
;	O
if	O
(	O
!	O
num	int
)	O
{	O
numv	*(char)
[	O
t	double
]	O
=	O
'c'	O
;	O
if	O
(	O
nnum	int
<	O
t	double
)	O
nnum	int
=	O
t	double
;	O
}	O
if	O
(	O
numv	*(char)
[	O
t	double
]	O
==	O
'c'	O
||	O
numv	*(char)
[	O
t	double
]	O
==	O
'n'	O
)	O
{	O
coeff	*(*(double))
[	O
nerrors	int
+	O
ncontrasts	int
]	O
[	O
ncells	int
]	O
=	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_dbl	*(double)
[	O
varv	array(int)
[	O
0	int
]	O
]	O
;	O
ncontrasts	int
++	O
;	O
}	O
}	O
else	O
break	O
;	O
}	O
while	O
(	O
more	int
)	O
{	O
if	O
(	O
!	O
strcmp	(*(char),*(char))->(int)
(	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_str	*(*(char))
[	O
typen	int
]	O
,	O
"LSMEAN"	*(char)
)	O
)	O
{	O
t	double
=	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_int	*(int)
[	O
termn	int
]	O
;	O
if	O
(	O
t	double
<=	O
nnum	int
&&	O
(	O
numv	*(char)
[	O
t	double
]	O
==	O
'c'	O
||	O
numv	*(char)
[	O
t	double
]	O
==	O
'n'	O
)	O
)	O
output	()->(void)
(	O
)	O
;	O
}	O
else	O
break	O
;	O
more	int
=	O
step	()->(int)
(	O
)	O
;	O
}	O
}	O
dap_free	(*(void),*(char))->(void)
(	O
comem	*(double)
,	O
""	*(char)
)	O
;	O
dap_free	(*(void),*(char))->(void)
(	O
coeff	*(*(double))
,	O
""	*(char)
)	O
;	O
dap_free	(*(void),*(char))->(void)
(	O
tstname	*(char)
,	O
""	*(char)
)	O
;	O
dap_free	(*(void),*(char))->(void)
(	O
varv	array(int)
,	O
""	*(char)
)	O
;	O
dap_free	(*(void),*(char))->(void)
(	O
markv	array(int)
,	O
""	*(char)
)	O
;	O
dap_free	(*(void),*(char))->(void)
(	O
rterm	array(int)
,	O
""	*(char)
)	O
;	O
dap_free	(*(void),*(char))->(void)
(	O
numv	*(char)
,	O
""	*(char)
)	O
;	O
dap_free	(*(void),*(char))->(void)
(	O
denv	*(char)
,	O
""	*(char)
)	O
;	O
dap_free	(*(void),*(char))->(void)
(	O
levmem	*(char)
,	O
""	*(char)
)	O
;	O
dap_free	(*(void),*(char))->(void)
(	O
levptr	*(*(char))
,	O
""	*(char)
)	O
;	O
dap_free	(*(void),*(char))->(void)
(	O
levval	*(*(char))
,	O
""	*(char)
)	O
;	O
dap_free	(*(void),*(char))->(void)
(	O
nlevels	*(int)
,	O
""	*(char)
)	O
;	O
dap_free	(*(void),*(char))->(void)
(	O
levelmem	*(int)
,	O
""	*(char)
)	O
;	O
dap_free	(*(void),*(char))->(void)
(	O
level	double
,	O
""	*(char)
)	O
;	O
dap_free	(*(void),*(char))->(void)
(	O
mean	*(double)
,	O
""	*(char)
)	O
;	O
dap_free	(*(void),*(char))->(void)
(	O
nobs	array(double)
,	O
""	*(char)
)	O
;	O
dap_free	(*(void),*(char))->(void)
(	O
vari	*(double)
,	O
""	*(char)
)	O
;	O
}	O
static	O
void	O
putlev	(*(int),*(int),int,*(*(*(char))))->(void)
(	O
int	O
*	O
nlevels	*(int)
,	O
int	O
*	O
varv	array(int)
,	O
int	O
nvars	int
,	O
char	O
*	O
*	O
*	O
levval	*(*(char))
)	O
{	O
int	O
v	int
;	O
int	O
l	int
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
dap_lst	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"Response variable: %s\n\n"	*(char)
,	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_nam	*(*(char))
[	O
varv	array(int)
[	O
0	int
]	O
]	O
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
dap_lst	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%-15s Levels\n"	*(char)
,	O
"Treatment"	*(char)
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
dap_lst	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%-15s ------\n"	*(char)
,	O
"--------"	*(char)
)	O
;	O
for	O
(	O
v	int
=	O
1	int
;	O
v	int
<	O
nvars	int
;	O
v	int
++	O
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
dap_lst	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%-15s"	*(char)
,	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_nam	*(*(char))
[	O
varv	array(int)
[	O
v	int
]	O
]	O
)	O
;	O
for	O
(	O
l	int
=	O
0	int
;	O
l	int
<	O
nlevels	*(int)
[	O
v	int
]	O
;	O
l	int
++	O
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
dap_lst	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
" %s"	*(char)
,	O
levval	*(*(char))
[	O
v	int
]	O
[	O
l	int
]	O
)	O
;	O
putc	(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
'\n'	O
,	O
dap_lst	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
}	O
putc	(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
'\n'	O
,	O
dap_lst	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
}	O
static	O
void	O
maketerm	(int,*(char),int,*(int),*(int),*(*(double)),int,*(double),*(int),*(int),*(*(int)))->(void)
(	O
int	O
nterm	int
,	O
char	O
*	O
termv	*(char)
,	O
int	O
nvars	int
,	O
int	O
*	O
varv	array(int)
,	O
int	O
*	O
nlevels	*(int)
,	O
double	O
*	O
*	O
coeff	*(*(double))
,	O
int	O
ncells	int
,	O
double	O
*	O
nobs	array(double)
,	O
int	O
*	O
rterm	array(int)
,	O
int	O
*	O
nrows	int
,	O
int	O
*	O
*	O
clevel	*(*(int))
)	O
{	O
char	O
termtype	array(char)
[	O
4	int
]	O
=	O
"ecc"	*(char)
;	O
int	O
tt	int
;	O
int	O
tn	int
;	O
int	O
*	O
nest	*(int)
;	O
int	O
reset	int
;	O
int	O
r	double
,	O
c	int
;	O
int	O
row	int
;	O
int	O
*	O
iv	*(int)
;	O
int	O
ivn	int
;	O
int	O
ntreat	int
;	O
int	O
*	O
rlevel	*(int)
;	O
int	O
bits	int
;	O
double	O
prod	double
;	O
int	O
vn	int
;	O
int	O
nextr	int
;	O
int	O
*	O
change	*(int)
;	O
int	O
nbits	int
;	O
row	int
=	O
0	int
;	O
nest	*(int)
=	O
(	O
int	O
*	O
)	O
dap_malloc	(int,*(char))->(*(char))
(	O
sizeof	O
(	O
int	O
)	O
*	O
ncells	int
,	O
""	*(char)
)	O
;	O
iv	*(int)
=	O
(	O
int	O
*	O
)	O
dap_malloc	(int,*(char))->(*(char))
(	O
sizeof	O
(	O
int	O
)	O
*	O
(	O
dap_maxtreat	int
+	O
1	int
)	O
,	O
"dap_maxtreat"	*(char)
)	O
;	O
rlevel	*(int)
=	O
(	O
int	O
*	O
)	O
dap_malloc	(int,*(char))->(*(char))
(	O
sizeof	O
(	O
int	O
)	O
*	O
(	O
dap_maxtreat	int
+	O
1	int
)	O
,	O
"dap_maxtreat"	*(char)
)	O
;	O
change	*(int)
=	O
(	O
int	O
*	O
)	O
dap_malloc	(int,*(char))->(*(char))
(	O
sizeof	O
(	O
int	O
)	O
*	O
(	O
dap_maxtreat	int
+	O
1	int
)	O
,	O
"dap_maxtreat"	*(char)
)	O
;	O
for	O
(	O
tn	int
=	O
1	int
;	O
tn	int
<=	O
nterm	int
;	O
tn	int
++	O
)	O
nest	*(int)
[	O
tn	int
]	O
=	O
tn	int
;	O
for	O
(	O
tn	int
=	O
0x1	int
;	O
tn	int
<=	O
nterm	int
;	O
tn	int
=	O
(	O
tn	int
<<	O
1	int
)	O
)	O
{	O
if	O
(	O
termv	*(char)
[	O
tn	int
]	O
==	O
'e'	O
)	O
{	O
for	O
(	O
tt	int
=	O
1	int
,	O
bits	int
=	O
0	int
;	O
tt	int
<=	O
nterm	int
;	O
tt	int
++	O
)	O
{	O
if	O
(	O
tt	int
!=	O
tn	int
&&	O
(	O
tt	int
&	O
tn	int
)	O
==	O
tn	int
&&	O
termv	*(char)
[	O
tt	int
]	O
==	O
'c'	O
)	O
{	O
if	O
(	O
bits	int
)	O
bits	int
&=	O
tt	int
;	O
else	O
bits	int
=	O
tt	int
;	O
}	O
}	O
if	O
(	O
bits	int
&&	O
bits	int
!=	O
tn	int
)	O
{	O
for	O
(	O
tt	int
=	O
1	int
;	O
tt	int
<=	O
nterm	int
;	O
tt	int
++	O
)	O
{	O
if	O
(	O
(	O
tt	int
&	O
tn	int
)	O
==	O
tn	int
)	O
{	O
if	O
(	O
termv	*(char)
[	O
tt	int
]	O
==	O
'e'	O
)	O
{	O
nbits	int
=	O
(	O
tt	int
|	O
bits	int
)	O
;	O
termv	*(char)
[	O
tt	int
]	O
=	O
'n'	O
;	O
nest	*(int)
[	O
tt	int
]	O
=	O
nbits	int
;	O
}	O
}	O
}	O
}	O
}	O
}	O
for	O
(	O
vn	int
=	O
1	int
,	O
c	int
=	O
0	int
;	O
vn	int
<	O
nvars	int
;	O
vn	int
++	O
)	O
clevel	*(*(int))
[	O
vn	int
]	O
[	O
c	int
]	O
=	O
0	int
;	O
for	O
(	O
c	int
++	O
;	O
c	int
<	O
ncells	int
;	O
c	int
++	O
)	O
{	O
for	O
(	O
vn	int
=	O
1	int
;	O
vn	int
<	O
nvars	int
;	O
vn	int
++	O
)	O
clevel	*(*(int))
[	O
vn	int
]	O
[	O
c	int
]	O
=	O
clevel	*(*(int))
[	O
vn	int
]	O
[	O
c	int
-	O
1	int
]	O
;	O
for	O
(	O
vn	int
=	O
nvars	int
-	O
1	int
;	O
vn	int
>=	O
0	int
;	O
--	O
vn	int
)	O
{	O
if	O
(	O
++	O
clevel	*(*(int))
[	O
vn	int
]	O
[	O
c	int
]	O
==	O
nlevels	*(int)
[	O
vn	int
]	O
)	O
clevel	*(*(int))
[	O
vn	int
]	O
[	O
c	int
]	O
=	O
0	int
;	O
else	O
break	O
;	O
}	O
}	O
for	O
(	O
tt	int
=	O
0	int
,	O
r	double
=	O
0	int
;	O
tt	int
<	O
3	int
;	O
tt	int
++	O
)	O
{	O
reset	int
=	O
(	O
tt	int
<	O
2	int
)	O
;	O
for	O
(	O
tn	int
=	O
1	int
,	O
nrows	int
[	O
tt	int
]	O
=	O
0	int
;	O
tn	int
<=	O
nterm	int
;	O
tn	int
++	O
)	O
{	O
if	O
(	O
termv	*(char)
[	O
tn	int
]	O
==	O
termtype	array(char)
[	O
tt	int
]	O
||	O
(	O
termv	*(char)
[	O
tn	int
]	O
==	O
'n'	O
&&	O
termtype	array(char)
[	O
tt	int
]	O
==	O
'c'	O
)	O
)	O
{	O
bits	int
=	O
tn	int
;	O
for	O
(	O
ntreat	int
=	O
0	int
,	O
vn	int
=	O
1	int
;	O
vn	int
<	O
nvars	int
;	O
vn	int
++	O
,	O
bits	int
=	O
(	O
bits	int
>>	O
1	int
)	O
)	O
{	O
if	O
(	O
bits	int
&	O
0x1	int
)	O
iv	*(int)
[	O
ntreat	int
++	O
]	O
=	O
vn	int
;	O
}	O
for	O
(	O
c	int
=	O
0	int
,	O
vn	int
=	O
nvars	int
-	O
1	int
;	O
vn	int
>	O
0	int
;	O
)	O
{	O
for	O
(	O
ivn	int
=	O
0	int
;	O
ivn	int
<	O
ntreat	int
;	O
ivn	int
++	O
)	O
rlevel	*(int)
[	O
ivn	int
]	O
=	O
reset	int
;	O
for	O
(	O
row	int
=	O
0	int
,	O
ivn	int
=	O
0	int
;	O
ivn	int
<	O
ntreat	int
;	O
)	O
{	O
if	O
(	O
tt	int
<	O
2	int
)	O
{	O
for	O
(	O
ivn	int
=	O
0	int
,	O
prod	double
=	O
1.0	int
;	O
ivn	int
<	O
ntreat	int
;	O
ivn	int
++	O
)	O
{	O
if	O
(	O
clevel	*(*(int))
[	O
iv	*(int)
[	O
ivn	int
]	O
]	O
[	O
c	int
]	O
==	O
0	int
)	O
;	O
else	O
if	O
(	O
clevel	*(*(int))
[	O
iv	*(int)
[	O
ivn	int
]	O
]	O
[	O
c	int
]	O
==	O
rlevel	*(int)
[	O
ivn	int
]	O
)	O
prod	double
=	O
-	O
prod	double
;	O
else	O
{	O
prod	double
=	O
0.0	int
;	O
break	O
;	O
}	O
}	O
coeff	*(*(double))
[	O
r	double
+	O
row	int
]	O
[	O
c	int
]	O
=	O
prod	double
;	O
row	int
++	O
;	O
}	O
else	O
if	O
(	O
ntreat	int
==	O
1	int
)	O
{	O
if	O
(	O
clevel	*(*(int))
[	O
iv	*(int)
[	O
ivn	int
]	O
]	O
[	O
c	int
]	O
==	O
rlevel	*(int)
[	O
ivn	int
]	O
)	O
coeff	*(*(double))
[	O
r	double
+	O
row	int
]	O
[	O
c	int
]	O
=	O
1.0	int
;	O
else	O
coeff	*(*(double))
[	O
r	double
+	O
row	int
]	O
[	O
c	int
]	O
=	O
0.0	int
;	O
row	int
++	O
;	O
}	O
for	O
(	O
ivn	int
=	O
0	int
;	O
ivn	int
<	O
ntreat	int
;	O
ivn	int
++	O
)	O
{	O
if	O
(	O
++	O
rlevel	*(int)
[	O
ivn	int
]	O
==	O
nlevels	*(int)
[	O
iv	*(int)
[	O
ivn	int
]	O
]	O
)	O
rlevel	*(int)
[	O
ivn	int
]	O
=	O
reset	int
;	O
else	O
break	O
;	O
}	O
}	O
if	O
(	O
++	O
c	int
==	O
ncells	int
)	O
break	O
;	O
}	O
for	O
(	O
nextr	int
=	O
r	double
+	O
row	int
;	O
r	double
<	O
nextr	int
;	O
r	double
++	O
,	O
nrows	int
[	O
tt	int
]	O
++	O
)	O
rterm	array(int)
[	O
r	double
]	O
=	O
nest	*(int)
[	O
tn	int
]	O
;	O
}	O
}	O
}	O
dap_free	(*(void),*(char))->(void)
(	O
nest	*(int)
,	O
""	*(char)
)	O
;	O
dap_free	(*(void),*(char))->(void)
(	O
iv	*(int)
,	O
""	*(char)
)	O
;	O
dap_free	(*(void),*(char))->(void)
(	O
rlevel	*(int)
,	O
""	*(char)
)	O
;	O
dap_free	(*(void),*(char))->(void)
(	O
change	*(int)
,	O
""	*(char)
)	O
;	O
}	O
static	O
int	O
cmpstr	(*(*(char)),*(*(char)))->(int)
(	O
char	O
*	O
*	O
s1	*(*(char))
,	O
char	O
*	O
*	O
s2	*(*(char))
)	O
{	O
return	O
strcmp	(*(char),*(char))->(int)
(	O
*	O
s1	*(*(char))
,	O
*	O
s2	*(*(char))
)	O
;	O
}	O
static	O
void	O
eff1	(int,*(*(*(char))),*(int),*(int),int,*(char),int,int,int)->(void)
(	O
int	O
incells	int
,	O
char	O
*	O
*	O
*	O
levval	*(*(char))
,	O
int	O
*	O
nlevels	*(int)
,	O
int	O
*	O
varv	array(int)
,	O
int	O
nvars	int
,	O
char	O
*	O
termv	*(char)
,	O
int	O
nterm	int
,	O
int	O
typen	int
,	O
int	O
termn	int
)	O
{	O
double	O
*	O
comem	*(double)
;	O
double	O
*	O
*	O
coeff	*(*(double))
;	O
int	O
v	int
;	O
int	O
ncells	int
;	O
int	O
celli	int
;	O
int	O
*	O
level	double
;	O
int	O
*	O
clevmem	*(int)
;	O
int	O
*	O
*	O
clevel	*(*(int))
;	O
int	O
statn	int
;	O
double	O
nobs1	double
;	O
double	O
mean1	double
;	O
double	O
vari1	double
;	O
int	O
gotn	int
,	O
gotm	int
,	O
gotv	int
;	O
double	O
*	O
nobs	array(double)
;	O
double	O
*	O
mean	*(double)
;	O
double	O
*	O
vari	*(double)
;	O
int	O
celln	int
;	O
int	O
sumlev	int
;	O
int	O
miss	int
;	O
int	O
*	O
rterm	array(int)
;	O
int	O
*	O
indep	*(int)
;	O
int	O
*	O
nonz	*(int)
;	O
int	O
nrows	int
[	O
3	int
]	O
;	O
int	O
r	double
;	O
int	O
errow	int
;	O
int	O
corow	int
;	O
int	O
cr	int
;	O
double	O
max	double
;	O
double	O
tmp	double
;	O
int	O
(	O
*	O
scmp	*(()->(int))
)	O
(	O
)	O
;	O
nobs1	double
=	O
0.0	int
;	O
mean1	double
=	O
0.0	int
;	O
vari1	double
=	O
0.0	int
;	O
scmp	*(()->(int))
=	O
&	O
cmpstr	(*(*(char)),*(*(char)))->(int)
;	O
level	double
=	O
(	O
int	O
*	O
)	O
dap_malloc	(int,*(char))->(*(char))
(	O
sizeof	O
(	O
int	O
)	O
*	O
(	O
dap_maxtreat	int
+	O
1	int
)	O
,	O
"dap_maxtreat"	*(char)
)	O
;	O
for	O
(	O
v	int
=	O
1	int
;	O
v	int
<	O
nvars	int
;	O
v	int
++	O
)	O
qsort	(*(void),long,long,*((*(void),*(void))->(int)))->(void)
(	O
levval	*(*(char))
[	O
v	int
]	O
,	O
nlevels	*(int)
[	O
v	int
]	O
,	O
sizeof	O
(	O
char	O
*	O
)	O
,	O
scmp	*(()->(int))
)	O
;	O
for	O
(	O
v	int
=	O
1	int
,	O
ncells	int
=	O
1	int
,	O
sumlev	int
=	O
0	int
;	O
v	int
<	O
nvars	int
;	O
v	int
++	O
)	O
{	O
ncells	int
*=	O
nlevels	*(int)
[	O
v	int
]	O
;	O
sumlev	int
+=	O
nlevels	*(int)
[	O
v	int
]	O
;	O
level	double
[	O
v	int
]	O
=	O
0	int
;	O
}	O
clevmem	*(int)
=	O
(	O
int	O
*	O
)	O
dap_malloc	(int,*(char))->(*(char))
(	O
sizeof	O
(	O
int	O
)	O
*	O
nvars	int
*	O
ncells	int
,	O
""	*(char)
)	O
;	O
clevel	*(*(int))
=	O
(	O
int	O
*	O
*	O
)	O
dap_malloc	(int,*(char))->(*(char))
(	O
sizeof	O
(	O
int	O
*	O
)	O
*	O
nvars	int
,	O
""	*(char)
)	O
;	O
for	O
(	O
v	int
=	O
0	int
;	O
v	int
<	O
nvars	int
;	O
v	int
++	O
)	O
clevel	*(*(int))
[	O
v	int
]	O
=	O
clevmem	*(int)
+	O
v	int
*	O
ncells	int
;	O
nobs	array(double)
=	O
(	O
double	O
*	O
)	O
dap_malloc	(int,*(char))->(*(char))
(	O
sizeof	O
(	O
double	O
)	O
*	O
ncells	int
,	O
""	*(char)
)	O
;	O
mean	*(double)
=	O
(	O
double	O
*	O
)	O
dap_malloc	(int,*(char))->(*(char))
(	O
sizeof	O
(	O
double	O
)	O
*	O
ncells	int
,	O
""	*(char)
)	O
;	O
vari	*(double)
=	O
(	O
double	O
*	O
)	O
dap_malloc	(int,*(char))->(*(char))
(	O
sizeof	O
(	O
double	O
)	O
*	O
ncells	int
,	O
""	*(char)
)	O
;	O
rterm	array(int)
=	O
(	O
int	O
*	O
)	O
dap_malloc	(int,*(char))->(*(char))
(	O
sizeof	O
(	O
int	O
)	O
*	O
(	O
ncells	int
+	O
sumlev	int
-	O
1	int
)	O
,	O
""	*(char)
)	O
;	O
indep	*(int)
=	O
(	O
int	O
*	O
)	O
dap_malloc	(int,*(char))->(*(char))
(	O
sizeof	O
(	O
int	O
)	O
*	O
(	O
ncells	int
+	O
sumlev	int
-	O
1	int
)	O
,	O
""	*(char)
)	O
;	O
nonz	*(int)
=	O
(	O
int	O
*	O
)	O
dap_malloc	(int,*(char))->(*(char))
(	O
sizeof	O
(	O
int	O
)	O
*	O
(	O
ncells	int
+	O
sumlev	int
-	O
1	int
)	O
,	O
""	*(char)
)	O
;	O
comem	*(double)
=	O
(	O
double	O
*	O
)	O
dap_malloc	(int,*(char))->(*(char))
(	O
sizeof	O
(	O
double	O
)	O
*	O
(	O
ncells	int
+	O
sumlev	int
)	O
*	O
ncells	int
,	O
""	*(char)
)	O
;	O
coeff	*(*(double))
=	O
(	O
double	O
*	O
*	O
)	O
dap_malloc	(int,*(char))->(*(char))
(	O
sizeof	O
(	O
double	O
*	O
)	O
*	O
(	O
ncells	int
+	O
sumlev	int
)	O
,	O
""	*(char)
)	O
;	O
for	O
(	O
r	double
=	O
0	int
;	O
r	double
<	O
ncells	int
+	O
sumlev	int
;	O
r	double
++	O
)	O
coeff	*(*(double))
[	O
r	double
]	O
=	O
comem	*(double)
+	O
r	double
*	O
ncells	int
;	O
for	O
(	O
celli	int
=	O
0	int
,	O
celln	int
=	O
0	int
;	O
celli	int
<	O
incells	int
;	O
celli	int
++	O
,	O
celln	int
++	O
)	O
{	O
gotn	int
=	O
0	int
;	O
gotm	int
=	O
0	int
;	O
gotv	int
=	O
0	int
;	O
for	O
(	O
statn	int
=	O
0	int
;	O
statn	int
<	O
3	int
;	O
statn	int
++	O
)	O
{	O
step	()->(int)
(	O
)	O
;	O
if	O
(	O
!	O
strcmp	(*(char),*(char))->(int)
(	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_str	*(*(char))
[	O
typen	int
]	O
,	O
"N"	*(char)
)	O
)	O
{	O
nobs1	double
=	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_dbl	*(double)
[	O
varv	array(int)
[	O
0	int
]	O
]	O
;	O
gotn	int
=	O
1	int
;	O
}	O
else	O
if	O
(	O
!	O
strcmp	(*(char),*(char))->(int)
(	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_str	*(*(char))
[	O
typen	int
]	O
,	O
"MEAN"	*(char)
)	O
)	O
{	O
mean1	double
=	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_dbl	*(double)
[	O
varv	array(int)
[	O
0	int
]	O
]	O
;	O
gotm	int
=	O
1	int
;	O
}	O
else	O
if	O
(	O
!	O
strcmp	(*(char),*(char))->(int)
(	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_str	*(*(char))
[	O
typen	int
]	O
,	O
"VAR"	*(char)
)	O
)	O
{	O
vari1	double
=	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_dbl	*(double)
[	O
varv	array(int)
[	O
0	int
]	O
]	O
;	O
gotv	int
=	O
1	int
;	O
}	O
else	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
dap_err	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"(eff1) Bad cell statistic: %s\n"	*(char)
,	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_str	*(*(char))
[	O
typen	int
]	O
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
}	O
if	O
(	O
!	O
gotn	int
)	O
{	O
fputs	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
"(eff1) Missing N.\n"	*(char)
,	O
dap_err	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
if	O
(	O
!	O
gotm	int
)	O
{	O
fputs	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
"(eff1) Missing MEAN.\n"	*(char)
,	O
dap_err	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
if	O
(	O
!	O
gotv	int
)	O
{	O
fputs	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
"(eff1) Missing VAR.\n"	*(char)
,	O
dap_err	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
do	O
{	O
for	O
(	O
v	int
=	O
1	int
,	O
miss	int
=	O
0	int
;	O
v	int
<	O
nvars	int
;	O
v	int
++	O
)	O
{	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_str	*(*(char))
[	O
varv	array(int)
[	O
v	int
]	O
]	O
,	O
levval	*(*(char))
[	O
v	int
]	O
[	O
level	double
[	O
v	int
]	O
]	O
)	O
)	O
{	O
miss	int
=	O
1	int
;	O
break	O
;	O
}	O
}	O
if	O
(	O
miss	int
)	O
{	O
nobs	array(double)
[	O
celln	int
]	O
=	O
0.0	int
;	O
mean	*(double)
[	O
celln	int
]	O
=	O
0.0	int
;	O
vari	*(double)
[	O
celln	int
]	O
=	O
0.0	int
;	O
celln	int
++	O
;	O
for	O
(	O
v	int
=	O
nvars	int
-	O
1	int
;	O
v	int
>	O
0	int
;	O
--	O
v	int
)	O
{	O
if	O
(	O
++	O
level	double
[	O
v	int
]	O
==	O
nlevels	*(int)
[	O
v	int
]	O
)	O
level	double
[	O
v	int
]	O
=	O
0	int
;	O
else	O
break	O
;	O
}	O
}	O
}	O
while	O
(	O
miss	int
)	O
;	O
nobs	array(double)
[	O
celln	int
]	O
=	O
nobs1	double
;	O
mean	*(double)
[	O
celln	int
]	O
=	O
mean1	double
;	O
if	O
(	O
nobs1	double
>	O
1.0	int
)	O
vari	*(double)
[	O
celln	int
]	O
=	O
vari1	double
;	O
else	O
vari	*(double)
[	O
celln	int
]	O
=	O
0.0	int
;	O
for	O
(	O
v	int
=	O
nvars	int
-	O
1	int
;	O
v	int
>	O
0	int
;	O
--	O
v	int
)	O
{	O
if	O
(	O
++	O
level	double
[	O
v	int
]	O
==	O
nlevels	*(int)
[	O
v	int
]	O
)	O
level	double
[	O
v	int
]	O
=	O
0	int
;	O
else	O
break	O
;	O
}	O
}	O
while	O
(	O
celln	int
<	O
ncells	int
)	O
{	O
nobs	array(double)
[	O
celln	int
]	O
=	O
0.0	int
;	O
mean	*(double)
[	O
celln	int
]	O
=	O
0.0	int
;	O
vari	*(double)
[	O
celln	int
]	O
=	O
0.0	int
;	O
celln	int
++	O
;	O
}	O
maketerm	(int,*(char),int,*(int),*(int),*(*(double)),int,*(double),*(int),*(int),*(*(int)))->(void)
(	O
nterm	int
,	O
termv	*(char)
,	O
nvars	int
,	O
varv	array(int)
,	O
nlevels	*(int)
,	O
coeff	*(*(double))
,	O
ncells	int
,	O
nobs	array(double)
,	O
rterm	array(int)
,	O
nrows	int
,	O
clevel	*(*(int))
)	O
;	O
for	O
(	O
cr	int
=	O
0	int
;	O
cr	int
<	O
nrows	int
[	O
0	int
]	O
+	O
nrows	int
[	O
1	int
]	O
+	O
nrows	int
[	O
2	int
]	O
;	O
cr	int
++	O
)	O
indep	*(int)
[	O
cr	int
]	O
=	O
0	int
;	O
if	O
(	O
nrows	int
[	O
0	int
]	O
)	O
{	O
errow	int
=	O
rowred	(*(*(double)),array(int),int,int,array(double),int,int,*(int))->(int)
(	O
coeff	*(*(double))
,	O
rterm	array(int)
,	O
0	int
,	O
ncells	int
,	O
nobs	array(double)
,	O
nrows	int
[	O
0	int
]	O
-	O
1	int
,	O
nrows	int
[	O
0	int
]	O
-	O
1	int
,	O
NULL	O
)	O
;	O
if	O
(	O
errow	int
<	O
nrows	int
[	O
0	int
]	O
)	O
orthog	(*(*(double)),int,int,int,int,*(double),*(int),*(int))->(int)
(	O
coeff	*(*(double))
,	O
nrows	int
[	O
0	int
]	O
-	O
1	int
,	O
errow	int
,	O
0	int
,	O
ncells	int
,	O
nobs	array(double)
,	O
indep	*(int)
,	O
NULL	O
)	O
;	O
corow	int
=	O
rowred	(*(*(double)),array(int),int,int,array(double),int,int,*(int))->(int)
(	O
coeff	*(*(double))
,	O
rterm	array(int)
,	O
0	int
,	O
ncells	int
,	O
nobs	array(double)
,	O
nrows	int
[	O
0	int
]	O
-	O
1	int
,	O
nrows	int
[	O
0	int
]	O
+	O
nrows	int
[	O
1	int
]	O
+	O
nrows	int
[	O
2	int
]	O
-	O
1	int
,	O
nonz	*(int)
)	O
;	O
if	O
(	O
corow	int
<	O
nrows	int
[	O
0	int
]	O
)	O
corow	int
=	O
nrows	int
[	O
0	int
]	O
;	O
}	O
else	O
{	O
errow	int
=	O
0	int
;	O
corow	int
=	O
nrows	int
[	O
0	int
]	O
;	O
}	O
for	O
(	O
v	int
=	O
1	int
;	O
v	int
<	O
nvars	int
;	O
v	int
++	O
)	O
level	double
[	O
v	int
]	O
=	O
0	int
;	O
for	O
(	O
r	double
=	O
0	int
,	O
max	double
=	O
0.0	int
;	O
r	double
<	O
nrows	int
[	O
0	int
]	O
+	O
nrows	int
[	O
1	int
]	O
+	O
nrows	int
[	O
2	int
]	O
;	O
r	double
++	O
)	O
for	O
(	O
celln	int
=	O
0	int
;	O
celln	int
<	O
ncells	int
;	O
celln	int
++	O
)	O
{	O
if	O
(	O
(	O
tmp	double
=	O
fabs	(double)->(double)
(	O
coeff	*(*(double))
[	O
r	double
]	O
[	O
celln	int
]	O
)	O
)	O
>	O
max	double
)	O
max	double
=	O
tmp	double
;	O
}	O
for	O
(	O
r	double
=	O
0	int
;	O
r	double
<	O
nrows	int
[	O
0	int
]	O
+	O
nrows	int
[	O
1	int
]	O
+	O
nrows	int
[	O
2	int
]	O
;	O
r	double
++	O
)	O
for	O
(	O
celln	int
=	O
0	int
;	O
celln	int
<	O
ncells	int
;	O
celln	int
++	O
)	O
{	O
if	O
(	O
fabs	(double)->(double)
(	O
coeff	*(*(double))
[	O
r	double
]	O
[	O
celln	int
]	O
)	O
<	O
dap_zerotol	double
*	O
max	double
)	O
coeff	*(*(double))
[	O
r	double
]	O
[	O
celln	int
]	O
=	O
0.0	int
;	O
}	O
for	O
(	O
celln	int
=	O
0	int
;	O
celln	int
<	O
ncells	int
;	O
celln	int
++	O
)	O
{	O
if	O
(	O
nobs	array(double)
[	O
celln	int
]	O
)	O
{	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_int	*(int)
[	O
termn	int
]	O
=	O
0	int
;	O
for	O
(	O
v	int
=	O
1	int
;	O
v	int
<	O
nvars	int
;	O
v	int
++	O
)	O
strcpy	(*(char),*(char))->(*(char))
(	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_str	*(*(char))
[	O
varv	array(int)
[	O
v	int
]	O
]	O
,	O
levval	*(*(char))
[	O
v	int
]	O
[	O
level	double
[	O
v	int
]	O
]	O
)	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_str	*(*(char))
[	O
typen	int
]	O
,	O
"N"	*(char)
)	O
;	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_dbl	*(double)
[	O
varv	array(int)
[	O
0	int
]	O
]	O
=	O
nobs	array(double)
[	O
celln	int
]	O
;	O
output	()->(void)
(	O
)	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_str	*(*(char))
[	O
typen	int
]	O
,	O
"MEAN"	*(char)
)	O
;	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_dbl	*(double)
[	O
varv	array(int)
[	O
0	int
]	O
]	O
=	O
mean	*(double)
[	O
celln	int
]	O
;	O
output	()->(void)
(	O
)	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_str	*(*(char))
[	O
typen	int
]	O
,	O
"VAR"	*(char)
)	O
;	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_dbl	*(double)
[	O
varv	array(int)
[	O
0	int
]	O
]	O
=	O
vari	*(double)
[	O
celln	int
]	O
;	O
output	()->(void)
(	O
)	O
;	O
for	O
(	O
r	double
=	O
errow	int
;	O
r	double
<	O
nrows	int
[	O
0	int
]	O
;	O
r	double
++	O
)	O
{	O
if	O
(	O
indep	*(int)
[	O
r	double
]	O
)	O
{	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_dbl	*(double)
[	O
varv	array(int)
[	O
0	int
]	O
]	O
=	O
coeff	*(*(double))
[	O
r	double
]	O
[	O
celln	int
]	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_str	*(*(char))
[	O
typen	int
]	O
,	O
"ERROR"	*(char)
)	O
;	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_int	*(int)
[	O
termn	int
]	O
=	O
rterm	array(int)
[	O
r	double
]	O
;	O
output	()->(void)
(	O
)	O
;	O
}	O
}	O
for	O
(	O
r	double
=	O
corow	int
;	O
r	double
<	O
nrows	int
[	O
0	int
]	O
+	O
nrows	int
[	O
1	int
]	O
;	O
r	double
++	O
)	O
{	O
if	O
(	O
!	O
nrows	int
[	O
0	int
]	O
||	O
nonz	*(int)
[	O
r	double
]	O
)	O
{	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_dbl	*(double)
[	O
varv	array(int)
[	O
0	int
]	O
]	O
=	O
coeff	*(*(double))
[	O
r	double
]	O
[	O
celln	int
]	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_str	*(*(char))
[	O
typen	int
]	O
,	O
"CONTR"	*(char)
)	O
;	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_int	*(int)
[	O
termn	int
]	O
=	O
rterm	array(int)
[	O
r	double
]	O
;	O
output	()->(void)
(	O
)	O
;	O
}	O
}	O
strcpy	(*(char),*(char))->(*(char))
(	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_str	*(*(char))
[	O
typen	int
]	O
,	O
"LSMEAN"	*(char)
)	O
;	O
while	O
(	O
r	double
<	O
nrows	int
[	O
0	int
]	O
+	O
nrows	int
[	O
1	int
]	O
+	O
nrows	int
[	O
2	int
]	O
)	O
{	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_int	*(int)
[	O
termn	int
]	O
=	O
rterm	array(int)
[	O
r	double
]	O
;	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_dbl	*(double)
[	O
varv	array(int)
[	O
0	int
]	O
]	O
=	O
coeff	*(*(double))
[	O
r	double
]	O
[	O
celln	int
]	O
;	O
output	()->(void)
(	O
)	O
;	O
r	double
++	O
;	O
}	O
}	O
for	O
(	O
v	int
=	O
nvars	int
-	O
1	int
;	O
v	int
>	O
0	int
;	O
--	O
v	int
)	O
{	O
if	O
(	O
++	O
level	double
[	O
v	int
]	O
==	O
nlevels	*(int)
[	O
v	int
]	O
)	O
level	double
[	O
v	int
]	O
=	O
0	int
;	O
else	O
break	O
;	O
}	O
}	O
dap_free	(*(void),*(char))->(void)
(	O
comem	*(double)
,	O
""	*(char)
)	O
;	O
dap_free	(*(void),*(char))->(void)
(	O
coeff	*(*(double))
,	O
""	*(char)
)	O
;	O
dap_free	(*(void),*(char))->(void)
(	O
level	double
,	O
""	*(char)
)	O
;	O
dap_free	(*(void),*(char))->(void)
(	O
clevmem	*(int)
,	O
""	*(char)
)	O
;	O
dap_free	(*(void),*(char))->(void)
(	O
clevel	*(*(int))
,	O
""	*(char)
)	O
;	O
dap_free	(*(void),*(char))->(void)
(	O
nobs	array(double)
,	O
""	*(char)
)	O
;	O
dap_free	(*(void),*(char))->(void)
(	O
mean	*(double)
,	O
""	*(char)
)	O
;	O
dap_free	(*(void),*(char))->(void)
(	O
vari	*(double)
,	O
""	*(char)
)	O
;	O
dap_free	(*(void),*(char))->(void)
(	O
rterm	array(int)
,	O
""	*(char)
)	O
;	O
dap_free	(*(void),*(char))->(void)
(	O
indep	*(int)
,	O
""	*(char)
)	O
;	O
dap_free	(*(void),*(char))->(void)
(	O
nonz	*(int)
,	O
""	*(char)
)	O
;	O
}	O
void	O
effects	(*(char),*(char),*(char),*(char))->(void)
(	O
char	O
*	O
fname	array(char)
,	O
char	O
*	O
varlist	array(char)
,	O
char	O
*	O
model	*(char)
,	O
char	O
*	O
marks	array(char)
)	O
{	O
char	O
*	O
conname	*(char)
;	O
char	O
*	O
outlist	*(char)
;	O
int	O
*	O
varv	array(int)
;	O
int	O
nvars	int
;	O
int	O
*	O
markv	array(int)
;	O
int	O
nmark	int
;	O
int	O
typen	int
;	O
int	O
termn	int
;	O
char	O
*	O
termv	*(char)
;	O
int	O
nterm	int
;	O
char	O
*	O
levmem	*(char)
;	O
char	O
*	O
*	O
levptr	*(*(char))
;	O
char	O
*	O
*	O
*	O
levval	*(*(char))
;	O
int	O
*	O
nlevels	*(int)
;	O
int	O
incells	int
;	O
int	O
v	int
;	O
int	O
l	int
;	O
int	O
more	int
;	O
conname	*(char)
=	O
dap_malloc	(int,*(char))->(*(char))
(	O
strlen	(*(char))->(long)
(	O
fname	array(char)
)	O
+	O
5	int
,	O
fname	array(char)
)	O
;	O
outlist	*(char)
=	O
dap_malloc	(int,*(char))->(*(char))
(	O
strlen	(*(char))->(long)
(	O
varlist	array(char)
)	O
+	O
strlen	(*(char))->(long)
(	O
marks	array(char)
)	O
+	O
9	int
,	O
""	*(char)
)	O
;	O
varv	array(int)
=	O
(	O
int	O
*	O
)	O
dap_malloc	(int,*(char))->(*(char))
(	O
sizeof	O
(	O
int	O
)	O
*	O
(	O
dap_maxtreat	int
+	O
1	int
)	O
,	O
"dap_maxtreat"	*(char)
)	O
;	O
markv	array(int)
=	O
(	O
int	O
*	O
)	O
dap_malloc	(int,*(char))->(*(char))
(	O
sizeof	O
(	O
int	O
)	O
*	O
dap_maxvar	int
,	O
"dap_maxvar"	*(char)
)	O
;	O
termv	*(char)
=	O
dap_malloc	(int,*(char))->(*(char))
(	O
dap_maxcell	int
,	O
"dap_maxcell"	*(char)
)	O
;	O
levmem	*(char)
=	O
dap_malloc	(int,*(char))->(*(char))
(	O
(	O
dap_maxtreat	int
+	O
1	int
)	O
*	O
dap_maxlev	int
*	O
(	O
dap_strlen	int
+	O
1	int
)	O
,	O
"dap_maxtreat, dap_maxlev, dap_strlen"	*(char)
)	O
;	O
levptr	*(*(char))
=	O
(	O
char	O
*	O
*	O
)	O
dap_malloc	(int,*(char))->(*(char))
(	O
sizeof	O
(	O
char	O
*	O
)	O
*	O
(	O
dap_maxtreat	int
+	O
1	int
)	O
*	O
dap_maxlev	int
,	O
"dap_maxtreat, dap_maxlev"	*(char)
)	O
;	O
levval	*(*(char))
=	O
(	O
char	O
*	O
*	O
*	O
)	O
dap_malloc	(int,*(char))->(*(char))
(	O
sizeof	O
(	O
char	O
*	O
*	O
)	O
*	O
(	O
dap_maxtreat	int
+	O
1	int
)	O
,	O
"dap_maxtreat"	*(char)
)	O
;	O
for	O
(	O
v	int
=	O
0	int
;	O
v	int
<	O
dap_maxtreat	int
+	O
1	int
;	O
v	int
++	O
)	O
{	O
levval	*(*(char))
[	O
v	int
]	O
=	O
levptr	*(*(char))
+	O
v	int
*	O
dap_maxlev	int
;	O
for	O
(	O
l	int
=	O
0	int
;	O
l	int
<	O
dap_maxlev	int
;	O
l	int
++	O
)	O
levval	*(*(char))
[	O
v	int
]	O
[	O
l	int
]	O
=	O
levmem	*(char)
+	O
v	int
*	O
dap_maxlev	int
*	O
(	O
dap_strlen	int
+	O
1	int
)	O
+	O
l	int
*	O
(	O
dap_strlen	int
+	O
1	int
)	O
;	O
}	O
nlevels	*(int)
=	O
(	O
int	O
*	O
)	O
dap_malloc	(int,*(char))->(*(char))
(	O
sizeof	O
(	O
int	O
)	O
*	O
(	O
dap_maxtreat	int
+	O
1	int
)	O
,	O
"dap_maxtreat"	*(char)
)	O
;	O
if	O
(	O
!	O
fname	array(char)
)	O
{	O
fputs	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
"(effects) No dataset name given.\n"	*(char)
,	O
dap_err	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
dap_suffix	(array(char),array(char),array(char))->(void)
(	O
conname	*(char)
,	O
fname	array(char)
,	O
".con"	*(char)
)	O
;	O
inset	(array(char))->(void)
(	O
fname	array(char)
)	O
;	O
if	O
(	O
(	O
typen	int
=	O
dap_varnum	(array(char))->(int)
(	O
"_type_"	*(char)
)	O
)	O
<	O
0	int
)	O
{	O
fputs	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
"(effects) no _type_ variable\n"	*(char)
,	O
dap_err	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
termn	int
=	O
dap_vd	(array(char),int)->(int)
(	O
"_term_ 0"	*(char)
,	O
0	int
)	O
;	O
nvars	int
=	O
dap_list	(array(char),array(int),int)->(int)
(	O
varlist	array(char)
,	O
varv	array(int)
,	O
dap_maxtreat	int
+	O
1	int
)	O
;	O
if	O
(	O
nvars	int
>	O
dap_maxtreat	int
+	O
1	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
dap_err	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"(effects) too many variables in model: %s\n"	*(char)
,	O
model	*(char)
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
if	O
(	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_len	*(int)
[	O
varv	array(int)
[	O
0	int
]	O
]	O
!=	O
DBL	O
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
dap_err	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"(effects) response variable %s must be of type double\n"	*(char)
,	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_nam	*(*(char))
[	O
varv	array(int)
[	O
0	int
]	O
]	O
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
for	O
(	O
v	int
=	O
1	int
;	O
v	int
<	O
nvars	int
;	O
v	int
++	O
)	O
{	O
if	O
(	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_len	*(int)
[	O
varv	array(int)
[	O
v	int
]	O
]	O
<=	O
0	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
dap_err	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"(effects) classification variable %s must be string\n"	*(char)
,	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_nam	*(*(char))
[	O
varv	array(int)
[	O
v	int
]	O
]	O
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
}	O
nterm	int
=	O
testparse	(*(char),*(char),*(int),int)->(int)
(	O
model	*(char)
,	O
termv	*(char)
,	O
varv	array(int)
,	O
nvars	int
)	O
;	O
nmark	int
=	O
dap_list	(array(char),array(int),int)->(int)
(	O
marks	array(char)
,	O
markv	array(int)
,	O
dap_maxvar	int
)	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
outlist	*(char)
,	O
varlist	array(char)
)	O
;	O
strcat	(*(char),*(char))->(*(char))
(	O
outlist	*(char)
,	O
" _term_"	*(char)
)	O
;	O
if	O
(	O
nmark	int
)	O
{	O
strcat	(*(char),*(char))->(*(char))
(	O
outlist	*(char)
,	O
" "	*(char)
)	O
;	O
strcat	(*(char),*(char))->(*(char))
(	O
outlist	*(char)
,	O
marks	array(char)
)	O
;	O
}	O
outset	(array(char),array(char))->(void)
(	O
conname	*(char)
,	O
outlist	*(char)
)	O
;	O
for	O
(	O
v	int
=	O
1	int
;	O
v	int
<	O
nvars	int
;	O
v	int
++	O
)	O
{	O
nlevels	*(int)
[	O
v	int
]	O
=	O
0	int
;	O
for	O
(	O
l	int
=	O
0	int
;	O
l	int
<	O
dap_maxlev	int
;	O
l	int
++	O
)	O
levval	*(*(char))
[	O
v	int
]	O
[	O
l	int
]	O
[	O
0	int
]	O
=	O
'\0'	O
;	O
}	O
dap_mark	()->(void)
(	O
)	O
;	O
for	O
(	O
more	int
=	O
1	int
,	O
incells	int
=	O
0	int
;	O
more	int
;	O
incells	int
++	O
)	O
{	O
more	int
=	O
step	()->(int)
(	O
)	O
;	O
if	O
(	O
dap_newpart	(array(int),int)->(int)
(	O
markv	array(int)
,	O
nmark	int
)	O
)	O
{	O
dap_swap	()->(void)
(	O
)	O
;	O
dap_head	(array(int),int)->(void)
(	O
markv	array(int)
,	O
nmark	int
)	O
;	O
dap_swap	()->(void)
(	O
)	O
;	O
dap_rewind	()->(void)
(	O
)	O
;	O
putlev	(*(int),*(int),int,*(*(*(char))))->(void)
(	O
nlevels	*(int)
,	O
varv	array(int)
,	O
nvars	int
,	O
levval	*(*(char))
)	O
;	O
eff1	(int,*(*(*(char))),*(int),*(int),int,*(char),int,int,int)->(void)
(	O
incells	int
,	O
levval	*(*(char))
,	O
nlevels	*(int)
,	O
varv	array(int)
,	O
nvars	int
,	O
termv	*(char)
,	O
nterm	int
,	O
typen	int
,	O
termn	int
)	O
;	O
for	O
(	O
v	int
=	O
1	int
;	O
v	int
<	O
nvars	int
;	O
v	int
++	O
)	O
{	O
nlevels	*(int)
[	O
v	int
]	O
=	O
0	int
;	O
for	O
(	O
l	int
=	O
0	int
;	O
l	int
<	O
dap_maxlev	int
;	O
l	int
++	O
)	O
levval	*(*(char))
[	O
v	int
]	O
[	O
l	int
]	O
[	O
0	int
]	O
=	O
'\0'	O
;	O
}	O
incells	int
=	O
0	int
;	O
dap_mark	()->(void)
(	O
)	O
;	O
more	int
=	O
step	()->(int)
(	O
)	O
;	O
}	O
if	O
(	O
more	int
)	O
{	O
for	O
(	O
v	int
=	O
1	int
;	O
v	int
<	O
nvars	int
;	O
v	int
++	O
)	O
levn	(*(char),*(*(char)),*(int))->(int)
(	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_str	*(*(char))
[	O
varv	array(int)
[	O
v	int
]	O
]	O
,	O
levval	*(*(char))
[	O
v	int
]	O
,	O
&	O
nlevels	*(int)
[	O
v	int
]	O
)	O
;	O
if	O
(	O
!	O
step	()->(int)
(	O
)	O
||	O
!	O
step	()->(int)
(	O
)	O
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
dap_err	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"(effects) Incomplete cell statistics for: "	*(char)
)	O
;	O
for	O
(	O
v	int
=	O
1	int
;	O
v	int
<	O
nvars	int
;	O
v	int
++	O
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
dap_err	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s (%s) "	*(char)
,	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_nam	*(*(char))
[	O
varv	array(int)
[	O
v	int
]	O
]	O
,	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_str	*(*(char))
[	O
varv	array(int)
[	O
v	int
]	O
]	O
)	O
;	O
}	O
putc	(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
'\n'	O
,	O
dap_err	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
}	O
}	O
if	O
(	O
model	*(char)
&&	O
model	*(char)
[	O
0	int
]	O
)	O
ftest	(*(char),*(char),*(char),*(char),*(char))->(void)
(	O
conname	*(char)
,	O
varlist	array(char)
,	O
""	*(char)
,	O
""	*(char)
,	O
marks	array(char)
)	O
;	O
dap_free	(*(void),*(char))->(void)
(	O
conname	*(char)
,	O
""	*(char)
)	O
;	O
dap_free	(*(void),*(char))->(void)
(	O
outlist	*(char)
,	O
""	*(char)
)	O
;	O
dap_free	(*(void),*(char))->(void)
(	O
varv	array(int)
,	O
""	*(char)
)	O
;	O
dap_free	(*(void),*(char))->(void)
(	O
markv	array(int)
,	O
""	*(char)
)	O
;	O
dap_free	(*(void),*(char))->(void)
(	O
termv	*(char)
,	O
""	*(char)
)	O
;	O
dap_free	(*(void),*(char))->(void)
(	O
levval	*(*(char))
,	O
""	*(char)
)	O
;	O
dap_free	(*(void),*(char))->(void)
(	O
nlevels	*(int)
,	O
""	*(char)
)	O
;	O
dap_free	(*(void),*(char))->(void)
(	O
levmem	*(char)
,	O
""	*(char)
)	O
;	O
dap_free	(*(void),*(char))->(void)
(	O
levptr	*(*(char))
,	O
""	*(char)
)	O
;	O
}	O
static	O
void	O
lsmeans1	(int,double,*(*(double)),int,double,double,int,int,*(double),*(double),*(double),int,*(*(char)),int,int,int,int,int,int,int,int)->(void)
(	O
int	O
methn	int
,	O
double	O
alpha	double
,	O
double	O
*	O
*	O
coeff	*(*(double))
,	O
int	O
ncells	int
,	O
double	O
err	int
,	O
double	O
dedfi	double
,	O
int	O
nerrors	int
,	O
int	O
nlsmeans	int
,	O
double	O
*	O
mean	*(double)
,	O
double	O
*	O
vari	*(double)
,	O
double	O
*	O
nobs	array(double)
,	O
int	O
nlevels	*(int)
,	O
char	O
*	O
*	O
levval	*(*(char))
,	O
int	O
respn	int
,	O
int	O
treatn	int
,	O
int	O
resp2n	int
,	O
int	O
treat2n	int
,	O
int	O
typen	int
,	O
int	O
statn	int
,	O
int	O
lsm1	int
,	O
int	O
lsm2	int
)	O
{	O
int	O
l1	int
,	O
l2	int
;	O
int	O
lsrow	int
;	O
double	O
tmp	double
;	O
double	O
n	int
;	O
int	O
cr	int
,	O
cc	int
;	O
int	O
*	O
indep	*(int)
;	O
double	O
sumwt	double
;	O
double	O
*	O
lsmean	*(double)
;	O
double	O
*	O
effinvn	*(double)
;	O
double	O
effin	double
;	O
double	O
*	O
diffmem	*(double)
;	O
double	O
*	O
*	O
diff	*(*(double))
;	O
double	O
*	O
probmem	*(double)
;	O
double	O
*	O
*	O
prob	*(*(double))
;	O
double	O
pt	double
,	O
pr	double
;	O
int	O
edfi	int
;	O
double	O
dfdown	double
,	O
dfup	double
;	O
double	O
pdown	double
,	O
pup	double
;	O
pt	double
=	O
0.0	int
;	O
dap_swap	()->(void)
(	O
)	O
;	O
indep	*(int)
=	O
(	O
int	O
*	O
)	O
dap_malloc	(int,*(char))->(*(char))
(	O
sizeof	O
(	O
int	O
)	O
*	O
ncells	int
,	O
""	*(char)
)	O
;	O
lsmean	*(double)
=	O
(	O
double	O
*	O
)	O
dap_malloc	(int,*(char))->(*(char))
(	O
sizeof	O
(	O
double	O
)	O
*	O
nlevels	*(int)
,	O
""	*(char)
)	O
;	O
effinvn	*(double)
=	O
(	O
double	O
*	O
)	O
dap_malloc	(int,*(char))->(*(char))
(	O
sizeof	O
(	O
double	O
)	O
*	O
nlevels	*(int)
,	O
""	*(char)
)	O
;	O
diffmem	*(double)
=	O
(	O
double	O
*	O
)	O
dap_malloc	(int,*(char))->(*(char))
(	O
sizeof	O
(	O
double	O
)	O
*	O
nlevels	*(int)
*	O
nlevels	*(int)
,	O
""	*(char)
)	O
;	O
probmem	*(double)
=	O
(	O
double	O
*	O
)	O
dap_malloc	(int,*(char))->(*(char))
(	O
sizeof	O
(	O
double	O
)	O
*	O
nlevels	*(int)
*	O
nlevels	*(int)
,	O
""	*(char)
)	O
;	O
diff	*(*(double))
=	O
(	O
double	O
*	O
*	O
)	O
dap_malloc	(int,*(char))->(*(char))
(	O
sizeof	O
(	O
double	O
*	O
)	O
*	O
nlevels	*(int)
,	O
""	*(char)
)	O
;	O
prob	*(*(double))
=	O
(	O
double	O
*	O
*	O
)	O
dap_malloc	(int,*(char))->(*(char))
(	O
sizeof	O
(	O
double	O
*	O
)	O
*	O
nlevels	*(int)
,	O
""	*(char)
)	O
;	O
for	O
(	O
l1	int
=	O
0	int
;	O
l1	int
<	O
nlevels	*(int)
;	O
l1	int
++	O
)	O
{	O
diff	*(*(double))
[	O
l1	int
]	O
=	O
diffmem	*(double)
+	O
l1	int
*	O
nlevels	*(int)
;	O
prob	*(*(double))
[	O
l1	int
]	O
=	O
probmem	*(double)
+	O
l1	int
*	O
nlevels	*(int)
;	O
}	O
sumcheck	(array(char),*(*(double)),int,int,int,*(int))->(void)
(	O
"lsmeans1"	*(char)
,	O
coeff	*(*(double))
,	O
ncells	int
,	O
nerrors	int
,	O
0	int
,	O
NULL	O
)	O
;	O
for	O
(	O
cr	int
=	O
0	int
;	O
cr	int
<	O
nerrors	int
+	O
nlsmeans	int
;	O
cr	int
++	O
)	O
indep	*(int)
[	O
cr	int
]	O
=	O
0	int
;	O
lsrow	int
=	O
orthog	(*(*(double)),int,int,int,int,*(double),*(int),*(int))->(int)
(	O
coeff	*(*(double))
,	O
0	int
,	O
nerrors	int
+	O
nlevels	*(int)
-	O
1	int
,	O
nerrors	int
+	O
nlevels	*(int)
-	O
1	int
,	O
ncells	int
,	O
nobs	array(double)
,	O
indep	*(int)
,	O
NULL	O
)	O
;	O
if	O
(	O
lsrow	int
-	O
nerrors	int
!=	O
nlevels	*(int)
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
dap_err	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"(lsmeans1) Number of independent LS means %d differs from number of levels %d\n"	*(char)
,	O
lsrow	int
-	O
nerrors	int
,	O
nlevels	*(int)
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
for	O
(	O
cc	int
=	O
0	int
,	O
n	int
=	O
0.0	int
;	O
cc	int
<	O
ncells	int
;	O
cc	int
++	O
)	O
n	int
+=	O
nobs	array(double)
[	O
cc	int
]	O
;	O
for	O
(	O
l1	int
=	O
0	int
,	O
effin	double
=	O
0.0	int
;	O
l1	int
<	O
nlevels	*(int)
;	O
l1	int
++	O
)	O
{	O
for	O
(	O
cc	int
=	O
0	int
,	O
lsmean	*(double)
[	O
l1	int
]	O
=	O
0.0	int
,	O
effinvn	*(double)
[	O
l1	int
]	O
=	O
0.0	int
,	O
sumwt	double
=	O
0.0	int
;	O
cc	int
<	O
ncells	int
;	O
cc	int
++	O
)	O
{	O
tmp	double
=	O
coeff	*(*(double))
[	O
nerrors	int
+	O
l1	int
]	O
[	O
cc	int
]	O
;	O
lsmean	*(double)
[	O
l1	int
]	O
+=	O
tmp	double
*	O
mean	*(double)
[	O
cc	int
]	O
;	O
sumwt	double
+=	O
tmp	double
;	O
effinvn	*(double)
[	O
l1	int
]	O
+=	O
tmp	double
*	O
tmp	double
/	O
nobs	array(double)
[	O
cc	int
]	O
;	O
}	O
lsmean	*(double)
[	O
l1	int
]	O
/=	O
sumwt	double
;	O
effinvn	*(double)
[	O
l1	int
]	O
/=	O
(	O
sumwt	double
*	O
sumwt	double
)	O
;	O
effin	double
+=	O
effinvn	*(double)
[	O
l1	int
]	O
;	O
}	O
effin	double
/=	O
(	O
double	O
)	O
nlevels	*(int)
;	O
putc	(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
'\n'	O
,	O
dap_lst	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_str	*(*(char))
[	O
typen	int
]	O
,	O
"EFFN"	*(char)
)	O
;	O
for	O
(	O
l1	int
=	O
0	int
;	O
l1	int
<	O
nlevels	*(int)
;	O
l1	int
++	O
)	O
{	O
strcpy	(*(char),*(char))->(*(char))
(	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_str	*(*(char))
[	O
treatn	int
]	O
,	O
levval	*(*(char))
[	O
l1	int
]	O
)	O
;	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_dbl	*(double)
[	O
respn	int
]	O
=	O
1.0	int
/	O
effinvn	*(double)
[	O
l1	int
]	O
;	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_dbl	*(double)
[	O
resp2n	int
]	O
=	O
1.0	int
/	O
effinvn	*(double)
[	O
l1	int
]	O
;	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_dbl	*(double)
[	O
statn	int
]	O
=	O
1.0	int
/	O
effinvn	*(double)
[	O
l1	int
]	O
;	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_dbl	*(double)
[	O
lsm1	int
]	O
=	O
lsmean	*(double)
[	O
l1	int
]	O
;	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_dbl	*(double)
[	O
lsm2	int
]	O
=	O
0.0	int
;	O
output	()->(void)
(	O
)	O
;	O
}	O
dfdown	double
=	O
floor	(double)->(double)
(	O
dedfi	double
)	O
;	O
dfup	double
=	O
ceil	(double)->(double)
(	O
dedfi	double
)	O
;	O
edfi	int
=	O
(	O
int	O
)	O
dfdown	double
;	O
if	O
(	O
methn	int
==	O
TUKEY	int
||	O
methn	int
==	O
LSD	int
)	O
{	O
pr	double
=	O
-	O
1.0	int
;	O
for	O
(	O
l1	int
=	O
0	int
;	O
l1	int
<	O
nlevels	*(int)
;	O
l1	int
++	O
)	O
{	O
for	O
(	O
l2	int
=	O
0	int
;	O
l2	int
<	O
nlevels	*(int)
;	O
l2	int
++	O
)	O
{	O
if	O
(	O
l2	int
==	O
l1	int
)	O
{	O
diff	*(*(double))
[	O
l1	int
]	O
[	O
l2	int
]	O
=	O
0.0	int
;	O
prob	*(*(double))
[	O
l1	int
]	O
[	O
l2	int
]	O
=	O
1.0	int
;	O
}	O
else	O
if	O
(	O
methn	int
==	O
TUKEY	int
)	O
{	O
diff	*(*(double))
[	O
l1	int
]	O
[	O
l2	int
]	O
=	O
(	O
lsmean	*(double)
[	O
l1	int
]	O
-	O
lsmean	*(double)
[	O
l2	int
]	O
)	O
/	O
sqrt	(double)->(double)
(	O
err	int
*	O
0.5	int
*	O
(	O
effinvn	*(double)
[	O
l1	int
]	O
+	O
effinvn	*(double)
[	O
l2	int
]	O
)	O
)	O
;	O
diff	*(*(double))
[	O
l2	int
]	O
[	O
l1	int
]	O
=	O
-	O
diff	*(*(double))
[	O
l1	int
]	O
[	O
l2	int
]	O
;	O
if	O
(	O
dfdown	double
==	O
dfup	double
)	O
prob	*(*(double))
[	O
l1	int
]	O
[	O
l2	int
]	O
=	O
dap_sr	(int,int,double)->(double)
(	O
nlevels	*(int)
,	O
edfi	int
,	O
fabs	(double)->(double)
(	O
diff	*(*(double))
[	O
l1	int
]	O
[	O
l2	int
]	O
)	O
)	O
;	O
else	O
{	O
pdown	double
=	O
dap_sr	(int,int,double)->(double)
(	O
nlevels	*(int)
,	O
edfi	int
,	O
fabs	(double)->(double)
(	O
diff	*(*(double))
[	O
l1	int
]	O
[	O
l2	int
]	O
)	O
)	O
;	O
pup	double
=	O
dap_sr	(int,int,double)->(double)
(	O
nlevels	*(int)
,	O
(	O
int	O
)	O
dfup	double
,	O
fabs	(double)->(double)
(	O
diff	*(*(double))
[	O
l1	int
]	O
[	O
l2	int
]	O
)	O
)	O
;	O
prob	*(*(double))
[	O
l1	int
]	O
[	O
l2	int
]	O
=	O
pdown	double
+	O
(	O
dedfi	double
-	O
dfdown	double
)	O
/	O
(	O
dfup	double
-	O
dfdown	double
)	O
*	O
(	O
pup	double
-	O
pdown	double
)	O
;	O
}	O
prob	*(*(double))
[	O
l2	int
]	O
[	O
l1	int
]	O
=	O
prob	*(*(double))
[	O
l1	int
]	O
[	O
l2	int
]	O
;	O
}	O
else	O
{	O
diff	*(*(double))
[	O
l1	int
]	O
[	O
l2	int
]	O
=	O
(	O
lsmean	*(double)
[	O
l1	int
]	O
-	O
lsmean	*(double)
[	O
l2	int
]	O
)	O
/	O
sqrt	(double)->(double)
(	O
err	int
*	O
(	O
effinvn	*(double)
[	O
l1	int
]	O
+	O
effinvn	*(double)
[	O
l2	int
]	O
)	O
)	O
;	O
diff	*(*(double))
[	O
l2	int
]	O
[	O
l1	int
]	O
=	O
-	O
diff	*(*(double))
[	O
l1	int
]	O
[	O
l2	int
]	O
;	O
if	O
(	O
dfdown	double
==	O
dfup	double
)	O
prob	*(*(double))
[	O
l1	int
]	O
[	O
l2	int
]	O
=	O
2.0	int
*	O
probt	(double,int)->(double)
(	O
fabs	(double)->(double)
(	O
diff	*(*(double))
[	O
l1	int
]	O
[	O
l2	int
]	O
)	O
,	O
edfi	int
)	O
;	O
else	O
{	O
pdown	double
=	O
probt	(double,int)->(double)
(	O
fabs	(double)->(double)
(	O
diff	*(*(double))
[	O
l1	int
]	O
[	O
l2	int
]	O
)	O
,	O
edfi	int
)	O
;	O
pup	double
=	O
probt	(double,int)->(double)
(	O
fabs	(double)->(double)
(	O
diff	*(*(double))
[	O
l1	int
]	O
[	O
l2	int
]	O
)	O
,	O
(	O
int	O
)	O
dfup	double
)	O
;	O
prob	*(*(double))
[	O
l1	int
]	O
[	O
l2	int
]	O
=	O
2.0	int
*	O
(	O
pdown	double
+	O
(	O
dedfi	double
-	O
dfdown	double
)	O
/	O
(	O
dfup	double
-	O
dfdown	double
)	O
*	O
(	O
pup	double
-	O
pdown	double
)	O
)	O
;	O
}	O
prob	*(*(double))
[	O
l2	int
]	O
[	O
l1	int
]	O
=	O
prob	*(*(double))
[	O
l1	int
]	O
[	O
l2	int
]	O
;	O
}	O
if	O
(	O
pr	double
<	O
0.0	int
||	O
fabs	(double)->(double)
(	O
prob	*(*(double))
[	O
l1	int
]	O
[	O
l2	int
]	O
-	O
alpha	double
)	O
<	O
fabs	(double)->(double)
(	O
pr	double
-	O
alpha	double
)	O
)	O
{	O
pt	double
=	O
fabs	(double)->(double)
(	O
diff	*(*(double))
[	O
l1	int
]	O
[	O
l2	int
]	O
)	O
;	O
pr	double
=	O
prob	*(*(double))
[	O
l1	int
]	O
[	O
l2	int
]	O
;	O
}	O
}	O
}	O
for	O
(	O
l1	int
=	O
0	int
;	O
l1	int
<	O
nlevels	*(int)
;	O
l1	int
++	O
)	O
{	O
strcpy	(*(char),*(char))->(*(char))
(	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_str	*(*(char))
[	O
treatn	int
]	O
,	O
levval	*(*(char))
[	O
l1	int
]	O
)	O
;	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_dbl	*(double)
[	O
respn	int
]	O
=	O
lsmean	*(double)
[	O
l1	int
]	O
;	O
for	O
(	O
l2	int
=	O
0	int
;	O
l2	int
<	O
nlevels	*(int)
;	O
l2	int
++	O
)	O
{	O
if	O
(	O
l2	int
==	O
l1	int
)	O
continue	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_str	*(*(char))
[	O
treat2n	int
]	O
,	O
levval	*(*(char))
[	O
l2	int
]	O
)	O
;	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_dbl	*(double)
[	O
resp2n	int
]	O
=	O
lsmean	*(double)
[	O
l2	int
]	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_str	*(*(char))
[	O
typen	int
]	O
,	O
"LSMDIFF"	*(char)
)	O
;	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_dbl	*(double)
[	O
statn	int
]	O
=	O
lsmean	*(double)
[	O
l1	int
]	O
-	O
lsmean	*(double)
[	O
l2	int
]	O
;	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_dbl	*(double)
[	O
lsm1	int
]	O
=	O
lsmean	*(double)
[	O
l1	int
]	O
;	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_dbl	*(double)
[	O
lsm2	int
]	O
=	O
lsmean	*(double)
[	O
l2	int
]	O
;	O
output	()->(void)
(	O
)	O
;	O
if	O
(	O
methn	int
==	O
TUKEY	int
)	O
{	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_dbl	*(double)
[	O
resp2n	int
]	O
=	O
lsmean	*(double)
[	O
l2	int
]	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_str	*(*(char))
[	O
typen	int
]	O
,	O
"MINDIFF"	*(char)
)	O
;	O
if	O
(	O
dfdown	double
==	O
dfup	double
)	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_dbl	*(double)
[	O
statn	int
]	O
=	O
dap_srpt	(int,int,double,double,double)->(double)
(	O
nlevels	*(int)
,	O
edfi	int
,	O
pt	double
,	O
pr	double
,	O
alpha	double
)	O
*	O
sqrt	(double)->(double)
(	O
err	int
*	O
0.5	int
*	O
(	O
effinvn	*(double)
[	O
l1	int
]	O
+	O
effinvn	*(double)
[	O
l2	int
]	O
)	O
)	O
;	O
else	O
{	O
pdown	double
=	O
dap_srpt	(int,int,double,double,double)->(double)
(	O
nlevels	*(int)
,	O
edfi	int
,	O
pt	double
,	O
pr	double
,	O
alpha	double
)	O
;	O
pup	double
=	O
dap_srpt	(int,int,double,double,double)->(double)
(	O
nlevels	*(int)
,	O
(	O
int	O
)	O
dfup	double
,	O
pt	double
,	O
pr	double
,	O
alpha	double
)	O
;	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_dbl	*(double)
[	O
statn	int
]	O
=	O
(	O
pdown	double
+	O
(	O
dedfi	double
-	O
dfdown	double
)	O
/	O
(	O
dfup	double
-	O
dfdown	double
)	O
*	O
(	O
pup	double
-	O
pdown	double
)	O
)	O
*	O
sqrt	(double)->(double)
(	O
err	int
*	O
0.5	int
*	O
(	O
effinvn	*(double)
[	O
l1	int
]	O
+	O
effinvn	*(double)
[	O
l2	int
]	O
)	O
)	O
;	O
}	O
output	()->(void)
(	O
)	O
;	O
}	O
else	O
{	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_dbl	*(double)
[	O
resp2n	int
]	O
=	O
lsmean	*(double)
[	O
l2	int
]	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_str	*(*(char))
[	O
typen	int
]	O
,	O
"MINDIFF"	*(char)
)	O
;	O
if	O
(	O
dfdown	double
==	O
dfup	double
)	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_dbl	*(double)
[	O
statn	int
]	O
=	O
tpoint	(double,int)->(double)
(	O
alpha	double
/	O
2.0	int
,	O
edfi	int
)	O
*	O
sqrt	(double)->(double)
(	O
err	int
*	O
(	O
effinvn	*(double)
[	O
l1	int
]	O
+	O
effinvn	*(double)
[	O
l2	int
]	O
)	O
)	O
;	O
else	O
{	O
pdown	double
=	O
tpoint	(double,int)->(double)
(	O
alpha	double
/	O
2.0	int
,	O
edfi	int
)	O
;	O
pup	double
=	O
tpoint	(double,int)->(double)
(	O
alpha	double
/	O
2.0	int
,	O
(	O
int	O
)	O
dfup	double
)	O
;	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_dbl	*(double)
[	O
statn	int
]	O
=	O
(	O
pdown	double
+	O
(	O
dedfi	double
-	O
dfdown	double
)	O
/	O
(	O
dfup	double
-	O
dfdown	double
)	O
*	O
(	O
pup	double
-	O
pdown	double
)	O
)	O
*	O
sqrt	(double)->(double)
(	O
err	int
*	O
(	O
effinvn	*(double)
[	O
l1	int
]	O
+	O
effinvn	*(double)
[	O
l2	int
]	O
)	O
)	O
;	O
}	O
output	()->(void)
(	O
)	O
;	O
}	O
strcpy	(*(char),*(char))->(*(char))
(	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_str	*(*(char))
[	O
typen	int
]	O
,	O
"PROB"	*(char)
)	O
;	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_dbl	*(double)
[	O
statn	int
]	O
=	O
prob	*(*(double))
[	O
l1	int
]	O
[	O
l2	int
]	O
;	O
output	()->(void)
(	O
)	O
;	O
}	O
}	O
}	O
else	O
{	O
pr	double
=	O
-	O
1.0	int
;	O
for	O
(	O
l2	int
=	O
1	int
;	O
l2	int
<	O
nlevels	*(int)
;	O
l2	int
++	O
)	O
{	O
diff	*(*(double))
[	O
0	int
]	O
[	O
l2	int
]	O
=	O
(	O
lsmean	*(double)
[	O
l2	int
]	O
-	O
lsmean	*(double)
[	O
0	int
]	O
)	O
/	O
sqrt	(double)->(double)
(	O
err	int
*	O
effin	double
)	O
;	O
if	O
(	O
dfdown	double
==	O
dfup	double
)	O
prob	*(*(double))
[	O
0	int
]	O
[	O
l2	int
]	O
=	O
dap_md	(int,int,double)->(double)
(	O
nlevels	*(int)
-	O
1	int
,	O
edfi	int
,	O
fabs	(double)->(double)
(	O
diff	*(*(double))
[	O
0	int
]	O
[	O
l2	int
]	O
)	O
)	O
;	O
else	O
{	O
pdown	double
=	O
dap_md	(int,int,double)->(double)
(	O
nlevels	*(int)
-	O
1	int
,	O
edfi	int
,	O
fabs	(double)->(double)
(	O
diff	*(*(double))
[	O
0	int
]	O
[	O
l2	int
]	O
)	O
)	O
;	O
pup	double
=	O
dap_md	(int,int,double)->(double)
(	O
nlevels	*(int)
-	O
1	int
,	O
(	O
int	O
)	O
dfup	double
,	O
fabs	(double)->(double)
(	O
diff	*(*(double))
[	O
0	int
]	O
[	O
l2	int
]	O
)	O
)	O
;	O
prob	*(*(double))
[	O
l1	int
]	O
[	O
l2	int
]	O
=	O
pdown	double
+	O
(	O
dedfi	double
-	O
dfdown	double
)	O
/	O
(	O
dfup	double
-	O
dfdown	double
)	O
*	O
(	O
pup	double
-	O
pdown	double
)	O
;	O
}	O
if	O
(	O
pr	double
<	O
0.0	int
||	O
fabs	(double)->(double)
(	O
prob	*(*(double))
[	O
0	int
]	O
[	O
l2	int
]	O
-	O
alpha	double
)	O
<	O
fabs	(double)->(double)
(	O
pr	double
-	O
alpha	double
)	O
)	O
{	O
pt	double
=	O
fabs	(double)->(double)
(	O
diff	*(*(double))
[	O
0	int
]	O
[	O
l2	int
]	O
)	O
;	O
pr	double
=	O
prob	*(*(double))
[	O
0	int
]	O
[	O
l2	int
]	O
;	O
}	O
strcpy	(*(char),*(char))->(*(char))
(	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_str	*(*(char))
[	O
treat2n	int
]	O
,	O
levval	*(*(char))
[	O
0	int
]	O
)	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_str	*(*(char))
[	O
treatn	int
]	O
,	O
levval	*(*(char))
[	O
l2	int
]	O
)	O
;	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_dbl	*(double)
[	O
respn	int
]	O
=	O
lsmean	*(double)
[	O
l2	int
]	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_str	*(*(char))
[	O
typen	int
]	O
,	O
"LSMDIFF"	*(char)
)	O
;	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_dbl	*(double)
[	O
statn	int
]	O
=	O
lsmean	*(double)
[	O
l2	int
]	O
-	O
lsmean	*(double)
[	O
0	int
]	O
;	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_dbl	*(double)
[	O
lsm1	int
]	O
=	O
lsmean	*(double)
[	O
l2	int
]	O
;	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_dbl	*(double)
[	O
lsm2	int
]	O
=	O
lsmean	*(double)
[	O
0	int
]	O
;	O
output	()->(void)
(	O
)	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_str	*(*(char))
[	O
typen	int
]	O
,	O
"PROB"	*(char)
)	O
;	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_dbl	*(double)
[	O
statn	int
]	O
=	O
prob	*(*(double))
[	O
0	int
]	O
[	O
l2	int
]	O
;	O
output	()->(void)
(	O
)	O
;	O
}	O
}	O
switch	O
(	O
methn	int
)	O
{	O
case	O
TUKEY	int
:	O
fputs	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
"Tukey method\n\n"	*(char)
,	O
dap_lst	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
dap_lst	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"Minimum significant differences are for level %.5f\n"	*(char)
,	O
alpha	double
)	O
;	O
break	O
;	O
case	O
LSD	int
:	O
fputs	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
"LSD  method\n"	*(char)
,	O
dap_lst	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
dap_lst	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"Minimum significant differences are for level %.5f\n"	*(char)
,	O
alpha	double
)	O
;	O
break	O
;	O
case	O
DUNNETT	int
:	O
pt	double
=	O
dap_mdpt	(int,int,double,double,double)->(double)
(	O
nlevels	*(int)
,	O
edfi	int
,	O
pt	double
,	O
pr	double
,	O
alpha	double
)	O
*	O
sqrt	(double)->(double)
(	O
err	int
*	O
effin	double
)	O
;	O
fputs	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
"Dunnett method\n"	*(char)
,	O
dap_lst	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
dap_lst	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"At level %.5f, minimum significant difference = %.6g\n"	*(char)
,	O
alpha	double
,	O
pt	double
)	O
;	O
break	O
;	O
}	O
dap_free	(*(void),*(char))->(void)
(	O
indep	*(int)
,	O
""	*(char)
)	O
;	O
dap_free	(*(void),*(char))->(void)
(	O
lsmean	*(double)
,	O
""	*(char)
)	O
;	O
dap_free	(*(void),*(char))->(void)
(	O
effinvn	*(double)
,	O
""	*(char)
)	O
;	O
dap_free	(*(void),*(char))->(void)
(	O
diffmem	*(double)
,	O
""	*(char)
)	O
;	O
dap_free	(*(void),*(char))->(void)
(	O
diff	*(*(double))
,	O
""	*(char)
)	O
;	O
dap_free	(*(void),*(char))->(void)
(	O
probmem	*(double)
,	O
""	*(char)
)	O
;	O
dap_free	(*(void),*(char))->(void)
(	O
prob	*(*(double))
,	O
""	*(char)
)	O
;	O
dap_swap	()->(void)
(	O
)	O
;	O
}	O
void	O
lsmeans	(*(char),*(char),double,*(char),*(char),*(char),*(char))->(void)
(	O
char	O
*	O
fname	array(char)
,	O
char	O
*	O
method	*(char)
,	O
double	O
alpha	double
,	O
char	O
*	O
varlist	array(char)
,	O
char	O
*	O
treat	*(char)
,	O
char	O
*	O
marks	array(char)
,	O
char	O
*	O
format	array(char)
)	O
{	O
int	O
typen	int
;	O
int	O
*	O
varv	array(int)
;	O
int	O
*	O
markv	array(int)
;	O
int	O
nmark	int
;	O
int	O
r	double
;	O
char	O
*	O
lsmname	*(char)
;	O
char	O
*	O
lsmsrt	*(char)
;	O
char	O
*	O
varstr	*(char)
;	O
char	O
*	O
treat2	*(char)
;	O
char	O
*	O
args1	*(char)
;	O
char	O
*	O
args2	*(char)
;	O
int	O
treatn	int
;	O
int	O
treat2n	int
;	O
int	O
resp2n	int
;	O
int	O
statn	int
;	O
int	O
methn	int
;	O
char	O
*	O
levmem	*(char)
;	O
char	O
*	O
*	O
levval	*(*(char))
;	O
int	O
l	int
;	O
static	O
int	O
nlevels	*(int)
;	O
double	O
*	O
comem	*(double)
;	O
double	O
*	O
*	O
coeff	*(*(double))
;	O
int	O
gotm	int
,	O
gotn	int
,	O
gotv	int
;	O
double	O
*	O
mean	*(double)
;	O
double	O
*	O
nobs	array(double)
;	O
double	O
*	O
vari	*(double)
;	O
int	O
s	int
;	O
int	O
ncells	int
;	O
int	O
nerrors	int
;	O
int	O
nlsmeans	int
;	O
int	O
morecells	int
;	O
int	O
more	int
;	O
int	O
err	int
;	O
int	O
con	int
;	O
double	O
mse	double
;	O
double	O
edf	double
;	O
int	O
lsm1	int
,	O
lsm2	int
;	O
mse	double
=	O
0.0	int
;	O
edf	double
=	O
0.0	int
;	O
if	O
(	O
!	O
fname	array(char)
||	O
!	O
fname	array(char)
[	O
0	int
]	O
)	O
{	O
fputs	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
"(lsmeans) no dataset name given.\n"	*(char)
,	O
dap_err	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
lsmname	*(char)
=	O
dap_malloc	(int,*(char))->(*(char))
(	O
strlen	(*(char))->(long)
(	O
fname	array(char)
)	O
+	O
5	int
,	O
fname	array(char)
)	O
;	O
dap_suffix	(array(char),array(char),array(char))->(void)
(	O
lsmname	*(char)
,	O
fname	array(char)
,	O
".lsm"	*(char)
)	O
;	O
lsmsrt	*(char)
=	O
dap_malloc	(int,*(char))->(*(char))
(	O
strlen	(*(char))->(long)
(	O
lsmname	*(char)
)	O
+	O
5	int
,	O
lsmname	*(char)
)	O
;	O
dap_suffix	(array(char),array(char),array(char))->(void)
(	O
lsmsrt	*(char)
,	O
lsmname	*(char)
,	O
".srt"	*(char)
)	O
;	O
varv	array(int)
=	O
(	O
int	O
*	O
)	O
dap_malloc	(int,*(char))->(*(char))
(	O
sizeof	O
(	O
int	O
)	O
*	O
(	O
dap_maxtreat	int
+	O
1	int
)	O
,	O
"dap_maxtreat"	*(char)
)	O
;	O
markv	array(int)
=	O
(	O
int	O
*	O
)	O
dap_malloc	(int,*(char))->(*(char))
(	O
sizeof	O
(	O
int	O
)	O
*	O
dap_maxvar	int
,	O
"dap_maxvar"	*(char)
)	O
;	O
levmem	*(char)
=	O
dap_malloc	(int,*(char))->(*(char))
(	O
dap_maxlev	int
*	O
(	O
dap_strlen	int
+	O
1	int
)	O
,	O
"dap_maxlev, dap_strlen"	*(char)
)	O
;	O
levval	*(*(char))
=	O
(	O
char	O
*	O
*	O
)	O
dap_malloc	(int,*(char))->(*(char))
(	O
sizeof	O
(	O
char	O
*	O
)	O
*	O
dap_maxlev	int
,	O
"dap_maxlev"	*(char)
)	O
;	O
for	O
(	O
l	int
=	O
0	int
;	O
l	int
<	O
dap_maxlev	int
;	O
l	int
++	O
)	O
levval	*(*(char))
[	O
l	int
]	O
=	O
levmem	*(char)
+	O
l	int
*	O
(	O
dap_strlen	int
+	O
1	int
)	O
;	O
comem	*(double)
=	O
(	O
double	O
*	O
)	O
dap_malloc	(int,*(char))->(*(char))
(	O
sizeof	O
(	O
double	O
)	O
*	O
dap_maxcell	int
*	O
dap_maxcell	int
,	O
"dap_maxcell"	*(char)
)	O
;	O
coeff	*(*(double))
=	O
(	O
double	O
*	O
*	O
)	O
dap_malloc	(int,*(char))->(*(char))
(	O
sizeof	O
(	O
double	O
*	O
)	O
*	O
dap_maxcell	int
,	O
"dap_maxcell"	*(char)
)	O
;	O
for	O
(	O
ncells	int
=	O
0	int
;	O
ncells	int
<	O
dap_maxcell	int
;	O
ncells	int
++	O
)	O
coeff	*(*(double))
[	O
ncells	int
]	O
=	O
comem	*(double)
+	O
ncells	int
*	O
dap_maxcell	int
;	O
mean	*(double)
=	O
(	O
double	O
*	O
)	O
dap_malloc	(int,*(char))->(*(char))
(	O
sizeof	O
(	O
double	O
)	O
*	O
dap_maxcell	int
,	O
"dap_maxcell"	*(char)
)	O
;	O
nobs	array(double)
=	O
(	O
double	O
*	O
)	O
dap_malloc	(int,*(char))->(*(char))
(	O
sizeof	O
(	O
double	O
)	O
*	O
dap_maxcell	int
,	O
"dap_maxcell"	*(char)
)	O
;	O
vari	*(double)
=	O
(	O
double	O
*	O
)	O
dap_malloc	(int,*(char))->(*(char))
(	O
sizeof	O
(	O
double	O
)	O
*	O
dap_maxcell	int
,	O
"dap_maxcell"	*(char)
)	O
;	O
inset	(array(char))->(void)
(	O
fname	array(char)
)	O
;	O
if	O
(	O
!	O
varlist	array(char)
||	O
!	O
varlist	array(char)
[	O
0	int
]	O
)	O
{	O
fputs	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
"(lsmeans) no variable list given.\n"	*(char)
,	O
dap_err	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
dap_list	(array(char),array(int),int)->(int)
(	O
varlist	array(char)
,	O
varv	array(int)
,	O
dap_maxtreat	int
+	O
1	int
)	O
;	O
if	O
(	O
!	O
treat	*(char)
||	O
!	O
treat	*(char)
[	O
0	int
]	O
)	O
{	O
fputs	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
"(lsmeans) no treatments specified.\n"	*(char)
,	O
dap_err	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
if	O
(	O
(	O
treatn	int
=	O
dap_varnum	(array(char))->(int)
(	O
treat	*(char)
)	O
)	O
<	O
0	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
dap_err	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"(lsmeans) Treatment variable unknown: %s\n"	*(char)
,	O
treat	*(char)
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
treat2	*(char)
=	O
dap_malloc	(int,*(char))->(*(char))
(	O
strlen	(*(char))->(long)
(	O
treat	*(char)
)	O
+	O
2	int
,	O
treat	*(char)
)	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
treat2	*(char)
,	O
"_"	*(char)
)	O
;	O
strcat	(*(char),*(char))->(*(char))
(	O
treat2	*(char)
,	O
treat	*(char)
)	O
;	O
varstr	*(char)
=	O
dap_malloc	(int,*(char))->(*(char))
(	O
strlen	(*(char))->(long)
(	O
treat2	*(char)
)	O
+	O
strlen	(*(char))->(long)
(	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_nam	*(*(char))
[	O
varv	array(int)
[	O
0	int
]	O
]	O
)	O
+	O
10	int
,	O
""	*(char)
)	O
;	O
sprintf	(*(char),*(char))->(int)
(	O
varstr	*(char)
,	O
"%s %d"	*(char)
,	O
treat2	*(char)
,	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_len	*(int)
[	O
treatn	int
]	O
)	O
;	O
treat2n	int
=	O
dap_vd	(array(char),int)->(int)
(	O
varstr	*(char)
,	O
0	int
)	O
;	O
lsm1	int
=	O
dap_vd	(array(char),int)->(int)
(	O
"_lsm_ -1"	*(char)
,	O
0	int
)	O
;	O
lsm2	int
=	O
dap_vd	(array(char),int)->(int)
(	O
"_LSMEAN_ -1"	*(char)
,	O
0	int
)	O
;	O
for	O
(	O
r	double
=	O
0	int
,	O
varstr	*(char)
[	O
0	int
]	O
=	O
'_'	O
;	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_nam	*(*(char))
[	O
varv	array(int)
[	O
0	int
]	O
]	O
[	O
r	double
]	O
;	O
r	double
++	O
)	O
{	O
if	O
(	O
r	double
<	O
dap_namelen	int
-	O
1	int
)	O
varstr	*(char)
[	O
r	double
+	O
1	int
]	O
=	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_nam	*(*(char))
[	O
varv	array(int)
[	O
0	int
]	O
]	O
[	O
r	double
]	O
;	O
}	O
sprintf	(*(char),*(char))->(int)
(	O
varstr	*(char)
+	O
r	double
+	O
1	int
,	O
" %d"	*(char)
,	O
DBL	O
)	O
;	O
resp2n	int
=	O
dap_vd	(array(char),int)->(int)
(	O
varstr	*(char)
,	O
0	int
)	O
;	O
sprintf	(*(char),*(char))->(int)
(	O
varstr	*(char)
,	O
"_stat_ %d"	*(char)
,	O
DBL	O
)	O
;	O
statn	int
=	O
dap_vd	(array(char),int)->(int)
(	O
varstr	*(char)
,	O
0	int
)	O
;	O
if	O
(	O
(	O
typen	int
=	O
dap_varnum	(array(char))->(int)
(	O
"_type_"	*(char)
)	O
)	O
<	O
0	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
dap_err	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"(lsmeans) no _type_ variable\n"	*(char)
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
if	O
(	O
dap_varnum	(array(char))->(int)
(	O
"_term_"	*(char)
)	O
<	O
0	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
dap_err	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"(lsmeans) no _term_ variable\n"	*(char)
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
outset	(array(char),array(char))->(void)
(	O
lsmname	*(char)
,	O
""	*(char)
)	O
;	O
if	O
(	O
!	O
method	*(char)
||	O
!	O
method	*(char)
[	O
0	int
]	O
)	O
{	O
fputs	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
"(lsmeans) no method specified.\n"	*(char)
,	O
dap_err	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
if	O
(	O
!	O
strcmp	(*(char),*(char))->(int)
(	O
method	*(char)
,	O
"TUKEY"	*(char)
)	O
)	O
methn	int
=	O
TUKEY	int
;	O
else	O
if	O
(	O
!	O
strcmp	(*(char),*(char))->(int)
(	O
method	*(char)
,	O
"LSD"	*(char)
)	O
)	O
methn	int
=	O
LSD	int
;	O
else	O
if	O
(	O
!	O
strcmp	(*(char),*(char))->(int)
(	O
method	*(char)
,	O
"DUNNETT"	*(char)
)	O
)	O
methn	int
=	O
DUNNETT	int
;	O
else	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
dap_err	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"(lsmeans) unknown method: %s\n"	*(char)
,	O
method	*(char)
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
nmark	int
=	O
dap_list	(array(char),array(int),int)->(int)
(	O
marks	array(char)
,	O
markv	array(int)
,	O
dap_maxvar	int
)	O
;	O
for	O
(	O
l	int
=	O
0	int
;	O
l	int
<	O
dap_maxlev	int
;	O
l	int
++	O
)	O
levval	*(*(char))
[	O
l	int
]	O
[	O
0	int
]	O
=	O
'\0'	O
;	O
for	O
(	O
ncells	int
=	O
0	int
,	O
nlevels	*(int)
=	O
0	int
,	O
nlsmeans	int
=	O
0	int
,	O
nerrors	int
=	O
0	int
,	O
more	int
=	O
step	()->(int)
(	O
)	O
,	O
morecells	int
=	O
1	int
;	O
morecells	int
;	O
ncells	int
++	O
)	O
{	O
gotn	int
=	O
0	int
;	O
gotm	int
=	O
0	int
;	O
gotv	int
=	O
0	int
;	O
morecells	int
=	O
more	int
;	O
if	O
(	O
dap_newpart	(array(int),int)->(int)
(	O
markv	array(int)
,	O
nmark	int
)	O
)	O
{	O
dap_swap	()->(void)
(	O
)	O
;	O
dap_head	(array(int),int)->(void)
(	O
markv	array(int)
,	O
nmark	int
)	O
;	O
dap_swap	()->(void)
(	O
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
dap_lst	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"Least-squares means for: %s\n"	*(char)
,	O
treat	*(char)
)	O
;	O
lsmeans1	(int,double,*(*(double)),int,double,double,int,int,*(double),*(double),*(double),int,*(*(char)),int,int,int,int,int,int,int,int)->(void)
(	O
methn	int
,	O
alpha	double
,	O
coeff	*(*(double))
,	O
ncells	int
,	O
mse	double
,	O
edf	double
,	O
nerrors	int
,	O
nlsmeans	int
,	O
mean	*(double)
,	O
vari	*(double)
,	O
nobs	array(double)
,	O
nlevels	*(int)
,	O
levval	*(*(char))
,	O
varv	array(int)
[	O
0	int
]	O
,	O
treatn	int
,	O
resp2n	int
,	O
treat2n	int
,	O
typen	int
,	O
statn	int
,	O
lsm1	int
,	O
lsm2	int
)	O
;	O
ncells	int
=	O
0	int
;	O
nlsmeans	int
=	O
0	int
;	O
nerrors	int
=	O
0	int
;	O
nlevels	*(int)
=	O
0	int
;	O
for	O
(	O
l	int
=	O
0	int
;	O
l	int
<	O
dap_maxlev	int
;	O
l	int
++	O
)	O
levval	*(*(char))
[	O
l	int
]	O
[	O
0	int
]	O
=	O
'\0'	O
;	O
}	O
for	O
(	O
s	int
=	O
0	int
;	O
more	int
;	O
)	O
{	O
if	O
(	O
!	O
strcmp	(*(char),*(char))->(int)
(	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_str	*(*(char))
[	O
typen	int
]	O
,	O
"N"	*(char)
)	O
)	O
{	O
nobs	array(double)
[	O
ncells	int
]	O
=	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_dbl	*(double)
[	O
varv	array(int)
[	O
0	int
]	O
]	O
;	O
gotn	int
=	O
1	int
;	O
}	O
else	O
if	O
(	O
!	O
strcmp	(*(char),*(char))->(int)
(	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_str	*(*(char))
[	O
typen	int
]	O
,	O
"MEAN"	*(char)
)	O
)	O
{	O
mean	*(double)
[	O
ncells	int
]	O
=	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_dbl	*(double)
[	O
varv	array(int)
[	O
0	int
]	O
]	O
;	O
gotm	int
=	O
1	int
;	O
}	O
else	O
if	O
(	O
!	O
strcmp	(*(char),*(char))->(int)
(	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_str	*(*(char))
[	O
typen	int
]	O
,	O
"VAR"	*(char)
)	O
)	O
{	O
vari	*(double)
[	O
ncells	int
]	O
=	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_dbl	*(double)
[	O
varv	array(int)
[	O
0	int
]	O
]	O
;	O
gotv	int
=	O
1	int
;	O
}	O
else	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
dap_err	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"(lsmeans) Bad cell statistic: %s\n"	*(char)
,	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_str	*(*(char))
[	O
typen	int
]	O
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
if	O
(	O
++	O
s	int
<	O
3	int
)	O
more	int
=	O
step	()->(int)
(	O
)	O
;	O
else	O
{	O
if	O
(	O
nobs	array(double)
[	O
ncells	int
]	O
==	O
1.0	int
)	O
vari	*(double)
[	O
ncells	int
]	O
=	O
0.0	int
;	O
break	O
;	O
}	O
}	O
if	O
(	O
more	int
)	O
{	O
if	O
(	O
!	O
gotm	int
)	O
{	O
fputs	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
"(lsmeans) Missing MEAN.\n"	*(char)
,	O
dap_err	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
if	O
(	O
!	O
gotn	int
)	O
{	O
fputs	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
"(lsmeans) Missing N.\n"	*(char)
,	O
dap_err	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
if	O
(	O
!	O
gotv	int
)	O
{	O
fputs	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
"(lsmeans) Missing VAR.\n"	*(char)
,	O
dap_err	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
levn	(*(char),*(*(char)),*(int))->(int)
(	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_str	*(*(char))
[	O
treatn	int
]	O
,	O
levval	*(*(char))
,	O
&	O
nlevels	*(int)
)	O
;	O
}	O
for	O
(	O
nerrors	int
=	O
0	int
;	O
more	int
;	O
)	O
{	O
more	int
=	O
step	()->(int)
(	O
)	O
;	O
err	int
=	O
!	O
strcmp	(*(char),*(char))->(int)
(	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_str	*(*(char))
[	O
typen	int
]	O
,	O
"ERROR"	*(char)
)	O
;	O
con	int
=	O
!	O
strcmp	(*(char),*(char))->(int)
(	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_str	*(*(char))
[	O
typen	int
]	O
,	O
"CONTR"	*(char)
)	O
;	O
if	O
(	O
err	int
||	O
con	int
)	O
{	O
coeff	*(*(double))
[	O
nerrors	int
]	O
[	O
ncells	int
]	O
=	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_dbl	*(double)
[	O
varv	array(int)
[	O
0	int
]	O
]	O
;	O
nerrors	int
++	O
;	O
}	O
else	O
break	O
;	O
}	O
for	O
(	O
nlsmeans	int
=	O
0	int
;	O
more	int
;	O
)	O
{	O
if	O
(	O
!	O
strcmp	(*(char),*(char))->(int)
(	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_str	*(*(char))
[	O
typen	int
]	O
,	O
"LSMEAN"	*(char)
)	O
)	O
{	O
coeff	*(*(double))
[	O
nerrors	int
+	O
nlsmeans	int
]	O
[	O
ncells	int
]	O
=	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_dbl	*(double)
[	O
varv	array(int)
[	O
0	int
]	O
]	O
;	O
nlsmeans	int
++	O
;	O
}	O
else	O
break	O
;	O
more	int
=	O
step	()->(int)
(	O
)	O
;	O
}	O
if	O
(	O
!	O
strcmp	(*(char),*(char))->(int)
(	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_str	*(*(char))
[	O
typen	int
]	O
,	O
"MSERROR"	*(char)
)	O
)	O
{	O
mse	double
=	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_dbl	*(double)
[	O
varv	array(int)
[	O
0	int
]	O
]	O
;	O
if	O
(	O
more	int
&&	O
(	O
more	int
=	O
step	()->(int)
(	O
)	O
)	O
&&	O
!	O
strcmp	(*(char),*(char))->(int)
(	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_str	*(*(char))
[	O
typen	int
]	O
,	O
"ERRORDF"	*(char)
)	O
)	O
{	O
edf	double
=	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_dbl	*(double)
[	O
varv	array(int)
[	O
0	int
]	O
]	O
;	O
if	O
(	O
more	int
)	O
more	int
=	O
step	()->(int)
(	O
)	O
;	O
}	O
else	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
dap_err	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"(lsmeans1) Expected ERRORDF: %s\n"	*(char)
,	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_str	*(*(char))
[	O
typen	int
]	O
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
}	O
}	O
args1	*(char)
=	O
dap_malloc	(int,*(char))->(*(char))
(	O
strlen	(*(char))->(long)
(	O
marks	array(char)
)	O
+	O
strlen	(*(char))->(long)
(	O
treat2	*(char)
)	O
+	O
strlen	(*(char))->(long)
(	O
treat	*(char)
)	O
+	O
10	int
+	O
15	int
,	O
""	*(char)
)	O
;	O
sprintf	(*(char),*(char))->(int)
(	O
args1	*(char)
,	O
"%s _type_ _LSMEAN_ %s _lsm_ %s"	*(char)
,	O
marks	array(char)
,	O
treat2	*(char)
,	O
treat	*(char)
)	O
;	O
sort	(array(char),array(char),array(char))->(void)
(	O
lsmname	*(char)
,	O
args1	*(char)
,	O
""	*(char)
)	O
;	O
sprintf	(*(char),*(char))->(int)
(	O
args1	*(char)
,	O
"_type_ _LSMEAN_ %s"	*(char)
,	O
treat2	*(char)
)	O
;	O
args2	*(char)
=	O
dap_malloc	(int,*(char))->(*(char))
(	O
strlen	(*(char))->(long)
(	O
treat	*(char)
)	O
+	O
8	int
+	O
6	int
,	O
treat	*(char)
)	O
;	O
sprintf	(*(char),*(char))->(int)
(	O
args2	*(char)
,	O
"_lsm_ %s _stat_"	*(char)
,	O
treat	*(char)
)	O
;	O
while	O
(	O
*	O
format	array(char)
==	O
' '	O
)	O
format	array(char)
++	O
;	O
if	O
(	O
*	O
format	array(char)
==	O
's'	O
)	O
format	array(char)
++	O
;	O
table	(array(char),array(char),array(char),array(char),array(char))->(void)
(	O
lsmsrt	*(char)
,	O
args1	*(char)
,	O
args2	*(char)
,	O
format	array(char)
,	O
marks	array(char)
)	O
;	O
dap_free	(*(void),*(char))->(void)
(	O
varv	array(int)
,	O
""	*(char)
)	O
;	O
dap_free	(*(void),*(char))->(void)
(	O
markv	array(int)
,	O
""	*(char)
)	O
;	O
dap_free	(*(void),*(char))->(void)
(	O
lsmname	*(char)
,	O
""	*(char)
)	O
;	O
dap_free	(*(void),*(char))->(void)
(	O
lsmsrt	*(char)
,	O
""	*(char)
)	O
;	O
dap_free	(*(void),*(char))->(void)
(	O
varstr	*(char)
,	O
""	*(char)
)	O
;	O
dap_free	(*(void),*(char))->(void)
(	O
treat2	*(char)
,	O
""	*(char)
)	O
;	O
dap_free	(*(void),*(char))->(void)
(	O
args1	*(char)
,	O
""	*(char)
)	O
;	O
dap_free	(*(void),*(char))->(void)
(	O
args2	*(char)
,	O
""	*(char)
)	O
;	O
dap_free	(*(void),*(char))->(void)
(	O
levmem	*(char)
,	O
""	*(char)
)	O
;	O
dap_free	(*(void),*(char))->(void)
(	O
levval	*(*(char))
,	O
""	*(char)
)	O
;	O
dap_free	(*(void),*(char))->(void)
(	O
comem	*(double)
,	O
""	*(char)
)	O
;	O
dap_free	(*(void),*(char))->(void)
(	O
coeff	*(*(double))
,	O
""	*(char)
)	O
;	O
dap_free	(*(void),*(char))->(void)
(	O
mean	*(double)
,	O
""	*(char)
)	O
;	O
dap_free	(*(void),*(char))->(void)
(	O
nobs	array(double)
,	O
""	*(char)
)	O
;	O
dap_free	(*(void),*(char))->(void)
(	O
vari	*(double)
,	O
""	*(char)
)	O
;	O
}	O
