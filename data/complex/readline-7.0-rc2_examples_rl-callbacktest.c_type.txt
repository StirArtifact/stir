extern	O
int	O
errno	O
;	O
static	O
void	O
cb_linehandler	(*(char))->(void)
(	O
char	O
*	O
)	O
;	O
static	O
void	O
signandler	(int)->(void)
(	O
int	O
)	O
;	O
int	O
running	int
,	O
sigwinch_received	int
;	O
const	O
char	O
*	O
prompt	*(char)
=	O
"rltest$ "	*(char)
;	O
static	O
void	O
sighandler	(int)->(void)
(	O
int	O
sig	int
)	O
{	O
sigwinch_received	int
=	O
1	int
;	O
}	O
static	O
void	O
cb_linehandler	(*(char))->(void)
(	O
char	O
*	O
line	*(char)
)	O
{	O
if	O
(	O
line	*(char)
==	O
NULL	O
||	O
strcmp	(*(char),*(char))->(int)
(	O
line	*(char)
,	O
"exit"	*(char)
)	O
==	O
0	int
)	O
{	O
if	O
(	O
line	*(char)
==	O
0	int
)	O
printf	(*(char))->(int)
(	O
"\n"	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"exit\n"	*(char)
)	O
;	O
rl_callback_handler_remove	()->(void)
(	O
)	O
;	O
running	int
=	O
0	int
;	O
}	O
else	O
{	O
if	O
(	O
*	O
line	*(char)
)	O
add_history	(*(char))->(void)
(	O
line	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"input line: %s\n"	*(char)
,	O
line	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
line	*(char)
)	O
;	O
}	O
}	O
int	O
main	(int,*(*(char)))->(int)
(	O
int	O
c	int
,	O
char	O
*	O
*	O
v	*(*(char))
)	O
{	O
fd_set	struct(array(long))
fds	struct(array(long))
;	O
int	O
r	int
;	O
setlocale	(int,*(char))->(*(char))
(	O
LC_ALL	O
,	O
""	*(char)
)	O
;	O
signal	(int,*((int)->(void)))->(*((int)->(void)))
(	O
SIGWINCH	int
,	O
sighandler	(int)->(void)
)	O
;	O
rl_callback_handler_install	(*(char),*((*(char))->(void)))->(void)
(	O
prompt	*(char)
,	O
cb_linehandler	(*(char))->(void)
)	O
;	O
running	int
=	O
1	int
;	O
while	O
(	O
running	int
)	O
{	O
FD_ZERO	O
(	O
&	O
fds	struct(array(long))
)	O
;	O
FD_SET	O
(	O
fileno	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
rl_instream	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
,	O
&	O
fds	struct(array(long))
)	O
;	O
r	int
=	O
select	(int,*(struct(array(long))),*(struct(array(long))),*(struct(array(long))),*(struct(long,long)))->(int)
(	O
FD_SETSIZE	O
,	O
&	O
fds	struct(array(long))
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
)	O
;	O
if	O
(	O
r	int
<	O
0	int
&&	O
errno	O
!=	O
EINTR	int
)	O
{	O
perror	(*(char))->(void)
(	O
"rltest: select"	*(char)
)	O
;	O
rl_callback_handler_remove	()->(void)
(	O
)	O
;	O
break	O
;	O
}	O
if	O
(	O
sigwinch_received	int
)	O
{	O
rl_resize_terminal	()->(void)
(	O
)	O
;	O
sigwinch_received	int
=	O
0	int
;	O
}	O
if	O
(	O
r	int
<	O
0	int
)	O
continue	O
;	O
if	O
(	O
FD_ISSET	O
(	O
fileno	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
rl_instream	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
,	O
&	O
fds	struct(array(long))
)	O
)	O
rl_callback_read_char	()->(void)
(	O
)	O
;	O
}	O
printf	(*(char))->(int)
(	O
"rltest: Event loop has exited\n"	*(char)
)	O
;	O
return	O
0	int
;	O
}	O
