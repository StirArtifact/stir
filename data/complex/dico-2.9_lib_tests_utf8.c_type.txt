typedef	O
int	O
(	O
*	O
opfn	*((int,*(*(char)))->(int))
)	O
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	*(*(char))
)	O
;	O
struct	O
optab	struct(*(char),*((int,*(*(char)))->(int)))
{	O
char	O
*	O
name	*(char)
;	O
opfn	*((int,*(*(char)))->(int))
fun	*((int,*(*(char)))->(int))
;	O
}	O
;	O
static	O
unsigned	O
*	O
strtowc	(*(char))->(*(int))
(	O
const	O
char	O
*	O
str	*(struct)
)	O
{	O
unsigned	O
*	O
buf	*(void)
;	O
if	O
(	O
utf8_mbstr_to_wc	(*(char),*(*(int)),*(long))->(int)
(	O
str	*(struct)
,	O
&	O
buf	*(void)
,	O
NULL	O
)	O
)	O
{	O
dico_log	(int,int,*(char))->(void)
(	O
L_ERR	int
,	O
errno	O
,	O
"cannot convert \"%s\""	*(char)
,	O
str	*(struct)
)	O
;	O
abort	()->(void)
(	O
)	O
;	O
}	O
return	O
buf	*(void)
;	O
}	O
static	O
int	O
help	(int,*(*(char)))->(int)
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	*(*(char))
)	O
{	O
printf	(*(char))->(int)
(	O
"No more help, sorry"	*(char)
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
op_strlen	(int,*(*(char)))->(int)
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	*(*(char))
)	O
{	O
char	O
*	O
opname	*(char)
=	O
*	O
argv	*(*(char))
++	O
;	O
argc	int
--	O
;	O
if	O
(	O
argc	int
!=	O
1	int
)	O
{	O
dico_log	(int,int,*(char))->(void)
(	O
L_ERR	int
,	O
0	int
,	O
"%s requires one argument"	*(char)
,	O
opname	*(char)
)	O
;	O
return	O
1	int
;	O
}	O
printf	(*(char))->(int)
(	O
"%lu\n"	*(char)
,	O
(	O
unsigned	O
long	O
)	O
utf8_strlen	(*(char))->(long)
(	O
argv	*(*(char))
[	O
0	int
]	O
)	O
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
op_strcasecmp	(int,*(*(char)))->(int)
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	*(*(char))
)	O
{	O
char	O
*	O
opname	*(char)
=	O
*	O
argv	*(*(char))
++	O
;	O
argc	int
--	O
;	O
if	O
(	O
argc	int
!=	O
2	int
)	O
{	O
dico_log	(int,int,*(char))->(void)
(	O
L_ERR	int
,	O
0	int
,	O
"%s requires two arguments"	*(char)
,	O
opname	*(char)
)	O
;	O
return	O
1	int
;	O
}	O
printf	(*(char))->(int)
(	O
"%d\n"	*(char)
,	O
utf8_strcasecmp	(*(char),*(char))->(int)
(	O
argv	*(*(char))
[	O
0	int
]	O
,	O
argv	*(*(char))
[	O
1	int
]	O
)	O
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
op_strncasecmp	(int,*(*(char)))->(int)
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	*(*(char))
)	O
{	O
char	O
*	O
opname	*(char)
=	O
*	O
argv	*(*(char))
++	O
;	O
argc	int
--	O
;	O
if	O
(	O
argc	int
!=	O
3	int
)	O
{	O
dico_log	(int,int,*(char))->(void)
(	O
L_ERR	int
,	O
0	int
,	O
"%s requires three arguments"	*(char)
,	O
opname	*(char)
)	O
;	O
return	O
1	int
;	O
}	O
printf	(*(char))->(int)
(	O
"%d\n"	*(char)
,	O
utf8_strncasecmp	(*(char),*(char),long)->(int)
(	O
argv	*(*(char))
[	O
0	int
]	O
,	O
argv	*(*(char))
[	O
1	int
]	O
,	O
atoi	(*(char))->(int)
(	O
argv	*(*(char))
[	O
2	int
]	O
)	O
)	O
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
op_wc_strcmp	(int,*(*(char)))->(int)
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	*(*(char))
)	O
{	O
unsigned	O
*	O
wa	*(int)
,	O
*	O
wb	*(int)
;	O
char	O
*	O
opname	*(char)
=	O
*	O
argv	*(*(char))
++	O
;	O
argc	int
--	O
;	O
if	O
(	O
argc	int
!=	O
2	int
)	O
{	O
dico_log	(int,int,*(char))->(void)
(	O
L_ERR	int
,	O
0	int
,	O
"%s requires two arguments"	*(char)
,	O
opname	*(char)
)	O
;	O
return	O
1	int
;	O
}	O
wa	*(int)
=	O
strtowc	(*(char))->(*(int))
(	O
argv	*(*(char))
[	O
0	int
]	O
)	O
;	O
wb	*(int)
=	O
strtowc	(*(char))->(*(int))
(	O
argv	*(*(char))
[	O
1	int
]	O
)	O
;	O
printf	(*(char))->(int)
(	O
"%d\n"	*(char)
,	O
utf8_wc_strcmp	(*(int),*(int))->(int)
(	O
wa	*(int)
,	O
wb	*(int)
)	O
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
op_wc_strncmp	(int,*(*(char)))->(int)
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	*(*(char))
)	O
{	O
unsigned	O
*	O
wa	*(int)
,	O
*	O
wb	*(int)
;	O
char	O
*	O
opname	*(char)
=	O
*	O
argv	*(*(char))
++	O
;	O
argc	int
--	O
;	O
if	O
(	O
argc	int
!=	O
3	int
)	O
{	O
dico_log	(int,int,*(char))->(void)
(	O
L_ERR	int
,	O
0	int
,	O
"%s requires three arguments"	*(char)
,	O
opname	*(char)
)	O
;	O
return	O
1	int
;	O
}	O
wa	*(int)
=	O
strtowc	(*(char))->(*(int))
(	O
argv	*(*(char))
[	O
0	int
]	O
)	O
;	O
wb	*(int)
=	O
strtowc	(*(char))->(*(int))
(	O
argv	*(*(char))
[	O
1	int
]	O
)	O
;	O
printf	(*(char))->(int)
(	O
"%d\n"	*(char)
,	O
utf8_wc_strncmp	(*(int),*(int),long)->(int)
(	O
wa	*(int)
,	O
wb	*(int)
,	O
atoi	(*(char))->(int)
(	O
argv	*(*(char))
[	O
2	int
]	O
)	O
)	O
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
op_wc_strcasecmp	(int,*(*(char)))->(int)
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	*(*(char))
)	O
{	O
unsigned	O
*	O
wa	*(int)
,	O
*	O
wb	*(int)
;	O
char	O
*	O
opname	*(char)
=	O
*	O
argv	*(*(char))
++	O
;	O
argc	int
--	O
;	O
if	O
(	O
argc	int
!=	O
2	int
)	O
{	O
dico_log	(int,int,*(char))->(void)
(	O
L_ERR	int
,	O
0	int
,	O
"%s requires two arguments"	*(char)
,	O
opname	*(char)
)	O
;	O
return	O
1	int
;	O
}	O
wa	*(int)
=	O
strtowc	(*(char))->(*(int))
(	O
argv	*(*(char))
[	O
0	int
]	O
)	O
;	O
wb	*(int)
=	O
strtowc	(*(char))->(*(int))
(	O
argv	*(*(char))
[	O
1	int
]	O
)	O
;	O
printf	(*(char))->(int)
(	O
"%d\n"	*(char)
,	O
utf8_wc_strcasecmp	(*(int),*(int))->(int)
(	O
wa	*(int)
,	O
wb	*(int)
)	O
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
op_wc_strncasecmp	(int,*(*(char)))->(int)
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	*(*(char))
)	O
{	O
unsigned	O
*	O
wa	*(int)
,	O
*	O
wb	*(int)
;	O
char	O
*	O
opname	*(char)
=	O
*	O
argv	*(*(char))
++	O
;	O
argc	int
--	O
;	O
if	O
(	O
argc	int
!=	O
3	int
)	O
{	O
dico_log	(int,int,*(char))->(void)
(	O
L_ERR	int
,	O
0	int
,	O
"%s requires three arguments"	*(char)
,	O
opname	*(char)
)	O
;	O
return	O
1	int
;	O
}	O
wa	*(int)
=	O
strtowc	(*(char))->(*(int))
(	O
argv	*(*(char))
[	O
0	int
]	O
)	O
;	O
wb	*(int)
=	O
strtowc	(*(char))->(*(int))
(	O
argv	*(*(char))
[	O
1	int
]	O
)	O
;	O
printf	(*(char))->(int)
(	O
"%d\n"	*(char)
,	O
utf8_wc_strncasecmp	(*(int),*(int),long)->(int)
(	O
wa	*(int)
,	O
wb	*(int)
,	O
atoi	(*(char))->(int)
(	O
argv	*(*(char))
[	O
2	int
]	O
)	O
)	O
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
op_toupper	(int,*(*(char)))->(int)
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	*(*(char))
)	O
{	O
char	O
*	O
opname	*(char)
=	O
*	O
argv	*(*(char))
++	O
;	O
argc	int
--	O
;	O
if	O
(	O
argc	int
!=	O
1	int
)	O
{	O
dico_log	(int,int,*(char))->(void)
(	O
L_ERR	int
,	O
0	int
,	O
"%s requires one arguments"	*(char)
,	O
opname	*(char)
)	O
;	O
return	O
1	int
;	O
}	O
if	O
(	O
utf8_toupper	(*(char))->(int)
(	O
argv	*(*(char))
[	O
0	int
]	O
)	O
)	O
abort	()->(void)
(	O
)	O
;	O
printf	(*(char))->(int)
(	O
"%s\n"	*(char)
,	O
argv	*(*(char))
[	O
0	int
]	O
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
op_tolower	(int,*(*(char)))->(int)
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	*(*(char))
)	O
{	O
char	O
*	O
opname	*(char)
=	O
*	O
argv	*(*(char))
++	O
;	O
argc	int
--	O
;	O
if	O
(	O
argc	int
!=	O
1	int
)	O
{	O
dico_log	(int,int,*(char))->(void)
(	O
L_ERR	int
,	O
0	int
,	O
"%s requires one argument"	*(char)
,	O
opname	*(char)
)	O
;	O
return	O
1	int
;	O
}	O
if	O
(	O
utf8_tolower	(*(char))->(int)
(	O
argv	*(*(char))
[	O
0	int
]	O
)	O
)	O
abort	()->(void)
(	O
)	O
;	O
printf	(*(char))->(int)
(	O
"%s\n"	*(char)
,	O
argv	*(*(char))
[	O
0	int
]	O
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
op_wc_strchr	(int,*(*(char)))->(int)
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	*(*(char))
)	O
{	O
unsigned	O
*	O
wa	*(int)
,	O
*	O
wb	*(int)
;	O
const	O
unsigned	O
*	O
p	*(char)
;	O
char	O
*	O
opname	*(char)
=	O
*	O
argv	*(*(char))
++	O
;	O
argc	int
--	O
;	O
if	O
(	O
argc	int
!=	O
2	int
)	O
{	O
dico_log	(int,int,*(char))->(void)
(	O
L_ERR	int
,	O
0	int
,	O
"%s requires two arguments"	*(char)
,	O
opname	*(char)
)	O
;	O
return	O
1	int
;	O
}	O
wa	*(int)
=	O
strtowc	(*(char))->(*(int))
(	O
argv	*(*(char))
[	O
0	int
]	O
)	O
;	O
wb	*(int)
=	O
strtowc	(*(char))->(*(int))
(	O
argv	*(*(char))
[	O
1	int
]	O
)	O
;	O
p	*(char)
=	O
utf8_wc_strchr	(*(int),int)->(*(int))
(	O
wa	*(int)
,	O
wb	*(int)
[	O
0	int
]	O
)	O
;	O
if	O
(	O
!	O
p	*(char)
)	O
return	O
2	int
;	O
printf	(*(char))->(int)
(	O
"%td\n"	*(char)
,	O
p	*(char)
-	O
wa	*(int)
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
op_wc_strchr_ci	(int,*(*(char)))->(int)
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	*(*(char))
)	O
{	O
unsigned	O
*	O
wa	*(int)
,	O
*	O
wb	*(int)
;	O
const	O
unsigned	O
*	O
p	*(char)
;	O
char	O
*	O
opname	*(char)
=	O
*	O
argv	*(*(char))
++	O
;	O
argc	int
--	O
;	O
if	O
(	O
argc	int
!=	O
2	int
)	O
{	O
dico_log	(int,int,*(char))->(void)
(	O
L_ERR	int
,	O
0	int
,	O
"%s requires two arguments"	*(char)
,	O
opname	*(char)
)	O
;	O
return	O
1	int
;	O
}	O
wa	*(int)
=	O
strtowc	(*(char))->(*(int))
(	O
argv	*(*(char))
[	O
0	int
]	O
)	O
;	O
wb	*(int)
=	O
strtowc	(*(char))->(*(int))
(	O
argv	*(*(char))
[	O
1	int
]	O
)	O
;	O
p	*(char)
=	O
utf8_wc_strchr_ci	(*(int),int)->(*(int))
(	O
wa	*(int)
,	O
wb	*(int)
[	O
0	int
]	O
)	O
;	O
if	O
(	O
!	O
p	*(char)
)	O
return	O
2	int
;	O
printf	(*(char))->(int)
(	O
"%td\n"	*(char)
,	O
p	*(char)
-	O
wa	*(int)
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
op_wc_strstr	(int,*(*(char)))->(int)
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	*(*(char))
)	O
{	O
unsigned	O
*	O
wa	*(int)
,	O
*	O
wb	*(int)
;	O
const	O
unsigned	O
*	O
p	*(char)
;	O
char	O
*	O
opname	*(char)
=	O
*	O
argv	*(*(char))
++	O
;	O
argc	int
--	O
;	O
if	O
(	O
argc	int
!=	O
2	int
)	O
{	O
dico_log	(int,int,*(char))->(void)
(	O
L_ERR	int
,	O
0	int
,	O
"%s requires two arguments"	*(char)
,	O
opname	*(char)
)	O
;	O
return	O
1	int
;	O
}	O
wa	*(int)
=	O
strtowc	(*(char))->(*(int))
(	O
argv	*(*(char))
[	O
0	int
]	O
)	O
;	O
wb	*(int)
=	O
strtowc	(*(char))->(*(int))
(	O
argv	*(*(char))
[	O
1	int
]	O
)	O
;	O
p	*(char)
=	O
utf8_wc_strstr	(*(int),*(int))->(*(int))
(	O
wa	*(int)
,	O
wb	*(int)
)	O
;	O
if	O
(	O
!	O
p	*(char)
)	O
{	O
if	O
(	O
errno	O
)	O
{	O
dico_log	(int,int,*(char))->(void)
(	O
L_ERR	int
,	O
errno	O
,	O
"can't match"	*(char)
)	O
;	O
return	O
3	int
;	O
}	O
return	O
2	int
;	O
}	O
printf	(*(char))->(int)
(	O
"%td\n"	*(char)
,	O
p	*(char)
-	O
wa	*(int)
)	O
;	O
return	O
0	int
;	O
}	O
struct	O
optab	struct(*(char),*((int,*(*(char)))->(int)))
optab	struct(*(char),*((int,*(*(char)))->(int)))
[	O
]	O
=	O
{	O
{	O
"help"	*(char)
,	O
help	(int,*(*(char)))->(int)
}	O
,	O
{	O
"strlen"	*(char)
,	O
op_strlen	(int,*(*(char)))->(int)
}	O
,	O
{	O
"strcasecmp"	*(char)
,	O
op_strcasecmp	(int,*(*(char)))->(int)
}	O
,	O
{	O
"strncasecmp"	*(char)
,	O
op_strncasecmp	(int,*(*(char)))->(int)
}	O
,	O
{	O
"wc_strcmp"	*(char)
,	O
op_wc_strcmp	(int,*(*(char)))->(int)
}	O
,	O
{	O
"wc_strncmp"	*(char)
,	O
op_wc_strncmp	(int,*(*(char)))->(int)
}	O
,	O
{	O
"wc_strcasecmp"	*(char)
,	O
op_wc_strcasecmp	(int,*(*(char)))->(int)
}	O
,	O
{	O
"wc_strncasecmp"	*(char)
,	O
op_wc_strncasecmp	(int,*(*(char)))->(int)
}	O
,	O
{	O
"toupper"	*(char)
,	O
op_toupper	(int,*(*(char)))->(int)
}	O
,	O
{	O
"tolower"	*(char)
,	O
op_tolower	(int,*(*(char)))->(int)
}	O
,	O
{	O
"wc_strchr"	*(char)
,	O
op_wc_strchr	(int,*(*(char)))->(int)
}	O
,	O
{	O
"wc_strchr_ci"	*(char)
,	O
op_wc_strchr_ci	(int,*(*(char)))->(int)
}	O
,	O
{	O
"wc_strstr"	*(char)
,	O
op_wc_strstr	(int,*(*(char)))->(int)
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
void	O
usage	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(void)
(	O
FILE	struct
*	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"usage: %s [op] [args]\n"	*(char)
,	O
dico_program_name	*(char)
)	O
;	O
}	O
int	O
main	(int,*(*(char)))->(int)
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	*(*(char))
)	O
{	O
struct	O
optab	struct(*(char),*((int,*(*(char)))->(int)))
*	O
op	*(struct(*(char),*((int,*(*`))->(int))))
;	O
dico_set_program_name	(*(char))->(void)
(	O
argv	*(*(char))
[	O
0	int
]	O
)	O
;	O
argc	int
--	O
;	O
argv	*(*(char))
++	O
;	O
if	O
(	O
!	O
argc	int
)	O
{	O
usage	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(void)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
return	O
1	int
;	O
}	O
for	O
(	O
op	*(struct(*(char),*((int,*(*`))->(int))))
=	O
optab	struct(*(char),*((int,*(*(char)))->(int)))
;	O
op	*(struct(*(char),*((int,*(*`))->(int))))
->	O
name	*(char)
;	O
op	*(struct(*(char),*((int,*(*`))->(int))))
++	O
)	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
*	O
argv	*(*(char))
,	O
op	*(struct(*(char),*((int,*(*`))->(int))))
->	O
name	*(char)
)	O
==	O
0	int
)	O
return	O
op	*(struct(*(char),*((int,*(*`))->(int))))
->	O
fun	*((int,*(*(char)))->(int))
(	O
argc	int
,	O
argv	*(*(char))
)	O
;	O
dico_log	(int,int,*(char))->(void)
(	O
L_ERR	int
,	O
0	int
,	O
"unknown operation"	*(char)
)	O
;	O
return	O
1	int
;	O
}	O
