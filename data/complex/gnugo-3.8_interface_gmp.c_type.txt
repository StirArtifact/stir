typedef	O
enum	O
{	O
cmd_ack	int
,	O
cmd_deny	int
,	O
cmd_reset	int
,	O
cmd_query	int
,	O
cmd_respond	int
,	O
cmd_move	int
,	O
cmd_undo	int
}	O
Command	enum(int,int,int,int,int,int,int)
;	O
typedef	O
enum	O
{	O
query_game	int
,	O
query_bufSize	int
,	O
query_protocol	int
,	O
query_stones	int
,	O
query_bTime	int
,	O
query_wTime	int
,	O
query_charSet	int
,	O
query_rules	int
,	O
query_handicap	int
,	O
query_boardSize	int
,	O
query_timeLimit	int
,	O
query_color	int
,	O
query_who	int
,	O
query_max	int
}	O
Query	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int)
;	O
typedef	O
struct	O
Gmp_struct	struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int)
{	O
int	O
inFile	int
,	O
outFile	int
;	O
int	O
boardSize	int
,	O
sizeVerified	int
;	O
int	O
handicap	int
,	O
handicapVerified	int
;	O
float	O
komi	float
;	O
int	O
komiVerified	int
;	O
int	O
chineseRules	int
,	O
rulesVerified	int
;	O
int	O
iAmWhite	int
,	O
colorVerified	int
;	O
Query	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int)
lastQuerySent	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int)
;	O
int	O
recvSoFar	int
,	O
sendsQueued	int
;	O
int	O
sendFailures	int
,	O
noResponseSecs	int
;	O
int	O
waitingHighAck	int
;	O
time_t	long
lastSendTime	long
;	O
int	O
myLastSeq	int
,	O
hisLastSeq	int
;	O
unsigned	O
char	O
recvData	array(char)
[	O
4	int
]	O
;	O
unsigned	O
char	O
sendData	array(char)
[	O
4	int
]	O
;	O
struct	O
{	O
int	O
cmd	int
,	O
val	int
;	O
}	O
sendsPending	array(struct(int,int))
[	O
GMP_MAXSENDSQUEUED	int
]	O
;	O
int	O
earlyMovePresent	int
;	O
int	O
earlyMoveX	int
,	O
earlyMoveY	int
;	O
int	O
simplified	int
;	O
}	O
Gmp	struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int)
;	O
int	O
gmp_debug	int
=	O
0	int
;	O
static	O
const	O
char	O
*	O
commandNames	array(*(char))
[	O
]	O
=	O
{	O
"ACK"	*(char)
,	O
"DENY"	*(char)
,	O
"RESET"	*(char)
,	O
"QUERY"	*(char)
,	O
"RESPOND"	*(char)
,	O
"MOVE"	*(char)
,	O
"UNDO"	*(char)
}	O
;	O
static	O
const	O
char	O
*	O
queryNames	array(*(char))
[	O
]	O
=	O
{	O
"GAME"	*(char)
,	O
"BUFFER SIZE"	*(char)
,	O
"PROTOCOL"	*(char)
,	O
"STONES"	*(char)
,	O
"BLACK TIME"	*(char)
,	O
"WHITE TIME"	*(char)
,	O
"CHAR SET"	*(char)
,	O
"RULES"	*(char)
,	O
"HANDICAP"	*(char)
,	O
"BOARD SIZE"	*(char)
,	O
"TIME LIMIT"	*(char)
,	O
"COLOR"	*(char)
,	O
"WHO"	*(char)
}	O
;	O
static	O
unsigned	O
char	O
checksum	(array(char))->(char)
(	O
unsigned	O
char	O
p	array(char)
[	O
4	int
]	O
)	O
;	O
static	O
GmpResult	enum(int,int,int,int,int,int,int)
gotQueryResponse	(*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int)),int,*(*(char)))->(enum(int,int,int,int,int,int,int))
(	O
Gmp	struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int)
*	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
,	O
int	O
val	int
,	O
const	O
char	O
*	O
*	O
err	*(*(char))
)	O
;	O
static	O
void	O
putCommand	(*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int)),enum(int,int,int,int,int,int,int),int)->(void)
(	O
Gmp	struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int)
*	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
,	O
Command	enum(int,int,int,int,int,int,int)
cmd	int
,	O
int	O
val	int
)	O
;	O
static	O
GmpResult	enum(int,int,int,int,int,int,int)
respond	(*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int)),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int))->(enum(int,int,int,int,int,int,int))
(	O
Gmp	struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int)
*	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
,	O
Query	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int)
query	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int)
)	O
;	O
static	O
void	O
askQuery	(*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int)))->(void)
(	O
Gmp	struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int)
*	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
)	O
;	O
static	O
int	O
heartbeat	(*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int)))->(int)
(	O
Gmp	struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int)
*	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
)	O
;	O
static	O
GmpResult	enum(int,int,int,int,int,int,int)
getPacket	(*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int)),*(int),*(int),*(*(char)))->(enum(int,int,int,int,int,int,int))
(	O
Gmp	struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int)
*	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
,	O
int	O
*	O
out1	*(int)
,	O
int	O
*	O
out2	*(int)
,	O
const	O
char	O
*	O
*	O
error	*(*(char))
)	O
;	O
static	O
GmpResult	enum(int,int,int,int,int,int,int)
parsePacket	(*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int)),*(int),*(int),*(*(char)))->(enum(int,int,int,int,int,int,int))
(	O
Gmp	struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int)
*	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
,	O
int	O
*	O
out1	*(int)
,	O
int	O
*	O
out2	*(int)
,	O
const	O
char	O
*	O
*	O
error	*(*(char))
)	O
;	O
static	O
GmpResult	enum(int,int,int,int,int,int,int)
processCommand	(*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int)),enum(int,int,int,int,int,int,int),int,*(int),*(int),*(*(char)))->(enum(int,int,int,int,int,int,int))
(	O
Gmp	struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int)
*	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
,	O
Command	enum(int,int,int,int,int,int,int)
command	enum(int,int,int,int,int,int,int)
,	O
int	O
val	int
,	O
int	O
*	O
out1	*(int)
,	O
int	O
*	O
out2	*(int)
,	O
const	O
char	O
*	O
*	O
error	*(*(char))
)	O
;	O
static	O
void	O
processQ	(*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int)))->(void)
(	O
Gmp	struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int)
*	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
)	O
;	O
Gmp	struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int)
*	O
gmp_create	(int,int)->(*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int)))
(	O
int	O
inFile	int
,	O
int	O
outFile	int
)	O
{	O
Gmp	struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int)
*	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
;	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
=	O
malloc	(long)->(*(void))
(	O
sizeof	O
(	O
Gmp	struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int)
)	O
)	O
;	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
inFile	int
=	O
inFile	int
;	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
outFile	int
=	O
outFile	int
;	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
boardSize	int
=	O
-	O
1	int
;	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
sizeVerified	int
=	O
0	int
;	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
handicap	int
=	O
-	O
1	int
;	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
handicapVerified	int
=	O
0	int
;	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
komi	float
=	O
0.0	int
;	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
chineseRules	int
=	O
-	O
1	int
;	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
rulesVerified	int
=	O
0	int
;	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
iAmWhite	int
=	O
-	O
1	int
;	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
colorVerified	int
=	O
0	int
;	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
lastQuerySent	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int)
=	O
0	int
;	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
recvSoFar	int
=	O
0	int
;	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
sendsQueued	int
=	O
0	int
;	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
sendFailures	int
=	O
0	int
;	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
noResponseSecs	int
=	O
0	int
;	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
waitingHighAck	int
=	O
0	int
;	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
lastSendTime	long
=	O
0	int
;	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
myLastSeq	int
=	O
0	int
;	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
hisLastSeq	int
=	O
0	int
;	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
earlyMovePresent	int
=	O
0	int
;	O
return	O
(	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
)	O
;	O
}	O
void	O
gmp_destroy	(*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int)))->(void)
(	O
Gmp	struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int)
*	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
)	O
{	O
free	(*(void))->(void)
(	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
)	O
;	O
}	O
GmpResult	enum(int,int,int,int,int,int,int)
gmp_check	(*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int)),int,*(int),*(int),*(*(char)))->(enum(int,int,int,int,int,int,int))
(	O
Gmp	struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int)
*	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
,	O
int	O
gsleep	int
,	O
int	O
*	O
out1	*(int)
,	O
int	O
*	O
out2	*(int)
,	O
const	O
char	O
*	O
*	O
error	*(*(char))
)	O
{	O
fd_set	struct(array(long))
readReady	struct(array(long))
;	O
struct	O
timeval	struct(long,long)
noTime	struct(long,long)
;	O
int	O
intDummy	int
;	O
const	O
char	O
*	O
charPtrDummy	*(char)
;	O
GmpResult	enum(int,int,int,int,int,int,int)
result	enum(int,int,int,int,int,int,int)
;	O
if	O
(	O
out1	*(int)
==	O
NULL	O
)	O
out1	*(int)
=	O
&	O
intDummy	int
;	O
if	O
(	O
out2	*(int)
==	O
NULL	O
)	O
out2	*(int)
=	O
&	O
intDummy	int
;	O
if	O
(	O
error	*(*(char))
==	O
NULL	O
)	O
error	*(*(char))
=	O
&	O
charPtrDummy	*(char)
;	O
if	O
(	O
gmp_verified	O
(	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
)	O
&&	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
earlyMovePresent	int
)	O
{	O
*	O
out1	*(int)
=	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
earlyMoveX	int
;	O
*	O
out2	*(int)
=	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
earlyMoveY	int
;	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
earlyMovePresent	int
=	O
0	int
;	O
if	O
(	O
gmp_debug	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"GMP: Returning early move.\n"	*(char)
)	O
;	O
}	O
return	O
(	O
gmp_move	int
)	O
;	O
}	O
*	O
out1	*(int)
=	O
0	int
;	O
*	O
out2	*(int)
=	O
0	int
;	O
*	O
error	*(*(char))
=	O
NULL	O
;	O
do	O
{	O
if	O
(	O
time	(*(long))->(long)
(	O
NULL	O
)	O
!=	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
lastSendTime	long
)	O
{	O
if	O
(	O
!	O
heartbeat	(*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int)))->(int)
(	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
)	O
)	O
{	O
*	O
error	*(*(char))
=	O
"GMP Timeout"	*(char)
;	O
return	O
(	O
gmp_err	int
)	O
;	O
}	O
}	O
FD_ZERO	O
(	O
&	O
readReady	struct(array(long))
)	O
;	O
FD_SET	O
(	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
inFile	int
,	O
&	O
readReady	struct(array(long))
)	O
;	O
noTime	struct(long,long)
.	O
tv_usec	long
=	O
0	int
;	O
if	O
(	O
gsleep	int
)	O
noTime	struct(long,long)
.	O
tv_sec	long
=	O
1	int
;	O
else	O
noTime	struct(long,long)
.	O
tv_sec	long
=	O
0	int
;	O
select	(int,*(struct(array(long))),*(struct(array(long))),*(struct(array(long))),*(struct(long,long)))->(int)
(	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
inFile	int
+	O
1	int
,	O
&	O
readReady	struct(array(long))
,	O
NULL	O
,	O
NULL	O
,	O
&	O
noTime	struct(long,long)
)	O
;	O
if	O
(	O
!	O
gsleep	int
&&	O
!	O
FD_ISSET	O
(	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
inFile	int
,	O
&	O
readReady	struct(array(long))
)	O
)	O
return	O
(	O
gmp_nothing	int
)	O
;	O
result	enum(int,int,int,int,int,int,int)
=	O
getPacket	(*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int)),*(int),*(int),*(*(char)))->(enum(int,int,int,int,int,int,int))
(	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
,	O
out1	*(int)
,	O
out2	*(int)
,	O
error	*(*(char))
)	O
;	O
}	O
while	O
(	O
result	enum(int,int,int,int,int,int,int)
==	O
gmp_nothing	int
)	O
;	O
return	O
(	O
result	enum(int,int,int,int,int,int,int)
)	O
;	O
}	O
static	O
GmpResult	enum(int,int,int,int,int,int,int)
getPacket	(*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int)),*(int),*(int),*(*(char)))->(enum(int,int,int,int,int,int,int))
(	O
Gmp	struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int)
*	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
,	O
int	O
*	O
out1	*(int)
,	O
int	O
*	O
out2	*(int)
,	O
const	O
char	O
*	O
*	O
error	*(*(char))
)	O
{	O
unsigned	O
char	O
charsIn	array(char)
[	O
4	int
]	O
,	O
c	char
;	O
int	O
count	int
=	O
0	int
,	O
cNum	int
;	O
static	O
char	O
errOut	array(char)
[	O
200	int
]	O
;	O
count	int
=	O
read	(int,*(void),long)->(long)
(	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
inFile	int
,	O
charsIn	array(char)
,	O
4	int
-	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
recvSoFar	int
)	O
;	O
if	O
(	O
count	int
<=	O
0	int
)	O
{	O
sprintf	(*(char),*(char))->(int)
(	O
errOut	array(char)
,	O
"System error."	*(char)
)	O
;	O
*	O
error	*(*(char))
=	O
errOut	array(char)
;	O
return	O
(	O
gmp_err	int
)	O
;	O
}	O
for	O
(	O
cNum	int
=	O
0	int
;	O
cNum	int
<	O
count	int
;	O
++	O
cNum	int
)	O
{	O
c	char
=	O
charsIn	array(char)
[	O
cNum	int
]	O
;	O
if	O
(	O
!	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
recvSoFar	int
)	O
{	O
if	O
(	O
(	O
c	char
&	O
0xfc	int
)	O
==	O
0	int
)	O
{	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
recvData	array(char)
[	O
0	int
]	O
=	O
c	char
;	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
recvSoFar	int
=	O
1	int
;	O
}	O
else	O
{	O
if	O
(	O
gmp_debug	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"GMP: Received invalid packet.\n"	*(char)
)	O
;	O
}	O
}	O
}	O
else	O
{	O
if	O
(	O
(	O
c	char
&	O
0x80	int
)	O
==	O
0	int
)	O
{	O
if	O
(	O
gmp_debug	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"GMP: Received invalid packet.\n"	*(char)
)	O
;	O
}	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
recvSoFar	int
=	O
0	int
;	O
if	O
(	O
(	O
c	char
&	O
0xfc	int
)	O
==	O
0	int
)	O
{	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
recvData	array(char)
[	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
recvSoFar	int
++	O
]	O
=	O
c	char
;	O
}	O
}	O
else	O
{	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
recvData	array(char)
[	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
recvSoFar	int
++	O
]	O
=	O
c	char
;	O
if	O
(	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
recvSoFar	int
==	O
4	int
)	O
{	O
assert	O
(	O
cNum	int
+	O
1	int
==	O
count	int
)	O
;	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
recvSoFar	int
=	O
0	int
;	O
if	O
(	O
checksum	(array(char))->(char)
(	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
recvData	array(char)
)	O
==	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
recvData	array(char)
[	O
1	int
]	O
)	O
return	O
(	O
parsePacket	(*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int)),*(int),*(int),*(*(char)))->(enum(int,int,int,int,int,int,int))
(	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
,	O
out1	*(int)
,	O
out2	*(int)
,	O
error	*(*(char))
)	O
)	O
;	O
}	O
}	O
}	O
}	O
return	O
(	O
gmp_nothing	int
)	O
;	O
}	O
static	O
unsigned	O
char	O
checksum	(array(char))->(char)
(	O
unsigned	O
char	O
p	array(char)
[	O
4	int
]	O
)	O
{	O
unsigned	O
char	O
sum	char
;	O
sum	char
=	O
p	array(char)
[	O
0	int
]	O
+	O
p	array(char)
[	O
2	int
]	O
+	O
p	array(char)
[	O
3	int
]	O
;	O
sum	char
|=	O
0x80	int
;	O
return	O
(	O
sum	char
)	O
;	O
}	O
static	O
GmpResult	enum(int,int,int,int,int,int,int)
parsePacket	(*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int)),*(int),*(int),*(*(char)))->(enum(int,int,int,int,int,int,int))
(	O
Gmp	struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int)
*	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
,	O
int	O
*	O
out1	*(int)
,	O
int	O
*	O
out2	*(int)
,	O
const	O
char	O
*	O
*	O
error	*(*(char))
)	O
{	O
int	O
seq	int
,	O
ack	int
,	O
val	int
;	O
Command	enum(int,int,int,int,int,int,int)
command	enum(int,int,int,int,int,int,int)
;	O
GmpResult	enum(int,int,int,int,int,int,int)
result	enum(int,int,int,int,int,int,int)
;	O
seq	int
=	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
recvData	array(char)
[	O
0	int
]	O
&	O
1	int
;	O
ack	int
=	O
(	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
recvData	array(char)
[	O
0	int
]	O
&	O
2	int
)	O
>>	O
1	int
;	O
if	O
(	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
recvData	array(char)
[	O
2	int
]	O
&	O
0x08	int
)	O
{	O
if	O
(	O
gmp_debug	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"GMP: Unknown command byte 0x%x received.\n"	*(char)
,	O
(	O
unsigned	O
int	O
)	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
recvData	array(char)
[	O
2	int
]	O
)	O
;	O
}	O
return	O
(	O
gmp_nothing	int
)	O
;	O
}	O
command	enum(int,int,int,int,int,int,int)
=	O
(	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
recvData	array(char)
[	O
2	int
]	O
>>	O
4	int
)	O
&	O
7	int
;	O
val	int
=	O
(	O
(	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
recvData	array(char)
[	O
2	int
]	O
&	O
7	int
)	O
<<	O
7	int
)	O
|	O
(	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
recvData	array(char)
[	O
3	int
]	O
&	O
0x7f	int
)	O
;	O
if	O
(	O
gmp_debug	int
)	O
{	O
if	O
(	O
command	enum(int,int,int,int,int,int,int)
==	O
cmd_query	int
)	O
{	O
if	O
(	O
val	int
>=	O
query_max	int
)	O
{	O
if	O
(	O
gmp_debug	int
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"GMP: Read in command: %s unkown value %d\n"	*(char)
,	O
commandNames	array(*(char))
[	O
command	enum(int,int,int,int,int,int,int)
]	O
,	O
val	int
)	O
;	O
}	O
else	O
{	O
if	O
(	O
gmp_debug	int
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"GMP: Read in command: %s %s\n"	*(char)
,	O
commandNames	array(*(char))
[	O
command	enum(int,int,int,int,int,int,int)
]	O
,	O
queryNames	array(*(char))
[	O
val	int
]	O
)	O
;	O
}	O
}	O
else	O
{	O
if	O
(	O
gmp_debug	int
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"GMP: Read in command: %s\n"	*(char)
,	O
commandNames	array(*(char))
[	O
command	enum(int,int,int,int,int,int,int)
]	O
)	O
;	O
}	O
}	O
if	O
(	O
!	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
waitingHighAck	int
)	O
{	O
if	O
(	O
(	O
command	enum(int,int,int,int,int,int,int)
==	O
cmd_ack	int
)	O
||	O
(	O
ack	int
!=	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
myLastSeq	int
)	O
)	O
{	O
if	O
(	O
gmp_debug	int
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"GMP: Unexpected ACK.\n"	*(char)
)	O
;	O
return	O
(	O
gmp_nothing	int
)	O
;	O
}	O
else	O
if	O
(	O
seq	int
==	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
hisLastSeq	int
)	O
{	O
if	O
(	O
gmp_debug	int
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"GMP: Received repeated message.\n"	*(char)
)	O
;	O
putCommand	(*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int)),enum(int,int,int,int,int,int,int),int)->(void)
(	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
,	O
cmd_ack	int
,	O
~	O
0	int
)	O
;	O
}	O
else	O
{	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
hisLastSeq	int
=	O
seq	int
;	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
sendFailures	int
=	O
0	int
;	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
noResponseSecs	int
=	O
0	int
;	O
return	O
(	O
processCommand	(*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int)),enum(int,int,int,int,int,int,int),int,*(int),*(int),*(*(char)))->(enum(int,int,int,int,int,int,int))
(	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
,	O
command	enum(int,int,int,int,int,int,int)
,	O
val	int
,	O
out1	*(int)
,	O
out2	*(int)
,	O
error	*(*(char))
)	O
)	O
;	O
}	O
}	O
else	O
{	O
if	O
(	O
command	enum(int,int,int,int,int,int,int)
==	O
cmd_ack	int
)	O
{	O
if	O
(	O
(	O
ack	int
!=	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
myLastSeq	int
)	O
||	O
(	O
seq	int
!=	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
hisLastSeq	int
)	O
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"Sequence error.\n"	*(char)
)	O
;	O
return	O
(	O
gmp_nothing	int
)	O
;	O
}	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
sendFailures	int
=	O
0	int
;	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
noResponseSecs	int
=	O
0	int
;	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
waitingHighAck	int
=	O
0	int
;	O
if	O
(	O
!	O
gmp_verified	O
(	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
)	O
)	O
{	O
askQuery	(*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int)))->(void)
(	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
)	O
;	O
}	O
processQ	(*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int)))->(void)
(	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
)	O
;	O
}	O
else	O
if	O
(	O
(	O
command	enum(int,int,int,int,int,int,int)
==	O
cmd_reset	int
)	O
&&	O
(	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
iAmWhite	int
==	O
-	O
1	int
)	O
)	O
{	O
if	O
(	O
gmp_debug	int
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"gmp/his last seq = %d\n"	*(char)
,	O
seq	int
)	O
;	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
hisLastSeq	int
=	O
seq	int
;	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
waitingHighAck	int
=	O
0	int
;	O
return	O
(	O
processCommand	(*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int)),enum(int,int,int,int,int,int,int),int,*(int),*(int),*(*(char)))->(enum(int,int,int,int,int,int,int))
(	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
,	O
command	enum(int,int,int,int,int,int,int)
,	O
val	int
,	O
out1	*(int)
,	O
out2	*(int)
,	O
error	*(*(char))
)	O
)	O
;	O
}	O
else	O
if	O
(	O
seq	int
==	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
hisLastSeq	int
)	O
{	O
}	O
else	O
if	O
(	O
ack	int
==	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
myLastSeq	int
)	O
{	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
sendFailures	int
=	O
0	int
;	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
noResponseSecs	int
=	O
0	int
;	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
waitingHighAck	int
=	O
0	int
;	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
hisLastSeq	int
=	O
seq	int
;	O
result	enum(int,int,int,int,int,int,int)
=	O
processCommand	(*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int)),enum(int,int,int,int,int,int,int),int,*(int),*(int),*(*(char)))->(enum(int,int,int,int,int,int,int))
(	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
,	O
command	enum(int,int,int,int,int,int,int)
,	O
val	int
,	O
out1	*(int)
,	O
out2	*(int)
,	O
error	*(*(char))
)	O
;	O
processQ	(*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int)))->(void)
(	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
)	O
;	O
return	O
(	O
result	enum(int,int,int,int,int,int,int)
)	O
;	O
}	O
else	O
{	O
if	O
(	O
gmp_debug	int
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"Sending conflict.\n"	*(char)
)	O
;	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
myLastSeq	int
=	O
1	int
-	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
myLastSeq	int
;	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
waitingHighAck	int
=	O
0	int
;	O
processQ	(*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int)))->(void)
(	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
)	O
;	O
}	O
}	O
return	O
(	O
gmp_nothing	int
)	O
;	O
}	O
static	O
GmpResult	enum(int,int,int,int,int,int,int)
processCommand	(*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int)),enum(int,int,int,int,int,int,int),int,*(int),*(int),*(*(char)))->(enum(int,int,int,int,int,int,int))
(	O
Gmp	struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int)
*	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
,	O
Command	enum(int,int,int,int,int,int,int)
command	enum(int,int,int,int,int,int,int)
,	O
int	O
val	int
,	O
int	O
*	O
out1	*(int)
,	O
int	O
*	O
out2	*(int)
,	O
const	O
char	O
*	O
*	O
error	*(*(char))
)	O
{	O
int	O
s	int
,	O
x	int
,	O
y	int
;	O
switch	O
(	O
command	enum(int,int,int,int,int,int,int)
)	O
{	O
case	O
cmd_deny	int
:	O
putCommand	(*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int)),enum(int,int,int,int,int,int,int),int)->(void)
(	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
,	O
cmd_ack	int
,	O
~	O
0	int
)	O
;	O
break	O
;	O
case	O
cmd_query	int
:	O
return	O
(	O
respond	(*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int)),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int))->(enum(int,int,int,int,int,int,int))
(	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
,	O
val	int
)	O
)	O
;	O
break	O
;	O
case	O
cmd_reset	int
:	O
if	O
(	O
gmp_debug	int
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"GMP: Resetted.  New game.\n"	*(char)
)	O
;	O
askQuery	(*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int)))->(void)
(	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
)	O
;	O
return	O
(	O
gmp_reset	int
)	O
;	O
break	O
;	O
case	O
cmd_undo	int
:	O
putCommand	(*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int)),enum(int,int,int,int,int,int,int),int)->(void)
(	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
,	O
cmd_ack	int
,	O
~	O
0	int
)	O
;	O
*	O
out1	*(int)
=	O
val	int
;	O
return	O
(	O
gmp_undo	int
)	O
;	O
break	O
;	O
case	O
cmd_move	int
:	O
s	int
=	O
val	int
&	O
0x1ff	int
;	O
if	O
(	O
s	int
==	O
0	int
)	O
{	O
x	int
=	O
-	O
1	int
;	O
y	int
=	O
0	int
;	O
}	O
else	O
if	O
(	O
s	int
==	O
0x1ff	int
)	O
{	O
x	int
=	O
-	O
2	int
;	O
y	int
=	O
0	int
;	O
}	O
else	O
{	O
--	O
s	int
;	O
x	int
=	O
(	O
s	int
%	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
boardSize	int
)	O
;	O
y	int
=	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
boardSize	int
-	O
1	int
-	O
(	O
s	int
/	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
boardSize	int
)	O
;	O
}	O
putCommand	(*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int)),enum(int,int,int,int,int,int,int),int)->(void)
(	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
,	O
cmd_ack	int
,	O
~	O
0	int
)	O
;	O
if	O
(	O
x	int
==	O
-	O
1	int
)	O
return	O
(	O
gmp_pass	int
)	O
;	O
else	O
{	O
if	O
(	O
gmp_verified	O
(	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
)	O
)	O
{	O
*	O
out1	*(int)
=	O
x	int
;	O
*	O
out2	*(int)
=	O
y	int
;	O
return	O
(	O
gmp_move	int
)	O
;	O
}	O
else	O
{	O
assert	O
(	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
earlyMovePresent	int
==	O
0	int
)	O
;	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
earlyMovePresent	int
=	O
1	int
;	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
earlyMoveX	int
=	O
x	int
;	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
earlyMoveY	int
=	O
y	int
;	O
askQuery	(*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int)))->(void)
(	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
)	O
;	O
}	O
}	O
break	O
;	O
case	O
cmd_respond	int
:	O
return	O
(	O
gotQueryResponse	(*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int)),int,*(*(char)))->(enum(int,int,int,int,int,int,int))
(	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
,	O
val	int
,	O
error	*(*(char))
)	O
)	O
;	O
break	O
;	O
default	O
:	O
putCommand	(*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int)),enum(int,int,int,int,int,int,int),int)->(void)
(	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
,	O
cmd_deny	int
,	O
0	int
)	O
;	O
break	O
;	O
}	O
return	O
(	O
gmp_nothing	int
)	O
;	O
}	O
static	O
void	O
putCommand	(*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int)),enum(int,int,int,int,int,int,int),int)->(void)
(	O
Gmp	struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int)
*	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
,	O
Command	enum(int,int,int,int,int,int,int)
cmd	int
,	O
int	O
val	int
)	O
{	O
if	O
(	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
waitingHighAck	int
&&	O
(	O
cmd	int
!=	O
cmd_ack	int
)	O
&&	O
(	O
cmd	int
!=	O
cmd_respond	int
)	O
&&	O
(	O
cmd	int
!=	O
cmd_deny	int
)	O
)	O
{	O
if	O
(	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
sendsQueued	int
<	O
1024	int
)	O
{	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
sendsPending	array(struct(int,int))
[	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
sendsQueued	int
]	O
.	O
cmd	int
=	O
cmd	int
;	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
sendsPending	array(struct(int,int))
[	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
sendsQueued	int
]	O
.	O
val	int
=	O
val	int
;	O
++	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
sendsQueued	int
;	O
}	O
else	O
{	O
if	O
(	O
gmp_debug	int
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"GMP: Send buffer full.  Catastrophic error."	*(char)
)	O
;	O
exit	(int)->(void)
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
return	O
;	O
}	O
if	O
(	O
(	O
cmd	int
==	O
cmd_ack	int
)	O
&&	O
(	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
sendsQueued	int
)	O
)	O
{	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
waitingHighAck	int
=	O
0	int
;	O
processQ	(*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int)))->(void)
(	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
)	O
;	O
return	O
;	O
}	O
if	O
(	O
cmd	int
!=	O
cmd_ack	int
)	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
myLastSeq	int
^=	O
1	int
;	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
sendData	array(char)
[	O
0	int
]	O
=	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
myLastSeq	int
|	O
(	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
hisLastSeq	int
<<	O
1	int
)	O
;	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
sendData	array(char)
[	O
2	int
]	O
=	O
0x80	int
|	O
(	O
cmd	int
<<	O
4	int
)	O
|	O
(	O
(	O
val	int
>>	O
7	int
)	O
&	O
7	int
)	O
;	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
sendData	array(char)
[	O
3	int
]	O
=	O
0x80	int
|	O
val	int
;	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
sendData	array(char)
[	O
1	int
]	O
=	O
checksum	(array(char))->(char)
(	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
sendData	array(char)
)	O
;	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
lastSendTime	long
=	O
time	(*(long))->(long)
(	O
NULL	O
)	O
;	O
if	O
(	O
gmp_debug	int
)	O
{	O
if	O
(	O
cmd	int
==	O
cmd_query	int
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"GMP: Sending command: %s %s\n"	*(char)
,	O
commandNames	array(*(char))
[	O
cmd	int
]	O
,	O
queryNames	array(*(char))
[	O
val	int
]	O
)	O
;	O
else	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"GMP: Sending command: %s\n"	*(char)
,	O
commandNames	array(*(char))
[	O
cmd	int
]	O
)	O
;	O
}	O
write	(int,*(void),long)->(long)
(	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
outFile	int
,	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
sendData	array(char)
,	O
4	int
)	O
;	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
waitingHighAck	int
=	O
(	O
cmd	int
!=	O
cmd_ack	int
)	O
;	O
return	O
;	O
}	O
static	O
GmpResult	enum(int,int,int,int,int,int,int)
respond	(*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int)),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int))->(enum(int,int,int,int,int,int,int))
(	O
Gmp	struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int)
*	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
,	O
Query	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int)
query	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int)
)	O
{	O
int	O
response	int
;	O
int	O
wasVerified	int
;	O
wasVerified	int
=	O
gmp_verified	O
(	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
)	O
;	O
if	O
(	O
query	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int)
&	O
0x200	int
)	O
{	O
response	int
=	O
0	int
;	O
}	O
else	O
{	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
waitingHighAck	int
=	O
1	int
;	O
switch	O
(	O
query	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int)
)	O
{	O
case	O
query_game	int
:	O
response	int
=	O
1	int
;	O
break	O
;	O
case	O
query_rules	int
:	O
if	O
(	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
chineseRules	int
==	O
-	O
1	int
)	O
{	O
response	int
=	O
0	int
;	O
}	O
else	O
{	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
rulesVerified	int
=	O
1	int
;	O
if	O
(	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
chineseRules	int
==	O
1	int
)	O
response	int
=	O
2	int
;	O
else	O
response	int
=	O
1	int
;	O
}	O
break	O
;	O
case	O
query_handicap	int
:	O
if	O
(	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
handicap	int
==	O
-	O
1	int
)	O
response	int
=	O
0	int
;	O
else	O
{	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
handicapVerified	int
=	O
1	int
;	O
response	int
=	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
handicap	int
;	O
if	O
(	O
response	int
==	O
0	int
)	O
response	int
=	O
1	int
;	O
}	O
break	O
;	O
case	O
query_boardSize	int
:	O
if	O
(	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
boardSize	int
==	O
-	O
1	int
)	O
{	O
response	int
=	O
0	int
;	O
}	O
else	O
{	O
response	int
=	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
boardSize	int
;	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
sizeVerified	int
=	O
1	int
;	O
}	O
break	O
;	O
case	O
query_color	int
:	O
if	O
(	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
iAmWhite	int
==	O
-	O
1	int
)	O
{	O
response	int
=	O
0	int
;	O
}	O
else	O
{	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
colorVerified	int
=	O
1	int
;	O
if	O
(	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
iAmWhite	int
)	O
response	int
=	O
1	int
;	O
else	O
response	int
=	O
2	int
;	O
}	O
break	O
;	O
default	O
:	O
response	int
=	O
0	int
;	O
break	O
;	O
}	O
}	O
putCommand	(*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int)),enum(int,int,int,int,int,int,int),int)->(void)
(	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
,	O
cmd_respond	int
,	O
response	int
)	O
;	O
if	O
(	O
!	O
wasVerified	int
&&	O
gmp_verified	O
(	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
)	O
)	O
{	O
if	O
(	O
gmp_debug	int
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"GMP: New game ready.\n"	*(char)
)	O
;	O
return	O
(	O
gmp_newGame	int
)	O
;	O
}	O
else	O
{	O
return	O
(	O
gmp_nothing	int
)	O
;	O
}	O
}	O
static	O
void	O
askQuery	(*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int)))->(void)
(	O
Gmp	struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int)
*	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
)	O
{	O
if	O
(	O
!	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
simplified	int
)	O
{	O
if	O
(	O
!	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
rulesVerified	int
)	O
{	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
lastQuerySent	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int)
=	O
query_rules	int
;	O
}	O
else	O
if	O
(	O
!	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
sizeVerified	int
)	O
{	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
lastQuerySent	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int)
=	O
query_boardSize	int
;	O
}	O
else	O
if	O
(	O
!	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
handicapVerified	int
)	O
{	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
lastQuerySent	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int)
=	O
query_handicap	int
;	O
}	O
else	O
{	O
assert	O
(	O
!	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
colorVerified	int
)	O
;	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
lastQuerySent	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int)
=	O
query_color	int
;	O
}	O
}	O
else	O
{	O
if	O
(	O
!	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
colorVerified	int
)	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
lastQuerySent	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int)
=	O
query_color	int
;	O
else	O
if	O
(	O
!	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
handicapVerified	int
)	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
lastQuerySent	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int)
=	O
query_handicap	int
;	O
}	O
putCommand	(*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int)),enum(int,int,int,int,int,int,int),int)->(void)
(	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
,	O
cmd_query	int
,	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
lastQuerySent	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int)
)	O
;	O
}	O
static	O
GmpResult	enum(int,int,int,int,int,int,int)
gotQueryResponse	(*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int)),int,*(*(char)))->(enum(int,int,int,int,int,int,int))
(	O
Gmp	struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int)
*	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
,	O
int	O
val	int
,	O
const	O
char	O
*	O
*	O
err	*(*(char))
)	O
{	O
static	O
const	O
char	O
*	O
ruleNames	array(*(char))
[	O
]	O
=	O
{	O
"Japanese"	*(char)
,	O
"Chinese"	*(char)
}	O
;	O
static	O
const	O
char	O
*	O
colorNames	array(*(char))
[	O
]	O
=	O
{	O
"Black"	*(char)
,	O
"White"	*(char)
}	O
;	O
static	O
char	O
errOut	array(char)
[	O
200	int
]	O
;	O
switch	O
(	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
lastQuerySent	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int)
)	O
{	O
case	O
query_handicap	int
:	O
if	O
(	O
val	int
<=	O
1	int
)	O
--	O
val	int
;	O
if	O
(	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
handicap	int
==	O
-	O
1	int
)	O
{	O
if	O
(	O
val	int
==	O
-	O
1	int
)	O
{	O
sprintf	(*(char),*(char))->(int)
(	O
errOut	array(char)
,	O
"Neither player knows what the handicap should be."	*(char)
)	O
;	O
*	O
err	*(*(char))
=	O
errOut	array(char)
;	O
return	O
(	O
gmp_err	int
)	O
;	O
}	O
else	O
{	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
handicap	int
=	O
val	int
;	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
handicapVerified	int
=	O
1	int
;	O
}	O
}	O
else	O
{	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
handicapVerified	int
=	O
1	int
;	O
if	O
(	O
(	O
val	int
!=	O
-	O
1	int
)	O
&&	O
(	O
val	int
!=	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
handicap	int
)	O
)	O
{	O
sprintf	(*(char),*(char))->(int)
(	O
errOut	array(char)
,	O
"Handicaps do not agree; I want %d, he wants %d."	*(char)
,	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
handicap	int
,	O
val	int
)	O
;	O
*	O
err	*(*(char))
=	O
errOut	array(char)
;	O
return	O
(	O
gmp_err	int
)	O
;	O
}	O
}	O
break	O
;	O
case	O
query_boardSize	int
:	O
if	O
(	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
boardSize	int
==	O
-	O
1	int
)	O
{	O
if	O
(	O
val	int
==	O
0	int
)	O
{	O
sprintf	(*(char),*(char))->(int)
(	O
errOut	array(char)
,	O
"Neither player knows what the board size should be."	*(char)
)	O
;	O
*	O
err	*(*(char))
=	O
errOut	array(char)
;	O
return	O
(	O
gmp_err	int
)	O
;	O
}	O
else	O
{	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
boardSize	int
=	O
val	int
;	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
sizeVerified	int
=	O
1	int
;	O
}	O
}	O
else	O
{	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
sizeVerified	int
=	O
1	int
;	O
if	O
(	O
(	O
val	int
!=	O
0	int
)	O
&&	O
(	O
val	int
!=	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
boardSize	int
)	O
)	O
{	O
sprintf	(*(char),*(char))->(int)
(	O
errOut	array(char)
,	O
"Board sizes do not agree; I want %d, he wants %d."	*(char)
,	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
boardSize	int
,	O
val	int
)	O
;	O
*	O
err	*(*(char))
=	O
errOut	array(char)
;	O
return	O
(	O
gmp_err	int
)	O
;	O
}	O
}	O
break	O
;	O
case	O
query_rules	int
:	O
if	O
(	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
chineseRules	int
==	O
-	O
1	int
)	O
{	O
if	O
(	O
val	int
==	O
0	int
)	O
{	O
sprintf	(*(char),*(char))->(int)
(	O
errOut	array(char)
,	O
"Neither player knows what rule set to use."	*(char)
)	O
;	O
*	O
err	*(*(char))
=	O
errOut	array(char)
;	O
return	O
(	O
gmp_err	int
)	O
;	O
}	O
else	O
{	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
chineseRules	int
=	O
val	int
-	O
1	int
;	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
rulesVerified	int
=	O
1	int
;	O
}	O
}	O
else	O
{	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
rulesVerified	int
=	O
1	int
;	O
if	O
(	O
val	int
!=	O
0	int
)	O
{	O
if	O
(	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
chineseRules	int
!=	O
(	O
val	int
==	O
2	int
)	O
)	O
{	O
sprintf	(*(char),*(char))->(int)
(	O
errOut	array(char)
,	O
"Rule sets do not agree; I want %s, he wants %s."	*(char)
,	O
ruleNames	array(*(char))
[	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
chineseRules	int
]	O
,	O
ruleNames	array(*(char))
[	O
val	int
==	O
2	int
]	O
)	O
;	O
*	O
err	*(*(char))
=	O
errOut	array(char)
;	O
return	O
(	O
gmp_err	int
)	O
;	O
}	O
}	O
}	O
break	O
;	O
case	O
query_color	int
:	O
if	O
(	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
iAmWhite	int
==	O
-	O
1	int
)	O
{	O
if	O
(	O
val	int
==	O
0	int
)	O
{	O
sprintf	(*(char),*(char))->(int)
(	O
errOut	array(char)
,	O
"Neither player knows who is which color."	*(char)
)	O
;	O
*	O
err	*(*(char))
=	O
errOut	array(char)
;	O
return	O
(	O
gmp_err	int
)	O
;	O
}	O
else	O
{	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
iAmWhite	int
=	O
!	O
(	O
val	int
==	O
1	int
)	O
;	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
colorVerified	int
=	O
1	int
;	O
}	O
}	O
else	O
{	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
colorVerified	int
=	O
1	int
;	O
if	O
(	O
val	int
!=	O
0	int
)	O
{	O
if	O
(	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
iAmWhite	int
==	O
(	O
val	int
==	O
1	int
)	O
)	O
{	O
sprintf	(*(char),*(char))->(int)
(	O
errOut	array(char)
,	O
"Colors do not agree; we both want to be %s."	*(char)
,	O
colorNames	array(*(char))
[	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
iAmWhite	int
]	O
)	O
;	O
*	O
err	*(*(char))
=	O
errOut	array(char)
;	O
return	O
(	O
gmp_err	int
)	O
;	O
}	O
}	O
}	O
break	O
;	O
default	O
:	O
break	O
;	O
}	O
if	O
(	O
!	O
gmp_verified	O
(	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
)	O
)	O
{	O
askQuery	(*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int)))->(void)
(	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
)	O
;	O
return	O
(	O
gmp_nothing	int
)	O
;	O
}	O
else	O
{	O
putCommand	(*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int)),enum(int,int,int,int,int,int,int),int)->(void)
(	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
,	O
cmd_ack	int
,	O
~	O
0	int
)	O
;	O
if	O
(	O
gmp_debug	int
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"GMP: New game ready.\n"	*(char)
)	O
;	O
return	O
(	O
gmp_newGame	int
)	O
;	O
}	O
}	O
static	O
int	O
heartbeat	(*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int)))->(int)
(	O
Gmp	struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int)
*	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
)	O
{	O
Command	enum(int,int,int,int,int,int,int)
cmd	int
;	O
if	O
(	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
waitingHighAck	int
)	O
{	O
if	O
(	O
++	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
noResponseSecs	int
>	O
(	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
simplified	int
?	O
SGMP_RETRYSECS	int
:	O
GMP_RETRYSECS	int
)	O
)	O
{	O
if	O
(	O
++	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
sendFailures	int
>	O
(	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
simplified	int
?	O
SGMP_TIMEOUTRETRIES	int
:	O
GMP_TIMEOUTRETRIES	int
)	O
)	O
{	O
return	O
(	O
0	int
)	O
;	O
}	O
else	O
{	O
if	O
(	O
gmp_debug	int
)	O
{	O
cmd	int
=	O
(	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
sendData	array(char)
[	O
2	int
]	O
>>	O
4	int
)	O
&	O
7	int
;	O
if	O
(	O
cmd	int
==	O
cmd_query	int
)	O
{	O
if	O
(	O
gmp_debug	int
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"GMP: Sending command: %s %s (retry)\n"	*(char)
,	O
commandNames	array(*(char))
[	O
cmd	int
]	O
,	O
queryNames	array(*(char))
[	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
sendData	array(char)
[	O
3	int
]	O
&	O
0x7f	int
]	O
)	O
;	O
}	O
else	O
if	O
(	O
gmp_debug	int
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"GMP: Sending command: %s (retry)\n"	*(char)
,	O
commandNames	array(*(char))
[	O
cmd	int
]	O
)	O
;	O
}	O
write	(int,*(void),long)->(long)
(	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
outFile	int
,	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
sendData	array(char)
,	O
4	int
)	O
;	O
}	O
}	O
}	O
return	O
(	O
1	int
)	O
;	O
}	O
void	O
gmp_startGame	(*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int)),int,int,float,int,int,int)->(void)
(	O
Gmp	struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int)
*	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
,	O
int	O
size	int
,	O
int	O
handicap	int
,	O
float	O
komi	float
,	O
int	O
chineseRules	int
,	O
int	O
iAmWhite	int
,	O
int	O
simplified	int
)	O
{	O
assert	O
(	O
(	O
size	int
==	O
-	O
1	int
)	O
||	O
(	O
(	O
size	int
>	O
1	int
)	O
&&	O
(	O
size	int
<=	O
22	int
)	O
)	O
)	O
;	O
assert	O
(	O
(	O
handicap	int
>=	O
-	O
1	int
)	O
&&	O
(	O
handicap	int
<=	O
27	int
)	O
)	O
;	O
assert	O
(	O
(	O
chineseRules	int
>=	O
-	O
1	int
)	O
&&	O
(	O
chineseRules	int
<=	O
1	int
)	O
)	O
;	O
assert	O
(	O
(	O
iAmWhite	int
>=	O
-	O
1	int
)	O
&&	O
(	O
iAmWhite	int
<=	O
1	int
)	O
)	O
;	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
boardSize	int
=	O
size	int
;	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
sizeVerified	int
=	O
simplified	int
;	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
handicap	int
=	O
handicap	int
;	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
handicapVerified	int
=	O
0	int
;	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
komi	float
=	O
komi	float
;	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
chineseRules	int
=	O
chineseRules	int
;	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
rulesVerified	int
=	O
simplified	int
;	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
iAmWhite	int
=	O
iAmWhite	int
;	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
colorVerified	int
=	O
0	int
;	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
earlyMovePresent	int
=	O
0	int
;	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
simplified	int
=	O
simplified	int
;	O
if	O
(	O
iAmWhite	int
!=	O
1	int
)	O
{	O
putCommand	(*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int)),enum(int,int,int,int,int,int,int),int)->(void)
(	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
,	O
cmd_reset	int
,	O
0	int
)	O
;	O
}	O
}	O
void	O
gmp_sendPass	(*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int)))->(void)
(	O
Gmp	struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int)
*	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
)	O
{	O
int	O
arg	int
;	O
if	O
(	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
iAmWhite	int
)	O
arg	int
=	O
0x200	int
;	O
else	O
arg	int
=	O
0	int
;	O
putCommand	(*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int)),enum(int,int,int,int,int,int,int),int)->(void)
(	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
,	O
cmd_move	int
,	O
arg	int
)	O
;	O
}	O
void	O
gmp_sendMove	(*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int)),int,int)->(void)
(	O
Gmp	struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int)
*	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
,	O
int	O
x	int
,	O
int	O
y	int
)	O
{	O
int	O
val	int
;	O
val	int
=	O
x	int
+	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
boardSize	int
*	O
(	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
boardSize	int
-	O
1	int
-	O
y	int
)	O
+	O
1	int
;	O
if	O
(	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
iAmWhite	int
)	O
val	int
|=	O
0x200	int
;	O
putCommand	(*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int)),enum(int,int,int,int,int,int,int),int)->(void)
(	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
,	O
cmd_move	int
,	O
val	int
)	O
;	O
}	O
void	O
gmp_sendUndo	(*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int)),int)->(void)
(	O
Gmp	struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int)
*	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
,	O
int	O
numUndos	int
)	O
{	O
putCommand	(*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int)),enum(int,int,int,int,int,int,int),int)->(void)
(	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
,	O
cmd_undo	int
,	O
numUndos	int
)	O
;	O
}	O
const	O
char	O
*	O
gmp_resultString	(enum(int,int,int,int,int,int,int))->(*(char))
(	O
GmpResult	enum(int,int,int,int,int,int,int)
result	enum(int,int,int,int,int,int,int)
)	O
{	O
static	O
const	O
char	O
*	O
names	array(*(char))
[	O
]	O
=	O
{	O
"Nothing"	*(char)
,	O
"Move"	*(char)
,	O
"Pass"	*(char)
,	O
"Reset"	*(char)
,	O
"New game"	*(char)
,	O
"Undo"	*(char)
,	O
"Error"	*(char)
}	O
;	O
assert	O
(	O
result	enum(int,int,int,int,int,int,int)
<=	O
gmp_err	int
)	O
;	O
return	O
(	O
names	array(*(char))
[	O
result	enum(int,int,int,int,int,int,int)
]	O
)	O
;	O
}	O
int	O
gmp_size	(*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int)))->(int)
(	O
Gmp	struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int)
*	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
)	O
{	O
return	O
(	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
boardSize	int
)	O
;	O
}	O
int	O
gmp_handicap	(*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int)))->(int)
(	O
Gmp	struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int)
*	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
)	O
{	O
return	O
(	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
handicap	int
)	O
;	O
}	O
float	O
gmp_komi	(*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int)))->(float)
(	O
Gmp	struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int)
*	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
)	O
{	O
return	O
(	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
komi	float
)	O
;	O
}	O
int	O
gmp_chineseRules	(*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int)))->(int)
(	O
Gmp	struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int)
*	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
)	O
{	O
return	O
(	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
chineseRules	int
)	O
;	O
}	O
int	O
gmp_iAmWhite	(*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int)))->(int)
(	O
Gmp	struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int)
*	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
)	O
{	O
return	O
(	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
iAmWhite	int
)	O
;	O
}	O
static	O
void	O
processQ	(*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int)))->(void)
(	O
Gmp	struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int)
*	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
)	O
{	O
int	O
i	int
;	O
if	O
(	O
!	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
waitingHighAck	int
&&	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
sendsQueued	int
)	O
{	O
putCommand	(*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int)),enum(int,int,int,int,int,int,int),int)->(void)
(	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
,	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
sendsPending	array(struct(int,int))
[	O
0	int
]	O
.	O
cmd	int
,	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
sendsPending	array(struct(int,int))
[	O
0	int
]	O
.	O
val	int
)	O
;	O
--	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
sendsQueued	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
sendsQueued	int
;	O
++	O
i	int
)	O
{	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
sendsPending	array(struct(int,int))
[	O
i	int
]	O
=	O
ge	*(struct(int,int,int,int,int,int,float,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,int,int,array(char),array(char),array(struct(int,int)),int,int,int,int))
->	O
sendsPending	array(struct(int,int))
[	O
i	int
+	O
1	int
]	O
;	O
}	O
}	O
}	O
