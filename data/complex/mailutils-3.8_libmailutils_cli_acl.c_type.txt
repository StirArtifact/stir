static	O
const	O
char	O
*	O
getword	(*(struct(int,union(*(struct`),*(char),struct(long,*`)))),*(int))->(*(char))
(	O
mu_config_value_t	struct
*	O
val	*(char)
,	O
int	O
*	O
pn	*(int)
)	O
{	O
int	O
n	long
=	O
(	O
*	O
pn	*(int)
)	O
++	O
;	O
mu_config_value_t	struct
*	O
v	*(struct(int))
;	O
if	O
(	O
n	long
>=	O
val	*(char)
->	O
v	*(struct(int))
.	O
arg	*(char)
.	O
c	char
)	O
{	O
mu_error	(*(char))->(int)
(	O
_	O
(	O
"not enough arguments"	*(char)
)	O
)	O
;	O
return	O
NULL	O
;	O
}	O
v	*(struct(int))
=	O
&	O
val	*(char)
->	O
v	*(struct(int))
.	O
arg	*(char)
.	O
v	*(struct(int))
[	O
n	long
]	O
;	O
if	O
(	O
mu_cfg_assert_value_type	(*(struct(int,union(*(struct`),*(char),struct(long,*`)))),int)->(int)
(	O
v	*(struct(int))
,	O
MU_CFG_STRING	int
)	O
)	O
return	O
NULL	O
;	O
return	O
v	*(struct(int))
->	O
v	*(struct(int))
.	O
string	*(*(char))
;	O
}	O
static	O
int	O
parsearg	(*(struct(int,union(*(struct`),*(char),struct(long,*`)))),*(struct(int,int,array(char),array(char))),*(*(char)))->(int)
(	O
mu_config_value_t	struct
*	O
val	*(char)
,	O
struct	O
mu_cidr	struct(int,int,array(char),array(char))
*	O
cidr	*(struct(int,int,array(char),array(char)))
,	O
char	O
*	O
*	O
prest	*(*(char))
)	O
{	O
const	O
char	O
*	O
w	*(char)
;	O
int	O
n	long
=	O
0	int
;	O
int	O
rc	int
;	O
if	O
(	O
mu_cfg_assert_value_type	(*(struct(int,union(*(struct`),*(char),struct(long,*`)))),int)->(int)
(	O
val	*(char)
,	O
MU_CFG_ARRAY	int
)	O
)	O
return	O
1	int
;	O
w	*(char)
=	O
getword	(*(struct(int,union(*(struct`),*(char),struct(long,*`)))),*(int))->(*(char))
(	O
val	*(char)
,	O
&	O
n	long
)	O
;	O
if	O
(	O
!	O
w	*(char)
)	O
return	O
1	int
;	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
w	*(char)
,	O
"from"	*(char)
)	O
==	O
0	int
)	O
{	O
w	*(char)
=	O
getword	(*(struct(int,union(*(struct`),*(char),struct(long,*`)))),*(int))->(*(char))
(	O
val	*(char)
,	O
&	O
n	long
)	O
;	O
if	O
(	O
!	O
w	*(char)
)	O
return	O
1	int
;	O
}	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
w	*(char)
,	O
"any"	*(char)
)	O
==	O
0	int
)	O
cidr	*(struct(int,int,array(char),array(char)))
->	O
len	int
=	O
0	int
;	O
else	O
{	O
rc	int
=	O
mu_cidr_from_string	(*(struct(int,int,array(char),array(char))),*(char))->(int)
(	O
cidr	*(struct(int,int,array(char),array(char)))
,	O
w	*(char)
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_error	(*(char))->(int)
(	O
_	O
(	O
"invalid source CIDR: %s"	*(char)
)	O
,	O
mu_strerror	(int)->(*(char))
(	O
rc	int
)	O
)	O
;	O
return	O
1	int
;	O
}	O
}	O
if	O
(	O
prest	*(*(char))
)	O
{	O
if	O
(	O
n	long
==	O
val	*(char)
->	O
v	*(struct(int))
.	O
arg	*(char)
.	O
c	char
)	O
*	O
prest	*(*(char))
=	O
NULL	O
;	O
else	O
{	O
size_t	long
size	long
=	O
0	int
;	O
int	O
i	int
;	O
char	O
*	O
buf	*(char)
;	O
for	O
(	O
i	int
=	O
n	long
;	O
i	int
<	O
val	*(char)
->	O
v	*(struct(int))
.	O
arg	*(char)
.	O
c	char
;	O
i	int
++	O
)	O
{	O
if	O
(	O
mu_cfg_assert_value_type	(*(struct(int,union(*(struct`),*(char),struct(long,*`)))),int)->(int)
(	O
&	O
val	*(char)
->	O
v	*(struct(int))
.	O
arg	*(char)
.	O
v	*(struct(int))
[	O
i	int
]	O
,	O
MU_CFG_STRING	int
)	O
)	O
return	O
1	int
;	O
size	long
+=	O
strlen	(*(char))->(long)
(	O
val	*(char)
->	O
v	*(struct(int))
.	O
arg	*(char)
.	O
v	*(struct(int))
[	O
i	int
]	O
.	O
v	*(struct(int))
.	O
string	*(*(char))
)	O
+	O
1	int
;	O
}	O
buf	*(char)
=	O
malloc	(long)->(*(void))
(	O
size	long
)	O
;	O
if	O
(	O
!	O
buf	*(char)
)	O
{	O
mu_error	(*(char))->(int)
(	O
"%s"	*(char)
,	O
mu_strerror	(int)->(*(char))
(	O
errno	O
)	O
)	O
;	O
return	O
1	int
;	O
}	O
*	O
prest	*(*(char))
=	O
buf	*(char)
;	O
for	O
(	O
i	int
=	O
n	long
;	O
i	int
<	O
val	*(char)
->	O
v	*(struct(int))
.	O
arg	*(char)
.	O
c	char
;	O
i	int
++	O
)	O
{	O
if	O
(	O
i	int
>	O
n	long
)	O
*	O
buf	*(char)
++	O
=	O
' '	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
buf	*(char)
,	O
val	*(char)
->	O
v	*(struct(int))
.	O
arg	*(char)
.	O
v	*(struct(int))
[	O
i	int
]	O
.	O
v	*(struct(int))
.	O
string	*(*(char))
)	O
;	O
buf	*(char)
+=	O
strlen	(*(char))->(long)
(	O
buf	*(char)
)	O
;	O
}	O
*	O
buf	*(char)
=	O
0	int
;	O
}	O
}	O
else	O
if	O
(	O
n	long
!=	O
val	*(char)
->	O
v	*(struct(int))
.	O
arg	*(char)
.	O
c	char
)	O
{	O
mu_error	(*(char))->(int)
(	O
_	O
(	O
"junk after IP address"	*(char)
)	O
)	O
;	O
return	O
1	int
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
cb_allow	(*(void),*(struct(int,union(*(struct`),*(char),struct(long,*`)))))->(int)
(	O
void	O
*	O
data	*(void)
,	O
mu_config_value_t	struct
*	O
val	*(char)
)	O
{	O
int	O
rc	int
;	O
mu_acl_t	*(struct)
acl	*(*(struct))
=	O
*	O
(	O
mu_acl_t	*(struct)
*	O
)	O
data	*(void)
;	O
struct	O
mu_cidr	struct(int,int,array(char),array(char))
cidr	*(struct(int,int,array(char),array(char)))
;	O
if	O
(	O
parsearg	(*(struct(int,union(*(struct`),*(char),struct(long,*`)))),*(struct(int,int,array(char),array(char))),*(*(char)))->(int)
(	O
val	*(char)
,	O
&	O
cidr	*(struct(int,int,array(char),array(char)))
,	O
NULL	O
)	O
)	O
return	O
1	int
;	O
rc	int
=	O
mu_acl_append	(*(struct),enum(int,int,int,int,int),*(void),*(struct))->(int)
(	O
acl	*(*(struct))
,	O
mu_acl_accept	int
,	O
NULL	O
,	O
&	O
cidr	*(struct(int,int,array(char),array(char)))
)	O
;	O
if	O
(	O
rc	int
)	O
mu_error	(*(char))->(int)
(	O
_	O
(	O
"cannot append acl entry: %s"	*(char)
)	O
,	O
mu_strerror	(int)->(*(char))
(	O
rc	int
)	O
)	O
;	O
return	O
rc	int
;	O
}	O
static	O
int	O
cb_deny	(*(void),*(struct(int,union(*(struct`),*(char),struct(long,*`)))))->(int)
(	O
void	O
*	O
data	*(void)
,	O
mu_config_value_t	struct
*	O
val	*(char)
)	O
{	O
int	O
rc	int
;	O
mu_acl_t	*(struct)
acl	*(*(struct))
=	O
*	O
(	O
mu_acl_t	*(struct)
*	O
)	O
data	*(void)
;	O
struct	O
mu_cidr	struct(int,int,array(char),array(char))
cidr	*(struct(int,int,array(char),array(char)))
;	O
if	O
(	O
parsearg	(*(struct(int,union(*(struct`),*(char),struct(long,*`)))),*(struct(int,int,array(char),array(char))),*(*(char)))->(int)
(	O
val	*(char)
,	O
&	O
cidr	*(struct(int,int,array(char),array(char)))
,	O
NULL	O
)	O
)	O
return	O
1	int
;	O
rc	int
=	O
mu_acl_append	(*(struct),enum(int,int,int,int,int),*(void),*(struct))->(int)
(	O
acl	*(*(struct))
,	O
mu_acl_deny	int
,	O
NULL	O
,	O
&	O
cidr	*(struct(int,int,array(char),array(char)))
)	O
;	O
if	O
(	O
rc	int
)	O
mu_error	(*(char))->(int)
(	O
_	O
(	O
"cannot append acl entry: %s"	*(char)
)	O
,	O
mu_strerror	(int)->(*(char))
(	O
rc	int
)	O
)	O
;	O
return	O
rc	int
;	O
}	O
static	O
int	O
cb_log	(*(void),*(struct(int,union(*(struct`),*(char),struct(long,*`)))))->(int)
(	O
void	O
*	O
data	*(void)
,	O
mu_config_value_t	struct
*	O
val	*(char)
)	O
{	O
int	O
rc	int
;	O
mu_acl_t	*(struct)
acl	*(*(struct))
=	O
*	O
(	O
mu_acl_t	*(struct)
*	O
)	O
data	*(void)
;	O
struct	O
mu_cidr	struct(int,int,array(char),array(char))
cidr	*(struct(int,int,array(char),array(char)))
;	O
char	O
*	O
rest	*(char)
;	O
if	O
(	O
parsearg	(*(struct(int,union(*(struct`),*(char),struct(long,*`)))),*(struct(int,int,array(char),array(char))),*(*(char)))->(int)
(	O
val	*(char)
,	O
&	O
cidr	*(struct(int,int,array(char),array(char)))
,	O
&	O
rest	*(char)
)	O
)	O
return	O
1	int
;	O
rc	int
=	O
mu_acl_append	(*(struct),enum(int,int,int,int,int),*(void),*(struct))->(int)
(	O
acl	*(*(struct))
,	O
mu_acl_log	int
,	O
rest	*(char)
,	O
&	O
cidr	*(struct(int,int,array(char),array(char)))
)	O
;	O
if	O
(	O
rc	int
)	O
mu_error	(*(char))->(int)
(	O
_	O
(	O
"cannot append acl entry: %s"	*(char)
)	O
,	O
mu_strerror	(int)->(*(char))
(	O
rc	int
)	O
)	O
;	O
return	O
rc	int
;	O
}	O
static	O
int	O
cb_exec	(*(void),*(struct(int,union(*(struct`),*(char),struct(long,*`)))))->(int)
(	O
void	O
*	O
data	*(void)
,	O
mu_config_value_t	struct
*	O
val	*(char)
)	O
{	O
int	O
rc	int
;	O
mu_acl_t	*(struct)
acl	*(*(struct))
=	O
*	O
(	O
mu_acl_t	*(struct)
*	O
)	O
data	*(void)
;	O
struct	O
mu_cidr	struct(int,int,array(char),array(char))
cidr	*(struct(int,int,array(char),array(char)))
;	O
char	O
*	O
rest	*(char)
;	O
if	O
(	O
parsearg	(*(struct(int,union(*(struct`),*(char),struct(long,*`)))),*(struct(int,int,array(char),array(char))),*(*(char)))->(int)
(	O
val	*(char)
,	O
&	O
cidr	*(struct(int,int,array(char),array(char)))
,	O
&	O
rest	*(char)
)	O
)	O
return	O
1	int
;	O
rc	int
=	O
mu_acl_append	(*(struct),enum(int,int,int,int,int),*(void),*(struct))->(int)
(	O
acl	*(*(struct))
,	O
mu_acl_exec	int
,	O
rest	*(char)
,	O
&	O
cidr	*(struct(int,int,array(char),array(char)))
)	O
;	O
if	O
(	O
rc	int
)	O
mu_error	(*(char))->(int)
(	O
_	O
(	O
"cannot append acl entry: %s"	*(char)
)	O
,	O
mu_strerror	(int)->(*(char))
(	O
rc	int
)	O
)	O
;	O
return	O
rc	int
;	O
}	O
static	O
int	O
cb_ifexec	(*(void),*(struct(int,union(*(struct`),*(char),struct(long,*`)))))->(int)
(	O
void	O
*	O
data	*(void)
,	O
mu_config_value_t	struct
*	O
val	*(char)
)	O
{	O
int	O
rc	int
;	O
mu_acl_t	*(struct)
acl	*(*(struct))
=	O
*	O
(	O
mu_acl_t	*(struct)
*	O
)	O
data	*(void)
;	O
struct	O
mu_cidr	struct(int,int,array(char),array(char))
cidr	*(struct(int,int,array(char),array(char)))
;	O
char	O
*	O
rest	*(char)
;	O
if	O
(	O
parsearg	(*(struct(int,union(*(struct`),*(char),struct(long,*`)))),*(struct(int,int,array(char),array(char))),*(*(char)))->(int)
(	O
val	*(char)
,	O
&	O
cidr	*(struct(int,int,array(char),array(char)))
,	O
&	O
rest	*(char)
)	O
)	O
return	O
1	int
;	O
rc	int
=	O
mu_acl_append	(*(struct),enum(int,int,int,int,int),*(void),*(struct))->(int)
(	O
acl	*(*(struct))
,	O
mu_acl_ifexec	int
,	O
rest	*(char)
,	O
&	O
cidr	*(struct(int,int,array(char),array(char)))
)	O
;	O
if	O
(	O
rc	int
)	O
mu_error	(*(char))->(int)
(	O
_	O
(	O
"cannot append acl entry: %s"	*(char)
)	O
,	O
mu_strerror	(int)->(*(char))
(	O
rc	int
)	O
)	O
;	O
return	O
rc	int
;	O
}	O
static	O
struct	O
mu_cfg_param	struct(*(char),int,*(void),long,*((*(void),*(struct(int,union(*`,*`,struct`))))->(int)),*(char),*(char))
acl_param	array(struct(*(char),int,*(void),long,*((*(void),*(struct(int,union`)))->(int)),*(char),*(char)))
[	O
]	O
=	O
{	O
{	O
"allow"	*(char)
,	O
mu_cfg_callback	int
,	O
NULL	O
,	O
0	int
,	O
cb_allow	(*(void),*(struct(int,union(*(struct`),*(char),struct(long,*`)))))->(int)
,	O
N_	O
(	O
"Allow connections from this IP address. Optional word `from' is "	*(char)
"allowed between it and its argument. The same holds true for other "	*(char)
"actions below."	*(char)
)	O
,	O
N_	O
(	O
"addr: IP"	*(char)
)	O
}	O
,	O
{	O
"deny"	*(char)
,	O
mu_cfg_callback	int
,	O
NULL	O
,	O
0	int
,	O
cb_deny	(*(void),*(struct(int,union(*(struct`),*(char),struct(long,*`)))))->(int)
,	O
N_	O
(	O
"Deny connections from this IP address."	*(char)
)	O
,	O
N_	O
(	O
"addr: IP"	*(char)
)	O
}	O
,	O
{	O
"log"	*(char)
,	O
mu_cfg_callback	int
,	O
NULL	O
,	O
0	int
,	O
cb_log	(*(void),*(struct(int,union(*(struct`),*(char),struct(long,*`)))))->(int)
,	O
N_	O
(	O
"Log connections from this IP address."	*(char)
)	O
,	O
N_	O
(	O
"addr: IP"	*(char)
)	O
}	O
,	O
{	O
"exec"	*(char)
,	O
mu_cfg_callback	int
,	O
NULL	O
,	O
0	int
,	O
cb_exec	(*(void),*(struct(int,union(*(struct`),*(char),struct(long,*`)))))->(int)
,	O
N_	O
(	O
"Execute supplied program if a connection from this IP address is "	*(char)
"requested.\n\n"	*(char)
"The following macros are expanded in <program> before executing:\n"	*(char)
"  address  -  Source IP address\n"	*(char)
"  port     -  Source port number\n"	*(char)
)	O
,	O
N_	O
(	O
"addr: IP> <program: string"	*(char)
)	O
}	O
,	O
{	O
"ifexec"	*(char)
,	O
mu_cfg_callback	int
,	O
NULL	O
,	O
0	int
,	O
cb_ifexec	(*(void),*(struct(int,union(*(struct`),*(char),struct(long,*`)))))->(int)
,	O
N_	O
(	O
"If a connection from this IP address is requested, execute supplied "	*(char)
"program and allow or deny the connection depending on its exit code. "	*(char)
"See `exec' for a description of its arguments."	*(char)
)	O
,	O
N_	O
(	O
"addr: IP> <program: string"	*(char)
)	O
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
static	O
int	O
acl_section_parser	(enum(int,int),*(struct(struct(struct(*`,int,int),struct(*`,int,int)),enum(int,int,int),*(char),*(struct(int,union`)),*(struct),*(struct(struct`,enum(int,int,int),*`,*`,*`,*`)))),*(char),*(*(void)),*(void),*(struct(*(struct),*(struct))))->(int)
(	O
enum	O
mu_cfg_section_stage	enum(int,int)
stage	enum(int,int)
,	O
const	O
mu_cfg_node_t	struct
*	O
node	*(struct(struct(struct(*(char),int,int),struct(*(char),int,int)),enum(int,int,int),*(char),*(struct(int,union(*`,*`,struct`))),*(struct),*(struct(struct(struct`,struct`),enum(int,int,int),*(char),*(struct`),*(struct`),*(struct`)))))
,	O
const	O
char	O
*	O
section_label	*(char)
,	O
void	O
*	O
*	O
section_data	*(*(void))
,	O
void	O
*	O
call_data	*(void)
,	O
mu_cfg_tree_t	struct
*	O
tree	*(struct(*(struct),*(struct)))
)	O
{	O
switch	O
(	O
stage	enum(int,int)
)	O
{	O
case	O
mu_cfg_section_start	int
:	O
{	O
void	O
*	O
data	*(void)
=	O
*	O
section_data	*(*(void))
;	O
mu_acl_create	(*(*(struct)))->(int)
(	O
(	O
mu_acl_t	*(struct)
*	O
)	O
data	*(void)
)	O
;	O
}	O
break	O
;	O
case	O
mu_cfg_section_end	int
:	O
break	O
;	O
}	O
return	O
0	int
;	O
}	O
void	O
mu_acl_cfg_init	()->(void)
(	O
void	O
)	O
{	O
struct	O
mu_cfg_section	int
*	O
section	struct(*(char),*(char),*((enum(int,int),*(struct(struct`,enum(int,int,int),*`,*`,*`,*`)),*(char),*(*(void)),*(void),*(struct(*`,*`)))->(int)),*(void),long,*(struct),*(char),*(void))
;	O
if	O
(	O
mu_create_canned_section	(*(char),*(*(struct(*(char),*(char),*((enum(int,int),*`,*`,*`,*`,*`)->(int)),*(void),long,*(struct`),*(char),*(void)))))->(int)
(	O
"acl"	*(char)
,	O
&	O
section	struct(*(char),*(char),*((enum(int,int),*(struct(struct`,enum(int,int,int),*`,*`,*`,*`)),*(char),*(*(void)),*(void),*(struct(*`,*`)))->(int)),*(void),long,*(struct),*(char),*(void))
)	O
==	O
0	int
)	O
{	O
section	struct(*(char),*(char),*((enum(int,int),*(struct(struct`,enum(int,int,int),*`,*`,*`,*`)),*(char),*(*(void)),*(void),*(struct(*`,*`)))->(int)),*(void),long,*(struct),*(char),*(void))
->	O
parser	*((enum(int,int),*(struct(struct(struct`,struct`),enum(int,int,int),*(char),*(struct`),*(struct`),*(struct`))),*(char),*(*(void)),*(void),*(struct(*(struct`),*(struct`))))->(int))
=	O
acl_section_parser	(enum(int,int),*(struct(struct(struct(*`,int,int),struct(*`,int,int)),enum(int,int,int),*(char),*(struct(int,union`)),*(struct),*(struct(struct`,enum(int,int,int),*`,*`,*`,*`)))),*(char),*(*(void)),*(void),*(struct(*(struct),*(struct))))->(int)
;	O
mu_cfg_section_add_params	(*(struct(*(char),*(char),*((enum(int,int),*`,*`,*`,*`,*`)->(int)),*(void),long,*(struct),*(char),*(void))),*(struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char))))->(int)
(	O
section	struct(*(char),*(char),*((enum(int,int),*(struct(struct`,enum(int,int,int),*`,*`,*`,*`)),*(char),*(*(void)),*(void),*(struct(*`,*`)))->(int)),*(void),long,*(struct),*(char),*(void))
,	O
acl_param	array(struct(*(char),int,*(void),long,*((*(void),*(struct(int,union`)))->(int)),*(char),*(char)))
)	O
;	O
}	O
}	O
