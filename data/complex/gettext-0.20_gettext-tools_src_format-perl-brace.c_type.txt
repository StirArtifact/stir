struct	O
named_arg	O
{	O
char	O
*	O
name	*(char)
;	O
}	O
;	O
struct	O
spec	O
{	O
unsigned	O
int	O
directives	O
;	O
unsigned	O
int	O
named_arg_count	O
;	O
unsigned	O
int	O
allocated	O
;	O
struct	O
named_arg	O
*	O
named	O
;	O
}	O
;	O
static	O
int	O
named_arg_compare	O
(	O
const	O
void	O
*	O
p1	O
,	O
const	O
void	O
*	O
p2	O
)	O
{	O
return	O
strcmp	(*(char),*(char))->(int)
(	O
(	O
(	O
const	O
struct	O
named_arg	O
*	O
)	O
p1	O
)	O
->	O
name	*(char)
,	O
(	O
(	O
const	O
struct	O
named_arg	O
*	O
)	O
p2	O
)	O
->	O
name	*(char)
)	O
;	O
}	O
static	O
void	O
*	O
format_parse	O
(	O
const	O
char	O
*	O
format	O
,	O
bool	bool
translated	O
,	O
char	O
*	O
fdi	O
,	O
char	O
*	O
*	O
invalid_reason	O
)	O
{	O
const	O
char	O
*	O
const	O
format_start	O
=	O
format	O
;	O
struct	O
spec	O
spec	O
;	O
struct	O
spec	O
*	O
result	*(*(void))
;	O
spec	O
.	O
directives	O
=	O
0	int
;	O
spec	O
.	O
named_arg_count	O
=	O
0	int
;	O
spec	O
.	O
allocated	O
=	O
0	int
;	O
spec	O
.	O
named	O
=	O
NULL	O
;	O
for	O
(	O
;	O
*	O
format	O
!=	O
'\0'	O
;	O
)	O
if	O
(	O
*	O
format	O
++	O
==	O
'{'	O
)	O
{	O
const	O
char	O
*	O
f	O
=	O
format	O
;	O
char	O
c	O
;	O
c	O
=	O
*	O
f	O
;	O
if	O
(	O
(	O
c	O
>=	O
'A'	O
&&	O
c	O
<=	O
'Z'	O
)	O
||	O
(	O
c	O
>=	O
'a'	O
&&	O
c	O
<=	O
'z'	O
)	O
||	O
c	O
==	O
'_'	O
)	O
{	O
do	O
c	O
=	O
*	O
++	O
f	O
;	O
while	O
(	O
(	O
c	O
>=	O
'A'	O
&&	O
c	O
<=	O
'Z'	O
)	O
||	O
(	O
c	O
>=	O
'a'	O
&&	O
c	O
<=	O
'z'	O
)	O
||	O
c	O
==	O
'_'	O
||	O
(	O
c	O
>=	O
'0'	O
&&	O
c	O
<=	O
'9'	O
)	O
)	O
;	O
if	O
(	O
c	O
==	O
'}'	O
)	O
{	O
char	O
*	O
name	*(char)
;	O
const	O
char	O
*	O
name_start	O
=	O
format	O
;	O
const	O
char	O
*	O
name_end	O
=	O
f	O
;	O
size_t	long
n	long
=	O
name_end	O
-	O
name_start	O
;	O
FDI_SET	O
(	O
format	O
-	O
1	int
,	O
FMTDIR_START	O
)	O
;	O
name	*(char)
=	O
XNMALLOC	O
(	O
n	long
+	O
1	int
,	O
char	O
)	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
name	*(char)
,	O
name_start	O
,	O
n	long
)	O
;	O
name	*(char)
[	O
n	long
]	O
=	O
'\0'	O
;	O
spec	O
.	O
directives	O
++	O
;	O
if	O
(	O
spec	O
.	O
allocated	O
==	O
spec	O
.	O
named_arg_count	O
)	O
{	O
spec	O
.	O
allocated	O
=	O
2	int
*	O
spec	O
.	O
allocated	O
+	O
1	int
;	O
spec	O
.	O
named	O
=	O
(	O
struct	O
named_arg	O
*	O
)	O
xrealloc	O
(	O
spec	O
.	O
named	O
,	O
spec	O
.	O
allocated	O
*	O
sizeof	O
(	O
struct	O
named_arg	O
)	O
)	O
;	O
}	O
spec	O
.	O
named	O
[	O
spec	O
.	O
named_arg_count	O
]	O
.	O
name	*(char)
=	O
name	*(char)
;	O
spec	O
.	O
named_arg_count	O
++	O
;	O
FDI_SET	O
(	O
f	O
,	O
FMTDIR_END	O
)	O
;	O
format	O
=	O
++	O
f	O
;	O
}	O
}	O
}	O
if	O
(	O
spec	O
.	O
named_arg_count	O
>	O
1	int
)	O
{	O
unsigned	O
int	O
i	long
,	O
j	O
;	O
qsort	(*(void),long,long,*((*(void),*(void))->(int)))->(void)
(	O
spec	O
.	O
named	O
,	O
spec	O
.	O
named_arg_count	O
,	O
sizeof	O
(	O
struct	O
named_arg	O
)	O
,	O
named_arg_compare	O
)	O
;	O
for	O
(	O
i	long
=	O
j	O
=	O
0	int
;	O
i	long
<	O
spec	O
.	O
named_arg_count	O
;	O
i	long
++	O
)	O
if	O
(	O
j	O
>	O
0	int
&&	O
strcmp	(*(char),*(char))->(int)
(	O
spec	O
.	O
named	O
[	O
i	long
]	O
.	O
name	*(char)
,	O
spec	O
.	O
named	O
[	O
j	O
-	O
1	int
]	O
.	O
name	*(char)
)	O
==	O
0	int
)	O
free	(*(void))->(void)
(	O
spec	O
.	O
named	O
[	O
i	long
]	O
.	O
name	*(char)
)	O
;	O
else	O
{	O
if	O
(	O
j	O
<	O
i	long
)	O
spec	O
.	O
named	O
[	O
j	O
]	O
.	O
name	*(char)
=	O
spec	O
.	O
named	O
[	O
i	long
]	O
.	O
name	*(char)
;	O
j	O
++	O
;	O
}	O
spec	O
.	O
named_arg_count	O
=	O
j	O
;	O
}	O
result	*(*(void))
=	O
XMALLOC	O
(	O
struct	O
spec	O
)	O
;	O
*	O
result	*(*(void))
=	O
spec	O
;	O
return	O
result	*(*(void))
;	O
}	O
static	O
void	O
format_free	O
(	O
void	O
*	O
descr	O
)	O
{	O
struct	O
spec	O
*	O
spec	O
=	O
(	O
struct	O
spec	O
*	O
)	O
descr	O
;	O
if	O
(	O
spec	O
->	O
named	O
!=	O
NULL	O
)	O
{	O
unsigned	O
int	O
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
spec	O
->	O
named_arg_count	O
;	O
i	long
++	O
)	O
free	(*(void))->(void)
(	O
spec	O
->	O
named	O
[	O
i	long
]	O
.	O
name	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
spec	O
->	O
named	O
)	O
;	O
}	O
free	(*(void))->(void)
(	O
spec	O
)	O
;	O
}	O
static	O
int	O
format_get_number_of_directives	O
(	O
void	O
*	O
descr	O
)	O
{	O
struct	O
spec	O
*	O
spec	O
=	O
(	O
struct	O
spec	O
*	O
)	O
descr	O
;	O
return	O
spec	O
->	O
directives	O
;	O
}	O
static	O
bool	bool
format_check	O
(	O
void	O
*	O
msgid_descr	O
,	O
void	O
*	O
msgstr_descr	O
,	O
bool	bool
equality	O
,	O
formatstring_error_logger_t	O
error_logger	O
,	O
const	O
char	O
*	O
pretty_msgid	O
,	O
const	O
char	O
*	O
pretty_msgstr	O
)	O
{	O
struct	O
spec	O
*	O
spec1	O
=	O
(	O
struct	O
spec	O
*	O
)	O
msgid_descr	O
;	O
struct	O
spec	O
*	O
spec2	O
=	O
(	O
struct	O
spec	O
*	O
)	O
msgstr_descr	O
;	O
bool	bool
err	O
=	O
false	O
;	O
if	O
(	O
spec1	O
->	O
named_arg_count	O
+	O
spec2	O
->	O
named_arg_count	O
>	O
0	int
)	O
{	O
unsigned	O
int	O
i	long
,	O
j	O
;	O
unsigned	O
int	O
n1	O
=	O
spec1	O
->	O
named_arg_count	O
;	O
unsigned	O
int	O
n2	O
=	O
spec2	O
->	O
named_arg_count	O
;	O
for	O
(	O
i	long
=	O
0	int
,	O
j	O
=	O
0	int
;	O
i	long
<	O
n1	O
||	O
j	O
<	O
n2	O
;	O
)	O
{	O
int	O
cmp	O
=	O
(	O
i	long
>=	O
n1	O
?	O
1	int
:	O
j	O
>=	O
n2	O
?	O
-	O
1	int
:	O
strcmp	(*(char),*(char))->(int)
(	O
spec1	O
->	O
named	O
[	O
i	long
]	O
.	O
name	*(char)
,	O
spec2	O
->	O
named	O
[	O
j	O
]	O
.	O
name	*(char)
)	O
)	O
;	O
if	O
(	O
cmp	O
>	O
0	int
)	O
j	O
++	O
;	O
else	O
if	O
(	O
cmp	O
<	O
0	int
)	O
{	O
if	O
(	O
equality	O
)	O
{	O
if	O
(	O
error_logger	O
)	O
error_logger	O
(	O
_	O
(	O
"a format specification for argument '%s' doesn't exist in '%s'"	*(char)
)	O
,	O
spec1	O
->	O
named	O
[	O
i	long
]	O
.	O
name	*(char)
,	O
pretty_msgstr	O
)	O
;	O
err	O
=	O
true	O
;	O
break	O
;	O
}	O
else	O
i	long
++	O
;	O
}	O
else	O
j	O
++	O
,	O
i	long
++	O
;	O
}	O
}	O
return	O
err	O
;	O
}	O
struct	O
formatstring_parser	O
formatstring_perl_brace	O
=	O
{	O
format_parse	O
,	O
format_free	O
,	O
format_get_number_of_directives	O
,	O
NULL	O
,	O
format_check	O
}	O
;	O
