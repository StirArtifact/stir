struct	O
_mh_message	O
{	O
struct	O
_amd_message	struct(*(struct),long,long,int,int,long,long,long,*(struct),*(struct))
amd_message	O
;	O
size_t	long
seq_number	O
;	O
}	O
;	O
static	O
int	O
mh_message_cmp	O
(	O
struct	O
_amd_message	struct(*(struct),long,long,int,int,long,long,long,*(struct),*(struct))
*	O
a	*(struct(*(char),int,int))
,	O
struct	O
_amd_message	struct(*(struct),long,long,int,int,long,long,long,*(struct),*(struct))
*	O
b	*(struct(*(char),int,int))
)	O
{	O
struct	O
_mh_message	O
*	O
ma	O
=	O
(	O
struct	O
_mh_message	O
*	O
)	O
a	*(struct(*(char),int,int))
;	O
struct	O
_mh_message	O
*	O
mb	O
=	O
(	O
struct	O
_mh_message	O
*	O
)	O
b	*(struct(*(char),int,int))
;	O
if	O
(	O
ma	O
->	O
seq_number	O
<	O
mb	O
->	O
seq_number	O
)	O
return	O
-	O
1	int
;	O
else	O
if	O
(	O
ma	O
->	O
seq_number	O
>	O
mb	O
->	O
seq_number	O
)	O
return	O
1	int
;	O
return	O
0	int
;	O
}	O
static	O
size_t	long
_mh_next_seq	O
(	O
struct	O
_amd_data	O
*	O
amd	*(struct)
)	O
{	O
struct	O
_mh_message	O
*	O
msg	*(struct)
=	O
(	O
struct	O
_mh_message	O
*	O
)	O
_amd_get_message	O
(	O
amd	*(struct)
,	O
amd	*(struct)
->	O
msg_count	O
)	O
;	O
return	O
(	O
msg	*(struct)
?	O
msg	*(struct)
->	O
seq_number	O
:	O
0	int
)	O
+	O
1	int
;	O
}	O
static	O
int	O
_mh_cur_message_name	O
(	O
struct	O
_amd_message	struct(*(struct),long,long,int,int,long,long,long,*(struct),*(struct))
*	O
amsg	O
,	O
char	O
*	O
*	O
pname	O
)	O
{	O
int	O
status	int
=	O
0	int
;	O
struct	O
_mh_message	O
*	O
mhm	O
=	O
(	O
struct	O
_mh_message	O
*	O
)	O
amsg	O
;	O
char	O
*	O
filename	*(char)
;	O
char	O
*	O
pnum	O
;	O
size_t	long
len	int
;	O
status	int
=	O
mu_asprintf	(*(*(char)),*(char))->(int)
(	O
&	O
pnum	O
,	O
"%lu"	*(char)
,	O
(	O
unsigned	O
long	O
)	O
mhm	O
->	O
seq_number	O
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
len	int
=	O
strlen	(*(char))->(long)
(	O
amsg	O
->	O
amd	*(struct)
->	O
name	*(char)
)	O
+	O
1	int
+	O
strlen	(*(char))->(long)
(	O
pnum	O
)	O
+	O
1	int
;	O
filename	*(char)
=	O
malloc	(long)->(*(void))
(	O
len	int
)	O
;	O
if	O
(	O
filename	*(char)
)	O
{	O
strcpy	(*(char),*(char))->(*(char))
(	O
filename	*(char)
,	O
amsg	O
->	O
amd	*(struct)
->	O
name	*(char)
)	O
;	O
strcat	(*(char),*(char))->(*(char))
(	O
filename	*(char)
,	O
"/"	*(char)
)	O
;	O
strcat	(*(char),*(char))->(*(char))
(	O
filename	*(char)
,	O
pnum	O
)	O
;	O
*	O
pname	O
=	O
filename	*(char)
;	O
}	O
else	O
status	int
=	O
ENOMEM	O
;	O
free	(*(void))->(void)
(	O
pnum	O
)	O
;	O
return	O
status	int
;	O
}	O
static	O
int	O
_mh_new_message_name	O
(	O
struct	O
_amd_message	struct(*(struct),long,long,int,int,long,long,long,*(struct),*(struct))
*	O
amsg	O
,	O
int	O
flags	int
,	O
int	O
expunge	int
MU_ARG_UNUSED	O
,	O
char	O
*	O
*	O
pname	O
)	O
{	O
int	O
status	int
=	O
0	int
;	O
struct	O
_mh_message	O
*	O
mhm	O
=	O
(	O
struct	O
_mh_message	O
*	O
)	O
amsg	O
;	O
char	O
*	O
filename	*(char)
;	O
char	O
*	O
pnum	O
;	O
size_t	long
len	int
;	O
status	int
=	O
mu_asprintf	(*(*(char)),*(char))->(int)
(	O
&	O
pnum	O
,	O
"%lu"	*(char)
,	O
(	O
unsigned	O
long	O
)	O
mhm	O
->	O
seq_number	O
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
len	int
=	O
strlen	(*(char))->(long)
(	O
amsg	O
->	O
amd	*(struct)
->	O
name	*(char)
)	O
+	O
1	int
+	O
(	O
(	O
flags	int
&	O
MU_ATTRIBUTE_DELETED	O
)	O
?	O
1	int
:	O
0	int
)	O
+	O
strlen	(*(char))->(long)
(	O
pnum	O
)	O
+	O
1	int
;	O
filename	*(char)
=	O
malloc	(long)->(*(void))
(	O
len	int
)	O
;	O
if	O
(	O
filename	*(char)
)	O
{	O
strcpy	(*(char),*(char))->(*(char))
(	O
filename	*(char)
,	O
amsg	O
->	O
amd	*(struct)
->	O
name	*(char)
)	O
;	O
strcat	(*(char),*(char))->(*(char))
(	O
filename	*(char)
,	O
"/"	*(char)
)	O
;	O
if	O
(	O
flags	int
&	O
MU_ATTRIBUTE_DELETED	O
)	O
strcat	(*(char),*(char))->(*(char))
(	O
filename	*(char)
,	O
","	*(char)
)	O
;	O
strcat	(*(char),*(char))->(*(char))
(	O
filename	*(char)
,	O
pnum	O
)	O
;	O
*	O
pname	O
=	O
filename	*(char)
;	O
}	O
else	O
status	int
=	O
ENOMEM	O
;	O
free	(*(void))->(void)
(	O
pnum	O
)	O
;	O
return	O
status	int
;	O
}	O
static	O
struct	O
_mh_message	O
*	O
_mh_get_message_seq	O
(	O
struct	O
_amd_data	O
*	O
amd	*(struct)
,	O
size_t	long
seq	O
)	O
{	O
struct	O
_mh_message	O
msg	*(struct)
;	O
size_t	long
index	(*(char),int)->(*(char))
;	O
msg	*(struct)
.	O
seq_number	O
=	O
seq	O
;	O
if	O
(	O
amd_msg_lookup	O
(	O
amd	*(struct)
,	O
(	O
struct	O
_amd_message	struct(*(struct),long,long,int,int,long,long,long,*(struct),*(struct))
*	O
)	O
&	O
msg	*(struct)
,	O
&	O
index	(*(char),int)->(*(char))
)	O
)	O
return	O
NULL	O
;	O
return	O
(	O
struct	O
_mh_message	O
*	O
)	O
_amd_get_message	O
(	O
amd	*(struct)
,	O
index	(*(char),int)->(*(char))
)	O
;	O
}	O
static	O
int	O
mh_scan0	O
(	O
mu_mailbox_t	*(struct)
mailbox	*(struct(*(struct),*(struct),*(struct),*(struct),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int))))
,	O
size_t	long
msgno	long
MU_ARG_UNUSED	O
,	O
size_t	long
*	O
pcount	*(long)
,	O
int	O
do_notify	int
)	O
{	O
struct	O
_amd_data	O
*	O
amd	*(struct)
=	O
mailbox	*(struct(*(struct),*(struct),*(struct),*(struct),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int))))
->	O
data	*(void)
;	O
struct	O
_mh_message	O
*	O
msg	*(struct)
;	O
DIR	struct
*	O
dir	*(char)
;	O
struct	O
dirent	struct(long,long,short,char,array(char))
*	O
entry	O
;	O
int	O
status	int
=	O
0	int
;	O
struct	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
st	*(struct(long,long,long))
;	O
int	O
need_sort	O
=	O
0	int
;	O
if	O
(	O
amd	*(struct)
==	O
NULL	O
)	O
return	O
EINVAL	O
;	O
dir	*(char)
=	O
opendir	(*(char))->(*(struct))
(	O
amd	*(struct)
->	O
name	*(char)
)	O
;	O
if	O
(	O
!	O
dir	*(char)
)	O
return	O
errno	O
;	O
mu_monitor_wrlock	(*(struct(*(void),*(void),int,int)))->(int)
(	O
mailbox	*(struct(*(struct),*(struct),*(struct),*(struct),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int))))
->	O
monitor	*(struct(*(void),*(void),int,int))
)	O
;	O
pthread_cleanup_push	O
(	O
amd_cleanup	O
,	O
(	O
void	O
*	O
)	O
mailbox	*(struct(*(struct),*(struct),*(struct),*(struct),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int))))
)	O
;	O
mu_locker_lock	(*(struct))->(int)
(	O
mailbox	*(struct(*(struct),*(struct),*(struct),*(struct),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int))))
->	O
locker	*(struct)
)	O
;	O
while	O
(	O
(	O
entry	O
=	O
readdir	(*(struct))->(*(struct(long,long,short,char,array(char))))
(	O
dir	*(char)
)	O
)	O
)	O
{	O
char	O
*	O
namep	*(*(char))
;	O
int	O
attr_flags	int
;	O
size_t	long
num	long
;	O
attr_flags	int
=	O
0	int
;	O
switch	O
(	O
entry	O
->	O
d_name	array(char)
[	O
0	int
]	O
)	O
{	O
case	O
'.'	O
:	O
continue	O
;	O
case	O
','	O
:	O
continue	O
;	O
case	O
'0'	O
:	O
case	O
'1'	O
:	O
case	O
'2'	O
:	O
case	O
'3'	O
:	O
case	O
'4'	O
:	O
case	O
'5'	O
:	O
case	O
'6'	O
:	O
case	O
'7'	O
:	O
case	O
'8'	O
:	O
case	O
'9'	O
:	O
namep	*(*(char))
=	O
entry	O
->	O
d_name	array(char)
;	O
break	O
;	O
default	O
:	O
continue	O
;	O
}	O
num	long
=	O
strtoul	(*(char),*(*(char)),int)->(long)
(	O
namep	*(*(char))
,	O
&	O
namep	*(*(char))
,	O
10	int
)	O
;	O
if	O
(	O
namep	*(*(char))
[	O
0	int
]	O
)	O
continue	O
;	O
msg	*(struct)
=	O
_mh_get_message_seq	O
(	O
amd	*(struct)
,	O
num	long
)	O
;	O
if	O
(	O
!	O
msg	*(struct)
)	O
{	O
msg	*(struct)
=	O
calloc	(long,long)->(*(void))
(	O
1	int
,	O
sizeof	O
(	O
*	O
msg	*(struct)
)	O
)	O
;	O
status	int
=	O
_amd_message_append	O
(	O
amd	*(struct)
,	O
(	O
struct	O
_amd_message	struct(*(struct),long,long,int,int,long,long,long,*(struct),*(struct))
*	O
)	O
msg	*(struct)
)	O
;	O
if	O
(	O
status	int
)	O
{	O
free	(*(void))->(void)
(	O
msg	*(struct)
)	O
;	O
break	O
;	O
}	O
msg	*(struct)
->	O
seq_number	O
=	O
num	long
;	O
msg	*(struct)
->	O
amd_message	O
.	O
attr_flags	int
=	O
attr_flags	int
;	O
msg	*(struct)
->	O
amd_message	O
.	O
orig_flags	int
=	O
msg	*(struct)
->	O
amd_message	O
.	O
attr_flags	int
;	O
need_sort	O
=	O
1	int
;	O
}	O
else	O
{	O
msg	*(struct)
->	O
amd_message	O
.	O
attr_flags	int
=	O
attr_flags	int
;	O
msg	*(struct)
->	O
amd_message	O
.	O
orig_flags	int
=	O
msg	*(struct)
->	O
amd_message	O
.	O
attr_flags	int
;	O
}	O
}	O
closedir	(*(struct))->(int)
(	O
dir	*(char)
)	O
;	O
if	O
(	O
need_sort	O
)	O
amd_sort	O
(	O
amd	*(struct)
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
{	O
if	O
(	O
do_notify	int
)	O
{	O
size_t	long
i	O
;	O
for	O
(	O
i	O
=	O
0	int
;	O
i	O
<	O
amd	*(struct)
->	O
msg_count	O
;	O
i	O
++	O
)	O
{	O
DISPATCH_ADD_MSG	O
(	O
mailbox	*(struct(*(struct),*(struct),*(struct),*(struct),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int))))
,	O
amd	*(struct)
,	O
i	O
)	O
;	O
}	O
}	O
if	O
(	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
(	O
amd	*(struct)
->	O
name	*(char)
,	O
&	O
st	*(struct(long,long,long))
)	O
==	O
0	int
)	O
amd	*(struct)
->	O
mtime	long
=	O
st	*(struct(long,long,long))
.	O
st_mtime	O
;	O
if	O
(	O
pcount	*(long)
)	O
*	O
pcount	*(long)
=	O
amd	*(struct)
->	O
msg_count	O
;	O
}	O
mu_locker_unlock	(*(struct))->(int)
(	O
mailbox	*(struct(*(struct),*(struct),*(struct),*(struct),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int))))
->	O
locker	*(struct)
)	O
;	O
amd_cleanup	O
(	O
mailbox	*(struct(*(struct),*(struct),*(struct),*(struct),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int))))
)	O
;	O
pthread_cleanup_pop	O
(	O
0	int
)	O
;	O
return	O
status	int
;	O
}	O
static	O
int	O
mh_size_unlocked	O
(	O
struct	O
_amd_data	O
*	O
amd	*(struct)
,	O
mu_off_t	long
*	O
psize	*(long)
)	O
{	O
mu_off_t	long
size	long
=	O
0	int
;	O
int	O
rc	int
;	O
struct	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
st	*(struct(long,long,long))
;	O
DIR	struct
*	O
dir	*(char)
;	O
struct	O
dirent	struct(long,long,short,char,array(char))
*	O
entry	O
;	O
dir	*(char)
=	O
opendir	(*(char))->(*(struct))
(	O
amd	*(struct)
->	O
name	*(char)
)	O
;	O
if	O
(	O
!	O
dir	*(char)
)	O
return	O
errno	O
;	O
while	O
(	O
(	O
entry	O
=	O
readdir	(*(struct))->(*(struct(long,long,short,char,array(char))))
(	O
dir	*(char)
)	O
)	O
)	O
{	O
if	O
(	O
*	O
mu_str_skip_class	(*(char),int)->(*(char))
(	O
entry	O
->	O
d_name	array(char)
,	O
MU_CTYPE_DIGIT	O
)	O
==	O
0	int
)	O
{	O
char	O
*	O
fname	O
=	O
mu_make_file_name	O
(	O
amd	*(struct)
->	O
name	*(char)
,	O
entry	O
->	O
d_name	array(char)
)	O
;	O
if	O
(	O
!	O
fname	O
)	O
continue	O
;	O
if	O
(	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
(	O
fname	O
,	O
&	O
st	*(struct(long,long,long))
)	O
)	O
{	O
rc	int
=	O
errno	O
;	O
mu_debug	O
(	O
MU_DEBCAT_MAILBOX	O
,	O
MU_DEBUG_ERROR	O
,	O
(	O
"can't stat %s: %s"	*(char)
,	O
fname	O
,	O
mu_strerror	(int)->(*(char))
(	O
rc	int
)	O
)	O
)	O
;	O
free	(*(void))->(void)
(	O
fname	O
)	O
;	O
continue	O
;	O
}	O
if	O
(	O
S_ISREG	O
(	O
st	*(struct(long,long,long))
.	O
st_mode	int
)	O
)	O
size	long
+=	O
st	*(struct(long,long,long))
.	O
st_size	long
;	O
}	O
}	O
*	O
psize	*(long)
=	O
size	long
;	O
closedir	(*(struct))->(int)
(	O
dir	*(char)
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
mh_size	O
(	O
mu_mailbox_t	*(struct)
mailbox	*(struct(*(struct),*(struct),*(struct),*(struct),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int))))
,	O
mu_off_t	long
*	O
psize	*(long)
)	O
{	O
struct	O
_amd_data	O
*	O
amd	*(struct)
=	O
mailbox	*(struct(*(struct),*(struct),*(struct),*(struct),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int))))
->	O
data	*(void)
;	O
int	O
rc	int
;	O
mu_monitor_wrlock	(*(struct(*(void),*(void),int,int)))->(int)
(	O
mailbox	*(struct(*(struct),*(struct),*(struct),*(struct),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int))))
->	O
monitor	*(struct(*(void),*(void),int,int))
)	O
;	O
pthread_cleanup_push	O
(	O
amd_cleanup	O
,	O
(	O
void	O
*	O
)	O
mailbox	*(struct(*(struct),*(struct),*(struct),*(struct),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int))))
)	O
;	O
mu_locker_lock	(*(struct))->(int)
(	O
mailbox	*(struct(*(struct),*(struct),*(struct),*(struct),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int))))
->	O
locker	*(struct)
)	O
;	O
rc	int
=	O
mh_size_unlocked	O
(	O
amd	*(struct)
,	O
psize	*(long)
)	O
;	O
mu_locker_unlock	(*(struct))->(int)
(	O
mailbox	*(struct(*(struct),*(struct),*(struct),*(struct),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int))))
->	O
locker	*(struct)
)	O
;	O
mu_monitor_unlock	(*(struct(*(void),*(void),int,int)))->(int)
(	O
mailbox	*(struct(*(struct),*(struct),*(struct),*(struct),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int))))
->	O
monitor	*(struct(*(void),*(void),int,int))
)	O
;	O
pthread_cleanup_pop	O
(	O
0	int
)	O
;	O
return	O
rc	int
;	O
}	O
static	O
int	O
mh_qfetch	O
(	O
struct	O
_amd_data	O
*	O
amd	*(struct)
,	O
mu_message_qid_t	*(char)
qid	*(char)
)	O
{	O
char	O
*	O
p	*(char)
;	O
size_t	long
num	long
=	O
0	int
;	O
int	O
attr_flags	int
=	O
0	int
;	O
struct	O
_mh_message	O
*	O
msg	*(struct)
;	O
p	*(char)
=	O
qid	*(char)
+	O
strlen	(*(char))->(long)
(	O
qid	*(char)
)	O
-	O
1	int
;	O
if	O
(	O
!	O
mu_isdigit	O
(	O
*	O
p	*(char)
)	O
)	O
return	O
EINVAL	O
;	O
for	O
(	O
p	*(char)
--	O
;	O
p	*(char)
>=	O
qid	*(char)
&&	O
mu_isdigit	O
(	O
*	O
p	*(char)
)	O
;	O
p	*(char)
--	O
)	O
;	O
if	O
(	O
p	*(char)
==	O
qid	*(char)
)	O
return	O
EINVAL	O
;	O
num	long
=	O
strtoul	(*(char),*(*(char)),int)->(long)
(	O
p	*(char)
+	O
1	int
,	O
NULL	O
,	O
10	int
)	O
;	O
if	O
(	O
*	O
p	*(char)
==	O
','	O
)	O
{	O
attr_flags	int
|=	O
MU_ATTRIBUTE_DELETED	O
;	O
p	*(char)
--	O
;	O
}	O
if	O
(	O
*	O
p	*(char)
!=	O
'/'	O
)	O
return	O
EINVAL	O
;	O
msg	*(struct)
=	O
calloc	(long,long)->(*(void))
(	O
1	int
,	O
sizeof	O
(	O
*	O
msg	*(struct)
)	O
)	O
;	O
msg	*(struct)
->	O
seq_number	O
=	O
num	long
;	O
msg	*(struct)
->	O
amd_message	O
.	O
attr_flags	int
=	O
attr_flags	int
;	O
msg	*(struct)
->	O
amd_message	O
.	O
orig_flags	int
=	O
msg	*(struct)
->	O
amd_message	O
.	O
attr_flags	int
;	O
_amd_message_insert	O
(	O
amd	*(struct)
,	O
(	O
struct	O
_amd_message	struct(*(struct),long,long,int,int,long,long,long,*(struct),*(struct))
*	O
)	O
msg	*(struct)
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
mh_message_uid	O
(	O
mu_message_t	*(struct)
msg	*(struct)
,	O
size_t	long
*	O
puid	*(long)
)	O
{	O
struct	O
_mh_message	O
*	O
mhm	O
=	O
mu_message_get_owner	(*(struct))->(*(void))
(	O
msg	*(struct)
)	O
;	O
if	O
(	O
puid	*(long)
)	O
*	O
puid	*(long)
=	O
mhm	O
->	O
seq_number	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
_mh_msg_init	O
(	O
struct	O
_amd_data	O
*	O
amd	*(struct)
,	O
struct	O
_amd_message	struct(*(struct),long,long,int,int,long,long,long,*(struct),*(struct))
*	O
amm	O
)	O
{	O
struct	O
_mh_message	O
*	O
mhm	O
=	O
(	O
struct	O
_mh_message	O
*	O
)	O
amm	O
;	O
mhm	O
->	O
seq_number	O
=	O
_mh_next_seq	O
(	O
amd	*(struct)
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
_mh_msg_delete	O
(	O
struct	O
_amd_data	O
*	O
amd	*(struct)
,	O
struct	O
_amd_message	struct(*(struct),long,long,int,int,long,long,long,*(struct),*(struct))
*	O
amm	O
)	O
{	O
int	O
rc	int
,	O
status	int
;	O
char	O
*	O
name	*(char)
;	O
char	O
*	O
argv	*(*(char))
[	O
3	int
]	O
;	O
const	O
char	O
*	O
proc	O
=	O
mu_mhprop_get_value	(*(struct),*(char),*(char))->(*(char))
(	O
mu_mh_profile	*(struct)
,	O
"rmmproc"	*(char)
,	O
NULL	O
)	O
;	O
if	O
(	O
!	O
proc	O
)	O
return	O
ENOSYS	O
;	O
rc	int
=	O
amd	*(struct)
->	O
cur_msg_file_name	O
(	O
amm	O
,	O
&	O
name	*(char)
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
if	O
(	O
proc	O
[	O
0	int
]	O
==	O
0	int
)	O
{	O
rc	int
=	O
unlink	(*(char))->(int)
(	O
name	*(char)
)	O
;	O
if	O
(	O
rc	int
)	O
rc	int
=	O
errno	O
;	O
}	O
else	O
{	O
argv	*(*(char))
[	O
0	int
]	O
=	O
(	O
char	O
*	O
)	O
proc	O
;	O
argv	*(*(char))
[	O
1	int
]	O
=	O
name	*(char)
;	O
argv	*(*(char))
[	O
2	int
]	O
=	O
NULL	O
;	O
rc	int
=	O
mu_spawnvp	(*(char),array(*(char)),*(int))->(int)
(	O
proc	O
,	O
argv	*(*(char))
,	O
&	O
status	int
)	O
;	O
}	O
free	(*(void))->(void)
(	O
name	*(char)
)	O
;	O
return	O
rc	int
;	O
}	O
static	O
int	O
mh_remove	O
(	O
struct	O
_amd_data	O
*	O
amd	*(struct)
)	O
{	O
return	O
amd_remove_dir	O
(	O
amd	*(struct)
->	O
name	*(char)
)	O
;	O
}	O
static	O
int	O
mh_get_property	O
(	O
mu_mailbox_t	*(struct)
mailbox	*(struct(*(struct),*(struct),*(struct),*(struct),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int))))
,	O
mu_property_t	*(struct)
*	O
pprop	*(*(struct))
)	O
{	O
struct	O
_amd_data	O
*	O
amd	*(struct)
=	O
mailbox	*(struct(*(struct),*(struct),*(struct),*(struct),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int))))
->	O
data	*(void)
;	O
mu_property_t	*(struct)
property	*(struct)
=	O
NULL	O
;	O
struct	O
mu_mh_prop	struct(*(char),int)
*	O
mhprop	O
;	O
const	O
char	O
*	O
p	*(char)
;	O
mhprop	O
=	O
calloc	(long,long)->(*(void))
(	O
1	int
,	O
sizeof	O
(	O
mhprop	O
[	O
0	int
]	O
)	O
)	O
;	O
if	O
(	O
!	O
mhprop	O
)	O
return	O
ENOMEM	O
;	O
p	*(char)
=	O
mu_mhprop_get_value	(*(struct),*(char),*(char))->(*(char))
(	O
mu_mh_profile	*(struct)
,	O
"mh-sequences"	*(char)
,	O
MU_MH_SEQUENCES_FILE	O
)	O
;	O
mhprop	O
->	O
filename	*(char)
=	O
mu_make_file_name	O
(	O
amd	*(struct)
->	O
name	*(char)
,	O
p	*(char)
)	O
;	O
mu_property_create_init	(*(*(struct)),*((*(struct))->(int)),*(void))->(int)
(	O
&	O
property	*(struct)
,	O
mu_mh_property_init	(*(struct))->(int)
,	O
mhprop	O
)	O
;	O
mu_mailbox_set_property	(*(struct),*(struct))->(int)
(	O
mailbox	*(struct(*(struct),*(struct),*(struct),*(struct),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int))))
,	O
property	*(struct)
)	O
;	O
*	O
pprop	*(*(struct))
=	O
property	*(struct)
;	O
return	O
0	int
;	O
}	O
static	O
int	O
mh_translate	O
(	O
mu_mailbox_t	*(struct)
mbox	*(struct)
,	O
int	O
cmd	enum(int,int,int,int,int)
,	O
size_t	long
from	*(struct)
,	O
size_t	long
*	O
to	int
)	O
{	O
struct	O
_amd_data	O
*	O
amd	*(struct)
=	O
mbox	*(struct)
->	O
data	*(void)
;	O
struct	O
_mh_message	O
msg	*(struct)
,	O
*	O
mp	O
;	O
size_t	long
n	int
;	O
mu_mailbox_messages_count	(*(struct),*(long))->(int)
(	O
mbox	*(struct)
,	O
&	O
n	int
)	O
;	O
switch	O
(	O
cmd	enum(int,int,int,int,int)
)	O
{	O
case	O
MU_MAILBOX_UID_TO_MSGNO	O
:	O
msg	*(struct)
.	O
seq_number	O
=	O
from	*(struct)
;	O
if	O
(	O
amd_msg_lookup	O
(	O
amd	*(struct)
,	O
(	O
struct	O
_amd_message	struct(*(struct),long,long,int,int,long,long,long,*(struct),*(struct))
*	O
)	O
&	O
msg	*(struct)
,	O
&	O
n	int
)	O
)	O
return	O
MU_ERR_NOENT	O
;	O
*	O
to	int
=	O
n	int
;	O
break	O
;	O
case	O
MU_MAILBOX_MSGNO_TO_UID	O
:	O
mp	O
=	O
(	O
struct	O
_mh_message	O
*	O
)	O
_amd_get_message	O
(	O
amd	*(struct)
,	O
from	*(struct)
)	O
;	O
if	O
(	O
!	O
mp	O
)	O
return	O
MU_ERR_NOENT	O
;	O
*	O
to	int
=	O
mp	O
->	O
seq_number	O
;	O
break	O
;	O
default	O
:	O
return	O
ENOSYS	O
;	O
}	O
return	O
0	int
;	O
}	O
int	O
_mailbox_mh_init	(*(struct(*(struct),*(struct),*(struct),*(struct),*(struct),int,*(struct),*(struct(*`,*`,int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))))->(int)
(	O
mu_mailbox_t	*(struct)
mailbox	*(struct(*(struct),*(struct),*(struct),*(struct),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int))))
)	O
{	O
int	O
rc	int
;	O
struct	O
_amd_data	O
*	O
amd	*(struct)
;	O
rc	int
=	O
amd_init_mailbox	O
(	O
mailbox	*(struct(*(struct),*(struct),*(struct),*(struct),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int))))
,	O
sizeof	O
(	O
struct	O
_amd_data	O
)	O
,	O
&	O
amd	*(struct)
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
amd	*(struct)
->	O
msg_size	O
=	O
sizeof	O
(	O
struct	O
_mh_message	O
)	O
;	O
amd	*(struct)
->	O
msg_free	O
=	O
NULL	O
;	O
amd	*(struct)
->	O
msg_init_delivery	O
=	O
_mh_msg_init	O
;	O
amd	*(struct)
->	O
msg_finish_delivery	O
=	O
NULL	O
;	O
amd	*(struct)
->	O
cur_msg_file_name	O
=	O
_mh_cur_message_name	O
;	O
amd	*(struct)
->	O
new_msg_file_name	O
=	O
_mh_new_message_name	O
;	O
amd	*(struct)
->	O
scan0	O
=	O
mh_scan0	O
;	O
amd	*(struct)
->	O
qfetch	O
=	O
mh_qfetch	O
;	O
amd	*(struct)
->	O
msg_cmp	O
=	O
mh_message_cmp	O
;	O
amd	*(struct)
->	O
message_uid	O
=	O
mh_message_uid	O
;	O
amd	*(struct)
->	O
next_uid	O
=	O
_mh_next_seq	O
;	O
amd	*(struct)
->	O
remove	(*(char))->(int)
=	O
mh_remove	O
;	O
amd	*(struct)
->	O
mailbox_size	O
=	O
mh_size	O
;	O
mailbox	*(struct(*(struct),*(struct),*(struct),*(struct),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int))))
->	O
_get_property	*((*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(struct`),*(char),int,*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))),*(*(struct)))->(int))
=	O
mh_get_property	O
;	O
mailbox	*(struct(*(struct),*(struct),*(struct),*(struct),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int))))
->	O
_translate	*((*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(struct`),*(char),int,*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))),int,long,*(long))->(int))
=	O
mh_translate	O
;	O
if	O
(	O
mu_mhprop_get_value	(*(struct),*(char),*(char))->(*(char))
(	O
mu_mh_profile	*(struct)
,	O
"rmmproc"	*(char)
,	O
NULL	O
)	O
)	O
amd	*(struct)
->	O
delete_msg	O
=	O
_mh_msg_delete	O
;	O
return	O
0	int
;	O
}	O
