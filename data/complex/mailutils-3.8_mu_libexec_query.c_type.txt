char	O
query_docstring	array(char)
[	O
]	O
=	O
N_	O
(	O
"query configuration values"	*(char)
)	O
;	O
static	O
char	O
query_args_doc	array(char)
[	O
]	O
=	O
N_	O
(	O
"PATH [PATH...]"	*(char)
)	O
;	O
static	O
char	O
*	O
file_name	*(char)
;	O
int	O
value_option	int
;	O
int	O
path_option	int
;	O
int	O
verbose_option	int
;	O
char	O
*	O
progname	*(char)
;	O
static	O
struct	O
mu_option	struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*(struct),*(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*`,*`,*`)->(void)),*(char))),*(char))->(void)),*(char))
query_options	array(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*(struct(int,*`,long,*`,int,*`,*`,int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,*`,*`,int,*`,int,int,int,long,*`)),*(struct(*`,int,*`,int,*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`)),*(char))->(void)),*(char)))
[	O
]	O
=	O
{	O
{	O
"file"	*(char)
,	O
'f'	O
,	O
N_	O
(	O
"FILE"	*(char)
)	O
,	O
MU_OPTION_DEFAULT	int
,	O
N_	O
(	O
"query configuration values from FILE (default mailutils.rc)"	*(char)
)	O
,	O
mu_c_string	int
,	O
&	O
file_name	*(char)
}	O
,	O
{	O
"value"	*(char)
,	O
0	int
,	O
NULL	O
,	O
MU_OPTION_DEFAULT	int
,	O
N_	O
(	O
"display parameter values only"	*(char)
)	O
,	O
mu_c_bool	int
,	O
&	O
value_option	int
}	O
,	O
{	O
"program"	*(char)
,	O
'p'	O
,	O
N_	O
(	O
"NAME"	*(char)
)	O
,	O
MU_OPTION_DEFAULT	int
,	O
N_	O
(	O
"set program name for configuration lookup"	*(char)
)	O
,	O
mu_c_string	int
,	O
&	O
progname	*(char)
}	O
,	O
{	O
"path"	*(char)
,	O
0	int
,	O
NULL	O
,	O
MU_OPTION_DEFAULT	int
,	O
N_	O
(	O
"display setting names as paths"	*(char)
)	O
,	O
mu_c_bool	int
,	O
&	O
path_option	int
}	O
,	O
{	O
"verbose"	*(char)
,	O
'v'	O
,	O
NULL	O
,	O
MU_OPTION_DEFAULT	int
,	O
N_	O
(	O
"increase output verbosity"	*(char)
)	O
,	O
mu_c_bool	int
,	O
&	O
verbose_option	int
}	O
,	O
MU_OPTION_END	O
}	O
;	O
int	O
main	(int,*(*(char)))->(int)
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	*(*(char))
)	O
{	O
static	O
struct	O
mu_cfg_parse_hints	struct(int,*(char),*(char),*(char))
hints	*(struct(*(char),*(char)))
;	O
mu_cfg_tree_t	struct
*	O
tree	*(struct(*(struct),*(struct)))
=	O
NULL	O
;	O
mu_action_getopt	(*(int),*(*(*(char))),*(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*`,*`,*`)->(void)),*(char))),*(char),*(char))->(void)
(	O
&	O
argc	long
,	O
&	O
argv	*(*(char))
,	O
query_options	array(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*(struct(int,*`,long,*`,int,*`,*`,int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,*`,*`,int,*`,int,int,int,long,*`)),*(struct(*`,int,*`,int,*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`)),*(char))->(void)),*(char)))
,	O
query_docstring	array(char)
,	O
query_args_doc	array(char)
)	O
;	O
if	O
(	O
argc	long
==	O
0	int
)	O
{	O
mu_error	(*(char))->(int)
(	O
_	O
(	O
"query what?"	*(char)
)	O
)	O
;	O
return	O
1	int
;	O
}	O
hints	*(struct(*(char),*(char)))
.	O
flags	int
=	O
MU_CFHINT_SITE_FILE	int
;	O
hints	*(struct(*(char),*(char)))
.	O
site_file	*(char)
=	O
file_name	*(char)
?	O
file_name	*(char)
:	O
mu_site_config_file	()->(*(char))
(	O
)	O
;	O
if	O
(	O
progname	*(char)
)	O
{	O
hints	*(struct(*(char),*(char)))
.	O
flags	int
|=	O
MU_CFHINT_PROGRAM	int
;	O
hints	*(struct(*(char),*(char)))
.	O
program	*(char)
=	O
progname	*(char)
;	O
}	O
if	O
(	O
verbose_option	int
)	O
hints	*(struct(*(char),*(char)))
.	O
flags	int
|=	O
MU_CF_FMT_LOCUS	int
;	O
if	O
(	O
value_option	int
)	O
hints	*(struct(*(char),*(char)))
.	O
flags	int
|=	O
MU_CF_FMT_VALUE_ONLY	int
;	O
if	O
(	O
path_option	int
)	O
hints	*(struct(*(char),*(char)))
.	O
flags	int
|=	O
MU_CF_FMT_PARAM_PATH	int
;	O
if	O
(	O
mu_cfg_parse_config	(*(*(struct(*(struct`),*(struct`)))),*(struct(int,*(char),*(char),*(char))))->(int)
(	O
&	O
tree	*(struct(*(struct),*(struct)))
,	O
&	O
hints	*(struct(*(char),*(char)))
)	O
)	O
return	O
1	int
;	O
if	O
(	O
!	O
tree	*(struct(*(struct),*(struct)))
)	O
return	O
0	int
;	O
for	O
(	O
;	O
argc	long
>	O
0	int
;	O
argc	long
--	O
,	O
argv	*(*(char))
++	O
)	O
{	O
char	O
*	O
path	*(char)
=	O
*	O
argv	*(*(char))
;	O
mu_cfg_node_t	struct
*	O
node	*(struct(struct(struct(*(char),int,int),struct(*(char),int,int)),enum(int,int,int),*(char),*(struct(int,union(*`,*`,struct`))),*(struct),*(struct(struct(struct`,struct`),enum(int,int,int),*(char),*(struct`),*(struct`),*(struct`)))))
;	O
if	O
(	O
mu_cfg_find_node	(*(struct(*(struct),*(struct))),*(char),*(*(struct(struct(struct`,struct`),enum(int,int,int),*(char),*(struct`),*(struct`),*(struct`)))))->(int)
(	O
tree	*(struct(*(struct),*(struct)))
,	O
path	*(char)
,	O
&	O
node	*(struct(struct(struct(*(char),int,int),struct(*(char),int,int)),enum(int,int,int),*(char),*(struct(int,union(*`,*`,struct`))),*(struct),*(struct(struct(struct`,struct`),enum(int,int,int),*(char),*(struct`),*(struct`),*(struct`)))))
)	O
==	O
0	int
)	O
mu_cfg_format_node	(*(struct),*(struct(struct(struct(*`,int,int),struct(*`,int,int)),enum(int,int,int),*(char),*(struct(int,union`)),*(struct),*(struct(struct`,enum(int,int,int),*`,*`,*`,*`)))),int)->(void)
(	O
mu_strout	*(struct)
,	O
node	*(struct(struct(struct(*(char),int,int),struct(*(char),int,int)),enum(int,int,int),*(char),*(struct(int,union(*`,*`,struct`))),*(struct),*(struct(struct(struct`,struct`),enum(int,int,int),*(char),*(struct`),*(struct`),*(struct`)))))
,	O
hints	*(struct(*(char),*(char)))
.	O
flags	int
)	O
;	O
}	O
return	O
0	int
;	O
}	O
