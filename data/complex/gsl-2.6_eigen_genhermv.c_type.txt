static	O
void	O
genhermv_normalize_eigenvectors	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
gsl_matrix_complex	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
evec	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_eigen_genhermv_workspace	struct(long,*(struct(long,*(double),*(double),*(double),*(double),*(double))))
*	O
gsl_eigen_genhermv_alloc	(long)->(*(struct(long,*(struct(long,*`,*`,*`,*`,*`)))))
(	O
const	O
size_t	long
n	long
)	O
{	O
gsl_eigen_genhermv_workspace	struct(long,*(struct(long,*(double),*(double),*(double),*(double),*(double))))
*	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
;	O
if	O
(	O
n	long
==	O
0	int
)	O
{	O
GSL_ERROR_NULL	O
(	O
"matrix dimension must be positive integer"	*(char)
,	O
GSL_EINVAL	int
)	O
;	O
}	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
=	O
(	O
gsl_eigen_genhermv_workspace	struct(long,*(struct(long,*(double),*(double),*(double),*(double),*(double))))
*	O
)	O
calloc	(long,long)->(*(void))
(	O
1	int
,	O
sizeof	O
(	O
gsl_eigen_genhermv_workspace	struct(long,*(struct(long,*(double),*(double),*(double),*(double),*(double))))
)	O
)	O
;	O
if	O
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
==	O
0	int
)	O
{	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for workspace"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
size	long
=	O
n	long
;	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
hermv_workspace_p	*(struct(long,*(double),*(double),*(double),*(double),*(double)))
=	O
gsl_eigen_hermv_alloc	(long)->(*(struct(long,*(double),*(double),*(double),*(double),*(double))))
(	O
n	long
)	O
;	O
if	O
(	O
!	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
hermv_workspace_p	*(struct(long,*(double),*(double),*(double),*(double),*(double)))
)	O
{	O
gsl_eigen_genhermv_free	(*(struct(long,*(struct(long,*`,*`,*`,*`,*`)))))->(void)
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for hermv workspace"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
return	O
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
)	O
;	O
}	O
void	O
gsl_eigen_genhermv_free	(*(struct(long,*(struct(long,*`,*`,*`,*`,*`)))))->(void)
(	O
gsl_eigen_genhermv_workspace	struct(long,*(struct(long,*(double),*(double),*(double),*(double),*(double))))
*	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
)	O
{	O
RETURN_IF_NULL	O
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
)	O
;	O
if	O
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
hermv_workspace_p	*(struct(long,*(double),*(double),*(double),*(double),*(double)))
)	O
gsl_eigen_hermv_free	(*(struct(long,*(double),*(double),*(double),*(double),*(double))))->(void)
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
hermv_workspace_p	*(struct(long,*(double),*(double),*(double),*(double),*(double)))
)	O
;	O
free	(*(void))->(void)
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
)	O
;	O
}	O
int	O
gsl_eigen_genhermv	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,*(struct(long,*`,*`,*`,*`,*`)))))->(int)
(	O
gsl_matrix_complex	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
A	*(float)
,	O
gsl_matrix_complex	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
B	*(float)
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
eval	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
gsl_matrix_complex	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
evec	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
gsl_eigen_genhermv_workspace	struct(long,*(struct(long,*(double),*(double),*(double),*(double),*(double))))
*	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
)	O
{	O
const	O
size_t	long
N	int
=	O
A	*(float)
->	O
size1	long
;	O
if	O
(	O
N	int
!=	O
A	*(float)
->	O
size2	long
)	O
{	O
GSL_ERROR	O
(	O
"matrix must be square to compute eigenvalues"	*(char)
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
if	O
(	O
(	O
N	int
!=	O
B	*(float)
->	O
size1	long
)	O
||	O
(	O
N	int
!=	O
B	*(float)
->	O
size2	long
)	O
)	O
{	O
GSL_ERROR	O
(	O
"B matrix dimensions must match A"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
eval	*(struct(long,long,*(double),*(struct(long,*(double))),int))
->	O
size	long
!=	O
N	int
)	O
{	O
GSL_ERROR	O
(	O
"eigenvalue vector must match matrix size"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
evec	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size1	long
!=	O
evec	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size2	long
)	O
{	O
GSL_ERROR	O
(	O
"eigenvector matrix must be square"	*(char)
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
if	O
(	O
evec	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size1	long
!=	O
N	int
)	O
{	O
GSL_ERROR	O
(	O
"eigenvector matrix has wrong size"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
size	long
!=	O
N	int
)	O
{	O
GSL_ERROR	O
(	O
"matrix size does not match workspace"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
int	O
s	*(float)
;	O
s	*(float)
=	O
gsl_linalg_complex_cholesky_decomp	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
B	*(float)
)	O
;	O
if	O
(	O
s	*(float)
!=	O
GSL_SUCCESS	int
)	O
return	O
s	*(float)
;	O
gsl_eigen_genherm_standardize	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
A	*(float)
,	O
B	*(float)
)	O
;	O
s	*(float)
=	O
gsl_eigen_hermv	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,*(double),*(double),*(double),*(double),*(double))))->(int)
(	O
A	*(float)
,	O
eval	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
evec	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
hermv_workspace_p	*(struct(long,*(double),*(double),*(double),*(double),*(double)))
)	O
;	O
if	O
(	O
s	*(float)
!=	O
GSL_SUCCESS	int
)	O
return	O
s	*(float)
;	O
gsl_blas_ztrsm	(enum(int,int),enum(int,int),enum(int,int,int),enum(int,int),struct(array(double)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
CblasLeft	int
,	O
CblasLower	int
,	O
CblasConjTrans	int
,	O
CblasNonUnit	int
,	O
GSL_COMPLEX_ONE	O
,	O
B	*(float)
,	O
evec	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
genhermv_normalize_eigenvectors	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
evec	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
static	O
void	O
genhermv_normalize_eigenvectors	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
gsl_matrix_complex	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
evec	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
{	O
const	O
size_t	long
N	int
=	O
evec	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size1	long
;	O
size_t	long
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
N	int
;	O
++	O
i	long
)	O
{	O
gsl_vector_complex_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
vi	double
=	O
gsl_matrix_complex_column	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
evec	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
i	long
)	O
;	O
double	O
scale	double
=	O
1.0	int
/	O
gsl_blas_dznrm2	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(double)
(	O
&	O
vi	double
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
gsl_blas_zdscal	(double,*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
scale	double
,	O
&	O
vi	double
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
}	O
}	O
