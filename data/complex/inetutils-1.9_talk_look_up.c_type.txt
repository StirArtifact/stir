static	O
int	O
look_for_invite	(*(struct(char,char,char,char,int,struct(short,array(char)))))->(int)
(	O
CTL_RESPONSE	struct(char,char,char,char,int,struct(short,array(char)))
*	O
rp	*(struct(char,char,char,char,int,struct(short,array(char))))
)	O
{	O
current_state	*(char)
=	O
"Checking for invitation on caller's machine"	*(char)
;	O
ctl_transact	(struct(int),struct(char,char,char,char,int,struct(short,array(char)),struct(short,array(char)),int,array(char),array(char),array(char)),int,*(struct(char,char,char,char,int,struct(short,array(char)))))->(int)
(	O
his_machine_addr	struct(int)
,	O
msg	struct(char,char,char,char,int,struct(short,array(char)),struct(short,array(char)),int,array(char),array(char),array(char))
,	O
LOOK_UP	int
,	O
rp	*(struct(char,char,char,char,int,struct(short,array(char))))
)	O
;	O
switch	O
(	O
rp	*(struct(char,char,char,char,int,struct(short,array(char))))
->	O
answer	char
)	O
{	O
case	O
SUCCESS	int
:	O
msg	struct(char,char,char,char,int,struct(short,array(char)),struct(short,array(char)),int,array(char),array(char),array(char))
.	O
id_num	int
=	O
htonl	(int)->(int)
(	O
rp	*(struct(char,char,char,char,int,struct(short,array(char))))
->	O
id_num	int
)	O
;	O
return	O
(	O
1	int
)	O
;	O
default	O
:	O
return	O
(	O
0	int
)	O
;	O
}	O
}	O
int	O
check_local	()->(int)
(	O
void	O
)	O
{	O
CTL_RESPONSE	struct(char,char,char,char,int,struct(short,array(char)))
response	struct(char,char,char,char,int,struct(short,array(char)))
;	O
register	O
CTL_RESPONSE	struct(char,char,char,char,int,struct(short,array(char)))
*	O
rp	*(struct(char,char,char,char,int,struct(short,array(char))))
=	O
&	O
response	struct(char,char,char,char,int,struct(short,array(char)))
;	O
msg	struct(char,char,char,char,int,struct(short,array(char)),struct(short,array(char)),int,array(char),array(char),array(char))
.	O
ctl_addr	struct(short,array(char))
.	O
sa_family	short
=	O
htons	(short)->(short)
(	O
ctl_addr	struct(short,array(char))
.	O
sin_family	short
)	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
msg	struct(char,char,char,char,int,struct(short,array(char)),struct(short,array(char)),int,array(char),array(char),array(char))
.	O
ctl_addr	struct(short,array(char))
.	O
sa_data	array(char)
,	O
(	O
(	O
struct	O
sockaddr	struct(short,array(char))
*	O
)	O
&	O
ctl_addr	struct(short,array(char))
)	O
->	O
sa_data	array(char)
,	O
sizeof	O
(	O
(	O
struct	O
sockaddr	struct(short,array(char))
*	O
)	O
&	O
ctl_addr	struct(short,array(char))
)	O
->	O
sa_data	array(char)
)	O
;	O
if	O
(	O
!	O
look_for_invite	(*(struct(char,char,char,char,int,struct(short,array(char)))))->(int)
(	O
rp	*(struct(char,char,char,char,int,struct(short,array(char))))
)	O
)	O
return	O
(	O
0	int
)	O
;	O
current_state	*(char)
=	O
"Waiting to connect with caller"	*(char)
;	O
do	O
{	O
if	O
(	O
rp	*(struct(char,char,char,char,int,struct(short,array(char))))
->	O
addr	struct(short,array(char))
.	O
sa_family	short
!=	O
AF_INET	O
)	O
p_error	(*(char))->(int)
(	O
"Response uses invalid network address"	*(char)
)	O
;	O
errno	O
=	O
0	int
;	O
if	O
(	O
connect	(int,union(*(struct(short,array(char))),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct)),int)->(int)
(	O
sockt	int
,	O
(	O
struct	O
sockaddr	struct(short,array(char))
*	O
)	O
&	O
rp	*(struct(char,char,char,char,int,struct(short,array(char))))
->	O
addr	struct(short,array(char))
,	O
sizeof	O
(	O
rp	*(struct(char,char,char,char,int,struct(short,array(char))))
->	O
addr	struct(short,array(char))
)	O
)	O
!=	O
-	O
1	int
)	O
return	O
(	O
1	int
)	O
;	O
}	O
while	O
(	O
errno	O
==	O
EINTR	int
)	O
;	O
if	O
(	O
errno	O
==	O
ECONNREFUSED	int
)	O
{	O
ctl_transact	(struct(int),struct(char,char,char,char,int,struct(short,array(char)),struct(short,array(char)),int,array(char),array(char),array(char)),int,*(struct(char,char,char,char,int,struct(short,array(char)))))->(int)
(	O
his_machine_addr	struct(int)
,	O
msg	struct(char,char,char,char,int,struct(short,array(char)),struct(short,array(char)),int,array(char),array(char),array(char))
,	O
DELETE	int
,	O
rp	*(struct(char,char,char,char,int,struct(short,array(char))))
)	O
;	O
close	(int)->(int)
(	O
sockt	int
)	O
;	O
open_sockt	()->(int)
(	O
)	O
;	O
return	O
(	O
0	int
)	O
;	O
}	O
p_error	(*(char))->(int)
(	O
"Unable to connect with initiator"	*(char)
)	O
;	O
return	O
-	O
1	int
;	O
}	O
