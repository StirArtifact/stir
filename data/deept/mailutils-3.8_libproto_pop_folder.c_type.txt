static	O
struct	O
_mu_record	struct
_pop_record	struct
=	O
{	O
MU_POP_PRIO	int
,	O
MU_POP_SCHEME	pointer
,	O
MU_RECORD_DEFAULT	int
,	O
MU_URL_SCHEME	int
|	O
MU_URL_CRED	O
|	O
MU_URL_INET	O
|	O
MU_URL_PARAM	int
,	O
MU_URL_HOST	int
,	O
_url_pop_init	function
,	O
_mailbox_pop_init	function
,	O
NULL	O
,	O
_folder_pop_init	function
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
}	O
;	O
mu_record_t	pointer
mu_pop_record	pointer
=	O
&	O
_pop_record	struct
;	O
mu_record_t	pointer
mu_pops_record	pointer
=	O
NULL	O
;	O
static	O
int	O
folder_pop_open	function
(	O
mu_folder_t	pointer
,	O
int	O
)	O
;	O
static	O
int	O
folder_pop_close	function
(	O
mu_folder_t	pointer
)	O
;	O
static	O
int	O
folder_pop_get_authority	function
(	O
mu_folder_t	pointer
,	O
mu_authority_t	pointer
*	O
)	O
;	O
extern	O
int	O
_pop_user	function
(	O
mu_authority_t	pointer
)	O
;	O
extern	O
int	O
_pop_apop	function
(	O
mu_authority_t	pointer
)	O
;	O
int	O
_folder_pop_init	function
(	O
mu_folder_t	pointer
folder	pointer
)	O
{	O
int	O
status	int
;	O
status	int
=	O
folder_pop_get_authority	function
(	O
folder	pointer
,	O
NULL	O
)	O
;	O
if	O
(	O
status	int
!=	O
0	int
)	O
return	O
status	int
;	O
folder	pointer
->	O
_open	pointer
=	O
folder_pop_open	function
;	O
folder	pointer
->	O
_close	pointer
=	O
folder_pop_close	function
;	O
return	O
0	int
;	O
}	O
static	O
int	O
folder_pop_open	function
(	O
mu_folder_t	pointer
folder	pointer
,	O
int	O
flags	int
)	O
{	O
mu_mailbox_t	pointer
mbox	pointer
=	O
folder	pointer
->	O
data	pointer
;	O
return	O
mu_mailbox_open	function
(	O
mbox	pointer
,	O
flags	int
)	O
;	O
}	O
static	O
int	O
folder_pop_close	function
(	O
mu_folder_t	pointer
folder	pointer
)	O
{	O
mu_mailbox_t	pointer
mbox	pointer
=	O
folder	pointer
->	O
data	pointer
;	O
return	O
mu_mailbox_close	function
(	O
mbox	pointer
)	O
;	O
}	O
static	O
int	O
folder_pop_get_authority	function
(	O
mu_folder_t	pointer
folder	pointer
,	O
mu_authority_t	pointer
*	O
pauth	pointer
)	O
{	O
int	O
status	int
=	O
0	int
;	O
if	O
(	O
folder	pointer
->	O
authority	pointer
==	O
NULL	O
)	O
{	O
if	O
(	O
folder	pointer
->	O
url	pointer
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
if	O
(	O
folder	pointer
->	O
url	pointer
->	O
auth	pointer
==	O
NULL	O
||	O
strcmp	function
(	O
folder	pointer
->	O
url	pointer
->	O
auth	pointer
,	O
"*"	pointer
)	O
==	O
0	int
)	O
{	O
status	int
=	O
mu_authority_create	function
(	O
&	O
folder	pointer
->	O
authority	pointer
,	O
NULL	O
,	O
folder	pointer
)	O
;	O
mu_authority_set_authenticate	function
(	O
folder	pointer
->	O
authority	pointer
,	O
_pop_user	function
,	O
folder	pointer
)	O
;	O
}	O
else	O
if	O
(	O
mu_c_strcasecmp	function
(	O
folder	pointer
->	O
url	pointer
->	O
auth	pointer
,	O
"+APOP"	pointer
)	O
==	O
0	int
)	O
{	O
status	int
=	O
mu_authority_create	function
(	O
&	O
folder	pointer
->	O
authority	pointer
,	O
NULL	O
,	O
folder	pointer
)	O
;	O
mu_authority_set_authenticate	function
(	O
folder	pointer
->	O
authority	pointer
,	O
_pop_apop	function
,	O
folder	pointer
)	O
;	O
}	O
else	O
{	O
status	int
=	O
MU_ERR_BAD_AUTH_SCHEME	O
;	O
}	O
}	O
if	O
(	O
pauth	pointer
)	O
*	O
pauth	pointer
=	O
folder	pointer
->	O
authority	pointer
;	O
return	O
status	int
;	O
}	O
