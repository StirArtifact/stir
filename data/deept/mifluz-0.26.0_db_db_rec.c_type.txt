static	O
const	O
char	O
revid	array
[	O
]	O
=	O
"$Id: db_rec.c,v 1.5 2014/04/17 20:27:27 sebdiaz Exp $"	pointer
;	O
int	O
CDB___db_addrem_recover	function
(	O
dbenv	pointer
,	O
dbtp	pointer
,	O
lsnp	pointer
,	O
op	enum
,	O
info	pointer
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
DBT	struct
*	O
dbtp	pointer
;	O
DB_LSN	struct
*	O
lsnp	pointer
;	O
db_recops	enum
op	enum
;	O
void	O
*	O
info	pointer
;	O
{	O
if	O
(	O
info	pointer
)	O
{	O
}	O
__db_addrem_args	struct
*	O
argp	pointer
;	O
DB	struct
*	O
file_dbp	pointer
;	O
DBC	struct
*	O
dbc	pointer
;	O
DB_MPOOLFILE	struct
*	O
mpf	pointer
;	O
PAGE	struct
*	O
pagep	pointer
;	O
u_int32_t	int
change	int
;	O
int	O
cmp_n	int
,	O
cmp_p	int
,	O
ret	int
;	O
COMPQUIET	O
(	O
info	pointer
,	O
NULL	O
)	O
;	O
REC_PRINT	O
(	O
CDB___db_addrem_print	function
)	O
;	O
REC_INTRO	O
(	O
CDB___db_addrem_read	function
,	O
1	int
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB_memp_fget	function
(	O
mpf	pointer
,	O
&	O
argp	pointer
->	O
pgno	int
,	O
0	int
,	O
&	O
pagep	pointer
)	O
)	O
!=	O
0	int
)	O
{	O
if	O
(	O
DB_UNDO	O
(	O
op	enum
)	O
)	O
{	O
goto	O
done	O
;	O
}	O
else	O
if	O
(	O
(	O
ret	int
=	O
CDB_memp_fget	function
(	O
mpf	pointer
,	O
&	O
argp	pointer
->	O
pgno	int
,	O
DB_MPOOL_CREATE	int
,	O
&	O
pagep	pointer
)	O
)	O
!=	O
0	int
)	O
goto	O
out	O
;	O
}	O
cmp_n	int
=	O
CDB_log_compare	function
(	O
lsnp	pointer
,	O
&	O
LSN	O
(	O
pagep	pointer
)	O
)	O
;	O
cmp_p	int
=	O
CDB_log_compare	function
(	O
&	O
LSN	O
(	O
pagep	pointer
)	O
,	O
&	O
argp	pointer
->	O
pagelsn	struct
)	O
;	O
CHECK_LSN	O
(	O
op	enum
,	O
cmp_p	int
,	O
&	O
LSN	O
(	O
pagep	pointer
)	O
,	O
&	O
argp	pointer
->	O
pagelsn	struct
)	O
;	O
change	int
=	O
0	int
;	O
if	O
(	O
(	O
cmp_p	int
==	O
0	int
&&	O
DB_REDO	O
(	O
op	enum
)	O
&&	O
argp	pointer
->	O
opcode	int
==	O
DB_ADD_DUP	int
)	O
||	O
(	O
cmp_n	int
==	O
0	int
&&	O
DB_UNDO	O
(	O
op	enum
)	O
&&	O
argp	pointer
->	O
opcode	int
==	O
DB_REM_DUP	int
)	O
)	O
{	O
if	O
(	O
(	O
ret	int
=	O
CDB___db_pitem	function
(	O
dbc	pointer
,	O
pagep	pointer
,	O
argp	pointer
->	O
indx	short
,	O
argp	pointer
->	O
nbytes	long
,	O
argp	pointer
->	O
hdr	pointer
.	O
size	int
==	O
0	int
?	O
NULL	O
:	O
&	O
argp	pointer
->	O
hdr	pointer
,	O
argp	pointer
->	O
dbt	struct
.	O
size	int
==	O
0	int
?	O
NULL	O
:	O
&	O
argp	pointer
->	O
dbt	struct
)	O
)	O
!=	O
0	int
)	O
goto	O
out	O
;	O
change	int
=	O
DB_MPOOL_DIRTY	int
;	O
}	O
else	O
if	O
(	O
(	O
cmp_n	int
==	O
0	int
&&	O
DB_UNDO	O
(	O
op	enum
)	O
&&	O
argp	pointer
->	O
opcode	int
==	O
DB_ADD_DUP	int
)	O
||	O
(	O
cmp_p	int
==	O
0	int
&&	O
DB_REDO	O
(	O
op	enum
)	O
&&	O
argp	pointer
->	O
opcode	int
==	O
DB_REM_DUP	int
)	O
)	O
{	O
if	O
(	O
(	O
ret	int
=	O
CDB___db_ditem	function
(	O
dbc	pointer
,	O
pagep	pointer
,	O
argp	pointer
->	O
indx	short
,	O
argp	pointer
->	O
nbytes	long
)	O
)	O
!=	O
0	int
)	O
goto	O
out	O
;	O
change	int
=	O
DB_MPOOL_DIRTY	int
;	O
}	O
if	O
(	O
change	int
)	O
{	O
if	O
(	O
DB_REDO	O
(	O
op	enum
)	O
)	O
LSN	O
(	O
pagep	pointer
)	O
=	O
*	O
lsnp	pointer
;	O
else	O
LSN	O
(	O
pagep	pointer
)	O
=	O
argp	pointer
->	O
pagelsn	struct
;	O
}	O
if	O
(	O
(	O
ret	int
=	O
CDB_memp_fput	function
(	O
mpf	pointer
,	O
pagep	pointer
,	O
change	int
)	O
)	O
!=	O
0	int
)	O
goto	O
out	O
;	O
done	O
:	O
*	O
lsnp	pointer
=	O
argp	pointer
->	O
prev_lsn	struct
;	O
ret	int
=	O
0	int
;	O
out	O
:	O
REC_CLOSE	O
;	O
}	O
int	O
CDB___db_big_recover	function
(	O
dbenv	pointer
,	O
dbtp	pointer
,	O
lsnp	pointer
,	O
op	enum
,	O
info	pointer
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
DBT	struct
*	O
dbtp	pointer
;	O
DB_LSN	struct
*	O
lsnp	pointer
;	O
db_recops	enum
op	enum
;	O
void	O
*	O
info	pointer
;	O
{	O
if	O
(	O
info	pointer
)	O
{	O
}	O
__db_big_args	struct
*	O
argp	pointer
;	O
DB	struct
*	O
file_dbp	pointer
;	O
DBC	struct
*	O
dbc	pointer
;	O
DB_MPOOLFILE	struct
*	O
mpf	pointer
;	O
PAGE	struct
*	O
pagep	pointer
;	O
u_int32_t	int
change	int
;	O
int	O
cmp_n	int
,	O
cmp_p	int
,	O
ret	int
;	O
COMPQUIET	O
(	O
info	pointer
,	O
NULL	O
)	O
;	O
REC_PRINT	O
(	O
CDB___db_big_print	function
)	O
;	O
REC_INTRO	O
(	O
CDB___db_big_read	function
,	O
1	int
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB_memp_fget	function
(	O
mpf	pointer
,	O
&	O
argp	pointer
->	O
pgno	int
,	O
0	int
,	O
&	O
pagep	pointer
)	O
)	O
!=	O
0	int
)	O
{	O
if	O
(	O
DB_UNDO	O
(	O
op	enum
)	O
)	O
{	O
ret	int
=	O
0	int
;	O
goto	O
ppage	O
;	O
}	O
else	O
if	O
(	O
(	O
ret	int
=	O
CDB_memp_fget	function
(	O
mpf	pointer
,	O
&	O
argp	pointer
->	O
pgno	int
,	O
DB_MPOOL_CREATE	int
,	O
&	O
pagep	pointer
)	O
)	O
!=	O
0	int
)	O
goto	O
out	O
;	O
}	O
cmp_n	int
=	O
CDB_log_compare	function
(	O
lsnp	pointer
,	O
&	O
LSN	O
(	O
pagep	pointer
)	O
)	O
;	O
cmp_p	int
=	O
CDB_log_compare	function
(	O
&	O
LSN	O
(	O
pagep	pointer
)	O
,	O
&	O
argp	pointer
->	O
pagelsn	struct
)	O
;	O
CHECK_LSN	O
(	O
op	enum
,	O
cmp_p	int
,	O
&	O
LSN	O
(	O
pagep	pointer
)	O
,	O
&	O
argp	pointer
->	O
pagelsn	struct
)	O
;	O
change	int
=	O
0	int
;	O
if	O
(	O
(	O
cmp_p	int
==	O
0	int
&&	O
DB_REDO	O
(	O
op	enum
)	O
&&	O
argp	pointer
->	O
opcode	int
==	O
DB_ADD_BIG	int
)	O
||	O
(	O
cmp_n	int
==	O
0	int
&&	O
DB_UNDO	O
(	O
op	enum
)	O
&&	O
argp	pointer
->	O
opcode	int
==	O
DB_REM_BIG	int
)	O
)	O
{	O
P_INIT	O
(	O
pagep	pointer
,	O
file_dbp	pointer
->	O
pgsize	int
,	O
argp	pointer
->	O
pgno	int
,	O
argp	pointer
->	O
prev_pgno	int
,	O
argp	pointer
->	O
next_pgno	int
,	O
0	int
,	O
P_OVERFLOW	int
,	O
TAGS	O
(	O
argp	pointer
)	O
)	O
;	O
OV_LEN	O
(	O
pagep	pointer
)	O
=	O
argp	pointer
->	O
dbt	struct
.	O
size	int
;	O
OV_REF	O
(	O
pagep	pointer
)	O
=	O
1	int
;	O
memcpy	function
(	O
(	O
u_int8_t	char
*	O
)	O
pagep	pointer
+	O
P_OVERHEAD	O
,	O
argp	pointer
->	O
dbt	struct
.	O
data	pointer
,	O
argp	pointer
->	O
dbt	struct
.	O
size	int
)	O
;	O
PREV_PGNO	O
(	O
pagep	pointer
)	O
=	O
argp	pointer
->	O
prev_pgno	int
;	O
change	int
=	O
DB_MPOOL_DIRTY	int
;	O
}	O
else	O
if	O
(	O
(	O
cmp_n	int
==	O
0	int
&&	O
DB_UNDO	O
(	O
op	enum
)	O
&&	O
argp	pointer
->	O
opcode	int
==	O
DB_ADD_BIG	int
)	O
||	O
(	O
cmp_p	int
==	O
0	int
&&	O
DB_REDO	O
(	O
op	enum
)	O
&&	O
argp	pointer
->	O
opcode	int
==	O
DB_REM_BIG	int
)	O
)	O
{	O
change	int
=	O
DB_MPOOL_DIRTY	int
;	O
}	O
if	O
(	O
change	int
)	O
LSN	O
(	O
pagep	pointer
)	O
=	O
DB_REDO	O
(	O
op	enum
)	O
?	O
*	O
lsnp	pointer
:	O
argp	pointer
->	O
pagelsn	struct
;	O
if	O
(	O
(	O
ret	int
=	O
CDB_memp_fput	function
(	O
mpf	pointer
,	O
pagep	pointer
,	O
change	int
)	O
)	O
!=	O
0	int
)	O
goto	O
out	O
;	O
ppage	O
:	O
if	O
(	O
argp	pointer
->	O
prev_pgno	int
!=	O
PGNO_INVALID	int
)	O
{	O
change	int
=	O
0	int
;	O
if	O
(	O
(	O
ret	int
=	O
CDB_memp_fget	function
(	O
mpf	pointer
,	O
&	O
argp	pointer
->	O
prev_pgno	int
,	O
0	int
,	O
&	O
pagep	pointer
)	O
)	O
!=	O
0	int
)	O
{	O
if	O
(	O
DB_UNDO	O
(	O
op	enum
)	O
)	O
{	O
*	O
lsnp	pointer
=	O
argp	pointer
->	O
prev_lsn	struct
;	O
ret	int
=	O
0	int
;	O
goto	O
npage	O
;	O
}	O
else	O
if	O
(	O
(	O
ret	int
=	O
CDB_memp_fget	function
(	O
mpf	pointer
,	O
&	O
argp	pointer
->	O
prev_pgno	int
,	O
DB_MPOOL_CREATE	int
,	O
&	O
pagep	pointer
)	O
)	O
!=	O
0	int
)	O
goto	O
out	O
;	O
}	O
cmp_n	int
=	O
CDB_log_compare	function
(	O
lsnp	pointer
,	O
&	O
LSN	O
(	O
pagep	pointer
)	O
)	O
;	O
cmp_p	int
=	O
CDB_log_compare	function
(	O
&	O
LSN	O
(	O
pagep	pointer
)	O
,	O
&	O
argp	pointer
->	O
prevlsn	struct
)	O
;	O
CHECK_LSN	O
(	O
op	enum
,	O
cmp_p	int
,	O
&	O
LSN	O
(	O
pagep	pointer
)	O
,	O
&	O
argp	pointer
->	O
prevlsn	struct
)	O
;	O
if	O
(	O
(	O
cmp_p	int
==	O
0	int
&&	O
DB_REDO	O
(	O
op	enum
)	O
&&	O
argp	pointer
->	O
opcode	int
==	O
DB_ADD_BIG	int
)	O
||	O
(	O
cmp_n	int
==	O
0	int
&&	O
DB_UNDO	O
(	O
op	enum
)	O
&&	O
argp	pointer
->	O
opcode	int
==	O
DB_REM_BIG	int
)	O
)	O
{	O
NEXT_PGNO	O
(	O
pagep	pointer
)	O
=	O
argp	pointer
->	O
pgno	int
;	O
change	int
=	O
DB_MPOOL_DIRTY	int
;	O
}	O
else	O
if	O
(	O
(	O
cmp_n	int
==	O
0	int
&&	O
DB_UNDO	O
(	O
op	enum
)	O
&&	O
argp	pointer
->	O
opcode	int
==	O
DB_ADD_BIG	int
)	O
||	O
(	O
cmp_p	int
==	O
0	int
&&	O
DB_REDO	O
(	O
op	enum
)	O
&&	O
argp	pointer
->	O
opcode	int
==	O
DB_REM_BIG	int
)	O
)	O
{	O
NEXT_PGNO	O
(	O
pagep	pointer
)	O
=	O
argp	pointer
->	O
next_pgno	int
;	O
change	int
=	O
DB_MPOOL_DIRTY	int
;	O
}	O
if	O
(	O
change	int
)	O
LSN	O
(	O
pagep	pointer
)	O
=	O
DB_REDO	O
(	O
op	enum
)	O
?	O
*	O
lsnp	pointer
:	O
argp	pointer
->	O
prevlsn	struct
;	O
if	O
(	O
(	O
ret	int
=	O
CDB_memp_fput	function
(	O
mpf	pointer
,	O
pagep	pointer
,	O
change	int
)	O
)	O
!=	O
0	int
)	O
goto	O
out	O
;	O
}	O
npage	O
:	O
if	O
(	O
argp	pointer
->	O
next_pgno	int
!=	O
PGNO_INVALID	int
)	O
{	O
change	int
=	O
0	int
;	O
if	O
(	O
(	O
ret	int
=	O
CDB_memp_fget	function
(	O
mpf	pointer
,	O
&	O
argp	pointer
->	O
next_pgno	int
,	O
0	int
,	O
&	O
pagep	pointer
)	O
)	O
!=	O
0	int
)	O
{	O
if	O
(	O
DB_UNDO	O
(	O
op	enum
)	O
)	O
{	O
goto	O
done	O
;	O
}	O
else	O
if	O
(	O
(	O
ret	int
=	O
CDB_memp_fget	function
(	O
mpf	pointer
,	O
&	O
argp	pointer
->	O
next_pgno	int
,	O
DB_MPOOL_CREATE	int
,	O
&	O
pagep	pointer
)	O
)	O
!=	O
0	int
)	O
goto	O
out	O
;	O
}	O
cmp_n	int
=	O
CDB_log_compare	function
(	O
lsnp	pointer
,	O
&	O
LSN	O
(	O
pagep	pointer
)	O
)	O
;	O
cmp_p	int
=	O
CDB_log_compare	function
(	O
&	O
LSN	O
(	O
pagep	pointer
)	O
,	O
&	O
argp	pointer
->	O
nextlsn	struct
)	O
;	O
CHECK_LSN	O
(	O
op	enum
,	O
cmp_p	int
,	O
&	O
LSN	O
(	O
pagep	pointer
)	O
,	O
&	O
argp	pointer
->	O
nextlsn	struct
)	O
;	O
if	O
(	O
cmp_p	int
==	O
0	int
&&	O
DB_REDO	O
(	O
op	enum
)	O
)	O
{	O
PREV_PGNO	O
(	O
pagep	pointer
)	O
=	O
PGNO_INVALID	int
;	O
change	int
=	O
DB_MPOOL_DIRTY	int
;	O
}	O
else	O
if	O
(	O
cmp_n	int
==	O
0	int
&&	O
DB_UNDO	O
(	O
op	enum
)	O
)	O
{	O
PREV_PGNO	O
(	O
pagep	pointer
)	O
=	O
argp	pointer
->	O
pgno	int
;	O
change	int
=	O
DB_MPOOL_DIRTY	int
;	O
}	O
if	O
(	O
change	int
)	O
LSN	O
(	O
pagep	pointer
)	O
=	O
DB_REDO	O
(	O
op	enum
)	O
?	O
*	O
lsnp	pointer
:	O
argp	pointer
->	O
nextlsn	struct
;	O
if	O
(	O
(	O
ret	int
=	O
CDB_memp_fput	function
(	O
mpf	pointer
,	O
pagep	pointer
,	O
change	int
)	O
)	O
!=	O
0	int
)	O
goto	O
out	O
;	O
}	O
done	O
:	O
*	O
lsnp	pointer
=	O
argp	pointer
->	O
prev_lsn	struct
;	O
ret	int
=	O
0	int
;	O
out	O
:	O
REC_CLOSE	O
;	O
}	O
int	O
CDB___db_ovref_recover	function
(	O
dbenv	pointer
,	O
dbtp	pointer
,	O
lsnp	pointer
,	O
op	enum
,	O
info	pointer
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
DBT	struct
*	O
dbtp	pointer
;	O
DB_LSN	struct
*	O
lsnp	pointer
;	O
db_recops	enum
op	enum
;	O
void	O
*	O
info	pointer
;	O
{	O
if	O
(	O
info	pointer
)	O
{	O
}	O
__db_ovref_args	struct
*	O
argp	pointer
;	O
DB	struct
*	O
file_dbp	pointer
;	O
DBC	struct
*	O
dbc	pointer
;	O
DB_MPOOLFILE	struct
*	O
mpf	pointer
;	O
PAGE	struct
*	O
pagep	pointer
;	O
int	O
cmp	int
,	O
modified	int
,	O
ret	int
;	O
COMPQUIET	O
(	O
info	pointer
,	O
NULL	O
)	O
;	O
REC_PRINT	O
(	O
CDB___db_ovref_print	function
)	O
;	O
REC_INTRO	O
(	O
CDB___db_ovref_read	function
,	O
1	int
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB_memp_fget	function
(	O
mpf	pointer
,	O
&	O
argp	pointer
->	O
pgno	int
,	O
0	int
,	O
&	O
pagep	pointer
)	O
)	O
!=	O
0	int
)	O
{	O
(	O
void	O
)	O
CDB___db_pgerr	function
(	O
file_dbp	pointer
,	O
argp	pointer
->	O
pgno	int
)	O
;	O
goto	O
out	O
;	O
}	O
modified	int
=	O
0	int
;	O
cmp	int
=	O
CDB_log_compare	function
(	O
&	O
LSN	O
(	O
pagep	pointer
)	O
,	O
&	O
argp	pointer
->	O
lsn	struct
)	O
;	O
CHECK_LSN	O
(	O
op	enum
,	O
cmp	int
,	O
&	O
LSN	O
(	O
pagep	pointer
)	O
,	O
&	O
argp	pointer
->	O
lsn	struct
)	O
;	O
if	O
(	O
cmp	int
==	O
0	int
&&	O
DB_REDO	O
(	O
op	enum
)	O
)	O
{	O
OV_REF	O
(	O
pagep	pointer
)	O
+=	O
argp	pointer
->	O
adjust	int
;	O
pagep	pointer
->	O
lsn	struct
=	O
*	O
lsnp	pointer
;	O
modified	int
=	O
1	int
;	O
}	O
else	O
if	O
(	O
CDB_log_compare	function
(	O
lsnp	pointer
,	O
&	O
LSN	O
(	O
pagep	pointer
)	O
)	O
==	O
0	int
&&	O
DB_UNDO	O
(	O
op	enum
)	O
)	O
{	O
OV_REF	O
(	O
pagep	pointer
)	O
-=	O
argp	pointer
->	O
adjust	int
;	O
pagep	pointer
->	O
lsn	struct
=	O
argp	pointer
->	O
lsn	struct
;	O
modified	int
=	O
1	int
;	O
}	O
if	O
(	O
(	O
ret	int
=	O
CDB_memp_fput	function
(	O
mpf	pointer
,	O
pagep	pointer
,	O
modified	int
?	O
DB_MPOOL_DIRTY	int
:	O
0	int
)	O
)	O
!=	O
0	int
)	O
goto	O
out	O
;	O
done	O
:	O
*	O
lsnp	pointer
=	O
argp	pointer
->	O
prev_lsn	struct
;	O
ret	int
=	O
0	int
;	O
out	O
:	O
REC_CLOSE	O
;	O
}	O
int	O
CDB___db_relink_recover	function
(	O
dbenv	pointer
,	O
dbtp	pointer
,	O
lsnp	pointer
,	O
op	enum
,	O
info	pointer
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
DBT	struct
*	O
dbtp	pointer
;	O
DB_LSN	struct
*	O
lsnp	pointer
;	O
db_recops	enum
op	enum
;	O
void	O
*	O
info	pointer
;	O
{	O
if	O
(	O
info	pointer
)	O
{	O
}	O
__db_relink_args	struct
*	O
argp	pointer
;	O
DB	struct
*	O
file_dbp	pointer
;	O
DBC	struct
*	O
dbc	pointer
;	O
DB_MPOOLFILE	struct
*	O
mpf	pointer
;	O
PAGE	struct
*	O
pagep	pointer
;	O
int	O
cmp_n	int
,	O
cmp_p	int
,	O
modified	int
,	O
ret	int
;	O
COMPQUIET	O
(	O
info	pointer
,	O
NULL	O
)	O
;	O
REC_PRINT	O
(	O
CDB___db_relink_print	function
)	O
;	O
REC_INTRO	O
(	O
CDB___db_relink_read	function
,	O
1	int
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB_memp_fget	function
(	O
mpf	pointer
,	O
&	O
argp	pointer
->	O
pgno	int
,	O
0	int
,	O
&	O
pagep	pointer
)	O
)	O
!=	O
0	int
)	O
{	O
if	O
(	O
DB_REDO	O
(	O
op	enum
)	O
)	O
{	O
(	O
void	O
)	O
CDB___db_pgerr	function
(	O
file_dbp	pointer
,	O
argp	pointer
->	O
pgno	int
)	O
;	O
goto	O
out	O
;	O
}	O
goto	O
next2	O
;	O
}	O
modified	int
=	O
0	int
;	O
if	O
(	O
argp	pointer
->	O
opcode	int
==	O
DB_ADD_PAGE	int
)	O
goto	O
next1	O
;	O
cmp_p	int
=	O
CDB_log_compare	function
(	O
&	O
LSN	O
(	O
pagep	pointer
)	O
,	O
&	O
argp	pointer
->	O
lsn	struct
)	O
;	O
CHECK_LSN	O
(	O
op	enum
,	O
cmp_p	int
,	O
&	O
LSN	O
(	O
pagep	pointer
)	O
,	O
&	O
argp	pointer
->	O
lsn	struct
)	O
;	O
if	O
(	O
cmp_p	int
==	O
0	int
&&	O
DB_REDO	O
(	O
op	enum
)	O
)	O
{	O
pagep	pointer
->	O
lsn	struct
=	O
*	O
lsnp	pointer
;	O
modified	int
=	O
1	int
;	O
}	O
else	O
if	O
(	O
CDB_log_compare	function
(	O
lsnp	pointer
,	O
&	O
LSN	O
(	O
pagep	pointer
)	O
)	O
==	O
0	int
&&	O
DB_UNDO	O
(	O
op	enum
)	O
)	O
{	O
pagep	pointer
->	O
next_pgno	int
=	O
argp	pointer
->	O
next	int
;	O
pagep	pointer
->	O
prev_pgno	int
=	O
argp	pointer
->	O
prev	int
;	O
pagep	pointer
->	O
lsn	struct
=	O
argp	pointer
->	O
lsn	struct
;	O
modified	int
=	O
1	int
;	O
}	O
next1	O
:	O
if	O
(	O
(	O
ret	int
=	O
CDB_memp_fput	function
(	O
mpf	pointer
,	O
pagep	pointer
,	O
modified	int
?	O
DB_MPOOL_DIRTY	int
:	O
0	int
)	O
)	O
!=	O
0	int
)	O
goto	O
out	O
;	O
next2	O
:	O
if	O
(	O
(	O
ret	int
=	O
CDB_memp_fget	function
(	O
mpf	pointer
,	O
&	O
argp	pointer
->	O
next	int
,	O
0	int
,	O
&	O
pagep	pointer
)	O
)	O
!=	O
0	int
)	O
{	O
if	O
(	O
DB_REDO	O
(	O
op	enum
)	O
)	O
{	O
(	O
void	O
)	O
CDB___db_pgerr	function
(	O
file_dbp	pointer
,	O
argp	pointer
->	O
next	int
)	O
;	O
goto	O
out	O
;	O
}	O
goto	O
prev	int
;	O
}	O
modified	int
=	O
0	int
;	O
cmp_n	int
=	O
CDB_log_compare	function
(	O
lsnp	pointer
,	O
&	O
LSN	O
(	O
pagep	pointer
)	O
)	O
;	O
cmp_p	int
=	O
CDB_log_compare	function
(	O
&	O
LSN	O
(	O
pagep	pointer
)	O
,	O
&	O
argp	pointer
->	O
lsn_next	struct
)	O
;	O
CHECK_LSN	O
(	O
op	enum
,	O
cmp_p	int
,	O
&	O
LSN	O
(	O
pagep	pointer
)	O
,	O
&	O
argp	pointer
->	O
lsn_next	struct
)	O
;	O
if	O
(	O
(	O
argp	pointer
->	O
opcode	int
==	O
DB_REM_PAGE	int
&&	O
cmp_p	int
==	O
0	int
&&	O
DB_REDO	O
(	O
op	enum
)	O
)	O
||	O
(	O
argp	pointer
->	O
opcode	int
==	O
DB_ADD_PAGE	int
&&	O
cmp_n	int
==	O
0	int
&&	O
DB_UNDO	O
(	O
op	enum
)	O
)	O
)	O
{	O
pagep	pointer
->	O
prev_pgno	int
=	O
argp	pointer
->	O
prev	int
;	O
modified	int
=	O
1	int
;	O
}	O
else	O
if	O
(	O
(	O
argp	pointer
->	O
opcode	int
==	O
DB_REM_PAGE	int
&&	O
cmp_n	int
==	O
0	int
&&	O
DB_UNDO	O
(	O
op	enum
)	O
)	O
||	O
(	O
argp	pointer
->	O
opcode	int
==	O
DB_ADD_PAGE	int
&&	O
cmp_p	int
==	O
0	int
&&	O
DB_REDO	O
(	O
op	enum
)	O
)	O
)	O
{	O
pagep	pointer
->	O
prev_pgno	int
=	O
argp	pointer
->	O
pgno	int
;	O
modified	int
=	O
1	int
;	O
}	O
if	O
(	O
modified	int
==	O
1	int
)	O
{	O
if	O
(	O
DB_UNDO	O
(	O
op	enum
)	O
)	O
pagep	pointer
->	O
lsn	struct
=	O
argp	pointer
->	O
lsn_next	struct
;	O
else	O
pagep	pointer
->	O
lsn	struct
=	O
*	O
lsnp	pointer
;	O
}	O
if	O
(	O
(	O
ret	int
=	O
CDB_memp_fput	function
(	O
mpf	pointer
,	O
pagep	pointer
,	O
modified	int
?	O
DB_MPOOL_DIRTY	int
:	O
0	int
)	O
)	O
!=	O
0	int
)	O
goto	O
out	O
;	O
if	O
(	O
argp	pointer
->	O
opcode	int
==	O
DB_ADD_PAGE	int
)	O
goto	O
done	O
;	O
prev	int
:	O
if	O
(	O
(	O
ret	int
=	O
CDB_memp_fget	function
(	O
mpf	pointer
,	O
&	O
argp	pointer
->	O
prev	int
,	O
0	int
,	O
&	O
pagep	pointer
)	O
)	O
!=	O
0	int
)	O
{	O
if	O
(	O
DB_REDO	O
(	O
op	enum
)	O
)	O
{	O
(	O
void	O
)	O
CDB___db_pgerr	function
(	O
file_dbp	pointer
,	O
argp	pointer
->	O
prev	int
)	O
;	O
goto	O
out	O
;	O
}	O
goto	O
done	O
;	O
}	O
modified	int
=	O
0	int
;	O
cmp_p	int
=	O
CDB_log_compare	function
(	O
&	O
LSN	O
(	O
pagep	pointer
)	O
,	O
&	O
argp	pointer
->	O
lsn_prev	struct
)	O
;	O
CHECK_LSN	O
(	O
op	enum
,	O
cmp_p	int
,	O
&	O
LSN	O
(	O
pagep	pointer
)	O
,	O
&	O
argp	pointer
->	O
lsn_prev	struct
)	O
;	O
if	O
(	O
cmp_p	int
==	O
0	int
&&	O
DB_REDO	O
(	O
op	enum
)	O
)	O
{	O
pagep	pointer
->	O
next_pgno	int
=	O
argp	pointer
->	O
next	int
;	O
modified	int
=	O
1	int
;	O
}	O
else	O
if	O
(	O
CDB_log_compare	function
(	O
lsnp	pointer
,	O
&	O
LSN	O
(	O
pagep	pointer
)	O
)	O
==	O
0	int
&&	O
DB_UNDO	O
(	O
op	enum
)	O
)	O
{	O
pagep	pointer
->	O
next_pgno	int
=	O
argp	pointer
->	O
pgno	int
;	O
modified	int
=	O
1	int
;	O
}	O
if	O
(	O
modified	int
==	O
1	int
)	O
{	O
if	O
(	O
DB_UNDO	O
(	O
op	enum
)	O
)	O
pagep	pointer
->	O
lsn	struct
=	O
argp	pointer
->	O
lsn_prev	struct
;	O
else	O
pagep	pointer
->	O
lsn	struct
=	O
*	O
lsnp	pointer
;	O
}	O
if	O
(	O
(	O
ret	int
=	O
CDB_memp_fput	function
(	O
mpf	pointer
,	O
pagep	pointer
,	O
modified	int
?	O
DB_MPOOL_DIRTY	int
:	O
0	int
)	O
)	O
!=	O
0	int
)	O
goto	O
out	O
;	O
done	O
:	O
*	O
lsnp	pointer
=	O
argp	pointer
->	O
prev_lsn	struct
;	O
ret	int
=	O
0	int
;	O
out	O
:	O
REC_CLOSE	O
;	O
}	O
int	O
CDB___db_debug_recover	function
(	O
dbenv	pointer
,	O
dbtp	pointer
,	O
lsnp	pointer
,	O
op	enum
,	O
info	pointer
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
DBT	struct
*	O
dbtp	pointer
;	O
DB_LSN	struct
*	O
lsnp	pointer
;	O
db_recops	enum
op	enum
;	O
void	O
*	O
info	pointer
;	O
{	O
if	O
(	O
info	pointer
||	O
op	enum
)	O
{	O
}	O
__db_debug_args	struct
*	O
argp	pointer
;	O
int	O
ret	int
;	O
COMPQUIET	O
(	O
op	enum
,	O
0	int
)	O
;	O
COMPQUIET	O
(	O
dbenv	pointer
,	O
NULL	O
)	O
;	O
COMPQUIET	O
(	O
info	pointer
,	O
NULL	O
)	O
;	O
REC_PRINT	O
(	O
CDB___db_debug_print	function
)	O
;	O
REC_NOOP_INTRO	O
(	O
CDB___db_debug_read	function
)	O
;	O
*	O
lsnp	pointer
=	O
argp	pointer
->	O
prev_lsn	struct
;	O
ret	int
=	O
0	int
;	O
REC_NOOP_CLOSE	O
;	O
}	O
int	O
CDB___db_noop_recover	function
(	O
dbenv	pointer
,	O
dbtp	pointer
,	O
lsnp	pointer
,	O
op	enum
,	O
info	pointer
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
DBT	struct
*	O
dbtp	pointer
;	O
DB_LSN	struct
*	O
lsnp	pointer
;	O
db_recops	enum
op	enum
;	O
void	O
*	O
info	pointer
;	O
{	O
if	O
(	O
info	pointer
)	O
{	O
}	O
__db_noop_args	struct
*	O
argp	pointer
;	O
DB	struct
*	O
file_dbp	pointer
;	O
DBC	struct
*	O
dbc	pointer
;	O
DB_MPOOLFILE	struct
*	O
mpf	pointer
;	O
PAGE	struct
*	O
pagep	pointer
;	O
u_int32_t	int
change	int
;	O
int	O
cmp_n	int
,	O
cmp_p	int
,	O
ret	int
;	O
COMPQUIET	O
(	O
info	pointer
,	O
NULL	O
)	O
;	O
REC_PRINT	O
(	O
CDB___db_noop_print	function
)	O
;	O
REC_INTRO	O
(	O
CDB___db_noop_read	function
,	O
0	int
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB_memp_fget	function
(	O
mpf	pointer
,	O
&	O
argp	pointer
->	O
pgno	int
,	O
0	int
,	O
&	O
pagep	pointer
)	O
)	O
!=	O
0	int
)	O
goto	O
out	O
;	O
cmp_n	int
=	O
CDB_log_compare	function
(	O
lsnp	pointer
,	O
&	O
LSN	O
(	O
pagep	pointer
)	O
)	O
;	O
cmp_p	int
=	O
CDB_log_compare	function
(	O
&	O
LSN	O
(	O
pagep	pointer
)	O
,	O
&	O
argp	pointer
->	O
prevlsn	struct
)	O
;	O
CHECK_LSN	O
(	O
op	enum
,	O
cmp_p	int
,	O
&	O
LSN	O
(	O
pagep	pointer
)	O
,	O
&	O
argp	pointer
->	O
prevlsn	struct
)	O
;	O
change	int
=	O
0	int
;	O
if	O
(	O
cmp_p	int
==	O
0	int
&&	O
DB_REDO	O
(	O
op	enum
)	O
)	O
{	O
LSN	O
(	O
pagep	pointer
)	O
=	O
*	O
lsnp	pointer
;	O
change	int
=	O
DB_MPOOL_DIRTY	int
;	O
}	O
else	O
if	O
(	O
cmp_n	int
==	O
0	int
&&	O
DB_UNDO	O
(	O
op	enum
)	O
)	O
{	O
LSN	O
(	O
pagep	pointer
)	O
=	O
argp	pointer
->	O
prevlsn	struct
;	O
change	int
=	O
DB_MPOOL_DIRTY	int
;	O
}	O
ret	int
=	O
CDB_memp_fput	function
(	O
mpf	pointer
,	O
pagep	pointer
,	O
change	int
)	O
;	O
done	O
:	O
*	O
lsnp	pointer
=	O
argp	pointer
->	O
prev_lsn	struct
;	O
out	O
:	O
REC_CLOSE	O
;	O
}	O
