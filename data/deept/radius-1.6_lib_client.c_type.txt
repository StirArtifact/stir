void	O
grad_client_random_authenticator	function
(	O
char	O
*	O
authenticator	array
)	O
{	O
int	O
randno	int
;	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
GRAD_AUTHENTICATOR_LENGTH	int
;	O
)	O
{	O
randno	int
=	O
rand	function
(	O
)	O
;	O
memcpy	function
(	O
authenticator	array
,	O
&	O
randno	int
,	O
sizeof	O
(	O
int	O
)	O
)	O
;	O
authenticator	array
+=	O
sizeof	O
(	O
int	O
)	O
;	O
i	int
+=	O
sizeof	O
(	O
int	O
)	O
;	O
}	O
}	O
unsigned	O
grad_client_message_id	function
(	O
grad_server_t	struct
*	O
server	pointer
)	O
{	O
grad_server_id_t	struct
sid	struct
;	O
int	O
fd	int
;	O
unsigned	O
id	char
;	O
fd	int
=	O
open	function
(	O
grad_msgid_file	pointer
,	O
O_RDWR	int
|	O
O_CREAT	int
,	O
PERM	O
)	O
;	O
if	O
(	O
fd	int
!=	O
-	O
1	int
)	O
{	O
struct	O
stat	struct
st	struct
;	O
fstat	function
(	O
fd	int
,	O
&	O
st	struct
)	O
;	O
if	O
(	O
server	pointer
->	O
id_offset	long
!=	O
(	O
off_t	long
)	O
-	O
1	int
&&	O
server	pointer
->	O
id_offset	long
+	O
sizeof	O
(	O
sid	struct
)	O
<=	O
st	struct
.	O
st_size	long
)	O
{	O
grad_lock_file	function
(	O
fd	int
,	O
sizeof	O
(	O
sid	struct
)	O
,	O
server	pointer
->	O
id_offset	long
,	O
SEEK_SET	int
)	O
;	O
lseek	function
(	O
fd	int
,	O
server	pointer
->	O
id_offset	long
,	O
SEEK_SET	int
)	O
;	O
read	pointer
(	O
fd	int
,	O
&	O
sid	struct
,	O
sizeof	O
(	O
sid	struct
)	O
)	O
;	O
id	char
=	O
sid	struct
.	O
id	char
++	O
;	O
lseek	function
(	O
fd	int
,	O
server	pointer
->	O
id_offset	long
,	O
SEEK_SET	int
)	O
;	O
write	pointer
(	O
fd	int
,	O
&	O
sid	struct
,	O
sizeof	O
(	O
sid	struct
)	O
)	O
;	O
grad_unlock_file	function
(	O
fd	int
,	O
sizeof	O
(	O
sid	struct
)	O
,	O
server	pointer
->	O
id_offset	long
,	O
SEEK_SET	int
)	O
;	O
}	O
else	O
{	O
off_t	long
off	long
=	O
0	int
;	O
lseek	function
(	O
fd	int
,	O
0	int
,	O
SEEK_SET	int
)	O
;	O
grad_lock_file	function
(	O
fd	int
,	O
st	struct
.	O
st_size	long
+	O
sizeof	O
(	O
sid	struct
)	O
,	O
0	int
,	O
SEEK_SET	int
)	O
;	O
while	O
(	O
read	pointer
(	O
fd	int
,	O
&	O
sid	struct
,	O
sizeof	O
(	O
sid	struct
)	O
)	O
==	O
sizeof	O
(	O
sid	struct
)	O
)	O
{	O
if	O
(	O
sid	struct
.	O
addr	int
==	O
server	pointer
->	O
addr	int
)	O
{	O
id	char
=	O
sid	struct
.	O
id	char
++	O
;	O
lseek	function
(	O
fd	int
,	O
off	long
,	O
SEEK_SET	int
)	O
;	O
write	pointer
(	O
fd	int
,	O
&	O
sid	struct
,	O
sizeof	O
(	O
sid	struct
)	O
)	O
;	O
break	O
;	O
}	O
off	long
+=	O
sizeof	O
(	O
sid	struct
)	O
;	O
}	O
if	O
(	O
off	long
==	O
st	struct
.	O
st_size	long
)	O
{	O
sid	struct
.	O
addr	int
=	O
server	pointer
->	O
addr	int
;	O
sid	struct
.	O
id	char
=	O
1	int
;	O
write	pointer
(	O
fd	int
,	O
&	O
sid	struct
,	O
sizeof	O
(	O
sid	struct
)	O
)	O
;	O
server	pointer
->	O
id_offset	long
=	O
off	long
;	O
id	char
=	O
0	int
;	O
}	O
grad_unlock_file	function
(	O
fd	int
,	O
st	struct
.	O
st_size	long
+	O
sizeof	O
(	O
sid	struct
)	O
,	O
0	int
,	O
SEEK_SET	int
)	O
;	O
}	O
close	pointer
(	O
fd	int
)	O
;	O
}	O
else	O
{	O
id	char
=	O
random	function
(	O
)	O
%	O
256	int
;	O
}	O
return	O
id	char
;	O
}	O
grad_request_t	struct
*	O
grad_client_recv	function
(	O
grad_uint32_t	int
host	int
,	O
u_short	short
udp_port	short
,	O
char	O
*	O
secret	pointer
,	O
char	O
*	O
authenticator	array
,	O
char	O
*	O
buffer	pointer
,	O
int	O
length	short
)	O
{	O
grad_packet_header_t	struct
*	O
auth	pointer
;	O
int	O
totallen	int
;	O
u_char	char
reply_digest	array
[	O
GRAD_AUTHENTICATOR_LENGTH	int
]	O
;	O
u_char	char
calc_digest	array
[	O
GRAD_AUTHENTICATOR_LENGTH	int
]	O
;	O
int	O
secretlen	int
;	O
grad_request_t	struct
*	O
req	pointer
;	O
auth	pointer
=	O
(	O
grad_packet_header_t	struct
*	O
)	O
buffer	pointer
;	O
totallen	int
=	O
ntohs	function
(	O
auth	pointer
->	O
length	short
)	O
;	O
if	O
(	O
totallen	int
!=	O
length	short
)	O
{	O
grad_log	function
(	O
GRAD_LOG_ERR	int
,	O
_	O
(	O
"Actual request length does not match reported length (%d, %d)"	pointer
)	O
,	O
totallen	int
,	O
length	short
)	O
;	O
return	O
NULL	O
;	O
}	O
secretlen	int
=	O
strlen	function
(	O
secret	pointer
)	O
;	O
memcpy	function
(	O
reply_digest	array
,	O
auth	pointer
->	O
authenticator	array
,	O
GRAD_AUTHENTICATOR_LENGTH	int
)	O
;	O
memcpy	function
(	O
auth	pointer
->	O
authenticator	array
,	O
authenticator	array
,	O
GRAD_AUTHENTICATOR_LENGTH	int
)	O
;	O
memcpy	function
(	O
buffer	pointer
+	O
length	short
,	O
secret	pointer
,	O
secretlen	int
)	O
;	O
grad_md5_calc	function
(	O
calc_digest	array
,	O
(	O
unsigned	O
char	O
*	O
)	O
auth	pointer
,	O
length	short
+	O
secretlen	int
)	O
;	O
GRAD_DEBUG1	O
(	O
1	int
,	O
"received %s"	pointer
,	O
grad_request_code_to_name	function
(	O
auth	pointer
->	O
code	char
)	O
)	O
;	O
if	O
(	O
memcmp	function
(	O
reply_digest	array
,	O
calc_digest	array
,	O
GRAD_AUTHENTICATOR_LENGTH	int
)	O
!=	O
0	int
)	O
{	O
grad_log	function
(	O
GRAD_LOG_WARN	int
,	O
_	O
(	O
"Received invalid reply digest from server"	pointer
)	O
)	O
;	O
}	O
req	pointer
=	O
grad_decode_pdu	function
(	O
host	int
,	O
udp_port	short
,	O
buffer	pointer
,	O
length	short
)	O
;	O
req	pointer
->	O
secret	pointer
=	O
secret	pointer
;	O
return	O
req	pointer
;	O
}	O
grad_avp_t	struct
*	O
grad_client_encrypt_pairlist	function
(	O
grad_avp_t	struct
*	O
plist	pointer
,	O
u_char	char
*	O
authenticator	array
,	O
u_char	char
*	O
secret	pointer
)	O
{	O
grad_avp_t	struct
*	O
p	pointer
;	O
for	O
(	O
p	pointer
=	O
plist	pointer
;	O
p	pointer
;	O
p	pointer
=	O
p	pointer
->	O
next	pointer
)	O
{	O
if	O
(	O
p	pointer
->	O
prop	int
&	O
GRAD_AP_ENCRYPT_RFC2138	int
)	O
{	O
char	O
*	O
pass	pointer
=	O
p	pointer
->	O
avp_strvalue	O
;	O
grad_encrypt_password	function
(	O
p	pointer
,	O
pass	pointer
,	O
authenticator	array
,	O
secret	pointer
)	O
;	O
grad_free	function
(	O
pass	pointer
)	O
;	O
}	O
else	O
if	O
(	O
p	pointer
->	O
prop	int
&	O
GRAD_AP_ENCRYPT_RFC2868	int
)	O
{	O
char	O
*	O
pass	pointer
=	O
p	pointer
->	O
avp_strvalue	O
;	O
grad_encrypt_tunnel_password	function
(	O
p	pointer
,	O
0	int
,	O
pass	pointer
,	O
authenticator	array
,	O
secret	pointer
)	O
;	O
grad_free	function
(	O
pass	pointer
)	O
;	O
}	O
}	O
return	O
plist	pointer
;	O
}	O
grad_avp_t	struct
*	O
grad_client_decrypt_pairlist	function
(	O
grad_avp_t	struct
*	O
plist	pointer
,	O
u_char	char
*	O
authenticator	array
,	O
u_char	char
*	O
secret	pointer
)	O
{	O
grad_avp_t	struct
*	O
p	pointer
;	O
char	O
password	pointer
[	O
GRAD_STRING_LENGTH	int
+	O
1	int
]	O
;	O
for	O
(	O
p	pointer
=	O
plist	pointer
;	O
p	pointer
;	O
p	pointer
=	O
p	pointer
->	O
next	pointer
)	O
{	O
if	O
(	O
p	pointer
->	O
prop	int
&	O
GRAD_AP_ENCRYPT_RFC2138	int
)	O
{	O
grad_decrypt_password	function
(	O
password	pointer
,	O
p	pointer
,	O
authenticator	array
,	O
secret	pointer
)	O
;	O
grad_free	function
(	O
p	pointer
->	O
avp_strvalue	O
)	O
;	O
p	pointer
->	O
avp_strvalue	O
=	O
grad_estrdup	function
(	O
password	pointer
)	O
;	O
p	pointer
->	O
avp_strlength	O
=	O
strlen	function
(	O
p	pointer
->	O
avp_strvalue	O
)	O
;	O
}	O
else	O
if	O
(	O
p	pointer
->	O
prop	int
&	O
GRAD_AP_ENCRYPT_RFC2868	int
)	O
{	O
u_char	char
tag	char
;	O
grad_decrypt_tunnel_password	function
(	O
password	pointer
,	O
&	O
tag	char
,	O
p	pointer
,	O
authenticator	array
,	O
secret	pointer
)	O
;	O
grad_free	function
(	O
p	pointer
->	O
avp_strvalue	O
)	O
;	O
p	pointer
->	O
avp_strvalue	O
=	O
grad_estrdup	function
(	O
password	pointer
)	O
;	O
p	pointer
->	O
avp_strlength	O
=	O
strlen	function
(	O
p	pointer
->	O
avp_strvalue	O
)	O
;	O
}	O
}	O
return	O
plist	pointer
;	O
}	O
static	O
int	O
wait_for_reply	function
(	O
int	O
fd	int
,	O
unsigned	O
timeout	int
)	O
{	O
fd_set	struct
readfds	struct
;	O
struct	O
timeval	struct
start	pointer
,	O
tm	struct
;	O
gettimeofday	function
(	O
&	O
start	pointer
,	O
NULL	O
)	O
;	O
for	O
(	O
;	O
;	O
)	O
{	O
tm	struct
.	O
tv_usec	long
=	O
0L	int
;	O
tm	struct
.	O
tv_sec	long
=	O
(	O
long	O
)	O
timeout	int
;	O
FD_ZERO	O
(	O
&	O
readfds	struct
)	O
;	O
FD_SET	O
(	O
fd	int
,	O
&	O
readfds	struct
)	O
;	O
if	O
(	O
grad_recompute_timeout	function
(	O
&	O
start	pointer
,	O
&	O
tm	struct
)	O
)	O
return	O
0	int
;	O
if	O
(	O
select	function
(	O
fd	int
+	O
1	int
,	O
&	O
readfds	struct
,	O
NULL	O
,	O
NULL	O
,	O
&	O
tm	struct
)	O
<	O
0	int
)	O
{	O
if	O
(	O
errno	O
==	O
EINTR	int
)	O
{	O
GRAD_DEBUG	O
(	O
20	int
,	O
"select interrupted. retrying."	pointer
)	O
;	O
continue	O
;	O
}	O
grad_log	function
(	O
GRAD_LOG_NOTICE	int
,	O
_	O
(	O
"select() interrupted"	pointer
)	O
)	O
;	O
break	O
;	O
}	O
return	O
FD_ISSET	O
(	O
fd	int
,	O
&	O
readfds	struct
)	O
;	O
}	O
return	O
1	int
;	O
}	O
grad_request_t	struct
*	O
grad_client_send0	function
(	O
grad_server_queue_t	struct
*	O
config	pointer
,	O
int	O
port_type	int
,	O
int	O
code	char
,	O
grad_avp_t	struct
*	O
pairlist	pointer
,	O
int	O
flags	int
,	O
int	O
*	O
authid	pointer
,	O
u_char	char
*	O
authvec	pointer
)	O
{	O
struct	O
sockaddr	struct
salocal	struct
;	O
struct	O
sockaddr	struct
saremote	struct
;	O
struct	O
sockaddr_in	struct
*	O
sin	pointer
;	O
int	O
sockfd	int
;	O
int	O
salen	int
;	O
int	O
i	int
;	O
grad_request_t	struct
*	O
req	pointer
=	O
NULL	O
;	O
grad_server_t	struct
*	O
server	pointer
;	O
char	O
ipbuf	array
[	O
GRAD_IPV4_STRING_LENGTH	int
]	O
;	O
char	O
*	O
recv_buf	pointer
;	O
grad_iterator_t	struct
*	O
itr	pointer
;	O
int	O
id	char
;	O
if	O
(	O
port_type	int
<	O
0	int
||	O
port_type	int
>	O
2	int
)	O
{	O
grad_log	function
(	O
GRAD_LOG_ERR	int
,	O
_	O
(	O
"invalid port type"	pointer
)	O
)	O
;	O
return	O
NULL	O
;	O
}	O
sockfd	int
=	O
socket	function
(	O
PF_INET	int
,	O
SOCK_DGRAM	int
,	O
0	int
)	O
;	O
if	O
(	O
sockfd	int
<	O
0	int
)	O
{	O
grad_log	function
(	O
GRAD_LOG_ERR	int
|	O
GRAD_LOG_PERROR	int
,	O
"socket"	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
sin	pointer
=	O
(	O
struct	O
sockaddr_in	struct
*	O
)	O
&	O
salocal	struct
;	O
memset	function
(	O
sin	pointer
,	O
0	int
,	O
sizeof	O
(	O
salocal	struct
)	O
)	O
;	O
sin	pointer
->	O
sin_family	short
=	O
AF_INET	O
;	O
sin	pointer
->	O
sin_addr	struct
.	O
s_addr	int
=	O
config	pointer
->	O
source_ip	int
?	O
htonl	function
(	O
config	pointer
->	O
source_ip	int
)	O
:	O
INADDR_ANY	O
;	O
sin	pointer
->	O
sin_port	short
=	O
0	int
;	O
if	O
(	O
bind	function
(	O
sockfd	int
,	O
&	O
salocal	struct
,	O
sizeof	O
(	O
struct	O
sockaddr_in	struct
)	O
)	O
)	O
{	O
grad_log	function
(	O
GRAD_LOG_ERR	int
|	O
GRAD_LOG_PERROR	int
,	O
"bind"	pointer
)	O
;	O
close	pointer
(	O
sockfd	int
)	O
;	O
return	O
NULL	O
;	O
}	O
GRAD_DEBUG1	O
(	O
1	int
,	O
"sending %s"	pointer
,	O
grad_request_code_to_name	function
(	O
code	char
)	O
)	O
;	O
recv_buf	pointer
=	O
grad_emalloc	function
(	O
config	pointer
->	O
buffer_size	long
)	O
;	O
itr	pointer
=	O
grad_iterator_create	function
(	O
config	pointer
->	O
servers	pointer
)	O
;	O
server	pointer
=	O
grad_iterator_first	function
(	O
itr	pointer
)	O
;	O
do	O
{	O
int	O
result	pointer
;	O
u_char	char
authenticator	array
[	O
GRAD_AUTHENTICATOR_LENGTH	int
]	O
;	O
void	O
*	O
pdu	pointer
;	O
size_t	long
size	int
;	O
grad_avp_t	struct
*	O
pair	pointer
;	O
if	O
(	O
server	pointer
->	O
port	array
[	O
port_type	int
]	O
<=	O
0	int
)	O
continue	O
;	O
GRAD_DEBUG2	O
(	O
10	int
,	O
"server %s:%d"	pointer
,	O
grad_ip_iptostr	function
(	O
server	pointer
->	O
addr	int
,	O
ipbuf	array
)	O
,	O
server	pointer
->	O
port	array
[	O
port_type	int
]	O
)	O
;	O
if	O
(	O
authid	pointer
&&	O
(	O
flags	int
&	O
RADCLT_AUTHENTICATOR	int
)	O
)	O
memcpy	function
(	O
authenticator	array
,	O
authvec	pointer
,	O
sizeof	O
authenticator	array
)	O
;	O
else	O
grad_client_random_authenticator	function
(	O
authenticator	array
)	O
;	O
if	O
(	O
authid	pointer
&&	O
(	O
flags	int
&	O
RADCLT_ID	int
)	O
)	O
id	char
=	O
*	O
authid	pointer
;	O
else	O
id	char
=	O
grad_client_message_id	function
(	O
server	pointer
)	O
;	O
pair	pointer
=	O
grad_client_encrypt_pairlist	function
(	O
grad_avl_dup	function
(	O
pairlist	pointer
)	O
,	O
authenticator	array
,	O
server	pointer
->	O
secret	pointer
)	O
;	O
size	int
=	O
grad_create_pdu	function
(	O
&	O
pdu	pointer
,	O
code	char
,	O
id	char
,	O
authenticator	array
,	O
server	pointer
->	O
secret	pointer
,	O
pair	pointer
,	O
NULL	O
)	O
;	O
if	O
(	O
authid	pointer
&&	O
!	O
(	O
flags	int
&	O
RADCLT_ID	int
)	O
)	O
*	O
authid	pointer
=	O
id	char
;	O
if	O
(	O
authvec	pointer
&&	O
!	O
(	O
flags	int
&	O
RADCLT_AUTHENTICATOR	int
)	O
)	O
memcpy	function
(	O
authvec	pointer
,	O
authenticator	array
,	O
sizeof	O
authenticator	array
)	O
;	O
grad_avl_free	function
(	O
pair	pointer
)	O
;	O
if	O
(	O
size	int
<=	O
0	int
)	O
break	O
;	O
sin	pointer
=	O
(	O
struct	O
sockaddr_in	struct
*	O
)	O
&	O
saremote	struct
;	O
memset	function
(	O
sin	pointer
,	O
0	int
,	O
sizeof	O
(	O
saremote	struct
)	O
)	O
;	O
sin	pointer
->	O
sin_family	short
=	O
AF_INET	O
;	O
sin	pointer
->	O
sin_addr	struct
.	O
s_addr	int
=	O
htonl	function
(	O
server	pointer
->	O
addr	int
)	O
;	O
sin	pointer
->	O
sin_port	short
=	O
htons	function
(	O
server	pointer
->	O
port	array
[	O
port_type	int
]	O
)	O
;	O
GRAD_DEBUG2	O
(	O
10	int
,	O
"sending request (timeout=%u, retries=%u)"	pointer
,	O
config	pointer
->	O
timeout	int
,	O
config	pointer
->	O
retries	int
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
config	pointer
->	O
retries	int
;	O
i	int
++	O
)	O
{	O
if	O
(	O
i	int
)	O
GRAD_DEBUG	O
(	O
10	int
,	O
"no response. retrying."	pointer
)	O
;	O
if	O
(	O
sendto	function
(	O
sockfd	int
,	O
pdu	pointer
,	O
size	int
,	O
0	int
,	O
&	O
saremote	struct
,	O
sizeof	O
(	O
struct	O
sockaddr_in	struct
)	O
)	O
==	O
-	O
1	int
)	O
{	O
grad_log	function
(	O
GRAD_LOG_ERR	int
|	O
GRAD_LOG_PERROR	int
,	O
"sendto"	pointer
)	O
;	O
}	O
salen	int
=	O
sizeof	O
(	O
saremote	struct
)	O
;	O
if	O
(	O
wait_for_reply	function
(	O
sockfd	int
,	O
config	pointer
->	O
timeout	int
)	O
)	O
{	O
result	pointer
=	O
recvfrom	function
(	O
sockfd	int
,	O
recv_buf	pointer
,	O
config	pointer
->	O
buffer_size	long
,	O
0	int
,	O
&	O
saremote	struct
,	O
&	O
salen	int
)	O
;	O
if	O
(	O
result	pointer
>	O
0	int
)	O
req	pointer
=	O
grad_client_recv	function
(	O
ntohl	function
(	O
sin	pointer
->	O
sin_addr	struct
.	O
s_addr	int
)	O
,	O
ntohs	function
(	O
sin	pointer
->	O
sin_port	short
)	O
,	O
server	pointer
->	O
secret	pointer
,	O
authenticator	array
,	O
recv_buf	pointer
,	O
result	pointer
)	O
;	O
else	O
grad_log	function
(	O
GRAD_LOG_ERR	int
|	O
GRAD_LOG_PERROR	int
,	O
_	O
(	O
"error receiving data from %s:%d"	pointer
)	O
,	O
grad_ip_iptostr	function
(	O
server	pointer
->	O
addr	int
,	O
ipbuf	array
)	O
,	O
server	pointer
->	O
port	array
[	O
port_type	int
]	O
)	O
;	O
break	O
;	O
}	O
}	O
grad_free	function
(	O
pdu	pointer
)	O
;	O
if	O
(	O
!	O
req	pointer
)	O
GRAD_DEBUG2	O
(	O
10	int
,	O
"no reply from %s:%d"	pointer
,	O
grad_ip_iptostr	function
(	O
server	pointer
->	O
addr	int
,	O
ipbuf	array
)	O
,	O
server	pointer
->	O
port	array
[	O
port_type	int
]	O
)	O
;	O
}	O
while	O
(	O
!	O
req	pointer
&&	O
(	O
server	pointer
=	O
grad_iterator_next	function
(	O
itr	pointer
)	O
)	O
!=	O
NULL	O
)	O
;	O
grad_iterator_destroy	function
(	O
&	O
itr	pointer
)	O
;	O
grad_free	function
(	O
recv_buf	pointer
)	O
;	O
close	pointer
(	O
sockfd	int
)	O
;	O
return	O
req	pointer
;	O
}	O
grad_request_t	struct
*	O
grad_client_send	function
(	O
grad_server_queue_t	struct
*	O
config	pointer
,	O
int	O
port_type	int
,	O
int	O
code	char
,	O
grad_avp_t	struct
*	O
pairlist	pointer
)	O
{	O
return	O
grad_client_send0	function
(	O
config	pointer
,	O
port_type	int
,	O
code	char
,	O
pairlist	pointer
,	O
0	int
,	O
NULL	O
,	O
NULL	O
)	O
;	O
}	O
static	O
grad_keyword_t	struct
kwd	array
[	O
]	O
=	O
{	O
{	O
"source_ip"	pointer
,	O
TOK_SOURCE_IP	int
}	O
,	O
{	O
"source-ip"	pointer
,	O
TOK_SOURCE_IP	int
}	O
,	O
{	O
"server"	pointer
,	O
TOK_SERVER	int
}	O
,	O
{	O
"timeout"	pointer
,	O
TOK_TIMEOUT	int
}	O
,	O
{	O
"retry"	pointer
,	O
TOK_RETRY	int
}	O
,	O
{	O
"debug"	pointer
,	O
TOK_DEBUG	int
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
static	O
int	O
parse_client_config	function
(	O
void	O
*	O
closure	pointer
,	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
,	O
grad_locus_t	struct
*	O
loc	struct
)	O
{	O
grad_server_queue_t	struct
*	O
client	pointer
=	O
closure	pointer
;	O
char	O
*	O
p	pointer
;	O
grad_server_t	struct
serv	struct
;	O
int	O
i	int
;	O
switch	O
(	O
grad_xlat_keyword	function
(	O
kwd	array
,	O
argv	pointer
[	O
0	int
]	O
,	O
TOK_INVALID	int
)	O
)	O
{	O
case	O
TOK_INVALID	int
:	O
grad_log_loc	function
(	O
GRAD_LOG_ERR	int
,	O
loc	struct
,	O
_	O
(	O
"unknown keyword"	pointer
)	O
)	O
;	O
break	O
;	O
case	O
TOK_SOURCE_IP	int
:	O
client	pointer
->	O
source_ip	int
=	O
grad_ip_gethostaddr	function
(	O
argv	pointer
[	O
1	int
]	O
)	O
;	O
break	O
;	O
case	O
TOK_SERVER	int
:	O
if	O
(	O
argc	int
!=	O
6	int
)	O
{	O
grad_log_loc	function
(	O
GRAD_LOG_ERR	int
,	O
loc	struct
,	O
_	O
(	O
"wrong number of fields"	pointer
)	O
)	O
;	O
break	O
;	O
}	O
memset	function
(	O
&	O
serv	struct
,	O
0	int
,	O
sizeof	O
serv	struct
)	O
;	O
serv	struct
.	O
name	pointer
=	O
argv	pointer
[	O
1	int
]	O
;	O
serv	struct
.	O
addr	int
=	O
grad_ip_gethostaddr	function
(	O
argv	pointer
[	O
2	int
]	O
)	O
;	O
if	O
(	O
!	O
serv	struct
.	O
addr	int
)	O
{	O
grad_log_loc	function
(	O
GRAD_LOG_ERR	int
,	O
loc	struct
,	O
_	O
(	O
"bad IP address or host name"	pointer
)	O
)	O
;	O
break	O
;	O
}	O
serv	struct
.	O
secret	pointer
=	O
argv	pointer
[	O
3	int
]	O
;	O
serv	struct
.	O
port	array
[	O
0	int
]	O
=	O
strtol	function
(	O
argv	pointer
[	O
4	int
]	O
,	O
&	O
p	pointer
,	O
0	int
)	O
;	O
if	O
(	O
*	O
p	pointer
)	O
{	O
grad_log_loc	function
(	O
GRAD_LOG_ERR	int
,	O
loc	struct
,	O
_	O
(	O
"bad port number %s"	pointer
)	O
,	O
argv	pointer
[	O
4	int
]	O
)	O
;	O
break	O
;	O
}	O
serv	struct
.	O
port	array
[	O
1	int
]	O
=	O
strtol	function
(	O
argv	pointer
[	O
5	int
]	O
,	O
&	O
p	pointer
,	O
0	int
)	O
;	O
if	O
(	O
*	O
p	pointer
)	O
{	O
grad_log_loc	function
(	O
GRAD_LOG_ERR	int
,	O
loc	struct
,	O
_	O
(	O
"bad port number %s"	pointer
)	O
,	O
argv	pointer
[	O
4	int
]	O
)	O
;	O
break	O
;	O
}	O
grad_client_append_server	function
(	O
client	pointer
,	O
grad_client_alloc_server	function
(	O
&	O
serv	struct
)	O
)	O
;	O
break	O
;	O
case	O
TOK_TIMEOUT	int
:	O
client	pointer
->	O
timeout	int
=	O
strtol	function
(	O
argv	pointer
[	O
1	int
]	O
,	O
&	O
p	pointer
,	O
0	int
)	O
;	O
if	O
(	O
*	O
p	pointer
)	O
grad_log_loc	function
(	O
GRAD_LOG_ERR	int
,	O
loc	struct
,	O
_	O
(	O
"bad timeout value"	pointer
)	O
)	O
;	O
break	O
;	O
case	O
TOK_RETRY	int
:	O
client	pointer
->	O
retries	int
=	O
strtol	function
(	O
argv	pointer
[	O
1	int
]	O
,	O
&	O
p	pointer
,	O
0	int
)	O
;	O
if	O
(	O
*	O
p	pointer
)	O
grad_log_loc	function
(	O
GRAD_LOG_ERR	int
,	O
loc	struct
,	O
_	O
(	O
"bad retry value"	pointer
)	O
)	O
;	O
break	O
;	O
case	O
TOK_DEBUG	int
:	O
for	O
(	O
i	int
=	O
1	int
;	O
i	int
<	O
argc	int
;	O
i	int
++	O
)	O
grad_set_debug_levels	function
(	O
argv	pointer
[	O
i	int
]	O
)	O
;	O
break	O
;	O
}	O
return	O
0	int
;	O
}	O
grad_server_queue_t	struct
*	O
grad_client_create_queue	function
(	O
int	O
read_cfg	int
,	O
grad_uint32_t	int
source_ip	int
,	O
size_t	long
bufsize	long
)	O
{	O
grad_server_queue_t	struct
*	O
client	pointer
;	O
char	O
*	O
filename	pointer
;	O
client	pointer
=	O
grad_emalloc	function
(	O
sizeof	O
*	O
client	pointer
)	O
;	O
client	pointer
->	O
source_ip	int
=	O
source_ip	int
;	O
client	pointer
->	O
timeout	int
=	O
1	int
;	O
client	pointer
->	O
retries	int
=	O
3	int
;	O
client	pointer
->	O
buffer_size	long
=	O
bufsize	long
?	O
bufsize	long
:	O
4096	int
;	O
client	pointer
->	O
servers	pointer
=	O
0	int
;	O
if	O
(	O
read_cfg	int
)	O
{	O
filename	pointer
=	O
grad_mkfilename	function
(	O
grad_config_dir	pointer
,	O
"client.conf"	pointer
)	O
;	O
grad_read_raddb_file	function
(	O
filename	pointer
,	O
1	int
,	O
NULL	O
,	O
parse_client_config	function
,	O
client	pointer
)	O
;	O
grad_free	function
(	O
filename	pointer
)	O
;	O
}	O
return	O
client	pointer
;	O
}	O
void	O
grad_client_destroy_queue	function
(	O
grad_server_queue_t	struct
*	O
queue	pointer
)	O
{	O
if	O
(	O
queue	pointer
)	O
{	O
grad_client_clear_server_list	function
(	O
queue	pointer
)	O
;	O
grad_free	function
(	O
queue	pointer
)	O
;	O
}	O
}	O
grad_server_t	struct
*	O
grad_client_alloc_server	function
(	O
grad_server_t	struct
*	O
src	pointer
)	O
{	O
grad_server_t	struct
*	O
server	pointer
;	O
server	pointer
=	O
grad_emalloc	function
(	O
sizeof	O
(	O
*	O
server	pointer
)	O
)	O
;	O
server	pointer
->	O
name	pointer
=	O
grad_estrdup	function
(	O
src	pointer
->	O
name	pointer
)	O
;	O
server	pointer
->	O
addr	int
=	O
src	pointer
->	O
addr	int
;	O
server	pointer
->	O
port	array
[	O
0	int
]	O
=	O
src	pointer
->	O
port	array
[	O
0	int
]	O
;	O
server	pointer
->	O
port	array
[	O
1	int
]	O
=	O
src	pointer
->	O
port	array
[	O
1	int
]	O
;	O
server	pointer
->	O
secret	pointer
=	O
grad_estrdup	function
(	O
src	pointer
->	O
secret	pointer
)	O
;	O
server	pointer
->	O
id_offset	long
=	O
(	O
off_t	long
)	O
-	O
1	int
;	O
return	O
server	pointer
;	O
}	O
grad_server_t	struct
*	O
grad_client_dup_server	function
(	O
grad_server_t	struct
*	O
src	pointer
)	O
{	O
grad_server_t	struct
*	O
dest	pointer
;	O
dest	pointer
=	O
grad_emalloc	function
(	O
sizeof	O
(	O
*	O
dest	pointer
)	O
)	O
;	O
dest	pointer
->	O
addr	int
=	O
src	pointer
->	O
addr	int
;	O
dest	pointer
->	O
name	pointer
=	O
grad_estrdup	function
(	O
src	pointer
->	O
name	pointer
)	O
;	O
dest	pointer
->	O
port	array
[	O
0	int
]	O
=	O
src	pointer
->	O
port	array
[	O
0	int
]	O
;	O
dest	pointer
->	O
port	array
[	O
1	int
]	O
=	O
src	pointer
->	O
port	array
[	O
1	int
]	O
;	O
dest	pointer
->	O
secret	pointer
=	O
grad_estrdup	function
(	O
src	pointer
->	O
secret	pointer
)	O
;	O
return	O
dest	pointer
;	O
}	O
void	O
grad_client_free_server	function
(	O
grad_server_t	struct
*	O
server	pointer
)	O
{	O
grad_free	function
(	O
server	pointer
->	O
name	pointer
)	O
;	O
grad_free	function
(	O
server	pointer
->	O
secret	pointer
)	O
;	O
grad_free	function
(	O
server	pointer
)	O
;	O
}	O
void	O
grad_client_append_server	function
(	O
grad_server_queue_t	struct
*	O
qp	pointer
,	O
grad_server_t	struct
*	O
server	pointer
)	O
{	O
if	O
(	O
!	O
qp	pointer
->	O
servers	pointer
)	O
qp	pointer
->	O
servers	pointer
=	O
grad_list_create	function
(	O
)	O
;	O
grad_list_append	function
(	O
qp	pointer
->	O
servers	pointer
,	O
server	pointer
)	O
;	O
}	O
static	O
int	O
grad_client_internal_free_server	function
(	O
void	O
*	O
item	pointer
,	O
void	O
*	O
data	pointer
)	O
{	O
grad_server_t	struct
*	O
server	pointer
=	O
item	pointer
;	O
grad_free	function
(	O
server	pointer
->	O
name	pointer
)	O
;	O
grad_free	function
(	O
server	pointer
->	O
secret	pointer
)	O
;	O
grad_free	function
(	O
server	pointer
)	O
;	O
return	O
0	int
;	O
}	O
void	O
grad_client_clear_server_list	function
(	O
grad_server_queue_t	struct
*	O
qp	pointer
)	O
{	O
grad_list_destroy	function
(	O
&	O
qp	pointer
->	O
servers	pointer
,	O
grad_client_internal_free_server	function
,	O
NULL	O
)	O
;	O
}	O
static	O
int	O
server_cmp	function
(	O
const	O
void	O
*	O
item	pointer
,	O
const	O
void	O
*	O
data	pointer
)	O
{	O
const	O
grad_server_t	struct
*	O
serv	struct
=	O
item	pointer
;	O
const	O
char	O
*	O
id	char
=	O
data	pointer
;	O
return	O
strcmp	function
(	O
serv	struct
->	O
name	pointer
,	O
id	char
)	O
;	O
}	O
grad_server_t	struct
*	O
grad_client_find_server	function
(	O
grad_server_queue_t	struct
*	O
qp	pointer
,	O
char	O
*	O
name	pointer
)	O
{	O
return	O
grad_list_locate	function
(	O
qp	pointer
->	O
servers	pointer
,	O
name	pointer
,	O
server_cmp	function
)	O
;	O
}	O
