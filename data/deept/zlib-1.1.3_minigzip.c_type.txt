extern	O
int	O
unlink	function
OF	O
(	O
(	O
const	O
char	O
*	O
)	O
)	O
;	O
char	O
*	O
prog	pointer
;	O
void	O
error	function
OF	O
(	O
(	O
const	O
char	O
*	O
msg	pointer
)	O
)	O
;	O
void	O
gz_compress	function
OF	O
(	O
(	O
FILE	struct
*	O
in	pointer
,	O
gzFile	pointer
out	pointer
)	O
)	O
;	O
int	O
gz_compress_mmap	function
OF	O
(	O
(	O
FILE	struct
*	O
in	pointer
,	O
gzFile	pointer
out	pointer
)	O
)	O
;	O
void	O
gz_uncompress	function
OF	O
(	O
(	O
gzFile	pointer
in	pointer
,	O
FILE	struct
*	O
out	pointer
)	O
)	O
;	O
void	O
file_compress	function
OF	O
(	O
(	O
char	O
*	O
file	pointer
,	O
char	O
*	O
mode	pointer
)	O
)	O
;	O
void	O
file_uncompress	function
OF	O
(	O
(	O
char	O
*	O
file	pointer
)	O
)	O
;	O
int	O
main	function
OF	O
(	O
(	O
int	O
argc	int
,	O
char	O
*	O
argv	array
[	O
]	O
)	O
)	O
;	O
void	O
error	function
(	O
msg	pointer
)	O
const	O
char	O
*	O
msg	pointer
;	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: %s\n"	pointer
,	O
prog	pointer
,	O
msg	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
void	O
gz_compress	function
(	O
in	pointer
,	O
out	pointer
)	O
FILE	struct
*	O
in	pointer
;	O
gzFile	pointer
out	pointer
;	O
{	O
local	O
char	O
buf	pointer
[	O
BUFLEN	int
]	O
;	O
int	O
len	int
;	O
int	O
err	int
;	O
if	O
(	O
gz_compress_mmap	function
(	O
in	pointer
,	O
out	pointer
)	O
==	O
Z_OK	int
)	O
return	O
;	O
for	O
(	O
;	O
;	O
)	O
{	O
len	int
=	O
fread	function
(	O
buf	pointer
,	O
1	int
,	O
sizeof	O
(	O
buf	pointer
)	O
,	O
in	pointer
)	O
;	O
if	O
(	O
ferror	function
(	O
in	pointer
)	O
)	O
{	O
perror	function
(	O
"fread"	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
if	O
(	O
len	int
==	O
0	int
)	O
break	O
;	O
if	O
(	O
gzwrite	function
(	O
out	pointer
,	O
buf	pointer
,	O
(	O
unsigned	O
)	O
len	int
)	O
!=	O
len	int
)	O
error	function
(	O
gzerror	function
(	O
out	pointer
,	O
&	O
err	int
)	O
)	O
;	O
}	O
fclose	function
(	O
in	pointer
)	O
;	O
if	O
(	O
gzclose	function
(	O
out	pointer
)	O
!=	O
Z_OK	int
)	O
error	function
(	O
"failed gzclose"	pointer
)	O
;	O
}	O
int	O
gz_compress_mmap	function
(	O
in	pointer
,	O
out	pointer
)	O
FILE	struct
*	O
in	pointer
;	O
gzFile	pointer
out	pointer
;	O
{	O
int	O
len	int
;	O
int	O
err	int
;	O
int	O
ifd	int
=	O
fileno	function
(	O
in	pointer
)	O
;	O
caddr_t	pointer
buf	pointer
;	O
off_t	long
buf_len	long
;	O
struct	O
stat	struct
sb	struct
;	O
if	O
(	O
fstat	function
(	O
ifd	int
,	O
&	O
sb	struct
)	O
<	O
0	int
)	O
return	O
Z_ERRNO	O
;	O
buf_len	long
=	O
sb	struct
.	O
st_size	long
;	O
if	O
(	O
buf_len	long
<=	O
0	int
)	O
return	O
Z_ERRNO	O
;	O
buf	pointer
=	O
mmap	function
(	O
(	O
caddr_t	pointer
)	O
0	int
,	O
buf_len	long
,	O
PROT_READ	int
,	O
MAP_SHARED	int
,	O
ifd	int
,	O
(	O
off_t	long
)	O
0	int
)	O
;	O
if	O
(	O
buf	pointer
==	O
(	O
caddr_t	pointer
)	O
(	O
-	O
1	int
)	O
)	O
return	O
Z_ERRNO	O
;	O
len	int
=	O
gzwrite	function
(	O
out	pointer
,	O
(	O
char	O
*	O
)	O
buf	pointer
,	O
(	O
unsigned	O
)	O
buf_len	long
)	O
;	O
if	O
(	O
len	int
!=	O
(	O
int	O
)	O
buf_len	long
)	O
error	function
(	O
gzerror	function
(	O
out	pointer
,	O
&	O
err	int
)	O
)	O
;	O
munmap	function
(	O
buf	pointer
,	O
buf_len	long
)	O
;	O
fclose	function
(	O
in	pointer
)	O
;	O
if	O
(	O
gzclose	function
(	O
out	pointer
)	O
!=	O
Z_OK	int
)	O
error	function
(	O
"failed gzclose"	pointer
)	O
;	O
return	O
Z_OK	int
;	O
}	O
void	O
gz_uncompress	function
(	O
in	pointer
,	O
out	pointer
)	O
gzFile	pointer
in	pointer
;	O
FILE	struct
*	O
out	pointer
;	O
{	O
local	O
char	O
buf	pointer
[	O
BUFLEN	int
]	O
;	O
int	O
len	int
;	O
int	O
err	int
;	O
for	O
(	O
;	O
;	O
)	O
{	O
len	int
=	O
gzread	function
(	O
in	pointer
,	O
buf	pointer
,	O
sizeof	O
(	O
buf	pointer
)	O
)	O
;	O
if	O
(	O
len	int
<	O
0	int
)	O
error	function
(	O
gzerror	function
(	O
in	pointer
,	O
&	O
err	int
)	O
)	O
;	O
if	O
(	O
len	int
==	O
0	int
)	O
break	O
;	O
if	O
(	O
(	O
int	O
)	O
fwrite	function
(	O
buf	pointer
,	O
1	int
,	O
(	O
unsigned	O
)	O
len	int
,	O
out	pointer
)	O
!=	O
len	int
)	O
{	O
error	function
(	O
"failed fwrite"	pointer
)	O
;	O
}	O
}	O
if	O
(	O
fclose	function
(	O
out	pointer
)	O
)	O
error	function
(	O
"failed fclose"	pointer
)	O
;	O
if	O
(	O
gzclose	function
(	O
in	pointer
)	O
!=	O
Z_OK	int
)	O
error	function
(	O
"failed gzclose"	pointer
)	O
;	O
}	O
void	O
file_compress	function
(	O
file	pointer
,	O
mode	pointer
)	O
char	O
*	O
file	pointer
;	O
char	O
*	O
mode	pointer
;	O
{	O
local	O
char	O
outfile	array
[	O
MAX_NAME_LEN	int
]	O
;	O
FILE	struct
*	O
in	pointer
;	O
gzFile	pointer
out	pointer
;	O
strcpy	function
(	O
outfile	array
,	O
file	pointer
)	O
;	O
strcat	function
(	O
outfile	array
,	O
GZ_SUFFIX	pointer
)	O
;	O
in	pointer
=	O
fopen	function
(	O
file	pointer
,	O
"rb"	pointer
)	O
;	O
if	O
(	O
in	pointer
==	O
NULL	O
)	O
{	O
perror	function
(	O
file	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
out	pointer
=	O
gzopen	function
(	O
outfile	array
,	O
mode	pointer
)	O
;	O
if	O
(	O
out	pointer
==	O
NULL	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: can't gzopen %s\n"	pointer
,	O
prog	pointer
,	O
outfile	array
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
gz_compress	function
(	O
in	pointer
,	O
out	pointer
)	O
;	O
unlink	function
(	O
file	pointer
)	O
;	O
}	O
void	O
file_uncompress	function
(	O
file	pointer
)	O
char	O
*	O
file	pointer
;	O
{	O
local	O
char	O
buf	pointer
[	O
MAX_NAME_LEN	int
]	O
;	O
char	O
*	O
infile	pointer
,	O
*	O
outfile	array
;	O
FILE	struct
*	O
out	pointer
;	O
gzFile	pointer
in	pointer
;	O
int	O
len	int
=	O
strlen	function
(	O
file	pointer
)	O
;	O
strcpy	function
(	O
buf	pointer
,	O
file	pointer
)	O
;	O
if	O
(	O
len	int
>	O
SUFFIX_LEN	O
&&	O
strcmp	function
(	O
file	pointer
+	O
len	int
-	O
SUFFIX_LEN	O
,	O
GZ_SUFFIX	pointer
)	O
==	O
0	int
)	O
{	O
infile	pointer
=	O
file	pointer
;	O
outfile	array
=	O
buf	pointer
;	O
outfile	array
[	O
len	int
-	O
3	int
]	O
=	O
'\0'	O
;	O
}	O
else	O
{	O
outfile	array
=	O
file	pointer
;	O
infile	pointer
=	O
buf	pointer
;	O
strcat	function
(	O
infile	pointer
,	O
GZ_SUFFIX	pointer
)	O
;	O
}	O
in	pointer
=	O
gzopen	function
(	O
infile	pointer
,	O
"rb"	pointer
)	O
;	O
if	O
(	O
in	pointer
==	O
NULL	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: can't gzopen %s\n"	pointer
,	O
prog	pointer
,	O
infile	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
out	pointer
=	O
fopen	function
(	O
outfile	array
,	O
"wb"	pointer
)	O
;	O
if	O
(	O
out	pointer
==	O
NULL	O
)	O
{	O
perror	function
(	O
file	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
gz_uncompress	function
(	O
in	pointer
,	O
out	pointer
)	O
;	O
unlink	function
(	O
infile	pointer
)	O
;	O
}	O
int	O
main	function
(	O
argc	int
,	O
argv	array
)	O
int	O
argc	int
;	O
char	O
*	O
argv	array
[	O
]	O
;	O
{	O
int	O
uncompr	int
=	O
0	int
;	O
gzFile	pointer
file	pointer
;	O
char	O
outmode	array
[	O
20	int
]	O
;	O
strcpy	function
(	O
outmode	array
,	O
"wb6 "	pointer
)	O
;	O
prog	pointer
=	O
argv	array
[	O
0	int
]	O
;	O
argc	int
--	O
,	O
argv	array
++	O
;	O
while	O
(	O
argc	int
>	O
0	int
)	O
{	O
if	O
(	O
strcmp	function
(	O
*	O
argv	array
,	O
"-d"	pointer
)	O
==	O
0	int
)	O
uncompr	int
=	O
1	int
;	O
else	O
if	O
(	O
strcmp	function
(	O
*	O
argv	array
,	O
"-f"	pointer
)	O
==	O
0	int
)	O
outmode	array
[	O
3	int
]	O
=	O
'f'	O
;	O
else	O
if	O
(	O
strcmp	function
(	O
*	O
argv	array
,	O
"-h"	pointer
)	O
==	O
0	int
)	O
outmode	array
[	O
3	int
]	O
=	O
'h'	O
;	O
else	O
if	O
(	O
(	O
*	O
argv	array
)	O
[	O
0	int
]	O
==	O
'-'	O
&&	O
(	O
*	O
argv	array
)	O
[	O
1	int
]	O
>=	O
'1'	O
&&	O
(	O
*	O
argv	array
)	O
[	O
1	int
]	O
<=	O
'9'	O
&&	O
(	O
*	O
argv	array
)	O
[	O
2	int
]	O
==	O
0	int
)	O
outmode	array
[	O
2	int
]	O
=	O
(	O
*	O
argv	array
)	O
[	O
1	int
]	O
;	O
else	O
break	O
;	O
argc	int
--	O
,	O
argv	array
++	O
;	O
}	O
if	O
(	O
argc	int
==	O
0	int
)	O
{	O
SET_BINARY_MODE	O
(	O
stdin	pointer
)	O
;	O
SET_BINARY_MODE	O
(	O
stdout	pointer
)	O
;	O
if	O
(	O
uncompr	int
)	O
{	O
file	pointer
=	O
gzdopen	function
(	O
fileno	function
(	O
stdin	pointer
)	O
,	O
"rb"	pointer
)	O
;	O
if	O
(	O
file	pointer
==	O
NULL	O
)	O
error	function
(	O
"can't gzdopen stdin"	pointer
)	O
;	O
gz_uncompress	function
(	O
file	pointer
,	O
stdout	pointer
)	O
;	O
}	O
else	O
{	O
file	pointer
=	O
gzdopen	function
(	O
fileno	function
(	O
stdout	pointer
)	O
,	O
outmode	array
)	O
;	O
if	O
(	O
file	pointer
==	O
NULL	O
)	O
error	function
(	O
"can't gzdopen stdout"	pointer
)	O
;	O
gz_compress	function
(	O
stdin	pointer
,	O
file	pointer
)	O
;	O
}	O
}	O
else	O
{	O
do	O
{	O
if	O
(	O
uncompr	int
)	O
{	O
file_uncompress	function
(	O
*	O
argv	array
)	O
;	O
}	O
else	O
{	O
file_compress	function
(	O
*	O
argv	array
,	O
outmode	array
)	O
;	O
}	O
}	O
while	O
(	O
argv	array
++	O
,	O
--	O
argc	int
)	O
;	O
}	O
exit	function
(	O
0	int
)	O
;	O
return	O
0	int
;	O
}	O
