bool	enum
_pl_t_path_is_flushable	function
(	O
S___	O
(	O
Plotter	struct
*	O
_plotter	pointer
)	O
)	O
{	O
return	O
false	int
;	O
}	O
enum	O
{	O
ACCEPTED	int
=	O
0x1	int
,	O
CLIPPED_FIRST	int
=	O
0x2	int
,	O
CLIPPED_SECOND	int
=	O
0x4	int
}	O
;	O
void	O
_pl_t_maybe_prepaint_segments	function
(	O
R___	O
(	O
Plotter	struct
*	O
_plotter	pointer
)	O
int	O
prev_num_segments	int
)	O
{	O
int	O
i	int
;	O
if	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
->	O
num_segments	int
<	O
2	int
)	O
return	O
;	O
if	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
->	O
num_segments	int
==	O
prev_num_segments	int
)	O
return	O
;	O
if	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
pen_type	int
==	O
0	int
)	O
return	O
;	O
if	O
(	O
_plotter	pointer
->	O
tek_display_type	int
!=	O
TEK_DPY_KERMIT	int
&&	O
_plotter	pointer
->	O
drawstate	pointer
->	O
fgcolor	struct
.	O
red	int
==	O
0xffff	int
&&	O
_plotter	pointer
->	O
drawstate	pointer
->	O
fgcolor	struct
.	O
green	int
==	O
0xffff	int
&&	O
_plotter	pointer
->	O
drawstate	pointer
->	O
fgcolor	struct
.	O
blue	int
==	O
0xffff	int
)	O
return	O
;	O
for	O
(	O
i	int
=	O
IMAX	O
(	O
1	int
,	O
prev_num_segments	int
)	O
;	O
i	int
<	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
->	O
num_segments	int
;	O
i	int
++	O
)	O
{	O
plPoint	struct
start	struct
,	O
end	struct
;	O
plIntPoint	struct
istart	struct
,	O
iend	struct
;	O
int	O
clipval	int
;	O
bool	enum
same_point	enum
,	O
force	enum
;	O
start	struct
.	O
x	double
=	O
XD	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
->	O
segments	pointer
[	O
i	int
-	O
1	int
]	O
.	O
p	struct
.	O
x	double
,	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
->	O
segments	pointer
[	O
i	int
-	O
1	int
]	O
.	O
p	struct
.	O
y	double
)	O
;	O
start	struct
.	O
y	double
=	O
YD	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
->	O
segments	pointer
[	O
i	int
-	O
1	int
]	O
.	O
p	struct
.	O
x	double
,	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
->	O
segments	pointer
[	O
i	int
-	O
1	int
]	O
.	O
p	struct
.	O
y	double
)	O
;	O
end	struct
.	O
x	double
=	O
XD	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
->	O
segments	pointer
[	O
i	int
]	O
.	O
p	struct
.	O
x	double
,	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
->	O
segments	pointer
[	O
i	int
]	O
.	O
p	struct
.	O
y	double
)	O
;	O
end	struct
.	O
y	double
=	O
YD	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
->	O
segments	pointer
[	O
i	int
]	O
.	O
p	struct
.	O
x	double
,	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
->	O
segments	pointer
[	O
i	int
]	O
.	O
p	struct
.	O
y	double
)	O
;	O
same_point	enum
=	O
(	O
start	struct
.	O
x	double
==	O
end	struct
.	O
x	double
&&	O
start	struct
.	O
y	double
==	O
end	struct
.	O
y	double
)	O
?	O
true	int
:	O
false	int
;	O
clipval	int
=	O
_clip_line	function
(	O
&	O
start	struct
.	O
x	double
,	O
&	O
start	struct
.	O
y	double
,	O
&	O
end	struct
.	O
x	double
,	O
&	O
end	struct
.	O
y	double
,	O
TEK_DEVICE_X_MIN_CLIP	O
,	O
TEK_DEVICE_X_MAX_CLIP	O
,	O
TEK_DEVICE_Y_MIN_CLIP	O
,	O
TEK_DEVICE_Y_MAX_CLIP	O
)	O
;	O
if	O
(	O
!	O
(	O
clipval	int
&	O
ACCEPTED	int
)	O
)	O
continue	O
;	O
istart	struct
.	O
x	double
=	O
IROUND	O
(	O
start	struct
.	O
x	double
)	O
;	O
istart	struct
.	O
y	double
=	O
IROUND	O
(	O
start	struct
.	O
y	double
)	O
;	O
iend	struct
.	O
x	double
=	O
IROUND	O
(	O
end	struct
.	O
x	double
)	O
;	O
iend	struct
.	O
y	double
=	O
IROUND	O
(	O
end	struct
.	O
y	double
)	O
;	O
if	O
(	O
i	int
==	O
1	int
)	O
_pl_t_tek_move	function
(	O
R___	O
(	O
_plotter	pointer
)	O
istart	struct
.	O
x	double
,	O
istart	struct
.	O
y	double
)	O
;	O
else	O
{	O
int	O
correct_tek_mode	int
=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
points_are_connected	enum
?	O
TEK_MODE_PLOT	int
:	O
TEK_MODE_POINT	int
;	O
if	O
(	O
_plotter	pointer
->	O
tek_position_is_unknown	enum
||	O
_plotter	pointer
->	O
tek_pos	struct
.	O
x	double
!=	O
istart	struct
.	O
x	double
||	O
_plotter	pointer
->	O
tek_pos	struct
.	O
y	double
!=	O
istart	struct
.	O
y	double
||	O
_plotter	pointer
->	O
tek_mode_is_unknown	enum
||	O
_plotter	pointer
->	O
tek_mode	int
!=	O
correct_tek_mode	int
)	O
_pl_t_tek_move	function
(	O
R___	O
(	O
_plotter	pointer
)	O
istart	struct
.	O
x	double
,	O
istart	struct
.	O
y	double
)	O
;	O
}	O
_pl_t_set_attributes	function
(	O
S___	O
(	O
_plotter	pointer
)	O
)	O
;	O
_pl_t_set_pen_color	function
(	O
S___	O
(	O
_plotter	pointer
)	O
)	O
;	O
_pl_t_set_bg_color	function
(	O
S___	O
(	O
_plotter	pointer
)	O
)	O
;	O
if	O
(	O
i	int
==	O
1	int
&&	O
(	O
same_point	enum
==	O
false	int
||	O
(	O
same_point	enum
==	O
true	int
&&	O
_plotter	pointer
->	O
drawstate	pointer
->	O
cap_type	int
==	O
PL_CAP_ROUND	int
)	O
)	O
)	O
force	enum
=	O
true	int
;	O
else	O
force	enum
=	O
false	int
;	O
_pl_t_tek_vector_compressed	function
(	O
R___	O
(	O
_plotter	pointer
)	O
iend	struct
.	O
x	double
,	O
iend	struct
.	O
y	double
,	O
istart	struct
.	O
x	double
,	O
istart	struct
.	O
y	double
,	O
force	enum
)	O
;	O
_plotter	pointer
->	O
tek_pos	struct
.	O
x	double
=	O
iend	struct
.	O
x	double
;	O
_plotter	pointer
->	O
tek_pos	struct
.	O
y	double
=	O
iend	struct
.	O
y	double
;	O
}	O
}	O
