static	O
const	O
int	O
mi_join_style	array
[	O
]	O
=	O
{	O
MI_JOIN_MITER	int
,	O
MI_JOIN_ROUND	int
,	O
MI_JOIN_BEVEL	int
,	O
MI_JOIN_TRIANGULAR	int
}	O
;	O
static	O
const	O
int	O
mi_cap_style	array
[	O
]	O
=	O
{	O
MI_CAP_BUTT	int
,	O
MI_CAP_ROUND	int
,	O
MI_CAP_PROJECTING	int
,	O
MI_CAP_TRIANGULAR	int
}	O
;	O
void	O
_set_common_mi_attributes	function
(	O
plDrawState	struct
*	O
drawstate	pointer
,	O
void	O
*	O
ptr	pointer
)	O
{	O
int	O
line_style	int
,	O
num_dashes	int
,	O
offset	array
;	O
unsigned	O
int	O
*	O
dashbuf	pointer
;	O
bool	enum
dash_array_allocated	enum
=	O
false	int
;	O
miGCAttribute	enum
attributes	pointer
[	O
5	int
]	O
;	O
int	O
values	pointer
[	O
5	int
]	O
;	O
unsigned	O
int	O
local_dashbuf	array
[	O
PL_MAX_DASH_ARRAY_LEN	int
]	O
;	O
miGC	struct
*	O
pGC	pointer
;	O
pGC	pointer
=	O
(	O
miGC	struct
*	O
)	O
ptr	pointer
;	O
attributes	pointer
[	O
0	int
]	O
=	O
MI_GC_FILL_RULE	int
;	O
values	pointer
[	O
0	int
]	O
=	O
(	O
drawstate	pointer
->	O
fill_rule_type	int
==	O
PL_FILL_NONZERO_WINDING	int
?	O
MI_WINDING_RULE	int
:	O
MI_EVEN_ODD_RULE	int
)	O
;	O
attributes	pointer
[	O
1	int
]	O
=	O
MI_GC_JOIN_STYLE	int
;	O
values	pointer
[	O
1	int
]	O
=	O
mi_join_style	array
[	O
drawstate	pointer
->	O
join_type	int
]	O
;	O
attributes	pointer
[	O
2	int
]	O
=	O
MI_GC_CAP_STYLE	int
;	O
values	pointer
[	O
2	int
]	O
=	O
mi_cap_style	array
[	O
drawstate	pointer
->	O
cap_type	int
]	O
;	O
attributes	pointer
[	O
3	int
]	O
=	O
MI_GC_ARC_MODE	int
;	O
values	pointer
[	O
3	int
]	O
=	O
MI_ARC_CHORD	int
;	O
attributes	pointer
[	O
4	int
]	O
=	O
MI_GC_LINE_WIDTH	int
;	O
values	pointer
[	O
4	int
]	O
=	O
drawstate	pointer
->	O
quantized_device_line_width	int
;	O
miSetGCAttribs	O
(	O
pGC	pointer
,	O
5	int
,	O
attributes	pointer
,	O
values	pointer
)	O
;	O
miSetGCMiterLimit	O
(	O
pGC	pointer
,	O
drawstate	pointer
->	O
miter_limit	double
)	O
;	O
if	O
(	O
drawstate	pointer
->	O
dash_array_in_effect	enum
)	O
{	O
int	O
i	int
;	O
num_dashes	int
=	O
drawstate	pointer
->	O
dash_array_len	int
;	O
if	O
(	O
num_dashes	int
>	O
0	int
)	O
{	O
bool	enum
odd_length	enum
;	O
double	O
min_sing_val	pointer
,	O
max_sing_val	pointer
;	O
int	O
dash_cycle_length	int
;	O
_matrix_sing_vals	function
(	O
drawstate	pointer
->	O
transform	struct
.	O
m	array
,	O
&	O
min_sing_val	pointer
,	O
&	O
max_sing_val	pointer
)	O
;	O
line_style	int
=	O
MI_LINE_ON_OFF_DASH	int
;	O
odd_length	enum
=	O
(	O
num_dashes	int
&	O
1	int
?	O
true	int
:	O
false	int
)	O
;	O
{	O
int	O
array_len	int
;	O
array_len	int
=	O
(	O
odd_length	enum
?	O
2	int
:	O
1	int
)	O
*	O
num_dashes	int
;	O
if	O
(	O
array_len	int
<=	O
PL_MAX_DASH_ARRAY_LEN	int
)	O
dashbuf	pointer
=	O
local_dashbuf	array
;	O
else	O
{	O
dashbuf	pointer
=	O
(	O
unsigned	O
int	O
*	O
)	O
_pl_xmalloc	function
(	O
array_len	int
*	O
sizeof	O
(	O
unsigned	O
int	O
)	O
)	O
;	O
dash_array_allocated	enum
=	O
true	int
;	O
}	O
}	O
dash_cycle_length	int
=	O
0	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
num_dashes	int
;	O
i	int
++	O
)	O
{	O
double	O
unrounded_dashlen	double
;	O
int	O
dashlen	int
;	O
unrounded_dashlen	double
=	O
min_sing_val	pointer
*	O
drawstate	pointer
->	O
dash_array	pointer
[	O
i	int
]	O
;	O
dashlen	int
=	O
IROUND	O
(	O
unrounded_dashlen	double
)	O
;	O
dashlen	int
=	O
IMAX	O
(	O
dashlen	int
,	O
1	int
)	O
;	O
dashbuf	pointer
[	O
i	int
]	O
=	O
(	O
unsigned	O
int	O
)	O
dashlen	int
;	O
dash_cycle_length	int
+=	O
dashlen	int
;	O
if	O
(	O
odd_length	enum
)	O
{	O
dashbuf	pointer
[	O
num_dashes	int
+	O
i	int
]	O
=	O
(	O
unsigned	O
int	O
)	O
dashlen	int
;	O
dash_cycle_length	int
+=	O
dashlen	int
;	O
}	O
}	O
if	O
(	O
odd_length	enum
)	O
num_dashes	int
*=	O
2	int
;	O
offset	array
=	O
IROUND	O
(	O
min_sing_val	pointer
*	O
drawstate	pointer
->	O
dash_offset	double
)	O
;	O
if	O
(	O
dash_cycle_length	int
>	O
0	int
)	O
{	O
while	O
(	O
offset	array
<	O
0	int
)	O
offset	array
+=	O
dash_cycle_length	int
;	O
offset	array
%=	O
dash_cycle_length	int
;	O
}	O
}	O
else	O
{	O
line_style	int
=	O
MI_LINE_SOLID	int
;	O
dashbuf	pointer
=	O
NULL	O
;	O
offset	array
=	O
0	int
;	O
}	O
}	O
else	O
{	O
if	O
(	O
drawstate	pointer
->	O
line_type	int
==	O
PL_L_SOLID	int
)	O
{	O
line_style	int
=	O
MI_LINE_SOLID	int
;	O
num_dashes	int
=	O
0	int
;	O
dashbuf	pointer
=	O
NULL	O
;	O
offset	array
=	O
0	int
;	O
}	O
else	O
{	O
const	O
int	O
*	O
dash_array	pointer
;	O
int	O
scale	int
,	O
i	int
;	O
line_style	int
=	O
MI_LINE_ON_OFF_DASH	int
;	O
num_dashes	int
=	O
_pl_g_line_styles	array
[	O
drawstate	pointer
->	O
line_type	int
]	O
.	O
dash_array_len	int
;	O
dash_array	pointer
=	O
_pl_g_line_styles	array
[	O
drawstate	pointer
->	O
line_type	int
]	O
.	O
dash_array	pointer
;	O
dashbuf	pointer
=	O
local_dashbuf	array
;	O
offset	array
=	O
0	int
;	O
scale	int
=	O
drawstate	pointer
->	O
quantized_device_line_width	int
;	O
if	O
(	O
scale	int
<=	O
0	int
)	O
scale	int
=	O
1	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
num_dashes	int
;	O
i	int
++	O
)	O
{	O
int	O
dashlen	int
;	O
dashlen	int
=	O
scale	int
*	O
dash_array	pointer
[	O
i	int
]	O
;	O
dashlen	int
=	O
IMAX	O
(	O
dashlen	int
,	O
1	int
)	O
;	O
dashbuf	pointer
[	O
i	int
]	O
=	O
(	O
unsigned	O
int	O
)	O
dashlen	int
;	O
}	O
}	O
}	O
miSetGCAttrib	O
(	O
pGC	pointer
,	O
MI_GC_LINE_STYLE	int
,	O
line_style	int
)	O
;	O
if	O
(	O
line_style	int
!=	O
(	O
int	O
)	O
MI_LINE_SOLID	int
)	O
miSetGCDashes	O
(	O
pGC	pointer
,	O
num_dashes	int
,	O
dashbuf	pointer
,	O
offset	array
)	O
;	O
if	O
(	O
dash_array_allocated	enum
)	O
free	function
(	O
dashbuf	pointer
)	O
;	O
}	O
