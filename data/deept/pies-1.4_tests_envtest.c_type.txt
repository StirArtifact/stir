static	O
int	O
envcmp	function
(	O
void	O
const	O
*	O
a	pointer
,	O
void	O
const	O
*	O
b	pointer
)	O
{	O
char	O
const	O
*	O
as	pointer
=	O
*	O
(	O
char	O
const	O
*	O
*	O
)	O
a	pointer
;	O
char	O
const	O
*	O
bs	pointer
=	O
*	O
(	O
char	O
const	O
*	O
*	O
)	O
b	pointer
;	O
int	O
c	int
;	O
while	O
(	O
*	O
as	pointer
&&	O
*	O
bs	pointer
)	O
{	O
c	int
=	O
*	O
as	pointer
-	O
*	O
bs	pointer
;	O
if	O
(	O
c	int
||	O
*	O
as	pointer
==	O
'='	O
||	O
*	O
bs	pointer
==	O
'='	O
)	O
break	O
;	O
as	pointer
++	O
;	O
bs	pointer
++	O
;	O
}	O
return	O
c	int
;	O
}	O
static	O
void	O
sortenv	function
(	O
char	O
*	O
*	O
env	pointer
)	O
{	O
size_t	long
n	long
;	O
for	O
(	O
n	long
=	O
0	int
;	O
env	pointer
[	O
n	long
]	O
;	O
n	long
++	O
)	O
;	O
qsort	function
(	O
env	pointer
,	O
n	long
,	O
sizeof	O
(	O
env	pointer
[	O
0	int
]	O
)	O
,	O
envcmp	function
)	O
;	O
}	O
static	O
void	O
printenv	function
(	O
char	O
*	O
*	O
env	pointer
)	O
{	O
size_t	long
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
env	pointer
[	O
i	long
]	O
;	O
i	long
++	O
)	O
{	O
char	O
*	O
p	pointer
=	O
env	pointer
[	O
i	long
]	O
;	O
while	O
(	O
*	O
p	pointer
)	O
{	O
fputc	function
(	O
*	O
p	pointer
,	O
stdout	pointer
)	O
;	O
if	O
(	O
*	O
p	pointer
++	O
==	O
'='	O
)	O
break	O
;	O
}	O
if	O
(	O
*	O
p	pointer
)	O
{	O
int	O
c	int
;	O
fputc	function
(	O
'"'	O
,	O
stdout	pointer
)	O
;	O
while	O
(	O
(	O
c	int
=	O
*	O
p	pointer
++	O
)	O
!=	O
0	int
)	O
{	O
int	O
c1	int
;	O
if	O
(	O
isascii	function
(	O
c	int
)	O
&&	O
isprint	function
(	O
c	int
)	O
&&	O
c	int
!=	O
'\\'	O
&&	O
c	int
!=	O
'"'	O
)	O
fputc	function
(	O
c	int
,	O
stdout	pointer
)	O
;	O
else	O
if	O
(	O
(	O
c1	int
=	O
wordsplit_c_quote_char	function
(	O
c	int
)	O
)	O
)	O
{	O
fputc	function
(	O
'\\'	O
,	O
stdout	pointer
)	O
;	O
fputc	function
(	O
c1	int
,	O
stdout	pointer
)	O
;	O
}	O
}	O
fputc	function
(	O
'"'	O
,	O
stdout	pointer
)	O
;	O
}	O
fputc	function
(	O
'\n'	O
,	O
stdout	pointer
)	O
;	O
}	O
}	O
char	O
*	O
defenv	array
[	O
]	O
=	O
{	O
"PATH=/usr/local/bin:/usr/bin:/bin"	pointer
,	O
"HOME=/home/user"	pointer
,	O
"USER=user"	pointer
,	O
"LOGIN=user"	pointer
,	O
"PWD=/home"	pointer
,	O
"LC_ALL=C"	pointer
,	O
"LC_CTYPE=C"	pointer
,	O
"LC_MESSAGES=C"	pointer
,	O
"LC_NUMERIC=C"	pointer
,	O
NULL	O
}	O
;	O
extern	O
char	O
*	O
*	O
environ	pointer
;	O
int	O
main	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
envop_t	struct
*	O
envop	pointer
=	O
NULL	O
;	O
int	O
opcode	int
=	O
envop_set	int
;	O
environ_t	struct
*	O
env	pointer
=	O
NULL	O
;	O
if	O
(	O
argc	int
>	O
1	int
)	O
{	O
if	O
(	O
strcmp	function
(	O
argv	pointer
[	O
1	int
]	O
,	O
"-clone"	pointer
)	O
==	O
0	int
)	O
{	O
env	pointer
=	O
environ_create	function
(	O
environ	pointer
)	O
;	O
argc	int
--	O
;	O
argv	pointer
++	O
;	O
}	O
else	O
if	O
(	O
strcmp	function
(	O
argv	pointer
[	O
1	int
]	O
,	O
"-null"	pointer
)	O
==	O
0	int
)	O
{	O
env	pointer
=	O
environ_create	function
(	O
NULL	O
)	O
;	O
argc	int
--	O
;	O
argv	pointer
++	O
;	O
}	O
}	O
if	O
(	O
!	O
env	pointer
)	O
env	pointer
=	O
environ_create	function
(	O
defenv	array
)	O
;	O
if	O
(	O
!	O
env	pointer
)	O
{	O
perror	function
(	O
"environ_create"	pointer
)	O
;	O
abort	function
(	O
)	O
;	O
}	O
while	O
(	O
--	O
argc	int
)	O
{	O
char	O
*	O
a	pointer
=	O
*	O
++	O
argv	pointer
;	O
if	O
(	O
strcmp	function
(	O
a	pointer
,	O
"-set"	pointer
)	O
==	O
0	int
)	O
opcode	int
=	O
envop_set	int
;	O
else	O
if	O
(	O
strcmp	function
(	O
a	pointer
,	O
"-unset"	pointer
)	O
==	O
0	int
)	O
opcode	int
=	O
envop_unset	int
;	O
else	O
if	O
(	O
strcmp	function
(	O
a	pointer
,	O
"-keep"	pointer
)	O
==	O
0	int
)	O
opcode	int
=	O
envop_keep	int
;	O
else	O
if	O
(	O
strcmp	function
(	O
a	pointer
,	O
"-clear"	pointer
)	O
==	O
0	int
)	O
{	O
int	O
rc	int
=	O
envop_entry_add	function
(	O
&	O
envop	pointer
,	O
envop_clear	int
,	O
NULL	O
,	O
NULL	O
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
perror	function
(	O
"envop_entry_add"	pointer
)	O
;	O
return	O
1	int
;	O
}	O
}	O
else	O
if	O
(	O
strcmp	function
(	O
a	pointer
,	O
"-exec"	pointer
)	O
==	O
0	int
)	O
{	O
--	O
argc	int
;	O
++	O
argv	pointer
;	O
if	O
(	O
argc	int
==	O
0	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"program name required after -exec\n"	pointer
)	O
;	O
return	O
1	int
;	O
}	O
break	O
;	O
}	O
else	O
if	O
(	O
a	pointer
[	O
0	int
]	O
==	O
'-'	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"unrecognized option: %s\n"	pointer
,	O
a	pointer
)	O
;	O
return	O
1	int
;	O
}	O
else	O
{	O
int	O
rc	int
;	O
char	O
*	O
p	pointer
=	O
strchr	function
(	O
a	pointer
,	O
'='	O
)	O
;	O
if	O
(	O
p	pointer
)	O
*	O
p	pointer
++	O
=	O
0	int
;	O
rc	int
=	O
envop_entry_add	function
(	O
&	O
envop	pointer
,	O
opcode	int
,	O
a	pointer
,	O
p	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
perror	function
(	O
"envop_entry_add"	pointer
)	O
;	O
return	O
1	int
;	O
}	O
}	O
}	O
if	O
(	O
envop_exec	function
(	O
envop	pointer
,	O
env	pointer
)	O
)	O
{	O
perror	function
(	O
"envop_exec"	pointer
)	O
;	O
return	O
1	int
;	O
}	O
if	O
(	O
argc	int
)	O
{	O
environ	pointer
=	O
environ_ptr	function
(	O
env	pointer
)	O
;	O
execvp	function
(	O
argv	pointer
[	O
0	int
]	O
,	O
argv	pointer
)	O
;	O
perror	function
(	O
"execvp"	pointer
)	O
;	O
abort	function
(	O
)	O
;	O
}	O
sortenv	function
(	O
env	pointer
->	O
env_base	pointer
)	O
;	O
printenv	function
(	O
env	pointer
->	O
env_base	pointer
)	O
;	O
return	O
0	int
;	O
}	O
