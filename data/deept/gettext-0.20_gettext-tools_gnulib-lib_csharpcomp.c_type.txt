static	O
int	O
compile_csharp_using_mono	function
(	O
const	O
char	O
*	O
const	O
*	O
sources	pointer
,	O
unsigned	O
int	O
sources_count	int
,	O
const	O
char	O
*	O
const	O
*	O
libdirs	pointer
,	O
unsigned	O
int	O
libdirs_count	int
,	O
const	O
char	O
*	O
const	O
*	O
libraries	pointer
,	O
unsigned	O
int	O
libraries_count	int
,	O
const	O
char	O
*	O
output_file	pointer
,	O
bool	bool
output_is_library	bool
,	O
bool	bool
optimize	bool
,	O
bool	bool
debug	bool
,	O
bool	bool
verbose	bool
)	O
{	O
static	O
bool	bool
mcs_tested	bool
;	O
static	O
bool	bool
mcs_present	bool
;	O
if	O
(	O
!	O
mcs_tested	bool
)	O
{	O
char	O
*	O
argv	pointer
[	O
3	int
]	O
;	O
pid_t	int
child	int
;	O
int	O
fd	array
[	O
1	int
]	O
;	O
int	O
exitstatus	int
;	O
argv	pointer
[	O
0	int
]	O
=	O
"mcs"	pointer
;	O
argv	pointer
[	O
1	int
]	O
=	O
"--version"	pointer
;	O
argv	pointer
[	O
2	int
]	O
=	O
NULL	O
;	O
child	int
=	O
create_pipe_in	function
(	O
"mcs"	pointer
,	O
"mcs"	pointer
,	O
argv	pointer
,	O
DEV_NULL	pointer
,	O
true	int
,	O
true	int
,	O
false	int
,	O
fd	array
)	O
;	O
mcs_present	bool
=	O
false	int
;	O
if	O
(	O
child	int
!=	O
-	O
1	int
)	O
{	O
char	O
c	array
[	O
4	int
]	O
;	O
size_t	long
count	long
=	O
0	int
;	O
while	O
(	O
safe_read	function
(	O
fd	array
[	O
0	int
]	O
,	O
&	O
c	array
[	O
count	long
]	O
,	O
1	int
)	O
>	O
0	int
)	O
{	O
count	long
++	O
;	O
if	O
(	O
count	long
==	O
4	int
)	O
{	O
if	O
(	O
memcmp	function
(	O
c	array
,	O
"Mono"	pointer
,	O
4	int
)	O
==	O
0	int
)	O
mcs_present	bool
=	O
true	int
;	O
c	array
[	O
0	int
]	O
=	O
c	array
[	O
1	int
]	O
;	O
c	array
[	O
1	int
]	O
=	O
c	array
[	O
2	int
]	O
;	O
c	array
[	O
2	int
]	O
=	O
c	array
[	O
3	int
]	O
;	O
count	long
--	O
;	O
}	O
}	O
close	pointer
(	O
fd	array
[	O
0	int
]	O
)	O
;	O
exitstatus	int
=	O
wait_subprocess	function
(	O
child	int
,	O
"mcs"	pointer
,	O
false	int
,	O
true	int
,	O
true	int
,	O
false	int
,	O
NULL	O
)	O
;	O
if	O
(	O
exitstatus	int
!=	O
0	int
)	O
mcs_present	bool
=	O
false	int
;	O
}	O
mcs_tested	bool
=	O
true	int
;	O
}	O
if	O
(	O
mcs_present	bool
)	O
{	O
unsigned	O
int	O
argc	int
;	O
char	O
*	O
*	O
argv	pointer
;	O
char	O
*	O
*	O
argp	pointer
;	O
pid_t	int
child	int
;	O
int	O
fd	array
[	O
1	int
]	O
;	O
FILE	struct
*	O
fp	pointer
;	O
char	O
*	O
line	array
[	O
2	int
]	O
;	O
size_t	long
linesize	array
[	O
2	int
]	O
;	O
size_t	long
linelen	array
[	O
2	int
]	O
;	O
unsigned	O
int	O
l	int
;	O
int	O
exitstatus	int
;	O
unsigned	O
int	O
i	int
;	O
argc	int
=	O
1	int
+	O
(	O
output_is_library	bool
?	O
1	int
:	O
0	int
)	O
+	O
1	int
+	O
libdirs_count	int
+	O
libraries_count	int
+	O
(	O
debug	bool
?	O
1	int
:	O
0	int
)	O
+	O
sources_count	int
;	O
argv	pointer
=	O
(	O
char	O
*	O
*	O
)	O
xmalloca	O
(	O
(	O
argc	int
+	O
1	int
)	O
*	O
sizeof	O
(	O
char	O
*	O
)	O
)	O
;	O
argp	pointer
=	O
argv	pointer
;	O
*	O
argp	pointer
++	O
=	O
"mcs"	pointer
;	O
if	O
(	O
output_is_library	bool
)	O
*	O
argp	pointer
++	O
=	O
"-target:library"	pointer
;	O
{	O
char	O
*	O
option	pointer
=	O
(	O
char	O
*	O
)	O
xmalloca	O
(	O
5	int
+	O
strlen	function
(	O
output_file	pointer
)	O
+	O
1	int
)	O
;	O
memcpy	function
(	O
option	pointer
,	O
"-out:"	pointer
,	O
5	int
)	O
;	O
strcpy	function
(	O
option	pointer
+	O
5	int
,	O
output_file	pointer
)	O
;	O
*	O
argp	pointer
++	O
=	O
option	pointer
;	O
}	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
libdirs_count	int
;	O
i	int
++	O
)	O
{	O
char	O
*	O
option	pointer
=	O
(	O
char	O
*	O
)	O
xmalloca	O
(	O
5	int
+	O
strlen	function
(	O
libdirs	pointer
[	O
i	int
]	O
)	O
+	O
1	int
)	O
;	O
memcpy	function
(	O
option	pointer
,	O
"-lib:"	pointer
,	O
5	int
)	O
;	O
strcpy	function
(	O
option	pointer
+	O
5	int
,	O
libdirs	pointer
[	O
i	int
]	O
)	O
;	O
*	O
argp	pointer
++	O
=	O
option	pointer
;	O
}	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
libraries_count	int
;	O
i	int
++	O
)	O
{	O
char	O
*	O
option	pointer
=	O
(	O
char	O
*	O
)	O
xmalloca	O
(	O
11	int
+	O
strlen	function
(	O
libraries	pointer
[	O
i	int
]	O
)	O
+	O
4	int
+	O
1	int
)	O
;	O
memcpy	function
(	O
option	pointer
,	O
"-reference:"	pointer
,	O
11	int
)	O
;	O
memcpy	function
(	O
option	pointer
+	O
11	int
,	O
libraries	pointer
[	O
i	int
]	O
,	O
strlen	function
(	O
libraries	pointer
[	O
i	int
]	O
)	O
)	O
;	O
strcpy	function
(	O
option	pointer
+	O
11	int
+	O
strlen	function
(	O
libraries	pointer
[	O
i	int
]	O
)	O
,	O
".dll"	pointer
)	O
;	O
*	O
argp	pointer
++	O
=	O
option	pointer
;	O
}	O
if	O
(	O
debug	bool
)	O
*	O
argp	pointer
++	O
=	O
"-debug"	pointer
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
sources_count	int
;	O
i	int
++	O
)	O
{	O
const	O
char	O
*	O
source_file	pointer
=	O
sources	pointer
[	O
i	int
]	O
;	O
if	O
(	O
strlen	function
(	O
source_file	pointer
)	O
>=	O
10	int
&&	O
memcmp	function
(	O
source_file	pointer
+	O
strlen	function
(	O
source_file	pointer
)	O
-	O
10	int
,	O
".resources"	pointer
,	O
10	int
)	O
==	O
0	int
)	O
{	O
char	O
*	O
option	pointer
=	O
(	O
char	O
*	O
)	O
xmalloca	O
(	O
10	int
+	O
strlen	function
(	O
source_file	pointer
)	O
+	O
1	int
)	O
;	O
memcpy	function
(	O
option	pointer
,	O
"-resource:"	pointer
,	O
10	int
)	O
;	O
strcpy	function
(	O
option	pointer
+	O
10	int
,	O
source_file	pointer
)	O
;	O
*	O
argp	pointer
++	O
=	O
option	pointer
;	O
}	O
else	O
*	O
argp	pointer
++	O
=	O
(	O
char	O
*	O
)	O
source_file	pointer
;	O
}	O
*	O
argp	pointer
=	O
NULL	O
;	O
if	O
(	O
argp	pointer
-	O
argv	pointer
!=	O
argc	int
)	O
abort	function
(	O
)	O
;	O
if	O
(	O
verbose	bool
)	O
{	O
char	O
*	O
command	pointer
=	O
shell_quote_argv	function
(	O
argv	pointer
)	O
;	O
printf	function
(	O
"%s\n"	pointer
,	O
command	pointer
)	O
;	O
free	function
(	O
command	pointer
)	O
;	O
}	O
child	int
=	O
create_pipe_in	function
(	O
"mcs"	pointer
,	O
"mcs"	pointer
,	O
argv	pointer
,	O
NULL	O
,	O
false	int
,	O
true	int
,	O
true	int
,	O
fd	array
)	O
;	O
fp	pointer
=	O
fdopen	function
(	O
fd	array
[	O
0	int
]	O
,	O
"r"	pointer
)	O
;	O
if	O
(	O
fp	pointer
==	O
NULL	O
)	O
error	function
(	O
EXIT_FAILURE	int
,	O
errno	O
,	O
_	O
(	O
"fdopen() failed"	pointer
)	O
)	O
;	O
line	array
[	O
0	int
]	O
=	O
NULL	O
;	O
linesize	array
[	O
0	int
]	O
=	O
0	int
;	O
line	array
[	O
1	int
]	O
=	O
NULL	O
;	O
linesize	array
[	O
1	int
]	O
=	O
0	int
;	O
l	int
=	O
0	int
;	O
for	O
(	O
;	O
;	O
)	O
{	O
linelen	array
[	O
l	int
]	O
=	O
getline	function
(	O
&	O
line	array
[	O
l	int
]	O
,	O
&	O
linesize	array
[	O
l	int
]	O
,	O
fp	pointer
)	O
;	O
if	O
(	O
linelen	array
[	O
l	int
]	O
==	O
(	O
size_t	long
)	O
(	O
-	O
1	int
)	O
)	O
break	O
;	O
l	int
=	O
(	O
l	int
+	O
1	int
)	O
%	O
2	int
;	O
if	O
(	O
line	array
[	O
l	int
]	O
!=	O
NULL	O
)	O
fwrite	function
(	O
line	array
[	O
l	int
]	O
,	O
1	int
,	O
linelen	array
[	O
l	int
]	O
,	O
stderr	pointer
)	O
;	O
}	O
l	int
=	O
(	O
l	int
+	O
1	int
)	O
%	O
2	int
;	O
if	O
(	O
line	array
[	O
l	int
]	O
!=	O
NULL	O
&&	O
!	O
(	O
linelen	array
[	O
l	int
]	O
>=	O
21	int
&&	O
memcmp	function
(	O
line	array
[	O
l	int
]	O
,	O
"Compilation succeeded"	pointer
,	O
21	int
)	O
==	O
0	int
)	O
)	O
fwrite	function
(	O
line	array
[	O
l	int
]	O
,	O
1	int
,	O
linelen	array
[	O
l	int
]	O
,	O
stderr	pointer
)	O
;	O
if	O
(	O
line	array
[	O
0	int
]	O
!=	O
NULL	O
)	O
free	function
(	O
line	array
[	O
0	int
]	O
)	O
;	O
if	O
(	O
line	array
[	O
1	int
]	O
!=	O
NULL	O
)	O
free	function
(	O
line	array
[	O
1	int
]	O
)	O
;	O
fclose	function
(	O
fp	pointer
)	O
;	O
exitstatus	int
=	O
wait_subprocess	function
(	O
child	int
,	O
"mcs"	pointer
,	O
false	int
,	O
false	int
,	O
true	int
,	O
true	int
,	O
NULL	O
)	O
;	O
for	O
(	O
i	int
=	O
1	int
+	O
(	O
output_is_library	bool
?	O
1	int
:	O
0	int
)	O
;	O
i	int
<	O
1	int
+	O
(	O
output_is_library	bool
?	O
1	int
:	O
0	int
)	O
+	O
1	int
+	O
libdirs_count	int
+	O
libraries_count	int
;	O
i	int
++	O
)	O
freea	function
(	O
argv	pointer
[	O
i	int
]	O
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
sources_count	int
;	O
i	int
++	O
)	O
if	O
(	O
argv	pointer
[	O
argc	int
-	O
sources_count	int
+	O
i	int
]	O
!=	O
sources	pointer
[	O
i	int
]	O
)	O
freea	function
(	O
argv	pointer
[	O
argc	int
-	O
sources_count	int
+	O
i	int
]	O
)	O
;	O
freea	function
(	O
argv	pointer
)	O
;	O
return	O
(	O
exitstatus	int
!=	O
0	int
)	O
;	O
}	O
else	O
return	O
-	O
1	int
;	O
}	O
static	O
int	O
compile_csharp_using_sscli	function
(	O
const	O
char	O
*	O
const	O
*	O
sources	pointer
,	O
unsigned	O
int	O
sources_count	int
,	O
const	O
char	O
*	O
const	O
*	O
libdirs	pointer
,	O
unsigned	O
int	O
libdirs_count	int
,	O
const	O
char	O
*	O
const	O
*	O
libraries	pointer
,	O
unsigned	O
int	O
libraries_count	int
,	O
const	O
char	O
*	O
output_file	pointer
,	O
bool	bool
output_is_library	bool
,	O
bool	bool
optimize	bool
,	O
bool	bool
debug	bool
,	O
bool	bool
verbose	bool
)	O
{	O
static	O
bool	bool
csc_tested	bool
;	O
static	O
bool	bool
csc_present	bool
;	O
if	O
(	O
!	O
csc_tested	bool
)	O
{	O
char	O
*	O
argv	pointer
[	O
3	int
]	O
;	O
pid_t	int
child	int
;	O
int	O
fd	array
[	O
1	int
]	O
;	O
int	O
exitstatus	int
;	O
argv	pointer
[	O
0	int
]	O
=	O
"csc"	pointer
;	O
argv	pointer
[	O
1	int
]	O
=	O
"-help"	pointer
;	O
argv	pointer
[	O
2	int
]	O
=	O
NULL	O
;	O
child	int
=	O
create_pipe_in	function
(	O
"csc"	pointer
,	O
"csc"	pointer
,	O
argv	pointer
,	O
DEV_NULL	pointer
,	O
true	int
,	O
true	int
,	O
false	int
,	O
fd	array
)	O
;	O
csc_present	bool
=	O
false	int
;	O
if	O
(	O
child	int
!=	O
-	O
1	int
)	O
{	O
char	O
c	array
[	O
7	int
]	O
;	O
size_t	long
count	long
=	O
0	int
;	O
csc_present	bool
=	O
true	int
;	O
while	O
(	O
safe_read	function
(	O
fd	array
[	O
0	int
]	O
,	O
&	O
c	array
[	O
count	long
]	O
,	O
1	int
)	O
>	O
0	int
)	O
{	O
if	O
(	O
c	array
[	O
count	long
]	O
>=	O
'A'	O
&&	O
c	array
[	O
count	long
]	O
<=	O
'Z'	O
)	O
c	array
[	O
count	long
]	O
+=	O
'a'	O
-	O
'A'	O
;	O
count	long
++	O
;	O
if	O
(	O
count	long
==	O
7	int
)	O
{	O
if	O
(	O
memcmp	function
(	O
c	array
,	O
"chicken"	pointer
,	O
7	int
)	O
==	O
0	int
)	O
csc_present	bool
=	O
false	int
;	O
c	array
[	O
0	int
]	O
=	O
c	array
[	O
1	int
]	O
;	O
c	array
[	O
1	int
]	O
=	O
c	array
[	O
2	int
]	O
;	O
c	array
[	O
2	int
]	O
=	O
c	array
[	O
3	int
]	O
;	O
c	array
[	O
3	int
]	O
=	O
c	array
[	O
4	int
]	O
;	O
c	array
[	O
4	int
]	O
=	O
c	array
[	O
5	int
]	O
;	O
c	array
[	O
5	int
]	O
=	O
c	array
[	O
6	int
]	O
;	O
count	long
--	O
;	O
}	O
}	O
close	pointer
(	O
fd	array
[	O
0	int
]	O
)	O
;	O
exitstatus	int
=	O
wait_subprocess	function
(	O
child	int
,	O
"csc"	pointer
,	O
false	int
,	O
true	int
,	O
true	int
,	O
false	int
,	O
NULL	O
)	O
;	O
if	O
(	O
exitstatus	int
!=	O
0	int
)	O
csc_present	bool
=	O
false	int
;	O
}	O
csc_tested	bool
=	O
true	int
;	O
}	O
if	O
(	O
csc_present	bool
)	O
{	O
unsigned	O
int	O
argc	int
;	O
char	O
*	O
*	O
argv	pointer
;	O
char	O
*	O
*	O
argp	pointer
;	O
int	O
exitstatus	int
;	O
unsigned	O
int	O
i	int
;	O
argc	int
=	O
1	int
+	O
1	int
+	O
1	int
+	O
libdirs_count	int
+	O
libraries_count	int
+	O
(	O
optimize	bool
?	O
1	int
:	O
0	int
)	O
+	O
(	O
debug	bool
?	O
1	int
:	O
0	int
)	O
+	O
sources_count	int
;	O
argv	pointer
=	O
(	O
char	O
*	O
*	O
)	O
xmalloca	O
(	O
(	O
argc	int
+	O
1	int
)	O
*	O
sizeof	O
(	O
char	O
*	O
)	O
)	O
;	O
argp	pointer
=	O
argv	pointer
;	O
*	O
argp	pointer
++	O
=	O
"csc"	pointer
;	O
*	O
argp	pointer
++	O
=	O
(	O
char	O
*	O
)	O
(	O
output_is_library	bool
?	O
"-target:library"	pointer
:	O
"-target:exe"	pointer
)	O
;	O
{	O
char	O
*	O
option	pointer
=	O
(	O
char	O
*	O
)	O
xmalloca	O
(	O
5	int
+	O
strlen	function
(	O
output_file	pointer
)	O
+	O
1	int
)	O
;	O
memcpy	function
(	O
option	pointer
,	O
"-out:"	pointer
,	O
5	int
)	O
;	O
strcpy	function
(	O
option	pointer
+	O
5	int
,	O
output_file	pointer
)	O
;	O
*	O
argp	pointer
++	O
=	O
option	pointer
;	O
}	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
libdirs_count	int
;	O
i	int
++	O
)	O
{	O
char	O
*	O
option	pointer
=	O
(	O
char	O
*	O
)	O
xmalloca	O
(	O
5	int
+	O
strlen	function
(	O
libdirs	pointer
[	O
i	int
]	O
)	O
+	O
1	int
)	O
;	O
memcpy	function
(	O
option	pointer
,	O
"-lib:"	pointer
,	O
5	int
)	O
;	O
strcpy	function
(	O
option	pointer
+	O
5	int
,	O
libdirs	pointer
[	O
i	int
]	O
)	O
;	O
*	O
argp	pointer
++	O
=	O
option	pointer
;	O
}	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
libraries_count	int
;	O
i	int
++	O
)	O
{	O
char	O
*	O
option	pointer
=	O
(	O
char	O
*	O
)	O
xmalloca	O
(	O
11	int
+	O
strlen	function
(	O
libraries	pointer
[	O
i	int
]	O
)	O
+	O
4	int
+	O
1	int
)	O
;	O
memcpy	function
(	O
option	pointer
,	O
"-reference:"	pointer
,	O
11	int
)	O
;	O
memcpy	function
(	O
option	pointer
+	O
11	int
,	O
libraries	pointer
[	O
i	int
]	O
,	O
strlen	function
(	O
libraries	pointer
[	O
i	int
]	O
)	O
)	O
;	O
strcpy	function
(	O
option	pointer
+	O
11	int
+	O
strlen	function
(	O
libraries	pointer
[	O
i	int
]	O
)	O
,	O
".dll"	pointer
)	O
;	O
*	O
argp	pointer
++	O
=	O
option	pointer
;	O
}	O
if	O
(	O
optimize	bool
)	O
*	O
argp	pointer
++	O
=	O
"-optimize+"	pointer
;	O
if	O
(	O
debug	bool
)	O
*	O
argp	pointer
++	O
=	O
"-debug+"	pointer
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
sources_count	int
;	O
i	int
++	O
)	O
{	O
const	O
char	O
*	O
source_file	pointer
=	O
sources	pointer
[	O
i	int
]	O
;	O
if	O
(	O
strlen	function
(	O
source_file	pointer
)	O
>=	O
10	int
&&	O
memcmp	function
(	O
source_file	pointer
+	O
strlen	function
(	O
source_file	pointer
)	O
-	O
10	int
,	O
".resources"	pointer
,	O
10	int
)	O
==	O
0	int
)	O
{	O
char	O
*	O
option	pointer
=	O
(	O
char	O
*	O
)	O
xmalloca	O
(	O
10	int
+	O
strlen	function
(	O
source_file	pointer
)	O
+	O
1	int
)	O
;	O
memcpy	function
(	O
option	pointer
,	O
"-resource:"	pointer
,	O
10	int
)	O
;	O
strcpy	function
(	O
option	pointer
+	O
10	int
,	O
source_file	pointer
)	O
;	O
*	O
argp	pointer
++	O
=	O
option	pointer
;	O
}	O
else	O
*	O
argp	pointer
++	O
=	O
(	O
char	O
*	O
)	O
source_file	pointer
;	O
}	O
*	O
argp	pointer
=	O
NULL	O
;	O
if	O
(	O
argp	pointer
-	O
argv	pointer
!=	O
argc	int
)	O
abort	function
(	O
)	O
;	O
if	O
(	O
verbose	bool
)	O
{	O
char	O
*	O
command	pointer
=	O
shell_quote_argv	function
(	O
argv	pointer
)	O
;	O
printf	function
(	O
"%s\n"	pointer
,	O
command	pointer
)	O
;	O
free	function
(	O
command	pointer
)	O
;	O
}	O
exitstatus	int
=	O
execute	function
(	O
"csc"	pointer
,	O
"csc"	pointer
,	O
argv	pointer
,	O
false	int
,	O
false	int
,	O
false	int
,	O
false	int
,	O
true	int
,	O
true	int
,	O
NULL	O
)	O
;	O
for	O
(	O
i	int
=	O
2	int
;	O
i	int
<	O
3	int
+	O
libdirs_count	int
+	O
libraries_count	int
;	O
i	int
++	O
)	O
freea	function
(	O
argv	pointer
[	O
i	int
]	O
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
sources_count	int
;	O
i	int
++	O
)	O
if	O
(	O
argv	pointer
[	O
argc	int
-	O
sources_count	int
+	O
i	int
]	O
!=	O
sources	pointer
[	O
i	int
]	O
)	O
freea	function
(	O
argv	pointer
[	O
argc	int
-	O
sources_count	int
+	O
i	int
]	O
)	O
;	O
freea	function
(	O
argv	pointer
)	O
;	O
return	O
(	O
exitstatus	int
!=	O
0	int
)	O
;	O
}	O
else	O
return	O
-	O
1	int
;	O
}	O
bool	bool
compile_csharp_class	function
(	O
const	O
char	O
*	O
const	O
*	O
sources	pointer
,	O
unsigned	O
int	O
sources_count	int
,	O
const	O
char	O
*	O
const	O
*	O
libdirs	pointer
,	O
unsigned	O
int	O
libdirs_count	int
,	O
const	O
char	O
*	O
const	O
*	O
libraries	pointer
,	O
unsigned	O
int	O
libraries_count	int
,	O
const	O
char	O
*	O
output_file	pointer
,	O
bool	bool
optimize	bool
,	O
bool	bool
debug	bool
,	O
bool	bool
verbose	bool
)	O
{	O
bool	bool
output_is_library	bool
=	O
(	O
strlen	function
(	O
output_file	pointer
)	O
>=	O
4	int
&&	O
memcmp	function
(	O
output_file	pointer
+	O
strlen	function
(	O
output_file	pointer
)	O
-	O
4	int
,	O
".dll"	pointer
,	O
4	int
)	O
==	O
0	int
)	O
;	O
int	O
result	int
;	O
result	int
=	O
compile_csharp_using_mono	function
(	O
sources	pointer
,	O
sources_count	int
,	O
libdirs	pointer
,	O
libdirs_count	int
,	O
libraries	pointer
,	O
libraries_count	int
,	O
output_file	pointer
,	O
output_is_library	bool
,	O
optimize	bool
,	O
debug	bool
,	O
verbose	bool
)	O
;	O
if	O
(	O
result	int
>=	O
0	int
)	O
return	O
(	O
bool	bool
)	O
result	int
;	O
result	int
=	O
compile_csharp_using_sscli	function
(	O
sources	pointer
,	O
sources_count	int
,	O
libdirs	pointer
,	O
libdirs_count	int
,	O
libraries	pointer
,	O
libraries_count	int
,	O
output_file	pointer
,	O
output_is_library	bool
,	O
optimize	bool
,	O
debug	bool
,	O
verbose	bool
)	O
;	O
if	O
(	O
result	int
>=	O
0	int
)	O
return	O
(	O
bool	bool
)	O
result	int
;	O
error	function
(	O
0	int
,	O
0	int
,	O
_	O
(	O
"C# compiler not found, try installing mono"	pointer
)	O
)	O
;	O
return	O
true	int
;	O
}	O
