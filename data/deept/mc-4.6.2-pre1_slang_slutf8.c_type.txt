static	O
unsigned	O
char	O
Len_Map	array
[	O
256	int
]	O
=	O
{	O
0	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
3	int
,	O
3	int
,	O
3	int
,	O
3	int
,	O
3	int
,	O
3	int
,	O
3	int
,	O
3	int
,	O
3	int
,	O
3	int
,	O
3	int
,	O
3	int
,	O
3	int
,	O
3	int
,	O
3	int
,	O
3	int
,	O
4	int
,	O
4	int
,	O
4	int
,	O
4	int
,	O
4	int
,	O
4	int
,	O
4	int
,	O
4	int
,	O
5	int
,	O
5	int
,	O
5	int
,	O
5	int
,	O
6	int
,	O
6	int
,	O
1	int
,	O
1	int
}	O
;	O
_INLINE_	O
static	O
int	O
is_invalid_or_overlong_utf8	function
(	O
SLuchar_Type	char
*	O
u	pointer
,	O
unsigned	O
int	O
len	int
)	O
{	O
unsigned	O
int	O
i	array
;	O
unsigned	O
char	O
ch	int
,	O
ch1	char
;	O
for	O
(	O
i	array
=	O
1	int
;	O
i	array
<	O
len	int
;	O
i	array
++	O
)	O
{	O
if	O
(	O
(	O
u	pointer
[	O
i	array
]	O
&	O
0xC0	int
)	O
!=	O
0x80	int
)	O
return	O
1	int
;	O
}	O
ch	int
=	O
*	O
u	pointer
;	O
if	O
(	O
(	O
ch	int
==	O
0xC0	int
)	O
||	O
(	O
ch	int
==	O
0xC1	int
)	O
)	O
return	O
1	int
;	O
ch1	char
=	O
u	pointer
[	O
1	int
]	O
;	O
if	O
(	O
(	O
(	O
ch1	char
&	O
ch	int
)	O
==	O
0x80	int
)	O
&&	O
(	O
(	O
ch	int
==	O
0xE0	int
)	O
||	O
(	O
ch	int
==	O
0xF0	int
)	O
||	O
(	O
ch	int
==	O
0xF8	int
)	O
||	O
(	O
ch	int
==	O
0xFC	int
)	O
)	O
)	O
return	O
1	int
;	O
if	O
(	O
len	int
==	O
3	int
)	O
{	O
if	O
(	O
(	O
ch	int
==	O
0xED	int
)	O
&&	O
(	O
(	O
ch1	char
>=	O
0xA0	int
)	O
&&	O
(	O
ch1	char
<=	O
0xBF	int
)	O
)	O
&&	O
(	O
u	pointer
[	O
2	int
]	O
>=	O
0x80	int
)	O
&&	O
(	O
u	pointer
[	O
2	int
]	O
<=	O
0xBF	int
)	O
)	O
return	O
1	int
;	O
if	O
(	O
(	O
ch	int
==	O
0xEF	int
)	O
&&	O
(	O
ch1	char
==	O
0xBF	int
)	O
&&	O
(	O
(	O
u	pointer
[	O
2	int
]	O
==	O
0xBE	int
)	O
||	O
(	O
u	pointer
[	O
2	int
]	O
==	O
0xBF	int
)	O
)	O
)	O
return	O
1	int
;	O
}	O
return	O
0	int
;	O
}	O
_INLINE_	O
static	O
SLwchar_Type	int
fast_utf8_decode	function
(	O
SLuchar_Type	char
*	O
u	pointer
,	O
unsigned	O
int	O
len	int
)	O
{	O
static	O
unsigned	O
char	O
masks	array
[	O
7	int
]	O
=	O
{	O
0	int
,	O
0	int
,	O
0x1F	int
,	O
0xF	int
,	O
0x7	int
,	O
0x3	int
,	O
0x1	int
}	O
;	O
SLuchar_Type	char
*	O
umax	pointer
;	O
SLwchar_Type	int
w	pointer
;	O
w	pointer
=	O
(	O
*	O
u	pointer
&	O
masks	array
[	O
len	int
]	O
)	O
;	O
umax	pointer
=	O
u	pointer
+	O
len	int
;	O
u	pointer
++	O
;	O
while	O
(	O
u	pointer
<	O
umax	pointer
)	O
{	O
w	pointer
=	O
(	O
w	pointer
<<	O
6	int
)	O
|	O
(	O
u	pointer
[	O
0	int
]	O
&	O
0x3F	int
)	O
;	O
u	pointer
++	O
;	O
}	O
return	O
w	pointer
;	O
}	O
unsigned	O
char	O
*	O
SLutf8_skip_char	function
(	O
unsigned	O
char	O
*	O
s	pointer
,	O
unsigned	O
char	O
*	O
smax	pointer
)	O
{	O
unsigned	O
int	O
len	int
;	O
if	O
(	O
s	pointer
>=	O
smax	pointer
)	O
return	O
s	pointer
;	O
len	int
=	O
Len_Map	array
[	O
*	O
s	pointer
]	O
;	O
if	O
(	O
len	int
<=	O
1	int
)	O
return	O
s	pointer
+	O
1	int
;	O
if	O
(	O
s	pointer
+	O
len	int
>	O
smax	pointer
)	O
return	O
s	pointer
+	O
1	int
;	O
if	O
(	O
is_invalid_or_overlong_utf8	function
(	O
s	pointer
,	O
len	int
)	O
)	O
return	O
s	pointer
+	O
1	int
;	O
return	O
s	pointer
+	O
len	int
;	O
}	O
SLuchar_Type	char
*	O
SLutf8_skip_chars	function
(	O
SLuchar_Type	char
*	O
s	pointer
,	O
SLuchar_Type	char
*	O
smax	pointer
,	O
unsigned	O
int	O
num	int
,	O
unsigned	O
int	O
*	O
dnum	pointer
,	O
int	O
ignore_combining	int
)	O
{	O
unsigned	O
int	O
n	int
;	O
n	int
=	O
0	int
;	O
while	O
(	O
(	O
n	int
<	O
num	int
)	O
&&	O
(	O
s	pointer
<	O
smax	pointer
)	O
)	O
{	O
unsigned	O
int	O
len	int
=	O
Len_Map	array
[	O
*	O
s	pointer
]	O
;	O
if	O
(	O
len	int
<=	O
1	int
)	O
{	O
n	int
++	O
;	O
s	pointer
++	O
;	O
continue	O
;	O
}	O
if	O
(	O
s	pointer
+	O
len	int
>	O
smax	pointer
)	O
{	O
s	pointer
++	O
;	O
n	int
++	O
;	O
continue	O
;	O
}	O
if	O
(	O
is_invalid_or_overlong_utf8	function
(	O
s	pointer
,	O
len	int
)	O
)	O
{	O
s	pointer
++	O
;	O
n	int
++	O
;	O
continue	O
;	O
}	O
if	O
(	O
ignore_combining	int
)	O
{	O
SLwchar_Type	int
w	pointer
=	O
fast_utf8_decode	function
(	O
s	pointer
,	O
len	int
)	O
;	O
if	O
(	O
0	int
!=	O
SLwchar_wcwidth	function
(	O
w	pointer
)	O
)	O
n	int
++	O
;	O
s	pointer
+=	O
len	int
;	O
continue	O
;	O
}	O
n	int
++	O
;	O
s	pointer
+=	O
len	int
;	O
}	O
if	O
(	O
ignore_combining	int
)	O
{	O
while	O
(	O
s	pointer
<	O
smax	pointer
)	O
{	O
SLwchar_Type	int
w	pointer
;	O
unsigned	O
int	O
nconsumed	int
;	O
if	O
(	O
NULL	O
==	O
SLutf8_decode	function
(	O
s	pointer
,	O
smax	pointer
,	O
&	O
w	pointer
,	O
&	O
nconsumed	int
)	O
)	O
break	O
;	O
if	O
(	O
0	int
!=	O
SLwchar_wcwidth	function
(	O
w	pointer
)	O
)	O
break	O
;	O
s	pointer
+=	O
nconsumed	int
;	O
}	O
}	O
if	O
(	O
dnum	pointer
!=	O
NULL	O
)	O
*	O
dnum	pointer
=	O
n	int
;	O
return	O
s	pointer
;	O
}	O
SLuchar_Type	char
*	O
SLutf8_bskip_chars	function
(	O
SLuchar_Type	char
*	O
smin	pointer
,	O
SLuchar_Type	char
*	O
s	pointer
,	O
unsigned	O
int	O
num	int
,	O
unsigned	O
int	O
*	O
dnum	pointer
,	O
int	O
ignore_combining	int
)	O
{	O
unsigned	O
int	O
n	int
;	O
SLuchar_Type	char
*	O
smax	pointer
=	O
s	pointer
;	O
n	int
=	O
0	int
;	O
while	O
(	O
(	O
n	int
<	O
num	int
)	O
&&	O
(	O
s	pointer
>	O
smin	pointer
)	O
)	O
{	O
unsigned	O
char	O
ch	int
;	O
unsigned	O
int	O
dn	int
;	O
s	pointer
--	O
;	O
ch	int
=	O
*	O
s	pointer
;	O
if	O
(	O
ch	int
<	O
0x80	int
)	O
{	O
n	int
++	O
;	O
smax	pointer
=	O
s	pointer
;	O
continue	O
;	O
}	O
dn	int
=	O
0	int
;	O
while	O
(	O
(	O
s	pointer
!=	O
smin	pointer
)	O
&&	O
(	O
Len_Map	array
[	O
ch	int
]	O
==	O
0	int
)	O
&&	O
(	O
dn	int
<	O
SLUTF8_MAX_MBLEN	int
)	O
)	O
{	O
s	pointer
--	O
;	O
ch	int
=	O
*	O
s	pointer
;	O
dn	int
++	O
;	O
}	O
if	O
(	O
ch	int
<=	O
0xBF	int
)	O
{	O
n	int
++	O
;	O
smax	pointer
--	O
;	O
s	pointer
=	O
smax	pointer
;	O
continue	O
;	O
}	O
if	O
(	O
ch	int
>	O
0xBF	int
)	O
{	O
SLwchar_Type	int
w	pointer
;	O
SLuchar_Type	char
*	O
s1	pointer
;	O
if	O
(	O
(	O
NULL	O
==	O
(	O
s1	pointer
=	O
SLutf8_decode	function
(	O
s	pointer
,	O
smax	pointer
,	O
&	O
w	pointer
,	O
NULL	O
)	O
)	O
)	O
||	O
(	O
s1	pointer
!=	O
smax	pointer
)	O
)	O
{	O
dn	int
=	O
(	O
unsigned	O
int	O
)	O
(	O
smax	pointer
-	O
s	pointer
)	O
;	O
n	int
++	O
;	O
smax	pointer
--	O
;	O
s	pointer
=	O
smax	pointer
;	O
continue	O
;	O
}	O
if	O
(	O
(	O
ignore_combining	int
==	O
0	int
)	O
||	O
(	O
0	int
!=	O
SLwchar_wcwidth	function
(	O
w	pointer
)	O
)	O
)	O
n	int
++	O
;	O
smax	pointer
=	O
s	pointer
;	O
}	O
}	O
if	O
(	O
dnum	pointer
!=	O
NULL	O
)	O
*	O
dnum	pointer
=	O
n	int
;	O
return	O
s	pointer
;	O
}	O
SLuchar_Type	char
*	O
SLutf8_bskip_char	function
(	O
SLuchar_Type	char
*	O
smin	pointer
,	O
SLuchar_Type	char
*	O
s	pointer
)	O
{	O
if	O
(	O
s	pointer
>	O
smin	pointer
)	O
{	O
unsigned	O
int	O
dn	int
;	O
s	pointer
--	O
;	O
if	O
(	O
*	O
s	pointer
>=	O
0x80	int
)	O
s	pointer
=	O
SLutf8_bskip_chars	function
(	O
smin	pointer
,	O
s	pointer
+	O
1	int
,	O
1	int
,	O
&	O
dn	int
,	O
0	int
)	O
;	O
}	O
return	O
s	pointer
;	O
}	O
unsigned	O
int	O
SLutf8_strlen	function
(	O
SLuchar_Type	char
*	O
s	pointer
,	O
int	O
ignore_combining	int
)	O
{	O
unsigned	O
int	O
count	int
,	O
len	int
;	O
if	O
(	O
s	pointer
==	O
NULL	O
)	O
return	O
0	int
;	O
len	int
=	O
strlen	function
(	O
(	O
char	O
*	O
)	O
s	pointer
)	O
;	O
(	O
void	O
)	O
SLutf8_skip_chars	function
(	O
s	pointer
,	O
s	pointer
+	O
len	int
,	O
len	int
,	O
&	O
count	int
,	O
ignore_combining	int
)	O
;	O
return	O
count	int
;	O
}	O
unsigned	O
char	O
*	O
SLutf8_decode	function
(	O
unsigned	O
char	O
*	O
u	pointer
,	O
unsigned	O
char	O
*	O
umax	pointer
,	O
SLwchar_Type	int
*	O
wp	pointer
,	O
unsigned	O
int	O
*	O
nconsumedp	pointer
)	O
{	O
unsigned	O
int	O
len	int
;	O
unsigned	O
char	O
ch	int
;	O
SLwchar_Type	int
w	pointer
;	O
if	O
(	O
u	pointer
>=	O
umax	pointer
)	O
{	O
*	O
wp	pointer
=	O
0	int
;	O
if	O
(	O
nconsumedp	pointer
!=	O
NULL	O
)	O
*	O
nconsumedp	pointer
=	O
0	int
;	O
return	O
NULL	O
;	O
}	O
*	O
wp	pointer
=	O
ch	int
=	O
*	O
u	pointer
;	O
if	O
(	O
ch	int
<	O
0x80	int
)	O
{	O
if	O
(	O
nconsumedp	pointer
!=	O
NULL	O
)	O
*	O
nconsumedp	pointer
=	O
1	int
;	O
return	O
u	pointer
+	O
1	int
;	O
}	O
len	int
=	O
Len_Map	array
[	O
ch	int
]	O
;	O
if	O
(	O
len	int
<	O
2	int
)	O
{	O
if	O
(	O
nconsumedp	pointer
!=	O
NULL	O
)	O
*	O
nconsumedp	pointer
=	O
1	int
;	O
return	O
NULL	O
;	O
}	O
if	O
(	O
u	pointer
+	O
len	int
>	O
umax	pointer
)	O
{	O
if	O
(	O
nconsumedp	pointer
!=	O
NULL	O
)	O
*	O
nconsumedp	pointer
=	O
1	int
;	O
return	O
NULL	O
;	O
}	O
if	O
(	O
is_invalid_or_overlong_utf8	function
(	O
u	pointer
,	O
len	int
)	O
)	O
{	O
if	O
(	O
nconsumedp	pointer
!=	O
NULL	O
)	O
*	O
nconsumedp	pointer
=	O
1	int
;	O
return	O
NULL	O
;	O
}	O
if	O
(	O
nconsumedp	pointer
!=	O
NULL	O
)	O
*	O
nconsumedp	pointer
=	O
len	int
;	O
*	O
wp	pointer
=	O
w	pointer
=	O
fast_utf8_decode	function
(	O
u	pointer
,	O
len	int
)	O
;	O
if	O
(	O
IS_ILLEGAL_UNICODE	O
(	O
w	pointer
)	O
)	O
return	O
NULL	O
;	O
return	O
u	pointer
+	O
len	int
;	O
}	O
SLuchar_Type	char
*	O
SLutf8_encode	function
(	O
SLwchar_Type	int
w	pointer
,	O
SLuchar_Type	char
*	O
u	pointer
,	O
unsigned	O
int	O
ulen	int
)	O
{	O
SLuchar_Type	char
*	O
umax	pointer
=	O
u	pointer
+	O
ulen	int
;	O
if	O
(	O
w	pointer
<=	O
0x7F	int
)	O
{	O
if	O
(	O
u	pointer
>=	O
umax	pointer
)	O
return	O
NULL	O
;	O
*	O
u	pointer
++	O
=	O
(	O
unsigned	O
char	O
)	O
w	pointer
;	O
return	O
u	pointer
;	O
}	O
if	O
(	O
w	pointer
<=	O
0x7FF	int
)	O
{	O
if	O
(	O
(	O
u	pointer
+	O
1	int
)	O
>=	O
umax	pointer
)	O
return	O
NULL	O
;	O
*	O
u	pointer
++	O
=	O
(	O
w	pointer
>>	O
6	int
)	O
|	O
0xC0	int
;	O
*	O
u	pointer
++	O
=	O
(	O
w	pointer
&	O
0x3F	int
)	O
|	O
0x80	int
;	O
return	O
u	pointer
;	O
}	O
if	O
(	O
w	pointer
<=	O
0xFFFF	int
)	O
{	O
if	O
(	O
u	pointer
+	O
2	int
>=	O
umax	pointer
)	O
return	O
NULL	O
;	O
*	O
u	pointer
++	O
=	O
(	O
w	pointer
>>	O
12	int
)	O
|	O
0xE0	int
;	O
goto	O
finish_2	O
;	O
}	O
if	O
(	O
w	pointer
<=	O
0x1FFFFF	int
)	O
{	O
if	O
(	O
u	pointer
+	O
3	int
>=	O
umax	pointer
)	O
return	O
NULL	O
;	O
*	O
u	pointer
++	O
=	O
(	O
w	pointer
>>	O
18	int
)	O
|	O
0xF0	int
;	O
goto	O
finish_3	O
;	O
}	O
if	O
(	O
w	pointer
<=	O
0x3FFFFFF	int
)	O
{	O
if	O
(	O
u	pointer
+	O
4	int
>=	O
umax	pointer
)	O
return	O
NULL	O
;	O
*	O
u	pointer
++	O
=	O
(	O
w	pointer
>>	O
24	int
)	O
|	O
0xF8	int
;	O
goto	O
finish_4	O
;	O
}	O
if	O
(	O
w	pointer
<=	O
0x7FFFFFFF	int
)	O
{	O
if	O
(	O
u	pointer
+	O
5	int
>=	O
umax	pointer
)	O
return	O
NULL	O
;	O
*	O
u	pointer
++	O
=	O
(	O
w	pointer
>>	O
30	int
)	O
|	O
0xFC	int
;	O
goto	O
finish_5	O
;	O
}	O
return	O
NULL	O
;	O
finish_5	O
:	O
*	O
u	pointer
++	O
=	O
(	O
(	O
w	pointer
>>	O
24	int
)	O
&	O
0x3F	int
)	O
|	O
0x80	int
;	O
finish_4	O
:	O
*	O
u	pointer
++	O
=	O
(	O
(	O
w	pointer
>>	O
18	int
)	O
&	O
0x3F	int
)	O
|	O
0x80	int
;	O
finish_3	O
:	O
*	O
u	pointer
++	O
=	O
(	O
(	O
w	pointer
>>	O
12	int
)	O
&	O
0x3F	int
)	O
|	O
0x80	int
;	O
finish_2	O
:	O
*	O
u	pointer
++	O
=	O
(	O
(	O
w	pointer
>>	O
6	int
)	O
&	O
0x3F	int
)	O
|	O
0x80	int
;	O
*	O
u	pointer
++	O
=	O
(	O
w	pointer
&	O
0x3F	int
)	O
|	O
0x80	int
;	O
return	O
u	pointer
;	O
}	O
SLuchar_Type	char
*	O
SLutf8_encode_null_terminate	function
(	O
SLwchar_Type	int
w	pointer
,	O
SLuchar_Type	char
*	O
u	pointer
)	O
{	O
SLuchar_Type	char
*	O
p	pointer
;	O
p	pointer
=	O
SLutf8_encode	function
(	O
w	pointer
,	O
u	pointer
,	O
SLUTF8_MAX_MBLEN	int
)	O
;	O
if	O
(	O
p	pointer
!=	O
NULL	O
)	O
*	O
p	pointer
=	O
0	int
;	O
return	O
p	pointer
;	O
}	O
static	O
SLuchar_Type	char
*	O
xform_utf8	function
(	O
SLuchar_Type	char
*	O
u	pointer
,	O
SLuchar_Type	char
*	O
umax	pointer
,	O
SLwchar_Type	int
(	O
*	O
fun	pointer
)	O
(	O
SLwchar_Type	int
)	O
)	O
{	O
SLuchar_Type	char
*	O
buf	pointer
,	O
*	O
p	pointer
;	O
unsigned	O
int	O
malloced_len	int
,	O
len	int
;	O
if	O
(	O
umax	pointer
<	O
u	pointer
)	O
return	O
NULL	O
;	O
len	int
=	O
0	int
;	O
p	pointer
=	O
buf	pointer
=	O
NULL	O
;	O
malloced_len	int
=	O
0	int
;	O
while	O
(	O
1	int
)	O
{	O
SLwchar_Type	int
w	pointer
;	O
SLuchar_Type	char
*	O
u1	pointer
;	O
unsigned	O
int	O
nconsumed	int
;	O
if	O
(	O
malloced_len	int
<=	O
len	int
+	O
SLUTF8_MAX_MBLEN	int
)	O
{	O
SLuchar_Type	char
*	O
newbuf	pointer
;	O
malloced_len	int
+=	O
1	int
+	O
(	O
umax	pointer
-	O
u	pointer
)	O
+	O
SLUTF8_MAX_MBLEN	int
;	O
newbuf	pointer
=	O
(	O
SLuchar_Type	char
*	O
)	O
SLrealloc	O
(	O
(	O
char	O
*	O
)	O
buf	pointer
,	O
malloced_len	int
)	O
;	O
if	O
(	O
newbuf	pointer
==	O
NULL	O
)	O
{	O
SLfree	O
(	O
(	O
char	O
*	O
)	O
buf	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
buf	pointer
=	O
newbuf	pointer
;	O
p	pointer
=	O
buf	pointer
+	O
len	int
;	O
}	O
if	O
(	O
u	pointer
>=	O
umax	pointer
)	O
{	O
*	O
p	pointer
=	O
0	int
;	O
p	pointer
=	O
(	O
SLuchar_Type	char
*	O
)	O
SLang_create_nslstring	function
(	O
(	O
char	O
*	O
)	O
buf	pointer
,	O
len	int
)	O
;	O
SLfree	O
(	O
(	O
char	O
*	O
)	O
buf	pointer
)	O
;	O
return	O
p	pointer
;	O
}	O
if	O
(	O
NULL	O
==	O
(	O
u1	pointer
=	O
SLutf8_decode	function
(	O
u	pointer
,	O
umax	pointer
,	O
&	O
w	pointer
,	O
&	O
nconsumed	int
)	O
)	O
)	O
{	O
memcpy	function
(	O
(	O
char	O
*	O
)	O
p	pointer
,	O
u	pointer
,	O
nconsumed	int
)	O
;	O
p	pointer
+=	O
nconsumed	int
;	O
len	int
+=	O
nconsumed	int
;	O
u1	pointer
=	O
u	pointer
+	O
nconsumed	int
;	O
}	O
else	O
{	O
SLuchar_Type	char
*	O
p1	pointer
;	O
p1	pointer
=	O
SLutf8_encode	function
(	O
(	O
*	O
fun	pointer
)	O
(	O
w	pointer
)	O
,	O
p	pointer
,	O
malloced_len	int
)	O
;	O
if	O
(	O
p1	pointer
==	O
NULL	O
)	O
{	O
SLfree	O
(	O
(	O
char	O
*	O
)	O
buf	pointer
)	O
;	O
SLang_verror	function
(	O
SL_INTERNAL_ERROR	O
,	O
"SLutf8_encode returned NULL"	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
len	int
+=	O
p1	pointer
-	O
p	pointer
;	O
p	pointer
=	O
p1	pointer
;	O
}	O
u	pointer
=	O
u1	pointer
;	O
}	O
}	O
SLuchar_Type	char
*	O
SLutf8_strup	function
(	O
SLuchar_Type	char
*	O
u	pointer
,	O
SLuchar_Type	char
*	O
umax	pointer
)	O
{	O
return	O
xform_utf8	function
(	O
u	pointer
,	O
umax	pointer
,	O
SLwchar_toupper	function
)	O
;	O
}	O
SLuchar_Type	char
*	O
SLutf8_strlo	function
(	O
SLuchar_Type	char
*	O
u	pointer
,	O
SLuchar_Type	char
*	O
umax	pointer
)	O
{	O
return	O
xform_utf8	function
(	O
u	pointer
,	O
umax	pointer
,	O
SLwchar_tolower	function
)	O
;	O
}	O
int	O
SLutf8_compare	function
(	O
SLuchar_Type	char
*	O
a	pointer
,	O
SLuchar_Type	char
*	O
amax	pointer
,	O
SLuchar_Type	char
*	O
b	pointer
,	O
SLuchar_Type	char
*	O
bmax	pointer
,	O
unsigned	O
int	O
nchars	int
,	O
int	O
cs	short
)	O
{	O
while	O
(	O
nchars	int
&&	O
(	O
a	pointer
<	O
amax	pointer
)	O
&&	O
(	O
b	pointer
<	O
bmax	pointer
)	O
)	O
{	O
SLwchar_Type	int
cha	int
,	O
chb	int
;	O
unsigned	O
int	O
na	int
,	O
nb	int
;	O
int	O
aok	int
,	O
bok	int
;	O
if	O
(	O
*	O
a	pointer
<	O
0x80	int
)	O
{	O
cha	int
=	O
(	O
SLwchar_Type	int
)	O
*	O
a	pointer
++	O
;	O
aok	int
=	O
1	int
;	O
}	O
else	O
{	O
aok	int
=	O
(	O
NULL	O
!=	O
SLutf8_decode	function
(	O
a	pointer
,	O
amax	pointer
,	O
&	O
cha	int
,	O
&	O
na	int
)	O
)	O
;	O
a	pointer
+=	O
na	int
;	O
}	O
if	O
(	O
*	O
b	pointer
<	O
0x80	int
)	O
{	O
chb	int
=	O
(	O
SLwchar_Type	int
)	O
*	O
b	pointer
++	O
;	O
bok	int
=	O
1	int
;	O
}	O
else	O
{	O
bok	int
=	O
(	O
NULL	O
!=	O
SLutf8_decode	function
(	O
b	pointer
,	O
bmax	pointer
,	O
&	O
chb	int
,	O
&	O
nb	int
)	O
)	O
;	O
b	pointer
+=	O
nb	int
;	O
}	O
nchars	int
--	O
;	O
if	O
(	O
aok	int
&&	O
bok	int
)	O
{	O
if	O
(	O
cs	short
==	O
0	int
)	O
{	O
cha	int
=	O
SLwchar_toupper	function
(	O
cha	int
)	O
;	O
chb	int
=	O
SLwchar_toupper	function
(	O
chb	int
)	O
;	O
}	O
}	O
else	O
if	O
(	O
aok	int
)	O
return	O
1	int
;	O
else	O
if	O
(	O
bok	int
)	O
return	O
-	O
1	int
;	O
if	O
(	O
cha	int
==	O
chb	int
)	O
continue	O
;	O
if	O
(	O
cha	int
>	O
chb	int
)	O
return	O
1	int
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
nchars	int
==	O
0	int
)	O
return	O
0	int
;	O
if	O
(	O
(	O
a	pointer
>=	O
amax	pointer
)	O
&&	O
(	O
b	pointer
>=	O
bmax	pointer
)	O
)	O
return	O
0	int
;	O
if	O
(	O
b	pointer
>=	O
bmax	pointer
)	O
return	O
1	int
;	O
return	O
-	O
1	int
;	O
}	O
SLstr_Type	char
*	O
SLutf8_subst_wchar	function
(	O
SLuchar_Type	char
*	O
u	pointer
,	O
SLuchar_Type	char
*	O
umax	pointer
,	O
SLwchar_Type	int
wch	int
,	O
unsigned	O
int	O
pos	int
,	O
int	O
ignore_combining	int
)	O
{	O
SLuchar_Type	char
*	O
a	pointer
,	O
*	O
a1	pointer
,	O
*	O
b	pointer
;	O
unsigned	O
int	O
dpos	int
;	O
SLuchar_Type	char
buf	pointer
[	O
SLUTF8_MAX_MBLEN	int
+	O
1	int
]	O
;	O
SLstr_Type	char
*	O
c	int
;	O
unsigned	O
int	O
n1	int
,	O
n2	int
,	O
n3	int
,	O
len	int
;	O
a	pointer
=	O
SLutf8_skip_chars	function
(	O
u	pointer
,	O
umax	pointer
,	O
pos	int
,	O
&	O
dpos	int
,	O
ignore_combining	int
)	O
;	O
if	O
(	O
(	O
dpos	int
!=	O
pos	int
)	O
||	O
(	O
a	pointer
==	O
umax	pointer
)	O
)	O
{	O
SLang_verror	function
(	O
SL_INDEX_ERROR	O
,	O
"Specified character position is invalid for string"	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
a1	pointer
=	O
SLutf8_skip_chars	function
(	O
a	pointer
,	O
umax	pointer
,	O
1	int
,	O
NULL	O
,	O
ignore_combining	int
)	O
;	O
b	pointer
=	O
SLutf8_encode	function
(	O
wch	int
,	O
buf	pointer
,	O
SLUTF8_MAX_MBLEN	int
)	O
;	O
if	O
(	O
b	pointer
==	O
NULL	O
)	O
{	O
SLang_verror	function
(	O
SL_UNICODE_ERROR	O
,	O
"Unable to encode wchar 0x%lX"	pointer
,	O
(	O
unsigned	O
long	O
)	O
wch	int
)	O
;	O
return	O
NULL	O
;	O
}	O
n1	int
=	O
(	O
a	pointer
-	O
u	pointer
)	O
;	O
n2	int
=	O
(	O
b	pointer
-	O
buf	pointer
)	O
;	O
n3	int
=	O
(	O
umax	pointer
-	O
a1	pointer
)	O
;	O
len	int
=	O
n1	int
+	O
n2	int
+	O
n3	int
;	O
c	int
=	O
_pSLallocate_slstring	function
(	O
len	int
)	O
;	O
if	O
(	O
c	int
==	O
NULL	O
)	O
return	O
NULL	O
;	O
memcpy	function
(	O
c	int
,	O
(	O
char	O
*	O
)	O
u	pointer
,	O
n1	int
)	O
;	O
memcpy	function
(	O
c	int
+	O
n1	int
,	O
(	O
char	O
*	O
)	O
buf	pointer
,	O
n2	int
)	O
;	O
memcpy	function
(	O
c	int
+	O
n1	int
+	O
n2	int
,	O
(	O
char	O
*	O
)	O
a1	pointer
,	O
n3	int
)	O
;	O
c	int
[	O
len	int
]	O
=	O
0	int
;	O
return	O
_pSLcreate_via_alloced_slstring	function
(	O
c	int
,	O
len	int
)	O
;	O
}	O
SLuchar_Type	char
*	O
SLutf8_extract_utf8_char	function
(	O
SLuchar_Type	char
*	O
u	pointer
,	O
SLuchar_Type	char
*	O
umax	pointer
,	O
SLuchar_Type	char
*	O
utf8	pointer
)	O
{	O
SLuchar_Type	char
*	O
u1	pointer
;	O
u1	pointer
=	O
SLutf8_skip_char	function
(	O
u	pointer
,	O
umax	pointer
)	O
;	O
memcpy	function
(	O
(	O
char	O
*	O
)	O
utf8	pointer
,	O
u	pointer
,	O
u1	pointer
-	O
u	pointer
)	O
;	O
utf8	pointer
[	O
u1	pointer
-	O
u	pointer
]	O
=	O
0	int
;	O
return	O
u1	pointer
;	O
}	O
SLuchar_Type	char
*	O
_pSLinterp_decode_wchar	function
(	O
SLuchar_Type	char
*	O
u	pointer
,	O
SLuchar_Type	char
*	O
umax	pointer
,	O
SLwchar_Type	int
*	O
chp	pointer
)	O
{	O
if	O
(	O
_pSLinterp_UTF8_Mode	int
==	O
0	int
)	O
{	O
if	O
(	O
u	pointer
<	O
umax	pointer
)	O
*	O
chp	pointer
=	O
(	O
SLwchar_Type	int
)	O
*	O
u	pointer
++	O
;	O
return	O
u	pointer
;	O
}	O
if	O
(	O
NULL	O
==	O
(	O
u	pointer
=	O
SLutf8_decode	function
(	O
u	pointer
,	O
umax	pointer
,	O
chp	pointer
,	O
NULL	O
)	O
)	O
)	O
SLang_verror	function
(	O
SL_INVALID_UTF8	O
,	O
"Invalid UTF-8 encoded string"	pointer
)	O
;	O
return	O
u	pointer
;	O
}	O
SLuchar_Type	char
*	O
_pSLinterp_encode_wchar	function
(	O
SLwchar_Type	int
wch	int
,	O
SLuchar_Type	char
*	O
u	pointer
,	O
unsigned	O
int	O
*	O
encoded_len	pointer
)	O
{	O
SLuchar_Type	char
*	O
u1	pointer
;	O
if	O
(	O
_pSLinterp_UTF8_Mode	int
==	O
0	int
)	O
{	O
*	O
encoded_len	pointer
=	O
1	int
;	O
*	O
u	pointer
++	O
=	O
(	O
SLuchar_Type	char
)	O
wch	int
;	O
*	O
u	pointer
++	O
=	O
0	int
;	O
return	O
u	pointer
;	O
}	O
if	O
(	O
NULL	O
==	O
(	O
u1	pointer
=	O
SLutf8_encode_null_terminate	function
(	O
wch	int
,	O
u	pointer
)	O
)	O
)	O
{	O
SLang_verror	function
(	O
SL_UNICODE_ERROR	O
,	O
"Unable to encode character 0x%lX"	pointer
,	O
(	O
unsigned	O
long	O
)	O
wch	int
)	O
;	O
return	O
NULL	O
;	O
}	O
*	O
encoded_len	pointer
=	O
(	O
unsigned	O
int	O
)	O
(	O
u1	pointer
-	O
u	pointer
)	O
;	O
return	O
u1	pointer
;	O
}	O
