static	O
int	O
capa_comp	function
(	O
const	O
void	O
*	O
item	pointer
,	O
const	O
void	O
*	O
value	pointer
)	O
{	O
const	O
char	O
*	O
capa	pointer
=	O
item	pointer
;	O
const	O
char	O
*	O
needle	pointer
=	O
value	pointer
;	O
for	O
(	O
;	O
*	O
needle	pointer
;	O
capa	pointer
++	O
,	O
needle	pointer
++	O
)	O
{	O
if	O
(	O
!	O
*	O
capa	pointer
)	O
return	O
1	int
;	O
if	O
(	O
mu_tolower	O
(	O
*	O
capa	pointer
)	O
!=	O
mu_tolower	O
(	O
*	O
needle	pointer
)	O
)	O
return	O
1	int
;	O
}	O
return	O
!	O
(	O
*	O
capa	pointer
==	O
0	int
||	O
*	O
capa	pointer
==	O
'='	O
)	O
;	O
}	O
static	O
int	O
_map_capa	function
(	O
void	O
*	O
*	O
itmv	pointer
,	O
size_t	long
itmc	long
,	O
void	O
*	O
call_data	pointer
)	O
{	O
int	O
*	O
n	long
=	O
call_data	pointer
;	O
struct	O
imap_list_element	struct
*	O
elt	pointer
=	O
itmv	pointer
[	O
0	int
]	O
;	O
if	O
(	O
elt	pointer
->	O
type	int
!=	O
imap_eltype_string	int
)	O
return	O
MU_LIST_MAP_STOP	int
;	O
if	O
(	O
*	O
n	long
==	O
0	int
)	O
{	O
*	O
n	long
=	O
1	int
;	O
return	O
MU_LIST_MAP_SKIP	int
;	O
}	O
itmv	pointer
[	O
0	int
]	O
=	O
elt	pointer
->	O
v	union
.	O
string	pointer
;	O
elt	pointer
->	O
v	union
.	O
string	pointer
=	O
NULL	O
;	O
return	O
MU_LIST_MAP_OK	int
;	O
}	O
static	O
void	O
_capability_response_action	function
(	O
mu_imap_t	pointer
imap	pointer
,	O
mu_list_t	pointer
response	enum
,	O
void	O
*	O
data	pointer
)	O
{	O
struct	O
imap_list_element	struct
*	O
elt	pointer
=	O
_mu_imap_list_at	function
(	O
response	enum
,	O
0	int
)	O
;	O
if	O
(	O
elt	pointer
&&	O
_mu_imap_list_element_is_string	function
(	O
elt	pointer
,	O
"CAPABILITY"	pointer
)	O
)	O
{	O
int	O
n	long
=	O
0	int
;	O
mu_list_map	function
(	O
response	enum
,	O
_map_capa	function
,	O
&	O
n	long
,	O
1	int
,	O
&	O
imap	pointer
->	O
capa	pointer
)	O
;	O
}	O
}	O
int	O
mu_imap_capability	function
(	O
mu_imap_t	pointer
imap	pointer
,	O
int	O
reread	int
,	O
mu_iterator_t	pointer
*	O
piter	pointer
)	O
{	O
int	O
status	int
;	O
if	O
(	O
imap	pointer
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
if	O
(	O
!	O
imap	pointer
->	O
io	pointer
)	O
return	O
MU_ERR_NO_TRANSPORT	O
;	O
if	O
(	O
imap	pointer
->	O
session_state	enum
==	O
MU_IMAP_SESSION_INIT	int
||	O
imap	pointer
->	O
client_state	enum
!=	O
MU_IMAP_CLIENT_READY	int
)	O
return	O
MU_ERR_SEQ	O
;	O
if	O
(	O
imap	pointer
->	O
capa	pointer
)	O
{	O
if	O
(	O
!	O
reread	int
)	O
{	O
if	O
(	O
!	O
piter	pointer
)	O
return	O
0	int
;	O
return	O
mu_list_get_iterator	function
(	O
imap	pointer
->	O
capa	pointer
,	O
piter	pointer
)	O
;	O
}	O
mu_list_destroy	function
(	O
&	O
imap	pointer
->	O
capa	pointer
)	O
;	O
}	O
switch	O
(	O
imap	pointer
->	O
client_state	enum
)	O
{	O
case	O
MU_IMAP_CLIENT_READY	int
:	O
status	int
=	O
_mu_imap_tag_next	function
(	O
imap	pointer
)	O
;	O
MU_IMAP_CHECK_EAGAIN	O
(	O
imap	pointer
,	O
status	int
)	O
;	O
status	int
=	O
mu_imapio_send_command	function
(	O
imap	pointer
->	O
io	pointer
,	O
imap	pointer
->	O
tag_str	pointer
,	O
NULL	O
,	O
"CAPABILITY"	pointer
,	O
NULL	O
)	O
;	O
MU_IMAP_CHECK_EAGAIN	O
(	O
imap	pointer
,	O
status	int
)	O
;	O
MU_IMAP_FCLR	O
(	O
imap	pointer
,	O
MU_IMAP_RESP	int
)	O
;	O
imap	pointer
->	O
client_state	enum
=	O
MU_IMAP_CLIENT_CAPABILITY_RX	int
;	O
case	O
MU_IMAP_CLIENT_CAPABILITY_RX	int
:	O
status	int
=	O
_mu_imap_response	function
(	O
imap	pointer
,	O
_capability_response_action	function
,	O
NULL	O
)	O
;	O
imap	pointer
->	O
client_state	enum
=	O
MU_IMAP_CLIENT_READY	int
;	O
MU_IMAP_CHECK_EAGAIN	O
(	O
imap	pointer
,	O
status	int
)	O
;	O
if	O
(	O
imap	pointer
->	O
response	enum
!=	O
MU_IMAP_OK	int
)	O
return	O
MU_ERR_REPLY	O
;	O
else	O
{	O
mu_list_set_comparator	function
(	O
imap	pointer
->	O
capa	pointer
,	O
capa_comp	function
)	O
;	O
mu_list_set_destroy_item	function
(	O
imap	pointer
->	O
capa	pointer
,	O
mu_list_free_item	function
)	O
;	O
if	O
(	O
piter	pointer
)	O
status	int
=	O
mu_list_get_iterator	function
(	O
imap	pointer
->	O
capa	pointer
,	O
piter	pointer
)	O
;	O
else	O
status	int
=	O
0	int
;	O
}	O
break	O
;	O
case	O
MU_IMAP_CLIENT_ERROR	int
:	O
status	int
=	O
ECANCELED	int
;	O
break	O
;	O
default	O
:	O
status	int
=	O
EINPROGRESS	int
;	O
}	O
return	O
status	int
;	O
}	O
