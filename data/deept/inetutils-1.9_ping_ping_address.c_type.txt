static	O
int	O
recv_address	function
(	O
int	O
code	int
,	O
void	O
*	O
closure	pointer
,	O
struct	O
sockaddr_in	struct
*	O
dest	pointer
,	O
struct	O
sockaddr_in	struct
*	O
from	pointer
,	O
struct	O
ip	struct
*	O
ip	struct
,	O
icmphdr_t	struct
*	O
icmp	pointer
,	O
int	O
datalen	int
)	O
;	O
static	O
void	O
print_address	function
(	O
int	O
dupflag	int
,	O
void	O
*	O
closure	pointer
,	O
struct	O
sockaddr_in	struct
*	O
dest	pointer
,	O
struct	O
sockaddr_in	struct
*	O
from	pointer
,	O
struct	O
ip	struct
*	O
ip	struct
,	O
icmphdr_t	struct
*	O
icmp	pointer
,	O
int	O
datalen	int
)	O
;	O
static	O
void	O
print_address	function
(	O
int	O
dupflag	int
,	O
void	O
*	O
closure	pointer
,	O
struct	O
sockaddr_in	struct
*	O
dest	pointer
,	O
struct	O
sockaddr_in	struct
*	O
from	pointer
,	O
struct	O
ip	struct
*	O
ip	struct
,	O
icmphdr_t	struct
*	O
icmp	pointer
,	O
int	O
datalen	int
)	O
;	O
static	O
int	O
address_finish	function
(	O
void	O
)	O
;	O
int	O
ping_address	union
(	O
char	O
*	O
hostname	pointer
)	O
{	O
ping_set_type	function
(	O
ping	pointer
,	O
ICMP_ADDRESS	int
)	O
;	O
ping_set_event_handler	function
(	O
ping	pointer
,	O
recv_address	function
,	O
NULL	O
)	O
;	O
ping_set_packetsize	function
(	O
ping	pointer
,	O
12	int
)	O
;	O
ping_set_count	function
(	O
ping	pointer
,	O
1	int
)	O
;	O
if	O
(	O
ping_set_dest	function
(	O
ping	pointer
,	O
hostname	pointer
)	O
)	O
error	function
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
"unknown host"	pointer
)	O
;	O
printf	function
(	O
"PING %s (%s): sending address mask request\n"	pointer
,	O
ping	pointer
->	O
ping_hostname	pointer
,	O
inet_ntoa	function
(	O
ping	pointer
->	O
ping_dest	union
.	O
ping_sockaddr	struct
.	O
sin_addr	struct
)	O
)	O
;	O
return	O
ping_run	function
(	O
ping	pointer
,	O
address_finish	function
)	O
;	O
}	O
int	O
recv_address	function
(	O
int	O
code	int
,	O
void	O
*	O
closure	pointer
,	O
struct	O
sockaddr_in	struct
*	O
dest	pointer
,	O
struct	O
sockaddr_in	struct
*	O
from	pointer
,	O
struct	O
ip	struct
*	O
ip	struct
,	O
icmphdr_t	struct
*	O
icmp	pointer
,	O
int	O
datalen	int
)	O
{	O
switch	O
(	O
code	int
)	O
{	O
case	O
PEV_RESPONSE	int
:	O
case	O
PEV_DUPLICATE	int
:	O
print_address	function
(	O
code	int
==	O
PEV_DUPLICATE	int
,	O
closure	pointer
,	O
dest	pointer
,	O
from	pointer
,	O
ip	struct
,	O
icmp	pointer
,	O
datalen	int
)	O
;	O
break	O
;	O
case	O
PEV_NOECHO	int
:	O
;	O
print_icmp_header	function
(	O
from	pointer
,	O
ip	struct
,	O
icmp	pointer
,	O
datalen	int
)	O
;	O
}	O
return	O
0	int
;	O
}	O
void	O
print_address	function
(	O
int	O
dupflag	int
,	O
void	O
*	O
closure	pointer
,	O
struct	O
sockaddr_in	struct
*	O
dest	pointer
,	O
struct	O
sockaddr_in	struct
*	O
from	pointer
,	O
struct	O
ip	struct
*	O
ip	struct
,	O
icmphdr_t	struct
*	O
icmp	pointer
,	O
int	O
datalen	int
)	O
{	O
struct	O
in_addr	struct
addr	pointer
;	O
printf	function
(	O
"%d bytes from %s: icmp_seq=%u"	pointer
,	O
datalen	int
,	O
inet_ntoa	function
(	O
*	O
(	O
struct	O
in_addr	struct
*	O
)	O
&	O
from	pointer
->	O
sin_addr	struct
.	O
s_addr	int
)	O
,	O
icmp	pointer
->	O
icmp_seq	O
)	O
;	O
if	O
(	O
dupflag	int
)	O
printf	function
(	O
" (DUP!)"	pointer
)	O
;	O
addr	pointer
.	O
s_addr	int
=	O
icmp	pointer
->	O
icmp_mask	O
;	O
printf	function
(	O
"icmp_mask = %s"	pointer
,	O
inet_ntoa	function
(	O
addr	pointer
)	O
)	O
;	O
printf	function
(	O
"\n"	pointer
)	O
;	O
return	O
;	O
}	O
int	O
address_finish	function
(	O
void	O
)	O
{	O
return	O
0	int
;	O
}	O
