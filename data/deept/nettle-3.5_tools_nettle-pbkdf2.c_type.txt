static	O
void	O
usage	function
(	O
FILE	struct
*	O
f	pointer
)	O
{	O
fprintf	function
(	O
f	pointer
,	O
"Usage: nettle-pbkdf2 [OPTIONS] SALT\n"	pointer
"Options:\n"	pointer
"  --help                 Show this help.\n"	pointer
"  -V, --version          Show version information.\n"	pointer
"  -i, --iterations=COUNT Desired iteration count (default %d).\n"	pointer
"  -l, --length=LENGTH    Desired output length (octets, default %d)\n"	pointer
"  --raw                  Raw binary output.\n"	pointer
"  --hex-salt             Use hex encoding for the salt.\n"	pointer
,	O
DEFAULT_ITERATIONS	int
,	O
DEFAULT_LENGTH	int
)	O
;	O
}	O
int	O
main	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
unsigned	O
iterations	int
=	O
DEFAULT_ITERATIONS	int
;	O
unsigned	O
output_length	int
=	O
DEFAULT_LENGTH	int
;	O
char	O
password	array
[	O
MAX_PASSWORD	int
]	O
;	O
size_t	long
password_length	long
;	O
uint8_t	char
*	O
output	pointer
;	O
size_t	long
salt_length	long
;	O
char	O
*	O
salt	pointer
;	O
int	O
raw	int
=	O
0	int
;	O
int	O
hex_salt	int
=	O
0	int
;	O
int	O
c	int
;	O
enum	O
{	O
OPT_HELP	int
=	O
0x300	int
,	O
OPT_RAW	int
,	O
OPT_HEX_SALT	int
}	O
;	O
static	O
const	O
struct	O
option	struct
options	array
[	O
]	O
=	O
{	O
{	O
"help"	pointer
,	O
no_argument	int
,	O
NULL	O
,	O
OPT_HELP	int
}	O
,	O
{	O
"version"	pointer
,	O
no_argument	int
,	O
NULL	O
,	O
'V'	O
}	O
,	O
{	O
"length"	pointer
,	O
required_argument	int
,	O
NULL	O
,	O
'l'	O
}	O
,	O
{	O
"iterations"	pointer
,	O
required_argument	int
,	O
NULL	O
,	O
'i'	O
}	O
,	O
{	O
"raw"	pointer
,	O
no_argument	int
,	O
NULL	O
,	O
OPT_RAW	int
}	O
,	O
{	O
"hex-salt"	pointer
,	O
no_argument	int
,	O
NULL	O
,	O
OPT_HEX_SALT	int
}	O
,	O
{	O
NULL	O
,	O
0	int
,	O
NULL	O
,	O
0	int
}	O
}	O
;	O
while	O
(	O
(	O
c	int
=	O
getopt_long	function
(	O
argc	int
,	O
argv	pointer
,	O
"Vl:i:"	pointer
,	O
options	array
,	O
NULL	O
)	O
)	O
!=	O
-	O
1	int
)	O
switch	O
(	O
c	int
)	O
{	O
default	O
:	O
abort	function
(	O
)	O
;	O
case	O
'?'	O
:	O
usage	function
(	O
stderr	pointer
)	O
;	O
return	O
EXIT_FAILURE	int
;	O
case	O
OPT_HELP	int
:	O
usage	function
(	O
stdout	pointer
)	O
;	O
return	O
EXIT_SUCCESS	int
;	O
case	O
'V'	O
:	O
printf	function
(	O
"nettle-pbkdf2 ("	pointer
PACKAGE_STRING	pointer
")\n"	pointer
)	O
;	O
return	O
EXIT_SUCCESS	int
;	O
case	O
'l'	O
:	O
{	O
int	O
arg	int
;	O
arg	int
=	O
atoi	function
(	O
optarg	pointer
)	O
;	O
if	O
(	O
arg	int
<=	O
0	int
)	O
die	function
(	O
"Invalid length argument: `%s'\n"	pointer
,	O
optarg	pointer
)	O
;	O
output_length	int
=	O
arg	int
;	O
}	O
break	O
;	O
case	O
'i'	O
:	O
{	O
int	O
arg	int
;	O
arg	int
=	O
atoi	function
(	O
optarg	pointer
)	O
;	O
if	O
(	O
arg	int
<=	O
0	int
)	O
die	function
(	O
"Invalid iteration count: `%s'\n"	pointer
,	O
optarg	pointer
)	O
;	O
iterations	int
=	O
arg	int
;	O
}	O
break	O
;	O
case	O
OPT_RAW	int
:	O
raw	int
=	O
1	int
;	O
break	O
;	O
case	O
OPT_HEX_SALT	int
:	O
hex_salt	int
=	O
1	int
;	O
break	O
;	O
}	O
argv	pointer
+=	O
optind	int
;	O
argc	int
-=	O
optind	int
;	O
if	O
(	O
argc	int
!=	O
1	int
)	O
{	O
usage	function
(	O
stderr	pointer
)	O
;	O
return	O
EXIT_FAILURE	int
;	O
}	O
salt	pointer
=	O
strdup	function
(	O
argv	pointer
[	O
0	int
]	O
)	O
;	O
if	O
(	O
!	O
salt	pointer
)	O
die	function
(	O
"strdup failed: Virtual memory exhausted.\n"	pointer
)	O
;	O
salt_length	long
=	O
strlen	function
(	O
argv	pointer
[	O
0	int
]	O
)	O
;	O
if	O
(	O
hex_salt	int
)	O
{	O
struct	O
base16_decode_ctx	struct
base16	struct
;	O
base16_decode_init	O
(	O
&	O
base16	struct
)	O
;	O
if	O
(	O
!	O
base16_decode_update	O
(	O
&	O
base16	struct
,	O
&	O
salt_length	long
,	O
(	O
uint8_t	char
*	O
)	O
salt	pointer
,	O
salt_length	long
,	O
salt	pointer
)	O
||	O
!	O
base16_decode_final	O
(	O
&	O
base16	struct
)	O
)	O
die	function
(	O
"Invalid salt (expecting hex encoding).\n"	pointer
)	O
;	O
}	O
password_length	long
=	O
fread	function
(	O
password	array
,	O
1	int
,	O
sizeof	O
(	O
password	array
)	O
,	O
stdin	pointer
)	O
;	O
if	O
(	O
password_length	long
==	O
sizeof	O
(	O
password	array
)	O
)	O
die	function
(	O
"Password input too long. Current limit is %d characters.\n"	pointer
,	O
(	O
int	O
)	O
sizeof	O
(	O
password	array
)	O
-	O
1	int
)	O
;	O
if	O
(	O
ferror	function
(	O
stdin	pointer
)	O
)	O
die	function
(	O
"Reading password input failed: %s.\n"	pointer
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
output	pointer
=	O
xalloc	function
(	O
output_length	int
)	O
;	O
pbkdf2_hmac_sha256	O
(	O
password_length	long
,	O
(	O
const	O
uint8_t	char
*	O
)	O
password	array
,	O
iterations	int
,	O
salt_length	long
,	O
(	O
const	O
uint8_t	char
*	O
)	O
salt	pointer
,	O
output_length	int
,	O
output	pointer
)	O
;	O
free	function
(	O
salt	pointer
)	O
;	O
if	O
(	O
raw	int
)	O
fwrite	function
(	O
output	pointer
,	O
output_length	int
,	O
1	int
,	O
stdout	pointer
)	O
;	O
else	O
{	O
unsigned	O
i	int
;	O
char	O
hex	array
[	O
BASE16_ENCODE_LENGTH	O
(	O
8	int
)	O
+	O
1	int
]	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
+	O
8	int
<	O
output_length	int
;	O
i	int
+=	O
8	int
)	O
{	O
base16_encode_update	O
(	O
hex	array
,	O
8	int
,	O
output	pointer
+	O
i	int
)	O
;	O
hex	array
[	O
BASE16_ENCODE_LENGTH	O
(	O
8	int
)	O
]	O
=	O
0	int
;	O
printf	function
(	O
"%s%c"	pointer
,	O
hex	array
,	O
i	int
%	O
64	int
==	O
56	int
?	O
'\n'	O
:	O
' '	O
)	O
;	O
}	O
base16_encode_update	O
(	O
hex	array
,	O
output_length	int
-	O
i	int
,	O
output	pointer
+	O
i	int
)	O
;	O
hex	array
[	O
BASE16_ENCODE_LENGTH	O
(	O
output_length	int
-	O
i	int
)	O
]	O
=	O
0	int
;	O
printf	function
(	O
"%s\n"	pointer
,	O
hex	array
)	O
;	O
}	O
free	function
(	O
output	pointer
)	O
;	O
if	O
(	O
fflush	function
(	O
stdout	pointer
)	O
!=	O
0	int
)	O
die	function
(	O
"Write failed: %s\n"	pointer
,	O
STRERROR	O
(	O
errno	O
)	O
)	O
;	O
return	O
EXIT_SUCCESS	int
;	O
}	O
