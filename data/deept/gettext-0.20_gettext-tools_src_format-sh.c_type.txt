struct	O
named_arg	struct
{	O
char	O
*	O
name	pointer
;	O
}	O
;	O
struct	O
spec	struct
{	O
unsigned	O
int	O
directives	int
;	O
unsigned	O
int	O
named_arg_count	int
;	O
unsigned	O
int	O
allocated	int
;	O
struct	O
named_arg	struct
*	O
named	pointer
;	O
}	O
;	O
static	O
int	O
named_arg_compare	function
(	O
const	O
void	O
*	O
p1	pointer
,	O
const	O
void	O
*	O
p2	pointer
)	O
{	O
return	O
strcmp	function
(	O
(	O
(	O
const	O
struct	O
named_arg	struct
*	O
)	O
p1	pointer
)	O
->	O
name	pointer
,	O
(	O
(	O
const	O
struct	O
named_arg	struct
*	O
)	O
p2	pointer
)	O
->	O
name	pointer
)	O
;	O
}	O
static	O
void	O
*	O
format_parse	function
(	O
const	O
char	O
*	O
format	pointer
,	O
bool	bool
translated	bool
,	O
char	O
*	O
fdi	pointer
,	O
char	O
*	O
*	O
invalid_reason	pointer
)	O
{	O
const	O
char	O
*	O
const	O
format_start	pointer
=	O
format	pointer
;	O
struct	O
spec	struct
spec	struct
;	O
struct	O
spec	struct
*	O
result	pointer
;	O
spec	struct
.	O
directives	int
=	O
0	int
;	O
spec	struct
.	O
named_arg_count	int
=	O
0	int
;	O
spec	struct
.	O
allocated	int
=	O
0	int
;	O
spec	struct
.	O
named	pointer
=	O
NULL	O
;	O
for	O
(	O
;	O
*	O
format	pointer
!=	O
'\0'	O
;	O
)	O
if	O
(	O
*	O
format	pointer
++	O
==	O
'$'	O
)	O
{	O
char	O
*	O
name	pointer
;	O
FDI_SET	O
(	O
format	pointer
-	O
1	int
,	O
FMTDIR_START	int
)	O
;	O
spec	struct
.	O
directives	int
++	O
;	O
if	O
(	O
*	O
format	pointer
==	O
'{'	O
)	O
{	O
const	O
char	O
*	O
name_start	pointer
;	O
const	O
char	O
*	O
name_end	pointer
;	O
size_t	long
n	long
;	O
name_start	pointer
=	O
++	O
format	pointer
;	O
for	O
(	O
;	O
*	O
format	pointer
!=	O
'\0'	O
;	O
format	pointer
++	O
)	O
{	O
if	O
(	O
*	O
format	pointer
==	O
'}'	O
)	O
break	O
;	O
if	O
(	O
!	O
c_isascii	function
(	O
*	O
format	pointer
)	O
)	O
{	O
*	O
invalid_reason	pointer
=	O
INVALID_NON_ASCII_VARIABLE	O
(	O
)	O
;	O
FDI_SET	O
(	O
format	pointer
,	O
FMTDIR_ERROR	int
)	O
;	O
goto	O
bad_format	O
;	O
}	O
if	O
(	O
format	pointer
>	O
name_start	pointer
&&	O
(	O
*	O
format	pointer
==	O
'-'	O
||	O
*	O
format	pointer
==	O
'='	O
||	O
*	O
format	pointer
==	O
'+'	O
||	O
*	O
format	pointer
==	O
'?'	O
||	O
*	O
format	pointer
==	O
':'	O
)	O
)	O
{	O
*	O
invalid_reason	pointer
=	O
INVALID_SHELL_SYNTAX	O
(	O
)	O
;	O
FDI_SET	O
(	O
format	pointer
,	O
FMTDIR_ERROR	int
)	O
;	O
goto	O
bad_format	O
;	O
}	O
if	O
(	O
!	O
(	O
c_isalnum	function
(	O
*	O
format	pointer
)	O
||	O
*	O
format	pointer
==	O
'_'	O
)	O
||	O
(	O
format	pointer
==	O
name_start	pointer
&&	O
c_isdigit	function
(	O
*	O
format	pointer
)	O
)	O
)	O
{	O
*	O
invalid_reason	pointer
=	O
INVALID_CONTEXT_DEPENDENT_VARIABLE	O
(	O
)	O
;	O
FDI_SET	O
(	O
format	pointer
,	O
FMTDIR_ERROR	int
)	O
;	O
goto	O
bad_format	O
;	O
}	O
}	O
if	O
(	O
*	O
format	pointer
==	O
'\0'	O
)	O
{	O
*	O
invalid_reason	pointer
=	O
INVALID_UNTERMINATED_DIRECTIVE	O
(	O
)	O
;	O
FDI_SET	O
(	O
format	pointer
-	O
1	int
,	O
FMTDIR_ERROR	int
)	O
;	O
goto	O
bad_format	O
;	O
}	O
name_end	pointer
=	O
format	pointer
++	O
;	O
n	long
=	O
name_end	pointer
-	O
name_start	pointer
;	O
if	O
(	O
n	long
==	O
0	int
)	O
{	O
*	O
invalid_reason	pointer
=	O
INVALID_EMPTY_VARIABLE	O
(	O
)	O
;	O
FDI_SET	O
(	O
format	pointer
-	O
1	int
,	O
FMTDIR_ERROR	int
)	O
;	O
goto	O
bad_format	O
;	O
}	O
name	pointer
=	O
XNMALLOC	O
(	O
n	long
+	O
1	int
,	O
char	O
)	O
;	O
memcpy	function
(	O
name	pointer
,	O
name_start	pointer
,	O
n	long
)	O
;	O
name	pointer
[	O
n	long
]	O
=	O
'\0'	O
;	O
}	O
else	O
if	O
(	O
c_isalpha	function
(	O
*	O
format	pointer
)	O
||	O
*	O
format	pointer
==	O
'_'	O
)	O
{	O
const	O
char	O
*	O
name_start	pointer
;	O
const	O
char	O
*	O
name_end	pointer
;	O
size_t	long
n	long
;	O
name_start	pointer
=	O
format	pointer
;	O
do	O
format	pointer
++	O
;	O
while	O
(	O
*	O
format	pointer
!=	O
'\0'	O
&&	O
(	O
c_isalnum	function
(	O
*	O
format	pointer
)	O
||	O
*	O
format	pointer
==	O
'_'	O
)	O
)	O
;	O
name_end	pointer
=	O
format	pointer
;	O
n	long
=	O
name_end	pointer
-	O
name_start	pointer
;	O
name	pointer
=	O
XNMALLOC	O
(	O
n	long
+	O
1	int
,	O
char	O
)	O
;	O
memcpy	function
(	O
name	pointer
,	O
name_start	pointer
,	O
n	long
)	O
;	O
name	pointer
[	O
n	long
]	O
=	O
'\0'	O
;	O
}	O
else	O
if	O
(	O
*	O
format	pointer
!=	O
'\0'	O
)	O
{	O
if	O
(	O
!	O
c_isascii	function
(	O
*	O
format	pointer
)	O
)	O
{	O
*	O
invalid_reason	pointer
=	O
INVALID_NON_ASCII_VARIABLE	O
(	O
)	O
;	O
FDI_SET	O
(	O
format	pointer
,	O
FMTDIR_ERROR	int
)	O
;	O
goto	O
bad_format	O
;	O
}	O
else	O
{	O
*	O
invalid_reason	pointer
=	O
INVALID_CONTEXT_DEPENDENT_VARIABLE	O
(	O
)	O
;	O
FDI_SET	O
(	O
format	pointer
,	O
FMTDIR_ERROR	int
)	O
;	O
goto	O
bad_format	O
;	O
}	O
}	O
else	O
{	O
*	O
invalid_reason	pointer
=	O
INVALID_UNTERMINATED_DIRECTIVE	O
(	O
)	O
;	O
FDI_SET	O
(	O
format	pointer
-	O
1	int
,	O
FMTDIR_ERROR	int
)	O
;	O
goto	O
bad_format	O
;	O
}	O
if	O
(	O
spec	struct
.	O
allocated	int
==	O
spec	struct
.	O
named_arg_count	int
)	O
{	O
spec	struct
.	O
allocated	int
=	O
2	int
*	O
spec	struct
.	O
allocated	int
+	O
1	int
;	O
spec	struct
.	O
named	pointer
=	O
(	O
struct	O
named_arg	struct
*	O
)	O
xrealloc	function
(	O
spec	struct
.	O
named	pointer
,	O
spec	struct
.	O
allocated	int
*	O
sizeof	O
(	O
struct	O
named_arg	struct
)	O
)	O
;	O
}	O
spec	struct
.	O
named	pointer
[	O
spec	struct
.	O
named_arg_count	int
]	O
.	O
name	pointer
=	O
name	pointer
;	O
spec	struct
.	O
named_arg_count	int
++	O
;	O
FDI_SET	O
(	O
format	pointer
-	O
1	int
,	O
FMTDIR_END	int
)	O
;	O
}	O
if	O
(	O
spec	struct
.	O
named_arg_count	int
>	O
1	int
)	O
{	O
unsigned	O
int	O
i	long
,	O
j	long
;	O
qsort	function
(	O
spec	struct
.	O
named	pointer
,	O
spec	struct
.	O
named_arg_count	int
,	O
sizeof	O
(	O
struct	O
named_arg	struct
)	O
,	O
named_arg_compare	function
)	O
;	O
for	O
(	O
i	long
=	O
j	long
=	O
0	int
;	O
i	long
<	O
spec	struct
.	O
named_arg_count	int
;	O
i	long
++	O
)	O
if	O
(	O
j	long
>	O
0	int
&&	O
strcmp	function
(	O
spec	struct
.	O
named	pointer
[	O
i	long
]	O
.	O
name	pointer
,	O
spec	struct
.	O
named	pointer
[	O
j	long
-	O
1	int
]	O
.	O
name	pointer
)	O
==	O
0	int
)	O
free	function
(	O
spec	struct
.	O
named	pointer
[	O
i	long
]	O
.	O
name	pointer
)	O
;	O
else	O
{	O
if	O
(	O
j	long
<	O
i	long
)	O
spec	struct
.	O
named	pointer
[	O
j	long
]	O
.	O
name	pointer
=	O
spec	struct
.	O
named	pointer
[	O
i	long
]	O
.	O
name	pointer
;	O
j	long
++	O
;	O
}	O
spec	struct
.	O
named_arg_count	int
=	O
j	long
;	O
}	O
result	pointer
=	O
XMALLOC	O
(	O
struct	O
spec	struct
)	O
;	O
*	O
result	pointer
=	O
spec	struct
;	O
return	O
result	pointer
;	O
bad_format	O
:	O
if	O
(	O
spec	struct
.	O
named	pointer
!=	O
NULL	O
)	O
{	O
unsigned	O
int	O
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
spec	struct
.	O
named_arg_count	int
;	O
i	long
++	O
)	O
free	function
(	O
spec	struct
.	O
named	pointer
[	O
i	long
]	O
.	O
name	pointer
)	O
;	O
free	function
(	O
spec	struct
.	O
named	pointer
)	O
;	O
}	O
return	O
NULL	O
;	O
}	O
static	O
void	O
format_free	function
(	O
void	O
*	O
descr	pointer
)	O
{	O
struct	O
spec	struct
*	O
spec	struct
=	O
(	O
struct	O
spec	struct
*	O
)	O
descr	pointer
;	O
if	O
(	O
spec	struct
->	O
named	pointer
!=	O
NULL	O
)	O
{	O
unsigned	O
int	O
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
spec	struct
->	O
named_arg_count	int
;	O
i	long
++	O
)	O
free	function
(	O
spec	struct
->	O
named	pointer
[	O
i	long
]	O
.	O
name	pointer
)	O
;	O
free	function
(	O
spec	struct
->	O
named	pointer
)	O
;	O
}	O
free	function
(	O
spec	struct
)	O
;	O
}	O
static	O
int	O
format_get_number_of_directives	function
(	O
void	O
*	O
descr	pointer
)	O
{	O
struct	O
spec	struct
*	O
spec	struct
=	O
(	O
struct	O
spec	struct
*	O
)	O
descr	pointer
;	O
return	O
spec	struct
->	O
directives	int
;	O
}	O
static	O
bool	bool
format_check	function
(	O
void	O
*	O
msgid_descr	pointer
,	O
void	O
*	O
msgstr_descr	pointer
,	O
bool	bool
equality	bool
,	O
formatstring_error_logger_t	pointer
error_logger	pointer
,	O
const	O
char	O
*	O
pretty_msgid	pointer
,	O
const	O
char	O
*	O
pretty_msgstr	pointer
)	O
{	O
struct	O
spec	struct
*	O
spec1	pointer
=	O
(	O
struct	O
spec	struct
*	O
)	O
msgid_descr	pointer
;	O
struct	O
spec	struct
*	O
spec2	pointer
=	O
(	O
struct	O
spec	struct
*	O
)	O
msgstr_descr	pointer
;	O
bool	bool
err	bool
=	O
false	int
;	O
if	O
(	O
spec1	pointer
->	O
named_arg_count	int
+	O
spec2	pointer
->	O
named_arg_count	int
>	O
0	int
)	O
{	O
unsigned	O
int	O
i	long
,	O
j	long
;	O
unsigned	O
int	O
n1	int
=	O
spec1	pointer
->	O
named_arg_count	int
;	O
unsigned	O
int	O
n2	int
=	O
spec2	pointer
->	O
named_arg_count	int
;	O
for	O
(	O
i	long
=	O
0	int
,	O
j	long
=	O
0	int
;	O
i	long
<	O
n1	int
||	O
j	long
<	O
n2	int
;	O
)	O
{	O
int	O
cmp	int
=	O
(	O
i	long
>=	O
n1	int
?	O
1	int
:	O
j	long
>=	O
n2	int
?	O
-	O
1	int
:	O
strcmp	function
(	O
spec1	pointer
->	O
named	pointer
[	O
i	long
]	O
.	O
name	pointer
,	O
spec2	pointer
->	O
named	pointer
[	O
j	long
]	O
.	O
name	pointer
)	O
)	O
;	O
if	O
(	O
cmp	int
>	O
0	int
)	O
{	O
if	O
(	O
error_logger	pointer
)	O
error_logger	pointer
(	O
_	O
(	O
"a format specification for argument '%s', as in '%s', doesn't exist in '%s'"	pointer
)	O
,	O
spec2	pointer
->	O
named	pointer
[	O
j	long
]	O
.	O
name	pointer
,	O
pretty_msgstr	pointer
,	O
pretty_msgid	pointer
)	O
;	O
err	bool
=	O
true	int
;	O
break	O
;	O
}	O
else	O
if	O
(	O
cmp	int
<	O
0	int
)	O
{	O
if	O
(	O
equality	bool
)	O
{	O
if	O
(	O
error_logger	pointer
)	O
error_logger	pointer
(	O
_	O
(	O
"a format specification for argument '%s' doesn't exist in '%s'"	pointer
)	O
,	O
spec1	pointer
->	O
named	pointer
[	O
i	long
]	O
.	O
name	pointer
,	O
pretty_msgstr	pointer
)	O
;	O
err	bool
=	O
true	int
;	O
break	O
;	O
}	O
else	O
i	long
++	O
;	O
}	O
else	O
j	long
++	O
,	O
i	long
++	O
;	O
}	O
}	O
return	O
err	bool
;	O
}	O
struct	O
formatstring_parser	struct
formatstring_sh	struct
=	O
{	O
format_parse	function
,	O
format_free	function
,	O
format_get_number_of_directives	function
,	O
NULL	O
,	O
format_check	function
}	O
;	O
