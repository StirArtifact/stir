static	O
int	O
build_mime	function
(	O
mu_sieve_machine_t	pointer
mach	pointer
,	O
mu_mime_t	pointer
*	O
pmime	pointer
,	O
mu_message_t	pointer
msg	pointer
,	O
const	O
char	O
*	O
text	pointer
)	O
{	O
mu_mime_t	pointer
mime	pointer
=	O
NULL	O
;	O
mu_message_t	pointer
newmsg	pointer
;	O
mu_stream_t	pointer
stream	pointer
,	O
input	pointer
;	O
mu_header_t	pointer
hdr	pointer
;	O
mu_body_t	pointer
body	pointer
;	O
const	O
char	O
*	O
header	pointer
=	O
"Content-Type: text/plain;charset="	pointer
MU_SIEVE_CHARSET	pointer
"\n"	pointer
"Content-Transfer-Encoding: 8bit\n\n"	pointer
;	O
int	O
rc	int
;	O
mu_mime_create	function
(	O
&	O
mime	pointer
,	O
NULL	O
,	O
0	int
)	O
;	O
mu_message_create	function
(	O
&	O
newmsg	pointer
,	O
NULL	O
)	O
;	O
mu_message_get_body	function
(	O
newmsg	pointer
,	O
&	O
body	pointer
)	O
;	O
if	O
(	O
(	O
rc	int
=	O
mu_static_memory_stream_create	function
(	O
&	O
input	pointer
,	O
text	pointer
,	O
strlen	function
(	O
text	pointer
)	O
)	O
)	O
)	O
{	O
mu_sieve_error	function
(	O
mach	pointer
,	O
_	O
(	O
"cannot create temporary stream: %s"	pointer
)	O
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
mu_mime_destroy	function
(	O
&	O
mime	pointer
)	O
;	O
mu_message_destroy	function
(	O
&	O
newmsg	pointer
,	O
NULL	O
)	O
;	O
return	O
1	int
;	O
}	O
if	O
(	O
mu_sieve_get_tag	function
(	O
mach	pointer
,	O
"mime"	pointer
,	O
SVT_VOID	int
,	O
NULL	O
)	O
)	O
{	O
mu_stream_t	pointer
fstr	pointer
;	O
rc	int
=	O
mu_filter_create	function
(	O
&	O
fstr	pointer
,	O
input	pointer
,	O
"base64"	pointer
,	O
MU_FILTER_ENCODE	int
,	O
MU_STREAM_READ	int
)	O
;	O
mu_stream_unref	function
(	O
input	pointer
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
header	pointer
=	O
"Content-Type: text/plain;charset="	pointer
MU_SIEVE_CHARSET	pointer
"\n"	pointer
"Content-Transfer-Encoding: base64\n\n"	pointer
;	O
input	pointer
=	O
fstr	pointer
;	O
}	O
}	O
rc	int
=	O
mu_body_get_streamref	function
(	O
body	pointer
,	O
&	O
stream	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_sieve_error	function
(	O
mach	pointer
,	O
_	O
(	O
"cannot get input body stream: %s"	pointer
)	O
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
mu_mime_destroy	function
(	O
&	O
mime	pointer
)	O
;	O
mu_message_destroy	function
(	O
&	O
newmsg	pointer
,	O
NULL	O
)	O
;	O
mu_stream_destroy	function
(	O
&	O
input	pointer
)	O
;	O
return	O
1	int
;	O
}	O
rc	int
=	O
mu_stream_copy	function
(	O
stream	pointer
,	O
input	pointer
,	O
0	int
,	O
NULL	O
)	O
;	O
mu_stream_destroy	function
(	O
&	O
input	pointer
)	O
;	O
mu_stream_destroy	function
(	O
&	O
stream	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_sieve_error	function
(	O
mach	pointer
,	O
_	O
(	O
"stream copy failed: %s"	pointer
)	O
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
mu_mime_destroy	function
(	O
&	O
mime	pointer
)	O
;	O
mu_message_destroy	function
(	O
&	O
newmsg	pointer
,	O
NULL	O
)	O
;	O
return	O
1	int
;	O
}	O
mu_header_create	function
(	O
&	O
hdr	pointer
,	O
header	pointer
,	O
strlen	function
(	O
header	pointer
)	O
)	O
;	O
mu_message_set_header	function
(	O
newmsg	pointer
,	O
hdr	pointer
,	O
NULL	O
)	O
;	O
mu_mime_add_part	function
(	O
mime	pointer
,	O
newmsg	pointer
)	O
;	O
mu_message_unref	function
(	O
newmsg	pointer
)	O
;	O
*	O
pmime	pointer
=	O
mime	pointer
;	O
return	O
0	int
;	O
}	O
static	O
int	O
diag	function
(	O
mu_sieve_machine_t	pointer
mach	pointer
)	O
{	O
mu_sieve_log_action	function
(	O
mach	pointer
,	O
"VACATION"	pointer
,	O
NULL	O
)	O
;	O
return	O
mu_sieve_is_dry_run	function
(	O
mach	pointer
)	O
;	O
}	O
struct	O
addr_data	struct
{	O
mu_address_t	pointer
addr	int
;	O
char	O
*	O
my_address	pointer
;	O
}	O
;	O
static	O
int	O
_compare	function
(	O
void	O
*	O
item	pointer
,	O
void	O
*	O
data	pointer
)	O
{	O
struct	O
addr_data	struct
*	O
ad	pointer
=	O
data	pointer
;	O
int	O
rc	int
=	O
mu_address_contains_email	function
(	O
ad	pointer
->	O
addr	int
,	O
item	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
ad	pointer
->	O
my_address	pointer
=	O
item	pointer
;	O
return	O
rc	int
;	O
}	O
static	O
int	O
match_addresses	function
(	O
mu_sieve_machine_t	pointer
mach	pointer
,	O
mu_header_t	pointer
hdr	pointer
,	O
char	O
*	O
email	pointer
,	O
mu_sieve_value_t	struct
*	O
addresses	pointer
,	O
char	O
const	O
*	O
*	O
my_address	pointer
)	O
{	O
int	O
match	int
=	O
0	int
;	O
const	O
char	O
*	O
str	pointer
;	O
struct	O
addr_data	struct
ad	pointer
;	O
ad	pointer
.	O
my_address	pointer
=	O
NULL	O
;	O
if	O
(	O
mu_header_sget_value	O
(	O
hdr	pointer
,	O
MU_HEADER_TO	pointer
,	O
&	O
str	pointer
)	O
==	O
0	int
)	O
{	O
if	O
(	O
!	O
mu_address_create	function
(	O
&	O
ad	pointer
.	O
addr	int
,	O
str	pointer
)	O
)	O
{	O
if	O
(	O
_compare	function
(	O
email	pointer
,	O
&	O
ad	pointer
)	O
)	O
match	int
=	O
1	int
;	O
else	O
if	O
(	O
addresses	pointer
)	O
match	int
+=	O
mu_sieve_vlist_do	function
(	O
mach	pointer
,	O
addresses	pointer
,	O
_compare	function
,	O
&	O
ad	pointer
)	O
;	O
mu_address_destroy	function
(	O
&	O
ad	pointer
.	O
addr	int
)	O
;	O
}	O
}	O
if	O
(	O
!	O
match	int
&&	O
mu_header_sget_value	O
(	O
hdr	pointer
,	O
MU_HEADER_CC	pointer
,	O
&	O
str	pointer
)	O
==	O
0	int
)	O
{	O
if	O
(	O
!	O
mu_address_create	function
(	O
&	O
ad	pointer
.	O
addr	int
,	O
str	pointer
)	O
)	O
{	O
if	O
(	O
_compare	function
(	O
email	pointer
,	O
&	O
ad	pointer
)	O
)	O
match	int
=	O
1	int
;	O
else	O
if	O
(	O
addresses	pointer
)	O
match	int
+=	O
mu_sieve_vlist_do	function
(	O
mach	pointer
,	O
addresses	pointer
,	O
_compare	function
,	O
&	O
ad	pointer
)	O
;	O
mu_address_destroy	function
(	O
&	O
ad	pointer
.	O
addr	int
)	O
;	O
}	O
}	O
*	O
my_address	pointer
=	O
ad	pointer
.	O
my_address	pointer
;	O
return	O
match	int
;	O
}	O
struct	O
regex_data	struct
{	O
mu_sieve_machine_t	pointer
mach	pointer
;	O
char	O
*	O
email	pointer
;	O
}	O
;	O
static	O
int	O
regex_comparator	function
(	O
void	O
*	O
item	pointer
,	O
void	O
*	O
data	pointer
)	O
{	O
regex_t	struct
preg	struct
;	O
int	O
rc	int
;	O
struct	O
regex_data	struct
*	O
d	pointer
=	O
data	pointer
;	O
if	O
(	O
regcomp	function
(	O
&	O
preg	struct
,	O
item	pointer
,	O
REG_EXTENDED	int
|	O
REG_NOSUB	O
|	O
REG_NEWLINE	O
|	O
REG_ICASE	O
)	O
)	O
{	O
mu_sieve_error	function
(	O
d	pointer
->	O
mach	pointer
,	O
_	O
(	O
"%lu: cannot compile regular expression \"%s\""	pointer
)	O
,	O
(	O
unsigned	O
long	O
)	O
mu_sieve_get_message_num	function
(	O
d	pointer
->	O
mach	pointer
)	O
,	O
(	O
char	O
*	O
)	O
item	pointer
)	O
;	O
return	O
0	int
;	O
}	O
rc	int
=	O
regexec	function
(	O
&	O
preg	struct
,	O
d	pointer
->	O
email	pointer
,	O
0	int
,	O
NULL	O
,	O
0	int
)	O
==	O
0	int
;	O
regfree	function
(	O
&	O
preg	struct
)	O
;	O
return	O
rc	int
;	O
}	O
static	O
int	O
noreply_address_p	function
(	O
mu_sieve_machine_t	pointer
mach	pointer
,	O
char	O
*	O
email	pointer
)	O
{	O
int	O
i	long
,	O
rc	int
=	O
0	int
;	O
mu_sieve_value_t	struct
*	O
arg	pointer
;	O
struct	O
regex_data	struct
rd	struct
;	O
static	O
char	O
*	O
noreply_sender	array
[	O
]	O
=	O
{	O
".*-REQUEST@.*"	pointer
,	O
".*-RELAY@.*"	pointer
,	O
".*-OWNER@.*"	pointer
,	O
"^OWNER-.*"	pointer
,	O
"^postmaster@.*"	pointer
,	O
"^UUCP@.*"	pointer
,	O
"^MAILER@.*"	pointer
,	O
"^MAILER-DAEMON@.*"	pointer
,	O
NULL	O
}	O
;	O
rd	struct
.	O
mach	pointer
=	O
mach	pointer
;	O
rd	struct
.	O
email	pointer
=	O
email	pointer
;	O
for	O
(	O
i	long
=	O
0	int
;	O
rc	int
==	O
0	int
&&	O
noreply_sender	array
[	O
i	long
]	O
;	O
i	long
++	O
)	O
rc	int
=	O
regex_comparator	function
(	O
noreply_sender	array
[	O
i	long
]	O
,	O
&	O
rd	struct
)	O
;	O
if	O
(	O
!	O
rc	int
&&	O
(	O
arg	pointer
=	O
mu_sieve_get_tag_untyped	function
(	O
mach	pointer
,	O
"noreply"	pointer
)	O
)	O
!=	O
NULL	O
)	O
rc	int
=	O
mu_sieve_vlist_do	function
(	O
mach	pointer
,	O
arg	pointer
,	O
regex_comparator	function
,	O
&	O
rd	struct
)	O
;	O
return	O
rc	int
;	O
}	O
static	O
int	O
bulk_precedence_p	function
(	O
mu_header_t	pointer
hdr	pointer
)	O
{	O
int	O
rc	int
=	O
0	int
;	O
const	O
char	O
*	O
str	pointer
;	O
if	O
(	O
mu_header_sget_value	O
(	O
hdr	pointer
,	O
MU_HEADER_PRECEDENCE	pointer
,	O
&	O
str	pointer
)	O
==	O
0	int
)	O
{	O
rc	int
=	O
mu_c_strcasecmp	function
(	O
str	pointer
,	O
"bulk"	pointer
)	O
==	O
0	int
||	O
mu_c_strcasecmp	function
(	O
str	pointer
,	O
"junk"	pointer
)	O
==	O
0	int
;	O
}	O
return	O
rc	int
;	O
}	O
static	O
int	O
test_and_update_prop	function
(	O
mu_property_t	pointer
prop	pointer
,	O
const	O
char	O
*	O
from	pointer
,	O
time_t	long
now	pointer
,	O
unsigned	O
int	O
days	int
,	O
mu_sieve_machine_t	pointer
mach	pointer
)	O
{	O
const	O
char	O
*	O
result	pointer
;	O
char	O
*	O
timebuf	pointer
;	O
time_t	long
last	pointer
;	O
int	O
rc	int
=	O
mu_property_sget_value	function
(	O
prop	pointer
,	O
from	pointer
,	O
&	O
result	pointer
)	O
;	O
switch	O
(	O
rc	int
)	O
{	O
case	O
MU_ERR_NOENT	O
:	O
break	O
;	O
case	O
0	int
:	O
if	O
(	O
days	int
==	O
0	int
)	O
return	O
1	int
;	O
last	pointer
=	O
(	O
time_t	long
)	O
strtoul	function
(	O
result	pointer
,	O
NULL	O
,	O
0	int
)	O
;	O
if	O
(	O
last	pointer
+	O
(	O
24	int
*	O
60	int
*	O
60	int
*	O
days	int
)	O
>	O
now	pointer
)	O
return	O
1	int
;	O
break	O
;	O
default	O
:	O
mu_sieve_error	function
(	O
mach	pointer
,	O
"%lu: mu_property_sget_value: %s"	pointer
,	O
(	O
unsigned	O
long	O
)	O
mu_sieve_get_message_num	function
(	O
mach	pointer
)	O
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
rc	int
=	O
mu_asprintf	function
(	O
&	O
timebuf	pointer
,	O
"%lu"	pointer
,	O
(	O
unsigned	O
long	O
)	O
now	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_sieve_error	function
(	O
mach	pointer
,	O
"%lu: mu_asprintf: %s"	pointer
,	O
(	O
unsigned	O
long	O
)	O
mu_sieve_get_message_num	function
(	O
mach	pointer
)	O
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
rc	int
=	O
mu_property_set_value	function
(	O
prop	pointer
,	O
from	pointer
,	O
timebuf	pointer
,	O
1	int
)	O
;	O
free	function
(	O
timebuf	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_sieve_error	function
(	O
mach	pointer
,	O
"%lu: mu_property_set_value: %s"	pointer
,	O
(	O
unsigned	O
long	O
)	O
mu_sieve_get_message_num	function
(	O
mach	pointer
)	O
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
rc	int
=	O
mu_property_save	function
(	O
prop	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_sieve_error	function
(	O
mach	pointer
,	O
"%lu: mu_property_save: %s"	pointer
,	O
(	O
unsigned	O
long	O
)	O
mu_sieve_get_message_num	function
(	O
mach	pointer
)	O
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
check_db	function
(	O
mu_sieve_machine_t	pointer
mach	pointer
,	O
char	O
*	O
from	pointer
)	O
{	O
mu_property_t	pointer
prop	pointer
;	O
char	O
*	O
file	pointer
;	O
unsigned	O
int	O
days	int
;	O
int	O
rc	int
;	O
mu_stream_t	pointer
str	pointer
;	O
mu_locker_t	pointer
locker	pointer
;	O
const	O
char	O
*	O
dbfile	pointer
=	O
"~/.vacation"	pointer
;	O
size_t	long
n	pointer
;	O
if	O
(	O
mu_sieve_get_tag	function
(	O
mach	pointer
,	O
"days"	pointer
,	O
SVT_NUMBER	int
,	O
&	O
n	pointer
)	O
)	O
{	O
days	int
=	O
n	pointer
;	O
if	O
(	O
days	int
>	O
DAYS_MAX	int
)	O
days	int
=	O
DAYS_MAX	int
;	O
}	O
else	O
days	int
=	O
DAYS_DEFAULT	int
;	O
mu_sieve_get_tag	function
(	O
mach	pointer
,	O
"database"	pointer
,	O
SVT_STRING	int
,	O
&	O
dbfile	pointer
)	O
;	O
file	pointer
=	O
mu_tilde_expansion	function
(	O
dbfile	pointer
,	O
MU_HIERARCHY_DELIMITER	char
,	O
NULL	O
)	O
;	O
if	O
(	O
!	O
file	pointer
)	O
{	O
mu_sieve_error	function
(	O
mach	pointer
,	O
_	O
(	O
"%lu: cannot build db file name"	pointer
)	O
,	O
(	O
unsigned	O
long	O
)	O
mu_sieve_get_message_num	function
(	O
mach	pointer
)	O
)	O
;	O
mu_sieve_abort	function
(	O
mach	pointer
)	O
;	O
}	O
rc	int
=	O
mu_locker_create	function
(	O
&	O
locker	pointer
,	O
file	pointer
,	O
0	int
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_sieve_error	function
(	O
mach	pointer
,	O
_	O
(	O
"%lu: cannot lock %s: %s"	pointer
)	O
,	O
(	O
unsigned	O
long	O
)	O
mu_sieve_get_message_num	function
(	O
mach	pointer
)	O
,	O
file	pointer
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
free	function
(	O
file	pointer
)	O
;	O
mu_sieve_abort	function
(	O
mach	pointer
)	O
;	O
}	O
rc	int
=	O
mu_file_stream_create	function
(	O
&	O
str	pointer
,	O
file	pointer
,	O
MU_STREAM_RDWR	O
|	O
MU_STREAM_CREAT	int
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_sieve_error	function
(	O
mach	pointer
,	O
"%lu: mu_file_stream_create(%s): %s"	pointer
,	O
(	O
unsigned	O
long	O
)	O
mu_sieve_get_message_num	function
(	O
mach	pointer
)	O
,	O
file	pointer
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
mu_locker_destroy	function
(	O
&	O
locker	pointer
)	O
;	O
free	function
(	O
file	pointer
)	O
;	O
mu_sieve_abort	function
(	O
mach	pointer
)	O
;	O
}	O
free	function
(	O
file	pointer
)	O
;	O
rc	int
=	O
mu_property_create_init	function
(	O
&	O
prop	pointer
,	O
mu_assoc_property_init	function
,	O
str	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_sieve_error	function
(	O
mach	pointer
,	O
"%lu: mu_property_create_init: %s"	pointer
,	O
(	O
unsigned	O
long	O
)	O
mu_sieve_get_message_num	function
(	O
mach	pointer
)	O
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
mu_locker_destroy	function
(	O
&	O
locker	pointer
)	O
;	O
mu_sieve_abort	function
(	O
mach	pointer
)	O
;	O
}	O
rc	int
=	O
mu_locker_lock	function
(	O
locker	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_sieve_error	function
(	O
mach	pointer
,	O
"%lu: cannot lock vacation database: %s"	pointer
,	O
(	O
unsigned	O
long	O
)	O
mu_sieve_get_message_num	function
(	O
mach	pointer
)	O
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
mu_property_destroy	function
(	O
&	O
prop	pointer
)	O
;	O
mu_sieve_abort	function
(	O
mach	pointer
)	O
;	O
}	O
rc	int
=	O
test_and_update_prop	function
(	O
prop	pointer
,	O
from	pointer
,	O
time	struct
(	O
NULL	O
)	O
,	O
days	int
,	O
mach	pointer
)	O
;	O
mu_property_destroy	function
(	O
&	O
prop	pointer
)	O
;	O
mu_locker_unlock	function
(	O
locker	pointer
)	O
;	O
mu_locker_destroy	function
(	O
&	O
locker	pointer
)	O
;	O
if	O
(	O
rc	int
==	O
-	O
1	int
)	O
mu_sieve_abort	function
(	O
mach	pointer
)	O
;	O
return	O
rc	int
;	O
}	O
static	O
void	O
re_subject	function
(	O
mu_sieve_machine_t	pointer
mach	pointer
,	O
char	O
*	O
*	O
psubject	pointer
)	O
{	O
char	O
*	O
subject	pointer
;	O
char	O
*	O
prefix	array
=	O
"Re"	pointer
;	O
mu_sieve_get_tag	function
(	O
mach	pointer
,	O
"reply_prefix"	pointer
,	O
SVT_STRING	int
,	O
&	O
prefix	array
)	O
;	O
subject	pointer
=	O
malloc	function
(	O
strlen	function
(	O
*	O
psubject	pointer
)	O
+	O
strlen	function
(	O
prefix	array
)	O
+	O
3	int
)	O
;	O
if	O
(	O
!	O
subject	pointer
)	O
{	O
mu_sieve_error	function
(	O
mach	pointer
,	O
_	O
(	O
"%lu: not enough memory"	pointer
)	O
,	O
(	O
unsigned	O
long	O
)	O
mu_sieve_get_message_num	function
(	O
mach	pointer
)	O
)	O
;	O
return	O
;	O
}	O
strcpy	function
(	O
subject	pointer
,	O
prefix	array
)	O
;	O
strcat	function
(	O
subject	pointer
,	O
": "	pointer
)	O
;	O
strcat	function
(	O
subject	pointer
,	O
*	O
psubject	pointer
)	O
;	O
free	function
(	O
*	O
psubject	pointer
)	O
;	O
*	O
psubject	pointer
=	O
subject	pointer
;	O
}	O
static	O
void	O
vacation_subject	function
(	O
mu_sieve_machine_t	pointer
mach	pointer
,	O
mu_message_t	pointer
msg	pointer
,	O
mu_header_t	pointer
newhdr	pointer
)	O
{	O
char	O
*	O
value	pointer
;	O
char	O
*	O
subject	pointer
;	O
int	O
subject_allocated	int
=	O
0	int
;	O
mu_header_t	pointer
hdr	pointer
;	O
if	O
(	O
mu_sieve_get_tag	function
(	O
mach	pointer
,	O
"subject"	pointer
,	O
SVT_STRING	int
,	O
&	O
subject	pointer
)	O
)	O
;	O
else	O
if	O
(	O
mu_message_get_header	function
(	O
msg	pointer
,	O
&	O
hdr	pointer
)	O
==	O
0	int
&&	O
mu_header_aget_value_unfold	O
(	O
hdr	pointer
,	O
MU_HEADER_SUBJECT	pointer
,	O
&	O
value	pointer
)	O
==	O
0	int
)	O
{	O
char	O
*	O
p	pointer
;	O
int	O
rc	int
=	O
mu_rfc2047_decode	function
(	O
MU_SIEVE_CHARSET	pointer
,	O
value	pointer
,	O
&	O
p	pointer
)	O
;	O
subject_allocated	int
=	O
1	int
;	O
if	O
(	O
rc	int
)	O
{	O
subject	pointer
=	O
value	pointer
;	O
value	pointer
=	O
NULL	O
;	O
}	O
else	O
{	O
subject	pointer
=	O
p	pointer
;	O
}	O
if	O
(	O
mu_sieve_get_tag	function
(	O
mach	pointer
,	O
"reply_regex"	pointer
,	O
SVT_STRING	int
,	O
&	O
p	pointer
)	O
)	O
{	O
char	O
*	O
err	long
=	O
NULL	O
;	O
rc	int
=	O
mu_unre_set_regex	function
(	O
p	pointer
,	O
0	int
,	O
&	O
err	long
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_sieve_error	function
(	O
mach	pointer
,	O
_	O
(	O
"%lu: cannot compile reply prefix regexp: %s: %s"	pointer
)	O
,	O
(	O
unsigned	O
long	O
)	O
mu_sieve_get_message_num	function
(	O
mach	pointer
)	O
,	O
mu_strerror	function
(	O
rc	int
)	O
,	O
mu_prstr	function
(	O
err	long
)	O
)	O
;	O
}	O
}	O
if	O
(	O
mu_unre_subject	function
(	O
subject	pointer
,	O
NULL	O
)	O
)	O
re_subject	function
(	O
mach	pointer
,	O
&	O
subject	pointer
)	O
;	O
free	function
(	O
value	pointer
)	O
;	O
}	O
else	O
subject	pointer
=	O
"Re: Your mail"	pointer
;	O
if	O
(	O
mu_rfc2047_encode	function
(	O
MU_SIEVE_CHARSET	pointer
,	O
"quoted-printable"	pointer
,	O
subject	pointer
,	O
&	O
value	pointer
)	O
)	O
mu_header_set_value	function
(	O
newhdr	pointer
,	O
MU_HEADER_SUBJECT	pointer
,	O
subject	pointer
,	O
1	int
)	O
;	O
else	O
{	O
mu_header_set_value	function
(	O
newhdr	pointer
,	O
MU_HEADER_SUBJECT	pointer
,	O
value	pointer
,	O
1	int
)	O
;	O
free	function
(	O
value	pointer
)	O
;	O
}	O
if	O
(	O
subject_allocated	int
)	O
free	function
(	O
subject	pointer
)	O
;	O
}	O
static	O
int	O
header_split	function
(	O
const	O
char	O
*	O
str	pointer
,	O
char	O
*	O
*	O
hname	pointer
,	O
char	O
*	O
*	O
hval	pointer
)	O
{	O
char	O
*	O
p	pointer
,	O
*	O
q	pointer
,	O
*	O
fn	pointer
,	O
*	O
fv	pointer
;	O
size_t	long
n	pointer
;	O
q	pointer
=	O
strchr	function
(	O
str	pointer
,	O
':'	O
)	O
;	O
if	O
(	O
!	O
q	pointer
)	O
return	O
MU_ERR_FORMAT	O
;	O
for	O
(	O
p	pointer
=	O
q	pointer
;	O
p	pointer
>	O
str	pointer
&&	O
mu_isspace	O
(	O
p	pointer
[	O
-	O
1	int
]	O
)	O
;	O
--	O
p	pointer
)	O
;	O
if	O
(	O
p	pointer
==	O
str	pointer
)	O
return	O
MU_ERR_FORMAT	O
;	O
n	pointer
=	O
p	pointer
-	O
str	pointer
;	O
fn	pointer
=	O
malloc	function
(	O
n	pointer
+	O
1	int
)	O
;	O
if	O
(	O
!	O
fn	pointer
)	O
return	O
ENOMEM	int
;	O
memcpy	function
(	O
fn	pointer
,	O
str	pointer
,	O
n	pointer
)	O
;	O
fn	pointer
[	O
n	pointer
]	O
=	O
0	int
;	O
for	O
(	O
++	O
q	pointer
;	O
*	O
q	pointer
&&	O
mu_isspace	O
(	O
*	O
q	pointer
)	O
;	O
++	O
q	pointer
)	O
;	O
fv	pointer
=	O
strdup	function
(	O
q	pointer
)	O
;	O
if	O
(	O
!	O
fv	pointer
)	O
{	O
free	function
(	O
fn	pointer
)	O
;	O
return	O
ENOMEM	int
;	O
}	O
*	O
hname	pointer
=	O
fn	pointer
;	O
*	O
hval	pointer
=	O
fv	pointer
;	O
return	O
0	int
;	O
}	O
struct	O
header_closure	struct
{	O
mu_sieve_machine_t	pointer
mach	pointer
;	O
mu_header_t	pointer
hdr	pointer
;	O
}	O
;	O
static	O
int	O
add_header	function
(	O
void	O
*	O
item	pointer
,	O
void	O
*	O
data	pointer
)	O
{	O
char	O
const	O
*	O
str	pointer
=	O
item	pointer
;	O
struct	O
header_closure	struct
*	O
hc	pointer
=	O
data	pointer
;	O
char	O
*	O
fn	pointer
,	O
*	O
fv	pointer
;	O
int	O
rc	int
;	O
rc	int
=	O
header_split	function
(	O
str	pointer
,	O
&	O
fn	pointer
,	O
&	O
fv	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_sieve_error	function
(	O
hc	pointer
->	O
mach	pointer
,	O
_	O
(	O
"%lu: can't add header \"%s\": %s"	pointer
)	O
,	O
(	O
unsigned	O
long	O
)	O
mu_sieve_get_message_num	function
(	O
hc	pointer
->	O
mach	pointer
)	O
,	O
str	pointer
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
return	O
0	int
;	O
}	O
rc	int
=	O
mu_header_append	function
(	O
hc	pointer
->	O
hdr	pointer
,	O
fn	pointer
,	O
fv	pointer
)	O
;	O
free	function
(	O
fn	pointer
)	O
;	O
free	function
(	O
fv	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
mu_sieve_error	function
(	O
hc	pointer
->	O
mach	pointer
,	O
_	O
(	O
"%lu: can't add header \"%s\": %s"	pointer
)	O
,	O
(	O
unsigned	O
long	O
)	O
mu_sieve_get_message_num	function
(	O
hc	pointer
->	O
mach	pointer
)	O
,	O
str	pointer
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
vacation_reply	function
(	O
mu_sieve_machine_t	pointer
mach	pointer
,	O
mu_message_t	pointer
msg	pointer
,	O
char	O
const	O
*	O
text	pointer
,	O
char	O
const	O
*	O
to	pointer
,	O
char	O
const	O
*	O
from	pointer
)	O
{	O
mu_mime_t	pointer
mime	pointer
=	O
NULL	O
;	O
mu_message_t	pointer
newmsg	pointer
;	O
mu_header_t	pointer
newhdr	pointer
;	O
mu_address_t	pointer
to_addr	pointer
=	O
NULL	O
,	O
from_addr	pointer
=	O
NULL	O
;	O
char	O
*	O
value	pointer
;	O
mu_mailer_t	pointer
mailer	pointer
;	O
int	O
rc	int
;	O
mu_sieve_value_t	struct
*	O
val	pointer
;	O
if	O
(	O
mu_sieve_get_tag	function
(	O
mach	pointer
,	O
"file"	pointer
,	O
SVT_VOID	int
,	O
NULL	O
)	O
)	O
{	O
mu_stream_t	pointer
instr	pointer
;	O
rc	int
=	O
mu_mapfile_stream_create	function
(	O
&	O
instr	pointer
,	O
text	pointer
,	O
MU_STREAM_READ	int
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_sieve_error	function
(	O
mach	pointer
,	O
_	O
(	O
"%lu: cannot open message file %s: %s"	pointer
)	O
,	O
(	O
unsigned	O
long	O
)	O
mu_sieve_get_message_num	function
(	O
mach	pointer
)	O
,	O
text	pointer
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
mu_sieve_get_tag	function
(	O
mach	pointer
,	O
"rfc2822"	pointer
,	O
SVT_VOID	int
,	O
NULL	O
)	O
)	O
{	O
rc	int
=	O
mu_stream_to_message	function
(	O
instr	pointer
,	O
&	O
newmsg	pointer
)	O
;	O
mu_stream_unref	function
(	O
instr	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_sieve_error	function
(	O
mach	pointer
,	O
_	O
(	O
"%lu: cannot read message from file %s: %s"	pointer
)	O
,	O
(	O
unsigned	O
long	O
)	O
mu_sieve_get_message_num	function
(	O
mach	pointer
)	O
,	O
text	pointer
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
}	O
else	O
{	O
mu_stream_t	pointer
text_stream	pointer
;	O
mu_transport_t	pointer
trans	pointer
[	O
2	int
]	O
;	O
rc	int
=	O
mu_memory_stream_create	function
(	O
&	O
text_stream	pointer
,	O
MU_STREAM_RDWR	O
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_stream_unref	function
(	O
instr	pointer
)	O
;	O
mu_sieve_error	function
(	O
mach	pointer
,	O
_	O
(	O
"%lu: cannot create memory stream: %s"	pointer
)	O
,	O
(	O
unsigned	O
long	O
)	O
mu_sieve_get_message_num	function
(	O
mach	pointer
)	O
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
rc	int
=	O
mu_stream_copy	function
(	O
text_stream	pointer
,	O
instr	pointer
,	O
0	int
,	O
NULL	O
)	O
;	O
mu_stream_unref	function
(	O
instr	pointer
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
rc	int
=	O
mu_stream_write	function
(	O
text_stream	pointer
,	O
""	pointer
,	O
1	int
,	O
NULL	O
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_sieve_error	function
(	O
mach	pointer
,	O
_	O
(	O
"%lu: failed reading from %s: %s"	pointer
)	O
,	O
(	O
unsigned	O
long	O
)	O
mu_sieve_get_message_num	function
(	O
mach	pointer
)	O
,	O
text	pointer
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
rc	int
=	O
mu_stream_ioctl	function
(	O
text_stream	pointer
,	O
MU_IOCTL_TRANSPORT	int
,	O
MU_IOCTL_OP_GET	int
,	O
trans	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_stream_unref	function
(	O
text_stream	pointer
)	O
;	O
mu_sieve_error	function
(	O
mach	pointer
,	O
"%lu: mu_stream_ioctl: %s"	pointer
,	O
(	O
unsigned	O
long	O
)	O
mu_sieve_get_message_num	function
(	O
mach	pointer
)	O
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
build_mime	function
(	O
mach	pointer
,	O
&	O
mime	pointer
,	O
msg	pointer
,	O
(	O
char	O
const	O
*	O
)	O
trans	pointer
[	O
0	int
]	O
)	O
)	O
{	O
mu_stream_unref	function
(	O
text_stream	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
mu_mime_get_message	function
(	O
mime	pointer
,	O
&	O
newmsg	pointer
)	O
;	O
mu_message_unref	function
(	O
newmsg	pointer
)	O
;	O
mu_stream_unref	function
(	O
text_stream	pointer
)	O
;	O
}	O
}	O
else	O
{	O
if	O
(	O
build_mime	function
(	O
mach	pointer
,	O
&	O
mime	pointer
,	O
msg	pointer
,	O
text	pointer
)	O
)	O
return	O
-	O
1	int
;	O
mu_mime_get_message	function
(	O
mime	pointer
,	O
&	O
newmsg	pointer
)	O
;	O
mu_message_unref	function
(	O
newmsg	pointer
)	O
;	O
}	O
mu_message_get_header	function
(	O
newmsg	pointer
,	O
&	O
newhdr	pointer
)	O
;	O
rc	int
=	O
mu_address_create	function
(	O
&	O
to_addr	pointer
,	O
to	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_sieve_error	function
(	O
mach	pointer
,	O
_	O
(	O
"%lu: cannot create recipient address <%s>: %s"	pointer
)	O
,	O
(	O
unsigned	O
long	O
)	O
mu_sieve_get_message_num	function
(	O
mach	pointer
)	O
,	O
from	pointer
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
}	O
else	O
{	O
mu_header_set_value	function
(	O
newhdr	pointer
,	O
MU_HEADER_TO	pointer
,	O
to	pointer
,	O
1	int
)	O
;	O
val	pointer
=	O
mu_sieve_get_tag_untyped	function
(	O
mach	pointer
,	O
"header"	pointer
)	O
;	O
if	O
(	O
val	pointer
)	O
{	O
struct	O
header_closure	struct
hc	pointer
;	O
hc	pointer
.	O
mach	pointer
=	O
mach	pointer
;	O
hc	pointer
.	O
hdr	pointer
=	O
newhdr	pointer
;	O
mu_sieve_vlist_do	function
(	O
mach	pointer
,	O
val	pointer
,	O
add_header	function
,	O
&	O
hc	pointer
)	O
;	O
}	O
vacation_subject	function
(	O
mach	pointer
,	O
msg	pointer
,	O
newhdr	pointer
)	O
;	O
if	O
(	O
from	pointer
)	O
{	O
if	O
(	O
mu_address_create	function
(	O
&	O
from_addr	pointer
,	O
from	pointer
)	O
)	O
from_addr	pointer
=	O
NULL	O
;	O
}	O
else	O
{	O
from_addr	pointer
=	O
NULL	O
;	O
}	O
if	O
(	O
mu_rfc2822_in_reply_to	function
(	O
msg	pointer
,	O
&	O
value	pointer
)	O
==	O
0	int
)	O
{	O
mu_header_set_value	function
(	O
newhdr	pointer
,	O
MU_HEADER_IN_REPLY_TO	pointer
,	O
value	pointer
,	O
1	int
)	O
;	O
free	function
(	O
value	pointer
)	O
;	O
}	O
if	O
(	O
mu_rfc2822_references	function
(	O
msg	pointer
,	O
&	O
value	pointer
)	O
==	O
0	int
)	O
{	O
mu_header_set_value	function
(	O
newhdr	pointer
,	O
MU_HEADER_REFERENCES	pointer
,	O
value	pointer
,	O
1	int
)	O
;	O
free	function
(	O
value	pointer
)	O
;	O
}	O
mailer	pointer
=	O
mu_sieve_get_mailer	function
(	O
mach	pointer
)	O
;	O
if	O
(	O
mailer	pointer
)	O
{	O
rc	int
=	O
mu_mailer_send_message	function
(	O
mailer	pointer
,	O
newmsg	pointer
,	O
from_addr	pointer
,	O
to_addr	pointer
)	O
;	O
}	O
else	O
rc	int
=	O
MU_ERR_FAILURE	O
;	O
}	O
mu_address_destroy	function
(	O
&	O
to_addr	pointer
)	O
;	O
mu_address_destroy	function
(	O
&	O
from_addr	pointer
)	O
;	O
mu_mime_destroy	function
(	O
&	O
mime	pointer
)	O
;	O
return	O
rc	int
;	O
}	O
int	O
sieve_action_vacation	function
(	O
mu_sieve_machine_t	pointer
mach	pointer
)	O
{	O
int	O
rc	int
;	O
char	O
*	O
text	pointer
,	O
*	O
from	pointer
=	O
NULL	O
;	O
char	O
const	O
*	O
return_address	pointer
;	O
mu_message_t	pointer
msg	pointer
;	O
mu_header_t	pointer
hdr	pointer
;	O
char	O
*	O
my_address	pointer
;	O
if	O
(	O
diag	function
(	O
mach	pointer
)	O
)	O
return	O
0	int
;	O
mu_sieve_get_arg	function
(	O
mach	pointer
,	O
0	int
,	O
SVT_STRING	int
,	O
&	O
text	pointer
)	O
;	O
msg	pointer
=	O
mu_sieve_get_message	function
(	O
mach	pointer
)	O
;	O
mu_message_get_header	function
(	O
msg	pointer
,	O
&	O
hdr	pointer
)	O
;	O
if	O
(	O
mu_sieve_get_tag	function
(	O
mach	pointer
,	O
"sender"	pointer
,	O
SVT_STRING	int
,	O
&	O
from	pointer
)	O
)	O
{	O
from	pointer
=	O
strdup	function
(	O
from	pointer
)	O
;	O
if	O
(	O
!	O
from	pointer
)	O
{	O
mu_sieve_error	function
(	O
mach	pointer
,	O
"%lu: %s"	pointer
,	O
(	O
unsigned	O
long	O
)	O
mu_sieve_get_message_num	function
(	O
mach	pointer
)	O
,	O
mu_strerror	function
(	O
ENOMEM	int
)	O
)	O
;	O
mu_sieve_abort	function
(	O
mach	pointer
)	O
;	O
}	O
}	O
else	O
if	O
(	O
(	O
rc	int
=	O
mu_sieve_get_message_sender	function
(	O
msg	pointer
,	O
&	O
from	pointer
)	O
)	O
!=	O
0	int
)	O
{	O
mu_sieve_error	function
(	O
mach	pointer
,	O
_	O
(	O
"%lu: cannot get sender address: %s"	pointer
)	O
,	O
(	O
unsigned	O
long	O
)	O
mu_sieve_get_message_num	function
(	O
mach	pointer
)	O
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
mu_sieve_abort	function
(	O
mach	pointer
)	O
;	O
}	O
my_address	pointer
=	O
mu_get_user_email	function
(	O
NULL	O
)	O
;	O
if	O
(	O
mu_sieve_get_tag	function
(	O
mach	pointer
,	O
"always_reply"	pointer
,	O
SVT_VOID	int
,	O
NULL	O
)	O
)	O
return_address	pointer
=	O
my_address	pointer
;	O
else	O
{	O
mu_sieve_value_t	struct
*	O
val	pointer
=	O
mu_sieve_get_tag_untyped	function
(	O
mach	pointer
,	O
"aliases"	pointer
)	O
;	O
if	O
(	O
match_addresses	function
(	O
mach	pointer
,	O
hdr	pointer
,	O
my_address	pointer
,	O
val	pointer
,	O
&	O
return_address	pointer
)	O
==	O
0	int
)	O
{	O
free	function
(	O
my_address	pointer
)	O
;	O
return	O
0	int
;	O
}	O
}	O
if	O
(	O
noreply_address_p	function
(	O
mach	pointer
,	O
from	pointer
)	O
||	O
bulk_precedence_p	function
(	O
hdr	pointer
)	O
||	O
check_db	function
(	O
mach	pointer
,	O
from	pointer
)	O
)	O
{	O
free	function
(	O
from	pointer
)	O
;	O
free	function
(	O
my_address	pointer
)	O
;	O
return	O
0	int
;	O
}	O
mu_sieve_get_tag	function
(	O
mach	pointer
,	O
"return_address"	pointer
,	O
SVT_STRING	int
,	O
&	O
return_address	pointer
)	O
;	O
rc	int
=	O
vacation_reply	function
(	O
mach	pointer
,	O
msg	pointer
,	O
text	pointer
,	O
from	pointer
,	O
return_address	pointer
)	O
;	O
free	function
(	O
from	pointer
)	O
;	O
free	function
(	O
my_address	pointer
)	O
;	O
if	O
(	O
rc	int
==	O
-	O
1	int
)	O
mu_sieve_abort	function
(	O
mach	pointer
)	O
;	O
return	O
rc	int
;	O
}	O
static	O
mu_sieve_tag_def_t	struct
vacation_tags	array
[	O
]	O
=	O
{	O
{	O
"days"	pointer
,	O
SVT_NUMBER	int
}	O
,	O
{	O
"subject"	pointer
,	O
SVT_STRING	int
}	O
,	O
{	O
"aliases"	pointer
,	O
SVT_STRING_LIST	int
}	O
,	O
{	O
"noreply"	pointer
,	O
SVT_STRING_LIST	int
}	O
,	O
{	O
"reply_regex"	pointer
,	O
SVT_STRING	int
}	O
,	O
{	O
"reply_prefix"	pointer
,	O
SVT_STRING	int
}	O
,	O
{	O
"sender"	pointer
,	O
SVT_STRING	int
}	O
,	O
{	O
"database"	pointer
,	O
SVT_STRING	int
}	O
,	O
{	O
"mime"	pointer
,	O
SVT_VOID	int
}	O
,	O
{	O
"file"	pointer
,	O
SVT_VOID	int
}	O
,	O
{	O
"always_reply"	pointer
,	O
SVT_VOID	int
}	O
,	O
{	O
"return_address"	pointer
,	O
SVT_STRING	int
}	O
,	O
{	O
"header"	pointer
,	O
SVT_STRING_LIST	int
}	O
,	O
{	O
"rfc2822"	pointer
,	O
SVT_VOID	int
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
static	O
mu_sieve_tag_group_t	struct
vacation_tag_groups	array
[	O
]	O
=	O
{	O
{	O
vacation_tags	array
,	O
NULL	O
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
static	O
mu_sieve_data_type	enum
vacation_args	array
[	O
]	O
=	O
{	O
SVT_STRING	int
,	O
SVT_VOID	int
}	O
;	O
int	O
SIEVE_EXPORT	O
(	O
vacation	O
,	O
init	O
)	O
(	O
mu_sieve_machine_t	pointer
mach	pointer
)	O
{	O
mu_sieve_register_action	function
(	O
mach	pointer
,	O
"vacation"	pointer
,	O
sieve_action_vacation	function
,	O
vacation_args	array
,	O
vacation_tag_groups	array
,	O
1	int
)	O
;	O
return	O
0	int
;	O
}	O
