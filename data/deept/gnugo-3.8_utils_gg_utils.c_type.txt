static	O
char	O
*	O
setaf	pointer
;	O
static	O
char	O
*	O
op	pointer
;	O
static	O
int	O
init	int
=	O
0	int
;	O
void	O
gg_init_color	function
(	O
)	O
{	O
static	O
char	O
setaf_literal	array
[	O
]	O
=	O
"setaf"	pointer
;	O
static	O
char	O
op_literal	array
[	O
]	O
=	O
"op"	pointer
;	O
static	O
char	O
empty_literal	array
[	O
]	O
=	O
""	pointer
;	O
if	O
(	O
init	int
)	O
return	O
;	O
init	int
=	O
1	int
;	O
setupterm	function
(	O
NULL	O
,	O
2	int
,	O
NULL	O
)	O
;	O
setaf	pointer
=	O
tigetstr	function
(	O
setaf_literal	array
)	O
;	O
if	O
(	O
!	O
setaf	pointer
)	O
setaf	pointer
=	O
empty_literal	array
;	O
op	pointer
=	O
tigetstr	function
(	O
op_literal	array
)	O
;	O
if	O
(	O
!	O
op	pointer
)	O
op	pointer
=	O
empty_literal	array
;	O
}	O
void	O
write_color_char_no_space	function
(	O
int	O
c	int
,	O
int	O
x	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s%c"	pointer
,	O
tparm	function
(	O
setaf	pointer
,	O
c	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
)	O
,	O
x	int
)	O
;	O
fputs	function
(	O
tparm	function
(	O
op	pointer
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
)	O
,	O
stderr	pointer
)	O
;	O
}	O
void	O
write_color_string	function
(	O
int	O
c	int
,	O
const	O
char	O
*	O
str	pointer
)	O
{	O
while	O
(	O
*	O
str	pointer
)	O
write_color_char_no_space	function
(	O
c	int
,	O
*	O
str	pointer
++	O
)	O
;	O
}	O
void	O
write_color_char	function
(	O
int	O
c	int
,	O
int	O
x	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
" "	pointer
)	O
;	O
write_color_char_no_space	function
(	O
c	int
,	O
x	int
)	O
;	O
}	O
void	O
gg_vsnprintf	function
(	O
char	O
*	O
dest	pointer
,	O
unsigned	O
long	O
len	long
,	O
const	O
char	O
*	O
fmt	pointer
,	O
va_list	array
args	array
)	O
{	O
vsnprintf	function
(	O
dest	pointer
,	O
len	long
,	O
fmt	pointer
,	O
args	array
)	O
;	O
}	O
void	O
gg_snprintf	function
(	O
char	O
*	O
dest	pointer
,	O
unsigned	O
long	O
len	long
,	O
const	O
char	O
*	O
fmt	pointer
,	O
...	O
)	O
{	O
va_list	array
args	array
;	O
va_start	O
(	O
args	array
,	O
fmt	pointer
)	O
;	O
gg_vsnprintf	function
(	O
dest	pointer
,	O
len	long
,	O
fmt	pointer
,	O
args	array
)	O
;	O
va_end	O
(	O
args	array
)	O
;	O
}	O
double	O
gg_gettimeofday	function
(	O
void	O
)	O
{	O
struct	O
timeval	struct
tv	struct
;	O
gettimeofday	function
(	O
&	O
tv	struct
,	O
NULL	O
)	O
;	O
return	O
tv	struct
.	O
tv_sec	long
+	O
1.e-6	int
*	O
tv	struct
.	O
tv_usec	long
;	O
}	O
const	O
char	O
*	O
gg_version	function
(	O
void	O
)	O
{	O
return	O
VERSION	pointer
;	O
}	O
double	O
gg_cputime	function
(	O
void	O
)	O
{	O
struct	O
tms	struct
t	struct
;	O
times	function
(	O
&	O
t	struct
)	O
;	O
return	O
(	O
t	struct
.	O
tms_utime	long
+	O
t	struct
.	O
tms_stime	long
+	O
t	struct
.	O
tms_cutime	long
+	O
t	struct
.	O
tms_cstime	long
)	O
/	O
(	O
(	O
double	O
)	O
sysconf	function
(	O
_SC_CLK_TCK	int
)	O
)	O
;	O
}	O
float	O
gg_normalize_float	function
(	O
float	O
x	int
,	O
float	O
a	float
)	O
{	O
return	O
a	float
*	O
(	O
(	O
int	O
)	O
(	O
0.5	int
+	O
x	int
/	O
a	float
)	O
)	O
;	O
}	O
int	O
gg_normalize_float2int	function
(	O
float	O
x	int
,	O
float	O
a	float
)	O
{	O
return	O
(	O
(	O
int	O
)	O
(	O
0.5	int
+	O
x	int
/	O
a	float
)	O
)	O
;	O
}	O
void	O
gg_sort	function
(	O
void	O
*	O
base	pointer
,	O
size_t	long
nel	long
,	O
size_t	long
width	long
,	O
int	O
(	O
*	O
cmp	pointer
)	O
(	O
const	O
void	O
*	O
,	O
const	O
void	O
*	O
)	O
)	O
{	O
int	O
gap	int
=	O
nel	long
;	O
int	O
swap_made	int
;	O
char	O
*	O
end	pointer
=	O
(	O
char	O
*	O
)	O
base	pointer
+	O
width	long
*	O
(	O
nel	long
-	O
1	int
)	O
;	O
do	O
{	O
char	O
*	O
a	float
,	O
*	O
b	float
;	O
swap_made	int
=	O
0	int
;	O
gap	int
=	O
(	O
10	int
*	O
gap	int
+	O
3	int
)	O
/	O
13	int
;	O
for	O
(	O
a	float
=	O
base	pointer
,	O
b	float
=	O
a	float
+	O
gap	int
*	O
width	long
;	O
b	float
<=	O
end	pointer
;	O
a	float
+=	O
width	long
,	O
b	float
+=	O
width	long
)	O
{	O
if	O
(	O
cmp	pointer
(	O
(	O
void	O
*	O
)	O
a	float
,	O
(	O
void	O
*	O
)	O
b	float
)	O
>	O
0	int
)	O
{	O
char	O
*	O
c	int
=	O
a	float
;	O
char	O
*	O
d	pointer
=	O
b	float
;	O
size_t	long
size	long
=	O
width	long
;	O
while	O
(	O
size	long
--	O
>	O
0	int
)	O
{	O
char	O
tmp	char
=	O
*	O
c	int
;	O
*	O
c	int
++	O
=	O
*	O
d	pointer
;	O
*	O
d	pointer
++	O
=	O
tmp	char
;	O
}	O
swap_made	int
=	O
1	int
;	O
}	O
}	O
}	O
while	O
(	O
gap	int
>	O
1	int
||	O
swap_made	int
)	O
;	O
}	O
float	O
gg_interpolate	function
(	O
struct	O
interpolation_data	struct
*	O
f	pointer
,	O
float	O
x	int
)	O
{	O
int	O
i	int
;	O
float	O
ratio	float
;	O
float	O
diff	float
;	O
if	O
(	O
x	int
<	O
f	pointer
->	O
range_lowerbound	float
)	O
return	O
f	pointer
->	O
values	array
[	O
0	int
]	O
;	O
else	O
if	O
(	O
x	int
>	O
f	pointer
->	O
range_upperbound	float
)	O
return	O
f	pointer
->	O
values	array
[	O
f	pointer
->	O
sections	int
]	O
;	O
else	O
{	O
ratio	float
=	O
(	O
(	O
float	O
)	O
f	pointer
->	O
sections	int
)	O
*	O
(	O
x	int
-	O
f	pointer
->	O
range_lowerbound	float
)	O
/	O
(	O
f	pointer
->	O
range_upperbound	float
-	O
f	pointer
->	O
range_lowerbound	float
)	O
;	O
i	int
=	O
(	O
int	O
)	O
ratio	float
;	O
diff	float
=	O
ratio	float
-	O
(	O
(	O
float	O
)	O
i	int
)	O
;	O
if	O
(	O
0	int
)	O
fprintf	function
(	O
stderr	pointer
,	O
"Floating point Ratio: %f, integer: %d, diff %f"	pointer
,	O
ratio	float
,	O
i	int
,	O
diff	float
)	O
;	O
return	O
(	O
(	O
1	int
-	O
diff	float
)	O
*	O
f	pointer
->	O
values	array
[	O
i	int
]	O
+	O
diff	float
*	O
f	pointer
->	O
values	array
[	O
i	int
+	O
1	int
]	O
)	O
;	O
}	O
}	O
float	O
soft_cap	function
(	O
float	O
a	float
,	O
float	O
b	float
)	O
{	O
return	O
(	O
(	O
a	float
*	O
b	float
)	O
/	O
(	O
a	float
+	O
b	float
)	O
)	O
;	O
}	O
void	O
rotate	function
(	O
int	O
i	int
,	O
int	O
j	int
,	O
int	O
*	O
ri	pointer
,	O
int	O
*	O
rj	pointer
,	O
int	O
bs	int
,	O
int	O
rot	int
)	O
{	O
int	O
bs1	int
;	O
assert	O
(	O
bs	int
>	O
0	int
)	O
;	O
assert	O
(	O
ri	pointer
!=	O
NULL	O
&&	O
rj	pointer
!=	O
NULL	O
)	O
;	O
assert	O
(	O
rot	int
>=	O
0	int
&&	O
rot	int
<	O
8	int
)	O
;	O
if	O
(	O
i	int
==	O
-	O
1	int
&&	O
j	int
==	O
-	O
1	int
)	O
{	O
*	O
ri	pointer
=	O
i	int
;	O
*	O
rj	pointer
=	O
j	int
;	O
return	O
;	O
}	O
assert	O
(	O
i	int
>=	O
0	int
&&	O
i	int
<	O
bs	int
)	O
;	O
assert	O
(	O
j	int
>=	O
0	int
&&	O
j	int
<	O
bs	int
)	O
;	O
bs1	int
=	O
bs	int
-	O
1	int
;	O
if	O
(	O
rot	int
==	O
0	int
)	O
{	O
*	O
ri	pointer
=	O
i	int
;	O
*	O
rj	pointer
=	O
j	int
;	O
}	O
else	O
if	O
(	O
rot	int
==	O
1	int
)	O
{	O
*	O
ri	pointer
=	O
bs1	int
-	O
j	int
;	O
*	O
rj	pointer
=	O
i	int
;	O
}	O
else	O
if	O
(	O
rot	int
==	O
2	int
)	O
{	O
*	O
ri	pointer
=	O
bs1	int
-	O
i	int
;	O
*	O
rj	pointer
=	O
bs1	int
-	O
j	int
;	O
}	O
else	O
if	O
(	O
rot	int
==	O
3	int
)	O
{	O
*	O
ri	pointer
=	O
j	int
;	O
*	O
rj	pointer
=	O
bs1	int
-	O
i	int
;	O
}	O
else	O
if	O
(	O
rot	int
==	O
4	int
)	O
{	O
*	O
ri	pointer
=	O
j	int
;	O
*	O
rj	pointer
=	O
i	int
;	O
}	O
else	O
if	O
(	O
rot	int
==	O
5	int
)	O
{	O
*	O
ri	pointer
=	O
bs1	int
-	O
i	int
;	O
*	O
rj	pointer
=	O
j	int
;	O
}	O
else	O
if	O
(	O
rot	int
==	O
6	int
)	O
{	O
*	O
ri	pointer
=	O
bs1	int
-	O
j	int
;	O
*	O
rj	pointer
=	O
bs1	int
-	O
i	int
;	O
}	O
else	O
if	O
(	O
rot	int
==	O
7	int
)	O
{	O
*	O
ri	pointer
=	O
i	int
;	O
*	O
rj	pointer
=	O
bs1	int
-	O
j	int
;	O
}	O
}	O
void	O
inv_rotate	function
(	O
int	O
i	int
,	O
int	O
j	int
,	O
int	O
*	O
ri	pointer
,	O
int	O
*	O
rj	pointer
,	O
int	O
bs	int
,	O
int	O
rot	int
)	O
{	O
if	O
(	O
rot	int
==	O
1	int
)	O
rotate	function
(	O
i	int
,	O
j	int
,	O
ri	pointer
,	O
rj	pointer
,	O
bs	int
,	O
3	int
)	O
;	O
else	O
if	O
(	O
rot	int
==	O
3	int
)	O
rotate	function
(	O
i	int
,	O
j	int
,	O
ri	pointer
,	O
rj	pointer
,	O
bs	int
,	O
1	int
)	O
;	O
else	O
rotate	function
(	O
i	int
,	O
j	int
,	O
ri	pointer
,	O
rj	pointer
,	O
bs	int
,	O
rot	int
)	O
;	O
}	O
static	O
unsigned	O
int	O
random_seed	int
;	O
unsigned	O
int	O
get_random_seed	function
(	O
)	O
{	O
return	O
random_seed	int
;	O
}	O
void	O
set_random_seed	function
(	O
unsigned	O
int	O
seed	int
)	O
{	O
random_seed	int
=	O
seed	int
;	O
gg_srand	function
(	O
seed	int
)	O
;	O
}	O
void	O
update_random_seed	function
(	O
void	O
)	O
{	O
gg_srand	function
(	O
random_seed	int
)	O
;	O
random_seed	int
=	O
gg_rand	function
(	O
)	O
;	O
if	O
(	O
random_seed	int
==	O
0	int
)	O
random_seed	int
=	O
1	int
;	O
gg_srand	function
(	O
random_seed	int
)	O
;	O
}	O
void	O
reuse_random_seed	function
(	O
)	O
{	O
gg_srand	function
(	O
random_seed	int
)	O
;	O
}	O
