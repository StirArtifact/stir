static	O
unsigned	O
long	O
hash	function
(	O
const	O
char	O
*	O
s	long
,	O
unsigned	O
int	O
len	int
,	O
unsigned	O
long	O
hashsize	long
)	O
{	O
unsigned	O
long	O
hashval	int
;	O
for	O
(	O
hashval	int
=	O
0	int
;	O
len	int
;	O
s	long
++	O
,	O
len	int
--	O
)	O
hashval	int
=	O
*	O
s	long
+	O
31	int
*	O
hashval	int
;	O
return	O
hashval	int
%	O
hashsize	long
;	O
}	O
struct	O
hashtab	struct
*	O
hashtab_init	function
(	O
int	O
numeric	int
)	O
{	O
struct	O
hashtab	struct
*	O
new	pointer
;	O
new	pointer
=	O
(	O
struct	O
hashtab	struct
*	O
)	O
xmalloc	function
(	O
sizeof	O
(	O
struct	O
hashtab	struct
)	O
)	O
;	O
memset	function
(	O
new	pointer
,	O
0	int
,	O
sizeof	O
(	O
struct	O
hashtab	struct
)	O
)	O
;	O
new	pointer
->	O
numeric	int
=	O
numeric	int
;	O
return	O
new	pointer
;	O
}	O
static	O
unsigned	O
int	O
get_key_len	function
(	O
char	O
*	O
s	long
,	O
unsigned	O
int	O
len	int
,	O
int	O
numeric	int
)	O
{	O
if	O
(	O
numeric	int
)	O
{	O
if	O
(	O
len	int
==	O
0	int
)	O
fatal	function
(	O
"hashtab.c (get_key_len): hashing a num with len == 0"	pointer
)	O
;	O
if	O
(	O
len	int
!=	O
numeric	int
)	O
fatal	function
(	O
"hashtab.c (get_key_len): hashing a num with len != numeric"	pointer
)	O
;	O
return	O
len	int
;	O
}	O
else	O
{	O
if	O
(	O
!	O
len	int
)	O
return	O
strlen	function
(	O
s	long
)	O
;	O
else	O
{	O
unsigned	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
len	int
;	O
i	int
&&	O
(	O
*	O
s	long
!=	O
'\0'	O
)	O
;	O
s	long
++	O
,	O
i	int
--	O
)	O
;	O
return	O
len	int
-	O
i	int
;	O
}	O
}	O
}	O
static	O
void	O
hashtab_resize	function
(	O
struct	O
hashtab	struct
*	O
ht	pointer
)	O
{	O
unsigned	O
long	O
old_size	long
,	O
bucket	long
;	O
struct	O
hashtab_elem	struct
*	O
*	O
old_table	pointer
,	O
*	O
elt	pointer
;	O
old_size	long
=	O
ht	pointer
->	O
table_size	long
;	O
old_table	pointer
=	O
ht	pointer
->	O
table	pointer
;	O
ht	pointer
->	O
table_size	long
*=	O
RESIZE_MULTIPLIER	int
;	O
ht	pointer
->	O
resize_size	long
=	O
ht	pointer
->	O
table_size	long
*	O
RESIZE_SIZE_MULTIPLIER	int
;	O
ht	pointer
->	O
table	pointer
=	O
(	O
struct	O
hashtab_elem	struct
*	O
*	O
)	O
xmalloc	function
(	O
sizeof	O
(	O
struct	O
hashtab_elem	struct
*	O
)	O
*	O
ht	pointer
->	O
table_size	long
)	O
;	O
memset	function
(	O
ht	pointer
->	O
table	pointer
,	O
0	int
,	O
sizeof	O
(	O
struct	O
hashtab_elem	struct
*	O
)	O
*	O
ht	pointer
->	O
table_size	long
)	O
;	O
for	O
(	O
bucket	long
=	O
0	int
;	O
bucket	long
<	O
old_size	long
;	O
bucket	long
++	O
)	O
for	O
(	O
elt	pointer
=	O
old_table	pointer
[	O
bucket	long
]	O
;	O
elt	pointer
!=	O
NULL	O
;	O
)	O
{	O
struct	O
hashtab_elem	struct
*	O
old_next	pointer
=	O
elt	pointer
->	O
next	pointer
;	O
elt	pointer
->	O
hashval	int
=	O
hash	function
(	O
elt	pointer
->	O
key	pointer
,	O
elt	pointer
->	O
key_len	int
,	O
ht	pointer
->	O
table_size	long
)	O
;	O
elt	pointer
->	O
prev	pointer
=	O
NULL	O
;	O
elt	pointer
->	O
next	pointer
=	O
ht	pointer
->	O
table	pointer
[	O
elt	pointer
->	O
hashval	int
]	O
;	O
if	O
(	O
ht	pointer
->	O
table	pointer
[	O
elt	pointer
->	O
hashval	int
]	O
)	O
ht	pointer
->	O
table	pointer
[	O
elt	pointer
->	O
hashval	int
]	O
->	O
prev	pointer
=	O
elt	pointer
;	O
ht	pointer
->	O
table	pointer
[	O
elt	pointer
->	O
hashval	int
]	O
=	O
elt	pointer
;	O
elt	pointer
=	O
old_next	pointer
;	O
}	O
free	function
(	O
old_table	pointer
)	O
;	O
}	O
struct	O
hashtab_elem	struct
*	O
hashtab_create	function
(	O
struct	O
hashtab	struct
*	O
ht	pointer
,	O
void	O
*	O
key	pointer
,	O
unsigned	O
int	O
len	int
)	O
{	O
unsigned	O
long	O
hashval	int
;	O
unsigned	O
int	O
key_len	int
;	O
struct	O
hashtab_elem	struct
*	O
he	pointer
;	O
if	O
(	O
ht	pointer
->	O
table	pointer
==	O
NULL	O
)	O
{	O
ht	pointer
->	O
table_size	long
=	O
INITIAL_TABLE_SIZE	int
;	O
ht	pointer
->	O
items_hashed	long
=	O
0	int
;	O
ht	pointer
->	O
resize_size	long
=	O
ht	pointer
->	O
table_size	long
*	O
RESIZE_SIZE_MULTIPLIER	int
;	O
ht	pointer
->	O
table	pointer
=	O
(	O
struct	O
hashtab_elem	struct
*	O
*	O
)	O
xmalloc	function
(	O
sizeof	O
(	O
struct	O
hashtab_elem	struct
*	O
)	O
*	O
ht	pointer
->	O
table_size	long
)	O
;	O
memset	function
(	O
ht	pointer
->	O
table	pointer
,	O
0	int
,	O
sizeof	O
(	O
struct	O
hashtab_elem	struct
*	O
)	O
*	O
ht	pointer
->	O
table_size	long
)	O
;	O
}	O
key_len	int
=	O
get_key_len	function
(	O
key	pointer
,	O
len	int
,	O
ht	pointer
->	O
numeric	int
)	O
;	O
hashval	int
=	O
hash	function
(	O
key	pointer
,	O
key_len	int
,	O
ht	pointer
->	O
table_size	long
)	O
;	O
for	O
(	O
he	pointer
=	O
ht	pointer
->	O
table	pointer
[	O
hashval	int
]	O
;	O
he	pointer
!=	O
NULL	O
;	O
he	pointer
=	O
he	pointer
->	O
next	pointer
)	O
{	O
if	O
(	O
(	O
he	pointer
->	O
key_len	int
==	O
key_len	int
)	O
&&	O
(	O
memcmp	function
(	O
he	pointer
->	O
key	pointer
,	O
key	pointer
,	O
key_len	int
)	O
==	O
0	int
)	O
)	O
{	O
he	pointer
->	O
data	pointer
=	O
NULL	O
;	O
return	O
he	pointer
;	O
}	O
}	O
he	pointer
=	O
(	O
struct	O
hashtab_elem	struct
*	O
)	O
xmalloc	function
(	O
sizeof	O
(	O
struct	O
hashtab_elem	struct
)	O
)	O
;	O
he	pointer
->	O
key_len	int
=	O
key_len	int
;	O
he	pointer
->	O
key	pointer
=	O
(	O
char	O
*	O
)	O
xmalloc	function
(	O
sizeof	O
(	O
char	O
)	O
*	O
(	O
he	pointer
->	O
key_len	int
+	O
1	int
)	O
)	O
;	O
memcpy	function
(	O
he	pointer
->	O
key	pointer
,	O
key	pointer
,	O
key_len	int
)	O
;	O
(	O
(	O
char	O
*	O
)	O
he	pointer
->	O
key	pointer
)	O
[	O
he	pointer
->	O
key_len	int
]	O
=	O
'\0'	O
;	O
he	pointer
->	O
ht	pointer
=	O
ht	pointer
;	O
he	pointer
->	O
prev	pointer
=	O
NULL	O
;	O
he	pointer
->	O
hashval	int
=	O
hashval	int
;	O
he	pointer
->	O
next	pointer
=	O
ht	pointer
->	O
table	pointer
[	O
hashval	int
]	O
;	O
if	O
(	O
ht	pointer
->	O
table	pointer
[	O
hashval	int
]	O
)	O
ht	pointer
->	O
table	pointer
[	O
hashval	int
]	O
->	O
prev	pointer
=	O
he	pointer
;	O
ht	pointer
->	O
table	pointer
[	O
hashval	int
]	O
=	O
he	pointer
;	O
ht	pointer
->	O
items_hashed	long
++	O
;	O
if	O
(	O
ht	pointer
->	O
items_hashed	long
>	O
ht	pointer
->	O
resize_size	long
)	O
hashtab_resize	function
(	O
ht	pointer
)	O
;	O
return	O
he	pointer
;	O
}	O
struct	O
hashtab_elem	struct
*	O
hashtab_find	function
(	O
struct	O
hashtab	struct
*	O
ht	pointer
,	O
void	O
*	O
key	pointer
,	O
unsigned	O
int	O
len	int
)	O
{	O
unsigned	O
long	O
hashval	int
;	O
unsigned	O
int	O
key_len	int
;	O
struct	O
hashtab_elem	struct
*	O
he	pointer
;	O
if	O
(	O
ht	pointer
->	O
table	pointer
==	O
NULL	O
)	O
return	O
NULL	O
;	O
key_len	int
=	O
get_key_len	function
(	O
key	pointer
,	O
len	int
,	O
ht	pointer
->	O
numeric	int
)	O
;	O
hashval	int
=	O
hash	function
(	O
key	pointer
,	O
key_len	int
,	O
ht	pointer
->	O
table_size	long
)	O
;	O
for	O
(	O
he	pointer
=	O
ht	pointer
->	O
table	pointer
[	O
hashval	int
]	O
;	O
he	pointer
!=	O
NULL	O
;	O
he	pointer
=	O
he	pointer
->	O
next	pointer
)	O
if	O
(	O
(	O
he	pointer
->	O
key_len	int
==	O
key_len	int
)	O
&&	O
(	O
memcmp	function
(	O
he	pointer
->	O
key	pointer
,	O
key	pointer
,	O
key_len	int
)	O
==	O
0	int
)	O
)	O
return	O
he	pointer
;	O
return	O
NULL	O
;	O
}	O
void	O
*	O
hashtab_get_key	function
(	O
struct	O
hashtab_elem	struct
*	O
he	pointer
)	O
{	O
return	O
he	pointer
->	O
key	pointer
;	O
}	O
void	O
*	O
hashtab_get_value	function
(	O
struct	O
hashtab_elem	struct
*	O
he	pointer
)	O
{	O
return	O
he	pointer
->	O
data	pointer
;	O
}	O
void	O
hashtab_set_value	function
(	O
struct	O
hashtab_elem	struct
*	O
he	pointer
,	O
void	O
*	O
v	pointer
,	O
unsigned	O
int	O
len	int
)	O
{	O
he	pointer
->	O
data	pointer
=	O
(	O
void	O
*	O
)	O
xmalloc	function
(	O
len	int
)	O
;	O
memcpy	function
(	O
he	pointer
->	O
data	pointer
,	O
v	pointer
,	O
len	int
)	O
;	O
}	O
struct	O
hashtab_elem	struct
*	O
hashtab_first	function
(	O
struct	O
hashtab	struct
*	O
ht	pointer
,	O
struct	O
hashtab_order	struct
*	O
ho	pointer
)	O
{	O
ho	pointer
->	O
which	int
=	O
0	int
;	O
ho	pointer
->	O
elem	pointer
=	O
NULL	O
;	O
ho	pointer
->	O
ht	pointer
=	O
ht	pointer
;	O
return	O
hashtab_next	function
(	O
ho	pointer
)	O
;	O
}	O
struct	O
hashtab_elem	struct
*	O
hashtab_next	function
(	O
struct	O
hashtab_order	struct
*	O
ho	pointer
)	O
{	O
unsigned	O
long	O
i	int
;	O
struct	O
hashtab_elem	struct
*	O
he	pointer
;	O
if	O
(	O
ho	pointer
->	O
elem	pointer
)	O
{	O
he	pointer
=	O
ho	pointer
->	O
elem	pointer
;	O
ho	pointer
->	O
elem	pointer
=	O
he	pointer
->	O
next	pointer
;	O
if	O
(	O
he	pointer
->	O
next	pointer
==	O
NULL	O
)	O
ho	pointer
->	O
which	int
++	O
;	O
return	O
he	pointer
;	O
}	O
for	O
(	O
i	int
=	O
ho	pointer
->	O
which	int
;	O
i	int
<	O
ho	pointer
->	O
ht	pointer
->	O
table_size	long
;	O
i	int
++	O
)	O
for	O
(	O
he	pointer
=	O
ho	pointer
->	O
ht	pointer
->	O
table	pointer
[	O
i	int
]	O
;	O
he	pointer
!=	O
NULL	O
;	O
he	pointer
=	O
he	pointer
->	O
next	pointer
)	O
{	O
ho	pointer
->	O
which	int
=	O
(	O
he	pointer
->	O
next	pointer
?	O
i	int
:	O
i	int
+	O
1	int
)	O
;	O
ho	pointer
->	O
elem	pointer
=	O
he	pointer
->	O
next	pointer
;	O
return	O
he	pointer
;	O
}	O
return	O
NULL	O
;	O
}	O
void	O
hashtab_dump_keys	function
(	O
struct	O
hashtab	struct
*	O
ht	pointer
,	O
FILE	struct
*	O
out	pointer
)	O
{	O
struct	O
hashtab_order	struct
ho	pointer
;	O
struct	O
hashtab_elem	struct
*	O
he	pointer
;	O
for	O
(	O
he	pointer
=	O
hashtab_first	function
(	O
ht	pointer
,	O
&	O
ho	pointer
)	O
;	O
he	pointer
!=	O
NULL	O
;	O
he	pointer
=	O
hashtab_next	function
(	O
&	O
ho	pointer
)	O
)	O
fprintf	function
(	O
stddebug	O
,	O
"%s (%d)\n"	pointer
,	O
(	O
char	O
*	O
)	O
he	pointer
->	O
key	pointer
,	O
he	pointer
->	O
key_len	int
)	O
;	O
}	O
void	O
hashtab_delete	function
(	O
struct	O
hashtab_elem	struct
*	O
he	pointer
)	O
{	O
he	pointer
->	O
ht	pointer
->	O
items_hashed	long
--	O
;	O
if	O
(	O
he	pointer
->	O
prev	pointer
)	O
he	pointer
->	O
prev	pointer
->	O
next	pointer
=	O
he	pointer
->	O
next	pointer
;	O
else	O
he	pointer
->	O
ht	pointer
->	O
table	pointer
[	O
he	pointer
->	O
hashval	int
]	O
=	O
he	pointer
->	O
next	pointer
;	O
if	O
(	O
he	pointer
->	O
next	pointer
)	O
he	pointer
->	O
next	pointer
->	O
prev	pointer
=	O
he	pointer
->	O
prev	pointer
;	O
if	O
(	O
he	pointer
->	O
data	pointer
)	O
free	function
(	O
he	pointer
->	O
data	pointer
)	O
;	O
free	function
(	O
he	pointer
->	O
key	pointer
)	O
;	O
free	function
(	O
he	pointer
)	O
;	O
}	O
