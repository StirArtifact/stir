enum	O
opermodes	enum
{	O
literal	int
,	O
indexed	int
,	O
reg	int
,	O
regdef	int
,	O
autodec	int
,	O
autoinc	int
,	O
autoincdef	int
,	O
bytedisp	int
,	O
bytedispdef	int
,	O
worddisp	int
,	O
worddispdef	int
,	O
longdisp	int
,	O
longdispdef	int
,	O
immediate	int
,	O
absolute	int
,	O
byterel	int
,	O
bytereldef	int
,	O
wordrel	int
,	O
wordreldef	int
,	O
longrel	int
,	O
longreldef	int
}	O
;	O
typedef	O
enum	O
opermodes	enum
operandenum	enum
;	O
static	O
Sym	struct
indirectchild	struct
;	O
static	O
operandenum	enum
vax_operandmode	function
(	O
unsigned	O
char	O
*	O
)	O
;	O
static	O
char	O
*	O
vax_operandname	function
(	O
operandenum	enum
)	O
;	O
static	O
long	O
vax_operandlength	function
(	O
unsigned	O
char	O
*	O
)	O
;	O
static	O
bfd_signed_vma	long
vax_offset	function
(	O
unsigned	O
char	O
*	O
)	O
;	O
void	O
vax_find_call	function
(	O
Sym	struct
*	O
,	O
bfd_vma	long
,	O
bfd_vma	long
)	O
;	O
static	O
operandenum	enum
vax_operandmode	function
(	O
unsigned	O
char	O
*	O
modep	pointer
)	O
{	O
int	O
usesreg	int
=	O
*	O
modep	pointer
&	O
0xf	int
;	O
switch	O
(	O
(	O
*	O
modep	pointer
>>	O
4	int
)	O
&	O
0xf	int
)	O
{	O
case	O
0	int
:	O
case	O
1	int
:	O
case	O
2	int
:	O
case	O
3	int
:	O
return	O
literal	int
;	O
case	O
4	int
:	O
return	O
indexed	int
;	O
case	O
5	int
:	O
return	O
reg	int
;	O
case	O
6	int
:	O
return	O
regdef	int
;	O
case	O
7	int
:	O
return	O
autodec	int
;	O
case	O
8	int
:	O
return	O
usesreg	int
!=	O
PC	int
?	O
autoinc	int
:	O
immediate	int
;	O
case	O
9	int
:	O
return	O
usesreg	int
!=	O
PC	int
?	O
autoincdef	int
:	O
absolute	int
;	O
case	O
10	int
:	O
return	O
usesreg	int
!=	O
PC	int
?	O
bytedisp	int
:	O
byterel	int
;	O
case	O
11	int
:	O
return	O
usesreg	int
!=	O
PC	int
?	O
bytedispdef	int
:	O
bytereldef	int
;	O
case	O
12	int
:	O
return	O
usesreg	int
!=	O
PC	int
?	O
worddisp	int
:	O
wordrel	int
;	O
case	O
13	int
:	O
return	O
usesreg	int
!=	O
PC	int
?	O
worddispdef	int
:	O
wordreldef	int
;	O
case	O
14	int
:	O
return	O
usesreg	int
!=	O
PC	int
?	O
longdisp	int
:	O
longrel	int
;	O
case	O
15	int
:	O
return	O
usesreg	int
!=	O
PC	int
?	O
longdispdef	int
:	O
longreldef	int
;	O
}	O
abort	function
(	O
)	O
;	O
}	O
static	O
char	O
*	O
vax_operandname	function
(	O
operandenum	enum
mode	pointer
)	O
{	O
switch	O
(	O
mode	pointer
)	O
{	O
case	O
literal	int
:	O
return	O
"literal"	pointer
;	O
case	O
indexed	int
:	O
return	O
"indexed"	pointer
;	O
case	O
reg	int
:	O
return	O
"register"	pointer
;	O
case	O
regdef	int
:	O
return	O
"register deferred"	pointer
;	O
case	O
autodec	int
:	O
return	O
"autodecrement"	pointer
;	O
case	O
autoinc	int
:	O
return	O
"autoincrement"	pointer
;	O
case	O
autoincdef	int
:	O
return	O
"autoincrement deferred"	pointer
;	O
case	O
bytedisp	int
:	O
return	O
"byte displacement"	pointer
;	O
case	O
bytedispdef	int
:	O
return	O
"byte displacement deferred"	pointer
;	O
case	O
byterel	int
:	O
return	O
"byte relative"	pointer
;	O
case	O
bytereldef	int
:	O
return	O
"byte relative deferred"	pointer
;	O
case	O
worddisp	int
:	O
return	O
"word displacement"	pointer
;	O
case	O
worddispdef	int
:	O
return	O
"word displacement deferred"	pointer
;	O
case	O
wordrel	int
:	O
return	O
"word relative"	pointer
;	O
case	O
wordreldef	int
:	O
return	O
"word relative deferred"	pointer
;	O
case	O
immediate	int
:	O
return	O
"immediate"	pointer
;	O
case	O
absolute	int
:	O
return	O
"absolute"	pointer
;	O
case	O
longdisp	int
:	O
return	O
"long displacement"	pointer
;	O
case	O
longdispdef	int
:	O
return	O
"long displacement deferred"	pointer
;	O
case	O
longrel	int
:	O
return	O
"long relative"	pointer
;	O
case	O
longreldef	int
:	O
return	O
"long relative deferred"	pointer
;	O
}	O
abort	function
(	O
)	O
;	O
}	O
static	O
long	O
vax_operandlength	function
(	O
unsigned	O
char	O
*	O
modep	pointer
)	O
{	O
switch	O
(	O
vax_operandmode	function
(	O
modep	pointer
)	O
)	O
{	O
case	O
literal	int
:	O
case	O
reg	int
:	O
case	O
regdef	int
:	O
case	O
autodec	int
:	O
case	O
autoinc	int
:	O
case	O
autoincdef	int
:	O
return	O
1	int
;	O
case	O
bytedisp	int
:	O
case	O
bytedispdef	int
:	O
case	O
byterel	int
:	O
case	O
bytereldef	int
:	O
return	O
2	int
;	O
case	O
worddisp	int
:	O
case	O
worddispdef	int
:	O
case	O
wordrel	int
:	O
case	O
wordreldef	int
:	O
return	O
3	int
;	O
case	O
immediate	int
:	O
case	O
absolute	int
:	O
case	O
longdisp	int
:	O
case	O
longdispdef	int
:	O
case	O
longrel	int
:	O
case	O
longreldef	int
:	O
return	O
5	int
;	O
case	O
indexed	int
:	O
return	O
1	int
+	O
vax_operandlength	function
(	O
modep	pointer
+	O
1	int
)	O
;	O
}	O
abort	function
(	O
)	O
;	O
}	O
static	O
bfd_signed_vma	long
vax_offset	function
(	O
unsigned	O
char	O
*	O
modep	pointer
)	O
{	O
operandenum	enum
mode	pointer
=	O
vax_operandmode	function
(	O
modep	pointer
)	O
;	O
++	O
modep	pointer
;	O
switch	O
(	O
mode	pointer
)	O
{	O
default	O
:	O
fprintf	function
(	O
stderr	pointer
,	O
"[reladdr] not relative address\n"	pointer
)	O
;	O
return	O
0	int
;	O
case	O
byterel	int
:	O
return	O
1	int
+	O
bfd_get_signed_8	O
(	O
core_bfd	pointer
,	O
modep	pointer
)	O
;	O
case	O
wordrel	int
:	O
return	O
2	int
+	O
bfd_get_signed_16	O
(	O
core_bfd	pointer
,	O
modep	pointer
)	O
;	O
case	O
longrel	int
:	O
return	O
4	int
+	O
bfd_get_signed_32	O
(	O
core_bfd	pointer
,	O
modep	pointer
)	O
;	O
}	O
}	O
void	O
vax_find_call	function
(	O
Sym	struct
*	O
parent	pointer
,	O
bfd_vma	long
p_lowpc	pointer
,	O
bfd_vma	long
p_highpc	pointer
)	O
{	O
unsigned	O
char	O
*	O
instructp	pointer
;	O
long	O
length	long
;	O
Sym	struct
*	O
child	double
;	O
operandenum	enum
mode	pointer
;	O
operandenum	enum
firstmode	enum
;	O
bfd_vma	long
pc	long
,	O
destpc	long
;	O
static	O
bfd_boolean	int
inited	int
=	O
FALSE	int
;	O
if	O
(	O
!	O
inited	int
)	O
{	O
inited	int
=	O
TRUE	int
;	O
sym_init	function
(	O
&	O
indirectchild	struct
)	O
;	O
indirectchild	struct
.	O
cg	struct
.	O
prop	struct
.	O
fract	double
=	O
1.0	int
;	O
indirectchild	struct
.	O
cg	struct
.	O
cyc	struct
.	O
head	pointer
=	O
&	O
indirectchild	struct
;	O
}	O
DBG	O
(	O
CALLDEBUG	O
,	O
printf	function
(	O
"[findcall] %s: 0x%lx to 0x%lx\n"	pointer
,	O
parent	pointer
->	O
name	pointer
,	O
(	O
unsigned	O
long	O
)	O
p_lowpc	pointer
,	O
(	O
unsigned	O
long	O
)	O
p_highpc	pointer
)	O
)	O
;	O
for	O
(	O
pc	long
=	O
p_lowpc	pointer
;	O
pc	long
<	O
p_highpc	pointer
;	O
pc	long
+=	O
length	long
)	O
{	O
length	long
=	O
1	int
;	O
instructp	pointer
=	O
(	O
(	O
unsigned	O
char	O
*	O
)	O
core_text_space	pointer
+	O
pc	long
-	O
core_text_sect	pointer
->	O
vma	long
)	O
;	O
if	O
(	O
(	O
*	O
instructp	pointer
&	O
0xff	int
)	O
==	O
CALLS	int
)	O
{	O
DBG	O
(	O
CALLDEBUG	O
,	O
printf	function
(	O
"[findcall]\t0x%lx:calls"	pointer
,	O
(	O
unsigned	O
long	O
)	O
pc	long
)	O
)	O
;	O
firstmode	enum
=	O
vax_operandmode	function
(	O
instructp	pointer
+	O
length	long
)	O
;	O
switch	O
(	O
firstmode	enum
)	O
{	O
case	O
literal	int
:	O
case	O
immediate	int
:	O
break	O
;	O
default	O
:	O
goto	O
botched	O
;	O
}	O
length	long
+=	O
vax_operandlength	function
(	O
instructp	pointer
+	O
length	long
)	O
;	O
mode	pointer
=	O
vax_operandmode	function
(	O
instructp	pointer
+	O
length	long
)	O
;	O
DBG	O
(	O
CALLDEBUG	O
,	O
printf	function
(	O
"\tfirst operand is %s"	pointer
,	O
vax_operandname	function
(	O
firstmode	enum
)	O
)	O
;	O
printf	function
(	O
"\tsecond operand is %s\n"	pointer
,	O
vax_operandname	function
(	O
mode	pointer
)	O
)	O
)	O
;	O
switch	O
(	O
mode	pointer
)	O
{	O
case	O
regdef	int
:	O
case	O
bytedispdef	int
:	O
case	O
worddispdef	int
:	O
case	O
longdispdef	int
:	O
case	O
bytereldef	int
:	O
case	O
wordreldef	int
:	O
case	O
longreldef	int
:	O
arc_add	function
(	O
parent	pointer
,	O
&	O
indirectchild	struct
,	O
(	O
unsigned	O
long	O
)	O
0	int
)	O
;	O
length	long
+=	O
vax_operandlength	function
(	O
instructp	pointer
+	O
length	long
)	O
;	O
continue	O
;	O
case	O
byterel	int
:	O
case	O
wordrel	int
:	O
case	O
longrel	int
:	O
destpc	long
=	O
pc	long
+	O
vax_offset	function
(	O
instructp	pointer
+	O
length	long
)	O
;	O
if	O
(	O
hist_check_address	function
(	O
destpc	long
)	O
)	O
{	O
child	double
=	O
sym_lookup	function
(	O
&	O
symtab	struct
,	O
destpc	long
)	O
;	O
if	O
(	O
child	double
)	O
{	O
DBG	O
(	O
CALLDEBUG	O
,	O
printf	function
(	O
"[findcall]\tdestpc 0x%lx"	pointer
,	O
(	O
unsigned	O
long	O
)	O
destpc	long
)	O
;	O
printf	function
(	O
" child->name %s"	pointer
,	O
child	double
->	O
name	pointer
)	O
;	O
printf	function
(	O
" child->addr 0x%lx\n"	pointer
,	O
(	O
unsigned	O
long	O
)	O
child	double
->	O
addr	pointer
)	O
;	O
)	O
;	O
if	O
(	O
child	double
->	O
addr	pointer
==	O
destpc	long
)	O
{	O
arc_add	function
(	O
parent	pointer
,	O
child	double
,	O
(	O
unsigned	O
long	O
)	O
0	int
)	O
;	O
length	long
+=	O
vax_operandlength	function
(	O
instructp	pointer
+	O
length	long
)	O
;	O
continue	O
;	O
}	O
}	O
goto	O
botched	O
;	O
}	O
goto	O
botched	O
;	O
default	O
:	O
botched	O
:	O
DBG	O
(	O
CALLDEBUG	O
,	O
printf	function
(	O
"[findcall]\tbut it's a botch\n"	pointer
)	O
)	O
;	O
length	long
=	O
1	int
;	O
continue	O
;	O
}	O
}	O
}	O
}	O
