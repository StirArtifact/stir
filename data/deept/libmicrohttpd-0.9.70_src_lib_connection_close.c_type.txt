void	O
MHD_connection_mark_closed_	function
(	O
struct	O
MHD_Connection	struct
*	O
connection	pointer
)	O
{	O
const	O
struct	O
MHD_Daemon	struct
*	O
daemon	function
=	O
connection	pointer
->	O
daemon	function
;	O
connection	pointer
->	O
request	pointer
.	O
state	pointer
=	O
MHD_REQUEST_CLOSED	int
;	O
connection	pointer
->	O
request	pointer
.	O
event_loop_info	enum
=	O
MHD_EVENT_LOOP_INFO_CLEANUP	int
;	O
if	O
(	O
!	O
daemon	function
->	O
enable_turbo	bool
)	O
{	O
{	O
(	O
void	O
)	O
shutdown	function
(	O
connection	pointer
->	O
socket_fd	int
,	O
SHUT_WR	int
)	O
;	O
}	O
}	O
}	O
void	O
MHD_connection_close_	function
(	O
struct	O
MHD_Connection	struct
*	O
connection	pointer
,	O
enum	O
MHD_RequestTerminationCode	enum
rtc	enum
)	O
{	O
struct	O
MHD_Daemon	struct
*	O
daemon	function
=	O
connection	pointer
->	O
daemon	function
;	O
struct	O
MHD_Response	struct
*	O
resp	pointer
=	O
connection	pointer
->	O
request	pointer
.	O
response	pointer
;	O
(	O
void	O
)	O
rtc	enum
;	O
MHD_connection_mark_closed_	function
(	O
connection	pointer
)	O
;	O
if	O
(	O
NULL	O
!=	O
resp	pointer
)	O
{	O
connection	pointer
->	O
request	pointer
.	O
response	pointer
=	O
NULL	O
;	O
MHD_response_queue_for_destroy	function
(	O
resp	pointer
)	O
;	O
}	O
if	O
(	O
NULL	O
!=	O
daemon	function
->	O
notify_connection_cb	pointer
)	O
daemon	function
->	O
notify_connection_cb	pointer
(	O
daemon	function
->	O
notify_connection_cb_cls	pointer
,	O
connection	pointer
,	O
MHD_CONNECTION_NOTIFY_CLOSED	int
)	O
;	O
}	O
