enum	O
{	O
ACCEPTED	int
=	O
0x1	int
,	O
CLIPPED_FIRST	int
=	O
0x2	int
,	O
CLIPPED_SECOND	int
=	O
0x4	int
}	O
;	O
static	O
void	O
_emit_regis_vector	function
(	O
plIntPoint	struct
istart	struct
,	O
plIntPoint	struct
iend	struct
,	O
bool	enum
skip_null	enum
,	O
char	O
*	O
tmpbuf	pointer
)	O
;	O
void	O
_pl_r_paint_path	function
(	O
S___	O
(	O
Plotter	struct
*	O
_plotter	pointer
)	O
)	O
{	O
char	O
tmpbuf	pointer
[	O
32	int
]	O
;	O
if	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
pen_type	int
==	O
0	int
&&	O
_plotter	pointer
->	O
drawstate	pointer
->	O
fill_type	int
==	O
0	int
)	O
return	O
;	O
switch	O
(	O
(	O
int	O
)	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
->	O
type	enum
)	O
{	O
case	O
(	O
int	O
)	O
PATH_SEGMENT_LIST	int
:	O
{	O
int	O
i	int
;	O
if	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
->	O
num_segments	int
==	O
0	int
)	O
break	O
;	O
if	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
->	O
num_segments	int
==	O
1	int
)	O
break	O
;	O
if	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
fill_type	int
)	O
{	O
bool	enum
within_display	enum
=	O
true	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
->	O
num_segments	int
;	O
i	int
++	O
)	O
{	O
double	O
x	double
,	O
y	double
;	O
int	O
i_x	int
,	O
i_y	int
;	O
x	double
=	O
XD	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
->	O
segments	pointer
[	O
i	int
]	O
.	O
p	struct
.	O
x	double
,	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
->	O
segments	pointer
[	O
i	int
]	O
.	O
p	struct
.	O
y	double
)	O
;	O
y	double
=	O
YD	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
->	O
segments	pointer
[	O
i	int
]	O
.	O
p	struct
.	O
x	double
,	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
->	O
segments	pointer
[	O
i	int
]	O
.	O
p	struct
.	O
y	double
)	O
;	O
i_x	int
=	O
IROUND	O
(	O
x	double
)	O
;	O
i_y	int
=	O
IROUND	O
(	O
y	double
)	O
;	O
if	O
(	O
i_x	int
<	O
REGIS_DEVICE_X_MIN	int
||	O
i_x	int
>	O
REGIS_DEVICE_X_MAX	int
||	O
i_y	int
<	O
REGIS_DEVICE_Y_MIN	int
||	O
i_y	int
>	O
REGIS_DEVICE_Y_MAX	int
)	O
{	O
within_display	enum
=	O
false	int
;	O
break	O
;	O
}	O
}	O
if	O
(	O
within_display	enum
)	O
{	O
double	O
x	double
,	O
y	double
;	O
plIntPoint	struct
first	struct
,	O
oldpoint	struct
,	O
newpoint	struct
;	O
_pl_r_set_fill_color	function
(	O
S___	O
(	O
_plotter	pointer
)	O
)	O
;	O
x	double
=	O
XD	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
->	O
segments	pointer
[	O
0	int
]	O
.	O
p	struct
.	O
x	double
,	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
->	O
segments	pointer
[	O
0	int
]	O
.	O
p	struct
.	O
y	double
)	O
;	O
y	double
=	O
YD	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
->	O
segments	pointer
[	O
0	int
]	O
.	O
p	struct
.	O
x	double
,	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
->	O
segments	pointer
[	O
0	int
]	O
.	O
p	struct
.	O
y	double
)	O
;	O
first	struct
.	O
x	double
=	O
IROUND	O
(	O
x	double
)	O
;	O
first	struct
.	O
y	double
=	O
IROUND	O
(	O
y	double
)	O
;	O
_pl_r_regis_move	function
(	O
R___	O
(	O
_plotter	pointer
)	O
first	struct
.	O
x	double
,	O
first	struct
.	O
y	double
)	O
;	O
_write_string	function
(	O
_plotter	pointer
->	O
data	pointer
,	O
"F("	pointer
)	O
;	O
_write_string	function
(	O
_plotter	pointer
->	O
data	pointer
,	O
"V"	pointer
)	O
;	O
oldpoint	struct
=	O
first	struct
;	O
for	O
(	O
i	int
=	O
1	int
;	O
i	int
<	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
->	O
num_segments	int
;	O
i	int
++	O
)	O
{	O
x	double
=	O
XD	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
->	O
segments	pointer
[	O
i	int
]	O
.	O
p	struct
.	O
x	double
,	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
->	O
segments	pointer
[	O
i	int
]	O
.	O
p	struct
.	O
y	double
)	O
;	O
y	double
=	O
YD	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
->	O
segments	pointer
[	O
i	int
]	O
.	O
p	struct
.	O
x	double
,	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
->	O
segments	pointer
[	O
i	int
]	O
.	O
p	struct
.	O
y	double
)	O
;	O
newpoint	struct
.	O
x	double
=	O
IROUND	O
(	O
x	double
)	O
;	O
newpoint	struct
.	O
y	double
=	O
IROUND	O
(	O
y	double
)	O
;	O
_emit_regis_vector	function
(	O
oldpoint	struct
,	O
newpoint	struct
,	O
i	int
>	O
1	int
?	O
true	int
:	O
false	int
,	O
tmpbuf	pointer
)	O
;	O
_write_string	function
(	O
_plotter	pointer
->	O
data	pointer
,	O
tmpbuf	pointer
)	O
;	O
oldpoint	struct
=	O
newpoint	struct
;	O
}	O
_emit_regis_vector	function
(	O
newpoint	struct
,	O
first	struct
,	O
true	int
,	O
tmpbuf	pointer
)	O
;	O
_write_string	function
(	O
_plotter	pointer
->	O
data	pointer
,	O
tmpbuf	pointer
)	O
;	O
_write_string	function
(	O
_plotter	pointer
->	O
data	pointer
,	O
")\n"	pointer
)	O
;	O
_plotter	pointer
->	O
regis_position_is_unknown	enum
=	O
true	int
;	O
}	O
else	O
{	O
}	O
}	O
if	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
pen_type	int
)	O
{	O
bool	enum
attributes_set	enum
=	O
false	int
;	O
bool	enum
path_in_progress	enum
=	O
false	int
;	O
for	O
(	O
i	int
=	O
1	int
;	O
i	int
<	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
->	O
num_segments	int
;	O
i	int
++	O
)	O
{	O
plPoint	struct
start	struct
,	O
end	struct
;	O
plIntPoint	struct
istart	struct
,	O
iend	struct
;	O
int	O
clipval	int
;	O
start	struct
.	O
x	double
=	O
XD	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
->	O
segments	pointer
[	O
i	int
-	O
1	int
]	O
.	O
p	struct
.	O
x	double
,	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
->	O
segments	pointer
[	O
i	int
-	O
1	int
]	O
.	O
p	struct
.	O
y	double
)	O
;	O
start	struct
.	O
y	double
=	O
YD	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
->	O
segments	pointer
[	O
i	int
-	O
1	int
]	O
.	O
p	struct
.	O
x	double
,	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
->	O
segments	pointer
[	O
i	int
-	O
1	int
]	O
.	O
p	struct
.	O
y	double
)	O
;	O
end	struct
.	O
x	double
=	O
XD	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
->	O
segments	pointer
[	O
i	int
]	O
.	O
p	struct
.	O
x	double
,	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
->	O
segments	pointer
[	O
i	int
]	O
.	O
p	struct
.	O
y	double
)	O
;	O
end	struct
.	O
y	double
=	O
YD	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
->	O
segments	pointer
[	O
i	int
]	O
.	O
p	struct
.	O
x	double
,	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
->	O
segments	pointer
[	O
i	int
]	O
.	O
p	struct
.	O
y	double
)	O
;	O
clipval	int
=	O
_clip_line	function
(	O
&	O
start	struct
.	O
x	double
,	O
&	O
start	struct
.	O
y	double
,	O
&	O
end	struct
.	O
x	double
,	O
&	O
end	struct
.	O
y	double
,	O
REGIS_DEVICE_X_MIN_CLIP	O
,	O
REGIS_DEVICE_X_MAX_CLIP	O
,	O
REGIS_DEVICE_Y_MIN_CLIP	O
,	O
REGIS_DEVICE_Y_MAX_CLIP	O
)	O
;	O
if	O
(	O
!	O
(	O
clipval	int
&	O
ACCEPTED	int
)	O
)	O
{	O
if	O
(	O
path_in_progress	enum
)	O
_write_string	function
(	O
_plotter	pointer
->	O
data	pointer
,	O
"\n"	pointer
)	O
;	O
path_in_progress	enum
=	O
false	int
;	O
continue	O
;	O
}	O
if	O
(	O
clipval	int
&	O
CLIPPED_FIRST	int
)	O
{	O
if	O
(	O
path_in_progress	enum
)	O
_write_string	function
(	O
_plotter	pointer
->	O
data	pointer
,	O
"\n"	pointer
)	O
;	O
path_in_progress	enum
=	O
false	int
;	O
}	O
istart	struct
.	O
x	double
=	O
IROUND	O
(	O
start	struct
.	O
x	double
)	O
;	O
istart	struct
.	O
y	double
=	O
IROUND	O
(	O
start	struct
.	O
y	double
)	O
;	O
iend	struct
.	O
x	double
=	O
IROUND	O
(	O
end	struct
.	O
x	double
)	O
;	O
iend	struct
.	O
y	double
=	O
IROUND	O
(	O
end	struct
.	O
y	double
)	O
;	O
if	O
(	O
path_in_progress	enum
&&	O
istart	struct
.	O
x	double
==	O
iend	struct
.	O
x	double
&&	O
istart	struct
.	O
y	double
==	O
iend	struct
.	O
y	double
)	O
continue	O
;	O
if	O
(	O
attributes_set	enum
==	O
false	int
)	O
{	O
_pl_r_set_attributes	function
(	O
S___	O
(	O
_plotter	pointer
)	O
)	O
;	O
_pl_r_set_pen_color	function
(	O
S___	O
(	O
_plotter	pointer
)	O
)	O
;	O
attributes_set	enum
=	O
true	int
;	O
}	O
if	O
(	O
path_in_progress	enum
==	O
false	int
)	O
{	O
_pl_r_regis_move	function
(	O
R___	O
(	O
_plotter	pointer
)	O
istart	struct
.	O
x	double
,	O
istart	struct
.	O
y	double
)	O
;	O
_write_string	function
(	O
_plotter	pointer
->	O
data	pointer
,	O
"V"	pointer
)	O
;	O
if	O
(	O
iend	struct
.	O
x	double
!=	O
istart	struct
.	O
x	double
||	O
iend	struct
.	O
y	double
!=	O
istart	struct
.	O
y	double
)	O
_write_string	function
(	O
_plotter	pointer
->	O
data	pointer
,	O
"[]"	pointer
)	O
;	O
path_in_progress	enum
=	O
true	int
;	O
}	O
_emit_regis_vector	function
(	O
istart	struct
,	O
iend	struct
,	O
true	int
,	O
tmpbuf	pointer
)	O
;	O
_write_string	function
(	O
_plotter	pointer
->	O
data	pointer
,	O
tmpbuf	pointer
)	O
;	O
_plotter	pointer
->	O
regis_pos	struct
.	O
x	double
=	O
iend	struct
.	O
x	double
;	O
_plotter	pointer
->	O
regis_pos	struct
.	O
y	double
=	O
iend	struct
.	O
y	double
;	O
}	O
if	O
(	O
path_in_progress	enum
==	O
true	int
)	O
_write_string	function
(	O
_plotter	pointer
->	O
data	pointer
,	O
"\n"	pointer
)	O
;	O
}	O
}	O
break	O
;	O
case	O
(	O
int	O
)	O
PATH_CIRCLE	int
:	O
{	O
double	O
xd	double
,	O
yd	double
,	O
radius_d	double
;	O
int	O
i_x	int
,	O
i_y	int
,	O
i_radius	int
;	O
plPoint	struct
pc	struct
;	O
double	O
radius	double
;	O
pc	struct
=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
->	O
pc	struct
;	O
radius	double
=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
->	O
radius	double
;	O
xd	double
=	O
XD	O
(	O
pc	struct
.	O
x	double
,	O
pc	struct
.	O
y	double
)	O
;	O
yd	double
=	O
YD	O
(	O
pc	struct
.	O
x	double
,	O
pc	struct
.	O
y	double
)	O
;	O
radius_d	double
=	O
sqrt	function
(	O
XDV	O
(	O
radius	double
,	O
0	int
)	O
*	O
XDV	O
(	O
radius	double
,	O
0	int
)	O
+	O
YDV	O
(	O
radius	double
,	O
0	int
)	O
*	O
YDV	O
(	O
radius	double
,	O
0	int
)	O
)	O
;	O
i_x	int
=	O
IROUND	O
(	O
xd	double
)	O
;	O
i_y	int
=	O
IROUND	O
(	O
yd	double
)	O
;	O
i_radius	int
=	O
IROUND	O
(	O
radius_d	double
)	O
;	O
if	O
(	O
i_x	int
-	O
i_radius	int
<	O
REGIS_DEVICE_X_MIN	int
||	O
i_x	int
+	O
i_radius	int
>	O
REGIS_DEVICE_X_MAX	int
||	O
i_y	int
-	O
i_radius	int
<	O
REGIS_DEVICE_Y_MIN	int
||	O
i_y	int
+	O
i_radius	int
>	O
REGIS_DEVICE_Y_MAX	int
)	O
{	O
plPath	struct
*	O
oldpath	pointer
=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
;	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
=	O
_flatten_path	function
(	O
oldpath	pointer
)	O
;	O
_plotter	pointer
->	O
paint_path	pointer
(	O
S___	O
(	O
_plotter	pointer
)	O
)	O
;	O
_delete_plPath	function
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
)	O
;	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
=	O
oldpath	pointer
;	O
}	O
else	O
{	O
if	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
fill_type	int
)	O
{	O
_pl_r_set_fill_color	function
(	O
S___	O
(	O
_plotter	pointer
)	O
)	O
;	O
_pl_r_regis_move	function
(	O
R___	O
(	O
_plotter	pointer
)	O
i_x	int
,	O
i_y	int
)	O
;	O
if	O
(	O
i_radius	int
>	O
0	int
)	O
{	O
sprintf	function
(	O
tmpbuf	pointer
,	O
"F(C[+%d])\n"	pointer
,	O
i_radius	int
)	O
;	O
_plotter	pointer
->	O
regis_position_is_unknown	enum
=	O
true	int
;	O
}	O
else	O
sprintf	function
(	O
tmpbuf	pointer
,	O
"V[]\n"	pointer
)	O
;	O
_write_string	function
(	O
_plotter	pointer
->	O
data	pointer
,	O
tmpbuf	pointer
)	O
;	O
}	O
if	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
pen_type	int
)	O
{	O
_pl_r_set_attributes	function
(	O
S___	O
(	O
_plotter	pointer
)	O
)	O
;	O
_pl_r_set_pen_color	function
(	O
S___	O
(	O
_plotter	pointer
)	O
)	O
;	O
_pl_r_regis_move	function
(	O
R___	O
(	O
_plotter	pointer
)	O
i_x	int
,	O
i_y	int
)	O
;	O
if	O
(	O
i_radius	int
>	O
0	int
)	O
{	O
sprintf	function
(	O
tmpbuf	pointer
,	O
"C[+%d]\n"	pointer
,	O
i_radius	int
)	O
;	O
_plotter	pointer
->	O
regis_position_is_unknown	enum
=	O
true	int
;	O
}	O
else	O
sprintf	function
(	O
tmpbuf	pointer
,	O
"V[]\n"	pointer
)	O
;	O
_write_string	function
(	O
_plotter	pointer
->	O
data	pointer
,	O
tmpbuf	pointer
)	O
;	O
}	O
}	O
}	O
break	O
;	O
default	O
:	O
break	O
;	O
}	O
}	O
void	O
_pl_r_regis_move	function
(	O
R___	O
(	O
Plotter	struct
*	O
_plotter	pointer
)	O
int	O
xx	int
,	O
int	O
yy	int
)	O
{	O
char	O
tmpbuf	pointer
[	O
32	int
]	O
;	O
plIntPoint	struct
newpoint	struct
;	O
if	O
(	O
xx	int
<	O
REGIS_DEVICE_X_MIN	int
||	O
xx	int
>	O
REGIS_DEVICE_X_MAX	int
||	O
yy	int
<	O
REGIS_DEVICE_Y_MIN	int
||	O
yy	int
>	O
REGIS_DEVICE_Y_MAX	int
)	O
return	O
;	O
newpoint	struct
.	O
x	double
=	O
xx	int
;	O
newpoint	struct
.	O
y	double
=	O
yy	int
;	O
if	O
(	O
_plotter	pointer
->	O
regis_position_is_unknown	enum
)	O
{	O
sprintf	function
(	O
tmpbuf	pointer
,	O
"P[%d,%d]\n"	pointer
,	O
xx	int
,	O
yy	int
)	O
;	O
_write_string	function
(	O
_plotter	pointer
->	O
data	pointer
,	O
tmpbuf	pointer
)	O
;	O
}	O
else	O
if	O
(	O
xx	int
!=	O
_plotter	pointer
->	O
regis_pos	struct
.	O
x	double
||	O
yy	int
!=	O
_plotter	pointer
->	O
regis_pos	struct
.	O
y	double
)	O
{	O
_write_string	function
(	O
_plotter	pointer
->	O
data	pointer
,	O
"P"	pointer
)	O
;	O
_emit_regis_vector	function
(	O
_plotter	pointer
->	O
regis_pos	struct
,	O
newpoint	struct
,	O
false	int
,	O
tmpbuf	pointer
)	O
;	O
_write_string	function
(	O
_plotter	pointer
->	O
data	pointer
,	O
tmpbuf	pointer
)	O
;	O
_write_string	function
(	O
_plotter	pointer
->	O
data	pointer
,	O
"\n"	pointer
)	O
;	O
}	O
_plotter	pointer
->	O
regis_position_is_unknown	enum
=	O
false	int
;	O
_plotter	pointer
->	O
regis_pos	struct
=	O
newpoint	struct
;	O
}	O
static	O
void	O
_emit_regis_vector	function
(	O
plIntPoint	struct
istart	struct
,	O
plIntPoint	struct
iend	struct
,	O
bool	enum
skip_null	enum
,	O
char	O
*	O
tmpbuf	pointer
)	O
{	O
plIntVector	struct
v	pointer
;	O
bool	enum
xneg	enum
=	O
false	int
,	O
yneg	enum
=	O
false	int
;	O
char	O
xrelbuf	array
[	O
32	int
]	O
,	O
yrelbuf	array
[	O
32	int
]	O
,	O
xbuf	array
[	O
32	int
]	O
,	O
ybuf	array
[	O
32	int
]	O
;	O
int	O
xrellen	int
,	O
yrellen	int
,	O
xlen	int
,	O
ylen	int
;	O
char	O
*	O
x	double
,	O
*	O
y	double
;	O
v	pointer
.	O
x	double
=	O
iend	struct
.	O
x	double
-	O
istart	struct
.	O
x	double
;	O
v	pointer
.	O
y	double
=	O
iend	struct
.	O
y	double
-	O
istart	struct
.	O
y	double
;	O
if	O
(	O
v	pointer
.	O
x	double
==	O
0	int
&&	O
v	pointer
.	O
y	double
==	O
0	int
)	O
{	O
if	O
(	O
skip_null	enum
==	O
false	int
)	O
sprintf	function
(	O
tmpbuf	pointer
,	O
"[]"	pointer
)	O
;	O
else	O
*	O
tmpbuf	pointer
=	O
'\0'	O
;	O
return	O
;	O
}	O
if	O
(	O
v	pointer
.	O
x	double
<	O
0	int
)	O
{	O
xneg	enum
=	O
true	int
;	O
v	pointer
.	O
x	double
=	O
-	O
v	pointer
.	O
x	double
;	O
}	O
if	O
(	O
v	pointer
.	O
y	double
<	O
0	int
)	O
{	O
yneg	enum
=	O
true	int
;	O
v	pointer
.	O
y	double
=	O
-	O
v	pointer
.	O
y	double
;	O
}	O
sprintf	function
(	O
xrelbuf	array
,	O
"%s%d"	pointer
,	O
(	O
xneg	enum
?	O
"-"	pointer
:	O
"+"	pointer
)	O
,	O
v	pointer
.	O
x	double
)	O
;	O
xrellen	int
=	O
strlen	function
(	O
xrelbuf	array
)	O
;	O
sprintf	function
(	O
yrelbuf	array
,	O
"%s%d"	pointer
,	O
(	O
yneg	enum
?	O
"-"	pointer
:	O
"+"	pointer
)	O
,	O
v	pointer
.	O
y	double
)	O
;	O
yrellen	int
=	O
strlen	function
(	O
yrelbuf	array
)	O
;	O
sprintf	function
(	O
xbuf	array
,	O
"%d"	pointer
,	O
iend	struct
.	O
x	double
)	O
;	O
xlen	int
=	O
strlen	function
(	O
xbuf	array
)	O
;	O
sprintf	function
(	O
ybuf	array
,	O
"%d"	pointer
,	O
iend	struct
.	O
y	double
)	O
;	O
ylen	int
=	O
strlen	function
(	O
ybuf	array
)	O
;	O
x	double
=	O
(	O
xrellen	int
<=	O
xlen	int
?	O
xrelbuf	array
:	O
xbuf	array
)	O
;	O
y	double
=	O
(	O
yrellen	int
<=	O
ylen	int
?	O
yrelbuf	array
:	O
ybuf	array
)	O
;	O
if	O
(	O
v	pointer
.	O
x	double
==	O
0	int
)	O
sprintf	function
(	O
tmpbuf	pointer
,	O
"[,%s]"	pointer
,	O
y	double
)	O
;	O
else	O
if	O
(	O
v	pointer
.	O
y	double
==	O
0	int
)	O
sprintf	function
(	O
tmpbuf	pointer
,	O
"[%s]"	pointer
,	O
x	double
)	O
;	O
else	O
sprintf	function
(	O
tmpbuf	pointer
,	O
"[%s,%s]"	pointer
,	O
x	double
,	O
y	double
)	O
;	O
}	O
bool	enum
_pl_r_paint_paths	function
(	O
S___	O
(	O
Plotter	struct
*	O
_plotter	pointer
)	O
)	O
{	O
return	O
false	int
;	O
}	O
bool	enum
_pl_r_path_is_flushable	function
(	O
S___	O
(	O
Plotter	struct
*	O
_plotter	pointer
)	O
)	O
{	O
return	O
true	int
;	O
}	O
void	O
_pl_r_maybe_prepaint_segments	function
(	O
R___	O
(	O
Plotter	struct
*	O
_plotter	pointer
)	O
int	O
prev_num_segments	int
)	O
{	O
}	O
