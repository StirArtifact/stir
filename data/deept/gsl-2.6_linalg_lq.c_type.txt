int	O
gsl_linalg_LQ_decomp	function
(	O
gsl_matrix	struct
*	O
A	pointer
,	O
gsl_vector	struct
*	O
tau	double
)	O
{	O
const	O
size_t	long
N	int
=	O
A	pointer
->	O
size1	long
;	O
const	O
size_t	long
M	int
=	O
A	pointer
->	O
size2	long
;	O
if	O
(	O
tau	double
->	O
size	long
!=	O
GSL_MIN	O
(	O
M	int
,	O
N	int
)	O
)	O
{	O
GSL_ERROR	O
(	O
"size of tau must be MIN(M,N)"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
size_t	long
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
GSL_MIN	O
(	O
M	int
,	O
N	int
)	O
;	O
i	long
++	O
)	O
{	O
gsl_vector_view	struct
c	pointer
=	O
gsl_matrix_subrow	function
(	O
A	pointer
,	O
i	long
,	O
i	long
,	O
M	int
-	O
i	long
)	O
;	O
double	O
tau_i	double
=	O
gsl_linalg_householder_transform	function
(	O
&	O
(	O
c	pointer
.	O
vector	struct
)	O
)	O
;	O
gsl_vector_set	function
(	O
tau	double
,	O
i	long
,	O
tau_i	double
)	O
;	O
if	O
(	O
i	long
+	O
1	int
<	O
N	int
)	O
{	O
gsl_matrix_view	struct
m	pointer
=	O
gsl_matrix_submatrix	function
(	O
A	pointer
,	O
i	long
+	O
1	int
,	O
i	long
,	O
N	int
-	O
(	O
i	long
+	O
1	int
)	O
,	O
M	int
-	O
i	long
)	O
;	O
gsl_linalg_householder_mh	function
(	O
tau_i	double
,	O
&	O
(	O
c	pointer
.	O
vector	struct
)	O
,	O
&	O
(	O
m	pointer
.	O
matrix	struct
)	O
)	O
;	O
}	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
int	O
gsl_linalg_LQ_solve_T	function
(	O
const	O
gsl_matrix	struct
*	O
LQ	pointer
,	O
const	O
gsl_vector	struct
*	O
tau	double
,	O
const	O
gsl_vector	struct
*	O
b	double
,	O
gsl_vector	struct
*	O
x	double
)	O
{	O
if	O
(	O
LQ	pointer
->	O
size1	long
!=	O
LQ	pointer
->	O
size2	long
)	O
{	O
GSL_ERROR	O
(	O
"LQ matrix must be square"	pointer
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
if	O
(	O
LQ	pointer
->	O
size2	long
!=	O
b	double
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"matrix size must match b size"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
LQ	pointer
->	O
size1	long
!=	O
x	double
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"matrix size must match solution size"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
gsl_vector_memcpy	function
(	O
x	double
,	O
b	double
)	O
;	O
gsl_linalg_LQ_svx_T	function
(	O
LQ	pointer
,	O
tau	double
,	O
x	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
int	O
gsl_linalg_LQ_svx_T	function
(	O
const	O
gsl_matrix	struct
*	O
LQ	pointer
,	O
const	O
gsl_vector	struct
*	O
tau	double
,	O
gsl_vector	struct
*	O
x	double
)	O
{	O
if	O
(	O
LQ	pointer
->	O
size1	long
!=	O
LQ	pointer
->	O
size2	long
)	O
{	O
GSL_ERROR	O
(	O
"LQ matrix must be square"	pointer
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
if	O
(	O
LQ	pointer
->	O
size1	long
!=	O
x	double
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"matrix size must match x/rhs size"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
gsl_linalg_LQ_vecQT	function
(	O
LQ	pointer
,	O
tau	double
,	O
x	double
)	O
;	O
gsl_blas_dtrsv	function
(	O
CblasLower	int
,	O
CblasTrans	int
,	O
CblasNonUnit	int
,	O
LQ	pointer
,	O
x	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
int	O
gsl_linalg_LQ_lssolve_T	function
(	O
const	O
gsl_matrix	struct
*	O
LQ	pointer
,	O
const	O
gsl_vector	struct
*	O
tau	double
,	O
const	O
gsl_vector	struct
*	O
b	double
,	O
gsl_vector	struct
*	O
x	double
,	O
gsl_vector	struct
*	O
residual	pointer
)	O
{	O
const	O
size_t	long
N	int
=	O
LQ	pointer
->	O
size1	long
;	O
const	O
size_t	long
M	int
=	O
LQ	pointer
->	O
size2	long
;	O
if	O
(	O
M	int
<	O
N	int
)	O
{	O
GSL_ERROR	O
(	O
"LQ matrix must have M>=N"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
M	int
!=	O
b	double
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"matrix size must match b size"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
N	int
!=	O
x	double
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"matrix size must match solution size"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
M	int
!=	O
residual	pointer
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"matrix size must match residual size"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
gsl_matrix_const_view	struct
L	pointer
=	O
gsl_matrix_const_submatrix	function
(	O
LQ	pointer
,	O
0	int
,	O
0	int
,	O
N	int
,	O
N	int
)	O
;	O
gsl_vector_view	struct
c	pointer
=	O
gsl_vector_subvector	function
(	O
residual	pointer
,	O
0	int
,	O
N	int
)	O
;	O
gsl_vector_memcpy	function
(	O
residual	pointer
,	O
b	double
)	O
;	O
gsl_linalg_LQ_vecQT	function
(	O
LQ	pointer
,	O
tau	double
,	O
residual	pointer
)	O
;	O
gsl_vector_memcpy	function
(	O
x	double
,	O
&	O
(	O
c	pointer
.	O
vector	struct
)	O
)	O
;	O
gsl_blas_dtrsv	function
(	O
CblasLower	int
,	O
CblasTrans	int
,	O
CblasNonUnit	int
,	O
&	O
(	O
L	pointer
.	O
matrix	struct
)	O
,	O
x	double
)	O
;	O
gsl_vector_set_zero	function
(	O
&	O
(	O
c	pointer
.	O
vector	struct
)	O
)	O
;	O
gsl_linalg_LQ_vecQ	function
(	O
LQ	pointer
,	O
tau	double
,	O
residual	pointer
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
int	O
gsl_linalg_LQ_Lsolve_T	function
(	O
const	O
gsl_matrix	struct
*	O
LQ	pointer
,	O
const	O
gsl_vector	struct
*	O
b	double
,	O
gsl_vector	struct
*	O
x	double
)	O
{	O
if	O
(	O
LQ	pointer
->	O
size1	long
!=	O
LQ	pointer
->	O
size2	long
)	O
{	O
GSL_ERROR	O
(	O
"LQ matrix must be square"	pointer
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
if	O
(	O
LQ	pointer
->	O
size1	long
!=	O
b	double
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"matrix size must match b size"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
LQ	pointer
->	O
size1	long
!=	O
x	double
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"matrix size must match x size"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
gsl_vector_memcpy	function
(	O
x	double
,	O
b	double
)	O
;	O
gsl_blas_dtrsv	function
(	O
CblasLower	int
,	O
CblasTrans	int
,	O
CblasNonUnit	int
,	O
LQ	pointer
,	O
x	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
int	O
gsl_linalg_LQ_Lsvx_T	function
(	O
const	O
gsl_matrix	struct
*	O
LQ	pointer
,	O
gsl_vector	struct
*	O
x	double
)	O
{	O
if	O
(	O
LQ	pointer
->	O
size1	long
!=	O
LQ	pointer
->	O
size2	long
)	O
{	O
GSL_ERROR	O
(	O
"LQ matrix must be square"	pointer
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
if	O
(	O
LQ	pointer
->	O
size2	long
!=	O
x	double
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"matrix size must match rhs size"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
gsl_blas_dtrsv	function
(	O
CblasLower	int
,	O
CblasTrans	int
,	O
CblasNonUnit	int
,	O
LQ	pointer
,	O
x	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
int	O
gsl_linalg_L_solve_T	function
(	O
const	O
gsl_matrix	struct
*	O
L	pointer
,	O
const	O
gsl_vector	struct
*	O
b	double
,	O
gsl_vector	struct
*	O
x	double
)	O
{	O
if	O
(	O
L	pointer
->	O
size1	long
!=	O
L	pointer
->	O
size2	long
)	O
{	O
GSL_ERROR	O
(	O
"R matrix must be square"	pointer
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
if	O
(	O
L	pointer
->	O
size2	long
!=	O
b	double
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"matrix size must match b size"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
L	pointer
->	O
size1	long
!=	O
x	double
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"matrix size must match solution size"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
gsl_vector_memcpy	function
(	O
x	double
,	O
b	double
)	O
;	O
gsl_blas_dtrsv	function
(	O
CblasLower	int
,	O
CblasTrans	int
,	O
CblasNonUnit	int
,	O
L	pointer
,	O
x	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
int	O
gsl_linalg_LQ_vecQT	function
(	O
const	O
gsl_matrix	struct
*	O
LQ	pointer
,	O
const	O
gsl_vector	struct
*	O
tau	double
,	O
gsl_vector	struct
*	O
v	pointer
)	O
{	O
const	O
size_t	long
N	int
=	O
LQ	pointer
->	O
size1	long
;	O
const	O
size_t	long
M	int
=	O
LQ	pointer
->	O
size2	long
;	O
if	O
(	O
tau	double
->	O
size	long
!=	O
GSL_MIN	O
(	O
M	int
,	O
N	int
)	O
)	O
{	O
GSL_ERROR	O
(	O
"size of tau must be MIN(M,N)"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
v	pointer
->	O
size	long
!=	O
M	int
)	O
{	O
GSL_ERROR	O
(	O
"vector size must be M"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
size_t	long
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
GSL_MIN	O
(	O
M	int
,	O
N	int
)	O
;	O
i	long
++	O
)	O
{	O
gsl_vector_const_view	struct
c	pointer
=	O
gsl_matrix_const_row	function
(	O
LQ	pointer
,	O
i	long
)	O
;	O
gsl_vector_const_view	struct
h	pointer
=	O
gsl_vector_const_subvector	function
(	O
&	O
(	O
c	pointer
.	O
vector	struct
)	O
,	O
i	long
,	O
M	int
-	O
i	long
)	O
;	O
gsl_vector_view	struct
w	pointer
=	O
gsl_vector_subvector	function
(	O
v	pointer
,	O
i	long
,	O
M	int
-	O
i	long
)	O
;	O
double	O
ti	double
=	O
gsl_vector_get	function
(	O
tau	double
,	O
i	long
)	O
;	O
gsl_linalg_householder_hv	function
(	O
ti	double
,	O
&	O
(	O
h	pointer
.	O
vector	struct
)	O
,	O
&	O
(	O
w	pointer
.	O
vector	struct
)	O
)	O
;	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
int	O
gsl_linalg_LQ_vecQ	function
(	O
const	O
gsl_matrix	struct
*	O
LQ	pointer
,	O
const	O
gsl_vector	struct
*	O
tau	double
,	O
gsl_vector	struct
*	O
v	pointer
)	O
{	O
const	O
size_t	long
N	int
=	O
LQ	pointer
->	O
size1	long
;	O
const	O
size_t	long
M	int
=	O
LQ	pointer
->	O
size2	long
;	O
if	O
(	O
tau	double
->	O
size	long
!=	O
GSL_MIN	O
(	O
M	int
,	O
N	int
)	O
)	O
{	O
GSL_ERROR	O
(	O
"size of tau must be MIN(M,N)"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
v	pointer
->	O
size	long
!=	O
M	int
)	O
{	O
GSL_ERROR	O
(	O
"vector size must be M"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
size_t	long
i	long
;	O
for	O
(	O
i	long
=	O
GSL_MIN	O
(	O
M	int
,	O
N	int
)	O
;	O
i	long
--	O
>	O
0	int
;	O
)	O
{	O
gsl_vector_const_view	struct
c	pointer
=	O
gsl_matrix_const_row	function
(	O
LQ	pointer
,	O
i	long
)	O
;	O
gsl_vector_const_view	struct
h	pointer
=	O
gsl_vector_const_subvector	function
(	O
&	O
(	O
c	pointer
.	O
vector	struct
)	O
,	O
i	long
,	O
M	int
-	O
i	long
)	O
;	O
gsl_vector_view	struct
w	pointer
=	O
gsl_vector_subvector	function
(	O
v	pointer
,	O
i	long
,	O
M	int
-	O
i	long
)	O
;	O
double	O
ti	double
=	O
gsl_vector_get	function
(	O
tau	double
,	O
i	long
)	O
;	O
gsl_linalg_householder_hv	function
(	O
ti	double
,	O
&	O
(	O
h	pointer
.	O
vector	struct
)	O
,	O
&	O
(	O
w	pointer
.	O
vector	struct
)	O
)	O
;	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
int	O
gsl_linalg_LQ_unpack	function
(	O
const	O
gsl_matrix	struct
*	O
LQ	pointer
,	O
const	O
gsl_vector	struct
*	O
tau	double
,	O
gsl_matrix	struct
*	O
Q	pointer
,	O
gsl_matrix	struct
*	O
L	pointer
)	O
{	O
const	O
size_t	long
M	int
=	O
LQ	pointer
->	O
size1	long
;	O
const	O
size_t	long
N	int
=	O
LQ	pointer
->	O
size2	long
;	O
if	O
(	O
Q	pointer
->	O
size1	long
!=	O
N	int
||	O
Q	pointer
->	O
size2	long
!=	O
N	int
)	O
{	O
GSL_ERROR	O
(	O
"Q matrix must be N x N"	pointer
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
if	O
(	O
L	pointer
->	O
size1	long
!=	O
M	int
||	O
L	pointer
->	O
size2	long
!=	O
N	int
)	O
{	O
GSL_ERROR	O
(	O
"L matrix must be N x M"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
tau	double
->	O
size	long
!=	O
GSL_MIN	O
(	O
M	int
,	O
N	int
)	O
)	O
{	O
GSL_ERROR	O
(	O
"size of tau must be MIN(M,N)"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
size_t	long
i	long
,	O
j	long
,	O
l_border	long
;	O
gsl_matrix_set_identity	function
(	O
Q	pointer
)	O
;	O
for	O
(	O
i	long
=	O
GSL_MIN	O
(	O
M	int
,	O
N	int
)	O
;	O
i	long
--	O
>	O
0	int
;	O
)	O
{	O
gsl_vector_const_view	struct
h	pointer
=	O
gsl_matrix_const_subrow	function
(	O
LQ	pointer
,	O
i	long
,	O
i	long
,	O
N	int
-	O
i	long
)	O
;	O
gsl_matrix_view	struct
m	pointer
=	O
gsl_matrix_submatrix	function
(	O
Q	pointer
,	O
i	long
,	O
i	long
,	O
N	int
-	O
i	long
,	O
N	int
-	O
i	long
)	O
;	O
double	O
ti	double
=	O
gsl_vector_get	function
(	O
tau	double
,	O
i	long
)	O
;	O
gsl_linalg_householder_mh	function
(	O
ti	double
,	O
&	O
h	pointer
.	O
vector	struct
,	O
&	O
m	pointer
.	O
matrix	struct
)	O
;	O
}	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
M	int
;	O
i	long
++	O
)	O
{	O
l_border	long
=	O
GSL_MIN	O
(	O
i	long
,	O
N	int
-	O
1	int
)	O
;	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<=	O
l_border	long
;	O
j	long
++	O
)	O
gsl_matrix_set	function
(	O
L	pointer
,	O
i	long
,	O
j	long
,	O
gsl_matrix_get	function
(	O
LQ	pointer
,	O
i	long
,	O
j	long
)	O
)	O
;	O
for	O
(	O
j	long
=	O
l_border	long
+	O
1	int
;	O
j	long
<	O
N	int
;	O
j	long
++	O
)	O
gsl_matrix_set	function
(	O
L	pointer
,	O
i	long
,	O
j	long
,	O
0.0	int
)	O
;	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
int	O
gsl_linalg_LQ_update	function
(	O
gsl_matrix	struct
*	O
Q	pointer
,	O
gsl_matrix	struct
*	O
L	pointer
,	O
const	O
gsl_vector	struct
*	O
v	pointer
,	O
gsl_vector	struct
*	O
w	pointer
)	O
{	O
const	O
size_t	long
N	int
=	O
L	pointer
->	O
size1	long
;	O
const	O
size_t	long
M	int
=	O
L	pointer
->	O
size2	long
;	O
if	O
(	O
Q	pointer
->	O
size1	long
!=	O
M	int
||	O
Q	pointer
->	O
size2	long
!=	O
M	int
)	O
{	O
GSL_ERROR	O
(	O
"Q matrix must be N x N if L is M x N"	pointer
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
if	O
(	O
w	pointer
->	O
size	long
!=	O
M	int
)	O
{	O
GSL_ERROR	O
(	O
"w must be length N if L is M x N"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
v	pointer
->	O
size	long
!=	O
N	int
)	O
{	O
GSL_ERROR	O
(	O
"v must be length M if L is M x N"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
size_t	long
j	long
,	O
k	long
;	O
double	O
w0	double
;	O
for	O
(	O
k	long
=	O
M	int
-	O
1	int
;	O
k	long
>	O
0	int
;	O
k	long
--	O
)	O
{	O
double	O
c	pointer
,	O
s	pointer
;	O
double	O
wk	double
=	O
gsl_vector_get	function
(	O
w	pointer
,	O
k	long
)	O
;	O
double	O
wkm1	double
=	O
gsl_vector_get	function
(	O
w	pointer
,	O
k	long
-	O
1	int
)	O
;	O
gsl_linalg_givens	function
(	O
wkm1	double
,	O
wk	double
,	O
&	O
c	pointer
,	O
&	O
s	pointer
)	O
;	O
gsl_linalg_givens_gv	function
(	O
w	pointer
,	O
k	long
-	O
1	int
,	O
k	long
,	O
c	pointer
,	O
s	pointer
)	O
;	O
apply_givens_lq	function
(	O
M	int
,	O
N	int
,	O
Q	pointer
,	O
L	pointer
,	O
k	long
-	O
1	int
,	O
k	long
,	O
c	pointer
,	O
s	pointer
)	O
;	O
}	O
w0	double
=	O
gsl_vector_get	function
(	O
w	pointer
,	O
0	int
)	O
;	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
N	int
;	O
j	long
++	O
)	O
{	O
double	O
lj0	double
=	O
gsl_matrix_get	function
(	O
L	pointer
,	O
j	long
,	O
0	int
)	O
;	O
double	O
vj	double
=	O
gsl_vector_get	function
(	O
v	pointer
,	O
j	long
)	O
;	O
gsl_matrix_set	function
(	O
L	pointer
,	O
j	long
,	O
0	int
,	O
lj0	double
+	O
w0	double
*	O
vj	double
)	O
;	O
}	O
for	O
(	O
k	long
=	O
1	int
;	O
k	long
<	O
GSL_MIN	O
(	O
M	int
,	O
N	int
+	O
1	int
)	O
;	O
k	long
++	O
)	O
{	O
double	O
c	pointer
,	O
s	pointer
;	O
double	O
diag	pointer
=	O
gsl_matrix_get	function
(	O
L	pointer
,	O
k	long
-	O
1	int
,	O
k	long
-	O
1	int
)	O
;	O
double	O
offdiag	pointer
=	O
gsl_matrix_get	function
(	O
L	pointer
,	O
k	long
-	O
1	int
,	O
k	long
)	O
;	O
gsl_linalg_givens	function
(	O
diag	pointer
,	O
offdiag	pointer
,	O
&	O
c	pointer
,	O
&	O
s	pointer
)	O
;	O
apply_givens_lq	function
(	O
M	int
,	O
N	int
,	O
Q	pointer
,	O
L	pointer
,	O
k	long
-	O
1	int
,	O
k	long
,	O
c	pointer
,	O
s	pointer
)	O
;	O
gsl_matrix_set	function
(	O
L	pointer
,	O
k	long
-	O
1	int
,	O
k	long
,	O
0.0	int
)	O
;	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
int	O
gsl_linalg_LQ_LQsolve	function
(	O
gsl_matrix	struct
*	O
Q	pointer
,	O
gsl_matrix	struct
*	O
L	pointer
,	O
const	O
gsl_vector	struct
*	O
b	double
,	O
gsl_vector	struct
*	O
x	double
)	O
{	O
const	O
size_t	long
N	int
=	O
L	pointer
->	O
size1	long
;	O
const	O
size_t	long
M	int
=	O
L	pointer
->	O
size2	long
;	O
if	O
(	O
M	int
!=	O
N	int
)	O
{	O
return	O
GSL_ENOTSQR	int
;	O
}	O
else	O
if	O
(	O
Q	pointer
->	O
size1	long
!=	O
M	int
||	O
b	double
->	O
size	long
!=	O
M	int
||	O
x	double
->	O
size	long
!=	O
M	int
)	O
{	O
return	O
GSL_EBADLEN	int
;	O
}	O
else	O
{	O
gsl_blas_dgemv	function
(	O
CblasNoTrans	int
,	O
1.0	int
,	O
Q	pointer
,	O
b	double
,	O
0.0	int
,	O
x	double
)	O
;	O
gsl_blas_dtrsv	function
(	O
CblasLower	int
,	O
CblasTrans	int
,	O
CblasNonUnit	int
,	O
L	pointer
,	O
x	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
int	O
gsl_linalg_LQ_lssolve	function
(	O
const	O
gsl_matrix	struct
*	O
LQ	pointer
,	O
const	O
gsl_vector	struct
*	O
tau	double
,	O
const	O
gsl_vector	struct
*	O
b	double
,	O
gsl_vector	struct
*	O
x	double
,	O
gsl_vector	struct
*	O
residual	pointer
)	O
{	O
const	O
size_t	long
M	int
=	O
LQ	pointer
->	O
size1	long
;	O
const	O
size_t	long
N	int
=	O
LQ	pointer
->	O
size2	long
;	O
if	O
(	O
M	int
>	O
N	int
)	O
{	O
GSL_ERROR	O
(	O
"LQ matrix must have M<=N"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
M	int
!=	O
b	double
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"matrix size must match b size"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
N	int
!=	O
x	double
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"matrix size must match solution size"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
M	int
!=	O
residual	pointer
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"matrix size must match residual size"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
gsl_matrix_const_view	struct
L1	struct
=	O
gsl_matrix_const_submatrix	function
(	O
LQ	pointer
,	O
0	int
,	O
0	int
,	O
M	int
,	O
M	int
)	O
;	O
gsl_vector_view	struct
x1	double
=	O
gsl_vector_subvector	function
(	O
x	double
,	O
0	int
,	O
M	int
)	O
;	O
size_t	long
i	long
;	O
gsl_vector_memcpy	function
(	O
&	O
x1	double
.	O
vector	struct
,	O
b	double
)	O
;	O
for	O
(	O
i	long
=	O
M	int
;	O
i	long
<	O
N	int
;	O
++	O
i	long
)	O
gsl_vector_set	function
(	O
x	double
,	O
i	long
,	O
0.0	int
)	O
;	O
gsl_blas_dtrsv	function
(	O
CblasLower	int
,	O
CblasNoTrans	int
,	O
CblasNonUnit	int
,	O
&	O
L1	struct
.	O
matrix	struct
,	O
&	O
x1	double
.	O
vector	struct
)	O
;	O
gsl_vector_memcpy	function
(	O
residual	pointer
,	O
&	O
x1	double
.	O
vector	struct
)	O
;	O
gsl_blas_dtrmv	function
(	O
CblasLower	int
,	O
CblasNoTrans	int
,	O
CblasNonUnit	int
,	O
&	O
L1	struct
.	O
matrix	struct
,	O
residual	pointer
)	O
;	O
gsl_vector_sub	function
(	O
residual	pointer
,	O
b	double
)	O
;	O
gsl_vector_scale	function
(	O
residual	pointer
,	O
-	O
1.0	int
)	O
;	O
gsl_linalg_LQ_QTvec	function
(	O
LQ	pointer
,	O
tau	double
,	O
x	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
int	O
gsl_linalg_LQ_QTvec	function
(	O
const	O
gsl_matrix	struct
*	O
LQ	pointer
,	O
const	O
gsl_vector	struct
*	O
tau	double
,	O
gsl_vector	struct
*	O
v	pointer
)	O
{	O
const	O
size_t	long
M	int
=	O
LQ	pointer
->	O
size1	long
;	O
const	O
size_t	long
N	int
=	O
LQ	pointer
->	O
size2	long
;	O
const	O
size_t	long
v_size	long
=	O
v	pointer
->	O
size	long
;	O
if	O
(	O
tau	double
->	O
size	long
!=	O
GSL_MIN	O
(	O
M	int
,	O
N	int
)	O
)	O
{	O
GSL_ERROR	O
(	O
"size of tau must be MIN(M,N)"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
v_size	long
<	O
GSL_MIN	O
(	O
M	int
,	O
N	int
)	O
)	O
{	O
GSL_ERROR	O
(	O
"vector size must be at least MIN(M,N)"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
size_t	long
i	long
;	O
for	O
(	O
i	long
=	O
GSL_MIN	O
(	O
M	int
,	O
N	int
)	O
;	O
i	long
--	O
>	O
0	int
;	O
)	O
{	O
gsl_vector_const_view	struct
h	pointer
=	O
gsl_matrix_const_subrow	function
(	O
LQ	pointer
,	O
i	long
,	O
i	long
,	O
v_size	long
-	O
i	long
)	O
;	O
gsl_vector_view	struct
w	pointer
=	O
gsl_vector_subvector	function
(	O
v	pointer
,	O
i	long
,	O
v_size	long
-	O
i	long
)	O
;	O
double	O
ti	double
=	O
gsl_vector_get	function
(	O
tau	double
,	O
i	long
)	O
;	O
gsl_linalg_householder_hv	function
(	O
ti	double
,	O
&	O
(	O
h	pointer
.	O
vector	struct
)	O
,	O
&	O
(	O
w	pointer
.	O
vector	struct
)	O
)	O
;	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
