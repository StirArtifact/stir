static	O
char	O
*	O
create_password	function
(	O
char	O
*	O
clear	pointer
,	O
char	O
*	O
salt	pointer
)	O
{	O
int	O
length	int
=	O
(	O
13	int
*	O
(	O
(	O
strlen	function
(	O
clear	pointer
)	O
+	O
7	int
)	O
/	O
8	int
)	O
)	O
;	O
char	O
*	O
encrypted	pointer
=	O
(	O
char	O
*	O
)	O
xmalloc	function
(	O
1	int
+	O
length	int
)	O
;	O
char	O
*	O
clear_p	pointer
=	O
clear	pointer
;	O
encrypted	pointer
[	O
0	int
]	O
=	O
'\0'	O
;	O
while	O
(	O
length	int
>	O
0	int
)	O
{	O
char	O
chunk	array
[	O
9	int
]	O
;	O
char	O
*	O
temp	pointer
;	O
strncpy	function
(	O
chunk	array
,	O
clear_p	pointer
,	O
8	int
)	O
;	O
chunk	array
[	O
8	int
]	O
=	O
(	O
char	O
)	O
0	int
;	O
temp	pointer
=	O
crypt	function
(	O
chunk	array
,	O
salt	pointer
)	O
;	O
strcat	function
(	O
encrypted	pointer
,	O
temp	pointer
)	O
;	O
clear_p	pointer
+=	O
8	int
;	O
length	int
-=	O
13	int
;	O
}	O
return	O
(	O
encrypted	pointer
)	O
;	O
}	O
int	O
main	function
(	O
int	O
argc	int
,	O
char	O
*	O
argv	array
[	O
]	O
)	O
{	O
char	O
salt	pointer
[	O
3	int
]	O
=	O
{	O
'c'	O
,	O
'd'	O
,	O
'\0'	O
}	O
;	O
if	O
(	O
argc	int
>=	O
2	int
)	O
{	O
int	O
arg_index	int
=	O
1	int
;	O
if	O
(	O
strcmp	function
(	O
argv	array
[	O
1	int
]	O
,	O
"--salt"	pointer
)	O
==	O
0	int
)	O
{	O
arg_index	int
=	O
3	int
;	O
salt	pointer
[	O
0	int
]	O
=	O
argv	array
[	O
2	int
]	O
[	O
0	int
]	O
;	O
salt	pointer
[	O
1	int
]	O
=	O
argv	array
[	O
2	int
]	O
[	O
1	int
]	O
;	O
}	O
fprintf	function
(	O
stdout	pointer
,	O
"%s"	pointer
,	O
create_password	function
(	O
argv	array
[	O
arg_index	int
]	O
,	O
salt	pointer
)	O
)	O
;	O
}	O
return	O
(	O
0	int
)	O
;	O
}	O
