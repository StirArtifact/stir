static	O
void	O
parse_args	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
)	O
;	O
static	O
rec_db_t	pointer
process_csv	function
(	O
void	O
)	O
;	O
static	O
int	O
is_space	pointer
(	O
unsigned	O
char	O
c	char
)	O
;	O
static	O
int	O
is_term	pointer
(	O
unsigned	O
char	O
c	char
)	O
;	O
static	O
void	O
field_cb	function
(	O
void	O
*	O
s	long
,	O
size_t	long
len	long
,	O
void	O
*	O
data	pointer
)	O
;	O
static	O
void	O
record_cb	function
(	O
int	O
c	char
,	O
void	O
*	O
data	pointer
)	O
;	O
struct	O
csv2rec_ctx	struct
{	O
rec_db_t	pointer
db	pointer
;	O
rec_rset_t	pointer
rset	pointer
;	O
rec_record_t	pointer
record	pointer
;	O
size_t	long
num_fields	long
;	O
size_t	long
lineno	long
;	O
bool	bool
header_p	bool
;	O
size_t	long
num_field_names	long
;	O
char	O
*	O
*	O
field_names	pointer
;	O
}	O
;	O
char	O
*	O
csv2rec_record_type	pointer
=	O
NULL	O
;	O
char	O
*	O
csv2rec_csv_file	pointer
=	O
NULL	O
;	O
bool	bool
csv2rec_strict	bool
=	O
false	int
;	O
bool	bool
csv2rec_omit_empty	bool
=	O
false	int
;	O
enum	O
{	O
COMMON_ARGS	O
,	O
RECORD_TYPE_ARG	int
,	O
STRICT_ARG	int
,	O
OMIT_EMPTY_ARG	int
}	O
;	O
static	O
const	O
struct	O
option	struct
GNU_longOptions	array
[	O
]	O
=	O
{	O
COMMON_LONG_ARGS	O
,	O
{	O
"type"	pointer
,	O
required_argument	int
,	O
NULL	O
,	O
RECORD_TYPE_ARG	int
}	O
,	O
{	O
"strict"	pointer
,	O
no_argument	int
,	O
NULL	O
,	O
STRICT_ARG	int
}	O
,	O
{	O
"omit-empty"	pointer
,	O
no_argument	int
,	O
NULL	O
,	O
OMIT_EMPTY_ARG	int
}	O
,	O
{	O
NULL	O
,	O
0	int
,	O
NULL	O
,	O
0	int
}	O
}	O
;	O
void	O
recutl_print_help	function
(	O
void	O
)	O
{	O
printf	function
(	O
_	O
(	O
"Usage: csv2rec [OPTIONS]... [CSV_FILE]\n"	pointer
)	O
)	O
;	O
fputs	function
(	O
_	O
(	O
"Convert csv data into rec data.\n"	pointer
)	O
,	O
stdout	pointer
)	O
;	O
puts	function
(	O
""	pointer
)	O
;	O
fputs	function
(	O
_	O
(	O
"  -t, --type=TYPE                     type name for the converted records; if this\n                                        parameter is ommited then no type is used.\n  -s, --strict                        be strict parsing the csv file.\n  -e, --omit-empty                    omit empty fields.\n"	pointer
)	O
,	O
stdout	pointer
)	O
;	O
recutl_print_help_common	function
(	O
)	O
;	O
puts	function
(	O
""	pointer
)	O
;	O
recutl_print_help_footer	function
(	O
)	O
;	O
}	O
static	O
void	O
parse_args	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
int	O
ret	int
;	O
char	O
c	char
;	O
while	O
(	O
(	O
ret	int
=	O
getopt_long	function
(	O
argc	int
,	O
argv	pointer
,	O
"t:se"	pointer
,	O
GNU_longOptions	array
,	O
NULL	O
)	O
)	O
!=	O
-	O
1	int
)	O
{	O
c	char
=	O
ret	int
;	O
switch	O
(	O
c	char
)	O
{	O
COMMON_ARGS_CASES	O
case	O
RECORD_TYPE_ARG	int
:	O
case	O
't'	O
:	O
{	O
csv2rec_record_type	pointer
=	O
xstrdup	function
(	O
optarg	pointer
)	O
;	O
break	O
;	O
}	O
case	O
STRICT_ARG	int
:	O
case	O
's'	O
:	O
{	O
csv2rec_strict	bool
=	O
true	int
;	O
break	O
;	O
}	O
case	O
OMIT_EMPTY_ARG	int
:	O
case	O
'e'	O
:	O
{	O
csv2rec_omit_empty	bool
=	O
true	int
;	O
break	O
;	O
}	O
default	O
:	O
{	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
}	O
}	O
if	O
(	O
optind	int
<	O
argc	int
)	O
{	O
if	O
(	O
(	O
argc	int
-	O
optind	int
)	O
!=	O
1	int
)	O
{	O
recutl_print_help	function
(	O
)	O
;	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
csv2rec_csv_file	pointer
=	O
argv	pointer
[	O
optind	int
++	O
]	O
;	O
}	O
}	O
static	O
int	O
is_space	pointer
(	O
unsigned	O
char	O
c	char
)	O
{	O
return	O
(	O
c	char
==	O
CSV_SPACE	int
)	O
||	O
(	O
c	char
==	O
CSV_TAB	int
)	O
;	O
}	O
static	O
int	O
is_term	pointer
(	O
unsigned	O
char	O
c	char
)	O
{	O
return	O
(	O
c	char
==	O
CSV_CR	int
)	O
||	O
(	O
c	char
==	O
CSV_LF	int
)	O
;	O
}	O
void	O
field_cb	function
(	O
void	O
*	O
s	long
,	O
size_t	long
len	long
,	O
void	O
*	O
data	pointer
)	O
{	O
char	O
*	O
str	pointer
;	O
char	O
*	O
field_name	pointer
;	O
rec_field_t	pointer
field	pointer
;	O
struct	O
csv2rec_ctx	struct
*	O
ctx	pointer
;	O
size_t	long
i	long
;	O
ctx	pointer
=	O
(	O
struct	O
csv2rec_ctx	struct
*	O
)	O
data	pointer
;	O
str	pointer
=	O
xmalloc	function
(	O
len	long
+	O
1	int
)	O
;	O
memcpy	function
(	O
str	pointer
,	O
s	long
,	O
len	long
)	O
;	O
str	pointer
[	O
len	long
]	O
=	O
'\0'	O
;	O
if	O
(	O
ctx	pointer
->	O
header_p	bool
)	O
{	O
if	O
(	O
(	O
ctx	pointer
->	O
num_field_names	long
%	O
ALLOC_FIELDS	int
)	O
==	O
0	int
)	O
ctx	pointer
->	O
field_names	pointer
=	O
realloc	function
(	O
ctx	pointer
->	O
field_names	pointer
,	O
(	O
(	O
ctx	pointer
->	O
num_field_names	long
/	O
ALLOC_FIELDS	int
)	O
+	O
1	int
)	O
*	O
(	O
sizeof	O
(	O
char	O
*	O
)	O
*	O
ALLOC_FIELDS	int
)	O
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
strlen	function
(	O
str	pointer
)	O
;	O
i	long
++	O
)	O
{	O
if	O
(	O
(	O
str	pointer
[	O
i	long
]	O
==	O
' '	O
)	O
||	O
(	O
str	pointer
[	O
i	long
]	O
==	O
'\t'	O
)	O
)	O
{	O
str	pointer
[	O
i	long
]	O
=	O
'_'	O
;	O
}	O
}	O
field_name	pointer
=	O
str	pointer
;	O
if	O
(	O
!	O
rec_field_name_p	function
(	O
field_name	pointer
)	O
)	O
{	O
recutl_fatal	function
(	O
_	O
(	O
"invalid field name '%s' in header\n"	pointer
)	O
,	O
str	pointer
)	O
;	O
}	O
ctx	pointer
->	O
field_names	pointer
[	O
ctx	pointer
->	O
num_field_names	long
++	O
]	O
=	O
str	pointer
;	O
}	O
else	O
{	O
if	O
(	O
!	O
ctx	pointer
->	O
record	pointer
)	O
{	O
ctx	pointer
->	O
record	pointer
=	O
rec_record_new	function
(	O
)	O
;	O
if	O
(	O
!	O
ctx	pointer
->	O
record	pointer
)	O
recutl_out_of_memory	function
(	O
)	O
;	O
}	O
if	O
(	O
!	O
csv2rec_omit_empty	bool
||	O
(	O
strlen	function
(	O
str	pointer
)	O
>	O
0	int
)	O
)	O
{	O
if	O
(	O
ctx	pointer
->	O
num_fields	long
>	O
ctx	pointer
->	O
num_field_names	long
)	O
{	O
char	O
*	O
source	pointer
=	O
csv2rec_csv_file	pointer
;	O
if	O
(	O
!	O
source	pointer
)	O
{	O
source	pointer
=	O
"stdin"	pointer
;	O
}	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"%s: %lu: this line contains %lu fields, but %lu header fields were read\n"	pointer
)	O
,	O
source	pointer
,	O
ctx	pointer
->	O
lineno	long
,	O
ctx	pointer
->	O
num_field_names	long
,	O
ctx	pointer
->	O
num_fields	long
)	O
;	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
field	pointer
=	O
rec_field_new	function
(	O
ctx	pointer
->	O
field_names	pointer
[	O
ctx	pointer
->	O
num_fields	long
]	O
,	O
str	pointer
)	O
;	O
rec_mset_append	function
(	O
rec_record_mset	function
(	O
ctx	pointer
->	O
record	pointer
)	O
,	O
MSET_FIELD	int
,	O
(	O
void	O
*	O
)	O
field	pointer
,	O
MSET_ANY	int
)	O
;	O
}	O
ctx	pointer
->	O
num_fields	long
++	O
;	O
}	O
}	O
void	O
record_cb	function
(	O
int	O
c	char
,	O
void	O
*	O
data	pointer
)	O
{	O
struct	O
csv2rec_ctx	struct
*	O
ctx	pointer
;	O
ctx	pointer
=	O
(	O
struct	O
csv2rec_ctx	struct
*	O
)	O
data	pointer
;	O
ctx	pointer
->	O
lineno	long
++	O
;	O
if	O
(	O
ctx	pointer
->	O
header_p	bool
)	O
{	O
ctx	pointer
->	O
header_p	bool
=	O
false	int
;	O
}	O
else	O
{	O
if	O
(	O
!	O
ctx	pointer
->	O
rset	pointer
)	O
{	O
ctx	pointer
->	O
rset	pointer
=	O
rec_rset_new	function
(	O
)	O
;	O
if	O
(	O
!	O
ctx	pointer
->	O
rset	pointer
)	O
recutl_out_of_memory	function
(	O
)	O
;	O
if	O
(	O
csv2rec_record_type	pointer
)	O
{	O
rec_rset_set_type	function
(	O
ctx	pointer
->	O
rset	pointer
,	O
csv2rec_record_type	pointer
)	O
;	O
}	O
if	O
(	O
!	O
ctx	pointer
->	O
db	pointer
)	O
{	O
ctx	pointer
->	O
db	pointer
=	O
rec_db_new	function
(	O
)	O
;	O
if	O
(	O
!	O
ctx	pointer
->	O
db	pointer
)	O
recutl_out_of_memory	function
(	O
)	O
;	O
}	O
rec_db_insert_rset	function
(	O
ctx	pointer
->	O
db	pointer
,	O
ctx	pointer
->	O
rset	pointer
,	O
rec_db_size	function
(	O
ctx	pointer
->	O
db	pointer
)	O
)	O
;	O
}	O
rec_mset_append	function
(	O
rec_rset_mset	function
(	O
ctx	pointer
->	O
rset	pointer
)	O
,	O
MSET_RECORD	int
,	O
(	O
void	O
*	O
)	O
ctx	pointer
->	O
record	pointer
,	O
MSET_ANY	int
)	O
;	O
ctx	pointer
->	O
record	pointer
=	O
NULL	O
;	O
ctx	pointer
->	O
num_fields	long
=	O
0	int
;	O
}	O
}	O
static	O
rec_db_t	pointer
process_csv	function
(	O
void	O
)	O
{	O
struct	O
csv2rec_ctx	struct
ctx	pointer
;	O
FILE	struct
*	O
in	pointer
;	O
struct	O
csv_parser	struct
p	pointer
;	O
unsigned	O
char	O
options	char
=	O
0	int
;	O
char	O
buf	pointer
[	O
1024	int
]	O
;	O
size_t	long
bytes_read	long
=	O
0	int
;	O
ctx	pointer
.	O
db	pointer
=	O
NULL	O
;	O
ctx	pointer
.	O
rset	pointer
=	O
NULL	O
;	O
ctx	pointer
.	O
record	pointer
=	O
NULL	O
;	O
ctx	pointer
.	O
header_p	bool
=	O
true	int
;	O
ctx	pointer
.	O
field_names	pointer
=	O
NULL	O
;	O
ctx	pointer
.	O
num_field_names	long
=	O
0	int
;	O
ctx	pointer
.	O
num_fields	long
=	O
0	int
;	O
ctx	pointer
.	O
lineno	long
=	O
0	int
;	O
if	O
(	O
csv2rec_csv_file	pointer
)	O
{	O
if	O
(	O
!	O
(	O
in	pointer
=	O
fopen	function
(	O
csv2rec_csv_file	pointer
,	O
"r"	pointer
)	O
)	O
)	O
{	O
recutl_fatal	function
(	O
_	O
(	O
"cannot read file %s\n"	pointer
)	O
,	O
csv2rec_csv_file	pointer
)	O
;	O
}	O
}	O
else	O
{	O
in	pointer
=	O
stdin	pointer
;	O
}	O
if	O
(	O
csv_init	function
(	O
&	O
p	pointer
,	O
options	char
)	O
!=	O
0	int
)	O
{	O
recutl_fatal	function
(	O
_	O
(	O
"failed to initialize csv parser\n"	pointer
)	O
)	O
;	O
}	O
if	O
(	O
csv2rec_strict	bool
)	O
{	O
options	char
|=	O
CSV_STRICT	int
;	O
csv_set_opts	function
(	O
&	O
p	pointer
,	O
options	char
)	O
;	O
}	O
csv_set_space_func	function
(	O
&	O
p	pointer
,	O
is_space	pointer
)	O
;	O
csv_set_term_func	function
(	O
&	O
p	pointer
,	O
is_term	pointer
)	O
;	O
while	O
(	O
(	O
bytes_read	long
=	O
fread	function
(	O
buf	pointer
,	O
1	int
,	O
1024	int
,	O
in	pointer
)	O
)	O
>	O
0	int
)	O
{	O
if	O
(	O
csv_parse	function
(	O
&	O
p	pointer
,	O
buf	pointer
,	O
bytes_read	long
,	O
field_cb	function
,	O
record_cb	function
,	O
&	O
ctx	pointer
)	O
!=	O
bytes_read	long
)	O
{	O
recutl_fatal	function
(	O
_	O
(	O
"error while parsing CSV file: %s\n"	pointer
)	O
,	O
csv_strerror	function
(	O
csv_error	function
(	O
&	O
p	pointer
)	O
)	O
)	O
;	O
}	O
}	O
return	O
ctx	pointer
.	O
db	pointer
;	O
}	O
int	O
main	function
(	O
int	O
argc	int
,	O
char	O
*	O
argv	pointer
[	O
]	O
)	O
{	O
int	O
ret	int
;	O
rec_db_t	pointer
db	pointer
;	O
rec_writer_t	pointer
writer	pointer
;	O
recutl_init	function
(	O
"csv2rec"	pointer
)	O
;	O
parse_args	function
(	O
argc	int
,	O
argv	pointer
)	O
;	O
db	pointer
=	O
process_csv	function
(	O
)	O
;	O
ret	int
=	O
EXIT_SUCCESS	int
;	O
if	O
(	O
db	pointer
)	O
{	O
writer	pointer
=	O
rec_writer_new	function
(	O
stdout	pointer
)	O
;	O
rec_write_db	function
(	O
writer	pointer
,	O
db	pointer
)	O
;	O
rec_writer_destroy	function
(	O
writer	pointer
)	O
;	O
rec_db_destroy	function
(	O
db	pointer
)	O
;	O
}	O
else	O
{	O
ret	int
=	O
EXIT_FAILURE	int
;	O
}	O
return	O
ret	int
;	O
}	O
