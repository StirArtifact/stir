static	O
mu_list_t	pointer
filter_list	pointer
;	O
struct	O
mu_monitor	struct
filter_monitor	struct
=	O
MU_MONITOR_INITIALIZER	O
;	O
static	O
int	O
filter_name_cmp	function
(	O
const	O
void	O
*	O
item	pointer
,	O
const	O
void	O
*	O
data	pointer
)	O
{	O
struct	O
_mu_filter_record	struct
const	O
*	O
rec	pointer
=	O
item	pointer
;	O
char	O
const	O
*	O
name	pointer
=	O
data	pointer
;	O
return	O
mu_c_strcasecmp	function
(	O
rec	pointer
->	O
name	pointer
,	O
name	pointer
)	O
;	O
}	O
int	O
mu_filter_get_list	function
(	O
mu_list_t	pointer
*	O
plist	pointer
)	O
{	O
if	O
(	O
plist	pointer
==	O
NULL	O
)	O
return	O
MU_ERR_OUT_PTR_NULL	O
;	O
mu_monitor_wrlock	function
(	O
&	O
filter_monitor	struct
)	O
;	O
if	O
(	O
filter_list	pointer
==	O
NULL	O
)	O
{	O
int	O
status	int
=	O
mu_list_create	function
(	O
&	O
filter_list	pointer
)	O
;	O
if	O
(	O
status	int
!=	O
0	int
)	O
return	O
status	int
;	O
mu_list_set_comparator	function
(	O
filter_list	pointer
,	O
filter_name_cmp	function
)	O
;	O
mu_list_append	function
(	O
filter_list	pointer
,	O
mu_base64_filter	pointer
)	O
;	O
mu_list_append	function
(	O
filter_list	pointer
,	O
mu_qp_filter	pointer
)	O
;	O
mu_list_append	function
(	O
filter_list	pointer
,	O
mu_binary_filter	pointer
)	O
;	O
mu_list_append	function
(	O
filter_list	pointer
,	O
mu_bit8_filter	pointer
)	O
;	O
mu_list_append	function
(	O
filter_list	pointer
,	O
mu_bit7_filter	pointer
)	O
;	O
mu_list_append	function
(	O
filter_list	pointer
,	O
mu_rfc822_filter	pointer
)	O
;	O
mu_list_append	function
(	O
filter_list	pointer
,	O
mu_crlf_filter	pointer
)	O
;	O
mu_list_append	function
(	O
filter_list	pointer
,	O
mu_crlfdot_filter	pointer
)	O
;	O
mu_list_append	function
(	O
filter_list	pointer
,	O
mu_dot_filter	pointer
)	O
;	O
mu_list_append	function
(	O
filter_list	pointer
,	O
mu_rfc_2047_Q_filter	pointer
)	O
;	O
mu_list_append	function
(	O
filter_list	pointer
,	O
mu_rfc_2047_B_filter	pointer
)	O
;	O
mu_list_append	function
(	O
filter_list	pointer
,	O
mu_from_filter	pointer
)	O
;	O
mu_list_append	function
(	O
filter_list	pointer
,	O
mu_inline_comment_filter	pointer
)	O
;	O
mu_list_append	function
(	O
filter_list	pointer
,	O
mu_header_filter	pointer
)	O
;	O
mu_list_append	function
(	O
filter_list	pointer
,	O
mu_linecon_filter	pointer
)	O
;	O
mu_list_append	function
(	O
filter_list	pointer
,	O
mu_linelen_filter	pointer
)	O
;	O
mu_list_append	function
(	O
filter_list	pointer
,	O
mu_iconv_filter	pointer
)	O
;	O
mu_list_append	function
(	O
filter_list	pointer
,	O
mu_c_escape_filter	pointer
)	O
;	O
mu_list_append	function
(	O
filter_list	pointer
,	O
mu_htmlent_filter	pointer
)	O
;	O
mu_list_append	function
(	O
filter_list	pointer
,	O
mu_xml_filter	pointer
)	O
;	O
mu_list_append	function
(	O
filter_list	pointer
,	O
mu_percent_filter	pointer
)	O
;	O
mu_list_append	function
(	O
filter_list	pointer
,	O
mu_dq_filter	pointer
)	O
;	O
}	O
*	O
plist	pointer
=	O
filter_list	pointer
;	O
mu_monitor_unlock	function
(	O
&	O
filter_monitor	struct
)	O
;	O
return	O
0	int
;	O
}	O
int	O
mu_filter_create_args	function
(	O
mu_stream_t	pointer
*	O
pstream	pointer
,	O
mu_stream_t	pointer
stream	pointer
,	O
const	O
char	O
*	O
name	pointer
,	O
int	O
argc	int
,	O
const	O
char	O
*	O
*	O
argv	pointer
,	O
int	O
mode	int
,	O
int	O
flags	int
)	O
{	O
int	O
status	int
;	O
mu_filter_record_t	pointer
frec	pointer
;	O
mu_list_t	pointer
list	pointer
;	O
void	O
*	O
xdata	pointer
=	O
NULL	O
;	O
mu_filter_xcode_t	pointer
xcode	pointer
;	O
if	O
(	O
(	O
flags	int
&	O
MU_STREAM_RDWR	O
)	O
==	O
MU_STREAM_RDWR	O
)	O
return	O
EINVAL	int
;	O
mu_filter_get_list	function
(	O
&	O
list	pointer
)	O
;	O
status	int
=	O
mu_list_locate	function
(	O
list	pointer
,	O
(	O
void	O
*	O
)	O
name	pointer
,	O
(	O
void	O
*	O
*	O
)	O
&	O
frec	pointer
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
xcode	pointer
=	O
mode	int
==	O
MU_FILTER_ENCODE	int
?	O
frec	pointer
->	O
encoder	pointer
:	O
frec	pointer
->	O
decoder	pointer
;	O
if	O
(	O
!	O
xcode	pointer
)	O
return	O
MU_ERR_EMPTY_VFN	O
;	O
if	O
(	O
frec	pointer
->	O
newdata	pointer
)	O
{	O
status	int
=	O
frec	pointer
->	O
newdata	pointer
(	O
&	O
xdata	pointer
,	O
mode	int
,	O
argc	int
,	O
argv	pointer
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
}	O
status	int
=	O
mu_filter_stream_create	function
(	O
pstream	pointer
,	O
stream	pointer
,	O
mode	int
,	O
xcode	pointer
,	O
xdata	pointer
,	O
flags	int
)	O
;	O
if	O
(	O
status	int
)	O
free	function
(	O
xdata	pointer
)	O
;	O
return	O
status	int
;	O
}	O
int	O
mu_filter_create	function
(	O
mu_stream_t	pointer
*	O
pstream	pointer
,	O
mu_stream_t	pointer
stream	pointer
,	O
const	O
char	O
*	O
name	pointer
,	O
int	O
mode	int
,	O
int	O
flags	int
)	O
{	O
const	O
char	O
*	O
argv	pointer
[	O
2	int
]	O
;	O
argv	pointer
[	O
0	int
]	O
=	O
name	pointer
;	O
argv	pointer
[	O
1	int
]	O
=	O
NULL	O
;	O
return	O
mu_filter_create_args	function
(	O
pstream	pointer
,	O
stream	pointer
,	O
name	pointer
,	O
1	int
,	O
argv	pointer
,	O
mode	int
,	O
flags	int
)	O
;	O
}	O
