typedef	O
int8_t	char
flex_int8_t	char
;	O
typedef	O
uint8_t	char
flex_uint8_t	char
;	O
typedef	O
int16_t	short
flex_int16_t	short
;	O
typedef	O
uint16_t	short
flex_uint16_t	short
;	O
typedef	O
int32_t	int
flex_int32_t	int
;	O
typedef	O
uint32_t	int
flex_uint32_t	int
;	O
typedef	O
struct	O
grecs_json__buffer_state	struct
*	O
YY_BUFFER_STATE	pointer
;	O
typedef	O
size_t	long
grecs_json__size_t	long
;	O
extern	O
grecs_json__size_t	long
grecs_json_leng	long
;	O
extern	O
FILE	struct
*	O
grecs_json_in	pointer
,	O
*	O
grecs_json_out	pointer
;	O
struct	O
grecs_json__buffer_state	struct
{	O
FILE	struct
*	O
grecs_json__input_file	pointer
;	O
char	O
*	O
grecs_json__ch_buf	pointer
;	O
char	O
*	O
grecs_json__buf_pos	pointer
;	O
grecs_json__size_t	long
grecs_json__buf_size	long
;	O
grecs_json__size_t	long
grecs_json__n_chars	long
;	O
int	O
grecs_json__is_our_buffer	int
;	O
int	O
grecs_json__is_interactive	int
;	O
int	O
grecs_json__at_bol	int
;	O
int	O
grecs_json__bs_lineno	int
;	O
int	O
grecs_json__bs_column	int
;	O
int	O
grecs_json__fill_buffer	int
;	O
int	O
grecs_json__buffer_status	int
;	O
}	O
;	O
static	O
size_t	long
grecs_json__buffer_stack_top	long
=	O
0	int
;	O
static	O
size_t	long
grecs_json__buffer_stack_max	long
=	O
0	int
;	O
static	O
YY_BUFFER_STATE	pointer
*	O
grecs_json__buffer_stack	pointer
=	O
0	int
;	O
static	O
char	O
grecs_json__hold_char	char
;	O
static	O
grecs_json__size_t	long
grecs_json__n_chars	long
;	O
grecs_json__size_t	long
grecs_json_leng	long
;	O
static	O
char	O
*	O
grecs_json__c_buf_p	pointer
=	O
(	O
char	O
*	O
)	O
0	int
;	O
static	O
int	O
grecs_json__init	int
=	O
0	int
;	O
static	O
int	O
grecs_json__start	int
=	O
0	int
;	O
static	O
int	O
grecs_json__did_buffer_switch_on_eof	int
;	O
void	O
grecs_json_restart	function
(	O
FILE	struct
*	O
input_file	pointer
)	O
;	O
void	O
grecs_json__switch_to_buffer	function
(	O
YY_BUFFER_STATE	pointer
new_buffer	pointer
)	O
;	O
YY_BUFFER_STATE	pointer
grecs_json__create_buffer	function
(	O
FILE	struct
*	O
file	pointer
,	O
int	O
size	int
)	O
;	O
void	O
grecs_json__delete_buffer	function
(	O
YY_BUFFER_STATE	pointer
b	pointer
)	O
;	O
void	O
grecs_json__flush_buffer	function
(	O
YY_BUFFER_STATE	pointer
b	pointer
)	O
;	O
void	O
grecs_json_push_buffer_state	function
(	O
YY_BUFFER_STATE	pointer
new_buffer	pointer
)	O
;	O
void	O
grecs_json_pop_buffer_state	function
(	O
void	O
)	O
;	O
static	O
void	O
grecs_json_ensure_buffer_stack	function
(	O
void	O
)	O
;	O
static	O
void	O
grecs_json__load_buffer_state	function
(	O
void	O
)	O
;	O
static	O
void	O
grecs_json__init_buffer	function
(	O
YY_BUFFER_STATE	pointer
b	pointer
,	O
FILE	struct
*	O
file	pointer
)	O
;	O
YY_BUFFER_STATE	pointer
grecs_json__scan_buffer	function
(	O
char	O
*	O
base	int
,	O
grecs_json__size_t	long
size	int
)	O
;	O
YY_BUFFER_STATE	pointer
grecs_json__scan_string	function
(	O
grecs_json_const	O
char	O
*	O
grecs_json__str	pointer
)	O
;	O
YY_BUFFER_STATE	pointer
grecs_json__scan_bytes	function
(	O
grecs_json_const	O
char	O
*	O
bytes	pointer
,	O
grecs_json__size_t	long
len	long
)	O
;	O
void	O
*	O
grecs_json_alloc	function
(	O
grecs_json__size_t	long
)	O
;	O
void	O
*	O
grecs_json_realloc	function
(	O
void	O
*	O
,	O
grecs_json__size_t	long
)	O
;	O
void	O
grecs_json_free	function
(	O
void	O
*	O
)	O
;	O
typedef	O
unsigned	O
char	O
YY_CHAR	char
;	O
FILE	struct
*	O
grecs_json_in	pointer
=	O
(	O
FILE	struct
*	O
)	O
0	int
,	O
*	O
grecs_json_out	pointer
=	O
(	O
FILE	struct
*	O
)	O
0	int
;	O
typedef	O
int	O
grecs_json__state_type	int
;	O
extern	O
int	O
grecs_json_lineno	int
;	O
int	O
grecs_json_lineno	int
=	O
1	int
;	O
extern	O
char	O
*	O
grecs_json_text	pointer
;	O
static	O
grecs_json__state_type	int
grecs_json__get_previous_state	function
(	O
void	O
)	O
;	O
static	O
grecs_json__state_type	int
grecs_json__try_NUL_trans	function
(	O
grecs_json__state_type	int
current_state	int
)	O
;	O
static	O
int	O
grecs_json__get_next_buffer	function
(	O
void	O
)	O
;	O
__attribute__	O
(	O
(	O
__noreturn__	O
)	O
)	O
static	O
void	O
grecs_json__fatal_error	function
(	O
grecs_json_const	O
char	O
msg	array
[	O
]	O
)	O
;	O
struct	O
grecs_json__trans_info	struct
{	O
flex_int32_t	int
grecs_json__verify	int
;	O
flex_int32_t	int
grecs_json__nxt	int
;	O
}	O
;	O
static	O
grecs_json_const	O
flex_int16_t	short
grecs_json__accept	array
[	O
61	int
]	O
=	O
{	O
0	int
,	O
12	int
,	O
12	int
,	O
0	int
,	O
0	int
,	O
16	int
,	O
14	int
,	O
12	int
,	O
13	int
,	O
14	int
,	O
11	int
,	O
14	int
,	O
1	int
,	O
14	int
,	O
14	int
,	O
14	int
,	O
15	int
,	O
5	int
,	O
15	int
,	O
12	int
,	O
0	int
,	O
2	int
,	O
0	int
,	O
1	int
,	O
0	int
,	O
1	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
5	int
,	O
0	int
,	O
7	int
,	O
7	int
,	O
4	int
,	O
4	int
,	O
1	int
,	O
1	int
,	O
0	int
,	O
1	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
1	int
,	O
0	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
0	int
,	O
8	int
,	O
9	int
,	O
0	int
,	O
0	int
,	O
1	int
,	O
10	int
,	O
6	int
,	O
3	int
,	O
0	int
}	O
;	O
static	O
grecs_json_const	O
YY_CHAR	char
grecs_json__ec	array
[	O
256	int
]	O
=	O
{	O
0	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
2	int
,	O
3	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
2	int
,	O
1	int
,	O
4	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
5	int
,	O
6	int
,	O
7	int
,	O
1	int
,	O
1	int
,	O
8	int
,	O
8	int
,	O
8	int
,	O
8	int
,	O
8	int
,	O
8	int
,	O
8	int
,	O
8	int
,	O
8	int
,	O
8	int
,	O
9	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
10	int
,	O
10	int
,	O
10	int
,	O
10	int
,	O
11	int
,	O
10	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
12	int
,	O
13	int
,	O
14	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
15	int
,	O
10	int
,	O
10	int
,	O
10	int
,	O
16	int
,	O
17	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
18	int
,	O
1	int
,	O
19	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
20	int
,	O
21	int
,	O
22	int
,	O
23	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
24	int
,	O
1	int
,	O
25	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
}	O
;	O
static	O
grecs_json_const	O
YY_CHAR	char
grecs_json__meta	array
[	O
26	int
]	O
=	O
{	O
0	int
,	O
1	int
,	O
1	int
,	O
2	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
3	int
,	O
1	int
,	O
3	int
,	O
3	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
3	int
,	O
3	int
,	O
3	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
}	O
;	O
static	O
grecs_json_const	O
flex_uint16_t	short
grecs_json__base	array
[	O
73	int
]	O
=	O
{	O
0	int
,	O
0	int
,	O
0	int
,	O
22	int
,	O
23	int
,	O
110	int
,	O
131	int
,	O
107	int
,	O
131	int
,	O
24	int
,	O
131	int
,	O
100	int
,	O
22	int
,	O
83	int
,	O
70	int
,	O
72	int
,	O
27	int
,	O
131	int
,	O
33	int
,	O
80	int
,	O
38	int
,	O
131	int
,	O
44	int
,	O
54	int
,	O
73	int
,	O
55	int
,	O
67	int
,	O
62	int
,	O
59	int
,	O
50	int
,	O
43	int
,	O
131	int
,	O
68	int
,	O
131	int
,	O
0	int
,	O
131	int
,	O
0	int
,	O
78	int
,	O
79	int
,	O
61	int
,	O
80	int
,	O
47	int
,	O
49	int
,	O
48	int
,	O
0	int
,	O
0	int
,	O
89	int
,	O
94	int
,	O
95	int
,	O
50	int
,	O
96	int
,	O
41	int
,	O
131	int
,	O
131	int
,	O
0	int
,	O
0	int
,	O
45	int
,	O
131	int
,	O
131	int
,	O
131	int
,	O
131	int
,	O
112	int
,	O
115	int
,	O
118	int
,	O
121	int
,	O
124	int
,	O
127	int
,	O
43	int
,	O
42	int
,	O
36	int
,	O
31	int
,	O
29	int
,	O
26	int
}	O
;	O
static	O
grecs_json_const	O
flex_int16_t	short
grecs_json__def	array
[	O
73	int
]	O
=	O
{	O
0	int
,	O
60	int
,	O
1	int
,	O
61	int
,	O
61	int
,	O
60	int
,	O
60	int
,	O
60	int
,	O
60	int
,	O
62	int
,	O
60	int
,	O
60	int
,	O
63	int
,	O
60	int
,	O
60	int
,	O
60	int
,	O
64	int
,	O
60	int
,	O
65	int
,	O
60	int
,	O
62	int
,	O
60	int
,	O
66	int
,	O
63	int
,	O
60	int
,	O
63	int
,	O
60	int
,	O
60	int
,	O
60	int
,	O
60	int
,	O
64	int
,	O
60	int
,	O
65	int
,	O
60	int
,	O
67	int
,	O
60	int
,	O
68	int
,	O
60	int
,	O
63	int
,	O
60	int
,	O
60	int
,	O
60	int
,	O
60	int
,	O
60	int
,	O
69	int
,	O
70	int
,	O
60	int
,	O
60	int
,	O
63	int
,	O
60	int
,	O
60	int
,	O
60	int
,	O
60	int
,	O
60	int
,	O
71	int
,	O
72	int
,	O
60	int
,	O
60	int
,	O
60	int
,	O
60	int
,	O
0	int
,	O
60	int
,	O
60	int
,	O
60	int
,	O
60	int
,	O
60	int
,	O
60	int
,	O
60	int
,	O
60	int
,	O
60	int
,	O
60	int
,	O
60	int
,	O
60	int
}	O
;	O
static	O
grecs_json_const	O
flex_uint16_t	short
grecs_json__nxt	int
[	O
157	int
]	O
=	O
{	O
0	int
,	O
6	int
,	O
7	int
,	O
8	int
,	O
9	int
,	O
6	int
,	O
10	int
,	O
11	int
,	O
12	int
,	O
10	int
,	O
6	int
,	O
6	int
,	O
10	int
,	O
6	int
,	O
10	int
,	O
6	int
,	O
6	int
,	O
13	int
,	O
6	int
,	O
14	int
,	O
6	int
,	O
6	int
,	O
15	int
,	O
6	int
,	O
10	int
,	O
10	int
,	O
17	int
,	O
17	int
,	O
21	int
,	O
59	int
,	O
25	int
,	O
31	int
,	O
58	int
,	O
26	int
,	O
55	int
,	O
18	int
,	O
18	int
,	O
22	int
,	O
26	int
,	O
54	int
,	O
32	int
,	O
34	int
,	O
21	int
,	O
34	int
,	O
34	int
,	O
45	int
,	O
44	int
,	O
31	int
,	O
34	int
,	O
34	int
,	O
34	int
,	O
22	int
,	O
36	int
,	O
56	int
,	O
36	int
,	O
36	int
,	O
32	int
,	O
57	int
,	O
56	int
,	O
36	int
,	O
36	int
,	O
36	int
,	O
25	int
,	O
38	int
,	O
53	int
,	O
26	int
,	O
26	int
,	O
52	int
,	O
51	int
,	O
49	int
,	O
26	int
,	O
26	int
,	O
39	int
,	O
43	int
,	O
39	int
,	O
40	int
,	O
34	int
,	O
42	int
,	O
34	int
,	O
34	int
,	O
41	int
,	O
37	int
,	O
19	int
,	O
34	int
,	O
34	int
,	O
34	int
,	O
46	int
,	O
48	int
,	O
50	int
,	O
47	int
,	O
26	int
,	O
47	int
,	O
29	int
,	O
28	int
,	O
47	int
,	O
26	int
,	O
47	int
,	O
46	int
,	O
27	int
,	O
39	int
,	O
47	int
,	O
39	int
,	O
49	int
,	O
48	int
,	O
50	int
,	O
47	int
,	O
26	int
,	O
47	int
,	O
23	int
,	O
19	int
,	O
60	int
,	O
26	int
,	O
47	int
,	O
16	int
,	O
16	int
,	O
16	int
,	O
20	int
,	O
20	int
,	O
20	int
,	O
24	int
,	O
60	int
,	O
24	int
,	O
30	int
,	O
30	int
,	O
30	int
,	O
33	int
,	O
60	int
,	O
33	int
,	O
35	int
,	O
60	int
,	O
35	int
,	O
5	int
,	O
60	int
,	O
60	int
,	O
60	int
,	O
60	int
,	O
60	int
,	O
60	int
,	O
60	int
,	O
60	int
,	O
60	int
,	O
60	int
,	O
60	int
,	O
60	int
,	O
60	int
,	O
60	int
,	O
60	int
,	O
60	int
,	O
60	int
,	O
60	int
,	O
60	int
,	O
60	int
,	O
60	int
,	O
60	int
,	O
60	int
,	O
60	int
,	O
60	int
}	O
;	O
static	O
grecs_json_const	O
flex_int16_t	short
grecs_json__chk	array
[	O
157	int
]	O
=	O
{	O
0	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
3	int
,	O
4	int
,	O
9	int
,	O
72	int
,	O
12	int
,	O
16	int
,	O
71	int
,	O
12	int
,	O
70	int
,	O
3	int
,	O
4	int
,	O
9	int
,	O
12	int
,	O
69	int
,	O
16	int
,	O
18	int
,	O
20	int
,	O
18	int
,	O
18	int
,	O
68	int
,	O
67	int
,	O
30	int
,	O
18	int
,	O
18	int
,	O
18	int
,	O
20	int
,	O
22	int
,	O
56	int
,	O
22	int
,	O
22	int
,	O
30	int
,	O
51	int
,	O
49	int
,	O
22	int
,	O
22	int
,	O
22	int
,	O
23	int
,	O
25	int
,	O
43	int
,	O
23	int
,	O
25	int
,	O
42	int
,	O
41	int
,	O
39	int
,	O
23	int
,	O
25	int
,	O
26	int
,	O
29	int
,	O
26	int
,	O
26	int
,	O
32	int
,	O
28	int
,	O
32	int
,	O
32	int
,	O
27	int
,	O
24	int
,	O
19	int
,	O
32	int
,	O
32	int
,	O
32	int
,	O
37	int
,	O
38	int
,	O
40	int
,	O
37	int
,	O
38	int
,	O
40	int
,	O
15	int
,	O
14	int
,	O
37	int
,	O
38	int
,	O
40	int
,	O
46	int
,	O
13	int
,	O
47	int
,	O
46	int
,	O
47	int
,	O
47	int
,	O
48	int
,	O
50	int
,	O
46	int
,	O
48	int
,	O
50	int
,	O
11	int
,	O
7	int
,	O
5	int
,	O
48	int
,	O
50	int
,	O
61	int
,	O
61	int
,	O
61	int
,	O
62	int
,	O
62	int
,	O
62	int
,	O
63	int
,	O
0	int
,	O
63	int
,	O
64	int
,	O
64	int
,	O
64	int
,	O
65	int
,	O
0	int
,	O
65	int
,	O
66	int
,	O
0	int
,	O
66	int
,	O
60	int
,	O
60	int
,	O
60	int
,	O
60	int
,	O
60	int
,	O
60	int
,	O
60	int
,	O
60	int
,	O
60	int
,	O
60	int
,	O
60	int
,	O
60	int
,	O
60	int
,	O
60	int
,	O
60	int
,	O
60	int
,	O
60	int
,	O
60	int
,	O
60	int
,	O
60	int
,	O
60	int
,	O
60	int
,	O
60	int
,	O
60	int
,	O
60	int
,	O
60	int
}	O
;	O
static	O
grecs_json__state_type	int
grecs_json__last_accepting_state	int
;	O
static	O
char	O
*	O
grecs_json__last_accepting_cpos	pointer
;	O
extern	O
int	O
grecs_json__flex_debug	int
;	O
int	O
grecs_json__flex_debug	int
=	O
1	int
;	O
static	O
grecs_json_const	O
flex_int16_t	short
grecs_json__rule_linenum	array
[	O
15	int
]	O
=	O
{	O
0	int
,	O
169	int
,	O
173	int
,	O
177	int
,	O
182	int
,	O
192	int
,	O
197	int
,	O
201	int
,	O
210	int
,	O
211	int
,	O
212	int
,	O
213	int
,	O
214	int
,	O
215	int
,	O
216	int
}	O
;	O
char	O
*	O
grecs_json_text	pointer
;	O
static	O
char	O
const	O
*	O
input_ptr	pointer
;	O
static	O
size_t	long
input_size	long
;	O
struct	O
grecs_locus_point	struct
json_current_locus_point	struct
;	O
char	O
const	O
*	O
json_err_diag	pointer
;	O
struct	O
grecs_locus	struct
json_err_locus	struct
;	O
void	O
jsonlex_diag	function
(	O
const	O
char	O
*	O
s	pointer
)	O
{	O
if	O
(	O
!	O
json_err_diag	pointer
)	O
{	O
json_err_diag	pointer
=	O
s	pointer
;	O
json_err_locus	struct
=	O
grecs_json_lloc	struct
;	O
}	O
}	O
static	O
int	O
utf8_wctomb	function
(	O
char	O
*	O
u	pointer
)	O
{	O
unsigned	O
int	O
wc	int
=	O
strtoul	function
(	O
u	pointer
,	O
NULL	O
,	O
16	int
)	O
;	O
int	O
count	long
;	O
char	O
r	array
[	O
6	int
]	O
;	O
if	O
(	O
wc	int
<	O
0x80	int
)	O
count	long
=	O
1	int
;	O
else	O
if	O
(	O
wc	int
<	O
0x800	int
)	O
count	long
=	O
2	int
;	O
else	O
if	O
(	O
wc	int
<	O
0x10000	int
)	O
count	long
=	O
3	int
;	O
else	O
if	O
(	O
wc	int
<	O
0x200000	int
)	O
count	long
=	O
4	int
;	O
else	O
if	O
(	O
wc	int
<	O
0x4000000	int
)	O
count	long
=	O
5	int
;	O
else	O
if	O
(	O
wc	int
<=	O
0x7fffffff	int
)	O
count	long
=	O
6	int
;	O
else	O
return	O
-	O
1	int
;	O
switch	O
(	O
count	long
)	O
{	O
case	O
6	int
:	O
r	array
[	O
5	int
]	O
=	O
0x80	int
|	O
(	O
wc	int
&	O
0x3f	int
)	O
;	O
wc	int
=	O
wc	int
>>	O
6	int
;	O
wc	int
|=	O
0x4000000	int
;	O
case	O
5	int
:	O
r	array
[	O
4	int
]	O
=	O
0x80	int
|	O
(	O
wc	int
&	O
0x3f	int
)	O
;	O
wc	int
=	O
wc	int
>>	O
6	int
;	O
wc	int
|=	O
0x200000	int
;	O
case	O
4	int
:	O
r	array
[	O
3	int
]	O
=	O
0x80	int
|	O
(	O
wc	int
&	O
0x3f	int
)	O
;	O
wc	int
=	O
wc	int
>>	O
6	int
;	O
wc	int
|=	O
0x10000	int
;	O
case	O
3	int
:	O
r	array
[	O
2	int
]	O
=	O
0x80	int
|	O
(	O
wc	int
&	O
0x3f	int
)	O
;	O
wc	int
=	O
wc	int
>>	O
6	int
;	O
wc	int
|=	O
0x800	int
;	O
case	O
2	int
:	O
r	array
[	O
1	int
]	O
=	O
0x80	int
|	O
(	O
wc	int
&	O
0x3f	int
)	O
;	O
wc	int
=	O
wc	int
>>	O
6	int
;	O
wc	int
|=	O
0xc0	int
;	O
case	O
1	int
:	O
r	array
[	O
0	int
]	O
=	O
wc	int
;	O
}	O
grecs_line_acc_grow	function
(	O
r	array
,	O
count	long
)	O
;	O
return	O
count	long
;	O
}	O
int	O
json_unescape	function
(	O
char	O
c	long
,	O
char	O
*	O
o	pointer
)	O
{	O
static	O
char	O
transtab	array
[	O
]	O
=	O
"\\\\\"\"b\bf\fn\nr\rt\t"	pointer
;	O
char	O
*	O
p	pointer
;	O
for	O
(	O
p	pointer
=	O
transtab	array
;	O
*	O
p	pointer
;	O
p	pointer
+=	O
2	int
)	O
{	O
if	O
(	O
p	pointer
[	O
0	int
]	O
==	O
c	long
)	O
{	O
*	O
o	pointer
=	O
p	pointer
[	O
1	int
]	O
;	O
return	O
0	int
;	O
}	O
}	O
return	O
-	O
1	int
;	O
}	O
static	O
int	O
grecs_json_wrap	function
(	O
)	O
{	O
return	O
1	int
;	O
}	O
static	O
struct	O
grecs_txtacc	O
*	O
json_line_acc	pointer
;	O
static	O
void	O
json_line_begin	function
(	O
)	O
{	O
if	O
(	O
!	O
json_line_acc	pointer
)	O
json_line_acc	pointer
=	O
grecs_txtacc_create	function
(	O
)	O
;	O
}	O
static	O
char	O
*	O
json_line_finish	function
(	O
)	O
{	O
if	O
(	O
json_line_acc	pointer
)	O
{	O
char	O
nil	char
=	O
0	int
;	O
grecs_txtacc_grow	function
(	O
json_line_acc	pointer
,	O
&	O
nil	char
,	O
1	int
)	O
;	O
return	O
grecs_txtacc_finish	function
(	O
json_line_acc	pointer
,	O
1	int
)	O
;	O
}	O
return	O
NULL	O
;	O
}	O
static	O
void	O
json_line_grow	function
(	O
char	O
const	O
*	O
text	pointer
,	O
size_t	long
len	long
)	O
{	O
grecs_txtacc_grow	function
(	O
json_line_acc	pointer
,	O
text	pointer
,	O
len	long
)	O
;	O
}	O
static	O
int	O
grecs_json__init_globals	function
(	O
void	O
)	O
;	O
int	O
grecs_json_lex_destroy	function
(	O
void	O
)	O
;	O
int	O
grecs_json_get_debug	function
(	O
void	O
)	O
;	O
void	O
grecs_json_set_debug	function
(	O
int	O
debug_flag	int
)	O
;	O
YY_EXTRA_TYPE	O
grecs_json_get_extra	function
(	O
void	O
)	O
;	O
void	O
grecs_json_set_extra	function
(	O
YY_EXTRA_TYPE	O
user_defined	pointer
)	O
;	O
FILE	struct
*	O
grecs_json_get_in	function
(	O
void	O
)	O
;	O
void	O
grecs_json_set_in	function
(	O
FILE	struct
*	O
_in_str	pointer
)	O
;	O
FILE	struct
*	O
grecs_json_get_out	function
(	O
void	O
)	O
;	O
void	O
grecs_json_set_out	function
(	O
FILE	struct
*	O
_out_str	pointer
)	O
;	O
grecs_json__size_t	long
grecs_json_get_leng	function
(	O
void	O
)	O
;	O
char	O
*	O
grecs_json_get_text	function
(	O
void	O
)	O
;	O
int	O
grecs_json_get_lineno	function
(	O
void	O
)	O
;	O
void	O
grecs_json_set_lineno	function
(	O
int	O
_line_number	int
)	O
;	O
extern	O
int	O
grecs_json_lex	function
(	O
void	O
)	O
;	O
YY_DECL	O
{	O
grecs_json__state_type	int
grecs_json__current_state	int
;	O
char	O
*	O
grecs_json__cp	pointer
,	O
*	O
grecs_json__bp	pointer
;	O
int	O
grecs_json__act	int
;	O
if	O
(	O
!	O
(	O
grecs_json__init	int
)	O
)	O
{	O
(	O
grecs_json__init	int
)	O
=	O
1	int
;	O
if	O
(	O
!	O
(	O
grecs_json__start	int
)	O
)	O
(	O
grecs_json__start	int
)	O
=	O
1	int
;	O
if	O
(	O
!	O
grecs_json_in	pointer
)	O
grecs_json_in	pointer
=	O
stdin	pointer
;	O
if	O
(	O
!	O
grecs_json_out	pointer
)	O
grecs_json_out	pointer
=	O
stdout	pointer
;	O
if	O
(	O
!	O
YY_CURRENT_BUFFER	O
)	O
{	O
grecs_json_ensure_buffer_stack	function
(	O
)	O
;	O
YY_CURRENT_BUFFER_LVALUE	O
=	O
grecs_json__create_buffer	function
(	O
grecs_json_in	pointer
,	O
YY_BUF_SIZE	int
)	O
;	O
}	O
grecs_json__load_buffer_state	function
(	O
)	O
;	O
}	O
{	O
while	O
(	O
1	int
)	O
{	O
grecs_json__cp	pointer
=	O
(	O
grecs_json__c_buf_p	pointer
)	O
;	O
*	O
grecs_json__cp	pointer
=	O
(	O
grecs_json__hold_char	char
)	O
;	O
grecs_json__bp	pointer
=	O
grecs_json__cp	pointer
;	O
grecs_json__current_state	int
=	O
(	O
grecs_json__start	int
)	O
;	O
grecs_json__match	O
:	O
do	O
{	O
YY_CHAR	char
grecs_json__c	char
=	O
grecs_json__ec	array
[	O
YY_SC_TO_UI	O
(	O
*	O
grecs_json__cp	pointer
)	O
]	O
;	O
if	O
(	O
grecs_json__accept	array
[	O
grecs_json__current_state	int
]	O
)	O
{	O
(	O
grecs_json__last_accepting_state	int
)	O
=	O
grecs_json__current_state	int
;	O
(	O
grecs_json__last_accepting_cpos	pointer
)	O
=	O
grecs_json__cp	pointer
;	O
}	O
while	O
(	O
grecs_json__chk	array
[	O
grecs_json__base	array
[	O
grecs_json__current_state	int
]	O
+	O
grecs_json__c	char
]	O
!=	O
grecs_json__current_state	int
)	O
{	O
grecs_json__current_state	int
=	O
(	O
int	O
)	O
grecs_json__def	array
[	O
grecs_json__current_state	int
]	O
;	O
if	O
(	O
grecs_json__current_state	int
>=	O
61	int
)	O
grecs_json__c	char
=	O
grecs_json__meta	array
[	O
(	O
unsigned	O
int	O
)	O
grecs_json__c	char
]	O
;	O
}	O
grecs_json__current_state	int
=	O
grecs_json__nxt	int
[	O
grecs_json__base	array
[	O
grecs_json__current_state	int
]	O
+	O
(	O
unsigned	O
int	O
)	O
grecs_json__c	char
]	O
;	O
++	O
grecs_json__cp	pointer
;	O
}	O
while	O
(	O
grecs_json__base	array
[	O
grecs_json__current_state	int
]	O
!=	O
131	int
)	O
;	O
grecs_json__find_action	O
:	O
grecs_json__act	int
=	O
grecs_json__accept	array
[	O
grecs_json__current_state	int
]	O
;	O
if	O
(	O
grecs_json__act	int
==	O
0	int
)	O
{	O
grecs_json__cp	pointer
=	O
(	O
grecs_json__last_accepting_cpos	pointer
)	O
;	O
grecs_json__current_state	int
=	O
(	O
grecs_json__last_accepting_state	int
)	O
;	O
grecs_json__act	int
=	O
grecs_json__accept	array
[	O
grecs_json__current_state	int
]	O
;	O
}	O
YY_DO_BEFORE_ACTION	O
;	O
do_action	O
:	O
if	O
(	O
grecs_json__flex_debug	int
)	O
{	O
if	O
(	O
grecs_json__act	int
==	O
0	int
)	O
fprintf	function
(	O
stderr	pointer
,	O
"--scanner backing up\n"	pointer
)	O
;	O
else	O
if	O
(	O
grecs_json__act	int
<	O
15	int
)	O
fprintf	function
(	O
stderr	pointer
,	O
"--accepting rule at line %ld (\"%s\")\n"	pointer
,	O
(	O
long	O
)	O
grecs_json__rule_linenum	array
[	O
grecs_json__act	int
]	O
,	O
grecs_json_text	pointer
)	O
;	O
else	O
if	O
(	O
grecs_json__act	int
==	O
15	int
)	O
fprintf	function
(	O
stderr	pointer
,	O
"--accepting default rule (\"%s\")\n"	pointer
,	O
grecs_json_text	pointer
)	O
;	O
else	O
if	O
(	O
grecs_json__act	int
==	O
16	int
)	O
fprintf	function
(	O
stderr	pointer
,	O
"--(end of buffer or a NUL)\n"	pointer
)	O
;	O
else	O
fprintf	function
(	O
stderr	pointer
,	O
"--EOF (start condition %d)\n"	pointer
,	O
YY_START	O
)	O
;	O
}	O
switch	O
(	O
grecs_json__act	int
)	O
{	O
case	O
0	int
:	O
*	O
grecs_json__cp	pointer
=	O
(	O
grecs_json__hold_char	char
)	O
;	O
grecs_json__cp	pointer
=	O
(	O
grecs_json__last_accepting_cpos	pointer
)	O
;	O
grecs_json__current_state	int
=	O
(	O
grecs_json__last_accepting_state	int
)	O
;	O
goto	O
grecs_json__find_action	O
;	O
case	O
1	int
:	O
YY_RULE_SETUP	O
{	O
grecs_json_lval	union
.	O
n	long
=	O
strtod	function
(	O
grecs_json_text	pointer
,	O
NULL	O
)	O
;	O
return	O
T_NUMBER	int
;	O
}	O
YY_BREAK	O
case	O
2	int
:	O
YY_RULE_SETUP	O
{	O
json_line_begin	function
(	O
)	O
;	O
json_line_grow	function
(	O
grecs_json_text	pointer
+	O
1	int
,	O
grecs_json_leng	long
-	O
2	int
)	O
;	O
grecs_json_lval	union
.	O
s	pointer
=	O
json_line_finish	function
(	O
)	O
;	O
return	O
T_STRING	int
;	O
}	O
YY_BREAK	O
case	O
3	int
:	O
YY_RULE_SETUP	O
{	O
BEGIN	O
(	O
STR	int
)	O
;	O
json_line_begin	function
(	O
)	O
;	O
json_line_grow	function
(	O
grecs_json_text	pointer
+	O
1	int
,	O
grecs_json_leng	long
-	O
5	int
)	O
;	O
utf8_wctomb	function
(	O
grecs_json_text	pointer
+	O
grecs_json_leng	long
-	O
4	int
)	O
;	O
}	O
YY_BREAK	O
case	O
4	int
:	O
YY_RULE_SETUP	O
{	O
char	O
c	long
;	O
BEGIN	O
(	O
STR	int
)	O
;	O
json_line_begin	function
(	O
)	O
;	O
json_line_grow	function
(	O
grecs_json_text	pointer
+	O
1	int
,	O
grecs_json_leng	long
-	O
3	int
)	O
;	O
if	O
(	O
json_unescape	function
(	O
grecs_json_text	pointer
[	O
grecs_json_leng	long
-	O
1	int
]	O
,	O
&	O
c	long
)	O
)	O
{	O
jsonlex_diag	function
(	O
"invalid UTF-8 codepoint"	pointer
)	O
;	O
return	O
T_ERR	int
;	O
}	O
json_line_grow	function
(	O
&	O
c	long
,	O
1	int
)	O
;	O
}	O
YY_BREAK	O
case	O
5	int
:	O
YY_RULE_SETUP	O
{	O
BEGIN	O
(	O
INITIAL	int
)	O
;	O
if	O
(	O
grecs_json_leng	long
>	O
1	int
)	O
json_line_grow	function
(	O
grecs_json_text	pointer
,	O
grecs_json_leng	long
-	O
1	int
)	O
;	O
grecs_json_lval	union
.	O
s	pointer
=	O
json_line_finish	function
(	O
)	O
;	O
return	O
T_STRING	int
;	O
}	O
YY_BREAK	O
case	O
6	int
:	O
YY_RULE_SETUP	O
{	O
json_line_grow	function
(	O
grecs_json_text	pointer
,	O
grecs_json_leng	long
-	O
5	int
)	O
;	O
utf8_wctomb	function
(	O
grecs_json_text	pointer
+	O
grecs_json_leng	long
-	O
4	int
)	O
;	O
}	O
YY_BREAK	O
case	O
7	int
:	O
YY_RULE_SETUP	O
{	O
char	O
c	long
;	O
json_line_grow	function
(	O
grecs_json_text	pointer
,	O
grecs_json_leng	long
-	O
2	int
)	O
;	O
if	O
(	O
json_unescape	function
(	O
grecs_json_text	pointer
[	O
grecs_json_leng	long
-	O
1	int
]	O
,	O
&	O
c	long
)	O
)	O
{	O
jsonlex_diag	function
(	O
"invalid UTF-8 codepoint"	pointer
)	O
;	O
return	O
T_ERR	int
;	O
}	O
json_line_grow	function
(	O
&	O
c	long
,	O
1	int
)	O
;	O
}	O
YY_BREAK	O
case	O
8	int
:	O
YY_RULE_SETUP	O
{	O
return	O
T_NULL	int
;	O
}	O
YY_BREAK	O
case	O
9	int
:	O
YY_RULE_SETUP	O
{	O
grecs_json_lval	union
.	O
b	pointer
=	O
1	int
;	O
return	O
T_BOOL	int
;	O
}	O
YY_BREAK	O
case	O
10	int
:	O
YY_RULE_SETUP	O
{	O
grecs_json_lval	union
.	O
b	pointer
=	O
0	int
;	O
return	O
T_BOOL	int
;	O
}	O
YY_BREAK	O
case	O
11	int
:	O
YY_RULE_SETUP	O
return	O
grecs_json_text	pointer
[	O
0	int
]	O
;	O
YY_BREAK	O
case	O
12	int
:	O
YY_RULE_SETUP	O
;	O
YY_BREAK	O
case	O
13	int
:	O
YY_RULE_SETUP	O
grecs_locus_point_advance_line	O
(	O
json_current_locus_point	struct
)	O
;	O
YY_BREAK	O
case	O
14	int
:	O
YY_RULE_SETUP	O
{	O
jsonlex_diag	function
(	O
"bogus character"	pointer
)	O
;	O
return	O
T_ERR	int
;	O
}	O
YY_BREAK	O
case	O
15	int
:	O
YY_RULE_SETUP	O
ECHO	O
;	O
YY_BREAK	O
case	O
YY_STATE_EOF	O
(	O
INITIAL	int
)	O
:	O
case	O
YY_STATE_EOF	O
(	O
STR	int
)	O
:	O
grecs_json_terminate	O
(	O
)	O
;	O
case	O
YY_END_OF_BUFFER	int
:	O
{	O
int	O
grecs_json__amount_of_matched_text	int
=	O
(	O
int	O
)	O
(	O
grecs_json__cp	pointer
-	O
(	O
grecs_json_text_ptr	O
)	O
)	O
-	O
1	int
;	O
*	O
grecs_json__cp	pointer
=	O
(	O
grecs_json__hold_char	char
)	O
;	O
YY_RESTORE_YY_MORE_OFFSET	O
if	O
(	O
YY_CURRENT_BUFFER_LVALUE	O
->	O
grecs_json__buffer_status	int
==	O
YY_BUFFER_NEW	int
)	O
{	O
(	O
grecs_json__n_chars	long
)	O
=	O
YY_CURRENT_BUFFER_LVALUE	O
->	O
grecs_json__n_chars	long
;	O
YY_CURRENT_BUFFER_LVALUE	O
->	O
grecs_json__input_file	pointer
=	O
grecs_json_in	pointer
;	O
YY_CURRENT_BUFFER_LVALUE	O
->	O
grecs_json__buffer_status	int
=	O
YY_BUFFER_NORMAL	int
;	O
}	O
if	O
(	O
(	O
grecs_json__c_buf_p	pointer
)	O
<=	O
&	O
YY_CURRENT_BUFFER_LVALUE	O
->	O
grecs_json__ch_buf	pointer
[	O
(	O
grecs_json__n_chars	long
)	O
]	O
)	O
{	O
grecs_json__state_type	int
grecs_json__next_state	int
;	O
(	O
grecs_json__c_buf_p	pointer
)	O
=	O
(	O
grecs_json_text_ptr	O
)	O
+	O
grecs_json__amount_of_matched_text	int
;	O
grecs_json__current_state	int
=	O
grecs_json__get_previous_state	function
(	O
)	O
;	O
grecs_json__next_state	int
=	O
grecs_json__try_NUL_trans	function
(	O
grecs_json__current_state	int
)	O
;	O
grecs_json__bp	pointer
=	O
(	O
grecs_json_text_ptr	O
)	O
+	O
YY_MORE_ADJ	int
;	O
if	O
(	O
grecs_json__next_state	int
)	O
{	O
grecs_json__cp	pointer
=	O
++	O
(	O
grecs_json__c_buf_p	pointer
)	O
;	O
grecs_json__current_state	int
=	O
grecs_json__next_state	int
;	O
goto	O
grecs_json__match	O
;	O
}	O
else	O
{	O
grecs_json__cp	pointer
=	O
(	O
grecs_json__c_buf_p	pointer
)	O
;	O
goto	O
grecs_json__find_action	O
;	O
}	O
}	O
else	O
switch	O
(	O
grecs_json__get_next_buffer	function
(	O
)	O
)	O
{	O
case	O
EOB_ACT_END_OF_FILE	int
:	O
{	O
(	O
grecs_json__did_buffer_switch_on_eof	int
)	O
=	O
0	int
;	O
if	O
(	O
grecs_json_wrap	function
(	O
)	O
)	O
{	O
(	O
grecs_json__c_buf_p	pointer
)	O
=	O
(	O
grecs_json_text_ptr	O
)	O
+	O
YY_MORE_ADJ	int
;	O
grecs_json__act	int
=	O
YY_STATE_EOF	O
(	O
YY_START	O
)	O
;	O
goto	O
do_action	O
;	O
}	O
else	O
{	O
if	O
(	O
!	O
(	O
grecs_json__did_buffer_switch_on_eof	int
)	O
)	O
YY_NEW_FILE	O
;	O
}	O
break	O
;	O
}	O
case	O
EOB_ACT_CONTINUE_SCAN	int
:	O
(	O
grecs_json__c_buf_p	pointer
)	O
=	O
(	O
grecs_json_text_ptr	O
)	O
+	O
grecs_json__amount_of_matched_text	int
;	O
grecs_json__current_state	int
=	O
grecs_json__get_previous_state	function
(	O
)	O
;	O
grecs_json__cp	pointer
=	O
(	O
grecs_json__c_buf_p	pointer
)	O
;	O
grecs_json__bp	pointer
=	O
(	O
grecs_json_text_ptr	O
)	O
+	O
YY_MORE_ADJ	int
;	O
goto	O
grecs_json__match	O
;	O
case	O
EOB_ACT_LAST_MATCH	int
:	O
(	O
grecs_json__c_buf_p	pointer
)	O
=	O
&	O
YY_CURRENT_BUFFER_LVALUE	O
->	O
grecs_json__ch_buf	pointer
[	O
(	O
grecs_json__n_chars	long
)	O
]	O
;	O
grecs_json__current_state	int
=	O
grecs_json__get_previous_state	function
(	O
)	O
;	O
grecs_json__cp	pointer
=	O
(	O
grecs_json__c_buf_p	pointer
)	O
;	O
grecs_json__bp	pointer
=	O
(	O
grecs_json_text_ptr	O
)	O
+	O
YY_MORE_ADJ	int
;	O
goto	O
grecs_json__find_action	O
;	O
}	O
break	O
;	O
}	O
default	O
:	O
YY_FATAL_ERROR	O
(	O
"fatal flex scanner internal error--no action found"	pointer
)	O
;	O
}	O
}	O
}	O
}	O
static	O
int	O
grecs_json__get_next_buffer	function
(	O
void	O
)	O
{	O
char	O
*	O
dest	pointer
=	O
YY_CURRENT_BUFFER_LVALUE	O
->	O
grecs_json__ch_buf	pointer
;	O
char	O
*	O
source	pointer
=	O
(	O
grecs_json_text_ptr	O
)	O
;	O
grecs_json__size_t	long
number_to_move	long
,	O
i	long
;	O
int	O
ret_val	int
;	O
if	O
(	O
(	O
grecs_json__c_buf_p	pointer
)	O
>	O
&	O
YY_CURRENT_BUFFER_LVALUE	O
->	O
grecs_json__ch_buf	pointer
[	O
(	O
grecs_json__n_chars	long
)	O
+	O
1	int
]	O
)	O
YY_FATAL_ERROR	O
(	O
"fatal flex scanner internal error--end of buffer missed"	pointer
)	O
;	O
if	O
(	O
YY_CURRENT_BUFFER_LVALUE	O
->	O
grecs_json__fill_buffer	int
==	O
0	int
)	O
{	O
if	O
(	O
(	O
grecs_json__c_buf_p	pointer
)	O
-	O
(	O
grecs_json_text_ptr	O
)	O
-	O
YY_MORE_ADJ	int
==	O
1	int
)	O
{	O
return	O
EOB_ACT_END_OF_FILE	int
;	O
}	O
else	O
{	O
return	O
EOB_ACT_LAST_MATCH	int
;	O
}	O
}	O
number_to_move	long
=	O
(	O
grecs_json__size_t	long
)	O
(	O
(	O
grecs_json__c_buf_p	pointer
)	O
-	O
(	O
grecs_json_text_ptr	O
)	O
)	O
-	O
1	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
number_to_move	long
;	O
++	O
i	long
)	O
*	O
(	O
dest	pointer
++	O
)	O
=	O
*	O
(	O
source	pointer
++	O
)	O
;	O
if	O
(	O
YY_CURRENT_BUFFER_LVALUE	O
->	O
grecs_json__buffer_status	int
==	O
YY_BUFFER_EOF_PENDING	int
)	O
YY_CURRENT_BUFFER_LVALUE	O
->	O
grecs_json__n_chars	long
=	O
(	O
grecs_json__n_chars	long
)	O
=	O
0	int
;	O
else	O
{	O
grecs_json__size_t	long
num_to_read	long
=	O
YY_CURRENT_BUFFER_LVALUE	O
->	O
grecs_json__buf_size	long
-	O
number_to_move	long
-	O
1	int
;	O
while	O
(	O
num_to_read	long
<=	O
0	int
)	O
{	O
YY_BUFFER_STATE	pointer
b	pointer
=	O
YY_CURRENT_BUFFER_LVALUE	O
;	O
int	O
grecs_json__c_buf_p_offset	int
=	O
(	O
int	O
)	O
(	O
(	O
grecs_json__c_buf_p	pointer
)	O
-	O
b	pointer
->	O
grecs_json__ch_buf	pointer
)	O
;	O
if	O
(	O
b	pointer
->	O
grecs_json__is_our_buffer	int
)	O
{	O
grecs_json__size_t	long
new_size	long
=	O
b	pointer
->	O
grecs_json__buf_size	long
*	O
2	int
;	O
if	O
(	O
new_size	long
<=	O
0	int
)	O
b	pointer
->	O
grecs_json__buf_size	long
+=	O
b	pointer
->	O
grecs_json__buf_size	long
/	O
8	int
;	O
else	O
b	pointer
->	O
grecs_json__buf_size	long
*=	O
2	int
;	O
b	pointer
->	O
grecs_json__ch_buf	pointer
=	O
(	O
char	O
*	O
)	O
grecs_json_realloc	function
(	O
(	O
void	O
*	O
)	O
b	pointer
->	O
grecs_json__ch_buf	pointer
,	O
b	pointer
->	O
grecs_json__buf_size	long
+	O
2	int
)	O
;	O
}	O
else	O
b	pointer
->	O
grecs_json__ch_buf	pointer
=	O
0	int
;	O
if	O
(	O
!	O
b	pointer
->	O
grecs_json__ch_buf	pointer
)	O
YY_FATAL_ERROR	O
(	O
"fatal error - scanner input buffer overflow"	pointer
)	O
;	O
(	O
grecs_json__c_buf_p	pointer
)	O
=	O
&	O
b	pointer
->	O
grecs_json__ch_buf	pointer
[	O
grecs_json__c_buf_p_offset	int
]	O
;	O
num_to_read	long
=	O
YY_CURRENT_BUFFER_LVALUE	O
->	O
grecs_json__buf_size	long
-	O
number_to_move	long
-	O
1	int
;	O
}	O
if	O
(	O
num_to_read	long
>	O
YY_READ_BUF_SIZE	int
)	O
num_to_read	long
=	O
YY_READ_BUF_SIZE	int
;	O
YY_INPUT	O
(	O
(	O
&	O
YY_CURRENT_BUFFER_LVALUE	O
->	O
grecs_json__ch_buf	pointer
[	O
number_to_move	long
]	O
)	O
,	O
(	O
grecs_json__n_chars	long
)	O
,	O
num_to_read	long
)	O
;	O
YY_CURRENT_BUFFER_LVALUE	O
->	O
grecs_json__n_chars	long
=	O
(	O
grecs_json__n_chars	long
)	O
;	O
}	O
if	O
(	O
(	O
grecs_json__n_chars	long
)	O
==	O
0	int
)	O
{	O
if	O
(	O
number_to_move	long
==	O
YY_MORE_ADJ	int
)	O
{	O
ret_val	int
=	O
EOB_ACT_END_OF_FILE	int
;	O
grecs_json_restart	function
(	O
grecs_json_in	pointer
)	O
;	O
}	O
else	O
{	O
ret_val	int
=	O
EOB_ACT_LAST_MATCH	int
;	O
YY_CURRENT_BUFFER_LVALUE	O
->	O
grecs_json__buffer_status	int
=	O
YY_BUFFER_EOF_PENDING	int
;	O
}	O
}	O
else	O
ret_val	int
=	O
EOB_ACT_CONTINUE_SCAN	int
;	O
if	O
(	O
(	O
grecs_json__size_t	long
)	O
(	O
(	O
grecs_json__n_chars	long
)	O
+	O
number_to_move	long
)	O
>	O
YY_CURRENT_BUFFER_LVALUE	O
->	O
grecs_json__buf_size	long
)	O
{	O
grecs_json__size_t	long
new_size	long
=	O
(	O
grecs_json__n_chars	long
)	O
+	O
number_to_move	long
+	O
(	O
(	O
grecs_json__n_chars	long
)	O
>>	O
1	int
)	O
;	O
YY_CURRENT_BUFFER_LVALUE	O
->	O
grecs_json__ch_buf	pointer
=	O
(	O
char	O
*	O
)	O
grecs_json_realloc	function
(	O
(	O
void	O
*	O
)	O
YY_CURRENT_BUFFER_LVALUE	O
->	O
grecs_json__ch_buf	pointer
,	O
new_size	long
)	O
;	O
if	O
(	O
!	O
YY_CURRENT_BUFFER_LVALUE	O
->	O
grecs_json__ch_buf	pointer
)	O
YY_FATAL_ERROR	O
(	O
"out of dynamic memory in grecs_json__get_next_buffer()"	pointer
)	O
;	O
}	O
(	O
grecs_json__n_chars	long
)	O
+=	O
number_to_move	long
;	O
YY_CURRENT_BUFFER_LVALUE	O
->	O
grecs_json__ch_buf	pointer
[	O
(	O
grecs_json__n_chars	long
)	O
]	O
=	O
YY_END_OF_BUFFER_CHAR	int
;	O
YY_CURRENT_BUFFER_LVALUE	O
->	O
grecs_json__ch_buf	pointer
[	O
(	O
grecs_json__n_chars	long
)	O
+	O
1	int
]	O
=	O
YY_END_OF_BUFFER_CHAR	int
;	O
(	O
grecs_json_text_ptr	O
)	O
=	O
&	O
YY_CURRENT_BUFFER_LVALUE	O
->	O
grecs_json__ch_buf	pointer
[	O
0	int
]	O
;	O
return	O
ret_val	int
;	O
}	O
static	O
grecs_json__state_type	int
grecs_json__get_previous_state	function
(	O
void	O
)	O
{	O
grecs_json__state_type	int
grecs_json__current_state	int
;	O
char	O
*	O
grecs_json__cp	pointer
;	O
grecs_json__current_state	int
=	O
(	O
grecs_json__start	int
)	O
;	O
for	O
(	O
grecs_json__cp	pointer
=	O
(	O
grecs_json_text_ptr	O
)	O
+	O
YY_MORE_ADJ	int
;	O
grecs_json__cp	pointer
<	O
(	O
grecs_json__c_buf_p	pointer
)	O
;	O
++	O
grecs_json__cp	pointer
)	O
{	O
YY_CHAR	char
grecs_json__c	char
=	O
(	O
*	O
grecs_json__cp	pointer
?	O
grecs_json__ec	array
[	O
YY_SC_TO_UI	O
(	O
*	O
grecs_json__cp	pointer
)	O
]	O
:	O
1	int
)	O
;	O
if	O
(	O
grecs_json__accept	array
[	O
grecs_json__current_state	int
]	O
)	O
{	O
(	O
grecs_json__last_accepting_state	int
)	O
=	O
grecs_json__current_state	int
;	O
(	O
grecs_json__last_accepting_cpos	pointer
)	O
=	O
grecs_json__cp	pointer
;	O
}	O
while	O
(	O
grecs_json__chk	array
[	O
grecs_json__base	array
[	O
grecs_json__current_state	int
]	O
+	O
grecs_json__c	char
]	O
!=	O
grecs_json__current_state	int
)	O
{	O
grecs_json__current_state	int
=	O
(	O
int	O
)	O
grecs_json__def	array
[	O
grecs_json__current_state	int
]	O
;	O
if	O
(	O
grecs_json__current_state	int
>=	O
61	int
)	O
grecs_json__c	char
=	O
grecs_json__meta	array
[	O
(	O
unsigned	O
int	O
)	O
grecs_json__c	char
]	O
;	O
}	O
grecs_json__current_state	int
=	O
grecs_json__nxt	int
[	O
grecs_json__base	array
[	O
grecs_json__current_state	int
]	O
+	O
(	O
unsigned	O
int	O
)	O
grecs_json__c	char
]	O
;	O
}	O
return	O
grecs_json__current_state	int
;	O
}	O
static	O
grecs_json__state_type	int
grecs_json__try_NUL_trans	function
(	O
grecs_json__state_type	int
grecs_json__current_state	int
)	O
{	O
int	O
grecs_json__is_jam	int
;	O
char	O
*	O
grecs_json__cp	pointer
=	O
(	O
grecs_json__c_buf_p	pointer
)	O
;	O
YY_CHAR	char
grecs_json__c	char
=	O
1	int
;	O
if	O
(	O
grecs_json__accept	array
[	O
grecs_json__current_state	int
]	O
)	O
{	O
(	O
grecs_json__last_accepting_state	int
)	O
=	O
grecs_json__current_state	int
;	O
(	O
grecs_json__last_accepting_cpos	pointer
)	O
=	O
grecs_json__cp	pointer
;	O
}	O
while	O
(	O
grecs_json__chk	array
[	O
grecs_json__base	array
[	O
grecs_json__current_state	int
]	O
+	O
grecs_json__c	char
]	O
!=	O
grecs_json__current_state	int
)	O
{	O
grecs_json__current_state	int
=	O
(	O
int	O
)	O
grecs_json__def	array
[	O
grecs_json__current_state	int
]	O
;	O
if	O
(	O
grecs_json__current_state	int
>=	O
61	int
)	O
grecs_json__c	char
=	O
grecs_json__meta	array
[	O
(	O
unsigned	O
int	O
)	O
grecs_json__c	char
]	O
;	O
}	O
grecs_json__current_state	int
=	O
grecs_json__nxt	int
[	O
grecs_json__base	array
[	O
grecs_json__current_state	int
]	O
+	O
(	O
unsigned	O
int	O
)	O
grecs_json__c	char
]	O
;	O
grecs_json__is_jam	int
=	O
(	O
grecs_json__current_state	int
==	O
60	int
)	O
;	O
return	O
grecs_json__is_jam	int
?	O
0	int
:	O
grecs_json__current_state	int
;	O
}	O
void	O
grecs_json_restart	function
(	O
FILE	struct
*	O
input_file	pointer
)	O
{	O
if	O
(	O
!	O
YY_CURRENT_BUFFER	O
)	O
{	O
grecs_json_ensure_buffer_stack	function
(	O
)	O
;	O
YY_CURRENT_BUFFER_LVALUE	O
=	O
grecs_json__create_buffer	function
(	O
grecs_json_in	pointer
,	O
YY_BUF_SIZE	int
)	O
;	O
}	O
grecs_json__init_buffer	function
(	O
YY_CURRENT_BUFFER	O
,	O
input_file	pointer
)	O
;	O
grecs_json__load_buffer_state	function
(	O
)	O
;	O
}	O
void	O
grecs_json__switch_to_buffer	function
(	O
YY_BUFFER_STATE	pointer
new_buffer	pointer
)	O
{	O
grecs_json_ensure_buffer_stack	function
(	O
)	O
;	O
if	O
(	O
YY_CURRENT_BUFFER	O
==	O
new_buffer	pointer
)	O
return	O
;	O
if	O
(	O
YY_CURRENT_BUFFER	O
)	O
{	O
*	O
(	O
grecs_json__c_buf_p	pointer
)	O
=	O
(	O
grecs_json__hold_char	char
)	O
;	O
YY_CURRENT_BUFFER_LVALUE	O
->	O
grecs_json__buf_pos	pointer
=	O
(	O
grecs_json__c_buf_p	pointer
)	O
;	O
YY_CURRENT_BUFFER_LVALUE	O
->	O
grecs_json__n_chars	long
=	O
(	O
grecs_json__n_chars	long
)	O
;	O
}	O
YY_CURRENT_BUFFER_LVALUE	O
=	O
new_buffer	pointer
;	O
grecs_json__load_buffer_state	function
(	O
)	O
;	O
(	O
grecs_json__did_buffer_switch_on_eof	int
)	O
=	O
1	int
;	O
}	O
static	O
void	O
grecs_json__load_buffer_state	function
(	O
void	O
)	O
{	O
(	O
grecs_json__n_chars	long
)	O
=	O
YY_CURRENT_BUFFER_LVALUE	O
->	O
grecs_json__n_chars	long
;	O
(	O
grecs_json_text_ptr	O
)	O
=	O
(	O
grecs_json__c_buf_p	pointer
)	O
=	O
YY_CURRENT_BUFFER_LVALUE	O
->	O
grecs_json__buf_pos	pointer
;	O
grecs_json_in	pointer
=	O
YY_CURRENT_BUFFER_LVALUE	O
->	O
grecs_json__input_file	pointer
;	O
(	O
grecs_json__hold_char	char
)	O
=	O
*	O
(	O
grecs_json__c_buf_p	pointer
)	O
;	O
}	O
YY_BUFFER_STATE	pointer
grecs_json__create_buffer	function
(	O
FILE	struct
*	O
file	pointer
,	O
int	O
size	int
)	O
{	O
YY_BUFFER_STATE	pointer
b	pointer
;	O
b	pointer
=	O
(	O
YY_BUFFER_STATE	pointer
)	O
grecs_json_alloc	function
(	O
sizeof	O
(	O
struct	O
grecs_json__buffer_state	struct
)	O
)	O
;	O
if	O
(	O
!	O
b	pointer
)	O
YY_FATAL_ERROR	O
(	O
"out of dynamic memory in grecs_json__create_buffer()"	pointer
)	O
;	O
b	pointer
->	O
grecs_json__buf_size	long
=	O
(	O
grecs_json__size_t	long
)	O
size	int
;	O
b	pointer
->	O
grecs_json__ch_buf	pointer
=	O
(	O
char	O
*	O
)	O
grecs_json_alloc	function
(	O
b	pointer
->	O
grecs_json__buf_size	long
+	O
2	int
)	O
;	O
if	O
(	O
!	O
b	pointer
->	O
grecs_json__ch_buf	pointer
)	O
YY_FATAL_ERROR	O
(	O
"out of dynamic memory in grecs_json__create_buffer()"	pointer
)	O
;	O
b	pointer
->	O
grecs_json__is_our_buffer	int
=	O
1	int
;	O
grecs_json__init_buffer	function
(	O
b	pointer
,	O
file	pointer
)	O
;	O
return	O
b	pointer
;	O
}	O
void	O
grecs_json__delete_buffer	function
(	O
YY_BUFFER_STATE	pointer
b	pointer
)	O
{	O
if	O
(	O
!	O
b	pointer
)	O
return	O
;	O
if	O
(	O
b	pointer
==	O
YY_CURRENT_BUFFER	O
)	O
YY_CURRENT_BUFFER_LVALUE	O
=	O
(	O
YY_BUFFER_STATE	pointer
)	O
0	int
;	O
if	O
(	O
b	pointer
->	O
grecs_json__is_our_buffer	int
)	O
grecs_json_free	function
(	O
(	O
void	O
*	O
)	O
b	pointer
->	O
grecs_json__ch_buf	pointer
)	O
;	O
grecs_json_free	function
(	O
(	O
void	O
*	O
)	O
b	pointer
)	O
;	O
}	O
static	O
void	O
grecs_json__init_buffer	function
(	O
YY_BUFFER_STATE	pointer
b	pointer
,	O
FILE	struct
*	O
file	pointer
)	O
{	O
int	O
oerrno	int
=	O
errno	O
;	O
grecs_json__flush_buffer	function
(	O
b	pointer
)	O
;	O
b	pointer
->	O
grecs_json__input_file	pointer
=	O
file	pointer
;	O
b	pointer
->	O
grecs_json__fill_buffer	int
=	O
1	int
;	O
if	O
(	O
b	pointer
!=	O
YY_CURRENT_BUFFER	O
)	O
{	O
b	pointer
->	O
grecs_json__bs_lineno	int
=	O
1	int
;	O
b	pointer
->	O
grecs_json__bs_column	int
=	O
0	int
;	O
}	O
b	pointer
->	O
grecs_json__is_interactive	int
=	O
file	pointer
?	O
(	O
isatty	function
(	O
fileno	function
(	O
file	pointer
)	O
)	O
>	O
0	int
)	O
:	O
0	int
;	O
errno	O
=	O
oerrno	int
;	O
}	O
void	O
grecs_json__flush_buffer	function
(	O
YY_BUFFER_STATE	pointer
b	pointer
)	O
{	O
if	O
(	O
!	O
b	pointer
)	O
return	O
;	O
b	pointer
->	O
grecs_json__n_chars	long
=	O
0	int
;	O
b	pointer
->	O
grecs_json__ch_buf	pointer
[	O
0	int
]	O
=	O
YY_END_OF_BUFFER_CHAR	int
;	O
b	pointer
->	O
grecs_json__ch_buf	pointer
[	O
1	int
]	O
=	O
YY_END_OF_BUFFER_CHAR	int
;	O
b	pointer
->	O
grecs_json__buf_pos	pointer
=	O
&	O
b	pointer
->	O
grecs_json__ch_buf	pointer
[	O
0	int
]	O
;	O
b	pointer
->	O
grecs_json__at_bol	int
=	O
1	int
;	O
b	pointer
->	O
grecs_json__buffer_status	int
=	O
YY_BUFFER_NEW	int
;	O
if	O
(	O
b	pointer
==	O
YY_CURRENT_BUFFER	O
)	O
grecs_json__load_buffer_state	function
(	O
)	O
;	O
}	O
void	O
grecs_json_push_buffer_state	function
(	O
YY_BUFFER_STATE	pointer
new_buffer	pointer
)	O
{	O
if	O
(	O
new_buffer	pointer
==	O
NULL	O
)	O
return	O
;	O
grecs_json_ensure_buffer_stack	function
(	O
)	O
;	O
if	O
(	O
YY_CURRENT_BUFFER	O
)	O
{	O
*	O
(	O
grecs_json__c_buf_p	pointer
)	O
=	O
(	O
grecs_json__hold_char	char
)	O
;	O
YY_CURRENT_BUFFER_LVALUE	O
->	O
grecs_json__buf_pos	pointer
=	O
(	O
grecs_json__c_buf_p	pointer
)	O
;	O
YY_CURRENT_BUFFER_LVALUE	O
->	O
grecs_json__n_chars	long
=	O
(	O
grecs_json__n_chars	long
)	O
;	O
}	O
if	O
(	O
YY_CURRENT_BUFFER	O
)	O
(	O
grecs_json__buffer_stack_top	long
)	O
++	O
;	O
YY_CURRENT_BUFFER_LVALUE	O
=	O
new_buffer	pointer
;	O
grecs_json__load_buffer_state	function
(	O
)	O
;	O
(	O
grecs_json__did_buffer_switch_on_eof	int
)	O
=	O
1	int
;	O
}	O
void	O
grecs_json_pop_buffer_state	function
(	O
void	O
)	O
{	O
if	O
(	O
!	O
YY_CURRENT_BUFFER	O
)	O
return	O
;	O
grecs_json__delete_buffer	function
(	O
YY_CURRENT_BUFFER	O
)	O
;	O
YY_CURRENT_BUFFER_LVALUE	O
=	O
NULL	O
;	O
if	O
(	O
(	O
grecs_json__buffer_stack_top	long
)	O
>	O
0	int
)	O
--	O
(	O
grecs_json__buffer_stack_top	long
)	O
;	O
if	O
(	O
YY_CURRENT_BUFFER	O
)	O
{	O
grecs_json__load_buffer_state	function
(	O
)	O
;	O
(	O
grecs_json__did_buffer_switch_on_eof	int
)	O
=	O
1	int
;	O
}	O
}	O
static	O
void	O
grecs_json_ensure_buffer_stack	function
(	O
void	O
)	O
{	O
grecs_json__size_t	long
num_to_alloc	long
;	O
if	O
(	O
!	O
(	O
grecs_json__buffer_stack	pointer
)	O
)	O
{	O
num_to_alloc	long
=	O
1	int
;	O
(	O
grecs_json__buffer_stack	pointer
)	O
=	O
(	O
struct	O
grecs_json__buffer_state	struct
*	O
*	O
)	O
grecs_json_alloc	function
(	O
num_to_alloc	long
*	O
sizeof	O
(	O
struct	O
grecs_json__buffer_state	struct
*	O
)	O
)	O
;	O
if	O
(	O
!	O
(	O
grecs_json__buffer_stack	pointer
)	O
)	O
YY_FATAL_ERROR	O
(	O
"out of dynamic memory in grecs_json_ensure_buffer_stack()"	pointer
)	O
;	O
memset	function
(	O
(	O
grecs_json__buffer_stack	pointer
)	O
,	O
0	int
,	O
num_to_alloc	long
*	O
sizeof	O
(	O
struct	O
grecs_json__buffer_state	struct
*	O
)	O
)	O
;	O
(	O
grecs_json__buffer_stack_max	long
)	O
=	O
num_to_alloc	long
;	O
(	O
grecs_json__buffer_stack_top	long
)	O
=	O
0	int
;	O
return	O
;	O
}	O
if	O
(	O
(	O
grecs_json__buffer_stack_top	long
)	O
>=	O
(	O
(	O
grecs_json__buffer_stack_max	long
)	O
)	O
-	O
1	int
)	O
{	O
grecs_json__size_t	long
grow_size	long
=	O
8	int
;	O
num_to_alloc	long
=	O
(	O
grecs_json__buffer_stack_max	long
)	O
+	O
grow_size	long
;	O
(	O
grecs_json__buffer_stack	pointer
)	O
=	O
(	O
struct	O
grecs_json__buffer_state	struct
*	O
*	O
)	O
grecs_json_realloc	function
(	O
(	O
grecs_json__buffer_stack	pointer
)	O
,	O
num_to_alloc	long
*	O
sizeof	O
(	O
struct	O
grecs_json__buffer_state	struct
*	O
)	O
)	O
;	O
if	O
(	O
!	O
(	O
grecs_json__buffer_stack	pointer
)	O
)	O
YY_FATAL_ERROR	O
(	O
"out of dynamic memory in grecs_json_ensure_buffer_stack()"	pointer
)	O
;	O
memset	function
(	O
(	O
grecs_json__buffer_stack	pointer
)	O
+	O
(	O
grecs_json__buffer_stack_max	long
)	O
,	O
0	int
,	O
grow_size	long
*	O
sizeof	O
(	O
struct	O
grecs_json__buffer_state	struct
*	O
)	O
)	O
;	O
(	O
grecs_json__buffer_stack_max	long
)	O
=	O
num_to_alloc	long
;	O
}	O
}	O
YY_BUFFER_STATE	pointer
grecs_json__scan_buffer	function
(	O
char	O
*	O
base	int
,	O
grecs_json__size_t	long
size	int
)	O
{	O
YY_BUFFER_STATE	pointer
b	pointer
;	O
if	O
(	O
size	int
<	O
2	int
||	O
base	int
[	O
size	int
-	O
2	int
]	O
!=	O
YY_END_OF_BUFFER_CHAR	int
||	O
base	int
[	O
size	int
-	O
1	int
]	O
!=	O
YY_END_OF_BUFFER_CHAR	int
)	O
return	O
0	int
;	O
b	pointer
=	O
(	O
YY_BUFFER_STATE	pointer
)	O
grecs_json_alloc	function
(	O
sizeof	O
(	O
struct	O
grecs_json__buffer_state	struct
)	O
)	O
;	O
if	O
(	O
!	O
b	pointer
)	O
YY_FATAL_ERROR	O
(	O
"out of dynamic memory in grecs_json__scan_buffer()"	pointer
)	O
;	O
b	pointer
->	O
grecs_json__buf_size	long
=	O
size	int
-	O
2	int
;	O
b	pointer
->	O
grecs_json__buf_pos	pointer
=	O
b	pointer
->	O
grecs_json__ch_buf	pointer
=	O
base	int
;	O
b	pointer
->	O
grecs_json__is_our_buffer	int
=	O
0	int
;	O
b	pointer
->	O
grecs_json__input_file	pointer
=	O
0	int
;	O
b	pointer
->	O
grecs_json__n_chars	long
=	O
b	pointer
->	O
grecs_json__buf_size	long
;	O
b	pointer
->	O
grecs_json__is_interactive	int
=	O
0	int
;	O
b	pointer
->	O
grecs_json__at_bol	int
=	O
1	int
;	O
b	pointer
->	O
grecs_json__fill_buffer	int
=	O
0	int
;	O
b	pointer
->	O
grecs_json__buffer_status	int
=	O
YY_BUFFER_NEW	int
;	O
grecs_json__switch_to_buffer	function
(	O
b	pointer
)	O
;	O
return	O
b	pointer
;	O
}	O
YY_BUFFER_STATE	pointer
grecs_json__scan_string	function
(	O
grecs_json_const	O
char	O
*	O
grecs_json_str	pointer
)	O
{	O
return	O
grecs_json__scan_bytes	function
(	O
grecs_json_str	pointer
,	O
strlen	function
(	O
grecs_json_str	pointer
)	O
)	O
;	O
}	O
YY_BUFFER_STATE	pointer
grecs_json__scan_bytes	function
(	O
grecs_json_const	O
char	O
*	O
grecs_json_bytes	pointer
,	O
grecs_json__size_t	long
_grecs_json_bytes_len	long
)	O
{	O
YY_BUFFER_STATE	pointer
b	pointer
;	O
char	O
*	O
buf	pointer
;	O
grecs_json__size_t	long
n	long
;	O
grecs_json__size_t	long
i	long
;	O
n	long
=	O
_grecs_json_bytes_len	long
+	O
2	int
;	O
buf	pointer
=	O
(	O
char	O
*	O
)	O
grecs_json_alloc	function
(	O
n	long
)	O
;	O
if	O
(	O
!	O
buf	pointer
)	O
YY_FATAL_ERROR	O
(	O
"out of dynamic memory in grecs_json__scan_bytes()"	pointer
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
_grecs_json_bytes_len	long
;	O
++	O
i	long
)	O
buf	pointer
[	O
i	long
]	O
=	O
grecs_json_bytes	pointer
[	O
i	long
]	O
;	O
buf	pointer
[	O
_grecs_json_bytes_len	long
]	O
=	O
buf	pointer
[	O
_grecs_json_bytes_len	long
+	O
1	int
]	O
=	O
YY_END_OF_BUFFER_CHAR	int
;	O
b	pointer
=	O
grecs_json__scan_buffer	function
(	O
buf	pointer
,	O
n	long
)	O
;	O
if	O
(	O
!	O
b	pointer
)	O
YY_FATAL_ERROR	O
(	O
"bad buffer in grecs_json__scan_bytes()"	pointer
)	O
;	O
b	pointer
->	O
grecs_json__is_our_buffer	int
=	O
1	int
;	O
return	O
b	pointer
;	O
}	O
static	O
void	O
grecs_json__fatal_error	function
(	O
grecs_json_const	O
char	O
*	O
msg	array
)	O
{	O
(	O
void	O
)	O
fprintf	function
(	O
stderr	pointer
,	O
"%s\n"	pointer
,	O
msg	array
)	O
;	O
exit	function
(	O
YY_EXIT_FAILURE	int
)	O
;	O
}	O
int	O
grecs_json_get_lineno	function
(	O
void	O
)	O
{	O
return	O
grecs_json_lineno	int
;	O
}	O
FILE	struct
*	O
grecs_json_get_in	function
(	O
void	O
)	O
{	O
return	O
grecs_json_in	pointer
;	O
}	O
FILE	struct
*	O
grecs_json_get_out	function
(	O
void	O
)	O
{	O
return	O
grecs_json_out	pointer
;	O
}	O
grecs_json__size_t	long
grecs_json_get_leng	function
(	O
void	O
)	O
{	O
return	O
grecs_json_leng	long
;	O
}	O
char	O
*	O
grecs_json_get_text	function
(	O
void	O
)	O
{	O
return	O
grecs_json_text	pointer
;	O
}	O
void	O
grecs_json_set_lineno	function
(	O
int	O
_line_number	int
)	O
{	O
grecs_json_lineno	int
=	O
_line_number	int
;	O
}	O
void	O
grecs_json_set_in	function
(	O
FILE	struct
*	O
_in_str	pointer
)	O
{	O
grecs_json_in	pointer
=	O
_in_str	pointer
;	O
}	O
void	O
grecs_json_set_out	function
(	O
FILE	struct
*	O
_out_str	pointer
)	O
{	O
grecs_json_out	pointer
=	O
_out_str	pointer
;	O
}	O
int	O
grecs_json_get_debug	function
(	O
void	O
)	O
{	O
return	O
grecs_json__flex_debug	int
;	O
}	O
void	O
grecs_json_set_debug	function
(	O
int	O
_bdebug	int
)	O
{	O
grecs_json__flex_debug	int
=	O
_bdebug	int
;	O
}	O
static	O
int	O
grecs_json__init_globals	function
(	O
void	O
)	O
{	O
(	O
grecs_json__buffer_stack	pointer
)	O
=	O
0	int
;	O
(	O
grecs_json__buffer_stack_top	long
)	O
=	O
0	int
;	O
(	O
grecs_json__buffer_stack_max	long
)	O
=	O
0	int
;	O
(	O
grecs_json__c_buf_p	pointer
)	O
=	O
(	O
char	O
*	O
)	O
0	int
;	O
(	O
grecs_json__init	int
)	O
=	O
0	int
;	O
(	O
grecs_json__start	int
)	O
=	O
0	int
;	O
grecs_json_in	pointer
=	O
(	O
FILE	struct
*	O
)	O
0	int
;	O
grecs_json_out	pointer
=	O
(	O
FILE	struct
*	O
)	O
0	int
;	O
return	O
0	int
;	O
}	O
int	O
grecs_json_lex_destroy	function
(	O
void	O
)	O
{	O
while	O
(	O
YY_CURRENT_BUFFER	O
)	O
{	O
grecs_json__delete_buffer	function
(	O
YY_CURRENT_BUFFER	O
)	O
;	O
YY_CURRENT_BUFFER_LVALUE	O
=	O
NULL	O
;	O
grecs_json_pop_buffer_state	function
(	O
)	O
;	O
}	O
grecs_json_free	function
(	O
(	O
grecs_json__buffer_stack	pointer
)	O
)	O
;	O
(	O
grecs_json__buffer_stack	pointer
)	O
=	O
NULL	O
;	O
grecs_json__init_globals	function
(	O
)	O
;	O
return	O
0	int
;	O
}	O
void	O
*	O
grecs_json_alloc	function
(	O
grecs_json__size_t	long
size	int
)	O
{	O
return	O
(	O
void	O
*	O
)	O
malloc	function
(	O
size	int
)	O
;	O
}	O
void	O
*	O
grecs_json_realloc	function
(	O
void	O
*	O
ptr	pointer
,	O
grecs_json__size_t	long
size	int
)	O
{	O
return	O
(	O
void	O
*	O
)	O
realloc	function
(	O
(	O
char	O
*	O
)	O
ptr	pointer
,	O
size	int
)	O
;	O
}	O
void	O
grecs_json_free	function
(	O
void	O
*	O
ptr	pointer
)	O
{	O
free	function
(	O
(	O
char	O
*	O
)	O
ptr	pointer
)	O
;	O
}	O
void	O
jsonlex_setup	function
(	O
char	O
const	O
*	O
s	pointer
,	O
size_t	long
l	long
)	O
{	O
input_ptr	pointer
=	O
s	pointer
;	O
input_size	long
=	O
l	long
;	O
json_current_locus_point	struct
.	O
file	pointer
=	O
"input"	pointer
;	O
json_current_locus_point	struct
.	O
line	int
=	O
1	int
;	O
json_current_locus_point	struct
.	O
col	int
=	O
0	int
;	O
json_err_diag	pointer
=	O
NULL	O
;	O
grecs_json__flex_debug	int
=	O
0	int
;	O
BEGIN	O
(	O
INITIAL	int
)	O
;	O
grecs_json_restart	function
(	O
NULL	O
)	O
;	O
}	O
void	O
jsonlex_cleanup	function
(	O
void	O
)	O
{	O
if	O
(	O
json_line_acc	pointer
)	O
{	O
grecs_txtacc_free	function
(	O
json_line_acc	pointer
)	O
;	O
json_line_acc	pointer
=	O
NULL	O
;	O
}	O
}	O
