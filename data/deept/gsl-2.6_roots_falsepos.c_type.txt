typedef	O
struct	O
{	O
double	O
f_lower	double
,	O
f_upper	double
;	O
}	O
falsepos_state_t	struct
;	O
static	O
int	O
falsepos_init	function
(	O
void	O
*	O
vstate	pointer
,	O
gsl_function	struct
*	O
f	pointer
,	O
double	O
*	O
root	pointer
,	O
double	O
x_lower	double
,	O
double	O
x_upper	double
)	O
;	O
static	O
int	O
falsepos_iterate	function
(	O
void	O
*	O
vstate	pointer
,	O
gsl_function	struct
*	O
f	pointer
,	O
double	O
*	O
root	pointer
,	O
double	O
*	O
x_lower	double
,	O
double	O
*	O
x_upper	double
)	O
;	O
static	O
int	O
falsepos_init	function
(	O
void	O
*	O
vstate	pointer
,	O
gsl_function	struct
*	O
f	pointer
,	O
double	O
*	O
root	pointer
,	O
double	O
x_lower	double
,	O
double	O
x_upper	double
)	O
{	O
falsepos_state_t	struct
*	O
state	pointer
=	O
(	O
falsepos_state_t	struct
*	O
)	O
vstate	pointer
;	O
double	O
f_lower	double
,	O
f_upper	double
;	O
*	O
root	pointer
=	O
0.5	int
*	O
(	O
x_lower	double
+	O
x_upper	double
)	O
;	O
SAFE_FUNC_CALL	O
(	O
f	pointer
,	O
x_lower	double
,	O
&	O
f_lower	double
)	O
;	O
SAFE_FUNC_CALL	O
(	O
f	pointer
,	O
x_upper	double
,	O
&	O
f_upper	double
)	O
;	O
state	pointer
->	O
f_lower	double
=	O
f_lower	double
;	O
state	pointer
->	O
f_upper	double
=	O
f_upper	double
;	O
if	O
(	O
(	O
f_lower	double
<	O
0.0	int
&&	O
f_upper	double
<	O
0.0	int
)	O
||	O
(	O
f_lower	double
>	O
0.0	int
&&	O
f_upper	double
>	O
0.0	int
)	O
)	O
{	O
GSL_ERROR	O
(	O
"endpoints do not straddle y=0"	pointer
,	O
GSL_EINVAL	int
)	O
;	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
int	O
falsepos_iterate	function
(	O
void	O
*	O
vstate	pointer
,	O
gsl_function	struct
*	O
f	pointer
,	O
double	O
*	O
root	pointer
,	O
double	O
*	O
x_lower	double
,	O
double	O
*	O
x_upper	double
)	O
{	O
falsepos_state_t	struct
*	O
state	pointer
=	O
(	O
falsepos_state_t	struct
*	O
)	O
vstate	pointer
;	O
double	O
x_linear	double
,	O
f_linear	double
;	O
double	O
x_bisect	double
,	O
f_bisect	double
;	O
double	O
x_left	double
=	O
*	O
x_lower	double
;	O
double	O
x_right	double
=	O
*	O
x_upper	double
;	O
double	O
f_lower	double
=	O
state	pointer
->	O
f_lower	double
;	O
double	O
f_upper	double
=	O
state	pointer
->	O
f_upper	double
;	O
double	O
w	double
;	O
if	O
(	O
f_lower	double
==	O
0.0	int
)	O
{	O
*	O
root	pointer
=	O
x_left	double
;	O
*	O
x_upper	double
=	O
x_left	double
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
if	O
(	O
f_upper	double
==	O
0.0	int
)	O
{	O
*	O
root	pointer
=	O
x_right	double
;	O
*	O
x_lower	double
=	O
x_right	double
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
x_linear	double
=	O
x_right	double
-	O
(	O
f_upper	double
*	O
(	O
x_left	double
-	O
x_right	double
)	O
/	O
(	O
f_lower	double
-	O
f_upper	double
)	O
)	O
;	O
SAFE_FUNC_CALL	O
(	O
f	pointer
,	O
x_linear	double
,	O
&	O
f_linear	double
)	O
;	O
if	O
(	O
f_linear	double
==	O
0.0	int
)	O
{	O
*	O
root	pointer
=	O
x_linear	double
;	O
*	O
x_lower	double
=	O
x_linear	double
;	O
*	O
x_upper	double
=	O
x_linear	double
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
if	O
(	O
(	O
f_lower	double
>	O
0.0	int
&&	O
f_linear	double
<	O
0.0	int
)	O
||	O
(	O
f_lower	double
<	O
0.0	int
&&	O
f_linear	double
>	O
0.0	int
)	O
)	O
{	O
*	O
root	pointer
=	O
x_linear	double
;	O
*	O
x_upper	double
=	O
x_linear	double
;	O
state	pointer
->	O
f_upper	double
=	O
f_linear	double
;	O
w	double
=	O
x_linear	double
-	O
x_left	double
;	O
}	O
else	O
{	O
*	O
root	pointer
=	O
x_linear	double
;	O
*	O
x_lower	double
=	O
x_linear	double
;	O
state	pointer
->	O
f_lower	double
=	O
f_linear	double
;	O
w	double
=	O
x_right	double
-	O
x_linear	double
;	O
}	O
if	O
(	O
w	double
<	O
0.5	int
*	O
(	O
x_right	double
-	O
x_left	double
)	O
)	O
{	O
return	O
GSL_SUCCESS	int
;	O
}	O
x_bisect	double
=	O
0.5	int
*	O
(	O
x_left	double
+	O
x_right	double
)	O
;	O
SAFE_FUNC_CALL	O
(	O
f	pointer
,	O
x_bisect	double
,	O
&	O
f_bisect	double
)	O
;	O
if	O
(	O
(	O
f_lower	double
>	O
0.0	int
&&	O
f_bisect	double
<	O
0.0	int
)	O
||	O
(	O
f_lower	double
<	O
0.0	int
&&	O
f_bisect	double
>	O
0.0	int
)	O
)	O
{	O
*	O
x_upper	double
=	O
x_bisect	double
;	O
state	pointer
->	O
f_upper	double
=	O
f_bisect	double
;	O
if	O
(	O
*	O
root	pointer
>	O
x_bisect	double
)	O
*	O
root	pointer
=	O
0.5	int
*	O
(	O
x_left	double
+	O
x_bisect	double
)	O
;	O
}	O
else	O
{	O
*	O
x_lower	double
=	O
x_bisect	double
;	O
state	pointer
->	O
f_lower	double
=	O
f_bisect	double
;	O
if	O
(	O
*	O
root	pointer
<	O
x_bisect	double
)	O
*	O
root	pointer
=	O
0.5	int
*	O
(	O
x_bisect	double
+	O
x_right	double
)	O
;	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
const	O
gsl_root_fsolver_type	struct
falsepos_type	struct
=	O
{	O
"falsepos"	pointer
,	O
sizeof	O
(	O
falsepos_state_t	struct
)	O
,	O
&	O
falsepos_init	function
,	O
&	O
falsepos_iterate	function
}	O
;	O
const	O
gsl_root_fsolver_type	struct
*	O
gsl_root_fsolver_falsepos	pointer
=	O
&	O
falsepos_type	struct
;	O
