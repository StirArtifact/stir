static	O
double	O
zofmzeta_a_data	array
[	O
20	int
]	O
=	O
{	O
2.9332563730829348990	int
,	O
0.4896518224847036624	int
,	O
0.0228637617355380860	int
,	O
-	O
0.0001715731377284693	int
,	O
-	O
0.0000105927538148751	int
,	O
1.0595602530419e-6	int
,	O
-	O
4.68016051691e-8	int
,	O
5.8310020e-12	int
,	O
1.766537581e-10	int
,	O
-	O
1.45034640e-11	int
,	O
4.357772e-13	int
,	O
4.60971e-14	int
,	O
-	O
2.57571e-14	int
,	O
2.26468e-14	int
,	O
-	O
2.22053e-14	int
,	O
2.08593e-14	int
,	O
-	O
1.84454e-14	int
,	O
1.50150e-14	int
,	O
-	O
1.06506e-14	int
,	O
5.5375e-15	int
}	O
;	O
static	O
cheb_series	struct
zofmzeta_a_cs	struct
=	O
{	O
zofmzeta_a_data	array
,	O
19	int
,	O
-	O
1	int
,	O
1	int
,	O
8	int
}	O
;	O
static	O
double	O
zofmzeta_b_data	array
[	O
30	int
]	O
=	O
{	O
22.40725276466303489	int
,	O
10.39808258825165581	int
,	O
1.092050144486018425	int
,	O
-	O
0.071111274777921604	int
,	O
0.008990125336059704	int
,	O
-	O
0.001201950338088875	int
,	O
0.000106686807968315	int
,	O
0.000017406491576830	int
,	O
-	O
0.000014946669657805	int
,	O
6.189984487752e-6	int
,	O
-	O
2.049466715178e-6	int
,	O
5.87189458020e-7	int
,	O
-	O
1.46077514157e-7	int
,	O
2.9803936132e-8	int
,	O
-	O
3.817692108e-9	int
,	O
-	O
4.66980416e-10	int
,	O
5.83860334e-10	int
,	O
-	O
2.78825299e-10	int
,	O
1.01682688e-10	int
,	O
-	O
3.1209928e-11	int
,	O
8.111122e-12	int
,	O
-	O
1.663986e-12	int
,	O
1.81364e-13	int
,	O
5.3414e-14	int
,	O
-	O
4.7234e-14	int
,	O
2.1689e-14	int
,	O
-	O
7.815e-15	int
,	O
2.371e-15	int
,	O
-	O
6.04e-16	int
,	O
1.20e-16	int
}	O
;	O
static	O
cheb_series	struct
zofmzeta_b_cs	struct
=	O
{	O
zofmzeta_b_data	array
,	O
29	int
,	O
-	O
1	int
,	O
1	int
,	O
15	int
}	O
;	O
static	O
double	O
zofmzeta_c_data	array
[	O
11	int
]	O
=	O
{	O
1.3824761227122911500	int
,	O
0.0244856101686774245	int
,	O
-	O
0.0000842866496282540	int
,	O
1.4656076569771e-6	int
,	O
-	O
3.14874099476e-8	int
,	O
7.561134833e-10	int
,	O
-	O
1.94531643e-11	int
,	O
5.245878e-13	int
,	O
-	O
1.46380e-14	int
,	O
4.192e-16	int
,	O
-	O
1.23e-17	int
}	O
;	O
static	O
cheb_series	struct
zofmzeta_c_cs	struct
=	O
{	O
zofmzeta_c_data	array
,	O
10	int
,	O
-	O
1	int
,	O
1	int
,	O
6	int
}	O
;	O
double	O
gsl_sf_bessel_Olver_zofmzeta	function
(	O
double	O
minus_zeta	double
)	O
{	O
if	O
(	O
minus_zeta	double
<	O
1.0	int
)	O
{	O
const	O
double	O
x	double
=	O
2.0	int
*	O
minus_zeta	double
-	O
1.0	int
;	O
gsl_sf_result	struct
c	pointer
;	O
cheb_eval_e	function
(	O
&	O
zofmzeta_a_cs	struct
,	O
x	double
,	O
&	O
c	pointer
)	O
;	O
return	O
c	pointer
.	O
val	double
;	O
}	O
else	O
if	O
(	O
minus_zeta	double
<	O
10.0	int
)	O
{	O
const	O
double	O
x	double
=	O
(	O
2.0	int
*	O
minus_zeta	double
-	O
11.0	int
)	O
/	O
9.0	int
;	O
gsl_sf_result	struct
c	pointer
;	O
cheb_eval_e	function
(	O
&	O
zofmzeta_b_cs	struct
,	O
x	double
,	O
&	O
c	pointer
)	O
;	O
return	O
c	pointer
.	O
val	double
;	O
}	O
else	O
{	O
const	O
double	O
TEN_32	double
=	O
31.62277660168379332	int
;	O
const	O
double	O
p	double
=	O
pow	function
(	O
minus_zeta	double
,	O
3.0	int
/	O
2.0	int
)	O
;	O
const	O
double	O
x	double
=	O
2.0	int
*	O
TEN_32	double
/	O
p	double
-	O
1.0	int
;	O
gsl_sf_result	struct
c	pointer
;	O
cheb_eval_e	function
(	O
&	O
zofmzeta_c_cs	struct
,	O
x	double
,	O
&	O
c	pointer
)	O
;	O
return	O
c	pointer
.	O
val	double
*	O
p	double
;	O
}	O
}	O
static	O
double	O
A3_gt1_data	array
[	O
31	int
]	O
=	O
{	O
-	O
0.123783199829515294670493131190	int
,	O
0.104636462534700704670877382304	int
,	O
-	O
0.067500816575851826744877535903	int
,	O
0.035563362418888483652711005520	int
,	O
-	O
0.0160738524035979408472979609051	int
,	O
0.0064497878252851092073278056238	int
,	O
-	O
0.00235408261133449663958121821593	int
,	O
0.00079545702851302155411892534965	int
,	O
-	O
0.00025214920745855079895784825637	int
,	O
0.00007574004596069392921153301833	int
,	O
-	O
0.00002172917966339623434407978263	int
,	O
5.9914810727868915476543145465e-06	int
,	O
-	O
1.5958781571808992162953719817e-06	int
,	O
4.1232986512903717525448312012e-07	int
,	O
-	O
1.0369725993417659101913919101e-07	int
,	O
2.5457982304266541145999235022e-08	int
,	O
-	O
6.1161715053791743082427422443e-09	int
,	O
1.4409346199138658887871461320e-09	int
,	O
-	O
3.3350445956255561668232014995e-10	int
,	O
7.5950686572918996453336138108e-11	int
,	O
-	O
1.7042296334409430377389900278e-11	int
,	O
3.7723525020626230919721640081e-12	int
,	O
-	O
8.2460237635733980528416501227e-13	int
,	O
1.7816961527997797696251868875e-13	int
,	O
-	O
3.8084101506541792942694560802e-14	int
,	O
8.0593669930916099079755351563e-15	int
,	O
-	O
1.6896565961641739017452636964e-15	int
,	O
3.5115651805888443184822853595e-16	int
,	O
-	O
7.2384771938569255638904297651e-17	int
,	O
1.4806598977677176106283840244e-17	int
,	O
-	O
3.0069285750787303634897997963e-18	int
}	O
;	O
static	O
cheb_series	struct
A3_gt1_cs	struct
=	O
{	O
A3_gt1_data	array
,	O
30	int
,	O
-	O
1	int
,	O
1	int
,	O
17	int
}	O
;	O
static	O
double	O
A4_gt1_data	array
[	O
30	int
]	O
=	O
{	O
1.15309329391198493586724229008	int
,	O
-	O
1.01812701728669338904729927846	int
,	O
0.71964022270555684403652781941	int
,	O
-	O
0.42359963977172689685150061355	int
,	O
0.215024488759339557817435404261	int
,	O
-	O
0.096751915348145944032096342479	int
,	O
0.039413982058824310099856035361	int
,	O
-	O
0.014775225692561697963781115014	int
,	O
0.005162114514159370516947823271	int
,	O
-	O
0.00169783446445524322560925166335	int
,	O
0.00052995667873006847211519193478	int
,	O
-	O
0.00015802027574996477115667974856	int
,	O
0.000045254366680989687988902825193	int
,	O
-	O
0.000012503722965474638015488600967	int
,	O
3.3457656998119148699124716204e-06	int
,	O
-	O
8.6981575241150758412492331833e-07	int
,	O
2.2030895484325645640823940625e-07	int
,	O
-	O
5.4493369492600677068285936533e-08	int
,	O
1.3190457281724829107139385556e-08	int
,	O
-	O
3.1301560183377379158951191769e-09	int
,	O
7.2937802527123344842593076131e-10	int
,	O
-	O
1.6712080137945140407348940109e-10	int
,	O
3.7700053248213600430503521194e-11	int
,	O
-	O
8.3824538848817227637828899571e-12	int
,	O
1.8388741910049766865274037194e-12	int
,	O
-	O
3.9835919980753778560117573063e-13	int
,	O
8.5288827136546615604290389711e-14	int
,	O
-	O
1.8060227869114416998653266836e-14	int
,	O
3.7849342199690728470461022877e-15	int
,	O
-	O
7.8552867468122209577151823365e-16	int
}	O
;	O
static	O
cheb_series	struct
A4_gt1_cs	struct
=	O
{	O
A4_gt1_data	array
,	O
17	int
,	O
-	O
1	int
,	O
1	int
,	O
17	int
}	O
;	O
static	O
double	O
B2_gt1_data	array
[	O
40	int
]	O
=	O
{	O
0.00118587147272683864479328868589	int
,	O
0.00034820459990648274622193981840	int
,	O
-	O
0.00030411304425639768103075864567	int
,	O
0.00002812066284012343531484682886	int
,	O
0.00004493525295901613184489898748	int
,	O
-	O
0.00003037629997093072196779489677	int
,	O
0.00001125979647123875721949743970	int
,	O
-	O
2.4832533969517775991951008218e-06	int
,	O
-	O
9.9003813640537799587086928278e-08	int
,	O
4.9259859656183110299492296029e-07	int
,	O
-	O
3.7644120964426705960749504975e-07	int
,	O
2.2887828521334625189639122509e-07	int
,	O
-	O
1.3202687370822203731489855050e-07	int
,	O
7.7019669092537400811434860763e-08	int
,	O
-	O
4.6589706973010511603890144294e-08	int
,	O
2.9396476233013923711978522963e-08	int
,	O
-	O
1.9293230611988282919101954538e-08	int
,	O
1.3099107013728717842406906896e-08	int
,	O
-	O
9.1509111940885962831104149355e-09	int
,	O
6.5483472971925614347299375295e-09	int
,	O
-	O
4.7831253582139967461241674569e-09	int
,	O
3.5562625457426178152760148639e-09	int
,	O
-	O
2.6853389444008414186916562103e-09	int
,	O
2.0554738667134200145781857289e-09	int
,	O
-	O
1.5923172019517426277886522758e-09	int
,	O
1.2465923213464381457319481498e-09	int
,	O
-	O
9.8494846881180588507969988989e-10	int
,	O
7.8438674499372126663957464312e-10	int
,	O
-	O
6.2877567918342950225937136855e-10	int
,	O
5.0662318868755257959686944117e-10	int
,	O
-	O
4.0962270881243451160378710952e-10	int
,	O
3.3168684677374908553161911299e-10	int
,	O
-	O
2.6829406619847450633596163305e-10	int
,	O
2.1603988122184568375561077873e-10	int
,	O
-	O
1.7232373309560278402012124481e-10	int
,	O
1.3512709089611470626617830434e-10	int
,	O
-	O
1.0285354732538663013167579792e-10	int
,	O
7.4211345443901713467637018423e-11	int
,	O
-	O
4.8124980266864320351456993068e-11	int
,	O
2.3666534694476306077416831958e-11	int
}	O
;	O
static	O
cheb_series	struct
B2_gt1_cs	struct
=	O
{	O
B2_gt1_data	array
,	O
39	int
,	O
-	O
1	int
,	O
1	int
,	O
30	int
}	O
;	O
static	O
double	O
B3_gt1_data	array
[	O
30	int
]	O
=	O
{	O
-	O
0.0102445379362695740863663926486	int
,	O
0.0036618484329295342954730801917	int
,	O
0.0026154252498599303282569321117	int
,	O
-	O
0.0036187389410353156728771706336	int
,	O
0.0021878564157692275944613452462	int
,	O
-	O
0.0008219952303590803584426516821	int
,	O
0.0001281773889155631494321316520	int
,	O
0.0001000944653368032985720548637	int
,	O
-	O
0.0001288293344663774273453147788	int
,	O
0.00010136264202696513867821487205	int
,	O
-	O
0.00007000275849659556221916572733	int
,	O
0.00004694886396757430431607955146	int
,	O
-	O
0.00003190003869717837686356945696	int
,	O
0.00002231453668447775219665947479	int
,	O
-	O
0.00001611102197712439539300336438	int
,	O
0.00001196634424990735214466633513	int
,	O
-	O
9.0986920398931223804111374679e-06	int
,	O
7.0492613694235423068926562567e-06	int
,	O
-	O
5.5425216624642184684300615394e-06	int
,	O
4.4071884714230296614449244106e-06	int
,	O
-	O
3.5328595506791663127928952625e-06	int
,	O
2.84594975572077091520522824686e-06	int
,	O
-	O
2.29592697828824392391071619788e-06	int
,	O
1.84714740375289956396370322228e-06	int
,	O
-	O
1.47383331248116454652025598620e-06	int
,	O
1.15687781098593231076084710267e-06	int
,	O
-	O
8.8174688524627071175315084910e-07	int
,	O
6.3705856964426840441434605593e-07	int
,	O
-	O
4.1358791499961929237755474814e-07	int
,	O
2.0354151158738819867477996807e-07	int
}	O
;	O
static	O
cheb_series	struct
B3_gt1_cs	struct
=	O
{	O
B3_gt1_data	array
,	O
29	int
,	O
-	O
1	int
,	O
1	int
,	O
29	int
}	O
;	O
static	O
double	O
B2_lt1_data	array
[	O
40	int
]	O
=	O
{	O
0.00073681565841337130021924199490	int
,	O
0.00033803599647571227535304316937	int
,	O
-	O
0.00008251723219239754024210552679	int
,	O
-	O
0.00003390879948656432545900779710	int
,	O
0.00001961398056848881816694014889	int
,	O
-	O
2.35593745904151401624656805567e-06	int
,	O
-	O
1.79055017080406086541563835433e-06	int
,	O
1.33129571185610681090725934031e-06	int
,	O
-	O
5.38879444715436544130673956170e-07	int
,	O
1.49603056041381416881299945557e-07	int
,	O
-	O
1.83377228267274327911131293091e-08	int
,	O
-	O
1.33191430762944336526965187651e-08	int
,	O
1.60642096463700438411396889489e-08	int
,	O
-	O
1.28932576330421806740136816643e-08	int
,	O
9.6169275086179165484403221944e-09	int
,	O
-	O
7.1818502280703532276832887290e-09	int
,	O
5.4744009217215145730697754561e-09	int
,	O
-	O
4.2680446690508456935030086136e-09	int
,	O
3.3941665009266174865683284781e-09	int
,	O
-	O
2.7440714072221673882163135170e-09	int
,	O
2.2488361522108255229193038962e-09	int
,	O
-	O
1.8638240716608748862087923337e-09	int
,	O
1.5592350940805373500866440401e-09	int
,	O
-	O
1.3145743937732330609242633070e-09	int
,	O
1.1153716777215047842790244968e-09	int
,	O
-	O
9.5117576805266622854647303110e-10	int
,	O
8.1428799553234876296804561100e-10	int
,	O
-	O
6.9893770813548773664326279169e-10	int
,	O
6.0073113636087448745018831981e-10	int
,	O
-	O
5.1627434258513453901420776514e-10	int
,	O
4.4290993195074905891788459756e-10	int
,	O
-	O
3.7852978599966867611179315200e-10	int
,	O
3.2143959338863177145307610452e-10	int
,	O
-	O
2.7025926680620777594992221143e-10	int
,	O
2.2384857772457918539228234321e-10	int
,	O
-	O
1.8125071664276678046551271701e-10	int
,	O
1.4164870008713668767293008546e-10	int
,	O
-	O
1.0433101857132782485813325981e-10	int
,	O
6.8663910168392483929411418190e-11	int
,	O
-	O
3.4068313177952244040559740439e-11	int
}	O
;	O
static	O
cheb_series	struct
B2_lt1_cs	struct
=	O
{	O
B2_lt1_data	array
,	O
39	int
,	O
-	O
1	int
,	O
1	int
,	O
39	int
}	O
;	O
static	O
double	O
B3_lt1_data	array
[	O
40	int
]	O
=	O
{	O
-	O
0.00137160820526992057354001614451	int
,	O
-	O
0.00025474937951101049982680561302	int
,	O
0.00024762975547895881652073467771	int
,	O
0.00005229657281480196749313930265	int
,	O
-	O
0.00007488354272621512385016593760	int
,	O
0.00001416880012891046449980449746	int
,	O
0.00001528986060172183690742576230	int
,	O
-	O
0.00001668672297078590514293325326	int
,	O
0.00001061765189536459018739585094	int
,	O
-	O
5.8220577442406209989680801335e-06	int
,	O
3.3322423743855900506302033234e-06	int
,	O
-	O
2.23292405803003860894449897815e-06	int
,	O
1.74816651036678291794777245325e-06	int
,	O
-	O
1.49581306041395051804547535093e-06	int
,	O
1.32759146107893129050610165582e-06	int
,	O
-	O
1.19376077392564467408373553343e-06	int
,	O
1.07878303863211630544654040875e-06	int
,	O
-	O
9.7743335011819134006676476250e-07	int
,	O
8.8729318903693324226127054792e-07	int
,	O
-	O
8.0671146292125665050876015280e-07	int
,	O
7.3432860378667354971042255937e-07	int
,	O
-	O
6.6897926072697370325310483359e-07	int
,	O
6.0966619703735610352576581485e-07	int
,	O
-	O
5.5554095284507959561958605420e-07	int
,	O
5.0588335673197236002812826526e-07	int
,	O
-	O
4.6008146297767601862670079590e-07	int
,	O
4.1761348515688145911438168306e-07	int
,	O
-	O
3.7803230006989446874174476515e-07	int
,	O
3.4095248501364300041684648230e-07	int
,	O
-	O
3.0603959751354749520615015472e-07	int
,	O
2.7300134179365690589640458993e-07	int
,	O
-	O
2.4158028250762304756044254231e-07	int
,	O
2.1154781038298751985689113868e-07	int
,	O
-	O
1.8269911328756771201465223313e-07	int
,	O
1.5484895085808513749026173074e-07	int
,	O
-	O
1.2782806851555809369226440495e-07	int
,	O
1.0148011725394892565174207341e-07	int
,	O
-	O
7.5658969771439627809239950461e-08	int
,	O
5.0226342286491286957075289622e-08	int
,	O
-	O
2.5049645660259882970547555831e-08	int
}	O
;	O
static	O
cheb_series	struct
B3_lt1_cs	struct
=	O
{	O
B3_lt1_data	array
,	O
39	int
,	O
-	O
1	int
,	O
1	int
,	O
39	int
}	O
;	O
static	O
double	O
A3_lt1_data	array
[	O
40	int
]	O
=	O
{	O
-	O
0.00017982561472134418587634980117	int
,	O
-	O
0.00036558603837525275836608884064	int
,	O
-	O
0.00002819398055929628850294406363	int
,	O
0.00016704539863875736769812786067	int
,	O
-	O
0.00007098969970347674307623044850	int
,	O
-	O
8.4470843942344237748899879940e-06	int
,	O
0.0000273413090343147765148014327150	int
,	O
-	O
0.0000199073838489821681991178018081	int
,	O
0.0000100004176278235088881096950105	int
,	O
-	O
3.9739852013143676487867902026e-06	int
,	O
1.2265357766449574306882693267e-06	int
,	O
-	O
1.88755584306424047416914864854e-07	int
,	O
-	O
1.37482206060161206336523452036e-07	int
,	O
2.10326379301853336795686477738e-07	int
,	O
-	O
2.05583778245412633433934301948e-07	int
,	O
1.82377384812654863038691147988e-07	int
,	O
-	O
1.58130247846381041027699152436e-07	int
,	O
1.36966982725588978654041029615e-07	int
,	O
-	O
1.19250280944620257443805710485e-07	int
,	O
1.04477169029350256435316644493e-07	int
,	O
-	O
9.2064832489437534542041040184e-08	int
,	O
8.1523798290458784610230199344e-08	int
,	O
-	O
7.2471794980050867512294061891e-08	int
,	O
6.4614432955971132569968860233e-08	int
,	O
-	O
5.7724095125560946811081322985e-08	int
,	O
5.1623107567436835158110947901e-08	int
,	O
-	O
4.6171250746798606260216486042e-08	int
,	O
4.1256621998650164023254101585e-08	int
,	O
-	O
3.6788925543159819135102047082e-08	int
,	O
3.2694499457951844422299750661e-08	int
,	O
-	O
2.89125899697964696586521743928e-08	int
,	O
2.53925288725374047626589488217e-08	int
,	O
-	O
2.20915707933726481321465184207e-08	int
,	O
1.89732166352720474944407102940e-08	int
,	O
-	O
1.60058977893259856012119939554e-08	int
,	O
1.31619294542205876946742394494e-08	int
,	O
-	O
1.04166651771938038563454275883e-08	int
,	O
7.7478015858156185064152078434e-09	int
,	O
-	O
5.1347942579352613057675111787e-09	int
,	O
2.5583541594586723967261504321e-09	int
}	O
;	O
static	O
cheb_series	struct
A3_lt1_cs	struct
=	O
{	O
A3_lt1_data	array
,	O
39	int
,	O
-	O
1	int
,	O
1	int
,	O
39	int
}	O
;	O
static	O
double	O
A4_lt1_data	array
[	O
30	int
]	O
=	O
{	O
0.00009054703770051610946958226736	int
,	O
0.00033066000498098017589672988293	int
,	O
0.00019737453734363989127226073272	int
,	O
-	O
0.00015490809725932037720034762889	int
,	O
-	O
0.00004514948935538730085479280454	int
,	O
0.00007976881782603940889444573924	int
,	O
-	O
0.00003314566154544740986264993251	int
,	O
-	O
1.88212148790135672249935711657e-06	int
,	O
0.0000114788756505519986352882940648	int
,	O
-	O
9.2263039911196207101468331210e-06	int
,	O
5.1401128250377780476084336340e-06	int
,	O
-	O
2.38418218951722002658891397905e-06	int
,	O
1.00664292214481531598338960828e-06	int
,	O
-	O
4.23224678096490060264249970540e-07	int
,	O
2.00132031535793489976535190025e-07	int
,	O
-	O
1.18689501178886741400633921047e-07	int
,	O
8.7819524319114212999768013738e-08	int
,	O
-	O
7.3964150324206644900787216386e-08	int
,	O
6.5780431507637165113885884236e-08	int
,	O
-	O
5.9651053193022652369837650411e-08	int
,	O
5.4447762662767276209052293773e-08	int
,	O
-	O
4.9802057381568863702541294988e-08	int
,	O
4.5571368194694340198117635845e-08	int
,	O
-	O
4.1682117173547642845382848197e-08	int
,	O
3.8084701352766049815367147717e-08	int
,	O
-	O
3.4740302885185237434662649907e-08	int
,	O
3.1616557064701510611273692060e-08	int
,	O
-	O
2.8685739487689556252374879267e-08	int
,	O
2.5923752117132254429002796600e-08	int
,	O
-	O
2.3309428552190587304662883477e-08	int
}	O
;	O
static	O
cheb_series	struct
A4_lt1_cs	struct
=	O
{	O
A4_lt1_data	array
,	O
29	int
,	O
-	O
1	int
,	O
1	int
,	O
29	int
}	O
;	O
static	O
double	O
olver_B0	function
(	O
double	O
z	double
,	O
double	O
abs_zeta	double
)	O
{	O
if	O
(	O
z	double
<	O
0.98	int
)	O
{	O
const	O
double	O
t	double
=	O
1.0	int
/	O
sqrt	function
(	O
1.0	int
-	O
z	double
*	O
z	double
)	O
;	O
return	O
-	O
5.0	int
/	O
(	O
48.0	int
*	O
abs_zeta	double
*	O
abs_zeta	double
)	O
+	O
t	double
*	O
(	O
-	O
3.0	int
+	O
5.0	int
*	O
t	double
*	O
t	double
)	O
/	O
(	O
24.0	int
*	O
sqrt	function
(	O
abs_zeta	double
)	O
)	O
;	O
}	O
else	O
if	O
(	O
z	double
<	O
1.02	int
)	O
{	O
const	O
double	O
a	double
=	O
1.0	int
-	O
z	double
;	O
const	O
double	O
c0	double
=	O
0.0179988721413553309252458658183	int
;	O
const	O
double	O
c1	double
=	O
0.0111992982212877614645974276203	int
;	O
const	O
double	O
c2	double
=	O
0.0059404069786014304317781160605	int
;	O
const	O
double	O
c3	double
=	O
0.0028676724516390040844556450173	int
;	O
const	O
double	O
c4	double
=	O
0.0012339189052567271708525111185	int
;	O
const	O
double	O
c5	double
=	O
0.0004169250674535178764734660248	int
;	O
const	O
double	O
c6	double
=	O
0.0000330173385085949806952777365	int
;	O
const	O
double	O
c7	double
=	O
-	O
0.0001318076238578203009990106425	int
;	O
const	O
double	O
c8	double
=	O
-	O
0.0001906870370050847239813945647	int
;	O
return	O
c0	double
+	O
a	double
*	O
(	O
c1	double
+	O
a	double
*	O
(	O
c2	double
+	O
a	double
*	O
(	O
c3	double
+	O
a	double
*	O
(	O
c4	double
+	O
a	double
*	O
(	O
c5	double
+	O
a	double
*	O
(	O
c6	double
+	O
a	double
*	O
(	O
c7	double
+	O
a	double
*	O
c8	double
)	O
)	O
)	O
)	O
)	O
)	O
)	O
;	O
}	O
else	O
{	O
const	O
double	O
t	double
=	O
1.0	int
/	O
(	O
z	double
*	O
sqrt	function
(	O
1.0	int
-	O
1.0	int
/	O
(	O
z	double
*	O
z	double
)	O
)	O
)	O
;	O
return	O
-	O
5.0	int
/	O
(	O
48.0	int
*	O
abs_zeta	double
*	O
abs_zeta	double
)	O
+	O
t	double
*	O
(	O
3.0	int
+	O
5.0	int
*	O
t	double
*	O
t	double
)	O
/	O
(	O
24.0	int
*	O
sqrt	function
(	O
abs_zeta	double
)	O
)	O
;	O
}	O
}	O
static	O
double	O
olver_B1	function
(	O
double	O
z	double
,	O
double	O
abs_zeta	double
)	O
{	O
if	O
(	O
z	double
<	O
0.88	int
)	O
{	O
const	O
double	O
t	double
=	O
1.0	int
/	O
sqrt	function
(	O
1.0	int
-	O
z	double
*	O
z	double
)	O
;	O
const	O
double	O
t2	double
=	O
t	double
*	O
t	double
;	O
const	O
double	O
rz	double
=	O
sqrt	function
(	O
abs_zeta	double
)	O
;	O
const	O
double	O
z32	double
=	O
rz	double
*	O
rz	double
*	O
rz	double
;	O
const	O
double	O
z92	double
=	O
z32	double
*	O
z32	double
*	O
z32	double
;	O
const	O
double	O
term1	double
=	O
t	double
*	O
t	double
*	O
t	double
*	O
(	O
30375.0	int
-	O
369603.0	int
*	O
t2	double
+	O
765765.0	int
*	O
t2	double
*	O
t2	double
-	O
425425.0	int
*	O
t2	double
*	O
t2	double
*	O
t2	double
)	O
/	O
414720.0	int
;	O
const	O
double	O
term2	double
=	O
85085.0	int
/	O
(	O
663552.0	int
*	O
z92	double
)	O
;	O
const	O
double	O
term3	double
=	O
385.0	int
/	O
110592.	int
*	O
t	double
*	O
(	O
3.0	int
-	O
5.0	int
*	O
t2	double
)	O
/	O
(	O
abs_zeta	double
*	O
abs_zeta	double
*	O
abs_zeta	double
)	O
;	O
const	O
double	O
term4	double
=	O
5.0	int
/	O
55296.0	int
*	O
t2	double
*	O
(	O
81.0	int
-	O
462.0	int
*	O
t2	double
+	O
385.0	int
*	O
t2	double
*	O
t2	double
)	O
/	O
z32	double
;	O
return	O
-	O
(	O
term1	double
+	O
term2	double
+	O
term3	double
+	O
term4	double
)	O
/	O
rz	double
;	O
}	O
else	O
if	O
(	O
z	double
<	O
1.12	int
)	O
{	O
const	O
double	O
a	double
=	O
1.0	int
-	O
z	double
;	O
const	O
double	O
c0	double
=	O
-	O
0.00149282953213429172050073403334	int
;	O
const	O
double	O
c1	double
=	O
-	O
0.00175640941909277865678308358128	int
;	O
const	O
double	O
c2	double
=	O
-	O
0.00113346148874174912576929663517	int
;	O
const	O
double	O
c3	double
=	O
-	O
0.00034691090981382974689396961817	int
;	O
const	O
double	O
c4	double
=	O
0.00022752516104839243675693256916	int
;	O
const	O
double	O
c5	double
=	O
0.00051764145724244846447294636552	int
;	O
const	O
double	O
c6	double
=	O
0.00058906174858194233998714243010	int
;	O
const	O
double	O
c7	double
=	O
0.00053485514521888073087240392846	int
;	O
const	O
double	O
c8	double
=	O
0.00042891792986220150647633418796	int
;	O
const	O
double	O
c9	double
=	O
0.00031639765900613633260381972850	int
;	O
const	O
double	O
c10	double
=	O
0.00021908147678699592975840749194	int
;	O
return	O
c0	double
+	O
a	double
*	O
(	O
c1	double
+	O
a	double
*	O
(	O
c2	double
+	O
a	double
*	O
(	O
c3	double
+	O
a	double
*	O
(	O
c4	double
+	O
a	double
*	O
(	O
c5	double
+	O
a	double
*	O
(	O
c6	double
+	O
a	double
*	O
(	O
c7	double
+	O
a	double
*	O
(	O
c8	double
+	O
a	double
*	O
(	O
c9	double
+	O
a	double
*	O
c10	double
)	O
)	O
)	O
)	O
)	O
)	O
)	O
)	O
)	O
;	O
}	O
else	O
{	O
const	O
double	O
t	double
=	O
1.0	int
/	O
(	O
z	double
*	O
sqrt	function
(	O
1.0	int
-	O
1.0	int
/	O
(	O
z	double
*	O
z	double
)	O
)	O
)	O
;	O
const	O
double	O
t2	double
=	O
t	double
*	O
t	double
;	O
const	O
double	O
rz	double
=	O
sqrt	function
(	O
abs_zeta	double
)	O
;	O
const	O
double	O
z32	double
=	O
rz	double
*	O
rz	double
*	O
rz	double
;	O
const	O
double	O
z92	double
=	O
z32	double
*	O
z32	double
*	O
z32	double
;	O
const	O
double	O
term1	double
=	O
-	O
t2	double
*	O
t	double
*	O
(	O
30375.0	int
+	O
369603.0	int
*	O
t2	double
+	O
765765.0	int
*	O
t2	double
*	O
t2	double
+	O
425425.0	int
*	O
t2	double
*	O
t2	double
*	O
t2	double
)	O
/	O
414720.0	int
;	O
const	O
double	O
term2	double
=	O
85085.0	int
/	O
(	O
663552.0	int
*	O
z92	double
)	O
;	O
const	O
double	O
term3	double
=	O
-	O
385.0	int
/	O
110592.0	int
*	O
t	double
*	O
(	O
3.0	int
+	O
5.0	int
*	O
t2	double
)	O
/	O
(	O
abs_zeta	double
*	O
abs_zeta	double
*	O
abs_zeta	double
)	O
;	O
const	O
double	O
term4	double
=	O
5.0	int
/	O
55296.0	int
*	O
t2	double
*	O
(	O
81.0	int
+	O
462.0	int
*	O
t2	double
+	O
385.0	int
*	O
t2	double
*	O
t2	double
)	O
/	O
z32	double
;	O
return	O
(	O
term1	double
+	O
term2	double
+	O
term3	double
+	O
term4	double
)	O
/	O
rz	double
;	O
}	O
}	O
static	O
double	O
olver_B2	function
(	O
double	O
z	double
)	O
{	O
if	O
(	O
z	double
<	O
0.8	int
)	O
{	O
const	O
double	O
x	double
=	O
5.0	int
*	O
z	double
/	O
2.0	int
-	O
1.0	int
;	O
gsl_sf_result	struct
c	pointer
;	O
cheb_eval_e	function
(	O
&	O
B2_lt1_cs	struct
,	O
x	double
,	O
&	O
c	pointer
)	O
;	O
return	O
c	pointer
.	O
val	double
/	O
z	double
;	O
}	O
else	O
if	O
(	O
z	double
<=	O
1.2	int
)	O
{	O
const	O
double	O
a	double
=	O
1.0	int
-	O
z	double
;	O
const	O
double	O
c0	double
=	O
0.00055221307672129279005986982501	int
;	O
const	O
double	O
c1	double
=	O
0.00089586516310476929281129228969	int
;	O
const	O
double	O
c2	double
=	O
0.00067015003441569770883539158863	int
;	O
const	O
double	O
c3	double
=	O
0.00010166263361949045682945811828	int
;	O
const	O
double	O
c4	double
=	O
-	O
0.00044086345133806887291336488582	int
;	O
const	O
double	O
c5	double
=	O
-	O
0.00073963081508788743392883072523	int
;	O
const	O
double	O
c6	double
=	O
-	O
0.00076745494377839561259903887331	int
;	O
const	O
double	O
c7	double
=	O
-	O
0.00060829038106040362291568012663	int
;	O
const	O
double	O
c8	double
=	O
-	O
0.00037128707528893496121336168683	int
;	O
const	O
double	O
c9	double
=	O
-	O
0.00014116325105702609866850307176	int
;	O
return	O
c0	double
+	O
a	double
*	O
(	O
c1	double
+	O
a	double
*	O
(	O
c2	double
+	O
a	double
*	O
(	O
c3	double
+	O
a	double
*	O
(	O
c4	double
+	O
a	double
*	O
(	O
c5	double
+	O
a	double
*	O
(	O
c6	double
+	O
a	double
*	O
(	O
c7	double
+	O
a	double
*	O
(	O
c8	double
+	O
a	double
*	O
c9	double
)	O
)	O
)	O
)	O
)	O
)	O
)	O
)	O
;	O
}	O
else	O
{	O
const	O
double	O
zi	double
=	O
1.0	int
/	O
z	double
;	O
const	O
double	O
x	double
=	O
12.0	int
/	O
5.0	int
*	O
zi	double
-	O
1.0	int
;	O
gsl_sf_result	struct
c	pointer
;	O
cheb_eval_e	function
(	O
&	O
B2_gt1_cs	struct
,	O
x	double
,	O
&	O
c	pointer
)	O
;	O
return	O
c	pointer
.	O
val	double
*	O
zi	double
*	O
zi	double
*	O
zi	double
;	O
}	O
}	O
static	O
double	O
olver_B3	function
(	O
double	O
z	double
)	O
{	O
if	O
(	O
z	double
<	O
0.8	int
)	O
{	O
const	O
double	O
x	double
=	O
5.0	int
*	O
z	double
/	O
2.0	int
-	O
1.0	int
;	O
gsl_sf_result	struct
c	pointer
;	O
cheb_eval_e	function
(	O
&	O
B3_lt1_cs	struct
,	O
x	double
,	O
&	O
c	pointer
)	O
;	O
return	O
c	pointer
.	O
val	double
;	O
}	O
else	O
if	O
(	O
z	double
<	O
1.2	int
)	O
{	O
const	O
double	O
a	double
=	O
1.0	int
-	O
z	double
;	O
const	O
double	O
c0	double
=	O
-	O
0.00047461779655995980754441833105	int
;	O
const	O
double	O
c1	double
=	O
-	O
0.00095572913429464297452176811898	int
;	O
const	O
double	O
c2	double
=	O
-	O
0.00080369634512082892655558133973	int
;	O
const	O
double	O
c3	double
=	O
-	O
0.00000727921669154784138080600339	int
;	O
const	O
double	O
c4	double
=	O
0.00093162500331581345235746518994	int
;	O
const	O
double	O
c5	double
=	O
0.00149848796913751497227188612403	int
;	O
const	O
double	O
c6	double
=	O
0.00148406039675949727870390426462	int
;	O
return	O
c0	double
+	O
a	double
*	O
(	O
c1	double
+	O
a	double
*	O
(	O
c2	double
+	O
a	double
*	O
(	O
c3	double
+	O
a	double
*	O
(	O
c4	double
+	O
a	double
*	O
(	O
c5	double
+	O
a	double
*	O
c6	double
)	O
)	O
)	O
)	O
)	O
;	O
}	O
else	O
{	O
const	O
double	O
x	double
=	O
12.0	int
/	O
(	O
5.0	int
*	O
z	double
)	O
-	O
1.0	int
;	O
const	O
double	O
zi2	double
=	O
1.0	int
/	O
(	O
z	double
*	O
z	double
)	O
;	O
gsl_sf_result	struct
c	pointer
;	O
cheb_eval_e	function
(	O
&	O
B3_gt1_cs	struct
,	O
x	double
,	O
&	O
c	pointer
)	O
;	O
return	O
c	pointer
.	O
val	double
*	O
zi2	double
*	O
zi2	double
*	O
zi2	double
;	O
}	O
}	O
static	O
double	O
olver_A1	function
(	O
double	O
z	double
,	O
double	O
abs_zeta	double
,	O
double	O
*	O
err	double
)	O
{	O
if	O
(	O
z	double
<	O
0.98	int
)	O
{	O
double	O
t	double
=	O
1.0	int
/	O
sqrt	function
(	O
1.0	int
-	O
z	double
*	O
z	double
)	O
;	O
double	O
rz	double
=	O
sqrt	function
(	O
abs_zeta	double
)	O
;	O
double	O
t2	double
=	O
t	double
*	O
t	double
;	O
double	O
term1	double
=	O
t2	double
*	O
(	O
81.0	int
-	O
462.0	int
*	O
t2	double
+	O
385.0	int
*	O
t2	double
*	O
t2	double
)	O
/	O
1152.0	int
;	O
double	O
term2	double
=	O
-	O
455.0	int
/	O
(	O
4608.0	int
*	O
abs_zeta	double
*	O
abs_zeta	double
*	O
abs_zeta	double
)	O
;	O
double	O
term3	double
=	O
7.0	int
*	O
t	double
*	O
(	O
-	O
3.0	int
+	O
5.0	int
*	O
t2	double
)	O
/	O
(	O
1152.0	int
*	O
rz	double
*	O
rz	double
*	O
rz	double
)	O
;	O
*	O
err	double
=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
(	O
fabs	function
(	O
term1	double
)	O
+	O
fabs	function
(	O
term2	double
)	O
+	O
fabs	function
(	O
term3	double
)	O
)	O
;	O
return	O
term1	double
+	O
term2	double
+	O
term3	double
;	O
}	O
else	O
if	O
(	O
z	double
<	O
1.02	int
)	O
{	O
const	O
double	O
a	double
=	O
1.0	int
-	O
z	double
;	O
const	O
double	O
c0	double
=	O
-	O
0.00444444444444444444444444444444	int
;	O
const	O
double	O
c1	double
=	O
-	O
0.00184415584415584415584415584416	int
;	O
const	O
double	O
c2	double
=	O
0.00056812076812076812076812076812	int
;	O
const	O
double	O
c3	double
=	O
0.00168137865661675185484709294233	int
;	O
const	O
double	O
c4	double
=	O
0.00186744042139000122193399504324	int
;	O
const	O
double	O
c5	double
=	O
0.00161330105833747826430066790326	int
;	O
const	O
double	O
c6	double
=	O
0.00123177312220625816558607537838	int
;	O
const	O
double	O
c7	double
=	O
0.00087334711007377573881689318421	int
;	O
const	O
double	O
c8	double
=	O
0.00059004942455353250141217015410	int
;	O
const	O
double	O
sum	double
=	O
c0	double
+	O
a	double
*	O
(	O
c1	double
+	O
a	double
*	O
(	O
c2	double
+	O
a	double
*	O
(	O
c3	double
+	O
a	double
*	O
(	O
c4	double
+	O
a	double
*	O
(	O
c5	double
+	O
a	double
*	O
(	O
c6	double
+	O
a	double
*	O
(	O
c7	double
+	O
a	double
*	O
c8	double
)	O
)	O
)	O
)	O
)	O
)	O
)	O
;	O
*	O
err	double
=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
sum	double
)	O
;	O
return	O
sum	double
;	O
}	O
else	O
{	O
const	O
double	O
t	double
=	O
1.0	int
/	O
(	O
z	double
*	O
sqrt	function
(	O
1.0	int
-	O
1.0	int
/	O
(	O
z	double
*	O
z	double
)	O
)	O
)	O
;	O
const	O
double	O
rz	double
=	O
sqrt	function
(	O
abs_zeta	double
)	O
;	O
const	O
double	O
t2	double
=	O
t	double
*	O
t	double
;	O
const	O
double	O
term1	double
=	O
-	O
t2	double
*	O
(	O
81.0	int
+	O
462.0	int
*	O
t2	double
+	O
385.0	int
*	O
t2	double
*	O
t2	double
)	O
/	O
1152.0	int
;	O
const	O
double	O
term2	double
=	O
455.0	int
/	O
(	O
4608.0	int
*	O
abs_zeta	double
*	O
abs_zeta	double
*	O
abs_zeta	double
)	O
;	O
const	O
double	O
term3	double
=	O
-	O
7.0	int
*	O
t	double
*	O
(	O
3.0	int
+	O
5.0	int
*	O
t2	double
)	O
/	O
(	O
1152.0	int
*	O
rz	double
*	O
rz	double
*	O
rz	double
)	O
;	O
*	O
err	double
=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
(	O
fabs	function
(	O
term1	double
)	O
+	O
fabs	function
(	O
term2	double
)	O
+	O
fabs	function
(	O
term3	double
)	O
)	O
;	O
return	O
term1	double
+	O
term2	double
+	O
term3	double
;	O
}	O
}	O
static	O
double	O
olver_A2	function
(	O
double	O
z	double
,	O
double	O
abs_zeta	double
)	O
{	O
if	O
(	O
z	double
<	O
0.88	int
)	O
{	O
double	O
t	double
=	O
1.0	int
/	O
sqrt	function
(	O
1.0	int
-	O
z	double
*	O
z	double
)	O
;	O
double	O
t2	double
=	O
t	double
*	O
t	double
;	O
double	O
t4	double
=	O
t2	double
*	O
t2	double
;	O
double	O
t6	double
=	O
t4	double
*	O
t2	double
;	O
double	O
t8	double
=	O
t4	double
*	O
t4	double
;	O
double	O
rz	double
=	O
sqrt	function
(	O
abs_zeta	double
)	O
;	O
double	O
z3	double
=	O
abs_zeta	double
*	O
abs_zeta	double
*	O
abs_zeta	double
;	O
double	O
z32	double
=	O
rz	double
*	O
rz	double
*	O
rz	double
;	O
double	O
z92	double
=	O
z3	double
*	O
z32	double
;	O
double	O
term1	double
=	O
t4	double
*	O
(	O
4465125.0	int
-	O
94121676.0	int
*	O
t2	double
+	O
349922430.0	int
*	O
t4	double
-	O
446185740.0	int
*	O
t6	double
+	O
185910725.0	int
*	O
t8	double
)	O
/	O
39813120.0	int
;	O
double	O
term2	double
=	O
-	O
40415375.0	int
/	O
(	O
127401984.0	int
*	O
z3	double
*	O
z3	double
)	O
;	O
double	O
term3	double
=	O
-	O
95095.0	int
/	O
15925248.0	int
*	O
t	double
*	O
(	O
3.0	int
-	O
5.0	int
*	O
t2	double
)	O
/	O
z92	double
;	O
double	O
term4	double
=	O
-	O
455.0	int
/	O
5308416.0	int
*	O
t2	double
*	O
(	O
81.0	int
-	O
462.0	int
*	O
t2	double
+	O
385.0	int
*	O
t4	double
)	O
/	O
z3	double
;	O
double	O
term5	double
=	O
-	O
7.0	int
/	O
19906560.0	int
*	O
t	double
*	O
t2	double
*	O
(	O
30375.0	int
-	O
369603.0	int
*	O
t2	double
+	O
765765.0	int
*	O
t4	double
-	O
425425.0	int
*	O
t6	double
)	O
/	O
z32	double
;	O
return	O
term1	double
+	O
term2	double
+	O
term3	double
+	O
term4	double
+	O
term5	double
;	O
}	O
else	O
if	O
(	O
z	double
<	O
1.12	int
)	O
{	O
double	O
a	double
=	O
1.0	int
-	O
z	double
;	O
const	O
double	O
c0	double
=	O
0.000693735541354588973636592684210	int
;	O
const	O
double	O
c1	double
=	O
0.000464483490365843307019777608010	int
;	O
const	O
double	O
c2	double
=	O
-	O
0.000289036254605598132482570468291	int
;	O
const	O
double	O
c3	double
=	O
-	O
0.000874764943953712638574497548110	int
;	O
const	O
double	O
c4	double
=	O
-	O
0.001029716376139865629968584679350	int
;	O
const	O
double	O
c5	double
=	O
-	O
0.000836857329713810600584714031650	int
;	O
const	O
double	O
c6	double
=	O
-	O
0.000488910893527218954998270124540	int
;	O
const	O
double	O
c7	double
=	O
-	O
0.000144236747940817220502256810151	int
;	O
const	O
double	O
c8	double
=	O
0.000114363800986163478038576460325	int
;	O
const	O
double	O
c9	double
=	O
0.000266806881492777536223944807117	int
;	O
const	O
double	O
c10	double
=	O
-	O
0.011975517576151069627471048587000	int
;	O
return	O
c0	double
+	O
a	double
*	O
(	O
c1	double
+	O
a	double
*	O
(	O
c2	double
+	O
a	double
*	O
(	O
c3	double
+	O
a	double
*	O
(	O
c4	double
+	O
a	double
*	O
(	O
c5	double
+	O
a	double
*	O
(	O
c6	double
+	O
a	double
*	O
(	O
c7	double
+	O
a	double
*	O
(	O
c8	double
+	O
a	double
*	O
(	O
c9	double
+	O
a	double
*	O
c10	double
)	O
)	O
)	O
)	O
)	O
)	O
)	O
)	O
)	O
;	O
}	O
else	O
{	O
const	O
double	O
t	double
=	O
1.0	int
/	O
(	O
z	double
*	O
sqrt	function
(	O
1.0	int
-	O
1.0	int
/	O
(	O
z	double
*	O
z	double
)	O
)	O
)	O
;	O
const	O
double	O
t2	double
=	O
t	double
*	O
t	double
;	O
const	O
double	O
t4	double
=	O
t2	double
*	O
t2	double
;	O
const	O
double	O
t6	double
=	O
t4	double
*	O
t2	double
;	O
const	O
double	O
t8	double
=	O
t4	double
*	O
t4	double
;	O
const	O
double	O
rz	double
=	O
sqrt	function
(	O
abs_zeta	double
)	O
;	O
const	O
double	O
z3	double
=	O
abs_zeta	double
*	O
abs_zeta	double
*	O
abs_zeta	double
;	O
const	O
double	O
z32	double
=	O
rz	double
*	O
rz	double
*	O
rz	double
;	O
const	O
double	O
z92	double
=	O
z3	double
*	O
z32	double
;	O
const	O
double	O
term1	double
=	O
t4	double
*	O
(	O
4465125.0	int
+	O
94121676.0	int
*	O
t2	double
+	O
349922430.0	int
*	O
t4	double
+	O
446185740.0	int
*	O
t6	double
+	O
185910725.0	int
*	O
t8	double
)	O
/	O
39813120.0	int
;	O
const	O
double	O
term2	double
=	O
-	O
40415375.0	int
/	O
(	O
127401984.0	int
*	O
z3	double
*	O
z3	double
)	O
;	O
const	O
double	O
term3	double
=	O
95095.0	int
/	O
15925248.0	int
*	O
t	double
*	O
(	O
3.0	int
+	O
5.0	int
*	O
t2	double
)	O
/	O
z92	double
;	O
const	O
double	O
term4	double
=	O
-	O
455.0	int
/	O
5308416.0	int
*	O
t2	double
*	O
(	O
81.0	int
+	O
462.0	int
*	O
t2	double
+	O
385.0	int
*	O
t4	double
)	O
/	O
z3	double
;	O
const	O
double	O
term5	double
=	O
7.0	int
/	O
19906560.0	int
*	O
t	double
*	O
t2	double
*	O
(	O
30375.0	int
+	O
369603.0	int
*	O
t2	double
+	O
765765.0	int
*	O
t4	double
+	O
425425.0	int
*	O
t6	double
)	O
/	O
z32	double
;	O
return	O
term1	double
+	O
term2	double
+	O
term3	double
+	O
term4	double
+	O
term5	double
;	O
}	O
}	O
static	O
double	O
olver_A3	function
(	O
double	O
z	double
)	O
{	O
if	O
(	O
z	double
<	O
0.9	int
)	O
{	O
const	O
double	O
x	double
=	O
20.0	int
*	O
z	double
/	O
9.0	int
-	O
1.0	int
;	O
gsl_sf_result	struct
c	pointer
;	O
cheb_eval_e	function
(	O
&	O
A3_lt1_cs	struct
,	O
x	double
,	O
&	O
c	pointer
)	O
;	O
return	O
c	pointer
.	O
val	double
;	O
}	O
else	O
if	O
(	O
z	double
<	O
1.1	int
)	O
{	O
double	O
a	double
=	O
1.0	int
-	O
z	double
;	O
const	O
double	O
c0	double
=	O
-	O
0.000354211971457743840771125759200	int
;	O
const	O
double	O
c1	double
=	O
-	O
0.000312322527890318832782774881353	int
;	O
const	O
double	O
c2	double
=	O
0.000277947465383133980329617631915	int
;	O
const	O
double	O
c3	double
=	O
0.000919803044747966977054155192400	int
;	O
const	O
double	O
c4	double
=	O
0.001147600388275977640983696906320	int
;	O
const	O
double	O
c5	double
=	O
0.000869239326123625742931772044544	int
;	O
const	O
double	O
c6	double
=	O
0.000287392257282507334785281718027	int
;	O
return	O
c0	double
+	O
a	double
*	O
(	O
c1	double
+	O
a	double
*	O
(	O
c2	double
+	O
a	double
*	O
(	O
c3	double
+	O
a	double
*	O
(	O
c4	double
+	O
a	double
*	O
(	O
c5	double
+	O
a	double
*	O
c6	double
)	O
)	O
)	O
)	O
)	O
;	O
}	O
else	O
{	O
const	O
double	O
x	double
=	O
11.0	int
/	O
(	O
5.0	int
*	O
z	double
)	O
-	O
1.0	int
;	O
const	O
double	O
zi2	double
=	O
1.0	int
/	O
(	O
z	double
*	O
z	double
)	O
;	O
gsl_sf_result	struct
c	pointer
;	O
cheb_eval_e	function
(	O
&	O
A3_gt1_cs	struct
,	O
x	double
,	O
&	O
c	pointer
)	O
;	O
return	O
c	pointer
.	O
val	double
*	O
zi2	double
*	O
zi2	double
*	O
zi2	double
;	O
}	O
}	O
static	O
double	O
olver_A4	function
(	O
double	O
z	double
)	O
{	O
if	O
(	O
z	double
<	O
0.8	int
)	O
{	O
const	O
double	O
x	double
=	O
5.0	int
*	O
z	double
/	O
2.0	int
-	O
1.0	int
;	O
gsl_sf_result	struct
c	pointer
;	O
cheb_eval_e	function
(	O
&	O
A4_lt1_cs	struct
,	O
x	double
,	O
&	O
c	pointer
)	O
;	O
return	O
c	pointer
.	O
val	double
;	O
}	O
else	O
if	O
(	O
z	double
<	O
1.2	int
)	O
{	O
double	O
a	double
=	O
1.0	int
-	O
z	double
;	O
const	O
double	O
c0	double
=	O
0.00037819419920177291402661228437	int
;	O
const	O
double	O
c1	double
=	O
0.00040494390552363233477213857527	int
;	O
const	O
double	O
c2	double
=	O
-	O
0.00045764735528936113047289344569	int
;	O
const	O
double	O
c3	double
=	O
-	O
0.00165361044229650225813161341879	int
;	O
const	O
double	O
c4	double
=	O
-	O
0.00217527517983360049717137015539	int
;	O
const	O
double	O
c5	double
=	O
-	O
0.00152003287866490735107772795537	int
;	O
return	O
c0	double
+	O
a	double
*	O
(	O
c1	double
+	O
a	double
*	O
(	O
c2	double
+	O
a	double
*	O
(	O
c3	double
+	O
a	double
*	O
(	O
c4	double
+	O
a	double
*	O
c5	double
)	O
)	O
)	O
)	O
;	O
}	O
else	O
{	O
const	O
double	O
x	double
=	O
12.0	int
/	O
(	O
5.0	int
*	O
z	double
)	O
-	O
1.0	int
;	O
const	O
double	O
zi2	double
=	O
1.0	int
/	O
(	O
z	double
*	O
z	double
)	O
;	O
gsl_sf_result	struct
c	pointer
;	O
cheb_eval_e	function
(	O
&	O
A4_gt1_cs	struct
,	O
x	double
,	O
&	O
c	pointer
)	O
;	O
return	O
c	pointer
.	O
val	double
*	O
zi2	double
*	O
zi2	double
*	O
zi2	double
*	O
zi2	double
;	O
}	O
}	O
inline	O
static	O
double	O
olver_Asum	function
(	O
double	O
nu	double
,	O
double	O
z	double
,	O
double	O
abs_zeta	double
,	O
double	O
*	O
err	double
)	O
{	O
double	O
nu2	double
=	O
nu	double
*	O
nu	double
;	O
double	O
A1_err	double
;	O
double	O
A1	double
=	O
olver_A1	function
(	O
z	double
,	O
abs_zeta	double
,	O
&	O
A1_err	double
)	O
;	O
double	O
A2	double
=	O
olver_A2	function
(	O
z	double
,	O
abs_zeta	double
)	O
;	O
double	O
A3	double
=	O
olver_A3	function
(	O
z	double
)	O
;	O
double	O
A4	double
=	O
olver_A4	function
(	O
z	double
)	O
;	O
*	O
err	double
=	O
A1_err	double
/	O
nu2	double
+	O
GSL_DBL_EPSILON	int
;	O
return	O
1.0	int
+	O
A1	double
/	O
nu2	double
+	O
A2	double
/	O
(	O
nu2	double
*	O
nu2	double
)	O
+	O
A3	double
/	O
(	O
nu2	double
*	O
nu2	double
*	O
nu2	double
)	O
+	O
A4	double
/	O
(	O
nu2	double
*	O
nu2	double
*	O
nu2	double
*	O
nu2	double
)	O
;	O
}	O
inline	O
static	O
double	O
olver_Bsum	function
(	O
double	O
nu	double
,	O
double	O
z	double
,	O
double	O
abs_zeta	double
)	O
{	O
double	O
nu2	double
=	O
nu	double
*	O
nu	double
;	O
double	O
B0	double
=	O
olver_B0	function
(	O
z	double
,	O
abs_zeta	double
)	O
;	O
double	O
B1	double
=	O
olver_B1	function
(	O
z	double
,	O
abs_zeta	double
)	O
;	O
double	O
B2	double
=	O
olver_B2	function
(	O
z	double
)	O
;	O
double	O
B3	double
=	O
olver_B3	function
(	O
z	double
)	O
;	O
return	O
B0	double
+	O
B1	double
/	O
nu2	double
+	O
B2	double
/	O
(	O
nu2	double
*	O
nu2	double
)	O
+	O
B3	double
/	O
(	O
nu2	double
*	O
nu2	double
*	O
nu2	double
*	O
nu2	double
)	O
;	O
}	O
int	O
gsl_sf_bessel_Jnu_asymp_Olver_e	function
(	O
double	O
nu	double
,	O
double	O
x	double
,	O
gsl_sf_result	struct
*	O
result	pointer
)	O
{	O
if	O
(	O
x	double
<=	O
0.0	int
||	O
nu	double
<=	O
0.0	int
)	O
{	O
DOMAIN_ERROR	O
(	O
result	pointer
)	O
;	O
}	O
else	O
{	O
double	O
zeta	double
,	O
abs_zeta	double
;	O
double	O
arg	double
;	O
double	O
pre	double
;	O
double	O
asum	double
,	O
bsum	double
,	O
asum_err	double
;	O
gsl_sf_result	struct
ai	struct
;	O
gsl_sf_result	struct
aip	struct
;	O
double	O
z	double
=	O
x	double
/	O
nu	double
;	O
double	O
crnu	double
=	O
pow	function
(	O
nu	double
,	O
1.0	int
/	O
3.0	int
)	O
;	O
double	O
nu3	double
=	O
nu	double
*	O
nu	double
*	O
nu	double
;	O
double	O
nu11	double
=	O
nu3	double
*	O
nu3	double
*	O
nu3	double
*	O
nu	double
*	O
nu	double
;	O
int	O
stat_a	int
,	O
stat_ap	int
;	O
if	O
(	O
fabs	function
(	O
1.0	int
-	O
z	double
)	O
<	O
0.02	int
)	O
{	O
const	O
double	O
a	double
=	O
1.0	int
-	O
z	double
;	O
const	O
double	O
c0	double
=	O
1.25992104989487316476721060728	int
;	O
const	O
double	O
c1	double
=	O
0.37797631496846194943016318218	int
;	O
const	O
double	O
c2	double
=	O
0.230385563409348235843147082474	int
;	O
const	O
double	O
c3	double
=	O
0.165909603649648694839821892031	int
;	O
const	O
double	O
c4	double
=	O
0.12931387086451008907	int
;	O
const	O
double	O
c5	double
=	O
0.10568046188858133991	int
;	O
const	O
double	O
c6	double
=	O
0.08916997952268186978	int
;	O
const	O
double	O
c7	double
=	O
0.07700014900618802456	int
;	O
pre	double
=	O
c0	double
+	O
a	double
*	O
(	O
c1	double
+	O
a	double
*	O
(	O
c2	double
+	O
a	double
*	O
(	O
c3	double
+	O
a	double
*	O
(	O
c4	double
+	O
a	double
*	O
(	O
c5	double
+	O
a	double
*	O
(	O
c6	double
+	O
a	double
*	O
c7	double
)	O
)	O
)	O
)	O
)	O
)	O
;	O
zeta	double
=	O
a	double
*	O
pre	double
;	O
pre	double
=	O
sqrt	function
(	O
2.0	int
*	O
sqrt	function
(	O
pre	double
/	O
(	O
1.0	int
+	O
z	double
)	O
)	O
)	O
;	O
abs_zeta	double
=	O
fabs	function
(	O
zeta	double
)	O
;	O
}	O
else	O
if	O
(	O
z	double
<	O
1.0	int
)	O
{	O
double	O
rt	double
=	O
sqrt	function
(	O
1.0	int
-	O
z	double
*	O
z	double
)	O
;	O
abs_zeta	double
=	O
pow	function
(	O
1.5	int
*	O
(	O
log	function
(	O
(	O
1.0	int
+	O
rt	double
)	O
/	O
z	double
)	O
-	O
rt	double
)	O
,	O
2.0	int
/	O
3.0	int
)	O
;	O
zeta	double
=	O
abs_zeta	double
;	O
pre	double
=	O
sqrt	function
(	O
2.0	int
*	O
sqrt	function
(	O
abs_zeta	double
/	O
(	O
rt	double
*	O
rt	double
)	O
)	O
)	O
;	O
}	O
else	O
{	O
double	O
rt	double
=	O
z	double
*	O
sqrt	function
(	O
1.0	int
-	O
1.0	int
/	O
(	O
z	double
*	O
z	double
)	O
)	O
;	O
abs_zeta	double
=	O
pow	function
(	O
1.5	int
*	O
(	O
rt	double
-	O
acos	function
(	O
1.0	int
/	O
z	double
)	O
)	O
,	O
2.0	int
/	O
3.0	int
)	O
;	O
zeta	double
=	O
-	O
abs_zeta	double
;	O
pre	double
=	O
sqrt	function
(	O
2.0	int
*	O
sqrt	function
(	O
abs_zeta	double
/	O
(	O
rt	double
*	O
rt	double
)	O
)	O
)	O
;	O
}	O
asum	double
=	O
olver_Asum	function
(	O
nu	double
,	O
z	double
,	O
abs_zeta	double
,	O
&	O
asum_err	double
)	O
;	O
bsum	double
=	O
olver_Bsum	function
(	O
nu	double
,	O
z	double
,	O
abs_zeta	double
)	O
;	O
arg	double
=	O
crnu	double
*	O
crnu	double
*	O
zeta	double
;	O
stat_a	int
=	O
gsl_sf_airy_Ai_e	function
(	O
arg	double
,	O
GSL_MODE_DEFAULT	int
,	O
&	O
ai	struct
)	O
;	O
stat_ap	int
=	O
gsl_sf_airy_Ai_deriv_e	function
(	O
arg	double
,	O
GSL_MODE_DEFAULT	int
,	O
&	O
aip	struct
)	O
;	O
result	pointer
->	O
val	double
=	O
pre	double
*	O
(	O
ai	struct
.	O
val	double
*	O
asum	double
/	O
crnu	double
+	O
aip	struct
.	O
val	double
*	O
bsum	double
/	O
(	O
nu	double
*	O
crnu	double
*	O
crnu	double
)	O
)	O
;	O
result	pointer
->	O
err	double
=	O
pre	double
*	O
(	O
ai	struct
.	O
err	double
*	O
fabs	function
(	O
asum	double
/	O
crnu	double
)	O
)	O
;	O
result	pointer
->	O
err	double
+=	O
pre	double
*	O
fabs	function
(	O
ai	struct
.	O
val	double
)	O
*	O
asum_err	double
/	O
crnu	double
;	O
result	pointer
->	O
err	double
+=	O
pre	double
*	O
fabs	function
(	O
ai	struct
.	O
val	double
*	O
asum	double
)	O
/	O
(	O
crnu	double
*	O
nu11	double
)	O
;	O
result	pointer
->	O
err	double
+=	O
8.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
result	pointer
->	O
val	double
)	O
;	O
return	O
GSL_ERROR_SELECT_2	O
(	O
stat_a	int
,	O
stat_ap	int
)	O
;	O
}	O
}	O
int	O
gsl_sf_bessel_Ynu_asymp_Olver_e	function
(	O
double	O
nu	double
,	O
double	O
x	double
,	O
gsl_sf_result	struct
*	O
result	pointer
)	O
{	O
if	O
(	O
x	double
<=	O
0.0	int
||	O
nu	double
<=	O
0.0	int
)	O
{	O
DOMAIN_ERROR	O
(	O
result	pointer
)	O
;	O
}	O
else	O
{	O
double	O
zeta	double
,	O
abs_zeta	double
;	O
double	O
arg	double
;	O
double	O
pre	double
;	O
double	O
asum	double
,	O
bsum	double
,	O
asum_err	double
;	O
gsl_sf_result	struct
bi	struct
;	O
gsl_sf_result	struct
bip	struct
;	O
double	O
z	double
=	O
x	double
/	O
nu	double
;	O
double	O
crnu	double
=	O
pow	function
(	O
nu	double
,	O
1.0	int
/	O
3.0	int
)	O
;	O
double	O
nu3	double
=	O
nu	double
*	O
nu	double
*	O
nu	double
;	O
double	O
nu11	double
=	O
nu3	double
*	O
nu3	double
*	O
nu3	double
*	O
nu	double
*	O
nu	double
;	O
int	O
stat_b	int
,	O
stat_d	int
;	O
if	O
(	O
fabs	function
(	O
1.0	int
-	O
z	double
)	O
<	O
0.02	int
)	O
{	O
const	O
double	O
a	double
=	O
1.0	int
-	O
z	double
;	O
const	O
double	O
c0	double
=	O
1.25992104989487316476721060728	int
;	O
const	O
double	O
c1	double
=	O
0.37797631496846194943016318218	int
;	O
const	O
double	O
c2	double
=	O
0.230385563409348235843147082474	int
;	O
const	O
double	O
c3	double
=	O
0.165909603649648694839821892031	int
;	O
const	O
double	O
c4	double
=	O
0.12931387086451008907	int
;	O
const	O
double	O
c5	double
=	O
0.10568046188858133991	int
;	O
const	O
double	O
c6	double
=	O
0.08916997952268186978	int
;	O
const	O
double	O
c7	double
=	O
0.07700014900618802456	int
;	O
pre	double
=	O
c0	double
+	O
a	double
*	O
(	O
c1	double
+	O
a	double
*	O
(	O
c2	double
+	O
a	double
*	O
(	O
c3	double
+	O
a	double
*	O
(	O
c4	double
+	O
a	double
*	O
(	O
c5	double
+	O
a	double
*	O
(	O
c6	double
+	O
a	double
*	O
c7	double
)	O
)	O
)	O
)	O
)	O
)	O
;	O
zeta	double
=	O
a	double
*	O
pre	double
;	O
pre	double
=	O
sqrt	function
(	O
2.0	int
*	O
sqrt	function
(	O
pre	double
/	O
(	O
1.0	int
+	O
z	double
)	O
)	O
)	O
;	O
abs_zeta	double
=	O
fabs	function
(	O
zeta	double
)	O
;	O
}	O
else	O
if	O
(	O
z	double
<	O
1.0	int
)	O
{	O
double	O
rt	double
=	O
sqrt	function
(	O
1.0	int
-	O
z	double
*	O
z	double
)	O
;	O
abs_zeta	double
=	O
pow	function
(	O
1.5	int
*	O
(	O
log	function
(	O
(	O
1.0	int
+	O
rt	double
)	O
/	O
z	double
)	O
-	O
rt	double
)	O
,	O
2.0	int
/	O
3.0	int
)	O
;	O
zeta	double
=	O
abs_zeta	double
;	O
pre	double
=	O
sqrt	function
(	O
2.0	int
*	O
sqrt	function
(	O
abs_zeta	double
/	O
(	O
rt	double
*	O
rt	double
)	O
)	O
)	O
;	O
}	O
else	O
{	O
double	O
rt	double
=	O
z	double
*	O
sqrt	function
(	O
1.0	int
-	O
1.0	int
/	O
(	O
z	double
*	O
z	double
)	O
)	O
;	O
double	O
ac	double
=	O
acos	function
(	O
1.0	int
/	O
z	double
)	O
;	O
abs_zeta	double
=	O
pow	function
(	O
1.5	int
*	O
(	O
rt	double
-	O
ac	double
)	O
,	O
2.0	int
/	O
3.0	int
)	O
;	O
zeta	double
=	O
-	O
abs_zeta	double
;	O
pre	double
=	O
sqrt	function
(	O
2.0	int
*	O
sqrt	function
(	O
abs_zeta	double
)	O
/	O
rt	double
)	O
;	O
}	O
asum	double
=	O
olver_Asum	function
(	O
nu	double
,	O
z	double
,	O
abs_zeta	double
,	O
&	O
asum_err	double
)	O
;	O
bsum	double
=	O
olver_Bsum	function
(	O
nu	double
,	O
z	double
,	O
abs_zeta	double
)	O
;	O
arg	double
=	O
crnu	double
*	O
crnu	double
*	O
zeta	double
;	O
stat_b	int
=	O
gsl_sf_airy_Bi_e	function
(	O
arg	double
,	O
GSL_MODE_DEFAULT	int
,	O
&	O
bi	struct
)	O
;	O
stat_d	int
=	O
gsl_sf_airy_Bi_deriv_e	function
(	O
arg	double
,	O
GSL_MODE_DEFAULT	int
,	O
&	O
bip	struct
)	O
;	O
result	pointer
->	O
val	double
=	O
-	O
pre	double
*	O
(	O
bi	struct
.	O
val	double
*	O
asum	double
/	O
crnu	double
+	O
bip	struct
.	O
val	double
*	O
bsum	double
/	O
(	O
nu	double
*	O
crnu	double
*	O
crnu	double
)	O
)	O
;	O
result	pointer
->	O
err	double
=	O
pre	double
*	O
(	O
bi	struct
.	O
err	double
*	O
fabs	function
(	O
asum	double
/	O
crnu	double
)	O
)	O
;	O
result	pointer
->	O
err	double
+=	O
pre	double
*	O
fabs	function
(	O
bi	struct
.	O
val	double
)	O
*	O
asum_err	double
/	O
crnu	double
;	O
result	pointer
->	O
err	double
+=	O
pre	double
*	O
fabs	function
(	O
bi	struct
.	O
val	double
*	O
asum	double
)	O
/	O
(	O
crnu	double
*	O
nu11	double
)	O
;	O
result	pointer
->	O
err	double
+=	O
8.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
result	pointer
->	O
val	double
)	O
;	O
return	O
GSL_ERROR_SELECT_2	O
(	O
stat_b	int
,	O
stat_d	int
)	O
;	O
}	O
}	O
