int	O
gsl_linalg_matmult	function
(	O
const	O
gsl_matrix	struct
*	O
A	pointer
,	O
const	O
gsl_matrix	struct
*	O
B	pointer
,	O
gsl_matrix	struct
*	O
C	pointer
)	O
{	O
if	O
(	O
A	pointer
->	O
size2	long
!=	O
B	pointer
->	O
size1	long
||	O
A	pointer
->	O
size1	long
!=	O
C	pointer
->	O
size1	long
||	O
B	pointer
->	O
size2	long
!=	O
C	pointer
->	O
size2	long
)	O
{	O
GSL_ERROR	O
(	O
"matrix sizes are not conformant"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
double	O
a	double
,	O
b	double
;	O
double	O
temp	double
;	O
size_t	long
i	long
,	O
j	long
,	O
k	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
C	pointer
->	O
size1	long
;	O
i	long
++	O
)	O
{	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
C	pointer
->	O
size2	long
;	O
j	long
++	O
)	O
{	O
a	double
=	O
gsl_matrix_get	function
(	O
A	pointer
,	O
i	long
,	O
0	int
)	O
;	O
b	double
=	O
gsl_matrix_get	function
(	O
B	pointer
,	O
0	int
,	O
j	long
)	O
;	O
temp	double
=	O
a	double
*	O
b	double
;	O
for	O
(	O
k	long
=	O
1	int
;	O
k	long
<	O
A	pointer
->	O
size2	long
;	O
k	long
++	O
)	O
{	O
a	double
=	O
gsl_matrix_get	function
(	O
A	pointer
,	O
i	long
,	O
k	long
)	O
;	O
b	double
=	O
gsl_matrix_get	function
(	O
B	pointer
,	O
k	long
,	O
j	long
)	O
;	O
temp	double
+=	O
a	double
*	O
b	double
;	O
}	O
gsl_matrix_set	function
(	O
C	pointer
,	O
i	long
,	O
j	long
,	O
temp	double
)	O
;	O
}	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
int	O
gsl_linalg_matmult_mod	function
(	O
const	O
gsl_matrix	struct
*	O
A	pointer
,	O
gsl_linalg_matrix_mod_t	enum
modA	enum
,	O
const	O
gsl_matrix	struct
*	O
B	pointer
,	O
gsl_linalg_matrix_mod_t	enum
modB	enum
,	O
gsl_matrix	struct
*	O
C	pointer
)	O
{	O
if	O
(	O
modA	enum
==	O
GSL_LINALG_MOD_NONE	int
&&	O
modB	enum
==	O
GSL_LINALG_MOD_NONE	int
)	O
{	O
return	O
gsl_linalg_matmult	function
(	O
A	pointer
,	O
B	pointer
,	O
C	pointer
)	O
;	O
}	O
else	O
{	O
size_t	long
dim1_A	long
=	O
A	pointer
->	O
size1	long
;	O
size_t	long
dim2_A	long
=	O
A	pointer
->	O
size2	long
;	O
size_t	long
dim1_B	long
=	O
B	pointer
->	O
size1	long
;	O
size_t	long
dim2_B	long
=	O
B	pointer
->	O
size2	long
;	O
size_t	long
dim1_C	long
=	O
C	pointer
->	O
size1	long
;	O
size_t	long
dim2_C	long
=	O
C	pointer
->	O
size2	long
;	O
if	O
(	O
modA	enum
&	O
GSL_LINALG_MOD_TRANSPOSE	int
)	O
SWAP_SIZE_T	O
(	O
dim1_A	long
,	O
dim2_A	long
)	O
;	O
if	O
(	O
modB	enum
&	O
GSL_LINALG_MOD_TRANSPOSE	int
)	O
SWAP_SIZE_T	O
(	O
dim1_B	long
,	O
dim2_B	long
)	O
;	O
if	O
(	O
dim2_A	long
!=	O
dim1_B	long
||	O
dim1_A	long
!=	O
dim1_C	long
||	O
dim2_B	long
!=	O
dim2_C	long
)	O
{	O
GSL_ERROR	O
(	O
"matrix sizes are not conformant"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
double	O
a	double
,	O
b	double
;	O
double	O
temp	double
;	O
size_t	long
i	long
,	O
j	long
,	O
k	long
;	O
size_t	long
a1	long
,	O
a2	long
,	O
b1	pointer
,	O
b2	float
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
dim1_C	long
;	O
i	long
++	O
)	O
{	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
dim2_C	long
;	O
j	long
++	O
)	O
{	O
a1	long
=	O
i	long
;	O
a2	long
=	O
0	int
;	O
b1	pointer
=	O
0	int
;	O
b2	float
=	O
j	long
;	O
if	O
(	O
modA	enum
&	O
GSL_LINALG_MOD_TRANSPOSE	int
)	O
SWAP_SIZE_T	O
(	O
a1	long
,	O
a2	long
)	O
;	O
if	O
(	O
modB	enum
&	O
GSL_LINALG_MOD_TRANSPOSE	int
)	O
SWAP_SIZE_T	O
(	O
b1	pointer
,	O
b2	float
)	O
;	O
a	double
=	O
gsl_matrix_get	function
(	O
A	pointer
,	O
a1	long
,	O
a2	long
)	O
;	O
b	double
=	O
gsl_matrix_get	function
(	O
B	pointer
,	O
b1	pointer
,	O
b2	float
)	O
;	O
temp	double
=	O
a	double
*	O
b	double
;	O
for	O
(	O
k	long
=	O
1	int
;	O
k	long
<	O
dim2_A	long
;	O
k	long
++	O
)	O
{	O
a1	long
=	O
i	long
;	O
a2	long
=	O
k	long
;	O
b1	pointer
=	O
k	long
;	O
b2	float
=	O
j	long
;	O
if	O
(	O
modA	enum
&	O
GSL_LINALG_MOD_TRANSPOSE	int
)	O
SWAP_SIZE_T	O
(	O
a1	long
,	O
a2	long
)	O
;	O
if	O
(	O
modB	enum
&	O
GSL_LINALG_MOD_TRANSPOSE	int
)	O
SWAP_SIZE_T	O
(	O
b1	pointer
,	O
b2	float
)	O
;	O
a	double
=	O
gsl_matrix_get	function
(	O
A	pointer
,	O
a1	long
,	O
a2	long
)	O
;	O
b	double
=	O
gsl_matrix_get	function
(	O
B	pointer
,	O
b1	pointer
,	O
b2	float
)	O
;	O
temp	double
+=	O
a	double
*	O
b	double
;	O
}	O
gsl_matrix_set	function
(	O
C	pointer
,	O
i	long
,	O
j	long
,	O
temp	double
)	O
;	O
}	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
}	O
