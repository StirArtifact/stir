static	O
int	O
argc	int
;	O
static	O
char	O
*	O
*	O
argv	pointer
;	O
static	O
struct	O
gdbm_option	struct
*	O
option_tab	pointer
;	O
static	O
size_t	long
option_count	long
;	O
static	O
size_t	long
option_max	long
;	O
static	O
char	O
*	O
short_options	pointer
;	O
static	O
size_t	long
short_option_count	long
;	O
static	O
size_t	long
short_option_max	long
;	O
static	O
struct	O
option	struct
*	O
long_options	pointer
;	O
static	O
size_t	long
long_option_count	long
;	O
static	O
size_t	long
long_option_max	long
;	O
struct	O
gdbm_option	struct
parseopt_default_options	array
[	O
]	O
=	O
{	O
{	O
0	int
,	O
NULL	O
,	O
NULL	O
,	O
""	pointer
}	O
,	O
{	O
'h'	O
,	O
"help"	pointer
,	O
NULL	O
,	O
N_	O
(	O
"give this help list"	pointer
)	O
}	O
,	O
{	O
'V'	O
,	O
"version"	pointer
,	O
NULL	O
,	O
N_	O
(	O
"print program version"	pointer
)	O
}	O
,	O
{	O
OPT_USAGE	O
,	O
"usage"	pointer
,	O
NULL	O
,	O
N_	O
(	O
"give a short usage message"	pointer
)	O
}	O
,	O
{	O
0	int
}	O
}	O
;	O
static	O
int	O
optcmp	function
(	O
const	O
void	O
*	O
a	array
,	O
const	O
void	O
*	O
b	array
)	O
{	O
struct	O
gdbm_option	struct
const	O
*	O
ap	array
=	O
(	O
struct	O
gdbm_option	struct
const	O
*	O
)	O
a	array
;	O
struct	O
gdbm_option	struct
const	O
*	O
bp	pointer
=	O
(	O
struct	O
gdbm_option	struct
const	O
*	O
)	O
b	array
;	O
while	O
(	O
ap	array
->	O
opt_flags	int
&	O
PARSEOPT_ALIAS	int
)	O
ap	array
--	O
;	O
while	O
(	O
bp	pointer
->	O
opt_flags	int
&	O
PARSEOPT_ALIAS	int
)	O
bp	pointer
--	O
;	O
if	O
(	O
IS_VALID_SHORT_OPTION	O
(	O
ap	array
)	O
&&	O
IS_VALID_SHORT_OPTION	O
(	O
bp	pointer
)	O
)	O
return	O
ap	array
->	O
opt_short	int
-	O
bp	pointer
->	O
opt_short	int
;	O
if	O
(	O
IS_VALID_LONG_OPTION	O
(	O
ap	array
)	O
&&	O
IS_VALID_LONG_OPTION	O
(	O
bp	pointer
)	O
)	O
return	O
strcmp	function
(	O
ap	array
->	O
opt_long	pointer
,	O
bp	pointer
->	O
opt_long	pointer
)	O
;	O
if	O
(	O
IS_VALID_LONG_OPTION	O
(	O
ap	array
)	O
)	O
return	O
1	int
;	O
return	O
-	O
1	int
;	O
}	O
static	O
void	O
sort_options	function
(	O
int	O
start	int
,	O
int	O
count	int
)	O
{	O
qsort	function
(	O
option_tab	pointer
+	O
start	int
,	O
count	int
,	O
sizeof	O
(	O
option_tab	pointer
[	O
0	int
]	O
)	O
,	O
optcmp	function
)	O
;	O
}	O
static	O
size_t	long
sort_group	function
(	O
size_t	long
start	int
)	O
{	O
size_t	long
i	long
;	O
for	O
(	O
i	long
=	O
start	int
;	O
i	long
<	O
option_count	long
&&	O
!	O
IS_GROUP_HEADER	O
(	O
&	O
option_tab	pointer
[	O
i	long
]	O
)	O
;	O
i	long
++	O
)	O
;	O
sort_options	function
(	O
start	int
,	O
i	long
-	O
start	int
)	O
;	O
return	O
i	long
+	O
1	int
;	O
}	O
static	O
void	O
sort_all_options	function
(	O
void	O
)	O
{	O
size_t	long
start	int
;	O
option_tab	pointer
[	O
0	int
]	O
.	O
opt_flags	int
&=	O
PARSEOPT_ALIAS	int
;	O
for	O
(	O
start	int
=	O
0	int
;	O
start	int
<	O
option_count	long
;	O
)	O
{	O
if	O
(	O
IS_GROUP_HEADER	O
(	O
&	O
option_tab	pointer
[	O
start	int
]	O
)	O
)	O
start	int
=	O
sort_group	function
(	O
start	int
+	O
1	int
)	O
;	O
else	O
start	int
=	O
sort_group	function
(	O
start	int
)	O
;	O
}	O
}	O
static	O
void	O
add_options	function
(	O
struct	O
gdbm_option	struct
*	O
options	pointer
)	O
{	O
size_t	long
optcnt	long
=	O
0	int
;	O
size_t	long
argcnt	long
=	O
0	int
;	O
size_t	long
count	int
=	O
0	int
;	O
struct	O
gdbm_option	struct
*	O
opt	pointer
;	O
for	O
(	O
opt	pointer
=	O
options	pointer
;	O
!	O
OPT_END	O
(	O
opt	pointer
)	O
;	O
opt	pointer
++	O
)	O
{	O
count	int
++	O
;	O
if	O
(	O
IS_OPTION	O
(	O
opt	pointer
)	O
)	O
{	O
optcnt	long
++	O
;	O
if	O
(	O
opt	pointer
->	O
opt_arg	pointer
)	O
argcnt	long
++	O
;	O
}	O
}	O
if	O
(	O
option_count	long
+	O
count	int
+	O
1	int
>	O
option_max	long
)	O
{	O
option_max	long
=	O
option_count	long
+	O
count	int
+	O
1	int
;	O
option_tab	pointer
=	O
erealloc	function
(	O
option_tab	pointer
,	O
sizeof	O
(	O
option_tab	pointer
[	O
0	int
]	O
)	O
*	O
option_max	long
)	O
;	O
}	O
if	O
(	O
long_option_count	long
+	O
optcnt	long
+	O
1	int
>	O
long_option_max	long
)	O
{	O
long_option_max	long
=	O
long_option_count	long
+	O
optcnt	long
+	O
1	int
;	O
long_options	pointer
=	O
erealloc	function
(	O
long_options	pointer
,	O
sizeof	O
(	O
long_options	pointer
[	O
0	int
]	O
)	O
*	O
long_option_max	long
)	O
;	O
}	O
if	O
(	O
short_option_count	long
+	O
optcnt	long
+	O
argcnt	long
+	O
1	int
>	O
short_option_max	long
)	O
{	O
short_option_max	long
=	O
short_option_count	long
+	O
optcnt	long
+	O
argcnt	long
+	O
1	int
;	O
short_options	pointer
=	O
erealloc	function
(	O
short_options	pointer
,	O
sizeof	O
(	O
short_options	pointer
[	O
0	int
]	O
)	O
*	O
short_option_max	long
)	O
;	O
}	O
for	O
(	O
opt	pointer
=	O
options	pointer
;	O
!	O
OPT_END	O
(	O
opt	pointer
)	O
;	O
opt	pointer
++	O
)	O
{	O
option_tab	pointer
[	O
option_count	long
++	O
]	O
=	O
*	O
opt	pointer
;	O
if	O
(	O
!	O
IS_OPTION	O
(	O
opt	pointer
)	O
)	O
continue	O
;	O
if	O
(	O
IS_VALID_SHORT_OPTION	O
(	O
opt	pointer
)	O
)	O
{	O
short_options	pointer
[	O
short_option_count	long
++	O
]	O
=	O
opt	pointer
->	O
opt_short	int
;	O
if	O
(	O
opt	pointer
->	O
opt_arg	pointer
)	O
short_options	pointer
[	O
short_option_count	long
++	O
]	O
=	O
':'	O
;	O
}	O
if	O
(	O
IS_VALID_LONG_OPTION	O
(	O
opt	pointer
)	O
)	O
{	O
long_options	pointer
[	O
long_option_count	long
]	O
.	O
name	pointer
=	O
opt	pointer
->	O
opt_long	pointer
;	O
long_options	pointer
[	O
long_option_count	long
]	O
.	O
has_arg	int
=	O
opt	pointer
->	O
opt_arg	pointer
!=	O
NULL	O
;	O
long_options	pointer
[	O
long_option_count	long
]	O
.	O
flag	int
=	O
NULL	O
;	O
long_options	pointer
[	O
long_option_count	long
]	O
.	O
val	int
=	O
opt	pointer
->	O
opt_short	int
;	O
long_option_count	long
++	O
;	O
}	O
}	O
short_options	pointer
[	O
short_option_count	long
]	O
=	O
0	int
;	O
memset	function
(	O
&	O
long_options	pointer
[	O
long_option_count	long
]	O
,	O
0	int
,	O
sizeof	O
long_options	pointer
[	O
long_option_count	long
]	O
)	O
;	O
}	O
int	O
parseopt_first	function
(	O
int	O
pc	int
,	O
char	O
*	O
*	O
pv	pointer
,	O
struct	O
gdbm_option	struct
*	O
opts	pointer
)	O
{	O
free	function
(	O
option_tab	pointer
)	O
;	O
free	function
(	O
short_options	pointer
)	O
;	O
short_option_count	long
=	O
short_option_max	long
=	O
0	int
;	O
free	function
(	O
long_options	pointer
)	O
;	O
long_option_count	long
=	O
long_option_max	long
=	O
0	int
;	O
add_options	function
(	O
opts	pointer
)	O
;	O
add_options	function
(	O
parseopt_default_options	array
)	O
;	O
opterr	int
=	O
0	int
;	O
argc	int
=	O
pc	int
;	O
argv	pointer
=	O
pv	pointer
;	O
return	O
parseopt_next	function
(	O
)	O
;	O
}	O
static	O
void	O
indent	function
(	O
size_t	long
start	int
,	O
size_t	long
col	long
)	O
{	O
for	O
(	O
;	O
start	int
<	O
col	long
;	O
start	int
++	O
)	O
putchar	function
(	O
' '	O
)	O
;	O
}	O
static	O
void	O
print_option_descr	function
(	O
const	O
char	O
*	O
descr	pointer
,	O
size_t	long
lmargin	long
,	O
size_t	long
rmargin	long
)	O
{	O
if	O
(	O
!	O
(	O
descr	pointer
&&	O
descr	pointer
[	O
0	int
]	O
)	O
)	O
return	O
;	O
descr	pointer
=	O
gettext	function
(	O
descr	pointer
)	O
;	O
while	O
(	O
*	O
descr	pointer
)	O
{	O
size_t	long
s	long
=	O
0	int
;	O
size_t	long
i	long
;	O
size_t	long
width	long
=	O
rmargin	long
-	O
lmargin	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
;	O
i	long
++	O
)	O
{	O
if	O
(	O
descr	pointer
[	O
i	long
]	O
==	O
0	int
||	O
descr	pointer
[	O
i	long
]	O
==	O
' '	O
||	O
descr	pointer
[	O
i	long
]	O
==	O
'\t'	O
)	O
{	O
if	O
(	O
i	long
>	O
width	long
)	O
break	O
;	O
s	long
=	O
i	long
;	O
if	O
(	O
descr	pointer
[	O
i	long
]	O
==	O
0	int
)	O
break	O
;	O
}	O
}	O
fwrite	function
(	O
descr	pointer
,	O
1	int
,	O
s	long
,	O
stdout	pointer
)	O
;	O
fputc	function
(	O
'\n'	O
,	O
stdout	pointer
)	O
;	O
descr	pointer
+=	O
s	long
;	O
if	O
(	O
*	O
descr	pointer
)	O
{	O
indent	function
(	O
0	int
,	O
lmargin	long
)	O
;	O
descr	pointer
++	O
;	O
}	O
}	O
}	O
char	O
*	O
parseopt_program_name	pointer
;	O
char	O
*	O
parseopt_program_doc	pointer
;	O
char	O
*	O
parseopt_program_args	pointer
;	O
const	O
char	O
*	O
program_bug_address	pointer
=	O
"<"	pointer
PACKAGE_BUGREPORT	pointer
">"	pointer
;	O
void	O
(	O
*	O
parseopt_help_hook	pointer
)	O
(	O
FILE	struct
*	O
stream	pointer
)	O
;	O
static	O
int	O
argsused	int
;	O
size_t	long
print_option	function
(	O
size_t	long
num	long
)	O
{	O
struct	O
gdbm_option	struct
*	O
opt	pointer
=	O
option_tab	pointer
+	O
num	long
;	O
size_t	long
next	long
,	O
i	long
;	O
int	O
delim	int
;	O
int	O
w	int
;	O
if	O
(	O
IS_GROUP_HEADER	O
(	O
opt	pointer
)	O
)	O
{	O
indent	function
(	O
0	int
,	O
GROUPCOLUMN	int
)	O
;	O
print_option_descr	function
(	O
opt	pointer
->	O
opt_descr	pointer
,	O
GROUPCOLUMN	int
,	O
RMARGIN	int
)	O
;	O
putchar	function
(	O
'\n'	O
)	O
;	O
return	O
num	long
+	O
1	int
;	O
}	O
for	O
(	O
next	long
=	O
num	long
+	O
1	int
;	O
next	long
<	O
option_count	long
&&	O
option_tab	pointer
[	O
next	long
]	O
.	O
opt_flags	int
&	O
PARSEOPT_ALIAS	int
;	O
next	long
++	O
)	O
;	O
if	O
(	O
opt	pointer
->	O
opt_flags	int
&	O
PARSEOPT_HIDDEN	int
)	O
return	O
next	long
;	O
w	int
=	O
0	int
;	O
for	O
(	O
i	long
=	O
num	long
;	O
i	long
<	O
next	long
;	O
i	long
++	O
)	O
{	O
if	O
(	O
IS_VALID_SHORT_OPTION	O
(	O
&	O
option_tab	pointer
[	O
i	long
]	O
)	O
)	O
{	O
if	O
(	O
w	int
==	O
0	int
)	O
{	O
indent	function
(	O
0	int
,	O
LMARGIN	int
)	O
;	O
w	int
=	O
LMARGIN	int
;	O
}	O
else	O
w	int
+=	O
printf	function
(	O
", "	pointer
)	O
;	O
w	int
+=	O
printf	function
(	O
"-%c"	pointer
,	O
option_tab	pointer
[	O
i	long
]	O
.	O
opt_short	int
)	O
;	O
delim	int
=	O
' '	O
;	O
}	O
}	O
for	O
(	O
i	long
=	O
num	long
;	O
i	long
<	O
next	long
;	O
i	long
++	O
)	O
{	O
if	O
(	O
IS_VALID_LONG_OPTION	O
(	O
&	O
option_tab	pointer
[	O
i	long
]	O
)	O
)	O
{	O
if	O
(	O
w	int
==	O
0	int
)	O
{	O
indent	function
(	O
0	int
,	O
LMARGIN	int
)	O
;	O
w	int
=	O
LMARGIN	int
;	O
}	O
else	O
w	int
+=	O
printf	function
(	O
", "	pointer
)	O
;	O
w	int
+=	O
printf	function
(	O
"--%s"	pointer
,	O
option_tab	pointer
[	O
i	long
]	O
.	O
opt_long	pointer
)	O
;	O
delim	int
=	O
'='	O
;	O
}	O
}	O
if	O
(	O
opt	pointer
->	O
opt_arg	pointer
)	O
{	O
argsused	int
=	O
1	int
;	O
w	int
+=	O
printf	function
(	O
"%c%s"	pointer
,	O
delim	int
,	O
gettext	function
(	O
opt	pointer
->	O
opt_arg	pointer
)	O
)	O
;	O
}	O
if	O
(	O
w	int
>=	O
DESCRCOLUMN	int
)	O
{	O
putchar	function
(	O
'\n'	O
)	O
;	O
w	int
=	O
0	int
;	O
}	O
indent	function
(	O
w	int
,	O
DESCRCOLUMN	int
)	O
;	O
print_option_descr	function
(	O
opt	pointer
->	O
opt_descr	pointer
,	O
DESCRCOLUMN	int
,	O
RMARGIN	int
)	O
;	O
return	O
next	long
;	O
}	O
void	O
parseopt_print_help	function
(	O
void	O
)	O
{	O
unsigned	O
i	long
;	O
argsused	int
=	O
0	int
;	O
printf	function
(	O
"%s %s [%s]... %s\n"	pointer
,	O
_	O
(	O
"Usage:"	pointer
)	O
,	O
parseopt_program_name	pointer
?	O
parseopt_program_name	pointer
:	O
progname	pointer
,	O
_	O
(	O
"OPTION"	pointer
)	O
,	O
gettext	function
(	O
parseopt_program_args	pointer
)	O
)	O
;	O
print_option_descr	function
(	O
parseopt_program_doc	pointer
,	O
0	int
,	O
RMARGIN	int
)	O
;	O
putchar	function
(	O
'\n'	O
)	O
;	O
sort_all_options	function
(	O
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
option_count	long
;	O
)	O
{	O
i	long
=	O
print_option	function
(	O
i	long
)	O
;	O
}	O
putchar	function
(	O
'\n'	O
)	O
;	O
if	O
(	O
argsused	int
)	O
{	O
print_option_descr	function
(	O
N_	O
(	O
"Mandatory or optional arguments to long options are also mandatory or optional for any corresponding short options."	pointer
)	O
,	O
0	int
,	O
RMARGIN	int
)	O
;	O
putchar	function
(	O
'\n'	O
)	O
;	O
}	O
if	O
(	O
parseopt_help_hook	pointer
)	O
parseopt_help_hook	pointer
(	O
stdout	pointer
)	O
;	O
printf	function
(	O
_	O
(	O
"Report bugs to %s.\n"	pointer
)	O
,	O
program_bug_address	pointer
)	O
;	O
printf	function
(	O
_	O
(	O
"%s home page: <%s>\n"	pointer
)	O
,	O
PACKAGE_NAME	pointer
,	O
PACKAGE_URL	pointer
)	O
;	O
}	O
static	O
int	O
cmpidx_short	function
(	O
const	O
void	O
*	O
a	array
,	O
const	O
void	O
*	O
b	array
)	O
{	O
unsigned	O
const	O
*	O
ai	pointer
=	O
(	O
unsigned	O
const	O
*	O
)	O
a	array
;	O
unsigned	O
const	O
*	O
bi	pointer
=	O
(	O
unsigned	O
const	O
*	O
)	O
b	array
;	O
return	O
option_tab	pointer
[	O
*	O
ai	pointer
]	O
.	O
opt_short	int
-	O
option_tab	pointer
[	O
*	O
bi	pointer
]	O
.	O
opt_short	int
;	O
}	O
static	O
int	O
cmpidx_long	function
(	O
const	O
void	O
*	O
a	array
,	O
const	O
void	O
*	O
b	array
)	O
{	O
unsigned	O
const	O
*	O
ai	pointer
=	O
(	O
unsigned	O
const	O
*	O
)	O
a	array
;	O
unsigned	O
const	O
*	O
bi	pointer
=	O
(	O
unsigned	O
const	O
*	O
)	O
b	array
;	O
struct	O
gdbm_option	struct
const	O
*	O
ap	array
=	O
option_tab	pointer
+	O
*	O
ai	pointer
;	O
struct	O
gdbm_option	struct
const	O
*	O
bp	pointer
=	O
option_tab	pointer
+	O
*	O
bi	pointer
;	O
return	O
strcmp	function
(	O
ap	array
->	O
opt_long	pointer
,	O
bp	pointer
->	O
opt_long	pointer
)	O
;	O
}	O
void	O
print_usage	function
(	O
void	O
)	O
{	O
unsigned	O
i	long
;	O
unsigned	O
n	int
;	O
char	O
buf	pointer
[	O
RMARGIN	int
+	O
1	int
]	O
;	O
unsigned	O
*	O
idxbuf	pointer
;	O
unsigned	O
nidx	int
;	O
idxbuf	pointer
=	O
ecalloc	function
(	O
option_count	long
,	O
sizeof	O
(	O
idxbuf	pointer
[	O
0	int
]	O
)	O
)	O
;	O
n	int
=	O
snprintf	function
(	O
buf	pointer
,	O
sizeof	O
buf	pointer
,	O
"%s %s "	pointer
,	O
_	O
(	O
"Usage:"	pointer
)	O
,	O
parseopt_program_name	pointer
?	O
parseopt_program_name	pointer
:	O
progname	pointer
)	O
;	O
for	O
(	O
i	long
=	O
nidx	int
=	O
0	int
;	O
i	long
<	O
option_count	long
;	O
i	long
++	O
)	O
if	O
(	O
IS_VALID_SHORT_OPTION	O
(	O
&	O
option_tab	pointer
[	O
i	long
]	O
)	O
&&	O
!	O
option_tab	pointer
[	O
i	long
]	O
.	O
opt_arg	pointer
)	O
idxbuf	pointer
[	O
nidx	int
++	O
]	O
=	O
i	long
;	O
if	O
(	O
nidx	int
)	O
{	O
qsort	function
(	O
idxbuf	pointer
,	O
nidx	int
,	O
sizeof	O
(	O
idxbuf	pointer
[	O
0	int
]	O
)	O
,	O
cmpidx_short	function
)	O
;	O
ADDC	O
(	O
'['	O
)	O
;	O
ADDC	O
(	O
'-'	O
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
nidx	int
;	O
i	long
++	O
)	O
{	O
ADDC	O
(	O
option_tab	pointer
[	O
idxbuf	pointer
[	O
i	long
]	O
]	O
.	O
opt_short	int
)	O
;	O
}	O
ADDC	O
(	O
']'	O
)	O
;	O
}	O
for	O
(	O
i	long
=	O
nidx	int
=	O
0	int
;	O
i	long
<	O
option_count	long
;	O
i	long
++	O
)	O
{	O
if	O
(	O
IS_VALID_SHORT_OPTION	O
(	O
&	O
option_tab	pointer
[	O
i	long
]	O
)	O
&&	O
option_tab	pointer
[	O
i	long
]	O
.	O
opt_arg	pointer
)	O
idxbuf	pointer
[	O
nidx	int
++	O
]	O
=	O
i	long
;	O
}	O
if	O
(	O
nidx	int
)	O
{	O
qsort	function
(	O
idxbuf	pointer
,	O
nidx	int
,	O
sizeof	O
(	O
idxbuf	pointer
[	O
0	int
]	O
)	O
,	O
cmpidx_short	function
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
nidx	int
;	O
i	long
++	O
)	O
{	O
struct	O
gdbm_option	struct
*	O
opt	pointer
=	O
option_tab	pointer
+	O
idxbuf	pointer
[	O
i	long
]	O
;	O
const	O
char	O
*	O
arg	pointer
=	O
gettext	function
(	O
opt	pointer
->	O
opt_arg	pointer
)	O
;	O
size_t	long
len	long
=	O
5	int
+	O
strlen	function
(	O
arg	pointer
)	O
+	O
1	int
;	O
if	O
(	O
n	int
+	O
len	long
>	O
RMARGIN	int
)	O
FLUSH	O
;	O
buf	pointer
[	O
n	int
++	O
]	O
=	O
' '	O
;	O
buf	pointer
[	O
n	int
++	O
]	O
=	O
'['	O
;	O
buf	pointer
[	O
n	int
++	O
]	O
=	O
'-'	O
;	O
buf	pointer
[	O
n	int
++	O
]	O
=	O
opt	pointer
->	O
opt_short	int
;	O
buf	pointer
[	O
n	int
++	O
]	O
=	O
' '	O
;	O
strcpy	function
(	O
&	O
buf	pointer
[	O
n	int
]	O
,	O
arg	pointer
)	O
;	O
n	int
+=	O
strlen	function
(	O
arg	pointer
)	O
;	O
buf	pointer
[	O
n	int
++	O
]	O
=	O
']'	O
;	O
}	O
}	O
for	O
(	O
i	long
=	O
nidx	int
=	O
0	int
;	O
i	long
<	O
option_count	long
;	O
i	long
++	O
)	O
{	O
if	O
(	O
IS_VALID_LONG_OPTION	O
(	O
&	O
option_tab	pointer
[	O
i	long
]	O
)	O
)	O
idxbuf	pointer
[	O
nidx	int
++	O
]	O
=	O
i	long
;	O
}	O
if	O
(	O
nidx	int
)	O
{	O
qsort	function
(	O
idxbuf	pointer
,	O
nidx	int
,	O
sizeof	O
(	O
idxbuf	pointer
[	O
0	int
]	O
)	O
,	O
cmpidx_long	function
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
nidx	int
;	O
i	long
++	O
)	O
{	O
struct	O
gdbm_option	struct
*	O
opt	pointer
=	O
option_tab	pointer
+	O
idxbuf	pointer
[	O
i	long
]	O
;	O
const	O
char	O
*	O
arg	pointer
=	O
opt	pointer
->	O
opt_arg	pointer
?	O
gettext	function
(	O
opt	pointer
->	O
opt_arg	pointer
)	O
:	O
NULL	O
;	O
size_t	long
len	long
=	O
3	int
+	O
strlen	function
(	O
opt	pointer
->	O
opt_long	pointer
)	O
+	O
(	O
arg	pointer
?	O
1	int
+	O
strlen	function
(	O
arg	pointer
)	O
:	O
0	int
)	O
;	O
if	O
(	O
n	int
+	O
len	long
>	O
RMARGIN	int
)	O
FLUSH	O
;	O
buf	pointer
[	O
n	int
++	O
]	O
=	O
' '	O
;	O
buf	pointer
[	O
n	int
++	O
]	O
=	O
'['	O
;	O
buf	pointer
[	O
n	int
++	O
]	O
=	O
'-'	O
;	O
buf	pointer
[	O
n	int
++	O
]	O
=	O
'-'	O
;	O
strcpy	function
(	O
&	O
buf	pointer
[	O
n	int
]	O
,	O
opt	pointer
->	O
opt_long	pointer
)	O
;	O
n	int
+=	O
strlen	function
(	O
opt	pointer
->	O
opt_long	pointer
)	O
;	O
if	O
(	O
opt	pointer
->	O
opt_arg	pointer
)	O
{	O
buf	pointer
[	O
n	int
++	O
]	O
=	O
'='	O
;	O
strcpy	function
(	O
&	O
buf	pointer
[	O
n	int
]	O
,	O
arg	pointer
)	O
;	O
n	int
+=	O
strlen	function
(	O
arg	pointer
)	O
;	O
}	O
buf	pointer
[	O
n	int
++	O
]	O
=	O
']'	O
;	O
}	O
}	O
FLUSH	O
;	O
free	function
(	O
idxbuf	pointer
)	O
;	O
}	O
const	O
char	O
version_etc_copyright	array
[	O
]	O
=	O
"Copyright %s %s Free Software Foundation, Inc"	pointer
;	O
const	O
char	O
license_text	array
[	O
]	O
=	O
"License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>\n"	pointer
"This is free software: you are free to change and redistribute it.\n"	pointer
"There is NO WARRANTY, to the extent permitted by law."	pointer
;	O
void	O
print_version_only	function
(	O
void	O
)	O
{	O
printf	function
(	O
"%s (%s) %s\n"	pointer
,	O
parseopt_program_name	pointer
?	O
parseopt_program_name	pointer
:	O
progname	pointer
,	O
PACKAGE_NAME	pointer
,	O
PACKAGE_VERSION	pointer
)	O
;	O
printf	function
(	O
version_etc_copyright	array
,	O
_	O
(	O
"(C)"	pointer
)	O
,	O
"2011-2017"	pointer
)	O
;	O
puts	function
(	O
license_text	array
)	O
;	O
putchar	function
(	O
'\n'	O
)	O
;	O
}	O
static	O
int	O
handle_option	function
(	O
int	O
c	int
)	O
{	O
switch	O
(	O
c	int
)	O
{	O
case	O
'h'	O
:	O
parseopt_print_help	function
(	O
)	O
;	O
exit	function
(	O
0	int
)	O
;	O
case	O
'V'	O
:	O
print_version_only	function
(	O
)	O
;	O
exit	function
(	O
0	int
)	O
;	O
case	O
OPT_USAGE	O
:	O
print_usage	function
(	O
)	O
;	O
exit	function
(	O
0	int
)	O
;	O
default	O
:	O
break	O
;	O
}	O
return	O
0	int
;	O
}	O
int	O
parseopt_next	function
(	O
)	O
{	O
int	O
rc	int
;	O
do	O
{	O
rc	int
=	O
getopt_long	function
(	O
argc	int
,	O
argv	pointer
,	O
short_options	pointer
,	O
long_options	pointer
,	O
NULL	O
)	O
;	O
}	O
while	O
(	O
handle_option	function
(	O
rc	int
)	O
)	O
;	O
return	O
rc	int
;	O
}	O
