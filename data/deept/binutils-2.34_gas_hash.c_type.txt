struct	O
hash_entry	struct
{	O
struct	O
hash_entry	struct
*	O
next	pointer
;	O
const	O
char	O
*	O
string	pointer
;	O
unsigned	O
long	O
hash	long
;	O
void	O
*	O
data	pointer
;	O
}	O
;	O
struct	O
hash_control	struct
{	O
struct	O
hash_entry	struct
*	O
*	O
table	pointer
;	O
unsigned	O
int	O
size	int
;	O
struct	O
obstack	struct
memory	pointer
;	O
}	O
;	O
static	O
unsigned	O
long	O
gas_hash_table_size	long
=	O
65537	int
;	O
void	O
set_gas_hash_table_size	function
(	O
unsigned	O
long	O
size	int
)	O
{	O
gas_hash_table_size	long
=	O
bfd_hash_set_default_size	function
(	O
size	int
)	O
;	O
}	O
struct	O
hash_control	struct
*	O
hash_new_sized	function
(	O
unsigned	O
long	O
size	int
)	O
{	O
unsigned	O
long	O
alloc	long
;	O
struct	O
hash_control	struct
*	O
ret	pointer
;	O
ret	pointer
=	O
XNEW	O
(	O
struct	O
hash_control	struct
)	O
;	O
obstack_begin	O
(	O
&	O
ret	pointer
->	O
memory	pointer
,	O
chunksize	int
)	O
;	O
alloc	long
=	O
size	int
*	O
sizeof	O
(	O
struct	O
hash_entry	struct
*	O
)	O
;	O
ret	pointer
->	O
table	pointer
=	O
(	O
struct	O
hash_entry	struct
*	O
*	O
)	O
obstack_alloc	O
(	O
&	O
ret	pointer
->	O
memory	pointer
,	O
alloc	long
)	O
;	O
memset	function
(	O
ret	pointer
->	O
table	pointer
,	O
0	int
,	O
alloc	long
)	O
;	O
ret	pointer
->	O
size	int
=	O
size	int
;	O
return	O
ret	pointer
;	O
}	O
struct	O
hash_control	struct
*	O
hash_new	function
(	O
void	O
)	O
{	O
return	O
hash_new_sized	function
(	O
gas_hash_table_size	long
)	O
;	O
}	O
void	O
hash_die	function
(	O
struct	O
hash_control	struct
*	O
table	pointer
)	O
{	O
obstack_free	O
(	O
&	O
table	pointer
->	O
memory	pointer
,	O
0	int
)	O
;	O
free	function
(	O
table	pointer
)	O
;	O
}	O
static	O
struct	O
hash_entry	struct
*	O
hash_lookup	function
(	O
struct	O
hash_control	struct
*	O
table	pointer
,	O
const	O
char	O
*	O
key	pointer
,	O
size_t	long
len	long
,	O
struct	O
hash_entry	struct
*	O
*	O
*	O
plist	pointer
,	O
unsigned	O
long	O
*	O
phash	pointer
)	O
{	O
unsigned	O
long	O
hash	long
;	O
size_t	long
n	int
;	O
unsigned	O
int	O
c	struct
;	O
unsigned	O
int	O
hindex	int
;	O
struct	O
hash_entry	struct
*	O
*	O
list	pointer
;	O
struct	O
hash_entry	struct
*	O
p	pointer
;	O
struct	O
hash_entry	struct
*	O
prev	pointer
;	O
hash	long
=	O
0	int
;	O
for	O
(	O
n	int
=	O
0	int
;	O
n	int
<	O
len	long
;	O
n	int
++	O
)	O
{	O
c	struct
=	O
key	pointer
[	O
n	int
]	O
;	O
hash	long
+=	O
c	struct
+	O
(	O
c	struct
<<	O
17	int
)	O
;	O
hash	long
^=	O
hash	long
>>	O
2	int
;	O
}	O
hash	long
+=	O
len	long
+	O
(	O
len	long
<<	O
17	int
)	O
;	O
hash	long
^=	O
hash	long
>>	O
2	int
;	O
if	O
(	O
phash	pointer
!=	O
NULL	O
)	O
*	O
phash	pointer
=	O
hash	long
;	O
hindex	int
=	O
hash	long
%	O
table	pointer
->	O
size	int
;	O
list	pointer
=	O
table	pointer
->	O
table	pointer
+	O
hindex	int
;	O
if	O
(	O
plist	pointer
!=	O
NULL	O
)	O
*	O
plist	pointer
=	O
list	pointer
;	O
prev	pointer
=	O
NULL	O
;	O
for	O
(	O
p	pointer
=	O
*	O
list	pointer
;	O
p	pointer
!=	O
NULL	O
;	O
p	pointer
=	O
p	pointer
->	O
next	pointer
)	O
{	O
if	O
(	O
p	pointer
->	O
hash	long
==	O
hash	long
)	O
{	O
if	O
(	O
strncmp	function
(	O
p	pointer
->	O
string	pointer
,	O
key	pointer
,	O
len	long
)	O
==	O
0	int
&&	O
p	pointer
->	O
string	pointer
[	O
len	long
]	O
==	O
'\0'	O
)	O
{	O
if	O
(	O
prev	pointer
!=	O
NULL	O
)	O
{	O
prev	pointer
->	O
next	pointer
=	O
p	pointer
->	O
next	pointer
;	O
p	pointer
->	O
next	pointer
=	O
*	O
list	pointer
;	O
*	O
list	pointer
=	O
p	pointer
;	O
}	O
return	O
p	pointer
;	O
}	O
}	O
prev	pointer
=	O
p	pointer
;	O
}	O
return	O
NULL	O
;	O
}	O
const	O
char	O
*	O
hash_insert	function
(	O
struct	O
hash_control	struct
*	O
table	pointer
,	O
const	O
char	O
*	O
key	pointer
,	O
void	O
*	O
val	int
)	O
{	O
struct	O
hash_entry	struct
*	O
p	pointer
;	O
struct	O
hash_entry	struct
*	O
*	O
list	pointer
;	O
unsigned	O
long	O
hash	long
;	O
p	pointer
=	O
hash_lookup	function
(	O
table	pointer
,	O
key	pointer
,	O
strlen	function
(	O
key	pointer
)	O
,	O
&	O
list	pointer
,	O
&	O
hash	long
)	O
;	O
if	O
(	O
p	pointer
!=	O
NULL	O
)	O
return	O
"exists"	pointer
;	O
p	pointer
=	O
(	O
struct	O
hash_entry	struct
*	O
)	O
obstack_alloc	O
(	O
&	O
table	pointer
->	O
memory	pointer
,	O
sizeof	O
(	O
*	O
p	pointer
)	O
)	O
;	O
p	pointer
->	O
string	pointer
=	O
key	pointer
;	O
p	pointer
->	O
hash	long
=	O
hash	long
;	O
p	pointer
->	O
data	pointer
=	O
val	int
;	O
p	pointer
->	O
next	pointer
=	O
*	O
list	pointer
;	O
*	O
list	pointer
=	O
p	pointer
;	O
return	O
NULL	O
;	O
}	O
const	O
char	O
*	O
hash_jam	function
(	O
struct	O
hash_control	struct
*	O
table	pointer
,	O
const	O
char	O
*	O
key	pointer
,	O
void	O
*	O
val	int
)	O
{	O
struct	O
hash_entry	struct
*	O
p	pointer
;	O
struct	O
hash_entry	struct
*	O
*	O
list	pointer
;	O
unsigned	O
long	O
hash	long
;	O
p	pointer
=	O
hash_lookup	function
(	O
table	pointer
,	O
key	pointer
,	O
strlen	function
(	O
key	pointer
)	O
,	O
&	O
list	pointer
,	O
&	O
hash	long
)	O
;	O
if	O
(	O
p	pointer
!=	O
NULL	O
)	O
{	O
p	pointer
->	O
data	pointer
=	O
val	int
;	O
}	O
else	O
{	O
p	pointer
=	O
(	O
struct	O
hash_entry	struct
*	O
)	O
obstack_alloc	O
(	O
&	O
table	pointer
->	O
memory	pointer
,	O
sizeof	O
(	O
*	O
p	pointer
)	O
)	O
;	O
p	pointer
->	O
string	pointer
=	O
key	pointer
;	O
p	pointer
->	O
hash	long
=	O
hash	long
;	O
p	pointer
->	O
data	pointer
=	O
val	int
;	O
p	pointer
->	O
next	pointer
=	O
*	O
list	pointer
;	O
*	O
list	pointer
=	O
p	pointer
;	O
}	O
return	O
NULL	O
;	O
}	O
void	O
*	O
hash_replace	function
(	O
struct	O
hash_control	struct
*	O
table	pointer
,	O
const	O
char	O
*	O
key	pointer
,	O
void	O
*	O
value	long
)	O
{	O
struct	O
hash_entry	struct
*	O
p	pointer
;	O
void	O
*	O
ret	pointer
;	O
p	pointer
=	O
hash_lookup	function
(	O
table	pointer
,	O
key	pointer
,	O
strlen	function
(	O
key	pointer
)	O
,	O
NULL	O
,	O
NULL	O
)	O
;	O
if	O
(	O
p	pointer
==	O
NULL	O
)	O
return	O
NULL	O
;	O
ret	pointer
=	O
p	pointer
->	O
data	pointer
;	O
p	pointer
->	O
data	pointer
=	O
value	long
;	O
return	O
ret	pointer
;	O
}	O
void	O
*	O
hash_find	function
(	O
struct	O
hash_control	struct
*	O
table	pointer
,	O
const	O
char	O
*	O
key	pointer
)	O
{	O
struct	O
hash_entry	struct
*	O
p	pointer
;	O
p	pointer
=	O
hash_lookup	function
(	O
table	pointer
,	O
key	pointer
,	O
strlen	function
(	O
key	pointer
)	O
,	O
NULL	O
,	O
NULL	O
)	O
;	O
if	O
(	O
p	pointer
==	O
NULL	O
)	O
return	O
NULL	O
;	O
return	O
p	pointer
->	O
data	pointer
;	O
}	O
void	O
*	O
hash_find_n	function
(	O
struct	O
hash_control	struct
*	O
table	pointer
,	O
const	O
char	O
*	O
key	pointer
,	O
size_t	long
len	long
)	O
{	O
struct	O
hash_entry	struct
*	O
p	pointer
;	O
p	pointer
=	O
hash_lookup	function
(	O
table	pointer
,	O
key	pointer
,	O
len	long
,	O
NULL	O
,	O
NULL	O
)	O
;	O
if	O
(	O
p	pointer
==	O
NULL	O
)	O
return	O
NULL	O
;	O
return	O
p	pointer
->	O
data	pointer
;	O
}	O
void	O
*	O
hash_delete	function
(	O
struct	O
hash_control	struct
*	O
table	pointer
,	O
const	O
char	O
*	O
key	pointer
,	O
int	O
freeme	int
)	O
{	O
struct	O
hash_entry	struct
*	O
p	pointer
;	O
struct	O
hash_entry	struct
*	O
*	O
list	pointer
;	O
p	pointer
=	O
hash_lookup	function
(	O
table	pointer
,	O
key	pointer
,	O
strlen	function
(	O
key	pointer
)	O
,	O
&	O
list	pointer
,	O
NULL	O
)	O
;	O
if	O
(	O
p	pointer
==	O
NULL	O
)	O
return	O
NULL	O
;	O
if	O
(	O
p	pointer
!=	O
*	O
list	pointer
)	O
abort	function
(	O
)	O
;	O
*	O
list	pointer
=	O
p	pointer
->	O
next	pointer
;	O
if	O
(	O
freeme	int
)	O
obstack_free	O
(	O
&	O
table	pointer
->	O
memory	pointer
,	O
p	pointer
)	O
;	O
return	O
p	pointer
->	O
data	pointer
;	O
}	O
void	O
hash_traverse	function
(	O
struct	O
hash_control	struct
*	O
table	pointer
,	O
void	O
(	O
*	O
pfn	pointer
)	O
(	O
const	O
char	O
*	O
key	pointer
,	O
void	O
*	O
value	long
)	O
)	O
{	O
unsigned	O
int	O
i	pointer
;	O
for	O
(	O
i	pointer
=	O
0	int
;	O
i	pointer
<	O
table	pointer
->	O
size	int
;	O
++	O
i	pointer
)	O
{	O
struct	O
hash_entry	struct
*	O
p	pointer
;	O
for	O
(	O
p	pointer
=	O
table	pointer
->	O
table	pointer
[	O
i	pointer
]	O
;	O
p	pointer
!=	O
NULL	O
;	O
p	pointer
=	O
p	pointer
->	O
next	pointer
)	O
(	O
*	O
pfn	pointer
)	O
(	O
p	pointer
->	O
string	pointer
,	O
p	pointer
->	O
data	pointer
)	O
;	O
}	O
}	O
void	O
hash_print_statistics	function
(	O
FILE	struct
*	O
f	pointer
ATTRIBUTE_UNUSED	O
,	O
const	O
char	O
*	O
name	pointer
ATTRIBUTE_UNUSED	O
,	O
struct	O
hash_control	struct
*	O
table	pointer
ATTRIBUTE_UNUSED	O
)	O
{	O
}	O
