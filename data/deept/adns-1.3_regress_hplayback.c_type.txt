static	O
FILE	struct
*	O
Tinputfile	pointer
,	O
*	O
Treportfile	pointer
;	O
static	O
vbuf	struct
vb2	struct
;	O
extern	O
void	O
Tshutdown	function
(	O
void	O
)	O
{	O
adns__vbuf_free	function
(	O
&	O
vb2	struct
)	O
;	O
}	O
static	O
void	O
Tensurereportfile	function
(	O
void	O
)	O
{	O
const	O
char	O
*	O
fdstr	pointer
;	O
int	O
fd	int
;	O
if	O
(	O
Treportfile	pointer
)	O
return	O
;	O
Treportfile	pointer
=	O
stderr	pointer
;	O
fdstr	pointer
=	O
getenv	function
(	O
"ADNS_TEST_REPORT_FD"	pointer
)	O
;	O
if	O
(	O
!	O
fdstr	pointer
)	O
return	O
;	O
fd	int
=	O
atoi	function
(	O
fdstr	pointer
)	O
;	O
Treportfile	pointer
=	O
fdopen	function
(	O
fd	int
,	O
"a"	pointer
)	O
;	O
if	O
(	O
!	O
Treportfile	pointer
)	O
Tfailed	function
(	O
"fdopen ADNS_TEST_REPORT_FD"	pointer
)	O
;	O
}	O
static	O
void	O
Psyntax	function
(	O
const	O
char	O
*	O
where	pointer
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"adns test harness: syntax error in test log input file: %s\n"	pointer
,	O
where	pointer
)	O
;	O
exit	function
(	O
-	O
1	int
)	O
;	O
}	O
static	O
void	O
Pcheckinput	function
(	O
void	O
)	O
{	O
if	O
(	O
ferror	function
(	O
Tinputfile	pointer
)	O
)	O
Tfailed	function
(	O
"read test log input file"	pointer
)	O
;	O
if	O
(	O
feof	function
(	O
Tinputfile	pointer
)	O
)	O
Psyntax	function
(	O
"eof at syscall reply"	pointer
)	O
;	O
}	O
void	O
Tensurerecordfile	function
(	O
void	O
)	O
{	O
const	O
char	O
*	O
fdstr	pointer
;	O
int	O
fd	int
;	O
int	O
chars	int
;	O
unsigned	O
long	O
sec	long
,	O
usec	long
;	O
if	O
(	O
Tinputfile	pointer
)	O
return	O
;	O
Tinputfile	pointer
=	O
stdin	pointer
;	O
fdstr	pointer
=	O
getenv	function
(	O
"ADNS_TEST_IN_FD"	pointer
)	O
;	O
if	O
(	O
fdstr	pointer
)	O
{	O
fd	int
=	O
atoi	function
(	O
fdstr	pointer
)	O
;	O
Tinputfile	pointer
=	O
fdopen	function
(	O
fd	int
,	O
"r"	pointer
)	O
;	O
if	O
(	O
!	O
Tinputfile	pointer
)	O
Tfailed	function
(	O
"fdopen ADNS_TEST_IN_FD"	pointer
)	O
;	O
}	O
setvbuf	function
(	O
Tinputfile	pointer
,	O
0	int
,	O
_IONBF	int
,	O
0	int
)	O
;	O
if	O
(	O
!	O
adns__vbuf_ensure	function
(	O
&	O
vb2	struct
,	O
1000	int
)	O
)	O
Tnomem	function
(	O
)	O
;	O
fgets	function
(	O
vb2	struct
.	O
buf	pointer
,	O
vb2	struct
.	O
avail	int
,	O
Tinputfile	pointer
)	O
;	O
Pcheckinput	function
(	O
)	O
;	O
chars	int
=	O
-	O
1	int
;	O
sscanf	function
(	O
vb2	struct
.	O
buf	pointer
,	O
" start %lu.%lu%n"	pointer
,	O
&	O
sec	long
,	O
&	O
usec	long
,	O
&	O
chars	int
)	O
;	O
if	O
(	O
chars	int
==	O
-	O
1	int
)	O
Psyntax	function
(	O
"start time invalid"	pointer
)	O
;	O
currenttime	struct
.	O
tv_sec	long
=	O
sec	long
;	O
currenttime	struct
.	O
tv_usec	long
=	O
usec	long
;	O
if	O
(	O
vb2	struct
.	O
buf	pointer
[	O
chars	int
]	O
!=	O
'\n'	O
)	O
Psyntax	function
(	O
"not newline after start time"	pointer
)	O
;	O
}	O
static	O
void	O
Parg	function
(	O
const	O
char	O
*	O
argname	pointer
)	O
{	O
int	O
l	long
;	O
if	O
(	O
vb2	struct
.	O
buf	pointer
[	O
vb2	struct
.	O
used	int
++	O
]	O
!=	O
' '	O
)	O
Psyntax	function
(	O
"not a space before argument"	pointer
)	O
;	O
l	long
=	O
strlen	function
(	O
argname	pointer
)	O
;	O
if	O
(	O
memcmp	function
(	O
vb2	struct
.	O
buf	pointer
+	O
vb2	struct
.	O
used	int
,	O
argname	pointer
,	O
l	long
)	O
)	O
Psyntax	function
(	O
"argument name wrong"	pointer
)	O
;	O
vb2	struct
.	O
used	int
+=	O
l	long
;	O
if	O
(	O
vb2	struct
.	O
buf	pointer
[	O
vb2	struct
.	O
used	int
++	O
]	O
!=	O
'='	O
)	O
Psyntax	function
(	O
"not = after argument name"	pointer
)	O
;	O
}	O
static	O
int	O
Pstring_maybe	function
(	O
const	O
char	O
*	O
string	pointer
)	O
{	O
int	O
l	long
;	O
l	long
=	O
strlen	function
(	O
string	pointer
)	O
;	O
if	O
(	O
memcmp	function
(	O
vb2	struct
.	O
buf	pointer
+	O
vb2	struct
.	O
used	int
,	O
string	pointer
,	O
l	long
)	O
)	O
return	O
0	int
;	O
vb2	struct
.	O
used	int
+=	O
l	long
;	O
return	O
1	int
;	O
}	O
static	O
void	O
Pstring	function
(	O
const	O
char	O
*	O
string	pointer
,	O
const	O
char	O
*	O
emsg	pointer
)	O
{	O
if	O
(	O
Pstring_maybe	function
(	O
string	pointer
)	O
)	O
return	O
;	O
Psyntax	function
(	O
emsg	pointer
)	O
;	O
}	O
static	O
int	O
Perrno	function
(	O
const	O
char	O
*	O
stuff	pointer
)	O
{	O
const	O
struct	O
Terrno	struct
*	O
te	pointer
;	O
int	O
r	int
;	O
char	O
*	O
ep	pointer
;	O
for	O
(	O
te	pointer
=	O
Terrnos	array
;	O
te	pointer
->	O
n	pointer
&&	O
strcmp	function
(	O
te	pointer
->	O
n	pointer
,	O
stuff	pointer
)	O
;	O
te	pointer
++	O
)	O
;	O
if	O
(	O
te	pointer
->	O
n	pointer
)	O
return	O
te	pointer
->	O
v	int
;	O
r	int
=	O
strtoul	function
(	O
stuff	pointer
+	O
2	int
,	O
&	O
ep	pointer
,	O
10	int
)	O
;	O
if	O
(	O
*	O
ep	pointer
)	O
Psyntax	function
(	O
"errno value not recognised, not numeric"	pointer
)	O
;	O
return	O
r	int
;	O
}	O
static	O
void	O
P_updatetime	function
(	O
void	O
)	O
{	O
int	O
chars	int
;	O
unsigned	O
long	O
sec	long
,	O
usec	long
;	O
if	O
(	O
!	O
adns__vbuf_ensure	function
(	O
&	O
vb2	struct
,	O
1000	int
)	O
)	O
Tnomem	function
(	O
)	O
;	O
fgets	function
(	O
vb2	struct
.	O
buf	pointer
,	O
vb2	struct
.	O
avail	int
,	O
Tinputfile	pointer
)	O
;	O
Pcheckinput	function
(	O
)	O
;	O
chars	int
=	O
-	O
1	int
;	O
sscanf	function
(	O
vb2	struct
.	O
buf	pointer
,	O
" +%lu.%lu%n"	pointer
,	O
&	O
sec	long
,	O
&	O
usec	long
,	O
&	O
chars	int
)	O
;	O
if	O
(	O
chars	int
==	O
-	O
1	int
)	O
Psyntax	function
(	O
"update time invalid"	pointer
)	O
;	O
currenttime	struct
.	O
tv_sec	long
+=	O
sec	long
;	O
currenttime	struct
.	O
tv_usec	long
+=	O
usec	long
;	O
if	O
(	O
currenttime	struct
.	O
tv_usec	long
>	O
1000000	int
)	O
{	O
currenttime	struct
.	O
tv_sec	long
++	O
;	O
currenttime	struct
.	O
tv_usec	long
-=	O
1000000	int
;	O
}	O
if	O
(	O
vb2	struct
.	O
buf	pointer
[	O
chars	int
]	O
!=	O
'\n'	O
)	O
Psyntax	function
(	O
"not newline after update time"	pointer
)	O
;	O
}	O
static	O
void	O
Pfdset	function
(	O
fd_set	struct
*	O
set	pointer
,	O
int	O
max	int
)	O
{	O
int	O
r	int
,	O
c	int
;	O
char	O
*	O
ep	pointer
;	O
if	O
(	O
vb2	struct
.	O
buf	pointer
[	O
vb2	struct
.	O
used	int
++	O
]	O
!=	O
'['	O
)	O
Psyntax	function
(	O
"fd set start not ["	pointer
)	O
;	O
FD_ZERO	O
(	O
set	pointer
)	O
;	O
if	O
(	O
vb2	struct
.	O
buf	pointer
[	O
vb2	struct
.	O
used	int
]	O
==	O
']'	O
)	O
{	O
vb2	struct
.	O
used	int
++	O
;	O
return	O
;	O
}	O
for	O
(	O
;	O
;	O
)	O
{	O
r	int
=	O
strtoul	function
(	O
vb2	struct
.	O
buf	pointer
+	O
vb2	struct
.	O
used	int
,	O
&	O
ep	pointer
,	O
10	int
)	O
;	O
if	O
(	O
r	int
>=	O
max	int
)	O
Psyntax	function
(	O
"fd set member > max"	pointer
)	O
;	O
if	O
(	O
ep	pointer
==	O
(	O
char	O
*	O
)	O
vb2	struct
.	O
buf	pointer
+	O
vb2	struct
.	O
used	int
)	O
Psyntax	function
(	O
"empty entry in fd set"	pointer
)	O
;	O
FD_SET	O
(	O
r	int
,	O
set	pointer
)	O
;	O
vb2	struct
.	O
used	int
=	O
ep	pointer
-	O
(	O
char	O
*	O
)	O
vb2	struct
.	O
buf	pointer
;	O
c	int
=	O
vb2	struct
.	O
buf	pointer
[	O
vb2	struct
.	O
used	int
++	O
]	O
;	O
if	O
(	O
c	int
==	O
']'	O
)	O
break	O
;	O
if	O
(	O
c	int
!=	O
','	O
)	O
Psyntax	function
(	O
"fd set separator not ,"	pointer
)	O
;	O
}	O
}	O
static	O
int	O
Ppollfdevents	function
(	O
void	O
)	O
{	O
int	O
events	short
;	O
if	O
(	O
Pstring_maybe	function
(	O
"0"	pointer
)	O
)	O
return	O
0	int
;	O
events	short
=	O
0	int
;	O
if	O
(	O
Pstring_maybe	function
(	O
"POLLIN"	pointer
)	O
)	O
{	O
events	short
|=	O
POLLIN	int
;	O
if	O
(	O
!	O
Pstring_maybe	function
(	O
"|"	pointer
)	O
)	O
return	O
events	short
;	O
}	O
if	O
(	O
Pstring_maybe	function
(	O
"POLLOUT"	pointer
)	O
)	O
{	O
events	short
|=	O
POLLOUT	int
;	O
if	O
(	O
!	O
Pstring_maybe	function
(	O
"|"	pointer
)	O
)	O
return	O
events	short
;	O
}	O
Pstring	function
(	O
"POLLPRI"	pointer
,	O
"pollfdevents PRI?"	pointer
)	O
;	O
return	O
events	short
;	O
}	O
static	O
void	O
Ppollfds	function
(	O
struct	O
pollfd	struct
*	O
fds	pointer
,	O
int	O
nfds	int
)	O
{	O
int	O
i	int
;	O
char	O
*	O
ep	pointer
;	O
const	O
char	O
*	O
comma	pointer
=	O
""	pointer
;	O
if	O
(	O
vb2	struct
.	O
buf	pointer
[	O
vb2	struct
.	O
used	int
++	O
]	O
!=	O
'['	O
)	O
Psyntax	function
(	O
"pollfds start not ["	pointer
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
nfds	int
;	O
i	int
++	O
)	O
{	O
Pstring	function
(	O
"{fd="	pointer
,	O
"{fd= in pollfds"	pointer
)	O
;	O
fds	pointer
->	O
fd	int
=	O
strtoul	function
(	O
vb2	struct
.	O
buf	pointer
+	O
vb2	struct
.	O
used	int
,	O
&	O
ep	pointer
,	O
10	int
)	O
;	O
vb2	struct
.	O
used	int
=	O
ep	pointer
-	O
(	O
char	O
*	O
)	O
vb2	struct
.	O
buf	pointer
;	O
Pstring	function
(	O
", events="	pointer
,	O
", events= in pollfds"	pointer
)	O
;	O
fds	pointer
->	O
events	short
=	O
Ppollfdevents	function
(	O
)	O
;	O
Pstring	function
(	O
", revents="	pointer
,	O
", revents= in pollfds"	pointer
)	O
;	O
fds	pointer
->	O
revents	short
=	O
Ppollfdevents	function
(	O
)	O
;	O
Pstring	function
(	O
"}"	pointer
,	O
"} in pollfds"	pointer
)	O
;	O
Pstring	function
(	O
comma	pointer
,	O
"separator in pollfds"	pointer
)	O
;	O
comma	pointer
=	O
", "	pointer
;	O
}	O
if	O
(	O
vb2	struct
.	O
buf	pointer
[	O
vb2	struct
.	O
used	int
++	O
]	O
!=	O
']'	O
)	O
Psyntax	function
(	O
"pollfds end not ]"	pointer
)	O
;	O
}	O
static	O
void	O
Paddr	function
(	O
struct	O
sockaddr	struct
*	O
addr	union
,	O
int	O
*	O
lenr	pointer
)	O
{	O
struct	O
sockaddr_in	struct
*	O
sa	struct
=	O
(	O
struct	O
sockaddr_in	struct
*	O
)	O
addr	union
;	O
char	O
*	O
p	pointer
,	O
*	O
ep	pointer
;	O
long	O
ul	long
;	O
assert	O
(	O
*	O
lenr	pointer
>=	O
sizeof	O
(	O
*	O
sa	struct
)	O
)	O
;	O
p	pointer
=	O
strchr	function
(	O
vb2	struct
.	O
buf	pointer
+	O
vb2	struct
.	O
used	int
,	O
':'	O
)	O
;	O
if	O
(	O
!	O
p	pointer
)	O
Psyntax	function
(	O
"no port on address"	pointer
)	O
;	O
*	O
p	pointer
++	O
=	O
0	int
;	O
memset	function
(	O
sa	struct
,	O
0	int
,	O
sizeof	O
(	O
*	O
sa	struct
)	O
)	O
;	O
sa	struct
->	O
sin_family	short
=	O
AF_INET	O
;	O
if	O
(	O
!	O
inet_aton	function
(	O
vb2	struct
.	O
buf	pointer
+	O
vb2	struct
.	O
used	int
,	O
&	O
sa	struct
->	O
sin_addr	struct
)	O
)	O
Psyntax	function
(	O
"invalid address"	pointer
)	O
;	O
ul	long
=	O
strtoul	function
(	O
p	pointer
,	O
&	O
ep	pointer
,	O
10	int
)	O
;	O
if	O
(	O
*	O
ep	pointer
&&	O
*	O
ep	pointer
!=	O
' '	O
)	O
Psyntax	function
(	O
"invalid port (bad syntax)"	pointer
)	O
;	O
if	O
(	O
ul	long
>=	O
65536	int
)	O
Psyntax	function
(	O
"port too large"	pointer
)	O
;	O
sa	struct
->	O
sin_port	short
=	O
htons	function
(	O
ul	long
)	O
;	O
*	O
lenr	pointer
=	O
sizeof	O
(	O
*	O
sa	struct
)	O
;	O
vb2	struct
.	O
used	int
=	O
ep	pointer
-	O
(	O
char	O
*	O
)	O
vb2	struct
.	O
buf	pointer
;	O
}	O
static	O
int	O
Pbytes	function
(	O
byte	char
*	O
buf	pointer
,	O
int	O
maxlen	int
)	O
{	O
static	O
const	O
char	O
hexdigits	array
[	O
]	O
=	O
"0123456789abcdef"	pointer
;	O
int	O
c	int
,	O
v	int
,	O
done	int
;	O
const	O
char	O
*	O
pf	pointer
;	O
done	int
=	O
0	int
;	O
for	O
(	O
;	O
;	O
)	O
{	O
c	int
=	O
getc	function
(	O
Tinputfile	pointer
)	O
;	O
Pcheckinput	function
(	O
)	O
;	O
if	O
(	O
c	int
==	O
'\n'	O
||	O
c	int
==	O
' '	O
||	O
c	int
==	O
'\t'	O
)	O
continue	O
;	O
if	O
(	O
c	int
==	O
'.'	O
)	O
break	O
;	O
pf	pointer
=	O
strchr	function
(	O
hexdigits	array
,	O
c	int
)	O
;	O
if	O
(	O
!	O
pf	pointer
)	O
Psyntax	function
(	O
"invalid first hex digit"	pointer
)	O
;	O
v	int
=	O
(	O
pf	pointer
-	O
hexdigits	array
)	O
<<	O
4	int
;	O
c	int
=	O
getc	function
(	O
Tinputfile	pointer
)	O
;	O
Pcheckinput	function
(	O
)	O
;	O
pf	pointer
=	O
strchr	function
(	O
hexdigits	array
,	O
c	int
)	O
;	O
if	O
(	O
!	O
pf	pointer
)	O
Psyntax	function
(	O
"invalid second hex digit"	pointer
)	O
;	O
v	int
|=	O
(	O
pf	pointer
-	O
hexdigits	array
)	O
;	O
if	O
(	O
maxlen	int
<=	O
0	int
)	O
Psyntax	function
(	O
"buffer overflow in bytes"	pointer
)	O
;	O
*	O
buf	pointer
++	O
=	O
v	int
;	O
maxlen	int
--	O
;	O
done	int
++	O
;	O
}	O
for	O
(	O
;	O
;	O
)	O
{	O
c	int
=	O
getc	function
(	O
Tinputfile	pointer
)	O
;	O
Pcheckinput	function
(	O
)	O
;	O
if	O
(	O
c	int
==	O
'\n'	O
)	O
return	O
done	int
;	O
}	O
}	O
void	O
Q_vb	function
(	O
void	O
)	O
{	O
int	O
r	int
;	O
const	O
char	O
*	O
nl	pointer
;	O
Tensurerecordfile	function
(	O
)	O
;	O
if	O
(	O
!	O
adns__vbuf_ensure	function
(	O
&	O
vb2	struct
,	O
vb	pointer
.	O
used	int
+	O
2	int
)	O
)	O
Tnomem	function
(	O
)	O
;	O
r	int
=	O
fread	function
(	O
vb2	struct
.	O
buf	pointer
,	O
1	int
,	O
vb	pointer
.	O
used	int
+	O
2	int
,	O
Tinputfile	pointer
)	O
;	O
if	O
(	O
feof	function
(	O
Tinputfile	pointer
)	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"adns test harness: input ends prematurely; program did:\n %.*s\n"	pointer
,	O
vb	pointer
.	O
used	int
,	O
vb	pointer
.	O
buf	pointer
)	O
;	O
exit	function
(	O
-	O
1	int
)	O
;	O
}	O
Pcheckinput	function
(	O
)	O
;	O
if	O
(	O
vb2	struct
.	O
buf	pointer
[	O
0	int
]	O
!=	O
' '	O
)	O
Psyntax	function
(	O
"not space before call"	pointer
)	O
;	O
if	O
(	O
memcmp	function
(	O
vb	pointer
.	O
buf	pointer
,	O
vb2	struct
.	O
buf	pointer
+	O
1	int
,	O
vb	pointer
.	O
used	int
)	O
||	O
vb2	struct
.	O
buf	pointer
[	O
vb	pointer
.	O
used	int
+	O
1	int
]	O
!=	O
'\n'	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"adns test harness: program did unexpected:\n %.*s\n"	pointer
"was expecting:\n %.*s\n"	pointer
,	O
vb	pointer
.	O
used	int
,	O
vb	pointer
.	O
buf	pointer
,	O
vb	pointer
.	O
used	int
,	O
vb2	struct
.	O
buf	pointer
+	O
1	int
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
Tensurereportfile	function
(	O
)	O
;	O
nl	pointer
=	O
memchr	function
(	O
vb	pointer
.	O
buf	pointer
,	O
'\n'	O
,	O
vb	pointer
.	O
used	int
)	O
;	O
fprintf	function
(	O
Treportfile	pointer
,	O
" %.*s\n"	pointer
,	O
(	O
int	O
)	O
(	O
nl	pointer
?	O
nl	pointer
-	O
(	O
const	O
char	O
*	O
)	O
vb	pointer
.	O
buf	pointer
:	O
vb	pointer
.	O
used	int
)	O
,	O
vb	pointer
.	O
buf	pointer
)	O
;	O
}	O
int	O
Hselect	function
(	O
int	O
max	int
,	O
fd_set	struct
*	O
rfds	pointer
,	O
fd_set	struct
*	O
wfds	pointer
,	O
fd_set	struct
*	O
efds	pointer
,	O
struct	O
timeval	struct
*	O
to	pointer
)	O
{	O
int	O
r	int
,	O
amtread	int
;	O
char	O
*	O
ep	pointer
;	O
Qselect	function
(	O
max	int
,	O
rfds	pointer
,	O
wfds	pointer
,	O
efds	pointer
,	O
to	pointer
)	O
;	O
if	O
(	O
!	O
adns__vbuf_ensure	function
(	O
&	O
vb2	struct
,	O
1000	int
)	O
)	O
Tnomem	function
(	O
)	O
;	O
fgets	function
(	O
vb2	struct
.	O
buf	pointer
,	O
vb2	struct
.	O
avail	int
,	O
Tinputfile	pointer
)	O
;	O
Pcheckinput	function
(	O
)	O
;	O
Tensurereportfile	function
(	O
)	O
;	O
fprintf	function
(	O
Treportfile	pointer
,	O
"%s"	pointer
,	O
vb2	struct
.	O
buf	pointer
)	O
;	O
amtread	int
=	O
strlen	function
(	O
vb2	struct
.	O
buf	pointer
)	O
;	O
if	O
(	O
amtread	int
<=	O
0	int
||	O
vb2	struct
.	O
buf	pointer
[	O
--	O
amtread	int
]	O
!=	O
'\n'	O
)	O
Psyntax	function
(	O
"badly formed line"	pointer
)	O
;	O
vb2	struct
.	O
buf	pointer
[	O
amtread	int
]	O
=	O
0	int
;	O
if	O
(	O
memcmp	function
(	O
vb2	struct
.	O
buf	pointer
,	O
" select="	pointer
,	O
8	int
)	O
)	O
Psyntax	function
(	O
"syscall reply mismatch"	pointer
)	O
;	O
if	O
(	O
vb2	struct
.	O
buf	pointer
[	O
8	int
]	O
==	O
'E'	O
)	O
{	O
int	O
e	int
;	O
e	int
=	O
Perrno	function
(	O
vb2	struct
.	O
buf	pointer
+	O
8	int
)	O
;	O
P_updatetime	function
(	O
)	O
;	O
errno	O
=	O
e	int
;	O
return	O
-	O
1	int
;	O
}	O
r	int
=	O
strtoul	function
(	O
vb2	struct
.	O
buf	pointer
+	O
8	int
,	O
&	O
ep	pointer
,	O
10	int
)	O
;	O
if	O
(	O
*	O
ep	pointer
&&	O
*	O
ep	pointer
!=	O
' '	O
)	O
Psyntax	function
(	O
"return value not E* or positive number"	pointer
)	O
;	O
vb2	struct
.	O
used	int
=	O
ep	pointer
-	O
(	O
char	O
*	O
)	O
vb2	struct
.	O
buf	pointer
;	O
Parg	function
(	O
"rfds"	pointer
)	O
;	O
Pfdset	function
(	O
rfds	pointer
,	O
max	int
)	O
;	O
Parg	function
(	O
"wfds"	pointer
)	O
;	O
Pfdset	function
(	O
wfds	pointer
,	O
max	int
)	O
;	O
Parg	function
(	O
"efds"	pointer
)	O
;	O
Pfdset	function
(	O
efds	pointer
,	O
max	int
)	O
;	O
assert	O
(	O
vb2	struct
.	O
used	int
<=	O
amtread	int
)	O
;	O
if	O
(	O
vb2	struct
.	O
used	int
!=	O
amtread	int
)	O
Psyntax	function
(	O
"junk at end of line"	pointer
)	O
;	O
P_updatetime	function
(	O
)	O
;	O
return	O
r	int
;	O
}	O
int	O
Hpoll	function
(	O
struct	O
pollfd	struct
*	O
fds	pointer
,	O
int	O
nfds	int
,	O
int	O
timeout	struct
)	O
{	O
int	O
r	int
,	O
amtread	int
;	O
char	O
*	O
ep	pointer
;	O
Qpoll	function
(	O
fds	pointer
,	O
nfds	int
,	O
timeout	struct
)	O
;	O
if	O
(	O
!	O
adns__vbuf_ensure	function
(	O
&	O
vb2	struct
,	O
1000	int
)	O
)	O
Tnomem	function
(	O
)	O
;	O
fgets	function
(	O
vb2	struct
.	O
buf	pointer
,	O
vb2	struct
.	O
avail	int
,	O
Tinputfile	pointer
)	O
;	O
Pcheckinput	function
(	O
)	O
;	O
Tensurereportfile	function
(	O
)	O
;	O
fprintf	function
(	O
Treportfile	pointer
,	O
"%s"	pointer
,	O
vb2	struct
.	O
buf	pointer
)	O
;	O
amtread	int
=	O
strlen	function
(	O
vb2	struct
.	O
buf	pointer
)	O
;	O
if	O
(	O
amtread	int
<=	O
0	int
||	O
vb2	struct
.	O
buf	pointer
[	O
--	O
amtread	int
]	O
!=	O
'\n'	O
)	O
Psyntax	function
(	O
"badly formed line"	pointer
)	O
;	O
vb2	struct
.	O
buf	pointer
[	O
amtread	int
]	O
=	O
0	int
;	O
if	O
(	O
memcmp	function
(	O
vb2	struct
.	O
buf	pointer
,	O
" poll="	pointer
,	O
6	int
)	O
)	O
Psyntax	function
(	O
"syscall reply mismatch"	pointer
)	O
;	O
if	O
(	O
vb2	struct
.	O
buf	pointer
[	O
6	int
]	O
==	O
'E'	O
)	O
{	O
int	O
e	int
;	O
e	int
=	O
Perrno	function
(	O
vb2	struct
.	O
buf	pointer
+	O
6	int
)	O
;	O
P_updatetime	function
(	O
)	O
;	O
errno	O
=	O
e	int
;	O
return	O
-	O
1	int
;	O
}	O
r	int
=	O
strtoul	function
(	O
vb2	struct
.	O
buf	pointer
+	O
6	int
,	O
&	O
ep	pointer
,	O
10	int
)	O
;	O
if	O
(	O
*	O
ep	pointer
&&	O
*	O
ep	pointer
!=	O
' '	O
)	O
Psyntax	function
(	O
"return value not E* or positive number"	pointer
)	O
;	O
vb2	struct
.	O
used	int
=	O
ep	pointer
-	O
(	O
char	O
*	O
)	O
vb2	struct
.	O
buf	pointer
;	O
Parg	function
(	O
"fds"	pointer
)	O
;	O
Ppollfds	function
(	O
fds	pointer
,	O
nfds	int
)	O
;	O
assert	O
(	O
vb2	struct
.	O
used	int
<=	O
amtread	int
)	O
;	O
if	O
(	O
vb2	struct
.	O
used	int
!=	O
amtread	int
)	O
Psyntax	function
(	O
"junk at end of line"	pointer
)	O
;	O
P_updatetime	function
(	O
)	O
;	O
return	O
r	int
;	O
}	O
int	O
Hsocket	function
(	O
int	O
domain	int
,	O
int	O
type	enum
,	O
int	O
protocol	int
)	O
{	O
int	O
r	int
,	O
amtread	int
;	O
char	O
*	O
ep	pointer
;	O
Tmust	function
(	O
"socket"	pointer
,	O
"domain"	pointer
,	O
domain	int
==	O
AF_INET	O
)	O
;	O
Tmust	function
(	O
"socket"	pointer
,	O
"type"	pointer
,	O
type	enum
==	O
SOCK_STREAM	int
||	O
type	enum
==	O
SOCK_DGRAM	int
)	O
;	O
Qsocket	function
(	O
type	enum
)	O
;	O
if	O
(	O
!	O
adns__vbuf_ensure	function
(	O
&	O
vb2	struct
,	O
1000	int
)	O
)	O
Tnomem	function
(	O
)	O
;	O
fgets	function
(	O
vb2	struct
.	O
buf	pointer
,	O
vb2	struct
.	O
avail	int
,	O
Tinputfile	pointer
)	O
;	O
Pcheckinput	function
(	O
)	O
;	O
Tensurereportfile	function
(	O
)	O
;	O
fprintf	function
(	O
Treportfile	pointer
,	O
"%s"	pointer
,	O
vb2	struct
.	O
buf	pointer
)	O
;	O
amtread	int
=	O
strlen	function
(	O
vb2	struct
.	O
buf	pointer
)	O
;	O
if	O
(	O
amtread	int
<=	O
0	int
||	O
vb2	struct
.	O
buf	pointer
[	O
--	O
amtread	int
]	O
!=	O
'\n'	O
)	O
Psyntax	function
(	O
"badly formed line"	pointer
)	O
;	O
vb2	struct
.	O
buf	pointer
[	O
amtread	int
]	O
=	O
0	int
;	O
if	O
(	O
memcmp	function
(	O
vb2	struct
.	O
buf	pointer
,	O
" socket="	pointer
,	O
8	int
)	O
)	O
Psyntax	function
(	O
"syscall reply mismatch"	pointer
)	O
;	O
if	O
(	O
vb2	struct
.	O
buf	pointer
[	O
8	int
]	O
==	O
'E'	O
)	O
{	O
int	O
e	int
;	O
e	int
=	O
Perrno	function
(	O
vb2	struct
.	O
buf	pointer
+	O
8	int
)	O
;	O
P_updatetime	function
(	O
)	O
;	O
errno	O
=	O
e	int
;	O
return	O
-	O
1	int
;	O
}	O
r	int
=	O
strtoul	function
(	O
vb2	struct
.	O
buf	pointer
+	O
8	int
,	O
&	O
ep	pointer
,	O
10	int
)	O
;	O
if	O
(	O
*	O
ep	pointer
&&	O
*	O
ep	pointer
!=	O
' '	O
)	O
Psyntax	function
(	O
"return value not E* or positive number"	pointer
)	O
;	O
vb2	struct
.	O
used	int
=	O
ep	pointer
-	O
(	O
char	O
*	O
)	O
vb2	struct
.	O
buf	pointer
;	O
assert	O
(	O
vb2	struct
.	O
used	int
<=	O
amtread	int
)	O
;	O
if	O
(	O
vb2	struct
.	O
used	int
!=	O
amtread	int
)	O
Psyntax	function
(	O
"junk at end of line"	pointer
)	O
;	O
P_updatetime	function
(	O
)	O
;	O
return	O
r	int
;	O
}	O
int	O
Hfcntl	function
(	O
int	O
fd	int
,	O
int	O
cmd	int
,	O
...	O
)	O
{	O
int	O
r	int
,	O
amtread	int
;	O
va_list	array
al	array
;	O
long	O
arg	long
;	O
Tmust	function
(	O
"fcntl"	pointer
,	O
"cmd"	pointer
,	O
cmd	int
==	O
F_SETFL	int
||	O
cmd	int
==	O
F_GETFL	int
)	O
;	O
if	O
(	O
cmd	int
==	O
F_SETFL	int
)	O
{	O
va_start	O
(	O
al	array
,	O
cmd	int
)	O
;	O
arg	long
=	O
va_arg	O
(	O
al	array
,	O
long	O
)	O
;	O
va_end	O
(	O
al	array
)	O
;	O
}	O
else	O
{	O
arg	long
=	O
0	int
;	O
}	O
Qfcntl	function
(	O
fd	int
,	O
cmd	int
,	O
arg	long
)	O
;	O
if	O
(	O
!	O
adns__vbuf_ensure	function
(	O
&	O
vb2	struct
,	O
1000	int
)	O
)	O
Tnomem	function
(	O
)	O
;	O
fgets	function
(	O
vb2	struct
.	O
buf	pointer
,	O
vb2	struct
.	O
avail	int
,	O
Tinputfile	pointer
)	O
;	O
Pcheckinput	function
(	O
)	O
;	O
Tensurereportfile	function
(	O
)	O
;	O
fprintf	function
(	O
Treportfile	pointer
,	O
"%s"	pointer
,	O
vb2	struct
.	O
buf	pointer
)	O
;	O
amtread	int
=	O
strlen	function
(	O
vb2	struct
.	O
buf	pointer
)	O
;	O
if	O
(	O
amtread	int
<=	O
0	int
||	O
vb2	struct
.	O
buf	pointer
[	O
--	O
amtread	int
]	O
!=	O
'\n'	O
)	O
Psyntax	function
(	O
"badly formed line"	pointer
)	O
;	O
vb2	struct
.	O
buf	pointer
[	O
amtread	int
]	O
=	O
0	int
;	O
if	O
(	O
memcmp	function
(	O
vb2	struct
.	O
buf	pointer
,	O
" fcntl="	pointer
,	O
7	int
)	O
)	O
Psyntax	function
(	O
"syscall reply mismatch"	pointer
)	O
;	O
if	O
(	O
vb2	struct
.	O
buf	pointer
[	O
7	int
]	O
==	O
'E'	O
)	O
{	O
int	O
e	int
;	O
e	int
=	O
Perrno	function
(	O
vb2	struct
.	O
buf	pointer
+	O
7	int
)	O
;	O
P_updatetime	function
(	O
)	O
;	O
errno	O
=	O
e	int
;	O
return	O
-	O
1	int
;	O
}	O
r	int
=	O
0	int
;	O
if	O
(	O
cmd	int
==	O
F_GETFL	int
)	O
{	O
if	O
(	O
!	O
memcmp	function
(	O
vb2	struct
.	O
buf	pointer
+	O
7	int
,	O
"O_NONBLOCK|..."	pointer
,	O
14	int
)	O
)	O
{	O
r	int
=	O
O_NONBLOCK	int
;	O
vb2	struct
.	O
used	int
=	O
7	int
+	O
14	int
;	O
}	O
else	O
if	O
(	O
!	O
memcmp	function
(	O
vb2	struct
.	O
buf	pointer
+	O
7	int
,	O
"~O_NONBLOCK&..."	pointer
,	O
15	int
)	O
)	O
{	O
vb2	struct
.	O
used	int
=	O
7	int
+	O
15	int
;	O
}	O
else	O
{	O
Psyntax	function
(	O
"fcntl flags not O_NONBLOCK|... or ~O_NONBLOCK&..."	pointer
)	O
;	O
}	O
}	O
else	O
if	O
(	O
cmd	int
==	O
F_SETFL	int
)	O
{	O
if	O
(	O
memcmp	function
(	O
vb2	struct
.	O
buf	pointer
+	O
7	int
,	O
"OK"	pointer
,	O
2	int
)	O
)	O
Psyntax	function
(	O
"success/fail not E* or OK"	pointer
)	O
;	O
vb2	struct
.	O
used	int
=	O
7	int
+	O
2	int
;	O
r	int
=	O
0	int
;	O
}	O
else	O
{	O
Psyntax	function
(	O
"fcntl not F_GETFL or F_SETFL"	pointer
)	O
;	O
}	O
assert	O
(	O
vb2	struct
.	O
used	int
<=	O
amtread	int
)	O
;	O
if	O
(	O
vb2	struct
.	O
used	int
!=	O
amtread	int
)	O
Psyntax	function
(	O
"junk at end of line"	pointer
)	O
;	O
P_updatetime	function
(	O
)	O
;	O
return	O
r	int
;	O
}	O
int	O
Hconnect	function
(	O
int	O
fd	int
,	O
const	O
struct	O
sockaddr	struct
*	O
addr	union
,	O
int	O
addrlen	int
)	O
{	O
int	O
r	int
,	O
amtread	int
;	O
Qconnect	function
(	O
fd	int
,	O
addr	union
,	O
addrlen	int
)	O
;	O
if	O
(	O
!	O
adns__vbuf_ensure	function
(	O
&	O
vb2	struct
,	O
1000	int
)	O
)	O
Tnomem	function
(	O
)	O
;	O
fgets	function
(	O
vb2	struct
.	O
buf	pointer
,	O
vb2	struct
.	O
avail	int
,	O
Tinputfile	pointer
)	O
;	O
Pcheckinput	function
(	O
)	O
;	O
Tensurereportfile	function
(	O
)	O
;	O
fprintf	function
(	O
Treportfile	pointer
,	O
"%s"	pointer
,	O
vb2	struct
.	O
buf	pointer
)	O
;	O
amtread	int
=	O
strlen	function
(	O
vb2	struct
.	O
buf	pointer
)	O
;	O
if	O
(	O
amtread	int
<=	O
0	int
||	O
vb2	struct
.	O
buf	pointer
[	O
--	O
amtread	int
]	O
!=	O
'\n'	O
)	O
Psyntax	function
(	O
"badly formed line"	pointer
)	O
;	O
vb2	struct
.	O
buf	pointer
[	O
amtread	int
]	O
=	O
0	int
;	O
if	O
(	O
memcmp	function
(	O
vb2	struct
.	O
buf	pointer
,	O
" connect="	pointer
,	O
9	int
)	O
)	O
Psyntax	function
(	O
"syscall reply mismatch"	pointer
)	O
;	O
if	O
(	O
vb2	struct
.	O
buf	pointer
[	O
9	int
]	O
==	O
'E'	O
)	O
{	O
int	O
e	int
;	O
e	int
=	O
Perrno	function
(	O
vb2	struct
.	O
buf	pointer
+	O
9	int
)	O
;	O
P_updatetime	function
(	O
)	O
;	O
errno	O
=	O
e	int
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
memcmp	function
(	O
vb2	struct
.	O
buf	pointer
+	O
9	int
,	O
"OK"	pointer
,	O
2	int
)	O
)	O
Psyntax	function
(	O
"success/fail not E* or OK"	pointer
)	O
;	O
vb2	struct
.	O
used	int
=	O
9	int
+	O
2	int
;	O
r	int
=	O
0	int
;	O
assert	O
(	O
vb2	struct
.	O
used	int
<=	O
amtread	int
)	O
;	O
if	O
(	O
vb2	struct
.	O
used	int
!=	O
amtread	int
)	O
Psyntax	function
(	O
"junk at end of line"	pointer
)	O
;	O
P_updatetime	function
(	O
)	O
;	O
return	O
r	int
;	O
}	O
int	O
Hbind	function
(	O
int	O
fd	int
,	O
const	O
struct	O
sockaddr	struct
*	O
addr	union
,	O
int	O
addrlen	int
)	O
{	O
int	O
r	int
,	O
amtread	int
;	O
Qbind	function
(	O
fd	int
,	O
addr	union
,	O
addrlen	int
)	O
;	O
if	O
(	O
!	O
adns__vbuf_ensure	function
(	O
&	O
vb2	struct
,	O
1000	int
)	O
)	O
Tnomem	function
(	O
)	O
;	O
fgets	function
(	O
vb2	struct
.	O
buf	pointer
,	O
vb2	struct
.	O
avail	int
,	O
Tinputfile	pointer
)	O
;	O
Pcheckinput	function
(	O
)	O
;	O
Tensurereportfile	function
(	O
)	O
;	O
fprintf	function
(	O
Treportfile	pointer
,	O
"%s"	pointer
,	O
vb2	struct
.	O
buf	pointer
)	O
;	O
amtread	int
=	O
strlen	function
(	O
vb2	struct
.	O
buf	pointer
)	O
;	O
if	O
(	O
amtread	int
<=	O
0	int
||	O
vb2	struct
.	O
buf	pointer
[	O
--	O
amtread	int
]	O
!=	O
'\n'	O
)	O
Psyntax	function
(	O
"badly formed line"	pointer
)	O
;	O
vb2	struct
.	O
buf	pointer
[	O
amtread	int
]	O
=	O
0	int
;	O
if	O
(	O
memcmp	function
(	O
vb2	struct
.	O
buf	pointer
,	O
" bind="	pointer
,	O
6	int
)	O
)	O
Psyntax	function
(	O
"syscall reply mismatch"	pointer
)	O
;	O
if	O
(	O
vb2	struct
.	O
buf	pointer
[	O
6	int
]	O
==	O
'E'	O
)	O
{	O
int	O
e	int
;	O
e	int
=	O
Perrno	function
(	O
vb2	struct
.	O
buf	pointer
+	O
6	int
)	O
;	O
P_updatetime	function
(	O
)	O
;	O
errno	O
=	O
e	int
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
memcmp	function
(	O
vb2	struct
.	O
buf	pointer
+	O
6	int
,	O
"OK"	pointer
,	O
2	int
)	O
)	O
Psyntax	function
(	O
"success/fail not E* or OK"	pointer
)	O
;	O
vb2	struct
.	O
used	int
=	O
6	int
+	O
2	int
;	O
r	int
=	O
0	int
;	O
assert	O
(	O
vb2	struct
.	O
used	int
<=	O
amtread	int
)	O
;	O
if	O
(	O
vb2	struct
.	O
used	int
!=	O
amtread	int
)	O
Psyntax	function
(	O
"junk at end of line"	pointer
)	O
;	O
P_updatetime	function
(	O
)	O
;	O
return	O
r	int
;	O
}	O
int	O
Hlisten	function
(	O
int	O
fd	int
,	O
int	O
backlog	int
)	O
{	O
int	O
r	int
,	O
amtread	int
;	O
Qlisten	function
(	O
fd	int
,	O
backlog	int
)	O
;	O
if	O
(	O
!	O
adns__vbuf_ensure	function
(	O
&	O
vb2	struct
,	O
1000	int
)	O
)	O
Tnomem	function
(	O
)	O
;	O
fgets	function
(	O
vb2	struct
.	O
buf	pointer
,	O
vb2	struct
.	O
avail	int
,	O
Tinputfile	pointer
)	O
;	O
Pcheckinput	function
(	O
)	O
;	O
Tensurereportfile	function
(	O
)	O
;	O
fprintf	function
(	O
Treportfile	pointer
,	O
"%s"	pointer
,	O
vb2	struct
.	O
buf	pointer
)	O
;	O
amtread	int
=	O
strlen	function
(	O
vb2	struct
.	O
buf	pointer
)	O
;	O
if	O
(	O
amtread	int
<=	O
0	int
||	O
vb2	struct
.	O
buf	pointer
[	O
--	O
amtread	int
]	O
!=	O
'\n'	O
)	O
Psyntax	function
(	O
"badly formed line"	pointer
)	O
;	O
vb2	struct
.	O
buf	pointer
[	O
amtread	int
]	O
=	O
0	int
;	O
if	O
(	O
memcmp	function
(	O
vb2	struct
.	O
buf	pointer
,	O
" listen="	pointer
,	O
8	int
)	O
)	O
Psyntax	function
(	O
"syscall reply mismatch"	pointer
)	O
;	O
if	O
(	O
vb2	struct
.	O
buf	pointer
[	O
8	int
]	O
==	O
'E'	O
)	O
{	O
int	O
e	int
;	O
e	int
=	O
Perrno	function
(	O
vb2	struct
.	O
buf	pointer
+	O
8	int
)	O
;	O
P_updatetime	function
(	O
)	O
;	O
errno	O
=	O
e	int
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
memcmp	function
(	O
vb2	struct
.	O
buf	pointer
+	O
8	int
,	O
"OK"	pointer
,	O
2	int
)	O
)	O
Psyntax	function
(	O
"success/fail not E* or OK"	pointer
)	O
;	O
vb2	struct
.	O
used	int
=	O
8	int
+	O
2	int
;	O
r	int
=	O
0	int
;	O
assert	O
(	O
vb2	struct
.	O
used	int
<=	O
amtread	int
)	O
;	O
if	O
(	O
vb2	struct
.	O
used	int
!=	O
amtread	int
)	O
Psyntax	function
(	O
"junk at end of line"	pointer
)	O
;	O
P_updatetime	function
(	O
)	O
;	O
return	O
r	int
;	O
}	O
int	O
Hclose	function
(	O
int	O
fd	int
)	O
{	O
int	O
r	int
,	O
amtread	int
;	O
Qclose	function
(	O
fd	int
)	O
;	O
if	O
(	O
!	O
adns__vbuf_ensure	function
(	O
&	O
vb2	struct
,	O
1000	int
)	O
)	O
Tnomem	function
(	O
)	O
;	O
fgets	function
(	O
vb2	struct
.	O
buf	pointer
,	O
vb2	struct
.	O
avail	int
,	O
Tinputfile	pointer
)	O
;	O
Pcheckinput	function
(	O
)	O
;	O
Tensurereportfile	function
(	O
)	O
;	O
fprintf	function
(	O
Treportfile	pointer
,	O
"%s"	pointer
,	O
vb2	struct
.	O
buf	pointer
)	O
;	O
amtread	int
=	O
strlen	function
(	O
vb2	struct
.	O
buf	pointer
)	O
;	O
if	O
(	O
amtread	int
<=	O
0	int
||	O
vb2	struct
.	O
buf	pointer
[	O
--	O
amtread	int
]	O
!=	O
'\n'	O
)	O
Psyntax	function
(	O
"badly formed line"	pointer
)	O
;	O
vb2	struct
.	O
buf	pointer
[	O
amtread	int
]	O
=	O
0	int
;	O
if	O
(	O
memcmp	function
(	O
vb2	struct
.	O
buf	pointer
,	O
" close="	pointer
,	O
7	int
)	O
)	O
Psyntax	function
(	O
"syscall reply mismatch"	pointer
)	O
;	O
if	O
(	O
vb2	struct
.	O
buf	pointer
[	O
7	int
]	O
==	O
'E'	O
)	O
{	O
int	O
e	int
;	O
e	int
=	O
Perrno	function
(	O
vb2	struct
.	O
buf	pointer
+	O
7	int
)	O
;	O
P_updatetime	function
(	O
)	O
;	O
errno	O
=	O
e	int
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
memcmp	function
(	O
vb2	struct
.	O
buf	pointer
+	O
7	int
,	O
"OK"	pointer
,	O
2	int
)	O
)	O
Psyntax	function
(	O
"success/fail not E* or OK"	pointer
)	O
;	O
vb2	struct
.	O
used	int
=	O
7	int
+	O
2	int
;	O
r	int
=	O
0	int
;	O
assert	O
(	O
vb2	struct
.	O
used	int
<=	O
amtread	int
)	O
;	O
if	O
(	O
vb2	struct
.	O
used	int
!=	O
amtread	int
)	O
Psyntax	function
(	O
"junk at end of line"	pointer
)	O
;	O
P_updatetime	function
(	O
)	O
;	O
return	O
r	int
;	O
}	O
int	O
Hsendto	function
(	O
int	O
fd	int
,	O
const	O
void	O
*	O
msg	pointer
,	O
int	O
msglen	int
,	O
unsigned	O
int	O
flags	enum
,	O
const	O
struct	O
sockaddr	struct
*	O
addr	union
,	O
int	O
addrlen	int
)	O
{	O
int	O
r	int
,	O
amtread	int
;	O
char	O
*	O
ep	pointer
;	O
Tmust	function
(	O
"sendto"	pointer
,	O
"flags"	pointer
,	O
flags	enum
==	O
0	int
)	O
;	O
Qsendto	function
(	O
fd	int
,	O
msg	pointer
,	O
msglen	int
,	O
addr	union
,	O
addrlen	int
)	O
;	O
if	O
(	O
!	O
adns__vbuf_ensure	function
(	O
&	O
vb2	struct
,	O
1000	int
)	O
)	O
Tnomem	function
(	O
)	O
;	O
fgets	function
(	O
vb2	struct
.	O
buf	pointer
,	O
vb2	struct
.	O
avail	int
,	O
Tinputfile	pointer
)	O
;	O
Pcheckinput	function
(	O
)	O
;	O
Tensurereportfile	function
(	O
)	O
;	O
fprintf	function
(	O
Treportfile	pointer
,	O
"%s"	pointer
,	O
vb2	struct
.	O
buf	pointer
)	O
;	O
amtread	int
=	O
strlen	function
(	O
vb2	struct
.	O
buf	pointer
)	O
;	O
if	O
(	O
amtread	int
<=	O
0	int
||	O
vb2	struct
.	O
buf	pointer
[	O
--	O
amtread	int
]	O
!=	O
'\n'	O
)	O
Psyntax	function
(	O
"badly formed line"	pointer
)	O
;	O
vb2	struct
.	O
buf	pointer
[	O
amtread	int
]	O
=	O
0	int
;	O
if	O
(	O
memcmp	function
(	O
vb2	struct
.	O
buf	pointer
,	O
" sendto="	pointer
,	O
8	int
)	O
)	O
Psyntax	function
(	O
"syscall reply mismatch"	pointer
)	O
;	O
if	O
(	O
vb2	struct
.	O
buf	pointer
[	O
8	int
]	O
==	O
'E'	O
)	O
{	O
int	O
e	int
;	O
e	int
=	O
Perrno	function
(	O
vb2	struct
.	O
buf	pointer
+	O
8	int
)	O
;	O
P_updatetime	function
(	O
)	O
;	O
errno	O
=	O
e	int
;	O
return	O
-	O
1	int
;	O
}	O
r	int
=	O
strtoul	function
(	O
vb2	struct
.	O
buf	pointer
+	O
8	int
,	O
&	O
ep	pointer
,	O
10	int
)	O
;	O
if	O
(	O
*	O
ep	pointer
&&	O
*	O
ep	pointer
!=	O
' '	O
)	O
Psyntax	function
(	O
"return value not E* or positive number"	pointer
)	O
;	O
vb2	struct
.	O
used	int
=	O
ep	pointer
-	O
(	O
char	O
*	O
)	O
vb2	struct
.	O
buf	pointer
;	O
assert	O
(	O
vb2	struct
.	O
used	int
<=	O
amtread	int
)	O
;	O
if	O
(	O
vb2	struct
.	O
used	int
!=	O
amtread	int
)	O
Psyntax	function
(	O
"junk at end of line"	pointer
)	O
;	O
P_updatetime	function
(	O
)	O
;	O
return	O
r	int
;	O
}	O
int	O
Hrecvfrom	function
(	O
int	O
fd	int
,	O
void	O
*	O
buf	pointer
,	O
int	O
buflen	int
,	O
unsigned	O
int	O
flags	enum
,	O
struct	O
sockaddr	struct
*	O
addr	union
,	O
int	O
*	O
addrlen	int
)	O
{	O
int	O
r	int
,	O
amtread	int
;	O
Tmust	function
(	O
"recvfrom"	pointer
,	O
"flags"	pointer
,	O
flags	enum
==	O
0	int
)	O
;	O
Tmust	function
(	O
"recvfrom"	pointer
,	O
"*addrlen"	pointer
,	O
*	O
addrlen	int
>=	O
sizeof	O
(	O
struct	O
sockaddr_in	struct
)	O
)	O
;	O
Qrecvfrom	function
(	O
fd	int
,	O
buflen	int
,	O
*	O
addrlen	int
)	O
;	O
if	O
(	O
!	O
adns__vbuf_ensure	function
(	O
&	O
vb2	struct
,	O
1000	int
)	O
)	O
Tnomem	function
(	O
)	O
;	O
fgets	function
(	O
vb2	struct
.	O
buf	pointer
,	O
vb2	struct
.	O
avail	int
,	O
Tinputfile	pointer
)	O
;	O
Pcheckinput	function
(	O
)	O
;	O
Tensurereportfile	function
(	O
)	O
;	O
fprintf	function
(	O
Treportfile	pointer
,	O
"%s"	pointer
,	O
vb2	struct
.	O
buf	pointer
)	O
;	O
amtread	int
=	O
strlen	function
(	O
vb2	struct
.	O
buf	pointer
)	O
;	O
if	O
(	O
amtread	int
<=	O
0	int
||	O
vb2	struct
.	O
buf	pointer
[	O
--	O
amtread	int
]	O
!=	O
'\n'	O
)	O
Psyntax	function
(	O
"badly formed line"	pointer
)	O
;	O
vb2	struct
.	O
buf	pointer
[	O
amtread	int
]	O
=	O
0	int
;	O
if	O
(	O
memcmp	function
(	O
vb2	struct
.	O
buf	pointer
,	O
" recvfrom="	pointer
,	O
10	int
)	O
)	O
Psyntax	function
(	O
"syscall reply mismatch"	pointer
)	O
;	O
if	O
(	O
vb2	struct
.	O
buf	pointer
[	O
10	int
]	O
==	O
'E'	O
)	O
{	O
int	O
e	int
;	O
e	int
=	O
Perrno	function
(	O
vb2	struct
.	O
buf	pointer
+	O
10	int
)	O
;	O
P_updatetime	function
(	O
)	O
;	O
errno	O
=	O
e	int
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
memcmp	function
(	O
vb2	struct
.	O
buf	pointer
+	O
10	int
,	O
"OK"	pointer
,	O
2	int
)	O
)	O
Psyntax	function
(	O
"success/fail not E* or OK"	pointer
)	O
;	O
vb2	struct
.	O
used	int
=	O
10	int
+	O
2	int
;	O
r	int
=	O
0	int
;	O
Parg	function
(	O
"addr"	pointer
)	O
;	O
Paddr	function
(	O
addr	union
,	O
addrlen	int
)	O
;	O
assert	O
(	O
vb2	struct
.	O
used	int
<=	O
amtread	int
)	O
;	O
if	O
(	O
vb2	struct
.	O
used	int
!=	O
amtread	int
)	O
Psyntax	function
(	O
"junk at end of line"	pointer
)	O
;	O
r	int
=	O
Pbytes	function
(	O
buf	pointer
,	O
buflen	int
)	O
;	O
P_updatetime	function
(	O
)	O
;	O
return	O
r	int
;	O
}	O
int	O
Hread	function
(	O
int	O
fd	int
,	O
void	O
*	O
buf	pointer
,	O
size_t	long
buflen	int
)	O
{	O
int	O
r	int
,	O
amtread	int
;	O
Qread	function
(	O
fd	int
,	O
buflen	int
)	O
;	O
if	O
(	O
!	O
adns__vbuf_ensure	function
(	O
&	O
vb2	struct
,	O
1000	int
)	O
)	O
Tnomem	function
(	O
)	O
;	O
fgets	function
(	O
vb2	struct
.	O
buf	pointer
,	O
vb2	struct
.	O
avail	int
,	O
Tinputfile	pointer
)	O
;	O
Pcheckinput	function
(	O
)	O
;	O
Tensurereportfile	function
(	O
)	O
;	O
fprintf	function
(	O
Treportfile	pointer
,	O
"%s"	pointer
,	O
vb2	struct
.	O
buf	pointer
)	O
;	O
amtread	int
=	O
strlen	function
(	O
vb2	struct
.	O
buf	pointer
)	O
;	O
if	O
(	O
amtread	int
<=	O
0	int
||	O
vb2	struct
.	O
buf	pointer
[	O
--	O
amtread	int
]	O
!=	O
'\n'	O
)	O
Psyntax	function
(	O
"badly formed line"	pointer
)	O
;	O
vb2	struct
.	O
buf	pointer
[	O
amtread	int
]	O
=	O
0	int
;	O
if	O
(	O
memcmp	function
(	O
vb2	struct
.	O
buf	pointer
,	O
" read="	pointer
,	O
6	int
)	O
)	O
Psyntax	function
(	O
"syscall reply mismatch"	pointer
)	O
;	O
if	O
(	O
vb2	struct
.	O
buf	pointer
[	O
6	int
]	O
==	O
'E'	O
)	O
{	O
int	O
e	int
;	O
e	int
=	O
Perrno	function
(	O
vb2	struct
.	O
buf	pointer
+	O
6	int
)	O
;	O
P_updatetime	function
(	O
)	O
;	O
errno	O
=	O
e	int
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
memcmp	function
(	O
vb2	struct
.	O
buf	pointer
+	O
6	int
,	O
"OK"	pointer
,	O
2	int
)	O
)	O
Psyntax	function
(	O
"success/fail not E* or OK"	pointer
)	O
;	O
vb2	struct
.	O
used	int
=	O
6	int
+	O
2	int
;	O
r	int
=	O
0	int
;	O
assert	O
(	O
vb2	struct
.	O
used	int
<=	O
amtread	int
)	O
;	O
if	O
(	O
vb2	struct
.	O
used	int
!=	O
amtread	int
)	O
Psyntax	function
(	O
"junk at end of line"	pointer
)	O
;	O
r	int
=	O
Pbytes	function
(	O
buf	pointer
,	O
buflen	int
)	O
;	O
P_updatetime	function
(	O
)	O
;	O
return	O
r	int
;	O
}	O
int	O
Hwrite	function
(	O
int	O
fd	int
,	O
const	O
void	O
*	O
buf	pointer
,	O
size_t	long
len	int
)	O
{	O
int	O
r	int
,	O
amtread	int
;	O
char	O
*	O
ep	pointer
;	O
Qwrite	function
(	O
fd	int
,	O
buf	pointer
,	O
len	int
)	O
;	O
if	O
(	O
!	O
adns__vbuf_ensure	function
(	O
&	O
vb2	struct
,	O
1000	int
)	O
)	O
Tnomem	function
(	O
)	O
;	O
fgets	function
(	O
vb2	struct
.	O
buf	pointer
,	O
vb2	struct
.	O
avail	int
,	O
Tinputfile	pointer
)	O
;	O
Pcheckinput	function
(	O
)	O
;	O
Tensurereportfile	function
(	O
)	O
;	O
fprintf	function
(	O
Treportfile	pointer
,	O
"%s"	pointer
,	O
vb2	struct
.	O
buf	pointer
)	O
;	O
amtread	int
=	O
strlen	function
(	O
vb2	struct
.	O
buf	pointer
)	O
;	O
if	O
(	O
amtread	int
<=	O
0	int
||	O
vb2	struct
.	O
buf	pointer
[	O
--	O
amtread	int
]	O
!=	O
'\n'	O
)	O
Psyntax	function
(	O
"badly formed line"	pointer
)	O
;	O
vb2	struct
.	O
buf	pointer
[	O
amtread	int
]	O
=	O
0	int
;	O
if	O
(	O
memcmp	function
(	O
vb2	struct
.	O
buf	pointer
,	O
" write="	pointer
,	O
7	int
)	O
)	O
Psyntax	function
(	O
"syscall reply mismatch"	pointer
)	O
;	O
if	O
(	O
vb2	struct
.	O
buf	pointer
[	O
7	int
]	O
==	O
'E'	O
)	O
{	O
int	O
e	int
;	O
e	int
=	O
Perrno	function
(	O
vb2	struct
.	O
buf	pointer
+	O
7	int
)	O
;	O
P_updatetime	function
(	O
)	O
;	O
errno	O
=	O
e	int
;	O
return	O
-	O
1	int
;	O
}	O
r	int
=	O
strtoul	function
(	O
vb2	struct
.	O
buf	pointer
+	O
7	int
,	O
&	O
ep	pointer
,	O
10	int
)	O
;	O
if	O
(	O
*	O
ep	pointer
&&	O
*	O
ep	pointer
!=	O
' '	O
)	O
Psyntax	function
(	O
"return value not E* or positive number"	pointer
)	O
;	O
vb2	struct
.	O
used	int
=	O
ep	pointer
-	O
(	O
char	O
*	O
)	O
vb2	struct
.	O
buf	pointer
;	O
assert	O
(	O
vb2	struct
.	O
used	int
<=	O
amtread	int
)	O
;	O
if	O
(	O
vb2	struct
.	O
used	int
!=	O
amtread	int
)	O
Psyntax	function
(	O
"junk at end of line"	pointer
)	O
;	O
P_updatetime	function
(	O
)	O
;	O
return	O
r	int
;	O
}	O
