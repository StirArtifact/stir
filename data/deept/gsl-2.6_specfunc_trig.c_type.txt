inline	O
static	O
int	O
sinh_series	function
(	O
const	O
double	O
x	double
,	O
double	O
*	O
result	pointer
)	O
{	O
const	O
double	O
y	double
=	O
x	double
*	O
x	double
;	O
const	O
double	O
c0	double
=	O
1.0	int
/	O
6.0	int
;	O
const	O
double	O
c1	double
=	O
1.0	int
/	O
120.0	int
;	O
const	O
double	O
c2	double
=	O
1.0	int
/	O
5040.0	int
;	O
const	O
double	O
c3	double
=	O
1.0	int
/	O
362880.0	int
;	O
const	O
double	O
c4	double
=	O
1.0	int
/	O
39916800.0	int
;	O
const	O
double	O
c5	double
=	O
1.0	int
/	O
6227020800.0	int
;	O
const	O
double	O
c6	double
=	O
1.0	int
/	O
1307674368000.0	int
;	O
const	O
double	O
c7	double
=	O
1.0	int
/	O
355687428096000.0	int
;	O
*	O
result	pointer
=	O
x	double
*	O
(	O
1.0	int
+	O
y	double
*	O
(	O
c0	double
+	O
y	double
*	O
(	O
c1	double
+	O
y	double
*	O
(	O
c2	double
+	O
y	double
*	O
(	O
c3	double
+	O
y	double
*	O
(	O
c4	double
+	O
y	double
*	O
(	O
c5	double
+	O
y	double
*	O
(	O
c6	double
+	O
y	double
*	O
c7	double
)	O
)	O
)	O
)	O
)	O
)	O
)	O
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
inline	O
static	O
int	O
cosh_m1_series	function
(	O
const	O
double	O
x	double
,	O
double	O
*	O
result	pointer
)	O
{	O
const	O
double	O
y	double
=	O
x	double
*	O
x	double
;	O
const	O
double	O
c0	double
=	O
0.5	int
;	O
const	O
double	O
c1	double
=	O
1.0	int
/	O
24.0	int
;	O
const	O
double	O
c2	double
=	O
1.0	int
/	O
720.0	int
;	O
const	O
double	O
c3	double
=	O
1.0	int
/	O
40320.0	int
;	O
const	O
double	O
c4	double
=	O
1.0	int
/	O
3628800.0	int
;	O
const	O
double	O
c5	double
=	O
1.0	int
/	O
479001600.0	int
;	O
const	O
double	O
c6	double
=	O
1.0	int
/	O
87178291200.0	int
;	O
const	O
double	O
c7	double
=	O
1.0	int
/	O
20922789888000.0	int
;	O
const	O
double	O
c8	double
=	O
1.0	int
/	O
6402373705728000.0	int
;	O
*	O
result	pointer
=	O
y	double
*	O
(	O
c0	double
+	O
y	double
*	O
(	O
c1	double
+	O
y	double
*	O
(	O
c2	double
+	O
y	double
*	O
(	O
c3	double
+	O
y	double
*	O
(	O
c4	double
+	O
y	double
*	O
(	O
c5	double
+	O
y	double
*	O
(	O
c6	double
+	O
y	double
*	O
(	O
c7	double
+	O
y	double
*	O
c8	double
)	O
)	O
)	O
)	O
)	O
)	O
)	O
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
double	O
sinc_data	array
[	O
17	int
]	O
=	O
{	O
1.133648177811747875422	int
,	O
-	O
0.532677564732557348781	int
,	O
-	O
0.068293048346633177859	int
,	O
0.033403684226353715020	int
,	O
0.001485679893925747818	int
,	O
-	O
0.000734421305768455295	int
,	O
-	O
0.000016837282388837229	int
,	O
0.000008359950146618018	int
,	O
0.000000117382095601192	int
,	O
-	O
0.000000058413665922724	int
,	O
-	O
0.000000000554763755743	int
,	O
0.000000000276434190426	int
,	O
0.000000000001895374892	int
,	O
-	O
0.000000000000945237101	int
,	O
-	O
0.000000000000004900690	int
,	O
0.000000000000002445383	int
,	O
0.000000000000000009925	int
}	O
;	O
static	O
cheb_series	struct
sinc_cs	struct
=	O
{	O
sinc_data	array
,	O
16	int
,	O
-	O
1	int
,	O
1	int
,	O
10	int
}	O
;	O
static	O
double	O
sin_data	array
[	O
12	int
]	O
=	O
{	O
-	O
0.3295190160663511504173	int
,	O
0.0025374284671667991990	int
,	O
0.0006261928782647355874	int
,	O
-	O
4.6495547521854042157541e-06	int
,	O
-	O
5.6917531549379706526677e-07	int
,	O
3.7283335140973803627866e-09	int
,	O
3.0267376484747473727186e-10	int
,	O
-	O
1.7400875016436622322022e-12	int
,	O
-	O
1.0554678305790849834462e-13	int
,	O
5.3701981409132410797062e-16	int
,	O
2.5984137983099020336115e-17	int
,	O
-	O
1.1821555255364833468288e-19	int
}	O
;	O
static	O
cheb_series	struct
sin_cs	struct
=	O
{	O
sin_data	array
,	O
11	int
,	O
-	O
1	int
,	O
1	int
,	O
11	int
}	O
;	O
static	O
double	O
cos_data	array
[	O
11	int
]	O
=	O
{	O
0.165391825637921473505668118136	int
,	O
-	O
0.00084852883845000173671196530195	int
,	O
-	O
0.000210086507222940730213625768083	int
,	O
1.16582269619760204299639757584e-6	int
,	O
1.43319375856259870334412701165e-7	int
,	O
-	O
7.4770883429007141617951330184e-10	int
,	O
-	O
6.0969994944584252706997438007e-11	int
,	O
2.90748249201909353949854872638e-13	int
,	O
1.77126739876261435667156490461e-14	int
,	O
-	O
7.6896421502815579078577263149e-17	int
,	O
-	O
3.7363121133079412079201377318e-18	int
}	O
;	O
static	O
cheb_series	struct
cos_cs	struct
=	O
{	O
cos_data	array
,	O
10	int
,	O
-	O
1	int
,	O
1	int
,	O
10	int
}	O
;	O
int	O
gsl_sf_sin_e	function
(	O
double	O
x	double
,	O
gsl_sf_result	struct
*	O
result	pointer
)	O
{	O
{	O
const	O
double	O
P1	double
=	O
7.85398125648498535156e-1	int
;	O
const	O
double	O
P2	double
=	O
3.77489470793079817668e-8	int
;	O
const	O
double	O
P3	double
=	O
2.69515142907905952645e-15	int
;	O
const	O
double	O
sgn_x	double
=	O
GSL_SIGN	O
(	O
x	double
)	O
;	O
const	O
double	O
abs_x	double
=	O
fabs	function
(	O
x	double
)	O
;	O
if	O
(	O
abs_x	double
<	O
GSL_ROOT4_DBL_EPSILON	int
)	O
{	O
const	O
double	O
x2	double
=	O
x	double
*	O
x	double
;	O
result	pointer
->	O
val	double
=	O
x	double
*	O
(	O
1.0	int
-	O
x2	double
/	O
6.0	int
)	O
;	O
result	pointer
->	O
err	double
=	O
fabs	function
(	O
x	double
*	O
x2	double
*	O
x2	double
/	O
100.0	int
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
double	O
sgn_result	double
=	O
sgn_x	double
;	O
double	O
y	double
=	O
floor	function
(	O
abs_x	double
/	O
(	O
0.25	int
*	O
M_PI	int
)	O
)	O
;	O
int	O
octant	int
=	O
y	double
-	O
ldexp	function
(	O
floor	function
(	O
ldexp	function
(	O
y	double
,	O
-	O
3	int
)	O
)	O
,	O
3	int
)	O
;	O
int	O
stat_cs	int
;	O
double	O
z	double
;	O
if	O
(	O
GSL_IS_ODD	O
(	O
octant	int
)	O
)	O
{	O
octant	int
+=	O
1	int
;	O
octant	int
&=	O
07	int
;	O
y	double
+=	O
1.0	int
;	O
}	O
if	O
(	O
octant	int
>	O
3	int
)	O
{	O
octant	int
-=	O
4	int
;	O
sgn_result	double
=	O
-	O
sgn_result	double
;	O
}	O
z	double
=	O
(	O
(	O
abs_x	double
-	O
y	double
*	O
P1	double
)	O
-	O
y	double
*	O
P2	double
)	O
-	O
y	double
*	O
P3	double
;	O
if	O
(	O
octant	int
==	O
0	int
)	O
{	O
gsl_sf_result	struct
sin_cs_result	struct
;	O
const	O
double	O
t	double
=	O
8.0	int
*	O
fabs	function
(	O
z	double
)	O
/	O
M_PI	int
-	O
1.0	int
;	O
stat_cs	int
=	O
cheb_eval_e	function
(	O
&	O
sin_cs	struct
,	O
t	double
,	O
&	O
sin_cs_result	struct
)	O
;	O
result	pointer
->	O
val	double
=	O
z	double
*	O
(	O
1.0	int
+	O
z	double
*	O
z	double
*	O
sin_cs_result	struct
.	O
val	double
)	O
;	O
}	O
else	O
{	O
gsl_sf_result	struct
cos_cs_result	struct
;	O
const	O
double	O
t	double
=	O
8.0	int
*	O
fabs	function
(	O
z	double
)	O
/	O
M_PI	int
-	O
1.0	int
;	O
stat_cs	int
=	O
cheb_eval_e	function
(	O
&	O
cos_cs	struct
,	O
t	double
,	O
&	O
cos_cs_result	struct
)	O
;	O
result	pointer
->	O
val	double
=	O
1.0	int
-	O
0.5	int
*	O
z	double
*	O
z	double
*	O
(	O
1.0	int
-	O
z	double
*	O
z	double
*	O
cos_cs_result	struct
.	O
val	double
)	O
;	O
}	O
result	pointer
->	O
val	double
*=	O
sgn_result	double
;	O
if	O
(	O
abs_x	double
>	O
1.0	int
/	O
GSL_DBL_EPSILON	int
)	O
{	O
result	pointer
->	O
err	double
=	O
fabs	function
(	O
result	pointer
->	O
val	double
)	O
;	O
}	O
else	O
if	O
(	O
abs_x	double
>	O
100.0	int
/	O
GSL_SQRT_DBL_EPSILON	int
)	O
{	O
result	pointer
->	O
err	double
=	O
2.0	int
*	O
abs_x	double
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
result	pointer
->	O
val	double
)	O
;	O
}	O
else	O
if	O
(	O
abs_x	double
>	O
0.1	int
/	O
GSL_SQRT_DBL_EPSILON	int
)	O
{	O
result	pointer
->	O
err	double
=	O
2.0	int
*	O
GSL_SQRT_DBL_EPSILON	int
*	O
fabs	function
(	O
result	pointer
->	O
val	double
)	O
;	O
}	O
else	O
{	O
result	pointer
->	O
err	double
=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
result	pointer
->	O
val	double
)	O
;	O
}	O
return	O
stat_cs	int
;	O
}	O
}	O
}	O
int	O
gsl_sf_cos_e	function
(	O
double	O
x	double
,	O
gsl_sf_result	struct
*	O
result	pointer
)	O
{	O
{	O
const	O
double	O
P1	double
=	O
7.85398125648498535156e-1	int
;	O
const	O
double	O
P2	double
=	O
3.77489470793079817668e-8	int
;	O
const	O
double	O
P3	double
=	O
2.69515142907905952645e-15	int
;	O
const	O
double	O
abs_x	double
=	O
fabs	function
(	O
x	double
)	O
;	O
if	O
(	O
abs_x	double
<	O
GSL_ROOT4_DBL_EPSILON	int
)	O
{	O
const	O
double	O
x2	double
=	O
x	double
*	O
x	double
;	O
result	pointer
->	O
val	double
=	O
1.0	int
-	O
0.5	int
*	O
x2	double
;	O
result	pointer
->	O
err	double
=	O
fabs	function
(	O
x2	double
*	O
x2	double
/	O
12.0	int
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
double	O
sgn_result	double
=	O
1.0	int
;	O
double	O
y	double
=	O
floor	function
(	O
abs_x	double
/	O
(	O
0.25	int
*	O
M_PI	int
)	O
)	O
;	O
int	O
octant	int
=	O
y	double
-	O
ldexp	function
(	O
floor	function
(	O
ldexp	function
(	O
y	double
,	O
-	O
3	int
)	O
)	O
,	O
3	int
)	O
;	O
int	O
stat_cs	int
;	O
double	O
z	double
;	O
if	O
(	O
GSL_IS_ODD	O
(	O
octant	int
)	O
)	O
{	O
octant	int
+=	O
1	int
;	O
octant	int
&=	O
07	int
;	O
y	double
+=	O
1.0	int
;	O
}	O
if	O
(	O
octant	int
>	O
3	int
)	O
{	O
octant	int
-=	O
4	int
;	O
sgn_result	double
=	O
-	O
sgn_result	double
;	O
}	O
if	O
(	O
octant	int
>	O
1	int
)	O
{	O
sgn_result	double
=	O
-	O
sgn_result	double
;	O
}	O
z	double
=	O
(	O
(	O
abs_x	double
-	O
y	double
*	O
P1	double
)	O
-	O
y	double
*	O
P2	double
)	O
-	O
y	double
*	O
P3	double
;	O
if	O
(	O
octant	int
==	O
0	int
)	O
{	O
gsl_sf_result	struct
cos_cs_result	struct
;	O
const	O
double	O
t	double
=	O
8.0	int
*	O
fabs	function
(	O
z	double
)	O
/	O
M_PI	int
-	O
1.0	int
;	O
stat_cs	int
=	O
cheb_eval_e	function
(	O
&	O
cos_cs	struct
,	O
t	double
,	O
&	O
cos_cs_result	struct
)	O
;	O
result	pointer
->	O
val	double
=	O
1.0	int
-	O
0.5	int
*	O
z	double
*	O
z	double
*	O
(	O
1.0	int
-	O
z	double
*	O
z	double
*	O
cos_cs_result	struct
.	O
val	double
)	O
;	O
}	O
else	O
{	O
gsl_sf_result	struct
sin_cs_result	struct
;	O
const	O
double	O
t	double
=	O
8.0	int
*	O
fabs	function
(	O
z	double
)	O
/	O
M_PI	int
-	O
1.0	int
;	O
stat_cs	int
=	O
cheb_eval_e	function
(	O
&	O
sin_cs	struct
,	O
t	double
,	O
&	O
sin_cs_result	struct
)	O
;	O
result	pointer
->	O
val	double
=	O
z	double
*	O
(	O
1.0	int
+	O
z	double
*	O
z	double
*	O
sin_cs_result	struct
.	O
val	double
)	O
;	O
}	O
result	pointer
->	O
val	double
*=	O
sgn_result	double
;	O
if	O
(	O
abs_x	double
>	O
1.0	int
/	O
GSL_DBL_EPSILON	int
)	O
{	O
result	pointer
->	O
err	double
=	O
fabs	function
(	O
result	pointer
->	O
val	double
)	O
;	O
}	O
else	O
if	O
(	O
abs_x	double
>	O
100.0	int
/	O
GSL_SQRT_DBL_EPSILON	int
)	O
{	O
result	pointer
->	O
err	double
=	O
2.0	int
*	O
abs_x	double
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
result	pointer
->	O
val	double
)	O
;	O
}	O
else	O
if	O
(	O
abs_x	double
>	O
0.1	int
/	O
GSL_SQRT_DBL_EPSILON	int
)	O
{	O
result	pointer
->	O
err	double
=	O
2.0	int
*	O
GSL_SQRT_DBL_EPSILON	int
*	O
fabs	function
(	O
result	pointer
->	O
val	double
)	O
;	O
}	O
else	O
{	O
result	pointer
->	O
err	double
=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
result	pointer
->	O
val	double
)	O
;	O
}	O
return	O
stat_cs	int
;	O
}	O
}	O
}	O
int	O
gsl_sf_hypot_e	function
(	O
const	O
double	O
x	double
,	O
const	O
double	O
y	double
,	O
gsl_sf_result	struct
*	O
result	pointer
)	O
{	O
if	O
(	O
x	double
==	O
0.0	int
&&	O
y	double
==	O
0.0	int
)	O
{	O
result	pointer
->	O
val	double
=	O
0.0	int
;	O
result	pointer
->	O
err	double
=	O
0.0	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
const	O
double	O
a	double
=	O
fabs	function
(	O
x	double
)	O
;	O
const	O
double	O
b	double
=	O
fabs	function
(	O
y	double
)	O
;	O
const	O
double	O
min	double
=	O
GSL_MIN_DBL	function
(	O
a	double
,	O
b	double
)	O
;	O
const	O
double	O
max	double
=	O
GSL_MAX_DBL	function
(	O
a	double
,	O
b	double
)	O
;	O
const	O
double	O
rat	double
=	O
min	double
/	O
max	double
;	O
const	O
double	O
root_term	double
=	O
sqrt	function
(	O
1.0	int
+	O
rat	double
*	O
rat	double
)	O
;	O
if	O
(	O
max	double
<	O
GSL_DBL_MAX	int
/	O
root_term	double
)	O
{	O
result	pointer
->	O
val	double
=	O
max	double
*	O
root_term	double
;	O
result	pointer
->	O
err	double
=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
result	pointer
->	O
val	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
OVERFLOW_ERROR	O
(	O
result	pointer
)	O
;	O
}	O
}	O
}	O
int	O
gsl_sf_complex_sin_e	function
(	O
const	O
double	O
zr	double
,	O
const	O
double	O
zi	double
,	O
gsl_sf_result	struct
*	O
szr	pointer
,	O
gsl_sf_result	struct
*	O
szi	pointer
)	O
{	O
if	O
(	O
fabs	function
(	O
zi	double
)	O
<	O
1.0	int
)	O
{	O
double	O
ch_m1	double
,	O
sh	double
;	O
sinh_series	function
(	O
zi	double
,	O
&	O
sh	double
)	O
;	O
cosh_m1_series	function
(	O
zi	double
,	O
&	O
ch_m1	double
)	O
;	O
szr	pointer
->	O
val	double
=	O
sin	function
(	O
zr	double
)	O
*	O
(	O
ch_m1	double
+	O
1.0	int
)	O
;	O
szi	pointer
->	O
val	double
=	O
cos	function
(	O
zr	double
)	O
*	O
sh	double
;	O
szr	pointer
->	O
err	double
=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
szr	pointer
->	O
val	double
)	O
;	O
szi	pointer
->	O
err	double
=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
szi	pointer
->	O
val	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
if	O
(	O
fabs	function
(	O
zi	double
)	O
<	O
GSL_LOG_DBL_MAX	int
)	O
{	O
double	O
ex	double
=	O
exp	function
(	O
zi	double
)	O
;	O
double	O
ch	double
=	O
0.5	int
*	O
(	O
ex	double
+	O
1.0	int
/	O
ex	double
)	O
;	O
double	O
sh	double
=	O
0.5	int
*	O
(	O
ex	double
-	O
1.0	int
/	O
ex	double
)	O
;	O
szr	pointer
->	O
val	double
=	O
sin	function
(	O
zr	double
)	O
*	O
ch	double
;	O
szi	pointer
->	O
val	double
=	O
cos	function
(	O
zr	double
)	O
*	O
sh	double
;	O
szr	pointer
->	O
err	double
=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
szr	pointer
->	O
val	double
)	O
;	O
szi	pointer
->	O
err	double
=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
szi	pointer
->	O
val	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
OVERFLOW_ERROR_2	O
(	O
szr	pointer
,	O
szi	pointer
)	O
;	O
}	O
}	O
int	O
gsl_sf_complex_cos_e	function
(	O
const	O
double	O
zr	double
,	O
const	O
double	O
zi	double
,	O
gsl_sf_result	struct
*	O
czr	pointer
,	O
gsl_sf_result	struct
*	O
czi	pointer
)	O
{	O
if	O
(	O
fabs	function
(	O
zi	double
)	O
<	O
1.0	int
)	O
{	O
double	O
ch_m1	double
,	O
sh	double
;	O
sinh_series	function
(	O
zi	double
,	O
&	O
sh	double
)	O
;	O
cosh_m1_series	function
(	O
zi	double
,	O
&	O
ch_m1	double
)	O
;	O
czr	pointer
->	O
val	double
=	O
cos	function
(	O
zr	double
)	O
*	O
(	O
ch_m1	double
+	O
1.0	int
)	O
;	O
czi	pointer
->	O
val	double
=	O
-	O
sin	function
(	O
zr	double
)	O
*	O
sh	double
;	O
czr	pointer
->	O
err	double
=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
czr	pointer
->	O
val	double
)	O
;	O
czi	pointer
->	O
err	double
=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
czi	pointer
->	O
val	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
if	O
(	O
fabs	function
(	O
zi	double
)	O
<	O
GSL_LOG_DBL_MAX	int
)	O
{	O
double	O
ex	double
=	O
exp	function
(	O
zi	double
)	O
;	O
double	O
ch	double
=	O
0.5	int
*	O
(	O
ex	double
+	O
1.0	int
/	O
ex	double
)	O
;	O
double	O
sh	double
=	O
0.5	int
*	O
(	O
ex	double
-	O
1.0	int
/	O
ex	double
)	O
;	O
czr	pointer
->	O
val	double
=	O
cos	function
(	O
zr	double
)	O
*	O
ch	double
;	O
czi	pointer
->	O
val	double
=	O
-	O
sin	function
(	O
zr	double
)	O
*	O
sh	double
;	O
czr	pointer
->	O
err	double
=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
czr	pointer
->	O
val	double
)	O
;	O
czi	pointer
->	O
err	double
=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
czi	pointer
->	O
val	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
OVERFLOW_ERROR_2	O
(	O
czr	pointer
,	O
czi	pointer
)	O
;	O
}	O
}	O
int	O
gsl_sf_complex_logsin_e	function
(	O
const	O
double	O
zr	double
,	O
const	O
double	O
zi	double
,	O
gsl_sf_result	struct
*	O
lszr	pointer
,	O
gsl_sf_result	struct
*	O
lszi	pointer
)	O
{	O
if	O
(	O
zi	double
>	O
60.0	int
)	O
{	O
lszr	pointer
->	O
val	double
=	O
-	O
M_LN2	int
+	O
zi	double
;	O
lszi	pointer
->	O
val	double
=	O
0.5	int
*	O
M_PI	int
-	O
zr	double
;	O
lszr	pointer
->	O
err	double
=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
lszr	pointer
->	O
val	double
)	O
;	O
lszi	pointer
->	O
err	double
=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
lszi	pointer
->	O
val	double
)	O
;	O
}	O
else	O
if	O
(	O
zi	double
<	O
-	O
60.0	int
)	O
{	O
lszr	pointer
->	O
val	double
=	O
-	O
M_LN2	int
-	O
zi	double
;	O
lszi	pointer
->	O
val	double
=	O
-	O
0.5	int
*	O
M_PI	int
+	O
zr	double
;	O
lszr	pointer
->	O
err	double
=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
lszr	pointer
->	O
val	double
)	O
;	O
lszi	pointer
->	O
err	double
=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
lszi	pointer
->	O
val	double
)	O
;	O
}	O
else	O
{	O
gsl_sf_result	struct
sin_r	struct
,	O
sin_i	struct
;	O
int	O
status	int
;	O
gsl_sf_complex_sin_e	function
(	O
zr	double
,	O
zi	double
,	O
&	O
sin_r	struct
,	O
&	O
sin_i	struct
)	O
;	O
status	int
=	O
gsl_sf_complex_log_e	function
(	O
sin_r	struct
.	O
val	double
,	O
sin_i	struct
.	O
val	double
,	O
lszr	pointer
,	O
lszi	pointer
)	O
;	O
if	O
(	O
status	int
==	O
GSL_EDOM	int
)	O
{	O
DOMAIN_ERROR_2	O
(	O
lszr	pointer
,	O
lszi	pointer
)	O
;	O
}	O
}	O
return	O
gsl_sf_angle_restrict_symm_e	function
(	O
&	O
(	O
lszi	pointer
->	O
val	double
)	O
)	O
;	O
}	O
int	O
gsl_sf_lnsinh_e	function
(	O
const	O
double	O
x	double
,	O
gsl_sf_result	struct
*	O
result	pointer
)	O
{	O
if	O
(	O
x	double
<=	O
0.0	int
)	O
{	O
DOMAIN_ERROR	O
(	O
result	pointer
)	O
;	O
}	O
else	O
if	O
(	O
fabs	function
(	O
x	double
)	O
<	O
1.0	int
)	O
{	O
double	O
eps	double
;	O
sinh_series	function
(	O
x	double
,	O
&	O
eps	double
)	O
;	O
result	pointer
->	O
val	double
=	O
log	function
(	O
eps	double
)	O
;	O
result	pointer
->	O
err	double
=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
result	pointer
->	O
val	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
if	O
(	O
x	double
<	O
-	O
0.5	int
*	O
GSL_LOG_DBL_EPSILON	O
)	O
{	O
result	pointer
->	O
val	double
=	O
x	double
+	O
log	function
(	O
0.5	int
*	O
(	O
1.0	int
-	O
exp	function
(	O
-	O
2.0	int
*	O
x	double
)	O
)	O
)	O
;	O
result	pointer
->	O
err	double
=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
result	pointer
->	O
val	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
result	pointer
->	O
val	double
=	O
-	O
M_LN2	int
+	O
x	double
;	O
result	pointer
->	O
err	double
=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
result	pointer
->	O
val	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
int	O
gsl_sf_lncosh_e	function
(	O
const	O
double	O
x	double
,	O
gsl_sf_result	struct
*	O
result	pointer
)	O
{	O
if	O
(	O
fabs	function
(	O
x	double
)	O
<	O
1.0	int
)	O
{	O
double	O
eps	double
;	O
cosh_m1_series	function
(	O
x	double
,	O
&	O
eps	double
)	O
;	O
return	O
gsl_sf_log_1plusx_e	function
(	O
eps	double
,	O
result	pointer
)	O
;	O
}	O
else	O
if	O
(	O
fabs	function
(	O
x	double
)	O
<	O
-	O
0.5	int
*	O
GSL_LOG_DBL_EPSILON	O
)	O
{	O
result	pointer
->	O
val	double
=	O
fabs	function
(	O
x	double
)	O
+	O
log	function
(	O
0.5	int
*	O
(	O
1.0	int
+	O
exp	function
(	O
-	O
2.0	int
*	O
fabs	function
(	O
x	double
)	O
)	O
)	O
)	O
;	O
result	pointer
->	O
err	double
=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
result	pointer
->	O
val	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
result	pointer
->	O
val	double
=	O
-	O
M_LN2	int
+	O
fabs	function
(	O
x	double
)	O
;	O
result	pointer
->	O
err	double
=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
result	pointer
->	O
val	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
int	O
gsl_sf_polar_to_rect	function
(	O
const	O
double	O
r	pointer
,	O
const	O
double	O
theta	pointer
,	O
gsl_sf_result	struct
*	O
x	double
,	O
gsl_sf_result	struct
*	O
y	double
)	O
{	O
double	O
t	double
=	O
theta	pointer
;	O
int	O
status	int
=	O
gsl_sf_angle_restrict_symm_e	function
(	O
&	O
t	double
)	O
;	O
double	O
c	pointer
=	O
cos	function
(	O
t	double
)	O
;	O
double	O
s	double
=	O
sin	function
(	O
t	double
)	O
;	O
x	double
->	O
val	double
=	O
r	pointer
*	O
cos	function
(	O
t	double
)	O
;	O
y	double
->	O
val	double
=	O
r	pointer
*	O
sin	function
(	O
t	double
)	O
;	O
x	double
->	O
err	double
=	O
r	pointer
*	O
fabs	function
(	O
s	double
*	O
GSL_DBL_EPSILON	int
*	O
t	double
)	O
;	O
x	double
->	O
err	double
+=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
x	double
->	O
val	double
)	O
;	O
y	double
->	O
err	double
=	O
r	pointer
*	O
fabs	function
(	O
c	pointer
*	O
GSL_DBL_EPSILON	int
*	O
t	double
)	O
;	O
y	double
->	O
err	double
+=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
y	double
->	O
val	double
)	O
;	O
return	O
status	int
;	O
}	O
int	O
gsl_sf_rect_to_polar	function
(	O
const	O
double	O
x	double
,	O
const	O
double	O
y	double
,	O
gsl_sf_result	struct
*	O
r	pointer
,	O
gsl_sf_result	struct
*	O
theta	pointer
)	O
{	O
int	O
stat_h	int
=	O
gsl_sf_hypot_e	function
(	O
x	double
,	O
y	double
,	O
r	pointer
)	O
;	O
if	O
(	O
r	pointer
->	O
val	double
>	O
0.0	int
)	O
{	O
theta	pointer
->	O
val	double
=	O
atan2	function
(	O
y	double
,	O
x	double
)	O
;	O
theta	pointer
->	O
err	double
=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
theta	pointer
->	O
val	double
)	O
;	O
return	O
stat_h	int
;	O
}	O
else	O
{	O
DOMAIN_ERROR	O
(	O
theta	pointer
)	O
;	O
}	O
}	O
int	O
gsl_sf_angle_restrict_symm_err_e	function
(	O
const	O
double	O
theta	pointer
,	O
gsl_sf_result	struct
*	O
result	pointer
)	O
{	O
const	O
double	O
P1	double
=	O
4	int
*	O
7.8539812564849853515625e-01	int
;	O
const	O
double	O
P2	double
=	O
4	int
*	O
3.7748947079307981766760e-08	int
;	O
const	O
double	O
P3	double
=	O
4	int
*	O
2.6951514290790594840552e-15	int
;	O
const	O
double	O
TwoPi	double
=	O
2	int
*	O
(	O
P1	double
+	O
P2	double
+	O
P3	double
)	O
;	O
const	O
double	O
y	double
=	O
GSL_SIGN	O
(	O
theta	pointer
)	O
*	O
2	int
*	O
floor	function
(	O
fabs	function
(	O
theta	pointer
)	O
/	O
TwoPi	double
)	O
;	O
double	O
r	pointer
=	O
(	O
(	O
theta	pointer
-	O
y	double
*	O
P1	double
)	O
-	O
y	double
*	O
P2	double
)	O
-	O
y	double
*	O
P3	double
;	O
if	O
(	O
r	pointer
>	O
M_PI	int
)	O
{	O
r	pointer
=	O
(	O
(	O
(	O
r	pointer
-	O
2	int
*	O
P1	double
)	O
-	O
2	int
*	O
P2	double
)	O
-	O
2	int
*	O
P3	double
)	O
;	O
}	O
else	O
if	O
(	O
r	pointer
<	O
-	O
M_PI	int
)	O
r	pointer
=	O
(	O
(	O
(	O
r	pointer
+	O
2	int
*	O
P1	double
)	O
+	O
2	int
*	O
P2	double
)	O
+	O
2	int
*	O
P3	double
)	O
;	O
result	pointer
->	O
val	double
=	O
r	pointer
;	O
if	O
(	O
fabs	function
(	O
theta	pointer
)	O
>	O
0.0625	int
/	O
GSL_DBL_EPSILON	int
)	O
{	O
result	pointer
->	O
val	double
=	O
GSL_NAN	O
;	O
result	pointer
->	O
err	double
=	O
GSL_NAN	O
;	O
GSL_ERROR	O
(	O
"error"	pointer
,	O
GSL_ELOSS	int
)	O
;	O
}	O
else	O
if	O
(	O
fabs	function
(	O
theta	pointer
)	O
>	O
0.0625	int
/	O
GSL_SQRT_DBL_EPSILON	int
)	O
{	O
result	pointer
->	O
err	double
=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
result	pointer
->	O
val	double
-	O
theta	pointer
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
double	O
delta	double
=	O
fabs	function
(	O
result	pointer
->	O
val	double
-	O
theta	pointer
)	O
;	O
result	pointer
->	O
err	double
=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
(	O
(	O
delta	double
<	O
M_PI	int
)	O
?	O
delta	double
:	O
M_PI	int
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
int	O
gsl_sf_angle_restrict_pos_err_e	function
(	O
const	O
double	O
theta	pointer
,	O
gsl_sf_result	struct
*	O
result	pointer
)	O
{	O
const	O
double	O
P1	double
=	O
4	int
*	O
7.85398125648498535156e-01	int
;	O
const	O
double	O
P2	double
=	O
4	int
*	O
3.77489470793079817668e-08	int
;	O
const	O
double	O
P3	double
=	O
4	int
*	O
2.69515142907905952645e-15	int
;	O
const	O
double	O
TwoPi	double
=	O
2	int
*	O
(	O
P1	double
+	O
P2	double
+	O
P3	double
)	O
;	O
const	O
double	O
y	double
=	O
2	int
*	O
floor	function
(	O
theta	pointer
/	O
TwoPi	double
)	O
;	O
double	O
r	pointer
=	O
(	O
(	O
theta	pointer
-	O
y	double
*	O
P1	double
)	O
-	O
y	double
*	O
P2	double
)	O
-	O
y	double
*	O
P3	double
;	O
if	O
(	O
r	pointer
>	O
TwoPi	double
)	O
{	O
r	pointer
=	O
(	O
(	O
(	O
r	pointer
-	O
2	int
*	O
P1	double
)	O
-	O
2	int
*	O
P2	double
)	O
-	O
2	int
*	O
P3	double
)	O
;	O
}	O
else	O
if	O
(	O
r	pointer
<	O
0	int
)	O
{	O
r	pointer
=	O
(	O
(	O
(	O
r	pointer
+	O
2	int
*	O
P1	double
)	O
+	O
2	int
*	O
P2	double
)	O
+	O
2	int
*	O
P3	double
)	O
;	O
}	O
result	pointer
->	O
val	double
=	O
r	pointer
;	O
if	O
(	O
fabs	function
(	O
theta	pointer
)	O
>	O
0.0625	int
/	O
GSL_DBL_EPSILON	int
)	O
{	O
result	pointer
->	O
val	double
=	O
GSL_NAN	O
;	O
result	pointer
->	O
err	double
=	O
fabs	function
(	O
result	pointer
->	O
val	double
)	O
;	O
GSL_ERROR	O
(	O
"error"	pointer
,	O
GSL_ELOSS	int
)	O
;	O
}	O
else	O
if	O
(	O
fabs	function
(	O
theta	pointer
)	O
>	O
0.0625	int
/	O
GSL_SQRT_DBL_EPSILON	int
)	O
{	O
result	pointer
->	O
err	double
=	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
result	pointer
->	O
val	double
-	O
theta	pointer
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
double	O
delta	double
=	O
fabs	function
(	O
result	pointer
->	O
val	double
-	O
theta	pointer
)	O
;	O
result	pointer
->	O
err	double
=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
(	O
(	O
delta	double
<	O
M_PI	int
)	O
?	O
delta	double
:	O
M_PI	int
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
int	O
gsl_sf_angle_restrict_symm_e	function
(	O
double	O
*	O
theta	pointer
)	O
{	O
gsl_sf_result	struct
r	pointer
;	O
int	O
stat	int
=	O
gsl_sf_angle_restrict_symm_err_e	function
(	O
*	O
theta	pointer
,	O
&	O
r	pointer
)	O
;	O
*	O
theta	pointer
=	O
r	pointer
.	O
val	double
;	O
return	O
stat	int
;	O
}	O
int	O
gsl_sf_angle_restrict_pos_e	function
(	O
double	O
*	O
theta	pointer
)	O
{	O
gsl_sf_result	struct
r	pointer
;	O
int	O
stat	int
=	O
gsl_sf_angle_restrict_pos_err_e	function
(	O
*	O
theta	pointer
,	O
&	O
r	pointer
)	O
;	O
*	O
theta	pointer
=	O
r	pointer
.	O
val	double
;	O
return	O
stat	int
;	O
}	O
int	O
gsl_sf_sin_err_e	function
(	O
const	O
double	O
x	double
,	O
const	O
double	O
dx	double
,	O
gsl_sf_result	struct
*	O
result	pointer
)	O
{	O
int	O
stat_s	int
=	O
gsl_sf_sin_e	function
(	O
x	double
,	O
result	pointer
)	O
;	O
result	pointer
->	O
err	double
+=	O
fabs	function
(	O
cos	function
(	O
x	double
)	O
*	O
dx	double
)	O
;	O
result	pointer
->	O
err	double
+=	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
result	pointer
->	O
val	double
)	O
;	O
return	O
stat_s	int
;	O
}	O
int	O
gsl_sf_cos_err_e	function
(	O
const	O
double	O
x	double
,	O
const	O
double	O
dx	double
,	O
gsl_sf_result	struct
*	O
result	pointer
)	O
{	O
int	O
stat_c	int
=	O
gsl_sf_cos_e	function
(	O
x	double
,	O
result	pointer
)	O
;	O
result	pointer
->	O
err	double
+=	O
fabs	function
(	O
sin	function
(	O
x	double
)	O
*	O
dx	double
)	O
;	O
result	pointer
->	O
err	double
+=	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
result	pointer
->	O
val	double
)	O
;	O
return	O
stat_c	int
;	O
}	O
int	O
gsl_sf_sinc_e	function
(	O
double	O
x	double
,	O
gsl_sf_result	struct
*	O
result	pointer
)	O
{	O
{	O
const	O
double	O
ax	double
=	O
fabs	function
(	O
x	double
)	O
;	O
if	O
(	O
ax	double
<	O
0.8	int
)	O
{	O
return	O
cheb_eval_e	function
(	O
&	O
sinc_cs	struct
,	O
2.0	int
*	O
ax	double
-	O
1.0	int
,	O
result	pointer
)	O
;	O
}	O
else	O
if	O
(	O
ax	double
<	O
100.0	int
)	O
{	O
result	pointer
->	O
val	double
=	O
sin	function
(	O
M_PI	int
*	O
ax	double
)	O
/	O
(	O
M_PI	int
*	O
ax	double
)	O
;	O
result	pointer
->	O
err	double
=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
result	pointer
->	O
val	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
const	O
double	O
r	pointer
=	O
M_PI	int
*	O
ax	double
;	O
gsl_sf_result	struct
s	double
;	O
int	O
stat_s	int
=	O
gsl_sf_sin_e	function
(	O
r	pointer
,	O
&	O
s	double
)	O
;	O
result	pointer
->	O
val	double
=	O
s	double
.	O
val	double
/	O
r	pointer
;	O
result	pointer
->	O
err	double
=	O
s	double
.	O
err	double
/	O
r	pointer
+	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
result	pointer
->	O
val	double
)	O
;	O
return	O
stat_s	int
;	O
}	O
}	O
}	O
double	O
gsl_sf_sin	function
(	O
const	O
double	O
x	double
)	O
{	O
EVAL_RESULT	O
(	O
gsl_sf_sin_e	function
(	O
x	double
,	O
&	O
result	pointer
)	O
)	O
;	O
}	O
double	O
gsl_sf_cos	function
(	O
const	O
double	O
x	double
)	O
{	O
EVAL_RESULT	O
(	O
gsl_sf_cos_e	function
(	O
x	double
,	O
&	O
result	pointer
)	O
)	O
;	O
}	O
double	O
gsl_sf_hypot	function
(	O
const	O
double	O
x	double
,	O
const	O
double	O
y	double
)	O
{	O
EVAL_RESULT	O
(	O
gsl_sf_hypot_e	function
(	O
x	double
,	O
y	double
,	O
&	O
result	pointer
)	O
)	O
;	O
}	O
double	O
gsl_sf_lnsinh	function
(	O
const	O
double	O
x	double
)	O
{	O
EVAL_RESULT	O
(	O
gsl_sf_lnsinh_e	function
(	O
x	double
,	O
&	O
result	pointer
)	O
)	O
;	O
}	O
double	O
gsl_sf_lncosh	function
(	O
const	O
double	O
x	double
)	O
{	O
EVAL_RESULT	O
(	O
gsl_sf_lncosh_e	function
(	O
x	double
,	O
&	O
result	pointer
)	O
)	O
;	O
}	O
double	O
gsl_sf_angle_restrict_symm	function
(	O
const	O
double	O
theta	pointer
)	O
{	O
double	O
result	pointer
=	O
theta	pointer
;	O
EVAL_DOUBLE	O
(	O
gsl_sf_angle_restrict_symm_e	function
(	O
&	O
result	pointer
)	O
)	O
;	O
}	O
double	O
gsl_sf_angle_restrict_pos	function
(	O
const	O
double	O
theta	pointer
)	O
{	O
double	O
result	pointer
=	O
theta	pointer
;	O
EVAL_DOUBLE	O
(	O
gsl_sf_angle_restrict_pos_e	function
(	O
&	O
result	pointer
)	O
)	O
;	O
}	O
double	O
gsl_sf_sinc	function
(	O
const	O
double	O
x	double
)	O
{	O
EVAL_RESULT	O
(	O
gsl_sf_sinc_e	function
(	O
x	double
,	O
&	O
result	pointer
)	O
)	O
;	O
}	O
