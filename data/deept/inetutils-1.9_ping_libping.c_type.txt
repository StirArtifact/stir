static	O
size_t	long
_ping_packetsize	function
(	O
PING	struct
*	O
p	pointer
)	O
;	O
size_t	long
_ping_packetsize	function
(	O
PING	struct
*	O
p	pointer
)	O
{	O
if	O
(	O
p	pointer
->	O
ping_type	int
==	O
ICMP_TIMESTAMP	int
||	O
p	pointer
->	O
ping_type	int
==	O
ICMP_TIMESTAMPREPLY	int
)	O
return	O
20	int
;	O
return	O
8	int
+	O
p	pointer
->	O
ping_datalen	long
;	O
}	O
PING	struct
*	O
ping_init	function
(	O
int	O
type	enum
,	O
int	O
ident	int
)	O
{	O
int	O
fd	int
;	O
struct	O
protoent	struct
*	O
proto	pointer
;	O
PING	struct
*	O
p	pointer
;	O
proto	pointer
=	O
getprotobyname	function
(	O
"icmp"	pointer
)	O
;	O
if	O
(	O
!	O
proto	pointer
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"ping: unknown protocol icmp.\n"	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
fd	int
=	O
socket	function
(	O
AF_INET	O
,	O
SOCK_RAW	int
,	O
proto	pointer
->	O
p_proto	int
)	O
;	O
if	O
(	O
fd	int
<	O
0	int
)	O
{	O
if	O
(	O
errno	O
==	O
EPERM	int
||	O
errno	O
==	O
EACCES	int
)	O
fprintf	function
(	O
stderr	pointer
,	O
"ping: ping must run as root\n"	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
p	pointer
=	O
malloc	function
(	O
sizeof	O
(	O
*	O
p	pointer
)	O
)	O
;	O
if	O
(	O
!	O
p	pointer
)	O
{	O
close	function
(	O
fd	int
)	O
;	O
return	O
p	pointer
;	O
}	O
memset	function
(	O
p	pointer
,	O
0	int
,	O
sizeof	O
(	O
*	O
p	pointer
)	O
)	O
;	O
p	pointer
->	O
ping_fd	int
=	O
fd	int
;	O
p	pointer
->	O
ping_type	int
=	O
type	enum
;	O
p	pointer
->	O
ping_count	long
=	O
0	int
;	O
p	pointer
->	O
ping_interval	long
=	O
PING_DEFAULT_INTERVAL	int
;	O
p	pointer
->	O
ping_datalen	long
=	O
sizeof	O
(	O
icmphdr_t	struct
)	O
;	O
p	pointer
->	O
ping_ident	int
=	O
ident	int
&	O
0xFFFF	int
;	O
p	pointer
->	O
ping_cktab_size	int
=	O
PING_CKTABSIZE	int
;	O
gettimeofday	function
(	O
&	O
p	pointer
->	O
ping_start_time	struct
,	O
NULL	O
)	O
;	O
return	O
p	pointer
;	O
}	O
void	O
ping_reset	function
(	O
PING	struct
*	O
p	pointer
)	O
{	O
p	pointer
->	O
ping_num_xmit	long
=	O
0	int
;	O
p	pointer
->	O
ping_num_recv	long
=	O
0	int
;	O
p	pointer
->	O
ping_num_rept	long
=	O
0	int
;	O
}	O
void	O
ping_set_type	function
(	O
PING	struct
*	O
p	pointer
,	O
int	O
type	enum
)	O
{	O
p	pointer
->	O
ping_type	int
=	O
type	enum
;	O
}	O
int	O
ping_xmit	function
(	O
PING	struct
*	O
p	pointer
)	O
{	O
int	O
i	int
,	O
buflen	int
;	O
if	O
(	O
_ping_setbuf	function
(	O
p	pointer
,	O
USE_IPV6	bool
)	O
)	O
return	O
-	O
1	int
;	O
buflen	int
=	O
_ping_packetsize	function
(	O
p	pointer
)	O
;	O
_PING_CLR	O
(	O
p	pointer
,	O
p	pointer
->	O
ping_num_xmit	long
)	O
;	O
switch	O
(	O
p	pointer
->	O
ping_type	int
)	O
{	O
case	O
ICMP_ECHO	int
:	O
icmp_echo_encode	function
(	O
p	pointer
->	O
ping_buffer	pointer
,	O
buflen	int
,	O
p	pointer
->	O
ping_ident	int
,	O
p	pointer
->	O
ping_num_xmit	long
)	O
;	O
break	O
;	O
case	O
ICMP_TIMESTAMP	int
:	O
icmp_timestamp_encode	function
(	O
p	pointer
->	O
ping_buffer	pointer
,	O
buflen	int
,	O
p	pointer
->	O
ping_ident	int
,	O
p	pointer
->	O
ping_num_xmit	long
)	O
;	O
break	O
;	O
case	O
ICMP_ADDRESS	int
:	O
icmp_address_encode	function
(	O
p	pointer
->	O
ping_buffer	pointer
,	O
buflen	int
,	O
p	pointer
->	O
ping_ident	int
,	O
p	pointer
->	O
ping_num_xmit	long
)	O
;	O
break	O
;	O
default	O
:	O
icmp_generic_encode	function
(	O
p	pointer
->	O
ping_buffer	pointer
,	O
buflen	int
,	O
p	pointer
->	O
ping_type	int
,	O
p	pointer
->	O
ping_ident	int
,	O
p	pointer
->	O
ping_num_xmit	long
)	O
;	O
break	O
;	O
}	O
i	int
=	O
sendto	function
(	O
p	pointer
->	O
ping_fd	int
,	O
(	O
char	O
*	O
)	O
p	pointer
->	O
ping_buffer	pointer
,	O
buflen	int
,	O
0	int
,	O
(	O
struct	O
sockaddr	struct
*	O
)	O
&	O
p	pointer
->	O
ping_dest	union
.	O
ping_sockaddr	struct
,	O
sizeof	O
(	O
struct	O
sockaddr_in	struct
)	O
)	O
;	O
if	O
(	O
i	int
<	O
0	int
)	O
perror	function
(	O
"ping: sendto"	pointer
)	O
;	O
else	O
{	O
p	pointer
->	O
ping_num_xmit	long
++	O
;	O
if	O
(	O
i	int
!=	O
buflen	int
)	O
printf	function
(	O
"ping: wrote %s %d chars, ret=%d\n"	pointer
,	O
p	pointer
->	O
ping_hostname	pointer
,	O
buflen	int
,	O
i	int
)	O
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
my_echo_reply	function
(	O
PING	struct
*	O
p	pointer
,	O
icmphdr_t	struct
*	O
icmp	pointer
)	O
{	O
struct	O
ip	struct
*	O
orig_ip	pointer
=	O
&	O
icmp	pointer
->	O
icmp_ip	O
;	O
icmphdr_t	struct
*	O
orig_icmp	pointer
=	O
(	O
icmphdr_t	struct
*	O
)	O
(	O
orig_ip	pointer
+	O
1	int
)	O
;	O
return	O
(	O
orig_ip	pointer
->	O
ip_dst	struct
.	O
s_addr	int
==	O
p	pointer
->	O
ping_dest	union
.	O
ping_sockaddr	struct
.	O
sin_addr	struct
.	O
s_addr	int
&&	O
orig_ip	pointer
->	O
ip_p	char
==	O
IPPROTO_ICMP	int
&&	O
orig_icmp	pointer
->	O
icmp_type	char
==	O
ICMP_ECHO	int
&&	O
orig_icmp	pointer
->	O
icmp_id	O
==	O
p	pointer
->	O
ping_ident	int
)	O
;	O
}	O
int	O
ping_recv	function
(	O
PING	struct
*	O
p	pointer
)	O
{	O
socklen_t	int
fromlen	int
=	O
sizeof	O
(	O
p	pointer
->	O
ping_from	union
.	O
ping_sockaddr	struct
)	O
;	O
int	O
n	int
,	O
rc	int
;	O
icmphdr_t	struct
*	O
icmp	pointer
;	O
struct	O
ip	struct
*	O
ip	struct
;	O
int	O
dupflag	int
;	O
n	int
=	O
recvfrom	function
(	O
p	pointer
->	O
ping_fd	int
,	O
(	O
char	O
*	O
)	O
p	pointer
->	O
ping_buffer	pointer
,	O
_PING_BUFLEN	O
(	O
p	pointer
,	O
USE_IPV6	bool
)	O
,	O
0	int
,	O
(	O
struct	O
sockaddr	struct
*	O
)	O
&	O
p	pointer
->	O
ping_from	union
.	O
ping_sockaddr	struct
,	O
&	O
fromlen	int
)	O
;	O
if	O
(	O
n	int
<	O
0	int
)	O
return	O
-	O
1	int
;	O
rc	int
=	O
icmp_generic_decode	function
(	O
p	pointer
->	O
ping_buffer	pointer
,	O
n	int
,	O
&	O
ip	struct
,	O
&	O
icmp	pointer
)	O
;	O
if	O
(	O
rc	int
<	O
0	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"packet too short (%d bytes) from %s\n"	pointer
,	O
n	int
,	O
inet_ntoa	function
(	O
p	pointer
->	O
ping_from	union
.	O
ping_sockaddr	struct
.	O
sin_addr	struct
)	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
switch	O
(	O
icmp	pointer
->	O
icmp_type	char
)	O
{	O
case	O
ICMP_ECHOREPLY	int
:	O
case	O
ICMP_TIMESTAMPREPLY	int
:	O
case	O
ICMP_ADDRESSREPLY	int
:	O
if	O
(	O
icmp	pointer
->	O
icmp_id	O
!=	O
p	pointer
->	O
ping_ident	int
)	O
return	O
-	O
1	int
;	O
if	O
(	O
rc	int
)	O
fprintf	function
(	O
stderr	pointer
,	O
"checksum mismatch from %s\n"	pointer
,	O
inet_ntoa	function
(	O
p	pointer
->	O
ping_from	union
.	O
ping_sockaddr	struct
.	O
sin_addr	struct
)	O
)	O
;	O
p	pointer
->	O
ping_num_recv	long
++	O
;	O
if	O
(	O
_PING_TST	O
(	O
p	pointer
,	O
icmp	pointer
->	O
icmp_seq	O
)	O
)	O
{	O
p	pointer
->	O
ping_num_rept	long
++	O
;	O
p	pointer
->	O
ping_num_recv	long
--	O
;	O
dupflag	int
=	O
1	int
;	O
}	O
else	O
{	O
_PING_SET	O
(	O
p	pointer
,	O
icmp	pointer
->	O
icmp_seq	O
)	O
;	O
dupflag	int
=	O
0	int
;	O
}	O
if	O
(	O
p	pointer
->	O
ping_event	union
.	O
handler	pointer
)	O
(	O
*	O
p	pointer
->	O
ping_event	union
.	O
handler	pointer
)	O
(	O
dupflag	int
?	O
PEV_DUPLICATE	int
:	O
PEV_RESPONSE	int
,	O
p	pointer
->	O
ping_closure	pointer
,	O
&	O
p	pointer
->	O
ping_dest	union
.	O
ping_sockaddr	struct
,	O
&	O
p	pointer
->	O
ping_from	union
.	O
ping_sockaddr	struct
,	O
ip	struct
,	O
icmp	pointer
,	O
n	int
)	O
;	O
break	O
;	O
case	O
ICMP_ECHO	int
:	O
case	O
ICMP_TIMESTAMP	int
:	O
case	O
ICMP_ADDRESS	int
:	O
return	O
-	O
1	int
;	O
default	O
:	O
if	O
(	O
!	O
my_echo_reply	function
(	O
p	pointer
,	O
icmp	pointer
)	O
)	O
return	O
-	O
1	int
;	O
if	O
(	O
p	pointer
->	O
ping_event	union
.	O
handler	pointer
)	O
(	O
*	O
p	pointer
->	O
ping_event	union
.	O
handler	pointer
)	O
(	O
PEV_NOECHO	int
,	O
p	pointer
->	O
ping_closure	pointer
,	O
&	O
p	pointer
->	O
ping_dest	union
.	O
ping_sockaddr	struct
,	O
&	O
p	pointer
->	O
ping_from	union
.	O
ping_sockaddr	struct
,	O
ip	struct
,	O
icmp	pointer
,	O
n	int
)	O
;	O
}	O
return	O
0	int
;	O
}	O
void	O
ping_set_event_handler	function
(	O
PING	struct
*	O
ping	pointer
,	O
ping_efp	pointer
pf	pointer
,	O
void	O
*	O
closure	pointer
)	O
{	O
ping	pointer
->	O
ping_event	union
.	O
handler	pointer
=	O
pf	pointer
;	O
ping	pointer
->	O
ping_closure	pointer
=	O
closure	pointer
;	O
}	O
void	O
ping_set_packetsize	function
(	O
PING	struct
*	O
ping	pointer
,	O
size_t	long
size	long
)	O
{	O
ping	pointer
->	O
ping_datalen	long
=	O
size	long
;	O
}	O
int	O
ping_set_dest	function
(	O
PING	struct
*	O
ping	pointer
,	O
char	O
*	O
host	pointer
)	O
{	O
struct	O
sockaddr_in	struct
*	O
s_in	pointer
=	O
&	O
ping	pointer
->	O
ping_dest	union
.	O
ping_sockaddr	struct
;	O
s_in	pointer
->	O
sin_family	short
=	O
AF_INET	O
;	O
if	O
(	O
inet_aton	function
(	O
host	pointer
,	O
&	O
s_in	pointer
->	O
sin_addr	struct
)	O
)	O
ping	pointer
->	O
ping_hostname	pointer
=	O
strdup	function
(	O
host	pointer
)	O
;	O
else	O
{	O
struct	O
hostent	struct
*	O
hp	pointer
=	O
gethostbyname	function
(	O
host	pointer
)	O
;	O
if	O
(	O
!	O
hp	pointer
)	O
return	O
1	int
;	O
s_in	pointer
->	O
sin_family	short
=	O
hp	pointer
->	O
h_addrtype	int
;	O
if	O
(	O
hp	pointer
->	O
h_length	int
>	O
(	O
int	O
)	O
sizeof	O
(	O
s_in	pointer
->	O
sin_addr	struct
)	O
)	O
hp	pointer
->	O
h_length	int
=	O
sizeof	O
(	O
s_in	pointer
->	O
sin_addr	struct
)	O
;	O
memcpy	function
(	O
&	O
s_in	pointer
->	O
sin_addr	struct
,	O
hp	pointer
->	O
h_addr	O
,	O
hp	pointer
->	O
h_length	int
)	O
;	O
ping	pointer
->	O
ping_hostname	pointer
=	O
strdup	function
(	O
hp	pointer
->	O
h_name	pointer
)	O
;	O
}	O
return	O
0	int
;	O
}	O
