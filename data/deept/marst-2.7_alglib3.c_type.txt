static	O
void	O
outputf	function
(	O
char	O
*	O
fmt	pointer
,	O
...	O
)	O
{	O
va_list	array
arg	struct
;	O
char	O
str	pointer
[	O
255	int
+	O
1	int
]	O
,	O
*	O
ptr	pointer
;	O
va_start	O
(	O
arg	struct
,	O
fmt	pointer
)	O
;	O
vsprintf	function
(	O
str	pointer
,	O
fmt	pointer
,	O
arg	struct
)	O
;	O
assert	O
(	O
strlen	function
(	O
str	pointer
)	O
<=	O
sizeof	O
(	O
str	pointer
)	O
-	O
1	int
)	O
;	O
va_end	O
(	O
arg	struct
)	O
;	O
for	O
(	O
ptr	pointer
=	O
str	pointer
;	O
*	O
ptr	pointer
!=	O
'\0'	O
;	O
ptr	pointer
++	O
)	O
outchar	function
(	O
1	int
,	O
*	O
ptr	pointer
)	O
;	O
return	O
;	O
}	O
static	O
void	O
outarray	function
(	O
char	O
*	O
name	pointer
,	O
struct	O
dv	struct
*	O
dv	struct
,	O
int	O
type	int
)	O
{	O
int	O
n	int
=	O
dv	struct
->	O
n	int
,	O
i	int
[	O
9	int
]	O
,	O
k	int
;	O
void	O
*	O
base	pointer
=	O
dv	struct
->	O
base	pointer
;	O
assert	O
(	O
1	int
<=	O
n	int
&&	O
n	int
<=	O
9	int
)	O
;	O
for	O
(	O
k	int
=	O
0	int
;	O
k	int
<	O
n	int
;	O
k	int
++	O
)	O
i	int
[	O
k	int
]	O
=	O
dv	struct
->	O
d	array
[	O
k	int
]	O
.	O
lo	int
;	O
for	O
(	O
;	O
;	O
)	O
{	O
outputf	function
(	O
"%s"	pointer
,	O
name	pointer
)	O
;	O
for	O
(	O
k	int
=	O
0	int
;	O
k	int
<	O
n	int
;	O
k	int
++	O
)	O
outputf	function
(	O
"%c%d"	pointer
,	O
k	int
==	O
0	int
?	O
'['	O
:	O
','	O
,	O
i	int
[	O
k	int
]	O
)	O
;	O
outputf	function
(	O
"] = "	pointer
)	O
;	O
switch	O
(	O
type	int
)	O
{	O
case	O
'r'	O
:	O
outputf	function
(	O
REAL_FMT	pointer
"\n"	pointer
,	O
*	O
(	O
double	O
*	O
)	O
base	pointer
)	O
;	O
base	pointer
=	O
(	O
(	O
double	O
*	O
)	O
base	pointer
)	O
+	O
1	int
;	O
break	O
;	O
case	O
'i'	O
:	O
outputf	function
(	O
"%d\n"	pointer
,	O
*	O
(	O
int	O
*	O
)	O
base	pointer
)	O
;	O
base	pointer
=	O
(	O
(	O
int	O
*	O
)	O
base	pointer
)	O
+	O
1	int
;	O
break	O
;	O
case	O
'b'	O
:	O
outputf	function
(	O
"%s\n"	pointer
,	O
*	O
(	O
bool	int
*	O
)	O
base	pointer
?	O
"true"	pointer
:	O
"false"	pointer
)	O
;	O
base	pointer
=	O
(	O
(	O
bool	int
*	O
)	O
base	pointer
)	O
+	O
1	int
;	O
break	O
;	O
default	O
:	O
assert	O
(	O
type	int
!=	O
type	int
)	O
;	O
}	O
for	O
(	O
k	int
=	O
n	int
-	O
1	int
;	O
k	int
>=	O
0	int
;	O
k	int
--	O
)	O
{	O
i	int
[	O
k	int
]	O
++	O
;	O
if	O
(	O
i	int
[	O
k	int
]	O
<=	O
dv	struct
->	O
d	array
[	O
k	int
]	O
.	O
up	int
)	O
break	O
;	O
i	int
[	O
k	int
]	O
=	O
dv	struct
->	O
d	array
[	O
k	int
]	O
.	O
lo	int
;	O
}	O
if	O
(	O
k	int
<	O
0	int
)	O
break	O
;	O
}	O
return	O
;	O
}	O
void	O
print	function
(	O
int	O
n	int
,	O
...	O
)	O
{	O
va_list	array
arg	struct
;	O
int	O
k	int
;	O
va_start	O
(	O
arg	struct
,	O
n	int
)	O
;	O
for	O
(	O
k	int
=	O
1	int
;	O
k	int
<=	O
n	int
;	O
k	int
++	O
)	O
{	O
int	O
flags	int
=	O
va_arg	O
(	O
arg	struct
,	O
int	O
)	O
;	O
char	O
*	O
name	pointer
=	O
va_arg	O
(	O
arg	struct
,	O
char	O
*	O
)	O
;	O
switch	O
(	O
flags	int
)	O
{	O
case	O
F_REAL	int
:	O
{	O
double	O
val	double
=	O
va_arg	O
(	O
arg	struct
,	O
double	O
)	O
;	O
if	O
(	O
name	pointer
!=	O
NULL	O
)	O
outputf	function
(	O
"%s = "	pointer
,	O
name	pointer
)	O
;	O
outputf	function
(	O
REAL_FMT	pointer
"\n"	pointer
,	O
val	double
)	O
;	O
}	O
break	O
;	O
case	O
F_INT	int
:	O
{	O
int	O
val	double
=	O
va_arg	O
(	O
arg	struct
,	O
int	O
)	O
;	O
if	O
(	O
name	pointer
!=	O
NULL	O
)	O
outputf	function
(	O
"%s = "	pointer
,	O
name	pointer
)	O
;	O
outputf	function
(	O
"%d\n"	pointer
,	O
val	double
)	O
;	O
}	O
break	O
;	O
case	O
F_BOOL	int
:	O
{	O
bool	int
val	double
=	O
va_arg	O
(	O
arg	struct
,	O
bool	int
)	O
;	O
if	O
(	O
name	pointer
!=	O
NULL	O
)	O
outputf	function
(	O
"%s = "	pointer
,	O
name	pointer
)	O
;	O
outputf	function
(	O
"%s\n"	pointer
,	O
val	double
?	O
"true"	pointer
:	O
"false"	pointer
)	O
;	O
}	O
break	O
;	O
case	O
F_LABEL	int
:	O
{	O
struct	O
label	struct
val	double
=	O
va_arg	O
(	O
arg	struct
,	O
struct	O
label	struct
)	O
;	O
if	O
(	O
name	pointer
!=	O
NULL	O
)	O
outputf	function
(	O
"%s = "	pointer
,	O
name	pointer
)	O
;	O
outputf	function
(	O
"(%p,%d)\n"	pointer
,	O
val	double
.	O
jump	pointer
,	O
val	double
.	O
kase	int
)	O
;	O
}	O
break	O
;	O
case	O
F_ARRAY	int
:	O
{	O
struct	O
arg	struct
val	double
=	O
va_arg	O
(	O
arg	struct
,	O
struct	O
arg	struct
)	O
;	O
struct	O
dv	struct
*	O
dv	struct
=	O
val	double
.	O
arg1	pointer
;	O
int	O
type	int
=	O
(	O
int	O
)	O
val	double
.	O
arg2	pointer
;	O
assert	O
(	O
name	pointer
!=	O
NULL	O
)	O
;	O
if	O
(	O
dv	struct
->	O
base	pointer
==	O
NULL	O
)	O
outputf	function
(	O
"array `%s' has no elements\n"	pointer
,	O
name	pointer
)	O
;	O
else	O
outarray	function
(	O
name	pointer
,	O
dv	struct
,	O
type	int
)	O
;	O
}	O
break	O
;	O
case	O
F_STRING	int
:	O
{	O
struct	O
arg	struct
val	double
=	O
va_arg	O
(	O
arg	struct
,	O
struct	O
arg	struct
)	O
;	O
char	O
*	O
str	pointer
=	O
val	double
.	O
arg1	pointer
,	O
*	O
ptr	pointer
;	O
if	O
(	O
name	pointer
!=	O
NULL	O
)	O
outputf	function
(	O
"%s = "	pointer
,	O
name	pointer
)	O
;	O
outputf	function
(	O
"\""	pointer
)	O
;	O
for	O
(	O
ptr	pointer
=	O
str	pointer
;	O
*	O
ptr	pointer
!=	O
'\0'	O
;	O
ptr	pointer
++	O
)	O
{	O
if	O
(	O
iscntrl	function
(	O
*	O
ptr	pointer
)	O
)	O
outputf	function
(	O
"\\x%02X"	pointer
,	O
*	O
ptr	pointer
)	O
;	O
else	O
if	O
(	O
*	O
ptr	pointer
==	O
'"'	O
)	O
outputf	function
(	O
"\\\""	pointer
)	O
;	O
else	O
outputf	function
(	O
"%c"	pointer
,	O
*	O
ptr	pointer
)	O
;	O
}	O
outputf	function
(	O
"\"\n"	pointer
)	O
;	O
}	O
break	O
;	O
default	O
:	O
assert	O
(	O
flags	int
!=	O
flags	int
)	O
;	O
}	O
}	O
va_end	O
(	O
arg	struct
)	O
;	O
return	O
;	O
}	O
