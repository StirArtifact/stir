WEdit	struct
*	O
wedit	pointer
;	O
struct	O
WMenu	struct
*	O
edit_menubar	pointer
;	O
int	O
column_highlighting	int
=	O
0	int
;	O
static	O
cb_ret_t	enum
edit_callback	function
(	O
Widget	struct
*	O
,	O
widget_msg_t	enum
msg	pointer
,	O
int	O
parm	int
)	O
;	O
static	O
int	O
edit_event	function
(	O
WEdit	struct
*	O
edit	pointer
,	O
Gpm_Event	struct
*	O
event	pointer
,	O
int	O
*	O
result	long
)	O
{	O
*	O
result	long
=	O
MOU_NORMAL	int
;	O
edit_update_curs_row	function
(	O
edit	pointer
)	O
;	O
edit_update_curs_col	function
(	O
edit	pointer
)	O
;	O
if	O
(	O
!	O
(	O
event	pointer
->	O
type	enum
&	O
(	O
GPM_DOWN	int
|	O
GPM_DRAG	int
|	O
GPM_UP	int
)	O
)	O
)	O
return	O
0	int
;	O
if	O
(	O
(	O
event	pointer
->	O
buttons	int
&	O
GPM_B_UP	O
)	O
&&	O
(	O
event	pointer
->	O
type	enum
&	O
GPM_DOWN	int
)	O
)	O
{	O
edit_move_up	function
(	O
edit	pointer
,	O
2	int
,	O
1	int
)	O
;	O
goto	O
update	O
;	O
}	O
if	O
(	O
(	O
event	pointer
->	O
buttons	int
&	O
GPM_B_DOWN	O
)	O
&&	O
(	O
event	pointer
->	O
type	enum
&	O
GPM_DOWN	int
)	O
)	O
{	O
edit_move_down	function
(	O
edit	pointer
,	O
2	int
,	O
1	int
)	O
;	O
goto	O
update	O
;	O
}	O
if	O
(	O
event	pointer
->	O
y	short
<=	O
1	int
||	O
event	pointer
->	O
x	array
<=	O
0	int
||	O
event	pointer
->	O
x	array
>	O
edit	pointer
->	O
num_widget_columns	int
||	O
event	pointer
->	O
y	short
>	O
edit	pointer
->	O
num_widget_lines	int
+	O
1	int
)	O
return	O
0	int
;	O
if	O
(	O
edit	pointer
->	O
mark2	long
!=	O
-	O
1	int
&&	O
event	pointer
->	O
type	enum
&	O
(	O
GPM_UP	int
|	O
GPM_DRAG	int
)	O
)	O
return	O
1	int
;	O
if	O
(	O
event	pointer
->	O
type	enum
&	O
(	O
GPM_DOWN	int
|	O
GPM_UP	int
)	O
)	O
edit_push_key_press	function
(	O
edit	pointer
)	O
;	O
edit	pointer
->	O
prev_col	long
=	O
event	pointer
->	O
x	array
-	O
edit	pointer
->	O
start_col	long
-	O
1	int
;	O
if	O
(	O
--	O
event	pointer
->	O
y	short
>	O
(	O
edit	pointer
->	O
curs_row	long
+	O
1	int
)	O
)	O
edit_move_down	function
(	O
edit	pointer
,	O
event	pointer
->	O
y	short
-	O
(	O
edit	pointer
->	O
curs_row	long
+	O
1	int
)	O
,	O
0	int
)	O
;	O
else	O
if	O
(	O
event	pointer
->	O
y	short
<	O
(	O
edit	pointer
->	O
curs_row	long
+	O
1	int
)	O
)	O
edit_move_up	function
(	O
edit	pointer
,	O
(	O
edit	pointer
->	O
curs_row	long
+	O
1	int
)	O
-	O
event	pointer
->	O
y	short
,	O
0	int
)	O
;	O
else	O
edit_move_to_prev_col	function
(	O
edit	pointer
,	O
edit_bol	function
(	O
edit	pointer
,	O
edit	pointer
->	O
curs1	long
)	O
)	O
;	O
if	O
(	O
event	pointer
->	O
type	enum
&	O
GPM_DOWN	int
)	O
{	O
edit_mark_cmd	function
(	O
edit	pointer
,	O
1	int
)	O
;	O
edit	pointer
->	O
highlight	int
=	O
0	int
;	O
}	O
if	O
(	O
!	O
(	O
event	pointer
->	O
type	enum
&	O
GPM_DRAG	int
)	O
)	O
edit_mark_cmd	function
(	O
edit	pointer
,	O
0	int
)	O
;	O
update	O
:	O
edit_find_bracket	function
(	O
edit	pointer
)	O
;	O
edit	pointer
->	O
force	int
|=	O
REDRAW_COMPLETELY	O
;	O
edit_update_curs_row	function
(	O
edit	pointer
)	O
;	O
edit_update_curs_col	function
(	O
edit	pointer
)	O
;	O
edit_update_screen	function
(	O
edit	pointer
)	O
;	O
return	O
1	int
;	O
}	O
static	O
int	O
edit_mouse_event	function
(	O
Gpm_Event	struct
*	O
event	pointer
,	O
void	O
*	O
x	array
)	O
{	O
int	O
result	long
;	O
if	O
(	O
edit_event	function
(	O
(	O
WEdit	struct
*	O
)	O
x	array
,	O
event	pointer
,	O
&	O
result	long
)	O
)	O
return	O
result	long
;	O
else	O
return	O
(	O
*	O
edit_menubar	pointer
->	O
widget	pointer
.	O
mouse	pointer
)	O
(	O
event	pointer
,	O
edit_menubar	pointer
)	O
;	O
}	O
static	O
void	O
edit_adjust_size	function
(	O
Dlg_head	struct
*	O
h	pointer
)	O
{	O
WEdit	struct
*	O
edit	pointer
;	O
WButtonBar	struct
*	O
edit_bar	pointer
;	O
edit	pointer
=	O
(	O
WEdit	struct
*	O
)	O
find_widget_type	function
(	O
h	pointer
,	O
edit_callback	function
)	O
;	O
edit_bar	pointer
=	O
find_buttonbar	function
(	O
h	pointer
)	O
;	O
widget_set_size	function
(	O
&	O
edit	pointer
->	O
widget	pointer
,	O
0	int
,	O
0	int
,	O
LINES	O
-	O
1	int
,	O
COLS	O
)	O
;	O
widget_set_size	function
(	O
(	O
Widget	struct
*	O
)	O
edit_bar	pointer
,	O
LINES	O
-	O
1	int
,	O
0	int
,	O
1	int
,	O
COLS	O
)	O
;	O
widget_set_size	function
(	O
&	O
edit_menubar	pointer
->	O
widget	pointer
,	O
0	int
,	O
0	int
,	O
1	int
,	O
COLS	O
)	O
;	O
}	O
static	O
cb_ret_t	enum
edit_dialog_callback	function
(	O
Dlg_head	struct
*	O
h	pointer
,	O
dlg_msg_t	enum
msg	pointer
,	O
int	O
parm	int
)	O
{	O
WEdit	struct
*	O
edit	pointer
;	O
switch	O
(	O
msg	pointer
)	O
{	O
case	O
DLG_RESIZE	int
:	O
edit_adjust_size	function
(	O
h	pointer
)	O
;	O
return	O
MSG_HANDLED	int
;	O
case	O
DLG_VALIDATE	int
:	O
edit	pointer
=	O
(	O
WEdit	struct
*	O
)	O
find_widget_type	function
(	O
h	pointer
,	O
edit_callback	function
)	O
;	O
if	O
(	O
!	O
edit_ok_to_exit	function
(	O
edit	pointer
)	O
)	O
{	O
h	pointer
->	O
running	int
=	O
1	int
;	O
}	O
return	O
MSG_HANDLED	int
;	O
default	O
:	O
return	O
default_dlg_callback	function
(	O
h	pointer
,	O
msg	pointer
,	O
parm	int
)	O
;	O
}	O
}	O
int	O
edit_file	function
(	O
const	O
char	O
*	O
_file	pointer
,	O
int	O
line	int
)	O
{	O
static	O
int	O
made_directory	int
=	O
0	int
;	O
Dlg_head	struct
*	O
edit_dlg	pointer
;	O
WButtonBar	struct
*	O
edit_bar	pointer
;	O
if	O
(	O
!	O
made_directory	int
)	O
{	O
char	O
*	O
dir	pointer
=	O
concat_dir_and_file	function
(	O
home_dir	pointer
,	O
EDIT_DIR	O
)	O
;	O
made_directory	int
=	O
(	O
mkdir	function
(	O
dir	pointer
,	O
0700	int
)	O
!=	O
-	O
1	int
||	O
errno	O
==	O
EEXIST	int
)	O
;	O
g_free	function
(	O
dir	pointer
)	O
;	O
}	O
if	O
(	O
!	O
(	O
wedit	pointer
=	O
edit_init	function
(	O
NULL	O
,	O
LINES	O
-	O
2	int
,	O
COLS	O
,	O
_file	pointer
,	O
line	int
)	O
)	O
)	O
{	O
return	O
0	int
;	O
}	O
edit_dlg	pointer
=	O
create_dlg	function
(	O
0	int
,	O
0	int
,	O
LINES	O
,	O
COLS	O
,	O
NULL	O
,	O
edit_dialog_callback	function
,	O
"[Internal File Editor]"	pointer
,	O
NULL	O
,	O
DLG_WANT_TAB	O
)	O
;	O
init_widget	function
(	O
&	O
(	O
wedit	pointer
->	O
widget	pointer
)	O
,	O
0	int
,	O
0	int
,	O
LINES	O
-	O
1	int
,	O
COLS	O
,	O
edit_callback	function
,	O
edit_mouse_event	function
)	O
;	O
widget_want_cursor	O
(	O
wedit	pointer
->	O
widget	pointer
,	O
1	int
)	O
;	O
edit_bar	pointer
=	O
buttonbar_new	function
(	O
1	int
)	O
;	O
edit_menubar	pointer
=	O
edit_init_menu	function
(	O
)	O
;	O
add_widget	function
(	O
edit_dlg	pointer
,	O
edit_bar	pointer
)	O
;	O
add_widget	function
(	O
edit_dlg	pointer
,	O
wedit	pointer
)	O
;	O
add_widget	function
(	O
edit_dlg	pointer
,	O
edit_menubar	pointer
)	O
;	O
run_dlg	function
(	O
edit_dlg	pointer
)	O
;	O
edit_done_menu	function
(	O
edit_menubar	pointer
)	O
;	O
destroy_dlg	function
(	O
edit_dlg	pointer
)	O
;	O
return	O
1	int
;	O
}	O
static	O
void	O
edit_my_define	function
(	O
Dlg_head	struct
*	O
h	pointer
,	O
int	O
idx	int
,	O
const	O
char	O
*	O
text	pointer
,	O
void	O
(	O
*	O
fn	pointer
)	O
(	O
WEdit	struct
*	O
)	O
,	O
WEdit	struct
*	O
edit	pointer
)	O
{	O
text	pointer
=	O
edit	pointer
->	O
labels	array
[	O
idx	int
-	O
1	int
]	O
?	O
edit	pointer
->	O
labels	array
[	O
idx	int
-	O
1	int
]	O
:	O
text	pointer
;	O
buttonbar_set_label_data	function
(	O
h	pointer
,	O
idx	int
,	O
text	pointer
,	O
(	O
buttonbarfn	pointer
)	O
fn	pointer
,	O
edit	pointer
)	O
;	O
}	O
static	O
void	O
cmd_F1	function
(	O
WEdit	struct
*	O
edit	pointer
)	O
{	O
send_message	function
(	O
(	O
Widget	struct
*	O
)	O
edit	pointer
,	O
WIDGET_KEY	int
,	O
KEY_F	O
(	O
1	int
)	O
)	O
;	O
}	O
static	O
void	O
cmd_F2	function
(	O
WEdit	struct
*	O
edit	pointer
)	O
{	O
send_message	function
(	O
(	O
Widget	struct
*	O
)	O
edit	pointer
,	O
WIDGET_KEY	int
,	O
KEY_F	O
(	O
2	int
)	O
)	O
;	O
}	O
static	O
void	O
cmd_F3	function
(	O
WEdit	struct
*	O
edit	pointer
)	O
{	O
send_message	function
(	O
(	O
Widget	struct
*	O
)	O
edit	pointer
,	O
WIDGET_KEY	int
,	O
KEY_F	O
(	O
3	int
)	O
)	O
;	O
}	O
static	O
void	O
cmd_F4	function
(	O
WEdit	struct
*	O
edit	pointer
)	O
{	O
send_message	function
(	O
(	O
Widget	struct
*	O
)	O
edit	pointer
,	O
WIDGET_KEY	int
,	O
KEY_F	O
(	O
4	int
)	O
)	O
;	O
}	O
static	O
void	O
cmd_F5	function
(	O
WEdit	struct
*	O
edit	pointer
)	O
{	O
send_message	function
(	O
(	O
Widget	struct
*	O
)	O
edit	pointer
,	O
WIDGET_KEY	int
,	O
KEY_F	O
(	O
5	int
)	O
)	O
;	O
}	O
static	O
void	O
cmd_F6	function
(	O
WEdit	struct
*	O
edit	pointer
)	O
{	O
send_message	function
(	O
(	O
Widget	struct
*	O
)	O
edit	pointer
,	O
WIDGET_KEY	int
,	O
KEY_F	O
(	O
6	int
)	O
)	O
;	O
}	O
static	O
void	O
cmd_F7	function
(	O
WEdit	struct
*	O
edit	pointer
)	O
{	O
send_message	function
(	O
(	O
Widget	struct
*	O
)	O
edit	pointer
,	O
WIDGET_KEY	int
,	O
KEY_F	O
(	O
7	int
)	O
)	O
;	O
}	O
static	O
void	O
cmd_F8	function
(	O
WEdit	struct
*	O
edit	pointer
)	O
{	O
send_message	function
(	O
(	O
Widget	struct
*	O
)	O
edit	pointer
,	O
WIDGET_KEY	int
,	O
KEY_F	O
(	O
8	int
)	O
)	O
;	O
}	O
static	O
void	O
cmd_F10	function
(	O
WEdit	struct
*	O
edit	pointer
)	O
{	O
send_message	function
(	O
(	O
Widget	struct
*	O
)	O
edit	pointer
,	O
WIDGET_KEY	int
,	O
KEY_F	O
(	O
10	int
)	O
)	O
;	O
}	O
static	O
void	O
edit_labels	function
(	O
WEdit	struct
*	O
edit	pointer
)	O
{	O
Dlg_head	struct
*	O
h	pointer
=	O
edit	pointer
->	O
widget	pointer
.	O
parent	pointer
;	O
edit_my_define	function
(	O
h	pointer
,	O
1	int
,	O
_	O
(	O
"Help"	pointer
)	O
,	O
cmd_F1	function
,	O
edit	pointer
)	O
;	O
edit_my_define	function
(	O
h	pointer
,	O
2	int
,	O
_	O
(	O
"Save"	pointer
)	O
,	O
cmd_F2	function
,	O
edit	pointer
)	O
;	O
edit_my_define	function
(	O
h	pointer
,	O
3	int
,	O
_	O
(	O
"Mark"	pointer
)	O
,	O
cmd_F3	function
,	O
edit	pointer
)	O
;	O
edit_my_define	function
(	O
h	pointer
,	O
4	int
,	O
_	O
(	O
"Replac"	pointer
)	O
,	O
cmd_F4	function
,	O
edit	pointer
)	O
;	O
edit_my_define	function
(	O
h	pointer
,	O
5	int
,	O
_	O
(	O
"Copy"	pointer
)	O
,	O
cmd_F5	function
,	O
edit	pointer
)	O
;	O
edit_my_define	function
(	O
h	pointer
,	O
6	int
,	O
_	O
(	O
"Move"	pointer
)	O
,	O
cmd_F6	function
,	O
edit	pointer
)	O
;	O
edit_my_define	function
(	O
h	pointer
,	O
7	int
,	O
_	O
(	O
"Search"	pointer
)	O
,	O
cmd_F7	function
,	O
edit	pointer
)	O
;	O
edit_my_define	function
(	O
h	pointer
,	O
8	int
,	O
_	O
(	O
"Delete"	pointer
)	O
,	O
cmd_F8	function
,	O
edit	pointer
)	O
;	O
edit_my_define	function
(	O
h	pointer
,	O
9	int
,	O
_	O
(	O
"PullDn"	pointer
)	O
,	O
edit_menu_cmd	function
,	O
edit	pointer
)	O
;	O
edit_my_define	function
(	O
h	pointer
,	O
10	int
,	O
_	O
(	O
"Quit"	pointer
)	O
,	O
cmd_F10	function
,	O
edit	pointer
)	O
;	O
buttonbar_redraw	function
(	O
h	pointer
)	O
;	O
}	O
void	O
edit_update_screen	function
(	O
WEdit	struct
*	O
e	pointer
)	O
{	O
edit_scroll_screen_over_cursor	function
(	O
e	pointer
)	O
;	O
edit_update_curs_col	function
(	O
e	pointer
)	O
;	O
edit_status	function
(	O
e	pointer
)	O
;	O
if	O
(	O
!	O
is_idle	function
(	O
)	O
)	O
{	O
e	pointer
->	O
force	int
|=	O
REDRAW_PAGE	O
;	O
return	O
;	O
}	O
if	O
(	O
e	pointer
->	O
force	int
&	O
REDRAW_COMPLETELY	O
)	O
e	pointer
->	O
force	int
|=	O
REDRAW_PAGE	O
;	O
edit_render_keypress	function
(	O
e	pointer
)	O
;	O
}	O
static	O
cb_ret_t	enum
edit_callback	function
(	O
Widget	struct
*	O
w	pointer
,	O
widget_msg_t	enum
msg	pointer
,	O
int	O
parm	int
)	O
{	O
WEdit	struct
*	O
e	pointer
=	O
(	O
WEdit	struct
*	O
)	O
w	pointer
;	O
switch	O
(	O
msg	pointer
)	O
{	O
case	O
WIDGET_INIT	int
:	O
e	pointer
->	O
force	int
|=	O
REDRAW_COMPLETELY	O
;	O
edit_labels	function
(	O
e	pointer
)	O
;	O
return	O
MSG_HANDLED	int
;	O
case	O
WIDGET_DRAW	int
:	O
e	pointer
->	O
force	int
|=	O
REDRAW_COMPLETELY	O
;	O
e	pointer
->	O
num_widget_lines	int
=	O
LINES	O
-	O
2	int
;	O
e	pointer
->	O
num_widget_columns	int
=	O
COLS	O
;	O
case	O
WIDGET_FOCUS	int
:	O
edit_update_screen	function
(	O
e	pointer
)	O
;	O
return	O
MSG_HANDLED	int
;	O
case	O
WIDGET_KEY	int
:	O
{	O
int	O
cmd	pointer
,	O
ch	int
;	O
if	O
(	O
edit_translate_key	function
(	O
e	pointer
,	O
parm	int
,	O
&	O
cmd	pointer
,	O
&	O
ch	int
)	O
)	O
{	O
edit_execute_key_command	function
(	O
e	pointer
,	O
cmd	pointer
,	O
ch	int
)	O
;	O
edit_update_screen	function
(	O
e	pointer
)	O
;	O
return	O
MSG_HANDLED	int
;	O
}	O
else	O
if	O
(	O
edit_drop_hotkey_menu	function
(	O
e	pointer
,	O
parm	int
)	O
)	O
{	O
return	O
MSG_HANDLED	int
;	O
}	O
else	O
{	O
return	O
MSG_NOT_HANDLED	int
;	O
}	O
}	O
case	O
WIDGET_CURSOR	int
:	O
widget_move	O
(	O
&	O
e	pointer
->	O
widget	pointer
,	O
e	pointer
->	O
curs_row	long
+	O
EDIT_TEXT_VERTICAL_OFFSET	int
,	O
e	pointer
->	O
curs_col	long
+	O
e	pointer
->	O
start_col	long
)	O
;	O
return	O
MSG_HANDLED	int
;	O
case	O
WIDGET_DESTROY	int
:	O
edit_clean	function
(	O
e	pointer
)	O
;	O
return	O
MSG_HANDLED	int
;	O
default	O
:	O
return	O
default_proc	function
(	O
msg	pointer
,	O
parm	int
)	O
;	O
}	O
}	O
