object	O
plus_half	int
,	O
minus_half	O
;	O
extern	O
void	O
zero_divisor	function
(	O
void	O
)	O
;	O
int	O
gcl_isnormal_double	function
(	O
double	O
d	double
)	O
{	O
union	O
{	O
double	O
d	double
;	O
int	O
i	array
[	O
2	int
]	O
;	O
}	O
u	union
;	O
if	O
(	O
!	O
ISFINITE	function
(	O
d	double
)	O
||	O
!	O
d	double
)	O
return	O
0	int
;	O
u	union
.	O
d	double
=	O
d	double
;	O
return	O
(	O
u	union
.	O
i	array
[	O
HIND	O
]	O
&	O
0x7ff00000	int
)	O
!=	O
0	int
;	O
}	O
int	O
gcl_isnormal_float	function
(	O
float	O
f	float
)	O
{	O
union	O
{	O
float	O
f	float
;	O
int	O
i	array
;	O
}	O
u	union
;	O
if	O
(	O
!	O
ISFINITE	function
(	O
f	float
)	O
||	O
!	O
f	float
)	O
return	O
0	int
;	O
u	union
.	O
f	float
=	O
f	float
;	O
return	O
(	O
u	union
.	O
i	array
&	O
0x7f800000	int
)	O
!=	O
0	int
;	O
}	O
static	O
void	O
integer_decode_double	function
(	O
double	O
d	double
,	O
int	O
*	O
hp	pointer
,	O
int	O
*	O
lp	pointer
,	O
int	O
*	O
ep	pointer
,	O
int	O
*	O
sp	pointer
)	O
{	O
int	O
h	int
,	O
l	int
;	O
union	O
{	O
double	O
d	double
;	O
int	O
i	array
[	O
2	int
]	O
;	O
}	O
u	union
;	O
if	O
(	O
d	double
==	O
0.0	int
)	O
{	O
*	O
hp	pointer
=	O
*	O
lp	pointer
=	O
0	int
;	O
*	O
ep	pointer
=	O
0	int
;	O
*	O
sp	pointer
=	O
1	int
;	O
return	O
;	O
}	O
u	union
.	O
d	double
=	O
d	double
;	O
h	int
=	O
u	union
.	O
i	array
[	O
HIND	O
]	O
;	O
l	int
=	O
u	union
.	O
i	array
[	O
LIND	O
]	O
;	O
if	O
(	O
ISNORMAL	O
(	O
d	double
)	O
)	O
{	O
*	O
ep	pointer
=	O
(	O
(	O
h	int
&	O
0x7ff00000	int
)	O
>>	O
20	int
)	O
-	O
1022	int
-	O
53	int
;	O
h	int
=	O
(	O
(	O
h	int
&	O
0x000fffff	int
)	O
|	O
0x00100000	int
)	O
;	O
}	O
else	O
{	O
*	O
ep	pointer
=	O
(	O
(	O
h	int
&	O
0x7fe00000	int
)	O
>>	O
20	int
)	O
-	O
1022	int
-	O
53	int
+	O
1	int
;	O
h	int
=	O
(	O
h	int
&	O
0x001fffff	int
)	O
;	O
}	O
if	O
(	O
32	int
-	O
BIG_RADIX	O
)	O
{	O
h	int
=	O
h	int
<<	O
(	O
32	int
-	O
BIG_RADIX	O
)	O
;	O
h	int
|=	O
(	O
(	O
l	int
&	O
(	O
-	O
1	int
<<	O
(	O
32	int
-	O
BIG_RADIX	O
)	O
)	O
)	O
>>	O
(	O
32	int
-	O
BIG_RADIX	O
)	O
)	O
;	O
l	int
&=	O
~	O
(	O
-	O
1	int
<<	O
(	O
32	int
-	O
BIG_RADIX	O
)	O
)	O
;	O
}	O
*	O
hp	pointer
=	O
h	int
;	O
*	O
lp	pointer
=	O
l	int
;	O
*	O
sp	pointer
=	O
(	O
d	double
>	O
0.0	int
?	O
1	int
:	O
-	O
1	int
)	O
;	O
}	O
static	O
void	O
integer_decode_float	function
(	O
double	O
d	double
,	O
int	O
*	O
mp	pointer
,	O
int	O
*	O
ep	pointer
,	O
int	O
*	O
sp	pointer
)	O
{	O
float	O
f	float
;	O
int	O
m	int
;	O
union	O
{	O
float	O
f	float
;	O
int	O
i	array
;	O
}	O
u	union
;	O
f	float
=	O
d	double
;	O
if	O
(	O
f	float
==	O
0.0	int
)	O
{	O
*	O
mp	pointer
=	O
0	int
;	O
*	O
ep	pointer
=	O
0	int
;	O
*	O
sp	pointer
=	O
1	int
;	O
return	O
;	O
}	O
u	union
.	O
f	float
=	O
f	float
;	O
m	int
=	O
u	union
.	O
i	array
;	O
if	O
(	O
ISNORMAL	O
(	O
f	float
)	O
)	O
{	O
*	O
ep	pointer
=	O
(	O
(	O
m	int
&	O
0x7f800000	int
)	O
>>	O
23	int
)	O
-	O
126	int
-	O
24	int
;	O
*	O
mp	pointer
=	O
(	O
m	int
&	O
0x007fffff	int
)	O
|	O
0x00800000	int
;	O
}	O
else	O
{	O
*	O
ep	pointer
=	O
(	O
(	O
m	int
&	O
0x7f000000	int
)	O
>>	O
23	int
)	O
-	O
126	int
-	O
24	int
+	O
1	int
;	O
*	O
mp	pointer
=	O
m	int
&	O
0x00ffffff	int
;	O
}	O
*	O
sp	pointer
=	O
(	O
f	float
>	O
0.0	int
?	O
1	int
:	O
-	O
1	int
)	O
;	O
}	O
static	O
int	O
double_exponent	function
(	O
double	O
d	double
)	O
{	O
union	O
{	O
double	O
d	double
;	O
int	O
i	array
[	O
2	int
]	O
;	O
}	O
u	union
;	O
if	O
(	O
d	double
==	O
0.0	int
)	O
return	O
(	O
0	int
)	O
;	O
u	union
.	O
d	double
=	O
d	double
;	O
return	O
(	O
(	O
(	O
u	union
.	O
i	array
[	O
HIND	O
]	O
&	O
0x7ff00000	int
)	O
>>	O
20	int
)	O
-	O
1022	int
)	O
;	O
}	O
static	O
double	O
set_exponent	function
(	O
double	O
d	double
,	O
int	O
e	int
)	O
{	O
union	O
{	O
double	O
d	double
;	O
int	O
i	array
[	O
2	int
]	O
;	O
}	O
u	union
;	O
if	O
(	O
d	double
==	O
0.0	int
)	O
return	O
(	O
0.0	int
)	O
;	O
u	union
.	O
d	double
=	O
d	double
;	O
u	union
.	O
i	array
[	O
HIND	O
]	O
=	O
(	O
u	union
.	O
i	array
[	O
HIND	O
]	O
&	O
0x800fffff	int
)	O
|	O
(	O
(	O
(	O
e	int
+	O
1022	int
)	O
<<	O
20	int
)	O
&	O
0x7ff00000	int
)	O
;	O
return	O
(	O
u	union
.	O
d	double
)	O
;	O
}	O
object	O
double_to_integer	function
(	O
double	O
d	double
)	O
{	O
int	O
h	int
,	O
l	int
,	O
e	int
,	O
s	int
;	O
object	O
x	int
;	O
vs_mark	O
;	O
if	O
(	O
d	double
==	O
0.0	int
)	O
return	O
(	O
small_fixnum	function
(	O
0	int
)	O
)	O
;	O
integer_decode_double	function
(	O
d	double
,	O
&	O
h	int
,	O
&	O
l	int
,	O
&	O
e	int
,	O
&	O
s	int
)	O
;	O
if	O
(	O
e	int
<=	O
-	O
BIG_RADIX	O
)	O
{	O
e	int
=	O
(	O
-	O
e	int
)	O
-	O
BIG_RADIX	O
;	O
if	O
(	O
e	int
>=	O
BIG_RADIX	O
)	O
return	O
(	O
small_fixnum	function
(	O
0	int
)	O
)	O
;	O
h	int
>>=	O
e	int
;	O
return	O
(	O
make_fixnum	function
(	O
s	int
*	O
h	int
)	O
)	O
;	O
}	O
if	O
(	O
h	int
!=	O
0	int
||	O
l	int
<	O
0	int
)	O
x	int
=	O
bignum2	function
(	O
h	int
,	O
l	int
)	O
;	O
else	O
x	int
=	O
make_fixnum	function
(	O
l	int
)	O
;	O
vs_push	function
(	O
x	int
)	O
;	O
x	int
=	O
integer_fix_shift	function
(	O
x	int
,	O
e	int
)	O
;	O
if	O
(	O
s	int
<	O
0	int
)	O
{	O
vs_push	function
(	O
x	int
)	O
;	O
x	int
=	O
number_negate	function
(	O
x	int
)	O
;	O
}	O
vs_reset	O
;	O
return	O
(	O
x	int
)	O
;	O
}	O
static	O
object	O
num_remainder	function
(	O
object	O
x	int
,	O
object	O
y	int
,	O
object	O
q	int
)	O
{	O
object	O
z	int
;	O
z	int
=	O
number_times	function
(	O
q	int
,	O
y	int
)	O
;	O
vs_push	function
(	O
z	int
)	O
;	O
z	int
=	O
number_minus	function
(	O
x	int
,	O
z	int
)	O
;	O
vs_popp	O
;	O
return	O
(	O
z	int
)	O
;	O
}	O
LFD	function
(	O
Lfloat	int
)	O
(	O
void	O
)	O
{	O
double	O
d	double
;	O
int	O
narg	int
;	O
object	O
x	int
;	O
enum	O
type	O
t	enum
=	O
t_longfloat	O
;	O
narg	int
=	O
vs_top	O
-	O
vs_base	O
;	O
if	O
(	O
narg	int
<	O
1	int
)	O
too_few_arguments	function
(	O
)	O
;	O
else	O
if	O
(	O
narg	int
>	O
2	int
)	O
too_many_arguments	function
(	O
)	O
;	O
if	O
(	O
narg	int
==	O
2	int
)	O
{	O
check_type_float	function
(	O
&	O
vs_base	O
[	O
1	int
]	O
)	O
;	O
t	enum
=	O
type_of	function
(	O
vs_base	O
[	O
1	int
]	O
)	O
;	O
}	O
x	int
=	O
vs_base	O
[	O
0	int
]	O
;	O
switch	O
(	O
type_of	function
(	O
x	int
)	O
)	O
{	O
case	O
t_fixnum	O
:	O
if	O
(	O
narg	int
>	O
1	int
&&	O
t	enum
==	O
t_shortfloat	O
)	O
x	int
=	O
make_shortfloat	function
(	O
(	O
shortfloat	O
)	O
(	O
fix	function
(	O
x	int
)	O
)	O
)	O
;	O
else	O
x	int
=	O
make_longfloat	function
(	O
(	O
double	O
)	O
(	O
fix	function
(	O
x	int
)	O
)	O
)	O
;	O
break	O
;	O
case	O
t_bignum	O
:	O
case	O
t_ratio	O
:	O
d	double
=	O
number_to_double	function
(	O
x	int
)	O
;	O
if	O
(	O
narg	int
>	O
1	int
&&	O
t	enum
==	O
t_shortfloat	O
)	O
x	int
=	O
make_shortfloat	function
(	O
(	O
shortfloat	O
)	O
d	double
)	O
;	O
else	O
x	int
=	O
make_longfloat	function
(	O
d	double
)	O
;	O
break	O
;	O
case	O
t_shortfloat	O
:	O
if	O
(	O
narg	int
>	O
1	int
&&	O
t	enum
==	O
t_shortfloat	O
)	O
;	O
else	O
x	int
=	O
make_longfloat	function
(	O
(	O
double	O
)	O
(	O
sf	function
(	O
x	int
)	O
)	O
)	O
;	O
break	O
;	O
case	O
t_longfloat	O
:	O
if	O
(	O
narg	int
>	O
1	int
&&	O
t	enum
==	O
t_shortfloat	O
)	O
x	int
=	O
make_shortfloat	function
(	O
(	O
shortfloat	O
)	O
(	O
lf	function
(	O
x	int
)	O
)	O
)	O
;	O
break	O
;	O
default	O
:	O
FEwrong_type_argument	function
(	O
TSor_rational_float	O
,	O
x	int
)	O
;	O
}	O
vs_base	O
=	O
vs_top	O
;	O
vs_push	function
(	O
x	int
)	O
;	O
}	O
LFD	function
(	O
Lnumerator	int
)	O
(	O
void	O
)	O
{	O
check_arg	function
(	O
1	int
)	O
;	O
check_type_rational	function
(	O
&	O
vs_base	O
[	O
0	int
]	O
)	O
;	O
if	O
(	O
type_of	function
(	O
vs_base	O
[	O
0	int
]	O
)	O
==	O
t_ratio	O
)	O
vs_base	O
[	O
0	int
]	O
=	O
vs_base	O
[	O
0	int
]	O
->	O
rat	O
.	O
rat_num	O
;	O
}	O
LFD	function
(	O
Ldenominator	int
)	O
(	O
void	O
)	O
{	O
check_arg	function
(	O
1	int
)	O
;	O
check_type_rational	function
(	O
&	O
vs_base	O
[	O
0	int
]	O
)	O
;	O
if	O
(	O
type_of	function
(	O
vs_base	O
[	O
0	int
]	O
)	O
==	O
t_ratio	O
)	O
vs_base	O
[	O
0	int
]	O
=	O
vs_base	O
[	O
0	int
]	O
->	O
rat	O
.	O
rat_den	O
;	O
else	O
vs_base	O
[	O
0	int
]	O
=	O
small_fixnum	function
(	O
1	int
)	O
;	O
}	O
inline	O
void	O
intdivrem	function
(	O
object	O
x	int
,	O
object	O
y	int
,	O
fixnum	O
d	double
,	O
object	O
*	O
q	int
,	O
object	O
*	O
r	pointer
)	O
{	O
enum	O
type	O
tx	enum
=	O
type_of	function
(	O
x	int
)	O
,	O
ty	enum
=	O
type_of	function
(	O
y	int
)	O
;	O
object	O
z	int
,	O
q2	O
,	O
q1	O
;	O
if	O
(	O
number_zerop	function
(	O
y	int
)	O
==	O
TRUE	O
)	O
zero_divisor	function
(	O
)	O
;	O
switch	O
(	O
tx	enum
)	O
{	O
case	O
t_fixnum	O
:	O
case	O
t_bignum	O
:	O
switch	O
(	O
ty	enum
)	O
{	O
case	O
t_fixnum	O
:	O
case	O
t_bignum	O
:	O
integer_quotient_remainder_1	function
(	O
x	int
,	O
y	int
,	O
q	int
,	O
r	pointer
,	O
d	double
)	O
;	O
return	O
;	O
case	O
t_ratio	O
:	O
z	int
=	O
integer_divide1	function
(	O
number_times	function
(	O
y	int
->	O
rat	O
.	O
rat_den	O
,	O
x	int
)	O
,	O
y	int
->	O
rat	O
.	O
rat_num	O
,	O
d	double
)	O
;	O
if	O
(	O
q	int
)	O
*	O
q	int
=	O
z	int
;	O
if	O
(	O
r	pointer
)	O
*	O
r	pointer
=	O
num_remainder	function
(	O
x	int
,	O
y	int
,	O
z	int
)	O
;	O
return	O
;	O
default	O
:	O
break	O
;	O
}	O
break	O
;	O
case	O
t_ratio	O
:	O
switch	O
(	O
ty	enum
)	O
{	O
case	O
t_fixnum	O
:	O
case	O
t_bignum	O
:	O
z	int
=	O
integer_divide1	function
(	O
x	int
->	O
rat	O
.	O
rat_num	O
,	O
number_times	function
(	O
x	int
->	O
rat	O
.	O
rat_den	O
,	O
y	int
)	O
,	O
d	double
)	O
;	O
if	O
(	O
q	int
)	O
*	O
q	int
=	O
z	int
;	O
if	O
(	O
r	pointer
)	O
*	O
r	pointer
=	O
num_remainder	function
(	O
x	int
,	O
y	int
,	O
z	int
)	O
;	O
return	O
;	O
case	O
t_ratio	O
:	O
z	int
=	O
integer_divide1	function
(	O
number_times	function
(	O
x	int
->	O
rat	O
.	O
rat_num	O
,	O
y	int
->	O
rat	O
.	O
rat_den	O
)	O
,	O
number_times	function
(	O
x	int
->	O
rat	O
.	O
rat_den	O
,	O
y	int
->	O
rat	O
.	O
rat_num	O
)	O
,	O
d	double
)	O
;	O
if	O
(	O
q	int
)	O
*	O
q	int
=	O
z	int
;	O
if	O
(	O
r	pointer
)	O
*	O
r	pointer
=	O
num_remainder	function
(	O
x	int
,	O
y	int
,	O
z	int
)	O
;	O
return	O
;	O
default	O
:	O
break	O
;	O
}	O
break	O
;	O
default	O
:	O
break	O
;	O
}	O
q2	O
=	O
number_divide	function
(	O
x	int
,	O
y	int
)	O
;	O
q1	O
=	O
double_to_integer	function
(	O
number_to_double	function
(	O
q2	O
)	O
)	O
;	O
if	O
(	O
d	double
&&	O
(	O
d	double
<	O
0	int
?	O
number_minusp	function
(	O
q2	O
)	O
:	O
number_plusp	function
(	O
q2	O
)	O
)	O
&&	O
number_compare	function
(	O
q2	O
,	O
q1	O
)	O
)	O
q1	O
=	O
d	double
<	O
0	int
?	O
one_minus	function
(	O
q1	O
)	O
:	O
one_plus	function
(	O
q1	O
)	O
;	O
if	O
(	O
q	int
)	O
*	O
q	int
=	O
q1	O
;	O
if	O
(	O
r	pointer
)	O
*	O
r	pointer
=	O
num_remainder	function
(	O
x	int
,	O
y	int
,	O
q1	O
)	O
;	O
return	O
;	O
}	O
object	O
number_ldb	function
(	O
object	O
x	int
,	O
object	O
y	int
)	O
{	O
return	O
ifuncall2	function
(	O
sLldb	O
,	O
x	int
,	O
y	int
)	O
;	O
}	O
object	O
number_ldbt	function
(	O
object	O
x	int
,	O
object	O
y	int
)	O
{	O
return	O
ifuncall2	function
(	O
sLldb_test	O
,	O
x	int
,	O
y	int
)	O
;	O
}	O
object	O
number_dpb	function
(	O
object	O
x	int
,	O
object	O
y	int
,	O
object	O
z	int
)	O
{	O
return	O
ifuncall3	function
(	O
sLdpb	O
,	O
x	int
,	O
y	int
,	O
z	int
)	O
;	O
}	O
object	O
number_dpf	function
(	O
object	O
x	int
,	O
object	O
y	int
,	O
object	O
z	int
)	O
{	O
return	O
ifuncall3	function
(	O
sLdeposit_field	O
,	O
x	int
,	O
y	int
,	O
z	int
)	O
;	O
}	O
LFD	function
(	O
Lfloor	int
)	O
(	O
void	O
)	O
{	O
object	O
x	int
,	O
y	int
;	O
int	O
n	int
=	O
vs_top	O
-	O
vs_base	O
;	O
if	O
(	O
n	int
==	O
0	int
)	O
too_few_arguments	function
(	O
)	O
;	O
if	O
(	O
n	int
>	O
2	int
)	O
too_many_arguments	function
(	O
)	O
;	O
x	int
=	O
vs_base	O
[	O
0	int
]	O
;	O
y	int
=	O
n	int
>	O
1	int
?	O
vs_base	O
[	O
1	int
]	O
:	O
small_fixnum	function
(	O
1	int
)	O
;	O
intdivrem	function
(	O
x	int
,	O
y	int
,	O
-	O
1	int
,	O
&	O
x	int
,	O
&	O
y	int
)	O
;	O
vs_top	O
=	O
vs_base	O
;	O
vs_push	function
(	O
x	int
)	O
;	O
vs_push	function
(	O
y	int
)	O
;	O
}	O
LFD	function
(	O
Lceiling	int
)	O
(	O
void	O
)	O
{	O
object	O
x	int
,	O
y	int
;	O
int	O
n	int
=	O
vs_top	O
-	O
vs_base	O
;	O
if	O
(	O
n	int
==	O
0	int
)	O
too_few_arguments	function
(	O
)	O
;	O
if	O
(	O
n	int
>	O
2	int
)	O
too_many_arguments	function
(	O
)	O
;	O
x	int
=	O
vs_base	O
[	O
0	int
]	O
;	O
y	int
=	O
n	int
>	O
1	int
?	O
vs_base	O
[	O
1	int
]	O
:	O
small_fixnum	function
(	O
1	int
)	O
;	O
intdivrem	function
(	O
x	int
,	O
y	int
,	O
1	int
,	O
&	O
x	int
,	O
&	O
y	int
)	O
;	O
vs_top	O
=	O
vs_base	O
;	O
vs_push	function
(	O
x	int
)	O
;	O
vs_push	function
(	O
y	int
)	O
;	O
}	O
LFD	function
(	O
Ltruncate	int
)	O
(	O
void	O
)	O
{	O
object	O
x	int
,	O
y	int
;	O
int	O
n	int
=	O
vs_top	O
-	O
vs_base	O
;	O
if	O
(	O
n	int
==	O
0	int
)	O
too_few_arguments	function
(	O
)	O
;	O
if	O
(	O
n	int
>	O
2	int
)	O
too_many_arguments	function
(	O
)	O
;	O
x	int
=	O
vs_base	O
[	O
0	int
]	O
;	O
y	int
=	O
n	int
>	O
1	int
?	O
vs_base	O
[	O
1	int
]	O
:	O
small_fixnum	function
(	O
1	int
)	O
;	O
intdivrem	function
(	O
x	int
,	O
y	int
,	O
0	int
,	O
&	O
x	int
,	O
&	O
y	int
)	O
;	O
vs_top	O
=	O
vs_base	O
;	O
vs_push	function
(	O
x	int
)	O
;	O
vs_push	function
(	O
y	int
)	O
;	O
}	O
LFD	function
(	O
Lround	int
)	O
(	O
void	O
)	O
{	O
object	O
x	int
,	O
y	int
,	O
q	int
,	O
q1	O
,	O
r	pointer
;	O
double	O
d	double
;	O
int	O
n	int
,	O
c	int
;	O
object	O
one_plus	function
(	O
object	O
x	int
)	O
,	O
one_minus	function
(	O
object	O
x	int
)	O
;	O
n	int
=	O
vs_top	O
-	O
vs_base	O
;	O
if	O
(	O
n	int
==	O
0	int
)	O
too_few_arguments	function
(	O
)	O
;	O
if	O
(	O
n	int
>	O
1	int
)	O
goto	O
TWO_ARG	O
;	O
x	int
=	O
vs_base	O
[	O
0	int
]	O
;	O
switch	O
(	O
type_of	function
(	O
x	int
)	O
)	O
{	O
case	O
t_fixnum	O
:	O
case	O
t_bignum	O
:	O
vs_push	function
(	O
small_fixnum	function
(	O
0	int
)	O
)	O
;	O
return	O
;	O
case	O
t_ratio	O
:	O
q	int
=	O
x	int
;	O
y	int
=	O
small_fixnum	function
(	O
1	int
)	O
;	O
goto	O
RATIO	O
;	O
case	O
t_shortfloat	O
:	O
d	double
=	O
(	O
double	O
)	O
(	O
sf	function
(	O
x	int
)	O
)	O
;	O
if	O
(	O
d	double
>=	O
0.0	int
)	O
q	int
=	O
double_to_integer	function
(	O
d	double
+	O
0.5	int
)	O
;	O
else	O
q	int
=	O
double_to_integer	function
(	O
d	double
-	O
0.5	int
)	O
;	O
d	double
-=	O
number_to_double	function
(	O
q	int
)	O
;	O
if	O
(	O
d	double
==	O
0.5	int
&&	O
number_oddp	function
(	O
q	int
)	O
)	O
{	O
vs_push	function
(	O
q	int
)	O
;	O
q	int
=	O
one_plus	function
(	O
q	int
)	O
;	O
d	double
=	O
-	O
0.5	int
;	O
}	O
if	O
(	O
d	double
==	O
-	O
0.5	int
&&	O
number_oddp	function
(	O
q	int
)	O
)	O
{	O
vs_push	function
(	O
q	int
)	O
;	O
q	int
=	O
one_minus	function
(	O
q	int
)	O
;	O
d	double
=	O
0.5	int
;	O
}	O
vs_base	O
=	O
vs_top	O
;	O
vs_push	function
(	O
q	int
)	O
;	O
vs_push	function
(	O
make_shortfloat	function
(	O
(	O
shortfloat	O
)	O
d	double
)	O
)	O
;	O
return	O
;	O
case	O
t_longfloat	O
:	O
d	double
=	O
lf	function
(	O
x	int
)	O
;	O
if	O
(	O
d	double
>=	O
0.0	int
)	O
q	int
=	O
double_to_integer	function
(	O
d	double
+	O
0.5	int
)	O
;	O
else	O
q	int
=	O
double_to_integer	function
(	O
d	double
-	O
0.5	int
)	O
;	O
d	double
-=	O
number_to_double	function
(	O
q	int
)	O
;	O
if	O
(	O
d	double
==	O
0.5	int
&&	O
number_oddp	function
(	O
q	int
)	O
)	O
{	O
vs_push	function
(	O
q	int
)	O
;	O
q	int
=	O
one_plus	function
(	O
q	int
)	O
;	O
d	double
=	O
-	O
0.5	int
;	O
}	O
if	O
(	O
d	double
==	O
-	O
0.5	int
&&	O
number_oddp	function
(	O
q	int
)	O
)	O
{	O
vs_push	function
(	O
q	int
)	O
;	O
q	int
=	O
one_minus	function
(	O
q	int
)	O
;	O
d	double
=	O
0.5	int
;	O
}	O
vs_base	O
=	O
vs_top	O
;	O
vs_push	function
(	O
q	int
)	O
;	O
vs_push	function
(	O
make_longfloat	function
(	O
d	double
)	O
)	O
;	O
return	O
;	O
default	O
:	O
FEwrong_type_argument	function
(	O
TSor_rational_float	O
,	O
x	int
)	O
;	O
}	O
TWO_ARG	O
:	O
if	O
(	O
n	int
>	O
2	int
)	O
too_many_arguments	function
(	O
)	O
;	O
x	int
=	O
vs_base	O
[	O
0	int
]	O
;	O
y	int
=	O
vs_base	O
[	O
1	int
]	O
;	O
check_type_or_rational_float	function
(	O
&	O
vs_base	O
[	O
0	int
]	O
)	O
;	O
check_type_or_rational_float	function
(	O
&	O
vs_base	O
[	O
1	int
]	O
)	O
;	O
q	int
=	O
number_divide	function
(	O
x	int
,	O
y	int
)	O
;	O
vs_push	function
(	O
q	int
)	O
;	O
switch	O
(	O
type_of	function
(	O
q	int
)	O
)	O
{	O
case	O
t_fixnum	O
:	O
case	O
t_bignum	O
:	O
vs_base	O
=	O
vs_top	O
;	O
vs_push	function
(	O
q	int
)	O
;	O
vs_push	function
(	O
small_fixnum	function
(	O
0	int
)	O
)	O
;	O
break	O
;	O
case	O
t_ratio	O
:	O
RATIO	O
:	O
q1	O
=	O
integer_divide1	function
(	O
q	int
->	O
rat	O
.	O
rat_num	O
,	O
q	int
->	O
rat	O
.	O
rat_den	O
,	O
0	int
)	O
;	O
vs_push	function
(	O
q1	O
)	O
;	O
r	pointer
=	O
number_minus	function
(	O
q	int
,	O
q1	O
)	O
;	O
vs_push	function
(	O
r	pointer
)	O
;	O
if	O
(	O
(	O
c	int
=	O
number_compare	function
(	O
r	pointer
,	O
plus_half	int
)	O
)	O
>	O
0	int
||	O
(	O
c	int
==	O
0	int
&&	O
number_oddp	function
(	O
q1	O
)	O
)	O
)	O
q1	O
=	O
one_plus	function
(	O
q1	O
)	O
;	O
if	O
(	O
(	O
c	int
=	O
number_compare	function
(	O
r	pointer
,	O
minus_half	O
)	O
)	O
<	O
0	int
||	O
(	O
c	int
==	O
0	int
&&	O
number_oddp	function
(	O
q1	O
)	O
)	O
)	O
q1	O
=	O
one_minus	function
(	O
q1	O
)	O
;	O
vs_base	O
=	O
vs_top	O
;	O
vs_push	function
(	O
q1	O
)	O
;	O
vs_push	function
(	O
num_remainder	function
(	O
x	int
,	O
y	int
,	O
q1	O
)	O
)	O
;	O
return	O
;	O
case	O
t_shortfloat	O
:	O
case	O
t_longfloat	O
:	O
d	double
=	O
number_to_double	function
(	O
q	int
)	O
;	O
if	O
(	O
d	double
>=	O
0.0	int
)	O
q1	O
=	O
double_to_integer	function
(	O
d	double
+	O
0.5	int
)	O
;	O
else	O
q1	O
=	O
double_to_integer	function
(	O
d	double
-	O
0.5	int
)	O
;	O
d	double
-=	O
number_to_double	function
(	O
q1	O
)	O
;	O
if	O
(	O
d	double
==	O
0.5	int
&&	O
number_oddp	function
(	O
q1	O
)	O
)	O
{	O
vs_push	function
(	O
q1	O
)	O
;	O
q1	O
=	O
one_plus	function
(	O
q1	O
)	O
;	O
}	O
if	O
(	O
d	double
==	O
-	O
0.5	int
&&	O
number_oddp	function
(	O
q1	O
)	O
)	O
{	O
vs_push	function
(	O
q1	O
)	O
;	O
q1	O
=	O
one_minus	function
(	O
q1	O
)	O
;	O
}	O
vs_base	O
=	O
vs_top	O
;	O
vs_push	function
(	O
q1	O
)	O
;	O
vs_push	function
(	O
num_remainder	function
(	O
x	int
,	O
y	int
,	O
q1	O
)	O
)	O
;	O
return	O
;	O
default	O
:	O
break	O
;	O
}	O
}	O
LFD	function
(	O
Lmod	int
)	O
(	O
void	O
)	O
{	O
check_arg	function
(	O
2	int
)	O
;	O
intdivrem	function
(	O
vs_base	O
[	O
0	int
]	O
,	O
vs_base	O
[	O
1	int
]	O
,	O
-	O
1	int
,	O
NULL	O
,	O
vs_base	O
)	O
;	O
vs_top	O
=	O
vs_base	O
+	O
1	int
;	O
}	O
LFD	function
(	O
Lrem	int
)	O
(	O
void	O
)	O
{	O
check_arg	function
(	O
2	int
)	O
;	O
intdivrem	function
(	O
vs_base	O
[	O
0	int
]	O
,	O
vs_base	O
[	O
1	int
]	O
,	O
0	int
,	O
NULL	O
,	O
vs_base	O
)	O
;	O
vs_top	O
=	O
vs_base	O
+	O
1	int
;	O
}	O
LFD	function
(	O
Ldecode_float	int
)	O
(	O
void	O
)	O
{	O
object	O
x	int
;	O
double	O
d	double
;	O
int	O
e	int
,	O
s	int
;	O
check_arg	function
(	O
1	int
)	O
;	O
check_type_float	function
(	O
&	O
vs_base	O
[	O
0	int
]	O
)	O
;	O
x	int
=	O
vs_base	O
[	O
0	int
]	O
;	O
if	O
(	O
type_of	function
(	O
x	int
)	O
==	O
t_shortfloat	O
)	O
d	double
=	O
sf	function
(	O
x	int
)	O
;	O
else	O
d	double
=	O
lf	function
(	O
x	int
)	O
;	O
if	O
(	O
d	double
>=	O
0.0	int
)	O
s	int
=	O
1	int
;	O
else	O
{	O
d	double
=	O
-	O
d	double
;	O
s	int
=	O
-	O
1	int
;	O
}	O
e	int
=	O
0	int
;	O
if	O
(	O
!	O
ISNORMAL	O
(	O
d	double
)	O
)	O
{	O
int	O
hp	pointer
,	O
lp	pointer
,	O
sp	pointer
;	O
integer_decode_double	function
(	O
d	double
,	O
&	O
hp	pointer
,	O
&	O
lp	pointer
,	O
&	O
e	int
,	O
&	O
sp	pointer
)	O
;	O
if	O
(	O
hp	pointer
!=	O
0	int
||	O
lp	pointer
<	O
0	int
)	O
d	double
=	O
number_to_double	function
(	O
bignum2	function
(	O
hp	pointer
,	O
lp	pointer
)	O
)	O
;	O
else	O
d	double
=	O
lp	pointer
;	O
}	O
e	int
+=	O
double_exponent	function
(	O
d	double
)	O
;	O
d	double
=	O
set_exponent	function
(	O
d	double
,	O
0	int
)	O
;	O
vs_top	O
=	O
vs_base	O
;	O
if	O
(	O
type_of	function
(	O
x	int
)	O
==	O
t_shortfloat	O
)	O
{	O
vs_push	function
(	O
make_shortfloat	function
(	O
(	O
shortfloat	O
)	O
d	double
)	O
)	O
;	O
vs_push	function
(	O
make_fixnum	function
(	O
e	int
)	O
)	O
;	O
vs_push	function
(	O
make_shortfloat	function
(	O
(	O
shortfloat	O
)	O
s	int
)	O
)	O
;	O
}	O
else	O
{	O
vs_push	function
(	O
make_longfloat	function
(	O
d	double
)	O
)	O
;	O
vs_push	function
(	O
make_fixnum	function
(	O
e	int
)	O
)	O
;	O
vs_push	function
(	O
make_longfloat	function
(	O
(	O
double	O
)	O
s	int
)	O
)	O
;	O
}	O
}	O
LFD	function
(	O
Lscale_float	int
)	O
(	O
void	O
)	O
{	O
object	O
x	int
;	O
double	O
d	double
;	O
int	O
e	int
,	O
k	int
=	O
0	int
;	O
check_arg	function
(	O
2	int
)	O
;	O
check_type_float	function
(	O
&	O
vs_base	O
[	O
0	int
]	O
)	O
;	O
x	int
=	O
vs_base	O
[	O
0	int
]	O
;	O
if	O
(	O
type_of	function
(	O
vs_base	O
[	O
1	int
]	O
)	O
==	O
t_fixnum	O
)	O
k	int
=	O
fix	function
(	O
vs_base	O
[	O
1	int
]	O
)	O
;	O
else	O
FEerror	function
(	O
"~S is an illegal exponent."	pointer
,	O
1	int
,	O
vs_base	O
[	O
1	int
]	O
)	O
;	O
if	O
(	O
type_of	function
(	O
x	int
)	O
==	O
t_shortfloat	O
)	O
d	double
=	O
sf	function
(	O
x	int
)	O
;	O
else	O
d	double
=	O
lf	function
(	O
x	int
)	O
;	O
e	int
=	O
double_exponent	function
(	O
d	double
)	O
+	O
k	int
;	O
{	O
for	O
(	O
;	O
k	int
>	O
0	int
;	O
d	double
*=	O
2.0	int
,	O
k	int
--	O
)	O
;	O
for	O
(	O
;	O
k	int
<	O
0	int
;	O
d	double
*=	O
0.5	int
,	O
k	int
++	O
)	O
;	O
}	O
else	O
d	double
=	O
set_exponent	function
(	O
d	double
,	O
e	int
)	O
;	O
vs_popp	O
;	O
if	O
(	O
type_of	function
(	O
x	int
)	O
==	O
t_shortfloat	O
)	O
vs_base	O
[	O
0	int
]	O
=	O
make_shortfloat	function
(	O
(	O
shortfloat	O
)	O
d	double
)	O
;	O
else	O
vs_base	O
[	O
0	int
]	O
=	O
make_longfloat	function
(	O
d	double
)	O
;	O
}	O
LFD	function
(	O
Lfloat_radix	int
)	O
(	O
void	O
)	O
{	O
check_arg	function
(	O
1	int
)	O
;	O
check_type_float	function
(	O
&	O
vs_base	O
[	O
0	int
]	O
)	O
;	O
}	O
LFD	function
(	O
Lfloat_sign	int
)	O
(	O
void	O
)	O
{	O
object	O
x	int
;	O
int	O
narg	int
;	O
double	O
d	double
,	O
f	float
;	O
narg	int
=	O
vs_top	O
-	O
vs_base	O
;	O
if	O
(	O
narg	int
<	O
1	int
)	O
too_few_arguments	function
(	O
)	O
;	O
else	O
if	O
(	O
narg	int
>	O
2	int
)	O
too_many_arguments	function
(	O
)	O
;	O
check_type_float	function
(	O
&	O
vs_base	O
[	O
0	int
]	O
)	O
;	O
x	int
=	O
vs_base	O
[	O
0	int
]	O
;	O
if	O
(	O
type_of	function
(	O
x	int
)	O
==	O
t_shortfloat	O
)	O
d	double
=	O
sf	function
(	O
x	int
)	O
;	O
else	O
d	double
=	O
lf	function
(	O
x	int
)	O
;	O
if	O
(	O
narg	int
==	O
1	int
)	O
f	float
=	O
1.0	int
;	O
else	O
{	O
check_type_float	function
(	O
&	O
vs_base	O
[	O
1	int
]	O
)	O
;	O
x	int
=	O
vs_base	O
[	O
1	int
]	O
;	O
if	O
(	O
type_of	function
(	O
x	int
)	O
==	O
t_shortfloat	O
)	O
f	float
=	O
sf	function
(	O
x	int
)	O
;	O
else	O
f	float
=	O
lf	function
(	O
x	int
)	O
;	O
if	O
(	O
f	float
<	O
0.0	int
)	O
f	float
=	O
-	O
f	float
;	O
}	O
if	O
(	O
d	double
<	O
0.0	int
)	O
f	float
=	O
-	O
f	float
;	O
vs_top	O
=	O
vs_base	O
;	O
if	O
(	O
type_of	function
(	O
x	int
)	O
==	O
t_shortfloat	O
)	O
vs_push	function
(	O
make_shortfloat	function
(	O
(	O
shortfloat	O
)	O
f	float
)	O
)	O
;	O
else	O
vs_push	function
(	O
make_longfloat	function
(	O
f	float
)	O
)	O
;	O
}	O
LFD	function
(	O
Lfloat_digits	int
)	O
(	O
void	O
)	O
{	O
check_arg	function
(	O
1	int
)	O
;	O
check_type_float	function
(	O
&	O
vs_base	O
[	O
0	int
]	O
)	O
;	O
if	O
(	O
type_of	function
(	O
vs_base	O
[	O
0	int
]	O
)	O
==	O
t_shortfloat	O
)	O
vs_base	O
[	O
0	int
]	O
=	O
small_fixnum	function
(	O
24	int
)	O
;	O
else	O
vs_base	O
[	O
0	int
]	O
=	O
small_fixnum	function
(	O
53	int
)	O
;	O
}	O
LFD	function
(	O
Lfloat_precision	int
)	O
(	O
void	O
)	O
{	O
object	O
x	int
;	O
check_arg	function
(	O
1	int
)	O
;	O
check_type_float	function
(	O
&	O
vs_base	O
[	O
0	int
]	O
)	O
;	O
x	int
=	O
vs_base	O
[	O
0	int
]	O
;	O
if	O
(	O
type_of	function
(	O
x	int
)	O
==	O
t_shortfloat	O
)	O
if	O
(	O
sf	function
(	O
x	int
)	O
==	O
0.0	int
)	O
vs_base	O
[	O
0	int
]	O
=	O
small_fixnum	function
(	O
0	int
)	O
;	O
else	O
vs_base	O
[	O
0	int
]	O
=	O
small_fixnum	function
(	O
24	int
)	O
;	O
else	O
if	O
(	O
lf	function
(	O
x	int
)	O
==	O
0.0	int
)	O
vs_base	O
[	O
0	int
]	O
=	O
small_fixnum	function
(	O
0	int
)	O
;	O
else	O
}	O
LFD	function
(	O
Linteger_decode_float	int
)	O
(	O
void	O
)	O
{	O
object	O
x	int
;	O
int	O
h	int
,	O
l	int
,	O
e	int
,	O
s	int
;	O
check_arg	function
(	O
1	int
)	O
;	O
check_type_float	function
(	O
&	O
vs_base	O
[	O
0	int
]	O
)	O
;	O
x	int
=	O
vs_base	O
[	O
0	int
]	O
;	O
vs_base	O
=	O
vs_top	O
;	O
if	O
(	O
type_of	function
(	O
x	int
)	O
==	O
t_longfloat	O
)	O
{	O
integer_decode_double	function
(	O
lf	function
(	O
x	int
)	O
,	O
&	O
h	int
,	O
&	O
l	int
,	O
&	O
e	int
,	O
&	O
s	int
)	O
;	O
if	O
(	O
h	int
!=	O
0	int
||	O
l	int
<	O
0	int
)	O
vs_push	function
(	O
bignum2	function
(	O
h	int
,	O
l	int
)	O
)	O
;	O
else	O
vs_push	function
(	O
make_fixnum	function
(	O
l	int
)	O
)	O
;	O
vs_push	function
(	O
make_fixnum	function
(	O
e	int
)	O
)	O
;	O
vs_push	function
(	O
make_fixnum	function
(	O
s	int
)	O
)	O
;	O
}	O
else	O
{	O
integer_decode_float	function
(	O
(	O
double	O
)	O
(	O
sf	function
(	O
x	int
)	O
)	O
,	O
&	O
h	int
,	O
&	O
e	int
,	O
&	O
s	int
)	O
;	O
vs_push	function
(	O
make_fixnum	function
(	O
h	int
)	O
)	O
;	O
vs_push	function
(	O
make_fixnum	function
(	O
e	int
)	O
)	O
;	O
vs_push	function
(	O
make_fixnum	function
(	O
s	int
)	O
)	O
;	O
}	O
}	O
LFD	function
(	O
Lcomplex	int
)	O
(	O
void	O
)	O
{	O
object	O
r	pointer
,	O
i	array
;	O
int	O
narg	int
;	O
narg	int
=	O
vs_top	O
-	O
vs_base	O
;	O
if	O
(	O
narg	int
<	O
1	int
)	O
too_few_arguments	function
(	O
)	O
;	O
if	O
(	O
narg	int
>	O
2	int
)	O
too_many_arguments	function
(	O
)	O
;	O
check_type_or_rational_float	function
(	O
&	O
vs_base	O
[	O
0	int
]	O
)	O
;	O
r	pointer
=	O
vs_base	O
[	O
0	int
]	O
;	O
if	O
(	O
narg	int
==	O
1	int
)	O
i	array
=	O
small_fixnum	function
(	O
0	int
)	O
;	O
else	O
{	O
check_type_or_rational_float	function
(	O
&	O
vs_base	O
[	O
1	int
]	O
)	O
;	O
i	array
=	O
vs_base	O
[	O
1	int
]	O
;	O
}	O
vs_top	O
=	O
vs_base	O
;	O
vs_push	function
(	O
make_complex	function
(	O
r	pointer
,	O
i	array
)	O
)	O
;	O
}	O
LFD	function
(	O
Lrealpart	int
)	O
(	O
void	O
)	O
{	O
object	O
x	int
;	O
check_arg	function
(	O
1	int
)	O
;	O
check_type_number	function
(	O
&	O
vs_base	O
[	O
0	int
]	O
)	O
;	O
x	int
=	O
vs_base	O
[	O
0	int
]	O
;	O
if	O
(	O
type_of	function
(	O
x	int
)	O
==	O
t_complex	O
)	O
vs_base	O
[	O
0	int
]	O
=	O
x	int
->	O
cmp	O
.	O
cmp_real	O
;	O
}	O
LFD	function
(	O
Limagpart	int
)	O
(	O
void	O
)	O
{	O
object	O
x	int
;	O
check_arg	function
(	O
1	int
)	O
;	O
check_type_number	function
(	O
&	O
vs_base	O
[	O
0	int
]	O
)	O
;	O
x	int
=	O
vs_base	O
[	O
0	int
]	O
;	O
switch	O
(	O
type_of	function
(	O
x	int
)	O
)	O
{	O
case	O
t_fixnum	O
:	O
case	O
t_bignum	O
:	O
case	O
t_ratio	O
:	O
vs_base	O
[	O
0	int
]	O
=	O
small_fixnum	function
(	O
0	int
)	O
;	O
break	O
;	O
case	O
t_shortfloat	O
:	O
vs_base	O
[	O
0	int
]	O
=	O
shortfloat_zero	O
;	O
break	O
;	O
case	O
t_longfloat	O
:	O
vs_base	O
[	O
0	int
]	O
=	O
longfloat_zero	O
;	O
break	O
;	O
case	O
t_complex	O
:	O
vs_base	O
[	O
0	int
]	O
=	O
x	int
->	O
cmp	O
.	O
cmp_imag	O
;	O
break	O
;	O
default	O
:	O
break	O
;	O
}	O
}	O
void	O
gcl_init_num_co	function
(	O
void	O
)	O
{	O
float	O
smallest_float	float
,	O
smallest_norm_float	float
,	O
biggest_float	float
;	O
double	O
smallest_double	double
,	O
smallest_norm_double	double
,	O
biggest_double	double
;	O
float	O
float_epsilon	float
,	O
float_negative_epsilon	float
;	O
double	O
double_epsilon	double
,	O
double_negative_epsilon	double
;	O
union	O
{	O
double	O
d	double
;	O
int	O
i	array
[	O
2	int
]	O
;	O
}	O
u	union
;	O
union	O
{	O
float	O
f	float
;	O
int	O
i	array
;	O
}	O
uf	union
;	O
{	O
volatile	O
double	O
rd	double
,	O
dd	double
,	O
td	double
,	O
td1	double
;	O
volatile	O
float	O
rf	float
,	O
df	float
,	O
tf	float
,	O
tf1	float
;	O
int	O
i	array
,	O
j	int
;	O
for	O
(	O
rf	float
=	O
1.0f	int
,	O
df	float
=	O
0.5f	int
,	O
i	array
=	O
j	int
=	O
0	int
;	O
i	array
<	O
MAX	int
&&	O
j	int
<	O
MAX	int
&&	O
df	float
!=	O
1.0f	int
;	O
i	array
++	O
,	O
df	float
=	O
1.0f	int
-	O
(	O
0.5f	int
*	O
(	O
1.0f	int
-	O
df	float
)	O
)	O
)	O
for	O
(	O
tf	float
=	O
rf	float
,	O
tf1	float
=	O
tf	float
+	O
1.0f	int
,	O
j	int
=	O
0	int
;	O
j	int
<	O
MAX	int
&&	O
tf1	float
!=	O
1.0f	int
;	O
j	int
++	O
,	O
rf	float
=	O
tf	float
,	O
tf	float
*=	O
df	float
,	O
tf1	float
=	O
tf	float
+	O
1.0f	int
)	O
;	O
if	O
(	O
i	array
==	O
MAX	int
||	O
j	int
==	O
MAX	int
)	O
printf	O
(	O
"WARNING, cannot calculate float_epsilon: %d %d %f   %f %f %f\n"	pointer
,	O
i	array
,	O
j	int
,	O
rf	float
,	O
df	float
,	O
tf	float
,	O
tf1	float
)	O
;	O
float_epsilon	float
=	O
rf	float
;	O
for	O
(	O
rf	float
=	O
1.0f	int
,	O
df	float
=	O
0.5f	int
,	O
i	array
=	O
j	int
=	O
0	int
;	O
i	array
<	O
MAX	int
&&	O
j	int
<	O
MAX	int
&&	O
df	float
!=	O
1.0f	int
;	O
i	array
++	O
,	O
df	float
=	O
1.0f	int
-	O
(	O
0.5f	int
*	O
(	O
1.0f	int
-	O
df	float
)	O
)	O
)	O
for	O
(	O
tf	float
=	O
rf	float
,	O
tf1	float
=	O
1.0f	int
-	O
tf	float
,	O
j	int
=	O
0	int
;	O
j	int
<	O
MAX	int
&&	O
tf1	float
!=	O
1.0f	int
;	O
j	int
++	O
,	O
rf	float
=	O
tf	float
,	O
tf	float
*=	O
df	float
,	O
tf1	float
=	O
1.0f	int
-	O
tf	float
)	O
;	O
if	O
(	O
i	array
==	O
MAX	int
||	O
j	int
==	O
MAX	int
)	O
printf	O
(	O
"WARNING, cannot calculate float_negative_epsilon: %d %d %f   %f %f %f\n"	pointer
,	O
i	array
,	O
j	int
,	O
rf	float
,	O
df	float
,	O
tf	float
,	O
tf1	float
)	O
;	O
float_negative_epsilon	float
=	O
rf	float
;	O
for	O
(	O
rd	double
=	O
1.0	int
,	O
dd	double
=	O
0.5	int
,	O
i	array
=	O
j	int
=	O
0	int
;	O
i	array
<	O
MAX	int
&&	O
j	int
<	O
MAX	int
&&	O
dd	double
!=	O
1.0	int
;	O
i	array
++	O
,	O
dd	double
=	O
1.0	int
-	O
(	O
0.5	int
*	O
(	O
1.0	int
-	O
dd	double
)	O
)	O
)	O
for	O
(	O
td	double
=	O
rd	double
,	O
td1	double
=	O
td	double
+	O
1.0	int
,	O
j	int
=	O
0	int
;	O
j	int
<	O
MAX	int
&&	O
td1	double
!=	O
1.0	int
;	O
j	int
++	O
,	O
rd	double
=	O
td	double
,	O
td	double
*=	O
dd	double
,	O
td1	double
=	O
td	double
+	O
1.0	int
)	O
;	O
if	O
(	O
i	array
==	O
MAX	int
||	O
j	int
==	O
MAX	int
)	O
printf	O
(	O
"WARNING, cannot calculate double_epsilon: %d %d %f   %f %f %f\n"	pointer
,	O
i	array
,	O
j	int
,	O
rd	double
,	O
dd	double
,	O
td	double
,	O
td1	double
)	O
;	O
double_epsilon	double
=	O
rd	double
;	O
for	O
(	O
rd	double
=	O
1.0	int
,	O
dd	double
=	O
0.5	int
,	O
i	array
=	O
j	int
=	O
0	int
;	O
i	array
<	O
MAX	int
&&	O
j	int
<	O
MAX	int
&&	O
dd	double
!=	O
1.0	int
;	O
i	array
++	O
,	O
dd	double
=	O
1.0	int
-	O
(	O
0.5	int
*	O
(	O
1.0	int
-	O
dd	double
)	O
)	O
)	O
for	O
(	O
td	double
=	O
rd	double
,	O
td1	double
=	O
1.0	int
-	O
td	double
,	O
j	int
=	O
0	int
;	O
j	int
<	O
MAX	int
&&	O
td1	double
!=	O
1.0	int
;	O
j	int
++	O
,	O
rd	double
=	O
td	double
,	O
td	double
*=	O
dd	double
,	O
td1	double
=	O
1.0	int
-	O
td	double
)	O
;	O
if	O
(	O
i	array
==	O
MAX	int
||	O
j	int
==	O
MAX	int
)	O
printf	O
(	O
"WARNING, cannot calculate double_negative_epsilon: %d %d %f   %f %f %f\n"	pointer
,	O
i	array
,	O
j	int
,	O
rd	double
,	O
dd	double
,	O
td	double
,	O
td1	double
)	O
;	O
double_negative_epsilon	double
=	O
rd	double
;	O
}	O
make_constant	function
(	O
"MOST-POSITIVE-SHORT-FLOAT"	pointer
,	O
make_shortfloat	function
(	O
biggest_float	float
)	O
)	O
;	O
make_constant	function
(	O
"LEAST-POSITIVE-SHORT-FLOAT"	pointer
,	O
make_shortfloat	function
(	O
smallest_float	float
)	O
)	O
;	O
make_constant	function
(	O
"LEAST-NEGATIVE-SHORT-FLOAT"	pointer
,	O
make_shortfloat	function
(	O
-	O
smallest_float	float
)	O
)	O
;	O
make_constant	function
(	O
"MOST-NEGATIVE-SHORT-FLOAT"	pointer
,	O
make_shortfloat	function
(	O
-	O
biggest_float	float
)	O
)	O
;	O
make_constant	function
(	O
"MOST-POSITIVE-SINGLE-FLOAT"	pointer
,	O
make_longfloat	function
(	O
biggest_double	double
)	O
)	O
;	O
make_constant	function
(	O
"LEAST-POSITIVE-SINGLE-FLOAT"	pointer
,	O
make_longfloat	function
(	O
smallest_double	double
)	O
)	O
;	O
make_constant	function
(	O
"LEAST-NEGATIVE-SINGLE-FLOAT"	pointer
,	O
make_longfloat	function
(	O
-	O
smallest_double	double
)	O
)	O
;	O
make_constant	function
(	O
"MOST-NEGATIVE-SINGLE-FLOAT"	pointer
,	O
make_longfloat	function
(	O
-	O
biggest_double	double
)	O
)	O
;	O
make_constant	function
(	O
"MOST-POSITIVE-DOUBLE-FLOAT"	pointer
,	O
make_longfloat	function
(	O
biggest_double	double
)	O
)	O
;	O
make_constant	function
(	O
"LEAST-POSITIVE-DOUBLE-FLOAT"	pointer
,	O
make_longfloat	function
(	O
smallest_double	double
)	O
)	O
;	O
make_constant	function
(	O
"LEAST-NEGATIVE-DOUBLE-FLOAT"	pointer
,	O
make_longfloat	function
(	O
-	O
smallest_double	double
)	O
)	O
;	O
make_constant	function
(	O
"MOST-NEGATIVE-DOUBLE-FLOAT"	pointer
,	O
make_longfloat	function
(	O
-	O
biggest_double	double
)	O
)	O
;	O
make_constant	function
(	O
"MOST-POSITIVE-LONG-FLOAT"	pointer
,	O
make_longfloat	function
(	O
biggest_double	double
)	O
)	O
;	O
make_constant	function
(	O
"LEAST-POSITIVE-LONG-FLOAT"	pointer
,	O
make_longfloat	function
(	O
smallest_double	double
)	O
)	O
;	O
make_constant	function
(	O
"LEAST-NEGATIVE-LONG-FLOAT"	pointer
,	O
make_longfloat	function
(	O
-	O
smallest_double	double
)	O
)	O
;	O
make_constant	function
(	O
"MOST-NEGATIVE-LONG-FLOAT"	pointer
,	O
make_longfloat	function
(	O
-	O
biggest_double	double
)	O
)	O
;	O
make_constant	function
(	O
"SHORT-FLOAT-EPSILON"	pointer
,	O
make_shortfloat	function
(	O
float_epsilon	float
)	O
)	O
;	O
make_constant	function
(	O
"SINGLE-FLOAT-EPSILON"	pointer
,	O
make_longfloat	function
(	O
double_epsilon	double
)	O
)	O
;	O
make_constant	function
(	O
"DOUBLE-FLOAT-EPSILON"	pointer
,	O
make_longfloat	function
(	O
double_epsilon	double
)	O
)	O
;	O
make_constant	function
(	O
"LONG-FLOAT-EPSILON"	pointer
,	O
make_longfloat	function
(	O
double_epsilon	double
)	O
)	O
;	O
make_constant	function
(	O
"SHORT-FLOAT-NEGATIVE-EPSILON"	pointer
,	O
make_shortfloat	function
(	O
float_negative_epsilon	float
)	O
)	O
;	O
make_constant	function
(	O
"SINGLE-FLOAT-NEGATIVE-EPSILON"	pointer
,	O
make_longfloat	function
(	O
double_negative_epsilon	double
)	O
)	O
;	O
make_constant	function
(	O
"DOUBLE-FLOAT-NEGATIVE-EPSILON"	pointer
,	O
make_longfloat	function
(	O
double_negative_epsilon	double
)	O
)	O
;	O
make_constant	function
(	O
"LONG-FLOAT-NEGATIVE-EPSILON"	pointer
,	O
make_longfloat	function
(	O
double_negative_epsilon	double
)	O
)	O
;	O
make_constant	function
(	O
"LEAST-POSITIVE-NORMALIZED-SHORT-FLOAT"	pointer
,	O
make_shortfloat	function
(	O
smallest_norm_float	float
)	O
)	O
;	O
make_constant	function
(	O
"LEAST-NEGATIVE-NORMALIZED-SHORT-FLOAT"	pointer
,	O
make_shortfloat	function
(	O
-	O
smallest_norm_float	float
)	O
)	O
;	O
make_constant	function
(	O
"LEAST-POSITIVE-NORMALIZED-SINGLE-FLOAT"	pointer
,	O
make_longfloat	function
(	O
smallest_norm_double	double
)	O
)	O
;	O
make_constant	function
(	O
"LEAST-NEGATIVE-NORMALIZED-SINGLE-FLOAT"	pointer
,	O
make_longfloat	function
(	O
-	O
smallest_norm_double	double
)	O
)	O
;	O
make_constant	function
(	O
"LEAST-POSITIVE-NORMALIZED-DOUBLE-FLOAT"	pointer
,	O
make_longfloat	function
(	O
smallest_norm_double	double
)	O
)	O
;	O
make_constant	function
(	O
"LEAST-NEGATIVE-NORMALIZED-DOUBLE-FLOAT"	pointer
,	O
make_longfloat	function
(	O
-	O
smallest_norm_double	double
)	O
)	O
;	O
make_constant	function
(	O
"LEAST-POSITIVE-NORMALIZED-LONG-FLOAT"	pointer
,	O
make_longfloat	function
(	O
smallest_norm_double	double
)	O
)	O
;	O
make_constant	function
(	O
"LEAST-NEGATIVE-NORMALIZED-LONG-FLOAT"	pointer
,	O
make_longfloat	function
(	O
-	O
smallest_norm_double	double
)	O
)	O
;	O
plus_half	int
=	O
make_ratio	function
(	O
small_fixnum	function
(	O
1	int
)	O
,	O
small_fixnum	function
(	O
2	int
)	O
)	O
;	O
enter_mark_origin	function
(	O
&	O
plus_half	int
)	O
;	O
minus_half	O
=	O
make_ratio	function
(	O
small_fixnum	function
(	O
-	O
1	int
)	O
,	O
small_fixnum	function
(	O
2	int
)	O
)	O
;	O
enter_mark_origin	function
(	O
&	O
minus_half	O
)	O
;	O
make_function	function
(	O
"FLOAT"	pointer
,	O
Lfloat	int
)	O
;	O
make_function	function
(	O
"NUMERATOR"	pointer
,	O
Lnumerator	int
)	O
;	O
make_function	function
(	O
"DENOMINATOR"	pointer
,	O
Ldenominator	int
)	O
;	O
make_function	function
(	O
"FLOOR"	pointer
,	O
Lfloor	int
)	O
;	O
make_function	function
(	O
"CEILING"	pointer
,	O
Lceiling	int
)	O
;	O
make_function	function
(	O
"TRUNCATE"	pointer
,	O
Ltruncate	int
)	O
;	O
make_function	function
(	O
"ROUND"	pointer
,	O
Lround	int
)	O
;	O
make_function	function
(	O
"MOD"	pointer
,	O
Lmod	int
)	O
;	O
make_function	function
(	O
"REM"	pointer
,	O
Lrem	int
)	O
;	O
make_function	function
(	O
"DECODE-FLOAT"	pointer
,	O
Ldecode_float	int
)	O
;	O
make_function	function
(	O
"SCALE-FLOAT"	pointer
,	O
Lscale_float	int
)	O
;	O
make_function	function
(	O
"FLOAT-RADIX"	pointer
,	O
Lfloat_radix	int
)	O
;	O
make_function	function
(	O
"FLOAT-SIGN"	pointer
,	O
Lfloat_sign	int
)	O
;	O
make_function	function
(	O
"FLOAT-DIGITS"	pointer
,	O
Lfloat_digits	int
)	O
;	O
make_function	function
(	O
"FLOAT-PRECISION"	pointer
,	O
Lfloat_precision	int
)	O
;	O
make_function	function
(	O
"INTEGER-DECODE-FLOAT"	pointer
,	O
Linteger_decode_float	int
)	O
;	O
make_function	function
(	O
"COMPLEX"	pointer
,	O
Lcomplex	int
)	O
;	O
make_function	function
(	O
"REALPART"	pointer
,	O
Lrealpart	int
)	O
;	O
make_function	function
(	O
"IMAGPART"	pointer
,	O
Limagpart	int
)	O
;	O
}	O
