static	O
inline	O
uint32_t	int
rotl32	function
(	O
uint32_t	int
x	int
,	O
int8_t	char
r	char
)	O
{	O
return	O
(	O
x	int
<<	O
r	char
)	O
|	O
(	O
x	int
>>	O
(	O
32	int
-	O
r	char
)	O
)	O
;	O
}	O
FORCE_INLINE	O
uint32_t	int
getblock32	function
(	O
const	O
uint32_t	int
*	O
p	pointer
,	O
int	O
i	int
)	O
{	O
return	O
p	pointer
[	O
i	int
]	O
;	O
}	O
FORCE_INLINE	O
uint32_t	int
fmix32	function
(	O
uint32_t	int
h	int
)	O
{	O
h	int
^=	O
h	int
>>	O
16	int
;	O
h	int
*=	O
0x85ebca6b	int
;	O
h	int
^=	O
h	int
>>	O
13	int
;	O
h	int
*=	O
0xc2b2ae35	int
;	O
h	int
^=	O
h	int
>>	O
16	int
;	O
return	O
h	int
;	O
}	O
static	O
uint32_t	int
MurmurHash3_x86_32	function
(	O
const	O
void	O
*	O
key	pointer
,	O
size_t	long
len	long
,	O
uint32_t	int
seed	int
)	O
{	O
const	O
uint8_t	char
*	O
data	pointer
=	O
(	O
const	O
uint8_t	char
*	O
)	O
key	pointer
;	O
const	O
int	O
nblocks	int
=	O
(	O
int	O
)	O
(	O
len	long
/	O
4	int
)	O
;	O
uint32_t	int
h1	int
=	O
seed	int
;	O
const	O
uint32_t	int
c1	int
=	O
0xcc9e2d51	int
;	O
const	O
uint32_t	int
c2	int
=	O
0x1b873593	int
;	O
const	O
uint32_t	int
*	O
blocks	pointer
=	O
(	O
const	O
uint32_t	int
*	O
)	O
(	O
data	pointer
+	O
nblocks	int
*	O
4	int
)	O
;	O
for	O
(	O
int	O
i	int
=	O
-	O
nblocks	int
;	O
i	int
;	O
i	int
++	O
)	O
{	O
uint32_t	int
k1	int
=	O
getblock32	function
(	O
blocks	pointer
,	O
i	int
)	O
;	O
k1	int
*=	O
c1	int
;	O
k1	int
=	O
ROTL32	O
(	O
k1	int
,	O
15	int
)	O
;	O
k1	int
*=	O
c2	int
;	O
h1	int
^=	O
k1	int
;	O
h1	int
=	O
ROTL32	O
(	O
h1	int
,	O
13	int
)	O
;	O
h1	int
=	O
h1	int
*	O
5	int
+	O
0xe6546b64	int
;	O
}	O
const	O
uint8_t	char
*	O
tail	pointer
=	O
(	O
const	O
uint8_t	char
*	O
)	O
(	O
data	pointer
+	O
nblocks	int
*	O
4	int
)	O
;	O
uint32_t	int
k1	int
=	O
0	int
;	O
switch	O
(	O
len	long
&	O
3	int
)	O
{	O
case	O
3	int
:	O
k1	int
^=	O
tail	pointer
[	O
2	int
]	O
<<	O
16	int
;	O
case	O
2	int
:	O
k1	int
^=	O
tail	pointer
[	O
1	int
]	O
<<	O
8	int
;	O
case	O
1	int
:	O
k1	int
^=	O
tail	pointer
[	O
0	int
]	O
;	O
k1	int
*=	O
c1	int
;	O
k1	int
=	O
ROTL32	O
(	O
k1	int
,	O
15	int
)	O
;	O
k1	int
*=	O
c2	int
;	O
h1	int
^=	O
k1	int
;	O
}	O
;	O
h1	int
^=	O
len	long
;	O
h1	int
=	O
fmix32	function
(	O
h1	int
)	O
;	O
return	O
h1	int
;	O
}	O
uint32_t	int
hurd_ihash_hash32	function
(	O
const	O
void	O
*	O
,	O
size_t	long
,	O
uint32_t	int
)	O
__attribute__	O
(	O
(	O
weak	O
,	O
alias	O
(	O
"MurmurHash3_x86_32"	pointer
)	O
)	O
)	O
;	O
