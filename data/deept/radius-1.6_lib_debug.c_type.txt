int	O
grad_source_info_option	int
=	O
1	int
;	O
static	O
grad_keyword_t	struct
auth_codes_abbr	array
[	O
]	O
=	O
{	O
{	O
"Access-Request"	pointer
,	O
RT_ACCESS_REQUEST	int
}	O
,	O
{	O
"Access-Accept"	pointer
,	O
RT_ACCESS_ACCEPT	int
}	O
,	O
{	O
"Access-Reject"	pointer
,	O
RT_ACCESS_REJECT	int
}	O
,	O
{	O
"Accounting-Request"	pointer
,	O
RT_ACCOUNTING_REQUEST	int
}	O
,	O
{	O
"Accounting-Response"	pointer
,	O
RT_ACCOUNTING_RESPONSE	int
}	O
,	O
{	O
"Accounting-Status"	pointer
,	O
RT_ACCOUNTING_STATUS	int
}	O
,	O
{	O
"Password-Request"	pointer
,	O
RT_PASSWORD_REQUEST	int
}	O
,	O
{	O
"Password-Ack"	pointer
,	O
RT_PASSWORD_ACK	int
}	O
,	O
{	O
"Password-Reject"	pointer
,	O
RT_PASSWORD_REJECT	int
}	O
,	O
{	O
"Accounting-Message"	pointer
,	O
RT_ACCOUNTING_MESSAGE	int
}	O
,	O
{	O
"Access-Challenge"	pointer
,	O
RT_ACCESS_CHALLENGE	int
}	O
,	O
{	O
"Status-Server"	pointer
,	O
RT_STATUS_SERVER	int
}	O
,	O
{	O
"Status-Client"	pointer
,	O
RT_STATUS_CLIENT	int
}	O
,	O
{	O
"Ascend-Terminate-Session"	pointer
,	O
RT_ASCEND_TERMINATE_SESSION	int
}	O
,	O
{	O
"Ascend-Event-Request"	pointer
,	O
RT_ASCEND_EVENT_REQUEST	int
}	O
,	O
{	O
"Ascend-Event-Response"	pointer
,	O
RT_ASCEND_EVENT_RESPONSE	int
}	O
,	O
{	O
"Ascend-Allocate-IP"	pointer
,	O
RT_ASCEND_ALLOCATE_IP	int
}	O
,	O
{	O
"Ascend-Release-IP"	pointer
,	O
RT_ASCEND_RELEASE_IP	int
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
struct	O
auth_code_iterator	struct
{	O
int	O
index	function
;	O
const	O
char	O
*	O
text	pointer
;	O
int	O
len	int
;	O
}	O
;	O
const	O
char	O
*	O
grad_next_matching_code_name	function
(	O
void	O
*	O
data	pointer
)	O
{	O
struct	O
auth_code_iterator	struct
*	O
itr	pointer
=	O
data	pointer
;	O
const	O
char	O
*	O
str	pointer
;	O
while	O
(	O
str	pointer
=	O
auth_codes_abbr	array
[	O
itr	pointer
->	O
index	function
]	O
.	O
name	pointer
)	O
{	O
itr	pointer
->	O
index	function
++	O
;	O
if	O
(	O
strlen	function
(	O
str	pointer
)	O
>=	O
itr	pointer
->	O
len	int
&&	O
strncmp	function
(	O
str	pointer
,	O
itr	pointer
->	O
text	pointer
,	O
itr	pointer
->	O
len	int
)	O
==	O
0	int
)	O
break	O
;	O
}	O
return	O
str	pointer
;	O
}	O
const	O
char	O
*	O
grad_first_matching_code_name	function
(	O
const	O
char	O
*	O
name	pointer
,	O
void	O
*	O
*	O
ptr	pointer
)	O
{	O
struct	O
auth_code_iterator	struct
*	O
itr	pointer
=	O
grad_emalloc	function
(	O
sizeof	O
(	O
*	O
itr	pointer
)	O
)	O
;	O
*	O
ptr	pointer
=	O
itr	pointer
;	O
itr	pointer
->	O
index	function
=	O
0	int
;	O
itr	pointer
->	O
text	pointer
=	O
name	pointer
;	O
itr	pointer
->	O
len	int
=	O
strlen	function
(	O
name	pointer
)	O
;	O
return	O
grad_next_matching_code_name	function
(	O
itr	pointer
)	O
;	O
}	O
const	O
char	O
*	O
grad_request_code_to_name	function
(	O
int	O
code	char
)	O
{	O
grad_keyword_t	struct
*	O
p	pointer
;	O
for	O
(	O
p	pointer
=	O
auth_codes_abbr	array
;	O
p	pointer
->	O
name	pointer
;	O
p	pointer
++	O
)	O
if	O
(	O
p	pointer
->	O
tok	int
==	O
code	char
)	O
return	O
p	pointer
->	O
name	pointer
;	O
return	O
"Unknown"	pointer
;	O
}	O
int	O
grad_request_name_to_code	function
(	O
const	O
char	O
*	O
ident	pointer
)	O
{	O
return	O
grad_xlat_keyword	function
(	O
auth_codes_abbr	array
,	O
ident	pointer
,	O
0	int
)	O
;	O
}	O
struct	O
debug_module	struct
{	O
char	O
*	O
name	pointer
;	O
int	O
level	int
;	O
}	O
;	O
static	O
grad_list_t	struct
*	O
_grad_debug_list	pointer
;	O
static	O
int	O
debug_name_cmp	function
(	O
const	O
void	O
*	O
item	pointer
,	O
const	O
void	O
*	O
data	pointer
)	O
{	O
const	O
struct	O
debug_module	struct
*	O
lp	pointer
=	O
item	pointer
;	O
return	O
strcmp	function
(	O
lp	pointer
->	O
name	pointer
,	O
(	O
char	O
*	O
)	O
data	pointer
)	O
;	O
}	O
static	O
int	O
debug_mod_cmp	function
(	O
const	O
void	O
*	O
item	pointer
,	O
const	O
void	O
*	O
data	pointer
)	O
{	O
const	O
struct	O
debug_module	struct
*	O
mod	pointer
=	O
item	pointer
;	O
const	O
struct	O
debug_module	struct
*	O
sample	pointer
=	O
data	pointer
;	O
int	O
len	int
=	O
strlen	function
(	O
mod	pointer
->	O
name	pointer
)	O
;	O
if	O
(	O
strlen	function
(	O
mod	pointer
->	O
name	pointer
)	O
>	O
len	int
)	O
return	O
1	int
;	O
if	O
(	O
strncmp	function
(	O
mod	pointer
->	O
name	pointer
,	O
sample	pointer
->	O
name	pointer
,	O
len	int
)	O
)	O
return	O
1	int
;	O
return	O
mod	pointer
->	O
level	int
<	O
sample	pointer
->	O
level	int
;	O
}	O
static	O
int	O
free_debug_module	function
(	O
void	O
*	O
item	pointer
,	O
void	O
*	O
data	pointer
)	O
{	O
grad_free	function
(	O
item	pointer
)	O
;	O
return	O
0	int
;	O
}	O
int	O
grad_set_module_debug_level	function
(	O
char	O
*	O
name	pointer
,	O
int	O
level	int
)	O
{	O
struct	O
debug_module	struct
*	O
lp	pointer
;	O
if	O
(	O
level	int
==	O
-	O
1	int
)	O
level	int
=	O
GRAD_MAX_DEBUG_LEVEL	int
;	O
if	O
(	O
!	O
_grad_debug_list	pointer
)	O
_grad_debug_list	pointer
=	O
grad_list_create	function
(	O
)	O
;	O
lp	pointer
=	O
grad_list_locate	function
(	O
_grad_debug_list	pointer
,	O
name	pointer
,	O
debug_name_cmp	function
)	O
;	O
if	O
(	O
!	O
lp	pointer
)	O
{	O
lp	pointer
=	O
grad_emalloc	function
(	O
sizeof	O
(	O
*	O
lp	pointer
)	O
)	O
;	O
lp	pointer
->	O
name	pointer
=	O
grad_estrdup	function
(	O
name	pointer
)	O
;	O
grad_list_append	function
(	O
_grad_debug_list	pointer
,	O
lp	pointer
)	O
;	O
}	O
if	O
(	O
lp	pointer
->	O
level	int
<	O
level	int
)	O
lp	pointer
->	O
level	int
=	O
level	int
;	O
return	O
0	int
;	O
}	O
void	O
grad_set_debug_levels	function
(	O
char	O
*	O
str	pointer
)	O
{	O
char	O
*	O
tok	int
,	O
*	O
p	pointer
,	O
*	O
save	pointer
;	O
int	O
level	int
;	O
for	O
(	O
tok	int
=	O
strtok_r	function
(	O
str	pointer
,	O
","	pointer
,	O
&	O
save	pointer
)	O
;	O
tok	int
;	O
tok	int
=	O
strtok_r	function
(	O
NULL	O
,	O
","	pointer
,	O
&	O
save	pointer
)	O
)	O
{	O
p	pointer
=	O
strchr	function
(	O
tok	int
,	O
'='	O
)	O
;	O
if	O
(	O
p	pointer
)	O
{	O
*	O
p	pointer
++	O
=	O
0	int
;	O
level	int
=	O
atoi	function
(	O
p	pointer
)	O
;	O
}	O
else	O
{	O
level	int
=	O
GRAD_MAX_DEBUG_LEVEL	int
;	O
}	O
grad_set_module_debug_level	function
(	O
tok	int
,	O
level	int
)	O
;	O
}	O
}	O
void	O
grad_clear_debug	function
(	O
)	O
{	O
grad_list_destroy	function
(	O
&	O
_grad_debug_list	pointer
,	O
free_debug_module	function
,	O
NULL	O
)	O
;	O
}	O
int	O
grad_debug_p	function
(	O
char	O
*	O
name	pointer
,	O
int	O
level	int
)	O
{	O
struct	O
debug_module	struct
mod	pointer
;	O
char	O
*	O
p	pointer
=	O
strrchr	function
(	O
name	pointer
,	O
'/'	O
)	O
;	O
mod	pointer
.	O
name	pointer
=	O
p	pointer
?	O
p	pointer
+	O
1	int
:	O
name	pointer
;	O
mod	pointer
.	O
level	int
=	O
level	int
;	O
return	O
grad_list_locate	function
(	O
_grad_debug_list	pointer
,	O
&	O
mod	pointer
,	O
debug_mod_cmp	function
)	O
!=	O
NULL	O
;	O
}	O
