char	O
_asn1_identifierMissing	array
[	O
ASN1_MAX_NAME_SIZE	int
+	O
1	int
]	O
;	O
__attribute__	O
(	O
(	O
no_sanitize	O
(	O
"integer"	pointer
)	O
)	O
)	O
_GL_ATTRIBUTE_PURE	O
static	O
unsigned	O
int	O
_asn1_hash_name	function
(	O
const	O
char	O
*	O
x	pointer
)	O
{	O
const	O
unsigned	O
char	O
*	O
s	pointer
=	O
(	O
unsigned	O
char	O
*	O
)	O
x	pointer
;	O
unsigned	O
h	int
=	O
0	int
;	O
while	O
(	O
*	O
s	pointer
)	O
h	int
=	O
(	O
*	O
s	pointer
++	O
)	O
+	O
(	O
(	O
h	int
<<	O
9	int
)	O
|	O
(	O
h	int
>>	O
(	O
WORD_BIT	int
-	O
9	int
)	O
)	O
)	O
;	O
return	O
h	int
;	O
}	O
asn1_node	pointer
_asn1_add_static_node	function
(	O
list_type	struct
*	O
*	O
e_list	pointer
,	O
unsigned	O
int	O
type	int
)	O
{	O
list_type	struct
*	O
p	pointer
;	O
asn1_node	pointer
punt	pointer
;	O
punt	pointer
=	O
calloc	function
(	O
1	int
,	O
sizeof	O
(	O
struct	O
asn1_node_st	struct
)	O
)	O
;	O
if	O
(	O
punt	pointer
==	O
NULL	O
)	O
return	O
NULL	O
;	O
p	pointer
=	O
malloc	function
(	O
sizeof	O
(	O
list_type	struct
)	O
)	O
;	O
if	O
(	O
p	pointer
==	O
NULL	O
)	O
{	O
free	function
(	O
punt	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
p	pointer
->	O
node	pointer
=	O
punt	pointer
;	O
p	pointer
->	O
next	pointer
=	O
*	O
e_list	pointer
;	O
*	O
e_list	pointer
=	O
p	pointer
;	O
punt	pointer
->	O
type	int
=	O
type	int
;	O
return	O
punt	pointer
;	O
}	O
static	O
int	O
_asn1_add_static_node2	function
(	O
list_type	struct
*	O
*	O
e_list	pointer
,	O
asn1_node	pointer
node	pointer
)	O
{	O
list_type	struct
*	O
p	pointer
;	O
p	pointer
=	O
malloc	function
(	O
sizeof	O
(	O
list_type	struct
)	O
)	O
;	O
if	O
(	O
p	pointer
==	O
NULL	O
)	O
{	O
return	O
-	O
1	int
;	O
}	O
p	pointer
->	O
node	pointer
=	O
node	pointer
;	O
p	pointer
->	O
next	pointer
=	O
*	O
e_list	pointer
;	O
*	O
e_list	pointer
=	O
p	pointer
;	O
return	O
0	int
;	O
}	O
asn1_node	pointer
asn1_find_node	function
(	O
asn1_node_const	pointer
pointer	pointer
,	O
const	O
char	O
*	O
name	pointer
)	O
{	O
asn1_node_const	pointer
p	pointer
;	O
char	O
*	O
n_end	pointer
,	O
n	array
[	O
ASN1_MAX_NAME_SIZE	int
+	O
1	int
]	O
;	O
const	O
char	O
*	O
n_start	pointer
;	O
unsigned	O
int	O
nsize	int
;	O
unsigned	O
int	O
nhash	int
;	O
if	O
(	O
pointer	pointer
==	O
NULL	O
)	O
return	O
NULL	O
;	O
if	O
(	O
name	pointer
==	O
NULL	O
)	O
return	O
NULL	O
;	O
p	pointer
=	O
pointer	pointer
;	O
n_start	pointer
=	O
name	pointer
;	O
if	O
(	O
name	pointer
[	O
0	int
]	O
==	O
'?'	O
&&	O
name	pointer
[	O
1	int
]	O
==	O
'C'	O
&&	O
p	pointer
->	O
name	pointer
[	O
0	int
]	O
==	O
'?'	O
)	O
{	O
n_start	pointer
=	O
strchr	function
(	O
n_start	pointer
,	O
'.'	O
)	O
;	O
if	O
(	O
n_start	pointer
)	O
n_start	pointer
++	O
;	O
}	O
else	O
if	O
(	O
p	pointer
->	O
name	pointer
[	O
0	int
]	O
!=	O
0	int
)	O
{	O
n_end	pointer
=	O
strchr	function
(	O
n_start	pointer
,	O
'.'	O
)	O
;	O
if	O
(	O
n_end	pointer
)	O
{	O
nsize	int
=	O
n_end	pointer
-	O
n_start	pointer
;	O
if	O
(	O
nsize	int
>=	O
sizeof	O
(	O
n	array
)	O
)	O
return	O
NULL	O
;	O
memcpy	function
(	O
n	array
,	O
n_start	pointer
,	O
nsize	int
)	O
;	O
n	array
[	O
nsize	int
]	O
=	O
0	int
;	O
n_start	pointer
=	O
n_end	pointer
;	O
n_start	pointer
++	O
;	O
nhash	int
=	O
_asn1_hash_name	function
(	O
n	array
)	O
;	O
}	O
else	O
{	O
_asn1_str_cpy	function
(	O
n	array
,	O
sizeof	O
(	O
n	array
)	O
,	O
n_start	pointer
)	O
;	O
nhash	int
=	O
_asn1_hash_name	function
(	O
n	array
)	O
;	O
n_start	pointer
=	O
NULL	O
;	O
}	O
while	O
(	O
p	pointer
)	O
{	O
if	O
(	O
nhash	int
==	O
p	pointer
->	O
name_hash	int
&&	O
(	O
!	O
strcmp	function
(	O
p	pointer
->	O
name	pointer
,	O
n	array
)	O
)	O
)	O
break	O
;	O
else	O
p	pointer
=	O
p	pointer
->	O
right	pointer
;	O
}	O
if	O
(	O
p	pointer
==	O
NULL	O
)	O
return	O
NULL	O
;	O
}	O
else	O
{	O
if	O
(	O
n_start	pointer
[	O
0	int
]	O
==	O
0	int
)	O
return	O
(	O
asn1_node	pointer
)	O
p	pointer
;	O
}	O
while	O
(	O
n_start	pointer
)	O
{	O
n_end	pointer
=	O
strchr	function
(	O
n_start	pointer
,	O
'.'	O
)	O
;	O
if	O
(	O
n_end	pointer
)	O
{	O
nsize	int
=	O
n_end	pointer
-	O
n_start	pointer
;	O
if	O
(	O
nsize	int
>=	O
sizeof	O
(	O
n	array
)	O
)	O
return	O
NULL	O
;	O
memcpy	function
(	O
n	array
,	O
n_start	pointer
,	O
nsize	int
)	O
;	O
n	array
[	O
nsize	int
]	O
=	O
0	int
;	O
n_start	pointer
=	O
n_end	pointer
;	O
n_start	pointer
++	O
;	O
nhash	int
=	O
_asn1_hash_name	function
(	O
n	array
)	O
;	O
}	O
else	O
{	O
_asn1_str_cpy	function
(	O
n	array
,	O
sizeof	O
(	O
n	array
)	O
,	O
n_start	pointer
)	O
;	O
nhash	int
=	O
_asn1_hash_name	function
(	O
n	array
)	O
;	O
n_start	pointer
=	O
NULL	O
;	O
}	O
if	O
(	O
p	pointer
->	O
down	pointer
==	O
NULL	O
)	O
return	O
NULL	O
;	O
p	pointer
=	O
p	pointer
->	O
down	pointer
;	O
if	O
(	O
p	pointer
==	O
NULL	O
)	O
return	O
NULL	O
;	O
if	O
(	O
n	array
[	O
0	int
]	O
==	O
'?'	O
&&	O
n	array
[	O
1	int
]	O
==	O
'L'	O
)	O
{	O
while	O
(	O
p	pointer
->	O
right	pointer
)	O
p	pointer
=	O
p	pointer
->	O
right	pointer
;	O
}	O
else	O
{	O
while	O
(	O
p	pointer
)	O
{	O
if	O
(	O
p	pointer
->	O
name_hash	int
==	O
nhash	int
&&	O
!	O
strcmp	function
(	O
p	pointer
->	O
name	pointer
,	O
n	array
)	O
)	O
break	O
;	O
else	O
p	pointer
=	O
p	pointer
->	O
right	pointer
;	O
}	O
}	O
if	O
(	O
p	pointer
==	O
NULL	O
)	O
return	O
NULL	O
;	O
}	O
return	O
(	O
asn1_node	pointer
)	O
p	pointer
;	O
}	O
asn1_node	pointer
_asn1_set_value	function
(	O
asn1_node	pointer
node	pointer
,	O
const	O
void	O
*	O
value	pointer
,	O
unsigned	O
int	O
len	int
)	O
{	O
if	O
(	O
node	pointer
==	O
NULL	O
)	O
return	O
node	pointer
;	O
if	O
(	O
node	pointer
->	O
value	pointer
)	O
{	O
if	O
(	O
node	pointer
->	O
value	pointer
!=	O
node	pointer
->	O
small_value	array
)	O
free	function
(	O
node	pointer
->	O
value	pointer
)	O
;	O
node	pointer
->	O
value	pointer
=	O
NULL	O
;	O
node	pointer
->	O
value_len	int
=	O
0	int
;	O
}	O
if	O
(	O
!	O
len	int
)	O
return	O
node	pointer
;	O
if	O
(	O
len	int
<	O
sizeof	O
(	O
node	pointer
->	O
small_value	array
)	O
)	O
{	O
node	pointer
->	O
value	pointer
=	O
node	pointer
->	O
small_value	array
;	O
}	O
else	O
{	O
node	pointer
->	O
value	pointer
=	O
malloc	function
(	O
len	int
)	O
;	O
if	O
(	O
node	pointer
->	O
value	pointer
==	O
NULL	O
)	O
return	O
NULL	O
;	O
}	O
node	pointer
->	O
value_len	int
=	O
len	int
;	O
memcpy	function
(	O
node	pointer
->	O
value	pointer
,	O
value	pointer
,	O
len	int
)	O
;	O
return	O
node	pointer
;	O
}	O
asn1_node	pointer
_asn1_set_value_lv	function
(	O
asn1_node	pointer
node	pointer
,	O
const	O
void	O
*	O
value	pointer
,	O
unsigned	O
int	O
len	int
)	O
{	O
int	O
len2	int
;	O
void	O
*	O
temp	pointer
;	O
if	O
(	O
node	pointer
==	O
NULL	O
)	O
return	O
node	pointer
;	O
asn1_length_der	function
(	O
len	int
,	O
NULL	O
,	O
&	O
len2	int
)	O
;	O
temp	pointer
=	O
malloc	function
(	O
len	int
+	O
len2	int
)	O
;	O
if	O
(	O
temp	pointer
==	O
NULL	O
)	O
return	O
NULL	O
;	O
asn1_octet_der	function
(	O
value	pointer
,	O
len	int
,	O
temp	pointer
,	O
&	O
len2	int
)	O
;	O
return	O
_asn1_set_value_m	function
(	O
node	pointer
,	O
temp	pointer
,	O
len2	int
)	O
;	O
}	O
asn1_node	pointer
_asn1_set_value_m	function
(	O
asn1_node	pointer
node	pointer
,	O
void	O
*	O
value	pointer
,	O
unsigned	O
int	O
len	int
)	O
{	O
if	O
(	O
node	pointer
==	O
NULL	O
)	O
return	O
node	pointer
;	O
if	O
(	O
node	pointer
->	O
value	pointer
)	O
{	O
if	O
(	O
node	pointer
->	O
value	pointer
!=	O
node	pointer
->	O
small_value	array
)	O
free	function
(	O
node	pointer
->	O
value	pointer
)	O
;	O
node	pointer
->	O
value	pointer
=	O
NULL	O
;	O
node	pointer
->	O
value_len	int
=	O
0	int
;	O
}	O
if	O
(	O
!	O
len	int
)	O
return	O
node	pointer
;	O
node	pointer
->	O
value	pointer
=	O
value	pointer
;	O
node	pointer
->	O
value_len	int
=	O
len	int
;	O
return	O
node	pointer
;	O
}	O
asn1_node	pointer
_asn1_append_value	function
(	O
asn1_node	pointer
node	pointer
,	O
const	O
void	O
*	O
value	pointer
,	O
unsigned	O
int	O
len	int
)	O
{	O
if	O
(	O
node	pointer
==	O
NULL	O
)	O
return	O
node	pointer
;	O
if	O
(	O
node	pointer
->	O
value	pointer
==	O
NULL	O
)	O
return	O
_asn1_set_value	function
(	O
node	pointer
,	O
value	pointer
,	O
len	int
)	O
;	O
if	O
(	O
len	int
==	O
0	int
)	O
return	O
node	pointer
;	O
if	O
(	O
node	pointer
->	O
value	pointer
==	O
node	pointer
->	O
small_value	array
)	O
{	O
int	O
prev_len	int
=	O
node	pointer
->	O
value_len	int
;	O
node	pointer
->	O
value_len	int
+=	O
len	int
;	O
node	pointer
->	O
value	pointer
=	O
malloc	function
(	O
node	pointer
->	O
value_len	int
)	O
;	O
if	O
(	O
node	pointer
->	O
value	pointer
==	O
NULL	O
)	O
{	O
node	pointer
->	O
value_len	int
=	O
0	int
;	O
return	O
NULL	O
;	O
}	O
if	O
(	O
prev_len	int
>	O
0	int
)	O
memcpy	function
(	O
node	pointer
->	O
value	pointer
,	O
node	pointer
->	O
small_value	array
,	O
prev_len	int
)	O
;	O
memcpy	function
(	O
&	O
node	pointer
->	O
value	pointer
[	O
prev_len	int
]	O
,	O
value	pointer
,	O
len	int
)	O
;	O
return	O
node	pointer
;	O
}	O
else	O
{	O
int	O
prev_len	int
=	O
node	pointer
->	O
value_len	int
;	O
node	pointer
->	O
value_len	int
+=	O
len	int
;	O
node	pointer
->	O
value	pointer
=	O
_asn1_realloc	function
(	O
node	pointer
->	O
value	pointer
,	O
node	pointer
->	O
value_len	int
)	O
;	O
if	O
(	O
node	pointer
->	O
value	pointer
==	O
NULL	O
)	O
{	O
node	pointer
->	O
value_len	int
=	O
0	int
;	O
return	O
NULL	O
;	O
}	O
memcpy	function
(	O
&	O
node	pointer
->	O
value	pointer
[	O
prev_len	int
]	O
,	O
value	pointer
,	O
len	int
)	O
;	O
return	O
node	pointer
;	O
}	O
}	O
asn1_node	pointer
_asn1_set_name	function
(	O
asn1_node	pointer
node	pointer
,	O
const	O
char	O
*	O
name	pointer
)	O
{	O
if	O
(	O
node	pointer
==	O
NULL	O
)	O
return	O
node	pointer
;	O
_asn1_str_cpy	function
(	O
node	pointer
->	O
name	pointer
,	O
sizeof	O
(	O
node	pointer
->	O
name	pointer
)	O
,	O
name	pointer
?	O
name	pointer
:	O
""	pointer
)	O
;	O
node	pointer
->	O
name_hash	int
=	O
_asn1_hash_name	function
(	O
node	pointer
->	O
name	pointer
)	O
;	O
return	O
node	pointer
;	O
}	O
asn1_node	pointer
_asn1_cpy_name	function
(	O
asn1_node	pointer
dst	pointer
,	O
asn1_node_const	pointer
src	pointer
)	O
{	O
if	O
(	O
dst	pointer
==	O
NULL	O
)	O
return	O
dst	pointer
;	O
if	O
(	O
src	pointer
==	O
NULL	O
)	O
{	O
dst	pointer
->	O
name	pointer
[	O
0	int
]	O
=	O
0	int
;	O
dst	pointer
->	O
name_hash	int
=	O
_asn1_hash_name	function
(	O
dst	pointer
->	O
name	pointer
)	O
;	O
return	O
dst	pointer
;	O
}	O
_asn1_str_cpy	function
(	O
dst	pointer
->	O
name	pointer
,	O
sizeof	O
(	O
dst	pointer
->	O
name	pointer
)	O
,	O
src	pointer
->	O
name	pointer
)	O
;	O
dst	pointer
->	O
name_hash	int
=	O
src	pointer
->	O
name_hash	int
;	O
return	O
dst	pointer
;	O
}	O
asn1_node	pointer
_asn1_set_right	function
(	O
asn1_node	pointer
node	pointer
,	O
asn1_node	pointer
right	pointer
)	O
{	O
if	O
(	O
node	pointer
==	O
NULL	O
)	O
return	O
node	pointer
;	O
node	pointer
->	O
right	pointer
=	O
right	pointer
;	O
if	O
(	O
right	pointer
)	O
right	pointer
->	O
left	pointer
=	O
node	pointer
;	O
return	O
node	pointer
;	O
}	O
asn1_node	pointer
_asn1_get_last_right	function
(	O
asn1_node_const	pointer
node	pointer
)	O
{	O
asn1_node_const	pointer
p	pointer
;	O
if	O
(	O
node	pointer
==	O
NULL	O
)	O
return	O
NULL	O
;	O
p	pointer
=	O
node	pointer
;	O
while	O
(	O
p	pointer
->	O
right	pointer
)	O
p	pointer
=	O
p	pointer
->	O
right	pointer
;	O
return	O
(	O
asn1_node	pointer
)	O
p	pointer
;	O
}	O
void	O
_asn1_remove_node	function
(	O
asn1_node	pointer
node	pointer
,	O
unsigned	O
int	O
flags	int
)	O
{	O
if	O
(	O
node	pointer
==	O
NULL	O
)	O
return	O
;	O
if	O
(	O
node	pointer
->	O
value	pointer
!=	O
NULL	O
)	O
{	O
if	O
(	O
flags	int
&	O
ASN1_DELETE_FLAG_ZEROIZE	int
)	O
{	O
safe_memset	function
(	O
node	pointer
->	O
value	pointer
,	O
0	int
,	O
node	pointer
->	O
value_len	int
)	O
;	O
}	O
if	O
(	O
node	pointer
->	O
value	pointer
!=	O
node	pointer
->	O
small_value	array
)	O
free	function
(	O
node	pointer
->	O
value	pointer
)	O
;	O
}	O
free	function
(	O
node	pointer
)	O
;	O
}	O
asn1_node	pointer
_asn1_find_up	function
(	O
asn1_node_const	pointer
node	pointer
)	O
{	O
asn1_node_const	pointer
p	pointer
;	O
if	O
(	O
node	pointer
==	O
NULL	O
)	O
return	O
NULL	O
;	O
p	pointer
=	O
node	pointer
;	O
while	O
(	O
(	O
p	pointer
->	O
left	pointer
!=	O
NULL	O
)	O
&&	O
(	O
p	pointer
->	O
left	pointer
->	O
right	pointer
==	O
p	pointer
)	O
)	O
p	pointer
=	O
p	pointer
->	O
left	pointer
;	O
return	O
p	pointer
->	O
left	pointer
;	O
}	O
static	O
unsigned	O
_asn1_is_up	function
(	O
asn1_node_const	pointer
up_cand	pointer
,	O
asn1_node_const	pointer
down	pointer
)	O
{	O
asn1_node_const	pointer
d	pointer
,	O
u	pointer
;	O
if	O
(	O
up_cand	pointer
==	O
NULL	O
||	O
down	pointer
==	O
NULL	O
)	O
return	O
0	int
;	O
d	pointer
=	O
down	pointer
;	O
while	O
(	O
(	O
u	pointer
=	O
_asn1_find_up	function
(	O
d	pointer
)	O
)	O
!=	O
NULL	O
&&	O
u	pointer
!=	O
d	pointer
)	O
{	O
if	O
(	O
u	pointer
==	O
up_cand	pointer
)	O
return	O
1	int
;	O
d	pointer
=	O
u	pointer
;	O
}	O
return	O
0	int
;	O
}	O
void	O
_asn1_delete_node_from_list	function
(	O
list_type	struct
*	O
list	pointer
,	O
asn1_node	pointer
node	pointer
)	O
{	O
list_type	struct
*	O
p	pointer
=	O
list	pointer
;	O
while	O
(	O
p	pointer
)	O
{	O
if	O
(	O
p	pointer
->	O
node	pointer
==	O
node	pointer
)	O
p	pointer
->	O
node	pointer
=	O
NULL	O
;	O
p	pointer
=	O
p	pointer
->	O
next	pointer
;	O
}	O
}	O
void	O
_asn1_delete_list	function
(	O
list_type	struct
*	O
e_list	pointer
)	O
{	O
list_type	struct
*	O
p	pointer
;	O
while	O
(	O
e_list	pointer
)	O
{	O
p	pointer
=	O
e_list	pointer
;	O
e_list	pointer
=	O
e_list	pointer
->	O
next	pointer
;	O
free	function
(	O
p	pointer
)	O
;	O
}	O
}	O
void	O
_asn1_delete_list_and_nodes	function
(	O
list_type	struct
*	O
e_list	pointer
)	O
{	O
list_type	struct
*	O
p	pointer
;	O
while	O
(	O
e_list	pointer
)	O
{	O
p	pointer
=	O
e_list	pointer
;	O
e_list	pointer
=	O
e_list	pointer
->	O
next	pointer
;	O
_asn1_remove_node	function
(	O
p	pointer
->	O
node	pointer
,	O
0	int
)	O
;	O
free	function
(	O
p	pointer
)	O
;	O
}	O
}	O
char	O
*	O
_asn1_ltostr	function
(	O
int64_t	long
v	long
,	O
char	O
str	pointer
[	O
LTOSTR_MAX_SIZE	int
]	O
)	O
{	O
uint64_t	long
d	pointer
,	O
r	long
;	O
char	O
temp	pointer
[	O
LTOSTR_MAX_SIZE	int
]	O
;	O
int	O
count	int
,	O
k	int
,	O
start	pointer
;	O
uint64_t	long
val	long
;	O
if	O
(	O
v	long
<	O
0	int
)	O
{	O
str	pointer
[	O
0	int
]	O
=	O
'-'	O
;	O
start	pointer
=	O
1	int
;	O
val	long
=	O
-	O
(	O
(	O
uint64_t	long
)	O
v	long
)	O
;	O
}	O
else	O
{	O
val	long
=	O
v	long
;	O
start	pointer
=	O
0	int
;	O
}	O
count	int
=	O
0	int
;	O
do	O
{	O
d	pointer
=	O
val	long
/	O
10	int
;	O
r	long
=	O
val	long
-	O
d	pointer
*	O
10	int
;	O
temp	pointer
[	O
start	pointer
+	O
count	int
]	O
=	O
'0'	O
+	O
(	O
char	O
)	O
r	long
;	O
count	int
++	O
;	O
val	long
=	O
d	pointer
;	O
}	O
while	O
(	O
val	long
&&	O
(	O
(	O
start	pointer
+	O
count	int
)	O
<	O
LTOSTR_MAX_SIZE	int
-	O
1	int
)	O
)	O
;	O
for	O
(	O
k	int
=	O
0	int
;	O
k	int
<	O
count	int
;	O
k	int
++	O
)	O
str	pointer
[	O
k	int
+	O
start	pointer
]	O
=	O
temp	pointer
[	O
start	pointer
+	O
count	int
-	O
k	int
-	O
1	int
]	O
;	O
str	pointer
[	O
count	int
+	O
start	pointer
]	O
=	O
0	int
;	O
return	O
str	pointer
;	O
}	O
int	O
_asn1_change_integer_value	function
(	O
asn1_node	pointer
node	pointer
)	O
{	O
asn1_node	pointer
p	pointer
;	O
unsigned	O
char	O
val	long
[	O
SIZEOF_UNSIGNED_LONG_INT	int
]	O
;	O
unsigned	O
char	O
val2	array
[	O
SIZEOF_UNSIGNED_LONG_INT	int
+	O
1	int
]	O
;	O
int	O
len	int
;	O
if	O
(	O
node	pointer
==	O
NULL	O
)	O
return	O
ASN1_ELEMENT_NOT_FOUND	int
;	O
p	pointer
=	O
node	pointer
;	O
while	O
(	O
p	pointer
)	O
{	O
if	O
(	O
(	O
type_field	function
(	O
p	pointer
->	O
type	int
)	O
==	O
ASN1_ETYPE_INTEGER	int
)	O
&&	O
(	O
p	pointer
->	O
type	int
&	O
CONST_ASSIGN	O
)	O
)	O
{	O
if	O
(	O
p	pointer
->	O
value	pointer
)	O
{	O
_asn1_convert_integer	function
(	O
p	pointer
->	O
value	pointer
,	O
val	long
,	O
sizeof	O
(	O
val	long
)	O
,	O
&	O
len	int
)	O
;	O
asn1_octet_der	function
(	O
val	long
,	O
len	int
,	O
val2	array
,	O
&	O
len	int
)	O
;	O
_asn1_set_value	function
(	O
p	pointer
,	O
val2	array
,	O
len	int
)	O
;	O
}	O
}	O
if	O
(	O
p	pointer
->	O
down	pointer
)	O
{	O
p	pointer
=	O
p	pointer
->	O
down	pointer
;	O
}	O
else	O
{	O
if	O
(	O
p	pointer
==	O
node	pointer
)	O
p	pointer
=	O
NULL	O
;	O
else	O
if	O
(	O
p	pointer
->	O
right	pointer
)	O
p	pointer
=	O
p	pointer
->	O
right	pointer
;	O
else	O
{	O
while	O
(	O
1	int
)	O
{	O
p	pointer
=	O
_asn1_find_up	function
(	O
p	pointer
)	O
;	O
if	O
(	O
p	pointer
==	O
node	pointer
)	O
{	O
p	pointer
=	O
NULL	O
;	O
break	O
;	O
}	O
if	O
(	O
p	pointer
&&	O
p	pointer
->	O
right	pointer
)	O
{	O
p	pointer
=	O
p	pointer
->	O
right	pointer
;	O
break	O
;	O
}	O
}	O
}	O
}	O
}	O
return	O
ASN1_SUCCESS	int
;	O
}	O
int	O
_asn1_expand_object_id	function
(	O
list_type	struct
*	O
*	O
list	pointer
,	O
asn1_node	pointer
node	pointer
)	O
{	O
asn1_node	pointer
p	pointer
,	O
p2	pointer
,	O
p3	pointer
,	O
p4	pointer
,	O
p5	pointer
;	O
char	O
name_root	array
[	O
ASN1_MAX_NAME_SIZE	int
]	O
,	O
name2	array
[	O
2	int
*	O
ASN1_MAX_NAME_SIZE	int
+	O
1	int
]	O
;	O
int	O
move	int
,	O
tlen	int
,	O
tries	int
;	O
unsigned	O
max_constants	int
;	O
if	O
(	O
node	pointer
==	O
NULL	O
)	O
return	O
ASN1_ELEMENT_NOT_FOUND	int
;	O
_asn1_str_cpy	function
(	O
name_root	array
,	O
sizeof	O
(	O
name_root	array
)	O
,	O
node	pointer
->	O
name	pointer
)	O
;	O
p	pointer
=	O
node	pointer
;	O
move	int
=	O
DOWN	int
;	O
tries	int
=	O
0	int
;	O
while	O
(	O
!	O
(	O
(	O
p	pointer
==	O
node	pointer
)	O
&&	O
(	O
move	int
==	O
UP	int
)	O
)	O
)	O
{	O
if	O
(	O
move	int
!=	O
UP	int
)	O
{	O
if	O
(	O
(	O
type_field	function
(	O
p	pointer
->	O
type	int
)	O
==	O
ASN1_ETYPE_OBJECT_ID	int
)	O
&&	O
(	O
p	pointer
->	O
type	int
&	O
CONST_ASSIGN	O
)	O
)	O
{	O
p2	pointer
=	O
p	pointer
->	O
down	pointer
;	O
if	O
(	O
p2	pointer
&&	O
(	O
type_field	function
(	O
p2	pointer
->	O
type	int
)	O
==	O
ASN1_ETYPE_CONSTANT	int
)	O
)	O
{	O
if	O
(	O
p2	pointer
->	O
value	pointer
&&	O
!	O
c_isdigit	function
(	O
p2	pointer
->	O
value	pointer
[	O
0	int
]	O
)	O
)	O
{	O
_asn1_str_cpy	function
(	O
name2	array
,	O
sizeof	O
(	O
name2	array
)	O
,	O
name_root	array
)	O
;	O
_asn1_str_cat	function
(	O
name2	array
,	O
sizeof	O
(	O
name2	array
)	O
,	O
"."	pointer
)	O
;	O
_asn1_str_cat	function
(	O
name2	array
,	O
sizeof	O
(	O
name2	array
)	O
,	O
(	O
char	O
*	O
)	O
p2	pointer
->	O
value	pointer
)	O
;	O
p3	pointer
=	O
asn1_find_node	function
(	O
node	pointer
,	O
name2	array
)	O
;	O
if	O
(	O
!	O
p3	pointer
||	O
_asn1_is_up	function
(	O
p2	pointer
,	O
p3	pointer
)	O
||	O
(	O
type_field	function
(	O
p3	pointer
->	O
type	int
)	O
!=	O
ASN1_ETYPE_OBJECT_ID	int
)	O
||	O
!	O
(	O
p3	pointer
->	O
type	int
&	O
CONST_ASSIGN	O
)	O
)	O
return	O
ASN1_ELEMENT_NOT_FOUND	int
;	O
_asn1_set_down	function
(	O
p	pointer
,	O
p2	pointer
->	O
right	pointer
)	O
;	O
if	O
(	O
p2	pointer
->	O
down	pointer
)	O
_asn1_delete_structure	function
(	O
*	O
list	pointer
,	O
&	O
p2	pointer
->	O
down	pointer
,	O
0	int
)	O
;	O
_asn1_delete_node_from_list	function
(	O
*	O
list	pointer
,	O
p2	pointer
)	O
;	O
_asn1_remove_node	function
(	O
p2	pointer
,	O
0	int
)	O
;	O
p2	pointer
=	O
p	pointer
;	O
p4	pointer
=	O
p3	pointer
->	O
down	pointer
;	O
max_constants	int
=	O
0	int
;	O
while	O
(	O
p4	pointer
)	O
{	O
if	O
(	O
type_field	function
(	O
p4	pointer
->	O
type	int
)	O
==	O
ASN1_ETYPE_CONSTANT	int
)	O
{	O
max_constants	int
++	O
;	O
if	O
(	O
max_constants	int
==	O
MAX_CONSTANTS	int
)	O
return	O
ASN1_RECURSION	int
;	O
p5	pointer
=	O
_asn1_add_single_node	function
(	O
ASN1_ETYPE_CONSTANT	int
)	O
;	O
_asn1_set_name	function
(	O
p5	pointer
,	O
p4	pointer
->	O
name	pointer
)	O
;	O
if	O
(	O
p4	pointer
->	O
value	pointer
)	O
{	O
tlen	int
=	O
_asn1_strlen	O
(	O
p4	pointer
->	O
value	pointer
)	O
;	O
if	O
(	O
tlen	int
>	O
0	int
)	O
_asn1_set_value	function
(	O
p5	pointer
,	O
p4	pointer
->	O
value	pointer
,	O
tlen	int
+	O
1	int
)	O
;	O
}	O
_asn1_add_static_node2	function
(	O
list	pointer
,	O
p5	pointer
)	O
;	O
if	O
(	O
p2	pointer
==	O
p	pointer
)	O
{	O
_asn1_set_right	function
(	O
p5	pointer
,	O
p	pointer
->	O
down	pointer
)	O
;	O
_asn1_set_down	function
(	O
p	pointer
,	O
p5	pointer
)	O
;	O
}	O
else	O
{	O
_asn1_set_right	function
(	O
p5	pointer
,	O
p2	pointer
->	O
right	pointer
)	O
;	O
_asn1_set_right	function
(	O
p2	pointer
,	O
p5	pointer
)	O
;	O
}	O
p2	pointer
=	O
p5	pointer
;	O
}	O
p4	pointer
=	O
p4	pointer
->	O
right	pointer
;	O
}	O
move	int
=	O
DOWN	int
;	O
tries	int
++	O
;	O
if	O
(	O
tries	int
>=	O
EXPAND_OBJECT_ID_MAX_RECURSION	int
)	O
return	O
ASN1_RECURSION	int
;	O
continue	O
;	O
}	O
}	O
}	O
move	int
=	O
DOWN	int
;	O
}	O
else	O
move	int
=	O
RIGHT	int
;	O
tries	int
=	O
0	int
;	O
if	O
(	O
move	int
==	O
DOWN	int
)	O
{	O
if	O
(	O
p	pointer
->	O
down	pointer
)	O
p	pointer
=	O
p	pointer
->	O
down	pointer
;	O
else	O
move	int
=	O
RIGHT	int
;	O
}	O
if	O
(	O
p	pointer
==	O
node	pointer
)	O
{	O
move	int
=	O
UP	int
;	O
continue	O
;	O
}	O
if	O
(	O
move	int
==	O
RIGHT	int
)	O
{	O
if	O
(	O
p	pointer
&&	O
p	pointer
->	O
right	pointer
)	O
p	pointer
=	O
p	pointer
->	O
right	pointer
;	O
else	O
move	int
=	O
UP	int
;	O
}	O
if	O
(	O
move	int
==	O
UP	int
)	O
p	pointer
=	O
_asn1_find_up	function
(	O
p	pointer
)	O
;	O
}	O
p	pointer
=	O
node	pointer
;	O
move	int
=	O
DOWN	int
;	O
while	O
(	O
!	O
(	O
(	O
p	pointer
==	O
node	pointer
)	O
&&	O
(	O
move	int
==	O
UP	int
)	O
)	O
)	O
{	O
if	O
(	O
move	int
!=	O
UP	int
)	O
{	O
if	O
(	O
(	O
type_field	function
(	O
p	pointer
->	O
type	int
)	O
==	O
ASN1_ETYPE_OBJECT_ID	int
)	O
&&	O
(	O
p	pointer
->	O
type	int
&	O
CONST_DEFAULT	O
)	O
)	O
{	O
p2	pointer
=	O
p	pointer
->	O
down	pointer
;	O
if	O
(	O
p2	pointer
&&	O
(	O
type_field	function
(	O
p2	pointer
->	O
type	int
)	O
==	O
ASN1_ETYPE_DEFAULT	int
)	O
)	O
{	O
_asn1_str_cpy	function
(	O
name2	array
,	O
sizeof	O
(	O
name2	array
)	O
,	O
name_root	array
)	O
;	O
_asn1_str_cat	function
(	O
name2	array
,	O
sizeof	O
(	O
name2	array
)	O
,	O
"."	pointer
)	O
;	O
if	O
(	O
p2	pointer
->	O
value	pointer
)	O
_asn1_str_cat	function
(	O
name2	array
,	O
sizeof	O
(	O
name2	array
)	O
,	O
(	O
char	O
*	O
)	O
p2	pointer
->	O
value	pointer
)	O
;	O
p3	pointer
=	O
asn1_find_node	function
(	O
node	pointer
,	O
name2	array
)	O
;	O
if	O
(	O
!	O
p3	pointer
||	O
(	O
type_field	function
(	O
p3	pointer
->	O
type	int
)	O
!=	O
ASN1_ETYPE_OBJECT_ID	int
)	O
||	O
!	O
(	O
p3	pointer
->	O
type	int
&	O
CONST_ASSIGN	O
)	O
)	O
return	O
ASN1_ELEMENT_NOT_FOUND	int
;	O
p4	pointer
=	O
p3	pointer
->	O
down	pointer
;	O
name2	array
[	O
0	int
]	O
=	O
0	int
;	O
while	O
(	O
p4	pointer
)	O
{	O
if	O
(	O
type_field	function
(	O
p4	pointer
->	O
type	int
)	O
==	O
ASN1_ETYPE_CONSTANT	int
)	O
{	O
if	O
(	O
p4	pointer
->	O
value	pointer
==	O
NULL	O
)	O
return	O
ASN1_VALUE_NOT_FOUND	int
;	O
if	O
(	O
name2	array
[	O
0	int
]	O
)	O
_asn1_str_cat	function
(	O
name2	array
,	O
sizeof	O
(	O
name2	array
)	O
,	O
"."	pointer
)	O
;	O
_asn1_str_cat	function
(	O
name2	array
,	O
sizeof	O
(	O
name2	array
)	O
,	O
(	O
char	O
*	O
)	O
p4	pointer
->	O
value	pointer
)	O
;	O
}	O
p4	pointer
=	O
p4	pointer
->	O
right	pointer
;	O
}	O
tlen	int
=	O
strlen	function
(	O
name2	array
)	O
;	O
if	O
(	O
tlen	int
>	O
0	int
)	O
_asn1_set_value	function
(	O
p2	pointer
,	O
name2	array
,	O
tlen	int
+	O
1	int
)	O
;	O
}	O
}	O
move	int
=	O
DOWN	int
;	O
}	O
else	O
move	int
=	O
RIGHT	int
;	O
if	O
(	O
move	int
==	O
DOWN	int
)	O
{	O
if	O
(	O
p	pointer
->	O
down	pointer
)	O
p	pointer
=	O
p	pointer
->	O
down	pointer
;	O
else	O
move	int
=	O
RIGHT	int
;	O
}	O
if	O
(	O
p	pointer
==	O
node	pointer
)	O
{	O
move	int
=	O
UP	int
;	O
continue	O
;	O
}	O
if	O
(	O
move	int
==	O
RIGHT	int
)	O
{	O
if	O
(	O
p	pointer
&&	O
p	pointer
->	O
right	pointer
)	O
p	pointer
=	O
p	pointer
->	O
right	pointer
;	O
else	O
move	int
=	O
UP	int
;	O
}	O
if	O
(	O
move	int
==	O
UP	int
)	O
p	pointer
=	O
_asn1_find_up	function
(	O
p	pointer
)	O
;	O
}	O
return	O
ASN1_SUCCESS	int
;	O
}	O
int	O
_asn1_type_set_config	function
(	O
asn1_node	pointer
node	pointer
)	O
{	O
asn1_node	pointer
p	pointer
,	O
p2	pointer
;	O
int	O
move	int
;	O
if	O
(	O
node	pointer
==	O
NULL	O
)	O
return	O
ASN1_ELEMENT_NOT_FOUND	int
;	O
p	pointer
=	O
node	pointer
;	O
move	int
=	O
DOWN	int
;	O
while	O
(	O
!	O
(	O
(	O
p	pointer
==	O
node	pointer
)	O
&&	O
(	O
move	int
==	O
UP	int
)	O
)	O
)	O
{	O
if	O
(	O
move	int
!=	O
UP	int
)	O
{	O
if	O
(	O
type_field	function
(	O
p	pointer
->	O
type	int
)	O
==	O
ASN1_ETYPE_SET	int
)	O
{	O
p2	pointer
=	O
p	pointer
->	O
down	pointer
;	O
while	O
(	O
p2	pointer
)	O
{	O
if	O
(	O
type_field	function
(	O
p2	pointer
->	O
type	int
)	O
!=	O
ASN1_ETYPE_TAG	int
)	O
p2	pointer
->	O
type	int
|=	O
CONST_SET	O
|	O
CONST_NOT_USED	O
;	O
p2	pointer
=	O
p2	pointer
->	O
right	pointer
;	O
}	O
}	O
move	int
=	O
DOWN	int
;	O
}	O
else	O
move	int
=	O
RIGHT	int
;	O
if	O
(	O
move	int
==	O
DOWN	int
)	O
{	O
if	O
(	O
p	pointer
->	O
down	pointer
)	O
p	pointer
=	O
p	pointer
->	O
down	pointer
;	O
else	O
move	int
=	O
RIGHT	int
;	O
}	O
if	O
(	O
p	pointer
==	O
node	pointer
)	O
{	O
move	int
=	O
UP	int
;	O
continue	O
;	O
}	O
if	O
(	O
move	int
==	O
RIGHT	int
)	O
{	O
if	O
(	O
p	pointer
&&	O
p	pointer
->	O
right	pointer
)	O
p	pointer
=	O
p	pointer
->	O
right	pointer
;	O
else	O
move	int
=	O
UP	int
;	O
}	O
if	O
(	O
move	int
==	O
UP	int
)	O
p	pointer
=	O
_asn1_find_up	function
(	O
p	pointer
)	O
;	O
}	O
return	O
ASN1_SUCCESS	int
;	O
}	O
int	O
_asn1_check_identifier	function
(	O
asn1_node_const	pointer
node	pointer
)	O
{	O
asn1_node_const	pointer
p	pointer
,	O
p2	pointer
;	O
char	O
name2	array
[	O
ASN1_MAX_NAME_SIZE	int
*	O
2	int
+	O
2	int
]	O
;	O
if	O
(	O
node	pointer
==	O
NULL	O
)	O
return	O
ASN1_ELEMENT_NOT_FOUND	int
;	O
p	pointer
=	O
node	pointer
;	O
while	O
(	O
p	pointer
)	O
{	O
if	O
(	O
p	pointer
->	O
value	pointer
&&	O
type_field	function
(	O
p	pointer
->	O
type	int
)	O
==	O
ASN1_ETYPE_IDENTIFIER	int
)	O
{	O
_asn1_str_cpy	function
(	O
name2	array
,	O
sizeof	O
(	O
name2	array
)	O
,	O
node	pointer
->	O
name	pointer
)	O
;	O
_asn1_str_cat	function
(	O
name2	array
,	O
sizeof	O
(	O
name2	array
)	O
,	O
"."	pointer
)	O
;	O
_asn1_str_cat	function
(	O
name2	array
,	O
sizeof	O
(	O
name2	array
)	O
,	O
(	O
char	O
*	O
)	O
p	pointer
->	O
value	pointer
)	O
;	O
p2	pointer
=	O
asn1_find_node	function
(	O
node	pointer
,	O
name2	array
)	O
;	O
if	O
(	O
p2	pointer
==	O
NULL	O
)	O
{	O
if	O
(	O
p	pointer
->	O
value	pointer
)	O
_asn1_str_cpy	function
(	O
_asn1_identifierMissing	array
,	O
sizeof	O
(	O
_asn1_identifierMissing	array
)	O
,	O
(	O
char	O
*	O
)	O
p	pointer
->	O
value	pointer
)	O
;	O
else	O
_asn1_strcpy	O
(	O
_asn1_identifierMissing	array
,	O
"(null)"	pointer
)	O
;	O
return	O
ASN1_IDENTIFIER_NOT_FOUND	int
;	O
}	O
}	O
else	O
if	O
(	O
(	O
type_field	function
(	O
p	pointer
->	O
type	int
)	O
==	O
ASN1_ETYPE_OBJECT_ID	int
)	O
&&	O
(	O
p	pointer
->	O
type	int
&	O
CONST_DEFAULT	O
)	O
)	O
{	O
p2	pointer
=	O
p	pointer
->	O
down	pointer
;	O
if	O
(	O
p2	pointer
&&	O
(	O
type_field	function
(	O
p2	pointer
->	O
type	int
)	O
==	O
ASN1_ETYPE_DEFAULT	int
)	O
)	O
{	O
_asn1_str_cpy	function
(	O
name2	array
,	O
sizeof	O
(	O
name2	array
)	O
,	O
node	pointer
->	O
name	pointer
)	O
;	O
if	O
(	O
p2	pointer
->	O
value	pointer
)	O
{	O
_asn1_str_cat	function
(	O
name2	array
,	O
sizeof	O
(	O
name2	array
)	O
,	O
"."	pointer
)	O
;	O
_asn1_str_cat	function
(	O
name2	array
,	O
sizeof	O
(	O
name2	array
)	O
,	O
(	O
char	O
*	O
)	O
p2	pointer
->	O
value	pointer
)	O
;	O
_asn1_str_cpy	function
(	O
_asn1_identifierMissing	array
,	O
sizeof	O
(	O
_asn1_identifierMissing	array
)	O
,	O
(	O
char	O
*	O
)	O
p2	pointer
->	O
value	pointer
)	O
;	O
}	O
else	O
_asn1_strcpy	O
(	O
_asn1_identifierMissing	array
,	O
"(null)"	pointer
)	O
;	O
p2	pointer
=	O
asn1_find_node	function
(	O
node	pointer
,	O
name2	array
)	O
;	O
if	O
(	O
!	O
p2	pointer
||	O
(	O
type_field	function
(	O
p2	pointer
->	O
type	int
)	O
!=	O
ASN1_ETYPE_OBJECT_ID	int
)	O
||	O
!	O
(	O
p2	pointer
->	O
type	int
&	O
CONST_ASSIGN	O
)	O
)	O
return	O
ASN1_IDENTIFIER_NOT_FOUND	int
;	O
else	O
_asn1_identifierMissing	array
[	O
0	int
]	O
=	O
0	int
;	O
}	O
}	O
else	O
if	O
(	O
(	O
type_field	function
(	O
p	pointer
->	O
type	int
)	O
==	O
ASN1_ETYPE_OBJECT_ID	int
)	O
&&	O
(	O
p	pointer
->	O
type	int
&	O
CONST_ASSIGN	O
)	O
)	O
{	O
p2	pointer
=	O
p	pointer
->	O
down	pointer
;	O
if	O
(	O
p2	pointer
&&	O
(	O
type_field	function
(	O
p2	pointer
->	O
type	int
)	O
==	O
ASN1_ETYPE_CONSTANT	int
)	O
)	O
{	O
if	O
(	O
p2	pointer
->	O
value	pointer
&&	O
!	O
c_isdigit	function
(	O
p2	pointer
->	O
value	pointer
[	O
0	int
]	O
)	O
)	O
{	O
_asn1_str_cpy	function
(	O
name2	array
,	O
sizeof	O
(	O
name2	array
)	O
,	O
node	pointer
->	O
name	pointer
)	O
;	O
_asn1_str_cat	function
(	O
name2	array
,	O
sizeof	O
(	O
name2	array
)	O
,	O
"."	pointer
)	O
;	O
_asn1_str_cat	function
(	O
name2	array
,	O
sizeof	O
(	O
name2	array
)	O
,	O
(	O
char	O
*	O
)	O
p2	pointer
->	O
value	pointer
)	O
;	O
_asn1_str_cpy	function
(	O
_asn1_identifierMissing	array
,	O
sizeof	O
(	O
_asn1_identifierMissing	array
)	O
,	O
(	O
char	O
*	O
)	O
p2	pointer
->	O
value	pointer
)	O
;	O
p2	pointer
=	O
asn1_find_node	function
(	O
node	pointer
,	O
name2	array
)	O
;	O
if	O
(	O
!	O
p2	pointer
||	O
(	O
type_field	function
(	O
p2	pointer
->	O
type	int
)	O
!=	O
ASN1_ETYPE_OBJECT_ID	int
)	O
||	O
!	O
(	O
p2	pointer
->	O
type	int
&	O
CONST_ASSIGN	O
)	O
)	O
return	O
ASN1_IDENTIFIER_NOT_FOUND	int
;	O
else	O
_asn1_identifierMissing	array
[	O
0	int
]	O
=	O
0	int
;	O
}	O
}	O
}	O
if	O
(	O
p	pointer
->	O
down	pointer
)	O
{	O
p	pointer
=	O
p	pointer
->	O
down	pointer
;	O
}	O
else	O
if	O
(	O
p	pointer
->	O
right	pointer
)	O
p	pointer
=	O
p	pointer
->	O
right	pointer
;	O
else	O
{	O
while	O
(	O
p	pointer
)	O
{	O
p	pointer
=	O
_asn1_find_up	function
(	O
p	pointer
)	O
;	O
if	O
(	O
p	pointer
==	O
node	pointer
)	O
{	O
p	pointer
=	O
NULL	O
;	O
break	O
;	O
}	O
if	O
(	O
p	pointer
&&	O
p	pointer
->	O
right	pointer
)	O
{	O
p	pointer
=	O
p	pointer
->	O
right	pointer
;	O
break	O
;	O
}	O
}	O
}	O
}	O
return	O
ASN1_SUCCESS	int
;	O
}	O
int	O
_asn1_set_default_tag	function
(	O
asn1_node	pointer
node	pointer
)	O
{	O
asn1_node	pointer
p	pointer
;	O
if	O
(	O
(	O
node	pointer
==	O
NULL	O
)	O
||	O
(	O
type_field	function
(	O
node	pointer
->	O
type	int
)	O
!=	O
ASN1_ETYPE_DEFINITIONS	int
)	O
)	O
return	O
ASN1_ELEMENT_NOT_FOUND	int
;	O
p	pointer
=	O
node	pointer
;	O
while	O
(	O
p	pointer
)	O
{	O
if	O
(	O
(	O
type_field	function
(	O
p	pointer
->	O
type	int
)	O
==	O
ASN1_ETYPE_TAG	int
)	O
&&	O
!	O
(	O
p	pointer
->	O
type	int
&	O
CONST_EXPLICIT	O
)	O
&&	O
!	O
(	O
p	pointer
->	O
type	int
&	O
CONST_IMPLICIT	O
)	O
)	O
{	O
if	O
(	O
node	pointer
->	O
type	int
&	O
CONST_EXPLICIT	O
)	O
p	pointer
->	O
type	int
|=	O
CONST_EXPLICIT	O
;	O
else	O
p	pointer
->	O
type	int
|=	O
CONST_IMPLICIT	O
;	O
}	O
if	O
(	O
p	pointer
->	O
down	pointer
)	O
{	O
p	pointer
=	O
p	pointer
->	O
down	pointer
;	O
}	O
else	O
if	O
(	O
p	pointer
->	O
right	pointer
)	O
p	pointer
=	O
p	pointer
->	O
right	pointer
;	O
else	O
{	O
while	O
(	O
1	int
)	O
{	O
p	pointer
=	O
_asn1_find_up	function
(	O
p	pointer
)	O
;	O
if	O
(	O
p	pointer
==	O
node	pointer
)	O
{	O
p	pointer
=	O
NULL	O
;	O
break	O
;	O
}	O
if	O
(	O
p	pointer
&&	O
p	pointer
->	O
right	pointer
)	O
{	O
p	pointer
=	O
p	pointer
->	O
right	pointer
;	O
break	O
;	O
}	O
}	O
}	O
}	O
return	O
ASN1_SUCCESS	int
;	O
}	O
