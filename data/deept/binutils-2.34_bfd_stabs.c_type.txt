struct	O
stab_link_includes_totals	struct
{	O
struct	O
stab_link_includes_totals	struct
*	O
next	pointer
;	O
bfd_vma	long
sum_chars	long
;	O
bfd_vma	long
num_chars	long
;	O
const	O
char	O
*	O
symb	pointer
;	O
}	O
;	O
struct	O
stab_link_includes_entry	struct
{	O
struct	O
bfd_hash_entry	struct
root	struct
;	O
struct	O
stab_link_includes_totals	struct
*	O
totals	pointer
;	O
}	O
;	O
struct	O
stab_excl_list	struct
{	O
struct	O
stab_excl_list	struct
*	O
next	pointer
;	O
bfd_size_type	long
offset	long
;	O
bfd_vma	long
val	array
;	O
int	O
type	enum
;	O
}	O
;	O
struct	O
stab_section_info	struct
{	O
struct	O
stab_excl_list	struct
*	O
excls	pointer
;	O
bfd_size_type	long
*	O
cumulative_skips	pointer
;	O
bfd_size_type	long
stridxs	array
[	O
1	int
]	O
;	O
}	O
;	O
static	O
struct	O
bfd_hash_entry	struct
*	O
stab_link_includes_newfunc	function
(	O
struct	O
bfd_hash_entry	struct
*	O
entry	pointer
,	O
struct	O
bfd_hash_table	struct
*	O
table	pointer
,	O
const	O
char	O
*	O
string	pointer
)	O
{	O
struct	O
stab_link_includes_entry	struct
*	O
ret	pointer
=	O
(	O
struct	O
stab_link_includes_entry	struct
*	O
)	O
entry	pointer
;	O
if	O
(	O
ret	pointer
==	O
NULL	O
)	O
ret	pointer
=	O
(	O
struct	O
stab_link_includes_entry	struct
*	O
)	O
bfd_hash_allocate	function
(	O
table	pointer
,	O
sizeof	O
(	O
struct	O
stab_link_includes_entry	struct
)	O
)	O
;	O
if	O
(	O
ret	pointer
==	O
NULL	O
)	O
return	O
NULL	O
;	O
ret	pointer
=	O
(	O
(	O
struct	O
stab_link_includes_entry	struct
*	O
)	O
bfd_hash_newfunc	function
(	O
(	O
struct	O
bfd_hash_entry	struct
*	O
)	O
ret	pointer
,	O
table	pointer
,	O
string	pointer
)	O
)	O
;	O
if	O
(	O
ret	pointer
)	O
ret	pointer
->	O
totals	pointer
=	O
NULL	O
;	O
return	O
(	O
struct	O
bfd_hash_entry	struct
*	O
)	O
ret	pointer
;	O
}	O
bfd_boolean	int
_bfd_link_section_stabs	function
(	O
bfd	struct
*	O
abfd	pointer
,	O
struct	O
stab_info	struct
*	O
sinfo	pointer
,	O
asection	struct
*	O
stabsec	pointer
,	O
asection	struct
*	O
stabstrsec	pointer
,	O
void	O
*	O
*	O
psecinfo	pointer
,	O
bfd_size_type	long
*	O
pstring_offset	pointer
)	O
{	O
bfd_boolean	int
first	int
;	O
bfd_size_type	long
count	int
,	O
amt	long
;	O
struct	O
stab_section_info	struct
*	O
secinfo	pointer
;	O
bfd_byte	char
*	O
stabbuf	pointer
=	O
NULL	O
;	O
bfd_byte	char
*	O
stabstrbuf	pointer
=	O
NULL	O
;	O
bfd_byte	char
*	O
sym	pointer
,	O
*	O
symend	pointer
;	O
bfd_size_type	long
stroff	long
,	O
next_stroff	long
,	O
skip	long
;	O
bfd_size_type	long
*	O
pstridx	pointer
;	O
if	O
(	O
stabsec	pointer
->	O
size	long
==	O
0	int
||	O
stabstrsec	pointer
->	O
size	long
==	O
0	int
)	O
return	O
TRUE	int
;	O
if	O
(	O
stabsec	pointer
->	O
size	long
%	O
STABSIZE	int
!=	O
0	int
)	O
return	O
TRUE	int
;	O
if	O
(	O
(	O
stabstrsec	pointer
->	O
flags	int
&	O
SEC_RELOC	int
)	O
!=	O
0	int
)	O
return	O
TRUE	int
;	O
if	O
(	O
bfd_is_abs_section	function
(	O
stabsec	pointer
->	O
output_section	pointer
)	O
||	O
bfd_is_abs_section	function
(	O
stabstrsec	pointer
->	O
output_section	pointer
)	O
)	O
return	O
TRUE	int
;	O
first	int
=	O
FALSE	int
;	O
if	O
(	O
sinfo	pointer
->	O
stabstr	pointer
==	O
NULL	O
)	O
{	O
flagword	int
flags	int
;	O
first	int
=	O
TRUE	int
;	O
sinfo	pointer
->	O
strings	pointer
=	O
_bfd_stringtab_init	function
(	O
)	O
;	O
if	O
(	O
sinfo	pointer
->	O
strings	pointer
==	O
NULL	O
)	O
goto	O
error_return	O
;	O
(	O
void	O
)	O
_bfd_stringtab_add	function
(	O
sinfo	pointer
->	O
strings	pointer
,	O
""	pointer
,	O
TRUE	int
,	O
TRUE	int
)	O
;	O
if	O
(	O
!	O
bfd_hash_table_init	function
(	O
&	O
sinfo	pointer
->	O
includes	struct
,	O
stab_link_includes_newfunc	function
,	O
sizeof	O
(	O
struct	O
stab_link_includes_entry	struct
)	O
)	O
)	O
goto	O
error_return	O
;	O
flags	int
=	O
(	O
SEC_HAS_CONTENTS	int
|	O
SEC_READONLY	int
|	O
SEC_DEBUGGING	int
|	O
SEC_LINKER_CREATED	int
)	O
;	O
sinfo	pointer
->	O
stabstr	pointer
=	O
bfd_make_section_anyway_with_flags	function
(	O
abfd	pointer
,	O
".stabstr"	pointer
,	O
flags	int
)	O
;	O
if	O
(	O
sinfo	pointer
->	O
stabstr	pointer
==	O
NULL	O
)	O
goto	O
error_return	O
;	O
}	O
count	int
=	O
stabsec	pointer
->	O
size	long
/	O
STABSIZE	int
;	O
amt	long
=	O
sizeof	O
(	O
struct	O
stab_section_info	struct
)	O
;	O
amt	long
+=	O
(	O
count	int
-	O
1	int
)	O
*	O
sizeof	O
(	O
bfd_size_type	long
)	O
;	O
*	O
psecinfo	pointer
=	O
bfd_alloc	function
(	O
abfd	pointer
,	O
amt	long
)	O
;	O
if	O
(	O
*	O
psecinfo	pointer
==	O
NULL	O
)	O
goto	O
error_return	O
;	O
secinfo	pointer
=	O
(	O
struct	O
stab_section_info	struct
*	O
)	O
*	O
psecinfo	pointer
;	O
secinfo	pointer
->	O
excls	pointer
=	O
NULL	O
;	O
stabsec	pointer
->	O
rawsize	long
=	O
stabsec	pointer
->	O
size	long
;	O
secinfo	pointer
->	O
cumulative_skips	pointer
=	O
NULL	O
;	O
memset	function
(	O
secinfo	pointer
->	O
stridxs	array
,	O
0	int
,	O
(	O
size_t	long
)	O
count	int
*	O
sizeof	O
(	O
bfd_size_type	long
)	O
)	O
;	O
if	O
(	O
!	O
bfd_malloc_and_get_section	function
(	O
abfd	pointer
,	O
stabsec	pointer
,	O
&	O
stabbuf	pointer
)	O
||	O
!	O
bfd_malloc_and_get_section	function
(	O
abfd	pointer
,	O
stabstrsec	pointer
,	O
&	O
stabstrbuf	pointer
)	O
)	O
goto	O
error_return	O
;	O
stroff	long
=	O
0	int
;	O
next_stroff	long
=	O
pstring_offset	pointer
?	O
*	O
pstring_offset	pointer
:	O
0	int
;	O
skip	long
=	O
0	int
;	O
symend	pointer
=	O
stabbuf	pointer
+	O
stabsec	pointer
->	O
size	long
;	O
for	O
(	O
sym	pointer
=	O
stabbuf	pointer
,	O
pstridx	pointer
=	O
secinfo	pointer
->	O
stridxs	array
;	O
sym	pointer
<	O
symend	pointer
;	O
sym	pointer
+=	O
STABSIZE	int
,	O
++	O
pstridx	pointer
)	O
{	O
bfd_size_type	long
symstroff	long
;	O
int	O
type	enum
;	O
const	O
char	O
*	O
string	pointer
;	O
if	O
(	O
*	O
pstridx	pointer
!=	O
0	int
)	O
continue	O
;	O
type	enum
=	O
sym	pointer
[	O
TYPEOFF	int
]	O
;	O
if	O
(	O
type	enum
==	O
0	int
)	O
{	O
stroff	long
=	O
next_stroff	long
;	O
next_stroff	long
+=	O
bfd_get_32	O
(	O
abfd	pointer
,	O
sym	pointer
+	O
8	int
)	O
;	O
if	O
(	O
pstring_offset	pointer
)	O
*	O
pstring_offset	pointer
=	O
next_stroff	long
;	O
if	O
(	O
!	O
first	int
)	O
{	O
*	O
pstridx	pointer
=	O
(	O
bfd_size_type	long
)	O
-	O
1	int
;	O
++	O
skip	long
;	O
continue	O
;	O
}	O
first	int
=	O
FALSE	int
;	O
}	O
symstroff	long
=	O
stroff	long
+	O
bfd_get_32	O
(	O
abfd	pointer
,	O
sym	pointer
+	O
STRDXOFF	int
)	O
;	O
if	O
(	O
symstroff	long
>=	O
stabstrsec	pointer
->	O
size	long
)	O
{	O
_bfd_error_handler	function
(	O
_	O
(	O
"%pB(%pA+%#lx): stabs entry has invalid string index"	pointer
)	O
,	O
abfd	pointer
,	O
stabsec	pointer
,	O
(	O
long	O
)	O
(	O
sym	pointer
-	O
stabbuf	pointer
)	O
)	O
;	O
bfd_set_error	function
(	O
bfd_error_bad_value	int
)	O
;	O
goto	O
error_return	O
;	O
}	O
string	pointer
=	O
(	O
char	O
*	O
)	O
stabstrbuf	pointer
+	O
symstroff	long
;	O
*	O
pstridx	pointer
=	O
_bfd_stringtab_add	function
(	O
sinfo	pointer
->	O
strings	pointer
,	O
string	pointer
,	O
TRUE	int
,	O
TRUE	int
)	O
;	O
if	O
(	O
type	enum
==	O
(	O
int	O
)	O
N_BINCL	int
)	O
{	O
bfd_vma	long
sum_chars	long
;	O
bfd_vma	long
num_chars	long
;	O
bfd_vma	long
buf_len	long
=	O
0	int
;	O
char	O
*	O
symb	pointer
;	O
char	O
*	O
symb_rover	pointer
;	O
int	O
nest	int
;	O
bfd_byte	char
*	O
incl_sym	pointer
;	O
struct	O
stab_link_includes_entry	struct
*	O
incl_entry	pointer
;	O
struct	O
stab_link_includes_totals	struct
*	O
t	pointer
;	O
struct	O
stab_excl_list	struct
*	O
ne	pointer
;	O
symb	pointer
=	O
symb_rover	pointer
=	O
NULL	O
;	O
sum_chars	long
=	O
num_chars	long
=	O
0	int
;	O
nest	int
=	O
0	int
;	O
for	O
(	O
incl_sym	pointer
=	O
sym	pointer
+	O
STABSIZE	int
;	O
incl_sym	pointer
<	O
symend	pointer
;	O
incl_sym	pointer
+=	O
STABSIZE	int
)	O
{	O
int	O
incl_type	int
;	O
incl_type	int
=	O
incl_sym	pointer
[	O
TYPEOFF	int
]	O
;	O
if	O
(	O
incl_type	int
==	O
0	int
)	O
break	O
;	O
else	O
if	O
(	O
incl_type	int
==	O
(	O
int	O
)	O
N_EXCL	int
)	O
continue	O
;	O
else	O
if	O
(	O
incl_type	int
==	O
(	O
int	O
)	O
N_EINCL	int
)	O
{	O
if	O
(	O
nest	int
==	O
0	int
)	O
break	O
;	O
--	O
nest	int
;	O
}	O
else	O
if	O
(	O
incl_type	int
==	O
(	O
int	O
)	O
N_BINCL	int
)	O
++	O
nest	int
;	O
else	O
if	O
(	O
nest	int
==	O
0	int
)	O
{	O
const	O
char	O
*	O
str	pointer
;	O
str	pointer
=	O
(	O
(	O
char	O
*	O
)	O
stabstrbuf	pointer
+	O
stroff	long
+	O
bfd_get_32	O
(	O
abfd	pointer
,	O
incl_sym	pointer
+	O
STRDXOFF	int
)	O
)	O
;	O
for	O
(	O
;	O
*	O
str	pointer
!=	O
'\0'	O
;	O
str	pointer
++	O
)	O
{	O
if	O
(	O
num_chars	long
>=	O
buf_len	long
)	O
{	O
buf_len	long
+=	O
32	int
*	O
1024	int
;	O
symb	pointer
=	O
(	O
char	O
*	O
)	O
bfd_realloc_or_free	function
(	O
symb	pointer
,	O
buf_len	long
)	O
;	O
if	O
(	O
symb	pointer
==	O
NULL	O
)	O
goto	O
error_return	O
;	O
symb_rover	pointer
=	O
symb	pointer
+	O
num_chars	long
;	O
}	O
*	O
symb_rover	pointer
++	O
=	O
*	O
str	pointer
;	O
sum_chars	long
+=	O
*	O
str	pointer
;	O
num_chars	long
++	O
;	O
if	O
(	O
*	O
str	pointer
==	O
'('	O
)	O
{	O
++	O
str	pointer
;	O
while	O
(	O
ISDIGIT	O
(	O
*	O
str	pointer
)	O
)	O
++	O
str	pointer
;	O
--	O
str	pointer
;	O
}	O
}	O
}	O
}	O
BFD_ASSERT	O
(	O
num_chars	long
==	O
(	O
bfd_vma	long
)	O
(	O
symb_rover	pointer
-	O
symb	pointer
)	O
)	O
;	O
incl_entry	pointer
=	O
(	O
struct	O
stab_link_includes_entry	struct
*	O
)	O
bfd_hash_lookup	function
(	O
&	O
sinfo	pointer
->	O
includes	struct
,	O
string	pointer
,	O
TRUE	int
,	O
TRUE	int
)	O
;	O
if	O
(	O
incl_entry	pointer
==	O
NULL	O
)	O
goto	O
error_return	O
;	O
for	O
(	O
t	pointer
=	O
incl_entry	pointer
->	O
totals	pointer
;	O
t	pointer
!=	O
NULL	O
;	O
t	pointer
=	O
t	pointer
->	O
next	pointer
)	O
if	O
(	O
t	pointer
->	O
sum_chars	long
==	O
sum_chars	long
&&	O
t	pointer
->	O
num_chars	long
==	O
num_chars	long
&&	O
memcmp	function
(	O
t	pointer
->	O
symb	pointer
,	O
symb	pointer
,	O
num_chars	long
)	O
==	O
0	int
)	O
break	O
;	O
amt	long
=	O
sizeof	O
*	O
ne	pointer
;	O
ne	pointer
=	O
(	O
struct	O
stab_excl_list	struct
*	O
)	O
bfd_alloc	function
(	O
abfd	pointer
,	O
amt	long
)	O
;	O
if	O
(	O
ne	pointer
==	O
NULL	O
)	O
goto	O
error_return	O
;	O
ne	pointer
->	O
offset	long
=	O
sym	pointer
-	O
stabbuf	pointer
;	O
ne	pointer
->	O
val	array
=	O
sum_chars	long
;	O
ne	pointer
->	O
type	enum
=	O
(	O
int	O
)	O
N_BINCL	int
;	O
ne	pointer
->	O
next	pointer
=	O
secinfo	pointer
->	O
excls	pointer
;	O
secinfo	pointer
->	O
excls	pointer
=	O
ne	pointer
;	O
if	O
(	O
t	pointer
==	O
NULL	O
)	O
{	O
t	pointer
=	O
(	O
struct	O
stab_link_includes_totals	struct
*	O
)	O
bfd_hash_allocate	function
(	O
&	O
sinfo	pointer
->	O
includes	struct
,	O
sizeof	O
*	O
t	pointer
)	O
;	O
if	O
(	O
t	pointer
==	O
NULL	O
)	O
goto	O
error_return	O
;	O
t	pointer
->	O
sum_chars	long
=	O
sum_chars	long
;	O
t	pointer
->	O
num_chars	long
=	O
num_chars	long
;	O
t	pointer
->	O
symb	pointer
=	O
symb	pointer
=	O
(	O
char	O
*	O
)	O
bfd_realloc_or_free	function
(	O
symb	pointer
,	O
num_chars	long
)	O
;	O
t	pointer
->	O
next	pointer
=	O
incl_entry	pointer
->	O
totals	pointer
;	O
incl_entry	pointer
->	O
totals	pointer
=	O
t	pointer
;	O
}	O
else	O
{	O
bfd_size_type	long
*	O
incl_pstridx	pointer
;	O
ne	pointer
->	O
type	enum
=	O
(	O
int	O
)	O
N_EXCL	int
;	O
free	function
(	O
symb	pointer
)	O
;	O
nest	int
=	O
0	int
;	O
for	O
(	O
incl_sym	pointer
=	O
sym	pointer
+	O
STABSIZE	int
,	O
incl_pstridx	pointer
=	O
pstridx	pointer
+	O
1	int
;	O
incl_sym	pointer
<	O
symend	pointer
;	O
incl_sym	pointer
+=	O
STABSIZE	int
,	O
++	O
incl_pstridx	pointer
)	O
{	O
int	O
incl_type	int
;	O
incl_type	int
=	O
incl_sym	pointer
[	O
TYPEOFF	int
]	O
;	O
if	O
(	O
incl_type	int
==	O
(	O
int	O
)	O
N_EINCL	int
)	O
{	O
if	O
(	O
nest	int
==	O
0	int
)	O
{	O
*	O
incl_pstridx	pointer
=	O
(	O
bfd_size_type	long
)	O
-	O
1	int
;	O
++	O
skip	long
;	O
break	O
;	O
}	O
--	O
nest	int
;	O
}	O
else	O
if	O
(	O
incl_type	int
==	O
(	O
int	O
)	O
N_BINCL	int
)	O
++	O
nest	int
;	O
else	O
if	O
(	O
incl_type	int
==	O
(	O
int	O
)	O
N_EXCL	int
)	O
continue	O
;	O
else	O
if	O
(	O
nest	int
==	O
0	int
)	O
{	O
*	O
incl_pstridx	pointer
=	O
(	O
bfd_size_type	long
)	O
-	O
1	int
;	O
++	O
skip	long
;	O
}	O
}	O
}	O
}	O
}	O
free	function
(	O
stabbuf	pointer
)	O
;	O
stabbuf	pointer
=	O
NULL	O
;	O
free	function
(	O
stabstrbuf	pointer
)	O
;	O
stabstrbuf	pointer
=	O
NULL	O
;	O
stabsec	pointer
->	O
size	long
=	O
(	O
count	int
-	O
skip	long
)	O
*	O
STABSIZE	int
;	O
if	O
(	O
stabsec	pointer
->	O
size	long
==	O
0	int
)	O
stabsec	pointer
->	O
flags	int
|=	O
SEC_EXCLUDE	int
|	O
SEC_KEEP	int
;	O
stabstrsec	pointer
->	O
flags	int
|=	O
SEC_EXCLUDE	int
|	O
SEC_KEEP	int
;	O
sinfo	pointer
->	O
stabstr	pointer
->	O
size	long
=	O
_bfd_stringtab_size	function
(	O
sinfo	pointer
->	O
strings	pointer
)	O
;	O
if	O
(	O
skip	long
!=	O
0	int
)	O
{	O
bfd_size_type	long
i	pointer
,	O
offset	long
;	O
bfd_size_type	long
*	O
pskips	pointer
;	O
amt	long
=	O
count	int
*	O
sizeof	O
(	O
bfd_size_type	long
)	O
;	O
secinfo	pointer
->	O
cumulative_skips	pointer
=	O
(	O
bfd_size_type	long
*	O
)	O
bfd_alloc	function
(	O
abfd	pointer
,	O
amt	long
)	O
;	O
if	O
(	O
secinfo	pointer
->	O
cumulative_skips	pointer
==	O
NULL	O
)	O
goto	O
error_return	O
;	O
pskips	pointer
=	O
secinfo	pointer
->	O
cumulative_skips	pointer
;	O
pstridx	pointer
=	O
secinfo	pointer
->	O
stridxs	array
;	O
offset	long
=	O
0	int
;	O
for	O
(	O
i	pointer
=	O
0	int
;	O
i	pointer
<	O
count	int
;	O
i	pointer
++	O
,	O
pskips	pointer
++	O
,	O
pstridx	pointer
++	O
)	O
{	O
*	O
pskips	pointer
=	O
offset	long
;	O
if	O
(	O
*	O
pstridx	pointer
==	O
(	O
bfd_size_type	long
)	O
-	O
1	int
)	O
offset	long
+=	O
STABSIZE	int
;	O
}	O
BFD_ASSERT	O
(	O
offset	long
!=	O
0	int
)	O
;	O
}	O
return	O
TRUE	int
;	O
error_return	O
:	O
if	O
(	O
stabbuf	pointer
!=	O
NULL	O
)	O
free	function
(	O
stabbuf	pointer
)	O
;	O
if	O
(	O
stabstrbuf	pointer
!=	O
NULL	O
)	O
free	function
(	O
stabstrbuf	pointer
)	O
;	O
return	O
FALSE	int
;	O
}	O
bfd_boolean	int
_bfd_discard_section_stabs	function
(	O
bfd	struct
*	O
abfd	pointer
,	O
asection	struct
*	O
stabsec	pointer
,	O
void	O
*	O
psecinfo	pointer
,	O
bfd_boolean	int
(	O
*	O
reloc_symbol_deleted_p	pointer
)	O
(	O
bfd_vma	long
,	O
void	O
*	O
)	O
,	O
void	O
*	O
cookie	pointer
)	O
{	O
bfd_size_type	long
count	int
,	O
amt	long
;	O
struct	O
stab_section_info	struct
*	O
secinfo	pointer
;	O
bfd_byte	char
*	O
stabbuf	pointer
=	O
NULL	O
;	O
bfd_byte	char
*	O
sym	pointer
,	O
*	O
symend	pointer
;	O
bfd_size_type	long
skip	long
;	O
bfd_size_type	long
*	O
pstridx	pointer
;	O
int	O
deleting	int
;	O
if	O
(	O
stabsec	pointer
->	O
size	long
==	O
0	int
)	O
return	O
FALSE	int
;	O
if	O
(	O
stabsec	pointer
->	O
size	long
%	O
STABSIZE	int
!=	O
0	int
)	O
return	O
FALSE	int
;	O
if	O
(	O
(	O
stabsec	pointer
->	O
output_section	pointer
!=	O
NULL	O
&&	O
bfd_is_abs_section	function
(	O
stabsec	pointer
->	O
output_section	pointer
)	O
)	O
)	O
return	O
FALSE	int
;	O
if	O
(	O
psecinfo	pointer
==	O
NULL	O
)	O
return	O
FALSE	int
;	O
count	int
=	O
stabsec	pointer
->	O
rawsize	long
/	O
STABSIZE	int
;	O
secinfo	pointer
=	O
(	O
struct	O
stab_section_info	struct
*	O
)	O
psecinfo	pointer
;	O
if	O
(	O
!	O
bfd_malloc_and_get_section	function
(	O
abfd	pointer
,	O
stabsec	pointer
,	O
&	O
stabbuf	pointer
)	O
)	O
goto	O
error_return	O
;	O
skip	long
=	O
0	int
;	O
deleting	int
=	O
-	O
1	int
;	O
symend	pointer
=	O
stabbuf	pointer
+	O
stabsec	pointer
->	O
rawsize	long
;	O
for	O
(	O
sym	pointer
=	O
stabbuf	pointer
,	O
pstridx	pointer
=	O
secinfo	pointer
->	O
stridxs	array
;	O
sym	pointer
<	O
symend	pointer
;	O
sym	pointer
+=	O
STABSIZE	int
,	O
++	O
pstridx	pointer
)	O
{	O
int	O
type	enum
;	O
if	O
(	O
*	O
pstridx	pointer
==	O
(	O
bfd_size_type	long
)	O
-	O
1	int
)	O
continue	O
;	O
type	enum
=	O
sym	pointer
[	O
TYPEOFF	int
]	O
;	O
if	O
(	O
type	enum
==	O
(	O
int	O
)	O
N_FUN	int
)	O
{	O
int	O
strx	int
=	O
bfd_get_32	O
(	O
abfd	pointer
,	O
sym	pointer
+	O
STRDXOFF	int
)	O
;	O
if	O
(	O
strx	int
==	O
0	int
)	O
{	O
if	O
(	O
deleting	int
)	O
{	O
skip	long
++	O
;	O
*	O
pstridx	pointer
=	O
-	O
1	int
;	O
}	O
deleting	int
=	O
-	O
1	int
;	O
continue	O
;	O
}	O
deleting	int
=	O
0	int
;	O
if	O
(	O
(	O
*	O
reloc_symbol_deleted_p	pointer
)	O
(	O
sym	pointer
+	O
VALOFF	int
-	O
stabbuf	pointer
,	O
cookie	pointer
)	O
)	O
deleting	int
=	O
1	int
;	O
}	O
if	O
(	O
deleting	int
==	O
1	int
)	O
{	O
*	O
pstridx	pointer
=	O
-	O
1	int
;	O
skip	long
++	O
;	O
}	O
else	O
if	O
(	O
deleting	int
==	O
-	O
1	int
)	O
{	O
if	O
(	O
type	enum
==	O
(	O
int	O
)	O
N_STSYM	int
||	O
type	enum
==	O
(	O
int	O
)	O
N_LCSYM	int
)	O
if	O
(	O
(	O
*	O
reloc_symbol_deleted_p	pointer
)	O
(	O
sym	pointer
+	O
VALOFF	int
-	O
stabbuf	pointer
,	O
cookie	pointer
)	O
)	O
{	O
*	O
pstridx	pointer
=	O
-	O
1	int
;	O
skip	long
++	O
;	O
}	O
}	O
}	O
free	function
(	O
stabbuf	pointer
)	O
;	O
stabbuf	pointer
=	O
NULL	O
;	O
stabsec	pointer
->	O
size	long
-=	O
skip	long
*	O
STABSIZE	int
;	O
if	O
(	O
stabsec	pointer
->	O
size	long
==	O
0	int
)	O
stabsec	pointer
->	O
flags	int
|=	O
SEC_EXCLUDE	int
|	O
SEC_KEEP	int
;	O
if	O
(	O
skip	long
!=	O
0	int
)	O
{	O
bfd_size_type	long
i	pointer
,	O
offset	long
;	O
bfd_size_type	long
*	O
pskips	pointer
;	O
if	O
(	O
secinfo	pointer
->	O
cumulative_skips	pointer
==	O
NULL	O
)	O
{	O
amt	long
=	O
count	int
*	O
sizeof	O
(	O
bfd_size_type	long
)	O
;	O
secinfo	pointer
->	O
cumulative_skips	pointer
=	O
(	O
bfd_size_type	long
*	O
)	O
bfd_alloc	function
(	O
abfd	pointer
,	O
amt	long
)	O
;	O
if	O
(	O
secinfo	pointer
->	O
cumulative_skips	pointer
==	O
NULL	O
)	O
goto	O
error_return	O
;	O
}	O
pskips	pointer
=	O
secinfo	pointer
->	O
cumulative_skips	pointer
;	O
pstridx	pointer
=	O
secinfo	pointer
->	O
stridxs	array
;	O
offset	long
=	O
0	int
;	O
for	O
(	O
i	pointer
=	O
0	int
;	O
i	pointer
<	O
count	int
;	O
i	pointer
++	O
,	O
pskips	pointer
++	O
,	O
pstridx	pointer
++	O
)	O
{	O
*	O
pskips	pointer
=	O
offset	long
;	O
if	O
(	O
*	O
pstridx	pointer
==	O
(	O
bfd_size_type	long
)	O
-	O
1	int
)	O
offset	long
+=	O
STABSIZE	int
;	O
}	O
BFD_ASSERT	O
(	O
offset	long
!=	O
0	int
)	O
;	O
}	O
return	O
skip	long
>	O
0	int
;	O
error_return	O
:	O
if	O
(	O
stabbuf	pointer
!=	O
NULL	O
)	O
free	function
(	O
stabbuf	pointer
)	O
;	O
return	O
FALSE	int
;	O
}	O
bfd_boolean	int
_bfd_write_section_stabs	function
(	O
bfd	struct
*	O
output_bfd	pointer
,	O
struct	O
stab_info	struct
*	O
sinfo	pointer
,	O
asection	struct
*	O
stabsec	pointer
,	O
void	O
*	O
*	O
psecinfo	pointer
,	O
bfd_byte	char
*	O
contents	pointer
)	O
{	O
struct	O
stab_section_info	struct
*	O
secinfo	pointer
;	O
struct	O
stab_excl_list	struct
*	O
e	pointer
;	O
bfd_byte	char
*	O
sym	pointer
,	O
*	O
tosym	pointer
,	O
*	O
symend	pointer
;	O
bfd_size_type	long
*	O
pstridx	pointer
;	O
secinfo	pointer
=	O
(	O
struct	O
stab_section_info	struct
*	O
)	O
*	O
psecinfo	pointer
;	O
if	O
(	O
secinfo	pointer
==	O
NULL	O
)	O
return	O
bfd_set_section_contents	function
(	O
output_bfd	pointer
,	O
stabsec	pointer
->	O
output_section	pointer
,	O
contents	pointer
,	O
stabsec	pointer
->	O
output_offset	long
,	O
stabsec	pointer
->	O
size	long
)	O
;	O
for	O
(	O
e	pointer
=	O
secinfo	pointer
->	O
excls	pointer
;	O
e	pointer
!=	O
NULL	O
;	O
e	pointer
=	O
e	pointer
->	O
next	pointer
)	O
{	O
bfd_byte	char
*	O
excl_sym	pointer
;	O
BFD_ASSERT	O
(	O
e	pointer
->	O
offset	long
<	O
stabsec	pointer
->	O
rawsize	long
)	O
;	O
excl_sym	pointer
=	O
contents	pointer
+	O
e	pointer
->	O
offset	long
;	O
bfd_put_32	O
(	O
output_bfd	pointer
,	O
e	pointer
->	O
val	array
,	O
excl_sym	pointer
+	O
VALOFF	int
)	O
;	O
excl_sym	pointer
[	O
TYPEOFF	int
]	O
=	O
e	pointer
->	O
type	enum
;	O
}	O
tosym	pointer
=	O
contents	pointer
;	O
symend	pointer
=	O
contents	pointer
+	O
stabsec	pointer
->	O
rawsize	long
;	O
for	O
(	O
sym	pointer
=	O
contents	pointer
,	O
pstridx	pointer
=	O
secinfo	pointer
->	O
stridxs	array
;	O
sym	pointer
<	O
symend	pointer
;	O
sym	pointer
+=	O
STABSIZE	int
,	O
++	O
pstridx	pointer
)	O
{	O
if	O
(	O
*	O
pstridx	pointer
!=	O
(	O
bfd_size_type	long
)	O
-	O
1	int
)	O
{	O
if	O
(	O
tosym	pointer
!=	O
sym	pointer
)	O
memcpy	function
(	O
tosym	pointer
,	O
sym	pointer
,	O
STABSIZE	int
)	O
;	O
bfd_put_32	O
(	O
output_bfd	pointer
,	O
*	O
pstridx	pointer
,	O
tosym	pointer
+	O
STRDXOFF	int
)	O
;	O
if	O
(	O
sym	pointer
[	O
TYPEOFF	int
]	O
==	O
0	int
)	O
{	O
BFD_ASSERT	O
(	O
sym	pointer
==	O
contents	pointer
)	O
;	O
bfd_put_32	O
(	O
output_bfd	pointer
,	O
_bfd_stringtab_size	function
(	O
sinfo	pointer
->	O
strings	pointer
)	O
,	O
tosym	pointer
+	O
VALOFF	int
)	O
;	O
bfd_put_16	O
(	O
output_bfd	pointer
,	O
stabsec	pointer
->	O
output_section	pointer
->	O
size	long
/	O
STABSIZE	int
-	O
1	int
,	O
tosym	pointer
+	O
DESCOFF	int
)	O
;	O
}	O
tosym	pointer
+=	O
STABSIZE	int
;	O
}	O
}	O
BFD_ASSERT	O
(	O
(	O
bfd_size_type	long
)	O
(	O
tosym	pointer
-	O
contents	pointer
)	O
==	O
stabsec	pointer
->	O
size	long
)	O
;	O
return	O
bfd_set_section_contents	function
(	O
output_bfd	pointer
,	O
stabsec	pointer
->	O
output_section	pointer
,	O
contents	pointer
,	O
(	O
file_ptr	long
)	O
stabsec	pointer
->	O
output_offset	long
,	O
stabsec	pointer
->	O
size	long
)	O
;	O
}	O
bfd_boolean	int
_bfd_write_stab_strings	function
(	O
bfd	struct
*	O
output_bfd	pointer
,	O
struct	O
stab_info	struct
*	O
sinfo	pointer
)	O
{	O
if	O
(	O
bfd_is_abs_section	function
(	O
sinfo	pointer
->	O
stabstr	pointer
->	O
output_section	pointer
)	O
)	O
return	O
TRUE	int
;	O
BFD_ASSERT	O
(	O
(	O
sinfo	pointer
->	O
stabstr	pointer
->	O
output_offset	long
+	O
_bfd_stringtab_size	function
(	O
sinfo	pointer
->	O
strings	pointer
)	O
)	O
<=	O
sinfo	pointer
->	O
stabstr	pointer
->	O
output_section	pointer
->	O
size	long
)	O
;	O
if	O
(	O
bfd_seek	function
(	O
output_bfd	pointer
,	O
(	O
file_ptr	long
)	O
(	O
sinfo	pointer
->	O
stabstr	pointer
->	O
output_section	pointer
->	O
filepos	long
+	O
sinfo	pointer
->	O
stabstr	pointer
->	O
output_offset	long
)	O
,	O
SEEK_SET	int
)	O
!=	O
0	int
)	O
return	O
FALSE	int
;	O
if	O
(	O
!	O
_bfd_stringtab_emit	function
(	O
output_bfd	pointer
,	O
sinfo	pointer
->	O
strings	pointer
)	O
)	O
return	O
FALSE	int
;	O
_bfd_stringtab_free	function
(	O
sinfo	pointer
->	O
strings	pointer
)	O
;	O
bfd_hash_table_free	function
(	O
&	O
sinfo	pointer
->	O
includes	struct
)	O
;	O
return	O
TRUE	int
;	O
}	O
bfd_vma	long
_bfd_stab_section_offset	function
(	O
asection	struct
*	O
stabsec	pointer
,	O
void	O
*	O
psecinfo	pointer
,	O
bfd_vma	long
offset	long
)	O
{	O
struct	O
stab_section_info	struct
*	O
secinfo	pointer
;	O
secinfo	pointer
=	O
(	O
struct	O
stab_section_info	struct
*	O
)	O
psecinfo	pointer
;	O
if	O
(	O
secinfo	pointer
==	O
NULL	O
)	O
return	O
offset	long
;	O
if	O
(	O
offset	long
>=	O
stabsec	pointer
->	O
rawsize	long
)	O
return	O
offset	long
-	O
stabsec	pointer
->	O
rawsize	long
+	O
stabsec	pointer
->	O
size	long
;	O
if	O
(	O
secinfo	pointer
->	O
cumulative_skips	pointer
)	O
{	O
bfd_vma	long
i	pointer
;	O
i	pointer
=	O
offset	long
/	O
STABSIZE	int
;	O
if	O
(	O
secinfo	pointer
->	O
stridxs	array
[	O
i	pointer
]	O
==	O
(	O
bfd_size_type	long
)	O
-	O
1	int
)	O
return	O
(	O
bfd_vma	long
)	O
-	O
1	int
;	O
return	O
offset	long
-	O
secinfo	pointer
->	O
cumulative_skips	pointer
[	O
i	pointer
]	O
;	O
}	O
return	O
offset	long
;	O
}	O
