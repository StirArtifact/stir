mp_size_t	long
mpn_set_str	O
(	O
mp_ptr	pointer
rp	pointer
,	O
const	O
unsigned	O
char	O
*	O
str	pointer
,	O
size_t	long
str_len	long
,	O
int	O
base	int
)	O
{	O
if	O
(	O
POW2_P	O
(	O
base	int
)	O
)	O
{	O
const	O
unsigned	O
char	O
*	O
s	array
;	O
int	O
next_bitpos	int
;	O
mp_limb_t	long
res_digit	long
;	O
mp_size_t	long
size	long
;	O
int	O
bits_per_indigit	int
=	O
mp_bases	O
[	O
base	int
]	O
.	O
big_base	long
;	O
size	long
=	O
0	int
;	O
res_digit	long
=	O
0	int
;	O
next_bitpos	int
=	O
0	int
;	O
for	O
(	O
s	array
=	O
str	pointer
+	O
str_len	long
-	O
1	int
;	O
s	array
>=	O
str	pointer
;	O
s	array
--	O
)	O
{	O
int	O
inp_digit	int
=	O
*	O
s	array
;	O
res_digit	long
|=	O
(	O
(	O
mp_limb_t	long
)	O
inp_digit	int
<<	O
next_bitpos	int
)	O
&	O
GMP_NUMB_MASK	O
;	O
next_bitpos	int
+=	O
bits_per_indigit	int
;	O
if	O
(	O
next_bitpos	int
>=	O
GMP_NUMB_BITS	O
)	O
{	O
rp	pointer
[	O
size	long
++	O
]	O
=	O
res_digit	long
;	O
next_bitpos	int
-=	O
GMP_NUMB_BITS	O
;	O
res_digit	long
=	O
inp_digit	int
>>	O
(	O
bits_per_indigit	int
-	O
next_bitpos	int
)	O
;	O
}	O
}	O
if	O
(	O
res_digit	long
!=	O
0	int
)	O
rp	pointer
[	O
size	long
++	O
]	O
=	O
res_digit	long
;	O
return	O
size	long
;	O
}	O
if	O
(	O
BELOW_THRESHOLD	O
(	O
str_len	long
,	O
SET_STR_PRECOMPUTE_THRESHOLD	int
)	O
)	O
return	O
mpn_bc_set_str	O
(	O
rp	pointer
,	O
str	pointer
,	O
str_len	long
,	O
base	int
)	O
;	O
else	O
{	O
mp_ptr	pointer
powtab_mem	pointer
,	O
tp	pointer
;	O
powers_t	struct
powtab	array
[	O
GMP_LIMB_BITS	int
]	O
;	O
int	O
chars_per_limb	int
;	O
mp_size_t	long
size	long
;	O
mp_size_t	long
un	long
;	O
TMP_DECL	O
;	O
TMP_MARK	O
;	O
chars_per_limb	int
=	O
mp_bases	O
[	O
base	int
]	O
.	O
chars_per_limb	int
;	O
un	long
=	O
str_len	long
/	O
chars_per_limb	int
+	O
1	int
;	O
powtab_mem	pointer
=	O
TMP_BALLOC_LIMBS	O
(	O
mpn_dc_set_str_powtab_alloc	O
(	O
un	long
)	O
)	O
;	O
mpn_set_str_compute_powtab	O
(	O
powtab	array
,	O
powtab_mem	pointer
,	O
un	long
,	O
base	int
)	O
;	O
tp	pointer
=	O
TMP_BALLOC_LIMBS	O
(	O
mpn_dc_set_str_itch	O
(	O
un	long
)	O
)	O
;	O
size	long
=	O
mpn_dc_set_str	O
(	O
rp	pointer
,	O
str	pointer
,	O
str_len	long
,	O
powtab	array
,	O
tp	pointer
)	O
;	O
TMP_FREE	O
;	O
return	O
size	long
;	O
}	O
}	O
void	O
mpn_set_str_compute_powtab	O
(	O
powers_t	struct
*	O
powtab	array
,	O
mp_ptr	pointer
powtab_mem	pointer
,	O
mp_size_t	long
un	long
,	O
int	O
base	int
)	O
{	O
mp_ptr	pointer
powtab_mem_ptr	pointer
;	O
long	O
i	long
,	O
pi	long
;	O
mp_size_t	long
n	long
;	O
mp_ptr	pointer
p	pointer
,	O
t	pointer
;	O
mp_limb_t	long
big_base	long
;	O
int	O
chars_per_limb	int
;	O
size_t	long
digits_in_base	long
;	O
mp_size_t	long
shift	long
;	O
powtab_mem_ptr	pointer
=	O
powtab_mem	pointer
;	O
chars_per_limb	int
=	O
mp_bases	O
[	O
base	int
]	O
.	O
chars_per_limb	int
;	O
big_base	long
=	O
mp_bases	O
[	O
base	int
]	O
.	O
big_base	long
;	O
p	pointer
=	O
powtab_mem_ptr	pointer
;	O
powtab_mem_ptr	pointer
+=	O
1	int
;	O
digits_in_base	long
=	O
chars_per_limb	int
;	O
p	pointer
[	O
0	int
]	O
=	O
big_base	long
;	O
n	long
=	O
1	int
;	O
count_leading_zeros	O
(	O
i	long
,	O
un	long
-	O
1	int
)	O
;	O
i	long
=	O
GMP_LIMB_BITS	int
-	O
1	int
-	O
i	long
;	O
powtab	array
[	O
i	long
]	O
.	O
p	pointer
=	O
p	pointer
;	O
powtab	array
[	O
i	long
]	O
.	O
n	long
=	O
n	long
;	O
powtab	array
[	O
i	long
]	O
.	O
digits_in_base	long
=	O
digits_in_base	long
;	O
powtab	array
[	O
i	long
]	O
.	O
base	int
=	O
base	int
;	O
powtab	array
[	O
i	long
]	O
.	O
shift	long
=	O
0	int
;	O
shift	long
=	O
0	int
;	O
for	O
(	O
pi	long
=	O
i	long
-	O
1	int
;	O
pi	long
>=	O
0	int
;	O
pi	long
--	O
)	O
{	O
t	pointer
=	O
powtab_mem_ptr	pointer
;	O
powtab_mem_ptr	pointer
+=	O
2	int
*	O
n	long
;	O
ASSERT_ALWAYS	O
(	O
powtab_mem_ptr	pointer
<	O
powtab_mem	pointer
+	O
mpn_dc_set_str_powtab_alloc	O
(	O
un	long
)	O
)	O
;	O
mpn_sqr	O
(	O
t	pointer
,	O
p	pointer
,	O
n	long
)	O
;	O
n	long
=	O
2	int
*	O
n	long
-	O
1	int
;	O
n	long
+=	O
t	pointer
[	O
n	long
]	O
!=	O
0	int
;	O
digits_in_base	long
*=	O
2	int
;	O
if	O
(	O
(	O
(	O
(	O
un	long
-	O
1	int
)	O
>>	O
pi	long
)	O
&	O
2	int
)	O
==	O
0	int
)	O
{	O
mpn_divexact_1	O
(	O
t	pointer
,	O
t	pointer
,	O
n	long
,	O
big_base	long
)	O
;	O
n	long
-=	O
t	pointer
[	O
n	long
-	O
1	int
]	O
==	O
0	int
;	O
digits_in_base	long
-=	O
chars_per_limb	int
;	O
}	O
shift	long
*=	O
2	int
;	O
while	O
(	O
t	pointer
[	O
0	int
]	O
==	O
0	int
&&	O
(	O
t	pointer
[	O
1	int
]	O
&	O
(	O
(	O
big_base	long
&	O
-	O
big_base	long
)	O
-	O
1	int
)	O
)	O
==	O
0	int
)	O
{	O
t	pointer
++	O
;	O
n	long
--	O
;	O
shift	long
++	O
;	O
}	O
p	pointer
=	O
t	pointer
;	O
powtab	array
[	O
pi	long
]	O
.	O
p	pointer
=	O
p	pointer
;	O
powtab	array
[	O
pi	long
]	O
.	O
n	long
=	O
n	long
;	O
powtab	array
[	O
pi	long
]	O
.	O
digits_in_base	long
=	O
digits_in_base	long
;	O
powtab	array
[	O
pi	long
]	O
.	O
base	int
=	O
base	int
;	O
powtab	array
[	O
pi	long
]	O
.	O
shift	long
=	O
shift	long
;	O
}	O
}	O
mp_size_t	long
mpn_dc_set_str	O
(	O
mp_ptr	pointer
rp	pointer
,	O
const	O
unsigned	O
char	O
*	O
str	pointer
,	O
size_t	long
str_len	long
,	O
const	O
powers_t	struct
*	O
powtab	array
,	O
mp_ptr	pointer
tp	pointer
)	O
{	O
size_t	long
len_lo	long
,	O
len_hi	long
;	O
mp_limb_t	long
cy	long
;	O
mp_size_t	long
ln	long
,	O
hn	long
,	O
n	long
,	O
sn	long
;	O
len_lo	long
=	O
powtab	array
->	O
digits_in_base	long
;	O
if	O
(	O
str_len	long
<=	O
len_lo	long
)	O
{	O
if	O
(	O
BELOW_THRESHOLD	O
(	O
str_len	long
,	O
SET_STR_DC_THRESHOLD	int
)	O
)	O
return	O
mpn_bc_set_str	O
(	O
rp	pointer
,	O
str	pointer
,	O
str_len	long
,	O
powtab	array
->	O
base	int
)	O
;	O
else	O
return	O
mpn_dc_set_str	O
(	O
rp	pointer
,	O
str	pointer
,	O
str_len	long
,	O
powtab	array
+	O
1	int
,	O
tp	pointer
)	O
;	O
}	O
len_hi	long
=	O
str_len	long
-	O
len_lo	long
;	O
ASSERT	O
(	O
len_lo	long
>=	O
len_hi	long
)	O
;	O
if	O
(	O
BELOW_THRESHOLD	O
(	O
len_hi	long
,	O
SET_STR_DC_THRESHOLD	int
)	O
)	O
hn	long
=	O
mpn_bc_set_str	O
(	O
tp	pointer
,	O
str	pointer
,	O
len_hi	long
,	O
powtab	array
->	O
base	int
)	O
;	O
else	O
hn	long
=	O
mpn_dc_set_str	O
(	O
tp	pointer
,	O
str	pointer
,	O
len_hi	long
,	O
powtab	array
+	O
1	int
,	O
rp	pointer
)	O
;	O
sn	long
=	O
powtab	array
->	O
shift	long
;	O
if	O
(	O
hn	long
==	O
0	int
)	O
{	O
MPN_ZERO	O
(	O
rp	pointer
,	O
powtab	array
->	O
n	long
+	O
sn	long
+	O
1	int
)	O
;	O
}	O
else	O
{	O
if	O
(	O
powtab	array
->	O
n	long
>	O
hn	long
)	O
mpn_mul	O
(	O
rp	pointer
+	O
sn	long
,	O
powtab	array
->	O
p	pointer
,	O
powtab	array
->	O
n	long
,	O
tp	pointer
,	O
hn	long
)	O
;	O
else	O
mpn_mul	O
(	O
rp	pointer
+	O
sn	long
,	O
tp	pointer
,	O
hn	long
,	O
powtab	array
->	O
p	pointer
,	O
powtab	array
->	O
n	long
)	O
;	O
MPN_ZERO	O
(	O
rp	pointer
,	O
sn	long
)	O
;	O
}	O
str	pointer
=	O
str	pointer
+	O
str_len	long
-	O
len_lo	long
;	O
if	O
(	O
BELOW_THRESHOLD	O
(	O
len_lo	long
,	O
SET_STR_DC_THRESHOLD	int
)	O
)	O
ln	long
=	O
mpn_bc_set_str	O
(	O
tp	pointer
,	O
str	pointer
,	O
len_lo	long
,	O
powtab	array
->	O
base	int
)	O
;	O
else	O
ln	long
=	O
mpn_dc_set_str	O
(	O
tp	pointer
,	O
str	pointer
,	O
len_lo	long
,	O
powtab	array
+	O
1	int
,	O
tp	pointer
+	O
powtab	array
->	O
n	long
+	O
sn	long
+	O
1	int
)	O
;	O
if	O
(	O
ln	long
!=	O
0	int
)	O
{	O
cy	long
=	O
mpn_add_n	O
(	O
rp	pointer
,	O
rp	pointer
,	O
tp	pointer
,	O
ln	long
)	O
;	O
mpn_incr_u	O
(	O
rp	pointer
+	O
ln	long
,	O
cy	long
)	O
;	O
}	O
n	long
=	O
hn	long
+	O
powtab	array
->	O
n	long
+	O
sn	long
;	O
return	O
n	long
-	O
(	O
rp	pointer
[	O
n	long
-	O
1	int
]	O
==	O
0	int
)	O
;	O
}	O
mp_size_t	long
mpn_bc_set_str	O
(	O
mp_ptr	pointer
rp	pointer
,	O
const	O
unsigned	O
char	O
*	O
str	pointer
,	O
size_t	long
str_len	long
,	O
int	O
base	int
)	O
{	O
mp_size_t	long
size	long
;	O
size_t	long
i	long
;	O
long	O
j	long
;	O
mp_limb_t	long
cy_limb	long
;	O
mp_limb_t	long
big_base	long
;	O
int	O
chars_per_limb	int
;	O
mp_limb_t	long
res_digit	long
;	O
ASSERT	O
(	O
base	int
>=	O
2	int
)	O
;	O
ASSERT	O
(	O
base	int
<	O
numberof	O
(	O
mp_bases	O
)	O
)	O
;	O
ASSERT	O
(	O
str_len	long
>=	O
1	int
)	O
;	O
big_base	long
=	O
mp_bases	O
[	O
base	int
]	O
.	O
big_base	long
;	O
chars_per_limb	int
=	O
mp_bases	O
[	O
base	int
]	O
.	O
chars_per_limb	int
;	O
size	long
=	O
0	int
;	O
for	O
(	O
i	long
=	O
chars_per_limb	int
;	O
i	long
<	O
str_len	long
;	O
i	long
+=	O
chars_per_limb	int
)	O
{	O
res_digit	long
=	O
*	O
str	pointer
++	O
;	O
if	O
(	O
base	int
==	O
10	int
)	O
{	O
for	O
(	O
j	long
=	O
MP_BASES_CHARS_PER_LIMB_10	int
-	O
1	int
;	O
j	long
!=	O
0	int
;	O
j	long
--	O
)	O
res_digit	long
=	O
res_digit	long
*	O
10	int
+	O
*	O
str	pointer
++	O
;	O
}	O
else	O
{	O
for	O
(	O
j	long
=	O
chars_per_limb	int
-	O
1	int
;	O
j	long
!=	O
0	int
;	O
j	long
--	O
)	O
res_digit	long
=	O
res_digit	long
*	O
base	int
+	O
*	O
str	pointer
++	O
;	O
}	O
if	O
(	O
size	long
==	O
0	int
)	O
{	O
if	O
(	O
res_digit	long
!=	O
0	int
)	O
{	O
rp	pointer
[	O
0	int
]	O
=	O
res_digit	long
;	O
size	long
=	O
1	int
;	O
}	O
}	O
else	O
{	O
cy_limb	long
=	O
mpn_mul_1c	O
(	O
rp	pointer
,	O
rp	pointer
,	O
size	long
,	O
big_base	long
,	O
res_digit	long
)	O
;	O
if	O
(	O
cy_limb	long
!=	O
0	int
)	O
rp	pointer
[	O
size	long
++	O
]	O
=	O
cy_limb	long
;	O
}	O
}	O
big_base	long
=	O
base	int
;	O
res_digit	long
=	O
*	O
str	pointer
++	O
;	O
if	O
(	O
base	int
==	O
10	int
)	O
{	O
for	O
(	O
j	long
=	O
str_len	long
-	O
(	O
i	long
-	O
MP_BASES_CHARS_PER_LIMB_10	int
)	O
-	O
1	int
;	O
j	long
>	O
0	int
;	O
j	long
--	O
)	O
{	O
res_digit	long
=	O
res_digit	long
*	O
10	int
+	O
*	O
str	pointer
++	O
;	O
big_base	long
*=	O
10	int
;	O
}	O
}	O
else	O
{	O
for	O
(	O
j	long
=	O
str_len	long
-	O
(	O
i	long
-	O
chars_per_limb	int
)	O
-	O
1	int
;	O
j	long
>	O
0	int
;	O
j	long
--	O
)	O
{	O
res_digit	long
=	O
res_digit	long
*	O
base	int
+	O
*	O
str	pointer
++	O
;	O
big_base	long
*=	O
base	int
;	O
}	O
}	O
if	O
(	O
size	long
==	O
0	int
)	O
{	O
if	O
(	O
res_digit	long
!=	O
0	int
)	O
{	O
rp	pointer
[	O
0	int
]	O
=	O
res_digit	long
;	O
size	long
=	O
1	int
;	O
}	O
}	O
else	O
{	O
cy_limb	long
=	O
mpn_mul_1c	O
(	O
rp	pointer
,	O
rp	pointer
,	O
size	long
,	O
big_base	long
,	O
res_digit	long
)	O
;	O
if	O
(	O
cy_limb	long
!=	O
0	int
)	O
rp	pointer
[	O
size	long
++	O
]	O
=	O
cy_limb	long
;	O
}	O
return	O
size	long
;	O
}	O
