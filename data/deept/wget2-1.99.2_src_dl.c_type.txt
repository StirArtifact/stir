static	O
void	O
dl_error_set_noalloc	function
(	O
dl_error_t	struct
*	O
e	pointer
,	O
const	O
char	O
*	O
msg	pointer
)	O
{	O
if	O
(	O
msg	pointer
&&	O
e	pointer
->	O
msg	pointer
)	O
wget_error_printf	function
(	O
_	O
(	O
"Piling up error '%s' over error '%s'"	pointer
)	O
,	O
msg	pointer
,	O
e	pointer
->	O
msg	pointer
)	O
;	O
wget_free	pointer
(	O
(	O
void	O
*	O
)	O
e	pointer
->	O
msg	pointer
)	O
;	O
e	pointer
->	O
msg	pointer
=	O
msg	pointer
;	O
}	O
void	O
dl_error_set	function
(	O
dl_error_t	struct
*	O
e	pointer
,	O
const	O
char	O
*	O
msg	pointer
)	O
{	O
dl_error_set_noalloc	function
(	O
e	pointer
,	O
wget_strdup	function
(	O
msg	pointer
)	O
)	O
;	O
}	O
void	O
dl_error_set_printf	function
(	O
dl_error_t	struct
*	O
e	pointer
,	O
const	O
char	O
*	O
format	pointer
,	O
...	O
)	O
{	O
va_list	array
arglist	array
;	O
va_start	O
(	O
arglist	array
,	O
format	pointer
)	O
;	O
dl_error_set_noalloc	function
(	O
e	pointer
,	O
wget_vaprintf	function
(	O
format	pointer
,	O
arglist	array
)	O
)	O
;	O
va_end	O
(	O
arglist	array
)	O
;	O
}	O
static	O
char	O
*	O
convert_to_path_if_not	function
(	O
const	O
char	O
*	O
str	pointer
)	O
{	O
if	O
(	O
str	pointer
&&	O
!	O
strchr	function
(	O
str	pointer
,	O
'/'	O
)	O
)	O
return	O
wget_aprintf	function
(	O
"./%s"	pointer
,	O
str	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
int	O
dl_supported	function
(	O
void	O
)	O
{	O
return	O
1	int
;	O
}	O
struct	O
dl_file_st	struct
{	O
void	O
*	O
handle	pointer
;	O
}	O
;	O
dl_file_t	struct
*	O
dl_file_open	function
(	O
const	O
char	O
*	O
filename	pointer
,	O
dl_error_t	struct
*	O
e	pointer
)	O
{	O
dl_file_t	struct
*	O
dm	pointer
=	O
NULL	O
;	O
dl_file_t	struct
dm_st	struct
;	O
char	O
*	O
buf	pointer
=	O
convert_to_path_if_not	function
(	O
filename	pointer
)	O
;	O
dm_st	struct
.	O
handle	pointer
=	O
dlopen	function
(	O
buf	pointer
?	O
buf	pointer
:	O
filename	pointer
,	O
RTLD_LAZY	int
|	O
RTLD_LOCAL	int
)	O
;	O
wget_xfree	O
(	O
buf	pointer
)	O
;	O
if	O
(	O
dm_st	struct
.	O
handle	pointer
)	O
dm	pointer
=	O
wget_memdup	function
(	O
&	O
dm_st	struct
,	O
sizeof	O
(	O
dl_file_t	struct
)	O
)	O
;	O
else	O
dl_error_set	function
(	O
e	pointer
,	O
dlerror	function
(	O
)	O
)	O
;	O
return	O
dm	pointer
;	O
}	O
void	O
*	O
dl_file_lookup	function
(	O
dl_file_t	struct
*	O
dm	pointer
,	O
const	O
char	O
*	O
symbol	pointer
,	O
dl_error_t	struct
*	O
e	pointer
)	O
{	O
void	O
*	O
res	pointer
;	O
char	O
*	O
error	bool
;	O
res	pointer
=	O
dlsym	function
(	O
dm	pointer
->	O
handle	pointer
,	O
symbol	pointer
)	O
;	O
error	bool
=	O
dlerror	function
(	O
)	O
;	O
if	O
(	O
error	bool
)	O
{	O
dl_error_set	function
(	O
e	pointer
,	O
error	bool
)	O
;	O
return	O
NULL	O
;	O
}	O
return	O
res	pointer
;	O
}	O
void	O
dl_file_close	function
(	O
dl_file_t	struct
*	O
dm	pointer
)	O
{	O
dlclose	function
(	O
dm	pointer
->	O
handle	pointer
)	O
;	O
wget_free	pointer
(	O
dm	pointer
)	O
;	O
}	O
typedef	O
struct	O
{	O
const	O
char	O
*	O
prefix	pointer
;	O
const	O
char	O
*	O
suffix	pointer
;	O
}	O
object_pattern_t	struct
;	O
static	O
const	O
object_pattern_t	struct
dl_patterns	array
[	O
]	O
=	O
{	O
PATTERNS	O
,	O
{	O
NULL	O
,	O
NULL	O
}	O
}	O
;	O
static	O
int	O
dl_match	function
(	O
const	O
char	O
*	O
path	pointer
,	O
size_t	long
*	O
start_out	pointer
,	O
size_t	long
*	O
len_out	pointer
)	O
{	O
size_t	long
i	long
,	O
mark	long
;	O
size_t	long
start	int
,	O
len	long
;	O
mark	long
=	O
0	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
path	pointer
[	O
i	long
]	O
;	O
i	long
++	O
)	O
{	O
if	O
(	O
path	pointer
[	O
i	long
]	O
==	O
'/'	O
)	O
mark	long
=	O
i	long
+	O
1	int
;	O
}	O
start	int
=	O
mark	long
;	O
len	long
=	O
i	long
-	O
start	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
dl_patterns	array
[	O
i	long
]	O
.	O
prefix	pointer
;	O
i	long
++	O
)	O
{	O
const	O
char	O
*	O
p	pointer
=	O
dl_patterns	array
[	O
i	long
]	O
.	O
prefix	pointer
;	O
const	O
char	O
*	O
s	pointer
=	O
dl_patterns	array
[	O
i	long
]	O
.	O
suffix	pointer
;	O
size_t	long
pl	long
=	O
strlen	function
(	O
p	pointer
)	O
;	O
size_t	long
sl	long
=	O
strlen	function
(	O
s	pointer
)	O
;	O
if	O
(	O
pl	long
+	O
sl	long
>=	O
len	long
)	O
continue	O
;	O
if	O
(	O
memcmp	function
(	O
path	pointer
+	O
start	int
+	O
len	long
-	O
sl	long
,	O
s	pointer
,	O
sl	long
)	O
==	O
0	int
&&	O
memcmp	function
(	O
path	pointer
+	O
start	int
,	O
p	pointer
,	O
pl	long
)	O
==	O
0	int
)	O
{	O
start	int
+=	O
pl	long
;	O
len	long
-=	O
(	O
pl	long
+	O
sl	long
)	O
;	O
break	O
;	O
}	O
}	O
*	O
start_out	pointer
=	O
start	int
;	O
*	O
len_out	pointer
=	O
len	long
;	O
return	O
dl_patterns	array
[	O
i	long
]	O
.	O
prefix	pointer
?	O
1	int
:	O
0	int
;	O
}	O
static	O
int	O
is_regular_file	function
(	O
const	O
char	O
*	O
filename	pointer
)	O
{	O
struct	O
stat	struct
statbuf	struct
;	O
if	O
(	O
stat	struct
(	O
filename	pointer
,	O
&	O
statbuf	struct
)	O
<	O
0	int
)	O
return	O
0	int
;	O
if	O
(	O
S_ISREG	O
(	O
statbuf	struct
.	O
st_mode	int
)	O
)	O
return	O
1	int
;	O
return	O
0	int
;	O
}	O
char	O
*	O
dl_get_name_from_path	function
(	O
const	O
char	O
*	O
path	pointer
,	O
int	O
strict	int
)	O
{	O
size_t	long
start	int
,	O
len	long
;	O
int	O
match	int
=	O
dl_match	function
(	O
path	pointer
,	O
&	O
start	int
,	O
&	O
len	long
)	O
;	O
if	O
(	O
!	O
match	int
&&	O
strict	int
)	O
return	O
NULL	O
;	O
else	O
return	O
wget_strmemdup	function
(	O
path	pointer
+	O
start	int
,	O
len	long
)	O
;	O
}	O
char	O
*	O
dl_search	function
(	O
const	O
char	O
*	O
name	pointer
,	O
const	O
wget_vector	struct
*	O
dirs	pointer
)	O
{	O
int	O
n_dirs	int
=	O
wget_vector_size	function
(	O
dirs	pointer
)	O
;	O
for	O
(	O
int	O
i	long
=	O
0	int
;	O
i	long
<	O
n_dirs	int
;	O
i	long
++	O
)	O
{	O
const	O
char	O
*	O
dir	array
=	O
wget_vector_get	function
(	O
dirs	pointer
,	O
i	long
)	O
;	O
if	O
(	O
dir	array
&&	O
*	O
dir	array
)	O
{	O
for	O
(	O
int	O
j	int
=	O
0	int
;	O
dl_patterns	array
[	O
j	int
]	O
.	O
prefix	pointer
;	O
j	int
++	O
)	O
{	O
char	O
*	O
filename	pointer
=	O
wget_aprintf	function
(	O
"%s/%s%s%s"	pointer
,	O
dir	array
,	O
dl_patterns	array
[	O
j	int
]	O
.	O
prefix	pointer
,	O
name	pointer
,	O
dl_patterns	array
[	O
j	int
]	O
.	O
suffix	pointer
)	O
;	O
if	O
(	O
is_regular_file	function
(	O
filename	pointer
)	O
)	O
return	O
filename	pointer
;	O
wget_free	pointer
(	O
filename	pointer
)	O
;	O
}	O
}	O
else	O
{	O
for	O
(	O
int	O
j	int
=	O
0	int
;	O
dl_patterns	array
[	O
j	int
]	O
.	O
prefix	pointer
;	O
j	int
++	O
)	O
{	O
char	O
*	O
filename	pointer
=	O
wget_aprintf	function
(	O
"%s%s%s"	pointer
,	O
dl_patterns	array
[	O
j	int
]	O
.	O
prefix	pointer
,	O
name	pointer
,	O
dl_patterns	array
[	O
j	int
]	O
.	O
suffix	pointer
)	O
;	O
if	O
(	O
is_regular_file	function
(	O
filename	pointer
)	O
)	O
return	O
filename	pointer
;	O
wget_free	pointer
(	O
filename	pointer
)	O
;	O
}	O
}	O
}	O
return	O
NULL	O
;	O
}	O
void	O
dl_list	function
(	O
const	O
wget_vector	struct
*	O
dirs	pointer
,	O
wget_vector	struct
*	O
names_out	pointer
)	O
{	O
int	O
n_dirs	int
=	O
wget_vector_size	function
(	O
dirs	pointer
)	O
;	O
for	O
(	O
int	O
i	long
=	O
0	int
;	O
i	long
<	O
n_dirs	int
;	O
i	long
++	O
)	O
{	O
DIR	struct
*	O
dirp	pointer
;	O
struct	O
dirent	struct
*	O
ent	pointer
;	O
const	O
char	O
*	O
dir	array
=	O
wget_vector_get	function
(	O
dirs	pointer
,	O
i	long
)	O
;	O
dirp	pointer
=	O
opendir	function
(	O
dir	array
)	O
;	O
if	O
(	O
!	O
dirp	pointer
)	O
continue	O
;	O
while	O
(	O
(	O
ent	pointer
=	O
readdir	function
(	O
dirp	pointer
)	O
)	O
!=	O
NULL	O
)	O
{	O
char	O
*	O
fname	pointer
;	O
char	O
*	O
name	pointer
;	O
fname	pointer
=	O
ent	pointer
->	O
d_name	array
;	O
name	pointer
=	O
dl_get_name_from_path	function
(	O
fname	pointer
,	O
1	int
)	O
;	O
if	O
(	O
!	O
name	pointer
)	O
continue	O
;	O
{	O
char	O
*	O
sfname	pointer
=	O
wget_aprintf	function
(	O
"%s/%s"	pointer
,	O
dir	array
,	O
fname	pointer
)	O
;	O
int	O
x	int
=	O
is_regular_file	function
(	O
sfname	pointer
)	O
;	O
wget_free	pointer
(	O
sfname	pointer
)	O
;	O
if	O
(	O
!	O
x	int
)	O
{	O
wget_free	pointer
(	O
name	pointer
)	O
;	O
continue	O
;	O
}	O
}	O
wget_vector_add	function
(	O
names_out	pointer
,	O
name	pointer
)	O
;	O
}	O
closedir	function
(	O
dirp	pointer
)	O
;	O
}	O
}	O
