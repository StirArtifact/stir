static	O
int	O
_authenticate_null	function
(	O
mu_authority_t	pointer
auth	pointer
MU_ARG_UNUSED	O
)	O
{	O
return	O
0	int
;	O
}	O
int	O
mu_authority_create_null	function
(	O
mu_authority_t	pointer
*	O
pauthority	pointer
,	O
void	O
*	O
owner	pointer
)	O
{	O
int	O
rc	int
=	O
mu_authority_create	function
(	O
pauthority	pointer
,	O
NULL	O
,	O
owner	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
mu_authority_set_authenticate	function
(	O
*	O
pauthority	pointer
,	O
_authenticate_null	function
,	O
owner	pointer
)	O
;	O
return	O
0	int
;	O
}	O
int	O
mu_authority_create	function
(	O
mu_authority_t	pointer
*	O
pauthority	pointer
,	O
mu_ticket_t	pointer
ticket	pointer
,	O
void	O
*	O
owner	pointer
)	O
{	O
mu_authority_t	pointer
authority	pointer
;	O
if	O
(	O
pauthority	pointer
==	O
NULL	O
)	O
return	O
MU_ERR_OUT_PTR_NULL	O
;	O
authority	pointer
=	O
calloc	function
(	O
1	int
,	O
sizeof	O
(	O
*	O
authority	pointer
)	O
)	O
;	O
if	O
(	O
authority	pointer
==	O
NULL	O
)	O
return	O
ENOMEM	int
;	O
authority	pointer
->	O
ticket	pointer
=	O
ticket	pointer
;	O
authority	pointer
->	O
owner	pointer
=	O
owner	pointer
;	O
*	O
pauthority	pointer
=	O
authority	pointer
;	O
return	O
0	int
;	O
}	O
void	O
mu_authority_destroy	function
(	O
mu_authority_t	pointer
*	O
pauthority	pointer
,	O
void	O
*	O
owner	pointer
)	O
{	O
if	O
(	O
pauthority	pointer
&&	O
*	O
pauthority	pointer
)	O
{	O
mu_authority_t	pointer
authority	pointer
=	O
*	O
pauthority	pointer
;	O
if	O
(	O
authority	pointer
->	O
owner	pointer
==	O
owner	pointer
)	O
{	O
mu_ticket_destroy	function
(	O
&	O
authority	pointer
->	O
ticket	pointer
)	O
;	O
mu_list_destroy	function
(	O
&	O
authority	pointer
->	O
auth_methods	pointer
)	O
;	O
free	function
(	O
authority	pointer
)	O
;	O
}	O
*	O
pauthority	pointer
=	O
NULL	O
;	O
}	O
}	O
void	O
*	O
mu_authority_get_owner	function
(	O
mu_authority_t	pointer
authority	pointer
)	O
{	O
return	O
(	O
authority	pointer
)	O
?	O
authority	pointer
->	O
owner	pointer
:	O
NULL	O
;	O
}	O
int	O
mu_authority_set_ticket	function
(	O
mu_authority_t	pointer
authority	pointer
,	O
mu_ticket_t	pointer
ticket	pointer
)	O
{	O
if	O
(	O
authority	pointer
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
if	O
(	O
authority	pointer
->	O
ticket	pointer
)	O
mu_ticket_destroy	function
(	O
&	O
authority	pointer
->	O
ticket	pointer
)	O
;	O
authority	pointer
->	O
ticket	pointer
=	O
ticket	pointer
;	O
return	O
0	int
;	O
}	O
int	O
mu_authority_get_ticket	function
(	O
mu_authority_t	pointer
authority	pointer
,	O
mu_ticket_t	pointer
*	O
pticket	pointer
)	O
{	O
if	O
(	O
authority	pointer
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
if	O
(	O
pticket	pointer
==	O
NULL	O
)	O
return	O
MU_ERR_OUT_PTR_NULL	O
;	O
if	O
(	O
authority	pointer
->	O
ticket	pointer
==	O
NULL	O
)	O
{	O
int	O
status	int
=	O
mu_ticket_create	function
(	O
&	O
(	O
authority	pointer
->	O
ticket	pointer
)	O
,	O
authority	pointer
)	O
;	O
if	O
(	O
status	int
!=	O
0	int
)	O
return	O
status	int
;	O
}	O
*	O
pticket	pointer
=	O
authority	pointer
->	O
ticket	pointer
;	O
return	O
0	int
;	O
}	O
struct	O
auth_cb	struct
{	O
int	O
status	int
;	O
mu_authority_t	pointer
authority	pointer
;	O
}	O
;	O
static	O
int	O
try_auth	function
(	O
void	O
*	O
item	pointer
,	O
void	O
*	O
data	pointer
)	O
{	O
int	O
(	O
*	O
authenticate	pointer
)	O
(	O
mu_authority_t	pointer
)	O
=	O
item	pointer
;	O
struct	O
auth_cb	struct
*	O
cb	pointer
=	O
data	pointer
;	O
if	O
(	O
authenticate	pointer
(	O
cb	pointer
->	O
authority	pointer
)	O
==	O
0	int
)	O
{	O
cb	pointer
->	O
status	int
=	O
0	int
;	O
return	O
MU_ERR_USER0	O
;	O
}	O
return	O
0	int
;	O
}	O
int	O
mu_authority_authenticate	function
(	O
mu_authority_t	pointer
authority	pointer
)	O
{	O
if	O
(	O
authority	pointer
&&	O
authority	pointer
->	O
auth_methods	pointer
)	O
{	O
struct	O
auth_cb	struct
cb	pointer
;	O
cb	pointer
.	O
status	int
=	O
MU_ERR_AUTH_FAILURE	O
;	O
cb	pointer
.	O
authority	pointer
=	O
authority	pointer
;	O
mu_list_foreach	function
(	O
authority	pointer
->	O
auth_methods	pointer
,	O
try_auth	function
,	O
&	O
cb	pointer
)	O
;	O
return	O
cb	pointer
.	O
status	int
;	O
}	O
return	O
EINVAL	int
;	O
}	O
int	O
mu_authority_set_authenticate	function
(	O
mu_authority_t	pointer
authority	pointer
,	O
int	O
(	O
*	O
_authenticate	pointer
)	O
(	O
mu_authority_t	pointer
)	O
,	O
void	O
*	O
owner	pointer
)	O
{	O
if	O
(	O
authority	pointer
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
if	O
(	O
authority	pointer
->	O
owner	pointer
!=	O
owner	pointer
)	O
return	O
EACCES	int
;	O
if	O
(	O
!	O
authority	pointer
->	O
auth_methods	pointer
)	O
{	O
int	O
rc	int
=	O
mu_list_create	function
(	O
&	O
authority	pointer
->	O
auth_methods	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
}	O
mu_list_append	function
(	O
authority	pointer
->	O
auth_methods	pointer
,	O
_authenticate	pointer
)	O
;	O
return	O
0	int
;	O
}	O
