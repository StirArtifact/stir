LFD	function
(	O
Lvalues	int
)	O
(	O
void	O
)	O
{	O
if	O
(	O
vs_base	O
==	O
vs_top	O
)	O
vs_base	O
[	O
0	int
]	O
=	O
Cnil	O
;	O
}	O
LFD	function
(	O
Lvalues_list	int
)	O
(	O
void	O
)	O
{	O
object	O
list	O
;	O
check_arg	function
(	O
1	int
)	O
;	O
list	O
=	O
vs_base	O
[	O
0	int
]	O
;	O
vs_top	O
=	O
vs_base	O
;	O
while	O
(	O
!	O
endp_prop	function
(	O
list	O
)	O
)	O
{	O
vs_push	function
(	O
MMcar	function
(	O
list	O
)	O
)	O
;	O
list	O
=	O
MMcdr	function
(	O
list	O
)	O
;	O
}	O
if	O
(	O
vs_top	O
==	O
vs_base	O
)	O
vs_base	O
[	O
0	int
]	O
=	O
Cnil	O
;	O
}	O
static	O
void	O
FFN	function
(	O
Fmultiple_value_list	int
)	O
(	O
object	O
form	int
)	O
{	O
object	O
*	O
top	O
=	O
vs_top	O
;	O
if	O
(	O
endp	function
(	O
form	int
)	O
)	O
FEtoo_few_argumentsF	function
(	O
form	int
)	O
;	O
if	O
(	O
!	O
endp	function
(	O
MMcdr	function
(	O
form	int
)	O
)	O
)	O
FEtoo_many_argumentsF	function
(	O
form	int
)	O
;	O
vs_push	function
(	O
Cnil	O
)	O
;	O
eval	function
(	O
MMcar	function
(	O
form	int
)	O
)	O
;	O
while	O
(	O
vs_base	O
<	O
vs_top	O
)	O
{	O
top	O
[	O
0	int
]	O
=	O
MMcons	function
(	O
vs_top	O
[	O
-	O
1	int
]	O
,	O
top	O
[	O
0	int
]	O
)	O
;	O
vs_top	O
--	O
;	O
}	O
vs_base	O
=	O
top	O
;	O
vs_top	O
=	O
top	O
+	O
1	int
;	O
}	O
static	O
void	O
FFN	function
(	O
Fmultiple_value_call	int
)	O
(	O
object	O
form	int
)	O
{	O
object	O
*	O
top	O
=	O
vs_top	O
;	O
object	O
*	O
top1	O
;	O
object	O
*	O
top2	O
;	O
if	O
(	O
endp	function
(	O
form	int
)	O
)	O
FEtoo_few_argumentsF	function
(	O
form	int
)	O
;	O
eval	function
(	O
MMcar	function
(	O
form	int
)	O
)	O
;	O
vs_top	O
=	O
top	O
;	O
vs_push	function
(	O
vs_base	O
[	O
0	int
]	O
)	O
;	O
form	int
=	O
MMcdr	function
(	O
form	int
)	O
;	O
while	O
(	O
!	O
endp	function
(	O
form	int
)	O
)	O
{	O
top1	O
=	O
vs_top	O
;	O
eval	function
(	O
MMcar	function
(	O
form	int
)	O
)	O
;	O
top2	O
=	O
vs_top	O
;	O
vs_top	O
=	O
top1	O
;	O
while	O
(	O
vs_base	O
<	O
top2	O
)	O
{	O
vs_push	function
(	O
vs_base	O
[	O
0	int
]	O
)	O
;	O
vs_base	O
++	O
;	O
}	O
form	int
=	O
MMcdr	function
(	O
form	int
)	O
;	O
}	O
vs_base	O
=	O
top	O
+	O
1	int
;	O
super_funcall	function
(	O
top	O
[	O
0	int
]	O
)	O
;	O
}	O
static	O
void	O
FFN	function
(	O
Fmultiple_value_prog1	int
)	O
(	O
object	O
forms	int
)	O
{	O
object	O
*	O
top	O
;	O
object	O
*	O
base	O
=	O
vs_top	O
;	O
if	O
(	O
endp	function
(	O
forms	int
)	O
)	O
FEtoo_few_argumentsF	function
(	O
forms	int
)	O
;	O
eval	function
(	O
MMcar	function
(	O
forms	int
)	O
)	O
;	O
top	O
=	O
vs_top	O
;	O
vs_top	O
=	O
base	O
;	O
while	O
(	O
vs_base	O
<	O
top	O
)	O
{	O
vs_push	function
(	O
vs_base	O
[	O
0	int
]	O
)	O
;	O
vs_base	O
++	O
;	O
}	O
top	O
=	O
vs_top	O
;	O
forms	int
=	O
MMcdr	function
(	O
forms	int
)	O
;	O
while	O
(	O
!	O
endp	function
(	O
forms	int
)	O
)	O
{	O
eval	function
(	O
MMcar	function
(	O
forms	int
)	O
)	O
;	O
vs_top	O
=	O
top	O
;	O
forms	int
=	O
MMcdr	function
(	O
forms	int
)	O
;	O
}	O
vs_base	O
=	O
base	O
;	O
vs_top	O
=	O
top	O
;	O
if	O
(	O
vs_base	O
==	O
vs_top	O
)	O
vs_base	O
[	O
0	int
]	O
=	O
Cnil	O
;	O
}	O
void	O
gcl_init_multival	function
(	O
void	O
)	O
{	O
make_constant	function
(	O
"MULTIPLE-VALUES-LIMIT"	pointer
,	O
make_fixnum	function
(	O
32	int
)	O
)	O
;	O
make_function	function
(	O
"VALUES"	pointer
,	O
Lvalues	int
)	O
;	O
make_function	function
(	O
"VALUES-LIST"	pointer
,	O
Lvalues_list	int
)	O
;	O
make_special_form	function
(	O
"MULTIPLE-VALUE-CALL"	pointer
,	O
Fmultiple_value_call	int
)	O
;	O
make_special_form	function
(	O
"MULTIPLE-VALUE-PROG1"	pointer
,	O
Fmultiple_value_prog1	int
)	O
;	O
make_special_form	function
(	O
"MULTIPLE-VALUE-LIST"	pointer
,	O
Fmultiple_value_list	int
)	O
;	O
}	O
