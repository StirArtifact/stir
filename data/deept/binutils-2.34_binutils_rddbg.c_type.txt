static	O
bfd_boolean	int
read_section_stabs_debugging_info	function
(	O
bfd	struct
*	O
,	O
asymbol	struct
*	O
*	O
,	O
long	O
,	O
void	O
*	O
,	O
bfd_boolean	int
*	O
)	O
;	O
static	O
bfd_boolean	int
read_symbol_stabs_debugging_info	function
(	O
bfd	struct
*	O
,	O
asymbol	struct
*	O
*	O
,	O
long	O
,	O
void	O
*	O
,	O
bfd_boolean	int
*	O
)	O
;	O
static	O
void	O
save_stab	function
(	O
int	O
,	O
int	O
,	O
bfd_vma	long
,	O
const	O
char	O
*	O
)	O
;	O
static	O
void	O
stab_context	function
(	O
void	O
)	O
;	O
static	O
void	O
free_saved_stabs	function
(	O
void	O
)	O
;	O
void	O
*	O
read_debugging_info	function
(	O
bfd	struct
*	O
abfd	pointer
,	O
asymbol	struct
*	O
*	O
syms	pointer
,	O
long	O
symcount	int
,	O
bfd_boolean	int
no_messages	int
)	O
{	O
void	O
*	O
dhandle	pointer
;	O
bfd_boolean	int
found	int
;	O
dhandle	pointer
=	O
debug_init	function
(	O
)	O
;	O
if	O
(	O
dhandle	pointer
==	O
NULL	O
)	O
return	O
NULL	O
;	O
if	O
(	O
!	O
read_section_stabs_debugging_info	function
(	O
abfd	pointer
,	O
syms	pointer
,	O
symcount	int
,	O
dhandle	pointer
,	O
&	O
found	int
)	O
)	O
return	O
NULL	O
;	O
if	O
(	O
bfd_get_flavour	function
(	O
abfd	pointer
)	O
==	O
bfd_target_aout_flavour	int
)	O
{	O
if	O
(	O
!	O
read_symbol_stabs_debugging_info	function
(	O
abfd	pointer
,	O
syms	pointer
,	O
symcount	int
,	O
dhandle	pointer
,	O
&	O
found	int
)	O
)	O
return	O
NULL	O
;	O
}	O
if	O
(	O
!	O
found	int
&&	O
bfd_get_flavour	function
(	O
abfd	pointer
)	O
==	O
bfd_target_coff_flavour	int
&&	O
symcount	int
>	O
0	int
)	O
{	O
if	O
(	O
!	O
parse_coff	function
(	O
abfd	pointer
,	O
syms	pointer
,	O
symcount	int
,	O
dhandle	pointer
)	O
)	O
return	O
NULL	O
;	O
found	int
=	O
TRUE	int
;	O
}	O
if	O
(	O
!	O
found	int
)	O
{	O
if	O
(	O
!	O
no_messages	int
)	O
non_fatal	function
(	O
_	O
(	O
"%s: no recognized debugging information"	pointer
)	O
,	O
bfd_get_filename	function
(	O
abfd	pointer
)	O
)	O
;	O
return	O
NULL	O
;	O
}	O
return	O
dhandle	pointer
;	O
}	O
static	O
bfd_boolean	int
read_section_stabs_debugging_info	function
(	O
bfd	struct
*	O
abfd	pointer
,	O
asymbol	struct
*	O
*	O
syms	pointer
,	O
long	O
symcount	int
,	O
void	O
*	O
dhandle	pointer
,	O
bfd_boolean	int
*	O
pfound	pointer
)	O
{	O
static	O
struct	O
{	O
const	O
char	O
*	O
secname	pointer
;	O
const	O
char	O
*	O
strsecname	pointer
;	O
}	O
names	array
[	O
]	O
=	O
{	O
{	O
".stab"	pointer
,	O
".stabstr"	pointer
}	O
,	O
{	O
"LC_SYMTAB.stabs"	pointer
,	O
"LC_SYMTAB.stabstr"	pointer
}	O
,	O
{	O
"$GDB_SYMBOLS$"	pointer
,	O
"$GDB_STRINGS$"	pointer
}	O
}	O
;	O
unsigned	O
int	O
i	pointer
;	O
void	O
*	O
shandle	pointer
;	O
*	O
pfound	pointer
=	O
FALSE	int
;	O
shandle	pointer
=	O
NULL	O
;	O
for	O
(	O
i	pointer
=	O
0	int
;	O
i	pointer
<	O
sizeof	O
names	array
/	O
sizeof	O
names	array
[	O
0	int
]	O
;	O
i	pointer
++	O
)	O
{	O
asection	struct
*	O
sec	pointer
,	O
*	O
strsec	pointer
;	O
sec	pointer
=	O
bfd_get_section_by_name	function
(	O
abfd	pointer
,	O
names	array
[	O
i	pointer
]	O
.	O
secname	pointer
)	O
;	O
strsec	pointer
=	O
bfd_get_section_by_name	function
(	O
abfd	pointer
,	O
names	array
[	O
i	pointer
]	O
.	O
strsecname	pointer
)	O
;	O
if	O
(	O
sec	pointer
!=	O
NULL	O
&&	O
strsec	pointer
!=	O
NULL	O
)	O
{	O
bfd_size_type	long
stabsize	long
,	O
strsize	long
;	O
bfd_byte	char
*	O
stabs	pointer
,	O
*	O
strings	pointer
;	O
bfd_byte	char
*	O
stab	pointer
;	O
bfd_size_type	long
stroff	long
,	O
next_stroff	long
;	O
stabsize	long
=	O
bfd_section_size	function
(	O
sec	pointer
)	O
;	O
stabs	pointer
=	O
(	O
bfd_byte	char
*	O
)	O
xmalloc	function
(	O
stabsize	long
)	O
;	O
if	O
(	O
!	O
bfd_get_section_contents	function
(	O
abfd	pointer
,	O
sec	pointer
,	O
stabs	pointer
,	O
0	int
,	O
stabsize	long
)	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: %s: %s\n"	pointer
,	O
bfd_get_filename	function
(	O
abfd	pointer
)	O
,	O
names	array
[	O
i	pointer
]	O
.	O
secname	pointer
,	O
bfd_errmsg	function
(	O
bfd_get_error	function
(	O
)	O
)	O
)	O
;	O
free	function
(	O
shandle	pointer
)	O
;	O
free	function
(	O
stabs	pointer
)	O
;	O
return	O
FALSE	int
;	O
}	O
strsize	long
=	O
bfd_section_size	function
(	O
strsec	pointer
)	O
;	O
strings	pointer
=	O
(	O
bfd_byte	char
*	O
)	O
xmalloc	function
(	O
strsize	long
+	O
1	int
)	O
;	O
if	O
(	O
!	O
bfd_get_section_contents	function
(	O
abfd	pointer
,	O
strsec	pointer
,	O
strings	pointer
,	O
0	int
,	O
strsize	long
)	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: %s: %s\n"	pointer
,	O
bfd_get_filename	function
(	O
abfd	pointer
)	O
,	O
names	array
[	O
i	pointer
]	O
.	O
strsecname	pointer
,	O
bfd_errmsg	function
(	O
bfd_get_error	function
(	O
)	O
)	O
)	O
;	O
free	function
(	O
shandle	pointer
)	O
;	O
free	function
(	O
strings	pointer
)	O
;	O
free	function
(	O
stabs	pointer
)	O
;	O
return	O
FALSE	int
;	O
}	O
strings	pointer
[	O
strsize	long
]	O
=	O
0	int
;	O
if	O
(	O
shandle	pointer
==	O
NULL	O
)	O
{	O
shandle	pointer
=	O
start_stab	function
(	O
dhandle	pointer
,	O
abfd	pointer
,	O
TRUE	int
,	O
syms	pointer
,	O
symcount	int
)	O
;	O
if	O
(	O
shandle	pointer
==	O
NULL	O
)	O
{	O
free	function
(	O
strings	pointer
)	O
;	O
free	function
(	O
stabs	pointer
)	O
;	O
return	O
FALSE	int
;	O
}	O
}	O
*	O
pfound	pointer
=	O
TRUE	int
;	O
stroff	long
=	O
0	int
;	O
next_stroff	long
=	O
0	int
;	O
for	O
(	O
stab	pointer
=	O
stabs	pointer
;	O
stab	pointer
<=	O
(	O
stabs	pointer
+	O
stabsize	long
)	O
-	O
12	int
;	O
stab	pointer
+=	O
12	int
)	O
{	O
unsigned	O
int	O
strx	int
;	O
int	O
type	enum
;	O
int	O
other	int
ATTRIBUTE_UNUSED	O
;	O
int	O
desc	int
;	O
bfd_vma	long
value	long
;	O
strx	int
=	O
bfd_get_32	O
(	O
abfd	pointer
,	O
stab	pointer
)	O
;	O
type	enum
=	O
bfd_get_8	O
(	O
abfd	pointer
,	O
stab	pointer
+	O
4	int
)	O
;	O
other	int
=	O
bfd_get_8	O
(	O
abfd	pointer
,	O
stab	pointer
+	O
5	int
)	O
;	O
desc	int
=	O
bfd_get_16	O
(	O
abfd	pointer
,	O
stab	pointer
+	O
6	int
)	O
;	O
value	long
=	O
bfd_get_32	O
(	O
abfd	pointer
,	O
stab	pointer
+	O
8	int
)	O
;	O
if	O
(	O
type	enum
==	O
0	int
)	O
{	O
stroff	long
=	O
next_stroff	long
;	O
next_stroff	long
+=	O
value	long
;	O
}	O
else	O
{	O
size_t	long
len	long
;	O
char	O
*	O
f	pointer
,	O
*	O
s	pointer
;	O
if	O
(	O
stroff	long
+	O
strx	int
>=	O
strsize	long
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\n"	pointer
)	O
,	O
bfd_get_filename	function
(	O
abfd	pointer
)	O
,	O
names	array
[	O
i	pointer
]	O
.	O
secname	pointer
,	O
(	O
long	O
)	O
(	O
stab	pointer
-	O
stabs	pointer
)	O
/	O
12	int
,	O
strx	int
,	O
type	enum
)	O
;	O
continue	O
;	O
}	O
s	pointer
=	O
(	O
char	O
*	O
)	O
strings	pointer
+	O
stroff	long
+	O
strx	int
;	O
f	pointer
=	O
NULL	O
;	O
while	O
(	O
(	O
len	long
=	O
strlen	function
(	O
s	pointer
)	O
)	O
>	O
0	int
&&	O
s	pointer
[	O
len	long
-	O
1	int
]	O
==	O
'\\'	O
&&	O
stab	pointer
+	O
12	int
<	O
stabs	pointer
+	O
stabsize	long
)	O
{	O
char	O
*	O
p	pointer
;	O
stab	pointer
+=	O
12	int
;	O
p	pointer
=	O
s	pointer
+	O
len	long
-	O
1	int
;	O
*	O
p	pointer
=	O
'\0'	O
;	O
strx	int
=	O
stroff	long
+	O
bfd_get_32	O
(	O
abfd	pointer
,	O
stab	pointer
)	O
;	O
if	O
(	O
strx	int
>=	O
strsize	long
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"%s: %s: stab entry %ld is corrupt\n"	pointer
)	O
,	O
bfd_get_filename	function
(	O
abfd	pointer
)	O
,	O
names	array
[	O
i	pointer
]	O
.	O
secname	pointer
,	O
(	O
long	O
)	O
(	O
stab	pointer
-	O
stabs	pointer
)	O
/	O
12	int
)	O
;	O
break	O
;	O
}	O
s	pointer
=	O
concat	function
(	O
s	pointer
,	O
(	O
char	O
*	O
)	O
strings	pointer
+	O
strx	int
,	O
(	O
const	O
char	O
*	O
)	O
NULL	O
)	O
;	O
*	O
p	pointer
=	O
'\\'	O
;	O
free	function
(	O
f	pointer
)	O
;	O
f	pointer
=	O
s	pointer
;	O
}	O
save_stab	function
(	O
type	enum
,	O
desc	int
,	O
value	long
,	O
s	pointer
)	O
;	O
if	O
(	O
!	O
parse_stab	function
(	O
dhandle	pointer
,	O
shandle	pointer
,	O
type	enum
,	O
desc	int
,	O
value	long
,	O
s	pointer
)	O
)	O
{	O
stab_context	function
(	O
)	O
;	O
free_saved_stabs	function
(	O
)	O
;	O
free	function
(	O
f	pointer
)	O
;	O
free	function
(	O
shandle	pointer
)	O
;	O
free	function
(	O
stabs	pointer
)	O
;	O
free	function
(	O
strings	pointer
)	O
;	O
return	O
FALSE	int
;	O
}	O
}	O
}	O
free_saved_stabs	function
(	O
)	O
;	O
free	function
(	O
stabs	pointer
)	O
;	O
}	O
}	O
if	O
(	O
shandle	pointer
!=	O
NULL	O
)	O
{	O
if	O
(	O
!	O
finish_stab	function
(	O
dhandle	pointer
,	O
shandle	pointer
)	O
)	O
return	O
FALSE	int
;	O
}	O
return	O
TRUE	int
;	O
}	O
static	O
bfd_boolean	int
read_symbol_stabs_debugging_info	function
(	O
bfd	struct
*	O
abfd	pointer
,	O
asymbol	struct
*	O
*	O
syms	pointer
,	O
long	O
symcount	int
,	O
void	O
*	O
dhandle	pointer
,	O
bfd_boolean	int
*	O
pfound	pointer
)	O
{	O
void	O
*	O
shandle	pointer
;	O
asymbol	struct
*	O
*	O
ps	pointer
,	O
*	O
*	O
symend	pointer
;	O
shandle	pointer
=	O
NULL	O
;	O
symend	pointer
=	O
syms	pointer
+	O
symcount	int
;	O
for	O
(	O
ps	pointer
=	O
syms	pointer
;	O
ps	pointer
<	O
symend	pointer
;	O
ps	pointer
++	O
)	O
{	O
symbol_info	struct
i	pointer
;	O
bfd_get_symbol_info	O
(	O
abfd	pointer
,	O
*	O
ps	pointer
,	O
&	O
i	pointer
)	O
;	O
if	O
(	O
i	pointer
.	O
type	enum
==	O
'-'	O
)	O
{	O
const	O
char	O
*	O
s	pointer
;	O
char	O
*	O
f	pointer
;	O
if	O
(	O
shandle	pointer
==	O
NULL	O
)	O
{	O
shandle	pointer
=	O
start_stab	function
(	O
dhandle	pointer
,	O
abfd	pointer
,	O
FALSE	int
,	O
syms	pointer
,	O
symcount	int
)	O
;	O
if	O
(	O
shandle	pointer
==	O
NULL	O
)	O
return	O
FALSE	int
;	O
}	O
*	O
pfound	pointer
=	O
TRUE	int
;	O
s	pointer
=	O
i	pointer
.	O
name	pointer
;	O
if	O
(	O
s	pointer
==	O
NULL	O
||	O
strlen	function
(	O
s	pointer
)	O
<	O
1	int
)	O
return	O
FALSE	int
;	O
f	pointer
=	O
NULL	O
;	O
while	O
(	O
strlen	function
(	O
s	pointer
)	O
>	O
0	int
&&	O
s	pointer
[	O
strlen	function
(	O
s	pointer
)	O
-	O
1	int
]	O
==	O
'\\'	O
&&	O
ps	pointer
+	O
1	int
<	O
symend	pointer
)	O
{	O
char	O
*	O
sc	pointer
,	O
*	O
n	pointer
;	O
++	O
ps	pointer
;	O
sc	pointer
=	O
xstrdup	function
(	O
s	pointer
)	O
;	O
sc	pointer
[	O
strlen	function
(	O
sc	pointer
)	O
-	O
1	int
]	O
=	O
'\0'	O
;	O
n	pointer
=	O
concat	function
(	O
sc	pointer
,	O
bfd_asymbol_name	function
(	O
*	O
ps	pointer
)	O
,	O
(	O
const	O
char	O
*	O
)	O
NULL	O
)	O
;	O
free	function
(	O
sc	pointer
)	O
;	O
if	O
(	O
f	pointer
!=	O
NULL	O
)	O
free	function
(	O
f	pointer
)	O
;	O
f	pointer
=	O
n	pointer
;	O
s	pointer
=	O
n	pointer
;	O
}	O
save_stab	function
(	O
i	pointer
.	O
stab_type	char
,	O
i	pointer
.	O
stab_desc	short
,	O
i	pointer
.	O
value	long
,	O
s	pointer
)	O
;	O
if	O
(	O
!	O
parse_stab	function
(	O
dhandle	pointer
,	O
shandle	pointer
,	O
i	pointer
.	O
stab_type	char
,	O
i	pointer
.	O
stab_desc	short
,	O
i	pointer
.	O
value	long
,	O
s	pointer
)	O
)	O
{	O
stab_context	function
(	O
)	O
;	O
free_saved_stabs	function
(	O
)	O
;	O
return	O
FALSE	int
;	O
}	O
}	O
}	O
free_saved_stabs	function
(	O
)	O
;	O
if	O
(	O
shandle	pointer
!=	O
NULL	O
)	O
{	O
if	O
(	O
!	O
finish_stab	function
(	O
dhandle	pointer
,	O
shandle	pointer
)	O
)	O
return	O
FALSE	int
;	O
}	O
return	O
TRUE	int
;	O
}	O
struct	O
saved_stab	struct
{	O
int	O
type	enum
;	O
int	O
desc	int
;	O
bfd_vma	long
value	long
;	O
char	O
*	O
string	pointer
;	O
}	O
;	O
static	O
struct	O
saved_stab	struct
saved_stabs	array
[	O
SAVE_STABS_COUNT	O
]	O
;	O
static	O
int	O
saved_stabs_index	int
;	O
static	O
void	O
save_stab	function
(	O
int	O
type	enum
,	O
int	O
desc	int
,	O
bfd_vma	long
value	long
,	O
const	O
char	O
*	O
string	pointer
)	O
{	O
if	O
(	O
saved_stabs	array
[	O
saved_stabs_index	int
]	O
.	O
string	pointer
!=	O
NULL	O
)	O
free	function
(	O
saved_stabs	array
[	O
saved_stabs_index	int
]	O
.	O
string	pointer
)	O
;	O
saved_stabs	array
[	O
saved_stabs_index	int
]	O
.	O
type	enum
=	O
type	enum
;	O
saved_stabs	array
[	O
saved_stabs_index	int
]	O
.	O
desc	int
=	O
desc	int
;	O
saved_stabs	array
[	O
saved_stabs_index	int
]	O
.	O
value	long
=	O
value	long
;	O
saved_stabs	array
[	O
saved_stabs_index	int
]	O
.	O
string	pointer
=	O
xstrdup	function
(	O
string	pointer
)	O
;	O
saved_stabs_index	int
=	O
(	O
saved_stabs_index	int
+	O
1	int
)	O
%	O
SAVE_STABS_COUNT	O
;	O
}	O
static	O
void	O
stab_context	function
(	O
void	O
)	O
{	O
int	O
i	pointer
;	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"Last stabs entries before error:\n"	pointer
)	O
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"n_type n_desc n_value  string\n"	pointer
)	O
;	O
i	pointer
=	O
saved_stabs_index	int
;	O
do	O
{	O
struct	O
saved_stab	struct
*	O
stabp	pointer
;	O
stabp	pointer
=	O
saved_stabs	array
+	O
i	pointer
;	O
if	O
(	O
stabp	pointer
->	O
string	pointer
!=	O
NULL	O
)	O
{	O
const	O
char	O
*	O
s	pointer
;	O
s	pointer
=	O
bfd_get_stab_name	function
(	O
stabp	pointer
->	O
type	enum
)	O
;	O
if	O
(	O
s	pointer
!=	O
NULL	O
)	O
fprintf	function
(	O
stderr	pointer
,	O
"%-6s"	pointer
,	O
s	pointer
)	O
;	O
else	O
if	O
(	O
stabp	pointer
->	O
type	enum
==	O
0	int
)	O
fprintf	function
(	O
stderr	pointer
,	O
"HdrSym"	pointer
)	O
;	O
else	O
fprintf	function
(	O
stderr	pointer
,	O
"%-6d"	pointer
,	O
stabp	pointer
->	O
type	enum
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
" %-6d "	pointer
,	O
stabp	pointer
->	O
desc	int
)	O
;	O
fprintf_vma	O
(	O
stderr	pointer
,	O
stabp	pointer
->	O
value	long
)	O
;	O
if	O
(	O
stabp	pointer
->	O
type	enum
!=	O
0	int
)	O
fprintf	function
(	O
stderr	pointer
,	O
" %s"	pointer
,	O
stabp	pointer
->	O
string	pointer
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"\n"	pointer
)	O
;	O
}	O
i	pointer
=	O
(	O
i	pointer
+	O
1	int
)	O
%	O
SAVE_STABS_COUNT	O
;	O
}	O
while	O
(	O
i	pointer
!=	O
saved_stabs_index	int
)	O
;	O
}	O
static	O
void	O
free_saved_stabs	function
(	O
void	O
)	O
{	O
int	O
i	pointer
;	O
for	O
(	O
i	pointer
=	O
0	int
;	O
i	pointer
<	O
SAVE_STABS_COUNT	O
;	O
i	pointer
++	O
)	O
{	O
if	O
(	O
saved_stabs	array
[	O
i	pointer
]	O
.	O
string	pointer
!=	O
NULL	O
)	O
{	O
free	function
(	O
saved_stabs	array
[	O
i	pointer
]	O
.	O
string	pointer
)	O
;	O
saved_stabs	array
[	O
i	pointer
]	O
.	O
string	pointer
=	O
NULL	O
;	O
}	O
}	O
saved_stabs_index	int
=	O
0	int
;	O
}	O
