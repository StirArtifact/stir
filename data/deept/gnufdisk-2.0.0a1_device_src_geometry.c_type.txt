struct	O
gnufdisk_geometry	struct
{	O
gnufdisk_integer	long long
start	long long
;	O
gnufdisk_integer	long long
end	long long
;	O
}	O
;	O
static	O
void	O
check_geometry	function
(	O
struct	O
gnufdisk_geometry	struct
*	O
*	O
_g	pointer
)	O
{	O
GNUFDISK_RETRY	O
rp0	array
;	O
union	O
gnufdisk_device_exception_data	union
data	union
;	O
GNUFDISK_RETRY_SET	O
(	O
rp0	array
)	O
;	O
if	O
(	O
gnufdisk_check_memory	function
(	O
*	O
_g	pointer
,	O
sizeof	O
(	O
struct	O
gnufdisk_geometry	struct
)	O
,	O
0	int
)	O
!=	O
0	int
)	O
{	O
data	union
.	O
egeometrypointer	pointer
=	O
_g	pointer
;	O
GNUFDISK_THROW	O
(	O
GNUFDISK_EXCEPTION_ALL	int
,	O
&	O
rp0	array
,	O
GNUFDISK_DEVICE_EGEOMETRYPOINTER	int
,	O
&	O
data	union
,	O
"invalid struct gnufdisk_geometry* %p"	pointer
,	O
*	O
_g	pointer
)	O
;	O
}	O
}	O
static	O
void	O
free_pointer	function
(	O
void	O
*	O
_p	pointer
)	O
{	O
GNUFDISK_LOG	O
(	O
(	O
GEOMETRY	O
,	O
"free ponter %p"	pointer
,	O
_p	pointer
)	O
)	O
;	O
free	function
(	O
_p	pointer
)	O
;	O
}	O
struct	O
gnufdisk_geometry	struct
*	O
gnufdisk_geometry_new	function
(	O
gnufdisk_integer	long long
_start	long long
,	O
gnufdisk_integer	long long
_length	long long
)	O
{	O
struct	O
gnufdisk_geometry	struct
*	O
g	pointer
;	O
GNUFDISK_RETRY	O
rp0	array
;	O
GNUFDISK_RETRY_SET	O
(	O
rp0	array
)	O
;	O
if	O
(	O
(	O
g	pointer
=	O
malloc	function
(	O
sizeof	O
(	O
struct	O
gnufdisk_geometry	struct
)	O
)	O
)	O
==	O
NULL	O
)	O
GNUFDISK_THROW	O
(	O
0	int
,	O
NULL	O
,	O
GNUFDISK_DEVICE_ENOMEM	int
,	O
NULL	O
,	O
"cannot allocate memory"	pointer
)	O
;	O
if	O
(	O
gnufdisk_exception_register_unwind_handler	function
(	O
&	O
free_pointer	function
,	O
g	pointer
)	O
!=	O
0	int
)	O
GNUFDISK_WARNING	O
(	O
"gnufdisk_exception_register_unwind_handler failed. Missing GNUFDISK_TRY?"	pointer
)	O
;	O
memset	function
(	O
g	pointer
,	O
0	int
,	O
sizeof	O
(	O
struct	O
gnufdisk_geometry	struct
)	O
)	O
;	O
g	pointer
->	O
start	long long
=	O
_start	long long
;	O
g	pointer
->	O
end	long long
=	O
_start	long long
+	O
_length	long long
;	O
if	O
(	O
gnufdisk_exception_unregister_unwind_handler	function
(	O
&	O
free_pointer	function
,	O
g	pointer
)	O
!=	O
0	int
)	O
GNUFDISK_WARNING	O
(	O
"gnufdisk_exception_unregister_unwind_handler failed. Missing GNUFDISK_TRY?"	pointer
)	O
;	O
return	O
g	pointer
;	O
}	O
struct	O
gnufdisk_geometry	struct
*	O
gnufdisk_geometry_duplicate	function
(	O
struct	O
gnufdisk_geometry	struct
*	O
_g	pointer
)	O
{	O
struct	O
gnufdisk_geometry	struct
*	O
ret	pointer
;	O
check_geometry	function
(	O
&	O
_g	pointer
)	O
;	O
ret	pointer
=	O
gnufdisk_geometry_new	function
(	O
0	int
,	O
0	int
)	O
;	O
ret	pointer
->	O
start	long long
=	O
_g	pointer
->	O
start	long long
;	O
ret	pointer
->	O
end	long long
=	O
_g	pointer
->	O
end	long long
;	O
return	O
ret	pointer
;	O
}	O
struct	O
gnufdisk_geometry	struct
*	O
gnufdisk_geometry_set	function
(	O
struct	O
gnufdisk_geometry	struct
*	O
_g	pointer
,	O
gnufdisk_integer	long long
_s	pointer
,	O
gnufdisk_integer	long long
_l	struct
)	O
{	O
GNUFDISK_RETRY	O
rp0	array
;	O
check_geometry	function
(	O
&	O
_g	pointer
)	O
;	O
GNUFDISK_RETRY_SET	O
(	O
rp0	array
)	O
;	O
if	O
(	O
_l	struct
<=	O
0	int
)	O
{	O
union	O
gnufdisk_device_exception_data	union
data	union
;	O
data	union
.	O
egeometrylength	pointer
=	O
&	O
_l	struct
;	O
GNUFDISK_THROW	O
(	O
GNUFDISK_EXCEPTION_ALL	int
,	O
&	O
rp0	array
,	O
GNUFDISK_DEVICE_EGEOMETRYLENGTH	int
,	O
&	O
data	union
,	O
"invalid length: %lld"	pointer
,	O
_l	struct
)	O
;	O
}	O
_g	pointer
->	O
start	long long
=	O
_s	pointer
;	O
_g	pointer
->	O
end	long long
=	O
_s	pointer
+	O
_l	struct
;	O
return	O
_g	pointer
;	O
}	O
gnufdisk_integer	long long
gnufdisk_geometry_start	function
(	O
struct	O
gnufdisk_geometry	struct
*	O
_g	pointer
)	O
{	O
check_geometry	function
(	O
&	O
_g	pointer
)	O
;	O
return	O
_g	pointer
->	O
start	long long
;	O
}	O
gnufdisk_integer	long long
gnufdisk_geometry_end	function
(	O
struct	O
gnufdisk_geometry	struct
*	O
_g	pointer
)	O
{	O
check_geometry	function
(	O
&	O
_g	pointer
)	O
;	O
return	O
_g	pointer
->	O
end	long long
;	O
}	O
gnufdisk_integer	long long
gnufdisk_geometry_length	function
(	O
struct	O
gnufdisk_geometry	struct
*	O
_g	pointer
)	O
{	O
check_geometry	function
(	O
&	O
_g	pointer
)	O
;	O
return	O
(	O
_g	pointer
->	O
end	long long
-	O
_g	pointer
->	O
start	long long
)	O
+	O
1	int
;	O
}	O
void	O
gnufdisk_geometry_delete	function
(	O
struct	O
gnufdisk_geometry	struct
*	O
_g	pointer
)	O
{	O
check_geometry	function
(	O
&	O
_g	pointer
)	O
;	O
memset	function
(	O
_g	pointer
,	O
0	int
,	O
sizeof	O
(	O
struct	O
gnufdisk_geometry	struct
)	O
)	O
;	O
free	function
(	O
_g	pointer
)	O
;	O
}	O
