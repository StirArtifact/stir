char	O
*	O
print_selection	pointer
;	O
static	O
boolean	enum
check_selection	function
(	O
long	O
page_no	long
,	O
char	O
*	O
filename	pointer
)	O
;	O
static	O
boolean	enum
no_prompt_to_print	enum
;	O
void	O
setup_print_prompter	function
(	O
void	O
)	O
{	O
string_option	function
(	O
"A"	pointer
,	O
"print-pages"	pointer
,	O
NULL	O
,	O
&	O
print_selection	pointer
,	O
NULL	O
,	O
NULL	O
,	O
OPT_PRINT	int
,	O
"specify list of pages to be printed"	pointer
)	O
;	O
boolean_option	function
(	O
"a"	pointer
,	O
"no-prompt"	pointer
,	O
"prompt"	pointer
,	O
TRUE	int
,	O
&	O
no_prompt_to_print	enum
,	O
NULL	O
,	O
NULL	O
,	O
OPT_PRINT	int
,	O
"don't prompt for each page, whether it should be printed or not"	pointer
,	O
"prompt for each page, whether it should be printed or not"	pointer
)	O
;	O
}	O
boolean	enum
print_prompt	function
(	O
page_types	enum
type	enum
,	O
long	O
filepage_no	long
,	O
char	O
*	O
filename	pointer
)	O
{	O
char	O
*	O
fn_name	pointer
;	O
char	O
prompt	array
[	O
MAXLINELENGTH	int
]	O
;	O
char	O
response	array
[	O
INPUT_LINE_LEN	int
]	O
;	O
char	O
*	O
response_ptr	pointer
;	O
boolean	enum
retval	enum
=	O
UNSET	int
;	O
static	O
int	O
yes_count	int
=	O
0	int
;	O
static	O
int	O
no_count	int
=	O
0	int
;	O
static	O
boolean	enum
all_yes	enum
=	O
FALSE	int
,	O
all_no	enum
=	O
FALSE	int
;	O
if	O
(	O
pass	short
==	O
0	int
)	O
return	O
FALSE	int
;	O
if	O
(	O
all_yes	enum
)	O
return	O
TRUE	int
;	O
if	O
(	O
all_no	enum
)	O
return	O
FALSE	int
;	O
if	O
(	O
print_selection	pointer
!=	O
NULL	O
)	O
return	O
check_selection	function
(	O
page_number	long
,	O
filename	pointer
)	O
;	O
if	O
(	O
yes_count	int
!=	O
0	int
)	O
{	O
yes_count	int
--	O
;	O
return	O
TRUE	int
;	O
}	O
if	O
(	O
no_count	int
!=	O
0	int
)	O
{	O
no_count	int
--	O
;	O
return	O
FALSE	int
;	O
}	O
if	O
(	O
no_prompt_to_print	enum
==	O
FALSE	int
)	O
{	O
switch	O
(	O
type	enum
)	O
{	O
case	O
PAGE_BODY	int
:	O
fn_name	pointer
=	O
get_function_name	function
(	O
page_number	long
)	O
;	O
if	O
(	O
*	O
fn_name	pointer
)	O
sprintf	function
(	O
prompt	array
,	O
"Print page %5ld, page %3ld of %s %s(%s%s)?"	pointer
,	O
page_number	long
,	O
filepage_no	long
,	O
filename	pointer
,	O
page_changed	function
(	O
page_number	long
)	O
?	O
"[changed]"	pointer
:	O
""	pointer
,	O
fn_name	pointer
,	O
function_changed	function
(	O
page_number	long
)	O
?	O
"[changed]"	pointer
:	O
""	pointer
)	O
;	O
else	O
sprintf	function
(	O
prompt	array
,	O
"Print page %5ld, page %3ld of %s %s?"	pointer
,	O
page_number	long
,	O
filepage_no	long
,	O
filename	pointer
,	O
page_changed	function
(	O
page_number	long
)	O
?	O
"[changed]"	pointer
:	O
""	pointer
)	O
;	O
break	O
;	O
case	O
PAGE_BLANK	int
:	O
sprintf	function
(	O
prompt	array
,	O
"Print blank page %5ld?"	pointer
,	O
page_number	long
+	O
1	int
)	O
;	O
break	O
;	O
case	O
PAGE_SPECIAL	int
:	O
sprintf	function
(	O
prompt	array
,	O
"Print %s?"	pointer
,	O
filename	pointer
)	O
;	O
break	O
;	O
default	O
:	O
abort	function
(	O
)	O
;	O
}	O
while	O
(	O
retval	enum
==	O
UNSET	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
gettext	function
(	O
"%s [n] ? for help: "	pointer
)	O
,	O
prompt	array
)	O
;	O
fflush	function
(	O
stderr	pointer
)	O
;	O
fgets	function
(	O
response	array
,	O
INPUT_LINE_LEN	int
-	O
1	int
,	O
stdin	pointer
)	O
;	O
response_ptr	pointer
=	O
response	array
;	O
skipspaces	function
(	O
&	O
response_ptr	pointer
)	O
;	O
switch	O
(	O
*	O
response_ptr	pointer
++	O
)	O
{	O
case	O
'y'	O
:	O
case	O
'Y'	O
:	O
yes_count	int
=	O
strtol	function
(	O
response_ptr	pointer
,	O
&	O
response_ptr	pointer
,	O
10	int
)	O
;	O
if	O
(	O
(	O
yes_count	int
==	O
0	int
)	O
&&	O
(	O
*	O
response_ptr	pointer
==	O
'*'	O
)	O
)	O
all_yes	enum
=	O
TRUE	int
;	O
if	O
(	O
yes_count	int
==	O
1	int
)	O
yes_count	int
=	O
0	int
;	O
retval	enum
=	O
TRUE	int
;	O
break	O
;	O
case	O
'n'	O
:	O
case	O
'N'	O
:	O
no_count	int
=	O
strtol	function
(	O
response_ptr	pointer
,	O
&	O
response_ptr	pointer
,	O
10	int
)	O
;	O
if	O
(	O
(	O
no_count	int
==	O
0	int
)	O
&&	O
(	O
*	O
response_ptr	pointer
==	O
'*'	O
)	O
)	O
all_no	enum
=	O
TRUE	int
;	O
if	O
(	O
no_count	int
==	O
1	int
)	O
no_count	int
=	O
0	int
;	O
case	O
'\0'	O
:	O
retval	enum
=	O
FALSE	int
;	O
break	O
;	O
case	O
'p'	O
:	O
case	O
'P'	O
:	O
print_selection	pointer
=	O
strdup	function
(	O
response_ptr	pointer
)	O
;	O
retval	enum
=	O
check_selection	function
(	O
page_number	long
,	O
filename	pointer
)	O
;	O
break	O
;	O
case	O
'?'	O
:	O
default	O
:	O
fprintf	function
(	O
stderr	pointer
,	O
"---------------------------------------------\n"	pointer
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
gettext	function
(	O
"y       print this page\n"	pointer
)	O
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
gettext	function
(	O
"y<n>    print <n> pages\n"	pointer
)	O
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
gettext	function
(	O
"y*      print all remaining pages\n"	pointer
)	O
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
gettext	function
(	O
"n       skip this page\n"	pointer
)	O
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
gettext	function
(	O
"n<n>    skip <n> pages\n"	pointer
)	O
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
gettext	function
(	O
"n*      skip all remaining pages\n"	pointer
)	O
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
gettext	function
(	O
"p<list> print all remaining pages that match <list>\n"	pointer
)	O
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
gettext	function
(	O
"?       show this message\n\n"	pointer
)	O
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
gettext	function
(	O
"format for <list>:\n"	pointer
)	O
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
gettext	function
(	O
"    comma-separated list of specifiers:\n"	pointer
)	O
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
gettext	function
(	O
"    <n>             print page <n>\n"	pointer
)	O
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
gettext	function
(	O
"    <n>-<o>         print all pages from page <n> to <o>\n"	pointer
)	O
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
gettext	function
(	O
"    <function-name> print all pages for function\n"	pointer
)	O
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
gettext	function
(	O
"    f               print function index\n"	pointer
)	O
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
gettext	function
(	O
"    F               print file index\n"	pointer
)	O
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
gettext	function
(	O
"    c               print cross reference info\n"	pointer
)	O
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
gettext	function
(	O
"e.g. p 1-3,main,5,6 will print pages 1,2,3,5,6 and all\n"	pointer
)	O
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
gettext	function
(	O
"                    pages for function main.\n"	pointer
)	O
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"---------------------------------------------\n"	pointer
)	O
;	O
}	O
}	O
return	O
retval	enum
;	O
}	O
return	O
TRUE	int
;	O
}	O
static	O
boolean	enum
check_selection	function
(	O
long	O
page_no	long
,	O
char	O
*	O
filename	pointer
)	O
{	O
char	O
*	O
s_index	pointer
=	O
print_selection	pointer
;	O
long	O
start_page	long
,	O
end_page	long
;	O
size_t	long
name_length	long
;	O
char	O
*	O
fn_name	pointer
=	O
NULL	O
;	O
if	O
(	O
page_no	long
!=	O
0	int
)	O
fn_name	pointer
=	O
get_function_name	function
(	O
page_no	long
)	O
;	O
while	O
(	O
*	O
s_index	pointer
)	O
{	O
start_page	long
=	O
strtol	function
(	O
s_index	pointer
,	O
&	O
s_index	pointer
,	O
10	int
)	O
;	O
skipspaces	function
(	O
&	O
s_index	pointer
)	O
;	O
if	O
(	O
(	O
start_page	long
!=	O
0	int
)	O
&&	O
(	O
*	O
s_index	pointer
==	O
'-'	O
)	O
)	O
{	O
s_index	pointer
++	O
;	O
end_page	long
=	O
strtol	function
(	O
s_index	pointer
,	O
&	O
s_index	pointer
,	O
10	int
)	O
;	O
if	O
(	O
(	O
start_page	long
<=	O
page_no	long
)	O
&&	O
(	O
page_no	long
<=	O
end_page	long
)	O
)	O
return	O
TRUE	int
;	O
skipspaces	function
(	O
&	O
s_index	pointer
)	O
;	O
}	O
if	O
(	O
(	O
start_page	long
!=	O
0	int
)	O
&&	O
(	O
(	O
*	O
s_index	pointer
==	O
','	O
)	O
||	O
(	O
*	O
s_index	pointer
==	O
'\0'	O
)	O
)	O
)	O
{	O
if	O
(	O
start_page	long
==	O
page_no	long
)	O
return	O
TRUE	int
;	O
}	O
if	O
(	O
(	O
start_page	long
==	O
0	int
)	O
&&	O
(	O
*	O
s_index	pointer
!=	O
'\0'	O
)	O
)	O
{	O
name_length	long
=	O
0	int
;	O
while	O
(	O
(	O
s_index	pointer
[	O
name_length	long
]	O
!=	O
','	O
)	O
&&	O
(	O
s_index	pointer
[	O
name_length	long
]	O
!=	O
'\0'	O
)	O
&&	O
!	O
isspace	function
(	O
s_index	pointer
[	O
name_length	long
]	O
)	O
)	O
name_length	long
++	O
;	O
if	O
(	O
name_length	long
==	O
1	int
)	O
{	O
switch	O
(	O
*	O
s_index	pointer
)	O
{	O
case	O
'f'	O
:	O
if	O
(	O
filename	pointer
&&	O
(	O
strcmp	function
(	O
filename	pointer
,	O
"function index"	pointer
)	O
==	O
0	int
)	O
)	O
return	O
TRUE	int
;	O
break	O
;	O
case	O
'F'	O
:	O
if	O
(	O
filename	pointer
&&	O
(	O
strcmp	function
(	O
filename	pointer
,	O
"file index"	pointer
)	O
==	O
0	int
)	O
)	O
return	O
TRUE	int
;	O
break	O
;	O
case	O
'd'	O
:	O
if	O
(	O
page_changed	function
(	O
page_no	long
)	O
)	O
return	O
TRUE	int
;	O
break	O
;	O
case	O
'D'	O
:	O
if	O
(	O
function_changed	function
(	O
page_no	long
)	O
)	O
return	O
TRUE	int
;	O
break	O
;	O
default	O
:	O
fprintf	function
(	O
stderr	pointer
,	O
gettext	function
(	O
CMD_NAME	pointer
": ignoring unrecognized letter %c\n"	pointer
)	O
,	O
*	O
s_index	pointer
)	O
;	O
}	O
}	O
if	O
(	O
fn_name	pointer
&&	O
(	O
strlen	function
(	O
fn_name	pointer
)	O
==	O
name_length	long
)	O
&&	O
(	O
strncmp	function
(	O
get_function_name	function
(	O
page_no	long
)	O
,	O
s_index	pointer
,	O
name_length	long
)	O
==	O
0	int
)	O
)	O
return	O
TRUE	int
;	O
s_index	pointer
+=	O
name_length	long
;	O
}	O
skipspaces	function
(	O
&	O
s_index	pointer
)	O
;	O
if	O
(	O
*	O
s_index	pointer
==	O
','	O
)	O
s_index	pointer
++	O
;	O
skipspaces	function
(	O
&	O
s_index	pointer
)	O
;	O
}	O
return	O
FALSE	int
;	O
}	O
