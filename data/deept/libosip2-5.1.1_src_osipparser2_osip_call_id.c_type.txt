int	O
osip_message_set_call_id	function
(	O
osip_message_t	struct
*	O
sip	pointer
,	O
const	O
char	O
*	O
hvalue	pointer
)	O
{	O
int	O
i	int
;	O
if	O
(	O
hvalue	pointer
==	O
NULL	O
||	O
hvalue	pointer
[	O
0	int
]	O
==	O
'\0'	O
)	O
return	O
OSIP_SUCCESS	int
;	O
if	O
(	O
sip	pointer
->	O
call_id	pointer
!=	O
NULL	O
)	O
return	O
OSIP_SYNTAXERROR	O
;	O
i	int
=	O
osip_call_id_init	function
(	O
&	O
(	O
sip	pointer
->	O
call_id	pointer
)	O
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
return	O
i	int
;	O
sip	pointer
->	O
message_property	int
=	O
2	int
;	O
i	int
=	O
osip_call_id_parse	function
(	O
sip	pointer
->	O
call_id	pointer
,	O
hvalue	pointer
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
osip_call_id_free	function
(	O
sip	pointer
->	O
call_id	pointer
)	O
;	O
sip	pointer
->	O
call_id	pointer
=	O
NULL	O
;	O
return	O
i	int
;	O
}	O
return	O
OSIP_SUCCESS	int
;	O
}	O
osip_call_id_t	struct
*	O
osip_message_get_call_id	function
(	O
const	O
osip_message_t	struct
*	O
sip	pointer
)	O
{	O
return	O
sip	pointer
->	O
call_id	pointer
;	O
}	O
int	O
osip_call_id_init	function
(	O
osip_call_id_t	struct
*	O
*	O
callid	pointer
)	O
{	O
*	O
callid	pointer
=	O
(	O
osip_call_id_t	struct
*	O
)	O
osip_malloc	O
(	O
sizeof	O
(	O
osip_call_id_t	struct
)	O
)	O
;	O
if	O
(	O
*	O
callid	pointer
==	O
NULL	O
)	O
return	O
OSIP_NOMEM	O
;	O
(	O
*	O
callid	pointer
)	O
->	O
number	pointer
=	O
NULL	O
;	O
(	O
*	O
callid	pointer
)	O
->	O
host	pointer
=	O
NULL	O
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
void	O
osip_call_id_free	function
(	O
osip_call_id_t	struct
*	O
callid	pointer
)	O
{	O
if	O
(	O
callid	pointer
==	O
NULL	O
)	O
return	O
;	O
osip_free	O
(	O
callid	pointer
->	O
number	pointer
)	O
;	O
osip_free	O
(	O
callid	pointer
->	O
host	pointer
)	O
;	O
callid	pointer
->	O
number	pointer
=	O
NULL	O
;	O
callid	pointer
->	O
host	pointer
=	O
NULL	O
;	O
osip_free	O
(	O
callid	pointer
)	O
;	O
}	O
int	O
osip_call_id_parse	function
(	O
osip_call_id_t	struct
*	O
callid	pointer
,	O
const	O
char	O
*	O
hvalue	pointer
)	O
{	O
const	O
char	O
*	O
host	pointer
;	O
const	O
char	O
*	O
end	pointer
;	O
callid	pointer
->	O
number	pointer
=	O
NULL	O
;	O
callid	pointer
->	O
host	pointer
=	O
NULL	O
;	O
host	pointer
=	O
strchr	function
(	O
hvalue	pointer
,	O
'@'	O
)	O
;	O
end	pointer
=	O
hvalue	pointer
+	O
strlen	function
(	O
hvalue	pointer
)	O
;	O
if	O
(	O
host	pointer
==	O
NULL	O
)	O
host	pointer
=	O
end	pointer
;	O
else	O
{	O
if	O
(	O
end	pointer
-	O
host	pointer
+	O
1	int
<	O
2	int
)	O
return	O
OSIP_SYNTAXERROR	O
;	O
callid	pointer
->	O
host	pointer
=	O
(	O
char	O
*	O
)	O
osip_malloc	O
(	O
end	pointer
-	O
host	pointer
)	O
;	O
if	O
(	O
callid	pointer
->	O
host	pointer
==	O
NULL	O
)	O
return	O
OSIP_NOMEM	O
;	O
osip_clrncpy	function
(	O
callid	pointer
->	O
host	pointer
,	O
host	pointer
+	O
1	int
,	O
end	pointer
-	O
host	pointer
-	O
1	int
)	O
;	O
}	O
if	O
(	O
host	pointer
-	O
hvalue	pointer
+	O
1	int
<	O
2	int
)	O
return	O
OSIP_SYNTAXERROR	O
;	O
callid	pointer
->	O
number	pointer
=	O
(	O
char	O
*	O
)	O
osip_malloc	O
(	O
host	pointer
-	O
hvalue	pointer
+	O
1	int
)	O
;	O
if	O
(	O
callid	pointer
->	O
number	pointer
==	O
NULL	O
)	O
return	O
OSIP_NOMEM	O
;	O
osip_clrncpy	function
(	O
callid	pointer
->	O
number	pointer
,	O
hvalue	pointer
,	O
host	pointer
-	O
hvalue	pointer
)	O
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
int	O
osip_call_id_to_str	function
(	O
const	O
osip_call_id_t	struct
*	O
callid	pointer
,	O
char	O
*	O
*	O
dest	pointer
)	O
{	O
*	O
dest	pointer
=	O
NULL	O
;	O
if	O
(	O
(	O
callid	pointer
==	O
NULL	O
)	O
||	O
(	O
callid	pointer
->	O
number	pointer
==	O
NULL	O
)	O
)	O
return	O
OSIP_BADPARAMETER	O
;	O
if	O
(	O
callid	pointer
->	O
host	pointer
==	O
NULL	O
)	O
{	O
*	O
dest	pointer
=	O
(	O
char	O
*	O
)	O
osip_malloc	O
(	O
strlen	function
(	O
callid	pointer
->	O
number	pointer
)	O
+	O
1	int
)	O
;	O
if	O
(	O
*	O
dest	pointer
==	O
NULL	O
)	O
return	O
OSIP_NOMEM	O
;	O
sprintf	function
(	O
*	O
dest	pointer
,	O
"%s"	pointer
,	O
callid	pointer
->	O
number	pointer
)	O
;	O
}	O
else	O
{	O
*	O
dest	pointer
=	O
(	O
char	O
*	O
)	O
osip_malloc	O
(	O
strlen	function
(	O
callid	pointer
->	O
number	pointer
)	O
+	O
strlen	function
(	O
callid	pointer
->	O
host	pointer
)	O
+	O
2	int
)	O
;	O
if	O
(	O
*	O
dest	pointer
==	O
NULL	O
)	O
return	O
OSIP_NOMEM	O
;	O
sprintf	function
(	O
*	O
dest	pointer
,	O
"%s@%s"	pointer
,	O
callid	pointer
->	O
number	pointer
,	O
callid	pointer
->	O
host	pointer
)	O
;	O
}	O
return	O
OSIP_SUCCESS	int
;	O
}	O
char	O
*	O
osip_call_id_get_number	function
(	O
osip_call_id_t	struct
*	O
callid	pointer
)	O
{	O
if	O
(	O
callid	pointer
==	O
NULL	O
)	O
return	O
NULL	O
;	O
return	O
callid	pointer
->	O
number	pointer
;	O
}	O
char	O
*	O
osip_call_id_get_host	function
(	O
osip_call_id_t	struct
*	O
callid	pointer
)	O
{	O
if	O
(	O
callid	pointer
==	O
NULL	O
)	O
return	O
NULL	O
;	O
return	O
callid	pointer
->	O
host	pointer
;	O
}	O
void	O
osip_call_id_set_number	function
(	O
osip_call_id_t	struct
*	O
callid	pointer
,	O
char	O
*	O
number	pointer
)	O
{	O
callid	pointer
->	O
number	pointer
=	O
number	pointer
;	O
}	O
void	O
osip_call_id_set_host	function
(	O
osip_call_id_t	struct
*	O
callid	pointer
,	O
char	O
*	O
host	pointer
)	O
{	O
callid	pointer
->	O
host	pointer
=	O
host	pointer
;	O
}	O
int	O
osip_call_id_clone	function
(	O
const	O
osip_call_id_t	struct
*	O
callid	pointer
,	O
osip_call_id_t	struct
*	O
*	O
dest	pointer
)	O
{	O
int	O
i	int
;	O
osip_call_id_t	struct
*	O
ci	pointer
;	O
*	O
dest	pointer
=	O
NULL	O
;	O
if	O
(	O
callid	pointer
==	O
NULL	O
)	O
return	O
OSIP_BADPARAMETER	O
;	O
if	O
(	O
callid	pointer
->	O
number	pointer
==	O
NULL	O
)	O
return	O
OSIP_BADPARAMETER	O
;	O
i	int
=	O
osip_call_id_init	function
(	O
&	O
ci	pointer
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
return	O
i	int
;	O
ci	pointer
->	O
number	pointer
=	O
osip_strdup	function
(	O
callid	pointer
->	O
number	pointer
)	O
;	O
if	O
(	O
callid	pointer
->	O
host	pointer
!=	O
NULL	O
)	O
ci	pointer
->	O
host	pointer
=	O
osip_strdup	function
(	O
callid	pointer
->	O
host	pointer
)	O
;	O
*	O
dest	pointer
=	O
ci	pointer
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
int	O
osip_call_id_match	function
(	O
osip_call_id_t	struct
*	O
callid1	pointer
,	O
osip_call_id_t	struct
*	O
callid2	pointer
)	O
{	O
if	O
(	O
callid1	pointer
==	O
NULL	O
||	O
callid2	pointer
==	O
NULL	O
)	O
return	O
OSIP_BADPARAMETER	O
;	O
if	O
(	O
callid1	pointer
->	O
number	pointer
==	O
NULL	O
||	O
callid2	pointer
->	O
number	pointer
==	O
NULL	O
)	O
return	O
OSIP_BADPARAMETER	O
;	O
if	O
(	O
0	int
!=	O
strcmp	function
(	O
callid1	pointer
->	O
number	pointer
,	O
callid2	pointer
->	O
number	pointer
)	O
)	O
return	O
OSIP_UNDEFINED_ERROR	O
;	O
if	O
(	O
(	O
callid1	pointer
->	O
host	pointer
==	O
NULL	O
)	O
&&	O
(	O
callid2	pointer
->	O
host	pointer
==	O
NULL	O
)	O
)	O
return	O
OSIP_SUCCESS	int
;	O
if	O
(	O
(	O
callid1	pointer
->	O
host	pointer
==	O
NULL	O
)	O
&&	O
(	O
callid2	pointer
->	O
host	pointer
!=	O
NULL	O
)	O
)	O
return	O
OSIP_UNDEFINED_ERROR	O
;	O
if	O
(	O
(	O
callid1	pointer
->	O
host	pointer
!=	O
NULL	O
)	O
&&	O
(	O
callid2	pointer
->	O
host	pointer
==	O
NULL	O
)	O
)	O
return	O
OSIP_UNDEFINED_ERROR	O
;	O
if	O
(	O
0	int
!=	O
strcmp	function
(	O
callid1	pointer
->	O
host	pointer
,	O
callid2	pointer
->	O
host	pointer
)	O
)	O
return	O
OSIP_UNDEFINED_ERROR	O
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
