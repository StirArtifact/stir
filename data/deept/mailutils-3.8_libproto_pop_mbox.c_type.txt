struct	O
_pop3_message	struct
{	O
int	O
flags	int
;	O
mu_off_t	long
offset	long
;	O
mu_off_t	long
body_start	long
;	O
mu_off_t	long
body_end	long
;	O
size_t	long
header_lines	long
;	O
size_t	long
body_lines	long
;	O
int	O
attr_flags	int
;	O
size_t	long
message_size	long
;	O
size_t	long
message_lines	long
;	O
size_t	long
num	long
;	O
char	O
*	O
uidl	array
;	O
mu_message_t	pointer
message	pointer
;	O
struct	O
_pop3_mailbox	struct
*	O
mpd	pointer
;	O
}	O
;	O
struct	O
_pop3_mailbox	struct
{	O
mu_pop3_t	pointer
pop3	pointer
;	O
int	O
pops	int
;	O
int	O
is_updated	int
;	O
size_t	long
msg_count	long
;	O
mu_off_t	long
total_size	long
;	O
struct	O
_pop3_message	struct
*	O
*	O
msg	pointer
;	O
size_t	long
msg_max	long
;	O
mu_mailbox_t	pointer
mbox	pointer
;	O
mu_stream_t	pointer
cache	pointer
;	O
char	O
*	O
user	pointer
;	O
mu_secret_t	pointer
secret	pointer
;	O
}	O
;	O
static	O
int	O
pop_create_pop3_message	function
(	O
struct	O
_pop3_mailbox	struct
*	O
mpd	pointer
,	O
size_t	long
msgno	long
,	O
struct	O
_pop3_message	struct
*	O
*	O
mptr	pointer
)	O
;	O
static	O
int	O
pop_open	function
(	O
mu_mailbox_t	pointer
mbox	pointer
,	O
int	O
flags	int
)	O
{	O
struct	O
_pop3_mailbox	struct
*	O
mpd	pointer
=	O
mbox	pointer
->	O
data	pointer
;	O
int	O
status	int
;	O
mu_stream_t	pointer
stream	pointer
;	O
struct	O
mu_sockaddr	struct
*	O
sa	pointer
;	O
struct	O
mu_sockaddr_hints	struct
hints	pointer
;	O
if	O
(	O
mpd	pointer
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
mbox	pointer
->	O
flags	int
=	O
flags	int
;	O
memset	function
(	O
&	O
hints	pointer
,	O
0	int
,	O
sizeof	O
(	O
hints	pointer
)	O
)	O
;	O
hints	pointer
.	O
flags	int
=	O
MU_AH_DETECT_FAMILY	int
;	O
hints	pointer
.	O
port	int
=	O
mpd	pointer
->	O
pops	int
?	O
MU_POPS_PORT	int
:	O
MU_POP_PORT	int
;	O
hints	pointer
.	O
protocol	int
=	O
IPPROTO_TCP	int
;	O
hints	pointer
.	O
socktype	int
=	O
SOCK_STREAM	int
;	O
status	int
=	O
mu_sockaddr_from_url	function
(	O
&	O
sa	pointer
,	O
mbox	pointer
->	O
url	pointer
,	O
&	O
hints	pointer
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
status	int
=	O
mu_tcp_stream_create_from_sa	function
(	O
&	O
stream	pointer
,	O
sa	pointer
,	O
NULL	O
,	O
mbox	pointer
->	O
flags	int
)	O
;	O
if	O
(	O
status	int
)	O
{	O
mu_sockaddr_free	function
(	O
sa	pointer
)	O
;	O
return	O
status	int
;	O
}	O
mu_stream_set_buffer	function
(	O
stream	pointer
,	O
mu_buffer_line	int
,	O
0	int
)	O
;	O
status	int
=	O
mu_pop3_create	function
(	O
&	O
mpd	pointer
->	O
pop3	pointer
)	O
;	O
if	O
(	O
status	int
)	O
{	O
mu_stream_destroy	function
(	O
&	O
stream	pointer
)	O
;	O
return	O
status	int
;	O
}	O
mu_pop3_set_carrier	function
(	O
mpd	pointer
->	O
pop3	pointer
,	O
stream	pointer
)	O
;	O
if	O
(	O
mu_debug_level_p	function
(	O
MU_DEBCAT_MAILBOX	int
,	O
MU_DEBUG_PROT	int
)	O
)	O
mu_pop3_trace	function
(	O
mpd	pointer
->	O
pop3	pointer
,	O
MU_POP3_TRACE_SET	int
)	O
;	O
if	O
(	O
mu_debug_level_p	function
(	O
MU_DEBCAT_MAILBOX	int
,	O
MU_DEBUG_TRACE6	int
)	O
)	O
mu_pop3_trace_mask	function
(	O
mpd	pointer
->	O
pop3	pointer
,	O
MU_POP3_TRACE_SET	int
,	O
MU_XSCRIPT_SECURE	int
)	O
;	O
if	O
(	O
mu_debug_level_p	function
(	O
MU_DEBCAT_MAILBOX	int
,	O
MU_DEBUG_TRACE7	int
)	O
)	O
mu_pop3_trace_mask	function
(	O
mpd	pointer
->	O
pop3	pointer
,	O
MU_POP3_TRACE_SET	int
,	O
MU_XSCRIPT_PAYLOAD	int
)	O
;	O
do	O
{	O
status	int
=	O
mu_pop3_connect	function
(	O
mpd	pointer
->	O
pop3	pointer
)	O
;	O
if	O
(	O
status	int
)	O
break	O
;	O
status	int
=	O
mu_pop3_capa	function
(	O
mpd	pointer
->	O
pop3	pointer
,	O
1	int
,	O
NULL	O
)	O
;	O
if	O
(	O
status	int
==	O
MU_ERR_REPLY	O
)	O
{	O
mu_debug	O
(	O
MU_DEBCAT_MAILBOX	int
,	O
MU_DEBUG_ERROR	int
,	O
(	O
"server rejected the CAPA command: %s"	pointer
,	O
mu_pop3_strresp	function
(	O
mpd	pointer
->	O
pop3	pointer
)	O
)	O
)	O
;	O
}	O
else	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
status	int
=	O
mu_authority_authenticate	function
(	O
mbox	pointer
->	O
folder	pointer
->	O
authority	pointer
)	O
;	O
}	O
while	O
(	O
0	int
)	O
;	O
if	O
(	O
status	int
)	O
mu_pop3_destroy	function
(	O
&	O
mpd	pointer
->	O
pop3	pointer
)	O
;	O
return	O
status	int
;	O
}	O
static	O
int	O
pop_close	function
(	O
mu_mailbox_t	pointer
mbox	pointer
)	O
{	O
struct	O
_pop3_mailbox	struct
*	O
mpd	pointer
=	O
mbox	pointer
->	O
data	pointer
;	O
int	O
status	int
;	O
status	int
=	O
mu_pop3_quit	function
(	O
mpd	pointer
->	O
pop3	pointer
)	O
;	O
if	O
(	O
status	int
)	O
mu_error	function
(	O
"mu_pop3_quit failed: %s"	pointer
,	O
mu_strerror	function
(	O
status	int
)	O
)	O
;	O
status	int
=	O
mu_pop3_disconnect	function
(	O
mpd	pointer
->	O
pop3	pointer
)	O
;	O
if	O
(	O
status	int
)	O
mu_error	function
(	O
"mu_pop3_disconnect failed: %s"	pointer
,	O
mu_strerror	function
(	O
status	int
)	O
)	O
;	O
if	O
(	O
mpd	pointer
->	O
msg	pointer
)	O
{	O
size_t	long
i	long
;	O
mu_monitor_wrlock	function
(	O
mbox	pointer
->	O
monitor	pointer
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
mpd	pointer
->	O
msg_count	long
;	O
i	long
++	O
)	O
{	O
if	O
(	O
mpd	pointer
->	O
msg	pointer
[	O
i	long
]	O
)	O
{	O
mu_message_destroy	function
(	O
&	O
mpd	pointer
->	O
msg	pointer
[	O
i	long
]	O
->	O
message	pointer
,	O
mpd	pointer
->	O
msg	pointer
[	O
i	long
]	O
)	O
;	O
if	O
(	O
mpd	pointer
->	O
msg	pointer
[	O
i	long
]	O
->	O
uidl	array
)	O
free	function
(	O
mpd	pointer
->	O
msg	pointer
[	O
i	long
]	O
->	O
uidl	array
)	O
;	O
free	function
(	O
mpd	pointer
->	O
msg	pointer
[	O
i	long
]	O
)	O
;	O
}	O
}	O
mu_monitor_unlock	function
(	O
mbox	pointer
->	O
monitor	pointer
)	O
;	O
}	O
mu_stream_destroy	function
(	O
&	O
mpd	pointer
->	O
cache	pointer
)	O
;	O
return	O
0	int
;	O
}	O
static	O
void	O
pop_destroy	function
(	O
mu_mailbox_t	pointer
mbox	pointer
)	O
{	O
struct	O
_pop3_mailbox	struct
*	O
mpd	pointer
=	O
mbox	pointer
->	O
data	pointer
;	O
if	O
(	O
mpd	pointer
)	O
{	O
mu_pop3_destroy	function
(	O
&	O
mpd	pointer
->	O
pop3	pointer
)	O
;	O
if	O
(	O
mpd	pointer
->	O
user	pointer
)	O
free	function
(	O
mpd	pointer
->	O
user	pointer
)	O
;	O
if	O
(	O
mpd	pointer
->	O
secret	pointer
)	O
mu_secret_unref	function
(	O
mpd	pointer
->	O
secret	pointer
)	O
;	O
}	O
}	O
static	O
int	O
pop_is_updated	function
(	O
mu_mailbox_t	pointer
mbox	pointer
)	O
{	O
struct	O
_pop3_mailbox	struct
*	O
mpd	pointer
=	O
mbox	pointer
->	O
data	pointer
;	O
if	O
(	O
mpd	pointer
==	O
NULL	O
)	O
return	O
0	int
;	O
return	O
mpd	pointer
->	O
is_updated	int
;	O
}	O
static	O
int	O
pop_messages_count	function
(	O
mu_mailbox_t	pointer
mbox	pointer
,	O
size_t	long
*	O
pcount	pointer
)	O
{	O
struct	O
_pop3_mailbox	struct
*	O
mpd	pointer
=	O
mbox	pointer
->	O
data	pointer
;	O
int	O
status	int
;	O
if	O
(	O
mpd	pointer
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
if	O
(	O
pop_is_updated	function
(	O
mbox	pointer
)	O
)	O
{	O
if	O
(	O
pcount	pointer
)	O
*	O
pcount	pointer
=	O
mpd	pointer
->	O
msg_count	long
;	O
return	O
0	int
;	O
}	O
status	int
=	O
mu_pop3_stat	function
(	O
mpd	pointer
->	O
pop3	pointer
,	O
&	O
mpd	pointer
->	O
msg_count	long
,	O
&	O
mpd	pointer
->	O
total_size	long
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
{	O
if	O
(	O
pcount	pointer
)	O
*	O
pcount	pointer
=	O
mpd	pointer
->	O
msg_count	long
;	O
mpd	pointer
->	O
is_updated	int
=	O
1	int
;	O
}	O
return	O
status	int
;	O
}	O
static	O
int	O
pop_scan	function
(	O
mu_mailbox_t	pointer
mbox	pointer
,	O
size_t	long
msgno	long
,	O
size_t	long
*	O
pcount	pointer
)	O
{	O
int	O
status	int
;	O
size_t	long
i	long
;	O
size_t	long
count	long
=	O
0	int
;	O
struct	O
_pop3_mailbox	struct
*	O
mpd	pointer
=	O
mbox	pointer
->	O
data	pointer
;	O
int	O
flags	int
;	O
mu_iterator_t	pointer
itr	pointer
;	O
status	int
=	O
pop_messages_count	function
(	O
mbox	pointer
,	O
&	O
count	long
)	O
;	O
if	O
(	O
status	int
!=	O
0	int
)	O
return	O
status	int
;	O
if	O
(	O
pcount	pointer
)	O
*	O
pcount	pointer
=	O
count	long
;	O
flags	int
=	O
_POP3_MSG_SIZE	int
;	O
if	O
(	O
!	O
mu_pop3_capa_test	function
(	O
mpd	pointer
->	O
pop3	pointer
,	O
"XLINES"	pointer
,	O
NULL	O
)	O
)	O
flags	int
|=	O
_POP3_MSG_LINES	int
;	O
status	int
=	O
mu_pop3_list_all	function
(	O
mpd	pointer
->	O
pop3	pointer
,	O
&	O
itr	pointer
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
for	O
(	O
i	long
=	O
0	int
,	O
mu_iterator_first	function
(	O
itr	pointer
)	O
;	O
i	long
<=	O
count	long
&&	O
!	O
mu_iterator_is_done	function
(	O
itr	pointer
)	O
;	O
i	long
++	O
,	O
mu_iterator_next	function
(	O
itr	pointer
)	O
)	O
{	O
const	O
char	O
*	O
str	pointer
;	O
char	O
*	O
p	pointer
;	O
size_t	long
num	long
;	O
mu_iterator_current	function
(	O
itr	pointer
,	O
(	O
void	O
*	O
*	O
)	O
&	O
str	pointer
)	O
;	O
num	long
=	O
strtoul	function
(	O
str	pointer
,	O
&	O
p	pointer
,	O
10	int
)	O
;	O
if	O
(	O
*	O
p	pointer
!=	O
' '	O
)	O
{	O
mu_debug	O
(	O
MU_DEBCAT_MAILBOX	int
,	O
MU_DEBUG_ERROR	int
,	O
(	O
"invalid reply to LIST command: %s"	pointer
,	O
str	pointer
)	O
)	O
;	O
status	int
=	O
MU_ERR_BADREPLY	O
;	O
break	O
;	O
}	O
if	O
(	O
num	long
>=	O
msgno	long
)	O
{	O
size_t	long
size	long
,	O
lines	int
;	O
struct	O
_pop3_message	struct
*	O
mpm	pointer
;	O
size	long
=	O
strtoul	function
(	O
p	pointer
+	O
1	int
,	O
&	O
p	pointer
,	O
10	int
)	O
;	O
if	O
(	O
flags	int
&	O
_POP3_MSG_LINES	int
)	O
{	O
if	O
(	O
*	O
p	pointer
!=	O
' '	O
)	O
{	O
mu_debug	O
(	O
MU_DEBCAT_MAILBOX	int
,	O
MU_DEBUG_ERROR	int
,	O
(	O
"invalid reply to LIST command: %s"	pointer
,	O
str	pointer
)	O
)	O
;	O
status	int
=	O
MU_ERR_BADREPLY	O
;	O
break	O
;	O
}	O
lines	int
=	O
strtoul	function
(	O
p	pointer
+	O
1	int
,	O
&	O
p	pointer
,	O
10	int
)	O
;	O
}	O
status	int
=	O
pop_create_pop3_message	function
(	O
mpd	pointer
,	O
num	long
,	O
&	O
mpm	pointer
)	O
;	O
if	O
(	O
status	int
)	O
break	O
;	O
mpm	pointer
->	O
message_size	long
=	O
size	long
;	O
if	O
(	O
flags	int
&	O
_POP3_MSG_LINES	int
)	O
mpm	pointer
->	O
message_lines	long
=	O
lines	int
;	O
mpm	pointer
->	O
flags	int
|=	O
flags	int
;	O
if	O
(	O
mbox	pointer
->	O
observable	pointer
)	O
{	O
if	O
(	O
(	O
(	O
i	long
+	O
1	int
)	O
%	O
10	int
)	O
==	O
0	int
)	O
mu_observable_notify	function
(	O
mbox	pointer
->	O
observable	pointer
,	O
MU_EVT_MAILBOX_PROGRESS	int
,	O
NULL	O
)	O
;	O
}	O
}	O
}	O
mu_iterator_destroy	function
(	O
&	O
itr	pointer
)	O
;	O
if	O
(	O
mbox	pointer
->	O
observable	pointer
)	O
{	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<=	O
count	long
;	O
i	long
++	O
)	O
{	O
if	O
(	O
mu_observable_notify	function
(	O
mbox	pointer
->	O
observable	pointer
,	O
MU_EVT_MESSAGE_ADD	int
,	O
&	O
i	long
)	O
!=	O
0	int
)	O
break	O
;	O
}	O
}	O
return	O
status	int
;	O
}	O
static	O
int	O
pop_message_unseen	function
(	O
mu_mailbox_t	pointer
mbox	pointer
,	O
size_t	long
*	O
punseen	pointer
)	O
{	O
size_t	long
count	long
=	O
0	int
;	O
int	O
status	int
=	O
pop_messages_count	function
(	O
mbox	pointer
,	O
&	O
count	long
)	O
;	O
if	O
(	O
status	int
!=	O
0	int
)	O
return	O
status	int
;	O
if	O
(	O
punseen	pointer
)	O
*	O
punseen	pointer
=	O
(	O
count	long
>	O
0	int
)	O
?	O
1	int
:	O
0	int
;	O
return	O
0	int
;	O
}	O
static	O
int	O
pop_get_size	function
(	O
mu_mailbox_t	pointer
mbox	pointer
,	O
mu_off_t	long
*	O
psize	pointer
)	O
{	O
struct	O
_pop3_mailbox	struct
*	O
mpd	pointer
=	O
mbox	pointer
->	O
data	pointer
;	O
int	O
status	int
=	O
0	int
;	O
if	O
(	O
mpd	pointer
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
if	O
(	O
!	O
pop_is_updated	function
(	O
mbox	pointer
)	O
)	O
status	int
=	O
pop_messages_count	function
(	O
mbox	pointer
,	O
NULL	O
)	O
;	O
if	O
(	O
psize	pointer
)	O
*	O
psize	pointer
=	O
mpd	pointer
->	O
total_size	long
;	O
return	O
status	int
;	O
}	O
static	O
void	O
pop_stream_drain	function
(	O
mu_stream_t	pointer
str	pointer
)	O
{	O
char	O
buf	pointer
[	O
2048	int
]	O
;	O
size_t	long
size	long
;	O
while	O
(	O
mu_stream_read	function
(	O
str	pointer
,	O
buf	pointer
,	O
sizeof	O
buf	pointer
,	O
&	O
size	long
)	O
==	O
0	int
&&	O
size	long
)	O
;	O
}	O
static	O
int	O
_pop_message_get_stream	function
(	O
struct	O
_pop3_message	struct
*	O
mpm	pointer
,	O
mu_stream_t	pointer
*	O
pstr	pointer
)	O
{	O
int	O
status	int
;	O
struct	O
_pop3_mailbox	struct
*	O
mpd	pointer
=	O
mpm	pointer
->	O
mpd	pointer
;	O
if	O
(	O
!	O
(	O
mpm	pointer
->	O
flags	int
&	O
_POP3_MSG_CACHED	int
)	O
)	O
{	O
mu_stream_t	pointer
stream	pointer
;	O
mu_off_t	long
size	long
;	O
status	int
=	O
mu_pop3_retr	function
(	O
mpd	pointer
->	O
pop3	pointer
,	O
mpm	pointer
->	O
num	long
,	O
&	O
stream	pointer
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
do	O
{	O
mu_stream_t	pointer
flt	pointer
;	O
if	O
(	O
!	O
mpd	pointer
->	O
cache	pointer
)	O
{	O
status	int
=	O
mu_temp_file_stream_create	function
(	O
&	O
mpd	pointer
->	O
cache	pointer
,	O
NULL	O
,	O
0	int
)	O
;	O
if	O
(	O
status	int
)	O
break	O
;	O
mu_stream_set_buffer	function
(	O
mpd	pointer
->	O
cache	pointer
,	O
mu_buffer_full	int
,	O
8192	int
)	O
;	O
}	O
status	int
=	O
mu_stream_size	function
(	O
mpd	pointer
->	O
cache	pointer
,	O
&	O
mpm	pointer
->	O
offset	long
)	O
;	O
if	O
(	O
status	int
)	O
break	O
;	O
status	int
=	O
mu_filter_create	function
(	O
&	O
flt	pointer
,	O
stream	pointer
,	O
"CRLF"	pointer
,	O
MU_FILTER_DECODE	int
,	O
MU_STREAM_READ	int
)	O
;	O
if	O
(	O
status	int
)	O
break	O
;	O
status	int
=	O
mu_stream_copy	function
(	O
mpd	pointer
->	O
cache	pointer
,	O
flt	pointer
,	O
0	int
,	O
&	O
size	long
)	O
;	O
mu_stream_destroy	function
(	O
&	O
flt	pointer
)	O
;	O
}	O
while	O
(	O
0	int
)	O
;	O
if	O
(	O
status	int
)	O
{	O
pop_stream_drain	function
(	O
stream	pointer
)	O
;	O
mu_stream_unref	function
(	O
stream	pointer
)	O
;	O
return	O
status	int
;	O
}	O
mu_stream_unref	function
(	O
stream	pointer
)	O
;	O
mpm	pointer
->	O
message_size	long
=	O
size	long
;	O
mpm	pointer
->	O
flags	int
|=	O
_POP3_MSG_CACHED	int
|	O
_POP3_MSG_SIZE	int
;	O
}	O
return	O
mu_streamref_create_abridged	function
(	O
pstr	pointer
,	O
mpd	pointer
->	O
cache	pointer
,	O
mpm	pointer
->	O
offset	long
,	O
mpm	pointer
->	O
offset	long
+	O
mpm	pointer
->	O
message_size	long
-	O
1	int
)	O
;	O
}	O
static	O
int	O
pop_message_get_stream	function
(	O
mu_message_t	pointer
msg	pointer
,	O
mu_stream_t	pointer
*	O
pstr	pointer
)	O
{	O
struct	O
_pop3_message	struct
*	O
mpm	pointer
=	O
mu_message_get_owner	function
(	O
msg	pointer
)	O
;	O
return	O
_pop_message_get_stream	function
(	O
mpm	pointer
,	O
pstr	pointer
)	O
;	O
}	O
static	O
int	O
pop_scan_message	function
(	O
struct	O
_pop3_message	struct
*	O
mpm	pointer
)	O
{	O
int	O
status	int
;	O
mu_stream_t	pointer
stream	pointer
;	O
struct	O
mu_message_scan	struct
scan	struct
;	O
if	O
(	O
mpm	pointer
->	O
flags	int
&	O
_POP3_MSG_SCANNED	int
)	O
return	O
0	int
;	O
status	int
=	O
_pop_message_get_stream	function
(	O
mpm	pointer
,	O
&	O
stream	pointer
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
scan	struct
.	O
flags	int
=	O
MU_SCAN_SEEK	int
|	O
MU_SCAN_SIZE	int
;	O
scan	struct
.	O
message_start	long
=	O
0	int
;	O
scan	struct
.	O
message_size	long
=	O
mpm	pointer
->	O
message_size	long
;	O
status	int
=	O
mu_stream_scan_message	function
(	O
stream	pointer
,	O
&	O
scan	struct
)	O
;	O
mu_stream_unref	function
(	O
stream	pointer
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
{	O
mpm	pointer
->	O
body_start	long
=	O
scan	struct
.	O
body_start	long
;	O
mpm	pointer
->	O
body_end	long
=	O
scan	struct
.	O
body_end	long
;	O
mpm	pointer
->	O
header_lines	long
=	O
scan	struct
.	O
header_lines	long
;	O
mpm	pointer
->	O
body_lines	long
=	O
scan	struct
.	O
body_lines	long
;	O
if	O
(	O
!	O
(	O
mpm	pointer
->	O
flags	int
&	O
_POP3_MSG_ATTRSET	int
)	O
)	O
{	O
mpm	pointer
->	O
attr_flags	int
=	O
scan	struct
.	O
attr_flags	int
;	O
mpm	pointer
->	O
flags	int
|=	O
_POP3_MSG_ATTRSET	int
;	O
}	O
mpm	pointer
->	O
flags	int
|=	O
_POP3_MSG_SCANNED	int
;	O
}	O
return	O
status	int
;	O
}	O
static	O
int	O
pop_message_size	function
(	O
mu_message_t	pointer
msg	pointer
,	O
size_t	long
*	O
psize	pointer
)	O
{	O
struct	O
_pop3_message	struct
*	O
mpm	pointer
=	O
mu_message_get_owner	function
(	O
msg	pointer
)	O
;	O
struct	O
_pop3_mailbox	struct
*	O
mpd	pointer
=	O
mpm	pointer
->	O
mpd	pointer
;	O
if	O
(	O
mpm	pointer
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
if	O
(	O
!	O
(	O
mpm	pointer
->	O
flags	int
&	O
_POP3_MSG_SIZE	int
)	O
)	O
{	O
int	O
status	int
=	O
mu_pop3_list	function
(	O
mpd	pointer
->	O
pop3	pointer
,	O
mpm	pointer
->	O
num	long
,	O
&	O
mpm	pointer
->	O
message_size	long
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
mpm	pointer
->	O
flags	int
|=	O
_POP3_MSG_SIZE	int
;	O
}	O
if	O
(	O
psize	pointer
)	O
*	O
psize	pointer
=	O
mpm	pointer
->	O
message_size	long
;	O
return	O
0	int
;	O
}	O
static	O
int	O
pop_message_lines	function
(	O
mu_message_t	pointer
msg	pointer
,	O
size_t	long
*	O
plines	pointer
,	O
int	O
quick	int
)	O
{	O
int	O
rc	int
;	O
struct	O
_pop3_message	struct
*	O
mpm	pointer
=	O
mu_message_get_owner	function
(	O
msg	pointer
)	O
;	O
if	O
(	O
!	O
(	O
mpm	pointer
->	O
flags	int
&	O
_POP3_MSG_LINES	int
)	O
)	O
{	O
if	O
(	O
quick	int
&&	O
!	O
(	O
mpm	pointer
->	O
flags	int
&	O
_POP3_MSG_CACHED	int
)	O
)	O
return	O
MU_ERR_INFO_UNAVAILABLE	O
;	O
if	O
(	O
!	O
pop_is_updated	function
(	O
mpm	pointer
->	O
mpd	pointer
->	O
mbox	pointer
)	O
)	O
pop_scan	function
(	O
mpm	pointer
->	O
mpd	pointer
->	O
mbox	pointer
,	O
1	int
,	O
NULL	O
)	O
;	O
rc	int
=	O
pop_scan_message	function
(	O
mpm	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
mpm	pointer
->	O
message_lines	long
=	O
mpm	pointer
->	O
header_lines	long
+	O
mpm	pointer
->	O
body_lines	long
+	O
1	int
;	O
mpm	pointer
->	O
flags	int
|=	O
_POP3_MSG_LINES	int
;	O
}	O
*	O
plines	pointer
=	O
mpm	pointer
->	O
message_lines	long
;	O
return	O
0	int
;	O
}	O
static	O
int	O
pop_create_message	function
(	O
struct	O
_pop3_message	struct
*	O
mpm	pointer
,	O
struct	O
_pop3_mailbox	struct
*	O
mpd	pointer
)	O
{	O
int	O
status	int
;	O
mu_message_t	pointer
msg	pointer
;	O
status	int
=	O
mu_message_create	function
(	O
&	O
msg	pointer
,	O
mpm	pointer
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
mu_message_set_get_stream	function
(	O
msg	pointer
,	O
pop_message_get_stream	function
,	O
mpm	pointer
)	O
;	O
mu_message_set_size	function
(	O
msg	pointer
,	O
pop_message_size	function
,	O
mpm	pointer
)	O
;	O
mu_message_set_lines	function
(	O
msg	pointer
,	O
pop_message_lines	function
,	O
mpm	pointer
)	O
;	O
mpm	pointer
->	O
message	pointer
=	O
msg	pointer
;	O
return	O
0	int
;	O
}	O
static	O
int	O
pop_create_pop3_message	function
(	O
struct	O
_pop3_mailbox	struct
*	O
mpd	pointer
,	O
size_t	long
msgno	long
,	O
struct	O
_pop3_message	struct
*	O
*	O
mptr	pointer
)	O
{	O
struct	O
_pop3_message	struct
*	O
mpm	pointer
;	O
if	O
(	O
msgno	long
>	O
mpd	pointer
->	O
msg_count	long
)	O
return	O
MU_ERR_NOENT	O
;	O
if	O
(	O
!	O
mpd	pointer
->	O
msg	pointer
)	O
{	O
mpd	pointer
->	O
msg	pointer
=	O
calloc	function
(	O
mpd	pointer
->	O
msg_count	long
,	O
sizeof	O
(	O
mpd	pointer
->	O
msg	pointer
[	O
0	int
]	O
)	O
)	O
;	O
if	O
(	O
!	O
mpd	pointer
->	O
msg	pointer
)	O
return	O
ENOMEM	int
;	O
}	O
if	O
(	O
mpd	pointer
->	O
msg	pointer
[	O
msgno	long
-	O
1	int
]	O
)	O
{	O
*	O
mptr	pointer
=	O
mpd	pointer
->	O
msg	pointer
[	O
msgno	long
-	O
1	int
]	O
;	O
return	O
0	int
;	O
}	O
mpm	pointer
=	O
calloc	function
(	O
1	int
,	O
sizeof	O
(	O
*	O
mpm	pointer
)	O
)	O
;	O
if	O
(	O
mpm	pointer
==	O
NULL	O
)	O
return	O
ENOMEM	int
;	O
mpm	pointer
->	O
mpd	pointer
=	O
mpd	pointer
;	O
mpm	pointer
->	O
num	long
=	O
msgno	long
;	O
mpd	pointer
->	O
msg	pointer
[	O
msgno	long
-	O
1	int
]	O
=	O
mpm	pointer
;	O
*	O
mptr	pointer
=	O
mpm	pointer
;	O
return	O
0	int
;	O
}	O
int	O
pop_header_blurb	function
(	O
mu_stream_t	pointer
stream	pointer
,	O
size_t	long
maxlines	long
,	O
char	O
*	O
*	O
pbuf	pointer
,	O
size_t	long
*	O
plen	pointer
)	O
{	O
int	O
status	int
;	O
mu_opool_t	pointer
opool	pointer
;	O
size_t	long
size	long
=	O
0	int
;	O
char	O
*	O
buf	pointer
=	O
NULL	O
;	O
size_t	long
n	int
;	O
size_t	long
nlines	long
=	O
0	int
;	O
status	int
=	O
mu_opool_create	function
(	O
&	O
opool	pointer
,	O
MU_OPOOL_DEFAULT	int
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
while	O
(	O
(	O
status	int
=	O
mu_stream_getline	function
(	O
stream	pointer
,	O
&	O
buf	pointer
,	O
&	O
size	long
,	O
&	O
n	int
)	O
)	O
==	O
0	int
&&	O
n	int
>	O
0	int
)	O
{	O
size_t	long
len	long
=	O
mu_rtrim_class	function
(	O
buf	pointer
,	O
MU_CTYPE_ENDLN	int
)	O
;	O
if	O
(	O
len	long
==	O
0	int
)	O
break	O
;	O
mu_opool_append	function
(	O
opool	pointer
,	O
buf	pointer
,	O
len	long
)	O
;	O
mu_opool_append_char	function
(	O
opool	pointer
,	O
'\n'	O
)	O
;	O
if	O
(	O
maxlines	long
&&	O
++	O
nlines	long
>=	O
maxlines	long
)	O
break	O
;	O
}	O
if	O
(	O
status	int
==	O
0	int
)	O
{	O
n	int
=	O
mu_opool_size	function
(	O
opool	pointer
)	O
;	O
if	O
(	O
n	int
>	O
size	long
)	O
{	O
char	O
*	O
p	pointer
=	O
realloc	function
(	O
buf	pointer
,	O
n	int
)	O
;	O
if	O
(	O
!	O
p	pointer
)	O
{	O
free	function
(	O
buf	pointer
)	O
;	O
status	int
=	O
ENOMEM	int
;	O
}	O
else	O
buf	pointer
=	O
p	pointer
;	O
}	O
}	O
if	O
(	O
status	int
==	O
0	int
)	O
{	O
mu_opool_copy	function
(	O
opool	pointer
,	O
buf	pointer
,	O
n	int
)	O
;	O
*	O
pbuf	pointer
=	O
buf	pointer
;	O
*	O
plen	pointer
=	O
n	int
;	O
}	O
else	O
free	function
(	O
buf	pointer
)	O
;	O
mu_opool_destroy	function
(	O
&	O
opool	pointer
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
pop_header_fill	function
(	O
void	O
*	O
data	pointer
,	O
char	O
*	O
*	O
pbuf	pointer
,	O
size_t	long
*	O
plen	pointer
)	O
{	O
struct	O
_pop3_message	struct
*	O
mpm	pointer
=	O
data	pointer
;	O
struct	O
_pop3_mailbox	struct
*	O
mpd	pointer
=	O
mpm	pointer
->	O
mpd	pointer
;	O
mu_stream_t	pointer
stream	pointer
;	O
int	O
status	int
;	O
if	O
(	O
mpm	pointer
->	O
flags	int
&	O
_POP3_MSG_SCANNED	int
)	O
{	O
status	int
=	O
_pop_message_get_stream	function
(	O
mpm	pointer
,	O
&	O
stream	pointer
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
{	O
status	int
=	O
pop_header_blurb	function
(	O
stream	pointer
,	O
mpm	pointer
->	O
header_lines	long
,	O
pbuf	pointer
,	O
plen	pointer
)	O
;	O
mu_stream_destroy	function
(	O
&	O
stream	pointer
)	O
;	O
}	O
}	O
else	O
{	O
status	int
=	O
mu_pop3_top	function
(	O
mpd	pointer
->	O
pop3	pointer
,	O
mpm	pointer
->	O
num	long
,	O
0	int
,	O
&	O
stream	pointer
)	O
;	O
if	O
(	O
status	int
)	O
status	int
=	O
_pop_message_get_stream	function
(	O
mpm	pointer
,	O
&	O
stream	pointer
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
{	O
status	int
=	O
pop_header_blurb	function
(	O
stream	pointer
,	O
0	int
,	O
pbuf	pointer
,	O
plen	pointer
)	O
;	O
if	O
(	O
!	O
mu_stream_eof	function
(	O
stream	pointer
)	O
)	O
pop_stream_drain	function
(	O
stream	pointer
)	O
;	O
mu_stream_destroy	function
(	O
&	O
stream	pointer
)	O
;	O
}	O
return	O
status	int
;	O
}	O
return	O
status	int
;	O
}	O
static	O
int	O
pop_create_header	function
(	O
struct	O
_pop3_message	struct
*	O
mpm	pointer
)	O
{	O
int	O
status	int
;	O
mu_header_t	pointer
header	pointer
=	O
NULL	O
;	O
status	int
=	O
mu_header_create	function
(	O
&	O
header	pointer
,	O
NULL	O
,	O
0	int
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
mu_header_set_fill	function
(	O
header	pointer
,	O
pop_header_fill	function
,	O
mpm	pointer
)	O
;	O
mu_message_set_header	function
(	O
mpm	pointer
->	O
message	pointer
,	O
header	pointer
,	O
mpm	pointer
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
pop_get_attribute	function
(	O
mu_attribute_t	pointer
attr	pointer
,	O
int	O
*	O
pflags	pointer
)	O
{	O
struct	O
_pop3_message	struct
*	O
mpm	pointer
=	O
mu_attribute_get_owner	function
(	O
attr	pointer
)	O
;	O
char	O
hdr_status	array
[	O
64	int
]	O
;	O
mu_header_t	pointer
header	pointer
=	O
NULL	O
;	O
if	O
(	O
mpm	pointer
==	O
NULL	O
||	O
pflags	pointer
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
if	O
(	O
!	O
(	O
mpm	pointer
->	O
flags	int
&	O
_POP3_MSG_ATTRSET	int
)	O
)	O
{	O
hdr_status	array
[	O
0	int
]	O
=	O
'\0'	O
;	O
mu_message_get_header	function
(	O
mpm	pointer
->	O
message	pointer
,	O
&	O
header	pointer
)	O
;	O
mu_header_get_value	O
(	O
header	pointer
,	O
MU_HEADER_STATUS	pointer
,	O
hdr_status	array
,	O
sizeof	O
hdr_status	array
,	O
NULL	O
)	O
;	O
mu_string_to_flags	function
(	O
hdr_status	array
,	O
&	O
mpm	pointer
->	O
attr_flags	int
)	O
;	O
}	O
*	O
pflags	pointer
=	O
mpm	pointer
->	O
attr_flags	int
;	O
return	O
0	int
;	O
}	O
static	O
int	O
pop_set_attribute	function
(	O
mu_attribute_t	pointer
attr	pointer
,	O
int	O
flags	int
)	O
{	O
struct	O
_pop3_message	struct
*	O
mpm	pointer
=	O
mu_attribute_get_owner	function
(	O
attr	pointer
)	O
;	O
if	O
(	O
mpm	pointer
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
mpm	pointer
->	O
attr_flags	int
|=	O
flags	int
;	O
mpm	pointer
->	O
flags	int
|=	O
_POP3_MSG_ATTRSET	int
;	O
return	O
0	int
;	O
}	O
static	O
int	O
pop_unset_attribute	function
(	O
mu_attribute_t	pointer
attr	pointer
,	O
int	O
flags	int
)	O
{	O
struct	O
_pop3_message	struct
*	O
mpm	pointer
=	O
mu_attribute_get_owner	function
(	O
attr	pointer
)	O
;	O
if	O
(	O
mpm	pointer
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
mpm	pointer
->	O
attr_flags	int
&=	O
~	O
flags	int
;	O
mpm	pointer
->	O
flags	int
|=	O
_POP3_MSG_ATTRSET	int
;	O
return	O
0	int
;	O
}	O
static	O
int	O
pop_create_attribute	function
(	O
struct	O
_pop3_message	struct
*	O
mpm	pointer
)	O
{	O
int	O
status	int
;	O
mu_attribute_t	pointer
attribute	pointer
;	O
status	int
=	O
mu_attribute_create	function
(	O
&	O
attribute	pointer
,	O
mpm	pointer
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
mu_attribute_set_get_flags	function
(	O
attribute	pointer
,	O
pop_get_attribute	function
,	O
mpm	pointer
)	O
;	O
mu_attribute_set_set_flags	function
(	O
attribute	pointer
,	O
pop_set_attribute	function
,	O
mpm	pointer
)	O
;	O
mu_attribute_set_unset_flags	function
(	O
attribute	pointer
,	O
pop_unset_attribute	function
,	O
mpm	pointer
)	O
;	O
mu_message_set_attribute	function
(	O
mpm	pointer
->	O
message	pointer
,	O
attribute	pointer
,	O
mpm	pointer
)	O
;	O
return	O
0	int
;	O
}	O
int	O
pop_body_get_stream	function
(	O
mu_body_t	pointer
body	pointer
,	O
mu_stream_t	pointer
*	O
pstr	pointer
)	O
{	O
mu_message_t	pointer
msg	pointer
=	O
mu_body_get_owner	function
(	O
body	pointer
)	O
;	O
struct	O
_pop3_message	struct
*	O
mpm	pointer
=	O
mu_message_get_owner	function
(	O
msg	pointer
)	O
;	O
struct	O
_pop3_mailbox	struct
*	O
mpd	pointer
=	O
mpm	pointer
->	O
mpd	pointer
;	O
int	O
status	int
=	O
pop_scan_message	function
(	O
mpm	pointer
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
return	O
mu_streamref_create_abridged	function
(	O
pstr	pointer
,	O
mpd	pointer
->	O
cache	pointer
,	O
mpm	pointer
->	O
offset	long
+	O
mpm	pointer
->	O
body_start	long
,	O
mpm	pointer
->	O
offset	long
+	O
mpm	pointer
->	O
body_end	long
-	O
1	int
)	O
;	O
}	O
static	O
int	O
pop_body_size	function
(	O
mu_body_t	pointer
body	pointer
,	O
size_t	long
*	O
psize	pointer
)	O
{	O
mu_message_t	pointer
msg	pointer
=	O
mu_body_get_owner	function
(	O
body	pointer
)	O
;	O
struct	O
_pop3_message	struct
*	O
mpm	pointer
=	O
mu_message_get_owner	function
(	O
msg	pointer
)	O
;	O
int	O
status	int
=	O
pop_scan_message	function
(	O
mpm	pointer
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
*	O
psize	pointer
=	O
mpm	pointer
->	O
body_end	long
-	O
mpm	pointer
->	O
body_start	long
;	O
return	O
0	int
;	O
}	O
static	O
int	O
pop_body_lines	function
(	O
mu_body_t	pointer
body	pointer
,	O
size_t	long
*	O
plines	pointer
)	O
{	O
mu_message_t	pointer
msg	pointer
=	O
mu_body_get_owner	function
(	O
body	pointer
)	O
;	O
struct	O
_pop3_message	struct
*	O
mpm	pointer
=	O
mu_message_get_owner	function
(	O
msg	pointer
)	O
;	O
int	O
status	int
=	O
pop_scan_message	function
(	O
mpm	pointer
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
*	O
plines	pointer
=	O
mpm	pointer
->	O
body_lines	long
;	O
return	O
0	int
;	O
}	O
static	O
int	O
pop_create_body	function
(	O
struct	O
_pop3_message	struct
*	O
mpm	pointer
)	O
{	O
int	O
status	int
;	O
mu_body_t	pointer
body	pointer
=	O
NULL	O
;	O
mu_message_t	pointer
msg	pointer
=	O
mpm	pointer
->	O
message	pointer
;	O
status	int
=	O
mu_body_create	function
(	O
&	O
body	pointer
,	O
msg	pointer
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
mu_body_set_get_stream	function
(	O
body	pointer
,	O
pop_body_get_stream	function
,	O
msg	pointer
)	O
;	O
mu_body_set_size	function
(	O
body	pointer
,	O
pop_body_size	function
,	O
msg	pointer
)	O
;	O
mu_body_set_lines	function
(	O
body	pointer
,	O
pop_body_lines	function
,	O
msg	pointer
)	O
;	O
mu_message_set_body	function
(	O
mpm	pointer
->	O
message	pointer
,	O
body	pointer
,	O
mpm	pointer
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
pop_uidl	function
(	O
mu_message_t	pointer
msg	pointer
,	O
char	O
*	O
buffer	pointer
,	O
size_t	long
buflen	long
,	O
size_t	long
*	O
pnwriten	pointer
)	O
{	O
struct	O
_pop3_message	struct
*	O
mpm	pointer
=	O
mu_message_get_owner	function
(	O
msg	pointer
)	O
;	O
struct	O
_pop3_mailbox	struct
*	O
mpd	pointer
=	O
mpm	pointer
->	O
mpd	pointer
;	O
size_t	long
len	long
;	O
if	O
(	O
!	O
mpm	pointer
->	O
uidl	array
)	O
{	O
if	O
(	O
mu_pop3_capa_test	function
(	O
mpd	pointer
->	O
pop3	pointer
,	O
"UIDL"	pointer
,	O
NULL	O
)	O
==	O
0	int
)	O
{	O
int	O
status	int
=	O
mu_pop3_uidl	function
(	O
mpd	pointer
->	O
pop3	pointer
,	O
mpm	pointer
->	O
num	long
,	O
&	O
mpm	pointer
->	O
uidl	array
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
}	O
else	O
return	O
ENOSYS	int
;	O
}	O
len	long
=	O
strlen	function
(	O
mpm	pointer
->	O
uidl	array
)	O
;	O
if	O
(	O
buffer	pointer
)	O
{	O
buflen	long
--	O
;	O
buflen	long
=	O
(	O
len	long
>	O
buflen	long
)	O
?	O
buflen	long
:	O
len	long
;	O
memcpy	function
(	O
buffer	pointer
,	O
mpm	pointer
->	O
uidl	array
,	O
buflen	long
)	O
;	O
buffer	pointer
[	O
buflen	long
]	O
=	O
0	int
;	O
}	O
else	O
buflen	long
=	O
len	long
;	O
if	O
(	O
pnwriten	pointer
)	O
*	O
pnwriten	pointer
=	O
buflen	long
;	O
return	O
0	int
;	O
}	O
static	O
int	O
pop_uid	function
(	O
mu_message_t	pointer
msg	pointer
,	O
size_t	long
*	O
puid	pointer
)	O
{	O
struct	O
_pop3_message	struct
*	O
mpm	pointer
=	O
mu_message_get_owner	function
(	O
msg	pointer
)	O
;	O
if	O
(	O
puid	pointer
)	O
*	O
puid	pointer
=	O
mpm	pointer
->	O
num	long
;	O
return	O
0	int
;	O
}	O
static	O
int	O
pop_get_message	function
(	O
mu_mailbox_t	pointer
mbox	pointer
,	O
size_t	long
msgno	long
,	O
mu_message_t	pointer
*	O
pmsg	pointer
)	O
{	O
struct	O
_pop3_mailbox	struct
*	O
mpd	pointer
=	O
mbox	pointer
->	O
data	pointer
;	O
struct	O
_pop3_message	struct
*	O
mpm	pointer
;	O
int	O
status	int
;	O
if	O
(	O
pmsg	pointer
==	O
NULL	O
||	O
mpd	pointer
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
if	O
(	O
!	O
pop_is_updated	function
(	O
mbox	pointer
)	O
)	O
pop_scan	function
(	O
mbox	pointer
,	O
1	int
,	O
NULL	O
)	O
;	O
status	int
=	O
pop_create_pop3_message	function
(	O
mpd	pointer
,	O
msgno	long
,	O
&	O
mpm	pointer
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
if	O
(	O
mpm	pointer
->	O
message	pointer
)	O
{	O
*	O
pmsg	pointer
=	O
mpm	pointer
->	O
message	pointer
;	O
return	O
0	int
;	O
}	O
status	int
=	O
pop_create_message	function
(	O
mpm	pointer
,	O
mpd	pointer
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
do	O
{	O
status	int
=	O
pop_create_header	function
(	O
mpm	pointer
)	O
;	O
if	O
(	O
status	int
)	O
break	O
;	O
status	int
=	O
pop_create_attribute	function
(	O
mpm	pointer
)	O
;	O
if	O
(	O
status	int
)	O
break	O
;	O
status	int
=	O
pop_create_body	function
(	O
mpm	pointer
)	O
;	O
}	O
while	O
(	O
0	int
)	O
;	O
if	O
(	O
status	int
)	O
{	O
mu_message_destroy	function
(	O
&	O
mpm	pointer
->	O
message	pointer
,	O
mpm	pointer
)	O
;	O
free	function
(	O
mpm	pointer
)	O
;	O
return	O
status	int
;	O
}	O
if	O
(	O
mu_pop3_capa_test	function
(	O
mpd	pointer
->	O
pop3	pointer
,	O
"UIDL"	pointer
,	O
NULL	O
)	O
==	O
0	int
)	O
mu_message_set_uidl	function
(	O
mpm	pointer
->	O
message	pointer
,	O
pop_uidl	function
,	O
mpm	pointer
)	O
;	O
mu_message_set_uid	function
(	O
mpm	pointer
->	O
message	pointer
,	O
pop_uid	function
,	O
mpm	pointer
)	O
;	O
mu_message_set_mailbox	function
(	O
mpm	pointer
->	O
message	pointer
,	O
mbox	pointer
,	O
mpm	pointer
)	O
;	O
*	O
pmsg	pointer
=	O
mpm	pointer
->	O
message	pointer
;	O
return	O
0	int
;	O
}	O
static	O
int	O
pop_expunge	function
(	O
mu_mailbox_t	pointer
mbox	pointer
)	O
{	O
struct	O
_pop3_mailbox	struct
*	O
mpd	pointer
=	O
mbox	pointer
->	O
data	pointer
;	O
int	O
status	int
=	O
0	int
;	O
size_t	long
i	long
;	O
size_t	long
expcount	long
=	O
0	int
;	O
if	O
(	O
mpd	pointer
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
if	O
(	O
!	O
mpd	pointer
->	O
msg	pointer
)	O
return	O
0	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
mpd	pointer
->	O
msg_count	long
;	O
i	long
++	O
)	O
{	O
struct	O
_pop3_message	struct
*	O
mpm	pointer
=	O
mpd	pointer
->	O
msg	pointer
[	O
i	long
]	O
;	O
if	O
(	O
mpm	pointer
&&	O
(	O
mpm	pointer
->	O
flags	int
&	O
_POP3_MSG_ATTRSET	int
)	O
&&	O
(	O
mpm	pointer
->	O
attr_flags	int
&	O
MU_ATTRIBUTE_DELETED	int
)	O
)	O
{	O
size_t	long
expevt	array
[	O
2	int
]	O
=	O
{	O
i	long
+	O
1	int
,	O
expcount	long
}	O
;	O
status	int
=	O
mu_pop3_dele	function
(	O
mpd	pointer
->	O
pop3	pointer
,	O
mpm	pointer
->	O
num	long
)	O
;	O
if	O
(	O
status	int
)	O
break	O
;	O
mu_observable_notify	function
(	O
mbox	pointer
->	O
observable	pointer
,	O
MU_EVT_MAILBOX_MESSAGE_EXPUNGE	int
,	O
&	O
expevt	array
)	O
;	O
++	O
expcount	long
;	O
}	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
_pop3_mailbox_init	function
(	O
mu_mailbox_t	pointer
mbox	pointer
,	O
int	O
pops	int
)	O
{	O
struct	O
_pop3_mailbox	struct
*	O
mpd	pointer
;	O
int	O
status	int
=	O
0	int
;	O
mpd	pointer
=	O
mbox	pointer
->	O
data	pointer
=	O
calloc	function
(	O
1	int
,	O
sizeof	O
(	O
*	O
mpd	pointer
)	O
)	O
;	O
if	O
(	O
mbox	pointer
->	O
data	pointer
==	O
NULL	O
)	O
return	O
ENOMEM	int
;	O
mpd	pointer
->	O
pop3	pointer
=	O
NULL	O
;	O
mpd	pointer
->	O
mbox	pointer
=	O
mbox	pointer
;	O
mpd	pointer
->	O
pops	int
=	O
pops	int
;	O
mbox	pointer
->	O
_destroy	pointer
=	O
pop_destroy	function
;	O
mbox	pointer
->	O
_open	pointer
=	O
pop_open	function
;	O
mbox	pointer
->	O
_close	pointer
=	O
pop_close	function
;	O
mbox	pointer
->	O
_messages_count	pointer
=	O
pop_messages_count	function
;	O
mbox	pointer
->	O
_messages_recent	pointer
=	O
pop_messages_count	function
;	O
mbox	pointer
->	O
_is_updated	pointer
=	O
pop_is_updated	function
;	O
mbox	pointer
->	O
_scan	pointer
=	O
pop_scan	function
;	O
mbox	pointer
->	O
_message_unseen	pointer
=	O
pop_message_unseen	function
;	O
mbox	pointer
->	O
_get_size	pointer
=	O
pop_get_size	function
;	O
mbox	pointer
->	O
_get_message	pointer
=	O
pop_get_message	function
;	O
mbox	pointer
->	O
_expunge	pointer
=	O
pop_expunge	function
;	O
{	O
mu_property_t	pointer
property	pointer
=	O
NULL	O
;	O
mu_mailbox_get_property	function
(	O
mbox	pointer
,	O
&	O
property	pointer
)	O
;	O
mu_property_set_value	function
(	O
property	pointer
,	O
"TYPE"	pointer
,	O
"POP3"	pointer
,	O
1	int
)	O
;	O
}	O
mbox	pointer
->	O
folder	pointer
->	O
data	pointer
=	O
mbox	pointer
;	O
return	O
status	int
;	O
}	O
int	O
_mailbox_pop_init	function
(	O
mu_mailbox_t	pointer
mbox	pointer
)	O
{	O
return	O
_pop3_mailbox_init	function
(	O
mbox	pointer
,	O
0	int
)	O
;	O
}	O
int	O
_mailbox_pops_init	function
(	O
mu_mailbox_t	pointer
mbox	pointer
)	O
{	O
return	O
_pop3_mailbox_init	function
(	O
mbox	pointer
,	O
1	int
)	O
;	O
}	O
static	O
int	O
pop_get_user	function
(	O
mu_authority_t	pointer
auth	pointer
)	O
{	O
mu_folder_t	pointer
folder	pointer
=	O
mu_authority_get_owner	function
(	O
auth	pointer
)	O
;	O
mu_mailbox_t	pointer
mbox	pointer
=	O
folder	pointer
->	O
data	pointer
;	O
struct	O
_pop3_mailbox	struct
*	O
mpd	pointer
=	O
mbox	pointer
->	O
data	pointer
;	O
mu_ticket_t	pointer
ticket	pointer
=	O
NULL	O
;	O
int	O
status	int
;	O
mu_authority_get_ticket	function
(	O
auth	pointer
,	O
&	O
ticket	pointer
)	O
;	O
if	O
(	O
mpd	pointer
->	O
user	pointer
)	O
{	O
free	function
(	O
mpd	pointer
->	O
user	pointer
)	O
;	O
mpd	pointer
->	O
user	pointer
=	O
NULL	O
;	O
}	O
status	int
=	O
mu_url_aget_user	function
(	O
mbox	pointer
->	O
url	pointer
,	O
&	O
mpd	pointer
->	O
user	pointer
)	O
;	O
if	O
(	O
status	int
==	O
MU_ERR_NOENT	O
)	O
status	int
=	O
mu_ticket_get_cred	function
(	O
ticket	pointer
,	O
mbox	pointer
->	O
url	pointer
,	O
"Pop User: "	pointer
,	O
&	O
mpd	pointer
->	O
user	pointer
,	O
NULL	O
)	O
;	O
if	O
(	O
status	int
==	O
MU_ERR_NOENT	O
||	O
mpd	pointer
->	O
user	pointer
==	O
NULL	O
)	O
return	O
MU_ERR_NOUSERNAME	O
;	O
return	O
status	int
;	O
}	O
static	O
int	O
pop_get_passwd	function
(	O
mu_authority_t	pointer
auth	pointer
)	O
{	O
mu_folder_t	pointer
folder	pointer
=	O
mu_authority_get_owner	function
(	O
auth	pointer
)	O
;	O
mu_mailbox_t	pointer
mbox	pointer
=	O
folder	pointer
->	O
data	pointer
;	O
struct	O
_pop3_mailbox	struct
*	O
mpd	pointer
=	O
mbox	pointer
->	O
data	pointer
;	O
mu_ticket_t	pointer
ticket	pointer
=	O
NULL	O
;	O
int	O
status	int
;	O
mu_authority_get_ticket	function
(	O
auth	pointer
,	O
&	O
ticket	pointer
)	O
;	O
status	int
=	O
mu_url_get_secret	function
(	O
mbox	pointer
->	O
url	pointer
,	O
&	O
mpd	pointer
->	O
secret	pointer
)	O
;	O
if	O
(	O
status	int
==	O
MU_ERR_NOENT	O
)	O
status	int
=	O
mu_ticket_get_cred	function
(	O
ticket	pointer
,	O
mbox	pointer
->	O
url	pointer
,	O
"Pop Passwd: "	pointer
,	O
NULL	O
,	O
&	O
mpd	pointer
->	O
secret	pointer
)	O
;	O
if	O
(	O
status	int
==	O
MU_ERR_NOENT	O
||	O
!	O
mpd	pointer
->	O
secret	pointer
)	O
return	O
MU_ERR_NOPASSWORD	O
;	O
return	O
0	int
;	O
}	O
int	O
_pop_apop	function
(	O
mu_authority_t	pointer
auth	pointer
)	O
{	O
mu_folder_t	pointer
folder	pointer
=	O
mu_authority_get_owner	function
(	O
auth	pointer
)	O
;	O
mu_mailbox_t	pointer
mbox	pointer
=	O
folder	pointer
->	O
data	pointer
;	O
struct	O
_pop3_mailbox	struct
*	O
mpd	pointer
=	O
mbox	pointer
->	O
data	pointer
;	O
int	O
status	int
;	O
status	int
=	O
pop_get_user	function
(	O
auth	pointer
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
status	int
=	O
pop_get_passwd	function
(	O
auth	pointer
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
status	int
=	O
mu_pop3_apop	function
(	O
mpd	pointer
->	O
pop3	pointer
,	O
mpd	pointer
->	O
user	pointer
,	O
mu_secret_password	function
(	O
mpd	pointer
->	O
secret	pointer
)	O
)	O
;	O
mu_secret_password_unref	function
(	O
mpd	pointer
->	O
secret	pointer
)	O
;	O
mu_secret_unref	function
(	O
mpd	pointer
->	O
secret	pointer
)	O
;	O
mpd	pointer
->	O
secret	pointer
=	O
NULL	O
;	O
free	function
(	O
mpd	pointer
->	O
user	pointer
)	O
;	O
mpd	pointer
->	O
user	pointer
=	O
NULL	O
;	O
return	O
status	int
;	O
}	O
int	O
_pop_user	function
(	O
mu_authority_t	pointer
auth	pointer
)	O
{	O
mu_folder_t	pointer
folder	pointer
=	O
mu_authority_get_owner	function
(	O
auth	pointer
)	O
;	O
mu_mailbox_t	pointer
mbox	pointer
=	O
folder	pointer
->	O
data	pointer
;	O
struct	O
_pop3_mailbox	struct
*	O
mpd	pointer
=	O
mbox	pointer
->	O
data	pointer
;	O
int	O
status	int
;	O
status	int
=	O
pop_get_user	function
(	O
auth	pointer
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
status	int
=	O
mu_pop3_user	function
(	O
mpd	pointer
->	O
pop3	pointer
,	O
mpd	pointer
->	O
user	pointer
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
{	O
status	int
=	O
pop_get_passwd	function
(	O
auth	pointer
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
{	O
status	int
=	O
mu_pop3_pass	function
(	O
mpd	pointer
->	O
pop3	pointer
,	O
mu_secret_password	function
(	O
mpd	pointer
->	O
secret	pointer
)	O
)	O
;	O
mu_secret_password_unref	function
(	O
mpd	pointer
->	O
secret	pointer
)	O
;	O
mu_secret_unref	function
(	O
mpd	pointer
->	O
secret	pointer
)	O
;	O
mpd	pointer
->	O
secret	pointer
=	O
NULL	O
;	O
}	O
}	O
free	function
(	O
mpd	pointer
->	O
user	pointer
)	O
;	O
mpd	pointer
->	O
user	pointer
=	O
NULL	O
;	O
return	O
status	int
;	O
}	O
