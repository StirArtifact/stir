void	O
mpz_powm	O
(	O
mpz_ptr	pointer
r	pointer
,	O
mpz_srcptr	pointer
b	int
,	O
mpz_srcptr	pointer
e	pointer
,	O
mpz_srcptr	pointer
m	pointer
)	O
{	O
mp_size_t	long
n	long
,	O
nodd	long
,	O
ncnt	long
;	O
int	O
cnt	int
;	O
mp_ptr	pointer
rp	pointer
,	O
tp	pointer
;	O
mp_srcptr	pointer
bp	pointer
,	O
ep	pointer
,	O
mp	pointer
;	O
mp_size_t	long
rn	long
,	O
bn	long
,	O
es	long
,	O
en	long
,	O
itch	long
;	O
mpz_t	array
new_b	array
;	O
TMP_DECL	O
;	O
n	long
=	O
ABSIZ	O
(	O
m	pointer
)	O
;	O
if	O
(	O
UNLIKELY	O
(	O
n	long
==	O
0	int
)	O
)	O
DIVIDE_BY_ZERO	O
;	O
mp	pointer
=	O
PTR	O
(	O
m	pointer
)	O
;	O
TMP_MARK	O
;	O
es	long
=	O
SIZ	O
(	O
e	pointer
)	O
;	O
if	O
(	O
UNLIKELY	O
(	O
es	long
<=	O
0	int
)	O
)	O
{	O
if	O
(	O
es	long
==	O
0	int
)	O
{	O
SIZ	O
(	O
r	pointer
)	O
=	O
n	long
!=	O
1	int
||	O
mp	pointer
[	O
0	int
]	O
!=	O
1	int
;	O
PTR	O
(	O
r	pointer
)	O
[	O
0	int
]	O
=	O
1	int
;	O
TMP_FREE	O
;	O
return	O
;	O
}	O
MPZ_TMP_INIT	O
(	O
new_b	array
,	O
n	long
+	O
1	int
)	O
;	O
if	O
(	O
UNLIKELY	O
(	O
!	O
mpz_invert	O
(	O
new_b	array
,	O
b	int
,	O
m	pointer
)	O
)	O
)	O
DIVIDE_BY_ZERO	O
;	O
b	int
=	O
new_b	array
;	O
es	long
=	O
-	O
es	long
;	O
}	O
en	long
=	O
es	long
;	O
bn	long
=	O
ABSIZ	O
(	O
b	int
)	O
;	O
if	O
(	O
UNLIKELY	O
(	O
bn	long
==	O
0	int
)	O
)	O
{	O
SIZ	O
(	O
r	pointer
)	O
=	O
0	int
;	O
TMP_FREE	O
;	O
return	O
;	O
}	O
ep	pointer
=	O
PTR	O
(	O
e	pointer
)	O
;	O
if	O
(	O
UNLIKELY	O
(	O
en	long
==	O
1	int
&&	O
ep	pointer
[	O
0	int
]	O
==	O
1	int
)	O
)	O
{	O
rp	pointer
=	O
TMP_ALLOC_LIMBS	O
(	O
n	long
)	O
;	O
bp	pointer
=	O
PTR	O
(	O
b	int
)	O
;	O
if	O
(	O
bn	long
>=	O
n	long
)	O
{	O
mp_ptr	pointer
qp	pointer
=	O
TMP_ALLOC_LIMBS	O
(	O
bn	long
-	O
n	long
+	O
1	int
)	O
;	O
mpn_tdiv_qr	O
(	O
qp	pointer
,	O
rp	pointer
,	O
0L	int
,	O
bp	pointer
,	O
bn	long
,	O
mp	pointer
,	O
n	long
)	O
;	O
rn	long
=	O
n	long
;	O
MPN_NORMALIZE	O
(	O
rp	pointer
,	O
rn	long
)	O
;	O
if	O
(	O
SIZ	O
(	O
b	int
)	O
<	O
0	int
&&	O
rn	long
!=	O
0	int
)	O
{	O
mpn_sub	O
(	O
rp	pointer
,	O
mp	pointer
,	O
n	long
,	O
rp	pointer
,	O
rn	long
)	O
;	O
rn	long
=	O
n	long
;	O
MPN_NORMALIZE	O
(	O
rp	pointer
,	O
rn	long
)	O
;	O
}	O
}	O
else	O
{	O
if	O
(	O
SIZ	O
(	O
b	int
)	O
<	O
0	int
)	O
{	O
mpn_sub	O
(	O
rp	pointer
,	O
mp	pointer
,	O
n	long
,	O
bp	pointer
,	O
bn	long
)	O
;	O
rn	long
=	O
n	long
;	O
rn	long
-=	O
(	O
rp	pointer
[	O
rn	long
-	O
1	int
]	O
==	O
0	int
)	O
;	O
}	O
else	O
{	O
MPN_COPY	O
(	O
rp	pointer
,	O
bp	pointer
,	O
bn	long
)	O
;	O
rn	long
=	O
bn	long
;	O
}	O
}	O
goto	O
ret	O
;	O
}	O
ncnt	long
=	O
0	int
;	O
while	O
(	O
UNLIKELY	O
(	O
mp	pointer
[	O
0	int
]	O
==	O
0	int
)	O
)	O
{	O
mp	pointer
++	O
;	O
ncnt	long
++	O
;	O
}	O
nodd	long
=	O
n	long
-	O
ncnt	long
;	O
cnt	int
=	O
0	int
;	O
if	O
(	O
mp	pointer
[	O
0	int
]	O
%	O
2	int
==	O
0	int
)	O
{	O
mp_ptr	pointer
newmp	pointer
=	O
TMP_ALLOC_LIMBS	O
(	O
nodd	long
)	O
;	O
count_trailing_zeros	O
(	O
cnt	int
,	O
mp	pointer
[	O
0	int
]	O
)	O
;	O
mpn_rshift	O
(	O
newmp	pointer
,	O
mp	pointer
,	O
nodd	long
,	O
cnt	int
)	O
;	O
nodd	long
-=	O
newmp	pointer
[	O
nodd	long
-	O
1	int
]	O
==	O
0	int
;	O
mp	pointer
=	O
newmp	pointer
;	O
ncnt	long
++	O
;	O
}	O
if	O
(	O
ncnt	long
!=	O
0	int
)	O
{	O
mp_size_t	long
n_largest_binvert	long
=	O
MAX	O
(	O
ncnt	long
,	O
nodd	long
)	O
;	O
mp_size_t	long
itch_binvert	long
=	O
mpn_binvert_itch	O
(	O
n_largest_binvert	long
)	O
;	O
itch	long
=	O
3	int
*	O
n	long
+	O
MAX	O
(	O
itch_binvert	long
,	O
2	int
*	O
n	long
)	O
;	O
}	O
else	O
{	O
mp_size_t	long
itch_binvert	long
=	O
mpn_binvert_itch	O
(	O
nodd	long
)	O
;	O
itch	long
=	O
n	long
+	O
MAX	O
(	O
itch_binvert	long
,	O
2	int
*	O
n	long
)	O
;	O
}	O
tp	pointer
=	O
TMP_ALLOC_LIMBS	O
(	O
itch	long
)	O
;	O
rp	pointer
=	O
tp	pointer
;	O
tp	pointer
+=	O
n	long
;	O
bp	pointer
=	O
PTR	O
(	O
b	int
)	O
;	O
mpn_powm	O
(	O
rp	pointer
,	O
bp	pointer
,	O
bn	long
,	O
ep	pointer
,	O
en	long
,	O
mp	pointer
,	O
nodd	long
,	O
tp	pointer
)	O
;	O
rn	long
=	O
n	long
;	O
if	O
(	O
ncnt	long
!=	O
0	int
)	O
{	O
mp_ptr	pointer
r2	pointer
,	O
xp	pointer
,	O
yp	pointer
,	O
odd_inv_2exp	pointer
;	O
unsigned	O
long	O
t	long
;	O
int	O
bcnt	int
;	O
if	O
(	O
bn	long
<	O
ncnt	long
)	O
{	O
mp_ptr	pointer
newbp	pointer
=	O
TMP_ALLOC_LIMBS	O
(	O
ncnt	long
)	O
;	O
MPN_COPY	O
(	O
newbp	pointer
,	O
bp	pointer
,	O
bn	long
)	O
;	O
MPN_ZERO	O
(	O
newbp	pointer
+	O
bn	long
,	O
ncnt	long
-	O
bn	long
)	O
;	O
bp	pointer
=	O
newbp	pointer
;	O
}	O
r2	pointer
=	O
tp	pointer
;	O
if	O
(	O
bp	pointer
[	O
0	int
]	O
%	O
2	int
==	O
0	int
)	O
{	O
if	O
(	O
en	long
>	O
1	int
)	O
{	O
MPN_ZERO	O
(	O
r2	pointer
,	O
ncnt	long
)	O
;	O
goto	O
zero	O
;	O
}	O
ASSERT	O
(	O
en	long
==	O
1	int
)	O
;	O
t	long
=	O
(	O
ncnt	long
-	O
(	O
cnt	int
!=	O
0	int
)	O
)	O
*	O
GMP_NUMB_BITS	O
+	O
cnt	int
;	O
bcnt	int
=	O
(	O
0x1213	int
>>	O
(	O
(	O
bp	pointer
[	O
0	int
]	O
&	O
7	int
)	O
<<	O
1	int
)	O
)	O
&	O
0x3	int
;	O
if	O
(	O
ep	pointer
[	O
0	int
]	O
*	O
bcnt	int
>=	O
t	long
)	O
{	O
MPN_ZERO	O
(	O
r2	pointer
,	O
ncnt	long
)	O
;	O
goto	O
zero	O
;	O
}	O
}	O
mpn_powlo	O
(	O
r2	pointer
,	O
bp	pointer
,	O
ep	pointer
,	O
en	long
,	O
ncnt	long
,	O
tp	pointer
+	O
ncnt	long
)	O
;	O
zero	O
:	O
if	O
(	O
nodd	long
<	O
ncnt	long
)	O
{	O
mp_ptr	pointer
newmp	pointer
=	O
TMP_ALLOC_LIMBS	O
(	O
ncnt	long
)	O
;	O
MPN_COPY	O
(	O
newmp	pointer
,	O
mp	pointer
,	O
nodd	long
)	O
;	O
MPN_ZERO	O
(	O
newmp	pointer
+	O
nodd	long
,	O
ncnt	long
-	O
nodd	long
)	O
;	O
mp	pointer
=	O
newmp	pointer
;	O
}	O
odd_inv_2exp	pointer
=	O
tp	pointer
+	O
n	long
;	O
mpn_binvert	O
(	O
odd_inv_2exp	pointer
,	O
mp	pointer
,	O
ncnt	long
,	O
tp	pointer
+	O
2	int
*	O
n	long
)	O
;	O
mpn_sub	O
(	O
r2	pointer
,	O
r2	pointer
,	O
ncnt	long
,	O
rp	pointer
,	O
nodd	long
>	O
ncnt	long
?	O
ncnt	long
:	O
nodd	long
)	O
;	O
xp	pointer
=	O
tp	pointer
+	O
2	int
*	O
n	long
;	O
mpn_mullo_n	O
(	O
xp	pointer
,	O
odd_inv_2exp	pointer
,	O
r2	pointer
,	O
ncnt	long
)	O
;	O
if	O
(	O
cnt	int
!=	O
0	int
)	O
xp	pointer
[	O
ncnt	long
-	O
1	int
]	O
&=	O
(	O
CNST_LIMB	O
(	O
1	int
)	O
<<	O
cnt	int
)	O
-	O
1	int
;	O
yp	pointer
=	O
tp	pointer
;	O
if	O
(	O
ncnt	long
>	O
nodd	long
)	O
mpn_mul	O
(	O
yp	pointer
,	O
xp	pointer
,	O
ncnt	long
,	O
mp	pointer
,	O
nodd	long
)	O
;	O
else	O
mpn_mul	O
(	O
yp	pointer
,	O
mp	pointer
,	O
nodd	long
,	O
xp	pointer
,	O
ncnt	long
)	O
;	O
mpn_add	O
(	O
rp	pointer
,	O
yp	pointer
,	O
n	long
,	O
rp	pointer
,	O
nodd	long
)	O
;	O
ASSERT	O
(	O
nodd	long
+	O
ncnt	long
>=	O
n	long
)	O
;	O
ASSERT	O
(	O
nodd	long
+	O
ncnt	long
<=	O
n	long
+	O
1	int
)	O
;	O
}	O
MPN_NORMALIZE	O
(	O
rp	pointer
,	O
rn	long
)	O
;	O
if	O
(	O
(	O
ep	pointer
[	O
0	int
]	O
&	O
1	int
)	O
&&	O
SIZ	O
(	O
b	int
)	O
<	O
0	int
&&	O
rn	long
!=	O
0	int
)	O
{	O
mpn_sub	O
(	O
rp	pointer
,	O
PTR	O
(	O
m	pointer
)	O
,	O
n	long
,	O
rp	pointer
,	O
rn	long
)	O
;	O
rn	long
=	O
n	long
;	O
MPN_NORMALIZE	O
(	O
rp	pointer
,	O
rn	long
)	O
;	O
}	O
ret	O
:	O
MPZ_REALLOC	O
(	O
r	pointer
,	O
rn	long
)	O
;	O
SIZ	O
(	O
r	pointer
)	O
=	O
rn	long
;	O
MPN_COPY	O
(	O
PTR	O
(	O
r	pointer
)	O
,	O
rp	pointer
,	O
rn	long
)	O
;	O
TMP_FREE	O
;	O
}	O
