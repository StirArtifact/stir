mp_limb_t	long
mpn_mu_div_q	O
(	O
mp_ptr	pointer
qp	pointer
,	O
mp_srcptr	pointer
np	pointer
,	O
mp_size_t	long
nn	long
,	O
mp_srcptr	pointer
dp	pointer
,	O
mp_size_t	long
dn	long
,	O
mp_ptr	pointer
scratch	pointer
)	O
{	O
mp_ptr	pointer
tp	pointer
,	O
rp	pointer
,	O
ip	pointer
,	O
this_ip	pointer
;	O
mp_size_t	long
qn	long
,	O
in	long
,	O
this_in	long
;	O
mp_limb_t	long
cy	long
,	O
qh	long
;	O
TMP_DECL	O
;	O
TMP_MARK	O
;	O
qn	long
=	O
nn	long
-	O
dn	long
;	O
tp	pointer
=	O
TMP_BALLOC_LIMBS	O
(	O
qn	long
+	O
1	int
)	O
;	O
if	O
(	O
qn	long
>=	O
dn	long
)	O
{	O
if	O
(	O
dn	long
!=	O
qn	long
)	O
{	O
mp_size_t	long
in1	long
,	O
in2	long
;	O
in1	long
=	O
mpn_mu_div_qr_choose_in	O
(	O
qn	long
-	O
dn	long
,	O
dn	long
,	O
0	int
)	O
;	O
in2	long
=	O
mpn_mu_divappr_q_choose_in	O
(	O
dn	long
+	O
1	int
,	O
dn	long
,	O
0	int
)	O
;	O
in	long
=	O
MAX	O
(	O
in1	long
,	O
in2	long
)	O
;	O
}	O
else	O
{	O
in	long
=	O
mpn_mu_divappr_q_choose_in	O
(	O
dn	long
+	O
1	int
,	O
dn	long
,	O
0	int
)	O
;	O
}	O
ip	pointer
=	O
TMP_BALLOC_LIMBS	O
(	O
in	long
+	O
1	int
)	O
;	O
if	O
(	O
dn	long
==	O
in	long
)	O
{	O
MPN_COPY	O
(	O
scratch	pointer
+	O
1	int
,	O
dp	pointer
,	O
in	long
)	O
;	O
scratch	pointer
[	O
0	int
]	O
=	O
1	int
;	O
mpn_invertappr	O
(	O
ip	pointer
,	O
scratch	pointer
,	O
in	long
+	O
1	int
,	O
NULL	O
)	O
;	O
MPN_COPY_INCR	O
(	O
ip	pointer
,	O
ip	pointer
+	O
1	int
,	O
in	long
)	O
;	O
}	O
else	O
{	O
cy	long
=	O
mpn_add_1	O
(	O
scratch	pointer
,	O
dp	pointer
+	O
dn	long
-	O
(	O
in	long
+	O
1	int
)	O
,	O
in	long
+	O
1	int
,	O
1	int
)	O
;	O
if	O
(	O
UNLIKELY	O
(	O
cy	long
!=	O
0	int
)	O
)	O
MPN_ZERO	O
(	O
ip	pointer
,	O
in	long
)	O
;	O
else	O
{	O
mpn_invertappr	O
(	O
ip	pointer
,	O
scratch	pointer
,	O
in	long
+	O
1	int
,	O
NULL	O
)	O
;	O
MPN_COPY_INCR	O
(	O
ip	pointer
,	O
ip	pointer
+	O
1	int
,	O
in	long
)	O
;	O
}	O
}	O
rp	pointer
=	O
TMP_BALLOC_LIMBS	O
(	O
2	int
*	O
dn	long
+	O
1	int
)	O
;	O
this_in	long
=	O
mpn_mu_div_qr_choose_in	O
(	O
qn	long
-	O
dn	long
,	O
dn	long
,	O
0	int
)	O
;	O
this_ip	pointer
=	O
ip	pointer
+	O
in	long
-	O
this_in	long
;	O
qh	long
=	O
mpn_preinv_mu_div_qr	O
(	O
tp	pointer
+	O
dn	long
+	O
1	int
,	O
rp	pointer
+	O
dn	long
+	O
1	int
,	O
np	pointer
+	O
dn	long
,	O
qn	long
,	O
dp	pointer
,	O
dn	long
,	O
this_ip	pointer
,	O
this_in	long
,	O
scratch	pointer
)	O
;	O
MPN_COPY	O
(	O
rp	pointer
+	O
1	int
,	O
np	pointer
,	O
dn	long
)	O
;	O
rp	pointer
[	O
0	int
]	O
=	O
0	int
;	O
this_in	long
=	O
mpn_mu_divappr_q_choose_in	O
(	O
dn	long
+	O
1	int
,	O
dn	long
,	O
0	int
)	O
;	O
this_ip	pointer
=	O
ip	pointer
+	O
in	long
-	O
this_in	long
;	O
cy	long
=	O
mpn_preinv_mu_divappr_q	O
(	O
tp	pointer
,	O
rp	pointer
,	O
2	int
*	O
dn	long
+	O
1	int
,	O
dp	pointer
,	O
dn	long
,	O
this_ip	pointer
,	O
this_in	long
,	O
scratch	pointer
)	O
;	O
if	O
(	O
UNLIKELY	O
(	O
cy	long
!=	O
0	int
)	O
)	O
{	O
mp_size_t	long
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
dn	long
+	O
1	int
;	O
i	long
++	O
)	O
tp	pointer
[	O
i	long
]	O
=	O
GMP_NUMB_MAX	O
;	O
}	O
if	O
(	O
tp	pointer
[	O
0	int
]	O
>	O
4	int
)	O
{	O
MPN_COPY	O
(	O
qp	pointer
,	O
tp	pointer
+	O
1	int
,	O
qn	long
)	O
;	O
}	O
else	O
{	O
mp_limb_t	long
cy	long
;	O
mp_ptr	pointer
pp	pointer
;	O
pp	pointer
=	O
TMP_BALLOC_LIMBS	O
(	O
nn	long
)	O
;	O
mpn_mul	O
(	O
pp	pointer
,	O
tp	pointer
+	O
1	int
,	O
qn	long
,	O
dp	pointer
,	O
dn	long
)	O
;	O
cy	long
=	O
(	O
qh	long
!=	O
0	int
)	O
?	O
mpn_add_n	O
(	O
pp	pointer
+	O
qn	long
,	O
pp	pointer
+	O
qn	long
,	O
dp	pointer
,	O
dn	long
)	O
:	O
0	int
;	O
if	O
(	O
cy	long
||	O
mpn_cmp	O
(	O
pp	pointer
,	O
np	pointer
,	O
nn	long
)	O
>	O
0	int
)	O
qh	long
-=	O
mpn_sub_1	O
(	O
qp	pointer
,	O
tp	pointer
+	O
1	int
,	O
qn	long
,	O
1	int
)	O
;	O
else	O
MPN_COPY	O
(	O
qp	pointer
,	O
tp	pointer
+	O
1	int
,	O
qn	long
)	O
;	O
}	O
}	O
else	O
{	O
qh	long
=	O
mpn_mu_divappr_q	O
(	O
tp	pointer
,	O
np	pointer
+	O
nn	long
-	O
(	O
2	int
*	O
qn	long
+	O
2	int
)	O
,	O
2	int
*	O
qn	long
+	O
2	int
,	O
dp	pointer
+	O
dn	long
-	O
(	O
qn	long
+	O
1	int
)	O
,	O
qn	long
+	O
1	int
,	O
scratch	pointer
)	O
;	O
if	O
(	O
tp	pointer
[	O
0	int
]	O
>	O
6	int
)	O
{	O
MPN_COPY	O
(	O
qp	pointer
,	O
tp	pointer
+	O
1	int
,	O
qn	long
)	O
;	O
}	O
else	O
{	O
mp_limb_t	long
cy	long
;	O
rp	pointer
=	O
TMP_BALLOC_LIMBS	O
(	O
nn	long
)	O
;	O
mpn_mul	O
(	O
rp	pointer
,	O
dp	pointer
,	O
dn	long
,	O
tp	pointer
+	O
1	int
,	O
qn	long
)	O
;	O
cy	long
=	O
(	O
qh	long
!=	O
0	int
)	O
?	O
mpn_add_n	O
(	O
rp	pointer
+	O
qn	long
,	O
rp	pointer
+	O
qn	long
,	O
dp	pointer
,	O
dn	long
)	O
:	O
0	int
;	O
if	O
(	O
cy	long
||	O
mpn_cmp	O
(	O
rp	pointer
,	O
np	pointer
,	O
nn	long
)	O
>	O
0	int
)	O
qh	long
-=	O
mpn_sub_1	O
(	O
qp	pointer
,	O
tp	pointer
+	O
1	int
,	O
qn	long
,	O
1	int
)	O
;	O
else	O
MPN_COPY	O
(	O
qp	pointer
,	O
tp	pointer
+	O
1	int
,	O
qn	long
)	O
;	O
}	O
}	O
TMP_FREE	O
;	O
return	O
qh	long
;	O
}	O
mp_size_t	long
mpn_mu_div_q_itch	O
(	O
mp_size_t	long
nn	long
,	O
mp_size_t	long
dn	long
,	O
int	O
mua_k	int
)	O
{	O
mp_size_t	long
qn	long
,	O
itch1	long
,	O
itch2	long
;	O
qn	long
=	O
nn	long
-	O
dn	long
;	O
if	O
(	O
qn	long
>=	O
dn	long
)	O
{	O
itch1	long
=	O
mpn_mu_div_qr_itch	O
(	O
qn	long
,	O
dn	long
,	O
mua_k	int
)	O
;	O
itch2	long
=	O
mpn_mu_divappr_q_itch	O
(	O
2	int
*	O
dn	long
+	O
1	int
,	O
dn	long
,	O
mua_k	int
)	O
;	O
return	O
MAX	O
(	O
itch1	long
,	O
itch2	long
)	O
;	O
}	O
else	O
{	O
itch1	long
=	O
mpn_mu_divappr_q_itch	O
(	O
2	int
*	O
qn	long
+	O
2	int
,	O
qn	long
+	O
1	int
,	O
mua_k	int
)	O
;	O
return	O
itch1	long
;	O
}	O
}	O
