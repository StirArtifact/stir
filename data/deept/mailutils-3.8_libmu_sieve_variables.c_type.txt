struct	O
sieve_variable	struct
{	O
char	O
*	O
value	pointer
;	O
}	O
;	O
char	O
*	O
mod_lower	function
(	O
mu_sieve_machine_t	pointer
mach	pointer
,	O
char	O
const	O
*	O
value	pointer
)	O
{	O
char	O
*	O
newval	pointer
=	O
mu_sieve_malloc	function
(	O
mach	pointer
,	O
strlen	function
(	O
value	pointer
)	O
+	O
1	int
)	O
;	O
char	O
*	O
p	pointer
;	O
for	O
(	O
p	pointer
=	O
newval	pointer
;	O
*	O
value	pointer
;	O
p	pointer
++	O
,	O
value	pointer
++	O
)	O
*	O
p	pointer
=	O
tolower	function
(	O
*	O
value	pointer
)	O
;	O
*	O
p	pointer
=	O
0	int
;	O
return	O
newval	pointer
;	O
}	O
char	O
*	O
mod_upper	function
(	O
mu_sieve_machine_t	pointer
mach	pointer
,	O
char	O
const	O
*	O
value	pointer
)	O
{	O
char	O
*	O
newval	pointer
=	O
mu_sieve_malloc	function
(	O
mach	pointer
,	O
strlen	function
(	O
value	pointer
)	O
+	O
1	int
)	O
;	O
char	O
*	O
p	pointer
;	O
for	O
(	O
p	pointer
=	O
newval	pointer
;	O
*	O
value	pointer
;	O
p	pointer
++	O
,	O
value	pointer
++	O
)	O
*	O
p	pointer
=	O
toupper	function
(	O
*	O
value	pointer
)	O
;	O
*	O
p	pointer
=	O
0	int
;	O
return	O
newval	pointer
;	O
}	O
char	O
*	O
mod_lowerfirst	function
(	O
mu_sieve_machine_t	pointer
mach	pointer
,	O
char	O
const	O
*	O
value	pointer
)	O
{	O
char	O
*	O
newval	pointer
=	O
mu_sieve_strdup	function
(	O
mach	pointer
,	O
value	pointer
)	O
;	O
*	O
newval	pointer
=	O
tolower	function
(	O
*	O
newval	pointer
)	O
;	O
return	O
newval	pointer
;	O
}	O
char	O
*	O
mod_upperfirst	function
(	O
mu_sieve_machine_t	pointer
mach	pointer
,	O
char	O
const	O
*	O
value	pointer
)	O
{	O
char	O
*	O
newval	pointer
=	O
mu_sieve_strdup	function
(	O
mach	pointer
,	O
value	pointer
)	O
;	O
*	O
newval	pointer
=	O
toupper	function
(	O
*	O
newval	pointer
)	O
;	O
return	O
newval	pointer
;	O
}	O
char	O
*	O
mod_quotewildcard	function
(	O
mu_sieve_machine_t	pointer
mach	pointer
,	O
char	O
const	O
*	O
value	pointer
)	O
{	O
size_t	long
len	long
;	O
char	O
*	O
newval	pointer
;	O
char	O
const	O
*	O
p	pointer
;	O
char	O
*	O
q	pointer
;	O
len	long
=	O
0	int
;	O
for	O
(	O
p	pointer
=	O
value	pointer
;	O
*	O
p	pointer
;	O
p	pointer
++	O
)	O
{	O
switch	O
(	O
*	O
p	pointer
)	O
{	O
case	O
'*'	O
:	O
case	O
'?'	O
:	O
case	O
'\\'	O
:	O
len	long
+=	O
2	int
;	O
break	O
;	O
default	O
:	O
len	long
++	O
;	O
}	O
}	O
newval	pointer
=	O
mu_sieve_malloc	function
(	O
mach	pointer
,	O
len	long
+	O
1	int
)	O
;	O
for	O
(	O
p	pointer
=	O
value	pointer
,	O
q	pointer
=	O
newval	pointer
;	O
*	O
p	pointer
;	O
)	O
{	O
switch	O
(	O
*	O
p	pointer
)	O
{	O
case	O
'*'	O
:	O
case	O
'?'	O
:	O
case	O
'\\'	O
:	O
*	O
q	pointer
++	O
=	O
'\\'	O
;	O
}	O
*	O
q	pointer
++	O
=	O
*	O
p	pointer
++	O
;	O
}	O
*	O
q	pointer
=	O
0	int
;	O
return	O
newval	pointer
;	O
}	O
char	O
*	O
mod_length	function
(	O
mu_sieve_machine_t	pointer
mach	pointer
,	O
char	O
const	O
*	O
value	pointer
)	O
{	O
char	O
*	O
newval	pointer
,	O
*	O
p	pointer
;	O
int	O
rc	int
=	O
mu_asprintf	function
(	O
&	O
newval	pointer
,	O
"%zu"	pointer
,	O
strlen	function
(	O
value	pointer
)	O
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_diag_funcall	function
(	O
MU_DIAG_ERROR	O
,	O
"mu_asprintf"	pointer
,	O
NULL	O
,	O
rc	int
)	O
;	O
mu_sieve_abort	function
(	O
mach	pointer
)	O
;	O
}	O
p	pointer
=	O
mu_sieve_strdup	function
(	O
mach	pointer
,	O
newval	pointer
)	O
;	O
free	function
(	O
newval	pointer
)	O
;	O
return	O
p	pointer
;	O
}	O
static	O
mu_sieve_tag_def_t	struct
set_tags	array
[	O
]	O
=	O
{	O
{	O
"lower"	pointer
,	O
SVT_VOID	int
}	O
,	O
{	O
"upper"	pointer
,	O
SVT_VOID	int
}	O
,	O
{	O
"lowerfirst"	pointer
,	O
SVT_VOID	int
}	O
,	O
{	O
"upperfirst"	pointer
,	O
SVT_VOID	int
}	O
,	O
{	O
"quotewildcard"	pointer
,	O
SVT_VOID	int
}	O
,	O
{	O
"length"	pointer
,	O
SVT_VOID	int
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
struct	O
modprec	struct
{	O
char	O
*	O
name	pointer
;	O
unsigned	O
prec	pointer
;	O
char	O
*	O
(	O
*	O
modify	pointer
)	O
(	O
mu_sieve_machine_t	pointer
mach	pointer
,	O
char	O
const	O
*	O
value	pointer
)	O
;	O
}	O
;	O
static	O
struct	O
modprec	struct
modprec	struct
[	O
]	O
=	O
{	O
{	O
"lower"	pointer
,	O
40	int
,	O
mod_lower	function
}	O
,	O
{	O
"upper"	pointer
,	O
40	int
,	O
mod_upper	function
}	O
,	O
{	O
"lowerfirst"	pointer
,	O
30	int
,	O
mod_lowerfirst	function
}	O
,	O
{	O
"upperfirst"	pointer
,	O
30	int
,	O
mod_upperfirst	function
}	O
,	O
{	O
"quotewildcard"	pointer
,	O
20	int
,	O
mod_quotewildcard	function
}	O
,	O
{	O
"length"	pointer
,	O
10	int
,	O
mod_length	function
}	O
,	O
}	O
;	O
static	O
struct	O
modprec	struct
*	O
findprec	function
(	O
char	O
const	O
*	O
name	pointer
)	O
{	O
int	O
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
MU_ARRAY_SIZE	O
(	O
modprec	struct
)	O
;	O
i	long
++	O
)	O
if	O
(	O
strcmp	function
(	O
modprec	struct
[	O
i	long
]	O
.	O
name	pointer
,	O
name	pointer
)	O
==	O
0	int
)	O
return	O
&	O
modprec	struct
[	O
i	long
]	O
;	O
mu_error	function
(	O
_	O
(	O
"%s:%d: INTERNAL ERROR, please report"	pointer
)	O
,	O
__FILE__	O
,	O
__LINE__	O
)	O
;	O
abort	function
(	O
)	O
;	O
}	O
static	O
void	O
variable_set	function
(	O
mu_sieve_machine_t	pointer
mach	pointer
,	O
char	O
const	O
*	O
name	pointer
,	O
char	O
*	O
value	pointer
)	O
{	O
struct	O
sieve_variable	struct
*	O
var	pointer
,	O
*	O
*	O
vptr	pointer
;	O
int	O
rc	int
;	O
rc	int
=	O
mu_assoc_install_ref	function
(	O
mach	pointer
->	O
vartab	pointer
,	O
name	pointer
,	O
&	O
vptr	pointer
)	O
;	O
switch	O
(	O
rc	int
)	O
{	O
case	O
0	int
:	O
var	pointer
=	O
malloc	function
(	O
sizeof	O
(	O
*	O
var	pointer
)	O
)	O
;	O
if	O
(	O
!	O
var	pointer
)	O
{	O
mu_sieve_error	function
(	O
mach	pointer
,	O
"variable_set: %s"	pointer
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
mu_sieve_abort	function
(	O
mach	pointer
)	O
;	O
}	O
*	O
vptr	pointer
=	O
var	pointer
;	O
break	O
;	O
case	O
MU_ERR_EXISTS	O
:	O
var	pointer
=	O
*	O
vptr	pointer
;	O
mu_sieve_free	function
(	O
mach	pointer
,	O
var	pointer
->	O
value	pointer
)	O
;	O
break	O
;	O
default	O
:	O
mu_sieve_error	function
(	O
mach	pointer
,	O
"variable_set: %s"	pointer
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
mu_sieve_abort	function
(	O
mach	pointer
)	O
;	O
}	O
var	pointer
->	O
value	pointer
=	O
value	pointer
;	O
}	O
static	O
int	O
sieve_action_set	function
(	O
mu_sieve_machine_t	pointer
mach	pointer
)	O
{	O
size_t	long
i	long
;	O
char	O
*	O
name	pointer
;	O
char	O
*	O
value	pointer
;	O
mu_sieve_get_arg	function
(	O
mach	pointer
,	O
0	int
,	O
SVT_STRING	int
,	O
&	O
name	pointer
)	O
;	O
mu_sieve_get_arg	function
(	O
mach	pointer
,	O
1	int
,	O
SVT_STRING	int
,	O
&	O
value	pointer
)	O
;	O
value	pointer
=	O
mu_sieve_strdup	function
(	O
mach	pointer
,	O
value	pointer
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
mach	pointer
->	O
tagcount	long
;	O
i	long
++	O
)	O
{	O
mu_sieve_value_t	struct
*	O
p	pointer
=	O
mu_sieve_get_tag_n	function
(	O
mach	pointer
,	O
i	long
)	O
;	O
char	O
*	O
str	pointer
=	O
findprec	function
(	O
p	pointer
->	O
tag	pointer
)	O
->	O
modify	pointer
(	O
mach	pointer
,	O
value	pointer
)	O
;	O
mu_sieve_free	function
(	O
mach	pointer
,	O
value	pointer
)	O
;	O
value	pointer
=	O
str	pointer
;	O
}	O
variable_set	function
(	O
mach	pointer
,	O
name	pointer
,	O
value	pointer
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
varini_append	function
(	O
mu_sieve_machine_t	pointer
mach	pointer
,	O
struct	O
mu_sieve_variable_initializer	struct
*	O
vini	pointer
)	O
{	O
if	O
(	O
!	O
mu_sieve_has_variables	function
(	O
mach	pointer
)	O
)	O
return	O
EINVAL	int
;	O
if	O
(	O
!	O
mach	pointer
->	O
init_var	pointer
)	O
{	O
mu_list_create	function
(	O
&	O
mach	pointer
->	O
init_var	pointer
)	O
;	O
mu_list_set_destroy_item	function
(	O
mach	pointer
->	O
init_var	pointer
,	O
mu_list_free_item	function
)	O
;	O
}	O
return	O
mu_list_append	function
(	O
mach	pointer
->	O
init_var	pointer
,	O
vini	pointer
)	O
;	O
}	O
static	O
struct	O
mu_sieve_variable_initializer	struct
*	O
varini_alloc	function
(	O
const	O
char	O
*	O
name	pointer
,	O
const	O
char	O
*	O
value	pointer
)	O
{	O
struct	O
mu_sieve_variable_initializer	struct
*	O
vini	pointer
;	O
size_t	long
namelen	long
;	O
namelen	long
=	O
strlen	function
(	O
name	pointer
)	O
;	O
vini	pointer
=	O
malloc	function
(	O
sizeof	O
(	O
*	O
vini	pointer
)	O
+	O
namelen	long
+	O
strlen	function
(	O
value	pointer
)	O
+	O
2	int
)	O
;	O
if	O
(	O
vini	pointer
)	O
{	O
char	O
*	O
p	pointer
=	O
(	O
char	O
*	O
)	O
(	O
vini	pointer
+	O
1	int
)	O
;	O
vini	pointer
->	O
name	pointer
=	O
p	pointer
;	O
vini	pointer
->	O
value	pointer
=	O
p	pointer
+	O
namelen	long
+	O
1	int
;	O
strcpy	function
(	O
vini	pointer
->	O
name	pointer
,	O
name	pointer
)	O
;	O
strcpy	function
(	O
vini	pointer
->	O
value	pointer
,	O
value	pointer
)	O
;	O
}	O
return	O
vini	pointer
;	O
}	O
int	O
mu_sieve_variable_initialize	function
(	O
mu_sieve_machine_t	pointer
mach	pointer
,	O
char	O
const	O
*	O
name	pointer
,	O
char	O
const	O
*	O
value	pointer
)	O
{	O
struct	O
mu_sieve_variable_initializer	struct
*	O
vini	pointer
;	O
int	O
rc	int
;	O
if	O
(	O
!	O
name	pointer
||	O
!	O
value	pointer
)	O
return	O
EINVAL	int
;	O
if	O
(	O
!	O
mu_sieve_has_variables	function
(	O
mach	pointer
)	O
)	O
return	O
EINVAL	int
;	O
vini	pointer
=	O
varini_alloc	function
(	O
name	pointer
,	O
value	pointer
)	O
;	O
if	O
(	O
!	O
vini	pointer
)	O
return	O
ENOMEM	int
;	O
rc	int
=	O
varini_append	function
(	O
mach	pointer
,	O
vini	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
free	function
(	O
vini	pointer
)	O
;	O
return	O
rc	int
;	O
}	O
static	O
int	O
set_tag_checker	function
(	O
mu_sieve_machine_t	pointer
mach	pointer
)	O
{	O
int	O
i	long
,	O
j	int
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<	O
mach	pointer
->	O
tagcount	long
;	O
i	long
++	O
)	O
{	O
mu_sieve_value_t	struct
tmp	struct
=	O
*	O
mu_sieve_get_tag_n	function
(	O
mach	pointer
,	O
i	long
)	O
;	O
int	O
tmp_prec	int
=	O
findprec	function
(	O
tmp	struct
.	O
tag	pointer
)	O
->	O
prec	pointer
;	O
for	O
(	O
j	int
=	O
i	long
-	O
1	int
;	O
j	int
>=	O
0	int
;	O
j	int
--	O
)	O
{	O
mu_sieve_value_t	struct
*	O
t	long
=	O
mu_sieve_get_tag_n	function
(	O
mach	pointer
,	O
j	int
)	O
;	O
int	O
prec	pointer
=	O
findprec	function
(	O
t	long
->	O
tag	pointer
)	O
->	O
prec	pointer
;	O
if	O
(	O
prec	pointer
<	O
tmp_prec	int
)	O
*	O
mu_sieve_get_tag_n	function
(	O
mach	pointer
,	O
j	int
+	O
1	int
)	O
=	O
*	O
t	long
;	O
else	O
if	O
(	O
prec	pointer
==	O
tmp_prec	int
)	O
{	O
mu_diag_at_locus_range	function
(	O
MU_LOG_ERROR	int
,	O
&	O
t	long
->	O
locus	struct
,	O
_	O
(	O
"%s and %s can't be used together"	pointer
)	O
,	O
tmp	struct
.	O
tag	pointer
,	O
t	long
->	O
tag	pointer
)	O
;	O
mu_diag_at_locus_range	function
(	O
MU_LOG_ERROR	int
,	O
&	O
tmp	struct
.	O
locus	struct
,	O
_	O
(	O
"%s encountered here"	pointer
)	O
,	O
tmp	struct
.	O
tag	pointer
)	O
;	O
mu_i_sv_error	function
(	O
mach	pointer
)	O
;	O
return	O
1	int
;	O
}	O
else	O
break	O
;	O
}	O
*	O
mu_sieve_get_tag_n	function
(	O
mach	pointer
,	O
j	int
+	O
1	int
)	O
=	O
tmp	struct
;	O
}	O
return	O
0	int
;	O
}	O
static	O
mu_sieve_tag_group_t	struct
set_tag_groups	array
[	O
]	O
=	O
{	O
{	O
set_tags	array
,	O
set_tag_checker	function
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
static	O
mu_sieve_data_type	enum
set_args	array
[	O
]	O
=	O
{	O
SVT_STRING	int
,	O
SVT_STRING	int
,	O
SVT_VOID	int
}	O
;	O
static	O
int	O
retrieve_string	function
(	O
void	O
*	O
item	pointer
,	O
void	O
*	O
data	pointer
,	O
size_t	long
idx	long
,	O
char	O
*	O
*	O
pval	pointer
)	O
{	O
if	O
(	O
idx	long
)	O
return	O
MU_ERR_NOENT	O
;	O
*	O
pval	pointer
=	O
strdup	function
(	O
(	O
char	O
*	O
)	O
item	pointer
)	O
;	O
if	O
(	O
!	O
*	O
pval	pointer
)	O
return	O
errno	O
;	O
return	O
0	int
;	O
}	O
int	O
fold_string	function
(	O
void	O
*	O
item	pointer
,	O
void	O
*	O
data	pointer
,	O
void	O
*	O
prev	pointer
,	O
void	O
*	O
*	O
ret	pointer
)	O
{	O
char	O
*	O
str	pointer
=	O
item	pointer
;	O
size_t	long
count	long
=	O
*	O
(	O
size_t	long
*	O
)	O
prev	pointer
;	O
if	O
(	O
*	O
str	pointer
)	O
++	O
count	long
;	O
*	O
(	O
size_t	long
*	O
)	O
ret	pointer
=	O
count	long
;	O
return	O
0	int
;	O
}	O
int	O
sieve_test_string	function
(	O
mu_sieve_machine_t	pointer
mach	pointer
)	O
{	O
mu_sieve_value_t	struct
*	O
source	pointer
,	O
*	O
key_list	pointer
;	O
source	pointer
=	O
mu_sieve_get_arg_untyped	function
(	O
mach	pointer
,	O
0	int
)	O
;	O
key_list	pointer
=	O
mu_sieve_get_arg_untyped	function
(	O
mach	pointer
,	O
1	int
)	O
;	O
return	O
mu_sieve_vlist_compare	function
(	O
mach	pointer
,	O
source	pointer
,	O
key_list	pointer
,	O
retrieve_string	function
,	O
fold_string	function
,	O
mach	pointer
)	O
;	O
}	O
static	O
mu_sieve_data_type	enum
string_args	array
[	O
]	O
=	O
{	O
SVT_STRING_LIST	int
,	O
SVT_STRING_LIST	int
,	O
SVT_VOID	int
}	O
;	O
static	O
mu_sieve_tag_group_t	struct
string_tag_groups	array
[	O
]	O
=	O
{	O
{	O
mu_sieve_match_part_tags	array
,	O
mu_sieve_match_part_checker	function
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
int	O
mu_i_sv_expand_variables	function
(	O
char	O
const	O
*	O
input	pointer
,	O
size_t	long
len	long
,	O
char	O
*	O
*	O
exp	pointer
,	O
void	O
*	O
data	pointer
)	O
{	O
mu_sieve_machine_t	pointer
mach	pointer
=	O
data	pointer
;	O
if	O
(	O
mu_isdigit	O
(	O
*	O
input	pointer
)	O
)	O
{	O
char	O
*	O
p	pointer
;	O
size_t	long
idx	long
=	O
0	int
;	O
while	O
(	O
len	long
)	O
{	O
if	O
(	O
mu_isdigit	O
(	O
*	O
input	pointer
)	O
)	O
{	O
int	O
d	int
=	O
*	O
input	pointer
-	O
'0'	O
;	O
idx	long
=	O
idx	long
*	O
10	int
+	O
d	int
;	O
input	pointer
++	O
;	O
len	long
--	O
;	O
}	O
else	O
return	O
1	int
;	O
}	O
if	O
(	O
idx	long
>	O
mach	pointer
->	O
match_count	long
)	O
{	O
*	O
exp	pointer
=	O
NULL	O
;	O
return	O
0	int
;	O
}	O
len	long
=	O
mach	pointer
->	O
match_buf	pointer
[	O
idx	long
]	O
.	O
rm_eo	int
-	O
mach	pointer
->	O
match_buf	pointer
[	O
idx	long
]	O
.	O
rm_so	int
;	O
p	pointer
=	O
malloc	function
(	O
len	long
+	O
1	int
)	O
;	O
if	O
(	O
!	O
p	pointer
)	O
{	O
mu_sieve_error	function
(	O
mach	pointer
,	O
"%s"	pointer
,	O
mu_strerror	function
(	O
errno	O
)	O
)	O
;	O
mu_sieve_abort	function
(	O
mach	pointer
)	O
;	O
}	O
memcpy	function
(	O
p	pointer
,	O
mach	pointer
->	O
match_string	pointer
+	O
mach	pointer
->	O
match_buf	pointer
[	O
idx	long
]	O
.	O
rm_so	int
,	O
len	long
)	O
;	O
p	pointer
[	O
len	long
]	O
=	O
0	int
;	O
*	O
exp	pointer
=	O
p	pointer
;	O
}	O
else	O
if	O
(	O
mu_isalpha	O
(	O
*	O
input	pointer
)	O
)	O
{	O
size_t	long
i	long
;	O
char	O
*	O
name	pointer
;	O
struct	O
sieve_variable	struct
*	O
var	pointer
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
len	long
;	O
i	long
++	O
)	O
if	O
(	O
!	O
(	O
mu_isalnum	O
(	O
input	pointer
[	O
i	long
]	O
)	O
||	O
input	pointer
[	O
i	long
]	O
==	O
'_'	O
)	O
)	O
return	O
1	int
;	O
name	pointer
=	O
malloc	function
(	O
len	long
+	O
1	int
)	O
;	O
if	O
(	O
!	O
name	pointer
)	O
{	O
mu_sieve_error	function
(	O
mach	pointer
,	O
"%s"	pointer
,	O
mu_strerror	function
(	O
errno	O
)	O
)	O
;	O
mu_sieve_abort	function
(	O
mach	pointer
)	O
;	O
}	O
memcpy	function
(	O
name	pointer
,	O
input	pointer
,	O
len	long
)	O
;	O
name	pointer
[	O
len	long
]	O
=	O
0	int
;	O
var	pointer
=	O
mu_assoc_get	function
(	O
mach	pointer
->	O
vartab	pointer
,	O
name	pointer
)	O
;	O
free	function
(	O
name	pointer
)	O
;	O
if	O
(	O
var	pointer
)	O
{	O
*	O
exp	pointer
=	O
strdup	function
(	O
var	pointer
->	O
value	pointer
)	O
;	O
if	O
(	O
!	O
*	O
exp	pointer
)	O
{	O
mu_sieve_error	function
(	O
mach	pointer
,	O
"%s"	pointer
,	O
mu_strerror	function
(	O
errno	O
)	O
)	O
;	O
mu_sieve_abort	function
(	O
mach	pointer
)	O
;	O
}	O
}	O
else	O
*	O
exp	pointer
=	O
NULL	O
;	O
}	O
else	O
return	O
1	int
;	O
return	O
0	int
;	O
}	O
int	O
mu_sieve_require_variables	function
(	O
mu_sieve_machine_t	pointer
mach	pointer
)	O
{	O
int	O
rc	int
;	O
if	O
(	O
mach	pointer
->	O
vartab	pointer
)	O
return	O
0	int
;	O
rc	int
=	O
mu_assoc_create	function
(	O
&	O
mach	pointer
->	O
vartab	pointer
,	O
MU_ASSOC_ICASE	int
)	O
;	O
if	O
(	O
rc	int
)	O
mu_sieve_error	function
(	O
mach	pointer
,	O
"mu_assoc_create: %s"	pointer
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
mu_assoc_set_destroy_item	function
(	O
mach	pointer
->	O
vartab	pointer
,	O
mu_list_free_item	function
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
mu_sieve_register_action	function
(	O
mach	pointer
,	O
"set"	pointer
,	O
sieve_action_set	function
,	O
set_args	array
,	O
set_tag_groups	array
,	O
1	int
)	O
;	O
mu_sieve_register_test	function
(	O
mach	pointer
,	O
"string"	pointer
,	O
sieve_test_string	function
,	O
string_args	array
,	O
string_tag_groups	array
,	O
1	int
)	O
;	O
}	O
return	O
rc	int
;	O
}	O
int	O
mu_sieve_has_variables	function
(	O
mu_sieve_machine_t	pointer
mach	pointer
)	O
{	O
return	O
mach	pointer
->	O
vartab	pointer
!=	O
NULL	O
;	O
}	O
static	O
int	O
copy_init_var	function
(	O
void	O
*	O
item	pointer
,	O
void	O
*	O
data	pointer
)	O
{	O
struct	O
mu_sieve_variable_initializer	struct
*	O
vini	pointer
=	O
item	pointer
,	O
*	O
vini_new	pointer
;	O
mu_sieve_machine_t	pointer
mach	pointer
=	O
data	pointer
;	O
vini_new	pointer
=	O
varini_alloc	function
(	O
vini	pointer
->	O
name	pointer
,	O
vini	pointer
->	O
value	pointer
)	O
;	O
if	O
(	O
!	O
vini_new	pointer
)	O
return	O
ENOMEM	int
;	O
return	O
varini_append	function
(	O
mach	pointer
,	O
vini_new	pointer
)	O
;	O
}	O
void	O
mu_i_sv_copy_variables	function
(	O
mu_sieve_machine_t	pointer
child	pointer
,	O
mu_sieve_machine_t	pointer
parent	pointer
)	O
{	O
mu_iterator_t	pointer
itr	pointer
;	O
int	O
rc	int
;	O
mu_sieve_require_variables	function
(	O
child	pointer
)	O
;	O
rc	int
=	O
mu_assoc_get_iterator	function
(	O
parent	pointer
->	O
vartab	pointer
,	O
&	O
itr	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_sieve_error	function
(	O
child	pointer
,	O
"mu_assoc_get_iterator: %s"	pointer
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
mu_sieve_abort	function
(	O
child	pointer
)	O
;	O
}	O
for	O
(	O
mu_iterator_first	function
(	O
itr	pointer
)	O
;	O
!	O
mu_iterator_is_done	function
(	O
itr	pointer
)	O
;	O
mu_iterator_next	function
(	O
itr	pointer
)	O
)	O
{	O
const	O
char	O
*	O
name	pointer
;	O
struct	O
sieve_variable	struct
const	O
*	O
val	pointer
;	O
struct	O
sieve_variable	struct
*	O
newval	pointer
;	O
mu_iterator_current_kv	function
(	O
itr	pointer
,	O
(	O
const	O
void	O
*	O
*	O
)	O
&	O
name	pointer
,	O
(	O
void	O
*	O
*	O
)	O
&	O
val	pointer
)	O
;	O
newval	pointer
=	O
malloc	function
(	O
sizeof	O
(	O
*	O
newval	pointer
)	O
)	O
;	O
if	O
(	O
!	O
newval	pointer
)	O
mu_sieve_abort	function
(	O
child	pointer
)	O
;	O
newval	pointer
->	O
value	pointer
=	O
mu_sieve_strdup	function
(	O
child	pointer
,	O
val	pointer
->	O
value	pointer
)	O
;	O
mu_assoc_install	function
(	O
child	pointer
->	O
vartab	pointer
,	O
name	pointer
,	O
newval	pointer
)	O
;	O
}	O
mu_iterator_destroy	function
(	O
&	O
itr	pointer
)	O
;	O
rc	int
=	O
mu_list_foreach	function
(	O
parent	pointer
->	O
init_var	pointer
,	O
copy_init_var	function
,	O
child	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_sieve_error	function
(	O
child	pointer
,	O
"copy_init_var: %s"	pointer
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
mu_sieve_abort	function
(	O
child	pointer
)	O
;	O
}	O
}	O
static	O
int	O
sieve_setvar	function
(	O
void	O
*	O
item	pointer
,	O
void	O
*	O
data	pointer
)	O
{	O
struct	O
mu_sieve_variable_initializer	struct
*	O
vini	pointer
=	O
item	pointer
;	O
mu_sieve_machine_t	pointer
mach	pointer
=	O
data	pointer
;	O
variable_set	function
(	O
mach	pointer
,	O
vini	pointer
->	O
name	pointer
,	O
mu_sieve_strdup	function
(	O
mach	pointer
,	O
vini	pointer
->	O
value	pointer
)	O
)	O
;	O
return	O
0	int
;	O
}	O
void	O
mu_i_sv_init_variables	function
(	O
mu_sieve_machine_t	pointer
mach	pointer
)	O
{	O
if	O
(	O
mu_sieve_has_variables	function
(	O
mach	pointer
)	O
)	O
{	O
mu_assoc_clear	function
(	O
mach	pointer
->	O
vartab	pointer
)	O
;	O
mu_list_foreach	function
(	O
mach	pointer
->	O
init_var	pointer
,	O
sieve_setvar	function
,	O
mach	pointer
)	O
;	O
}	O
}	O
