static	O
char	O
soundextbl	array
[	O
]	O
=	O
"A0"	pointer
"B1"	pointer
"C2"	pointer
"D3"	pointer
"E0"	pointer
"F1"	pointer
"G2"	pointer
"H-"	pointer
"I0"	pointer
"J2"	pointer
"K2"	pointer
"L4"	pointer
"M5"	pointer
"N5"	pointer
"O0"	pointer
"P1"	pointer
"Q2"	pointer
"R6"	pointer
"S2"	pointer
"T3"	pointer
"U0"	pointer
"V1"	pointer
"W-"	pointer
"X2"	pointer
"Y0"	pointer
"Z2"	pointer
;	O
static	O
int	O
soundex_code	function
(	O
int	O
c	int
)	O
{	O
char	O
*	O
p	pointer
;	O
c	int
=	O
toupper	function
(	O
c	int
)	O
;	O
for	O
(	O
p	pointer
=	O
soundextbl	array
;	O
*	O
p	pointer
;	O
p	pointer
+=	O
2	int
)	O
if	O
(	O
*	O
p	pointer
==	O
c	int
)	O
return	O
p	pointer
[	O
1	int
]	O
;	O
return	O
0	int
;	O
}	O
int	O
dico_soundex_ascii	function
(	O
const	O
char	O
*	O
s	pointer
,	O
char	O
codestr	array
[	O
DICO_SOUNDEX_SIZE	int
]	O
)	O
{	O
int	O
i	int
,	O
prev	int
;	O
codestr	array
[	O
0	int
]	O
=	O
toupper	function
(	O
*	O
s	pointer
)	O
;	O
prev	int
=	O
soundex_code	function
(	O
codestr	array
[	O
0	int
]	O
)	O
;	O
for	O
(	O
i	int
=	O
1	int
,	O
s	pointer
++	O
;	O
i	int
<	O
DICO_SOUNDEX_SIZE	int
-	O
1	int
&&	O
*	O
s	pointer
;	O
s	pointer
++	O
)	O
{	O
int	O
n	long
=	O
soundex_code	function
(	O
*	O
s	pointer
)	O
;	O
if	O
(	O
n	long
)	O
{	O
if	O
(	O
n	long
==	O
prev	int
)	O
continue	O
;	O
switch	O
(	O
n	long
)	O
{	O
case	O
'0'	O
:	O
break	O
;	O
case	O
'-'	O
:	O
continue	O
;	O
default	O
:	O
codestr	array
[	O
i	int
++	O
]	O
=	O
n	long
;	O
}	O
prev	int
=	O
n	long
;	O
}	O
}	O
for	O
(	O
;	O
i	int
<	O
DICO_SOUNDEX_SIZE	int
-	O
1	int
;	O
i	int
++	O
)	O
codestr	array
[	O
i	int
]	O
=	O
'0'	O
;	O
codestr	array
[	O
i	int
]	O
=	O
0	int
;	O
return	O
0	int
;	O
}	O
int	O
dico_soundex	function
(	O
const	O
char	O
*	O
text	pointer
,	O
char	O
codestr	array
[	O
DICO_SOUNDEX_SIZE	int
]	O
)	O
{	O
unsigned	O
*	O
input	pointer
,	O
*	O
s	pointer
;	O
int	O
i	int
,	O
prev	int
;	O
if	O
(	O
utf8_mbstr_to_wc	function
(	O
text	pointer
,	O
&	O
input	pointer
,	O
NULL	O
)	O
)	O
return	O
-	O
1	int
;	O
s	pointer
=	O
input	pointer
;	O
do	O
{	O
codestr	array
[	O
0	int
]	O
=	O
utf8_wc_toupper	function
(	O
*	O
s	pointer
++	O
)	O
;	O
}	O
while	O
(	O
codestr	array
[	O
0	int
]	O
>	O
127	int
||	O
(	O
prev	int
=	O
soundex_code	function
(	O
codestr	array
[	O
0	int
]	O
)	O
)	O
==	O
0	int
)	O
;	O
for	O
(	O
i	int
=	O
1	int
;	O
i	int
<	O
DICO_SOUNDEX_SIZE	int
-	O
1	int
&&	O
*	O
s	pointer
;	O
s	pointer
++	O
)	O
{	O
int	O
n	long
=	O
*	O
s	pointer
<	O
128	int
?	O
soundex_code	function
(	O
*	O
s	pointer
)	O
:	O
0	int
;	O
if	O
(	O
n	long
)	O
{	O
if	O
(	O
n	long
==	O
prev	int
)	O
continue	O
;	O
switch	O
(	O
n	long
)	O
{	O
case	O
'0'	O
:	O
break	O
;	O
case	O
'-'	O
:	O
continue	O
;	O
default	O
:	O
codestr	array
[	O
i	int
++	O
]	O
=	O
n	long
;	O
}	O
prev	int
=	O
n	long
;	O
}	O
}	O
for	O
(	O
;	O
i	int
<	O
DICO_SOUNDEX_SIZE	int
-	O
1	int
;	O
i	int
++	O
)	O
codestr	array
[	O
i	int
]	O
=	O
'0'	O
;	O
codestr	array
[	O
i	int
]	O
=	O
0	int
;	O
free	function
(	O
input	pointer
)	O
;	O
return	O
0	int
;	O
}	O
