int	O
readint	function
(	O
char	O
*	O
line	pointer
,	O
char	O
*	O
flagstring	pointer
,	O
int	O
*	O
i	pointer
,	O
int	O
*	O
num	pointer
)	O
;	O
int	O
readstr	function
(	O
char	O
*	O
line	pointer
,	O
char	O
*	O
flagstring	pointer
,	O
char	O
*	O
*	O
s	pointer
,	O
int	O
*	O
num	pointer
)	O
;	O
void	O
optstr	function
(	O
char	O
*	O
value	int
,	O
char	O
*	O
*	O
s	pointer
,	O
int	O
*	O
num	pointer
)	O
;	O
void	O
optint	function
(	O
char	O
*	O
value	int
,	O
int	O
*	O
i	pointer
,	O
int	O
*	O
num	pointer
)	O
;	O
void	O
*	O
xstrdup	function
(	O
char	O
*	O
s	pointer
)	O
;	O
extern	O
int	O
h_errno	O
;	O
extern	O
char	O
*	O
optarg	pointer
;	O
extern	O
int	O
optind	int
,	O
opterr	int
,	O
optopt	int
;	O
void	O
usage	function
(	O
)	O
{	O
printf	function
(	O
_	O
(	O
"GNU Proxyknife %s, a customizable proxy hunter.\nUsage: proxyknife [OPTION]...\nSpecial options:\n-V,  --version    display the version of Proxyknife and exit.\n     --help       print this help.\n\nAll of the following options need arguments if no declarations.\n\nCommandline only options:\n-f \tthe argument is configuration file.\n\nConfiguration options:\n-d \tdebug, turn on debug output.\n   \tNotice: no argument for this option.\n-t \tthreads\n-g \tuser_agent\n-I \tproxyknifeintype, the type of proxylist(local file or url).\n-i \tproxyknifein, the proxylist file or url used as input of proxyknife.\n   \t'-' meanings stdin.\n-m \tmytype, the type of myproxy.\n-h \tmyhost, the IPV4 address or host name of myproxy.\n-p \tmyport, the port of myproxy.\n-u \tmyuser, the username of myproxy if need.\n-s \tmypass, the password of myproxy if need.\n-c \tchecksite, the target site used to check testproxies. Google by default.\n-C \tcheckreqin, the file including req string.\n-k \tkey, the keyword used to check whether testproxies give correct response.\n-r \trcvtimeo, socket recv timeout in seconds.\n-n \tsndtimeo, socket send timeout in seconds.\n-S \tmyconreplysize\n-T \ttestconreplysize\n-G \ttesttagreplysize\n-H \thttptestmethod\n-5 \tsocks5testmethod, reserved now\n-4 \tsocks4testmethod, reserved now\n-l \tlogfilename\n-o \tproxyknifeout, the result is also printed to this file.\n\nMail Bug reports and suggestions to <bug-proxyknife@gnu.org>.\n"	pointer
)	O
,	O
VERSION	pointer
)	O
;	O
}	O
void	O
READCONF	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
FILE	struct
*	O
conf	pointer
;	O
char	O
*	O
proxyknife_conf	pointer
=	O
NULL	O
;	O
char	O
*	O
line	pointer
;	O
int	O
linelen	int
;	O
int	O
stringlen	int
;	O
ssize_t	long
read	pointer
;	O
char	O
*	O
offset	long
;	O
char	O
*	O
p	pointer
,	O
*	O
q	pointer
;	O
int	O
set_mytype	int
=	O
0	int
,	O
set_httptestmethod	int
=	O
0	int
,	O
set_socks5testmethod	int
=	O
0	int
,	O
set_socks4testmethod	int
=	O
0	int
;	O
int	O
set_myport	int
=	O
0	int
,	O
set_myhost	int
=	O
0	int
;	O
int	O
set_myuser	int
=	O
0	int
,	O
set_mypass	int
=	O
0	int
;	O
int	O
set_proxyknifein	int
=	O
0	int
,	O
set_proxyknifeout	int
=	O
0	int
,	O
set_proxyknifeintype	int
=	O
0	int
;	O
int	O
set_debug	int
=	O
0	int
;	O
int	O
set_threads	int
=	O
0	int
;	O
int	O
set_checksite	int
=	O
0	int
,	O
set_key	int
=	O
0	int
,	O
set_logfilename	int
=	O
0	int
;	O
int	O
set_user_agent	int
=	O
0	int
,	O
set_myconreplysize	int
=	O
0	int
,	O
set_testconreplysize	int
=	O
0	int
;	O
int	O
set_testtagreplysize	int
=	O
0	int
,	O
set_rcvtimeo	int
=	O
0	int
,	O
set_sndtimeo	int
=	O
0	int
;	O
int	O
set_checkreqin	int
=	O
0	int
;	O
struct	O
hostent	struct
*	O
h	pointer
;	O
int	O
slash	int
,	O
colon	int
;	O
unsigned	O
char	O
*	O
filename	pointer
,	O
*	O
home	pointer
;	O
int	O
filenamelen	int
;	O
int	O
c	int
;	O
int	O
digit_optind	int
=	O
0	int
;	O
int	O
this_option_optind	int
=	O
optind	int
?	O
optind	int
:	O
1	int
;	O
int	O
option_index	int
=	O
0	int
;	O
static	O
struct	O
option	struct
long_options	array
[	O
]	O
=	O
{	O
{	O
"help"	pointer
,	O
0	int
,	O
NULL	O
,	O
129	int
}	O
,	O
{	O
"version"	pointer
,	O
0	int
,	O
NULL	O
,	O
'V'	O
}	O
,	O
{	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
}	O
}	O
;	O
my	struct
.	O
mytype	int
=	O
DIRECT	int
;	O
test	struct
.	O
httptestmethod	int
=	O
HTTP_GET	int
;	O
test	struct
.	O
socks5testmethod	int
=	O
SOCKS5_CONNECT	int
;	O
test	struct
.	O
socks4testmethod	int
=	O
SOCKS4_CONNECT	int
;	O
threads	int
=	O
THREADS	int
;	O
target	struct
.	O
target	struct
=	O
xstrdup	function
(	O
CHECKSITE	pointer
)	O
;	O
target	struct
.	O
key	pointer
=	O
xstrdup	function
(	O
KEY	pointer
)	O
;	O
logfilename	pointer
=	O
xstrdup	function
(	O
LOGFILENAME	pointer
)	O
;	O
user_agent	pointer
=	O
xstrdup	function
(	O
USER_AGENT	pointer
)	O
;	O
my	struct
.	O
myconreplysize	int
=	O
MYCONREPLYSIZE	int
;	O
test	struct
.	O
testconreplysize	int
=	O
TESTCONREPLYSIZE	int
;	O
test	struct
.	O
testtagreplysize	int
=	O
TESTTAGREPLYSIZE	int
;	O
rcvtimeo	int
=	O
RCVTIMEO	int
;	O
sndtimeo	int
=	O
SNDTIMEO	int
;	O
while	O
(	O
1	int
)	O
{	O
c	int
=	O
getopt_long	function
(	O
argc	int
,	O
argv	pointer
,	O
"Vdf:i:I:o:t:g:m:p:h:u:s:c:C:k:r:n:S:T:G:H:5:4:l:"	pointer
,	O
long_options	array
,	O
&	O
option_index	int
)	O
;	O
if	O
(	O
c	int
==	O
-	O
1	int
)	O
break	O
;	O
switch	O
(	O
c	int
)	O
{	O
case	O
129	int
:	O
usage	function
(	O
)	O
;	O
exit	function
(	O
EXIT_SUCCESS	int
)	O
;	O
break	O
;	O
case	O
'd'	O
:	O
optint	function
(	O
"1"	pointer
,	O
&	O
debug	int
,	O
&	O
set_debug	int
)	O
;	O
break	O
;	O
case	O
'f'	O
:	O
proxyknife_conf	pointer
=	O
xmalloc	function
(	O
strlen	function
(	O
optarg	pointer
)	O
+	O
1	int
)	O
;	O
memset	function
(	O
proxyknife_conf	pointer
,	O
strlen	function
(	O
optarg	pointer
)	O
+	O
1	int
,	O
0	int
)	O
;	O
memmove	function
(	O
proxyknife_conf	pointer
,	O
optarg	pointer
,	O
strlen	function
(	O
optarg	pointer
)	O
)	O
;	O
break	O
;	O
case	O
'V'	O
:	O
printf	function
(	O
_	O
(	O
"GNU Proxyknife %s\n\nCopyright (C) 2005, 2006, 2007 %s <skyroam@gmail.com>.\nProxyknife is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\nGNU General Public License for more details.\n"	pointer
)	O
,	O
VERSION	pointer
,	O
_	O
(	O
"Jia Wang"	pointer
)	O
)	O
;	O
exit	function
(	O
EXIT_SUCCESS	int
)	O
;	O
case	O
'i'	O
:	O
optstr	function
(	O
optarg	pointer
,	O
&	O
proxyknife_in	pointer
,	O
&	O
set_proxyknifein	int
)	O
;	O
break	O
;	O
case	O
'I'	O
:	O
optint	function
(	O
optarg	pointer
,	O
&	O
proxyknife_in_type	int
,	O
&	O
set_proxyknifeintype	int
)	O
;	O
break	O
;	O
case	O
'o'	O
:	O
optstr	function
(	O
optarg	pointer
,	O
&	O
proxyknife_out	pointer
,	O
&	O
set_proxyknifeout	int
)	O
;	O
break	O
;	O
case	O
't'	O
:	O
optint	function
(	O
optarg	pointer
,	O
&	O
threads	int
,	O
&	O
set_threads	int
)	O
;	O
break	O
;	O
case	O
'g'	O
:	O
optstr	function
(	O
optarg	pointer
,	O
&	O
user_agent	pointer
,	O
&	O
set_user_agent	int
)	O
;	O
break	O
;	O
case	O
'm'	O
:	O
optint	function
(	O
optarg	pointer
,	O
&	O
(	O
my	struct
.	O
mytype	int
)	O
,	O
&	O
set_mytype	int
)	O
;	O
break	O
;	O
case	O
'p'	O
:	O
optint	function
(	O
optarg	pointer
,	O
&	O
(	O
my	struct
.	O
myport	int
)	O
,	O
&	O
set_myport	int
)	O
;	O
break	O
;	O
case	O
'h'	O
:	O
optstr	function
(	O
optarg	pointer
,	O
&	O
(	O
my	struct
.	O
myhost	pointer
)	O
,	O
&	O
set_myhost	int
)	O
;	O
break	O
;	O
case	O
'u'	O
:	O
optstr	function
(	O
optarg	pointer
,	O
&	O
(	O
my	struct
.	O
myuser	pointer
)	O
,	O
&	O
set_myuser	int
)	O
;	O
break	O
;	O
case	O
's'	O
:	O
optstr	function
(	O
optarg	pointer
,	O
&	O
(	O
my	struct
.	O
mypass	pointer
)	O
,	O
&	O
set_mypass	int
)	O
;	O
break	O
;	O
case	O
'c'	O
:	O
optstr	function
(	O
optarg	pointer
,	O
&	O
(	O
target	struct
.	O
target	struct
)	O
,	O
&	O
set_checksite	int
)	O
;	O
break	O
;	O
case	O
'C'	O
:	O
optstr	function
(	O
optarg	pointer
,	O
&	O
(	O
target	struct
.	O
checkreqin	pointer
)	O
,	O
&	O
set_checkreqin	int
)	O
;	O
break	O
;	O
case	O
'k'	O
:	O
optstr	function
(	O
optarg	pointer
,	O
&	O
(	O
target	struct
.	O
key	pointer
)	O
,	O
&	O
set_key	int
)	O
;	O
break	O
;	O
case	O
'r'	O
:	O
optint	function
(	O
optarg	pointer
,	O
&	O
(	O
rcvtimeo	int
)	O
,	O
&	O
set_rcvtimeo	int
)	O
;	O
break	O
;	O
case	O
'n'	O
:	O
optint	function
(	O
optarg	pointer
,	O
&	O
(	O
sndtimeo	int
)	O
,	O
&	O
set_sndtimeo	int
)	O
;	O
break	O
;	O
case	O
'S'	O
:	O
optint	function
(	O
optarg	pointer
,	O
&	O
(	O
my	struct
.	O
myconreplysize	int
)	O
,	O
&	O
set_myconreplysize	int
)	O
;	O
break	O
;	O
case	O
'T'	O
:	O
optint	function
(	O
optarg	pointer
,	O
&	O
(	O
test	struct
.	O
testconreplysize	int
)	O
,	O
&	O
set_testconreplysize	int
)	O
;	O
break	O
;	O
case	O
'G'	O
:	O
optint	function
(	O
optarg	pointer
,	O
&	O
(	O
test	struct
.	O
testtagreplysize	int
)	O
,	O
&	O
set_testtagreplysize	int
)	O
;	O
break	O
;	O
case	O
'H'	O
:	O
optint	function
(	O
optarg	pointer
,	O
&	O
(	O
test	struct
.	O
httptestmethod	int
)	O
,	O
&	O
set_httptestmethod	int
)	O
;	O
break	O
;	O
case	O
'5'	O
:	O
optint	function
(	O
optarg	pointer
,	O
&	O
(	O
test	struct
.	O
socks5testmethod	int
)	O
,	O
&	O
set_socks5testmethod	int
)	O
;	O
break	O
;	O
case	O
'4'	O
:	O
optint	function
(	O
optarg	pointer
,	O
&	O
(	O
test	struct
.	O
socks4testmethod	int
)	O
,	O
&	O
set_socks4testmethod	int
)	O
;	O
break	O
;	O
case	O
'l'	O
:	O
optstr	function
(	O
optarg	pointer
,	O
&	O
(	O
logfilename	pointer
)	O
,	O
&	O
set_logfilename	int
)	O
;	O
break	O
;	O
default	O
:	O
usage	function
(	O
)	O
;	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
break	O
;	O
}	O
}	O
if	O
(	O
proxyknife_conf	pointer
!=	O
NULL	O
)	O
conf	pointer
=	O
fopen	function
(	O
proxyknife_conf	pointer
,	O
"r"	pointer
)	O
;	O
else	O
conf	pointer
=	O
NULL	O
;	O
if	O
(	O
conf	pointer
==	O
NULL	O
)	O
{	O
if	O
(	O
debug	int
)	O
perror	function
(	O
__FILE__	O
" READCONF:fopen:the configuration file in commandline"	pointer
)	O
;	O
conf	pointer
=	O
fopen	function
(	O
PROXYKNIFE_CONF	pointer
,	O
"r"	pointer
)	O
;	O
if	O
(	O
conf	pointer
==	O
NULL	O
)	O
{	O
if	O
(	O
debug	int
)	O
perror	function
(	O
__FILE__	O
" "	pointer
"READCONF:fopen:"	pointer
PROXYKNIFE_CONF	pointer
)	O
;	O
home	pointer
=	O
getenv	function
(	O
"HOME"	pointer
)	O
;	O
if	O
(	O
home	pointer
!=	O
NULL	O
)	O
{	O
filenamelen	int
=	O
strlen	function
(	O
home	pointer
)	O
+	O
strlen	function
(	O
PROXYKNIFE_CONF	pointer
)	O
+	O
strlen	function
(	O
"/."	pointer
)	O
;	O
filename	pointer
=	O
xmalloc	function
(	O
filenamelen	int
+	O
1	int
)	O
;	O
memset	function
(	O
filename	pointer
,	O
0	int
,	O
filenamelen	int
)	O
;	O
snprintf	function
(	O
filename	pointer
,	O
filenamelen	int
+	O
1	int
,	O
"%s/.%s"	pointer
,	O
home	pointer
,	O
PROXYKNIFE_CONF	pointer
)	O
;	O
conf	pointer
=	O
fopen	function
(	O
filename	pointer
,	O
"r"	pointer
)	O
;	O
if	O
(	O
conf	pointer
==	O
NULL	O
)	O
{	O
if	O
(	O
debug	int
)	O
perror	function
(	O
"READCONF:fopen:~/."	pointer
PROXYKNIFE_CONF	pointer
)	O
;	O
}	O
else	O
{	O
if	O
(	O
debug	int
)	O
printf	function
(	O
"Using ~/."	pointer
PROXYKNIFE_CONF	pointer
"\n"	pointer
)	O
;	O
}	O
xfree	function
(	O
(	O
void	O
*	O
*	O
)	O
&	O
filename	pointer
)	O
;	O
}	O
}	O
else	O
{	O
printf	function
(	O
"READCONF:Using "	pointer
PROXYKNIFE_CONF	pointer
"\n"	pointer
)	O
;	O
}	O
}	O
else	O
{	O
printf	function
(	O
"READCONF:Using %s\n"	pointer
,	O
proxyknife_conf	pointer
)	O
;	O
}	O
if	O
(	O
proxyknife_conf	pointer
!=	O
NULL	O
)	O
xfree	function
(	O
(	O
void	O
*	O
*	O
)	O
&	O
proxyknife_conf	pointer
)	O
;	O
if	O
(	O
conf	pointer
==	O
NULL	O
)	O
{	O
filename	pointer
=	O
SYSTEM_PROXYKNIFECONF	O
;	O
conf	pointer
=	O
fopen	function
(	O
filename	pointer
,	O
"r"	pointer
)	O
;	O
if	O
(	O
conf	pointer
==	O
NULL	O
)	O
{	O
if	O
(	O
debug	int
)	O
{	O
perror	function
(	O
"READCONF:fopen:/etc/"	pointer
PROXYKNIFE_CONF	pointer
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"READCONF:Can't find the configuration file!Use commadline options only!\n"	pointer
)	O
;	O
}	O
}	O
else	O
{	O
if	O
(	O
debug	int
)	O
printf	function
(	O
"Using "	pointer
SYSTEM_PROXYKNIFECONF	O
"\n"	pointer
)	O
;	O
}	O
}	O
slash	int
=	O
'/'	O
;	O
colon	int
=	O
':'	O
;	O
if	O
(	O
conf	pointer
!=	O
NULL	O
)	O
{	O
while	O
(	O
1	int
)	O
{	O
line	pointer
=	O
NULL	O
;	O
linelen	int
=	O
80	int
;	O
read	pointer
=	O
getaline	function
(	O
(	O
unsigned	O
char	O
*	O
*	O
)	O
&	O
line	pointer
,	O
&	O
linelen	int
,	O
conf	pointer
)	O
;	O
if	O
(	O
read	pointer
==	O
-	O
1	int
)	O
break	O
;	O
if	O
(	O
read	pointer
>	O
0	int
)	O
{	O
if	O
(	O
line	pointer
[	O
0	int
]	O
==	O
'#'	O
)	O
{	O
xfree	function
(	O
(	O
void	O
*	O
*	O
)	O
&	O
line	pointer
)	O
;	O
continue	O
;	O
}	O
if	O
(	O
line	pointer
[	O
read	pointer
-	O
1	int
]	O
==	O
'\n'	O
)	O
line	pointer
[	O
read	pointer
-	O
1	int
]	O
=	O
0	int
;	O
!	O
readint	function
(	O
line	pointer
,	O
"threads="	pointer
,	O
&	O
threads	int
,	O
&	O
set_threads	int
)	O
||	O
!	O
readstr	function
(	O
line	pointer
,	O
"user_agent="	pointer
,	O
&	O
user_agent	pointer
,	O
&	O
set_user_agent	int
)	O
||	O
!	O
readint	function
(	O
line	pointer
,	O
"mytype="	pointer
,	O
&	O
(	O
my	struct
.	O
mytype	int
)	O
,	O
&	O
set_mytype	int
)	O
||	O
!	O
readint	function
(	O
line	pointer
,	O
"myport="	pointer
,	O
&	O
(	O
my	struct
.	O
myport	int
)	O
,	O
&	O
set_myport	int
)	O
||	O
!	O
readstr	function
(	O
line	pointer
,	O
"myhost="	pointer
,	O
&	O
(	O
my	struct
.	O
myhost	pointer
)	O
,	O
&	O
set_myhost	int
)	O
||	O
!	O
readstr	function
(	O
line	pointer
,	O
"myuser="	pointer
,	O
&	O
(	O
my	struct
.	O
myuser	pointer
)	O
,	O
&	O
set_myuser	int
)	O
||	O
!	O
readstr	function
(	O
line	pointer
,	O
"mypass="	pointer
,	O
&	O
(	O
my	struct
.	O
mypass	pointer
)	O
,	O
&	O
set_mypass	int
)	O
||	O
!	O
readstr	function
(	O
line	pointer
,	O
"checksite="	pointer
,	O
&	O
(	O
target	struct
.	O
target	struct
)	O
,	O
&	O
set_checksite	int
)	O
||	O
!	O
readstr	function
(	O
line	pointer
,	O
"checkreqin="	pointer
,	O
&	O
(	O
target	struct
.	O
checkreqin	pointer
)	O
,	O
&	O
set_checkreqin	int
)	O
||	O
!	O
readstr	function
(	O
line	pointer
,	O
"key="	pointer
,	O
&	O
(	O
target	struct
.	O
key	pointer
)	O
,	O
&	O
set_key	int
)	O
||	O
!	O
readint	function
(	O
line	pointer
,	O
"rcvtimeo="	pointer
,	O
&	O
(	O
rcvtimeo	int
)	O
,	O
&	O
set_rcvtimeo	int
)	O
||	O
!	O
readint	function
(	O
line	pointer
,	O
"sndtimeo="	pointer
,	O
&	O
(	O
sndtimeo	int
)	O
,	O
&	O
set_sndtimeo	int
)	O
||	O
!	O
readint	function
(	O
line	pointer
,	O
"myconreplysize="	pointer
,	O
&	O
(	O
my	struct
.	O
myconreplysize	int
)	O
,	O
&	O
set_myconreplysize	int
)	O
||	O
!	O
readint	function
(	O
line	pointer
,	O
"testconreplysize="	pointer
,	O
&	O
(	O
test	struct
.	O
testconreplysize	int
)	O
,	O
&	O
set_testconreplysize	int
)	O
||	O
!	O
readint	function
(	O
line	pointer
,	O
"testtagreplysize="	pointer
,	O
&	O
(	O
test	struct
.	O
testtagreplysize	int
)	O
,	O
&	O
set_testtagreplysize	int
)	O
||	O
!	O
readint	function
(	O
line	pointer
,	O
"httptestmethod="	pointer
,	O
&	O
(	O
test	struct
.	O
httptestmethod	int
)	O
,	O
&	O
set_httptestmethod	int
)	O
||	O
!	O
readint	function
(	O
line	pointer
,	O
"socks5testmethod="	pointer
,	O
&	O
(	O
test	struct
.	O
socks5testmethod	int
)	O
,	O
&	O
set_socks5testmethod	int
)	O
||	O
!	O
readint	function
(	O
line	pointer
,	O
"socks4testmethod="	pointer
,	O
&	O
(	O
test	struct
.	O
socks4testmethod	int
)	O
,	O
&	O
set_socks4testmethod	int
)	O
||	O
!	O
readstr	function
(	O
line	pointer
,	O
"logfilename="	pointer
,	O
&	O
(	O
logfilename	pointer
)	O
,	O
&	O
set_logfilename	int
)	O
||	O
!	O
readint	function
(	O
line	pointer
,	O
"proxyknifeintype="	pointer
,	O
&	O
(	O
proxyknife_in_type	int
)	O
,	O
&	O
set_proxyknifeintype	int
)	O
||	O
!	O
readstr	function
(	O
line	pointer
,	O
"proxyknifein="	pointer
,	O
&	O
(	O
proxyknife_in	pointer
)	O
,	O
&	O
set_proxyknifein	int
)	O
||	O
!	O
readstr	function
(	O
line	pointer
,	O
"proxyknifeout="	pointer
,	O
&	O
(	O
proxyknife_out	pointer
)	O
,	O
&	O
set_proxyknifeout	int
)	O
||	O
!	O
readint	function
(	O
line	pointer
,	O
"debug="	pointer
,	O
&	O
debug	int
,	O
&	O
set_debug	int
)	O
;	O
}	O
if	O
(	O
line	pointer
)	O
xfree	function
(	O
(	O
void	O
*	O
*	O
)	O
&	O
line	pointer
)	O
;	O
}	O
if	O
(	O
fclose	function
(	O
conf	pointer
)	O
!=	O
0	int
)	O
{	O
perror	function
(	O
__FILE__	O
": READCONF:fclose: configuration file"	pointer
)	O
;	O
xexit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
}	O
if	O
(	O
set_mytype	int
*	O
set_httptestmethod	int
*	O
set_socks5testmethod	int
*	O
set_socks4testmethod	int
*	O
set_rcvtimeo	int
*	O
set_sndtimeo	int
*	O
set_checksite	int
*	O
set_key	int
*	O
set_user_agent	int
*	O
set_threads	int
*	O
set_myconreplysize	int
*	O
set_testconreplysize	int
*	O
set_testtagreplysize	int
*	O
set_logfilename	int
)	O
{	O
if	O
(	O
debug	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: READCONF:not all parameters reset:"	pointer
,	O
progname	pointer
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"set flags are checked:\n"	pointer
"\tmytype:%d\n"	pointer
"\thttptestmethod:%d\n"	pointer
"\tsocks5testmethod:%d\n"	pointer
"\tsocks4testmethod:%d\n"	pointer
"\trcvtimeo:%d\n"	pointer
"\tsndtimeo:%d\n"	pointer
"\tchecksite:%d\n"	pointer
"\tkey:%d\n"	pointer
"\tuser_agent:%d\n"	pointer
"\tthreads:%d\n"	pointer
"\tmyconreplysize:%d\n"	pointer
"\ttestconreplysize:%d\n"	pointer
"\ttesttagreplysize:%d\n"	pointer
"\tlogfilename:%d\n"	pointer
,	O
set_mytype	int
,	O
set_httptestmethod	int
,	O
set_socks5testmethod	int
,	O
set_socks4testmethod	int
,	O
set_rcvtimeo	int
,	O
set_sndtimeo	int
,	O
set_checksite	int
,	O
set_key	int
,	O
set_user_agent	int
,	O
set_threads	int
,	O
set_myconreplysize	int
,	O
set_testconreplysize	int
,	O
set_testtagreplysize	int
,	O
set_logfilename	int
)	O
;	O
}	O
}	O
if	O
(	O
my	struct
.	O
mytype	int
!=	O
DIRECT	int
)	O
{	O
if	O
(	O
(	O
my	struct
.	O
mytype	int
==	O
HTTP_CONNECT_AUTH	int
)	O
||	O
(	O
my	struct
.	O
mytype	int
==	O
SOCKS5_CONNECT_AUTH	int
)	O
)	O
{	O
if	O
(	O
(	O
set_myuser	int
==	O
0	int
)	O
||	O
(	O
set_mypass	int
==	O
0	int
)	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: READCONF:Parameters:myuser or mypass isn't set\n"	pointer
,	O
progname	pointer
)	O
;	O
xexit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
}	O
else	O
if	O
(	O
(	O
my	struct
.	O
mytype	int
!=	O
HTTP_CONNECT	int
)	O
&&	O
(	O
my	struct
.	O
mytype	int
!=	O
SOCKS5_CONNECT	int
)	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: READCONF: Parameters:mytype %d is not supported now!\n"	pointer
,	O
progname	pointer
,	O
my	struct
.	O
mytype	int
)	O
;	O
xexit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
if	O
(	O
set_myhost	int
*	O
set_myport	int
==	O
0	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: READCONF:Parameters:myhost or myport isn't set!\n"	pointer
,	O
progname	pointer
)	O
;	O
xexit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
}	O
else	O
{	O
}	O
p	pointer
=	O
strstr	function
(	O
(	O
const	O
char	O
*	O
)	O
target	struct
.	O
target	struct
,	O
(	O
const	O
char	O
*	O
)	O
"://"	pointer
)	O
;	O
if	O
(	O
p	pointer
==	O
NULL	O
)	O
{	O
if	O
(	O
debug	int
)	O
fprintf	function
(	O
stderr	pointer
,	O
"%s %s: READCONF: No '://' found in %s\n"	pointer
,	O
progname	pointer
,	O
__FILE__	O
,	O
target	struct
.	O
target	struct
)	O
;	O
p	pointer
=	O
target	struct
.	O
target	struct
;	O
}	O
else	O
{	O
stringlen	int
=	O
p	pointer
-	O
target	struct
.	O
target	struct
;	O
if	O
(	O
stringlen	int
!=	O
0	int
)	O
{	O
target	struct
.	O
protocol	pointer
=	O
xmalloc	function
(	O
stringlen	int
+	O
1	int
)	O
;	O
memmove	function
(	O
target	struct
.	O
protocol	pointer
,	O
target	struct
.	O
target	struct
,	O
stringlen	int
)	O
;	O
target	struct
.	O
protocol	pointer
[	O
stringlen	int
]	O
=	O
'\0'	O
;	O
}	O
p	pointer
+=	O
(	O
int	O
)	O
strlen	function
(	O
"://"	pointer
)	O
;	O
}	O
q	pointer
=	O
strchr	function
(	O
p	pointer
,	O
colon	int
)	O
;	O
if	O
(	O
q	pointer
==	O
NULL	O
)	O
{	O
if	O
(	O
debug	int
)	O
fprintf	function
(	O
stderr	pointer
,	O
"%s %s: READCONF: No ':' found in %s\n"	pointer
,	O
progname	pointer
,	O
__FILE__	O
,	O
p	pointer
)	O
;	O
xexit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
stringlen	int
=	O
q	pointer
-	O
p	pointer
;	O
target	struct
.	O
targethost	pointer
=	O
xmalloc	function
(	O
stringlen	int
+	O
1	int
)	O
;	O
memmove	function
(	O
target	struct
.	O
targethost	pointer
,	O
p	pointer
,	O
stringlen	int
)	O
;	O
target	struct
.	O
targethost	pointer
[	O
stringlen	int
]	O
=	O
'\0'	O
;	O
p	pointer
=	O
q	pointer
+	O
1	int
;	O
q	pointer
=	O
strchr	function
(	O
p	pointer
,	O
slash	int
)	O
;	O
if	O
(	O
q	pointer
==	O
NULL	O
)	O
{	O
if	O
(	O
debug	int
)	O
fprintf	function
(	O
stderr	pointer
,	O
"%s %s: READCONF: No '/' found in %s\n"	pointer
,	O
progname	pointer
,	O
__FILE__	O
,	O
p	pointer
)	O
;	O
target	struct
.	O
targetpath	pointer
=	O
xmalloc	function
(	O
2	int
)	O
;	O
target	struct
.	O
targetpath	pointer
[	O
0	int
]	O
=	O
'/'	O
;	O
target	struct
.	O
targetpath	pointer
[	O
1	int
]	O
=	O
'\0'	O
;	O
stringlen	int
=	O
strlen	function
(	O
p	pointer
)	O
;	O
}	O
else	O
{	O
stringlen	int
=	O
strlen	function
(	O
q	pointer
)	O
;	O
target	struct
.	O
targetpath	pointer
=	O
xmalloc	function
(	O
stringlen	int
+	O
1	int
)	O
;	O
memmove	function
(	O
target	struct
.	O
targetpath	pointer
,	O
q	pointer
,	O
stringlen	int
)	O
;	O
target	struct
.	O
targetpath	pointer
[	O
stringlen	int
]	O
=	O
'\0'	O
;	O
stringlen	int
=	O
q	pointer
-	O
p	pointer
;	O
}	O
target	struct
.	O
targetport	pointer
=	O
xmalloc	function
(	O
stringlen	int
+	O
1	int
)	O
;	O
memmove	function
(	O
target	struct
.	O
targetport	pointer
,	O
p	pointer
,	O
stringlen	int
)	O
;	O
target	struct
.	O
targetport	pointer
[	O
stringlen	int
]	O
=	O
'\0'	O
;	O
h	pointer
=	O
gethostbyname	function
(	O
target	struct
.	O
targethost	pointer
)	O
;	O
if	O
(	O
h	pointer
==	O
NULL	O
)	O
{	O
herror	function
(	O
target	struct
.	O
targethost	pointer
)	O
;	O
xexit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
target	struct
.	O
targetaddr	struct
.	O
sin_addr	struct
=	O
*	O
(	O
struct	O
in_addr	struct
*	O
)	O
(	O
h	pointer
->	O
h_addr	O
)	O
;	O
target	struct
.	O
targetaddr	struct
.	O
sin_port	short
=	O
htons	function
(	O
atoi	function
(	O
target	struct
.	O
targetport	pointer
)	O
)	O
;	O
target	struct
.	O
targetaddr	struct
.	O
sin_family	short
=	O
AF_INET	O
;	O
memset	function
(	O
&	O
(	O
target	struct
.	O
targetaddr	struct
.	O
sin_zero	array
)	O
,	O
0	int
,	O
sizeof	O
(	O
target	struct
.	O
targetaddr	struct
.	O
sin_zero	array
)	O
)	O
;	O
if	O
(	O
proxyknife_in	pointer
==	O
NULL	O
)	O
{	O
if	O
(	O
proxyknife_in_type	int
==	O
IN_HTTP	int
)	O
{	O
optstr	function
(	O
PROXYKNIFE_DEFAULT_LISTSITE	pointer
,	O
&	O
proxyknife_in	pointer
,	O
&	O
set_proxyknifein	int
)	O
;	O
}	O
else	O
{	O
optstr	function
(	O
PROXYKNIFE_IN	pointer
,	O
&	O
proxyknife_in	pointer
,	O
&	O
set_proxyknifein	int
)	O
;	O
}	O
}	O
if	O
(	O
proxyknife_out	pointer
==	O
NULL	O
)	O
{	O
optstr	function
(	O
PROXYKNIFE_OUT	pointer
,	O
&	O
proxyknife_out	pointer
,	O
&	O
set_proxyknifeout	int
)	O
;	O
}	O
if	O
(	O
debug	int
)	O
{	O
printf	function
(	O
"setting:\n"	pointer
"\tlogfilename=%s\n"	pointer
"\ttarget=%s\n"	pointer
"\ttargethost=%s\n"	pointer
"\ttargetport=%s\n"	pointer
"\ttargetpath=%s\n"	pointer
"\tkey=%s\n"	pointer
"\thttptestmethod=%d\n"	pointer
"\tsocks5testmethod=%d\n"	pointer
"\tsocks4testmethod=%d\n"	pointer
"\tthreads=%d\n"	pointer
"\tuser_agent=%s\n"	pointer
"\trcvtimeo=%d\n"	pointer
"\tsndtimeo=%d\n"	pointer
"\ttestconreplysize=%d\n"	pointer
"\ttesttagreplysize=%d\n"	pointer
"\tproxyknife_in_type=%d\n"	pointer
"\tproxyknife_in=%s\n"	pointer
"\tproxyknife_out=%s\n"	pointer
"\tdebug=%d\n"	pointer
,	O
logfilename	pointer
,	O
target	struct
.	O
target	struct
,	O
target	struct
.	O
targethost	pointer
,	O
target	struct
.	O
targetport	pointer
,	O
target	struct
.	O
targetpath	pointer
,	O
target	struct
.	O
key	pointer
,	O
test	struct
.	O
httptestmethod	int
,	O
test	struct
.	O
socks5testmethod	int
,	O
test	struct
.	O
socks4testmethod	int
,	O
threads	int
,	O
user_agent	pointer
,	O
rcvtimeo	int
,	O
sndtimeo	int
,	O
test	struct
.	O
testconreplysize	int
,	O
test	struct
.	O
testtagreplysize	int
,	O
proxyknife_in_type	int
,	O
proxyknife_in	pointer
,	O
proxyknife_out	pointer
,	O
debug	int
)	O
;	O
switch	O
(	O
my	struct
.	O
mytype	int
)	O
{	O
case	O
DIRECT	int
:	O
printf	function
(	O
"\tmytype=DIRECT\n"	pointer
)	O
;	O
break	O
;	O
case	O
HTTP_CONNECT	int
:	O
printf	function
(	O
"\tmytype=HTTP_CONNECT\n"	pointer
)	O
;	O
printf	function
(	O
"\tmyhost=%s\n\tmyport=%d\n"	pointer
,	O
my	struct
.	O
myhost	pointer
,	O
my	struct
.	O
myport	int
)	O
;	O
break	O
;	O
case	O
HTTP_CONNECT_AUTH	int
:	O
printf	function
(	O
"\tmytype=HTTP_CONNECT_AUTH\n"	pointer
)	O
;	O
printf	function
(	O
"\tmyhost=%s\n\tmyport=%d\n"	pointer
,	O
my	struct
.	O
myhost	pointer
,	O
my	struct
.	O
myport	int
)	O
;	O
printf	function
(	O
"\tmyuser=%s\n\tmypass=%s\n"	pointer
,	O
my	struct
.	O
myuser	pointer
,	O
my	struct
.	O
mypass	pointer
)	O
;	O
break	O
;	O
case	O
SOCKS5_CONNECT	int
:	O
printf	function
(	O
"\tmytype=SOCKS5_CONNECT\n"	pointer
)	O
;	O
printf	function
(	O
"\tmyhost=%s\n\tmyport=%d\n"	pointer
,	O
my	struct
.	O
myhost	pointer
,	O
my	struct
.	O
myport	int
)	O
;	O
break	O
;	O
case	O
SOCKS5_CONNECT_AUTH	int
:	O
printf	function
(	O
"\tmytype=SOCKS5_CONNECT_AUTH\n"	pointer
)	O
;	O
printf	function
(	O
"\tmyhost=%s\n\tmyport=%d\n"	pointer
,	O
my	struct
.	O
myhost	pointer
,	O
my	struct
.	O
myport	int
)	O
;	O
printf	function
(	O
"\tmyuser=%s\n\tmypass=%s\n"	pointer
,	O
my	struct
.	O
myuser	pointer
,	O
my	struct
.	O
mypass	pointer
)	O
;	O
break	O
;	O
default	O
:	O
fprintf	function
(	O
stderr	pointer
,	O
"%s:READCONF:Parameters:invalid mytype:%d!This shouldn't happen!\n"	pointer
,	O
progname	pointer
,	O
my	struct
.	O
mytype	int
)	O
;	O
xexit	function
(	O
EXIT_FAILURE	int
)	O
;	O
break	O
;	O
}	O
}	O
}	O
int	O
readint	function
(	O
char	O
*	O
line	pointer
,	O
char	O
*	O
flagstring	pointer
,	O
int	O
*	O
i	pointer
,	O
int	O
*	O
num	pointer
)	O
{	O
if	O
(	O
!	O
strncmp	function
(	O
line	pointer
,	O
flagstring	pointer
,	O
strlen	function
(	O
flagstring	pointer
)	O
)	O
)	O
{	O
if	O
(	O
*	O
num	pointer
)	O
{	O
if	O
(	O
debug	int
)	O
fprintf	function
(	O
stderr	pointer
,	O
"Duplicate configuration:%s -- ignored!\n"	pointer
,	O
line	pointer
)	O
;	O
return	O
0	int
;	O
}	O
else	O
{	O
*	O
i	pointer
=	O
atoi	function
(	O
line	pointer
+	O
strlen	function
(	O
flagstring	pointer
)	O
)	O
;	O
(	O
*	O
num	pointer
)	O
++	O
;	O
return	O
0	int
;	O
}	O
}	O
return	O
-	O
1	int
;	O
}	O
int	O
readstr	function
(	O
char	O
*	O
line	pointer
,	O
char	O
*	O
flagstring	pointer
,	O
char	O
*	O
*	O
s	pointer
,	O
int	O
*	O
num	pointer
)	O
{	O
int	O
flagsize	int
,	O
len	int
;	O
flagsize	int
=	O
strlen	function
(	O
flagstring	pointer
)	O
;	O
if	O
(	O
!	O
strncmp	function
(	O
line	pointer
,	O
flagstring	pointer
,	O
flagsize	int
)	O
)	O
{	O
if	O
(	O
*	O
num	pointer
)	O
{	O
if	O
(	O
debug	int
)	O
fprintf	function
(	O
stderr	pointer
,	O
"Duplicate configuration:%s -- ignored!\n"	pointer
,	O
line	pointer
)	O
;	O
return	O
0	int
;	O
}	O
else	O
{	O
len	int
=	O
strlen	function
(	O
line	pointer
)	O
-	O
flagsize	int
+	O
1	int
;	O
*	O
s	pointer
=	O
xmalloc	function
(	O
len	int
)	O
;	O
memmove	function
(	O
*	O
s	pointer
,	O
line	pointer
+	O
flagsize	int
,	O
len	int
)	O
;	O
(	O
*	O
num	pointer
)	O
++	O
;	O
return	O
0	int
;	O
}	O
}	O
return	O
-	O
1	int
;	O
}	O
void	O
*	O
xstrdup	function
(	O
char	O
*	O
s	pointer
)	O
{	O
int	O
len	int
;	O
char	O
*	O
p	pointer
;	O
assert	O
(	O
s	pointer
!=	O
NULL	O
)	O
;	O
len	int
=	O
strlen	function
(	O
s	pointer
)	O
;	O
assert	O
(	O
len	int
!=	O
0	int
)	O
;	O
len	int
++	O
;	O
p	pointer
=	O
xmalloc	function
(	O
len	int
)	O
;	O
memmove	function
(	O
p	pointer
,	O
s	pointer
,	O
len	int
)	O
;	O
return	O
p	pointer
;	O
}	O
void	O
optstr	function
(	O
char	O
*	O
value	int
,	O
char	O
*	O
*	O
s	pointer
,	O
int	O
*	O
num	pointer
)	O
{	O
int	O
len	int
;	O
if	O
(	O
*	O
num	pointer
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
__FILE__	O
": Duplication commandline options: %s!\n"	pointer
,	O
value	int
)	O
;	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
else	O
{	O
assert	O
(	O
value	int
!=	O
NULL	O
)	O
;	O
len	int
=	O
strlen	function
(	O
value	int
)	O
+	O
1	int
;	O
*	O
s	pointer
=	O
xmalloc	function
(	O
len	int
)	O
;	O
memmove	function
(	O
*	O
s	pointer
,	O
value	int
,	O
len	int
)	O
;	O
(	O
*	O
num	pointer
)	O
++	O
;	O
}	O
}	O
void	O
optint	function
(	O
char	O
*	O
value	int
,	O
int	O
*	O
i	pointer
,	O
int	O
*	O
num	pointer
)	O
{	O
if	O
(	O
*	O
num	pointer
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Duplicate commandline options :%s \n"	pointer
,	O
value	int
)	O
;	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
else	O
{	O
*	O
i	pointer
=	O
atoi	function
(	O
value	int
)	O
;	O
(	O
*	O
num	pointer
)	O
++	O
;	O
}	O
}	O
