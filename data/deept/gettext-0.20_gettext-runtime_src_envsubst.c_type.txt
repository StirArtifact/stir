static	O
bool	bool
all_variables	bool
;	O
static	O
const	O
struct	O
option	struct
long_options	array
[	O
]	O
=	O
{	O
{	O
"help"	pointer
,	O
no_argument	int
,	O
NULL	O
,	O
'h'	O
}	O
,	O
{	O
"variables"	pointer
,	O
no_argument	int
,	O
NULL	O
,	O
'v'	O
}	O
,	O
{	O
"version"	pointer
,	O
no_argument	int
,	O
NULL	O
,	O
'V'	O
}	O
,	O
{	O
NULL	O
,	O
0	int
,	O
NULL	O
,	O
0	int
}	O
}	O
;	O
static	O
void	O
usage	function
(	O
int	O
status	int
)	O
__attribute__	O
(	O
(	O
noreturn	O
)	O
)	O
;	O
static	O
void	O
print_variables	function
(	O
const	O
char	O
*	O
string	pointer
)	O
;	O
static	O
void	O
note_variables	function
(	O
const	O
char	O
*	O
string	pointer
)	O
;	O
static	O
void	O
subst_from_stdin	function
(	O
void	O
)	O
;	O
int	O
main	function
(	O
int	O
argc	int
,	O
char	O
*	O
argv	array
[	O
]	O
)	O
{	O
bool	bool
show_variables	bool
=	O
false	int
;	O
bool	bool
do_help	bool
=	O
false	int
;	O
bool	bool
do_version	bool
=	O
false	int
;	O
int	O
opt	int
;	O
set_program_name	function
(	O
argv	array
[	O
0	int
]	O
)	O
;	O
setlocale	function
(	O
LC_ALL	O
,	O
""	pointer
)	O
;	O
bindtextdomain	function
(	O
PACKAGE	pointer
,	O
relocate	O
(	O
LOCALEDIR	O
)	O
)	O
;	O
textdomain	function
(	O
PACKAGE	pointer
)	O
;	O
atexit	function
(	O
close_stdout	function
)	O
;	O
while	O
(	O
(	O
opt	int
=	O
getopt_long	function
(	O
argc	int
,	O
argv	array
,	O
"hvV"	pointer
,	O
long_options	array
,	O
NULL	O
)	O
)	O
!=	O
EOF	O
)	O
switch	O
(	O
opt	int
)	O
{	O
case	O
'\0'	O
:	O
break	O
;	O
case	O
'h'	O
:	O
do_help	bool
=	O
true	int
;	O
break	O
;	O
case	O
'v'	O
:	O
show_variables	bool
=	O
true	int
;	O
break	O
;	O
case	O
'V'	O
:	O
do_version	bool
=	O
true	int
;	O
break	O
;	O
default	O
:	O
usage	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
if	O
(	O
do_version	bool
)	O
{	O
printf	function
(	O
"%s (GNU %s) %s\n"	pointer
,	O
basename	function
(	O
program_name	pointer
)	O
,	O
PACKAGE	pointer
,	O
VERSION	pointer
)	O
;	O
printf	function
(	O
_	O
(	O
"Copyright (C) %s Free Software Foundation, Inc.\nLicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\n"	pointer
)	O
,	O
"2003-2019"	pointer
)	O
;	O
printf	function
(	O
_	O
(	O
"Written by %s.\n"	pointer
)	O
,	O
proper_name	function
(	O
"Bruno Haible"	pointer
)	O
)	O
;	O
exit	function
(	O
EXIT_SUCCESS	int
)	O
;	O
}	O
if	O
(	O
do_help	bool
)	O
usage	function
(	O
EXIT_SUCCESS	int
)	O
;	O
if	O
(	O
argc	int
-	O
optind	int
>	O
1	int
)	O
error	function
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
_	O
(	O
"too many arguments"	pointer
)	O
)	O
;	O
if	O
(	O
show_variables	bool
)	O
{	O
switch	O
(	O
argc	int
-	O
optind	int
)	O
{	O
case	O
1	int
:	O
break	O
;	O
case	O
0	int
:	O
error	function
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
_	O
(	O
"missing arguments"	pointer
)	O
)	O
;	O
default	O
:	O
abort	function
(	O
)	O
;	O
}	O
set_binary_mode	function
(	O
STDOUT_FILENO	int
,	O
O_BINARY	int
)	O
;	O
print_variables	function
(	O
argv	array
[	O
optind	int
++	O
]	O
)	O
;	O
}	O
else	O
{	O
switch	O
(	O
argc	int
-	O
optind	int
)	O
{	O
case	O
1	int
:	O
all_variables	bool
=	O
false	int
;	O
note_variables	function
(	O
argv	array
[	O
optind	int
++	O
]	O
)	O
;	O
break	O
;	O
case	O
0	int
:	O
all_variables	bool
=	O
true	int
;	O
break	O
;	O
default	O
:	O
abort	function
(	O
)	O
;	O
}	O
subst_from_stdin	function
(	O
)	O
;	O
}	O
exit	function
(	O
EXIT_SUCCESS	int
)	O
;	O
}	O
static	O
void	O
usage	function
(	O
int	O
status	int
)	O
{	O
if	O
(	O
status	int
!=	O
EXIT_SUCCESS	int
)	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"Try '%s --help' for more information.\n"	pointer
)	O
,	O
program_name	pointer
)	O
;	O
else	O
{	O
printf	function
(	O
_	O
(	O
"Usage: %s [OPTION] [SHELL-FORMAT]\n"	pointer
)	O
,	O
program_name	pointer
)	O
;	O
printf	function
(	O
"\n"	pointer
)	O
;	O
printf	function
(	O
_	O
(	O
"Substitutes the values of environment variables.\n"	pointer
)	O
)	O
;	O
printf	function
(	O
"\n"	pointer
)	O
;	O
printf	function
(	O
_	O
(	O
"Operation mode:\n"	pointer
)	O
)	O
;	O
printf	function
(	O
_	O
(	O
"  -v, --variables             output the variables occurring in SHELL-FORMAT\n"	pointer
)	O
)	O
;	O
printf	function
(	O
"\n"	pointer
)	O
;	O
printf	function
(	O
_	O
(	O
"Informative output:\n"	pointer
)	O
)	O
;	O
printf	function
(	O
_	O
(	O
"  -h, --help                  display this help and exit\n"	pointer
)	O
)	O
;	O
printf	function
(	O
_	O
(	O
"  -V, --version               output version information and exit\n"	pointer
)	O
)	O
;	O
printf	function
(	O
"\n"	pointer
)	O
;	O
printf	function
(	O
_	O
(	O
"In normal operation mode, standard input is copied to standard output,\nwith references to environment variables of the form $VARIABLE or ${VARIABLE}\nbeing replaced with the corresponding values.  If a SHELL-FORMAT is given,\nonly those environment variables that are referenced in SHELL-FORMAT are\nsubstituted; otherwise all environment variables references occurring in\nstandard input are substituted.\n"	pointer
)	O
)	O
;	O
printf	function
(	O
"\n"	pointer
)	O
;	O
printf	function
(	O
_	O
(	O
"When --variables is used, standard input is ignored, and the output consists\nof the environment variables that are referenced in SHELL-FORMAT, one per line.\n"	pointer
)	O
)	O
;	O
printf	function
(	O
"\n"	pointer
)	O
;	O
fputs	function
(	O
_	O
(	O
"Report bugs to <bug-gnu-gettext@gnu.org>.\n"	pointer
)	O
,	O
stdout	pointer
)	O
;	O
}	O
exit	function
(	O
status	int
)	O
;	O
}	O
static	O
void	O
find_variables	function
(	O
const	O
char	O
*	O
string	pointer
,	O
void	O
(	O
*	O
callback	pointer
)	O
(	O
const	O
char	O
*	O
var_ptr	pointer
,	O
size_t	long
var_len	long
)	O
)	O
{	O
for	O
(	O
;	O
*	O
string	pointer
!=	O
'\0'	O
;	O
)	O
if	O
(	O
*	O
string	pointer
++	O
==	O
'$'	O
)	O
{	O
const	O
char	O
*	O
variable_start	pointer
;	O
const	O
char	O
*	O
variable_end	pointer
;	O
bool	bool
valid	bool
;	O
char	O
c	char
;	O
if	O
(	O
*	O
string	pointer
==	O
'{'	O
)	O
string	pointer
++	O
;	O
variable_start	pointer
=	O
string	pointer
;	O
c	char
=	O
*	O
string	pointer
;	O
if	O
(	O
(	O
c	char
>=	O
'A'	O
&&	O
c	char
<=	O
'Z'	O
)	O
||	O
(	O
c	char
>=	O
'a'	O
&&	O
c	char
<=	O
'z'	O
)	O
||	O
c	char
==	O
'_'	O
)	O
{	O
do	O
c	char
=	O
*	O
++	O
string	pointer
;	O
while	O
(	O
(	O
c	char
>=	O
'A'	O
&&	O
c	char
<=	O
'Z'	O
)	O
||	O
(	O
c	char
>=	O
'a'	O
&&	O
c	char
<=	O
'z'	O
)	O
||	O
(	O
c	char
>=	O
'0'	O
&&	O
c	char
<=	O
'9'	O
)	O
||	O
c	char
==	O
'_'	O
)	O
;	O
variable_end	pointer
=	O
string	pointer
;	O
if	O
(	O
variable_start	pointer
[	O
-	O
1	int
]	O
==	O
'{'	O
)	O
{	O
if	O
(	O
*	O
string	pointer
==	O
'}'	O
)	O
{	O
string	pointer
++	O
;	O
valid	bool
=	O
true	int
;	O
}	O
else	O
valid	bool
=	O
false	int
;	O
}	O
else	O
valid	bool
=	O
true	int
;	O
if	O
(	O
valid	bool
)	O
callback	pointer
(	O
variable_start	pointer
,	O
variable_end	pointer
-	O
variable_start	pointer
)	O
;	O
}	O
}	O
}	O
static	O
void	O
print_variable	function
(	O
const	O
char	O
*	O
var_ptr	pointer
,	O
size_t	long
var_len	long
)	O
{	O
fwrite	function
(	O
var_ptr	pointer
,	O
var_len	long
,	O
1	int
,	O
stdout	pointer
)	O
;	O
putchar	function
(	O
'\n'	O
)	O
;	O
}	O
static	O
void	O
print_variables	function
(	O
const	O
char	O
*	O
string	pointer
)	O
{	O
find_variables	function
(	O
string	pointer
,	O
&	O
print_variable	function
)	O
;	O
}	O
typedef	O
struct	O
string_list_ty	struct
string_list_ty	struct
;	O
struct	O
string_list_ty	struct
{	O
const	O
char	O
*	O
*	O
item	pointer
;	O
size_t	long
nitems	long
;	O
size_t	long
nitems_max	long
;	O
}	O
;	O
static	O
inline	O
void	O
string_list_init	function
(	O
string_list_ty	struct
*	O
slp	pointer
)	O
{	O
slp	pointer
->	O
item	pointer
=	O
NULL	O
;	O
slp	pointer
->	O
nitems	long
=	O
0	int
;	O
slp	pointer
->	O
nitems_max	long
=	O
0	int
;	O
}	O
static	O
inline	O
void	O
string_list_append	function
(	O
string_list_ty	struct
*	O
slp	pointer
,	O
const	O
char	O
*	O
s	long
)	O
{	O
if	O
(	O
slp	pointer
->	O
nitems	long
>=	O
slp	pointer
->	O
nitems_max	long
)	O
{	O
size_t	long
nbytes	long
;	O
slp	pointer
->	O
nitems_max	long
=	O
slp	pointer
->	O
nitems_max	long
*	O
2	int
+	O
4	int
;	O
nbytes	long
=	O
slp	pointer
->	O
nitems_max	long
*	O
sizeof	O
(	O
slp	pointer
->	O
item	pointer
[	O
0	int
]	O
)	O
;	O
slp	pointer
->	O
item	pointer
=	O
(	O
const	O
char	O
*	O
*	O
)	O
xrealloc	function
(	O
slp	pointer
->	O
item	pointer
,	O
nbytes	long
)	O
;	O
}	O
slp	pointer
->	O
item	pointer
[	O
slp	pointer
->	O
nitems	long
++	O
]	O
=	O
s	long
;	O
}	O
static	O
int	O
cmp_string	function
(	O
const	O
void	O
*	O
pstr1	pointer
,	O
const	O
void	O
*	O
pstr2	pointer
)	O
{	O
const	O
char	O
*	O
str1	pointer
=	O
*	O
(	O
const	O
char	O
*	O
*	O
)	O
pstr1	pointer
;	O
const	O
char	O
*	O
str2	pointer
=	O
*	O
(	O
const	O
char	O
*	O
*	O
)	O
pstr2	pointer
;	O
return	O
strcmp	function
(	O
str1	pointer
,	O
str2	pointer
)	O
;	O
}	O
static	O
inline	O
void	O
string_list_sort	function
(	O
string_list_ty	struct
*	O
slp	pointer
)	O
{	O
if	O
(	O
slp	pointer
->	O
nitems	long
>	O
0	int
)	O
qsort	function
(	O
slp	pointer
->	O
item	pointer
,	O
slp	pointer
->	O
nitems	long
,	O
sizeof	O
(	O
slp	pointer
->	O
item	pointer
[	O
0	int
]	O
)	O
,	O
cmp_string	function
)	O
;	O
}	O
static	O
inline	O
int	O
string_list_member	function
(	O
const	O
string_list_ty	struct
*	O
slp	pointer
,	O
const	O
char	O
*	O
s	long
)	O
{	O
size_t	long
j	long
;	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
slp	pointer
->	O
nitems	long
;	O
++	O
j	long
)	O
if	O
(	O
strcmp	function
(	O
slp	pointer
->	O
item	pointer
[	O
j	long
]	O
,	O
s	long
)	O
==	O
0	int
)	O
return	O
1	int
;	O
return	O
0	int
;	O
}	O
static	O
int	O
sorted_string_list_member	function
(	O
const	O
string_list_ty	struct
*	O
slp	pointer
,	O
const	O
char	O
*	O
s	long
)	O
{	O
size_t	long
j1	long
,	O
j2	long
;	O
j1	long
=	O
0	int
;	O
j2	long
=	O
slp	pointer
->	O
nitems	long
;	O
if	O
(	O
j2	long
>	O
0	int
)	O
{	O
while	O
(	O
j2	long
-	O
j1	long
>	O
1	int
)	O
{	O
size_t	long
j	long
=	O
(	O
j1	long
+	O
j2	long
)	O
>>	O
1	int
;	O
int	O
result	int
=	O
strcmp	function
(	O
slp	pointer
->	O
item	pointer
[	O
j	long
]	O
,	O
s	long
)	O
;	O
if	O
(	O
result	int
>	O
0	int
)	O
j2	long
=	O
j	long
;	O
else	O
if	O
(	O
result	int
==	O
0	int
)	O
return	O
1	int
;	O
else	O
j1	long
=	O
j	long
+	O
1	int
;	O
}	O
if	O
(	O
j2	long
>	O
j1	long
)	O
if	O
(	O
strcmp	function
(	O
slp	pointer
->	O
item	pointer
[	O
j1	long
]	O
,	O
s	long
)	O
==	O
0	int
)	O
return	O
1	int
;	O
}	O
return	O
0	int
;	O
}	O
static	O
inline	O
void	O
string_list_destroy	function
(	O
string_list_ty	struct
*	O
slp	pointer
)	O
{	O
size_t	long
j	long
;	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
slp	pointer
->	O
nitems	long
;	O
++	O
j	long
)	O
free	function
(	O
(	O
char	O
*	O
)	O
slp	pointer
->	O
item	pointer
[	O
j	long
]	O
)	O
;	O
if	O
(	O
slp	pointer
->	O
item	pointer
!=	O
NULL	O
)	O
free	function
(	O
slp	pointer
->	O
item	pointer
)	O
;	O
}	O
static	O
string_list_ty	struct
variables_set	struct
;	O
static	O
void	O
note_variable	function
(	O
const	O
char	O
*	O
var_ptr	pointer
,	O
size_t	long
var_len	long
)	O
{	O
char	O
*	O
string	pointer
=	O
XNMALLOC	O
(	O
var_len	long
+	O
1	int
,	O
char	O
)	O
;	O
memcpy	function
(	O
string	pointer
,	O
var_ptr	pointer
,	O
var_len	long
)	O
;	O
string	pointer
[	O
var_len	long
]	O
=	O
'\0'	O
;	O
string_list_append	function
(	O
&	O
variables_set	struct
,	O
string	pointer
)	O
;	O
}	O
static	O
void	O
note_variables	function
(	O
const	O
char	O
*	O
string	pointer
)	O
{	O
string_list_init	function
(	O
&	O
variables_set	struct
)	O
;	O
find_variables	function
(	O
string	pointer
,	O
&	O
note_variable	function
)	O
;	O
string_list_sort	function
(	O
&	O
variables_set	struct
)	O
;	O
}	O
static	O
int	O
do_getc	function
(	O
)	O
{	O
int	O
c	char
=	O
getc	function
(	O
stdin	pointer
)	O
;	O
if	O
(	O
c	char
==	O
EOF	O
)	O
{	O
if	O
(	O
ferror	function
(	O
stdin	pointer
)	O
)	O
error	function
(	O
EXIT_FAILURE	int
,	O
errno	O
,	O
_	O
(	O
"error while reading \"%s\""	pointer
)	O
,	O
_	O
(	O
"standard input"	pointer
)	O
)	O
;	O
}	O
return	O
c	char
;	O
}	O
static	O
inline	O
void	O
do_ungetc	function
(	O
int	O
c	char
)	O
{	O
if	O
(	O
c	char
!=	O
EOF	O
)	O
ungetc	function
(	O
c	char
,	O
stdin	pointer
)	O
;	O
}	O
static	O
void	O
subst_from_stdin	function
(	O
)	O
{	O
static	O
char	O
*	O
buffer	pointer
;	O
static	O
size_t	long
bufmax	long
;	O
static	O
size_t	long
buflen	long
;	O
int	O
c	char
;	O
for	O
(	O
;	O
;	O
)	O
{	O
c	char
=	O
do_getc	function
(	O
)	O
;	O
if	O
(	O
c	char
==	O
EOF	O
)	O
break	O
;	O
if	O
(	O
c	char
==	O
'$'	O
)	O
{	O
bool	bool
opening_brace	bool
=	O
false	int
;	O
bool	bool
closing_brace	bool
=	O
false	int
;	O
c	char
=	O
do_getc	function
(	O
)	O
;	O
if	O
(	O
c	char
==	O
'{'	O
)	O
{	O
opening_brace	bool
=	O
true	int
;	O
c	char
=	O
do_getc	function
(	O
)	O
;	O
}	O
if	O
(	O
(	O
c	char
>=	O
'A'	O
&&	O
c	char
<=	O
'Z'	O
)	O
||	O
(	O
c	char
>=	O
'a'	O
&&	O
c	char
<=	O
'z'	O
)	O
||	O
c	char
==	O
'_'	O
)	O
{	O
bool	bool
valid	bool
;	O
buflen	long
=	O
0	int
;	O
do	O
{	O
if	O
(	O
buflen	long
>=	O
bufmax	long
)	O
{	O
bufmax	long
=	O
2	int
*	O
bufmax	long
+	O
10	int
;	O
buffer	pointer
=	O
xrealloc	function
(	O
buffer	pointer
,	O
bufmax	long
)	O
;	O
}	O
buffer	pointer
[	O
buflen	long
++	O
]	O
=	O
c	char
;	O
c	char
=	O
do_getc	function
(	O
)	O
;	O
}	O
while	O
(	O
(	O
c	char
>=	O
'A'	O
&&	O
c	char
<=	O
'Z'	O
)	O
||	O
(	O
c	char
>=	O
'a'	O
&&	O
c	char
<=	O
'z'	O
)	O
||	O
(	O
c	char
>=	O
'0'	O
&&	O
c	char
<=	O
'9'	O
)	O
||	O
c	char
==	O
'_'	O
)	O
;	O
if	O
(	O
opening_brace	bool
)	O
{	O
if	O
(	O
c	char
==	O
'}'	O
)	O
{	O
closing_brace	bool
=	O
true	int
;	O
valid	bool
=	O
true	int
;	O
}	O
else	O
{	O
valid	bool
=	O
false	int
;	O
do_ungetc	function
(	O
c	char
)	O
;	O
}	O
}	O
else	O
{	O
valid	bool
=	O
true	int
;	O
do_ungetc	function
(	O
c	char
)	O
;	O
}	O
if	O
(	O
valid	bool
)	O
{	O
if	O
(	O
buflen	long
>=	O
bufmax	long
)	O
{	O
bufmax	long
=	O
2	int
*	O
bufmax	long
+	O
10	int
;	O
buffer	pointer
=	O
xrealloc	function
(	O
buffer	pointer
,	O
bufmax	long
)	O
;	O
}	O
buffer	pointer
[	O
buflen	long
]	O
=	O
'\0'	O
;	O
if	O
(	O
!	O
all_variables	bool
&&	O
!	O
sorted_string_list_member	function
(	O
&	O
variables_set	struct
,	O
buffer	pointer
)	O
)	O
valid	bool
=	O
false	int
;	O
}	O
if	O
(	O
valid	bool
)	O
{	O
const	O
char	O
*	O
env_value	pointer
=	O
getenv	function
(	O
buffer	pointer
)	O
;	O
if	O
(	O
env_value	pointer
!=	O
NULL	O
)	O
fputs	function
(	O
env_value	pointer
,	O
stdout	pointer
)	O
;	O
}	O
else	O
{	O
putchar	function
(	O
'$'	O
)	O
;	O
if	O
(	O
opening_brace	bool
)	O
putchar	function
(	O
'{'	O
)	O
;	O
fwrite	function
(	O
buffer	pointer
,	O
buflen	long
,	O
1	int
,	O
stdout	pointer
)	O
;	O
if	O
(	O
closing_brace	bool
)	O
putchar	function
(	O
'}'	O
)	O
;	O
}	O
}	O
else	O
{	O
do_ungetc	function
(	O
c	char
)	O
;	O
putchar	function
(	O
'$'	O
)	O
;	O
if	O
(	O
opening_brace	bool
)	O
putchar	function
(	O
'{'	O
)	O
;	O
}	O
}	O
else	O
putchar	function
(	O
c	char
)	O
;	O
}	O
}	O
