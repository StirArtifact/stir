extern	O
const	O
size_t	long
_bfd_target_vector_entries	long
;	O
bfd_boolean	int
bfd_check_format	function
(	O
bfd	struct
*	O
abfd	pointer
,	O
bfd_format	enum
format	enum
)	O
{	O
return	O
bfd_check_format_matches	function
(	O
abfd	pointer
,	O
format	enum
,	O
NULL	O
)	O
;	O
}	O
struct	O
bfd_preserve	struct
{	O
void	O
*	O
marker	pointer
;	O
void	O
*	O
tdata	union
;	O
flagword	int
flags	int
;	O
const	O
struct	O
bfd_arch_info	struct
*	O
arch_info	pointer
;	O
struct	O
bfd_section	struct
*	O
sections	pointer
;	O
struct	O
bfd_section	struct
*	O
section_last	pointer
;	O
unsigned	O
int	O
section_count	int
;	O
unsigned	O
int	O
section_id	int
;	O
struct	O
bfd_hash_table	struct
section_htab	struct
;	O
const	O
struct	O
bfd_build_id	struct
*	O
build_id	pointer
;	O
}	O
;	O
static	O
bfd_boolean	int
bfd_preserve_save	function
(	O
bfd	struct
*	O
abfd	pointer
,	O
struct	O
bfd_preserve	struct
*	O
preserve	pointer
)	O
{	O
preserve	pointer
->	O
tdata	union
=	O
abfd	pointer
->	O
tdata	union
.	O
any	pointer
;	O
preserve	pointer
->	O
arch_info	pointer
=	O
abfd	pointer
->	O
arch_info	pointer
;	O
preserve	pointer
->	O
flags	int
=	O
abfd	pointer
->	O
flags	int
;	O
preserve	pointer
->	O
sections	pointer
=	O
abfd	pointer
->	O
sections	pointer
;	O
preserve	pointer
->	O
section_last	pointer
=	O
abfd	pointer
->	O
section_last	pointer
;	O
preserve	pointer
->	O
section_count	int
=	O
abfd	pointer
->	O
section_count	int
;	O
preserve	pointer
->	O
section_id	int
=	O
_bfd_section_id	int
;	O
preserve	pointer
->	O
section_htab	struct
=	O
abfd	pointer
->	O
section_htab	struct
;	O
preserve	pointer
->	O
marker	pointer
=	O
bfd_alloc	function
(	O
abfd	pointer
,	O
1	int
)	O
;	O
preserve	pointer
->	O
build_id	pointer
=	O
abfd	pointer
->	O
build_id	pointer
;	O
if	O
(	O
preserve	pointer
->	O
marker	pointer
==	O
NULL	O
)	O
return	O
FALSE	int
;	O
return	O
bfd_hash_table_init	function
(	O
&	O
abfd	pointer
->	O
section_htab	struct
,	O
bfd_section_hash_newfunc	function
,	O
sizeof	O
(	O
struct	O
section_hash_entry	struct
)	O
)	O
;	O
}	O
static	O
void	O
bfd_reinit	function
(	O
bfd	struct
*	O
abfd	pointer
,	O
unsigned	O
int	O
section_id	int
)	O
{	O
abfd	pointer
->	O
tdata	union
.	O
any	pointer
=	O
NULL	O
;	O
abfd	pointer
->	O
arch_info	pointer
=	O
&	O
bfd_default_arch_struct	struct
;	O
abfd	pointer
->	O
flags	int
&=	O
BFD_FLAGS_SAVED	O
;	O
bfd_section_list_clear	function
(	O
abfd	pointer
)	O
;	O
_bfd_section_id	int
=	O
section_id	int
;	O
}	O
static	O
void	O
bfd_preserve_restore	function
(	O
bfd	struct
*	O
abfd	pointer
,	O
struct	O
bfd_preserve	struct
*	O
preserve	pointer
)	O
{	O
bfd_hash_table_free	function
(	O
&	O
abfd	pointer
->	O
section_htab	struct
)	O
;	O
abfd	pointer
->	O
tdata	union
.	O
any	pointer
=	O
preserve	pointer
->	O
tdata	union
;	O
abfd	pointer
->	O
arch_info	pointer
=	O
preserve	pointer
->	O
arch_info	pointer
;	O
abfd	pointer
->	O
flags	int
=	O
preserve	pointer
->	O
flags	int
;	O
abfd	pointer
->	O
section_htab	struct
=	O
preserve	pointer
->	O
section_htab	struct
;	O
abfd	pointer
->	O
sections	pointer
=	O
preserve	pointer
->	O
sections	pointer
;	O
abfd	pointer
->	O
section_last	pointer
=	O
preserve	pointer
->	O
section_last	pointer
;	O
abfd	pointer
->	O
section_count	int
=	O
preserve	pointer
->	O
section_count	int
;	O
_bfd_section_id	int
=	O
preserve	pointer
->	O
section_id	int
;	O
abfd	pointer
->	O
build_id	pointer
=	O
preserve	pointer
->	O
build_id	pointer
;	O
bfd_release	function
(	O
abfd	pointer
,	O
preserve	pointer
->	O
marker	pointer
)	O
;	O
preserve	pointer
->	O
marker	pointer
=	O
NULL	O
;	O
}	O
static	O
void	O
bfd_preserve_finish	function
(	O
bfd	struct
*	O
abfd	pointer
ATTRIBUTE_UNUSED	O
,	O
struct	O
bfd_preserve	struct
*	O
preserve	pointer
)	O
{	O
bfd_hash_table_free	function
(	O
&	O
preserve	pointer
->	O
section_htab	struct
)	O
;	O
preserve	pointer
->	O
marker	pointer
=	O
NULL	O
;	O
}	O
bfd_boolean	int
bfd_check_format_matches	function
(	O
bfd	struct
*	O
abfd	pointer
,	O
bfd_format	enum
format	enum
,	O
char	O
*	O
*	O
*	O
matching	pointer
)	O
{	O
extern	O
const	O
bfd_target	struct
binary_vec	struct
;	O
extern	O
const	O
bfd_target	struct
plugin_vec	struct
;	O
const	O
bfd_target	struct
*	O
const	O
*	O
target	pointer
;	O
const	O
bfd_target	struct
*	O
*	O
matching_vector	pointer
=	O
NULL	O
;	O
const	O
bfd_target	struct
*	O
save_targ	pointer
,	O
*	O
right_targ	pointer
,	O
*	O
ar_right_targ	pointer
,	O
*	O
match_targ	pointer
;	O
int	O
match_count	int
,	O
best_count	int
,	O
best_match	int
;	O
int	O
ar_match_index	int
;	O
unsigned	O
int	O
initial_section_id	int
=	O
_bfd_section_id	int
;	O
struct	O
bfd_preserve	struct
preserve	pointer
,	O
preserve_match	struct
;	O
if	O
(	O
matching	pointer
!=	O
NULL	O
)	O
*	O
matching	pointer
=	O
NULL	O
;	O
if	O
(	O
!	O
bfd_read_p	O
(	O
abfd	pointer
)	O
||	O
(	O
unsigned	O
int	O
)	O
abfd	pointer
->	O
format	enum
>=	O
(	O
unsigned	O
int	O
)	O
bfd_type_end	int
)	O
{	O
bfd_set_error	function
(	O
bfd_error_invalid_operation	int
)	O
;	O
return	O
FALSE	int
;	O
}	O
if	O
(	O
abfd	pointer
->	O
format	enum
!=	O
bfd_unknown	int
)	O
return	O
abfd	pointer
->	O
format	enum
==	O
format	enum
;	O
if	O
(	O
matching	pointer
!=	O
NULL	O
||	O
*	O
bfd_associated_vector	pointer
!=	O
NULL	O
)	O
{	O
bfd_size_type	long
amt	long
;	O
amt	long
=	O
sizeof	O
(	O
*	O
matching_vector	pointer
)	O
*	O
2	int
*	O
_bfd_target_vector_entries	long
;	O
matching_vector	pointer
=	O
(	O
const	O
bfd_target	struct
*	O
*	O
)	O
bfd_malloc	function
(	O
amt	long
)	O
;	O
if	O
(	O
!	O
matching_vector	pointer
)	O
return	O
FALSE	int
;	O
}	O
abfd	pointer
->	O
format	enum
=	O
format	enum
;	O
save_targ	pointer
=	O
abfd	pointer
->	O
xvec	pointer
;	O
preserve_match	struct
.	O
marker	pointer
=	O
NULL	O
;	O
if	O
(	O
!	O
bfd_preserve_save	function
(	O
abfd	pointer
,	O
&	O
preserve	pointer
)	O
)	O
goto	O
err_ret	O
;	O
if	O
(	O
!	O
abfd	pointer
->	O
target_defaulted	int
)	O
{	O
if	O
(	O
bfd_seek	function
(	O
abfd	pointer
,	O
(	O
file_ptr	long
)	O
0	int
,	O
SEEK_SET	int
)	O
!=	O
0	int
)	O
goto	O
err_ret	O
;	O
right_targ	pointer
=	O
BFD_SEND_FMT	O
(	O
abfd	pointer
,	O
_bfd_check_format	array
,	O
(	O
abfd	pointer
)	O
)	O
;	O
if	O
(	O
right_targ	pointer
)	O
goto	O
ok_ret	O
;	O
if	O
(	O
format	enum
==	O
bfd_archive	int
&&	O
save_targ	pointer
==	O
&	O
binary_vec	struct
)	O
goto	O
err_unrecog	O
;	O
}	O
right_targ	pointer
=	O
NULL	O
;	O
ar_right_targ	pointer
=	O
NULL	O
;	O
match_targ	pointer
=	O
NULL	O
;	O
best_match	int
=	O
256	int
;	O
best_count	int
=	O
0	int
;	O
match_count	int
=	O
0	int
;	O
ar_match_index	int
=	O
_bfd_target_vector_entries	long
;	O
for	O
(	O
target	pointer
=	O
bfd_target_vector	pointer
;	O
*	O
target	pointer
!=	O
NULL	O
;	O
target	pointer
++	O
)	O
{	O
const	O
bfd_target	struct
*	O
temp	pointer
;	O
void	O
*	O
*	O
high_water	pointer
;	O
if	O
(	O
*	O
target	pointer
==	O
&	O
binary_vec	struct
||	O
(	O
match_count	int
!=	O
0	int
&&	O
*	O
target	pointer
==	O
&	O
plugin_vec	struct
)	O
||	O
(	O
!	O
abfd	pointer
->	O
target_defaulted	int
&&	O
*	O
target	pointer
==	O
save_targ	pointer
)	O
)	O
continue	O
;	O
bfd_reinit	function
(	O
abfd	pointer
,	O
initial_section_id	int
)	O
;	O
if	O
(	O
preserve_match	struct
.	O
marker	pointer
)	O
high_water	pointer
=	O
&	O
preserve_match	struct
.	O
marker	pointer
;	O
else	O
high_water	pointer
=	O
&	O
preserve	pointer
.	O
marker	pointer
;	O
bfd_release	function
(	O
abfd	pointer
,	O
*	O
high_water	pointer
)	O
;	O
*	O
high_water	pointer
=	O
bfd_alloc	function
(	O
abfd	pointer
,	O
1	int
)	O
;	O
abfd	pointer
->	O
xvec	pointer
=	O
*	O
target	pointer
;	O
if	O
(	O
bfd_seek	function
(	O
abfd	pointer
,	O
(	O
file_ptr	long
)	O
0	int
,	O
SEEK_SET	int
)	O
!=	O
0	int
)	O
goto	O
err_ret	O
;	O
temp	pointer
=	O
BFD_SEND_FMT	O
(	O
abfd	pointer
,	O
_bfd_check_format	array
,	O
(	O
abfd	pointer
)	O
)	O
;	O
if	O
(	O
temp	pointer
)	O
{	O
int	O
match_priority	char
=	O
temp	pointer
->	O
match_priority	char
;	O
if	O
(	O
*	O
target	pointer
==	O
&	O
plugin_vec	struct
)	O
match_priority	char
=	O
(	O
*	O
target	pointer
)	O
->	O
match_priority	char
;	O
if	O
(	O
abfd	pointer
->	O
format	enum
!=	O
bfd_archive	int
||	O
(	O
bfd_has_map	function
(	O
abfd	pointer
)	O
&&	O
bfd_get_error	function
(	O
)	O
!=	O
bfd_error_wrong_object_format	int
)	O
)	O
{	O
if	O
(	O
temp	pointer
==	O
bfd_default_vector	array
[	O
0	int
]	O
)	O
goto	O
ok_ret	O
;	O
if	O
(	O
matching_vector	pointer
)	O
matching_vector	pointer
[	O
match_count	int
]	O
=	O
temp	pointer
;	O
match_count	int
++	O
;	O
if	O
(	O
match_priority	char
<	O
best_match	int
)	O
{	O
best_match	int
=	O
match_priority	char
;	O
best_count	int
=	O
0	int
;	O
}	O
if	O
(	O
match_priority	char
<=	O
best_match	int
)	O
{	O
right_targ	pointer
=	O
temp	pointer
;	O
best_count	int
++	O
;	O
}	O
}	O
else	O
{	O
if	O
(	O
ar_right_targ	pointer
!=	O
bfd_default_vector	array
[	O
0	int
]	O
)	O
ar_right_targ	pointer
=	O
*	O
target	pointer
;	O
if	O
(	O
matching_vector	pointer
)	O
matching_vector	pointer
[	O
ar_match_index	int
]	O
=	O
*	O
target	pointer
;	O
ar_match_index	int
++	O
;	O
}	O
if	O
(	O
preserve_match	struct
.	O
marker	pointer
==	O
NULL	O
)	O
{	O
match_targ	pointer
=	O
temp	pointer
;	O
if	O
(	O
!	O
bfd_preserve_save	function
(	O
abfd	pointer
,	O
&	O
preserve_match	struct
)	O
)	O
goto	O
err_ret	O
;	O
}	O
}	O
}	O
if	O
(	O
best_count	int
==	O
1	int
)	O
match_count	int
=	O
1	int
;	O
if	O
(	O
match_count	int
==	O
0	int
)	O
{	O
right_targ	pointer
=	O
ar_right_targ	pointer
;	O
if	O
(	O
right_targ	pointer
==	O
bfd_default_vector	array
[	O
0	int
]	O
)	O
{	O
match_count	int
=	O
1	int
;	O
}	O
else	O
{	O
match_count	int
=	O
ar_match_index	int
-	O
_bfd_target_vector_entries	long
;	O
if	O
(	O
matching_vector	pointer
&&	O
match_count	int
>	O
1	int
)	O
memcpy	function
(	O
matching_vector	pointer
,	O
matching_vector	pointer
+	O
_bfd_target_vector_entries	long
,	O
sizeof	O
(	O
*	O
matching_vector	pointer
)	O
*	O
match_count	int
)	O
;	O
}	O
}	O
if	O
(	O
match_count	int
>	O
1	int
)	O
{	O
const	O
bfd_target	struct
*	O
const	O
*	O
assoc	pointer
=	O
bfd_associated_vector	pointer
;	O
while	O
(	O
(	O
right_targ	pointer
=	O
*	O
assoc	pointer
++	O
)	O
!=	O
NULL	O
)	O
{	O
int	O
i	pointer
=	O
match_count	int
;	O
while	O
(	O
--	O
i	pointer
>=	O
0	int
)	O
if	O
(	O
matching_vector	pointer
[	O
i	pointer
]	O
==	O
right_targ	pointer
&&	O
right_targ	pointer
->	O
match_priority	char
<=	O
best_match	int
)	O
break	O
;	O
if	O
(	O
i	pointer
>=	O
0	int
)	O
{	O
match_count	int
=	O
1	int
;	O
break	O
;	O
}	O
}	O
}	O
if	O
(	O
matching_vector	pointer
&&	O
match_count	int
>	O
1	int
&&	O
best_count	int
!=	O
match_count	int
)	O
{	O
int	O
i	pointer
;	O
for	O
(	O
i	pointer
=	O
0	int
;	O
i	pointer
<	O
match_count	int
;	O
i	pointer
++	O
)	O
{	O
right_targ	pointer
=	O
matching_vector	pointer
[	O
i	pointer
]	O
;	O
if	O
(	O
right_targ	pointer
->	O
match_priority	char
<=	O
best_match	int
)	O
break	O
;	O
}	O
match_count	int
=	O
1	int
;	O
}	O
if	O
(	O
preserve_match	struct
.	O
marker	pointer
!=	O
NULL	O
)	O
bfd_preserve_restore	function
(	O
abfd	pointer
,	O
&	O
preserve_match	struct
)	O
;	O
if	O
(	O
match_count	int
==	O
1	int
)	O
{	O
abfd	pointer
->	O
xvec	pointer
=	O
right_targ	pointer
;	O
if	O
(	O
match_targ	pointer
!=	O
right_targ	pointer
)	O
{	O
bfd_reinit	function
(	O
abfd	pointer
,	O
initial_section_id	int
)	O
;	O
bfd_release	function
(	O
abfd	pointer
,	O
preserve	pointer
.	O
marker	pointer
)	O
;	O
if	O
(	O
bfd_seek	function
(	O
abfd	pointer
,	O
(	O
file_ptr	long
)	O
0	int
,	O
SEEK_SET	int
)	O
!=	O
0	int
)	O
goto	O
err_ret	O
;	O
match_targ	pointer
=	O
BFD_SEND_FMT	O
(	O
abfd	pointer
,	O
_bfd_check_format	array
,	O
(	O
abfd	pointer
)	O
)	O
;	O
BFD_ASSERT	O
(	O
match_targ	pointer
!=	O
NULL	O
)	O
;	O
}	O
ok_ret	O
:	O
if	O
(	O
abfd	pointer
->	O
direction	enum
==	O
both_direction	int
)	O
abfd	pointer
->	O
output_has_begun	int
=	O
TRUE	int
;	O
if	O
(	O
matching_vector	pointer
)	O
free	function
(	O
matching_vector	pointer
)	O
;	O
if	O
(	O
preserve_match	struct
.	O
marker	pointer
!=	O
NULL	O
)	O
bfd_preserve_finish	function
(	O
abfd	pointer
,	O
&	O
preserve_match	struct
)	O
;	O
bfd_preserve_finish	function
(	O
abfd	pointer
,	O
&	O
preserve	pointer
)	O
;	O
return	O
TRUE	int
;	O
}	O
if	O
(	O
match_count	int
==	O
0	int
)	O
{	O
err_unrecog	O
:	O
bfd_set_error	function
(	O
bfd_error_file_not_recognized	int
)	O
;	O
err_ret	O
:	O
abfd	pointer
->	O
xvec	pointer
=	O
save_targ	pointer
;	O
abfd	pointer
->	O
format	enum
=	O
bfd_unknown	int
;	O
if	O
(	O
matching_vector	pointer
)	O
free	function
(	O
matching_vector	pointer
)	O
;	O
if	O
(	O
preserve_match	struct
.	O
marker	pointer
!=	O
NULL	O
)	O
bfd_preserve_finish	function
(	O
abfd	pointer
,	O
&	O
preserve_match	struct
)	O
;	O
bfd_preserve_restore	function
(	O
abfd	pointer
,	O
&	O
preserve	pointer
)	O
;	O
return	O
FALSE	int
;	O
}	O
abfd	pointer
->	O
xvec	pointer
=	O
save_targ	pointer
;	O
abfd	pointer
->	O
format	enum
=	O
bfd_unknown	int
;	O
bfd_set_error	function
(	O
bfd_error_file_ambiguously_recognized	int
)	O
;	O
if	O
(	O
matching	pointer
)	O
{	O
*	O
matching	pointer
=	O
(	O
char	O
*	O
*	O
)	O
matching_vector	pointer
;	O
matching_vector	pointer
[	O
match_count	int
]	O
=	O
NULL	O
;	O
while	O
(	O
--	O
match_count	int
>=	O
0	int
)	O
{	O
const	O
char	O
*	O
name	pointer
=	O
matching_vector	pointer
[	O
match_count	int
]	O
->	O
name	pointer
;	O
*	O
(	O
const	O
char	O
*	O
*	O
)	O
&	O
matching_vector	pointer
[	O
match_count	int
]	O
=	O
name	pointer
;	O
}	O
}	O
else	O
if	O
(	O
matching_vector	pointer
)	O
free	function
(	O
matching_vector	pointer
)	O
;	O
if	O
(	O
preserve_match	struct
.	O
marker	pointer
!=	O
NULL	O
)	O
bfd_preserve_finish	function
(	O
abfd	pointer
,	O
&	O
preserve_match	struct
)	O
;	O
bfd_preserve_restore	function
(	O
abfd	pointer
,	O
&	O
preserve	pointer
)	O
;	O
return	O
FALSE	int
;	O
}	O
bfd_boolean	int
bfd_set_format	function
(	O
bfd	struct
*	O
abfd	pointer
,	O
bfd_format	enum
format	enum
)	O
{	O
if	O
(	O
bfd_read_p	O
(	O
abfd	pointer
)	O
||	O
(	O
unsigned	O
int	O
)	O
abfd	pointer
->	O
format	enum
>=	O
(	O
unsigned	O
int	O
)	O
bfd_type_end	int
)	O
{	O
bfd_set_error	function
(	O
bfd_error_invalid_operation	int
)	O
;	O
return	O
FALSE	int
;	O
}	O
if	O
(	O
abfd	pointer
->	O
format	enum
!=	O
bfd_unknown	int
)	O
return	O
abfd	pointer
->	O
format	enum
==	O
format	enum
;	O
abfd	pointer
->	O
format	enum
=	O
format	enum
;	O
if	O
(	O
!	O
BFD_SEND_FMT	O
(	O
abfd	pointer
,	O
_bfd_set_format	array
,	O
(	O
abfd	pointer
)	O
)	O
)	O
{	O
abfd	pointer
->	O
format	enum
=	O
bfd_unknown	int
;	O
return	O
FALSE	int
;	O
}	O
return	O
TRUE	int
;	O
}	O
const	O
char	O
*	O
bfd_format_string	function
(	O
bfd_format	enum
format	enum
)	O
{	O
if	O
(	O
(	O
(	O
int	O
)	O
format	enum
<	O
(	O
int	O
)	O
bfd_unknown	int
)	O
||	O
(	O
(	O
int	O
)	O
format	enum
>=	O
(	O
int	O
)	O
bfd_type_end	int
)	O
)	O
return	O
"invalid"	pointer
;	O
switch	O
(	O
format	enum
)	O
{	O
case	O
bfd_object	int
:	O
return	O
"object"	pointer
;	O
case	O
bfd_archive	int
:	O
return	O
"archive"	pointer
;	O
case	O
bfd_core	int
:	O
return	O
"core"	pointer
;	O
default	O
:	O
return	O
"unknown"	pointer
;	O
}	O
}	O
