static	O
int	O
address_radix	int
;	O
static	O
int	O
string_min	int
;	O
static	O
bfd_boolean	int
include_all_whitespace	int
;	O
static	O
bfd_boolean	int
print_addresses	int
;	O
static	O
bfd_boolean	int
print_filenames	int
;	O
static	O
bfd_boolean	int
datasection_only	int
;	O
static	O
char	O
*	O
target	pointer
;	O
static	O
char	O
encoding	char
;	O
static	O
int	O
encoding_bytes	int
;	O
static	O
char	O
*	O
output_separator	pointer
;	O
static	O
struct	O
option	struct
long_options	array
[	O
]	O
=	O
{	O
{	O
"all"	pointer
,	O
no_argument	int
,	O
NULL	O
,	O
'a'	O
}	O
,	O
{	O
"data"	pointer
,	O
no_argument	int
,	O
NULL	O
,	O
'd'	O
}	O
,	O
{	O
"print-file-name"	pointer
,	O
no_argument	int
,	O
NULL	O
,	O
'f'	O
}	O
,	O
{	O
"bytes"	pointer
,	O
required_argument	int
,	O
NULL	O
,	O
'n'	O
}	O
,	O
{	O
"radix"	pointer
,	O
required_argument	int
,	O
NULL	O
,	O
't'	O
}	O
,	O
{	O
"include-all-whitespace"	pointer
,	O
no_argument	int
,	O
NULL	O
,	O
'w'	O
}	O
,	O
{	O
"encoding"	pointer
,	O
required_argument	int
,	O
NULL	O
,	O
'e'	O
}	O
,	O
{	O
"target"	pointer
,	O
required_argument	int
,	O
NULL	O
,	O
'T'	O
}	O
,	O
{	O
"output-separator"	pointer
,	O
required_argument	int
,	O
NULL	O
,	O
's'	O
}	O
,	O
{	O
"help"	pointer
,	O
no_argument	int
,	O
NULL	O
,	O
'h'	O
}	O
,	O
{	O
"version"	pointer
,	O
no_argument	int
,	O
NULL	O
,	O
'v'	O
}	O
,	O
{	O
NULL	O
,	O
0	int
,	O
NULL	O
,	O
0	int
}	O
}	O
;	O
static	O
bfd_boolean	int
strings_file	function
(	O
char	O
*	O
)	O
;	O
static	O
void	O
print_strings	function
(	O
const	O
char	O
*	O
,	O
FILE	struct
*	O
,	O
file_ptr	long
,	O
int	O
,	O
int	O
,	O
char	O
*	O
)	O
;	O
static	O
void	O
usage	function
(	O
FILE	struct
*	O
,	O
int	O
)	O
ATTRIBUTE_NORETURN	O
;	O
int	O
main	function
(	O
int	O
,	O
char	O
*	O
*	O
)	O
;	O
int	O
main	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
int	O
optc	int
;	O
int	O
exit_status	int
=	O
0	int
;	O
bfd_boolean	int
files_given	int
=	O
FALSE	int
;	O
char	O
*	O
s	pointer
;	O
int	O
numeric_opt	int
=	O
0	int
;	O
setlocale	function
(	O
LC_ALL	O
,	O
""	pointer
)	O
;	O
bindtextdomain	function
(	O
PACKAGE	pointer
,	O
LOCALEDIR	O
)	O
;	O
textdomain	function
(	O
PACKAGE	pointer
)	O
;	O
program_name	pointer
=	O
argv	pointer
[	O
0	int
]	O
;	O
xmalloc_set_program_name	function
(	O
program_name	pointer
)	O
;	O
bfd_set_error_program_name	function
(	O
program_name	pointer
)	O
;	O
expandargv	function
(	O
&	O
argc	int
,	O
&	O
argv	pointer
)	O
;	O
string_min	int
=	O
4	int
;	O
include_all_whitespace	int
=	O
FALSE	int
;	O
print_addresses	int
=	O
FALSE	int
;	O
print_filenames	int
=	O
FALSE	int
;	O
if	O
(	O
DEFAULT_STRINGS_ALL	int
)	O
datasection_only	int
=	O
FALSE	int
;	O
else	O
datasection_only	int
=	O
TRUE	int
;	O
target	pointer
=	O
NULL	O
;	O
encoding	char
=	O
's'	O
;	O
output_separator	pointer
=	O
NULL	O
;	O
while	O
(	O
(	O
optc	int
=	O
getopt_long	function
(	O
argc	int
,	O
argv	pointer
,	O
"adfhHn:wot:e:T:s:Vv0123456789"	pointer
,	O
long_options	array
,	O
(	O
int	O
*	O
)	O
0	int
)	O
)	O
!=	O
EOF	O
)	O
{	O
switch	O
(	O
optc	int
)	O
{	O
case	O
'a'	O
:	O
datasection_only	int
=	O
FALSE	int
;	O
break	O
;	O
case	O
'd'	O
:	O
datasection_only	int
=	O
TRUE	int
;	O
break	O
;	O
case	O
'f'	O
:	O
print_filenames	int
=	O
TRUE	int
;	O
break	O
;	O
case	O
'H'	O
:	O
case	O
'h'	O
:	O
usage	function
(	O
stdout	pointer
,	O
0	int
)	O
;	O
case	O
'n'	O
:	O
string_min	int
=	O
(	O
int	O
)	O
strtoul	function
(	O
optarg	pointer
,	O
&	O
s	pointer
,	O
0	int
)	O
;	O
if	O
(	O
s	pointer
!=	O
NULL	O
&&	O
*	O
s	pointer
!=	O
0	int
)	O
fatal	function
(	O
_	O
(	O
"invalid integer argument %s"	pointer
)	O
,	O
optarg	pointer
)	O
;	O
break	O
;	O
case	O
'w'	O
:	O
include_all_whitespace	int
=	O
TRUE	int
;	O
break	O
;	O
case	O
'o'	O
:	O
print_addresses	int
=	O
TRUE	int
;	O
address_radix	int
=	O
8	int
;	O
break	O
;	O
case	O
't'	O
:	O
print_addresses	int
=	O
TRUE	int
;	O
if	O
(	O
optarg	pointer
[	O
1	int
]	O
!=	O
'\0'	O
)	O
usage	function
(	O
stderr	pointer
,	O
1	int
)	O
;	O
switch	O
(	O
optarg	pointer
[	O
0	int
]	O
)	O
{	O
case	O
'o'	O
:	O
address_radix	int
=	O
8	int
;	O
break	O
;	O
case	O
'd'	O
:	O
address_radix	int
=	O
10	int
;	O
break	O
;	O
case	O
'x'	O
:	O
address_radix	int
=	O
16	int
;	O
break	O
;	O
default	O
:	O
usage	function
(	O
stderr	pointer
,	O
1	int
)	O
;	O
}	O
break	O
;	O
case	O
'T'	O
:	O
target	pointer
=	O
optarg	pointer
;	O
break	O
;	O
case	O
'e'	O
:	O
if	O
(	O
optarg	pointer
[	O
1	int
]	O
!=	O
'\0'	O
)	O
usage	function
(	O
stderr	pointer
,	O
1	int
)	O
;	O
encoding	char
=	O
optarg	pointer
[	O
0	int
]	O
;	O
break	O
;	O
case	O
's'	O
:	O
output_separator	pointer
=	O
optarg	pointer
;	O
break	O
;	O
case	O
'V'	O
:	O
case	O
'v'	O
:	O
print_version	function
(	O
"strings"	pointer
)	O
;	O
break	O
;	O
case	O
'?'	O
:	O
usage	function
(	O
stderr	pointer
,	O
1	int
)	O
;	O
default	O
:	O
numeric_opt	int
=	O
optind	int
;	O
break	O
;	O
}	O
}	O
if	O
(	O
numeric_opt	int
!=	O
0	int
)	O
{	O
string_min	int
=	O
(	O
int	O
)	O
strtoul	function
(	O
argv	pointer
[	O
numeric_opt	int
-	O
1	int
]	O
+	O
1	int
,	O
&	O
s	pointer
,	O
0	int
)	O
;	O
if	O
(	O
s	pointer
!=	O
NULL	O
&&	O
*	O
s	pointer
!=	O
0	int
)	O
fatal	function
(	O
_	O
(	O
"invalid integer argument %s"	pointer
)	O
,	O
argv	pointer
[	O
numeric_opt	int
-	O
1	int
]	O
+	O
1	int
)	O
;	O
}	O
if	O
(	O
string_min	int
<	O
1	int
)	O
fatal	function
(	O
_	O
(	O
"invalid minimum string length %d"	pointer
)	O
,	O
string_min	int
)	O
;	O
switch	O
(	O
encoding	char
)	O
{	O
case	O
'S'	O
:	O
case	O
's'	O
:	O
encoding_bytes	int
=	O
1	int
;	O
break	O
;	O
case	O
'b'	O
:	O
case	O
'l'	O
:	O
encoding_bytes	int
=	O
2	int
;	O
break	O
;	O
case	O
'B'	O
:	O
case	O
'L'	O
:	O
encoding_bytes	int
=	O
4	int
;	O
break	O
;	O
default	O
:	O
usage	function
(	O
stderr	pointer
,	O
1	int
)	O
;	O
}	O
if	O
(	O
bfd_init	function
(	O
)	O
!=	O
BFD_INIT_MAGIC	O
)	O
fatal	function
(	O
_	O
(	O
"fatal error: libbfd ABI mismatch"	pointer
)	O
)	O
;	O
set_default_bfd_target	function
(	O
)	O
;	O
if	O
(	O
optind	int
>=	O
argc	int
)	O
{	O
datasection_only	int
=	O
FALSE	int
;	O
SET_BINARY	O
(	O
fileno	function
(	O
stdin	pointer
)	O
)	O
;	O
print_strings	function
(	O
"{standard input}"	pointer
,	O
stdin	pointer
,	O
0	int
,	O
0	int
,	O
0	int
,	O
(	O
char	O
*	O
)	O
NULL	O
)	O
;	O
files_given	int
=	O
TRUE	int
;	O
}	O
else	O
{	O
for	O
(	O
;	O
optind	int
<	O
argc	int
;	O
++	O
optind	int
)	O
{	O
if	O
(	O
strcmp	function
(	O
argv	pointer
[	O
optind	int
]	O
,	O
"-"	pointer
)	O
==	O
0	int
)	O
datasection_only	int
=	O
FALSE	int
;	O
else	O
{	O
files_given	int
=	O
TRUE	int
;	O
exit_status	int
|=	O
!	O
strings_file	function
(	O
argv	pointer
[	O
optind	int
]	O
)	O
;	O
}	O
}	O
}	O
if	O
(	O
!	O
files_given	int
)	O
usage	function
(	O
stderr	pointer
,	O
1	int
)	O
;	O
return	O
(	O
exit_status	int
)	O
;	O
}	O
static	O
void	O
strings_a_section	function
(	O
bfd	struct
*	O
abfd	pointer
,	O
asection	struct
*	O
sect	pointer
,	O
const	O
char	O
*	O
filename	pointer
,	O
bfd_boolean	int
*	O
got_a_section	pointer
)	O
{	O
bfd_size_type	long
sectsize	long
;	O
bfd_byte	char
*	O
mem	pointer
;	O
if	O
(	O
(	O
sect	pointer
->	O
flags	int
&	O
DATA_FLAGS	O
)	O
!=	O
DATA_FLAGS	O
)	O
return	O
;	O
sectsize	long
=	O
bfd_section_size	function
(	O
sect	pointer
)	O
;	O
if	O
(	O
sectsize	long
==	O
0	int
)	O
return	O
;	O
if	O
(	O
!	O
bfd_malloc_and_get_section	function
(	O
abfd	pointer
,	O
sect	pointer
,	O
&	O
mem	pointer
)	O
)	O
{	O
non_fatal	function
(	O
_	O
(	O
"%s: Reading section %s failed: %s"	pointer
)	O
,	O
filename	pointer
,	O
sect	pointer
->	O
name	pointer
,	O
bfd_errmsg	function
(	O
bfd_get_error	function
(	O
)	O
)	O
)	O
;	O
return	O
;	O
}	O
*	O
got_a_section	pointer
=	O
TRUE	int
;	O
print_strings	function
(	O
filename	pointer
,	O
NULL	O
,	O
sect	pointer
->	O
filepos	long
,	O
0	int
,	O
sectsize	long
,	O
(	O
char	O
*	O
)	O
mem	pointer
)	O
;	O
free	function
(	O
mem	pointer
)	O
;	O
}	O
static	O
bfd_boolean	int
strings_object_file	function
(	O
const	O
char	O
*	O
file	pointer
)	O
{	O
bfd	struct
*	O
abfd	pointer
;	O
asection	struct
*	O
s	pointer
;	O
bfd_boolean	int
got_a_section	pointer
;	O
abfd	pointer
=	O
bfd_openr	function
(	O
file	pointer
,	O
target	pointer
)	O
;	O
if	O
(	O
abfd	pointer
==	O
NULL	O
)	O
return	O
FALSE	int
;	O
if	O
(	O
!	O
bfd_check_format	function
(	O
abfd	pointer
,	O
bfd_object	int
)	O
)	O
{	O
bfd_close	function
(	O
abfd	pointer
)	O
;	O
return	O
FALSE	int
;	O
}	O
got_a_section	pointer
=	O
FALSE	int
;	O
for	O
(	O
s	pointer
=	O
abfd	pointer
->	O
sections	pointer
;	O
s	pointer
!=	O
NULL	O
;	O
s	pointer
=	O
s	pointer
->	O
next	pointer
)	O
strings_a_section	function
(	O
abfd	pointer
,	O
s	pointer
,	O
file	pointer
,	O
&	O
got_a_section	pointer
)	O
;	O
if	O
(	O
!	O
bfd_close	function
(	O
abfd	pointer
)	O
)	O
{	O
bfd_nonfatal	function
(	O
file	pointer
)	O
;	O
return	O
FALSE	int
;	O
}	O
return	O
got_a_section	pointer
;	O
}	O
static	O
bfd_boolean	int
strings_file	function
(	O
char	O
*	O
file	pointer
)	O
{	O
struct	O
stat	struct
st	struct
;	O
if	O
(	O
stat	struct
(	O
file	pointer
,	O
&	O
st	struct
)	O
<	O
0	int
)	O
{	O
if	O
(	O
errno	O
==	O
ENOENT	int
)	O
non_fatal	function
(	O
_	O
(	O
"'%s': No such file"	pointer
)	O
,	O
file	pointer
)	O
;	O
else	O
non_fatal	function
(	O
_	O
(	O
"Warning: could not locate '%s'.  reason: %s"	pointer
)	O
,	O
file	pointer
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
return	O
FALSE	int
;	O
}	O
else	O
if	O
(	O
S_ISDIR	O
(	O
st	struct
.	O
st_mode	int
)	O
)	O
{	O
non_fatal	function
(	O
_	O
(	O
"Warning: '%s' is a directory"	pointer
)	O
,	O
file	pointer
)	O
;	O
return	O
FALSE	int
;	O
}	O
if	O
(	O
!	O
datasection_only	int
||	O
!	O
strings_object_file	function
(	O
file	pointer
)	O
)	O
{	O
FILE	struct
*	O
stream	pointer
;	O
stream	pointer
=	O
fopen	function
(	O
file	pointer
,	O
FOPEN_RB	pointer
)	O
;	O
if	O
(	O
stream	pointer
==	O
NULL	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: "	pointer
,	O
program_name	pointer
)	O
;	O
perror	function
(	O
file	pointer
)	O
;	O
return	O
FALSE	int
;	O
}	O
print_strings	function
(	O
file	pointer
,	O
stream	pointer
,	O
(	O
file_ptr	long
)	O
0	int
,	O
0	int
,	O
0	int
,	O
(	O
char	O
*	O
)	O
0	int
)	O
;	O
if	O
(	O
fclose	function
(	O
stream	pointer
)	O
==	O
EOF	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: "	pointer
,	O
program_name	pointer
)	O
;	O
perror	function
(	O
file	pointer
)	O
;	O
return	O
FALSE	int
;	O
}	O
}	O
return	O
TRUE	int
;	O
}	O
static	O
long	O
get_char	function
(	O
FILE	struct
*	O
stream	pointer
,	O
file_ptr	long
*	O
address	long
,	O
int	O
*	O
magiccount	pointer
,	O
char	O
*	O
*	O
magic	pointer
)	O
{	O
int	O
c	int
,	O
i	pointer
;	O
long	O
r	long
=	O
0	int
;	O
for	O
(	O
i	pointer
=	O
0	int
;	O
i	pointer
<	O
encoding_bytes	int
;	O
i	pointer
++	O
)	O
{	O
if	O
(	O
*	O
magiccount	pointer
)	O
{	O
(	O
*	O
magiccount	pointer
)	O
--	O
;	O
c	int
=	O
*	O
(	O
*	O
magic	pointer
)	O
++	O
;	O
}	O
else	O
{	O
if	O
(	O
stream	pointer
==	O
NULL	O
)	O
return	O
EOF	O
;	O
c	int
=	O
getc_unlocked	function
(	O
stream	pointer
)	O
;	O
if	O
(	O
c	int
==	O
EOF	O
)	O
return	O
EOF	O
;	O
}	O
(	O
*	O
address	long
)	O
++	O
;	O
r	long
=	O
(	O
r	long
<<	O
8	int
)	O
|	O
(	O
c	int
&	O
0xff	int
)	O
;	O
}	O
switch	O
(	O
encoding	char
)	O
{	O
default	O
:	O
break	O
;	O
case	O
'l'	O
:	O
r	long
=	O
(	O
(	O
r	long
&	O
0xff	int
)	O
<<	O
8	int
)	O
|	O
(	O
(	O
r	long
&	O
0xff00	int
)	O
>>	O
8	int
)	O
;	O
break	O
;	O
case	O
'L'	O
:	O
r	long
=	O
(	O
(	O
(	O
r	long
&	O
0xff	int
)	O
<<	O
24	int
)	O
|	O
(	O
(	O
r	long
&	O
0xff00	int
)	O
<<	O
8	int
)	O
|	O
(	O
(	O
r	long
&	O
0xff0000	int
)	O
>>	O
8	int
)	O
|	O
(	O
(	O
r	long
&	O
0xff000000	int
)	O
>>	O
24	int
)	O
)	O
;	O
break	O
;	O
}	O
return	O
r	long
;	O
}	O
static	O
void	O
unget_part_char	function
(	O
long	O
c	int
,	O
file_ptr	long
*	O
address	long
,	O
int	O
*	O
magiccount	pointer
,	O
char	O
*	O
*	O
magic	pointer
)	O
{	O
static	O
char	O
tmp	array
[	O
4	int
]	O
;	O
if	O
(	O
encoding_bytes	int
>	O
1	int
)	O
{	O
*	O
address	long
-=	O
encoding_bytes	int
-	O
1	int
;	O
if	O
(	O
*	O
magiccount	pointer
==	O
0	int
)	O
{	O
switch	O
(	O
encoding	char
)	O
{	O
default	O
:	O
break	O
;	O
case	O
'b'	O
:	O
tmp	array
[	O
0	int
]	O
=	O
c	int
&	O
0xff	int
;	O
*	O
magiccount	pointer
=	O
1	int
;	O
break	O
;	O
case	O
'l'	O
:	O
tmp	array
[	O
0	int
]	O
=	O
(	O
c	int
>>	O
8	int
)	O
&	O
0xff	int
;	O
*	O
magiccount	pointer
=	O
1	int
;	O
break	O
;	O
case	O
'B'	O
:	O
tmp	array
[	O
0	int
]	O
=	O
(	O
c	int
>>	O
16	int
)	O
&	O
0xff	int
;	O
tmp	array
[	O
1	int
]	O
=	O
(	O
c	int
>>	O
8	int
)	O
&	O
0xff	int
;	O
tmp	array
[	O
2	int
]	O
=	O
c	int
&	O
0xff	int
;	O
*	O
magiccount	pointer
=	O
3	int
;	O
break	O
;	O
case	O
'L'	O
:	O
tmp	array
[	O
0	int
]	O
=	O
(	O
c	int
>>	O
8	int
)	O
&	O
0xff	int
;	O
tmp	array
[	O
1	int
]	O
=	O
(	O
c	int
>>	O
16	int
)	O
&	O
0xff	int
;	O
tmp	array
[	O
2	int
]	O
=	O
(	O
c	int
>>	O
24	int
)	O
&	O
0xff	int
;	O
*	O
magiccount	pointer
=	O
3	int
;	O
break	O
;	O
}	O
*	O
magic	pointer
=	O
tmp	array
;	O
}	O
else	O
{	O
*	O
magic	pointer
-=	O
encoding_bytes	int
-	O
1	int
;	O
*	O
magiccount	pointer
+=	O
encoding_bytes	int
-	O
1	int
;	O
}	O
}	O
}	O
static	O
void	O
print_strings	function
(	O
const	O
char	O
*	O
filename	pointer
,	O
FILE	struct
*	O
stream	pointer
,	O
file_ptr	long
address	long
,	O
int	O
stop_point	int
,	O
int	O
magiccount	pointer
,	O
char	O
*	O
magic	pointer
)	O
{	O
char	O
*	O
buf	pointer
=	O
(	O
char	O
*	O
)	O
xmalloc	function
(	O
sizeof	O
(	O
char	O
)	O
*	O
(	O
string_min	int
+	O
1	int
)	O
)	O
;	O
while	O
(	O
1	int
)	O
{	O
file_ptr	long
start	long
;	O
int	O
i	pointer
;	O
long	O
c	int
;	O
tryline	O
:	O
if	O
(	O
stop_point	int
&&	O
address	long
>=	O
stop_point	int
)	O
break	O
;	O
start	long
=	O
address	long
;	O
for	O
(	O
i	pointer
=	O
0	int
;	O
i	pointer
<	O
string_min	int
;	O
i	pointer
++	O
)	O
{	O
c	int
=	O
get_char	function
(	O
stream	pointer
,	O
&	O
address	long
,	O
&	O
magiccount	pointer
,	O
&	O
magic	pointer
)	O
;	O
if	O
(	O
c	int
==	O
EOF	O
)	O
{	O
free	function
(	O
buf	pointer
)	O
;	O
return	O
;	O
}	O
if	O
(	O
!	O
STRING_ISGRAPHIC	O
(	O
c	int
)	O
)	O
{	O
unget_part_char	function
(	O
c	int
,	O
&	O
address	long
,	O
&	O
magiccount	pointer
,	O
&	O
magic	pointer
)	O
;	O
goto	O
tryline	O
;	O
}	O
buf	pointer
[	O
i	pointer
]	O
=	O
c	int
;	O
}	O
if	O
(	O
print_filenames	int
)	O
printf	function
(	O
"%s: "	pointer
,	O
filename	pointer
)	O
;	O
if	O
(	O
print_addresses	int
)	O
switch	O
(	O
address_radix	int
)	O
{	O
case	O
8	int
:	O
if	O
(	O
sizeof	O
(	O
start	long
)	O
>	O
sizeof	O
(	O
long	O
)	O
)	O
{	O
printf	function
(	O
"%7llo "	pointer
,	O
(	O
unsigned	O
long	O
long	O
)	O
start	long
)	O
;	O
}	O
else	O
printf	function
(	O
"%7lo "	pointer
,	O
(	O
unsigned	O
long	O
)	O
start	long
)	O
;	O
break	O
;	O
case	O
10	int
:	O
if	O
(	O
sizeof	O
(	O
start	long
)	O
>	O
sizeof	O
(	O
long	O
)	O
)	O
{	O
printf	function
(	O
"%7llu "	pointer
,	O
(	O
unsigned	O
long	O
long	O
)	O
start	long
)	O
;	O
}	O
else	O
printf	function
(	O
"%7ld "	pointer
,	O
(	O
long	O
)	O
start	long
)	O
;	O
break	O
;	O
case	O
16	int
:	O
if	O
(	O
sizeof	O
(	O
start	long
)	O
>	O
sizeof	O
(	O
long	O
)	O
)	O
{	O
printf	function
(	O
"%7llx "	pointer
,	O
(	O
unsigned	O
long	O
long	O
)	O
start	long
)	O
;	O
}	O
else	O
printf	function
(	O
"%7lx "	pointer
,	O
(	O
unsigned	O
long	O
)	O
start	long
)	O
;	O
break	O
;	O
}	O
buf	pointer
[	O
i	pointer
]	O
=	O
'\0'	O
;	O
fputs	function
(	O
buf	pointer
,	O
stdout	pointer
)	O
;	O
while	O
(	O
1	int
)	O
{	O
c	int
=	O
get_char	function
(	O
stream	pointer
,	O
&	O
address	long
,	O
&	O
magiccount	pointer
,	O
&	O
magic	pointer
)	O
;	O
if	O
(	O
c	int
==	O
EOF	O
)	O
break	O
;	O
if	O
(	O
!	O
STRING_ISGRAPHIC	O
(	O
c	int
)	O
)	O
{	O
unget_part_char	function
(	O
c	int
,	O
&	O
address	long
,	O
&	O
magiccount	pointer
,	O
&	O
magic	pointer
)	O
;	O
break	O
;	O
}	O
putchar	function
(	O
c	int
)	O
;	O
}	O
if	O
(	O
output_separator	pointer
)	O
fputs	function
(	O
output_separator	pointer
,	O
stdout	pointer
)	O
;	O
else	O
putchar	function
(	O
'\n'	O
)	O
;	O
}	O
free	function
(	O
buf	pointer
)	O
;	O
}	O
static	O
void	O
usage	function
(	O
FILE	struct
*	O
stream	pointer
,	O
int	O
status	int
)	O
{	O
fprintf	function
(	O
stream	pointer
,	O
_	O
(	O
"Usage: %s [option(s)] [file(s)]\n"	pointer
)	O
,	O
program_name	pointer
)	O
;	O
fprintf	function
(	O
stream	pointer
,	O
_	O
(	O
" Display printable strings in [file(s)] (stdin by default)\n"	pointer
)	O
)	O
;	O
fprintf	function
(	O
stream	pointer
,	O
_	O
(	O
" The options are:\n"	pointer
)	O
)	O
;	O
if	O
(	O
DEFAULT_STRINGS_ALL	int
)	O
fprintf	function
(	O
stream	pointer
,	O
_	O
(	O
"  -a - --all                Scan the entire file, not just the data section [default]\n  -d --data                 Only scan the data sections in the file\n"	pointer
)	O
)	O
;	O
else	O
fprintf	function
(	O
stream	pointer
,	O
_	O
(	O
"  -a - --all                Scan the entire file, not just the data section\n  -d --data                 Only scan the data sections in the file [default]\n"	pointer
)	O
)	O
;	O
fprintf	function
(	O
stream	pointer
,	O
_	O
(	O
"  -f --print-file-name      Print the name of the file before each string\n  -n --bytes=[number]       Locate & print any NUL-terminated sequence of at\n  -<number>                   least [number] characters (default 4).\n  -t --radix={o,d,x}        Print the location of the string in base 8, 10 or 16\n  -w --include-all-whitespace Include all whitespace as valid string characters\n  -o                        An alias for --radix=o\n  -T --target=<BFDNAME>     Specify the binary file format\n  -e --encoding={s,S,b,l,B,L} Select character size and endianness:\n                            s = 7-bit, S = 8-bit, {b,l} = 16-bit, {B,L} = 32-bit\n  -s --output-separator=<string> String used to separate strings in output.\n  @<file>                   Read options from <file>\n  -h --help                 Display this information\n  -v -V --version           Print the program's version number\n"	pointer
)	O
)	O
;	O
list_supported_targets	function
(	O
program_name	pointer
,	O
stream	pointer
)	O
;	O
if	O
(	O
REPORT_BUGS_TO	pointer
[	O
0	int
]	O
&&	O
status	int
==	O
0	int
)	O
fprintf	function
(	O
stream	pointer
,	O
_	O
(	O
"Report bugs to %s\n"	pointer
)	O
,	O
REPORT_BUGS_TO	pointer
)	O
;	O
exit	function
(	O
status	int
)	O
;	O
}	O
