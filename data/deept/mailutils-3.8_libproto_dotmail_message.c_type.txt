void	O
mu_dotmail_message_free	function
(	O
struct	O
mu_dotmail_message	struct
*	O
dmsg	pointer
)	O
{	O
if	O
(	O
dmsg	pointer
)	O
{	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
MU_DOTMAIL_HDR_MAX	int
;	O
i	int
++	O
)	O
free	function
(	O
dmsg	pointer
->	O
hdr	array
[	O
i	int
]	O
)	O
;	O
mu_message_destroy	function
(	O
&	O
dmsg	pointer
->	O
message	pointer
,	O
dmsg	pointer
)	O
;	O
free	function
(	O
dmsg	pointer
)	O
;	O
}	O
}	O
static	O
int	O
_msg_stream_setup	function
(	O
mu_message_t	pointer
msg	pointer
,	O
struct	O
mu_dotmail_message	struct
*	O
dmsg	pointer
)	O
{	O
mu_stream_t	pointer
stream	pointer
;	O
int	O
rc	int
;	O
rc	int
=	O
mu_streamref_create_abridged	function
(	O
&	O
stream	pointer
,	O
dmsg	pointer
->	O
mbox	pointer
->	O
mailbox	pointer
->	O
stream	pointer
,	O
dmsg	pointer
->	O
message_start	long
,	O
dmsg	pointer
->	O
message_end	long
-	O
1	int
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
rc	int
=	O
mu_message_set_stream	function
(	O
msg	pointer
,	O
stream	pointer
,	O
dmsg	pointer
)	O
;	O
return	O
rc	int
;	O
}	O
static	O
int	O
dotmail_body_size	function
(	O
mu_body_t	pointer
body	pointer
,	O
size_t	long
*	O
psize	pointer
)	O
{	O
mu_message_t	pointer
msg	pointer
=	O
mu_body_get_owner	function
(	O
body	pointer
)	O
;	O
struct	O
mu_dotmail_message	struct
*	O
dmsg	pointer
=	O
mu_message_get_owner	function
(	O
msg	pointer
)	O
;	O
if	O
(	O
!	O
dmsg	pointer
)	O
return	O
EINVAL	int
;	O
if	O
(	O
psize	pointer
)	O
*	O
psize	pointer
=	O
dmsg	pointer
->	O
body_size	long
;	O
return	O
0	int
;	O
}	O
static	O
int	O
dotmail_body_lines	function
(	O
mu_body_t	pointer
body	pointer
,	O
size_t	long
*	O
plines	pointer
)	O
{	O
mu_message_t	pointer
msg	pointer
=	O
mu_body_get_owner	function
(	O
body	pointer
)	O
;	O
struct	O
mu_dotmail_message	struct
*	O
dmsg	pointer
=	O
mu_message_get_owner	function
(	O
msg	pointer
)	O
;	O
if	O
(	O
!	O
dmsg	pointer
)	O
return	O
EINVAL	int
;	O
if	O
(	O
!	O
dmsg	pointer
->	O
body_lines_scanned	int
)	O
{	O
int	O
rc	int
;	O
mu_stream_t	pointer
str	pointer
;	O
char	O
c	char
;	O
size_t	long
n	int
;	O
rc	int
=	O
mu_body_get_streamref	function
(	O
body	pointer
,	O
&	O
str	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
dmsg	pointer
->	O
body_lines	long
=	O
0	int
;	O
while	O
(	O
(	O
rc	int
=	O
mu_stream_read	function
(	O
str	pointer
,	O
&	O
c	char
,	O
1	int
,	O
&	O
n	int
)	O
)	O
==	O
0	int
&&	O
n	int
==	O
1	int
)	O
{	O
if	O
(	O
c	char
==	O
'\n'	O
)	O
dmsg	pointer
->	O
body_lines	long
++	O
;	O
}	O
mu_stream_unref	function
(	O
str	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
dmsg	pointer
->	O
body_lines_scanned	int
=	O
1	int
;	O
}	O
if	O
(	O
plines	pointer
)	O
*	O
plines	pointer
=	O
dmsg	pointer
->	O
body_lines	long
;	O
return	O
0	int
;	O
}	O
static	O
int	O
_msg_body_setup	function
(	O
mu_message_t	pointer
msg	pointer
,	O
struct	O
mu_dotmail_message	struct
*	O
dmsg	pointer
)	O
{	O
mu_body_t	pointer
body	pointer
;	O
mu_stream_t	pointer
stream	pointer
,	O
flt	pointer
;	O
int	O
rc	int
;	O
if	O
(	O
dmsg	pointer
->	O
body_dot_stuffed	int
)	O
{	O
rc	int
=	O
mu_streamref_create_abridged	function
(	O
&	O
stream	pointer
,	O
dmsg	pointer
->	O
mbox	pointer
->	O
mailbox	pointer
->	O
stream	pointer
,	O
dmsg	pointer
->	O
body_start	long
,	O
dmsg	pointer
->	O
message_end	long
+	O
1	int
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
rc	int
=	O
mu_filter_create	function
(	O
&	O
flt	pointer
,	O
stream	pointer
,	O
"DOT"	pointer
,	O
MU_FILTER_DECODE	int
,	O
MU_STREAM_READ	int
)	O
;	O
mu_stream_unref	function
(	O
stream	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
rc	int
=	O
mu_rdcache_stream_create	function
(	O
&	O
stream	pointer
,	O
flt	pointer
,	O
MU_STREAM_READ	int
|	O
MU_STREAM_SEEK	int
)	O
;	O
mu_stream_unref	function
(	O
flt	pointer
)	O
;	O
}	O
else	O
{	O
rc	int
=	O
mu_streamref_create_abridged	function
(	O
&	O
stream	pointer
,	O
dmsg	pointer
->	O
mbox	pointer
->	O
mailbox	pointer
->	O
stream	pointer
,	O
dmsg	pointer
->	O
body_start	long
,	O
dmsg	pointer
->	O
message_end	long
-	O
1	int
)	O
;	O
}	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
rc	int
=	O
mu_body_create	function
(	O
&	O
body	pointer
,	O
msg	pointer
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
mu_body_set_stream	function
(	O
body	pointer
,	O
stream	pointer
,	O
msg	pointer
)	O
;	O
mu_body_set_size	function
(	O
body	pointer
,	O
dotmail_body_size	function
,	O
msg	pointer
)	O
;	O
mu_body_set_lines	function
(	O
body	pointer
,	O
dotmail_body_lines	function
,	O
msg	pointer
)	O
;	O
mu_body_clear_modified	function
(	O
body	pointer
)	O
;	O
mu_message_set_body	function
(	O
msg	pointer
,	O
body	pointer
,	O
dmsg	pointer
)	O
;	O
}	O
return	O
rc	int
;	O
}	O
int	O
mu_dotmail_message_attr_load	function
(	O
struct	O
mu_dotmail_message	struct
*	O
dmsg	pointer
)	O
{	O
if	O
(	O
!	O
dmsg	pointer
->	O
attr_scanned	int
)	O
{	O
if	O
(	O
dmsg	pointer
->	O
hdr	array
[	O
mu_dotmail_hdr_status	int
]	O
)	O
mu_string_to_flags	function
(	O
dmsg	pointer
->	O
hdr	array
[	O
mu_dotmail_hdr_status	int
]	O
,	O
&	O
dmsg	pointer
->	O
attr_flags	int
)	O
;	O
else	O
dmsg	pointer
->	O
attr_flags	int
=	O
0	int
;	O
dmsg	pointer
->	O
attr_scanned	int
=	O
1	int
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
dotmail_get_attr_flags	function
(	O
mu_attribute_t	pointer
attr	pointer
,	O
int	O
*	O
pflags	pointer
)	O
{	O
mu_message_t	pointer
msg	pointer
=	O
mu_attribute_get_owner	function
(	O
attr	pointer
)	O
;	O
struct	O
mu_dotmail_message	struct
*	O
dmsg	pointer
=	O
mu_message_get_owner	function
(	O
msg	pointer
)	O
;	O
if	O
(	O
dmsg	pointer
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
mu_dotmail_message_attr_load	function
(	O
dmsg	pointer
)	O
;	O
if	O
(	O
pflags	pointer
)	O
*	O
pflags	pointer
=	O
dmsg	pointer
->	O
attr_flags	int
;	O
return	O
0	int
;	O
}	O
static	O
int	O
dotmail_set_attr_flags	function
(	O
mu_attribute_t	pointer
attr	pointer
,	O
int	O
flags	int
)	O
{	O
mu_message_t	pointer
msg	pointer
=	O
mu_attribute_get_owner	function
(	O
attr	pointer
)	O
;	O
struct	O
mu_dotmail_message	struct
*	O
dmsg	pointer
=	O
mu_message_get_owner	function
(	O
msg	pointer
)	O
;	O
mu_dotmail_message_attr_load	function
(	O
dmsg	pointer
)	O
;	O
dmsg	pointer
->	O
attr_flags	int
|=	O
flags	int
;	O
return	O
0	int
;	O
}	O
static	O
int	O
dotmail_unset_attr_flags	function
(	O
mu_attribute_t	pointer
attr	pointer
,	O
int	O
flags	int
)	O
{	O
mu_message_t	pointer
msg	pointer
=	O
mu_attribute_get_owner	function
(	O
attr	pointer
)	O
;	O
struct	O
mu_dotmail_message	struct
*	O
dmsg	pointer
=	O
mu_message_get_owner	function
(	O
msg	pointer
)	O
;	O
mu_dotmail_message_attr_load	function
(	O
dmsg	pointer
)	O
;	O
dmsg	pointer
->	O
attr_flags	int
&=	O
~	O
flags	int
;	O
return	O
0	int
;	O
}	O
static	O
int	O
_msg_attribute_setup	function
(	O
mu_message_t	pointer
msg	pointer
,	O
struct	O
mu_dotmail_message	struct
*	O
dmsg	pointer
)	O
{	O
mu_attribute_t	pointer
attribute	pointer
;	O
int	O
rc	int
=	O
mu_attribute_create	function
(	O
&	O
attribute	pointer
,	O
msg	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
mu_attribute_set_get_flags	function
(	O
attribute	pointer
,	O
dotmail_get_attr_flags	function
,	O
msg	pointer
)	O
;	O
mu_attribute_set_set_flags	function
(	O
attribute	pointer
,	O
dotmail_set_attr_flags	function
,	O
msg	pointer
)	O
;	O
mu_attribute_set_unset_flags	function
(	O
attribute	pointer
,	O
dotmail_unset_attr_flags	function
,	O
msg	pointer
)	O
;	O
mu_message_set_attribute	function
(	O
msg	pointer
,	O
attribute	pointer
,	O
dmsg	pointer
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
dotmail_message_uid	function
(	O
mu_message_t	pointer
msg	pointer
,	O
size_t	long
*	O
puid	pointer
)	O
{	O
struct	O
mu_dotmail_message	struct
*	O
dmsg	pointer
=	O
mu_message_get_owner	function
(	O
msg	pointer
)	O
;	O
int	O
rc	int
=	O
mu_dotmail_mailbox_uid_setup	function
(	O
dmsg	pointer
->	O
mbox	pointer
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
*	O
puid	pointer
=	O
dmsg	pointer
->	O
uid	long
;	O
return	O
rc	int
;	O
}	O
static	O
int	O
dotmail_message_qid	function
(	O
mu_message_t	pointer
msg	pointer
,	O
mu_message_qid_t	pointer
*	O
pqid	pointer
)	O
{	O
struct	O
mu_dotmail_message	struct
*	O
dmsg	pointer
=	O
mu_message_get_owner	function
(	O
msg	pointer
)	O
;	O
return	O
mu_asprintf	function
(	O
pqid	pointer
,	O
"%lu"	pointer
,	O
(	O
unsigned	O
long	O
)	O
dmsg	pointer
->	O
message_start	long
)	O
;	O
}	O
static	O
int	O
dotmail_message_setup	function
(	O
mu_message_t	pointer
msg	pointer
)	O
{	O
struct	O
mu_dotmail_message	struct
*	O
dmsg	pointer
=	O
mu_message_get_owner	function
(	O
msg	pointer
)	O
;	O
int	O
rc	int
;	O
rc	int
=	O
_msg_stream_setup	function
(	O
msg	pointer
,	O
dmsg	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
rc	int
=	O
_msg_body_setup	function
(	O
msg	pointer
,	O
dmsg	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
rc	int
=	O
_msg_attribute_setup	function
(	O
msg	pointer
,	O
dmsg	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
return	O
0	int
;	O
}	O
int	O
mu_dotmail_message_get	function
(	O
struct	O
mu_dotmail_message	struct
*	O
dmsg	pointer
,	O
mu_message_t	pointer
*	O
mptr	pointer
)	O
{	O
if	O
(	O
!	O
dmsg	pointer
->	O
message	pointer
)	O
{	O
mu_message_t	pointer
msg	pointer
;	O
int	O
rc	int
=	O
mu_message_create	function
(	O
&	O
msg	pointer
,	O
dmsg	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
rc	int
=	O
dotmail_message_setup	function
(	O
msg	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_message_destroy	function
(	O
&	O
msg	pointer
,	O
dmsg	pointer
)	O
;	O
return	O
rc	int
;	O
}	O
mu_message_set_uid	function
(	O
msg	pointer
,	O
dotmail_message_uid	function
,	O
dmsg	pointer
)	O
;	O
mu_message_set_qid	function
(	O
msg	pointer
,	O
dotmail_message_qid	function
,	O
dmsg	pointer
)	O
;	O
dmsg	pointer
->	O
message	pointer
=	O
msg	pointer
;	O
mu_message_set_mailbox	function
(	O
msg	pointer
,	O
dmsg	pointer
->	O
mbox	pointer
->	O
mailbox	pointer
,	O
dmsg	pointer
)	O
;	O
mu_message_clear_modified	function
(	O
msg	pointer
)	O
;	O
dmsg	pointer
->	O
message	pointer
=	O
msg	pointer
;	O
}	O
if	O
(	O
mptr	pointer
)	O
*	O
mptr	pointer
=	O
dmsg	pointer
->	O
message	pointer
;	O
return	O
0	int
;	O
}	O
static	O
int	O
dotmail_message_uid_save	function
(	O
mu_stream_t	pointer
dst	pointer
,	O
struct	O
mu_dotmail_message	struct
const	O
*	O
dmsg	pointer
)	O
{	O
struct	O
mu_dotmail_mailbox	struct
*	O
dmp	pointer
=	O
dmsg	pointer
->	O
mbox	pointer
;	O
if	O
(	O
dmp	pointer
->	O
uidvalidity_scanned	int
)	O
{	O
if	O
(	O
dmsg	pointer
->	O
hdr	array
[	O
mu_dotmail_hdr_x_imapbase	int
]	O
)	O
mu_stream_printf	function
(	O
dst	pointer
,	O
"%s: %s\n"	pointer
,	O
MU_HEADER_X_IMAPBASE	pointer
,	O
dmsg	pointer
->	O
hdr	array
[	O
mu_dotmail_hdr_x_imapbase	int
]	O
)	O
;	O
mu_stream_printf	function
(	O
dst	pointer
,	O
"%s: %lu\n"	pointer
,	O
MU_HEADER_X_UID	pointer
,	O
dmsg	pointer
->	O
uid	long
)	O
;	O
return	O
mu_stream_err	function
(	O
dst	pointer
)	O
?	O
mu_stream_last_error	function
(	O
dst	pointer
)	O
:	O
0	int
;	O
}	O
return	O
0	int
;	O
}	O
int	O
dotmail_message_copy_with_uid	function
(	O
mu_stream_t	pointer
dst	pointer
,	O
struct	O
mu_dotmail_message	struct
const	O
*	O
dmsg	pointer
,	O
struct	O
mu_dotmail_message_ref	struct
*	O
ref	pointer
)	O
{	O
int	O
rc	int
;	O
mu_stream_t	pointer
src	pointer
;	O
static	O
char	O
*	O
exclude_headers	array
[	O
]	O
=	O
{	O
MU_HEADER_X_IMAPBASE	pointer
,	O
MU_HEADER_X_UID	pointer
,	O
NULL	O
}	O
;	O
src	pointer
=	O
dmsg	pointer
->	O
mbox	pointer
->	O
mailbox	pointer
->	O
stream	pointer
;	O
rc	int
=	O
mu_stream_seek	function
(	O
dst	pointer
,	O
0	int
,	O
MU_SEEK_CUR	int
,	O
&	O
ref	pointer
->	O
message_start	long
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
rc	int
=	O
mu_stream_seek	function
(	O
src	pointer
,	O
dmsg	pointer
->	O
message_start	long
,	O
MU_SEEK_SET	int
,	O
NULL	O
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
rc	int
=	O
mu_stream_header_copy	function
(	O
dst	pointer
,	O
src	pointer
,	O
exclude_headers	array
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
rc	int
=	O
dotmail_message_uid_save	function
(	O
dst	pointer
,	O
dmsg	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
rc	int
=	O
mu_stream_write	function
(	O
dst	pointer
,	O
"\n"	pointer
,	O
1	int
,	O
NULL	O
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
rc	int
=	O
mu_stream_seek	function
(	O
dst	pointer
,	O
0	int
,	O
MU_SEEK_CUR	int
,	O
&	O
ref	pointer
->	O
body_start	long
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
rc	int
=	O
mu_stream_copy	function
(	O
dst	pointer
,	O
src	pointer
,	O
dmsg	pointer
->	O
message_end	long
-	O
dmsg	pointer
->	O
body_start	long
+	O
2	int
,	O
NULL	O
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
return	O
mu_stream_seek	function
(	O
dst	pointer
,	O
0	int
,	O
MU_SEEK_CUR	int
,	O
&	O
ref	pointer
->	O
message_end	long
)	O
;	O
}	O
static	O
int	O
msg_header_to_stream	function
(	O
mu_stream_t	pointer
dst	pointer
,	O
mu_stream_t	pointer
src	pointer
,	O
struct	O
mu_dotmail_message	struct
*	O
dmsg	pointer
)	O
{	O
static	O
char	O
*	O
exclude_headers	array
[	O
]	O
=	O
{	O
MU_HEADER_STATUS	pointer
,	O
MU_HEADER_X_IMAPBASE	pointer
,	O
MU_HEADER_X_UID	pointer
,	O
NULL	O
}	O
;	O
mu_attribute_t	pointer
attr	pointer
;	O
int	O
rc	int
;	O
rc	int
=	O
mu_stream_header_copy	function
(	O
dst	pointer
,	O
src	pointer
,	O
exclude_headers	array
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
rc	int
=	O
dotmail_message_uid_save	function
(	O
dst	pointer
,	O
dmsg	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
rc	int
=	O
mu_message_get_attribute	function
(	O
dmsg	pointer
->	O
message	pointer
,	O
&	O
attr	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
free	function
(	O
dmsg	pointer
->	O
hdr	array
[	O
mu_dotmail_hdr_status	int
]	O
)	O
;	O
dmsg	pointer
->	O
hdr	array
[	O
mu_dotmail_hdr_status	int
]	O
=	O
malloc	function
(	O
MU_STATUS_BUF_SIZE	O
)	O
;	O
if	O
(	O
!	O
dmsg	pointer
->	O
hdr	array
[	O
mu_dotmail_hdr_status	int
]	O
)	O
return	O
ENOMEM	int
;	O
rc	int
=	O
mu_attribute_to_string	function
(	O
attr	pointer
,	O
dmsg	pointer
->	O
hdr	array
[	O
mu_dotmail_hdr_status	int
]	O
,	O
MU_STATUS_BUF_SIZE	O
,	O
NULL	O
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
mu_stream_printf	function
(	O
dst	pointer
,	O
"%s: %s\n"	pointer
,	O
MU_HEADER_STATUS	pointer
,	O
dmsg	pointer
->	O
hdr	array
[	O
mu_dotmail_hdr_status	int
]	O
)	O
;	O
return	O
mu_stream_write	function
(	O
dst	pointer
,	O
"\n"	pointer
,	O
1	int
,	O
NULL	O
)	O
;	O
}	O
int	O
mu_dotmail_message_reconstruct	function
(	O
mu_stream_t	pointer
dest	pointer
,	O
struct	O
mu_dotmail_message	struct
*	O
dmsg	pointer
,	O
struct	O
mu_dotmail_message_ref	struct
*	O
ref	pointer
)	O
{	O
int	O
rc	int
;	O
mu_header_t	pointer
hdr	array
;	O
mu_body_t	pointer
body	pointer
;	O
mu_stream_t	pointer
str	pointer
,	O
flt	pointer
;	O
if	O
(	O
!	O
dmsg	pointer
->	O
message	pointer
)	O
return	O
dotmail_message_copy_with_uid	function
(	O
dest	pointer
,	O
dmsg	pointer
,	O
ref	pointer
)	O
;	O
rc	int
=	O
mu_stream_seek	function
(	O
dest	pointer
,	O
0	int
,	O
MU_SEEK_CUR	int
,	O
&	O
ref	pointer
->	O
message_start	long
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
rc	int
=	O
mu_message_get_header	function
(	O
dmsg	pointer
->	O
message	pointer
,	O
&	O
hdr	array
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
rc	int
=	O
mu_header_get_streamref	function
(	O
hdr	array
,	O
&	O
str	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
rc	int
=	O
msg_header_to_stream	function
(	O
dest	pointer
,	O
str	pointer
,	O
dmsg	pointer
)	O
;	O
mu_stream_unref	function
(	O
str	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
rc	int
=	O
mu_stream_seek	function
(	O
dest	pointer
,	O
0	int
,	O
MU_SEEK_CUR	int
,	O
&	O
ref	pointer
->	O
body_start	long
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
rc	int
=	O
mu_message_get_body	function
(	O
dmsg	pointer
->	O
message	pointer
,	O
&	O
body	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
rc	int
=	O
mu_body_get_streamref	function
(	O
body	pointer
,	O
&	O
str	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
rc	int
=	O
mu_filter_create	function
(	O
&	O
flt	pointer
,	O
str	pointer
,	O
"DOT"	pointer
,	O
MU_FILTER_ENCODE	int
,	O
MU_STREAM_READ	int
)	O
;	O
mu_stream_unref	function
(	O
str	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
rc	int
=	O
mu_stream_copy	function
(	O
dest	pointer
,	O
flt	pointer
,	O
0	int
,	O
NULL	O
)	O
;	O
mu_stream_unref	function
(	O
flt	pointer
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
rc	int
=	O
mu_stream_seek	function
(	O
dest	pointer
,	O
0	int
,	O
MU_SEEK_CUR	int
,	O
&	O
ref	pointer
->	O
message_end	long
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
ref	pointer
->	O
message_end	long
-=	O
2	int
;	O
ref	pointer
->	O
rescan	int
=	O
1	int
;	O
}	O
return	O
rc	int
;	O
}	O
