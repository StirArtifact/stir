static	O
double	O
erfc8_sum	function
(	O
double	O
x	double
)	O
{	O
static	O
double	O
P	array
[	O
]	O
=	O
{	O
2.97886562639399288862	int
,	O
7.409740605964741794425	int
,	O
6.1602098531096305440906	int
,	O
5.019049726784267463450058	int
,	O
1.275366644729965952479585264	int
,	O
0.5641895835477550741253201704	int
}	O
;	O
static	O
double	O
Q	array
[	O
]	O
=	O
{	O
3.3690752069827527677	int
,	O
9.608965327192787870698	int
,	O
17.08144074746600431571095	int
,	O
12.0489519278551290360340491	int
,	O
9.396034016235054150430579648	int
,	O
2.260528520767326969591866945	int
,	O
1.0	int
}	O
;	O
double	O
num	double
=	O
0.0	int
,	O
den	double
=	O
0.0	int
;	O
int	O
i	int
;	O
num	double
=	O
P	array
[	O
5	int
]	O
;	O
for	O
(	O
i	int
=	O
4	int
;	O
i	int
>=	O
0	int
;	O
--	O
i	int
)	O
{	O
num	double
=	O
x	double
*	O
num	double
+	O
P	array
[	O
i	int
]	O
;	O
}	O
den	double
=	O
Q	array
[	O
6	int
]	O
;	O
for	O
(	O
i	int
=	O
5	int
;	O
i	int
>=	O
0	int
;	O
--	O
i	int
)	O
{	O
den	double
=	O
x	double
*	O
den	double
+	O
Q	array
[	O
i	int
]	O
;	O
}	O
return	O
num	double
/	O
den	double
;	O
}	O
inline	O
static	O
double	O
erfc8	function
(	O
double	O
x	double
)	O
{	O
double	O
e	int
;	O
e	int
=	O
erfc8_sum	function
(	O
x	double
)	O
;	O
e	int
*=	O
exp	function
(	O
-	O
x	double
*	O
x	double
)	O
;	O
return	O
e	int
;	O
}	O
inline	O
static	O
double	O
log_erfc8	function
(	O
double	O
x	double
)	O
{	O
double	O
e	int
;	O
e	int
=	O
erfc8_sum	function
(	O
x	double
)	O
;	O
e	int
=	O
log	function
(	O
e	int
)	O
-	O
x	double
*	O
x	double
;	O
return	O
e	int
;	O
}	O
static	O
int	O
erfseries	function
(	O
double	O
x	double
,	O
gsl_sf_result	struct
*	O
result	pointer
)	O
{	O
double	O
coef	double
=	O
x	double
;	O
double	O
e	int
=	O
coef	double
;	O
double	O
del	double
;	O
int	O
k	int
;	O
for	O
(	O
k	int
=	O
1	int
;	O
k	int
<	O
30	int
;	O
++	O
k	int
)	O
{	O
coef	double
*=	O
-	O
x	double
*	O
x	double
/	O
k	int
;	O
del	double
=	O
coef	double
/	O
(	O
2.0	int
*	O
k	int
+	O
1.0	int
)	O
;	O
e	int
+=	O
del	double
;	O
}	O
result	pointer
->	O
val	double
=	O
2.0	int
/	O
M_SQRTPI	int
*	O
e	int
;	O
result	pointer
->	O
err	double
=	O
2.0	int
/	O
M_SQRTPI	int
*	O
(	O
fabs	function
(	O
del	double
)	O
+	O
GSL_DBL_EPSILON	int
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
double	O
erfc_xlt1_data	array
[	O
20	int
]	O
=	O
{	O
1.06073416421769980345174155056	int
,	O
-	O
0.42582445804381043569204735291	int
,	O
0.04955262679620434040357683080	int
,	O
0.00449293488768382749558001242	int
,	O
-	O
0.00129194104658496953494224761	int
,	O
-	O
0.00001836389292149396270416979	int
,	O
0.00002211114704099526291538556	int
,	O
-	O
5.23337485234257134673693179020e-7	int
,	O
-	O
2.78184788833537885382530989578e-7	int
,	O
1.41158092748813114560316684249e-8	int
,	O
2.72571296330561699984539141865e-9	int
,	O
-	O
2.06343904872070629406401492476e-10	int
,	O
-	O
2.14273991996785367924201401812e-11	int
,	O
2.22990255539358204580285098119e-12	int
,	O
1.36250074650698280575807934155e-13	int
,	O
-	O
1.95144010922293091898995913038e-14	int
,	O
-	O
6.85627169231704599442806370690e-16	int
,	O
1.44506492869699938239521607493e-16	int
,	O
2.45935306460536488037576200030e-18	int
,	O
-	O
9.29599561220523396007359328540e-19	int
}	O
;	O
static	O
cheb_series	struct
erfc_xlt1_cs	struct
=	O
{	O
erfc_xlt1_data	array
,	O
19	int
,	O
-	O
1	int
,	O
1	int
,	O
12	int
}	O
;	O
static	O
double	O
erfc_x15_data	array
[	O
25	int
]	O
=	O
{	O
0.44045832024338111077637466616	int
,	O
-	O
0.143958836762168335790826895326	int
,	O
0.044786499817939267247056666937	int
,	O
-	O
0.013343124200271211203618353102	int
,	O
0.003824682739750469767692372556	int
,	O
-	O
0.001058699227195126547306482530	int
,	O
0.000283859419210073742736310108	int
,	O
-	O
0.000073906170662206760483959432	int
,	O
0.000018725312521489179015872934	int
,	O
-	O
4.62530981164919445131297264430e-6	int
,	O
1.11558657244432857487884006422e-6	int
,	O
-	O
2.63098662650834130067808832725e-7	int
,	O
6.07462122724551777372119408710e-8	int
,	O
-	O
1.37460865539865444777251011793e-8	int
,	O
3.05157051905475145520096717210e-9	int
,	O
-	O
6.65174789720310713757307724790e-10	int
,	O
1.42483346273207784489792999706e-10	int
,	O
-	O
3.00141127395323902092018744545e-11	int
,	O
6.22171792645348091472914001250e-12	int
,	O
-	O
1.26994639225668496876152836555e-12	int
,	O
2.55385883033257575402681845385e-13	int
,	O
-	O
5.06258237507038698392265499770e-14	int
,	O
9.89705409478327321641264227110e-15	int
,	O
-	O
1.90685978789192181051961024995e-15	int
,	O
3.50826648032737849245113757340e-16	int
}	O
;	O
static	O
cheb_series	struct
erfc_x15_cs	struct
=	O
{	O
erfc_x15_data	array
,	O
24	int
,	O
-	O
1	int
,	O
1	int
,	O
16	int
}	O
;	O
static	O
double	O
erfc_x510_data	array
[	O
20	int
]	O
=	O
{	O
1.11684990123545698684297865808	int
,	O
0.003736240359381998520654927536	int
,	O
-	O
0.000916623948045470238763619870	int
,	O
0.000199094325044940833965078819	int
,	O
-	O
0.000040276384918650072591781859	int
,	O
7.76515264697061049477127605790e-6	int
,	O
-	O
1.44464794206689070402099225301e-6	int
,	O
2.61311930343463958393485241947e-7	int
,	O
-	O
4.61833026634844152345304095560e-8	int
,	O
8.00253111512943601598732144340e-9	int
,	O
-	O
1.36291114862793031395712122089e-9	int
,	O
2.28570483090160869607683087722e-10	int
,	O
-	O
3.78022521563251805044056974560e-11	int
,	O
6.17253683874528285729910462130e-12	int
,	O
-	O
9.96019290955316888445830597430e-13	int
,	O
1.58953143706980770269506726000e-13	int
,	O
-	O
2.51045971047162509999527428316e-14	int
,	O
3.92607828989125810013581287560e-15	int
,	O
-	O
6.07970619384160374392535453420e-16	int
,	O
9.12600607264794717315507477670e-17	int
}	O
;	O
static	O
cheb_series	struct
erfc_x510_cs	struct
=	O
{	O
erfc_x510_data	array
,	O
19	int
,	O
-	O
1	int
,	O
1	int
,	O
12	int
}	O
;	O
int	O
gsl_sf_erfc_e	function
(	O
double	O
x	double
,	O
gsl_sf_result	struct
*	O
result	pointer
)	O
{	O
const	O
double	O
ax	double
=	O
fabs	function
(	O
x	double
)	O
;	O
double	O
e_val	double
,	O
e_err	double
;	O
if	O
(	O
ax	double
<=	O
1.0	int
)	O
{	O
double	O
t	double
=	O
2.0	int
*	O
ax	double
-	O
1.0	int
;	O
gsl_sf_result	struct
c	pointer
;	O
cheb_eval_e	function
(	O
&	O
erfc_xlt1_cs	struct
,	O
t	double
,	O
&	O
c	pointer
)	O
;	O
e_val	double
=	O
c	pointer
.	O
val	double
;	O
e_err	double
=	O
c	pointer
.	O
err	double
;	O
}	O
else	O
if	O
(	O
ax	double
<=	O
5.0	int
)	O
{	O
double	O
ex2	double
=	O
exp	function
(	O
-	O
x	double
*	O
x	double
)	O
;	O
double	O
t	double
=	O
0.5	int
*	O
(	O
ax	double
-	O
3.0	int
)	O
;	O
gsl_sf_result	struct
c	pointer
;	O
cheb_eval_e	function
(	O
&	O
erfc_x15_cs	struct
,	O
t	double
,	O
&	O
c	pointer
)	O
;	O
e_val	double
=	O
ex2	double
*	O
c	pointer
.	O
val	double
;	O
e_err	double
=	O
ex2	double
*	O
(	O
c	pointer
.	O
err	double
+	O
2.0	int
*	O
fabs	function
(	O
x	double
)	O
*	O
GSL_DBL_EPSILON	int
)	O
;	O
}	O
else	O
if	O
(	O
ax	double
<	O
10.0	int
)	O
{	O
double	O
exterm	double
=	O
exp	function
(	O
-	O
x	double
*	O
x	double
)	O
/	O
ax	double
;	O
double	O
t	double
=	O
(	O
2.0	int
*	O
ax	double
-	O
15.0	int
)	O
/	O
5.0	int
;	O
gsl_sf_result	struct
c	pointer
;	O
cheb_eval_e	function
(	O
&	O
erfc_x510_cs	struct
,	O
t	double
,	O
&	O
c	pointer
)	O
;	O
e_val	double
=	O
exterm	double
*	O
c	pointer
.	O
val	double
;	O
e_err	double
=	O
exterm	double
*	O
(	O
c	pointer
.	O
err	double
+	O
2.0	int
*	O
fabs	function
(	O
x	double
)	O
*	O
GSL_DBL_EPSILON	int
+	O
GSL_DBL_EPSILON	int
)	O
;	O
}	O
else	O
{	O
e_val	double
=	O
erfc8	function
(	O
ax	double
)	O
;	O
e_err	double
=	O
(	O
x	double
*	O
x	double
+	O
1.0	int
)	O
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
e_val	double
)	O
;	O
}	O
if	O
(	O
x	double
<	O
0.0	int
)	O
{	O
result	pointer
->	O
val	double
=	O
2.0	int
-	O
e_val	double
;	O
result	pointer
->	O
err	double
=	O
e_err	double
;	O
result	pointer
->	O
err	double
+=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
result	pointer
->	O
val	double
)	O
;	O
}	O
else	O
{	O
result	pointer
->	O
val	double
=	O
e_val	double
;	O
result	pointer
->	O
err	double
=	O
e_err	double
;	O
result	pointer
->	O
err	double
+=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
result	pointer
->	O
val	double
)	O
;	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
int	O
gsl_sf_log_erfc_e	function
(	O
double	O
x	double
,	O
gsl_sf_result	struct
*	O
result	pointer
)	O
{	O
if	O
(	O
x	double
*	O
x	double
<	O
10.0	int
*	O
GSL_ROOT6_DBL_EPSILON	int
)	O
{	O
const	O
double	O
y	double
=	O
x	double
/	O
M_SQRTPI	int
;	O
const	O
double	O
c3	double
=	O
(	O
4.0	int
-	O
M_PI	int
)	O
/	O
3.0	int
;	O
const	O
double	O
c4	double
=	O
2.0	int
*	O
(	O
1.0	int
-	O
M_PI	int
/	O
3.0	int
)	O
;	O
const	O
double	O
c5	double
=	O
-	O
0.001829764677455021	int
;	O
const	O
double	O
c6	double
=	O
0.02629651521057465	int
;	O
const	O
double	O
c7	double
=	O
-	O
0.01621575378835404	int
;	O
const	O
double	O
c8	double
=	O
0.00125993961762116	int
;	O
const	O
double	O
c9	double
=	O
0.00556964649138	int
;	O
const	O
double	O
c10	double
=	O
-	O
0.0045563339802	int
;	O
const	O
double	O
c11	double
=	O
0.0009461589032	int
;	O
const	O
double	O
c12	double
=	O
0.0013200243174	int
;	O
const	O
double	O
c13	double
=	O
-	O
0.00142906	int
;	O
const	O
double	O
c14	double
=	O
0.00048204	int
;	O
double	O
series	double
=	O
c8	double
+	O
y	double
*	O
(	O
c9	double
+	O
y	double
*	O
(	O
c10	double
+	O
y	double
*	O
(	O
c11	double
+	O
y	double
*	O
(	O
c12	double
+	O
y	double
*	O
(	O
c13	double
+	O
c14	double
*	O
y	double
)	O
)	O
)	O
)	O
)	O
;	O
series	double
=	O
y	double
*	O
(	O
1.0	int
+	O
y	double
*	O
(	O
1.0	int
+	O
y	double
*	O
(	O
c3	double
+	O
y	double
*	O
(	O
c4	double
+	O
y	double
*	O
(	O
c5	double
+	O
y	double
*	O
(	O
c6	double
+	O
y	double
*	O
(	O
c7	double
+	O
y	double
*	O
series	double
)	O
)	O
)	O
)	O
)	O
)	O
)	O
;	O
result	pointer
->	O
val	double
=	O
-	O
2.0	int
*	O
series	double
;	O
result	pointer
->	O
err	double
=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
result	pointer
->	O
val	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
if	O
(	O
x	double
>	O
8.0	int
)	O
{	O
result	pointer
->	O
val	double
=	O
log_erfc8	function
(	O
x	double
)	O
;	O
result	pointer
->	O
err	double
=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
result	pointer
->	O
val	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
gsl_sf_result	struct
result_erfc	struct
;	O
gsl_sf_erfc_e	function
(	O
x	double
,	O
&	O
result_erfc	struct
)	O
;	O
result	pointer
->	O
val	double
=	O
log	function
(	O
result_erfc	struct
.	O
val	double
)	O
;	O
result	pointer
->	O
err	double
=	O
fabs	function
(	O
result_erfc	struct
.	O
err	double
/	O
result_erfc	struct
.	O
val	double
)	O
;	O
result	pointer
->	O
err	double
+=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
result	pointer
->	O
val	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
int	O
gsl_sf_erf_e	function
(	O
double	O
x	double
,	O
gsl_sf_result	struct
*	O
result	pointer
)	O
{	O
if	O
(	O
fabs	function
(	O
x	double
)	O
<	O
1.0	int
)	O
{	O
return	O
erfseries	function
(	O
x	double
,	O
result	pointer
)	O
;	O
}	O
else	O
{	O
gsl_sf_result	struct
result_erfc	struct
;	O
gsl_sf_erfc_e	function
(	O
x	double
,	O
&	O
result_erfc	struct
)	O
;	O
result	pointer
->	O
val	double
=	O
1.0	int
-	O
result_erfc	struct
.	O
val	double
;	O
result	pointer
->	O
err	double
=	O
result_erfc	struct
.	O
err	double
;	O
result	pointer
->	O
err	double
+=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
result	pointer
->	O
val	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
int	O
gsl_sf_erf_Z_e	function
(	O
double	O
x	double
,	O
gsl_sf_result	struct
*	O
result	pointer
)	O
{	O
{	O
const	O
double	O
ex2	double
=	O
exp	function
(	O
-	O
x	double
*	O
x	double
/	O
2.0	int
)	O
;	O
result	pointer
->	O
val	double
=	O
ex2	double
/	O
(	O
M_SQRT2	int
*	O
M_SQRTPI	int
)	O
;	O
result	pointer
->	O
err	double
=	O
fabs	function
(	O
x	double
*	O
result	pointer
->	O
val	double
)	O
*	O
GSL_DBL_EPSILON	int
;	O
result	pointer
->	O
err	double
+=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
result	pointer
->	O
val	double
)	O
;	O
CHECK_UNDERFLOW	O
(	O
result	pointer
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
int	O
gsl_sf_erf_Q_e	function
(	O
double	O
x	double
,	O
gsl_sf_result	struct
*	O
result	pointer
)	O
{	O
{	O
gsl_sf_result	struct
result_erfc	struct
;	O
int	O
stat	int
=	O
gsl_sf_erfc_e	function
(	O
x	double
/	O
M_SQRT2	int
,	O
&	O
result_erfc	struct
)	O
;	O
result	pointer
->	O
val	double
=	O
0.5	int
*	O
result_erfc	struct
.	O
val	double
;	O
result	pointer
->	O
err	double
=	O
0.5	int
*	O
result_erfc	struct
.	O
err	double
;	O
result	pointer
->	O
err	double
+=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
result	pointer
->	O
val	double
)	O
;	O
return	O
stat	int
;	O
}	O
}	O
int	O
gsl_sf_hazard_e	function
(	O
double	O
x	double
,	O
gsl_sf_result	struct
*	O
result	pointer
)	O
{	O
if	O
(	O
x	double
<	O
25.0	int
)	O
{	O
gsl_sf_result	struct
result_ln_erfc	struct
;	O
const	O
int	O
stat_l	int
=	O
gsl_sf_log_erfc_e	function
(	O
x	double
/	O
M_SQRT2	int
,	O
&	O
result_ln_erfc	struct
)	O
;	O
const	O
double	O
lnc	double
=	O
-	O
0.22579135264472743236	int
;	O
const	O
double	O
arg	double
=	O
lnc	double
-	O
0.5	int
*	O
x	double
*	O
x	double
-	O
result_ln_erfc	struct
.	O
val	double
;	O
const	O
int	O
stat_e	int
=	O
gsl_sf_exp_e	function
(	O
arg	double
,	O
result	pointer
)	O
;	O
result	pointer
->	O
err	double
+=	O
3.0	int
*	O
(	O
1.0	int
+	O
fabs	function
(	O
x	double
)	O
)	O
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
result	pointer
->	O
val	double
)	O
;	O
result	pointer
->	O
err	double
+=	O
fabs	function
(	O
result_ln_erfc	struct
.	O
err	double
*	O
result	pointer
->	O
val	double
)	O
;	O
return	O
GSL_ERROR_SELECT_2	O
(	O
stat_l	int
,	O
stat_e	int
)	O
;	O
}	O
else	O
{	O
const	O
double	O
ix2	double
=	O
1.0	int
/	O
(	O
x	double
*	O
x	double
)	O
;	O
const	O
double	O
corrB	double
=	O
1.0	int
-	O
9.0	int
*	O
ix2	double
*	O
(	O
1.0	int
-	O
11.0	int
*	O
ix2	double
)	O
;	O
const	O
double	O
corrM	double
=	O
1.0	int
-	O
5.0	int
*	O
ix2	double
*	O
(	O
1.0	int
-	O
7.0	int
*	O
ix2	double
*	O
corrB	double
)	O
;	O
const	O
double	O
corrT	double
=	O
1.0	int
-	O
ix2	double
*	O
(	O
1.0	int
-	O
3.0	int
*	O
ix2	double
*	O
corrM	double
)	O
;	O
result	pointer
->	O
val	double
=	O
x	double
/	O
corrT	double
;	O
result	pointer
->	O
err	double
=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
result	pointer
->	O
val	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
double	O
gsl_sf_erfc	function
(	O
double	O
x	double
)	O
{	O
EVAL_RESULT	O
(	O
gsl_sf_erfc_e	function
(	O
x	double
,	O
&	O
result	pointer
)	O
)	O
;	O
}	O
double	O
gsl_sf_log_erfc	function
(	O
double	O
x	double
)	O
{	O
EVAL_RESULT	O
(	O
gsl_sf_log_erfc_e	function
(	O
x	double
,	O
&	O
result	pointer
)	O
)	O
;	O
}	O
double	O
gsl_sf_erf	function
(	O
double	O
x	double
)	O
{	O
EVAL_RESULT	O
(	O
gsl_sf_erf_e	function
(	O
x	double
,	O
&	O
result	pointer
)	O
)	O
;	O
}	O
double	O
gsl_sf_erf_Z	function
(	O
double	O
x	double
)	O
{	O
EVAL_RESULT	O
(	O
gsl_sf_erf_Z_e	function
(	O
x	double
,	O
&	O
result	pointer
)	O
)	O
;	O
}	O
double	O
gsl_sf_erf_Q	function
(	O
double	O
x	double
)	O
{	O
EVAL_RESULT	O
(	O
gsl_sf_erf_Q_e	function
(	O
x	double
,	O
&	O
result	pointer
)	O
)	O
;	O
}	O
double	O
gsl_sf_hazard	function
(	O
double	O
x	double
)	O
{	O
EVAL_RESULT	O
(	O
gsl_sf_hazard_e	function
(	O
x	double
,	O
&	O
result	pointer
)	O
)	O
;	O
}	O
