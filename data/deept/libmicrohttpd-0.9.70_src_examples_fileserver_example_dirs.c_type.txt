static	O
ssize_t	long
file_reader	function
(	O
void	O
*	O
cls	pointer
,	O
uint64_t	long
pos	long
,	O
char	O
*	O
buf	pointer
,	O
size_t	long
max	long
)	O
{	O
FILE	struct
*	O
file	pointer
=	O
cls	pointer
;	O
(	O
void	O
)	O
fseek	function
(	O
file	pointer
,	O
pos	long
,	O
SEEK_SET	int
)	O
;	O
return	O
fread	function
(	O
buf	pointer
,	O
1	int
,	O
max	long
,	O
file	pointer
)	O
;	O
}	O
static	O
void	O
file_free_callback	function
(	O
void	O
*	O
cls	pointer
)	O
{	O
FILE	struct
*	O
file	pointer
=	O
cls	pointer
;	O
fclose	function
(	O
file	pointer
)	O
;	O
}	O
static	O
void	O
dir_free_callback	function
(	O
void	O
*	O
cls	pointer
)	O
{	O
DIR	struct
*	O
dir	pointer
=	O
cls	pointer
;	O
if	O
(	O
dir	pointer
!=	O
NULL	O
)	O
closedir	function
(	O
dir	pointer
)	O
;	O
}	O
static	O
ssize_t	long
dir_reader	function
(	O
void	O
*	O
cls	pointer
,	O
uint64_t	long
pos	long
,	O
char	O
*	O
buf	pointer
,	O
size_t	long
max	long
)	O
{	O
DIR	struct
*	O
dir	pointer
=	O
cls	pointer
;	O
struct	O
dirent	struct
*	O
e	pointer
;	O
if	O
(	O
max	long
<	O
512	int
)	O
return	O
0	int
;	O
(	O
void	O
)	O
pos	long
;	O
do	O
{	O
e	pointer
=	O
readdir	function
(	O
dir	pointer
)	O
;	O
if	O
(	O
e	pointer
==	O
NULL	O
)	O
return	O
MHD_CONTENT_READER_END_OF_STREAM	O
;	O
}	O
while	O
(	O
e	pointer
->	O
d_name	array
[	O
0	int
]	O
==	O
'.'	O
)	O
;	O
return	O
snprintf	function
(	O
buf	pointer
,	O
max	long
,	O
"<a href=\"/%s\">%s</a><br>"	pointer
,	O
e	pointer
->	O
d_name	array
,	O
e	pointer
->	O
d_name	array
)	O
;	O
}	O
static	O
int	O
ahc_echo	function
(	O
void	O
*	O
cls	pointer
,	O
struct	O
MHD_Connection	O
*	O
connection	pointer
,	O
const	O
char	O
*	O
url	pointer
,	O
const	O
char	O
*	O
method	pointer
,	O
const	O
char	O
*	O
version	pointer
,	O
const	O
char	O
*	O
upload_data	pointer
,	O
size_t	long
*	O
upload_data_size	pointer
,	O
void	O
*	O
*	O
ptr	pointer
)	O
{	O
static	O
int	O
aptr	int
;	O
struct	O
MHD_Response	O
*	O
response	pointer
;	O
int	O
ret	int
;	O
FILE	struct
*	O
file	pointer
;	O
int	O
fd	int
;	O
DIR	struct
*	O
dir	pointer
;	O
struct	O
stat	struct
buf	pointer
;	O
char	O
emsg	array
[	O
1024	int
]	O
;	O
(	O
void	O
)	O
cls	pointer
;	O
(	O
void	O
)	O
version	pointer
;	O
(	O
void	O
)	O
upload_data	pointer
;	O
(	O
void	O
)	O
upload_data_size	pointer
;	O
if	O
(	O
0	int
!=	O
strcmp	function
(	O
method	pointer
,	O
MHD_HTTP_METHOD_GET	pointer
)	O
)	O
return	O
MHD_NO	int
;	O
if	O
(	O
&	O
aptr	int
!=	O
*	O
ptr	pointer
)	O
{	O
*	O
ptr	pointer
=	O
&	O
aptr	int
;	O
return	O
MHD_YES	int
;	O
}	O
*	O
ptr	pointer
=	O
NULL	O
;	O
file	pointer
=	O
fopen	function
(	O
&	O
url	pointer
[	O
1	int
]	O
,	O
"rb"	pointer
)	O
;	O
if	O
(	O
NULL	O
!=	O
file	pointer
)	O
{	O
fd	int
=	O
fileno	function
(	O
file	pointer
)	O
;	O
if	O
(	O
-	O
1	int
==	O
fd	int
)	O
{	O
(	O
void	O
)	O
fclose	function
(	O
file	pointer
)	O
;	O
return	O
MHD_NO	int
;	O
}	O
if	O
(	O
(	O
0	int
!=	O
fstat	function
(	O
fd	int
,	O
&	O
buf	pointer
)	O
)	O
||	O
(	O
!	O
S_ISREG	O
(	O
buf	pointer
.	O
st_mode	int
)	O
)	O
)	O
{	O
fclose	function
(	O
file	pointer
)	O
;	O
file	pointer
=	O
NULL	O
;	O
}	O
}	O
if	O
(	O
NULL	O
==	O
file	pointer
)	O
{	O
dir	pointer
=	O
opendir	function
(	O
"."	pointer
)	O
;	O
if	O
(	O
NULL	O
==	O
dir	pointer
)	O
{	O
snprintf	function
(	O
emsg	array
,	O
sizeof	O
(	O
emsg	array
)	O
,	O
"Failed to open directory `.': %s\n"	pointer
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
response	pointer
=	O
MHD_create_response_from_buffer	function
(	O
strlen	function
(	O
emsg	array
)	O
,	O
emsg	array
,	O
MHD_RESPMEM_MUST_COPY	int
)	O
;	O
if	O
(	O
NULL	O
==	O
response	pointer
)	O
return	O
MHD_NO	int
;	O
ret	int
=	O
MHD_queue_response	function
(	O
connection	pointer
,	O
MHD_HTTP_SERVICE_UNAVAILABLE	int
,	O
response	pointer
)	O
;	O
MHD_destroy_response	function
(	O
response	pointer
)	O
;	O
}	O
else	O
{	O
response	pointer
=	O
MHD_create_response_from_callback	function
(	O
MHD_SIZE_UNKNOWN	O
,	O
32	int
*	O
1024	int
,	O
&	O
dir_reader	function
,	O
dir	pointer
,	O
&	O
dir_free_callback	function
)	O
;	O
if	O
(	O
NULL	O
==	O
response	pointer
)	O
{	O
closedir	function
(	O
dir	pointer
)	O
;	O
return	O
MHD_NO	int
;	O
}	O
ret	int
=	O
MHD_queue_response	function
(	O
connection	pointer
,	O
MHD_HTTP_OK	int
,	O
response	pointer
)	O
;	O
MHD_destroy_response	function
(	O
response	pointer
)	O
;	O
}	O
}	O
else	O
{	O
response	pointer
=	O
MHD_create_response_from_callback	function
(	O
buf	pointer
.	O
st_size	long
,	O
32	int
*	O
1024	int
,	O
&	O
file_reader	function
,	O
file	pointer
,	O
&	O
file_free_callback	function
)	O
;	O
if	O
(	O
NULL	O
==	O
response	pointer
)	O
{	O
fclose	function
(	O
file	pointer
)	O
;	O
return	O
MHD_NO	int
;	O
}	O
ret	int
=	O
MHD_queue_response	function
(	O
connection	pointer
,	O
MHD_HTTP_OK	int
,	O
response	pointer
)	O
;	O
MHD_destroy_response	function
(	O
response	pointer
)	O
;	O
}	O
return	O
ret	int
;	O
}	O
int	O
main	function
(	O
int	O
argc	int
,	O
char	O
*	O
const	O
*	O
argv	pointer
)	O
{	O
struct	O
MHD_Daemon	O
*	O
d	pointer
;	O
if	O
(	O
argc	int
!=	O
2	int
)	O
{	O
printf	function
(	O
"%s PORT\n"	pointer
,	O
argv	pointer
[	O
0	int
]	O
)	O
;	O
return	O
1	int
;	O
}	O
d	pointer
=	O
MHD_start_daemon	function
(	O
MHD_USE_THREAD_PER_CONNECTION	int
|	O
MHD_USE_INTERNAL_POLLING_THREAD	int
|	O
MHD_USE_ERROR_LOG	int
,	O
atoi	function
(	O
argv	pointer
[	O
1	int
]	O
)	O
,	O
NULL	O
,	O
NULL	O
,	O
&	O
ahc_echo	function
,	O
PAGE	pointer
,	O
MHD_OPTION_END	int
)	O
;	O
if	O
(	O
NULL	O
==	O
d	pointer
)	O
return	O
1	int
;	O
(	O
void	O
)	O
getc	function
(	O
stdin	pointer
)	O
;	O
MHD_stop_daemon	function
(	O
d	pointer
)	O
;	O
return	O
0	int
;	O
}	O
