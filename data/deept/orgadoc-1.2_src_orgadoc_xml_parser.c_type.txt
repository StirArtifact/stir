void	O
orgadoc_xml_printer	function
(	O
xmlDocPtr	pointer
doc	pointer
,	O
xmlNodePtr	pointer
cur	pointer
)	O
{	O
xmlChar	char
*	O
key	pointer
;	O
cur	pointer
=	O
cur	pointer
->	O
xmlChildrenNode	O
;	O
while	O
(	O
NULL	O
!=	O
cur	pointer
)	O
{	O
if	O
(	O
(	O
!	O
xmlStrcmp	function
(	O
cur	pointer
->	O
name	pointer
,	O
(	O
const	O
xmlChar	char
*	O
)	O
"title"	pointer
)	O
)	O
)	O
{	O
key	pointer
=	O
xmlNodeListGetString	function
(	O
doc	pointer
,	O
cur	pointer
->	O
xmlChildrenNode	O
,	O
1	int
)	O
;	O
if	O
(	O
html	int
==	O
1	int
)	O
{	O
orgadoc_html_table_start_tags	function
(	O
)	O
;	O
printf	function
(	O
"<tr>\n"	pointer
)	O
;	O
printf	function
(	O
"<td>Title</td><td>%s</td>\n"	pointer
,	O
key	pointer
)	O
;	O
printf	function
(	O
"</tr>\n"	pointer
)	O
;	O
xmlFree	pointer
(	O
key	pointer
)	O
;	O
}	O
if	O
(	O
bibtex	int
==	O
1	int
)	O
{	O
printf	function
(	O
"Title=\"%s\"\n"	pointer
,	O
key	pointer
)	O
;	O
xmlFree	pointer
(	O
key	pointer
)	O
;	O
}	O
if	O
(	O
latex	int
==	O
1	int
)	O
{	O
printf	function
(	O
"\\textbf{Title} \"%s\"\\\\\n"	pointer
,	O
key	pointer
)	O
;	O
xmlFree	pointer
(	O
key	pointer
)	O
;	O
}	O
if	O
(	O
json	int
==	O
1	int
)	O
{	O
printf	function
(	O
"    \"Title\" : \"%s\"\n"	pointer
,	O
key	pointer
)	O
;	O
xmlFree	pointer
(	O
key	pointer
)	O
;	O
}	O
if	O
(	O
text	int
==	O
1	int
)	O
{	O
printf	function
(	O
"Title: %s\n"	pointer
,	O
key	pointer
)	O
;	O
xmlFree	pointer
(	O
key	pointer
)	O
;	O
}	O
}	O
if	O
(	O
(	O
!	O
xmlStrcmp	function
(	O
cur	pointer
->	O
name	pointer
,	O
(	O
const	O
xmlChar	char
*	O
)	O
"file"	pointer
)	O
)	O
)	O
{	O
key	pointer
=	O
xmlNodeListGetString	function
(	O
doc	pointer
,	O
cur	pointer
->	O
xmlChildrenNode	O
,	O
1	int
)	O
;	O
if	O
(	O
html	int
==	O
1	int
)	O
{	O
printf	function
(	O
"<tr>\n"	pointer
)	O
;	O
printf	function
(	O
"<td>Filename</td><td>%s</td>\n"	pointer
,	O
key	pointer
)	O
;	O
printf	function
(	O
"</tr>\n"	pointer
)	O
;	O
xmlFree	pointer
(	O
key	pointer
)	O
;	O
}	O
if	O
(	O
bibtex	int
==	O
1	int
)	O
{	O
printf	function
(	O
"Filename=\"%s\"\n"	pointer
,	O
key	pointer
)	O
;	O
xmlFree	pointer
(	O
key	pointer
)	O
;	O
}	O
if	O
(	O
latex	int
==	O
1	int
)	O
{	O
printf	function
(	O
"\\textbf{Filename} \"%s\"\\\\\n"	pointer
,	O
key	pointer
)	O
;	O
xmlFree	pointer
(	O
key	pointer
)	O
;	O
}	O
if	O
(	O
json	int
==	O
1	int
)	O
{	O
printf	function
(	O
"    \"Filename\" : \"%s\"\n"	pointer
,	O
key	pointer
)	O
;	O
xmlFree	pointer
(	O
key	pointer
)	O
;	O
}	O
if	O
(	O
text	int
==	O
1	int
)	O
{	O
printf	function
(	O
"Filename: %s\n"	pointer
,	O
key	pointer
)	O
;	O
xmlFree	pointer
(	O
key	pointer
)	O
;	O
}	O
}	O
if	O
(	O
(	O
!	O
xmlStrcmp	function
(	O
cur	pointer
->	O
name	pointer
,	O
(	O
const	O
xmlChar	char
*	O
)	O
"date"	pointer
)	O
)	O
)	O
{	O
key	pointer
=	O
xmlNodeListGetString	function
(	O
doc	pointer
,	O
cur	pointer
->	O
xmlChildrenNode	O
,	O
1	int
)	O
;	O
if	O
(	O
html	int
==	O
1	int
)	O
{	O
printf	function
(	O
"<tr>\n"	pointer
)	O
;	O
printf	function
(	O
"<td>Date/Time</td><td>%s</td>\n"	pointer
,	O
key	pointer
)	O
;	O
printf	function
(	O
"</tr>\n"	pointer
)	O
;	O
xmlFree	pointer
(	O
key	pointer
)	O
;	O
}	O
if	O
(	O
bibtex	int
==	O
1	int
)	O
{	O
printf	function
(	O
"Date-Time=\"%s\"\n"	pointer
,	O
key	pointer
)	O
;	O
xmlFree	pointer
(	O
key	pointer
)	O
;	O
}	O
if	O
(	O
latex	int
==	O
1	int
)	O
{	O
printf	function
(	O
"\\textbf{Date-Time} \"%s\"\\\\\n"	pointer
,	O
key	pointer
)	O
;	O
xmlFree	pointer
(	O
key	pointer
)	O
;	O
}	O
if	O
(	O
json	int
==	O
1	int
)	O
{	O
printf	function
(	O
"    \"Date-Time\" : \"%s\"\n"	pointer
,	O
key	pointer
)	O
;	O
xmlFree	pointer
(	O
key	pointer
)	O
;	O
}	O
if	O
(	O
text	int
==	O
1	int
)	O
{	O
printf	function
(	O
"Date/Time: %s\n"	pointer
,	O
key	pointer
)	O
;	O
xmlFree	pointer
(	O
key	pointer
)	O
;	O
}	O
}	O
if	O
(	O
(	O
!	O
xmlStrcmp	function
(	O
cur	pointer
->	O
name	pointer
,	O
(	O
const	O
xmlChar	char
*	O
)	O
"type"	pointer
)	O
)	O
)	O
{	O
key	pointer
=	O
xmlNodeListGetString	function
(	O
doc	pointer
,	O
cur	pointer
->	O
xmlChildrenNode	O
,	O
1	int
)	O
;	O
if	O
(	O
html	int
==	O
1	int
)	O
{	O
printf	function
(	O
"<tr>\n"	pointer
)	O
;	O
printf	function
(	O
"<td>Type</td><td>%s</td>\n"	pointer
,	O
key	pointer
)	O
;	O
printf	function
(	O
"</tr>\n"	pointer
)	O
;	O
xmlFree	pointer
(	O
key	pointer
)	O
;	O
}	O
if	O
(	O
bibtex	int
==	O
1	int
)	O
{	O
printf	function
(	O
"Type=\"%s\"\n"	pointer
,	O
key	pointer
)	O
;	O
xmlFree	pointer
(	O
key	pointer
)	O
;	O
}	O
if	O
(	O
latex	int
==	O
1	int
)	O
{	O
printf	function
(	O
"\\textbf{Type} \"%s\"\\\\\n"	pointer
,	O
key	pointer
)	O
;	O
xmlFree	pointer
(	O
key	pointer
)	O
;	O
}	O
if	O
(	O
json	int
==	O
1	int
)	O
{	O
printf	function
(	O
"    \"Type\" : \"%s\"\n"	pointer
,	O
key	pointer
)	O
;	O
xmlFree	pointer
(	O
key	pointer
)	O
;	O
}	O
if	O
(	O
text	int
==	O
1	int
)	O
{	O
printf	function
(	O
"Type: %s\n"	pointer
,	O
key	pointer
)	O
;	O
xmlFree	pointer
(	O
key	pointer
)	O
;	O
}	O
}	O
if	O
(	O
(	O
!	O
xmlStrcmp	function
(	O
cur	pointer
->	O
name	pointer
,	O
(	O
const	O
xmlChar	char
*	O
)	O
"author"	pointer
)	O
)	O
)	O
{	O
key	pointer
=	O
xmlNodeListGetString	function
(	O
doc	pointer
,	O
cur	pointer
->	O
xmlChildrenNode	O
,	O
1	int
)	O
;	O
if	O
(	O
html	int
==	O
1	int
)	O
{	O
printf	function
(	O
"<tr>\n"	pointer
)	O
;	O
printf	function
(	O
"<td>Author</td><td>%s</td>\n"	pointer
,	O
key	pointer
)	O
;	O
printf	function
(	O
"</tr>\n"	pointer
)	O
;	O
xmlFree	pointer
(	O
key	pointer
)	O
;	O
}	O
if	O
(	O
bibtex	int
==	O
1	int
)	O
{	O
printf	function
(	O
"Author=\"%s\"\n"	pointer
,	O
key	pointer
)	O
;	O
xmlFree	pointer
(	O
key	pointer
)	O
;	O
}	O
if	O
(	O
latex	int
==	O
1	int
)	O
{	O
printf	function
(	O
"\\textbf{Author} \"%s\"\\\\\n"	pointer
,	O
key	pointer
)	O
;	O
xmlFree	pointer
(	O
key	pointer
)	O
;	O
}	O
if	O
(	O
json	int
==	O
1	int
)	O
{	O
printf	function
(	O
"    \"Author\" : \"%s\"\n"	pointer
,	O
key	pointer
)	O
;	O
xmlFree	pointer
(	O
key	pointer
)	O
;	O
}	O
if	O
(	O
text	int
==	O
1	int
)	O
{	O
printf	function
(	O
"Author: %s\n"	pointer
,	O
key	pointer
)	O
;	O
xmlFree	pointer
(	O
key	pointer
)	O
;	O
}	O
}	O
if	O
(	O
(	O
!	O
xmlStrcmp	function
(	O
cur	pointer
->	O
name	pointer
,	O
(	O
const	O
xmlChar	char
*	O
)	O
"nbpages"	pointer
)	O
)	O
)	O
{	O
key	pointer
=	O
xmlNodeListGetString	function
(	O
doc	pointer
,	O
cur	pointer
->	O
xmlChildrenNode	O
,	O
1	int
)	O
;	O
if	O
(	O
html	int
==	O
1	int
)	O
{	O
printf	function
(	O
"<tr>\n"	pointer
)	O
;	O
printf	function
(	O
"<td>Number of Pages</td><td>%s</td>\n"	pointer
,	O
key	pointer
)	O
;	O
printf	function
(	O
"</tr>\n"	pointer
)	O
;	O
xmlFree	pointer
(	O
key	pointer
)	O
;	O
}	O
if	O
(	O
bibtex	int
==	O
1	int
)	O
{	O
printf	function
(	O
"Number-of-Pages=%s\n"	pointer
,	O
key	pointer
)	O
;	O
xmlFree	pointer
(	O
key	pointer
)	O
;	O
}	O
if	O
(	O
latex	int
==	O
1	int
)	O
{	O
printf	function
(	O
"\\textbf{Number-of-Pages} %s\\\\\n"	pointer
,	O
key	pointer
)	O
;	O
xmlFree	pointer
(	O
key	pointer
)	O
;	O
}	O
if	O
(	O
json	int
==	O
1	int
)	O
{	O
printf	function
(	O
"    \"Number-of-Pages\" : %s\n"	pointer
,	O
key	pointer
)	O
;	O
xmlFree	pointer
(	O
key	pointer
)	O
;	O
}	O
if	O
(	O
text	int
==	O
1	int
)	O
{	O
printf	function
(	O
"Number of Pages: %s\n"	pointer
,	O
key	pointer
)	O
;	O
xmlFree	pointer
(	O
key	pointer
)	O
;	O
}	O
}	O
if	O
(	O
(	O
!	O
xmlStrcmp	function
(	O
cur	pointer
->	O
name	pointer
,	O
(	O
const	O
xmlChar	char
*	O
)	O
"language"	pointer
)	O
)	O
)	O
{	O
key	pointer
=	O
xmlNodeListGetString	function
(	O
doc	pointer
,	O
cur	pointer
->	O
xmlChildrenNode	O
,	O
1	int
)	O
;	O
if	O
(	O
html	int
==	O
1	int
)	O
{	O
printf	function
(	O
"<tr>\n"	pointer
)	O
;	O
printf	function
(	O
"<td>Document Language</td><td>%s</td>\n"	pointer
,	O
key	pointer
)	O
;	O
printf	function
(	O
"</tr>\n"	pointer
)	O
;	O
xmlFree	pointer
(	O
key	pointer
)	O
;	O
}	O
if	O
(	O
bibtex	int
==	O
1	int
)	O
{	O
printf	function
(	O
"Document-Language=\"%s\"\n"	pointer
,	O
key	pointer
)	O
;	O
xmlFree	pointer
(	O
key	pointer
)	O
;	O
}	O
if	O
(	O
latex	int
==	O
1	int
)	O
{	O
printf	function
(	O
"\\textbf{Document-Language} \"%s\"\\\\\n"	pointer
,	O
key	pointer
)	O
;	O
xmlFree	pointer
(	O
key	pointer
)	O
;	O
}	O
if	O
(	O
json	int
==	O
1	int
)	O
{	O
printf	function
(	O
"    \"Document-language\" : \"%s\"\n"	pointer
,	O
key	pointer
)	O
;	O
xmlFree	pointer
(	O
key	pointer
)	O
;	O
}	O
if	O
(	O
text	int
==	O
1	int
)	O
{	O
printf	function
(	O
"Document Language: %s\n"	pointer
,	O
key	pointer
)	O
;	O
xmlFree	pointer
(	O
key	pointer
)	O
;	O
}	O
}	O
if	O
(	O
(	O
!	O
xmlStrcmp	function
(	O
cur	pointer
->	O
name	pointer
,	O
(	O
const	O
xmlChar	char
*	O
)	O
"summary"	pointer
)	O
)	O
)	O
{	O
key	pointer
=	O
xmlNodeListGetString	function
(	O
doc	pointer
,	O
cur	pointer
->	O
xmlChildrenNode	O
,	O
1	int
)	O
;	O
if	O
(	O
html	int
==	O
1	int
)	O
{	O
printf	function
(	O
"<tr>\n"	pointer
)	O
;	O
printf	function
(	O
"<td>Summary</td><td>%s</td>\n"	pointer
,	O
key	pointer
)	O
;	O
printf	function
(	O
"</tr>\n"	pointer
)	O
;	O
xmlFree	pointer
(	O
key	pointer
)	O
;	O
}	O
if	O
(	O
bibtex	int
==	O
1	int
)	O
{	O
printf	function
(	O
"Summary=\"%s\"\n"	pointer
,	O
key	pointer
)	O
;	O
xmlFree	pointer
(	O
key	pointer
)	O
;	O
}	O
if	O
(	O
latex	int
==	O
1	int
)	O
{	O
printf	function
(	O
"\\textbf{Summary} \"%s\"\\\\\n"	pointer
,	O
key	pointer
)	O
;	O
xmlFree	pointer
(	O
key	pointer
)	O
;	O
}	O
if	O
(	O
json	int
==	O
1	int
)	O
{	O
printf	function
(	O
"    \"Summary\" : \"%s\"\n"	pointer
,	O
key	pointer
)	O
;	O
xmlFree	pointer
(	O
key	pointer
)	O
;	O
}	O
if	O
(	O
text	int
==	O
1	int
)	O
{	O
printf	function
(	O
"Summary: %s\n"	pointer
,	O
key	pointer
)	O
;	O
xmlFree	pointer
(	O
key	pointer
)	O
;	O
}	O
}	O
if	O
(	O
(	O
!	O
xmlStrcmp	function
(	O
cur	pointer
->	O
name	pointer
,	O
(	O
const	O
xmlChar	char
*	O
)	O
"part"	pointer
)	O
)	O
)	O
{	O
key	pointer
=	O
xmlNodeListGetString	function
(	O
doc	pointer
,	O
cur	pointer
->	O
xmlChildrenNode	O
,	O
1	int
)	O
;	O
if	O
(	O
html	int
==	O
1	int
)	O
{	O
printf	function
(	O
"<tr>\n"	pointer
)	O
;	O
printf	function
(	O
"<td>Chapter(s)</td><td>%s</td>\n"	pointer
,	O
key	pointer
)	O
;	O
printf	function
(	O
"</tr>\n"	pointer
)	O
;	O
xmlFree	pointer
(	O
key	pointer
)	O
;	O
}	O
if	O
(	O
bibtex	int
==	O
1	int
)	O
{	O
printf	function
(	O
"Chapter(s)=\"%s\"\n"	pointer
,	O
key	pointer
)	O
;	O
xmlFree	pointer
(	O
key	pointer
)	O
;	O
}	O
if	O
(	O
latex	int
==	O
1	int
)	O
{	O
printf	function
(	O
"\\textbf{Chapter(s)} \"%s\"\\\\\n"	pointer
,	O
key	pointer
)	O
;	O
xmlFree	pointer
(	O
key	pointer
)	O
;	O
}	O
if	O
(	O
json	int
==	O
1	int
)	O
{	O
printf	function
(	O
"    \"Chapter\" : \"%s\"\n"	pointer
,	O
key	pointer
)	O
;	O
xmlFree	pointer
(	O
key	pointer
)	O
;	O
}	O
if	O
(	O
text	int
==	O
1	int
)	O
{	O
printf	function
(	O
"Chapter(s): %s\n"	pointer
,	O
key	pointer
)	O
;	O
xmlFree	pointer
(	O
key	pointer
)	O
;	O
}	O
}	O
if	O
(	O
(	O
!	O
xmlStrcmp	function
(	O
cur	pointer
->	O
name	pointer
,	O
(	O
const	O
xmlChar	char
*	O
)	O
"notes"	pointer
)	O
)	O
)	O
{	O
key	pointer
=	O
xmlNodeListGetString	function
(	O
doc	pointer
,	O
cur	pointer
->	O
xmlChildrenNode	O
,	O
1	int
)	O
;	O
if	O
(	O
html	int
==	O
1	int
)	O
{	O
printf	function
(	O
"<tr>\n"	pointer
)	O
;	O
printf	function
(	O
"<td>Notes/Comments</td><td>%s</td>\n"	pointer
,	O
key	pointer
)	O
;	O
printf	function
(	O
"</tr>\n"	pointer
)	O
;	O
orgadoc_html_table_end_tags	function
(	O
)	O
;	O
xmlFree	pointer
(	O
key	pointer
)	O
;	O
}	O
if	O
(	O
bibtex	int
==	O
1	int
)	O
{	O
printf	function
(	O
"Notes-or-Comments=\"%s\"\n"	pointer
,	O
key	pointer
)	O
;	O
printf	function
(	O
"\n"	pointer
)	O
;	O
xmlFree	pointer
(	O
key	pointer
)	O
;	O
}	O
if	O
(	O
latex	int
==	O
1	int
)	O
{	O
printf	function
(	O
"\\textbf{Notes-or-Comments} \"%s\"\\\\\n"	pointer
,	O
key	pointer
)	O
;	O
printf	function
(	O
"\\\\\n"	pointer
)	O
;	O
xmlFree	pointer
(	O
key	pointer
)	O
;	O
}	O
if	O
(	O
json	int
==	O
1	int
)	O
{	O
printf	function
(	O
"    \"Notes\" : \"%s\"\n"	pointer
,	O
key	pointer
)	O
;	O
printf	function
(	O
"\n"	pointer
)	O
;	O
xmlFree	pointer
(	O
key	pointer
)	O
;	O
}	O
if	O
(	O
text	int
==	O
1	int
)	O
{	O
printf	function
(	O
"Notes/Comments: %s\n"	pointer
,	O
key	pointer
)	O
;	O
printf	function
(	O
"\n"	pointer
)	O
;	O
xmlFree	pointer
(	O
key	pointer
)	O
;	O
}	O
}	O
cur	pointer
=	O
cur	pointer
->	O
next	pointer
;	O
}	O
return	O
;	O
}	O
void	O
orgadoc_xml_parser	function
(	O
char	O
*	O
readme	pointer
)	O
{	O
xmlDocPtr	pointer
doc	pointer
=	O
NULL	O
;	O
xmlNodePtr	pointer
cur	pointer
=	O
NULL	O
;	O
doc	pointer
=	O
xmlParseFile	function
(	O
readme	pointer
)	O
;	O
if	O
(	O
NULL	O
==	O
doc	pointer
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Document cannot be parsed!\n"	pointer
)	O
;	O
return	O
;	O
}	O
cur	pointer
=	O
xmlDocGetRootElement	function
(	O
doc	pointer
)	O
;	O
if	O
(	O
NULL	O
==	O
cur	pointer
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Empty document or is less than 1 byte!\n"	pointer
)	O
;	O
xmlFreeDoc	function
(	O
doc	pointer
)	O
;	O
return	O
;	O
}	O
if	O
(	O
xmlStrcmp	function
(	O
cur	pointer
->	O
name	pointer
,	O
(	O
const	O
xmlChar	char
*	O
)	O
"readme"	pointer
)	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Root node is of incorrect type!\n"	pointer
)	O
;	O
xmlFreeDoc	function
(	O
doc	pointer
)	O
;	O
}	O
cur	pointer
=	O
cur	pointer
->	O
xmlChildrenNode	O
;	O
while	O
(	O
NULL	O
!=	O
cur	pointer
)	O
{	O
if	O
(	O
(	O
!	O
xmlStrcmp	function
(	O
cur	pointer
->	O
name	pointer
,	O
(	O
const	O
xmlChar	char
*	O
)	O
"document"	pointer
)	O
)	O
)	O
{	O
orgadoc_xml_printer	function
(	O
doc	pointer
,	O
cur	pointer
)	O
;	O
}	O
cur	pointer
=	O
cur	pointer
->	O
next	pointer
;	O
}	O
xmlFreeDoc	function
(	O
doc	pointer
)	O
;	O
return	O
;	O
}	O
