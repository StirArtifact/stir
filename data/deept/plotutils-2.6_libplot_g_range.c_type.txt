void	O
_set_ellipse_bbox	function
(	O
plOutbuf	struct
*	O
bufp	pointer
,	O
double	O
x	double
,	O
double	O
y	double
,	O
double	O
rx	double
,	O
double	O
ry	double
,	O
double	O
costheta	double
,	O
double	O
sintheta	double
,	O
double	O
linewidth	double
,	O
double	O
m	array
[	O
6	int
]	O
)	O
{	O
double	O
ux	double
,	O
uy	double
,	O
vx	double
,	O
vy	double
;	O
double	O
mixing_angle	double
;	O
double	O
semi_axis_1_x	double
,	O
semi_axis_1_y	double
,	O
semi_axis_2_x	double
,	O
semi_axis_2_y	double
;	O
double	O
rx_device	double
,	O
ry_device	double
;	O
double	O
theta_device	double
,	O
costheta_device	double
,	O
sintheta_device	double
;	O
double	O
xdeviation	double
,	O
ydeviation	double
;	O
rx	double
+=	O
0.5	int
*	O
linewidth	double
;	O
ry	double
+=	O
0.5	int
*	O
linewidth	double
;	O
ux	double
=	O
XDV_INTERNAL	O
(	O
rx	double
*	O
costheta	double
,	O
rx	double
*	O
sintheta	double
,	O
m	array
)	O
;	O
uy	double
=	O
YDV_INTERNAL	O
(	O
rx	double
*	O
costheta	double
,	O
rx	double
*	O
sintheta	double
,	O
m	array
)	O
;	O
vx	double
=	O
XDV_INTERNAL	O
(	O
-	O
ry	double
*	O
sintheta	double
,	O
ry	double
*	O
costheta	double
,	O
m	array
)	O
;	O
vy	double
=	O
YDV_INTERNAL	O
(	O
-	O
ry	double
*	O
sintheta	double
,	O
ry	double
*	O
costheta	double
,	O
m	array
)	O
;	O
mixing_angle	double
=	O
0.5	int
*	O
_xatan2	function
(	O
2.0	int
*	O
(	O
ux	double
*	O
vx	double
+	O
uy	double
*	O
vy	double
)	O
,	O
ux	double
*	O
ux	double
+	O
uy	double
*	O
uy	double
-	O
vx	double
*	O
vx	double
+	O
vy	double
*	O
vy	double
)	O
;	O
semi_axis_1_x	double
=	O
ux	double
*	O
cos	function
(	O
mixing_angle	double
)	O
+	O
vx	double
*	O
sin	function
(	O
mixing_angle	double
)	O
;	O
semi_axis_1_y	double
=	O
uy	double
*	O
cos	function
(	O
mixing_angle	double
)	O
+	O
vy	double
*	O
sin	function
(	O
mixing_angle	double
)	O
;	O
semi_axis_2_x	double
=	O
ux	double
*	O
cos	function
(	O
mixing_angle	double
+	O
M_PI_2	int
)	O
+	O
vx	double
*	O
sin	function
(	O
mixing_angle	double
+	O
M_PI_2	int
)	O
;	O
semi_axis_2_y	double
=	O
uy	double
*	O
cos	function
(	O
mixing_angle	double
+	O
M_PI_2	int
)	O
+	O
vy	double
*	O
sin	function
(	O
mixing_angle	double
+	O
M_PI_2	int
)	O
;	O
rx_device	double
=	O
sqrt	function
(	O
semi_axis_1_x	double
*	O
semi_axis_1_x	double
+	O
semi_axis_1_y	double
*	O
semi_axis_1_y	double
)	O
;	O
ry_device	double
=	O
sqrt	function
(	O
semi_axis_2_x	double
*	O
semi_axis_2_x	double
+	O
semi_axis_2_y	double
*	O
semi_axis_2_y	double
)	O
;	O
theta_device	double
=	O
-	O
_xatan2	function
(	O
semi_axis_1_y	double
,	O
semi_axis_1_x	double
)	O
;	O
costheta_device	double
=	O
cos	function
(	O
theta_device	double
)	O
;	O
sintheta_device	double
=	O
sin	function
(	O
theta_device	double
)	O
;	O
xdeviation	double
=	O
sqrt	function
(	O
rx_device	double
*	O
rx_device	double
*	O
costheta_device	double
*	O
costheta_device	double
+	O
ry_device	double
*	O
ry_device	double
*	O
sintheta_device	double
*	O
sintheta_device	double
)	O
;	O
ydeviation	double
=	O
sqrt	function
(	O
rx_device	double
*	O
rx_device	double
*	O
sintheta_device	double
*	O
sintheta_device	double
+	O
ry_device	double
*	O
ry_device	double
*	O
costheta_device	double
*	O
costheta_device	double
)	O
;	O
_update_bbox	function
(	O
bufp	pointer
,	O
XD_INTERNAL	O
(	O
x	double
,	O
y	double
,	O
m	array
)	O
+	O
xdeviation	double
,	O
YD_INTERNAL	O
(	O
x	double
,	O
y	double
,	O
m	array
)	O
+	O
ydeviation	double
)	O
;	O
_update_bbox	function
(	O
bufp	pointer
,	O
XD_INTERNAL	O
(	O
x	double
,	O
y	double
,	O
m	array
)	O
+	O
xdeviation	double
,	O
YD_INTERNAL	O
(	O
x	double
,	O
y	double
,	O
m	array
)	O
-	O
ydeviation	double
)	O
;	O
_update_bbox	function
(	O
bufp	pointer
,	O
XD_INTERNAL	O
(	O
x	double
,	O
y	double
,	O
m	array
)	O
-	O
xdeviation	double
,	O
YD_INTERNAL	O
(	O
x	double
,	O
y	double
,	O
m	array
)	O
+	O
ydeviation	double
)	O
;	O
_update_bbox	function
(	O
bufp	pointer
,	O
XD_INTERNAL	O
(	O
x	double
,	O
y	double
,	O
m	array
)	O
-	O
xdeviation	double
,	O
YD_INTERNAL	O
(	O
x	double
,	O
y	double
,	O
m	array
)	O
-	O
ydeviation	double
)	O
;	O
}	O
void	O
_set_line_end_bbox	function
(	O
plOutbuf	struct
*	O
bufp	pointer
,	O
double	O
x	double
,	O
double	O
y	double
,	O
double	O
xother	double
,	O
double	O
yother	double
,	O
double	O
linewidth	double
,	O
int	O
capstyle	int
,	O
double	O
m	array
[	O
6	int
]	O
)	O
{	O
plVector	struct
v	pointer
,	O
vrot	struct
;	O
double	O
xs	double
,	O
ys	double
;	O
double	O
halfwidth	double
=	O
0.5	int
*	O
linewidth	double
;	O
switch	O
(	O
capstyle	int
)	O
{	O
case	O
PL_CAP_BUTT	int
:	O
default	O
:	O
vrot	struct
.	O
x	double
=	O
yother	double
-	O
y	double
;	O
vrot	struct
.	O
y	double
=	O
x	double
-	O
xother	double
;	O
_vscale	function
(	O
&	O
vrot	struct
,	O
halfwidth	double
)	O
;	O
xs	double
=	O
x	double
+	O
vrot	struct
.	O
x	double
;	O
ys	double
=	O
y	double
+	O
vrot	struct
.	O
y	double
;	O
_update_bbox	function
(	O
bufp	pointer
,	O
XD_INTERNAL	O
(	O
xs	double
,	O
ys	double
,	O
m	array
)	O
,	O
YD_INTERNAL	O
(	O
xs	double
,	O
ys	double
,	O
m	array
)	O
)	O
;	O
xs	double
=	O
x	double
-	O
vrot	struct
.	O
x	double
;	O
ys	double
=	O
y	double
-	O
vrot	struct
.	O
y	double
;	O
_update_bbox	function
(	O
bufp	pointer
,	O
XD_INTERNAL	O
(	O
xs	double
,	O
ys	double
,	O
m	array
)	O
,	O
YD_INTERNAL	O
(	O
xs	double
,	O
ys	double
,	O
m	array
)	O
)	O
;	O
break	O
;	O
case	O
PL_CAP_PROJECT	int
:	O
v	pointer
.	O
x	double
=	O
xother	double
-	O
x	double
;	O
v	pointer
.	O
y	double
=	O
yother	double
-	O
y	double
;	O
_vscale	function
(	O
&	O
v	pointer
,	O
halfwidth	double
)	O
;	O
vrot	struct
.	O
x	double
=	O
yother	double
-	O
y	double
;	O
vrot	struct
.	O
y	double
=	O
x	double
-	O
xother	double
;	O
_vscale	function
(	O
&	O
vrot	struct
,	O
halfwidth	double
)	O
;	O
xs	double
=	O
x	double
-	O
v	pointer
.	O
x	double
+	O
vrot	struct
.	O
x	double
;	O
ys	double
=	O
y	double
-	O
v	pointer
.	O
y	double
+	O
vrot	struct
.	O
y	double
;	O
_update_bbox	function
(	O
bufp	pointer
,	O
XD_INTERNAL	O
(	O
xs	double
,	O
ys	double
,	O
m	array
)	O
,	O
YD_INTERNAL	O
(	O
xs	double
,	O
ys	double
,	O
m	array
)	O
)	O
;	O
xs	double
=	O
x	double
-	O
v	pointer
.	O
x	double
-	O
vrot	struct
.	O
x	double
;	O
ys	double
=	O
y	double
-	O
v	pointer
.	O
y	double
-	O
vrot	struct
.	O
y	double
;	O
_update_bbox	function
(	O
bufp	pointer
,	O
XD_INTERNAL	O
(	O
xs	double
,	O
ys	double
,	O
m	array
)	O
,	O
YD_INTERNAL	O
(	O
xs	double
,	O
ys	double
,	O
m	array
)	O
)	O
;	O
break	O
;	O
case	O
PL_CAP_ROUND	int
:	O
_set_ellipse_bbox	function
(	O
bufp	pointer
,	O
x	double
,	O
y	double
,	O
halfwidth	double
,	O
halfwidth	double
,	O
1.0	int
,	O
0.0	int
,	O
0.0	int
,	O
m	array
)	O
;	O
break	O
;	O
case	O
PL_CAP_TRIANGULAR	int
:	O
v	pointer
.	O
x	double
=	O
xother	double
-	O
x	double
;	O
v	pointer
.	O
y	double
=	O
yother	double
-	O
y	double
;	O
_vscale	function
(	O
&	O
v	pointer
,	O
halfwidth	double
)	O
;	O
xs	double
=	O
x	double
+	O
v	pointer
.	O
x	double
;	O
ys	double
=	O
y	double
+	O
v	pointer
.	O
y	double
;	O
_update_bbox	function
(	O
bufp	pointer
,	O
XD_INTERNAL	O
(	O
xs	double
,	O
ys	double
,	O
m	array
)	O
,	O
YD_INTERNAL	O
(	O
xs	double
,	O
ys	double
,	O
m	array
)	O
)	O
;	O
vrot	struct
.	O
x	double
=	O
yother	double
-	O
y	double
;	O
vrot	struct
.	O
y	double
=	O
x	double
-	O
xother	double
;	O
_vscale	function
(	O
&	O
vrot	struct
,	O
halfwidth	double
)	O
;	O
xs	double
=	O
x	double
+	O
vrot	struct
.	O
x	double
;	O
ys	double
=	O
y	double
+	O
vrot	struct
.	O
y	double
;	O
_update_bbox	function
(	O
bufp	pointer
,	O
XD_INTERNAL	O
(	O
xs	double
,	O
ys	double
,	O
m	array
)	O
,	O
YD_INTERNAL	O
(	O
xs	double
,	O
ys	double
,	O
m	array
)	O
)	O
;	O
xs	double
=	O
x	double
-	O
vrot	struct
.	O
x	double
;	O
ys	double
=	O
y	double
-	O
vrot	struct
.	O
y	double
;	O
_update_bbox	function
(	O
bufp	pointer
,	O
XD_INTERNAL	O
(	O
xs	double
,	O
ys	double
,	O
m	array
)	O
,	O
YD_INTERNAL	O
(	O
xs	double
,	O
ys	double
,	O
m	array
)	O
)	O
;	O
break	O
;	O
}	O
}	O
void	O
_set_line_join_bbox	function
(	O
plOutbuf	struct
*	O
bufp	pointer
,	O
double	O
xleft	double
,	O
double	O
yleft	double
,	O
double	O
x	double
,	O
double	O
y	double
,	O
double	O
xright	double
,	O
double	O
yright	double
,	O
double	O
linewidth	double
,	O
int	O
joinstyle	int
,	O
double	O
miterlimit	double
,	O
double	O
m	array
[	O
6	int
]	O
)	O
{	O
plVector	struct
v1	struct
,	O
v2	struct
,	O
vsum	struct
;	O
double	O
v1len	double
,	O
v2len	double
;	O
double	O
halfwidth	double
;	O
double	O
mitrelen	double
;	O
switch	O
(	O
joinstyle	int
)	O
{	O
case	O
PL_JOIN_MITER	int
:	O
default	O
:	O
v1	struct
.	O
x	double
=	O
xleft	double
-	O
x	double
;	O
v1	struct
.	O
y	double
=	O
yleft	double
-	O
y	double
;	O
v2	struct
.	O
x	double
=	O
xright	double
-	O
x	double
;	O
v2	struct
.	O
y	double
=	O
yright	double
-	O
y	double
;	O
v1len	double
=	O
VLENGTH	O
(	O
v1	struct
)	O
;	O
v2len	double
=	O
VLENGTH	O
(	O
v2	struct
)	O
;	O
if	O
(	O
v1len	double
==	O
0.0	int
||	O
v2len	double
==	O
0.0	int
)	O
_update_bbox	function
(	O
bufp	pointer
,	O
XD_INTERNAL	O
(	O
x	double
,	O
y	double
,	O
m	array
)	O
,	O
YD_INTERNAL	O
(	O
x	double
,	O
y	double
,	O
m	array
)	O
)	O
;	O
else	O
{	O
double	O
cosphi	double
;	O
cosphi	double
=	O
(	O
(	O
v1	struct
.	O
x	double
*	O
v2	struct
.	O
x	double
+	O
v1	struct
.	O
y	double
*	O
v2	struct
.	O
y	double
)	O
/	O
v1len	double
)	O
/	O
v2len	double
;	O
if	O
(	O
miterlimit	double
<=	O
1.0	int
||	O
(	O
cosphi	double
>	O
(	O
1.0	int
-	O
2.0	int
/	O
(	O
miterlimit	double
*	O
miterlimit	double
)	O
)	O
)	O
)	O
{	O
_set_line_end_bbox	function
(	O
bufp	pointer
,	O
x	double
,	O
y	double
,	O
xleft	double
,	O
yleft	double
,	O
linewidth	double
,	O
PL_CAP_BUTT	int
,	O
m	array
)	O
;	O
_set_line_end_bbox	function
(	O
bufp	pointer
,	O
x	double
,	O
y	double
,	O
xright	double
,	O
yright	double
,	O
linewidth	double
,	O
PL_CAP_BUTT	int
,	O
m	array
)	O
;	O
}	O
else	O
{	O
mitrelen	double
=	O
sqrt	function
(	O
1.0	int
/	O
(	O
2.0	int
-	O
2.0	int
*	O
cosphi	double
)	O
)	O
*	O
linewidth	double
;	O
vsum	struct
.	O
x	double
=	O
v1	struct
.	O
x	double
+	O
v2	struct
.	O
x	double
;	O
vsum	struct
.	O
y	double
=	O
v1	struct
.	O
y	double
+	O
v2	struct
.	O
y	double
;	O
_vscale	function
(	O
&	O
vsum	struct
,	O
mitrelen	double
)	O
;	O
x	double
-=	O
vsum	struct
.	O
x	double
;	O
y	double
-=	O
vsum	struct
.	O
y	double
;	O
_update_bbox	function
(	O
bufp	pointer
,	O
XD_INTERNAL	O
(	O
x	double
,	O
y	double
,	O
m	array
)	O
,	O
YD_INTERNAL	O
(	O
x	double
,	O
y	double
,	O
m	array
)	O
)	O
;	O
}	O
}	O
break	O
;	O
case	O
PL_JOIN_TRIANGULAR	int
:	O
v1	struct
.	O
x	double
=	O
xleft	double
-	O
x	double
;	O
v1	struct
.	O
y	double
=	O
yleft	double
-	O
y	double
;	O
v2	struct
.	O
x	double
=	O
xright	double
-	O
x	double
;	O
v2	struct
.	O
y	double
=	O
yright	double
-	O
y	double
;	O
vsum	struct
.	O
x	double
=	O
v1	struct
.	O
x	double
+	O
v2	struct
.	O
x	double
;	O
vsum	struct
.	O
y	double
=	O
v1	struct
.	O
y	double
+	O
v2	struct
.	O
y	double
;	O
_vscale	function
(	O
&	O
vsum	struct
,	O
0.5	int
*	O
linewidth	double
)	O
;	O
x	double
-=	O
vsum	struct
.	O
x	double
;	O
y	double
-=	O
vsum	struct
.	O
y	double
;	O
_update_bbox	function
(	O
bufp	pointer
,	O
XD_INTERNAL	O
(	O
x	double
,	O
y	double
,	O
m	array
)	O
,	O
YD_INTERNAL	O
(	O
x	double
,	O
y	double
,	O
m	array
)	O
)	O
;	O
x	double
+=	O
vsum	struct
.	O
x	double
;	O
y	double
+=	O
vsum	struct
.	O
y	double
;	O
case	O
PL_JOIN_BEVEL	int
:	O
_set_line_end_bbox	function
(	O
bufp	pointer
,	O
x	double
,	O
y	double
,	O
xleft	double
,	O
yleft	double
,	O
linewidth	double
,	O
PL_CAP_BUTT	int
,	O
m	array
)	O
;	O
_set_line_end_bbox	function
(	O
bufp	pointer
,	O
x	double
,	O
y	double
,	O
xright	double
,	O
yright	double
,	O
linewidth	double
,	O
PL_CAP_BUTT	int
,	O
m	array
)	O
;	O
break	O
;	O
case	O
PL_JOIN_ROUND	int
:	O
halfwidth	double
=	O
0.5	int
*	O
linewidth	double
;	O
_set_ellipse_bbox	function
(	O
bufp	pointer
,	O
x	double
,	O
y	double
,	O
halfwidth	double
,	O
halfwidth	double
,	O
1.0	int
,	O
0.0	int
,	O
0.0	int
,	O
m	array
)	O
;	O
break	O
;	O
}	O
}	O
void	O
_set_bezier2_bbox	function
(	O
plOutbuf	struct
*	O
bufp	pointer
,	O
double	O
x0	double
,	O
double	O
y0	function
,	O
double	O
x1	double
,	O
double	O
y1	function
,	O
double	O
x2	double
,	O
double	O
y2	double
,	O
double	O
device_line_width	double
,	O
double	O
m	array
[	O
6	int
]	O
)	O
{	O
double	O
a_x	double
,	O
b_x	double
,	O
t_x	double
;	O
double	O
a_y	double
,	O
b_y	double
,	O
t_y	double
;	O
double	O
x	double
,	O
y	double
,	O
xdevice	double
,	O
ydevice	double
;	O
double	O
device_halfwidth	double
=	O
0.5	int
*	O
device_line_width	double
;	O
a_x	double
=	O
x0	double
-	O
2	int
*	O
x1	double
+	O
x2	double
;	O
b_x	double
=	O
(	O
x1	double
-	O
x2	double
)	O
;	O
a_y	double
=	O
y0	function
-	O
2	int
*	O
y1	function
+	O
y2	double
;	O
b_y	double
=	O
(	O
y1	function
-	O
y2	double
)	O
;	O
if	O
(	O
a_x	double
!=	O
0.0	int
)	O
{	O
t_x	double
=	O
-	O
b_x	double
/	O
a_x	double
;	O
if	O
(	O
t_x	double
>	O
0.0	int
&&	O
t_x	double
<	O
1.0	int
)	O
{	O
x	double
=	O
QUAD_COOR	O
(	O
t_x	double
,	O
x0	double
,	O
x1	double
,	O
x2	double
)	O
;	O
y	double
=	O
QUAD_COOR	O
(	O
t_x	double
,	O
y0	function
,	O
y1	function
,	O
y2	double
)	O
;	O
xdevice	double
=	O
XD_INTERNAL	O
(	O
x	double
,	O
y	double
,	O
m	array
)	O
;	O
ydevice	double
=	O
YD_INTERNAL	O
(	O
x	double
,	O
y	double
,	O
m	array
)	O
;	O
_update_bbox	function
(	O
bufp	pointer
,	O
xdevice	double
+	O
device_halfwidth	double
,	O
ydevice	double
)	O
;	O
_update_bbox	function
(	O
bufp	pointer
,	O
xdevice	double
-	O
device_halfwidth	double
,	O
ydevice	double
)	O
;	O
}	O
}	O
if	O
(	O
a_y	double
!=	O
0.0	int
)	O
{	O
t_y	double
=	O
-	O
b_y	double
/	O
a_y	double
;	O
if	O
(	O
t_y	double
>	O
0.0	int
&&	O
t_y	double
<	O
1.0	int
)	O
{	O
x	double
=	O
QUAD_COOR	O
(	O
t_y	double
,	O
x0	double
,	O
x1	double
,	O
x2	double
)	O
;	O
y	double
=	O
QUAD_COOR	O
(	O
t_y	double
,	O
y0	function
,	O
y1	function
,	O
y2	double
)	O
;	O
xdevice	double
=	O
XD_INTERNAL	O
(	O
x	double
,	O
y	double
,	O
m	array
)	O
;	O
ydevice	double
=	O
YD_INTERNAL	O
(	O
x	double
,	O
y	double
,	O
m	array
)	O
;	O
_update_bbox	function
(	O
bufp	pointer
,	O
xdevice	double
,	O
ydevice	double
+	O
device_halfwidth	double
)	O
;	O
_update_bbox	function
(	O
bufp	pointer
,	O
xdevice	double
,	O
ydevice	double
-	O
device_halfwidth	double
)	O
;	O
}	O
}	O
}	O
void	O
_set_bezier3_bbox	function
(	O
plOutbuf	struct
*	O
bufp	pointer
,	O
double	O
x0	double
,	O
double	O
y0	function
,	O
double	O
x1	double
,	O
double	O
y1	function
,	O
double	O
x2	double
,	O
double	O
y2	double
,	O
double	O
x3	double
,	O
double	O
y3	double
,	O
double	O
device_line_width	double
,	O
double	O
m	array
[	O
6	int
]	O
)	O
{	O
double	O
a_x	double
,	O
b_x	double
,	O
c_x	double
,	O
s_x	double
,	O
t_x	double
;	O
double	O
a_y	double
,	O
b_y	double
,	O
c_y	double
,	O
s_y	double
,	O
t_y	double
;	O
double	O
x	double
,	O
y	double
,	O
xdevice	double
,	O
ydevice	double
;	O
double	O
device_halfwidth	double
=	O
0.5	int
*	O
device_line_width	double
;	O
double	O
sqrt_disc	double
;	O
a_x	double
=	O
x0	double
-	O
3	int
*	O
x1	double
+	O
3	int
*	O
x2	double
-	O
x3	double
;	O
b_x	double
=	O
2	int
*	O
(	O
x1	double
-	O
2	int
*	O
x2	double
+	O
x3	double
)	O
;	O
c_x	double
=	O
x2	double
-	O
x3	double
;	O
a_y	double
=	O
y0	function
-	O
3	int
*	O
y1	function
+	O
3	int
*	O
y2	double
-	O
y3	double
;	O
b_y	double
=	O
2	int
*	O
(	O
y1	function
-	O
2	int
*	O
y2	double
+	O
y3	double
)	O
;	O
c_y	double
=	O
y2	double
-	O
y3	double
;	O
if	O
(	O
a_x	double
!=	O
0.0	int
)	O
{	O
sqrt_disc	double
=	O
sqrt	function
(	O
b_x	double
*	O
b_x	double
-	O
4	int
*	O
a_x	double
*	O
c_x	double
)	O
;	O
s_x	double
=	O
(	O
-	O
b_x	double
+	O
sqrt_disc	double
)	O
/	O
(	O
2	int
*	O
a_x	double
)	O
;	O
t_x	double
=	O
(	O
-	O
b_x	double
-	O
sqrt_disc	double
)	O
/	O
(	O
2	int
*	O
a_x	double
)	O
;	O
if	O
(	O
s_x	double
>	O
0.0	int
&&	O
s_x	double
<	O
1.0	int
)	O
{	O
x	double
=	O
CUBIC_COOR	O
(	O
s_x	double
,	O
x0	double
,	O
x1	double
,	O
x2	double
,	O
x3	double
)	O
;	O
y	double
=	O
CUBIC_COOR	O
(	O
s_x	double
,	O
y0	function
,	O
y1	function
,	O
y2	double
,	O
y3	double
)	O
;	O
xdevice	double
=	O
XD_INTERNAL	O
(	O
x	double
,	O
y	double
,	O
m	array
)	O
;	O
ydevice	double
=	O
YD_INTERNAL	O
(	O
x	double
,	O
y	double
,	O
m	array
)	O
;	O
_update_bbox	function
(	O
bufp	pointer
,	O
xdevice	double
+	O
device_halfwidth	double
,	O
ydevice	double
)	O
;	O
_update_bbox	function
(	O
bufp	pointer
,	O
xdevice	double
-	O
device_halfwidth	double
,	O
ydevice	double
)	O
;	O
}	O
if	O
(	O
t_x	double
>	O
0.0	int
&&	O
t_x	double
<	O
1.0	int
)	O
{	O
x	double
=	O
CUBIC_COOR	O
(	O
t_x	double
,	O
x0	double
,	O
x1	double
,	O
x2	double
,	O
x3	double
)	O
;	O
y	double
=	O
CUBIC_COOR	O
(	O
t_x	double
,	O
y0	function
,	O
y1	function
,	O
y2	double
,	O
y3	double
)	O
;	O
xdevice	double
=	O
XD_INTERNAL	O
(	O
x	double
,	O
y	double
,	O
m	array
)	O
;	O
ydevice	double
=	O
YD_INTERNAL	O
(	O
x	double
,	O
y	double
,	O
m	array
)	O
;	O
_update_bbox	function
(	O
bufp	pointer
,	O
xdevice	double
+	O
device_halfwidth	double
,	O
ydevice	double
)	O
;	O
_update_bbox	function
(	O
bufp	pointer
,	O
xdevice	double
-	O
device_halfwidth	double
,	O
ydevice	double
)	O
;	O
}	O
}	O
if	O
(	O
a_y	double
!=	O
0.0	int
)	O
{	O
sqrt_disc	double
=	O
sqrt	function
(	O
b_y	double
*	O
b_y	double
-	O
4	int
*	O
a_y	double
*	O
c_y	double
)	O
;	O
s_y	double
=	O
(	O
-	O
b_y	double
+	O
sqrt_disc	double
)	O
/	O
(	O
2	int
*	O
a_y	double
)	O
;	O
t_y	double
=	O
(	O
-	O
b_y	double
-	O
sqrt_disc	double
)	O
/	O
(	O
2	int
*	O
a_y	double
)	O
;	O
if	O
(	O
s_y	double
>	O
0.0	int
&&	O
s_y	double
<	O
1.0	int
)	O
{	O
x	double
=	O
CUBIC_COOR	O
(	O
s_y	double
,	O
x0	double
,	O
x1	double
,	O
x2	double
,	O
x3	double
)	O
;	O
y	double
=	O
CUBIC_COOR	O
(	O
s_y	double
,	O
y0	function
,	O
y1	function
,	O
y2	double
,	O
y3	double
)	O
;	O
xdevice	double
=	O
XD_INTERNAL	O
(	O
x	double
,	O
y	double
,	O
m	array
)	O
;	O
ydevice	double
=	O
YD_INTERNAL	O
(	O
x	double
,	O
y	double
,	O
m	array
)	O
;	O
_update_bbox	function
(	O
bufp	pointer
,	O
xdevice	double
,	O
ydevice	double
+	O
device_halfwidth	double
)	O
;	O
_update_bbox	function
(	O
bufp	pointer
,	O
xdevice	double
,	O
ydevice	double
-	O
device_halfwidth	double
)	O
;	O
}	O
if	O
(	O
t_y	double
>	O
0.0	int
&&	O
t_y	double
<	O
1.0	int
)	O
{	O
x	double
=	O
CUBIC_COOR	O
(	O
t_y	double
,	O
x0	double
,	O
x1	double
,	O
x2	double
,	O
x3	double
)	O
;	O
y	double
=	O
CUBIC_COOR	O
(	O
t_y	double
,	O
y0	function
,	O
y1	function
,	O
y2	double
,	O
y3	double
)	O
;	O
xdevice	double
=	O
XD_INTERNAL	O
(	O
x	double
,	O
y	double
,	O
m	array
)	O
;	O
ydevice	double
=	O
YD_INTERNAL	O
(	O
x	double
,	O
y	double
,	O
m	array
)	O
;	O
_update_bbox	function
(	O
bufp	pointer
,	O
xdevice	double
,	O
ydevice	double
+	O
device_halfwidth	double
)	O
;	O
_update_bbox	function
(	O
bufp	pointer
,	O
xdevice	double
,	O
ydevice	double
-	O
device_halfwidth	double
)	O
;	O
}	O
}	O
}	O
