msgdomain_list_ty	struct
*	O
msgdomain_read_tcl	function
(	O
const	O
char	O
*	O
locale_name	pointer
,	O
const	O
char	O
*	O
directory	pointer
)	O
{	O
const	O
char	O
*	O
gettextdatadir	pointer
;	O
char	O
*	O
tclscript	pointer
;	O
size_t	long
len	long
;	O
char	O
*	O
frobbed_locale_name	pointer
;	O
char	O
*	O
p	pointer
;	O
char	O
*	O
file_name	pointer
;	O
char	O
*	O
argv	pointer
[	O
4	int
]	O
;	O
pid_t	int
child	int
;	O
int	O
fd	long
[	O
1	int
]	O
;	O
FILE	struct
*	O
fp	pointer
;	O
msgdomain_list_ty	struct
*	O
mdlp	pointer
;	O
int	O
exitstatus	int
;	O
size_t	long
k	long
;	O
gettextdatadir	pointer
=	O
getenv	function
(	O
"GETTEXTTCLDIR"	pointer
)	O
;	O
if	O
(	O
gettextdatadir	pointer
==	O
NULL	O
||	O
gettextdatadir	pointer
[	O
0	int
]	O
==	O
'\0'	O
)	O
gettextdatadir	pointer
=	O
relocate	O
(	O
GETTEXTDATADIR	O
)	O
;	O
tclscript	pointer
=	O
xconcatenated_filename	function
(	O
gettextdatadir	pointer
,	O
"msgunfmt.tcl"	pointer
,	O
NULL	O
)	O
;	O
len	long
=	O
strlen	function
(	O
locale_name	pointer
)	O
;	O
frobbed_locale_name	pointer
=	O
(	O
char	O
*	O
)	O
xmalloca	O
(	O
len	long
+	O
1	int
)	O
;	O
memcpy	function
(	O
frobbed_locale_name	pointer
,	O
locale_name	pointer
,	O
len	long
+	O
1	int
)	O
;	O
for	O
(	O
p	pointer
=	O
frobbed_locale_name	pointer
;	O
*	O
p	pointer
!=	O
'\0'	O
;	O
p	pointer
++	O
)	O
if	O
(	O
*	O
p	pointer
>=	O
'A'	O
&&	O
*	O
p	pointer
<=	O
'Z'	O
)	O
*	O
p	pointer
=	O
*	O
p	pointer
-	O
'A'	O
+	O
'a'	O
;	O
else	O
if	O
(	O
*	O
p	pointer
==	O
'.'	O
)	O
{	O
*	O
p	pointer
=	O
'\0'	O
;	O
break	O
;	O
}	O
file_name	pointer
=	O
xconcatenated_filename	function
(	O
directory	pointer
,	O
frobbed_locale_name	pointer
,	O
".msg"	pointer
)	O
;	O
freea	function
(	O
frobbed_locale_name	pointer
)	O
;	O
argv	pointer
[	O
0	int
]	O
=	O
"tclsh"	pointer
;	O
argv	pointer
[	O
1	int
]	O
=	O
tclscript	pointer
;	O
argv	pointer
[	O
2	int
]	O
=	O
file_name	pointer
;	O
argv	pointer
[	O
3	int
]	O
=	O
NULL	O
;	O
if	O
(	O
verbose	int
)	O
{	O
char	O
*	O
command	pointer
=	O
shell_quote_argv	function
(	O
argv	pointer
)	O
;	O
printf	function
(	O
"%s\n"	pointer
,	O
command	pointer
)	O
;	O
free	function
(	O
command	pointer
)	O
;	O
}	O
child	int
=	O
create_pipe_in	function
(	O
"tclsh"	pointer
,	O
"tclsh"	pointer
,	O
argv	pointer
,	O
DEV_NULL	double
,	O
false	int
,	O
true	int
,	O
true	int
,	O
fd	int
)	O
;	O
fp	pointer
=	O
fdopen	function
(	O
fd	array
[	O
0	int
]	O
,	O
"r"	pointer
)	O
;	O
if	O
(	O
fp	pointer
==	O
NULL	O
)	O
error	function
(	O
EXIT_FAILURE	int
,	O
errno	O
,	O
_	O
(	O
"fdopen() failed"	pointer
)	O
)	O
;	O
mdlp	pointer
=	O
read_catalog_stream	function
(	O
fp	pointer
,	O
"(pipe)"	pointer
,	O
"(pipe)"	pointer
,	O
&	O
input_format_po	struct
)	O
;	O
fclose	function
(	O
fp	pointer
)	O
;	O
exitstatus	int
=	O
wait_subprocess	function
(	O
child	int
,	O
"tclsh"	int
,	O
false	int
,	O
false	int
,	O
true	int
,	O
true	int
,	O
NULL	O
)	O
;	O
if	O
(	O
exitstatus	int
!=	O
0	int
)	O
{	O
if	O
(	O
exitstatus	int
==	O
2	int
)	O
error	function
(	O
EXIT_FAILURE	int
,	O
ENOENT	int
,	O
_	O
(	O
"error while opening \"%s\" for reading"	pointer
)	O
,	O
file_name	pointer
)	O
;	O
else	O
error	function
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
_	O
(	O
"%s subprocess failed with exit code %d"	pointer
)	O
,	O
"tclsh"	int
,	O
exitstatus	int
)	O
;	O
}	O
free	function
(	O
tclscript	pointer
)	O
;	O
for	O
(	O
k	int
=	O
0	int
;	O
k	int
<	O
mdlp	pointer
->	O
nitems	long
;	O
k	int
++	O
)	O
{	O
message_list_ty	struct
*	O
mlp	pointer
=	O
mdlp	pointer
->	O
item	pointer
[	O
k	int
]	O
->	O
messages	pointer
;	O
size_t	long
j	long
;	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
mlp	pointer
->	O
nitems	long
;	O
j	long
++	O
)	O
if	O
(	O
is_header	O
(	O
mlp	pointer
->	O
item	pointer
[	O
j	long
]	O
)	O
)	O
{	O
if	O
(	O
j	long
>	O
0	int
)	O
{	O
message_ty	struct
*	O
header	pointer
=	O
mlp	pointer
->	O
item	pointer
[	O
j	long
]	O
;	O
size_t	long
i	long
;	O
for	O
(	O
i	long
=	O
j	long
;	O
i	long
>	O
0	int
;	O
i	long
--	O
)	O
mlp	pointer
->	O
item	pointer
[	O
i	long
]	O
=	O
mlp	pointer
->	O
item	pointer
[	O
i	long
-	O
1	int
]	O
;	O
mlp	pointer
->	O
item	pointer
[	O
0	int
]	O
=	O
header	pointer
;	O
}	O
break	O
;	O
}	O
}	O
return	O
mdlp	pointer
;	O
}	O