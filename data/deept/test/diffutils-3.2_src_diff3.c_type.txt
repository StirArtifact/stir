enum	O
diff_type	enum
{	O
ERROR	int
,	O
ADD	int
,	O
CHANGE	int
,	O
DELETE	int
,	O
DIFF_ALL	int
,	O
DIFF_1ST	int
,	O
DIFF_2ND	int
,	O
DIFF_3RD	int
}	O
;	O
struct	O
diff_block	struct
{	O
lin	long
ranges	array
[	O
2	int
]	O
[	O
2	int
]	O
;	O
char	O
*	O
*	O
lines	array
[	O
2	int
]	O
;	O
size_t	long
*	O
lengths	array
[	O
2	int
]	O
;	O
struct	O
diff_block	struct
*	O
next	pointer
;	O
}	O
;	O
struct	O
diff3_block	struct
{	O
enum	O
diff_type	enum
correspond	enum
;	O
lin	long
ranges	array
[	O
3	int
]	O
[	O
2	int
]	O
;	O
char	O
*	O
*	O
lines	array
[	O
3	int
]	O
;	O
size_t	long
*	O
lengths	array
[	O
3	int
]	O
;	O
struct	O
diff3_block	struct
*	O
next	pointer
;	O
}	O
;	O
static	O
bool	bool
text	bool
;	O
static	O
bool	bool
strip_trailing_cr	bool
;	O
static	O
bool	bool
edscript	bool
;	O
static	O
bool	bool
flagging	bool
;	O
static	O
bool	bool
initial_tab	bool
;	O
static	O
bool	bool
simple_only	bool
;	O
static	O
bool	bool
overlap_only	bool
;	O
static	O
bool	bool
show_2nd	bool
;	O
static	O
bool	bool
finalwrite	bool
;	O
static	O
bool	bool
merge	bool
;	O
static	O
char	O
*	O
read_diff	function
(	O
char	O
const	O
*	O
,	O
char	O
const	O
*	O
,	O
char	O
*	O
*	O
)	O
;	O
static	O
char	O
*	O
scan_diff_line	function
(	O
char	O
*	O
,	O
char	O
*	O
*	O
,	O
size_t	long
*	O
,	O
char	O
*	O
,	O
char	O
)	O
;	O
static	O
enum	O
diff_type	enum
process_diff_control	function
(	O
char	O
*	O
*	O
,	O
struct	O
diff_block	struct
*	O
)	O
;	O
static	O
bool	bool
compare_line_list	function
(	O
char	O
*	O
const	O
[	O
]	O
,	O
size_t	long
const	O
[	O
]	O
,	O
char	O
*	O
const	O
[	O
]	O
,	O
size_t	long
const	O
[	O
]	O
,	O
lin	long
)	O
;	O
static	O
bool	bool
copy_stringlist	function
(	O
char	O
*	O
const	O
[	O
]	O
,	O
size_t	long
const	O
[	O
]	O
,	O
char	O
*	O
[	O
]	O
,	O
size_t	long
[	O
]	O
,	O
lin	long
)	O
;	O
static	O
bool	bool
output_diff3_edscript	function
(	O
FILE	struct
*	O
,	O
struct	O
diff3_block	struct
*	O
,	O
int	O
const	O
[	O
3	int
]	O
,	O
int	O
const	O
[	O
3	int
]	O
,	O
char	O
const	O
*	O
,	O
char	O
const	O
*	O
,	O
char	O
const	O
*	O
)	O
;	O
static	O
bool	bool
output_diff3_merge	function
(	O
FILE	struct
*	O
,	O
FILE	struct
*	O
,	O
struct	O
diff3_block	struct
*	O
,	O
int	O
const	O
[	O
3	int
]	O
,	O
int	O
const	O
[	O
3	int
]	O
,	O
char	O
const	O
*	O
,	O
char	O
const	O
*	O
,	O
char	O
const	O
*	O
)	O
;	O
static	O
struct	O
diff3_block	struct
*	O
create_diff3_block	function
(	O
lin	long
,	O
lin	long
,	O
lin	long
,	O
lin	long
,	O
lin	long
,	O
lin	long
)	O
;	O
static	O
struct	O
diff3_block	struct
*	O
make_3way_diff	function
(	O
struct	O
diff_block	struct
*	O
,	O
struct	O
diff_block	struct
*	O
)	O
;	O
static	O
struct	O
diff3_block	struct
*	O
reverse_diff3_blocklist	function
(	O
struct	O
diff3_block	struct
*	O
)	O
;	O
static	O
struct	O
diff3_block	struct
*	O
using_to_diff3_block	function
(	O
struct	O
diff_block	struct
*	O
[	O
2	int
]	O
,	O
struct	O
diff_block	struct
*	O
[	O
2	int
]	O
,	O
int	O
,	O
int	O
,	O
struct	O
diff3_block	struct
const	O
*	O
)	O
;	O
static	O
struct	O
diff_block	struct
*	O
process_diff	function
(	O
char	O
const	O
*	O
,	O
char	O
const	O
*	O
,	O
struct	O
diff_block	struct
*	O
*	O
)	O
;	O
static	O
void	O
check_stdout	function
(	O
void	O
)	O
;	O
static	O
void	O
fatal	function
(	O
char	O
const	O
*	O
)	O
__attribute__	O
(	O
(	O
noreturn	O
)	O
)	O
;	O
static	O
void	O
output_diff3	function
(	O
FILE	struct
*	O
,	O
struct	O
diff3_block	struct
*	O
,	O
int	O
const	O
[	O
3	int
]	O
,	O
int	O
const	O
[	O
3	int
]	O
)	O
;	O
static	O
void	O
perror_with_exit	function
(	O
char	O
const	O
*	O
)	O
__attribute__	O
(	O
(	O
noreturn	O
)	O
)	O
;	O
static	O
void	O
try_help	function
(	O
char	O
const	O
*	O
,	O
char	O
const	O
*	O
)	O
__attribute__	O
(	O
(	O
noreturn	O
)	O
)	O
;	O
static	O
void	O
usage	function
(	O
void	O
)	O
;	O
static	O
char	O
const	O
*	O
diff_program	pointer
=	O
DEFAULT_DIFF_PROGRAM	pointer
;	O
enum	O
{	O
DIFF_PROGRAM_OPTION	int
=	O
CHAR_MAX	O
+	O
1	int
,	O
HELP_OPTION	int
,	O
STRIP_TRAILING_CR_OPTION	int
}	O
;	O
static	O
struct	O
option	struct
const	O
longopts	array
[	O
]	O
=	O
{	O
{	O
"diff-program"	pointer
,	O
1	int
,	O
0	int
,	O
DIFF_PROGRAM_OPTION	int
}	O
,	O
{	O
"easy-only"	pointer
,	O
0	int
,	O
0	int
,	O
'3'	O
}	O
,	O
{	O
"ed"	pointer
,	O
0	int
,	O
0	int
,	O
'e'	O
}	O
,	O
{	O
"help"	pointer
,	O
0	int
,	O
0	int
,	O
HELP_OPTION	int
}	O
,	O
{	O
"initial-tab"	pointer
,	O
0	int
,	O
0	int
,	O
'T'	O
}	O
,	O
{	O
"label"	pointer
,	O
1	int
,	O
0	int
,	O
'L'	O
}	O
,	O
{	O
"merge"	pointer
,	O
0	int
,	O
0	int
,	O
'm'	O
}	O
,	O
{	O
"overlap-only"	pointer
,	O
0	int
,	O
0	int
,	O
'x'	O
}	O
,	O
{	O
"show-all"	pointer
,	O
0	int
,	O
0	int
,	O
'A'	O
}	O
,	O
{	O
"show-overlap"	pointer
,	O
0	int
,	O
0	int
,	O
'E'	O
}	O
,	O
{	O
"strip-trailing-cr"	pointer
,	O
0	int
,	O
0	int
,	O
STRIP_TRAILING_CR_OPTION	int
}	O
,	O
{	O
"text"	pointer
,	O
0	int
,	O
0	int
,	O
'a'	O
}	O
,	O
{	O
"version"	pointer
,	O
0	int
,	O
0	int
,	O
'v'	O
}	O
,	O
{	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
}	O
}	O
;	O
int	O
main	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
int	O
c	int
,	O
i	int
;	O
int	O
common	int
;	O
int	O
mapping	array
[	O
3	int
]	O
;	O
int	O
rev_mapping	array
[	O
3	int
]	O
;	O
int	O
incompat	int
=	O
0	int
;	O
bool	bool
conflicts_found	bool
;	O
struct	O
diff_block	struct
*	O
thread0	pointer
,	O
*	O
thread1	pointer
,	O
*	O
last_block	pointer
;	O
struct	O
diff3_block	struct
*	O
diff3	pointer
;	O
int	O
tag_count	int
=	O
0	int
;	O
char	O
*	O
tag_strings	array
[	O
3	int
]	O
;	O
char	O
*	O
commonname	pointer
;	O
char	O
*	O
*	O
file	pointer
;	O
struct	O
stat	struct
statb	struct
;	O
exit_failure	int
=	O
EXIT_TROUBLE	int
;	O
initialize_main	O
(	O
&	O
argc	int
,	O
&	O
argv	pointer
)	O
;	O
set_program_name	function
(	O
argv	pointer
[	O
0	int
]	O
)	O
;	O
setlocale	function
(	O
LC_ALL	O
,	O
""	pointer
)	O
;	O
bindtextdomain	function
(	O
PACKAGE	pointer
,	O
LOCALEDIR	pointer
)	O
;	O
textdomain	function
(	O
PACKAGE	pointer
)	O
;	O
c_stack_action	function
(	O
0	int
)	O
;	O
while	O
(	O
(	O
c	int
=	O
getopt_long	function
(	O
argc	int
,	O
argv	pointer
,	O
"aeimvx3AEL:TX"	pointer
,	O
longopts	array
,	O
0	int
)	O
)	O
!=	O
-	O
1	int
)	O
{	O
switch	O
(	O
c	int
)	O
{	O
case	O
'a'	O
:	O
text	bool
=	O
true	int
;	O
break	O
;	O
case	O
'A'	O
:	O
show_2nd	bool
=	O
true	int
;	O
flagging	bool
=	O
true	int
;	O
incompat	int
++	O
;	O
break	O
;	O
case	O
'x'	O
:	O
overlap_only	bool
=	O
true	int
;	O
incompat	int
++	O
;	O
break	O
;	O
case	O
'3'	O
:	O
simple_only	bool
=	O
true	int
;	O
incompat	int
++	O
;	O
break	O
;	O
case	O
'i'	O
:	O
finalwrite	bool
=	O
true	int
;	O
break	O
;	O
case	O
'm'	O
:	O
merge	bool
=	O
true	int
;	O
break	O
;	O
case	O
'X'	O
:	O
overlap_only	bool
=	O
true	int
;	O
case	O
'E'	O
:	O
flagging	bool
=	O
true	int
;	O
case	O
'e'	O
:	O
incompat	int
++	O
;	O
break	O
;	O
case	O
'T'	O
:	O
initial_tab	bool
=	O
true	int
;	O
break	O
;	O
case	O
STRIP_TRAILING_CR_OPTION	int
:	O
strip_trailing_cr	bool
=	O
true	int
;	O
break	O
;	O
case	O
'v'	O
:	O
version_etc	function
(	O
stdout	pointer
,	O
PROGRAM_NAME	pointer
,	O
PACKAGE_NAME	pointer
,	O
Version	pointer
,	O
AUTHORS	O
,	O
(	O
char	O
*	O
)	O
NULL	O
)	O
;	O
check_stdout	function
(	O
)	O
;	O
return	O
EXIT_SUCCESS	int
;	O
case	O
DIFF_PROGRAM_OPTION	int
:	O
diff_program	pointer
=	O
optarg	pointer
;	O
break	O
;	O
case	O
HELP_OPTION	int
:	O
usage	function
(	O
)	O
;	O
check_stdout	function
(	O
)	O
;	O
return	O
EXIT_SUCCESS	int
;	O
case	O
'L'	O
:	O
if	O
(	O
tag_count	int
<	O
3	int
)	O
{	O
tag_strings	array
[	O
tag_count	int
++	O
]	O
=	O
optarg	pointer
;	O
break	O
;	O
}	O
try_help	function
(	O
"too many file label options"	pointer
,	O
0	int
)	O
;	O
default	O
:	O
try_help	function
(	O
0	int
,	O
0	int
)	O
;	O
}	O
}	O
edscript	bool
=	O
incompat	int
&	O
~	O
merge	bool
;	O
show_2nd	bool
|=	O
~	O
incompat	int
&	O
merge	bool
;	O
flagging	bool
|=	O
~	O
incompat	int
&	O
merge	bool
;	O
if	O
(	O
incompat	int
>	O
1	int
||	O
finalwrite	bool
&	O
merge	bool
||	O
(	O
tag_count	int
&&	O
!	O
flagging	bool
)	O
)	O
try_help	function
(	O
"incompatible options"	pointer
,	O
0	int
)	O
;	O
if	O
(	O
argc	int
-	O
optind	int
!=	O
3	int
)	O
{	O
if	O
(	O
argc	int
-	O
optind	int
<	O
3	int
)	O
try_help	function
(	O
"missing operand after `%s'"	pointer
,	O
argv	pointer
[	O
argc	int
-	O
1	int
]	O
)	O
;	O
else	O
try_help	function
(	O
"extra operand `%s'"	pointer
,	O
argv	pointer
[	O
optind	int
+	O
3	int
]	O
)	O
;	O
}	O
file	pointer
=	O
&	O
argv	pointer
[	O
optind	int
]	O
;	O
for	O
(	O
i	int
=	O
tag_count	int
;	O
i	int
<	O
3	int
;	O
i	int
++	O
)	O
tag_strings	array
[	O
i	int
]	O
=	O
file	pointer
[	O
i	int
]	O
;	O
common	int
=	O
2	int
-	O
(	O
edscript	bool
|	O
merge	bool
)	O
;	O
if	O
(	O
STREQ	O
(	O
file	pointer
[	O
common	int
]	O
,	O
"-"	pointer
)	O
)	O
{	O
common	int
=	O
3	int
-	O
common	int
;	O
if	O
(	O
STREQ	O
(	O
file	pointer
[	O
0	int
]	O
,	O
"-"	pointer
)	O
||	O
STREQ	O
(	O
file	pointer
[	O
common	int
]	O
,	O
"-"	pointer
)	O
)	O
fatal	function
(	O
"`-' specified for more than one input file"	pointer
)	O
;	O
}	O
mapping	array
[	O
0	int
]	O
=	O
0	int
;	O
mapping	array
[	O
1	int
]	O
=	O
3	int
-	O
common	int
;	O
mapping	array
[	O
2	int
]	O
=	O
common	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
3	int
;	O
i	int
++	O
)	O
rev_mapping	array
[	O
mapping	array
[	O
i	int
]	O
]	O
=	O
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
3	int
;	O
i	int
++	O
)	O
if	O
(	O
!	O
STREQ	O
(	O
file	pointer
[	O
i	int
]	O
,	O
"-"	pointer
)	O
)	O
{	O
if	O
(	O
stat	struct
(	O
file	pointer
[	O
i	int
]	O
,	O
&	O
statb	struct
)	O
<	O
0	int
)	O
perror_with_exit	function
(	O
file	pointer
[	O
i	int
]	O
)	O
;	O
else	O
if	O
(	O
S_ISDIR	O
(	O
statb	struct
.	O
st_mode	int
)	O
)	O
error	function
(	O
EXIT_TROUBLE	int
,	O
EISDIR	int
,	O
"%s"	pointer
,	O
file	pointer
[	O
i	int
]	O
)	O
;	O
}	O
signal	function
(	O
SIGCHLD	int
,	O
SIG_DFL	O
)	O
;	O
commonname	pointer
=	O
file	pointer
[	O
rev_mapping	array
[	O
FILEC	O
]	O
]	O
;	O
thread1	pointer
=	O
process_diff	function
(	O
file	pointer
[	O
rev_mapping	array
[	O
FILE1	int
]	O
]	O
,	O
commonname	pointer
,	O
&	O
last_block	pointer
)	O
;	O
thread0	pointer
=	O
process_diff	function
(	O
file	pointer
[	O
rev_mapping	array
[	O
FILE0	int
]	O
]	O
,	O
commonname	pointer
,	O
&	O
last_block	pointer
)	O
;	O
diff3	pointer
=	O
make_3way_diff	function
(	O
thread0	pointer
,	O
thread1	pointer
)	O
;	O
if	O
(	O
edscript	bool
)	O
conflicts_found	bool
=	O
output_diff3_edscript	function
(	O
stdout	pointer
,	O
diff3	pointer
,	O
mapping	array
,	O
rev_mapping	array
,	O
tag_strings	array
[	O
0	int
]	O
,	O
tag_strings	array
[	O
1	int
]	O
,	O
tag_strings	array
[	O
2	int
]	O
)	O
;	O
else	O
if	O
(	O
merge	bool
)	O
{	O
xfreopen	function
(	O
file	pointer
[	O
rev_mapping	array
[	O
FILE0	int
]	O
]	O
,	O
"r"	pointer
,	O
stdin	pointer
)	O
;	O
conflicts_found	bool
=	O
output_diff3_merge	function
(	O
stdin	pointer
,	O
stdout	pointer
,	O
diff3	pointer
,	O
mapping	array
,	O
rev_mapping	array
,	O
tag_strings	array
[	O
0	int
]	O
,	O
tag_strings	array
[	O
1	int
]	O
,	O
tag_strings	array
[	O
2	int
]	O
)	O
;	O
if	O
(	O
ferror	function
(	O
stdin	pointer
)	O
)	O
fatal	function
(	O
"read failed"	pointer
)	O
;	O
}	O
else	O
{	O
output_diff3	function
(	O
stdout	pointer
,	O
diff3	pointer
,	O
mapping	array
,	O
rev_mapping	array
)	O
;	O
conflicts_found	bool
=	O
false	int
;	O
}	O
check_stdout	function
(	O
)	O
;	O
exit	function
(	O
conflicts_found	bool
)	O
;	O
return	O
conflicts_found	bool
;	O
}	O
static	O
void	O
try_help	function
(	O
char	O
const	O
*	O
reason_msgid	pointer
,	O
char	O
const	O
*	O
operand	pointer
)	O
{	O
if	O
(	O
reason_msgid	pointer
)	O
error	function
(	O
0	int
,	O
0	int
,	O
_	O
(	O
reason_msgid	pointer
)	O
,	O
operand	pointer
)	O
;	O
error	function
(	O
EXIT_TROUBLE	int
,	O
0	int
,	O
_	O
(	O
"Try `%s --help' for more information."	pointer
)	O
,	O
program_name	pointer
)	O
;	O
abort	function
(	O
)	O
;	O
}	O
static	O
void	O
check_stdout	function
(	O
void	O
)	O
{	O
if	O
(	O
ferror	function
(	O
stdout	pointer
)	O
)	O
fatal	function
(	O
"write failed"	pointer
)	O
;	O
else	O
if	O
(	O
fclose	function
(	O
stdout	pointer
)	O
!=	O
0	int
)	O
perror_with_exit	function
(	O
_	O
(	O
"standard output"	pointer
)	O
)	O
;	O
}	O
static	O
char	O
const	O
*	O
const	O
option_help_msgid	array
[	O
]	O
=	O
{	O
N_	O
(	O
"-A, --show-all              output all changes, bracketing conflicts"	pointer
)	O
,	O
""	pointer
,	O
N_	O
(	O
"-e, --ed                    output ed script incorporating changes\n"	pointer
"                                from OLDFILE to YOURFILE into MYFILE"	pointer
)	O
,	O
N_	O
(	O
"-E, --show-overlap          like -e, but bracket conflicts"	pointer
)	O
,	O
N_	O
(	O
"-3, --easy-only             like -e, but incorporate only nonoverlapping changes"	pointer
)	O
,	O
N_	O
(	O
"-x, --overlap-only          like -e, but incorporate only overlapping changes"	pointer
)	O
,	O
N_	O
(	O
"-X                          like -x, but bracket conflicts"	pointer
)	O
,	O
N_	O
(	O
"-i                          append `w' and `q' commands to ed scripts"	pointer
)	O
,	O
""	pointer
,	O
N_	O
(	O
"-m, --merge                 output actual merged file, according to\n"	pointer
"                                -A if no other options are given"	pointer
)	O
,	O
""	pointer
,	O
N_	O
(	O
"-a, --text                  treat all files as text"	pointer
)	O
,	O
N_	O
(	O
"    --strip-trailing-cr     strip trailing carriage return on input"	pointer
)	O
,	O
N_	O
(	O
"-T, --initial-tab           make tabs line up by prepending a tab"	pointer
)	O
,	O
N_	O
(	O
"    --diff-program=PROGRAM  use PROGRAM to compare files"	pointer
)	O
,	O
N_	O
(	O
"-L, --label=LABEL           use LABEL instead of file name\n"	pointer
"                                (can be repeated up to three times)"	pointer
)	O
,	O
""	pointer
,	O
N_	O
(	O
"    --help                  display this help and exit"	pointer
)	O
,	O
N_	O
(	O
"-v, --version               output version information and exit"	pointer
)	O
,	O
0	int
}	O
;	O
static	O
void	O
usage	function
(	O
void	O
)	O
{	O
char	O
const	O
*	O
const	O
*	O
p	pointer
;	O
printf	function
(	O
_	O
(	O
"Usage: %s [OPTION]... MYFILE OLDFILE YOURFILE\n"	pointer
)	O
,	O
program_name	pointer
)	O
;	O
printf	function
(	O
"%s\n\n"	pointer
,	O
_	O
(	O
"Compare three files line by line."	pointer
)	O
)	O
;	O
fputs	function
(	O
_	O
(	O
"Mandatory arguments to long options are mandatory for short options too.\n"	pointer
)	O
,	O
stdout	pointer
)	O
;	O
for	O
(	O
p	pointer
=	O
option_help_msgid	array
;	O
*	O
p	pointer
;	O
p	pointer
++	O
)	O
if	O
(	O
*	O
*	O
p	pointer
)	O
printf	function
(	O
"  %s\n"	pointer
,	O
_	O
(	O
*	O
p	pointer
)	O
)	O
;	O
else	O
putchar	function
(	O
'\n'	O
)	O
;	O
fputs	function
(	O
_	O
(	O
"\nThe default output format is a somewhat human-readable representation of\nthe changes.\n\nThe -e, -E, -x, -X (and corresponding long) options cause an ed script\nto be output instead of the default.\n\nFinally, the -m (--merge) option causes diff3 to do the merge internally\nand output the actual merged file.  For unusual input, this is more\nrobust than using ed.\n"	pointer
)	O
,	O
stdout	pointer
)	O
;	O
printf	function
(	O
"\n%s\n%s\n"	pointer
,	O
_	O
(	O
"If a FILE is `-', read standard input."	pointer
)	O
,	O
_	O
(	O
"Exit status is 0 if successful, 1 if conflicts, 2 if trouble."	pointer
)	O
)	O
;	O
emit_bug_reporting_address	function
(	O
)	O
;	O
}	O
static	O
struct	O
diff3_block	struct
*	O
make_3way_diff	function
(	O
struct	O
diff_block	struct
*	O
thread0	pointer
,	O
struct	O
diff_block	struct
*	O
thread1	pointer
)	O
{	O
struct	O
diff_block	struct
*	O
using	array
[	O
2	int
]	O
;	O
struct	O
diff_block	struct
*	O
last_using	array
[	O
2	int
]	O
;	O
struct	O
diff_block	struct
*	O
current	array
[	O
2	int
]	O
;	O
lin	long
high_water_mark	long
;	O
int	O
high_water_thread	int
;	O
int	O
base_water_thread	int
;	O
int	O
other_thread	int
;	O
struct	O
diff_block	struct
*	O
high_water_diff	pointer
;	O
struct	O
diff_block	struct
*	O
other_diff	pointer
;	O
struct	O
diff3_block	struct
*	O
result	pointer
;	O
struct	O
diff3_block	struct
*	O
tmpblock	pointer
;	O
struct	O
diff3_block	struct
*	O
*	O
result_end	pointer
;	O
struct	O
diff3_block	struct
const	O
*	O
last_diff3	pointer
;	O
static	O
struct	O
diff3_block	struct
const	O
zero_diff3	struct
;	O
result	pointer
=	O
0	int
;	O
result_end	pointer
=	O
&	O
result	pointer
;	O
current	array
[	O
0	int
]	O
=	O
thread0	pointer
;	O
current	array
[	O
1	int
]	O
=	O
thread1	pointer
;	O
last_diff3	pointer
=	O
&	O
zero_diff3	struct
;	O
while	O
(	O
current	array
[	O
0	int
]	O
||	O
current	array
[	O
1	int
]	O
)	O
{	O
using	array
[	O
0	int
]	O
=	O
using	array
[	O
1	int
]	O
=	O
last_using	array
[	O
0	int
]	O
=	O
last_using	array
[	O
1	int
]	O
=	O
0	int
;	O
if	O
(	O
!	O
current	array
[	O
0	int
]	O
)	O
base_water_thread	int
=	O
1	int
;	O
else	O
if	O
(	O
!	O
current	array
[	O
1	int
]	O
)	O
base_water_thread	int
=	O
0	int
;	O
else	O
base_water_thread	int
=	O
(	O
D_LOWLINE	O
(	O
current	array
[	O
0	int
]	O
,	O
FC	int
)	O
>	O
D_LOWLINE	O
(	O
current	array
[	O
1	int
]	O
,	O
FC	int
)	O
)	O
;	O
high_water_thread	int
=	O
base_water_thread	int
;	O
high_water_diff	pointer
=	O
current	array
[	O
high_water_thread	int
]	O
;	O
high_water_mark	long
=	O
D_HIGHLINE	O
(	O
high_water_diff	pointer
,	O
FC	int
)	O
;	O
using	array
[	O
high_water_thread	int
]	O
=	O
last_using	array
[	O
high_water_thread	int
]	O
=	O
high_water_diff	pointer
;	O
current	array
[	O
high_water_thread	int
]	O
=	O
high_water_diff	pointer
->	O
next	pointer
;	O
last_using	array
[	O
high_water_thread	int
]	O
->	O
next	pointer
=	O
0	int
;	O
other_thread	int
=	O
high_water_thread	int
^	O
0x1	int
;	O
other_diff	pointer
=	O
current	array
[	O
other_thread	int
]	O
;	O
while	O
(	O
other_diff	pointer
&&	O
D_LOWLINE	O
(	O
other_diff	pointer
,	O
FC	int
)	O
<=	O
high_water_mark	long
+	O
1	int
)	O
{	O
if	O
(	O
using	array
[	O
other_thread	int
]	O
)	O
last_using	array
[	O
other_thread	int
]	O
->	O
next	pointer
=	O
other_diff	pointer
;	O
else	O
using	array
[	O
other_thread	int
]	O
=	O
other_diff	pointer
;	O
last_using	array
[	O
other_thread	int
]	O
=	O
other_diff	pointer
;	O
current	array
[	O
other_thread	int
]	O
=	O
current	array
[	O
other_thread	int
]	O
->	O
next	pointer
;	O
other_diff	pointer
->	O
next	pointer
=	O
0	int
;	O
if	O
(	O
high_water_mark	long
<	O
D_HIGHLINE	O
(	O
other_diff	pointer
,	O
FC	int
)	O
)	O
{	O
high_water_thread	int
^=	O
1	int
;	O
high_water_mark	long
=	O
D_HIGHLINE	O
(	O
other_diff	pointer
,	O
FC	int
)	O
;	O
}	O
other_thread	int
=	O
high_water_thread	int
^	O
0x1	int
;	O
other_diff	pointer
=	O
current	array
[	O
other_thread	int
]	O
;	O
}	O
tmpblock	pointer
=	O
using_to_diff3_block	function
(	O
using	array
,	O
last_using	array
,	O
base_water_thread	int
,	O
high_water_thread	int
,	O
last_diff3	pointer
)	O
;	O
if	O
(	O
!	O
tmpblock	pointer
)	O
fatal	function
(	O
"internal error: screwup in format of diff blocks"	pointer
)	O
;	O
*	O
result_end	pointer
=	O
tmpblock	pointer
;	O
result_end	pointer
=	O
&	O
tmpblock	pointer
->	O
next	pointer
;	O
last_diff3	pointer
=	O
tmpblock	pointer
;	O
}	O
return	O
result	pointer
;	O
}	O
static	O
struct	O
diff3_block	struct
*	O
using_to_diff3_block	function
(	O
struct	O
diff_block	struct
*	O
using	array
[	O
2	int
]	O
,	O
struct	O
diff_block	struct
*	O
last_using	array
[	O
2	int
]	O
,	O
int	O
low_thread	int
,	O
int	O
high_thread	int
,	O
struct	O
diff3_block	struct
const	O
*	O
last_diff3	pointer
)	O
{	O
lin	long
low	array
[	O
2	int
]	O
,	O
high	array
[	O
2	int
]	O
;	O
struct	O
diff3_block	struct
*	O
result	pointer
;	O
struct	O
diff_block	struct
*	O
ptr	pointer
;	O
int	O
d	int
;	O
lin	long
i	int
;	O
lin	long
lowc	long
=	O
D_LOWLINE	O
(	O
using	array
[	O
low_thread	int
]	O
,	O
FC	int
)	O
;	O
lin	long
highc	long
=	O
D_HIGHLINE	O
(	O
last_using	array
[	O
high_thread	int
]	O
,	O
FC	int
)	O
;	O
for	O
(	O
d	int
=	O
0	int
;	O
d	int
<	O
2	int
;	O
d	int
++	O
)	O
if	O
(	O
using	array
[	O
d	int
]	O
)	O
{	O
low	array
[	O
d	int
]	O
=	O
D_LOW_MAPLINE	O
(	O
using	array
[	O
d	int
]	O
,	O
FC	int
,	O
FO	int
,	O
lowc	long
)	O
;	O
high	array
[	O
d	int
]	O
=	O
D_HIGH_MAPLINE	O
(	O
last_using	array
[	O
d	int
]	O
,	O
FC	int
,	O
FO	int
,	O
highc	long
)	O
;	O
}	O
else	O
{	O
low	array
[	O
d	int
]	O
=	O
D_HIGH_MAPLINE	O
(	O
last_diff3	pointer
,	O
FILEC	O
,	O
FILE0	int
+	O
d	int
,	O
lowc	long
)	O
;	O
high	array
[	O
d	int
]	O
=	O
D_HIGH_MAPLINE	O
(	O
last_diff3	pointer
,	O
FILEC	O
,	O
FILE0	int
+	O
d	int
,	O
highc	long
)	O
;	O
}	O
result	pointer
=	O
create_diff3_block	function
(	O
low	array
[	O
0	int
]	O
,	O
high	array
[	O
0	int
]	O
,	O
low	array
[	O
1	int
]	O
,	O
high	array
[	O
1	int
]	O
,	O
lowc	long
,	O
highc	long
)	O
;	O
for	O
(	O
d	int
=	O
0	int
;	O
d	int
<	O
2	int
;	O
d	int
++	O
)	O
for	O
(	O
ptr	pointer
=	O
using	array
[	O
d	int
]	O
;	O
ptr	pointer
;	O
ptr	pointer
=	O
D_NEXT	O
(	O
ptr	pointer
)	O
)	O
{	O
lin	long
result_offset	long
=	O
D_LOWLINE	O
(	O
ptr	pointer
,	O
FC	int
)	O
-	O
lowc	long
;	O
if	O
(	O
!	O
copy_stringlist	function
(	O
D_LINEARRAY	O
(	O
ptr	pointer
,	O
FC	int
)	O
,	O
D_LENARRAY	O
(	O
ptr	pointer
,	O
FC	int
)	O
,	O
D_LINEARRAY	O
(	O
result	pointer
,	O
FILEC	O
)	O
+	O
result_offset	long
,	O
D_LENARRAY	O
(	O
result	pointer
,	O
FILEC	O
)	O
+	O
result_offset	long
,	O
D_NUMLINES	O
(	O
ptr	pointer
,	O
FC	int
)	O
)	O
)	O
return	O
0	int
;	O
}	O
for	O
(	O
d	int
=	O
0	int
;	O
d	int
<	O
2	int
;	O
d	int
++	O
)	O
{	O
struct	O
diff_block	struct
*	O
u	pointer
=	O
using	array
[	O
d	int
]	O
;	O
lin	long
lo	long
=	O
low	array
[	O
d	int
]	O
,	O
hi	long
=	O
high	array
[	O
d	int
]	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
+	O
lo	long
<	O
(	O
u	pointer
?	O
D_LOWLINE	O
(	O
u	pointer
,	O
FO	int
)	O
:	O
hi	long
+	O
1	int
)	O
;	O
i	int
++	O
)	O
{	O
D_RELNUM	O
(	O
result	pointer
,	O
FILE0	int
+	O
d	int
,	O
i	int
)	O
=	O
D_RELNUM	O
(	O
result	pointer
,	O
FILEC	O
,	O
i	int
)	O
;	O
D_RELLEN	O
(	O
result	pointer
,	O
FILE0	int
+	O
d	int
,	O
i	int
)	O
=	O
D_RELLEN	O
(	O
result	pointer
,	O
FILEC	O
,	O
i	int
)	O
;	O
}	O
for	O
(	O
ptr	pointer
=	O
u	pointer
;	O
ptr	pointer
;	O
ptr	pointer
=	O
D_NEXT	O
(	O
ptr	pointer
)	O
)	O
{	O
lin	long
result_offset	long
=	O
D_LOWLINE	O
(	O
ptr	pointer
,	O
FO	int
)	O
-	O
lo	long
;	O
lin	long
linec	long
;	O
if	O
(	O
!	O
copy_stringlist	function
(	O
D_LINEARRAY	O
(	O
ptr	pointer
,	O
FO	int
)	O
,	O
D_LENARRAY	O
(	O
ptr	pointer
,	O
FO	int
)	O
,	O
D_LINEARRAY	O
(	O
result	pointer
,	O
FILE0	int
+	O
d	int
)	O
+	O
result_offset	long
,	O
D_LENARRAY	O
(	O
result	pointer
,	O
FILE0	int
+	O
d	int
)	O
+	O
result_offset	long
,	O
D_NUMLINES	O
(	O
ptr	pointer
,	O
FO	int
)	O
)	O
)	O
return	O
0	int
;	O
linec	long
=	O
D_HIGHLINE	O
(	O
ptr	pointer
,	O
FC	int
)	O
+	O
1	int
-	O
lowc	long
;	O
for	O
(	O
i	int
=	O
D_HIGHLINE	O
(	O
ptr	pointer
,	O
FO	int
)	O
+	O
1	int
-	O
lo	long
;	O
i	int
<	O
(	O
D_NEXT	O
(	O
ptr	pointer
)	O
?	O
D_LOWLINE	O
(	O
D_NEXT	O
(	O
ptr	pointer
)	O
,	O
FO	int
)	O
:	O
hi	long
+	O
1	int
)	O
-	O
lo	long
;	O
i	int
++	O
)	O
{	O
D_RELNUM	O
(	O
result	pointer
,	O
FILE0	int
+	O
d	int
,	O
i	int
)	O
=	O
D_RELNUM	O
(	O
result	pointer
,	O
FILEC	O
,	O
linec	long
)	O
;	O
D_RELLEN	O
(	O
result	pointer
,	O
FILE0	int
+	O
d	int
,	O
i	int
)	O
=	O
D_RELLEN	O
(	O
result	pointer
,	O
FILEC	O
,	O
linec	long
)	O
;	O
linec	long
++	O
;	O
}	O
}	O
}	O
if	O
(	O
!	O
using	array
[	O
0	int
]	O
)	O
D3_TYPE	O
(	O
result	pointer
)	O
=	O
DIFF_2ND	int
;	O
else	O
if	O
(	O
!	O
using	array
[	O
1	int
]	O
)	O
D3_TYPE	O
(	O
result	pointer
)	O
=	O
DIFF_1ST	int
;	O
else	O
{	O
lin	long
nl0	long
=	O
D_NUMLINES	O
(	O
result	pointer
,	O
FILE0	int
)	O
;	O
lin	long
nl1	long
=	O
D_NUMLINES	O
(	O
result	pointer
,	O
FILE1	int
)	O
;	O
if	O
(	O
nl0	long
!=	O
nl1	long
||	O
!	O
compare_line_list	function
(	O
D_LINEARRAY	O
(	O
result	pointer
,	O
FILE0	int
)	O
,	O
D_LENARRAY	O
(	O
result	pointer
,	O
FILE0	int
)	O
,	O
D_LINEARRAY	O
(	O
result	pointer
,	O
FILE1	int
)	O
,	O
D_LENARRAY	O
(	O
result	pointer
,	O
FILE1	int
)	O
,	O
nl0	long
)	O
)	O
D3_TYPE	O
(	O
result	pointer
)	O
=	O
DIFF_ALL	int
;	O
else	O
D3_TYPE	O
(	O
result	pointer
)	O
=	O
DIFF_3RD	int
;	O
}	O
return	O
result	pointer
;	O
}	O
static	O
bool	bool
copy_stringlist	function
(	O
char	O
*	O
const	O
fromptrs	array
[	O
]	O
,	O
size_t	long
const	O
fromlengths	array
[	O
]	O
,	O
char	O
*	O
toptrs	array
[	O
]	O
,	O
size_t	long
tolengths	array
[	O
]	O
,	O
lin	long
copynum	long
)	O
{	O
register	O
char	O
*	O
const	O
*	O
f	pointer
=	O
fromptrs	array
;	O
register	O
char	O
*	O
*	O
t	pointer
=	O
toptrs	array
;	O
register	O
size_t	long
const	O
*	O
fl	pointer
=	O
fromlengths	array
;	O
register	O
size_t	long
*	O
tl	pointer
=	O
tolengths	array
;	O
while	O
(	O
copynum	long
--	O
)	O
{	O
if	O
(	O
*	O
t	pointer
)	O
{	O
if	O
(	O
*	O
fl	pointer
!=	O
*	O
tl	pointer
||	O
memcmp	function
(	O
*	O
f	pointer
,	O
*	O
t	pointer
,	O
*	O
fl	pointer
)	O
!=	O
0	int
)	O
return	O
false	int
;	O
}	O
else	O
{	O
*	O
t	pointer
=	O
*	O
f	pointer
;	O
*	O
tl	pointer
=	O
*	O
fl	pointer
;	O
}	O
t	pointer
++	O
;	O
f	pointer
++	O
;	O
tl	pointer
++	O
;	O
fl	pointer
++	O
;	O
}	O
return	O
true	int
;	O
}	O
static	O
struct	O
diff3_block	struct
*	O
create_diff3_block	function
(	O
lin	long
low0	long
,	O
lin	long
high0	long
,	O
lin	long
low1	long
,	O
lin	long
high1	long
,	O
lin	long
low2	long
,	O
lin	long
high2	long
)	O
{	O
struct	O
diff3_block	struct
*	O
result	pointer
=	O
xmalloc	function
(	O
sizeof	O
*	O
result	pointer
)	O
;	O
lin	long
numlines	long
;	O
D3_TYPE	O
(	O
result	pointer
)	O
=	O
ERROR	int
;	O
D_NEXT	O
(	O
result	pointer
)	O
=	O
0	int
;	O
D_LOWLINE	O
(	O
result	pointer
,	O
FILE0	int
)	O
=	O
low0	long
;	O
D_HIGHLINE	O
(	O
result	pointer
,	O
FILE0	int
)	O
=	O
high0	long
;	O
D_LOWLINE	O
(	O
result	pointer
,	O
FILE1	int
)	O
=	O
low1	long
;	O
D_HIGHLINE	O
(	O
result	pointer
,	O
FILE1	int
)	O
=	O
high1	long
;	O
D_LOWLINE	O
(	O
result	pointer
,	O
FILE2	int
)	O
=	O
low2	long
;	O
D_HIGHLINE	O
(	O
result	pointer
,	O
FILE2	int
)	O
=	O
high2	long
;	O
numlines	long
=	O
D_NUMLINES	O
(	O
result	pointer
,	O
FILE0	int
)	O
;	O
if	O
(	O
numlines	long
)	O
{	O
D_LINEARRAY	O
(	O
result	pointer
,	O
FILE0	int
)	O
=	O
xcalloc	function
(	O
numlines	long
,	O
sizeof	O
(	O
char	O
*	O
)	O
)	O
;	O
D_LENARRAY	O
(	O
result	pointer
,	O
FILE0	int
)	O
=	O
xcalloc	function
(	O
numlines	long
,	O
sizeof	O
(	O
size_t	long
)	O
)	O
;	O
}	O
else	O
{	O
D_LINEARRAY	O
(	O
result	pointer
,	O
FILE0	int
)	O
=	O
0	int
;	O
D_LENARRAY	O
(	O
result	pointer
,	O
FILE0	int
)	O
=	O
0	int
;	O
}	O
numlines	long
=	O
D_NUMLINES	O
(	O
result	pointer
,	O
FILE1	int
)	O
;	O
if	O
(	O
numlines	long
)	O
{	O
D_LINEARRAY	O
(	O
result	pointer
,	O
FILE1	int
)	O
=	O
xcalloc	function
(	O
numlines	long
,	O
sizeof	O
(	O
char	O
*	O
)	O
)	O
;	O
D_LENARRAY	O
(	O
result	pointer
,	O
FILE1	int
)	O
=	O
xcalloc	function
(	O
numlines	long
,	O
sizeof	O
(	O
size_t	long
)	O
)	O
;	O
}	O
else	O
{	O
D_LINEARRAY	O
(	O
result	pointer
,	O
FILE1	int
)	O
=	O
0	int
;	O
D_LENARRAY	O
(	O
result	pointer
,	O
FILE1	int
)	O
=	O
0	int
;	O
}	O
numlines	long
=	O
D_NUMLINES	O
(	O
result	pointer
,	O
FILE2	int
)	O
;	O
if	O
(	O
numlines	long
)	O
{	O
D_LINEARRAY	O
(	O
result	pointer
,	O
FILE2	int
)	O
=	O
xcalloc	function
(	O
numlines	long
,	O
sizeof	O
(	O
char	O
*	O
)	O
)	O
;	O
D_LENARRAY	O
(	O
result	pointer
,	O
FILE2	int
)	O
=	O
xcalloc	function
(	O
numlines	long
,	O
sizeof	O
(	O
size_t	long
)	O
)	O
;	O
}	O
else	O
{	O
D_LINEARRAY	O
(	O
result	pointer
,	O
FILE2	int
)	O
=	O
0	int
;	O
D_LENARRAY	O
(	O
result	pointer
,	O
FILE2	int
)	O
=	O
0	int
;	O
}	O
return	O
result	pointer
;	O
}	O
static	O
bool	bool
compare_line_list	function
(	O
char	O
*	O
const	O
list1	array
[	O
]	O
,	O
size_t	long
const	O
lengths1	array
[	O
]	O
,	O
char	O
*	O
const	O
list2	array
[	O
]	O
,	O
size_t	long
const	O
lengths2	array
[	O
]	O
,	O
lin	long
nl	long
)	O
{	O
char	O
*	O
const	O
*	O
l1	pointer
=	O
list1	array
;	O
char	O
*	O
const	O
*	O
l2	pointer
=	O
list2	array
;	O
size_t	long
const	O
*	O
lgths1	pointer
=	O
lengths1	array
;	O
size_t	long
const	O
*	O
lgths2	pointer
=	O
lengths2	array
;	O
while	O
(	O
nl	long
--	O
)	O
if	O
(	O
!	O
*	O
l1	pointer
||	O
!	O
*	O
l2	pointer
||	O
*	O
lgths1	pointer
!=	O
*	O
lgths2	pointer
++	O
||	O
memcmp	function
(	O
*	O
l1	pointer
++	O
,	O
*	O
l2	pointer
++	O
,	O
*	O
lgths1	pointer
++	O
)	O
!=	O
0	int
)	O
return	O
false	int
;	O
return	O
true	int
;	O
}	O
static	O
struct	O
diff_block	struct
*	O
process_diff	function
(	O
char	O
const	O
*	O
filea	pointer
,	O
char	O
const	O
*	O
fileb	pointer
,	O
struct	O
diff_block	struct
*	O
*	O
last_block	pointer
)	O
{	O
char	O
*	O
diff_contents	pointer
;	O
char	O
*	O
diff_limit	pointer
;	O
char	O
*	O
scan_diff	pointer
;	O
enum	O
diff_type	enum
dt	enum
;	O
lin	long
i	int
;	O
struct	O
diff_block	struct
*	O
block_list	pointer
;	O
struct	O
diff_block	struct
*	O
*	O
block_list_end	pointer
=	O
&	O
block_list	pointer
;	O
struct	O
diff_block	struct
*	O
bptr	pointer
IF_LINT	O
(	O
=	O
NULL	O
)	O
;	O
size_t	long
too_many_lines	long
=	O
(	O
PTRDIFF_MAX	O
/	O
MIN	O
(	O
sizeof	O
*	O
bptr	pointer
->	O
lines	array
[	O
1	int
]	O
,	O
sizeof	O
*	O
bptr	pointer
->	O
lengths	array
[	O
1	int
]	O
)	O
)	O
;	O
diff_limit	pointer
=	O
read_diff	function
(	O
filea	pointer
,	O
fileb	pointer
,	O
&	O
diff_contents	pointer
)	O
;	O
scan_diff	pointer
=	O
diff_contents	pointer
;	O
while	O
(	O
scan_diff	pointer
<	O
diff_limit	pointer
)	O
{	O
bptr	pointer
=	O
xmalloc	function
(	O
sizeof	O
*	O
bptr	pointer
)	O
;	O
bptr	pointer
->	O
lines	array
[	O
0	int
]	O
=	O
bptr	pointer
->	O
lines	array
[	O
1	int
]	O
=	O
0	int
;	O
bptr	pointer
->	O
lengths	array
[	O
0	int
]	O
=	O
bptr	pointer
->	O
lengths	array
[	O
1	int
]	O
=	O
0	int
;	O
dt	enum
=	O
process_diff_control	function
(	O
&	O
scan_diff	pointer
,	O
bptr	pointer
)	O
;	O
if	O
(	O
dt	enum
==	O
ERROR	int
||	O
*	O
scan_diff	pointer
!=	O
'\n'	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"%s: diff failed: "	pointer
)	O
,	O
program_name	pointer
)	O
;	O
do	O
{	O
putc	function
(	O
*	O
scan_diff	pointer
,	O
stderr	pointer
)	O
;	O
}	O
while	O
(	O
*	O
scan_diff	pointer
++	O
!=	O
'\n'	O
)	O
;	O
exit	function
(	O
EXIT_TROUBLE	int
)	O
;	O
}	O
scan_diff	pointer
++	O
;	O
switch	O
(	O
dt	enum
)	O
{	O
case	O
ADD	int
:	O
bptr	pointer
->	O
ranges	array
[	O
0	int
]	O
[	O
0	int
]	O
++	O
;	O
break	O
;	O
case	O
DELETE	int
:	O
bptr	pointer
->	O
ranges	array
[	O
1	int
]	O
[	O
0	int
]	O
++	O
;	O
break	O
;	O
case	O
CHANGE	int
:	O
break	O
;	O
default	O
:	O
fatal	function
(	O
"internal error: invalid diff type in process_diff"	pointer
)	O
;	O
break	O
;	O
}	O
if	O
(	O
dt	enum
!=	O
ADD	int
)	O
{	O
lin	long
numlines	long
=	O
D_NUMLINES	O
(	O
bptr	pointer
,	O
0	int
)	O
;	O
if	O
(	O
too_many_lines	long
<=	O
numlines	long
)	O
xalloc_die	function
(	O
)	O
;	O
bptr	pointer
->	O
lines	array
[	O
0	int
]	O
=	O
xmalloc	function
(	O
numlines	long
*	O
sizeof	O
*	O
bptr	pointer
->	O
lines	array
[	O
0	int
]	O
)	O
;	O
bptr	pointer
->	O
lengths	array
[	O
0	int
]	O
=	O
xmalloc	function
(	O
numlines	long
*	O
sizeof	O
*	O
bptr	pointer
->	O
lengths	array
[	O
0	int
]	O
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
numlines	long
;	O
i	int
++	O
)	O
scan_diff	pointer
=	O
scan_diff_line	function
(	O
scan_diff	pointer
,	O
&	O
(	O
bptr	pointer
->	O
lines	array
[	O
0	int
]	O
[	O
i	int
]	O
)	O
,	O
&	O
(	O
bptr	pointer
->	O
lengths	array
[	O
0	int
]	O
[	O
i	int
]	O
)	O
,	O
diff_limit	pointer
,	O
'<'	O
)	O
;	O
}	O
if	O
(	O
dt	enum
==	O
CHANGE	int
)	O
{	O
if	O
(	O
strncmp	function
(	O
scan_diff	pointer
,	O
"---\n"	pointer
,	O
4	int
)	O
)	O
fatal	function
(	O
"invalid diff format; invalid change separator"	pointer
)	O
;	O
scan_diff	pointer
+=	O
4	int
;	O
}	O
if	O
(	O
dt	enum
!=	O
DELETE	int
)	O
{	O
lin	long
numlines	long
=	O
D_NUMLINES	O
(	O
bptr	pointer
,	O
1	int
)	O
;	O
if	O
(	O
too_many_lines	long
<=	O
numlines	long
)	O
xalloc_die	function
(	O
)	O
;	O
bptr	pointer
->	O
lines	array
[	O
1	int
]	O
=	O
xmalloc	function
(	O
numlines	long
*	O
sizeof	O
*	O
bptr	pointer
->	O
lines	array
[	O
1	int
]	O
)	O
;	O
bptr	pointer
->	O
lengths	array
[	O
1	int
]	O
=	O
xmalloc	function
(	O
numlines	long
*	O
sizeof	O
*	O
bptr	pointer
->	O
lengths	array
[	O
1	int
]	O
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
numlines	long
;	O
i	int
++	O
)	O
scan_diff	pointer
=	O
scan_diff_line	function
(	O
scan_diff	pointer
,	O
&	O
(	O
bptr	pointer
->	O
lines	array
[	O
1	int
]	O
[	O
i	int
]	O
)	O
,	O
&	O
(	O
bptr	pointer
->	O
lengths	array
[	O
1	int
]	O
[	O
i	int
]	O
)	O
,	O
diff_limit	pointer
,	O
'>'	O
)	O
;	O
}	O
*	O
block_list_end	pointer
=	O
bptr	pointer
;	O
block_list_end	pointer
=	O
&	O
bptr	pointer
->	O
next	pointer
;	O
}	O
*	O
block_list_end	pointer
=	O
NULL	O
;	O
*	O
last_block	pointer
=	O
bptr	pointer
;	O
return	O
block_list	pointer
;	O
}	O
static	O
char	O
*	O
skipwhite	function
(	O
char	O
*	O
s	long
)	O
{	O
while	O
(	O
*	O
s	long
==	O
' '	O
||	O
*	O
s	long
==	O
'\t'	O
)	O
s	long
++	O
;	O
return	O
s	long
;	O
}	O
static	O
char	O
*	O
readnum	function
(	O
char	O
*	O
s	long
,	O
lin	long
*	O
pnum	pointer
)	O
{	O
unsigned	O
char	O
c	int
=	O
*	O
s	long
;	O
lin	long
num	long
=	O
0	int
;	O
if	O
(	O
!	O
ISDIGIT	O
(	O
c	int
)	O
)	O
return	O
0	int
;	O
do	O
{	O
num	long
=	O
c	int
-	O
'0'	O
+	O
num	long
*	O
10	int
;	O
c	int
=	O
*	O
++	O
s	long
;	O
}	O
while	O
(	O
ISDIGIT	O
(	O
c	int
)	O
)	O
;	O
*	O
pnum	pointer
=	O
num	long
;	O
return	O
s	long
;	O
}	O
static	O
enum	O
diff_type	enum
process_diff_control	function
(	O
char	O
*	O
*	O
string	pointer
,	O
struct	O
diff_block	struct
*	O
db	pointer
)	O
{	O
char	O
*	O
s	long
=	O
*	O
string	pointer
;	O
enum	O
diff_type	enum
type	enum
;	O
s	long
=	O
readnum	function
(	O
skipwhite	function
(	O
s	long
)	O
,	O
&	O
db	pointer
->	O
ranges	array
[	O
0	int
]	O
[	O
RANGE_START	int
]	O
)	O
;	O
if	O
(	O
!	O
s	long
)	O
return	O
ERROR	int
;	O
s	long
=	O
skipwhite	function
(	O
s	long
)	O
;	O
if	O
(	O
*	O
s	long
==	O
','	O
)	O
{	O
s	long
=	O
readnum	function
(	O
s	long
+	O
1	int
,	O
&	O
db	pointer
->	O
ranges	array
[	O
0	int
]	O
[	O
RANGE_END	int
]	O
)	O
;	O
if	O
(	O
!	O
s	long
)	O
return	O
ERROR	int
;	O
}	O
else	O
db	pointer
->	O
ranges	array
[	O
0	int
]	O
[	O
RANGE_END	int
]	O
=	O
db	pointer
->	O
ranges	array
[	O
0	int
]	O
[	O
RANGE_START	int
]	O
;	O
s	long
=	O
skipwhite	function
(	O
s	long
)	O
;	O
switch	O
(	O
*	O
s	long
)	O
{	O
case	O
'a'	O
:	O
type	enum
=	O
ADD	int
;	O
break	O
;	O
case	O
'c'	O
:	O
type	enum
=	O
CHANGE	int
;	O
break	O
;	O
case	O
'd'	O
:	O
type	enum
=	O
DELETE	int
;	O
break	O
;	O
default	O
:	O
return	O
ERROR	int
;	O
}	O
s	long
++	O
;	O
s	long
=	O
readnum	function
(	O
skipwhite	function
(	O
s	long
)	O
,	O
&	O
db	pointer
->	O
ranges	array
[	O
1	int
]	O
[	O
RANGE_START	int
]	O
)	O
;	O
if	O
(	O
!	O
s	long
)	O
return	O
ERROR	int
;	O
s	long
=	O
skipwhite	function
(	O
s	long
)	O
;	O
if	O
(	O
*	O
s	long
==	O
','	O
)	O
{	O
s	long
=	O
readnum	function
(	O
s	long
+	O
1	int
,	O
&	O
db	pointer
->	O
ranges	array
[	O
1	int
]	O
[	O
RANGE_END	int
]	O
)	O
;	O
if	O
(	O
!	O
s	long
)	O
return	O
ERROR	int
;	O
s	long
=	O
skipwhite	function
(	O
s	long
)	O
;	O
}	O
else	O
db	pointer
->	O
ranges	array
[	O
1	int
]	O
[	O
RANGE_END	int
]	O
=	O
db	pointer
->	O
ranges	array
[	O
1	int
]	O
[	O
RANGE_START	int
]	O
;	O
*	O
string	pointer
=	O
s	long
;	O
return	O
type	enum
;	O
}	O
static	O
char	O
*	O
read_diff	function
(	O
char	O
const	O
*	O
filea	pointer
,	O
char	O
const	O
*	O
fileb	pointer
,	O
char	O
*	O
*	O
output_placement	pointer
)	O
{	O
char	O
*	O
diff_result	pointer
;	O
size_t	long
current_chunk_size	long
,	O
total	long
;	O
int	O
fd	int
,	O
wstatus	int
,	O
status	int
;	O
int	O
werrno	int
=	O
0	int
;	O
struct	O
stat	struct
pipestat	struct
;	O
char	O
const	O
*	O
argv	pointer
[	O
9	int
]	O
;	O
char	O
const	O
*	O
*	O
ap	pointer
;	O
int	O
fds	array
[	O
2	int
]	O
;	O
pid_t	int
pid	int
;	O
ap	pointer
=	O
argv	pointer
;	O
*	O
ap	pointer
++	O
=	O
diff_program	pointer
;	O
if	O
(	O
text	bool
)	O
*	O
ap	pointer
++	O
=	O
"-a"	pointer
;	O
if	O
(	O
strip_trailing_cr	bool
)	O
*	O
ap	pointer
++	O
=	O
"--strip-trailing-cr"	pointer
;	O
*	O
ap	pointer
++	O
=	O
"--horizon-lines=100"	pointer
;	O
*	O
ap	pointer
++	O
=	O
"--"	pointer
;	O
*	O
ap	pointer
++	O
=	O
filea	pointer
;	O
*	O
ap	pointer
++	O
=	O
fileb	pointer
;	O
*	O
ap	pointer
=	O
0	int
;	O
if	O
(	O
pipe	function
(	O
fds	array
)	O
!=	O
0	int
)	O
perror_with_exit	function
(	O
"pipe"	pointer
)	O
;	O
pid	int
=	O
fork	function
(	O
)	O
;	O
if	O
(	O
pid	int
==	O
0	int
)	O
{	O
close	function
(	O
fds	array
[	O
0	int
]	O
)	O
;	O
if	O
(	O
fds	array
[	O
1	int
]	O
!=	O
STDOUT_FILENO	int
)	O
{	O
dup2	function
(	O
fds	array
[	O
1	int
]	O
,	O
STDOUT_FILENO	int
)	O
;	O
close	function
(	O
fds	array
[	O
1	int
]	O
)	O
;	O
}	O
execvp	function
(	O
diff_program	pointer
,	O
(	O
char	O
*	O
*	O
)	O
argv	pointer
)	O
;	O
_exit	function
(	O
errno	O
==	O
ENOENT	int
?	O
127	int
:	O
126	int
)	O
;	O
}	O
if	O
(	O
pid	int
==	O
-	O
1	int
)	O
perror_with_exit	function
(	O
"fork"	pointer
)	O
;	O
close	function
(	O
fds	array
[	O
1	int
]	O
)	O
;	O
fd	int
=	O
fds	array
[	O
0	int
]	O
;	O
if	O
(	O
fstat	function
(	O
fd	int
,	O
&	O
pipestat	struct
)	O
!=	O
0	int
)	O
perror_with_exit	function
(	O
"fstat"	pointer
)	O
;	O
current_chunk_size	long
=	O
MAX	O
(	O
1	int
,	O
STAT_BLOCKSIZE	O
(	O
pipestat	struct
)	O
)	O
;	O
diff_result	pointer
=	O
xmalloc	function
(	O
current_chunk_size	long
)	O
;	O
total	long
=	O
0	int
;	O
for	O
(	O
;	O
;	O
)	O
{	O
size_t	long
bytes_to_read	long
=	O
current_chunk_size	long
-	O
total	long
;	O
size_t	long
bytes	long
=	O
block_read	function
(	O
fd	int
,	O
diff_result	pointer
+	O
total	long
,	O
bytes_to_read	long
)	O
;	O
total	long
+=	O
bytes	long
;	O
if	O
(	O
bytes	long
!=	O
bytes_to_read	long
)	O
{	O
if	O
(	O
bytes	long
==	O
SIZE_MAX	O
)	O
perror_with_exit	function
(	O
_	O
(	O
"read failed"	pointer
)	O
)	O
;	O
break	O
;	O
}	O
if	O
(	O
PTRDIFF_MAX	O
/	O
2	int
<=	O
current_chunk_size	long
)	O
xalloc_die	function
(	O
)	O
;	O
current_chunk_size	long
*=	O
2	int
;	O
diff_result	pointer
=	O
xrealloc	function
(	O
diff_result	pointer
,	O
current_chunk_size	long
)	O
;	O
}	O
if	O
(	O
total	long
!=	O
0	int
&&	O
diff_result	pointer
[	O
total	long
-	O
1	int
]	O
!=	O
'\n'	O
)	O
fatal	function
(	O
"invalid diff format; incomplete last line"	pointer
)	O
;	O
*	O
output_placement	pointer
=	O
diff_result	pointer
;	O
if	O
(	O
close	function
(	O
fd	int
)	O
!=	O
0	int
)	O
perror_with_exit	function
(	O
"close"	pointer
)	O
;	O
if	O
(	O
waitpid	function
(	O
pid	int
,	O
&	O
wstatus	int
,	O
0	int
)	O
<	O
0	int
)	O
perror_with_exit	function
(	O
"waitpid"	pointer
)	O
;	O
status	int
=	O
!	O
werrno	int
&&	O
WIFEXITED	O
(	O
wstatus	int
)	O
?	O
WEXITSTATUS	O
(	O
wstatus	int
)	O
:	O
INT_MAX	O
;	O
if	O
(	O
EXIT_TROUBLE	int
<=	O
status	int
)	O
error	function
(	O
EXIT_TROUBLE	int
,	O
werrno	int
,	O
_	O
(	O
status	int
==	O
126	int
?	O
"subsidiary program `%s' could not be invoked"	pointer
:	O
status	int
==	O
127	int
?	O
"subsidiary program `%s' not found"	pointer
:	O
status	int
==	O
INT_MAX	O
?	O
"subsidiary program `%s' failed"	pointer
:	O
"subsidiary program `%s' failed (exit status %d)"	pointer
)	O
,	O
diff_program	pointer
,	O
status	int
)	O
;	O
return	O
diff_result	pointer
+	O
total	long
;	O
}	O
static	O
char	O
*	O
scan_diff_line	function
(	O
char	O
*	O
scan_ptr	pointer
,	O
char	O
*	O
*	O
set_start	pointer
,	O
size_t	long
*	O
set_length	pointer
,	O
char	O
*	O
limit	pointer
,	O
char	O
leadingchar	char
)	O
{	O
char	O
*	O
line_ptr	pointer
;	O
if	O
(	O
!	O
(	O
scan_ptr	pointer
[	O
0	int
]	O
==	O
leadingchar	char
&&	O
scan_ptr	pointer
[	O
1	int
]	O
==	O
' '	O
)	O
)	O
fatal	function
(	O
"invalid diff format; incorrect leading line chars"	pointer
)	O
;	O
*	O
set_start	pointer
=	O
line_ptr	pointer
=	O
scan_ptr	pointer
+	O
2	int
;	O
while	O
(	O
*	O
line_ptr	pointer
++	O
!=	O
'\n'	O
)	O
continue	O
;	O
*	O
set_length	pointer
=	O
line_ptr	pointer
-	O
*	O
set_start	pointer
;	O
if	O
(	O
line_ptr	pointer
<	O
limit	pointer
&&	O
*	O
line_ptr	pointer
==	O
'\\'	O
)	O
{	O
if	O
(	O
edscript	bool
)	O
fprintf	function
(	O
stderr	pointer
,	O
"%s:"	pointer
,	O
program_name	pointer
)	O
;	O
else	O
--	O
*	O
set_length	pointer
;	O
line_ptr	pointer
++	O
;	O
do	O
{	O
if	O
(	O
edscript	bool
)	O
putc	function
(	O
*	O
line_ptr	pointer
,	O
stderr	pointer
)	O
;	O
}	O
while	O
(	O
*	O
line_ptr	pointer
++	O
!=	O
'\n'	O
)	O
;	O
}	O
return	O
line_ptr	pointer
;	O
}	O
static	O
void	O
output_diff3	function
(	O
FILE	struct
*	O
outputfile	pointer
,	O
struct	O
diff3_block	struct
*	O
diff	pointer
,	O
int	O
const	O
mapping	array
[	O
3	int
]	O
,	O
int	O
const	O
rev_mapping	array
[	O
3	int
]	O
)	O
{	O
int	O
i	int
;	O
int	O
oddoneout	int
;	O
char	O
*	O
cp	pointer
;	O
struct	O
diff3_block	struct
*	O
ptr	pointer
;	O
lin	long
line	long
;	O
size_t	long
length	long
;	O
int	O
dontprint	int
;	O
static	O
int	O
skew_increment	array
[	O
3	int
]	O
=	O
{	O
2	int
,	O
3	int
,	O
1	int
}	O
;	O
char	O
const	O
*	O
line_prefix	pointer
=	O
initial_tab	bool
?	O
"\t"	pointer
:	O
"  "	pointer
;	O
for	O
(	O
ptr	pointer
=	O
diff	pointer
;	O
ptr	pointer
;	O
ptr	pointer
=	O
D_NEXT	O
(	O
ptr	pointer
)	O
)	O
{	O
char	O
x	array
[	O
2	int
]	O
;	O
switch	O
(	O
ptr	pointer
->	O
correspond	enum
)	O
{	O
case	O
DIFF_ALL	int
:	O
x	array
[	O
0	int
]	O
=	O
0	int
;	O
dontprint	int
=	O
3	int
;	O
oddoneout	int
=	O
3	int
;	O
break	O
;	O
case	O
DIFF_1ST	int
:	O
case	O
DIFF_2ND	int
:	O
case	O
DIFF_3RD	int
:	O
oddoneout	int
=	O
rev_mapping	array
[	O
ptr	pointer
->	O
correspond	enum
-	O
DIFF_1ST	int
]	O
;	O
x	array
[	O
0	int
]	O
=	O
oddoneout	int
+	O
'1'	O
;	O
x	array
[	O
1	int
]	O
=	O
0	int
;	O
dontprint	int
=	O
oddoneout	int
==	O
0	int
;	O
break	O
;	O
default	O
:	O
fatal	function
(	O
"internal error: invalid diff type passed to output"	pointer
)	O
;	O
}	O
fprintf	function
(	O
outputfile	pointer
,	O
"====%s\n"	pointer
,	O
x	array
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
3	int
;	O
i	int
=	O
(	O
oddoneout	int
==	O
1	int
?	O
skew_increment	array
[	O
i	int
]	O
:	O
i	int
+	O
1	int
)	O
)	O
{	O
int	O
realfile	int
=	O
mapping	array
[	O
i	int
]	O
;	O
lin	long
lowt	long
=	O
D_LOWLINE	O
(	O
ptr	pointer
,	O
realfile	int
)	O
;	O
lin	long
hight	long
=	O
D_HIGHLINE	O
(	O
ptr	pointer
,	O
realfile	int
)	O
;	O
long	O
int	O
llowt	long
=	O
lowt	long
;	O
long	O
int	O
lhight	long
=	O
hight	long
;	O
fprintf	function
(	O
outputfile	pointer
,	O
"%d:"	pointer
,	O
i	int
+	O
1	int
)	O
;	O
switch	O
(	O
lowt	long
-	O
hight	long
)	O
{	O
case	O
1	int
:	O
fprintf	function
(	O
outputfile	pointer
,	O
"%lda\n"	pointer
,	O
llowt	long
-	O
1	int
)	O
;	O
break	O
;	O
case	O
0	int
:	O
fprintf	function
(	O
outputfile	pointer
,	O
"%ldc\n"	pointer
,	O
llowt	long
)	O
;	O
break	O
;	O
default	O
:	O
fprintf	function
(	O
outputfile	pointer
,	O
"%ld,%ldc\n"	pointer
,	O
llowt	long
,	O
lhight	long
)	O
;	O
break	O
;	O
}	O
if	O
(	O
i	int
==	O
dontprint	int
)	O
continue	O
;	O
if	O
(	O
lowt	long
<=	O
hight	long
)	O
{	O
line	long
=	O
0	int
;	O
do	O
{	O
fputs	function
(	O
line_prefix	pointer
,	O
outputfile	pointer
)	O
;	O
cp	pointer
=	O
D_RELNUM	O
(	O
ptr	pointer
,	O
realfile	int
,	O
line	long
)	O
;	O
length	long
=	O
D_RELLEN	O
(	O
ptr	pointer
,	O
realfile	int
,	O
line	long
)	O
;	O
fwrite	function
(	O
cp	pointer
,	O
sizeof	O
(	O
char	O
)	O
,	O
length	long
,	O
outputfile	pointer
)	O
;	O
}	O
while	O
(	O
++	O
line	long
<	O
hight	long
-	O
lowt	long
+	O
1	int
)	O
;	O
if	O
(	O
cp	pointer
[	O
length	long
-	O
1	int
]	O
!=	O
'\n'	O
)	O
fprintf	function
(	O
outputfile	pointer
,	O
"\n\\ %s\n"	pointer
,	O
_	O
(	O
"No newline at end of file"	pointer
)	O
)	O
;	O
}	O
}	O
}	O
}	O
static	O
bool	bool
dotlines	function
(	O
FILE	struct
*	O
outputfile	pointer
,	O
struct	O
diff3_block	struct
*	O
b	pointer
,	O
int	O
filenum	int
)	O
{	O
lin	long
i	int
;	O
bool	bool
leading_dot	bool
=	O
false	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
D_NUMLINES	O
(	O
b	pointer
,	O
filenum	int
)	O
;	O
i	int
++	O
)	O
{	O
char	O
*	O
line	long
=	O
D_RELNUM	O
(	O
b	pointer
,	O
filenum	int
,	O
i	int
)	O
;	O
if	O
(	O
line	long
[	O
0	int
]	O
==	O
'.'	O
)	O
{	O
leading_dot	bool
=	O
true	int
;	O
fputc	function
(	O
'.'	O
,	O
outputfile	pointer
)	O
;	O
}	O
fwrite	function
(	O
line	long
,	O
sizeof	O
(	O
char	O
)	O
,	O
D_RELLEN	O
(	O
b	pointer
,	O
filenum	int
,	O
i	int
)	O
,	O
outputfile	pointer
)	O
;	O
}	O
return	O
leading_dot	bool
;	O
}	O
static	O
void	O
undotlines	function
(	O
FILE	struct
*	O
outputfile	pointer
,	O
bool	bool
leading_dot	bool
,	O
long	O
int	O
start	long
,	O
lin	long
num	long
)	O
{	O
fputs	function
(	O
".\n"	pointer
,	O
outputfile	pointer
)	O
;	O
if	O
(	O
leading_dot	bool
)	O
{	O
if	O
(	O
num	long
==	O
1	int
)	O
fprintf	function
(	O
outputfile	pointer
,	O
"%lds/^\\.//\n"	pointer
,	O
start	long
)	O
;	O
else	O
fprintf	function
(	O
outputfile	pointer
,	O
"%ld,%lds/^\\.//\n"	pointer
,	O
start	long
,	O
start	long
+	O
num	long
-	O
1	int
)	O
;	O
}	O
}	O
static	O
bool	bool
output_diff3_edscript	function
(	O
FILE	struct
*	O
outputfile	pointer
,	O
struct	O
diff3_block	struct
*	O
diff	pointer
,	O
int	O
const	O
mapping	array
[	O
3	int
]	O
,	O
int	O
const	O
rev_mapping	array
[	O
3	int
]	O
,	O
char	O
const	O
*	O
file0	pointer
,	O
char	O
const	O
*	O
file1	pointer
,	O
char	O
const	O
*	O
file2	pointer
)	O
{	O
bool	bool
leading_dot	bool
;	O
bool	bool
conflicts_found	bool
=	O
false	int
;	O
bool	bool
conflict	bool
;	O
struct	O
diff3_block	struct
*	O
b	pointer
;	O
for	O
(	O
b	pointer
=	O
reverse_diff3_blocklist	function
(	O
diff	pointer
)	O
;	O
b	pointer
;	O
b	pointer
=	O
b	pointer
->	O
next	pointer
)	O
{	O
enum	O
diff_type	enum
type	enum
=	O
(	O
b	pointer
->	O
correspond	enum
==	O
DIFF_ALL	int
?	O
DIFF_ALL	int
:	O
DIFF_1ST	int
+	O
rev_mapping	array
[	O
b	pointer
->	O
correspond	enum
-	O
DIFF_1ST	int
]	O
)	O
;	O
long	O
int	O
low0	long
,	O
high0	long
;	O
switch	O
(	O
type	enum
)	O
{	O
default	O
:	O
continue	O
;	O
case	O
DIFF_2ND	int
:	O
if	O
(	O
!	O
show_2nd	bool
)	O
continue	O
;	O
conflict	bool
=	O
true	int
;	O
break	O
;	O
case	O
DIFF_3RD	int
:	O
if	O
(	O
overlap_only	bool
)	O
continue	O
;	O
conflict	bool
=	O
false	int
;	O
break	O
;	O
case	O
DIFF_ALL	int
:	O
if	O
(	O
simple_only	bool
)	O
continue	O
;	O
conflict	bool
=	O
flagging	bool
;	O
break	O
;	O
}	O
low0	long
=	O
D_LOWLINE	O
(	O
b	pointer
,	O
mapping	array
[	O
FILE0	int
]	O
)	O
;	O
high0	long
=	O
D_HIGHLINE	O
(	O
b	pointer
,	O
mapping	array
[	O
FILE0	int
]	O
)	O
;	O
if	O
(	O
conflict	bool
)	O
{	O
conflicts_found	bool
=	O
true	int
;	O
fprintf	function
(	O
outputfile	pointer
,	O
"%lda\n"	pointer
,	O
high0	long
)	O
;	O
leading_dot	bool
=	O
false	int
;	O
if	O
(	O
type	enum
==	O
DIFF_ALL	int
)	O
{	O
if	O
(	O
show_2nd	bool
)	O
{	O
fprintf	function
(	O
outputfile	pointer
,	O
"||||||| %s\n"	pointer
,	O
file1	pointer
)	O
;	O
leading_dot	bool
=	O
dotlines	function
(	O
outputfile	pointer
,	O
b	pointer
,	O
mapping	array
[	O
FILE1	int
]	O
)	O
;	O
}	O
fputs	function
(	O
"=======\n"	pointer
,	O
outputfile	pointer
)	O
;	O
leading_dot	bool
|=	O
dotlines	function
(	O
outputfile	pointer
,	O
b	pointer
,	O
mapping	array
[	O
FILE2	int
]	O
)	O
;	O
}	O
fprintf	function
(	O
outputfile	pointer
,	O
">>>>>>> %s\n"	pointer
,	O
file2	pointer
)	O
;	O
undotlines	function
(	O
outputfile	pointer
,	O
leading_dot	bool
,	O
high0	long
+	O
2	int
,	O
(	O
D_NUMLINES	O
(	O
b	pointer
,	O
mapping	array
[	O
FILE1	int
]	O
)	O
+	O
D_NUMLINES	O
(	O
b	pointer
,	O
mapping	array
[	O
FILE2	int
]	O
)	O
+	O
1	int
)	O
)	O
;	O
fprintf	function
(	O
outputfile	pointer
,	O
"%lda\n<<<<<<< %s\n"	pointer
,	O
low0	long
-	O
1	int
,	O
type	enum
==	O
DIFF_ALL	int
?	O
file0	pointer
:	O
file1	pointer
)	O
;	O
leading_dot	bool
=	O
false	int
;	O
if	O
(	O
type	enum
==	O
DIFF_2ND	int
)	O
{	O
leading_dot	bool
=	O
dotlines	function
(	O
outputfile	pointer
,	O
b	pointer
,	O
mapping	array
[	O
FILE1	int
]	O
)	O
;	O
fputs	function
(	O
"=======\n"	pointer
,	O
outputfile	pointer
)	O
;	O
}	O
undotlines	function
(	O
outputfile	pointer
,	O
leading_dot	bool
,	O
low0	long
+	O
1	int
,	O
D_NUMLINES	O
(	O
b	pointer
,	O
mapping	array
[	O
FILE1	int
]	O
)	O
)	O
;	O
}	O
else	O
if	O
(	O
D_NUMLINES	O
(	O
b	pointer
,	O
mapping	array
[	O
FILE2	int
]	O
)	O
==	O
0	int
)	O
{	O
if	O
(	O
low0	long
==	O
high0	long
)	O
fprintf	function
(	O
outputfile	pointer
,	O
"%ldd\n"	pointer
,	O
low0	long
)	O
;	O
else	O
fprintf	function
(	O
outputfile	pointer
,	O
"%ld,%ldd\n"	pointer
,	O
low0	long
,	O
high0	long
)	O
;	O
}	O
else	O
{	O
switch	O
(	O
high0	long
-	O
low0	long
)	O
{	O
case	O
-	O
1	int
:	O
fprintf	function
(	O
outputfile	pointer
,	O
"%lda\n"	pointer
,	O
high0	long
)	O
;	O
break	O
;	O
case	O
0	int
:	O
fprintf	function
(	O
outputfile	pointer
,	O
"%ldc\n"	pointer
,	O
high0	long
)	O
;	O
break	O
;	O
default	O
:	O
fprintf	function
(	O
outputfile	pointer
,	O
"%ld,%ldc\n"	pointer
,	O
low0	long
,	O
high0	long
)	O
;	O
break	O
;	O
}	O
undotlines	function
(	O
outputfile	pointer
,	O
dotlines	function
(	O
outputfile	pointer
,	O
b	pointer
,	O
mapping	array
[	O
FILE2	int
]	O
)	O
,	O
low0	long
,	O
D_NUMLINES	O
(	O
b	pointer
,	O
mapping	array
[	O
FILE2	int
]	O
)	O
)	O
;	O
}	O
}	O
if	O
(	O
finalwrite	bool
)	O
fputs	function
(	O
"w\nq\n"	pointer
,	O
outputfile	pointer
)	O
;	O
return	O
conflicts_found	bool
;	O
}	O
static	O
bool	bool
output_diff3_merge	function
(	O
FILE	struct
*	O
infile	pointer
,	O
FILE	struct
*	O
outputfile	pointer
,	O
struct	O
diff3_block	struct
*	O
diff	pointer
,	O
int	O
const	O
mapping	array
[	O
3	int
]	O
,	O
int	O
const	O
rev_mapping	array
[	O
3	int
]	O
,	O
char	O
const	O
*	O
file0	pointer
,	O
char	O
const	O
*	O
file1	pointer
,	O
char	O
const	O
*	O
file2	pointer
)	O
{	O
int	O
c	int
;	O
lin	long
i	int
;	O
bool	bool
conflicts_found	bool
=	O
false	int
;	O
bool	bool
conflict	bool
;	O
struct	O
diff3_block	struct
*	O
b	pointer
;	O
lin	long
linesread	long
=	O
0	int
;	O
for	O
(	O
b	pointer
=	O
diff	pointer
;	O
b	pointer
;	O
b	pointer
=	O
b	pointer
->	O
next	pointer
)	O
{	O
enum	O
diff_type	enum
type	enum
=	O
(	O
(	O
b	pointer
->	O
correspond	enum
==	O
DIFF_ALL	int
)	O
?	O
DIFF_ALL	int
:	O
DIFF_1ST	int
+	O
rev_mapping	array
[	O
b	pointer
->	O
correspond	enum
-	O
DIFF_1ST	int
]	O
)	O
;	O
char	O
const	O
*	O
format_2nd	pointer
=	O
"<<<<<<< %s\n"	pointer
;	O
switch	O
(	O
type	enum
)	O
{	O
default	O
:	O
continue	O
;	O
case	O
DIFF_2ND	int
:	O
if	O
(	O
!	O
show_2nd	bool
)	O
continue	O
;	O
conflict	bool
=	O
true	int
;	O
break	O
;	O
case	O
DIFF_3RD	int
:	O
if	O
(	O
overlap_only	bool
)	O
continue	O
;	O
conflict	bool
=	O
false	int
;	O
break	O
;	O
case	O
DIFF_ALL	int
:	O
if	O
(	O
simple_only	bool
)	O
continue	O
;	O
conflict	bool
=	O
flagging	bool
;	O
format_2nd	pointer
=	O
"||||||| %s\n"	pointer
;	O
break	O
;	O
}	O
i	int
=	O
D_LOWLINE	O
(	O
b	pointer
,	O
FILE0	int
)	O
-	O
linesread	long
-	O
1	int
;	O
linesread	long
+=	O
i	int
;	O
while	O
(	O
0	int
<=	O
--	O
i	int
)	O
do	O
{	O
c	int
=	O
getc	function
(	O
infile	pointer
)	O
;	O
if	O
(	O
c	int
==	O
EOF	O
)	O
{	O
if	O
(	O
ferror	function
(	O
infile	pointer
)	O
)	O
perror_with_exit	function
(	O
_	O
(	O
"read failed"	pointer
)	O
)	O
;	O
else	O
if	O
(	O
feof	function
(	O
infile	pointer
)	O
)	O
fatal	function
(	O
"input file shrank"	pointer
)	O
;	O
}	O
putc	function
(	O
c	int
,	O
outputfile	pointer
)	O
;	O
}	O
while	O
(	O
c	int
!=	O
'\n'	O
)	O
;	O
if	O
(	O
conflict	bool
)	O
{	O
conflicts_found	bool
=	O
true	int
;	O
if	O
(	O
type	enum
==	O
DIFF_ALL	int
)	O
{	O
fprintf	function
(	O
outputfile	pointer
,	O
"<<<<<<< %s\n"	pointer
,	O
file0	pointer
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
D_NUMLINES	O
(	O
b	pointer
,	O
mapping	array
[	O
FILE0	int
]	O
)	O
;	O
i	int
++	O
)	O
fwrite	function
(	O
D_RELNUM	O
(	O
b	pointer
,	O
mapping	array
[	O
FILE0	int
]	O
,	O
i	int
)	O
,	O
sizeof	O
(	O
char	O
)	O
,	O
D_RELLEN	O
(	O
b	pointer
,	O
mapping	array
[	O
FILE0	int
]	O
,	O
i	int
)	O
,	O
outputfile	pointer
)	O
;	O
}	O
if	O
(	O
show_2nd	bool
)	O
{	O
fprintf	function
(	O
outputfile	pointer
,	O
format_2nd	pointer
,	O
file1	pointer
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
D_NUMLINES	O
(	O
b	pointer
,	O
mapping	array
[	O
FILE1	int
]	O
)	O
;	O
i	int
++	O
)	O
fwrite	function
(	O
D_RELNUM	O
(	O
b	pointer
,	O
mapping	array
[	O
FILE1	int
]	O
,	O
i	int
)	O
,	O
sizeof	O
(	O
char	O
)	O
,	O
D_RELLEN	O
(	O
b	pointer
,	O
mapping	array
[	O
FILE1	int
]	O
,	O
i	int
)	O
,	O
outputfile	pointer
)	O
;	O
}	O
fputs	function
(	O
"=======\n"	pointer
,	O
outputfile	pointer
)	O
;	O
}	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
D_NUMLINES	O
(	O
b	pointer
,	O
mapping	array
[	O
FILE2	int
]	O
)	O
;	O
i	int
++	O
)	O
fwrite	function
(	O
D_RELNUM	O
(	O
b	pointer
,	O
mapping	array
[	O
FILE2	int
]	O
,	O
i	int
)	O
,	O
sizeof	O
(	O
char	O
)	O
,	O
D_RELLEN	O
(	O
b	pointer
,	O
mapping	array
[	O
FILE2	int
]	O
,	O
i	int
)	O
,	O
outputfile	pointer
)	O
;	O
if	O
(	O
conflict	bool
)	O
fprintf	function
(	O
outputfile	pointer
,	O
">>>>>>> %s\n"	pointer
,	O
file2	pointer
)	O
;	O
i	int
=	O
D_NUMLINES	O
(	O
b	pointer
,	O
FILE0	int
)	O
;	O
linesread	long
+=	O
i	int
;	O
while	O
(	O
0	int
<=	O
--	O
i	int
)	O
while	O
(	O
(	O
c	int
=	O
getc	function
(	O
infile	pointer
)	O
)	O
!=	O
'\n'	O
)	O
if	O
(	O
c	int
==	O
EOF	O
)	O
{	O
if	O
(	O
ferror	function
(	O
infile	pointer
)	O
)	O
perror_with_exit	function
(	O
_	O
(	O
"read failed"	pointer
)	O
)	O
;	O
else	O
if	O
(	O
feof	function
(	O
infile	pointer
)	O
)	O
{	O
if	O
(	O
i	int
||	O
b	pointer
->	O
next	pointer
)	O
fatal	function
(	O
"input file shrank"	pointer
)	O
;	O
return	O
conflicts_found	bool
;	O
}	O
}	O
}	O
while	O
(	O
(	O
c	int
=	O
getc	function
(	O
infile	pointer
)	O
)	O
!=	O
EOF	O
||	O
!	O
(	O
ferror	function
(	O
infile	pointer
)	O
|	O
feof	function
(	O
infile	pointer
)	O
)	O
)	O
putc	function
(	O
c	int
,	O
outputfile	pointer
)	O
;	O
return	O
conflicts_found	bool
;	O
}	O
static	O
struct	O
diff3_block	struct
*	O
reverse_diff3_blocklist	function
(	O
struct	O
diff3_block	struct
*	O
diff	pointer
)	O
{	O
register	O
struct	O
diff3_block	struct
*	O
tmp	pointer
,	O
*	O
next	pointer
,	O
*	O
prev	pointer
;	O
for	O
(	O
tmp	pointer
=	O
diff	pointer
,	O
prev	pointer
=	O
0	int
;	O
tmp	pointer
;	O
tmp	pointer
=	O
next	pointer
)	O
{	O
next	pointer
=	O
tmp	pointer
->	O
next	pointer
;	O
tmp	pointer
->	O
next	pointer
=	O
prev	pointer
;	O
prev	pointer
=	O
tmp	pointer
;	O
}	O
return	O
prev	pointer
;	O
}	O
static	O
void	O
fatal	function
(	O
char	O
const	O
*	O
msgid	pointer
)	O
{	O
error	function
(	O
EXIT_TROUBLE	int
,	O
0	int
,	O
"%s"	pointer
,	O
_	O
(	O
msgid	pointer
)	O
)	O
;	O
abort	function
(	O
)	O
;	O
}	O
static	O
void	O
perror_with_exit	function
(	O
char	O
const	O
*	O
string	pointer
)	O
{	O
error	function
(	O
EXIT_TROUBLE	int
,	O
errno	O
,	O
"%s"	pointer
,	O
string	pointer
)	O
;	O
abort	function
(	O
)	O
;	O
}	O
