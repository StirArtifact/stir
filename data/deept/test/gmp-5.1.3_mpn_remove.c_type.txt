static	O
void	O
mpn_bdiv_qr_wrap	function
(	O
mp_ptr	pointer
qp	pointer
,	O
mp_ptr	pointer
rp	pointer
,	O
mp_srcptr	pointer
np	pointer
,	O
mp_size_t	long
nn	long
,	O
mp_srcptr	pointer
dp	pointer
,	O
mp_size_t	long
dn	long
)	O
{	O
mp_ptr	pointer
scratch_out	O
;	O
TMP_DECL	O
;	O
TMP_MARK	O
;	O
scratch_out	O
=	O
TMP_ALLOC_LIMBS	O
(	O
mpn_bdiv_qr_itch	function
(	O
nn	pointer
,	O
dn	long
)	O
)	O
;	O
mpn_bdiv_qr	function
(	O
qp	pointer
,	O
rp	pointer
,	O
np	pointer
,	O
nn	long
,	O
dp	pointer
,	O
dn	long
,	O
scratch_out	O
)	O
;	O
TMP_FREE	O
;	O
}	O
mp_bitcnt_t	long
mpn_remove	O
(	O
mp_ptr	pointer
wp	pointer
,	O
mp_size_t	long
*	O
wn	long
,	O
mp_ptr	pointer
up	pointer
,	O
mp_size_t	long
un	long
,	O
mp_ptr	pointer
vp	pointer
,	O
mp_size_t	long
vn	long
,	O
mp_bitcnt_t	long
cap	long
)	O
{	O
mp_ptr	pointer
pwpsp	pointer
[	O
LOG	int
]	O
;	O
mp_size_t	long
pwpsn	array
[	O
LOG	int
]	O
;	O
mp_size_t	long
npowers	long
;	O
mp_ptr	pointer
tp	pointer
,	O
qp	pointer
,	O
np	pointer
,	O
pp	pointer
,	O
qp2	int
;	O
mp_size_t	long
pn	long
,	O
nn	long
,	O
qn	long
,	O
i	long
;	O
mp_bitcnt_t	long
pwr	long
;	O
TMP_DECL	O
;	O
ASSERT	O
(	O
un	long
>	O
0	int
)	O
;	O
ASSERT	O
(	O
vn	long
>	O
0	int
)	O
;	O
ASSERT	O
(	O
vp	pointer
[	O
0	int
]	O
%	O
2	int
!=	O
0	int
)	O
;	O
ASSERT	O
(	O
vn	long
>	O
1	int
||	O
vp	pointer
[	O
0	int
]	O
>	O
1	int
)	O
;	O
TMP_MARK	O
;	O
tp	pointer
=	O
TMP_ALLOC_LIMBS	O
(	O
(	O
un	long
+	O
1	int
+	O
vn	long
)	O
/	O
2	int
)	O
;	O
qp	pointer
=	O
TMP_ALLOC_LIMBS	O
(	O
un	long
+	O
1	int
)	O
;	O
qp2	pointer
=	O
TMP_ALLOC_LIMBS	O
(	O
un	long
+	O
1	int
)	O
;	O
np	pointer
=	O
TMP_ALLOC_LIMBS	O
(	O
un	long
+	O
LOG	int
)	O
;	O
pp	pointer
=	O
vp	pointer
;	O
pn	pointer
=	O
vn	long
;	O
MPN_COPY	O
(	O
qp	pointer
,	O
up	pointer
,	O
un	long
)	O
;	O
qn	long
=	O
un	long
;	O
npowers	int
=	O
0	int
;	O
while	O
(	O
qn	long
>=	O
pn	long
)	O
{	O
qp	pointer
[	O
qn	long
]	O
=	O
0	int
;	O
mpn_bdiv_qr_wrap	function
(	O
qp2	pointer
,	O
tp	pointer
,	O
qp	pointer
,	O
qn	long
+	O
1	int
,	O
pp	pointer
,	O
pn	pointer
)	O
;	O
if	O
(	O
!	O
mpn_zero_p	function
(	O
tp	pointer
,	O
pn	pointer
)	O
)	O
break	O
;	O
MP_PTR_SWAP	O
(	O
qp	pointer
,	O
qp2	int
)	O
;	O
qn	long
=	O
qn	long
-	O
pn	long
;	O
qn	long
+=	O
qp	pointer
[	O
qn	long
]	O
!=	O
0	int
;	O
pwpsp	pointer
[	O
npowers	int
]	O
=	O
pp	pointer
;	O
pwpsn	pointer
[	O
npowers	int
]	O
=	O
pn	pointer
;	O
npowers	pointer
++	O
;	O
if	O
(	O
(	O
(	O
mp_bitcnt_t	long
)	O
2	int
<<	O
npowers	int
)	O
-	O
1	int
>	O
cap	int
)	O
break	O
;	O
nn	long
=	O
2	int
*	O
pn	pointer
-	O
1	int
;	O
if	O
(	O
nn	long
>	O
qn	long
)	O
break	O
;	O
mpn_sqr	O
(	O
np	pointer
,	O
pp	pointer
,	O
pn	pointer
)	O
;	O
nn	long
+=	O
np	pointer
[	O
nn	long
]	O
!=	O
0	int
;	O
pp	pointer
=	O
np	pointer
;	O
pn	pointer
=	O
nn	long
;	O
np	pointer
+=	O
nn	long
;	O
}	O
pwr	long
=	O
(	O
(	O
mp_bitcnt_t	long
)	O
1	int
<<	O
npowers	int
)	O
-	O
1	int
;	O
for	O
(	O
i	long
=	O
npowers	int
-	O
1	int
;	O
i	long
>=	O
0	int
;	O
i	long
--	O
)	O
{	O
pp	pointer
=	O
pwpsp	array
[	O
i	long
]	O
;	O
pn	pointer
=	O
pwpsn	array
[	O
i	long
]	O
;	O
if	O
(	O
qn	long
<	O
pn	long
)	O
continue	O
;	O
if	O
(	O
pwr	long
+	O
(	O
(	O
mp_bitcnt_t	long
)	O
1	int
<<	O
i	long
)	O
>	O
cap	int
)	O
continue	O
;	O
qp	pointer
[	O
qn	long
]	O
=	O
0	int
;	O
mpn_bdiv_qr_wrap	function
(	O
qp2	pointer
,	O
tp	pointer
,	O
qp	pointer
,	O
qn	long
+	O
1	int
,	O
pp	pointer
,	O
pn	pointer
)	O
;	O
if	O
(	O
!	O
mpn_zero_p	function
(	O
tp	pointer
,	O
pn	pointer
)	O
)	O
continue	O
;	O
MP_PTR_SWAP	O
(	O
qp	pointer
,	O
qp2	int
)	O
;	O
qn	long
=	O
qn	long
-	O
pn	long
;	O
qn	long
+=	O
qp	pointer
[	O
qn	long
]	O
!=	O
0	int
;	O
pwr	long
+=	O
(	O
mp_bitcnt_t	long
)	O
1	int
<<	O
i	long
;	O
}	O
MPN_COPY	O
(	O
wp	pointer
,	O
qp	pointer
,	O
qn	long
)	O
;	O
*	O
wn	pointer
=	O
qn	long
;	O
TMP_FREE	O
;	O
return	O
pwr	long
;	O
}	O