EChar	O
Buffer	array
[	O
1024	int
]	O
;	O
EUint32	int
n_palloc	int
=	O
0	int
;	O
EUint32	int
n_pget	int
=	O
0	int
;	O
EUint32	int
n_pfree	int
=	O
0	int
;	O
EUint32	int
n_prealloc	int
=	O
0	int
;	O
static	O
int	O
_sally	int
=	O
-	O
1	int
;	O
static	O
int	O
initialised	int
=	O
0	int
;	O
int	O
sally_offset	int
=	O
0	int
;	O
int	O
sally_len	int
=	O
0	int
;	O
int	O
_edma_sally_init	function
(	O
)	O
{	O
int	O
len	int
;	O
struct	O
sockaddr_un	struct
remote	pointer
;	O
initialised	int
=	O
1	int
;	O
if	O
(	O
_sally	int
>=	O
0	int
)	O
return	O
_sally	int
;	O
if	O
(	O
(	O
_sally	pointer
=	O
socket	function
(	O
AF_UNIX	O
,	O
SOCK_STREAM	int
,	O
0	int
)	O
)	O
==	O
-	O
1	int
)	O
{	O
perror	function
(	O
"socket"	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
printf	function
(	O
"Trying to connect to EDMA Shared Allocator Agent ..."	pointer
)	O
;	O
remote	struct
.	O
sun_family	enum
=	O
AF_UNIX	O
;	O
strcpy	function
(	O
remote	struct
.	O
sun_path	array
,	O
SOCK_PATH	pointer
)	O
;	O
len	int
=	O
strlen	function
(	O
remote	struct
.	O
sun_path	array
)	O
+	O
sizeof	O
(	O
remote	struct
.	O
sun_family	enum
)	O
;	O
if	O
(	O
connect	function
(	O
_sally	pointer
,	O
(	O
struct	O
sockaddr	struct
*	O
)	O
&	O
remote	pointer
,	O
len	int
)	O
==	O
-	O
1	int
)	O
{	O
perror	function
(	O
"connect"	pointer
)	O
;	O
close	function
(	O
_sally	pointer
)	O
;	O
_sally	int
=	O
-	O
1	int
;	O
printf	function
(	O
"\n-- Connection failed. Falling back to local shared memory "	pointer
"allocator...\n"	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
printf	function
(	O
" CONNECTED\n"	pointer
)	O
;	O
printf	function
(	O
"++ Using Sally Shared Allocator\n"	pointer
)	O
;	O
return	O
_sally	int
;	O
}	O
key_t	O
_sally_shm_alloc	function
(	O
char	O
*	O
n	int
,	O
int	O
size	int
)	O
{	O
char	O
buffer	array
[	O
1024	int
]	O
;	O
key_t	int
_the_key	int
;	O
int	O
len	int
;	O
len	int
=	O
snprintf	function
(	O
buffer	pointer
,	O
1024	int
,	O
"SALLOC %d %s\n"	int
,	O
size	int
,	O
n	int
)	O
;	O
write	function
(	O
_sally	pointer
,	O
buffer	pointer
,	O
len	int
)	O
;	O
memset	function
(	O
buffer	pointer
,	O
0	int
,	O
1024	int
)	O
;	O
len	int
=	O
read	function
(	O
_sally	pointer
,	O
buffer	pointer
,	O
1024	int
)	O
;	O
sscanf	function
(	O
buffer	pointer
,	O
"+SALLOC %d\n"	int
,	O
&	O
_the_key	struct
)	O
;	O
return	O
_the_key	int
;	O
}	O
HMEM	long
EDMAPROC	O
edma_salloc	function
(	O
EUint32	int
size	int
,	O
EPChar	pointer
n	int
)	O
{	O
EUint32	int
a	int
,	O
shmflg	int
,	O
f	pointer
;	O
EChar	array
name	array
[	O
EDMA_PATH_LEN	int
]	O
;	O
key_t	int
k	int
;	O
if	O
(	O
!	O
initialised	int
&&	O
_sally	int
<	O
0	int
)	O
{	O
_edma_sally_init	function
(	O
)	O
;	O
}	O
if	O
(	O
_sally	int
>	O
0	int
)	O
{	O
k	int
=	O
_sally_shm_alloc	function
(	O
n	int
,	O
size	int
)	O
;	O
}	O
else	O
{	O
snprintf	function
(	O
name	pointer
,	O
EDMA_PATH_LEN	pointer
,	O
"%s/%s"	pointer
,	O
TMPDIR	struct
,	O
n	int
)	O
;	O
f	pointer
=	O
open	function
(	O
name	pointer
,	O
O_WRONLY	int
|	O
O_CREAT	int
|	O
O_TRUNC	int
)	O
;	O
if	O
(	O
f	pointer
==	O
-	O
1	int
)	O
{	O
if	O
(	O
errno	O
!=	O
EEXIST	int
)	O
{	O
perror	function
(	O
"Create File"	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
}	O
chmod	function
(	O
name	pointer
,	O
S_IRWXU	int
|	O
S_IRWXG	int
|	O
S_IRWXO	int
)	O
;	O
if	O
(	O
(	O
k	int
=	O
ftok	function
(	O
name	pointer
,	O
0	int
)	O
)	O
==	O
-	O
1	int
)	O
{	O
perror	function
(	O
"[edma_salloc] (ftok)"	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
}	O
shmflg	int
=	O
0	int
;	O
a	int
=	O
shmget	function
(	O
k	int
,	O
size	int
,	O
IPC_CREAT	int
|	O
0777	int
)	O
;	O
if	O
(	O
(	O
a	double
==	O
-	O
1	int
)	O
&&	O
(	O
errno	O
!=	O
EEXIST	int
)	O
)	O
{	O
printf	function
(	O
"\n[edma_salloc] ERROR in shared block : %s (key:%d|size:%ld)"	pointer
,	O
name	pointer
,	O
k	int
,	O
size	int
)	O
;	O
printf	function
(	O
"\n "	pointer
)	O
;	O
perror	function
(	O
"[edma_salloc] (shmget):"	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
_sally	int
<=	O
0	int
)	O
close	function
(	O
f	pointer
)	O
;	O
return	O
(	O
(	O
HMEM	long
)	O
a	double
)	O
;	O
}	O
EPVoid	pointer
EDMAPROC	O
edma_sget	function
(	O
HMEM	long
a	double
)	O
{	O
EPVoid	pointer
p	pointer
;	O
p	pointer
=	O
shmat	function
(	O
(	O
EUint32	long
)	O
a	int
,	O
0	int
,	O
SHM_RND	int
)	O
;	O
if	O
(	O
(	O
int	O
)	O
p	pointer
==	O
-	O
1	int
)	O
{	O
perror	function
(	O
"[edma_sget] :"	pointer
)	O
;	O
return	O
(	O
EPVoid	pointer
)	O
-	O
1	int
;	O
}	O
return	O
p	pointer
;	O
}	O
EPVoid	pointer
EDMAPROC	O
edma_sunget	function
(	O
EPVoid	pointer
p	pointer
)	O
{	O
EUint32	int
i	int
;	O
i	int
=	O
shmdt	function
(	O
p	pointer
)	O
;	O
if	O
(	O
i	int
==	O
-	O
1	int
)	O
{	O
perror	function
(	O
"[edma_sunget] :"	pointer
)	O
;	O
return	O
(	O
EPVoid	pointer
)	O
-	O
1	int
;	O
}	O
return	O
p	pointer
;	O
}	O
void	O
EDMAPROC	O
edma_sfree	function
(	O
HMEM	long
i	int
,	O
EPVoid	pointer
p	pointer
)	O
{	O
ESint32	int
a	int
;	O
struct	O
shmid_ds	struct
buf	pointer
;	O
if	O
(	O
_sally	int
<	O
0	int
)	O
{	O
a	double
=	O
shmctl	function
(	O
i	int
,	O
IPC_RMID	int
,	O
&	O
buf	pointer
)	O
;	O
if	O
(	O
a	double
==	O
-	O
1	int
)	O
{	O
perror	function
(	O
"[edma_sfree] (IPC_RMID):"	pointer
)	O
;	O
return	O
;	O
}	O
}	O
}	O
HMEM	long
EDMAPROC	O
edma_palloc	function
(	O
EUint32	long
size	long
)	O
{	O
EPVoid	pointer
p	pointer
;	O
EPChar	pointer
t	pointer
;	O
EUint32	int
i	int
;	O
p	pointer
=	O
malloc	function
(	O
size	long
)	O
;	O
t	pointer
=	O
(	O
EPChar	pointer
)	O
p	pointer
;	O
if	O
(	O
p	pointer
!=	O
NULL	O
)	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
size	long
;	O
i	int
++	O
)	O
*	O
(	O
t	pointer
+	O
i	long
)	O
=	O
0	int
;	O
n_palloc	int
++	O
;	O
return	O
(	O
(	O
HMEM	long
)	O
p	pointer
)	O
;	O
}	O
HMEM	long
EDMAPROC	O
edma_prealloc	function
(	O
HMEM	long
a	long
,	O
EUint32	long
new_size	long
)	O
{	O
if	O
(	O
a	int
==	O
0	int
)	O
n_palloc	int
++	O
;	O
else	O
n_prealloc	int
++	O
;	O
a	int
=	O
(	O
HMEM	long
)	O
realloc	function
(	O
(	O
EPVoid	pointer
)	O
a	pointer
,	O
new_size	long
)	O
;	O
return	O
a	int
;	O
}	O
EPVoid	pointer
EDMAPROC	O
edma_pget	function
(	O
HMEM	long
a	long
)	O
{	O
n_pget	pointer
++	O
;	O
return	O
(	O
EPVoid	pointer
)	O
a	pointer
;	O
}	O
void	O
EDMAPROC	O
edma_pfree	function
(	O
HMEM	long
a	long
,	O
EPVoid	pointer
p	pointer
)	O
{	O
n_pfree	pointer
++	O
;	O
if	O
(	O
p	pointer
==	O
NULL	O
)	O
return	O
;	O
free	function
(	O
p	pointer
)	O
;	O
}	O
void	O
EDMAPROC	O
edma_show_pmem	function
(	O
)	O
{	O
printf	function
(	O
"palloc   : %ld times\n"	pointer
,	O
n_palloc	pointer
)	O
;	O
printf	function
(	O
"pget     : %ld times\n"	pointer
,	O
n_pget	pointer
)	O
;	O
printf	function
(	O
"prealloc : %ld times\n"	pointer
,	O
n_prealloc	pointer
)	O
;	O
printf	function
(	O
"pfree    : %ld times\n"	pointer
,	O
n_pfree	pointer
)	O
;	O
}	O