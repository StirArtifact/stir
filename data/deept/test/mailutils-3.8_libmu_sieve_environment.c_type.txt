int	O
retrieve_env	function
(	O
void	O
*	O
item	pointer
,	O
void	O
*	O
data	pointer
,	O
size_t	long
idx	long
,	O
char	O
*	O
*	O
pval	pointer
)	O
{	O
mu_sieve_machine_t	pointer
mach	pointer
;	O
if	O
(	O
idx	long
)	O
return	O
MU_ERR_NOENT	O
;	O
mach	pointer
=	O
data	pointer
;	O
return	O
mu_sieve_get_environ	function
(	O
mach	pointer
,	O
item	pointer
,	O
pval	pointer
)	O
;	O
}	O
static	O
int	O
sieve_test_environment	function
(	O
mu_sieve_machine_t	pointer
mach	pointer
)	O
{	O
mu_sieve_value_t	struct
*	O
name	pointer
,	O
*	O
key_list	pointer
;	O
name	pointer
=	O
mu_sieve_get_arg_untyped	function
(	O
mach	pointer
,	O
0	int
)	O
;	O
key_list	pointer
=	O
mu_sieve_get_arg_untyped	function
(	O
mach	pointer
,	O
1	int
)	O
;	O
return	O
mu_sieve_vlist_compare	function
(	O
mach	pointer
,	O
name	pointer
,	O
key_list	pointer
,	O
retrieve_env	pointer
,	O
NULL	O
,	O
mach	pointer
)	O
;	O
}	O
static	O
mu_sieve_data_type	bool
environ_args	array
[	O
]	O
=	O
{	O
SVT_STRING	int
,	O
SVT_STRING_LIST	int
,	O
SVT_VOID	int
}	O
;	O
static	O
mu_sieve_tag_group_t	struct
environ_tag_groups	pointer
[	O
]	O
=	O
{	O
{	O
mu_sieve_match_part_tags	pointer
,	O
mu_sieve_match_part_checker	O
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
int	O
mu_sieve_require_environment	function
(	O
mu_sieve_machine_t	pointer
mach	pointer
)	O
{	O
mu_sieve_register_test	function
(	O
mach	pointer
,	O
"environment"	pointer
,	O
sieve_test_environment	int
,	O
environ_args	int
,	O
environ_tag_groups	int
,	O
1	int
)	O
;	O
return	O
0	int
;	O
}	O
static	O
char	O
*	O
std_name_get	function
(	O
mu_sieve_machine_t	pointer
mach	pointer
)	O
{	O
return	O
strdup	function
(	O
PACKAGE_NAME	pointer
)	O
;	O
}	O
static	O
char	O
*	O
std_version_get	function
(	O
mu_sieve_machine_t	pointer
mach	pointer
)	O
{	O
return	O
strdup	function
(	O
PACKAGE_VERSION	pointer
)	O
;	O
}	O
static	O
char	O
*	O
std_host_get	function
(	O
mu_sieve_machine_t	pointer
mach	pointer
)	O
{	O
char	O
*	O
host	pointer
;	O
int	O
rc	int
;	O
rc	int
=	O
mu_get_host_name	function
(	O
&	O
host	pointer
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
return	O
host	pointer
;	O
return	O
NULL	O
;	O
}	O
static	O
char	O
*	O
std_domain_get	function
(	O
mu_sieve_machine_t	pointer
mach	pointer
)	O
{	O
char	O
*	O
host	pointer
;	O
int	O
rc	int
;	O
rc	int
=	O
mu_get_host_name	function
(	O
&	O
host	pointer
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
char	O
*	O
p	pointer
=	O
strchr	function
(	O
host	pointer
,	O
'.'	O
)	O
;	O
if	O
(	O
p	pointer
)	O
{	O
p	pointer
=	O
strdup	function
(	O
p	pointer
+	O
1	int
)	O
;	O
free	function
(	O
host	pointer
)	O
;	O
return	O
p	pointer
;	O
}	O
return	O
host	pointer
;	O
}	O
return	O
NULL	O
;	O
}	O
struct	O
stdenviron	struct
{	O
char	O
*	O
name	pointer
;	O
char	O
*	O
(	O
*	O
get	pointer
)	O
(	O
mu_sieve_machine_t	pointer
)	O
;	O
int	O
(	O
*	O
set	pointer
)	O
(	O
mu_sieve_machine_t	pointer
,	O
char	O
const	O
*	O
,	O
char	O
const	O
*	O
value	pointer
)	O
;	O
}	O
;	O
static	O
struct	O
stdenviron	struct
stdenv	pointer
[	O
]	O
=	O
{	O
{	O
"domain"	pointer
,	O
std_domain_get	pointer
,	O
NULL	O
}	O
,	O
{	O
"host"	pointer
,	O
std_host_get	pointer
,	O
NULL	O
}	O
,	O
{	O
"name"	pointer
,	O
std_name_get	pointer
,	O
NULL	O
}	O
,	O
{	O
"version"	pointer
,	O
std_version_get	pointer
,	O
NULL	O
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
static	O
struct	O
stdenviron	struct
const	O
*	O
stdenv_find	function
(	O
char	O
const	O
*	O
name	pointer
)	O
{	O
struct	O
stdenviron	struct
const	O
*	O
p	pointer
;	O
for	O
(	O
p	pointer
=	O
stdenv	pointer
;	O
p	pointer
->	O
name	pointer
;	O
p	pointer
++	O
)	O
if	O
(	O
strcmp	function
(	O
p	pointer
->	O
name	pointer
,	O
name	pointer
)	O
==	O
0	int
)	O
return	O
p	pointer
;	O
return	O
NULL	O
;	O
}	O
static	O
char	O
*	O
stdenv_get	function
(	O
mu_sieve_machine_t	pointer
mach	pointer
,	O
char	O
const	O
*	O
name	pointer
)	O
{	O
struct	O
stdenviron	struct
const	O
*	O
p	pointer
=	O
stdenv_find	function
(	O
name	pointer
)	O
;	O
if	O
(	O
!	O
p	pointer
)	O
return	O
NULL	O
;	O
return	O
p	pointer
->	O
get	function
(	O
mach	pointer
)	O
;	O
}	O
static	O
int	O
stdenv_set	function
(	O
mu_sieve_machine_t	pointer
mach	pointer
,	O
char	O
const	O
*	O
name	pointer
,	O
char	O
const	O
*	O
value	pointer
)	O
{	O
struct	O
stdenviron	struct
const	O
*	O
p	pointer
=	O
stdenv_find	function
(	O
name	pointer
)	O
;	O
if	O
(	O
!	O
p	pointer
)	O
return	O
MU_ERR_NOENT	O
;	O
if	O
(	O
!	O
p	pointer
->	O
set	struct
)	O
return	O
EACCES	int
;	O
return	O
p	pointer
->	O
set	O
(	O
mach	pointer
,	O
name	pointer
,	O
value	int
)	O
;	O
}	O
int	O
mu_sieve_get_environ	function
(	O
mu_sieve_machine_t	pointer
mach	pointer
,	O
char	O
const	O
*	O
name	pointer
,	O
char	O
*	O
*	O
retval	pointer
)	O
{	O
char	O
*	O
p	pointer
;	O
p	pointer
=	O
stdenv_get	function
(	O
mach	pointer
,	O
name	pointer
)	O
;	O
if	O
(	O
p	pointer
)	O
{	O
*	O
retval	pointer
=	O
p	pointer
;	O
return	O
0	int
;	O
}	O
if	O
(	O
!	O
mach	pointer
->	O
exenv	pointer
)	O
return	O
MU_ERR_NOENT	O
;	O
p	pointer
=	O
mu_assoc_get	function
(	O
mach	pointer
->	O
exenv	pointer
,	O
name	pointer
)	O
;	O
if	O
(	O
p	pointer
)	O
{	O
*	O
retval	pointer
=	O
strdup	function
(	O
p	pointer
)	O
;	O
if	O
(	O
!	O
*	O
retval	pointer
)	O
return	O
errno	O
;	O
}	O
else	O
return	O
MU_ERR_NOENT	O
;	O
return	O
0	int
;	O
}	O
int	O
mu_sieve_set_environ	function
(	O
mu_sieve_machine_t	pointer
mach	pointer
,	O
char	O
const	O
*	O
name	pointer
,	O
char	O
const	O
*	O
value	pointer
)	O
{	O
int	O
rc	int
;	O
rc	int
=	O
stdenv_set	function
(	O
mach	pointer
,	O
name	pointer
,	O
value	int
)	O
;	O
if	O
(	O
rc	int
==	O
MU_ERR_NOENT	O
)	O
{	O
char	O
*	O
*	O
pptr	pointer
;	O
if	O
(	O
!	O
mach	pointer
->	O
exenv	pointer
)	O
{	O
int	O
rc	int
=	O
mu_assoc_create	function
(	O
&	O
mach	pointer
->	O
exenv	int
,	O
0	int
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
}	O
rc	int
=	O
mu_assoc_install_ref	function
(	O
mach	pointer
->	O
exenv	pointer
,	O
name	pointer
,	O
&	O
pptr	pointer
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
||	O
rc	int
==	O
MU_ERR_EXISTS	O
)	O
{	O
char	O
*	O
copy	pointer
=	O
strdup	function
(	O
value	pointer
)	O
;	O
if	O
(	O
!	O
copy	int
)	O
rc	int
=	O
errno	O
;	O
else	O
{	O
*	O
pptr	pointer
=	O
copy	int
;	O
rc	int
=	O
0	int
;	O
}	O
}	O
}	O
return	O
rc	int
;	O
}	O