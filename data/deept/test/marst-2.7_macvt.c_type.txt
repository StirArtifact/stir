static	O
char	O
*	O
version	pointer
=	O
"MACVT -- Algol 60 Converter, Version 2.7"	pointer
;	O
static	O
char	O
*	O
infilename	pointer
=	O
""	pointer
;	O
static	O
FILE	struct
*	O
infile	pointer
;	O
static	O
char	O
*	O
outfilename	pointer
=	O
""	pointer
;	O
static	O
FILE	struct
*	O
outfile	pointer
;	O
static	O
int	O
free_coding	int
=	O
0	int
;	O
static	O
int	O
more_free	int
=	O
0	int
;	O
static	O
int	O
old_sc	int
=	O
0	int
;	O
static	O
int	O
old_ten	int
=	O
0	int
;	O
static	O
int	O
ignore_case	int
=	O
0	int
;	O
static	O
int	O
e_count	int
=	O
0	int
;	O
static	O
int	O
l_count	int
=	O
0	int
;	O
static	O
int	O
ch	int
;	O
static	O
void	O
my_assert	function
(	O
char	O
*	O
expr	pointer
,	O
char	O
*	O
file	pointer
,	O
int	O
line	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Internal converter error: %s, file %s, line %d\n"	pointer
,	O
expr	pointer
,	O
file	pointer
,	O
line	int
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"Please, report to <bug-marst@gnu.org>\n"	pointer
)	O
;	O
fflush	function
(	O
stderr	pointer
)	O
;	O
fflush	function
(	O
outfile	pointer
)	O
;	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
static	O
void	O
error	function
(	O
char	O
*	O
msg	pointer
,	O
...	O
)	O
{	O
va_list	array
arg	array
;	O
fprintf	function
(	O
stderr	pointer
,	O
"%s:%d: "	pointer
,	O
infilename	pointer
,	O
l_count	int
+	O
1	int
)	O
;	O
va_start	O
(	O
arg	array
,	O
msg	pointer
)	O
;	O
vfprintf	function
(	O
stderr	pointer
,	O
msg	pointer
,	O
arg	array
)	O
;	O
va_end	O
(	O
arg	array
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"\n"	pointer
)	O
;	O
e_count	int
++	O
;	O
return	O
;	O
}	O
static	O
void	O
get_char	function
(	O
void	O
)	O
{	O
ch	int
=	O
fgetc	function
(	O
infile	pointer
)	O
;	O
if	O
(	O
ferror	function
(	O
infile	pointer
)	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Read error on `%s' - %s\n"	pointer
,	O
infilename	pointer
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
if	O
(	O
feof	function
(	O
infile	pointer
)	O
)	O
ch	int
=	O
0x1A	int
;	O
else	O
if	O
(	O
iscntrl	function
(	O
ch	int
)	O
&&	O
!	O
isspace	function
(	O
ch	int
)	O
)	O
{	O
error	function
(	O
"invalid control character 0x%02X"	pointer
,	O
ch	int
)	O
;	O
ch	int
=	O
' '	O
;	O
}	O
else	O
if	O
(	O
ch	int
==	O
'\n'	O
)	O
l_count	int
++	O
;	O
return	O
;	O
}	O
static	O
void	O
emit_sym	function
(	O
int	O
sym	int
,	O
int	O
c	int
)	O
;	O
static	O
void	O
scan_pad	function
(	O
int	O
flag	int
)	O
{	O
if	O
(	O
flag	int
)	O
while	O
(	O
isspace	function
(	O
ch	int
)	O
)	O
emit_sym	function
(	O
S_CHAR	O
,	O
ch	int
)	O
,	O
get_char	function
(	O
)	O
;	O
return	O
;	O
}	O
static	O
void	O
scan_comment	function
(	O
void	O
)	O
{	O
if	O
(	O
isalnum	function
(	O
ch	int
)	O
)	O
emit_sym	function
(	O
S_CHAR	O
,	O
' '	O
)	O
;	O
for	O
(	O
;	O
;	O
)	O
{	O
if	O
(	O
ch	int
==	O
0x1A	int
)	O
break	O
;	O
if	O
(	O
ch	int
==	O
';'	O
)	O
break	O
;	O
if	O
(	O
old_sc	int
&&	O
ch	int
==	O
'.'	O
)	O
{	O
get_char	function
(	O
)	O
,	O
scan_pad	function
(	O
classic	O
)	O
;	O
if	O
(	O
ch	int
==	O
','	O
)	O
break	O
;	O
emit_sym	function
(	O
S_CHAR	O
,	O
'.'	O
)	O
;	O
if	O
(	O
ch	int
==	O
';'	O
)	O
break	O
;	O
}	O
emit_sym	function
(	O
S_CHAR	O
,	O
ch	int
)	O
,	O
get_char	function
(	O
)	O
;	O
}	O
emit_sym	function
(	O
S_SEMICOLON	int
,	O
0	int
)	O
,	O
get_char	function
(	O
)	O
;	O
return	O
;	O
}	O
static	O
void	O
convert	function
(	O
void	O
)	O
{	O
get_char	function
(	O
)	O
;	O
for	O
(	O
;	O
;	O
)	O
if	O
(	O
ch	int
==	O
0x1A	int
)	O
{	O
emit_sym	function
(	O
S_EOF	int
,	O
0	int
)	O
;	O
break	O
;	O
}	O
else	O
if	O
(	O
isspace	function
(	O
ch	int
)	O
)	O
{	O
emit_sym	function
(	O
S_CHAR	O
,	O
ch	int
)	O
,	O
get_char	function
(	O
)	O
;	O
}	O
else	O
if	O
(	O
isalpha	function
(	O
ch	int
)	O
)	O
{	O
if	O
(	O
classic	O
)	O
{	O
if	O
(	O
ignore_case	int
)	O
ch	int
=	O
tolower	function
(	O
ch	int
)	O
;	O
emit_sym	function
(	O
S_LETTER	int
,	O
ch	int
)	O
,	O
get_char	function
(	O
)	O
;	O
}	O
else	O
{	O
char	O
str	array
[	O
10	int
+	O
1	int
]	O
;	O
int	O
len	int
=	O
0	int
;	O
memset	function
(	O
str	array
,	O
'\0'	O
,	O
10	int
+	O
1	int
)	O
;	O
again	O
:	O
while	O
(	O
isalnum	function
(	O
ch	int
)	O
)	O
{	O
if	O
(	O
len	int
==	O
10	int
)	O
goto	O
ident	O
;	O
if	O
(	O
ignore_case	int
)	O
ch	int
=	O
tolower	function
(	O
ch	int
)	O
;	O
str	array
[	O
len	int
++	O
]	O
=	O
(	O
char	O
)	O
ch	int
,	O
get_char	function
(	O
)	O
;	O
}	O
if	O
(	O
more_free	int
&&	O
strcmp	function
(	O
str	array
,	O
"div"	pointer
)	O
==	O
0	int
)	O
emit_sym	function
(	O
S_INTDIV	int
,	O
0	int
)	O
;	O
else	O
if	O
(	O
more_free	int
&&	O
strcmp	function
(	O
str	array
,	O
"power"	pointer
)	O
==	O
0	int
)	O
emit_sym	function
(	O
S_POWER	int
,	O
0	int
)	O
;	O
else	O
if	O
(	O
more_free	int
&&	O
strcmp	function
(	O
str	array
,	O
"pow"	pointer
)	O
==	O
0	int
)	O
emit_sym	function
(	O
S_POWER	int
,	O
0	int
)	O
;	O
else	O
if	O
(	O
more_free	int
&&	O
strcmp	function
(	O
str	array
,	O
"less"	pointer
)	O
==	O
0	int
)	O
emit_sym	function
(	O
S_LESS	int
,	O
0	int
)	O
;	O
else	O
if	O
(	O
more_free	int
&&	O
strcmp	function
(	O
str	array
,	O
"notgreater"	pointer
)	O
==	O
0	int
)	O
emit_sym	function
(	O
S_NOTGREATER	int
,	O
0	int
)	O
;	O
else	O
if	O
(	O
more_free	int
&&	O
strcmp	function
(	O
str	array
,	O
"equal"	pointer
)	O
==	O
0	int
)	O
emit_sym	function
(	O
S_EQUAL	int
,	O
0	int
)	O
;	O
else	O
if	O
(	O
more_free	int
&&	O
strcmp	function
(	O
str	array
,	O
"notless"	pointer
)	O
==	O
0	int
)	O
emit_sym	function
(	O
S_NOTLESS	int
,	O
0	int
)	O
;	O
else	O
if	O
(	O
more_free	int
&&	O
strcmp	function
(	O
str	array
,	O
"greater"	pointer
)	O
==	O
0	int
)	O
emit_sym	function
(	O
S_GREATER	int
,	O
0	int
)	O
;	O
else	O
if	O
(	O
more_free	int
&&	O
strcmp	function
(	O
str	array
,	O
"notequal"	pointer
)	O
==	O
0	int
)	O
emit_sym	function
(	O
S_NOTEQUAL	int
,	O
0	int
)	O
;	O
else	O
if	O
(	O
more_free	int
&&	O
strcmp	function
(	O
str	array
,	O
"equiv"	pointer
)	O
==	O
0	int
)	O
emit_sym	function
(	O
S_EQUIV	int
,	O
0	int
)	O
;	O
else	O
if	O
(	O
more_free	int
&&	O
strcmp	function
(	O
str	array
,	O
"impl"	pointer
)	O
==	O
0	int
)	O
emit_sym	function
(	O
S_IMPL	int
,	O
0	int
)	O
;	O
else	O
if	O
(	O
more_free	int
&&	O
strcmp	function
(	O
str	array
,	O
"or"	pointer
)	O
==	O
0	int
)	O
emit_sym	function
(	O
S_OR	int
,	O
0	int
)	O
;	O
else	O
if	O
(	O
more_free	int
&&	O
strcmp	function
(	O
str	array
,	O
"and"	pointer
)	O
==	O
0	int
)	O
emit_sym	function
(	O
S_AND	int
,	O
0	int
)	O
;	O
else	O
if	O
(	O
more_free	int
&&	O
strcmp	function
(	O
str	array
,	O
"not"	pointer
)	O
==	O
0	int
)	O
emit_sym	function
(	O
S_NOT	int
,	O
0	int
)	O
;	O
else	O
if	O
(	O
strcmp	function
(	O
str	array
,	O
"array"	pointer
)	O
==	O
0	int
)	O
emit_sym	function
(	O
S_ARRAY	int
,	O
0	int
)	O
;	O
else	O
if	O
(	O
strcmp	function
(	O
str	array
,	O
"begin"	pointer
)	O
==	O
0	int
)	O
emit_sym	function
(	O
S_BEGIN	int
,	O
0	int
)	O
;	O
else	O
if	O
(	O
strcmp	function
(	O
str	array
,	O
"Boolean"	pointer
)	O
==	O
0	int
)	O
emit_sym	function
(	O
S_BOOLEAN	int
,	O
0	int
)	O
;	O
else	O
if	O
(	O
strcmp	function
(	O
str	array
,	O
"boolean"	pointer
)	O
==	O
0	int
)	O
emit_sym	function
(	O
S_BOOLEAN	int
,	O
0	int
)	O
;	O
else	O
if	O
(	O
strcmp	function
(	O
str	array
,	O
"code"	pointer
)	O
==	O
0	int
)	O
emit_sym	function
(	O
S_CODE	int
,	O
0	int
)	O
;	O
else	O
if	O
(	O
strcmp	function
(	O
str	array
,	O
"comment"	pointer
)	O
==	O
0	int
)	O
{	O
emit_sym	function
(	O
S_COMMENT	int
,	O
0	int
)	O
;	O
scan_comment	function
(	O
)	O
;	O
}	O
else	O
if	O
(	O
strcmp	function
(	O
str	array
,	O
"do"	pointer
)	O
==	O
0	int
)	O
emit_sym	function
(	O
S_DO	int
,	O
0	int
)	O
;	O
else	O
if	O
(	O
strcmp	function
(	O
str	array
,	O
"else"	pointer
)	O
==	O
0	int
)	O
emit_sym	function
(	O
S_ELSE	int
,	O
0	int
)	O
;	O
else	O
if	O
(	O
strcmp	function
(	O
str	array
,	O
"end"	pointer
)	O
==	O
0	int
)	O
emit_sym	function
(	O
S_END	int
,	O
0	int
)	O
;	O
else	O
if	O
(	O
strcmp	function
(	O
str	array
,	O
"false"	pointer
)	O
==	O
0	int
)	O
emit_sym	function
(	O
S_FALSE	int
,	O
0	int
)	O
;	O
else	O
if	O
(	O
strcmp	function
(	O
str	array
,	O
"for"	pointer
)	O
==	O
0	int
)	O
emit_sym	function
(	O
S_FOR	int
,	O
0	int
)	O
;	O
else	O
if	O
(	O
strcmp	function
(	O
str	array
,	O
"go"	pointer
)	O
==	O
0	int
&&	O
ch	int
==	O
' '	O
)	O
{	O
while	O
(	O
ch	int
==	O
' '	O
)	O
emit_sym	function
(	O
S_CHAR	O
,	O
' '	O
)	O
,	O
get_char	function
(	O
)	O
;	O
goto	O
again	O
;	O
}	O
else	O
if	O
(	O
strcmp	function
(	O
str	array
,	O
"goto"	pointer
)	O
==	O
0	int
)	O
emit_sym	function
(	O
S_GOTO	int
,	O
0	int
)	O
;	O
else	O
if	O
(	O
strcmp	function
(	O
str	array
,	O
"if"	pointer
)	O
==	O
0	int
)	O
emit_sym	function
(	O
S_IF	int
,	O
0	int
)	O
;	O
else	O
if	O
(	O
strcmp	function
(	O
str	array
,	O
"integer"	pointer
)	O
==	O
0	int
)	O
emit_sym	function
(	O
S_INTEGER	int
,	O
0	int
)	O
;	O
else	O
if	O
(	O
strcmp	function
(	O
str	array
,	O
"label"	pointer
)	O
==	O
0	int
)	O
emit_sym	function
(	O
S_LABEL	int
,	O
0	int
)	O
;	O
else	O
if	O
(	O
strcmp	function
(	O
str	array
,	O
"own"	pointer
)	O
==	O
0	int
)	O
emit_sym	function
(	O
S_OWN	int
,	O
0	int
)	O
;	O
else	O
if	O
(	O
strcmp	function
(	O
str	array
,	O
"procedure"	pointer
)	O
==	O
0	int
)	O
emit_sym	function
(	O
S_PROCEDURE	int
,	O
0	int
)	O
;	O
else	O
if	O
(	O
strcmp	function
(	O
str	array
,	O
"real"	pointer
)	O
==	O
0	int
)	O
emit_sym	function
(	O
S_REAL	int
,	O
0	int
)	O
;	O
else	O
if	O
(	O
strcmp	function
(	O
str	array
,	O
"step"	pointer
)	O
==	O
0	int
)	O
emit_sym	function
(	O
S_STEP	int
,	O
0	int
)	O
;	O
else	O
if	O
(	O
strcmp	function
(	O
str	array
,	O
"string"	pointer
)	O
==	O
0	int
)	O
emit_sym	function
(	O
S_STRING	int
,	O
0	int
)	O
;	O
else	O
if	O
(	O
strcmp	function
(	O
str	array
,	O
"switch"	pointer
)	O
==	O
0	int
)	O
emit_sym	function
(	O
S_SWITCH	int
,	O
0	int
)	O
;	O
else	O
if	O
(	O
strcmp	function
(	O
str	array
,	O
"then"	pointer
)	O
==	O
0	int
)	O
emit_sym	function
(	O
S_THEN	int
,	O
0	int
)	O
;	O
else	O
if	O
(	O
strcmp	function
(	O
str	array
,	O
"true"	pointer
)	O
==	O
0	int
)	O
emit_sym	function
(	O
S_TRUE	int
,	O
0	int
)	O
;	O
else	O
if	O
(	O
strcmp	function
(	O
str	array
,	O
"until"	pointer
)	O
==	O
0	int
)	O
emit_sym	function
(	O
S_UNTIL	int
,	O
0	int
)	O
;	O
else	O
if	O
(	O
strcmp	function
(	O
str	array
,	O
"value"	pointer
)	O
==	O
0	int
)	O
emit_sym	function
(	O
S_VALUE	int
,	O
0	int
)	O
;	O
else	O
if	O
(	O
strcmp	function
(	O
str	array
,	O
"while"	pointer
)	O
==	O
0	int
)	O
emit_sym	function
(	O
S_WHILE	int
,	O
0	int
)	O
;	O
else	O
ident	O
:	O
{	O
char	O
*	O
t	pointer
;	O
for	O
(	O
t	pointer
=	O
str	array
;	O
*	O
t	pointer
;	O
t	pointer
++	O
)	O
emit_sym	function
(	O
isalpha	function
(	O
*	O
t	pointer
)	O
?	O
S_LETTER	int
:	O
S_DIGIT	int
,	O
*	O
t	pointer
)	O
;	O
while	O
(	O
isalnum	function
(	O
ch	int
)	O
)	O
{	O
if	O
(	O
ignore_case	int
)	O
ch	int
=	O
tolower	function
(	O
ch	int
)	O
;	O
emit_sym	function
(	O
isalpha	function
(	O
ch	int
)	O
?	O
S_LETTER	int
:	O
S_DIGIT	int
,	O
ch	int
)	O
;	O
get_char	function
(	O
)	O
;	O
}	O
}	O
}	O
}	O
else	O
if	O
(	O
isdigit	function
(	O
ch	int
)	O
)	O
emit_sym	function
(	O
S_DIGIT	int
,	O
ch	int
)	O
,	O
get_char	function
(	O
)	O
;	O
else	O
if	O
(	O
ch	int
==	O
'+'	O
)	O
emit_sym	function
(	O
S_PLUS	int
,	O
0	int
)	O
,	O
get_char	function
(	O
)	O
;	O
else	O
if	O
(	O
ch	int
==	O
'-'	O
)	O
{	O
get_char	function
(	O
)	O
,	O
scan_pad	function
(	O
classic	O
)	O
;	O
if	O
(	O
ch	int
==	O
'>'	O
)	O
emit_sym	function
(	O
S_IMPL	int
,	O
0	int
)	O
,	O
get_char	function
(	O
)	O
;	O
else	O
emit_sym	function
(	O
S_MINUS	int
,	O
0	int
)	O
;	O
}	O
else	O
if	O
(	O
ch	int
==	O
'*'	O
)	O
{	O
get_char	function
(	O
)	O
,	O
scan_pad	function
(	O
classic	O
)	O
;	O
if	O
(	O
ch	int
==	O
'*'	O
)	O
emit_sym	function
(	O
S_POWER	int
,	O
0	int
)	O
,	O
get_char	function
(	O
)	O
;	O
else	O
emit_sym	function
(	O
S_TIMES	int
,	O
0	int
)	O
;	O
}	O
else	O
if	O
(	O
ch	int
==	O
'/'	O
)	O
{	O
get_char	function
(	O
)	O
,	O
scan_pad	function
(	O
classic	O
)	O
;	O
if	O
(	O
ch	int
==	O
')'	O
)	O
emit_sym	function
(	O
S_ENDSUB	int
,	O
0	int
)	O
,	O
get_char	function
(	O
)	O
;	O
else	O
emit_sym	function
(	O
S_SLASH	int
,	O
0	int
)	O
;	O
}	O
else	O
if	O
(	O
ch	int
==	O
'%'	O
)	O
emit_sym	function
(	O
S_INTDIV	int
,	O
ch	int
)	O
,	O
get_char	function
(	O
)	O
;	O
else	O
if	O
(	O
ch	int
==	O
'^'	O
)	O
emit_sym	function
(	O
S_POWER	int
,	O
ch	int
)	O
,	O
get_char	function
(	O
)	O
;	O
else	O
if	O
(	O
ch	int
==	O
'<'	O
)	O
{	O
get_char	function
(	O
)	O
,	O
scan_pad	function
(	O
classic	O
)	O
;	O
if	O
(	O
ch	int
==	O
'='	O
)	O
emit_sym	function
(	O
S_NOTGREATER	int
,	O
0	int
)	O
,	O
get_char	function
(	O
)	O
;	O
else	O
emit_sym	function
(	O
S_LESS	int
,	O
0	int
)	O
;	O
}	O
else	O
if	O
(	O
ch	int
==	O
'='	O
)	O
{	O
get_char	function
(	O
)	O
,	O
scan_pad	function
(	O
classic	O
)	O
;	O
if	O
(	O
ch	int
==	O
'='	O
)	O
emit_sym	function
(	O
S_EQUIV	int
,	O
0	int
)	O
,	O
get_char	function
(	O
)	O
;	O
else	O
emit_sym	function
(	O
S_EQUAL	int
,	O
0	int
)	O
;	O
}	O
else	O
if	O
(	O
ch	int
==	O
'>'	O
)	O
{	O
get_char	function
(	O
)	O
,	O
scan_pad	function
(	O
classic	O
)	O
;	O
if	O
(	O
ch	int
==	O
'='	O
)	O
emit_sym	function
(	O
S_NOTLESS	int
,	O
0	int
)	O
,	O
get_char	function
(	O
)	O
;	O
else	O
emit_sym	function
(	O
S_GREATER	int
,	O
0	int
)	O
;	O
}	O
else	O
if	O
(	O
ch	int
==	O
'!'	O
)	O
{	O
get_char	function
(	O
)	O
,	O
scan_pad	function
(	O
classic	O
)	O
;	O
if	O
(	O
ch	int
==	O
'='	O
)	O
emit_sym	function
(	O
S_NOTEQUAL	int
,	O
0	int
)	O
,	O
get_char	function
(	O
)	O
;	O
else	O
emit_sym	function
(	O
S_NOT	int
,	O
0	int
)	O
;	O
}	O
else	O
if	O
(	O
ch	int
==	O
'|'	O
)	O
emit_sym	function
(	O
S_OR	int
,	O
0	int
)	O
,	O
get_char	function
(	O
)	O
;	O
else	O
if	O
(	O
ch	int
==	O
'&'	O
)	O
emit_sym	function
(	O
S_AND	int
,	O
0	int
)	O
,	O
get_char	function
(	O
)	O
;	O
else	O
if	O
(	O
ch	int
==	O
','	O
)	O
emit_sym	function
(	O
S_COMMA	int
,	O
0	int
)	O
,	O
get_char	function
(	O
)	O
;	O
else	O
if	O
(	O
ch	int
==	O
'.'	O
)	O
{	O
get_char	function
(	O
)	O
,	O
scan_pad	function
(	O
classic	O
)	O
;	O
if	O
(	O
ch	int
==	O
'.'	O
)	O
{	O
get_char	function
(	O
)	O
,	O
scan_pad	function
(	O
classic	O
)	O
;	O
if	O
(	O
ch	int
==	O
'='	O
)	O
emit_sym	function
(	O
S_ASSIGN	int
,	O
0	int
)	O
,	O
get_char	function
(	O
)	O
;	O
else	O
emit_sym	function
(	O
S_COLON	int
,	O
0	int
)	O
;	O
}	O
else	O
if	O
(	O
old_sc	int
&&	O
ch	int
==	O
','	O
)	O
emit_sym	function
(	O
S_SEMICOLON	int
,	O
0	int
)	O
,	O
get_char	function
(	O
)	O
;	O
else	O
if	O
(	O
ch	int
==	O
'='	O
)	O
emit_sym	function
(	O
S_ASSIGN	int
,	O
0	int
)	O
,	O
get_char	function
(	O
)	O
;	O
else	O
emit_sym	function
(	O
S_POINT	int
,	O
0	int
)	O
;	O
}	O
else	O
if	O
(	O
ch	int
==	O
'#'	O
)	O
emit_sym	function
(	O
S_TEN	int
,	O
0	int
)	O
,	O
get_char	function
(	O
)	O
;	O
else	O
if	O
(	O
ch	int
==	O
':'	O
)	O
{	O
get_char	function
(	O
)	O
,	O
scan_pad	function
(	O
classic	O
)	O
;	O
if	O
(	O
ch	int
==	O
'='	O
)	O
emit_sym	function
(	O
S_ASSIGN	int
,	O
0	int
)	O
,	O
get_char	function
(	O
)	O
;	O
else	O
emit_sym	function
(	O
S_COLON	int
,	O
0	int
)	O
;	O
}	O
else	O
if	O
(	O
ch	int
==	O
';'	O
)	O
emit_sym	function
(	O
S_SEMICOLON	int
,	O
0	int
)	O
,	O
get_char	function
(	O
)	O
;	O
else	O
if	O
(	O
ch	int
==	O
'('	O
)	O
{	O
get_char	function
(	O
)	O
,	O
scan_pad	function
(	O
classic	O
)	O
;	O
if	O
(	O
ch	int
==	O
'/'	O
)	O
emit_sym	function
(	O
S_BEGSUB	int
,	O
0	int
)	O
,	O
get_char	function
(	O
)	O
;	O
else	O
emit_sym	function
(	O
S_LEFT	int
,	O
0	int
)	O
;	O
}	O
else	O
if	O
(	O
ch	int
==	O
')'	O
)	O
emit_sym	function
(	O
S_RIGHT	int
,	O
0	int
)	O
,	O
get_char	function
(	O
)	O
;	O
else	O
if	O
(	O
ch	int
==	O
'['	O
)	O
emit_sym	function
(	O
S_BEGSUB	int
,	O
0	int
)	O
,	O
get_char	function
(	O
)	O
;	O
else	O
if	O
(	O
ch	int
==	O
']'	O
)	O
emit_sym	function
(	O
S_ENDSUB	int
,	O
0	int
)	O
,	O
get_char	function
(	O
)	O
;	O
else	O
if	O
(	O
ch	int
==	O
'\''	O
)	O
{	O
get_char	function
(	O
)	O
,	O
scan_pad	function
(	O
1	int
)	O
;	O
if	O
(	O
old_ten	int
&&	O
(	O
ch	int
==	O
'+'	O
||	O
ch	int
==	O
'-'	O
||	O
isdigit	function
(	O
ch	int
)	O
)	O
)	O
emit_sym	function
(	O
S_TEN	int
,	O
0	int
)	O
;	O
else	O
{	O
char	O
str	array
[	O
10	int
+	O
1	int
+	O
1	int
]	O
;	O
int	O
len	int
=	O
0	int
;	O
memset	function
(	O
str	array
,	O
'\0'	O
,	O
10	int
+	O
1	int
+	O
1	int
)	O
;	O
while	O
(	O
isalnum	function
(	O
ch	int
)	O
||	O
ispunct	function
(	O
ch	int
)	O
)	O
{	O
if	O
(	O
ch	int
==	O
'\''	O
)	O
break	O
;	O
if	O
(	O
len	int
<	O
11	int
)	O
str	array
[	O
len	int
++	O
]	O
=	O
(	O
char	O
)	O
tolower	function
(	O
ch	int
)	O
;	O
get_char	function
(	O
)	O
,	O
scan_pad	function
(	O
1	int
)	O
;	O
}	O
if	O
(	O
ch	int
==	O
'\''	O
)	O
get_char	function
(	O
)	O
;	O
else	O
error	function
(	O
"closing apostrophe missing"	pointer
)	O
;	O
if	O
(	O
strcmp	function
(	O
str	array
,	O
"/"	pointer
)	O
==	O
0	int
)	O
emit_sym	function
(	O
S_INTDIV	int
,	O
0	int
)	O
;	O
else	O
if	O
(	O
strcmp	function
(	O
str	array
,	O
"div"	pointer
)	O
==	O
0	int
)	O
emit_sym	function
(	O
S_INTDIV	int
,	O
0	int
)	O
;	O
else	O
if	O
(	O
strcmp	function
(	O
str	array
,	O
"power"	pointer
)	O
==	O
0	int
)	O
emit_sym	function
(	O
S_POWER	int
,	O
0	int
)	O
;	O
else	O
if	O
(	O
strcmp	function
(	O
str	array
,	O
"pow"	pointer
)	O
==	O
0	int
)	O
emit_sym	function
(	O
S_POWER	int
,	O
0	int
)	O
;	O
else	O
if	O
(	O
strcmp	function
(	O
str	array
,	O
"less"	pointer
)	O
==	O
0	int
)	O
emit_sym	function
(	O
S_LESS	int
,	O
0	int
)	O
;	O
else	O
if	O
(	O
strcmp	function
(	O
str	array
,	O
"notgreater"	pointer
)	O
==	O
0	int
)	O
emit_sym	function
(	O
S_NOTGREATER	int
,	O
0	int
)	O
;	O
else	O
if	O
(	O
strcmp	function
(	O
str	array
,	O
"equal"	pointer
)	O
==	O
0	int
)	O
emit_sym	function
(	O
S_EQUAL	int
,	O
0	int
)	O
;	O
else	O
if	O
(	O
strcmp	function
(	O
str	array
,	O
"notless"	pointer
)	O
==	O
0	int
)	O
emit_sym	function
(	O
S_NOTLESS	int
,	O
0	int
)	O
;	O
else	O
if	O
(	O
strcmp	function
(	O
str	array
,	O
"greater"	pointer
)	O
==	O
0	int
)	O
emit_sym	function
(	O
S_GREATER	int
,	O
0	int
)	O
;	O
else	O
if	O
(	O
strcmp	function
(	O
str	array
,	O
"notequal"	pointer
)	O
==	O
0	int
)	O
emit_sym	function
(	O
S_NOTEQUAL	int
,	O
0	int
)	O
;	O
else	O
if	O
(	O
strcmp	function
(	O
str	array
,	O
"equiv"	pointer
)	O
==	O
0	int
)	O
emit_sym	function
(	O
S_EQUIV	int
,	O
0	int
)	O
;	O
else	O
if	O
(	O
strcmp	function
(	O
str	array
,	O
"impl"	pointer
)	O
==	O
0	int
)	O
emit_sym	function
(	O
S_IMPL	int
,	O
0	int
)	O
;	O
else	O
if	O
(	O
strcmp	function
(	O
str	array
,	O
"or"	pointer
)	O
==	O
0	int
)	O
emit_sym	function
(	O
S_OR	int
,	O
0	int
)	O
;	O
else	O
if	O
(	O
strcmp	function
(	O
str	array
,	O
"and"	pointer
)	O
==	O
0	int
)	O
emit_sym	function
(	O
S_AND	int
,	O
0	int
)	O
;	O
else	O
if	O
(	O
strcmp	function
(	O
str	array
,	O
"not"	pointer
)	O
==	O
0	int
)	O
emit_sym	function
(	O
S_NOT	int
,	O
0	int
)	O
;	O
else	O
if	O
(	O
strcmp	function
(	O
str	array
,	O
"10"	pointer
)	O
==	O
0	int
)	O
emit_sym	function
(	O
S_TEN	int
,	O
0	int
)	O
;	O
else	O
if	O
(	O
strcmp	function
(	O
str	array
,	O
"array"	pointer
)	O
==	O
0	int
)	O
emit_sym	function
(	O
S_ARRAY	int
,	O
0	int
)	O
;	O
else	O
if	O
(	O
strcmp	function
(	O
str	array
,	O
"begin"	pointer
)	O
==	O
0	int
)	O
emit_sym	function
(	O
S_BEGIN	int
,	O
0	int
)	O
;	O
else	O
if	O
(	O
strcmp	function
(	O
str	array
,	O
"boolean"	pointer
)	O
==	O
0	int
)	O
emit_sym	function
(	O
S_BOOLEAN	int
,	O
0	int
)	O
;	O
else	O
if	O
(	O
strcmp	function
(	O
str	array
,	O
"code"	pointer
)	O
==	O
0	int
)	O
emit_sym	function
(	O
S_CODE	int
,	O
0	int
)	O
;	O
else	O
if	O
(	O
strcmp	function
(	O
str	array
,	O
"comment"	pointer
)	O
==	O
0	int
)	O
{	O
emit_sym	function
(	O
S_COMMENT	int
,	O
0	int
)	O
;	O
scan_comment	function
(	O
)	O
;	O
}	O
else	O
if	O
(	O
strcmp	function
(	O
str	array
,	O
"do"	pointer
)	O
==	O
0	int
)	O
emit_sym	function
(	O
S_DO	int
,	O
0	int
)	O
;	O
else	O
if	O
(	O
strcmp	function
(	O
str	array
,	O
"else"	pointer
)	O
==	O
0	int
)	O
emit_sym	function
(	O
S_ELSE	int
,	O
0	int
)	O
;	O
else	O
if	O
(	O
strcmp	function
(	O
str	array
,	O
"end"	pointer
)	O
==	O
0	int
)	O
emit_sym	function
(	O
S_END	int
,	O
0	int
)	O
;	O
else	O
if	O
(	O
strcmp	function
(	O
str	array
,	O
"false"	pointer
)	O
==	O
0	int
)	O
emit_sym	function
(	O
S_FALSE	int
,	O
0	int
)	O
;	O
else	O
if	O
(	O
strcmp	function
(	O
str	array
,	O
"for"	pointer
)	O
==	O
0	int
)	O
emit_sym	function
(	O
S_FOR	int
,	O
0	int
)	O
;	O
else	O
if	O
(	O
strcmp	function
(	O
str	array
,	O
"goto"	pointer
)	O
==	O
0	int
)	O
emit_sym	function
(	O
S_GOTO	int
,	O
0	int
)	O
;	O
else	O
if	O
(	O
strcmp	function
(	O
str	array
,	O
"if"	pointer
)	O
==	O
0	int
)	O
emit_sym	function
(	O
S_IF	int
,	O
0	int
)	O
;	O
else	O
if	O
(	O
strcmp	function
(	O
str	array
,	O
"integer"	pointer
)	O
==	O
0	int
)	O
emit_sym	function
(	O
S_INTEGER	int
,	O
0	int
)	O
;	O
else	O
if	O
(	O
strcmp	function
(	O
str	array
,	O
"label"	pointer
)	O
==	O
0	int
)	O
emit_sym	function
(	O
S_LABEL	int
,	O
0	int
)	O
;	O
else	O
if	O
(	O
strcmp	function
(	O
str	array
,	O
"own"	pointer
)	O
==	O
0	int
)	O
emit_sym	function
(	O
S_OWN	int
,	O
0	int
)	O
;	O
else	O
if	O
(	O
strcmp	function
(	O
str	array
,	O
"procedure"	pointer
)	O
==	O
0	int
)	O
emit_sym	function
(	O
S_PROCEDURE	int
,	O
0	int
)	O
;	O
else	O
if	O
(	O
strcmp	function
(	O
str	array
,	O
"real"	pointer
)	O
==	O
0	int
)	O
emit_sym	function
(	O
S_REAL	int
,	O
0	int
)	O
;	O
else	O
if	O
(	O
strcmp	function
(	O
str	array
,	O
"step"	pointer
)	O
==	O
0	int
)	O
emit_sym	function
(	O
S_STEP	int
,	O
0	int
)	O
;	O
else	O
if	O
(	O
strcmp	function
(	O
str	array
,	O
"string"	pointer
)	O
==	O
0	int
)	O
emit_sym	function
(	O
S_STRING	int
,	O
0	int
)	O
;	O
else	O
if	O
(	O
strcmp	function
(	O
str	array
,	O
"switch"	pointer
)	O
==	O
0	int
)	O
emit_sym	function
(	O
S_SWITCH	int
,	O
0	int
)	O
;	O
else	O
if	O
(	O
strcmp	function
(	O
str	array
,	O
"then"	pointer
)	O
==	O
0	int
)	O
emit_sym	function
(	O
S_THEN	int
,	O
0	int
)	O
;	O
else	O
if	O
(	O
strcmp	function
(	O
str	array
,	O
"true"	pointer
)	O
==	O
0	int
)	O
emit_sym	function
(	O
S_TRUE	int
,	O
0	int
)	O
;	O
else	O
if	O
(	O
strcmp	function
(	O
str	array
,	O
"until"	pointer
)	O
==	O
0	int
)	O
emit_sym	function
(	O
S_UNTIL	int
,	O
0	int
)	O
;	O
else	O
if	O
(	O
strcmp	function
(	O
str	array
,	O
"value"	pointer
)	O
==	O
0	int
)	O
emit_sym	function
(	O
S_VALUE	int
,	O
0	int
)	O
;	O
else	O
if	O
(	O
strcmp	function
(	O
str	array
,	O
"while"	pointer
)	O
==	O
0	int
)	O
emit_sym	function
(	O
S_WHILE	int
,	O
0	int
)	O
;	O
else	O
error	function
(	O
"keyword `%s%s' not recognized"	pointer
,	O
str	array
,	O
len	int
<=	O
10	int
?	O
""	pointer
:	O
"..."	pointer
)	O
;	O
}	O
}	O
else	O
if	O
(	O
ch	int
==	O
'\"'	O
||	O
ch	int
==	O
'`'	O
)	O
{	O
int	O
quote	int
=	O
ch	int
==	O
'`'	O
?	O
'\''	O
:	O
'\"'	O
;	O
emit_sym	function
(	O
S_OPEN	int
,	O
0	int
)	O
,	O
get_char	function
(	O
)	O
;	O
for	O
(	O
;	O
;	O
)	O
{	O
if	O
(	O
ch	int
==	O
0x1A	int
||	O
ch	int
==	O
quote	int
)	O
break	O
;	O
else	O
if	O
(	O
iscntrl	function
(	O
ch	int
)	O
)	O
{	O
error	function
(	O
"invalid control character 0x%02X in string"	pointer
,	O
ch	int
)	O
;	O
emit_sym	function
(	O
S_CHAR	O
,	O
'?'	O
)	O
,	O
get_char	function
(	O
)	O
;	O
}	O
else	O
if	O
(	O
ch	int
==	O
'\\'	O
)	O
{	O
emit_sym	function
(	O
S_CHAR	O
,	O
'\\'	O
)	O
,	O
get_char	function
(	O
)	O
;	O
if	O
(	O
ch	int
==	O
0x1A	int
)	O
break	O
;	O
emit_sym	function
(	O
S_CHAR	O
,	O
ch	int
)	O
,	O
get_char	function
(	O
)	O
;	O
}	O
else	O
emit_sym	function
(	O
S_CHAR	O
,	O
ch	int
)	O
,	O
get_char	function
(	O
)	O
;	O
}	O
emit_sym	function
(	O
S_CLOSE	int
,	O
0	int
)	O
,	O
get_char	function
(	O
)	O
;	O
}	O
else	O
{	O
error	function
(	O
"character `%c' (0x%02X) not recognized"	pointer
,	O
ch	int
,	O
ch	int
)	O
;	O
emit_sym	function
(	O
S_CHAR	O
,	O
' '	O
)	O
,	O
get_char	function
(	O
)	O
;	O
}	O
return	O
;	O
}	O
static	O
int	O
status	int
=	O
0	int
;	O
static	O
int	O
last_char	int
=	O
0	int
;	O
static	O
int	O
cur_len	int
=	O
0	int
;	O
static	O
char	O
buffer	array
[	O
MAX_LEN	int
+	O
1	int
]	O
;	O
void	O
emit_str	function
(	O
char	O
*	O
str	array
)	O
{	O
assert	O
(	O
strlen	function
(	O
str	array
)	O
>	O
0	int
)	O
;	O
fprintf	function
(	O
outfile	pointer
,	O
"%s"	pointer
,	O
str	array
)	O
;	O
if	O
(	O
ferror	function
(	O
outfile	pointer
)	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Write error on `%s' - %s\n"	pointer
,	O
outfilename	pointer
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
last_char	int
=	O
(	O
unsigned	O
char	O
)	O
str	array
[	O
strlen	function
(	O
str	array
)	O
-	O
1	int
]	O
;	O
return	O
;	O
}	O
static	O
void	O
emit_sym	function
(	O
int	O
sym	int
,	O
int	O
c	int
)	O
{	O
static	O
char	O
*	O
word	array
[	O
]	O
=	O
{	O
"array"	pointer
,	O
"begin"	pointer
,	O
"Boolean"	pointer
,	O
"boolean"	pointer
,	O
"code"	pointer
,	O
"comment"	pointer
,	O
"do"	pointer
,	O
"else"	pointer
,	O
"end"	pointer
,	O
"false"	pointer
,	O
"for"	pointer
,	O
"go"	pointer
,	O
"goto"	pointer
,	O
"if"	pointer
,	O
"integer"	pointer
,	O
"label"	pointer
,	O
"own"	pointer
,	O
"procedure"	pointer
,	O
"real"	pointer
,	O
"step"	pointer
,	O
"string"	pointer
,	O
"switch"	pointer
,	O
"then"	pointer
,	O
"true"	pointer
,	O
"until"	pointer
,	O
"value"	pointer
,	O
"while"	pointer
,	O
NULL	O
}	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
{	O
if	O
(	O
!	O
(	O
sym	int
==	O
S_LETTER	int
||	O
sym	int
==	O
S_DIGIT	int
)	O
&&	O
cur_len	int
>	O
0	int
)	O
{	O
int	O
k	int
;	O
for	O
(	O
k	int
=	O
0	int
;	O
word	array
[	O
k	int
]	O
!=	O
NULL	O
;	O
k	int
++	O
)	O
if	O
(	O
strcmp	function
(	O
buffer	array
,	O
word	array
[	O
k	int
]	O
)	O
==	O
0	int
)	O
{	O
assert	O
(	O
cur_len	int
<	O
MAX_LEN	int
)	O
;	O
buffer	array
[	O
cur_len	int
+	O
1	int
]	O
=	O
'\0'	O
;	O
buffer	array
[	O
cur_len	int
]	O
=	O
buffer	array
[	O
cur_len	int
-	O
1	int
]	O
;	O
buffer	array
[	O
cur_len	int
-	O
1	int
]	O
=	O
' '	O
;	O
break	O
;	O
}	O
if	O
(	O
isalpha	function
(	O
last_char	int
)	O
)	O
emit_str	function
(	O
" "	pointer
)	O
;	O
emit_str	function
(	O
buffer	array
)	O
;	O
cur_len	int
=	O
0	int
;	O
buffer	array
[	O
0	int
]	O
=	O
'\0'	O
;	O
}	O
switch	O
(	O
sym	int
)	O
{	O
case	O
S_CHAR	O
:	O
assert	O
(	O
isspace	function
(	O
c	int
)	O
)	O
;	O
{	O
char	O
str	array
[	O
1	int
+	O
1	int
]	O
;	O
str	array
[	O
0	int
]	O
=	O
(	O
char	O
)	O
c	int
;	O
str	array
[	O
1	int
]	O
=	O
0	int
;	O
emit_str	function
(	O
str	array
)	O
;	O
}	O
break	O
;	O
case	O
S_EOF	int
:	O
if	O
(	O
last_char	int
!=	O
'\n'	O
)	O
emit_str	function
(	O
"\n"	pointer
)	O
;	O
break	O
;	O
case	O
S_LETTER	int
:	O
assert	O
(	O
isalpha	function
(	O
c	int
)	O
)	O
;	O
assert	O
(	O
cur_len	int
<	O
MAX_LEN	int
)	O
;	O
buffer	array
[	O
cur_len	int
++	O
]	O
=	O
(	O
char	O
)	O
c	int
,	O
buffer	array
[	O
cur_len	int
]	O
=	O
'\0'	O
;	O
break	O
;	O
case	O
S_DIGIT	int
:	O
assert	O
(	O
isdigit	function
(	O
c	int
)	O
)	O
;	O
assert	O
(	O
cur_len	int
<	O
MAX_LEN	int
)	O
;	O
buffer	array
[	O
cur_len	int
++	O
]	O
=	O
(	O
char	O
)	O
c	int
,	O
buffer	array
[	O
cur_len	int
]	O
=	O
'\0'	O
;	O
break	O
;	O
case	O
S_PLUS	int
:	O
emit_str	function
(	O
"+"	pointer
)	O
;	O
break	O
;	O
case	O
S_MINUS	int
:	O
emit_str	function
(	O
"-"	pointer
)	O
;	O
break	O
;	O
case	O
S_TIMES	int
:	O
if	O
(	O
last_char	int
==	O
'*'	O
)	O
emit_str	function
(	O
" "	pointer
)	O
;	O
emit_str	function
(	O
"*"	pointer
)	O
;	O
break	O
;	O
case	O
S_SLASH	int
:	O
emit_str	function
(	O
"/"	pointer
)	O
;	O
break	O
;	O
case	O
S_INTDIV	int
:	O
emit_str	function
(	O
"%"	pointer
)	O
;	O
break	O
;	O
case	O
S_POWER	int
:	O
emit_str	function
(	O
"^"	pointer
)	O
;	O
break	O
;	O
case	O
S_LESS	int
:	O
emit_str	function
(	O
"<"	pointer
)	O
;	O
break	O
;	O
case	O
S_NOTGREATER	int
:	O
emit_str	function
(	O
"<="	pointer
)	O
;	O
break	O
;	O
case	O
S_EQUAL	int
:	O
if	O
(	O
last_char	int
==	O
'<'	O
||	O
last_char	int
==	O
'>'	O
||	O
last_char	int
==	O
'!'	O
||	O
last_char	int
==	O
':'	O
)	O
emit_str	function
(	O
" "	pointer
)	O
;	O
emit_str	function
(	O
"="	pointer
)	O
;	O
break	O
;	O
case	O
S_NOTLESS	int
:	O
emit_str	function
(	O
">="	pointer
)	O
;	O
break	O
;	O
case	O
S_GREATER	int
:	O
if	O
(	O
last_char	int
==	O
'-'	O
)	O
emit_str	function
(	O
" "	pointer
)	O
;	O
emit_str	function
(	O
">"	pointer
)	O
;	O
break	O
;	O
case	O
S_NOTEQUAL	int
:	O
emit_str	function
(	O
"!="	pointer
)	O
;	O
break	O
;	O
case	O
S_EQUIV	int
:	O
emit_str	function
(	O
"=="	pointer
)	O
;	O
break	O
;	O
case	O
S_IMPL	int
:	O
emit_str	function
(	O
"->"	pointer
)	O
;	O
break	O
;	O
case	O
S_OR	int
:	O
emit_str	function
(	O
"|"	pointer
)	O
;	O
break	O
;	O
case	O
S_AND	int
:	O
emit_str	function
(	O
"&"	pointer
)	O
;	O
break	O
;	O
case	O
S_NOT	int
:	O
emit_str	function
(	O
"!"	pointer
)	O
;	O
break	O
;	O
case	O
S_COMMA	int
:	O
emit_str	function
(	O
","	pointer
)	O
;	O
break	O
;	O
case	O
S_POINT	int
:	O
emit_str	function
(	O
"."	pointer
)	O
;	O
break	O
;	O
case	O
S_TEN	int
:	O
emit_str	function
(	O
"#"	pointer
)	O
;	O
break	O
;	O
case	O
S_COLON	int
:	O
emit_str	function
(	O
":"	pointer
)	O
;	O
break	O
;	O
case	O
S_SEMICOLON	int
:	O
emit_str	function
(	O
";"	pointer
)	O
;	O
break	O
;	O
case	O
S_ASSIGN	int
:	O
emit_str	function
(	O
":="	pointer
)	O
;	O
break	O
;	O
case	O
S_LEFT	int
:	O
emit_str	function
(	O
"("	pointer
)	O
;	O
break	O
;	O
case	O
S_RIGHT	int
:	O
emit_str	function
(	O
")"	pointer
)	O
;	O
break	O
;	O
case	O
S_BEGSUB	int
:	O
emit_str	function
(	O
"["	pointer
)	O
;	O
break	O
;	O
case	O
S_ENDSUB	int
:	O
emit_str	function
(	O
"]"	pointer
)	O
;	O
break	O
;	O
case	O
S_OPEN	int
:	O
if	O
(	O
last_char	int
==	O
'\"'	O
)	O
emit_str	function
(	O
" "	pointer
)	O
;	O
emit_str	function
(	O
"\""	pointer
)	O
;	O
status	int
=	O
2	int
;	O
break	O
;	O
case	O
S_CLOSE	int
:	O
assert	O
(	O
sym	int
!=	O
sym	int
)	O
;	O
case	O
S_ARRAY	int
:	O
if	O
(	O
isalnum	function
(	O
last_char	int
)	O
)	O
emit_str	function
(	O
" "	pointer
)	O
;	O
emit_str	function
(	O
"array"	pointer
)	O
;	O
break	O
;	O
case	O
S_BEGIN	int
:	O
if	O
(	O
isalnum	function
(	O
last_char	int
)	O
)	O
emit_str	function
(	O
" "	pointer
)	O
;	O
emit_str	function
(	O
"begin"	pointer
)	O
;	O
break	O
;	O
case	O
S_BOOLEAN	int
:	O
if	O
(	O
isalnum	function
(	O
last_char	int
)	O
)	O
emit_str	function
(	O
" "	pointer
)	O
;	O
emit_str	function
(	O
"Boolean"	pointer
)	O
;	O
break	O
;	O
case	O
S_CODE	int
:	O
if	O
(	O
isalnum	function
(	O
last_char	int
)	O
)	O
emit_str	function
(	O
" "	pointer
)	O
;	O
emit_str	function
(	O
"code"	pointer
)	O
;	O
break	O
;	O
case	O
S_COMMENT	int
:	O
if	O
(	O
isalnum	function
(	O
last_char	int
)	O
)	O
emit_str	function
(	O
" "	pointer
)	O
;	O
emit_str	function
(	O
"comment"	pointer
)	O
;	O
status	int
=	O
1	int
;	O
break	O
;	O
case	O
S_DO	int
:	O
if	O
(	O
isalnum	function
(	O
last_char	int
)	O
)	O
emit_str	function
(	O
" "	pointer
)	O
;	O
emit_str	function
(	O
"do"	pointer
)	O
;	O
break	O
;	O
case	O
S_ELSE	int
:	O
if	O
(	O
isalnum	function
(	O
last_char	int
)	O
)	O
emit_str	function
(	O
" "	pointer
)	O
;	O
emit_str	function
(	O
"else"	pointer
)	O
;	O
break	O
;	O
case	O
S_END	int
:	O
if	O
(	O
isalnum	function
(	O
last_char	int
)	O
)	O
emit_str	function
(	O
" "	pointer
)	O
;	O
emit_str	function
(	O
"end"	pointer
)	O
;	O
break	O
;	O
case	O
S_FALSE	int
:	O
if	O
(	O
isalnum	function
(	O
last_char	int
)	O
)	O
emit_str	function
(	O
" "	pointer
)	O
;	O
emit_str	function
(	O
"false"	pointer
)	O
;	O
break	O
;	O
case	O
S_FOR	int
:	O
if	O
(	O
isalnum	function
(	O
last_char	int
)	O
)	O
emit_str	function
(	O
" "	pointer
)	O
;	O
emit_str	function
(	O
"for"	pointer
)	O
;	O
break	O
;	O
case	O
S_GOTO	int
:	O
if	O
(	O
isalnum	function
(	O
last_char	int
)	O
)	O
emit_str	function
(	O
" "	pointer
)	O
;	O
emit_str	function
(	O
"go to"	pointer
)	O
;	O
break	O
;	O
case	O
S_IF	int
:	O
if	O
(	O
isalnum	function
(	O
last_char	int
)	O
)	O
emit_str	function
(	O
" "	pointer
)	O
;	O
emit_str	function
(	O
"if"	pointer
)	O
;	O
break	O
;	O
case	O
S_INTEGER	int
:	O
if	O
(	O
isalnum	function
(	O
last_char	int
)	O
)	O
emit_str	function
(	O
" "	pointer
)	O
;	O
emit_str	function
(	O
"integer"	pointer
)	O
;	O
break	O
;	O
case	O
S_LABEL	int
:	O
if	O
(	O
isalnum	function
(	O
last_char	int
)	O
)	O
emit_str	function
(	O
" "	pointer
)	O
;	O
emit_str	function
(	O
"label"	pointer
)	O
;	O
break	O
;	O
case	O
S_OWN	int
:	O
if	O
(	O
isalnum	function
(	O
last_char	int
)	O
)	O
emit_str	function
(	O
" "	pointer
)	O
;	O
emit_str	function
(	O
"own"	pointer
)	O
;	O
break	O
;	O
case	O
S_PROCEDURE	int
:	O
if	O
(	O
isalnum	function
(	O
last_char	int
)	O
)	O
emit_str	function
(	O
" "	pointer
)	O
;	O
emit_str	function
(	O
"procedure"	pointer
)	O
;	O
break	O
;	O
case	O
S_REAL	int
:	O
if	O
(	O
isalnum	function
(	O
last_char	int
)	O
)	O
emit_str	function
(	O
" "	pointer
)	O
;	O
emit_str	function
(	O
"real"	pointer
)	O
;	O
break	O
;	O
case	O
S_STEP	int
:	O
if	O
(	O
isalnum	function
(	O
last_char	int
)	O
)	O
emit_str	function
(	O
" "	pointer
)	O
;	O
emit_str	function
(	O
"step"	pointer
)	O
;	O
break	O
;	O
case	O
S_STRING	int
:	O
if	O
(	O
isalnum	function
(	O
last_char	int
)	O
)	O
emit_str	function
(	O
" "	pointer
)	O
;	O
emit_str	function
(	O
"string"	pointer
)	O
;	O
break	O
;	O
case	O
S_SWITCH	int
:	O
if	O
(	O
isalnum	function
(	O
last_char	int
)	O
)	O
emit_str	function
(	O
" "	pointer
)	O
;	O
emit_str	function
(	O
"switch"	pointer
)	O
;	O
break	O
;	O
case	O
S_THEN	int
:	O
if	O
(	O
isalnum	function
(	O
last_char	int
)	O
)	O
emit_str	function
(	O
" "	pointer
)	O
;	O
emit_str	function
(	O
"then"	pointer
)	O
;	O
break	O
;	O
case	O
S_TRUE	int
:	O
if	O
(	O
isalnum	function
(	O
last_char	int
)	O
)	O
emit_str	function
(	O
" "	pointer
)	O
;	O
emit_str	function
(	O
"true"	pointer
)	O
;	O
break	O
;	O
case	O
S_UNTIL	int
:	O
if	O
(	O
isalnum	function
(	O
last_char	int
)	O
)	O
emit_str	function
(	O
" "	pointer
)	O
;	O
emit_str	function
(	O
"until"	pointer
)	O
;	O
break	O
;	O
case	O
S_VALUE	int
:	O
if	O
(	O
isalnum	function
(	O
last_char	int
)	O
)	O
emit_str	function
(	O
" "	pointer
)	O
;	O
emit_str	function
(	O
"value"	pointer
)	O
;	O
break	O
;	O
case	O
S_WHILE	int
:	O
if	O
(	O
isalnum	function
(	O
last_char	int
)	O
)	O
emit_str	function
(	O
" "	pointer
)	O
;	O
emit_str	function
(	O
"while"	pointer
)	O
;	O
break	O
;	O
default	O
:	O
assert	O
(	O
sym	int
!=	O
sym	int
)	O
;	O
}	O
}	O
else	O
if	O
(	O
status	int
==	O
1	int
)	O
{	O
switch	O
(	O
sym	int
)	O
{	O
case	O
S_CHAR	O
:	O
assert	O
(	O
c	int
!=	O
';'	O
)	O
;	O
{	O
char	O
str	array
[	O
1	int
+	O
1	int
]	O
;	O
str	array
[	O
0	int
]	O
=	O
(	O
char	O
)	O
c	int
;	O
str	array
[	O
1	int
]	O
=	O
0	int
;	O
emit_str	function
(	O
str	array
)	O
;	O
}	O
break	O
;	O
case	O
S_SEMICOLON	int
:	O
emit_str	function
(	O
";"	pointer
)	O
;	O
status	int
=	O
0	int
;	O
break	O
;	O
default	O
:	O
assert	O
(	O
sym	int
!=	O
sym	int
)	O
;	O
}	O
}	O
else	O
if	O
(	O
status	int
==	O
2	int
)	O
{	O
switch	O
(	O
sym	int
)	O
{	O
case	O
S_CHAR	O
:	O
{	O
char	O
str	array
[	O
1	int
+	O
1	int
]	O
;	O
str	array
[	O
0	int
]	O
=	O
(	O
char	O
)	O
c	int
;	O
str	array
[	O
1	int
]	O
=	O
0	int
;	O
emit_str	function
(	O
str	array
)	O
;	O
}	O
break	O
;	O
case	O
S_CLOSE	int
:	O
emit_str	function
(	O
"\""	pointer
)	O
;	O
status	int
=	O
0	int
;	O
break	O
;	O
default	O
:	O
assert	O
(	O
sym	int
!=	O
sym	int
)	O
;	O
}	O
}	O
else	O
assert	O
(	O
status	int
!=	O
status	int
)	O
;	O
return	O
;	O
}	O
static	O
void	O
display_help	function
(	O
char	O
*	O
my_name	pointer
)	O
{	O
printf	function
(	O
"Usage: %s [options...] [filename]\n"	pointer
,	O
my_name	pointer
)	O
;	O
printf	function
(	O
"\n"	pointer
)	O
;	O
printf	function
(	O
"Options:\n"	pointer
)	O
;	O
printf	function
(	O
"   -c, --classic        classic representation used (defa"	pointer
"ult)\n"	pointer
)	O
;	O
printf	function
(	O
"   -f, --free-coding    free representation used (excludi"	pointer
"ng operators)\n"	pointer
)	O
;	O
printf	function
(	O
"   -h, --help           display this help information and"	pointer
" exit(0)\n"	pointer
)	O
;	O
printf	function
(	O
"   -i, --ignore-case    convert to lower case\n"	pointer
)	O
;	O
printf	function
(	O
"   -m, --more-free      free representation used (includi"	pointer
"ng operators)\n"	pointer
)	O
;	O
printf	function
(	O
"   -o filename, --output filename\n"	pointer
)	O
;	O
printf	function
(	O
"                        send converted Algol 60 program t"	pointer
"o filename\n"	pointer
)	O
;	O
printf	function
(	O
"   -s, --old-sc         recognize ., as semicolon\n"	pointer
)	O
;	O
printf	function
(	O
"   -t, --old-ten        recognize single apostrophe as te"	pointer
"n symbol\n"	pointer
)	O
;	O
printf	function
(	O
"   -v, --version        display converter version and exi"	pointer
"t(0)\n"	pointer
)	O
;	O
printf	function
(	O
"\n"	pointer
)	O
;	O
printf	function
(	O
"Please, report bugs to <bug-marst@gnu.org>\n"	pointer
)	O
;	O
exit	function
(	O
EXIT_SUCCESS	int
)	O
;	O
}	O
static	O
void	O
display_version	function
(	O
void	O
)	O
{	O
printf	function
(	O
"%s\n"	pointer
,	O
version	pointer
)	O
;	O
printf	function
(	O
"Copyright (C) 2000, 2001, 2002, 2007, 2013 Free Software "	pointer
"Foundation, Inc.\n"	pointer
)	O
;	O
printf	function
(	O
"This program is free software; you may redistribute it un"	pointer
"der the terms of\n"	pointer
)	O
;	O
printf	function
(	O
"the GNU General Public License. This program has absolute"	pointer
"ly no warranty.\n"	pointer
)	O
;	O
exit	function
(	O
EXIT_SUCCESS	int
)	O
;	O
}	O
static	O
void	O
process_cmdline	function
(	O
int	O
argc	int
,	O
char	O
*	O
argv	array
[	O
]	O
)	O
{	O
int	O
k	int
;	O
for	O
(	O
k	int
=	O
1	int
;	O
k	int
<	O
argc	int
;	O
k	int
++	O
)	O
{	O
if	O
(	O
strcmp	function
(	O
argv	array
[	O
k	int
]	O
,	O
"-c"	pointer
)	O
==	O
0	int
||	O
strcmp	function
(	O
argv	array
[	O
k	int
]	O
,	O
"--classic"	pointer
)	O
==	O
0	int
)	O
free_coding	int
=	O
0	int
,	O
more_free	int
=	O
0	int
;	O
else	O
if	O
(	O
strcmp	function
(	O
argv	array
[	O
k	int
]	O
,	O
"-f"	pointer
)	O
==	O
0	int
||	O
strcmp	function
(	O
argv	array
[	O
k	int
]	O
,	O
"--free-coding"	pointer
)	O
==	O
0	int
)	O
free_coding	int
=	O
1	int
,	O
more_free	int
=	O
0	int
;	O
else	O
if	O
(	O
strcmp	function
(	O
argv	array
[	O
k	int
]	O
,	O
"-h"	pointer
)	O
==	O
0	int
||	O
strcmp	function
(	O
argv	array
[	O
k	int
]	O
,	O
"--help"	pointer
)	O
==	O
0	int
)	O
display_help	function
(	O
argv	array
[	O
0	int
]	O
)	O
;	O
else	O
if	O
(	O
strcmp	function
(	O
argv	array
[	O
k	int
]	O
,	O
"-i"	pointer
)	O
==	O
0	int
||	O
strcmp	function
(	O
argv	array
[	O
k	int
]	O
,	O
"--ignore-case"	pointer
)	O
==	O
0	int
)	O
ignore_case	int
=	O
1	int
;	O
else	O
if	O
(	O
strcmp	function
(	O
argv	array
[	O
k	int
]	O
,	O
"-m"	pointer
)	O
==	O
0	int
||	O
strcmp	function
(	O
argv	array
[	O
k	int
]	O
,	O
"--more-free"	pointer
)	O
==	O
0	int
)	O
free_coding	int
=	O
1	int
,	O
more_free	int
=	O
1	int
;	O
else	O
if	O
(	O
strcmp	function
(	O
argv	array
[	O
k	int
]	O
,	O
"-o"	pointer
)	O
==	O
0	int
||	O
strcmp	function
(	O
argv	array
[	O
k	int
]	O
,	O
"--output"	pointer
)	O
==	O
0	int
)	O
{	O
k	int
++	O
;	O
if	O
(	O
k	int
==	O
argc	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"No output file name specified\n"	pointer
)	O
;	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
if	O
(	O
outfilename	pointer
[	O
0	int
]	O
!=	O
'\0'	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Only one output file allowed\n"	pointer
)	O
;	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
outfilename	pointer
=	O
argv	array
[	O
k	int
]	O
;	O
}	O
else	O
if	O
(	O
strcmp	function
(	O
argv	array
[	O
k	int
]	O
,	O
"-s"	pointer
)	O
==	O
0	int
||	O
strcmp	function
(	O
argv	array
[	O
k	int
]	O
,	O
"--old-sc"	pointer
)	O
==	O
0	int
)	O
old_sc	int
=	O
1	int
;	O
else	O
if	O
(	O
strcmp	function
(	O
argv	array
[	O
k	int
]	O
,	O
"-t"	pointer
)	O
==	O
0	int
||	O
strcmp	function
(	O
argv	array
[	O
k	int
]	O
,	O
"--old-ten"	pointer
)	O
==	O
0	int
)	O
old_ten	int
=	O
1	int
;	O
else	O
if	O
(	O
strcmp	function
(	O
argv	array
[	O
k	int
]	O
,	O
"-v"	pointer
)	O
==	O
0	int
||	O
strcmp	function
(	O
argv	array
[	O
k	int
]	O
,	O
"--version"	pointer
)	O
==	O
0	int
)	O
display_version	function
(	O
)	O
;	O
else	O
if	O
(	O
argv	array
[	O
k	int
]	O
[	O
0	int
]	O
==	O
'-'	O
||	O
(	O
argv	array
[	O
k	int
]	O
[	O
0	int
]	O
==	O
'-'	O
&&	O
argv	array
[	O
k	int
]	O
[	O
1	int
]	O
==	O
'-'	O
)	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Invalid option `%s'; try %s --help\n"	pointer
,	O
argv	array
[	O
k	int
]	O
,	O
argv	array
[	O
0	int
]	O
)	O
;	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
else	O
{	O
if	O
(	O
infilename	pointer
[	O
0	int
]	O
!=	O
'\0'	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Only one input file allowed\n"	pointer
)	O
;	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
infilename	pointer
=	O
argv	array
[	O
k	int
]	O
;	O
}	O
}	O
return	O
;	O
}	O
int	O
main	function
(	O
int	O
argc	int
,	O
char	O
*	O
argv	array
[	O
]	O
)	O
{	O
process_cmdline	function
(	O
argc	int
,	O
argv	array
)	O
;	O
if	O
(	O
infilename	pointer
[	O
0	int
]	O
==	O
'\0'	O
)	O
{	O
infilename	pointer
=	O
"(stdin)"	pointer
;	O
infile	pointer
=	O
stdin	pointer
;	O
}	O
else	O
{	O
infile	pointer
=	O
fopen	function
(	O
infilename	pointer
,	O
"r"	pointer
)	O
;	O
if	O
(	O
infile	pointer
==	O
NULL	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Unable to open input file `%s' - %s\n"	pointer
,	O
infilename	pointer
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
}	O
if	O
(	O
outfilename	pointer
[	O
0	int
]	O
==	O
'\0'	O
)	O
{	O
outfilename	pointer
=	O
"(stdout)"	pointer
;	O
outfile	pointer
=	O
stdout	pointer
;	O
}	O
else	O
{	O
outfile	pointer
=	O
fopen	function
(	O
outfilename	pointer
,	O
"w"	pointer
)	O
;	O
if	O
(	O
outfile	pointer
==	O
NULL	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Unable to open output file `%s' - %s\n"	pointer
,	O
outfilename	pointer
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
}	O
convert	function
(	O
)	O
;	O
fclose	function
(	O
infile	pointer
)	O
;	O
fclose	function
(	O
outfile	pointer
)	O
;	O
return	O
e_count	int
==	O
0	int
?	O
EXIT_SUCCESS	int
:	O
EXIT_FAILURE	int
;	O
}	O
