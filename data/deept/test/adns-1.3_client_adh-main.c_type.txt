int	O
rcode	int
;	O
const	O
char	O
*	O
config_text	pointer
;	O
static	O
int	O
used	int
,	O
avail	int
;	O
static	O
char	O
*	O
buf	pointer
;	O
void	O
quitnow	function
(	O
int	O
rc	int
)	O
{	O
if	O
(	O
ads	pointer
)	O
adns_finish	function
(	O
ads	pointer
)	O
;	O
free	function
(	O
buf	pointer
)	O
;	O
free	function
(	O
ov_id	pointer
)	O
;	O
exit	function
(	O
rc	int
)	O
;	O
}	O
void	O
sysfail	function
(	O
const	O
char	O
*	O
what	pointer
,	O
int	O
errnoval	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"adnshost failed: %s: %s\n"	pointer
,	O
what	pointer
,	O
strerror	function
(	O
errnoval	int
)	O
)	O
;	O
quitnow	function
(	O
10	int
)	O
;	O
}	O
void	O
usageerr	function
(	O
const	O
char	O
*	O
fmt	pointer
,	O
...	O
)	O
{	O
va_list	array
al	array
;	O
fputs	function
(	O
"adnshost usage error: "	pointer
,	O
stderr	pointer
)	O
;	O
va_start	O
(	O
al	array
,	O
fmt	pointer
)	O
;	O
vfprintf	function
(	O
stderr	pointer
,	O
fmt	pointer
,	O
al	array
)	O
;	O
va_end	O
(	O
al	array
)	O
;	O
putc	function
(	O
'\n'	O
,	O
stderr	pointer
)	O
;	O
quitnow	function
(	O
11	int
)	O
;	O
}	O
void	O
outerr	function
(	O
void	O
)	O
{	O
sysfail	function
(	O
"write to stdout"	pointer
,	O
errno	O
)	O
;	O
}	O
void	O
*	O
xmalloc	function
(	O
size_t	long
sz	long
)	O
{	O
void	O
*	O
p	pointer
;	O
p	pointer
=	O
malloc	function
(	O
sz	long
)	O
;	O
if	O
(	O
!	O
p	pointer
)	O
sysfail	function
(	O
"malloc"	pointer
,	O
sz	long
)	O
;	O
return	O
p	pointer
;	O
}	O
char	O
*	O
xstrsave	function
(	O
const	O
char	O
*	O
str	pointer
)	O
{	O
char	O
*	O
p	pointer
;	O
p	pointer
=	O
xmalloc	function
(	O
strlen	function
(	O
str	pointer
)	O
+	O
1	int
)	O
;	O
strcpy	function
(	O
p	pointer
,	O
str	pointer
)	O
;	O
return	O
p	pointer
;	O
}	O
void	O
of_config	function
(	O
const	O
struct	O
optioninfo	struct
*	O
oi	pointer
,	O
const	O
char	O
*	O
arg	pointer
,	O
const	O
char	O
*	O
arg2	pointer
)	O
{	O
config_text	pointer
=	O
arg	pointer
;	O
}	O
void	O
of_type	function
(	O
const	O
struct	O
optioninfo	struct
*	O
oi	pointer
,	O
const	O
char	O
*	O
arg	pointer
,	O
const	O
char	O
*	O
arg2	pointer
)	O
{	O
static	O
const	O
struct	O
typename	struct
{	O
adns_rrtype	enum
type	enum
;	O
const	O
char	O
*	O
desc	pointer
;	O
}	O
typenames	array
[	O
]	O
=	O
{	O
{	O
adns_r_ns	int
,	O
"ns"	pointer
}	O
,	O
{	O
adns_r_soa	int
,	O
"soa"	pointer
}	O
,	O
{	O
adns_r_ptr	int
,	O
"ptr"	pointer
}	O
,	O
{	O
adns_r_mx	int
,	O
"mx"	pointer
}	O
,	O
{	O
adns_r_rp	int
,	O
"rp"	pointer
}	O
,	O
{	O
adns_r_srv	int
,	O
"srv"	pointer
}	O
,	O
{	O
adns_r_addr	int
,	O
"addr"	pointer
}	O
,	O
{	O
adns_r_cname	int
,	O
"cname"	pointer
}	O
,	O
{	O
adns_r_hinfo	int
,	O
"hinfo"	pointer
}	O
,	O
{	O
adns_r_txt	int
,	O
"txt"	pointer
}	O
,	O
{	O
adns_r_a	int
,	O
"a"	pointer
}	O
,	O
{	O
adns_r_ns_raw	int
,	O
"ns-"	pointer
}	O
,	O
{	O
adns_r_soa_raw	int
,	O
"soa-"	pointer
}	O
,	O
{	O
adns_r_ptr_raw	int
,	O
"ptr-"	pointer
}	O
,	O
{	O
adns_r_mx_raw	int
,	O
"mx-"	pointer
}	O
,	O
{	O
adns_r_rp_raw	int
,	O
"rp-"	pointer
}	O
,	O
{	O
adns_r_srv_raw	int
,	O
"srv-"	pointer
}	O
,	O
{	O
adns_r_none	int
,	O
0	int
}	O
}	O
;	O
const	O
struct	O
typename	struct
*	O
tnp	pointer
;	O
unsigned	O
long	O
unknowntype	long
;	O
char	O
*	O
ep	pointer
;	O
if	O
(	O
strlen	function
(	O
arg	pointer
)	O
>	O
4	int
&&	O
!	O
memcmp	function
(	O
arg	pointer
,	O
"type"	pointer
,	O
4	int
)	O
&&	O
(	O
unknowntype	long
=	O
strtoul	function
(	O
arg	pointer
+	O
4	int
,	O
&	O
ep	pointer
,	O
10	int
)	O
,	O
!	O
*	O
ep	pointer
)	O
&&	O
unknowntype	long
<	O
65536	int
)	O
{	O
ov_type	enum
=	O
unknowntype	long
|	O
adns_r_unknown	int
;	O
return	O
;	O
}	O
for	O
(	O
tnp	pointer
=	O
typenames	array
;	O
tnp	pointer
->	O
type	enum
&&	O
strcmp	function
(	O
arg	pointer
,	O
tnp	pointer
->	O
desc	pointer
)	O
;	O
tnp	pointer
++	O
)	O
;	O
if	O
(	O
!	O
tnp	pointer
->	O
type	enum
)	O
usageerr	function
(	O
"unknown RR type %s"	pointer
,	O
arg	pointer
)	O
;	O
ov_type	enum
=	O
tnp	pointer
->	O
type	enum
;	O
}	O
static	O
void	O
process_optarg	function
(	O
const	O
char	O
*	O
arg	pointer
,	O
const	O
char	O
*	O
const	O
*	O
*	O
argv_p	pointer
,	O
const	O
char	O
*	O
value	int
)	O
{	O
const	O
struct	O
optioninfo	struct
*	O
oip	pointer
;	O
const	O
char	O
*	O
arg2	pointer
;	O
int	O
invert	int
;	O
if	O
(	O
arg	pointer
[	O
0	int
]	O
==	O
'-'	O
||	O
arg	pointer
[	O
0	int
]	O
==	O
'+'	O
)	O
{	O
if	O
(	O
arg	pointer
[	O
0	int
]	O
==	O
'-'	O
&&	O
arg	pointer
[	O
1	int
]	O
==	O
'-'	O
)	O
{	O
if	O
(	O
!	O
strncmp	function
(	O
arg	pointer
,	O
"--no-"	pointer
,	O
5	int
)	O
)	O
{	O
invert	int
=	O
1	int
;	O
oip	pointer
=	O
opt_findl	function
(	O
arg	pointer
+	O
5	int
)	O
;	O
}	O
else	O
{	O
invert	int
=	O
0	int
;	O
oip	pointer
=	O
opt_findl	function
(	O
arg	pointer
+	O
2	int
)	O
;	O
}	O
if	O
(	O
oip	pointer
->	O
type	enum
==	O
ot_funcarg	int
)	O
{	O
arg	pointer
=	O
argv_p	pointer
?	O
*	O
++	O
(	O
*	O
argv_p	pointer
)	O
:	O
value	int
;	O
if	O
(	O
!	O
arg	pointer
)	O
usageerr	function
(	O
"option --%s requires a value argument"	pointer
,	O
oip	pointer
->	O
lopt	pointer
)	O
;	O
arg2	pointer
=	O
0	int
;	O
}	O
else	O
if	O
(	O
oip	pointer
->	O
type	enum
==	O
ot_funcarg2	int
)	O
{	O
assert	O
(	O
argv_p	pointer
)	O
;	O
arg	pointer
=	O
*	O
++	O
(	O
*	O
argv_p	pointer
)	O
;	O
arg2	pointer
=	O
arg	pointer
?	O
*	O
++	O
(	O
*	O
argv_p	pointer
)	O
:	O
0	int
;	O
if	O
(	O
!	O
arg	pointer
||	O
!	O
arg2	pointer
)	O
usageerr	function
(	O
"option --%s requires two more arguments"	pointer
,	O
oip	pointer
->	O
lopt	pointer
)	O
;	O
}	O
else	O
{	O
if	O
(	O
value	int
)	O
usageerr	function
(	O
"option --%s does not take a value"	pointer
,	O
oip	pointer
->	O
lopt	pointer
)	O
;	O
arg	pointer
=	O
0	int
;	O
arg2	pointer
=	O
0	int
;	O
}	O
opt_do	function
(	O
oip	pointer
,	O
invert	int
,	O
arg	pointer
,	O
arg2	pointer
)	O
;	O
}	O
else	O
if	O
(	O
arg	pointer
[	O
0	int
]	O
==	O
'-'	O
&&	O
arg	pointer
[	O
1	int
]	O
==	O
0	int
)	O
{	O
arg	pointer
=	O
argv_p	pointer
?	O
*	O
++	O
(	O
*	O
argv_p	pointer
)	O
:	O
value	int
;	O
if	O
(	O
!	O
arg	pointer
)	O
usageerr	function
(	O
"option `-' must be followed by a domain"	pointer
)	O
;	O
query_do	function
(	O
arg	pointer
)	O
;	O
}	O
else	O
{	O
invert	int
=	O
(	O
arg	pointer
[	O
0	int
]	O
==	O
'+'	O
)	O
;	O
++	O
arg	pointer
;	O
while	O
(	O
*	O
arg	pointer
)	O
{	O
oip	pointer
=	O
opt_finds	function
(	O
&	O
arg	pointer
)	O
;	O
if	O
(	O
oip	pointer
->	O
type	enum
==	O
ot_funcarg	int
)	O
{	O
if	O
(	O
!	O
*	O
arg	pointer
)	O
{	O
arg	pointer
=	O
argv_p	pointer
?	O
*	O
++	O
(	O
*	O
argv_p	pointer
)	O
:	O
value	int
;	O
if	O
(	O
!	O
arg	pointer
)	O
usageerr	function
(	O
"option -%s requires a value argument"	pointer
,	O
oip	pointer
->	O
sopt	pointer
)	O
;	O
}	O
else	O
{	O
if	O
(	O
value	int
)	O
usageerr	function
(	O
"two values for option -%s given !"	pointer
,	O
oip	pointer
->	O
sopt	pointer
)	O
;	O
}	O
opt_do	function
(	O
oip	pointer
,	O
invert	int
,	O
arg	pointer
,	O
0	int
)	O
;	O
arg	pointer
=	O
""	pointer
;	O
}	O
else	O
{	O
if	O
(	O
value	int
)	O
usageerr	function
(	O
"option -%s does not take a value"	pointer
,	O
oip	pointer
->	O
sopt	pointer
)	O
;	O
opt_do	function
(	O
oip	pointer
,	O
invert	int
,	O
0	int
,	O
0	int
)	O
;	O
}	O
}	O
}	O
}	O
else	O
{	O
query_do	function
(	O
arg	pointer
)	O
;	O
}	O
}	O
static	O
void	O
read_stdin	function
(	O
void	O
)	O
{	O
int	O
anydone	int
,	O
r	int
;	O
char	O
*	O
newline	pointer
,	O
*	O
space	pointer
;	O
anydone	int
=	O
0	int
;	O
while	O
(	O
!	O
anydone	int
||	O
used	int
)	O
{	O
while	O
(	O
!	O
(	O
newline	pointer
=	O
memchr	function
(	O
buf	pointer
,	O
'\n'	O
,	O
used	int
)	O
)	O
)	O
{	O
if	O
(	O
used	int
==	O
avail	int
)	O
{	O
avail	int
+=	O
20	int
;	O
avail	int
<<=	O
1	int
;	O
buf	pointer
=	O
realloc	function
(	O
buf	pointer
,	O
avail	int
)	O
;	O
if	O
(	O
!	O
buf	pointer
)	O
sysfail	function
(	O
"realloc stdin buffer"	pointer
,	O
errno	O
)	O
;	O
}	O
do	O
{	O
r	int
=	O
read	function
(	O
0	int
,	O
buf	pointer
+	O
used	int
,	O
avail	int
-	O
used	int
)	O
;	O
}	O
while	O
(	O
r	int
<	O
0	int
&&	O
errno	O
==	O
EINTR	int
)	O
;	O
if	O
(	O
r	int
==	O
0	int
)	O
{	O
if	O
(	O
used	int
)	O
{	O
buf	pointer
[	O
used	int
++	O
]	O
=	O
'\n'	O
;	O
r	int
=	O
1	int
;	O
}	O
else	O
{	O
ov_pipe	int
=	O
0	int
;	O
return	O
;	O
}	O
}	O
if	O
(	O
r	int
<	O
0	int
)	O
sysfail	function
(	O
"read stdin"	pointer
,	O
errno	O
)	O
;	O
used	int
+=	O
r	int
;	O
}	O
*	O
newline	pointer
++	O
=	O
0	int
;	O
space	pointer
=	O
strchr	function
(	O
buf	pointer
,	O
' '	O
)	O
;	O
if	O
(	O
space	pointer
)	O
*	O
space	pointer
++	O
=	O
0	int
;	O
process_optarg	function
(	O
buf	pointer
,	O
0	int
,	O
space	pointer
)	O
;	O
used	int
-=	O
(	O
newline	pointer
-	O
buf	pointer
)	O
;	O
memmove	function
(	O
buf	pointer
,	O
newline	pointer
,	O
used	int
)	O
;	O
anydone	int
=	O
1	int
;	O
}	O
}	O
int	O
main	function
(	O
int	O
argc	int
,	O
const	O
char	O
*	O
const	O
*	O
argv	pointer
)	O
{	O
struct	O
timeval	struct
*	O
tv	pointer
,	O
tvbuf	struct
;	O
adns_query	pointer
qu	pointer
;	O
void	O
*	O
qun_v	pointer
;	O
adns_answer	struct
*	O
answer	pointer
;	O
int	O
r	int
,	O
maxfd	pointer
;	O
fd_set	struct
readfds	pointer
,	O
writefds	pointer
,	O
exceptfds	pointer
;	O
const	O
char	O
*	O
arg	pointer
;	O
while	O
(	O
(	O
arg	pointer
=	O
*	O
++	O
argv	pointer
)	O
)	O
process_optarg	function
(	O
arg	pointer
,	O
&	O
argv	pointer
,	O
0	int
)	O
;	O
if	O
(	O
!	O
ov_pipe	int
&&	O
!	O
ads	pointer
)	O
usageerr	function
(	O
"no domains given, and -f/--pipe not used; try --help"	pointer
)	O
;	O
ensure_adns_init	function
(	O
)	O
;	O
for	O
(	O
;	O
;	O
)	O
{	O
for	O
(	O
;	O
;	O
)	O
{	O
qu	pointer
=	O
ov_asynch	int
?	O
0	int
:	O
outstanding	struct
.	O
head	pointer
?	O
outstanding	struct
.	O
head	pointer
->	O
qu	pointer
:	O
0	int
;	O
r	int
=	O
adns_check	function
(	O
ads	pointer
,	O
&	O
qu	pointer
,	O
&	O
answer	pointer
,	O
&	O
qun_v	pointer
)	O
;	O
if	O
(	O
r	int
==	O
EAGAIN	int
)	O
break	O
;	O
if	O
(	O
r	int
==	O
ESRCH	int
)	O
{	O
if	O
(	O
!	O
ov_pipe	int
)	O
goto	O
x_quit	O
;	O
else	O
break	O
;	O
}	O
assert	O
(	O
!	O
r	int
)	O
;	O
query_done	function
(	O
qun_v	pointer
,	O
answer	pointer
)	O
;	O
}	O
maxfd	pointer
=	O
0	int
;	O
FD_ZERO	O
(	O
&	O
readfds	pointer
)	O
;	O
FD_ZERO	O
(	O
&	O
writefds	pointer
)	O
;	O
FD_ZERO	O
(	O
&	O
exceptfds	pointer
)	O
;	O
if	O
(	O
ov_pipe	int
)	O
{	O
maxfd	pointer
=	O
1	int
;	O
FD_SET	O
(	O
0	int
,	O
&	O
readfds	pointer
)	O
;	O
}	O
tv	pointer
=	O
0	int
;	O
adns_beforeselect	function
(	O
ads	pointer
,	O
&	O
maxfd	pointer
,	O
&	O
readfds	pointer
,	O
&	O
writefds	pointer
,	O
&	O
exceptfds	pointer
,	O
&	O
tv	pointer
,	O
&	O
tvbuf	struct
,	O
0	int
)	O
;	O
r	int
=	O
select	function
(	O
maxfd	pointer
,	O
&	O
readfds	pointer
,	O
&	O
writefds	pointer
,	O
&	O
exceptfds	pointer
,	O
tv	pointer
)	O
;	O
if	O
(	O
r	int
==	O
-	O
1	int
)	O
{	O
if	O
(	O
errno	O
==	O
EINTR	int
)	O
continue	O
;	O
sysfail	function
(	O
"select"	pointer
,	O
errno	O
)	O
;	O
}	O
adns_afterselect	function
(	O
ads	pointer
,	O
maxfd	pointer
,	O
&	O
readfds	pointer
,	O
&	O
writefds	pointer
,	O
&	O
exceptfds	pointer
,	O
0	int
)	O
;	O
if	O
(	O
ov_pipe	int
&&	O
FD_ISSET	O
(	O
0	int
,	O
&	O
readfds	pointer
)	O
)	O
read_stdin	function
(	O
)	O
;	O
}	O
x_quit	O
:	O
if	O
(	O
fclose	function
(	O
stdout	pointer
)	O
)	O
outerr	function
(	O
)	O
;	O
quitnow	function
(	O
rcode	int
)	O
;	O
}	O
