static	O
char	O
rcsid	array
[	O
]	O
=	O
"$Id: rpc_clntout.c,v 1.1.1.1 2005/10/28 14:46:46 k0ro Exp $"	int
;	O
static	O
int	O
write_program	function
(	O
)	O
,	O
printbody	function
(	O
)	O
;	O
void	O
write_stubs	function
(	O
)	O
{	O
list	pointer
*	O
l	pointer
;	O
definition	int
*	O
def	pointer
;	O
f_print	function
(	O
fout	pointer
,	O
"\n/* Default timeout can be changed using clnt_control() */\n"	int
)	O
;	O
f_print	function
(	O
fout	pointer
,	O
"static struct timeval TIMEOUT = { %d, 0 };\n"	int
,	O
DEFAULT_TIMEOUT	int
)	O
;	O
for	O
(	O
l	int
=	O
defined	int
;	O
l	int
!=	O
NULL	O
;	O
l	int
=	O
l	int
->	O
next	pointer
)	O
{	O
def	pointer
=	O
(	O
definition	int
*	O
)	O
l	int
->	O
val	double
;	O
if	O
(	O
def	pointer
->	O
def_kind	int
==	O
DEF_PROGRAM	int
)	O
{	O
write_program	function
(	O
def	pointer
)	O
;	O
}	O
}	O
}	O
static	O
write_program	function
(	O
def	pointer
)	O
definition	int
*	O
def	pointer
;	O
{	O
version_list	struct
*	O
vp	pointer
;	O
proc_list	struct
*	O
proc	int
;	O
for	O
(	O
vp	pointer
=	O
def	pointer
->	O
def	struct
.	O
pr	struct
.	O
versions	int
;	O
vp	pointer
!=	O
NULL	O
;	O
vp	pointer
=	O
vp	pointer
->	O
next	pointer
)	O
{	O
for	O
(	O
proc	int
=	O
vp	pointer
->	O
procs	O
;	O
proc	int
!=	O
NULL	O
;	O
proc	int
=	O
proc	int
->	O
next	pointer
)	O
{	O
f_print	function
(	O
fout	pointer
,	O
"\n"	pointer
)	O
;	O
ptype	function
(	O
proc	int
->	O
res_prefix	int
,	O
proc	int
->	O
res_type	int
,	O
1	int
)	O
;	O
f_print	function
(	O
fout	pointer
,	O
"*\n"	int
)	O
;	O
pvname	function
(	O
proc	int
->	O
proc_name	int
,	O
vp	pointer
->	O
vers_num	pointer
)	O
;	O
f_print	function
(	O
fout	pointer
,	O
"(argp, clnt)\n"	int
)	O
;	O
f_print	function
(	O
fout	pointer
,	O
"\t"	int
)	O
;	O
ptype	function
(	O
proc	int
->	O
arg_prefix	int
,	O
proc	int
->	O
arg_type	int
,	O
1	int
)	O
;	O
f_print	function
(	O
fout	pointer
,	O
"*argp;\n"	int
)	O
;	O
f_print	function
(	O
fout	pointer
,	O
"\tCLIENT *clnt;\n"	int
)	O
;	O
f_print	function
(	O
fout	pointer
,	O
"{\n"	int
)	O
;	O
printbody	function
(	O
proc	int
)	O
;	O
f_print	function
(	O
fout	pointer
,	O
"}\n\n"	int
)	O
;	O
}	O
}	O
return	O
0	int
;	O
}	O
static	O
char	O
*	O
ampr	function
(	O
type	double
)	O
char	O
*	O
type	int
;	O
{	O
if	O
(	O
isvectordef	function
(	O
type	int
,	O
REL_ALIAS	int
)	O
)	O
{	O
return	O
(	O
""	pointer
)	O
;	O
}	O
else	O
{	O
return	O
(	O
"&"	pointer
)	O
;	O
}	O
}	O
static	O
printbody	function
(	O
proc	int
)	O
proc_list	int
*	O
proc	int
;	O
{	O
f_print	function
(	O
fout	pointer
,	O
"\tstatic "	int
)	O
;	O
if	O
(	O
streq	O
(	O
proc	int
->	O
res_type	int
,	O
"void"	int
)	O
)	O
{	O
f_print	function
(	O
fout	pointer
,	O
"char "	int
)	O
;	O
}	O
else	O
{	O
ptype	function
(	O
proc	int
->	O
res_prefix	int
,	O
proc	int
->	O
res_type	int
,	O
0	int
)	O
;	O
}	O
f_print	function
(	O
fout	pointer
,	O
"res;\n"	int
)	O
;	O
f_print	function
(	O
fout	pointer
,	O
"\n"	pointer
)	O
;	O
f_print	function
(	O
fout	pointer
,	O
"\tbzero((char *)%sres, sizeof(res));\n"	int
,	O
ampr	function
(	O
proc	int
->	O
res_type	int
)	O
)	O
;	O
f_print	function
(	O
fout	pointer
,	O
"\tif (clnt_call(clnt, %s, xdr_%s, argp, xdr_%s, %sres, TIMEOUT) != RPC_SUCCESS) {\n"	int
,	O
proc	int
->	O
proc_name	int
,	O
stringfix	function
(	O
proc	int
->	O
arg_type	int
)	O
,	O
stringfix	function
(	O
proc	int
->	O
res_type	int
)	O
,	O
ampr	function
(	O
proc	int
->	O
res_type	int
)	O
)	O
;	O
f_print	function
(	O
fout	pointer
,	O
"\t\treturn (NULL);\n"	int
)	O
;	O
f_print	function
(	O
fout	pointer
,	O
"\t}\n"	int
)	O
;	O
if	O
(	O
streq	O
(	O
proc	int
->	O
res_type	int
,	O
"void"	int
)	O
)	O
{	O
f_print	function
(	O
fout	pointer
,	O
"\treturn ((void *)%sres);\n"	int
,	O
ampr	function
(	O
proc	int
->	O
res_type	int
)	O
)	O
;	O
}	O
else	O
{	O
f_print	function
(	O
fout	pointer
,	O
"\treturn (%sres);\n"	int
,	O
ampr	function
(	O
proc	int
->	O
res_type	int
)	O
)	O
;	O
}	O
return	O
0	int
;	O
}	O