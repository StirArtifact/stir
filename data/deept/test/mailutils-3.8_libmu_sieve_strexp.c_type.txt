enum	O
segm_type	enum
{	O
segm_copy	int
,	O
segm_repl	int
}	O
;	O
struct	O
string_segment	struct
{	O
enum	O
segm_type	enum
type	int
;	O
size_t	long
beg	struct
;	O
size_t	long
end	struct
;	O
char	O
*	O
repl	pointer
;	O
}	O
;	O
struct	O
stringbuf	struct
{	O
char	O
const	O
*	O
string	pointer
;	O
size_t	long
length	long
;	O
size_t	long
pos	long
;	O
mu_list_t	pointer
seglist	pointer
;	O
jmp_buf	array
errbuf	array
;	O
char	O
*	O
expansion	pointer
;	O
char	O
*	O
endptr	pointer
;	O
mu_i_sv_interp_t	pointer
interp	pointer
;	O
void	O
*	O
data	pointer
;	O
}	O
;	O
static	O
struct	O
string_segment	struct
*	O
segment_alloc	function
(	O
struct	O
stringbuf	struct
*	O
buf	pointer
,	O
size_t	long
beg	struct
,	O
enum	O
segm_type	enum
type	int
)	O
{	O
int	O
rc	int
;	O
struct	O
string_segment	struct
*	O
segm	pointer
;	O
segm	pointer
=	O
malloc	function
(	O
sizeof	O
*	O
segm	pointer
)	O
;	O
if	O
(	O
!	O
segm	pointer
)	O
longjmp	function
(	O
buf	pointer
->	O
errbuf	array
,	O
ENOMEM	int
)	O
;	O
segm	pointer
->	O
type	int
=	O
type	int
;	O
segm	pointer
->	O
beg	struct
=	O
beg	struct
;	O
segm	pointer
->	O
end	struct
=	O
buf	pointer
->	O
pos	long
-	O
1	int
;	O
rc	int
=	O
mu_list_append	function
(	O
buf	pointer
->	O
seglist	pointer
,	O
segm	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
longjmp	function
(	O
buf	pointer
->	O
errbuf	array
,	O
rc	int
)	O
;	O
return	O
segm	pointer
;	O
}	O
static	O
void	O
segm_free	function
(	O
void	O
*	O
data	pointer
)	O
{	O
struct	O
string_segment	struct
*	O
segm	pointer
=	O
data	pointer
;	O
if	O
(	O
segm	pointer
->	O
type	int
==	O
segm_repl	int
)	O
free	function
(	O
segm	pointer
->	O
repl	pointer
)	O
;	O
free	function
(	O
segm	pointer
)	O
;	O
}	O
static	O
void	O
string_next_fragment	function
(	O
struct	O
stringbuf	struct
*	O
buf	pointer
)	O
{	O
size_t	long
beg	struct
;	O
struct	O
string_segment	struct
*	O
segm	pointer
;	O
char	O
*	O
exp	pointer
;	O
beg	struct
=	O
buf	pointer
->	O
pos	long
;	O
while	O
(	O
buf	pointer
->	O
pos	long
<	O
buf	pointer
->	O
length	long
)	O
{	O
if	O
(	O
buf	pointer
->	O
string	pointer
[	O
buf	pointer
->	O
pos	long
]	O
==	O
'$'	O
&&	O
buf	pointer
->	O
pos	long
+	O
1	int
<	O
buf	pointer
->	O
length	long
&&	O
buf	pointer
->	O
string	pointer
[	O
buf	pointer
->	O
pos	long
+	O
1	int
]	O
==	O
'{'	O
)	O
break	O
;	O
buf	pointer
->	O
pos	long
++	O
;	O
}	O
segm	pointer
=	O
segment_alloc	function
(	O
buf	pointer
,	O
beg	struct
,	O
segm_copy	int
)	O
;	O
if	O
(	O
buf	pointer
->	O
pos	long
==	O
buf	pointer
->	O
length	long
)	O
return	O
;	O
beg	struct
=	O
buf	pointer
->	O
pos	long
;	O
buf	pointer
->	O
pos	long
+=	O
2	int
;	O
while	O
(	O
buf	pointer
->	O
pos	long
<	O
buf	pointer
->	O
length	long
)	O
{	O
if	O
(	O
buf	pointer
->	O
string	pointer
[	O
buf	pointer
->	O
pos	long
]	O
==	O
'$'	O
&&	O
buf	pointer
->	O
pos	long
+	O
1	int
<	O
buf	pointer
->	O
length	long
&&	O
buf	pointer
->	O
string	pointer
[	O
buf	pointer
->	O
pos	long
+	O
1	int
]	O
==	O
'{'	O
)	O
{	O
segm	pointer
->	O
end	struct
=	O
buf	pointer
->	O
pos	long
-	O
1	int
;	O
beg	struct
=	O
buf	pointer
->	O
pos	long
;	O
buf	pointer
->	O
pos	long
++	O
;	O
}	O
else	O
if	O
(	O
buf	pointer
->	O
string	pointer
[	O
buf	pointer
->	O
pos	long
]	O
==	O
'}'	O
)	O
break	O
;	O
buf	pointer
->	O
pos	long
++	O
;	O
}	O
if	O
(	O
buf	pointer
->	O
pos	long
==	O
buf	pointer
->	O
length	long
)	O
{	O
segm	pointer
->	O
end	struct
=	O
buf	pointer
->	O
pos	long
-	O
1	int
;	O
return	O
;	O
}	O
if	O
(	O
buf	pointer
->	O
interp	pointer
(	O
buf	pointer
->	O
string	pointer
+	O
beg	struct
+	O
2	int
,	O
buf	pointer
->	O
pos	long
-	O
beg	struct
-	O
2	int
,	O
&	O
exp	pointer
,	O
buf	pointer
->	O
data	pointer
)	O
==	O
0	int
)	O
{	O
segm	pointer
=	O
segment_alloc	function
(	O
buf	pointer
,	O
beg	struct
,	O
segm_repl	int
)	O
;	O
segm	pointer
->	O
repl	pointer
=	O
exp	pointer
;	O
}	O
else	O
segm	pointer
->	O
end	struct
=	O
buf	pointer
->	O
pos	long
;	O
buf	pointer
->	O
pos	long
++	O
;	O
}	O
struct	O
segm_stat	struct
{	O
size_t	long
end	struct
;	O
size_t	long
len	long
;	O
}	O
;	O
static	O
int	O
update_len	function
(	O
void	O
*	O
item	pointer
,	O
void	O
*	O
data	pointer
)	O
{	O
struct	O
string_segment	struct
*	O
segm	pointer
=	O
item	pointer
;	O
struct	O
segm_stat	struct
*	O
st	pointer
=	O
data	pointer
;	O
switch	O
(	O
segm	pointer
->	O
type	int
)	O
{	O
case	O
segm_copy	int
:	O
if	O
(	O
segm	pointer
->	O
beg	struct
==	O
st	pointer
->	O
end	struct
)	O
st	pointer
->	O
end	struct
=	O
segm	pointer
->	O
end	struct
;	O
st	pointer
->	O
len	long
+=	O
segm	pointer
->	O
end	struct
-	O
segm	pointer
->	O
beg	struct
+	O
1	int
;	O
break	O
;	O
case	O
segm_repl	int
:	O
if	O
(	O
segm	pointer
->	O
repl	pointer
)	O
st	pointer
->	O
len	long
+=	O
strlen	function
(	O
segm	pointer
->	O
repl	pointer
)	O
;	O
break	O
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
append_segm	function
(	O
void	O
*	O
item	pointer
,	O
void	O
*	O
data	pointer
)	O
{	O
struct	O
string_segment	struct
*	O
segm	pointer
=	O
item	pointer
;	O
struct	O
stringbuf	struct
*	O
buf	pointer
=	O
data	pointer
;	O
size_t	long
len	long
;	O
switch	O
(	O
segm	pointer
->	O
type	int
)	O
{	O
case	O
segm_copy	int
:	O
len	long
=	O
segm	pointer
->	O
end	struct
-	O
segm	pointer
->	O
beg	struct
+	O
1	int
;	O
memcpy	function
(	O
buf	pointer
->	O
endptr	pointer
,	O
buf	pointer
->	O
string	pointer
+	O
segm	pointer
->	O
beg	struct
,	O
len	long
)	O
;	O
break	O
;	O
case	O
segm_repl	int
:	O
if	O
(	O
segm	pointer
->	O
repl	pointer
)	O
{	O
len	long
=	O
strlen	function
(	O
segm	pointer
->	O
repl	pointer
)	O
;	O
memcpy	function
(	O
buf	pointer
->	O
endptr	pointer
,	O
segm	pointer
->	O
repl	pointer
,	O
len	long
)	O
;	O
}	O
else	O
len	long
=	O
0	int
;	O
}	O
buf	pointer
->	O
endptr	pointer
+=	O
len	long
;	O
return	O
0	int
;	O
}	O
static	O
void	O
string_split	function
(	O
struct	O
stringbuf	struct
*	O
buf	pointer
)	O
{	O
while	O
(	O
buf	pointer
->	O
pos	long
<	O
buf	pointer
->	O
length	long
)	O
string_next_fragment	function
(	O
buf	pointer
)	O
;	O
}	O
static	O
int	O
string_assemble	function
(	O
struct	O
stringbuf	struct
*	O
buf	pointer
)	O
{	O
int	O
rc	int
;	O
struct	O
segm_stat	struct
st	pointer
;	O
st	pointer
.	O
len	long
=	O
0	int
;	O
st	pointer
.	O
end	struct
=	O
0	int
;	O
rc	int
=	O
mu_list_foreach	function
(	O
buf	pointer
->	O
seglist	pointer
,	O
update_len	function
,	O
&	O
st	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
longjmp	function
(	O
buf	pointer
->	O
errbuf	array
,	O
rc	int
)	O
;	O
if	O
(	O
st	pointer
.	O
end	struct
==	O
buf	pointer
->	O
length	long
-	O
1	int
)	O
return	O
MU_ERR_CANCELED	O
;	O
buf	pointer
->	O
expansion	pointer
=	O
malloc	function
(	O
st	pointer
.	O
len	long
+	O
1	int
)	O
;	O
if	O
(	O
!	O
buf	pointer
->	O
expansion	pointer
)	O
longjmp	function
(	O
buf	pointer
->	O
errbuf	array
,	O
ENOMEM	int
)	O
;	O
buf	pointer
->	O
endptr	pointer
=	O
buf	pointer
->	O
expansion	pointer
;	O
rc	int
=	O
mu_list_foreach	function
(	O
buf	pointer
->	O
seglist	pointer
,	O
append_segm	function
,	O
buf	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
free	function
(	O
buf	pointer
->	O
expansion	pointer
)	O
;	O
buf	pointer
->	O
expansion	pointer
=	O
NULL	O
;	O
longjmp	function
(	O
buf	pointer
->	O
errbuf	array
,	O
rc	int
)	O
;	O
}	O
*	O
buf	pointer
->	O
endptr	pointer
=	O
0	int
;	O
return	O
0	int
;	O
}	O
int	O
mu_i_sv_string_expand	function
(	O
char	O
const	O
*	O
input	pointer
,	O
mu_i_sv_interp_t	pointer
interp	pointer
,	O
void	O
*	O
data	pointer
,	O
char	O
*	O
*	O
ret	pointer
)	O
{	O
struct	O
stringbuf	struct
sb	struct
;	O
int	O
rc	int
;	O
sb	struct
.	O
string	pointer
=	O
input	pointer
;	O
sb	struct
.	O
length	long
=	O
strlen	function
(	O
input	pointer
)	O
;	O
sb	struct
.	O
pos	long
=	O
0	int
;	O
rc	int
=	O
mu_list_create	function
(	O
&	O
sb	struct
.	O
seglist	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
mu_list_set_destroy_item	function
(	O
sb	struct
.	O
seglist	pointer
,	O
segm_free	function
)	O
;	O
sb	struct
.	O
expansion	pointer
=	O
NULL	O
;	O
sb	struct
.	O
endptr	pointer
=	O
NULL	O
;	O
sb	struct
.	O
interp	pointer
=	O
interp	pointer
;	O
sb	struct
.	O
data	pointer
=	O
data	pointer
;	O
rc	int
=	O
setjmp	function
(	O
sb	struct
.	O
errbuf	array
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
string_split	function
(	O
&	O
sb	struct
)	O
;	O
rc	int
=	O
string_assemble	function
(	O
&	O
sb	struct
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
*	O
ret	pointer
=	O
sb	struct
.	O
expansion	pointer
;	O
}	O
mu_list_destroy	function
(	O
&	O
sb	struct
.	O
seglist	pointer
)	O
;	O
return	O
rc	int
;	O
}	O
