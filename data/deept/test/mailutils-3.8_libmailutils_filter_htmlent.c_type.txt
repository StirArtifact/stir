struct	O
transcode_map	struct
{	O
const	O
char	O
*	O
ent	pointer
;	O
size_t	long
len	long
;	O
int	O
ch	int
;	O
}	O
;	O
static	O
struct	O
transcode_map	struct
transcode_map	pointer
[	O
]	O
=	O
{	O
{	O
S	O
(	O
"&amp;"	pointer
)	O
,	O
'&'	O
}	O
,	O
{	O
S	O
(	O
"&gt;"	pointer
)	O
,	O
'>'	O
}	O
,	O
{	O
S	O
(	O
"&lt;"	pointer
)	O
,	O
'<'	O
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
static	O
struct	O
transcode_map	struct
*	O
ch2ent	function
(	O
int	O
c	int
)	O
{	O
struct	O
transcode_map	struct
*	O
p	pointer
;	O
for	O
(	O
p	pointer
=	O
transcode_map	pointer
;	O
p	pointer
->	O
ent	pointer
;	O
p	pointer
++	O
)	O
{	O
if	O
(	O
p	pointer
->	O
ch	enum
==	O
c	int
)	O
return	O
p	pointer
;	O
}	O
return	O
NULL	O
;	O
}	O
struct	O
htmlent_encode_state	struct
{	O
char	O
buf	pointer
[	O
6	int
]	O
;	O
int	O
idx	int
;	O
}	O
;	O
static	O
enum	O
mu_filter_result	bool
_htmlent_encoder	O
(	O
void	O
*	O
xd	pointer
,	O
enum	O
mu_filter_command	bool
cmd	bool
,	O
struct	O
mu_filter_io	struct
*	O
iobuf	pointer
)	O
{	O
struct	O
htmlent_encode_state	struct
*	O
cp	pointer
=	O
xd	pointer
;	O
const	O
char	O
*	O
iptr	pointer
;	O
size_t	long
isize	long
;	O
char	O
*	O
optr	pointer
;	O
size_t	long
osize	long
;	O
switch	O
(	O
cmd	enum
)	O
{	O
case	O
mu_filter_init	int
:	O
cp	pointer
->	O
idx	long
=	O
-	O
1	int
;	O
return	O
mu_filter_ok	int
;	O
case	O
mu_filter_done	int
:	O
return	O
mu_filter_ok	int
;	O
default	O
:	O
break	O
;	O
}	O
iptr	pointer
=	O
iobuf	pointer
->	O
input	pointer
;	O
isize	long
=	O
iobuf	pointer
->	O
isize	long
;	O
optr	pointer
=	O
iobuf	pointer
->	O
output	pointer
;	O
osize	long
=	O
iobuf	pointer
->	O
osize	long
;	O
while	O
(	O
isize	long
&&	O
osize	long
)	O
{	O
if	O
(	O
cp	pointer
->	O
idx	long
>	O
0	int
)	O
{	O
*	O
optr	pointer
++	O
=	O
cp	pointer
->	O
buf	pointer
[	O
--	O
cp	pointer
->	O
idx	long
]	O
;	O
--	O
osize	long
;	O
}	O
else	O
{	O
struct	O
transcode_map	struct
*	O
p	pointer
;	O
int	O
c	int
=	O
*	O
iptr	pointer
++	O
;	O
--	O
isize	long
;	O
p	pointer
=	O
ch2ent	function
(	O
c	int
)	O
;	O
if	O
(	O
p	pointer
)	O
{	O
char	O
const	O
*	O
q	pointer
=	O
p	pointer
->	O
ent	pointer
+	O
p	pointer
->	O
len	long
;	O
cp	pointer
->	O
idx	long
=	O
0	int
;	O
while	O
(	O
q	pointer
>	O
p	pointer
->	O
ent	pointer
)	O
cp	pointer
->	O
buf	pointer
[	O
cp	pointer
->	O
idx	long
++	O
]	O
=	O
*	O
--	O
q	pointer
;	O
}	O
else	O
{	O
*	O
optr	pointer
++	O
=	O
c	int
;	O
--	O
osize	long
;	O
}	O
}	O
}	O
iobuf	pointer
->	O
isize	long
-=	O
isize	long
;	O
iobuf	pointer
->	O
osize	long
-=	O
osize	long
;	O
return	O
mu_filter_ok	int
;	O
}	O
enum	O
htmlent_decode_phase	int
{	O
enc_init	pointer
,	O
enc_map	int
,	O
enc_rollback	int
,	O
enc_finish	int
}	O
;	O
struct	O
htmlent_decode_state	struct
{	O
enum	O
htmlent_decode_phase	enum
phase	int
;	O
struct	O
transcode_map	struct
*	O
map	pointer
;	O
int	O
idx	long
;	O
int	O
pos	long
;	O
}	O
;	O
static	O
enum	O
htmlent_decode_phase	bool
nextchar	function
(	O
struct	O
htmlent_decode_state	struct
*	O
s	pointer
,	O
int	O
c	int
)	O
{	O
if	O
(	O
c	int
==	O
s	pointer
->	O
map	pointer
->	O
ent	pointer
[	O
s	pointer
->	O
idx	long
]	O
)	O
{	O
if	O
(	O
++	O
s	pointer
->	O
idx	long
==	O
s	pointer
->	O
map	pointer
->	O
len	long
)	O
s	pointer
->	O
phase	pointer
=	O
enc_finish	int
;	O
else	O
s	pointer
->	O
phase	pointer
=	O
enc_map	pointer
;	O
}	O
else	O
{	O
struct	O
transcode_map	struct
*	O
map	pointer
;	O
for	O
(	O
map	pointer
=	O
s	pointer
->	O
map	pointer
;	O
map	pointer
->	O
ent	pointer
&&	O
c	int
>	O
map	pointer
->	O
ent	pointer
[	O
s	pointer
->	O
idx	int
]	O
;	O
map	pointer
++	O
)	O
;	O
if	O
(	O
map	pointer
->	O
ent	pointer
==	O
NULL	O
||	O
c	int
!=	O
map	pointer
->	O
ent	pointer
[	O
s	pointer
->	O
idx	int
]	O
)	O
{	O
if	O
(	O
s	pointer
->	O
idx	long
!=	O
0	int
)	O
{	O
s	pointer
->	O
phase	int
=	O
enc_rollback	int
;	O
s	pointer
->	O
pos	long
=	O
0	int
;	O
}	O
else	O
DECODE_INIT	function
(	O
s	pointer
)	O
;	O
}	O
else	O
{	O
s	pointer
->	O
map	pointer
=	O
map	pointer
;	O
if	O
(	O
++	O
s	pointer
->	O
idx	long
==	O
s	pointer
->	O
map	pointer
->	O
len	long
)	O
s	pointer
->	O
phase	pointer
=	O
enc_finish	int
;	O
else	O
s	pointer
->	O
phase	pointer
=	O
enc_map	int
;	O
}	O
}	O
return	O
s	pointer
->	O
phase	int
;	O
}	O
static	O
enum	O
mu_filter_result	bool
_htmlent_decoder	O
(	O
void	O
*	O
xd	pointer
,	O
enum	O
mu_filter_command	bool
cmd	bool
,	O
struct	O
mu_filter_io	struct
*	O
iobuf	pointer
)	O
{	O
struct	O
htmlent_decode_state	struct
*	O
cp	pointer
=	O
xd	pointer
;	O
const	O
char	O
*	O
iptr	pointer
;	O
size_t	long
isize	long
;	O
char	O
*	O
optr	pointer
;	O
size_t	long
osize	long
;	O
switch	O
(	O
cmd	enum
)	O
{	O
case	O
mu_filter_init	int
:	O
DECODE_INIT	function
(	O
cp	pointer
)	O
;	O
return	O
mu_filter_ok	int
;	O
case	O
mu_filter_done	int
:	O
return	O
mu_filter_ok	int
;	O
default	O
:	O
break	O
;	O
}	O
iptr	pointer
=	O
iobuf	pointer
->	O
input	pointer
;	O
isize	long
=	O
iobuf	pointer
->	O
isize	long
;	O
optr	pointer
=	O
iobuf	pointer
->	O
output	pointer
;	O
osize	long
=	O
iobuf	pointer
->	O
osize	long
;	O
while	O
(	O
isize	long
&&	O
osize	long
)	O
{	O
switch	O
(	O
cp	pointer
->	O
phase	pointer
)	O
{	O
case	O
enc_init	int
:	O
nextchar	function
(	O
cp	pointer
,	O
*	O
iptr	pointer
)	O
;	O
if	O
(	O
cp	pointer
->	O
phase	pointer
==	O
enc_init	int
)	O
{	O
*	O
optr	pointer
++	O
=	O
*	O
iptr	pointer
;	O
--	O
osize	long
;	O
}	O
++	O
iptr	pointer
;	O
--	O
isize	long
;	O
break	O
;	O
case	O
enc_map	int
:	O
nextchar	function
(	O
cp	pointer
,	O
*	O
iptr	pointer
)	O
;	O
if	O
(	O
cp	pointer
->	O
phase	int
==	O
enc_map	int
||	O
cp	pointer
->	O
phase	pointer
==	O
enc_finish	int
)	O
{	O
++	O
iptr	pointer
;	O
--	O
isize	long
;	O
}	O
else	O
if	O
(	O
cp	pointer
->	O
phase	pointer
==	O
enc_init	int
)	O
{	O
*	O
optr	pointer
++	O
=	O
*	O
iptr	pointer
++	O
;	O
--	O
osize	long
;	O
--	O
isize	long
;	O
}	O
break	O
;	O
case	O
enc_finish	int
:	O
*	O
optr	pointer
++	O
=	O
cp	pointer
->	O
map	pointer
->	O
ch	long
;	O
--	O
osize	long
;	O
DECODE_INIT	function
(	O
cp	pointer
)	O
;	O
break	O
;	O
case	O
enc_rollback	int
:	O
*	O
optr	pointer
++	O
=	O
cp	pointer
->	O
map	pointer
->	O
ent	pointer
[	O
cp	pointer
->	O
pos	long
]	O
;	O
--	O
osize	long
;	O
if	O
(	O
++	O
cp	pointer
->	O
pos	long
==	O
cp	pointer
->	O
idx	long
)	O
DECODE_INIT	function
(	O
cp	pointer
)	O
;	O
break	O
;	O
}	O
}	O
iobuf	pointer
->	O
isize	long
-=	O
isize	long
;	O
iobuf	pointer
->	O
osize	long
-=	O
osize	long
;	O
return	O
mu_filter_ok	int
;	O
}	O
static	O
int	O
alloc_state	function
(	O
void	O
*	O
*	O
pret	pointer
,	O
int	O
mode	int
,	O
int	O
argc	int
MU_ARG_UNUSED	O
,	O
const	O
char	O
*	O
*	O
argv	pointer
MU_ARG_UNUSED	O
)	O
{	O
union	O
{	O
struct	O
htmlent_decode_state	struct
decode	pointer
;	O
struct	O
htmlent_encode_state	struct
encode	pointer
;	O
}	O
*	O
cp	pointer
;	O
switch	O
(	O
mode	O
)	O
{	O
case	O
MU_FILTER_ENCODE	int
:	O
cp	pointer
=	O
malloc	function
(	O
sizeof	O
(	O
cp	pointer
->	O
encode	pointer
)	O
)	O
;	O
if	O
(	O
!	O
cp	pointer
)	O
return	O
ENOMEM	int
;	O
cp	pointer
->	O
encode	struct
.	O
idx	long
=	O
-	O
1	int
;	O
break	O
;	O
case	O
MU_FILTER_DECODE	int
:	O
cp	pointer
=	O
malloc	function
(	O
sizeof	O
(	O
cp	pointer
->	O
decode	pointer
)	O
)	O
;	O
if	O
(	O
!	O
cp	pointer
)	O
return	O
ENOMEM	int
;	O
cp	pointer
->	O
decode	struct
.	O
idx	long
=	O
0	int
;	O
cp	pointer
->	O
decode	struct
.	O
map	pointer
=	O
transcode_map	int
;	O
break	O
;	O
default	O
:	O
abort	function
(	O
)	O
;	O
}	O
*	O
pret	pointer
=	O
cp	pointer
;	O
return	O
0	int
;	O
}	O
static	O
struct	O
_mu_filter_record	struct
_htmlent_filter	struct
=	O
{	O
"htmlent"	pointer
,	O
alloc_state	function
,	O
_htmlent_encoder	int
,	O
_htmlent_decoder	int
,	O
}	O
;	O
mu_filter_record_t	pointer
mu_htmlent_filter	pointer
=	O
&	O
_htmlent_filter	struct
;	O