void	O
recfmt_parse_args	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
)	O
;	O
bool	bool
recfmt_process_data	function
(	O
rec_db_t	pointer
db	pointer
)	O
;	O
void	O
recfmt_process_db	function
(	O
rec_db_t	pointer
db	pointer
,	O
char	O
*	O
template	struct
)	O
;	O
char	O
*	O
recfmt_apply_template	function
(	O
rec_record_t	pointer
record	pointer
,	O
char	O
*	O
template	struct
)	O
;	O
char	O
*	O
recfmt_get_subst	function
(	O
rec_record_t	pointer
record	pointer
,	O
char	O
*	O
str	pointer
)	O
;	O
char	O
*	O
recfmt_template	pointer
=	O
NULL	O
;	O
enum	O
{	O
COMMON_ARGS	O
,	O
FILE_ARG	int
}	O
;	O
static	O
const	O
struct	O
option	struct
GNU_longOptions	array
[	O
]	O
=	O
{	O
COMMON_LONG_ARGS	O
,	O
{	O
"file"	pointer
,	O
required_argument	int
,	O
NULL	O
,	O
FILE_ARG	int
}	O
,	O
{	O
NULL	O
,	O
0	int
,	O
NULL	O
,	O
0	int
}	O
}	O
;	O
void	O
recutl_print_help	function
(	O
void	O
)	O
{	O
printf	function
(	O
_	O
(	O
"Usage: recfmt [OPTION]... [TEMPLATE]\n"	pointer
)	O
)	O
;	O
fputs	function
(	O
_	O
(	O
"Apply a template to records read from standard input.\n"	pointer
)	O
,	O
stdout	pointer
)	O
;	O
puts	function
(	O
""	pointer
)	O
;	O
fputs	function
(	O
_	O
(	O
"  -f, --file=FILENAME                 read the template to apply from a file.\n"	pointer
)	O
,	O
stdout	pointer
)	O
;	O
recutl_print_help_common	function
(	O
)	O
;	O
puts	function
(	O
""	pointer
)	O
;	O
recutl_print_help_footer	function
(	O
)	O
;	O
}	O
void	O
recfmt_parse_args	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
char	O
c	int
;	O
int	O
ret	int
;	O
while	O
(	O
(	O
ret	int
=	O
getopt_long	function
(	O
argc	int
,	O
argv	pointer
,	O
"f:"	pointer
,	O
GNU_longOptions	array
,	O
NULL	O
)	O
)	O
!=	O
-	O
1	int
)	O
{	O
c	int
=	O
ret	int
;	O
switch	O
(	O
c	int
)	O
{	O
COMMON_ARGS_CASES	O
case	O
FILE_ARG	int
:	O
case	O
'f'	O
:	O
{	O
recfmt_template	pointer
=	O
recutl_read_file	function
(	O
optarg	pointer
)	O
;	O
if	O
(	O
!	O
recfmt_template	pointer
)	O
{	O
recutl_fatal	function
(	O
_	O
(	O
"can't open file %s for reading.\n"	pointer
)	O
,	O
optarg	pointer
)	O
;	O
}	O
break	O
;	O
}	O
default	O
:	O
{	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
}	O
}	O
if	O
(	O
optind	int
<	O
argc	int
)	O
{	O
if	O
(	O
recfmt_template	pointer
)	O
{	O
recutl_fatal	function
(	O
_	O
(	O
"don't specify a template in the command line and -f at the same time.\n"	pointer
)	O
)	O
;	O
}	O
if	O
(	O
(	O
argc	int
-	O
optind	int
)	O
!=	O
1	int
)	O
{	O
recutl_print_help	function
(	O
)	O
;	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
recfmt_template	int
=	O
xstrdup	function
(	O
argv	pointer
[	O
optind	int
++	O
]	O
)	O
;	O
}	O
}	O
char	O
*	O
recfmt_get_subst	function
(	O
rec_record_t	pointer
record	pointer
,	O
char	O
*	O
str	pointer
)	O
{	O
char	O
*	O
res	pointer
;	O
rec_sex_t	pointer
sex	O
;	O
sex	int
=	O
rec_sex_new	function
(	O
false	int
)	O
;	O
if	O
(	O
!	O
rec_sex_compile	function
(	O
sex	pointer
,	O
str	pointer
)	O
)	O
{	O
recutl_fatal	function
(	O
_	O
(	O
"invalid expression in a template slot.\n"	pointer
)	O
)	O
;	O
}	O
res	pointer
=	O
rec_sex_eval_str	function
(	O
sex	pointer
,	O
record	pointer
)	O
;	O
if	O
(	O
!	O
res	pointer
)	O
{	O
recutl_fatal	function
(	O
_	O
(	O
"error evaluating expression in a template slot.\n"	pointer
)	O
)	O
;	O
}	O
rec_sex_destroy	function
(	O
sex	pointer
)	O
;	O
return	O
res	pointer
;	O
}	O
char	O
*	O
recfmt_apply_template	function
(	O
rec_record_t	pointer
record	pointer
,	O
char	O
*	O
template	struct
)	O
{	O
rec_buf_t	pointer
result_buf	struct
;	O
char	O
*	O
result	pointer
;	O
char	O
*	O
tmp	pointer
;	O
size_t	long
tmp_size	long
;	O
size_t	long
result_size	long
;	O
char	O
*	O
p	pointer
;	O
regex_t	struct
regexp	struct
;	O
regmatch_t	struct
matches	pointer
;	O
char	O
*	O
subst_str	pointer
;	O
if	O
(	O
regcomp	function
(	O
&	O
regexp	struct
,	O
"\\{\\{"	int
"[^}]*"	O
"\\}\\}"	pointer
,	O
REG_EXTENDED	pointer
)	O
!=	O
0	int
)	O
{	O
recutl_fatal	function
(	O
_	O
(	O
"recfmt_apply_template: error compiling regexp. Please report this.\n"	pointer
)	O
)	O
;	O
}	O
result_buf	struct
=	O
rec_buf_new	function
(	O
&	O
result	pointer
,	O
&	O
result_size	struct
)	O
;	O
p	pointer
=	O
template	struct
;	O
while	O
(	O
*	O
p	pointer
&&	O
(	O
regexec	function
(	O
&	O
regexp	pointer
,	O
p	pointer
,	O
1	int
,	O
&	O
matches	pointer
,	O
0	int
)	O
==	O
0	int
)	O
&&	O
(	O
matches	struct
.	O
rm_so	int
!=	O
-	O
1	int
)	O
)	O
{	O
if	O
(	O
matches	struct
.	O
rm_so	int
>	O
0	int
)	O
{	O
tmp	pointer
=	O
xmalloc	function
(	O
matches	struct
.	O
rm_so	int
+	O
1	int
)	O
;	O
memcpy	function
(	O
tmp	pointer
,	O
p	pointer
,	O
matches	struct
.	O
rm_so	int
)	O
;	O
tmp	pointer
[	O
matches	struct
.	O
rm_so	int
]	O
=	O
'\0'	O
;	O
rec_buf_puts	function
(	O
tmp	pointer
,	O
result_buf	pointer
)	O
;	O
free	function
(	O
tmp	pointer
)	O
;	O
}	O
tmp_size	int
=	O
matches	struct
.	O
rm_eo	int
-	O
matches	struct
.	O
rm_so	int
-	O
4	int
;	O
tmp	long
=	O
xmalloc	function
(	O
tmp_size	int
+	O
1	int
)	O
;	O
memcpy	function
(	O
tmp	pointer
,	O
p	pointer
+	O
matches	struct
.	O
rm_so	int
+	O
2	int
,	O
tmp_size	int
)	O
;	O
tmp	pointer
[	O
tmp_size	int
]	O
=	O
'\0'	O
;	O
p	pointer
=	O
p	pointer
+	O
matches	struct
.	O
rm_eo	int
;	O
subst_str	int
=	O
recfmt_get_subst	function
(	O
record	pointer
,	O
tmp	long
)	O
;	O
if	O
(	O
subst_str	pointer
)	O
{	O
rec_buf_puts	function
(	O
subst_str	pointer
,	O
result_buf	pointer
)	O
;	O
free	function
(	O
subst_str	pointer
)	O
;	O
}	O
free	function
(	O
tmp	pointer
)	O
;	O
}	O
if	O
(	O
*	O
p	pointer
)	O
{	O
rec_buf_puts	function
(	O
p	pointer
,	O
result_buf	struct
)	O
;	O
}	O
rec_buf_close	function
(	O
result_buf	struct
)	O
;	O
return	O
result	pointer
;	O
}	O
void	O
recfmt_process_db	function
(	O
rec_db_t	pointer
db	pointer
,	O
char	O
*	O
template	struct
)	O
{	O
size_t	long
n_rset	long
;	O
rec_rset_t	pointer
rset	pointer
;	O
rec_record_t	pointer
record	pointer
;	O
char	O
*	O
result	pointer
;	O
rec_mset_iterator_t	struct
iter	struct
;	O
for	O
(	O
n_rset	long
=	O
0	int
;	O
n_rset	long
<	O
rec_db_size	function
(	O
db	pointer
)	O
;	O
n_rset	long
++	O
)	O
{	O
rset	pointer
=	O
rec_db_get_rset	function
(	O
db	pointer
,	O
n_rset	long
)	O
;	O
iter	struct
=	O
rec_mset_iterator	function
(	O
rec_rset_mset	function
(	O
rset	pointer
)	O
)	O
;	O
while	O
(	O
rec_mset_iterator_next	function
(	O
&	O
iter	struct
,	O
MSET_RECORD	int
,	O
(	O
const	O
void	O
*	O
*	O
)	O
&	O
record	pointer
,	O
NULL	O
)	O
)	O
{	O
result	pointer
=	O
recfmt_apply_template	function
(	O
record	pointer
,	O
template	struct
)	O
;	O
if	O
(	O
result	pointer
&&	O
(	O
*	O
result	pointer
!=	O
'\0'	O
)	O
)	O
{	O
printf	function
(	O
"%s"	pointer
,	O
result	pointer
)	O
;	O
free	function
(	O
result	pointer
)	O
;	O
}	O
}	O
rec_mset_iterator_free	function
(	O
&	O
iter	struct
)	O
;	O
}	O
}	O
int	O
main	function
(	O
int	O
argc	int
,	O
char	O
*	O
argv	pointer
[	O
]	O
)	O
{	O
rec_db_t	pointer
db	pointer
;	O
recutl_init	function
(	O
"recfmt"	pointer
)	O
;	O
recfmt_parse_args	function
(	O
argc	int
,	O
argv	pointer
)	O
;	O
db	pointer
=	O
recutl_read_db_from_file	function
(	O
NULL	O
)	O
;	O
if	O
(	O
db	pointer
&&	O
recfmt_template	pointer
)	O
{	O
recfmt_process_db	function
(	O
db	pointer
,	O
recfmt_template	pointer
)	O
;	O
}	O
return	O
EXIT_SUCCESS	int
;	O
}	O