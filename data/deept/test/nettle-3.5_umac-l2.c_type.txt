void	O
_umac_l2_init	O
(	O
unsigned	O
size	long
,	O
uint32_t	int
*	O
k	int
)	O
{	O
unsigned	O
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
size	int
;	O
i	int
++	O
)	O
{	O
uint32_t	int
w	int
=	O
k	pointer
[	O
i	int
]	O
;	O
w	pointer
=	O
BE_SWAP32	function
(	O
w	pointer
)	O
;	O
k	pointer
[	O
i	int
]	O
=	O
w	pointer
&	O
KEY_MASK	struct
;	O
}	O
}	O
void	O
_umac_l2	O
(	O
const	O
uint32_t	int
*	O
key	pointer
,	O
uint64_t	long
*	O
state	pointer
,	O
unsigned	O
n	int
,	O
uint64_t	long
count	long
,	O
const	O
uint64_t	long
*	O
m	pointer
)	O
{	O
uint64_t	long
*	O
prev	pointer
=	O
state	pointer
+	O
2	int
*	O
n	int
;	O
unsigned	O
i	int
;	O
if	O
(	O
count	int
==	O
0	int
)	O
memcpy	function
(	O
prev	pointer
,	O
m	pointer
,	O
n	int
*	O
sizeof	O
(	O
*	O
m	pointer
)	O
)	O
;	O
else	O
if	O
(	O
count	long
==	O
1	int
)	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
n	int
;	O
i	int
++	O
,	O
key	int
+=	O
6	int
)	O
{	O
uint64_t	long
y	long
=	O
_umac_poly64	function
(	O
key	pointer
[	O
0	int
]	O
,	O
key	pointer
[	O
1	int
]	O
,	O
1	int
,	O
prev	pointer
[	O
i	long
]	O
)	O
;	O
state	pointer
[	O
2	int
*	O
i	long
+	O
1	int
]	O
=	O
_umac_poly64	function
(	O
key	pointer
[	O
0	int
]	O
,	O
key	pointer
[	O
1	int
]	O
,	O
y	int
,	O
m	array
[	O
i	long
]	O
)	O
;	O
}	O
else	O
if	O
(	O
count	long
<	O
UMAC_POLY64_BLOCKS	int
)	O
for	O
(	O
i	long
=	O
0	int
;	O
i	int
<	O
n	long
;	O
i	int
++	O
,	O
key	int
+=	O
6	int
)	O
state	pointer
[	O
2	int
*	O
i	int
+	O
1	int
]	O
=	O
_umac_poly64	function
(	O
key	pointer
[	O
0	int
]	O
,	O
key	pointer
[	O
1	int
]	O
,	O
state	pointer
[	O
2	int
*	O
i	int
+	O
1	int
]	O
,	O
m	array
[	O
i	long
]	O
)	O
;	O
else	O
if	O
(	O
count	long
%	O
2	int
==	O
0	int
)	O
{	O
if	O
(	O
count	long
==	O
UMAC_POLY64_BLOCKS	int
)	O
for	O
(	O
i	int
=	O
0	int
,	O
key	int
+=	O
2	int
;	O
i	int
<	O
n	int
;	O
i	int
++	O
,	O
key	int
+=	O
6	int
)	O
{	O
uint64_t	long
y	long
=	O
state	pointer
[	O
2	int
*	O
i	long
+	O
1	int
]	O
;	O
if	O
(	O
y	int
>=	O
UMAC_P64	int
)	O
y	int
-=	O
UMAC_P64	int
;	O
state	pointer
[	O
2	int
*	O
i	long
]	O
=	O
0	int
;	O
state	pointer
[	O
2	int
*	O
i	long
+	O
1	int
]	O
=	O
1	int
;	O
_umac_poly128	O
(	O
key	pointer
,	O
state	pointer
+	O
2	int
*	O
i	long
,	O
0	int
,	O
y	int
)	O
;	O
}	O
memcpy	function
(	O
prev	pointer
,	O
m	pointer
,	O
n	long
*	O
sizeof	O
(	O
*	O
m	pointer
)	O
)	O
;	O
}	O
else	O
for	O
(	O
i	long
=	O
0	int
,	O
key	int
+=	O
2	int
;	O
i	int
<	O
n	long
;	O
i	int
++	O
,	O
key	int
+=	O
6	int
)	O
_umac_poly128	O
(	O
key	pointer
,	O
state	pointer
+	O
2	int
*	O
i	int
,	O
prev	pointer
[	O
i	long
]	O
,	O
m	array
[	O
i	long
]	O
)	O
;	O
}	O
void	O
_umac_l2_final	O
(	O
const	O
uint32_t	int
*	O
key	pointer
,	O
uint64_t	long
*	O
state	pointer
,	O
unsigned	O
n	long
,	O
uint64_t	long
count	long
)	O
{	O
uint64_t	long
*	O
prev	pointer
=	O
state	pointer
+	O
2	int
*	O
n	long
;	O
unsigned	O
i	long
;	O
assert	O
(	O
count	long
>	O
0	int
)	O
;	O
if	O
(	O
count	long
==	O
1	int
)	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
n	long
;	O
i	long
++	O
)	O
{	O
*	O
state	pointer
++	O
=	O
0	int
;	O
*	O
state	pointer
++	O
=	O
*	O
prev	pointer
++	O
;	O
}	O
else	O
if	O
(	O
count	long
<=	O
UMAC_POLY64_BLOCKS	int
)	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
n	long
;	O
i	long
++	O
)	O
{	O
uint64_t	long
y	long
;	O
*	O
state	pointer
++	O
=	O
0	int
;	O
y	int
=	O
*	O
state	pointer
;	O
if	O
(	O
y	int
>=	O
UMAC_P64	int
)	O
y	int
-=	O
UMAC_P64	int
;	O
*	O
state	pointer
++	O
=	O
y	int
;	O
}	O
else	O
{	O
uint64_t	long
pad	long
=	O
(	O
uint64_t	long
)	O
1	int
<<	O
63	int
;	O
if	O
(	O
count	long
%	O
2	int
==	O
1	int
)	O
for	O
(	O
i	long
=	O
0	int
,	O
key	int
+=	O
2	int
;	O
i	long
<	O
n	long
;	O
i	long
++	O
,	O
key	int
+=	O
6	int
)	O
_umac_poly128	O
(	O
key	pointer
,	O
state	pointer
+	O
2	int
*	O
i	long
,	O
prev	pointer
[	O
i	long
]	O
,	O
pad	int
)	O
;	O
else	O
for	O
(	O
i	long
=	O
0	int
,	O
key	int
+=	O
2	int
;	O
i	long
<	O
n	long
;	O
i	long
++	O
,	O
key	int
+=	O
6	int
)	O
_umac_poly128	O
(	O
key	pointer
,	O
state	pointer
+	O
2	int
*	O
i	long
,	O
pad	int
,	O
0	int
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
n	long
;	O
i	long
++	O
,	O
state	pointer
+=	O
2	int
)	O
{	O
uint64_t	long
yh	long
,	O
yl	long
;	O
yh	long
=	O
state	pointer
[	O
0	int
]	O
;	O
yl	long
=	O
state	pointer
[	O
1	int
]	O
;	O
if	O
(	O
yh	long
==	O
UMAC_P128_HI	O
&&	O
yl	long
>=	O
UMAC_P128_LO	O
)	O
{	O
state	pointer
[	O
0	int
]	O
=	O
0	int
;	O
state	pointer
[	O
1	int
]	O
=	O
yl	long
-=	O
UMAC_P128_LO	O
;	O
}	O
}	O
}	O
}	O