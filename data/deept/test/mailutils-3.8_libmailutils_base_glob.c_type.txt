static	O
void	O
parse_character_class	function
(	O
unsigned	O
char	O
const	O
*	O
str	pointer
,	O
mu_opool_t	pointer
pool	pointer
,	O
unsigned	O
char	O
const	O
*	O
*	O
endp	pointer
)	O
{	O
unsigned	O
char	O
const	O
*	O
cur	pointer
;	O
cur	pointer
=	O
str	pointer
+	O
1	int
;	O
if	O
(	O
*	O
cur	pointer
==	O
'!'	O
)	O
cur	pointer
++	O
;	O
if	O
(	O
*	O
cur	pointer
==	O
']'	O
)	O
cur	pointer
++	O
;	O
while	O
(	O
*	O
cur	pointer
&&	O
*	O
cur	pointer
!=	O
']'	O
)	O
{	O
int	O
c	int
=	O
*	O
cur	pointer
++	O
;	O
if	O
(	O
c	int
==	O
'\\'	O
)	O
cur	pointer
++	O
;	O
else	O
if	O
(	O
c	int
>=	O
0xc2	int
)	O
{	O
size_t	long
len	long
;	O
if	O
(	O
c	int
<	O
0xe0	int
)	O
len	long
=	O
1	int
;	O
else	O
if	O
(	O
c	int
<	O
0xf0	int
)	O
len	long
=	O
2	int
;	O
else	O
if	O
(	O
c	int
<	O
0xf8	int
)	O
len	long
=	O
3	int
;	O
else	O
continue	O
;	O
while	O
(	O
len	long
--	O
&&	O
*	O
cur	pointer
)	O
cur	pointer
++	O
;	O
}	O
}	O
if	O
(	O
*	O
cur	pointer
==	O
']'	O
)	O
{	O
mu_opool_append_char	function
(	O
pool	pointer
,	O
*	O
str	pointer
)	O
;	O
str	pointer
++	O
;	O
if	O
(	O
*	O
str	pointer
==	O
'!'	O
)	O
{	O
mu_opool_append_char	function
(	O
pool	pointer
,	O
'^'	O
)	O
;	O
str	pointer
++	O
;	O
}	O
while	O
(	O
str	pointer
<	O
cur	pointer
)	O
{	O
if	O
(	O
*	O
str	pointer
==	O
'['	O
)	O
mu_opool_append_char	function
(	O
pool	pointer
,	O
'\\'	O
)	O
;	O
mu_opool_append_char	function
(	O
pool	pointer
,	O
*	O
str	pointer
)	O
;	O
str	pointer
++	O
;	O
}	O
mu_opool_append_char	function
(	O
pool	pointer
,	O
']'	O
)	O
;	O
*	O
endp	pointer
=	O
cur	pointer
+	O
1	int
;	O
}	O
else	O
{	O
mu_opool_append_char	function
(	O
pool	pointer
,	O
'\\'	O
)	O
;	O
mu_opool_append_char	function
(	O
pool	pointer
,	O
*	O
str	pointer
)	O
;	O
str	pointer
++	O
;	O
*	O
endp	pointer
=	O
str	pointer
;	O
}	O
}	O
int	O
mu_glob_to_regex_opool	function
(	O
char	O
const	O
*	O
pattern	pointer
,	O
mu_opool_t	pointer
pool	pointer
,	O
int	O
flags	int
)	O
{	O
unsigned	O
char	O
const	O
*	O
str	pointer
=	O
(	O
unsigned	O
char	O
const	O
*	O
)	O
pattern	pointer
;	O
mu_nonlocal_jmp_t	O
jmp	O
;	O
if	O
(	O
!	O
(	O
flags	int
&	O
MU_GLOBF_SUB	int
)	O
)	O
flags	int
|=	O
MU_GLOBF_COLLAPSE	int
;	O
mu_opool_setup_nonlocal_jump	function
(	O
pool	pointer
,	O
jmp	pointer
)	O
;	O
while	O
(	O
*	O
str	pointer
)	O
{	O
int	O
c	int
=	O
*	O
str	pointer
++	O
;	O
if	O
(	O
c	int
<	O
0x80	int
)	O
{	O
switch	O
(	O
c	int
)	O
{	O
case	O
'\\'	O
:	O
mu_opool_append_char	function
(	O
pool	pointer
,	O
'\\'	O
)	O
;	O
if	O
(	O
*	O
str	pointer
&&	O
strchr	function
(	O
"?*["	pointer
,	O
*	O
str	pointer
)	O
)	O
{	O
mu_opool_append_char	function
(	O
pool	pointer
,	O
*	O
str	pointer
)	O
;	O
str	pointer
++	O
;	O
}	O
else	O
mu_opool_append_char	function
(	O
pool	pointer
,	O
'\\'	O
)	O
;	O
break	O
;	O
case	O
'?'	O
:	O
if	O
(	O
flags	int
&	O
MU_GLOBF_SUB	int
)	O
mu_opool_append_char	function
(	O
pool	pointer
,	O
'('	O
)	O
;	O
mu_opool_append_char	function
(	O
pool	pointer
,	O
'.'	O
)	O
;	O
if	O
(	O
flags	int
&	O
MU_GLOBF_SUB	int
)	O
mu_opool_append_char	function
(	O
pool	pointer
,	O
')'	O
)	O
;	O
break	O
;	O
case	O
'*'	O
:	O
if	O
(	O
flags	int
&	O
MU_GLOBF_COLLAPSE	int
)	O
{	O
while	O
(	O
*	O
str	pointer
==	O
'*'	O
)	O
str	pointer
++	O
;	O
}	O
if	O
(	O
flags	int
&	O
MU_GLOBF_SUB	int
)	O
{	O
while	O
(	O
*	O
str	pointer
==	O
'*'	O
)	O
{	O
mu_opool_append	function
(	O
pool	pointer
,	O
"()"	int
,	O
2	int
)	O
;	O
str	pointer
++	O
;	O
}	O
mu_opool_append_char	function
(	O
pool	pointer
,	O
'('	O
)	O
;	O
mu_opool_append	function
(	O
pool	pointer
,	O
".*"	int
,	O
2	int
)	O
;	O
mu_opool_append_char	function
(	O
pool	pointer
,	O
')'	O
)	O
;	O
}	O
else	O
mu_opool_append	function
(	O
pool	pointer
,	O
".*"	int
,	O
2	int
)	O
;	O
break	O
;	O
case	O
'['	O
:	O
parse_character_class	function
(	O
str	pointer
-	O
1	int
,	O
pool	pointer
,	O
&	O
str	pointer
)	O
;	O
break	O
;	O
case	O
'('	O
:	O
case	O
')'	O
:	O
case	O
'{'	O
:	O
case	O
'}'	O
:	O
case	O
'^'	O
:	O
case	O
'$'	O
:	O
case	O
']'	O
:	O
case	O
'|'	O
:	O
case	O
'.'	O
:	O
mu_opool_append_char	function
(	O
pool	pointer
,	O
'\\'	O
)	O
;	O
mu_opool_append_char	function
(	O
pool	pointer
,	O
c	int
)	O
;	O
break	O
;	O
default	O
:	O
mu_opool_append_char	function
(	O
pool	pointer
,	O
c	int
)	O
;	O
}	O
}	O
else	O
{	O
mu_opool_append_char	function
(	O
pool	pointer
,	O
c	int
)	O
;	O
if	O
(	O
c	int
>=	O
0xc2	int
)	O
{	O
size_t	long
len	long
;	O
if	O
(	O
c	int
<	O
0xe0	int
)	O
len	long
=	O
1	int
;	O
else	O
if	O
(	O
c	int
<	O
0xf0	int
)	O
len	long
=	O
2	int
;	O
else	O
if	O
(	O
c	int
<	O
0xf8	int
)	O
len	long
=	O
3	int
;	O
else	O
continue	O
;	O
for	O
(	O
;	O
len	long
--	O
&&	O
*	O
str	pointer
;	O
str	pointer
++	O
)	O
mu_opool_append_char	function
(	O
pool	pointer
,	O
*	O
str	pointer
)	O
;	O
}	O
}	O
}	O
mu_opool_clrjmp	function
(	O
pool	pointer
)	O
;	O
return	O
0	int
;	O
}	O
int	O
mu_glob_to_regex	function
(	O
char	O
*	O
*	O
rxstr	pointer
,	O
char	O
const	O
*	O
pattern	pointer
,	O
int	O
flags	int
)	O
{	O
mu_opool_t	pointer
pool	pointer
;	O
int	O
rc	int
;	O
mu_nonlocal_jmp_t	int
jmp	int
;	O
rc	int
=	O
mu_opool_create	function
(	O
&	O
pool	pointer
,	O
MU_OPOOL_DEFAULT	int
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
mu_opool_setup_nonlocal_jump	function
(	O
pool	pointer
,	O
jmp	pointer
)	O
;	O
mu_opool_append_char	function
(	O
pool	pointer
,	O
'^'	O
)	O
;	O
rc	int
=	O
mu_glob_to_regex_opool	function
(	O
pattern	pointer
,	O
pool	long
,	O
flags	int
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
mu_opool_append_char	function
(	O
pool	pointer
,	O
'$'	O
)	O
;	O
mu_opool_append_char	function
(	O
pool	pointer
,	O
0	int
)	O
;	O
*	O
rxstr	pointer
=	O
mu_opool_detach	function
(	O
pool	pointer
,	O
NULL	O
)	O
;	O
}	O
mu_opool_clrjmp	function
(	O
pool	pointer
)	O
;	O
mu_opool_destroy	function
(	O
&	O
pool	pointer
)	O
;	O
return	O
rc	int
;	O
}	O
int	O
mu_glob_compile	function
(	O
regex_t	struct
*	O
rx	pointer
,	O
char	O
const	O
*	O
pattern	pointer
,	O
int	O
flags	int
)	O
{	O
char	O
*	O
str	pointer
;	O
int	O
rc	int
;	O
int	O
rxflags	int
;	O
rc	int
=	O
mu_glob_to_regex	function
(	O
&	O
str	pointer
,	O
pattern	pointer
,	O
flags	int
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
rxflags	int
=	O
REG_EXTENDED	int
;	O
if	O
(	O
flags	int
&	O
MU_GLOBF_ICASE	int
)	O
rxflags	int
|=	O
REG_ICASE	O
;	O
if	O
(	O
!	O
(	O
flags	int
&	O
MU_GLOBF_SUB	int
)	O
)	O
rxflags	int
|=	O
REG_NOSUB	O
;	O
rc	int
=	O
regcomp	function
(	O
rx	pointer
,	O
str	pointer
,	O
rxflags	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
size_t	long
size	long
=	O
regerror	function
(	O
rc	int
,	O
rx	pointer
,	O
NULL	O
,	O
0	int
)	O
;	O
char	O
*	O
errbuf	pointer
=	O
malloc	function
(	O
size	long
+	O
1	int
)	O
;	O
if	O
(	O
errbuf	array
)	O
{	O
regerror	function
(	O
rc	int
,	O
rx	int
,	O
errbuf	array
,	O
size	long
)	O
;	O
mu_error	function
(	O
"INTERNAL ERROR: can't compile regular expression \"%s\": %s"	pointer
,	O
str	pointer
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
}	O
else	O
mu_error	function
(	O
"INTERNAL ERROR: can't compile regular expression \"%s\""	pointer
,	O
str	pointer
)	O
;	O
mu_error	function
(	O
"INTERNAL ERROR: expression compiled from globbing pattern: %s"	pointer
,	O
pattern	pointer
)	O
;	O
free	function
(	O
errbuf	array
)	O
;	O
}	O
free	function
(	O
str	pointer
)	O
;	O
return	O
rc	int
;	O
}	O