int	O
osip_uri_init	function
(	O
osip_uri_t	struct
*	O
*	O
url	pointer
)	O
{	O
*	O
url	pointer
=	O
(	O
osip_uri_t	struct
*	O
)	O
osip_malloc	O
(	O
sizeof	O
(	O
osip_uri_t	struct
)	O
)	O
;	O
if	O
(	O
*	O
url	pointer
==	O
NULL	O
)	O
return	O
OSIP_NOMEM	O
;	O
(	O
*	O
url	pointer
)	O
->	O
scheme	pointer
=	O
NULL	O
;	O
(	O
*	O
url	pointer
)	O
->	O
username	pointer
=	O
NULL	O
;	O
(	O
*	O
url	pointer
)	O
->	O
password	pointer
=	O
NULL	O
;	O
(	O
*	O
url	pointer
)	O
->	O
host	pointer
=	O
NULL	O
;	O
(	O
*	O
url	pointer
)	O
->	O
port	pointer
=	O
NULL	O
;	O
osip_list_init	function
(	O
&	O
(	O
*	O
url	pointer
)	O
->	O
url_params	pointer
)	O
;	O
osip_list_init	function
(	O
&	O
(	O
*	O
url	pointer
)	O
->	O
url_headers	struct
)	O
;	O
(	O
*	O
url	pointer
)	O
->	O
string	pointer
=	O
NULL	O
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
const	O
char	O
*	O
next_separator	function
(	O
const	O
char	O
*	O
ch	pointer
,	O
int	O
separator_osip_to_find	int
,	O
int	O
before_separator	int
)	O
{	O
const	O
char	O
*	O
ind	pointer
;	O
const	O
char	O
*	O
tmp	pointer
;	O
ind	pointer
=	O
strchr	function
(	O
ch	pointer
,	O
separator_osip_to_find	int
)	O
;	O
if	O
(	O
ind	pointer
==	O
NULL	O
)	O
return	O
NULL	O
;	O
tmp	pointer
=	O
NULL	O
;	O
if	O
(	O
before_separator	int
!=	O
0	int
)	O
tmp	pointer
=	O
strchr	function
(	O
ch	pointer
,	O
before_separator	int
)	O
;	O
if	O
(	O
tmp	pointer
!=	O
NULL	O
)	O
{	O
if	O
(	O
ind	pointer
<	O
tmp	pointer
)	O
return	O
ind	pointer
;	O
}	O
else	O
return	O
ind	pointer
;	O
return	O
NULL	O
;	O
}	O
int	O
osip_uri_parse	function
(	O
osip_uri_t	struct
*	O
url	pointer
,	O
const	O
char	O
*	O
buf	pointer
)	O
{	O
const	O
char	O
*	O
username	pointer
;	O
const	O
char	O
*	O
password	pointer
;	O
const	O
char	O
*	O
host	pointer
;	O
const	O
char	O
*	O
port	pointer
;	O
const	O
char	O
*	O
params	pointer
;	O
const	O
char	O
*	O
headers	pointer
;	O
const	O
char	O
*	O
tmp	pointer
;	O
int	O
i	int
;	O
if	O
(	O
buf	pointer
==	O
NULL	O
||	O
buf	pointer
[	O
0	int
]	O
==	O
'\0'	O
)	O
return	O
OSIP_BADPARAMETER	O
;	O
tmp	pointer
=	O
strchr	function
(	O
buf	pointer
,	O
':'	O
)	O
;	O
if	O
(	O
tmp	pointer
==	O
NULL	O
)	O
return	O
OSIP_SYNTAXERROR	O
;	O
if	O
(	O
tmp	pointer
-	O
buf	pointer
<	O
2	int
)	O
return	O
OSIP_SYNTAXERROR	O
;	O
i	int
=	O
0	int
;	O
while	O
(	O
buf	pointer
+	O
i	int
<	O
tmp	pointer
)	O
{	O
if	O
(	O
!	O
osip_is_alpha	O
(	O
buf	pointer
[	O
i	int
]	O
)	O
)	O
return	O
OSIP_SYNTAXERROR	O
;	O
i	int
++	O
;	O
}	O
url	pointer
->	O
scheme	pointer
=	O
(	O
char	O
*	O
)	O
osip_malloc	O
(	O
tmp	pointer
-	O
buf	pointer
+	O
1	int
)	O
;	O
if	O
(	O
url	pointer
->	O
scheme	pointer
==	O
NULL	O
)	O
return	O
OSIP_NOMEM	O
;	O
osip_strncpy	function
(	O
url	pointer
->	O
scheme	pointer
,	O
buf	pointer
,	O
tmp	pointer
-	O
buf	pointer
)	O
;	O
if	O
(	O
strchr	function
(	O
url	pointer
->	O
scheme	pointer
,	O
' '	O
)	O
!=	O
NULL	O
)	O
{	O
return	O
OSIP_SYNTAXERROR	O
;	O
}	O
if	O
(	O
strlen	function
(	O
url	pointer
->	O
scheme	pointer
)	O
<	O
3	int
||	O
(	O
0	int
!=	O
osip_strncasecmp	function
(	O
url	pointer
->	O
scheme	pointer
,	O
"sip"	pointer
,	O
3	int
)	O
&&	O
0	int
!=	O
osip_strncasecmp	function
(	O
url	pointer
->	O
scheme	pointer
,	O
"sips"	pointer
,	O
4	int
)	O
)	O
)	O
{	O
size_t	long
i	int
=	O
strlen	function
(	O
tmp	pointer
+	O
1	int
)	O
;	O
if	O
(	O
i	int
<	O
2	int
)	O
return	O
OSIP_SYNTAXERROR	O
;	O
url	pointer
->	O
string	pointer
=	O
(	O
char	O
*	O
)	O
osip_malloc	O
(	O
i	int
+	O
1	int
)	O
;	O
if	O
(	O
url	pointer
->	O
string	pointer
==	O
NULL	O
)	O
return	O
OSIP_NOMEM	O
;	O
osip_strncpy	function
(	O
url	pointer
->	O
string	pointer
,	O
tmp	pointer
+	O
1	int
,	O
i	int
)	O
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
username	pointer
=	O
strchr	function
(	O
buf	pointer
,	O
':'	O
)	O
;	O
if	O
(	O
username	pointer
==	O
NULL	O
)	O
return	O
OSIP_SYNTAXERROR	O
;	O
host	pointer
=	O
strchr	function
(	O
buf	pointer
,	O
'@'	O
)	O
;	O
if	O
(	O
host	pointer
==	O
NULL	O
)	O
host	pointer
=	O
username	pointer
;	O
else	O
if	O
(	O
username	pointer
[	O
1	int
]	O
==	O
'@'	O
)	O
host	pointer
=	O
username	pointer
+	O
1	int
;	O
else	O
{	O
password	pointer
=	O
next_separator	function
(	O
username	pointer
+	O
1	int
,	O
':'	O
,	O
'@'	O
)	O
;	O
if	O
(	O
password	pointer
==	O
NULL	O
)	O
password	pointer
=	O
host	pointer
;	O
else	O
{	O
if	O
(	O
host	pointer
-	O
password	pointer
<	O
2	int
)	O
return	O
OSIP_SYNTAXERROR	O
;	O
url	pointer
->	O
password	pointer
=	O
(	O
char	O
*	O
)	O
osip_malloc	O
(	O
host	pointer
-	O
password	pointer
)	O
;	O
if	O
(	O
url	pointer
->	O
password	pointer
==	O
NULL	O
)	O
return	O
OSIP_NOMEM	O
;	O
osip_strncpy	function
(	O
url	pointer
->	O
password	pointer
,	O
password	pointer
+	O
1	int
,	O
host	pointer
-	O
password	pointer
-	O
1	int
)	O
;	O
__osip_uri_unescape	function
(	O
url	pointer
->	O
password	pointer
)	O
;	O
}	O
if	O
(	O
password	pointer
-	O
username	pointer
<	O
2	int
)	O
return	O
OSIP_SYNTAXERROR	O
;	O
{	O
url	pointer
->	O
username	pointer
=	O
(	O
char	O
*	O
)	O
osip_malloc	O
(	O
password	pointer
-	O
username	pointer
)	O
;	O
if	O
(	O
url	pointer
->	O
username	pointer
==	O
NULL	O
)	O
return	O
OSIP_NOMEM	O
;	O
osip_strncpy	function
(	O
url	pointer
->	O
username	pointer
,	O
username	pointer
+	O
1	int
,	O
password	pointer
-	O
username	pointer
-	O
1	int
)	O
;	O
__osip_uri_unescape	function
(	O
url	pointer
->	O
username	pointer
)	O
;	O
}	O
}	O
headers	pointer
=	O
strchr	function
(	O
host	pointer
,	O
'?'	O
)	O
;	O
if	O
(	O
headers	pointer
==	O
NULL	O
)	O
headers	pointer
=	O
buf	pointer
+	O
strlen	function
(	O
buf	pointer
)	O
;	O
else	O
osip_uri_parse_headers	function
(	O
url	pointer
,	O
headers	pointer
)	O
;	O
params	pointer
=	O
strchr	function
(	O
host	pointer
,	O
';'	O
)	O
;	O
if	O
(	O
params	pointer
==	O
NULL	O
)	O
params	pointer
=	O
headers	pointer
;	O
else	O
{	O
char	O
*	O
tmpbuf	pointer
;	O
if	O
(	O
headers	pointer
-	O
params	pointer
+	O
1	int
<	O
2	int
)	O
return	O
OSIP_SYNTAXERROR	O
;	O
tmpbuf	pointer
=	O
osip_malloc	O
(	O
headers	pointer
-	O
params	pointer
+	O
1	int
)	O
;	O
if	O
(	O
tmpbuf	pointer
==	O
NULL	O
)	O
return	O
OSIP_NOMEM	O
;	O
tmpbuf	pointer
=	O
osip_strncpy	function
(	O
tmpbuf	pointer
,	O
params	pointer
,	O
headers	pointer
-	O
params	pointer
)	O
;	O
osip_uri_parse_params	function
(	O
url	pointer
,	O
tmpbuf	pointer
)	O
;	O
osip_free	O
(	O
tmpbuf	pointer
)	O
;	O
}	O
port	pointer
=	O
params	pointer
-	O
1	int
;	O
while	O
(	O
port	pointer
>	O
host	pointer
&&	O
*	O
port	pointer
!=	O
']'	O
&&	O
*	O
port	pointer
!=	O
':'	O
)	O
port	pointer
--	O
;	O
if	O
(	O
*	O
port	pointer
==	O
':'	O
)	O
{	O
if	O
(	O
host	pointer
==	O
port	pointer
)	O
port	pointer
=	O
params	pointer
;	O
else	O
{	O
if	O
(	O
(	O
params	pointer
-	O
port	pointer
<	O
2	int
)	O
||	O
(	O
params	pointer
-	O
port	pointer
>	O
8	int
)	O
)	O
return	O
OSIP_SYNTAXERROR	O
;	O
url	pointer
->	O
port	pointer
=	O
(	O
char	O
*	O
)	O
osip_malloc	O
(	O
params	pointer
-	O
port	pointer
)	O
;	O
if	O
(	O
url	pointer
->	O
port	pointer
==	O
NULL	O
)	O
return	O
OSIP_NOMEM	O
;	O
osip_clrncpy	function
(	O
url	pointer
->	O
port	pointer
,	O
port	pointer
+	O
1	int
,	O
params	pointer
-	O
port	pointer
-	O
1	int
)	O
;	O
}	O
}	O
else	O
port	pointer
=	O
params	pointer
;	O
tmp	pointer
=	O
port	pointer
;	O
while	O
(	O
tmp	pointer
>	O
host	pointer
&&	O
*	O
tmp	pointer
!=	O
']'	O
)	O
tmp	pointer
--	O
;	O
if	O
(	O
*	O
tmp	pointer
==	O
']'	O
)	O
{	O
port	pointer
=	O
tmp	pointer
;	O
while	O
(	O
host	pointer
<	O
port	pointer
&&	O
*	O
host	pointer
!=	O
'['	O
)	O
host	pointer
++	O
;	O
if	O
(	O
host	pointer
>=	O
port	pointer
)	O
return	O
OSIP_SYNTAXERROR	O
;	O
}	O
if	O
(	O
port	pointer
-	O
host	pointer
<	O
2	int
)	O
return	O
OSIP_SYNTAXERROR	O
;	O
url	pointer
->	O
host	pointer
=	O
(	O
char	O
*	O
)	O
osip_malloc	O
(	O
port	pointer
-	O
host	pointer
)	O
;	O
if	O
(	O
url	pointer
->	O
host	pointer
==	O
NULL	O
)	O
return	O
OSIP_NOMEM	O
;	O
osip_clrncpy	function
(	O
url	pointer
->	O
host	pointer
,	O
host	pointer
+	O
1	int
,	O
port	pointer
-	O
host	pointer
-	O
1	int
)	O
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
void	O
osip_uri_set_scheme	function
(	O
osip_uri_t	struct
*	O
url	pointer
,	O
char	O
*	O
scheme	pointer
)	O
{	O
if	O
(	O
url	pointer
==	O
NULL	O
)	O
return	O
;	O
url	pointer
->	O
scheme	pointer
=	O
scheme	pointer
;	O
}	O
char	O
*	O
osip_uri_get_scheme	function
(	O
osip_uri_t	struct
*	O
url	pointer
)	O
{	O
if	O
(	O
url	pointer
==	O
NULL	O
)	O
return	O
NULL	O
;	O
return	O
url	pointer
->	O
scheme	pointer
;	O
}	O
void	O
osip_uri_set_username	function
(	O
osip_uri_t	struct
*	O
url	pointer
,	O
char	O
*	O
username	pointer
)	O
{	O
if	O
(	O
url	pointer
==	O
NULL	O
)	O
return	O
;	O
url	pointer
->	O
username	pointer
=	O
username	pointer
;	O
}	O
char	O
*	O
osip_uri_get_username	function
(	O
osip_uri_t	struct
*	O
url	pointer
)	O
{	O
if	O
(	O
url	pointer
==	O
NULL	O
)	O
return	O
NULL	O
;	O
return	O
url	pointer
->	O
username	pointer
;	O
}	O
void	O
osip_uri_set_password	function
(	O
osip_uri_t	struct
*	O
url	pointer
,	O
char	O
*	O
password	pointer
)	O
{	O
if	O
(	O
url	pointer
==	O
NULL	O
)	O
return	O
;	O
url	pointer
->	O
password	pointer
=	O
password	pointer
;	O
}	O
char	O
*	O
osip_uri_get_password	function
(	O
osip_uri_t	struct
*	O
url	pointer
)	O
{	O
if	O
(	O
url	pointer
==	O
NULL	O
)	O
return	O
NULL	O
;	O
return	O
url	pointer
->	O
password	pointer
;	O
}	O
void	O
osip_uri_set_host	function
(	O
osip_uri_t	struct
*	O
url	pointer
,	O
char	O
*	O
host	pointer
)	O
{	O
if	O
(	O
url	pointer
==	O
NULL	O
)	O
return	O
;	O
url	pointer
->	O
host	pointer
=	O
host	pointer
;	O
}	O
char	O
*	O
osip_uri_get_host	function
(	O
osip_uri_t	struct
*	O
url	pointer
)	O
{	O
if	O
(	O
url	pointer
==	O
NULL	O
)	O
return	O
NULL	O
;	O
return	O
url	pointer
->	O
host	pointer
;	O
}	O
void	O
osip_uri_set_port	function
(	O
osip_uri_t	struct
*	O
url	pointer
,	O
char	O
*	O
port	pointer
)	O
{	O
if	O
(	O
url	pointer
==	O
NULL	O
)	O
return	O
;	O
url	pointer
->	O
port	pointer
=	O
port	pointer
;	O
}	O
char	O
*	O
osip_uri_get_port	function
(	O
osip_uri_t	struct
*	O
url	pointer
)	O
{	O
if	O
(	O
url	pointer
==	O
NULL	O
)	O
return	O
NULL	O
;	O
return	O
url	pointer
->	O
port	pointer
;	O
}	O
int	O
osip_uri_parse_headers	function
(	O
osip_uri_t	struct
*	O
url	pointer
,	O
const	O
char	O
*	O
headers	pointer
)	O
{	O
int	O
i	int
;	O
const	O
char	O
*	O
_and	pointer
;	O
const	O
char	O
*	O
equal	pointer
;	O
equal	pointer
=	O
strchr	function
(	O
headers	pointer
,	O
'='	O
)	O
;	O
_and	pointer
=	O
strchr	function
(	O
headers	pointer
+	O
1	int
,	O
'&'	O
)	O
;	O
if	O
(	O
equal	pointer
==	O
NULL	O
)	O
return	O
OSIP_SYNTAXERROR	O
;	O
do	O
{	O
char	O
*	O
hname	pointer
;	O
char	O
*	O
hvalue	pointer
;	O
hname	pointer
=	O
(	O
char	O
*	O
)	O
osip_malloc	O
(	O
equal	pointer
-	O
headers	pointer
)	O
;	O
if	O
(	O
hname	pointer
==	O
NULL	O
)	O
return	O
OSIP_NOMEM	O
;	O
osip_strncpy	function
(	O
hname	pointer
,	O
headers	pointer
+	O
1	int
,	O
equal	pointer
-	O
headers	pointer
-	O
1	int
)	O
;	O
__osip_uri_unescape	function
(	O
hname	pointer
)	O
;	O
if	O
(	O
_and	pointer
!=	O
NULL	O
)	O
{	O
if	O
(	O
_and	pointer
-	O
equal	pointer
<	O
2	int
)	O
{	O
osip_free	O
(	O
hname	pointer
)	O
;	O
return	O
OSIP_SYNTAXERROR	O
;	O
}	O
hvalue	pointer
=	O
(	O
char	O
*	O
)	O
osip_malloc	O
(	O
_and	pointer
-	O
equal	pointer
)	O
;	O
if	O
(	O
hvalue	pointer
==	O
NULL	O
)	O
{	O
osip_free	O
(	O
hname	pointer
)	O
;	O
return	O
OSIP_NOMEM	O
;	O
}	O
osip_strncpy	function
(	O
hvalue	pointer
,	O
equal	pointer
+	O
1	int
,	O
_and	pointer
-	O
equal	pointer
-	O
1	int
)	O
;	O
__osip_uri_unescape	function
(	O
hvalue	pointer
)	O
;	O
}	O
else	O
{	O
if	O
(	O
headers	pointer
+	O
strlen	function
(	O
headers	pointer
)	O
-	O
equal	pointer
+	O
1	int
<	O
2	int
)	O
{	O
osip_free	O
(	O
hname	pointer
)	O
;	O
return	O
OSIP_SYNTAXERROR	O
;	O
}	O
hvalue	pointer
=	O
(	O
char	O
*	O
)	O
osip_malloc	O
(	O
headers	pointer
+	O
strlen	function
(	O
headers	pointer
)	O
-	O
equal	pointer
+	O
1	int
)	O
;	O
if	O
(	O
hvalue	pointer
==	O
NULL	O
)	O
{	O
osip_free	O
(	O
hname	pointer
)	O
;	O
return	O
OSIP_NOMEM	O
;	O
}	O
osip_strncpy	function
(	O
hvalue	pointer
,	O
equal	pointer
+	O
1	int
,	O
headers	pointer
+	O
strlen	function
(	O
headers	pointer
)	O
-	O
equal	pointer
)	O
;	O
__osip_uri_unescape	function
(	O
hvalue	pointer
)	O
;	O
}	O
i	int
=	O
osip_uri_uheader_add	O
(	O
url	pointer
,	O
hname	pointer
,	O
hvalue	pointer
)	O
;	O
if	O
(	O
i	int
!=	O
OSIP_SUCCESS	int
)	O
{	O
osip_free	O
(	O
hname	pointer
)	O
;	O
osip_free	O
(	O
hvalue	pointer
)	O
;	O
return	O
i	int
;	O
}	O
if	O
(	O
_and	pointer
==	O
NULL	O
)	O
equal	pointer
=	O
NULL	O
;	O
else	O
{	O
headers	pointer
=	O
_and	pointer
;	O
equal	pointer
=	O
strchr	function
(	O
headers	pointer
,	O
'='	O
)	O
;	O
_and	pointer
=	O
strchr	function
(	O
headers	pointer
+	O
1	int
,	O
'&'	O
)	O
;	O
if	O
(	O
equal	pointer
==	O
NULL	O
)	O
return	O
OSIP_SYNTAXERROR	O
;	O
}	O
}	O
while	O
(	O
equal	pointer
!=	O
NULL	O
)	O
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
int	O
osip_uri_parse_params	function
(	O
osip_uri_t	struct
*	O
url	pointer
,	O
const	O
char	O
*	O
params	pointer
)	O
{	O
int	O
i	int
;	O
char	O
*	O
pname	pointer
;	O
char	O
*	O
pvalue	pointer
;	O
const	O
char	O
*	O
comma	pointer
;	O
const	O
char	O
*	O
equal	pointer
;	O
equal	pointer
=	O
next_separator	function
(	O
params	pointer
+	O
1	int
,	O
'='	O
,	O
';'	O
)	O
;	O
comma	pointer
=	O
strchr	function
(	O
params	pointer
+	O
1	int
,	O
';'	O
)	O
;	O
while	O
(	O
comma	pointer
!=	O
NULL	O
)	O
{	O
if	O
(	O
equal	pointer
==	O
NULL	O
)	O
{	O
equal	pointer
=	O
comma	pointer
;	O
pvalue	pointer
=	O
NULL	O
;	O
}	O
else	O
{	O
if	O
(	O
comma	pointer
-	O
equal	pointer
<	O
2	int
)	O
return	O
OSIP_SYNTAXERROR	O
;	O
pvalue	pointer
=	O
(	O
char	O
*	O
)	O
osip_malloc	O
(	O
comma	pointer
-	O
equal	pointer
)	O
;	O
if	O
(	O
pvalue	pointer
==	O
NULL	O
)	O
return	O
OSIP_NOMEM	O
;	O
osip_strncpy	function
(	O
pvalue	pointer
,	O
equal	pointer
+	O
1	int
,	O
comma	pointer
-	O
equal	pointer
-	O
1	int
)	O
;	O
__osip_uri_unescape	function
(	O
pvalue	pointer
)	O
;	O
}	O
if	O
(	O
equal	pointer
-	O
params	pointer
<	O
2	int
)	O
{	O
osip_free	O
(	O
pvalue	pointer
)	O
;	O
return	O
OSIP_SYNTAXERROR	O
;	O
}	O
pname	pointer
=	O
(	O
char	O
*	O
)	O
osip_malloc	O
(	O
equal	pointer
-	O
params	pointer
)	O
;	O
if	O
(	O
pname	pointer
==	O
NULL	O
)	O
{	O
osip_free	O
(	O
pvalue	pointer
)	O
;	O
return	O
OSIP_NOMEM	O
;	O
}	O
osip_strncpy	function
(	O
pname	pointer
,	O
params	pointer
+	O
1	int
,	O
equal	pointer
-	O
params	pointer
-	O
1	int
)	O
;	O
__osip_uri_unescape	function
(	O
pname	pointer
)	O
;	O
i	int
=	O
osip_uri_uparam_add	O
(	O
url	pointer
,	O
pname	pointer
,	O
pvalue	pointer
)	O
;	O
if	O
(	O
i	int
!=	O
OSIP_SUCCESS	int
)	O
{	O
osip_free	O
(	O
pname	pointer
)	O
;	O
osip_free	O
(	O
pvalue	pointer
)	O
;	O
return	O
OSIP_NOMEM	O
;	O
}	O
params	pointer
=	O
comma	pointer
;	O
equal	pointer
=	O
next_separator	function
(	O
params	pointer
+	O
1	int
,	O
'='	O
,	O
';'	O
)	O
;	O
comma	pointer
=	O
strchr	function
(	O
params	pointer
+	O
1	int
,	O
';'	O
)	O
;	O
}	O
comma	pointer
=	O
params	pointer
+	O
strlen	function
(	O
params	pointer
)	O
;	O
if	O
(	O
equal	pointer
==	O
NULL	O
)	O
{	O
equal	pointer
=	O
comma	pointer
;	O
pvalue	pointer
=	O
NULL	O
;	O
}	O
else	O
{	O
if	O
(	O
comma	pointer
-	O
equal	pointer
<	O
2	int
)	O
return	O
OSIP_SYNTAXERROR	O
;	O
pvalue	pointer
=	O
(	O
char	O
*	O
)	O
osip_malloc	O
(	O
comma	pointer
-	O
equal	pointer
)	O
;	O
if	O
(	O
pvalue	pointer
==	O
NULL	O
)	O
return	O
OSIP_NOMEM	O
;	O
osip_strncpy	function
(	O
pvalue	pointer
,	O
equal	pointer
+	O
1	int
,	O
comma	pointer
-	O
equal	pointer
-	O
1	int
)	O
;	O
__osip_uri_unescape	function
(	O
pvalue	pointer
)	O
;	O
}	O
if	O
(	O
equal	pointer
-	O
params	pointer
<	O
2	int
)	O
{	O
osip_free	O
(	O
pvalue	pointer
)	O
;	O
return	O
OSIP_SYNTAXERROR	O
;	O
}	O
pname	pointer
=	O
(	O
char	O
*	O
)	O
osip_malloc	O
(	O
equal	pointer
-	O
params	pointer
)	O
;	O
if	O
(	O
pname	pointer
==	O
NULL	O
)	O
{	O
osip_free	O
(	O
pvalue	pointer
)	O
;	O
return	O
OSIP_NOMEM	O
;	O
}	O
osip_strncpy	function
(	O
pname	pointer
,	O
params	pointer
+	O
1	int
,	O
equal	pointer
-	O
params	pointer
-	O
1	int
)	O
;	O
__osip_uri_unescape	function
(	O
pname	pointer
)	O
;	O
i	int
=	O
osip_uri_uparam_add	O
(	O
url	pointer
,	O
pname	pointer
,	O
pvalue	pointer
)	O
;	O
if	O
(	O
i	int
!=	O
OSIP_SUCCESS	int
)	O
{	O
osip_free	O
(	O
pname	pointer
)	O
;	O
osip_free	O
(	O
pvalue	pointer
)	O
;	O
return	O
OSIP_NOMEM	O
;	O
}	O
return	O
OSIP_SUCCESS	int
;	O
}	O
int	O
osip_uri_to_str	function
(	O
const	O
osip_uri_t	struct
*	O
url	pointer
,	O
char	O
*	O
*	O
dest	pointer
)	O
{	O
char	O
*	O
buf	pointer
;	O
size_t	long
len	long
;	O
size_t	long
plen	long
;	O
char	O
*	O
tmp	pointer
;	O
const	O
char	O
*	O
scheme	pointer
;	O
*	O
dest	pointer
=	O
NULL	O
;	O
if	O
(	O
url	pointer
==	O
NULL	O
)	O
return	O
OSIP_BADPARAMETER	O
;	O
if	O
(	O
url	pointer
->	O
host	pointer
==	O
NULL	O
&&	O
url	pointer
->	O
string	pointer
==	O
NULL	O
)	O
return	O
OSIP_BADPARAMETER	O
;	O
if	O
(	O
url	pointer
->	O
scheme	pointer
==	O
NULL	O
&&	O
url	pointer
->	O
string	pointer
!=	O
NULL	O
)	O
return	O
OSIP_BADPARAMETER	O
;	O
if	O
(	O
url	pointer
->	O
string	pointer
==	O
NULL	O
&&	O
url	pointer
->	O
scheme	pointer
==	O
NULL	O
)	O
scheme	pointer
=	O
"sip"	pointer
;	O
else	O
scheme	pointer
=	O
url	pointer
->	O
scheme	pointer
;	O
if	O
(	O
url	pointer
->	O
string	pointer
!=	O
NULL	O
)	O
{	O
buf	pointer
=	O
(	O
char	O
*	O
)	O
osip_malloc	O
(	O
strlen	function
(	O
scheme	pointer
)	O
+	O
strlen	function
(	O
url	pointer
->	O
string	pointer
)	O
+	O
3	int
)	O
;	O
if	O
(	O
buf	pointer
==	O
NULL	O
)	O
return	O
OSIP_NOMEM	O
;	O
*	O
dest	pointer
=	O
buf	pointer
;	O
sprintf	function
(	O
buf	pointer
,	O
"%s:"	pointer
,	O
scheme	pointer
)	O
;	O
buf	pointer
=	O
buf	pointer
+	O
strlen	function
(	O
scheme	pointer
)	O
+	O
1	int
;	O
sprintf	function
(	O
buf	pointer
,	O
"%s"	pointer
,	O
url	pointer
->	O
string	pointer
)	O
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
len	long
=	O
strlen	function
(	O
scheme	pointer
)	O
+	O
1	int
+	O
strlen	function
(	O
url	pointer
->	O
host	pointer
)	O
+	O
5	int
;	O
if	O
(	O
url	pointer
->	O
username	pointer
!=	O
NULL	O
)	O
len	long
=	O
len	long
+	O
(	O
strlen	function
(	O
url	pointer
->	O
username	pointer
)	O
*	O
3	int
)	O
+	O
1	int
;	O
if	O
(	O
url	pointer
->	O
password	pointer
!=	O
NULL	O
)	O
len	long
=	O
len	long
+	O
(	O
strlen	function
(	O
url	pointer
->	O
password	pointer
)	O
*	O
3	int
)	O
+	O
1	int
;	O
if	O
(	O
url	pointer
->	O
port	pointer
!=	O
NULL	O
)	O
len	long
=	O
len	long
+	O
strlen	function
(	O
url	pointer
->	O
port	pointer
)	O
+	O
3	int
;	O
buf	pointer
=	O
(	O
char	O
*	O
)	O
osip_malloc	O
(	O
len	long
)	O
;	O
if	O
(	O
buf	pointer
==	O
NULL	O
)	O
return	O
OSIP_NOMEM	O
;	O
tmp	pointer
=	O
buf	pointer
;	O
sprintf	function
(	O
tmp	pointer
,	O
"%s:"	pointer
,	O
scheme	pointer
)	O
;	O
tmp	pointer
=	O
tmp	pointer
+	O
strlen	function
(	O
tmp	pointer
)	O
;	O
if	O
(	O
url	pointer
->	O
username	pointer
!=	O
NULL	O
)	O
{	O
char	O
*	O
tmp2	pointer
=	O
__osip_uri_escape_userinfo	function
(	O
url	pointer
->	O
username	pointer
)	O
;	O
if	O
(	O
tmp2	pointer
==	O
NULL	O
)	O
{	O
osip_free	O
(	O
buf	pointer
)	O
;	O
return	O
OSIP_NOMEM	O
;	O
}	O
sprintf	function
(	O
tmp	pointer
,	O
"%s"	pointer
,	O
tmp2	pointer
)	O
;	O
osip_free	O
(	O
tmp2	pointer
)	O
;	O
tmp	pointer
=	O
tmp	pointer
+	O
strlen	function
(	O
tmp	pointer
)	O
;	O
}	O
if	O
(	O
(	O
url	pointer
->	O
password	pointer
!=	O
NULL	O
)	O
&&	O
(	O
url	pointer
->	O
username	pointer
!=	O
NULL	O
)	O
)	O
{	O
char	O
*	O
tmp2	pointer
=	O
__osip_uri_escape_password	function
(	O
url	pointer
->	O
password	pointer
)	O
;	O
if	O
(	O
tmp2	pointer
==	O
NULL	O
)	O
{	O
osip_free	O
(	O
buf	pointer
)	O
;	O
return	O
OSIP_NOMEM	O
;	O
}	O
sprintf	function
(	O
tmp	pointer
,	O
":%s"	pointer
,	O
tmp2	pointer
)	O
;	O
osip_free	O
(	O
tmp2	pointer
)	O
;	O
tmp	pointer
=	O
tmp	pointer
+	O
strlen	function
(	O
tmp	pointer
)	O
;	O
}	O
if	O
(	O
url	pointer
->	O
username	pointer
!=	O
NULL	O
)	O
{	O
sprintf	function
(	O
tmp	pointer
,	O
"@"	pointer
)	O
;	O
tmp	pointer
++	O
;	O
}	O
if	O
(	O
strchr	function
(	O
url	pointer
->	O
host	pointer
,	O
':'	O
)	O
!=	O
NULL	O
)	O
{	O
sprintf	function
(	O
tmp	pointer
,	O
"[%s]"	pointer
,	O
url	pointer
->	O
host	pointer
)	O
;	O
tmp	pointer
=	O
tmp	pointer
+	O
strlen	function
(	O
tmp	pointer
)	O
;	O
}	O
else	O
{	O
sprintf	function
(	O
tmp	pointer
,	O
"%s"	pointer
,	O
url	pointer
->	O
host	pointer
)	O
;	O
tmp	pointer
=	O
tmp	pointer
+	O
strlen	function
(	O
tmp	pointer
)	O
;	O
}	O
if	O
(	O
url	pointer
->	O
port	pointer
!=	O
NULL	O
)	O
{	O
sprintf	function
(	O
tmp	pointer
,	O
":%s"	pointer
,	O
url	pointer
->	O
port	pointer
)	O
;	O
tmp	pointer
=	O
tmp	pointer
+	O
strlen	function
(	O
tmp	pointer
)	O
;	O
}	O
{	O
osip_list_iterator_t	struct
it	pointer
;	O
osip_uri_param_t	struct
*	O
u_param	pointer
=	O
(	O
osip_uri_param_t	struct
*	O
)	O
osip_list_get_first	function
(	O
&	O
url	pointer
->	O
url_params	pointer
,	O
&	O
it	pointer
)	O
;	O
while	O
(	O
u_param	pointer
!=	O
OSIP_SUCCESS	int
)	O
{	O
char	O
*	O
tmp1	pointer
;	O
char	O
*	O
tmp2	pointer
=	O
NULL	O
;	O
char	O
*	O
previous_buf	pointer
;	O
if	O
(	O
osip_strcasecmp	function
(	O
u_param	pointer
->	O
gname	pointer
,	O
"x-obr"	pointer
)	O
==	O
0	int
||	O
osip_strcasecmp	function
(	O
u_param	pointer
->	O
gname	pointer
,	O
"x-obp"	pointer
)	O
==	O
0	int
)	O
{	O
u_param	pointer
=	O
(	O
osip_uri_param_t	struct
*	O
)	O
osip_list_get_next	function
(	O
&	O
it	pointer
)	O
;	O
continue	O
;	O
}	O
tmp1	pointer
=	O
__osip_uri_escape_uri_param	function
(	O
u_param	pointer
->	O
gname	pointer
)	O
;	O
if	O
(	O
tmp1	pointer
==	O
NULL	O
)	O
{	O
osip_free	O
(	O
buf	pointer
)	O
;	O
return	O
OSIP_SYNTAXERROR	O
;	O
}	O
if	O
(	O
u_param	pointer
->	O
gvalue	pointer
==	O
NULL	O
)	O
plen	long
=	O
strlen	function
(	O
tmp1	pointer
)	O
+	O
2	int
;	O
else	O
{	O
tmp2	pointer
=	O
__osip_uri_escape_uri_param	function
(	O
u_param	pointer
->	O
gvalue	pointer
)	O
;	O
if	O
(	O
tmp2	pointer
==	O
NULL	O
)	O
{	O
osip_free	O
(	O
tmp1	pointer
)	O
;	O
osip_free	O
(	O
buf	pointer
)	O
;	O
return	O
OSIP_SYNTAXERROR	O
;	O
}	O
plen	long
=	O
strlen	function
(	O
tmp1	pointer
)	O
+	O
strlen	function
(	O
tmp2	pointer
)	O
+	O
3	int
;	O
}	O
len	long
=	O
len	long
+	O
plen	long
;	O
previous_buf	pointer
=	O
buf	pointer
;	O
buf	pointer
=	O
(	O
char	O
*	O
)	O
osip_realloc	O
(	O
buf	pointer
,	O
len	long
)	O
;	O
if	O
(	O
buf	pointer
==	O
NULL	O
)	O
{	O
osip_free	O
(	O
previous_buf	pointer
)	O
;	O
osip_free	O
(	O
tmp1	pointer
)	O
;	O
osip_free	O
(	O
tmp2	pointer
)	O
;	O
return	O
OSIP_NOMEM	O
;	O
}	O
tmp	pointer
=	O
buf	pointer
;	O
tmp	pointer
=	O
tmp	pointer
+	O
strlen	function
(	O
tmp	pointer
)	O
;	O
if	O
(	O
u_param	pointer
->	O
gvalue	pointer
==	O
NULL	O
)	O
sprintf	function
(	O
tmp	pointer
,	O
";%s"	pointer
,	O
tmp1	pointer
)	O
;	O
else	O
{	O
sprintf	function
(	O
tmp	pointer
,	O
";%s=%s"	pointer
,	O
tmp1	pointer
,	O
tmp2	pointer
)	O
;	O
osip_free	O
(	O
tmp2	pointer
)	O
;	O
}	O
osip_free	O
(	O
tmp1	pointer
)	O
;	O
u_param	pointer
=	O
(	O
osip_uri_param_t	struct
*	O
)	O
osip_list_get_next	function
(	O
&	O
it	pointer
)	O
;	O
}	O
}	O
{	O
osip_list_iterator_t	struct
it	pointer
;	O
osip_uri_header_t	struct
*	O
u_header	pointer
=	O
(	O
osip_uri_header_t	struct
*	O
)	O
osip_list_get_first	function
(	O
&	O
url	pointer
->	O
url_headers	struct
,	O
&	O
it	pointer
)	O
;	O
while	O
(	O
u_header	pointer
!=	O
OSIP_SUCCESS	int
)	O
{	O
char	O
*	O
tmp1	pointer
;	O
char	O
*	O
tmp2	pointer
;	O
char	O
*	O
previous_buf	pointer
;	O
tmp1	pointer
=	O
__osip_uri_escape_header_param	function
(	O
u_header	pointer
->	O
gname	pointer
)	O
;	O
if	O
(	O
tmp1	pointer
==	O
NULL	O
)	O
{	O
osip_free	O
(	O
buf	pointer
)	O
;	O
return	O
OSIP_SYNTAXERROR	O
;	O
}	O
tmp2	pointer
=	O
__osip_uri_escape_header_param	function
(	O
u_header	pointer
->	O
gvalue	pointer
)	O
;	O
if	O
(	O
tmp2	pointer
==	O
NULL	O
)	O
{	O
osip_free	O
(	O
tmp1	pointer
)	O
;	O
osip_free	O
(	O
buf	pointer
)	O
;	O
return	O
OSIP_SYNTAXERROR	O
;	O
}	O
plen	long
=	O
strlen	function
(	O
tmp1	pointer
)	O
+	O
strlen	function
(	O
tmp2	pointer
)	O
+	O
4	int
;	O
len	long
=	O
len	long
+	O
plen	long
;	O
previous_buf	pointer
=	O
buf	pointer
;	O
buf	pointer
=	O
(	O
char	O
*	O
)	O
osip_realloc	O
(	O
buf	pointer
,	O
len	long
)	O
;	O
if	O
(	O
buf	pointer
==	O
NULL	O
)	O
{	O
osip_free	O
(	O
previous_buf	pointer
)	O
;	O
osip_free	O
(	O
tmp1	pointer
)	O
;	O
osip_free	O
(	O
tmp2	pointer
)	O
;	O
return	O
OSIP_NOMEM	O
;	O
}	O
tmp	pointer
=	O
buf	pointer
;	O
tmp	pointer
=	O
tmp	pointer
+	O
strlen	function
(	O
tmp	pointer
)	O
;	O
if	O
(	O
it	pointer
.	O
pos	int
==	O
0	int
)	O
snprintf	function
(	O
tmp	pointer
,	O
len	long
-	O
(	O
tmp	pointer
-	O
buf	pointer
)	O
,	O
"?%s=%s"	pointer
,	O
tmp1	pointer
,	O
tmp2	pointer
)	O
;	O
else	O
snprintf	function
(	O
tmp	pointer
,	O
len	long
-	O
(	O
tmp	pointer
-	O
buf	pointer
)	O
,	O
"&%s=%s"	pointer
,	O
tmp1	pointer
,	O
tmp2	pointer
)	O
;	O
osip_free	O
(	O
tmp1	pointer
)	O
;	O
osip_free	O
(	O
tmp2	pointer
)	O
;	O
u_header	pointer
=	O
(	O
osip_uri_header_t	struct
*	O
)	O
osip_list_get_next	function
(	O
&	O
it	pointer
)	O
;	O
}	O
}	O
*	O
dest	pointer
=	O
buf	pointer
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
void	O
osip_uri_free	function
(	O
osip_uri_t	struct
*	O
url	pointer
)	O
{	O
if	O
(	O
url	pointer
==	O
NULL	O
)	O
return	O
;	O
osip_free	O
(	O
url	pointer
->	O
scheme	pointer
)	O
;	O
osip_free	O
(	O
url	pointer
->	O
username	pointer
)	O
;	O
osip_free	O
(	O
url	pointer
->	O
password	pointer
)	O
;	O
osip_free	O
(	O
url	pointer
->	O
host	pointer
)	O
;	O
osip_free	O
(	O
url	pointer
->	O
port	pointer
)	O
;	O
osip_uri_param_freelist	function
(	O
&	O
url	pointer
->	O
url_params	pointer
)	O
;	O
{	O
osip_uri_header_t	struct
*	O
u_header	pointer
;	O
while	O
(	O
!	O
osip_list_eol	function
(	O
&	O
url	pointer
->	O
url_headers	struct
,	O
0	int
)	O
)	O
{	O
u_header	pointer
=	O
(	O
osip_uri_header_t	struct
*	O
)	O
osip_list_get	function
(	O
&	O
url	pointer
->	O
url_headers	struct
,	O
0	int
)	O
;	O
osip_list_remove	function
(	O
&	O
url	pointer
->	O
url_headers	struct
,	O
0	int
)	O
;	O
osip_uri_header_free	O
(	O
u_header	pointer
)	O
;	O
}	O
}	O
osip_free	O
(	O
url	pointer
->	O
string	pointer
)	O
;	O
osip_free	O
(	O
url	pointer
)	O
;	O
}	O
int	O
osip_uri_clone	function
(	O
const	O
osip_uri_t	struct
*	O
url	pointer
,	O
osip_uri_t	struct
*	O
*	O
dest	pointer
)	O
{	O
int	O
i	int
;	O
osip_uri_t	struct
*	O
ur	pointer
;	O
*	O
dest	pointer
=	O
NULL	O
;	O
if	O
(	O
url	pointer
==	O
NULL	O
)	O
return	O
OSIP_BADPARAMETER	O
;	O
if	O
(	O
url	pointer
->	O
host	pointer
==	O
NULL	O
&&	O
url	pointer
->	O
string	pointer
==	O
NULL	O
)	O
return	O
OSIP_BADPARAMETER	O
;	O
i	int
=	O
osip_uri_init	function
(	O
&	O
ur	pointer
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
return	O
i	int
;	O
if	O
(	O
url	pointer
->	O
scheme	pointer
!=	O
NULL	O
)	O
ur	pointer
->	O
scheme	pointer
=	O
osip_strdup	function
(	O
url	pointer
->	O
scheme	pointer
)	O
;	O
if	O
(	O
url	pointer
->	O
username	pointer
!=	O
NULL	O
)	O
ur	pointer
->	O
username	pointer
=	O
osip_strdup	function
(	O
url	pointer
->	O
username	pointer
)	O
;	O
if	O
(	O
url	pointer
->	O
password	pointer
!=	O
NULL	O
)	O
ur	pointer
->	O
password	pointer
=	O
osip_strdup	function
(	O
url	pointer
->	O
password	pointer
)	O
;	O
if	O
(	O
url	pointer
->	O
host	pointer
!=	O
NULL	O
)	O
ur	pointer
->	O
host	pointer
=	O
osip_strdup	function
(	O
url	pointer
->	O
host	pointer
)	O
;	O
if	O
(	O
url	pointer
->	O
port	pointer
!=	O
NULL	O
)	O
ur	pointer
->	O
port	pointer
=	O
osip_strdup	function
(	O
url	pointer
->	O
port	pointer
)	O
;	O
if	O
(	O
url	pointer
->	O
string	pointer
!=	O
NULL	O
)	O
ur	pointer
->	O
string	pointer
=	O
osip_strdup	function
(	O
url	pointer
->	O
string	pointer
)	O
;	O
i	int
=	O
osip_list_clone	function
(	O
&	O
url	pointer
->	O
url_params	pointer
,	O
&	O
ur	pointer
->	O
url_params	pointer
,	O
(	O
int	O
(	O
*	O
)	O
(	O
void	O
*	O
,	O
void	O
*	O
*	O
)	O
)	O
&	O
osip_uri_param_clone	function
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
osip_uri_free	function
(	O
ur	pointer
)	O
;	O
return	O
i	int
;	O
}	O
i	int
=	O
osip_list_clone	function
(	O
&	O
url	pointer
->	O
url_headers	struct
,	O
&	O
ur	pointer
->	O
url_headers	struct
,	O
(	O
int	O
(	O
*	O
)	O
(	O
void	O
*	O
,	O
void	O
*	O
*	O
)	O
)	O
&	O
osip_uri_param_clone	function
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
osip_uri_free	function
(	O
ur	pointer
)	O
;	O
return	O
i	int
;	O
}	O
*	O
dest	pointer
=	O
ur	pointer
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
int	O
osip_uri_param_init	function
(	O
osip_uri_param_t	struct
*	O
*	O
url_param	pointer
)	O
{	O
*	O
url_param	pointer
=	O
(	O
osip_uri_param_t	struct
*	O
)	O
osip_malloc	O
(	O
sizeof	O
(	O
osip_uri_param_t	struct
)	O
)	O
;	O
if	O
(	O
*	O
url_param	pointer
==	O
NULL	O
)	O
return	O
OSIP_NOMEM	O
;	O
(	O
*	O
url_param	pointer
)	O
->	O
gname	pointer
=	O
NULL	O
;	O
(	O
*	O
url_param	pointer
)	O
->	O
gvalue	pointer
=	O
NULL	O
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
void	O
osip_uri_param_free	function
(	O
osip_uri_param_t	struct
*	O
url_param	pointer
)	O
{	O
osip_free	O
(	O
url_param	pointer
->	O
gname	pointer
)	O
;	O
osip_free	O
(	O
url_param	pointer
->	O
gvalue	pointer
)	O
;	O
osip_free	O
(	O
url_param	pointer
)	O
;	O
}	O
int	O
osip_uri_param_set	function
(	O
osip_uri_param_t	struct
*	O
url_param	pointer
,	O
char	O
*	O
pname	pointer
,	O
char	O
*	O
pvalue	pointer
)	O
{	O
url_param	pointer
->	O
gname	pointer
=	O
pname	pointer
;	O
osip_clrspace	function
(	O
url_param	pointer
->	O
gname	pointer
)	O
;	O
url_param	pointer
->	O
gvalue	pointer
=	O
pvalue	pointer
;	O
if	O
(	O
url_param	pointer
->	O
gvalue	pointer
!=	O
NULL	O
)	O
osip_clrspace	function
(	O
url_param	pointer
->	O
gvalue	pointer
)	O
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
int	O
osip_uri_param_add	function
(	O
osip_list_t	struct
*	O
url_params	pointer
,	O
char	O
*	O
pname	pointer
,	O
char	O
*	O
pvalue	pointer
)	O
{	O
int	O
i	int
;	O
osip_uri_param_t	struct
*	O
url_param	pointer
;	O
i	int
=	O
osip_uri_param_init	function
(	O
&	O
url_param	pointer
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
return	O
i	int
;	O
i	int
=	O
osip_uri_param_set	function
(	O
url_param	pointer
,	O
pname	pointer
,	O
pvalue	pointer
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
osip_uri_param_free	function
(	O
url_param	pointer
)	O
;	O
return	O
i	int
;	O
}	O
osip_list_add	function
(	O
url_params	pointer
,	O
url_param	pointer
,	O
-	O
1	int
)	O
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
void	O
osip_uri_param_freelist	function
(	O
osip_list_t	struct
*	O
params	pointer
)	O
{	O
osip_uri_param_t	struct
*	O
u_param	pointer
;	O
while	O
(	O
!	O
osip_list_eol	function
(	O
params	pointer
,	O
0	int
)	O
)	O
{	O
u_param	pointer
=	O
(	O
osip_uri_param_t	struct
*	O
)	O
osip_list_get	function
(	O
params	pointer
,	O
0	int
)	O
;	O
osip_list_remove	function
(	O
params	pointer
,	O
0	int
)	O
;	O
osip_uri_param_free	function
(	O
u_param	pointer
)	O
;	O
}	O
}	O
int	O
osip_uri_param_get_byname	function
(	O
osip_list_t	struct
*	O
params	pointer
,	O
char	O
*	O
pname	pointer
,	O
osip_uri_param_t	struct
*	O
*	O
url_param	pointer
)	O
{	O
size_t	long
pname_len	long
;	O
osip_uri_param_t	struct
*	O
u_param	pointer
;	O
osip_list_iterator_t	struct
it	pointer
;	O
*	O
url_param	pointer
=	O
NULL	O
;	O
if	O
(	O
pname	pointer
==	O
NULL	O
)	O
return	O
OSIP_BADPARAMETER	O
;	O
pname_len	long
=	O
strlen	function
(	O
pname	pointer
)	O
;	O
if	O
(	O
pname_len	long
<=	O
0	int
)	O
return	O
OSIP_BADPARAMETER	O
;	O
u_param	pointer
=	O
(	O
osip_uri_param_t	struct
*	O
)	O
osip_list_get_first	function
(	O
params	pointer
,	O
&	O
it	pointer
)	O
;	O
while	O
(	O
u_param	pointer
!=	O
OSIP_SUCCESS	int
)	O
{	O
size_t	long
len	long
;	O
len	long
=	O
strlen	function
(	O
u_param	pointer
->	O
gname	pointer
)	O
;	O
if	O
(	O
pname_len	long
==	O
len	long
&&	O
osip_strncasecmp	function
(	O
u_param	pointer
->	O
gname	pointer
,	O
pname	pointer
,	O
strlen	function
(	O
pname	pointer
)	O
)	O
==	O
0	int
)	O
{	O
*	O
url_param	pointer
=	O
u_param	pointer
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
u_param	pointer
=	O
(	O
osip_uri_param_t	struct
*	O
)	O
osip_list_get_next	function
(	O
&	O
it	pointer
)	O
;	O
}	O
return	O
OSIP_UNDEFINED_ERROR	O
;	O
}	O
int	O
osip_uri_param_clone	function
(	O
const	O
osip_uri_param_t	struct
*	O
uparam	pointer
,	O
osip_uri_param_t	struct
*	O
*	O
dest	pointer
)	O
{	O
int	O
i	int
;	O
osip_uri_param_t	struct
*	O
up	pointer
;	O
*	O
dest	pointer
=	O
NULL	O
;	O
if	O
(	O
uparam	pointer
==	O
NULL	O
)	O
return	O
OSIP_BADPARAMETER	O
;	O
if	O
(	O
uparam	pointer
->	O
gname	pointer
==	O
NULL	O
)	O
return	O
OSIP_BADPARAMETER	O
;	O
i	int
=	O
osip_uri_param_init	function
(	O
&	O
up	pointer
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
return	O
i	int
;	O
up	pointer
->	O
gname	pointer
=	O
osip_strdup	function
(	O
uparam	pointer
->	O
gname	pointer
)	O
;	O
if	O
(	O
uparam	pointer
->	O
gvalue	pointer
!=	O
NULL	O
)	O
up	pointer
->	O
gvalue	pointer
=	O
osip_strdup	function
(	O
uparam	pointer
->	O
gvalue	pointer
)	O
;	O
else	O
up	pointer
->	O
gvalue	pointer
=	O
NULL	O
;	O
*	O
dest	pointer
=	O
up	pointer
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
char	O
*	O
__osip_uri_escape_nonascii_and_nondef	function
(	O
const	O
char	O
*	O
string	pointer
,	O
const	O
char	O
*	O
def	pointer
)	O
{	O
size_t	long
alloc	long
=	O
strlen	function
(	O
string	pointer
)	O
+	O
1	int
;	O
size_t	long
length	long
;	O
char	O
*	O
ns	pointer
=	O
(	O
char	O
*	O
)	O
osip_malloc	O
(	O
alloc	long
)	O
;	O
unsigned	O
char	O
in	char
;	O
size_t	long
newlen	long
=	O
alloc	long
;	O
int	O
index	function
=	O
0	int
;	O
const	O
char	O
*	O
tmp	pointer
;	O
int	O
i	int
;	O
if	O
(	O
ns	pointer
==	O
NULL	O
)	O
return	O
NULL	O
;	O
length	long
=	O
alloc	long
-	O
1	int
;	O
while	O
(	O
length	long
--	O
)	O
{	O
in	char
=	O
*	O
string	pointer
;	O
i	int
=	O
0	int
;	O
tmp	pointer
=	O
NULL	O
;	O
if	O
(	O
osip_is_alphanum	O
(	O
in	char
)	O
)	O
tmp	pointer
=	O
string	pointer
;	O
else	O
{	O
for	O
(	O
;	O
def	pointer
[	O
i	int
]	O
!=	O
'\0'	O
&&	O
def	pointer
[	O
i	int
]	O
!=	O
in	char
;	O
i	int
++	O
)	O
{	O
}	O
if	O
(	O
def	pointer
[	O
i	int
]	O
!=	O
'\0'	O
)	O
tmp	pointer
=	O
string	pointer
;	O
}	O
if	O
(	O
tmp	pointer
==	O
NULL	O
)	O
{	O
newlen	long
+=	O
2	int
;	O
if	O
(	O
newlen	long
>	O
alloc	long
)	O
{	O
char	O
*	O
previous_ns	pointer
;	O
alloc	long
*=	O
2	int
;	O
previous_ns	pointer
=	O
ns	pointer
;	O
ns	pointer
=	O
osip_realloc	O
(	O
ns	pointer
,	O
alloc	long
)	O
;	O
if	O
(	O
!	O
ns	pointer
)	O
{	O
osip_free	O
(	O
previous_ns	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
}	O
sprintf	function
(	O
&	O
ns	pointer
[	O
index	function
]	O
,	O
"%%%02X"	pointer
,	O
in	char
)	O
;	O
index	function
+=	O
3	int
;	O
}	O
else	O
{	O
ns	pointer
[	O
index	function
++	O
]	O
=	O
in	char
;	O
}	O
string	pointer
++	O
;	O
}	O
ns	pointer
[	O
index	function
]	O
=	O
0	int
;	O
return	O
ns	pointer
;	O
}	O
const	O
char	O
*	O
userinfo_def	pointer
=	O
_MARK__USER_UNRESERVED_	pointer
;	O
char	O
*	O
__osip_uri_escape_userinfo	function
(	O
const	O
char	O
*	O
string	pointer
)	O
{	O
return	O
__osip_uri_escape_nonascii_and_nondef	function
(	O
string	pointer
,	O
userinfo_def	pointer
)	O
;	O
}	O
const	O
char	O
*	O
password_def	pointer
=	O
_MARK__PWORD_UNRESERVED_	pointer
;	O
char	O
*	O
__osip_uri_escape_password	function
(	O
const	O
char	O
*	O
string	pointer
)	O
{	O
return	O
__osip_uri_escape_nonascii_and_nondef	function
(	O
string	pointer
,	O
password_def	pointer
)	O
;	O
}	O
const	O
char	O
*	O
uri_param_def	pointer
=	O
_MARK__URI_PARAM_UNRESERVED_	pointer
;	O
char	O
*	O
__osip_uri_escape_uri_param	function
(	O
char	O
*	O
string	pointer
)	O
{	O
return	O
__osip_uri_escape_nonascii_and_nondef	function
(	O
string	pointer
,	O
uri_param_def	pointer
)	O
;	O
}	O
const	O
char	O
*	O
header_param_def	pointer
=	O
_MARK__HEADER_PARAM_UNRESERVED_	pointer
;	O
char	O
*	O
__osip_uri_escape_header_param	function
(	O
char	O
*	O
string	pointer
)	O
{	O
return	O
__osip_uri_escape_nonascii_and_nondef	function
(	O
string	pointer
,	O
header_param_def	pointer
)	O
;	O
}	O
void	O
__osip_uri_unescape	function
(	O
char	O
*	O
string	pointer
)	O
{	O
size_t	long
alloc	long
=	O
strlen	function
(	O
string	pointer
)	O
+	O
1	int
;	O
unsigned	O
char	O
in	char
;	O
int	O
index	function
=	O
0	int
;	O
unsigned	O
int	O
hex	int
;	O
char	O
*	O
ptr	pointer
;	O
ptr	pointer
=	O
string	pointer
;	O
while	O
(	O
--	O
alloc	long
>	O
0	int
)	O
{	O
in	char
=	O
*	O
ptr	pointer
;	O
if	O
(	O
'%'	O
==	O
in	char
)	O
{	O
if	O
(	O
alloc	long
>	O
2	int
&&	O
sscanf	function
(	O
ptr	pointer
+	O
1	int
,	O
"%02X"	pointer
,	O
&	O
hex	int
)	O
==	O
1	int
)	O
{	O
in	char
=	O
(	O
unsigned	O
char	O
)	O
hex	int
;	O
if	O
(	O
*	O
(	O
ptr	pointer
+	O
2	int
)	O
&&	O
(	O
(	O
*	O
(	O
ptr	pointer
+	O
2	int
)	O
>=	O
'0'	O
&&	O
*	O
(	O
ptr	pointer
+	O
2	int
)	O
<=	O
'9'	O
)	O
||	O
(	O
*	O
(	O
ptr	pointer
+	O
2	int
)	O
>=	O
'a'	O
&&	O
*	O
(	O
ptr	pointer
+	O
2	int
)	O
<=	O
'f'	O
)	O
||	O
(	O
*	O
(	O
ptr	pointer
+	O
2	int
)	O
>=	O
'A'	O
&&	O
*	O
(	O
ptr	pointer
+	O
2	int
)	O
<=	O
'F'	O
)	O
)	O
)	O
{	O
alloc	long
-=	O
2	int
;	O
ptr	pointer
+=	O
2	int
;	O
}	O
else	O
{	O
alloc	long
-=	O
1	int
;	O
ptr	pointer
+=	O
1	int
;	O
}	O
}	O
else	O
{	O
break	O
;	O
}	O
}	O
string	pointer
[	O
index	function
++	O
]	O
=	O
in	char
;	O
ptr	pointer
++	O
;	O
}	O
string	pointer
[	O
index	function
]	O
=	O
0	int
;	O
}	O
int	O
osip_uri_to_str_canonical	function
(	O
const	O
osip_uri_t	struct
*	O
url	pointer
,	O
char	O
*	O
*	O
dest	pointer
)	O
{	O
int	O
result	int
;	O
*	O
dest	pointer
=	O
NULL	O
;	O
result	int
=	O
osip_uri_to_str	function
(	O
url	pointer
,	O
dest	pointer
)	O
;	O
if	O
(	O
result	int
==	O
0	int
)	O
{	O
__osip_uri_unescape	function
(	O
*	O
dest	pointer
)	O
;	O
}	O
return	O
result	int
;	O
}	O
