struct	O
dynvec	struct
*	O
make_dynvec	function
(	O
int	O
n	int
)	O
{	O
struct	O
dynvec	struct
*	O
dv	struct
=	O
xmalloc	function
(	O
sizeof	O
(	O
struct	O
dynvec	struct
)	O
*	O
1	int
)	O
;	O
dv	struct
->	O
dv_vec	double
=	O
xmalloc	function
(	O
sizeof	O
(	O
void	O
*	O
)	O
*	O
n	int
)	O
;	O
dv	struct
->	O
dv_capacity	pointer
=	O
n	int
;	O
dv	struct
->	O
dv_fill	int
=	O
0	int
;	O
return	O
dv	struct
;	O
}	O
void	O
dynvec_free	function
(	O
struct	O
dynvec	struct
*	O
dv	struct
)	O
{	O
free	function
(	O
dv	struct
->	O
dv_vec	pointer
)	O
;	O
free	function
(	O
dv	struct
)	O
;	O
}	O
void	O
dynvec_freeze	function
(	O
struct	O
dynvec	struct
*	O
dv	struct
)	O
{	O
if	O
(	O
dv	struct
->	O
dv_fill	int
==	O
dv	struct
->	O
dv_capacity	int
)	O
return	O
;	O
dv	struct
->	O
dv_capacity	int
=	O
dv	struct
->	O
dv_fill	int
;	O
dv	struct
->	O
dv_vec	pointer
=	O
xrealloc	function
(	O
dv	struct
->	O
dv_vec	double
,	O
sizeof	O
(	O
void	O
*	O
)	O
*	O
dv	struct
->	O
dv_capacity	pointer
)	O
;	O
}	O
void	O
dynvec_append	function
(	O
struct	O
dynvec	struct
*	O
dv	struct
,	O
void	O
*	O
element	pointer
)	O
{	O
if	O
(	O
dv	struct
->	O
dv_fill	int
==	O
dv	struct
->	O
dv_capacity	int
)	O
{	O
dv	struct
->	O
dv_capacity	int
*=	O
2	int
;	O
dv	struct
->	O
dv_vec	int
=	O
xrealloc	function
(	O
dv	struct
->	O
dv_vec	double
,	O
sizeof	O
(	O
void	O
*	O
)	O
*	O
dv	struct
->	O
dv_capacity	pointer
)	O
;	O
}	O
dv	struct
->	O
dv_vec	array
[	O
dv	struct
->	O
dv_fill	int
++	O
]	O
=	O
element	pointer
;	O
}	O