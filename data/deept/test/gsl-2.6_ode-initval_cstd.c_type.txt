typedef	O
struct	O
{	O
double	O
eps_abs	double
;	O
double	O
eps_rel	double
;	O
double	O
a_y	double
;	O
double	O
a_dydt	double
;	O
}	O
std_control_state_t	struct
;	O
static	O
void	O
*	O
std_control_alloc	function
(	O
void	O
)	O
{	O
std_control_state_t	struct
*	O
s	pointer
=	O
(	O
std_control_state_t	struct
*	O
)	O
malloc	function
(	O
sizeof	O
(	O
std_control_state_t	struct
)	O
)	O
;	O
if	O
(	O
s	pointer
==	O
0	int
)	O
{	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for std_control_state"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
return	O
s	pointer
;	O
}	O
static	O
int	O
std_control_init	function
(	O
void	O
*	O
vstate	pointer
,	O
double	O
eps_abs	double
,	O
double	O
eps_rel	double
,	O
double	O
a_y	double
,	O
double	O
a_dydt	double
)	O
{	O
std_control_state_t	struct
*	O
s	pointer
=	O
(	O
std_control_state_t	struct
*	O
)	O
vstate	pointer
;	O
if	O
(	O
eps_abs	double
<	O
0	int
)	O
{	O
GSL_ERROR	O
(	O
"eps_abs is negative"	pointer
,	O
GSL_EINVAL	int
)	O
;	O
}	O
else	O
if	O
(	O
eps_rel	double
<	O
0	int
)	O
{	O
GSL_ERROR	O
(	O
"eps_rel is negative"	pointer
,	O
GSL_EINVAL	int
)	O
;	O
}	O
else	O
if	O
(	O
a_y	double
<	O
0	int
)	O
{	O
GSL_ERROR	O
(	O
"a_y is negative"	pointer
,	O
GSL_EINVAL	int
)	O
;	O
}	O
else	O
if	O
(	O
a_dydt	double
<	O
0	int
)	O
{	O
GSL_ERROR	O
(	O
"a_dydt is negative"	pointer
,	O
GSL_EINVAL	int
)	O
;	O
}	O
s	pointer
->	O
eps_rel	double
=	O
eps_rel	double
;	O
s	pointer
->	O
eps_abs	double
=	O
eps_abs	double
;	O
s	pointer
->	O
a_y	double
=	O
a_y	double
;	O
s	pointer
->	O
a_dydt	double
=	O
a_dydt	double
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
int	O
std_control_hadjust	function
(	O
void	O
*	O
vstate	pointer
,	O
size_t	long
dim	long
,	O
unsigned	O
int	O
ord	int
,	O
const	O
double	O
y	double
[	O
]	O
,	O
const	O
double	O
yerr	array
[	O
]	O
,	O
const	O
double	O
yp	pointer
[	O
]	O
,	O
double	O
*	O
h	pointer
)	O
{	O
std_control_state_t	struct
*	O
state	pointer
=	O
(	O
std_control_state_t	struct
*	O
)	O
vstate	pointer
;	O
const	O
double	O
eps_abs	double
=	O
state	pointer
->	O
eps_abs	double
;	O
const	O
double	O
eps_rel	double
=	O
state	pointer
->	O
eps_rel	double
;	O
const	O
double	O
a_y	double
=	O
state	pointer
->	O
a_y	double
;	O
const	O
double	O
a_dydt	double
=	O
state	pointer
->	O
a_dydt	double
;	O
const	O
double	O
S	double
=	O
0.9	int
;	O
const	O
double	O
h_old	double
=	O
*	O
h	pointer
;	O
double	O
rmax	double
=	O
DBL_MIN	O
;	O
size_t	long
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
dim	long
;	O
i	long
++	O
)	O
{	O
const	O
double	O
D0	double
=	O
eps_rel	double
*	O
(	O
a_y	double
*	O
fabs	function
(	O
y	double
[	O
i	long
]	O
)	O
+	O
a_dydt	double
*	O
fabs	function
(	O
h_old	double
*	O
yp	pointer
[	O
i	long
]	O
)	O
)	O
+	O
eps_abs	double
;	O
const	O
double	O
r	double
=	O
fabs	function
(	O
yerr	array
[	O
i	int
]	O
)	O
/	O
fabs	function
(	O
D0	double
)	O
;	O
rmax	double
=	O
GSL_MAX_DBL	function
(	O
r	int
,	O
rmax	double
)	O
;	O
}	O
if	O
(	O
rmax	double
>	O
1.1	int
)	O
{	O
double	O
r	double
=	O
S	double
/	O
pow	function
(	O
rmax	double
,	O
1.0	int
/	O
ord	int
)	O
;	O
if	O
(	O
r	int
<	O
0.2	int
)	O
r	int
=	O
0.2	int
;	O
*	O
h	pointer
=	O
r	int
*	O
h_old	double
;	O
return	O
GSL_ODEIV_HADJ_DEC	O
;	O
}	O
else	O
if	O
(	O
rmax	double
<	O
0.5	int
)	O
{	O
double	O
r	double
=	O
S	double
/	O
pow	function
(	O
rmax	double
,	O
1.0	int
/	O
(	O
ord	int
+	O
1.0	int
)	O
)	O
;	O
if	O
(	O
r	int
>	O
5.0	int
)	O
r	int
=	O
5.0	int
;	O
if	O
(	O
r	int
<	O
1.0	int
)	O
r	int
=	O
1.0	int
;	O
*	O
h	pointer
=	O
r	int
*	O
h_old	double
;	O
return	O
GSL_ODEIV_HADJ_INC	int
;	O
}	O
else	O
{	O
return	O
GSL_ODEIV_HADJ_NIL	int
;	O
}	O
}	O
static	O
void	O
std_control_free	function
(	O
void	O
*	O
vstate	pointer
)	O
{	O
std_control_state_t	struct
*	O
state	pointer
=	O
(	O
std_control_state_t	struct
*	O
)	O
vstate	pointer
;	O
free	function
(	O
state	pointer
)	O
;	O
}	O
static	O
const	O
gsl_odeiv_control_type	struct
std_control_type	struct
=	O
{	O
"standard"	pointer
,	O
&	O
std_control_alloc	function
,	O
&	O
std_control_init	function
,	O
&	O
std_control_hadjust	function
,	O
&	O
std_control_free	function
}	O
;	O
const	O
gsl_odeiv_control_type	struct
*	O
gsl_odeiv_control_standard	pointer
=	O
&	O
std_control_type	struct
;	O
gsl_odeiv_control	struct
*	O
gsl_odeiv_control_standard_new	function
(	O
double	O
eps_abs	double
,	O
double	O
eps_rel	double
,	O
double	O
a_y	double
,	O
double	O
a_dydt	double
)	O
{	O
gsl_odeiv_control	struct
*	O
c	pointer
=	O
gsl_odeiv_control_alloc	function
(	O
gsl_odeiv_control_standard	pointer
)	O
;	O
int	O
status	int
=	O
gsl_odeiv_control_init	function
(	O
c	int
,	O
eps_abs	double
,	O
eps_rel	double
,	O
a_y	double
,	O
a_dydt	double
)	O
;	O
if	O
(	O
status	int
!=	O
GSL_SUCCESS	int
)	O
{	O
gsl_odeiv_control_free	function
(	O
c	pointer
)	O
;	O
GSL_ERROR_NULL	O
(	O
"error trying to initialize control"	pointer
,	O
status	int
)	O
;	O
}	O
return	O
c	int
;	O
}	O
gsl_odeiv_control	struct
*	O
gsl_odeiv_control_y_new	function
(	O
double	O
eps_abs	double
,	O
double	O
eps_rel	double
)	O
{	O
return	O
gsl_odeiv_control_standard_new	function
(	O
eps_abs	double
,	O
eps_rel	double
,	O
1.0	int
,	O
0.0	int
)	O
;	O
}	O
gsl_odeiv_control	struct
*	O
gsl_odeiv_control_yp_new	function
(	O
double	O
eps_abs	double
,	O
double	O
eps_rel	double
)	O
{	O
return	O
gsl_odeiv_control_standard_new	function
(	O
eps_abs	double
,	O
eps_rel	double
,	O
0.0	int
,	O
1.0	int
)	O
;	O
}	O