static	O
char	O
*	O
find_variable	function
(	O
catalog_t	struct
*	O
context	pointer
,	O
const	O
char	O
*	O
name	pointer
,	O
const	O
char	O
*	O
newvalue	pointer
)	O
{	O
int	O
r	int
=	O
0	int
;	O
int	O
hash	int
=	O
strlen	function
(	O
name	pointer
)	O
;	O
struct	O
varnames	struct
*	O
current	pointer
,	O
*	O
last	pointer
,	O
*	O
new	pointer
;	O
hash	int
=	O
(	O
(	O
unsigned	O
char	O
)	O
(	O
name	pointer
[	O
0	int
]	O
)	O
+	O
(	O
unsigned	O
char	O
)	O
(	O
name	pointer
[	O
hash	int
-	O
1	int
]	O
)	O
+	O
hash	int
)	O
%	O
(	O
unsigned	O
int	O
)	O
CHASHMAX	int
;	O
current	pointer
=	O
last	pointer
=	O
context	pointer
->	O
root	array
[	O
hash	int
]	O
;	O
while	O
(	O
current	pointer
!=	O
NULL	O
)	O
{	O
last	pointer
=	O
current	pointer
;	O
r	int
=	O
strcmp	function
(	O
current	pointer
->	O
name	pointer
,	O
name	pointer
)	O
;	O
if	O
(	O
!	O
r	int
)	O
{	O
if	O
(	O
newvalue	pointer
!=	O
NULL	O
)	O
{	O
free	function
(	O
current	pointer
->	O
value	pointer
)	O
;	O
current	pointer
->	O
value	pointer
=	O
strdup	function
(	O
newvalue	pointer
)	O
;	O
}	O
return	O
(	O
current	pointer
->	O
value	pointer
)	O
;	O
}	O
if	O
(	O
r	int
>	O
0	int
)	O
current	pointer
=	O
current	pointer
->	O
left	pointer
;	O
else	O
current	pointer
=	O
current	pointer
->	O
right	pointer
;	O
}	O
if	O
(	O
newvalue	pointer
==	O
NULL	O
)	O
return	O
(	O
NULL	O
)	O
;	O
new	pointer
=	O
(	O
struct	O
varnames	struct
*	O
)	O
malloc	function
(	O
sizeof	O
(	O
struct	O
varnames	struct
)	O
)	O
;	O
new	pointer
->	O
name	pointer
=	O
strdup	function
(	O
name	pointer
)	O
;	O
new	pointer
->	O
value	pointer
=	O
strdup	function
(	O
newvalue	pointer
)	O
;	O
new	pointer
->	O
left	pointer
=	O
NULL	O
;	O
new	pointer
->	O
right	pointer
=	O
NULL	O
;	O
if	O
(	O
last	pointer
==	O
NULL	O
)	O
{	O
context	pointer
->	O
root	array
[	O
hash	int
]	O
=	O
new	pointer
;	O
}	O
else	O
{	O
if	O
(	O
r	int
>	O
0	int
)	O
last	pointer
->	O
left	pointer
=	O
new	pointer
;	O
else	O
last	pointer
->	O
right	pointer
=	O
new	pointer
;	O
}	O
return	O
(	O
new	pointer
->	O
value	pointer
)	O
;	O
}	O
static	O
void	O
free_node	function
(	O
struct	O
varnames	struct
*	O
node	pointer
)	O
{	O
while	O
(	O
node	pointer
!=	O
NULL	O
)	O
{	O
struct	O
varnames	struct
*	O
nextnode	pointer
;	O
free_node	function
(	O
node	pointer
->	O
left	pointer
)	O
;	O
nextnode	pointer
=	O
node	pointer
->	O
right	pointer
;	O
free	function
(	O
node	pointer
->	O
name	pointer
)	O
;	O
free	function
(	O
node	pointer
->	O
value	pointer
)	O
;	O
free	function
(	O
node	pointer
)	O
;	O
node	pointer
=	O
nextnode	pointer
;	O
}	O
}	O
void	O
free_catalog	function
(	O
catalog_t	struct
*	O
context	pointer
)	O
{	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
CHASHMAX	int
;	O
i	int
++	O
)	O
{	O
free_node	function
(	O
context	pointer
->	O
root	array
[	O
i	int
]	O
)	O
;	O
context	pointer
->	O
root	array
[	O
i	int
]	O
=	O
NULL	O
;	O
}	O
free	function
(	O
context	pointer
)	O
;	O
}	O
static	O
catalog_t	struct
*	O
alloc_catalog	function
(	O
void	O
)	O
{	O
int	O
i	int
;	O
catalog_t	struct
*	O
c	pointer
;	O
c	pointer
=	O
(	O
catalog_t	struct
*	O
)	O
malloc	function
(	O
sizeof	O
(	O
catalog_t	struct
)	O
)	O
;	O
if	O
(	O
c	pointer
==	O
NULL	O
)	O
return	O
NULL	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
CHASHMAX	int
;	O
i	int
++	O
)	O
c	pointer
->	O
root	array
[	O
i	int
]	O
=	O
NULL	O
;	O
return	O
c	pointer
;	O
}	O
catalog_t	struct
*	O
load_catalog	function
(	O
xio_file	pointer
f	pointer
,	O
char	O
*	O
*	O
error	pointer
)	O
{	O
int	O
i	int
;	O
int	O
line	int
=	O
1	int
;	O
int	O
size	int
;	O
int	O
c	pointer
;	O
catalog_t	struct
*	O
catalog	struct
=	O
alloc_catalog	function
(	O
)	O
;	O
static	O
char	O
errort	array
[	O
40	int
]	O
;	O
char	O
name	pointer
[	O
1024	int
]	O
;	O
char	O
value	pointer
[	O
1024	int
]	O
;	O
if	O
(	O
f	pointer
==	O
NULL	O
)	O
{	O
*	O
error	pointer
=	O
"File could not be opended"	pointer
;	O
free_catalog	function
(	O
catalog	struct
)	O
;	O
return	O
NULL	O
;	O
}	O
while	O
(	O
!	O
xio_feof	O
(	O
f	pointer
)	O
)	O
{	O
do	O
{	O
c	pointer
=	O
xio_getc	O
(	O
f	pointer
)	O
;	O
if	O
(	O
c	pointer
==	O
'\n'	O
)	O
line	int
++	O
;	O
if	O
(	O
c	pointer
==	O
'#'	O
)	O
{	O
while	O
(	O
(	O
c	pointer
=	O
xio_getc	O
(	O
f	pointer
)	O
)	O
!=	O
'\n'	O
&&	O
c	pointer
!=	O
XIO_EOF	O
)	O
;	O
line	int
++	O
;	O
}	O
}	O
while	O
(	O
c	pointer
==	O
' '	O
||	O
c	pointer
==	O
'\n'	O
||	O
c	pointer
==	O
'\r'	O
||	O
c	pointer
==	O
'\t'	O
)	O
;	O
if	O
(	O
c	pointer
==	O
XIO_EOF	O
)	O
{	O
if	O
(	O
xio_feof	O
(	O
f	pointer
)	O
)	O
break	O
;	O
free_catalog	function
(	O
catalog	struct
)	O
;	O
seterror	O
(	O
"read error"	pointer
)	O
;	O
fclose	function
(	O
f	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
i	int
=	O
0	int
;	O
do	O
{	O
name	pointer
[	O
i	int
]	O
=	O
c	pointer
;	O
i	int
++	O
;	O
c	pointer
=	O
xio_getc	O
(	O
f	pointer
)	O
;	O
if	O
(	O
c	pointer
==	O
'\n'	O
)	O
line	int
++	O
;	O
if	O
(	O
i	int
==	O
1024	int
)	O
{	O
seterror	O
(	O
"Name is too long(1024 or more characters)"	pointer
)	O
;	O
free_catalog	function
(	O
catalog	struct
)	O
;	O
fclose	function
(	O
f	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
}	O
while	O
(	O
c	pointer
!=	O
'\n'	O
&&	O
c	pointer
!=	O
' '	O
&&	O
c	pointer
!=	O
'\t'	O
&&	O
c	pointer
!=	O
XIO_EOF	O
)	O
;	O
while	O
(	O
c	pointer
==	O
' '	O
||	O
c	pointer
==	O
'\n'	O
||	O
c	pointer
==	O
'\r'	O
||	O
c	pointer
==	O
'\t'	O
)	O
{	O
c	pointer
=	O
xio_getc	O
(	O
f	pointer
)	O
;	O
if	O
(	O
c	pointer
==	O
'\n'	O
)	O
line	int
++	O
;	O
if	O
(	O
c	pointer
==	O
'#'	O
)	O
{	O
while	O
(	O
(	O
c	pointer
=	O
xio_getc	O
(	O
f	pointer
)	O
)	O
!=	O
'\n'	O
&&	O
c	pointer
!=	O
XIO_EOF	O
)	O
;	O
line	int
++	O
;	O
}	O
}	O
if	O
(	O
c	pointer
==	O
XIO_EOF	O
)	O
{	O
if	O
(	O
xio_feof	O
(	O
f	pointer
)	O
)	O
seterror	O
(	O
"Inexpected end of file after name field"	pointer
)	O
;	O
else	O
seterror	O
(	O
"read error"	pointer
)	O
;	O
free_catalog	function
(	O
catalog	struct
)	O
;	O
fclose	function
(	O
f	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
name	pointer
[	O
i	int
]	O
=	O
0	int
;	O
if	O
(	O
c	pointer
!=	O
'"'	O
)	O
{	O
seterror	O
(	O
"Begin of value field expected (\")"	pointer
)	O
;	O
free_catalog	function
(	O
catalog	struct
)	O
;	O
fclose	function
(	O
f	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
c	pointer
=	O
xio_getc	O
(	O
f	pointer
)	O
;	O
if	O
(	O
c	pointer
==	O
'\n'	O
)	O
line	int
++	O
;	O
i	int
=	O
0	int
;	O
size	int
=	O
0	int
;	O
do	O
{	O
if	O
(	O
c	pointer
==	O
'\\'	O
)	O
{	O
value	pointer
[	O
i	int
]	O
=	O
xio_getc	O
(	O
f	pointer
)	O
;	O
if	O
(	O
c	pointer
==	O
'\n'	O
)	O
line	int
++	O
;	O
}	O
else	O
value	pointer
[	O
i	int
]	O
=	O
c	pointer
;	O
i	int
++	O
;	O
c	pointer
=	O
xio_getc	O
(	O
f	pointer
)	O
;	O
if	O
(	O
c	pointer
==	O
'\n'	O
)	O
line	int
++	O
,	O
size	int
=	O
0	int
;	O
if	O
(	O
size	int
==	O
40	int
&&	O
c	pointer
!=	O
'"'	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Warning - too long text at line %i\n"	pointer
,	O
line	int
)	O
;	O
}	O
size	int
++	O
;	O
if	O
(	O
i	int
==	O
1024	int
)	O
{	O
seterror	O
(	O
"Value is too long(1024 or more characters)"	pointer
)	O
;	O
free_catalog	function
(	O
catalog	struct
)	O
;	O
fclose	function
(	O
f	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
}	O
while	O
(	O
c	pointer
!=	O
'"'	O
&&	O
c	pointer
!=	O
XIO_EOF	O
)	O
;	O
if	O
(	O
c	pointer
==	O
XIO_EOF	O
)	O
{	O
seterror	O
(	O
"Inexpeced end of file in value filed"	pointer
)	O
;	O
free_catalog	function
(	O
catalog	struct
)	O
;	O
fclose	function
(	O
f	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
value	pointer
[	O
i	int
]	O
=	O
0	int
;	O
find_variable	function
(	O
catalog	struct
,	O
name	pointer
,	O
value	pointer
)	O
;	O
}	O
fclose	function
(	O
f	pointer
)	O
;	O
return	O
(	O
catalog	struct
)	O
;	O
}	O
char	O
*	O
find_text	function
(	O
catalog_t	struct
*	O
catalog	struct
,	O
char	O
*	O
name	pointer
)	O
{	O
return	O
(	O
find_variable	function
(	O
catalog	struct
,	O
name	pointer
,	O
NULL	O
)	O
)	O
;	O
}	O
