static	O
char	O
*	O
expand_character	function
(	O
char	O
,	O
boolean	enum
)	O
;	O
static	O
void	O
add_string	function
(	O
char	O
*	O
*	O
,	O
char	O
*	O
,	O
size_t	long
*	O
)	O
;	O
static	O
void	O
add_character	function
(	O
char	O
*	O
*	O
,	O
char	O
,	O
size_t	long
*	O
)	O
;	O
char	O
*	O
expand_string	function
(	O
char	O
*	O
original_string	pointer
,	O
boolean	enum
index_page	enum
)	O
{	O
static	O
char	O
*	O
output_buffer	pointer
=	O
NULL	O
;	O
static	O
size_t	long
buffer_size	long
=	O
100	int
;	O
char	O
*	O
current_char	long
;	O
if	O
(	O
original_string	pointer
)	O
dm	function
(	O
'h'	O
,	O
5	int
,	O
"expand_string.c:expand_string() Expanding string %s\n"	pointer
,	O
original_string	pointer
)	O
;	O
else	O
dm	function
(	O
'h'	O
,	O
5	int
,	O
"expand_string.c:expand_string() Expanding null string\n"	pointer
)	O
;	O
if	O
(	O
output_buffer	pointer
==	O
NULL	O
)	O
output_buffer	pointer
=	O
xmalloc	function
(	O
100	int
)	O
;	O
*	O
output_buffer	pointer
=	O
'\0'	O
;	O
if	O
(	O
original_string	pointer
)	O
{	O
for	O
(	O
current_char	long
=	O
original_string	pointer
;	O
*	O
current_char	long
;	O
current_char	long
++	O
)	O
{	O
if	O
(	O
*	O
current_char	long
!=	O
'%'	O
)	O
{	O
add_character	function
(	O
&	O
output_buffer	pointer
,	O
*	O
current_char	long
,	O
&	O
buffer_size	long
)	O
;	O
continue	O
;	O
}	O
add_string	function
(	O
&	O
output_buffer	pointer
,	O
expand_character	function
(	O
*	O
++	O
current_char	long
,	O
index_page	enum
)	O
,	O
&	O
buffer_size	long
)	O
;	O
}	O
}	O
else	O
{	O
*	O
output_buffer	pointer
=	O
'\0'	O
;	O
}	O
dm	function
(	O
'h'	O
,	O
5	int
,	O
"expand_string.c:expand_string Returning string %s\n"	pointer
,	O
output_buffer	pointer
)	O
;	O
return	O
output_buffer	pointer
;	O
}	O
char	O
*	O
expand_character	function
(	O
char	O
character	char
,	O
boolean	enum
index_page	enum
)	O
{	O
static	O
char	O
*	O
output_buffer	pointer
=	O
NULL	O
;	O
static	O
struct	O
tm	struct
*	O
t	pointer
=	O
NULL	O
;	O
static	O
char	O
*	O
daynames	array
[	O
]	O
=	O
{	O
"Sun"	pointer
,	O
"Mon"	pointer
,	O
"Tue"	pointer
,	O
"Wed"	pointer
,	O
"Thu"	pointer
,	O
"Fri"	pointer
,	O
"Sat"	pointer
}	O
;	O
static	O
char	O
*	O
monnames	array
[	O
]	O
=	O
{	O
"Jan"	pointer
,	O
"Feb"	pointer
,	O
"Mar"	pointer
,	O
"Apr"	pointer
,	O
"May"	pointer
,	O
"Jun"	pointer
,	O
"Jul"	pointer
,	O
"Aug"	pointer
,	O
"Sep"	pointer
,	O
"Oct"	pointer
,	O
"Nov"	pointer
,	O
"Dec"	pointer
}	O
;	O
struct	O
tm	struct
*	O
ft	pointer
;	O
if	O
(	O
t	pointer
==	O
NULL	O
)	O
{	O
time_t	long
now	long
;	O
if	O
(	O
!	O
use_environment	enum
)	O
{	O
now	long
=	O
387774000	int
;	O
t	pointer
=	O
gmtime	function
(	O
&	O
now	long
)	O
;	O
}	O
else	O
{	O
now	long
=	O
time	function
(	O
(	O
time_t	long
*	O
)	O
NULL	O
)	O
;	O
t	pointer
=	O
localtime	function
(	O
&	O
now	long
)	O
;	O
}	O
}	O
if	O
(	O
output_buffer	pointer
==	O
NULL	O
)	O
output_buffer	pointer
=	O
xmalloc	function
(	O
100	int
)	O
;	O
*	O
output_buffer	pointer
=	O
'\0'	O
;	O
switch	O
(	O
character	char
)	O
{	O
case	O
'%'	O
:	O
return	O
"%"	pointer
;	O
case	O
'm'	O
:	O
sprintf	function
(	O
output_buffer	pointer
,	O
"%02d"	pointer
,	O
t	pointer
->	O
tm_mon	int
+	O
1	int
)	O
;	O
return	O
output_buffer	pointer
;	O
case	O
'd'	O
:	O
sprintf	function
(	O
output_buffer	pointer
,	O
"%02d"	pointer
,	O
t	pointer
->	O
tm_mday	int
)	O
;	O
return	O
output_buffer	pointer
;	O
case	O
'y'	O
:	O
sprintf	function
(	O
output_buffer	pointer
,	O
"%4d"	pointer
,	O
t	pointer
->	O
tm_year	int
+	O
1900	int
)	O
;	O
return	O
output_buffer	pointer
;	O
case	O
'D'	O
:	O
sprintf	function
(	O
output_buffer	pointer
,	O
"%02d/%02d/%02d"	pointer
,	O
t	pointer
->	O
tm_mon	int
+	O
1	int
,	O
t	pointer
->	O
tm_mday	int
,	O
t	pointer
->	O
tm_year	int
)	O
;	O
return	O
output_buffer	pointer
;	O
case	O
'L'	O
:	O
sprintf	function
(	O
output_buffer	pointer
,	O
"%s %s %02d %02d:%02d:%02d %4d"	pointer
,	O
daynames	array
[	O
t	pointer
->	O
tm_wday	int
]	O
,	O
monnames	array
[	O
t	pointer
->	O
tm_mon	int
]	O
,	O
t	pointer
->	O
tm_mday	int
,	O
t	pointer
->	O
tm_hour	int
,	O
t	pointer
->	O
tm_min	int
,	O
t	pointer
->	O
tm_sec	int
,	O
t	pointer
->	O
tm_year	int
+	O
1900	int
)	O
;	O
return	O
output_buffer	pointer
;	O
case	O
'H'	O
:	O
sprintf	function
(	O
output_buffer	pointer
,	O
"%02d"	pointer
,	O
t	pointer
->	O
tm_hour	int
)	O
;	O
return	O
output_buffer	pointer
;	O
case	O
'M'	O
:	O
sprintf	function
(	O
output_buffer	pointer
,	O
"%02d"	pointer
,	O
t	pointer
->	O
tm_min	int
)	O
;	O
return	O
output_buffer	pointer
;	O
case	O
'S'	O
:	O
sprintf	function
(	O
output_buffer	pointer
,	O
"%02d"	pointer
,	O
t	pointer
->	O
tm_sec	int
)	O
;	O
return	O
output_buffer	pointer
;	O
case	O
'T'	O
:	O
sprintf	function
(	O
output_buffer	pointer
,	O
"%02d:%02d:%02d"	pointer
,	O
t	pointer
->	O
tm_hour	int
,	O
t	pointer
->	O
tm_min	int
,	O
t	pointer
->	O
tm_sec	int
)	O
;	O
return	O
output_buffer	pointer
;	O
case	O
'j'	O
:	O
sprintf	function
(	O
output_buffer	pointer
,	O
"%3d"	pointer
,	O
t	pointer
->	O
tm_yday	int
)	O
;	O
return	O
output_buffer	pointer
;	O
case	O
'w'	O
:	O
sprintf	function
(	O
output_buffer	pointer
,	O
"%d"	pointer
,	O
t	pointer
->	O
tm_wday	int
)	O
;	O
return	O
output_buffer	pointer
;	O
case	O
'a'	O
:	O
return	O
daynames	array
[	O
t	pointer
->	O
tm_wday	int
]	O
;	O
case	O
'h'	O
:	O
return	O
monnames	array
[	O
t	pointer
->	O
tm_mon	int
]	O
;	O
case	O
'r'	O
:	O
if	O
(	O
t	pointer
->	O
tm_hour	int
>	O
12	int
)	O
sprintf	function
(	O
output_buffer	pointer
,	O
"%02d:%02dpm"	pointer
,	O
t	pointer
->	O
tm_hour	int
-	O
12	int
,	O
t	pointer
->	O
tm_min	int
)	O
;	O
else	O
sprintf	function
(	O
output_buffer	pointer
,	O
"%02d:%02dam"	pointer
,	O
t	pointer
->	O
tm_hour	int
,	O
t	pointer
->	O
tm_min	int
)	O
;	O
return	O
output_buffer	pointer
;	O
case	O
'p'	O
:	O
if	O
(	O
index_page	enum
)	O
return	O
""	pointer
;	O
sprintf	function
(	O
output_buffer	pointer
,	O
"%ld"	pointer
,	O
file_page_number	long
)	O
;	O
return	O
output_buffer	pointer
;	O
case	O
'P'	O
:	O
if	O
(	O
index_page	enum
)	O
return	O
""	pointer
;	O
sprintf	function
(	O
output_buffer	pointer
,	O
"%ld"	pointer
,	O
page_number	long
)	O
;	O
return	O
output_buffer	pointer
;	O
case	O
'f'	O
:	O
if	O
(	O
index_page	enum
)	O
return	O
""	pointer
;	O
sprintf	function
(	O
output_buffer	pointer
,	O
"%ld"	pointer
,	O
get_file_last_page	function
(	O
file_number	int
)	O
-	O
get_file_first_page	function
(	O
file_number	int
)	O
+	O
1	int
)	O
;	O
return	O
output_buffer	pointer
;	O
case	O
'c'	O
:	O
if	O
(	O
index_page	enum
)	O
return	O
""	pointer
;	O
ft	pointer
=	O
get_file_modified_time	function
(	O
file_number	int
)	O
;	O
if	O
(	O
ft	pointer
==	O
NULL	O
)	O
return	O
""	pointer
;	O
sprintf	function
(	O
output_buffer	pointer
,	O
"%02d/%02d/%02d"	pointer
,	O
ft	pointer
->	O
tm_mon	int
+	O
1	int
,	O
ft	pointer
->	O
tm_mday	int
,	O
ft	pointer
->	O
tm_year	int
)	O
;	O
return	O
output_buffer	pointer
;	O
case	O
'C'	O
:	O
if	O
(	O
index_page	enum
)	O
return	O
""	pointer
;	O
ft	pointer
=	O
get_file_modified_time	function
(	O
file_number	int
)	O
;	O
if	O
(	O
ft	pointer
==	O
NULL	O
)	O
return	O
""	pointer
;	O
sprintf	function
(	O
output_buffer	pointer
,	O
"%s %s %02d %02d:%02d:%02d %4d"	pointer
,	O
daynames	array
[	O
ft	pointer
->	O
tm_wday	int
]	O
,	O
monnames	array
[	O
ft	pointer
->	O
tm_mon	int
]	O
,	O
ft	pointer
->	O
tm_mday	int
,	O
ft	pointer
->	O
tm_hour	int
,	O
ft	pointer
->	O
tm_min	int
,	O
ft	pointer
->	O
tm_sec	int
,	O
ft	pointer
->	O
tm_year	int
+	O
1900	int
)	O
;	O
return	O
output_buffer	pointer
;	O
case	O
'F'	O
:	O
if	O
(	O
index_page	enum
)	O
return	O
""	pointer
;	O
sprintf	function
(	O
output_buffer	pointer
,	O
"%ld"	pointer
,	O
total_pages	long
)	O
;	O
return	O
output_buffer	pointer
;	O
case	O
'n'	O
:	O
if	O
(	O
index_page	enum
)	O
return	O
""	pointer
;	O
return	O
file_name	function
(	O
file_number	int
)	O
;	O
case	O
'N'	O
:	O
if	O
(	O
index_page	enum
)	O
return	O
""	pointer
;	O
return	O
get_function_name	function
(	O
page_number	long
)	O
;	O
case	O
'l'	O
:	O
if	O
(	O
!	O
use_environment	enum
)	O
return	O
"testuser"	pointer
;	O
{	O
char	O
*	O
u	pointer
=	O
getenv	function
(	O
"USER"	pointer
)	O
;	O
if	O
(	O
u	pointer
==	O
0	int
)	O
return	O
""	pointer
;	O
else	O
return	O
u	pointer
;	O
}	O
default	O
:	O
return	O
"?"	pointer
;	O
}	O
}	O
static	O
void	O
add_string	function
(	O
char	O
*	O
*	O
buffer_ptr	pointer
,	O
char	O
*	O
string	pointer
,	O
size_t	long
*	O
bufflen_ptr	pointer
)	O
{	O
size_t	long
required_length	long
;	O
required_length	long
=	O
strlen	function
(	O
*	O
buffer_ptr	pointer
)	O
+	O
strlen	function
(	O
string	pointer
)	O
+	O
1	int
;	O
if	O
(	O
required_length	long
>	O
*	O
bufflen_ptr	pointer
)	O
{	O
*	O
buffer_ptr	pointer
=	O
xrealloc	function
(	O
*	O
buffer_ptr	pointer
,	O
required_length	long
)	O
;	O
*	O
bufflen_ptr	pointer
=	O
required_length	long
;	O
}	O
strcat	function
(	O
*	O
buffer_ptr	pointer
,	O
string	pointer
)	O
;	O
return	O
;	O
}	O
static	O
void	O
add_character	function
(	O
char	O
*	O
*	O
buffer_ptr	pointer
,	O
char	O
character	char
,	O
size_t	long
*	O
bufflen_ptr	pointer
)	O
{	O
size_t	long
required_length	long
;	O
required_length	long
=	O
strlen	function
(	O
*	O
buffer_ptr	pointer
)	O
+	O
2	int
;	O
if	O
(	O
required_length	long
>	O
*	O
bufflen_ptr	pointer
)	O
{	O
*	O
buffer_ptr	pointer
=	O
xrealloc	function
(	O
*	O
buffer_ptr	pointer
,	O
required_length	long
)	O
;	O
*	O
bufflen_ptr	pointer
=	O
required_length	long
;	O
}	O
(	O
*	O
buffer_ptr	pointer
)	O
[	O
required_length	long
-	O
1	int
]	O
=	O
'\0'	O
;	O
(	O
*	O
buffer_ptr	pointer
)	O
[	O
required_length	long
-	O
2	int
]	O
=	O
character	char
;	O
return	O
;	O
}	O
