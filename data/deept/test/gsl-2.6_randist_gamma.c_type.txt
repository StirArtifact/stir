static	O
double	O
gamma_large	function
(	O
const	O
gsl_rng	struct
*	O
r	pointer
,	O
const	O
double	O
a	double
)	O
;	O
static	O
double	O
gamma_frac	function
(	O
const	O
gsl_rng	struct
*	O
r	pointer
,	O
const	O
double	O
a	double
)	O
;	O
double	O
gsl_ran_gamma_knuth	function
(	O
const	O
gsl_rng	struct
*	O
r	pointer
,	O
const	O
double	O
a	double
,	O
const	O
double	O
b	double
)	O
{	O
unsigned	O
int	O
na	int
=	O
floor	function
(	O
a	double
)	O
;	O
if	O
(	O
a	int
>=	O
UINT_MAX	O
)	O
{	O
return	O
b	pointer
*	O
(	O
gamma_large	function
(	O
r	pointer
,	O
floor	function
(	O
a	double
)	O
)	O
+	O
gamma_frac	function
(	O
r	int
,	O
a	double
-	O
floor	function
(	O
a	double
)	O
)	O
)	O
;	O
}	O
else	O
if	O
(	O
a	double
==	O
na	int
)	O
{	O
return	O
b	pointer
*	O
gsl_ran_gamma_int	function
(	O
r	int
,	O
na	int
)	O
;	O
}	O
else	O
if	O
(	O
na	int
==	O
0	int
)	O
{	O
return	O
b	pointer
*	O
gamma_frac	function
(	O
r	int
,	O
a	double
)	O
;	O
}	O
else	O
{	O
return	O
b	pointer
*	O
(	O
gsl_ran_gamma_int	function
(	O
r	int
,	O
na	int
)	O
+	O
gamma_frac	function
(	O
r	int
,	O
a	int
-	O
na	int
)	O
)	O
;	O
}	O
}	O
double	O
gsl_ran_gamma_int	function
(	O
const	O
gsl_rng	struct
*	O
r	pointer
,	O
const	O
unsigned	O
int	O
a	int
)	O
{	O
if	O
(	O
a	int
<	O
12	int
)	O
{	O
unsigned	O
int	O
i	int
;	O
double	O
prod	double
=	O
1	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
a	int
;	O
i	int
++	O
)	O
{	O
prod	pointer
*=	O
gsl_rng_uniform_pos	function
(	O
r	pointer
)	O
;	O
}	O
return	O
-	O
log	function
(	O
prod	pointer
)	O
;	O
}	O
else	O
{	O
return	O
gamma_large	function
(	O
r	int
,	O
(	O
double	O
)	O
a	double
)	O
;	O
}	O
}	O
static	O
double	O
gamma_large	function
(	O
const	O
gsl_rng	struct
*	O
r	pointer
,	O
const	O
double	O
a	double
)	O
{	O
double	O
sqa	double
,	O
x	double
,	O
y	int
,	O
v	long
;	O
sqa	int
=	O
sqrt	function
(	O
2	int
*	O
a	int
-	O
1	int
)	O
;	O
do	O
{	O
do	O
{	O
y	int
=	O
tan	function
(	O
M_PI	int
*	O
gsl_rng_uniform	function
(	O
r	pointer
)	O
)	O
;	O
x	double
=	O
sqa	int
*	O
y	double
+	O
a	int
-	O
1	int
;	O
}	O
while	O
(	O
x	double
<=	O
0	int
)	O
;	O
v	pointer
=	O
gsl_rng_uniform	function
(	O
r	pointer
)	O
;	O
}	O
while	O
(	O
v	long
>	O
(	O
1	int
+	O
y	int
*	O
y	double
)	O
*	O
exp	function
(	O
(	O
a	double
-	O
1	int
)	O
*	O
log	function
(	O
x	double
/	O
(	O
a	int
-	O
1	int
)	O
)	O
-	O
sqa	int
*	O
y	double
)	O
)	O
;	O
return	O
x	double
;	O
}	O
static	O
double	O
gamma_frac	function
(	O
const	O
gsl_rng	struct
*	O
r	pointer
,	O
const	O
double	O
a	double
)	O
{	O
double	O
p	pointer
,	O
q	double
,	O
x	double
,	O
u	int
,	O
v	int
;	O
if	O
(	O
a	int
==	O
0	int
)	O
{	O
return	O
0	int
;	O
}	O
p	pointer
=	O
M_E	int
/	O
(	O
a	double
+	O
M_E	int
)	O
;	O
do	O
{	O
u	struct
=	O
gsl_rng_uniform	function
(	O
r	int
)	O
;	O
v	pointer
=	O
gsl_rng_uniform_pos	function
(	O
r	int
)	O
;	O
if	O
(	O
u	int
<	O
p	pointer
)	O
{	O
x	double
=	O
exp	function
(	O
(	O
1	int
/	O
a	double
)	O
*	O
log	function
(	O
v	pointer
)	O
)	O
;	O
q	pointer
=	O
exp	function
(	O
-	O
x	double
)	O
;	O
}	O
else	O
{	O
x	double
=	O
1	int
-	O
log	function
(	O
v	pointer
)	O
;	O
q	pointer
=	O
exp	function
(	O
(	O
a	double
-	O
1	int
)	O
*	O
log	function
(	O
x	double
)	O
)	O
;	O
}	O
}	O
while	O
(	O
gsl_rng_uniform	function
(	O
r	int
)	O
>=	O
q	pointer
)	O
;	O
return	O
x	double
;	O
}	O
double	O
gsl_ran_gamma_pdf	function
(	O
const	O
double	O
x	double
,	O
const	O
double	O
a	double
,	O
const	O
double	O
b	double
)	O
{	O
if	O
(	O
x	double
<	O
0	int
)	O
{	O
return	O
0	int
;	O
}	O
else	O
if	O
(	O
x	double
==	O
0	int
)	O
{	O
if	O
(	O
a	int
==	O
1	int
)	O
return	O
1	int
/	O
b	double
;	O
else	O
return	O
0	int
;	O
}	O
else	O
if	O
(	O
a	int
==	O
1	int
)	O
{	O
return	O
exp	function
(	O
-	O
x	double
/	O
b	double
)	O
/	O
b	double
;	O
}	O
else	O
{	O
double	O
p	pointer
;	O
double	O
lngamma	double
=	O
gsl_sf_lngamma	function
(	O
a	double
)	O
;	O
p	pointer
=	O
exp	function
(	O
(	O
a	double
-	O
1	int
)	O
*	O
log	function
(	O
x	double
/	O
b	double
)	O
-	O
x	double
/	O
b	double
-	O
lngamma	int
)	O
/	O
b	long
;	O
return	O
p	pointer
;	O
}	O
}	O
double	O
gsl_ran_gamma_mt	function
(	O
const	O
gsl_rng	struct
*	O
r	pointer
,	O
const	O
double	O
a	double
,	O
const	O
double	O
b	double
)	O
{	O
return	O
gsl_ran_gamma	function
(	O
r	int
,	O
a	double
,	O
b	double
)	O
;	O
}	O
double	O
gsl_ran_gamma	function
(	O
const	O
gsl_rng	struct
*	O
r	pointer
,	O
const	O
double	O
a	double
,	O
const	O
double	O
b	double
)	O
{	O
if	O
(	O
a	int
<	O
1	int
)	O
{	O
double	O
u	double
=	O
gsl_rng_uniform_pos	function
(	O
r	int
)	O
;	O
return	O
gsl_ran_gamma	function
(	O
r	int
,	O
1.0	int
+	O
a	int
,	O
b	double
)	O
*	O
pow	function
(	O
u	int
,	O
1.0	int
/	O
a	double
)	O
;	O
}	O
{	O
double	O
x	double
,	O
v	long
,	O
u	int
;	O
double	O
d	double
=	O
a	double
-	O
1.0	int
/	O
3.0	int
;	O
double	O
c	int
=	O
(	O
1.0	int
/	O
3.0	int
)	O
/	O
sqrt	function
(	O
d	long
)	O
;	O
while	O
(	O
1	int
)	O
{	O
do	O
{	O
x	double
=	O
gsl_ran_gaussian_ziggurat	function
(	O
r	int
,	O
1.0	int
)	O
;	O
v	long
=	O
1.0	int
+	O
c	int
*	O
x	double
;	O
}	O
while	O
(	O
v	long
<=	O
0	int
)	O
;	O
v	pointer
=	O
v	pointer
*	O
v	pointer
*	O
v	pointer
;	O
u	pointer
=	O
gsl_rng_uniform_pos	function
(	O
r	int
)	O
;	O
if	O
(	O
u	int
<	O
1	int
-	O
0.0331	int
*	O
x	double
*	O
x	double
*	O
x	double
*	O
x	double
)	O
break	O
;	O
if	O
(	O
log	function
(	O
u	double
)	O
<	O
0.5	int
*	O
x	double
*	O
x	double
+	O
d	long
*	O
(	O
1	int
-	O
v	long
+	O
log	function
(	O
v	pointer
)	O
)	O
)	O
break	O
;	O
}	O
return	O
b	double
*	O
d	pointer
*	O
v	pointer
;	O
}	O
}	O