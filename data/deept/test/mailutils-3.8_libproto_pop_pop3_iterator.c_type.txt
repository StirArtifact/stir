static	O
int	O
pop3_itr_dup	function
(	O
void	O
*	O
*	O
ptr	pointer
,	O
void	O
*	O
owner	pointer
)	O
;	O
static	O
int	O
pop3_itr_destroy	function
(	O
mu_iterator_t	pointer
itr	pointer
,	O
void	O
*	O
owner	pointer
)	O
;	O
static	O
int	O
pop3_itr_first	function
(	O
void	O
*	O
owner	pointer
)	O
;	O
static	O
int	O
pop3_itr_next	function
(	O
void	O
*	O
woner	pointer
)	O
;	O
static	O
int	O
pop3_itr_getitem	function
(	O
void	O
*	O
owner	pointer
,	O
void	O
*	O
*	O
pret	pointer
,	O
const	O
void	O
*	O
*	O
pkey	pointer
)	O
;	O
static	O
int	O
pop3_itr_delitem	function
(	O
void	O
*	O
owner	pointer
,	O
void	O
*	O
data	pointer
)	O
;	O
static	O
int	O
pop3_itr_finished_p	function
(	O
void	O
*	O
owner	pointer
)	O
;	O
struct	O
pop3_iterator	struct
{	O
mu_pop3_t	pointer
pop3	pointer
;	O
mu_stream_t	pointer
stream	pointer
;	O
int	O
done	O
;	O
char	O
*	O
item	pointer
;	O
char	O
*	O
rdbuf	pointer
;	O
size_t	long
rdsize	long
;	O
}	O
;	O
int	O
mu_pop3_iterator_create	function
(	O
mu_pop3_t	pointer
pop3	pointer
,	O
mu_iterator_t	pointer
*	O
piterator	pointer
)	O
{	O
struct	O
pop3_iterator	struct
*	O
pop3_iterator	pointer
;	O
mu_iterator_t	pointer
iterator	pointer
;	O
int	O
status	int
;	O
pop3_iterator	pointer
=	O
malloc	function
(	O
sizeof	O
*	O
pop3_iterator	pointer
)	O
;	O
if	O
(	O
pop3_iterator	pointer
==	O
NULL	O
)	O
return	O
ENOMEM	int
;	O
status	int
=	O
mu_pop3_stream_create	function
(	O
pop3	pointer
,	O
&	O
pop3_iterator	pointer
->	O
stream	pointer
)	O
;	O
if	O
(	O
status	int
)	O
{	O
free	function
(	O
pop3_iterator	pointer
)	O
;	O
return	O
status	int
;	O
}	O
pop3_iterator	pointer
->	O
item	pointer
=	O
NULL	O
;	O
pop3_iterator	pointer
->	O
rdbuf	pointer
=	O
NULL	O
;	O
pop3_iterator	pointer
->	O
rdsize	long
=	O
0	int
;	O
pop3_iterator	pointer
->	O
done	O
=	O
0	int
;	O
pop3_iterator	pointer
->	O
pop3	pointer
=	O
pop3	pointer
;	O
status	int
=	O
mu_iterator_create	function
(	O
&	O
iterator	pointer
,	O
pop3_iterator	pointer
)	O
;	O
if	O
(	O
status	int
!=	O
0	int
)	O
{	O
free	function
(	O
pop3_iterator	pointer
)	O
;	O
return	O
status	int
;	O
}	O
mu_iterator_set_first	function
(	O
iterator	pointer
,	O
pop3_itr_first	pointer
)	O
;	O
mu_iterator_set_next	function
(	O
iterator	pointer
,	O
pop3_itr_next	pointer
)	O
;	O
mu_iterator_set_getitem	function
(	O
iterator	pointer
,	O
pop3_itr_getitem	pointer
)	O
;	O
mu_iterator_set_finished_p	function
(	O
iterator	pointer
,	O
pop3_itr_finished_p	pointer
)	O
;	O
mu_iterator_set_delitem	function
(	O
iterator	pointer
,	O
pop3_itr_delitem	pointer
)	O
;	O
mu_iterator_set_destroy	function
(	O
iterator	pointer
,	O
pop3_itr_destroy	pointer
)	O
;	O
mu_iterator_set_dup	function
(	O
iterator	pointer
,	O
pop3_itr_dup	pointer
)	O
;	O
*	O
piterator	pointer
=	O
iterator	pointer
;	O
return	O
0	int
;	O
}	O
static	O
int	O
pop3_itr_dup	function
(	O
void	O
*	O
*	O
ptr	pointer
,	O
void	O
*	O
owner	pointer
)	O
{	O
struct	O
pop3_iterator	struct
*	O
pop3_iterator	pointer
=	O
(	O
struct	O
pop3_iterator	struct
*	O
)	O
owner	pointer
;	O
struct	O
pop3_iterator	struct
*	O
clone	pointer
=	O
malloc	function
(	O
sizeof	O
*	O
pop3_iterator	pointer
)	O
;	O
if	O
(	O
clone	pointer
==	O
NULL	O
)	O
return	O
ENOMEM	int
;	O
*	O
clone	pointer
=	O
*	O
pop3_iterator	pointer
;	O
*	O
ptr	pointer
=	O
clone	pointer
;	O
return	O
0	int
;	O
}	O
static	O
int	O
pop3_itr_destroy	function
(	O
mu_iterator_t	pointer
iterator	pointer
,	O
void	O
*	O
owner	pointer
)	O
{	O
struct	O
pop3_iterator	struct
*	O
pop3_iterator	pointer
=	O
(	O
struct	O
pop3_iterator	struct
*	O
)	O
owner	pointer
;	O
if	O
(	O
!	O
pop3_iterator	pointer
->	O
done	O
)	O
{	O
char	O
buf	pointer
[	O
128	int
]	O
;	O
size_t	long
n	long
=	O
0	int
;	O
mu_stream_t	pointer
str	pointer
=	O
pop3_iterator	pointer
->	O
pop3	pointer
->	O
carrier	pointer
;	O
while	O
(	O
mu_stream_readline	function
(	O
str	pointer
,	O
buf	pointer
,	O
sizeof	O
buf	pointer
,	O
&	O
n	long
)	O
>	O
0	int
&&	O
n	long
>	O
0	int
)	O
n	long
=	O
0	int
;	O
}	O
if	O
(	O
pop3_iterator	pointer
->	O
item	pointer
)	O
free	function
(	O
pop3_iterator	pointer
->	O
item	pointer
)	O
;	O
if	O
(	O
pop3_iterator	pointer
->	O
rdbuf	pointer
)	O
free	function
(	O
pop3_iterator	pointer
->	O
rdbuf	pointer
)	O
;	O
pop3_iterator	pointer
->	O
pop3	pointer
->	O
state	pointer
=	O
MU_POP3_NO_STATE	int
;	O
free	function
(	O
pop3_iterator	pointer
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
pop3_itr_first	function
(	O
void	O
*	O
data	pointer
)	O
{	O
return	O
pop3_itr_next	function
(	O
data	pointer
)	O
;	O
}	O
static	O
int	O
pop3_itr_next	function
(	O
void	O
*	O
owner	pointer
)	O
{	O
struct	O
pop3_iterator	struct
*	O
pop3_iterator	pointer
=	O
(	O
struct	O
pop3_iterator	struct
*	O
)	O
owner	pointer
;	O
int	O
status	int
=	O
0	int
;	O
size_t	long
n	long
;	O
status	int
=	O
mu_stream_getline	function
(	O
pop3_iterator	pointer
->	O
stream	pointer
,	O
&	O
pop3_iterator	pointer
->	O
rdbuf	pointer
,	O
&	O
pop3_iterator	struct
->	O
rdsize	long
,	O
&	O
n	long
)	O
;	O
if	O
(	O
status	int
||	O
n	long
==	O
0	int
)	O
{	O
pop3_iterator	pointer
->	O
done	O
=	O
1	int
;	O
pop3_iterator	pointer
->	O
pop3	pointer
->	O
state	pointer
=	O
MU_POP3_NO_STATE	int
;	O
return	O
0	int
;	O
}	O
n	long
=	O
mu_rtrim_class	function
(	O
pop3_iterator	pointer
->	O
rdbuf	pointer
,	O
MU_CTYPE_SPACE	int
)	O
;	O
if	O
(	O
n	long
==	O
1	int
&&	O
pop3_iterator	pointer
->	O
rdbuf	pointer
[	O
0	int
]	O
==	O
'.'	O
)	O
{	O
pop3_iterator	pointer
->	O
done	O
=	O
1	int
;	O
pop3_iterator	pointer
->	O
pop3	pointer
->	O
state	pointer
=	O
MU_POP3_NO_STATE	int
;	O
}	O
else	O
pop3_iterator	pointer
->	O
item	pointer
=	O
pop3_iterator	pointer
->	O
rdbuf	pointer
;	O
return	O
status	int
;	O
}	O
static	O
int	O
pop3_itr_getitem	function
(	O
void	O
*	O
owner	pointer
,	O
void	O
*	O
*	O
item	pointer
,	O
const	O
void	O
*	O
*	O
pkey	pointer
)	O
{	O
struct	O
pop3_iterator	struct
*	O
pop3_iterator	pointer
=	O
(	O
struct	O
pop3_iterator	struct
*	O
)	O
owner	pointer
;	O
if	O
(	O
item	pointer
)	O
{	O
*	O
(	O
(	O
char	O
*	O
*	O
)	O
item	pointer
)	O
=	O
pop3_iterator	pointer
->	O
item	pointer
;	O
pop3_iterator	pointer
->	O
item	pointer
=	O
NULL	O
;	O
}	O
if	O
(	O
pkey	pointer
)	O
*	O
pkey	pointer
=	O
NULL	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
pop3_itr_finished_p	function
(	O
void	O
*	O
owner	pointer
)	O
{	O
struct	O
pop3_iterator	struct
*	O
pop3_iterator	pointer
=	O
(	O
struct	O
pop3_iterator	struct
*	O
)	O
owner	pointer
;	O
return	O
pop3_iterator	pointer
->	O
done	O
;	O
}	O
static	O
int	O
pop3_itr_delitem	function
(	O
void	O
*	O
owner	pointer
,	O
void	O
*	O
item	pointer
)	O
{	O
struct	O
pop3_iterator	struct
*	O
pop3_iterator	pointer
=	O
(	O
struct	O
pop3_iterator	struct
*	O
)	O
owner	pointer
;	O
return	O
*	O
(	O
(	O
char	O
*	O
*	O
)	O
item	pointer
)	O
==	O
pop3_iterator	pointer
->	O
item	pointer
?	O
MU_ITR_DELITEM_NEXT	int
:	O
MU_ITR_DELITEM_NOTHING	int
;	O
}	O