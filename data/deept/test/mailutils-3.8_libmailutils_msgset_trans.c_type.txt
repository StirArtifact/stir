int	O
_mu_msgset_translate_pair	function
(	O
mu_msgset_t	pointer
mset	pointer
,	O
int	O
mode	int
,	O
size_t	long
*	O
pbeg	pointer
,	O
size_t	long
*	O
pend	pointer
)	O
{	O
if	O
(	O
mset	pointer
->	O
mbox	pointer
)	O
{	O
int	O
cmd	int
,	O
rc	int
;	O
size_t	long
n	long
=	O
1	int
;	O
size_t	long
beg	long
=	O
*	O
pbeg	pointer
;	O
size_t	long
end	long
=	O
*	O
pend	pointer
;	O
switch	O
(	O
mode	O
)	O
{	O
case	O
MU_MSGSET_NUM	int
:	O
cmd	enum
=	O
MU_MAILBOX_UID_TO_MSGNO	int
;	O
break	O
;	O
case	O
MU_MSGSET_UID	int
:	O
cmd	enum
=	O
MU_MAILBOX_MSGNO_TO_UID	int
;	O
break	O
;	O
default	O
:	O
return	O
EINVAL	int
;	O
}	O
rc	int
=	O
mu_mailbox_translate	function
(	O
mset	pointer
->	O
mbox	pointer
,	O
cmd	enum
,	O
beg	pointer
,	O
&	O
n	long
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
if	O
(	O
rc	int
==	O
MU_ERR_NOENT	O
&&	O
cmd	enum
==	O
MU_MAILBOX_UID_TO_MSGNO	int
)	O
{	O
size_t	long
x	long
;	O
if	O
(	O
end	int
==	O
MU_MSGNO_LAST	int
)	O
{	O
rc	int
=	O
mu_mailbox_uidnext	function
(	O
mset	pointer
->	O
mbox	pointer
,	O
&	O
x	double
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
}	O
else	O
x	double
=	O
end	int
;	O
for	O
(	O
;	O
rc	int
==	O
MU_ERR_NOENT	O
&&	O
beg	double
<	O
x	double
;	O
beg	pointer
++	O
)	O
rc	int
=	O
mu_mailbox_translate	function
(	O
mset	pointer
->	O
mbox	pointer
,	O
cmd	enum
,	O
beg	pointer
,	O
&	O
n	long
)	O
;	O
}	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
}	O
*	O
pbeg	pointer
=	O
n	long
;	O
if	O
(	O
beg	pointer
==	O
end	int
)	O
*	O
pend	pointer
=	O
n	long
;	O
else	O
if	O
(	O
end	int
!=	O
MU_MSGNO_LAST	int
)	O
{	O
rc	int
=	O
mu_mailbox_translate	function
(	O
mset	pointer
->	O
mbox	pointer
,	O
cmd	enum
,	O
end	int
,	O
&	O
n	long
)	O
;	O
if	O
(	O
rc	int
==	O
MU_ERR_NOENT	O
&&	O
cmd	enum
==	O
MU_MAILBOX_UID_TO_MSGNO	int
)	O
{	O
for	O
(	O
;	O
rc	int
==	O
MU_ERR_NOENT	O
&&	O
beg	long
<	O
end	int
;	O
end	int
--	O
)	O
rc	int
=	O
mu_mailbox_translate	function
(	O
mset	pointer
->	O
mbox	pointer
,	O
cmd	enum
,	O
end	int
,	O
&	O
n	long
)	O
;	O
}	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
*	O
pend	pointer
=	O
n	long
;	O
}	O
}	O
return	O
0	int
;	O
}	O
int	O
_mu_msgset_translate_range	function
(	O
mu_msgset_t	pointer
mset	pointer
,	O
int	O
mode	int
,	O
struct	O
mu_msgrange	struct
*	O
r	pointer
)	O
{	O
return	O
_mu_msgset_translate_pair	function
(	O
mset	pointer
,	O
mode	enum
,	O
&	O
r	pointer
->	O
msg_beg	long
,	O
&	O
r	pointer
->	O
msg_end	long
)	O
;	O
}	O
struct	O
trans_closure	struct
{	O
mu_msgset_t	pointer
mset	pointer
;	O
int	O
flags	int
;	O
}	O
;	O
static	O
int	O
trans_range	function
(	O
void	O
*	O
item	pointer
,	O
void	O
*	O
data	pointer
)	O
{	O
struct	O
mu_msgrange	struct
const	O
*	O
range	pointer
=	O
item	pointer
;	O
struct	O
trans_closure	struct
*	O
clos	pointer
=	O
data	pointer
;	O
struct	O
mu_msgrange	struct
*	O
copy	pointer
;	O
int	O
rc	int
;	O
copy	pointer
=	O
malloc	function
(	O
sizeof	O
*	O
copy	pointer
)	O
;	O
if	O
(	O
!	O
copy	pointer
)	O
return	O
errno	O
;	O
*	O
copy	pointer
=	O
*	O
range	pointer
;	O
rc	int
=	O
_mu_msgset_translate_range	function
(	O
clos	pointer
->	O
mset	pointer
,	O
_MU_MSGSET_MODE	O
(	O
clos	pointer
->	O
flags	int
)	O
,	O
copy	int
)	O
;	O
switch	O
(	O
rc	int
)	O
{	O
case	O
0	int
:	O
rc	int
=	O
mu_list_append	function
(	O
clos	pointer
->	O
mset	pointer
->	O
list	pointer
,	O
copy	pointer
)	O
;	O
break	O
;	O
case	O
MU_ERR_NOENT	O
:	O
if	O
(	O
clos	pointer
->	O
flags	int
&	O
MU_MSGSET_IGNORE_TRANSERR	int
)	O
rc	int
=	O
0	int
;	O
default	O
:	O
free	function
(	O
copy	pointer
)	O
;	O
}	O
return	O
rc	int
;	O
}	O
int	O
mu_msgset_translate	function
(	O
mu_msgset_t	pointer
*	O
dst	pointer
,	O
mu_msgset_t	pointer
src	pointer
,	O
int	O
flags	int
)	O
{	O
int	O
rc	int
;	O
mu_msgset_t	pointer
tmp	pointer
;	O
rc	int
=	O
mu_msgset_create	function
(	O
&	O
tmp	pointer
,	O
src	pointer
->	O
mbox	pointer
,	O
src	pointer
->	O
flags	int
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
tmp	pointer
->	O
format	pointer
=	O
src	pointer
->	O
format	pointer
;	O
if	O
(	O
_MU_MSGSET_MODE	O
(	O
flags	int
)	O
==	O
src	pointer
->	O
flags	int
)	O
{	O
rc	int
=	O
mu_msgset_copy	function
(	O
src	pointer
,	O
tmp	pointer
)	O
;	O
}	O
else	O
{	O
struct	O
trans_closure	struct
tc	struct
;	O
tc	struct
.	O
mset	pointer
=	O
tmp	long
;	O
tc	struct
.	O
flags	int
=	O
flags	int
;	O
rc	int
=	O
mu_list_foreach	function
(	O
src	pointer
->	O
list	pointer
,	O
trans_range	pointer
,	O
&	O
tc	struct
)	O
;	O
}	O
if	O
(	O
rc	int
)	O
mu_msgset_destroy	function
(	O
&	O
tmp	pointer
)	O
;	O
else	O
*	O
dst	pointer
=	O
tmp	pointer
;	O
return	O
rc	int
;	O
}	O