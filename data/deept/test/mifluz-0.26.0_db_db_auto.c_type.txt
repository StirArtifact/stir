int	O
CDB___db_addrem_log	function
(	O
dbenv	pointer
,	O
txnid	int
,	O
ret_lsnp	pointer
,	O
flags	int
,	O
opcode	int
,	O
fileid	array
,	O
pgno	int
,	O
indx	short
,	O
nbytes	long
,	O
hdr	struct
,	O
dbt	struct
,	O
pagelsn	struct
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
DB_TXN	struct
*	O
txnid	int
;	O
DB_LSN	struct
*	O
ret_lsnp	pointer
;	O
u_int32_t	int
flags	int
;	O
u_int32_t	int
opcode	int
;	O
int32_t	int
fileid	array
;	O
db_pgno_t	int
pgno	int
;	O
u_int32_t	int
indx	short
;	O
size_t	long
nbytes	long
;	O
const	O
DBT	struct
*	O
hdr	struct
;	O
const	O
DBT	struct
*	O
dbt	struct
;	O
DB_LSN	struct
*	O
pagelsn	struct
;	O
{	O
DBT	struct
logrec	struct
;	O
DB_LSN	struct
*	O
lsnp	pointer
,	O
null_lsn	struct
;	O
u_int32_t	int
zero	int
;	O
u_int32_t	int
rectype	int
,	O
txn_num	int
;	O
int	O
ret	int
;	O
u_int8_t	char
*	O
bp	pointer
;	O
if	O
(	O
txnid	int
!=	O
NULL	O
&&	O
TAILQ_FIRST	O
(	O
&	O
txnid	int
->	O
kids	struct
)	O
!=	O
NULL	O
&&	O
CDB___txn_activekids	function
(	O
txnid	int
)	O
!=	O
0	int
)	O
return	O
(	O
CDB___db_child_active_err	function
(	O
dbenv	pointer
)	O
)	O
;	O
rectype	int
=	O
DB_db_addrem	int
;	O
txn_num	int
=	O
txnid	int
==	O
NULL	O
?	O
0	int
:	O
txnid	int
->	O
txnid	int
;	O
if	O
(	O
txnid	int
==	O
NULL	O
)	O
{	O
ZERO_LSN	O
(	O
null_lsn	struct
)	O
;	O
lsnp	pointer
=	O
&	O
null_lsn	struct
;	O
}	O
else	O
lsnp	pointer
=	O
&	O
txnid	int
->	O
last_lsn	struct
;	O
logrec	struct
.	O
size	int
=	O
sizeof	O
(	O
rectype	int
)	O
+	O
sizeof	O
(	O
txn_num	int
)	O
+	O
sizeof	O
(	O
DB_LSN	struct
)	O
+	O
sizeof	O
(	O
opcode	int
)	O
+	O
sizeof	O
(	O
fileid	array
)	O
+	O
sizeof	O
(	O
pgno	int
)	O
+	O
sizeof	O
(	O
indx	short
)	O
+	O
sizeof	O
(	O
nbytes	long
)	O
+	O
sizeof	O
(	O
u_int32_t	int
)	O
+	O
(	O
hdr	struct
==	O
NULL	O
?	O
0	int
:	O
hdr	struct
->	O
size	int
)	O
+	O
sizeof	O
(	O
u_int32_t	int
)	O
+	O
(	O
dbt	struct
==	O
NULL	O
?	O
0	int
:	O
dbt	struct
->	O
size	int
)	O
+	O
sizeof	O
(	O
*	O
pagelsn	struct
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___os_malloc	function
(	O
dbenv	pointer
,	O
logrec	struct
.	O
size	int
,	O
NULL	O
,	O
&	O
logrec	struct
.	O
data	pointer
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
bp	pointer
=	O
logrec	struct
.	O
data	pointer
;	O
memcpy	function
(	O
bp	pointer
,	O
&	O
rectype	int
,	O
sizeof	O
(	O
rectype	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
rectype	int
)	O
;	O
memcpy	function
(	O
bp	pointer
,	O
&	O
txn_num	int
,	O
sizeof	O
(	O
txn_num	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
txn_num	int
)	O
;	O
memcpy	function
(	O
bp	pointer
,	O
lsnp	pointer
,	O
sizeof	O
(	O
DB_LSN	struct
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
DB_LSN	struct
)	O
;	O
memcpy	function
(	O
bp	pointer
,	O
&	O
opcode	int
,	O
sizeof	O
(	O
opcode	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
opcode	int
)	O
;	O
memcpy	function
(	O
bp	pointer
,	O
&	O
fileid	array
,	O
sizeof	O
(	O
fileid	array
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
fileid	array
)	O
;	O
memcpy	function
(	O
bp	pointer
,	O
&	O
pgno	int
,	O
sizeof	O
(	O
pgno	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
pgno	int
)	O
;	O
memcpy	function
(	O
bp	pointer
,	O
&	O
indx	short
,	O
sizeof	O
(	O
indx	short
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
indx	short
)	O
;	O
memcpy	function
(	O
bp	pointer
,	O
&	O
nbytes	long
,	O
sizeof	O
(	O
nbytes	long
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
nbytes	long
)	O
;	O
if	O
(	O
hdr	struct
==	O
NULL	O
)	O
{	O
zero	int
=	O
0	int
;	O
memcpy	function
(	O
bp	pointer
,	O
&	O
zero	int
,	O
sizeof	O
(	O
u_int32_t	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
u_int32_t	int
)	O
;	O
}	O
else	O
{	O
memcpy	function
(	O
bp	pointer
,	O
&	O
hdr	struct
->	O
size	int
,	O
sizeof	O
(	O
hdr	struct
->	O
size	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
hdr	struct
->	O
size	int
)	O
;	O
memcpy	function
(	O
bp	pointer
,	O
hdr	struct
->	O
data	pointer
,	O
hdr	struct
->	O
size	int
)	O
;	O
bp	pointer
+=	O
hdr	struct
->	O
size	int
;	O
}	O
if	O
(	O
dbt	struct
==	O
NULL	O
)	O
{	O
zero	int
=	O
0	int
;	O
memcpy	function
(	O
bp	pointer
,	O
&	O
zero	int
,	O
sizeof	O
(	O
u_int32_t	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
u_int32_t	int
)	O
;	O
}	O
else	O
{	O
memcpy	function
(	O
bp	pointer
,	O
&	O
dbt	struct
->	O
size	int
,	O
sizeof	O
(	O
dbt	struct
->	O
size	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
dbt	struct
->	O
size	int
)	O
;	O
memcpy	function
(	O
bp	pointer
,	O
dbt	struct
->	O
data	pointer
,	O
dbt	struct
->	O
size	int
)	O
;	O
bp	pointer
+=	O
dbt	struct
->	O
size	int
;	O
}	O
if	O
(	O
pagelsn	struct
!=	O
NULL	O
)	O
memcpy	function
(	O
bp	pointer
,	O
pagelsn	struct
,	O
sizeof	O
(	O
*	O
pagelsn	struct
)	O
)	O
;	O
else	O
memset	function
(	O
bp	pointer
,	O
0	int
,	O
sizeof	O
(	O
*	O
pagelsn	struct
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
*	O
pagelsn	struct
)	O
;	O
DB_ASSERT	O
(	O
(	O
u_int32_t	int
)	O
(	O
bp	pointer
-	O
(	O
u_int8_t	char
*	O
)	O
logrec	struct
.	O
data	pointer
)	O
==	O
logrec	struct
.	O
size	int
)	O
;	O
ret	int
=	O
CDB_log_put	function
(	O
dbenv	pointer
,	O
ret_lsnp	pointer
,	O
(	O
DBT	struct
*	O
)	O
&	O
logrec	struct
,	O
flags	int
)	O
;	O
if	O
(	O
txnid	int
!=	O
NULL	O
)	O
txnid	int
->	O
last_lsn	struct
=	O
*	O
ret_lsnp	pointer
;	O
CDB___os_free	function
(	O
logrec	struct
.	O
data	pointer
,	O
logrec	struct
.	O
size	int
)	O
;	O
return	O
(	O
ret	int
)	O
;	O
}	O
int	O
CDB___db_addrem_print	function
(	O
dbenv	pointer
,	O
dbtp	pointer
,	O
lsnp	pointer
,	O
notused2	enum
,	O
notused3	pointer
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
DBT	struct
*	O
dbtp	pointer
;	O
DB_LSN	struct
*	O
lsnp	pointer
;	O
db_recops	enum
notused2	enum
;	O
void	O
*	O
notused3	pointer
;	O
{	O
if	O
(	O
notused2	enum
||	O
notused3	pointer
)	O
{	O
}	O
__db_addrem_args	struct
*	O
argp	pointer
;	O
u_int32_t	int
i	int
;	O
u_int	int
ch	int
;	O
int	O
ret	int
;	O
i	int
=	O
0	int
;	O
ch	int
=	O
0	int
;	O
notused2	enum
=	O
0	int
;	O
notused3	pointer
=	O
NULL	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___db_addrem_read	function
(	O
dbenv	pointer
,	O
dbtp	pointer
->	O
data	pointer
,	O
&	O
argp	pointer
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
printf	function
(	O
"[%lu][%lu]db_addrem: rec: %lu txnid %lx prevlsn [%lu][%lu]\n"	pointer
,	O
(	O
u_long	long
)	O
lsnp	pointer
->	O
file	int
,	O
(	O
u_long	long
)	O
lsnp	pointer
->	O
offset	int
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
type	enum
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
txnid	int
->	O
txnid	int
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
prev_lsn	struct
.	O
file	int
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
prev_lsn	struct
.	O
offset	int
)	O
;	O
printf	function
(	O
"\topcode: %lu\n"	pointer
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
opcode	int
)	O
;	O
printf	function
(	O
"\tfileid: %ld\n"	pointer
,	O
(	O
long	O
)	O
argp	pointer
->	O
fileid	array
)	O
;	O
printf	function
(	O
"\tpgno: %lu\n"	pointer
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
pgno	int
)	O
;	O
printf	function
(	O
"\tindx: %lu\n"	pointer
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
indx	short
)	O
;	O
printf	function
(	O
"\tnbytes: %lu\n"	pointer
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
nbytes	long
)	O
;	O
printf	function
(	O
"\thdr: "	pointer
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
argp	pointer
->	O
hdr	struct
.	O
size	int
;	O
i	int
++	O
)	O
{	O
ch	int
=	O
(	O
(	O
u_int8_t	char
*	O
)	O
argp	pointer
->	O
hdr	struct
.	O
data	pointer
)	O
[	O
i	int
]	O
;	O
if	O
(	O
isprint	function
(	O
ch	int
)	O
||	O
ch	int
==	O
0xa	int
)	O
putchar	function
(	O
ch	int
)	O
;	O
else	O
printf	function
(	O
"%#x "	pointer
,	O
ch	int
)	O
;	O
}	O
printf	function
(	O
"\n"	pointer
)	O
;	O
printf	function
(	O
"\tdbt: "	pointer
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
argp	pointer
->	O
dbt	struct
.	O
size	int
;	O
i	int
++	O
)	O
{	O
ch	int
=	O
(	O
(	O
u_int8_t	char
*	O
)	O
argp	pointer
->	O
dbt	struct
.	O
data	pointer
)	O
[	O
i	int
]	O
;	O
if	O
(	O
isprint	function
(	O
ch	int
)	O
||	O
ch	int
==	O
0xa	int
)	O
putchar	function
(	O
ch	int
)	O
;	O
else	O
printf	function
(	O
"%#x "	pointer
,	O
ch	int
)	O
;	O
}	O
printf	function
(	O
"\n"	pointer
)	O
;	O
printf	function
(	O
"\tpagelsn: [%lu][%lu]\n"	pointer
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
pagelsn	struct
.	O
file	int
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
pagelsn	struct
.	O
offset	int
)	O
;	O
printf	function
(	O
"\n"	pointer
)	O
;	O
CDB___os_free	function
(	O
argp	pointer
,	O
0	int
)	O
;	O
return	O
(	O
0	int
)	O
;	O
}	O
int	O
CDB___db_addrem_read	function
(	O
dbenv	pointer
,	O
recbuf	pointer
,	O
argpp	pointer
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
void	O
*	O
recbuf	pointer
;	O
__db_addrem_args	struct
*	O
*	O
argpp	pointer
;	O
{	O
__db_addrem_args	struct
*	O
argp	pointer
;	O
u_int8_t	char
*	O
bp	pointer
;	O
int	O
ret	int
;	O
ret	int
=	O
CDB___os_malloc	function
(	O
dbenv	pointer
,	O
sizeof	O
(	O
__db_addrem_args	struct
)	O
+	O
sizeof	O
(	O
DB_TXN	struct
)	O
,	O
NULL	O
,	O
&	O
argp	pointer
)	O
;	O
if	O
(	O
ret	int
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
argp	pointer
->	O
txnid	int
=	O
(	O
DB_TXN	struct
*	O
)	O
&	O
argp	pointer
[	O
1	int
]	O
;	O
bp	pointer
=	O
recbuf	pointer
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
type	enum
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
type	enum
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
type	enum
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
txnid	int
->	O
txnid	int
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
txnid	int
->	O
txnid	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
txnid	int
->	O
txnid	int
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
prev_lsn	struct
,	O
bp	pointer
,	O
sizeof	O
(	O
DB_LSN	struct
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
DB_LSN	struct
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
opcode	int
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
opcode	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
opcode	int
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
fileid	array
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
fileid	array
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
fileid	array
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
pgno	int
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
pgno	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
pgno	int
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
indx	short
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
indx	short
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
indx	short
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
nbytes	long
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
nbytes	long
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
nbytes	long
)	O
;	O
memset	function
(	O
&	O
argp	pointer
->	O
hdr	struct
,	O
0	int
,	O
sizeof	O
(	O
argp	pointer
->	O
hdr	struct
)	O
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
hdr	struct
.	O
size	int
,	O
bp	pointer
,	O
sizeof	O
(	O
u_int32_t	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
u_int32_t	int
)	O
;	O
argp	pointer
->	O
hdr	struct
.	O
data	pointer
=	O
bp	pointer
;	O
bp	pointer
+=	O
argp	pointer
->	O
hdr	struct
.	O
size	int
;	O
memset	function
(	O
&	O
argp	pointer
->	O
dbt	struct
,	O
0	int
,	O
sizeof	O
(	O
argp	pointer
->	O
dbt	struct
)	O
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
dbt	struct
.	O
size	int
,	O
bp	pointer
,	O
sizeof	O
(	O
u_int32_t	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
u_int32_t	int
)	O
;	O
argp	pointer
->	O
dbt	struct
.	O
data	pointer
=	O
bp	pointer
;	O
bp	pointer
+=	O
argp	pointer
->	O
dbt	struct
.	O
size	int
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
pagelsn	struct
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
pagelsn	struct
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
pagelsn	struct
)	O
;	O
*	O
argpp	pointer
=	O
argp	pointer
;	O
return	O
(	O
0	int
)	O
;	O
}	O
int	O
CDB___db_split_print	function
(	O
dbenv	pointer
,	O
dbtp	pointer
,	O
lsnp	pointer
,	O
notused2	enum
,	O
notused3	pointer
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
DBT	struct
*	O
dbtp	pointer
;	O
DB_LSN	struct
*	O
lsnp	pointer
;	O
db_recops	enum
notused2	enum
;	O
void	O
*	O
notused3	pointer
;	O
{	O
if	O
(	O
notused2	enum
||	O
notused3	pointer
)	O
{	O
}	O
__db_split_args	struct
*	O
argp	pointer
;	O
u_int32_t	int
i	int
;	O
u_int	int
ch	int
;	O
int	O
ret	int
;	O
i	int
=	O
0	int
;	O
ch	int
=	O
0	int
;	O
notused2	enum
=	O
0	int
;	O
notused3	pointer
=	O
NULL	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___db_split_read	function
(	O
dbenv	pointer
,	O
dbtp	pointer
->	O
data	pointer
,	O
&	O
argp	pointer
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
printf	function
(	O
"[%lu][%lu]db_split: rec: %lu txnid %lx prevlsn [%lu][%lu]\n"	pointer
,	O
(	O
u_long	long
)	O
lsnp	pointer
->	O
file	int
,	O
(	O
u_long	long
)	O
lsnp	pointer
->	O
offset	int
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
type	enum
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
txnid	int
->	O
txnid	int
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
prev_lsn	struct
.	O
file	int
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
prev_lsn	struct
.	O
offset	int
)	O
;	O
printf	function
(	O
"\topcode: %lu\n"	pointer
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
opcode	int
)	O
;	O
printf	function
(	O
"\tfileid: %ld\n"	pointer
,	O
(	O
long	O
)	O
argp	pointer
->	O
fileid	array
)	O
;	O
printf	function
(	O
"\tpgno: %lu\n"	pointer
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
pgno	int
)	O
;	O
printf	function
(	O
"\tpageimage: "	pointer
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
argp	pointer
->	O
pageimage	struct
.	O
size	int
;	O
i	int
++	O
)	O
{	O
ch	int
=	O
(	O
(	O
u_int8_t	char
*	O
)	O
argp	pointer
->	O
pageimage	struct
.	O
data	pointer
)	O
[	O
i	int
]	O
;	O
if	O
(	O
isprint	function
(	O
ch	int
)	O
||	O
ch	int
==	O
0xa	int
)	O
putchar	function
(	O
ch	int
)	O
;	O
else	O
printf	function
(	O
"%#x "	pointer
,	O
ch	int
)	O
;	O
}	O
printf	function
(	O
"\n"	pointer
)	O
;	O
printf	function
(	O
"\tpagelsn: [%lu][%lu]\n"	pointer
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
pagelsn	struct
.	O
file	int
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
pagelsn	struct
.	O
offset	int
)	O
;	O
printf	function
(	O
"\n"	pointer
)	O
;	O
CDB___os_free	function
(	O
argp	pointer
,	O
0	int
)	O
;	O
return	O
(	O
0	int
)	O
;	O
}	O
int	O
CDB___db_split_read	function
(	O
dbenv	pointer
,	O
recbuf	pointer
,	O
argpp	pointer
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
void	O
*	O
recbuf	pointer
;	O
__db_split_args	struct
*	O
*	O
argpp	pointer
;	O
{	O
__db_split_args	struct
*	O
argp	pointer
;	O
u_int8_t	char
*	O
bp	pointer
;	O
int	O
ret	int
;	O
ret	int
=	O
CDB___os_malloc	function
(	O
dbenv	pointer
,	O
sizeof	O
(	O
__db_split_args	struct
)	O
+	O
sizeof	O
(	O
DB_TXN	struct
)	O
,	O
NULL	O
,	O
&	O
argp	pointer
)	O
;	O
if	O
(	O
ret	int
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
argp	pointer
->	O
txnid	int
=	O
(	O
DB_TXN	struct
*	O
)	O
&	O
argp	pointer
[	O
1	int
]	O
;	O
bp	pointer
=	O
recbuf	pointer
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
type	enum
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
type	enum
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
type	enum
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
txnid	int
->	O
txnid	int
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
txnid	int
->	O
txnid	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
txnid	int
->	O
txnid	int
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
prev_lsn	struct
,	O
bp	pointer
,	O
sizeof	O
(	O
DB_LSN	struct
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
DB_LSN	struct
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
opcode	int
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
opcode	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
opcode	int
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
fileid	array
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
fileid	array
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
fileid	array
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
pgno	int
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
pgno	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
pgno	int
)	O
;	O
memset	function
(	O
&	O
argp	pointer
->	O
pageimage	struct
,	O
0	int
,	O
sizeof	O
(	O
argp	pointer
->	O
pageimage	struct
)	O
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
pageimage	struct
.	O
size	int
,	O
bp	pointer
,	O
sizeof	O
(	O
u_int32_t	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
u_int32_t	int
)	O
;	O
argp	pointer
->	O
pageimage	struct
.	O
data	pointer
=	O
bp	pointer
;	O
bp	pointer
+=	O
argp	pointer
->	O
pageimage	struct
.	O
size	int
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
pagelsn	struct
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
pagelsn	struct
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
pagelsn	struct
)	O
;	O
*	O
argpp	pointer
=	O
argp	pointer
;	O
return	O
(	O
0	int
)	O
;	O
}	O
int	O
CDB___db_big_log	function
(	O
dbenv	pointer
,	O
txnid	int
,	O
ret_lsnp	pointer
,	O
flags	int
,	O
opcode	int
,	O
fileid	array
,	O
pgno	int
,	O
prev_pgno	int
,	O
next_pgno	int
,	O
dbt	struct
,	O
pagelsn	struct
,	O
prevlsn	struct
,	O
nextlsn	struct
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
DB_TXN	struct
*	O
txnid	int
;	O
DB_LSN	struct
*	O
ret_lsnp	pointer
;	O
u_int32_t	int
flags	int
;	O
u_int32_t	int
opcode	int
;	O
int32_t	int
fileid	array
;	O
db_pgno_t	int
pgno	int
;	O
db_pgno_t	int
prev_pgno	int
;	O
db_pgno_t	int
next_pgno	int
;	O
const	O
DBT	struct
*	O
dbt	struct
;	O
DB_LSN	struct
*	O
pagelsn	struct
;	O
DB_LSN	struct
*	O
prevlsn	struct
;	O
DB_LSN	struct
*	O
nextlsn	struct
;	O
{	O
DBT	struct
logrec	struct
;	O
DB_LSN	struct
*	O
lsnp	pointer
,	O
null_lsn	struct
;	O
u_int32_t	int
zero	int
;	O
u_int32_t	int
rectype	int
,	O
txn_num	int
;	O
int	O
ret	int
;	O
u_int8_t	char
*	O
bp	pointer
;	O
if	O
(	O
txnid	int
!=	O
NULL	O
&&	O
TAILQ_FIRST	O
(	O
&	O
txnid	int
->	O
kids	struct
)	O
!=	O
NULL	O
&&	O
CDB___txn_activekids	function
(	O
txnid	int
)	O
!=	O
0	int
)	O
return	O
(	O
CDB___db_child_active_err	function
(	O
dbenv	pointer
)	O
)	O
;	O
rectype	int
=	O
DB_db_big	int
;	O
txn_num	int
=	O
txnid	int
==	O
NULL	O
?	O
0	int
:	O
txnid	int
->	O
txnid	int
;	O
if	O
(	O
txnid	int
==	O
NULL	O
)	O
{	O
ZERO_LSN	O
(	O
null_lsn	struct
)	O
;	O
lsnp	pointer
=	O
&	O
null_lsn	struct
;	O
}	O
else	O
lsnp	pointer
=	O
&	O
txnid	int
->	O
last_lsn	struct
;	O
logrec	struct
.	O
size	int
=	O
sizeof	O
(	O
rectype	int
)	O
+	O
sizeof	O
(	O
txn_num	int
)	O
+	O
sizeof	O
(	O
DB_LSN	struct
)	O
+	O
sizeof	O
(	O
opcode	int
)	O
+	O
sizeof	O
(	O
fileid	array
)	O
+	O
sizeof	O
(	O
pgno	int
)	O
+	O
sizeof	O
(	O
prev_pgno	int
)	O
+	O
sizeof	O
(	O
next_pgno	int
)	O
+	O
sizeof	O
(	O
u_int32_t	int
)	O
+	O
(	O
dbt	struct
==	O
NULL	O
?	O
0	int
:	O
dbt	struct
->	O
size	int
)	O
+	O
sizeof	O
(	O
*	O
pagelsn	struct
)	O
+	O
sizeof	O
(	O
*	O
prevlsn	struct
)	O
+	O
sizeof	O
(	O
*	O
nextlsn	struct
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___os_malloc	function
(	O
dbenv	pointer
,	O
logrec	struct
.	O
size	int
,	O
NULL	O
,	O
&	O
logrec	struct
.	O
data	pointer
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
bp	pointer
=	O
logrec	struct
.	O
data	pointer
;	O
memcpy	function
(	O
bp	pointer
,	O
&	O
rectype	int
,	O
sizeof	O
(	O
rectype	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
rectype	int
)	O
;	O
memcpy	function
(	O
bp	pointer
,	O
&	O
txn_num	int
,	O
sizeof	O
(	O
txn_num	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
txn_num	int
)	O
;	O
memcpy	function
(	O
bp	pointer
,	O
lsnp	pointer
,	O
sizeof	O
(	O
DB_LSN	struct
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
DB_LSN	struct
)	O
;	O
memcpy	function
(	O
bp	pointer
,	O
&	O
opcode	int
,	O
sizeof	O
(	O
opcode	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
opcode	int
)	O
;	O
memcpy	function
(	O
bp	pointer
,	O
&	O
fileid	array
,	O
sizeof	O
(	O
fileid	array
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
fileid	array
)	O
;	O
memcpy	function
(	O
bp	pointer
,	O
&	O
pgno	int
,	O
sizeof	O
(	O
pgno	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
pgno	int
)	O
;	O
memcpy	function
(	O
bp	pointer
,	O
&	O
prev_pgno	int
,	O
sizeof	O
(	O
prev_pgno	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
prev_pgno	int
)	O
;	O
memcpy	function
(	O
bp	pointer
,	O
&	O
next_pgno	int
,	O
sizeof	O
(	O
next_pgno	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
next_pgno	int
)	O
;	O
if	O
(	O
dbt	struct
==	O
NULL	O
)	O
{	O
zero	int
=	O
0	int
;	O
memcpy	function
(	O
bp	pointer
,	O
&	O
zero	int
,	O
sizeof	O
(	O
u_int32_t	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
u_int32_t	int
)	O
;	O
}	O
else	O
{	O
memcpy	function
(	O
bp	pointer
,	O
&	O
dbt	struct
->	O
size	int
,	O
sizeof	O
(	O
dbt	struct
->	O
size	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
dbt	struct
->	O
size	int
)	O
;	O
memcpy	function
(	O
bp	pointer
,	O
dbt	struct
->	O
data	pointer
,	O
dbt	struct
->	O
size	int
)	O
;	O
bp	pointer
+=	O
dbt	struct
->	O
size	int
;	O
}	O
if	O
(	O
pagelsn	struct
!=	O
NULL	O
)	O
memcpy	function
(	O
bp	pointer
,	O
pagelsn	struct
,	O
sizeof	O
(	O
*	O
pagelsn	struct
)	O
)	O
;	O
else	O
memset	function
(	O
bp	pointer
,	O
0	int
,	O
sizeof	O
(	O
*	O
pagelsn	struct
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
*	O
pagelsn	struct
)	O
;	O
if	O
(	O
prevlsn	struct
!=	O
NULL	O
)	O
memcpy	function
(	O
bp	pointer
,	O
prevlsn	struct
,	O
sizeof	O
(	O
*	O
prevlsn	struct
)	O
)	O
;	O
else	O
memset	function
(	O
bp	pointer
,	O
0	int
,	O
sizeof	O
(	O
*	O
prevlsn	struct
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
*	O
prevlsn	struct
)	O
;	O
if	O
(	O
nextlsn	struct
!=	O
NULL	O
)	O
memcpy	function
(	O
bp	pointer
,	O
nextlsn	struct
,	O
sizeof	O
(	O
*	O
nextlsn	struct
)	O
)	O
;	O
else	O
memset	function
(	O
bp	pointer
,	O
0	int
,	O
sizeof	O
(	O
*	O
nextlsn	struct
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
*	O
nextlsn	struct
)	O
;	O
DB_ASSERT	O
(	O
(	O
u_int32_t	int
)	O
(	O
bp	pointer
-	O
(	O
u_int8_t	char
*	O
)	O
logrec	struct
.	O
data	pointer
)	O
==	O
logrec	struct
.	O
size	int
)	O
;	O
ret	int
=	O
CDB_log_put	function
(	O
dbenv	pointer
,	O
ret_lsnp	pointer
,	O
(	O
DBT	struct
*	O
)	O
&	O
logrec	struct
,	O
flags	int
)	O
;	O
if	O
(	O
txnid	int
!=	O
NULL	O
)	O
txnid	int
->	O
last_lsn	struct
=	O
*	O
ret_lsnp	pointer
;	O
CDB___os_free	function
(	O
logrec	struct
.	O
data	pointer
,	O
logrec	struct
.	O
size	int
)	O
;	O
return	O
(	O
ret	int
)	O
;	O
}	O
int	O
CDB___db_big_print	function
(	O
dbenv	pointer
,	O
dbtp	pointer
,	O
lsnp	pointer
,	O
notused2	enum
,	O
notused3	pointer
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
DBT	struct
*	O
dbtp	pointer
;	O
DB_LSN	struct
*	O
lsnp	pointer
;	O
db_recops	enum
notused2	enum
;	O
void	O
*	O
notused3	pointer
;	O
{	O
if	O
(	O
notused2	enum
||	O
notused3	pointer
)	O
{	O
}	O
__db_big_args	struct
*	O
argp	pointer
;	O
u_int32_t	int
i	int
;	O
u_int	int
ch	int
;	O
int	O
ret	int
;	O
i	int
=	O
0	int
;	O
ch	int
=	O
0	int
;	O
notused2	enum
=	O
0	int
;	O
notused3	pointer
=	O
NULL	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___db_big_read	function
(	O
dbenv	pointer
,	O
dbtp	pointer
->	O
data	pointer
,	O
&	O
argp	pointer
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
printf	function
(	O
"[%lu][%lu]db_big: rec: %lu txnid %lx prevlsn [%lu][%lu]\n"	pointer
,	O
(	O
u_long	long
)	O
lsnp	pointer
->	O
file	int
,	O
(	O
u_long	long
)	O
lsnp	pointer
->	O
offset	int
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
type	enum
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
txnid	int
->	O
txnid	int
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
prev_lsn	struct
.	O
file	int
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
prev_lsn	struct
.	O
offset	int
)	O
;	O
printf	function
(	O
"\topcode: %lu\n"	pointer
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
opcode	int
)	O
;	O
printf	function
(	O
"\tfileid: %ld\n"	pointer
,	O
(	O
long	O
)	O
argp	pointer
->	O
fileid	array
)	O
;	O
printf	function
(	O
"\tpgno: %lu\n"	pointer
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
pgno	int
)	O
;	O
printf	function
(	O
"\tprev_pgno: %lu\n"	pointer
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
prev_pgno	int
)	O
;	O
printf	function
(	O
"\tnext_pgno: %lu\n"	pointer
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
next_pgno	int
)	O
;	O
printf	function
(	O
"\tdbt: "	pointer
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
argp	pointer
->	O
dbt	struct
.	O
size	int
;	O
i	int
++	O
)	O
{	O
ch	int
=	O
(	O
(	O
u_int8_t	char
*	O
)	O
argp	pointer
->	O
dbt	struct
.	O
data	pointer
)	O
[	O
i	int
]	O
;	O
if	O
(	O
isprint	function
(	O
ch	int
)	O
||	O
ch	int
==	O
0xa	int
)	O
putchar	function
(	O
ch	int
)	O
;	O
else	O
printf	function
(	O
"%#x "	pointer
,	O
ch	int
)	O
;	O
}	O
printf	function
(	O
"\n"	pointer
)	O
;	O
printf	function
(	O
"\tpagelsn: [%lu][%lu]\n"	pointer
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
pagelsn	struct
.	O
file	int
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
pagelsn	struct
.	O
offset	int
)	O
;	O
printf	function
(	O
"\tprevlsn: [%lu][%lu]\n"	pointer
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
prevlsn	struct
.	O
file	int
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
prevlsn	struct
.	O
offset	int
)	O
;	O
printf	function
(	O
"\tnextlsn: [%lu][%lu]\n"	pointer
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
nextlsn	struct
.	O
file	int
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
nextlsn	struct
.	O
offset	int
)	O
;	O
printf	function
(	O
"\n"	pointer
)	O
;	O
CDB___os_free	function
(	O
argp	pointer
,	O
0	int
)	O
;	O
return	O
(	O
0	int
)	O
;	O
}	O
int	O
CDB___db_big_read	function
(	O
dbenv	pointer
,	O
recbuf	pointer
,	O
argpp	pointer
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
void	O
*	O
recbuf	pointer
;	O
__db_big_args	struct
*	O
*	O
argpp	pointer
;	O
{	O
__db_big_args	struct
*	O
argp	pointer
;	O
u_int8_t	char
*	O
bp	pointer
;	O
int	O
ret	int
;	O
ret	int
=	O
CDB___os_malloc	function
(	O
dbenv	pointer
,	O
sizeof	O
(	O
__db_big_args	struct
)	O
+	O
sizeof	O
(	O
DB_TXN	struct
)	O
,	O
NULL	O
,	O
&	O
argp	pointer
)	O
;	O
if	O
(	O
ret	int
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
argp	pointer
->	O
txnid	int
=	O
(	O
DB_TXN	struct
*	O
)	O
&	O
argp	pointer
[	O
1	int
]	O
;	O
bp	pointer
=	O
recbuf	pointer
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
type	enum
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
type	enum
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
type	enum
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
txnid	int
->	O
txnid	int
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
txnid	int
->	O
txnid	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
txnid	int
->	O
txnid	int
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
prev_lsn	struct
,	O
bp	pointer
,	O
sizeof	O
(	O
DB_LSN	struct
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
DB_LSN	struct
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
opcode	int
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
opcode	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
opcode	int
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
fileid	array
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
fileid	array
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
fileid	array
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
pgno	int
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
pgno	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
pgno	int
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
prev_pgno	int
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
prev_pgno	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
prev_pgno	int
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
next_pgno	int
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
next_pgno	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
next_pgno	int
)	O
;	O
memset	function
(	O
&	O
argp	pointer
->	O
dbt	struct
,	O
0	int
,	O
sizeof	O
(	O
argp	pointer
->	O
dbt	struct
)	O
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
dbt	struct
.	O
size	int
,	O
bp	pointer
,	O
sizeof	O
(	O
u_int32_t	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
u_int32_t	int
)	O
;	O
argp	pointer
->	O
dbt	struct
.	O
data	pointer
=	O
bp	pointer
;	O
bp	pointer
+=	O
argp	pointer
->	O
dbt	struct
.	O
size	int
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
pagelsn	struct
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
pagelsn	struct
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
pagelsn	struct
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
prevlsn	struct
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
prevlsn	struct
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
prevlsn	struct
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
nextlsn	struct
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
nextlsn	struct
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
nextlsn	struct
)	O
;	O
*	O
argpp	pointer
=	O
argp	pointer
;	O
return	O
(	O
0	int
)	O
;	O
}	O
int	O
CDB___db_ovref_log	function
(	O
dbenv	pointer
,	O
txnid	int
,	O
ret_lsnp	pointer
,	O
flags	int
,	O
fileid	array
,	O
pgno	int
,	O
adjust	int
,	O
lsn	struct
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
DB_TXN	struct
*	O
txnid	int
;	O
DB_LSN	struct
*	O
ret_lsnp	pointer
;	O
u_int32_t	int
flags	int
;	O
int32_t	int
fileid	array
;	O
db_pgno_t	int
pgno	int
;	O
int32_t	int
adjust	int
;	O
DB_LSN	struct
*	O
lsn	struct
;	O
{	O
DBT	struct
logrec	struct
;	O
DB_LSN	struct
*	O
lsnp	pointer
,	O
null_lsn	struct
;	O
u_int32_t	int
rectype	int
,	O
txn_num	int
;	O
int	O
ret	int
;	O
u_int8_t	char
*	O
bp	pointer
;	O
if	O
(	O
txnid	int
!=	O
NULL	O
&&	O
TAILQ_FIRST	O
(	O
&	O
txnid	int
->	O
kids	struct
)	O
!=	O
NULL	O
&&	O
CDB___txn_activekids	function
(	O
txnid	int
)	O
!=	O
0	int
)	O
return	O
(	O
CDB___db_child_active_err	function
(	O
dbenv	pointer
)	O
)	O
;	O
rectype	int
=	O
DB_db_ovref	int
;	O
txn_num	int
=	O
txnid	int
==	O
NULL	O
?	O
0	int
:	O
txnid	int
->	O
txnid	int
;	O
if	O
(	O
txnid	int
==	O
NULL	O
)	O
{	O
ZERO_LSN	O
(	O
null_lsn	struct
)	O
;	O
lsnp	pointer
=	O
&	O
null_lsn	struct
;	O
}	O
else	O
lsnp	pointer
=	O
&	O
txnid	int
->	O
last_lsn	struct
;	O
logrec	struct
.	O
size	int
=	O
sizeof	O
(	O
rectype	int
)	O
+	O
sizeof	O
(	O
txn_num	int
)	O
+	O
sizeof	O
(	O
DB_LSN	struct
)	O
+	O
sizeof	O
(	O
fileid	array
)	O
+	O
sizeof	O
(	O
pgno	int
)	O
+	O
sizeof	O
(	O
adjust	int
)	O
+	O
sizeof	O
(	O
*	O
lsn	struct
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___os_malloc	function
(	O
dbenv	pointer
,	O
logrec	struct
.	O
size	int
,	O
NULL	O
,	O
&	O
logrec	struct
.	O
data	pointer
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
bp	pointer
=	O
logrec	struct
.	O
data	pointer
;	O
memcpy	function
(	O
bp	pointer
,	O
&	O
rectype	int
,	O
sizeof	O
(	O
rectype	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
rectype	int
)	O
;	O
memcpy	function
(	O
bp	pointer
,	O
&	O
txn_num	int
,	O
sizeof	O
(	O
txn_num	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
txn_num	int
)	O
;	O
memcpy	function
(	O
bp	pointer
,	O
lsnp	pointer
,	O
sizeof	O
(	O
DB_LSN	struct
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
DB_LSN	struct
)	O
;	O
memcpy	function
(	O
bp	pointer
,	O
&	O
fileid	array
,	O
sizeof	O
(	O
fileid	array
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
fileid	array
)	O
;	O
memcpy	function
(	O
bp	pointer
,	O
&	O
pgno	int
,	O
sizeof	O
(	O
pgno	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
pgno	int
)	O
;	O
memcpy	function
(	O
bp	pointer
,	O
&	O
adjust	int
,	O
sizeof	O
(	O
adjust	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
adjust	int
)	O
;	O
if	O
(	O
lsn	struct
!=	O
NULL	O
)	O
memcpy	function
(	O
bp	pointer
,	O
lsn	struct
,	O
sizeof	O
(	O
*	O
lsn	struct
)	O
)	O
;	O
else	O
memset	function
(	O
bp	pointer
,	O
0	int
,	O
sizeof	O
(	O
*	O
lsn	struct
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
*	O
lsn	struct
)	O
;	O
DB_ASSERT	O
(	O
(	O
u_int32_t	int
)	O
(	O
bp	pointer
-	O
(	O
u_int8_t	char
*	O
)	O
logrec	struct
.	O
data	pointer
)	O
==	O
logrec	struct
.	O
size	int
)	O
;	O
ret	int
=	O
CDB_log_put	function
(	O
dbenv	pointer
,	O
ret_lsnp	pointer
,	O
(	O
DBT	struct
*	O
)	O
&	O
logrec	struct
,	O
flags	int
)	O
;	O
if	O
(	O
txnid	int
!=	O
NULL	O
)	O
txnid	int
->	O
last_lsn	struct
=	O
*	O
ret_lsnp	pointer
;	O
CDB___os_free	function
(	O
logrec	struct
.	O
data	pointer
,	O
logrec	struct
.	O
size	int
)	O
;	O
return	O
(	O
ret	int
)	O
;	O
}	O
int	O
CDB___db_ovref_print	function
(	O
dbenv	pointer
,	O
dbtp	pointer
,	O
lsnp	pointer
,	O
notused2	enum
,	O
notused3	pointer
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
DBT	struct
*	O
dbtp	pointer
;	O
DB_LSN	struct
*	O
lsnp	pointer
;	O
db_recops	enum
notused2	enum
;	O
void	O
*	O
notused3	pointer
;	O
{	O
if	O
(	O
notused2	enum
||	O
notused3	pointer
)	O
{	O
}	O
__db_ovref_args	struct
*	O
argp	pointer
;	O
int	O
ret	int
;	O
notused2	enum
=	O
0	int
;	O
notused3	pointer
=	O
NULL	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___db_ovref_read	function
(	O
dbenv	pointer
,	O
dbtp	pointer
->	O
data	pointer
,	O
&	O
argp	pointer
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
printf	function
(	O
"[%lu][%lu]db_ovref: rec: %lu txnid %lx prevlsn [%lu][%lu]\n"	pointer
,	O
(	O
u_long	long
)	O
lsnp	pointer
->	O
file	int
,	O
(	O
u_long	long
)	O
lsnp	pointer
->	O
offset	int
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
type	enum
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
txnid	int
->	O
txnid	int
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
prev_lsn	struct
.	O
file	int
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
prev_lsn	struct
.	O
offset	int
)	O
;	O
printf	function
(	O
"\tfileid: %ld\n"	pointer
,	O
(	O
long	O
)	O
argp	pointer
->	O
fileid	array
)	O
;	O
printf	function
(	O
"\tpgno: %lu\n"	pointer
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
pgno	int
)	O
;	O
printf	function
(	O
"\tadjust: %ld\n"	pointer
,	O
(	O
long	O
)	O
argp	pointer
->	O
adjust	int
)	O
;	O
printf	function
(	O
"\tlsn: [%lu][%lu]\n"	pointer
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
lsn	struct
.	O
file	int
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
lsn	struct
.	O
offset	int
)	O
;	O
printf	function
(	O
"\n"	pointer
)	O
;	O
CDB___os_free	function
(	O
argp	pointer
,	O
0	int
)	O
;	O
return	O
(	O
0	int
)	O
;	O
}	O
int	O
CDB___db_ovref_read	function
(	O
dbenv	pointer
,	O
recbuf	pointer
,	O
argpp	pointer
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
void	O
*	O
recbuf	pointer
;	O
__db_ovref_args	struct
*	O
*	O
argpp	pointer
;	O
{	O
__db_ovref_args	struct
*	O
argp	pointer
;	O
u_int8_t	char
*	O
bp	pointer
;	O
int	O
ret	int
;	O
ret	int
=	O
CDB___os_malloc	function
(	O
dbenv	pointer
,	O
sizeof	O
(	O
__db_ovref_args	struct
)	O
+	O
sizeof	O
(	O
DB_TXN	struct
)	O
,	O
NULL	O
,	O
&	O
argp	pointer
)	O
;	O
if	O
(	O
ret	int
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
argp	pointer
->	O
txnid	int
=	O
(	O
DB_TXN	struct
*	O
)	O
&	O
argp	pointer
[	O
1	int
]	O
;	O
bp	pointer
=	O
recbuf	pointer
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
type	enum
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
type	enum
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
type	enum
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
txnid	int
->	O
txnid	int
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
txnid	int
->	O
txnid	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
txnid	int
->	O
txnid	int
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
prev_lsn	struct
,	O
bp	pointer
,	O
sizeof	O
(	O
DB_LSN	struct
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
DB_LSN	struct
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
fileid	array
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
fileid	array
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
fileid	array
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
pgno	int
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
pgno	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
pgno	int
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
adjust	int
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
adjust	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
adjust	int
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
lsn	struct
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
lsn	struct
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
lsn	struct
)	O
;	O
*	O
argpp	pointer
=	O
argp	pointer
;	O
return	O
(	O
0	int
)	O
;	O
}	O
int	O
CDB___db_relink_log	function
(	O
dbenv	pointer
,	O
txnid	int
,	O
ret_lsnp	pointer
,	O
flags	int
,	O
opcode	int
,	O
fileid	array
,	O
pgno	int
,	O
lsn	struct
,	O
prev	int
,	O
lsn_prev	struct
,	O
next	int
,	O
lsn_next	struct
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
DB_TXN	struct
*	O
txnid	int
;	O
DB_LSN	struct
*	O
ret_lsnp	pointer
;	O
u_int32_t	int
flags	int
;	O
u_int32_t	int
opcode	int
;	O
int32_t	int
fileid	array
;	O
db_pgno_t	int
pgno	int
;	O
DB_LSN	struct
*	O
lsn	struct
;	O
db_pgno_t	int
prev	int
;	O
DB_LSN	struct
*	O
lsn_prev	struct
;	O
db_pgno_t	int
next	int
;	O
DB_LSN	struct
*	O
lsn_next	struct
;	O
{	O
DBT	struct
logrec	struct
;	O
DB_LSN	struct
*	O
lsnp	pointer
,	O
null_lsn	struct
;	O
u_int32_t	int
rectype	int
,	O
txn_num	int
;	O
int	O
ret	int
;	O
u_int8_t	char
*	O
bp	pointer
;	O
if	O
(	O
txnid	int
!=	O
NULL	O
&&	O
TAILQ_FIRST	O
(	O
&	O
txnid	int
->	O
kids	struct
)	O
!=	O
NULL	O
&&	O
CDB___txn_activekids	function
(	O
txnid	int
)	O
!=	O
0	int
)	O
return	O
(	O
CDB___db_child_active_err	function
(	O
dbenv	pointer
)	O
)	O
;	O
rectype	int
=	O
DB_db_relink	int
;	O
txn_num	int
=	O
txnid	int
==	O
NULL	O
?	O
0	int
:	O
txnid	int
->	O
txnid	int
;	O
if	O
(	O
txnid	int
==	O
NULL	O
)	O
{	O
ZERO_LSN	O
(	O
null_lsn	struct
)	O
;	O
lsnp	pointer
=	O
&	O
null_lsn	struct
;	O
}	O
else	O
lsnp	pointer
=	O
&	O
txnid	int
->	O
last_lsn	struct
;	O
logrec	struct
.	O
size	int
=	O
sizeof	O
(	O
rectype	int
)	O
+	O
sizeof	O
(	O
txn_num	int
)	O
+	O
sizeof	O
(	O
DB_LSN	struct
)	O
+	O
sizeof	O
(	O
opcode	int
)	O
+	O
sizeof	O
(	O
fileid	array
)	O
+	O
sizeof	O
(	O
pgno	int
)	O
+	O
sizeof	O
(	O
*	O
lsn	struct
)	O
+	O
sizeof	O
(	O
prev	int
)	O
+	O
sizeof	O
(	O
*	O
lsn_prev	struct
)	O
+	O
sizeof	O
(	O
next	int
)	O
+	O
sizeof	O
(	O
*	O
lsn_next	struct
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___os_malloc	function
(	O
dbenv	pointer
,	O
logrec	struct
.	O
size	int
,	O
NULL	O
,	O
&	O
logrec	struct
.	O
data	pointer
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
bp	pointer
=	O
logrec	struct
.	O
data	pointer
;	O
memcpy	function
(	O
bp	pointer
,	O
&	O
rectype	int
,	O
sizeof	O
(	O
rectype	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
rectype	int
)	O
;	O
memcpy	function
(	O
bp	pointer
,	O
&	O
txn_num	int
,	O
sizeof	O
(	O
txn_num	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
txn_num	int
)	O
;	O
memcpy	function
(	O
bp	pointer
,	O
lsnp	pointer
,	O
sizeof	O
(	O
DB_LSN	struct
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
DB_LSN	struct
)	O
;	O
memcpy	function
(	O
bp	pointer
,	O
&	O
opcode	int
,	O
sizeof	O
(	O
opcode	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
opcode	int
)	O
;	O
memcpy	function
(	O
bp	pointer
,	O
&	O
fileid	array
,	O
sizeof	O
(	O
fileid	array
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
fileid	array
)	O
;	O
memcpy	function
(	O
bp	pointer
,	O
&	O
pgno	int
,	O
sizeof	O
(	O
pgno	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
pgno	int
)	O
;	O
if	O
(	O
lsn	struct
!=	O
NULL	O
)	O
memcpy	function
(	O
bp	pointer
,	O
lsn	struct
,	O
sizeof	O
(	O
*	O
lsn	struct
)	O
)	O
;	O
else	O
memset	function
(	O
bp	pointer
,	O
0	int
,	O
sizeof	O
(	O
*	O
lsn	struct
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
*	O
lsn	struct
)	O
;	O
memcpy	function
(	O
bp	pointer
,	O
&	O
prev	int
,	O
sizeof	O
(	O
prev	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
prev	int
)	O
;	O
if	O
(	O
lsn_prev	struct
!=	O
NULL	O
)	O
memcpy	function
(	O
bp	pointer
,	O
lsn_prev	struct
,	O
sizeof	O
(	O
*	O
lsn_prev	struct
)	O
)	O
;	O
else	O
memset	function
(	O
bp	pointer
,	O
0	int
,	O
sizeof	O
(	O
*	O
lsn_prev	struct
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
*	O
lsn_prev	struct
)	O
;	O
memcpy	function
(	O
bp	pointer
,	O
&	O
next	int
,	O
sizeof	O
(	O
next	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
next	int
)	O
;	O
if	O
(	O
lsn_next	struct
!=	O
NULL	O
)	O
memcpy	function
(	O
bp	pointer
,	O
lsn_next	struct
,	O
sizeof	O
(	O
*	O
lsn_next	struct
)	O
)	O
;	O
else	O
memset	function
(	O
bp	pointer
,	O
0	int
,	O
sizeof	O
(	O
*	O
lsn_next	struct
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
*	O
lsn_next	struct
)	O
;	O
DB_ASSERT	O
(	O
(	O
u_int32_t	int
)	O
(	O
bp	pointer
-	O
(	O
u_int8_t	char
*	O
)	O
logrec	struct
.	O
data	pointer
)	O
==	O
logrec	struct
.	O
size	int
)	O
;	O
ret	int
=	O
CDB_log_put	function
(	O
dbenv	pointer
,	O
ret_lsnp	pointer
,	O
(	O
DBT	struct
*	O
)	O
&	O
logrec	struct
,	O
flags	int
)	O
;	O
if	O
(	O
txnid	int
!=	O
NULL	O
)	O
txnid	int
->	O
last_lsn	struct
=	O
*	O
ret_lsnp	pointer
;	O
CDB___os_free	function
(	O
logrec	struct
.	O
data	pointer
,	O
logrec	struct
.	O
size	int
)	O
;	O
return	O
(	O
ret	int
)	O
;	O
}	O
int	O
CDB___db_relink_print	function
(	O
dbenv	pointer
,	O
dbtp	pointer
,	O
lsnp	pointer
,	O
notused2	enum
,	O
notused3	pointer
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
DBT	struct
*	O
dbtp	pointer
;	O
DB_LSN	struct
*	O
lsnp	pointer
;	O
db_recops	enum
notused2	enum
;	O
void	O
*	O
notused3	pointer
;	O
{	O
if	O
(	O
notused2	enum
||	O
notused3	pointer
)	O
{	O
}	O
__db_relink_args	struct
*	O
argp	pointer
;	O
int	O
ret	int
;	O
notused2	enum
=	O
0	int
;	O
notused3	pointer
=	O
NULL	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___db_relink_read	function
(	O
dbenv	pointer
,	O
dbtp	pointer
->	O
data	pointer
,	O
&	O
argp	pointer
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
printf	function
(	O
"[%lu][%lu]db_relink: rec: %lu txnid %lx prevlsn [%lu][%lu]\n"	pointer
,	O
(	O
u_long	long
)	O
lsnp	pointer
->	O
file	int
,	O
(	O
u_long	long
)	O
lsnp	pointer
->	O
offset	int
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
type	enum
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
txnid	int
->	O
txnid	int
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
prev_lsn	struct
.	O
file	int
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
prev_lsn	struct
.	O
offset	int
)	O
;	O
printf	function
(	O
"\topcode: %lu\n"	pointer
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
opcode	int
)	O
;	O
printf	function
(	O
"\tfileid: %ld\n"	pointer
,	O
(	O
long	O
)	O
argp	pointer
->	O
fileid	array
)	O
;	O
printf	function
(	O
"\tpgno: %lu\n"	pointer
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
pgno	int
)	O
;	O
printf	function
(	O
"\tlsn: [%lu][%lu]\n"	pointer
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
lsn	struct
.	O
file	int
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
lsn	struct
.	O
offset	int
)	O
;	O
printf	function
(	O
"\tprev: %lu\n"	pointer
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
prev	int
)	O
;	O
printf	function
(	O
"\tlsn_prev: [%lu][%lu]\n"	pointer
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
lsn_prev	struct
.	O
file	int
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
lsn_prev	struct
.	O
offset	int
)	O
;	O
printf	function
(	O
"\tnext: %lu\n"	pointer
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
next	int
)	O
;	O
printf	function
(	O
"\tlsn_next: [%lu][%lu]\n"	pointer
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
lsn_next	struct
.	O
file	int
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
lsn_next	struct
.	O
offset	int
)	O
;	O
printf	function
(	O
"\n"	pointer
)	O
;	O
CDB___os_free	function
(	O
argp	pointer
,	O
0	int
)	O
;	O
return	O
(	O
0	int
)	O
;	O
}	O
int	O
CDB___db_relink_read	function
(	O
dbenv	pointer
,	O
recbuf	pointer
,	O
argpp	pointer
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
void	O
*	O
recbuf	pointer
;	O
__db_relink_args	struct
*	O
*	O
argpp	pointer
;	O
{	O
__db_relink_args	struct
*	O
argp	pointer
;	O
u_int8_t	char
*	O
bp	pointer
;	O
int	O
ret	int
;	O
ret	int
=	O
CDB___os_malloc	function
(	O
dbenv	pointer
,	O
sizeof	O
(	O
__db_relink_args	struct
)	O
+	O
sizeof	O
(	O
DB_TXN	struct
)	O
,	O
NULL	O
,	O
&	O
argp	pointer
)	O
;	O
if	O
(	O
ret	int
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
argp	pointer
->	O
txnid	int
=	O
(	O
DB_TXN	struct
*	O
)	O
&	O
argp	pointer
[	O
1	int
]	O
;	O
bp	pointer
=	O
recbuf	pointer
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
type	enum
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
type	enum
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
type	enum
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
txnid	int
->	O
txnid	int
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
txnid	int
->	O
txnid	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
txnid	int
->	O
txnid	int
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
prev_lsn	struct
,	O
bp	pointer
,	O
sizeof	O
(	O
DB_LSN	struct
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
DB_LSN	struct
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
opcode	int
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
opcode	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
opcode	int
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
fileid	array
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
fileid	array
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
fileid	array
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
pgno	int
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
pgno	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
pgno	int
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
lsn	struct
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
lsn	struct
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
lsn	struct
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
prev	int
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
prev	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
prev	int
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
lsn_prev	struct
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
lsn_prev	struct
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
lsn_prev	struct
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
next	int
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
next	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
next	int
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
lsn_next	struct
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
lsn_next	struct
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
lsn_next	struct
)	O
;	O
*	O
argpp	pointer
=	O
argp	pointer
;	O
return	O
(	O
0	int
)	O
;	O
}	O
int	O
CDB___db_addpage_print	function
(	O
dbenv	pointer
,	O
dbtp	pointer
,	O
lsnp	pointer
,	O
notused2	enum
,	O
notused3	pointer
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
DBT	struct
*	O
dbtp	pointer
;	O
DB_LSN	struct
*	O
lsnp	pointer
;	O
db_recops	enum
notused2	enum
;	O
void	O
*	O
notused3	pointer
;	O
{	O
if	O
(	O
notused2	enum
||	O
notused3	pointer
)	O
{	O
}	O
__db_addpage_args	struct
*	O
argp	pointer
;	O
int	O
ret	int
;	O
notused2	enum
=	O
0	int
;	O
notused3	pointer
=	O
NULL	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___db_addpage_read	function
(	O
dbenv	pointer
,	O
dbtp	pointer
->	O
data	pointer
,	O
&	O
argp	pointer
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
printf	function
(	O
"[%lu][%lu]db_addpage: rec: %lu txnid %lx prevlsn [%lu][%lu]\n"	pointer
,	O
(	O
u_long	long
)	O
lsnp	pointer
->	O
file	int
,	O
(	O
u_long	long
)	O
lsnp	pointer
->	O
offset	int
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
type	enum
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
txnid	int
->	O
txnid	int
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
prev_lsn	struct
.	O
file	int
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
prev_lsn	struct
.	O
offset	int
)	O
;	O
printf	function
(	O
"\tfileid: %ld\n"	pointer
,	O
(	O
long	O
)	O
argp	pointer
->	O
fileid	array
)	O
;	O
printf	function
(	O
"\tpgno: %lu\n"	pointer
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
pgno	int
)	O
;	O
printf	function
(	O
"\tlsn: [%lu][%lu]\n"	pointer
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
lsn	struct
.	O
file	int
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
lsn	struct
.	O
offset	int
)	O
;	O
printf	function
(	O
"\tnextpgno: %lu\n"	pointer
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
nextpgno	int
)	O
;	O
printf	function
(	O
"\tnextlsn: [%lu][%lu]\n"	pointer
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
nextlsn	struct
.	O
file	int
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
nextlsn	struct
.	O
offset	int
)	O
;	O
printf	function
(	O
"\n"	pointer
)	O
;	O
CDB___os_free	function
(	O
argp	pointer
,	O
0	int
)	O
;	O
return	O
(	O
0	int
)	O
;	O
}	O
int	O
CDB___db_addpage_read	function
(	O
dbenv	pointer
,	O
recbuf	pointer
,	O
argpp	pointer
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
void	O
*	O
recbuf	pointer
;	O
__db_addpage_args	struct
*	O
*	O
argpp	pointer
;	O
{	O
__db_addpage_args	struct
*	O
argp	pointer
;	O
u_int8_t	char
*	O
bp	pointer
;	O
int	O
ret	int
;	O
ret	int
=	O
CDB___os_malloc	function
(	O
dbenv	pointer
,	O
sizeof	O
(	O
__db_addpage_args	struct
)	O
+	O
sizeof	O
(	O
DB_TXN	struct
)	O
,	O
NULL	O
,	O
&	O
argp	pointer
)	O
;	O
if	O
(	O
ret	int
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
argp	pointer
->	O
txnid	int
=	O
(	O
DB_TXN	struct
*	O
)	O
&	O
argp	pointer
[	O
1	int
]	O
;	O
bp	pointer
=	O
recbuf	pointer
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
type	enum
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
type	enum
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
type	enum
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
txnid	int
->	O
txnid	int
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
txnid	int
->	O
txnid	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
txnid	int
->	O
txnid	int
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
prev_lsn	struct
,	O
bp	pointer
,	O
sizeof	O
(	O
DB_LSN	struct
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
DB_LSN	struct
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
fileid	array
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
fileid	array
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
fileid	array
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
pgno	int
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
pgno	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
pgno	int
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
lsn	struct
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
lsn	struct
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
lsn	struct
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
nextpgno	int
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
nextpgno	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
nextpgno	int
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
nextlsn	struct
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
nextlsn	struct
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
nextlsn	struct
)	O
;	O
*	O
argpp	pointer
=	O
argp	pointer
;	O
return	O
(	O
0	int
)	O
;	O
}	O
int	O
CDB___db_debug_log	function
(	O
dbenv	pointer
,	O
txnid	int
,	O
ret_lsnp	pointer
,	O
flags	int
,	O
op	enum
,	O
fileid	array
,	O
key	struct
,	O
data	pointer
,	O
arg_flags	int
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
DB_TXN	struct
*	O
txnid	int
;	O
DB_LSN	struct
*	O
ret_lsnp	pointer
;	O
u_int32_t	int
flags	int
;	O
const	O
DBT	struct
*	O
op	enum
;	O
int32_t	int
fileid	array
;	O
const	O
DBT	struct
*	O
key	struct
;	O
const	O
DBT	struct
*	O
data	pointer
;	O
u_int32_t	int
arg_flags	int
;	O
{	O
DBT	struct
logrec	struct
;	O
DB_LSN	struct
*	O
lsnp	pointer
,	O
null_lsn	struct
;	O
u_int32_t	int
zero	int
;	O
u_int32_t	int
rectype	int
,	O
txn_num	int
;	O
int	O
ret	int
;	O
u_int8_t	char
*	O
bp	pointer
;	O
if	O
(	O
txnid	int
!=	O
NULL	O
&&	O
TAILQ_FIRST	O
(	O
&	O
txnid	int
->	O
kids	struct
)	O
!=	O
NULL	O
&&	O
CDB___txn_activekids	function
(	O
txnid	int
)	O
!=	O
0	int
)	O
return	O
(	O
CDB___db_child_active_err	function
(	O
dbenv	pointer
)	O
)	O
;	O
rectype	int
=	O
DB_db_debug	int
;	O
txn_num	int
=	O
txnid	int
==	O
NULL	O
?	O
0	int
:	O
txnid	int
->	O
txnid	int
;	O
if	O
(	O
txnid	int
==	O
NULL	O
)	O
{	O
ZERO_LSN	O
(	O
null_lsn	struct
)	O
;	O
lsnp	pointer
=	O
&	O
null_lsn	struct
;	O
}	O
else	O
lsnp	pointer
=	O
&	O
txnid	int
->	O
last_lsn	struct
;	O
logrec	struct
.	O
size	int
=	O
sizeof	O
(	O
rectype	int
)	O
+	O
sizeof	O
(	O
txn_num	int
)	O
+	O
sizeof	O
(	O
DB_LSN	struct
)	O
+	O
sizeof	O
(	O
u_int32_t	int
)	O
+	O
(	O
op	enum
==	O
NULL	O
?	O
0	int
:	O
op	enum
->	O
size	int
)	O
+	O
sizeof	O
(	O
fileid	array
)	O
+	O
sizeof	O
(	O
u_int32_t	int
)	O
+	O
(	O
key	struct
==	O
NULL	O
?	O
0	int
:	O
key	struct
->	O
size	int
)	O
+	O
sizeof	O
(	O
u_int32_t	int
)	O
+	O
(	O
data	pointer
==	O
NULL	O
?	O
0	int
:	O
data	pointer
->	O
size	int
)	O
+	O
sizeof	O
(	O
arg_flags	int
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___os_malloc	function
(	O
dbenv	pointer
,	O
logrec	struct
.	O
size	int
,	O
NULL	O
,	O
&	O
logrec	struct
.	O
data	pointer
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
bp	pointer
=	O
logrec	struct
.	O
data	pointer
;	O
memcpy	function
(	O
bp	pointer
,	O
&	O
rectype	int
,	O
sizeof	O
(	O
rectype	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
rectype	int
)	O
;	O
memcpy	function
(	O
bp	pointer
,	O
&	O
txn_num	int
,	O
sizeof	O
(	O
txn_num	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
txn_num	int
)	O
;	O
memcpy	function
(	O
bp	pointer
,	O
lsnp	pointer
,	O
sizeof	O
(	O
DB_LSN	struct
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
DB_LSN	struct
)	O
;	O
if	O
(	O
op	enum
==	O
NULL	O
)	O
{	O
zero	int
=	O
0	int
;	O
memcpy	function
(	O
bp	pointer
,	O
&	O
zero	int
,	O
sizeof	O
(	O
u_int32_t	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
u_int32_t	int
)	O
;	O
}	O
else	O
{	O
memcpy	function
(	O
bp	pointer
,	O
&	O
op	enum
->	O
size	int
,	O
sizeof	O
(	O
op	enum
->	O
size	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
op	enum
->	O
size	int
)	O
;	O
memcpy	function
(	O
bp	pointer
,	O
op	enum
->	O
data	pointer
,	O
op	enum
->	O
size	int
)	O
;	O
bp	pointer
+=	O
op	enum
->	O
size	int
;	O
}	O
memcpy	function
(	O
bp	pointer
,	O
&	O
fileid	array
,	O
sizeof	O
(	O
fileid	array
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
fileid	array
)	O
;	O
if	O
(	O
key	struct
==	O
NULL	O
)	O
{	O
zero	int
=	O
0	int
;	O
memcpy	function
(	O
bp	pointer
,	O
&	O
zero	int
,	O
sizeof	O
(	O
u_int32_t	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
u_int32_t	int
)	O
;	O
}	O
else	O
{	O
memcpy	function
(	O
bp	pointer
,	O
&	O
key	struct
->	O
size	int
,	O
sizeof	O
(	O
key	struct
->	O
size	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
key	struct
->	O
size	int
)	O
;	O
memcpy	function
(	O
bp	pointer
,	O
key	struct
->	O
data	pointer
,	O
key	struct
->	O
size	int
)	O
;	O
bp	pointer
+=	O
key	struct
->	O
size	int
;	O
}	O
if	O
(	O
data	pointer
==	O
NULL	O
)	O
{	O
zero	int
=	O
0	int
;	O
memcpy	function
(	O
bp	pointer
,	O
&	O
zero	int
,	O
sizeof	O
(	O
u_int32_t	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
u_int32_t	int
)	O
;	O
}	O
else	O
{	O
memcpy	function
(	O
bp	pointer
,	O
&	O
data	pointer
->	O
size	int
,	O
sizeof	O
(	O
data	pointer
->	O
size	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
data	pointer
->	O
size	int
)	O
;	O
memcpy	function
(	O
bp	pointer
,	O
data	pointer
->	O
data	pointer
,	O
data	pointer
->	O
size	int
)	O
;	O
bp	pointer
+=	O
data	pointer
->	O
size	int
;	O
}	O
memcpy	function
(	O
bp	pointer
,	O
&	O
arg_flags	int
,	O
sizeof	O
(	O
arg_flags	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
arg_flags	int
)	O
;	O
DB_ASSERT	O
(	O
(	O
u_int32_t	int
)	O
(	O
bp	pointer
-	O
(	O
u_int8_t	char
*	O
)	O
logrec	struct
.	O
data	pointer
)	O
==	O
logrec	struct
.	O
size	int
)	O
;	O
ret	int
=	O
CDB_log_put	function
(	O
dbenv	pointer
,	O
ret_lsnp	pointer
,	O
(	O
DBT	struct
*	O
)	O
&	O
logrec	struct
,	O
flags	int
)	O
;	O
if	O
(	O
txnid	int
!=	O
NULL	O
)	O
txnid	int
->	O
last_lsn	struct
=	O
*	O
ret_lsnp	pointer
;	O
CDB___os_free	function
(	O
logrec	struct
.	O
data	pointer
,	O
logrec	struct
.	O
size	int
)	O
;	O
return	O
(	O
ret	int
)	O
;	O
}	O
int	O
CDB___db_debug_print	function
(	O
dbenv	pointer
,	O
dbtp	pointer
,	O
lsnp	pointer
,	O
notused2	enum
,	O
notused3	pointer
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
DBT	struct
*	O
dbtp	pointer
;	O
DB_LSN	struct
*	O
lsnp	pointer
;	O
db_recops	enum
notused2	enum
;	O
void	O
*	O
notused3	pointer
;	O
{	O
if	O
(	O
notused2	enum
||	O
notused3	pointer
)	O
{	O
}	O
__db_debug_args	struct
*	O
argp	pointer
;	O
u_int32_t	int
i	int
;	O
u_int	int
ch	int
;	O
int	O
ret	int
;	O
i	int
=	O
0	int
;	O
ch	int
=	O
0	int
;	O
notused2	enum
=	O
0	int
;	O
notused3	pointer
=	O
NULL	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___db_debug_read	function
(	O
dbenv	pointer
,	O
dbtp	pointer
->	O
data	pointer
,	O
&	O
argp	pointer
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
printf	function
(	O
"[%lu][%lu]db_debug: rec: %lu txnid %lx prevlsn [%lu][%lu]\n"	pointer
,	O
(	O
u_long	long
)	O
lsnp	pointer
->	O
file	int
,	O
(	O
u_long	long
)	O
lsnp	pointer
->	O
offset	int
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
type	enum
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
txnid	int
->	O
txnid	int
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
prev_lsn	struct
.	O
file	int
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
prev_lsn	struct
.	O
offset	int
)	O
;	O
printf	function
(	O
"\top: "	pointer
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
argp	pointer
->	O
op	enum
.	O
size	int
;	O
i	int
++	O
)	O
{	O
ch	int
=	O
(	O
(	O
u_int8_t	char
*	O
)	O
argp	pointer
->	O
op	enum
.	O
data	pointer
)	O
[	O
i	int
]	O
;	O
if	O
(	O
isprint	function
(	O
ch	int
)	O
||	O
ch	int
==	O
0xa	int
)	O
putchar	function
(	O
ch	int
)	O
;	O
else	O
printf	function
(	O
"%#x "	pointer
,	O
ch	int
)	O
;	O
}	O
printf	function
(	O
"\n"	pointer
)	O
;	O
printf	function
(	O
"\tfileid: %ld\n"	pointer
,	O
(	O
long	O
)	O
argp	pointer
->	O
fileid	array
)	O
;	O
printf	function
(	O
"\tkey: "	pointer
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
argp	pointer
->	O
key	struct
.	O
size	int
;	O
i	int
++	O
)	O
{	O
ch	int
=	O
(	O
(	O
u_int8_t	char
*	O
)	O
argp	pointer
->	O
key	struct
.	O
data	pointer
)	O
[	O
i	int
]	O
;	O
if	O
(	O
isprint	function
(	O
ch	int
)	O
||	O
ch	int
==	O
0xa	int
)	O
putchar	function
(	O
ch	int
)	O
;	O
else	O
printf	function
(	O
"%#x "	pointer
,	O
ch	int
)	O
;	O
}	O
printf	function
(	O
"\n"	pointer
)	O
;	O
printf	function
(	O
"\tdata: "	pointer
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
argp	pointer
->	O
data	pointer
.	O
size	int
;	O
i	int
++	O
)	O
{	O
ch	int
=	O
(	O
(	O
u_int8_t	char
*	O
)	O
argp	pointer
->	O
data	pointer
.	O
data	pointer
)	O
[	O
i	int
]	O
;	O
if	O
(	O
isprint	function
(	O
ch	int
)	O
||	O
ch	int
==	O
0xa	int
)	O
putchar	function
(	O
ch	int
)	O
;	O
else	O
printf	function
(	O
"%#x "	pointer
,	O
ch	int
)	O
;	O
}	O
printf	function
(	O
"\n"	pointer
)	O
;	O
printf	function
(	O
"\targ_flags: %lu\n"	pointer
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
arg_flags	int
)	O
;	O
printf	function
(	O
"\n"	pointer
)	O
;	O
CDB___os_free	function
(	O
argp	pointer
,	O
0	int
)	O
;	O
return	O
(	O
0	int
)	O
;	O
}	O
int	O
CDB___db_debug_read	function
(	O
dbenv	pointer
,	O
recbuf	pointer
,	O
argpp	pointer
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
void	O
*	O
recbuf	pointer
;	O
__db_debug_args	struct
*	O
*	O
argpp	pointer
;	O
{	O
__db_debug_args	struct
*	O
argp	pointer
;	O
u_int8_t	char
*	O
bp	pointer
;	O
int	O
ret	int
;	O
ret	int
=	O
CDB___os_malloc	function
(	O
dbenv	pointer
,	O
sizeof	O
(	O
__db_debug_args	struct
)	O
+	O
sizeof	O
(	O
DB_TXN	struct
)	O
,	O
NULL	O
,	O
&	O
argp	pointer
)	O
;	O
if	O
(	O
ret	int
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
argp	pointer
->	O
txnid	int
=	O
(	O
DB_TXN	struct
*	O
)	O
&	O
argp	pointer
[	O
1	int
]	O
;	O
bp	pointer
=	O
recbuf	pointer
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
type	enum
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
type	enum
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
type	enum
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
txnid	int
->	O
txnid	int
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
txnid	int
->	O
txnid	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
txnid	int
->	O
txnid	int
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
prev_lsn	struct
,	O
bp	pointer
,	O
sizeof	O
(	O
DB_LSN	struct
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
DB_LSN	struct
)	O
;	O
memset	function
(	O
&	O
argp	pointer
->	O
op	enum
,	O
0	int
,	O
sizeof	O
(	O
argp	pointer
->	O
op	enum
)	O
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
op	enum
.	O
size	int
,	O
bp	pointer
,	O
sizeof	O
(	O
u_int32_t	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
u_int32_t	int
)	O
;	O
argp	pointer
->	O
op	enum
.	O
data	pointer
=	O
bp	pointer
;	O
bp	pointer
+=	O
argp	pointer
->	O
op	enum
.	O
size	int
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
fileid	array
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
fileid	array
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
fileid	array
)	O
;	O
memset	function
(	O
&	O
argp	pointer
->	O
key	struct
,	O
0	int
,	O
sizeof	O
(	O
argp	pointer
->	O
key	struct
)	O
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
key	struct
.	O
size	int
,	O
bp	pointer
,	O
sizeof	O
(	O
u_int32_t	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
u_int32_t	int
)	O
;	O
argp	pointer
->	O
key	struct
.	O
data	pointer
=	O
bp	pointer
;	O
bp	pointer
+=	O
argp	pointer
->	O
key	struct
.	O
size	int
;	O
memset	function
(	O
&	O
argp	pointer
->	O
data	pointer
,	O
0	int
,	O
sizeof	O
(	O
argp	pointer
->	O
data	pointer
)	O
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
data	pointer
.	O
size	int
,	O
bp	pointer
,	O
sizeof	O
(	O
u_int32_t	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
u_int32_t	int
)	O
;	O
argp	pointer
->	O
data	pointer
.	O
data	pointer
=	O
bp	pointer
;	O
bp	pointer
+=	O
argp	pointer
->	O
data	pointer
.	O
size	int
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
arg_flags	int
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
arg_flags	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
arg_flags	int
)	O
;	O
*	O
argpp	pointer
=	O
argp	pointer
;	O
return	O
(	O
0	int
)	O
;	O
}	O
int	O
CDB___db_noop_log	function
(	O
dbenv	pointer
,	O
txnid	int
,	O
ret_lsnp	pointer
,	O
flags	int
,	O
fileid	array
,	O
pgno	int
,	O
prevlsn	struct
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
DB_TXN	struct
*	O
txnid	int
;	O
DB_LSN	struct
*	O
ret_lsnp	pointer
;	O
u_int32_t	int
flags	int
;	O
int32_t	int
fileid	array
;	O
db_pgno_t	int
pgno	int
;	O
DB_LSN	struct
*	O
prevlsn	struct
;	O
{	O
DBT	struct
logrec	struct
;	O
DB_LSN	struct
*	O
lsnp	pointer
,	O
null_lsn	struct
;	O
u_int32_t	int
rectype	int
,	O
txn_num	int
;	O
int	O
ret	int
;	O
u_int8_t	char
*	O
bp	pointer
;	O
if	O
(	O
txnid	int
!=	O
NULL	O
&&	O
TAILQ_FIRST	O
(	O
&	O
txnid	int
->	O
kids	struct
)	O
!=	O
NULL	O
&&	O
CDB___txn_activekids	function
(	O
txnid	int
)	O
!=	O
0	int
)	O
return	O
(	O
CDB___db_child_active_err	function
(	O
dbenv	pointer
)	O
)	O
;	O
rectype	int
=	O
DB_db_noop	int
;	O
txn_num	int
=	O
txnid	int
==	O
NULL	O
?	O
0	int
:	O
txnid	int
->	O
txnid	int
;	O
if	O
(	O
txnid	int
==	O
NULL	O
)	O
{	O
ZERO_LSN	O
(	O
null_lsn	struct
)	O
;	O
lsnp	pointer
=	O
&	O
null_lsn	struct
;	O
}	O
else	O
lsnp	pointer
=	O
&	O
txnid	int
->	O
last_lsn	struct
;	O
logrec	struct
.	O
size	int
=	O
sizeof	O
(	O
rectype	int
)	O
+	O
sizeof	O
(	O
txn_num	int
)	O
+	O
sizeof	O
(	O
DB_LSN	struct
)	O
+	O
sizeof	O
(	O
fileid	array
)	O
+	O
sizeof	O
(	O
pgno	int
)	O
+	O
sizeof	O
(	O
*	O
prevlsn	struct
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___os_malloc	function
(	O
dbenv	pointer
,	O
logrec	struct
.	O
size	int
,	O
NULL	O
,	O
&	O
logrec	struct
.	O
data	pointer
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
bp	pointer
=	O
logrec	struct
.	O
data	pointer
;	O
memcpy	function
(	O
bp	pointer
,	O
&	O
rectype	int
,	O
sizeof	O
(	O
rectype	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
rectype	int
)	O
;	O
memcpy	function
(	O
bp	pointer
,	O
&	O
txn_num	int
,	O
sizeof	O
(	O
txn_num	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
txn_num	int
)	O
;	O
memcpy	function
(	O
bp	pointer
,	O
lsnp	pointer
,	O
sizeof	O
(	O
DB_LSN	struct
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
DB_LSN	struct
)	O
;	O
memcpy	function
(	O
bp	pointer
,	O
&	O
fileid	array
,	O
sizeof	O
(	O
fileid	array
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
fileid	array
)	O
;	O
memcpy	function
(	O
bp	pointer
,	O
&	O
pgno	int
,	O
sizeof	O
(	O
pgno	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
pgno	int
)	O
;	O
if	O
(	O
prevlsn	struct
!=	O
NULL	O
)	O
memcpy	function
(	O
bp	pointer
,	O
prevlsn	struct
,	O
sizeof	O
(	O
*	O
prevlsn	struct
)	O
)	O
;	O
else	O
memset	function
(	O
bp	pointer
,	O
0	int
,	O
sizeof	O
(	O
*	O
prevlsn	struct
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
*	O
prevlsn	struct
)	O
;	O
DB_ASSERT	O
(	O
(	O
u_int32_t	int
)	O
(	O
bp	pointer
-	O
(	O
u_int8_t	char
*	O
)	O
logrec	struct
.	O
data	pointer
)	O
==	O
logrec	struct
.	O
size	int
)	O
;	O
ret	int
=	O
CDB_log_put	function
(	O
dbenv	pointer
,	O
ret_lsnp	pointer
,	O
(	O
DBT	struct
*	O
)	O
&	O
logrec	struct
,	O
flags	int
)	O
;	O
if	O
(	O
txnid	int
!=	O
NULL	O
)	O
txnid	int
->	O
last_lsn	struct
=	O
*	O
ret_lsnp	pointer
;	O
CDB___os_free	function
(	O
logrec	struct
.	O
data	pointer
,	O
logrec	struct
.	O
size	int
)	O
;	O
return	O
(	O
ret	int
)	O
;	O
}	O
int	O
CDB___db_noop_print	function
(	O
dbenv	pointer
,	O
dbtp	pointer
,	O
lsnp	pointer
,	O
notused2	enum
,	O
notused3	pointer
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
DBT	struct
*	O
dbtp	pointer
;	O
DB_LSN	struct
*	O
lsnp	pointer
;	O
db_recops	enum
notused2	enum
;	O
void	O
*	O
notused3	pointer
;	O
{	O
if	O
(	O
notused2	enum
||	O
notused3	pointer
)	O
{	O
}	O
__db_noop_args	struct
*	O
argp	pointer
;	O
int	O
ret	int
;	O
notused2	enum
=	O
0	int
;	O
notused3	pointer
=	O
NULL	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___db_noop_read	function
(	O
dbenv	pointer
,	O
dbtp	pointer
->	O
data	pointer
,	O
&	O
argp	pointer
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
printf	function
(	O
"[%lu][%lu]db_noop: rec: %lu txnid %lx prevlsn [%lu][%lu]\n"	pointer
,	O
(	O
u_long	long
)	O
lsnp	pointer
->	O
file	int
,	O
(	O
u_long	long
)	O
lsnp	pointer
->	O
offset	int
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
type	enum
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
txnid	int
->	O
txnid	int
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
prev_lsn	struct
.	O
file	int
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
prev_lsn	struct
.	O
offset	int
)	O
;	O
printf	function
(	O
"\tfileid: %ld\n"	pointer
,	O
(	O
long	O
)	O
argp	pointer
->	O
fileid	array
)	O
;	O
printf	function
(	O
"\tpgno: %lu\n"	pointer
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
pgno	int
)	O
;	O
printf	function
(	O
"\tprevlsn: [%lu][%lu]\n"	pointer
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
prevlsn	struct
.	O
file	int
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
prevlsn	struct
.	O
offset	int
)	O
;	O
printf	function
(	O
"\n"	pointer
)	O
;	O
CDB___os_free	function
(	O
argp	pointer
,	O
0	int
)	O
;	O
return	O
(	O
0	int
)	O
;	O
}	O
int	O
CDB___db_noop_read	function
(	O
dbenv	pointer
,	O
recbuf	pointer
,	O
argpp	pointer
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
void	O
*	O
recbuf	pointer
;	O
__db_noop_args	struct
*	O
*	O
argpp	pointer
;	O
{	O
__db_noop_args	struct
*	O
argp	pointer
;	O
u_int8_t	char
*	O
bp	pointer
;	O
int	O
ret	int
;	O
ret	int
=	O
CDB___os_malloc	function
(	O
dbenv	pointer
,	O
sizeof	O
(	O
__db_noop_args	struct
)	O
+	O
sizeof	O
(	O
DB_TXN	struct
)	O
,	O
NULL	O
,	O
&	O
argp	pointer
)	O
;	O
if	O
(	O
ret	int
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
argp	pointer
->	O
txnid	int
=	O
(	O
DB_TXN	struct
*	O
)	O
&	O
argp	pointer
[	O
1	int
]	O
;	O
bp	pointer
=	O
recbuf	pointer
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
type	enum
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
type	enum
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
type	enum
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
txnid	int
->	O
txnid	int
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
txnid	int
->	O
txnid	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
txnid	int
->	O
txnid	int
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
prev_lsn	struct
,	O
bp	pointer
,	O
sizeof	O
(	O
DB_LSN	struct
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
DB_LSN	struct
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
fileid	array
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
fileid	array
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
fileid	array
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
pgno	int
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
pgno	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
pgno	int
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
prevlsn	struct
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
prevlsn	struct
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
prevlsn	struct
)	O
;	O
*	O
argpp	pointer
=	O
argp	pointer
;	O
return	O
(	O
0	int
)	O
;	O
}	O
int	O
CDB___db_init_print	function
(	O
dbenv	pointer
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
{	O
int	O
ret	int
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___db_add_recovery	function
(	O
dbenv	pointer
,	O
CDB___db_addrem_print	function
,	O
DB_db_addrem	int
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___db_add_recovery	function
(	O
dbenv	pointer
,	O
CDB___db_split_print	function
,	O
DB_db_split	int
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___db_add_recovery	function
(	O
dbenv	pointer
,	O
CDB___db_big_print	function
,	O
DB_db_big	int
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___db_add_recovery	function
(	O
dbenv	pointer
,	O
CDB___db_ovref_print	function
,	O
DB_db_ovref	int
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___db_add_recovery	function
(	O
dbenv	pointer
,	O
CDB___db_relink_print	function
,	O
DB_db_relink	int
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___db_add_recovery	function
(	O
dbenv	pointer
,	O
CDB___db_addpage_print	function
,	O
DB_db_addpage	int
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___db_add_recovery	function
(	O
dbenv	pointer
,	O
CDB___db_debug_print	function
,	O
DB_db_debug	int
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___db_add_recovery	function
(	O
dbenv	pointer
,	O
CDB___db_noop_print	function
,	O
DB_db_noop	int
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
return	O
(	O
0	int
)	O
;	O
}	O
int	O
CDB___db_init_recover	function
(	O
dbenv	pointer
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
{	O
int	O
ret	int
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___db_add_recovery	function
(	O
dbenv	pointer
,	O
CDB___db_addrem_recover	function
,	O
DB_db_addrem	int
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___db_add_recovery	function
(	O
dbenv	pointer
,	O
CDB___deprecated_recover	function
,	O
DB_db_split	int
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___db_add_recovery	function
(	O
dbenv	pointer
,	O
CDB___db_big_recover	function
,	O
DB_db_big	int
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___db_add_recovery	function
(	O
dbenv	pointer
,	O
CDB___db_ovref_recover	function
,	O
DB_db_ovref	int
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___db_add_recovery	function
(	O
dbenv	pointer
,	O
CDB___db_relink_recover	function
,	O
DB_db_relink	int
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___db_add_recovery	function
(	O
dbenv	pointer
,	O
CDB___deprecated_recover	function
,	O
DB_db_addpage	int
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___db_add_recovery	function
(	O
dbenv	pointer
,	O
CDB___db_debug_recover	function
,	O
DB_db_debug	int
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___db_add_recovery	function
(	O
dbenv	pointer
,	O
CDB___db_noop_recover	function
,	O
DB_db_noop	int
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
return	O
(	O
0	int
)	O
;	O
}	O
