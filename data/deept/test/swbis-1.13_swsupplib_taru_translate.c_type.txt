int	O
taru_format_translate	function
(	O
int	O
ifd	int
,	O
int	O
ofd	int
,	O
enum	O
archive_format	bool
output_format	enum
)	O
{	O
int	O
parent	pointer
;	O
int	O
fpipe	array
[	O
2	int
]	O
;	O
int	O
status	int
=	O
0	int
,	O
ret	int
=	O
0	int
;	O
DEFER	struct
*	O
defer	pointer
=	O
NULL	O
;	O
TARU	struct
*	O
taru	pointer
=	O
taru_create	function
(	O
)	O
;	O
pipe	function
(	O
fpipe	pointer
)	O
;	O
parent	pointer
=	O
swfork	function
(	O
(	O
sigset_t	struct
*	O
)	O
(	O
NULL	O
)	O
)	O
;	O
if	O
(	O
parent	pointer
==	O
0	int
)	O
{	O
close	pointer
(	O
fpipe	array
[	O
0	int
]	O
)	O
;	O
_exit	function
(	O
taru_process_copy_in	function
(	O
NULL	O
,	O
ifd	int
,	O
fpipe	array
[	O
1	int
]	O
)	O
)	O
;	O
}	O
else	O
if	O
(	O
parent	pointer
>	O
0	int
)	O
{	O
close	pointer
(	O
fpipe	array
[	O
1	int
]	O
)	O
;	O
ret	int
=	O
taru_process_copy_out	function
(	O
taru	pointer
,	O
fpipe	array
[	O
0	int
]	O
,	O
ofd	int
,	O
defer	pointer
,	O
NULL	O
,	O
output_format	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
(	O
intmax_t	struct
*	O
)	O
NULL	O
,	O
NULL	O
)	O
;	O
while	O
(	O
!	O
waitpid	function
(	O
(	O
pid_t	int
)	O
parent	pointer
,	O
&	O
status	int
,	O
WNOHANG	int
)	O
)	O
{	O
;	O
}	O
if	O
(	O
!	O
status	int
&&	O
!	O
ret	int
)	O
return	O
0	int
;	O
}	O
else	O
{	O
return	O
-	O
3	int
;	O
}	O
return	O
-	O
1	int
;	O
}	O