struct	O
break_in_data	struct
{	O
int	O
str	int
;	O
int	O
move	pointer
;	O
}	O
;	O
static	O
struct	O
break_in_data	struct
break_in_list	array
[	O
MAX_BREAK_INS	int
]	O
;	O
static	O
int	O
num_break_ins	int
;	O
static	O
void	O
enlarge_goal	function
(	O
signed	O
char	O
goal	pointer
[	O
BOARDMAX	O
]	O
)	O
{	O
int	O
pos	int
;	O
for	O
(	O
pos	int
=	O
BOARDMIN	O
;	O
pos	int
<	O
BOARDMAX	O
;	O
pos	int
++	O
)	O
{	O
if	O
(	O
board	pointer
[	O
pos	int
]	O
==	O
EMPTY	int
&&	O
!	O
goal	pointer
[	O
pos	int
]	O
)	O
{	O
int	O
k	int
;	O
int	O
goal_neighbors	int
=	O
0	int
;	O
for	O
(	O
k	int
=	O
0	int
;	O
k	int
<	O
4	int
;	O
k	int
++	O
)	O
if	O
(	O
board	pointer
[	O
pos	int
+	O
delta	array
[	O
k	int
]	O
]	O
==	O
EMPTY	int
&&	O
goal	pointer
[	O
pos	int
+	O
delta	array
[	O
k	int
]	O
]	O
==	O
1	int
)	O
goal_neighbors	int
++	O
;	O
if	O
(	O
goal_neighbors	int
>=	O
2	int
)	O
goal	pointer
[	O
pos	int
]	O
=	O
2	int
;	O
}	O
}	O
}	O
static	O
void	O
compute_smaller_goal	function
(	O
int	O
owner	array
,	O
int	O
color_to_move	int
,	O
const	O
struct	O
connection_data	struct
*	O
conn	pointer
,	O
const	O
signed	O
char	O
goal	pointer
[	O
BOARDMAX	O
]	O
,	O
signed	O
char	O
smaller_goal	array
[	O
BOARDMAX	O
]	O
)	O
{	O
int	O
k	int
,	O
j	int
;	O
int	O
own_stones_visited	array
[	O
BOARDMAX	O
]	O
;	O
memset	function
(	O
smaller_goal	array
,	O
0	int
,	O
BOARDMAX	O
)	O
;	O
for	O
(	O
k	int
=	O
0	int
;	O
k	int
<	O
conn	pointer
->	O
queue_end	int
;	O
k	int
++	O
)	O
{	O
int	O
pos	int
=	O
conn	pointer
->	O
queue	array
[	O
k	int
]	O
;	O
int	O
goal_neighbors	int
=	O
0	int
;	O
if	O
(	O
owner	array
==	O
color_to_move	int
)	O
{	O
int	O
coming_from	int
=	O
conn	pointer
->	O
coming_from	int
[	O
pos	int
]	O
;	O
if	O
(	O
coming_from	int
==	O
NO_MOVE	O
)	O
own_stones_visited	array
[	O
pos	int
]	O
=	O
0	int
;	O
else	O
{	O
own_stones_visited	array
[	O
pos	int
]	O
=	O
own_stones_visited	array
[	O
coming_from	int
]	O
;	O
if	O
(	O
!	O
goal	pointer
[	O
pos	int
]	O
&&	O
board	pointer
[	O
pos	int
]	O
==	O
OTHER_COLOR	O
(	O
owner	array
)	O
)	O
{	O
int	O
i	int
;	O
int	O
stones	pointer
[	O
MAX_BOARD	int
*	O
MAX_BOARD	int
]	O
;	O
int	O
num_stones	int
=	O
findstones	function
(	O
pos	int
,	O
MAX_BOARD	int
*	O
MAX_BOARD	int
,	O
stones	pointer
)	O
;	O
int	O
smallest_distance	int
=	O
3	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
num_stones	int
;	O
i	int
++	O
)	O
{	O
int	O
distance	int
=	O
(	O
gg_abs	O
(	O
I	O
(	O
stones	pointer
[	O
i	int
]	O
)	O
-	O
I	O
(	O
coming_from	int
)	O
)	O
+	O
gg_abs	O
(	O
J	O
(	O
stones	pointer
[	O
i	int
]	O
)	O
-	O
J	O
(	O
coming_from	int
)	O
)	O
)	O
;	O
if	O
(	O
distance	int
<	O
smallest_distance	int
)	O
smallest_distance	int
=	O
distance	int
;	O
}	O
own_stones_visited	array
[	O
pos	int
]	O
+=	O
smallest_distance	int
;	O
}	O
if	O
(	O
own_stones_visited	array
[	O
pos	int
]	O
>	O
2	int
)	O
continue	O
;	O
}	O
}	O
if	O
(	O
!	O
goal	pointer
[	O
pos	int
]	O
)	O
continue	O
;	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<	O
4	int
;	O
j	int
++	O
)	O
if	O
(	O
ON_BOARD	O
(	O
pos	int
+	O
delta	array
[	O
j	int
]	O
)	O
&&	O
goal	pointer
[	O
pos	int
+	O
delta	array
[	O
j	int
]	O
]	O
&&	O
(	O
board	pointer
[	O
pos	int
]	O
==	O
EMPTY	int
||	O
goal	pointer
[	O
pos	int
]	O
==	O
OTHER_COLOR	O
(	O
owner	array
)	O
)	O
)	O
goal_neighbors	int
++	O
;	O
if	O
(	O
goal_neighbors	int
>=	O
2	int
)	O
smaller_goal	array
[	O
pos	int
]	O
=	O
1	int
;	O
}	O
if	O
(	O
owner	array
==	O
color_to_move	int
)	O
{	O
signed	O
char	O
marked	array
[	O
BOARDMAX	O
]	O
;	O
int	O
sizes	array
[	O
BOARDMAX	O
/	O
2	int
]	O
;	O
signed	O
char	O
mark	char
=	O
0	int
;	O
int	O
biggest_region	int
=	O
1	int
;	O
memset	function
(	O
marked	array
,	O
0	int
,	O
BOARDMAX	O
)	O
;	O
for	O
(	O
k	int
=	O
0	int
;	O
k	int
<	O
conn	pointer
->	O
queue_end	int
;	O
k	int
++	O
)	O
{	O
int	O
pos	int
=	O
conn	pointer
->	O
queue	array
[	O
k	int
]	O
;	O
if	O
(	O
ON_BOARD	O
(	O
pos	int
)	O
&&	O
smaller_goal	array
[	O
pos	int
]	O
&&	O
!	O
marked	array
[	O
pos	int
]	O
)	O
{	O
int	O
queue_start	int
=	O
0	int
;	O
int	O
queue_end	int
=	O
1	int
;	O
int	O
queue	array
[	O
BOARDMAX	O
]	O
;	O
mark	char
++	O
;	O
sizes	array
[	O
(	O
int	O
)	O
mark	char
]	O
=	O
1	int
;	O
marked	array
[	O
pos	int
]	O
=	O
mark	char
;	O
queue	array
[	O
0	int
]	O
=	O
pos	int
;	O
while	O
(	O
queue_start	int
<	O
queue_end	int
)	O
{	O
test_gray_border	function
(	O
)	O
;	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<	O
4	int
;	O
j	int
++	O
)	O
{	O
int	O
pos2	int
=	O
queue	array
[	O
queue_start	int
]	O
+	O
delta	array
[	O
j	int
]	O
;	O
if	O
(	O
!	O
ON_BOARD	O
(	O
pos2	int
)	O
)	O
continue	O
;	O
ASSERT1	O
(	O
marked	array
[	O
pos2	int
]	O
==	O
0	int
||	O
marked	array
[	O
pos2	int
]	O
==	O
mark	char
,	O
pos2	int
)	O
;	O
if	O
(	O
smaller_goal	array
[	O
pos2	int
]	O
&&	O
!	O
marked	array
[	O
pos2	int
]	O
)	O
{	O
sizes	array
[	O
(	O
int	O
)	O
mark	char
]	O
++	O
;	O
marked	array
[	O
pos2	int
]	O
=	O
mark	char
;	O
queue	array
[	O
queue_end	int
++	O
]	O
=	O
pos2	int
;	O
}	O
}	O
queue_start	int
++	O
;	O
}	O
}	O
}	O
for	O
(	O
k	int
=	O
1	int
;	O
k	int
<=	O
mark	char
;	O
k	int
++	O
)	O
{	O
if	O
(	O
sizes	array
[	O
k	int
]	O
>	O
sizes	array
[	O
biggest_region	int
]	O
)	O
biggest_region	int
=	O
k	int
;	O
}	O
memset	function
(	O
smaller_goal	array
,	O
0	int
,	O
BOARDMAX	O
)	O
;	O
for	O
(	O
k	int
=	O
0	int
;	O
k	int
<	O
conn	pointer
->	O
queue_end	int
;	O
k	int
++	O
)	O
{	O
int	O
pos	int
=	O
conn	pointer
->	O
queue	array
[	O
k	int
]	O
;	O
if	O
(	O
marked	array
[	O
pos	int
]	O
==	O
biggest_region	int
)	O
smaller_goal	array
[	O
pos	int
]	O
=	O
1	int
;	O
}	O
}	O
}	O
static	O
int	O
break_in_goal_from_str	function
(	O
int	O
str	int
,	O
signed	O
char	O
goal	pointer
[	O
BOARDMAX	O
]	O
,	O
int	O
*	O
num_non_territory	pointer
,	O
int	O
non_territory	array
[	O
BOARDMAX	O
]	O
,	O
int	O
color_to_move	int
,	O
int	O
info_pos	int
)	O
{	O
int	O
move	pointer
=	O
NO_MOVE	O
;	O
int	O
saved_move	int
=	O
NO_MOVE	O
;	O
signed	O
char	O
smaller_goal	array
[	O
BOARDMAX	O
]	O
;	O
struct	O
connection_data	struct
conn	pointer
;	O
if	O
(	O
color_to_move	int
==	O
board	pointer
[	O
str	int
]	O
)	O
compute_connection_distances	function
(	O
str	int
,	O
NO_MOVE	O
,	O
FP	O
(	O
3.01	int
)	O
,	O
&	O
conn	pointer
,	O
1	int
)	O
;	O
else	O
compute_connection_distances	function
(	O
str	int
,	O
NO_MOVE	O
,	O
FP	O
(	O
2.81	int
)	O
,	O
&	O
conn	pointer
,	O
1	int
)	O
;	O
sort_connection_queue_tail	function
(	O
&	O
conn	pointer
)	O
;	O
expand_connection_queue	function
(	O
&	O
conn	pointer
)	O
;	O
compute_smaller_goal	function
(	O
OTHER_COLOR	O
(	O
board	pointer
[	O
str	int
]	O
)	O
,	O
color_to_move	int
,	O
&	O
conn	pointer
,	O
goal	pointer
,	O
smaller_goal	array
)	O
;	O
if	O
(	O
0	int
&&	O
(	O
debug	int
&	O
DEBUG_BREAKIN	int
)	O
)	O
print_connection_distances	function
(	O
&	O
conn	pointer
)	O
;	O
DEBUG	O
(	O
DEBUG_BREAKIN	int
,	O
"Trying to break in from %1m to:\n"	pointer
,	O
str	int
)	O
;	O
if	O
(	O
debug	int
&	O
DEBUG_BREAKIN	int
)	O
goaldump	function
(	O
smaller_goal	array
)	O
;	O
while	O
(	O
(	O
color_to_move	int
==	O
board	pointer
[	O
str	int
]	O
&&	O
break_in	function
(	O
str	int
,	O
smaller_goal	array
,	O
&	O
move	pointer
)	O
)	O
||	O
(	O
color_to_move	int
==	O
OTHER_COLOR	O
(	O
board	pointer
[	O
str	int
]	O
)	O
&&	O
!	O
block_off	function
(	O
str	int
,	O
smaller_goal	array
,	O
NULL	O
)	O
)	O
)	O
{	O
int	O
k	int
;	O
int	O
save_num	int
=	O
*	O
num_non_territory	pointer
;	O
int	O
affected_size	int
=	O
0	int
;	O
int	O
cut_off_distance	int
=	O
FP	O
(	O
3.5	int
)	O
;	O
if	O
(	O
ON_BOARD	O
(	O
move	pointer
)	O
&&	O
goal	pointer
[	O
move	pointer
]	O
)	O
{	O
non_territory	array
[	O
(	O
*	O
num_non_territory	pointer
)	O
++	O
]	O
=	O
move	pointer
;	O
if	O
(	O
info_pos	int
)	O
DEBUG	O
(	O
DEBUG_TERRITORY	int
|	O
DEBUG_BREAKIN	int
,	O
"%1m: Erasing territory at %1m -a.\n"	pointer
,	O
info_pos	int
,	O
move	pointer
)	O
;	O
else	O
DEBUG	O
(	O
DEBUG_TERRITORY	int
|	O
DEBUG_BREAKIN	int
,	O
"Erasing territory at %1m -a.\n"	pointer
,	O
move	pointer
)	O
;	O
}	O
for	O
(	O
k	int
=	O
0	int
;	O
k	int
<	O
conn	pointer
.	O
queue_end	int
;	O
k	int
++	O
)	O
{	O
int	O
pos	int
=	O
conn	pointer
.	O
queue	array
[	O
k	int
]	O
;	O
if	O
(	O
conn	pointer
.	O
distances	array
[	O
pos	int
]	O
>	O
cut_off_distance	int
+	O
FP	O
(	O
0.31	int
)	O
)	O
break	O
;	O
if	O
(	O
goal	pointer
[	O
pos	int
]	O
&&	O
(	O
!	O
ON_BOARD	O
(	O
conn	pointer
.	O
coming_from	int
[	O
pos	int
]	O
)	O
||	O
!	O
goal	pointer
[	O
conn	pointer
.	O
coming_from	int
[	O
pos	int
]	O
]	O
)	O
)	O
{	O
non_territory	array
[	O
(	O
*	O
num_non_territory	pointer
)	O
++	O
]	O
=	O
pos	int
;	O
if	O
(	O
info_pos	int
)	O
DEBUG	O
(	O
DEBUG_TERRITORY	int
|	O
DEBUG_BREAKIN	int
,	O
"%1m: Erasing territory at %1m -b.\n"	pointer
,	O
info_pos	int
,	O
pos	int
)	O
;	O
else	O
DEBUG	O
(	O
DEBUG_TERRITORY	int
|	O
DEBUG_BREAKIN	int
,	O
"Erasing territory at %1m -b.\n"	pointer
,	O
pos	int
)	O
;	O
if	O
(	O
conn	pointer
.	O
distances	array
[	O
pos	int
]	O
<	O
cut_off_distance	int
)	O
cut_off_distance	int
=	O
conn	pointer
.	O
distances	array
[	O
pos	int
]	O
;	O
}	O
if	O
(	O
*	O
num_non_territory	pointer
>=	O
save_num	int
+	O
4	int
)	O
break	O
;	O
}	O
if	O
(	O
*	O
num_non_territory	pointer
==	O
save_num	int
)	O
break	O
;	O
for	O
(	O
k	int
=	O
save_num	int
;	O
k	int
<	O
*	O
num_non_territory	pointer
;	O
k	int
++	O
)	O
{	O
int	O
j	int
;	O
int	O
pos	int
=	O
non_territory	array
[	O
k	int
]	O
;	O
if	O
(	O
goal	pointer
[	O
pos	int
]	O
)	O
{	O
affected_size	int
++	O
;	O
goal	pointer
[	O
pos	int
]	O
=	O
0	int
;	O
}	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<	O
4	int
;	O
j	int
++	O
)	O
if	O
(	O
ON_BOARD	O
(	O
pos	int
+	O
delta	array
[	O
j	int
]	O
)	O
&&	O
goal	pointer
[	O
pos	int
+	O
delta	array
[	O
j	int
]	O
]	O
)	O
affected_size	int
++	O
;	O
if	O
(	O
affected_size	int
>=	O
5	int
)	O
{	O
*	O
num_non_territory	pointer
=	O
k	int
;	O
break	O
;	O
}	O
}	O
compute_smaller_goal	function
(	O
OTHER_COLOR	O
(	O
board	pointer
[	O
str	int
]	O
)	O
,	O
color_to_move	int
,	O
&	O
conn	pointer
,	O
goal	pointer
,	O
smaller_goal	array
)	O
;	O
DEBUG	O
(	O
DEBUG_BREAKIN	int
,	O
"Now trying to break to smaller goal:\n"	pointer
,	O
str	int
)	O
;	O
if	O
(	O
debug	int
&	O
DEBUG_BREAKIN	int
)	O
goaldump	function
(	O
smaller_goal	array
)	O
;	O
if	O
(	O
saved_move	int
==	O
NO_MOVE	O
)	O
saved_move	int
=	O
move	pointer
;	O
}	O
return	O
saved_move	int
;	O
}	O
static	O
void	O
break_in_goal	function
(	O
int	O
color_to_move	int
,	O
int	O
owner	array
,	O
signed	O
char	O
goal	pointer
[	O
BOARDMAX	O
]	O
,	O
struct	O
influence_data	O
*	O
q	pointer
,	O
int	O
store	int
,	O
int	O
info_pos	int
)	O
{	O
struct	O
connection_data	struct
conn	pointer
;	O
int	O
k	int
;	O
int	O
intruder	int
=	O
OTHER_COLOR	O
(	O
owner	array
)	O
;	O
signed	O
char	O
used	array
[	O
BOARDMAX	O
]	O
;	O
int	O
non_territory	array
[	O
BOARDMAX	O
]	O
;	O
int	O
num_non_territory	pointer
=	O
0	int
;	O
int	O
candidate_strings	array
[	O
MAX_TRIES	int
]	O
;	O
int	O
candidates	int
=	O
0	int
;	O
int	O
min_distance	int
=	O
FP	O
(	O
5.0	int
)	O
;	O
DEBUG	O
(	O
DEBUG_BREAKIN	int
,	O
"Trying to break (%C to move) %C's territory "	pointer
,	O
color_to_move	int
,	O
owner	array
)	O
;	O
if	O
(	O
debug	int
&	O
DEBUG_BREAKIN	int
)	O
goaldump	function
(	O
goal	pointer
)	O
;	O
init_connection_data	function
(	O
intruder	int
,	O
goal	pointer
,	O
NO_MOVE	O
,	O
FP	O
(	O
3.01	int
)	O
,	O
&	O
conn	pointer
,	O
1	int
)	O
;	O
k	int
=	O
conn	pointer
.	O
queue_end	int
;	O
spread_connection_distances	function
(	O
intruder	int
,	O
&	O
conn	pointer
)	O
;	O
sort_connection_queue_tail	function
(	O
&	O
conn	pointer
)	O
;	O
if	O
(	O
0	int
&&	O
(	O
debug	int
&	O
DEBUG_BREAKIN	int
)	O
)	O
print_connection_distances	function
(	O
&	O
conn	pointer
)	O
;	O
memset	function
(	O
used	array
,	O
0	int
,	O
BOARDMAX	O
)	O
;	O
for	O
(	O
;	O
k	int
<	O
conn	pointer
.	O
queue_end	int
;	O
k	int
++	O
)	O
{	O
int	O
pos	int
=	O
conn	pointer
.	O
queue	array
[	O
k	int
]	O
;	O
if	O
(	O
conn	pointer
.	O
distances	array
[	O
pos	int
]	O
>	O
min_distance	int
+	O
FP	O
(	O
1.001	int
)	O
)	O
break	O
;	O
if	O
(	O
board	pointer
[	O
pos	int
]	O
==	O
intruder	int
&&	O
influence_considered_lively	function
(	O
q	pointer
,	O
pos	int
)	O
)	O
{	O
int	O
pos2	int
=	O
pos	int
;	O
while	O
(	O
ON_BOARD	O
(	O
pos2	int
)	O
)	O
{	O
pos2	int
=	O
conn	pointer
.	O
coming_from	int
[	O
pos2	int
]	O
;	O
if	O
(	O
IS_STONE	O
(	O
board	pointer
[	O
pos2	int
]	O
)	O
)	O
pos2	int
=	O
find_origin	function
(	O
pos2	int
)	O
;	O
if	O
(	O
used	array
[	O
pos2	int
]	O
)	O
break	O
;	O
}	O
used	array
[	O
pos	int
]	O
=	O
1	int
;	O
if	O
(	O
ON_BOARD	O
(	O
pos2	int
)	O
)	O
continue	O
;	O
if	O
(	O
candidates	int
==	O
0	int
)	O
min_distance	int
=	O
conn	pointer
.	O
distances	array
[	O
pos	int
]	O
;	O
candidate_strings	array
[	O
candidates	int
++	O
]	O
=	O
pos	int
;	O
if	O
(	O
candidates	int
==	O
MAX_TRIES	int
)	O
break	O
;	O
}	O
}	O
memset	function
(	O
non_territory	array
,	O
0	int
,	O
BOARDMAX	O
)	O
;	O
for	O
(	O
k	int
=	O
0	int
;	O
k	int
<	O
candidates	int
;	O
k	int
++	O
)	O
{	O
int	O
move	pointer
=	O
break_in_goal_from_str	function
(	O
candidate_strings	array
[	O
k	int
]	O
,	O
goal	pointer
,	O
&	O
num_non_territory	pointer
,	O
non_territory	array
,	O
color_to_move	int
,	O
info_pos	int
)	O
;	O
if	O
(	O
store	int
&&	O
ON_BOARD	O
(	O
move	pointer
)	O
&&	O
num_break_ins	int
<	O
MAX_BREAK_INS	int
)	O
{	O
break_in_list	array
[	O
num_break_ins	int
]	O
.	O
str	int
=	O
candidate_strings	array
[	O
k	int
]	O
;	O
break_in_list	array
[	O
num_break_ins	int
]	O
.	O
move	pointer
=	O
move	pointer
;	O
num_break_ins	int
++	O
;	O
}	O
}	O
for	O
(	O
k	int
=	O
0	int
;	O
k	int
<	O
num_non_territory	pointer
;	O
k	int
++	O
)	O
influence_erase_territory	function
(	O
q	pointer
,	O
non_territory	array
[	O
k	int
]	O
,	O
owner	array
)	O
;	O
if	O
(	O
0	int
&&	O
num_non_territory	pointer
>	O
0	int
&&	O
(	O
debug	int
&	O
DEBUG_BREAKIN	int
)	O
)	O
showboard	function
(	O
0	int
)	O
;	O
}	O
void	O
break_territories	function
(	O
int	O
color_to_move	int
,	O
struct	O
influence_data	O
*	O
q	pointer
,	O
int	O
store	int
,	O
int	O
info_pos	int
)	O
{	O
struct	O
moyo_data	struct
territories	struct
;	O
int	O
k	int
;	O
if	O
(	O
!	O
experimental_break_in	int
||	O
get_level	function
(	O
)	O
<	O
10	int
)	O
return	O
;	O
influence_get_territory_segmentation	function
(	O
q	pointer
,	O
&	O
territories	struct
)	O
;	O
for	O
(	O
k	int
=	O
1	int
;	O
k	int
<=	O
territories	struct
.	O
number	int
;	O
k	int
++	O
)	O
{	O
signed	O
char	O
goal	pointer
[	O
BOARDMAX	O
]	O
;	O
int	O
pos	int
;	O
int	O
size	int
=	O
0	int
;	O
memset	function
(	O
goal	pointer
,	O
0	int
,	O
BOARDMAX	O
)	O
;	O
for	O
(	O
pos	int
=	O
BOARDMIN	O
;	O
pos	int
<	O
BOARDMAX	O
;	O
pos	int
++	O
)	O
if	O
(	O
ON_BOARD	O
(	O
pos	int
)	O
&&	O
territories	struct
.	O
segmentation	array
[	O
pos	int
]	O
==	O
k	int
)	O
{	O
goal	pointer
[	O
pos	int
]	O
=	O
1	int
;	O
if	O
(	O
board	pointer
[	O
pos	int
]	O
!=	O
territories	struct
.	O
owner	array
[	O
k	int
]	O
)	O
size	int
++	O
;	O
}	O
if	O
(	O
size	int
<	O
10	int
)	O
continue	O
;	O
if	O
(	O
color_to_move	int
==	O
OTHER_COLOR	O
(	O
territories	struct
.	O
owner	array
[	O
k	int
]	O
)	O
)	O
enlarge_goal	function
(	O
goal	pointer
)	O
;	O
break_in_goal	function
(	O
color_to_move	int
,	O
territories	struct
.	O
owner	array
[	O
k	int
]	O
,	O
goal	pointer
,	O
q	pointer
,	O
store	int
,	O
info_pos	int
)	O
;	O
}	O
}	O
void	O
clear_break_in_list	function
(	O
)	O
{	O
num_break_ins	int
=	O
0	int
;	O
}	O
void	O
break_in_move_reasons	function
(	O
int	O
color	int
)	O
{	O
int	O
k	int
;	O
for	O
(	O
k	int
=	O
0	int
;	O
k	int
<	O
num_break_ins	int
;	O
k	int
++	O
)	O
if	O
(	O
board	pointer
[	O
break_in_list	array
[	O
k	int
]	O
.	O
str	int
]	O
==	O
color	int
)	O
add_expand_territory_move	function
(	O
break_in_list	array
[	O
k	int
]	O
.	O
move	pointer
)	O
;	O
}	O
