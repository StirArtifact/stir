static	O
double	O
lopx_data	array
[	O
21	int
]	O
=	O
{	O
2.16647910664395270521272590407	int
,	O
-	O
0.28565398551049742084877469679	int
,	O
0.01517767255690553732382488171	int
,	O
-	O
0.00200215904941415466274422081	int
,	O
0.00019211375164056698287947962	int
,	O
-	O
0.00002553258886105542567601400	int
,	O
2.9004512660400621301999384544e-06	int
,	O
-	O
3.8873813517057343800270917900e-07	int
,	O
4.7743678729400456026672697926e-08	int
,	O
-	O
6.4501969776090319441714445454e-09	int
,	O
8.2751976628812389601561347296e-10	int
,	O
-	O
1.1260499376492049411710290413e-10	int
,	O
1.4844576692270934446023686322e-11	int
,	O
-	O
2.0328515972462118942821556033e-12	int
,	O
2.7291231220549214896095654769e-13	int
,	O
-	O
3.7581977830387938294437434651e-14	int
,	O
5.1107345870861673561462339876e-15	int
,	O
-	O
7.0722150011433276578323272272e-16	int
,	O
9.7089758328248469219003866867e-17	int
,	O
-	O
1.3492637457521938883731579510e-17	int
,	O
1.8657327910677296608121390705e-18	int
}	O
;	O
static	O
cheb_series	struct
lopx_cs	struct
=	O
{	O
lopx_data	array
,	O
20	int
,	O
-	O
1	int
,	O
1	int
,	O
10	int
}	O
;	O
static	O
double	O
lopxmx_data	array
[	O
20	int
]	O
=	O
{	O
-	O
1.12100231323744103373737274541	int
,	O
0.19553462773379386241549597019	int
,	O
-	O
0.01467470453808083971825344956	int
,	O
0.00166678250474365477643629067	int
,	O
-	O
0.00018543356147700369785746902	int
,	O
0.00002280154021771635036301071	int
,	O
-	O
2.8031253116633521699214134172e-06	int
,	O
3.5936568872522162983669541401e-07	int
,	O
-	O
4.6241857041062060284381167925e-08	int
,	O
6.0822637459403991012451054971e-09	int
,	O
-	O
8.0339824424815790302621320732e-10	int
,	O
1.0751718277499375044851551587e-10	int
,	O
-	O
1.4445310914224613448759230882e-11	int
,	O
1.9573912180610336168921438426e-12	int
,	O
-	O
2.6614436796793061741564104510e-13	int
,	O
3.6402634315269586532158344584e-14	int
,	O
-	O
4.9937495922755006545809120531e-15	int
,	O
6.8802890218846809524646902703e-16	int
,	O
-	O
9.5034129794804273611403251480e-17	int
,	O
1.3170135013050997157326965813e-17	int
}	O
;	O
static	O
cheb_series	struct
lopxmx_cs	struct
=	O
{	O
lopxmx_data	array
,	O
19	int
,	O
-	O
1	int
,	O
1	int
,	O
9	int
}	O
;	O
int	O
gsl_sf_log_e	function
(	O
const	O
double	O
x	double
,	O
gsl_sf_result	struct
*	O
result	pointer
)	O
{	O
if	O
(	O
x	double
<=	O
0.0	int
)	O
{	O
DOMAIN_ERROR	O
(	O
result	pointer
)	O
;	O
}	O
else	O
{	O
result	pointer
->	O
val	double
=	O
log	function
(	O
x	double
)	O
;	O
result	pointer
->	O
err	double
=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
result	pointer
->	O
val	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
int	O
gsl_sf_log_abs_e	function
(	O
const	O
double	O
x	double
,	O
gsl_sf_result	struct
*	O
result	pointer
)	O
{	O
if	O
(	O
x	double
==	O
0.0	int
)	O
{	O
DOMAIN_ERROR	O
(	O
result	pointer
)	O
;	O
}	O
else	O
{	O
result	pointer
->	O
val	double
=	O
log	function
(	O
fabs	function
(	O
x	double
)	O
)	O
;	O
result	pointer
->	O
err	double
=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
result	pointer
->	O
val	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
int	O
gsl_sf_complex_log_e	function
(	O
const	O
double	O
zr	double
,	O
const	O
double	O
zi	double
,	O
gsl_sf_result	struct
*	O
lnr	pointer
,	O
gsl_sf_result	struct
*	O
theta	pointer
)	O
{	O
if	O
(	O
zr	double
!=	O
0.0	int
||	O
zi	double
!=	O
0.0	int
)	O
{	O
const	O
double	O
ax	double
=	O
fabs	function
(	O
zr	double
)	O
;	O
const	O
double	O
ay	double
=	O
fabs	function
(	O
zi	double
)	O
;	O
const	O
double	O
min	double
=	O
GSL_MIN	O
(	O
ax	double
,	O
ay	double
)	O
;	O
const	O
double	O
max	double
=	O
GSL_MAX	O
(	O
ax	double
,	O
ay	double
)	O
;	O
lnr	pointer
->	O
val	double
=	O
log	function
(	O
max	double
)	O
+	O
0.5	int
*	O
log	function
(	O
1.0	int
+	O
(	O
min	double
/	O
max	double
)	O
*	O
(	O
min	double
/	O
max	double
)	O
)	O
;	O
lnr	pointer
->	O
err	double
=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
lnr	pointer
->	O
val	double
)	O
;	O
theta	pointer
->	O
val	double
=	O
atan2	function
(	O
zi	double
,	O
zr	double
)	O
;	O
theta	pointer
->	O
err	double
=	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
lnr	pointer
->	O
val	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
DOMAIN_ERROR_2	O
(	O
lnr	pointer
,	O
theta	pointer
)	O
;	O
}	O
}	O
int	O
gsl_sf_log_1plusx_e	function
(	O
const	O
double	O
x	double
,	O
gsl_sf_result	struct
*	O
result	pointer
)	O
{	O
if	O
(	O
x	double
<=	O
-	O
1.0	int
)	O
{	O
DOMAIN_ERROR	O
(	O
result	pointer
)	O
;	O
}	O
else	O
if	O
(	O
fabs	function
(	O
x	double
)	O
<	O
GSL_ROOT6_DBL_EPSILON	int
)	O
{	O
const	O
double	O
c1	double
=	O
-	O
0.5	int
;	O
const	O
double	O
c2	double
=	O
1.0	int
/	O
3.0	int
;	O
const	O
double	O
c3	double
=	O
-	O
1.0	int
/	O
4.0	int
;	O
const	O
double	O
c4	double
=	O
1.0	int
/	O
5.0	int
;	O
const	O
double	O
c5	double
=	O
-	O
1.0	int
/	O
6.0	int
;	O
const	O
double	O
c6	double
=	O
1.0	int
/	O
7.0	int
;	O
const	O
double	O
c7	double
=	O
-	O
1.0	int
/	O
8.0	int
;	O
const	O
double	O
c8	double
=	O
1.0	int
/	O
9.0	int
;	O
const	O
double	O
c9	double
=	O
-	O
1.0	int
/	O
10.0	int
;	O
const	O
double	O
t	double
=	O
c5	double
+	O
x	double
*	O
(	O
c6	double
+	O
x	double
*	O
(	O
c7	double
+	O
x	double
*	O
(	O
c8	double
+	O
x	double
*	O
c9	double
)	O
)	O
)	O
;	O
result	pointer
->	O
val	double
=	O
x	double
*	O
(	O
1.0	int
+	O
x	double
*	O
(	O
c1	double
+	O
x	double
*	O
(	O
c2	double
+	O
x	double
*	O
(	O
c3	double
+	O
x	double
*	O
(	O
c4	double
+	O
x	double
*	O
t	double
)	O
)	O
)	O
)	O
)	O
;	O
result	pointer
->	O
err	double
=	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
result	pointer
->	O
val	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
if	O
(	O
fabs	function
(	O
x	double
)	O
<	O
0.5	int
)	O
{	O
double	O
t	double
=	O
0.5	int
*	O
(	O
8.0	int
*	O
x	double
+	O
1.0	int
)	O
/	O
(	O
x	double
+	O
2.0	int
)	O
;	O
gsl_sf_result	struct
c	pointer
;	O
cheb_eval_e	function
(	O
&	O
lopx_cs	struct
,	O
t	double
,	O
&	O
c	pointer
)	O
;	O
result	pointer
->	O
val	double
=	O
x	double
*	O
c	pointer
.	O
val	double
;	O
result	pointer
->	O
err	double
=	O
fabs	function
(	O
x	double
*	O
c	pointer
.	O
err	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
result	pointer
->	O
val	double
=	O
log	function
(	O
1.0	int
+	O
x	double
)	O
;	O
result	pointer
->	O
err	double
=	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
result	pointer
->	O
val	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
int	O
gsl_sf_log_1plusx_mx_e	function
(	O
const	O
double	O
x	double
,	O
gsl_sf_result	struct
*	O
result	pointer
)	O
{	O
if	O
(	O
x	double
<=	O
-	O
1.0	int
)	O
{	O
DOMAIN_ERROR	O
(	O
result	pointer
)	O
;	O
}	O
else	O
if	O
(	O
fabs	function
(	O
x	double
)	O
<	O
GSL_ROOT5_DBL_EPSILON	int
)	O
{	O
const	O
double	O
c1	double
=	O
-	O
0.5	int
;	O
const	O
double	O
c2	double
=	O
1.0	int
/	O
3.0	int
;	O
const	O
double	O
c3	double
=	O
-	O
1.0	int
/	O
4.0	int
;	O
const	O
double	O
c4	double
=	O
1.0	int
/	O
5.0	int
;	O
const	O
double	O
c5	double
=	O
-	O
1.0	int
/	O
6.0	int
;	O
const	O
double	O
c6	double
=	O
1.0	int
/	O
7.0	int
;	O
const	O
double	O
c7	double
=	O
-	O
1.0	int
/	O
8.0	int
;	O
const	O
double	O
c8	double
=	O
1.0	int
/	O
9.0	int
;	O
const	O
double	O
c9	double
=	O
-	O
1.0	int
/	O
10.0	int
;	O
const	O
double	O
t	double
=	O
c5	double
+	O
x	double
*	O
(	O
c6	double
+	O
x	double
*	O
(	O
c7	double
+	O
x	double
*	O
(	O
c8	double
+	O
x	double
*	O
c9	double
)	O
)	O
)	O
;	O
result	pointer
->	O
val	double
=	O
x	double
*	O
x	double
*	O
(	O
c1	double
+	O
x	double
*	O
(	O
c2	double
+	O
x	double
*	O
(	O
c3	double
+	O
x	double
*	O
(	O
c4	double
+	O
x	double
*	O
t	double
)	O
)	O
)	O
)	O
;	O
result	pointer
->	O
err	double
=	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
result	pointer
->	O
val	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
if	O
(	O
fabs	function
(	O
x	double
)	O
<	O
0.5	int
)	O
{	O
double	O
t	double
=	O
0.5	int
*	O
(	O
8.0	int
*	O
x	double
+	O
1.0	int
)	O
/	O
(	O
x	double
+	O
2.0	int
)	O
;	O
gsl_sf_result	struct
c	pointer
;	O
cheb_eval_e	function
(	O
&	O
lopxmx_cs	struct
,	O
t	double
,	O
&	O
c	pointer
)	O
;	O
result	pointer
->	O
val	double
=	O
x	double
*	O
x	double
*	O
c	pointer
.	O
val	double
;	O
result	pointer
->	O
err	double
=	O
x	double
*	O
x	double
*	O
c	pointer
.	O
err	double
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
const	O
double	O
lterm	double
=	O
log	function
(	O
1.0	int
+	O
x	double
)	O
;	O
result	pointer
->	O
val	double
=	O
lterm	double
-	O
x	double
;	O
result	pointer
->	O
err	double
=	O
GSL_DBL_EPSILON	int
*	O
(	O
fabs	function
(	O
lterm	double
)	O
+	O
fabs	function
(	O
x	double
)	O
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
double	O
gsl_sf_log	function
(	O
const	O
double	O
x	double
)	O
{	O
EVAL_RESULT	O
(	O
gsl_sf_log_e	function
(	O
x	double
,	O
&	O
result	pointer
)	O
)	O
;	O
}	O
double	O
gsl_sf_log_abs	function
(	O
const	O
double	O
x	double
)	O
{	O
EVAL_RESULT	O
(	O
gsl_sf_log_abs_e	function
(	O
x	double
,	O
&	O
result	pointer
)	O
)	O
;	O
}	O
double	O
gsl_sf_log_1plusx	function
(	O
const	O
double	O
x	double
)	O
{	O
EVAL_RESULT	O
(	O
gsl_sf_log_1plusx_e	function
(	O
x	double
,	O
&	O
result	pointer
)	O
)	O
;	O
}	O
double	O
gsl_sf_log_1plusx_mx	function
(	O
const	O
double	O
x	double
)	O
{	O
EVAL_RESULT	O
(	O
gsl_sf_log_1plusx_mx_e	function
(	O
x	double
,	O
&	O
result	pointer
)	O
)	O
;	O
}	O
