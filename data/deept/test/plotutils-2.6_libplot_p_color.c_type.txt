static	O
int	O
_idraw_pseudocolor	function
(	O
int	O
red	int
,	O
int	O
green	int
,	O
int	O
blue	int
)	O
;	O
void	O
_pl_p_set_pen_color	function
(	O
S___	O
(	O
Plotter	struct
*	O
_plotter	pointer
)	O
)	O
{	O
_plotter	pointer
->	O
drawstate	pointer
->	O
ps_fgcolor_red	pointer
=	O
(	O
(	O
double	O
)	O
(	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
fgcolor	struct
)	O
.	O
red	int
)	O
)	O
/	O
0xFFFF	int
;	O
_plotter	pointer
->	O
drawstate	pointer
->	O
ps_fgcolor_green	pointer
=	O
(	O
(	O
double	O
)	O
(	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
fgcolor	struct
)	O
.	O
green	int
)	O
)	O
/	O
0xFFFF	int
;	O
_plotter	pointer
->	O
drawstate	pointer
->	O
ps_fgcolor_blue	pointer
=	O
(	O
(	O
double	O
)	O
(	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
fgcolor	struct
)	O
.	O
blue	int
)	O
)	O
/	O
0xFFFF	int
;	O
_plotter	pointer
->	O
drawstate	pointer
->	O
ps_idraw_fgcolor	pointer
=	O
_idraw_pseudocolor	function
(	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
fgcolor	struct
)	O
.	O
red	int
,	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
fgcolor	struct
)	O
.	O
green	int
,	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
fgcolor	struct
)	O
.	O
blue	int
)	O
;	O
return	O
;	O
}	O
void	O
_pl_p_set_fill_color	function
(	O
S___	O
(	O
Plotter	struct
*	O
_plotter	pointer
)	O
)	O
{	O
double	O
red	int
,	O
green	int
,	O
blue	int
;	O
if	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
fill_type	int
==	O
0	int
)	O
return	O
;	O
red	int
=	O
(	O
(	O
double	O
)	O
(	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
fillcolor	struct
)	O
.	O
red	int
)	O
)	O
/	O
0xFFFF	int
;	O
green	int
=	O
(	O
(	O
double	O
)	O
(	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
fillcolor	struct
)	O
.	O
green	int
)	O
)	O
/	O
0xFFFF	int
;	O
blue	int
=	O
(	O
(	O
double	O
)	O
(	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
fillcolor	struct
)	O
.	O
blue	int
)	O
)	O
/	O
0xFFFF	int
;	O
_plotter	pointer
->	O
drawstate	pointer
->	O
ps_fillcolor_red	int
=	O
red	int
;	O
_plotter	pointer
->	O
drawstate	pointer
->	O
ps_fillcolor_green	int
=	O
green	int
;	O
_plotter	pointer
->	O
drawstate	pointer
->	O
ps_fillcolor_blue	int
=	O
blue	int
;	O
_pl_p_set_pen_color	function
(	O
S___	O
(	O
_plotter	pointer
)	O
)	O
;	O
_pl_p_compute_idraw_bgcolor	function
(	O
S___	O
(	O
_plotter	pointer
)	O
)	O
;	O
return	O
;	O
}	O
static	O
int	O
_idraw_pseudocolor	function
(	O
int	O
red	int
,	O
int	O
green	int
,	O
int	O
blue	int
)	O
{	O
double	O
difference	long
;	O
int	O
i	int
;	O
int	O
best	int
=	O
0	int
;	O
difference	long
=	O
DBL_MAX	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
PS_NUM_IDRAW_STD_COLORS	int
;	O
i	int
++	O
)	O
{	O
double	O
newdifference	long
;	O
if	O
(	O
_pl_p_idraw_stdcolors	array
[	O
i	int
]	O
.	O
red	int
==	O
0xffff	int
&&	O
_pl_p_idraw_stdcolors	array
[	O
i	int
]	O
.	O
green	int
==	O
0xffff	int
&&	O
_pl_p_idraw_stdcolors	array
[	O
i	int
]	O
.	O
blue	int
==	O
0xffff	int
)	O
{	O
if	O
(	O
red	int
==	O
0xffff	int
&&	O
green	int
==	O
0xffff	int
&&	O
blue	int
==	O
0xffff	int
)	O
{	O
difference	long
=	O
0.0	int
;	O
best	int
=	O
i	int
;	O
}	O
continue	O
;	O
}	O
newdifference	long
=	O
(	O
(	O
double	O
)	O
(	O
_pl_p_idraw_stdcolors	array
[	O
i	int
]	O
.	O
red	int
-	O
red	int
)	O
*	O
(	O
double	O
)	O
(	O
_pl_p_idraw_stdcolors	array
[	O
i	int
]	O
.	O
red	int
-	O
red	int
)	O
)	O
+	O
(	O
(	O
double	O
)	O
(	O
_pl_p_idraw_stdcolors	array
[	O
i	int
]	O
.	O
green	int
-	O
green	int
)	O
*	O
(	O
double	O
)	O
(	O
_pl_p_idraw_stdcolors	array
[	O
i	int
]	O
.	O
green	int
-	O
green	int
)	O
)	O
+	O
(	O
(	O
double	O
)	O
(	O
_pl_p_idraw_stdcolors	array
[	O
i	int
]	O
.	O
blue	int
-	O
blue	int
)	O
*	O
(	O
double	O
)	O
(	O
_pl_p_idraw_stdcolors	array
[	O
i	int
]	O
.	O
blue	int
-	O
blue	int
)	O
)	O
;	O
if	O
(	O
newdifference	long
<	O
difference	long
)	O
{	O
difference	long
=	O
newdifference	long
;	O
best	int
=	O
i	long
;	O
}	O
}	O
return	O
best	int
;	O
}	O
void	O
_pl_p_compute_idraw_bgcolor	function
(	O
S___	O
(	O
Plotter	struct
*	O
_plotter	pointer
)	O
)	O
{	O
double	O
truered	double
,	O
truegreen	int
,	O
trueblue	int
;	O
double	O
fgred	double
,	O
fggreen	int
,	O
fgblue	int
;	O
double	O
difference	long
=	O
DBL_MAX	O
;	O
int	O
i	int
,	O
j	int
;	O
int	O
best_bgcolor	int
=	O
0	int
,	O
best_shading	int
=	O
0	int
;	O
double	O
best_shade	double
=	O
0.0	int
;	O
truered	int
=	O
0xFFFF	int
*	O
_plotter	pointer
->	O
drawstate	pointer
->	O
ps_fillcolor_red	pointer
;	O
truegreen	int
=	O
0xFFFF	int
*	O
_plotter	pointer
->	O
drawstate	pointer
->	O
ps_fillcolor_green	pointer
;	O
trueblue	int
=	O
0xFFFF	int
*	O
_plotter	pointer
->	O
drawstate	pointer
->	O
ps_fillcolor_blue	pointer
;	O
fgred	pointer
=	O
(	O
double	O
)	O
(	O
_pl_p_idraw_stdcolors	pointer
[	O
_plotter	pointer
->	O
drawstate	pointer
->	O
ps_idraw_fgcolor	int
]	O
.	O
red	int
)	O
;	O
fggreen	pointer
=	O
(	O
double	O
)	O
(	O
_pl_p_idraw_stdcolors	pointer
[	O
_plotter	pointer
->	O
drawstate	pointer
->	O
ps_idraw_fgcolor	int
]	O
.	O
green	int
)	O
;	O
fgblue	pointer
=	O
(	O
double	O
)	O
(	O
_pl_p_idraw_stdcolors	pointer
[	O
_plotter	pointer
->	O
drawstate	pointer
->	O
ps_idraw_fgcolor	int
]	O
.	O
blue	int
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
PS_NUM_IDRAW_STD_COLORS	int
;	O
i	int
++	O
)	O
{	O
double	O
bgred	double
,	O
bggreen	int
,	O
bgblue	int
;	O
bgred	pointer
=	O
(	O
double	O
)	O
(	O
_pl_p_idraw_stdcolors	array
[	O
i	int
]	O
.	O
red	int
)	O
;	O
bggreen	pointer
=	O
(	O
double	O
)	O
(	O
_pl_p_idraw_stdcolors	array
[	O
i	int
]	O
.	O
green	int
)	O
;	O
bgblue	pointer
=	O
(	O
double	O
)	O
(	O
_pl_p_idraw_stdcolors	array
[	O
i	int
]	O
.	O
blue	int
)	O
;	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<	O
PS_NUM_IDRAW_STD_SHADINGS	int
;	O
j	int
++	O
)	O
{	O
double	O
approxred	double
,	O
approxgreen	int
,	O
approxblue	int
;	O
double	O
shade	double
,	O
newdifference	long
;	O
shade	int
=	O
_pl_p_idraw_stdshadings	array
[	O
j	int
]	O
;	O
approxred	int
=	O
shade	int
*	O
bgred	pointer
+	O
(	O
1.0	int
-	O
shade	int
)	O
*	O
fgred	pointer
;	O
approxgreen	pointer
=	O
shade	int
*	O
bggreen	pointer
+	O
(	O
1.0	int
-	O
shade	int
)	O
*	O
fggreen	pointer
;	O
approxblue	pointer
=	O
shade	int
*	O
bgblue	pointer
+	O
(	O
1.0	int
-	O
shade	int
)	O
*	O
fgblue	pointer
;	O
newdifference	long
=	O
(	O
truered	pointer
-	O
approxred	int
)	O
*	O
(	O
truered	pointer
-	O
approxred	int
)	O
+	O
(	O
truegreen	int
-	O
approxgreen	int
)	O
*	O
(	O
truegreen	pointer
-	O
approxgreen	int
)	O
+	O
(	O
trueblue	int
-	O
approxblue	int
)	O
*	O
(	O
trueblue	pointer
-	O
approxblue	int
)	O
;	O
if	O
(	O
newdifference	long
<	O
difference	long
)	O
{	O
difference	long
=	O
newdifference	long
;	O
best_bgcolor	int
=	O
i	long
;	O
best_shading	int
=	O
j	long
;	O
best_shade	int
=	O
shade	pointer
;	O
}	O
}	O
}	O
_plotter	pointer
->	O
drawstate	pointer
->	O
ps_idraw_bgcolor	pointer
=	O
best_bgcolor	pointer
;	O
_plotter	pointer
->	O
drawstate	pointer
->	O
ps_idraw_shading	pointer
=	O
best_shading	int
;	O
if	O
(	O
best_shade	int
!=	O
0.0	int
)	O
{	O
_plotter	pointer
->	O
drawstate	pointer
->	O
ps_fillcolor_red	pointer
=	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
ps_fillcolor_red	pointer
-	O
(	O
1.0	int
-	O
best_shade	int
)	O
*	O
_plotter	pointer
->	O
drawstate	pointer
->	O
ps_fgcolor_red	pointer
)	O
/	O
best_shade	int
;	O
_plotter	pointer
->	O
drawstate	pointer
->	O
ps_fillcolor_green	pointer
=	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
ps_fillcolor_green	pointer
-	O
(	O
1.0	int
-	O
best_shade	int
)	O
*	O
_plotter	pointer
->	O
drawstate	pointer
->	O
ps_fgcolor_green	pointer
)	O
/	O
best_shade	int
;	O
_plotter	pointer
->	O
drawstate	pointer
->	O
ps_fillcolor_blue	pointer
=	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
ps_fillcolor_blue	pointer
-	O
(	O
1.0	int
-	O
best_shade	int
)	O
*	O
_plotter	pointer
->	O
drawstate	pointer
->	O
ps_fgcolor_blue	pointer
)	O
/	O
best_shade	int
;	O
}	O
}	O