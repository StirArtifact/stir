struct	O
top	struct
*	O
top	struct
;	O
static	O
FILE	struct
*	O
exfile	pointer
;	O
static	O
struct	O
fro	struct
*	O
workptr	pointer
;	O
static	O
struct	O
cbuf	struct
newdelnum	struct
;	O
static	O
struct	O
cbuf	struct
msg	pointer
;	O
static	O
int	O
exitstatus	int
;	O
static	O
bool	bool
forceciflag	bool
;	O
static	O
bool	bool
keepflag	bool
,	O
keepworkingfile	bool
,	O
rcsinitflag	bool
;	O
static	O
struct	O
delta	struct
*	O
targetdelta	pointer
;	O
static	O
struct	O
delta	struct
newdelta	struct
;	O
static	O
struct	O
stat	struct
workstat	struct
;	O
static	O
struct	O
link	function
assoclst	struct
;	O
static	O
void	O
cleanup	function
(	O
void	O
)	O
{	O
if	O
(	O
FLOW	O
(	O
erroneousp	bool
)	O
)	O
exitstatus	int
=	O
EXIT_FAILURE	int
;	O
fro_zclose	function
(	O
&	O
FLOW	O
(	O
from	pointer
)	O
)	O
;	O
fro_zclose	function
(	O
&	O
workptr	pointer
)	O
;	O
Ozclose	function
(	O
&	O
exfile	pointer
)	O
;	O
Ozclose	function
(	O
&	O
FLOW	O
(	O
res	pointer
)	O
)	O
;	O
ORCSclose	function
(	O
)	O
;	O
dirtempunlink	function
(	O
)	O
;	O
}	O
static	O
exiting	O
void	O
exiterr	pointer
(	O
void	O
)	O
{	O
ORCSerror	function
(	O
)	O
;	O
dirtempunlink	function
(	O
)	O
;	O
tempunlink	function
(	O
)	O
;	O
exit_failurefully	function
(	O
)	O
;	O
}	O
static	O
void	O
incnum	function
(	O
char	O
const	O
*	O
onum	pointer
,	O
struct	O
cbuf	struct
*	O
nnum	pointer
)	O
{	O
register	O
char	O
*	O
tp	pointer
,	O
*	O
np	pointer
;	O
register	O
size_t	long
l	long
;	O
ACCF	O
(	O
"%s%c"	pointer
,	O
onum	pointer
,	O
'\0'	O
)	O
;	O
np	pointer
=	O
finish_string	function
(	O
PLEXUS	O
,	O
&	O
nnum	pointer
->	O
size	long
)	O
;	O
nnum	pointer
->	O
string	pointer
=	O
np	pointer
;	O
l	long
=	O
nnum	pointer
->	O
size	long
-	O
1	int
;	O
for	O
(	O
tp	pointer
=	O
np	pointer
+	O
l	long
;	O
np	pointer
!=	O
tp	pointer
;	O
)	O
if	O
(	O
isdigit	function
(	O
*	O
--	O
tp	pointer
)	O
)	O
{	O
if	O
(	O
*	O
tp	pointer
!=	O
'9'	O
)	O
{	O
++	O
*	O
tp	pointer
;	O
nnum	pointer
->	O
size	long
--	O
;	O
return	O
;	O
}	O
*	O
tp	pointer
=	O
'0'	O
;	O
}	O
else	O
{	O
tp	pointer
++	O
;	O
break	O
;	O
}	O
*	O
tp	pointer
=	O
'1'	O
;	O
tp	pointer
=	O
np	pointer
+	O
l	long
;	O
*	O
tp	pointer
++	O
=	O
'0'	O
;	O
*	O
tp	pointer
=	O
'\0'	O
;	O
}	O
static	O
int	O
removelock	function
(	O
struct	O
delta	struct
*	O
delta	struct
)	O
{	O
struct	O
link	function
box	pointer
,	O
*	O
tp	pointer
;	O
struct	O
rcslock	struct
const	O
*	O
rl	pointer
;	O
char	O
const	O
*	O
num	pointer
;	O
num	pointer
=	O
delta	struct
->	O
num	pointer
;	O
box	pointer
.	O
next	pointer
=	O
GROK	O
(	O
locks	pointer
)	O
;	O
if	O
(	O
!	O
(	O
tp	pointer
=	O
lock_delta_memq	O
(	O
&	O
box	pointer
,	O
delta	struct
)	O
)	O
)	O
{	O
if	O
(	O
!	O
BE	O
(	O
strictly_locking	bool
)	O
&&	O
stat_mine_p	function
(	O
&	O
REPO	O
(	O
stat	struct
)	O
)	O
)	O
return	O
0	int
;	O
RERR	O
(	O
"no lock set by %s for revision %s"	pointer
,	O
getcaller	function
(	O
)	O
,	O
num	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
rl	pointer
=	O
tp	pointer
->	O
next	pointer
->	O
entry	pointer
;	O
if	O
(	O
!	O
caller_login_p	function
(	O
rl	pointer
->	O
login	pointer
)	O
)	O
{	O
RERR	O
(	O
"revision %s locked by %s"	pointer
,	O
num	pointer
,	O
rl	pointer
->	O
login	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
lock_drop	function
(	O
&	O
box	pointer
,	O
tp	pointer
)	O
;	O
return	O
1	int
;	O
}	O
static	O
struct	O
wlink	struct
newbranch	struct
;	O
static	O
int	O
addbranch	function
(	O
struct	O
delta	struct
*	O
branchpoint	pointer
,	O
struct	O
cbuf	struct
*	O
num	pointer
,	O
bool	bool
removedlock	bool
,	O
struct	O
wlink	struct
*	O
*	O
tp_deltas	pointer
)	O
{	O
struct	O
wlink	struct
*	O
*	O
btrail	pointer
;	O
struct	O
delta	struct
*	O
d	pointer
;	O
int	O
result	pointer
;	O
int	O
field	int
,	O
numlength	int
;	O
numlength	int
=	O
countnumflds	function
(	O
num	pointer
->	O
string	pointer
)	O
;	O
if	O
(	O
!	O
branchpoint	pointer
->	O
branches	pointer
)	O
{	O
branchpoint	pointer
->	O
branches	pointer
=	O
&	O
newbranch	struct
;	O
if	O
(	O
numlength	int
==	O
0	int
)	O
{	O
JAM	O
(	O
num	pointer
,	O
branchpoint	pointer
->	O
num	pointer
)	O
;	O
ADD	O
(	O
num	pointer
,	O
".1.1"	pointer
)	O
;	O
}	O
else	O
if	O
(	O
numlength	int
&	O
1	int
)	O
ADD	O
(	O
num	pointer
,	O
".1"	pointer
)	O
;	O
newbranch	struct
.	O
next	pointer
=	O
NULL	O
;	O
}	O
else	O
if	O
(	O
numlength	int
==	O
0	int
)	O
{	O
struct	O
wlink	struct
*	O
bhead	pointer
=	O
branchpoint	pointer
->	O
branches	pointer
;	O
while	O
(	O
bhead	pointer
->	O
next	pointer
)	O
bhead	pointer
=	O
bhead	pointer
->	O
next	pointer
;	O
bhead	pointer
->	O
next	pointer
=	O
&	O
newbranch	struct
;	O
d	pointer
=	O
bhead	pointer
->	O
entry	pointer
;	O
incnum	function
(	O
BRANCHNO	O
(	O
d	pointer
->	O
num	pointer
)	O
,	O
num	pointer
)	O
;	O
ADD	O
(	O
num	pointer
,	O
".1"	pointer
)	O
;	O
newbranch	struct
.	O
next	pointer
=	O
NULL	O
;	O
}	O
else	O
{	O
field	int
=	O
numlength	int
-	O
(	O
(	O
numlength	int
&	O
1	int
)	O
^	O
1	int
)	O
;	O
btrail	pointer
=	O
&	O
branchpoint	pointer
->	O
branches	pointer
;	O
while	O
(	O
d	pointer
=	O
(	O
*	O
btrail	pointer
)	O
->	O
entry	pointer
,	O
0	int
<	O
(	O
result	pointer
=	O
cmpnumfld	function
(	O
num	pointer
->	O
string	pointer
,	O
d	pointer
->	O
num	pointer
,	O
field	int
)	O
)	O
)	O
{	O
btrail	pointer
=	O
&	O
(	O
*	O
btrail	pointer
)	O
->	O
next	pointer
;	O
if	O
(	O
!	O
*	O
btrail	pointer
)	O
{	O
result	pointer
=	O
-	O
1	int
;	O
break	O
;	O
}	O
}	O
if	O
(	O
result	pointer
<	O
0	int
)	O
{	O
newbranch	struct
.	O
next	pointer
=	O
*	O
btrail	pointer
;	O
*	O
btrail	pointer
=	O
&	O
newbranch	struct
;	O
if	O
(	O
numlength	int
&	O
1	int
)	O
ADD	O
(	O
num	pointer
,	O
".1"	pointer
)	O
;	O
}	O
else	O
{	O
targetdelta	pointer
=	O
gr_revno	function
(	O
BRANCHNO	O
(	O
num	pointer
->	O
string	pointer
)	O
,	O
tp_deltas	pointer
)	O
;	O
if	O
(	O
!	O
targetdelta	pointer
)	O
return	O
-	O
1	int
;	O
if	O
(	O
!	O
NUM_GT	O
(	O
num	pointer
->	O
string	pointer
,	O
targetdelta	pointer
->	O
num	pointer
)	O
)	O
{	O
RERR	O
(	O
"revision %s too low; must be higher than %s"	pointer
,	O
num	pointer
->	O
string	pointer
,	O
targetdelta	pointer
->	O
num	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
!	O
removedlock	bool
&&	O
0	int
<=	O
(	O
removedlock	bool
=	O
removelock	function
(	O
targetdelta	pointer
)	O
)	O
)	O
{	O
if	O
(	O
numlength	int
&	O
1	int
)	O
incnum	function
(	O
targetdelta	pointer
->	O
num	pointer
,	O
num	pointer
)	O
;	O
targetdelta	pointer
->	O
ilk	pointer
=	O
&	O
newdelta	struct
;	O
newdelta	struct
.	O
ilk	pointer
=	O
NULL	O
;	O
}	O
return	O
removedlock	bool
;	O
}	O
}	O
newbranch	struct
.	O
entry	pointer
=	O
&	O
newdelta	struct
;	O
newdelta	struct
.	O
ilk	pointer
=	O
NULL	O
;	O
if	O
(	O
branchpoint	pointer
->	O
lockedby	pointer
)	O
if	O
(	O
caller_login_p	function
(	O
branchpoint	pointer
->	O
lockedby	pointer
)	O
)	O
return	O
removelock	function
(	O
branchpoint	pointer
)	O
;	O
return	O
removedlock	bool
;	O
}	O
static	O
void	O
prune	function
(	O
struct	O
delta	struct
*	O
wrong	pointer
,	O
struct	O
delta	struct
*	O
bp	pointer
)	O
{	O
struct	O
wlink	struct
box	pointer
,	O
*	O
tp	pointer
;	O
struct	O
delta	struct
*	O
d	pointer
;	O
int	O
same	int
=	O
countnumflds	function
(	O
wrong	pointer
->	O
num	pointer
)	O
-	O
2	int
;	O
wrong	pointer
->	O
selector	bool
=	O
false	int
;	O
if	O
(	O
0	int
>=	O
same	int
)	O
return	O
;	O
box	pointer
.	O
next	pointer
=	O
bp	pointer
->	O
branches	pointer
;	O
for	O
(	O
tp	pointer
=	O
&	O
box	pointer
;	O
tp	pointer
->	O
next	pointer
;	O
tp	pointer
=	O
tp	pointer
->	O
next	pointer
)	O
if	O
(	O
wrong	pointer
==	O
(	O
d	pointer
=	O
tp	pointer
->	O
next	pointer
->	O
entry	pointer
)	O
)	O
{	O
tp	pointer
->	O
next	pointer
=	O
tp	pointer
->	O
next	pointer
->	O
next	pointer
;	O
bp	pointer
->	O
branches	pointer
=	O
box	pointer
.	O
next	pointer
;	O
return	O
;	O
}	O
for	O
(	O
tp	pointer
=	O
bp	pointer
->	O
branches	pointer
;	O
tp	pointer
;	O
tp	pointer
=	O
tp	pointer
->	O
next	pointer
)	O
{	O
d	pointer
=	O
tp	pointer
->	O
entry	pointer
;	O
if	O
(	O
0	int
==	O
compartial	function
(	O
wrong	pointer
->	O
num	pointer
,	O
d	pointer
->	O
num	pointer
,	O
same	int
)	O
)	O
{	O
while	O
(	O
d	pointer
->	O
ilk	pointer
!=	O
wrong	pointer
)	O
d	pointer
=	O
d	pointer
->	O
ilk	pointer
;	O
d	pointer
->	O
ilk	pointer
=	O
NULL	O
;	O
return	O
;	O
}	O
}	O
abort	function
(	O
)	O
;	O
}	O
static	O
int	O
addelta	function
(	O
struct	O
wlink	struct
*	O
*	O
tp_deltas	pointer
)	O
{	O
register	O
char	O
const	O
*	O
tp	pointer
;	O
register	O
int	O
i	int
;	O
int	O
removedlock	bool
;	O
int	O
newdnumlength	int
;	O
struct	O
delta	struct
*	O
tip	pointer
=	O
REPO	O
(	O
tip	pointer
)	O
;	O
char	O
const	O
*	O
defbr	pointer
=	O
GROK	O
(	O
branch	pointer
)	O
;	O
newdnumlength	int
=	O
countnumflds	function
(	O
newdelnum	struct
.	O
string	pointer
)	O
;	O
if	O
(	O
rcsinitflag	bool
)	O
{	O
if	O
(	O
newdnumlength	int
==	O
0	int
&&	O
defbr	pointer
)	O
{	O
JAM	O
(	O
&	O
newdelnum	struct
,	O
defbr	pointer
)	O
;	O
newdnumlength	int
=	O
countnumflds	function
(	O
defbr	pointer
)	O
;	O
}	O
if	O
(	O
newdnumlength	int
==	O
0	int
)	O
JAM	O
(	O
&	O
newdelnum	struct
,	O
"1.1"	pointer
)	O
;	O
else	O
if	O
(	O
newdnumlength	int
==	O
1	int
)	O
ADD	O
(	O
&	O
newdelnum	struct
,	O
".1"	pointer
)	O
;	O
else	O
if	O
(	O
newdnumlength	int
>	O
2	int
)	O
{	O
RERR	O
(	O
"Branch point doesn't exist for revision %s."	pointer
,	O
newdelnum	struct
.	O
string	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
tip	pointer
=	O
REPO	O
(	O
tip	pointer
)	O
=	O
&	O
newdelta	struct
;	O
newdelta	struct
.	O
ilk	pointer
=	O
NULL	O
;	O
return	O
0	int
;	O
}	O
if	O
(	O
newdnumlength	int
==	O
0	int
)	O
{	O
switch	O
(	O
findlock	function
(	O
true	int
,	O
&	O
targetdelta	pointer
)	O
)	O
{	O
default	O
:	O
return	O
-	O
1	int
;	O
case	O
1	int
:	O
if	O
(	O
!	O
gr_revno	function
(	O
targetdelta	pointer
->	O
num	pointer
,	O
tp_deltas	pointer
)	O
)	O
return	O
-	O
1	int
;	O
if	O
(	O
targetdelta	pointer
==	O
tip	pointer
)	O
{	O
newdelta	struct
.	O
ilk	pointer
=	O
tip	pointer
;	O
tip	pointer
=	O
REPO	O
(	O
tip	pointer
)	O
=	O
&	O
newdelta	struct
;	O
}	O
else	O
if	O
(	O
!	O
targetdelta	pointer
->	O
ilk	pointer
&&	O
countnumflds	function
(	O
targetdelta	pointer
->	O
num	pointer
)	O
>	O
2	int
)	O
{	O
targetdelta	pointer
->	O
ilk	pointer
=	O
&	O
newdelta	struct
;	O
newdelta	struct
.	O
ilk	pointer
=	O
NULL	O
;	O
}	O
else	O
{	O
JAM	O
(	O
&	O
newdelnum	struct
,	O
""	pointer
)	O
;	O
return	O
addbranch	function
(	O
targetdelta	pointer
,	O
&	O
newdelnum	struct
,	O
true	int
,	O
tp_deltas	pointer
)	O
;	O
}	O
incnum	function
(	O
targetdelta	pointer
->	O
num	pointer
,	O
&	O
newdelnum	struct
)	O
;	O
return	O
1	int
;	O
case	O
0	int
:	O
if	O
(	O
BE	O
(	O
strictly_locking	bool
)	O
||	O
!	O
stat_mine_p	function
(	O
&	O
REPO	O
(	O
stat	struct
)	O
)	O
)	O
{	O
RERR	O
(	O
"no lock set by %s"	pointer
,	O
getcaller	function
(	O
)	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
defbr	pointer
)	O
JAM	O
(	O
&	O
newdelnum	struct
,	O
defbr	pointer
)	O
;	O
else	O
{	O
incnum	function
(	O
tip	pointer
->	O
num	pointer
,	O
&	O
newdelnum	struct
)	O
;	O
}	O
newdnumlength	int
=	O
countnumflds	function
(	O
newdelnum	struct
.	O
string	pointer
)	O
;	O
}	O
}	O
if	O
(	O
newdnumlength	int
<=	O
2	int
)	O
{	O
if	O
(	O
newdnumlength	int
==	O
1	int
)	O
{	O
if	O
(	O
NUMF_EQ	O
(	O
1	int
,	O
newdelnum	struct
.	O
string	pointer
,	O
tip	pointer
->	O
num	pointer
)	O
)	O
incnum	function
(	O
tip	pointer
->	O
num	pointer
,	O
&	O
newdelnum	struct
)	O
;	O
else	O
ADD	O
(	O
&	O
newdelnum	struct
,	O
".1"	pointer
)	O
;	O
}	O
if	O
(	O
!	O
NUM_GT	O
(	O
newdelnum	struct
.	O
string	pointer
,	O
tip	pointer
->	O
num	pointer
)	O
)	O
{	O
RERR	O
(	O
"revision %s too low; must be higher than %s"	pointer
,	O
newdelnum	struct
.	O
string	pointer
,	O
tip	pointer
->	O
num	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
targetdelta	pointer
=	O
tip	pointer
;	O
if	O
(	O
0	int
<=	O
(	O
removedlock	bool
=	O
removelock	function
(	O
tip	pointer
)	O
)	O
)	O
{	O
if	O
(	O
!	O
gr_revno	function
(	O
tip	pointer
->	O
num	pointer
,	O
tp_deltas	pointer
)	O
)	O
return	O
-	O
1	int
;	O
newdelta	struct
.	O
ilk	pointer
=	O
tip	pointer
;	O
tip	pointer
=	O
REPO	O
(	O
tip	pointer
)	O
=	O
&	O
newdelta	struct
;	O
}	O
return	O
removedlock	bool
;	O
}	O
else	O
{	O
struct	O
cbuf	struct
old	struct
=	O
newdelnum	struct
;	O
tp	pointer
=	O
old	struct
.	O
string	pointer
;	O
for	O
(	O
i	int
=	O
newdnumlength	int
-	O
(	O
(	O
newdnumlength	int
&	O
1	int
)	O
^	O
1	int
)	O
;	O
--	O
i	int
;	O
)	O
while	O
(	O
*	O
tp	pointer
++	O
!=	O
'.'	O
)	O
continue	O
;	O
old	struct
.	O
string	pointer
=	O
SHSNIP	O
(	O
&	O
old	struct
.	O
size	long
,	O
old	struct
.	O
string	pointer
,	O
tp	pointer
-	O
1	int
)	O
;	O
if	O
(	O
!	O
(	O
targetdelta	pointer
=	O
gr_revno	function
(	O
old	struct
.	O
string	pointer
,	O
tp_deltas	pointer
)	O
)	O
)	O
return	O
-	O
1	int
;	O
if	O
(	O
!	O
NUM_EQ	O
(	O
targetdelta	pointer
->	O
num	pointer
,	O
old	struct
.	O
string	pointer
)	O
)	O
{	O
RERR	O
(	O
"can't find branch point %s"	pointer
,	O
old	struct
.	O
string	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
return	O
addbranch	function
(	O
targetdelta	pointer
,	O
&	O
newdelnum	struct
,	O
false	int
,	O
tp_deltas	pointer
)	O
;	O
}	O
}	O
static	O
bool	bool
addsyms	function
(	O
char	O
const	O
*	O
num	pointer
)	O
{	O
struct	O
link	function
*	O
ls	pointer
;	O
struct	O
u_symdef	struct
const	O
*	O
ud	pointer
;	O
for	O
(	O
ls	pointer
=	O
assoclst	struct
.	O
next	pointer
;	O
ls	pointer
;	O
ls	pointer
=	O
ls	pointer
->	O
next	pointer
)	O
{	O
ud	pointer
=	O
ls	pointer
->	O
entry	pointer
;	O
if	O
(	O
addsymbol	function
(	O
num	pointer
,	O
ud	pointer
->	O
u	struct
.	O
meaningful	pointer
,	O
ud	pointer
->	O
override	bool
)	O
<	O
0	int
)	O
return	O
false	int
;	O
}	O
return	O
true	int
;	O
}	O
static	O
char	O
getcurdate_buffer	array
[	O
datesize	O
]	O
;	O
static	O
char	O
const	O
*	O
getcurdate	function
(	O
void	O
)	O
{	O
if	O
(	O
!	O
getcurdate_buffer	array
[	O
0	int
]	O
)	O
time2date	function
(	O
BE	O
(	O
now	long
)	O
,	O
getcurdate_buffer	array
)	O
;	O
return	O
getcurdate_buffer	array
;	O
}	O
static	O
int	O
fixwork	function
(	O
mode_t	int
newworkmode	int
,	O
time_t	long
mtime	long
)	O
{	O
char	O
const	O
*	O
mani_filename	pointer
=	O
MANI	O
(	O
filename	pointer
)	O
;	O
return	O
1	int
<	O
workstat	struct
.	O
st_nlink	long
||	O
(	O
newworkmode	int
&	O
S_IWUSR	O
&&	O
!	O
stat_mine_p	function
(	O
&	O
workstat	struct
)	O
)	O
||	O
PROB	O
(	O
setmtime	function
(	O
mani_filename	pointer
,	O
mtime	long
)	O
)	O
?	O
-	O
1	int
:	O
workstat	struct
.	O
st_mode	int
==	O
newworkmode	int
?	O
0	int
:	O
!	O
PROB	O
(	O
change_mode	function
(	O
workptr	pointer
->	O
fd	int
,	O
newworkmode	int
)	O
)	O
?	O
0	int
:	O
chmod	function
(	O
mani_filename	pointer
,	O
newworkmode	int
)	O
;	O
}	O
static	O
int	O
xpandfile	function
(	O
struct	O
fro	struct
*	O
unexfile	pointer
,	O
struct	O
delta	struct
const	O
*	O
delta	struct
,	O
char	O
const	O
*	O
*	O
exname	pointer
,	O
bool	bool
dolog	bool
)	O
{	O
char	O
const	O
*	O
targetname	pointer
;	O
int	O
e	pointer
,	O
r	pointer
;	O
targetname	pointer
=	O
makedirtemp	function
(	O
true	int
)	O
;	O
if	O
(	O
!	O
(	O
exfile	pointer
=	O
fopen_safer	function
(	O
targetname	pointer
,	O
FOPEN_W_WORK	pointer
)	O
)	O
)	O
{	O
syserror_errno	O
(	O
targetname	pointer
)	O
;	O
MERR	O
(	O
"can't build working file"	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
r	pointer
=	O
0	int
;	O
if	O
(	O
MIN_UNEXPAND	O
<=	O
BE	O
(	O
kws	int
)	O
)	O
fro_spew	function
(	O
unexfile	pointer
,	O
exfile	pointer
)	O
;	O
else	O
{	O
struct	O
expctx	struct
ctx	pointer
=	O
EXPCTX_1OUT	O
(	O
exfile	pointer
,	O
unexfile	pointer
,	O
false	int
,	O
dolog	bool
)	O
;	O
for	O
(	O
;	O
;	O
)	O
{	O
e	pointer
=	O
expandline	function
(	O
&	O
ctx	pointer
)	O
;	O
if	O
(	O
e	pointer
<	O
0	int
)	O
break	O
;	O
r	pointer
|=	O
e	pointer
;	O
if	O
(	O
e	pointer
<=	O
1	int
)	O
break	O
;	O
}	O
FINISH_EXPCTX	O
(	O
&	O
ctx	pointer
)	O
;	O
}	O
*	O
exname	pointer
=	O
targetname	pointer
;	O
return	O
r	pointer
&	O
1	int
;	O
}	O
static	O
struct	O
cbuf	struct
logmsg	struct
;	O
static	O
struct	O
cbuf	struct
getlogmsg	function
(	O
void	O
)	O
{	O
if	O
(	O
msg	pointer
.	O
size	long
)	O
return	O
msg	pointer
;	O
if	O
(	O
keepflag	bool
)	O
{	O
char	O
datebuf	array
[	O
datesize	O
+	O
zonelenmax	int
]	O
;	O
date2str	function
(	O
getcurdate	function
(	O
)	O
,	O
datebuf	array
)	O
;	O
ACCF	O
(	O
"%s%s at %s"	pointer
,	O
TINYKS	O
(	O
ciklog	O
)	O
,	O
getcaller	function
(	O
)	O
,	O
datebuf	array
)	O
;	O
OK	O
(	O
&	O
logmsg	struct
)	O
;	O
return	O
logmsg	struct
;	O
}	O
if	O
(	O
!	O
targetdelta	pointer
&&	O
(	O
NUM_EQ	O
(	O
newdelnum	struct
.	O
string	pointer
,	O
"1.1"	pointer
)	O
||	O
NUM_EQ	O
(	O
newdelnum	struct
.	O
string	pointer
,	O
"1.0"	pointer
)	O
)	O
)	O
{	O
struct	O
cbuf	struct
const	O
initiallog	struct
=	O
{	O
.	O
string	pointer
=	O
FIRST	pointer
,	O
.	O
size	long
=	O
sizeof	O
(	O
FIRST	pointer
)	O
-	O
1	int
}	O
;	O
return	O
initiallog	struct
;	O
}	O
if	O
(	O
logmsg	struct
.	O
size	long
)	O
{	O
if	O
(	O
yesorno	function
(	O
true	int
,	O
"reuse log message of previous file? [yn](y): "	pointer
)	O
)	O
return	O
logmsg	struct
;	O
}	O
logmsg	struct
=	O
getsstdin	function
(	O
"m"	pointer
,	O
"log message"	pointer
,	O
""	pointer
)	O
;	O
if	O
(	O
!	O
logmsg	struct
.	O
size	long
)	O
set_empty_log_message	function
(	O
&	O
logmsg	struct
)	O
;	O
return	O
logmsg	struct
;	O
}	O
static	O
char	O
const	O
*	O
first_meaningful_symbolic_name	function
(	O
void	O
)	O
{	O
struct	O
u_symdef	struct
const	O
*	O
ud	pointer
=	O
assoclst	struct
.	O
next	pointer
->	O
entry	pointer
;	O
return	O
ud	pointer
->	O
u	struct
.	O
meaningful	pointer
;	O
}	O
static	O
char	O
const	O
default_state	array
[	O
]	O
=	O
DEFAULTSTATE	pointer
;	O
int	O
main	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
char	O
altdate	array
[	O
datesize	O
]	O
;	O
char	O
olddate	array
[	O
datesize	O
]	O
;	O
char	O
newdatebuf	array
[	O
datesize	O
+	O
zonelenmax	int
]	O
;	O
char	O
targetdatebuf	array
[	O
datesize	O
+	O
zonelenmax	int
]	O
;	O
char	O
*	O
a	pointer
,	O
*	O
*	O
newargv	pointer
,	O
*	O
textfile	pointer
;	O
char	O
const	O
*	O
author	pointer
,	O
*	O
krev	pointer
,	O
*	O
rev	pointer
,	O
*	O
state	pointer
;	O
char	O
const	O
*	O
diffname	pointer
,	O
*	O
expname	pointer
;	O
char	O
const	O
*	O
newworkname	pointer
;	O
bool	bool
initflag	bool
,	O
mustread	bool
;	O
bool	bool
lockflag	bool
,	O
lockthis	bool
,	O
mtimeflag	bool
;	O
int	O
removedlock	bool
;	O
bool	bool
Ttimeflag	bool
;	O
int	O
r	pointer
;	O
int	O
changedRCS	int
,	O
changework	int
;	O
bool	bool
dolog	bool
,	O
newhead	bool
;	O
bool	bool
usestatdate	bool
;	O
mode_t	int
newworkmode	int
;	O
time_t	long
mtime	long
,	O
wtime	long
;	O
struct	O
delta	struct
*	O
workdelta	pointer
;	O
struct	O
link	function
*	O
tp_assoc	pointer
=	O
&	O
assoclst	struct
;	O
struct	O
wlink	struct
*	O
deltas	pointer
;	O
const	O
struct	O
program	struct
program	struct
=	O
{	O
.	O
invoke	pointer
=	O
argv	pointer
[	O
0	int
]	O
,	O
.	O
name	pointer
=	O
"ci"	pointer
,	O
.	O
help	pointer
=	O
help	pointer
,	O
.	O
exiterr	pointer
=	O
exiterr	pointer
}	O
;	O
CHECK_HV	O
(	O
)	O
;	O
gnurcs_init	function
(	O
&	O
program	struct
)	O
;	O
setrid	function
(	O
)	O
;	O
author	pointer
=	O
rev	pointer
=	O
state	pointer
=	O
textfile	pointer
=	O
NULL	O
;	O
initflag	bool
=	O
lockflag	bool
=	O
mustread	bool
=	O
false	int
;	O
mtimeflag	bool
=	O
false	int
;	O
Ttimeflag	bool
=	O
false	int
;	O
altdate	array
[	O
0	int
]	O
=	O
'\0'	O
;	O
usestatdate	bool
=	O
false	int
;	O
BE	O
(	O
pe	pointer
)	O
=	O
X_DEFAULT	pointer
;	O
argc	int
=	O
getRCSINIT	function
(	O
argc	int
,	O
argv	pointer
,	O
&	O
newargv	pointer
)	O
;	O
argv	pointer
=	O
newargv	pointer
;	O
while	O
(	O
a	pointer
=	O
*	O
++	O
argv	pointer
,	O
0	int
<	O
--	O
argc	int
&&	O
*	O
a	pointer
++	O
==	O
'-'	O
)	O
{	O
switch	O
(	O
*	O
a	pointer
++	O
)	O
{	O
case	O
'r'	O
:	O
if	O
(	O
*	O
a	pointer
)	O
goto	O
revno	pointer
;	O
keepworkingfile	bool
=	O
lockflag	bool
=	O
false	int
;	O
break	O
;	O
case	O
'l'	O
:	O
keepworkingfile	bool
=	O
lockflag	bool
=	O
true	int
;	O
revno	pointer
:	O
if	O
(	O
*	O
a	pointer
)	O
{	O
if	O
(	O
rev	pointer
)	O
PWARN	O
(	O
"redefinition of %s"	pointer
,	O
ks_revno	array
)	O
;	O
rev	pointer
=	O
a	pointer
;	O
}	O
break	O
;	O
case	O
'u'	O
:	O
keepworkingfile	bool
=	O
true	int
;	O
lockflag	bool
=	O
false	int
;	O
goto	O
revno	pointer
;	O
case	O
'i'	O
:	O
initflag	bool
=	O
true	int
;	O
goto	O
revno	pointer
;	O
case	O
'j'	O
:	O
mustread	bool
=	O
true	int
;	O
goto	O
revno	pointer
;	O
case	O
'I'	O
:	O
BE	O
(	O
interactive	bool
)	O
=	O
true	int
;	O
goto	O
revno	pointer
;	O
case	O
'q'	O
:	O
BE	O
(	O
quiet	bool
)	O
=	O
true	int
;	O
goto	O
revno	pointer
;	O
case	O
'f'	O
:	O
forceciflag	bool
=	O
true	int
;	O
goto	O
revno	pointer
;	O
case	O
'k'	O
:	O
keepflag	bool
=	O
true	int
;	O
goto	O
revno	pointer
;	O
case	O
'm'	O
:	O
if	O
(	O
msg	pointer
.	O
size	long
)	O
redefined	function
(	O
'm'	O
)	O
;	O
msg	pointer
=	O
cleanlogmsg	function
(	O
a	pointer
,	O
strlen	function
(	O
a	pointer
)	O
)	O
;	O
if	O
(	O
!	O
msg	pointer
.	O
size	long
)	O
set_empty_log_message	function
(	O
&	O
msg	pointer
)	O
;	O
break	O
;	O
case	O
'n'	O
:	O
case	O
'N'	O
:	O
{	O
char	O
option	pointer
=	O
a	pointer
[	O
-	O
1	int
]	O
;	O
struct	O
u_symdef	struct
*	O
ud	pointer
;	O
if	O
(	O
!	O
*	O
a	pointer
)	O
{	O
PERR	O
(	O
"missing symbolic name after -%c"	pointer
,	O
option	pointer
)	O
;	O
break	O
;	O
}	O
checkssym	function
(	O
a	pointer
)	O
;	O
ud	pointer
=	O
ZLLOC	O
(	O
1	int
,	O
struct	O
u_symdef	struct
)	O
;	O
ud	pointer
->	O
override	bool
=	O
(	O
'N'	O
==	O
option	pointer
)	O
;	O
ud	pointer
->	O
u	struct
.	O
meaningful	pointer
=	O
a	pointer
;	O
tp_assoc	pointer
=	O
extend	function
(	O
tp_assoc	pointer
,	O
ud	pointer
,	O
PLEXUS	O
)	O
;	O
}	O
break	O
;	O
case	O
's'	O
:	O
if	O
(	O
*	O
a	pointer
)	O
{	O
if	O
(	O
state	pointer
)	O
redefined	function
(	O
's'	O
)	O
;	O
checksid	function
(	O
a	pointer
)	O
;	O
state	pointer
=	O
a	pointer
;	O
}	O
else	O
PERR	O
(	O
"missing state for -s option"	pointer
)	O
;	O
break	O
;	O
case	O
't'	O
:	O
if	O
(	O
*	O
a	pointer
)	O
{	O
if	O
(	O
textfile	pointer
)	O
redefined	function
(	O
't'	O
)	O
;	O
textfile	pointer
=	O
a	pointer
;	O
}	O
break	O
;	O
case	O
'd'	O
:	O
if	O
(	O
altdate	array
[	O
0	int
]	O
||	O
usestatdate	bool
)	O
redefined	function
(	O
'd'	O
)	O
;	O
altdate	array
[	O
0	int
]	O
=	O
'\0'	O
;	O
if	O
(	O
!	O
(	O
usestatdate	bool
=	O
!	O
*	O
a	pointer
)	O
)	O
str2date	function
(	O
a	pointer
,	O
altdate	array
)	O
;	O
break	O
;	O
case	O
'M'	O
:	O
mtimeflag	bool
=	O
true	int
;	O
goto	O
revno	pointer
;	O
case	O
'w'	O
:	O
if	O
(	O
*	O
a	pointer
)	O
{	O
if	O
(	O
author	pointer
)	O
redefined	function
(	O
'w'	O
)	O
;	O
checksid	function
(	O
a	pointer
)	O
;	O
author	pointer
=	O
a	pointer
;	O
}	O
else	O
PERR	O
(	O
"missing author for -w option"	pointer
)	O
;	O
break	O
;	O
case	O
'x'	O
:	O
BE	O
(	O
pe	pointer
)	O
=	O
a	pointer
;	O
break	O
;	O
case	O
'V'	O
:	O
setRCSversion	function
(	O
*	O
argv	pointer
)	O
;	O
break	O
;	O
case	O
'z'	O
:	O
zone_set	function
(	O
a	pointer
)	O
;	O
break	O
;	O
case	O
'T'	O
:	O
if	O
(	O
!	O
*	O
a	pointer
)	O
{	O
Ttimeflag	bool
=	O
true	int
;	O
break	O
;	O
}	O
default	O
:	O
bad_option	function
(	O
*	O
argv	pointer
)	O
;	O
}	O
;	O
}	O
if	O
(	O
FLOW	O
(	O
erroneousp	bool
)	O
)	O
cleanup	function
(	O
)	O
;	O
else	O
if	O
(	O
argc	int
<	O
1	int
)	O
PFATAL	O
(	O
"no input file"	pointer
)	O
;	O
else	O
for	O
(	O
;	O
0	int
<	O
argc	int
;	O
cleanup	function
(	O
)	O
,	O
++	O
argv	pointer
,	O
--	O
argc	int
)	O
{	O
char	O
const	O
*	O
mani_filename	pointer
,	O
*	O
pv	pointer
;	O
struct	O
fro	struct
*	O
from	pointer
;	O
struct	O
stat	struct
*	O
repo_stat	pointer
;	O
FILE	struct
*	O
frew	pointer
;	O
struct	O
delta	struct
*	O
tip	pointer
;	O
int	O
kws	int
;	O
struct	O
cbuf	struct
newdesc	struct
=	O
{	O
.	O
string	pointer
=	O
NULL	O
,	O
.	O
size	long
=	O
0	int
}	O
;	O
targetdelta	pointer
=	O
NULL	O
;	O
ffree	function
(	O
)	O
;	O
switch	O
(	O
pairnames	function
(	O
argc	int
,	O
argv	pointer
,	O
rcswriteopen	function
,	O
mustread	bool
,	O
false	int
)	O
)	O
{	O
case	O
-	O
1	int
:	O
if	O
(	O
currently_setuid_p	function
(	O
)	O
)	O
{	O
MERR	O
(	O
"setuid initial checkin prohibited; use `rcs -i -a' first"	pointer
)	O
;	O
continue	O
;	O
}	O
rcsinitflag	bool
=	O
true	int
;	O
break	O
;	O
case	O
0	int
:	O
continue	O
;	O
case	O
1	int
:	O
if	O
(	O
initflag	bool
)	O
{	O
RERR	O
(	O
"already exists"	pointer
)	O
;	O
continue	O
;	O
}	O
rcsinitflag	bool
=	O
!	O
(	O
tip	pointer
=	O
REPO	O
(	O
tip	pointer
)	O
)	O
;	O
}	O
mani_filename	pointer
=	O
MANI	O
(	O
filename	pointer
)	O
;	O
from	pointer
=	O
FLOW	O
(	O
from	pointer
)	O
;	O
repo_stat	pointer
=	O
&	O
REPO	O
(	O
stat	struct
)	O
;	O
kws	int
=	O
BE	O
(	O
kws	int
)	O
;	O
diagnose	function
(	O
"%s  <--  %s"	pointer
,	O
REPO	O
(	O
filename	pointer
)	O
,	O
mani_filename	pointer
)	O
;	O
if	O
(	O
!	O
(	O
workptr	pointer
=	O
fro_open	function
(	O
mani_filename	pointer
,	O
FOPEN_R_WORK	pointer
,	O
&	O
workstat	struct
)	O
)	O
)	O
{	O
syserror_errno	O
(	O
mani_filename	pointer
)	O
;	O
continue	O
;	O
}	O
if	O
(	O
from	pointer
)	O
{	O
if	O
(	O
SAME_INODE	O
(	O
REPO	O
(	O
stat	struct
)	O
,	O
workstat	struct
)	O
)	O
{	O
RERR	O
(	O
"RCS file is the same as working file %s."	pointer
,	O
mani_filename	pointer
)	O
;	O
continue	O
;	O
}	O
if	O
(	O
!	O
checkaccesslist	function
(	O
)	O
)	O
continue	O
;	O
}	O
krev	pointer
=	O
rev	pointer
;	O
if	O
(	O
keepflag	bool
)	O
{	O
if	O
(	O
!	O
getoldkeys	function
(	O
workptr	pointer
)	O
)	O
continue	O
;	O
if	O
(	O
!	O
rev	pointer
&&	O
!	O
(	O
krev	pointer
=	O
PREV	O
(	O
rev	pointer
)	O
)	O
)	O
{	O
MERR	O
(	O
"can't find a %s"	pointer
,	O
ks_revno	array
)	O
;	O
continue	O
;	O
}	O
if	O
(	O
!	O
PREV	O
(	O
date	pointer
)	O
&&	O
*	O
altdate	array
==	O
'\0'	O
&&	O
usestatdate	bool
==	O
false	int
)	O
MWARN	O
(	O
"can't find a date"	pointer
)	O
;	O
if	O
(	O
!	O
PREV	O
(	O
author	pointer
)	O
&&	O
!	O
author	pointer
)	O
MWARN	O
(	O
"can't find an author"	pointer
)	O
;	O
if	O
(	O
!	O
PREV	O
(	O
state	pointer
)	O
&&	O
!	O
state	pointer
)	O
MWARN	O
(	O
"can't find a state"	pointer
)	O
;	O
}	O
if	O
(	O
!	O
fully_numeric	function
(	O
&	O
newdelnum	struct
,	O
krev	pointer
,	O
workptr	pointer
)	O
)	O
continue	O
;	O
if	O
(	O
PROB	O
(	O
removedlock	bool
=	O
addelta	function
(	O
&	O
deltas	pointer
)	O
)	O
)	O
continue	O
;	O
tip	pointer
=	O
REPO	O
(	O
tip	pointer
)	O
;	O
newdelta	struct
.	O
num	pointer
=	O
newdelnum	struct
.	O
string	pointer
;	O
newdelta	struct
.	O
branches	pointer
=	O
NULL	O
;	O
newdelta	struct
.	O
lockedby	pointer
=	O
NULL	O
;	O
newdelta	struct
.	O
selector	bool
=	O
true	int
;	O
newdelta	struct
.	O
name	pointer
=	O
NULL	O
;	O
if	O
(	O
author	pointer
)	O
newdelta	struct
.	O
author	pointer
=	O
author	pointer
;	O
else	O
if	O
(	O
keepflag	bool
&&	O
(	O
pv	pointer
=	O
PREV	O
(	O
author	pointer
)	O
)	O
)	O
newdelta	struct
.	O
author	pointer
=	O
pv	pointer
;	O
else	O
newdelta	struct
.	O
author	pointer
=	O
getcaller	function
(	O
)	O
;	O
newdelta	struct
.	O
state	pointer
=	O
default_state	array
;	O
if	O
(	O
state	pointer
)	O
newdelta	struct
.	O
state	pointer
=	O
state	pointer
;	O
else	O
if	O
(	O
keepflag	bool
&&	O
(	O
pv	pointer
=	O
PREV	O
(	O
state	pointer
)	O
)	O
)	O
newdelta	struct
.	O
state	pointer
=	O
pv	pointer
;	O
if	O
(	O
usestatdate	bool
)	O
{	O
time2date	function
(	O
workstat	struct
.	O
st_mtime	O
,	O
altdate	array
)	O
;	O
}	O
if	O
(	O
*	O
altdate	array
!=	O
'\0'	O
)	O
newdelta	struct
.	O
date	pointer
=	O
altdate	array
;	O
else	O
if	O
(	O
keepflag	bool
&&	O
(	O
pv	pointer
=	O
PREV	O
(	O
date	pointer
)	O
)	O
)	O
{	O
str2date	function
(	O
pv	pointer
,	O
olddate	array
)	O
;	O
newdelta	struct
.	O
date	pointer
=	O
olddate	array
;	O
}	O
else	O
newdelta	struct
.	O
date	pointer
=	O
getcurdate	function
(	O
)	O
;	O
if	O
(	O
targetdelta	pointer
&&	O
DATE_LT	O
(	O
newdelta	struct
.	O
date	pointer
,	O
targetdelta	pointer
->	O
date	pointer
)	O
)	O
{	O
RERR	O
(	O
"Date %s precedes %s in revision %s."	pointer
,	O
date2str	function
(	O
newdelta	struct
.	O
date	pointer
,	O
newdatebuf	array
)	O
,	O
date2str	function
(	O
targetdelta	pointer
->	O
date	pointer
,	O
targetdatebuf	array
)	O
,	O
targetdelta	pointer
->	O
num	pointer
)	O
;	O
continue	O
;	O
}	O
if	O
(	O
lockflag	bool
&&	O
addlock	function
(	O
&	O
newdelta	struct
,	O
true	int
)	O
<	O
0	int
)	O
continue	O
;	O
if	O
(	O
keepflag	bool
&&	O
(	O
pv	pointer
=	O
PREV	O
(	O
name	pointer
)	O
)	O
)	O
if	O
(	O
addsymbol	function
(	O
newdelta	struct
.	O
num	pointer
,	O
pv	pointer
,	O
false	int
)	O
<	O
0	int
)	O
continue	O
;	O
if	O
(	O
!	O
addsyms	function
(	O
newdelta	struct
.	O
num	pointer
)	O
)	O
continue	O
;	O
putadmin	function
(	O
)	O
;	O
frew	pointer
=	O
FLOW	O
(	O
rewr	pointer
)	O
;	O
puttree	function
(	O
tip	pointer
,	O
frew	pointer
)	O
;	O
putdesc	function
(	O
&	O
newdesc	struct
,	O
false	int
,	O
textfile	pointer
)	O
;	O
changework	int
=	O
kws	int
<	O
MIN_UNCHANGED_EXPAND	O
;	O
dolog	bool
=	O
true	int
;	O
lockthis	bool
=	O
lockflag	bool
;	O
workdelta	pointer
=	O
&	O
newdelta	struct
;	O
if	O
(	O
rcsinitflag	bool
)	O
{	O
diagnose	function
(	O
"initial revision: %s"	pointer
,	O
newdelta	struct
.	O
num	pointer
)	O
;	O
newdelta	struct
.	O
pretty_log	struct
=	O
getlogmsg	function
(	O
)	O
;	O
putdftext	function
(	O
&	O
newdelta	struct
,	O
workptr	pointer
,	O
frew	pointer
,	O
false	int
)	O
;	O
repo_stat	pointer
->	O
st_mode	int
=	O
workstat	struct
.	O
st_mode	int
;	O
repo_stat	pointer
->	O
st_nlink	long
=	O
0	int
;	O
changedRCS	int
=	O
true	int
;	O
if	O
(	O
from	pointer
)	O
IGNORE_REST	O
(	O
from	pointer
)	O
;	O
}	O
else	O
{	O
diffname	pointer
=	O
maketemp	function
(	O
0	int
)	O
;	O
newhead	bool
=	O
tip	pointer
==	O
&	O
newdelta	struct
;	O
if	O
(	O
!	O
newhead	bool
)	O
FLOW	O
(	O
to	pointer
)	O
=	O
frew	pointer
;	O
expname	pointer
=	O
buildrevision	function
(	O
deltas	pointer
,	O
targetdelta	pointer
,	O
NULL	O
,	O
false	int
)	O
;	O
if	O
(	O
!	O
forceciflag	bool
&&	O
STR_SAME	O
(	O
newdelta	struct
.	O
state	pointer
,	O
targetdelta	pointer
->	O
state	pointer
)	O
&&	O
(	O
(	O
changework	int
=	O
rcsfcmp	function
(	O
workptr	pointer
,	O
&	O
workstat	struct
,	O
expname	pointer
,	O
targetdelta	pointer
)	O
)	O
<=	O
0	int
)	O
)	O
{	O
diagnose	function
(	O
"file is unchanged; reverting to previous revision %s"	pointer
,	O
targetdelta	pointer
->	O
num	pointer
)	O
;	O
if	O
(	O
removedlock	bool
<	O
lockflag	bool
)	O
{	O
diagnose	function
(	O
"previous revision was not locked; ignoring -l option"	pointer
)	O
;	O
lockthis	bool
=	O
0	int
;	O
}	O
dolog	bool
=	O
false	int
;	O
if	O
(	O
!	O
(	O
changedRCS	int
=	O
lockflag	bool
<	O
removedlock	bool
||	O
assoclst	struct
.	O
next	pointer
)	O
)	O
{	O
workdelta	pointer
=	O
targetdelta	pointer
;	O
SAME_AFTER	O
(	O
from	pointer
,	O
targetdelta	pointer
->	O
text	pointer
)	O
;	O
}	O
else	O
{	O
off_t	long
hwm	long
=	O
ftello	function
(	O
frew	pointer
)	O
;	O
bool	bool
bad_truncate	bool
;	O
rewind	function
(	O
frew	pointer
)	O
;	O
bad_truncate	bool
=	O
PROB	O
(	O
ftruncate	function
(	O
fileno	function
(	O
frew	pointer
)	O
,	O
(	O
off_t	long
)	O
0	int
)	O
)	O
;	O
grok_resynch	function
(	O
REPO	O
(	O
r	pointer
)	O
)	O
;	O
prune	function
(	O
&	O
newdelta	struct
,	O
targetdelta	pointer
)	O
;	O
if	O
(	O
!	O
(	O
workdelta	pointer
=	O
gr_revno	function
(	O
targetdelta	pointer
->	O
num	pointer
,	O
&	O
deltas	pointer
)	O
)	O
)	O
continue	O
;	O
workdelta	pointer
->	O
pretty_log	struct
=	O
targetdelta	pointer
->	O
pretty_log	struct
;	O
if	O
(	O
newdelta	struct
.	O
state	pointer
!=	O
default_state	array
)	O
workdelta	pointer
->	O
state	pointer
=	O
newdelta	struct
.	O
state	pointer
;	O
if	O
(	O
lockthis	bool
<	O
removedlock	bool
&&	O
removelock	function
(	O
workdelta	pointer
)	O
<	O
0	int
)	O
continue	O
;	O
if	O
(	O
!	O
addsyms	function
(	O
workdelta	pointer
->	O
num	pointer
)	O
)	O
continue	O
;	O
if	O
(	O
PROB	O
(	O
dorewrite	function
(	O
true	int
,	O
true	int
)	O
)	O
)	O
continue	O
;	O
VERBATIM	O
(	O
from	pointer
,	O
GROK	O
(	O
neck	long
)	O
)	O
;	O
fro_spew	function
(	O
from	pointer
,	O
frew	pointer
)	O
;	O
if	O
(	O
bad_truncate	bool
)	O
while	O
(	O
ftello	function
(	O
frew	pointer
)	O
<	O
hwm	long
)	O
afputc	function
(	O
'\n'	O
,	O
frew	pointer
)	O
;	O
}	O
}	O
else	O
{	O
int	O
wfd	int
=	O
workptr	pointer
->	O
fd	int
;	O
struct	O
stat	struct
checkworkstat	struct
;	O
char	O
const	O
*	O
diffv	array
[	O
6	int
+	O
!	O
!	O
OPEN_O_BINARY	int
]	O
,	O
*	O
*	O
diffp	pointer
;	O
diagnose	function
(	O
"new revision: %s; previous revision: %s"	pointer
,	O
newdelta	struct
.	O
num	pointer
,	O
targetdelta	pointer
->	O
num	pointer
)	O
;	O
SAME_AFTER	O
(	O
from	pointer
,	O
targetdelta	pointer
->	O
text	pointer
)	O
;	O
newdelta	struct
.	O
pretty_log	struct
=	O
getlogmsg	function
(	O
)	O
;	O
fro_bob	O
(	O
workptr	pointer
)	O
;	O
if	O
(	O
PROB	O
(	O
lseek	function
(	O
wfd	int
,	O
0	int
,	O
SEEK_SET	int
)	O
)	O
)	O
Ierror	function
(	O
)	O
;	O
diffp	pointer
=	O
diffv	array
;	O
*	O
++	O
diffp	pointer
=	O
prog_diff	array
;	O
*	O
++	O
diffp	pointer
=	O
diff_flags	array
;	O
*	O
++	O
diffp	pointer
=	O
newhead	bool
?	O
"-"	pointer
:	O
expname	pointer
;	O
*	O
++	O
diffp	pointer
=	O
newhead	bool
?	O
expname	pointer
:	O
"-"	pointer
;	O
*	O
++	O
diffp	pointer
=	O
NULL	O
;	O
if	O
(	O
DIFF_TROUBLE	int
==	O
runv	function
(	O
wfd	int
,	O
diffname	pointer
,	O
diffv	array
)	O
)	O
RFATAL	O
(	O
"diff failed"	pointer
)	O
;	O
if	O
(	O
newhead	bool
)	O
{	O
fro_bob	O
(	O
workptr	pointer
)	O
;	O
putdftext	function
(	O
&	O
newdelta	struct
,	O
workptr	pointer
,	O
frew	pointer
,	O
false	int
)	O
;	O
if	O
(	O
!	O
putdtext	function
(	O
targetdelta	pointer
,	O
diffname	pointer
,	O
frew	pointer
,	O
true	int
)	O
)	O
continue	O
;	O
}	O
else	O
if	O
(	O
!	O
putdtext	function
(	O
&	O
newdelta	struct
,	O
diffname	pointer
,	O
frew	pointer
,	O
true	int
)	O
)	O
continue	O
;	O
if	O
(	O
PROB	O
(	O
fstat	function
(	O
wfd	int
,	O
&	O
checkworkstat	struct
)	O
)	O
||	O
workstat	struct
.	O
st_mtime	O
!=	O
checkworkstat	struct
.	O
st_mtime	O
||	O
workstat	struct
.	O
st_size	long
!=	O
checkworkstat	struct
.	O
st_size	long
)	O
{	O
MERR	O
(	O
"file changed during checkin"	pointer
)	O
;	O
continue	O
;	O
}	O
changedRCS	int
=	O
true	int
;	O
}	O
}	O
wtime	long
=	O
(	O
time_t	long
)	O
-	O
1	int
;	O
if	O
(	O
mtimeflag	bool
|	O
Ttimeflag	bool
)	O
wtime	long
=	O
date2time	function
(	O
workdelta	pointer
->	O
date	pointer
)	O
;	O
if	O
(	O
PROB	O
(	O
donerewrite	function
(	O
changedRCS	int
,	O
!	O
Ttimeflag	bool
?	O
(	O
time_t	long
)	O
-	O
1	int
:	O
from	pointer
&&	O
wtime	long
<	O
(	O
repo_stat	pointer
->	O
st_mtime	O
?	O
repo_stat	pointer
->	O
st_mtime	O
:	O
wtime	long
)	O
)	O
)	O
)	O
continue	O
;	O
if	O
(	O
!	O
keepworkingfile	bool
)	O
{	O
fro_zclose	function
(	O
&	O
workptr	pointer
)	O
;	O
r	pointer
=	O
un_link	function
(	O
mani_filename	pointer
)	O
;	O
}	O
else	O
{	O
newworkmode	int
=	O
WORKMODE	O
(	O
repo_stat	pointer
->	O
st_mode	int
,	O
!	O
(	O
kws	int
==	O
kwsub_v	int
||	O
lockthis	bool
<	O
BE	O
(	O
strictly_locking	bool
)	O
)	O
)	O
;	O
mtime	long
=	O
mtimeflag	bool
?	O
wtime	long
:	O
(	O
time_t	long
)	O
-	O
1	int
;	O
if	O
(	O
changework	int
||	O
PROB	O
(	O
r	pointer
=	O
fixwork	function
(	O
newworkmode	int
,	O
mtime	long
)	O
)	O
)	O
{	O
fro_bob	O
(	O
workptr	pointer
)	O
;	O
BE	O
(	O
inclusive_of_Locker_in_Id_val	bool
)	O
=	O
lockthis	bool
;	O
workdelta	pointer
->	O
name	pointer
=	O
namedrev	function
(	O
assoclst	struct
.	O
next	pointer
?	O
first_meaningful_symbolic_name	function
(	O
)	O
:	O
(	O
keepflag	bool
&&	O
(	O
pv	pointer
=	O
PREV	O
(	O
name	pointer
)	O
)	O
?	O
pv	pointer
:	O
rev	pointer
)	O
,	O
workdelta	pointer
)	O
;	O
switch	O
(	O
xpandfile	function
(	O
workptr	pointer
,	O
workdelta	pointer
,	O
&	O
newworkname	pointer
,	O
dolog	bool
)	O
)	O
{	O
default	O
:	O
continue	O
;	O
case	O
0	int
:	O
if	O
(	O
changework	int
)	O
if	O
(	O
(	O
r	pointer
=	O
fixwork	function
(	O
newworkmode	int
,	O
mtime	long
)	O
)	O
==	O
0	int
)	O
break	O
;	O
case	O
1	int
:	O
fro_zclose	function
(	O
&	O
workptr	pointer
)	O
;	O
aflush	function
(	O
exfile	pointer
)	O
;	O
IGNOREINTS	O
(	O
)	O
;	O
r	pointer
=	O
chnamemod	function
(	O
&	O
exfile	pointer
,	O
newworkname	pointer
,	O
mani_filename	pointer
,	O
1	int
,	O
newworkmode	int
,	O
mtime	long
)	O
;	O
keepdirtemp	function
(	O
newworkname	pointer
)	O
;	O
RESTOREINTS	O
(	O
)	O
;	O
}	O
}	O
}	O
if	O
(	O
PROB	O
(	O
r	pointer
)	O
)	O
{	O
syserror_errno	O
(	O
mani_filename	pointer
)	O
;	O
continue	O
;	O
}	O
diagnose	function
(	O
"done"	pointer
)	O
;	O
}	O
tempunlink	function
(	O
)	O
;	O
gnurcs_goodbye	function
(	O
)	O
;	O
return	O
exitstatus	int
;	O
}	O
