static	O
const	O
char	O
rcsid	array
[	O
]	O
=	O
"$Id: fcgiapp.c,v 1.1.1.1 1998/11/07 21:16:23 bfox Exp $"	pointer
;	O
static	O
int	O
osLibInitialized	int
=	O
0	int
;	O
static	O
void	O
*	O
Malloc	function
(	O
size_t	long
size	long
)	O
{	O
void	O
*	O
result	pointer
=	O
malloc	function
(	O
size	long
)	O
;	O
ASSERT	function
(	O
size	long
==	O
0	int
||	O
result	pointer
!=	O
NULL	O
)	O
;	O
return	O
result	pointer
;	O
}	O
static	O
char	O
*	O
StringCopy	function
(	O
char	O
*	O
str	pointer
)	O
{	O
int	O
strLen	int
=	O
strlen	function
(	O
str	pointer
)	O
;	O
char	O
*	O
newString	pointer
=	O
Malloc	function
(	O
strLen	int
+	O
1	int
)	O
;	O
memcpy	function
(	O
newString	pointer
,	O
str	pointer
,	O
strLen	int
)	O
;	O
newString	pointer
[	O
strLen	int
]	O
=	O
'\000'	O
;	O
return	O
newString	pointer
;	O
}	O
int	O
FCGX_GetChar	function
(	O
FCGX_Stream	O
*	O
stream	pointer
)	O
{	O
if	O
(	O
stream	pointer
->	O
rdNext	O
!=	O
stream	pointer
->	O
stop	O
)	O
return	O
*	O
stream	pointer
->	O
rdNext	O
++	O
;	O
if	O
(	O
stream	pointer
->	O
isClosed	O
||	O
!	O
stream	pointer
->	O
isReader	int
)	O
return	O
EOF	O
;	O
stream	pointer
->	O
fillBuffProc	O
(	O
stream	pointer
)	O
;	O
stream	pointer
->	O
stopUnget	O
=	O
stream	pointer
->	O
rdNext	O
;	O
if	O
(	O
stream	pointer
->	O
rdNext	O
!=	O
stream	pointer
->	O
stop	O
)	O
return	O
*	O
stream	pointer
->	O
rdNext	O
++	O
;	O
ASSERT	function
(	O
stream	pointer
->	O
isClosed	O
)	O
;	O
return	O
EOF	O
;	O
}	O
int	O
FCGX_GetStr	function
(	O
char	O
*	O
str	pointer
,	O
int	O
n	int
,	O
FCGX_Stream	O
*	O
stream	pointer
)	O
{	O
int	O
m	int
,	O
bytesMoved	int
;	O
if	O
(	O
n	int
<=	O
0	int
)	O
{	O
return	O
0	int
;	O
}	O
if	O
(	O
n	int
<=	O
(	O
stream	pointer
->	O
stop	O
-	O
stream	pointer
->	O
rdNext	O
)	O
)	O
{	O
memcpy	function
(	O
str	pointer
,	O
stream	pointer
->	O
rdNext	O
,	O
n	int
)	O
;	O
stream	pointer
->	O
rdNext	O
+=	O
n	int
;	O
return	O
n	int
;	O
}	O
bytesMoved	int
=	O
0	int
;	O
for	O
(	O
;	O
;	O
)	O
{	O
if	O
(	O
stream	pointer
->	O
rdNext	O
!=	O
stream	pointer
->	O
stop	O
)	O
{	O
m	int
=	O
min	function
(	O
n	int
-	O
bytesMoved	int
,	O
stream	pointer
->	O
stop	O
-	O
stream	pointer
->	O
rdNext	O
)	O
;	O
memcpy	function
(	O
str	pointer
,	O
stream	pointer
->	O
rdNext	O
,	O
m	int
)	O
;	O
bytesMoved	int
+=	O
m	int
;	O
stream	pointer
->	O
rdNext	O
+=	O
m	int
;	O
if	O
(	O
bytesMoved	int
==	O
n	int
)	O
return	O
bytesMoved	int
;	O
str	pointer
+=	O
m	int
;	O
}	O
if	O
(	O
stream	pointer
->	O
isClosed	O
||	O
!	O
stream	pointer
->	O
isReader	int
)	O
return	O
bytesMoved	int
;	O
stream	pointer
->	O
fillBuffProc	O
(	O
stream	pointer
)	O
;	O
stream	pointer
->	O
stopUnget	O
=	O
stream	pointer
->	O
rdNext	O
;	O
}	O
}	O
char	O
*	O
FCGX_GetLine	function
(	O
char	O
*	O
str	pointer
,	O
int	O
n	int
,	O
FCGX_Stream	O
*	O
stream	pointer
)	O
{	O
int	O
c	int
;	O
char	O
*	O
p	pointer
=	O
str	pointer
;	O
n	int
--	O
;	O
while	O
(	O
n	int
>	O
0	int
)	O
{	O
c	int
=	O
FCGX_GetChar	function
(	O
stream	pointer
)	O
;	O
if	O
(	O
c	int
==	O
EOF	O
)	O
{	O
if	O
(	O
p	pointer
==	O
str	pointer
)	O
return	O
NULL	O
;	O
else	O
break	O
;	O
}	O
*	O
p	pointer
++	O
=	O
c	int
;	O
n	int
--	O
;	O
if	O
(	O
c	int
==	O
'\n'	O
)	O
break	O
;	O
}	O
*	O
p	pointer
=	O
'\0'	O
;	O
return	O
str	pointer
;	O
}	O
int	O
FCGX_UnGetChar	function
(	O
int	O
c	int
,	O
FCGX_Stream	O
*	O
stream	pointer
)	O
{	O
if	O
(	O
c	int
==	O
EOF	O
||	O
stream	pointer
->	O
isClosed	O
||	O
!	O
stream	pointer
->	O
isReader	int
||	O
stream	pointer
->	O
rdNext	O
==	O
stream	pointer
->	O
stopUnget	O
)	O
return	O
EOF	O
;	O
--	O
(	O
stream	pointer
->	O
rdNext	O
)	O
;	O
*	O
stream	pointer
->	O
rdNext	O
=	O
c	int
;	O
return	O
c	int
;	O
}	O
int	O
FCGX_HasSeenEOF	function
(	O
FCGX_Stream	O
*	O
stream	pointer
)	O
{	O
return	O
(	O
stream	pointer
->	O
isClosed	O
)	O
?	O
EOF	O
:	O
0	int
;	O
}	O
int	O
FCGX_PutChar	function
(	O
int	O
c	int
,	O
FCGX_Stream	O
*	O
stream	pointer
)	O
{	O
if	O
(	O
stream	pointer
->	O
wrNext	O
!=	O
stream	pointer
->	O
stop	O
)	O
return	O
(	O
*	O
stream	pointer
->	O
wrNext	O
++	O
=	O
c	int
)	O
;	O
if	O
(	O
stream	pointer
->	O
isClosed	O
||	O
stream	pointer
->	O
isReader	int
)	O
return	O
EOF	O
;	O
stream	pointer
->	O
emptyBuffProc	O
(	O
stream	pointer
,	O
FALSE	O
)	O
;	O
if	O
(	O
stream	pointer
->	O
wrNext	O
!=	O
stream	pointer
->	O
stop	O
)	O
return	O
(	O
*	O
stream	pointer
->	O
wrNext	O
++	O
=	O
c	int
)	O
;	O
ASSERT	function
(	O
stream	pointer
->	O
isClosed	O
)	O
;	O
return	O
EOF	O
;	O
}	O
int	O
FCGX_PutStr	function
(	O
const	O
char	O
*	O
str	pointer
,	O
int	O
n	int
,	O
FCGX_Stream	O
*	O
stream	pointer
)	O
{	O
int	O
m	int
,	O
bytesMoved	int
;	O
if	O
(	O
n	int
<=	O
(	O
stream	pointer
->	O
stop	O
-	O
stream	pointer
->	O
wrNext	O
)	O
)	O
{	O
memcpy	function
(	O
stream	pointer
->	O
wrNext	O
,	O
str	pointer
,	O
n	int
)	O
;	O
stream	pointer
->	O
wrNext	O
+=	O
n	int
;	O
return	O
n	int
;	O
}	O
bytesMoved	int
=	O
0	int
;	O
for	O
(	O
;	O
;	O
)	O
{	O
if	O
(	O
stream	pointer
->	O
wrNext	O
!=	O
stream	pointer
->	O
stop	O
)	O
{	O
m	int
=	O
min	function
(	O
n	int
-	O
bytesMoved	int
,	O
stream	pointer
->	O
stop	O
-	O
stream	pointer
->	O
wrNext	O
)	O
;	O
memcpy	function
(	O
stream	pointer
->	O
wrNext	O
,	O
str	pointer
,	O
m	int
)	O
;	O
bytesMoved	int
+=	O
m	int
;	O
stream	pointer
->	O
wrNext	O
+=	O
m	int
;	O
if	O
(	O
bytesMoved	int
==	O
n	int
)	O
return	O
bytesMoved	int
;	O
str	pointer
+=	O
m	int
;	O
}	O
if	O
(	O
stream	pointer
->	O
isClosed	O
||	O
stream	pointer
->	O
isReader	int
)	O
return	O
-	O
1	int
;	O
stream	pointer
->	O
emptyBuffProc	O
(	O
stream	pointer
,	O
FALSE	O
)	O
;	O
}	O
}	O
int	O
FCGX_PutS	function
(	O
const	O
char	O
*	O
str	pointer
,	O
FCGX_Stream	O
*	O
stream	pointer
)	O
{	O
return	O
FCGX_PutStr	function
(	O
str	pointer
,	O
strlen	function
(	O
str	pointer
)	O
,	O
stream	pointer
)	O
;	O
}	O
int	O
FCGX_FPrintF	function
(	O
FCGX_Stream	O
*	O
stream	pointer
,	O
const	O
char	O
*	O
format	pointer
,	O
...	O
)	O
{	O
int	O
result	pointer
;	O
va_list	array
ap	array
;	O
va_start	O
(	O
ap	array
,	O
format	pointer
)	O
;	O
result	pointer
=	O
FCGX_VFPrintF	function
(	O
stream	pointer
,	O
format	pointer
,	O
ap	array
)	O
;	O
va_end	O
(	O
ap	array
)	O
;	O
return	O
result	pointer
;	O
}	O
static	O
void	O
CopyAndAdvance	function
(	O
char	O
*	O
*	O
destPtr	pointer
,	O
char	O
*	O
*	O
srcPtr	pointer
,	O
int	O
n	int
)	O
;	O
int	O
FCGX_VFPrintF	function
(	O
FCGX_Stream	O
*	O
stream	pointer
,	O
const	O
char	O
*	O
format	pointer
,	O
va_list	array
arg	array
)	O
{	O
char	O
*	O
f	pointer
,	O
*	O
fStop	pointer
,	O
*	O
percentPtr	pointer
,	O
*	O
p	pointer
,	O
*	O
fmtBuffPtr	pointer
,	O
*	O
buffPtr	pointer
;	O
int	O
op	int
,	O
performedOp	int
,	O
sizeModifier	int
,	O
buffCount	int
,	O
buffLen	int
,	O
specifierLength	int
;	O
int	O
fastPath	int
,	O
n	int
,	O
auxBuffLen	int
,	O
buffReqd	int
,	O
minWidth	int
,	O
precision	int
,	O
exp	int
;	O
char	O
*	O
auxBuffPtr	pointer
=	O
NULL	O
;	O
int	O
streamCount	int
=	O
0	int
;	O
char	O
fmtBuff	array
[	O
FMT_BUFFLEN	int
]	O
;	O
char	O
buff	array
[	O
PRINTF_BUFFLEN	int
]	O
;	O
int	O
intArg	int
;	O
short	O
shortArg	short
;	O
long	O
longArg	long
;	O
unsigned	O
unsignedArg	int
;	O
unsigned	O
long	O
uLongArg	long
;	O
unsigned	O
short	O
uShortArg	short
;	O
char	O
*	O
charPtrArg	pointer
;	O
void	O
*	O
voidPtrArg	pointer
;	O
int	O
*	O
intPtrArg	pointer
;	O
long	O
*	O
longPtrArg	pointer
;	O
short	O
*	O
shortPtrArg	pointer
;	O
double	O
doubleArg	double
;	O
LONG_DOUBLE	O
lDoubleArg	long double
;	O
fmtBuff	array
[	O
0	int
]	O
=	O
'%'	O
;	O
f	pointer
=	O
(	O
char	O
*	O
)	O
format	pointer
;	O
fStop	pointer
=	O
f	pointer
+	O
strlen	function
(	O
f	pointer
)	O
;	O
while	O
(	O
f	pointer
!=	O
fStop	pointer
)	O
{	O
percentPtr	pointer
=	O
memchr	function
(	O
f	pointer
,	O
'%'	O
,	O
fStop	pointer
-	O
f	pointer
)	O
;	O
if	O
(	O
percentPtr	pointer
==	O
NULL	O
)	O
percentPtr	pointer
=	O
fStop	pointer
;	O
if	O
(	O
percentPtr	pointer
!=	O
f	pointer
)	O
{	O
if	O
(	O
FCGX_PutStr	function
(	O
f	pointer
,	O
percentPtr	pointer
-	O
f	pointer
,	O
stream	pointer
)	O
<	O
0	int
)	O
goto	O
ErrorReturn	O
;	O
streamCount	int
+=	O
percentPtr	pointer
-	O
f	pointer
;	O
f	pointer
=	O
percentPtr	pointer
;	O
if	O
(	O
f	pointer
==	O
fStop	pointer
)	O
break	O
;	O
}	O
fastPath	int
=	O
TRUE	O
;	O
for	O
(	O
;	O
;	O
)	O
{	O
if	O
(	O
fastPath	int
)	O
{	O
op	int
=	O
*	O
(	O
percentPtr	pointer
+	O
1	int
)	O
;	O
switch	O
(	O
op	int
)	O
{	O
case	O
'l'	O
:	O
case	O
'L'	O
:	O
case	O
'h'	O
:	O
sizeModifier	int
=	O
op	int
;	O
op	int
=	O
*	O
(	O
percentPtr	pointer
+	O
2	int
)	O
;	O
fmtBuff	array
[	O
1	int
]	O
=	O
sizeModifier	int
;	O
fmtBuff	array
[	O
2	int
]	O
=	O
op	int
;	O
fmtBuff	array
[	O
3	int
]	O
=	O
'\0'	O
;	O
specifierLength	int
=	O
3	int
;	O
break	O
;	O
default	O
:	O
sizeModifier	int
=	O
' '	O
;	O
fmtBuff	array
[	O
1	int
]	O
=	O
op	int
;	O
fmtBuff	array
[	O
2	int
]	O
=	O
'\0'	O
;	O
specifierLength	int
=	O
2	int
;	O
break	O
;	O
}	O
buffPtr	pointer
=	O
buff	array
;	O
buffLen	int
=	O
PRINTF_BUFFLEN	int
;	O
}	O
else	O
{	O
p	pointer
=	O
percentPtr	pointer
+	O
1	int
;	O
fmtBuffPtr	pointer
=	O
&	O
fmtBuff	array
[	O
1	int
]	O
;	O
n	int
=	O
strspn	function
(	O
p	pointer
,	O
"-0+ #"	pointer
)	O
;	O
if	O
(	O
n	int
>	O
5	int
)	O
goto	O
ErrorReturn	O
;	O
CopyAndAdvance	function
(	O
&	O
fmtBuffPtr	pointer
,	O
&	O
p	pointer
,	O
n	int
)	O
;	O
n	int
=	O
strspn	function
(	O
p	pointer
,	O
"0123456789"	pointer
)	O
;	O
if	O
(	O
n	int
==	O
0	int
)	O
{	O
if	O
(	O
*	O
p	pointer
==	O
'*'	O
)	O
{	O
minWidth	int
=	O
va_arg	O
(	O
arg	array
,	O
int	O
)	O
;	O
if	O
(	O
abs	function
(	O
minWidth	int
)	O
>	O
999999	int
)	O
goto	O
ErrorReturn	O
;	O
sprintf	function
(	O
fmtBuffPtr	pointer
,	O
"%d"	pointer
,	O
minWidth	int
)	O
;	O
fmtBuffPtr	pointer
+=	O
strlen	function
(	O
fmtBuffPtr	pointer
)	O
;	O
p	pointer
++	O
;	O
}	O
else	O
{	O
minWidth	int
=	O
0	int
;	O
}	O
}	O
else	O
if	O
(	O
n	int
<=	O
6	int
)	O
{	O
minWidth	int
=	O
strtol	function
(	O
p	pointer
,	O
NULL	O
,	O
10	int
)	O
;	O
CopyAndAdvance	function
(	O
&	O
fmtBuffPtr	pointer
,	O
&	O
p	pointer
,	O
n	int
)	O
;	O
}	O
else	O
{	O
goto	O
ErrorReturn	O
;	O
}	O
if	O
(	O
*	O
p	pointer
==	O
'.'	O
)	O
{	O
CopyAndAdvance	function
(	O
&	O
fmtBuffPtr	pointer
,	O
&	O
p	pointer
,	O
1	int
)	O
;	O
n	int
=	O
strspn	function
(	O
p	pointer
,	O
"0123456789"	pointer
)	O
;	O
if	O
(	O
n	int
==	O
0	int
)	O
{	O
if	O
(	O
*	O
p	pointer
==	O
'*'	O
)	O
{	O
precision	int
=	O
va_arg	O
(	O
arg	array
,	O
int	O
)	O
;	O
if	O
(	O
precision	int
<	O
0	int
)	O
precision	int
=	O
0	int
;	O
if	O
(	O
precision	int
>	O
999999	int
)	O
goto	O
ErrorReturn	O
;	O
sprintf	function
(	O
fmtBuffPtr	pointer
,	O
"%d"	pointer
,	O
precision	int
)	O
;	O
fmtBuffPtr	pointer
+=	O
strlen	function
(	O
fmtBuffPtr	pointer
)	O
;	O
p	pointer
++	O
;	O
}	O
else	O
{	O
precision	int
=	O
0	int
;	O
}	O
}	O
else	O
if	O
(	O
n	int
<=	O
6	int
)	O
{	O
precision	int
=	O
strtol	function
(	O
p	pointer
,	O
NULL	O
,	O
10	int
)	O
;	O
CopyAndAdvance	function
(	O
&	O
fmtBuffPtr	pointer
,	O
&	O
p	pointer
,	O
n	int
)	O
;	O
}	O
else	O
{	O
goto	O
ErrorReturn	O
;	O
}	O
}	O
else	O
{	O
precision	int
=	O
-	O
1	int
;	O
}	O
switch	O
(	O
*	O
p	pointer
)	O
{	O
case	O
'l'	O
:	O
case	O
'L'	O
:	O
case	O
'h'	O
:	O
sizeModifier	int
=	O
*	O
p	pointer
;	O
CopyAndAdvance	function
(	O
&	O
fmtBuffPtr	pointer
,	O
&	O
p	pointer
,	O
1	int
)	O
;	O
break	O
;	O
default	O
:	O
sizeModifier	int
=	O
' '	O
;	O
break	O
;	O
}	O
op	int
=	O
*	O
p	pointer
;	O
CopyAndAdvance	function
(	O
&	O
fmtBuffPtr	pointer
,	O
&	O
p	pointer
,	O
1	int
)	O
;	O
ASSERT	function
(	O
fmtBuffPtr	pointer
-	O
fmtBuff	array
<	O
FMT_BUFFLEN	int
)	O
;	O
*	O
fmtBuffPtr	pointer
=	O
'\0'	O
;	O
specifierLength	int
=	O
p	pointer
-	O
percentPtr	pointer
;	O
switch	O
(	O
op	int
)	O
{	O
case	O
'd'	O
:	O
case	O
'i'	O
:	O
case	O
'u'	O
:	O
case	O
'o'	O
:	O
case	O
'x'	O
:	O
case	O
'X'	O
:	O
case	O
'c'	O
:	O
case	O
'p'	O
:	O
buffReqd	int
=	O
max	function
(	O
precision	int
,	O
46	int
)	O
;	O
break	O
;	O
case	O
's'	O
:	O
charPtrArg	pointer
=	O
va_arg	O
(	O
arg	array
,	O
char	O
*	O
)	O
;	O
if	O
(	O
precision	int
==	O
-	O
1	int
)	O
{	O
buffReqd	int
=	O
strlen	function
(	O
charPtrArg	pointer
)	O
;	O
}	O
else	O
{	O
p	pointer
=	O
memchr	function
(	O
charPtrArg	pointer
,	O
'\0'	O
,	O
precision	int
)	O
;	O
buffReqd	int
=	O
(	O
p	pointer
==	O
NULL	O
)	O
?	O
precision	int
:	O
p	pointer
-	O
charPtrArg	pointer
;	O
}	O
break	O
;	O
case	O
'f'	O
:	O
switch	O
(	O
sizeModifier	int
)	O
{	O
case	O
' '	O
:	O
doubleArg	double
=	O
va_arg	O
(	O
arg	array
,	O
double	O
)	O
;	O
frexp	O
(	O
doubleArg	double
,	O
&	O
exp	int
)	O
;	O
break	O
;	O
case	O
'L'	O
:	O
lDoubleArg	long double
=	O
va_arg	O
(	O
arg	array
,	O
LONG_DOUBLE	O
)	O
;	O
frexp	O
(	O
lDoubleArg	long double
,	O
&	O
exp	int
)	O
;	O
break	O
;	O
default	O
:	O
goto	O
ErrorReturn	O
;	O
}	O
if	O
(	O
precision	int
==	O
-	O
1	int
)	O
precision	int
=	O
6	int
;	O
buffReqd	int
=	O
precision	int
+	O
3	int
+	O
(	O
(	O
exp	int
>	O
0	int
)	O
?	O
exp	int
/	O
3	int
:	O
0	int
)	O
;	O
break	O
;	O
case	O
'e'	O
:	O
case	O
'E'	O
:	O
case	O
'g'	O
:	O
case	O
'G'	O
:	O
if	O
(	O
precision	int
==	O
-	O
1	int
)	O
precision	int
=	O
6	int
;	O
buffReqd	int
=	O
precision	int
+	O
8	int
;	O
break	O
;	O
case	O
'n'	O
:	O
case	O
'%'	O
:	O
default	O
:	O
goto	O
ErrorReturn	O
;	O
break	O
;	O
}	O
buffReqd	int
=	O
max	function
(	O
buffReqd	int
+	O
10	int
,	O
minWidth	int
)	O
;	O
if	O
(	O
buffReqd	int
<=	O
PRINTF_BUFFLEN	int
)	O
{	O
buffPtr	pointer
=	O
buff	array
;	O
buffLen	int
=	O
PRINTF_BUFFLEN	int
;	O
}	O
else	O
{	O
if	O
(	O
auxBuffPtr	pointer
==	O
NULL	O
||	O
buffReqd	int
>	O
auxBuffLen	int
)	O
{	O
if	O
(	O
auxBuffPtr	pointer
!=	O
NULL	O
)	O
free	function
(	O
auxBuffPtr	pointer
)	O
;	O
auxBuffPtr	pointer
=	O
Malloc	function
(	O
buffReqd	int
)	O
;	O
auxBuffLen	int
=	O
buffReqd	int
;	O
if	O
(	O
auxBuffPtr	pointer
==	O
NULL	O
)	O
goto	O
ErrorReturn	O
;	O
}	O
buffPtr	pointer
=	O
auxBuffPtr	pointer
;	O
buffLen	int
=	O
auxBuffLen	int
;	O
}	O
}	O
performedOp	int
=	O
TRUE	O
;	O
switch	O
(	O
op	int
)	O
{	O
case	O
'd'	O
:	O
case	O
'i'	O
:	O
switch	O
(	O
sizeModifier	int
)	O
{	O
case	O
' '	O
:	O
intArg	int
=	O
va_arg	O
(	O
arg	array
,	O
int	O
)	O
;	O
sprintf	function
(	O
buffPtr	pointer
,	O
fmtBuff	array
,	O
intArg	int
)	O
;	O
buffCount	int
=	O
strlen	function
(	O
buffPtr	pointer
)	O
;	O
break	O
;	O
case	O
'l'	O
:	O
longArg	long
=	O
va_arg	O
(	O
arg	array
,	O
long	O
)	O
;	O
sprintf	function
(	O
buffPtr	pointer
,	O
fmtBuff	array
,	O
longArg	long
)	O
;	O
buffCount	int
=	O
strlen	function
(	O
buffPtr	pointer
)	O
;	O
break	O
;	O
case	O
'h'	O
:	O
shortArg	short
=	O
va_arg	O
(	O
arg	array
,	O
short	O
)	O
;	O
sprintf	function
(	O
buffPtr	pointer
,	O
fmtBuff	array
,	O
shortArg	short
)	O
;	O
buffCount	int
=	O
strlen	function
(	O
buffPtr	pointer
)	O
;	O
break	O
;	O
default	O
:	O
goto	O
ErrorReturn	O
;	O
}	O
break	O
;	O
case	O
'u'	O
:	O
case	O
'o'	O
:	O
case	O
'x'	O
:	O
case	O
'X'	O
:	O
switch	O
(	O
sizeModifier	int
)	O
{	O
case	O
' '	O
:	O
unsignedArg	int
=	O
va_arg	O
(	O
arg	array
,	O
unsigned	O
)	O
;	O
sprintf	function
(	O
buffPtr	pointer
,	O
fmtBuff	array
,	O
unsignedArg	int
)	O
;	O
buffCount	int
=	O
strlen	function
(	O
buffPtr	pointer
)	O
;	O
break	O
;	O
case	O
'l'	O
:	O
uLongArg	long
=	O
va_arg	O
(	O
arg	array
,	O
unsigned	O
long	O
)	O
;	O
sprintf	function
(	O
buffPtr	pointer
,	O
fmtBuff	array
,	O
uLongArg	long
)	O
;	O
buffCount	int
=	O
strlen	function
(	O
buffPtr	pointer
)	O
;	O
break	O
;	O
case	O
'h'	O
:	O
uShortArg	short
=	O
va_arg	O
(	O
arg	array
,	O
unsigned	O
short	O
)	O
;	O
sprintf	function
(	O
buffPtr	pointer
,	O
fmtBuff	array
,	O
uShortArg	short
)	O
;	O
buffCount	int
=	O
strlen	function
(	O
buffPtr	pointer
)	O
;	O
break	O
;	O
default	O
:	O
goto	O
ErrorReturn	O
;	O
}	O
break	O
;	O
case	O
'c'	O
:	O
switch	O
(	O
sizeModifier	int
)	O
{	O
case	O
' '	O
:	O
intArg	int
=	O
va_arg	O
(	O
arg	array
,	O
int	O
)	O
;	O
sprintf	function
(	O
buffPtr	pointer
,	O
fmtBuff	array
,	O
intArg	int
)	O
;	O
buffCount	int
=	O
strlen	function
(	O
buffPtr	pointer
)	O
;	O
break	O
;	O
case	O
'l'	O
:	O
goto	O
ErrorReturn	O
;	O
default	O
:	O
goto	O
ErrorReturn	O
;	O
}	O
break	O
;	O
case	O
's'	O
:	O
switch	O
(	O
sizeModifier	int
)	O
{	O
case	O
' '	O
:	O
if	O
(	O
fastPath	int
)	O
{	O
buffPtr	pointer
=	O
va_arg	O
(	O
arg	array
,	O
char	O
*	O
)	O
;	O
buffCount	int
=	O
strlen	function
(	O
buffPtr	pointer
)	O
;	O
buffLen	int
=	O
buffCount	int
+	O
1	int
;	O
}	O
else	O
{	O
sprintf	function
(	O
buffPtr	pointer
,	O
fmtBuff	array
,	O
charPtrArg	pointer
)	O
;	O
buffCount	int
=	O
strlen	function
(	O
buffPtr	pointer
)	O
;	O
}	O
break	O
;	O
case	O
'l'	O
:	O
goto	O
ErrorReturn	O
;	O
default	O
:	O
goto	O
ErrorReturn	O
;	O
}	O
break	O
;	O
case	O
'p'	O
:	O
if	O
(	O
sizeModifier	int
!=	O
' '	O
)	O
goto	O
ErrorReturn	O
;	O
voidPtrArg	pointer
=	O
va_arg	O
(	O
arg	array
,	O
void	O
*	O
)	O
;	O
sprintf	function
(	O
buffPtr	pointer
,	O
fmtBuff	array
,	O
voidPtrArg	pointer
)	O
;	O
buffCount	int
=	O
strlen	function
(	O
buffPtr	pointer
)	O
;	O
break	O
;	O
case	O
'n'	O
:	O
switch	O
(	O
sizeModifier	int
)	O
{	O
case	O
' '	O
:	O
intPtrArg	pointer
=	O
va_arg	O
(	O
arg	array
,	O
int	O
*	O
)	O
;	O
*	O
intPtrArg	pointer
=	O
streamCount	int
;	O
break	O
;	O
case	O
'l'	O
:	O
longPtrArg	pointer
=	O
va_arg	O
(	O
arg	array
,	O
long	O
*	O
)	O
;	O
*	O
longPtrArg	pointer
=	O
streamCount	int
;	O
break	O
;	O
case	O
'h'	O
:	O
shortPtrArg	pointer
=	O
va_arg	O
(	O
arg	array
,	O
short	O
*	O
)	O
;	O
*	O
shortPtrArg	pointer
=	O
streamCount	int
;	O
break	O
;	O
default	O
:	O
goto	O
ErrorReturn	O
;	O
}	O
buffCount	int
=	O
0	int
;	O
break	O
;	O
case	O
'f'	O
:	O
if	O
(	O
fastPath	int
)	O
{	O
performedOp	int
=	O
FALSE	O
;	O
break	O
;	O
}	O
switch	O
(	O
sizeModifier	int
)	O
{	O
case	O
' '	O
:	O
sprintf	function
(	O
buffPtr	pointer
,	O
fmtBuff	array
,	O
doubleArg	double
)	O
;	O
buffCount	int
=	O
strlen	function
(	O
buffPtr	pointer
)	O
;	O
break	O
;	O
case	O
'L'	O
:	O
sprintf	function
(	O
buffPtr	pointer
,	O
fmtBuff	array
,	O
lDoubleArg	long double
)	O
;	O
buffCount	int
=	O
strlen	function
(	O
buffPtr	pointer
)	O
;	O
break	O
;	O
default	O
:	O
goto	O
ErrorReturn	O
;	O
}	O
break	O
;	O
case	O
'e'	O
:	O
case	O
'E'	O
:	O
case	O
'g'	O
:	O
case	O
'G'	O
:	O
switch	O
(	O
sizeModifier	int
)	O
{	O
case	O
' '	O
:	O
doubleArg	double
=	O
va_arg	O
(	O
arg	array
,	O
double	O
)	O
;	O
sprintf	function
(	O
buffPtr	pointer
,	O
fmtBuff	array
,	O
doubleArg	double
)	O
;	O
buffCount	int
=	O
strlen	function
(	O
buffPtr	pointer
)	O
;	O
break	O
;	O
case	O
'L'	O
:	O
lDoubleArg	long double
=	O
va_arg	O
(	O
arg	array
,	O
LONG_DOUBLE	O
)	O
;	O
sprintf	function
(	O
buffPtr	pointer
,	O
fmtBuff	array
,	O
lDoubleArg	long double
)	O
;	O
buffCount	int
=	O
strlen	function
(	O
buffPtr	pointer
)	O
;	O
break	O
;	O
default	O
:	O
goto	O
ErrorReturn	O
;	O
}	O
break	O
;	O
case	O
'%'	O
:	O
if	O
(	O
sizeModifier	int
!=	O
' '	O
)	O
goto	O
ErrorReturn	O
;	O
buff	array
[	O
0	int
]	O
=	O
'%'	O
;	O
buffCount	int
=	O
1	int
;	O
break	O
;	O
case	O
'\0'	O
:	O
goto	O
ErrorReturn	O
;	O
default	O
:	O
performedOp	int
=	O
FALSE	O
;	O
break	O
;	O
}	O
if	O
(	O
performedOp	int
)	O
break	O
;	O
if	O
(	O
!	O
fastPath	int
)	O
goto	O
ErrorReturn	O
;	O
fastPath	int
=	O
FALSE	O
;	O
}	O
ASSERT	function
(	O
buffCount	int
<	O
buffLen	int
)	O
;	O
if	O
(	O
buffCount	int
>	O
0	int
)	O
{	O
if	O
(	O
FCGX_PutStr	function
(	O
buffPtr	pointer
,	O
buffCount	int
,	O
stream	pointer
)	O
<	O
0	int
)	O
goto	O
ErrorReturn	O
;	O
streamCount	int
+=	O
buffCount	int
;	O
}	O
else	O
if	O
(	O
buffCount	int
<	O
0	int
)	O
{	O
goto	O
ErrorReturn	O
;	O
}	O
f	pointer
+=	O
specifierLength	int
;	O
}	O
goto	O
NormalReturn	O
;	O
ErrorReturn	O
:	O
streamCount	int
=	O
-	O
1	int
;	O
NormalReturn	O
:	O
if	O
(	O
auxBuffPtr	pointer
!=	O
NULL	O
)	O
free	function
(	O
auxBuffPtr	pointer
)	O
;	O
return	O
streamCount	int
;	O
}	O
static	O
void	O
CopyAndAdvance	function
(	O
char	O
*	O
*	O
destPtr	pointer
,	O
char	O
*	O
*	O
srcPtr	pointer
,	O
int	O
n	int
)	O
{	O
char	O
*	O
dest	pointer
=	O
*	O
destPtr	pointer
;	O
char	O
*	O
src	pointer
=	O
*	O
srcPtr	pointer
;	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
n	int
;	O
i	int
++	O
)	O
*	O
dest	pointer
++	O
=	O
*	O
src	pointer
++	O
;	O
*	O
destPtr	pointer
=	O
dest	pointer
;	O
*	O
srcPtr	pointer
=	O
src	pointer
;	O
}	O
int	O
FCGX_FFlush	function
(	O
FCGX_Stream	O
*	O
stream	pointer
)	O
{	O
if	O
(	O
stream	pointer
->	O
isClosed	O
||	O
stream	pointer
->	O
isReader	int
)	O
return	O
0	int
;	O
stream	pointer
->	O
emptyBuffProc	O
(	O
stream	pointer
,	O
FALSE	O
)	O
;	O
return	O
(	O
stream	pointer
->	O
isClosed	O
)	O
?	O
-	O
1	int
:	O
0	int
;	O
}	O
int	O
FCGX_FClose	function
(	O
FCGX_Stream	O
*	O
stream	pointer
)	O
{	O
if	O
(	O
!	O
stream	pointer
->	O
wasFCloseCalled	O
)	O
{	O
if	O
(	O
!	O
stream	pointer
->	O
isReader	int
)	O
{	O
stream	pointer
->	O
emptyBuffProc	O
(	O
stream	pointer
,	O
TRUE	O
)	O
;	O
}	O
stream	pointer
->	O
wasFCloseCalled	O
=	O
TRUE	O
;	O
stream	pointer
->	O
isClosed	O
=	O
TRUE	O
;	O
if	O
(	O
stream	pointer
->	O
isReader	int
)	O
{	O
stream	pointer
->	O
wrNext	O
=	O
stream	pointer
->	O
stop	O
=	O
stream	pointer
->	O
rdNext	O
;	O
}	O
else	O
{	O
stream	pointer
->	O
rdNext	O
=	O
stream	pointer
->	O
stop	O
=	O
stream	pointer
->	O
wrNext	O
;	O
}	O
}	O
return	O
(	O
stream	pointer
->	O
FCGI_errno	int
==	O
0	int
)	O
?	O
0	int
:	O
EOF	O
;	O
}	O
static	O
void	O
SetError	function
(	O
FCGX_Stream	O
*	O
stream	pointer
,	O
int	O
FCGI_errno	int
)	O
{	O
if	O
(	O
stream	pointer
->	O
FCGI_errno	int
==	O
0	int
)	O
{	O
stream	pointer
->	O
FCGI_errno	int
=	O
FCGI_errno	int
;	O
stream	pointer
->	O
isClosed	O
=	O
TRUE	O
;	O
}	O
}	O
int	O
FCGX_GetError	function
(	O
FCGX_Stream	O
*	O
stream	pointer
)	O
{	O
return	O
stream	pointer
->	O
FCGI_errno	int
;	O
}	O
void	O
FCGX_ClearError	function
(	O
FCGX_Stream	O
*	O
stream	pointer
)	O
{	O
stream	pointer
->	O
FCGI_errno	int
=	O
0	int
;	O
}	O
typedef	O
struct	O
Params	struct
{	O
FCGX_ParamArray	O
vec	int
;	O
int	O
length	int
;	O
char	O
*	O
*	O
cur	pointer
;	O
}	O
Params	struct
;	O
typedef	O
Params	struct
*	O
ParamsPtr	pointer
;	O
static	O
ParamsPtr	pointer
NewParams	function
(	O
int	O
length	int
)	O
{	O
ParamsPtr	pointer
result	pointer
;	O
result	pointer
=	O
Malloc	function
(	O
sizeof	O
(	O
Params	struct
)	O
)	O
;	O
result	pointer
->	O
vec	int
=	O
(	O
char	O
*	O
*	O
)	O
Malloc	function
(	O
length	int
*	O
sizeof	O
(	O
char	O
*	O
)	O
)	O
;	O
result	pointer
->	O
length	int
=	O
length	int
;	O
result	pointer
->	O
cur	pointer
=	O
result	pointer
->	O
vec	int
;	O
*	O
result	pointer
->	O
cur	pointer
=	O
NULL	O
;	O
return	O
result	pointer
;	O
}	O
static	O
void	O
FreeParams	function
(	O
ParamsPtr	pointer
*	O
paramsPtrPtr	pointer
)	O
{	O
ParamsPtr	pointer
paramsPtr	pointer
=	O
*	O
paramsPtrPtr	pointer
;	O
char	O
*	O
*	O
p	pointer
;	O
if	O
(	O
paramsPtr	pointer
==	O
NULL	O
)	O
{	O
return	O
;	O
}	O
for	O
(	O
p	pointer
=	O
paramsPtr	pointer
->	O
vec	int
;	O
p	pointer
<	O
paramsPtr	pointer
->	O
cur	pointer
;	O
p	pointer
++	O
)	O
{	O
free	function
(	O
*	O
p	pointer
)	O
;	O
}	O
free	function
(	O
paramsPtr	pointer
->	O
vec	int
)	O
;	O
free	function
(	O
paramsPtr	pointer
)	O
;	O
*	O
paramsPtrPtr	pointer
=	O
NULL	O
;	O
}	O
static	O
void	O
PutParam	function
(	O
ParamsPtr	pointer
paramsPtr	pointer
,	O
char	O
*	O
nameValue	pointer
)	O
{	O
int	O
size	long
;	O
*	O
paramsPtr	pointer
->	O
cur	pointer
++	O
=	O
nameValue	pointer
;	O
size	long
=	O
paramsPtr	pointer
->	O
cur	pointer
-	O
paramsPtr	pointer
->	O
vec	int
;	O
if	O
(	O
size	long
>=	O
paramsPtr	pointer
->	O
length	int
)	O
{	O
paramsPtr	pointer
->	O
length	int
*=	O
2	int
;	O
paramsPtr	pointer
->	O
vec	int
=	O
realloc	function
(	O
paramsPtr	pointer
->	O
vec	int
,	O
paramsPtr	pointer
->	O
length	int
*	O
sizeof	O
(	O
char	O
*	O
)	O
)	O
;	O
paramsPtr	pointer
->	O
cur	pointer
=	O
paramsPtr	pointer
->	O
vec	int
+	O
size	long
;	O
}	O
*	O
paramsPtr	pointer
->	O
cur	pointer
=	O
NULL	O
;	O
}	O
char	O
*	O
FCGX_GetParam	function
(	O
const	O
char	O
*	O
name	pointer
,	O
FCGX_ParamArray	O
envp	int
)	O
{	O
int	O
len	int
;	O
char	O
*	O
*	O
p	pointer
;	O
len	int
=	O
strlen	function
(	O
name	pointer
)	O
;	O
if	O
(	O
len	int
==	O
0	int
)	O
return	O
NULL	O
;	O
for	O
(	O
p	pointer
=	O
envp	int
;	O
*	O
p	pointer
!=	O
NULL	O
;	O
p	pointer
++	O
)	O
{	O
if	O
(	O
(	O
strncmp	function
(	O
name	pointer
,	O
*	O
p	pointer
,	O
len	int
)	O
==	O
0	int
)	O
&&	O
(	O
(	O
*	O
p	pointer
)	O
[	O
len	int
]	O
==	O
'='	O
)	O
)	O
{	O
return	O
*	O
p	pointer
+	O
len	int
+	O
1	int
;	O
}	O
}	O
return	O
NULL	O
;	O
}	O
static	O
int	O
ReadParams	function
(	O
Params	struct
*	O
paramsPtr	pointer
,	O
FCGX_Stream	O
*	O
stream	pointer
)	O
{	O
int	O
nameLen	int
,	O
valueLen	int
;	O
unsigned	O
char	O
lenBuff	array
[	O
3	int
]	O
;	O
char	O
*	O
nameValue	pointer
;	O
while	O
(	O
(	O
nameLen	int
=	O
FCGX_GetChar	function
(	O
stream	pointer
)	O
)	O
!=	O
EOF	O
)	O
{	O
if	O
(	O
(	O
nameLen	int
&	O
0x80	int
)	O
!=	O
0	int
)	O
{	O
if	O
(	O
FCGX_GetStr	function
(	O
(	O
char	O
*	O
)	O
&	O
lenBuff	array
[	O
0	int
]	O
,	O
3	int
,	O
stream	pointer
)	O
!=	O
3	int
)	O
{	O
SetError	function
(	O
stream	pointer
,	O
FCGX_PARAMS_ERROR	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
nameLen	int
=	O
(	O
(	O
nameLen	int
&	O
0x7f	int
)	O
<<	O
24	int
)	O
+	O
(	O
lenBuff	array
[	O
0	int
]	O
<<	O
16	int
)	O
+	O
(	O
lenBuff	array
[	O
1	int
]	O
<<	O
8	int
)	O
+	O
lenBuff	array
[	O
2	int
]	O
;	O
}	O
if	O
(	O
(	O
valueLen	int
=	O
FCGX_GetChar	function
(	O
stream	pointer
)	O
)	O
==	O
EOF	O
)	O
{	O
SetError	function
(	O
stream	pointer
,	O
FCGX_PARAMS_ERROR	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
(	O
valueLen	int
&	O
0x80	int
)	O
!=	O
0	int
)	O
{	O
if	O
(	O
FCGX_GetStr	function
(	O
(	O
char	O
*	O
)	O
&	O
lenBuff	array
[	O
0	int
]	O
,	O
3	int
,	O
stream	pointer
)	O
!=	O
3	int
)	O
{	O
SetError	function
(	O
stream	pointer
,	O
FCGX_PARAMS_ERROR	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
valueLen	int
=	O
(	O
(	O
valueLen	int
&	O
0x7f	int
)	O
<<	O
24	int
)	O
+	O
(	O
lenBuff	array
[	O
0	int
]	O
<<	O
16	int
)	O
+	O
(	O
lenBuff	array
[	O
1	int
]	O
<<	O
8	int
)	O
+	O
lenBuff	array
[	O
2	int
]	O
;	O
}	O
nameValue	pointer
=	O
Malloc	function
(	O
nameLen	int
+	O
valueLen	int
+	O
2	int
)	O
;	O
if	O
(	O
FCGX_GetStr	function
(	O
nameValue	pointer
,	O
nameLen	int
,	O
stream	pointer
)	O
!=	O
nameLen	int
)	O
{	O
SetError	function
(	O
stream	pointer
,	O
FCGX_PARAMS_ERROR	O
)	O
;	O
free	function
(	O
nameValue	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
*	O
(	O
nameValue	pointer
+	O
nameLen	int
)	O
=	O
'='	O
;	O
if	O
(	O
FCGX_GetStr	function
(	O
nameValue	pointer
+	O
nameLen	int
+	O
1	int
,	O
valueLen	int
,	O
stream	pointer
)	O
!=	O
valueLen	int
)	O
{	O
SetError	function
(	O
stream	pointer
,	O
FCGX_PARAMS_ERROR	O
)	O
;	O
free	function
(	O
nameValue	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
*	O
(	O
nameValue	pointer
+	O
nameLen	int
+	O
valueLen	int
+	O
1	int
)	O
=	O
'\0'	O
;	O
PutParam	function
(	O
paramsPtr	pointer
,	O
nameValue	pointer
)	O
;	O
}	O
return	O
0	int
;	O
}	O
static	O
FCGI_Header	O
MakeHeader	function
(	O
int	O
type	int
,	O
int	O
requestId	int
,	O
int	O
contentLength	int
,	O
int	O
paddingLength	int
)	O
{	O
FCGI_Header	O
header	int
;	O
ASSERT	function
(	O
contentLength	int
>=	O
0	int
&&	O
contentLength	int
<=	O
FCGI_MAX_LENGTH	O
)	O
;	O
ASSERT	function
(	O
paddingLength	int
>=	O
0	int
&&	O
paddingLength	int
<=	O
0xff	int
)	O
;	O
header	int
.	O
version	O
=	O
FCGI_VERSION_1	O
;	O
header	int
.	O
type	int
=	O
type	int
;	O
header	int
.	O
requestIdB1	O
=	O
(	O
requestId	int
>>	O
8	int
)	O
&	O
0xff	int
;	O
header	int
.	O
requestIdB0	O
=	O
(	O
requestId	int
)	O
&	O
0xff	int
;	O
header	int
.	O
contentLengthB1	O
=	O
(	O
contentLength	int
>>	O
8	int
)	O
&	O
0xff	int
;	O
header	int
.	O
contentLengthB0	O
=	O
(	O
contentLength	int
)	O
&	O
0xff	int
;	O
header	int
.	O
paddingLength	int
=	O
paddingLength	int
;	O
header	int
.	O
reserved	O
=	O
0	int
;	O
return	O
header	int
;	O
}	O
static	O
FCGI_EndRequestBody	O
MakeEndRequestBody	function
(	O
int	O
appStatus	int
,	O
int	O
protocolStatus	int
)	O
{	O
FCGI_EndRequestBody	O
body	O
;	O
body	O
.	O
appStatusB3	O
=	O
(	O
appStatus	int
>>	O
24	int
)	O
&	O
0xff	int
;	O
body	O
.	O
appStatusB2	O
=	O
(	O
appStatus	int
>>	O
16	int
)	O
&	O
0xff	int
;	O
body	O
.	O
appStatusB1	O
=	O
(	O
appStatus	int
>>	O
8	int
)	O
&	O
0xff	int
;	O
body	O
.	O
appStatusB0	O
=	O
(	O
appStatus	int
)	O
&	O
0xff	int
;	O
body	O
.	O
protocolStatus	int
=	O
protocolStatus	int
;	O
memset	function
(	O
body	O
.	O
reserved	O
,	O
0	int
,	O
sizeof	O
(	O
body	O
.	O
reserved	O
)	O
)	O
;	O
return	O
body	O
;	O
}	O
static	O
FCGI_UnknownTypeBody	O
MakeUnknownTypeBody	function
(	O
int	O
type	int
)	O
{	O
FCGI_UnknownTypeBody	O
body	O
;	O
body	O
.	O
type	int
=	O
type	int
;	O
memset	function
(	O
body	O
.	O
reserved	O
,	O
0	int
,	O
sizeof	O
(	O
body	O
.	O
reserved	O
)	O
)	O
;	O
return	O
body	O
;	O
}	O
static	O
int	O
AlignInt8	function
(	O
unsigned	O
n	int
)	O
{	O
return	O
(	O
n	int
+	O
7	int
)	O
&	O
(	O
UINT_MAX	O
-	O
7	int
)	O
;	O
}	O
static	O
unsigned	O
char	O
*	O
AlignPtr8	function
(	O
unsigned	O
char	O
*	O
p	pointer
)	O
{	O
unsigned	O
long	O
u	long
=	O
(	O
unsigned	O
long	O
)	O
p	pointer
;	O
u	long
=	O
(	O
(	O
u	long
+	O
7	int
)	O
&	O
(	O
ULONG_MAX	O
-	O
7	int
)	O
)	O
-	O
u	long
;	O
return	O
p	pointer
+	O
u	long
;	O
}	O
typedef	O
struct	O
ReqData	struct
{	O
int	O
ipcFd	int
;	O
int	O
isBeginProcessed	int
;	O
int	O
requestId	int
;	O
int	O
keepConnection	int
;	O
int	O
role	int
;	O
int	O
appStatus	int
;	O
int	O
nWriters	int
;	O
FCGX_Stream	O
*	O
inStream	pointer
;	O
FCGX_Stream	O
*	O
outStream	pointer
;	O
FCGX_Stream	O
*	O
errStream	pointer
;	O
ParamsPtr	pointer
paramsPtr	pointer
;	O
}	O
ReqData	struct
;	O
typedef	O
struct	O
FCGX_Stream_Data	struct
{	O
unsigned	O
char	O
*	O
buff	array
;	O
int	O
bufflen	int
;	O
unsigned	O
char	O
*	O
mBuff	pointer
;	O
unsigned	O
char	O
*	O
buffStop	pointer
;	O
int	O
type	int
;	O
int	O
eorStop	int
;	O
int	O
skip	int
;	O
int	O
contentLen	int
;	O
int	O
paddingLen	int
;	O
int	O
isAnythingWritten	int
;	O
int	O
rawWrite	int
;	O
ReqData	struct
*	O
reqDataPtr	pointer
;	O
}	O
FCGX_Stream_Data	struct
;	O
static	O
void	O
WriteCloseRecords	function
(	O
struct	O
FCGX_Stream	O
*	O
stream	pointer
)	O
{	O
FCGX_Stream_Data	struct
*	O
data	pointer
=	O
stream	pointer
->	O
data	pointer
;	O
data	pointer
->	O
rawWrite	int
=	O
TRUE	O
;	O
if	O
(	O
!	O
(	O
data	pointer
->	O
type	int
==	O
FCGI_STDERR	O
&&	O
stream	pointer
->	O
wrNext	O
==	O
data	pointer
->	O
buff	array
&&	O
!	O
data	pointer
->	O
isAnythingWritten	int
)	O
)	O
{	O
FCGI_Header	O
header	int
;	O
header	int
=	O
MakeHeader	function
(	O
data	pointer
->	O
type	int
,	O
data	pointer
->	O
reqDataPtr	pointer
->	O
requestId	int
,	O
0	int
,	O
0	int
)	O
;	O
FCGX_PutStr	function
(	O
(	O
char	O
*	O
)	O
&	O
header	int
,	O
sizeof	O
(	O
header	int
)	O
,	O
stream	pointer
)	O
;	O
}	O
;	O
if	O
(	O
data	pointer
->	O
reqDataPtr	pointer
->	O
nWriters	int
==	O
1	int
)	O
{	O
FCGI_EndRequestRecord	O
endRequestRecord	O
;	O
endRequestRecord	O
.	O
header	int
=	O
MakeHeader	function
(	O
FCGI_END_REQUEST	O
,	O
data	pointer
->	O
reqDataPtr	pointer
->	O
requestId	int
,	O
sizeof	O
(	O
endRequestRecord	O
.	O
body	O
)	O
,	O
0	int
)	O
;	O
endRequestRecord	O
.	O
body	O
=	O
MakeEndRequestBody	function
(	O
data	pointer
->	O
reqDataPtr	pointer
->	O
appStatus	int
,	O
FCGI_REQUEST_COMPLETE	O
)	O
;	O
FCGX_PutStr	function
(	O
(	O
char	O
*	O
)	O
&	O
endRequestRecord	O
,	O
sizeof	O
(	O
endRequestRecord	O
)	O
,	O
stream	pointer
)	O
;	O
}	O
data	pointer
->	O
reqDataPtr	pointer
->	O
nWriters	int
--	O
;	O
}	O
static	O
void	O
EmptyBuffProc	function
(	O
struct	O
FCGX_Stream	O
*	O
stream	pointer
,	O
int	O
doClose	int
)	O
{	O
FCGX_Stream_Data	struct
*	O
data	pointer
=	O
stream	pointer
->	O
data	pointer
;	O
int	O
cLen	int
,	O
eLen	int
;	O
if	O
(	O
!	O
data	pointer
->	O
rawWrite	int
)	O
{	O
cLen	int
=	O
stream	pointer
->	O
wrNext	O
-	O
data	pointer
->	O
buff	array
-	O
sizeof	O
(	O
FCGI_Header	O
)	O
;	O
if	O
(	O
cLen	int
>	O
0	int
)	O
{	O
eLen	int
=	O
AlignInt8	function
(	O
cLen	int
)	O
;	O
memset	function
(	O
stream	pointer
->	O
wrNext	O
,	O
0	int
,	O
eLen	int
-	O
cLen	int
)	O
;	O
stream	pointer
->	O
wrNext	O
+=	O
eLen	int
-	O
cLen	int
;	O
*	O
(	O
(	O
FCGI_Header	O
*	O
)	O
data	pointer
->	O
buff	array
)	O
=	O
MakeHeader	function
(	O
data	pointer
->	O
type	int
,	O
data	pointer
->	O
reqDataPtr	pointer
->	O
requestId	int
,	O
cLen	int
,	O
eLen	int
-	O
cLen	int
)	O
;	O
}	O
else	O
{	O
stream	pointer
->	O
wrNext	O
=	O
data	pointer
->	O
buff	array
;	O
}	O
}	O
if	O
(	O
doClose	int
)	O
{	O
WriteCloseRecords	function
(	O
stream	pointer
)	O
;	O
}	O
;	O
if	O
(	O
stream	pointer
->	O
wrNext	O
!=	O
data	pointer
->	O
buff	array
)	O
{	O
data	pointer
->	O
isAnythingWritten	int
=	O
TRUE	O
;	O
if	O
(	O
OS_Write	function
(	O
data	pointer
->	O
reqDataPtr	pointer
->	O
ipcFd	int
,	O
(	O
char	O
*	O
)	O
data	pointer
->	O
buff	array
,	O
stream	pointer
->	O
wrNext	O
-	O
data	pointer
->	O
buff	array
)	O
<	O
0	int
)	O
{	O
SetError	function
(	O
stream	pointer
,	O
OS_Errno	O
)	O
;	O
return	O
;	O
}	O
stream	pointer
->	O
wrNext	O
=	O
data	pointer
->	O
buff	array
;	O
}	O
if	O
(	O
!	O
data	pointer
->	O
rawWrite	int
)	O
{	O
stream	pointer
->	O
wrNext	O
+=	O
sizeof	O
(	O
FCGI_Header	O
)	O
;	O
}	O
}	O
static	O
int	O
ProcessManagementRecord	function
(	O
int	O
type	int
,	O
FCGX_Stream	O
*	O
stream	pointer
)	O
{	O
FCGX_Stream_Data	struct
*	O
data	pointer
=	O
stream	pointer
->	O
data	pointer
;	O
ParamsPtr	pointer
paramsPtr	pointer
=	O
NewParams	function
(	O
3	int
)	O
;	O
char	O
*	O
*	O
pPtr	pointer
;	O
char	O
response	array
[	O
64	int
]	O
;	O
char	O
*	O
responseP	pointer
=	O
&	O
response	array
[	O
FCGI_HEADER_LEN	O
]	O
;	O
char	O
*	O
name	pointer
,	O
value	char
;	O
int	O
len	int
,	O
paddedLen	int
;	O
if	O
(	O
type	int
==	O
FCGI_GET_VALUES	O
)	O
{	O
ReadParams	function
(	O
paramsPtr	pointer
,	O
stream	pointer
)	O
;	O
if	O
(	O
(	O
FCGX_GetError	function
(	O
stream	pointer
)	O
!=	O
0	int
)	O
||	O
(	O
data	pointer
->	O
contentLen	int
!=	O
0	int
)	O
)	O
{	O
FreeParams	function
(	O
&	O
paramsPtr	pointer
)	O
;	O
return	O
FCGX_PROTOCOL_ERROR	O
;	O
}	O
for	O
(	O
pPtr	pointer
=	O
paramsPtr	pointer
->	O
vec	int
;	O
pPtr	pointer
<	O
paramsPtr	pointer
->	O
cur	pointer
;	O
pPtr	pointer
++	O
)	O
{	O
name	pointer
=	O
*	O
pPtr	pointer
;	O
*	O
(	O
strchr	function
(	O
name	pointer
,	O
'='	O
)	O
)	O
=	O
'\0'	O
;	O
if	O
(	O
strcmp	function
(	O
name	pointer
,	O
FCGI_MAX_CONNS	O
)	O
==	O
0	int
)	O
{	O
value	char
=	O
'1'	O
;	O
}	O
else	O
if	O
(	O
strcmp	function
(	O
name	pointer
,	O
FCGI_MAX_REQS	O
)	O
==	O
0	int
)	O
{	O
value	char
=	O
'1'	O
;	O
}	O
else	O
if	O
(	O
strcmp	function
(	O
name	pointer
,	O
FCGI_MPXS_CONNS	O
)	O
==	O
0	int
)	O
{	O
value	char
=	O
'0'	O
;	O
}	O
else	O
{	O
name	pointer
=	O
NULL	O
;	O
}	O
if	O
(	O
name	pointer
!=	O
NULL	O
)	O
{	O
len	int
=	O
strlen	function
(	O
name	pointer
)	O
;	O
sprintf	function
(	O
responseP	pointer
,	O
"%c%c%s%c"	pointer
,	O
len	int
,	O
1	int
,	O
name	pointer
,	O
value	char
)	O
;	O
responseP	pointer
+=	O
len	int
+	O
3	int
;	O
}	O
}	O
len	int
=	O
responseP	pointer
-	O
&	O
response	array
[	O
FCGI_HEADER_LEN	O
]	O
;	O
paddedLen	int
=	O
AlignInt8	function
(	O
len	int
)	O
;	O
*	O
(	O
(	O
FCGI_Header	O
*	O
)	O
response	array
)	O
=	O
MakeHeader	function
(	O
FCGI_GET_VALUES_RESULT	O
,	O
FCGI_NULL_REQUEST_ID	O
,	O
len	int
,	O
paddedLen	int
-	O
len	int
)	O
;	O
FreeParams	function
(	O
&	O
paramsPtr	pointer
)	O
;	O
}	O
else	O
{	O
paddedLen	int
=	O
len	int
=	O
sizeof	O
(	O
FCGI_UnknownTypeBody	O
)	O
;	O
(	O
(	O
FCGI_UnknownTypeRecord	O
*	O
)	O
response	array
)	O
->	O
header	int
=	O
MakeHeader	function
(	O
FCGI_UNKNOWN_TYPE	O
,	O
FCGI_NULL_REQUEST_ID	O
,	O
len	int
,	O
0	int
)	O
;	O
(	O
(	O
FCGI_UnknownTypeRecord	O
*	O
)	O
response	array
)	O
->	O
body	O
=	O
MakeUnknownTypeBody	function
(	O
type	int
)	O
;	O
}	O
if	O
(	O
OS_Write	function
(	O
data	pointer
->	O
reqDataPtr	pointer
->	O
ipcFd	int
,	O
response	array
,	O
FCGI_HEADER_LEN	O
+	O
paddedLen	int
)	O
<	O
0	int
)	O
{	O
SetError	function
(	O
stream	pointer
,	O
OS_Errno	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
return	O
MGMT_RECORD	int
;	O
}	O
static	O
int	O
ProcessBeginRecord	function
(	O
int	O
requestId	int
,	O
FCGX_Stream	O
*	O
stream	pointer
)	O
{	O
FCGX_Stream_Data	struct
*	O
data	pointer
=	O
stream	pointer
->	O
data	pointer
;	O
FCGI_BeginRequestBody	O
body	O
;	O
if	O
(	O
requestId	int
==	O
0	int
||	O
data	pointer
->	O
contentLen	int
!=	O
sizeof	O
(	O
body	O
)	O
)	O
{	O
return	O
FCGX_PROTOCOL_ERROR	O
;	O
}	O
if	O
(	O
data	pointer
->	O
reqDataPtr	pointer
->	O
isBeginProcessed	int
)	O
{	O
FCGI_EndRequestRecord	O
endRequestRecord	O
;	O
endRequestRecord	O
.	O
header	int
=	O
MakeHeader	function
(	O
FCGI_END_REQUEST	O
,	O
requestId	int
,	O
sizeof	O
(	O
endRequestRecord	O
.	O
body	O
)	O
,	O
0	int
)	O
;	O
endRequestRecord	O
.	O
body	O
=	O
MakeEndRequestBody	function
(	O
0	int
,	O
FCGI_CANT_MPX_CONN	O
)	O
;	O
if	O
(	O
OS_Write	function
(	O
data	pointer
->	O
reqDataPtr	pointer
->	O
ipcFd	int
,	O
(	O
char	O
*	O
)	O
&	O
endRequestRecord	O
,	O
sizeof	O
(	O
endRequestRecord	O
)	O
)	O
<	O
0	int
)	O
{	O
SetError	function
(	O
stream	pointer
,	O
OS_Errno	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
return	O
SKIP	int
;	O
}	O
data	pointer
->	O
reqDataPtr	pointer
->	O
requestId	int
=	O
requestId	int
;	O
if	O
(	O
FCGX_GetStr	function
(	O
(	O
char	O
*	O
)	O
&	O
body	O
,	O
sizeof	O
(	O
body	O
)	O
,	O
stream	pointer
)	O
!=	O
sizeof	O
(	O
body	O
)	O
)	O
{	O
return	O
FCGX_PROTOCOL_ERROR	O
;	O
}	O
data	pointer
->	O
reqDataPtr	pointer
->	O
keepConnection	int
=	O
(	O
body	O
.	O
flags	O
&	O
FCGI_KEEP_CONN	O
)	O
;	O
data	pointer
->	O
reqDataPtr	pointer
->	O
role	int
=	O
(	O
body	O
.	O
roleB1	O
<<	O
8	int
)	O
+	O
body	O
.	O
roleB0	O
;	O
data	pointer
->	O
reqDataPtr	pointer
->	O
isBeginProcessed	int
=	O
TRUE	O
;	O
return	O
BEGIN_RECORD	int
;	O
}	O
static	O
int	O
ProcessHeader	function
(	O
FCGI_Header	O
header	int
,	O
FCGX_Stream	O
*	O
stream	pointer
)	O
{	O
FCGX_Stream_Data	struct
*	O
data	pointer
=	O
stream	pointer
->	O
data	pointer
;	O
int	O
requestId	int
;	O
if	O
(	O
header	int
.	O
version	O
!=	O
FCGI_VERSION_1	O
)	O
{	O
return	O
FCGX_UNSUPPORTED_VERSION	O
;	O
}	O
requestId	int
=	O
(	O
header	int
.	O
requestIdB1	O
<<	O
8	int
)	O
+	O
header	int
.	O
requestIdB0	O
;	O
data	pointer
->	O
contentLen	int
=	O
(	O
header	int
.	O
contentLengthB1	O
<<	O
8	int
)	O
+	O
header	int
.	O
contentLengthB0	O
;	O
data	pointer
->	O
paddingLen	int
=	O
header	int
.	O
paddingLength	int
;	O
if	O
(	O
header	int
.	O
type	int
==	O
FCGI_BEGIN_REQUEST	O
)	O
{	O
return	O
ProcessBeginRecord	function
(	O
requestId	int
,	O
stream	pointer
)	O
;	O
}	O
if	O
(	O
requestId	int
==	O
FCGI_NULL_REQUEST_ID	O
)	O
{	O
return	O
ProcessManagementRecord	function
(	O
header	int
.	O
type	int
,	O
stream	pointer
)	O
;	O
}	O
if	O
(	O
requestId	int
!=	O
data	pointer
->	O
reqDataPtr	pointer
->	O
requestId	int
)	O
{	O
return	O
SKIP	int
;	O
}	O
if	O
(	O
header	int
.	O
type	int
!=	O
data	pointer
->	O
type	int
)	O
{	O
return	O
FCGX_PROTOCOL_ERROR	O
;	O
}	O
return	O
STREAM_RECORD	int
;	O
}	O
static	O
void	O
FillBuffProc	function
(	O
FCGX_Stream	O
*	O
stream	pointer
)	O
{	O
FCGX_Stream_Data	struct
*	O
data	pointer
=	O
stream	pointer
->	O
data	pointer
;	O
FCGI_Header	O
header	int
;	O
int	O
headerLen	int
=	O
0	int
;	O
int	O
status	int
,	O
count	int
;	O
for	O
(	O
;	O
;	O
)	O
{	O
if	O
(	O
stream	pointer
->	O
rdNext	O
==	O
data	pointer
->	O
buffStop	pointer
)	O
{	O
count	int
=	O
OS_Read	function
(	O
data	pointer
->	O
reqDataPtr	pointer
->	O
ipcFd	int
,	O
(	O
char	O
*	O
)	O
data	pointer
->	O
buff	array
,	O
data	pointer
->	O
bufflen	int
)	O
;	O
if	O
(	O
count	int
<=	O
0	int
)	O
{	O
SetError	function
(	O
stream	pointer
,	O
(	O
count	int
==	O
0	int
?	O
FCGX_PROTOCOL_ERROR	O
:	O
OS_Errno	O
)	O
)	O
;	O
return	O
;	O
}	O
stream	pointer
->	O
rdNext	O
=	O
data	pointer
->	O
buff	array
;	O
data	pointer
->	O
buffStop	pointer
=	O
data	pointer
->	O
buff	array
+	O
count	int
;	O
}	O
if	O
(	O
data	pointer
->	O
contentLen	int
>	O
0	int
)	O
{	O
count	int
=	O
min	function
(	O
data	pointer
->	O
contentLen	int
,	O
data	pointer
->	O
buffStop	pointer
-	O
stream	pointer
->	O
rdNext	O
)	O
;	O
data	pointer
->	O
contentLen	int
-=	O
count	int
;	O
if	O
(	O
!	O
data	pointer
->	O
skip	int
)	O
{	O
stream	pointer
->	O
wrNext	O
=	O
stream	pointer
->	O
stop	O
=	O
stream	pointer
->	O
rdNext	O
+	O
count	int
;	O
return	O
;	O
}	O
else	O
{	O
stream	pointer
->	O
rdNext	O
+=	O
count	int
;	O
if	O
(	O
data	pointer
->	O
contentLen	int
>	O
0	int
)	O
{	O
continue	O
;	O
}	O
else	O
{	O
data	pointer
->	O
skip	int
=	O
FALSE	O
;	O
}	O
}	O
}	O
if	O
(	O
data	pointer
->	O
paddingLen	int
>	O
0	int
)	O
{	O
count	int
=	O
min	function
(	O
data	pointer
->	O
paddingLen	int
,	O
data	pointer
->	O
buffStop	pointer
-	O
stream	pointer
->	O
rdNext	O
)	O
;	O
data	pointer
->	O
paddingLen	int
-=	O
count	int
;	O
stream	pointer
->	O
rdNext	O
+=	O
count	int
;	O
if	O
(	O
data	pointer
->	O
paddingLen	int
>	O
0	int
)	O
{	O
continue	O
;	O
}	O
}	O
if	O
(	O
data	pointer
->	O
eorStop	int
)	O
{	O
stream	pointer
->	O
stop	O
=	O
stream	pointer
->	O
rdNext	O
;	O
stream	pointer
->	O
isClosed	O
=	O
TRUE	O
;	O
return	O
;	O
}	O
count	int
=	O
min	function
(	O
(	O
int	O
)	O
sizeof	O
(	O
header	int
)	O
-	O
headerLen	int
,	O
data	pointer
->	O
buffStop	pointer
-	O
stream	pointer
->	O
rdNext	O
)	O
;	O
memcpy	function
(	O
(	O
(	O
char	O
*	O
)	O
(	O
&	O
header	int
)	O
)	O
+	O
headerLen	int
,	O
stream	pointer
->	O
rdNext	O
,	O
count	int
)	O
;	O
headerLen	int
+=	O
count	int
;	O
stream	pointer
->	O
rdNext	O
+=	O
count	int
;	O
if	O
(	O
headerLen	int
<	O
sizeof	O
(	O
header	int
)	O
)	O
{	O
continue	O
;	O
}	O
;	O
headerLen	int
=	O
0	int
;	O
data	pointer
->	O
eorStop	int
=	O
TRUE	O
;	O
stream	pointer
->	O
stop	O
=	O
stream	pointer
->	O
rdNext	O
;	O
status	int
=	O
ProcessHeader	function
(	O
header	int
,	O
stream	pointer
)	O
;	O
data	pointer
->	O
eorStop	int
=	O
FALSE	O
;	O
stream	pointer
->	O
isClosed	O
=	O
FALSE	O
;	O
switch	O
(	O
status	int
)	O
{	O
case	O
STREAM_RECORD	int
:	O
if	O
(	O
data	pointer
->	O
contentLen	int
==	O
0	int
)	O
{	O
stream	pointer
->	O
wrNext	O
=	O
stream	pointer
->	O
stop	O
=	O
stream	pointer
->	O
rdNext	O
;	O
stream	pointer
->	O
isClosed	O
=	O
TRUE	O
;	O
return	O
;	O
}	O
break	O
;	O
case	O
SKIP	int
:	O
data	pointer
->	O
skip	int
=	O
TRUE	O
;	O
break	O
;	O
case	O
BEGIN_RECORD	int
:	O
return	O
;	O
break	O
;	O
case	O
MGMT_RECORD	int
:	O
break	O
;	O
default	O
:	O
ASSERT	function
(	O
status	int
<	O
0	int
)	O
;	O
SetError	function
(	O
stream	pointer
,	O
status	int
)	O
;	O
return	O
;	O
break	O
;	O
}	O
}	O
}	O
static	O
FCGX_Stream	O
*	O
NewStream	function
(	O
ReqData	struct
*	O
reqDataPtr	pointer
,	O
int	O
bufflen	int
,	O
int	O
isReader	int
,	O
int	O
streamType	int
)	O
{	O
FCGX_Stream	O
*	O
stream	pointer
=	O
Malloc	function
(	O
sizeof	O
(	O
FCGX_Stream	O
)	O
)	O
;	O
FCGX_Stream_Data	struct
*	O
data	pointer
=	O
Malloc	function
(	O
sizeof	O
(	O
FCGX_Stream_Data	struct
)	O
)	O
;	O
data	pointer
->	O
reqDataPtr	pointer
=	O
reqDataPtr	pointer
;	O
bufflen	int
=	O
AlignInt8	function
(	O
min	function
(	O
max	function
(	O
bufflen	int
,	O
32	int
)	O
,	O
FCGI_MAX_LENGTH	O
+	O
1	int
)	O
)	O
;	O
data	pointer
->	O
bufflen	int
=	O
bufflen	int
;	O
data	pointer
->	O
mBuff	pointer
=	O
Malloc	function
(	O
bufflen	int
)	O
;	O
data	pointer
->	O
buff	array
=	O
AlignPtr8	function
(	O
data	pointer
->	O
mBuff	pointer
)	O
;	O
if	O
(	O
data	pointer
->	O
buff	array
!=	O
data	pointer
->	O
mBuff	pointer
)	O
{	O
data	pointer
->	O
bufflen	int
-=	O
8	int
;	O
}	O
if	O
(	O
isReader	int
)	O
{	O
data	pointer
->	O
buffStop	pointer
=	O
data	pointer
->	O
buff	array
;	O
}	O
else	O
{	O
data	pointer
->	O
buffStop	pointer
=	O
data	pointer
->	O
buff	array
+	O
data	pointer
->	O
bufflen	int
;	O
}	O
data	pointer
->	O
type	int
=	O
streamType	int
;	O
data	pointer
->	O
eorStop	int
=	O
FALSE	O
;	O
data	pointer
->	O
skip	int
=	O
FALSE	O
;	O
data	pointer
->	O
contentLen	int
=	O
0	int
;	O
data	pointer
->	O
paddingLen	int
=	O
0	int
;	O
data	pointer
->	O
isAnythingWritten	int
=	O
FALSE	O
;	O
data	pointer
->	O
rawWrite	int
=	O
FALSE	O
;	O
stream	pointer
->	O
data	pointer
=	O
data	pointer
;	O
stream	pointer
->	O
isReader	int
=	O
isReader	int
;	O
stream	pointer
->	O
isClosed	O
=	O
FALSE	O
;	O
stream	pointer
->	O
wasFCloseCalled	O
=	O
FALSE	O
;	O
stream	pointer
->	O
FCGI_errno	int
=	O
0	int
;	O
if	O
(	O
isReader	int
)	O
{	O
stream	pointer
->	O
fillBuffProc	O
=	O
FillBuffProc	function
;	O
stream	pointer
->	O
emptyBuffProc	O
=	O
NULL	O
;	O
stream	pointer
->	O
rdNext	O
=	O
data	pointer
->	O
buff	array
;	O
stream	pointer
->	O
stop	O
=	O
stream	pointer
->	O
rdNext	O
;	O
stream	pointer
->	O
stopUnget	O
=	O
data	pointer
->	O
buff	array
;	O
stream	pointer
->	O
wrNext	O
=	O
stream	pointer
->	O
stop	O
;	O
}	O
else	O
{	O
stream	pointer
->	O
fillBuffProc	O
=	O
NULL	O
;	O
stream	pointer
->	O
emptyBuffProc	O
=	O
EmptyBuffProc	function
;	O
stream	pointer
->	O
wrNext	O
=	O
data	pointer
->	O
buff	array
+	O
sizeof	O
(	O
FCGI_Header	O
)	O
;	O
stream	pointer
->	O
stop	O
=	O
data	pointer
->	O
buffStop	pointer
;	O
stream	pointer
->	O
stopUnget	O
=	O
NULL	O
;	O
stream	pointer
->	O
rdNext	O
=	O
stream	pointer
->	O
stop	O
;	O
}	O
return	O
stream	pointer
;	O
}	O
void	O
FreeStream	function
(	O
FCGX_Stream	O
*	O
*	O
streamPtr	pointer
)	O
{	O
FCGX_Stream	O
*	O
stream	pointer
=	O
*	O
streamPtr	pointer
;	O
FCGX_Stream_Data	struct
*	O
data	pointer
;	O
if	O
(	O
stream	pointer
==	O
NULL	O
)	O
{	O
return	O
;	O
}	O
data	pointer
=	O
stream	pointer
->	O
data	pointer
;	O
data	pointer
->	O
reqDataPtr	pointer
=	O
NULL	O
;	O
free	function
(	O
data	pointer
->	O
mBuff	pointer
)	O
;	O
free	function
(	O
data	pointer
)	O
;	O
free	function
(	O
stream	pointer
)	O
;	O
*	O
streamPtr	pointer
=	O
NULL	O
;	O
}	O
static	O
FCGX_Stream	O
*	O
SetReaderType	function
(	O
FCGX_Stream	O
*	O
stream	pointer
,	O
int	O
streamType	int
)	O
{	O
FCGX_Stream_Data	struct
*	O
data	pointer
=	O
stream	pointer
->	O
data	pointer
;	O
ASSERT	function
(	O
stream	pointer
->	O
isReader	int
)	O
;	O
data	pointer
->	O
type	int
=	O
streamType	int
;	O
data	pointer
->	O
eorStop	int
=	O
FALSE	O
;	O
data	pointer
->	O
skip	int
=	O
FALSE	O
;	O
data	pointer
->	O
contentLen	int
=	O
0	int
;	O
data	pointer
->	O
paddingLen	int
=	O
0	int
;	O
stream	pointer
->	O
wrNext	O
=	O
stream	pointer
->	O
stop	O
=	O
stream	pointer
->	O
rdNext	O
;	O
stream	pointer
->	O
isClosed	O
=	O
FALSE	O
;	O
return	O
stream	pointer
;	O
}	O
static	O
FCGX_Stream	O
*	O
NewReader	function
(	O
ReqData	struct
*	O
reqDataPtr	pointer
,	O
int	O
bufflen	int
,	O
int	O
streamType	int
)	O
{	O
return	O
NewStream	function
(	O
reqDataPtr	pointer
,	O
bufflen	int
,	O
TRUE	O
,	O
streamType	int
)	O
;	O
}	O
static	O
FCGX_Stream	O
*	O
NewWriter	function
(	O
ReqData	struct
*	O
reqDataPtr	pointer
,	O
int	O
bufflen	int
,	O
int	O
streamType	int
)	O
{	O
return	O
NewStream	function
(	O
reqDataPtr	pointer
,	O
bufflen	int
,	O
FALSE	O
,	O
streamType	int
)	O
;	O
}	O
FCGX_Stream	O
*	O
CreateWriter	function
(	O
int	O
ipcFd	int
,	O
int	O
requestId	int
,	O
int	O
bufflen	int
,	O
int	O
streamType	int
)	O
{	O
ReqData	struct
*	O
reqDataPtr	pointer
=	O
Malloc	function
(	O
sizeof	O
(	O
ReqData	struct
)	O
)	O
;	O
reqDataPtr	pointer
->	O
ipcFd	int
=	O
ipcFd	int
;	O
reqDataPtr	pointer
->	O
requestId	int
=	O
requestId	int
;	O
reqDataPtr	pointer
->	O
nWriters	int
=	O
2	int
;	O
return	O
NewWriter	function
(	O
reqDataPtr	pointer
,	O
bufflen	int
,	O
streamType	int
)	O
;	O
}	O
static	O
int	O
isCGI	int
=	O
-	O
1	int
;	O
static	O
int	O
isFastCGI	int
=	O
-	O
1	int
;	O
int	O
FCGX_IsCGI	function
(	O
void	O
)	O
{	O
if	O
(	O
isCGI	int
!=	O
-	O
1	int
)	O
{	O
return	O
isCGI	int
;	O
}	O
if	O
(	O
!	O
osLibInitialized	int
)	O
{	O
if	O
(	O
OS_LibInit	function
(	O
NULL	O
)	O
==	O
-	O
1	int
)	O
{	O
exit	function
(	O
OS_Errno	O
)	O
;	O
}	O
osLibInitialized	int
=	O
1	int
;	O
}	O
isFastCGI	int
=	O
OS_IsFcgi	function
(	O
)	O
;	O
isCGI	int
=	O
!	O
isFastCGI	int
;	O
return	O
isCGI	int
;	O
}	O
static	O
ReqData	struct
*	O
reqDataPtr	pointer
=	O
NULL	O
;	O
void	O
FCGX_Finish	function
(	O
void	O
)	O
{	O
if	O
(	O
reqDataPtr	pointer
!=	O
NULL	O
&&	O
reqDataPtr	pointer
->	O
inStream	pointer
!=	O
NULL	O
)	O
{	O
int	O
errStatus	int
=	O
FCGX_FClose	function
(	O
reqDataPtr	pointer
->	O
errStream	pointer
)	O
;	O
int	O
outStatus	int
=	O
FCGX_FClose	function
(	O
reqDataPtr	pointer
->	O
outStream	pointer
)	O
;	O
int	O
prevRequestFailed	int
=	O
(	O
errStatus	int
!=	O
0	int
)	O
||	O
(	O
outStatus	int
!=	O
0	int
)	O
||	O
(	O
FCGX_GetError	function
(	O
reqDataPtr	pointer
->	O
inStream	pointer
)	O
!=	O
0	int
)	O
;	O
ASSERT	function
(	O
reqDataPtr	pointer
->	O
nWriters	int
==	O
0	int
)	O
;	O
FreeStream	function
(	O
&	O
reqDataPtr	pointer
->	O
inStream	pointer
)	O
;	O
FreeStream	function
(	O
&	O
reqDataPtr	pointer
->	O
outStream	pointer
)	O
;	O
FreeStream	function
(	O
&	O
reqDataPtr	pointer
->	O
errStream	pointer
)	O
;	O
FreeParams	function
(	O
&	O
reqDataPtr	pointer
->	O
paramsPtr	pointer
)	O
;	O
if	O
(	O
prevRequestFailed	int
||	O
!	O
reqDataPtr	pointer
->	O
keepConnection	int
)	O
{	O
OS_IpcClose	function
(	O
reqDataPtr	pointer
->	O
ipcFd	int
)	O
;	O
reqDataPtr	pointer
->	O
ipcFd	int
=	O
-	O
1	int
;	O
}	O
}	O
}	O
static	O
ReqData	struct
reqData	struct
;	O
static	O
char	O
*	O
webServerAddressList	pointer
=	O
NULL	O
;	O
int	O
FCGX_Accept	function
(	O
FCGX_Stream	O
*	O
*	O
in	pointer
,	O
FCGX_Stream	O
*	O
*	O
out	pointer
,	O
FCGX_Stream	O
*	O
*	O
err	pointer
,	O
FCGX_ParamArray	O
*	O
envp	int
)	O
{	O
ASSERT	function
(	O
sizeof	O
(	O
FCGI_Header	O
)	O
==	O
FCGI_HEADER_LEN	O
)	O
;	O
if	O
(	O
!	O
osLibInitialized	int
)	O
{	O
if	O
(	O
OS_LibInit	function
(	O
NULL	O
)	O
==	O
-	O
1	int
)	O
{	O
exit	function
(	O
OS_Errno	O
)	O
;	O
}	O
osLibInitialized	int
=	O
1	int
;	O
}	O
ASSERT	function
(	O
sizeof	O
(	O
FCGI_Header	O
)	O
==	O
FCGI_HEADER_LEN	O
)	O
;	O
if	O
(	O
reqDataPtr	pointer
==	O
NULL	O
)	O
{	O
char	O
*	O
p	pointer
=	O
getenv	function
(	O
"FCGI_WEB_SERVER_ADDRS"	pointer
)	O
;	O
if	O
(	O
p	pointer
!=	O
NULL	O
)	O
{	O
webServerAddressList	pointer
=	O
StringCopy	function
(	O
p	pointer
)	O
;	O
}	O
reqDataPtr	pointer
=	O
&	O
reqData	struct
;	O
reqDataPtr	pointer
->	O
ipcFd	int
=	O
-	O
1	int
;	O
reqDataPtr	pointer
->	O
inStream	pointer
=	O
NULL	O
;	O
reqDataPtr	pointer
->	O
outStream	pointer
=	O
NULL	O
;	O
reqDataPtr	pointer
->	O
errStream	pointer
=	O
NULL	O
;	O
}	O
else	O
{	O
FCGX_Finish	function
(	O
)	O
;	O
}	O
for	O
(	O
;	O
;	O
)	O
{	O
if	O
(	O
reqDataPtr	pointer
->	O
ipcFd	int
<	O
0	int
)	O
{	O
reqDataPtr	pointer
->	O
ipcFd	int
=	O
OS_FcgiIpcAccept	function
(	O
webServerAddressList	pointer
)	O
;	O
if	O
(	O
reqDataPtr	pointer
->	O
ipcFd	int
<	O
0	int
)	O
{	O
reqDataPtr	pointer
=	O
NULL	O
;	O
return	O
-	O
1	int
;	O
}	O
}	O
reqDataPtr	pointer
->	O
isBeginProcessed	int
=	O
FALSE	O
;	O
reqDataPtr	pointer
->	O
inStream	pointer
=	O
NewReader	function
(	O
reqDataPtr	pointer
,	O
8192	int
,	O
0	int
)	O
;	O
FillBuffProc	function
(	O
reqDataPtr	pointer
->	O
inStream	pointer
)	O
;	O
if	O
(	O
!	O
reqDataPtr	pointer
->	O
isBeginProcessed	int
)	O
{	O
goto	O
TryAgain	O
;	O
}	O
{	O
char	O
*	O
roleStr	pointer
;	O
switch	O
(	O
reqDataPtr	pointer
->	O
role	int
)	O
{	O
case	O
FCGI_RESPONDER	O
:	O
roleStr	pointer
=	O
"FCGI_ROLE=RESPONDER"	pointer
;	O
break	O
;	O
case	O
FCGI_AUTHORIZER	O
:	O
roleStr	pointer
=	O
"FCGI_ROLE=AUTHORIZER"	pointer
;	O
break	O
;	O
case	O
FCGI_FILTER	O
:	O
roleStr	pointer
=	O
"FCGI_ROLE=FILTER"	pointer
;	O
break	O
;	O
default	O
:	O
goto	O
TryAgain	O
;	O
}	O
reqDataPtr	pointer
->	O
paramsPtr	pointer
=	O
NewParams	function
(	O
30	int
)	O
;	O
PutParam	function
(	O
reqDataPtr	pointer
->	O
paramsPtr	pointer
,	O
StringCopy	function
(	O
roleStr	pointer
)	O
)	O
;	O
}	O
SetReaderType	function
(	O
reqDataPtr	pointer
->	O
inStream	pointer
,	O
FCGI_PARAMS	O
)	O
;	O
if	O
(	O
ReadParams	function
(	O
reqDataPtr	pointer
->	O
paramsPtr	pointer
,	O
reqDataPtr	pointer
->	O
inStream	pointer
)	O
>=	O
0	int
)	O
{	O
break	O
;	O
}	O
TryAgain	O
:	O
FreeParams	function
(	O
&	O
reqDataPtr	pointer
->	O
paramsPtr	pointer
)	O
;	O
FreeStream	function
(	O
&	O
reqDataPtr	pointer
->	O
inStream	pointer
)	O
;	O
OS_Close	function
(	O
reqDataPtr	pointer
->	O
ipcFd	int
)	O
;	O
reqDataPtr	pointer
->	O
ipcFd	int
=	O
-	O
1	int
;	O
}	O
SetReaderType	function
(	O
reqDataPtr	pointer
->	O
inStream	pointer
,	O
FCGI_STDIN	O
)	O
;	O
reqDataPtr	pointer
->	O
outStream	pointer
=	O
NewWriter	function
(	O
reqDataPtr	pointer
,	O
8192	int
,	O
FCGI_STDOUT	O
)	O
;	O
reqDataPtr	pointer
->	O
errStream	pointer
=	O
NewWriter	function
(	O
reqDataPtr	pointer
,	O
512	int
,	O
FCGI_STDERR	O
)	O
;	O
reqDataPtr	pointer
->	O
nWriters	int
=	O
2	int
;	O
*	O
in	pointer
=	O
reqDataPtr	pointer
->	O
inStream	pointer
;	O
*	O
out	pointer
=	O
reqDataPtr	pointer
->	O
outStream	pointer
;	O
*	O
err	pointer
=	O
reqDataPtr	pointer
->	O
errStream	pointer
;	O
*	O
envp	int
=	O
reqDataPtr	pointer
->	O
paramsPtr	pointer
->	O
vec	int
;	O
return	O
0	int
;	O
}	O
int	O
FCGX_StartFilterData	function
(	O
FCGX_Stream	O
*	O
stream	pointer
)	O
{	O
FCGX_Stream_Data	struct
*	O
data	pointer
=	O
stream	pointer
->	O
data	pointer
;	O
if	O
(	O
data	pointer
->	O
reqDataPtr	pointer
->	O
role	int
!=	O
FCGI_FILTER	O
||	O
!	O
stream	pointer
->	O
isReader	int
||	O
!	O
stream	pointer
->	O
isClosed	O
||	O
data	pointer
->	O
type	int
!=	O
FCGI_STDIN	O
)	O
{	O
SetError	function
(	O
stream	pointer
,	O
FCGX_CALL_SEQ_ERROR	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
SetReaderType	function
(	O
reqDataPtr	pointer
->	O
inStream	pointer
,	O
FCGI_DATA	O
)	O
;	O
return	O
0	int
;	O
}	O
void	O
FCGX_SetExitStatus	function
(	O
int	O
status	int
,	O
FCGX_Stream	O
*	O
stream	pointer
)	O
{	O
FCGX_Stream_Data	struct
*	O
data	pointer
=	O
stream	pointer
->	O
data	pointer
;	O
data	pointer
->	O
reqDataPtr	pointer
->	O
appStatus	int
=	O
status	int
;	O
}	O
