static	O
void	O
hash_rehash	function
(	O
struct	O
hash_table	struct
*	O
ht	pointer
)	O
;	O
static	O
unsigned	O
long	O
round_up_2	function
(	O
unsigned	O
long	O
rough	long
)	O
;	O
void	O
*	O
hash_deleted_item	pointer
=	O
&	O
hash_deleted_item	pointer
;	O
void	O
hash_init	function
(	O
struct	O
hash_table	struct
*	O
ht	pointer
,	O
unsigned	O
long	O
size	long
,	O
hash_func_t	pointer
hash_1	pointer
,	O
hash_func_t	pointer
hash_2	pointer
,	O
hash_cmp_func_t	pointer
hash_cmp	pointer
)	O
{	O
ht	pointer
->	O
ht_size	long
=	O
round_up_2	function
(	O
size	long
)	O
;	O
ht	pointer
->	O
ht_empty_slots	long
=	O
ht	pointer
->	O
ht_size	long
;	O
ht	pointer
->	O
ht_vec	pointer
=	O
(	O
void	O
*	O
*	O
)	O
xcalloc	function
(	O
ht	pointer
->	O
ht_size	long
,	O
sizeof	O
(	O
struct	O
token	O
*	O
)	O
)	O
;	O
if	O
(	O
ht	pointer
->	O
ht_vec	pointer
==	O
0	int
)	O
error	function
(	O
1	int
,	O
0	int
,	O
_	O
(	O
"can't allocate %ld bytes for hash table: memory exhausted"	pointer
)	O
,	O
ht	pointer
->	O
ht_size	long
*	O
sizeof	O
(	O
struct	O
token	O
*	O
)	O
)	O
;	O
ht	pointer
->	O
ht_capacity	long
=	O
ht	pointer
->	O
ht_size	long
*	O
15	int
/	O
16	int
;	O
ht	pointer
->	O
ht_fill	long
=	O
0	int
;	O
ht	pointer
->	O
ht_collisions	long
=	O
0	int
;	O
ht	pointer
->	O
ht_lookups	long
=	O
0	int
;	O
ht	pointer
->	O
ht_rehashes	int
=	O
0	int
;	O
ht	pointer
->	O
ht_hash_1	pointer
=	O
hash_1	pointer
;	O
ht	pointer
->	O
ht_hash_2	pointer
=	O
hash_2	pointer
;	O
ht	pointer
->	O
ht_compare	pointer
=	O
hash_cmp	pointer
;	O
}	O
void	O
hash_load	function
(	O
struct	O
hash_table	struct
*	O
ht	pointer
,	O
void	O
*	O
item_table	pointer
,	O
unsigned	O
long	O
cardinality	long
,	O
unsigned	O
long	O
size	long
)	O
{	O
char	O
*	O
items	pointer
=	O
(	O
char	O
*	O
)	O
item_table	pointer
;	O
while	O
(	O
cardinality	long
--	O
)	O
{	O
hash_insert	function
(	O
ht	pointer
,	O
items	pointer
)	O
;	O
items	pointer
+=	O
size	long
;	O
}	O
}	O
void	O
*	O
*	O
hash_find_slot	function
(	O
struct	O
hash_table	struct
*	O
ht	pointer
,	O
void	O
const	O
*	O
key	pointer
)	O
{	O
void	O
*	O
*	O
slot	pointer
;	O
void	O
*	O
*	O
deleted_slot	pointer
=	O
0	int
;	O
unsigned	O
int	O
hash_2	pointer
=	O
0	int
;	O
unsigned	O
int	O
hash_1	pointer
=	O
(	O
*	O
ht	pointer
->	O
ht_hash_1	pointer
)	O
(	O
key	pointer
)	O
;	O
ht	pointer
->	O
ht_lookups	long
++	O
;	O
for	O
(	O
;	O
;	O
)	O
{	O
hash_1	pointer
%=	O
ht	pointer
->	O
ht_size	long
;	O
slot	pointer
=	O
&	O
ht	pointer
->	O
ht_vec	pointer
[	O
hash_1	pointer
]	O
;	O
if	O
(	O
*	O
slot	pointer
==	O
0	int
)	O
return	O
(	O
deleted_slot	pointer
?	O
deleted_slot	pointer
:	O
slot	pointer
)	O
;	O
if	O
(	O
*	O
slot	pointer
==	O
hash_deleted_item	pointer
)	O
{	O
if	O
(	O
deleted_slot	pointer
==	O
0	int
)	O
deleted_slot	pointer
=	O
slot	pointer
;	O
}	O
else	O
{	O
if	O
(	O
key	pointer
==	O
*	O
slot	pointer
)	O
return	O
slot	pointer
;	O
if	O
(	O
(	O
*	O
ht	pointer
->	O
ht_compare	pointer
)	O
(	O
key	pointer
,	O
*	O
slot	pointer
)	O
==	O
0	int
)	O
return	O
slot	pointer
;	O
ht	pointer
->	O
ht_collisions	long
++	O
;	O
}	O
if	O
(	O
!	O
hash_2	pointer
)	O
hash_2	pointer
=	O
(	O
*	O
ht	pointer
->	O
ht_hash_2	pointer
)	O
(	O
key	pointer
)	O
|	O
1	int
;	O
hash_1	pointer
+=	O
hash_2	pointer
;	O
}	O
}	O
void	O
*	O
hash_find_item	function
(	O
struct	O
hash_table	struct
*	O
ht	pointer
,	O
void	O
const	O
*	O
key	pointer
)	O
{	O
void	O
*	O
*	O
slot	pointer
=	O
hash_find_slot	function
(	O
ht	pointer
,	O
key	pointer
)	O
;	O
return	O
(	O
(	O
HASH_VACANT	O
(	O
*	O
slot	pointer
)	O
)	O
?	O
0	int
:	O
*	O
slot	pointer
)	O
;	O
}	O
void	O
*	O
hash_insert	function
(	O
struct	O
hash_table	struct
*	O
ht	pointer
,	O
void	O
*	O
item	pointer
)	O
{	O
void	O
*	O
*	O
slot	pointer
=	O
hash_find_slot	function
(	O
ht	pointer
,	O
item	pointer
)	O
;	O
void	O
*	O
old_item	pointer
=	O
slot	pointer
?	O
*	O
slot	pointer
:	O
0	int
;	O
hash_insert_at	function
(	O
ht	pointer
,	O
item	pointer
,	O
slot	pointer
)	O
;	O
return	O
(	O
(	O
HASH_VACANT	O
(	O
old_item	pointer
)	O
)	O
?	O
0	int
:	O
old_item	pointer
)	O
;	O
}	O
void	O
*	O
hash_insert_at	function
(	O
struct	O
hash_table	struct
*	O
ht	pointer
,	O
void	O
*	O
item	pointer
,	O
void	O
const	O
*	O
slot	pointer
)	O
{	O
void	O
*	O
old_item	pointer
=	O
*	O
(	O
void	O
*	O
*	O
)	O
slot	pointer
;	O
if	O
(	O
HASH_VACANT	O
(	O
old_item	pointer
)	O
)	O
{	O
ht	pointer
->	O
ht_fill	long
++	O
;	O
if	O
(	O
old_item	pointer
==	O
0	int
)	O
ht	pointer
->	O
ht_empty_slots	long
--	O
;	O
old_item	pointer
=	O
item	pointer
;	O
}	O
*	O
(	O
void	O
const	O
*	O
*	O
)	O
slot	pointer
=	O
item	pointer
;	O
if	O
(	O
ht	pointer
->	O
ht_empty_slots	long
<	O
ht	pointer
->	O
ht_size	long
-	O
ht	pointer
->	O
ht_capacity	long
)	O
{	O
hash_rehash	function
(	O
ht	pointer
)	O
;	O
return	O
(	O
void	O
*	O
)	O
hash_find_slot	function
(	O
ht	pointer
,	O
item	pointer
)	O
;	O
}	O
else	O
return	O
(	O
void	O
*	O
)	O
slot	pointer
;	O
}	O
void	O
*	O
hash_delete	function
(	O
struct	O
hash_table	struct
*	O
ht	pointer
,	O
void	O
const	O
*	O
item	pointer
)	O
{	O
void	O
*	O
*	O
slot	pointer
=	O
hash_find_slot	function
(	O
ht	pointer
,	O
item	pointer
)	O
;	O
return	O
hash_delete_at	function
(	O
ht	pointer
,	O
slot	pointer
)	O
;	O
}	O
void	O
*	O
hash_delete_at	function
(	O
struct	O
hash_table	struct
*	O
ht	pointer
,	O
void	O
const	O
*	O
slot	pointer
)	O
{	O
void	O
*	O
item	pointer
=	O
*	O
(	O
void	O
*	O
*	O
)	O
slot	pointer
;	O
if	O
(	O
!	O
HASH_VACANT	O
(	O
item	pointer
)	O
)	O
{	O
*	O
(	O
void	O
const	O
*	O
*	O
)	O
slot	pointer
=	O
hash_deleted_item	pointer
;	O
ht	pointer
->	O
ht_fill	long
--	O
;	O
return	O
item	pointer
;	O
}	O
else	O
return	O
0	int
;	O
}	O
void	O
hash_free_items	function
(	O
struct	O
hash_table	struct
*	O
ht	pointer
)	O
{	O
void	O
*	O
*	O
vec	pointer
=	O
ht	pointer
->	O
ht_vec	pointer
;	O
void	O
*	O
*	O
end	pointer
=	O
&	O
vec	pointer
[	O
ht	pointer
->	O
ht_size	long
]	O
;	O
for	O
(	O
;	O
vec	pointer
<	O
end	pointer
;	O
vec	pointer
++	O
)	O
{	O
void	O
*	O
item	pointer
=	O
*	O
vec	pointer
;	O
if	O
(	O
!	O
HASH_VACANT	O
(	O
item	pointer
)	O
)	O
free	function
(	O
item	pointer
)	O
;	O
*	O
vec	pointer
=	O
0	int
;	O
}	O
ht	pointer
->	O
ht_fill	long
=	O
0	int
;	O
ht	pointer
->	O
ht_empty_slots	long
=	O
ht	pointer
->	O
ht_size	long
;	O
}	O
void	O
hash_delete_items	function
(	O
struct	O
hash_table	struct
*	O
ht	pointer
)	O
{	O
void	O
*	O
*	O
vec	pointer
=	O
ht	pointer
->	O
ht_vec	pointer
;	O
void	O
*	O
*	O
end	pointer
=	O
&	O
vec	pointer
[	O
ht	pointer
->	O
ht_size	long
]	O
;	O
for	O
(	O
;	O
vec	pointer
<	O
end	pointer
;	O
vec	pointer
++	O
)	O
*	O
vec	pointer
=	O
0	int
;	O
ht	pointer
->	O
ht_fill	long
=	O
0	int
;	O
ht	pointer
->	O
ht_collisions	long
=	O
0	int
;	O
ht	pointer
->	O
ht_lookups	long
=	O
0	int
;	O
ht	pointer
->	O
ht_rehashes	int
=	O
0	int
;	O
ht	pointer
->	O
ht_empty_slots	long
=	O
ht	pointer
->	O
ht_size	long
;	O
}	O
void	O
hash_free	function
(	O
struct	O
hash_table	struct
*	O
ht	pointer
,	O
int	O
free_items	int
)	O
{	O
if	O
(	O
free_items	int
)	O
hash_free_items	function
(	O
ht	pointer
)	O
;	O
else	O
{	O
ht	pointer
->	O
ht_fill	long
=	O
0	int
;	O
ht	pointer
->	O
ht_empty_slots	long
=	O
ht	pointer
->	O
ht_size	long
;	O
}	O
free	function
(	O
ht	pointer
->	O
ht_vec	pointer
)	O
;	O
ht	pointer
->	O
ht_vec	pointer
=	O
0	int
;	O
ht	pointer
->	O
ht_capacity	long
=	O
0	int
;	O
}	O
void	O
hash_map	function
(	O
struct	O
hash_table	struct
*	O
ht	pointer
,	O
hash_map_func_t	pointer
map	pointer
)	O
{	O
void	O
*	O
*	O
slot	pointer
;	O
void	O
*	O
*	O
end	pointer
=	O
&	O
ht	pointer
->	O
ht_vec	pointer
[	O
ht	pointer
->	O
ht_size	long
]	O
;	O
for	O
(	O
slot	pointer
=	O
ht	pointer
->	O
ht_vec	pointer
;	O
slot	pointer
<	O
end	pointer
;	O
slot	pointer
++	O
)	O
{	O
if	O
(	O
!	O
HASH_VACANT	O
(	O
*	O
slot	pointer
)	O
)	O
(	O
*	O
map	pointer
)	O
(	O
*	O
slot	pointer
)	O
;	O
}	O
}	O
static	O
void	O
hash_rehash	function
(	O
struct	O
hash_table	struct
*	O
ht	pointer
)	O
{	O
unsigned	O
long	O
old_ht_size	long
=	O
ht	pointer
->	O
ht_size	long
;	O
void	O
*	O
*	O
old_vec	pointer
=	O
ht	pointer
->	O
ht_vec	pointer
;	O
void	O
*	O
*	O
ovp	pointer
;	O
if	O
(	O
ht	pointer
->	O
ht_fill	long
>=	O
ht	pointer
->	O
ht_capacity	long
)	O
{	O
ht	pointer
->	O
ht_size	long
*=	O
2	int
;	O
ht	pointer
->	O
ht_capacity	long
=	O
ht	pointer
->	O
ht_size	long
-	O
(	O
ht	pointer
->	O
ht_size	long
>>	O
4	int
)	O
;	O
}	O
ht	pointer
->	O
ht_rehashes	int
++	O
;	O
ht	pointer
->	O
ht_vec	pointer
=	O
(	O
void	O
*	O
*	O
)	O
xcalloc	function
(	O
ht	pointer
->	O
ht_size	long
,	O
sizeof	O
(	O
struct	O
token	O
*	O
)	O
)	O
;	O
for	O
(	O
ovp	pointer
=	O
old_vec	pointer
;	O
ovp	pointer
<	O
&	O
old_vec	pointer
[	O
old_ht_size	long
]	O
;	O
ovp	pointer
++	O
)	O
{	O
if	O
(	O
!	O
HASH_VACANT	O
(	O
*	O
ovp	pointer
)	O
)	O
{	O
void	O
*	O
*	O
slot	pointer
=	O
hash_find_slot	function
(	O
ht	pointer
,	O
*	O
ovp	pointer
)	O
;	O
*	O
slot	pointer
=	O
*	O
ovp	pointer
;	O
}	O
}	O
ht	pointer
->	O
ht_empty_slots	long
=	O
ht	pointer
->	O
ht_size	long
-	O
ht	pointer
->	O
ht_fill	long
;	O
free	function
(	O
old_vec	pointer
)	O
;	O
}	O
void	O
hash_print_stats	function
(	O
struct	O
hash_table	struct
*	O
ht	pointer
,	O
FILE	struct
*	O
out_FILE	pointer
)	O
{	O
fprintf	function
(	O
out_FILE	pointer
,	O
_	O
(	O
"Load=%ld/%ld=%.0f%%, "	pointer
)	O
,	O
ht	pointer
->	O
ht_fill	long
,	O
ht	pointer
->	O
ht_size	long
,	O
100.0	int
*	O
(	O
double	O
)	O
ht	pointer
->	O
ht_fill	long
/	O
(	O
double	O
)	O
ht	pointer
->	O
ht_size	long
)	O
;	O
fprintf	function
(	O
out_FILE	pointer
,	O
_	O
(	O
"Rehash=%d, "	pointer
)	O
,	O
ht	pointer
->	O
ht_rehashes	int
)	O
;	O
fprintf	function
(	O
out_FILE	pointer
,	O
_	O
(	O
"Collisions=%ld/%ld=%.0f%%"	pointer
)	O
,	O
ht	pointer
->	O
ht_collisions	long
,	O
ht	pointer
->	O
ht_lookups	long
,	O
(	O
ht	pointer
->	O
ht_lookups	long
?	O
(	O
100.0	int
*	O
(	O
double	O
)	O
ht	pointer
->	O
ht_collisions	long
/	O
(	O
double	O
)	O
ht	pointer
->	O
ht_lookups	long
)	O
:	O
0	int
)	O
)	O
;	O
}	O
void	O
*	O
*	O
hash_dump	function
(	O
struct	O
hash_table	struct
*	O
ht	pointer
,	O
void	O
*	O
*	O
vector_0	pointer
,	O
qsort_cmp_t	pointer
compare	pointer
)	O
{	O
void	O
*	O
*	O
vector	pointer
;	O
void	O
*	O
*	O
slot	pointer
;	O
void	O
*	O
*	O
end	pointer
=	O
&	O
ht	pointer
->	O
ht_vec	pointer
[	O
ht	pointer
->	O
ht_size	long
]	O
;	O
if	O
(	O
vector_0	pointer
==	O
0	int
)	O
vector_0	pointer
=	O
xmalloc	function
(	O
sizeof	O
(	O
void	O
*	O
)	O
*	O
(	O
ht	pointer
->	O
ht_fill	long
+	O
1	int
)	O
)	O
;	O
vector	pointer
=	O
vector_0	pointer
;	O
for	O
(	O
slot	pointer
=	O
ht	pointer
->	O
ht_vec	pointer
;	O
slot	pointer
<	O
end	pointer
;	O
slot	pointer
++	O
)	O
if	O
(	O
!	O
HASH_VACANT	O
(	O
*	O
slot	pointer
)	O
)	O
*	O
vector	pointer
++	O
=	O
*	O
slot	pointer
;	O
*	O
vector	pointer
=	O
0	int
;	O
if	O
(	O
compare	pointer
)	O
qsort	function
(	O
vector_0	pointer
,	O
ht	pointer
->	O
ht_fill	long
,	O
sizeof	O
(	O
void	O
*	O
)	O
,	O
compare	pointer
)	O
;	O
return	O
vector_0	pointer
;	O
}	O
static	O
unsigned	O
long	O
round_up_2	function
(	O
unsigned	O
long	O
rough	long
)	O
{	O
int	O
round	int
;	O
round	int
=	O
1	int
;	O
while	O
(	O
rough	long
)	O
{	O
round	int
<<=	O
1	int
;	O
rough	long
>>=	O
1	int
;	O
}	O
return	O
round	int
;	O
}	O
