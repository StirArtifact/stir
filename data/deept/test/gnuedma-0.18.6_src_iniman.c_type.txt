typedef	O
struct	O
{	O
FILE	struct
*	O
f	pointer
;	O
EPChar	pointer
p	pointer
;	O
EUint32	int
tam	int
;	O
EChar	O
Name	pointer
[	O
500	int
]	O
;	O
}	O
INIFILE	int
,	O
*	O
PINIFILE	pointer
;	O
PINIFILE	pointer
EDMAPROC	O
edma_open_ini	function
(	O
EPChar	pointer
Name	pointer
)	O
{	O
PINIFILE	int
pini	pointer
;	O
EUint32	int
tam	int
;	O
if	O
(	O
Name	pointer
==	O
NULL	O
)	O
{	O
edma_printf_err	function
(	O
"%s"	pointer
,	O
"[edma_open_ini] Invalid file name"	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
pini	pointer
=	O
(	O
PINIFILE	pointer
)	O
edma_palloc	function
(	O
sizeof	O
(	O
INIFILE	pointer
)	O
)	O
;	O
if	O
(	O
pini	pointer
==	O
NULL	O
)	O
{	O
printf	function
(	O
"\nCan't alloc INIFILE struct"	pointer
)	O
;	O
return	O
0	int
;	O
}	O
strncpy	function
(	O
pini	pointer
->	O
Name	pointer
,	O
Name	pointer
,	O
500	int
)	O
;	O
pini	pointer
->	O
f	pointer
=	O
fopen	function
(	O
Name	pointer
,	O
"rb"	pointer
)	O
;	O
if	O
(	O
pini	pointer
->	O
f	pointer
==	O
NULL	O
)	O
{	O
printf	function
(	O
"\n[%s] Can't Open file %s"	pointer
,	O
__FUNCTION__	O
,	O
Name	pointer
)	O
;	O
return	O
0	int
;	O
}	O
fseek	function
(	O
pini	pointer
->	O
f	pointer
,	O
0	int
,	O
SEEK_END	int
)	O
;	O
pini	pointer
->	O
tam	pointer
=	O
ftell	function
(	O
pini	pointer
->	O
f	pointer
)	O
;	O
pini	pointer
->	O
p	pointer
=	O
(	O
EPChar	pointer
)	O
edma_palloc	function
(	O
pini	pointer
->	O
tam	pointer
)	O
;	O
if	O
(	O
pini	pointer
->	O
p	pointer
==	O
NULL	O
)	O
{	O
printf	function
(	O
"\nCan't alloc %ld bytes for file %s"	pointer
,	O
pini	pointer
->	O
tam	pointer
,	O
Name	pointer
)	O
;	O
return	O
0	int
;	O
}	O
memset	function
(	O
pini	pointer
->	O
p	pointer
,	O
0	int
,	O
pini	pointer
->	O
tam	pointer
)	O
;	O
fseek	function
(	O
pini	pointer
->	O
f	pointer
,	O
0	int
,	O
SEEK_SET	int
)	O
;	O
tam	pointer
=	O
fread	function
(	O
pini	pointer
->	O
p	pointer
,	O
sizeof	O
(	O
char	O
)	O
,	O
pini	pointer
->	O
tam	int
,	O
pini	pointer
->	O
f	pointer
)	O
;	O
fclose	function
(	O
pini	pointer
->	O
f	pointer
)	O
;	O
return	O
pini	pointer
;	O
}	O
ESint32	int
EDMAPROC	O
edma_close_ini	function
(	O
PINIFILE	O
pini	pointer
)	O
{	O
if	O
(	O
pini	pointer
==	O
NULL	O
)	O
{	O
edma_printf_err	function
(	O
"%s"	pointer
,	O
"[edma_close_ini] Invalid file handler"	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
edma_pfree	function
(	O
(	O
HMEM	long
)	O
pini	pointer
->	O
p	pointer
,	O
pini	pointer
->	O
p	pointer
)	O
;	O
edma_pfree	function
(	O
(	O
HMEM	long
)	O
pini	int
,	O
pini	pointer
)	O
;	O
return	O
0	int
;	O
}	O
ESint32	int
EDMAPROC	O
edma_get_ini_int	function
(	O
PINIFILE	pointer
pini	pointer
,	O
EPChar	pointer
Section	pointer
,	O
EPChar	pointer
Val	pointer
,	O
ESint32	int
def	int
)	O
{	O
EPChar	pointer
pi	pointer
;	O
EPChar	pointer
pe	pointer
;	O
EUint32	int
i	int
;	O
if	O
(	O
pini	pointer
==	O
NULL	O
)	O
{	O
edma_printf_err	function
(	O
"%s"	pointer
,	O
"[edma_get_ini_int] Invalid file handler"	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
Section	pointer
==	O
NULL	O
)	O
{	O
edma_printf_err	function
(	O
"%s"	pointer
,	O
"[edma_get_ini_int] Invalid Section"	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
Val	pointer
==	O
NULL	O
)	O
{	O
edma_printf_err	function
(	O
"%s"	pointer
,	O
"[edma_get_ini_int] Invalid Field"	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
pi	long
=	O
strstr	function
(	O
pini	pointer
->	O
p	pointer
,	O
Section	pointer
)	O
;	O
if	O
(	O
pi	pointer
==	O
NULL	O
)	O
return	O
def	pointer
;	O
pe	pointer
=	O
strchr	function
(	O
pi	pointer
,	O
'['	O
)	O
;	O
if	O
(	O
pe	pointer
!=	O
NULL	O
)	O
*	O
pe	pointer
=	O
0	int
;	O
pi	int
=	O
strstr	function
(	O
pi	int
,	O
Val	int
)	O
;	O
if	O
(	O
pi	pointer
==	O
NULL	O
)	O
{	O
*	O
pe	pointer
=	O
'['	O
;	O
return	O
def	pointer
;	O
}	O
pi	pointer
=	O
strchr	function
(	O
pi	pointer
,	O
'='	O
)	O
;	O
pi	int
++	O
;	O
i	int
=	O
atoi	function
(	O
pi	pointer
)	O
;	O
*	O
pe	pointer
=	O
'['	O
;	O
return	O
i	int
;	O
}	O
EUint32	int
EDMAPROC	O
edma_get_ini_string	function
(	O
PINIFILE	pointer
pini	pointer
,	O
EPChar	pointer
Section	pointer
,	O
EPChar	pointer
Val	pointer
,	O
EPChar	pointer
def	pointer
,	O
EPChar	pointer
Buffer	pointer
,	O
EUint32	int
size	int
)	O
{	O
EPChar	pointer
pi	pointer
;	O
EPChar	pointer
pe	pointer
,	O
pe1	int
;	O
EChar	O
sec	array
[	O
80	int
]	O
;	O
EUint32	int
n	int
;	O
if	O
(	O
pini	pointer
==	O
NULL	O
)	O
{	O
edma_printf_err	function
(	O
"%s"	pointer
,	O
"[edma_get_ini_string] Invalid file handler"	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
Section	pointer
==	O
NULL	O
)	O
{	O
edma_printf_err	function
(	O
"%s"	pointer
,	O
"[edma_get_ini_string] Invalid Section"	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
Val	pointer
==	O
NULL	O
)	O
{	O
edma_printf_err	function
(	O
"%s"	pointer
,	O
"[edma_get_ini_string] Invalid Field"	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
Buffer	pointer
==	O
NULL	O
)	O
{	O
edma_printf_err	function
(	O
"%s"	pointer
,	O
"[edma_get_ini_string] Invalid Target buffer"	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
memset	function
(	O
Buffer	pointer
,	O
0	int
,	O
size	int
)	O
;	O
snprintf	function
(	O
sec	pointer
,	O
80	int
,	O
"[%s]"	int
,	O
Section	int
)	O
;	O
pi	int
=	O
strstr	function
(	O
pini	pointer
->	O
p	pointer
,	O
sec	pointer
)	O
;	O
if	O
(	O
pi	pointer
==	O
NULL	O
)	O
{	O
return	O
0	int
;	O
}	O
pi	int
++	O
;	O
pe	pointer
=	O
strchr	function
(	O
pi	int
,	O
'['	O
)	O
;	O
if	O
(	O
pe	pointer
!=	O
NULL	O
)	O
*	O
pe	pointer
=	O
0	int
;	O
pi	int
=	O
strstr	function
(	O
pi	int
,	O
Val	int
)	O
;	O
if	O
(	O
(	O
pi	pointer
==	O
NULL	O
)	O
)	O
{	O
*	O
pe	pointer
=	O
'['	O
;	O
return	O
0	int
;	O
}	O
pi	pointer
=	O
strchr	function
(	O
pi	pointer
,	O
'='	O
)	O
;	O
pe1	pointer
=	O
strchr	function
(	O
pi	int
,	O
13	int
)	O
;	O
if	O
(	O
pe1	pointer
==	O
NULL	O
)	O
{	O
pe1	pointer
=	O
strchr	function
(	O
pi	int
,	O
10	int
)	O
;	O
if	O
(	O
pe1	pointer
==	O
NULL	O
)	O
{	O
printf	function
(	O
"%s"	pointer
,	O
"[edma_get_ini_string] Can't locate end of line"	pointer
)	O
;	O
return	O
0	int
;	O
}	O
}	O
n	int
=	O
pe1	int
-	O
pi	int
;	O
n	int
--	O
;	O
pi	int
++	O
;	O
strncpy	function
(	O
Buffer	pointer
,	O
pi	int
,	O
n	int
)	O
;	O
Buffer	pointer
[	O
n	int
]	O
=	O
0	int
;	O
*	O
pe	pointer
=	O
'['	O
;	O
n	int
=	O
strlen	function
(	O
Buffer	pointer
)	O
;	O
return	O
n	int
;	O
}	O
ESint32	int
EDMAPROC	O
edma_clean_ini_string	function
(	O
EPChar	pointer
Buffer	pointer
)	O
{	O
EUint32	int
i	int
;	O
if	O
(	O
Buffer	pointer
==	O
NULL	O
)	O
{	O
edma_printf_err	function
(	O
"%s"	pointer
,	O
"[edma_clean_ini_string] Invalid buffer"	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
strlen	function
(	O
Buffer	pointer
)	O
;	O
i	int
++	O
)	O
{	O
if	O
(	O
Buffer	array
[	O
i	int
]	O
==	O
'\\'	O
)	O
Buffer	array
[	O
i	int
]	O
=	O
'/'	O
;	O
}	O
return	O
0	int
;	O
}	O