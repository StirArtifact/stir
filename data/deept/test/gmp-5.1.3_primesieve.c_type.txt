static	O
mp_limb_t	long
id_to_n	long
(	O
mp_limb_t	long
id	long
)	O
{	O
return	O
id	int
*	O
3	int
+	O
1	int
+	O
(	O
id	int
&	O
1	int
)	O
;	O
}	O
static	O
mp_limb_t	long
n_to_bit	O
(	O
mp_limb_t	long
n	long
)	O
{	O
return	O
(	O
(	O
n	long
-	O
5	int
)	O
|	O
1	int
)	O
/	O
3U	int
;	O
}	O
static	O
void	O
first_block_primesieve	function
(	O
mp_ptr	pointer
bit_array	pointer
,	O
mp_limb_t	long
n	long
)	O
{	O
mp_size_t	long
bits	long
,	O
limbs	int
;	O
ASSERT	O
(	O
n	long
>	O
4	int
)	O
;	O
bits	long
=	O
n_to_bit	function
(	O
n	long
)	O
;	O
limbs	int
=	O
bits	long
/	O
GMP_LIMB_BITS	int
+	O
1	int
;	O
MPN_ZERO	O
(	O
bit_array	pointer
,	O
limbs	int
)	O
;	O
bit_array	array
[	O
0	int
]	O
=	O
SIEVE_SEED	int
;	O
if	O
(	O
(	O
bits	long
+	O
1	int
)	O
%	O
GMP_LIMB_BITS	int
!=	O
0	int
)	O
bit_array	pointer
[	O
limbs	int
-	O
1	int
]	O
|=	O
MP_LIMB_T_MAX	O
<<	O
(	O
(	O
bits	long
+	O
1	int
)	O
%	O
GMP_LIMB_BITS	int
)	O
;	O
if	O
(	O
n	long
>	O
SEED_LIMIT	int
)	O
{	O
mp_limb_t	long
mask	long
,	O
index	function
,	O
i	long
;	O
ASSERT	O
(	O
n	long
>	O
49	int
)	O
;	O
mask	long
=	O
1	int
;	O
index	function
=	O
0	int
;	O
i	long
=	O
1	int
;	O
do	O
{	O
if	O
(	O
(	O
bit_array	pointer
[	O
index	function
]	O
&	O
mask	pointer
)	O
==	O
0	int
)	O
{	O
mp_size_t	long
step	long
,	O
lindex	int
;	O
mp_limb_t	long
lmask	long
;	O
unsigned	O
maskrot	int
;	O
step	pointer
=	O
id_to_n	function
(	O
i	long
)	O
;	O
lindex	pointer
=	O
i	long
*	O
(	O
step	pointer
+	O
1	int
)	O
-	O
1	int
+	O
(	O
-	O
(	O
i	long
&	O
1	int
)	O
&	O
(	O
i	long
+	O
1	int
)	O
)	O
;	O
if	O
(	O
lindex	int
>	O
bits	long
)	O
break	O
;	O
step	int
<<=	O
1	int
;	O
maskrot	int
=	O
step	long
%	O
GMP_LIMB_BITS	int
;	O
lmask	int
=	O
CNST_LIMB	O
(	O
1	int
)	O
<<	O
(	O
lindex	int
%	O
GMP_LIMB_BITS	int
)	O
;	O
do	O
{	O
bit_array	pointer
[	O
lindex	int
/	O
GMP_LIMB_BITS	int
]	O
|=	O
lmask	int
;	O
lmask	int
=	O
lmask	int
<<	O
maskrot	int
|	O
lmask	int
>>	O
(	O
GMP_LIMB_BITS	int
-	O
maskrot	int
)	O
;	O
lindex	int
+=	O
step	pointer
;	O
}	O
while	O
(	O
lindex	int
<=	O
bits	long
)	O
;	O
lindex	pointer
=	O
i	long
*	O
(	O
i	long
*	O
3	int
+	O
6	int
)	O
+	O
(	O
i	long
&	O
1	int
)	O
;	O
lmask	int
=	O
CNST_LIMB	O
(	O
1	int
)	O
<<	O
(	O
lindex	int
%	O
GMP_LIMB_BITS	int
)	O
;	O
for	O
(	O
;	O
lindex	int
<=	O
bits	long
;	O
lindex	int
+=	O
step	pointer
)	O
{	O
bit_array	array
[	O
lindex	int
/	O
GMP_LIMB_BITS	int
]	O
|=	O
lmask	int
;	O
lmask	int
=	O
lmask	int
<<	O
maskrot	int
|	O
lmask	int
>>	O
(	O
GMP_LIMB_BITS	int
-	O
maskrot	int
)	O
;	O
}	O
;	O
}	O
mask	long
=	O
mask	long
<<	O
1	int
|	O
mask	long
>>	O
(	O
GMP_LIMB_BITS	int
-	O
1	int
)	O
;	O
index	function
+=	O
mask	long
&	O
1	int
;	O
i	long
++	O
;	O
}	O
while	O
(	O
1	int
)	O
;	O
}	O
}	O
static	O
void	O
block_resieve	function
(	O
mp_ptr	pointer
bit_array	pointer
,	O
mp_size_t	long
limbs	long
,	O
mp_limb_t	long
offset	long
,	O
mp_srcptr	pointer
sieve	pointer
,	O
mp_limb_t	long
sieve_bits	long
)	O
{	O
mp_size_t	long
bits	long
,	O
step	pointer
;	O
ASSERT	O
(	O
limbs	int
>	O
0	int
)	O
;	O
bits	long
=	O
limbs	int
*	O
GMP_LIMB_BITS	int
-	O
1	int
;	O
MPN_ZERO	O
(	O
bit_array	pointer
,	O
limbs	pointer
)	O
;	O
LOOP_ON_SIEVE_BEGIN	function
(	O
step	pointer
,	O
0	int
,	O
sieve_bits	int
,	O
0	int
,	O
sieve	int
)	O
;	O
{	O
mp_size_t	long
lindex	long
;	O
mp_limb_t	long
lmask	long
;	O
unsigned	O
maskrot	int
;	O
lindex	pointer
=	O
__i	int
*	O
(	O
step	pointer
+	O
1	int
)	O
-	O
1	int
+	O
(	O
-	O
(	O
__i	int
&	O
1	int
)	O
&	O
(	O
__i	pointer
+	O
1	int
)	O
)	O
;	O
if	O
(	O
lindex	int
>	O
bits	long
+	O
offset	long
)	O
break	O
;	O
step	int
<<=	O
1	int
;	O
maskrot	int
=	O
step	long
%	O
GMP_LIMB_BITS	int
;	O
if	O
(	O
lindex	int
<	O
offset	long
)	O
lindex	int
+=	O
step	pointer
*	O
(	O
(	O
offset	long
-	O
lindex	int
-	O
1	int
)	O
/	O
step	pointer
+	O
1	int
)	O
;	O
lindex	int
-=	O
offset	long
;	O
lmask	int
=	O
CNST_LIMB	O
(	O
1	int
)	O
<<	O
(	O
lindex	int
%	O
GMP_LIMB_BITS	int
)	O
;	O
for	O
(	O
;	O
lindex	int
<=	O
bits	long
;	O
lindex	int
+=	O
step	pointer
)	O
{	O
bit_array	array
[	O
lindex	int
/	O
GMP_LIMB_BITS	int
]	O
|=	O
lmask	int
;	O
lmask	int
=	O
lmask	int
<<	O
maskrot	int
|	O
lmask	int
>>	O
(	O
GMP_LIMB_BITS	int
-	O
maskrot	int
)	O
;	O
}	O
;	O
lindex	pointer
=	O
__i	int
*	O
(	O
__i	struct
*	O
3	int
+	O
6	int
)	O
+	O
(	O
__i	int
&	O
1	int
)	O
;	O
if	O
(	O
lindex	int
>	O
bits	long
+	O
offset	long
)	O
continue	O
;	O
if	O
(	O
lindex	int
<	O
offset	long
)	O
lindex	int
+=	O
step	pointer
*	O
(	O
(	O
offset	long
-	O
lindex	int
-	O
1	int
)	O
/	O
step	pointer
+	O
1	int
)	O
;	O
lindex	int
-=	O
offset	long
;	O
lmask	int
=	O
CNST_LIMB	O
(	O
1	int
)	O
<<	O
(	O
lindex	int
%	O
GMP_LIMB_BITS	int
)	O
;	O
for	O
(	O
;	O
lindex	int
<=	O
bits	long
;	O
lindex	int
+=	O
step	pointer
)	O
{	O
bit_array	array
[	O
lindex	int
/	O
GMP_LIMB_BITS	int
]	O
|=	O
lmask	int
;	O
lmask	int
=	O
lmask	int
<<	O
maskrot	int
|	O
lmask	int
>>	O
(	O
GMP_LIMB_BITS	int
-	O
maskrot	int
)	O
;	O
}	O
;	O
}	O
LOOP_ON_SIEVE_END	int
;	O
}	O
mp_limb_t	long
gmp_primesieve	O
(	O
mp_ptr	pointer
bit_array	pointer
,	O
mp_limb_t	long
n	long
)	O
{	O
mp_size_t	long
size	long
;	O
mp_limb_t	long
bits	long
;	O
ASSERT	O
(	O
n	long
>	O
4	int
)	O
;	O
bits	long
=	O
n_to_bit	function
(	O
n	long
)	O
;	O
size	long
=	O
bits	long
/	O
GMP_LIMB_BITS	int
+	O
1	int
;	O
if	O
(	O
size	long
>	O
BLOCK_SIZE	int
*	O
2	int
)	O
{	O
mp_size_t	long
off	long
;	O
off	long
=	O
BLOCK_SIZE	pointer
+	O
(	O
size	long
%	O
BLOCK_SIZE	int
)	O
;	O
first_block_primesieve	function
(	O
bit_array	pointer
,	O
id_to_n	function
(	O
off	long
*	O
GMP_LIMB_BITS	pointer
)	O
)	O
;	O
for	O
(	O
;	O
off	long
<	O
size	long
;	O
off	long
+=	O
BLOCK_SIZE	int
)	O
block_resieve	function
(	O
bit_array	pointer
+	O
off	long
,	O
BLOCK_SIZE	int
,	O
off	long
*	O
GMP_LIMB_BITS	int
,	O
bit_array	int
,	O
off	long
*	O
GMP_LIMB_BITS	int
-	O
1	int
)	O
;	O
}	O
else	O
{	O
first_block_primesieve	function
(	O
bit_array	pointer
,	O
n	long
)	O
;	O
}	O
if	O
(	O
(	O
bits	long
+	O
1	int
)	O
%	O
GMP_LIMB_BITS	int
!=	O
0	int
)	O
bit_array	pointer
[	O
size	long
-	O
1	int
]	O
|=	O
MP_LIMB_T_MAX	O
<<	O
(	O
(	O
bits	long
+	O
1	int
)	O
%	O
GMP_LIMB_BITS	int
)	O
;	O
return	O
size	long
*	O
GMP_LIMB_BITS	int
-	O
mpn_popcount	O
(	O
bit_array	pointer
,	O
size	long
)	O
;	O
}	O