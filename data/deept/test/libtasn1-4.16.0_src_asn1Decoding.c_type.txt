static	O
int	O
decode	function
(	O
asn1_node	pointer
definitions	pointer
,	O
const	O
char	O
*	O
typeName	pointer
,	O
void	O
*	O
der	pointer
,	O
int	O
der_len	int
,	O
int	O
benchmark	int
,	O
int	O
strict	int
)	O
;	O
ATTR_NO_RETRUN	O
static	O
void	O
usage	function
(	O
int	O
status	int
)	O
{	O
if	O
(	O
status	int
!=	O
EXIT_SUCCESS	int
)	O
fprintf	function
(	O
stderr	pointer
,	O
"Try `%s --help' for more information.\n"	pointer
,	O
program_name	pointer
)	O
;	O
else	O
{	O
printf	function
(	O
"Usage: %s [OPTION] DEFINITIONS ENCODED ASN1TYPE\n"	pointer
,	O
program_name	pointer
)	O
;	O
printf	function
(	O
"Decodes DER data in ENCODED file, for the ASN1TYPE element\ndescribed in ASN.1 DEFINITIONS file, and print decoded structures.\n\n"	pointer
)	O
;	O
printf	function
(	O
"  -b, --benchmark       perform a benchmark on decoding\n  -s, --strict          use strict DER decoding\n  -t, --no-time-strict  use strict DER decoding but not in time fields\n  -h, --help            display this help and exit\n  -v, --version         output version information and exit\n"	pointer
)	O
;	O
printf	function
(	O
"Report bugs to "	pointer
PACKAGE_BUGREPORT	pointer
)	O
;	O
}	O
exit	function
(	O
status	int
)	O
;	O
}	O
static	O
char	O
*	O
read_binary_file	function
(	O
const	O
char	O
*	O
file	pointer
,	O
size_t	long
*	O
l	pointer
)	O
{	O
FILE	struct
*	O
fp	pointer
;	O
struct	O
stat	struct
st	pointer
;	O
char	O
*	O
out	pointer
;	O
if	O
(	O
stat	struct
(	O
file	pointer
,	O
&	O
st	pointer
)	O
==	O
-	O
1	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Error reading file size!\n"	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
fp	pointer
=	O
fopen	function
(	O
file	pointer
,	O
"rb"	pointer
)	O
;	O
if	O
(	O
fp	pointer
==	O
NULL	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Error reading file!\n"	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
out	pointer
=	O
malloc	function
(	O
st	pointer
.	O
st_size	long
+	O
1	int
)	O
;	O
if	O
(	O
out	pointer
==	O
NULL	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Memory error!\n"	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
*	O
l	pointer
=	O
fread	function
(	O
out	pointer
,	O
1	int
,	O
st	pointer
.	O
st_size	long
,	O
fp	pointer
)	O
;	O
if	O
(	O
(	O
off_t	long
)	O
*	O
l	pointer
!=	O
st	pointer
.	O
st_size	long
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Error reading contents (got: %ld, expected %ld)!\n"	pointer
,	O
(	O
long	O
)	O
*	O
l	pointer
,	O
(	O
long	O
)	O
st	pointer
.	O
st_size	long
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
out	pointer
[	O
*	O
l	pointer
]	O
=	O
0	int
;	O
fclose	function
(	O
fp	pointer
)	O
;	O
return	O
out	pointer
;	O
}	O
int	O
main	function
(	O
int	O
argc	int
,	O
char	O
*	O
argv	array
[	O
]	O
)	O
{	O
static	O
const	O
struct	O
option	struct
long_options	array
[	O
]	O
=	O
{	O
{	O
"help"	pointer
,	O
no_argument	int
,	O
0	int
,	O
'h'	O
}	O
,	O
{	O
"strict"	pointer
,	O
no_argument	int
,	O
0	int
,	O
's'	O
}	O
,	O
{	O
"no-time-strict"	pointer
,	O
no_argument	int
,	O
0	int
,	O
't'	O
}	O
,	O
{	O
"debug"	pointer
,	O
no_argument	int
,	O
0	int
,	O
'd'	O
}	O
,	O
{	O
"benchmark"	pointer
,	O
no_argument	int
,	O
0	int
,	O
'b'	O
}	O
,	O
{	O
"version"	pointer
,	O
no_argument	int
,	O
0	int
,	O
'v'	O
}	O
,	O
{	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
}	O
}	O
;	O
int	O
option_index	int
=	O
0	int
;	O
int	O
option_result	int
;	O
char	O
*	O
inputFileAsnName	pointer
=	O
NULL	O
;	O
char	O
*	O
inputFileDerName	pointer
=	O
NULL	O
;	O
char	O
*	O
typeName	pointer
=	O
NULL	O
;	O
asn1_node	pointer
definitions	pointer
=	O
NULL	O
;	O
char	O
errorDescription	pointer
[	O
ASN1_MAX_ERROR_DESCRIPTION_SIZE	int
]	O
;	O
int	O
asn1_result	int
=	O
ASN1_SUCCESS	int
;	O
unsigned	O
char	O
*	O
der	pointer
;	O
int	O
der_len	int
=	O
0	int
,	O
benchmark	int
=	O
0	int
;	O
int	O
flags	int
=	O
0	int
,	O
debug	int
=	O
0	int
;	O
opterr	int
=	O
0	int
;	O
while	O
(	O
1	int
)	O
{	O
option_result	int
=	O
getopt_long	function
(	O
argc	int
,	O
argv	array
,	O
"hbdsvtc"	pointer
,	O
long_options	array
,	O
&	O
option_index	int
)	O
;	O
if	O
(	O
option_result	int
==	O
-	O
1	int
)	O
break	O
;	O
switch	O
(	O
option_result	int
)	O
{	O
case	O
'h'	O
:	O
usage	function
(	O
EXIT_SUCCESS	int
)	O
;	O
break	O
;	O
case	O
'b'	O
:	O
benchmark	int
=	O
1	int
;	O
break	O
;	O
case	O
'd'	O
:	O
debug	int
=	O
1	int
;	O
break	O
;	O
case	O
's'	O
:	O
case	O
't'	O
:	O
flags	int
|=	O
ASN1_DECODE_FLAG_STRICT_DER	O
;	O
if	O
(	O
option_result	int
==	O
't'	O
)	O
flags	int
|=	O
ASN1_DECODE_FLAG_ALLOW_INCORRECT_TIME	O
;	O
break	O
;	O
case	O
'v'	O
:	O
printf	function
(	O
program_name	pointer
" "	pointer
PACKAGE	pointer
" "	pointer
VERSION	pointer
"\n"	pointer
)	O
;	O
printf	function
(	O
"Copyright (C) 2017-2019 Free Software Foundation, Inc.\n\n"	pointer
)	O
;	O
printf	function
(	O
"Written by Fabio Fiorina\n"	pointer
)	O
;	O
exit	function
(	O
0	int
)	O
;	O
break	O
;	O
case	O
'?'	O
:	O
fprintf	function
(	O
stderr	pointer
,	O
"asn1Decoding: option '%s' not recognized or without argument.\n\n"	pointer
,	O
argv	array
[	O
optind	int
-	O
1	int
]	O
)	O
;	O
usage	function
(	O
EXIT_FAILURE	int
)	O
;	O
break	O
;	O
default	O
:	O
fprintf	function
(	O
stderr	pointer
,	O
"asn1Decoding: ?? getopt returned character code Ox%x ??\n"	pointer
,	O
(	O
unsigned	O
)	O
option_result	int
)	O
;	O
}	O
}	O
if	O
(	O
optind	int
==	O
argc	int
||	O
optind	int
==	O
argc	int
-	O
1	int
||	O
optind	int
==	O
argc	int
-	O
2	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"asn1Decoding: input files or ASN.1 type "	pointer
"name missing\n"	pointer
)	O
;	O
usage	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
inputFileAsnName	pointer
=	O
strdup	function
(	O
argv	array
[	O
optind	int
]	O
)	O
;	O
inputFileDerName	pointer
=	O
strdup	function
(	O
argv	array
[	O
optind	int
+	O
1	int
]	O
)	O
;	O
typeName	pointer
=	O
strdup	function
(	O
argv	array
[	O
optind	int
+	O
2	int
]	O
)	O
;	O
if	O
(	O
!	O
(	O
inputFileAsnName	pointer
&&	O
inputFileDerName	pointer
&&	O
typeName	pointer
)	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"allocation failed\n"	pointer
)	O
;	O
free	function
(	O
inputFileAsnName	pointer
)	O
;	O
free	function
(	O
inputFileDerName	pointer
)	O
;	O
free	function
(	O
typeName	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
asn1_result	int
=	O
asn1_parser2tree	function
(	O
inputFileAsnName	pointer
,	O
&	O
definitions	pointer
,	O
errorDescription	pointer
)	O
;	O
switch	O
(	O
asn1_result	int
)	O
{	O
case	O
ASN1_SUCCESS	int
:	O
fprintf	function
(	O
stderr	pointer
,	O
"Parse: done.\n"	pointer
)	O
;	O
break	O
;	O
case	O
ASN1_FILE_NOT_FOUND	int
:	O
fprintf	function
(	O
stderr	pointer
,	O
"asn1Decoding: FILE %s NOT FOUND\n"	pointer
,	O
inputFileAsnName	pointer
)	O
;	O
break	O
;	O
case	O
ASN1_SYNTAX_ERROR	int
:	O
case	O
ASN1_IDENTIFIER_NOT_FOUND	int
:	O
case	O
ASN1_NAME_TOO_LONG	int
:	O
fprintf	function
(	O
stderr	pointer
,	O
"asn1Decoding: %s\n"	pointer
,	O
errorDescription	pointer
)	O
;	O
break	O
;	O
default	O
:	O
fprintf	function
(	O
stderr	pointer
,	O
"libtasn1 ERROR: %s\n"	pointer
,	O
asn1_strerror	function
(	O
asn1_result	int
)	O
)	O
;	O
}	O
if	O
(	O
asn1_result	int
!=	O
ASN1_SUCCESS	int
)	O
{	O
free	function
(	O
inputFileAsnName	pointer
)	O
;	O
free	function
(	O
inputFileDerName	pointer
)	O
;	O
free	function
(	O
typeName	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
{	O
size_t	long
tmplen	long
;	O
der	pointer
=	O
(	O
unsigned	O
char	O
*	O
)	O
read_binary_file	function
(	O
inputFileDerName	pointer
,	O
&	O
tmplen	long
)	O
;	O
der_len	int
=	O
tmplen	long
;	O
}	O
if	O
(	O
der	pointer
!=	O
NULL	O
&&	O
debug	int
!=	O
0	int
)	O
der	pointer
=	O
realloc	function
(	O
der	pointer
,	O
der_len	int
)	O
;	O
if	O
(	O
der	pointer
==	O
NULL	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"asn1Decoding: could not read '%s'\n"	pointer
,	O
inputFileDerName	pointer
)	O
;	O
asn1_delete_structure	function
(	O
&	O
definitions	pointer
)	O
;	O
free	function
(	O
inputFileAsnName	pointer
)	O
;	O
free	function
(	O
inputFileDerName	pointer
)	O
;	O
free	function
(	O
typeName	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
if	O
(	O
decode	function
(	O
definitions	pointer
,	O
typeName	pointer
,	O
der	pointer
,	O
der_len	int
,	O
benchmark	int
,	O
flags	int
)	O
!=	O
ASN1_SUCCESS	int
)	O
{	O
asn1_delete_structure	function
(	O
&	O
definitions	pointer
)	O
;	O
free	function
(	O
inputFileAsnName	pointer
)	O
;	O
free	function
(	O
inputFileDerName	pointer
)	O
;	O
free	function
(	O
typeName	pointer
)	O
;	O
free	function
(	O
der	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
asn1_delete_structure	function
(	O
&	O
definitions	pointer
)	O
;	O
free	function
(	O
der	pointer
)	O
;	O
free	function
(	O
inputFileAsnName	pointer
)	O
;	O
free	function
(	O
inputFileDerName	pointer
)	O
;	O
free	function
(	O
typeName	pointer
)	O
;	O
if	O
(	O
asn1_result	int
!=	O
ASN1_SUCCESS	int
)	O
exit	function
(	O
1	int
)	O
;	O
exit	function
(	O
0	int
)	O
;	O
}	O
static	O
int	O
simple_decode	function
(	O
asn1_node	pointer
definitions	pointer
,	O
const	O
char	O
*	O
typeName	pointer
,	O
void	O
*	O
der	pointer
,	O
int	O
der_len	int
,	O
int	O
benchmark	int
,	O
int	O
flags	int
)	O
{	O
int	O
asn1_result	int
;	O
asn1_node	pointer
structure	pointer
=	O
NULL	O
;	O
char	O
errorDescription	pointer
[	O
ASN1_MAX_ERROR_DESCRIPTION_SIZE	int
]	O
;	O
asn1_result	int
=	O
asn1_create_element	function
(	O
definitions	pointer
,	O
typeName	pointer
,	O
&	O
structure	pointer
)	O
;	O
if	O
(	O
asn1_result	int
!=	O
ASN1_SUCCESS	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Structure creation: %s\n"	pointer
,	O
asn1_strerror	function
(	O
asn1_result	int
)	O
)	O
;	O
asn1_delete_structure	function
(	O
&	O
structure	pointer
)	O
;	O
return	O
asn1_result	int
;	O
}	O
if	O
(	O
flags	int
!=	O
0	int
)	O
asn1_result	int
=	O
asn1_der_decoding2	function
(	O
&	O
structure	pointer
,	O
der	pointer
,	O
&	O
der_len	int
,	O
flags	int
,	O
errorDescription	pointer
)	O
;	O
else	O
asn1_result	int
=	O
asn1_der_decoding	function
(	O
&	O
structure	pointer
,	O
der	pointer
,	O
der_len	int
,	O
errorDescription	pointer
)	O
;	O
if	O
(	O
!	O
benchmark	int
)	O
fprintf	function
(	O
stderr	pointer
,	O
"\nDecoding: %s\n"	pointer
,	O
asn1_strerror	function
(	O
asn1_result	int
)	O
)	O
;	O
if	O
(	O
asn1_result	int
!=	O
ASN1_SUCCESS	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"asn1Decoding: %s\n"	pointer
,	O
errorDescription	pointer
)	O
;	O
asn1_delete_structure	function
(	O
&	O
structure	pointer
)	O
;	O
return	O
asn1_result	int
;	O
}	O
if	O
(	O
!	O
benchmark	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"\nDECODING RESULT:\n"	pointer
)	O
;	O
asn1_print_structure	function
(	O
stdout	pointer
,	O
structure	pointer
,	O
""	pointer
,	O
ASN1_PRINT_NAME_TYPE_VALUE	int
)	O
;	O
}	O
asn1_delete_structure	function
(	O
&	O
structure	pointer
)	O
;	O
return	O
ASN1_SUCCESS	int
;	O
}	O
static	O
int	O
decode	function
(	O
asn1_node	pointer
definitions	pointer
,	O
const	O
char	O
*	O
typeName	pointer
,	O
void	O
*	O
der	pointer
,	O
int	O
der_len	int
,	O
int	O
benchmark	int
,	O
int	O
flags	int
)	O
{	O
struct	O
benchmark_st	struct
st	pointer
;	O
if	O
(	O
benchmark	int
==	O
0	int
)	O
return	O
simple_decode	function
(	O
definitions	pointer
,	O
typeName	pointer
,	O
der	pointer
,	O
der_len	int
,	O
benchmark	int
,	O
flags	int
)	O
;	O
else	O
{	O
start_benchmark	function
(	O
&	O
st	pointer
)	O
;	O
do	O
{	O
simple_decode	function
(	O
definitions	pointer
,	O
typeName	pointer
,	O
der	pointer
,	O
der_len	int
,	O
benchmark	int
,	O
flags	int
)	O
;	O
st	pointer
.	O
size	long
++	O
;	O
}	O
while	O
(	O
benchmark_must_finish	int
==	O
0	int
)	O
;	O
stop_benchmark	function
(	O
&	O
st	pointer
,	O
"structures"	pointer
)	O
;	O
fprintf	function
(	O
stdout	pointer
,	O
"\n"	pointer
)	O
;	O
}	O
return	O
ASN1_SUCCESS	int
;	O
}	O
