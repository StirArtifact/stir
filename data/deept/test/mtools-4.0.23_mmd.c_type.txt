typedef	O
struct	O
Arg_t	struct
{	O
char	O
*	O
target	pointer
;	O
MainParam_t	struct
mp	pointer
;	O
Stream_t	struct
*	O
SrcDir	pointer
;	O
int	O
entry	int
;	O
ClashHandling_t	struct
ch	O
;	O
Stream_t	struct
*	O
targetDir	pointer
;	O
}	O
Arg_t	struct
;	O
typedef	O
struct	O
CreateArg_t	struct
{	O
Stream_t	struct
*	O
Dir	pointer
;	O
Stream_t	struct
*	O
NewDir	pointer
;	O
unsigned	O
char	O
attr	bool
;	O
time_t	long
mtime	long
;	O
}	O
CreateArg_t	int
;	O
static	O
int	O
makeit	function
(	O
dos_name_t	struct
*	O
dosname	pointer
,	O
char	O
*	O
longname	array
UNUSEDP	O
,	O
void	O
*	O
arg0	pointer
,	O
direntry_t	struct
*	O
targetEntry	pointer
)	O
{	O
Stream_t	struct
*	O
Target	pointer
;	O
CreateArg_t	struct
*	O
arg	pointer
=	O
(	O
CreateArg_t	struct
*	O
)	O
arg0	pointer
;	O
int	O
fat	int
;	O
direntry_t	struct
subEntry	struct
;	O
if	O
(	O
!	O
getfreeMinClusters	function
(	O
targetEntry	pointer
->	O
Dir	pointer
,	O
1	int
)	O
)	O
return	O
-	O
1	int
;	O
mk_entry	function
(	O
dosname	pointer
,	O
ATTR_DIR	int
,	O
1	int
,	O
0	int
,	O
arg	pointer
->	O
mtime	pointer
,	O
&	O
targetEntry	pointer
->	O
dir	pointer
)	O
;	O
Target	pointer
=	O
OpenFileByDirentry	function
(	O
targetEntry	pointer
)	O
;	O
if	O
(	O
!	O
Target	pointer
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Could not open Target\n"	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
initializeDirentry	function
(	O
&	O
subEntry	struct
,	O
Target	pointer
)	O
;	O
subEntry	struct
.	O
entry	int
=	O
1	int
;	O
GET_DATA	O
(	O
targetEntry	pointer
->	O
Dir	pointer
,	O
0	int
,	O
0	int
,	O
0	int
,	O
&	O
fat	int
)	O
;	O
if	O
(	O
fat	int
==	O
fat32RootCluster	function
(	O
targetEntry	pointer
->	O
Dir	pointer
)	O
)	O
{	O
fat	int
=	O
0	int
;	O
}	O
mk_entry_from_base	function
(	O
"..      "	pointer
,	O
ATTR_DIR	int
,	O
fat	int
,	O
0	int
,	O
arg	pointer
->	O
mtime	pointer
,	O
&	O
subEntry	struct
.	O
dir	pointer
)	O
;	O
dir_write	function
(	O
&	O
subEntry	struct
)	O
;	O
FLUSH	function
(	O
(	O
Stream_t	struct
*	O
)	O
Target	pointer
)	O
;	O
subEntry	struct
.	O
entry	int
=	O
0	int
;	O
GET_DATA	O
(	O
Target	pointer
,	O
0	int
,	O
0	int
,	O
0	int
,	O
&	O
fat	int
)	O
;	O
mk_entry_from_base	function
(	O
".       "	pointer
,	O
ATTR_DIR	int
,	O
fat	int
,	O
0	int
,	O
arg	pointer
->	O
mtime	pointer
,	O
&	O
subEntry	struct
.	O
dir	pointer
)	O
;	O
dir_write	function
(	O
&	O
subEntry	struct
)	O
;	O
mk_entry	function
(	O
dosname	int
,	O
ATTR_DIR	int
|	O
arg	pointer
->	O
attr	array
,	O
fat	int
,	O
0	int
,	O
arg	pointer
->	O
mtime	pointer
,	O
&	O
targetEntry	pointer
->	O
dir	pointer
)	O
;	O
arg	pointer
->	O
NewDir	int
=	O
Target	pointer
;	O
return	O
0	int
;	O
}	O
static	O
void	O
usage	function
(	O
int	O
ret	int
)	O
NORETURN	O
;	O
static	O
void	O
usage	function
(	O
int	O
ret	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Mtools version %s, dated %s\n"	pointer
,	O
mversion	pointer
,	O
mdate	pointer
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"Usage: %s [-D clash_option] file targetfile\n"	pointer
,	O
progname	pointer
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"       %s [-D clash_option] file [files...] target_directory\n"	pointer
,	O
progname	pointer
)	O
;	O
exit	function
(	O
ret	int
)	O
;	O
}	O
Stream_t	struct
*	O
createDir	function
(	O
Stream_t	struct
*	O
Dir	pointer
,	O
const	O
char	O
*	O
filename	pointer
,	O
ClashHandling_t	struct
*	O
ch	array
,	O
unsigned	O
char	O
attr	char
,	O
time_t	long
mtime	long
)	O
{	O
CreateArg_t	struct
arg	pointer
;	O
int	O
ret	int
;	O
arg	pointer
.	O
Dir	pointer
=	O
Dir	pointer
;	O
arg	pointer
.	O
attr	enum
=	O
attr	bool
;	O
arg	pointer
.	O
mtime	int
=	O
mtime	int
;	O
if	O
(	O
!	O
getfreeMinClusters	function
(	O
Dir	pointer
,	O
1	int
)	O
)	O
return	O
NULL	O
;	O
ret	int
=	O
mwrite_one	function
(	O
Dir	pointer
,	O
filename	pointer
,	O
0	int
,	O
makeit	int
,	O
&	O
arg	pointer
,	O
ch	array
)	O
;	O
if	O
(	O
ret	int
<	O
1	int
)	O
return	O
NULL	O
;	O
else	O
return	O
arg	pointer
.	O
NewDir	int
;	O
}	O
static	O
int	O
createDirCallback	function
(	O
direntry_t	struct
*	O
entry	pointer
UNUSEDP	O
,	O
MainParam_t	struct
*	O
mp	pointer
)	O
{	O
Stream_t	struct
*	O
ret	pointer
;	O
time_t	long
now	long
;	O
ret	int
=	O
createDir	function
(	O
mp	pointer
->	O
File	pointer
,	O
mp	pointer
->	O
targetName	pointer
,	O
&	O
(	O
(	O
Arg_t	struct
*	O
)	O
(	O
mp	pointer
->	O
arg	pointer
)	O
)	O
->	O
ch	long
,	O
ATTR_DIR	int
,	O
getTimeNow	function
(	O
&	O
now	pointer
)	O
)	O
;	O
if	O
(	O
ret	pointer
==	O
NULL	O
)	O
return	O
ERROR_ONE	int
;	O
else	O
{	O
FREE	O
(	O
&	O
ret	int
)	O
;	O
return	O
GOT_ONE	int
;	O
}	O
}	O
void	O
mmd	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
,	O
int	O
type	enum
UNUSEDP	O
)	O
NORETURN	O
;	O
void	O
mmd	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
,	O
int	O
type	enum
UNUSEDP	O
)	O
{	O
Arg_t	struct
arg	pointer
;	O
int	O
c	int
;	O
init_clash_handling	function
(	O
&	O
arg	pointer
.	O
ch	enum
)	O
;	O
if	O
(	O
helpFlag	function
(	O
argc	int
,	O
argv	pointer
)	O
)	O
usage	function
(	O
0	int
)	O
;	O
while	O
(	O
(	O
c	int
=	O
getopt	function
(	O
argc	int
,	O
argv	pointer
,	O
"i:D:oh"	pointer
)	O
)	O
!=	O
EOF	O
)	O
{	O
switch	O
(	O
c	int
)	O
{	O
case	O
'i'	O
:	O
set_cmd_line_image	function
(	O
optarg	pointer
)	O
;	O
break	O
;	O
case	O
'?'	O
:	O
usage	function
(	O
1	int
)	O
;	O
case	O
'o'	O
:	O
handle_clash_options	function
(	O
&	O
arg	pointer
.	O
ch	array
,	O
(	O
char	O
)	O
c	int
)	O
;	O
break	O
;	O
case	O
'D'	O
:	O
if	O
(	O
handle_clash_options	function
(	O
&	O
arg	pointer
.	O
ch	int
,	O
*	O
optarg	pointer
)	O
)	O
usage	function
(	O
1	int
)	O
;	O
break	O
;	O
case	O
'h'	O
:	O
usage	function
(	O
0	int
)	O
;	O
default	O
:	O
usage	function
(	O
1	int
)	O
;	O
}	O
}	O
if	O
(	O
argc	int
-	O
optind	int
<	O
1	int
)	O
usage	function
(	O
1	int
)	O
;	O
init_mp	function
(	O
&	O
arg	pointer
.	O
mp	pointer
)	O
;	O
arg	pointer
.	O
mp	pointer
.	O
arg	pointer
=	O
(	O
void	O
*	O
)	O
&	O
arg	pointer
;	O
arg	pointer
.	O
mp	pointer
.	O
openflags	int
=	O
O_RDWR	int
;	O
arg	pointer
.	O
mp	pointer
.	O
callback	pointer
=	O
createDirCallback	int
;	O
arg	pointer
.	O
mp	pointer
.	O
lookupflags	int
=	O
OPEN_PARENT	int
|	O
DO_OPEN_DIRS	int
;	O
exit	function
(	O
main_loop	function
(	O
&	O
arg	pointer
.	O
mp	pointer
,	O
argv	pointer
+	O
optind	int
,	O
argc	int
-	O
optind	int
)	O
)	O
;	O
}	O