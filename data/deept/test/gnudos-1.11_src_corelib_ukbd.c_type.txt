char	O
*	O
ugetKeyUnderConsole	function
(	O
)	O
{	O
char	O
buf	array
[	O
5	int
]	O
;	O
int	O
res	int
;	O
int	O
bytes	int
=	O
0	int
;	O
memset	function
(	O
uc	array
,	O
0	int
,	O
5	int
)	O
;	O
while	O
(	O
1	int
)	O
{	O
res	int
=	O
read	function
(	O
0	int
,	O
&	O
buf	array
[	O
0	int
]	O
,	O
1	int
)	O
;	O
if	O
(	O
res	int
==	O
-	O
1	int
)	O
{	O
uc	array
[	O
0	int
]	O
=	O
-	O
1	int
;	O
return	O
uc	array
;	O
}	O
if	O
(	O
(	O
buf	array
[	O
0	int
]	O
&	O
mask	array
[	O
0	int
]	O
)	O
==	O
mask	array
[	O
0	int
]	O
)	O
bytes	int
++	O
;	O
if	O
(	O
(	O
buf	array
[	O
0	int
]	O
&	O
mask	array
[	O
1	int
]	O
)	O
==	O
mask	array
[	O
1	int
]	O
)	O
bytes	int
++	O
;	O
if	O
(	O
(	O
buf	array
[	O
0	int
]	O
&	O
mask	array
[	O
2	int
]	O
)	O
==	O
mask	array
[	O
2	int
]	O
)	O
bytes	int
++	O
;	O
switch	O
(	O
buf	array
[	O
0	int
]	O
)	O
{	O
case	O
0x01	int
:	O
uc	array
[	O
0	int
]	O
=	O
ESC_KEY	int
;	O
break	O
;	O
case	O
0x29	int
:	O
uc	array
[	O
0	int
]	O
=	O
SHIFT	int
?	O
'~'	O
:	O
'`'	O
;	O
break	O
;	O
case	O
0x02	int
:	O
uc	array
[	O
0	int
]	O
=	O
SHIFT	int
?	O
'!'	O
:	O
'1'	O
;	O
break	O
;	O
case	O
0x03	int
:	O
uc	array
[	O
0	int
]	O
=	O
SHIFT	int
?	O
'@'	O
:	O
'2'	O
;	O
break	O
;	O
case	O
0x04	int
:	O
uc	array
[	O
0	int
]	O
=	O
SHIFT	int
?	O
'#'	O
:	O
'3'	O
;	O
break	O
;	O
case	O
0x05	int
:	O
uc	array
[	O
0	int
]	O
=	O
SHIFT	int
?	O
'$'	O
:	O
'4'	O
;	O
break	O
;	O
case	O
0x06	int
:	O
uc	array
[	O
0	int
]	O
=	O
SHIFT	int
?	O
'%'	O
:	O
'5'	O
;	O
break	O
;	O
case	O
0x07	int
:	O
uc	array
[	O
0	int
]	O
=	O
SHIFT	int
?	O
'^'	O
:	O
'6'	O
;	O
break	O
;	O
case	O
0x08	int
:	O
uc	array
[	O
0	int
]	O
=	O
SHIFT	int
?	O
'&'	O
:	O
'7'	O
;	O
break	O
;	O
case	O
0x09	int
:	O
uc	array
[	O
0	int
]	O
=	O
SHIFT	int
?	O
'*'	O
:	O
'8'	O
;	O
break	O
;	O
case	O
0x0a	int
:	O
uc	array
[	O
0	int
]	O
=	O
SHIFT	int
?	O
'('	O
:	O
'9'	O
;	O
break	O
;	O
case	O
0x0b	int
:	O
uc	array
[	O
0	int
]	O
=	O
SHIFT	int
?	O
')'	O
:	O
'0'	O
;	O
break	O
;	O
case	O
0x0c	int
:	O
uc	array
[	O
0	int
]	O
=	O
SHIFT	int
?	O
'_'	O
:	O
'-'	O
;	O
break	O
;	O
case	O
0x0d	int
:	O
uc	array
[	O
0	int
]	O
=	O
SHIFT	int
?	O
'+'	O
:	O
'='	O
;	O
break	O
;	O
case	O
0x0e	int
:	O
uc	array
[	O
0	int
]	O
=	O
BACKSPACE_KEY	int
;	O
break	O
;	O
case	O
0x0f	int
:	O
uc	array
[	O
0	int
]	O
=	O
TAB_KEY	int
;	O
break	O
;	O
case	O
0x10	int
:	O
uc	array
[	O
0	int
]	O
=	O
SHIFT	int
?	O
'Q'	O
:	O
'q'	O
;	O
break	O
;	O
case	O
0x11	int
:	O
uc	array
[	O
0	int
]	O
=	O
SHIFT	int
?	O
'W'	O
:	O
'w'	O
;	O
break	O
;	O
case	O
0x12	int
:	O
uc	array
[	O
0	int
]	O
=	O
SHIFT	int
?	O
'E'	O
:	O
'e'	O
;	O
break	O
;	O
case	O
0x13	int
:	O
uc	array
[	O
0	int
]	O
=	O
SHIFT	int
?	O
'R'	O
:	O
'r'	O
;	O
break	O
;	O
case	O
0x14	int
:	O
uc	array
[	O
0	int
]	O
=	O
SHIFT	int
?	O
'T'	O
:	O
't'	O
;	O
break	O
;	O
case	O
0x15	int
:	O
uc	array
[	O
0	int
]	O
=	O
SHIFT	int
?	O
'Y'	O
:	O
'y'	O
;	O
break	O
;	O
case	O
0x16	int
:	O
uc	array
[	O
0	int
]	O
=	O
SHIFT	int
?	O
'U'	O
:	O
'u'	O
;	O
break	O
;	O
case	O
0x17	int
:	O
uc	array
[	O
0	int
]	O
=	O
SHIFT	int
?	O
'I'	O
:	O
'i'	O
;	O
break	O
;	O
case	O
0x18	int
:	O
uc	array
[	O
0	int
]	O
=	O
SHIFT	int
?	O
'O'	O
:	O
'o'	O
;	O
break	O
;	O
case	O
0x19	int
:	O
uc	array
[	O
0	int
]	O
=	O
SHIFT	int
?	O
'P'	O
:	O
'p'	O
;	O
break	O
;	O
case	O
0x1a	int
:	O
uc	array
[	O
0	int
]	O
=	O
SHIFT	int
?	O
'{'	O
:	O
'['	O
;	O
break	O
;	O
case	O
0x1b	int
:	O
uc	array
[	O
0	int
]	O
=	O
SHIFT	int
?	O
'}'	O
:	O
']'	O
;	O
break	O
;	O
case	O
0x1c	int
:	O
uc	array
[	O
0	int
]	O
=	O
ENTER_KEY	int
;	O
break	O
;	O
case	O
0x3a	int
:	O
uc	array
[	O
0	int
]	O
=	O
CAPS_KEY	int
;	O
break	O
;	O
case	O
0x1e	int
:	O
uc	array
[	O
0	int
]	O
=	O
SHIFT	int
?	O
'A'	O
:	O
'a'	O
;	O
break	O
;	O
case	O
0x1f	int
:	O
uc	array
[	O
0	int
]	O
=	O
SHIFT	int
?	O
'S'	O
:	O
's'	O
;	O
break	O
;	O
case	O
0x20	int
:	O
uc	array
[	O
0	int
]	O
=	O
SHIFT	int
?	O
'D'	O
:	O
'd'	O
;	O
break	O
;	O
case	O
0x21	int
:	O
uc	array
[	O
0	int
]	O
=	O
SHIFT	int
?	O
'F'	O
:	O
'f'	O
;	O
break	O
;	O
case	O
0x22	int
:	O
uc	array
[	O
0	int
]	O
=	O
SHIFT	int
?	O
'G'	O
:	O
'g'	O
;	O
break	O
;	O
case	O
0x23	int
:	O
uc	array
[	O
0	int
]	O
=	O
SHIFT	int
?	O
'H'	O
:	O
'h'	O
;	O
break	O
;	O
case	O
0x24	int
:	O
uc	array
[	O
0	int
]	O
=	O
SHIFT	int
?	O
'J'	O
:	O
'j'	O
;	O
break	O
;	O
case	O
0x25	int
:	O
uc	array
[	O
0	int
]	O
=	O
SHIFT	int
?	O
'K'	O
:	O
'k'	O
;	O
break	O
;	O
case	O
0x26	int
:	O
uc	array
[	O
0	int
]	O
=	O
SHIFT	int
?	O
'L'	O
:	O
'l'	O
;	O
break	O
;	O
case	O
0x27	int
:	O
uc	array
[	O
0	int
]	O
=	O
SHIFT	int
?	O
':'	O
:	O
';'	O
;	O
break	O
;	O
case	O
0x28	int
:	O
uc	array
[	O
0	int
]	O
=	O
SHIFT	int
?	O
'"'	O
:	O
'\''	O
;	O
break	O
;	O
case	O
0x2b	int
:	O
uc	array
[	O
0	int
]	O
=	O
SHIFT	int
?	O
'|'	O
:	O
'\\'	O
;	O
break	O
;	O
case	O
0x2a	int
:	O
SHIFT	int
=	O
1	int
;	O
uc	array
[	O
0	int
]	O
=	O
SHIFT_DOWN	int
;	O
break	O
;	O
case	O
0x56	int
:	O
uc	array
[	O
0	int
]	O
=	O
SHIFT	int
?	O
'>'	O
:	O
'<'	O
;	O
break	O
;	O
case	O
0x2c	int
:	O
uc	array
[	O
0	int
]	O
=	O
SHIFT	int
?	O
'Z'	O
:	O
'z'	O
;	O
break	O
;	O
case	O
0x2d	int
:	O
uc	array
[	O
0	int
]	O
=	O
SHIFT	int
?	O
'X'	O
:	O
'x'	O
;	O
break	O
;	O
case	O
0x2e	int
:	O
uc	array
[	O
0	int
]	O
=	O
SHIFT	int
?	O
'C'	O
:	O
'c'	O
;	O
break	O
;	O
case	O
0x2f	int
:	O
uc	array
[	O
0	int
]	O
=	O
SHIFT	int
?	O
'V'	O
:	O
'v'	O
;	O
break	O
;	O
case	O
0x30	int
:	O
uc	array
[	O
0	int
]	O
=	O
SHIFT	int
?	O
'B'	O
:	O
'b'	O
;	O
break	O
;	O
case	O
0x31	int
:	O
uc	array
[	O
0	int
]	O
=	O
SHIFT	int
?	O
'N'	O
:	O
'n'	O
;	O
break	O
;	O
case	O
0x32	int
:	O
uc	array
[	O
0	int
]	O
=	O
SHIFT	int
?	O
'M'	O
:	O
'm'	O
;	O
break	O
;	O
case	O
0x33	int
:	O
uc	array
[	O
0	int
]	O
=	O
SHIFT	int
?	O
'<'	O
:	O
','	O
;	O
break	O
;	O
case	O
0x34	int
:	O
uc	array
[	O
0	int
]	O
=	O
SHIFT	int
?	O
'>'	O
:	O
'.'	O
;	O
break	O
;	O
case	O
0x35	int
:	O
uc	array
[	O
0	int
]	O
=	O
SHIFT	int
?	O
'?'	O
:	O
'/'	O
;	O
break	O
;	O
case	O
0x36	int
:	O
SHIFT	int
=	O
1	int
;	O
uc	array
[	O
0	int
]	O
=	O
SHIFT_DOWN	int
;	O
break	O
;	O
case	O
0x1d	int
:	O
CTRL	int
=	O
1	int
;	O
uc	array
[	O
0	int
]	O
=	O
0	int
;	O
break	O
;	O
case	O
0x38	int
:	O
ALT	int
=	O
1	int
;	O
uc	array
[	O
0	int
]	O
=	O
0	int
;	O
break	O
;	O
case	O
0x39	int
:	O
uc	array
[	O
0	int
]	O
=	O
SPACE_KEY	int
;	O
break	O
;	O
case	O
-	O
86	int
:	O
SHIFT	int
=	O
0	int
;	O
uc	array
[	O
0	int
]	O
=	O
SHIFT_UP	int
;	O
break	O
;	O
case	O
-	O
99	int
:	O
CTRL	int
=	O
0	int
;	O
uc	array
[	O
0	int
]	O
=	O
0	int
;	O
break	O
;	O
case	O
-	O
72	int
:	O
ALT	int
=	O
0	int
;	O
uc	array
[	O
0	int
]	O
=	O
0	int
;	O
break	O
;	O
case	O
-	O
74	int
:	O
SHIFT	int
=	O
0	int
;	O
uc	array
[	O
0	int
]	O
=	O
SHIFT_UP	int
;	O
break	O
;	O
case	O
-	O
32	int
:	O
res	int
=	O
read	function
(	O
0	int
,	O
&	O
buf	array
[	O
0	int
]	O
,	O
1	int
)	O
;	O
if	O
(	O
buf	array
[	O
0	int
]	O
==	O
73	int
)	O
{	O
uc	array
[	O
0	int
]	O
=	O
PGUP_KEY	int
;	O
break	O
;	O
}	O
if	O
(	O
buf	array
[	O
0	int
]	O
==	O
81	int
)	O
{	O
uc	array
[	O
0	int
]	O
=	O
PGDOWN_KEY	int
;	O
break	O
;	O
}	O
if	O
(	O
buf	array
[	O
0	int
]	O
==	O
72	int
)	O
{	O
uc	array
[	O
0	int
]	O
=	O
UP_KEY	int
;	O
break	O
;	O
}	O
if	O
(	O
buf	array
[	O
0	int
]	O
==	O
71	int
)	O
{	O
uc	array
[	O
0	int
]	O
=	O
HOME_KEY	int
;	O
break	O
;	O
}	O
if	O
(	O
buf	array
[	O
0	int
]	O
==	O
79	int
)	O
{	O
uc	array
[	O
0	int
]	O
=	O
END_KEY	int
;	O
break	O
;	O
}	O
if	O
(	O
buf	array
[	O
0	int
]	O
==	O
82	int
)	O
{	O
uc	array
[	O
0	int
]	O
=	O
INS_KEY	int
;	O
break	O
;	O
}	O
if	O
(	O
buf	array
[	O
0	int
]	O
==	O
83	int
)	O
{	O
uc	array
[	O
0	int
]	O
=	O
DEL_KEY	int
;	O
break	O
;	O
}	O
if	O
(	O
buf	array
[	O
0	int
]	O
==	O
75	int
)	O
{	O
uc	array
[	O
0	int
]	O
=	O
LEFT_KEY	int
;	O
break	O
;	O
}	O
if	O
(	O
buf	array
[	O
0	int
]	O
==	O
80	int
)	O
{	O
uc	array
[	O
0	int
]	O
=	O
DOWN_KEY	int
;	O
break	O
;	O
}	O
if	O
(	O
buf	array
[	O
0	int
]	O
==	O
77	int
)	O
{	O
uc	array
[	O
0	int
]	O
=	O
RIGHT_KEY	int
;	O
break	O
;	O
}	O
if	O
(	O
buf	array
[	O
0	int
]	O
==	O
29	int
)	O
{	O
CTRL	int
=	O
1	int
;	O
uc	array
[	O
0	int
]	O
=	O
0	int
;	O
break	O
;	O
}	O
if	O
(	O
buf	array
[	O
0	int
]	O
==	O
-	O
99	int
)	O
{	O
CTRL	int
=	O
0	int
;	O
uc	array
[	O
0	int
]	O
=	O
0	int
;	O
break	O
;	O
}	O
if	O
(	O
buf	array
[	O
0	int
]	O
==	O
56	int
)	O
{	O
ALT	int
=	O
1	int
;	O
uc	array
[	O
0	int
]	O
=	O
0	int
;	O
break	O
;	O
}	O
if	O
(	O
buf	array
[	O
0	int
]	O
==	O
-	O
72	int
)	O
{	O
ALT	int
=	O
0	int
;	O
uc	array
[	O
0	int
]	O
=	O
0	int
;	O
break	O
;	O
}	O
default	O
:	O
uc	array
[	O
0	int
]	O
=	O
buf	array
[	O
0	int
]	O
;	O
int	O
i	int
=	O
0	int
;	O
while	O
(	O
i	int
<	O
bytes	int
)	O
{	O
res	int
=	O
read	function
(	O
0	int
,	O
&	O
buf	array
[	O
0	int
]	O
,	O
1	int
)	O
;	O
uc	array
[	O
++	O
i	int
]	O
=	O
buf	array
[	O
0	int
]	O
;	O
}	O
break	O
;	O
}	O
break	O
;	O
}	O
return	O
uc	array
;	O
}	O
char	O
*	O
ugetKeyUnderX	function
(	O
)	O
{	O
int	O
c	int
;	O
int	O
bytes	int
=	O
0	int
;	O
memset	function
(	O
uc	array
,	O
0	int
,	O
5	int
)	O
;	O
ALT	int
=	O
0	int
;	O
CTRL	int
=	O
0	int
;	O
SHIFT	int
=	O
0	int
;	O
while	O
(	O
1	int
)	O
{	O
c	int
=	O
getchar	function
(	O
)	O
;	O
if	O
(	O
c	int
<	O
0	int
)	O
continue	O
;	O
if	O
(	O
(	O
c	int
&	O
mask	array
[	O
0	int
]	O
)	O
==	O
mask	array
[	O
0	int
]	O
)	O
bytes	int
++	O
;	O
if	O
(	O
(	O
c	int
&	O
mask	array
[	O
1	int
]	O
)	O
==	O
mask	array
[	O
1	int
]	O
)	O
bytes	int
++	O
;	O
if	O
(	O
(	O
c	int
&	O
mask	array
[	O
2	int
]	O
)	O
==	O
mask	array
[	O
2	int
]	O
)	O
bytes	int
++	O
;	O
if	O
(	O
c	int
==	O
127	int
)	O
{	O
uc	array
[	O
0	int
]	O
=	O
BACKSPACE_KEY	int
;	O
}	O
else	O
if	O
(	O
c	int
==	O
31	int
)	O
{	O
c	int
=	O
getchar	function
(	O
)	O
;	O
CTRL	int
=	O
1	int
;	O
uc	array
[	O
0	int
]	O
=	O
'/'	O
;	O
}	O
else	O
if	O
(	O
c	int
==	O
26	int
)	O
{	O
CTRL	int
=	O
1	int
;	O
uc	array
[	O
0	int
]	O
=	O
'z'	O
;	O
}	O
else	O
if	O
(	O
c	int
==	O
25	int
)	O
{	O
CTRL	int
=	O
1	int
;	O
uc	array
[	O
0	int
]	O
=	O
'y'	O
;	O
}	O
else	O
if	O
(	O
c	int
==	O
03	int
)	O
{	O
CTRL	int
=	O
1	int
;	O
uc	array
[	O
0	int
]	O
=	O
'c'	O
;	O
}	O
else	O
if	O
(	O
c	int
==	O
24	int
)	O
{	O
CTRL	int
=	O
1	int
;	O
uc	array
[	O
0	int
]	O
=	O
'x'	O
;	O
}	O
else	O
if	O
(	O
c	int
==	O
22	int
)	O
{	O
CTRL	int
=	O
1	int
;	O
uc	array
[	O
0	int
]	O
=	O
'v'	O
;	O
}	O
else	O
if	O
(	O
c	int
==	O
15	int
)	O
{	O
CTRL	int
=	O
1	int
;	O
uc	array
[	O
0	int
]	O
=	O
'o'	O
;	O
}	O
else	O
if	O
(	O
c	int
==	O
11	int
)	O
{	O
CTRL	int
=	O
1	int
;	O
uc	array
[	O
0	int
]	O
=	O
'k'	O
;	O
}	O
else	O
if	O
(	O
c	int
==	O
16	int
)	O
{	O
CTRL	int
=	O
1	int
;	O
uc	array
[	O
0	int
]	O
=	O
'p'	O
;	O
}	O
else	O
if	O
(	O
c	int
==	O
07	int
)	O
{	O
CTRL	int
=	O
1	int
;	O
uc	array
[	O
0	int
]	O
=	O
'g'	O
;	O
}	O
else	O
if	O
(	O
c	int
==	O
06	int
)	O
{	O
CTRL	int
=	O
1	int
;	O
uc	array
[	O
0	int
]	O
=	O
'f'	O
;	O
}	O
else	O
if	O
(	O
c	int
==	O
05	int
)	O
{	O
CTRL	int
=	O
1	int
;	O
uc	array
[	O
0	int
]	O
=	O
'e'	O
;	O
}	O
else	O
if	O
(	O
c	int
==	O
04	int
)	O
{	O
CTRL	int
=	O
1	int
;	O
uc	array
[	O
0	int
]	O
=	O
'd'	O
;	O
}	O
else	O
if	O
(	O
c	int
==	O
02	int
)	O
{	O
CTRL	int
=	O
1	int
;	O
uc	array
[	O
0	int
]	O
=	O
'b'	O
;	O
}	O
else	O
if	O
(	O
c	int
==	O
01	int
)	O
{	O
CTRL	int
=	O
1	int
;	O
uc	array
[	O
0	int
]	O
=	O
'a'	O
;	O
}	O
else	O
if	O
(	O
c	int
==	O
19	int
)	O
{	O
CTRL	int
=	O
1	int
;	O
uc	array
[	O
0	int
]	O
=	O
's'	O
;	O
}	O
else	O
if	O
(	O
c	int
==	O
18	int
)	O
{	O
CTRL	int
=	O
1	int
;	O
uc	array
[	O
0	int
]	O
=	O
'r'	O
;	O
}	O
else	O
if	O
(	O
c	int
==	O
14	int
)	O
{	O
CTRL	int
=	O
1	int
;	O
uc	array
[	O
0	int
]	O
=	O
'n'	O
;	O
}	O
else	O
if	O
(	O
c	int
==	O
17	int
)	O
{	O
CTRL	int
=	O
1	int
;	O
uc	array
[	O
0	int
]	O
=	O
'q'	O
;	O
}	O
else	O
if	O
(	O
c	int
==	O
23	int
)	O
{	O
CTRL	int
=	O
1	int
;	O
uc	array
[	O
0	int
]	O
=	O
'w'	O
;	O
}	O
else	O
if	O
(	O
c	int
==	O
00	int
)	O
{	O
CTRL	int
=	O
1	int
;	O
uc	array
[	O
0	int
]	O
=	O
SPACE_KEY	int
;	O
}	O
else	O
if	O
(	O
c	int
==	O
32	int
)	O
{	O
uc	array
[	O
0	int
]	O
=	O
SPACE_KEY	int
;	O
}	O
else	O
if	O
(	O
c	int
==	O
10	int
||	O
c	int
==	O
13	int
)	O
{	O
uc	array
[	O
0	int
]	O
=	O
ENTER_KEY	int
;	O
}	O
else	O
if	O
(	O
c	int
==	O
9	int
)	O
{	O
uc	array
[	O
0	int
]	O
=	O
TAB_KEY	int
;	O
}	O
else	O
if	O
(	O
c	int
==	O
27	int
)	O
{	O
c	int
=	O
getchar	function
(	O
)	O
;	O
if	O
(	O
(	O
c	int
==	O
'f'	O
)	O
||	O
(	O
c	int
==	O
'F'	O
)	O
)	O
{	O
ALT	int
=	O
1	int
;	O
uc	array
[	O
0	int
]	O
=	O
'f'	O
;	O
}	O
else	O
if	O
(	O
(	O
c	int
==	O
'e'	O
)	O
||	O
(	O
c	int
==	O
'E'	O
)	O
)	O
{	O
ALT	int
=	O
1	int
;	O
uc	array
[	O
0	int
]	O
=	O
'e'	O
;	O
}	O
else	O
if	O
(	O
(	O
c	int
==	O
'h'	O
)	O
||	O
(	O
c	int
==	O
'H'	O
)	O
)	O
{	O
ALT	int
=	O
1	int
;	O
uc	array
[	O
0	int
]	O
=	O
'h'	O
;	O
}	O
else	O
if	O
(	O
(	O
c	int
==	O
'o'	O
)	O
||	O
(	O
c	int
==	O
'O'	O
)	O
)	O
{	O
ALT	int
=	O
1	int
;	O
uc	array
[	O
0	int
]	O
=	O
'o'	O
;	O
}	O
else	O
if	O
(	O
(	O
c	int
==	O
'b'	O
)	O
||	O
(	O
c	int
==	O
'B'	O
)	O
)	O
{	O
ALT	int
=	O
1	int
;	O
uc	array
[	O
0	int
]	O
=	O
'b'	O
;	O
}	O
else	O
if	O
(	O
(	O
c	int
==	O
'v'	O
)	O
||	O
(	O
c	int
==	O
'V'	O
)	O
)	O
{	O
ALT	int
=	O
1	int
;	O
uc	array
[	O
0	int
]	O
=	O
'v'	O
;	O
}	O
else	O
if	O
(	O
(	O
c	int
==	O
'd'	O
)	O
||	O
(	O
c	int
==	O
'D'	O
)	O
)	O
{	O
ALT	int
=	O
1	int
;	O
uc	array
[	O
0	int
]	O
=	O
'd'	O
;	O
}	O
else	O
if	O
(	O
c	int
==	O
127	int
)	O
{	O
ALT	int
=	O
1	int
;	O
uc	array
[	O
0	int
]	O
=	O
BACKSPACE_KEY	int
;	O
}	O
else	O
if	O
(	O
c	int
==	O
91	int
)	O
{	O
c	int
=	O
getchar	function
(	O
)	O
;	O
if	O
(	O
c	int
==	O
65	int
)	O
{	O
uc	array
[	O
0	int
]	O
=	O
UP_KEY	int
;	O
}	O
else	O
if	O
(	O
c	int
==	O
66	int
)	O
{	O
uc	array
[	O
0	int
]	O
=	O
DOWN_KEY	int
;	O
}	O
else	O
if	O
(	O
c	int
==	O
67	int
)	O
{	O
uc	array
[	O
0	int
]	O
=	O
RIGHT_KEY	int
;	O
}	O
else	O
if	O
(	O
c	int
==	O
68	int
)	O
{	O
uc	array
[	O
0	int
]	O
=	O
LEFT_KEY	int
;	O
}	O
else	O
if	O
(	O
c	int
==	O
72	int
)	O
{	O
uc	array
[	O
0	int
]	O
=	O
HOME_KEY	int
;	O
}	O
else	O
if	O
(	O
c	int
==	O
70	int
)	O
{	O
uc	array
[	O
0	int
]	O
=	O
END_KEY	int
;	O
}	O
else	O
if	O
(	O
c	int
==	O
54	int
)	O
{	O
c	int
=	O
getchar	function
(	O
)	O
;	O
uc	array
[	O
0	int
]	O
=	O
PGDOWN_KEY	int
;	O
}	O
else	O
if	O
(	O
c	int
==	O
53	int
)	O
{	O
c	int
=	O
getchar	function
(	O
)	O
;	O
uc	array
[	O
0	int
]	O
=	O
PGUP_KEY	int
;	O
}	O
else	O
if	O
(	O
c	int
==	O
50	int
)	O
{	O
c	int
=	O
getchar	function
(	O
)	O
;	O
uc	array
[	O
0	int
]	O
=	O
INS_KEY	int
;	O
}	O
else	O
if	O
(	O
c	int
==	O
51	int
)	O
{	O
c	int
=	O
getchar	function
(	O
)	O
;	O
if	O
(	O
c	int
==	O
126	int
)	O
uc	array
[	O
0	int
]	O
=	O
DEL_KEY	int
;	O
else	O
if	O
(	O
c	int
==	O
59	int
)	O
{	O
c	int
=	O
getchar	function
(	O
)	O
;	O
CTRL	int
=	O
1	int
;	O
uc	array
[	O
0	int
]	O
=	O
DEL_KEY	int
;	O
}	O
}	O
else	O
if	O
(	O
c	int
==	O
49	int
)	O
{	O
CTRL	int
=	O
1	int
;	O
c	int
=	O
getchar	function
(	O
)	O
;	O
if	O
(	O
c	int
==	O
59	int
)	O
{	O
c	int
=	O
getchar	function
(	O
)	O
;	O
if	O
(	O
c	int
==	O
53	int
)	O
{	O
c	int
=	O
getchar	function
(	O
)	O
;	O
if	O
(	O
c	int
==	O
67	int
)	O
uc	array
[	O
0	int
]	O
=	O
RIGHT_KEY	int
;	O
else	O
if	O
(	O
c	int
==	O
68	int
)	O
uc	array
[	O
0	int
]	O
=	O
LEFT_KEY	int
;	O
else	O
if	O
(	O
c	int
==	O
65	int
)	O
uc	array
[	O
0	int
]	O
=	O
UP_KEY	int
;	O
else	O
if	O
(	O
c	int
==	O
66	int
)	O
uc	array
[	O
0	int
]	O
=	O
DOWN_KEY	int
;	O
else	O
if	O
(	O
c	int
==	O
72	int
)	O
uc	array
[	O
0	int
]	O
=	O
HOME_KEY	int
;	O
else	O
if	O
(	O
c	int
==	O
70	int
)	O
uc	array
[	O
0	int
]	O
=	O
END_KEY	int
;	O
}	O
}	O
}	O
}	O
else	O
uc	array
[	O
0	int
]	O
=	O
ESC_KEY	int
;	O
}	O
else	O
{	O
uc	array
[	O
0	int
]	O
=	O
c	int
;	O
int	O
i	int
=	O
0	int
;	O
while	O
(	O
i	int
<	O
bytes	int
)	O
{	O
c	int
=	O
getchar	function
(	O
)	O
;	O
uc	array
[	O
++	O
i	int
]	O
=	O
c	int
;	O
}	O
}	O
break	O
;	O
}	O
return	O
uc	array
;	O
}	O
char	O
*	O
ugetKey	function
(	O
)	O
{	O
if	O
(	O
X_IS_RUNNING	int
)	O
return	O
ugetKeyUnderX	function
(	O
)	O
;	O
else	O
return	O
ugetKeyUnderConsole	function
(	O
)	O
;	O
}	O
