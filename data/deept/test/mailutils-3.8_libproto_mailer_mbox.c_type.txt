struct	O
remote_mbox_data	struct
{	O
mu_mailer_t	pointer
mailer	pointer
;	O
}	O
;	O
static	O
void	O
remote_mbox_destroy	function
(	O
mu_mailbox_t	pointer
mailbox	pointer
)	O
{	O
if	O
(	O
mailbox	pointer
->	O
data	pointer
)	O
{	O
struct	O
remote_mbox_data	struct
*	O
dat	pointer
=	O
mailbox	pointer
->	O
data	pointer
;	O
mu_mailer_destroy	function
(	O
&	O
dat	pointer
->	O
mailer	pointer
)	O
;	O
free	function
(	O
dat	pointer
)	O
;	O
mailbox	pointer
->	O
data	pointer
=	O
NULL	O
;	O
}	O
}	O
static	O
int	O
remote_mbox_open	function
(	O
mu_mailbox_t	pointer
mbox	pointer
,	O
int	O
flags	int
)	O
{	O
struct	O
remote_mbox_data	struct
*	O
dat	pointer
=	O
mbox	pointer
->	O
data	pointer
;	O
int	O
status	int
;	O
int	O
mflags	int
=	O
0	int
;	O
if	O
(	O
!	O
dat	pointer
->	O
mailer	pointer
)	O
return	O
EINVAL	int
;	O
if	O
(	O
mu_debug_level_p	function
(	O
MU_DEBCAT_MAILBOX	int
,	O
MU_DEBUG_TRACE7	int
)	O
)	O
mflags	int
=	O
MAILER_FLAG_DEBUG_DATA	int
;	O
status	int
=	O
mu_mailer_open	function
(	O
dat	pointer
->	O
mailer	pointer
,	O
mflags	int
)	O
;	O
if	O
(	O
status	int
)	O
{	O
mu_debug	O
(	O
MU_DEBCAT_MAILBOX	int
,	O
MU_DEBUG_ERROR	int
,	O
(	O
"cannot open mailer: %s"	pointer
,	O
mu_strerror	function
(	O
status	int
)	O
)	O
)	O
;	O
return	O
status	int
;	O
}	O
mbox	pointer
->	O
flags	int
=	O
flags	int
;	O
return	O
0	int
;	O
}	O
static	O
int	O
remote_mbox_close	function
(	O
mu_mailbox_t	pointer
mbox	pointer
)	O
{	O
struct	O
remote_mbox_data	struct
*	O
dat	pointer
=	O
mbox	pointer
->	O
data	pointer
;	O
int	O
status	int
;	O
mu_debug	O
(	O
MU_DEBCAT_MAILBOX	int
,	O
MU_DEBUG_TRACE1	int
,	O
(	O
"remote_mbox_close"	pointer
)	O
)	O
;	O
status	int
=	O
mu_mailer_close	function
(	O
dat	pointer
->	O
mailer	pointer
)	O
;	O
if	O
(	O
status	int
)	O
mu_debug	O
(	O
MU_DEBCAT_MAILBOX	int
,	O
MU_DEBUG_ERROR	int
,	O
(	O
"closing mailer failed: %s"	pointer
,	O
mu_strerror	function
(	O
status	int
)	O
)	O
)	O
;	O
return	O
status	int
;	O
}	O
static	O
int	O
mkaddr	function
(	O
mu_mailbox_t	pointer
mbox	pointer
,	O
mu_property_t	pointer
property	pointer
,	O
const	O
char	O
*	O
key	pointer
,	O
mu_address_t	pointer
*	O
addr	pointer
)	O
{	O
const	O
char	O
*	O
str	pointer
=	O
NULL	O
;	O
mu_property_sget_value	function
(	O
property	pointer
,	O
key	pointer
,	O
&	O
str	pointer
)	O
;	O
if	O
(	O
str	pointer
&&	O
*	O
str	pointer
)	O
{	O
int	O
status	int
=	O
mu_address_create	function
(	O
addr	pointer
,	O
str	pointer
)	O
;	O
if	O
(	O
status	int
)	O
{	O
mu_debug	O
(	O
MU_DEBCAT_MAILBOX	int
,	O
MU_DEBUG_ERROR	int
,	O
(	O
"%s: %s mu_address_create failed: %s"	pointer
,	O
str	pointer
,	O
key	pointer
,	O
mu_strerror	function
(	O
status	int
)	O
)	O
)	O
;	O
return	O
status	int
;	O
}	O
}	O
else	O
*	O
addr	pointer
=	O
NULL	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
parse_received	function
(	O
mu_header_t	pointer
hdr	pointer
,	O
char	O
*	O
*	O
sptr	pointer
)	O
{	O
const	O
char	O
*	O
recv	function
;	O
size_t	long
i	long
;	O
struct	O
mu_wordsplit	struct
ws	pointer
;	O
enum	O
{	O
rcv_init	int
,	O
rcv_from	int
,	O
rcv_by	int
,	O
rcv_for	int
}	O
state	pointer
;	O
int	O
status	int
;	O
char	O
*	O
s	pointer
;	O
size_t	long
len	long
;	O
status	int
=	O
mu_header_sget_value	O
(	O
hdr	pointer
,	O
MU_HEADER_RECEIVED	pointer
,	O
&	O
recv	function
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
if	O
(	O
mu_wordsplit	struct
(	O
recv	function
,	O
&	O
ws	pointer
,	O
MU_WRDSF_DEFFLAGS	O
)	O
)	O
return	O
status	int
;	O
state	pointer
=	O
rcv_init	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
ws	pointer
.	O
ws_wordc	long
&&	O
state	pointer
!=	O
rcv_for	int
;	O
i	long
++	O
)	O
{	O
switch	O
(	O
state	pointer
)	O
{	O
case	O
rcv_init	int
:	O
if	O
(	O
strcmp	function
(	O
ws	pointer
.	O
ws_wordv	pointer
[	O
i	long
]	O
,	O
"from"	pointer
)	O
==	O
0	int
)	O
state	pointer
=	O
rcv_from	int
;	O
break	O
;	O
case	O
rcv_from	int
:	O
if	O
(	O
strcmp	function
(	O
ws	pointer
.	O
ws_wordv	pointer
[	O
i	long
]	O
,	O
"by"	pointer
)	O
==	O
0	int
)	O
state	pointer
=	O
rcv_by	int
;	O
break	O
;	O
case	O
rcv_by	int
:	O
if	O
(	O
strcmp	function
(	O
ws	pointer
.	O
ws_wordv	pointer
[	O
i	long
]	O
,	O
"for"	pointer
)	O
==	O
0	int
)	O
state	pointer
=	O
rcv_for	int
;	O
break	O
;	O
default	O
:	O
break	O
;	O
}	O
}	O
if	O
(	O
state	pointer
!=	O
rcv_for	int
||	O
ws	pointer
.	O
ws_wordv	pointer
[	O
i	long
]	O
==	O
NULL	O
)	O
return	O
MU_ERR_NOENT	O
;	O
s	pointer
=	O
ws	pointer
.	O
ws_wordv	pointer
[	O
i	long
]	O
;	O
len	long
=	O
strlen	function
(	O
s	pointer
)	O
;	O
if	O
(	O
s	pointer
[	O
len	long
-	O
1	int
]	O
==	O
';'	O
)	O
len	long
--	O
;	O
if	O
(	O
s	pointer
[	O
0	int
]	O
==	O
'<'	O
&&	O
s	pointer
[	O
len	long
-	O
1	int
]	O
==	O
'>'	O
)	O
{	O
s	pointer
++	O
;	O
len	long
--	O
;	O
}	O
*	O
sptr	pointer
=	O
malloc	function
(	O
len	long
)	O
;	O
if	O
(	O
!	O
*	O
sptr	pointer
)	O
status	int
=	O
ENOMEM	int
;	O
else	O
{	O
memcpy	function
(	O
*	O
sptr	pointer
,	O
s	pointer
,	O
len	long
)	O
;	O
(	O
*	O
sptr	pointer
)	O
[	O
len	long
-	O
1	int
]	O
=	O
0	int
;	O
}	O
mu_wordsplit_free	function
(	O
&	O
ws	pointer
)	O
;	O
return	O
status	int
;	O
}	O
static	O
int	O
guess_message_recipient	function
(	O
mu_message_t	pointer
msg	pointer
,	O
char	O
*	O
*	O
hdrname	pointer
,	O
char	O
*	O
*	O
pptr	pointer
)	O
{	O
mu_header_t	pointer
hdr	pointer
;	O
int	O
status	int
;	O
char	O
*	O
s	pointer
=	O
NULL	O
;	O
status	int
=	O
mu_message_get_header	function
(	O
msg	pointer
,	O
&	O
hdr	pointer
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
if	O
(	O
hdrname	pointer
)	O
{	O
int	O
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
hdrname	pointer
[	O
i	long
]	O
;	O
i	long
++	O
)	O
{	O
status	int
=	O
mu_header_aget_value	O
(	O
hdr	pointer
,	O
hdrname	pointer
[	O
i	long
]	O
,	O
&	O
s	pointer
)	O
;	O
if	O
(	O
status	int
==	O
0	int
&&	O
*	O
s	pointer
!=	O
0	int
)	O
break	O
;	O
}	O
}	O
else	O
status	int
=	O
MU_ERR_NOENT	O
;	O
if	O
(	O
status	int
==	O
MU_ERR_NOENT	O
)	O
{	O
status	int
=	O
parse_received	function
(	O
hdr	pointer
,	O
&	O
s	pointer
)	O
;	O
if	O
(	O
status	int
)	O
status	int
=	O
mu_header_aget_value	O
(	O
hdr	pointer
,	O
MU_HEADER_TO	pointer
,	O
&	O
s	pointer
)	O
;	O
}	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
*	O
pptr	pointer
=	O
s	pointer
;	O
return	O
0	int
;	O
}	O
static	O
int	O
remote_mbox_append_message	function
(	O
mu_mailbox_t	pointer
mbox	pointer
,	O
mu_message_t	pointer
msg	pointer
)	O
{	O
struct	O
remote_mbox_data	struct
*	O
dat	pointer
=	O
mbox	pointer
->	O
data	pointer
;	O
int	O
status	int
;	O
mu_property_t	pointer
property	pointer
=	O
NULL	O
;	O
mu_address_t	pointer
from	pointer
,	O
to	pointer
;	O
if	O
(	O
!	O
dat	pointer
->	O
mailer	pointer
)	O
return	O
EINVAL	int
;	O
status	int
=	O
mu_mailbox_get_property	function
(	O
mbox	pointer
,	O
&	O
property	pointer
)	O
;	O
if	O
(	O
status	int
)	O
mu_debug	O
(	O
MU_DEBCAT_MAILBOX	int
,	O
MU_DEBUG_ERROR	int
,	O
(	O
"failed to get property: %s"	pointer
,	O
mu_strerror	function
(	O
status	int
)	O
)	O
)	O
;	O
mkaddr	function
(	O
mbox	pointer
,	O
property	pointer
,	O
"FROM"	pointer
,	O
&	O
from	pointer
)	O
;	O
mkaddr	function
(	O
mbox	pointer
,	O
property	pointer
,	O
"TO"	pointer
,	O
&	O
to	pointer
)	O
;	O
if	O
(	O
!	O
to	pointer
)	O
{	O
char	O
*	O
rcpt	pointer
;	O
status	int
=	O
mu_url_aget_param	function
(	O
mbox	pointer
->	O
url	pointer
,	O
"to"	pointer
,	O
&	O
rcpt	pointer
)	O
;	O
if	O
(	O
status	int
==	O
MU_ERR_NOENT	O
)	O
{	O
static	O
char	O
*	O
hdrnames	array
[	O
]	O
=	O
{	O
"X-Envelope-To"	pointer
,	O
"Delivered-To"	pointer
,	O
"X-Original-To"	pointer
,	O
NULL	O
}	O
;	O
const	O
char	O
*	O
hstr	pointer
;	O
int	O
hc	int
;	O
char	O
*	O
*	O
hv	pointer
;	O
struct	O
mu_wordsplit	struct
ws	pointer
;	O
if	O
(	O
mu_url_sget_param	function
(	O
mbox	pointer
->	O
url	pointer
,	O
"recipient-headers"	pointer
,	O
&	O
hstr	pointer
)	O
==	O
0	int
)	O
{	O
if	O
(	O
*	O
hstr	pointer
==	O
0	int
)	O
{	O
hc	int
=	O
0	int
;	O
hv	pointer
=	O
NULL	O
;	O
}	O
else	O
{	O
ws	pointer
.	O
ws_delim	pointer
=	O
","	pointer
;	O
if	O
(	O
mu_wordsplit	struct
(	O
hstr	pointer
,	O
&	O
ws	pointer
,	O
MU_WRDSF_DEFFLAGS	O
|	O
MU_WRDSF_DELIM	O
|	O
MU_WRDSF_WS	O
)	O
)	O
return	O
errno	O
;	O
hc	int
=	O
1	int
;	O
hv	pointer
=	O
ws	pointer
.	O
ws_wordv	pointer
;	O
}	O
}	O
else	O
{	O
hc	int
=	O
0	int
;	O
hv	pointer
=	O
hdrnames	array
;	O
}	O
status	int
=	O
guess_message_recipient	function
(	O
msg	pointer
,	O
hv	pointer
,	O
&	O
rcpt	pointer
)	O
;	O
if	O
(	O
hc	int
)	O
mu_wordsplit_free	function
(	O
&	O
ws	pointer
)	O
;	O
}	O
if	O
(	O
status	int
!=	O
MU_ERR_NOENT	O
)	O
{	O
const	O
char	O
*	O
host	pointer
;	O
struct	O
mu_address	struct
hint	pointer
;	O
if	O
(	O
status	int
)	O
{	O
mu_debug	O
(	O
MU_DEBCAT_MAILBOX	int
,	O
MU_DEBUG_ERROR	int
,	O
(	O
"failed to get recipient: %s"	pointer
,	O
mu_strerror	function
(	O
status	int
)	O
)	O
)	O
;	O
return	O
status	int
;	O
}	O
status	int
=	O
mu_url_sget_param	function
(	O
mbox	pointer
->	O
url	pointer
,	O
"strip-domain"	pointer
,	O
NULL	O
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
{	O
char	O
*	O
q	pointer
=	O
strchr	function
(	O
rcpt	pointer
,	O
'@'	O
)	O
;	O
if	O
(	O
q	pointer
)	O
*	O
q	pointer
=	O
0	int
;	O
}	O
status	int
=	O
mu_url_sget_param	function
(	O
mbox	pointer
->	O
url	pointer
,	O
"domain"	pointer
,	O
&	O
host	pointer
)	O
;	O
if	O
(	O
!	O
(	O
status	int
==	O
0	int
&&	O
*	O
host	pointer
)	O
)	O
mu_url_sget_host	function
(	O
mbox	pointer
->	O
url	pointer
,	O
&	O
host	pointer
)	O
;	O
hint	pointer
.	O
domain	pointer
=	O
(	O
char	O
*	O
)	O
host	pointer
;	O
status	int
=	O
mu_address_create_hint	function
(	O
&	O
to	pointer
,	O
rcpt	pointer
,	O
&	O
hint	pointer
,	O
MU_ADDR_HINT_DOMAIN	int
)	O
;	O
free	function
(	O
rcpt	pointer
)	O
;	O
if	O
(	O
status	int
)	O
{	O
mu_debug	O
(	O
MU_DEBCAT_MAILBOX	int
,	O
MU_DEBUG_ERROR	int
,	O
(	O
"%s: %s mu_address_create failed: %s"	pointer
,	O
rcpt	pointer
,	O
"TO"	pointer
,	O
mu_strerror	function
(	O
status	int
)	O
)	O
)	O
;	O
return	O
status	int
;	O
}	O
}	O
}	O
status	int
=	O
mu_mailer_send_message	function
(	O
dat	pointer
->	O
mailer	pointer
,	O
msg	pointer
,	O
from	pointer
,	O
to	pointer
)	O
;	O
if	O
(	O
status	int
)	O
mu_debug	O
(	O
MU_DEBCAT_MAILBOX	int
,	O
MU_DEBUG_ERROR	int
,	O
(	O
"Sending message failed: %s"	pointer
,	O
mu_strerror	function
(	O
status	int
)	O
)	O
)	O
;	O
return	O
status	int
;	O
}	O
static	O
int	O
remote_mbox_scan	function
(	O
mu_mailbox_t	pointer
mbox	pointer
,	O
size_t	long
offset	long
,	O
size_t	long
*	O
pcount	pointer
)	O
{	O
if	O
(	O
pcount	pointer
)	O
*	O
pcount	pointer
=	O
0	int
;	O
return	O
0	int
;	O
}	O
static	O
int	O
remote_get_size	function
(	O
mu_mailbox_t	pointer
mbox	pointer
,	O
mu_off_t	long
*	O
psize	pointer
)	O
{	O
if	O
(	O
psize	pointer
)	O
*	O
psize	pointer
=	O
0	int
;	O
return	O
0	int
;	O
}	O
static	O
int	O
remote_sync	function
(	O
mu_mailbox_t	pointer
mbox	pointer
)	O
{	O
return	O
0	int
;	O
}	O
int	O
_mu_mailer_mailbox_init	function
(	O
mu_mailbox_t	pointer
mailbox	pointer
)	O
{	O
struct	O
remote_mbox_data	struct
*	O
dat	pointer
;	O
int	O
rc	int
;	O
mu_mailer_t	pointer
mailer	pointer
;	O
mu_url_t	pointer
url	pointer
;	O
if	O
(	O
mailbox	pointer
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
mu_debug	O
(	O
MU_DEBCAT_MAILBOX	int
,	O
MU_DEBUG_TRACE1	int
,	O
(	O
"_mu_mailer_mailbox_init(%s)"	pointer
,	O
mu_url_to_string	function
(	O
mailbox	pointer
->	O
url	pointer
)	O
)	O
)	O
;	O
rc	int
=	O
mu_url_dup	function
(	O
mailbox	pointer
->	O
url	pointer
,	O
&	O
url	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
rc	int
=	O
mu_mailer_create_from_url	function
(	O
&	O
mailer	pointer
,	O
url	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_debug	O
(	O
MU_DEBCAT_MAILBOX	int
,	O
MU_DEBUG_ERROR	int
,	O
(	O
"_mu_mailer_mailbox_init(%s): cannot create mailer: %s"	pointer
,	O
mu_url_to_string	function
(	O
url	pointer
)	O
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
)	O
;	O
mu_url_destroy	function
(	O
&	O
url	pointer
)	O
;	O
return	O
rc	int
;	O
}	O
dat	pointer
=	O
mailbox	pointer
->	O
data	pointer
=	O
calloc	function
(	O
1	int
,	O
sizeof	O
(	O
*	O
dat	pointer
)	O
)	O
;	O
if	O
(	O
dat	pointer
==	O
NULL	O
)	O
{	O
mu_mailer_destroy	function
(	O
&	O
mailer	pointer
)	O
;	O
return	O
ENOMEM	int
;	O
}	O
dat	pointer
->	O
mailer	pointer
=	O
mailer	pointer
;	O
mailbox	pointer
->	O
_destroy	pointer
=	O
remote_mbox_destroy	function
;	O
mailbox	pointer
->	O
_open	pointer
=	O
remote_mbox_open	function
;	O
mailbox	pointer
->	O
_close	pointer
=	O
remote_mbox_close	function
;	O
mailbox	pointer
->	O
_append_message	pointer
=	O
remote_mbox_append_message	function
;	O
mailbox	pointer
->	O
_scan	pointer
=	O
remote_mbox_scan	function
;	O
mailbox	pointer
->	O
_get_size	pointer
=	O
remote_get_size	function
;	O
mailbox	pointer
->	O
_sync	pointer
=	O
remote_sync	function
;	O
return	O
0	int
;	O
}	O
int	O
_mu_mailer_folder_init	function
(	O
mu_folder_t	pointer
folder	pointer
MU_ARG_UNUSED	O
)	O
{	O
return	O
0	int
;	O
}	O
