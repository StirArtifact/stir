extern	O
char	O
*	O
malloc	function
(	O
size_t	long
)	O
;	O
void	O
AX11AllocBufferedSegments	function
(	O
AWindow	struct
*	O
w	pointer
,	O
Color	short
c	pointer
)	O
;	O
void	O
AX11FlushBufferedSegments	function
(	O
AWindow	struct
*	O
w	pointer
)	O
{	O
register	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
AMaxPixelValue	int
;	O
++	O
i	int
)	O
{	O
if	O
(	O
w	pointer
->	O
bseg	array
[	O
i	int
]	O
.	O
count	int
>	O
0	int
)	O
{	O
if	O
(	O
w	pointer
->	O
flags	char
&	O
AMonoMode	int
)	O
{	O
XSetStipple	function
(	O
w	pointer
->	O
display	pointer
,	O
w	pointer
->	O
gc	pointer
,	O
w	pointer
->	O
stipple	long
[	O
i	int
]	O
)	O
;	O
}	O
else	O
{	O
XSetForeground	function
(	O
w	pointer
->	O
display	pointer
,	O
w	pointer
->	O
gc	pointer
,	O
w	pointer
->	O
color_to_pixel_map	array
[	O
i	int
]	O
)	O
;	O
}	O
XDrawSegments	function
(	O
w	pointer
->	O
display	pointer
,	O
w	pointer
->	O
d	long
,	O
w	pointer
->	O
gc	pointer
,	O
w	pointer
->	O
bseg	array
[	O
i	int
]	O
.	O
head	pointer
,	O
w	pointer
->	O
bseg	array
[	O
i	int
]	O
.	O
count	int
)	O
;	O
w	pointer
->	O
bseg	array
[	O
i	int
]	O
.	O
count	int
=	O
0	int
;	O
}	O
}	O
}	O
void	O
AX11AllocBufferedSegments	function
(	O
AWindow	struct
*	O
w	pointer
,	O
Color	short
c	pointer
)	O
{	O
w	pointer
->	O
bseg	array
[	O
c	pointer
]	O
.	O
head	pointer
=	O
(	O
XSegment	struct
*	O
)	O
malloc	function
(	O
w	pointer
->	O
bsegSize	int
*	O
sizeof	O
(	O
XSegment	struct
)	O
)	O
;	O
if	O
(	O
w	pointer
->	O
bseg	array
[	O
c	pointer
]	O
.	O
head	pointer
==	O
(	O
XSegment	struct
*	O
)	O
NULL	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Error allocating A library buffered segments\n"	pointer
)	O
;	O
exit	O
(	O
1	int
)	O
;	O
}	O
w	pointer
->	O
bseg	array
[	O
c	pointer
]	O
.	O
count	int
=	O
0	int
;	O
}	O
void	O
ScanLineDifference	function
(	O
AWindow	struct
*	O
w	pointer
)	O
{	O
register	O
ColorSegment	struct
*	O
cur	pointer
,	O
*	O
last	pointer
;	O
register	O
int	O
len	int
,	O
curX	int
=	O
0	int
,	O
curLength	int
=	O
0	int
,	O
curCount	int
,	O
lastCount	int
,	O
y	int
;	O
for	O
(	O
y	int
=	O
0	int
;	O
y	int
<	O
w	pointer
->	O
height	int
;	O
++	O
y	int
)	O
{	O
cur	pointer
=	O
w	pointer
->	O
scanLine	pointer
[	O
y	int
]	O
.	O
head	pointer
;	O
curCount	int
=	O
w	pointer
->	O
scanLine	pointer
[	O
y	int
]	O
.	O
count	int
;	O
if	O
(	O
curCount	int
>	O
0	int
)	O
{	O
curX	int
=	O
cur	pointer
->	O
x	int
;	O
curLength	int
=	O
cur	pointer
->	O
length	int
;	O
}	O
last	pointer
=	O
w	pointer
->	O
lastScanLine	pointer
[	O
y	int
]	O
.	O
head	pointer
;	O
lastCount	int
=	O
w	pointer
->	O
lastScanLine	pointer
[	O
y	int
]	O
.	O
count	int
;	O
while	O
(	O
curCount	int
!=	O
0	int
)	O
{	O
if	O
(	O
lastCount	int
==	O
0	int
)	O
{	O
if	O
(	O
cur	pointer
->	O
color	short
!=	O
UnchangedColor	int
)	O
{	O
OutputSegment	O
(	O
w	pointer
,	O
y	int
,	O
curX	int
,	O
curX	int
+	O
curLength	int
-	O
1	int
,	O
cur	pointer
->	O
color	short
)	O
;	O
}	O
++	O
cur	pointer
;	O
curX	int
=	O
cur	pointer
->	O
x	int
;	O
curLength	int
=	O
cur	pointer
->	O
length	int
;	O
--	O
curCount	int
;	O
}	O
else	O
if	O
(	O
curX	int
==	O
last	pointer
->	O
x	int
)	O
{	O
if	O
(	O
curLength	int
==	O
last	pointer
->	O
length	int
)	O
{	O
if	O
(	O
cur	pointer
->	O
color	short
!=	O
last	pointer
->	O
color	short
)	O
{	O
if	O
(	O
cur	pointer
->	O
color	short
!=	O
UnchangedColor	int
)	O
{	O
OutputSegment	O
(	O
w	pointer
,	O
y	int
,	O
curX	int
,	O
curX	int
+	O
curLength	int
-	O
1	int
,	O
cur	pointer
->	O
color	short
)	O
;	O
}	O
}	O
++	O
last	pointer
;	O
++	O
cur	pointer
;	O
curX	int
=	O
cur	pointer
->	O
x	int
;	O
curLength	int
=	O
cur	pointer
->	O
length	int
;	O
--	O
curCount	int
;	O
--	O
lastCount	int
;	O
}	O
else	O
if	O
(	O
curLength	int
<	O
last	pointer
->	O
length	int
)	O
{	O
if	O
(	O
cur	pointer
->	O
color	short
!=	O
last	pointer
->	O
color	short
)	O
{	O
if	O
(	O
cur	pointer
->	O
color	short
!=	O
UnchangedColor	int
)	O
{	O
OutputSegment	O
(	O
w	pointer
,	O
y	int
,	O
curX	int
,	O
curX	int
+	O
curLength	int
-	O
1	int
,	O
cur	pointer
->	O
color	short
)	O
;	O
}	O
}	O
last	pointer
->	O
x	int
+=	O
curLength	int
;	O
last	pointer
->	O
length	int
-=	O
curLength	int
;	O
++	O
cur	pointer
;	O
curX	int
=	O
cur	pointer
->	O
x	int
;	O
curLength	int
=	O
cur	pointer
->	O
length	int
;	O
--	O
curCount	int
;	O
}	O
else	O
{	O
if	O
(	O
cur	pointer
->	O
color	short
!=	O
last	pointer
->	O
color	short
)	O
{	O
if	O
(	O
cur	pointer
->	O
color	short
!=	O
UnchangedColor	int
)	O
{	O
OutputSegment	O
(	O
w	pointer
,	O
y	int
,	O
curX	int
,	O
curX	int
+	O
last	pointer
->	O
length	int
-	O
1	int
,	O
cur	pointer
->	O
color	short
)	O
;	O
}	O
}	O
curX	int
+=	O
last	pointer
->	O
length	int
;	O
curLength	int
-=	O
last	pointer
->	O
length	int
;	O
++	O
last	pointer
;	O
--	O
lastCount	int
;	O
}	O
}	O
else	O
if	O
(	O
curX	int
<	O
last	pointer
->	O
x	int
)	O
{	O
if	O
(	O
curX	int
+	O
curLength	int
>	O
last	pointer
->	O
x	int
)	O
len	int
=	O
last	pointer
->	O
x	int
-	O
curX	int
;	O
else	O
len	int
=	O
curLength	int
;	O
if	O
(	O
cur	pointer
->	O
color	short
!=	O
UnchangedColor	int
)	O
{	O
OutputSegment	O
(	O
w	pointer
,	O
y	int
,	O
curX	int
,	O
curX	int
+	O
len	int
-	O
1	int
,	O
cur	pointer
->	O
color	short
)	O
;	O
}	O
curX	int
+=	O
len	int
;	O
curLength	int
-=	O
len	int
;	O
if	O
(	O
curLength	int
==	O
0	int
)	O
{	O
++	O
cur	pointer
;	O
curX	int
=	O
cur	pointer
->	O
x	int
;	O
curLength	int
=	O
cur	pointer
->	O
length	int
;	O
--	O
curCount	int
;	O
}	O
}	O
else	O
{	O
if	O
(	O
last	pointer
->	O
x	int
+	O
last	pointer
->	O
length	int
>	O
curX	int
)	O
len	int
=	O
curX	int
-	O
last	pointer
->	O
x	int
;	O
else	O
len	int
=	O
last	pointer
->	O
length	int
;	O
last	pointer
->	O
x	int
+=	O
len	int
;	O
last	pointer
->	O
length	int
-=	O
len	int
;	O
if	O
(	O
last	pointer
->	O
length	int
==	O
0	int
)	O
{	O
++	O
last	pointer
;	O
--	O
lastCount	int
;	O
}	O
}	O
}	O
}	O
}	O
