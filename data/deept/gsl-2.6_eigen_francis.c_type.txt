static	O
inline	O
void	O
francis_schur_decomp	function
(	O
gsl_matrix	struct
*	O
H	pointer
,	O
gsl_vector_complex	struct
*	O
eval	pointer
,	O
gsl_eigen_francis_workspace	struct
*	O
w	pointer
)	O
;	O
static	O
inline	O
size_t	long
francis_search_subdiag_small_elements	function
(	O
gsl_matrix	struct
*	O
A	pointer
)	O
;	O
static	O
inline	O
int	O
francis_qrstep	function
(	O
gsl_matrix	struct
*	O
H	pointer
,	O
gsl_eigen_francis_workspace	struct
*	O
w	pointer
)	O
;	O
static	O
inline	O
void	O
francis_schur_standardize	function
(	O
gsl_matrix	struct
*	O
A	pointer
,	O
gsl_complex	struct
*	O
eval1	pointer
,	O
gsl_complex	struct
*	O
eval2	pointer
,	O
gsl_eigen_francis_workspace	struct
*	O
w	pointer
)	O
;	O
static	O
inline	O
size_t	long
francis_get_submatrix	function
(	O
gsl_matrix	struct
*	O
A	pointer
,	O
gsl_matrix	struct
*	O
B	pointer
)	O
;	O
static	O
void	O
francis_standard_form	function
(	O
gsl_matrix	struct
*	O
A	pointer
,	O
double	O
*	O
cs	pointer
,	O
double	O
*	O
sn	pointer
)	O
;	O
gsl_eigen_francis_workspace	struct
*	O
gsl_eigen_francis_alloc	function
(	O
void	O
)	O
{	O
gsl_eigen_francis_workspace	struct
*	O
w	pointer
;	O
w	pointer
=	O
(	O
gsl_eigen_francis_workspace	struct
*	O
)	O
calloc	function
(	O
1	int
,	O
sizeof	O
(	O
gsl_eigen_francis_workspace	struct
)	O
)	O
;	O
if	O
(	O
w	pointer
==	O
0	int
)	O
{	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for workspace"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
w	pointer
->	O
size	long
=	O
0	int
;	O
w	pointer
->	O
max_iterations	long
=	O
0	int
;	O
w	pointer
->	O
n_iter	long
=	O
0	int
;	O
w	pointer
->	O
n_evals	long
=	O
0	int
;	O
w	pointer
->	O
compute_t	int
=	O
0	int
;	O
w	pointer
->	O
Z	pointer
=	O
NULL	O
;	O
w	pointer
->	O
H	pointer
=	O
NULL	O
;	O
return	O
(	O
w	pointer
)	O
;	O
}	O
void	O
gsl_eigen_francis_free	function
(	O
gsl_eigen_francis_workspace	struct
*	O
w	pointer
)	O
{	O
RETURN_IF_NULL	O
(	O
w	pointer
)	O
;	O
free	function
(	O
w	pointer
)	O
;	O
}	O
void	O
gsl_eigen_francis_T	function
(	O
const	O
int	O
compute_t	int
,	O
gsl_eigen_francis_workspace	struct
*	O
w	pointer
)	O
{	O
w	pointer
->	O
compute_t	int
=	O
compute_t	int
;	O
}	O
int	O
gsl_eigen_francis	function
(	O
gsl_matrix	struct
*	O
H	pointer
,	O
gsl_vector_complex	struct
*	O
eval	pointer
,	O
gsl_eigen_francis_workspace	struct
*	O
w	pointer
)	O
{	O
if	O
(	O
H	pointer
->	O
size1	long
!=	O
H	pointer
->	O
size2	long
)	O
{	O
GSL_ERROR	O
(	O
"matrix must be square to compute eigenvalues"	pointer
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
if	O
(	O
eval	pointer
->	O
size	long
!=	O
H	pointer
->	O
size1	long
)	O
{	O
GSL_ERROR	O
(	O
"eigenvalue vector must match matrix size"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
const	O
size_t	long
N	int
=	O
H	pointer
->	O
size1	long
;	O
int	O
j	long
;	O
w	pointer
->	O
size	long
=	O
N	int
;	O
w	pointer
->	O
max_iterations	long
=	O
30	int
*	O
N	int
;	O
w	pointer
->	O
H	pointer
=	O
H	pointer
;	O
w	pointer
->	O
n_iter	long
=	O
0	int
;	O
w	pointer
->	O
n_evals	long
=	O
0	int
;	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
(	O
int	O
)	O
N	int
-	O
3	int
;	O
++	O
j	long
)	O
{	O
gsl_matrix_set	function
(	O
H	pointer
,	O
(	O
size_t	long
)	O
j	long
+	O
2	int
,	O
(	O
size_t	long
)	O
j	long
,	O
0.0	int
)	O
;	O
gsl_matrix_set	function
(	O
H	pointer
,	O
(	O
size_t	long
)	O
j	long
+	O
3	int
,	O
(	O
size_t	long
)	O
j	long
,	O
0.0	int
)	O
;	O
}	O
if	O
(	O
N	int
>	O
2	int
)	O
gsl_matrix_set	function
(	O
H	pointer
,	O
N	int
-	O
1	int
,	O
N	int
-	O
3	int
,	O
0.0	int
)	O
;	O
francis_schur_decomp	function
(	O
H	pointer
,	O
eval	pointer
,	O
w	pointer
)	O
;	O
if	O
(	O
w	pointer
->	O
n_evals	long
!=	O
N	int
)	O
{	O
GSL_ERROR	O
(	O
"maximum iterations reached without finding all eigenvalues"	pointer
,	O
GSL_EMAXITER	int
)	O
;	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
int	O
gsl_eigen_francis_Z	function
(	O
gsl_matrix	struct
*	O
H	pointer
,	O
gsl_vector_complex	struct
*	O
eval	pointer
,	O
gsl_matrix	struct
*	O
Z	pointer
,	O
gsl_eigen_francis_workspace	struct
*	O
w	pointer
)	O
{	O
int	O
s	pointer
;	O
w	pointer
->	O
Z	pointer
=	O
Z	pointer
;	O
s	pointer
=	O
gsl_eigen_francis	function
(	O
H	pointer
,	O
eval	pointer
,	O
w	pointer
)	O
;	O
w	pointer
->	O
Z	pointer
=	O
NULL	O
;	O
return	O
s	pointer
;	O
}	O
static	O
inline	O
void	O
francis_schur_decomp	function
(	O
gsl_matrix	struct
*	O
H	pointer
,	O
gsl_vector_complex	struct
*	O
eval	pointer
,	O
gsl_eigen_francis_workspace	struct
*	O
w	pointer
)	O
{	O
gsl_matrix_view	struct
m	pointer
;	O
size_t	long
N	int
;	O
size_t	long
q	pointer
;	O
gsl_complex	struct
lambda1	struct
,	O
lambda2	struct
;	O
N	int
=	O
H	pointer
->	O
size1	long
;	O
m	pointer
=	O
gsl_matrix_submatrix	function
(	O
H	pointer
,	O
0	int
,	O
0	int
,	O
N	int
,	O
N	int
)	O
;	O
while	O
(	O
(	O
N	int
>	O
2	int
)	O
&&	O
(	O
(	O
w	pointer
->	O
n_iter	long
)	O
++	O
<	O
w	pointer
->	O
max_iterations	long
)	O
)	O
{	O
q	pointer
=	O
francis_search_subdiag_small_elements	function
(	O
&	O
m	pointer
.	O
matrix	struct
)	O
;	O
if	O
(	O
q	pointer
==	O
0	int
)	O
{	O
francis_qrstep	function
(	O
&	O
m	pointer
.	O
matrix	struct
,	O
w	pointer
)	O
;	O
continue	O
;	O
}	O
if	O
(	O
q	pointer
==	O
(	O
N	int
-	O
1	int
)	O
)	O
{	O
GSL_SET_COMPLEX	O
(	O
&	O
lambda1	struct
,	O
gsl_matrix_get	function
(	O
&	O
m	pointer
.	O
matrix	struct
,	O
q	pointer
,	O
q	pointer
)	O
,	O
0.0	int
)	O
;	O
gsl_vector_complex_set	function
(	O
eval	pointer
,	O
w	pointer
->	O
n_evals	long
,	O
lambda1	struct
)	O
;	O
w	pointer
->	O
n_evals	long
+=	O
1	int
;	O
w	pointer
->	O
n_iter	long
=	O
0	int
;	O
--	O
N	int
;	O
m	pointer
=	O
gsl_matrix_submatrix	function
(	O
&	O
m	pointer
.	O
matrix	struct
,	O
0	int
,	O
0	int
,	O
N	int
,	O
N	int
)	O
;	O
}	O
else	O
if	O
(	O
q	pointer
==	O
(	O
N	int
-	O
2	int
)	O
)	O
{	O
gsl_matrix_view	struct
v	pointer
;	O
v	pointer
=	O
gsl_matrix_submatrix	function
(	O
&	O
m	pointer
.	O
matrix	struct
,	O
q	pointer
,	O
q	pointer
,	O
2	int
,	O
2	int
)	O
;	O
francis_schur_standardize	function
(	O
&	O
v	pointer
.	O
matrix	struct
,	O
&	O
lambda1	struct
,	O
&	O
lambda2	struct
,	O
w	pointer
)	O
;	O
gsl_vector_complex_set	function
(	O
eval	pointer
,	O
w	pointer
->	O
n_evals	long
,	O
lambda1	struct
)	O
;	O
gsl_vector_complex_set	function
(	O
eval	pointer
,	O
w	pointer
->	O
n_evals	long
+	O
1	int
,	O
lambda2	struct
)	O
;	O
w	pointer
->	O
n_evals	long
+=	O
2	int
;	O
w	pointer
->	O
n_iter	long
=	O
0	int
;	O
N	int
-=	O
2	int
;	O
m	pointer
=	O
gsl_matrix_submatrix	function
(	O
&	O
m	pointer
.	O
matrix	struct
,	O
0	int
,	O
0	int
,	O
N	int
,	O
N	int
)	O
;	O
}	O
else	O
if	O
(	O
q	pointer
==	O
1	int
)	O
{	O
GSL_SET_COMPLEX	O
(	O
&	O
lambda1	struct
,	O
gsl_matrix_get	function
(	O
&	O
m	pointer
.	O
matrix	struct
,	O
0	int
,	O
0	int
)	O
,	O
0.0	int
)	O
;	O
gsl_vector_complex_set	function
(	O
eval	pointer
,	O
w	pointer
->	O
n_evals	long
,	O
lambda1	struct
)	O
;	O
w	pointer
->	O
n_evals	long
+=	O
1	int
;	O
w	pointer
->	O
n_iter	long
=	O
0	int
;	O
--	O
N	int
;	O
m	pointer
=	O
gsl_matrix_submatrix	function
(	O
&	O
m	pointer
.	O
matrix	struct
,	O
1	int
,	O
1	int
,	O
N	int
,	O
N	int
)	O
;	O
}	O
else	O
if	O
(	O
q	pointer
==	O
2	int
)	O
{	O
gsl_matrix_view	struct
v	pointer
;	O
v	pointer
=	O
gsl_matrix_submatrix	function
(	O
&	O
m	pointer
.	O
matrix	struct
,	O
0	int
,	O
0	int
,	O
2	int
,	O
2	int
)	O
;	O
francis_schur_standardize	function
(	O
&	O
v	pointer
.	O
matrix	struct
,	O
&	O
lambda1	struct
,	O
&	O
lambda2	struct
,	O
w	pointer
)	O
;	O
gsl_vector_complex_set	function
(	O
eval	pointer
,	O
w	pointer
->	O
n_evals	long
,	O
lambda1	struct
)	O
;	O
gsl_vector_complex_set	function
(	O
eval	pointer
,	O
w	pointer
->	O
n_evals	long
+	O
1	int
,	O
lambda2	struct
)	O
;	O
w	pointer
->	O
n_evals	long
+=	O
2	int
;	O
w	pointer
->	O
n_iter	long
=	O
0	int
;	O
N	int
-=	O
2	int
;	O
m	pointer
=	O
gsl_matrix_submatrix	function
(	O
&	O
m	pointer
.	O
matrix	struct
,	O
2	int
,	O
2	int
,	O
N	int
,	O
N	int
)	O
;	O
}	O
else	O
{	O
gsl_matrix_view	struct
v	pointer
;	O
v	pointer
=	O
gsl_matrix_submatrix	function
(	O
&	O
m	pointer
.	O
matrix	struct
,	O
q	pointer
,	O
q	pointer
,	O
N	int
-	O
q	pointer
,	O
N	int
-	O
q	pointer
)	O
;	O
francis_schur_decomp	function
(	O
&	O
v	pointer
.	O
matrix	struct
,	O
eval	pointer
,	O
w	pointer
)	O
;	O
v	pointer
=	O
gsl_matrix_submatrix	function
(	O
&	O
m	pointer
.	O
matrix	struct
,	O
0	int
,	O
0	int
,	O
q	pointer
,	O
q	pointer
)	O
;	O
francis_schur_decomp	function
(	O
&	O
v	pointer
.	O
matrix	struct
,	O
eval	pointer
,	O
w	pointer
)	O
;	O
N	int
=	O
0	int
;	O
}	O
}	O
if	O
(	O
N	int
==	O
1	int
)	O
{	O
GSL_SET_COMPLEX	O
(	O
&	O
lambda1	struct
,	O
gsl_matrix_get	function
(	O
&	O
m	pointer
.	O
matrix	struct
,	O
0	int
,	O
0	int
)	O
,	O
0.0	int
)	O
;	O
gsl_vector_complex_set	function
(	O
eval	pointer
,	O
w	pointer
->	O
n_evals	long
,	O
lambda1	struct
)	O
;	O
w	pointer
->	O
n_evals	long
+=	O
1	int
;	O
w	pointer
->	O
n_iter	long
=	O
0	int
;	O
}	O
else	O
if	O
(	O
N	int
==	O
2	int
)	O
{	O
francis_schur_standardize	function
(	O
&	O
m	pointer
.	O
matrix	struct
,	O
&	O
lambda1	struct
,	O
&	O
lambda2	struct
,	O
w	pointer
)	O
;	O
gsl_vector_complex_set	function
(	O
eval	pointer
,	O
w	pointer
->	O
n_evals	long
,	O
lambda1	struct
)	O
;	O
gsl_vector_complex_set	function
(	O
eval	pointer
,	O
w	pointer
->	O
n_evals	long
+	O
1	int
,	O
lambda2	struct
)	O
;	O
w	pointer
->	O
n_evals	long
+=	O
2	int
;	O
w	pointer
->	O
n_iter	long
=	O
0	int
;	O
}	O
}	O
static	O
inline	O
int	O
francis_qrstep	function
(	O
gsl_matrix	struct
*	O
H	pointer
,	O
gsl_eigen_francis_workspace	struct
*	O
w	pointer
)	O
{	O
const	O
size_t	long
N	int
=	O
H	pointer
->	O
size1	long
;	O
size_t	long
i	long
;	O
gsl_matrix_view	struct
m	pointer
;	O
double	O
tau_i	double
;	O
double	O
dat	array
[	O
3	int
]	O
;	O
double	O
scale	double
;	O
gsl_vector_view	struct
v2	struct
,	O
v3	struct
;	O
size_t	long
q	pointer
,	O
r	pointer
;	O
size_t	long
top	long
=	O
0	int
;	O
double	O
s	pointer
,	O
disc	double
;	O
double	O
h_nn	double
,	O
h_nm1nm1	double
,	O
h_cross	double
,	O
h_tmp1	double
,	O
h_tmp2	double
;	O
v2	struct
=	O
gsl_vector_view_array	function
(	O
dat	array
,	O
2	int
)	O
;	O
v3	struct
=	O
gsl_vector_view_array	function
(	O
dat	array
,	O
3	int
)	O
;	O
if	O
(	O
(	O
w	pointer
->	O
n_iter	long
%	O
10	int
)	O
==	O
0	int
)	O
{	O
s	pointer
=	O
fabs	function
(	O
gsl_matrix_get	function
(	O
H	pointer
,	O
N	int
-	O
1	int
,	O
N	int
-	O
2	int
)	O
)	O
+	O
fabs	function
(	O
gsl_matrix_get	function
(	O
H	pointer
,	O
N	int
-	O
2	int
,	O
N	int
-	O
3	int
)	O
)	O
;	O
h_nn	double
=	O
gsl_matrix_get	function
(	O
H	pointer
,	O
N	int
-	O
1	int
,	O
N	int
-	O
1	int
)	O
+	O
GSL_FRANCIS_COEFF1	O
*	O
s	pointer
;	O
h_nm1nm1	double
=	O
h_nn	double
;	O
h_cross	double
=	O
GSL_FRANCIS_COEFF2	O
*	O
s	pointer
*	O
s	pointer
;	O
}	O
else	O
{	O
h_nn	double
=	O
gsl_matrix_get	function
(	O
H	pointer
,	O
N	int
-	O
1	int
,	O
N	int
-	O
1	int
)	O
;	O
h_nm1nm1	double
=	O
gsl_matrix_get	function
(	O
H	pointer
,	O
N	int
-	O
2	int
,	O
N	int
-	O
2	int
)	O
;	O
h_cross	double
=	O
gsl_matrix_get	function
(	O
H	pointer
,	O
N	int
-	O
1	int
,	O
N	int
-	O
2	int
)	O
*	O
gsl_matrix_get	function
(	O
H	pointer
,	O
N	int
-	O
2	int
,	O
N	int
-	O
1	int
)	O
;	O
disc	double
=	O
0.5	int
*	O
(	O
h_nm1nm1	double
-	O
h_nn	double
)	O
;	O
disc	double
=	O
disc	double
*	O
disc	double
+	O
h_cross	double
;	O
if	O
(	O
disc	double
>	O
0.0	int
)	O
{	O
double	O
ave	double
;	O
disc	double
=	O
sqrt	function
(	O
disc	double
)	O
;	O
ave	double
=	O
0.5	int
*	O
(	O
h_nm1nm1	double
+	O
h_nn	double
)	O
;	O
if	O
(	O
fabs	function
(	O
h_nm1nm1	double
)	O
-	O
fabs	function
(	O
h_nn	double
)	O
>	O
0.0	int
)	O
{	O
h_nm1nm1	double
=	O
h_nm1nm1	double
*	O
h_nn	double
-	O
h_cross	double
;	O
h_nn	double
=	O
h_nm1nm1	double
/	O
(	O
disc	double
*	O
GSL_SIGN	O
(	O
ave	double
)	O
+	O
ave	double
)	O
;	O
}	O
else	O
{	O
h_nn	double
=	O
disc	double
*	O
GSL_SIGN	O
(	O
ave	double
)	O
+	O
ave	double
;	O
}	O
h_nm1nm1	double
=	O
h_nn	double
;	O
h_cross	double
=	O
0.0	int
;	O
}	O
}	O
h_tmp1	double
=	O
h_nm1nm1	double
-	O
gsl_matrix_get	function
(	O
H	pointer
,	O
0	int
,	O
0	int
)	O
;	O
h_tmp2	double
=	O
h_nn	double
-	O
gsl_matrix_get	function
(	O
H	pointer
,	O
0	int
,	O
0	int
)	O
;	O
dat	array
[	O
0	int
]	O
=	O
(	O
h_tmp1	double
*	O
h_tmp2	double
-	O
h_cross	double
)	O
/	O
gsl_matrix_get	function
(	O
H	pointer
,	O
1	int
,	O
0	int
)	O
+	O
gsl_matrix_get	function
(	O
H	pointer
,	O
0	int
,	O
1	int
)	O
;	O
dat	array
[	O
1	int
]	O
=	O
gsl_matrix_get	function
(	O
H	pointer
,	O
1	int
,	O
1	int
)	O
-	O
gsl_matrix_get	function
(	O
H	pointer
,	O
0	int
,	O
0	int
)	O
-	O
h_tmp1	double
-	O
h_tmp2	double
;	O
dat	array
[	O
2	int
]	O
=	O
gsl_matrix_get	function
(	O
H	pointer
,	O
2	int
,	O
1	int
)	O
;	O
scale	double
=	O
fabs	function
(	O
dat	array
[	O
0	int
]	O
)	O
+	O
fabs	function
(	O
dat	array
[	O
1	int
]	O
)	O
+	O
fabs	function
(	O
dat	array
[	O
2	int
]	O
)	O
;	O
if	O
(	O
scale	double
!=	O
0.0	int
)	O
{	O
dat	array
[	O
0	int
]	O
/=	O
scale	double
;	O
dat	array
[	O
1	int
]	O
/=	O
scale	double
;	O
dat	array
[	O
2	int
]	O
/=	O
scale	double
;	O
}	O
if	O
(	O
w	pointer
->	O
Z	pointer
||	O
w	pointer
->	O
compute_t	int
)	O
{	O
top	long
=	O
francis_get_submatrix	function
(	O
w	pointer
->	O
H	pointer
,	O
H	pointer
)	O
;	O
}	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
N	int
-	O
2	int
;	O
++	O
i	long
)	O
{	O
tau_i	double
=	O
gsl_linalg_householder_transform	function
(	O
&	O
v3	struct
.	O
vector	struct
)	O
;	O
if	O
(	O
tau_i	double
!=	O
0.0	int
)	O
{	O
q	pointer
=	O
(	O
1	int
>	O
(	O
(	O
int	O
)	O
i	long
-	O
1	int
)	O
)	O
?	O
0	int
:	O
(	O
i	long
-	O
1	int
)	O
;	O
r	pointer
=	O
(	O
(	O
i	long
+	O
3	int
)	O
<	O
(	O
N	int
-	O
1	int
)	O
)	O
?	O
(	O
i	long
+	O
3	int
)	O
:	O
(	O
N	int
-	O
1	int
)	O
;	O
if	O
(	O
w	pointer
->	O
compute_t	int
)	O
{	O
m	pointer
=	O
gsl_matrix_submatrix	function
(	O
w	pointer
->	O
H	pointer
,	O
top	long
+	O
i	long
,	O
top	long
+	O
q	pointer
,	O
3	int
,	O
w	pointer
->	O
size	long
-	O
top	long
-	O
q	pointer
)	O
;	O
gsl_linalg_householder_hm	function
(	O
tau_i	double
,	O
&	O
v3	struct
.	O
vector	struct
,	O
&	O
m	pointer
.	O
matrix	struct
)	O
;	O
m	pointer
=	O
gsl_matrix_submatrix	function
(	O
w	pointer
->	O
H	pointer
,	O
0	int
,	O
top	long
+	O
i	long
,	O
top	long
+	O
r	pointer
+	O
1	int
,	O
3	int
)	O
;	O
gsl_linalg_householder_mh	function
(	O
tau_i	double
,	O
&	O
v3	struct
.	O
vector	struct
,	O
&	O
m	pointer
.	O
matrix	struct
)	O
;	O
}	O
else	O
{	O
m	pointer
=	O
gsl_matrix_submatrix	function
(	O
H	pointer
,	O
i	long
,	O
q	pointer
,	O
3	int
,	O
N	int
-	O
q	pointer
)	O
;	O
gsl_linalg_householder_hm	function
(	O
tau_i	double
,	O
&	O
v3	struct
.	O
vector	struct
,	O
&	O
m	pointer
.	O
matrix	struct
)	O
;	O
m	pointer
=	O
gsl_matrix_submatrix	function
(	O
H	pointer
,	O
0	int
,	O
i	long
,	O
r	pointer
+	O
1	int
,	O
3	int
)	O
;	O
gsl_linalg_householder_mh	function
(	O
tau_i	double
,	O
&	O
v3	struct
.	O
vector	struct
,	O
&	O
m	pointer
.	O
matrix	struct
)	O
;	O
}	O
if	O
(	O
w	pointer
->	O
Z	pointer
)	O
{	O
m	pointer
=	O
gsl_matrix_submatrix	function
(	O
w	pointer
->	O
Z	pointer
,	O
0	int
,	O
top	long
+	O
i	long
,	O
w	pointer
->	O
size	long
,	O
3	int
)	O
;	O
gsl_linalg_householder_mh	function
(	O
tau_i	double
,	O
&	O
v3	struct
.	O
vector	struct
,	O
&	O
m	pointer
.	O
matrix	struct
)	O
;	O
}	O
}	O
dat	array
[	O
0	int
]	O
=	O
gsl_matrix_get	function
(	O
H	pointer
,	O
i	long
+	O
1	int
,	O
i	long
)	O
;	O
dat	array
[	O
1	int
]	O
=	O
gsl_matrix_get	function
(	O
H	pointer
,	O
i	long
+	O
2	int
,	O
i	long
)	O
;	O
if	O
(	O
i	long
<	O
(	O
N	int
-	O
3	int
)	O
)	O
{	O
dat	array
[	O
2	int
]	O
=	O
gsl_matrix_get	function
(	O
H	pointer
,	O
i	long
+	O
3	int
,	O
i	long
)	O
;	O
}	O
scale	double
=	O
fabs	function
(	O
dat	array
[	O
0	int
]	O
)	O
+	O
fabs	function
(	O
dat	array
[	O
1	int
]	O
)	O
+	O
fabs	function
(	O
dat	array
[	O
2	int
]	O
)	O
;	O
if	O
(	O
scale	double
!=	O
0.0	int
)	O
{	O
dat	array
[	O
0	int
]	O
/=	O
scale	double
;	O
dat	array
[	O
1	int
]	O
/=	O
scale	double
;	O
dat	array
[	O
2	int
]	O
/=	O
scale	double
;	O
}	O
}	O
scale	double
=	O
fabs	function
(	O
dat	array
[	O
0	int
]	O
)	O
+	O
fabs	function
(	O
dat	array
[	O
1	int
]	O
)	O
;	O
if	O
(	O
scale	double
!=	O
0.0	int
)	O
{	O
dat	array
[	O
0	int
]	O
/=	O
scale	double
;	O
dat	array
[	O
1	int
]	O
/=	O
scale	double
;	O
}	O
tau_i	double
=	O
gsl_linalg_householder_transform	function
(	O
&	O
v2	struct
.	O
vector	struct
)	O
;	O
if	O
(	O
w	pointer
->	O
compute_t	int
)	O
{	O
m	pointer
=	O
gsl_matrix_submatrix	function
(	O
w	pointer
->	O
H	pointer
,	O
top	long
+	O
N	int
-	O
2	int
,	O
top	long
+	O
N	int
-	O
3	int
,	O
2	int
,	O
w	pointer
->	O
size	long
-	O
top	long
-	O
N	int
+	O
3	int
)	O
;	O
gsl_linalg_householder_hm	function
(	O
tau_i	double
,	O
&	O
v2	struct
.	O
vector	struct
,	O
&	O
m	pointer
.	O
matrix	struct
)	O
;	O
m	pointer
=	O
gsl_matrix_submatrix	function
(	O
w	pointer
->	O
H	pointer
,	O
0	int
,	O
top	long
+	O
N	int
-	O
2	int
,	O
top	long
+	O
N	int
,	O
2	int
)	O
;	O
gsl_linalg_householder_mh	function
(	O
tau_i	double
,	O
&	O
v2	struct
.	O
vector	struct
,	O
&	O
m	pointer
.	O
matrix	struct
)	O
;	O
}	O
else	O
{	O
m	pointer
=	O
gsl_matrix_submatrix	function
(	O
H	pointer
,	O
N	int
-	O
2	int
,	O
N	int
-	O
3	int
,	O
2	int
,	O
3	int
)	O
;	O
gsl_linalg_householder_hm	function
(	O
tau_i	double
,	O
&	O
v2	struct
.	O
vector	struct
,	O
&	O
m	pointer
.	O
matrix	struct
)	O
;	O
m	pointer
=	O
gsl_matrix_submatrix	function
(	O
H	pointer
,	O
0	int
,	O
N	int
-	O
2	int
,	O
N	int
,	O
2	int
)	O
;	O
gsl_linalg_householder_mh	function
(	O
tau_i	double
,	O
&	O
v2	struct
.	O
vector	struct
,	O
&	O
m	pointer
.	O
matrix	struct
)	O
;	O
}	O
if	O
(	O
w	pointer
->	O
Z	pointer
)	O
{	O
m	pointer
=	O
gsl_matrix_submatrix	function
(	O
w	pointer
->	O
Z	pointer
,	O
0	int
,	O
top	long
+	O
N	int
-	O
2	int
,	O
w	pointer
->	O
size	long
,	O
2	int
)	O
;	O
gsl_linalg_householder_mh	function
(	O
tau_i	double
,	O
&	O
v2	struct
.	O
vector	struct
,	O
&	O
m	pointer
.	O
matrix	struct
)	O
;	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
inline	O
size_t	long
francis_search_subdiag_small_elements	function
(	O
gsl_matrix	struct
*	O
A	pointer
)	O
{	O
const	O
size_t	long
N	int
=	O
A	pointer
->	O
size1	long
;	O
size_t	long
i	long
;	O
double	O
dpel	double
=	O
gsl_matrix_get	function
(	O
A	pointer
,	O
N	int
-	O
2	int
,	O
N	int
-	O
2	int
)	O
;	O
for	O
(	O
i	long
=	O
N	int
-	O
1	int
;	O
i	long
>	O
0	int
;	O
--	O
i	long
)	O
{	O
double	O
sel	double
=	O
gsl_matrix_get	function
(	O
A	pointer
,	O
i	long
,	O
i	long
-	O
1	int
)	O
;	O
double	O
del	double
=	O
gsl_matrix_get	function
(	O
A	pointer
,	O
i	long
,	O
i	long
)	O
;	O
if	O
(	O
(	O
sel	double
==	O
0.0	int
)	O
||	O
(	O
fabs	function
(	O
sel	double
)	O
<	O
GSL_DBL_EPSILON	int
*	O
(	O
fabs	function
(	O
del	double
)	O
+	O
fabs	function
(	O
dpel	double
)	O
)	O
)	O
)	O
{	O
gsl_matrix_set	function
(	O
A	pointer
,	O
i	long
,	O
i	long
-	O
1	int
,	O
0.0	int
)	O
;	O
return	O
(	O
i	long
)	O
;	O
}	O
dpel	double
=	O
del	double
;	O
}	O
return	O
(	O
0	int
)	O
;	O
}	O
static	O
inline	O
void	O
francis_schur_standardize	function
(	O
gsl_matrix	struct
*	O
A	pointer
,	O
gsl_complex	struct
*	O
eval1	pointer
,	O
gsl_complex	struct
*	O
eval2	pointer
,	O
gsl_eigen_francis_workspace	struct
*	O
w	pointer
)	O
{	O
const	O
size_t	long
N	int
=	O
w	pointer
->	O
size	long
;	O
double	O
cs	pointer
,	O
sn	pointer
;	O
size_t	long
top	long
;	O
top	long
=	O
francis_get_submatrix	function
(	O
w	pointer
->	O
H	pointer
,	O
A	pointer
)	O
;	O
francis_standard_form	function
(	O
A	pointer
,	O
&	O
cs	pointer
,	O
&	O
sn	pointer
)	O
;	O
GSL_SET_REAL	O
(	O
eval1	pointer
,	O
gsl_matrix_get	function
(	O
A	pointer
,	O
0	int
,	O
0	int
)	O
)	O
;	O
GSL_SET_REAL	O
(	O
eval2	pointer
,	O
gsl_matrix_get	function
(	O
A	pointer
,	O
1	int
,	O
1	int
)	O
)	O
;	O
if	O
(	O
gsl_matrix_get	function
(	O
A	pointer
,	O
1	int
,	O
0	int
)	O
==	O
0.0	int
)	O
{	O
GSL_SET_IMAG	O
(	O
eval1	pointer
,	O
0.0	int
)	O
;	O
GSL_SET_IMAG	O
(	O
eval2	pointer
,	O
0.0	int
)	O
;	O
}	O
else	O
{	O
double	O
tmp	double
=	O
sqrt	function
(	O
fabs	function
(	O
gsl_matrix_get	function
(	O
A	pointer
,	O
0	int
,	O
1	int
)	O
)	O
*	O
fabs	function
(	O
gsl_matrix_get	function
(	O
A	pointer
,	O
1	int
,	O
0	int
)	O
)	O
)	O
;	O
GSL_SET_IMAG	O
(	O
eval1	pointer
,	O
tmp	double
)	O
;	O
GSL_SET_IMAG	O
(	O
eval2	pointer
,	O
-	O
tmp	double
)	O
;	O
}	O
if	O
(	O
w	pointer
->	O
compute_t	int
)	O
{	O
gsl_vector_view	struct
xv	struct
,	O
yv	struct
;	O
if	O
(	O
top	long
<	O
(	O
N	int
-	O
2	int
)	O
)	O
{	O
xv	struct
=	O
gsl_matrix_subrow	function
(	O
w	pointer
->	O
H	pointer
,	O
top	long
,	O
top	long
+	O
2	int
,	O
N	int
-	O
top	long
-	O
2	int
)	O
;	O
yv	struct
=	O
gsl_matrix_subrow	function
(	O
w	pointer
->	O
H	pointer
,	O
top	long
+	O
1	int
,	O
top	long
+	O
2	int
,	O
N	int
-	O
top	long
-	O
2	int
)	O
;	O
gsl_blas_drot	function
(	O
&	O
xv	struct
.	O
vector	struct
,	O
&	O
yv	struct
.	O
vector	struct
,	O
cs	pointer
,	O
sn	pointer
)	O
;	O
}	O
if	O
(	O
top	long
>	O
0	int
)	O
{	O
xv	struct
=	O
gsl_matrix_subcolumn	function
(	O
w	pointer
->	O
H	pointer
,	O
top	long
,	O
0	int
,	O
top	long
)	O
;	O
yv	struct
=	O
gsl_matrix_subcolumn	function
(	O
w	pointer
->	O
H	pointer
,	O
top	long
+	O
1	int
,	O
0	int
,	O
top	long
)	O
;	O
gsl_blas_drot	function
(	O
&	O
xv	struct
.	O
vector	struct
,	O
&	O
yv	struct
.	O
vector	struct
,	O
cs	pointer
,	O
sn	pointer
)	O
;	O
}	O
}	O
if	O
(	O
w	pointer
->	O
Z	pointer
)	O
{	O
gsl_vector_view	struct
xv	struct
,	O
yv	struct
;	O
xv	struct
=	O
gsl_matrix_column	function
(	O
w	pointer
->	O
Z	pointer
,	O
top	long
)	O
;	O
yv	struct
=	O
gsl_matrix_column	function
(	O
w	pointer
->	O
Z	pointer
,	O
top	long
+	O
1	int
)	O
;	O
gsl_blas_drot	function
(	O
&	O
xv	struct
.	O
vector	struct
,	O
&	O
yv	struct
.	O
vector	struct
,	O
cs	pointer
,	O
sn	pointer
)	O
;	O
}	O
}	O
static	O
inline	O
size_t	long
francis_get_submatrix	function
(	O
gsl_matrix	struct
*	O
A	pointer
,	O
gsl_matrix	struct
*	O
B	pointer
)	O
{	O
size_t	long
diff	long
;	O
double	O
ratio	double
;	O
size_t	long
top	long
;	O
diff	long
=	O
(	O
size_t	long
)	O
(	O
B	pointer
->	O
data	pointer
-	O
A	pointer
->	O
data	pointer
)	O
;	O
ratio	double
=	O
(	O
double	O
)	O
diff	long
/	O
(	O
(	O
double	O
)	O
(	O
A	pointer
->	O
tda	long
+	O
1	int
)	O
)	O
;	O
top	long
=	O
(	O
size_t	long
)	O
floor	function
(	O
ratio	double
)	O
;	O
return	O
top	long
;	O
}	O
static	O
void	O
francis_standard_form	function
(	O
gsl_matrix	struct
*	O
A	pointer
,	O
double	O
*	O
cs	pointer
,	O
double	O
*	O
sn	pointer
)	O
{	O
double	O
a	pointer
,	O
b	pointer
,	O
c	pointer
,	O
d	pointer
;	O
double	O
tmp	double
;	O
double	O
p	int
,	O
z	struct
;	O
double	O
bcmax	double
,	O
bcmis	double
,	O
scale	double
;	O
double	O
tau	pointer
,	O
sigma	double
;	O
double	O
cs1	double
,	O
sn1	double
;	O
double	O
aa	double
,	O
bb	double
,	O
cc	double
,	O
dd	double
;	O
double	O
sab	double
,	O
sac	double
;	O
a	pointer
=	O
gsl_matrix_get	function
(	O
A	pointer
,	O
0	int
,	O
0	int
)	O
;	O
b	pointer
=	O
gsl_matrix_get	function
(	O
A	pointer
,	O
0	int
,	O
1	int
)	O
;	O
c	pointer
=	O
gsl_matrix_get	function
(	O
A	pointer
,	O
1	int
,	O
0	int
)	O
;	O
d	pointer
=	O
gsl_matrix_get	function
(	O
A	pointer
,	O
1	int
,	O
1	int
)	O
;	O
if	O
(	O
c	pointer
==	O
0.0	int
)	O
{	O
*	O
cs	pointer
=	O
1.0	int
;	O
*	O
sn	pointer
=	O
0.0	int
;	O
}	O
else	O
if	O
(	O
b	pointer
==	O
0.0	int
)	O
{	O
*	O
cs	pointer
=	O
0.0	int
;	O
*	O
sn	pointer
=	O
1.0	int
;	O
tmp	double
=	O
d	pointer
;	O
d	pointer
=	O
a	pointer
;	O
a	pointer
=	O
tmp	double
;	O
b	pointer
=	O
-	O
c	pointer
;	O
c	pointer
=	O
0.0	int
;	O
}	O
else	O
if	O
(	O
(	O
(	O
a	pointer
-	O
d	pointer
)	O
==	O
0.0	int
)	O
&&	O
(	O
GSL_SIGN	O
(	O
b	pointer
)	O
!=	O
GSL_SIGN	O
(	O
c	pointer
)	O
)	O
)	O
{	O
*	O
cs	pointer
=	O
1.0	int
;	O
*	O
sn	pointer
=	O
0.0	int
;	O
}	O
else	O
{	O
tmp	double
=	O
a	pointer
-	O
d	pointer
;	O
p	int
=	O
0.5	int
*	O
tmp	double
;	O
bcmax	double
=	O
GSL_MAX	O
(	O
fabs	function
(	O
b	pointer
)	O
,	O
fabs	function
(	O
c	pointer
)	O
)	O
;	O
bcmis	double
=	O
GSL_MIN	O
(	O
fabs	function
(	O
b	pointer
)	O
,	O
fabs	function
(	O
c	pointer
)	O
)	O
*	O
GSL_SIGN	O
(	O
b	pointer
)	O
*	O
GSL_SIGN	O
(	O
c	pointer
)	O
;	O
scale	double
=	O
GSL_MAX	O
(	O
fabs	function
(	O
p	int
)	O
,	O
bcmax	double
)	O
;	O
z	struct
=	O
(	O
p	int
/	O
scale	double
)	O
*	O
p	int
+	O
(	O
bcmax	double
/	O
scale	double
)	O
*	O
bcmis	double
;	O
if	O
(	O
z	struct
>=	O
4.0	int
*	O
GSL_DBL_EPSILON	int
)	O
{	O
z	struct
=	O
p	int
+	O
GSL_SIGN	O
(	O
p	int
)	O
*	O
fabs	function
(	O
sqrt	function
(	O
scale	double
)	O
*	O
sqrt	function
(	O
z	struct
)	O
)	O
;	O
a	pointer
=	O
d	pointer
+	O
z	struct
;	O
d	pointer
-=	O
(	O
bcmax	double
/	O
z	struct
)	O
*	O
bcmis	double
;	O
tau	pointer
=	O
gsl_hypot	function
(	O
c	pointer
,	O
z	struct
)	O
;	O
*	O
cs	pointer
=	O
z	struct
/	O
tau	pointer
;	O
*	O
sn	pointer
=	O
c	pointer
/	O
tau	pointer
;	O
b	pointer
-=	O
c	pointer
;	O
c	pointer
=	O
0.0	int
;	O
}	O
else	O
{	O
sigma	double
=	O
b	pointer
+	O
c	pointer
;	O
tau	pointer
=	O
gsl_hypot	function
(	O
sigma	double
,	O
tmp	double
)	O
;	O
*	O
cs	pointer
=	O
sqrt	function
(	O
0.5	int
*	O
(	O
1.0	int
+	O
fabs	function
(	O
sigma	double
)	O
/	O
tau	pointer
)	O
)	O
;	O
*	O
sn	pointer
=	O
-	O
(	O
p	int
/	O
(	O
tau	pointer
*	O
(	O
*	O
cs	pointer
)	O
)	O
)	O
*	O
GSL_SIGN	O
(	O
sigma	double
)	O
;	O
aa	double
=	O
a	pointer
*	O
(	O
*	O
cs	pointer
)	O
+	O
b	pointer
*	O
(	O
*	O
sn	pointer
)	O
;	O
bb	double
=	O
-	O
a	pointer
*	O
(	O
*	O
sn	pointer
)	O
+	O
b	pointer
*	O
(	O
*	O
cs	pointer
)	O
;	O
cc	double
=	O
c	pointer
*	O
(	O
*	O
cs	pointer
)	O
+	O
d	pointer
*	O
(	O
*	O
sn	pointer
)	O
;	O
dd	double
=	O
-	O
c	pointer
*	O
(	O
*	O
sn	pointer
)	O
+	O
d	pointer
*	O
(	O
*	O
cs	pointer
)	O
;	O
a	pointer
=	O
aa	double
*	O
(	O
*	O
cs	pointer
)	O
+	O
cc	double
*	O
(	O
*	O
sn	pointer
)	O
;	O
b	pointer
=	O
bb	double
*	O
(	O
*	O
cs	pointer
)	O
+	O
dd	double
*	O
(	O
*	O
sn	pointer
)	O
;	O
c	pointer
=	O
-	O
aa	double
*	O
(	O
*	O
sn	pointer
)	O
+	O
cc	double
*	O
(	O
*	O
cs	pointer
)	O
;	O
d	pointer
=	O
-	O
bb	double
*	O
(	O
*	O
sn	pointer
)	O
+	O
dd	double
*	O
(	O
*	O
cs	pointer
)	O
;	O
tmp	double
=	O
0.5	int
*	O
(	O
a	pointer
+	O
d	pointer
)	O
;	O
a	pointer
=	O
d	pointer
=	O
tmp	double
;	O
if	O
(	O
c	pointer
!=	O
0.0	int
)	O
{	O
if	O
(	O
b	pointer
!=	O
0.0	int
)	O
{	O
if	O
(	O
GSL_SIGN	O
(	O
b	pointer
)	O
==	O
GSL_SIGN	O
(	O
c	pointer
)	O
)	O
{	O
sab	double
=	O
sqrt	function
(	O
fabs	function
(	O
b	pointer
)	O
)	O
;	O
sac	double
=	O
sqrt	function
(	O
fabs	function
(	O
c	pointer
)	O
)	O
;	O
p	int
=	O
GSL_SIGN	O
(	O
c	pointer
)	O
*	O
fabs	function
(	O
sab	double
*	O
sac	double
)	O
;	O
tau	pointer
=	O
1.0	int
/	O
sqrt	function
(	O
fabs	function
(	O
b	pointer
+	O
c	pointer
)	O
)	O
;	O
a	pointer
=	O
tmp	double
+	O
p	int
;	O
d	pointer
=	O
tmp	double
-	O
p	int
;	O
b	pointer
-=	O
c	pointer
;	O
c	pointer
=	O
0.0	int
;	O
cs1	double
=	O
sab	double
*	O
tau	pointer
;	O
sn1	double
=	O
sac	double
*	O
tau	pointer
;	O
tmp	double
=	O
(	O
*	O
cs	pointer
)	O
*	O
cs1	double
-	O
(	O
*	O
sn	pointer
)	O
*	O
sn1	double
;	O
*	O
sn	pointer
=	O
(	O
*	O
cs	pointer
)	O
*	O
sn1	double
+	O
(	O
*	O
sn	pointer
)	O
*	O
cs1	double
;	O
*	O
cs	pointer
=	O
tmp	double
;	O
}	O
}	O
else	O
{	O
b	pointer
=	O
-	O
c	pointer
;	O
c	pointer
=	O
0.0	int
;	O
tmp	double
=	O
*	O
cs	pointer
;	O
*	O
cs	pointer
=	O
-	O
(	O
*	O
sn	pointer
)	O
;	O
*	O
sn	pointer
=	O
tmp	double
;	O
}	O
}	O
}	O
}	O
gsl_matrix_set	function
(	O
A	pointer
,	O
0	int
,	O
0	int
,	O
a	pointer
)	O
;	O
gsl_matrix_set	function
(	O
A	pointer
,	O
0	int
,	O
1	int
,	O
b	pointer
)	O
;	O
gsl_matrix_set	function
(	O
A	pointer
,	O
1	int
,	O
0	int
,	O
c	pointer
)	O
;	O
gsl_matrix_set	function
(	O
A	pointer
,	O
1	int
,	O
1	int
,	O
d	pointer
)	O
;	O
}	O
