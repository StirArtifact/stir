char	O
*	O
mu_ticket_file	pointer
=	O
"~/.mu-tickets"	pointer
;	O
static	O
char	O
*	O
_mu_mailbox_pattern	pointer
;	O
static	O
char	O
*	O
_default_folder_dir	pointer
=	O
"Mail"	pointer
;	O
static	O
char	O
*	O
_mu_folder_dir	pointer
;	O
static	O
int	O
mu_normalize_mailbox_url	function
(	O
char	O
*	O
*	O
pout	pointer
,	O
const	O
char	O
*	O
dir	pointer
)	O
{	O
int	O
len	int
;	O
if	O
(	O
!	O
pout	pointer
)	O
return	O
MU_ERR_OUT_PTR_NULL	O
;	O
len	int
=	O
strlen	function
(	O
dir	pointer
)	O
;	O
if	O
(	O
dir	pointer
[	O
len	int
-	O
1	int
]	O
==	O
'='	O
)	O
{	O
if	O
(	O
!	O
(	O
len	int
>	O
5	int
&&	O
strcmp	function
(	O
dir	pointer
+	O
len	int
-	O
5	int
,	O
"user="	pointer
)	O
==	O
0	int
)	O
)	O
return	O
MU_ERR_BAD_FILENAME	O
;	O
else	O
{	O
int	O
rc	int
=	O
mu_asprintf	function
(	O
pout	pointer
,	O
"%s%s"	pointer
,	O
dir	pointer
,	O
USERSUFFIX	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
}	O
}	O
else	O
{	O
*	O
pout	pointer
=	O
mu_make_file_name	O
(	O
dir	pointer
,	O
USERSUFFIX	pointer
)	O
;	O
if	O
(	O
!	O
*	O
pout	pointer
)	O
return	O
errno	O
;	O
}	O
return	O
0	int
;	O
}	O
int	O
mu_set_mail_directory	function
(	O
const	O
char	O
*	O
p	pointer
)	O
{	O
if	O
(	O
_mu_mailbox_pattern	pointer
)	O
free	function
(	O
_mu_mailbox_pattern	pointer
)	O
;	O
if	O
(	O
!	O
p	pointer
)	O
{	O
_mu_mailbox_pattern	pointer
=	O
NULL	O
;	O
return	O
0	int
;	O
}	O
return	O
mu_normalize_mailbox_url	function
(	O
&	O
_mu_mailbox_pattern	pointer
,	O
p	pointer
)	O
;	O
}	O
int	O
mu_set_mailbox_pattern	function
(	O
const	O
char	O
*	O
pat	pointer
)	O
{	O
char	O
*	O
p	pointer
;	O
if	O
(	O
pat	pointer
)	O
{	O
p	pointer
=	O
strdup	function
(	O
pat	pointer
)	O
;	O
if	O
(	O
!	O
p	pointer
)	O
return	O
ENOMEM	int
;	O
}	O
else	O
p	pointer
=	O
NULL	O
;	O
if	O
(	O
_mu_mailbox_pattern	pointer
)	O
free	function
(	O
_mu_mailbox_pattern	pointer
)	O
;	O
_mu_mailbox_pattern	pointer
=	O
p	pointer
;	O
return	O
0	int
;	O
}	O
int	O
mu_set_folder_directory	function
(	O
const	O
char	O
*	O
p	pointer
)	O
{	O
char	O
*	O
fdir	pointer
;	O
if	O
(	O
p	pointer
)	O
{	O
fdir	pointer
=	O
strdup	function
(	O
p	pointer
)	O
;	O
if	O
(	O
!	O
fdir	pointer
)	O
return	O
ENOMEM	int
;	O
}	O
else	O
fdir	pointer
=	O
NULL	O
;	O
if	O
(	O
_mu_folder_dir	pointer
!=	O
_default_folder_dir	pointer
)	O
free	function
(	O
_mu_folder_dir	pointer
)	O
;	O
_mu_folder_dir	pointer
=	O
fdir	pointer
;	O
return	O
0	int
;	O
}	O
const	O
char	O
*	O
mu_mailbox_url	function
(	O
void	O
)	O
{	O
if	O
(	O
_mu_mailbox_pattern	pointer
)	O
return	O
_mu_mailbox_pattern	pointer
;	O
return	O
MU_PATH_MAILDIR	O
"/"	pointer
USERSUFFIX	pointer
;	O
}	O
const	O
char	O
*	O
mu_folder_directory	function
(	O
void	O
)	O
{	O
if	O
(	O
!	O
_mu_folder_dir	pointer
&&	O
_default_folder_dir	pointer
)	O
{	O
mu_set_folder_directory	function
(	O
_default_folder_dir	pointer
)	O
;	O
_default_folder_dir	pointer
=	O
NULL	O
;	O
}	O
return	O
_mu_folder_dir	pointer
;	O
}	O
int	O
mu_construct_user_mailbox_url	function
(	O
char	O
*	O
*	O
pout	pointer
,	O
const	O
char	O
*	O
name	pointer
)	O
{	O
int	O
rc	int
;	O
const	O
char	O
*	O
pat	pointer
=	O
mu_mailbox_url	function
(	O
)	O
;	O
char	O
*	O
result	pointer
;	O
rc	int
=	O
mu_str_vexpand	function
(	O
&	O
result	pointer
,	O
pat	pointer
,	O
"user"	pointer
,	O
name	pointer
,	O
NULL	O
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
if	O
(	O
rc	int
==	O
MU_ERR_FAILURE	O
)	O
{	O
mu_error	function
(	O
_	O
(	O
"cannot expand line `%s': %s"	pointer
)	O
,	O
pat	pointer
,	O
result	pointer
)	O
;	O
free	function
(	O
result	pointer
)	O
;	O
}	O
else	O
mu_error	function
(	O
_	O
(	O
"cannot expand line `%s': %s"	pointer
)	O
,	O
pat	pointer
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
return	O
rc	int
;	O
}	O
*	O
pout	pointer
=	O
result	pointer
;	O
return	O
0	int
;	O
}	O
static	O
int	O
split_shortcut	function
(	O
const	O
char	O
*	O
file	pointer
,	O
const	O
char	O
pfx	pointer
[	O
]	O
,	O
char	O
*	O
*	O
user	pointer
,	O
char	O
*	O
*	O
rest	pointer
)	O
{	O
*	O
user	pointer
=	O
NULL	O
;	O
*	O
rest	pointer
=	O
NULL	O
;	O
if	O
(	O
!	O
strchr	function
(	O
pfx	pointer
,	O
file	pointer
[	O
0	int
]	O
)	O
)	O
return	O
0	int
;	O
if	O
(	O
*	O
++	O
file	pointer
==	O
0	int
)	O
return	O
0	int
;	O
else	O
{	O
char	O
*	O
p	pointer
=	O
strchr	function
(	O
file	pointer
,	O
'/'	O
)	O
;	O
int	O
len	int
;	O
if	O
(	O
p	pointer
)	O
len	int
=	O
p	pointer
-	O
file	pointer
+	O
1	int
;	O
else	O
len	int
=	O
strlen	function
(	O
file	pointer
)	O
+	O
1	int
;	O
if	O
(	O
len	int
==	O
1	int
)	O
*	O
user	pointer
=	O
NULL	O
;	O
else	O
{	O
*	O
user	pointer
=	O
calloc	function
(	O
1	int
,	O
len	int
)	O
;	O
if	O
(	O
!	O
*	O
user	pointer
)	O
return	O
ENOMEM	int
;	O
memcpy	function
(	O
*	O
user	pointer
,	O
file	pointer
,	O
len	int
)	O
;	O
(	O
*	O
user	pointer
)	O
[	O
len	int
-	O
1	int
]	O
=	O
0	int
;	O
}	O
file	pointer
+=	O
len	int
-	O
1	int
;	O
if	O
(	O
file	pointer
[	O
0	int
]	O
==	O
'/'	O
)	O
file	pointer
++	O
;	O
}	O
if	O
(	O
file	pointer
[	O
0	int
]	O
)	O
{	O
*	O
rest	pointer
=	O
strdup	function
(	O
file	pointer
)	O
;	O
if	O
(	O
!	O
*	O
rest	pointer
)	O
{	O
free	function
(	O
*	O
user	pointer
)	O
;	O
return	O
ENOMEM	int
;	O
}	O
}	O
return	O
0	int
;	O
}	O
static	O
char	O
*	O
get_homedir	function
(	O
const	O
char	O
*	O
user	pointer
)	O
{	O
char	O
*	O
homedir	pointer
=	O
NULL	O
;	O
struct	O
mu_auth_data	struct
*	O
auth	pointer
=	O
NULL	O
;	O
if	O
(	O
user	pointer
)	O
{	O
auth	pointer
=	O
mu_get_auth_by_name	function
(	O
user	pointer
)	O
;	O
if	O
(	O
auth	pointer
)	O
homedir	pointer
=	O
auth	pointer
->	O
dir	pointer
;	O
}	O
else	O
{	O
homedir	pointer
=	O
getenv	function
(	O
"HOME"	pointer
)	O
;	O
if	O
(	O
homedir	pointer
==	O
NULL	O
)	O
{	O
auth	pointer
=	O
mu_get_auth_by_name	function
(	O
user	pointer
)	O
;	O
if	O
(	O
auth	pointer
)	O
homedir	pointer
=	O
auth	pointer
->	O
dir	pointer
;	O
}	O
}	O
if	O
(	O
homedir	pointer
)	O
homedir	pointer
=	O
strdup	function
(	O
homedir	pointer
)	O
;	O
mu_auth_data_free	function
(	O
auth	pointer
)	O
;	O
return	O
homedir	pointer
;	O
}	O
static	O
int	O
user_mailbox_name	function
(	O
const	O
char	O
*	O
user	pointer
,	O
char	O
*	O
*	O
mailbox_name	pointer
)	O
{	O
if	O
(	O
!	O
user	pointer
)	O
user	pointer
=	O
(	O
getenv	function
(	O
"LOGNAME"	pointer
)	O
)	O
?	O
getenv	function
(	O
"LOGNAME"	pointer
)	O
:	O
getenv	function
(	O
"USER"	pointer
)	O
;	O
if	O
(	O
user	pointer
)	O
{	O
int	O
rc	int
=	O
mu_construct_user_mailbox_url	function
(	O
mailbox_name	pointer
,	O
user	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
}	O
else	O
{	O
struct	O
mu_auth_data	struct
*	O
auth	pointer
=	O
mu_get_auth_by_uid	function
(	O
getuid	function
(	O
)	O
)	O
;	O
if	O
(	O
!	O
auth	pointer
)	O
{	O
mu_error	function
(	O
"Who am I?"	pointer
)	O
;	O
return	O
EINVAL	int
;	O
}	O
*	O
mailbox_name	pointer
=	O
strdup	function
(	O
auth	pointer
->	O
mailbox	pointer
)	O
;	O
mu_auth_data_free	function
(	O
auth	pointer
)	O
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
plus_expand	function
(	O
const	O
char	O
*	O
file	pointer
,	O
char	O
*	O
*	O
buf	pointer
)	O
{	O
int	O
rc	int
=	O
0	int
;	O
const	O
char	O
*	O
folder_dir	pointer
=	O
mu_folder_directory	function
(	O
)	O
;	O
if	O
(	O
!	O
folder_dir	pointer
)	O
{	O
char	O
*	O
p	pointer
=	O
strdup	function
(	O
file	pointer
)	O
;	O
if	O
(	O
!	O
p	pointer
)	O
return	O
ENOMEM	int
;	O
*	O
buf	pointer
=	O
p	pointer
;	O
}	O
else	O
{	O
file	pointer
++	O
;	O
if	O
(	O
folder_dir	pointer
[	O
0	int
]	O
==	O
'/'	O
||	O
mu_is_proto	function
(	O
folder_dir	pointer
)	O
)	O
{	O
char	O
*	O
p	pointer
=	O
mu_make_file_name	O
(	O
folder_dir	pointer
,	O
file	pointer
)	O
;	O
if	O
(	O
!	O
p	pointer
)	O
return	O
errno	O
;	O
*	O
buf	pointer
=	O
p	pointer
;	O
}	O
else	O
{	O
char	O
*	O
home	pointer
=	O
get_homedir	function
(	O
NULL	O
)	O
;	O
if	O
(	O
!	O
home	pointer
)	O
return	O
ENOENT	int
;	O
rc	int
=	O
mu_asprintf	function
(	O
buf	pointer
,	O
"%s/%s/%s"	pointer
,	O
home	pointer
,	O
folder_dir	pointer
,	O
file	pointer
)	O
;	O
free	function
(	O
home	pointer
)	O
;	O
}	O
}	O
return	O
rc	int
;	O
}	O
static	O
int	O
percent_expand	function
(	O
const	O
char	O
*	O
file	pointer
,	O
char	O
*	O
*	O
mbox	pointer
)	O
{	O
char	O
*	O
user	pointer
=	O
NULL	O
;	O
char	O
*	O
path	pointer
=	O
NULL	O
;	O
int	O
status	int
;	O
if	O
(	O
(	O
status	int
=	O
split_shortcut	function
(	O
file	pointer
,	O
"%"	pointer
,	O
&	O
user	pointer
,	O
&	O
path	pointer
)	O
)	O
)	O
return	O
status	int
;	O
if	O
(	O
path	pointer
)	O
{	O
free	function
(	O
user	pointer
)	O
;	O
free	function
(	O
path	pointer
)	O
;	O
return	O
ENOENT	int
;	O
}	O
status	int
=	O
user_mailbox_name	function
(	O
user	pointer
,	O
mbox	pointer
)	O
;	O
free	function
(	O
user	pointer
)	O
;	O
return	O
status	int
;	O
}	O
int	O
mu_mailbox_attach_ticket	function
(	O
mu_mailbox_t	pointer
mbox	pointer
)	O
{	O
int	O
rc	int
;	O
mu_folder_t	pointer
folder	pointer
=	O
NULL	O
;	O
if	O
(	O
(	O
rc	int
=	O
mu_mailbox_get_folder	function
(	O
mbox	pointer
,	O
&	O
folder	pointer
)	O
)	O
==	O
0	int
)	O
rc	int
=	O
mu_folder_attach_ticket	function
(	O
folder	pointer
)	O
;	O
return	O
rc	int
;	O
}	O
int	O
mu_mailbox_expand_name	function
(	O
const	O
char	O
*	O
name	pointer
,	O
char	O
*	O
*	O
expansion	pointer
)	O
{	O
int	O
status	int
=	O
0	int
;	O
char	O
*	O
p	pointer
;	O
char	O
*	O
mbox	pointer
=	O
NULL	O
;	O
if	O
(	O
!	O
name	pointer
)	O
return	O
EINVAL	int
;	O
if	O
(	O
!	O
expansion	pointer
)	O
return	O
MU_ERR_OUT_PTR_NULL	O
;	O
p	pointer
=	O
mu_tilde_expansion	function
(	O
name	pointer
,	O
MU_HIERARCHY_DELIMITER	char
,	O
NULL	O
)	O
;	O
if	O
(	O
!	O
p	pointer
)	O
return	O
errno	O
;	O
switch	O
(	O
p	pointer
[	O
0	int
]	O
)	O
{	O
case	O
'%'	O
:	O
status	int
=	O
percent_expand	function
(	O
p	pointer
,	O
&	O
mbox	pointer
)	O
;	O
break	O
;	O
case	O
'+'	O
:	O
case	O
'='	O
:	O
status	int
=	O
plus_expand	function
(	O
p	pointer
,	O
&	O
mbox	pointer
)	O
;	O
break	O
;	O
case	O
'/'	O
:	O
mbox	pointer
=	O
p	pointer
;	O
p	pointer
=	O
NULL	O
;	O
break	O
;	O
default	O
:	O
if	O
(	O
!	O
mu_is_proto	function
(	O
p	pointer
)	O
)	O
{	O
char	O
*	O
dir	pointer
=	O
mu_getcwd	function
(	O
)	O
;	O
mbox	pointer
=	O
mu_make_file_name	O
(	O
dir	pointer
,	O
p	pointer
)	O
;	O
if	O
(	O
!	O
mbox	pointer
)	O
status	int
=	O
errno	O
;	O
free	function
(	O
dir	pointer
)	O
;	O
}	O
else	O
{	O
mbox	pointer
=	O
p	pointer
;	O
p	pointer
=	O
NULL	O
;	O
}	O
}	O
free	function
(	O
p	pointer
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
*	O
expansion	pointer
=	O
mbox	pointer
;	O
return	O
status	int
;	O
}	O
int	O
mu_mailbox_create_default	function
(	O
mu_mailbox_t	pointer
*	O
pmbox	pointer
,	O
const	O
char	O
*	O
mail	pointer
)	O
{	O
char	O
*	O
mboxname	pointer
=	O
NULL	O
;	O
char	O
*	O
name_ptr	pointer
=	O
NULL	O
;	O
int	O
status	int
=	O
0	int
;	O
if	O
(	O
pmbox	pointer
==	O
NULL	O
)	O
return	O
MU_ERR_OUT_PTR_NULL	O
;	O
if	O
(	O
mail	pointer
&&	O
*	O
mail	pointer
==	O
0	int
)	O
mail	pointer
=	O
NULL	O
;	O
if	O
(	O
mail	pointer
==	O
NULL	O
)	O
{	O
if	O
(	O
!	O
_mu_mailbox_pattern	pointer
)	O
{	O
mail	pointer
=	O
getenv	function
(	O
"FOLDER"	pointer
)	O
;	O
if	O
(	O
!	O
mail	pointer
)	O
mail	pointer
=	O
getenv	function
(	O
"MAIL"	pointer
)	O
;	O
}	O
if	O
(	O
!	O
mail	pointer
)	O
{	O
if	O
(	O
(	O
status	int
=	O
user_mailbox_name	function
(	O
NULL	O
,	O
&	O
name_ptr	pointer
)	O
)	O
)	O
return	O
status	int
;	O
mail	pointer
=	O
name_ptr	pointer
;	O
}	O
}	O
status	int
=	O
mu_mailbox_expand_name	function
(	O
mail	pointer
,	O
&	O
mboxname	pointer
)	O
;	O
free	function
(	O
name_ptr	pointer
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
status	int
=	O
mu_mailbox_create	function
(	O
pmbox	pointer
,	O
mboxname	pointer
)	O
;	O
free	function
(	O
mboxname	pointer
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
mu_mailbox_attach_ticket	function
(	O
*	O
pmbox	pointer
)	O
;	O
return	O
status	int
;	O
}	O
