static	O
void	O
readconfig	function
(	O
adns_state	pointer
ads	pointer
,	O
const	O
char	O
*	O
filename	pointer
,	O
int	O
warnmissing	int
)	O
;	O
static	O
void	O
addserver	function
(	O
adns_state	pointer
ads	pointer
,	O
struct	O
in_addr	struct
addr	union
)	O
{	O
int	O
i	int
;	O
struct	O
server	struct
*	O
ss	pointer
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
ads	pointer
->	O
nservers	int
;	O
i	int
++	O
)	O
{	O
if	O
(	O
ads	pointer
->	O
servers	array
[	O
i	int
]	O
.	O
addr	union
.	O
s_addr	int
==	O
addr	union
.	O
s_addr	int
)	O
{	O
adns__debug	function
(	O
ads	pointer
,	O
-	O
1	int
,	O
0	int
,	O
"duplicate nameserver %s ignored"	pointer
,	O
inet_ntoa	function
(	O
addr	union
)	O
)	O
;	O
return	O
;	O
}	O
}	O
if	O
(	O
ads	pointer
->	O
nservers	int
>=	O
MAXSERVERS	int
)	O
{	O
adns__diag	function
(	O
ads	pointer
,	O
-	O
1	int
,	O
0	int
,	O
"too many nameservers, ignoring %s"	pointer
,	O
inet_ntoa	function
(	O
addr	union
)	O
)	O
;	O
return	O
;	O
}	O
ss	pointer
=	O
ads	pointer
->	O
servers	array
+	O
ads	pointer
->	O
nservers	int
;	O
ss	pointer
->	O
addr	union
=	O
addr	union
;	O
ads	pointer
->	O
nservers	int
++	O
;	O
}	O
static	O
void	O
freesearchlist	function
(	O
adns_state	pointer
ads	pointer
)	O
{	O
if	O
(	O
ads	pointer
->	O
nsearchlist	int
)	O
free	function
(	O
*	O
ads	pointer
->	O
searchlist	pointer
)	O
;	O
free	function
(	O
ads	pointer
->	O
searchlist	pointer
)	O
;	O
}	O
static	O
void	O
saveerr	function
(	O
adns_state	pointer
ads	pointer
,	O
int	O
en	int
)	O
{	O
if	O
(	O
!	O
ads	pointer
->	O
configerrno	int
)	O
ads	pointer
->	O
configerrno	int
=	O
en	int
;	O
}	O
static	O
void	O
configparseerr	function
(	O
adns_state	pointer
ads	pointer
,	O
const	O
char	O
*	O
fn	pointer
,	O
int	O
lno	int
,	O
const	O
char	O
*	O
fmt	pointer
,	O
...	O
)	O
{	O
va_list	array
al	array
;	O
saveerr	function
(	O
ads	pointer
,	O
EINVAL	int
)	O
;	O
if	O
(	O
!	O
ads	pointer
->	O
logfn	pointer
||	O
(	O
ads	pointer
->	O
iflags	enum
&	O
adns_if_noerrprint	int
)	O
)	O
return	O
;	O
if	O
(	O
lno	int
==	O
-	O
1	int
)	O
adns__lprintf	function
(	O
ads	pointer
,	O
"adns: %s: "	pointer
,	O
fn	pointer
)	O
;	O
else	O
adns__lprintf	function
(	O
ads	pointer
,	O
"adns: %s:%d: "	pointer
,	O
fn	pointer
,	O
lno	int
)	O
;	O
va_start	O
(	O
al	array
,	O
fmt	pointer
)	O
;	O
adns__vlprintf	function
(	O
ads	pointer
,	O
fmt	pointer
,	O
al	array
)	O
;	O
va_end	O
(	O
al	array
)	O
;	O
adns__lprintf	function
(	O
ads	pointer
,	O
"\n"	pointer
)	O
;	O
}	O
static	O
int	O
nextword	function
(	O
const	O
char	O
*	O
*	O
bufp_io	pointer
,	O
const	O
char	O
*	O
*	O
word_r	pointer
,	O
int	O
*	O
l_r	pointer
)	O
{	O
const	O
char	O
*	O
p	pointer
,	O
*	O
q	pointer
;	O
p	pointer
=	O
*	O
bufp_io	pointer
;	O
while	O
(	O
ctype_whitespace	function
(	O
*	O
p	pointer
)	O
)	O
p	pointer
++	O
;	O
if	O
(	O
!	O
*	O
p	pointer
)	O
return	O
0	int
;	O
q	pointer
=	O
p	pointer
;	O
while	O
(	O
*	O
q	pointer
&&	O
!	O
ctype_whitespace	function
(	O
*	O
q	pointer
)	O
)	O
q	pointer
++	O
;	O
*	O
l_r	pointer
=	O
q	pointer
-	O
p	pointer
;	O
*	O
word_r	pointer
=	O
p	pointer
;	O
*	O
bufp_io	pointer
=	O
q	pointer
;	O
return	O
1	int
;	O
}	O
static	O
void	O
ccf_nameserver	function
(	O
adns_state	pointer
ads	pointer
,	O
const	O
char	O
*	O
fn	pointer
,	O
int	O
lno	int
,	O
const	O
char	O
*	O
buf	pointer
)	O
{	O
struct	O
in_addr	struct
ia	struct
;	O
if	O
(	O
!	O
inet_aton	function
(	O
buf	pointer
,	O
&	O
ia	struct
)	O
)	O
{	O
configparseerr	function
(	O
ads	pointer
,	O
fn	pointer
,	O
lno	int
,	O
"invalid nameserver address `%s'"	pointer
,	O
buf	pointer
)	O
;	O
return	O
;	O
}	O
adns__debug	function
(	O
ads	pointer
,	O
-	O
1	int
,	O
0	int
,	O
"using nameserver %s"	pointer
,	O
inet_ntoa	function
(	O
ia	struct
)	O
)	O
;	O
addserver	function
(	O
ads	pointer
,	O
ia	struct
)	O
;	O
}	O
static	O
void	O
ccf_search	function
(	O
adns_state	pointer
ads	pointer
,	O
const	O
char	O
*	O
fn	pointer
,	O
int	O
lno	int
,	O
const	O
char	O
*	O
buf	pointer
)	O
{	O
const	O
char	O
*	O
bufp	pointer
,	O
*	O
word	pointer
;	O
char	O
*	O
newchars	pointer
,	O
*	O
*	O
newptrs	pointer
,	O
*	O
*	O
pp	pointer
;	O
int	O
count	int
,	O
tl	int
,	O
l	long
;	O
if	O
(	O
!	O
buf	pointer
)	O
return	O
;	O
bufp	pointer
=	O
buf	pointer
;	O
count	int
=	O
0	int
;	O
tl	int
=	O
0	int
;	O
while	O
(	O
nextword	function
(	O
&	O
bufp	pointer
,	O
&	O
word	pointer
,	O
&	O
l	long
)	O
)	O
{	O
count	int
++	O
;	O
tl	int
+=	O
l	long
+	O
1	int
;	O
}	O
newptrs	pointer
=	O
malloc	function
(	O
sizeof	O
(	O
char	O
*	O
)	O
*	O
count	int
)	O
;	O
if	O
(	O
!	O
newptrs	pointer
)	O
{	O
saveerr	function
(	O
ads	pointer
,	O
errno	O
)	O
;	O
return	O
;	O
}	O
newchars	pointer
=	O
malloc	function
(	O
tl	int
)	O
;	O
if	O
(	O
!	O
newchars	pointer
)	O
{	O
saveerr	function
(	O
ads	pointer
,	O
errno	O
)	O
;	O
free	function
(	O
newptrs	pointer
)	O
;	O
return	O
;	O
}	O
bufp	pointer
=	O
buf	pointer
;	O
pp	pointer
=	O
newptrs	pointer
;	O
while	O
(	O
nextword	function
(	O
&	O
bufp	pointer
,	O
&	O
word	pointer
,	O
&	O
l	long
)	O
)	O
{	O
*	O
pp	pointer
++	O
=	O
newchars	pointer
;	O
memcpy	function
(	O
newchars	pointer
,	O
word	pointer
,	O
l	long
)	O
;	O
newchars	pointer
+=	O
l	long
;	O
*	O
newchars	pointer
++	O
=	O
0	int
;	O
}	O
freesearchlist	function
(	O
ads	pointer
)	O
;	O
ads	pointer
->	O
nsearchlist	int
=	O
count	int
;	O
ads	pointer
->	O
searchlist	pointer
=	O
newptrs	pointer
;	O
}	O
static	O
void	O
ccf_sortlist	function
(	O
adns_state	pointer
ads	pointer
,	O
const	O
char	O
*	O
fn	pointer
,	O
int	O
lno	int
,	O
const	O
char	O
*	O
buf	pointer
)	O
{	O
const	O
char	O
*	O
word	pointer
;	O
char	O
tbuf	array
[	O
200	int
]	O
,	O
*	O
slash	pointer
,	O
*	O
ep	pointer
;	O
struct	O
in_addr	struct
base	struct
,	O
mask	struct
;	O
int	O
l	long
;	O
unsigned	O
long	O
initial	long
,	O
baselocal	long
;	O
if	O
(	O
!	O
buf	pointer
)	O
return	O
;	O
ads	pointer
->	O
nsortlist	int
=	O
0	int
;	O
while	O
(	O
nextword	function
(	O
&	O
buf	pointer
,	O
&	O
word	pointer
,	O
&	O
l	long
)	O
)	O
{	O
if	O
(	O
ads	pointer
->	O
nsortlist	int
>=	O
MAXSORTLIST	int
)	O
{	O
adns__diag	function
(	O
ads	pointer
,	O
-	O
1	int
,	O
0	int
,	O
"too many sortlist entries,"	pointer
" ignoring %.*s onwards"	pointer
,	O
l	long
,	O
word	pointer
)	O
;	O
return	O
;	O
}	O
if	O
(	O
l	long
>=	O
sizeof	O
(	O
tbuf	array
)	O
)	O
{	O
configparseerr	function
(	O
ads	pointer
,	O
fn	pointer
,	O
lno	int
,	O
"sortlist entry `%.*s' too long"	pointer
,	O
l	long
,	O
word	pointer
)	O
;	O
continue	O
;	O
}	O
memcpy	function
(	O
tbuf	array
,	O
word	pointer
,	O
l	long
)	O
;	O
tbuf	array
[	O
l	long
]	O
=	O
0	int
;	O
slash	pointer
=	O
strchr	function
(	O
tbuf	array
,	O
'/'	O
)	O
;	O
if	O
(	O
slash	pointer
)	O
*	O
slash	pointer
++	O
=	O
0	int
;	O
if	O
(	O
!	O
inet_aton	function
(	O
tbuf	array
,	O
&	O
base	struct
)	O
)	O
{	O
configparseerr	function
(	O
ads	pointer
,	O
fn	pointer
,	O
lno	int
,	O
"invalid address `%s' in sortlist"	pointer
,	O
tbuf	array
)	O
;	O
continue	O
;	O
}	O
if	O
(	O
slash	pointer
)	O
{	O
if	O
(	O
strchr	function
(	O
slash	pointer
,	O
'.'	O
)	O
)	O
{	O
if	O
(	O
!	O
inet_aton	function
(	O
slash	pointer
,	O
&	O
mask	struct
)	O
)	O
{	O
configparseerr	function
(	O
ads	pointer
,	O
fn	pointer
,	O
lno	int
,	O
"invalid mask `%s' in sortlist"	pointer
,	O
slash	pointer
)	O
;	O
continue	O
;	O
}	O
if	O
(	O
base	struct
.	O
s_addr	int
&	O
~	O
mask	struct
.	O
s_addr	int
)	O
{	O
configparseerr	function
(	O
ads	pointer
,	O
fn	pointer
,	O
lno	int
,	O
"mask `%s' in sortlist"	pointer
" overlaps address `%s'"	pointer
,	O
slash	pointer
,	O
tbuf	array
)	O
;	O
continue	O
;	O
}	O
}	O
else	O
{	O
initial	long
=	O
strtoul	function
(	O
slash	pointer
,	O
&	O
ep	pointer
,	O
10	int
)	O
;	O
if	O
(	O
*	O
ep	pointer
||	O
initial	long
>	O
32	int
)	O
{	O
configparseerr	function
(	O
ads	pointer
,	O
fn	pointer
,	O
lno	int
,	O
"mask length `%s' invalid"	pointer
,	O
slash	pointer
)	O
;	O
continue	O
;	O
}	O
mask	struct
.	O
s_addr	int
=	O
htonl	function
(	O
(	O
0x0ffffffffUL	int
)	O
<<	O
(	O
32	int
-	O
initial	long
)	O
)	O
;	O
}	O
}	O
else	O
{	O
baselocal	long
=	O
ntohl	function
(	O
base	struct
.	O
s_addr	int
)	O
;	O
if	O
(	O
!	O
baselocal	long
&	O
0x080000000UL	int
)	O
mask	struct
.	O
s_addr	int
=	O
htonl	function
(	O
0x0ff000000UL	int
)	O
;	O
else	O
if	O
(	O
(	O
baselocal	long
&	O
0x0c0000000UL	int
)	O
==	O
0x080000000UL	int
)	O
mask	struct
.	O
s_addr	int
=	O
htonl	function
(	O
0x0ffff0000UL	int
)	O
;	O
else	O
if	O
(	O
(	O
baselocal	long
&	O
0x0f0000000UL	int
)	O
==	O
0x0e0000000UL	int
)	O
mask	struct
.	O
s_addr	int
=	O
htonl	function
(	O
0x0ff000000UL	int
)	O
;	O
else	O
{	O
configparseerr	function
(	O
ads	pointer
,	O
fn	pointer
,	O
lno	int
,	O
"network address `%s'"	pointer
" in sortlist is not in classed ranges,"	pointer
" must specify mask explicitly"	pointer
,	O
tbuf	array
)	O
;	O
continue	O
;	O
}	O
}	O
ads	pointer
->	O
sortlist	struct
[	O
ads	pointer
->	O
nsortlist	int
]	O
.	O
base	struct
=	O
base	struct
;	O
ads	pointer
->	O
sortlist	struct
[	O
ads	pointer
->	O
nsortlist	int
]	O
.	O
mask	struct
=	O
mask	struct
;	O
ads	pointer
->	O
nsortlist	int
++	O
;	O
}	O
}	O
static	O
void	O
ccf_options	function
(	O
adns_state	pointer
ads	pointer
,	O
const	O
char	O
*	O
fn	pointer
,	O
int	O
lno	int
,	O
const	O
char	O
*	O
buf	pointer
)	O
{	O
const	O
char	O
*	O
word	pointer
;	O
char	O
*	O
ep	pointer
;	O
unsigned	O
long	O
v	long
;	O
int	O
l	long
;	O
if	O
(	O
!	O
buf	pointer
)	O
return	O
;	O
while	O
(	O
nextword	function
(	O
&	O
buf	pointer
,	O
&	O
word	pointer
,	O
&	O
l	long
)	O
)	O
{	O
if	O
(	O
l	long
==	O
5	int
&&	O
!	O
memcmp	function
(	O
word	pointer
,	O
"debug"	pointer
,	O
5	int
)	O
)	O
{	O
ads	pointer
->	O
iflags	enum
|=	O
adns_if_debug	int
;	O
continue	O
;	O
}	O
if	O
(	O
l	long
>=	O
6	int
&&	O
!	O
memcmp	function
(	O
word	pointer
,	O
"ndots:"	pointer
,	O
6	int
)	O
)	O
{	O
v	long
=	O
strtoul	function
(	O
word	pointer
+	O
6	int
,	O
&	O
ep	pointer
,	O
10	int
)	O
;	O
if	O
(	O
l	long
==	O
6	int
||	O
ep	pointer
!=	O
word	pointer
+	O
l	long
||	O
v	long
>	O
INT_MAX	O
)	O
{	O
configparseerr	function
(	O
ads	pointer
,	O
fn	pointer
,	O
lno	int
,	O
"option `%.*s' malformed"	pointer
" or has bad value"	pointer
,	O
l	long
,	O
word	pointer
)	O
;	O
continue	O
;	O
}	O
ads	pointer
->	O
searchndots	int
=	O
v	long
;	O
continue	O
;	O
}	O
if	O
(	O
l	long
>=	O
12	int
&&	O
!	O
memcmp	function
(	O
word	pointer
,	O
"adns_checkc:"	pointer
,	O
12	int
)	O
)	O
{	O
if	O
(	O
!	O
strcmp	function
(	O
word	pointer
+	O
12	int
,	O
"none"	pointer
)	O
)	O
{	O
ads	pointer
->	O
iflags	enum
&=	O
~	O
adns_if_checkc_freq	int
;	O
ads	pointer
->	O
iflags	enum
|=	O
adns_if_checkc_entex	int
;	O
}	O
else	O
if	O
(	O
!	O
strcmp	function
(	O
word	pointer
+	O
12	int
,	O
"entex"	pointer
)	O
)	O
{	O
ads	pointer
->	O
iflags	enum
&=	O
~	O
adns_if_checkc_freq	int
;	O
ads	pointer
->	O
iflags	enum
|=	O
adns_if_checkc_entex	int
;	O
}	O
else	O
if	O
(	O
!	O
strcmp	function
(	O
word	pointer
+	O
12	int
,	O
"freq"	pointer
)	O
)	O
{	O
ads	pointer
->	O
iflags	enum
|=	O
adns_if_checkc_freq	int
;	O
}	O
else	O
{	O
configparseerr	function
(	O
ads	pointer
,	O
fn	pointer
,	O
lno	int
,	O
"option adns_checkc has bad value `%s' "	pointer
"(must be none, entex or freq"	pointer
,	O
word	pointer
+	O
12	int
)	O
;	O
}	O
continue	O
;	O
}	O
adns__diag	function
(	O
ads	pointer
,	O
-	O
1	int
,	O
0	int
,	O
"%s:%d: unknown option `%.*s'"	pointer
,	O
fn	pointer
,	O
lno	int
,	O
l	long
,	O
word	pointer
)	O
;	O
}	O
}	O
static	O
void	O
ccf_clearnss	function
(	O
adns_state	pointer
ads	pointer
,	O
const	O
char	O
*	O
fn	pointer
,	O
int	O
lno	int
,	O
const	O
char	O
*	O
buf	pointer
)	O
{	O
ads	pointer
->	O
nservers	int
=	O
0	int
;	O
}	O
static	O
void	O
ccf_include	function
(	O
adns_state	pointer
ads	pointer
,	O
const	O
char	O
*	O
fn	pointer
,	O
int	O
lno	int
,	O
const	O
char	O
*	O
buf	pointer
)	O
{	O
if	O
(	O
!	O
*	O
buf	pointer
)	O
{	O
configparseerr	function
(	O
ads	pointer
,	O
fn	pointer
,	O
lno	int
,	O
"`include' directive with no filename"	pointer
)	O
;	O
return	O
;	O
}	O
readconfig	function
(	O
ads	pointer
,	O
buf	pointer
,	O
1	int
)	O
;	O
}	O
static	O
void	O
ccf_lookup	function
(	O
adns_state	pointer
ads	pointer
,	O
const	O
char	O
*	O
fn	pointer
,	O
int	O
lno	int
,	O
const	O
char	O
*	O
buf	pointer
)	O
{	O
int	O
found_bind	int
=	O
0	int
;	O
const	O
char	O
*	O
word	pointer
;	O
int	O
l	long
;	O
if	O
(	O
!	O
*	O
buf	pointer
)	O
{	O
configparseerr	function
(	O
ads	pointer
,	O
fn	pointer
,	O
lno	int
,	O
"`lookup' directive with no databases"	pointer
)	O
;	O
return	O
;	O
}	O
while	O
(	O
nextword	function
(	O
&	O
buf	pointer
,	O
&	O
word	pointer
,	O
&	O
l	long
)	O
)	O
{	O
if	O
(	O
l	long
==	O
4	int
&&	O
!	O
memcmp	function
(	O
word	pointer
,	O
"bind"	pointer
,	O
4	int
)	O
)	O
{	O
found_bind	int
=	O
1	int
;	O
}	O
else	O
if	O
(	O
l	long
==	O
4	int
&&	O
!	O
memcmp	function
(	O
word	pointer
,	O
"file"	pointer
,	O
4	int
)	O
)	O
{	O
}	O
else	O
if	O
(	O
l	long
==	O
2	int
&&	O
!	O
memcmp	function
(	O
word	pointer
,	O
"yp"	pointer
,	O
2	int
)	O
)	O
{	O
adns__diag	function
(	O
ads	pointer
,	O
-	O
1	int
,	O
0	int
,	O
"%s:%d: yp lookups not supported by adns"	pointer
,	O
fn	pointer
,	O
lno	int
)	O
;	O
found_bind	int
=	O
-	O
1	int
;	O
}	O
else	O
{	O
adns__diag	function
(	O
ads	pointer
,	O
-	O
1	int
,	O
0	int
,	O
"%s:%d: unknown `lookup' database `%.*s'"	pointer
,	O
fn	pointer
,	O
lno	int
,	O
l	long
,	O
word	pointer
)	O
;	O
found_bind	int
=	O
-	O
1	int
;	O
}	O
}	O
if	O
(	O
!	O
found_bind	int
)	O
adns__diag	function
(	O
ads	pointer
,	O
-	O
1	int
,	O
0	int
,	O
"%s:%d: `lookup' specified, but not `bind'"	pointer
,	O
fn	pointer
,	O
lno	int
)	O
;	O
}	O
static	O
const	O
struct	O
configcommandinfo	struct
{	O
const	O
char	O
*	O
name	pointer
;	O
void	O
(	O
*	O
fn	pointer
)	O
(	O
adns_state	pointer
ads	pointer
,	O
const	O
char	O
*	O
fn	pointer
,	O
int	O
lno	int
,	O
const	O
char	O
*	O
buf	pointer
)	O
;	O
}	O
configcommandinfos	array
[	O
]	O
=	O
{	O
{	O
"nameserver"	pointer
,	O
ccf_nameserver	function
}	O
,	O
{	O
"domain"	pointer
,	O
ccf_search	function
}	O
,	O
{	O
"search"	pointer
,	O
ccf_search	function
}	O
,	O
{	O
"sortlist"	pointer
,	O
ccf_sortlist	function
}	O
,	O
{	O
"options"	pointer
,	O
ccf_options	function
}	O
,	O
{	O
"clearnameservers"	pointer
,	O
ccf_clearnss	function
}	O
,	O
{	O
"include"	pointer
,	O
ccf_include	function
}	O
,	O
{	O
"lookup"	pointer
,	O
ccf_lookup	function
}	O
,	O
{	O
0	int
}	O
}	O
;	O
typedef	O
union	O
{	O
FILE	struct
*	O
file	pointer
;	O
const	O
char	O
*	O
text	pointer
;	O
}	O
getline_ctx	union
;	O
static	O
int	O
gl_file	function
(	O
adns_state	pointer
ads	pointer
,	O
getline_ctx	union
*	O
src_io	pointer
,	O
const	O
char	O
*	O
filename	pointer
,	O
int	O
lno	int
,	O
char	O
*	O
buf	pointer
,	O
int	O
buflen	int
)	O
{	O
FILE	struct
*	O
file	pointer
=	O
src_io	pointer
->	O
file	pointer
;	O
int	O
c	int
,	O
i	int
;	O
char	O
*	O
p	pointer
;	O
p	pointer
=	O
buf	pointer
;	O
buflen	int
--	O
;	O
i	int
=	O
0	int
;	O
for	O
(	O
;	O
;	O
)	O
{	O
if	O
(	O
i	int
==	O
buflen	int
)	O
{	O
adns__diag	function
(	O
ads	pointer
,	O
-	O
1	int
,	O
0	int
,	O
"%s:%d: line too long, ignored"	pointer
,	O
filename	pointer
,	O
lno	int
)	O
;	O
goto	O
x_badline	O
;	O
}	O
c	int
=	O
getc	function
(	O
file	pointer
)	O
;	O
if	O
(	O
!	O
c	int
)	O
{	O
adns__diag	function
(	O
ads	pointer
,	O
-	O
1	int
,	O
0	int
,	O
"%s:%d: line contains nul, ignored"	pointer
,	O
filename	pointer
,	O
lno	int
)	O
;	O
goto	O
x_badline	O
;	O
}	O
else	O
if	O
(	O
c	int
==	O
'\n'	O
)	O
{	O
break	O
;	O
}	O
else	O
if	O
(	O
c	int
==	O
EOF	O
)	O
{	O
if	O
(	O
ferror	function
(	O
file	pointer
)	O
)	O
{	O
saveerr	function
(	O
ads	pointer
,	O
errno	O
)	O
;	O
adns__diag	function
(	O
ads	pointer
,	O
-	O
1	int
,	O
0	int
,	O
"%s:%d: read error: %s"	pointer
,	O
filename	pointer
,	O
lno	int
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
!	O
i	int
)	O
return	O
-	O
1	int
;	O
break	O
;	O
}	O
else	O
{	O
*	O
p	pointer
++	O
=	O
c	int
;	O
i	int
++	O
;	O
}	O
}	O
*	O
p	pointer
++	O
=	O
0	int
;	O
return	O
i	int
;	O
x_badline	O
:	O
saveerr	function
(	O
ads	pointer
,	O
EINVAL	int
)	O
;	O
while	O
(	O
(	O
c	int
=	O
getc	function
(	O
file	pointer
)	O
)	O
!=	O
EOF	O
&&	O
c	int
!=	O
'\n'	O
)	O
;	O
return	O
-	O
2	int
;	O
}	O
static	O
int	O
gl_text	function
(	O
adns_state	pointer
ads	pointer
,	O
getline_ctx	union
*	O
src_io	pointer
,	O
const	O
char	O
*	O
filename	pointer
,	O
int	O
lno	int
,	O
char	O
*	O
buf	pointer
,	O
int	O
buflen	int
)	O
{	O
const	O
char	O
*	O
cp	pointer
=	O
src_io	pointer
->	O
text	pointer
;	O
int	O
l	long
;	O
if	O
(	O
!	O
cp	pointer
||	O
!	O
*	O
cp	pointer
)	O
return	O
-	O
1	int
;	O
if	O
(	O
*	O
cp	pointer
==	O
';'	O
||	O
*	O
cp	pointer
==	O
'\n'	O
)	O
cp	pointer
++	O
;	O
l	long
=	O
strcspn	function
(	O
cp	pointer
,	O
";\n"	pointer
)	O
;	O
src_io	pointer
->	O
text	pointer
=	O
cp	pointer
+	O
l	long
;	O
if	O
(	O
l	long
>=	O
buflen	int
)	O
{	O
adns__diag	function
(	O
ads	pointer
,	O
-	O
1	int
,	O
0	int
,	O
"%s:%d: line too long, ignored"	pointer
,	O
filename	pointer
,	O
lno	int
)	O
;	O
saveerr	function
(	O
ads	pointer
,	O
EINVAL	int
)	O
;	O
return	O
-	O
2	int
;	O
}	O
memcpy	function
(	O
buf	pointer
,	O
cp	pointer
,	O
l	long
)	O
;	O
buf	pointer
[	O
l	long
]	O
=	O
0	int
;	O
return	O
l	long
;	O
}	O
static	O
void	O
readconfiggeneric	function
(	O
adns_state	pointer
ads	pointer
,	O
const	O
char	O
*	O
filename	pointer
,	O
int	O
(	O
*	O
getline	function
)	O
(	O
adns_state	pointer
ads	pointer
,	O
getline_ctx	union
*	O
,	O
const	O
char	O
*	O
filename	pointer
,	O
int	O
lno	int
,	O
char	O
*	O
buf	pointer
,	O
int	O
buflen	int
)	O
,	O
getline_ctx	union
gl_ctx	union
)	O
{	O
char	O
linebuf	array
[	O
2000	int
]	O
,	O
*	O
p	pointer
,	O
*	O
q	pointer
;	O
int	O
lno	int
,	O
l	long
,	O
dirl	int
;	O
const	O
struct	O
configcommandinfo	struct
*	O
ccip	pointer
;	O
for	O
(	O
lno	int
=	O
1	int
;	O
(	O
l	long
=	O
getline	function
(	O
ads	pointer
,	O
&	O
gl_ctx	union
,	O
filename	pointer
,	O
lno	int
,	O
linebuf	array
,	O
sizeof	O
(	O
linebuf	array
)	O
)	O
)	O
!=	O
-	O
1	int
;	O
lno	int
++	O
)	O
{	O
if	O
(	O
l	long
==	O
-	O
2	int
)	O
continue	O
;	O
while	O
(	O
l	long
>	O
0	int
&&	O
ctype_whitespace	function
(	O
linebuf	array
[	O
l	long
-	O
1	int
]	O
)	O
)	O
l	long
--	O
;	O
linebuf	array
[	O
l	long
]	O
=	O
0	int
;	O
p	pointer
=	O
linebuf	array
;	O
while	O
(	O
ctype_whitespace	function
(	O
*	O
p	pointer
)	O
)	O
p	pointer
++	O
;	O
if	O
(	O
*	O
p	pointer
==	O
'#'	O
||	O
*	O
p	pointer
==	O
';'	O
||	O
!	O
*	O
p	pointer
)	O
continue	O
;	O
q	pointer
=	O
p	pointer
;	O
while	O
(	O
*	O
q	pointer
&&	O
!	O
ctype_whitespace	function
(	O
*	O
q	pointer
)	O
)	O
q	pointer
++	O
;	O
dirl	int
=	O
q	pointer
-	O
p	pointer
;	O
for	O
(	O
ccip	pointer
=	O
configcommandinfos	array
;	O
ccip	pointer
->	O
name	pointer
&&	O
!	O
(	O
strlen	function
(	O
ccip	pointer
->	O
name	pointer
)	O
==	O
dirl	int
&&	O
!	O
memcmp	function
(	O
ccip	pointer
->	O
name	pointer
,	O
p	pointer
,	O
q	pointer
-	O
p	pointer
)	O
)	O
;	O
ccip	pointer
++	O
)	O
;	O
if	O
(	O
!	O
ccip	pointer
->	O
name	pointer
)	O
{	O
adns__diag	function
(	O
ads	pointer
,	O
-	O
1	int
,	O
0	int
,	O
"%s:%d: unknown configuration directive `%.*s'"	pointer
,	O
filename	pointer
,	O
lno	int
,	O
(	O
int	O
)	O
(	O
q	pointer
-	O
p	pointer
)	O
,	O
p	pointer
)	O
;	O
continue	O
;	O
}	O
while	O
(	O
ctype_whitespace	function
(	O
*	O
q	pointer
)	O
)	O
q	pointer
++	O
;	O
ccip	pointer
->	O
fn	pointer
(	O
ads	pointer
,	O
filename	pointer
,	O
lno	int
,	O
q	pointer
)	O
;	O
}	O
}	O
static	O
const	O
char	O
*	O
instrum_getenv	function
(	O
adns_state	pointer
ads	pointer
,	O
const	O
char	O
*	O
envvar	pointer
)	O
{	O
const	O
char	O
*	O
value	pointer
;	O
value	pointer
=	O
getenv	function
(	O
envvar	pointer
)	O
;	O
if	O
(	O
!	O
value	pointer
)	O
adns__debug	function
(	O
ads	pointer
,	O
-	O
1	int
,	O
0	int
,	O
"environment variable %s not set"	pointer
,	O
envvar	pointer
)	O
;	O
else	O
adns__debug	function
(	O
ads	pointer
,	O
-	O
1	int
,	O
0	int
,	O
"environment variable %s"	pointer
" set to `%s'"	pointer
,	O
envvar	pointer
,	O
value	pointer
)	O
;	O
return	O
value	pointer
;	O
}	O
static	O
void	O
readconfig	function
(	O
adns_state	pointer
ads	pointer
,	O
const	O
char	O
*	O
filename	pointer
,	O
int	O
warnmissing	int
)	O
{	O
getline_ctx	union
gl_ctx	union
;	O
gl_ctx	union
.	O
file	pointer
=	O
fopen	function
(	O
filename	pointer
,	O
"r"	pointer
)	O
;	O
if	O
(	O
!	O
gl_ctx	union
.	O
file	pointer
)	O
{	O
if	O
(	O
errno	O
==	O
ENOENT	int
)	O
{	O
if	O
(	O
warnmissing	int
)	O
adns__debug	function
(	O
ads	pointer
,	O
-	O
1	int
,	O
0	int
,	O
"configuration file"	pointer
" `%s' does not exist"	pointer
,	O
filename	pointer
)	O
;	O
return	O
;	O
}	O
saveerr	function
(	O
ads	pointer
,	O
errno	O
)	O
;	O
adns__diag	function
(	O
ads	pointer
,	O
-	O
1	int
,	O
0	int
,	O
"cannot open configuration file `%s': %s"	pointer
,	O
filename	pointer
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
return	O
;	O
}	O
readconfiggeneric	function
(	O
ads	pointer
,	O
filename	pointer
,	O
gl_file	function
,	O
gl_ctx	union
)	O
;	O
fclose	function
(	O
gl_ctx	union
.	O
file	pointer
)	O
;	O
}	O
static	O
void	O
readconfigtext	function
(	O
adns_state	pointer
ads	pointer
,	O
const	O
char	O
*	O
text	pointer
,	O
const	O
char	O
*	O
showname	pointer
)	O
{	O
getline_ctx	union
gl_ctx	union
;	O
gl_ctx	union
.	O
text	pointer
=	O
text	pointer
;	O
readconfiggeneric	function
(	O
ads	pointer
,	O
showname	pointer
,	O
gl_text	function
,	O
gl_ctx	union
)	O
;	O
}	O
static	O
void	O
readconfigenv	function
(	O
adns_state	pointer
ads	pointer
,	O
const	O
char	O
*	O
envvar	pointer
)	O
{	O
const	O
char	O
*	O
filename	pointer
;	O
if	O
(	O
ads	pointer
->	O
iflags	enum
&	O
adns_if_noenv	int
)	O
{	O
adns__debug	function
(	O
ads	pointer
,	O
-	O
1	int
,	O
0	int
,	O
"not checking environment variable `%s'"	pointer
,	O
envvar	pointer
)	O
;	O
return	O
;	O
}	O
filename	pointer
=	O
instrum_getenv	function
(	O
ads	pointer
,	O
envvar	pointer
)	O
;	O
if	O
(	O
filename	pointer
)	O
readconfig	function
(	O
ads	pointer
,	O
filename	pointer
,	O
1	int
)	O
;	O
}	O
static	O
void	O
readconfigenvtext	function
(	O
adns_state	pointer
ads	pointer
,	O
const	O
char	O
*	O
envvar	pointer
)	O
{	O
const	O
char	O
*	O
textdata	pointer
;	O
if	O
(	O
ads	pointer
->	O
iflags	enum
&	O
adns_if_noenv	int
)	O
{	O
adns__debug	function
(	O
ads	pointer
,	O
-	O
1	int
,	O
0	int
,	O
"not checking environment variable `%s'"	pointer
,	O
envvar	pointer
)	O
;	O
return	O
;	O
}	O
textdata	pointer
=	O
instrum_getenv	function
(	O
ads	pointer
,	O
envvar	pointer
)	O
;	O
if	O
(	O
textdata	pointer
)	O
readconfigtext	function
(	O
ads	pointer
,	O
textdata	pointer
,	O
envvar	pointer
)	O
;	O
}	O
int	O
adns__setnonblock	function
(	O
adns_state	pointer
ads	pointer
,	O
int	O
fd	int
)	O
{	O
int	O
r	int
;	O
r	int
=	O
fcntl	function
(	O
fd	int
,	O
F_GETFL	int
,	O
0	int
)	O
;	O
if	O
(	O
r	int
<	O
0	int
)	O
return	O
errno	O
;	O
r	int
|=	O
O_NONBLOCK	int
;	O
r	int
=	O
fcntl	function
(	O
fd	int
,	O
F_SETFL	int
,	O
r	int
)	O
;	O
if	O
(	O
r	int
<	O
0	int
)	O
return	O
errno	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
init_begin	function
(	O
adns_state	pointer
*	O
ads_r	pointer
,	O
adns_initflags	enum
flags	enum
,	O
adns_logcallbackfn	function
*	O
logfn	pointer
,	O
void	O
*	O
logfndata	pointer
)	O
{	O
adns_state	pointer
ads	pointer
;	O
pid_t	int
pid	int
;	O
ads	pointer
=	O
malloc	function
(	O
sizeof	O
(	O
*	O
ads	pointer
)	O
)	O
;	O
if	O
(	O
!	O
ads	pointer
)	O
return	O
errno	O
;	O
ads	pointer
->	O
iflags	enum
=	O
flags	enum
;	O
ads	pointer
->	O
logfn	pointer
=	O
logfn	pointer
;	O
ads	pointer
->	O
logfndata	pointer
=	O
logfndata	pointer
;	O
ads	pointer
->	O
configerrno	int
=	O
0	int
;	O
LIST_INIT	O
(	O
ads	pointer
->	O
udpw	struct
)	O
;	O
LIST_INIT	O
(	O
ads	pointer
->	O
tcpw	struct
)	O
;	O
LIST_INIT	O
(	O
ads	pointer
->	O
childw	struct
)	O
;	O
LIST_INIT	O
(	O
ads	pointer
->	O
output	struct
)	O
;	O
ads	pointer
->	O
forallnext	pointer
=	O
0	int
;	O
ads	pointer
->	O
nextid	int
=	O
0x311f	int
;	O
ads	pointer
->	O
udpsocket	int
=	O
ads	pointer
->	O
tcpsocket	int
=	O
-	O
1	int
;	O
adns__vbuf_init	function
(	O
&	O
ads	pointer
->	O
tcpsend	struct
)	O
;	O
adns__vbuf_init	function
(	O
&	O
ads	pointer
->	O
tcprecv	struct
)	O
;	O
ads	pointer
->	O
tcprecv_skip	int
=	O
0	int
;	O
ads	pointer
->	O
nservers	int
=	O
ads	pointer
->	O
nsortlist	int
=	O
ads	pointer
->	O
nsearchlist	int
=	O
ads	pointer
->	O
tcpserver	int
=	O
0	int
;	O
ads	pointer
->	O
searchndots	int
=	O
1	int
;	O
ads	pointer
->	O
tcpstate	enum
=	O
server_disconnected	int
;	O
timerclear	O
(	O
&	O
ads	pointer
->	O
tcptimeout	struct
)	O
;	O
ads	pointer
->	O
searchlist	pointer
=	O
0	int
;	O
pid	int
=	O
getpid	function
(	O
)	O
;	O
ads	pointer
->	O
rand48xsubi	array
[	O
0	int
]	O
=	O
pid	int
;	O
ads	pointer
->	O
rand48xsubi	array
[	O
1	int
]	O
=	O
(	O
unsigned	O
long	O
)	O
pid	int
>>	O
16	int
;	O
ads	pointer
->	O
rand48xsubi	array
[	O
2	int
]	O
=	O
pid	int
^	O
(	O
(	O
unsigned	O
long	O
)	O
pid	int
>>	O
16	int
)	O
;	O
*	O
ads_r	pointer
=	O
ads	pointer
;	O
return	O
0	int
;	O
}	O
static	O
int	O
init_finish	function
(	O
adns_state	pointer
ads	pointer
)	O
{	O
struct	O
in_addr	struct
ia	struct
;	O
struct	O
protoent	struct
*	O
proto	pointer
;	O
int	O
r	int
;	O
if	O
(	O
!	O
ads	pointer
->	O
nservers	int
)	O
{	O
if	O
(	O
ads	pointer
->	O
logfn	pointer
&&	O
ads	pointer
->	O
iflags	enum
&	O
adns_if_debug	int
)	O
adns__lprintf	function
(	O
ads	pointer
,	O
"adns: no nameservers, using localhost\n"	pointer
)	O
;	O
ia	struct
.	O
s_addr	int
=	O
htonl	function
(	O
INADDR_LOOPBACK	O
)	O
;	O
addserver	function
(	O
ads	pointer
,	O
ia	struct
)	O
;	O
}	O
proto	pointer
=	O
getprotobyname	function
(	O
"udp"	pointer
)	O
;	O
if	O
(	O
!	O
proto	pointer
)	O
{	O
r	int
=	O
ENOPROTOOPT	int
;	O
goto	O
x_free	O
;	O
}	O
ads	pointer
->	O
udpsocket	int
=	O
socket	function
(	O
AF_INET	O
,	O
SOCK_DGRAM	int
,	O
proto	pointer
->	O
p_proto	int
)	O
;	O
if	O
(	O
ads	pointer
->	O
udpsocket	int
<	O
0	int
)	O
{	O
r	int
=	O
errno	O
;	O
goto	O
x_free	O
;	O
}	O
r	int
=	O
adns__setnonblock	function
(	O
ads	pointer
,	O
ads	pointer
->	O
udpsocket	int
)	O
;	O
if	O
(	O
r	int
)	O
{	O
r	int
=	O
errno	O
;	O
goto	O
x_closeudp	O
;	O
}	O
return	O
0	int
;	O
x_closeudp	O
:	O
close	function
(	O
ads	pointer
->	O
udpsocket	int
)	O
;	O
x_free	O
:	O
free	function
(	O
ads	pointer
)	O
;	O
return	O
r	int
;	O
}	O
static	O
void	O
init_abort	function
(	O
adns_state	pointer
ads	pointer
)	O
{	O
if	O
(	O
ads	pointer
->	O
nsearchlist	int
)	O
{	O
free	function
(	O
ads	pointer
->	O
searchlist	pointer
[	O
0	int
]	O
)	O
;	O
free	function
(	O
ads	pointer
->	O
searchlist	pointer
)	O
;	O
}	O
free	function
(	O
ads	pointer
)	O
;	O
}	O
static	O
void	O
logfn_file	function
(	O
adns_state	pointer
ads	pointer
,	O
void	O
*	O
logfndata	pointer
,	O
const	O
char	O
*	O
fmt	pointer
,	O
va_list	array
al	array
)	O
{	O
vfprintf	function
(	O
logfndata	pointer
,	O
fmt	pointer
,	O
al	array
)	O
;	O
}	O
static	O
int	O
init_files	function
(	O
adns_state	pointer
*	O
ads_r	pointer
,	O
adns_initflags	enum
flags	enum
,	O
adns_logcallbackfn	function
*	O
logfn	pointer
,	O
void	O
*	O
logfndata	pointer
)	O
{	O
adns_state	pointer
ads	pointer
;	O
const	O
char	O
*	O
res_options	pointer
,	O
*	O
adns_res_options	pointer
;	O
int	O
r	int
;	O
r	int
=	O
init_begin	function
(	O
&	O
ads	pointer
,	O
flags	enum
,	O
logfn	pointer
,	O
logfndata	pointer
)	O
;	O
if	O
(	O
r	int
)	O
return	O
r	int
;	O
res_options	pointer
=	O
instrum_getenv	function
(	O
ads	pointer
,	O
"RES_OPTIONS"	pointer
)	O
;	O
adns_res_options	pointer
=	O
instrum_getenv	function
(	O
ads	pointer
,	O
"ADNS_RES_OPTIONS"	pointer
)	O
;	O
ccf_options	function
(	O
ads	pointer
,	O
"RES_OPTIONS"	pointer
,	O
-	O
1	int
,	O
res_options	pointer
)	O
;	O
ccf_options	function
(	O
ads	pointer
,	O
"ADNS_RES_OPTIONS"	pointer
,	O
-	O
1	int
,	O
adns_res_options	pointer
)	O
;	O
readconfig	function
(	O
ads	pointer
,	O
"/etc/resolv.conf"	pointer
,	O
1	int
)	O
;	O
readconfig	function
(	O
ads	pointer
,	O
"/etc/resolv-adns.conf"	pointer
,	O
0	int
)	O
;	O
readconfigenv	function
(	O
ads	pointer
,	O
"RES_CONF"	pointer
)	O
;	O
readconfigenv	function
(	O
ads	pointer
,	O
"ADNS_RES_CONF"	pointer
)	O
;	O
readconfigenvtext	function
(	O
ads	pointer
,	O
"RES_CONF_TEXT"	pointer
)	O
;	O
readconfigenvtext	function
(	O
ads	pointer
,	O
"ADNS_RES_CONF_TEXT"	pointer
)	O
;	O
ccf_options	function
(	O
ads	pointer
,	O
"RES_OPTIONS"	pointer
,	O
-	O
1	int
,	O
res_options	pointer
)	O
;	O
ccf_options	function
(	O
ads	pointer
,	O
"ADNS_RES_OPTIONS"	pointer
,	O
-	O
1	int
,	O
adns_res_options	pointer
)	O
;	O
ccf_search	function
(	O
ads	pointer
,	O
"LOCALDOMAIN"	pointer
,	O
-	O
1	int
,	O
instrum_getenv	function
(	O
ads	pointer
,	O
"LOCALDOMAIN"	pointer
)	O
)	O
;	O
ccf_search	function
(	O
ads	pointer
,	O
"ADNS_LOCALDOMAIN"	pointer
,	O
-	O
1	int
,	O
instrum_getenv	function
(	O
ads	pointer
,	O
"ADNS_LOCALDOMAIN"	pointer
)	O
)	O
;	O
if	O
(	O
ads	pointer
->	O
configerrno	int
&&	O
ads	pointer
->	O
configerrno	int
!=	O
EINVAL	int
)	O
{	O
r	int
=	O
ads	pointer
->	O
configerrno	int
;	O
init_abort	function
(	O
ads	pointer
)	O
;	O
return	O
r	int
;	O
}	O
r	int
=	O
init_finish	function
(	O
ads	pointer
)	O
;	O
if	O
(	O
r	int
)	O
return	O
r	int
;	O
adns__consistency	function
(	O
ads	pointer
,	O
0	int
,	O
cc_entex	int
)	O
;	O
*	O
ads_r	pointer
=	O
ads	pointer
;	O
return	O
0	int
;	O
}	O
int	O
adns_init	function
(	O
adns_state	pointer
*	O
ads_r	pointer
,	O
adns_initflags	enum
flags	enum
,	O
FILE	struct
*	O
diagfile	pointer
)	O
{	O
return	O
init_files	function
(	O
ads_r	pointer
,	O
flags	enum
,	O
logfn_file	function
,	O
diagfile	pointer
?	O
diagfile	pointer
:	O
stderr	pointer
)	O
;	O
}	O
static	O
int	O
init_strcfg	function
(	O
adns_state	pointer
*	O
ads_r	pointer
,	O
adns_initflags	enum
flags	enum
,	O
adns_logcallbackfn	function
*	O
logfn	pointer
,	O
void	O
*	O
logfndata	pointer
,	O
const	O
char	O
*	O
configtext	pointer
)	O
{	O
adns_state	pointer
ads	pointer
;	O
int	O
r	int
;	O
r	int
=	O
init_begin	function
(	O
&	O
ads	pointer
,	O
flags	enum
,	O
logfn	pointer
,	O
logfndata	pointer
)	O
;	O
if	O
(	O
r	int
)	O
return	O
r	int
;	O
readconfigtext	function
(	O
ads	pointer
,	O
configtext	pointer
,	O
"<supplied configuration text>"	pointer
)	O
;	O
if	O
(	O
ads	pointer
->	O
configerrno	int
)	O
{	O
r	int
=	O
ads	pointer
->	O
configerrno	int
;	O
init_abort	function
(	O
ads	pointer
)	O
;	O
return	O
r	int
;	O
}	O
r	int
=	O
init_finish	function
(	O
ads	pointer
)	O
;	O
if	O
(	O
r	int
)	O
return	O
r	int
;	O
adns__consistency	function
(	O
ads	pointer
,	O
0	int
,	O
cc_entex	int
)	O
;	O
*	O
ads_r	pointer
=	O
ads	pointer
;	O
return	O
0	int
;	O
}	O
int	O
adns_init_strcfg	function
(	O
adns_state	pointer
*	O
ads_r	pointer
,	O
adns_initflags	enum
flags	enum
,	O
FILE	struct
*	O
diagfile	pointer
,	O
const	O
char	O
*	O
configtext	pointer
)	O
{	O
return	O
init_strcfg	function
(	O
ads_r	pointer
,	O
flags	enum
,	O
diagfile	pointer
?	O
logfn_file	function
:	O
0	int
,	O
diagfile	pointer
,	O
configtext	pointer
)	O
;	O
}	O
int	O
adns_init_logfn	function
(	O
adns_state	pointer
*	O
newstate_r	pointer
,	O
adns_initflags	enum
flags	enum
,	O
const	O
char	O
*	O
configtext	pointer
,	O
adns_logcallbackfn	function
*	O
logfn	pointer
,	O
void	O
*	O
logfndata	pointer
)	O
{	O
if	O
(	O
!	O
logfn	pointer
&&	O
logfndata	pointer
)	O
logfn	pointer
=	O
logfn_file	function
;	O
if	O
(	O
configtext	pointer
)	O
return	O
init_strcfg	function
(	O
newstate_r	pointer
,	O
flags	enum
,	O
logfn	pointer
,	O
logfndata	pointer
,	O
configtext	pointer
)	O
;	O
else	O
return	O
init_files	function
(	O
newstate_r	pointer
,	O
flags	enum
,	O
logfn	pointer
,	O
logfndata	pointer
)	O
;	O
}	O
void	O
adns_finish	function
(	O
adns_state	pointer
ads	pointer
)	O
{	O
adns__consistency	function
(	O
ads	pointer
,	O
0	int
,	O
cc_entex	int
)	O
;	O
for	O
(	O
;	O
;	O
)	O
{	O
if	O
(	O
ads	pointer
->	O
udpw	struct
.	O
head	pointer
)	O
adns_cancel	function
(	O
ads	pointer
->	O
udpw	struct
.	O
head	pointer
)	O
;	O
else	O
if	O
(	O
ads	pointer
->	O
tcpw	struct
.	O
head	pointer
)	O
adns_cancel	function
(	O
ads	pointer
->	O
tcpw	struct
.	O
head	pointer
)	O
;	O
else	O
if	O
(	O
ads	pointer
->	O
childw	struct
.	O
head	pointer
)	O
adns_cancel	function
(	O
ads	pointer
->	O
childw	struct
.	O
head	pointer
)	O
;	O
else	O
if	O
(	O
ads	pointer
->	O
output	struct
.	O
head	pointer
)	O
adns_cancel	function
(	O
ads	pointer
->	O
output	struct
.	O
head	pointer
)	O
;	O
else	O
break	O
;	O
}	O
close	function
(	O
ads	pointer
->	O
udpsocket	int
)	O
;	O
if	O
(	O
ads	pointer
->	O
tcpsocket	int
>=	O
0	int
)	O
close	function
(	O
ads	pointer
->	O
tcpsocket	int
)	O
;	O
adns__vbuf_free	function
(	O
&	O
ads	pointer
->	O
tcpsend	struct
)	O
;	O
adns__vbuf_free	function
(	O
&	O
ads	pointer
->	O
tcprecv	struct
)	O
;	O
freesearchlist	function
(	O
ads	pointer
)	O
;	O
free	function
(	O
ads	pointer
)	O
;	O
}	O
void	O
adns_forallqueries_begin	function
(	O
adns_state	pointer
ads	pointer
)	O
{	O
adns__consistency	function
(	O
ads	pointer
,	O
0	int
,	O
cc_entex	int
)	O
;	O
ads	pointer
->	O
forallnext	pointer
=	O
ads	pointer
->	O
udpw	struct
.	O
head	pointer
?	O
ads	pointer
->	O
udpw	struct
.	O
head	pointer
:	O
ads	pointer
->	O
tcpw	struct
.	O
head	pointer
?	O
ads	pointer
->	O
tcpw	struct
.	O
head	pointer
:	O
ads	pointer
->	O
childw	struct
.	O
head	pointer
?	O
ads	pointer
->	O
childw	struct
.	O
head	pointer
:	O
ads	pointer
->	O
output	struct
.	O
head	pointer
;	O
}	O
adns_query	pointer
adns_forallqueries_next	function
(	O
adns_state	pointer
ads	pointer
,	O
void	O
*	O
*	O
context_r	pointer
)	O
{	O
adns_query	pointer
qu	pointer
,	O
nqu	pointer
;	O
adns__consistency	function
(	O
ads	pointer
,	O
0	int
,	O
cc_entex	int
)	O
;	O
nqu	pointer
=	O
ads	pointer
->	O
forallnext	pointer
;	O
for	O
(	O
;	O
;	O
)	O
{	O
qu	pointer
=	O
nqu	pointer
;	O
if	O
(	O
!	O
qu	pointer
)	O
return	O
0	int
;	O
if	O
(	O
qu	pointer
->	O
next	pointer
)	O
{	O
nqu	pointer
=	O
qu	pointer
->	O
next	pointer
;	O
}	O
else	O
if	O
(	O
qu	pointer
==	O
ads	pointer
->	O
udpw	struct
.	O
tail	pointer
)	O
{	O
nqu	pointer
=	O
ads	pointer
->	O
tcpw	struct
.	O
head	pointer
?	O
ads	pointer
->	O
tcpw	struct
.	O
head	pointer
:	O
ads	pointer
->	O
childw	struct
.	O
head	pointer
?	O
ads	pointer
->	O
childw	struct
.	O
head	pointer
:	O
ads	pointer
->	O
output	struct
.	O
head	pointer
;	O
}	O
else	O
if	O
(	O
qu	pointer
==	O
ads	pointer
->	O
tcpw	struct
.	O
tail	pointer
)	O
{	O
nqu	pointer
=	O
ads	pointer
->	O
childw	struct
.	O
head	pointer
?	O
ads	pointer
->	O
childw	struct
.	O
head	pointer
:	O
ads	pointer
->	O
output	struct
.	O
head	pointer
;	O
}	O
else	O
if	O
(	O
qu	pointer
==	O
ads	pointer
->	O
childw	struct
.	O
tail	pointer
)	O
{	O
nqu	pointer
=	O
ads	pointer
->	O
output	struct
.	O
head	pointer
;	O
}	O
else	O
{	O
nqu	pointer
=	O
0	int
;	O
}	O
if	O
(	O
!	O
qu	pointer
->	O
parent	pointer
)	O
break	O
;	O
}	O
ads	pointer
->	O
forallnext	pointer
=	O
nqu	pointer
;	O
if	O
(	O
context_r	pointer
)	O
*	O
context_r	pointer
=	O
qu	pointer
->	O
ctx	struct
.	O
ext	pointer
;	O
return	O
qu	pointer
;	O
}	O
