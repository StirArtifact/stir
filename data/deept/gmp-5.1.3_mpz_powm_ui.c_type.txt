static	O
void	O
mod	function
(	O
mp_ptr	pointer
np	pointer
,	O
mp_size_t	long
nn	long
,	O
mp_srcptr	pointer
dp	pointer
,	O
mp_size_t	long
dn	long
,	O
gmp_pi1_t	struct
*	O
dinv	pointer
,	O
mp_ptr	pointer
tp	pointer
)	O
{	O
mp_ptr	pointer
qp	pointer
;	O
TMP_DECL	O
;	O
TMP_MARK	O
;	O
qp	pointer
=	O
tp	pointer
;	O
if	O
(	O
dn	long
==	O
1	int
)	O
np	pointer
[	O
0	int
]	O
=	O
mpn_divrem_1	O
(	O
qp	pointer
,	O
(	O
mp_size_t	long
)	O
0	int
,	O
np	pointer
,	O
nn	long
,	O
dp	pointer
[	O
0	int
]	O
)	O
;	O
else	O
if	O
(	O
dn	long
==	O
2	int
)	O
mpn_div_qr_2n_pi1	O
(	O
qp	pointer
,	O
np	pointer
,	O
np	pointer
,	O
nn	long
,	O
dp	pointer
[	O
1	int
]	O
,	O
dp	pointer
[	O
0	int
]	O
,	O
dinv	pointer
->	O
inv32	long
)	O
;	O
else	O
if	O
(	O
BELOW_THRESHOLD	O
(	O
dn	long
,	O
DC_DIV_QR_THRESHOLD	int
)	O
||	O
BELOW_THRESHOLD	O
(	O
nn	long
-	O
dn	long
,	O
DC_DIV_QR_THRESHOLD	int
)	O
)	O
mpn_sbpi1_div_qr	O
(	O
qp	pointer
,	O
np	pointer
,	O
nn	long
,	O
dp	pointer
,	O
dn	long
,	O
dinv	pointer
->	O
inv32	long
)	O
;	O
else	O
if	O
(	O
BELOW_THRESHOLD	O
(	O
dn	long
,	O
MUPI_DIV_QR_THRESHOLD	int
)	O
||	O
BELOW_THRESHOLD	O
(	O
nn	long
,	O
2	int
*	O
MU_DIV_QR_THRESHOLD	int
)	O
||	O
(	O
double	O
)	O
(	O
2	int
*	O
(	O
MU_DIV_QR_THRESHOLD	int
-	O
MUPI_DIV_QR_THRESHOLD	int
)	O
)	O
*	O
dn	long
+	O
(	O
double	O
)	O
MUPI_DIV_QR_THRESHOLD	int
*	O
nn	long
>	O
(	O
double	O
)	O
dn	long
*	O
nn	long
)	O
{	O
mpn_dcpi1_div_qr	O
(	O
qp	pointer
,	O
np	pointer
,	O
nn	long
,	O
dp	pointer
,	O
dn	long
,	O
dinv	pointer
)	O
;	O
}	O
else	O
{	O
mp_ptr	pointer
rp	pointer
=	O
TMP_ALLOC_LIMBS	O
(	O
dn	long
)	O
;	O
mp_size_t	long
itch	long
=	O
mpn_mu_div_qr_itch	O
(	O
nn	long
,	O
dn	long
,	O
0	int
)	O
;	O
mp_ptr	pointer
scratch	pointer
=	O
TMP_ALLOC_LIMBS	O
(	O
itch	long
)	O
;	O
mpn_mu_div_qr	O
(	O
qp	pointer
,	O
rp	pointer
,	O
np	pointer
,	O
nn	long
,	O
dp	pointer
,	O
dn	long
,	O
scratch	pointer
)	O
;	O
MPN_COPY	O
(	O
np	pointer
,	O
rp	pointer
,	O
dn	long
)	O
;	O
}	O
TMP_FREE	O
;	O
}	O
static	O
void	O
reduce	function
(	O
mp_ptr	pointer
tp	pointer
,	O
mp_srcptr	pointer
ap	pointer
,	O
mp_size_t	long
an	long
,	O
mp_srcptr	pointer
mp	pointer
,	O
mp_size_t	long
mn	long
,	O
gmp_pi1_t	struct
*	O
dinv	pointer
)	O
{	O
mp_ptr	pointer
rp	pointer
,	O
scratch	pointer
;	O
TMP_DECL	O
;	O
TMP_MARK	O
;	O
rp	pointer
=	O
TMP_ALLOC_LIMBS	O
(	O
an	long
)	O
;	O
scratch	pointer
=	O
TMP_ALLOC_LIMBS	O
(	O
an	long
-	O
mn	long
+	O
1	int
)	O
;	O
MPN_COPY	O
(	O
rp	pointer
,	O
ap	pointer
,	O
an	long
)	O
;	O
mod	function
(	O
rp	pointer
,	O
an	long
,	O
mp	pointer
,	O
mn	long
,	O
dinv	pointer
,	O
scratch	pointer
)	O
;	O
MPN_COPY	O
(	O
tp	pointer
,	O
rp	pointer
,	O
mn	long
)	O
;	O
TMP_FREE	O
;	O
}	O
void	O
mpz_powm_ui	O
(	O
mpz_ptr	pointer
r	pointer
,	O
mpz_srcptr	pointer
b	int
,	O
unsigned	O
long	O
int	O
el	long
,	O
mpz_srcptr	pointer
m	pointer
)	O
{	O
if	O
(	O
el	long
<	O
20	int
)	O
{	O
mp_ptr	pointer
xp	pointer
,	O
tp	pointer
,	O
mp	pointer
,	O
bp	pointer
,	O
scratch	pointer
;	O
mp_size_t	long
xn	long
,	O
tn	long
,	O
mn	long
,	O
bn	long
;	O
int	O
m_zero_cnt	int
;	O
int	O
c	int
;	O
mp_limb_t	long
e	long
,	O
m2	long
;	O
gmp_pi1_t	struct
dinv	pointer
;	O
TMP_DECL	O
;	O
mp	pointer
=	O
PTR	O
(	O
m	pointer
)	O
;	O
mn	long
=	O
ABSIZ	O
(	O
m	pointer
)	O
;	O
if	O
(	O
UNLIKELY	O
(	O
mn	long
==	O
0	int
)	O
)	O
DIVIDE_BY_ZERO	O
;	O
if	O
(	O
el	long
==	O
0	int
)	O
{	O
SIZ	O
(	O
r	pointer
)	O
=	O
(	O
mn	long
==	O
1	int
&&	O
mp	pointer
[	O
0	int
]	O
==	O
1	int
)	O
?	O
0	int
:	O
1	int
;	O
PTR	O
(	O
r	pointer
)	O
[	O
0	int
]	O
=	O
1	int
;	O
return	O
;	O
}	O
TMP_MARK	O
;	O
count_leading_zeros	O
(	O
m_zero_cnt	int
,	O
mp	pointer
[	O
mn	long
-	O
1	int
]	O
)	O
;	O
m_zero_cnt	int
-=	O
GMP_NAIL_BITS	int
;	O
if	O
(	O
m_zero_cnt	int
!=	O
0	int
)	O
{	O
mp_ptr	pointer
new_mp	pointer
=	O
TMP_ALLOC_LIMBS	O
(	O
mn	long
)	O
;	O
mpn_lshift	O
(	O
new_mp	pointer
,	O
mp	pointer
,	O
mn	long
,	O
m_zero_cnt	int
)	O
;	O
mp	pointer
=	O
new_mp	pointer
;	O
}	O
m2	long
=	O
mn	long
==	O
1	int
?	O
0	int
:	O
mp	pointer
[	O
mn	long
-	O
2	int
]	O
;	O
invert_pi1	O
(	O
dinv	pointer
,	O
mp	pointer
[	O
mn	long
-	O
1	int
]	O
,	O
m2	long
)	O
;	O
bn	long
=	O
ABSIZ	O
(	O
b	int
)	O
;	O
bp	pointer
=	O
PTR	O
(	O
b	int
)	O
;	O
if	O
(	O
bn	long
>	O
mn	long
)	O
{	O
mp_ptr	pointer
new_bp	pointer
=	O
TMP_ALLOC_LIMBS	O
(	O
mn	long
)	O
;	O
reduce	function
(	O
new_bp	pointer
,	O
bp	pointer
,	O
bn	long
,	O
mp	pointer
,	O
mn	long
,	O
&	O
dinv	pointer
)	O
;	O
bp	pointer
=	O
new_bp	pointer
;	O
bn	long
=	O
mn	long
;	O
MPN_NORMALIZE	O
(	O
bp	pointer
,	O
bn	long
)	O
;	O
}	O
if	O
(	O
bn	long
==	O
0	int
)	O
{	O
SIZ	O
(	O
r	pointer
)	O
=	O
0	int
;	O
TMP_FREE	O
;	O
return	O
;	O
}	O
tp	pointer
=	O
TMP_ALLOC_LIMBS	O
(	O
2	int
*	O
mn	long
+	O
1	int
)	O
;	O
xp	pointer
=	O
TMP_ALLOC_LIMBS	O
(	O
mn	long
)	O
;	O
scratch	pointer
=	O
TMP_ALLOC_LIMBS	O
(	O
mn	long
+	O
1	int
)	O
;	O
MPN_COPY	O
(	O
xp	pointer
,	O
bp	pointer
,	O
bn	long
)	O
;	O
xn	long
=	O
bn	long
;	O
e	long
=	O
el	long
;	O
count_leading_zeros	O
(	O
c	int
,	O
e	long
)	O
;	O
e	long
=	O
(	O
e	long
<<	O
c	int
)	O
<<	O
1	int
;	O
c	int
=	O
GMP_LIMB_BITS	int
-	O
1	int
-	O
c	int
;	O
if	O
(	O
c	int
==	O
0	int
)	O
{	O
if	O
(	O
xn	long
==	O
mn	long
&&	O
mpn_cmp	O
(	O
xp	pointer
,	O
mp	pointer
,	O
mn	long
)	O
>=	O
0	int
)	O
mpn_sub_n	O
(	O
xp	pointer
,	O
xp	pointer
,	O
mp	pointer
,	O
mn	long
)	O
;	O
}	O
else	O
{	O
do	O
{	O
mpn_sqr	O
(	O
tp	pointer
,	O
xp	pointer
,	O
xn	long
)	O
;	O
tn	long
=	O
2	int
*	O
xn	long
;	O
tn	long
-=	O
tp	pointer
[	O
tn	long
-	O
1	int
]	O
==	O
0	int
;	O
if	O
(	O
tn	long
<	O
mn	long
)	O
{	O
MPN_COPY	O
(	O
xp	pointer
,	O
tp	pointer
,	O
tn	long
)	O
;	O
xn	long
=	O
tn	long
;	O
}	O
else	O
{	O
mod	function
(	O
tp	pointer
,	O
tn	long
,	O
mp	pointer
,	O
mn	long
,	O
&	O
dinv	pointer
,	O
scratch	pointer
)	O
;	O
MPN_COPY	O
(	O
xp	pointer
,	O
tp	pointer
,	O
mn	long
)	O
;	O
xn	long
=	O
mn	long
;	O
}	O
if	O
(	O
(	O
mp_limb_signed_t	long
)	O
e	long
<	O
0	int
)	O
{	O
mpn_mul	O
(	O
tp	pointer
,	O
xp	pointer
,	O
xn	long
,	O
bp	pointer
,	O
bn	long
)	O
;	O
tn	long
=	O
xn	long
+	O
bn	long
;	O
tn	long
-=	O
tp	pointer
[	O
tn	long
-	O
1	int
]	O
==	O
0	int
;	O
if	O
(	O
tn	long
<	O
mn	long
)	O
{	O
MPN_COPY	O
(	O
xp	pointer
,	O
tp	pointer
,	O
tn	long
)	O
;	O
xn	long
=	O
tn	long
;	O
}	O
else	O
{	O
mod	function
(	O
tp	pointer
,	O
tn	long
,	O
mp	pointer
,	O
mn	long
,	O
&	O
dinv	pointer
,	O
scratch	pointer
)	O
;	O
MPN_COPY	O
(	O
xp	pointer
,	O
tp	pointer
,	O
mn	long
)	O
;	O
xn	long
=	O
mn	long
;	O
}	O
}	O
e	long
<<=	O
1	int
;	O
c	int
--	O
;	O
}	O
while	O
(	O
c	int
!=	O
0	int
)	O
;	O
}	O
if	O
(	O
m_zero_cnt	int
!=	O
0	int
)	O
{	O
mp_limb_t	long
cy	long
;	O
cy	long
=	O
mpn_lshift	O
(	O
tp	pointer
,	O
xp	pointer
,	O
xn	long
,	O
m_zero_cnt	int
)	O
;	O
tp	pointer
[	O
xn	long
]	O
=	O
cy	long
;	O
xn	long
+=	O
cy	long
!=	O
0	int
;	O
if	O
(	O
xn	long
<	O
mn	long
)	O
{	O
MPN_COPY	O
(	O
xp	pointer
,	O
tp	pointer
,	O
xn	long
)	O
;	O
}	O
else	O
{	O
mod	function
(	O
tp	pointer
,	O
xn	long
,	O
mp	pointer
,	O
mn	long
,	O
&	O
dinv	pointer
,	O
scratch	pointer
)	O
;	O
MPN_COPY	O
(	O
xp	pointer
,	O
tp	pointer
,	O
mn	long
)	O
;	O
xn	long
=	O
mn	long
;	O
}	O
mpn_rshift	O
(	O
xp	pointer
,	O
xp	pointer
,	O
xn	long
,	O
m_zero_cnt	int
)	O
;	O
}	O
MPN_NORMALIZE	O
(	O
xp	pointer
,	O
xn	long
)	O
;	O
if	O
(	O
(	O
el	long
&	O
1	int
)	O
!=	O
0	int
&&	O
SIZ	O
(	O
b	int
)	O
<	O
0	int
&&	O
xn	long
!=	O
0	int
)	O
{	O
mp	pointer
=	O
PTR	O
(	O
m	pointer
)	O
;	O
mpn_sub	O
(	O
xp	pointer
,	O
mp	pointer
,	O
mn	long
,	O
xp	pointer
,	O
xn	long
)	O
;	O
xn	long
=	O
mn	long
;	O
MPN_NORMALIZE	O
(	O
xp	pointer
,	O
xn	long
)	O
;	O
}	O
MPZ_REALLOC	O
(	O
r	pointer
,	O
xn	long
)	O
;	O
SIZ	O
(	O
r	pointer
)	O
=	O
xn	long
;	O
MPN_COPY	O
(	O
PTR	O
(	O
r	pointer
)	O
,	O
xp	pointer
,	O
xn	long
)	O
;	O
TMP_FREE	O
;	O
}	O
else	O
{	O
mpz_t	array
e	long
;	O
mp_limb_t	long
ep	array
[	O
LIMBS_PER_ULONG	int
]	O
;	O
MPZ_FAKE_UI	O
(	O
e	long
,	O
ep	array
,	O
el	long
)	O
;	O
mpz_powm	O
(	O
r	pointer
,	O
b	int
,	O
e	long
,	O
m	pointer
)	O
;	O
}	O
}	O
