typedef	O
struct	O
{	O
EUint32	long
thread	long
;	O
OBJID	int
id	int
;	O
}	O
DtRUNABLE	struct
;	O
typedef	O
struct	O
s_par	struct
{	O
OBJID	int
idProxy	int
;	O
OBJID	int
id	int
;	O
EPChar	pointer
name	pointer
;	O
EPVoid	pointer
pars	pointer
;	O
}	O
TH_PAR	struct
;	O
void	O
*	O
threaded_func	function
(	O
void	O
*	O
pars	pointer
)	O
;	O
ESint32	int
EDMAPROC	O
RUNABLENewObj	function
(	O
OBJID	int
IdObj	int
,	O
EPChar	pointer
name	pointer
)	O
{	O
DtRUNABLE	struct
*	O
m	pointer
;	O
m	pointer
=	O
(	O
DtRUNABLE	struct
*	O
)	O
edma_get_data_ref	function
(	O
IdObj	int
)	O
;	O
edma_printf_obj	function
(	O
IdObj	int
,	O
"Creating object of class %s"	pointer
,	O
name	pointer
)	O
;	O
if	O
(	O
(	O
m	pointer
->	O
id	int
=	O
edma_new_obj	function
(	O
name	pointer
)	O
)	O
==	O
-	O
1	int
)	O
return	O
-	O
1	int
;	O
return	O
0	int
;	O
}	O
ESint32	int
EDMAPROC	O
RUNABLEFreeObj	function
(	O
OBJID	int
IdObj	int
)	O
{	O
DtRUNABLE	struct
*	O
m	pointer
;	O
m	pointer
=	O
(	O
DtRUNABLE	struct
*	O
)	O
edma_get_data_ref	function
(	O
IdObj	int
)	O
;	O
edma_free_obj	function
(	O
m	pointer
->	O
id	int
)	O
;	O
return	O
0	int
;	O
}	O
ESint32	int
EDMAPROC	O
RUNABLEWProp3	function
(	O
OBJID	int
IdObj	int
,	O
CLASSID	int
id	int
,	O
EPChar	pointer
name	pointer
,	O
EPVoid	pointer
par	pointer
)	O
{	O
DtRUNABLE	struct
*	O
m	pointer
;	O
m	pointer
=	O
(	O
DtRUNABLE	struct
*	O
)	O
edma_get_data_ref	function
(	O
IdObj	int
)	O
;	O
return	O
edma_wprop3_pargs	function
(	O
m	pointer
->	O
id	int
,	O
name	pointer
,	O
par	pointer
)	O
;	O
}	O
ESint32	int
EDMAPROC	O
RUNABLERProp3	function
(	O
OBJID	int
IdObj	int
,	O
CLASSID	int
id	int
,	O
EPChar	pointer
name	pointer
,	O
EPVoid	pointer
par	pointer
)	O
{	O
DtRUNABLE	struct
*	O
m	pointer
;	O
m	pointer
=	O
(	O
DtRUNABLE	struct
*	O
)	O
edma_get_data_ref	function
(	O
IdObj	int
)	O
;	O
return	O
edma_rprop3_pargs	function
(	O
m	pointer
->	O
id	int
,	O
name	pointer
,	O
par	pointer
)	O
;	O
}	O
ESint32	int
EDMAPROC	O
RUNABLEMet3	function
(	O
OBJID	int
IdObj	int
,	O
CLASSID	int
id	int
,	O
EPChar	pointer
name	pointer
,	O
EPVoid	pointer
par	pointer
)	O
{	O
DtRUNABLE	struct
*	O
m	pointer
;	O
TH_PAR	struct
*	O
pars	pointer
;	O
m	pointer
=	O
(	O
DtRUNABLE	struct
*	O
)	O
edma_get_data_ref	function
(	O
IdObj	int
)	O
;	O
if	O
(	O
(	O
pars	pointer
=	O
(	O
TH_PAR	struct
*	O
)	O
edma_palloc	function
(	O
sizeof	O
(	O
TH_PAR	struct
)	O
)	O
)	O
==	O
NULL	O
)	O
{	O
edma_printf_obj	function
(	O
IdObj	int
,	O
"%s"	pointer
,	O
"Can't allocate memory for thread parameters"	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
pars	pointer
->	O
idProxy	int
=	O
IdObj	int
;	O
pars	pointer
->	O
id	int
=	O
m	pointer
->	O
id	int
;	O
pars	pointer
->	O
name	pointer
=	O
name	pointer
;	O
pars	pointer
->	O
pars	pointer
=	O
par	pointer
;	O
edma_printf_obj	function
(	O
IdObj	int
,	O
"Creating thread for method %s"	pointer
,	O
name	pointer
)	O
;	O
pthread_create	function
(	O
&	O
m	pointer
->	O
thread	long
,	O
NULL	O
,	O
threaded_func	function
,	O
pars	pointer
)	O
;	O
return	O
0	int
;	O
}	O
ESint32	int
EDMAPROC	O
RUNABLEMet3S	function
(	O
OBJID	int
IdObj	int
,	O
CLASSID	int
id	int
,	O
EPChar	pointer
name	pointer
,	O
EPChar	pointer
sig	pointer
,	O
EPVoid	pointer
par	pointer
)	O
{	O
DtRUNABLE	struct
*	O
m	pointer
;	O
m	pointer
=	O
(	O
DtRUNABLE	struct
*	O
)	O
edma_get_data_ref	function
(	O
IdObj	int
)	O
;	O
edma_printf_obj	function
(	O
IdObj	int
,	O
"Met3S still not implemented"	pointer
)	O
;	O
return	O
0	int
;	O
}	O
void	O
*	O
threaded_func	function
(	O
void	O
*	O
pars	pointer
)	O
{	O
TH_PAR	struct
*	O
p	pointer
;	O
edma_thread_register	function
(	O
)	O
;	O
p	pointer
=	O
(	O
TH_PAR	struct
*	O
)	O
pars	pointer
;	O
edma_printf	function
(	O
"[RUNABLE] Invoking threaded method %s on object %d"	pointer
,	O
p	pointer
->	O
name	pointer
,	O
p	pointer
->	O
id	int
)	O
;	O
edma_met3_pargs	function
(	O
p	pointer
->	O
id	int
,	O
p	pointer
->	O
name	pointer
,	O
NULL	O
,	O
1	int
,	O
p	pointer
->	O
pars	pointer
)	O
;	O
free	function
(	O
pars	pointer
)	O
;	O
edma_thread_unregister	function
(	O
)	O
;	O
return	O
0	int
;	O
}	O
