typedef	O
struct	O
printer_type	struct
{	O
char	O
*	O
name	pointer
;	O
short	O
sides	pointer
;	O
int	O
left	int
,	O
right	int
,	O
top	int
,	O
bottom	int
;	O
struct	O
printer_type	struct
*	O
next	pointer
;	O
}	O
printer_type	struct
;	O
typedef	O
struct	O
printer_record	struct
{	O
char	O
*	O
names	pointer
;	O
char	O
*	O
type	pointer
;	O
struct	O
printer_record	struct
*	O
next	pointer
;	O
}	O
printer_record	struct
;	O
static	O
struct	O
printer_type	struct
*	O
parse_printer_type	function
(	O
char	O
*	O
line	pointer
)	O
;	O
static	O
struct	O
printer_record	struct
*	O
parse_printer_record	function
(	O
char	O
*	O
line	pointer
)	O
;	O
static	O
char	O
*	O
printers_filename	pointer
;	O
void	O
setup_printers_fl	function
(	O
void	O
)	O
{	O
printers_filename	pointer
=	O
NULL	O
;	O
if	O
(	O
use_environment	enum
)	O
printers_filename	pointer
=	O
getenv	function
(	O
"TP_PRINTERS_FILE"	pointer
)	O
;	O
if	O
(	O
(	O
printers_filename	pointer
==	O
NULL	O
)	O
||	O
(	O
strlen	function
(	O
printers_filename	pointer
)	O
==	O
0	int
)	O
)	O
printers_filename	pointer
=	O
PRINTERS_FILE	O
;	O
}	O
void	O
printer_stats	function
(	O
char	O
*	O
printer	pointer
,	O
short	O
*	O
sides	pointer
,	O
unsigned	O
short	O
*	O
lm	pointer
,	O
unsigned	O
short	O
*	O
rm	pointer
,	O
unsigned	O
short	O
*	O
tm	pointer
,	O
unsigned	O
short	O
*	O
bm	pointer
)	O
{	O
char	O
buffer	array
[	O
1024	int
]	O
;	O
char	O
*	O
env_printer	pointer
;	O
FILE	struct
*	O
printers_file	pointer
;	O
printer_record	struct
*	O
printers_list	pointer
=	O
NULL	O
;	O
printer_type	struct
*	O
types_list	pointer
=	O
NULL	O
;	O
printer_record	struct
*	O
tmp_printer	pointer
=	O
NULL	O
;	O
printer_type	struct
*	O
tmp_type	pointer
=	O
NULL	O
;	O
printer_record	struct
*	O
this_printer	pointer
=	O
NULL	O
;	O
printer_type	struct
*	O
this_type	pointer
=	O
NULL	O
;	O
*	O
lm	pointer
=	O
15	int
;	O
*	O
rm	pointer
=	O
590	int
;	O
*	O
tm	pointer
=	O
776	int
;	O
*	O
bm	pointer
=	O
30	int
;	O
*	O
sides	pointer
=	O
1	int
;	O
if	O
(	O
!	O
use_environment	enum
)	O
{	O
env_printer	pointer
=	O
"testprinter"	pointer
;	O
dm	function
(	O
'D'	O
,	O
3	int
,	O
"Using testprinter entry\n"	pointer
)	O
;	O
return	O
;	O
}	O
if	O
(	O
(	O
printer	pointer
==	O
NULL	O
)	O
||	O
(	O
*	O
printer	pointer
==	O
'\0'	O
)	O
)	O
{	O
if	O
(	O
(	O
(	O
env_printer	pointer
=	O
getenv	function
(	O
"PRINTER"	pointer
)	O
)	O
==	O
NULL	O
)	O
||	O
(	O
*	O
env_printer	pointer
==	O
'\0'	O
)	O
)	O
{	O
dm	function
(	O
'D'	O
,	O
3	int
,	O
CMD_NAME	pointer
": $PRINTER null or not defined: using default printer properties\n"	pointer
)	O
;	O
return	O
;	O
}	O
else	O
{	O
printer	pointer
=	O
env_printer	pointer
;	O
}	O
}	O
if	O
(	O
(	O
printers_file	pointer
=	O
fopen	function
(	O
printers_filename	pointer
,	O
"r"	pointer
)	O
)	O
==	O
NULL	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
gettext	function
(	O
CMD_NAME	pointer
": warning: cannot open %s, %s\n"	pointer
)	O
,	O
printers_filename	pointer
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
return	O
;	O
}	O
while	O
(	O
fgets	function
(	O
buffer	array
,	O
1024	int
,	O
printers_file	pointer
)	O
)	O
{	O
if	O
(	O
strlen	function
(	O
buffer	array
)	O
==	O
0	int
)	O
{	O
}	O
else	O
if	O
(	O
*	O
buffer	array
==	O
'#'	O
)	O
{	O
}	O
else	O
if	O
(	O
strncmp	function
(	O
buffer	array
,	O
"type"	pointer
,	O
4	int
)	O
==	O
0	int
)	O
{	O
tmp_type	pointer
=	O
parse_printer_type	function
(	O
buffer	array
)	O
;	O
tmp_type	pointer
->	O
next	pointer
=	O
types_list	pointer
;	O
types_list	pointer
=	O
tmp_type	pointer
;	O
}	O
else	O
if	O
(	O
strncmp	function
(	O
buffer	array
,	O
"printer"	pointer
,	O
7	int
)	O
==	O
0	int
)	O
{	O
tmp_printer	pointer
=	O
parse_printer_record	function
(	O
buffer	array
)	O
;	O
tmp_printer	pointer
->	O
next	pointer
=	O
printers_list	pointer
;	O
printers_list	pointer
=	O
tmp_printer	pointer
;	O
}	O
}	O
for	O
(	O
tmp_printer	pointer
=	O
printers_list	pointer
;	O
tmp_printer	pointer
;	O
tmp_printer	pointer
=	O
tmp_printer	pointer
->	O
next	pointer
)	O
{	O
char	O
*	O
s	pointer
=	O
strtok	function
(	O
tmp_printer	pointer
->	O
names	pointer
,	O
","	pointer
)	O
;	O
while	O
(	O
s	pointer
)	O
{	O
dm	function
(	O
'D'	O
,	O
5	int
,	O
"Comparing printer names %s and %s\n"	pointer
,	O
printer	pointer
,	O
s	pointer
)	O
;	O
if	O
(	O
strcmp	function
(	O
printer	pointer
,	O
s	pointer
)	O
==	O
0	int
)	O
{	O
this_printer	pointer
=	O
tmp_printer	pointer
;	O
break	O
;	O
}	O
s	pointer
=	O
strtok	function
(	O
NULL	O
,	O
","	pointer
)	O
;	O
}	O
if	O
(	O
this_printer	pointer
)	O
break	O
;	O
}	O
if	O
(	O
!	O
this_printer	pointer
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
gettext	function
(	O
CMD_NAME	pointer
": warning: cannot find printer %s in %s\n"	pointer
)	O
,	O
printer	pointer
,	O
printers_filename	pointer
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
gettext	function
(	O
CMD_NAME	pointer
": send mail to %s if you want to have it added\n"	pointer
)	O
,	O
TP_ADMIN_USER	pointer
)	O
;	O
return	O
;	O
}	O
for	O
(	O
tmp_type	pointer
=	O
types_list	pointer
;	O
tmp_type	pointer
;	O
tmp_type	pointer
=	O
tmp_type	pointer
->	O
next	pointer
)	O
{	O
if	O
(	O
strcmp	function
(	O
this_printer	pointer
->	O
type	pointer
,	O
tmp_type	pointer
->	O
name	pointer
)	O
==	O
0	int
)	O
{	O
this_type	pointer
=	O
tmp_type	pointer
;	O
break	O
;	O
}	O
}	O
if	O
(	O
!	O
this_type	pointer
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
gettext	function
(	O
CMD_NAME	pointer
": warning: cannot find printer type %s in %s\n"	pointer
)	O
,	O
this_printer	pointer
->	O
type	pointer
,	O
printers_filename	pointer
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
gettext	function
(	O
CMD_NAME	pointer
": you should notify %s\n"	pointer
)	O
,	O
TP_ADMIN_USER	pointer
)	O
;	O
return	O
;	O
}	O
if	O
(	O
fclose	function
(	O
printers_file	pointer
)	O
==	O
EOF	O
)	O
{	O
perror	function
(	O
CMD_NAME	pointer
": Cannot close printers file"	pointer
)	O
;	O
exit	function
(	O
2	int
)	O
;	O
}	O
dm	function
(	O
'D'	O
,	O
3	int
,	O
"printers_file.c: Printer type %s\n"	pointer
,	O
this_type	pointer
->	O
name	pointer
)	O
;	O
*	O
lm	pointer
=	O
this_type	pointer
->	O
left	int
;	O
*	O
rm	pointer
=	O
this_type	pointer
->	O
right	int
;	O
*	O
tm	pointer
=	O
this_type	pointer
->	O
top	int
;	O
*	O
bm	pointer
=	O
this_type	pointer
->	O
bottom	int
;	O
*	O
sides	pointer
=	O
this_type	pointer
->	O
sides	pointer
;	O
dm	function
(	O
'D'	O
,	O
3	int
,	O
"left = %d, right = %d, top = %d, bottom = %d, sides = %d\n"	pointer
,	O
*	O
lm	pointer
,	O
*	O
rm	pointer
,	O
*	O
tm	pointer
,	O
*	O
bm	pointer
,	O
*	O
sides	pointer
)	O
;	O
}	O
struct	O
printer_type	struct
*	O
parse_printer_type	function
(	O
char	O
*	O
line	pointer
)	O
{	O
struct	O
printer_type	struct
*	O
r	pointer
=	O
xmalloc	function
(	O
sizeof	O
(	O
printer_type	struct
)	O
)	O
;	O
strtok	function
(	O
line	pointer
,	O
":"	pointer
)	O
;	O
r	pointer
->	O
name	pointer
=	O
strdup	function
(	O
strtok	function
(	O
NULL	O
,	O
":"	pointer
)	O
)	O
;	O
r	pointer
->	O
sides	pointer
=	O
(	O
short	O
)	O
atoi	function
(	O
strtok	function
(	O
NULL	O
,	O
":"	pointer
)	O
)	O
;	O
r	pointer
->	O
left	int
=	O
(	O
unsigned	O
short	O
)	O
atoi	function
(	O
strtok	function
(	O
NULL	O
,	O
":"	pointer
)	O
)	O
;	O
r	pointer
->	O
right	int
=	O
(	O
unsigned	O
short	O
)	O
atoi	function
(	O
strtok	function
(	O
NULL	O
,	O
":"	pointer
)	O
)	O
;	O
r	pointer
->	O
top	int
=	O
(	O
unsigned	O
short	O
)	O
atoi	function
(	O
strtok	function
(	O
NULL	O
,	O
":"	pointer
)	O
)	O
;	O
r	pointer
->	O
bottom	int
=	O
(	O
unsigned	O
short	O
)	O
atoi	function
(	O
strtok	function
(	O
NULL	O
,	O
":"	pointer
)	O
)	O
;	O
r	pointer
->	O
next	pointer
=	O
NULL	O
;	O
if	O
(	O
(	O
r	pointer
->	O
sides	pointer
!=	O
1	int
)	O
&&	O
(	O
r	pointer
->	O
sides	pointer
!=	O
2	int
)	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
gettext	function
(	O
CMD_NAME	pointer
": printers file %s: type %s: second field must be 1 or 2, but is %d\n"	pointer
)	O
,	O
printers_filename	pointer
,	O
r	pointer
->	O
name	pointer
,	O
r	pointer
->	O
sides	pointer
)	O
;	O
exit	function
(	O
2	int
)	O
;	O
}	O
dm	function
(	O
'D'	O
,	O
3	int
,	O
"Read type %s entry: %d:%d:%d:%d:%d\n"	pointer
,	O
r	pointer
->	O
name	pointer
,	O
r	pointer
->	O
sides	pointer
,	O
r	pointer
->	O
left	int
,	O
r	pointer
->	O
right	int
,	O
r	pointer
->	O
top	int
,	O
r	pointer
->	O
bottom	int
)	O
;	O
return	O
r	pointer
;	O
}	O
struct	O
printer_record	struct
*	O
parse_printer_record	function
(	O
char	O
*	O
line	pointer
)	O
{	O
struct	O
printer_record	struct
*	O
r	pointer
=	O
xmalloc	function
(	O
sizeof	O
(	O
printer_record	struct
)	O
)	O
;	O
strtok	function
(	O
line	pointer
,	O
":"	pointer
)	O
;	O
r	pointer
->	O
names	pointer
=	O
strdup	function
(	O
strtok	function
(	O
NULL	O
,	O
":"	pointer
)	O
)	O
;	O
r	pointer
->	O
type	pointer
=	O
strdup	function
(	O
strtok	function
(	O
NULL	O
,	O
":"	pointer
)	O
)	O
;	O
r	pointer
->	O
type	pointer
[	O
strlen	function
(	O
r	pointer
->	O
type	pointer
)	O
-	O
1	int
]	O
=	O
'\0'	O
;	O
r	pointer
->	O
next	pointer
=	O
NULL	O
;	O
dm	function
(	O
'D'	O
,	O
3	int
,	O
"Read printer entry: %s:%s\n"	pointer
,	O
r	pointer
->	O
names	pointer
,	O
r	pointer
->	O
type	pointer
)	O
;	O
return	O
r	pointer
;	O
}	O
