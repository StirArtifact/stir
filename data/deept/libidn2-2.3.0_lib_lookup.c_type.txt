static	O
int	O
set_default_flags	function
(	O
int	O
*	O
flags	int
)	O
{	O
if	O
(	O
(	O
(	O
*	O
flags	int
)	O
&	O
IDN2_TRANSITIONAL	int
)	O
&&	O
(	O
(	O
*	O
flags	int
)	O
&	O
IDN2_NONTRANSITIONAL	int
)	O
)	O
return	O
IDN2_INVALID_FLAGS	int
;	O
if	O
(	O
(	O
(	O
*	O
flags	int
)	O
&	O
(	O
IDN2_TRANSITIONAL	int
|	O
IDN2_NONTRANSITIONAL	int
)	O
)	O
&&	O
(	O
(	O
*	O
flags	int
)	O
&	O
IDN2_NO_TR46	int
)	O
)	O
return	O
IDN2_INVALID_FLAGS	int
;	O
if	O
(	O
(	O
(	O
*	O
flags	int
)	O
&	O
IDN2_ALABEL_ROUNDTRIP	int
)	O
&&	O
(	O
(	O
*	O
flags	int
)	O
&	O
IDN2_NO_ALABEL_ROUNDTRIP	int
)	O
)	O
return	O
IDN2_INVALID_FLAGS	int
;	O
if	O
(	O
!	O
(	O
(	O
*	O
flags	int
)	O
&	O
(	O
IDN2_NO_TR46	int
|	O
IDN2_TRANSITIONAL	int
)	O
)	O
)	O
*	O
flags	int
|=	O
IDN2_NONTRANSITIONAL	int
;	O
return	O
IDN2_OK	int
;	O
}	O
static	O
int	O
label	pointer
(	O
const	O
uint8_t	char
*	O
src	pointer
,	O
size_t	long
srclen	long
,	O
uint8_t	char
*	O
dst	pointer
,	O
size_t	long
*	O
dstlen	pointer
,	O
int	O
flags	int
)	O
{	O
size_t	long
plen	long
;	O
uint32_t	int
*	O
p	pointer
;	O
const	O
uint8_t	char
*	O
src_org	pointer
=	O
NULL	O
;	O
uint8_t	char
*	O
src_allocated	pointer
=	O
NULL	O
;	O
int	O
rc	int
,	O
check_roundtrip	int
=	O
0	int
;	O
size_t	long
tmpl	long
,	O
srclen_org	long
=	O
0	int
;	O
uint32_t	int
label_u32	array
[	O
IDN2_LABEL_MAX_LENGTH	int
]	O
;	O
size_t	long
label32_len	long
=	O
IDN2_LABEL_MAX_LENGTH	int
;	O
if	O
(	O
_idn2_ascii_p	function
(	O
src	pointer
,	O
srclen	long
)	O
)	O
{	O
if	O
(	O
!	O
(	O
flags	int
&	O
IDN2_NO_ALABEL_ROUNDTRIP	int
)	O
&&	O
srclen	long
>=	O
4	int
&&	O
memcmp	function
(	O
src	pointer
,	O
"xn--"	pointer
,	O
4	int
)	O
==	O
0	int
)	O
{	O
rc	int
=	O
_idn2_punycode_decode_internal	function
(	O
srclen	long
-	O
4	int
,	O
(	O
char	O
*	O
)	O
src	pointer
+	O
4	int
,	O
&	O
label32_len	long
,	O
label_u32	array
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
check_roundtrip	int
=	O
1	int
;	O
src_org	pointer
=	O
src	pointer
;	O
srclen_org	long
=	O
srclen	long
;	O
srclen	long
=	O
IDN2_LABEL_MAX_LENGTH	int
;	O
src	pointer
=	O
src_allocated	pointer
=	O
u32_to_u8	function
(	O
label_u32	array
,	O
label32_len	long
,	O
NULL	O
,	O
&	O
srclen	long
)	O
;	O
if	O
(	O
!	O
src	pointer
)	O
{	O
if	O
(	O
errno	O
==	O
ENOMEM	int
)	O
return	O
IDN2_MALLOC	int
;	O
return	O
IDN2_ENCODING_ERROR	int
;	O
}	O
}	O
else	O
{	O
if	O
(	O
srclen	long
>	O
IDN2_LABEL_MAX_LENGTH	int
)	O
return	O
IDN2_TOO_BIG_LABEL	int
;	O
if	O
(	O
srclen	long
>	O
*	O
dstlen	pointer
)	O
return	O
IDN2_TOO_BIG_DOMAIN	int
;	O
memcpy	function
(	O
dst	pointer
,	O
src	pointer
,	O
srclen	long
)	O
;	O
*	O
dstlen	pointer
=	O
srclen	long
;	O
return	O
IDN2_OK	int
;	O
}	O
}	O
rc	int
=	O
_idn2_u8_to_u32_nfc	function
(	O
src	pointer
,	O
srclen	long
,	O
&	O
p	pointer
,	O
&	O
plen	long
,	O
flags	int
&	O
IDN2_NFC_INPUT	int
)	O
;	O
if	O
(	O
rc	int
!=	O
IDN2_OK	int
)	O
goto	O
out	pointer
;	O
if	O
(	O
!	O
(	O
flags	int
&	O
IDN2_TRANSITIONAL	int
)	O
)	O
{	O
rc	int
=	O
_idn2_label_test	function
(	O
TEST_NFC	int
|	O
TEST_2HYPHEN	int
|	O
TEST_LEADING_COMBINING	int
|	O
TEST_DISALLOWED	int
|	O
TEST_CONTEXTJ_RULE	int
|	O
TEST_CONTEXTO_WITH_RULE	int
|	O
TEST_UNASSIGNED	int
|	O
TEST_BIDI	int
|	O
(	O
(	O
flags	int
&	O
IDN2_NONTRANSITIONAL	int
)	O
?	O
TEST_NONTRANSITIONAL	int
:	O
0	int
)	O
|	O
(	O
(	O
flags	int
&	O
IDN2_USE_STD3_ASCII_RULES	int
)	O
?	O
0	int
:	O
TEST_ALLOW_STD3_DISALLOWED	int
)	O
,	O
p	pointer
,	O
plen	long
)	O
;	O
if	O
(	O
rc	int
!=	O
IDN2_OK	int
)	O
{	O
free	function
(	O
p	pointer
)	O
;	O
goto	O
out	pointer
;	O
}	O
}	O
dst	pointer
[	O
0	int
]	O
=	O
'x'	O
;	O
dst	pointer
[	O
1	int
]	O
=	O
'n'	O
;	O
dst	pointer
[	O
2	int
]	O
=	O
'-'	O
;	O
dst	pointer
[	O
3	int
]	O
=	O
'-'	O
;	O
tmpl	long
=	O
*	O
dstlen	pointer
-	O
4	int
;	O
rc	int
=	O
_idn2_punycode_encode_internal	function
(	O
plen	long
,	O
p	pointer
,	O
&	O
tmpl	long
,	O
(	O
char	O
*	O
)	O
dst	pointer
+	O
4	int
)	O
;	O
free	function
(	O
p	pointer
)	O
;	O
if	O
(	O
rc	int
!=	O
IDN2_OK	int
)	O
goto	O
out	pointer
;	O
*	O
dstlen	pointer
=	O
4	int
+	O
tmpl	long
;	O
if	O
(	O
check_roundtrip	int
)	O
{	O
if	O
(	O
srclen_org	long
!=	O
*	O
dstlen	pointer
||	O
c_strncasecmp	function
(	O
(	O
char	O
*	O
)	O
src_org	pointer
,	O
(	O
char	O
*	O
)	O
dst	pointer
,	O
srclen_org	long
)	O
)	O
{	O
rc	int
=	O
IDN2_ALABEL_ROUNDTRIP_FAILED	int
;	O
goto	O
out	pointer
;	O
}	O
}	O
rc	int
=	O
IDN2_OK	int
;	O
out	pointer
:	O
free	function
(	O
src_allocated	pointer
)	O
;	O
return	O
rc	int
;	O
}	O
static	O
int	O
_tr46	function
(	O
const	O
uint8_t	char
*	O
domain_u8	pointer
,	O
uint8_t	char
*	O
*	O
out	pointer
,	O
int	O
flags	int
)	O
{	O
size_t	long
len	long
,	O
it	long
;	O
uint32_t	int
*	O
domain_u32	pointer
;	O
int	O
err	int
=	O
IDN2_OK	int
,	O
rc	int
;	O
int	O
transitional	int
=	O
0	int
;	O
int	O
test_flags	int
;	O
if	O
(	O
flags	int
&	O
IDN2_TRANSITIONAL	int
)	O
transitional	int
=	O
1	int
;	O
if	O
(	O
!	O
(	O
domain_u32	pointer
=	O
u8_to_u32	function
(	O
domain_u8	pointer
,	O
u8_strlen	function
(	O
domain_u8	pointer
)	O
+	O
1	int
,	O
NULL	O
,	O
&	O
len	long
)	O
)	O
)	O
{	O
if	O
(	O
errno	O
==	O
ENOMEM	int
)	O
return	O
IDN2_MALLOC	int
;	O
return	O
IDN2_ENCODING_ERROR	int
;	O
}	O
size_t	long
len2	long
=	O
0	int
;	O
for	O
(	O
it	long
=	O
0	int
;	O
it	long
<	O
len	long
-	O
1	int
;	O
it	long
++	O
)	O
{	O
IDNAMap	struct
map	pointer
;	O
get_idna_map	function
(	O
domain_u32	pointer
[	O
it	long
]	O
,	O
&	O
map	pointer
)	O
;	O
if	O
(	O
map_is	function
(	O
&	O
map	pointer
,	O
TR46_FLG_DISALLOWED	int
)	O
)	O
{	O
if	O
(	O
domain_u32	pointer
[	O
it	long
]	O
)	O
{	O
free	function
(	O
domain_u32	pointer
)	O
;	O
return	O
IDN2_DISALLOWED	int
;	O
}	O
len2	long
++	O
;	O
}	O
else	O
if	O
(	O
map_is	function
(	O
&	O
map	pointer
,	O
TR46_FLG_MAPPED	int
)	O
)	O
{	O
len2	long
+=	O
map	pointer
.	O
nmappings	int
;	O
}	O
else	O
if	O
(	O
map_is	function
(	O
&	O
map	pointer
,	O
TR46_FLG_VALID	int
)	O
)	O
{	O
len2	long
++	O
;	O
}	O
else	O
if	O
(	O
map_is	function
(	O
&	O
map	pointer
,	O
TR46_FLG_IGNORED	int
)	O
)	O
{	O
continue	O
;	O
}	O
else	O
if	O
(	O
map_is	function
(	O
&	O
map	pointer
,	O
TR46_FLG_DEVIATION	int
)	O
)	O
{	O
if	O
(	O
transitional	int
)	O
{	O
len2	long
+=	O
map	pointer
.	O
nmappings	int
;	O
}	O
else	O
len2	long
++	O
;	O
}	O
else	O
if	O
(	O
!	O
(	O
flags	int
&	O
IDN2_USE_STD3_ASCII_RULES	int
)	O
)	O
{	O
if	O
(	O
map_is	function
(	O
&	O
map	pointer
,	O
TR46_FLG_DISALLOWED_STD3_VALID	int
)	O
)	O
{	O
len2	long
++	O
;	O
}	O
else	O
if	O
(	O
map_is	function
(	O
&	O
map	pointer
,	O
TR46_FLG_DISALLOWED_STD3_MAPPED	int
)	O
)	O
{	O
len2	long
+=	O
map	pointer
.	O
nmappings	int
;	O
}	O
}	O
}	O
if	O
(	O
len2	long
>=	O
IDN2_DOMAIN_MAX_LENGTH	int
)	O
{	O
free	function
(	O
domain_u32	pointer
)	O
;	O
return	O
IDN2_TOO_BIG_DOMAIN	int
;	O
}	O
uint32_t	int
*	O
tmp	pointer
=	O
(	O
uint32_t	int
*	O
)	O
malloc	function
(	O
(	O
len2	long
+	O
1	int
)	O
*	O
sizeof	O
(	O
uint32_t	int
)	O
)	O
;	O
if	O
(	O
!	O
tmp	pointer
)	O
{	O
free	function
(	O
domain_u32	pointer
)	O
;	O
return	O
IDN2_MALLOC	int
;	O
}	O
len2	long
=	O
0	int
;	O
for	O
(	O
it	long
=	O
0	int
;	O
it	long
<	O
len	long
-	O
1	int
;	O
it	long
++	O
)	O
{	O
uint32_t	int
c	char
=	O
domain_u32	pointer
[	O
it	long
]	O
;	O
IDNAMap	struct
map	pointer
;	O
get_idna_map	function
(	O
c	char
,	O
&	O
map	pointer
)	O
;	O
if	O
(	O
map_is	function
(	O
&	O
map	pointer
,	O
TR46_FLG_DISALLOWED	int
)	O
)	O
{	O
tmp	pointer
[	O
len2	long
++	O
]	O
=	O
c	char
;	O
}	O
else	O
if	O
(	O
map_is	function
(	O
&	O
map	pointer
,	O
TR46_FLG_MAPPED	int
)	O
)	O
{	O
len2	long
+=	O
get_map_data	function
(	O
tmp	pointer
+	O
len2	long
,	O
&	O
map	pointer
)	O
;	O
}	O
else	O
if	O
(	O
map_is	function
(	O
&	O
map	pointer
,	O
TR46_FLG_VALID	int
)	O
)	O
{	O
tmp	pointer
[	O
len2	long
++	O
]	O
=	O
c	char
;	O
}	O
else	O
if	O
(	O
map_is	function
(	O
&	O
map	pointer
,	O
TR46_FLG_IGNORED	int
)	O
)	O
{	O
continue	O
;	O
}	O
else	O
if	O
(	O
map_is	function
(	O
&	O
map	pointer
,	O
TR46_FLG_DEVIATION	int
)	O
)	O
{	O
if	O
(	O
transitional	int
)	O
{	O
len2	long
+=	O
get_map_data	function
(	O
tmp	pointer
+	O
len2	long
,	O
&	O
map	pointer
)	O
;	O
}	O
else	O
tmp	pointer
[	O
len2	long
++	O
]	O
=	O
c	char
;	O
}	O
else	O
if	O
(	O
!	O
(	O
flags	int
&	O
IDN2_USE_STD3_ASCII_RULES	int
)	O
)	O
{	O
if	O
(	O
map_is	function
(	O
&	O
map	pointer
,	O
TR46_FLG_DISALLOWED_STD3_VALID	int
)	O
)	O
{	O
tmp	pointer
[	O
len2	long
++	O
]	O
=	O
c	char
;	O
}	O
else	O
if	O
(	O
map_is	function
(	O
&	O
map	pointer
,	O
TR46_FLG_DISALLOWED_STD3_MAPPED	int
)	O
)	O
{	O
len2	long
+=	O
get_map_data	function
(	O
tmp	pointer
+	O
len2	long
,	O
&	O
map	pointer
)	O
;	O
}	O
}	O
}	O
free	function
(	O
domain_u32	pointer
)	O
;	O
tmp	pointer
[	O
len2	long
]	O
=	O
0	int
;	O
domain_u32	pointer
=	O
u32_normalize	function
(	O
UNINORM_NFC	O
,	O
tmp	pointer
,	O
len2	long
+	O
1	int
,	O
NULL	O
,	O
&	O
len	long
)	O
;	O
free	function
(	O
tmp	pointer
)	O
;	O
tmp	pointer
=	O
NULL	O
;	O
if	O
(	O
!	O
domain_u32	pointer
)	O
{	O
if	O
(	O
errno	O
==	O
ENOMEM	int
)	O
return	O
IDN2_MALLOC	int
;	O
return	O
IDN2_ENCODING_ERROR	int
;	O
}	O
uint32_t	int
*	O
e	pointer
,	O
*	O
s	pointer
;	O
for	O
(	O
e	pointer
=	O
s	pointer
=	O
domain_u32	pointer
;	O
*	O
e	pointer
;	O
s	pointer
=	O
e	pointer
)	O
{	O
while	O
(	O
*	O
e	pointer
&&	O
*	O
e	pointer
!=	O
'.'	O
)	O
e	pointer
++	O
;	O
if	O
(	O
e	pointer
-	O
s	pointer
>=	O
4	int
&&	O
s	pointer
[	O
0	int
]	O
==	O
'x'	O
&&	O
s	pointer
[	O
1	int
]	O
==	O
'n'	O
&&	O
s	pointer
[	O
2	int
]	O
==	O
'-'	O
&&	O
s	pointer
[	O
3	int
]	O
==	O
'-'	O
)	O
{	O
size_t	long
ace_len	long
;	O
uint32_t	int
name_u32	array
[	O
IDN2_LABEL_MAX_LENGTH	int
]	O
;	O
size_t	long
name_len	long
=	O
IDN2_LABEL_MAX_LENGTH	int
;	O
uint8_t	char
*	O
ace	pointer
;	O
ace	pointer
=	O
u32_to_u8	function
(	O
s	pointer
+	O
4	int
,	O
e	pointer
-	O
s	pointer
-	O
4	int
,	O
NULL	O
,	O
&	O
ace_len	long
)	O
;	O
if	O
(	O
!	O
ace	pointer
)	O
{	O
free	function
(	O
domain_u32	pointer
)	O
;	O
if	O
(	O
errno	O
==	O
ENOMEM	int
)	O
return	O
IDN2_MALLOC	int
;	O
return	O
IDN2_ENCODING_ERROR	int
;	O
}	O
rc	int
=	O
_idn2_punycode_decode_internal	function
(	O
ace_len	long
,	O
(	O
char	O
*	O
)	O
ace	pointer
,	O
&	O
name_len	long
,	O
name_u32	array
)	O
;	O
free	function
(	O
ace	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
free	function
(	O
domain_u32	pointer
)	O
;	O
return	O
rc	int
;	O
}	O
test_flags	int
=	O
TR46_NONTRANSITIONAL_CHECK	O
;	O
if	O
(	O
!	O
(	O
flags	int
&	O
IDN2_USE_STD3_ASCII_RULES	int
)	O
)	O
test_flags	int
|=	O
TEST_ALLOW_STD3_DISALLOWED	int
;	O
if	O
(	O
(	O
rc	int
=	O
_idn2_label_test	function
(	O
test_flags	int
,	O
name_u32	array
,	O
name_len	long
)	O
)	O
)	O
err	int
=	O
rc	int
;	O
}	O
else	O
{	O
test_flags	int
=	O
transitional	int
?	O
TR46_TRANSITIONAL_CHECK	O
:	O
TR46_NONTRANSITIONAL_CHECK	O
;	O
if	O
(	O
!	O
(	O
flags	int
&	O
IDN2_USE_STD3_ASCII_RULES	int
)	O
)	O
test_flags	int
|=	O
TEST_ALLOW_STD3_DISALLOWED	int
;	O
if	O
(	O
(	O
rc	int
=	O
_idn2_label_test	function
(	O
test_flags	int
,	O
s	pointer
,	O
e	pointer
-	O
s	pointer
)	O
)	O
)	O
err	int
=	O
rc	int
;	O
}	O
if	O
(	O
*	O
e	pointer
)	O
e	pointer
++	O
;	O
}	O
if	O
(	O
err	int
==	O
IDN2_OK	int
&&	O
out	pointer
)	O
{	O
uint8_t	char
*	O
_out	pointer
=	O
u32_to_u8	function
(	O
domain_u32	pointer
,	O
len	long
,	O
NULL	O
,	O
&	O
len	long
)	O
;	O
free	function
(	O
domain_u32	pointer
)	O
;	O
if	O
(	O
!	O
_out	pointer
)	O
{	O
if	O
(	O
errno	O
==	O
ENOMEM	int
)	O
return	O
IDN2_MALLOC	int
;	O
return	O
IDN2_ENCODING_ERROR	int
;	O
}	O
*	O
out	pointer
=	O
_out	pointer
;	O
}	O
else	O
free	function
(	O
domain_u32	pointer
)	O
;	O
return	O
err	int
;	O
}	O
int	O
idn2_lookup_u8	function
(	O
const	O
uint8_t	char
*	O
src	pointer
,	O
uint8_t	char
*	O
*	O
lookupname	pointer
,	O
int	O
flags	int
)	O
{	O
size_t	long
lookupnamelen	long
=	O
0	int
;	O
uint8_t	char
_lookupname	array
[	O
IDN2_DOMAIN_MAX_LENGTH	int
+	O
1	int
]	O
;	O
uint8_t	char
_mapped	array
[	O
IDN2_DOMAIN_MAX_LENGTH	int
+	O
1	int
]	O
;	O
int	O
rc	int
;	O
if	O
(	O
src	pointer
==	O
NULL	O
)	O
{	O
if	O
(	O
lookupname	pointer
)	O
*	O
lookupname	pointer
=	O
NULL	O
;	O
return	O
IDN2_OK	int
;	O
}	O
rc	int
=	O
set_default_flags	function
(	O
&	O
flags	int
)	O
;	O
if	O
(	O
rc	int
!=	O
IDN2_OK	int
)	O
return	O
rc	int
;	O
if	O
(	O
!	O
(	O
flags	int
&	O
IDN2_NO_TR46	int
)	O
)	O
{	O
uint8_t	char
*	O
out	pointer
;	O
size_t	long
outlen	pointer
;	O
rc	int
=	O
_tr46	function
(	O
src	pointer
,	O
&	O
out	pointer
,	O
flags	int
)	O
;	O
if	O
(	O
rc	int
!=	O
IDN2_OK	int
)	O
return	O
rc	int
;	O
outlen	pointer
=	O
u8_strlen	function
(	O
out	pointer
)	O
;	O
if	O
(	O
outlen	pointer
>=	O
sizeof	O
(	O
_mapped	array
)	O
)	O
{	O
free	function
(	O
out	pointer
)	O
;	O
return	O
IDN2_TOO_BIG_DOMAIN	int
;	O
}	O
memcpy	function
(	O
_mapped	array
,	O
out	pointer
,	O
outlen	pointer
+	O
1	int
)	O
;	O
src	pointer
=	O
_mapped	array
;	O
free	function
(	O
out	pointer
)	O
;	O
}	O
do	O
{	O
const	O
uint8_t	char
*	O
end	pointer
=	O
(	O
uint8_t	char
*	O
)	O
strchrnul	function
(	O
(	O
const	O
char	O
*	O
)	O
src	pointer
,	O
'.'	O
)	O
;	O
size_t	long
labellen	long
=	O
end	pointer
-	O
src	pointer
;	O
uint8_t	char
tmp	pointer
[	O
IDN2_LABEL_MAX_LENGTH	int
]	O
;	O
size_t	long
tmplen	long
=	O
IDN2_LABEL_MAX_LENGTH	int
;	O
rc	int
=	O
label	pointer
(	O
src	pointer
,	O
labellen	long
,	O
tmp	pointer
,	O
&	O
tmplen	long
,	O
flags	int
)	O
;	O
if	O
(	O
rc	int
!=	O
IDN2_OK	int
)	O
return	O
rc	int
;	O
if	O
(	O
lookupnamelen	long
+	O
tmplen	long
>	O
IDN2_DOMAIN_MAX_LENGTH	int
-	O
(	O
tmplen	long
==	O
0	int
&&	O
*	O
end	pointer
==	O
'\0'	O
?	O
1	int
:	O
2	int
)	O
)	O
return	O
IDN2_TOO_BIG_DOMAIN	int
;	O
memcpy	function
(	O
_lookupname	array
+	O
lookupnamelen	long
,	O
tmp	pointer
,	O
tmplen	long
)	O
;	O
lookupnamelen	long
+=	O
tmplen	long
;	O
if	O
(	O
*	O
end	pointer
==	O
'.'	O
)	O
{	O
if	O
(	O
lookupnamelen	long
+	O
1	int
>	O
IDN2_DOMAIN_MAX_LENGTH	int
)	O
return	O
IDN2_TOO_BIG_DOMAIN	int
;	O
_lookupname	array
[	O
lookupnamelen	long
]	O
=	O
'.'	O
;	O
lookupnamelen	long
++	O
;	O
}	O
_lookupname	array
[	O
lookupnamelen	long
]	O
=	O
'\0'	O
;	O
src	pointer
=	O
end	pointer
;	O
}	O
while	O
(	O
*	O
src	pointer
++	O
)	O
;	O
if	O
(	O
lookupname	pointer
)	O
{	O
uint8_t	char
*	O
tmp	pointer
=	O
(	O
uint8_t	char
*	O
)	O
malloc	function
(	O
lookupnamelen	long
+	O
1	int
)	O
;	O
if	O
(	O
tmp	pointer
==	O
NULL	O
)	O
return	O
IDN2_MALLOC	int
;	O
memcpy	function
(	O
tmp	pointer
,	O
_lookupname	array
,	O
lookupnamelen	long
+	O
1	int
)	O
;	O
*	O
lookupname	pointer
=	O
tmp	pointer
;	O
}	O
return	O
IDN2_OK	int
;	O
}	O
int	O
idn2_lookup_ul	function
(	O
const	O
char	O
*	O
src	pointer
,	O
char	O
*	O
*	O
lookupname	pointer
,	O
int	O
flags	int
)	O
{	O
uint8_t	char
*	O
utf8src	pointer
=	O
NULL	O
;	O
int	O
rc	int
;	O
if	O
(	O
src	pointer
)	O
{	O
const	O
char	O
*	O
encoding	pointer
=	O
locale_charset	function
(	O
)	O
;	O
utf8src	pointer
=	O
u8_strconv_from_encoding	function
(	O
src	pointer
,	O
encoding	pointer
,	O
iconveh_error	int
)	O
;	O
if	O
(	O
!	O
utf8src	pointer
)	O
{	O
if	O
(	O
errno	O
==	O
ENOMEM	int
)	O
return	O
IDN2_MALLOC	int
;	O
return	O
IDN2_ICONV_FAIL	int
;	O
}	O
}	O
rc	int
=	O
idn2_lookup_u8	function
(	O
utf8src	pointer
,	O
(	O
uint8_t	char
*	O
*	O
)	O
lookupname	pointer
,	O
flags	int
|	O
IDN2_NFC_INPUT	int
)	O
;	O
free	function
(	O
utf8src	pointer
)	O
;	O
return	O
rc	int
;	O
}	O
int	O
idn2_to_ascii_4i	function
(	O
const	O
uint32_t	int
*	O
input	pointer
,	O
size_t	long
inlen	long
,	O
char	O
*	O
output	pointer
,	O
int	O
flags	int
)	O
{	O
char	O
*	O
out	pointer
;	O
int	O
rc	int
;	O
if	O
(	O
!	O
input	pointer
)	O
{	O
if	O
(	O
output	pointer
)	O
*	O
output	pointer
=	O
0	int
;	O
return	O
IDN2_OK	int
;	O
}	O
rc	int
=	O
idn2_to_ascii_4i2	function
(	O
input	pointer
,	O
inlen	long
,	O
&	O
out	pointer
,	O
flags	int
)	O
;	O
if	O
(	O
rc	int
==	O
IDN2_OK	int
)	O
{	O
size_t	long
len	long
=	O
strlen	function
(	O
out	pointer
)	O
;	O
if	O
(	O
len	long
>	O
63	int
)	O
rc	int
=	O
IDN2_TOO_BIG_DOMAIN	int
;	O
else	O
if	O
(	O
output	pointer
)	O
memcpy	function
(	O
output	pointer
,	O
out	pointer
,	O
len	long
)	O
;	O
free	function
(	O
out	pointer
)	O
;	O
}	O
return	O
rc	int
;	O
}	O
int	O
idn2_to_ascii_4i2	function
(	O
const	O
uint32_t	int
*	O
input	pointer
,	O
size_t	long
inlen	long
,	O
char	O
*	O
*	O
output	pointer
,	O
int	O
flags	int
)	O
{	O
uint32_t	int
*	O
input_u32	pointer
;	O
uint8_t	char
*	O
input_u8	pointer
,	O
*	O
output_u8	pointer
;	O
size_t	long
length	long
;	O
int	O
rc	int
;	O
if	O
(	O
!	O
input	pointer
)	O
{	O
if	O
(	O
output	pointer
)	O
*	O
output	pointer
=	O
NULL	O
;	O
return	O
IDN2_OK	int
;	O
}	O
input_u32	pointer
=	O
(	O
uint32_t	int
*	O
)	O
malloc	function
(	O
(	O
inlen	long
+	O
1	int
)	O
*	O
sizeof	O
(	O
uint32_t	int
)	O
)	O
;	O
if	O
(	O
!	O
input_u32	pointer
)	O
return	O
IDN2_MALLOC	int
;	O
u32_cpy	function
(	O
input_u32	pointer
,	O
input	pointer
,	O
inlen	long
)	O
;	O
input_u32	pointer
[	O
inlen	long
]	O
=	O
0	int
;	O
input_u8	pointer
=	O
u32_to_u8	function
(	O
input_u32	pointer
,	O
inlen	long
+	O
1	int
,	O
NULL	O
,	O
&	O
length	long
)	O
;	O
free	function
(	O
input_u32	pointer
)	O
;	O
if	O
(	O
!	O
input_u8	pointer
)	O
{	O
if	O
(	O
errno	O
==	O
ENOMEM	int
)	O
return	O
IDN2_MALLOC	int
;	O
return	O
IDN2_ENCODING_ERROR	int
;	O
}	O
rc	int
=	O
idn2_lookup_u8	function
(	O
input_u8	pointer
,	O
&	O
output_u8	pointer
,	O
flags	int
)	O
;	O
free	function
(	O
input_u8	pointer
)	O
;	O
if	O
(	O
rc	int
==	O
IDN2_OK	int
)	O
{	O
if	O
(	O
output	pointer
)	O
*	O
output	pointer
=	O
(	O
char	O
*	O
)	O
output_u8	pointer
;	O
else	O
free	function
(	O
output_u8	pointer
)	O
;	O
}	O
return	O
rc	int
;	O
}	O
int	O
idn2_to_ascii_4z	function
(	O
const	O
uint32_t	int
*	O
input	pointer
,	O
char	O
*	O
*	O
output	pointer
,	O
int	O
flags	int
)	O
{	O
uint8_t	char
*	O
input_u8	pointer
;	O
size_t	long
length	long
;	O
int	O
rc	int
;	O
if	O
(	O
!	O
input	pointer
)	O
{	O
if	O
(	O
output	pointer
)	O
*	O
output	pointer
=	O
NULL	O
;	O
return	O
IDN2_OK	int
;	O
}	O
input_u8	pointer
=	O
u32_to_u8	function
(	O
input	pointer
,	O
u32_strlen	function
(	O
input	pointer
)	O
+	O
1	int
,	O
NULL	O
,	O
&	O
length	long
)	O
;	O
if	O
(	O
!	O
input_u8	pointer
)	O
{	O
if	O
(	O
errno	O
==	O
ENOMEM	int
)	O
return	O
IDN2_MALLOC	int
;	O
return	O
IDN2_ENCODING_ERROR	int
;	O
}	O
rc	int
=	O
idn2_lookup_u8	function
(	O
input_u8	pointer
,	O
(	O
uint8_t	char
*	O
*	O
)	O
output	pointer
,	O
flags	int
)	O
;	O
free	function
(	O
input_u8	pointer
)	O
;	O
return	O
rc	int
;	O
}	O
int	O
idn2_to_ascii_8z	function
(	O
const	O
char	O
*	O
input	pointer
,	O
char	O
*	O
*	O
output	pointer
,	O
int	O
flags	int
)	O
{	O
return	O
idn2_lookup_u8	function
(	O
(	O
const	O
uint8_t	char
*	O
)	O
input	pointer
,	O
(	O
uint8_t	char
*	O
*	O
)	O
output	pointer
,	O
flags	int
)	O
;	O
}	O
int	O
idn2_to_ascii_lz	function
(	O
const	O
char	O
*	O
input	pointer
,	O
char	O
*	O
*	O
output	pointer
,	O
int	O
flags	int
)	O
{	O
return	O
idn2_lookup_ul	function
(	O
input	pointer
,	O
output	pointer
,	O
flags	int
)	O
;	O
}	O
