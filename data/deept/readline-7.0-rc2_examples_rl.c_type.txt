extern	O
int	O
optind	int
;	O
extern	O
char	O
*	O
optarg	pointer
;	O
static	O
char	O
*	O
progname	pointer
;	O
static	O
char	O
*	O
deftext	pointer
;	O
static	O
int	O
set_deftext	function
(	O
)	O
{	O
if	O
(	O
deftext	pointer
)	O
{	O
rl_insert_text	function
(	O
deftext	pointer
)	O
;	O
deftext	pointer
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
rl_startup_hook	pointer
=	O
(	O
rl_hook_func_t	function
*	O
)	O
NULL	O
;	O
}	O
return	O
0	int
;	O
}	O
static	O
void	O
usage	function
(	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: usage: %s [-p prompt] [-u unit] [-d default] [-n nchars]\n"	pointer
,	O
progname	pointer
,	O
progname	pointer
)	O
;	O
}	O
int	O
main	function
(	O
argc	int
,	O
argv	pointer
)	O
int	O
argc	int
;	O
char	O
*	O
*	O
argv	pointer
;	O
{	O
char	O
*	O
temp	pointer
,	O
*	O
prompt	pointer
;	O
struct	O
stat	struct
sb	struct
;	O
int	O
opt	int
,	O
fd	int
,	O
nch	int
;	O
FILE	struct
*	O
ifp	pointer
;	O
progname	pointer
=	O
strrchr	function
(	O
argv	pointer
[	O
0	int
]	O
,	O
'/'	O
)	O
;	O
if	O
(	O
progname	pointer
==	O
0	int
)	O
progname	pointer
=	O
argv	pointer
[	O
0	int
]	O
;	O
else	O
progname	pointer
++	O
;	O
prompt	pointer
=	O
"readline$ "	pointer
;	O
fd	int
=	O
nch	int
=	O
0	int
;	O
deftext	pointer
=	O
(	O
char	O
*	O
)	O
0	int
;	O
while	O
(	O
(	O
opt	int
=	O
getopt	function
(	O
argc	int
,	O
argv	pointer
,	O
"p:u:d:n:"	pointer
)	O
)	O
!=	O
EOF	O
)	O
{	O
switch	O
(	O
opt	int
)	O
{	O
case	O
'p'	O
:	O
prompt	pointer
=	O
optarg	pointer
;	O
break	O
;	O
case	O
'u'	O
:	O
fd	int
=	O
atoi	function
(	O
optarg	pointer
)	O
;	O
if	O
(	O
fd	int
<	O
0	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: bad file descriptor `%s'\n"	pointer
,	O
progname	pointer
,	O
optarg	pointer
)	O
;	O
exit	function
(	O
2	int
)	O
;	O
}	O
break	O
;	O
case	O
'd'	O
:	O
deftext	pointer
=	O
optarg	pointer
;	O
break	O
;	O
case	O
'n'	O
:	O
nch	int
=	O
atoi	function
(	O
optarg	pointer
)	O
;	O
if	O
(	O
nch	int
<	O
0	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: bad value for -n: `%s'\n"	pointer
,	O
progname	pointer
,	O
optarg	pointer
)	O
;	O
exit	function
(	O
2	int
)	O
;	O
}	O
break	O
;	O
default	O
:	O
usage	function
(	O
)	O
;	O
exit	function
(	O
2	int
)	O
;	O
}	O
}	O
if	O
(	O
fd	int
!=	O
0	int
)	O
{	O
if	O
(	O
fstat	function
(	O
fd	int
,	O
&	O
sb	struct
)	O
<	O
0	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: %d: bad file descriptor\n"	pointer
,	O
progname	pointer
,	O
fd	int
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
ifp	pointer
=	O
fdopen	function
(	O
fd	int
,	O
"r"	pointer
)	O
;	O
rl_instream	pointer
=	O
ifp	pointer
;	O
}	O
if	O
(	O
deftext	pointer
&&	O
*	O
deftext	pointer
)	O
rl_startup_hook	pointer
=	O
set_deftext	function
;	O
if	O
(	O
nch	int
>	O
0	int
)	O
rl_num_chars_to_read	int
=	O
nch	int
;	O
temp	pointer
=	O
readline	function
(	O
prompt	pointer
)	O
;	O
if	O
(	O
temp	pointer
==	O
0	int
)	O
exit	function
(	O
1	int
)	O
;	O
printf	function
(	O
"%s\n"	pointer
,	O
temp	pointer
)	O
;	O
exit	function
(	O
0	int
)	O
;	O
}	O
