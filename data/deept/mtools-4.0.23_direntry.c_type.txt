void	O
initializeDirentry	function
(	O
direntry_t	struct
*	O
entry	int
,	O
Stream_t	struct
*	O
Dir	pointer
)	O
{	O
memset	function
(	O
entry	int
,	O
0	int
,	O
sizeof	O
(	O
direntry_t	struct
)	O
)	O
;	O
entry	int
->	O
entry	int
=	O
-	O
1	int
;	O
entry	int
->	O
Dir	pointer
=	O
Dir	pointer
;	O
entry	int
->	O
beginSlot	int
=	O
0	int
;	O
entry	int
->	O
endSlot	int
=	O
0	int
;	O
}	O
int	O
isNotFound	function
(	O
direntry_t	struct
*	O
entry	int
)	O
{	O
return	O
entry	int
->	O
entry	int
==	O
-	O
2	int
;	O
}	O
direntry_t	struct
*	O
getParent	function
(	O
direntry_t	struct
*	O
entry	int
)	O
{	O
return	O
getDirentry	function
(	O
entry	int
->	O
Dir	pointer
)	O
;	O
}	O
static	O
size_t	long
getPathLen	function
(	O
direntry_t	struct
*	O
entry	int
)	O
{	O
size_t	long
length	int
=	O
0	int
;	O
while	O
(	O
1	int
)	O
{	O
if	O
(	O
entry	int
->	O
entry	int
==	O
-	O
3	int
)	O
return	O
length	int
+	O
3	int
;	O
length	int
+=	O
1	int
+	O
wcslen	function
(	O
entry	int
->	O
name	pointer
)	O
;	O
entry	int
=	O
getDirentry	function
(	O
entry	int
->	O
Dir	pointer
)	O
;	O
}	O
}	O
static	O
char	O
*	O
sprintPwd	function
(	O
direntry_t	struct
*	O
entry	int
,	O
char	O
*	O
ptr	pointer
,	O
size_t	long
*	O
len_available	pointer
)	O
{	O
if	O
(	O
entry	int
->	O
entry	int
==	O
-	O
3	int
)	O
{	O
*	O
ptr	pointer
++	O
=	O
getDrive	function
(	O
entry	int
->	O
Dir	pointer
)	O
;	O
*	O
ptr	pointer
++	O
=	O
':'	O
;	O
*	O
ptr	pointer
++	O
=	O
'/'	O
;	O
(	O
*	O
len_available	pointer
)	O
-=	O
3	int
;	O
}	O
else	O
{	O
size_t	long
bytes_converted	long
;	O
ptr	pointer
=	O
sprintPwd	function
(	O
getDirentry	function
(	O
entry	int
->	O
Dir	pointer
)	O
,	O
ptr	pointer
,	O
len_available	pointer
)	O
;	O
if	O
(	O
ptr	pointer
[	O
-	O
1	int
]	O
!=	O
'/'	O
)	O
{	O
*	O
ptr	pointer
++	O
=	O
'/'	O
;	O
(	O
*	O
len_available	pointer
)	O
--	O
;	O
}	O
bytes_converted	long
=	O
wchar_to_native	function
(	O
entry	int
->	O
name	pointer
,	O
ptr	pointer
,	O
MAX_VNAMELEN	O
,	O
*	O
len_available	pointer
)	O
;	O
ptr	pointer
+=	O
bytes_converted	long
;	O
(	O
*	O
len_available	pointer
)	O
-=	O
bytes_converted	long
;	O
}	O
return	O
ptr	pointer
;	O
}	O
static	O
void	O
_fprintPwd	function
(	O
FILE	struct
*	O
f	pointer
,	O
direntry_t	struct
*	O
entry	int
,	O
int	O
recurs	int
,	O
int	O
escape	int
)	O
{	O
if	O
(	O
entry	int
->	O
entry	int
==	O
-	O
3	int
)	O
{	O
putc	function
(	O
getDrive	function
(	O
entry	int
->	O
Dir	pointer
)	O
,	O
f	pointer
)	O
;	O
putc	function
(	O
':'	O
,	O
f	pointer
)	O
;	O
if	O
(	O
!	O
recurs	int
)	O
putc	function
(	O
'/'	O
,	O
f	pointer
)	O
;	O
}	O
else	O
{	O
_fprintPwd	function
(	O
f	pointer
,	O
getDirentry	function
(	O
entry	int
->	O
Dir	pointer
)	O
,	O
1	int
,	O
escape	int
)	O
;	O
if	O
(	O
escape	int
&&	O
wcspbrk	function
(	O
entry	int
->	O
name	pointer
,	O
NEED_ESCAPE	O
)	O
)	O
{	O
wchar_t	int
*	O
ptr	pointer
;	O
putc	function
(	O
'/'	O
,	O
f	pointer
)	O
;	O
for	O
(	O
ptr	pointer
=	O
entry	int
->	O
name	pointer
;	O
*	O
ptr	pointer
;	O
ptr	pointer
++	O
)	O
{	O
if	O
(	O
wcschr	function
(	O
NEED_ESCAPE	O
,	O
*	O
ptr	pointer
)	O
)	O
putc	function
(	O
'\\'	O
,	O
f	pointer
)	O
;	O
putwc	function
(	O
*	O
ptr	pointer
,	O
f	pointer
)	O
;	O
}	O
}	O
else	O
{	O
char	O
tmp	array
[	O
4	int
*	O
MAX_VNAMELEN	O
+	O
1	int
]	O
;	O
WCHAR_TO_NATIVE	O
(	O
entry	int
->	O
name	pointer
,	O
tmp	array
,	O
MAX_VNAMELEN	O
)	O
;	O
fprintf	function
(	O
f	pointer
,	O
"/%s"	pointer
,	O
tmp	array
)	O
;	O
}	O
}	O
}	O
void	O
fprintPwd	function
(	O
FILE	struct
*	O
f	pointer
,	O
direntry_t	struct
*	O
entry	int
,	O
int	O
escape	int
)	O
{	O
if	O
(	O
escape	int
)	O
putc	function
(	O
'"'	O
,	O
f	pointer
)	O
;	O
_fprintPwd	function
(	O
f	pointer
,	O
entry	int
,	O
0	int
,	O
escape	int
)	O
;	O
if	O
(	O
escape	int
)	O
putc	function
(	O
'"'	O
,	O
f	pointer
)	O
;	O
}	O
static	O
void	O
_fprintShortPwd	function
(	O
FILE	struct
*	O
f	pointer
,	O
direntry_t	struct
*	O
entry	int
,	O
int	O
recurs	int
)	O
{	O
if	O
(	O
entry	int
->	O
entry	int
==	O
-	O
3	int
)	O
{	O
putc	function
(	O
getDrive	function
(	O
entry	int
->	O
Dir	pointer
)	O
,	O
f	pointer
)	O
;	O
putc	function
(	O
':'	O
,	O
f	pointer
)	O
;	O
if	O
(	O
!	O
recurs	int
)	O
putc	function
(	O
'/'	O
,	O
f	pointer
)	O
;	O
}	O
else	O
{	O
int	O
i	int
,	O
j	int
;	O
_fprintShortPwd	function
(	O
f	pointer
,	O
getDirentry	function
(	O
entry	int
->	O
Dir	pointer
)	O
,	O
1	int
)	O
;	O
putc	function
(	O
'/'	O
,	O
f	pointer
)	O
;	O
for	O
(	O
i	int
=	O
7	int
;	O
i	int
>=	O
0	int
&&	O
entry	int
->	O
dir	pointer
.	O
name	pointer
[	O
i	int
]	O
==	O
' '	O
;	O
i	int
--	O
)	O
;	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<=	O
i	int
;	O
j	int
++	O
)	O
putc	function
(	O
entry	int
->	O
dir	pointer
.	O
name	pointer
[	O
j	int
]	O
,	O
f	pointer
)	O
;	O
for	O
(	O
i	int
=	O
2	int
;	O
i	int
>=	O
0	int
&&	O
entry	int
->	O
dir	pointer
.	O
ext	array
[	O
i	int
]	O
==	O
' '	O
;	O
i	int
--	O
)	O
;	O
if	O
(	O
i	int
>	O
0	int
)	O
putc	function
(	O
'.'	O
,	O
f	pointer
)	O
;	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<=	O
i	int
;	O
j	int
++	O
)	O
putc	function
(	O
entry	int
->	O
dir	pointer
.	O
ext	array
[	O
j	int
]	O
,	O
f	pointer
)	O
;	O
}	O
}	O
void	O
fprintShortPwd	function
(	O
FILE	struct
*	O
f	pointer
,	O
direntry_t	struct
*	O
entry	int
)	O
{	O
_fprintShortPwd	function
(	O
f	pointer
,	O
entry	int
,	O
0	int
)	O
;	O
}	O
char	O
*	O
getPwd	function
(	O
direntry_t	struct
*	O
entry	int
)	O
{	O
size_t	long
size	array
;	O
char	O
*	O
ret	pointer
;	O
char	O
*	O
end	pointer
;	O
size_t	long
buf_size	long
;	O
size	array
=	O
getPathLen	function
(	O
entry	int
)	O
;	O
buf_size	long
=	O
size	array
*	O
4	int
+	O
1	int
;	O
ret	pointer
=	O
malloc	function
(	O
buf_size	long
)	O
;	O
if	O
(	O
!	O
ret	pointer
)	O
return	O
0	int
;	O
end	pointer
=	O
sprintPwd	function
(	O
entry	int
,	O
ret	pointer
,	O
&	O
buf_size	long
)	O
;	O
*	O
end	pointer
=	O
'\0'	O
;	O
return	O
ret	pointer
;	O
}	O
int	O
isSubdirOf	function
(	O
Stream_t	struct
*	O
inside	pointer
,	O
Stream_t	struct
*	O
outside	pointer
)	O
{	O
while	O
(	O
1	int
)	O
{	O
if	O
(	O
inside	pointer
==	O
outside	pointer
)	O
return	O
1	int
;	O
if	O
(	O
getDirentry	function
(	O
inside	pointer
)	O
->	O
entry	int
==	O
-	O
3	int
)	O
return	O
0	int
;	O
inside	pointer
=	O
getDirentry	function
(	O
inside	pointer
)	O
->	O
Dir	pointer
;	O
}	O
}	O
