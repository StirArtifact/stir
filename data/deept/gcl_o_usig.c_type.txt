extern	O
char	O
signals_handled	array
[	O
]	O
;	O
void	O
gcl_signal	function
(	O
int	O
signo	int
,	O
void	O
(	O
*	O
handler	pointer
)	O
(	O
)	O
)	O
{	O
char	O
*	O
p	pointer
=	O
signals_handled	array
;	O
while	O
(	O
*	O
p	pointer
)	O
{	O
if	O
(	O
*	O
p	pointer
==	O
signo	int
)	O
{	O
our_signal_handler	O
[	O
signo	int
]	O
=	O
handler	pointer
;	O
handler	pointer
=	O
main_signal_handler	O
;	O
break	O
;	O
}	O
p	pointer
++	O
;	O
}	O
{	O
signal	function
(	O
signo	int
,	O
handler	pointer
)	O
;	O
}	O
}	O
int	O
unblock_signals	function
(	O
int	O
n	int
,	O
int	O
m	int
)	O
{	O
int	O
result	int
=	O
0	int
;	O
int	O
current_mask	int
;	O
current_mask	int
=	O
sigblock	function
(	O
0	int
)	O
;	O
sigsetmask	function
(	O
~	O
(	O
sigmask	function
(	O
m	int
)	O
)	O
&	O
~	O
(	O
sigmask	function
(	O
n	int
)	O
)	O
&	O
current_mask	int
)	O
;	O
result	int
=	O
(	O
current_mask	int
&	O
sigmask	function
(	O
m	int
)	O
?	O
signal_mask	function
(	O
m	int
)	O
:	O
0	int
)	O
|	O
(	O
current_mask	int
&	O
sigmask	function
(	O
n	int
)	O
?	O
signal_mask	function
(	O
n	int
)	O
:	O
0	int
)	O
;	O
return	O
result	int
;	O
}	O
void	O
unblock_sigusr_sigio	function
(	O
void	O
)	O
{	O
int	O
current_mask	int
=	O
sigblock	function
(	O
0	int
)	O
;	O
return	O
sigsetmask	function
(	O
~	O
(	O
sigmask	function
(	O
SIGIO	O
)	O
)	O
&	O
~	O
(	O
sigmask	function
(	O
SIGUSR1	O
)	O
)	O
&	O
current_mask	int
)	O
;	O
}	O
DEFCONST	function
(	O
"+MC-CONTEXT-OFFSETS+"	pointer
,	O
sSPmc_context_offsetsP	O
,	O
SI	O
,	O
FPE_INIT	O
,	O
""	pointer
)	O
;	O
DEFUN_NEW	function
(	O
"FLD"	pointer
,	O
object	O
,	O
fSfld	O
,	O
SI	O
,	O
1	int
,	O
1	int
,	O
NONE	O
,	O
OI	O
,	O
OO	O
,	O
OO	O
,	O
OO	O
,	O
(	O
fixnum	O
val	O
)	O
,	O
""	pointer
)	O
{	O
volatile	O
double	O
d	double
;	O
ASM	O
(	O
"fldt %1;fstpl %0"	pointer
:	O
"=m"	pointer
(	O
d	double
)	O
:	O
"m"	pointer
(	O
*	O
(	O
char	O
*	O
)	O
val	O
)	O
)	O
;	O
RETURN1	function
(	O
make_longfloat	function
(	O
d	double
)	O
)	O
;	O
}	O
DEFUN_NEW	function
(	O
"*FIXNUM"	pointer
,	O
fixnum	O
,	O
fSAfixnum	O
,	O
SI	O
,	O
1	int
,	O
1	int
,	O
NONE	O
,	O
II	O
,	O
OO	O
,	O
OO	O
,	O
OO	O
,	O
(	O
fixnum	O
addr	O
)	O
,	O
""	pointer
)	O
{	O
RETURN1	function
(	O
*	O
(	O
fixnum	O
*	O
)	O
addr	O
)	O
;	O
}	O
DEFUN_NEW	function
(	O
"*FLOAT"	pointer
,	O
object	O
,	O
fSAfloat	O
,	O
SI	O
,	O
1	int
,	O
1	int
,	O
NONE	O
,	O
OI	O
,	O
OO	O
,	O
OO	O
,	O
OO	O
,	O
(	O
fixnum	O
addr	O
)	O
,	O
""	pointer
)	O
{	O
RETURN1	function
(	O
make_shortfloat	function
(	O
*	O
(	O
float	O
*	O
)	O
addr	O
)	O
)	O
;	O
}	O
DEFUN_NEW	function
(	O
"*DOUBLE"	pointer
,	O
object	O
,	O
fSAdouble	O
,	O
SI	O
,	O
1	int
,	O
1	int
,	O
NONE	O
,	O
OI	O
,	O
OO	O
,	O
OO	O
,	O
OO	O
,	O
(	O
fixnum	O
addr	O
)	O
,	O
""	pointer
)	O
{	O
RETURN1	function
(	O
make_longfloat	function
(	O
*	O
(	O
double	O
*	O
)	O
addr	O
)	O
)	O
;	O
}	O
DEFUN_NEW	function
(	O
"FEENABLEEXCEPT"	pointer
,	O
fixnum	O
,	O
fSfeenableexcept	O
,	O
SI	O
,	O
1	int
,	O
1	int
,	O
NONE	O
,	O
II	O
,	O
OO	O
,	O
OO	O
,	O
OO	O
,	O
(	O
fixnum	O
x	O
)	O
,	O
""	pointer
)	O
{	O
{	O
volatile	O
unsigned	O
short	O
s	short
=	O
0	int
;	O
volatile	O
unsigned	O
int	O
i	int
;	O
ASM	O
(	O
"fnstcw %0"	pointer
:	O
:	O
"m"	pointer
(	O
s	short
)	O
)	O
;	O
s	short
=	O
(	O
s	short
|	O
FE_ALL_EXCEPT	O
)	O
&	O
(	O
~	O
x	O
)	O
;	O
ASM	O
(	O
"fldcw %0"	pointer
:	O
"=m"	pointer
(	O
s	short
)	O
)	O
;	O
ASM	O
(	O
"stmxcsr %0"	pointer
:	O
:	O
"m"	pointer
(	O
i	int
)	O
)	O
;	O
i	int
=	O
(	O
i	int
|	O
(	O
FE_ALL_EXCEPT	O
<<	O
7	int
)	O
)	O
&	O
(	O
~	O
(	O
x	O
<<	O
7	int
)	O
)	O
;	O
ASM	O
(	O
"ldmxcsr %0"	pointer
:	O
"=m"	pointer
(	O
i	int
)	O
)	O
;	O
}	O
RETURN1	function
(	O
x	O
)	O
;	O
}	O
DEFUN_NEW	function
(	O
"FEDISABLEEXCEPT"	pointer
,	O
fixnum	O
,	O
fSfedisableexcept	O
,	O
SI	O
,	O
0	int
,	O
0	int
,	O
NONE	O
,	O
IO	O
,	O
OO	O
,	O
OO	O
,	O
OO	O
,	O
(	O
void	O
)	O
,	O
""	pointer
)	O
{	O
fixnum	O
x	O
;	O
{	O
volatile	O
unsigned	O
int	O
i	int
=	O
0	int
;	O
ASM	O
(	O
"fnclex"	pointer
)	O
;	O
ASM	O
(	O
"stmxcsr %0"	pointer
:	O
:	O
"m"	pointer
(	O
i	int
)	O
)	O
;	O
i	int
=	O
(	O
i	int
|	O
(	O
FE_ALL_EXCEPT	O
<<	O
7	int
)	O
)	O
;	O
ASM	O
(	O
"ldmxcsr %0"	pointer
:	O
"=m"	pointer
(	O
i	int
)	O
)	O
;	O
x	O
=	O
0	int
;	O
}	O
RETURN1	function
(	O
x	O
)	O
;	O
}	O
DEFUN_NEW	function
(	O
"FPE_CODE"	pointer
,	O
fixnum	O
,	O
fSfpe_code	O
,	O
SI	O
,	O
2	int
,	O
2	int
,	O
NONE	O
,	O
II	O
,	O
OO	O
,	O
OO	O
,	O
OO	O
,	O
(	O
fixnum	O
x87sw	O
,	O
fixnum	O
mxcsr	O
)	O
,	O
""	pointer
)	O
{	O
RETURN1	function
(	O
FE_TEST	O
(	O
x87sw	O
,	O
mxcsr	O
,	O
FE_INVALID	int
)	O
?	O
FPE_FLTINV	O
:	O
(	O
FE_TEST	O
(	O
x87sw	O
,	O
mxcsr	O
,	O
FE_DIVBYZERO	int
)	O
?	O
FPE_FLTDIV	O
:	O
(	O
FE_TEST	O
(	O
x87sw	O
,	O
mxcsr	O
,	O
FE_OVERFLOW	int
)	O
?	O
FPE_FLTOVF	O
:	O
(	O
FE_TEST	O
(	O
x87sw	O
,	O
mxcsr	O
,	O
FE_UNDERFLOW	int
)	O
?	O
FPE_FLTUND	O
:	O
(	O
FE_TEST	O
(	O
x87sw	O
,	O
mxcsr	O
,	O
FE_INEXACT	int
)	O
?	O
FPE_FLTRES	O
:	O
0	int
)	O
)	O
)	O
)	O
)	O
;	O
}	O
static	O
void	O
sigfpe3	function
(	O
int	O
sig	int
,	O
void	O
*	O
i	int
,	O
void	O
*	O
v	pointer
)	O
{	O
unblock_signals	function
(	O
SIGFPE	O
,	O
SIGFPE	O
)	O
;	O
ifuncall3	function
(	O
sSfloating_point_error	O
,	O
FPE_CODE	function
(	O
i	int
,	O
v	pointer
)	O
,	O
FPE_ADDR	function
(	O
i	int
,	O
v	pointer
)	O
,	O
FPE_CTXT	function
(	O
v	pointer
)	O
)	O
;	O
}	O
DEFCONST	function
(	O
"+FE-LIST+"	pointer
,	O
sSPfe_listP	O
,	O
SI	O
,	O
list	O
(	O
5	int
,	O
list	O
(	O
3	int
,	O
sLdivision_by_zero	O
,	O
make_fixnum	O
(	O
FPE_FLTDIV	O
)	O
,	O
make_fixnum	O
(	O
FE_DIVBYZERO	int
)	O
)	O
,	O
list	O
(	O
3	int
,	O
sLfloating_point_overflow	O
,	O
make_fixnum	O
(	O
FPE_FLTOVF	O
)	O
,	O
make_fixnum	O
(	O
FE_OVERFLOW	int
)	O
)	O
,	O
list	O
(	O
3	int
,	O
sLfloating_point_underflow	O
,	O
make_fixnum	O
(	O
FPE_FLTUND	O
)	O
,	O
make_fixnum	O
(	O
FE_UNDERFLOW	int
)	O
)	O
,	O
list	O
(	O
3	int
,	O
sLfloating_point_inexact	O
,	O
make_fixnum	O
(	O
FPE_FLTRES	O
)	O
,	O
make_fixnum	O
(	O
FE_INEXACT	int
)	O
)	O
,	O
list	O
(	O
3	int
,	O
sLfloating_point_invalid_operation	O
,	O
make_fixnum	O
(	O
FPE_FLTINV	O
)	O
,	O
make_fixnum	O
(	O
FE_INVALID	int
)	O
)	O
)	O
,	O
""	pointer
)	O
;	O
DEF_ORDINARY	function
(	O
"FLOATING-POINT-ERROR"	pointer
,	O
sSfloating_point_error	O
,	O
SI	O
,	O
""	pointer
)	O
;	O
static	O
void	O
sigpipe	function
(	O
void	O
)	O
{	O
gcl_signal	function
(	O
SIGPIPE	O
,	O
sigpipe	function
)	O
;	O
perror	function
(	O
""	pointer
)	O
;	O
FEerror	function
(	O
"Broken pipe"	pointer
,	O
0	int
)	O
;	O
}	O
void	O
sigint	function
(	O
void	O
)	O
{	O
unblock_signals	function
(	O
SIGINT	O
,	O
SIGINT	O
)	O
;	O
terminal_interrupt	function
(	O
1	int
)	O
;	O
}	O
static	O
void	O
sigalrm	function
(	O
void	O
)	O
{	O
unblock_signals	function
(	O
SIGALRM	O
,	O
SIGALRM	O
)	O
;	O
raise_pending_signals	function
(	O
sig_try_to_delay	O
)	O
;	O
}	O
DEFVAR	function
(	O
"*INTERRUPT-ENABLE*"	pointer
,	O
sSAinterrupt_enableA	O
,	O
SI	O
,	O
sLt	O
,	O
""	pointer
)	O
;	O
DEF_ORDINARY	function
(	O
"SIGUSR1-INTERRUPT"	pointer
,	O
sSsigusr1_interrupt	O
,	O
SI	O
,	O
""	pointer
)	O
;	O
DEF_ORDINARY	function
(	O
"SIGIO-INTERRUPT"	pointer
,	O
sSsigio_interrupt	O
,	O
SI	O
,	O
""	pointer
)	O
;	O
static	O
void	O
sigusr1	function
(	O
void	O
)	O
{	O
ifuncall1	function
(	O
sSsigusr1_interrupt	O
,	O
Cnil	O
)	O
;	O
}	O
static	O
void	O
sigio	function
(	O
void	O
)	O
{	O
ifuncall1	function
(	O
sSsigio_interrupt	O
,	O
Cnil	O
)	O
;	O
}	O
void	O
install_default_signals	function
(	O
void	O
)	O
{	O
gcl_signal	function
(	O
SIGFPE	O
,	O
sigfpe3	function
)	O
;	O
gcl_signal	function
(	O
SIGPIPE	O
,	O
sigpipe	function
)	O
;	O
gcl_signal	function
(	O
SIGINT	O
,	O
sigint	function
)	O
;	O
gcl_signal	function
(	O
SIGUSR1	O
,	O
sigusr1	function
)	O
;	O
gcl_signal	function
(	O
SIGIO	O
,	O
sigio	function
)	O
;	O
gcl_signal	function
(	O
SIGALRM	O
,	O
sigalrm	function
)	O
;	O
signals_allowed	O
=	O
sig_normal	O
;	O
}	O
