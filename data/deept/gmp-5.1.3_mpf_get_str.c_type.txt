static	O
mp_size_t	long
mpn_pow_1_highpart	function
(	O
mp_ptr	pointer
rp	pointer
,	O
mp_size_t	long
*	O
ignp	pointer
,	O
mp_limb_t	long
base	int
,	O
unsigned	O
long	O
exp	int
,	O
mp_size_t	long
prec	int
,	O
mp_ptr	pointer
tp	pointer
)	O
{	O
mp_size_t	long
ign	long
;	O
mp_size_t	long
off	long
;	O
mp_ptr	pointer
passed_rp	pointer
=	O
rp	pointer
;	O
mp_size_t	long
rn	long
;	O
int	O
cnt	int
;	O
int	O
i	long
;	O
if	O
(	O
exp	int
==	O
0	int
)	O
{	O
rp	pointer
[	O
0	int
]	O
=	O
1	int
;	O
*	O
ignp	pointer
=	O
0	int
;	O
return	O
1	int
;	O
}	O
rp	pointer
[	O
0	int
]	O
=	O
base	int
;	O
rn	long
=	O
1	int
;	O
off	long
=	O
0	int
;	O
ign	long
=	O
0	int
;	O
count_leading_zeros	O
(	O
cnt	int
,	O
exp	int
)	O
;	O
for	O
(	O
i	long
=	O
GMP_LIMB_BITS	int
-	O
cnt	int
-	O
2	int
;	O
i	long
>=	O
0	int
;	O
i	long
--	O
)	O
{	O
mpn_sqr	O
(	O
tp	pointer
,	O
rp	pointer
+	O
off	long
,	O
rn	long
)	O
;	O
rn	long
=	O
2	int
*	O
rn	long
;	O
rn	long
-=	O
tp	pointer
[	O
rn	long
-	O
1	int
]	O
==	O
0	int
;	O
ign	long
<<=	O
1	int
;	O
off	long
=	O
0	int
;	O
if	O
(	O
rn	long
>	O
prec	int
)	O
{	O
ign	long
+=	O
rn	long
-	O
prec	int
;	O
off	long
=	O
rn	long
-	O
prec	int
;	O
rn	long
=	O
prec	int
;	O
}	O
MP_PTR_SWAP	O
(	O
rp	pointer
,	O
tp	pointer
)	O
;	O
if	O
(	O
(	O
(	O
exp	int
>>	O
i	long
)	O
&	O
1	int
)	O
!=	O
0	int
)	O
{	O
mp_limb_t	long
cy	long
;	O
cy	long
=	O
mpn_mul_1	O
(	O
rp	pointer
,	O
rp	pointer
+	O
off	long
,	O
rn	long
,	O
base	int
)	O
;	O
rp	pointer
[	O
rn	long
]	O
=	O
cy	long
;	O
rn	long
+=	O
cy	long
!=	O
0	int
;	O
off	long
=	O
0	int
;	O
}	O
}	O
if	O
(	O
rn	long
>	O
prec	int
)	O
{	O
ASSERT	O
(	O
rn	long
==	O
prec	int
+	O
1	int
)	O
;	O
ign	long
+=	O
rn	long
-	O
prec	int
;	O
rp	pointer
+=	O
rn	long
-	O
prec	int
;	O
rn	long
=	O
prec	int
;	O
}	O
if	O
(	O
passed_rp	pointer
!=	O
rp	pointer
+	O
off	long
)	O
MPN_COPY_INCR	O
(	O
passed_rp	pointer
,	O
rp	pointer
+	O
off	long
,	O
rn	long
)	O
;	O
*	O
ignp	pointer
=	O
ign	long
;	O
return	O
rn	long
;	O
}	O
char	O
*	O
mpf_get_str	O
(	O
char	O
*	O
dbuf	pointer
,	O
mp_exp_t	long
*	O
exp	int
,	O
int	O
base	int
,	O
size_t	long
n_digits	long
,	O
mpf_srcptr	pointer
u	array
)	O
{	O
mp_exp_t	long
ue	long
;	O
mp_size_t	long
n_limbs_needed	long
;	O
size_t	long
max_digits	long
;	O
mp_ptr	pointer
up	pointer
,	O
pp	pointer
,	O
tp	pointer
;	O
mp_size_t	long
un	long
,	O
pn	long
,	O
tn	long
;	O
unsigned	O
char	O
*	O
tstr	pointer
;	O
mp_exp_t	long
exp_in_base	long
;	O
size_t	long
n_digits_computed	long
;	O
mp_size_t	long
i	long
;	O
const	O
char	O
*	O
num_to_text	pointer
;	O
size_t	long
alloc_size	long
=	O
0	int
;	O
char	O
*	O
dp	pointer
;	O
TMP_DECL	O
;	O
up	pointer
=	O
PTR	O
(	O
u	array
)	O
;	O
un	long
=	O
ABSIZ	O
(	O
u	array
)	O
;	O
ue	long
=	O
EXP	O
(	O
u	array
)	O
;	O
if	O
(	O
base	int
>=	O
0	int
)	O
{	O
num_to_text	pointer
=	O
"0123456789abcdefghijklmnopqrstuvwxyz"	pointer
;	O
if	O
(	O
base	int
<=	O
1	int
)	O
base	int
=	O
10	int
;	O
else	O
if	O
(	O
base	int
>	O
36	int
)	O
{	O
num_to_text	pointer
=	O
"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"	pointer
;	O
if	O
(	O
base	int
>	O
62	int
)	O
return	O
NULL	O
;	O
}	O
}	O
else	O
{	O
base	int
=	O
-	O
base	int
;	O
if	O
(	O
base	int
<=	O
1	int
)	O
base	int
=	O
10	int
;	O
else	O
if	O
(	O
base	int
>	O
36	int
)	O
return	O
NULL	O
;	O
num_to_text	pointer
=	O
"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"	pointer
;	O
}	O
MPF_SIGNIFICANT_DIGITS	O
(	O
max_digits	long
,	O
base	int
,	O
PREC	O
(	O
u	array
)	O
)	O
;	O
if	O
(	O
n_digits	long
==	O
0	int
||	O
n_digits	long
>	O
max_digits	long
)	O
n_digits	long
=	O
max_digits	long
;	O
if	O
(	O
dbuf	pointer
==	O
0	int
)	O
{	O
alloc_size	long
=	O
n_digits	long
+	O
2	int
;	O
dbuf	pointer
=	O
(	O
char	O
*	O
)	O
(	O
*	O
__gmp_allocate_func	pointer
)	O
(	O
n_digits	long
+	O
2	int
)	O
;	O
}	O
if	O
(	O
un	long
==	O
0	int
)	O
{	O
*	O
exp	int
=	O
0	int
;	O
*	O
dbuf	pointer
=	O
0	int
;	O
n_digits	long
=	O
0	int
;	O
goto	O
done	O
;	O
}	O
TMP_MARK	O
;	O
tstr	pointer
=	O
(	O
unsigned	O
char	O
*	O
)	O
TMP_ALLOC	O
(	O
n_digits	long
+	O
2	int
*	O
GMP_LIMB_BITS	int
+	O
3	int
)	O
;	O
LIMBS_PER_DIGIT_IN_BASE	O
(	O
n_limbs_needed	long
,	O
n_digits	long
,	O
base	int
)	O
;	O
if	O
(	O
ue	long
<=	O
n_limbs_needed	long
)	O
{	O
mp_size_t	long
n_more_limbs_needed	long
,	O
ign	long
,	O
off	long
;	O
unsigned	O
long	O
e	long
;	O
n_more_limbs_needed	long
=	O
n_limbs_needed	long
-	O
ue	long
;	O
DIGITS_IN_BASE_PER_LIMB	O
(	O
e	long
,	O
n_more_limbs_needed	long
,	O
base	int
)	O
;	O
if	O
(	O
un	long
>	O
n_limbs_needed	long
)	O
{	O
up	pointer
+=	O
un	long
-	O
n_limbs_needed	long
;	O
un	long
=	O
n_limbs_needed	long
;	O
}	O
pp	pointer
=	O
TMP_ALLOC_LIMBS	O
(	O
2	int
*	O
n_limbs_needed	long
+	O
2	int
)	O
;	O
tp	pointer
=	O
TMP_ALLOC_LIMBS	O
(	O
2	int
*	O
n_limbs_needed	long
+	O
2	int
)	O
;	O
pn	long
=	O
mpn_pow_1_highpart	function
(	O
pp	pointer
,	O
&	O
ign	long
,	O
(	O
mp_limb_t	long
)	O
base	int
,	O
e	long
,	O
n_limbs_needed	long
,	O
tp	pointer
)	O
;	O
if	O
(	O
un	long
>	O
pn	long
)	O
mpn_mul	O
(	O
tp	pointer
,	O
up	pointer
,	O
un	long
,	O
pp	pointer
,	O
pn	long
)	O
;	O
else	O
mpn_mul	O
(	O
tp	pointer
,	O
pp	pointer
,	O
pn	long
,	O
up	pointer
,	O
un	long
)	O
;	O
tn	long
=	O
un	long
+	O
pn	long
;	O
tn	long
-=	O
tp	pointer
[	O
tn	long
-	O
1	int
]	O
==	O
0	int
;	O
off	long
=	O
un	long
-	O
ue	long
-	O
ign	long
;	O
if	O
(	O
off	long
<	O
0	int
)	O
{	O
MPN_COPY_DECR	O
(	O
tp	pointer
-	O
off	long
,	O
tp	pointer
,	O
tn	long
)	O
;	O
MPN_ZERO	O
(	O
tp	pointer
,	O
-	O
off	long
)	O
;	O
tn	long
-=	O
off	long
;	O
off	long
=	O
0	int
;	O
}	O
n_digits_computed	long
=	O
mpn_get_str	O
(	O
tstr	pointer
,	O
base	int
,	O
tp	pointer
+	O
off	long
,	O
tn	long
-	O
off	long
)	O
;	O
exp_in_base	long
=	O
n_digits_computed	long
-	O
e	long
;	O
}	O
else	O
{	O
mp_size_t	long
n_less_limbs_needed	long
,	O
ign	long
,	O
off	long
,	O
xn	long
;	O
unsigned	O
long	O
e	long
;	O
mp_ptr	pointer
dummyp	pointer
,	O
xp	pointer
;	O
n_less_limbs_needed	long
=	O
ue	long
-	O
n_limbs_needed	long
;	O
DIGITS_IN_BASE_PER_LIMB	O
(	O
e	long
,	O
n_less_limbs_needed	long
,	O
base	int
)	O
;	O
if	O
(	O
un	long
>	O
n_limbs_needed	long
)	O
{	O
up	pointer
+=	O
un	long
-	O
n_limbs_needed	long
;	O
un	long
=	O
n_limbs_needed	long
;	O
}	O
pp	pointer
=	O
TMP_ALLOC_LIMBS	O
(	O
2	int
*	O
n_limbs_needed	long
+	O
2	int
)	O
;	O
tp	pointer
=	O
TMP_ALLOC_LIMBS	O
(	O
2	int
*	O
n_limbs_needed	long
+	O
2	int
)	O
;	O
pn	long
=	O
mpn_pow_1_highpart	function
(	O
pp	pointer
,	O
&	O
ign	long
,	O
(	O
mp_limb_t	long
)	O
base	int
,	O
e	long
,	O
n_limbs_needed	long
,	O
tp	pointer
)	O
;	O
xn	long
=	O
n_limbs_needed	long
+	O
(	O
n_less_limbs_needed	long
-	O
ign	long
)	O
;	O
xp	pointer
=	O
TMP_ALLOC_LIMBS	O
(	O
xn	long
)	O
;	O
off	long
=	O
xn	long
-	O
un	long
;	O
MPN_ZERO	O
(	O
xp	pointer
,	O
off	long
)	O
;	O
MPN_COPY	O
(	O
xp	pointer
+	O
off	long
,	O
up	pointer
,	O
un	long
)	O
;	O
dummyp	pointer
=	O
TMP_ALLOC_LIMBS	O
(	O
pn	long
)	O
;	O
mpn_tdiv_qr	O
(	O
tp	pointer
,	O
dummyp	pointer
,	O
(	O
mp_size_t	long
)	O
0	int
,	O
xp	pointer
,	O
xn	long
,	O
pp	pointer
,	O
pn	long
)	O
;	O
tn	long
=	O
xn	long
-	O
pn	long
+	O
1	int
;	O
tn	long
-=	O
tp	pointer
[	O
tn	long
-	O
1	int
]	O
==	O
0	int
;	O
n_digits_computed	long
=	O
mpn_get_str	O
(	O
tstr	pointer
,	O
base	int
,	O
tp	pointer
,	O
tn	long
)	O
;	O
exp_in_base	long
=	O
n_digits_computed	long
+	O
e	long
;	O
}	O
if	O
(	O
n_digits_computed	long
>	O
n_digits	long
)	O
{	O
size_t	long
i	long
;	O
if	O
(	O
tstr	pointer
[	O
n_digits	long
]	O
*	O
2	int
>=	O
base	int
)	O
{	O
n_digits_computed	long
=	O
n_digits	long
;	O
for	O
(	O
i	long
=	O
n_digits	long
-	O
1	int
;	O
;	O
i	long
--	O
)	O
{	O
unsigned	O
int	O
x	int
;	O
x	int
=	O
++	O
(	O
tstr	pointer
[	O
i	long
]	O
)	O
;	O
if	O
(	O
x	int
!=	O
base	int
)	O
break	O
;	O
n_digits_computed	long
--	O
;	O
if	O
(	O
i	long
==	O
0	int
)	O
{	O
tstr	pointer
[	O
0	int
]	O
=	O
1	int
;	O
n_digits_computed	long
=	O
1	int
;	O
exp_in_base	long
++	O
;	O
break	O
;	O
}	O
}	O
}	O
}	O
if	O
(	O
n_digits	long
>	O
n_digits_computed	long
)	O
n_digits	long
=	O
n_digits_computed	long
;	O
while	O
(	O
n_digits	long
!=	O
0	int
&&	O
tstr	pointer
[	O
n_digits	long
-	O
1	int
]	O
==	O
0	int
)	O
n_digits	long
--	O
;	O
dp	pointer
=	O
dbuf	pointer
+	O
(	O
SIZ	O
(	O
u	array
)	O
<	O
0	int
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
n_digits	long
;	O
i	long
++	O
)	O
dp	pointer
[	O
i	long
]	O
=	O
num_to_text	pointer
[	O
tstr	pointer
[	O
i	long
]	O
]	O
;	O
dp	pointer
[	O
n_digits	long
]	O
=	O
0	int
;	O
*	O
exp	int
=	O
exp_in_base	long
;	O
if	O
(	O
SIZ	O
(	O
u	array
)	O
<	O
0	int
)	O
{	O
dbuf	pointer
[	O
0	int
]	O
=	O
'-'	O
;	O
n_digits	long
++	O
;	O
}	O
TMP_FREE	O
;	O
done	O
:	O
if	O
(	O
alloc_size	long
!=	O
0	int
)	O
{	O
__GMP_REALLOCATE_FUNC_MAYBE_TYPE	O
(	O
dbuf	pointer
,	O
alloc_size	long
,	O
n_digits	long
+	O
1	int
,	O
char	O
)	O
;	O
}	O
return	O
dbuf	pointer
;	O
}	O
