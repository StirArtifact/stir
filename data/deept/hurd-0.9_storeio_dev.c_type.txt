static	O
inline	O
int	O
dev_buf_is_active	function
(	O
struct	O
dev	pointer
*	O
dev	pointer
)	O
{	O
return	O
dev	pointer
->	O
buf_offs	long
>=	O
0	int
;	O
}	O
static	O
error_t	function
dev_buf_discard	function
(	O
struct	O
dev	pointer
*	O
dev	pointer
)	O
{	O
if	O
(	O
dev_buf_is_active	function
(	O
dev	pointer
)	O
)	O
{	O
if	O
(	O
dev	pointer
->	O
buf_dirty	O
)	O
{	O
size_t	long
amount	long
;	O
struct	O
store	pointer
*	O
store	pointer
=	O
dev	pointer
->	O
store	pointer
;	O
error_t	function
err	O
=	O
store_write	O
(	O
store	pointer
,	O
dev	pointer
->	O
buf_offs	long
>>	O
store	pointer
->	O
log2_block_size	O
,	O
dev	pointer
->	O
buf	pointer
,	O
store	pointer
->	O
block_size	long
,	O
&	O
amount	long
)	O
;	O
if	O
(	O
!	O
err	O
&&	O
amount	long
<	O
store	pointer
->	O
block_size	long
)	O
err	O
=	O
EIO	O
;	O
if	O
(	O
err	O
)	O
return	O
err	O
;	O
dev	pointer
->	O
buf_dirty	O
=	O
0	int
;	O
}	O
dev	pointer
->	O
buf_offs	long
=	O
-	O
1	int
;	O
}	O
return	O
0	int
;	O
}	O
static	O
error_t	function
dev_buf_fill	function
(	O
struct	O
dev	pointer
*	O
dev	pointer
,	O
off_t	O
offs	int
)	O
{	O
error_t	function
err	O
;	O
unsigned	O
block_mask	int
=	O
dev	pointer
->	O
block_mask	int
;	O
void	O
*	O
buf	pointer
=	O
dev	pointer
->	O
buf	pointer
;	O
struct	O
store	pointer
*	O
store	pointer
=	O
dev	pointer
->	O
store	pointer
;	O
size_t	long
buf_len	long
=	O
store	pointer
->	O
block_size	long
;	O
if	O
(	O
dev_buf_is_active	function
(	O
dev	pointer
)	O
)	O
{	O
if	O
(	O
(	O
dev	pointer
->	O
buf_offs	long
&	O
~	O
block_mask	int
)	O
==	O
(	O
offs	int
&	O
~	O
block_mask	int
)	O
)	O
return	O
0	int
;	O
else	O
{	O
err	O
=	O
dev_buf_discard	function
(	O
dev	pointer
)	O
;	O
if	O
(	O
err	O
)	O
return	O
err	O
;	O
}	O
}	O
err	O
=	O
store_read	function
(	O
store	pointer
,	O
offs	int
>>	O
store	pointer
->	O
log2_block_size	O
,	O
store	pointer
->	O
block_size	long
,	O
&	O
buf	pointer
,	O
&	O
buf_len	long
)	O
;	O
if	O
(	O
err	O
)	O
return	O
err	O
;	O
if	O
(	O
buf	pointer
!=	O
dev	pointer
->	O
buf	pointer
)	O
{	O
munmap	function
(	O
dev	pointer
->	O
buf	pointer
,	O
store	pointer
->	O
block_size	long
)	O
;	O
dev	pointer
->	O
buf	pointer
=	O
buf	pointer
;	O
}	O
dev	pointer
->	O
buf_offs	long
=	O
offs	int
&	O
~	O
block_mask	int
;	O
return	O
0	int
;	O
}	O
static	O
error_t	function
dev_buf_rw	function
(	O
struct	O
dev	pointer
*	O
dev	pointer
,	O
size_t	long
buf_offs	long
,	O
size_t	long
*	O
io_offs	pointer
,	O
size_t	long
*	O
len	pointer
,	O
error_t	function
(	O
*	O
const	O
buf_rw	pointer
)	O
(	O
size_t	long
buf_offs	long
,	O
size_t	long
io_offs	pointer
,	O
size_t	long
len	pointer
)	O
)	O
{	O
size_t	long
block_size	long
=	O
dev	pointer
->	O
store	pointer
->	O
block_size	long
;	O
assert	O
(	O
dev_buf_is_active	function
(	O
dev	pointer
)	O
)	O
;	O
if	O
(	O
buf_offs	long
+	O
*	O
len	pointer
>=	O
block_size	long
)	O
{	O
size_t	long
buf_len	long
=	O
block_size	long
-	O
buf_offs	long
;	O
error_t	function
err	O
=	O
(	O
*	O
buf_rw	pointer
)	O
(	O
buf_offs	long
,	O
*	O
io_offs	pointer
,	O
buf_len	long
)	O
;	O
if	O
(	O
err	O
)	O
return	O
err	O
;	O
*	O
io_offs	pointer
+=	O
buf_len	long
;	O
*	O
len	pointer
-=	O
buf_len	long
;	O
return	O
dev_buf_discard	function
(	O
dev	pointer
)	O
;	O
}	O
else	O
{	O
error_t	function
err	O
=	O
(	O
*	O
buf_rw	pointer
)	O
(	O
buf_offs	long
,	O
*	O
io_offs	pointer
,	O
*	O
len	pointer
)	O
;	O
if	O
(	O
err	O
)	O
return	O
err	O
;	O
*	O
io_offs	pointer
+=	O
*	O
len	pointer
;	O
*	O
len	pointer
=	O
0	int
;	O
return	O
0	int
;	O
}	O
}	O
error_t	function
dev_open	function
(	O
struct	O
dev	pointer
*	O
dev	pointer
)	O
{	O
error_t	function
err	O
;	O
const	O
int	O
flags	int
=	O
(	O
(	O
dev	pointer
->	O
readonly	O
?	O
STORE_READONLY	O
:	O
0	int
)	O
|	O
(	O
dev	pointer
->	O
no_fileio	O
?	O
STORE_NO_FILEIO	O
:	O
0	int
)	O
)	O
;	O
assert	O
(	O
dev	pointer
->	O
store	pointer
==	O
0	int
)	O
;	O
if	O
(	O
dev	pointer
->	O
store_name	O
==	O
0	int
)	O
{	O
err	O
=	O
store_create	function
(	O
storeio_fsys	O
->	O
underlying	O
,	O
flags	int
,	O
0	int
,	O
&	O
dev	pointer
->	O
store	pointer
)	O
;	O
}	O
else	O
err	O
=	O
store_parsed_open	function
(	O
dev	pointer
->	O
store_name	O
,	O
flags	int
,	O
&	O
dev	pointer
->	O
store	pointer
)	O
;	O
if	O
(	O
err	O
)	O
return	O
err	O
;	O
store_set_flags	function
(	O
dev	pointer
->	O
store	pointer
,	O
STORE_INACTIVE	O
)	O
;	O
dev	pointer
->	O
buf	pointer
=	O
mmap	function
(	O
0	int
,	O
dev	pointer
->	O
store	pointer
->	O
block_size	long
,	O
PROT_READ	O
|	O
PROT_WRITE	O
,	O
MAP_ANON	O
,	O
0	int
,	O
0	int
)	O
;	O
if	O
(	O
dev	pointer
->	O
buf	pointer
==	O
MAP_FAILED	O
)	O
{	O
store_free	function
(	O
dev	pointer
->	O
store	pointer
)	O
;	O
dev	pointer
->	O
store	pointer
=	O
0	int
;	O
return	O
ENOMEM	O
;	O
}	O
if	O
(	O
!	O
dev	pointer
->	O
inhibit_cache	O
)	O
{	O
dev	pointer
->	O
buf_offs	long
=	O
-	O
1	int
;	O
pthread_rwlock_init	function
(	O
&	O
dev	pointer
->	O
io_lock	O
,	O
NULL	O
)	O
;	O
dev	pointer
->	O
block_mask	int
=	O
(	O
1	int
<<	O
dev	pointer
->	O
store	pointer
->	O
log2_block_size	O
)	O
-	O
1	int
;	O
dev	pointer
->	O
pager	O
=	O
0	int
;	O
pthread_mutex_init	function
(	O
&	O
dev	pointer
->	O
pager_lock	O
,	O
NULL	O
)	O
;	O
}	O
return	O
0	int
;	O
}	O
void	O
dev_close	function
(	O
struct	O
dev	pointer
*	O
dev	pointer
)	O
{	O
assert	O
(	O
dev	pointer
->	O
store	pointer
)	O
;	O
if	O
(	O
!	O
dev	pointer
->	O
inhibit_cache	O
)	O
{	O
if	O
(	O
dev	pointer
->	O
pager	O
!=	O
NULL	O
)	O
pager_shutdown	function
(	O
dev	pointer
->	O
pager	O
)	O
;	O
dev_buf_discard	function
(	O
dev	pointer
)	O
;	O
munmap	function
(	O
dev	pointer
->	O
buf	pointer
,	O
dev	pointer
->	O
store	pointer
->	O
block_size	long
)	O
;	O
}	O
store_free	function
(	O
dev	pointer
->	O
store	pointer
)	O
;	O
dev	pointer
->	O
store	pointer
=	O
0	int
;	O
}	O
error_t	function
dev_sync	function
(	O
struct	O
dev	pointer
*	O
dev	pointer
,	O
int	O
wait	int
)	O
{	O
error_t	function
err	O
;	O
if	O
(	O
dev	pointer
->	O
inhibit_cache	O
)	O
return	O
0	int
;	O
if	O
(	O
dev	pointer
->	O
pager	O
!=	O
NULL	O
)	O
pager_sync	function
(	O
dev	pointer
->	O
pager	O
,	O
wait	int
)	O
;	O
pthread_rwlock_wrlock	function
(	O
&	O
dev	pointer
->	O
io_lock	O
)	O
;	O
err	O
=	O
dev_buf_discard	function
(	O
dev	pointer
)	O
;	O
pthread_rwlock_unlock	function
(	O
&	O
dev	pointer
->	O
io_lock	O
)	O
;	O
return	O
err	O
;	O
}	O
static	O
inline	O
error_t	function
buffered_rw	function
(	O
struct	O
dev	pointer
*	O
dev	pointer
,	O
off_t	O
offs	int
,	O
size_t	long
len	pointer
,	O
size_t	long
*	O
amount	long
,	O
error_t	function
(	O
*	O
const	O
buf_rw	pointer
)	O
(	O
size_t	long
buf_offs	long
,	O
size_t	long
io_offs	pointer
,	O
size_t	long
len	pointer
)	O
,	O
error_t	function
(	O
*	O
const	O
raw_rw	pointer
)	O
(	O
off_t	O
offs	int
,	O
size_t	long
io_offs	pointer
,	O
size_t	long
len	pointer
,	O
size_t	long
*	O
amount	long
)	O
)	O
{	O
error_t	function
err	O
=	O
0	int
;	O
unsigned	O
block_mask	int
=	O
dev	pointer
->	O
block_mask	int
;	O
unsigned	O
block_size	long
=	O
dev	pointer
->	O
store	pointer
->	O
block_size	long
;	O
size_t	long
io_offs	pointer
=	O
0	int
;	O
unsigned	O
block_offs	int
=	O
offs	int
&	O
block_mask	int
;	O
pthread_rwlock_wrlock	function
(	O
&	O
dev	pointer
->	O
io_lock	O
)	O
;	O
if	O
(	O
block_offs	int
!=	O
0	int
)	O
{	O
err	O
=	O
dev_buf_fill	function
(	O
dev	pointer
,	O
offs	int
)	O
;	O
if	O
(	O
!	O
err	O
)	O
err	O
=	O
dev_buf_rw	function
(	O
dev	pointer
,	O
block_offs	int
,	O
&	O
io_offs	pointer
,	O
&	O
len	pointer
,	O
buf_rw	pointer
)	O
;	O
}	O
if	O
(	O
!	O
err	O
&&	O
len	pointer
>	O
0	int
)	O
{	O
if	O
(	O
len	pointer
>=	O
block_size	long
)	O
{	O
size_t	long
amount	long
;	O
err	O
=	O
dev_buf_discard	function
(	O
dev	pointer
)	O
;	O
if	O
(	O
!	O
err	O
)	O
err	O
=	O
(	O
*	O
raw_rw	pointer
)	O
(	O
offs	int
+	O
io_offs	pointer
,	O
io_offs	pointer
,	O
len	pointer
&	O
~	O
block_mask	int
,	O
&	O
amount	long
)	O
;	O
if	O
(	O
!	O
err	O
)	O
{	O
io_offs	pointer
+=	O
amount	long
;	O
len	pointer
-=	O
amount	long
;	O
}	O
}	O
if	O
(	O
len	pointer
>	O
0	int
&&	O
len	pointer
<	O
block_size	long
)	O
{	O
err	O
=	O
dev_buf_fill	function
(	O
dev	pointer
,	O
offs	int
+	O
io_offs	pointer
)	O
;	O
if	O
(	O
!	O
err	O
)	O
err	O
=	O
dev_buf_rw	function
(	O
dev	pointer
,	O
0	int
,	O
&	O
io_offs	pointer
,	O
&	O
len	pointer
,	O
buf_rw	pointer
)	O
;	O
}	O
}	O
if	O
(	O
!	O
err	O
)	O
*	O
amount	long
=	O
io_offs	pointer
;	O
pthread_rwlock_unlock	function
(	O
&	O
dev	pointer
->	O
io_lock	O
)	O
;	O
return	O
err	O
;	O
}	O
static	O
inline	O
error_t	function
dev_rw	function
(	O
struct	O
dev	pointer
*	O
dev	pointer
,	O
off_t	O
offs	int
,	O
size_t	long
len	pointer
,	O
size_t	long
*	O
amount	long
,	O
error_t	function
(	O
*	O
const	O
buf_rw	pointer
)	O
(	O
size_t	long
buf_offs	long
,	O
size_t	long
io_offs	pointer
,	O
size_t	long
len	pointer
)	O
,	O
error_t	function
(	O
*	O
const	O
raw_rw	pointer
)	O
(	O
off_t	O
offs	int
,	O
size_t	long
io_offs	pointer
,	O
size_t	long
len	pointer
,	O
size_t	long
*	O
amount	long
)	O
)	O
{	O
error_t	function
err	O
;	O
unsigned	O
block_mask	int
=	O
dev	pointer
->	O
block_mask	int
;	O
if	O
(	O
offs	int
<	O
0	int
||	O
offs	int
>	O
dev	pointer
->	O
store	pointer
->	O
size	O
)	O
return	O
EINVAL	O
;	O
else	O
if	O
(	O
offs	int
+	O
len	pointer
>	O
dev	pointer
->	O
store	pointer
->	O
size	O
)	O
len	pointer
=	O
dev	pointer
->	O
store	pointer
->	O
size	O
-	O
offs	int
;	O
pthread_rwlock_rdlock	function
(	O
&	O
dev	pointer
->	O
io_lock	O
)	O
;	O
if	O
(	O
dev_buf_is_active	function
(	O
dev	pointer
)	O
||	O
(	O
offs	int
&	O
block_mask	int
)	O
!=	O
0	int
||	O
(	O
len	pointer
&	O
block_mask	int
)	O
!=	O
0	int
)	O
{	O
pthread_rwlock_unlock	function
(	O
&	O
dev	pointer
->	O
io_lock	O
)	O
;	O
err	O
=	O
buffered_rw	function
(	O
dev	pointer
,	O
offs	int
,	O
len	pointer
,	O
amount	long
,	O
buf_rw	pointer
,	O
raw_rw	pointer
)	O
;	O
}	O
else	O
{	O
err	O
=	O
(	O
*	O
raw_rw	pointer
)	O
(	O
offs	int
,	O
0	int
,	O
len	pointer
,	O
amount	long
)	O
;	O
pthread_rwlock_unlock	function
(	O
&	O
dev	pointer
->	O
io_lock	O
)	O
;	O
}	O
return	O
err	O
;	O
}	O
error_t	function
dev_write	function
(	O
struct	O
dev	pointer
*	O
dev	pointer
,	O
off_t	O
offs	int
,	O
void	O
*	O
buf	pointer
,	O
size_t	long
len	pointer
,	O
size_t	long
*	O
amount	long
)	O
{	O
error_t	function
buf_write	O
(	O
size_t	long
buf_offs	long
,	O
size_t	long
io_offs	pointer
,	O
size_t	long
len	pointer
)	O
{	O
memcpy	function
(	O
dev	pointer
->	O
buf	pointer
+	O
buf_offs	long
,	O
buf	pointer
+	O
io_offs	pointer
,	O
len	pointer
)	O
;	O
dev	pointer
->	O
buf_dirty	O
=	O
1	int
;	O
return	O
0	int
;	O
}	O
error_t	function
raw_write	O
(	O
off_t	O
offs	int
,	O
size_t	long
io_offs	pointer
,	O
size_t	long
len	pointer
,	O
size_t	long
*	O
amount	long
)	O
{	O
struct	O
store	pointer
*	O
store	pointer
=	O
dev	pointer
->	O
store	pointer
;	O
return	O
store_write	O
(	O
store	pointer
,	O
offs	int
>>	O
store	pointer
->	O
log2_block_size	O
,	O
buf	pointer
+	O
io_offs	pointer
,	O
len	pointer
,	O
amount	long
)	O
;	O
}	O
if	O
(	O
dev	pointer
->	O
inhibit_cache	O
)	O
{	O
struct	O
store	pointer
*	O
store	pointer
=	O
dev	pointer
->	O
store	pointer
;	O
if	O
(	O
store	pointer
->	O
block_size	long
==	O
0	int
)	O
return	O
store_write	O
(	O
dev	pointer
->	O
store	pointer
,	O
offs	int
,	O
buf	pointer
,	O
len	pointer
,	O
amount	long
)	O
;	O
if	O
(	O
(	O
offs	int
&	O
(	O
store	pointer
->	O
block_size	long
-	O
1	int
)	O
)	O
!=	O
0	int
||	O
(	O
len	pointer
&	O
(	O
store	pointer
->	O
block_size	long
-	O
1	int
)	O
)	O
!=	O
0	int
)	O
return	O
EINVAL	O
;	O
return	O
store_write	O
(	O
dev	pointer
->	O
store	pointer
,	O
offs	int
<<	O
store	pointer
->	O
log2_block_size	O
,	O
buf	pointer
,	O
len	pointer
,	O
amount	long
)	O
;	O
}	O
return	O
dev_rw	function
(	O
dev	pointer
,	O
offs	int
,	O
len	pointer
,	O
amount	long
,	O
buf_write	O
,	O
raw_write	O
)	O
;	O
}	O
error_t	function
dev_read	function
(	O
struct	O
dev	pointer
*	O
dev	pointer
,	O
off_t	O
offs	int
,	O
size_t	long
whole_amount	long
,	O
void	O
*	O
*	O
buf	pointer
,	O
size_t	long
*	O
len	pointer
)	O
{	O
error_t	function
err	O
;	O
int	O
allocated_buf	int
=	O
0	int
;	O
error_t	function
ensure_buf	O
(	O
)	O
{	O
if	O
(	O
*	O
len	pointer
<	O
whole_amount	long
)	O
{	O
void	O
*	O
new	O
=	O
mmap	function
(	O
0	int
,	O
whole_amount	long
,	O
PROT_READ	O
|	O
PROT_WRITE	O
,	O
MAP_ANON	O
,	O
0	int
,	O
0	int
)	O
;	O
if	O
(	O
new	O
==	O
(	O
void	O
*	O
)	O
-	O
1	int
)	O
return	O
errno	O
;	O
*	O
buf	pointer
=	O
new	O
;	O
allocated_buf	int
=	O
1	int
;	O
}	O
return	O
0	int
;	O
}	O
error_t	function
buf_read	O
(	O
size_t	long
buf_offs	long
,	O
size_t	long
io_offs	pointer
,	O
size_t	long
len	pointer
)	O
{	O
error_t	function
err	O
=	O
ensure_buf	O
(	O
)	O
;	O
if	O
(	O
!	O
err	O
)	O
memcpy	function
(	O
*	O
buf	pointer
+	O
io_offs	pointer
,	O
dev	pointer
->	O
buf	pointer
+	O
buf_offs	long
,	O
len	pointer
)	O
;	O
return	O
err	O
;	O
}	O
error_t	function
raw_read	O
(	O
off_t	O
offs	int
,	O
size_t	long
io_offs	pointer
,	O
size_t	long
len	pointer
,	O
size_t	long
*	O
amount	long
)	O
{	O
struct	O
store	pointer
*	O
store	pointer
=	O
dev	pointer
->	O
store	pointer
;	O
off_t	O
addr	O
=	O
offs	int
>>	O
store	pointer
->	O
log2_block_size	O
;	O
if	O
(	O
len	pointer
==	O
whole_amount	long
)	O
return	O
store_read	function
(	O
store	pointer
,	O
addr	O
,	O
len	pointer
,	O
buf	pointer
,	O
amount	long
)	O
;	O
else	O
{	O
error_t	function
err	O
=	O
ensure_buf	O
(	O
)	O
;	O
if	O
(	O
!	O
err	O
)	O
{	O
void	O
*	O
_req_buf	O
=	O
*	O
buf	pointer
+	O
io_offs	pointer
,	O
*	O
req_buf	O
=	O
_req_buf	O
;	O
size_t	long
req_len	O
=	O
len	pointer
;	O
err	O
=	O
store_read	function
(	O
store	pointer
,	O
addr	O
,	O
len	pointer
,	O
&	O
req_buf	O
,	O
&	O
req_len	O
)	O
;	O
if	O
(	O
!	O
err	O
)	O
{	O
if	O
(	O
req_buf	O
!=	O
_req_buf	O
)	O
{	O
memcpy	function
(	O
_req_buf	O
,	O
req_buf	O
,	O
req_len	O
)	O
;	O
munmap	function
(	O
req_buf	O
,	O
req_len	O
)	O
;	O
}	O
*	O
amount	long
=	O
req_len	O
;	O
}	O
}	O
return	O
err	O
;	O
}	O
}	O
if	O
(	O
dev	pointer
->	O
store	pointer
->	O
size	O
>	O
0	int
&&	O
offs	int
==	O
dev	pointer
->	O
store	pointer
->	O
size	O
)	O
{	O
*	O
len	pointer
=	O
0	int
;	O
return	O
0	int
;	O
}	O
if	O
(	O
dev	pointer
->	O
inhibit_cache	O
)	O
{	O
struct	O
store	pointer
*	O
store	pointer
=	O
dev	pointer
->	O
store	pointer
;	O
if	O
(	O
store	pointer
->	O
block_size	long
==	O
0	int
)	O
return	O
store_read	function
(	O
dev	pointer
->	O
store	pointer
,	O
offs	int
,	O
whole_amount	long
,	O
buf	pointer
,	O
len	pointer
)	O
;	O
if	O
(	O
(	O
offs	int
&	O
(	O
store	pointer
->	O
block_size	long
-	O
1	int
)	O
)	O
!=	O
0	int
||	O
(	O
whole_amount	long
&	O
(	O
store	pointer
->	O
block_size	long
-	O
1	int
)	O
)	O
!=	O
0	int
)	O
return	O
EINVAL	O
;	O
return	O
store_read	function
(	O
dev	pointer
->	O
store	pointer
,	O
offs	int
<<	O
store	pointer
->	O
log2_block_size	O
,	O
whole_amount	long
,	O
buf	pointer
,	O
len	pointer
)	O
;	O
}	O
err	O
=	O
dev_rw	function
(	O
dev	pointer
,	O
offs	int
,	O
whole_amount	long
,	O
len	pointer
,	O
buf_read	O
,	O
raw_read	O
)	O
;	O
if	O
(	O
err	O
&&	O
allocated_buf	int
)	O
munmap	function
(	O
*	O
buf	pointer
,	O
whole_amount	long
)	O
;	O
return	O
err	O
;	O
}	O
