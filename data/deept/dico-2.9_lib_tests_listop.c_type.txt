void	O
usage	function
(	O
int	O
code	int
)	O
{	O
printf	function
(	O
"usage: listop..]\n"	pointer
)	O
;	O
exit	function
(	O
code	int
)	O
;	O
}	O
dico_iterator_t	pointer
list_iterator	function
(	O
void	O
*	O
object	pointer
)	O
{	O
return	O
dico_list_iterator	function
(	O
object	pointer
)	O
;	O
}	O
void	O
print_item	pointer
(	O
void	O
*	O
item	pointer
)	O
{	O
printf	function
(	O
"%s"	pointer
,	O
(	O
char	O
*	O
)	O
item	pointer
)	O
;	O
}	O
void	O
delete	function
(	O
void	O
*	O
object	pointer
,	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
dico_list_t	pointer
list	array
=	O
object	pointer
;	O
while	O
(	O
--	O
argc	int
)	O
{	O
if	O
(	O
dico_list_remove	function
(	O
list	array
,	O
*	O
++	O
argv	pointer
,	O
NULL	O
)	O
)	O
dico_log	function
(	O
L_ERR	int
,	O
errno	O
,	O
"dico_list_remove(%s)"	pointer
,	O
*	O
argv	pointer
)	O
;	O
}	O
}	O
void	O
add	function
(	O
void	O
*	O
object	pointer
,	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
dico_list_t	pointer
list	array
=	O
object	pointer
;	O
while	O
(	O
--	O
argc	int
)	O
{	O
if	O
(	O
dico_list_append	function
(	O
list	array
,	O
strdup	function
(	O
*	O
++	O
argv	pointer
)	O
)	O
)	O
dico_log	function
(	O
L_ERR	int
,	O
errno	O
,	O
"dico_list_append"	pointer
)	O
;	O
}	O
}	O
void	O
prep	function
(	O
void	O
*	O
object	pointer
,	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
dico_list_t	pointer
list	array
=	O
object	pointer
;	O
while	O
(	O
--	O
argc	int
)	O
{	O
if	O
(	O
dico_list_prepend	function
(	O
list	array
,	O
strdup	function
(	O
*	O
++	O
argv	pointer
)	O
)	O
)	O
dico_log	function
(	O
L_ERR	int
,	O
errno	O
,	O
"dico_list_prepend"	pointer
)	O
;	O
}	O
}	O
void	O
find	function
(	O
void	O
*	O
object	pointer
,	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
dico_iterator_t	pointer
itr	pointer
;	O
char	O
*	O
arg	pointer
=	O
argv	pointer
[	O
1	int
]	O
;	O
char	O
*	O
text	pointer
;	O
itr	pointer
=	O
shell_iterator	function
(	O
)	O
;	O
for	O
(	O
text	pointer
=	O
dico_iterator_first	function
(	O
itr	pointer
)	O
;	O
text	pointer
;	O
text	pointer
=	O
dico_iterator_next	function
(	O
itr	pointer
)	O
)	O
{	O
if	O
(	O
strcmp	function
(	O
arg	pointer
,	O
text	pointer
)	O
==	O
0	int
)	O
return	O
;	O
}	O
dico_log	function
(	O
L_ERR	int
,	O
0	int
,	O
"%s not in list"	pointer
,	O
arg	pointer
)	O
;	O
}	O
void	O
push	function
(	O
void	O
*	O
object	pointer
,	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
dico_list_t	pointer
list	array
=	O
object	pointer
;	O
while	O
(	O
--	O
argc	int
)	O
if	O
(	O
dico_list_push	O
(	O
list	array
,	O
strdup	function
(	O
*	O
++	O
argv	pointer
)	O
)	O
)	O
dico_log	function
(	O
L_ERR	int
,	O
errno	O
,	O
"dico_list_push"	pointer
)	O
;	O
}	O
void	O
pop	function
(	O
void	O
*	O
object	pointer
,	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
dico_list_t	pointer
list	array
=	O
object	pointer
;	O
char	O
*	O
p	pointer
=	O
dico_list_pop	function
(	O
list	array
)	O
;	O
if	O
(	O
!	O
p	pointer
)	O
dico_log	function
(	O
L_NOTICE	int
,	O
0	int
,	O
"nothing to pop"	pointer
)	O
;	O
else	O
printf	function
(	O
"%s\n"	pointer
,	O
p	pointer
)	O
;	O
free	function
(	O
p	pointer
)	O
;	O
}	O
void	O
number	function
(	O
void	O
*	O
object	pointer
,	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
dico_list_t	pointer
list	array
=	O
object	pointer
;	O
char	O
*	O
p	pointer
;	O
size_t	long
n	long
=	O
strtoul	function
(	O
argv	pointer
[	O
0	int
]	O
,	O
&	O
p	pointer
,	O
0	int
)	O
;	O
if	O
(	O
*	O
p	pointer
!=	O
0	int
)	O
fprintf	function
(	O
stderr	pointer
,	O
"?\n"	pointer
)	O
;	O
else	O
{	O
char	O
*	O
text	pointer
=	O
dico_list_item	function
(	O
list	array
,	O
n	long
)	O
;	O
if	O
(	O
!	O
text	pointer
)	O
{	O
if	O
(	O
errno	O
==	O
ENOENT	int
)	O
dico_log	function
(	O
L_ERR	int
,	O
0	int
,	O
"dico_list_item: item not found"	pointer
)	O
;	O
else	O
dico_log	function
(	O
L_ERR	int
,	O
errno	O
,	O
"dico_list_item"	pointer
)	O
;	O
return	O
;	O
}	O
printf	function
(	O
"%s\n"	pointer
,	O
text	pointer
)	O
;	O
}	O
}	O
static	O
int	O
string_comp	function
(	O
const	O
void	O
*	O
item	pointer
,	O
const	O
void	O
*	O
value	pointer
,	O
void	O
*	O
ignored	pointer
)	O
{	O
return	O
strcmp	function
(	O
item	pointer
,	O
value	pointer
)	O
;	O
}	O
struct	O
itr_shell_command	struct
cmdtab	pointer
[	O
]	O
=	O
{	O
{	O
"del"	pointer
,	O
2	int
,	O
0	int
,	O
delete	function
,	O
"item..."	pointer
,	O
"delete items"	pointer
}	O
,	O
{	O
"add"	pointer
,	O
2	int
,	O
0	int
,	O
add	function
,	O
"item..."	pointer
,	O
"add new items"	pointer
}	O
,	O
{	O
"prep"	pointer
,	O
2	int
,	O
0	int
,	O
prep	function
,	O
"item..."	pointer
,	O
"add new items at the beginning"	pointer
}	O
,	O
{	O
"find"	pointer
,	O
2	int
,	O
2	int
,	O
find	function
,	O
"item"	pointer
,	O
"find item in the list"	pointer
}	O
,	O
{	O
"push"	pointer
,	O
2	int
,	O
0	int
,	O
push	function
,	O
"item..."	pointer
,	O
"push items to the list"	pointer
}	O
,	O
{	O
"pop"	pointer
,	O
1	int
,	O
1	int
,	O
pop	function
,	O
""	pointer
,	O
"pop item from the list"	pointer
}	O
,	O
{	O
NULL	O
,	O
1	int
,	O
1	int
,	O
number	function
}	O
}	O
;	O
static	O
size_t	long
get_count	function
(	O
void	O
*	O
data	pointer
)	O
{	O
return	O
dico_list_count	function
(	O
(	O
dico_list_t	pointer
)	O
data	pointer
)	O
;	O
}	O
int	O
main	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
struct	O
itr_shell	struct
sh	struct
;	O
dico_list_t	pointer
list	array
;	O
dico_set_program_name	function
(	O
argv	pointer
[	O
0	int
]	O
)	O
;	O
while	O
(	O
--	O
argc	int
)	O
{	O
char	O
*	O
arg	pointer
=	O
*	O
++	O
argv	pointer
;	O
if	O
(	O
strcmp	function
(	O
arg	pointer
,	O
"-h"	pointer
)	O
==	O
0	int
)	O
usage	function
(	O
0	int
)	O
;	O
else	O
if	O
(	O
strcmp	function
(	O
arg	pointer
,	O
"--"	pointer
)	O
==	O
0	int
)	O
{	O
--	O
argc	int
;	O
++	O
argv	pointer
;	O
break	O
;	O
}	O
else	O
if	O
(	O
arg	pointer
[	O
0	int
]	O
==	O
'-'	O
)	O
{	O
dico_log	function
(	O
L_ERR	int
,	O
0	int
,	O
"unknown option %s"	pointer
,	O
arg	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
else	O
break	O
;	O
}	O
list	array
=	O
dico_list_create	function
(	O
)	O
;	O
if	O
(	O
!	O
list	array
)	O
{	O
perror	function
(	O
"dico_list_create"	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
dico_list_set_comparator	function
(	O
list	array
,	O
string_comp	function
,	O
NULL	O
)	O
;	O
while	O
(	O
argc	int
--	O
)	O
{	O
if	O
(	O
dico_list_append	function
(	O
list	array
,	O
*	O
argv	pointer
++	O
)	O
)	O
{	O
perror	function
(	O
"dico_list_append"	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
}	O
memset	function
(	O
&	O
sh	struct
,	O
0	int
,	O
sizeof	O
(	O
sh	struct
)	O
)	O
;	O
sh	struct
.	O
object	pointer
=	O
list	array
;	O
sh	struct
.	O
get_iterator	pointer
=	O
list_iterator	function
;	O
sh	struct
.	O
print_item	pointer
=	O
print_item	pointer
;	O
sh	struct
.	O
count	long
=	O
get_count	function
;	O
sh	struct
.	O
cmdtab	pointer
=	O
cmdtab	pointer
;	O
shell	function
(	O
&	O
sh	struct
)	O
;	O
return	O
0	int
;	O
}	O
