int	O
_API_linemod	O
(	O
R___	O
(	O
Plotter	struct
*	O
_plotter	pointer
)	O
const	O
char	O
*	O
s	pointer
)	O
{	O
bool	enum
matched	enum
=	O
false	int
;	O
char	O
*	O
line_mode	pointer
;	O
int	O
i	int
;	O
if	O
(	O
!	O
_plotter	pointer
->	O
data	pointer
->	O
open	enum
)	O
{	O
_plotter	pointer
->	O
error	pointer
(	O
R___	O
(	O
_plotter	pointer
)	O
"linemod: invalid operation"	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
_API_endpath	O
(	O
S___	O
(	O
_plotter	pointer
)	O
)	O
;	O
if	O
(	O
(	O
!	O
s	pointer
)	O
||	O
!	O
strcmp	function
(	O
s	pointer
,	O
"(null)"	pointer
)	O
)	O
s	pointer
=	O
_default_drawstate	struct
.	O
line_mode	pointer
;	O
free	function
(	O
(	O
char	O
*	O
)	O
_plotter	pointer
->	O
drawstate	pointer
->	O
line_mode	pointer
)	O
;	O
line_mode	pointer
=	O
(	O
char	O
*	O
)	O
_pl_xmalloc	function
(	O
strlen	function
(	O
s	pointer
)	O
+	O
1	int
)	O
;	O
strcpy	function
(	O
line_mode	pointer
,	O
s	pointer
)	O
;	O
_plotter	pointer
->	O
drawstate	pointer
->	O
line_mode	pointer
=	O
line_mode	pointer
;	O
if	O
(	O
strcmp	function
(	O
s	pointer
,	O
"disconnected"	pointer
)	O
==	O
0	int
)	O
{	O
_plotter	pointer
->	O
drawstate	pointer
->	O
line_type	int
=	O
PL_L_SOLID	int
;	O
_plotter	pointer
->	O
drawstate	pointer
->	O
points_are_connected	enum
=	O
false	int
;	O
matched	enum
=	O
true	int
;	O
}	O
else	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
PL_NUM_LINE_TYPES	int
;	O
i	int
++	O
)	O
{	O
if	O
(	O
strcmp	function
(	O
s	pointer
,	O
_pl_g_line_styles	array
[	O
i	int
]	O
.	O
name	pointer
)	O
==	O
0	int
)	O
{	O
_plotter	pointer
->	O
drawstate	pointer
->	O
line_type	int
=	O
_pl_g_line_styles	array
[	O
i	int
]	O
.	O
type	enum
;	O
_plotter	pointer
->	O
drawstate	pointer
->	O
points_are_connected	enum
=	O
true	int
;	O
matched	enum
=	O
true	int
;	O
break	O
;	O
}	O
}	O
if	O
(	O
matched	enum
==	O
false	int
)	O
_API_linemod	O
(	O
R___	O
(	O
_plotter	pointer
)	O
_default_drawstate	struct
.	O
line_mode	pointer
)	O
;	O
_plotter	pointer
->	O
drawstate	pointer
->	O
dash_array_in_effect	enum
=	O
false	int
;	O
return	O
0	int
;	O
}	O
int	O
_API_capmod	O
(	O
R___	O
(	O
Plotter	struct
*	O
_plotter	pointer
)	O
const	O
char	O
*	O
s	pointer
)	O
{	O
char	O
*	O
cap_mode	pointer
;	O
if	O
(	O
!	O
_plotter	pointer
->	O
data	pointer
->	O
open	enum
)	O
{	O
_plotter	pointer
->	O
error	pointer
(	O
R___	O
(	O
_plotter	pointer
)	O
"capmod: invalid operation"	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
_API_endpath	O
(	O
S___	O
(	O
_plotter	pointer
)	O
)	O
;	O
if	O
(	O
(	O
!	O
s	pointer
)	O
||	O
!	O
strcmp	function
(	O
s	pointer
,	O
"(null)"	pointer
)	O
)	O
s	pointer
=	O
_default_drawstate	struct
.	O
cap_mode	pointer
;	O
free	function
(	O
(	O
char	O
*	O
)	O
_plotter	pointer
->	O
drawstate	pointer
->	O
cap_mode	pointer
)	O
;	O
cap_mode	pointer
=	O
(	O
char	O
*	O
)	O
_pl_xmalloc	function
(	O
strlen	function
(	O
s	pointer
)	O
+	O
1	int
)	O
;	O
strcpy	function
(	O
cap_mode	pointer
,	O
s	pointer
)	O
;	O
_plotter	pointer
->	O
drawstate	pointer
->	O
cap_mode	pointer
=	O
cap_mode	pointer
;	O
if	O
(	O
strcmp	function
(	O
s	pointer
,	O
"butt"	pointer
)	O
==	O
0	int
)	O
_plotter	pointer
->	O
drawstate	pointer
->	O
cap_type	int
=	O
PL_CAP_BUTT	int
;	O
else	O
if	O
(	O
strcmp	function
(	O
s	pointer
,	O
"round"	pointer
)	O
==	O
0	int
)	O
_plotter	pointer
->	O
drawstate	pointer
->	O
cap_type	int
=	O
PL_CAP_ROUND	int
;	O
else	O
if	O
(	O
strcmp	function
(	O
s	pointer
,	O
"projecting"	pointer
)	O
==	O
0	int
)	O
_plotter	pointer
->	O
drawstate	pointer
->	O
cap_type	int
=	O
PL_CAP_PROJECT	int
;	O
else	O
if	O
(	O
strcmp	function
(	O
s	pointer
,	O
"triangular"	pointer
)	O
==	O
0	int
)	O
_plotter	pointer
->	O
drawstate	pointer
->	O
cap_type	int
=	O
PL_CAP_TRIANGULAR	int
;	O
else	O
return	O
_API_capmod	O
(	O
R___	O
(	O
_plotter	pointer
)	O
_default_drawstate	struct
.	O
cap_mode	pointer
)	O
;	O
return	O
0	int
;	O
}	O
int	O
_API_joinmod	O
(	O
R___	O
(	O
Plotter	struct
*	O
_plotter	pointer
)	O
const	O
char	O
*	O
s	pointer
)	O
{	O
char	O
*	O
join_mode	pointer
;	O
if	O
(	O
!	O
_plotter	pointer
->	O
data	pointer
->	O
open	enum
)	O
{	O
_plotter	pointer
->	O
error	pointer
(	O
R___	O
(	O
_plotter	pointer
)	O
"joinmod: invalid operation"	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
_API_endpath	O
(	O
S___	O
(	O
_plotter	pointer
)	O
)	O
;	O
if	O
(	O
(	O
!	O
s	pointer
)	O
||	O
!	O
strcmp	function
(	O
s	pointer
,	O
"(null)"	pointer
)	O
)	O
s	pointer
=	O
_default_drawstate	struct
.	O
join_mode	pointer
;	O
free	function
(	O
(	O
char	O
*	O
)	O
_plotter	pointer
->	O
drawstate	pointer
->	O
join_mode	pointer
)	O
;	O
join_mode	pointer
=	O
(	O
char	O
*	O
)	O
_pl_xmalloc	function
(	O
strlen	function
(	O
s	pointer
)	O
+	O
1	int
)	O
;	O
strcpy	function
(	O
join_mode	pointer
,	O
s	pointer
)	O
;	O
_plotter	pointer
->	O
drawstate	pointer
->	O
join_mode	pointer
=	O
join_mode	pointer
;	O
if	O
(	O
strcmp	function
(	O
s	pointer
,	O
"miter"	pointer
)	O
==	O
0	int
)	O
_plotter	pointer
->	O
drawstate	pointer
->	O
join_type	int
=	O
PL_JOIN_MITER	int
;	O
else	O
if	O
(	O
strcmp	function
(	O
s	pointer
,	O
"mitre"	pointer
)	O
==	O
0	int
)	O
_plotter	pointer
->	O
drawstate	pointer
->	O
join_type	int
=	O
PL_JOIN_MITER	int
;	O
else	O
if	O
(	O
strcmp	function
(	O
s	pointer
,	O
"round"	pointer
)	O
==	O
0	int
)	O
_plotter	pointer
->	O
drawstate	pointer
->	O
join_type	int
=	O
PL_JOIN_ROUND	int
;	O
else	O
if	O
(	O
strcmp	function
(	O
s	pointer
,	O
"bevel"	pointer
)	O
==	O
0	int
)	O
_plotter	pointer
->	O
drawstate	pointer
->	O
join_type	int
=	O
PL_JOIN_BEVEL	int
;	O
else	O
if	O
(	O
strcmp	function
(	O
s	pointer
,	O
"triangular"	pointer
)	O
==	O
0	int
)	O
_plotter	pointer
->	O
drawstate	pointer
->	O
join_type	int
=	O
PL_JOIN_TRIANGULAR	int
;	O
else	O
return	O
_API_joinmod	O
(	O
R___	O
(	O
_plotter	pointer
)	O
_default_drawstate	struct
.	O
join_mode	pointer
)	O
;	O
return	O
0	int
;	O
}	O
int	O
_API_fmiterlimit	O
(	O
R___	O
(	O
Plotter	struct
*	O
_plotter	pointer
)	O
double	O
new_miter_limit	double
)	O
{	O
if	O
(	O
!	O
_plotter	pointer
->	O
data	pointer
->	O
open	enum
)	O
{	O
_plotter	pointer
->	O
error	pointer
(	O
R___	O
(	O
_plotter	pointer
)	O
"flinewidth: invalid operation"	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
_API_endpath	O
(	O
S___	O
(	O
_plotter	pointer
)	O
)	O
;	O
if	O
(	O
new_miter_limit	double
<	O
1.0	int
)	O
new_miter_limit	double
=	O
PL_DEFAULT_MITER_LIMIT	int
;	O
_plotter	pointer
->	O
drawstate	pointer
->	O
miter_limit	double
=	O
new_miter_limit	double
;	O
return	O
0	int
;	O
}	O
int	O
_API_orientation	O
(	O
R___	O
(	O
Plotter	struct
*	O
_plotter	pointer
)	O
int	O
direction	int
)	O
{	O
if	O
(	O
!	O
_plotter	pointer
->	O
data	pointer
->	O
open	enum
)	O
{	O
_plotter	pointer
->	O
error	pointer
(	O
R___	O
(	O
_plotter	pointer
)	O
"orientation: invalid operation"	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
direction	int
!=	O
1	int
&&	O
direction	int
!=	O
-	O
1	int
)	O
direction	int
=	O
_default_drawstate	struct
.	O
orientation	int
;	O
_plotter	pointer
->	O
drawstate	pointer
->	O
orientation	int
=	O
direction	int
;	O
return	O
0	int
;	O
}	O
int	O
_API_fillmod	O
(	O
R___	O
(	O
Plotter	struct
*	O
_plotter	pointer
)	O
const	O
char	O
*	O
s	pointer
)	O
{	O
const	O
char	O
*	O
default_s	pointer
;	O
char	O
*	O
fill_rule	pointer
;	O
if	O
(	O
!	O
_plotter	pointer
->	O
data	pointer
->	O
open	enum
)	O
{	O
_plotter	pointer
->	O
error	pointer
(	O
R___	O
(	O
_plotter	pointer
)	O
"fillmod: invalid operation"	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
_API_endpath	O
(	O
S___	O
(	O
_plotter	pointer
)	O
)	O
;	O
default_s	pointer
=	O
_default_drawstate	struct
.	O
fill_rule	pointer
;	O
if	O
(	O
strcmp	function
(	O
default_s	pointer
,	O
"even-odd"	pointer
)	O
==	O
0	int
&&	O
_plotter	pointer
->	O
data	pointer
->	O
have_odd_winding_fill	int
==	O
0	int
)	O
default_s	pointer
=	O
"nonzero-winding"	pointer
;	O
else	O
if	O
(	O
strcmp	function
(	O
default_s	pointer
,	O
"nonzero-winding"	pointer
)	O
==	O
0	int
&&	O
_plotter	pointer
->	O
data	pointer
->	O
have_nonzero_winding_fill	int
==	O
0	int
)	O
default_s	pointer
=	O
"even-odd"	pointer
;	O
if	O
(	O
(	O
!	O
s	pointer
)	O
||	O
!	O
strcmp	function
(	O
s	pointer
,	O
"(null)"	pointer
)	O
)	O
s	pointer
=	O
default_s	pointer
;	O
free	function
(	O
(	O
char	O
*	O
)	O
_plotter	pointer
->	O
drawstate	pointer
->	O
fill_rule	pointer
)	O
;	O
fill_rule	pointer
=	O
(	O
char	O
*	O
)	O
_pl_xmalloc	function
(	O
strlen	function
(	O
s	pointer
)	O
+	O
1	int
)	O
;	O
strcpy	function
(	O
fill_rule	pointer
,	O
s	pointer
)	O
;	O
_plotter	pointer
->	O
drawstate	pointer
->	O
fill_rule	pointer
=	O
fill_rule	pointer
;	O
if	O
(	O
(	O
strcmp	function
(	O
s	pointer
,	O
"even-odd"	pointer
)	O
==	O
0	int
||	O
strcmp	function
(	O
s	pointer
,	O
"alternate"	pointer
)	O
==	O
0	int
)	O
&&	O
_plotter	pointer
->	O
data	pointer
->	O
have_odd_winding_fill	int
)	O
_plotter	pointer
->	O
drawstate	pointer
->	O
fill_rule_type	int
=	O
PL_FILL_ODD_WINDING	int
;	O
else	O
if	O
(	O
(	O
strcmp	function
(	O
s	pointer
,	O
"nonzero-winding"	pointer
)	O
==	O
0	int
||	O
strcmp	function
(	O
s	pointer
,	O
"winding"	pointer
)	O
==	O
0	int
)	O
&&	O
_plotter	pointer
->	O
data	pointer
->	O
have_nonzero_winding_fill	int
)	O
_plotter	pointer
->	O
drawstate	pointer
->	O
fill_rule_type	int
=	O
PL_FILL_NONZERO_WINDING	int
;	O
else	O
_API_fillmod	O
(	O
R___	O
(	O
_plotter	pointer
)	O
default_s	pointer
)	O
;	O
return	O
0	int
;	O
}	O
