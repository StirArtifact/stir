static	O
char	O
sccsid	array
[	O
]	O
=	O
"@(#) acm by Riley Rainey; Revision 5.0"	pointer
;	O
extern	O
struct	O
servent	struct
*	O
getservent	function
(	O
)	O
;	O
int	O
sdebug	int
=	O
1	int
;	O
int	O
listen_socket	int
;	O
char	O
*	O
sceneFile	pointer
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
extern	O
double	O
atof	function
(	O
const	O
char	O
*	O
)	O
;	O
extern	O
void	O
SetJoystickPort	function
PARAMS	O
(	O
(	O
char	O
*	O
)	O
)	O
;	O
int	O
processCommandFile	function
(	O
const	O
char	O
*	O
fname	pointer
,	O
int	O
*	O
argc	pointer
,	O
char	O
*	O
argv	array
[	O
]	O
,	O
char	O
*	O
display	pointer
,	O
char	O
*	O
name	pointer
,	O
char	O
*	O
switches	pointer
)	O
;	O
int	O
processCommandSwitches	function
(	O
int	O
argc	pointer
,	O
char	O
*	O
argv	array
[	O
]	O
,	O
char	O
*	O
display	pointer
,	O
char	O
*	O
name	pointer
,	O
char	O
*	O
switches	pointer
)	O
;	O
int	O
dis_site	int
=	O
DIS_SITE	int
;	O
int	O
dis_application	int
=	O
DIS_APPLICATION	int
;	O
int	O
dis_exercise	int
=	O
DIS_EXERCISE	int
;	O
void	O
disEntityEnterCb	function
(	O
int	O
eid	int
,	O
dis_entity_type	struct
*	O
etype	pointer
,	O
int	O
force	int
,	O
craft	struct
*	O
*	O
cptr	pointer
)	O
{	O
int	O
i	int
,	O
j	int
,	O
top	int
,	O
mtype	int
;	O
craft	struct
*	O
c	pointer
;	O
char	O
*	O
type	pointer
;	O
int	O
team	int
;	O
craft	struct
*	O
tbl	pointer
;	O
*	O
cptr	pointer
=	O
NULL	O
;	O
if	O
(	O
etype	pointer
->	O
kind	char
==	O
DISKindPlatform	int
)	O
{	O
tbl	pointer
=	O
ptbl	array
;	O
top	int
=	O
MAXPLAYERS	int
;	O
mtype	int
=	O
CT_DIS_PLANE	int
;	O
}	O
else	O
if	O
(	O
etype	pointer
->	O
kind	char
==	O
DISKindMunition	int
)	O
{	O
tbl	pointer
=	O
mtbl	array
;	O
top	int
=	O
MAXPROJECTILES	O
;	O
mtype	int
=	O
CT_DIS_MUNITION	int
;	O
}	O
else	O
{	O
return	O
;	O
}	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
top	int
;	O
++	O
i	int
)	O
{	O
if	O
(	O
tbl	pointer
[	O
i	int
]	O
.	O
type	pointer
==	O
CT_FREE	int
)	O
{	O
if	O
(	O
force	int
==	O
DISForceFriendly	int
)	O
{	O
team	int
=	O
1	int
;	O
}	O
else	O
{	O
team	int
=	O
2	int
;	O
}	O
c	pointer
=	O
&	O
tbl	pointer
[	O
i	int
]	O
;	O
*	O
cptr	pointer
=	O
c	pointer
;	O
c	pointer
->	O
createTime	double
=	O
curTime	double
;	O
c	pointer
->	O
vl	pointer
=	O
NULL	O
;	O
c	pointer
->	O
disId	int
=	O
eid	int
;	O
c	pointer
->	O
team	int
=	O
team	int
;	O
c	pointer
->	O
curOpponent	short
=	O
-	O
1	int
;	O
c	pointer
->	O
holdCount	short
=	O
0	int
;	O
c	pointer
->	O
vl	pointer
=	O
NULL	O
;	O
c	pointer
->	O
type	pointer
=	O
mtype	int
;	O
c	pointer
->	O
cinfo	pointer
=	O
lookupCraftByEntityType	function
(	O
etype	pointer
)	O
;	O
if	O
(	O
!	O
c	pointer
->	O
cinfo	pointer
)	O
{	O
*	O
cptr	pointer
=	O
NULL	O
;	O
c	pointer
->	O
type	pointer
=	O
CT_FREE	int
;	O
return	O
;	O
}	O
strncpy	function
(	O
c	pointer
->	O
name	pointer
,	O
"DIS"	pointer
,	O
sizeof	O
(	O
c	pointer
->	O
name	pointer
)	O
)	O
;	O
c	pointer
->	O
curNWDef	double
=	O
0.0	int
;	O
c	pointer
->	O
flags	short
=	O
0	int
;	O
c	pointer
->	O
radarMode	int
=	O
RM_NORMAL	int
;	O
c	pointer
->	O
curRadarTarget	short
=	O
-	O
1	int
;	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<	O
6	int
;	O
++	O
j	int
)	O
{	O
c	pointer
->	O
leftHUD	array
[	O
j	int
]	O
=	O
Vmalloc	function
(	O
32	int
)	O
;	O
c	pointer
->	O
rightHUD	array
[	O
j	int
]	O
=	O
Vmalloc	function
(	O
32	int
)	O
;	O
strcpy	function
(	O
c	pointer
->	O
leftHUD	array
[	O
j	int
]	O
,	O
""	pointer
)	O
;	O
strcpy	function
(	O
c	pointer
->	O
rightHUD	array
[	O
j	int
]	O
,	O
""	pointer
)	O
;	O
}	O
break	O
;	O
}	O
}	O
if	O
(	O
i	int
==	O
top	int
)	O
fprintf	function
(	O
stderr	pointer
,	O
"Out of players (increase MAXPLAYERS)\n"	pointer
)	O
;	O
}	O
void	O
disDetonationCb	function
(	O
int	O
ftype	int
,	O
int	O
firingEid	int
,	O
int	O
targetEid	int
,	O
double	O
time	long
,	O
double	O
*	O
worldLocation	array
,	O
double	O
*	O
entityLocation	array
,	O
craft	struct
*	O
m	float
,	O
dis_detonation_pdu	struct
*	O
dpdu	pointer
)	O
{	O
craft	struct
*	O
c	pointer
;	O
int	O
j	int
;	O
VPoint	struct
Sg	struct
,	O
rloc	struct
,	O
rvel	struct
,	O
tmp	struct
;	O
double	O
exp_diameter	double
,	O
dist_meters	double
,	O
vel_meters_per_sec	double
;	O
if	O
(	O
m	float
)	O
{	O
killMissile	function
(	O
m	float
,	O
(	O
craft	struct
*	O
)	O
NULL	O
)	O
;	O
}	O
Sg	struct
.	O
x	float
=	O
worldLocation	array
[	O
0	int
]	O
;	O
Sg	struct
.	O
y	short
=	O
worldLocation	array
[	O
1	int
]	O
;	O
Sg	struct
.	O
z	short
=	O
worldLocation	array
[	O
2	int
]	O
;	O
for	O
(	O
c	pointer
=	O
ptbl	array
,	O
j	int
=	O
0	int
;	O
j	int
<	O
MAXPLAYERS	int
;	O
++	O
j	int
,	O
++	O
c	pointer
)	O
if	O
(	O
c	pointer
->	O
type	pointer
!=	O
CT_FREE	int
&&	O
c	pointer
->	O
disId	int
==	O
targetEid	int
)	O
{	O
if	O
(	O
c	pointer
->	O
type	pointer
!=	O
CT_DIS_PLANE	int
)	O
{	O
rloc	struct
.	O
x	float
=	O
c	pointer
->	O
Sg	struct
.	O
x	float
-	O
Sg	struct
.	O
x	float
;	O
rloc	struct
.	O
y	short
=	O
c	pointer
->	O
Sg	struct
.	O
y	short
-	O
Sg	struct
.	O
y	short
;	O
rloc	struct
.	O
z	short
=	O
c	pointer
->	O
Sg	struct
.	O
z	short
-	O
Sg	struct
.	O
z	short
;	O
dist_meters	double
=	O
mag	O
(	O
rloc	struct
)	O
;	O
tmp	struct
.	O
x	float
=	O
FEETtoMETERS	O
(	O
c	pointer
->	O
Cg	struct
.	O
x	float
)	O
;	O
tmp	struct
.	O
y	short
=	O
FEETtoMETERS	O
(	O
c	pointer
->	O
Cg	struct
.	O
y	short
)	O
;	O
tmp	struct
.	O
z	short
=	O
FEETtoMETERS	O
(	O
c	pointer
->	O
Cg	struct
.	O
z	short
)	O
;	O
VReverseTransform_	function
(	O
&	O
tmp	struct
,	O
&	O
c	pointer
->	O
XYZtoNED	struct
,	O
&	O
rvel	struct
)	O
;	O
rvel	struct
.	O
x	float
=	O
dpdu	pointer
->	O
vel	struct
.	O
x	float
-	O
rvel	struct
.	O
x	float
;	O
rvel	struct
.	O
y	short
=	O
dpdu	pointer
->	O
vel	struct
.	O
y	short
-	O
rvel	struct
.	O
y	short
;	O
rvel	struct
.	O
z	short
=	O
dpdu	pointer
->	O
vel	struct
.	O
z	short
-	O
rvel	struct
.	O
z	short
;	O
vel_meters_per_sec	double
=	O
mag	O
(	O
rvel	struct
)	O
;	O
if	O
(	O
absorbDISDamage	function
(	O
c	pointer
,	O
&	O
dpdu	pointer
->	O
burst	struct
.	O
munition	struct
,	O
dpdu	pointer
->	O
burst	struct
.	O
warhead	short
,	O
dpdu	pointer
->	O
burst	struct
.	O
fuze	short
,	O
dist_meters	double
,	O
vel_meters_per_sec	double
,	O
&	O
exp_diameter	double
)	O
==	O
0	int
)	O
{	O
killPlayerEx	function
(	O
c	pointer
,	O
"Your aircraft has been destroyed."	pointer
,	O
(	O
ftype	int
==	O
DIS_FIRE_M61A1	int
?	O
"You were struck by cannon fire."	pointer
:	O
"Something (presumably a missile) detotated close enough to your aircraft to destroy it."	pointer
)	O
)	O
;	O
}	O
if	O
(	O
exp_diameter	double
>	O
0.0	int
)	O
{	O
VPoint	struct
vel	struct
=	O
{	O
0	int
,	O
0	int
,	O
0	int
}	O
;	O
newExplosion	function
(	O
&	O
Sg	struct
,	O
&	O
vel	struct
,	O
exp_diameter	double
*	O
0.3	int
,	O
exp_diameter	double
,	O
3.0	int
)	O
;	O
}	O
}	O
break	O
;	O
}	O
}	O
int	O
disInit	function
(	O
void	O
)	O
{	O
int	O
err	long
,	O
count	int
;	O
char	O
name	pointer
[	O
32	int
]	O
;	O
struct	O
sockaddr_in	struct
sin	function
;	O
err	long
=	O
dis_init	function
(	O
dis_exercise	int
,	O
dis_site	int
,	O
dis_application	int
,	O
disEntityEnterCb	function
,	O
disDetonationCb	function
)	O
;	O
dis_setDRThresholds	function
(	O
DIS_LOCATION_THRESHOLD	int
,	O
DIS_ORIENTATION_THRESHOLD	O
)	O
;	O
return	O
err	long
;	O
}	O
void	O
parseinfo	function
(	O
char	O
*	O
s	double
,	O
char	O
*	O
a	pointer
,	O
char	O
*	O
b	float
,	O
char	O
*	O
c	pointer
)	O
{	O
char	O
*	O
p	pointer
;	O
for	O
(	O
p	pointer
=	O
a	pointer
;	O
*	O
s	double
;	O
++	O
s	double
,	O
++	O
p	pointer
)	O
if	O
(	O
(	O
*	O
p	pointer
=	O
*	O
s	double
)	O
==	O
' '	O
)	O
{	O
*	O
p	pointer
=	O
'\0'	O
;	O
break	O
;	O
}	O
++	O
s	double
;	O
for	O
(	O
p	pointer
=	O
b	float
;	O
*	O
s	double
;	O
++	O
s	double
,	O
++	O
p	pointer
)	O
if	O
(	O
(	O
*	O
p	pointer
=	O
*	O
s	double
)	O
==	O
' '	O
)	O
{	O
*	O
p	pointer
=	O
'\0'	O
;	O
break	O
;	O
}	O
++	O
s	double
;	O
strcpy	function
(	O
c	pointer
,	O
s	double
)	O
;	O
return	O
;	O
}	O
static	O
char	O
switches	pointer
[	O
1024	int
]	O
;	O
main	function
(	O
int	O
argc	pointer
,	O
char	O
*	O
*	O
argv	array
)	O
{	O
struct	O
sockaddr_in	struct
sin	function
;	O
int	O
on	int
=	O
1	int
;	O
int	O
i	int
,	O
news	int
;	O
char	O
name	pointer
[	O
64	int
]	O
;	O
char	O
display	pointer
[	O
64	int
]	O
;	O
char	O
*	O
sargv	array
[	O
2	int
]	O
;	O
Display	struct
*	O
dpy	pointer
;	O
strcpy	function
(	O
display	pointer
,	O
""	pointer
)	O
;	O
strcpy	function
(	O
name	pointer
,	O
""	pointer
)	O
;	O
curTime	double
=	O
0.0	int
;	O
real_delta_t	int
=	O
1	int
;	O
depth_cue_steps	int
=	O
8	int
;	O
end_game_threshold_meters	double
=	O
-	O
1.0	int
;	O
end_game_mode	int
=	O
0	int
;	O
transferEntityIdBits	int
=	O
0x4	int
;	O
update_interval_millisec	double
=	O
1000.0	int
/	O
50.0	int
;	O
frame_interval_millisec	double
=	O
1000.0	int
/	O
15.0	int
;	O
watch_frame_rate	int
=	O
0	int
;	O
droneAggressiveness	double
=	O
DEFAULT_DRONE_FACTOR	int
;	O
disAbsoluteTime	int
=	O
0	int
;	O
ptblCount	int
=	O
ctblCount	int
=	O
0	int
;	O
visibility	double
=	O
FEETtoMETERS	O
(	O
50.0	int
*	O
NM	int
)	O
;	O
dis_setTransferControlRequestCallback	function
(	O
transferControlRequestHandler	function
)	O
;	O
switches	pointer
[	O
0	int
]	O
=	O
'\0'	O
;	O
processCommandSwitches	function
(	O
argc	pointer
,	O
argv	array
,	O
display	pointer
,	O
name	pointer
,	O
switches	pointer
)	O
;	O
{	O
char	O
name	pointer
[	O
256	int
]	O
,	O
*	O
p	pointer
;	O
struct	O
hostent	struct
*	O
h	int
;	O
gethostname	function
(	O
name	pointer
,	O
sizeof	O
(	O
name	pointer
)	O
)	O
;	O
if	O
(	O
dis_application	int
==	O
DIS_APPLICATION	int
)	O
{	O
if	O
(	O
(	O
h	int
=	O
gethostbyname	function
(	O
name	pointer
)	O
)	O
!=	O
(	O
struct	O
hostent	struct
*	O
)	O
NULL	O
)	O
{	O
p	pointer
=	O
h	int
->	O
h_addr	O
;	O
dis_application	int
=	O
(	O
p	pointer
[	O
2	int
]	O
<<	O
8	int
)	O
|	O
p	pointer
[	O
3	int
]	O
;	O
}	O
}	O
}	O
if	O
(	O
real_delta_t	int
==	O
0	int
)	O
{	O
redraw_interval	int
=	O
(	O
int	O
)	O
(	O
frame_interval_millisec	double
/	O
update_interval_millisec	double
+	O
0.5	int
)	O
;	O
deltaT	double
=	O
update_interval_millisec	double
/	O
1000.0	int
;	O
halfDeltaTSquared	double
=	O
0.5	int
*	O
deltaT	double
*	O
deltaT	double
;	O
}	O
if	O
(	O
disInit	function
(	O
)	O
==	O
0	int
)	O
disInUse	int
=	O
1	int
;	O
else	O
disInUse	int
=	O
0	int
;	O
if	O
(	O
strlen	function
(	O
display	pointer
)	O
==	O
0	int
)	O
{	O
if	O
(	O
getenv	function
(	O
"DISPLAY"	pointer
)	O
)	O
{	O
strncpy	function
(	O
display	pointer
,	O
getenv	function
(	O
"DISPLAY"	pointer
)	O
,	O
sizeof	O
(	O
display	pointer
)	O
)	O
;	O
}	O
else	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Excuse me, but you have no DISPLAY.\n"	pointer
"How do you use X, anyway?\n"	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
}	O
printf	function
(	O
"ACM version %s,  Copyright (C) 1991-1998   Riley Rainey (rrainey@ix.netcom.com)\n                  Copyright (C) 2010        Sergio Lopez (slp@sinrega.org)\n\nThis program is free software; you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation; either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program; if not, write to the Free Software Foundaation,\nInc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA\n"	pointer
,	O
REVISION_STRING	pointer
)	O
;	O
if	O
(	O
disInUse	int
)	O
printf	function
(	O
"DIS protocol active.\n\n"	pointer
)	O
;	O
init	function
(	O
"."	pointer
)	O
;	O
dpy	pointer
=	O
XOpenDisplay	function
(	O
display	pointer
)	O
;	O
news	int
=	O
2	int
;	O
if	O
(	O
newPlayer	function
(	O
news	int
,	O
display	pointer
,	O
name	pointer
,	O
switches	pointer
)	O
==	O
0	int
)	O
{	O
}	O
input	function
(	O
)	O
;	O
}	O
static	O
struct	O
sigvec	function
alrm	struct
;	O
int	O
doUpdate	int
=	O
0	int
;	O
acm_sig_t	int
myalarm	function
(	O
int	O
s	double
)	O
{	O
doUpdate	int
++	O
;	O
sigvec	function
(	O
SIGALRM	int
,	O
&	O
alrm	struct
,	O
(	O
struct	O
sigvec	function
*	O
)	O
0	int
)	O
;	O
}	O
acm_sig_t	int
killed	function
(	O
int	O
i	int
)	O
{	O
printf	function
(	O
"\ninterrupt\n"	pointer
)	O
;	O
shutdown	function
(	O
listen_socket	int
,	O
2	int
)	O
;	O
close	function
(	O
listen_socket	int
)	O
;	O
dis_close	function
(	O
)	O
;	O
exit	function
(	O
0	int
)	O
;	O
}	O
input	function
(	O
void	O
)	O
{	O
fd_set	struct
fdset	struct
,	O
ofdset	struct
;	O
int	O
news	int
=	O
-	O
1	int
,	O
playerchange	int
=	O
0	int
,	O
n	int
,	O
pno	int
,	O
addrlen	int
;	O
int	O
on	int
=	O
1	int
;	O
struct	O
sockaddr	struct
addr	struct
;	O
struct	O
itimerval	struct
update	pointer
;	O
char	O
*	O
bp	pointer
,	O
buf	pointer
[	O
128	int
]	O
,	O
name	pointer
[	O
64	int
]	O
,	O
display	pointer
[	O
64	int
]	O
,	O
args	array
[	O
256	int
]	O
;	O
struct	O
timeval	struct
zero_timeout	struct
,	O
update_timeout	struct
;	O
signal	function
(	O
SIGINT	int
,	O
killed	function
)	O
;	O
signal	function
(	O
SIGQUIT	int
,	O
killed	function
)	O
;	O
zero_timeout	struct
.	O
tv_sec	long
=	O
0	int
;	O
zero_timeout	struct
.	O
tv_usec	long
=	O
0	int
;	O
update_timeout	struct
.	O
tv_sec	long
=	O
0	int
;	O
update_timeout	struct
.	O
tv_usec	long
=	O
(	O
long	O
)	O
(	O
update_interval_millisec	double
*	O
1000	int
)	O
;	O
if	O
(	O
real_delta_t	int
==	O
0	int
)	O
{	O
alrm	struct
.	O
sv_handler	O
=	O
myalarm	function
;	O
sigemptyset	function
(	O
&	O
alrm	struct
.	O
sv_mask	O
)	O
;	O
alrm	struct
.	O
sv_flags	O
=	O
SV_INTERRUPT	O
;	O
sigvec	function
(	O
SIGALRM	int
,	O
&	O
alrm	struct
,	O
(	O
struct	O
sigvec	function
*	O
)	O
0	int
)	O
;	O
update	pointer
.	O
it_interval	struct
.	O
tv_sec	long
=	O
0	int
;	O
update	pointer
.	O
it_interval	struct
.	O
tv_usec	long
=	O
(	O
long	O
)	O
(	O
update_interval_millisec	double
*	O
1000	int
)	O
;	O
update	pointer
.	O
it_value	struct
.	O
tv_sec	long
=	O
0	int
;	O
update	pointer
.	O
it_value	struct
.	O
tv_usec	long
=	O
(	O
long	O
)	O
(	O
update_interval_millisec	double
*	O
1000	int
)	O
;	O
setitimer	function
(	O
ITIMER_REAL	int
,	O
&	O
update	pointer
,	O
0	int
)	O
;	O
}	O
FD_ZERO	O
(	O
&	O
ofdset	struct
)	O
;	O
FD_ZERO	O
(	O
&	O
fdset	struct
)	O
;	O
FD_SET	O
(	O
listen_socket	int
,	O
&	O
ofdset	struct
)	O
;	O
for	O
(	O
;	O
;	O
)	O
{	O
sigsetmask	function
(	O
0	int
)	O
;	O
fdset	struct
=	O
ofdset	struct
;	O
if	O
(	O
real_delta_t	int
==	O
0	int
)	O
{	O
pno	int
=	O
select	function
(	O
32	int
,	O
&	O
fdset	struct
,	O
(	O
fd_set	struct
*	O
)	O
NULL	O
,	O
(	O
fd_set	struct
*	O
)	O
NULL	O
,	O
(	O
struct	O
timeval	struct
*	O
)	O
NULL	O
)	O
;	O
}	O
else	O
{	O
if	O
(	O
ptblCount	int
==	O
0	int
)	O
{	O
pno	int
=	O
select	function
(	O
32	int
,	O
&	O
fdset	struct
,	O
(	O
fd_set	struct
*	O
)	O
NULL	O
,	O
(	O
fd_set	struct
*	O
)	O
NULL	O
,	O
&	O
update_timeout	struct
)	O
;	O
}	O
else	O
{	O
pno	int
=	O
select	function
(	O
32	int
,	O
&	O
fdset	struct
,	O
(	O
fd_set	struct
*	O
)	O
NULL	O
,	O
(	O
fd_set	struct
*	O
)	O
NULL	O
,	O
&	O
zero_timeout	struct
)	O
;	O
}	O
doUpdate	int
++	O
;	O
}	O
sigblock	function
(	O
sigmask	O
(	O
SIGALRM	int
)	O
)	O
;	O
if	O
(	O
pno	int
<	O
0	int
)	O
{	O
FD_CLR	O
(	O
listen_socket	int
,	O
&	O
fdset	struct
)	O
;	O
if	O
(	O
news	int
>	O
0	int
)	O
FD_CLR	O
(	O
news	int
,	O
&	O
fdset	struct
)	O
;	O
}	O
if	O
(	O
doUpdate	int
)	O
{	O
doUpdate	int
=	O
0	int
;	O
redraw	int
(	O
)	O
;	O
}	O
}	O
}	O
int	O
processCommandFile	function
(	O
const	O
char	O
*	O
fname	pointer
,	O
int	O
*	O
argc	pointer
,	O
char	O
*	O
argv	array
[	O
]	O
,	O
char	O
*	O
display	pointer
,	O
char	O
*	O
name	pointer
,	O
char	O
*	O
switches	pointer
)	O
{	O
FILE	struct
*	O
f	struct
;	O
char	O
commands	array
[	O
4096	int
]	O
;	O
int	O
i	int
,	O
c	pointer
;	O
f	struct
=	O
fopen	function
(	O
fname	pointer
,	O
"r"	pointer
)	O
;	O
if	O
(	O
f	struct
==	O
NULL	O
)	O
{	O
return	O
-	O
1	int
;	O
}	O
i	int
=	O
0	int
;	O
while	O
(	O
(	O
c	pointer
=	O
fgetc	function
(	O
f	struct
)	O
)	O
!=	O
EOF	O
)	O
{	O
if	O
(	O
i	int
>=	O
sizeof	O
(	O
commands	array
)	O
)	O
{	O
return	O
-	O
2	int
;	O
}	O
if	O
(	O
c	pointer
==	O
'\n'	O
)	O
{	O
c	pointer
=	O
' '	O
;	O
}	O
commands	array
[	O
i	int
++	O
]	O
=	O
c	pointer
;	O
}	O
commands	array
[	O
i	int
]	O
=	O
'\0'	O
;	O
split	function
(	O
commands	array
,	O
argc	pointer
,	O
&	O
argv	array
[	O
1	int
]	O
)	O
;	O
processCommandSwitches	function
(	O
*	O
argc	pointer
,	O
argv	array
,	O
display	pointer
,	O
name	pointer
,	O
switches	pointer
)	O
;	O
return	O
0	int
;	O
}	O
int	O
processCommandSwitches	function
(	O
int	O
argc	pointer
,	O
char	O
*	O
argv	array
[	O
]	O
,	O
char	O
*	O
display	pointer
,	O
char	O
*	O
name	pointer
,	O
char	O
*	O
switches	pointer
)	O
{	O
int	O
i	int
;	O
int	O
xargc	int
;	O
char	O
*	O
xargv	array
[	O
128	int
]	O
;	O
for	O
(	O
i	int
=	O
1	int
;	O
i	int
<	O
argc	pointer
;	O
++	O
i	int
)	O
{	O
if	O
(	O
strcmp	function
(	O
argv	array
[	O
i	int
]	O
,	O
"-simx"	pointer
)	O
==	O
0	int
)	O
{	O
dis_site	int
=	O
0	int
;	O
dis_application	int
=	O
0	int
;	O
}	O
else	O
if	O
(	O
strcmp	function
(	O
argv	array
[	O
i	int
]	O
,	O
"-dis-site"	pointer
)	O
==	O
0	int
&&	O
++	O
i	int
<	O
argc	pointer
)	O
{	O
dis_site	int
=	O
strtol	function
(	O
argv	array
[	O
i	int
]	O
,	O
(	O
char	O
*	O
*	O
)	O
NULL	O
,	O
0	int
)	O
;	O
}	O
else	O
if	O
(	O
strcmp	function
(	O
argv	array
[	O
i	int
]	O
,	O
"-dis-appl"	pointer
)	O
==	O
0	int
&&	O
++	O
i	int
<	O
argc	pointer
)	O
{	O
dis_application	int
=	O
strtol	function
(	O
argv	array
[	O
i	int
]	O
,	O
(	O
char	O
*	O
*	O
)	O
NULL	O
,	O
0	int
)	O
;	O
}	O
else	O
if	O
(	O
strcmp	function
(	O
argv	array
[	O
i	int
]	O
,	O
"-dis-exercise"	pointer
)	O
==	O
0	int
&&	O
++	O
i	int
<	O
argc	pointer
)	O
{	O
dis_exercise	int
=	O
strtol	function
(	O
argv	array
[	O
i	int
]	O
,	O
(	O
char	O
*	O
*	O
)	O
NULL	O
,	O
0	int
)	O
;	O
}	O
else	O
if	O
(	O
strcmp	function
(	O
argv	array
[	O
i	int
]	O
,	O
"-dis-absolute-time"	pointer
)	O
==	O
0	int
)	O
{	O
disAbsoluteTime	int
=	O
1	int
;	O
}	O
else	O
if	O
(	O
strncmp	function
(	O
argv	array
[	O
i	int
]	O
,	O
"-dis"	pointer
,	O
4	int
)	O
==	O
0	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Acm DIS arguments:\n"	pointer
" -dis-exercise <exercise number> (default %d)\n"	pointer
" -dis-site <site number> (default %d)\n"	pointer
" -dis-appl <application number> (default %d)\n"	pointer
" -dis-absolute-time\n"	pointer
,	O
DIS_EXERCISE	int
,	O
DIS_SITE	int
,	O
DIS_APPLICATION	int
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
else	O
if	O
(	O
strcmp	function
(	O
argv	array
[	O
i	int
]	O
,	O
"-init"	pointer
)	O
==	O
0	int
&&	O
++	O
i	int
<	O
argc	pointer
)	O
{	O
processCommandFile	function
(	O
argv	array
[	O
i	int
]	O
,	O
&	O
xargc	int
,	O
xargv	array
,	O
display	pointer
,	O
name	pointer
,	O
switches	pointer
)	O
;	O
}	O
else	O
if	O
(	O
strcmp	function
(	O
argv	array
[	O
i	int
]	O
,	O
"-arcade"	pointer
)	O
==	O
0	int
)	O
{	O
arcadeMode	int
=	O
1	int
;	O
}	O
else	O
if	O
(	O
strcmp	function
(	O
argv	array
[	O
i	int
]	O
,	O
"-depth_steps"	pointer
)	O
==	O
0	int
&&	O
++	O
i	int
<	O
argc	pointer
)	O
{	O
depth_cue_steps	int
=	O
atoi	function
(	O
argv	array
[	O
i	int
]	O
)	O
;	O
if	O
(	O
depth_cue_steps	int
<	O
1	int
)	O
{	O
depth_cue_steps	int
=	O
1	int
;	O
}	O
}	O
else	O
if	O
(	O
strcmp	function
(	O
argv	array
[	O
i	int
]	O
,	O
"-da"	pointer
)	O
==	O
0	int
&&	O
++	O
i	int
<	O
argc	pointer
)	O
{	O
droneAggressiveness	double
=	O
atof	function
(	O
argv	array
[	O
i	int
]	O
)	O
*	O
NM	int
;	O
if	O
(	O
droneAggressiveness	double
<=	O
MIN_DRONE_FACTOR	int
)	O
{	O
droneAggressiveness	double
=	O
MIN_DRONE_FACTOR	int
;	O
}	O
else	O
if	O
(	O
droneAggressiveness	double
>	O
1.0	int
)	O
{	O
droneAggressiveness	double
=	O
1.0	int
;	O
}	O
}	O
else	O
if	O
(	O
strcmp	function
(	O
argv	array
[	O
i	int
]	O
,	O
"-display"	pointer
)	O
==	O
0	int
&&	O
++	O
i	int
<	O
argc	pointer
)	O
{	O
strncpy	function
(	O
display	pointer
,	O
argv	array
[	O
i	int
]	O
,	O
64	int
)	O
;	O
}	O
else	O
if	O
(	O
strcmp	function
(	O
argv	array
[	O
i	int
]	O
,	O
"-geometry"	pointer
)	O
==	O
0	int
&&	O
++	O
i	int
<	O
argc	pointer
)	O
{	O
sprintf	function
(	O
&	O
switches	pointer
[	O
strlen	function
(	O
switches	pointer
)	O
]	O
,	O
"|-geometry|%s"	pointer
,	O
argv	array
[	O
i	int
]	O
)	O
;	O
}	O
else	O
if	O
(	O
strcmp	function
(	O
argv	array
[	O
i	int
]	O
,	O
"-js"	pointer
)	O
==	O
0	int
)	O
{	O
if	O
(	O
argv	array
[	O
i	int
+	O
1	int
]	O
&&	O
*	O
(	O
argv	array
[	O
i	int
+	O
1	int
]	O
)	O
!=	O
'-'	O
)	O
{	O
SetJoystickPort	function
(	O
argv	array
[	O
++	O
i	int
]	O
)	O
;	O
}	O
else	O
{	O
SetJoystickPort	function
(	O
"/dev/cua0"	pointer
)	O
;	O
}	O
}	O
else	O
if	O
(	O
strcmp	function
(	O
argv	array
[	O
i	int
]	O
,	O
"-name"	pointer
)	O
==	O
0	int
&&	O
++	O
i	int
<	O
argc	pointer
)	O
{	O
strncpy	function
(	O
name	pointer
,	O
argv	array
[	O
i	int
]	O
,	O
64	int
)	O
;	O
}	O
else	O
if	O
(	O
strcmp	function
(	O
argv	array
[	O
i	int
]	O
,	O
"-plane"	pointer
)	O
==	O
0	int
&&	O
++	O
i	int
<	O
argc	pointer
)	O
{	O
sprintf	function
(	O
&	O
switches	pointer
[	O
strlen	function
(	O
switches	pointer
)	O
]	O
,	O
"|-plane|%s"	pointer
,	O
argv	array
[	O
i	int
]	O
)	O
;	O
}	O
else	O
if	O
(	O
strcmp	function
(	O
argv	array
[	O
i	int
]	O
,	O
"-scene"	pointer
)	O
==	O
0	int
&&	O
++	O
i	int
<	O
argc	pointer
)	O
{	O
sceneFile	pointer
=	O
argv	array
[	O
i	int
]	O
;	O
}	O
else	O
if	O
(	O
strcmp	function
(	O
argv	array
[	O
i	int
]	O
,	O
"-stealth"	pointer
)	O
==	O
0	int
)	O
{	O
sprintf	function
(	O
&	O
switches	pointer
[	O
strlen	function
(	O
switches	pointer
)	O
]	O
,	O
"|-stealth"	pointer
)	O
;	O
}	O
else	O
if	O
(	O
strcmp	function
(	O
argv	array
[	O
i	int
]	O
,	O
"-end-game"	pointer
)	O
==	O
0	int
)	O
{	O
sprintf	function
(	O
&	O
switches	pointer
[	O
strlen	function
(	O
switches	pointer
)	O
]	O
,	O
"|-end-game"	pointer
)	O
;	O
}	O
else	O
if	O
(	O
strcmp	function
(	O
argv	array
[	O
i	int
]	O
,	O
"-threshold-range"	pointer
)	O
==	O
0	int
&&	O
++	O
i	int
<	O
argc	pointer
)	O
{	O
double	O
end_game_threshold_nm	double
;	O
end_game_threshold_nm	double
=	O
atof	function
(	O
argv	array
[	O
i	int
]	O
)	O
;	O
if	O
(	O
end_game_threshold_nm	double
<	O
1.0	int
)	O
{	O
end_game_threshold_nm	double
=	O
1.0	int
;	O
}	O
end_game_threshold_meters	double
=	O
FEETtoMETERS	O
(	O
end_game_threshold_nm	double
*	O
NM	int
)	O
;	O
}	O
else	O
if	O
(	O
strcmp	function
(	O
argv	array
[	O
i	int
]	O
,	O
"-control"	pointer
)	O
==	O
0	int
)	O
{	O
sprintf	function
(	O
&	O
switches	pointer
[	O
strlen	function
(	O
switches	pointer
)	O
]	O
,	O
"|-stealth"	pointer
)	O
;	O
}	O
else	O
if	O
(	O
strcmp	function
(	O
argv	array
[	O
i	int
]	O
,	O
"-team"	pointer
)	O
==	O
0	int
&&	O
++	O
i	int
<	O
argc	pointer
)	O
{	O
sprintf	function
(	O
&	O
switches	pointer
[	O
strlen	function
(	O
switches	pointer
)	O
]	O
,	O
"|-team|%s"	pointer
,	O
argv	array
[	O
i	int
]	O
)	O
;	O
}	O
else	O
if	O
(	O
strcmp	function
(	O
argv	array
[	O
i	int
]	O
,	O
"-latitude"	pointer
)	O
==	O
0	int
&&	O
++	O
i	int
<	O
argc	pointer
)	O
{	O
sprintf	function
(	O
&	O
switches	pointer
[	O
strlen	function
(	O
switches	pointer
)	O
]	O
,	O
"|-altitude|%s"	pointer
,	O
argv	array
[	O
i	int
]	O
)	O
;	O
}	O
else	O
if	O
(	O
strcmp	function
(	O
argv	array
[	O
i	int
]	O
,	O
"-longitude"	pointer
)	O
==	O
0	int
&&	O
++	O
i	int
<	O
argc	pointer
)	O
{	O
sprintf	function
(	O
&	O
switches	pointer
[	O
strlen	function
(	O
switches	pointer
)	O
]	O
,	O
"|-altitude|%s"	pointer
,	O
argv	array
[	O
i	int
]	O
)	O
;	O
}	O
else	O
if	O
(	O
strcmp	function
(	O
argv	array
[	O
i	int
]	O
,	O
"-altitude"	pointer
)	O
==	O
0	int
&&	O
++	O
i	int
<	O
argc	pointer
)	O
{	O
sprintf	function
(	O
&	O
switches	pointer
[	O
strlen	function
(	O
switches	pointer
)	O
]	O
,	O
"|-altitude|%s"	pointer
,	O
argv	array
[	O
i	int
]	O
)	O
;	O
}	O
else	O
if	O
(	O
strcmp	function
(	O
argv	array
[	O
i	int
]	O
,	O
"-heading"	pointer
)	O
==	O
0	int
&&	O
++	O
i	int
<	O
argc	pointer
)	O
{	O
sprintf	function
(	O
&	O
switches	pointer
[	O
strlen	function
(	O
switches	pointer
)	O
]	O
,	O
"|-heading|%s"	pointer
,	O
argv	array
[	O
i	int
]	O
)	O
;	O
}	O
else	O
if	O
(	O
strcmp	function
(	O
argv	array
[	O
i	int
]	O
,	O
"-airspeed-kts"	pointer
)	O
==	O
0	int
&&	O
++	O
i	int
<	O
argc	pointer
)	O
{	O
sprintf	function
(	O
&	O
switches	pointer
[	O
strlen	function
(	O
switches	pointer
)	O
]	O
,	O
"|-airspeed-kts|%s"	pointer
,	O
argv	array
[	O
i	int
]	O
)	O
;	O
}	O
else	O
if	O
(	O
strcmp	function
(	O
argv	array
[	O
i	int
]	O
,	O
"-visibility"	pointer
)	O
==	O
0	int
&&	O
++	O
i	int
<	O
argc	pointer
)	O
{	O
visibility	double
=	O
atof	function
(	O
argv	array
[	O
i	int
]	O
)	O
;	O
if	O
(	O
visibility	double
<	O
1.0	int
)	O
{	O
visibility	double
=	O
1.0	int
;	O
}	O
else	O
if	O
(	O
visibility	double
>	O
500.0	int
)	O
{	O
visibility	double
=	O
500.0	int
;	O
}	O
visibility	double
*=	O
NM	int
;	O
visibility	double
=	O
FEETtoMETERS	O
(	O
visibility	double
)	O
;	O
}	O
else	O
if	O
(	O
strcmp	function
(	O
argv	array
[	O
i	int
]	O
,	O
"-frame-rate"	pointer
)	O
==	O
0	int
&&	O
++	O
i	int
<	O
argc	pointer
)	O
{	O
double	O
val	array
=	O
atof	function
(	O
argv	array
[	O
i	int
]	O
)	O
;	O
frame_interval_millisec	double
=	O
1000.0	int
/	O
val	array
;	O
real_delta_t	int
=	O
0	int
;	O
}	O
else	O
if	O
(	O
strcmp	function
(	O
argv	array
[	O
i	int
]	O
,	O
"-update-rate"	pointer
)	O
==	O
0	int
&&	O
++	O
i	int
<	O
argc	pointer
)	O
{	O
double	O
val	array
=	O
atof	function
(	O
argv	array
[	O
i	int
]	O
)	O
;	O
update_interval_millisec	double
=	O
1000.0	int
/	O
val	array
;	O
real_delta_t	int
=	O
0	int
;	O
}	O
else	O
if	O
(	O
strcmp	function
(	O
argv	array
[	O
i	int
]	O
,	O
"-watch-frame-rate"	pointer
)	O
==	O
0	int
)	O
{	O
watch_frame_rate	int
=	O
1	int
;	O
}	O
else	O
if	O
(	O
strcmp	function
(	O
argv	array
[	O
i	int
]	O
,	O
"-transfer-entity-mode"	pointer
)	O
==	O
0	int
&&	O
++	O
i	int
<	O
argc	pointer
)	O
{	O
transferEntityIdBits	int
=	O
strtol	function
(	O
argv	array
[	O
i	int
]	O
,	O
NULL	O
,	O
0	int
)	O
;	O
}	O
else	O
if	O
(	O
strcmp	function
(	O
argv	array
[	O
i	int
]	O
,	O
"-subject-entity-id"	pointer
)	O
==	O
0	int
&&	O
++	O
i	int
<	O
argc	pointer
)	O
{	O
dis_entity_id	struct
id	char
;	O
if	O
(	O
DISParseEntityID	function
(	O
&	O
id	char
,	O
argv	array
[	O
i	int
]	O
,	O
strlen	function
(	O
argv	array
[	O
i	int
]	O
)	O
+	O
1	int
,	O
":/."	pointer
)	O
==	O
0	int
)	O
{	O
subjectEntityID	struct
=	O
id	char
;	O
subjectEntitySpecified	int
=	O
1	int
;	O
}	O
else	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Invalid entity ID \"%s\"\n"	pointer
,	O
argv	array
[	O
i	int
]	O
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
}	O
else	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Invalid switch \"%s\"\n"	pointer
,	O
argv	array
[	O
i	int
]	O
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
break	O
;	O
}	O
}	O
}	O
