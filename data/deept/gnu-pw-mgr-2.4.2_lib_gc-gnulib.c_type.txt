Gc_rc	enum
gc_init	function
(	O
void	O
)	O
{	O
return	O
GC_OK	int
;	O
}	O
void	O
gc_done	function
(	O
void	O
)	O
{	O
return	O
;	O
}	O
static	O
Gc_rc	enum
randomize	function
(	O
int	O
level	int
,	O
char	O
*	O
data	pointer
,	O
size_t	long
datalen	long
)	O
{	O
int	O
fd	int
;	O
const	O
char	O
*	O
device	pointer
;	O
size_t	long
len	long
=	O
0	int
;	O
int	O
rc	int
;	O
switch	O
(	O
level	int
)	O
{	O
case	O
0	int
:	O
device	pointer
=	O
NAME_OF_NONCE_DEVICE	pointer
;	O
break	O
;	O
case	O
1	int
:	O
device	pointer
=	O
NAME_OF_PSEUDO_RANDOM_DEVICE	pointer
;	O
break	O
;	O
default	O
:	O
device	pointer
=	O
NAME_OF_RANDOM_DEVICE	pointer
;	O
break	O
;	O
}	O
if	O
(	O
strcmp	function
(	O
device	pointer
,	O
"no"	pointer
)	O
==	O
0	int
)	O
return	O
GC_RANDOM_ERROR	int
;	O
fd	int
=	O
open	function
(	O
device	pointer
,	O
O_RDONLY	int
)	O
;	O
if	O
(	O
fd	int
<	O
0	int
)	O
return	O
GC_RANDOM_ERROR	int
;	O
do	O
{	O
ssize_t	long
tmp	long
;	O
tmp	long
=	O
read	function
(	O
fd	int
,	O
data	pointer
,	O
datalen	long
)	O
;	O
if	O
(	O
tmp	long
<	O
0	int
)	O
{	O
int	O
save_errno	int
=	O
errno	O
;	O
close	function
(	O
fd	int
)	O
;	O
errno	O
=	O
save_errno	int
;	O
return	O
GC_RANDOM_ERROR	int
;	O
}	O
len	long
+=	O
tmp	long
;	O
}	O
while	O
(	O
len	long
<	O
datalen	long
)	O
;	O
rc	int
=	O
close	function
(	O
fd	int
)	O
;	O
if	O
(	O
rc	int
<	O
0	int
)	O
return	O
GC_RANDOM_ERROR	int
;	O
return	O
GC_OK	int
;	O
}	O
Gc_rc	enum
gc_nonce	function
(	O
char	O
*	O
data	pointer
,	O
size_t	long
datalen	long
)	O
{	O
return	O
randomize	function
(	O
0	int
,	O
data	pointer
,	O
datalen	long
)	O
;	O
}	O
Gc_rc	enum
gc_pseudo_random	function
(	O
char	O
*	O
data	pointer
,	O
size_t	long
datalen	long
)	O
{	O
return	O
randomize	function
(	O
1	int
,	O
data	pointer
,	O
datalen	long
)	O
;	O
}	O
Gc_rc	enum
gc_random	function
(	O
char	O
*	O
data	pointer
,	O
size_t	long
datalen	long
)	O
{	O
return	O
randomize	function
(	O
2	int
,	O
data	pointer
,	O
datalen	long
)	O
;	O
}	O
void	O
gc_set_allocators	function
(	O
gc_malloc_t	pointer
func_malloc	pointer
,	O
gc_malloc_t	pointer
secure_malloc	pointer
,	O
gc_secure_check_t	pointer
secure_check	pointer
,	O
gc_realloc_t	pointer
func_realloc	pointer
,	O
gc_free_t	pointer
func_free	pointer
)	O
{	O
return	O
;	O
}	O
typedef	O
struct	O
_gc_cipher_ctx	struct
{	O
Gc_cipher	enum
alg	enum
;	O
Gc_cipher_mode	enum
mode	enum
;	O
}	O
_gc_cipher_ctx	struct
;	O
Gc_rc	enum
gc_cipher_open	function
(	O
Gc_cipher	enum
alg	enum
,	O
Gc_cipher_mode	enum
mode	enum
,	O
gc_cipher_handle	pointer
*	O
outhandle	pointer
)	O
{	O
_gc_cipher_ctx	struct
*	O
ctx	pointer
;	O
Gc_rc	enum
rc	int
=	O
GC_OK	int
;	O
ctx	pointer
=	O
calloc	function
(	O
sizeof	O
(	O
*	O
ctx	pointer
)	O
,	O
1	int
)	O
;	O
if	O
(	O
!	O
ctx	pointer
)	O
return	O
GC_MALLOC_ERROR	int
;	O
ctx	pointer
->	O
alg	enum
=	O
alg	enum
;	O
ctx	pointer
->	O
mode	enum
=	O
mode	enum
;	O
switch	O
(	O
alg	enum
)	O
{	O
default	O
:	O
rc	int
=	O
GC_INVALID_CIPHER	int
;	O
}	O
if	O
(	O
rc	int
==	O
GC_OK	int
)	O
*	O
outhandle	pointer
=	O
ctx	pointer
;	O
else	O
free	function
(	O
ctx	pointer
)	O
;	O
return	O
rc	int
;	O
}	O
Gc_rc	enum
gc_cipher_setkey	function
(	O
gc_cipher_handle	pointer
handle	pointer
,	O
size_t	long
keylen	long
,	O
const	O
char	O
*	O
key	pointer
)	O
{	O
_gc_cipher_ctx	struct
*	O
ctx	pointer
=	O
handle	pointer
;	O
switch	O
(	O
ctx	pointer
->	O
alg	enum
)	O
{	O
default	O
:	O
return	O
GC_INVALID_CIPHER	int
;	O
}	O
return	O
GC_OK	int
;	O
}	O
Gc_rc	enum
gc_cipher_setiv	function
(	O
gc_cipher_handle	pointer
handle	pointer
,	O
size_t	long
ivlen	long
,	O
const	O
char	O
*	O
iv	pointer
)	O
{	O
_gc_cipher_ctx	struct
*	O
ctx	pointer
=	O
handle	pointer
;	O
switch	O
(	O
ctx	pointer
->	O
alg	enum
)	O
{	O
default	O
:	O
return	O
GC_INVALID_CIPHER	int
;	O
}	O
return	O
GC_OK	int
;	O
}	O
Gc_rc	enum
gc_cipher_encrypt_inline	function
(	O
gc_cipher_handle	pointer
handle	pointer
,	O
size_t	long
len	long
,	O
char	O
*	O
data	pointer
)	O
{	O
_gc_cipher_ctx	struct
*	O
ctx	pointer
=	O
handle	pointer
;	O
switch	O
(	O
ctx	pointer
->	O
alg	enum
)	O
{	O
default	O
:	O
return	O
GC_INVALID_CIPHER	int
;	O
}	O
return	O
GC_OK	int
;	O
}	O
Gc_rc	enum
gc_cipher_decrypt_inline	function
(	O
gc_cipher_handle	pointer
handle	pointer
,	O
size_t	long
len	long
,	O
char	O
*	O
data	pointer
)	O
{	O
_gc_cipher_ctx	struct
*	O
ctx	pointer
=	O
handle	pointer
;	O
switch	O
(	O
ctx	pointer
->	O
alg	enum
)	O
{	O
default	O
:	O
return	O
GC_INVALID_CIPHER	int
;	O
}	O
return	O
GC_OK	int
;	O
}	O
Gc_rc	enum
gc_cipher_close	function
(	O
gc_cipher_handle	pointer
handle	pointer
)	O
{	O
_gc_cipher_ctx	struct
*	O
ctx	pointer
=	O
handle	pointer
;	O
free	function
(	O
ctx	pointer
)	O
;	O
return	O
GC_OK	int
;	O
}	O
typedef	O
struct	O
_gc_hash_ctx	struct
{	O
Gc_hash	enum
alg	enum
;	O
Gc_hash_mode	enum
mode	enum
;	O
char	O
hash	enum
[	O
MAX_DIGEST_SIZE	int
]	O
;	O
}	O
_gc_hash_ctx	struct
;	O
Gc_rc	enum
gc_hash_open	function
(	O
Gc_hash	enum
hash	enum
,	O
Gc_hash_mode	enum
mode	enum
,	O
gc_hash_handle	pointer
*	O
outhandle	pointer
)	O
{	O
_gc_hash_ctx	struct
*	O
ctx	pointer
;	O
Gc_rc	enum
rc	int
=	O
GC_OK	int
;	O
if	O
(	O
mode	enum
!=	O
0	int
)	O
return	O
GC_INVALID_HASH	int
;	O
ctx	pointer
=	O
calloc	function
(	O
sizeof	O
(	O
*	O
ctx	pointer
)	O
,	O
1	int
)	O
;	O
if	O
(	O
!	O
ctx	pointer
)	O
return	O
GC_MALLOC_ERROR	int
;	O
ctx	pointer
->	O
alg	enum
=	O
hash	enum
;	O
ctx	pointer
->	O
mode	enum
=	O
mode	enum
;	O
switch	O
(	O
hash	enum
)	O
{	O
default	O
:	O
rc	int
=	O
GC_INVALID_HASH	int
;	O
break	O
;	O
}	O
if	O
(	O
rc	int
==	O
GC_OK	int
)	O
*	O
outhandle	pointer
=	O
ctx	pointer
;	O
else	O
free	function
(	O
ctx	pointer
)	O
;	O
return	O
rc	int
;	O
}	O
Gc_rc	enum
gc_hash_clone	function
(	O
gc_hash_handle	pointer
handle	pointer
,	O
gc_hash_handle	pointer
*	O
outhandle	pointer
)	O
{	O
_gc_hash_ctx	struct
*	O
in	pointer
=	O
handle	pointer
;	O
_gc_hash_ctx	struct
*	O
out	pointer
;	O
*	O
outhandle	pointer
=	O
out	pointer
=	O
calloc	function
(	O
sizeof	O
(	O
*	O
out	pointer
)	O
,	O
1	int
)	O
;	O
if	O
(	O
!	O
out	pointer
)	O
return	O
GC_MALLOC_ERROR	int
;	O
memcpy	function
(	O
out	pointer
,	O
in	pointer
,	O
sizeof	O
(	O
*	O
out	pointer
)	O
)	O
;	O
return	O
GC_OK	int
;	O
}	O
size_t	long
gc_hash_digest_length	function
(	O
Gc_hash	enum
hash	enum
)	O
{	O
size_t	long
len	long
;	O
switch	O
(	O
hash	enum
)	O
{	O
case	O
GC_MD2	int
:	O
len	long
=	O
GC_MD2_DIGEST_SIZE	int
;	O
break	O
;	O
case	O
GC_MD4	int
:	O
len	long
=	O
GC_MD4_DIGEST_SIZE	int
;	O
break	O
;	O
case	O
GC_MD5	int
:	O
len	long
=	O
GC_MD5_DIGEST_SIZE	int
;	O
break	O
;	O
case	O
GC_RMD160	int
:	O
len	long
=	O
GC_RMD160_DIGEST_SIZE	int
;	O
break	O
;	O
case	O
GC_SHA1	int
:	O
len	long
=	O
GC_SHA1_DIGEST_SIZE	int
;	O
break	O
;	O
case	O
GC_SM3	int
:	O
len	long
=	O
GC_SM3_DIGEST_SIZE	int
;	O
break	O
;	O
default	O
:	O
return	O
0	int
;	O
}	O
return	O
len	long
;	O
}	O
void	O
gc_hash_write	function
(	O
gc_hash_handle	pointer
handle	pointer
,	O
size_t	long
len	long
,	O
const	O
char	O
*	O
data	pointer
)	O
{	O
_gc_hash_ctx	struct
*	O
ctx	pointer
=	O
handle	pointer
;	O
switch	O
(	O
ctx	pointer
->	O
alg	enum
)	O
{	O
default	O
:	O
break	O
;	O
}	O
}	O
const	O
char	O
*	O
gc_hash_read	function
(	O
gc_hash_handle	pointer
handle	pointer
)	O
{	O
_gc_hash_ctx	struct
*	O
ctx	pointer
=	O
handle	pointer
;	O
const	O
char	O
*	O
ret	pointer
=	O
NULL	O
;	O
switch	O
(	O
ctx	pointer
->	O
alg	enum
)	O
{	O
default	O
:	O
return	O
NULL	O
;	O
}	O
return	O
ret	pointer
;	O
}	O
void	O
gc_hash_close	function
(	O
gc_hash_handle	pointer
handle	pointer
)	O
{	O
_gc_hash_ctx	struct
*	O
ctx	pointer
=	O
handle	pointer
;	O
free	function
(	O
ctx	pointer
)	O
;	O
}	O
Gc_rc	enum
gc_hash_buffer	function
(	O
Gc_hash	enum
hash	enum
,	O
const	O
void	O
*	O
in	pointer
,	O
size_t	long
inlen	long
,	O
char	O
*	O
resbuf	pointer
)	O
{	O
switch	O
(	O
hash	enum
)	O
{	O
default	O
:	O
return	O
GC_INVALID_HASH	int
;	O
}	O
return	O
GC_OK	int
;	O
}	O
Gc_rc	enum
gc_hmac_sha1	function
(	O
const	O
void	O
*	O
key	pointer
,	O
size_t	long
keylen	long
,	O
const	O
void	O
*	O
in	pointer
,	O
size_t	long
inlen	long
,	O
char	O
*	O
resbuf	pointer
)	O
{	O
hmac_sha1	function
(	O
key	pointer
,	O
keylen	long
,	O
in	pointer
,	O
inlen	long
,	O
resbuf	pointer
)	O
;	O
return	O
GC_OK	int
;	O
}	O
