struct	O
header_call_args	struct
{	O
msgset_t	struct
*	O
mspec	pointer
;	O
mu_message_t	pointer
msg	pointer
;	O
size_t	long
cols_rest	long
;	O
char	O
*	O
buf	pointer
;	O
size_t	long
size	long
;	O
}	O
;	O
struct	O
header_segm	struct
{	O
struct	O
header_segm	struct
*	O
next	pointer
;	O
int	O
align	int
;	O
size_t	long
width	long
;	O
void	O
*	O
data	pointer
;	O
char	O
*	O
(	O
*	O
get	pointer
)	O
(	O
struct	O
header_call_args	struct
*	O
args	pointer
,	O
void	O
*	O
data	pointer
)	O
;	O
}	O
;	O
void	O
header_ensure_space	function
(	O
struct	O
header_call_args	struct
*	O
args	pointer
,	O
size_t	long
size	long
)	O
{	O
if	O
(	O
size	long
>	O
args	pointer
->	O
size	long
)	O
{	O
args	pointer
->	O
buf	pointer
=	O
mu_realloc	function
(	O
args	pointer
->	O
buf	pointer
,	O
size	long
)	O
;	O
args	pointer
->	O
size	long
=	O
size	long
;	O
}	O
}	O
static	O
char	O
*	O
header_buf_string_len	function
(	O
struct	O
header_call_args	struct
*	O
args	pointer
,	O
const	O
char	O
*	O
str	pointer
,	O
size_t	long
len	long
)	O
{	O
header_ensure_space	function
(	O
args	pointer
,	O
len	long
+	O
1	int
)	O
;	O
memcpy	function
(	O
args	pointer
->	O
buf	pointer
,	O
str	pointer
,	O
len	long
)	O
;	O
args	pointer
->	O
buf	pointer
[	O
len	long
]	O
=	O
0	int
;	O
return	O
args	pointer
->	O
buf	pointer
;	O
}	O
static	O
char	O
*	O
header_buf_string	function
(	O
struct	O
header_call_args	struct
*	O
args	pointer
,	O
const	O
char	O
*	O
str	pointer
)	O
{	O
if	O
(	O
!	O
str	pointer
)	O
return	O
header_buf_string_len	function
(	O
args	pointer
,	O
""	pointer
,	O
0	int
)	O
;	O
return	O
header_buf_string_len	function
(	O
args	pointer
,	O
str	pointer
,	O
strlen	function
(	O
str	pointer
)	O
)	O
;	O
}	O
static	O
void	O
format_pad	function
(	O
size_t	long
n	pointer
)	O
{	O
for	O
(	O
;	O
n	pointer
;	O
n	pointer
--	O
)	O
mu_stream_write	function
(	O
mu_strout	pointer
,	O
" "	pointer
,	O
1	int
,	O
NULL	O
)	O
;	O
}	O
static	O
void	O
format_headline	function
(	O
struct	O
header_segm	struct
*	O
seg	pointer
,	O
msgset_t	struct
*	O
mspec	pointer
,	O
mu_message_t	pointer
msg	pointer
)	O
{	O
int	O
screen_cols	int
=	O
util_screen_columns	function
(	O
)	O
-	O
2	int
;	O
int	O
out_cols	int
=	O
0	int
;	O
struct	O
header_call_args	struct
args	pointer
;	O
args	pointer
.	O
mspec	pointer
=	O
mspec	pointer
;	O
args	pointer
.	O
msg	pointer
=	O
msg	pointer
;	O
args	pointer
.	O
buf	pointer
=	O
NULL	O
;	O
args	pointer
.	O
size	long
=	O
0	int
;	O
for	O
(	O
;	O
seg	pointer
;	O
seg	pointer
=	O
seg	pointer
->	O
next	pointer
)	O
{	O
size_t	long
width	long
,	O
len	long
;	O
size_t	long
cols_rest	long
=	O
screen_cols	int
-	O
out_cols	int
;	O
char	O
*	O
p	pointer
;	O
args	pointer
.	O
cols_rest	long
=	O
cols_rest	long
;	O
p	pointer
=	O
seg	pointer
->	O
get	pointer
(	O
&	O
args	pointer
,	O
seg	pointer
->	O
data	pointer
)	O
;	O
if	O
(	O
!	O
p	pointer
)	O
p	pointer
=	O
""	pointer
;	O
len	long
=	O
strlen	function
(	O
p	pointer
)	O
;	O
if	O
(	O
seg	pointer
->	O
width	long
)	O
width	long
=	O
seg	pointer
->	O
width	long
;	O
else	O
width	long
=	O
len	long
;	O
if	O
(	O
width	long
>	O
cols_rest	long
)	O
width	long
=	O
cols_rest	long
;	O
if	O
(	O
len	long
>	O
width	long
)	O
len	long
=	O
width	long
;	O
if	O
(	O
seg	pointer
->	O
align	int
==	O
ALIGN_RIGHT	int
)	O
{	O
format_pad	function
(	O
width	long
-	O
len	long
)	O
;	O
mu_printf	function
(	O
"%*.*s"	pointer
,	O
(	O
int	O
)	O
len	long
,	O
(	O
int	O
)	O
len	long
,	O
p	pointer
)	O
;	O
}	O
else	O
{	O
mu_printf	function
(	O
"%*.*s"	pointer
,	O
(	O
int	O
)	O
len	long
,	O
(	O
int	O
)	O
len	long
,	O
p	pointer
)	O
;	O
format_pad	function
(	O
width	long
-	O
len	long
)	O
;	O
}	O
out_cols	int
+=	O
width	long
;	O
}	O
mu_printf	function
(	O
"\n"	pointer
)	O
;	O
free	function
(	O
args	pointer
.	O
buf	pointer
)	O
;	O
}	O
static	O
void	O
free_headline	function
(	O
struct	O
header_segm	struct
*	O
seg	pointer
)	O
{	O
while	O
(	O
seg	pointer
)	O
{	O
struct	O
header_segm	struct
*	O
next	pointer
=	O
seg	pointer
->	O
next	pointer
;	O
if	O
(	O
seg	pointer
->	O
data	pointer
)	O
free	function
(	O
seg	pointer
->	O
data	pointer
)	O
;	O
free	function
(	O
seg	pointer
)	O
;	O
seg	pointer
=	O
next	pointer
;	O
}	O
}	O
static	O
char	O
*	O
hdr_text	function
(	O
struct	O
header_call_args	struct
*	O
args	pointer
,	O
void	O
*	O
data	pointer
)	O
{	O
return	O
data	pointer
;	O
}	O
static	O
char	O
*	O
hdr_cur	function
(	O
struct	O
header_call_args	struct
*	O
args	pointer
,	O
void	O
*	O
data	pointer
)	O
{	O
if	O
(	O
is_current_message	function
(	O
args	pointer
->	O
mspec	pointer
->	O
msg_part	pointer
[	O
0	int
]	O
)	O
)	O
return	O
(	O
char	O
*	O
)	O
data	pointer
;	O
return	O
" "	pointer
;	O
}	O
static	O
char	O
*	O
hdr_attr	function
(	O
struct	O
header_call_args	struct
*	O
args	pointer
,	O
void	O
*	O
data	pointer
)	O
{	O
mu_attribute_t	pointer
attr	pointer
;	O
char	O
cflag	char
;	O
mu_message_get_attribute	function
(	O
args	pointer
->	O
msg	pointer
,	O
&	O
attr	pointer
)	O
;	O
if	O
(	O
mu_attribute_is_userflag	function
(	O
attr	pointer
,	O
MAIL_ATTRIBUTE_MBOXED	int
)	O
)	O
cflag	char
=	O
'M'	O
;	O
else	O
if	O
(	O
mu_attribute_is_userflag	function
(	O
attr	pointer
,	O
MAIL_ATTRIBUTE_PRESERVED	int
)	O
)	O
cflag	char
=	O
'P'	O
;	O
else	O
if	O
(	O
mu_attribute_is_userflag	function
(	O
attr	pointer
,	O
MAIL_ATTRIBUTE_SAVED	int
)	O
)	O
cflag	char
=	O
'*'	O
;	O
else	O
if	O
(	O
mu_attribute_is_userflag	function
(	O
attr	pointer
,	O
MAIL_ATTRIBUTE_TAGGED	int
)	O
)	O
cflag	char
=	O
'T'	O
;	O
else	O
if	O
(	O
mu_attribute_is_userflag	function
(	O
attr	pointer
,	O
MAIL_ATTRIBUTE_SHOWN	int
)	O
)	O
cflag	char
=	O
'R'	O
;	O
else	O
if	O
(	O
mu_attribute_is_recent	function
(	O
attr	pointer
)	O
)	O
cflag	char
=	O
'N'	O
;	O
else	O
if	O
(	O
!	O
mu_attribute_is_read	function
(	O
attr	pointer
)	O
)	O
cflag	char
=	O
'U'	O
;	O
else	O
cflag	char
=	O
' '	O
;	O
return	O
header_buf_string_len	function
(	O
args	pointer
,	O
&	O
cflag	char
,	O
1	int
)	O
;	O
}	O
static	O
char	O
*	O
hdr_date	function
(	O
struct	O
header_call_args	struct
*	O
args	pointer
,	O
void	O
*	O
data	pointer
)	O
{	O
char	O
date	struct
[	O
80	int
]	O
;	O
mu_header_t	pointer
hdr	pointer
;	O
char	O
const	O
*	O
fmt	pointer
=	O
data	pointer
?	O
data	pointer
:	O
"%a %b %e %H:%M"	pointer
;	O
mu_message_get_header	function
(	O
args	pointer
->	O
msg	pointer
,	O
&	O
hdr	pointer
)	O
;	O
date	struct
[	O
0	int
]	O
=	O
0	int
;	O
if	O
(	O
mailvar_is_true	function
(	O
mailvar_name_datefield	pointer
)	O
&&	O
mu_header_get_value	O
(	O
hdr	pointer
,	O
MU_HEADER_DATE	pointer
,	O
date	struct
,	O
sizeof	O
(	O
date	struct
)	O
,	O
NULL	O
)	O
==	O
0	int
)	O
{	O
time_t	long
t	long
;	O
if	O
(	O
mu_parse_date	function
(	O
date	struct
,	O
&	O
t	long
,	O
NULL	O
)	O
==	O
0	int
)	O
strftime	function
(	O
date	struct
,	O
sizeof	O
(	O
date	struct
)	O
,	O
fmt	pointer
,	O
localtime	function
(	O
&	O
t	long
)	O
)	O
;	O
else	O
date	struct
[	O
0	int
]	O
=	O
0	int
;	O
}	O
if	O
(	O
date	struct
[	O
0	int
]	O
==	O
0	int
)	O
{	O
const	O
char	O
*	O
p	pointer
;	O
struct	O
tm	struct
tm	struct
;	O
struct	O
mu_timezone	struct
tz	pointer
;	O
mu_envelope_t	pointer
env	pointer
;	O
mu_message_get_envelope	function
(	O
args	pointer
->	O
msg	pointer
,	O
&	O
env	pointer
)	O
;	O
if	O
(	O
mu_envelope_sget_date	function
(	O
env	pointer
,	O
&	O
p	pointer
)	O
==	O
0	int
&&	O
mu_scan_datetime	function
(	O
p	pointer
,	O
MU_DATETIME_FROM	pointer
,	O
&	O
tm	struct
,	O
&	O
tz	pointer
,	O
NULL	O
)	O
==	O
0	int
)	O
strftime	function
(	O
date	struct
,	O
sizeof	O
(	O
date	struct
)	O
,	O
fmt	pointer
,	O
&	O
tm	struct
)	O
;	O
}	O
return	O
header_buf_string	function
(	O
args	pointer
,	O
date	struct
)	O
;	O
}	O
char	O
*	O
sender_string	function
(	O
mu_message_t	pointer
msg	pointer
)	O
{	O
char	O
*	O
from	pointer
=	O
NULL	O
;	O
if	O
(	O
mailvar_is_true	function
(	O
mailvar_name_fromfield	pointer
)	O
)	O
{	O
mu_header_t	pointer
hdr	pointer
;	O
if	O
(	O
mu_message_get_header	function
(	O
msg	pointer
,	O
&	O
hdr	pointer
)	O
==	O
0	int
&&	O
mu_header_aget_value_unfold	O
(	O
hdr	pointer
,	O
MU_HEADER_FROM	pointer
,	O
&	O
from	pointer
)	O
==	O
0	int
)	O
{	O
mu_address_t	pointer
address	array
=	O
NULL	O
;	O
if	O
(	O
mu_address_create	function
(	O
&	O
address	array
,	O
from	pointer
)	O
==	O
0	int
)	O
{	O
char	O
*	O
name	pointer
;	O
const	O
char	O
*	O
email	pointer
;	O
if	O
(	O
mu_address_sget_email	function
(	O
address	array
,	O
1	int
,	O
&	O
email	pointer
)	O
==	O
0	int
&&	O
email	pointer
)	O
{	O
if	O
(	O
mailvar_is_true	function
(	O
mailvar_name_showto	pointer
)	O
&&	O
mail_is_my_name	function
(	O
email	pointer
)	O
)	O
{	O
char	O
*	O
tmp	pointer
;	O
if	O
(	O
mu_header_aget_value_unfold	O
(	O
hdr	pointer
,	O
MU_HEADER_TO	pointer
,	O
&	O
tmp	pointer
)	O
==	O
0	int
)	O
{	O
mu_address_t	pointer
addr_to	pointer
;	O
if	O
(	O
mu_address_create	function
(	O
&	O
addr_to	pointer
,	O
tmp	pointer
)	O
==	O
0	int
)	O
{	O
mu_address_destroy	function
(	O
&	O
address	array
)	O
;	O
address	array
=	O
addr_to	pointer
;	O
}	O
free	function
(	O
tmp	pointer
)	O
;	O
}	O
}	O
}	O
if	O
(	O
(	O
mu_address_aget_personal	function
(	O
address	array
,	O
1	int
,	O
&	O
name	pointer
)	O
==	O
0	int
&&	O
name	pointer
)	O
||	O
(	O
mu_address_aget_email	function
(	O
address	array
,	O
1	int
,	O
&	O
name	pointer
)	O
==	O
0	int
&&	O
name	pointer
)	O
)	O
{	O
free	function
(	O
from	pointer
)	O
;	O
from	pointer
=	O
name	pointer
;	O
}	O
mu_address_destroy	function
(	O
&	O
address	array
)	O
;	O
}	O
}	O
util_rfc2047_decode	function
(	O
&	O
from	pointer
)	O
;	O
}	O
else	O
{	O
mu_envelope_t	pointer
env	pointer
=	O
NULL	O
;	O
const	O
char	O
*	O
sender	pointer
=	O
""	pointer
;	O
if	O
(	O
mu_message_get_envelope	function
(	O
msg	pointer
,	O
&	O
env	pointer
)	O
==	O
0	int
)	O
mu_envelope_sget_sender	function
(	O
env	pointer
,	O
&	O
sender	pointer
)	O
;	O
from	pointer
=	O
mu_strdup	function
(	O
sender	pointer
)	O
;	O
}	O
return	O
from	pointer
;	O
}	O
static	O
char	O
*	O
hdr_from	function
(	O
struct	O
header_call_args	struct
*	O
args	pointer
,	O
void	O
*	O
data	pointer
)	O
{	O
char	O
*	O
from	pointer
=	O
sender_string	function
(	O
args	pointer
->	O
msg	pointer
)	O
;	O
header_buf_string	function
(	O
args	pointer
,	O
from	pointer
)	O
;	O
free	function
(	O
from	pointer
)	O
;	O
return	O
args	pointer
->	O
buf	pointer
;	O
}	O
static	O
char	O
*	O
hdr_lines	function
(	O
struct	O
header_call_args	struct
*	O
args	pointer
,	O
void	O
*	O
data	pointer
)	O
{	O
size_t	long
m_lines	long
;	O
char	O
buf	pointer
[	O
UINTMAX_STRSIZE_BOUND	O
]	O
;	O
mu_message_lines	function
(	O
args	pointer
->	O
msg	pointer
,	O
&	O
m_lines	long
)	O
;	O
return	O
header_buf_string	function
(	O
args	pointer
,	O
umaxtostr	function
(	O
m_lines	long
,	O
buf	pointer
)	O
)	O
;	O
}	O
static	O
char	O
*	O
hdr_quick_lines	function
(	O
struct	O
header_call_args	struct
*	O
args	pointer
,	O
void	O
*	O
data	pointer
)	O
{	O
size_t	long
m_lines	long
;	O
char	O
buf	pointer
[	O
UINTMAX_STRSIZE_BOUND	O
]	O
;	O
int	O
rc	int
;	O
const	O
char	O
*	O
p	pointer
;	O
rc	int
=	O
mu_message_quick_lines	function
(	O
args	pointer
->	O
msg	pointer
,	O
&	O
m_lines	long
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
p	pointer
=	O
umaxtostr	function
(	O
m_lines	long
,	O
buf	pointer
)	O
;	O
else	O
p	pointer
=	O
"NA"	pointer
;	O
return	O
header_buf_string	function
(	O
args	pointer
,	O
p	pointer
)	O
;	O
}	O
static	O
char	O
*	O
hdr_number	function
(	O
struct	O
header_call_args	struct
*	O
args	pointer
,	O
void	O
*	O
data	pointer
)	O
{	O
char	O
buf	pointer
[	O
UINTMAX_STRSIZE_BOUND	O
]	O
;	O
return	O
header_buf_string	function
(	O
args	pointer
,	O
umaxtostr	function
(	O
args	pointer
->	O
mspec	pointer
->	O
msg_part	pointer
[	O
0	int
]	O
,	O
buf	pointer
)	O
)	O
;	O
}	O
static	O
char	O
*	O
hdr_size	function
(	O
struct	O
header_call_args	struct
*	O
args	pointer
,	O
void	O
*	O
data	pointer
)	O
{	O
size_t	long
m_size	long
;	O
char	O
buf	pointer
[	O
UINTMAX_STRSIZE_BOUND	O
]	O
;	O
mu_message_size	function
(	O
args	pointer
->	O
msg	pointer
,	O
&	O
m_size	long
)	O
;	O
return	O
header_buf_string	function
(	O
args	pointer
,	O
umaxtostr	function
(	O
m_size	long
,	O
buf	pointer
)	O
)	O
;	O
}	O
static	O
char	O
*	O
hdr_subject	function
(	O
struct	O
header_call_args	struct
*	O
args	pointer
,	O
void	O
*	O
data	pointer
)	O
{	O
mu_header_t	pointer
hdr	pointer
;	O
char	O
*	O
subj	pointer
=	O
NULL	O
;	O
mu_message_get_header	function
(	O
args	pointer
->	O
msg	pointer
,	O
&	O
hdr	pointer
)	O
;	O
mu_header_aget_value_unfold	O
(	O
hdr	pointer
,	O
MU_HEADER_SUBJECT	pointer
,	O
&	O
subj	pointer
)	O
;	O
util_rfc2047_decode	function
(	O
&	O
subj	pointer
)	O
;	O
header_buf_string	function
(	O
args	pointer
,	O
subj	pointer
)	O
;	O
free	function
(	O
subj	pointer
)	O
;	O
return	O
args	pointer
->	O
buf	pointer
;	O
}	O
static	O
char	O
*	O
hdr_q_subject	function
(	O
struct	O
header_call_args	struct
*	O
args	pointer
,	O
void	O
*	O
data	pointer
)	O
{	O
mu_header_t	pointer
hdr	pointer
;	O
char	O
*	O
subj	pointer
=	O
NULL	O
;	O
size_t	long
len	long
;	O
if	O
(	O
args	pointer
->	O
cols_rest	long
<=	O
2	int
)	O
return	O
"\"\""	pointer
;	O
mu_message_get_header	function
(	O
args	pointer
->	O
msg	pointer
,	O
&	O
hdr	pointer
)	O
;	O
mu_header_aget_value_unfold	O
(	O
hdr	pointer
,	O
MU_HEADER_SUBJECT	pointer
,	O
&	O
subj	pointer
)	O
;	O
if	O
(	O
!	O
subj	pointer
)	O
return	O
""	pointer
;	O
util_rfc2047_decode	function
(	O
&	O
subj	pointer
)	O
;	O
len	long
=	O
strlen	function
(	O
subj	pointer
)	O
;	O
if	O
(	O
len	long
+	O
2	int
>	O
args	pointer
->	O
cols_rest	long
)	O
len	long
=	O
args	pointer
->	O
cols_rest	long
-	O
2	int
;	O
header_ensure_space	function
(	O
args	pointer
,	O
len	long
+	O
3	int
)	O
;	O
args	pointer
->	O
buf	pointer
[	O
0	int
]	O
=	O
'"'	O
;	O
memcpy	function
(	O
args	pointer
->	O
buf	pointer
+	O
1	int
,	O
subj	pointer
,	O
len	long
)	O
;	O
args	pointer
->	O
buf	pointer
[	O
len	long
+	O
1	int
]	O
=	O
'"'	O
;	O
args	pointer
->	O
buf	pointer
[	O
len	long
+	O
2	int
]	O
=	O
0	int
;	O
free	function
(	O
subj	pointer
)	O
;	O
return	O
args	pointer
->	O
buf	pointer
;	O
}	O
static	O
struct	O
header_segm	struct
*	O
new_header_segment	function
(	O
int	O
align	int
,	O
size_t	long
width	long
,	O
void	O
*	O
data	pointer
,	O
char	O
*	O
(	O
*	O
get	pointer
)	O
(	O
struct	O
header_call_args	struct
*	O
,	O
void	O
*	O
)	O
)	O
{	O
struct	O
header_segm	struct
*	O
seg	pointer
=	O
mu_alloc	function
(	O
sizeof	O
(	O
*	O
seg	pointer
)	O
)	O
;	O
seg	pointer
->	O
next	pointer
=	O
NULL	O
;	O
seg	pointer
->	O
align	int
=	O
align	int
;	O
seg	pointer
->	O
width	long
=	O
width	long
;	O
seg	pointer
->	O
data	pointer
=	O
data	pointer
;	O
seg	pointer
->	O
get	pointer
=	O
get	pointer
;	O
return	O
seg	pointer
;	O
}	O
struct	O
header_segm	struct
*	O
compile_headline	function
(	O
const	O
char	O
*	O
str	pointer
)	O
{	O
struct	O
header_segm	struct
*	O
head	pointer
=	O
NULL	O
,	O
*	O
tail	pointer
=	O
NULL	O
;	O
char	O
*	O
text	pointer
;	O
int	O
align	int
;	O
size_t	long
width	long
;	O
while	O
(	O
*	O
str	pointer
)	O
{	O
struct	O
header_segm	struct
*	O
seg	pointer
;	O
size_t	long
len	long
;	O
char	O
*	O
p	pointer
=	O
strchr	function
(	O
str	pointer
,	O
'%'	O
)	O
;	O
if	O
(	O
!	O
p	pointer
)	O
len	long
=	O
strlen	function
(	O
str	pointer
)	O
;	O
else	O
len	long
=	O
p	pointer
-	O
str	pointer
;	O
if	O
(	O
len	long
)	O
{	O
text	pointer
=	O
mu_alloc	function
(	O
len	long
+	O
1	int
)	O
;	O
memcpy	function
(	O
text	pointer
,	O
str	pointer
,	O
len	long
)	O
;	O
text	pointer
[	O
len	long
]	O
=	O
0	int
;	O
seg	pointer
=	O
new_header_segment	function
(	O
ALIGN_LEFT	int
,	O
0	int
,	O
text	pointer
,	O
hdr_text	function
)	O
;	O
ATTACH	O
(	O
seg	pointer
)	O
;	O
}	O
if	O
(	O
!	O
p	pointer
)	O
break	O
;	O
str	pointer
=	O
++	O
p	pointer
;	O
if	O
(	O
*	O
str	pointer
==	O
'-'	O
)	O
{	O
str	pointer
++	O
;	O
align	int
=	O
ALIGN_LEFT	int
;	O
}	O
else	O
if	O
(	O
*	O
str	pointer
==	O
'+'	O
)	O
{	O
str	pointer
++	O
;	O
align	int
=	O
ALIGN_RIGHT	int
;	O
}	O
else	O
align	int
=	O
ALIGN_UNDEF	O
;	O
if	O
(	O
mu_isdigit	O
(	O
*	O
str	pointer
)	O
)	O
width	long
=	O
strtoul	function
(	O
str	pointer
,	O
(	O
char	O
*	O
*	O
)	O
&	O
str	pointer
,	O
10	int
)	O
;	O
else	O
width	long
=	O
0	int
;	O
switch	O
(	O
*	O
str	pointer
++	O
)	O
{	O
case	O
'%'	O
:	O
seg	pointer
=	O
new_header_segment	function
(	O
ALIGN_LEFT	int
,	O
0	int
,	O
mu_strdup	function
(	O
"%"	pointer
)	O
,	O
hdr_text	function
)	O
;	O
break	O
;	O
case	O
'a'	O
:	O
seg	pointer
=	O
new_header_segment	function
(	O
ALIGN_STRING	O
,	O
width	long
,	O
NULL	O
,	O
hdr_attr	function
)	O
;	O
break	O
;	O
case	O
'd'	O
:	O
seg	pointer
=	O
new_header_segment	function
(	O
ALIGN_STRING	O
,	O
width	long
,	O
NULL	O
,	O
hdr_date	function
)	O
;	O
break	O
;	O
case	O
'f'	O
:	O
seg	pointer
=	O
new_header_segment	function
(	O
ALIGN_STRING	O
,	O
width	long
,	O
NULL	O
,	O
hdr_from	function
)	O
;	O
break	O
;	O
case	O
'l'	O
:	O
seg	pointer
=	O
new_header_segment	function
(	O
ALIGN_NUMBER	O
,	O
width	long
,	O
NULL	O
,	O
hdr_lines	function
)	O
;	O
break	O
;	O
case	O
'L'	O
:	O
seg	pointer
=	O
new_header_segment	function
(	O
ALIGN_NUMBER	O
,	O
width	long
,	O
NULL	O
,	O
hdr_quick_lines	function
)	O
;	O
break	O
;	O
case	O
'm'	O
:	O
seg	pointer
=	O
new_header_segment	function
(	O
ALIGN_NUMBER	O
,	O
width	long
,	O
NULL	O
,	O
hdr_number	function
)	O
;	O
break	O
;	O
case	O
'o'	O
:	O
seg	pointer
=	O
new_header_segment	function
(	O
ALIGN_NUMBER	O
,	O
width	long
,	O
NULL	O
,	O
hdr_size	function
)	O
;	O
break	O
;	O
case	O
's'	O
:	O
seg	pointer
=	O
new_header_segment	function
(	O
ALIGN_STRING	O
,	O
width	long
,	O
NULL	O
,	O
hdr_subject	function
)	O
;	O
break	O
;	O
case	O
'S'	O
:	O
seg	pointer
=	O
new_header_segment	function
(	O
ALIGN_STRING	O
,	O
width	long
,	O
NULL	O
,	O
hdr_q_subject	function
)	O
;	O
break	O
;	O
case	O
'>'	O
:	O
seg	pointer
=	O
new_header_segment	function
(	O
ALIGN_STRING	O
,	O
width	long
,	O
mu_strdup	function
(	O
">"	pointer
)	O
,	O
hdr_cur	function
)	O
;	O
break	O
;	O
case	O
'<'	O
:	O
seg	pointer
=	O
new_header_segment	function
(	O
ALIGN_STRING	O
,	O
width	long
,	O
mu_strdup	function
(	O
"<"	pointer
)	O
,	O
hdr_cur	function
)	O
;	O
break	O
;	O
case	O
'D'	O
:	O
{	O
int	O
i	int
;	O
static	O
char	O
timespec	struct
[	O
]	O
=	O
"aAbBcCdDeFGghHIjklmMnpPrRsStTuUVwWxXyYzZ+%"	pointer
;	O
static	O
char	O
espec	array
[	O
]	O
=	O
"cCxXyY"	pointer
;	O
static	O
char	O
ospec	array
[	O
]	O
=	O
"deHImMSuUVwWy"	pointer
;	O
if	O
(	O
*	O
str	pointer
==	O
'{'	O
)	O
{	O
for	O
(	O
i	int
=	O
1	int
;	O
str	pointer
[	O
i	int
]	O
&&	O
str	pointer
[	O
i	int
]	O
!=	O
'}'	O
;	O
i	int
++	O
)	O
if	O
(	O
str	pointer
[	O
i	int
]	O
==	O
'\\'	O
)	O
i	int
++	O
;	O
if	O
(	O
str	pointer
[	O
i	int
]	O
)	O
{	O
text	pointer
=	O
mu_alloc	function
(	O
i	int
)	O
;	O
memcpy	function
(	O
text	pointer
,	O
str	pointer
+	O
1	int
,	O
i	int
-	O
1	int
)	O
;	O
text	pointer
[	O
i	int
-	O
1	int
]	O
=	O
0	int
;	O
mu_c_str_unescape_inplace	function
(	O
text	pointer
,	O
"\\{}"	pointer
,	O
NULL	O
)	O
;	O
seg	pointer
=	O
new_header_segment	function
(	O
ALIGN_STRING	O
,	O
width	long
,	O
text	pointer
,	O
hdr_date	function
)	O
;	O
str	pointer
+=	O
i	int
+	O
1	int
;	O
break	O
;	O
}	O
}	O
else	O
if	O
(	O
str	pointer
[	O
1	int
]	O
&&	O
(	O
(	O
*	O
str	pointer
==	O
'E'	O
&&	O
strchr	function
(	O
espec	array
,	O
str	pointer
[	O
1	int
]	O
)	O
)	O
||	O
(	O
*	O
str	pointer
==	O
'O'	O
&&	O
strchr	function
(	O
ospec	array
,	O
str	pointer
[	O
1	int
]	O
)	O
)	O
)	O
)	O
{	O
text	pointer
=	O
mu_alloc	function
(	O
4	int
)	O
;	O
text	pointer
[	O
0	int
]	O
=	O
'%'	O
;	O
text	pointer
[	O
1	int
]	O
=	O
*	O
str	pointer
++	O
;	O
text	pointer
[	O
2	int
]	O
=	O
*	O
str	pointer
++	O
;	O
text	pointer
[	O
3	int
]	O
=	O
0	int
;	O
seg	pointer
=	O
new_header_segment	function
(	O
ALIGN_STRING	O
,	O
width	long
,	O
text	pointer
,	O
hdr_date	function
)	O
;	O
break	O
;	O
}	O
else	O
if	O
(	O
strchr	function
(	O
timespec	struct
,	O
*	O
str	pointer
)	O
)	O
{	O
text	pointer
=	O
mu_alloc	function
(	O
3	int
)	O
;	O
text	pointer
[	O
0	int
]	O
=	O
'%'	O
;	O
text	pointer
[	O
1	int
]	O
=	O
*	O
str	pointer
++	O
;	O
text	pointer
[	O
2	int
]	O
=	O
0	int
;	O
seg	pointer
=	O
new_header_segment	function
(	O
ALIGN_STRING	O
,	O
width	long
,	O
text	pointer
,	O
hdr_date	function
)	O
;	O
break	O
;	O
}	O
}	O
default	O
:	O
mu_error	function
(	O
_	O
(	O
"unknown format specifier: %%%c"	pointer
)	O
,	O
str	pointer
[	O
-	O
1	int
]	O
)	O
;	O
len	long
=	O
str	pointer
-	O
p	pointer
;	O
text	pointer
=	O
mu_alloc	function
(	O
len	long
)	O
;	O
memcpy	function
(	O
text	pointer
,	O
p	pointer
,	O
len	long
-	O
1	int
)	O
;	O
text	pointer
[	O
len	long
-	O
1	int
]	O
=	O
0	int
;	O
seg	pointer
=	O
new_header_segment	function
(	O
ALIGN_STRING	O
,	O
width	long
,	O
text	pointer
,	O
hdr_text	function
)	O
;	O
}	O
ATTACH	O
(	O
seg	pointer
)	O
;	O
}	O
return	O
head	pointer
;	O
}	O
static	O
struct	O
header_segm	struct
*	O
mail_header_line	pointer
;	O
void	O
mail_compile_headline	function
(	O
char	O
const	O
*	O
str	pointer
)	O
{	O
free_headline	function
(	O
mail_header_line	pointer
)	O
;	O
mail_header_line	pointer
=	O
compile_headline	function
(	O
str	pointer
)	O
;	O
}	O
int	O
mail_from0	function
(	O
msgset_t	struct
*	O
mspec	pointer
,	O
mu_message_t	pointer
msg	pointer
,	O
void	O
*	O
data	pointer
)	O
{	O
format_headline	function
(	O
mail_header_line	pointer
,	O
mspec	pointer
,	O
msg	pointer
)	O
;	O
return	O
0	int
;	O
}	O
int	O
mail_from	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
return	O
util_foreach_msg	function
(	O
argc	int
,	O
argv	pointer
,	O
MSG_NODELETED	int
|	O
MSG_SILENT	int
,	O
mail_from0	function
,	O
NULL	O
)	O
;	O
}	O
