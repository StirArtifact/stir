extern	O
mode_list	struct
ModeList	array
[	O
]	O
;	O
static	O
short	O
Logfile_flag	short
=	O
FALSE	int
;	O
void	O
Eprintf	function
(	O
const	O
char	O
*	O
fmt	pointer
,	O
...	O
)	O
{	O
va_list	array
ap	array
;	O
va_start	O
(	O
ap	array
,	O
fmt	pointer
)	O
;	O
vfprintf	function
(	O
stderr	pointer
,	O
fmt	pointer
,	O
ap	array
)	O
;	O
va_end	O
(	O
ap	array
)	O
;	O
}	O
void	O
PError	function
(	O
const	O
char	O
*	O
msg	pointer
)	O
{	O
perror	function
(	O
msg	pointer
)	O
;	O
}	O
void	O
SilentWait	function
(	O
void	O
)	O
{	O
char	O
dummy	array
[	O
80	int
]	O
;	O
FILE	struct
*	O
tty	pointer
;	O
if	O
(	O
!	O
Logfile_flag	short
)	O
{	O
if	O
(	O
(	O
tty	pointer
=	O
fopen	function
(	O
"/dev/tty"	pointer
,	O
"r"	pointer
)	O
)	O
!=	O
NULL	O
)	O
{	O
(	O
void	O
)	O
fgets	function
(	O
dummy	array
,	O
80	int
,	O
tty	pointer
)	O
;	O
fclose	function
(	O
tty	pointer
)	O
;	O
}	O
else	O
(	O
void	O
)	O
fgets	function
(	O
dummy	array
,	O
80	int
,	O
stdin	pointer
)	O
;	O
}	O
}	O
void	O
NormalWait	function
(	O
void	O
)	O
{	O
if	O
(	O
getenv	function
(	O
"TERM"	pointer
)	O
==	O
(	O
char	O
*	O
)	O
NULL	O
)	O
return	O
;	O
Eprintf	function
(	O
"\nPress <Return> to continue ...\n"	pointer
)	O
;	O
SilentWait	function
(	O
)	O
;	O
}	O
void	O
action_oldstyle	function
(	O
GEN_PAR	struct
*	O
pg	pointer
,	O
IN_PAR	struct
*	O
pi	pointer
,	O
OUT_PAR	struct
*	O
po	pointer
)	O
{	O
int	O
err	int
;	O
char	O
savedname	array
[	O
100	int
]	O
;	O
char	O
thepage	array
[	O
4	int
]	O
;	O
if	O
(	O
!	O
pg	pointer
->	O
quiet	int
)	O
Send_version	function
(	O
)	O
;	O
strcpy	function
(	O
savedname	array
,	O
po	pointer
->	O
outfile	pointer
)	O
;	O
for	O
(	O
;	O
;	O
)	O
{	O
err	int
=	O
HPGL_to_TMP	function
(	O
pg	pointer
,	O
pi	pointer
)	O
;	O
if	O
(	O
err	int
)	O
{	O
strcpy	function
(	O
po	pointer
->	O
outfile	pointer
,	O
""	pointer
)	O
;	O
cleanup_i	function
(	O
pi	pointer
)	O
;	O
cleanup_g	function
(	O
pg	pointer
)	O
;	O
cleanup_o	function
(	O
po	pointer
)	O
;	O
return	O
;	O
}	O
if	O
(	O
strcmp	function
(	O
pg	pointer
->	O
mode	enum
,	O
"pre"	pointer
)	O
)	O
{	O
po	pointer
->	O
pagecount	int
++	O
;	O
if	O
(	O
po	pointer
->	O
outfile	pointer
!=	O
"-"	pointer
&&	O
po	pointer
->	O
pagecount	int
>	O
0	int
)	O
{	O
sprintf	function
(	O
thepage	array
,	O
"%d"	pointer
,	O
po	pointer
->	O
pagecount	int
)	O
;	O
strcpy	function
(	O
po	pointer
->	O
outfile	pointer
,	O
savedname	array
)	O
;	O
if	O
(	O
strstr	function
(	O
po	pointer
->	O
outfile	pointer
,	O
pg	pointer
->	O
mode	enum
)	O
)	O
strcpy	function
(	O
strstr	function
(	O
po	pointer
->	O
outfile	pointer
,	O
pg	pointer
->	O
mode	enum
)	O
,	O
thepage	array
)	O
;	O
else	O
strcat	function
(	O
po	pointer
->	O
outfile	pointer
,	O
thepage	array
)	O
;	O
strcat	function
(	O
po	pointer
->	O
outfile	pointer
,	O
"."	pointer
)	O
;	O
strcat	function
(	O
po	pointer
->	O
outfile	pointer
,	O
pg	pointer
->	O
mode	enum
)	O
;	O
}	O
}	O
adjust_input_transform	function
(	O
pg	pointer
,	O
pi	pointer
,	O
po	pointer
)	O
;	O
err	int
=	O
TMP_to_VEC	function
(	O
pg	pointer
,	O
po	pointer
)	O
;	O
if	O
(	O
err	int
==	O
0	int
)	O
continue	O
;	O
if	O
(	O
err	int
==	O
ERROR	O
)	O
{	O
cleanup	function
(	O
pg	pointer
,	O
pi	pointer
,	O
po	pointer
)	O
;	O
return	O
;	O
}	O
if	O
(	O
TMP_to_BUF	function
(	O
pg	pointer
,	O
po	pointer
)	O
)	O
{	O
cleanup	function
(	O
pg	pointer
,	O
pi	pointer
,	O
po	pointer
)	O
;	O
return	O
;	O
}	O
err	int
=	O
BUF_to_RAS	function
(	O
pg	pointer
,	O
po	pointer
)	O
;	O
if	O
(	O
err	int
==	O
1	int
)	O
Eprintf	function
(	O
"%s: Not implemented!\n"	pointer
,	O
pg	pointer
->	O
mode	enum
)	O
;	O
cleanup_g	function
(	O
pg	pointer
)	O
;	O
cleanup_o	function
(	O
po	pointer
)	O
;	O
}	O
}	O
static	O
void	O
process_opts	function
(	O
int	O
argc	int
,	O
char	O
*	O
argv	pointer
[	O
]	O
,	O
const	O
char	O
*	O
shortopts	pointer
,	O
struct	O
option	struct
longopts	pointer
[	O
]	O
,	O
GEN_PAR	struct
*	O
pg	pointer
,	O
IN_PAR	struct
*	O
pi	pointer
,	O
OUT_PAR	struct
*	O
po	pointer
)	O
{	O
int	O
c	int
,	O
i	int
,	O
j	int
,	O
longind	pointer
;	O
char	O
*	O
p	struct
,	O
cdummy	char
;	O
while	O
(	O
(	O
c	int
=	O
getopt_long	function
(	O
argc	int
,	O
argv	pointer
,	O
shortopts	pointer
,	O
longopts	pointer
,	O
&	O
longind	pointer
)	O
)	O
!=	O
EOF	O
)	O
switch	O
(	O
c	int
)	O
{	O
case	O
'a'	O
:	O
pi	pointer
->	O
aspectfactor	double
=	O
atof	function
(	O
optarg	pointer
)	O
;	O
if	O
(	O
pi	pointer
->	O
aspectfactor	double
<=	O
0.0	int
)	O
{	O
Eprintf	function
(	O
"Aspect factor: %g illegal\n"	pointer
,	O
pi	pointer
->	O
aspectfactor	double
)	O
;	O
exit	function
(	O
ERROR	O
)	O
;	O
}	O
break	O
;	O
case	O
'c'	O
:	O
i	int
=	O
(	O
int	O
)	O
strlen	function
(	O
optarg	pointer
)	O
;	O
if	O
(	O
(	O
i	int
<	O
1	int
)	O
||	O
(	O
i	int
>	O
8	int
)	O
)	O
{	O
Eprintf	function
(	O
"Invalid pencolor string: %s\n"	pointer
,	O
optarg	pointer
)	O
;	O
exit	function
(	O
ERROR	O
)	O
;	O
}	O
for	O
(	O
j	int
=	O
1	int
,	O
p	struct
=	O
optarg	pointer
;	O
j	int
<=	O
i	int
;	O
j	int
++	O
,	O
p	struct
++	O
)	O
{	O
switch	O
(	O
*	O
p	struct
-	O
'0'	O
)	O
{	O
case	O
xxBackground	int
:	O
pt	struct
.	O
color	array
[	O
j	int
]	O
=	O
xxBackground	int
;	O
break	O
;	O
case	O
xxForeground	int
:	O
pt	struct
.	O
color	array
[	O
j	int
]	O
=	O
xxForeground	int
;	O
break	O
;	O
case	O
xxRed	int
:	O
pt	struct
.	O
color	array
[	O
j	int
]	O
=	O
xxRed	int
;	O
break	O
;	O
case	O
xxGreen	int
:	O
pt	struct
.	O
color	array
[	O
j	int
]	O
=	O
xxGreen	int
;	O
break	O
;	O
case	O
xxBlue	int
:	O
pt	struct
.	O
color	array
[	O
j	int
]	O
=	O
xxBlue	int
;	O
break	O
;	O
case	O
xxCyan	int
:	O
pt	struct
.	O
color	array
[	O
j	int
]	O
=	O
xxCyan	int
;	O
break	O
;	O
case	O
xxMagenta	int
:	O
pt	struct
.	O
color	array
[	O
j	int
]	O
=	O
xxMagenta	int
;	O
break	O
;	O
case	O
xxYellow	int
:	O
pt	struct
.	O
color	array
[	O
j	int
]	O
=	O
xxYellow	int
;	O
break	O
;	O
default	O
:	O
Eprintf	function
(	O
"Invalid color of pen %d: %c\n"	pointer
,	O
j	int
,	O
*	O
p	struct
)	O
;	O
exit	function
(	O
ERROR	O
)	O
;	O
}	O
if	O
(	O
pt	struct
.	O
color	array
[	O
j	int
]	O
!=	O
xxBackground	int
&&	O
pt	struct
.	O
color	array
[	O
j	int
]	O
!=	O
xxForeground	int
)	O
pg	pointer
->	O
is_color	int
=	O
TRUE	int
;	O
}	O
pi	pointer
->	O
hwcolor	int
=	O
TRUE	int
;	O
break	O
;	O
case	O
'C'	O
:	O
pi	pointer
->	O
center_mode	int
=	O
TRUE	int
;	O
break	O
;	O
case	O
'd'	O
:	O
switch	O
(	O
po	pointer
->	O
dpi_x	int
=	O
atoi	function
(	O
optarg	pointer
)	O
)	O
{	O
case	O
75	int
:	O
break	O
;	O
case	O
100	int
:	O
case	O
150	int
:	O
case	O
300	int
:	O
case	O
600	int
:	O
if	O
(	O
(	O
!	O
pg	pointer
->	O
quiet	int
)	O
&&	O
(	O
strcmp	function
(	O
pg	pointer
->	O
mode	enum
,	O
"pcl"	pointer
)	O
==	O
0	int
)	O
&&	O
po	pointer
->	O
specials	int
==	O
0	int
)	O
Eprintf	function
(	O
"Warning: DPI setting is no PCL level 3 feature!\n"	pointer
)	O
;	O
break	O
;	O
default	O
:	O
if	O
(	O
(	O
!	O
pg	pointer
->	O
quiet	int
)	O
&&	O
(	O
strcmp	function
(	O
pg	pointer
->	O
mode	enum
,	O
"pcl"	pointer
)	O
==	O
0	int
)	O
)	O
Eprintf	function
(	O
"Warning: DPI value %d is invalid for PCL mode\n"	pointer
,	O
po	pointer
->	O
dpi_x	int
)	O
;	O
break	O
;	O
}	O
break	O
;	O
case	O
'D'	O
:	O
po	pointer
->	O
dpi_y	int
=	O
atoi	function
(	O
optarg	pointer
)	O
;	O
if	O
(	O
(	O
!	O
pg	pointer
->	O
quiet	int
)	O
&&	O
strcmp	function
(	O
pg	pointer
->	O
mode	enum
,	O
"pcl"	pointer
)	O
==	O
0	int
&&	O
po	pointer
->	O
specials	int
==	O
0	int
)	O
Eprintf	function
(	O
"Warning: %s\n"	pointer
,	O
"Different DPI for x & y is invalid for PCL mode"	pointer
)	O
;	O
break	O
;	O
case	O
'e'	O
:	O
pg	pointer
->	O
extraclip	int
=	O
atoi	function
(	O
optarg	pointer
)	O
;	O
break	O
;	O
case	O
'F'	O
:	O
po	pointer
->	O
formfeed	int
=	O
TRUE	int
;	O
break	O
;	O
case	O
'f'	O
:	O
po	pointer
->	O
outfile	pointer
=	O
optarg	pointer
;	O
break	O
;	O
case	O
'h'	O
:	O
if	O
(	O
!	O
strncmp	function
(	O
optarg	pointer
,	O
"elp"	pointer
,	O
3	int
)	O
)	O
{	O
usage_msg	function
(	O
pg	pointer
,	O
pi	pointer
,	O
po	pointer
)	O
;	O
exit	function
(	O
ERROR	O
)	O
;	O
}	O
pi	pointer
->	O
height	double
=	O
atof	function
(	O
optarg	pointer
)	O
;	O
if	O
(	O
pi	pointer
->	O
height	double
<	O
0.1	int
)	O
Eprintf	function
(	O
"Warning: Small height: %g mm\n"	pointer
,	O
pi	pointer
->	O
height	double
)	O
;	O
if	O
(	O
pi	pointer
->	O
height	double
>	O
300.0	int
)	O
Eprintf	function
(	O
"Warning: Huge  height: %g mm\n"	pointer
,	O
pi	pointer
->	O
height	double
)	O
;	O
break	O
;	O
case	O
'i'	O
:	O
po	pointer
->	O
init_p	int
=	O
TRUE	int
;	O
break	O
;	O
case	O
'I'	O
:	O
po	pointer
->	O
init_p	int
=	O
TRUE	int
;	O
po	pointer
->	O
init_p3gui	int
=	O
TRUE	int
;	O
break	O
;	O
case	O
'l'	O
:	O
pg	pointer
->	O
logfile	pointer
=	O
optarg	pointer
;	O
if	O
(	O
freopen	function
(	O
pg	pointer
->	O
logfile	pointer
,	O
"w"	pointer
,	O
stderr	pointer
)	O
==	O
NULL	O
)	O
{	O
PError	function
(	O
"Cannot open log file"	pointer
)	O
;	O
Eprintf	function
(	O
"Error redirecting stderr\n"	pointer
)	O
;	O
Eprintf	function
(	O
"Continuing with output to stderr\n"	pointer
)	O
;	O
}	O
else	O
Logfile_flag	short
=	O
TRUE	int
;	O
break	O
;	O
case	O
'z'	O
:	O
po	pointer
->	O
zengage	double
=	O
atof	function
(	O
optarg	pointer
)	O
;	O
break	O
;	O
case	O
'Z'	O
:	O
po	pointer
->	O
zretract	double
=	O
atof	function
(	O
optarg	pointer
)	O
;	O
break	O
;	O
case	O
'M'	O
:	O
pg	pointer
->	O
mapzero	int
=	O
atof	function
(	O
optarg	pointer
)	O
;	O
if	O
(	O
pg	pointer
->	O
mapzero	int
<	O
0	int
||	O
pg	pointer
->	O
mapzero	int
>	O
255	int
)	O
pg	pointer
->	O
mapzero	int
=	O
-	O
1	int
;	O
break	O
;	O
case	O
'm'	O
:	O
pg	pointer
->	O
mode	enum
=	O
optarg	pointer
;	O
for	O
(	O
i	int
=	O
0	int
;	O
ModeList	array
[	O
i	int
]	O
.	O
mode	enum
!=	O
XX_TERM	int
;	O
i	int
++	O
)	O
if	O
(	O
strcmp	function
(	O
ModeList	array
[	O
i	int
]	O
.	O
modestr	pointer
,	O
pg	pointer
->	O
mode	enum
)	O
==	O
0	int
)	O
break	O
;	O
if	O
(	O
ModeList	array
[	O
i	int
]	O
.	O
mode	enum
==	O
XX_TERM	int
)	O
{	O
Eprintf	function
(	O
"'%s': unknown mode!\n"	pointer
,	O
pg	pointer
->	O
mode	enum
)	O
;	O
Eprintf	function
(	O
"Supported are:\n\t"	pointer
)	O
;	O
print_supported_modes	function
(	O
)	O
;	O
Send_Copyright	function
(	O
)	O
;	O
}	O
break	O
;	O
case	O
'n'	O
:	O
pg	pointer
->	O
nofill	int
=	O
TRUE	int
;	O
break	O
;	O
case	O
'N'	O
:	O
pg	pointer
->	O
no_ps	int
=	O
TRUE	int
;	O
break	O
;	O
case	O
'o'	O
:	O
pi	pointer
->	O
xoff	double
=	O
atof	function
(	O
optarg	pointer
)	O
;	O
break	O
;	O
case	O
'O'	O
:	O
pi	pointer
->	O
yoff	double
=	O
atof	function
(	O
optarg	pointer
)	O
;	O
break	O
;	O
case	O
'p'	O
:	O
i	int
=	O
(	O
int	O
)	O
strlen	function
(	O
optarg	pointer
)	O
;	O
if	O
(	O
(	O
i	int
<	O
1	int
)	O
||	O
(	O
i	int
>	O
8	int
)	O
)	O
{	O
Eprintf	function
(	O
"Invalid pensize string: %s\n"	pointer
,	O
optarg	pointer
)	O
;	O
exit	function
(	O
ERROR	O
)	O
;	O
}	O
for	O
(	O
j	int
=	O
1	int
,	O
p	struct
=	O
optarg	pointer
;	O
j	int
<=	O
i	int
;	O
j	int
++	O
,	O
p	struct
++	O
)	O
{	O
if	O
(	O
(	O
*	O
p	struct
<	O
'0'	O
)	O
||	O
(	O
*	O
p	struct
>	O
'9'	O
)	O
)	O
{	O
if	O
(	O
(	O
*	O
p	struct
<	O
'A'	O
)	O
||	O
(	O
*	O
p	struct
>	O
'Z'	O
)	O
)	O
{	O
Eprintf	function
(	O
"Invalid size of pen %d: %c\n"	pointer
,	O
j	int
,	O
*	O
p	struct
)	O
;	O
exit	function
(	O
ERROR	O
)	O
;	O
}	O
else	O
{	O
pt	struct
.	O
width	array
[	O
j	int
]	O
=	O
1	int
+	O
(	O
*	O
p	struct
-	O
'A'	O
)	O
/	O
10.0	int
;	O
if	O
(	O
pg	pointer
->	O
maxpensize	float
<	O
pt	struct
.	O
width	array
[	O
j	int
]	O
)	O
pg	pointer
->	O
maxpensize	float
=	O
pt	struct
.	O
width	array
[	O
j	int
]	O
;	O
}	O
}	O
else	O
{	O
pt	struct
.	O
width	array
[	O
j	int
]	O
=	O
(	O
*	O
p	struct
-	O
'0'	O
)	O
/	O
10.0	int
;	O
if	O
(	O
pg	pointer
->	O
maxpensize	float
<	O
pt	struct
.	O
width	array
[	O
j	int
]	O
)	O
pg	pointer
->	O
maxpensize	float
=	O
pt	struct
.	O
width	array
[	O
j	int
]	O
;	O
}	O
}	O
pi	pointer
->	O
hwsize	int
=	O
TRUE	int
;	O
break	O
;	O
case	O
'P'	O
:	O
if	O
(	O
*	O
optarg	pointer
==	O
':'	O
)	O
{	O
pi	pointer
->	O
first_page	int
=	O
0	int
;	O
optarg	pointer
++	O
;	O
if	O
(	O
sscanf	function
(	O
optarg	pointer
,	O
"%d"	pointer
,	O
&	O
pi	pointer
->	O
last_page	int
)	O
!=	O
1	int
)	O
pi	pointer
->	O
last_page	int
=	O
0	int
;	O
}	O
else	O
switch	O
(	O
sscanf	function
(	O
optarg	pointer
,	O
"%d%c%d"	pointer
,	O
&	O
pi	pointer
->	O
first_page	int
,	O
&	O
cdummy	char
,	O
&	O
pi	pointer
->	O
last_page	int
)	O
)	O
{	O
case	O
1	int
:	O
pi	pointer
->	O
last_page	int
=	O
pi	pointer
->	O
first_page	int
;	O
break	O
;	O
case	O
2	int
:	O
if	O
(	O
cdummy	char
==	O
':'	O
)	O
{	O
pi	pointer
->	O
last_page	int
=	O
0	int
;	O
break	O
;	O
}	O
case	O
3	int
:	O
if	O
(	O
cdummy	char
==	O
':'	O
)	O
break	O
;	O
default	O
:	O
Eprintf	function
(	O
"Illegal page range.\n"	pointer
)	O
;	O
usage_msg	function
(	O
pg	pointer
,	O
pi	pointer
,	O
po	pointer
)	O
;	O
exit	function
(	O
ERROR	O
)	O
;	O
}	O
break	O
;	O
case	O
'q'	O
:	O
pg	pointer
->	O
quiet	int
=	O
TRUE	int
;	O
break	O
;	O
case	O
'r'	O
:	O
pi	pointer
->	O
rotation	double
=	O
atof	function
(	O
optarg	pointer
)	O
;	O
break	O
;	O
case	O
'S'	O
:	O
po	pointer
->	O
specials	int
=	O
atoi	function
(	O
optarg	pointer
)	O
;	O
break	O
;	O
case	O
's'	O
:	O
pg	pointer
->	O
swapfile	pointer
=	O
optarg	pointer
;	O
break	O
;	O
case	O
't'	O
:	O
pi	pointer
->	O
truesize	int
=	O
TRUE	int
;	O
break	O
;	O
case	O
'V'	O
:	O
po	pointer
->	O
vga_mode	char
=	O
(	O
Byte	char
)	O
atoi	function
(	O
optarg	pointer
)	O
;	O
break	O
;	O
case	O
'w'	O
:	O
pi	pointer
->	O
width	array
=	O
atof	function
(	O
optarg	pointer
)	O
;	O
if	O
(	O
pi	pointer
->	O
width	array
<	O
0.1	int
)	O
Eprintf	function
(	O
"Warning: Small width: %g mm\n"	pointer
,	O
pi	pointer
->	O
width	array
)	O
;	O
if	O
(	O
pi	pointer
->	O
width	array
>	O
300.0	int
)	O
Eprintf	function
(	O
"Warning: Huge  width: %g mm\n"	pointer
,	O
pi	pointer
->	O
width	array
)	O
;	O
break	O
;	O
case	O
'v'	O
:	O
Send_version	function
(	O
)	O
;	O
exit	function
(	O
NOERROR	int
)	O
;	O
case	O
'x'	O
:	O
pi	pointer
->	O
x0	double
=	O
atof	function
(	O
optarg	pointer
)	O
;	O
break	O
;	O
case	O
'X'	O
:	O
pi	pointer
->	O
x1	double
=	O
atof	function
(	O
optarg	pointer
)	O
;	O
break	O
;	O
case	O
'y'	O
:	O
pi	pointer
->	O
y0	double
=	O
atof	function
(	O
optarg	pointer
)	O
;	O
break	O
;	O
case	O
'Y'	O
:	O
pi	pointer
->	O
y1	double
=	O
atof	function
(	O
optarg	pointer
)	O
;	O
break	O
;	O
case	O
'H'	O
:	O
pi	pointer
->	O
hwlimit	struct
.	O
y	int
=	O
atof	function
(	O
optarg	pointer
)	O
;	O
break	O
;	O
case	O
'W'	O
:	O
pi	pointer
->	O
hwlimit	struct
.	O
x	int
=	O
atof	function
(	O
optarg	pointer
)	O
;	O
break	O
;	O
case	O
'?'	O
:	O
default	O
:	O
usage_msg	function
(	O
pg	pointer
,	O
pi	pointer
,	O
po	pointer
)	O
;	O
exit	function
(	O
ERROR	O
)	O
;	O
}	O
}	O
int	O
main	function
(	O
int	O
argc	int
,	O
char	O
*	O
argv	pointer
[	O
]	O
)	O
{	O
GEN_PAR	struct
Pg	struct
;	O
IN_PAR	struct
Pi	struct
;	O
OUT_PAR	struct
Po	struct
;	O
int	O
i	int
;	O
char	O
outname	array
[	O
128	int
]	O
=	O
""	pointer
;	O
char	O
*	O
shortopts	pointer
=	O
"a:c:d:D:e:f:h:l:m:M:o:O:p:P:r:s:S:V:w:x:X:y:Y:z:Z:CFH:W:inqtvNI?"	pointer
;	O
struct	O
option	struct
longopts	pointer
[	O
]	O
=	O
{	O
{	O
"mode"	pointer
,	O
1	int
,	O
NULL	O
,	O
'm'	O
}	O
,	O
{	O
"pencolors"	pointer
,	O
1	int
,	O
NULL	O
,	O
'c'	O
}	O
,	O
{	O
"pensizes"	pointer
,	O
1	int
,	O
NULL	O
,	O
'p'	O
}	O
,	O
{	O
"pages"	pointer
,	O
1	int
,	O
NULL	O
,	O
'P'	O
}	O
,	O
{	O
"quiet"	pointer
,	O
0	int
,	O
NULL	O
,	O
'q'	O
}	O
,	O
{	O
"nofill"	pointer
,	O
0	int
,	O
NULL	O
,	O
'n'	O
}	O
,	O
{	O
"no_ps"	pointer
,	O
0	int
,	O
NULL	O
,	O
'N'	O
}	O
,	O
{	O
"mapzero"	pointer
,	O
1	int
,	O
NULL	O
,	O
'M'	O
}	O
,	O
{	O
"DPI"	pointer
,	O
1	int
,	O
NULL	O
,	O
'd'	O
}	O
,	O
{	O
"DPI_x"	pointer
,	O
1	int
,	O
NULL	O
,	O
'd'	O
}	O
,	O
{	O
"DPI_y"	pointer
,	O
1	int
,	O
NULL	O
,	O
'D'	O
}	O
,	O
{	O
"extraclip"	pointer
,	O
1	int
,	O
NULL	O
,	O
'e'	O
}	O
,	O
{	O
"PCL_formfeed"	pointer
,	O
0	int
,	O
NULL	O
,	O
'F'	O
}	O
,	O
{	O
"PCL_init"	pointer
,	O
0	int
,	O
NULL	O
,	O
'i'	O
}	O
,	O
{	O
"PCL_Deskjet"	pointer
,	O
1	int
,	O
NULL	O
,	O
'S'	O
}	O
,	O
{	O
"PCL_PCL3GUI"	pointer
,	O
0	int
,	O
NULL	O
,	O
'I'	O
}	O
,	O
{	O
"outfile"	pointer
,	O
1	int
,	O
NULL	O
,	O
'f'	O
}	O
,	O
{	O
"logfile"	pointer
,	O
1	int
,	O
NULL	O
,	O
'l'	O
}	O
,	O
{	O
"swapfile"	pointer
,	O
1	int
,	O
NULL	O
,	O
's'	O
}	O
,	O
{	O
"aspectfactor"	pointer
,	O
1	int
,	O
NULL	O
,	O
'a'	O
}	O
,	O
{	O
"height"	pointer
,	O
1	int
,	O
NULL	O
,	O
'h'	O
}	O
,	O
{	O
"width"	pointer
,	O
1	int
,	O
NULL	O
,	O
'w'	O
}	O
,	O
{	O
"truesize"	pointer
,	O
0	int
,	O
NULL	O
,	O
't'	O
}	O
,	O
{	O
"x0"	pointer
,	O
1	int
,	O
NULL	O
,	O
'x'	O
}	O
,	O
{	O
"x1"	pointer
,	O
1	int
,	O
NULL	O
,	O
'X'	O
}	O
,	O
{	O
"y0"	pointer
,	O
1	int
,	O
NULL	O
,	O
'y'	O
}	O
,	O
{	O
"y1"	pointer
,	O
1	int
,	O
NULL	O
,	O
'Y'	O
}	O
,	O
{	O
"zengage"	pointer
,	O
1	int
,	O
NULL	O
,	O
'z'	O
}	O
,	O
{	O
"zretract"	pointer
,	O
1	int
,	O
NULL	O
,	O
'Z'	O
}	O
,	O
{	O
"xoffset"	pointer
,	O
1	int
,	O
NULL	O
,	O
'o'	O
}	O
,	O
{	O
"yoffset"	pointer
,	O
1	int
,	O
NULL	O
,	O
'O'	O
}	O
,	O
{	O
"center"	pointer
,	O
0	int
,	O
NULL	O
,	O
'C'	O
}	O
,	O
{	O
"help"	pointer
,	O
0	int
,	O
NULL	O
,	O
'?'	O
}	O
,	O
{	O
"version"	pointer
,	O
0	int
,	O
NULL	O
,	O
'v'	O
}	O
,	O
{	O
NULL	O
,	O
0	int
,	O
NULL	O
,	O
'\0'	O
}	O
}	O
;	O
preset_par	function
(	O
&	O
Pg	struct
,	O
&	O
Pi	struct
,	O
&	O
Po	struct
)	O
;	O
if	O
(	O
argc	int
==	O
1	int
)	O
{	O
usage_msg	function
(	O
&	O
Pg	struct
,	O
&	O
Pi	struct
,	O
&	O
Po	struct
)	O
;	O
exit	function
(	O
ERROR	O
)	O
;	O
}	O
process_opts	function
(	O
argc	int
,	O
argv	pointer
,	O
shortopts	pointer
,	O
longopts	pointer
,	O
&	O
Pg	struct
,	O
&	O
Pi	struct
,	O
&	O
Po	struct
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
ModeList	array
[	O
i	int
]	O
.	O
mode	enum
!=	O
XX_TERM	int
;	O
i	int
++	O
)	O
if	O
(	O
strcmp	function
(	O
Pg	struct
.	O
mode	enum
,	O
ModeList	array
[	O
i	int
]	O
.	O
modestr	pointer
)	O
==	O
0	int
)	O
{	O
Pg	struct
.	O
xx_mode	enum
=	O
ModeList	array
[	O
i	int
]	O
.	O
mode	enum
;	O
break	O
;	O
}	O
if	O
(	O
Po	struct
.	O
dpi_y	int
==	O
0	int
)	O
Po	struct
.	O
dpi_y	int
=	O
Po	struct
.	O
dpi_x	int
;	O
Po	struct
.	O
pagecount	int
=	O
-	O
1	int
;	O
if	O
(	O
strlen	function
(	O
Po	struct
.	O
outfile	pointer
)	O
>	O
0	int
)	O
strcpy	function
(	O
outname	array
,	O
Po	struct
.	O
outfile	pointer
)	O
;	O
else	O
{	O
Po	struct
.	O
outfile	pointer
=	O
malloc	function
(	O
1	int
*	O
sizeof	O
(	O
char	O
)	O
)	O
;	O
strcpy	function
(	O
Po	struct
.	O
outfile	pointer
,	O
""	pointer
)	O
;	O
}	O
if	O
(	O
optind	int
==	O
argc	int
)	O
{	O
Pi	struct
.	O
in_file	pointer
=	O
"-"	pointer
;	O
autoset_outfile_name	function
(	O
Pg	struct
.	O
mode	enum
,	O
Pi	struct
.	O
in_file	pointer
,	O
&	O
Po	struct
.	O
outfile	pointer
)	O
;	O
action_oldstyle	function
(	O
&	O
Pg	struct
,	O
&	O
Pi	struct
,	O
&	O
Po	struct
)	O
;	O
}	O
else	O
for	O
(	O
;	O
optind	int
<	O
argc	int
;	O
optind	int
++	O
)	O
{	O
Pi	struct
.	O
in_file	pointer
=	O
argv	pointer
[	O
optind	int
]	O
;	O
if	O
(	O
strlen	function
(	O
outname	array
)	O
>	O
0	int
)	O
{	O
strcpy	function
(	O
Po	struct
.	O
outfile	pointer
,	O
outname	array
)	O
;	O
}	O
else	O
{	O
Po	struct
.	O
pagecount	int
=	O
-	O
1	int
;	O
}	O
autoset_outfile_name	function
(	O
Pg	struct
.	O
mode	enum
,	O
Pi	struct
.	O
in_file	pointer
,	O
&	O
Po	struct
.	O
outfile	pointer
)	O
;	O
action_oldstyle	function
(	O
&	O
Pg	struct
,	O
&	O
Pi	struct
,	O
&	O
Po	struct
)	O
;	O
reset_par	function
(	O
&	O
Pi	struct
)	O
;	O
}	O
cleanup	function
(	O
&	O
Pg	struct
,	O
&	O
Pi	struct
,	O
&	O
Po	struct
)	O
;	O
if	O
(	O
!	O
strcmp	function
(	O
Pg	struct
.	O
mode	enum
,	O
"pre"	pointer
)	O
)	O
free	function
(	O
Po	struct
.	O
outfile	pointer
)	O
;	O
if	O
(	O
*	O
Pg	struct
.	O
logfile	pointer
)	O
fclose	function
(	O
stderr	pointer
)	O
;	O
return	O
NOERROR	int
;	O
}	O
