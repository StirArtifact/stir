_rl_callback_func_t	function
*	O
_rl_callback_func	pointer
=	O
0	int
;	O
_rl_callback_generic_arg	struct
*	O
_rl_callback_data	pointer
=	O
0	int
;	O
int	O
rl_persistent_signal_handlers	int
=	O
0	int
;	O
rl_vcpfunc_t	function
*	O
rl_linefunc	pointer
;	O
static	O
int	O
in_handler	int
;	O
static	O
void	O
_rl_callback_newline	function
(	O
)	O
{	O
rl_initialize	function
(	O
)	O
;	O
if	O
(	O
in_handler	int
==	O
0	int
)	O
{	O
in_handler	int
=	O
1	int
;	O
if	O
(	O
rl_prep_term_function	pointer
)	O
(	O
*	O
rl_prep_term_function	pointer
)	O
(	O
_rl_meta_flag	int
)	O
;	O
if	O
(	O
rl_persistent_signal_handlers	int
)	O
rl_set_signals	function
(	O
)	O
;	O
}	O
readline_internal_setup	function
(	O
)	O
;	O
RL_CHECK_SIGNALS	O
(	O
)	O
;	O
}	O
void	O
rl_callback_handler_install	function
(	O
prompt	pointer
,	O
linefunc	pointer
)	O
const	O
char	O
*	O
prompt	pointer
;	O
rl_vcpfunc_t	function
*	O
linefunc	pointer
;	O
{	O
rl_set_prompt	function
(	O
prompt	pointer
)	O
;	O
RL_SETSTATE	O
(	O
RL_STATE_CALLBACK	int
)	O
;	O
rl_linefunc	pointer
=	O
linefunc	pointer
;	O
_rl_callback_newline	function
(	O
)	O
;	O
}	O
void	O
rl_callback_read_char	function
(	O
)	O
{	O
char	O
*	O
line	pointer
;	O
int	O
eof	int
,	O
jcode	int
;	O
static	O
procenv_t	O
olevel	array
;	O
if	O
(	O
rl_linefunc	pointer
==	O
NULL	O
)	O
{	O
_rl_errmsg	function
(	O
"readline_callback_read_char() called with no handler!"	pointer
)	O
;	O
abort	function
(	O
)	O
;	O
}	O
memcpy	function
(	O
(	O
void	O
*	O
)	O
olevel	array
,	O
(	O
void	O
*	O
)	O
_rl_top_level	array
,	O
sizeof	O
(	O
procenv_t	O
)	O
)	O
;	O
jcode	int
=	O
sigsetjmp	O
(	O
_rl_top_level	array
,	O
0	int
)	O
;	O
if	O
(	O
jcode	int
)	O
{	O
(	O
*	O
rl_redisplay_function	pointer
)	O
(	O
)	O
;	O
_rl_want_redisplay	int
=	O
0	int
;	O
memcpy	function
(	O
(	O
void	O
*	O
)	O
_rl_top_level	array
,	O
(	O
void	O
*	O
)	O
olevel	array
,	O
sizeof	O
(	O
procenv_t	O
)	O
)	O
;	O
CALLBACK_READ_RETURN	O
(	O
)	O
;	O
}	O
if	O
(	O
rl_persistent_signal_handlers	int
==	O
0	int
)	O
rl_set_signals	function
(	O
)	O
;	O
do	O
{	O
RL_CHECK_SIGNALS	O
(	O
)	O
;	O
if	O
(	O
RL_ISSTATE	O
(	O
RL_STATE_ISEARCH	int
)	O
)	O
{	O
eof	int
=	O
_rl_isearch_callback	function
(	O
_rl_iscxt	pointer
)	O
;	O
if	O
(	O
eof	int
==	O
0	int
&&	O
(	O
RL_ISSTATE	O
(	O
RL_STATE_ISEARCH	int
)	O
==	O
0	int
)	O
&&	O
RL_ISSTATE	O
(	O
RL_STATE_INPUTPENDING	int
)	O
)	O
rl_callback_read_char	function
(	O
)	O
;	O
CALLBACK_READ_RETURN	O
(	O
)	O
;	O
}	O
else	O
if	O
(	O
RL_ISSTATE	O
(	O
RL_STATE_NSEARCH	int
)	O
)	O
{	O
eof	int
=	O
_rl_nsearch_callback	function
(	O
_rl_nscxt	pointer
)	O
;	O
CALLBACK_READ_RETURN	O
(	O
)	O
;	O
}	O
else	O
if	O
(	O
RL_ISSTATE	O
(	O
RL_STATE_CHARSEARCH	int
)	O
)	O
{	O
int	O
k	int
;	O
k	int
=	O
_rl_callback_data	pointer
->	O
i2	int
;	O
eof	int
=	O
(	O
*	O
_rl_callback_func	pointer
)	O
(	O
_rl_callback_data	pointer
)	O
;	O
if	O
(	O
_rl_callback_func	pointer
==	O
0	int
)	O
{	O
if	O
(	O
_rl_callback_data	pointer
)	O
{	O
_rl_callback_data_dispose	function
(	O
_rl_callback_data	pointer
)	O
;	O
_rl_callback_data	pointer
=	O
0	int
;	O
}	O
}	O
if	O
(	O
RL_ISSTATE	O
(	O
RL_STATE_VIMOTION	int
)	O
)	O
{	O
_rl_vi_domove_motion_cleanup	function
(	O
k	int
,	O
_rl_vimvcxt	pointer
)	O
;	O
_rl_internal_char_cleanup	function
(	O
)	O
;	O
CALLBACK_READ_RETURN	O
(	O
)	O
;	O
}	O
_rl_internal_char_cleanup	function
(	O
)	O
;	O
}	O
else	O
if	O
(	O
RL_ISSTATE	O
(	O
RL_STATE_VIMOTION	int
)	O
)	O
{	O
eof	int
=	O
_rl_vi_domove_callback	function
(	O
_rl_vimvcxt	pointer
)	O
;	O
if	O
(	O
RL_ISSTATE	O
(	O
RL_STATE_NUMERICARG	int
)	O
==	O
0	int
)	O
_rl_internal_char_cleanup	function
(	O
)	O
;	O
CALLBACK_READ_RETURN	O
(	O
)	O
;	O
}	O
else	O
if	O
(	O
RL_ISSTATE	O
(	O
RL_STATE_NUMERICARG	int
)	O
)	O
{	O
eof	int
=	O
_rl_arg_callback	function
(	O
_rl_argcxt	int
)	O
;	O
if	O
(	O
eof	int
==	O
0	int
&&	O
(	O
RL_ISSTATE	O
(	O
RL_STATE_NUMERICARG	int
)	O
==	O
0	int
)	O
&&	O
RL_ISSTATE	O
(	O
RL_STATE_INPUTPENDING	int
)	O
)	O
rl_callback_read_char	function
(	O
)	O
;	O
else	O
if	O
(	O
RL_ISSTATE	O
(	O
RL_STATE_NUMERICARG	int
)	O
==	O
0	int
)	O
_rl_internal_char_cleanup	function
(	O
)	O
;	O
CALLBACK_READ_RETURN	O
(	O
)	O
;	O
}	O
else	O
if	O
(	O
RL_ISSTATE	O
(	O
RL_STATE_MULTIKEY	int
)	O
)	O
{	O
eof	int
=	O
_rl_dispatch_callback	function
(	O
_rl_kscxt	pointer
)	O
;	O
while	O
(	O
(	O
eof	int
==	O
-	O
1	int
||	O
eof	int
==	O
-	O
2	int
)	O
&&	O
RL_ISSTATE	O
(	O
RL_STATE_MULTIKEY	int
)	O
&&	O
_rl_kscxt	pointer
&&	O
(	O
_rl_kscxt	pointer
->	O
flags	int
&	O
KSEQ_DISPATCHED	int
)	O
)	O
eof	int
=	O
_rl_dispatch_callback	function
(	O
_rl_kscxt	pointer
)	O
;	O
if	O
(	O
RL_ISSTATE	O
(	O
RL_STATE_MULTIKEY	int
)	O
==	O
0	int
)	O
{	O
_rl_internal_char_cleanup	function
(	O
)	O
;	O
_rl_want_redisplay	int
=	O
1	int
;	O
}	O
}	O
else	O
if	O
(	O
_rl_callback_func	pointer
)	O
{	O
eof	int
=	O
(	O
*	O
_rl_callback_func	pointer
)	O
(	O
_rl_callback_data	pointer
)	O
;	O
if	O
(	O
_rl_callback_func	pointer
==	O
0	int
)	O
{	O
if	O
(	O
_rl_callback_data	pointer
)	O
{	O
_rl_callback_data_dispose	function
(	O
_rl_callback_data	pointer
)	O
;	O
_rl_callback_data	pointer
=	O
0	int
;	O
}	O
_rl_internal_char_cleanup	function
(	O
)	O
;	O
}	O
}	O
else	O
eof	int
=	O
readline_internal_char	function
(	O
)	O
;	O
RL_CHECK_SIGNALS	O
(	O
)	O
;	O
if	O
(	O
rl_done	int
==	O
0	int
&&	O
_rl_want_redisplay	int
)	O
{	O
(	O
*	O
rl_redisplay_function	pointer
)	O
(	O
)	O
;	O
_rl_want_redisplay	int
=	O
0	int
;	O
}	O
if	O
(	O
rl_done	int
)	O
{	O
line	pointer
=	O
readline_internal_teardown	function
(	O
eof	int
)	O
;	O
if	O
(	O
rl_deprep_term_function	pointer
)	O
(	O
*	O
rl_deprep_term_function	pointer
)	O
(	O
)	O
;	O
rl_clear_signals	function
(	O
)	O
;	O
in_handler	int
=	O
0	int
;	O
(	O
*	O
rl_linefunc	pointer
)	O
(	O
line	pointer
)	O
;	O
if	O
(	O
rl_line_buffer	pointer
[	O
0	int
]	O
)	O
_rl_init_line_state	function
(	O
)	O
;	O
if	O
(	O
in_handler	int
==	O
0	int
&&	O
rl_linefunc	pointer
)	O
_rl_callback_newline	function
(	O
)	O
;	O
}	O
}	O
while	O
(	O
rl_pending_input	int
||	O
_rl_pushed_input_available	function
(	O
)	O
||	O
RL_ISSTATE	O
(	O
RL_STATE_MACROINPUT	int
)	O
)	O
;	O
CALLBACK_READ_RETURN	O
(	O
)	O
;	O
}	O
void	O
rl_callback_handler_remove	function
(	O
)	O
{	O
rl_linefunc	pointer
=	O
NULL	O
;	O
RL_UNSETSTATE	O
(	O
RL_STATE_CALLBACK	int
)	O
;	O
RL_CHECK_SIGNALS	O
(	O
)	O
;	O
if	O
(	O
in_handler	int
)	O
{	O
in_handler	int
=	O
0	int
;	O
if	O
(	O
rl_deprep_term_function	pointer
)	O
(	O
*	O
rl_deprep_term_function	pointer
)	O
(	O
)	O
;	O
rl_clear_signals	function
(	O
)	O
;	O
}	O
}	O
_rl_callback_generic_arg	struct
*	O
_rl_callback_data_alloc	function
(	O
count	int
)	O
int	O
count	int
;	O
{	O
_rl_callback_generic_arg	struct
*	O
arg	pointer
;	O
arg	pointer
=	O
(	O
_rl_callback_generic_arg	struct
*	O
)	O
xmalloc	function
(	O
sizeof	O
(	O
_rl_callback_generic_arg	struct
)	O
)	O
;	O
arg	pointer
->	O
count	int
=	O
count	int
;	O
arg	pointer
->	O
i1	int
=	O
arg	pointer
->	O
i2	int
=	O
0	int
;	O
return	O
arg	pointer
;	O
}	O
void	O
_rl_callback_data_dispose	function
(	O
arg	pointer
)	O
_rl_callback_generic_arg	struct
*	O
arg	pointer
;	O
{	O
xfree	function
(	O
arg	pointer
)	O
;	O
}	O
void	O
rl_callback_sigcleanup	function
(	O
)	O
{	O
if	O
(	O
RL_ISSTATE	O
(	O
RL_STATE_CALLBACK	int
)	O
==	O
0	int
)	O
return	O
;	O
if	O
(	O
RL_ISSTATE	O
(	O
RL_STATE_ISEARCH	int
)	O
)	O
_rl_isearch_cleanup	function
(	O
_rl_iscxt	pointer
,	O
0	int
)	O
;	O
else	O
if	O
(	O
RL_ISSTATE	O
(	O
RL_STATE_NSEARCH	int
)	O
)	O
_rl_nsearch_cleanup	function
(	O
_rl_nscxt	pointer
,	O
0	int
)	O
;	O
else	O
if	O
(	O
RL_ISSTATE	O
(	O
RL_STATE_VIMOTION	int
)	O
)	O
RL_UNSETSTATE	O
(	O
RL_STATE_VIMOTION	int
)	O
;	O
else	O
if	O
(	O
RL_ISSTATE	O
(	O
RL_STATE_NUMERICARG	int
)	O
)	O
{	O
_rl_argcxt	int
=	O
0	int
;	O
RL_UNSETSTATE	O
(	O
RL_STATE_NUMERICARG	int
)	O
;	O
}	O
else	O
if	O
(	O
RL_ISSTATE	O
(	O
RL_STATE_MULTIKEY	int
)	O
)	O
RL_UNSETSTATE	O
(	O
RL_STATE_MULTIKEY	int
)	O
;	O
if	O
(	O
RL_ISSTATE	O
(	O
RL_STATE_CHARSEARCH	int
)	O
)	O
RL_UNSETSTATE	O
(	O
RL_STATE_CHARSEARCH	int
)	O
;	O
_rl_callback_func	pointer
=	O
0	int
;	O
}	O
