typedef	O
struct	O
{	O
ESint32	int
Specialized	int
;	O
EPChar	pointer
Implementation	pointer
;	O
EPChar	pointer
Resource	pointer
;	O
EPChar	pointer
Target	pointer
;	O
EPChar	pointer
Access	pointer
;	O
}	O
DtCHANNEL	struct
;	O
EPChar	pointer
access_type	array
[	O
]	O
=	O
{	O
"Read"	pointer
,	O
"Write"	pointer
,	O
"Append"	pointer
}	O
;	O
ESint32	int
EDMAPROC	O
CHANNELopenZrS32	function
(	O
OBJID	int
IdObj	int
,	O
EPChar	pointer
res	pointer
)	O
{	O
DtCHANNEL	struct
*	O
m	pointer
;	O
EPChar	pointer
aux	pointer
,	O
aux1	pointer
;	O
EChar	char
cImpl	array
[	O
50	int
]	O
;	O
EChar	char
cTarget	array
[	O
1024	int
]	O
;	O
EChar	char
temp	array
[	O
1024	int
]	O
;	O
ESint32	int
access	int
=	O
0	int
,	O
r	int
;	O
m	pointer
=	O
(	O
DtCHANNEL	struct
*	O
)	O
edma_get_data_ref	function
(	O
IdObj	int
)	O
;	O
access	int
=	O
0	int
;	O
strcpy	function
(	O
temp	array
,	O
res	pointer
)	O
;	O
if	O
(	O
temp	array
[	O
0	int
]	O
==	O
'>'	O
)	O
{	O
access	int
++	O
;	O
if	O
(	O
temp	array
[	O
1	int
]	O
==	O
'>'	O
)	O
access	int
++	O
;	O
}	O
aux1	pointer
=	O
temp	array
;	O
aux1	pointer
+=	O
access	int
;	O
aux	pointer
=	O
strstr	function
(	O
aux1	pointer
,	O
"://"	pointer
)	O
;	O
if	O
(	O
aux	pointer
==	O
NULL	O
)	O
{	O
if	O
(	O
m	pointer
->	O
Specialized	int
==	O
0	int
)	O
{	O
edma_printf_obj	function
(	O
IdObj	int
,	O
"%s"	pointer
,	O
"[ERROR] Resource Name Incomplete. "	pointer
"No Implementation specified"	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
}	O
else	O
{	O
*	O
aux	pointer
=	O
0	int
;	O
aux	pointer
+=	O
2	int
;	O
*	O
aux	pointer
=	O
0	int
;	O
aux	pointer
++	O
;	O
strcpy	function
(	O
cImpl	array
,	O
aux1	pointer
)	O
;	O
edma_wprop3	function
(	O
IdObj	int
,	O
"Implementation"	pointer
,	O
cImpl	array
)	O
;	O
edma_wprop3	function
(	O
IdObj	int
,	O
"Target"	pointer
,	O
aux	pointer
)	O
;	O
edma_wprop3	function
(	O
IdObj	int
,	O
"Resource"	pointer
,	O
res	pointer
)	O
;	O
edma_wprop3	function
(	O
IdObj	int
,	O
"Access"	pointer
,	O
access	int
)	O
;	O
strcpy	function
(	O
cTarget	array
,	O
aux	pointer
)	O
;	O
}	O
edma_add_subclass	function
(	O
IdObj	int
,	O
edma_get_class_id	function
(	O
cImpl	array
)	O
,	O
"IMP"	pointer
,	O
"SUPER"	pointer
)	O
;	O
m	pointer
->	O
Specialized	int
=	O
1	int
;	O
r	int
=	O
(	O
ESint32	int
)	O
edma_met3	function
(	O
IdObj	int
,	O
"Open"	pointer
,	O
cTarget	array
,	O
access	int
)	O
;	O
return	O
r	int
;	O
}	O
ESint32	int
EDMAPROC	O
CHANNELcloserS32	function
(	O
OBJID	int
IdObj	int
)	O
{	O
DtCHANNEL	struct
*	O
m	pointer
;	O
m	pointer
=	O
(	O
DtCHANNEL	struct
*	O
)	O
edma_get_data_ref	function
(	O
IdObj	int
)	O
;	O
return	O
(	O
ESint32	int
)	O
edma_met3	function
(	O
IdObj	int
,	O
"Close"	pointer
)	O
;	O
}	O
ESint32	int
EDMAPROC	O
CHANNELsendAS32rS32	function
(	O
OBJID	int
IdObj	int
,	O
EDMAT_BUFFER	struct
buf	pointer
,	O
ESint32	int
len	int
)	O
{	O
DtCHANNEL	struct
*	O
m	pointer
;	O
m	pointer
=	O
(	O
DtCHANNEL	struct
*	O
)	O
edma_get_data_ref	function
(	O
IdObj	int
)	O
;	O
return	O
(	O
ESint32	int
)	O
edma_met3	function
(	O
IdObj	int
,	O
"Send"	pointer
,	O
buf	pointer
,	O
len	int
)	O
;	O
}	O
ESint32	int
EDMAPROC	O
CHANNELrecvsAsS32rS32	function
(	O
OBJID	int
IdObj	int
,	O
EDMAT_BUFFER	struct
*	O
buf	pointer
,	O
EPSint32	pointer
len	int
)	O
{	O
DtCHANNEL	struct
*	O
m	pointer
;	O
m	pointer
=	O
(	O
DtCHANNEL	struct
*	O
)	O
edma_get_data_ref	function
(	O
IdObj	int
)	O
;	O
return	O
(	O
ESint32	int
)	O
edma_met3	function
(	O
IdObj	int
,	O
"Recv"	pointer
,	O
buf	pointer
,	O
len	int
)	O
;	O
}	O
ESint32	int
EDMAPROC	O
CHANNELwaitsOrS32	function
(	O
OBJID	int
IdObj	int
,	O
OBJID	int
*	O
id	int
)	O
{	O
DtCHANNEL	struct
*	O
m	pointer
;	O
OBJID	int
my_id	int
;	O
ESint32	int
r	int
;	O
EChar	char
impl	array
[	O
256	int
]	O
,	O
res	pointer
[	O
1024	int
]	O
;	O
m	pointer
=	O
(	O
DtCHANNEL	struct
*	O
)	O
edma_get_data_ref	function
(	O
IdObj	int
)	O
;	O
edma_rprop3	function
(	O
IdObj	int
,	O
"Implementation"	pointer
,	O
impl	array
)	O
;	O
my_id	int
=	O
edma_new_obj	function
(	O
"CHANNEL"	pointer
)	O
;	O
edma_wprop3	function
(	O
my_id	int
,	O
"Implementation"	pointer
,	O
impl	array
)	O
;	O
edma_add_subclass	function
(	O
my_id	int
,	O
edma_get_class_id	function
(	O
impl	array
)	O
,	O
"IMP"	pointer
,	O
"SUPER"	pointer
)	O
;	O
r	int
=	O
(	O
ESint32	int
)	O
edma_met3	function
(	O
IdObj	int
,	O
"Wait"	pointer
,	O
&	O
my_id	int
)	O
;	O
if	O
(	O
r	int
==	O
-	O
1	int
)	O
{	O
edma_free_obj	function
(	O
my_id	int
)	O
;	O
return	O
r	int
;	O
}	O
edma_wprop3	function
(	O
my_id	int
,	O
"Specialized"	pointer
,	O
1	int
)	O
;	O
*	O
id	int
=	O
my_id	int
;	O
edma_rprop3	function
(	O
my_id	int
,	O
"resource"	pointer
,	O
res	pointer
)	O
;	O
edma_wprop3	function
(	O
my_id	int
,	O
"Implementation"	pointer
,	O
impl	array
)	O
;	O
edma_wprop3	function
(	O
my_id	int
,	O
"Resource"	pointer
,	O
res	pointer
)	O
;	O
edma_wprop3	function
(	O
my_id	int
,	O
"Target"	pointer
,	O
""	pointer
)	O
;	O
edma_wprop3	function
(	O
my_id	int
,	O
"Access"	pointer
,	O
1	int
)	O
;	O
return	O
0	int
;	O
}	O
ESint32	int
EDMAPROC	O
CHANNELborn	function
(	O
OBJID	int
IdObj	int
)	O
{	O
DtCHANNEL	struct
*	O
m	pointer
;	O
m	pointer
=	O
(	O
DtCHANNEL	struct
*	O
)	O
edma_get_data_ref	function
(	O
IdObj	int
)	O
;	O
m	pointer
->	O
Specialized	int
=	O
0	int
;	O
return	O
0	int
;	O
}	O
ESint32	int
EDMAPROC	O
CHANNELrip	function
(	O
OBJID	int
IdObj	int
)	O
{	O
DtCHANNEL	struct
*	O
m	pointer
;	O
m	pointer
=	O
(	O
DtCHANNEL	struct
*	O
)	O
edma_get_data_ref	function
(	O
IdObj	int
)	O
;	O
if	O
(	O
m	pointer
->	O
Specialized	int
)	O
edma_met3	function
(	O
IdObj	int
,	O
"close"	pointer
)	O
;	O
return	O
0	int
;	O
}	O
