static	O
int	O
gtp_boardsize	int
=	O
-	O
1	int
;	O
static	O
gtp_transform_ptr	pointer
vertex_transform_input_hook	pointer
=	O
NULL	O
;	O
static	O
gtp_transform_ptr	pointer
vertex_transform_output_hook	pointer
=	O
NULL	O
;	O
static	O
int	O
current_id	int
;	O
FILE	struct
*	O
gtp_output_file	pointer
=	O
NULL	O
;	O
void	O
gtp_main_loop	function
(	O
struct	O
gtp_command	struct
commands	array
[	O
]	O
,	O
FILE	struct
*	O
gtp_input	pointer
,	O
FILE	struct
*	O
gtp_output	pointer
,	O
FILE	struct
*	O
gtp_dump_commands	pointer
)	O
{	O
char	O
line	array
[	O
GTP_BUFSIZE	int
]	O
;	O
char	O
command	array
[	O
GTP_BUFSIZE	int
]	O
;	O
char	O
*	O
p	pointer
;	O
int	O
i	pointer
;	O
int	O
n	pointer
;	O
int	O
status	int
=	O
GTP_OK	int
;	O
gtp_output_file	pointer
=	O
gtp_output	pointer
;	O
while	O
(	O
status	int
==	O
GTP_OK	int
)	O
{	O
if	O
(	O
!	O
fgets	function
(	O
line	array
,	O
GTP_BUFSIZE	int
,	O
gtp_input	pointer
)	O
)	O
break	O
;	O
if	O
(	O
gtp_dump_commands	pointer
)	O
{	O
fputs	function
(	O
line	array
,	O
gtp_dump_commands	pointer
)	O
;	O
fflush	function
(	O
gtp_dump_commands	pointer
)	O
;	O
}	O
for	O
(	O
i	pointer
=	O
0	int
,	O
p	pointer
=	O
line	array
;	O
line	array
[	O
i	pointer
]	O
;	O
i	pointer
++	O
)	O
{	O
char	O
c	char
=	O
line	array
[	O
i	pointer
]	O
;	O
if	O
(	O
c	char
==	O
9	int
)	O
*	O
p	pointer
++	O
=	O
32	int
;	O
else	O
if	O
(	O
(	O
c	char
>	O
0	int
&&	O
c	char
<=	O
9	int
)	O
||	O
(	O
c	char
>=	O
11	int
&&	O
c	char
<=	O
31	int
)	O
||	O
c	char
==	O
127	int
)	O
continue	O
;	O
else	O
if	O
(	O
c	char
==	O
'#'	O
)	O
break	O
;	O
else	O
*	O
p	pointer
++	O
=	O
c	char
;	O
}	O
*	O
p	pointer
=	O
0	int
;	O
p	pointer
=	O
line	array
;	O
if	O
(	O
sscanf	function
(	O
p	pointer
,	O
"%d%n"	pointer
,	O
&	O
current_id	int
,	O
&	O
n	pointer
)	O
==	O
1	int
)	O
p	pointer
+=	O
n	pointer
;	O
else	O
current_id	int
=	O
-	O
1	int
;	O
if	O
(	O
sscanf	function
(	O
p	pointer
,	O
" %s %n"	pointer
,	O
command	array
,	O
&	O
n	pointer
)	O
<	O
1	int
)	O
continue	O
;	O
p	pointer
+=	O
n	pointer
;	O
for	O
(	O
i	pointer
=	O
0	int
;	O
commands	array
[	O
i	pointer
]	O
.	O
name	pointer
!=	O
NULL	O
;	O
i	pointer
++	O
)	O
{	O
if	O
(	O
strcmp	function
(	O
command	array
,	O
commands	array
[	O
i	pointer
]	O
.	O
name	pointer
)	O
==	O
0	int
)	O
{	O
status	int
=	O
(	O
*	O
commands	array
[	O
i	pointer
]	O
.	O
function	pointer
)	O
(	O
p	pointer
)	O
;	O
break	O
;	O
}	O
}	O
if	O
(	O
commands	array
[	O
i	pointer
]	O
.	O
name	pointer
==	O
NULL	O
)	O
gtp_failure	function
(	O
"unknown command"	pointer
)	O
;	O
if	O
(	O
status	int
==	O
GTP_FATAL	int
)	O
gtp_panic	function
(	O
)	O
;	O
}	O
}	O
void	O
gtp_internal_set_boardsize	function
(	O
int	O
size	int
)	O
{	O
gtp_boardsize	int
=	O
size	int
;	O
}	O
void	O
gtp_set_vertex_transform_hooks	function
(	O
gtp_transform_ptr	pointer
in	pointer
,	O
gtp_transform_ptr	pointer
out	pointer
)	O
{	O
vertex_transform_input_hook	pointer
=	O
in	pointer
;	O
vertex_transform_output_hook	pointer
=	O
out	pointer
;	O
}	O
void	O
gtp_mprintf	function
(	O
const	O
char	O
*	O
fmt	pointer
,	O
...	O
)	O
{	O
va_list	array
ap	array
;	O
va_start	O
(	O
ap	array
,	O
fmt	pointer
)	O
;	O
for	O
(	O
;	O
*	O
fmt	pointer
;	O
++	O
fmt	pointer
)	O
{	O
if	O
(	O
*	O
fmt	pointer
==	O
'%'	O
)	O
{	O
switch	O
(	O
*	O
++	O
fmt	pointer
)	O
{	O
case	O
'c'	O
:	O
{	O
int	O
c	char
=	O
va_arg	O
(	O
ap	array
,	O
int	O
)	O
;	O
putc	function
(	O
c	char
,	O
gtp_output_file	pointer
)	O
;	O
break	O
;	O
}	O
case	O
'd'	O
:	O
{	O
int	O
d	int
=	O
va_arg	O
(	O
ap	array
,	O
int	O
)	O
;	O
fprintf	function
(	O
gtp_output_file	pointer
,	O
"%d"	pointer
,	O
d	int
)	O
;	O
break	O
;	O
}	O
case	O
'f'	O
:	O
{	O
double	O
f	double
=	O
va_arg	O
(	O
ap	array
,	O
double	O
)	O
;	O
fprintf	function
(	O
gtp_output_file	pointer
,	O
"%f"	pointer
,	O
f	double
)	O
;	O
break	O
;	O
}	O
case	O
's'	O
:	O
{	O
char	O
*	O
s	pointer
=	O
va_arg	O
(	O
ap	array
,	O
char	O
*	O
)	O
;	O
fputs	function
(	O
s	pointer
,	O
gtp_output_file	pointer
)	O
;	O
break	O
;	O
}	O
case	O
'm'	O
:	O
{	O
int	O
m	pointer
=	O
va_arg	O
(	O
ap	array
,	O
int	O
)	O
;	O
int	O
n	pointer
=	O
va_arg	O
(	O
ap	array
,	O
int	O
)	O
;	O
gtp_print_vertex	function
(	O
m	pointer
,	O
n	pointer
)	O
;	O
break	O
;	O
}	O
case	O
'C'	O
:	O
{	O
int	O
color	pointer
=	O
va_arg	O
(	O
ap	array
,	O
int	O
)	O
;	O
if	O
(	O
color	pointer
==	O
WHITE	int
)	O
fputs	function
(	O
"white"	pointer
,	O
gtp_output_file	pointer
)	O
;	O
else	O
if	O
(	O
color	pointer
==	O
BLACK	int
)	O
fputs	function
(	O
"black"	pointer
,	O
gtp_output_file	pointer
)	O
;	O
else	O
fputs	function
(	O
"empty"	pointer
,	O
gtp_output_file	pointer
)	O
;	O
break	O
;	O
}	O
default	O
:	O
fprintf	function
(	O
gtp_output_file	pointer
,	O
"\n\nUnknown format character '%c'\n"	pointer
,	O
*	O
fmt	pointer
)	O
;	O
break	O
;	O
}	O
}	O
else	O
putc	function
(	O
*	O
fmt	pointer
,	O
gtp_output_file	pointer
)	O
;	O
}	O
va_end	O
(	O
ap	array
)	O
;	O
}	O
void	O
gtp_printf	function
(	O
const	O
char	O
*	O
format	pointer
,	O
...	O
)	O
{	O
va_list	array
ap	array
;	O
va_start	O
(	O
ap	array
,	O
format	pointer
)	O
;	O
vfprintf	function
(	O
gtp_output_file	pointer
,	O
format	pointer
,	O
ap	array
)	O
;	O
va_end	O
(	O
ap	array
)	O
;	O
}	O
void	O
gtp_start_response	function
(	O
int	O
status	int
)	O
{	O
if	O
(	O
status	int
==	O
GTP_SUCCESS	int
)	O
gtp_printf	function
(	O
"="	pointer
)	O
;	O
else	O
gtp_printf	function
(	O
"?"	pointer
)	O
;	O
if	O
(	O
current_id	int
<	O
0	int
)	O
gtp_printf	function
(	O
" "	pointer
)	O
;	O
else	O
gtp_printf	function
(	O
"%d "	pointer
,	O
current_id	int
)	O
;	O
}	O
int	O
gtp_finish_response	function
(	O
)	O
{	O
gtp_printf	function
(	O
"\n\n"	pointer
)	O
;	O
return	O
GTP_OK	int
;	O
}	O
int	O
gtp_success	function
(	O
const	O
char	O
*	O
format	pointer
,	O
...	O
)	O
{	O
va_list	array
ap	array
;	O
gtp_start_response	function
(	O
GTP_SUCCESS	int
)	O
;	O
va_start	O
(	O
ap	array
,	O
format	pointer
)	O
;	O
vfprintf	function
(	O
gtp_output_file	pointer
,	O
format	pointer
,	O
ap	array
)	O
;	O
va_end	O
(	O
ap	array
)	O
;	O
return	O
gtp_finish_response	function
(	O
)	O
;	O
}	O
int	O
gtp_failure	function
(	O
const	O
char	O
*	O
format	pointer
,	O
...	O
)	O
{	O
va_list	array
ap	array
;	O
gtp_start_response	function
(	O
GTP_FAILURE	int
)	O
;	O
va_start	O
(	O
ap	array
,	O
format	pointer
)	O
;	O
vfprintf	function
(	O
gtp_output_file	pointer
,	O
format	pointer
,	O
ap	array
)	O
;	O
va_end	O
(	O
ap	array
)	O
;	O
return	O
gtp_finish_response	function
(	O
)	O
;	O
}	O
void	O
gtp_panic	function
(	O
)	O
{	O
gtp_printf	function
(	O
"! panic\n\n"	pointer
)	O
;	O
}	O
int	O
gtp_decode_color	function
(	O
char	O
*	O
s	pointer
,	O
int	O
*	O
color	pointer
)	O
{	O
char	O
color_string	array
[	O
7	int
]	O
;	O
int	O
i	pointer
;	O
int	O
n	pointer
;	O
assert	O
(	O
gtp_boardsize	int
>	O
0	int
)	O
;	O
if	O
(	O
sscanf	function
(	O
s	pointer
,	O
"%6s%n"	pointer
,	O
color_string	array
,	O
&	O
n	pointer
)	O
!=	O
1	int
)	O
return	O
0	int
;	O
for	O
(	O
i	pointer
=	O
0	int
;	O
i	pointer
<	O
(	O
int	O
)	O
strlen	function
(	O
color_string	array
)	O
;	O
i	pointer
++	O
)	O
color_string	array
[	O
i	pointer
]	O
=	O
tolower	function
(	O
(	O
int	O
)	O
color_string	array
[	O
i	pointer
]	O
)	O
;	O
if	O
(	O
strcmp	function
(	O
color_string	array
,	O
"b"	pointer
)	O
==	O
0	int
||	O
strcmp	function
(	O
color_string	array
,	O
"black"	pointer
)	O
==	O
0	int
)	O
*	O
color	pointer
=	O
BLACK	int
;	O
else	O
if	O
(	O
strcmp	function
(	O
color_string	array
,	O
"w"	pointer
)	O
==	O
0	int
||	O
strcmp	function
(	O
color_string	array
,	O
"white"	pointer
)	O
==	O
0	int
)	O
*	O
color	pointer
=	O
WHITE	int
;	O
else	O
return	O
0	int
;	O
return	O
n	pointer
;	O
}	O
int	O
gtp_decode_coord	function
(	O
char	O
*	O
s	pointer
,	O
int	O
*	O
i	pointer
,	O
int	O
*	O
j	pointer
)	O
{	O
char	O
column	char
;	O
int	O
row	int
;	O
int	O
n	pointer
;	O
assert	O
(	O
gtp_boardsize	int
>	O
0	int
)	O
;	O
if	O
(	O
sscanf	function
(	O
s	pointer
,	O
" %c%d%n"	pointer
,	O
&	O
column	char
,	O
&	O
row	int
,	O
&	O
n	pointer
)	O
!=	O
2	int
)	O
return	O
0	int
;	O
if	O
(	O
tolower	function
(	O
(	O
int	O
)	O
column	char
)	O
==	O
'i'	O
)	O
return	O
0	int
;	O
*	O
j	pointer
=	O
tolower	function
(	O
(	O
int	O
)	O
column	char
)	O
-	O
'a'	O
;	O
if	O
(	O
tolower	function
(	O
(	O
int	O
)	O
column	char
)	O
>	O
'i'	O
)	O
--	O
*	O
j	pointer
;	O
*	O
i	pointer
=	O
gtp_boardsize	int
-	O
row	int
;	O
if	O
(	O
*	O
i	pointer
<	O
0	int
||	O
*	O
i	pointer
>=	O
gtp_boardsize	int
||	O
*	O
j	pointer
<	O
0	int
||	O
*	O
j	pointer
>=	O
gtp_boardsize	int
)	O
return	O
0	int
;	O
if	O
(	O
vertex_transform_input_hook	pointer
!=	O
NULL	O
)	O
(	O
*	O
vertex_transform_input_hook	pointer
)	O
(	O
*	O
i	pointer
,	O
*	O
j	pointer
,	O
i	pointer
,	O
j	pointer
)	O
;	O
return	O
n	pointer
;	O
}	O
int	O
gtp_decode_move	function
(	O
char	O
*	O
s	pointer
,	O
int	O
*	O
color	pointer
,	O
int	O
*	O
i	pointer
,	O
int	O
*	O
j	pointer
)	O
{	O
int	O
n1	int
,	O
n2	int
;	O
int	O
k	int
;	O
assert	O
(	O
gtp_boardsize	int
>	O
0	int
)	O
;	O
n1	int
=	O
gtp_decode_color	function
(	O
s	pointer
,	O
color	pointer
)	O
;	O
if	O
(	O
n1	int
==	O
0	int
)	O
return	O
0	int
;	O
n2	int
=	O
gtp_decode_coord	function
(	O
s	pointer
+	O
n1	int
,	O
i	pointer
,	O
j	pointer
)	O
;	O
if	O
(	O
n2	int
==	O
0	int
)	O
{	O
char	O
buf	array
[	O
6	int
]	O
;	O
if	O
(	O
sscanf	function
(	O
s	pointer
+	O
n1	int
,	O
"%5s%n"	pointer
,	O
buf	array
,	O
&	O
n2	int
)	O
!=	O
1	int
)	O
return	O
0	int
;	O
for	O
(	O
k	int
=	O
0	int
;	O
k	int
<	O
(	O
int	O
)	O
strlen	function
(	O
buf	array
)	O
;	O
k	int
++	O
)	O
buf	array
[	O
k	int
]	O
=	O
tolower	function
(	O
(	O
int	O
)	O
buf	array
[	O
k	int
]	O
)	O
;	O
if	O
(	O
strcmp	function
(	O
buf	array
,	O
"pass"	pointer
)	O
!=	O
0	int
)	O
return	O
0	int
;	O
*	O
i	pointer
=	O
-	O
1	int
;	O
*	O
j	pointer
=	O
-	O
1	int
;	O
}	O
return	O
n1	int
+	O
n2	int
;	O
}	O
static	O
void	O
sort_moves	function
(	O
int	O
n	pointer
,	O
int	O
movei	array
[	O
]	O
,	O
int	O
movej	array
[	O
]	O
)	O
{	O
int	O
b	int
,	O
a	int
;	O
for	O
(	O
b	int
=	O
n	pointer
-	O
1	int
;	O
b	int
>	O
0	int
;	O
b	int
--	O
)	O
{	O
for	O
(	O
a	int
=	O
0	int
;	O
a	int
<	O
b	int
;	O
a	int
++	O
)	O
{	O
if	O
(	O
movei	array
[	O
a	int
]	O
>	O
movei	array
[	O
b	int
]	O
||	O
(	O
movei	array
[	O
a	int
]	O
==	O
movei	array
[	O
b	int
]	O
&&	O
movej	array
[	O
a	int
]	O
>	O
movej	array
[	O
b	int
]	O
)	O
)	O
{	O
int	O
tmp	int
;	O
tmp	int
=	O
movei	array
[	O
b	int
]	O
;	O
movei	array
[	O
b	int
]	O
=	O
movei	array
[	O
a	int
]	O
;	O
movei	array
[	O
a	int
]	O
=	O
tmp	int
;	O
tmp	int
=	O
movej	array
[	O
b	int
]	O
;	O
movej	array
[	O
b	int
]	O
=	O
movej	array
[	O
a	int
]	O
;	O
movej	array
[	O
a	int
]	O
=	O
tmp	int
;	O
}	O
}	O
}	O
}	O
void	O
gtp_print_vertices	function
(	O
int	O
n	pointer
,	O
int	O
movei	array
[	O
]	O
,	O
int	O
movej	array
[	O
]	O
)	O
{	O
int	O
k	int
;	O
int	O
ri	int
,	O
rj	int
;	O
assert	O
(	O
gtp_boardsize	int
>	O
0	int
)	O
;	O
sort_moves	function
(	O
n	pointer
,	O
movei	array
,	O
movej	array
)	O
;	O
for	O
(	O
k	int
=	O
0	int
;	O
k	int
<	O
n	pointer
;	O
k	int
++	O
)	O
{	O
if	O
(	O
k	int
>	O
0	int
)	O
gtp_printf	function
(	O
" "	pointer
)	O
;	O
if	O
(	O
movei	array
[	O
k	int
]	O
==	O
-	O
1	int
&&	O
movej	array
[	O
k	int
]	O
==	O
-	O
1	int
)	O
gtp_printf	function
(	O
"PASS"	pointer
)	O
;	O
else	O
if	O
(	O
movei	array
[	O
k	int
]	O
<	O
0	int
||	O
movei	array
[	O
k	int
]	O
>=	O
gtp_boardsize	int
||	O
movej	array
[	O
k	int
]	O
<	O
0	int
||	O
movej	array
[	O
k	int
]	O
>=	O
gtp_boardsize	int
)	O
gtp_printf	function
(	O
"??"	pointer
)	O
;	O
else	O
{	O
if	O
(	O
vertex_transform_output_hook	pointer
!=	O
NULL	O
)	O
(	O
*	O
vertex_transform_output_hook	pointer
)	O
(	O
movei	array
[	O
k	int
]	O
,	O
movej	array
[	O
k	int
]	O
,	O
&	O
ri	int
,	O
&	O
rj	int
)	O
;	O
else	O
{	O
ri	int
=	O
movei	array
[	O
k	int
]	O
;	O
rj	int
=	O
movej	array
[	O
k	int
]	O
;	O
}	O
gtp_printf	function
(	O
"%c%d"	pointer
,	O
'A'	O
+	O
rj	int
+	O
(	O
rj	int
>=	O
8	int
)	O
,	O
gtp_boardsize	int
-	O
ri	int
)	O
;	O
}	O
}	O
}	O
void	O
gtp_print_vertex	function
(	O
int	O
i	pointer
,	O
int	O
j	pointer
)	O
{	O
gtp_print_vertices	function
(	O
1	int
,	O
&	O
i	pointer
,	O
&	O
j	pointer
)	O
;	O
}	O
