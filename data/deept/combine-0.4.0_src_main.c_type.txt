void	O
df_main	function
(	O
int	O
,	O
char	O
*	O
*	O
)	O
;	O
void	O
close_stdout	function
(	O
)	O
{	O
int	O
return_code	int
;	O
return_code	int
=	O
fclose	function
(	O
stdout	pointer
)	O
;	O
if	O
(	O
return_code	int
!=	O
0	int
)	O
{	O
perror	function
(	O
program_name	pointer
)	O
;	O
_exit	O
(	O
-	O
1	int
)	O
;	O
}	O
}	O
int	O
main	function
(	O
argc	int
,	O
argv	pointer
)	O
int	O
argc	int
;	O
char	O
*	O
*	O
argv	pointer
;	O
{	O
int	O
return_code	int
;	O
return_code	int
=	O
atexit	function
(	O
close_stdout	function
)	O
;	O
if	O
(	O
return_code	int
!=	O
0	int
)	O
FATAL_ERROR	O
(	O
_	O
(	O
"unable to register exit routine"	pointer
)	O
)	O
;	O
setlocale	function
(	O
LC_ALL	O
,	O
""	pointer
)	O
;	O
bindtextdomain	function
(	O
PACKAGE	pointer
,	O
LOCALEDIR	O
)	O
;	O
textdomain	function
(	O
PACKAGE	pointer
)	O
;	O
df_main	function
(	O
argc	int
,	O
argv	pointer
)	O
;	O
return	O
EXIT_SUCCESS	int
;	O
}	O
void	O
df_main	function
(	O
argc	int
,	O
argv	pointer
)	O
int	O
argc	int
;	O
char	O
*	O
*	O
argv	pointer
;	O
{	O
int	O
i	int
;	O
int	O
exit_status	int
;	O
int	O
return_code	int
;	O
exit_status	int
=	O
0	int
;	O
initialize_variables	function
(	O
argc	int
,	O
argv	pointer
)	O
;	O
handle_arguments	function
(	O
argc	int
,	O
argv	pointer
)	O
;	O
if	O
(	O
validate_options	function
(	O
)	O
!=	O
EXIT_SUCCESS	int
)	O
FATAL_ERROR	O
(	O
_	O
(	O
"invalid option set"	pointer
)	O
)	O
;	O
if	O
(	O
gi_verbose_ind	int
!=	O
0	int
)	O
write_user_request	function
(	O
)	O
;	O
process_reference_files	function
(	O
)	O
;	O
if	O
(	O
gi_data_is_reference	int
==	O
0	int
)	O
{	O
if	O
(	O
gs_data_output_file_name	pointer
==	O
NULL	O
)	O
output_file	pointer
=	O
stdout	pointer
;	O
else	O
{	O
output_file	pointer
=	O
fopen	function
(	O
gs_data_output_file_name	pointer
,	O
"w"	pointer
)	O
;	O
if	O
(	O
output_file	pointer
==	O
NULL	O
)	O
FATAL_PERROR	O
(	O
gs_data_output_file_name	pointer
)	O
;	O
}	O
if	O
(	O
filecount	int
==	O
0	int
)	O
{	O
exit_status	int
=	O
process_data_file	function
(	O
"-"	pointer
)	O
;	O
}	O
else	O
{	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
filecount	int
;	O
i	int
++	O
)	O
{	O
exit_status	int
|=	O
process_data_file	function
(	O
filenames	pointer
[	O
i	int
]	O
)	O
;	O
}	O
}	O
}	O
return_code	int
=	O
df_write_output	function
(	O
output_file	pointer
,	O
&	O
(	O
gs_data_output_buffer	pointer
)	O
,	O
&	O
(	O
gi_data_output_buffer_pos	long
)	O
,	O
&	O
(	O
gi_data_output_buffer_size	long
)	O
,	O
NULL	O
,	O
gs_output_record_delimiter	pointer
,	O
0	int
,	O
1	int
)	O
;	O
if	O
(	O
return_code	int
!=	O
EXIT_SUCCESS	int
)	O
FATAL_PERROR	O
(	O
gra_reference_file_info	pointer
[	O
i	int
]	O
.	O
output_file_name	pointer
)	O
;	O
if	O
(	O
output_file	pointer
!=	O
stdout	pointer
&&	O
gi_data_is_reference	int
==	O
0	int
)	O
{	O
int	O
return_code	int
;	O
return_code	int
=	O
fclose	function
(	O
output_file	pointer
)	O
;	O
if	O
(	O
return_code	int
!=	O
0	int
)	O
FATAL_PERROR	O
(	O
gs_data_output_file_name	pointer
)	O
;	O
}	O
if	O
(	O
gi_statistics_ind	int
!=	O
0	int
&&	O
filecount	int
>	O
1	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"Statistics for all data files\n"	pointer
)	O
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"  Number of records read:              %15d\n"	pointer
)	O
,	O
gi_data_records_read	int
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"  Number of records dropped by filter: %15d\n"	pointer
)	O
,	O
gi_data_records_dropped_filter	int
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"  Number of records matched on key:    %15d\n"	pointer
)	O
,	O
gi_data_records_matched	int
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"  Number of records written:           %15d\n"	pointer
)	O
,	O
gi_output_records_written	int
)	O
;	O
}	O
exit_status	int
|=	O
write_output	function
(	O
)	O
;	O
exit	function
(	O
exit_status	int
)	O
;	O
}	O
