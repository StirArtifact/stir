int	O
select_aim9m	function
(	O
craft	struct
*	O
)	O
;	O
int	O
display_aim9m	function
(	O
craft	struct
*	O
,	O
craftType	struct
*	O
,	O
viewer	struct
*	O
,	O
int	O
*	O
,	O
int	O
*	O
)	O
;	O
int	O
update_aim9m	function
(	O
craft	struct
*	O
)	O
;	O
int	O
fire_aim9m	function
(	O
craft	struct
*	O
)	O
;	O
int	O
getIRTarget	function
(	O
craft	struct
*	O
c	pointer
,	O
VPoint	struct
*	O
t	pointer
,	O
double	O
scanSlope	double
)	O
;	O
extern	O
int	O
fireMissile	function
(	O
craft	struct
*	O
c	pointer
,	O
int	O
ind	int
)	O
;	O
extern	O
FILE	struct
*	O
acm_fopen	function
(	O
char	O
*	O
,	O
char	O
*	O
)	O
;	O
weaponDesc	struct
aim9mDesc	struct
=	O
{	O
WK_AIM9M	int
,	O
select_aim9m	function
,	O
update_aim9m	function
,	O
display_aim9m	function
,	O
fire_aim9m	function
,	O
(	O
int	O
(	O
*	O
)	O
(	O
craft	struct
*	O
)	O
)	O
NULL	O
,	O
}	O
;	O
int	O
hasFired	array
[	O
MAXPLAYERS	int
]	O
;	O
static	O
int	O
count	int
[	O
MAXPLAYERS	int
]	O
;	O
int	O
select_aim9m	function
(	O
craft	struct
*	O
c	pointer
)	O
{	O
hasFired	array
[	O
c	pointer
->	O
pIndex	int
]	O
=	O
0	int
;	O
count	int
[	O
c	pointer
->	O
pIndex	int
]	O
=	O
countOrdinance	function
(	O
c	pointer
,	O
"aim9m"	pointer
)	O
;	O
return	O
1	int
;	O
}	O
int	O
update_aim9m	function
(	O
craft	struct
*	O
c	pointer
)	O
{	O
register	O
int	O
i	int
;	O
if	O
(	O
(	O
c	pointer
->	O
flags	short
&	O
FL_GND_CONTACT	O
)	O
==	O
0	int
)	O
{	O
if	O
(	O
hasFired	array
[	O
c	pointer
->	O
pIndex	int
]	O
&&	O
count	int
[	O
c	pointer
->	O
pIndex	int
]	O
>	O
0	int
)	O
{	O
i	int
=	O
readyStation	function
(	O
c	pointer
,	O
"aim9m"	pointer
)	O
;	O
if	O
(	O
i	int
<	O
0	int
)	O
fprintf	function
(	O
stderr	pointer
,	O
"Oops. Can't find an AIM-9\n"	pointer
)	O
;	O
else	O
{	O
if	O
(	O
arcadeMode	int
==	O
0	int
)	O
{	O
c	pointer
->	O
station	pointer
[	O
i	int
]	O
.	O
type	pointer
=	O
""	pointer
;	O
count	int
[	O
c	pointer
->	O
pIndex	int
]	O
--	O
;	O
}	O
fireMissile	function
(	O
c	pointer
,	O
i	int
)	O
;	O
playSound	function
(	O
c	pointer
,	O
SoundMissileLaunch	int
)	O
;	O
}	O
hasFired	array
[	O
c	pointer
->	O
pIndex	int
]	O
=	O
0	int
;	O
}	O
}	O
return	O
1	int
;	O
}	O
int	O
fire_aim9m	function
(	O
craft	struct
*	O
c	pointer
)	O
{	O
hasFired	array
[	O
c	pointer
->	O
pIndex	int
]	O
=	O
1	int
;	O
return	O
1	int
;	O
}	O
int	O
display_aim9m	function
(	O
craft	struct
*	O
c	pointer
,	O
craftType	struct
*	O
w	pointer
,	O
viewer	struct
*	O
u	pointer
,	O
int	O
*	O
i1	pointer
,	O
int	O
*	O
i2	pointer
)	O
{	O
char	O
s	double
[	O
16	int
]	O
;	O
double	O
d	long
,	O
a1	double
,	O
v	struct
,	O
r	pointer
,	O
root1	double
,	O
root2	double
,	O
n	double
,	O
t	pointer
;	O
VPoint	struct
tmp	struct
;	O
int	O
target	long
,	O
result	char
=	O
0	int
;	O
sprintf	function
(	O
s	double
,	O
"%d AIM-9M"	pointer
,	O
count	int
[	O
c	pointer
->	O
pIndex	int
]	O
)	O
;	O
strcpy	function
(	O
c	pointer
->	O
leftHUD	array
[	O
3	int
]	O
,	O
s	double
)	O
;	O
v	struct
=	O
mag	O
(	O
c	pointer
->	O
Cg	struct
)	O
;	O
a1	double
=	O
(	O
w	pointer
->	O
maxThrust	double
-	O
0.5	int
*	O
c	pointer
->	O
rho	double
*	O
w	pointer
->	O
CDOrigin	double
*	O
v	struct
*	O
v	struct
)	O
/	O
(	O
w	pointer
->	O
emptyWeight	double
+	O
w	pointer
->	O
maxFuel	double
)	O
*	O
earth_g	int
;	O
if	O
(	O
c	pointer
->	O
curRadarTarget	short
>=	O
0	int
&&	O
a1	double
>=	O
0.0	int
)	O
{	O
d	long
=	O
c	pointer
->	O
targetDistance	double
;	O
r	pointer
=	O
c	pointer
->	O
targetClosure	double
;	O
n	double
=	O
r	pointer
*	O
r	pointer
+	O
2.0	int
*	O
a1	double
*	O
d	long
;	O
if	O
(	O
n	double
>	O
0	int
)	O
{	O
n	double
=	O
sqrt	function
(	O
n	double
)	O
;	O
root1	double
=	O
(	O
-	O
r	pointer
+	O
n	double
)	O
/	O
a1	double
;	O
root2	double
=	O
(	O
-	O
r	pointer
-	O
n	double
)	O
/	O
a1	double
;	O
if	O
(	O
root1	double
>=	O
0.0	int
)	O
if	O
(	O
root2	double
>=	O
0.0	int
)	O
if	O
(	O
root1	double
<	O
root2	double
)	O
t	pointer
=	O
root1	double
;	O
else	O
t	pointer
=	O
root2	double
;	O
else	O
t	pointer
=	O
root1	double
;	O
else	O
if	O
(	O
root2	double
>=	O
0.0	int
)	O
t	pointer
=	O
root2	double
;	O
else	O
t	pointer
=	O
-	O
1.0	int
;	O
}	O
else	O
t	pointer
=	O
-	O
1.0	int
;	O
}	O
else	O
t	pointer
=	O
-	O
1.0	int
;	O
if	O
(	O
count	int
[	O
c	pointer
->	O
pIndex	int
]	O
>	O
0	int
)	O
{	O
target	long
=	O
getIRTarget	function
(	O
c	pointer
,	O
&	O
tmp	struct
,	O
0.17633	int
)	O
;	O
}	O
else	O
{	O
target	long
=	O
-	O
1	int
;	O
}	O
if	O
(	O
target	long
>=	O
0	int
&&	O
t	pointer
<=	O
15.0	int
)	O
sprintf	function
(	O
s	double
,	O
"LOCKED   %d"	pointer
,	O
(	O
int	O
)	O
(	O
t	pointer
+	O
0.5	int
)	O
)	O
;	O
else	O
if	O
(	O
t	pointer
<	O
0.0	int
)	O
sprintf	function
(	O
s	double
,	O
"ARM      --"	pointer
)	O
;	O
else	O
if	O
(	O
t	pointer
<=	O
15.0	int
)	O
sprintf	function
(	O
s	double
,	O
"IN RANGE %d"	pointer
,	O
(	O
int	O
)	O
(	O
t	pointer
+	O
0.5	int
)	O
)	O
;	O
else	O
sprintf	function
(	O
s	double
,	O
"ARM      %d"	pointer
,	O
(	O
int	O
)	O
(	O
t	pointer
+	O
0.5	int
)	O
)	O
;	O
if	O
(	O
target	long
>=	O
0	int
&&	O
t	pointer
<=	O
10.0	int
&&	O
t	pointer
>	O
(	O
w	pointer
->	O
armDelay	double
+	O
0.5	int
)	O
)	O
{	O
result	char
=	O
1	int
;	O
}	O
strcpy	function
(	O
c	pointer
->	O
leftHUD	array
[	O
2	int
]	O
,	O
s	double
)	O
;	O
strcpy	function
(	O
c	pointer
->	O
leftHUD	array
[	O
4	int
]	O
,	O
""	pointer
)	O
;	O
return	O
result	char
;	O
}	O
extern	O
craftType	struct
*	O
newCraft	function
(	O
void	O
)	O
;	O
void	O
initaim9	function
(	O
void	O
)	O
{	O
craftType	struct
*	O
c	pointer
;	O
FILE	struct
*	O
f	struct
;	O
dis_entity_type	struct
em1	struct
=	O
{	O
2	int
,	O
1	int
,	O
225	int
,	O
1	int
,	O
1	int
,	O
3	int
,	O
0	int
}	O
;	O
dis_entity_type	struct
em2	struct
=	O
{	O
2	int
,	O
1	int
,	O
222	int
,	O
1	int
,	O
2	int
,	O
1	int
,	O
0	int
}	O
;	O
c	pointer
=	O
newCraft	function
(	O
)	O
;	O
c	pointer
->	O
name	pointer
=	O
strdup	function
(	O
"aim-9m"	pointer
)	O
;	O
c	pointer
->	O
entityType	struct
=	O
em1	struct
;	O
c	pointer
->	O
altEntityType	struct
=	O
em2	struct
;	O
wtbl	array
[	O
0	int
]	O
=	O
aim9mDesc	struct
;	O
wtbl	array
[	O
0	int
]	O
.	O
w	pointer
=	O
c	pointer
;	O
c	pointer
->	O
CDOrigin	double
=	O
0.04	int
;	O
c	pointer
->	O
CDFactor	double
=	O
-	O
2.56694	int
;	O
c	pointer
->	O
CDBOrigin	double
=	O
0.0	int
;	O
c	pointer
->	O
CDBFactor	double
=	O
0.0	int
;	O
VIdentMatrix	function
(	O
&	O
(	O
c	pointer
->	O
I	int
)	O
)	O
;	O
c	pointer
->	O
I	int
.	O
m	float
[	O
0	int
]	O
[	O
0	int
]	O
=	O
0.0	int
;	O
c	pointer
->	O
I	int
.	O
m	float
[	O
1	int
]	O
[	O
1	int
]	O
=	O
0.0	int
;	O
c	pointer
->	O
I	int
.	O
m	float
[	O
2	int
]	O
[	O
2	int
]	O
=	O
0.0	int
;	O
c	pointer
->	O
cmSlope	double
=	O
-	O
1.88	int
;	O
c	pointer
->	O
cmFactor	double
=	O
-	O
1.00	int
;	O
c	pointer
->	O
wingS	double
=	O
1.0	int
;	O
c	pointer
->	O
emptyWeight	double
=	O
90.0	int
;	O
c	pointer
->	O
maxFuel	double
=	O
100.0	int
;	O
c	pointer
->	O
maxThrust	double
=	O
4000.0	int
;	O
c	pointer
->	O
spFuelConsump	double
=	O
40	int
;	O
c	pointer
->	O
armDelay	double
=	O
1.0	int
;	O
c	pointer
->	O
groundingPoint	struct
.	O
x	float
=	O
0.0	int
;	O
c	pointer
->	O
groundingPoint	struct
.	O
y	short
=	O
0.0	int
;	O
c	pointer
->	O
groundingPoint	struct
.	O
z	short
=	O
0.0	int
;	O
c	pointer
->	O
viewPoint	struct
.	O
x	float
=	O
0.0	int
;	O
c	pointer
->	O
viewPoint	struct
.	O
y	short
=	O
0.0	int
;	O
c	pointer
->	O
viewPoint	struct
.	O
z	short
=	O
0.0	int
;	O
c	pointer
->	O
muStatic	double
=	O
0.0	int
;	O
c	pointer
->	O
muKinetic	double
=	O
0.0	int
;	O
c	pointer
->	O
muBStatic	double
=	O
0.0	int
;	O
c	pointer
->	O
muBKinetic	double
=	O
0.0	int
;	O
c	pointer
->	O
maxNWDef	double
=	O
0.0	int
;	O
c	pointer
->	O
NWIncr	double
=	O
0.0	int
;	O
c	pointer
->	O
maxNWS	double
=	O
0.0	int
;	O
c	pointer
->	O
gearD1	double
=	O
0.0	int
;	O
c	pointer
->	O
gearD2	double
=	O
0.0	int
;	O
f	struct
=	O
acm_fopen	function
(	O
"aim9.obv"	pointer
,	O
"r"	pointer
)	O
;	O
c	pointer
->	O
object	pointer
=	O
VReadObject	function
(	O
f	struct
)	O
;	O
fclose	function
(	O
f	struct
)	O
;	O
}	O
