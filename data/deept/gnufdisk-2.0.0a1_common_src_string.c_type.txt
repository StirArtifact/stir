struct	O
gnufdisk_string	struct
{	O
char	O
*	O
data	pointer
;	O
size_t	long
size	long
;	O
}	O
;	O
static	O
int	O
check_string	function
(	O
struct	O
gnufdisk_string	struct
*	O
_s	pointer
)	O
{	O
if	O
(	O
gnufdisk_check_memory	function
(	O
_s	pointer
,	O
sizeof	O
(	O
struct	O
gnufdisk_string	struct
)	O
,	O
0	int
)	O
!=	O
0	int
||	O
(	O
_s	pointer
->	O
data	pointer
!=	O
NULL	O
&&	O
gnufdisk_check_memory	function
(	O
_s	pointer
->	O
data	pointer
,	O
_s	pointer
->	O
size	long
,	O
0	int
)	O
!=	O
0	int
)	O
)	O
return	O
EFAULT	int
;	O
return	O
0	int
;	O
}	O
struct	O
gnufdisk_string	struct
*	O
gnufdisk_string_new	function
(	O
const	O
char	O
*	O
_fmt	pointer
,	O
...	O
)	O
{	O
va_list	array
args	array
;	O
struct	O
gnufdisk_string	struct
*	O
ret	pointer
;	O
int	O
err	int
;	O
if	O
(	O
(	O
ret	pointer
=	O
malloc	function
(	O
sizeof	O
(	O
struct	O
gnufdisk_string	struct
)	O
)	O
)	O
==	O
NULL	O
)	O
{	O
err	int
=	O
errno	O
;	O
goto	O
lb_out	O
;	O
}	O
memset	function
(	O
ret	pointer
,	O
0	int
,	O
sizeof	O
(	O
struct	O
gnufdisk_string	struct
)	O
)	O
;	O
va_start	O
(	O
args	array
,	O
_fmt	pointer
)	O
;	O
ret	pointer
->	O
size	long
=	O
gnufdisk_vasprintf	function
(	O
&	O
ret	pointer
->	O
data	pointer
,	O
_fmt	pointer
,	O
args	array
)	O
;	O
va_end	O
(	O
args	array
)	O
;	O
if	O
(	O
ret	pointer
->	O
size	long
<	O
0	int
)	O
{	O
err	int
=	O
errno	O
;	O
free	function
(	O
ret	pointer
)	O
;	O
ret	pointer
=	O
NULL	O
;	O
}	O
lb_out	O
:	O
errno	O
=	O
err	int
;	O
return	O
ret	pointer
;	O
}	O
int	O
gnufdisk_string_set	function
(	O
struct	O
gnufdisk_string	struct
*	O
_p	pointer
,	O
const	O
char	O
*	O
_fmt	pointer
,	O
...	O
)	O
{	O
va_list	array
args	array
;	O
char	O
*	O
s	pointer
;	O
int	O
err	int
;	O
int	O
ret	pointer
;	O
if	O
(	O
(	O
err	int
=	O
check_string	function
(	O
_p	pointer
)	O
)	O
!=	O
0	int
)	O
{	O
ret	pointer
=	O
-	O
1	int
;	O
goto	O
lb_out	O
;	O
}	O
va_start	O
(	O
args	array
,	O
_fmt	pointer
)	O
;	O
ret	pointer
=	O
gnufdisk_vasprintf	function
(	O
&	O
s	pointer
,	O
_fmt	pointer
,	O
args	array
)	O
;	O
va_end	O
(	O
args	array
)	O
;	O
if	O
(	O
ret	pointer
<	O
0	int
)	O
{	O
ret	pointer
=	O
-	O
1	int
;	O
err	int
=	O
errno	O
;	O
goto	O
lb_out	O
;	O
}	O
else	O
err	int
=	O
0	int
;	O
if	O
(	O
_p	pointer
->	O
data	pointer
)	O
free	function
(	O
_p	pointer
->	O
data	pointer
)	O
;	O
_p	pointer
->	O
data	pointer
=	O
s	pointer
;	O
_p	pointer
->	O
size	long
=	O
ret	pointer
;	O
lb_out	O
:	O
errno	O
=	O
err	int
;	O
return	O
ret	pointer
;	O
}	O
int	O
gnufdisk_string_length	function
(	O
struct	O
gnufdisk_string	struct
*	O
_p	pointer
)	O
{	O
if	O
(	O
(	O
errno	O
=	O
check_string	function
(	O
_p	pointer
)	O
)	O
!=	O
0	int
)	O
return	O
-	O
1	int
;	O
return	O
strlen	function
(	O
_p	pointer
->	O
data	pointer
!=	O
NULL	O
?	O
_p	pointer
->	O
data	pointer
:	O
""	pointer
)	O
;	O
}	O
const	O
char	O
*	O
gnufdisk_string_c_string	function
(	O
struct	O
gnufdisk_string	struct
*	O
_p	pointer
)	O
{	O
if	O
(	O
(	O
errno	O
=	O
check_string	function
(	O
_p	pointer
)	O
)	O
!=	O
0	int
)	O
return	O
NULL	O
;	O
return	O
_p	pointer
->	O
data	pointer
;	O
}	O
char	O
*	O
gnufdisk_string_c_string_dup	function
(	O
struct	O
gnufdisk_string	struct
*	O
_p	pointer
)	O
{	O
char	O
*	O
r	pointer
;	O
if	O
(	O
(	O
errno	O
=	O
check_string	function
(	O
_p	pointer
)	O
)	O
!=	O
0	int
)	O
return	O
NULL	O
;	O
r	pointer
=	O
strdup	function
(	O
_p	pointer
->	O
data	pointer
?	O
_p	pointer
->	O
data	pointer
:	O
""	pointer
)	O
;	O
if	O
(	O
r	pointer
==	O
NULL	O
)	O
errno	O
=	O
ENOMEM	int
;	O
return	O
r	pointer
;	O
}	O
int	O
gnufdisk_string_delete	function
(	O
struct	O
gnufdisk_string	struct
*	O
_s	pointer
)	O
{	O
if	O
(	O
(	O
errno	O
=	O
check_string	function
(	O
_s	pointer
)	O
)	O
!=	O
0	int
)	O
return	O
-	O
1	int
;	O
if	O
(	O
_s	pointer
->	O
data	pointer
)	O
free	function
(	O
_s	pointer
->	O
data	pointer
)	O
;	O
free	function
(	O
_s	pointer
)	O
;	O
return	O
0	int
;	O
}	O
