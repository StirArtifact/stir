void	O
recsel_parse_args	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
)	O
;	O
bool	bool
recsel_process_data	function
(	O
rec_db_t	pointer
db	pointer
)	O
;	O
char	O
*	O
recutl_sex_str	pointer
=	O
NULL	O
;	O
rec_sex_t	pointer
recutl_sex	pointer
=	O
NULL	O
;	O
char	O
*	O
recutl_quick_str	pointer
=	O
NULL	O
;	O
char	O
*	O
recsel_fex_str	pointer
=	O
NULL	O
;	O
rec_fex_t	pointer
recsel_fex	pointer
=	O
NULL	O
;	O
char	O
*	O
recutl_type	pointer
=	O
NULL	O
;	O
bool	bool
recsel_collapse	bool
=	O
false	int
;	O
bool	bool
recsel_count	bool
=	O
false	int
;	O
bool	bool
recutl_insensitive	bool
=	O
false	int
;	O
bool	bool
recsel_descriptors	bool
=	O
false	int
;	O
rec_fex_t	pointer
recutl_sort_by_fields	pointer
=	O
NULL	O
;	O
rec_fex_t	pointer
recsel_group_by_fields	pointer
=	O
NULL	O
;	O
rec_writer_mode_t	enum
recsel_write_mode	enum
=	O
REC_WRITER_NORMAL	int
;	O
char	O
*	O
recsel_password	pointer
=	O
NULL	O
;	O
bool	bool
recsel_uniq	bool
=	O
false	int
;	O
size_t	long
recutl_random	long
=	O
0	int
;	O
char	O
*	O
recsel_join	pointer
=	O
NULL	O
;	O
enum	O
{	O
COMMON_ARGS	O
,	O
RECORD_SELECTION_ARGS	O
,	O
PRINT_ARG	int
,	O
PRINT_VALUES_ARG	int
,	O
PRINT_IN_A_ROW_ARG	int
,	O
COLLAPSE_ARG	int
,	O
COUNT_ARG	int
,	O
DESCRIPTOR_ARG	int
,	O
PRINT_SEXPS_ARG	int
,	O
SORT_ARG	int
,	O
UNIQ_ARG	int
,	O
GROUP_BY_ARG	int
,	O
JOIN_ARG	int
}	O
;	O
static	O
const	O
struct	O
option	struct
GNU_longOptions	array
[	O
]	O
=	O
{	O
COMMON_LONG_ARGS	O
,	O
RECORD_SELECTION_LONG_ARGS	O
,	O
{	O
"print"	pointer
,	O
required_argument	int
,	O
NULL	O
,	O
PRINT_ARG	int
}	O
,	O
{	O
"print-values"	pointer
,	O
required_argument	int
,	O
NULL	O
,	O
PRINT_VALUES_ARG	int
}	O
,	O
{	O
"print-row"	pointer
,	O
required_argument	int
,	O
NULL	O
,	O
PRINT_IN_A_ROW_ARG	int
}	O
,	O
{	O
"collapse"	pointer
,	O
no_argument	int
,	O
NULL	O
,	O
COLLAPSE_ARG	int
}	O
,	O
{	O
"count"	pointer
,	O
no_argument	int
,	O
NULL	O
,	O
COUNT_ARG	int
}	O
,	O
{	O
"include-descriptors"	pointer
,	O
no_argument	int
,	O
NULL	O
,	O
DESCRIPTOR_ARG	int
}	O
,	O
{	O
"print-sexps"	pointer
,	O
no_argument	int
,	O
NULL	O
,	O
PRINT_SEXPS_ARG	int
}	O
,	O
{	O
"sort"	pointer
,	O
required_argument	int
,	O
NULL	O
,	O
SORT_ARG	int
}	O
,	O
{	O
"uniq"	pointer
,	O
no_argument	int
,	O
NULL	O
,	O
UNIQ_ARG	int
}	O
,	O
{	O
"group-by"	pointer
,	O
required_argument	int
,	O
NULL	O
,	O
GROUP_BY_ARG	int
}	O
,	O
{	O
"join"	pointer
,	O
required_argument	int
,	O
NULL	O
,	O
JOIN_ARG	int
}	O
,	O
{	O
NULL	O
,	O
0	int
,	O
NULL	O
,	O
0	int
}	O
}	O
;	O
void	O
recutl_print_help	function
(	O
void	O
)	O
{	O
printf	function
(	O
_	O
(	O
"Usage: recsel [OPTION]... [-t TYPE] [-j FIELD] [-n INDEXES | -e RECORD_EXPR | -q STR | -m NUM] [-c | (-p|-P) FIELD_EXPR] [FILE]...\n"	pointer
)	O
)	O
;	O
fputs	function
(	O
_	O
(	O
"Select and print rec data.\n"	pointer
)	O
,	O
stdout	pointer
)	O
;	O
puts	function
(	O
""	pointer
)	O
;	O
fputs	function
(	O
_	O
(	O
"  -d, --include-descriptors           print record descriptors along with the matched\n                                        records.\n  -C, --collapse                      do not section the result in records with newlines.\n  -S, --sort=FIELD,...                sort the output by the specified fields.\n  -G, --group-by=FIELD,...            group records by the specified fields.\n  -U, --uniq                          remove duplicated fields in the output records.\n"	pointer
)	O
,	O
stdout	pointer
)	O
;	O
recutl_print_help_common	function
(	O
)	O
;	O
puts	function
(	O
""	pointer
)	O
;	O
recutl_print_help_record_selection	function
(	O
)	O
;	O
fputs	function
(	O
_	O
(	O
"  -j, --join=FIELD                    perform an inner join using the specified field.\n"	pointer
)	O
,	O
stdout	pointer
)	O
;	O
puts	function
(	O
""	pointer
)	O
;	O
fputs	function
(	O
_	O
(	O
"Output options:\n  -p, --print=FIELDS                  comma-separated list of fields to print for each\n                                        matching record.\n  -P, --print-values=FIELDS           as -p, but print only the values of the selected\n                                        fields.\n  -R, --print-row=FIELDS              as -P, but separate the values with spaces instead\n                                        of newlines.\n  -c, --count                         print a count of the matching records instead of\n                                        the records themselves.\n"	pointer
)	O
,	O
stdout	pointer
)	O
;	O
puts	function
(	O
""	pointer
)	O
;	O
fputs	function
(	O
_	O
(	O
"Special options:\n      --print-sexps                   print the data in sexps instead of rec format.\n"	pointer
)	O
,	O
stdout	pointer
)	O
;	O
puts	function
(	O
""	pointer
)	O
;	O
recutl_print_help_footer	function
(	O
)	O
;	O
}	O
void	O
recsel_parse_args	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
char	O
c	int
;	O
int	O
ret	int
;	O
while	O
(	O
(	O
ret	int
=	O
getopt_long	function
(	O
argc	int
,	O
argv	pointer
,	O
RECORD_SELECTION_SHORT_ARGS	pointer
ENCRYPTION_SHORT_ARGS	pointer
"S:Cdcp:P:R:UG:j:"	pointer
,	O
GNU_longOptions	array
,	O
NULL	O
)	O
)	O
!=	O
-	O
1	int
)	O
{	O
c	int
=	O
ret	int
;	O
switch	O
(	O
c	int
)	O
{	O
COMMON_ARGS_CASES	O
RECORD_SELECTION_ARGS_CASES	O
case	O
DESCRIPTOR_ARG	int
:	O
case	O
'd'	O
:	O
{	O
recsel_descriptors	bool
=	O
true	int
;	O
break	O
;	O
}	O
case	O
PRINT_SEXPS_ARG	int
:	O
{	O
recsel_write_mode	enum
=	O
REC_WRITER_SEXP	int
;	O
break	O
;	O
}	O
case	O
UNIQ_ARG	int
:	O
case	O
'U'	O
:	O
{	O
recsel_uniq	bool
=	O
true	int
;	O
break	O
;	O
}	O
case	O
SORT_ARG	int
:	O
case	O
'S'	O
:	O
{	O
if	O
(	O
recutl_sort_by_fields	pointer
)	O
{	O
recutl_fatal	function
(	O
_	O
(	O
"only one field list can be specified as a sorting criteria.\n"	pointer
)	O
)	O
;	O
}	O
if	O
(	O
!	O
rec_fex_check	function
(	O
optarg	pointer
,	O
REC_FEX_CSV	int
)	O
)	O
{	O
recutl_fatal	function
(	O
_	O
(	O
"invalid field names in -S.\n"	pointer
)	O
)	O
;	O
}	O
recutl_sort_by_fields	pointer
=	O
rec_fex_new	function
(	O
optarg	pointer
,	O
REC_FEX_CSV	int
)	O
;	O
if	O
(	O
!	O
recutl_sort_by_fields	pointer
)	O
{	O
recutl_fatal	function
(	O
_	O
(	O
"internal error creating fex.\n"	pointer
)	O
)	O
;	O
}	O
break	O
;	O
}	O
case	O
JOIN_ARG	int
:	O
case	O
'j'	O
:	O
{	O
if	O
(	O
recsel_join	pointer
)	O
{	O
recutl_fatal	function
(	O
_	O
(	O
"only one field can be specified as join criteria.\n"	pointer
)	O
)	O
;	O
}	O
if	O
(	O
!	O
rec_field_name_p	function
(	O
optarg	pointer
)	O
)	O
{	O
recutl_fatal	function
(	O
_	O
(	O
"please specify a correct field name to -j|--join.\n"	pointer
)	O
)	O
;	O
}	O
recsel_join	pointer
=	O
xstrdup	function
(	O
optarg	pointer
)	O
;	O
break	O
;	O
}	O
case	O
GROUP_BY_ARG	int
:	O
case	O
'G'	O
:	O
{	O
if	O
(	O
recsel_group_by_fields	pointer
)	O
{	O
recutl_fatal	function
(	O
_	O
(	O
"only one field list can be specified as a grouping criteria.\n"	pointer
)	O
)	O
;	O
}	O
if	O
(	O
!	O
rec_fex_check	function
(	O
optarg	pointer
,	O
REC_FEX_CSV	int
)	O
)	O
{	O
recutl_fatal	function
(	O
_	O
(	O
"invalid field names in -G.\n"	pointer
)	O
)	O
;	O
}	O
recsel_group_by_fields	pointer
=	O
rec_fex_new	function
(	O
optarg	pointer
,	O
REC_FEX_CSV	int
)	O
;	O
if	O
(	O
!	O
recsel_group_by_fields	pointer
)	O
{	O
recutl_fatal	function
(	O
_	O
(	O
"internal error creating fex.\n"	pointer
)	O
)	O
;	O
}	O
break	O
;	O
}	O
case	O
PRINT_ARG	int
:	O
case	O
PRINT_VALUES_ARG	int
:	O
case	O
PRINT_IN_A_ROW_ARG	int
:	O
case	O
'p'	O
:	O
case	O
'P'	O
:	O
case	O
'R'	O
:	O
{	O
if	O
(	O
recsel_count	bool
)	O
{	O
recutl_fatal	function
(	O
_	O
(	O
"cannot specify -[pPR] and also -c.\n"	pointer
)	O
)	O
;	O
}	O
if	O
(	O
(	O
c	int
==	O
'P'	O
)	O
||	O
(	O
c	int
==	O
PRINT_VALUES_ARG	int
)	O
)	O
{	O
recsel_write_mode	enum
=	O
REC_WRITER_VALUES	int
;	O
}	O
if	O
(	O
(	O
c	int
==	O
'R'	O
)	O
||	O
(	O
c	int
==	O
PRINT_IN_A_ROW_ARG	int
)	O
)	O
{	O
recsel_write_mode	enum
=	O
REC_WRITER_VALUES_ROW	int
;	O
}	O
recsel_fex_str	pointer
=	O
xstrdup	function
(	O
optarg	pointer
)	O
;	O
if	O
(	O
!	O
rec_fex_check	function
(	O
recsel_fex_str	pointer
,	O
REC_FEX_SUBSCRIPTS	int
)	O
)	O
{	O
recutl_fatal	function
(	O
_	O
(	O
"invalid list of fields in -%c\n"	pointer
)	O
,	O
c	int
)	O
;	O
}	O
recsel_fex	pointer
=	O
rec_fex_new	function
(	O
recsel_fex_str	pointer
,	O
REC_FEX_SUBSCRIPTS	int
)	O
;	O
if	O
(	O
!	O
recsel_fex	pointer
)	O
{	O
recutl_fatal	function
(	O
_	O
(	O
"internal error creating the field expression.\n"	pointer
)	O
)	O
;	O
}	O
{	O
size_t	long
i	long
=	O
0	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
rec_fex_size	function
(	O
recsel_fex	pointer
)	O
;	O
i	long
++	O
)	O
{	O
rec_fex_elem_t	pointer
elem	pointer
=	O
rec_fex_get	function
(	O
recsel_fex	pointer
,	O
i	long
)	O
;	O
const	O
char	O
*	O
fname	pointer
=	O
rec_fex_elem_function_name	function
(	O
elem	pointer
)	O
;	O
if	O
(	O
fname	pointer
&&	O
!	O
rec_aggregate_std_p	function
(	O
fname	pointer
)	O
)	O
{	O
recutl_fatal	function
(	O
_	O
(	O
"invalid aggregate function '%s'\n"	pointer
)	O
,	O
fname	pointer
)	O
;	O
}	O
}	O
}	O
break	O
;	O
}	O
case	O
COLLAPSE_ARG	int
:	O
case	O
'C'	O
:	O
{	O
recsel_collapse	bool
=	O
true	int
;	O
break	O
;	O
}	O
case	O
COUNT_ARG	int
:	O
case	O
'c'	O
:	O
{	O
if	O
(	O
recsel_fex_str	pointer
)	O
{	O
recutl_fatal	function
(	O
_	O
(	O
"cannot specify -c and also -p.\n"	pointer
)	O
)	O
;	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
recsel_count	bool
=	O
true	int
;	O
break	O
;	O
}	O
default	O
:	O
{	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
}	O
}	O
if	O
(	O
!	O
recutl_type	pointer
&&	O
recsel_join	pointer
)	O
{	O
recutl_fatal	function
(	O
_	O
(	O
"joins can only be used when a named record set is selected.\n"	pointer
)	O
)	O
;	O
}	O
}	O
bool	bool
recsel_process_data	function
(	O
rec_db_t	pointer
db	pointer
)	O
{	O
int	O
rset_size	int
=	O
0	int
;	O
rec_rset_t	pointer
rset	pointer
=	O
NULL	O
;	O
rec_writer_t	pointer
writer	pointer
=	O
NULL	O
;	O
if	O
(	O
!	O
recutl_type	pointer
&&	O
(	O
rec_db_size	function
(	O
db	pointer
)	O
>	O
1	int
)	O
)	O
{	O
recutl_fatal	function
(	O
_	O
(	O
"several record types found.  Please use -t to specify one.\n"	pointer
)	O
)	O
;	O
}	O
{	O
int	O
flags	int
=	O
0	int
;	O
if	O
(	O
recutl_insensitive	bool
)	O
{	O
flags	int
=	O
flags	int
|	O
REC_F_ICASE	int
;	O
}	O
if	O
(	O
recsel_descriptors	bool
)	O
{	O
flags	int
=	O
flags	int
|	O
REC_F_DESCRIPTOR	int
;	O
}	O
if	O
(	O
recsel_uniq	bool
)	O
{	O
flags	int
=	O
flags	int
|	O
REC_F_UNIQ	int
;	O
}	O
rset	pointer
=	O
rec_db_query	function
(	O
db	pointer
,	O
recutl_type	pointer
,	O
recsel_join	pointer
,	O
recutl_index	function
(	O
)	O
,	O
recutl_sex	pointer
,	O
recutl_quick_str	pointer
,	O
recutl_random	long
,	O
recsel_fex	pointer
,	O
recsel_password	pointer
,	O
recsel_group_by_fields	pointer
,	O
recutl_sort_by_fields	pointer
,	O
flags	int
)	O
;	O
if	O
(	O
!	O
rset	pointer
)	O
recutl_out_of_memory	function
(	O
)	O
;	O
}	O
if	O
(	O
recsel_count	bool
)	O
{	O
fprintf	function
(	O
stdout	pointer
,	O
"%d\n"	pointer
,	O
rec_rset_num_records	function
(	O
rset	pointer
)	O
)	O
;	O
}	O
else	O
{	O
writer	pointer
=	O
rec_writer_new	function
(	O
stdout	pointer
)	O
;	O
rec_writer_set_collapse	function
(	O
writer	pointer
,	O
recsel_collapse	bool
)	O
;	O
rec_writer_set_skip_comments	function
(	O
writer	pointer
,	O
true	int
)	O
;	O
rec_writer_set_mode	function
(	O
writer	pointer
,	O
recsel_write_mode	enum
)	O
;	O
rec_write_rset	function
(	O
writer	pointer
,	O
rset	pointer
)	O
;	O
rec_writer_destroy	function
(	O
writer	pointer
)	O
;	O
}	O
rec_rset_destroy	function
(	O
rset	pointer
)	O
;	O
return	O
true	int
;	O
}	O
int	O
main	function
(	O
int	O
argc	int
,	O
char	O
*	O
argv	pointer
[	O
]	O
)	O
{	O
int	O
res	int
;	O
rec_db_t	pointer
db	pointer
;	O
res	int
=	O
0	int
;	O
recutl_init	function
(	O
"recsel"	pointer
)	O
;	O
recsel_parse_args	function
(	O
argc	int
,	O
argv	pointer
)	O
;	O
db	pointer
=	O
recutl_build_db	function
(	O
argc	int
,	O
argv	pointer
)	O
;	O
if	O
(	O
!	O
db	pointer
)	O
{	O
res	int
=	O
1	int
;	O
return	O
res	int
;	O
}	O
if	O
(	O
!	O
recsel_process_data	function
(	O
db	pointer
)	O
)	O
{	O
res	int
=	O
1	int
;	O
}	O
rec_db_destroy	function
(	O
db	pointer
)	O
;	O
return	O
res	int
;	O
}	O
