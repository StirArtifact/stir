struct	O
uparams	struct
{	O
int	O
dup_args	int
;	O
int	O
dup_args_note	int
;	O
int	O
short_opt_col	int
;	O
int	O
long_opt_col	int
;	O
int	O
doc_opt_col	int
;	O
int	O
opt_doc_col	int
;	O
int	O
header_col	int
;	O
int	O
usage_indent	int
;	O
int	O
rmargin	long
;	O
int	O
valid	int
;	O
}	O
;	O
static	O
struct	O
uparams	struct
uparams	struct
=	O
{	O
DUP_ARGS	int
,	O
DUP_ARGS_NOTE	int
,	O
SHORT_OPT_COL	int
,	O
LONG_OPT_COL	int
,	O
DOC_OPT_COL	int
,	O
OPT_DOC_COL	int
,	O
HEADER_COL	int
,	O
USAGE_INDENT	int
,	O
RMARGIN	int
}	O
;	O
struct	O
uparam_name	struct
{	O
const	O
char	O
name	pointer
[	O
14	int
]	O
;	O
bool	bool
is_bool	bool
;	O
unsigned	O
char	O
uparams_offs	char
;	O
}	O
;	O
static	O
const	O
struct	O
uparam_name	struct
uparam_names	array
[	O
]	O
=	O
{	O
{	O
"dup-args"	pointer
,	O
true	int
,	O
offsetof	O
(	O
struct	O
uparams	struct
,	O
dup_args	int
)	O
}	O
,	O
{	O
"dup-args-note"	pointer
,	O
true	int
,	O
offsetof	O
(	O
struct	O
uparams	struct
,	O
dup_args_note	int
)	O
}	O
,	O
{	O
"short-opt-col"	pointer
,	O
false	int
,	O
offsetof	O
(	O
struct	O
uparams	struct
,	O
short_opt_col	int
)	O
}	O
,	O
{	O
"long-opt-col"	pointer
,	O
false	int
,	O
offsetof	O
(	O
struct	O
uparams	struct
,	O
long_opt_col	int
)	O
}	O
,	O
{	O
"doc-opt-col"	pointer
,	O
false	int
,	O
offsetof	O
(	O
struct	O
uparams	struct
,	O
doc_opt_col	int
)	O
}	O
,	O
{	O
"opt-doc-col"	pointer
,	O
false	int
,	O
offsetof	O
(	O
struct	O
uparams	struct
,	O
opt_doc_col	int
)	O
}	O
,	O
{	O
"header-col"	pointer
,	O
false	int
,	O
offsetof	O
(	O
struct	O
uparams	struct
,	O
header_col	int
)	O
}	O
,	O
{	O
"usage-indent"	pointer
,	O
false	int
,	O
offsetof	O
(	O
struct	O
uparams	struct
,	O
usage_indent	int
)	O
}	O
,	O
{	O
"rmargin"	pointer
,	O
false	int
,	O
offsetof	O
(	O
struct	O
uparams	struct
,	O
rmargin	long
)	O
}	O
}	O
;	O
static	O
void	O
validate_uparams	function
(	O
const	O
struct	O
argp_state	struct
*	O
state	pointer
,	O
struct	O
uparams	struct
*	O
upptr	pointer
)	O
{	O
const	O
struct	O
uparam_name	struct
*	O
up	pointer
;	O
for	O
(	O
up	pointer
=	O
uparam_names	array
;	O
up	pointer
<	O
uparam_names	array
+	O
nuparam_names	O
;	O
up	pointer
++	O
)	O
{	O
if	O
(	O
up	pointer
->	O
is_bool	bool
||	O
up	pointer
->	O
uparams_offs	char
==	O
offsetof	O
(	O
struct	O
uparams	struct
,	O
rmargin	long
)	O
)	O
continue	O
;	O
if	O
(	O
*	O
(	O
int	O
*	O
)	O
(	O
(	O
char	O
*	O
)	O
upptr	pointer
+	O
up	pointer
->	O
uparams_offs	char
)	O
>=	O
upptr	pointer
->	O
rmargin	long
)	O
{	O
__argp_failure	function
(	O
state	pointer
,	O
0	int
,	O
0	int
,	O
dgettext	function
(	O
state	pointer
->	O
root_argp	pointer
->	O
argp_domain	pointer
,	O
"ARGP_HELP_FMT: %s value is less than or equal to %s"	pointer
)	O
,	O
"rmargin"	pointer
,	O
up	pointer
->	O
name	pointer
)	O
;	O
return	O
;	O
}	O
}	O
uparams	struct
=	O
*	O
upptr	pointer
;	O
uparams	struct
.	O
valid	int
=	O
1	int
;	O
}	O
static	O
void	O
fill_in_uparams	function
(	O
const	O
struct	O
argp_state	struct
*	O
state	pointer
)	O
{	O
const	O
char	O
*	O
var	pointer
=	O
getenv	function
(	O
"ARGP_HELP_FMT"	pointer
)	O
;	O
struct	O
uparams	struct
new_params	struct
=	O
uparams	struct
;	O
if	O
(	O
var	pointer
)	O
{	O
while	O
(	O
*	O
var	pointer
)	O
{	O
SKIPWS	O
(	O
var	pointer
)	O
;	O
if	O
(	O
isalpha	function
(	O
(	O
unsigned	O
char	O
)	O
*	O
var	pointer
)	O
)	O
{	O
size_t	long
var_len	long
;	O
const	O
struct	O
uparam_name	struct
*	O
un	pointer
;	O
int	O
unspec	int
=	O
0	int
,	O
val	int
=	O
0	int
;	O
const	O
char	O
*	O
arg	pointer
=	O
var	pointer
;	O
while	O
(	O
isalnum	function
(	O
(	O
unsigned	O
char	O
)	O
*	O
arg	pointer
)	O
||	O
*	O
arg	pointer
==	O
'-'	O
||	O
*	O
arg	pointer
==	O
'_'	O
)	O
arg	pointer
++	O
;	O
var_len	long
=	O
arg	pointer
-	O
var	pointer
;	O
SKIPWS	O
(	O
arg	pointer
)	O
;	O
if	O
(	O
*	O
arg	pointer
==	O
'\0'	O
||	O
*	O
arg	pointer
==	O
','	O
)	O
unspec	int
=	O
1	int
;	O
else	O
if	O
(	O
*	O
arg	pointer
==	O
'='	O
)	O
{	O
arg	pointer
++	O
;	O
SKIPWS	O
(	O
arg	pointer
)	O
;	O
}	O
if	O
(	O
unspec	int
)	O
{	O
if	O
(	O
var	pointer
[	O
0	int
]	O
==	O
'n'	O
&&	O
var	pointer
[	O
1	int
]	O
==	O
'o'	O
&&	O
var	pointer
[	O
2	int
]	O
==	O
'-'	O
)	O
{	O
val	int
=	O
0	int
;	O
var	pointer
+=	O
3	int
;	O
var_len	long
-=	O
3	int
;	O
}	O
else	O
val	int
=	O
1	int
;	O
}	O
else	O
if	O
(	O
isdigit	function
(	O
(	O
unsigned	O
char	O
)	O
*	O
arg	pointer
)	O
)	O
{	O
val	int
=	O
atoi	function
(	O
arg	pointer
)	O
;	O
while	O
(	O
isdigit	function
(	O
(	O
unsigned	O
char	O
)	O
*	O
arg	pointer
)	O
)	O
arg	pointer
++	O
;	O
SKIPWS	O
(	O
arg	pointer
)	O
;	O
}	O
for	O
(	O
un	pointer
=	O
uparam_names	array
;	O
un	pointer
<	O
uparam_names	array
+	O
nuparam_names	O
;	O
un	pointer
++	O
)	O
if	O
(	O
strlen	function
(	O
un	pointer
->	O
name	pointer
)	O
==	O
var_len	long
&&	O
strncmp	function
(	O
var	pointer
,	O
un	pointer
->	O
name	pointer
,	O
var_len	long
)	O
==	O
0	int
)	O
{	O
if	O
(	O
unspec	int
&&	O
!	O
un	pointer
->	O
is_bool	bool
)	O
__argp_failure	function
(	O
state	pointer
,	O
0	int
,	O
0	int
,	O
dgettext	function
(	O
state	pointer
==	O
NULL	O
?	O
NULL	O
:	O
state	pointer
->	O
root_argp	pointer
->	O
argp_domain	pointer
,	O
"%.*s: ARGP_HELP_FMT parameter requires a value"	pointer
)	O
,	O
(	O
int	O
)	O
var_len	long
,	O
var	pointer
)	O
;	O
else	O
*	O
(	O
int	O
*	O
)	O
(	O
(	O
char	O
*	O
)	O
&	O
new_params	struct
+	O
un	pointer
->	O
uparams_offs	char
)	O
=	O
val	int
;	O
break	O
;	O
}	O
if	O
(	O
un	pointer
==	O
uparam_names	array
+	O
nuparam_names	O
)	O
__argp_failure	function
(	O
state	pointer
,	O
0	int
,	O
0	int
,	O
dgettext	function
(	O
state	pointer
==	O
NULL	O
?	O
NULL	O
:	O
state	pointer
->	O
root_argp	pointer
->	O
argp_domain	pointer
,	O
"%.*s: Unknown ARGP_HELP_FMT parameter"	pointer
)	O
,	O
(	O
int	O
)	O
var_len	long
,	O
var	pointer
)	O
;	O
var	pointer
=	O
arg	pointer
;	O
if	O
(	O
*	O
var	pointer
==	O
','	O
)	O
var	pointer
++	O
;	O
}	O
else	O
if	O
(	O
*	O
var	pointer
)	O
{	O
__argp_failure	function
(	O
state	pointer
,	O
0	int
,	O
0	int
,	O
dgettext	function
(	O
state	pointer
==	O
NULL	O
?	O
NULL	O
:	O
state	pointer
->	O
root_argp	pointer
->	O
argp_domain	pointer
,	O
"Garbage in ARGP_HELP_FMT: %s"	pointer
)	O
,	O
var	pointer
)	O
;	O
break	O
;	O
}	O
}	O
validate_uparams	function
(	O
state	pointer
,	O
&	O
new_params	struct
)	O
;	O
}	O
}	O
static	O
int	O
find_char	function
(	O
char	O
ch	char
,	O
char	O
*	O
beg	pointer
,	O
char	O
*	O
end	pointer
)	O
{	O
while	O
(	O
beg	pointer
<	O
end	pointer
)	O
if	O
(	O
*	O
beg	pointer
==	O
ch	char
)	O
return	O
1	int
;	O
else	O
beg	pointer
++	O
;	O
return	O
0	int
;	O
}	O
struct	O
hol_cluster	struct
;	O
struct	O
hol_entry	struct
{	O
const	O
struct	O
argp_option	struct
*	O
opt	pointer
;	O
unsigned	O
num	int
;	O
char	O
*	O
short_options	pointer
;	O
int	O
group	int
;	O
struct	O
hol_cluster	struct
*	O
cluster	pointer
;	O
const	O
struct	O
argp	struct
*	O
argp	struct
;	O
unsigned	O
ord	int
;	O
}	O
;	O
struct	O
hol_cluster	struct
{	O
const	O
char	O
*	O
header	pointer
;	O
int	O
index	function
;	O
int	O
group	int
;	O
struct	O
hol_cluster	struct
*	O
parent	pointer
;	O
const	O
struct	O
argp	struct
*	O
argp	struct
;	O
int	O
depth	int
;	O
struct	O
hol_cluster	struct
*	O
next	int
;	O
}	O
;	O
struct	O
hol	struct
{	O
struct	O
hol_entry	struct
*	O
entries	pointer
;	O
unsigned	O
num_entries	int
;	O
char	O
*	O
short_options	pointer
;	O
struct	O
hol_cluster	struct
*	O
clusters	pointer
;	O
}	O
;	O
static	O
struct	O
hol	struct
*	O
make_hol	function
(	O
const	O
struct	O
argp	struct
*	O
argp	struct
,	O
struct	O
hol_cluster	struct
*	O
cluster	pointer
)	O
{	O
char	O
*	O
so	pointer
;	O
const	O
struct	O
argp_option	struct
*	O
o	pointer
;	O
const	O
struct	O
argp_option	struct
*	O
opts	pointer
=	O
argp	struct
->	O
options	pointer
;	O
struct	O
hol_entry	struct
*	O
entry	pointer
;	O
unsigned	O
num_short_options	int
=	O
0	int
;	O
struct	O
hol	struct
*	O
hol	struct
=	O
malloc	function
(	O
sizeof	O
(	O
struct	O
hol	struct
)	O
)	O
;	O
assert	O
(	O
hol	struct
)	O
;	O
hol	struct
->	O
num_entries	int
=	O
0	int
;	O
hol	struct
->	O
clusters	pointer
=	O
0	int
;	O
if	O
(	O
opts	pointer
)	O
{	O
int	O
cur_group	int
=	O
0	int
;	O
assert	O
(	O
!	O
oalias	O
(	O
opts	pointer
)	O
)	O
;	O
for	O
(	O
o	pointer
=	O
opts	pointer
;	O
!	O
oend	O
(	O
o	pointer
)	O
;	O
o	pointer
++	O
)	O
{	O
if	O
(	O
!	O
oalias	O
(	O
o	pointer
)	O
)	O
hol	struct
->	O
num_entries	int
++	O
;	O
if	O
(	O
oshort	O
(	O
o	pointer
)	O
)	O
num_short_options	int
++	O
;	O
}	O
hol	struct
->	O
entries	pointer
=	O
malloc	function
(	O
sizeof	O
(	O
struct	O
hol_entry	struct
)	O
*	O
hol	struct
->	O
num_entries	int
)	O
;	O
hol	struct
->	O
short_options	pointer
=	O
malloc	function
(	O
num_short_options	int
+	O
1	int
)	O
;	O
assert	O
(	O
hol	struct
->	O
entries	pointer
&&	O
hol	struct
->	O
short_options	pointer
)	O
;	O
if	O
(	O
SIZE_MAX	O
<=	O
UINT_MAX	O
)	O
assert	O
(	O
hol	struct
->	O
num_entries	int
<=	O
SIZE_MAX	O
/	O
sizeof	O
(	O
struct	O
hol_entry	struct
)	O
)	O
;	O
so	pointer
=	O
hol	struct
->	O
short_options	pointer
;	O
for	O
(	O
o	pointer
=	O
opts	pointer
,	O
entry	pointer
=	O
hol	struct
->	O
entries	pointer
;	O
!	O
oend	O
(	O
o	pointer
)	O
;	O
entry	pointer
++	O
)	O
{	O
entry	pointer
->	O
opt	pointer
=	O
o	pointer
;	O
entry	pointer
->	O
num	int
=	O
0	int
;	O
entry	pointer
->	O
short_options	pointer
=	O
so	pointer
;	O
entry	pointer
->	O
group	int
=	O
cur_group	int
=	O
o	pointer
->	O
group	int
?	O
o	pointer
->	O
group	int
:	O
(	O
(	O
!	O
o	pointer
->	O
name	pointer
&&	O
!	O
o	pointer
->	O
key	int
)	O
?	O
cur_group	int
+	O
1	int
:	O
cur_group	int
)	O
;	O
entry	pointer
->	O
cluster	pointer
=	O
cluster	pointer
;	O
entry	pointer
->	O
argp	struct
=	O
argp	struct
;	O
do	O
{	O
entry	pointer
->	O
num	int
++	O
;	O
if	O
(	O
oshort	O
(	O
o	pointer
)	O
&&	O
!	O
find_char	function
(	O
o	pointer
->	O
key	int
,	O
hol	struct
->	O
short_options	pointer
,	O
so	pointer
)	O
)	O
*	O
so	pointer
++	O
=	O
o	pointer
->	O
key	int
;	O
o	pointer
++	O
;	O
}	O
while	O
(	O
!	O
oend	O
(	O
o	pointer
)	O
&&	O
oalias	O
(	O
o	pointer
)	O
)	O
;	O
}	O
*	O
so	pointer
=	O
'\0'	O
;	O
}	O
return	O
hol	struct
;	O
}	O
static	O
struct	O
hol_cluster	struct
*	O
hol_add_cluster	function
(	O
struct	O
hol	struct
*	O
hol	struct
,	O
int	O
group	int
,	O
const	O
char	O
*	O
header	pointer
,	O
int	O
index	function
,	O
struct	O
hol_cluster	struct
*	O
parent	pointer
,	O
const	O
struct	O
argp	struct
*	O
argp	struct
)	O
{	O
struct	O
hol_cluster	struct
*	O
cl	pointer
=	O
malloc	function
(	O
sizeof	O
(	O
struct	O
hol_cluster	struct
)	O
)	O
;	O
if	O
(	O
cl	pointer
)	O
{	O
cl	pointer
->	O
group	int
=	O
group	int
;	O
cl	pointer
->	O
header	pointer
=	O
header	pointer
;	O
cl	pointer
->	O
index	function
=	O
index	function
;	O
cl	pointer
->	O
parent	pointer
=	O
parent	pointer
;	O
cl	pointer
->	O
argp	struct
=	O
argp	struct
;	O
cl	pointer
->	O
depth	int
=	O
parent	pointer
?	O
parent	pointer
->	O
depth	int
+	O
1	int
:	O
0	int
;	O
cl	pointer
->	O
next	int
=	O
hol	struct
->	O
clusters	pointer
;	O
hol	struct
->	O
clusters	pointer
=	O
cl	pointer
;	O
}	O
return	O
cl	pointer
;	O
}	O
static	O
void	O
hol_free	function
(	O
struct	O
hol	struct
*	O
hol	struct
)	O
{	O
struct	O
hol_cluster	struct
*	O
cl	pointer
=	O
hol	struct
->	O
clusters	pointer
;	O
while	O
(	O
cl	pointer
)	O
{	O
struct	O
hol_cluster	struct
*	O
next	int
=	O
cl	pointer
->	O
next	int
;	O
free	function
(	O
cl	pointer
)	O
;	O
cl	pointer
=	O
next	int
;	O
}	O
if	O
(	O
hol	struct
->	O
num_entries	int
>	O
0	int
)	O
{	O
free	function
(	O
hol	struct
->	O
entries	pointer
)	O
;	O
free	function
(	O
hol	struct
->	O
short_options	pointer
)	O
;	O
}	O
free	function
(	O
hol	struct
)	O
;	O
}	O
static	O
int	O
hol_entry_short_iterate	function
(	O
const	O
struct	O
hol_entry	struct
*	O
entry	pointer
,	O
int	O
(	O
*	O
func	pointer
)	O
(	O
const	O
struct	O
argp_option	struct
*	O
opt	pointer
,	O
const	O
struct	O
argp_option	struct
*	O
real	pointer
,	O
const	O
char	O
*	O
domain	pointer
,	O
void	O
*	O
cookie	pointer
)	O
,	O
const	O
char	O
*	O
domain	pointer
,	O
void	O
*	O
cookie	pointer
)	O
{	O
unsigned	O
nopts	int
;	O
int	O
val	int
=	O
0	int
;	O
const	O
struct	O
argp_option	struct
*	O
opt	pointer
,	O
*	O
real	pointer
=	O
entry	pointer
->	O
opt	pointer
;	O
char	O
*	O
so	pointer
=	O
entry	pointer
->	O
short_options	pointer
;	O
for	O
(	O
opt	pointer
=	O
real	pointer
,	O
nopts	int
=	O
entry	pointer
->	O
num	int
;	O
nopts	int
>	O
0	int
&&	O
!	O
val	int
;	O
opt	pointer
++	O
,	O
nopts	int
--	O
)	O
if	O
(	O
oshort	O
(	O
opt	pointer
)	O
&&	O
*	O
so	pointer
==	O
opt	pointer
->	O
key	int
)	O
{	O
if	O
(	O
!	O
oalias	O
(	O
opt	pointer
)	O
)	O
real	pointer
=	O
opt	pointer
;	O
if	O
(	O
ovisible	O
(	O
opt	pointer
)	O
)	O
val	int
=	O
(	O
*	O
func	pointer
)	O
(	O
opt	pointer
,	O
real	pointer
,	O
domain	pointer
,	O
cookie	pointer
)	O
;	O
so	pointer
++	O
;	O
}	O
return	O
val	int
;	O
}	O
static	O
inline	O
int	O
__attribute__	O
(	O
(	O
always_inline	O
)	O
)	O
hol_entry_long_iterate	function
(	O
const	O
struct	O
hol_entry	struct
*	O
entry	pointer
,	O
int	O
(	O
*	O
func	pointer
)	O
(	O
const	O
struct	O
argp_option	struct
*	O
opt	pointer
,	O
const	O
struct	O
argp_option	struct
*	O
real	pointer
,	O
const	O
char	O
*	O
domain	pointer
,	O
void	O
*	O
cookie	pointer
)	O
,	O
const	O
char	O
*	O
domain	pointer
,	O
void	O
*	O
cookie	pointer
)	O
{	O
unsigned	O
nopts	int
;	O
int	O
val	int
=	O
0	int
;	O
const	O
struct	O
argp_option	struct
*	O
opt	pointer
,	O
*	O
real	pointer
=	O
entry	pointer
->	O
opt	pointer
;	O
for	O
(	O
opt	pointer
=	O
real	pointer
,	O
nopts	int
=	O
entry	pointer
->	O
num	int
;	O
nopts	int
>	O
0	int
&&	O
!	O
val	int
;	O
opt	pointer
++	O
,	O
nopts	int
--	O
)	O
if	O
(	O
opt	pointer
->	O
name	pointer
)	O
{	O
if	O
(	O
!	O
oalias	O
(	O
opt	pointer
)	O
)	O
real	pointer
=	O
opt	pointer
;	O
if	O
(	O
ovisible	O
(	O
opt	pointer
)	O
)	O
val	int
=	O
(	O
*	O
func	pointer
)	O
(	O
opt	pointer
,	O
real	pointer
,	O
domain	pointer
,	O
cookie	pointer
)	O
;	O
}	O
return	O
val	int
;	O
}	O
static	O
int	O
until_short	function
(	O
const	O
struct	O
argp_option	struct
*	O
opt	pointer
,	O
const	O
struct	O
argp_option	struct
*	O
real	pointer
,	O
const	O
char	O
*	O
domain	pointer
,	O
void	O
*	O
cookie	pointer
)	O
{	O
return	O
oshort	O
(	O
opt	pointer
)	O
?	O
opt	pointer
->	O
key	int
:	O
0	int
;	O
}	O
static	O
char	O
hol_entry_first_short	function
(	O
const	O
struct	O
hol_entry	struct
*	O
entry	pointer
)	O
{	O
return	O
hol_entry_short_iterate	function
(	O
entry	pointer
,	O
until_short	function
,	O
entry	pointer
->	O
argp	struct
->	O
argp_domain	pointer
,	O
0	int
)	O
;	O
}	O
static	O
const	O
char	O
*	O
hol_entry_first_long	function
(	O
const	O
struct	O
hol_entry	struct
*	O
entry	pointer
)	O
{	O
const	O
struct	O
argp_option	struct
*	O
opt	pointer
;	O
unsigned	O
num	int
;	O
for	O
(	O
opt	pointer
=	O
entry	pointer
->	O
opt	pointer
,	O
num	int
=	O
entry	pointer
->	O
num	int
;	O
num	int
>	O
0	int
;	O
opt	pointer
++	O
,	O
num	int
--	O
)	O
if	O
(	O
opt	pointer
->	O
name	pointer
&&	O
ovisible	O
(	O
opt	pointer
)	O
)	O
return	O
opt	pointer
->	O
name	pointer
;	O
return	O
0	int
;	O
}	O
static	O
struct	O
hol_entry	struct
*	O
hol_find_entry	function
(	O
struct	O
hol	struct
*	O
hol	struct
,	O
const	O
char	O
*	O
name	pointer
)	O
{	O
struct	O
hol_entry	struct
*	O
entry	pointer
=	O
hol	struct
->	O
entries	pointer
;	O
unsigned	O
num_entries	int
=	O
hol	struct
->	O
num_entries	int
;	O
while	O
(	O
num_entries	int
--	O
>	O
0	int
)	O
{	O
const	O
struct	O
argp_option	struct
*	O
opt	pointer
=	O
entry	pointer
->	O
opt	pointer
;	O
unsigned	O
num_opts	int
=	O
entry	pointer
->	O
num	int
;	O
while	O
(	O
num_opts	int
--	O
>	O
0	int
)	O
if	O
(	O
opt	pointer
->	O
name	pointer
&&	O
ovisible	O
(	O
opt	pointer
)	O
&&	O
strcmp	function
(	O
opt	pointer
->	O
name	pointer
,	O
name	pointer
)	O
==	O
0	int
)	O
return	O
entry	pointer
;	O
else	O
opt	pointer
++	O
;	O
entry	pointer
++	O
;	O
}	O
return	O
0	int
;	O
}	O
static	O
void	O
hol_set_group	function
(	O
struct	O
hol	struct
*	O
hol	struct
,	O
const	O
char	O
*	O
name	pointer
,	O
int	O
group	int
)	O
{	O
struct	O
hol_entry	struct
*	O
entry	pointer
=	O
hol_find_entry	function
(	O
hol	struct
,	O
name	pointer
)	O
;	O
if	O
(	O
entry	pointer
)	O
entry	pointer
->	O
group	int
=	O
group	int
;	O
}	O
static	O
int	O
group_cmp	function
(	O
int	O
group1	int
,	O
int	O
group2	int
,	O
int	O
eq	int
)	O
{	O
if	O
(	O
group1	int
==	O
group2	int
)	O
return	O
eq	int
;	O
else	O
if	O
(	O
(	O
group1	int
<	O
0	int
&&	O
group2	int
<	O
0	int
)	O
||	O
(	O
group1	int
>=	O
0	int
&&	O
group2	int
>=	O
0	int
)	O
)	O
return	O
group1	int
-	O
group2	int
;	O
else	O
return	O
group2	int
-	O
group1	int
;	O
}	O
static	O
int	O
hol_cluster_cmp	function
(	O
const	O
struct	O
hol_cluster	struct
*	O
cl1	pointer
,	O
const	O
struct	O
hol_cluster	struct
*	O
cl2	pointer
)	O
{	O
while	O
(	O
cl1	pointer
->	O
depth	int
>	O
cl2	pointer
->	O
depth	int
)	O
cl1	pointer
=	O
cl1	pointer
->	O
parent	pointer
;	O
while	O
(	O
cl2	pointer
->	O
depth	int
>	O
cl1	pointer
->	O
depth	int
)	O
cl2	pointer
=	O
cl2	pointer
->	O
parent	pointer
;	O
while	O
(	O
cl1	pointer
->	O
parent	pointer
!=	O
cl2	pointer
->	O
parent	pointer
)	O
cl1	pointer
=	O
cl1	pointer
->	O
parent	pointer
,	O
cl2	pointer
=	O
cl2	pointer
->	O
parent	pointer
;	O
return	O
group_cmp	function
(	O
cl1	pointer
->	O
group	int
,	O
cl2	pointer
->	O
group	int
,	O
cl2	pointer
->	O
index	function
-	O
cl1	pointer
->	O
index	function
)	O
;	O
}	O
static	O
struct	O
hol_cluster	struct
*	O
hol_cluster_base	function
(	O
struct	O
hol_cluster	struct
*	O
cl	pointer
)	O
{	O
while	O
(	O
cl	pointer
->	O
parent	pointer
)	O
cl	pointer
=	O
cl	pointer
->	O
parent	pointer
;	O
return	O
cl	pointer
;	O
}	O
static	O
int	O
hol_cluster_is_child	function
(	O
const	O
struct	O
hol_cluster	struct
*	O
cl1	pointer
,	O
const	O
struct	O
hol_cluster	struct
*	O
cl2	pointer
)	O
{	O
while	O
(	O
cl1	pointer
&&	O
cl1	pointer
!=	O
cl2	pointer
)	O
cl1	pointer
=	O
cl1	pointer
->	O
parent	pointer
;	O
return	O
cl1	pointer
==	O
cl2	pointer
;	O
}	O
static	O
int	O
canon_doc_option	function
(	O
const	O
char	O
*	O
*	O
name	pointer
)	O
{	O
int	O
non_opt	int
;	O
while	O
(	O
isspace	function
(	O
*	O
*	O
name	pointer
)	O
)	O
(	O
*	O
name	pointer
)	O
++	O
;	O
non_opt	int
=	O
(	O
*	O
*	O
name	pointer
!=	O
'-'	O
)	O
;	O
while	O
(	O
*	O
*	O
name	pointer
&&	O
!	O
isalnum	function
(	O
*	O
*	O
name	pointer
)	O
)	O
(	O
*	O
name	pointer
)	O
++	O
;	O
return	O
non_opt	int
;	O
}	O
static	O
int	O
hol_entry_cmp	function
(	O
const	O
struct	O
hol_entry	struct
*	O
entry1	pointer
,	O
const	O
struct	O
hol_entry	struct
*	O
entry2	pointer
)	O
{	O
int	O
group1	int
=	O
entry1	pointer
->	O
group	int
,	O
group2	int
=	O
entry2	pointer
->	O
group	int
;	O
if	O
(	O
entry1	pointer
->	O
cluster	pointer
!=	O
entry2	pointer
->	O
cluster	pointer
)	O
{	O
if	O
(	O
!	O
entry1	pointer
->	O
cluster	pointer
)	O
return	O
group_cmp	function
(	O
group1	int
,	O
hol_cluster_base	function
(	O
entry2	pointer
->	O
cluster	pointer
)	O
->	O
group	int
,	O
-	O
1	int
)	O
;	O
else	O
if	O
(	O
!	O
entry2	pointer
->	O
cluster	pointer
)	O
return	O
group_cmp	function
(	O
hol_cluster_base	function
(	O
entry1	pointer
->	O
cluster	pointer
)	O
->	O
group	int
,	O
group2	int
,	O
1	int
)	O
;	O
else	O
return	O
hol_cluster_cmp	function
(	O
entry1	pointer
->	O
cluster	pointer
,	O
entry2	pointer
->	O
cluster	pointer
)	O
;	O
}	O
else	O
if	O
(	O
group1	int
==	O
group2	int
)	O
{	O
int	O
short1	int
=	O
hol_entry_first_short	function
(	O
entry1	pointer
)	O
;	O
int	O
short2	int
=	O
hol_entry_first_short	function
(	O
entry2	pointer
)	O
;	O
int	O
doc1	int
=	O
odoc	O
(	O
entry1	pointer
->	O
opt	pointer
)	O
;	O
int	O
doc2	int
=	O
odoc	O
(	O
entry2	pointer
->	O
opt	pointer
)	O
;	O
const	O
char	O
*	O
long1	pointer
=	O
hol_entry_first_long	function
(	O
entry1	pointer
)	O
;	O
const	O
char	O
*	O
long2	pointer
=	O
hol_entry_first_long	function
(	O
entry2	pointer
)	O
;	O
if	O
(	O
doc1	int
)	O
doc1	int
=	O
long1	pointer
!=	O
NULL	O
&&	O
canon_doc_option	function
(	O
&	O
long1	pointer
)	O
;	O
if	O
(	O
doc2	int
)	O
doc2	int
=	O
long2	pointer
!=	O
NULL	O
&&	O
canon_doc_option	function
(	O
&	O
long2	pointer
)	O
;	O
if	O
(	O
doc1	int
!=	O
doc2	int
)	O
return	O
doc1	int
-	O
doc2	int
;	O
else	O
if	O
(	O
!	O
short1	int
&&	O
!	O
short2	int
&&	O
long1	pointer
&&	O
long2	pointer
)	O
return	O
__strcasecmp	O
(	O
long1	pointer
,	O
long2	pointer
)	O
;	O
else	O
{	O
char	O
first1	char
=	O
short1	int
?	O
short1	int
:	O
long1	pointer
?	O
*	O
long1	pointer
:	O
0	int
;	O
char	O
first2	char
=	O
short2	int
?	O
short2	int
:	O
long2	pointer
?	O
*	O
long2	pointer
:	O
0	int
;	O
int	O
lower_cmp	int
=	O
_tolower	function
(	O
first1	char
)	O
-	O
_tolower	function
(	O
first2	char
)	O
;	O
return	O
lower_cmp	int
?	O
lower_cmp	int
:	O
first2	char
-	O
first1	char
;	O
}	O
}	O
else	O
return	O
group_cmp	function
(	O
group1	int
,	O
group2	int
,	O
0	int
)	O
;	O
}	O
static	O
int	O
hol_entry_qcmp	function
(	O
const	O
void	O
*	O
entry1_v	pointer
,	O
const	O
void	O
*	O
entry2_v	pointer
)	O
{	O
return	O
hol_entry_cmp	function
(	O
entry1_v	pointer
,	O
entry2_v	pointer
)	O
;	O
}	O
static	O
void	O
hol_sort	function
(	O
struct	O
hol	struct
*	O
hol	struct
)	O
{	O
if	O
(	O
hol	struct
->	O
num_entries	int
>	O
0	int
)	O
{	O
unsigned	O
i	int
;	O
struct	O
hol_entry	struct
*	O
e	pointer
;	O
for	O
(	O
i	int
=	O
0	int
,	O
e	pointer
=	O
hol	struct
->	O
entries	pointer
;	O
i	int
<	O
hol	struct
->	O
num_entries	int
;	O
i	int
++	O
,	O
e	pointer
++	O
)	O
e	pointer
->	O
ord	int
=	O
i	int
;	O
qsort	function
(	O
hol	struct
->	O
entries	pointer
,	O
hol	struct
->	O
num_entries	int
,	O
sizeof	O
(	O
struct	O
hol_entry	struct
)	O
,	O
hol_entry_qcmp	function
)	O
;	O
}	O
}	O
static	O
void	O
hol_append	function
(	O
struct	O
hol	struct
*	O
hol	struct
,	O
struct	O
hol	struct
*	O
more	pointer
)	O
{	O
struct	O
hol_cluster	struct
*	O
*	O
cl_end	pointer
=	O
&	O
hol	struct
->	O
clusters	pointer
;	O
while	O
(	O
*	O
cl_end	pointer
)	O
cl_end	pointer
=	O
&	O
(	O
*	O
cl_end	pointer
)	O
->	O
next	int
;	O
*	O
cl_end	pointer
=	O
more	pointer
->	O
clusters	pointer
;	O
more	pointer
->	O
clusters	pointer
=	O
0	int
;	O
if	O
(	O
more	pointer
->	O
num_entries	int
>	O
0	int
)	O
{	O
if	O
(	O
hol	struct
->	O
num_entries	int
==	O
0	int
)	O
{	O
hol	struct
->	O
num_entries	int
=	O
more	pointer
->	O
num_entries	int
;	O
hol	struct
->	O
entries	pointer
=	O
more	pointer
->	O
entries	pointer
;	O
hol	struct
->	O
short_options	pointer
=	O
more	pointer
->	O
short_options	pointer
;	O
more	pointer
->	O
num_entries	int
=	O
0	int
;	O
}	O
else	O
{	O
unsigned	O
left	int
;	O
char	O
*	O
so	pointer
,	O
*	O
more_so	pointer
;	O
struct	O
hol_entry	struct
*	O
e	pointer
;	O
unsigned	O
num_entries	int
=	O
hol	struct
->	O
num_entries	int
+	O
more	pointer
->	O
num_entries	int
;	O
struct	O
hol_entry	struct
*	O
entries	pointer
=	O
malloc	function
(	O
num_entries	int
*	O
sizeof	O
(	O
struct	O
hol_entry	struct
)	O
)	O
;	O
unsigned	O
hol_so_len	int
=	O
strlen	function
(	O
hol	struct
->	O
short_options	pointer
)	O
;	O
char	O
*	O
short_options	pointer
=	O
malloc	function
(	O
hol_so_len	int
+	O
strlen	function
(	O
more	pointer
->	O
short_options	pointer
)	O
+	O
1	int
)	O
;	O
assert	O
(	O
entries	pointer
&&	O
short_options	pointer
)	O
;	O
if	O
(	O
SIZE_MAX	O
<=	O
UINT_MAX	O
)	O
assert	O
(	O
num_entries	int
<=	O
SIZE_MAX	O
/	O
sizeof	O
(	O
struct	O
hol_entry	struct
)	O
)	O
;	O
__mempcpy	function
(	O
__mempcpy	function
(	O
entries	pointer
,	O
hol	struct
->	O
entries	pointer
,	O
hol	struct
->	O
num_entries	int
*	O
sizeof	O
(	O
struct	O
hol_entry	struct
)	O
)	O
,	O
more	pointer
->	O
entries	pointer
,	O
more	pointer
->	O
num_entries	int
*	O
sizeof	O
(	O
struct	O
hol_entry	struct
)	O
)	O
;	O
__mempcpy	function
(	O
short_options	pointer
,	O
hol	struct
->	O
short_options	pointer
,	O
hol_so_len	int
)	O
;	O
for	O
(	O
e	pointer
=	O
entries	pointer
,	O
left	int
=	O
hol	struct
->	O
num_entries	int
;	O
left	int
>	O
0	int
;	O
e	pointer
++	O
,	O
left	int
--	O
)	O
e	pointer
->	O
short_options	pointer
+=	O
(	O
short_options	pointer
-	O
hol	struct
->	O
short_options	pointer
)	O
;	O
so	pointer
=	O
short_options	pointer
+	O
hol_so_len	int
;	O
more_so	pointer
=	O
more	pointer
->	O
short_options	pointer
;	O
for	O
(	O
left	int
=	O
more	pointer
->	O
num_entries	int
;	O
left	int
>	O
0	int
;	O
e	pointer
++	O
,	O
left	int
--	O
)	O
{	O
int	O
opts_left	int
;	O
const	O
struct	O
argp_option	struct
*	O
opt	pointer
;	O
e	pointer
->	O
short_options	pointer
=	O
so	pointer
;	O
for	O
(	O
opts_left	int
=	O
e	pointer
->	O
num	int
,	O
opt	pointer
=	O
e	pointer
->	O
opt	pointer
;	O
opts_left	int
;	O
opt	pointer
++	O
,	O
opts_left	int
--	O
)	O
{	O
int	O
ch	char
=	O
*	O
more_so	pointer
;	O
if	O
(	O
oshort	O
(	O
opt	pointer
)	O
&&	O
ch	char
==	O
opt	pointer
->	O
key	int
)	O
{	O
if	O
(	O
!	O
find_char	function
(	O
ch	char
,	O
short_options	pointer
,	O
short_options	pointer
+	O
hol_so_len	int
)	O
)	O
*	O
so	pointer
++	O
=	O
ch	char
;	O
more_so	pointer
++	O
;	O
}	O
}	O
}	O
*	O
so	pointer
=	O
'\0'	O
;	O
free	function
(	O
hol	struct
->	O
entries	pointer
)	O
;	O
free	function
(	O
hol	struct
->	O
short_options	pointer
)	O
;	O
hol	struct
->	O
entries	pointer
=	O
entries	pointer
;	O
hol	struct
->	O
num_entries	int
=	O
num_entries	int
;	O
hol	struct
->	O
short_options	pointer
=	O
short_options	pointer
;	O
}	O
}	O
hol_free	function
(	O
more	pointer
)	O
;	O
}	O
static	O
void	O
indent_to	function
(	O
argp_fmtstream_t	pointer
stream	pointer
,	O
unsigned	O
col	int
)	O
{	O
int	O
needed	int
=	O
col	int
-	O
__argp_fmtstream_point	O
(	O
stream	pointer
)	O
;	O
while	O
(	O
needed	int
--	O
>	O
0	int
)	O
__argp_fmtstream_putc	O
(	O
stream	pointer
,	O
' '	O
)	O
;	O
}	O
static	O
void	O
space	function
(	O
argp_fmtstream_t	pointer
stream	pointer
,	O
size_t	long
ensure	long
)	O
{	O
if	O
(	O
__argp_fmtstream_point	O
(	O
stream	pointer
)	O
+	O
ensure	long
>=	O
__argp_fmtstream_rmargin	O
(	O
stream	pointer
)	O
)	O
__argp_fmtstream_putc	O
(	O
stream	pointer
,	O
'\n'	O
)	O
;	O
else	O
__argp_fmtstream_putc	O
(	O
stream	pointer
,	O
' '	O
)	O
;	O
}	O
static	O
void	O
arg	pointer
(	O
const	O
struct	O
argp_option	struct
*	O
real	pointer
,	O
const	O
char	O
*	O
req_fmt	pointer
,	O
const	O
char	O
*	O
opt_fmt	pointer
,	O
const	O
char	O
*	O
domain	pointer
,	O
argp_fmtstream_t	pointer
stream	pointer
)	O
{	O
if	O
(	O
real	pointer
->	O
arg	pointer
)	O
{	O
if	O
(	O
real	pointer
->	O
flags	int
&	O
OPTION_ARG_OPTIONAL	int
)	O
__argp_fmtstream_printf	function
(	O
stream	pointer
,	O
opt_fmt	pointer
,	O
dgettext	function
(	O
domain	pointer
,	O
real	pointer
->	O
arg	pointer
)	O
)	O
;	O
else	O
__argp_fmtstream_printf	function
(	O
stream	pointer
,	O
req_fmt	pointer
,	O
dgettext	function
(	O
domain	pointer
,	O
real	pointer
->	O
arg	pointer
)	O
)	O
;	O
}	O
}	O
struct	O
hol_help_state	struct
{	O
struct	O
hol_entry	struct
*	O
prev_entry	pointer
;	O
int	O
sep_groups	int
;	O
int	O
suppressed_dup_arg	int
;	O
}	O
;	O
struct	O
pentry_state	struct
{	O
const	O
struct	O
hol_entry	struct
*	O
entry	pointer
;	O
argp_fmtstream_t	pointer
stream	pointer
;	O
struct	O
hol_help_state	struct
*	O
hhstate	pointer
;	O
int	O
first	int
;	O
const	O
struct	O
argp_state	struct
*	O
state	pointer
;	O
}	O
;	O
static	O
const	O
char	O
*	O
filter_doc	function
(	O
const	O
char	O
*	O
doc	pointer
,	O
int	O
key	int
,	O
const	O
struct	O
argp	struct
*	O
argp	struct
,	O
const	O
struct	O
argp_state	struct
*	O
state	pointer
)	O
{	O
if	O
(	O
argp	struct
&&	O
argp	struct
->	O
help_filter	pointer
)	O
{	O
void	O
*	O
input	pointer
=	O
__argp_input	function
(	O
argp	struct
,	O
state	pointer
)	O
;	O
return	O
(	O
*	O
argp	struct
->	O
help_filter	pointer
)	O
(	O
key	int
,	O
doc	pointer
,	O
input	pointer
)	O
;	O
}	O
else	O
return	O
doc	pointer
;	O
}	O
static	O
void	O
print_header	function
(	O
const	O
char	O
*	O
str	pointer
,	O
const	O
struct	O
argp	struct
*	O
argp	struct
,	O
struct	O
pentry_state	struct
*	O
pest	pointer
)	O
{	O
const	O
char	O
*	O
tstr	pointer
=	O
dgettext	function
(	O
argp	struct
->	O
argp_domain	pointer
,	O
str	pointer
)	O
;	O
const	O
char	O
*	O
fstr	pointer
=	O
filter_doc	function
(	O
tstr	pointer
,	O
ARGP_KEY_HELP_HEADER	int
,	O
argp	struct
,	O
pest	pointer
->	O
state	pointer
)	O
;	O
if	O
(	O
fstr	pointer
)	O
{	O
if	O
(	O
*	O
fstr	pointer
)	O
{	O
if	O
(	O
pest	pointer
->	O
hhstate	pointer
->	O
prev_entry	pointer
)	O
__argp_fmtstream_putc	O
(	O
pest	pointer
->	O
stream	pointer
,	O
'\n'	O
)	O
;	O
indent_to	function
(	O
pest	pointer
->	O
stream	pointer
,	O
uparams	struct
.	O
header_col	int
)	O
;	O
__argp_fmtstream_set_lmargin	O
(	O
pest	pointer
->	O
stream	pointer
,	O
uparams	struct
.	O
header_col	int
)	O
;	O
__argp_fmtstream_set_wmargin	O
(	O
pest	pointer
->	O
stream	pointer
,	O
uparams	struct
.	O
header_col	int
)	O
;	O
__argp_fmtstream_puts	O
(	O
pest	pointer
->	O
stream	pointer
,	O
fstr	pointer
)	O
;	O
__argp_fmtstream_set_lmargin	O
(	O
pest	pointer
->	O
stream	pointer
,	O
0	int
)	O
;	O
__argp_fmtstream_putc	O
(	O
pest	pointer
->	O
stream	pointer
,	O
'\n'	O
)	O
;	O
}	O
pest	pointer
->	O
hhstate	pointer
->	O
sep_groups	int
=	O
1	int
;	O
}	O
if	O
(	O
fstr	pointer
!=	O
tstr	pointer
)	O
free	function
(	O
(	O
char	O
*	O
)	O
fstr	pointer
)	O
;	O
}	O
static	O
void	O
comma	function
(	O
unsigned	O
col	int
,	O
struct	O
pentry_state	struct
*	O
pest	pointer
)	O
{	O
if	O
(	O
pest	pointer
->	O
first	int
)	O
{	O
const	O
struct	O
hol_entry	struct
*	O
pe	pointer
=	O
pest	pointer
->	O
hhstate	pointer
->	O
prev_entry	pointer
;	O
const	O
struct	O
hol_cluster	struct
*	O
cl	pointer
=	O
pest	pointer
->	O
entry	pointer
->	O
cluster	pointer
;	O
if	O
(	O
pest	pointer
->	O
hhstate	pointer
->	O
sep_groups	int
&&	O
pe	pointer
&&	O
pest	pointer
->	O
entry	pointer
->	O
group	int
!=	O
pe	pointer
->	O
group	int
)	O
__argp_fmtstream_putc	O
(	O
pest	pointer
->	O
stream	pointer
,	O
'\n'	O
)	O
;	O
if	O
(	O
cl	pointer
&&	O
cl	pointer
->	O
header	pointer
&&	O
*	O
cl	pointer
->	O
header	pointer
&&	O
(	O
!	O
pe	pointer
||	O
(	O
pe	pointer
->	O
cluster	pointer
!=	O
cl	pointer
&&	O
!	O
hol_cluster_is_child	function
(	O
pe	pointer
->	O
cluster	pointer
,	O
cl	pointer
)	O
)	O
)	O
)	O
{	O
int	O
old_wm	int
=	O
__argp_fmtstream_wmargin	O
(	O
pest	pointer
->	O
stream	pointer
)	O
;	O
print_header	function
(	O
cl	pointer
->	O
header	pointer
,	O
cl	pointer
->	O
argp	struct
,	O
pest	pointer
)	O
;	O
__argp_fmtstream_set_wmargin	O
(	O
pest	pointer
->	O
stream	pointer
,	O
old_wm	int
)	O
;	O
}	O
pest	pointer
->	O
first	int
=	O
0	int
;	O
}	O
else	O
__argp_fmtstream_puts	O
(	O
pest	pointer
->	O
stream	pointer
,	O
", "	pointer
)	O
;	O
indent_to	function
(	O
pest	pointer
->	O
stream	pointer
,	O
col	int
)	O
;	O
}	O
static	O
void	O
hol_entry_help	function
(	O
struct	O
hol_entry	struct
*	O
entry	pointer
,	O
const	O
struct	O
argp_state	struct
*	O
state	pointer
,	O
argp_fmtstream_t	pointer
stream	pointer
,	O
struct	O
hol_help_state	struct
*	O
hhstate	pointer
)	O
{	O
unsigned	O
num	int
;	O
const	O
struct	O
argp_option	struct
*	O
real	pointer
=	O
entry	pointer
->	O
opt	pointer
,	O
*	O
opt	pointer
;	O
char	O
*	O
so	pointer
=	O
entry	pointer
->	O
short_options	pointer
;	O
int	O
have_long_opt	int
=	O
0	int
;	O
int	O
old_lm	int
=	O
__argp_fmtstream_set_lmargin	O
(	O
stream	pointer
,	O
0	int
)	O
;	O
int	O
old_wm	int
=	O
__argp_fmtstream_wmargin	O
(	O
stream	pointer
)	O
;	O
struct	O
pentry_state	struct
pest	pointer
=	O
{	O
entry	pointer
,	O
stream	pointer
,	O
hhstate	pointer
,	O
1	int
,	O
state	pointer
}	O
;	O
if	O
(	O
!	O
odoc	O
(	O
real	pointer
)	O
)	O
for	O
(	O
opt	pointer
=	O
real	pointer
,	O
num	int
=	O
entry	pointer
->	O
num	int
;	O
num	int
>	O
0	int
;	O
opt	pointer
++	O
,	O
num	int
--	O
)	O
if	O
(	O
opt	pointer
->	O
name	pointer
&&	O
ovisible	O
(	O
opt	pointer
)	O
)	O
{	O
have_long_opt	int
=	O
1	int
;	O
break	O
;	O
}	O
__argp_fmtstream_set_wmargin	O
(	O
stream	pointer
,	O
uparams	struct
.	O
short_opt_col	int
)	O
;	O
for	O
(	O
opt	pointer
=	O
real	pointer
,	O
num	int
=	O
entry	pointer
->	O
num	int
;	O
num	int
>	O
0	int
;	O
opt	pointer
++	O
,	O
num	int
--	O
)	O
if	O
(	O
oshort	O
(	O
opt	pointer
)	O
&&	O
opt	pointer
->	O
key	int
==	O
*	O
so	pointer
)	O
{	O
if	O
(	O
ovisible	O
(	O
opt	pointer
)	O
)	O
{	O
comma	function
(	O
uparams	struct
.	O
short_opt_col	int
,	O
&	O
pest	pointer
)	O
;	O
__argp_fmtstream_putc	O
(	O
stream	pointer
,	O
'-'	O
)	O
;	O
__argp_fmtstream_putc	O
(	O
stream	pointer
,	O
*	O
so	pointer
)	O
;	O
if	O
(	O
!	O
have_long_opt	int
||	O
uparams	struct
.	O
dup_args	int
)	O
arg	pointer
(	O
real	pointer
,	O
" %s"	pointer
,	O
"[%s]"	pointer
,	O
state	pointer
==	O
NULL	O
?	O
NULL	O
:	O
state	pointer
->	O
root_argp	pointer
->	O
argp_domain	pointer
,	O
stream	pointer
)	O
;	O
else	O
if	O
(	O
real	pointer
->	O
arg	pointer
)	O
hhstate	pointer
->	O
suppressed_dup_arg	int
=	O
1	int
;	O
}	O
so	pointer
++	O
;	O
}	O
if	O
(	O
odoc	O
(	O
real	pointer
)	O
)	O
{	O
__argp_fmtstream_set_wmargin	O
(	O
stream	pointer
,	O
uparams	struct
.	O
doc_opt_col	int
)	O
;	O
for	O
(	O
opt	pointer
=	O
real	pointer
,	O
num	int
=	O
entry	pointer
->	O
num	int
;	O
num	int
>	O
0	int
;	O
opt	pointer
++	O
,	O
num	int
--	O
)	O
if	O
(	O
opt	pointer
->	O
name	pointer
&&	O
ovisible	O
(	O
opt	pointer
)	O
)	O
{	O
comma	function
(	O
uparams	struct
.	O
doc_opt_col	int
,	O
&	O
pest	pointer
)	O
;	O
__argp_fmtstream_puts	O
(	O
stream	pointer
,	O
dgettext	function
(	O
state	pointer
==	O
NULL	O
?	O
NULL	O
:	O
state	pointer
->	O
root_argp	pointer
->	O
argp_domain	pointer
,	O
opt	pointer
->	O
name	pointer
)	O
)	O
;	O
}	O
}	O
else	O
{	O
__argp_fmtstream_set_wmargin	O
(	O
stream	pointer
,	O
uparams	struct
.	O
long_opt_col	int
)	O
;	O
for	O
(	O
opt	pointer
=	O
real	pointer
,	O
num	int
=	O
entry	pointer
->	O
num	int
;	O
num	int
>	O
0	int
;	O
opt	pointer
++	O
,	O
num	int
--	O
)	O
if	O
(	O
opt	pointer
->	O
name	pointer
&&	O
ovisible	O
(	O
opt	pointer
)	O
)	O
{	O
comma	function
(	O
uparams	struct
.	O
long_opt_col	int
,	O
&	O
pest	pointer
)	O
;	O
__argp_fmtstream_printf	function
(	O
stream	pointer
,	O
"--%s"	pointer
,	O
opt	pointer
->	O
name	pointer
)	O
;	O
arg	pointer
(	O
real	pointer
,	O
"=%s"	pointer
,	O
"[=%s]"	pointer
,	O
state	pointer
==	O
NULL	O
?	O
NULL	O
:	O
state	pointer
->	O
root_argp	pointer
->	O
argp_domain	pointer
,	O
stream	pointer
)	O
;	O
}	O
}	O
__argp_fmtstream_set_lmargin	O
(	O
stream	pointer
,	O
0	int
)	O
;	O
if	O
(	O
pest	pointer
.	O
first	int
)	O
{	O
if	O
(	O
!	O
oshort	O
(	O
real	pointer
)	O
&&	O
!	O
real	pointer
->	O
name	pointer
)	O
print_header	function
(	O
real	pointer
->	O
doc	pointer
,	O
entry	pointer
->	O
argp	struct
,	O
&	O
pest	pointer
)	O
;	O
else	O
goto	O
cleanup	O
;	O
}	O
else	O
{	O
const	O
char	O
*	O
tstr	pointer
=	O
real	pointer
->	O
doc	pointer
?	O
dgettext	function
(	O
state	pointer
==	O
NULL	O
?	O
NULL	O
:	O
state	pointer
->	O
root_argp	pointer
->	O
argp_domain	pointer
,	O
real	pointer
->	O
doc	pointer
)	O
:	O
0	int
;	O
const	O
char	O
*	O
fstr	pointer
=	O
filter_doc	function
(	O
tstr	pointer
,	O
real	pointer
->	O
key	int
,	O
entry	pointer
->	O
argp	struct
,	O
state	pointer
)	O
;	O
if	O
(	O
fstr	pointer
&&	O
*	O
fstr	pointer
)	O
{	O
unsigned	O
int	O
col	int
=	O
__argp_fmtstream_point	O
(	O
stream	pointer
)	O
;	O
__argp_fmtstream_set_lmargin	O
(	O
stream	pointer
,	O
uparams	struct
.	O
opt_doc_col	int
)	O
;	O
__argp_fmtstream_set_wmargin	O
(	O
stream	pointer
,	O
uparams	struct
.	O
opt_doc_col	int
)	O
;	O
if	O
(	O
col	int
>	O
(	O
unsigned	O
int	O
)	O
(	O
uparams	struct
.	O
opt_doc_col	int
+	O
3	int
)	O
)	O
__argp_fmtstream_putc	O
(	O
stream	pointer
,	O
'\n'	O
)	O
;	O
else	O
if	O
(	O
col	int
>=	O
(	O
unsigned	O
int	O
)	O
uparams	struct
.	O
opt_doc_col	int
)	O
__argp_fmtstream_puts	O
(	O
stream	pointer
,	O
"   "	pointer
)	O
;	O
else	O
indent_to	function
(	O
stream	pointer
,	O
uparams	struct
.	O
opt_doc_col	int
)	O
;	O
__argp_fmtstream_puts	O
(	O
stream	pointer
,	O
fstr	pointer
)	O
;	O
}	O
if	O
(	O
fstr	pointer
&&	O
fstr	pointer
!=	O
tstr	pointer
)	O
free	function
(	O
(	O
char	O
*	O
)	O
fstr	pointer
)	O
;	O
__argp_fmtstream_set_lmargin	O
(	O
stream	pointer
,	O
0	int
)	O
;	O
__argp_fmtstream_putc	O
(	O
stream	pointer
,	O
'\n'	O
)	O
;	O
}	O
hhstate	pointer
->	O
prev_entry	pointer
=	O
entry	pointer
;	O
cleanup	O
:	O
__argp_fmtstream_set_lmargin	O
(	O
stream	pointer
,	O
old_lm	int
)	O
;	O
__argp_fmtstream_set_wmargin	O
(	O
stream	pointer
,	O
old_wm	int
)	O
;	O
}	O
static	O
void	O
hol_help	function
(	O
struct	O
hol	struct
*	O
hol	struct
,	O
const	O
struct	O
argp_state	struct
*	O
state	pointer
,	O
argp_fmtstream_t	pointer
stream	pointer
)	O
{	O
unsigned	O
num	int
;	O
struct	O
hol_entry	struct
*	O
entry	pointer
;	O
struct	O
hol_help_state	struct
hhstate	pointer
=	O
{	O
0	int
,	O
0	int
,	O
0	int
}	O
;	O
for	O
(	O
entry	pointer
=	O
hol	struct
->	O
entries	pointer
,	O
num	int
=	O
hol	struct
->	O
num_entries	int
;	O
num	int
>	O
0	int
;	O
entry	pointer
++	O
,	O
num	int
--	O
)	O
hol_entry_help	function
(	O
entry	pointer
,	O
state	pointer
,	O
stream	pointer
,	O
&	O
hhstate	pointer
)	O
;	O
if	O
(	O
hhstate	pointer
.	O
suppressed_dup_arg	int
&&	O
uparams	struct
.	O
dup_args_note	int
)	O
{	O
const	O
char	O
*	O
tstr	pointer
=	O
dgettext	function
(	O
state	pointer
==	O
NULL	O
?	O
NULL	O
:	O
state	pointer
->	O
root_argp	pointer
->	O
argp_domain	pointer
,	O
"Mandatory or optional arguments to long options are also mandatory or optional for any corresponding short options."	pointer
)	O
;	O
const	O
char	O
*	O
fstr	pointer
=	O
filter_doc	function
(	O
tstr	pointer
,	O
ARGP_KEY_HELP_DUP_ARGS_NOTE	int
,	O
state	pointer
?	O
state	pointer
->	O
root_argp	pointer
:	O
0	int
,	O
state	pointer
)	O
;	O
if	O
(	O
fstr	pointer
&&	O
*	O
fstr	pointer
)	O
{	O
__argp_fmtstream_putc	O
(	O
stream	pointer
,	O
'\n'	O
)	O
;	O
__argp_fmtstream_puts	O
(	O
stream	pointer
,	O
fstr	pointer
)	O
;	O
__argp_fmtstream_putc	O
(	O
stream	pointer
,	O
'\n'	O
)	O
;	O
}	O
if	O
(	O
fstr	pointer
&&	O
fstr	pointer
!=	O
tstr	pointer
)	O
free	function
(	O
(	O
char	O
*	O
)	O
fstr	pointer
)	O
;	O
}	O
}	O
static	O
int	O
add_argless_short_opt	function
(	O
const	O
struct	O
argp_option	struct
*	O
opt	pointer
,	O
const	O
struct	O
argp_option	struct
*	O
real	pointer
,	O
const	O
char	O
*	O
domain	pointer
,	O
void	O
*	O
cookie	pointer
)	O
{	O
char	O
*	O
*	O
snao_end	pointer
=	O
cookie	pointer
;	O
if	O
(	O
!	O
(	O
opt	pointer
->	O
arg	pointer
||	O
real	pointer
->	O
arg	pointer
)	O
&&	O
!	O
(	O
(	O
opt	pointer
->	O
flags	int
|	O
real	pointer
->	O
flags	int
)	O
&	O
OPTION_NO_USAGE	int
)	O
)	O
*	O
(	O
*	O
snao_end	pointer
)	O
++	O
=	O
opt	pointer
->	O
key	int
;	O
return	O
0	int
;	O
}	O
static	O
int	O
usage_argful_short_opt	function
(	O
const	O
struct	O
argp_option	struct
*	O
opt	pointer
,	O
const	O
struct	O
argp_option	struct
*	O
real	pointer
,	O
const	O
char	O
*	O
domain	pointer
,	O
void	O
*	O
cookie	pointer
)	O
{	O
argp_fmtstream_t	pointer
stream	pointer
=	O
cookie	pointer
;	O
const	O
char	O
*	O
arg	pointer
=	O
opt	pointer
->	O
arg	pointer
;	O
int	O
flags	int
=	O
opt	pointer
->	O
flags	int
|	O
real	pointer
->	O
flags	int
;	O
if	O
(	O
!	O
arg	pointer
)	O
arg	pointer
=	O
real	pointer
->	O
arg	pointer
;	O
if	O
(	O
arg	pointer
&&	O
!	O
(	O
flags	int
&	O
OPTION_NO_USAGE	int
)	O
)	O
{	O
arg	pointer
=	O
dgettext	function
(	O
domain	pointer
,	O
arg	pointer
)	O
;	O
if	O
(	O
flags	int
&	O
OPTION_ARG_OPTIONAL	int
)	O
__argp_fmtstream_printf	function
(	O
stream	pointer
,	O
" [-%c[%s]]"	pointer
,	O
opt	pointer
->	O
key	int
,	O
arg	pointer
)	O
;	O
else	O
{	O
space	function
(	O
stream	pointer
,	O
6	int
+	O
strlen	function
(	O
arg	pointer
)	O
)	O
;	O
__argp_fmtstream_printf	function
(	O
stream	pointer
,	O
"[-%c %s]"	pointer
,	O
opt	pointer
->	O
key	int
,	O
arg	pointer
)	O
;	O
}	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
usage_long_opt	function
(	O
const	O
struct	O
argp_option	struct
*	O
opt	pointer
,	O
const	O
struct	O
argp_option	struct
*	O
real	pointer
,	O
const	O
char	O
*	O
domain	pointer
,	O
void	O
*	O
cookie	pointer
)	O
{	O
argp_fmtstream_t	pointer
stream	pointer
=	O
cookie	pointer
;	O
const	O
char	O
*	O
arg	pointer
=	O
opt	pointer
->	O
arg	pointer
;	O
int	O
flags	int
=	O
opt	pointer
->	O
flags	int
|	O
real	pointer
->	O
flags	int
;	O
if	O
(	O
!	O
arg	pointer
)	O
arg	pointer
=	O
real	pointer
->	O
arg	pointer
;	O
if	O
(	O
!	O
(	O
flags	int
&	O
OPTION_NO_USAGE	int
)	O
)	O
{	O
if	O
(	O
arg	pointer
)	O
{	O
arg	pointer
=	O
dgettext	function
(	O
domain	pointer
,	O
arg	pointer
)	O
;	O
if	O
(	O
flags	int
&	O
OPTION_ARG_OPTIONAL	int
)	O
__argp_fmtstream_printf	function
(	O
stream	pointer
,	O
" [--%s[=%s]]"	pointer
,	O
opt	pointer
->	O
name	pointer
,	O
arg	pointer
)	O
;	O
else	O
__argp_fmtstream_printf	function
(	O
stream	pointer
,	O
" [--%s=%s]"	pointer
,	O
opt	pointer
->	O
name	pointer
,	O
arg	pointer
)	O
;	O
}	O
else	O
__argp_fmtstream_printf	function
(	O
stream	pointer
,	O
" [--%s]"	pointer
,	O
opt	pointer
->	O
name	pointer
)	O
;	O
}	O
return	O
0	int
;	O
}	O
static	O
void	O
hol_usage	function
(	O
struct	O
hol	struct
*	O
hol	struct
,	O
argp_fmtstream_t	pointer
stream	pointer
)	O
{	O
if	O
(	O
hol	struct
->	O
num_entries	int
>	O
0	int
)	O
{	O
unsigned	O
nentries	int
;	O
struct	O
hol_entry	struct
*	O
entry	pointer
;	O
char	O
*	O
short_no_arg_opts	pointer
=	O
alloca	O
(	O
strlen	function
(	O
hol	struct
->	O
short_options	pointer
)	O
+	O
1	int
)	O
;	O
char	O
*	O
snao_end	pointer
=	O
short_no_arg_opts	pointer
;	O
for	O
(	O
entry	pointer
=	O
hol	struct
->	O
entries	pointer
,	O
nentries	int
=	O
hol	struct
->	O
num_entries	int
;	O
nentries	int
>	O
0	int
;	O
entry	pointer
++	O
,	O
nentries	int
--	O
)	O
hol_entry_short_iterate	function
(	O
entry	pointer
,	O
add_argless_short_opt	function
,	O
entry	pointer
->	O
argp	struct
->	O
argp_domain	pointer
,	O
&	O
snao_end	pointer
)	O
;	O
if	O
(	O
snao_end	pointer
>	O
short_no_arg_opts	pointer
)	O
{	O
*	O
snao_end	pointer
++	O
=	O
0	int
;	O
__argp_fmtstream_printf	function
(	O
stream	pointer
,	O
" [-%s]"	pointer
,	O
short_no_arg_opts	pointer
)	O
;	O
}	O
for	O
(	O
entry	pointer
=	O
hol	struct
->	O
entries	pointer
,	O
nentries	int
=	O
hol	struct
->	O
num_entries	int
;	O
nentries	int
>	O
0	int
;	O
entry	pointer
++	O
,	O
nentries	int
--	O
)	O
hol_entry_short_iterate	function
(	O
entry	pointer
,	O
usage_argful_short_opt	function
,	O
entry	pointer
->	O
argp	struct
->	O
argp_domain	pointer
,	O
stream	pointer
)	O
;	O
for	O
(	O
entry	pointer
=	O
hol	struct
->	O
entries	pointer
,	O
nentries	int
=	O
hol	struct
->	O
num_entries	int
;	O
nentries	int
>	O
0	int
;	O
entry	pointer
++	O
,	O
nentries	int
--	O
)	O
hol_entry_long_iterate	function
(	O
entry	pointer
,	O
usage_long_opt	function
,	O
entry	pointer
->	O
argp	struct
->	O
argp_domain	pointer
,	O
stream	pointer
)	O
;	O
}	O
}	O
static	O
struct	O
hol	struct
*	O
argp_hol	function
(	O
const	O
struct	O
argp	struct
*	O
argp	struct
,	O
struct	O
hol_cluster	struct
*	O
cluster	pointer
)	O
{	O
const	O
struct	O
argp_child	struct
*	O
child	pointer
=	O
argp	struct
->	O
children	pointer
;	O
struct	O
hol	struct
*	O
hol	struct
=	O
make_hol	function
(	O
argp	struct
,	O
cluster	pointer
)	O
;	O
if	O
(	O
child	pointer
)	O
while	O
(	O
child	pointer
->	O
argp	struct
)	O
{	O
struct	O
hol_cluster	struct
*	O
child_cluster	pointer
=	O
(	O
(	O
child	pointer
->	O
group	int
||	O
child	pointer
->	O
header	pointer
)	O
?	O
hol_add_cluster	function
(	O
hol	struct
,	O
child	pointer
->	O
group	int
,	O
child	pointer
->	O
header	pointer
,	O
child	pointer
-	O
argp	struct
->	O
children	pointer
,	O
cluster	pointer
,	O
argp	struct
)	O
:	O
cluster	pointer
)	O
;	O
hol_append	function
(	O
hol	struct
,	O
argp_hol	function
(	O
child	pointer
->	O
argp	struct
,	O
child_cluster	pointer
)	O
)	O
;	O
child	pointer
++	O
;	O
}	O
return	O
hol	struct
;	O
}	O
static	O
size_t	long
argp_args_levels	function
(	O
const	O
struct	O
argp	struct
*	O
argp	struct
)	O
{	O
size_t	long
levels	long
=	O
0	int
;	O
const	O
struct	O
argp_child	struct
*	O
child	pointer
=	O
argp	struct
->	O
children	pointer
;	O
if	O
(	O
argp	struct
->	O
args_doc	pointer
&&	O
strchr	function
(	O
argp	struct
->	O
args_doc	pointer
,	O
'\n'	O
)	O
)	O
levels	long
++	O
;	O
if	O
(	O
child	pointer
)	O
while	O
(	O
child	pointer
->	O
argp	struct
)	O
levels	long
+=	O
argp_args_levels	function
(	O
(	O
child	pointer
++	O
)	O
->	O
argp	struct
)	O
;	O
return	O
levels	long
;	O
}	O
static	O
int	O
argp_args_usage	function
(	O
const	O
struct	O
argp	struct
*	O
argp	struct
,	O
const	O
struct	O
argp_state	struct
*	O
state	pointer
,	O
char	O
*	O
*	O
levels	long
,	O
int	O
advance	int
,	O
argp_fmtstream_t	pointer
stream	pointer
)	O
{	O
char	O
*	O
our_level	pointer
=	O
*	O
levels	long
;	O
int	O
multiple	int
=	O
0	int
;	O
const	O
struct	O
argp_child	struct
*	O
child	pointer
=	O
argp	struct
->	O
children	pointer
;	O
const	O
char	O
*	O
tdoc	pointer
=	O
dgettext	function
(	O
argp	struct
->	O
argp_domain	pointer
,	O
argp	struct
->	O
args_doc	pointer
)	O
,	O
*	O
nl	pointer
=	O
0	int
;	O
const	O
char	O
*	O
fdoc	pointer
=	O
filter_doc	function
(	O
tdoc	pointer
,	O
ARGP_KEY_HELP_ARGS_DOC	int
,	O
argp	struct
,	O
state	pointer
)	O
;	O
if	O
(	O
fdoc	pointer
)	O
{	O
const	O
char	O
*	O
cp	pointer
=	O
fdoc	pointer
;	O
nl	pointer
=	O
__strchrnul	O
(	O
cp	pointer
,	O
'\n'	O
)	O
;	O
if	O
(	O
*	O
nl	pointer
!=	O
'\0'	O
)	O
{	O
int	O
i	int
;	O
multiple	int
=	O
1	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
*	O
our_level	pointer
;	O
i	int
++	O
)	O
cp	pointer
=	O
nl	pointer
+	O
1	int
,	O
nl	pointer
=	O
__strchrnul	O
(	O
cp	pointer
,	O
'\n'	O
)	O
;	O
(	O
*	O
levels	long
)	O
++	O
;	O
}	O
space	function
(	O
stream	pointer
,	O
1	int
+	O
nl	pointer
-	O
cp	pointer
)	O
;	O
__argp_fmtstream_write	O
(	O
stream	pointer
,	O
cp	pointer
,	O
nl	pointer
-	O
cp	pointer
)	O
;	O
}	O
if	O
(	O
fdoc	pointer
&&	O
fdoc	pointer
!=	O
tdoc	pointer
)	O
free	function
(	O
(	O
char	O
*	O
)	O
fdoc	pointer
)	O
;	O
if	O
(	O
child	pointer
)	O
while	O
(	O
child	pointer
->	O
argp	struct
)	O
advance	int
=	O
!	O
argp_args_usage	function
(	O
(	O
child	pointer
++	O
)	O
->	O
argp	struct
,	O
state	pointer
,	O
levels	long
,	O
advance	int
,	O
stream	pointer
)	O
;	O
if	O
(	O
advance	int
&&	O
multiple	int
)	O
{	O
if	O
(	O
*	O
nl	pointer
)	O
{	O
(	O
*	O
our_level	pointer
)	O
++	O
;	O
advance	int
=	O
0	int
;	O
}	O
else	O
if	O
(	O
*	O
our_level	pointer
>	O
0	int
)	O
*	O
our_level	pointer
=	O
0	int
;	O
}	O
return	O
!	O
advance	int
;	O
}	O
static	O
int	O
argp_doc	function
(	O
const	O
struct	O
argp	struct
*	O
argp	struct
,	O
const	O
struct	O
argp_state	struct
*	O
state	pointer
,	O
int	O
post	int
,	O
int	O
pre_blank	int
,	O
int	O
first_only	int
,	O
argp_fmtstream_t	pointer
stream	pointer
)	O
{	O
const	O
char	O
*	O
text	pointer
;	O
const	O
char	O
*	O
inp_text	pointer
;	O
void	O
*	O
input	pointer
=	O
0	int
;	O
int	O
anything	int
=	O
0	int
;	O
size_t	long
inp_text_limit	long
=	O
0	int
;	O
const	O
char	O
*	O
doc	pointer
=	O
dgettext	function
(	O
argp	struct
->	O
argp_domain	pointer
,	O
argp	struct
->	O
doc	pointer
)	O
;	O
const	O
struct	O
argp_child	struct
*	O
child	pointer
=	O
argp	struct
->	O
children	pointer
;	O
if	O
(	O
doc	pointer
)	O
{	O
char	O
*	O
vt	pointer
=	O
strchr	function
(	O
doc	pointer
,	O
'\v'	O
)	O
;	O
inp_text	pointer
=	O
post	int
?	O
(	O
vt	pointer
?	O
vt	pointer
+	O
1	int
:	O
0	int
)	O
:	O
doc	pointer
;	O
inp_text_limit	long
=	O
(	O
!	O
post	int
&&	O
vt	pointer
)	O
?	O
(	O
vt	pointer
-	O
doc	pointer
)	O
:	O
0	int
;	O
}	O
else	O
inp_text	pointer
=	O
0	int
;	O
if	O
(	O
argp	struct
->	O
help_filter	pointer
)	O
{	O
if	O
(	O
inp_text_limit	long
)	O
inp_text	pointer
=	O
__strndup	O
(	O
inp_text	pointer
,	O
inp_text_limit	long
)	O
;	O
input	pointer
=	O
__argp_input	function
(	O
argp	struct
,	O
state	pointer
)	O
;	O
text	pointer
=	O
(	O
*	O
argp	struct
->	O
help_filter	pointer
)	O
(	O
post	int
?	O
ARGP_KEY_HELP_POST_DOC	int
:	O
ARGP_KEY_HELP_PRE_DOC	int
,	O
inp_text	pointer
,	O
input	pointer
)	O
;	O
}	O
else	O
text	pointer
=	O
(	O
const	O
char	O
*	O
)	O
inp_text	pointer
;	O
if	O
(	O
text	pointer
)	O
{	O
if	O
(	O
pre_blank	int
)	O
__argp_fmtstream_putc	O
(	O
stream	pointer
,	O
'\n'	O
)	O
;	O
if	O
(	O
text	pointer
==	O
inp_text	pointer
&&	O
inp_text_limit	long
)	O
__argp_fmtstream_write	O
(	O
stream	pointer
,	O
inp_text	pointer
,	O
inp_text_limit	long
)	O
;	O
else	O
__argp_fmtstream_puts	O
(	O
stream	pointer
,	O
text	pointer
)	O
;	O
if	O
(	O
__argp_fmtstream_point	O
(	O
stream	pointer
)	O
>	O
__argp_fmtstream_lmargin	O
(	O
stream	pointer
)	O
)	O
__argp_fmtstream_putc	O
(	O
stream	pointer
,	O
'\n'	O
)	O
;	O
anything	int
=	O
1	int
;	O
}	O
if	O
(	O
text	pointer
&&	O
text	pointer
!=	O
inp_text	pointer
)	O
free	function
(	O
(	O
char	O
*	O
)	O
text	pointer
)	O
;	O
if	O
(	O
inp_text	pointer
&&	O
inp_text_limit	long
&&	O
argp	struct
->	O
help_filter	pointer
)	O
free	function
(	O
(	O
char	O
*	O
)	O
inp_text	pointer
)	O
;	O
if	O
(	O
post	int
&&	O
argp	struct
->	O
help_filter	pointer
)	O
{	O
text	pointer
=	O
(	O
*	O
argp	struct
->	O
help_filter	pointer
)	O
(	O
ARGP_KEY_HELP_EXTRA	int
,	O
0	int
,	O
input	pointer
)	O
;	O
if	O
(	O
text	pointer
)	O
{	O
if	O
(	O
anything	int
||	O
pre_blank	int
)	O
__argp_fmtstream_putc	O
(	O
stream	pointer
,	O
'\n'	O
)	O
;	O
__argp_fmtstream_puts	O
(	O
stream	pointer
,	O
text	pointer
)	O
;	O
free	function
(	O
(	O
char	O
*	O
)	O
text	pointer
)	O
;	O
if	O
(	O
__argp_fmtstream_point	O
(	O
stream	pointer
)	O
>	O
__argp_fmtstream_lmargin	O
(	O
stream	pointer
)	O
)	O
__argp_fmtstream_putc	O
(	O
stream	pointer
,	O
'\n'	O
)	O
;	O
anything	int
=	O
1	int
;	O
}	O
}	O
if	O
(	O
child	pointer
)	O
while	O
(	O
child	pointer
->	O
argp	struct
&&	O
!	O
(	O
first_only	int
&&	O
anything	int
)	O
)	O
anything	int
|=	O
argp_doc	function
(	O
(	O
child	pointer
++	O
)	O
->	O
argp	struct
,	O
state	pointer
,	O
post	int
,	O
anything	int
||	O
pre_blank	int
,	O
first_only	int
,	O
stream	pointer
)	O
;	O
return	O
anything	int
;	O
}	O
static	O
void	O
_help	function
(	O
const	O
struct	O
argp	struct
*	O
argp	struct
,	O
const	O
struct	O
argp_state	struct
*	O
state	pointer
,	O
FILE	struct
*	O
stream	pointer
,	O
unsigned	O
flags	int
,	O
char	O
*	O
name	pointer
)	O
{	O
int	O
anything	int
=	O
0	int
;	O
struct	O
hol	struct
*	O
hol	struct
=	O
0	int
;	O
argp_fmtstream_t	pointer
fs	pointer
;	O
if	O
(	O
!	O
stream	pointer
)	O
return	O
;	O
__flockfile	O
(	O
stream	pointer
)	O
;	O
if	O
(	O
!	O
uparams	struct
.	O
valid	int
)	O
fill_in_uparams	function
(	O
state	pointer
)	O
;	O
fs	pointer
=	O
__argp_make_fmtstream	function
(	O
stream	pointer
,	O
0	int
,	O
uparams	struct
.	O
rmargin	long
,	O
0	int
)	O
;	O
if	O
(	O
!	O
fs	pointer
)	O
{	O
__funlockfile	O
(	O
stream	pointer
)	O
;	O
return	O
;	O
}	O
if	O
(	O
flags	int
&	O
(	O
ARGP_HELP_USAGE	int
|	O
ARGP_HELP_SHORT_USAGE	int
|	O
ARGP_HELP_LONG	int
)	O
)	O
{	O
hol	struct
=	O
argp_hol	function
(	O
argp	struct
,	O
0	int
)	O
;	O
hol_set_group	function
(	O
hol	struct
,	O
"help"	pointer
,	O
-	O
1	int
)	O
;	O
hol_set_group	function
(	O
hol	struct
,	O
"version"	pointer
,	O
-	O
1	int
)	O
;	O
hol_sort	function
(	O
hol	struct
)	O
;	O
}	O
if	O
(	O
flags	int
&	O
(	O
ARGP_HELP_USAGE	int
|	O
ARGP_HELP_SHORT_USAGE	int
)	O
)	O
{	O
int	O
first_pattern	int
=	O
1	int
,	O
more_patterns	int
;	O
size_t	long
num_pattern_levels	long
=	O
argp_args_levels	function
(	O
argp	struct
)	O
;	O
char	O
*	O
pattern_levels	pointer
=	O
alloca	O
(	O
num_pattern_levels	long
)	O
;	O
memset	function
(	O
pattern_levels	pointer
,	O
0	int
,	O
num_pattern_levels	long
)	O
;	O
do	O
{	O
int	O
old_lm	int
;	O
int	O
old_wm	int
=	O
__argp_fmtstream_set_wmargin	O
(	O
fs	pointer
,	O
uparams	struct
.	O
usage_indent	int
)	O
;	O
char	O
*	O
levels	long
=	O
pattern_levels	pointer
;	O
if	O
(	O
first_pattern	int
)	O
__argp_fmtstream_printf	function
(	O
fs	pointer
,	O
"%s %s"	pointer
,	O
dgettext	function
(	O
argp	struct
->	O
argp_domain	pointer
,	O
"Usage:"	pointer
)	O
,	O
name	pointer
)	O
;	O
else	O
__argp_fmtstream_printf	function
(	O
fs	pointer
,	O
"%s %s"	pointer
,	O
dgettext	function
(	O
argp	struct
->	O
argp_domain	pointer
,	O
"  or: "	pointer
)	O
,	O
name	pointer
)	O
;	O
old_lm	int
=	O
__argp_fmtstream_set_lmargin	O
(	O
fs	pointer
,	O
uparams	struct
.	O
usage_indent	int
)	O
;	O
if	O
(	O
flags	int
&	O
ARGP_HELP_SHORT_USAGE	int
)	O
{	O
if	O
(	O
hol	struct
->	O
num_entries	int
>	O
0	int
)	O
__argp_fmtstream_puts	O
(	O
fs	pointer
,	O
dgettext	function
(	O
argp	struct
->	O
argp_domain	pointer
,	O
" [OPTION...]"	pointer
)	O
)	O
;	O
}	O
else	O
{	O
hol_usage	function
(	O
hol	struct
,	O
fs	pointer
)	O
;	O
flags	int
|=	O
ARGP_HELP_SHORT_USAGE	int
;	O
}	O
more_patterns	int
=	O
argp_args_usage	function
(	O
argp	struct
,	O
state	pointer
,	O
&	O
levels	long
,	O
1	int
,	O
fs	pointer
)	O
;	O
__argp_fmtstream_set_wmargin	O
(	O
fs	pointer
,	O
old_wm	int
)	O
;	O
__argp_fmtstream_set_lmargin	O
(	O
fs	pointer
,	O
old_lm	int
)	O
;	O
__argp_fmtstream_putc	O
(	O
fs	pointer
,	O
'\n'	O
)	O
;	O
anything	int
=	O
1	int
;	O
first_pattern	int
=	O
0	int
;	O
}	O
while	O
(	O
more_patterns	int
)	O
;	O
}	O
if	O
(	O
flags	int
&	O
ARGP_HELP_PRE_DOC	int
)	O
anything	int
|=	O
argp_doc	function
(	O
argp	struct
,	O
state	pointer
,	O
0	int
,	O
0	int
,	O
1	int
,	O
fs	pointer
)	O
;	O
if	O
(	O
flags	int
&	O
ARGP_HELP_SEE	int
)	O
{	O
__argp_fmtstream_printf	function
(	O
fs	pointer
,	O
dgettext	function
(	O
argp	struct
->	O
argp_domain	pointer
,	O
"Try '%s --help' or '%s --usage' for more information.\n"	pointer
)	O
,	O
name	pointer
,	O
name	pointer
)	O
;	O
anything	int
=	O
1	int
;	O
}	O
if	O
(	O
flags	int
&	O
ARGP_HELP_LONG	int
)	O
{	O
if	O
(	O
hol	struct
->	O
num_entries	int
>	O
0	int
)	O
{	O
if	O
(	O
anything	int
)	O
__argp_fmtstream_putc	O
(	O
fs	pointer
,	O
'\n'	O
)	O
;	O
hol_help	function
(	O
hol	struct
,	O
state	pointer
,	O
fs	pointer
)	O
;	O
anything	int
=	O
1	int
;	O
}	O
}	O
if	O
(	O
flags	int
&	O
ARGP_HELP_POST_DOC	int
)	O
anything	int
|=	O
argp_doc	function
(	O
argp	struct
,	O
state	pointer
,	O
1	int
,	O
anything	int
,	O
0	int
,	O
fs	pointer
)	O
;	O
if	O
(	O
(	O
flags	int
&	O
ARGP_HELP_BUG_ADDR	int
)	O
&&	O
argp_program_bug_address	pointer
)	O
{	O
if	O
(	O
anything	int
)	O
__argp_fmtstream_putc	O
(	O
fs	pointer
,	O
'\n'	O
)	O
;	O
__argp_fmtstream_printf	function
(	O
fs	pointer
,	O
dgettext	function
(	O
argp	struct
->	O
argp_domain	pointer
,	O
"Report bugs to %s.\n"	pointer
)	O
,	O
argp_program_bug_address	pointer
)	O
;	O
anything	int
=	O
1	int
;	O
}	O
__funlockfile	O
(	O
stream	pointer
)	O
;	O
if	O
(	O
hol	struct
)	O
hol_free	function
(	O
hol	struct
)	O
;	O
__argp_fmtstream_free	function
(	O
fs	pointer
)	O
;	O
}	O
void	O
__argp_help	function
(	O
const	O
struct	O
argp	struct
*	O
argp	struct
,	O
FILE	struct
*	O
stream	pointer
,	O
unsigned	O
flags	int
,	O
char	O
*	O
name	pointer
)	O
{	O
_help	function
(	O
argp	struct
,	O
0	int
,	O
stream	pointer
,	O
flags	int
,	O
name	pointer
)	O
;	O
}	O
void	O
__argp_state_help	function
(	O
const	O
struct	O
argp_state	struct
*	O
state	pointer
,	O
FILE	struct
*	O
stream	pointer
,	O
unsigned	O
flags	int
)	O
{	O
if	O
(	O
(	O
!	O
state	pointer
||	O
!	O
(	O
state	pointer
->	O
flags	int
&	O
ARGP_NO_ERRS	int
)	O
)	O
&&	O
stream	pointer
)	O
{	O
if	O
(	O
state	pointer
&&	O
(	O
state	pointer
->	O
flags	int
&	O
ARGP_LONG_ONLY	int
)	O
)	O
flags	int
|=	O
ARGP_HELP_LONG_ONLY	int
;	O
_help	function
(	O
state	pointer
?	O
state	pointer
->	O
root_argp	pointer
:	O
0	int
,	O
state	pointer
,	O
stream	pointer
,	O
flags	int
,	O
state	pointer
?	O
state	pointer
->	O
name	pointer
:	O
__argp_short_program_name	O
(	O
)	O
)	O
;	O
if	O
(	O
!	O
state	pointer
||	O
!	O
(	O
state	pointer
->	O
flags	int
&	O
ARGP_NO_EXIT	int
)	O
)	O
{	O
if	O
(	O
flags	int
&	O
ARGP_HELP_EXIT_ERR	int
)	O
exit	function
(	O
argp_err_exit_status	int
)	O
;	O
if	O
(	O
flags	int
&	O
ARGP_HELP_EXIT_OK	int
)	O
exit	function
(	O
0	int
)	O
;	O
}	O
}	O
}	O
void	O
__argp_error	function
(	O
const	O
struct	O
argp_state	struct
*	O
state	pointer
,	O
const	O
char	O
*	O
fmt	pointer
,	O
...	O
)	O
{	O
if	O
(	O
!	O
state	pointer
||	O
!	O
(	O
state	pointer
->	O
flags	int
&	O
ARGP_NO_ERRS	int
)	O
)	O
{	O
FILE	struct
*	O
stream	pointer
=	O
state	pointer
?	O
state	pointer
->	O
err_stream	pointer
:	O
stderr	pointer
;	O
if	O
(	O
stream	pointer
)	O
{	O
va_list	array
ap	array
;	O
__flockfile	O
(	O
stream	pointer
)	O
;	O
va_start	O
(	O
ap	array
,	O
fmt	pointer
)	O
;	O
fputs_unlocked	function
(	O
state	pointer
?	O
state	pointer
->	O
name	pointer
:	O
__argp_short_program_name	O
(	O
)	O
,	O
stream	pointer
)	O
;	O
putc_unlocked	function
(	O
':'	O
,	O
stream	pointer
)	O
;	O
putc_unlocked	function
(	O
' '	O
,	O
stream	pointer
)	O
;	O
vfprintf	function
(	O
stream	pointer
,	O
fmt	pointer
,	O
ap	array
)	O
;	O
putc_unlocked	function
(	O
'\n'	O
,	O
stream	pointer
)	O
;	O
__argp_state_help	function
(	O
state	pointer
,	O
stream	pointer
,	O
ARGP_HELP_STD_ERR	O
)	O
;	O
va_end	O
(	O
ap	array
)	O
;	O
__funlockfile	O
(	O
stream	pointer
)	O
;	O
}	O
}	O
}	O
void	O
__argp_failure	function
(	O
const	O
struct	O
argp_state	struct
*	O
state	pointer
,	O
int	O
status	int
,	O
int	O
errnum	int
,	O
const	O
char	O
*	O
fmt	pointer
,	O
...	O
)	O
{	O
if	O
(	O
!	O
state	pointer
||	O
!	O
(	O
state	pointer
->	O
flags	int
&	O
ARGP_NO_ERRS	int
)	O
)	O
{	O
FILE	struct
*	O
stream	pointer
=	O
state	pointer
?	O
state	pointer
->	O
err_stream	pointer
:	O
stderr	pointer
;	O
if	O
(	O
stream	pointer
)	O
{	O
__flockfile	O
(	O
stream	pointer
)	O
;	O
fputs_unlocked	function
(	O
state	pointer
?	O
state	pointer
->	O
name	pointer
:	O
__argp_short_program_name	O
(	O
)	O
,	O
stream	pointer
)	O
;	O
if	O
(	O
fmt	pointer
)	O
{	O
va_list	array
ap	array
;	O
va_start	O
(	O
ap	array
,	O
fmt	pointer
)	O
;	O
putc_unlocked	function
(	O
':'	O
,	O
stream	pointer
)	O
;	O
putc_unlocked	function
(	O
' '	O
,	O
stream	pointer
)	O
;	O
vfprintf	function
(	O
stream	pointer
,	O
fmt	pointer
,	O
ap	array
)	O
;	O
va_end	O
(	O
ap	array
)	O
;	O
}	O
if	O
(	O
errnum	int
)	O
{	O
char	O
buf	pointer
[	O
200	int
]	O
;	O
char	O
const	O
*	O
s	pointer
=	O
NULL	O
;	O
putc_unlocked	function
(	O
':'	O
,	O
stream	pointer
)	O
;	O
putc_unlocked	function
(	O
' '	O
,	O
stream	pointer
)	O
;	O
s	pointer
=	O
__strerror_r	O
(	O
errnum	int
,	O
buf	pointer
,	O
sizeof	O
buf	pointer
)	O
;	O
if	O
(	O
!	O
s	pointer
&&	O
!	O
(	O
s	pointer
=	O
strerror	function
(	O
errnum	int
)	O
)	O
)	O
s	pointer
=	O
dgettext	function
(	O
state	pointer
->	O
root_argp	pointer
->	O
argp_domain	pointer
,	O
"Unknown system error"	pointer
)	O
;	O
fputs_unlocked	function
(	O
s	pointer
,	O
stream	pointer
)	O
;	O
}	O
putc_unlocked	function
(	O
'\n'	O
,	O
stream	pointer
)	O
;	O
__funlockfile	O
(	O
stream	pointer
)	O
;	O
if	O
(	O
status	int
&&	O
(	O
!	O
state	pointer
||	O
!	O
(	O
state	pointer
->	O
flags	int
&	O
ARGP_NO_EXIT	int
)	O
)	O
)	O
exit	function
(	O
status	int
)	O
;	O
}	O
}	O
}	O
