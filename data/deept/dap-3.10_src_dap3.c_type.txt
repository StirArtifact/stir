extern	O
dataobs	struct
dap_obs	array
[	O
]	O
;	O
extern	O
FILE	struct
*	O
dap_lst	pointer
;	O
extern	O
FILE	struct
*	O
dap_log	pointer
;	O
extern	O
FILE	struct
*	O
dap_err	pointer
;	O
extern	O
char	O
*	O
dap_title	pointer
;	O
extern	O
char	O
*	O
dap_dapname	pointer
;	O
static	O
void	O
plot1	function
(	O
double	O
x	double
[	O
]	O
,	O
double	O
y	double
[	O
]	O
,	O
int	O
nobs	int
,	O
char	O
xvar	array
[	O
]	O
,	O
char	O
yvar	array
[	O
]	O
,	O
int	O
markv	array
[	O
]	O
,	O
int	O
nmark	int
,	O
pict	struct
p	pointer
[	O
]	O
,	O
pict	struct
a	double
[	O
]	O
,	O
int	O
pn	int
,	O
char	O
style	array
[	O
]	O
,	O
double	O
(	O
*	O
xfunct	pointer
)	O
(	O
)	O
,	O
double	O
(	O
*	O
yfunct	pointer
)	O
(	O
)	O
,	O
int	O
doaxes	int
)	O
{	O
int	O
titlelen	int
;	O
static	O
char	O
*	O
title0	pointer
=	O
NULL	O
;	O
char	O
*	O
title1	pointer
;	O
int	O
overlay	int
;	O
int	O
n	int
;	O
int	O
v	int
;	O
int	O
s	int
;	O
char	O
*	O
axspec	array
;	O
int	O
t	double
;	O
double	O
pictr	double
;	O
dap_swap	function
(	O
)	O
;	O
if	O
(	O
dap_title	pointer
)	O
titlelen	int
=	O
strlen	function
(	O
dap_title	pointer
)	O
+	O
1	int
;	O
else	O
titlelen	int
=	O
0	int
;	O
if	O
(	O
!	O
title0	pointer
)	O
{	O
title0	pointer
=	O
dap_malloc	function
(	O
dap_linelen	int
+	O
titlelen	int
+	O
1	int
,	O
"dap_linelen"	pointer
)	O
;	O
if	O
(	O
dap_title	pointer
)	O
strcpy	function
(	O
title0	pointer
,	O
dap_title	pointer
)	O
;	O
}	O
title1	pointer
=	O
dap_malloc	function
(	O
dap_linelen	int
+	O
titlelen	int
+	O
1	int
,	O
"dap_linelen"	pointer
)	O
;	O
for	O
(	O
s	int
=	O
0	int
;	O
style	array
[	O
s	int
]	O
==	O
' '	O
;	O
s	int
++	O
)	O
;	O
overlay	int
=	O
0	int
;	O
if	O
(	O
style	array
[	O
s	int
]	O
==	O
'o'	O
)	O
{	O
for	O
(	O
s	int
++	O
;	O
style	array
[	O
s	int
]	O
==	O
' '	O
;	O
s	int
++	O
)	O
;	O
for	O
(	O
;	O
'0'	O
<=	O
style	array
[	O
s	int
]	O
&&	O
style	array
[	O
s	int
]	O
<=	O
'9'	O
;	O
s	int
++	O
)	O
overlay	int
=	O
10	int
*	O
overlay	int
+	O
style	array
[	O
s	int
]	O
-	O
'0'	O
;	O
if	O
(	O
!	O
overlay	int
)	O
overlay	int
=	O
-	O
1	int
;	O
}	O
while	O
(	O
style	array
[	O
s	int
]	O
==	O
' '	O
)	O
s	int
++	O
;	O
axspec	array
=	O
dap_malloc	function
(	O
3	int
+	O
strlen	function
(	O
style	array
)	O
,	O
""	pointer
)	O
;	O
strcpy	function
(	O
axspec	array
,	O
style	array
+	O
s	int
)	O
;	O
if	O
(	O
overlay	int
==	O
-	O
1	int
)	O
{	O
if	O
(	O
pn	int
)	O
pict_initpict	function
(	O
p	pointer
+	O
pn	int
-	O
1	int
,	O
p	pointer
+	O
pn	int
)	O
;	O
else	O
pict_initpict	function
(	O
NULL	O
,	O
p	pointer
+	O
pn	int
)	O
;	O
pict_initpict	function
(	O
p	pointer
+	O
pn	int
,	O
a	double
)	O
;	O
}	O
else	O
if	O
(	O
overlay	int
)	O
{	O
if	O
(	O
pn	int
%	O
overlay	int
)	O
pict_initpict	function
(	O
p	pointer
+	O
pn	int
-	O
1	int
,	O
p	pointer
+	O
pn	int
)	O
;	O
else	O
pict_initpict	function
(	O
NULL	O
,	O
p	pointer
+	O
pn	int
)	O
;	O
pict_initpict	function
(	O
p	pointer
+	O
pn	int
,	O
a	double
+	O
(	O
pn	int
/	O
overlay	int
)	O
)	O
;	O
}	O
else	O
{	O
pict_initpict	function
(	O
NULL	O
,	O
p	pointer
+	O
pn	int
)	O
;	O
pict_initpict	function
(	O
p	pointer
+	O
pn	int
,	O
a	double
+	O
pn	int
)	O
;	O
}	O
for	O
(	O
n	int
=	O
0	int
;	O
n	int
<	O
nobs	int
;	O
n	int
++	O
)	O
pict_point	function
(	O
p	pointer
+	O
pn	int
,	O
x	double
[	O
n	int
]	O
,	O
y	double
[	O
n	int
]	O
)	O
;	O
strcpy	function
(	O
p	pointer
[	O
pn	int
]	O
.	O
pict_type	array
,	O
"CIRC"	pointer
)	O
;	O
title1	pointer
[	O
0	int
]	O
=	O
'\0'	O
;	O
if	O
(	O
dap_title	pointer
)	O
strcpy	function
(	O
title1	pointer
,	O
dap_title	pointer
)	O
;	O
if	O
(	O
overlay	int
>=	O
0	int
&&	O
nmark	int
)	O
{	O
if	O
(	O
dap_title	pointer
)	O
strcat	function
(	O
title1	pointer
,	O
"\n"	pointer
)	O
;	O
for	O
(	O
v	int
=	O
0	int
;	O
v	int
<	O
nmark	int
;	O
v	int
++	O
)	O
{	O
if	O
(	O
v	int
)	O
strcat	function
(	O
title1	pointer
,	O
" "	pointer
)	O
;	O
if	O
(	O
dap_obs	array
[	O
0	int
]	O
.	O
do_len	pointer
[	O
markv	array
[	O
v	int
]	O
]	O
==	O
DBL	O
)	O
sprintf	function
(	O
title1	pointer
+	O
strlen	function
(	O
title1	pointer
)	O
,	O
"%g"	pointer
,	O
dap_obs	array
[	O
0	int
]	O
.	O
do_dbl	pointer
[	O
markv	array
[	O
v	int
]	O
]	O
)	O
;	O
else	O
if	O
(	O
dap_obs	array
[	O
0	int
]	O
.	O
do_len	pointer
[	O
markv	array
[	O
v	int
]	O
]	O
==	O
INT	int
)	O
sprintf	function
(	O
title1	pointer
+	O
strlen	function
(	O
title1	pointer
)	O
,	O
"%d"	pointer
,	O
dap_obs	array
[	O
0	int
]	O
.	O
do_int	pointer
[	O
markv	array
[	O
v	int
]	O
]	O
)	O
;	O
else	O
strcat	function
(	O
title1	pointer
,	O
dap_obs	array
[	O
0	int
]	O
.	O
do_str	pointer
[	O
markv	array
[	O
v	int
]	O
]	O
)	O
;	O
}	O
if	O
(	O
overlay	int
>	O
0	int
)	O
{	O
if	O
(	O
!	O
(	O
pn	int
%	O
overlay	int
)	O
)	O
strcpy	function
(	O
title0	pointer
,	O
title1	pointer
)	O
;	O
else	O
{	O
for	O
(	O
t	double
=	O
0	int
;	O
title0	pointer
[	O
t	double
]	O
&&	O
title0	pointer
[	O
t	double
]	O
==	O
title1	pointer
[	O
t	double
]	O
;	O
t	double
++	O
)	O
;	O
title1	pointer
[	O
t	double
]	O
=	O
'\0'	O
;	O
}	O
}	O
}	O
if	O
(	O
doaxes	int
)	O
{	O
if	O
(	O
overlay	int
==	O
-	O
1	int
)	O
{	O
pictr	double
=	O
0.05	int
*	O
pict_autoaxes	function
(	O
p	pointer
,	O
xvar	array
,	O
yvar	array
,	O
axspec	array
,	O
xfunct	pointer
,	O
yfunct	pointer
,	O
title1	pointer
,	O
PORTRAIT	int
)	O
;	O
while	O
(	O
pn	int
>=	O
0	int
)	O
p	pointer
[	O
pn	int
--	O
]	O
.	O
pict_r	double
=	O
pictr	double
;	O
}	O
else	O
if	O
(	O
overlay	int
)	O
{	O
pictr	double
=	O
0.05	int
*	O
pict_autoaxes	function
(	O
p	pointer
+	O
(	O
pn	int
/	O
overlay	int
)	O
*	O
overlay	int
,	O
xvar	array
,	O
yvar	array
,	O
axspec	array
,	O
xfunct	pointer
,	O
yfunct	pointer
,	O
title1	pointer
,	O
PORTRAIT	int
)	O
;	O
while	O
(	O
pn	int
>=	O
(	O
pn	int
/	O
overlay	int
)	O
*	O
overlay	int
)	O
p	pointer
[	O
pn	int
--	O
]	O
.	O
pict_r	double
=	O
pictr	double
;	O
}	O
else	O
p	pointer
[	O
pn	int
]	O
.	O
pict_r	double
=	O
0.05	int
*	O
pict_autoaxes	function
(	O
p	pointer
+	O
pn	int
,	O
xvar	array
,	O
yvar	array
,	O
axspec	array
,	O
xfunct	pointer
,	O
yfunct	pointer
,	O
title1	pointer
,	O
PORTRAIT	int
)	O
;	O
}	O
dap_swap	function
(	O
)	O
;	O
if	O
(	O
doaxes	int
)	O
{	O
dap_free	function
(	O
title0	pointer
,	O
""	pointer
)	O
;	O
title0	pointer
=	O
NULL	O
;	O
}	O
dap_free	function
(	O
title1	pointer
,	O
""	pointer
)	O
;	O
dap_free	function
(	O
axspec	array
,	O
""	pointer
)	O
;	O
}	O
static	O
void	O
plotparse	function
(	O
char	O
*	O
xyvar	pointer
,	O
char	O
*	O
xyname	pointer
,	O
char	O
*	O
xname	array
,	O
char	O
*	O
yname	pointer
)	O
{	O
int	O
n	int
;	O
int	O
xyn	int
;	O
int	O
xn	int
,	O
yn	function
;	O
int	O
ystart	int
;	O
for	O
(	O
n	int
=	O
0	int
;	O
xyvar	pointer
[	O
n	int
]	O
==	O
' '	O
;	O
n	int
++	O
)	O
;	O
for	O
(	O
xyn	int
=	O
0	int
;	O
xyvar	pointer
[	O
n	int
]	O
&&	O
xyvar	pointer
[	O
n	int
]	O
!=	O
' '	O
&&	O
xyvar	pointer
[	O
n	int
]	O
!=	O
'`'	O
;	O
n	int
++	O
)	O
{	O
if	O
(	O
xyn	int
<	O
dap_namelen	int
)	O
xyname	pointer
[	O
xyn	int
++	O
]	O
=	O
xyvar	pointer
[	O
n	int
]	O
;	O
else	O
{	O
fprintf	function
(	O
dap_err	pointer
,	O
"(plotparse) X-variable name too long: %s\n"	pointer
,	O
xyvar	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
}	O
strncpy	function
(	O
xname	array
,	O
xyvar	pointer
,	O
n	int
)	O
;	O
xname	array
[	O
n	int
]	O
=	O
'\0'	O
;	O
xyname	pointer
[	O
xyn	int
++	O
]	O
=	O
' '	O
;	O
while	O
(	O
xyvar	pointer
[	O
n	int
]	O
==	O
' '	O
)	O
n	int
++	O
;	O
if	O
(	O
xyvar	pointer
[	O
n	int
]	O
==	O
'`'	O
)	O
{	O
for	O
(	O
n	int
++	O
;	O
xyvar	pointer
[	O
n	int
]	O
==	O
' '	O
;	O
n	int
++	O
)	O
;	O
for	O
(	O
xn	int
=	O
0	int
;	O
xyvar	pointer
[	O
n	int
]	O
&&	O
xyvar	pointer
[	O
n	int
]	O
!=	O
'`'	O
;	O
n	int
++	O
)	O
{	O
if	O
(	O
xn	int
<	O
dap_linelen	int
)	O
xname	array
[	O
xn	int
++	O
]	O
=	O
xyvar	pointer
[	O
n	int
]	O
;	O
else	O
{	O
fprintf	function
(	O
dap_err	pointer
,	O
"(plotparse) X-axis label too long: %s\n"	pointer
,	O
xyvar	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
}	O
while	O
(	O
xyvar	pointer
[	O
n	int
]	O
==	O
' '	O
)	O
n	int
++	O
;	O
if	O
(	O
xyvar	pointer
[	O
n	int
]	O
==	O
'`'	O
)	O
{	O
for	O
(	O
n	int
++	O
;	O
xyvar	pointer
[	O
n	int
]	O
==	O
' '	O
;	O
n	int
++	O
)	O
;	O
}	O
else	O
{	O
fprintf	function
(	O
dap_err	pointer
,	O
"(plotparse) Expected ` after x-axis label: %s\n"	pointer
,	O
xyvar	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
xname	array
[	O
xn	int
]	O
=	O
'\0'	O
;	O
}	O
ystart	int
=	O
n	int
;	O
for	O
(	O
;	O
xyvar	pointer
[	O
n	int
]	O
&&	O
xyvar	pointer
[	O
n	int
]	O
!=	O
' '	O
&&	O
xyvar	pointer
[	O
n	int
]	O
!=	O
'`'	O
;	O
n	int
++	O
)	O
{	O
if	O
(	O
xyn	int
<	O
2	int
*	O
(	O
dap_namelen	int
+	O
1	int
)	O
)	O
xyname	pointer
[	O
xyn	int
++	O
]	O
=	O
xyvar	pointer
[	O
n	int
]	O
;	O
else	O
{	O
fprintf	function
(	O
dap_err	pointer
,	O
"(plotparse) Y-variable name too long: %s\n"	pointer
,	O
xyvar	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
}	O
xyname	pointer
[	O
xyn	int
]	O
=	O
'\0'	O
;	O
if	O
(	O
yname	pointer
)	O
{	O
strncpy	function
(	O
yname	pointer
,	O
xyvar	pointer
+	O
ystart	int
,	O
n	int
)	O
;	O
yname	pointer
[	O
n	int
-	O
ystart	int
]	O
=	O
'\0'	O
;	O
xyname	pointer
[	O
xyn	int
++	O
]	O
=	O
' '	O
;	O
while	O
(	O
xyvar	pointer
[	O
n	int
]	O
==	O
' '	O
)	O
n	int
++	O
;	O
if	O
(	O
xyvar	pointer
[	O
n	int
]	O
==	O
'`'	O
)	O
{	O
for	O
(	O
n	int
++	O
;	O
xyvar	pointer
[	O
n	int
]	O
==	O
' '	O
;	O
n	int
++	O
)	O
;	O
for	O
(	O
yn	function
=	O
0	int
;	O
xyvar	pointer
[	O
n	int
]	O
&&	O
xyvar	pointer
[	O
n	int
]	O
!=	O
'`'	O
;	O
n	int
++	O
)	O
{	O
if	O
(	O
yn	function
<	O
dap_linelen	int
)	O
yname	pointer
[	O
yn	function
++	O
]	O
=	O
xyvar	pointer
[	O
n	int
]	O
;	O
else	O
{	O
fprintf	function
(	O
dap_err	pointer
,	O
"(plotparse) Y-axis label too long: %s\n"	pointer
,	O
xyvar	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
}	O
yname	pointer
[	O
yn	function
]	O
=	O
'\0'	O
;	O
}	O
}	O
xyname	pointer
[	O
xyn	int
]	O
=	O
'\0'	O
;	O
}	O
pict	struct
*	O
plot	function
(	O
char	O
*	O
fname	array
,	O
char	O
*	O
xyvar	pointer
,	O
char	O
*	O
marks	array
,	O
char	O
*	O
style	array
,	O
double	O
(	O
*	O
xfunct	pointer
)	O
(	O
)	O
,	O
double	O
(	O
*	O
yfunct	pointer
)	O
(	O
)	O
,	O
int	O
nplots	int
)	O
{	O
pict	struct
*	O
p	pointer
;	O
pict	struct
*	O
a	double
;	O
int	O
*	O
markv	array
;	O
int	O
nmark	int
;	O
int	O
nobs	int
;	O
int	O
nnan	int
;	O
static	O
double	O
*	O
x	double
,	O
*	O
y	double
;	O
int	O
pn	int
;	O
int	O
xyv	array
[	O
2	int
]	O
;	O
char	O
*	O
xyname	pointer
;	O
char	O
*	O
xname	array
;	O
char	O
*	O
yname	pointer
;	O
int	O
s	int
;	O
int	O
overlay	int
;	O
int	O
more	int
;	O
markv	array
=	O
(	O
int	O
*	O
)	O
dap_malloc	function
(	O
sizeof	O
(	O
int	O
)	O
*	O
dap_maxvar	int
,	O
""	pointer
)	O
;	O
p	pointer
=	O
(	O
pict	struct
*	O
)	O
dap_malloc	function
(	O
2	int
*	O
nplots	int
*	O
sizeof	O
(	O
pict	struct
)	O
,	O
""	pointer
)	O
;	O
a	double
=	O
p	pointer
+	O
nplots	int
;	O
x	double
=	O
(	O
double	O
*	O
)	O
dap_malloc	function
(	O
dap_maxval	int
*	O
sizeof	O
(	O
double	O
)	O
,	O
""	pointer
)	O
;	O
y	double
=	O
(	O
double	O
*	O
)	O
dap_malloc	function
(	O
dap_maxval	int
*	O
sizeof	O
(	O
double	O
)	O
,	O
""	pointer
)	O
;	O
if	O
(	O
!	O
fname	array
)	O
{	O
fputs	function
(	O
"(plot) No dataset name given.\n"	pointer
,	O
dap_err	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
inset	function
(	O
fname	array
)	O
;	O
if	O
(	O
!	O
xyvar	pointer
)	O
{	O
fputs	function
(	O
"(plot) No x and y variable list given.\n"	pointer
,	O
dap_err	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
xyname	pointer
=	O
dap_malloc	function
(	O
2	int
*	O
(	O
dap_namelen	int
+	O
1	int
)	O
,	O
""	pointer
)	O
;	O
xname	array
=	O
dap_malloc	function
(	O
dap_linelen	int
+	O
1	int
,	O
""	pointer
)	O
;	O
yname	pointer
=	O
dap_malloc	function
(	O
dap_linelen	int
+	O
1	int
,	O
""	pointer
)	O
;	O
plotparse	function
(	O
xyvar	pointer
,	O
xyname	pointer
,	O
xname	array
,	O
yname	pointer
)	O
;	O
nmark	int
=	O
dap_list	function
(	O
marks	array
,	O
markv	array
,	O
dap_maxvar	int
)	O
;	O
if	O
(	O
dap_list	function
(	O
xyname	pointer
,	O
xyv	array
,	O
dap_maxvar	int
)	O
!=	O
2	int
)	O
{	O
fprintf	function
(	O
dap_err	pointer
,	O
"(plot) Invalid x and y variable list: %s\n"	pointer
,	O
xyvar	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
if	O
(	O
dap_obs	array
[	O
0	int
]	O
.	O
do_len	pointer
[	O
xyv	array
[	O
0	int
]	O
]	O
!=	O
DBL	O
)	O
{	O
fprintf	function
(	O
dap_err	pointer
,	O
"(plot) x-variable is not double variable: %s\n"	pointer
,	O
dap_obs	array
[	O
0	int
]	O
.	O
do_nam	pointer
[	O
xyv	array
[	O
0	int
]	O
]	O
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
if	O
(	O
dap_obs	array
[	O
0	int
]	O
.	O
do_len	pointer
[	O
xyv	array
[	O
1	int
]	O
]	O
!=	O
DBL	O
)	O
{	O
fprintf	function
(	O
dap_err	pointer
,	O
"(plot) y-variable is not double variable: %s\n"	pointer
,	O
dap_obs	array
[	O
0	int
]	O
.	O
do_nam	pointer
[	O
xyv	array
[	O
1	int
]	O
]	O
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
for	O
(	O
s	int
=	O
0	int
;	O
style	array
[	O
s	int
]	O
==	O
' '	O
;	O
s	int
++	O
)	O
;	O
overlay	int
=	O
0	int
;	O
if	O
(	O
style	array
&&	O
style	array
[	O
s	int
]	O
==	O
'o'	O
)	O
{	O
for	O
(	O
s	int
++	O
;	O
style	array
[	O
s	int
]	O
==	O
' '	O
;	O
s	int
++	O
)	O
;	O
for	O
(	O
;	O
'0'	O
<=	O
style	array
[	O
s	int
]	O
&&	O
style	array
[	O
s	int
]	O
<=	O
'9'	O
;	O
s	int
++	O
)	O
overlay	int
=	O
10	int
*	O
overlay	int
+	O
style	array
[	O
s	int
]	O
-	O
'0'	O
;	O
if	O
(	O
!	O
overlay	int
)	O
overlay	int
=	O
-	O
1	int
;	O
}	O
for	O
(	O
nobs	int
=	O
0	int
,	O
nnan	int
=	O
0	int
,	O
pn	int
=	O
0	int
,	O
more	int
=	O
1	int
;	O
more	int
;	O
)	O
{	O
more	int
=	O
step	function
(	O
)	O
;	O
if	O
(	O
dap_newpart	function
(	O
markv	array
,	O
nmark	int
)	O
)	O
{	O
if	O
(	O
pn	int
<	O
nplots	int
)	O
{	O
plot1	function
(	O
x	double
,	O
y	double
,	O
nobs	int
,	O
xname	array
,	O
yname	pointer
,	O
markv	array
,	O
nmark	int
,	O
p	pointer
,	O
a	double
,	O
pn	int
,	O
style	array
,	O
xfunct	pointer
,	O
yfunct	pointer
,	O
(	O
!	O
more	int
||	O
!	O
overlay	int
||	O
(	O
overlay	int
>	O
0	int
&&	O
!	O
(	O
(	O
pn	int
+	O
1	int
)	O
%	O
overlay	int
)	O
)	O
)	O
)	O
;	O
pn	int
++	O
;	O
if	O
(	O
nnan	int
>	O
0	int
)	O
fprintf	function
(	O
dap_log	pointer
,	O
"(plot) %d NaNs\n"	pointer
,	O
nnan	int
)	O
;	O
}	O
else	O
{	O
fprintf	function
(	O
dap_err	pointer
,	O
"(plot) More plots than specified by nplots (%d)\n"	pointer
,	O
nplots	int
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
nobs	int
=	O
0	int
;	O
nnan	int
=	O
0	int
;	O
}	O
if	O
(	O
nobs	int
<	O
dap_maxval	int
)	O
{	O
x	double
[	O
nobs	int
]	O
=	O
dap_obs	array
[	O
0	int
]	O
.	O
do_dbl	pointer
[	O
xyv	array
[	O
0	int
]	O
]	O
;	O
y	double
[	O
nobs	int
]	O
=	O
dap_obs	array
[	O
0	int
]	O
.	O
do_dbl	pointer
[	O
xyv	array
[	O
1	int
]	O
]	O
;	O
if	O
(	O
finite	function
(	O
x	double
[	O
nobs	int
]	O
)	O
&&	O
finite	function
(	O
y	double
[	O
nobs	int
]	O
)	O
)	O
nobs	int
++	O
;	O
else	O
nnan	int
++	O
;	O
}	O
else	O
{	O
fprintf	function
(	O
dap_err	pointer
,	O
"(plot) Too many points\n"	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
}	O
dap_free	function
(	O
x	double
,	O
""	pointer
)	O
;	O
dap_free	function
(	O
y	double
,	O
""	pointer
)	O
;	O
dap_free	function
(	O
markv	array
,	O
""	pointer
)	O
;	O
dap_free	function
(	O
xyname	pointer
,	O
""	pointer
)	O
;	O
dap_free	function
(	O
xname	array
,	O
""	pointer
)	O
;	O
dap_free	function
(	O
yname	pointer
,	O
""	pointer
)	O
;	O
return	O
p	pointer
;	O
}	O
static	O
int	O
dblcmp	function
(	O
double	O
*	O
x	double
,	O
double	O
*	O
y	double
)	O
{	O
if	O
(	O
*	O
x	double
<	O
*	O
y	double
)	O
return	O
-	O
1	int
;	O
if	O
(	O
*	O
x	double
>	O
*	O
y	double
)	O
return	O
1	int
;	O
return	O
0	int
;	O
}	O
static	O
double	O
comb	function
(	O
int	O
n	int
,	O
int	O
k	int
)	O
{	O
double	O
dn	double
,	O
dk	double
;	O
double	O
c	int
;	O
for	O
(	O
c	int
=	O
1.0	int
,	O
dn	double
=	O
(	O
double	O
)	O
n	int
,	O
dk	double
=	O
(	O
double	O
)	O
k	int
;	O
dk	double
>=	O
1.0	int
;	O
dn	double
-=	O
1.0	int
,	O
dk	double
-=	O
1.0	int
)	O
c	int
*=	O
dn	double
/	O
dk	double
;	O
return	O
c	int
;	O
}	O
static	O
double	O
dnmk	double
;	O
static	O
double	O
dkm1	double
;	O
static	O
double	O
orderf	function
(	O
double	O
t	double
)	O
{	O
double	O
x	double
;	O
double	O
tmp1	double
,	O
tmp2	double
;	O
if	O
(	O
t	double
==	O
-	O
1.0	int
||	O
t	double
==	O
1.0	int
)	O
return	O
0.0	int
;	O
tmp1	double
=	O
1.0	int
-	O
t	double
*	O
t	double
;	O
x	double
=	O
t	double
/	O
sqrt	function
(	O
tmp1	double
)	O
;	O
tmp2	double
=	O
dkm1	double
*	O
log	function
(	O
probz	function
(	O
x	double
)	O
)	O
+	O
dnmk	double
*	O
log	function
(	O
probz	function
(	O
-	O
x	double
)	O
)	O
-	O
0.5	int
*	O
x	double
*	O
x	double
;	O
if	O
(	O
finite	function
(	O
tmp2	double
)	O
)	O
return	O
exp	function
(	O
tmp2	double
)	O
*	O
t	double
/	O
(	O
tmp1	double
*	O
tmp1	double
)	O
;	O
return	O
0.0	int
;	O
}	O
static	O
void	O
geta	function
(	O
double	O
a	double
[	O
]	O
,	O
int	O
n	int
)	O
{	O
int	O
k	int
;	O
double	O
dn	double
;	O
double	O
c	int
;	O
if	O
(	O
n	int
<	O
7	int
)	O
{	O
switch	O
(	O
n	int
)	O
{	O
case	O
3	int
:	O
a	double
[	O
0	int
]	O
=	O
0.707107	int
;	O
break	O
;	O
case	O
4	int
:	O
a	double
[	O
0	int
]	O
=	O
0.687155	int
;	O
a	double
[	O
1	int
]	O
=	O
0.166787	int
;	O
break	O
;	O
case	O
5	int
:	O
a	double
[	O
0	int
]	O
=	O
0.664647	int
;	O
a	double
[	O
1	int
]	O
=	O
0.241337	int
;	O
break	O
;	O
case	O
6	int
:	O
a	double
[	O
0	int
]	O
=	O
0.643105	int
;	O
a	double
[	O
1	int
]	O
=	O
0.280635	int
;	O
a	double
[	O
2	int
]	O
=	O
0.0875196	int
;	O
break	O
;	O
}	O
return	O
;	O
}	O
for	O
(	O
k	int
=	O
0	int
;	O
k	int
<	O
n	int
/	O
2	int
;	O
k	int
++	O
)	O
{	O
dnmk	double
=	O
(	O
double	O
)	O
(	O
n	int
-	O
k	int
-	O
1	int
)	O
;	O
dkm1	double
=	O
(	O
double	O
)	O
k	int
;	O
a	double
[	O
k	int
]	O
=	O
(	O
(	O
double	O
)	O
k	int
+	O
1	int
)	O
*	O
comb	function
(	O
n	int
,	O
k	int
+	O
1	int
)	O
*	O
INVSQ2PI	int
*	O
dap_simp	function
(	O
&	O
orderf	function
,	O
-	O
1.0	int
,	O
1.0	int
,	O
NSTEPS	int
)	O
;	O
}	O
dn	double
=	O
(	O
double	O
)	O
n	int
;	O
if	O
(	O
n	int
<=	O
20	int
)	O
{	O
for	O
(	O
a	double
[	O
0	int
]	O
=	O
SQRTHALF	int
;	O
dn	double
>	O
2.0	int
;	O
dn	double
-=	O
2.0	int
)	O
a	double
[	O
0	int
]	O
*=	O
(	O
dn	double
-	O
2.0	int
)	O
/	O
(	O
dn	double
-	O
1.0	int
)	O
;	O
if	O
(	O
dn	double
==	O
2.0	int
)	O
a	double
[	O
0	int
]	O
*=	O
TWOOSQRTPI	int
;	O
else	O
a	double
[	O
0	int
]	O
*=	O
SQRTPI	int
;	O
}	O
else	O
{	O
for	O
(	O
a	double
[	O
0	int
]	O
=	O
SQRTHALF	int
;	O
dn	double
>	O
1.0	int
;	O
dn	double
-=	O
2.0	int
)	O
a	double
[	O
0	int
]	O
*=	O
(	O
dn	double
-	O
1.0	int
)	O
/	O
dn	double
;	O
if	O
(	O
dn	double
==	O
1.0	int
)	O
a	double
[	O
0	int
]	O
*=	O
TWOOSQRTPI	int
;	O
else	O
a	double
[	O
0	int
]	O
*=	O
SQRTPI	int
;	O
}	O
for	O
(	O
c	int
=	O
0.0	int
,	O
k	int
=	O
1	int
;	O
k	int
<	O
n	int
/	O
2	int
;	O
k	int
++	O
)	O
c	int
+=	O
a	double
[	O
k	int
]	O
*	O
a	double
[	O
k	int
]	O
;	O
c	int
=	O
sqrt	function
(	O
(	O
1.0	int
-	O
2.0	int
*	O
a	double
[	O
0	int
]	O
)	O
/	O
(	O
2.0	int
*	O
c	int
)	O
)	O
;	O
a	double
[	O
0	int
]	O
=	O
-	O
sqrt	function
(	O
a	double
[	O
0	int
]	O
)	O
;	O
for	O
(	O
k	int
=	O
1	int
;	O
k	int
<	O
n	int
/	O
2	int
;	O
k	int
++	O
)	O
a	double
[	O
k	int
]	O
*=	O
c	int
;	O
}	O
static	O
double	O
clambda1	array
[	O
3	int
]	O
=	O
{	O
0.118898	int
,	O
0.133414	int
,	O
0.327907	int
}	O
;	O
static	O
double	O
clambda2	array
[	O
6	int
]	O
=	O
{	O
0.480385	int
,	O
0.318828	int
,	O
0.0	int
,	O
-	O
0.0241665	int
,	O
0.00879701	int
,	O
0.002989646	int
}	O
;	O
static	O
double	O
clogmu1	array
[	O
4	int
]	O
=	O
{	O
-	O
0.37542	int
,	O
-	O
0.492145	int
,	O
-	O
1.124332	int
,	O
-	O
0.199422	int
}	O
;	O
static	O
double	O
clogmu2	array
[	O
6	int
]	O
=	O
{	O
-	O
1.91487	int
,	O
-	O
1.37888	int
,	O
-	O
0.04183209	int
,	O
0.1066339	int
,	O
-	O
0.03513666	int
,	O
-	O
0.01504614	int
}	O
;	O
static	O
double	O
clogsigma1	array
[	O
4	int
]	O
=	O
{	O
-	O
3.15805	int
,	O
0.729399	int
,	O
3.01855	int
,	O
1.558776	int
}	O
;	O
static	O
double	O
clogsigma2	array
[	O
7	int
]	O
=	O
{	O
-	O
3.73538	int
,	O
-	O
1.015807	int
,	O
-	O
0.331885	int
,	O
0.1773538	int
,	O
-	O
0.01638782	int
,	O
-	O
0.03215018	int
,	O
0.003852646	int
}	O
;	O
static	O
double	O
au	array
[	O
3	int
]	O
[	O
2	int
]	O
[	O
5	int
]	O
=	O
{	O
{	O
{	O
-	O
1.26233	int
,	O
1.87969	int
,	O
0.0649583	int
,	O
-	O
0.0475604	int
,	O
-	O
0.0139682	int
}	O
,	O
{	O
-	O
0.287696	int
,	O
1.78953	int
,	O
-	O
0.180114	int
,	O
0.0	int
,	O
0.0	int
}	O
}	O
,	O
{	O
{	O
-	O
2.28135	int
,	O
2.26186	int
,	O
0.0	int
,	O
0.0	int
,	O
-	O
0.00865763	int
}	O
,	O
{	O
-	O
1.63638	int
,	O
5.60924	int
,	O
-	O
3.63738	int
,	O
1.08439	int
,	O
0.0	int
}	O
}	O
,	O
{	O
{	O
-	O
3.30623	int
,	O
2.76287	int
,	O
-	O
0.83484	int
,	O
1.20857	int
,	O
-	O
0.507590	int
}	O
,	O
{	O
-	O
5.991908	int
,	O
21.04575	int
,	O
-	O
24.58061	int
,	O
13.78661	int
,	O
-	O
2.835295	int
}	O
}	O
}	O
;	O
static	O
double	O
lowhigh	array
[	O
3	int
]	O
[	O
2	int
]	O
=	O
{	O
{	O
-	O
3.8	int
,	O
8.6	int
}	O
,	O
{	O
-	O
3.0	int
,	O
5.8	int
}	O
,	O
{	O
-	O
4.0	int
,	O
5.4	int
}	O
}	O
;	O
static	O
double	O
poly	function
(	O
double	O
c	int
[	O
]	O
,	O
double	O
x	double
,	O
int	O
n	int
)	O
{	O
double	O
p	pointer
;	O
for	O
(	O
p	pointer
=	O
c	int
[	O
n	int
]	O
;	O
--	O
n	int
>=	O
0	int
;	O
)	O
p	pointer
=	O
p	pointer
*	O
x	double
+	O
c	int
[	O
n	int
]	O
;	O
return	O
p	pointer
;	O
}	O
static	O
double	O
probw	function
(	O
int	O
n	int
,	O
double	O
w0	double
,	O
double	O
a1	double
)	O
{	O
double	O
u	double
;	O
double	O
d	double
,	O
lambda	double
,	O
logmu	double
,	O
logsigma	double
;	O
double	O
y	double
;	O
double	O
eps	double
;	O
int	O
r	double
;	O
if	O
(	O
n	int
==	O
3	int
)	O
return	O
SIXOVERPI	int
*	O
(	O
asin	function
(	O
sqrt	function
(	O
w0	double
)	O
)	O
-	O
asin	function
(	O
sqrt	function
(	O
0.75	int
)	O
)	O
)	O
;	O
if	O
(	O
n	int
>=	O
7	int
)	O
{	O
if	O
(	O
n	int
<=	O
20	int
)	O
d	double
=	O
3.0	int
;	O
else	O
d	double
=	O
5.0	int
;	O
d	double
=	O
log	function
(	O
(	O
double	O
)	O
n	int
)	O
-	O
d	double
;	O
if	O
(	O
n	int
<=	O
20	int
)	O
{	O
lambda	double
=	O
poly	function
(	O
clambda1	array
,	O
d	double
,	O
2	int
)	O
;	O
logmu	double
=	O
poly	function
(	O
clogmu1	array
,	O
d	double
,	O
3	int
)	O
;	O
logsigma	double
=	O
poly	function
(	O
clogsigma1	array
,	O
d	double
,	O
3	int
)	O
;	O
}	O
else	O
{	O
lambda	double
=	O
poly	function
(	O
clambda2	array
,	O
d	double
,	O
5	int
)	O
;	O
logmu	double
=	O
poly	function
(	O
clogmu2	array
,	O
d	double
,	O
5	int
)	O
;	O
logsigma	double
=	O
poly	function
(	O
clogsigma2	array
,	O
d	double
,	O
6	int
)	O
;	O
}	O
y	double
=	O
pow	function
(	O
1.0	int
-	O
w0	double
,	O
lambda	double
)	O
;	O
return	O
probz	function
(	O
-	O
(	O
y	double
-	O
exp	function
(	O
logmu	double
)	O
)	O
/	O
exp	function
(	O
logsigma	double
)	O
)	O
;	O
}	O
else	O
{	O
if	O
(	O
w0	double
>=	O
1.0	int
)	O
return	O
1.0	int
;	O
eps	double
=	O
a1	double
*	O
a1	double
*	O
(	O
1.0	int
+	O
1.0	int
/	O
(	O
(	O
double	O
)	O
(	O
n	int
-	O
1	int
)	O
)	O
)	O
;	O
if	O
(	O
w0	double
<=	O
eps	double
)	O
return	O
0.0	int
;	O
u	double
=	O
log	function
(	O
(	O
w0	double
-	O
eps	double
)	O
/	O
(	O
1.0	int
-	O
w0	double
)	O
)	O
;	O
if	O
(	O
w0	double
<	O
lowhigh	array
[	O
n	int
-	O
4	int
]	O
[	O
0	int
]	O
||	O
w0	double
>	O
lowhigh	array
[	O
n	int
-	O
4	int
]	O
[	O
1	int
]	O
)	O
return	O
0.0	int
/	O
0.0	int
;	O
if	O
(	O
u	double
<	O
1.4	int
)	O
r	double
=	O
0	int
;	O
else	O
{	O
r	double
=	O
1	int
;	O
u	double
=	O
log	function
(	O
u	double
)	O
;	O
if	O
(	O
!	O
finite	function
(	O
u	double
)	O
)	O
return	O
0.0	int
/	O
0.0	int
;	O
}	O
u	double
=	O
poly	function
(	O
au	array
[	O
n	int
-	O
4	int
]	O
[	O
r	double
]	O
,	O
u	double
,	O
4	int
)	O
;	O
if	O
(	O
r	double
)	O
u	double
=	O
exp	function
(	O
u	double
)	O
;	O
u	double
=	O
exp	function
(	O
u	double
)	O
;	O
return	O
SIXOVERPI	int
*	O
(	O
asin	function
(	O
sqrt	function
(	O
(	O
u	double
+	O
0.75	int
)	O
/	O
(	O
1.0	int
+	O
u	double
)	O
)	O
)	O
-	O
asin	function
(	O
sqrt	function
(	O
0.75	int
)	O
)	O
)	O
;	O
}	O
}	O
static	O
void	O
normal1	function
(	O
double	O
x	double
[	O
]	O
,	O
double	O
y	double
[	O
]	O
,	O
int	O
nobs	int
,	O
char	O
varname	array
[	O
]	O
,	O
char	O
varlabel	array
[	O
]	O
,	O
int	O
markv	array
[	O
]	O
,	O
int	O
nmark	int
,	O
pict	struct
*	O
p	pointer
,	O
pict	struct
*	O
l	pointer
,	O
pict	struct
*	O
a	double
,	O
int	O
pn	int
)	O
{	O
int	O
titlelen	int
;	O
int	O
r	double
;	O
double	O
dr	double
;	O
double	O
dnobsp25	double
;	O
double	O
sum	double
;	O
double	O
ss	double
;	O
double	O
vtmp	double
;	O
double	O
tmp	double
;	O
double	O
sd	double
;	O
double	O
minx	double
,	O
maxx	double
;	O
double	O
*	O
swa	pointer
;	O
int	O
k	int
;	O
double	O
w	double
;	O
double	O
prob	double
;	O
int	O
v	int
;	O
char	O
*	O
caption	array
;	O
int	O
(	O
*	O
cmp	pointer
)	O
(	O
)	O
;	O
dap_swap	function
(	O
)	O
;	O
cmp	pointer
=	O
&	O
dblcmp	function
;	O
if	O
(	O
dap_title	pointer
)	O
titlelen	int
=	O
strlen	function
(	O
dap_title	pointer
)	O
+	O
1	int
;	O
else	O
titlelen	int
=	O
0	int
;	O
if	O
(	O
p	pointer
)	O
caption	array
=	O
dap_malloc	function
(	O
dap_linelen	int
+	O
titlelen	int
+	O
47	int
,	O
"dap_linelen"	pointer
)	O
;	O
qsort	function
(	O
(	O
void	O
*	O
)	O
y	double
,	O
(	O
size_t	long
)	O
nobs	int
,	O
(	O
size_t	long
)	O
sizeof	O
(	O
double	O
)	O
,	O
cmp	pointer
)	O
;	O
dnobsp25	double
=	O
(	O
(	O
double	O
)	O
nobs	int
)	O
+	O
0.25	int
;	O
for	O
(	O
r	double
=	O
0	int
,	O
sum	double
=	O
0.0	int
,	O
ss	double
=	O
0.0	int
,	O
minx	double
=	O
0.0	int
,	O
maxx	double
=	O
0.0	int
;	O
r	double
<	O
nobs	int
;	O
r	double
++	O
)	O
{	O
dr	double
=	O
(	O
double	O
)	O
r	double
;	O
x	double
[	O
r	double
]	O
=	O
-	O
zpoint	function
(	O
(	O
dr	double
+	O
0.625	int
)	O
/	O
dnobsp25	double
)	O
;	O
if	O
(	O
x	double
[	O
r	double
]	O
<	O
minx	double
)	O
minx	double
=	O
x	double
[	O
r	double
]	O
;	O
if	O
(	O
x	double
[	O
r	double
]	O
>	O
maxx	double
)	O
maxx	double
=	O
x	double
[	O
r	double
]	O
;	O
vtmp	double
=	O
y	double
[	O
r	double
]	O
;	O
if	O
(	O
r	double
)	O
{	O
tmp	double
=	O
sum	double
-	O
dr	double
*	O
vtmp	double
;	O
ss	double
+=	O
tmp	double
*	O
tmp	double
/	O
(	O
dr	double
*	O
(	O
dr	double
+	O
1.0	int
)	O
)	O
;	O
}	O
sum	double
+=	O
vtmp	double
;	O
}	O
sd	double
=	O
sqrt	function
(	O
ss	double
/	O
(	O
(	O
double	O
)	O
(	O
nobs	int
-	O
1	int
)	O
)	O
)	O
;	O
if	O
(	O
sd	double
==	O
0.0	int
)	O
{	O
fprintf	function
(	O
dap_err	pointer
,	O
"(normal1) Zero standard deviation for %s\n"	pointer
,	O
varname	array
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
if	O
(	O
3	int
<=	O
nobs	int
&&	O
nobs	int
<=	O
2000	int
)	O
{	O
swa	pointer
=	O
(	O
double	O
*	O
)	O
dap_malloc	function
(	O
nobs	int
/	O
2	int
*	O
sizeof	O
(	O
double	O
)	O
,	O
""	pointer
)	O
;	O
geta	function
(	O
swa	pointer
,	O
nobs	int
)	O
;	O
for	O
(	O
w	double
=	O
0.0	int
,	O
k	int
=	O
0	int
;	O
k	int
<	O
nobs	int
/	O
2	int
;	O
k	int
++	O
)	O
w	double
+=	O
swa	pointer
[	O
k	int
]	O
*	O
(	O
y	double
[	O
k	int
]	O
-	O
y	double
[	O
nobs	int
-	O
1	int
-	O
k	int
]	O
)	O
;	O
w	double
*=	O
w	double
/	O
ss	double
;	O
if	O
(	O
(	O
prob	double
=	O
probw	function
(	O
nobs	int
,	O
w	double
,	O
swa	pointer
[	O
0	int
]	O
)	O
)	O
<	O
0.001	int
)	O
prob	double
=	O
0.001	int
;	O
dap_free	function
(	O
swa	pointer
,	O
""	pointer
)	O
;	O
if	O
(	O
p	pointer
)	O
sprintf	function
(	O
caption	array
,	O
"q-q plot: W|0| = %.4f, P[W < W|0|] = %.3f"	pointer
,	O
w	double
,	O
prob	double
)	O
;	O
dap_head	function
(	O
markv	array
,	O
nmark	int
)	O
;	O
fprintf	function
(	O
dap_lst	pointer
,	O
"Shapiro-Wilk test for %s:\nW0 = %.4f, P[W < W0] = %.3f\n"	pointer
,	O
varname	array
,	O
w	double
,	O
prob	double
)	O
;	O
}	O
else	O
if	O
(	O
p	pointer
)	O
strcpy	function
(	O
caption	array
,	O
"q-q plot"	pointer
)	O
;	O
if	O
(	O
p	pointer
&&	O
dap_title	pointer
)	O
{	O
strcat	function
(	O
caption	array
,	O
"\n"	pointer
)	O
;	O
strcat	function
(	O
caption	array
,	O
dap_title	pointer
)	O
;	O
}	O
if	O
(	O
p	pointer
&&	O
nmark	int
)	O
{	O
for	O
(	O
v	int
=	O
0	int
;	O
v	int
<	O
nmark	int
;	O
v	int
++	O
)	O
{	O
strcat	function
(	O
caption	array
,	O
"\n"	pointer
)	O
;	O
if	O
(	O
dap_obs	array
[	O
0	int
]	O
.	O
do_len	pointer
[	O
markv	array
[	O
v	int
]	O
]	O
==	O
DBL	O
)	O
sprintf	function
(	O
caption	array
+	O
strlen	function
(	O
caption	array
)	O
,	O
"%g"	pointer
,	O
dap_obs	array
[	O
0	int
]	O
.	O
do_dbl	pointer
[	O
markv	array
[	O
v	int
]	O
]	O
)	O
;	O
else	O
if	O
(	O
dap_obs	array
[	O
0	int
]	O
.	O
do_len	pointer
[	O
markv	array
[	O
v	int
]	O
]	O
==	O
INT	int
)	O
sprintf	function
(	O
caption	array
+	O
strlen	function
(	O
caption	array
)	O
,	O
"%d"	pointer
,	O
dap_obs	array
[	O
0	int
]	O
.	O
do_int	pointer
[	O
markv	array
[	O
v	int
]	O
]	O
)	O
;	O
else	O
strcat	function
(	O
caption	array
,	O
dap_obs	array
[	O
0	int
]	O
.	O
do_str	pointer
[	O
markv	array
[	O
v	int
]	O
]	O
)	O
;	O
}	O
}	O
if	O
(	O
p	pointer
)	O
{	O
pict_initpict	function
(	O
NULL	O
,	O
p	pointer
+	O
pn	int
)	O
;	O
pict_initpict	function
(	O
p	pointer
+	O
pn	int
,	O
l	pointer
+	O
pn	int
)	O
;	O
pict_initpict	function
(	O
l	pointer
+	O
pn	int
,	O
a	double
+	O
pn	int
)	O
;	O
for	O
(	O
r	double
=	O
0	int
;	O
r	double
<	O
nobs	int
;	O
r	double
++	O
)	O
pict_point	function
(	O
p	pointer
+	O
pn	int
,	O
x	double
[	O
r	double
]	O
,	O
y	double
[	O
r	double
]	O
)	O
;	O
strcpy	function
(	O
p	pointer
[	O
pn	int
]	O
.	O
pict_type	array
,	O
"CIRC"	pointer
)	O
;	O
sum	double
/=	O
(	O
double	O
)	O
nobs	int
;	O
strcpy	function
(	O
l	pointer
[	O
pn	int
]	O
.	O
pict_type	array
,	O
"LINE"	pointer
)	O
;	O
pict_line	function
(	O
l	pointer
+	O
pn	int
,	O
minx	double
,	O
sd	double
*	O
minx	double
+	O
sum	double
,	O
maxx	double
,	O
sd	double
*	O
maxx	double
+	O
sum	double
)	O
;	O
p	pointer
[	O
pn	int
]	O
.	O
pict_r	double
=	O
0.05	int
*	O
pict_autoaxes	function
(	O
p	pointer
+	O
pn	int
,	O
"z"	pointer
,	O
varlabel	array
,	O
"-0 NXDIGITS3"	pointer
,	O
NULL	O
,	O
NULL	O
,	O
caption	array
,	O
PORTRAIT	int
)	O
;	O
free	function
(	O
caption	array
)	O
;	O
}	O
dap_swap	function
(	O
)	O
;	O
}	O
pict	struct
*	O
normal	function
(	O
char	O
*	O
fname	array
,	O
char	O
*	O
variable	pointer
,	O
char	O
*	O
marks	array
,	O
int	O
nplots	int
)	O
{	O
char	O
*	O
varname	array
;	O
char	O
*	O
varlabel	array
;	O
int	O
s	int
,	O
t	double
;	O
pict	struct
*	O
p	pointer
;	O
pict	struct
*	O
l	pointer
;	O
pict	struct
*	O
a	double
;	O
int	O
*	O
markv	array
;	O
int	O
nmark	int
;	O
int	O
nobs	int
;	O
int	O
nnan	int
;	O
double	O
*	O
x	double
,	O
*	O
y	double
;	O
int	O
pn	int
;	O
int	O
vy	int
;	O
int	O
more	int
;	O
varname	array
=	O
dap_malloc	function
(	O
dap_namelen	int
+	O
1	int
,	O
""	pointer
)	O
;	O
varlabel	array
=	O
dap_malloc	function
(	O
dap_linelen	int
+	O
1	int
,	O
""	pointer
)	O
;	O
markv	array
=	O
(	O
int	O
*	O
)	O
dap_malloc	function
(	O
sizeof	O
(	O
int	O
)	O
*	O
dap_maxvar	int
,	O
""	pointer
)	O
;	O
if	O
(	O
nplots	int
)	O
{	O
p	pointer
=	O
(	O
pict	struct
*	O
)	O
dap_malloc	function
(	O
3	int
*	O
nplots	int
*	O
sizeof	O
(	O
pict	struct
)	O
,	O
""	pointer
)	O
;	O
l	pointer
=	O
p	pointer
+	O
nplots	int
;	O
a	double
=	O
p	pointer
+	O
2	int
*	O
nplots	int
;	O
}	O
else	O
p	pointer
=	O
(	O
pict	struct
*	O
)	O
NULL	O
;	O
x	double
=	O
(	O
double	O
*	O
)	O
dap_malloc	function
(	O
dap_maxval	int
*	O
sizeof	O
(	O
double	O
)	O
,	O
""	pointer
)	O
;	O
y	double
=	O
(	O
double	O
*	O
)	O
dap_malloc	function
(	O
dap_maxval	int
*	O
sizeof	O
(	O
double	O
)	O
,	O
""	pointer
)	O
;	O
if	O
(	O
!	O
variable	pointer
)	O
{	O
fputs	function
(	O
"(normal) No variable specified.\n"	pointer
,	O
dap_err	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
for	O
(	O
t	double
=	O
0	int
;	O
variable	pointer
[	O
t	double
]	O
==	O
' '	O
;	O
t	double
++	O
)	O
;	O
for	O
(	O
s	int
=	O
0	int
;	O
variable	pointer
[	O
t	double
]	O
&&	O
variable	pointer
[	O
t	double
]	O
!=	O
' '	O
&&	O
variable	pointer
[	O
t	double
]	O
!=	O
'`'	O
;	O
t	double
++	O
)	O
{	O
if	O
(	O
s	int
<	O
dap_namelen	int
)	O
varname	array
[	O
s	int
++	O
]	O
=	O
variable	pointer
[	O
t	double
]	O
;	O
else	O
{	O
fprintf	function
(	O
dap_err	pointer
,	O
"(normal) Variable name too long: %s\n"	pointer
,	O
variable	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
}	O
varname	array
[	O
s	int
]	O
=	O
'\0'	O
;	O
while	O
(	O
variable	pointer
[	O
t	double
]	O
==	O
' '	O
)	O
t	double
++	O
;	O
s	int
=	O
0	int
;	O
if	O
(	O
variable	pointer
[	O
t	double
]	O
==	O
'`'	O
)	O
{	O
for	O
(	O
t	double
++	O
;	O
variable	pointer
[	O
t	double
]	O
&&	O
variable	pointer
[	O
t	double
]	O
!=	O
' '	O
&&	O
variable	pointer
[	O
t	double
]	O
!=	O
'`'	O
;	O
t	double
++	O
)	O
{	O
if	O
(	O
s	int
<	O
dap_linelen	int
)	O
varlabel	array
[	O
s	int
++	O
]	O
=	O
variable	pointer
[	O
t	double
]	O
;	O
else	O
{	O
fprintf	function
(	O
dap_err	pointer
,	O
"(normal) Variable label too long: %s\n"	pointer
,	O
variable	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
}	O
varlabel	array
[	O
s	int
]	O
=	O
'\0'	O
;	O
}	O
else	O
strcpy	function
(	O
varlabel	array
,	O
varname	array
)	O
;	O
if	O
(	O
!	O
fname	array
)	O
{	O
fputs	function
(	O
"(normal) No dataset name given.\n"	pointer
,	O
dap_err	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
inset	function
(	O
fname	array
)	O
;	O
nmark	int
=	O
dap_list	function
(	O
marks	array
,	O
markv	array
,	O
dap_maxvar	int
)	O
;	O
if	O
(	O
(	O
vy	int
=	O
dap_varnum	function
(	O
varname	array
)	O
)	O
<	O
0	int
)	O
{	O
fprintf	function
(	O
dap_err	pointer
,	O
"(normal) Variable unknown: %s\n"	pointer
,	O
varname	array
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
if	O
(	O
dap_obs	array
[	O
0	int
]	O
.	O
do_len	pointer
[	O
vy	int
]	O
!=	O
DBL	O
)	O
{	O
fprintf	function
(	O
dap_err	pointer
,	O
"(normal) Variable is not double variable: %s\n"	pointer
,	O
varname	array
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
for	O
(	O
nobs	int
=	O
0	int
,	O
nnan	int
=	O
0	int
,	O
pn	int
=	O
0	int
,	O
more	int
=	O
1	int
;	O
more	int
;	O
)	O
{	O
more	int
=	O
step	function
(	O
)	O
;	O
if	O
(	O
dap_newpart	function
(	O
markv	array
,	O
nmark	int
)	O
)	O
{	O
if	O
(	O
!	O
nplots	int
||	O
pn	int
<	O
nplots	int
)	O
{	O
normal1	function
(	O
x	double
,	O
y	double
,	O
nobs	int
,	O
varname	array
,	O
varlabel	array
,	O
markv	array
,	O
nmark	int
,	O
p	pointer
,	O
l	pointer
,	O
a	double
,	O
pn	int
++	O
)	O
;	O
if	O
(	O
nnan	int
>	O
0	int
)	O
fprintf	function
(	O
dap_log	pointer
,	O
"(normal) %d NaNs\n"	pointer
,	O
nnan	int
)	O
;	O
}	O
else	O
{	O
fprintf	function
(	O
dap_err	pointer
,	O
"(normal) More plots than specified by nplots (%d)\n"	pointer
,	O
nplots	int
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
nobs	int
=	O
0	int
;	O
nnan	int
=	O
0	int
;	O
}	O
if	O
(	O
nobs	int
<	O
dap_maxval	int
)	O
{	O
y	double
[	O
nobs	int
]	O
=	O
dap_obs	array
[	O
0	int
]	O
.	O
do_dbl	pointer
[	O
vy	int
]	O
;	O
if	O
(	O
finite	function
(	O
y	double
[	O
nobs	int
]	O
)	O
)	O
nobs	int
++	O
;	O
else	O
nnan	int
++	O
;	O
}	O
else	O
{	O
fprintf	function
(	O
dap_err	pointer
,	O
"(normal) Too many points\n"	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
}	O
dap_free	function
(	O
x	double
,	O
""	pointer
)	O
;	O
dap_free	function
(	O
y	double
,	O
""	pointer
)	O
;	O
dap_free	function
(	O
varname	array
,	O
""	pointer
)	O
;	O
dap_free	function
(	O
varlabel	array
,	O
""	pointer
)	O
;	O
dap_free	function
(	O
markv	array
,	O
""	pointer
)	O
;	O
return	O
p	pointer
;	O
}	O
static	O
double	O
arint	function
(	O
double	O
x	double
)	O
{	O
double	O
i	int
;	O
if	O
(	O
fabs	function
(	O
i	int
=	O
rint	function
(	O
x	double
)	O
)	O
==	O
0.0	int
)	O
return	O
0.0	int
;	O
else	O
return	O
i	int
;	O
}	O
static	O
void	O
histo1	function
(	O
double	O
x	double
[	O
]	O
,	O
double	O
xw	array
[	O
]	O
[	O
2	int
]	O
,	O
int	O
nobs	int
,	O
int	O
varv	array
[	O
]	O
,	O
int	O
nbars	int
,	O
char	O
xname	array
[	O
]	O
,	O
char	O
*	O
style	array
,	O
double	O
(	O
*	O
xfunct	pointer
)	O
(	O
)	O
,	O
int	O
markv	array
[	O
]	O
,	O
int	O
nmark	int
,	O
pict	struct
*	O
p	pointer
,	O
pict	struct
*	O
a	double
,	O
int	O
pn	int
)	O
{	O
int	O
titlelen	int
;	O
char	O
*	O
caption	array
;	O
int	O
s	int
;	O
int	O
w	double
;	O
char	O
*	O
word	pointer
;	O
char	O
*	O
axspec	array
;	O
double	O
*	O
h	pointer
;	O
double	O
*	O
part	pointer
;	O
int	O
equal	int
;	O
int	O
height	int
;	O
int	O
whole	int
;	O
double	O
min	double
,	O
max	double
;	O
double	O
xlen	double
,	O
xspace	double
;	O
static	O
char	O
htitle	array
[	O
19	int
]	O
;	O
double	O
width	double
;	O
double	O
dnobs	double
;	O
double	O
dnbars	double
;	O
int	O
b	double
;	O
int	O
xn	int
;	O
int	O
xnm1	int
;	O
int	O
v	int
;	O
double	O
maxy	double
;	O
int	O
(	O
*	O
cmp	pointer
)	O
(	O
)	O
;	O
cmp	pointer
=	O
&	O
dblcmp	function
;	O
if	O
(	O
dap_title	pointer
)	O
titlelen	int
=	O
strlen	function
(	O
dap_title	pointer
)	O
+	O
1	int
;	O
else	O
titlelen	int
=	O
0	int
;	O
caption	array
=	O
dap_malloc	function
(	O
titlelen	int
+	O
dap_linelen	int
+	O
1	int
,	O
""	pointer
)	O
;	O
axspec	array
=	O
dap_malloc	function
(	O
strlen	function
(	O
style	array
)	O
+	O
1	int
,	O
""	pointer
)	O
;	O
word	pointer
=	O
dap_malloc	function
(	O
dap_namelen	int
+	O
1	int
,	O
""	pointer
)	O
;	O
h	pointer
=	O
(	O
double	O
*	O
)	O
dap_malloc	function
(	O
sizeof	O
(	O
double	O
)	O
*	O
dap_maxbars	int
,	O
""	pointer
)	O
;	O
part	pointer
=	O
(	O
double	O
*	O
)	O
dap_malloc	function
(	O
sizeof	O
(	O
double	O
)	O
*	O
(	O
dap_maxbars	int
+	O
1	int
)	O
,	O
""	pointer
)	O
;	O
if	O
(	O
!	O
nbars	int
)	O
{	O
fputs	function
(	O
"(histo1) Number of bars is zero.\n"	pointer
,	O
dap_err	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
equal	int
=	O
1	int
;	O
height	int
=	O
UNSPEC	int
;	O
whole	int
=	O
0	int
;	O
htitle	array
[	O
0	int
]	O
=	O
'\0'	O
;	O
if	O
(	O
x	double
)	O
{	O
qsort	function
(	O
(	O
void	O
*	O
)	O
x	double
,	O
(	O
size_t	long
)	O
nobs	int
,	O
(	O
size_t	long
)	O
sizeof	O
(	O
double	O
)	O
,	O
cmp	pointer
)	O
;	O
part	pointer
[	O
0	int
]	O
=	O
x	double
[	O
0	int
]	O
;	O
part	pointer
[	O
nbars	int
]	O
=	O
x	double
[	O
nobs	int
-	O
1	int
]	O
;	O
}	O
else	O
{	O
qsort	function
(	O
(	O
void	O
*	O
)	O
xw	array
,	O
(	O
size_t	long
)	O
nobs	int
,	O
(	O
size_t	long
)	O
(	O
2	int
*	O
sizeof	O
(	O
double	O
)	O
)	O
,	O
cmp	pointer
)	O
;	O
part	pointer
[	O
0	int
]	O
=	O
xw	array
[	O
0	int
]	O
[	O
0	int
]	O
;	O
part	pointer
[	O
nbars	int
]	O
=	O
xw	array
[	O
nobs	int
-	O
1	int
]	O
[	O
0	int
]	O
;	O
}	O
maxy	double
=	O
0.0	int
;	O
axspec	array
[	O
0	int
]	O
=	O
'\0'	O
;	O
if	O
(	O
style	array
)	O
{	O
for	O
(	O
s	int
=	O
0	int
;	O
style	array
[	O
s	int
]	O
==	O
' '	O
;	O
s	int
++	O
)	O
;	O
while	O
(	O
style	array
[	O
s	int
]	O
)	O
{	O
for	O
(	O
w	double
=	O
0	int
;	O
style	array
[	O
s	int
]	O
&&	O
style	array
[	O
s	int
]	O
!=	O
' '	O
;	O
)	O
{	O
if	O
(	O
w	double
<	O
dap_namelen	int
)	O
word	pointer
[	O
w	double
++	O
]	O
=	O
style	array
[	O
s	int
++	O
]	O
;	O
else	O
{	O
word	pointer
[	O
w	double
]	O
=	O
'\0'	O
;	O
fprintf	function
(	O
dap_err	pointer
,	O
"(histo1) Style word too long: %s\n"	pointer
,	O
word	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
}	O
word	pointer
[	O
w	double
]	O
=	O
'\0'	O
;	O
if	O
(	O
!	O
strcmp	function
(	O
word	pointer
,	O
"EQUAL"	pointer
)	O
)	O
equal	int
=	O
1	int
;	O
else	O
if	O
(	O
!	O
strcmp	function
(	O
word	pointer
,	O
"VARIABLE"	pointer
)	O
)	O
equal	int
=	O
0	int
;	O
else	O
if	O
(	O
!	O
strcmp	function
(	O
word	pointer
,	O
"COUNT"	pointer
)	O
)	O
height	int
=	O
COUNT	int
;	O
else	O
if	O
(	O
!	O
strcmp	function
(	O
word	pointer
,	O
"PERCENT"	pointer
)	O
)	O
height	int
=	O
PERCENT	int
;	O
else	O
if	O
(	O
!	O
strcmp	function
(	O
word	pointer
,	O
"FRACTION"	pointer
)	O
)	O
height	int
=	O
FRACTION	int
;	O
else	O
if	O
(	O
!	O
strcmp	function
(	O
word	pointer
,	O
"ROUND"	pointer
)	O
)	O
whole	int
=	O
1	int
;	O
else	O
{	O
strcat	function
(	O
axspec	array
,	O
word	pointer
)	O
;	O
strcat	function
(	O
axspec	array
,	O
" "	pointer
)	O
;	O
if	O
(	O
!	O
strncmp	function
(	O
word	pointer
,	O
"MINX"	pointer
,	O
4	int
)	O
)	O
{	O
if	O
(	O
sscanf	function
(	O
word	pointer
+	O
4	int
,	O
"%lf"	pointer
,	O
&	O
part	pointer
[	O
0	int
]	O
)	O
!=	O
1	int
)	O
{	O
fprintf	function
(	O
dap_err	pointer
,	O
"(histo1) bad MINX specification: %s\n"	pointer
,	O
word	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
}	O
else	O
if	O
(	O
!	O
strncmp	function
(	O
word	pointer
,	O
"MAXX"	pointer
,	O
4	int
)	O
)	O
{	O
if	O
(	O
sscanf	function
(	O
word	pointer
+	O
4	int
,	O
"%lf"	pointer
,	O
&	O
part	pointer
[	O
nbars	int
]	O
)	O
!=	O
1	int
)	O
{	O
fprintf	function
(	O
dap_err	pointer
,	O
"(histo1) bad MAXX specification: %s\n"	pointer
,	O
word	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
}	O
}	O
while	O
(	O
style	array
[	O
s	int
]	O
==	O
' '	O
)	O
s	int
++	O
;	O
}	O
}	O
if	O
(	O
equal	int
)	O
{	O
switch	O
(	O
height	int
)	O
{	O
case	O
UNSPEC	int
:	O
case	O
COUNT	int
:	O
strcpy	function
(	O
htitle	array
,	O
"Count"	pointer
)	O
;	O
break	O
;	O
case	O
PERCENT	int
:	O
strcpy	function
(	O
htitle	array
,	O
"Percent"	pointer
)	O
;	O
break	O
;	O
case	O
FRACTION	int
:	O
strcpy	function
(	O
htitle	array
,	O
"Fraction"	pointer
)	O
;	O
break	O
;	O
}	O
}	O
else	O
{	O
switch	O
(	O
height	int
)	O
{	O
case	O
COUNT	int
:	O
fputs	function
(	O
"(histo1) Can't use count with variable width bars.\n"	pointer
,	O
dap_err	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
case	O
PERCENT	int
:	O
strcpy	function
(	O
htitle	array
,	O
"Density (Percent)"	pointer
)	O
;	O
break	O
;	O
case	O
UNSPEC	int
:	O
case	O
FRACTION	int
:	O
strcpy	function
(	O
htitle	array
,	O
"Density (Fraction)"	pointer
)	O
;	O
break	O
;	O
}	O
}	O
dnobs	double
=	O
(	O
double	O
)	O
nobs	int
;	O
dnbars	double
=	O
(	O
double	O
)	O
nbars	int
;	O
if	O
(	O
whole	int
)	O
{	O
xlen	double
=	O
1e5	int
/	O
(	O
part	pointer
[	O
nbars	int
]	O
-	O
part	pointer
[	O
0	int
]	O
)	O
;	O
xlen	double
=	O
(	O
arint	function
(	O
xlen	double
*	O
part	pointer
[	O
nbars	int
]	O
)	O
-	O
arint	function
(	O
xlen	double
*	O
part	pointer
[	O
0	int
]	O
)	O
)	O
/	O
xlen	double
;	O
if	O
(	O
xlen	double
>=	O
1.0	int
)	O
{	O
for	O
(	O
xspace	double
=	O
1.0	int
;	O
dnbars	double
*	O
xspace	double
<	O
xlen	double
;	O
xspace	double
*=	O
dnbars	double
)	O
;	O
xspace	double
*=	O
ceil	function
(	O
xlen	double
/	O
xspace	double
)	O
/	O
dnbars	double
;	O
}	O
else	O
{	O
for	O
(	O
xspace	double
=	O
0.1	int
;	O
xspace	double
/	O
nbars	int
>	O
xlen	double
;	O
xspace	double
/=	O
nbars	int
)	O
;	O
xspace	double
*=	O
ceil	function
(	O
xlen	double
/	O
xspace	double
)	O
/	O
dnbars	double
;	O
}	O
part	pointer
[	O
0	int
]	O
=	O
floor	function
(	O
part	pointer
[	O
0	int
]	O
/	O
xspace	double
)	O
*	O
xspace	double
;	O
part	pointer
[	O
nbars	int
]	O
=	O
ceil	function
(	O
part	pointer
[	O
nbars	int
]	O
/	O
xspace	double
)	O
*	O
xspace	double
;	O
}	O
if	O
(	O
equal	int
)	O
{	O
width	double
=	O
(	O
part	pointer
[	O
nbars	int
]	O
-	O
part	pointer
[	O
0	int
]	O
)	O
/	O
dnbars	double
;	O
for	O
(	O
b	double
=	O
1	int
;	O
b	double
<	O
nbars	int
;	O
b	double
++	O
)	O
part	pointer
[	O
b	double
]	O
=	O
part	pointer
[	O
0	int
]	O
+	O
width	double
*	O
(	O
(	O
double	O
)	O
b	double
)	O
;	O
for	O
(	O
b	double
=	O
0	int
;	O
b	double
<	O
nbars	int
;	O
b	double
++	O
)	O
h	pointer
[	O
b	double
]	O
=	O
0.0	int
;	O
for	O
(	O
xn	int
=	O
0	int
,	O
b	double
=	O
0	int
;	O
xn	int
<	O
nobs	int
;	O
xn	int
++	O
)	O
{	O
if	O
(	O
x	double
)	O
{	O
while	O
(	O
b	double
<	O
nbars	int
&&	O
x	double
[	O
xn	int
]	O
>	O
part	pointer
[	O
b	double
+	O
1	int
]	O
)	O
b	double
++	O
;	O
h	pointer
[	O
b	double
]	O
+=	O
1.0	int
;	O
}	O
else	O
{	O
while	O
(	O
b	double
<	O
nbars	int
&&	O
xw	array
[	O
xn	int
]	O
[	O
0	int
]	O
>	O
part	pointer
[	O
b	double
+	O
1	int
]	O
)	O
b	double
++	O
;	O
h	pointer
[	O
b	double
]	O
+=	O
xw	array
[	O
xn	int
]	O
[	O
1	int
]	O
;	O
}	O
}	O
for	O
(	O
b	double
=	O
0	int
;	O
b	double
<	O
nbars	int
;	O
b	double
++	O
)	O
{	O
switch	O
(	O
height	int
)	O
{	O
case	O
PERCENT	int
:	O
h	pointer
[	O
b	double
]	O
*=	O
100.0	int
;	O
case	O
FRACTION	int
:	O
h	pointer
[	O
b	double
]	O
/=	O
dnobs	double
;	O
break	O
;	O
default	O
:	O
break	O
;	O
}	O
}	O
}	O
else	O
{	O
for	O
(	O
b	double
=	O
1	int
,	O
xnm1	int
=	O
0	int
;	O
b	double
<	O
nbars	int
;	O
b	double
++	O
)	O
{	O
xn	int
=	O
(	O
int	O
)	O
rint	function
(	O
dnobs	double
*	O
(	O
(	O
double	O
)	O
b	double
)	O
/	O
dnbars	double
)	O
;	O
if	O
(	O
x	double
)	O
part	pointer
[	O
b	double
]	O
=	O
x	double
[	O
xn	int
]	O
;	O
else	O
part	pointer
[	O
b	double
]	O
=	O
xw	array
[	O
xn	int
]	O
[	O
0	int
]	O
;	O
if	O
(	O
part	pointer
[	O
b	double
]	O
>	O
part	pointer
[	O
b	double
-	O
1	int
]	O
)	O
h	pointer
[	O
b	double
]	O
=	O
(	O
(	O
double	O
)	O
(	O
xn	int
-	O
xnm1	int
)	O
)	O
/	O
(	O
(	O
part	pointer
[	O
b	double
]	O
-	O
part	pointer
[	O
b	double
-	O
1	int
]	O
)	O
*	O
dnobs	double
)	O
;	O
else	O
h	pointer
[	O
b	double
]	O
=	O
0.0	int
;	O
if	O
(	O
height	int
==	O
PERCENT	int
)	O
h	pointer
[	O
b	double
]	O
*=	O
100.0	int
;	O
xnm1	int
=	O
xn	int
;	O
}	O
}	O
pict_initpict	function
(	O
NULL	O
,	O
p	pointer
+	O
pn	int
)	O
;	O
pict_initpict	function
(	O
p	pointer
+	O
pn	int
,	O
a	double
+	O
pn	int
)	O
;	O
for	O
(	O
b	double
=	O
0	int
;	O
b	double
<	O
nbars	int
;	O
b	double
++	O
)	O
pict_rectangle	function
(	O
p	pointer
+	O
pn	int
,	O
part	pointer
[	O
b	double
]	O
,	O
0.0	int
,	O
part	pointer
[	O
b	double
+	O
1	int
]	O
-	O
part	pointer
[	O
b	double
]	O
,	O
h	pointer
[	O
b	double
]	O
)	O
;	O
caption	array
[	O
0	int
]	O
=	O
'\0'	O
;	O
if	O
(	O
dap_title	pointer
)	O
strcpy	function
(	O
caption	array
,	O
dap_title	pointer
)	O
;	O
if	O
(	O
nmark	int
)	O
{	O
if	O
(	O
dap_title	pointer
)	O
strcat	function
(	O
caption	array
,	O
"\n"	pointer
)	O
;	O
for	O
(	O
v	int
=	O
0	int
;	O
v	int
<	O
nmark	int
;	O
v	int
++	O
)	O
{	O
if	O
(	O
v	int
)	O
strcat	function
(	O
caption	array
,	O
" "	pointer
)	O
;	O
if	O
(	O
dap_obs	array
[	O
0	int
]	O
.	O
do_len	pointer
[	O
markv	array
[	O
v	int
]	O
]	O
==	O
DBL	O
)	O
sprintf	function
(	O
caption	array
+	O
strlen	function
(	O
caption	array
)	O
,	O
"%g"	pointer
,	O
dap_obs	array
[	O
0	int
]	O
.	O
do_dbl	pointer
[	O
markv	array
[	O
v	int
]	O
]	O
)	O
;	O
else	O
if	O
(	O
dap_obs	array
[	O
0	int
]	O
.	O
do_len	pointer
[	O
markv	array
[	O
v	int
]	O
]	O
==	O
INT	int
)	O
sprintf	function
(	O
caption	array
+	O
strlen	function
(	O
caption	array
)	O
,	O
"%d"	pointer
,	O
dap_obs	array
[	O
0	int
]	O
.	O
do_int	pointer
[	O
markv	array
[	O
v	int
]	O
]	O
)	O
;	O
else	O
strcat	function
(	O
caption	array
,	O
dap_obs	array
[	O
0	int
]	O
.	O
do_str	pointer
[	O
markv	array
[	O
v	int
]	O
]	O
)	O
;	O
}	O
}	O
pict_autoaxes	function
(	O
p	pointer
+	O
pn	int
,	O
xname	array
,	O
htitle	array
,	O
axspec	array
,	O
xfunct	pointer
,	O
NULL	O
,	O
caption	array
,	O
PORTRAIT	int
)	O
;	O
dap_free	function
(	O
caption	array
,	O
""	pointer
)	O
;	O
dap_free	function
(	O
axspec	array
,	O
""	pointer
)	O
;	O
dap_free	function
(	O
word	pointer
,	O
""	pointer
)	O
;	O
dap_free	function
(	O
h	pointer
,	O
""	pointer
)	O
;	O
dap_free	function
(	O
part	pointer
,	O
""	pointer
)	O
;	O
}	O
pict	struct
*	O
histogram	function
(	O
char	O
*	O
fname	array
,	O
char	O
*	O
vars	pointer
,	O
char	O
*	O
marks	array
,	O
int	O
nbars	int
,	O
char	O
*	O
style	array
,	O
double	O
(	O
*	O
xfunct	pointer
)	O
(	O
)	O
,	O
int	O
nplots	int
)	O
{	O
pict	struct
*	O
p	pointer
;	O
pict	struct
*	O
a	double
;	O
int	O
*	O
markv	array
;	O
int	O
nmark	int
;	O
int	O
varv	array
[	O
2	int
]	O
;	O
int	O
nvar	int
;	O
int	O
nobs	int
;	O
double	O
*	O
x	double
;	O
double	O
(	O
*	O
xw	array
)	O
[	O
2	int
]	O
;	O
char	O
*	O
xwname	pointer
;	O
char	O
*	O
xname	array
;	O
int	O
pn	int
;	O
int	O
v	int
;	O
int	O
mv	int
;	O
int	O
nnan	int
;	O
int	O
more	int
;	O
markv	array
=	O
(	O
int	O
*	O
)	O
dap_malloc	function
(	O
sizeof	O
(	O
int	O
)	O
*	O
dap_maxvar	int
,	O
""	pointer
)	O
;	O
xwname	pointer
=	O
dap_malloc	function
(	O
2	int
*	O
(	O
dap_namelen	int
+	O
1	int
)	O
,	O
""	pointer
)	O
;	O
xname	array
=	O
dap_malloc	function
(	O
dap_linelen	int
+	O
1	int
,	O
""	pointer
)	O
;	O
p	pointer
=	O
(	O
pict	struct
*	O
)	O
dap_malloc	function
(	O
2	int
*	O
nplots	int
*	O
sizeof	O
(	O
pict	struct
)	O
,	O
""	pointer
)	O
;	O
a	double
=	O
p	pointer
+	O
nplots	int
;	O
if	O
(	O
!	O
fname	array
)	O
{	O
fputs	function
(	O
"(histogram) No dataset name given.\n"	pointer
,	O
dap_err	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
inset	function
(	O
fname	array
)	O
;	O
nmark	int
=	O
dap_list	function
(	O
marks	array
,	O
markv	array
,	O
dap_maxvar	int
)	O
;	O
if	O
(	O
!	O
vars	pointer
)	O
{	O
fputs	function
(	O
"(histogram) No variable given.\n"	pointer
,	O
dap_err	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
plotparse	function
(	O
vars	pointer
,	O
xwname	pointer
,	O
xname	array
,	O
NULL	O
)	O
;	O
nvar	int
=	O
dap_list	function
(	O
xwname	pointer
,	O
varv	array
,	O
dap_maxvar	int
)	O
;	O
for	O
(	O
v	int
=	O
0	int
;	O
v	int
<	O
nvar	int
;	O
v	int
++	O
)	O
{	O
if	O
(	O
dap_obs	array
[	O
0	int
]	O
.	O
do_len	pointer
[	O
varv	array
[	O
v	int
]	O
]	O
!=	O
DBL	O
)	O
{	O
fprintf	function
(	O
dap_err	pointer
,	O
"(histogram) Variable is not double variable: %s\n"	pointer
,	O
dap_obs	array
[	O
0	int
]	O
.	O
do_nam	pointer
[	O
varv	array
[	O
v	int
]	O
]	O
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
}	O
if	O
(	O
nvar	int
==	O
1	int
)	O
{	O
x	double
=	O
(	O
double	O
*	O
)	O
dap_malloc	function
(	O
dap_maxval	int
*	O
sizeof	O
(	O
double	O
)	O
,	O
""	pointer
)	O
;	O
xw	array
=	O
(	O
double	O
(	O
*	O
)	O
[	O
2	int
]	O
)	O
NULL	O
;	O
}	O
else	O
if	O
(	O
nvar	int
==	O
2	int
)	O
{	O
xw	array
=	O
(	O
double	O
(	O
*	O
)	O
[	O
2	int
]	O
)	O
dap_malloc	function
(	O
dap_maxval	int
*	O
2	int
*	O
sizeof	O
(	O
double	O
)	O
,	O
""	pointer
)	O
;	O
x	double
=	O
(	O
double	O
*	O
)	O
NULL	O
;	O
}	O
else	O
{	O
fprintf	function
(	O
dap_err	pointer
,	O
"(histogram) Variable list contains more than two variables: %s\n"	pointer
,	O
vars	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
for	O
(	O
nobs	int
=	O
0	int
,	O
nnan	int
=	O
0	int
,	O
pn	int
=	O
0	int
,	O
more	int
=	O
1	int
;	O
more	int
;	O
)	O
{	O
more	int
=	O
step	function
(	O
)	O
;	O
if	O
(	O
dap_newpart	function
(	O
markv	array
,	O
nmark	int
)	O
)	O
{	O
dap_swap	function
(	O
)	O
;	O
if	O
(	O
nnan	int
)	O
{	O
fprintf	function
(	O
dap_log	pointer
,	O
"(histogram) %d missing values for:"	pointer
,	O
nnan	int
)	O
;	O
for	O
(	O
mv	int
=	O
0	int
;	O
mv	int
<	O
nmark	int
;	O
mv	int
++	O
)	O
{	O
putc	function
(	O
' '	O
,	O
dap_log	pointer
)	O
;	O
if	O
(	O
dap_obs	array
[	O
0	int
]	O
.	O
do_len	pointer
[	O
markv	array
[	O
mv	int
]	O
]	O
==	O
DBL	O
)	O
fprintf	function
(	O
dap_log	pointer
,	O
"%g"	pointer
,	O
dap_obs	array
[	O
0	int
]	O
.	O
do_dbl	pointer
[	O
markv	array
[	O
mv	int
]	O
]	O
)	O
;	O
else	O
if	O
(	O
dap_obs	array
[	O
0	int
]	O
.	O
do_len	pointer
[	O
markv	array
[	O
mv	int
]	O
]	O
==	O
INT	int
)	O
fprintf	function
(	O
dap_log	pointer
,	O
"%d"	pointer
,	O
dap_obs	array
[	O
0	int
]	O
.	O
do_int	pointer
[	O
markv	array
[	O
mv	int
]	O
]	O
)	O
;	O
else	O
fputs	function
(	O
dap_obs	array
[	O
0	int
]	O
.	O
do_str	pointer
[	O
markv	array
[	O
mv	int
]	O
]	O
,	O
dap_log	pointer
)	O
;	O
}	O
putc	function
(	O
'\n'	O
,	O
dap_log	pointer
)	O
;	O
}	O
if	O
(	O
nobs	int
)	O
{	O
if	O
(	O
pn	int
<	O
nplots	int
)	O
histo1	function
(	O
x	double
,	O
xw	array
,	O
nobs	int
,	O
varv	array
,	O
nbars	int
,	O
xname	array
,	O
style	array
,	O
xfunct	pointer
,	O
markv	array
,	O
nmark	int
,	O
p	pointer
,	O
a	double
,	O
pn	int
++	O
)	O
;	O
else	O
{	O
fprintf	function
(	O
dap_err	pointer
,	O
"(histogram) More plots than specified by nplots (%d)\n"	pointer
,	O
nplots	int
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
}	O
dap_swap	function
(	O
)	O
;	O
nobs	int
=	O
0	int
;	O
nnan	int
=	O
0	int
;	O
}	O
if	O
(	O
nobs	int
<	O
dap_maxval	int
)	O
{	O
if	O
(	O
nvar	int
==	O
1	int
)	O
{	O
x	double
[	O
nobs	int
]	O
=	O
dap_obs	array
[	O
0	int
]	O
.	O
do_dbl	pointer
[	O
varv	array
[	O
0	int
]	O
]	O
;	O
if	O
(	O
finite	function
(	O
x	double
[	O
nobs	int
]	O
)	O
)	O
nobs	int
++	O
;	O
else	O
nnan	int
++	O
;	O
}	O
else	O
{	O
xw	array
[	O
nobs	int
]	O
[	O
0	int
]	O
=	O
dap_obs	array
[	O
0	int
]	O
.	O
do_dbl	pointer
[	O
varv	array
[	O
0	int
]	O
]	O
;	O
xw	array
[	O
nobs	int
]	O
[	O
1	int
]	O
=	O
dap_obs	array
[	O
0	int
]	O
.	O
do_dbl	pointer
[	O
varv	array
[	O
1	int
]	O
]	O
;	O
if	O
(	O
finite	function
(	O
xw	array
[	O
nobs	int
]	O
[	O
0	int
]	O
)	O
&&	O
finite	function
(	O
xw	array
[	O
nobs	int
]	O
[	O
1	int
]	O
)	O
)	O
nobs	int
++	O
;	O
else	O
nnan	int
++	O
;	O
}	O
}	O
else	O
{	O
fprintf	function
(	O
dap_err	pointer
,	O
"(histogram) Too many points\n"	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
}	O
if	O
(	O
nvar	int
==	O
1	int
)	O
dap_free	function
(	O
x	double
,	O
""	pointer
)	O
;	O
else	O
dap_free	function
(	O
xw	array
,	O
""	pointer
)	O
;	O
dap_free	function
(	O
markv	array
,	O
""	pointer
)	O
;	O
dap_free	function
(	O
xwname	pointer
,	O
""	pointer
)	O
;	O
dap_free	function
(	O
xname	array
,	O
""	pointer
)	O
;	O
return	O
p	pointer
;	O
}	O
pict	struct
*	O
plotlinreg	function
(	O
char	O
*	O
fname	array
,	O
char	O
*	O
ylist0	pointer
,	O
char	O
*	O
x1list0	pointer
,	O
char	O
*	O
style	array
,	O
char	O
*	O
marks	array
,	O
int	O
nmarks	int
,	O
double	O
level	double
)	O
{	O
char	O
*	O
ylist	array
;	O
char	O
*	O
x1list	array
;	O
int	O
l	pointer
;	O
int	O
varv	array
[	O
1	int
]	O
;	O
int	O
typen	int
;	O
int	O
sortord	array
[	O
4	int
]	O
;	O
int	O
s	int
;	O
char	O
*	O
mnsname	pointer
;	O
char	O
*	O
regname	pointer
;	O
char	O
*	O
srtarg	pointer
;	O
char	O
*	O
srtname	pointer
;	O
char	O
*	O
plotvars	pointer
;	O
char	O
*	O
plotmarks	pointer
;	O
pict	struct
*	O
p	pointer
;	O
int	O
pn	int
;	O
char	O
*	O
plotstyle	pointer
;	O
ylist	array
=	O
dap_malloc	function
(	O
strlen	function
(	O
ylist0	pointer
)	O
+	O
1	int
,	O
""	pointer
)	O
;	O
x1list	array
=	O
dap_malloc	function
(	O
strlen	function
(	O
x1list0	pointer
)	O
+	O
1	int
,	O
""	pointer
)	O
;	O
for	O
(	O
l	pointer
=	O
0	int
;	O
ylist0	pointer
[	O
l	pointer
]	O
&&	O
ylist0	pointer
[	O
l	pointer
]	O
!=	O
'`'	O
;	O
l	pointer
++	O
)	O
ylist	array
[	O
l	pointer
]	O
=	O
ylist0	pointer
[	O
l	pointer
]	O
;	O
ylist	array
[	O
l	pointer
]	O
=	O
'\0'	O
;	O
for	O
(	O
l	pointer
=	O
0	int
;	O
x1list0	pointer
[	O
l	pointer
]	O
&&	O
x1list0	pointer
[	O
l	pointer
]	O
!=	O
'`'	O
;	O
l	pointer
++	O
)	O
x1list	array
[	O
l	pointer
]	O
=	O
x1list0	pointer
[	O
l	pointer
]	O
;	O
x1list	array
[	O
l	pointer
]	O
=	O
'\0'	O
;	O
inset	function
(	O
fname	array
)	O
;	O
if	O
(	O
(	O
typen	int
=	O
dap_varnum	function
(	O
"_type_"	pointer
)	O
)	O
<	O
0	int
)	O
{	O
fprintf	function
(	O
dap_err	pointer
,	O
"(plotlinreg) missing type variable in %s\n"	pointer
,	O
fname	array
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
step	function
(	O
)	O
;	O
for	O
(	O
s	int
=	O
0	int
;	O
s	int
<	O
4	int
;	O
s	int
++	O
)	O
sortord	array
[	O
s	int
]	O
=	O
s	int
;	O
if	O
(	O
strcmp	function
(	O
dap_obs	array
[	O
0	int
]	O
.	O
do_str	pointer
[	O
typen	int
]	O
,	O
"LOWER"	pointer
)	O
<	O
0	int
)	O
{	O
sortord	array
[	O
0	int
]	O
=	O
1	int
;	O
sortord	array
[	O
1	int
]	O
=	O
0	int
;	O
}	O
else	O
if	O
(	O
strcmp	function
(	O
dap_obs	array
[	O
0	int
]	O
.	O
do_str	pointer
[	O
typen	int
]	O
,	O
"PRED"	pointer
)	O
<	O
0	int
)	O
;	O
else	O
if	O
(	O
strcmp	function
(	O
dap_obs	array
[	O
0	int
]	O
.	O
do_str	pointer
[	O
typen	int
]	O
,	O
"UPPER"	pointer
)	O
<	O
0	int
)	O
{	O
sortord	array
[	O
1	int
]	O
=	O
2	int
;	O
sortord	array
[	O
2	int
]	O
=	O
1	int
;	O
}	O
else	O
{	O
sortord	array
[	O
1	int
]	O
=	O
3	int
;	O
sortord	array
[	O
2	int
]	O
=	O
1	int
;	O
sortord	array
[	O
3	int
]	O
=	O
2	int
;	O
}	O
dap_list	function
(	O
ylist	array
,	O
varv	array
,	O
1	int
)	O
;	O
dap_list	function
(	O
x1list	array
,	O
varv	array
,	O
1	int
)	O
;	O
mnsname	pointer
=	O
dap_malloc	function
(	O
strlen	function
(	O
fname	array
)	O
+	O
5	int
,	O
""	pointer
)	O
;	O
strcpy	function
(	O
mnsname	pointer
,	O
fname	array
)	O
;	O
strcat	function
(	O
mnsname	pointer
,	O
".mns"	pointer
)	O
;	O
regname	pointer
=	O
dap_malloc	function
(	O
strlen	function
(	O
fname	array
)	O
+	O
5	int
,	O
""	pointer
)	O
;	O
strcpy	function
(	O
regname	pointer
,	O
fname	array
)	O
;	O
strcat	function
(	O
regname	pointer
,	O
".reg"	pointer
)	O
;	O
srtname	pointer
=	O
dap_malloc	function
(	O
strlen	function
(	O
regname	pointer
)	O
+	O
5	int
,	O
""	pointer
)	O
;	O
strcpy	function
(	O
srtname	pointer
,	O
regname	pointer
)	O
;	O
strcat	function
(	O
srtname	pointer
,	O
".srt"	pointer
)	O
;	O
means	function
(	O
fname	array
,	O
x1list	array
,	O
"STEP100"	pointer
,	O
marks	array
)	O
;	O
linreg	function
(	O
fname	array
,	O
ylist	array
,	O
""	pointer
,	O
x1list	array
,	O
marks	array
,	O
mnsname	pointer
,	O
level	double
)	O
;	O
dataset	pointer
(	O
fname	array
,	O
regname	pointer
,	O
"APPEND"	pointer
)	O
;	O
srtarg	pointer
=	O
dap_malloc	function
(	O
strlen	function
(	O
marks	array
)	O
+	O
strlen	function
(	O
x1list	array
)	O
+	O
9	int
,	O
""	pointer
)	O
;	O
strcpy	function
(	O
srtarg	pointer
,	O
marks	array
)	O
;	O
strcat	function
(	O
srtarg	pointer
,	O
" _type_ "	pointer
)	O
;	O
strcat	function
(	O
srtarg	pointer
,	O
x1list	array
)	O
;	O
sort	function
(	O
regname	pointer
,	O
srtarg	pointer
,	O
""	pointer
)	O
;	O
plotvars	pointer
=	O
dap_malloc	function
(	O
strlen	function
(	O
x1list0	pointer
)	O
+	O
strlen	function
(	O
ylist0	pointer
)	O
+	O
2	int
,	O
""	pointer
)	O
;	O
strcpy	function
(	O
plotvars	pointer
,	O
x1list0	pointer
)	O
;	O
strcat	function
(	O
plotvars	pointer
,	O
" "	pointer
)	O
;	O
strcat	function
(	O
plotvars	pointer
,	O
ylist0	pointer
)	O
;	O
plotmarks	pointer
=	O
dap_malloc	function
(	O
strlen	function
(	O
marks	array
)	O
+	O
strlen	function
(	O
"_type_"	pointer
)	O
+	O
2	int
,	O
""	pointer
)	O
;	O
strcpy	function
(	O
plotmarks	pointer
,	O
marks	array
)	O
;	O
strcat	function
(	O
plotmarks	pointer
,	O
" _type_"	pointer
)	O
;	O
plotstyle	pointer
=	O
dap_malloc	function
(	O
strlen	function
(	O
style	array
)	O
+	O
4	int
,	O
""	pointer
)	O
;	O
strcpy	function
(	O
plotstyle	pointer
,	O
"o4 "	pointer
)	O
;	O
strcat	function
(	O
plotstyle	pointer
,	O
style	array
)	O
;	O
p	pointer
=	O
plot	function
(	O
srtname	pointer
,	O
plotvars	pointer
,	O
plotmarks	pointer
,	O
plotstyle	pointer
,	O
NULL	O
,	O
NULL	O
,	O
4	int
*	O
nmarks	int
)	O
;	O
for	O
(	O
pn	int
=	O
0	int
;	O
pn	int
<	O
nmarks	int
;	O
pn	int
++	O
)	O
{	O
strcpy	function
(	O
p	pointer
[	O
4	int
*	O
pn	int
+	O
sortord	array
[	O
0	int
]	O
]	O
.	O
pict_type	array
,	O
"LINE"	pointer
)	O
;	O
strcpy	function
(	O
p	pointer
[	O
4	int
*	O
pn	int
+	O
sortord	array
[	O
2	int
]	O
]	O
.	O
pict_type	array
,	O
"LINE"	pointer
)	O
;	O
strcpy	function
(	O
p	pointer
[	O
4	int
*	O
pn	int
+	O
sortord	array
[	O
3	int
]	O
]	O
.	O
pict_type	array
,	O
"LINE"	pointer
)	O
;	O
p	pointer
[	O
4	int
*	O
pn	int
+	O
sortord	array
[	O
0	int
]	O
]	O
.	O
pict_dash	double
=	O
4.0	int
;	O
p	pointer
[	O
4	int
*	O
pn	int
+	O
sortord	array
[	O
3	int
]	O
]	O
.	O
pict_dash	double
=	O
4.0	int
;	O
}	O
dap_free	function
(	O
ylist	array
,	O
""	pointer
)	O
;	O
dap_free	function
(	O
x1list	array
,	O
""	pointer
)	O
;	O
dap_free	function
(	O
mnsname	pointer
,	O
""	pointer
)	O
;	O
dap_free	function
(	O
regname	pointer
,	O
""	pointer
)	O
;	O
dap_free	function
(	O
srtarg	pointer
,	O
""	pointer
)	O
;	O
dap_free	function
(	O
srtname	pointer
,	O
""	pointer
)	O
;	O
dap_free	function
(	O
plotvars	pointer
,	O
""	pointer
)	O
;	O
dap_free	function
(	O
plotmarks	pointer
,	O
""	pointer
)	O
;	O
dap_free	function
(	O
plotstyle	pointer
,	O
""	pointer
)	O
;	O
return	O
p	pointer
;	O
}	O
pict	struct
*	O
plotlogreg	function
(	O
char	O
*	O
fname	array
,	O
char	O
*	O
yspec0	pointer
,	O
char	O
*	O
x1list0	pointer
,	O
char	O
*	O
style	array
,	O
int	O
ngroups	int
,	O
char	O
*	O
marks	array
,	O
int	O
nmarks	int
,	O
double	O
level	double
)	O
{	O
char	O
*	O
yspec	array
;	O
char	O
*	O
x1list	array
;	O
int	O
varv	array
[	O
3	int
]	O
;	O
char	O
*	O
trlname	pointer
;	O
int	O
trialsn	int
;	O
char	O
varspec	array
[	O
12	int
]	O
;	O
char	O
*	O
grpname	pointer
;	O
char	O
*	O
grparg	pointer
;	O
char	O
*	O
grpvar	pointer
;	O
char	O
*	O
mnsarg	pointer
;	O
char	O
*	O
mnsname	pointer
;	O
char	O
*	O
lgrname	pointer
;	O
char	O
*	O
srtarg	pointer
;	O
char	O
*	O
srtname	pointer
;	O
char	O
*	O
plotvars	pointer
;	O
char	O
*	O
plotmarks	pointer
;	O
char	O
*	O
casevar	pointer
;	O
char	O
*	O
casevar0	pointer
;	O
int	O
c	int
;	O
int	O
cs	int
;	O
pict	struct
*	O
p	pointer
;	O
int	O
pn	int
;	O
char	O
*	O
plotstyle	pointer
;	O
int	O
l0	int
,	O
l	pointer
;	O
yspec	array
=	O
dap_malloc	function
(	O
strlen	function
(	O
yspec0	pointer
)	O
+	O
1	int
,	O
""	pointer
)	O
;	O
x1list	array
=	O
dap_malloc	function
(	O
strlen	function
(	O
x1list0	pointer
)	O
+	O
1	int
,	O
""	pointer
)	O
;	O
for	O
(	O
l0	int
=	O
0	int
,	O
l	pointer
=	O
0	int
;	O
yspec0	pointer
[	O
l0	int
]	O
&&	O
yspec0	pointer
[	O
l0	int
]	O
!=	O
'`'	O
;	O
)	O
yspec	array
[	O
l	pointer
++	O
]	O
=	O
yspec0	pointer
[	O
l0	int
++	O
]	O
;	O
if	O
(	O
yspec0	pointer
[	O
l0	int
]	O
==	O
'`'	O
)	O
{	O
for	O
(	O
l0	int
++	O
;	O
yspec0	pointer
[	O
l0	int
]	O
&&	O
yspec0	pointer
[	O
l0	int
]	O
!=	O
'`'	O
;	O
l0	int
++	O
)	O
;	O
for	O
(	O
l0	int
++	O
;	O
yspec0	pointer
[	O
l0	int
]	O
;	O
)	O
yspec	array
[	O
l	pointer
++	O
]	O
=	O
yspec0	pointer
[	O
l0	int
++	O
]	O
;	O
}	O
yspec	array
[	O
l	pointer
]	O
=	O
'\0'	O
;	O
for	O
(	O
l	pointer
=	O
0	int
;	O
x1list0	pointer
[	O
l	pointer
]	O
&&	O
x1list0	pointer
[	O
l	pointer
]	O
!=	O
'`'	O
;	O
l	pointer
++	O
)	O
x1list	array
[	O
l	pointer
]	O
=	O
x1list0	pointer
[	O
l	pointer
]	O
;	O
x1list	array
[	O
l	pointer
]	O
=	O
'\0'	O
;	O
trlname	pointer
=	O
dap_malloc	function
(	O
strlen	function
(	O
fname	array
)	O
+	O
5	int
,	O
""	pointer
)	O
;	O
strcpy	function
(	O
trlname	pointer
,	O
fname	array
)	O
;	O
strcat	function
(	O
trlname	pointer
,	O
".trl"	pointer
)	O
;	O
grpname	pointer
=	O
dap_malloc	function
(	O
strlen	function
(	O
trlname	pointer
)	O
+	O
5	int
,	O
""	pointer
)	O
;	O
strcpy	function
(	O
grpname	pointer
,	O
trlname	pointer
)	O
;	O
strcat	function
(	O
grpname	pointer
,	O
".grp"	pointer
)	O
;	O
srtname	pointer
=	O
dap_malloc	function
(	O
strlen	function
(	O
grpname	pointer
)	O
+	O
5	int
,	O
""	pointer
)	O
;	O
strcpy	function
(	O
srtname	pointer
,	O
grpname	pointer
)	O
;	O
strcat	function
(	O
srtname	pointer
,	O
".srt"	pointer
)	O
;	O
mnsname	pointer
=	O
dap_malloc	function
(	O
strlen	function
(	O
srtname	pointer
)	O
+	O
5	int
,	O
""	pointer
)	O
;	O
strcpy	function
(	O
mnsname	pointer
,	O
srtname	pointer
)	O
;	O
strcat	function
(	O
mnsname	pointer
,	O
".mns"	pointer
)	O
;	O
lgrname	pointer
=	O
dap_malloc	function
(	O
strlen	function
(	O
fname	array
)	O
+	O
5	int
,	O
""	pointer
)	O
;	O
strcpy	function
(	O
lgrname	pointer
,	O
fname	array
)	O
;	O
strcat	function
(	O
lgrname	pointer
,	O
".lgr"	pointer
)	O
;	O
grparg	pointer
=	O
dap_malloc	function
(	O
strlen	function
(	O
x1list	array
)	O
+	O
14	int
,	O
""	pointer
)	O
;	O
grpvar	pointer
=	O
dap_malloc	function
(	O
strlen	function
(	O
marks	array
)	O
+	O
strlen	function
(	O
x1list	array
)	O
+	O
3	int
,	O
""	pointer
)	O
;	O
casevar	pointer
=	O
dap_malloc	function
(	O
strlen	function
(	O
yspec	array
)	O
+	O
1	int
,	O
""	pointer
)	O
;	O
casevar0	pointer
=	O
dap_malloc	function
(	O
strlen	function
(	O
yspec0	pointer
)	O
+	O
1	int
,	O
""	pointer
)	O
;	O
mnsarg	pointer
=	O
dap_malloc	function
(	O
strlen	function
(	O
yspec	array
)	O
+	O
12	int
+	O
strlen	function
(	O
x1list	array
)	O
,	O
""	pointer
)	O
;	O
srtarg	pointer
=	O
dap_malloc	function
(	O
strlen	function
(	O
marks	array
)	O
+	O
strlen	function
(	O
x1list	array
)	O
+	O
9	int
,	O
""	pointer
)	O
;	O
plotvars	pointer
=	O
dap_malloc	function
(	O
strlen	function
(	O
x1list0	pointer
)	O
+	O
strlen	function
(	O
yspec0	pointer
)	O
+	O
2	int
,	O
""	pointer
)	O
;	O
plotmarks	pointer
=	O
dap_malloc	function
(	O
strlen	function
(	O
marks	array
)	O
+	O
strlen	function
(	O
"_type_"	pointer
)	O
+	O
2	int
,	O
""	pointer
)	O
;	O
inset	function
(	O
fname	array
)	O
;	O
dap_list	function
(	O
x1list	array
,	O
varv	array
,	O
1	int
)	O
;	O
strcpy	function
(	O
grpvar	pointer
,	O
marks	array
)	O
;	O
strcat	function
(	O
grpvar	pointer
,	O
" _"	pointer
)	O
;	O
strcat	function
(	O
grpvar	pointer
,	O
x1list	array
)	O
;	O
strcpy	function
(	O
casevar	pointer
,	O
yspec	array
)	O
;	O
for	O
(	O
cs	int
=	O
0	int
;	O
casevar	pointer
[	O
cs	int
]	O
==	O
' '	O
;	O
cs	int
++	O
)	O
;	O
for	O
(	O
c	int
=	O
0	int
;	O
casevar	pointer
[	O
cs	int
]	O
&&	O
casevar	pointer
[	O
cs	int
]	O
!=	O
' '	O
&&	O
casevar	pointer
[	O
cs	int
]	O
!=	O
'/'	O
;	O
)	O
casevar	pointer
[	O
c	int
++	O
]	O
=	O
casevar	pointer
[	O
cs	int
++	O
]	O
;	O
casevar	pointer
[	O
c	int
]	O
=	O
'\0'	O
;	O
strcpy	function
(	O
casevar0	pointer
,	O
yspec0	pointer
)	O
;	O
for	O
(	O
cs	int
=	O
0	int
;	O
casevar0	pointer
[	O
cs	int
]	O
==	O
' '	O
;	O
cs	int
++	O
)	O
;	O
for	O
(	O
c	int
=	O
0	int
;	O
casevar0	pointer
[	O
cs	int
]	O
&&	O
casevar0	pointer
[	O
cs	int
]	O
!=	O
'/'	O
;	O
)	O
casevar0	pointer
[	O
c	int
++	O
]	O
=	O
casevar0	pointer
[	O
cs	int
++	O
]	O
;	O
casevar0	pointer
[	O
c	int
]	O
=	O
'\0'	O
;	O
inset	function
(	O
fname	array
)	O
;	O
sprintf	function
(	O
varspec	array
,	O
"_ntrials %d"	pointer
,	O
DBL	O
)	O
;	O
trialsn	int
=	O
dap_vd	function
(	O
varspec	array
,	O
0	int
)	O
;	O
outset	function
(	O
trlname	pointer
,	O
""	pointer
)	O
;	O
dap_parsey	function
(	O
yspec	array
,	O
varv	array
)	O
;	O
while	O
(	O
step	function
(	O
)	O
)	O
{	O
if	O
(	O
varv	array
[	O
1	int
]	O
>=	O
0	int
)	O
dap_obs	array
[	O
0	int
]	O
.	O
do_dbl	pointer
[	O
trialsn	int
]	O
=	O
dap_obs	array
[	O
0	int
]	O
.	O
do_dbl	pointer
[	O
varv	array
[	O
1	int
]	O
]	O
;	O
else	O
dap_obs	array
[	O
0	int
]	O
.	O
do_dbl	pointer
[	O
trialsn	int
]	O
=	O
-	O
varv	array
[	O
1	int
]	O
;	O
output	function
(	O
)	O
;	O
}	O
strcpy	function
(	O
grparg	pointer
,	O
x1list	array
)	O
;	O
sprintf	function
(	O
grparg	pointer
+	O
strlen	function
(	O
grparg	pointer
)	O
,	O
" %d#"	pointer
,	O
ngroups	int
)	O
;	O
group	function
(	O
trlname	pointer
,	O
grparg	pointer
,	O
marks	array
)	O
;	O
sort	function
(	O
grpname	pointer
,	O
grpvar	pointer
,	O
""	pointer
)	O
;	O
strcpy	function
(	O
mnsarg	pointer
,	O
casevar	pointer
)	O
;	O
strcat	function
(	O
mnsarg	pointer
,	O
" _ntrials "	pointer
)	O
;	O
strcat	function
(	O
mnsarg	pointer
,	O
x1list	array
)	O
;	O
means	function
(	O
srtname	pointer
,	O
mnsarg	pointer
,	O
"MEAN"	pointer
,	O
grpvar	pointer
)	O
;	O
inset	function
(	O
mnsname	pointer
)	O
;	O
outset	function
(	O
grpname	pointer
,	O
""	pointer
)	O
;	O
trialsn	int
=	O
dap_varnum	function
(	O
"_ntrials"	pointer
)	O
;	O
dap_list	function
(	O
casevar	pointer
,	O
varv	array
,	O
1	int
)	O
;	O
while	O
(	O
step	function
(	O
)	O
)	O
{	O
dap_obs	array
[	O
0	int
]	O
.	O
do_dbl	pointer
[	O
varv	array
[	O
0	int
]	O
]	O
/=	O
dap_obs	array
[	O
0	int
]	O
.	O
do_dbl	pointer
[	O
trialsn	int
]	O
;	O
output	function
(	O
)	O
;	O
}	O
means	function
(	O
fname	array
,	O
x1list	array
,	O
"STEP100"	pointer
,	O
marks	array
)	O
;	O
strcpy	function
(	O
mnsname	pointer
,	O
fname	array
)	O
;	O
strcat	function
(	O
mnsname	pointer
,	O
".mns"	pointer
)	O
;	O
logreg	function
(	O
fname	array
,	O
yspec	array
,	O
""	pointer
,	O
x1list	array
,	O
marks	array
,	O
mnsname	pointer
,	O
level	double
)	O
;	O
dataset	pointer
(	O
grpname	pointer
,	O
lgrname	pointer
,	O
"APPEND"	pointer
)	O
;	O
strcpy	function
(	O
srtarg	pointer
,	O
marks	array
)	O
;	O
strcat	function
(	O
srtarg	pointer
,	O
" _type_ "	pointer
)	O
;	O
strcat	function
(	O
srtarg	pointer
,	O
x1list	array
)	O
;	O
sort	function
(	O
lgrname	pointer
,	O
srtarg	pointer
,	O
""	pointer
)	O
;	O
strcpy	function
(	O
srtname	pointer
,	O
lgrname	pointer
)	O
;	O
strcat	function
(	O
srtname	pointer
,	O
".srt"	pointer
)	O
;	O
strcpy	function
(	O
plotvars	pointer
,	O
x1list0	pointer
)	O
;	O
strcat	function
(	O
plotvars	pointer
,	O
" "	pointer
)	O
;	O
strcat	function
(	O
plotvars	pointer
,	O
casevar0	pointer
)	O
;	O
strcpy	function
(	O
plotmarks	pointer
,	O
marks	array
)	O
;	O
strcat	function
(	O
plotmarks	pointer
,	O
" _type_"	pointer
)	O
;	O
plotstyle	pointer
=	O
dap_malloc	function
(	O
strlen	function
(	O
style	array
)	O
+	O
4	int
,	O
""	pointer
)	O
;	O
strcpy	function
(	O
plotstyle	pointer
,	O
"o4 "	pointer
)	O
;	O
strcat	function
(	O
plotstyle	pointer
,	O
style	array
)	O
;	O
p	pointer
=	O
plot	function
(	O
srtname	pointer
,	O
plotvars	pointer
,	O
plotmarks	pointer
,	O
plotstyle	pointer
,	O
NULL	O
,	O
NULL	O
,	O
4	int
*	O
nmarks	int
)	O
;	O
for	O
(	O
pn	int
=	O
0	int
;	O
pn	int
<	O
nmarks	int
;	O
pn	int
++	O
)	O
{	O
strcpy	function
(	O
p	pointer
[	O
4	int
*	O
pn	int
+	O
0	int
]	O
.	O
pict_type	array
,	O
"LINE"	pointer
)	O
;	O
strcpy	function
(	O
p	pointer
[	O
4	int
*	O
pn	int
+	O
2	int
]	O
.	O
pict_type	array
,	O
"LINE"	pointer
)	O
;	O
strcpy	function
(	O
p	pointer
[	O
4	int
*	O
pn	int
+	O
3	int
]	O
.	O
pict_type	array
,	O
"LINE"	pointer
)	O
;	O
p	pointer
[	O
4	int
*	O
pn	int
+	O
0	int
]	O
.	O
pict_dash	double
=	O
4.0	int
;	O
p	pointer
[	O
4	int
*	O
pn	int
+	O
3	int
]	O
.	O
pict_dash	double
=	O
4.0	int
;	O
}	O
dap_free	function
(	O
yspec	array
,	O
""	pointer
)	O
;	O
dap_free	function
(	O
x1list	array
,	O
""	pointer
)	O
;	O
dap_free	function
(	O
trlname	pointer
,	O
""	pointer
)	O
;	O
dap_free	function
(	O
grpname	pointer
,	O
""	pointer
)	O
;	O
dap_free	function
(	O
grparg	pointer
,	O
""	pointer
)	O
;	O
dap_free	function
(	O
grpvar	pointer
,	O
""	pointer
)	O
;	O
dap_free	function
(	O
mnsarg	pointer
,	O
""	pointer
)	O
;	O
dap_free	function
(	O
mnsname	pointer
,	O
""	pointer
)	O
;	O
dap_free	function
(	O
lgrname	pointer
,	O
""	pointer
)	O
;	O
dap_free	function
(	O
srtarg	pointer
,	O
""	pointer
)	O
;	O
dap_free	function
(	O
srtname	pointer
,	O
""	pointer
)	O
;	O
dap_free	function
(	O
plotvars	pointer
,	O
""	pointer
)	O
;	O
dap_free	function
(	O
plotmarks	pointer
,	O
""	pointer
)	O
;	O
dap_free	function
(	O
casevar	pointer
,	O
""	pointer
)	O
;	O
dap_free	function
(	O
casevar0	pointer
,	O
""	pointer
)	O
;	O
dap_free	function
(	O
plotstyle	pointer
,	O
""	pointer
)	O
;	O
return	O
p	pointer
;	O
}	O
pict	struct
*	O
plotmeans	function
(	O
char	O
*	O
dataset	pointer
,	O
char	O
*	O
meanvar0	pointer
,	O
char	O
*	O
varlist0	pointer
,	O
char	O
*	O
errbar	pointer
,	O
char	O
*	O
style	array
,	O
char	O
*	O
partvars	pointer
,	O
int	O
noverlay	int
)	O
{	O
int	O
meanv	array
[	O
1	int
]	O
;	O
int	O
*	O
partv	array
;	O
int	O
npartv	int
;	O
char	O
*	O
meanvar	pointer
;	O
char	O
*	O
varlist	array
;	O
int	O
l	pointer
;	O
char	O
*	O
mnslist	pointer
;	O
char	O
*	O
mnsname	pointer
;	O
char	O
*	O
errname	pointer
;	O
char	O
*	O
srtname	pointer
;	O
char	O
*	O
ebar	pointer
;	O
char	O
*	O
overstr	pointer
;	O
int	O
e	int
;	O
double	O
scale	double
;	O
int	O
typen	int
;	O
double	O
mean	double
;	O
double	O
err	double
;	O
int	O
n	int
;	O
char	O
*	O
srtarg	pointer
;	O
char	O
*	O
plotvars	pointer
;	O
char	O
*	O
plotparts	pointer
;	O
pict	struct
*	O
p	pointer
;	O
int	O
more	int
;	O
int	O
nparts	int
;	O
int	O
pn	int
;	O
partv	array
=	O
NULL	O
;	O
mean	double
=	O
0.0	int
;	O
err	double
=	O
0.0	int
;	O
meanvar	pointer
=	O
dap_malloc	function
(	O
strlen	function
(	O
meanvar0	pointer
)	O
+	O
1	int
,	O
""	pointer
)	O
;	O
strcpy	function
(	O
meanvar	pointer
,	O
meanvar0	pointer
)	O
;	O
for	O
(	O
l	pointer
=	O
0	int
;	O
meanvar	pointer
[	O
l	pointer
]	O
&&	O
meanvar	pointer
[	O
l	pointer
]	O
!=	O
'`'	O
;	O
l	pointer
++	O
)	O
;	O
meanvar	pointer
[	O
l	pointer
]	O
=	O
'\0'	O
;	O
varlist	array
=	O
dap_malloc	function
(	O
strlen	function
(	O
varlist0	pointer
)	O
+	O
1	int
,	O
""	pointer
)	O
;	O
strcpy	function
(	O
varlist	array
,	O
varlist0	pointer
)	O
;	O
for	O
(	O
l	pointer
=	O
0	int
;	O
varlist	array
[	O
l	pointer
]	O
&&	O
varlist	array
[	O
l	pointer
]	O
!=	O
'`'	O
;	O
l	pointer
++	O
)	O
;	O
varlist	array
[	O
l	pointer
]	O
=	O
'\0'	O
;	O
if	O
(	O
partvars	pointer
&&	O
partvars	pointer
[	O
0	int
]	O
)	O
{	O
partv	array
=	O
(	O
int	O
*	O
)	O
dap_malloc	function
(	O
sizeof	O
(	O
int	O
)	O
*	O
dap_maxvar	int
,	O
""	pointer
)	O
;	O
mnslist	pointer
=	O
dap_malloc	function
(	O
strlen	function
(	O
varlist	array
)	O
+	O
strlen	function
(	O
partvars	pointer
)	O
+	O
2	int
,	O
""	pointer
)	O
;	O
strcpy	function
(	O
mnslist	pointer
,	O
partvars	pointer
)	O
;	O
strcat	function
(	O
mnslist	pointer
,	O
" "	pointer
)	O
;	O
strcat	function
(	O
mnslist	pointer
,	O
varlist	array
)	O
;	O
plotparts	pointer
=	O
dap_malloc	function
(	O
strlen	function
(	O
partvars	pointer
)	O
+	O
8	int
,	O
""	pointer
)	O
;	O
strcpy	function
(	O
plotparts	pointer
,	O
partvars	pointer
)	O
;	O
strcat	function
(	O
plotparts	pointer
,	O
" _type_"	pointer
)	O
;	O
}	O
else	O
{	O
mnslist	pointer
=	O
varlist	array
;	O
plotparts	pointer
=	O
"_type_"	pointer
;	O
}	O
mnsname	pointer
=	O
dap_malloc	function
(	O
strlen	function
(	O
dataset	pointer
)	O
+	O
5	int
,	O
""	pointer
)	O
;	O
strcpy	function
(	O
mnsname	pointer
,	O
dataset	pointer
)	O
;	O
strcat	function
(	O
mnsname	pointer
,	O
".mns"	pointer
)	O
;	O
errname	pointer
=	O
dap_malloc	function
(	O
strlen	function
(	O
dataset	pointer
)	O
+	O
5	int
,	O
""	pointer
)	O
;	O
strcpy	function
(	O
errname	pointer
,	O
dataset	pointer
)	O
;	O
strcat	function
(	O
errname	pointer
,	O
".err"	pointer
)	O
;	O
srtname	pointer
=	O
dap_malloc	function
(	O
strlen	function
(	O
errname	pointer
)	O
+	O
5	int
,	O
""	pointer
)	O
;	O
strcpy	function
(	O
srtname	pointer
,	O
errname	pointer
)	O
;	O
strcat	function
(	O
srtname	pointer
,	O
".srt"	pointer
)	O
;	O
ebar	pointer
=	O
dap_malloc	function
(	O
strlen	function
(	O
errbar	pointer
)	O
+	O
6	int
,	O
""	pointer
)	O
;	O
strcpy	function
(	O
ebar	pointer
,	O
"MEAN "	pointer
)	O
;	O
strcat	function
(	O
ebar	pointer
,	O
errbar	pointer
)	O
;	O
overstr	pointer
=	O
dap_malloc	function
(	O
8	int
+	O
strlen	function
(	O
style	array
)	O
,	O
""	pointer
)	O
;	O
if	O
(	O
noverlay	int
<	O
1	int
)	O
noverlay	int
=	O
1	int
;	O
sprintf	function
(	O
overstr	pointer
,	O
"o%d %s"	pointer
,	O
2	int
*	O
noverlay	int
,	O
style	array
)	O
;	O
srtarg	pointer
=	O
dap_malloc	function
(	O
strlen	function
(	O
mnslist	pointer
)	O
+	O
8	int
,	O
""	pointer
)	O
;	O
if	O
(	O
partvars	pointer
&&	O
partvars	pointer
[	O
0	int
]	O
)	O
{	O
strcpy	function
(	O
srtarg	pointer
,	O
partvars	pointer
)	O
;	O
strcat	function
(	O
srtarg	pointer
,	O
" "	pointer
)	O
;	O
}	O
else	O
srtarg	pointer
[	O
0	int
]	O
=	O
'\0'	O
;	O
strcat	function
(	O
srtarg	pointer
,	O
"_type_ "	pointer
)	O
;	O
strcat	function
(	O
srtarg	pointer
,	O
varlist	array
)	O
;	O
plotvars	pointer
=	O
dap_malloc	function
(	O
strlen	function
(	O
meanvar0	pointer
)	O
+	O
strlen	function
(	O
varlist0	pointer
)	O
+	O
2	int
,	O
""	pointer
)	O
;	O
strcpy	function
(	O
plotvars	pointer
,	O
varlist0	pointer
)	O
;	O
strcat	function
(	O
plotvars	pointer
,	O
" "	pointer
)	O
;	O
strcat	function
(	O
plotvars	pointer
,	O
meanvar0	pointer
)	O
;	O
for	O
(	O
e	int
=	O
0	int
;	O
errbar	pointer
[	O
e	int
]	O
==	O
' '	O
;	O
e	int
++	O
)	O
;	O
while	O
(	O
errbar	pointer
[	O
e	int
]	O
&&	O
errbar	pointer
[	O
e	int
]	O
!=	O
' '	O
)	O
e	int
++	O
;	O
ebar	pointer
[	O
e	int
+	O
5	int
]	O
=	O
'\0'	O
;	O
while	O
(	O
errbar	pointer
[	O
e	int
]	O
==	O
' '	O
)	O
e	int
++	O
;	O
if	O
(	O
errbar	pointer
[	O
e	int
]	O
)	O
{	O
if	O
(	O
sscanf	function
(	O
errbar	pointer
+	O
e	int
,	O
"%lf"	pointer
,	O
&	O
scale	double
)	O
!=	O
1	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: bad scale in call to plotmeans: %s\n"	pointer
,	O
dap_dapname	pointer
,	O
errbar	pointer
+	O
e	int
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
}	O
else	O
scale	double
=	O
1.0	int
;	O
means	function
(	O
dataset	pointer
,	O
meanvar	pointer
,	O
ebar	pointer
,	O
mnslist	pointer
)	O
;	O
inset	function
(	O
mnsname	pointer
)	O
;	O
outset	function
(	O
errname	pointer
,	O
""	pointer
)	O
;	O
dap_list	function
(	O
varlist	array
,	O
meanv	array
,	O
1	int
)	O
;	O
dap_list	function
(	O
meanvar	pointer
,	O
meanv	array
,	O
1	int
)	O
;	O
if	O
(	O
partvars	pointer
&&	O
partvars	pointer
[	O
0	int
]	O
)	O
npartv	int
=	O
dap_list	function
(	O
partvars	pointer
,	O
partv	array
,	O
dap_maxvar	int
)	O
;	O
else	O
npartv	int
=	O
0	int
;	O
if	O
(	O
(	O
typen	int
=	O
dap_varnum	function
(	O
"_type_"	pointer
)	O
)	O
<	O
0	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: missing _type_ variable for plotmeans\n"	pointer
,	O
dap_dapname	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
for	O
(	O
n	int
=	O
0	int
,	O
nparts	int
=	O
0	int
,	O
more	int
=	O
1	int
;	O
more	int
;	O
)	O
{	O
more	int
=	O
step	function
(	O
)	O
;	O
if	O
(	O
more	int
)	O
{	O
if	O
(	O
!	O
strcmp	function
(	O
dap_obs	array
[	O
0	int
]	O
.	O
do_str	pointer
[	O
typen	int
]	O
,	O
"MEAN"	pointer
)	O
)	O
mean	double
=	O
dap_obs	array
[	O
0	int
]	O
.	O
do_dbl	pointer
[	O
meanv	array
[	O
0	int
]	O
]	O
;	O
else	O
err	double
=	O
dap_obs	array
[	O
0	int
]	O
.	O
do_dbl	pointer
[	O
meanv	array
[	O
0	int
]	O
]	O
;	O
if	O
(	O
++	O
n	int
==	O
2	int
)	O
{	O
strcpy	function
(	O
dap_obs	array
[	O
0	int
]	O
.	O
do_str	pointer
[	O
typen	int
]	O
,	O
"MEAN"	pointer
)	O
;	O
dap_obs	array
[	O
0	int
]	O
.	O
do_dbl	pointer
[	O
meanv	array
[	O
0	int
]	O
]	O
=	O
mean	double
;	O
output	function
(	O
)	O
;	O
strcpy	function
(	O
dap_obs	array
[	O
0	int
]	O
.	O
do_str	pointer
[	O
typen	int
]	O
,	O
"BAR"	pointer
)	O
;	O
dap_obs	array
[	O
0	int
]	O
.	O
do_dbl	pointer
[	O
meanv	array
[	O
0	int
]	O
]	O
=	O
mean	double
-	O
err	double
*	O
scale	double
;	O
output	function
(	O
)	O
;	O
dap_obs	array
[	O
0	int
]	O
.	O
do_dbl	pointer
[	O
meanv	array
[	O
0	int
]	O
]	O
=	O
mean	double
+	O
err	double
*	O
scale	double
;	O
output	function
(	O
)	O
;	O
n	int
=	O
0	int
;	O
}	O
}	O
if	O
(	O
dap_newpart	function
(	O
partv	array
,	O
npartv	int
)	O
)	O
nparts	int
++	O
;	O
}	O
sort	function
(	O
errname	pointer
,	O
srtarg	pointer
,	O
""	pointer
)	O
;	O
p	pointer
=	O
plot	function
(	O
srtname	pointer
,	O
plotvars	pointer
,	O
plotparts	pointer
,	O
overstr	pointer
,	O
NULL	O
,	O
NULL	O
,	O
2	int
*	O
nparts	int
)	O
;	O
for	O
(	O
pn	int
=	O
0	int
;	O
pn	int
<	O
nparts	int
;	O
pn	int
++	O
)	O
strcpy	function
(	O
p	pointer
[	O
2	int
*	O
pn	int
]	O
.	O
pict_type	array
,	O
"IBEA"	pointer
)	O
;	O
if	O
(	O
partvars	pointer
&&	O
partvars	pointer
[	O
0	int
]	O
)	O
{	O
dap_free	function
(	O
partv	array
,	O
""	pointer
)	O
;	O
dap_free	function
(	O
mnslist	pointer
,	O
""	pointer
)	O
;	O
dap_free	function
(	O
plotparts	pointer
,	O
""	pointer
)	O
;	O
}	O
dap_free	function
(	O
mnsname	pointer
,	O
""	pointer
)	O
;	O
dap_free	function
(	O
errname	pointer
,	O
""	pointer
)	O
;	O
dap_free	function
(	O
srtname	pointer
,	O
""	pointer
)	O
;	O
dap_free	function
(	O
ebar	pointer
,	O
""	pointer
)	O
;	O
dap_free	function
(	O
overstr	pointer
,	O
""	pointer
)	O
;	O
dap_free	function
(	O
srtarg	pointer
,	O
""	pointer
)	O
;	O
dap_free	function
(	O
plotvars	pointer
,	O
""	pointer
)	O
;	O
return	O
p	pointer
;	O
}	O
