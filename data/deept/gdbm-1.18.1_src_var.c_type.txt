union	O
value	union
{	O
char	O
*	O
string	pointer
;	O
int	O
bool	int
;	O
int	O
num	int
;	O
}	O
;	O
struct	O
variable	struct
{	O
char	O
*	O
name	pointer
;	O
int	O
type	int
;	O
int	O
flags	int
;	O
union	O
value	union
v	union
;	O
int	O
(	O
*	O
hook	pointer
)	O
(	O
struct	O
variable	struct
*	O
,	O
union	O
value	union
*	O
)	O
;	O
}	O
;	O
static	O
int	O
open_hook	function
(	O
struct	O
variable	struct
*	O
,	O
union	O
value	union
*	O
)	O
;	O
static	O
struct	O
variable	struct
vartab	array
[	O
]	O
=	O
{	O
{	O
"ps1"	pointer
,	O
VART_STRING	int
,	O
VARF_INIT	int
,	O
{	O
.	O
string	pointer
=	O
"%p>%_"	pointer
}	O
}	O
,	O
{	O
"ps2"	pointer
,	O
VART_STRING	int
,	O
VARF_INIT	int
,	O
{	O
.	O
string	pointer
=	O
"%_>%_"	pointer
}	O
}	O
,	O
{	O
"delim1"	pointer
,	O
VART_STRING	int
,	O
VARF_INIT	int
|	O
VARF_PROT	int
,	O
{	O
.	O
string	pointer
=	O
","	pointer
}	O
}	O
,	O
{	O
"delim2"	pointer
,	O
VART_STRING	int
,	O
VARF_INIT	int
|	O
VARF_PROT	int
,	O
{	O
.	O
string	pointer
=	O
","	pointer
}	O
}	O
,	O
{	O
"confirm"	pointer
,	O
VART_BOOL	int
,	O
VARF_INIT	int
,	O
{	O
.	O
bool	int
=	O
1	int
}	O
}	O
,	O
{	O
"cachesize"	pointer
,	O
VART_INT	int
,	O
VARF_DFL	int
}	O
,	O
{	O
"blocksize"	pointer
,	O
VART_INT	int
,	O
VARF_DFL	int
}	O
,	O
{	O
"open"	pointer
,	O
VART_STRING	int
,	O
VARF_DFL	int
,	O
{	O
NULL	O
}	O
,	O
open_hook	function
}	O
,	O
{	O
"lock"	pointer
,	O
VART_BOOL	int
,	O
VARF_INIT	int
,	O
{	O
.	O
bool	int
=	O
1	int
}	O
}	O
,	O
{	O
"mmap"	pointer
,	O
VART_BOOL	int
,	O
VARF_INIT	int
,	O
{	O
.	O
bool	int
=	O
1	int
}	O
}	O
,	O
{	O
"sync"	pointer
,	O
VART_BOOL	int
,	O
VARF_INIT	int
,	O
{	O
.	O
bool	int
=	O
0	int
}	O
}	O
,	O
{	O
"coalesce"	pointer
,	O
VART_BOOL	int
,	O
VARF_INIT	int
,	O
{	O
.	O
bool	int
=	O
0	int
}	O
}	O
,	O
{	O
"centfree"	pointer
,	O
VART_BOOL	int
,	O
VARF_INIT	int
,	O
{	O
.	O
bool	int
=	O
0	int
}	O
}	O
,	O
{	O
"filemode"	pointer
,	O
VART_INT	int
,	O
VARF_INIT	int
|	O
VARF_OCTAL	int
|	O
VARF_PROT	int
,	O
{	O
.	O
num	int
=	O
0644	int
}	O
}	O
,	O
{	O
"pager"	pointer
,	O
VART_STRING	int
,	O
VARF_DFL	int
}	O
,	O
{	O
"quiet"	pointer
,	O
VART_BOOL	int
,	O
VARF_DFL	int
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
static	O
int	O
open_hook	function
(	O
struct	O
variable	struct
*	O
var	pointer
,	O
union	O
value	union
*	O
v	union
)	O
{	O
static	O
struct	O
{	O
char	O
*	O
s	pointer
;	O
int	O
t	int
;	O
}	O
trans	array
[	O
]	O
=	O
{	O
{	O
"newdb"	pointer
,	O
GDBM_NEWDB	int
}	O
,	O
{	O
"wrcreat"	pointer
,	O
GDBM_WRCREAT	int
}	O
,	O
{	O
"rw"	pointer
,	O
GDBM_WRCREAT	int
}	O
,	O
{	O
"reader"	pointer
,	O
GDBM_READER	int
}	O
,	O
{	O
"readonly"	pointer
,	O
GDBM_READER	int
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
int	O
i	int
;	O
if	O
(	O
!	O
v	union
)	O
return	O
VAR_ERR_BADVALUE	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
trans	array
[	O
i	int
]	O
.	O
s	pointer
;	O
i	int
++	O
)	O
if	O
(	O
strcmp	function
(	O
trans	array
[	O
i	int
]	O
.	O
s	pointer
,	O
v	union
->	O
string	pointer
)	O
==	O
0	int
)	O
{	O
open_mode	int
=	O
trans	array
[	O
i	int
]	O
.	O
t	int
;	O
return	O
VAR_OK	int
;	O
}	O
return	O
VAR_ERR_BADVALUE	int
;	O
}	O
static	O
struct	O
variable	struct
*	O
varfind	function
(	O
const	O
char	O
*	O
name	pointer
)	O
{	O
struct	O
variable	struct
*	O
vp	pointer
;	O
for	O
(	O
vp	pointer
=	O
vartab	array
;	O
vp	pointer
->	O
name	pointer
;	O
vp	pointer
++	O
)	O
if	O
(	O
strcmp	function
(	O
vp	pointer
->	O
name	pointer
,	O
name	pointer
)	O
==	O
0	int
)	O
return	O
vp	pointer
;	O
return	O
NULL	O
;	O
}	O
typedef	O
int	O
(	O
*	O
setvar_t	pointer
)	O
(	O
union	O
value	union
*	O
,	O
void	O
*	O
,	O
int	O
)	O
;	O
static	O
int	O
s2s	function
(	O
union	O
value	union
*	O
vp	pointer
,	O
void	O
*	O
val	union
,	O
int	O
flags	int
)	O
{	O
vp	pointer
->	O
string	pointer
=	O
estrdup	function
(	O
val	union
)	O
;	O
return	O
VAR_OK	int
;	O
}	O
static	O
int	O
b2s	function
(	O
union	O
value	union
*	O
vp	pointer
,	O
void	O
*	O
val	union
,	O
int	O
flags	int
)	O
{	O
vp	pointer
->	O
string	pointer
=	O
estrdup	function
(	O
*	O
(	O
int	O
*	O
)	O
val	union
?	O
"true"	pointer
:	O
"false"	pointer
)	O
;	O
return	O
VAR_OK	int
;	O
}	O
static	O
int	O
i2s	function
(	O
union	O
value	union
*	O
vp	pointer
,	O
void	O
*	O
val	union
,	O
int	O
flags	int
)	O
{	O
char	O
buf	pointer
[	O
128	int
]	O
;	O
snprintf	function
(	O
buf	pointer
,	O
sizeof	O
buf	pointer
,	O
"%d"	pointer
,	O
*	O
(	O
int	O
*	O
)	O
val	union
)	O
;	O
vp	pointer
->	O
string	pointer
=	O
estrdup	function
(	O
buf	pointer
)	O
;	O
return	O
VAR_OK	int
;	O
}	O
static	O
int	O
s2b	function
(	O
union	O
value	union
*	O
vp	pointer
,	O
void	O
*	O
val	union
,	O
int	O
flags	int
)	O
{	O
static	O
char	O
*	O
trueval	array
[	O
]	O
=	O
{	O
"on"	pointer
,	O
"true"	pointer
,	O
"yes"	pointer
,	O
NULL	O
}	O
;	O
static	O
char	O
*	O
falseval	array
[	O
]	O
=	O
{	O
"off"	pointer
,	O
"false"	pointer
,	O
"no"	pointer
,	O
NULL	O
}	O
;	O
int	O
i	int
;	O
unsigned	O
long	O
n	int
;	O
char	O
*	O
p	pointer
;	O
for	O
(	O
i	int
=	O
0	int
;	O
trueval	array
[	O
i	int
]	O
;	O
i	int
++	O
)	O
if	O
(	O
strcasecmp	function
(	O
trueval	array
[	O
i	int
]	O
,	O
val	union
)	O
==	O
0	int
)	O
{	O
vp	pointer
->	O
bool	int
=	O
1	int
;	O
return	O
VAR_OK	int
;	O
}	O
for	O
(	O
i	int
=	O
0	int
;	O
falseval	array
[	O
i	int
]	O
;	O
i	int
++	O
)	O
if	O
(	O
strcasecmp	function
(	O
falseval	array
[	O
i	int
]	O
,	O
val	union
)	O
==	O
0	int
)	O
{	O
vp	pointer
->	O
bool	int
=	O
0	int
;	O
return	O
VAR_OK	int
;	O
}	O
n	int
=	O
strtoul	function
(	O
val	union
,	O
&	O
p	pointer
,	O
0	int
)	O
;	O
if	O
(	O
*	O
p	pointer
)	O
return	O
VAR_ERR_BADTYPE	int
;	O
vp	pointer
->	O
bool	int
=	O
!	O
!	O
n	int
;	O
return	O
VAR_OK	int
;	O
}	O
static	O
int	O
s2i	function
(	O
union	O
value	union
*	O
vp	pointer
,	O
void	O
*	O
val	union
,	O
int	O
flags	int
)	O
{	O
char	O
*	O
p	pointer
;	O
int	O
n	int
=	O
strtoul	function
(	O
val	union
,	O
&	O
p	pointer
,	O
(	O
flags	int
&	O
VARF_OCTAL	int
)	O
?	O
8	int
:	O
10	int
)	O
;	O
if	O
(	O
*	O
p	pointer
)	O
return	O
VAR_ERR_BADTYPE	int
;	O
vp	pointer
->	O
num	int
=	O
n	int
;	O
return	O
VAR_OK	int
;	O
}	O
static	O
int	O
b2b	function
(	O
union	O
value	union
*	O
vp	pointer
,	O
void	O
*	O
val	union
,	O
int	O
flags	int
)	O
{	O
vp	pointer
->	O
bool	int
=	O
!	O
!	O
*	O
(	O
int	O
*	O
)	O
val	union
;	O
return	O
VAR_OK	int
;	O
}	O
static	O
int	O
b2i	function
(	O
union	O
value	union
*	O
vp	pointer
,	O
void	O
*	O
val	union
,	O
int	O
flags	int
)	O
{	O
vp	pointer
->	O
num	int
=	O
*	O
(	O
int	O
*	O
)	O
val	union
;	O
return	O
VAR_OK	int
;	O
}	O
static	O
int	O
i2i	function
(	O
union	O
value	union
*	O
vp	pointer
,	O
void	O
*	O
val	union
,	O
int	O
flags	int
)	O
{	O
vp	pointer
->	O
num	int
=	O
*	O
(	O
int	O
*	O
)	O
val	union
;	O
return	O
VAR_OK	int
;	O
}	O
static	O
int	O
i2b	function
(	O
union	O
value	union
*	O
vp	pointer
,	O
void	O
*	O
val	union
,	O
int	O
flags	int
)	O
{	O
vp	pointer
->	O
bool	int
=	O
*	O
(	O
int	O
*	O
)	O
val	union
;	O
return	O
VAR_OK	int
;	O
}	O
static	O
setvar_t	pointer
setvar	array
[	O
3	int
]	O
[	O
3	int
]	O
=	O
{	O
{	O
s2s	function
,	O
b2s	function
,	O
i2s	function
}	O
,	O
{	O
s2b	function
,	O
b2b	function
,	O
i2b	function
}	O
,	O
{	O
s2i	function
,	O
b2i	function
,	O
i2i	function
}	O
}	O
;	O
int	O
variable_set	function
(	O
const	O
char	O
*	O
name	pointer
,	O
int	O
type	int
,	O
void	O
*	O
val	union
)	O
{	O
struct	O
variable	struct
*	O
vp	pointer
=	O
varfind	function
(	O
name	pointer
)	O
;	O
int	O
rc	int
;	O
union	O
value	union
v	union
,	O
*	O
valp	pointer
;	O
if	O
(	O
!	O
vp	pointer
)	O
return	O
VAR_ERR_NOTDEF	int
;	O
if	O
(	O
val	union
)	O
{	O
memset	function
(	O
&	O
v	union
,	O
0	int
,	O
sizeof	O
(	O
v	union
)	O
)	O
;	O
rc	int
=	O
setvar	array
[	O
vp	pointer
->	O
type	int
]	O
[	O
type	int
]	O
(	O
&	O
v	union
,	O
val	union
,	O
vp	pointer
->	O
flags	int
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
valp	pointer
=	O
&	O
v	union
;	O
}	O
else	O
{	O
if	O
(	O
vp	pointer
->	O
flags	int
&	O
VARF_PROT	int
)	O
return	O
VAR_ERR_BADVALUE	int
;	O
valp	pointer
=	O
NULL	O
;	O
}	O
if	O
(	O
vp	pointer
->	O
hook	pointer
&&	O
(	O
rc	int
=	O
vp	pointer
->	O
hook	pointer
(	O
vp	pointer
,	O
valp	pointer
)	O
)	O
!=	O
VAR_OK	int
)	O
return	O
rc	int
;	O
if	O
(	O
vp	pointer
->	O
type	int
==	O
VART_STRING	int
&&	O
(	O
vp	pointer
->	O
flags	int
&	O
VARF_SET	int
)	O
)	O
free	function
(	O
vp	pointer
->	O
v	union
.	O
string	pointer
)	O
;	O
if	O
(	O
!	O
val	union
)	O
{	O
vp	pointer
->	O
flags	int
&=	O
(	O
VARF_INIT	int
|	O
VARF_SET	int
)	O
;	O
}	O
else	O
{	O
vp	pointer
->	O
v	union
=	O
v	union
;	O
vp	pointer
->	O
flags	int
&=	O
~	O
VARF_INIT	int
;	O
vp	pointer
->	O
flags	int
|=	O
VARF_SET	int
;	O
}	O
return	O
VAR_OK	int
;	O
}	O
int	O
variable_unset	function
(	O
const	O
char	O
*	O
name	pointer
)	O
{	O
struct	O
variable	struct
*	O
vp	pointer
=	O
varfind	function
(	O
name	pointer
)	O
;	O
int	O
rc	int
;	O
if	O
(	O
!	O
vp	pointer
)	O
return	O
VAR_ERR_NOTDEF	int
;	O
if	O
(	O
vp	pointer
->	O
flags	int
&	O
VARF_PROT	int
)	O
return	O
VAR_ERR_BADVALUE	int
;	O
if	O
(	O
vp	pointer
->	O
hook	pointer
&&	O
(	O
rc	int
=	O
vp	pointer
->	O
hook	pointer
(	O
vp	pointer
,	O
NULL	O
)	O
)	O
!=	O
VAR_OK	int
)	O
return	O
rc	int
;	O
vp	pointer
->	O
flags	int
&=	O
~	O
(	O
VARF_INIT	int
|	O
VARF_SET	int
)	O
;	O
return	O
VAR_OK	int
;	O
}	O
int	O
variable_get	function
(	O
const	O
char	O
*	O
name	pointer
,	O
int	O
type	int
,	O
void	O
*	O
*	O
val	union
)	O
{	O
struct	O
variable	struct
*	O
vp	pointer
=	O
varfind	function
(	O
name	pointer
)	O
;	O
if	O
(	O
!	O
vp	pointer
)	O
return	O
VAR_ERR_NOTDEF	int
;	O
if	O
(	O
type	int
!=	O
vp	pointer
->	O
type	int
)	O
return	O
VAR_ERR_BADTYPE	int
;	O
if	O
(	O
!	O
VAR_IS_SET	O
(	O
vp	pointer
)	O
)	O
return	O
VAR_ERR_NOTSET	int
;	O
switch	O
(	O
vp	pointer
->	O
type	int
)	O
{	O
case	O
VART_STRING	int
:	O
*	O
val	union
=	O
vp	pointer
->	O
v	union
.	O
string	pointer
;	O
break	O
;	O
case	O
VART_BOOL	int
:	O
*	O
(	O
int	O
*	O
)	O
val	union
=	O
vp	pointer
->	O
v	union
.	O
bool	int
;	O
break	O
;	O
case	O
VART_INT	int
:	O
*	O
(	O
int	O
*	O
)	O
val	union
=	O
vp	pointer
->	O
v	union
.	O
num	int
;	O
break	O
;	O
}	O
return	O
VAR_OK	int
;	O
}	O
static	O
int	O
varcmp	function
(	O
const	O
void	O
*	O
a	array
,	O
const	O
void	O
*	O
b	array
)	O
{	O
return	O
strcmp	function
(	O
(	O
(	O
struct	O
variable	struct
const	O
*	O
)	O
a	array
)	O
->	O
name	pointer
,	O
(	O
(	O
struct	O
variable	struct
const	O
*	O
)	O
b	array
)	O
->	O
name	pointer
)	O
;	O
}	O
void	O
variable_print_all	function
(	O
FILE	struct
*	O
fp	pointer
)	O
{	O
struct	O
variable	struct
*	O
vp	pointer
;	O
char	O
*	O
s	pointer
;	O
static	O
int	O
sorted	int
;	O
if	O
(	O
!	O
sorted	int
)	O
{	O
qsort	function
(	O
vartab	array
,	O
sizeof	O
(	O
vartab	array
)	O
/	O
sizeof	O
(	O
vartab	array
[	O
0	int
]	O
)	O
-	O
1	int
,	O
sizeof	O
(	O
vartab	array
[	O
0	int
]	O
)	O
,	O
varcmp	function
)	O
;	O
sorted	int
=	O
1	int
;	O
}	O
for	O
(	O
vp	pointer
=	O
vartab	array
;	O
vp	pointer
->	O
name	pointer
;	O
vp	pointer
++	O
)	O
{	O
if	O
(	O
!	O
VAR_IS_SET	O
(	O
vp	pointer
)	O
)	O
{	O
fprintf	function
(	O
fp	pointer
,	O
"# %s is unset"	pointer
,	O
vp	pointer
->	O
name	pointer
)	O
;	O
}	O
else	O
{	O
switch	O
(	O
vp	pointer
->	O
type	int
)	O
{	O
case	O
VART_INT	int
:	O
fprintf	function
(	O
fp	pointer
,	O
(	O
vp	pointer
->	O
flags	int
&	O
VARF_OCTAL	int
)	O
?	O
"%s=%03o"	pointer
:	O
"%s=%d"	pointer
,	O
vp	pointer
->	O
name	pointer
,	O
vp	pointer
->	O
v	union
.	O
num	int
)	O
;	O
break	O
;	O
case	O
VART_BOOL	int
:	O
fprintf	function
(	O
fp	pointer
,	O
"%s%s"	pointer
,	O
vp	pointer
->	O
v	union
.	O
bool	int
?	O
""	pointer
:	O
"no"	pointer
,	O
vp	pointer
->	O
name	pointer
)	O
;	O
break	O
;	O
case	O
VART_STRING	int
:	O
fprintf	function
(	O
fp	pointer
,	O
"%s=\""	pointer
,	O
vp	pointer
->	O
name	pointer
)	O
;	O
for	O
(	O
s	pointer
=	O
vp	pointer
->	O
v	union
.	O
string	pointer
;	O
*	O
s	pointer
;	O
s	pointer
++	O
)	O
{	O
int	O
c	int
;	O
if	O
(	O
isprint	function
(	O
*	O
s	pointer
)	O
)	O
fputc	function
(	O
*	O
s	pointer
,	O
fp	pointer
)	O
;	O
else	O
if	O
(	O
(	O
c	int
=	O
escape	function
(	O
*	O
s	pointer
)	O
)	O
)	O
fprintf	function
(	O
fp	pointer
,	O
"\\%c"	pointer
,	O
c	int
)	O
;	O
else	O
fprintf	function
(	O
fp	pointer
,	O
"\\%03o"	pointer
,	O
*	O
s	pointer
)	O
;	O
}	O
fprintf	function
(	O
fp	pointer
,	O
"\""	pointer
)	O
;	O
}	O
}	O
fputc	function
(	O
'\n'	O
,	O
fp	pointer
)	O
;	O
}	O
}	O
int	O
variable_is_set	function
(	O
const	O
char	O
*	O
name	pointer
)	O
{	O
struct	O
variable	struct
*	O
vp	pointer
=	O
varfind	function
(	O
name	pointer
)	O
;	O
if	O
(	O
!	O
vp	pointer
)	O
return	O
0	int
;	O
return	O
VAR_IS_SET	O
(	O
vp	pointer
)	O
;	O
}	O
int	O
variable_is_true	function
(	O
const	O
char	O
*	O
name	pointer
)	O
{	O
int	O
n	int
;	O
if	O
(	O
variable_get	function
(	O
name	pointer
,	O
VART_BOOL	int
,	O
(	O
void	O
*	O
*	O
)	O
&	O
n	int
)	O
==	O
VAR_OK	int
)	O
return	O
n	int
;	O
return	O
0	int
;	O
}	O
