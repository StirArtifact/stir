bool	bool
rec_atoi	function
(	O
const	O
char	O
*	O
str	pointer
,	O
int	O
*	O
number	pointer
)	O
{	O
bool	bool
res	bool
;	O
long	O
int	O
li	long
;	O
char	O
*	O
end	pointer
;	O
int	O
base	int
=	O
0	int
;	O
res	bool
=	O
false	int
;	O
li	long
=	O
strtol	function
(	O
str	pointer
,	O
&	O
end	pointer
,	O
base	int
)	O
;	O
if	O
(	O
(	O
*	O
str	pointer
!=	O
'\0'	O
)	O
&&	O
(	O
*	O
end	pointer
==	O
'\0'	O
)	O
)	O
{	O
res	bool
=	O
true	int
;	O
*	O
number	pointer
=	O
(	O
int	O
)	O
li	long
;	O
}	O
return	O
res	bool
;	O
}	O
bool	bool
rec_atod	function
(	O
const	O
char	O
*	O
str	pointer
,	O
double	O
*	O
number	pointer
)	O
{	O
bool	bool
res	bool
;	O
char	O
*	O
end	pointer
;	O
res	bool
=	O
false	int
;	O
setlocale	function
(	O
LC_NUMERIC	O
,	O
"C"	pointer
)	O
;	O
*	O
number	pointer
=	O
strtod	function
(	O
str	pointer
,	O
&	O
end	pointer
)	O
;	O
setlocale	function
(	O
LC_NUMERIC	O
,	O
""	pointer
)	O
;	O
if	O
(	O
(	O
*	O
str	pointer
!=	O
'\0'	O
)	O
&&	O
(	O
*	O
end	pointer
==	O
'\0'	O
)	O
)	O
{	O
res	bool
=	O
true	int
;	O
}	O
return	O
res	bool
;	O
}	O
char	O
*	O
rec_extract_file	function
(	O
const	O
char	O
*	O
str	pointer
)	O
{	O
regex_t	struct
regexp	pointer
;	O
regmatch_t	struct
matches	struct
;	O
char	O
*	O
rec_file	pointer
=	O
NULL	O
;	O
size_t	long
rec_file_length	long
=	O
0	int
;	O
if	O
(	O
regcomp	O
(	O
&	O
regexp	pointer
,	O
"[ \n\t]"	pointer
REC_FILE_REGEXP	pointer
,	O
REG_EXTENDED	int
)	O
!=	O
0	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"internal error: rec_int_rec_extract_file: error compiling regexp.\n"	pointer
)	O
)	O
;	O
return	O
NULL	O
;	O
}	O
if	O
(	O
(	O
regexec	O
(	O
&	O
regexp	pointer
,	O
str	pointer
,	O
1	int
,	O
&	O
matches	struct
,	O
0	int
)	O
==	O
0	int
)	O
&&	O
(	O
matches	struct
.	O
rm_so	long
!=	O
-	O
1	int
)	O
)	O
{	O
rec_file_length	long
=	O
matches	struct
.	O
rm_eo	long
-	O
matches	struct
.	O
rm_so	long
;	O
rec_file	pointer
=	O
malloc	function
(	O
rec_file_length	long
+	O
1	int
)	O
;	O
memcpy	function
(	O
rec_file	pointer
,	O
str	pointer
+	O
matches	struct
.	O
rm_so	long
+	O
1	int
,	O
rec_file_length	long
-	O
1	int
)	O
;	O
rec_file	pointer
[	O
rec_file_length	long
-	O
1	int
]	O
=	O
'\0'	O
;	O
}	O
regfree	O
(	O
&	O
regexp	pointer
)	O
;	O
return	O
rec_file	pointer
;	O
}	O
char	O
*	O
rec_extract_url	function
(	O
const	O
char	O
*	O
str	pointer
)	O
{	O
regex_t	struct
regexp	pointer
;	O
regmatch_t	struct
matches	struct
;	O
char	O
*	O
rec_url	pointer
=	O
NULL	O
;	O
size_t	long
rec_url_length	long
=	O
0	int
;	O
if	O
(	O
regcomp	O
(	O
&	O
regexp	pointer
,	O
REC_URL_REGEXP	pointer
,	O
REG_EXTENDED	int
)	O
!=	O
0	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"internal error: rec_int_rec_extract_url: error compiling regexp.\n"	pointer
)	O
)	O
;	O
return	O
NULL	O
;	O
}	O
if	O
(	O
(	O
regexec	O
(	O
&	O
regexp	pointer
,	O
str	pointer
,	O
1	int
,	O
&	O
matches	struct
,	O
0	int
)	O
==	O
0	int
)	O
&&	O
(	O
matches	struct
.	O
rm_so	long
!=	O
-	O
1	int
)	O
)	O
{	O
rec_url_length	long
=	O
matches	struct
.	O
rm_eo	long
-	O
matches	struct
.	O
rm_so	long
;	O
rec_url	pointer
=	O
malloc	function
(	O
rec_url_length	long
+	O
1	int
)	O
;	O
memcpy	function
(	O
rec_url	pointer
,	O
str	pointer
+	O
matches	struct
.	O
rm_so	long
,	O
rec_url_length	long
)	O
;	O
rec_url	pointer
[	O
rec_url_length	long
]	O
=	O
'\0'	O
;	O
}	O
regfree	O
(	O
&	O
regexp	pointer
)	O
;	O
return	O
rec_url	pointer
;	O
}	O
char	O
*	O
rec_extract_type	function
(	O
const	O
char	O
*	O
str	pointer
)	O
{	O
regex_t	struct
regexp	pointer
;	O
regmatch_t	struct
matches	struct
;	O
char	O
*	O
rec_type	pointer
=	O
NULL	O
;	O
size_t	long
rec_type_length	long
=	O
0	int
;	O
if	O
(	O
regcomp	O
(	O
&	O
regexp	pointer
,	O
REC_FNAME_RE	pointer
,	O
REG_EXTENDED	int
)	O
!=	O
0	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"internal error: rec_int_rec_extract_url: error compiling regexp.\n"	pointer
)	O
)	O
;	O
return	O
NULL	O
;	O
}	O
if	O
(	O
(	O
regexec	O
(	O
&	O
regexp	pointer
,	O
str	pointer
,	O
1	int
,	O
&	O
matches	struct
,	O
0	int
)	O
==	O
0	int
)	O
&&	O
(	O
matches	struct
.	O
rm_so	long
!=	O
-	O
1	int
)	O
)	O
{	O
rec_type_length	long
=	O
matches	struct
.	O
rm_eo	long
-	O
matches	struct
.	O
rm_so	long
;	O
rec_type	pointer
=	O
malloc	function
(	O
rec_type_length	long
+	O
1	int
)	O
;	O
memcpy	function
(	O
rec_type	pointer
,	O
str	pointer
+	O
matches	struct
.	O
rm_so	long
,	O
rec_type_length	long
)	O
;	O
rec_type	pointer
[	O
rec_type_length	long
]	O
=	O
'\0'	O
;	O
}	O
regfree	O
(	O
&	O
regexp	pointer
)	O
;	O
return	O
rec_type	pointer
;	O
}	O
bool	bool
rec_parse_int	function
(	O
const	O
char	O
*	O
*	O
str	pointer
,	O
int	O
*	O
num	pointer
)	O
{	O
bool	bool
ret	bool
;	O
const	O
char	O
*	O
p	pointer
,	O
*	O
b	pointer
;	O
char	O
number	pointer
[	O
30	int
]	O
;	O
ret	bool
=	O
true	int
;	O
p	pointer
=	O
*	O
str	pointer
;	O
b	pointer
=	O
p	pointer
;	O
while	O
(	O
rec_digit_p	function
(	O
*	O
p	pointer
)	O
||	O
(	O
(	O
p	pointer
==	O
b	pointer
)	O
&&	O
(	O
*	O
p	pointer
==	O
'-'	O
)	O
)	O
||	O
(	O
(	O
*	O
p	pointer
>=	O
'a'	O
)	O
&&	O
(	O
*	O
p	pointer
<=	O
'f'	O
)	O
)	O
||	O
(	O
(	O
*	O
p	pointer
>=	O
'A'	O
)	O
&&	O
(	O
*	O
p	pointer
<=	O
'F'	O
)	O
)	O
||	O
(	O
*	O
p	pointer
==	O
'x'	O
)	O
||	O
(	O
*	O
p	pointer
==	O
'X'	O
)	O
)	O
{	O
number	pointer
[	O
p	pointer
-	O
b	pointer
]	O
=	O
*	O
p	pointer
;	O
p	pointer
++	O
;	O
}	O
number	pointer
[	O
p	pointer
-	O
b	pointer
]	O
=	O
'\0'	O
;	O
if	O
(	O
!	O
rec_atoi	function
(	O
number	pointer
,	O
num	pointer
)	O
)	O
{	O
ret	bool
=	O
false	int
;	O
}	O
if	O
(	O
ret	bool
)	O
{	O
*	O
str	pointer
=	O
p	pointer
;	O
}	O
return	O
ret	bool
;	O
}	O
bool	bool
rec_parse_regexp	function
(	O
const	O
char	O
*	O
*	O
str	pointer
,	O
const	O
char	O
*	O
re	pointer
,	O
char	O
*	O
*	O
result	pointer
)	O
{	O
bool	bool
ret	bool
;	O
const	O
char	O
*	O
p	pointer
;	O
regex_t	struct
regexp	pointer
;	O
regmatch_t	struct
pm	struct
;	O
ret	bool
=	O
true	int
;	O
p	pointer
=	O
*	O
str	pointer
;	O
if	O
(	O
regcomp	O
(	O
&	O
regexp	pointer
,	O
re	pointer
,	O
REG_EXTENDED	int
)	O
!=	O
0	int
)	O
{	O
ret	bool
=	O
false	int
;	O
}	O
if	O
(	O
ret	bool
)	O
{	O
if	O
(	O
regexec	O
(	O
&	O
regexp	pointer
,	O
p	pointer
,	O
1	int
,	O
&	O
pm	struct
,	O
0	int
)	O
==	O
0	int
)	O
{	O
if	O
(	O
result	pointer
)	O
{	O
*	O
result	pointer
=	O
malloc	function
(	O
pm	struct
.	O
rm_eo	long
+	O
1	int
)	O
;	O
memcpy	function
(	O
*	O
result	pointer
,	O
p	pointer
,	O
pm	struct
.	O
rm_eo	long
)	O
;	O
(	O
*	O
result	pointer
)	O
[	O
pm	struct
.	O
rm_eo	long
]	O
=	O
'\0'	O
;	O
}	O
p	pointer
=	O
p	pointer
+	O
pm	struct
.	O
rm_eo	long
;	O
}	O
else	O
{	O
ret	bool
=	O
false	int
;	O
if	O
(	O
result	pointer
)	O
{	O
*	O
result	pointer
=	O
NULL	O
;	O
}	O
}	O
regfree	O
(	O
&	O
regexp	pointer
)	O
;	O
}	O
if	O
(	O
ret	bool
)	O
{	O
*	O
str	pointer
=	O
p	pointer
;	O
}	O
return	O
ret	bool
;	O
}	O
void	O
rec_skip_blanks	function
(	O
const	O
char	O
*	O
*	O
str	pointer
)	O
{	O
const	O
char	O
*	O
p	pointer
;	O
p	pointer
=	O
*	O
str	pointer
;	O
while	O
(	O
rec_blank_p	function
(	O
*	O
p	pointer
)	O
)	O
{	O
p	pointer
++	O
;	O
}	O
*	O
str	pointer
=	O
p	pointer
;	O
}	O
bool	bool
rec_blank_p	function
(	O
char	O
c	int
)	O
{	O
return	O
(	O
(	O
c	int
==	O
' '	O
)	O
||	O
(	O
c	int
==	O
'\n'	O
)	O
||	O
(	O
c	int
==	O
'\t'	O
)	O
)	O
;	O
}	O
bool	bool
rec_digit_p	function
(	O
char	O
c	int
)	O
{	O
return	O
(	O
(	O
c	int
>=	O
'0'	O
)	O
&&	O
(	O
c	int
<=	O
'9'	O
)	O
)	O
;	O
}	O
bool	bool
rec_letter_p	function
(	O
char	O
c	int
)	O
{	O
return	O
(	O
(	O
(	O
c	int
>=	O
'a'	O
)	O
&&	O
(	O
c	int
<=	O
'z'	O
)	O
)	O
||	O
(	O
(	O
c	int
>=	O
'A'	O
)	O
&&	O
(	O
c	int
<=	O
'Z'	O
)	O
)	O
)	O
;	O
}	O
static	O
bool	bool
rec_match_int	function
(	O
const	O
char	O
*	O
str	pointer
,	O
const	O
char	O
*	O
reg	pointer
,	O
int	O
flags	int
)	O
{	O
bool	bool
ret	bool
;	O
regex_t	struct
regexp	pointer
;	O
if	O
(	O
regcomp	O
(	O
&	O
regexp	pointer
,	O
reg	pointer
,	O
flags	int
)	O
!=	O
0	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"internal error: rec_match: error compiling regexp.\n"	pointer
)	O
)	O
;	O
return	O
false	int
;	O
}	O
ret	bool
=	O
(	O
regexec	O
(	O
&	O
regexp	pointer
,	O
str	pointer
,	O
0	int
,	O
NULL	O
,	O
0	int
)	O
==	O
0	int
)	O
;	O
regfree	O
(	O
&	O
regexp	pointer
)	O
;	O
return	O
ret	bool
;	O
}	O
bool	bool
rec_match	function
(	O
const	O
char	O
*	O
str	pointer
,	O
const	O
char	O
*	O
reg	pointer
)	O
{	O
return	O
rec_match_int	function
(	O
str	pointer
,	O
reg	pointer
,	O
REG_EXTENDED	int
)	O
;	O
}	O
bool	bool
rec_match_insensitive	function
(	O
const	O
char	O
*	O
str	pointer
,	O
const	O
char	O
*	O
reg	pointer
)	O
{	O
return	O
rec_match_int	function
(	O
str	pointer
,	O
reg	pointer
,	O
REG_EXTENDED	int
|	O
REG_ICASE	O
)	O
;	O
}	O
size_t	long
rec_extract_size	function
(	O
const	O
char	O
*	O
str	pointer
)	O
{	O
const	O
char	O
*	O
p	pointer
;	O
char	O
*	O
condition_str	pointer
;	O
int	O
res	bool
;	O
if	O
(	O
!	O
rec_match	function
(	O
str	pointer
,	O
REC_INT_SIZE_RE	O
)	O
)	O
{	O
return	O
0	int
;	O
}	O
p	pointer
=	O
str	pointer
;	O
rec_skip_blanks	function
(	O
&	O
p	pointer
)	O
;	O
rec_parse_regexp	function
(	O
&	O
p	pointer
,	O
"^[><]=?"	pointer
,	O
&	O
condition_str	pointer
)	O
;	O
rec_skip_blanks	function
(	O
&	O
p	pointer
)	O
;	O
rec_parse_int	function
(	O
&	O
p	pointer
,	O
&	O
res	bool
)	O
;	O
return	O
(	O
size_t	long
)	O
res	bool
;	O
}	O
enum	O
rec_size_condition_e	enum
rec_extract_size_condition	function
(	O
const	O
char	O
*	O
str	pointer
)	O
{	O
const	O
char	O
*	O
p	pointer
;	O
char	O
*	O
condition_str	pointer
=	O
NULL	O
;	O
enum	O
rec_size_condition_e	enum
condition	enum
;	O
if	O
(	O
!	O
rec_match	function
(	O
str	pointer
,	O
REC_INT_SIZE_RE	O
)	O
)	O
{	O
return	O
SIZE_COND_E	int
;	O
}	O
p	pointer
=	O
str	pointer
;	O
rec_skip_blanks	function
(	O
&	O
p	pointer
)	O
;	O
rec_parse_regexp	function
(	O
&	O
p	pointer
,	O
"^[><]=?"	pointer
,	O
&	O
condition_str	pointer
)	O
;	O
if	O
(	O
condition_str	pointer
)	O
{	O
if	O
(	O
strcmp	function
(	O
condition_str	pointer
,	O
">"	pointer
)	O
==	O
0	int
)	O
{	O
condition	enum
=	O
SIZE_COND_G	int
;	O
}	O
else	O
if	O
(	O
strcmp	function
(	O
condition_str	pointer
,	O
">="	pointer
)	O
==	O
0	int
)	O
{	O
condition	enum
=	O
SIZE_COND_GE	int
;	O
}	O
else	O
if	O
(	O
strcmp	function
(	O
condition_str	pointer
,	O
"<"	pointer
)	O
==	O
0	int
)	O
{	O
condition	enum
=	O
SIZE_COND_L	int
;	O
}	O
else	O
if	O
(	O
strcmp	function
(	O
condition_str	pointer
,	O
"<="	pointer
)	O
==	O
0	int
)	O
{	O
condition	enum
=	O
SIZE_COND_LE	int
;	O
}	O
else	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"internal error: rec_extract_size_condition: invalid condition.\n"	pointer
)	O
;	O
return	O
SIZE_COND_E	int
;	O
}	O
free	function
(	O
condition_str	pointer
)	O
;	O
}	O
else	O
{	O
condition	enum
=	O
SIZE_COND_E	int
;	O
}	O
return	O
condition	enum
;	O
}	O
int	O
rec_timespec_subtract	function
(	O
struct	O
timespec	struct
*	O
result	pointer
,	O
struct	O
timespec	struct
*	O
x	pointer
,	O
struct	O
timespec	struct
*	O
y	pointer
)	O
{	O
result	pointer
->	O
tv_sec	long
=	O
x	pointer
->	O
tv_sec	long
-	O
y	pointer
->	O
tv_sec	long
;	O
result	pointer
->	O
tv_nsec	long
=	O
x	pointer
->	O
tv_nsec	long
-	O
y	pointer
->	O
tv_nsec	long
;	O
if	O
(	O
result	pointer
->	O
tv_nsec	long
<	O
0	int
)	O
{	O
result	pointer
->	O
tv_sec	long
--	O
;	O
result	pointer
->	O
tv_nsec	long
+=	O
1000000000	int
;	O
}	O
return	O
(	O
result	pointer
->	O
tv_sec	long
<	O
0	int
)	O
;	O
}	O
uint32_t	int
rec_endian_swap	function
(	O
uint32_t	int
number	pointer
)	O
{	O
uint32_t	int
res	bool
;	O
res	bool
=	O
(	O
number	pointer
>>	O
24	int
)	O
|	O
(	O
(	O
number	pointer
<<	O
8	int
)	O
&	O
0x00FF0000	int
)	O
|	O
(	O
(	O
number	pointer
>>	O
8	int
)	O
&	O
0x0000FF00	int
)	O
|	O
(	O
number	pointer
<<	O
24	int
)	O
;	O
return	O
res	bool
;	O
}	O
char	O
*	O
rec_concat_strings	function
(	O
const	O
char	O
*	O
str1	pointer
,	O
const	O
char	O
*	O
str2	pointer
,	O
const	O
char	O
*	O
str3	pointer
)	O
{	O
char	O
*	O
res	bool
=	O
malloc	function
(	O
strlen	function
(	O
str1	pointer
)	O
+	O
strlen	function
(	O
str2	pointer
)	O
+	O
strlen	function
(	O
str3	pointer
)	O
+	O
1	int
)	O
;	O
if	O
(	O
res	bool
)	O
{	O
memcpy	function
(	O
res	bool
,	O
str1	pointer
,	O
strlen	function
(	O
str1	pointer
)	O
)	O
;	O
memcpy	function
(	O
res	bool
+	O
strlen	function
(	O
str1	pointer
)	O
,	O
str2	pointer
,	O
strlen	function
(	O
str2	pointer
)	O
)	O
;	O
memcpy	function
(	O
res	bool
+	O
strlen	function
(	O
str1	pointer
)	O
+	O
strlen	function
(	O
str2	pointer
)	O
,	O
str3	pointer
,	O
strlen	function
(	O
str3	pointer
)	O
+	O
1	int
)	O
;	O
}	O
return	O
res	bool
;	O
}	O
