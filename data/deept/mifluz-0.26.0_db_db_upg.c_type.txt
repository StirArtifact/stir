static	O
const	O
char	O
revid	array
[	O
]	O
=	O
"$Id: db_upg.c,v 1.1 2000/06/28 16:47:01 loic Exp $"	pointer
;	O
static	O
int	O
(	O
*	O
const	O
func_31_list	array
[	O
P_PAGETYPE_MAX	int
]	O
)	O
__P	O
(	O
(	O
DB	struct
*	O
,	O
char	O
*	O
,	O
u_int32_t	int
,	O
DB_FH	struct
*	O
,	O
PAGE	struct
*	O
,	O
int	O
*	O
)	O
)	O
=	O
{	O
NULL	O
,	O
NULL	O
,	O
CDB___ham_31_hash	function
,	O
NULL	O
,	O
NULL	O
,	O
CDB___bam_31_lbtree	function
,	O
NULL	O
,	O
NULL	O
,	O
CDB___ham_31_hashmeta	function
,	O
CDB___bam_31_btreemeta	function
,	O
}	O
;	O
static	O
int	O
__db_page_pass	function
__P	O
(	O
(	O
DB	struct
*	O
,	O
char	O
*	O
,	O
u_int32_t	int
,	O
int	O
(	O
*	O
const	O
[	O
]	O
)	O
(	O
DB	struct
*	O
,	O
char	O
*	O
,	O
u_int32_t	int
,	O
DB_FH	struct
*	O
,	O
PAGE	struct
*	O
,	O
int	O
*	O
)	O
,	O
DB_FH	struct
*	O
)	O
)	O
;	O
int	O
CDB___db_upgrade	function
(	O
dbp	pointer
,	O
fname	pointer
,	O
flags	int
)	O
DB	struct
*	O
dbp	pointer
;	O
const	O
char	O
*	O
fname	pointer
;	O
u_int32_t	int
flags	int
;	O
{	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
DB_FH	struct
fh	struct
;	O
size_t	long
n	long
;	O
int	O
ret	int
,	O
t_ret	int
;	O
u_int8_t	char
mbuf	array
[	O
256	int
]	O
;	O
char	O
*	O
real_name	pointer
;	O
dbenv	pointer
=	O
dbp	pointer
->	O
dbenv	pointer
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___db_fchk	function
(	O
dbenv	pointer
,	O
"DB->upgrade"	pointer
,	O
flags	int
,	O
DB_DUPSORT	int
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___db_appname	function
(	O
dbenv	pointer
,	O
DB_APP_DATA	int
,	O
NULL	O
,	O
fname	pointer
,	O
0	int
,	O
NULL	O
,	O
&	O
real_name	pointer
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___os_open	function
(	O
dbenv	pointer
,	O
real_name	pointer
,	O
0	int
,	O
0	int
,	O
&	O
fh	struct
)	O
)	O
!=	O
0	int
)	O
{	O
CDB___db_err	function
(	O
dbenv	pointer
,	O
"%s: %s"	pointer
,	O
real_name	pointer
,	O
CDB_db_strerror	function
(	O
ret	int
)	O
)	O
;	O
return	O
(	O
ret	int
)	O
;	O
}	O
if	O
(	O
dbp	pointer
->	O
db_feedback	pointer
!=	O
NULL	O
)	O
dbp	pointer
->	O
db_feedback	pointer
(	O
dbp	pointer
,	O
DB_UPGRADE	int
,	O
0	int
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___os_read	function
(	O
dbenv	pointer
,	O
&	O
fh	struct
,	O
mbuf	array
,	O
sizeof	O
(	O
mbuf	array
)	O
,	O
&	O
n	long
)	O
)	O
!=	O
0	int
)	O
goto	O
err	pointer
;	O
switch	O
(	O
(	O
(	O
DBMETA	struct
*	O
)	O
mbuf	array
)	O
->	O
magic	int
)	O
{	O
case	O
DB_BTREEMAGIC	int
:	O
switch	O
(	O
(	O
(	O
DBMETA	struct
*	O
)	O
mbuf	array
)	O
->	O
version	int
)	O
{	O
case	O
6	int
:	O
if	O
(	O
(	O
ret	int
=	O
CDB___bam_30_btreemeta	function
(	O
dbp	pointer
,	O
real_name	pointer
,	O
mbuf	array
)	O
)	O
!=	O
0	int
)	O
goto	O
err	pointer
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___os_seek	function
(	O
dbenv	pointer
,	O
&	O
fh	struct
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
DB_OS_SEEK_SET	int
)	O
)	O
!=	O
0	int
)	O
goto	O
err	pointer
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___os_write	function
(	O
dbenv	pointer
,	O
&	O
fh	struct
,	O
mbuf	array
,	O
256	int
,	O
&	O
n	long
)	O
)	O
!=	O
0	int
)	O
goto	O
err	pointer
;	O
case	O
7	int
:	O
memcpy	function
(	O
&	O
dbp	pointer
->	O
pgsize	int
,	O
mbuf	array
+	O
20	int
,	O
sizeof	O
(	O
u_int32_t	int
)	O
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
__db_page_pass	function
(	O
dbp	pointer
,	O
real_name	pointer
,	O
flags	int
,	O
func_31_list	array
,	O
&	O
fh	struct
)	O
)	O
!=	O
0	int
)	O
goto	O
err	pointer
;	O
case	O
8	int
:	O
break	O
;	O
default	O
:	O
CDB___db_err	function
(	O
dbenv	pointer
,	O
"%s: unsupported btree version: %lu"	pointer
,	O
real_name	pointer
,	O
(	O
u_long	long
)	O
(	O
(	O
DBMETA	struct
*	O
)	O
mbuf	array
)	O
->	O
version	int
)	O
;	O
ret	int
=	O
DB_OLD_VERSION	O
;	O
goto	O
err	pointer
;	O
}	O
break	O
;	O
case	O
DB_HASHMAGIC	int
:	O
switch	O
(	O
(	O
(	O
DBMETA	struct
*	O
)	O
mbuf	array
)	O
->	O
version	int
)	O
{	O
case	O
4	int
:	O
case	O
5	int
:	O
if	O
(	O
(	O
ret	int
=	O
CDB___ham_30_hashmeta	function
(	O
dbp	pointer
,	O
real_name	pointer
,	O
mbuf	array
)	O
)	O
!=	O
0	int
)	O
goto	O
err	pointer
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___os_seek	function
(	O
dbenv	pointer
,	O
&	O
fh	struct
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
DB_OS_SEEK_SET	int
)	O
)	O
!=	O
0	int
)	O
goto	O
err	pointer
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___os_write	function
(	O
dbenv	pointer
,	O
&	O
fh	struct
,	O
mbuf	array
,	O
256	int
,	O
&	O
n	long
)	O
)	O
!=	O
0	int
)	O
goto	O
err	pointer
;	O
case	O
6	int
:	O
memcpy	function
(	O
&	O
dbp	pointer
->	O
pgsize	int
,	O
mbuf	array
+	O
20	int
,	O
sizeof	O
(	O
u_int32_t	int
)	O
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
__db_page_pass	function
(	O
dbp	pointer
,	O
real_name	pointer
,	O
flags	int
,	O
func_31_list	array
,	O
&	O
fh	struct
)	O
)	O
!=	O
0	int
)	O
goto	O
err	pointer
;	O
case	O
7	int
:	O
break	O
;	O
default	O
:	O
CDB___db_err	function
(	O
dbenv	pointer
,	O
"%s: unsupported hash version: %lu"	pointer
,	O
real_name	pointer
,	O
(	O
u_long	long
)	O
(	O
(	O
DBMETA	struct
*	O
)	O
mbuf	array
)	O
->	O
version	int
)	O
;	O
ret	int
=	O
DB_OLD_VERSION	O
;	O
goto	O
err	pointer
;	O
}	O
break	O
;	O
case	O
DB_QAMMAGIC	int
:	O
switch	O
(	O
(	O
(	O
DBMETA	struct
*	O
)	O
mbuf	array
)	O
->	O
version	int
)	O
{	O
case	O
1	int
:	O
if	O
(	O
(	O
ret	int
=	O
CDB___qam_31_qammeta	function
(	O
dbp	pointer
,	O
real_name	pointer
,	O
mbuf	array
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___os_seek	function
(	O
dbenv	pointer
,	O
&	O
fh	struct
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
DB_OS_SEEK_SET	int
)	O
)	O
!=	O
0	int
)	O
goto	O
err	pointer
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___os_write	function
(	O
dbenv	pointer
,	O
&	O
fh	struct
,	O
mbuf	array
,	O
256	int
,	O
&	O
n	long
)	O
)	O
!=	O
0	int
)	O
goto	O
err	pointer
;	O
case	O
2	int
:	O
break	O
;	O
default	O
:	O
CDB___db_err	function
(	O
dbenv	pointer
,	O
"%s: unsupported queue version: %lu"	pointer
,	O
real_name	pointer
,	O
(	O
u_long	long
)	O
(	O
(	O
DBMETA	struct
*	O
)	O
mbuf	array
)	O
->	O
version	int
)	O
;	O
ret	int
=	O
DB_OLD_VERSION	O
;	O
goto	O
err	pointer
;	O
}	O
break	O
;	O
default	O
:	O
M_32_SWAP	O
(	O
(	O
(	O
DBMETA	struct
*	O
)	O
mbuf	array
)	O
->	O
magic	int
)	O
;	O
switch	O
(	O
(	O
(	O
DBMETA	struct
*	O
)	O
mbuf	array
)	O
->	O
magic	int
)	O
{	O
case	O
DB_BTREEMAGIC	int
:	O
case	O
DB_HASHMAGIC	int
:	O
case	O
DB_QAMMAGIC	int
:	O
CDB___db_err	function
(	O
dbenv	pointer
,	O
"%s: DB->upgrade only supported on native byte-order systems"	pointer
,	O
real_name	pointer
)	O
;	O
break	O
;	O
default	O
:	O
CDB___db_err	function
(	O
dbenv	pointer
,	O
"%s: unrecognized file type"	pointer
,	O
real_name	pointer
)	O
;	O
break	O
;	O
}	O
ret	int
=	O
EINVAL	int
;	O
goto	O
err	pointer
;	O
}	O
ret	int
=	O
CDB___os_fsync	function
(	O
dbenv	pointer
,	O
&	O
fh	struct
)	O
;	O
err	pointer
:	O
if	O
(	O
(	O
t_ret	int
=	O
CDB___os_closehandle	function
(	O
&	O
fh	struct
)	O
)	O
!=	O
0	int
&&	O
ret	int
==	O
0	int
)	O
ret	int
=	O
t_ret	int
;	O
CDB___os_freestr	function
(	O
real_name	pointer
)	O
;	O
if	O
(	O
dbp	pointer
->	O
db_feedback	pointer
!=	O
NULL	O
)	O
dbp	pointer
->	O
db_feedback	pointer
(	O
dbp	pointer
,	O
DB_UPGRADE	int
,	O
100	int
)	O
;	O
return	O
(	O
ret	int
)	O
;	O
}	O
static	O
int	O
__db_page_pass	function
(	O
dbp	pointer
,	O
real_name	pointer
,	O
flags	int
,	O
fl	array
,	O
fhp	pointer
)	O
DB	struct
*	O
dbp	pointer
;	O
char	O
*	O
real_name	pointer
;	O
u_int32_t	int
flags	int
;	O
int	O
(	O
*	O
const	O
fl	array
[	O
P_PAGETYPE_MAX	int
]	O
)	O
__P	O
(	O
(	O
DB	struct
*	O
,	O
char	O
*	O
,	O
u_int32_t	int
,	O
DB_FH	struct
*	O
,	O
PAGE	struct
*	O
,	O
int	O
*	O
)	O
)	O
;	O
DB_FH	struct
*	O
fhp	pointer
;	O
{	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
PAGE	struct
*	O
page	pointer
;	O
db_pgno_t	int
i	int
,	O
pgno_last	int
;	O
size_t	long
n	long
;	O
int	O
dirty	int
,	O
ret	int
;	O
dbenv	pointer
=	O
dbp	pointer
->	O
dbenv	pointer
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___db_lastpgno	function
(	O
dbp	pointer
,	O
real_name	pointer
,	O
fhp	pointer
,	O
&	O
pgno_last	int
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___os_malloc	function
(	O
dbenv	pointer
,	O
dbp	pointer
->	O
pgsize	int
,	O
NULL	O
,	O
&	O
page	pointer
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
pgno_last	int
;	O
++	O
i	int
)	O
{	O
if	O
(	O
dbp	pointer
->	O
db_feedback	pointer
!=	O
NULL	O
)	O
dbp	pointer
->	O
db_feedback	pointer
(	O
dbp	pointer
,	O
DB_UPGRADE	int
,	O
(	O
i	int
*	O
100	int
)	O
/	O
pgno_last	int
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___os_seek	function
(	O
dbenv	pointer
,	O
fhp	pointer
,	O
dbp	pointer
->	O
pgsize	int
,	O
i	int
,	O
0	int
,	O
0	int
,	O
DB_OS_SEEK_SET	int
)	O
)	O
!=	O
0	int
)	O
break	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___os_read	function
(	O
dbenv	pointer
,	O
fhp	pointer
,	O
page	pointer
,	O
dbp	pointer
->	O
pgsize	int
,	O
&	O
n	long
)	O
)	O
!=	O
0	int
)	O
break	O
;	O
dirty	int
=	O
0	int
;	O
if	O
(	O
fl	array
[	O
TYPE	O
(	O
page	pointer
)	O
]	O
!=	O
NULL	O
&&	O
(	O
ret	int
=	O
fl	array
[	O
TYPE	O
(	O
page	pointer
)	O
]	O
(	O
dbp	pointer
,	O
real_name	pointer
,	O
flags	int
,	O
fhp	pointer
,	O
page	pointer
,	O
&	O
dirty	int
)	O
)	O
!=	O
0	int
)	O
break	O
;	O
if	O
(	O
dirty	int
)	O
{	O
if	O
(	O
(	O
ret	int
=	O
CDB___os_seek	function
(	O
dbenv	pointer
,	O
fhp	pointer
,	O
dbp	pointer
->	O
pgsize	int
,	O
i	int
,	O
0	int
,	O
0	int
,	O
DB_OS_SEEK_SET	int
)	O
)	O
!=	O
0	int
)	O
break	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___os_write	function
(	O
dbenv	pointer
,	O
fhp	pointer
,	O
page	pointer
,	O
dbp	pointer
->	O
pgsize	int
,	O
&	O
n	long
)	O
)	O
!=	O
0	int
)	O
break	O
;	O
}	O
}	O
CDB___os_free	function
(	O
page	pointer
,	O
dbp	pointer
->	O
pgsize	int
)	O
;	O
return	O
(	O
ret	int
)	O
;	O
}	O
int	O
CDB___db_lastpgno	function
(	O
dbp	pointer
,	O
real_name	pointer
,	O
fhp	pointer
,	O
pgno_lastp	pointer
)	O
DB	struct
*	O
dbp	pointer
;	O
char	O
*	O
real_name	pointer
;	O
DB_FH	struct
*	O
fhp	pointer
;	O
db_pgno_t	int
*	O
pgno_lastp	pointer
;	O
{	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
db_pgno_t	int
pgno_last	int
;	O
u_int32_t	int
mbytes	int
,	O
bytes	long
;	O
int	O
ret	int
;	O
dbenv	pointer
=	O
dbp	pointer
->	O
dbenv	pointer
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___os_ioinfo	function
(	O
dbenv	pointer
,	O
real_name	pointer
,	O
fhp	pointer
,	O
&	O
mbytes	int
,	O
&	O
bytes	long
,	O
NULL	O
)	O
)	O
!=	O
0	int
)	O
{	O
CDB___db_err	function
(	O
dbenv	pointer
,	O
"%s: %s"	pointer
,	O
real_name	pointer
,	O
CDB_db_strerror	function
(	O
ret	int
)	O
)	O
;	O
return	O
(	O
ret	int
)	O
;	O
}	O
if	O
(	O
bytes	long
%	O
dbp	pointer
->	O
pgsize	int
!=	O
0	int
)	O
{	O
CDB___db_err	function
(	O
dbenv	pointer
,	O
"%s: file size not a multiple of the pagesize"	pointer
,	O
real_name	pointer
)	O
;	O
return	O
(	O
EINVAL	int
)	O
;	O
}	O
pgno_last	int
=	O
mbytes	int
*	O
(	O
MEGABYTE	int
/	O
dbp	pointer
->	O
pgsize	int
)	O
;	O
pgno_last	int
+=	O
bytes	long
/	O
dbp	pointer
->	O
pgsize	int
;	O
*	O
pgno_lastp	pointer
=	O
pgno_last	int
;	O
return	O
(	O
0	int
)	O
;	O
}	O
