extern	O
bool_t	int
xdr_dis_pdu	function
(	O
XDR	struct
*	O
xdrs	pointer
,	O
dis_pdu	union
*	O
objp	pointer
)	O
;	O
extern	O
void	O
xdrumem_create	function
(	O
register	O
XDR	struct
*	O
xdrs	pointer
,	O
caddr_t	pointer
addr	struct
,	O
u_int	int
size	int
,	O
enum	O
xdr_op	enum
op	enum
)	O
;	O
int	O
DISReadPDU	function
(	O
DISTransceiver	struct
*	O
xcvr	pointer
,	O
dis_pdu	union
*	O
pdu	struct
)	O
{	O
char	O
buffer	array
[	O
2048	int
]	O
;	O
int	O
size	int
;	O
XDR	struct
xdr	struct
;	O
size	int
=	O
recv	function
(	O
xcvr	pointer
->	O
s	array
,	O
buffer	array
,	O
sizeof	O
(	O
buffer	array
)	O
,	O
0	int
)	O
;	O
if	O
(	O
size	int
==	O
-	O
1	int
)	O
{	O
return	O
size	int
;	O
}	O
size	int
=	O
(	O
(	O
size	int
+	O
3	int
)	O
/	O
4	int
)	O
*	O
4	int
;	O
xdrumem_create	function
(	O
&	O
xdr	struct
,	O
buffer	array
,	O
size	int
,	O
XDR_DECODE	int
)	O
;	O
xdr_dis_pdu	function
(	O
&	O
xdr	struct
,	O
pdu	struct
)	O
;	O
return	O
0	int
;	O
}	O
int	O
DISWritePDU	function
(	O
DISTransceiver	struct
*	O
xcvr	pointer
,	O
dis_pdu	union
*	O
pdu	struct
)	O
{	O
char	O
buffer	array
[	O
2048	int
]	O
,	O
*	O
p	pointer
;	O
XDR	struct
xdr	struct
;	O
int	O
i	int
,	O
result	char
,	O
len	int
;	O
DISAddPDUSizes	function
(	O
pdu	struct
)	O
;	O
xdrumem_create	function
(	O
&	O
xdr	struct
,	O
(	O
char	O
*	O
)	O
&	O
buffer	array
,	O
sizeof	O
(	O
buffer	array
)	O
,	O
XDR_ENCODE	int
)	O
;	O
xdr_dis_pdu	function
(	O
&	O
xdr	struct
,	O
pdu	struct
)	O
;	O
len	int
=	O
xdr_getpos	O
(	O
&	O
xdr	struct
)	O
;	O
p	pointer
=	O
buffer	array
+	O
8	int
;	O
*	O
(	O
(	O
u_short	short
*	O
)	O
p	pointer
)	O
=	O
htons	function
(	O
len	int
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
xcvr	pointer
->	O
num_dest	int
;	O
++	O
i	int
)	O
{	O
if	O
(	O
(	O
result	char
=	O
sendto	function
(	O
xcvr	pointer
->	O
s	array
,	O
buffer	array
,	O
xdr_getpos	O
(	O
&	O
xdr	struct
)	O
,	O
0	int
,	O
(	O
struct	O
sockaddr	struct
*	O
)	O
&	O
xcvr	pointer
->	O
dest	array
[	O
i	int
]	O
.	O
addr	struct
,	O
sizeof	O
(	O
struct	O
sockaddr	struct
)	O
)	O
)	O
==	O
-	O
1	int
)	O
{	O
perror	function
(	O
"on sendto"	pointer
)	O
;	O
}	O
}	O
;	O
return	O
0	int
;	O
}	O
DISTransceiver	struct
*	O
DISOpenTransceiver	function
(	O
int	O
port	int
)	O
{	O
struct	O
ifconf	struct
ifc	struct
;	O
struct	O
ifreq	struct
*	O
ifr	pointer
;	O
struct	O
sockaddr_in	struct
sin	function
;	O
char	O
buf	pointer
[	O
BUFSIZ	int
]	O
;	O
int	O
s	array
,	O
n	int
,	O
i	int
=	O
0	int
;	O
int	O
on	int
=	O
1	int
;	O
DISTransceiver	struct
*	O
xcvr	pointer
;	O
struct	O
hostent	struct
*	O
relay_hp	pointer
;	O
char	O
*	O
relay	pointer
;	O
if	O
(	O
port	int
==	O
-	O
1	int
)	O
{	O
port	int
=	O
3000	int
;	O
}	O
xcvr	pointer
=	O
(	O
DISTransceiver	struct
*	O
)	O
malloc	function
(	O
sizeof	O
(	O
DISTransceiver	struct
)	O
)	O
;	O
xcvr	pointer
->	O
s	array
=	O
0	int
;	O
xcvr	pointer
->	O
num_dest	int
=	O
0	int
;	O
if	O
(	O
(	O
s	array
=	O
socket	function
(	O
AF_INET	O
,	O
SOCK_DGRAM	int
,	O
0	int
)	O
)	O
==	O
INVALID_SOCKET	O
)	O
{	O
perror	function
(	O
"position update socket"	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
if	O
(	O
setsockopt	function
(	O
s	array
,	O
SOL_SOCKET	int
,	O
SO_BROADCAST	int
,	O
(	O
char	O
*	O
)	O
&	O
on	int
,	O
sizeof	O
(	O
on	int
)	O
)	O
==	O
SOCKET_ERROR	O
)	O
{	O
perror	function
(	O
"can't set broadcast flag"	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
if	O
(	O
setsockopt	function
(	O
s	array
,	O
SOL_SOCKET	int
,	O
SO_REUSEADDR	int
,	O
(	O
char	O
*	O
)	O
&	O
on	int
,	O
sizeof	O
(	O
on	int
)	O
)	O
==	O
SOCKET_ERROR	O
)	O
{	O
perror	function
(	O
"can't reuse broadcast port"	pointer
)	O
;	O
}	O
sin	function
.	O
sin_family	short
=	O
AF_INET	O
;	O
sin	function
.	O
sin_addr	struct
.	O
s_addr	int
=	O
htonl	function
(	O
INADDR_ANY	O
)	O
;	O
sin	function
.	O
sin_port	short
=	O
htons	function
(	O
port	int
)	O
;	O
bind	function
(	O
s	array
,	O
(	O
struct	O
sockaddr	struct
*	O
)	O
&	O
sin	function
,	O
sizeof	O
(	O
sin	function
)	O
)	O
;	O
xcvr	pointer
->	O
s	array
=	O
s	array
;	O
if	O
(	O
(	O
relay	pointer
=	O
getenv	function
(	O
"DIS_RELAY"	pointer
)	O
)	O
!=	O
(	O
char	O
*	O
)	O
NULL	O
)	O
{	O
if	O
(	O
(	O
relay_hp	pointer
=	O
gethostbyname	function
(	O
relay	pointer
)	O
)	O
==	O
(	O
struct	O
hostent	struct
*	O
)	O
NULL	O
)	O
{	O
close	function
(	O
s	array
)	O
;	O
return	O
0	int
;	O
}	O
if	O
(	O
relay_hp	pointer
->	O
h_addrtype	int
!=	O
AF_INET	O
)	O
{	O
close	function
(	O
s	array
)	O
;	O
return	O
0	int
;	O
}	O
xcvr	pointer
->	O
dest	array
[	O
0	int
]	O
.	O
addr	struct
.	O
sin_family	short
=	O
relay_hp	pointer
->	O
h_addrtype	int
;	O
bcopy	function
(	O
(	O
char	O
*	O
)	O
relay_hp	pointer
->	O
h_addr	O
,	O
(	O
char	O
*	O
)	O
&	O
xcvr	pointer
->	O
dest	array
[	O
0	int
]	O
.	O
addr	struct
.	O
sin_addr	struct
,	O
sizeof	O
(	O
relay_hp	pointer
->	O
h_addr	O
)	O
)	O
;	O
xcvr	pointer
->	O
dest	array
[	O
0	int
]	O
.	O
addr	struct
.	O
sin_port	short
=	O
htons	function
(	O
port	int
)	O
;	O
xcvr	pointer
->	O
dest	array
[	O
0	int
]	O
.	O
type	int
=	O
1	int
;	O
xcvr	pointer
->	O
num_dest	int
=	O
1	int
;	O
return	O
xcvr	pointer
;	O
}	O
ifc	struct
.	O
ifc_len	int
=	O
BUFSIZ	int
;	O
ifc	struct
.	O
ifc_buf	O
=	O
buf	pointer
;	O
if	O
(	O
ioctl	function
(	O
s	array
,	O
SIOCGIFCONF	int
,	O
(	O
char	O
*	O
)	O
&	O
ifc	struct
)	O
<	O
0	int
)	O
{	O
perror	function
(	O
"error getting interface configuration"	pointer
)	O
;	O
close	function
(	O
s	array
)	O
;	O
return	O
NULL	O
;	O
}	O
n	int
=	O
ifc	struct
.	O
ifc_len	int
/	O
sizeof	O
(	O
struct	O
ifreq	struct
)	O
;	O
if	O
(	O
n	int
>	O
32	int
)	O
{	O
return	O
NULL	O
;	O
}	O
for	O
(	O
ifr	pointer
=	O
ifc	struct
.	O
ifc_req	O
;	O
--	O
n	int
>=	O
0	int
;	O
ifr	pointer
++	O
)	O
{	O
if	O
(	O
ifr	pointer
->	O
ifr_addr	O
.	O
sa_family	short
!=	O
AF_INET	O
)	O
continue	O
;	O
if	O
(	O
ioctl	function
(	O
s	array
,	O
SIOCGIFFLAGS	int
,	O
(	O
char	O
*	O
)	O
ifr	pointer
)	O
<	O
0	int
)	O
{	O
perror	function
(	O
"error getting interface flags"	pointer
)	O
;	O
close	function
(	O
s	array
)	O
;	O
return	O
NULL	O
;	O
}	O
if	O
(	O
(	O
ifr	pointer
->	O
ifr_flags	O
&	O
IFF_UP	int
)	O
==	O
0	int
||	O
(	O
ifr	pointer
->	O
ifr_flags	O
&	O
IFF_LOOPBACK	int
)	O
||	O
(	O
ifr	pointer
->	O
ifr_flags	O
&	O
(	O
IFF_BROADCAST	int
|	O
IFF_POINTOPOINT	int
)	O
)	O
==	O
0	int
)	O
continue	O
;	O
if	O
(	O
ifr	pointer
->	O
ifr_flags	O
&	O
IFF_POINTOPOINT	int
)	O
{	O
if	O
(	O
ioctl	function
(	O
s	array
,	O
SIOCGIFDSTADDR	int
,	O
(	O
char	O
*	O
)	O
ifr	pointer
)	O
<	O
0	int
)	O
{	O
close	function
(	O
s	array
)	O
;	O
perror	function
(	O
"error getting address"	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
bcopy	function
(	O
(	O
char	O
*	O
)	O
&	O
ifr	pointer
->	O
ifr_dstaddr	O
,	O
(	O
char	O
*	O
)	O
&	O
xcvr	pointer
->	O
dest	array
[	O
i	int
]	O
.	O
addr	struct
,	O
sizeof	O
(	O
ifr	pointer
->	O
ifr_dstaddr	O
)	O
)	O
;	O
}	O
else	O
if	O
(	O
ifr	pointer
->	O
ifr_flags	O
&	O
IFF_BROADCAST	int
)	O
{	O
if	O
(	O
ioctl	function
(	O
s	array
,	O
SIOCGIFBRDADDR	int
,	O
(	O
char	O
*	O
)	O
ifr	pointer
)	O
<	O
0	int
)	O
{	O
close	function
(	O
s	array
)	O
;	O
perror	function
(	O
"error getting broadcast address"	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
bcopy	function
(	O
(	O
char	O
*	O
)	O
&	O
ifr	pointer
->	O
ifr_broadaddr	O
,	O
(	O
char	O
*	O
)	O
&	O
xcvr	pointer
->	O
dest	array
[	O
i	int
]	O
.	O
addr	struct
,	O
sizeof	O
(	O
ifr	pointer
->	O
ifr_broadaddr	O
)	O
)	O
;	O
}	O
xcvr	pointer
->	O
dest	array
[	O
i	int
]	O
.	O
addr	struct
.	O
sin_port	short
=	O
htons	function
(	O
port	int
)	O
;	O
xcvr	pointer
->	O
dest	array
[	O
i	int
]	O
.	O
type	int
=	O
0	int
;	O
i	int
++	O
;	O
}	O
xcvr	pointer
->	O
num_dest	int
=	O
i	int
;	O
return	O
xcvr	pointer
;	O
}	O
void	O
DISCloseTransceiver	function
(	O
DISTransceiver	struct
*	O
xcvr	pointer
)	O
{	O
close	function
(	O
xcvr	pointer
->	O
s	array
)	O
;	O
free	function
(	O
xcvr	pointer
)	O
;	O
}	O
int	O
DISSetNBIOState	function
(	O
DISTransceiver	struct
*	O
xcvr	pointer
,	O
int	O
state	pointer
)	O
{	O
int	O
i	int
;	O
i	int
=	O
(	O
state	pointer
)	O
?	O
1	int
:	O
0	int
;	O
if	O
(	O
ioctl	function
(	O
xcvr	pointer
->	O
s	array
,	O
FIONBIO	int
,	O
&	O
i	int
)	O
!=	O
0	int
)	O
{	O
return	O
-	O
1	int
;	O
}	O
return	O
0	int
;	O
}	O
