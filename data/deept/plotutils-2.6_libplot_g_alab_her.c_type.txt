static	O
bool	enum
composite_char	function
(	O
unsigned	O
char	O
*	O
composite	char
,	O
unsigned	O
char	O
*	O
character	char
,	O
unsigned	O
char	O
*	O
accent	char
)	O
;	O
static	O
double	O
label_width_hershey	function
(	O
const	O
unsigned	O
short	O
*	O
label	pointer
)	O
;	O
double	O
_pl_g_alabel_hershey	function
(	O
R___	O
(	O
Plotter	struct
*	O
_plotter	pointer
)	O
const	O
unsigned	O
char	O
*	O
s	pointer
,	O
int	O
x_justify	int
,	O
int	O
y_justify	int
)	O
{	O
unsigned	O
short	O
*	O
codestring	pointer
;	O
char	O
x_justify_c	char
,	O
y_justify_c	char
;	O
double	O
label_width	double
,	O
label_height	double
;	O
double	O
x_offset	double
,	O
y_offset	double
;	O
double	O
x_displacement	double
;	O
double	O
postdx	double
,	O
dx	int
,	O
dy	int
;	O
double	O
theta	double
;	O
codestring	pointer
=	O
_pl_g_controlify	function
(	O
R___	O
(	O
_plotter	pointer
)	O
s	pointer
)	O
;	O
label_width	double
=	O
HERSHEY_UNITS_TO_USER_UNITS	O
(	O
label_width_hershey	function
(	O
codestring	pointer
)	O
)	O
;	O
label_height	double
=	O
HERSHEY_UNITS_TO_USER_UNITS	O
(	O
HERSHEY_HEIGHT	O
)	O
;	O
x_justify_c	char
=	O
(	O
char	O
)	O
x_justify	int
;	O
y_justify_c	char
=	O
(	O
char	O
)	O
y_justify	int
;	O
switch	O
(	O
x_justify_c	char
)	O
{	O
case	O
'l'	O
:	O
default	O
:	O
x_offset	double
=	O
0.0	int
;	O
x_displacement	double
=	O
1.0	int
;	O
break	O
;	O
case	O
'c'	O
:	O
x_offset	double
=	O
-	O
0.5	int
;	O
x_displacement	double
=	O
0.0	int
;	O
break	O
;	O
case	O
'r'	O
:	O
x_offset	double
=	O
-	O
1.0	int
;	O
x_displacement	double
=	O
-	O
1.0	int
;	O
break	O
;	O
}	O
switch	O
(	O
y_justify_c	char
)	O
{	O
case	O
'b'	O
:	O
y_offset	double
=	O
(	O
double	O
)	O
HERSHEY_DESCENT	O
/	O
(	O
double	O
)	O
HERSHEY_HEIGHT	O
;	O
break	O
;	O
case	O
'x'	O
:	O
default	O
:	O
y_offset	double
=	O
0.0	int
;	O
break	O
;	O
case	O
'c'	O
:	O
y_offset	double
=	O
0.5	int
*	O
(	O
(	O
double	O
)	O
HERSHEY_DESCENT	O
-	O
(	O
double	O
)	O
HERSHEY_ASCENT	O
)	O
/	O
(	O
double	O
)	O
HERSHEY_HEIGHT	O
;	O
break	O
;	O
case	O
'C'	O
:	O
y_offset	double
=	O
-	O
(	O
double	O
)	O
HERSHEY_CAPHEIGHT	O
/	O
(	O
double	O
)	O
HERSHEY_HEIGHT	O
;	O
break	O
;	O
case	O
't'	O
:	O
y_offset	double
=	O
-	O
(	O
double	O
)	O
HERSHEY_ASCENT	O
/	O
(	O
double	O
)	O
HERSHEY_HEIGHT	O
;	O
break	O
;	O
}	O
{	O
char	O
*	O
old_line_mode	pointer
,	O
*	O
old_cap_mode	pointer
,	O
*	O
old_join_mode	pointer
;	O
int	O
old_fill_type	int
;	O
double	O
oldposx	double
,	O
oldposy	double
;	O
bool	enum
old_dash_array_in_effect	enum
;	O
old_line_mode	pointer
=	O
(	O
char	O
*	O
)	O
_pl_xmalloc	function
(	O
strlen	function
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
line_mode	pointer
)	O
+	O
1	int
)	O
;	O
old_cap_mode	pointer
=	O
(	O
char	O
*	O
)	O
_pl_xmalloc	function
(	O
strlen	function
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
cap_mode	pointer
)	O
+	O
1	int
)	O
;	O
old_join_mode	pointer
=	O
(	O
char	O
*	O
)	O
_pl_xmalloc	function
(	O
strlen	function
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
join_mode	pointer
)	O
+	O
1	int
)	O
;	O
oldposx	double
=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
pos	struct
.	O
x	double
;	O
oldposy	double
=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
pos	struct
.	O
y	double
;	O
strcpy	function
(	O
old_line_mode	pointer
,	O
_plotter	pointer
->	O
drawstate	pointer
->	O
line_mode	pointer
)	O
;	O
strcpy	function
(	O
old_cap_mode	pointer
,	O
_plotter	pointer
->	O
drawstate	pointer
->	O
cap_mode	pointer
)	O
;	O
strcpy	function
(	O
old_join_mode	pointer
,	O
_plotter	pointer
->	O
drawstate	pointer
->	O
join_mode	pointer
)	O
;	O
old_fill_type	int
=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
fill_type	int
;	O
old_dash_array_in_effect	enum
=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
dash_array_in_effect	enum
;	O
_API_linemod	O
(	O
R___	O
(	O
_plotter	pointer
)	O
"solid"	pointer
)	O
;	O
_API_capmod	O
(	O
R___	O
(	O
_plotter	pointer
)	O
"round"	pointer
)	O
;	O
_API_joinmod	O
(	O
R___	O
(	O
_plotter	pointer
)	O
"round"	pointer
)	O
;	O
_API_filltype	O
(	O
R___	O
(	O
_plotter	pointer
)	O
0	int
)	O
;	O
{	O
double	O
theta	double
,	O
deltax	double
,	O
deltay	double
,	O
dx_just	double
,	O
dy_just	double
;	O
theta	double
=	O
M_PI	int
*	O
_plotter	pointer
->	O
drawstate	pointer
->	O
text_rotation	double
/	O
180.0	int
;	O
deltax	double
=	O
x_offset	double
*	O
label_width	double
;	O
deltay	double
=	O
y_offset	double
*	O
label_height	double
;	O
dx_just	double
=	O
cos	function
(	O
theta	double
)	O
*	O
deltax	double
-	O
sin	function
(	O
theta	double
)	O
*	O
deltay	double
;	O
dy_just	double
=	O
sin	function
(	O
theta	double
)	O
*	O
deltax	double
+	O
cos	function
(	O
theta	double
)	O
*	O
deltay	double
;	O
_API_fmoverel	O
(	O
R___	O
(	O
_plotter	pointer
)	O
dx_just	double
,	O
dy_just	double
)	O
;	O
}	O
_pl_g_draw_hershey_string	function
(	O
R___	O
(	O
_plotter	pointer
)	O
codestring	pointer
)	O
;	O
_API_linemod	O
(	O
R___	O
(	O
_plotter	pointer
)	O
old_line_mode	pointer
)	O
;	O
_API_capmod	O
(	O
R___	O
(	O
_plotter	pointer
)	O
old_cap_mode	pointer
)	O
;	O
_API_joinmod	O
(	O
R___	O
(	O
_plotter	pointer
)	O
old_join_mode	pointer
)	O
;	O
_API_filltype	O
(	O
R___	O
(	O
_plotter	pointer
)	O
old_fill_type	int
)	O
;	O
_plotter	pointer
->	O
drawstate	pointer
->	O
dash_array_in_effect	enum
=	O
old_dash_array_in_effect	enum
;	O
free	function
(	O
old_line_mode	pointer
)	O
;	O
free	function
(	O
old_cap_mode	pointer
)	O
;	O
free	function
(	O
old_join_mode	pointer
)	O
;	O
_API_fmove	O
(	O
R___	O
(	O
_plotter	pointer
)	O
oldposx	double
,	O
oldposy	double
)	O
;	O
}	O
postdx	double
=	O
x_displacement	double
*	O
label_width	double
;	O
theta	double
=	O
M_PI	int
*	O
_plotter	pointer
->	O
drawstate	pointer
->	O
text_rotation	double
/	O
180.0	int
;	O
dx	int
=	O
cos	function
(	O
theta	double
)	O
*	O
postdx	double
;	O
dy	int
=	O
sin	function
(	O
theta	double
)	O
*	O
postdx	double
;	O
_API_fmoverel	O
(	O
R___	O
(	O
_plotter	pointer
)	O
dx	int
,	O
dy	int
)	O
;	O
free	function
(	O
codestring	pointer
)	O
;	O
return	O
label_width	double
;	O
}	O
double	O
_pl_g_flabelwidth_hershey	function
(	O
R___	O
(	O
Plotter	struct
*	O
_plotter	pointer
)	O
const	O
unsigned	O
char	O
*	O
s	pointer
)	O
{	O
double	O
label_width	double
;	O
unsigned	O
short	O
*	O
codestring	pointer
;	O
codestring	pointer
=	O
_pl_g_controlify	function
(	O
R___	O
(	O
_plotter	pointer
)	O
s	pointer
)	O
;	O
label_width	double
=	O
HERSHEY_UNITS_TO_USER_UNITS	O
(	O
label_width_hershey	function
(	O
codestring	pointer
)	O
)	O
;	O
free	function
(	O
codestring	pointer
)	O
;	O
return	O
label_width	double
;	O
}	O
void	O
_pl_g_draw_hershey_stroke	function
(	O
R___	O
(	O
Plotter	struct
*	O
_plotter	pointer
)	O
bool	enum
pendown	enum
,	O
double	O
deltax	double
,	O
double	O
deltay	double
)	O
{	O
double	O
theta	double
=	O
M_PI	int
*	O
_plotter	pointer
->	O
drawstate	pointer
->	O
text_rotation	double
/	O
180.0	int
;	O
double	O
dx	int
,	O
dy	int
;	O
deltax	double
=	O
HERSHEY_UNITS_TO_USER_UNITS	O
(	O
deltax	double
)	O
;	O
deltay	double
=	O
HERSHEY_UNITS_TO_USER_UNITS	O
(	O
deltay	double
)	O
;	O
dx	int
=	O
cos	function
(	O
theta	double
)	O
*	O
deltax	double
-	O
sin	function
(	O
theta	double
)	O
*	O
deltay	double
;	O
dy	int
=	O
sin	function
(	O
theta	double
)	O
*	O
deltax	double
+	O
cos	function
(	O
theta	double
)	O
*	O
deltay	double
;	O
if	O
(	O
pendown	enum
)	O
_API_fcontrel	O
(	O
R___	O
(	O
_plotter	pointer
)	O
dx	int
,	O
dy	int
)	O
;	O
else	O
_API_fmoverel	O
(	O
R___	O
(	O
_plotter	pointer
)	O
dx	int
,	O
dy	int
)	O
;	O
}	O
static	O
double	O
label_width_hershey	function
(	O
const	O
unsigned	O
short	O
*	O
label	pointer
)	O
{	O
const	O
unsigned	O
short	O
*	O
ptr	pointer
=	O
label	pointer
;	O
unsigned	O
short	O
c	char
;	O
double	O
charsize	double
=	O
1.0	int
;	O
double	O
saved_charsize	double
=	O
1.0	int
;	O
double	O
width	array
=	O
0.0	int
;	O
double	O
saved_width	double
=	O
0.0	int
;	O
while	O
(	O
(	O
c	char
=	O
(	O
*	O
ptr	pointer
)	O
)	O
!=	O
(	O
unsigned	O
short	O
)	O
'\0'	O
)	O
{	O
int	O
glyphnum	int
;	O
const	O
unsigned	O
char	O
*	O
glyph	pointer
;	O
if	O
(	O
c	char
&	O
RAW_HERSHEY_GLYPH	int
)	O
{	O
glyphnum	int
=	O
c	char
&	O
GLYPH_SPEC	int
;	O
glyph	pointer
=	O
(	O
const	O
unsigned	O
char	O
*	O
)	O
(	O
_pl_g_occidental_hershey_glyphs	array
[	O
glyphnum	int
]	O
)	O
;	O
if	O
(	O
*	O
glyph	pointer
!=	O
'\0'	O
)	O
width	array
+=	O
charsize	double
*	O
(	O
(	O
int	O
)	O
glyph	pointer
[	O
1	int
]	O
-	O
(	O
int	O
)	O
glyph	pointer
[	O
0	int
]	O
)	O
;	O
}	O
else	O
if	O
(	O
c	char
&	O
RAW_ORIENTAL_HERSHEY_GLYPH	int
)	O
{	O
glyphnum	int
=	O
c	char
&	O
GLYPH_SPEC	int
;	O
glyph	pointer
=	O
(	O
const	O
unsigned	O
char	O
*	O
)	O
_pl_g_oriental_hershey_glyphs	array
[	O
glyphnum	int
]	O
;	O
if	O
(	O
*	O
glyph	pointer
!=	O
'\0'	O
)	O
width	array
+=	O
charsize	double
*	O
(	O
(	O
int	O
)	O
glyph	pointer
[	O
1	int
]	O
-	O
(	O
int	O
)	O
glyph	pointer
[	O
0	int
]	O
)	O
;	O
}	O
else	O
if	O
(	O
c	char
&	O
CONTROL_CODE	int
)	O
{	O
switch	O
(	O
c	char
&	O
~	O
CONTROL_CODE	int
)	O
{	O
case	O
C_BEGIN_SUBSCRIPT	int
:	O
case	O
C_BEGIN_SUPERSCRIPT	int
:	O
charsize	double
*=	O
SCRIPTSIZE	O
;	O
break	O
;	O
case	O
C_END_SUBSCRIPT	int
:	O
case	O
C_END_SUPERSCRIPT	int
:	O
charsize	double
/=	O
SCRIPTSIZE	O
;	O
break	O
;	O
case	O
C_PUSH_LOCATION	int
:	O
saved_width	double
=	O
width	array
;	O
saved_charsize	double
=	O
charsize	double
;	O
break	O
;	O
case	O
C_POP_LOCATION	int
:	O
width	array
=	O
saved_width	double
;	O
charsize	double
=	O
saved_charsize	double
;	O
break	O
;	O
case	O
C_RIGHT_ONE_EM	int
:	O
width	array
+=	O
charsize	double
*	O
HERSHEY_EM	O
;	O
break	O
;	O
case	O
C_RIGHT_HALF_EM	int
:	O
width	array
+=	O
charsize	double
*	O
HERSHEY_EM	O
/	O
2.0	int
;	O
break	O
;	O
case	O
C_RIGHT_QUARTER_EM	int
:	O
width	array
+=	O
charsize	double
*	O
HERSHEY_EM	O
/	O
4.0	int
;	O
break	O
;	O
case	O
C_RIGHT_SIXTH_EM	int
:	O
width	array
+=	O
charsize	double
*	O
HERSHEY_EM	O
/	O
6.0	int
;	O
break	O
;	O
case	O
C_RIGHT_EIGHTH_EM	int
:	O
width	array
+=	O
charsize	double
*	O
HERSHEY_EM	O
/	O
8.0	int
;	O
break	O
;	O
case	O
C_RIGHT_TWELFTH_EM	int
:	O
width	array
+=	O
charsize	double
*	O
HERSHEY_EM	O
/	O
12.0	int
;	O
break	O
;	O
case	O
C_LEFT_ONE_EM	int
:	O
width	array
-=	O
charsize	double
*	O
HERSHEY_EM	O
;	O
break	O
;	O
case	O
C_LEFT_HALF_EM	int
:	O
width	array
-=	O
charsize	double
*	O
HERSHEY_EM	O
/	O
2.0	int
;	O
break	O
;	O
case	O
C_LEFT_QUARTER_EM	int
:	O
width	array
-=	O
charsize	double
*	O
HERSHEY_EM	O
/	O
4.0	int
;	O
break	O
;	O
case	O
C_LEFT_SIXTH_EM	int
:	O
width	array
-=	O
charsize	double
*	O
HERSHEY_EM	O
/	O
6.0	int
;	O
break	O
;	O
case	O
C_LEFT_EIGHTH_EM	int
:	O
width	array
-=	O
charsize	double
*	O
HERSHEY_EM	O
/	O
8.0	int
;	O
break	O
;	O
case	O
C_LEFT_TWELFTH_EM	int
:	O
width	array
-=	O
charsize	double
*	O
HERSHEY_EM	O
/	O
12.0	int
;	O
break	O
;	O
default	O
:	O
break	O
;	O
}	O
}	O
else	O
{	O
int	O
raw_fontnum	int
;	O
raw_fontnum	int
=	O
(	O
c	char
>>	O
FONT_SHIFT	int
)	O
&	O
ONE_BYTE	int
;	O
c	char
&=	O
~	O
FONT_SPEC	O
;	O
glyphnum	int
=	O
(	O
_pl_g_hershey_font_info	array
[	O
raw_fontnum	int
]	O
.	O
chars	array
)	O
[	O
c	char
]	O
;	O
if	O
(	O
glyphnum	int
==	O
ACC0	O
||	O
glyphnum	int
==	O
ACC1	O
||	O
glyphnum	int
==	O
ACC2	O
)	O
{	O
unsigned	O
char	O
composite	char
,	O
character	char
,	O
accent	char
;	O
composite	char
=	O
(	O
unsigned	O
char	O
)	O
c	char
;	O
if	O
(	O
composite_char	function
(	O
&	O
composite	char
,	O
&	O
character	char
,	O
&	O
accent	char
)	O
)	O
glyphnum	int
=	O
(	O
_pl_g_hershey_font_info	array
[	O
raw_fontnum	int
]	O
.	O
chars	array
)	O
[	O
character	char
]	O
;	O
else	O
glyphnum	int
=	O
UNDE	int
;	O
}	O
if	O
(	O
glyphnum	int
&	O
KS	int
)	O
glyphnum	int
-=	O
KS	int
;	O
glyph	pointer
=	O
(	O
const	O
unsigned	O
char	O
*	O
)	O
(	O
_pl_g_occidental_hershey_glyphs	array
[	O
glyphnum	int
]	O
)	O
;	O
if	O
(	O
*	O
glyph	pointer
!=	O
'\0'	O
)	O
width	array
+=	O
charsize	double
*	O
(	O
(	O
int	O
)	O
glyph	pointer
[	O
1	int
]	O
-	O
(	O
int	O
)	O
glyph	pointer
[	O
0	int
]	O
)	O
;	O
}	O
ptr	pointer
++	O
;	O
}	O
return	O
width	array
;	O
}	O
void	O
_pl_g_draw_hershey_penup_stroke	function
(	O
R___	O
(	O
Plotter	struct
*	O
_plotter	pointer
)	O
double	O
dx	int
,	O
double	O
dy	int
,	O
double	O
charsize	double
,	O
bool	enum
oblique	enum
)	O
{	O
double	O
shear	double
;	O
shear	double
=	O
oblique	enum
?	O
(	O
SHEAR	O
)	O
:	O
0.0	int
;	O
_pl_g_draw_hershey_stroke	function
(	O
R___	O
(	O
_plotter	pointer
)	O
false	int
,	O
charsize	double
*	O
(	O
dx	int
+	O
shear	double
*	O
dy	int
)	O
,	O
charsize	double
*	O
dy	int
)	O
;	O
}	O
void	O
_pl_g_draw_hershey_glyph	function
(	O
R___	O
(	O
Plotter	struct
*	O
_plotter	pointer
)	O
int	O
glyphnum	int
,	O
double	O
charsize	double
,	O
int	O
type	enum
,	O
bool	enum
oblique	enum
)	O
{	O
double	O
xcurr	double
,	O
ycurr	double
;	O
double	O
xfinal	double
,	O
yfinal	double
;	O
bool	enum
pendown	enum
=	O
false	int
;	O
const	O
unsigned	O
char	O
*	O
glyph	pointer
;	O
double	O
dx	int
,	O
dy	int
;	O
double	O
shear	double
;	O
shear	double
=	O
oblique	enum
?	O
(	O
SHEAR	O
)	O
:	O
0.0	int
;	O
switch	O
(	O
type	enum
)	O
{	O
case	O
OCCIDENTAL	int
:	O
default	O
:	O
glyph	pointer
=	O
(	O
const	O
unsigned	O
char	O
*	O
)	O
(	O
_pl_g_occidental_hershey_glyphs	array
[	O
glyphnum	int
]	O
)	O
;	O
break	O
;	O
case	O
ORIENTAL	int
:	O
glyph	pointer
=	O
(	O
const	O
unsigned	O
char	O
*	O
)	O
(	O
_pl_g_oriental_hershey_glyphs	array
[	O
glyphnum	int
]	O
)	O
;	O
break	O
;	O
}	O
if	O
(	O
*	O
glyph	pointer
!=	O
'\0'	O
)	O
{	O
xcurr	double
=	O
charsize	double
*	O
(	O
double	O
)	O
glyph	pointer
[	O
0	int
]	O
;	O
xfinal	double
=	O
charsize	double
*	O
(	O
double	O
)	O
glyph	pointer
[	O
1	int
]	O
;	O
ycurr	double
=	O
yfinal	double
=	O
0.0	int
;	O
glyph	pointer
+=	O
2	int
;	O
while	O
(	O
*	O
glyph	pointer
)	O
{	O
int	O
xnewint	int
;	O
xnewint	int
=	O
(	O
int	O
)	O
glyph	pointer
[	O
0	int
]	O
;	O
if	O
(	O
xnewint	int
==	O
(	O
int	O
)	O
' '	O
)	O
pendown	enum
=	O
false	int
;	O
else	O
{	O
double	O
xnew	double
,	O
ynew	double
;	O
xnew	double
=	O
(	O
double	O
)	O
charsize	double
*	O
xnewint	int
;	O
ynew	double
=	O
(	O
double	O
)	O
charsize	double
*	O
(	O
(	O
int	O
)	O
'R'	O
-	O
(	O
(	O
int	O
)	O
glyph	pointer
[	O
1	int
]	O
+	O
(	O
double	O
)	O
HERSHEY_BASELINE	O
)	O
)	O
;	O
dx	int
=	O
xnew	double
-	O
xcurr	double
;	O
dy	int
=	O
ynew	double
-	O
ycurr	double
;	O
_pl_g_draw_hershey_stroke	function
(	O
R___	O
(	O
_plotter	pointer
)	O
pendown	enum
,	O
dx	int
+	O
shear	double
*	O
dy	int
,	O
dy	int
)	O
;	O
xcurr	double
=	O
xnew	double
,	O
ycurr	double
=	O
ynew	double
;	O
pendown	enum
=	O
true	int
;	O
}	O
glyph	pointer
+=	O
2	int
;	O
}	O
dx	int
=	O
xfinal	double
-	O
xcurr	double
;	O
dy	int
=	O
yfinal	double
-	O
ycurr	double
;	O
_pl_g_draw_hershey_stroke	function
(	O
R___	O
(	O
_plotter	pointer
)	O
false	int
,	O
dx	int
+	O
shear	double
*	O
dy	int
,	O
dy	int
)	O
;	O
}	O
}	O
void	O
_pl_g_draw_hershey_string	function
(	O
R___	O
(	O
Plotter	struct
*	O
_plotter	pointer
)	O
const	O
unsigned	O
short	O
*	O
string	pointer
)	O
{	O
unsigned	O
short	O
c	char
;	O
const	O
unsigned	O
short	O
*	O
ptr	pointer
=	O
string	pointer
;	O
double	O
charsize	double
=	O
1.0	int
;	O
double	O
saved_charsize	double
=	O
1.0	int
;	O
double	O
saved_position_x	double
=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
pos	struct
.	O
x	double
;	O
double	O
saved_position_y	double
=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
pos	struct
.	O
y	double
;	O
double	O
old_line_width	double
;	O
int	O
line_width_type	int
=	O
0	int
;	O
old_line_width	double
=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
line_width	double
;	O
while	O
(	O
(	O
c	char
=	O
(	O
*	O
ptr	pointer
++	O
)	O
)	O
!=	O
'\0'	O
)	O
{	O
if	O
(	O
c	char
&	O
RAW_HERSHEY_GLYPH	int
)	O
{	O
if	O
(	O
line_width_type	int
!=	O
1	int
)	O
{	O
_API_flinewidth	O
(	O
R___	O
(	O
_plotter	pointer
)	O
HERSHEY_UNITS_TO_USER_UNITS	O
(	O
HERSHEY_STROKE_WIDTH	int
)	O
)	O
;	O
line_width_type	int
=	O
1	int
;	O
}	O
_pl_g_draw_hershey_glyph	function
(	O
R___	O
(	O
_plotter	pointer
)	O
c	char
&	O
GLYPH_SPEC	int
,	O
charsize	double
,	O
OCCIDENTAL	int
,	O
false	int
)	O
;	O
}	O
else	O
if	O
(	O
c	char
&	O
RAW_ORIENTAL_HERSHEY_GLYPH	int
)	O
{	O
if	O
(	O
line_width_type	int
!=	O
2	int
)	O
{	O
_API_flinewidth	O
(	O
R___	O
(	O
_plotter	pointer
)	O
HERSHEY_UNITS_TO_USER_UNITS	O
(	O
HERSHEY_ORIENTAL_STROKE_WIDTH	int
)	O
)	O
;	O
line_width_type	int
=	O
2	int
;	O
}	O
_pl_g_draw_hershey_glyph	function
(	O
R___	O
(	O
_plotter	pointer
)	O
c	char
&	O
GLYPH_SPEC	int
,	O
charsize	double
,	O
ORIENTAL	int
,	O
false	int
)	O
;	O
}	O
else	O
if	O
(	O
c	char
&	O
CONTROL_CODE	int
)	O
switch	O
(	O
c	char
&	O
~	O
CONTROL_CODE	int
)	O
{	O
case	O
C_BEGIN_SUPERSCRIPT	int
:	O
_pl_g_draw_hershey_stroke	function
(	O
R___	O
(	O
_plotter	pointer
)	O
false	int
,	O
SUPERSCRIPT_DX	int
*	O
charsize	double
*	O
HERSHEY_EM	O
,	O
SUPERSCRIPT_DY	int
*	O
charsize	double
*	O
HERSHEY_EM	O
)	O
;	O
charsize	double
*=	O
SCRIPTSIZE	O
;	O
break	O
;	O
case	O
C_END_SUPERSCRIPT	int
:	O
charsize	double
/=	O
SCRIPTSIZE	O
;	O
_pl_g_draw_hershey_stroke	function
(	O
R___	O
(	O
_plotter	pointer
)	O
false	int
,	O
-	O
SUPERSCRIPT_DX	int
*	O
charsize	double
*	O
HERSHEY_EM	O
,	O
-	O
SUPERSCRIPT_DY	int
*	O
charsize	double
*	O
HERSHEY_EM	O
)	O
;	O
break	O
;	O
case	O
C_BEGIN_SUBSCRIPT	int
:	O
_pl_g_draw_hershey_stroke	function
(	O
R___	O
(	O
_plotter	pointer
)	O
false	int
,	O
SUBSCRIPT_DX	int
*	O
charsize	double
*	O
HERSHEY_EM	O
,	O
SUBSCRIPT_DY	O
*	O
charsize	double
*	O
HERSHEY_EM	O
)	O
;	O
charsize	double
*=	O
SCRIPTSIZE	O
;	O
break	O
;	O
case	O
C_END_SUBSCRIPT	int
:	O
charsize	double
/=	O
SCRIPTSIZE	O
;	O
_pl_g_draw_hershey_stroke	function
(	O
R___	O
(	O
_plotter	pointer
)	O
false	int
,	O
-	O
SUBSCRIPT_DX	int
*	O
charsize	double
*	O
HERSHEY_EM	O
,	O
-	O
SUBSCRIPT_DY	O
*	O
charsize	double
*	O
HERSHEY_EM	O
)	O
;	O
break	O
;	O
case	O
C_PUSH_LOCATION	int
:	O
saved_charsize	double
=	O
charsize	double
;	O
saved_position_x	double
=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
pos	struct
.	O
x	double
;	O
saved_position_y	double
=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
pos	struct
.	O
y	double
;	O
break	O
;	O
case	O
C_POP_LOCATION	int
:	O
charsize	double
=	O
saved_charsize	double
;	O
_API_fmove	O
(	O
R___	O
(	O
_plotter	pointer
)	O
saved_position_x	double
,	O
saved_position_y	double
)	O
;	O
break	O
;	O
case	O
C_RIGHT_ONE_EM	int
:	O
_pl_g_draw_hershey_stroke	function
(	O
R___	O
(	O
_plotter	pointer
)	O
false	int
,	O
charsize	double
*	O
HERSHEY_EM	O
,	O
0.0	int
)	O
;	O
break	O
;	O
case	O
C_RIGHT_HALF_EM	int
:	O
_pl_g_draw_hershey_stroke	function
(	O
R___	O
(	O
_plotter	pointer
)	O
false	int
,	O
charsize	double
*	O
HERSHEY_EM	O
/	O
2.0	int
,	O
0.0	int
)	O
;	O
break	O
;	O
case	O
C_RIGHT_QUARTER_EM	int
:	O
_pl_g_draw_hershey_stroke	function
(	O
R___	O
(	O
_plotter	pointer
)	O
false	int
,	O
charsize	double
*	O
HERSHEY_EM	O
/	O
4.0	int
,	O
0.0	int
)	O
;	O
break	O
;	O
case	O
C_RIGHT_SIXTH_EM	int
:	O
_pl_g_draw_hershey_stroke	function
(	O
R___	O
(	O
_plotter	pointer
)	O
false	int
,	O
charsize	double
*	O
HERSHEY_EM	O
/	O
6.0	int
,	O
0.0	int
)	O
;	O
break	O
;	O
case	O
C_RIGHT_EIGHTH_EM	int
:	O
_pl_g_draw_hershey_stroke	function
(	O
R___	O
(	O
_plotter	pointer
)	O
false	int
,	O
charsize	double
*	O
HERSHEY_EM	O
/	O
8.0	int
,	O
0.0	int
)	O
;	O
break	O
;	O
case	O
C_RIGHT_TWELFTH_EM	int
:	O
_pl_g_draw_hershey_stroke	function
(	O
R___	O
(	O
_plotter	pointer
)	O
false	int
,	O
charsize	double
*	O
HERSHEY_EM	O
/	O
12.0	int
,	O
0.0	int
)	O
;	O
break	O
;	O
case	O
C_LEFT_ONE_EM	int
:	O
_pl_g_draw_hershey_stroke	function
(	O
R___	O
(	O
_plotter	pointer
)	O
false	int
,	O
-	O
charsize	double
*	O
HERSHEY_EM	O
,	O
0.0	int
)	O
;	O
break	O
;	O
case	O
C_LEFT_HALF_EM	int
:	O
_pl_g_draw_hershey_stroke	function
(	O
R___	O
(	O
_plotter	pointer
)	O
false	int
,	O
-	O
charsize	double
*	O
HERSHEY_EM	O
/	O
2.0	int
,	O
0.0	int
)	O
;	O
break	O
;	O
case	O
C_LEFT_QUARTER_EM	int
:	O
_pl_g_draw_hershey_stroke	function
(	O
R___	O
(	O
_plotter	pointer
)	O
false	int
,	O
-	O
charsize	double
*	O
HERSHEY_EM	O
/	O
4.0	int
,	O
0.0	int
)	O
;	O
break	O
;	O
case	O
C_LEFT_SIXTH_EM	int
:	O
_pl_g_draw_hershey_stroke	function
(	O
R___	O
(	O
_plotter	pointer
)	O
false	int
,	O
-	O
charsize	double
*	O
HERSHEY_EM	O
/	O
6.0	int
,	O
0.0	int
)	O
;	O
break	O
;	O
case	O
C_LEFT_EIGHTH_EM	int
:	O
_pl_g_draw_hershey_stroke	function
(	O
R___	O
(	O
_plotter	pointer
)	O
false	int
,	O
-	O
charsize	double
*	O
HERSHEY_EM	O
/	O
8.0	int
,	O
0.0	int
)	O
;	O
break	O
;	O
case	O
C_LEFT_TWELFTH_EM	int
:	O
_pl_g_draw_hershey_stroke	function
(	O
R___	O
(	O
_plotter	pointer
)	O
false	int
,	O
-	O
charsize	double
*	O
HERSHEY_EM	O
/	O
12.0	int
,	O
0.0	int
)	O
;	O
break	O
;	O
default	O
:	O
break	O
;	O
}	O
else	O
{	O
int	O
raw_fontnum	int
;	O
int	O
glyphnum	int
;	O
int	O
char_glyphnum	int
,	O
accent_glyphnum	int
;	O
int	O
char_width	int
,	O
accent_width	int
;	O
const	O
unsigned	O
char	O
*	O
char_glyph	pointer
,	O
*	O
accent_glyph	pointer
;	O
unsigned	O
char	O
composite	char
,	O
character	char
,	O
accent	char
;	O
bool	enum
oblique	enum
,	O
small_kana	enum
=	O
false	int
;	O
raw_fontnum	int
=	O
(	O
c	char
>>	O
FONT_SHIFT	int
)	O
&	O
ONE_BYTE	int
;	O
oblique	enum
=	O
_pl_g_hershey_font_info	array
[	O
raw_fontnum	int
]	O
.	O
obliquing	enum
;	O
c	char
&=	O
~	O
FONT_SPEC	O
;	O
glyphnum	int
=	O
(	O
_pl_g_hershey_font_info	array
[	O
raw_fontnum	int
]	O
.	O
chars	array
)	O
[	O
c	char
]	O
;	O
if	O
(	O
glyphnum	int
&	O
KS	int
)	O
{	O
glyphnum	int
-=	O
KS	int
;	O
small_kana	enum
=	O
true	int
;	O
}	O
switch	O
(	O
glyphnum	int
)	O
{	O
case	O
ACC0	O
:	O
case	O
ACC1	O
:	O
case	O
ACC2	O
:	O
composite	char
=	O
(	O
unsigned	O
char	O
)	O
c	char
;	O
if	O
(	O
composite_char	function
(	O
&	O
composite	char
,	O
&	O
character	char
,	O
&	O
accent	char
)	O
)	O
{	O
char_glyphnum	int
=	O
(	O
_pl_g_hershey_font_info	array
[	O
raw_fontnum	int
]	O
.	O
chars	array
)	O
[	O
character	char
]	O
;	O
accent_glyphnum	int
=	O
(	O
_pl_g_hershey_font_info	array
[	O
raw_fontnum	int
]	O
.	O
chars	array
)	O
[	O
accent	char
]	O
;	O
}	O
else	O
{	O
char_glyphnum	int
=	O
UNDE	int
;	O
accent_glyphnum	int
=	O
0	int
;	O
}	O
char_glyph	pointer
=	O
(	O
const	O
unsigned	O
char	O
*	O
)	O
_pl_g_occidental_hershey_glyphs	array
[	O
char_glyphnum	int
]	O
;	O
accent_glyph	pointer
=	O
(	O
const	O
unsigned	O
char	O
*	O
)	O
_pl_g_occidental_hershey_glyphs	array
[	O
accent_glyphnum	int
]	O
;	O
if	O
(	O
*	O
char_glyph	pointer
!=	O
'\0'	O
)	O
char_width	int
=	O
(	O
int	O
)	O
char_glyph	pointer
[	O
1	int
]	O
-	O
(	O
int	O
)	O
char_glyph	pointer
[	O
0	int
]	O
;	O
else	O
char_width	int
=	O
0	int
;	O
if	O
(	O
*	O
accent_glyph	pointer
!=	O
'\0'	O
)	O
accent_width	int
=	O
(	O
int	O
)	O
accent_glyph	pointer
[	O
1	int
]	O
-	O
(	O
int	O
)	O
accent_glyph	pointer
[	O
0	int
]	O
;	O
else	O
accent_width	int
=	O
0	int
;	O
if	O
(	O
line_width_type	int
!=	O
1	int
)	O
{	O
_API_flinewidth	O
(	O
R___	O
(	O
_plotter	pointer
)	O
HERSHEY_UNITS_TO_USER_UNITS	O
(	O
HERSHEY_STROKE_WIDTH	int
)	O
)	O
;	O
line_width_type	int
=	O
1	int
;	O
}	O
_pl_g_draw_hershey_glyph	function
(	O
R___	O
(	O
_plotter	pointer
)	O
char_glyphnum	int
,	O
charsize	double
,	O
OCCIDENTAL	int
,	O
oblique	enum
)	O
;	O
_pl_g_draw_hershey_penup_stroke	function
(	O
R___	O
(	O
_plotter	pointer
)	O
-	O
0.5	int
*	O
(	O
double	O
)	O
char_width	int
-	O
0.5	int
*	O
(	O
double	O
)	O
accent_width	int
,	O
0.0	int
,	O
charsize	double
,	O
oblique	enum
)	O
;	O
if	O
(	O
glyphnum	int
==	O
ACC1	O
)	O
_pl_g_draw_hershey_penup_stroke	function
(	O
R___	O
(	O
_plotter	pointer
)	O
0.0	int
,	O
(	O
double	O
)	O
(	O
ACCENT_UP_SHIFT	int
)	O
,	O
charsize	double
,	O
oblique	enum
)	O
;	O
else	O
if	O
(	O
glyphnum	int
==	O
ACC2	O
)	O
_pl_g_draw_hershey_penup_stroke	function
(	O
R___	O
(	O
_plotter	pointer
)	O
(	O
double	O
)	O
(	O
ACCENT_RIGHT_SHIFT	int
)	O
,	O
(	O
double	O
)	O
(	O
ACCENT_UP_SHIFT	int
)	O
,	O
charsize	double
,	O
oblique	enum
)	O
;	O
_pl_g_draw_hershey_glyph	function
(	O
R___	O
(	O
_plotter	pointer
)	O
accent_glyphnum	int
,	O
charsize	double
,	O
OCCIDENTAL	int
,	O
oblique	enum
)	O
;	O
if	O
(	O
glyphnum	int
==	O
ACC1	O
)	O
_pl_g_draw_hershey_penup_stroke	function
(	O
R___	O
(	O
_plotter	pointer
)	O
0.0	int
,	O
-	O
(	O
double	O
)	O
(	O
ACCENT_UP_SHIFT	int
)	O
,	O
charsize	double
,	O
oblique	enum
)	O
;	O
else	O
if	O
(	O
glyphnum	int
==	O
ACC2	O
)	O
_pl_g_draw_hershey_penup_stroke	function
(	O
R___	O
(	O
_plotter	pointer
)	O
-	O
(	O
double	O
)	O
(	O
ACCENT_RIGHT_SHIFT	int
)	O
,	O
-	O
(	O
double	O
)	O
(	O
ACCENT_UP_SHIFT	int
)	O
,	O
charsize	double
,	O
oblique	enum
)	O
;	O
_pl_g_draw_hershey_penup_stroke	function
(	O
R___	O
(	O
_plotter	pointer
)	O
0.5	int
*	O
(	O
double	O
)	O
char_width	int
-	O
0.5	int
*	O
(	O
double	O
)	O
accent_width	int
,	O
0.0	int
,	O
charsize	double
,	O
oblique	enum
)	O
;	O
break	O
;	O
default	O
:	O
if	O
(	O
small_kana	enum
)	O
{	O
int	O
kana_width	int
;	O
const	O
unsigned	O
char	O
*	O
kana_glyph	pointer
;	O
double	O
shift	double
=	O
0.5	int
*	O
(	O
1.0	int
-	O
(	O
SMALL_KANA_SIZE	int
)	O
)	O
;	O
kana_glyph	pointer
=	O
(	O
const	O
unsigned	O
char	O
*	O
)	O
_pl_g_occidental_hershey_glyphs	array
[	O
glyphnum	int
]	O
;	O
kana_width	int
=	O
(	O
int	O
)	O
kana_glyph	pointer
[	O
1	int
]	O
-	O
(	O
int	O
)	O
kana_glyph	pointer
[	O
0	int
]	O
;	O
_pl_g_draw_hershey_penup_stroke	function
(	O
R___	O
(	O
_plotter	pointer
)	O
shift	double
*	O
(	O
double	O
)	O
kana_width	int
,	O
0.0	int
,	O
charsize	double
,	O
oblique	enum
)	O
;	O
if	O
(	O
line_width_type	int
!=	O
2	int
)	O
{	O
_API_flinewidth	O
(	O
R___	O
(	O
_plotter	pointer
)	O
HERSHEY_UNITS_TO_USER_UNITS	O
(	O
HERSHEY_ORIENTAL_STROKE_WIDTH	int
)	O
)	O
;	O
line_width_type	int
=	O
2	int
;	O
}	O
_pl_g_draw_hershey_glyph	function
(	O
R___	O
(	O
_plotter	pointer
)	O
glyphnum	int
,	O
(	O
SMALL_KANA_SIZE	int
)	O
*	O
charsize	double
,	O
OCCIDENTAL	int
,	O
oblique	enum
)	O
;	O
_pl_g_draw_hershey_penup_stroke	function
(	O
R___	O
(	O
_plotter	pointer
)	O
shift	double
*	O
(	O
double	O
)	O
kana_width	int
,	O
0.0	int
,	O
charsize	double
,	O
oblique	enum
)	O
;	O
}	O
else	O
{	O
if	O
(	O
glyphnum	int
>=	O
BEGINNING_OF_KANA	int
)	O
{	O
if	O
(	O
line_width_type	int
!=	O
2	int
)	O
{	O
_API_flinewidth	O
(	O
R___	O
(	O
_plotter	pointer
)	O
HERSHEY_UNITS_TO_USER_UNITS	O
(	O
HERSHEY_ORIENTAL_STROKE_WIDTH	int
)	O
)	O
;	O
line_width_type	int
=	O
2	int
;	O
}	O
}	O
else	O
if	O
(	O
line_width_type	int
!=	O
1	int
)	O
{	O
_API_flinewidth	O
(	O
R___	O
(	O
_plotter	pointer
)	O
HERSHEY_UNITS_TO_USER_UNITS	O
(	O
HERSHEY_STROKE_WIDTH	int
)	O
)	O
;	O
line_width_type	int
=	O
1	int
;	O
}	O
_pl_g_draw_hershey_glyph	function
(	O
R___	O
(	O
_plotter	pointer
)	O
glyphnum	int
,	O
charsize	double
,	O
OCCIDENTAL	int
,	O
oblique	enum
)	O
;	O
}	O
break	O
;	O
}	O
}	O
}	O
if	O
(	O
line_width_type	int
!=	O
0	int
)	O
_API_flinewidth	O
(	O
R___	O
(	O
_plotter	pointer
)	O
old_line_width	double
)	O
;	O
return	O
;	O
}	O
static	O
bool	enum
composite_char	function
(	O
unsigned	O
char	O
*	O
composite	char
,	O
unsigned	O
char	O
*	O
character	char
,	O
unsigned	O
char	O
*	O
accent	char
)	O
{	O
const	O
struct	O
plHersheyAccentedCharInfoStruct	struct
*	O
compchar	pointer
=	O
_pl_g_hershey_accented_char_info	array
;	O
bool	enum
found	enum
=	O
false	int
;	O
unsigned	O
char	O
given	char
=	O
*	O
composite	char
;	O
while	O
(	O
compchar	pointer
->	O
composite	char
)	O
{	O
if	O
(	O
compchar	pointer
->	O
composite	char
==	O
given	char
)	O
{	O
found	enum
=	O
true	int
;	O
*	O
character	char
=	O
compchar	pointer
->	O
character	char
;	O
*	O
accent	char
=	O
compchar	pointer
->	O
accent	char
;	O
}	O
compchar	pointer
++	O
;	O
}	O
return	O
found	enum
;	O
}	O
