static	O
enum	O
mu_filter_result	enum
_qp_decoder	function
(	O
void	O
*	O
xd	pointer
,	O
enum	O
mu_filter_command	enum
cmd	enum
,	O
struct	O
mu_filter_io	struct
*	O
iobuf	pointer
)	O
{	O
char	O
c	char
;	O
size_t	long
consumed	long
=	O
0	int
;	O
size_t	long
wscount	long
=	O
0	int
;	O
size_t	long
nbytes	long
=	O
0	int
;	O
const	O
char	O
*	O
iptr	pointer
;	O
size_t	long
isize	long
;	O
char	O
*	O
optr	pointer
;	O
size_t	long
osize	long
;	O
char	O
*	O
specials	pointer
=	O
xd	pointer
;	O
switch	O
(	O
cmd	enum
)	O
{	O
case	O
mu_filter_init	int
:	O
case	O
mu_filter_done	int
:	O
return	O
mu_filter_ok	int
;	O
default	O
:	O
break	O
;	O
}	O
iptr	pointer
=	O
iobuf	pointer
->	O
input	pointer
;	O
isize	long
=	O
iobuf	pointer
->	O
isize	long
;	O
optr	pointer
=	O
iobuf	pointer
->	O
output	pointer
;	O
osize	long
=	O
iobuf	pointer
->	O
osize	long
;	O
while	O
(	O
consumed	long
<	O
isize	long
&&	O
nbytes	long
<	O
osize	long
)	O
{	O
c	char
=	O
*	O
iptr	pointer
++	O
;	O
if	O
(	O
ISWS	O
(	O
c	char
)	O
)	O
{	O
wscount	long
++	O
;	O
consumed	long
++	O
;	O
}	O
else	O
{	O
if	O
(	O
wscount	long
)	O
{	O
if	O
(	O
c	char
!=	O
'\r'	O
&&	O
c	char
!=	O
'\n'	O
)	O
{	O
size_t	long
sz	long
;	O
if	O
(	O
consumed	long
>=	O
isize	long
)	O
break	O
;	O
if	O
(	O
nbytes	long
+	O
wscount	long
>	O
osize	long
)	O
sz	long
=	O
osize	long
-	O
nbytes	long
;	O
else	O
sz	long
=	O
wscount	long
;	O
memcpy	function
(	O
optr	pointer
,	O
iptr	pointer
-	O
wscount	long
-	O
1	int
,	O
sz	long
)	O
;	O
optr	pointer
+=	O
sz	long
;	O
nbytes	long
+=	O
sz	long
;	O
if	O
(	O
wscount	long
>	O
sz	long
)	O
{	O
wscount	long
-=	O
sz	long
;	O
break	O
;	O
}	O
}	O
wscount	long
=	O
0	int
;	O
if	O
(	O
nbytes	long
==	O
osize	long
)	O
break	O
;	O
}	O
if	O
(	O
c	char
==	O
'='	O
)	O
{	O
if	O
(	O
consumed	long
+	O
2	int
>=	O
isize	long
)	O
break	O
;	O
else	O
{	O
char	O
chr	array
[	O
3	int
]	O
;	O
int	O
new_c	int
;	O
chr	array
[	O
2	int
]	O
=	O
0	int
;	O
chr	array
[	O
0	int
]	O
=	O
*	O
iptr	pointer
++	O
;	O
if	O
(	O
chr	array
[	O
0	int
]	O
!=	O
'\n'	O
)	O
{	O
chr	array
[	O
1	int
]	O
=	O
*	O
iptr	pointer
++	O
;	O
new_c	int
=	O
strtoul	function
(	O
chr	array
,	O
NULL	O
,	O
16	int
)	O
;	O
*	O
optr	pointer
++	O
=	O
new_c	int
;	O
nbytes	long
++	O
;	O
consumed	long
+=	O
3	int
;	O
}	O
else	O
consumed	long
+=	O
2	int
;	O
}	O
}	O
else	O
if	O
(	O
c	char
==	O
'\r'	O
)	O
{	O
if	O
(	O
consumed	long
+	O
1	int
>=	O
isize	long
)	O
{	O
if	O
(	O
cmd	enum
==	O
mu_filter_lastbuf	int
)	O
consumed	long
++	O
;	O
break	O
;	O
}	O
else	O
{	O
iptr	pointer
++	O
;	O
*	O
optr	pointer
++	O
=	O
'\n'	O
;	O
nbytes	long
++	O
;	O
consumed	long
+=	O
2	int
;	O
}	O
}	O
else	O
if	O
(	O
c	char
==	O
'_'	O
&&	O
specials	pointer
&&	O
strchr	function
(	O
specials	pointer
,	O
c	char
)	O
)	O
{	O
*	O
optr	pointer
++	O
=	O
' '	O
;	O
nbytes	long
++	O
;	O
consumed	long
++	O
;	O
}	O
else	O
{	O
*	O
optr	pointer
++	O
=	O
c	char
;	O
nbytes	long
++	O
;	O
consumed	long
++	O
;	O
}	O
}	O
}	O
iobuf	pointer
->	O
isize	long
=	O
consumed	long
-	O
wscount	long
;	O
iobuf	pointer
->	O
osize	long
=	O
nbytes	long
;	O
return	O
mu_filter_ok	int
;	O
}	O
static	O
enum	O
mu_filter_result	enum
_qp_encoder	function
(	O
void	O
*	O
xd	pointer
,	O
enum	O
mu_filter_command	enum
cmd	enum
,	O
struct	O
mu_filter_io	struct
*	O
iobuf	pointer
)	O
{	O
unsigned	O
int	O
c	char
;	O
size_t	long
consumed	long
=	O
0	int
;	O
size_t	long
nbytes	long
=	O
0	int
;	O
static	O
const	O
char	O
_hexdigits	array
[	O
]	O
=	O
"0123456789ABCDEF"	pointer
;	O
const	O
char	O
*	O
iptr	pointer
;	O
size_t	long
isize	long
;	O
char	O
*	O
optr	pointer
;	O
size_t	long
osize	long
;	O
char	O
*	O
specials	pointer
=	O
xd	pointer
;	O
switch	O
(	O
cmd	enum
)	O
{	O
case	O
mu_filter_init	int
:	O
case	O
mu_filter_done	int
:	O
return	O
mu_filter_ok	int
;	O
default	O
:	O
break	O
;	O
}	O
iptr	pointer
=	O
iobuf	pointer
->	O
input	pointer
;	O
isize	long
=	O
iobuf	pointer
->	O
isize	long
;	O
optr	pointer
=	O
iobuf	pointer
->	O
output	pointer
;	O
osize	long
=	O
iobuf	pointer
->	O
osize	long
;	O
nbytes	long
=	O
0	int
;	O
while	O
(	O
consumed	long
<	O
isize	long
)	O
{	O
int	O
simple_char	int
;	O
c	char
=	O
*	O
(	O
unsigned	O
char	O
*	O
)	O
iptr	pointer
;	O
if	O
(	O
specials	pointer
&&	O
strchr	function
(	O
specials	pointer
,	O
c	char
)	O
)	O
simple_char	int
=	O
0	int
;	O
else	O
simple_char	int
=	O
(	O
c	char
>=	O
32	int
&&	O
c	char
<=	O
60	int
)	O
||	O
(	O
c	char
>=	O
62	int
&&	O
c	char
<=	O
126	int
)	O
||	O
c	char
==	O
'\t'	O
||	O
c	char
==	O
'\n'	O
;	O
if	O
(	O
simple_char	int
)	O
{	O
if	O
(	O
nbytes	long
+	O
1	int
>	O
osize	long
)	O
break	O
;	O
if	O
(	O
c	char
==	O
' '	O
&&	O
specials	pointer
&&	O
strchr	function
(	O
specials	pointer
,	O
'_'	O
)	O
)	O
*	O
optr	pointer
++	O
=	O
'_'	O
;	O
else	O
*	O
optr	pointer
++	O
=	O
c	char
;	O
nbytes	long
++	O
;	O
iptr	pointer
++	O
;	O
consumed	long
++	O
;	O
}	O
else	O
{	O
if	O
(	O
nbytes	long
+	O
3	int
>	O
osize	long
)	O
break	O
;	O
*	O
optr	pointer
++	O
=	O
'='	O
;	O
*	O
optr	pointer
++	O
=	O
_hexdigits	array
[	O
(	O
c	char
>>	O
4	int
)	O
&	O
0xf	int
]	O
;	O
*	O
optr	pointer
++	O
=	O
_hexdigits	array
[	O
c	char
&	O
0xf	int
]	O
;	O
nbytes	long
+=	O
3	int
;	O
iptr	pointer
++	O
;	O
consumed	long
++	O
;	O
}	O
}	O
iobuf	pointer
->	O
isize	long
=	O
consumed	long
;	O
iobuf	pointer
->	O
osize	long
=	O
nbytes	long
;	O
return	O
mu_filter_ok	int
;	O
}	O
static	O
struct	O
_mu_filter_record	struct
_qp_filter	struct
=	O
{	O
"quoted-printable"	pointer
,	O
NULL	O
,	O
_qp_encoder	function
,	O
_qp_decoder	function
}	O
;	O
mu_filter_record_t	pointer
mu_qp_filter	pointer
=	O
&	O
_qp_filter	struct
;	O
static	O
int	O
alloc_Q	function
(	O
void	O
*	O
*	O
pret	pointer
,	O
int	O
mode	int
MU_ARG_UNUSED	O
,	O
int	O
argc	int
,	O
const	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
char	O
*	O
x	pointer
=	O
strdup	function
(	O
"_?"	pointer
)	O
;	O
*	O
pret	pointer
=	O
x	pointer
;	O
return	O
0	int
;	O
}	O
static	O
struct	O
_mu_filter_record	struct
_Q_filter	struct
=	O
{	O
"Q"	pointer
,	O
alloc_Q	function
,	O
_qp_encoder	function
,	O
_qp_decoder	function
}	O
;	O
mu_filter_record_t	pointer
mu_rfc_2047_Q_filter	pointer
=	O
&	O
_Q_filter	struct
;	O
