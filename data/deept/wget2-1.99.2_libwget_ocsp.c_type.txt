struct	O
wget_ocsp_db_st	struct
{	O
const	O
char	O
*	O
fname	pointer
;	O
wget_hashmap	struct
*	O
fingerprints	pointer
;	O
wget_hashmap	struct
*	O
hosts	pointer
;	O
wget_thread_mutex	pointer
mutex	pointer
;	O
}	O
;	O
typedef	O
struct	O
{	O
const	O
char	O
*	O
key	int
;	O
int64_t	long
maxage	long
;	O
int64_t	long
mtime	long
;	O
bool	bool
valid	pointer
:	O
1	int
;	O
}	O
ocsp_entry	struct
;	O
static	O
const	O
wget_ocsp_db_vtable	struct
*	O
plugin_vtable	pointer
;	O
void	O
wget_ocsp_set_plugin	function
(	O
const	O
wget_ocsp_db_vtable	struct
*	O
vtable	pointer
)	O
{	O
plugin_vtable	pointer
=	O
vtable	pointer
;	O
}	O
__attribute__	O
(	O
(	O
no_sanitize	O
(	O
"integer"	pointer
)	O
)	O
)	O
WGET_GCC_PURE	O
static	O
unsigned	O
int	O
hash_ocsp	function
(	O
const	O
ocsp_entry	struct
*	O
ocsp	pointer
)	O
{	O
unsigned	O
int	O
hash	pointer
=	O
0	int
;	O
const	O
unsigned	O
char	O
*	O
p	pointer
;	O
for	O
(	O
p	pointer
=	O
(	O
unsigned	O
char	O
*	O
)	O
ocsp	pointer
->	O
key	int
;	O
*	O
p	pointer
;	O
p	pointer
++	O
)	O
hash	pointer
=	O
hash	pointer
*	O
101	int
+	O
*	O
p	pointer
;	O
return	O
hash	pointer
;	O
}	O
WGET_GCC_NONNULL_ALL	O
WGET_GCC_PURE	O
static	O
int	O
compare_ocsp	function
(	O
const	O
ocsp_entry	struct
*	O
h1	pointer
,	O
const	O
ocsp_entry	struct
*	O
h2	pointer
)	O
{	O
return	O
strcmp	function
(	O
h1	pointer
->	O
key	int
,	O
h2	pointer
->	O
key	int
)	O
;	O
}	O
static	O
ocsp_entry	struct
*	O
init_ocsp	function
(	O
ocsp_entry	struct
*	O
ocsp	pointer
)	O
{	O
if	O
(	O
!	O
ocsp	pointer
)	O
{	O
if	O
(	O
!	O
(	O
ocsp	pointer
=	O
wget_calloc	function
(	O
1	int
,	O
sizeof	O
(	O
ocsp_entry	struct
)	O
)	O
)	O
)	O
return	O
NULL	O
;	O
}	O
else	O
memset	function
(	O
ocsp	pointer
,	O
0	int
,	O
sizeof	O
(	O
*	O
ocsp	pointer
)	O
)	O
;	O
ocsp	pointer
->	O
mtime	long
=	O
time	struct
(	O
NULL	O
)	O
;	O
return	O
ocsp	pointer
;	O
}	O
static	O
void	O
deinit_ocsp	function
(	O
ocsp_entry	struct
*	O
ocsp	pointer
)	O
{	O
if	O
(	O
ocsp	pointer
)	O
{	O
xfree	O
(	O
ocsp	pointer
->	O
key	int
)	O
;	O
}	O
}	O
static	O
void	O
free_ocsp	function
(	O
ocsp_entry	struct
*	O
ocsp	pointer
)	O
{	O
if	O
(	O
ocsp	pointer
)	O
{	O
deinit_ocsp	function
(	O
ocsp	pointer
)	O
;	O
xfree	O
(	O
ocsp	pointer
)	O
;	O
}	O
}	O
static	O
ocsp_entry	struct
*	O
new_ocsp	function
(	O
const	O
char	O
*	O
fingerprint	pointer
,	O
time_t	long
maxage	long
,	O
bool	bool
valid	pointer
)	O
{	O
if	O
(	O
fingerprint	pointer
)	O
{	O
if	O
(	O
!	O
(	O
fingerprint	pointer
=	O
wget_strdup	function
(	O
fingerprint	pointer
)	O
)	O
)	O
return	O
NULL	O
;	O
}	O
ocsp_entry	struct
*	O
ocsp	pointer
=	O
init_ocsp	function
(	O
NULL	O
)	O
;	O
if	O
(	O
ocsp	pointer
)	O
{	O
ocsp	pointer
->	O
key	int
=	O
fingerprint	pointer
;	O
ocsp	pointer
->	O
maxage	long
=	O
maxage	long
;	O
ocsp	pointer
->	O
valid	pointer
=	O
valid	pointer
;	O
}	O
else	O
xfree	O
(	O
fingerprint	pointer
)	O
;	O
return	O
ocsp	pointer
;	O
}	O
bool	bool
wget_ocsp_fingerprint_in_cache	function
(	O
const	O
wget_ocsp_db	struct
*	O
ocsp_db	pointer
,	O
const	O
char	O
*	O
fingerprint	pointer
,	O
int	O
*	O
revoked	pointer
)	O
{	O
if	O
(	O
plugin_vtable	pointer
)	O
return	O
plugin_vtable	pointer
->	O
fingerprint_in_cache	pointer
(	O
ocsp_db	pointer
,	O
fingerprint	pointer
,	O
revoked	pointer
)	O
;	O
if	O
(	O
!	O
ocsp_db	pointer
)	O
return	O
false	int
;	O
ocsp_entry	struct
ocsp	pointer
,	O
*	O
ocspp	pointer
;	O
ocsp	pointer
.	O
key	int
=	O
fingerprint	pointer
;	O
if	O
(	O
wget_hashmap_get	function
(	O
ocsp_db	pointer
->	O
fingerprints	pointer
,	O
&	O
ocsp	pointer
,	O
&	O
ocspp	pointer
)	O
&&	O
ocspp	pointer
->	O
maxage	long
>=	O
(	O
int64_t	long
)	O
time	struct
(	O
NULL	O
)	O
)	O
{	O
if	O
(	O
revoked	pointer
)	O
*	O
revoked	pointer
=	O
!	O
ocspp	pointer
->	O
valid	pointer
;	O
return	O
true	int
;	O
}	O
return	O
false	int
;	O
}	O
bool	bool
wget_ocsp_hostname_is_valid	function
(	O
const	O
wget_ocsp_db	struct
*	O
ocsp_db	pointer
,	O
const	O
char	O
*	O
hostname	pointer
)	O
{	O
if	O
(	O
plugin_vtable	pointer
)	O
return	O
plugin_vtable	pointer
->	O
hostname_is_valid	pointer
(	O
ocsp_db	pointer
,	O
hostname	pointer
)	O
;	O
if	O
(	O
!	O
ocsp_db	pointer
)	O
return	O
false	int
;	O
ocsp_entry	struct
ocsp	pointer
,	O
*	O
ocspp	pointer
;	O
ocsp	pointer
.	O
key	int
=	O
hostname	pointer
;	O
if	O
(	O
wget_hashmap_get	function
(	O
ocsp_db	pointer
->	O
hosts	pointer
,	O
&	O
ocsp	pointer
,	O
&	O
ocspp	pointer
)	O
&&	O
ocspp	pointer
->	O
maxage	long
>=	O
(	O
int64_t	long
)	O
time	struct
(	O
NULL	O
)	O
)	O
{	O
return	O
true	int
;	O
}	O
return	O
false	int
;	O
}	O
void	O
wget_ocsp_db_deinit	function
(	O
wget_ocsp_db	struct
*	O
ocsp_db	pointer
)	O
{	O
if	O
(	O
plugin_vtable	pointer
)	O
{	O
plugin_vtable	pointer
->	O
deinit	pointer
(	O
ocsp_db	pointer
)	O
;	O
return	O
;	O
}	O
if	O
(	O
ocsp_db	pointer
)	O
{	O
xfree	O
(	O
ocsp_db	pointer
->	O
fname	pointer
)	O
;	O
wget_thread_mutex_lock	function
(	O
ocsp_db	pointer
->	O
mutex	pointer
)	O
;	O
wget_hashmap_free	function
(	O
&	O
ocsp_db	pointer
->	O
fingerprints	pointer
)	O
;	O
wget_hashmap_free	function
(	O
&	O
ocsp_db	pointer
->	O
hosts	pointer
)	O
;	O
wget_thread_mutex_unlock	function
(	O
ocsp_db	pointer
->	O
mutex	pointer
)	O
;	O
wget_thread_mutex_destroy	function
(	O
&	O
ocsp_db	pointer
->	O
mutex	pointer
)	O
;	O
}	O
}	O
void	O
wget_ocsp_db_free	function
(	O
wget_ocsp_db	struct
*	O
*	O
ocsp_db	pointer
)	O
{	O
if	O
(	O
plugin_vtable	pointer
)	O
{	O
plugin_vtable	pointer
->	O
free	function
(	O
ocsp_db	pointer
)	O
;	O
return	O
;	O
}	O
if	O
(	O
ocsp_db	pointer
&&	O
*	O
ocsp_db	pointer
)	O
{	O
wget_ocsp_db_deinit	function
(	O
*	O
ocsp_db	pointer
)	O
;	O
xfree	O
(	O
*	O
ocsp_db	pointer
)	O
;	O
}	O
}	O
static	O
void	O
ocsp_db_add_fingerprint_entry	function
(	O
wget_ocsp_db	struct
*	O
ocsp_db	pointer
,	O
ocsp_entry	struct
*	O
ocsp	pointer
)	O
{	O
if	O
(	O
!	O
ocsp	pointer
)	O
return	O
;	O
if	O
(	O
!	O
ocsp_db	pointer
)	O
{	O
free_ocsp	function
(	O
ocsp	pointer
)	O
;	O
return	O
;	O
}	O
wget_thread_mutex_lock	function
(	O
ocsp_db	pointer
->	O
mutex	pointer
)	O
;	O
if	O
(	O
ocsp	pointer
->	O
maxage	long
==	O
0	int
)	O
{	O
if	O
(	O
wget_hashmap_remove	function
(	O
ocsp_db	pointer
->	O
fingerprints	pointer
,	O
ocsp	pointer
)	O
)	O
debug_printf	O
(	O
"removed OCSP cert %s\n"	pointer
,	O
ocsp	pointer
->	O
key	int
)	O
;	O
free_ocsp	function
(	O
ocsp	pointer
)	O
;	O
}	O
else	O
{	O
ocsp_entry	struct
*	O
old	pointer
;	O
if	O
(	O
wget_hashmap_get	function
(	O
ocsp_db	pointer
->	O
fingerprints	pointer
,	O
ocsp	pointer
,	O
&	O
old	pointer
)	O
)	O
{	O
if	O
(	O
old	pointer
->	O
mtime	long
<	O
ocsp	pointer
->	O
mtime	long
)	O
{	O
old	pointer
->	O
mtime	long
=	O
ocsp	pointer
->	O
mtime	long
;	O
old	pointer
->	O
maxage	long
=	O
ocsp	pointer
->	O
maxage	long
;	O
old	pointer
->	O
valid	pointer
=	O
ocsp	pointer
->	O
valid	pointer
;	O
debug_printf	O
(	O
"update OCSP cert %s (maxage=%lld,valid=%d)\n"	pointer
,	O
old	pointer
->	O
key	int
,	O
(	O
long	O
long	O
)	O
old	pointer
->	O
maxage	long
,	O
old	pointer
->	O
valid	pointer
)	O
;	O
}	O
free_ocsp	function
(	O
ocsp	pointer
)	O
;	O
}	O
else	O
{	O
debug_printf	O
(	O
"add OCSP cert %s (maxage=%lld,valid=%d)\n"	pointer
,	O
ocsp	pointer
->	O
key	int
,	O
(	O
long	O
long	O
)	O
ocsp	pointer
->	O
maxage	long
,	O
ocsp	pointer
->	O
valid	pointer
)	O
;	O
wget_hashmap_put	function
(	O
ocsp_db	pointer
->	O
fingerprints	pointer
,	O
ocsp	pointer
,	O
ocsp	pointer
)	O
;	O
}	O
}	O
wget_thread_mutex_unlock	function
(	O
ocsp_db	pointer
->	O
mutex	pointer
)	O
;	O
}	O
void	O
wget_ocsp_db_add_fingerprint	function
(	O
wget_ocsp_db	struct
*	O
ocsp_db	pointer
,	O
const	O
char	O
*	O
fingerprint	pointer
,	O
time_t	long
maxage	long
,	O
bool	bool
valid	pointer
)	O
{	O
if	O
(	O
plugin_vtable	pointer
)	O
{	O
plugin_vtable	pointer
->	O
add_fingerprint	pointer
(	O
ocsp_db	pointer
,	O
fingerprint	pointer
,	O
maxage	long
,	O
valid	pointer
)	O
;	O
return	O
;	O
}	O
ocsp_entry	struct
*	O
ocsp	pointer
=	O
new_ocsp	function
(	O
fingerprint	pointer
,	O
maxage	long
,	O
valid	pointer
)	O
;	O
ocsp_db_add_fingerprint_entry	function
(	O
ocsp_db	pointer
,	O
ocsp	pointer
)	O
;	O
}	O
static	O
void	O
ocsp_db_add_host_entry	function
(	O
wget_ocsp_db	struct
*	O
ocsp_db	pointer
,	O
ocsp_entry	struct
*	O
ocsp	pointer
)	O
{	O
if	O
(	O
!	O
ocsp	pointer
)	O
return	O
;	O
if	O
(	O
!	O
ocsp_db	pointer
)	O
{	O
free_ocsp	function
(	O
ocsp	pointer
)	O
;	O
return	O
;	O
}	O
wget_thread_mutex_lock	function
(	O
ocsp_db	pointer
->	O
mutex	pointer
)	O
;	O
if	O
(	O
ocsp	pointer
->	O
maxage	long
==	O
0	int
)	O
{	O
if	O
(	O
wget_hashmap_remove	function
(	O
ocsp_db	pointer
->	O
hosts	pointer
,	O
ocsp	pointer
)	O
)	O
debug_printf	O
(	O
"removed OCSP host %s\n"	pointer
,	O
ocsp	pointer
->	O
key	int
)	O
;	O
free_ocsp	function
(	O
ocsp	pointer
)	O
;	O
}	O
else	O
{	O
ocsp_entry	struct
*	O
old	pointer
;	O
if	O
(	O
wget_hashmap_get	function
(	O
ocsp_db	pointer
->	O
hosts	pointer
,	O
ocsp	pointer
,	O
&	O
old	pointer
)	O
)	O
{	O
if	O
(	O
old	pointer
->	O
mtime	long
<	O
ocsp	pointer
->	O
mtime	long
)	O
{	O
old	pointer
->	O
mtime	long
=	O
ocsp	pointer
->	O
mtime	long
;	O
old	pointer
->	O
maxage	long
=	O
ocsp	pointer
->	O
maxage	long
;	O
old	pointer
->	O
valid	pointer
=	O
ocsp	pointer
->	O
valid	pointer
;	O
debug_printf	O
(	O
"update OCSP host %s (maxage=%lld)\n"	pointer
,	O
old	pointer
->	O
key	int
,	O
(	O
long	O
long	O
)	O
old	pointer
->	O
maxage	long
)	O
;	O
}	O
free_ocsp	function
(	O
ocsp	pointer
)	O
;	O
}	O
else	O
{	O
wget_hashmap_put	function
(	O
ocsp_db	pointer
->	O
hosts	pointer
,	O
ocsp	pointer
,	O
ocsp	pointer
)	O
;	O
debug_printf	O
(	O
"add OCSP host %s (maxage=%lld)\n"	pointer
,	O
ocsp	pointer
->	O
key	int
,	O
(	O
long	O
long	O
)	O
ocsp	pointer
->	O
maxage	long
)	O
;	O
}	O
}	O
wget_thread_mutex_unlock	function
(	O
ocsp_db	pointer
->	O
mutex	pointer
)	O
;	O
}	O
void	O
wget_ocsp_db_add_host	function
(	O
wget_ocsp_db	struct
*	O
ocsp_db	pointer
,	O
const	O
char	O
*	O
host	pointer
,	O
time_t	long
maxage	long
)	O
{	O
if	O
(	O
plugin_vtable	pointer
)	O
{	O
plugin_vtable	pointer
->	O
add_host	pointer
(	O
ocsp_db	pointer
,	O
host	pointer
,	O
maxage	long
)	O
;	O
return	O
;	O
}	O
ocsp_entry	struct
*	O
ocsp	pointer
=	O
new_ocsp	function
(	O
host	pointer
,	O
maxage	long
,	O
false	int
)	O
;	O
ocsp_db_add_host_entry	function
(	O
ocsp_db	pointer
,	O
ocsp	pointer
)	O
;	O
}	O
static	O
int	O
ocsp_db_load	function
(	O
wget_ocsp_db	struct
*	O
ocsp_db	pointer
,	O
FILE	struct
*	O
fp	pointer
,	O
bool	bool
load_hosts	bool
)	O
{	O
ocsp_entry	struct
ocsp	pointer
;	O
char	O
*	O
buf	pointer
=	O
NULL	O
,	O
*	O
linep	pointer
,	O
*	O
p	pointer
;	O
size_t	long
bufsize	long
=	O
0	int
;	O
ssize_t	long
buflen	long
;	O
int64_t	long
now	long
=	O
time	struct
(	O
NULL	O
)	O
;	O
int	O
ok	int
;	O
while	O
(	O
(	O
buflen	long
=	O
wget_getline	function
(	O
&	O
buf	pointer
,	O
&	O
bufsize	long
,	O
fp	pointer
)	O
)	O
>=	O
0	int
)	O
{	O
linep	pointer
=	O
buf	pointer
;	O
while	O
(	O
isspace	function
(	O
*	O
linep	pointer
)	O
)	O
linep	pointer
++	O
;	O
if	O
(	O
!	O
*	O
linep	pointer
)	O
continue	O
;	O
if	O
(	O
*	O
linep	pointer
==	O
'#'	O
)	O
continue	O
;	O
while	O
(	O
buflen	long
>	O
0	int
&&	O
(	O
buf	pointer
[	O
buflen	long
]	O
==	O
'\n'	O
||	O
buf	pointer
[	O
buflen	long
]	O
==	O
'\r'	O
)	O
)	O
buf	pointer
[	O
--	O
buflen	long
]	O
=	O
0	int
;	O
init_ocsp	function
(	O
&	O
ocsp	pointer
)	O
;	O
ok	int
=	O
0	int
;	O
if	O
(	O
*	O
linep	pointer
)	O
{	O
for	O
(	O
p	pointer
=	O
linep	pointer
;	O
*	O
linep	pointer
&&	O
!	O
isspace	function
(	O
*	O
linep	pointer
)	O
;	O
)	O
linep	pointer
++	O
;	O
ocsp	pointer
.	O
key	int
=	O
wget_strmemdup	function
(	O
p	pointer
,	O
linep	pointer
-	O
p	pointer
)	O
;	O
}	O
if	O
(	O
*	O
linep	pointer
)	O
{	O
for	O
(	O
p	pointer
=	O
++	O
linep	pointer
;	O
*	O
linep	pointer
&&	O
!	O
isspace	function
(	O
*	O
linep	pointer
)	O
;	O
)	O
linep	pointer
++	O
;	O
ocsp	pointer
.	O
maxage	long
=	O
(	O
int64_t	long
)	O
atoll	function
(	O
p	pointer
)	O
;	O
if	O
(	O
ocsp	pointer
.	O
maxage	long
<	O
now	long
)	O
{	O
deinit_ocsp	function
(	O
&	O
ocsp	pointer
)	O
;	O
continue	O
;	O
}	O
ok	int
=	O
1	int
;	O
}	O
if	O
(	O
*	O
linep	pointer
)	O
{	O
for	O
(	O
p	pointer
=	O
++	O
linep	pointer
;	O
*	O
linep	pointer
&&	O
!	O
isspace	function
(	O
*	O
linep	pointer
)	O
;	O
)	O
linep	pointer
++	O
;	O
ocsp	pointer
.	O
mtime	long
=	O
(	O
int64_t	long
)	O
atoll	function
(	O
p	pointer
)	O
;	O
}	O
if	O
(	O
*	O
linep	pointer
)	O
{	O
for	O
(	O
p	pointer
=	O
++	O
linep	pointer
;	O
*	O
linep	pointer
&&	O
!	O
isspace	function
(	O
*	O
linep	pointer
)	O
;	O
)	O
linep	pointer
++	O
;	O
ocsp	pointer
.	O
valid	pointer
=	O
atoi	function
(	O
p	pointer
)	O
!=	O
0	int
;	O
}	O
if	O
(	O
ok	int
)	O
{	O
if	O
(	O
load_hosts	bool
)	O
ocsp_db_add_host_entry	function
(	O
ocsp_db	pointer
,	O
wget_memdup	function
(	O
&	O
ocsp	pointer
,	O
sizeof	O
(	O
ocsp	pointer
)	O
)	O
)	O
;	O
else	O
ocsp_db_add_fingerprint_entry	function
(	O
ocsp_db	pointer
,	O
wget_memdup	function
(	O
&	O
ocsp	pointer
,	O
sizeof	O
(	O
ocsp	pointer
)	O
)	O
)	O
;	O
}	O
else	O
{	O
deinit_ocsp	function
(	O
&	O
ocsp	pointer
)	O
;	O
error_printf	O
(	O
_	O
(	O
"Failed to parse OCSP line: '%s'\n"	pointer
)	O
,	O
buf	pointer
)	O
;	O
}	O
}	O
xfree	O
(	O
buf	pointer
)	O
;	O
if	O
(	O
ferror	function
(	O
fp	pointer
)	O
)	O
return	O
-	O
1	int
;	O
return	O
0	int
;	O
}	O
static	O
int	O
ocsp_db_load_hosts	function
(	O
void	O
*	O
ocsp_db	pointer
,	O
FILE	struct
*	O
fp	pointer
)	O
{	O
return	O
ocsp_db_load	function
(	O
ocsp_db	pointer
,	O
fp	pointer
,	O
true	int
)	O
;	O
}	O
static	O
int	O
ocsp_db_load_fingerprints	function
(	O
void	O
*	O
ocsp_db	pointer
,	O
FILE	struct
*	O
fp	pointer
)	O
{	O
return	O
ocsp_db_load	function
(	O
ocsp_db	pointer
,	O
fp	pointer
,	O
false	int
)	O
;	O
}	O
int	O
wget_ocsp_db_load	function
(	O
wget_ocsp_db	struct
*	O
ocsp_db	pointer
)	O
{	O
if	O
(	O
plugin_vtable	pointer
)	O
return	O
plugin_vtable	pointer
->	O
load	pointer
(	O
ocsp_db	pointer
)	O
;	O
int	O
ret	int
;	O
if	O
(	O
!	O
ocsp_db	pointer
->	O
fname	pointer
||	O
!	O
*	O
ocsp_db	pointer
->	O
fname	pointer
)	O
return	O
-	O
1	int
;	O
char	O
fname_hosts	O
[	O
strlen	function
(	O
ocsp_db	pointer
->	O
fname	pointer
)	O
+	O
6	int
+	O
1	int
]	O
;	O
wget_snprintf	function
(	O
fname_hosts	O
,	O
sizeof	O
(	O
fname_hosts	O
)	O
,	O
"%s_hosts"	pointer
,	O
ocsp_db	pointer
->	O
fname	pointer
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
wget_update_file	function
(	O
fname_hosts	O
,	O
ocsp_db_load_hosts	function
,	O
NULL	O
,	O
ocsp_db	pointer
)	O
)	O
)	O
error_printf	O
(	O
_	O
(	O
"Failed to read OCSP hosts\n"	pointer
)	O
)	O
;	O
else	O
debug_printf	O
(	O
"Fetched OCSP hosts from '%s'\n"	pointer
,	O
fname_hosts	O
)	O
;	O
if	O
(	O
wget_update_file	function
(	O
ocsp_db	pointer
->	O
fname	pointer
,	O
ocsp_db_load_fingerprints	function
,	O
NULL	O
,	O
ocsp_db	pointer
)	O
)	O
{	O
error_printf	O
(	O
_	O
(	O
"Failed to read OCSP fingerprints\n"	pointer
)	O
)	O
;	O
ret	int
=	O
-	O
1	int
;	O
}	O
else	O
debug_printf	O
(	O
"Fetched OCSP fingerprints from '%s'\n"	pointer
,	O
ocsp_db	pointer
->	O
fname	pointer
)	O
;	O
return	O
ret	int
;	O
}	O
WGET_GCC_NONNULL_ALL	O
static	O
int	O
ocsp_save_fingerprint	function
(	O
FILE	struct
*	O
fp	pointer
,	O
const	O
ocsp_entry	struct
*	O
ocsp	pointer
)	O
{	O
wget_fprintf	function
(	O
fp	pointer
,	O
"%s %lld %lld %d\n"	pointer
,	O
ocsp	pointer
->	O
key	int
,	O
(	O
long	O
long	O
)	O
ocsp	pointer
->	O
maxage	long
,	O
(	O
long	O
long	O
)	O
ocsp	pointer
->	O
mtime	long
,	O
ocsp	pointer
->	O
valid	pointer
)	O
;	O
return	O
0	int
;	O
}	O
WGET_GCC_NONNULL_ALL	O
static	O
int	O
ocsp_save_host	function
(	O
FILE	struct
*	O
fp	pointer
,	O
const	O
ocsp_entry	struct
*	O
ocsp	pointer
)	O
{	O
wget_fprintf	function
(	O
fp	pointer
,	O
"%s %lld %lld\n"	pointer
,	O
ocsp	pointer
->	O
key	int
,	O
(	O
long	O
long	O
)	O
ocsp	pointer
->	O
maxage	long
,	O
(	O
long	O
long	O
)	O
ocsp	pointer
->	O
mtime	long
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
ocsp_db_save_hosts	function
(	O
void	O
*	O
ocsp_db	pointer
,	O
FILE	struct
*	O
fp	pointer
)	O
{	O
wget_hashmap	struct
*	O
map	pointer
=	O
(	O
(	O
wget_ocsp_db	struct
*	O
)	O
ocsp_db	pointer
)	O
->	O
hosts	pointer
;	O
if	O
(	O
(	O
wget_hashmap_size	function
(	O
map	pointer
)	O
)	O
>	O
0	int
)	O
{	O
fputs	function
(	O
"#OCSP 1.0 host file\n"	pointer
,	O
fp	pointer
)	O
;	O
fputs	function
(	O
"#Generated by Wget "	pointer
PACKAGE_VERSION	pointer
". Edit at your own risk.\n"	pointer
,	O
fp	pointer
)	O
;	O
fputs	function
(	O
"<hostname> <time_t maxage> <time_t mtime>\n\n"	pointer
,	O
fp	pointer
)	O
;	O
wget_hashmap_browse	function
(	O
map	pointer
,	O
(	O
wget_hashmap_browse_fn	function
*	O
)	O
ocsp_save_host	function
,	O
fp	pointer
)	O
;	O
if	O
(	O
ferror	function
(	O
fp	pointer
)	O
)	O
return	O
-	O
1	int
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
ocsp_db_save_fingerprints	function
(	O
void	O
*	O
ocsp_db	pointer
,	O
FILE	struct
*	O
fp	pointer
)	O
{	O
wget_hashmap	struct
*	O
map	pointer
=	O
(	O
(	O
wget_ocsp_db	struct
*	O
)	O
ocsp_db	pointer
)	O
->	O
fingerprints	pointer
;	O
if	O
(	O
(	O
wget_hashmap_size	function
(	O
map	pointer
)	O
)	O
>	O
0	int
)	O
{	O
fputs	function
(	O
"#OCSP 1.0 fingerprint file\n"	pointer
,	O
fp	pointer
)	O
;	O
fputs	function
(	O
"#Generated by Wget "	pointer
PACKAGE_VERSION	pointer
". Edit at your own risk.\n"	pointer
,	O
fp	pointer
)	O
;	O
fputs	function
(	O
"<sha256 fingerprint of cert> <time_t maxage> <time_t mtime> <valid>\n\n"	pointer
,	O
fp	pointer
)	O
;	O
wget_hashmap_browse	function
(	O
map	pointer
,	O
(	O
wget_hashmap_browse_fn	function
*	O
)	O
ocsp_save_fingerprint	function
,	O
fp	pointer
)	O
;	O
if	O
(	O
ferror	function
(	O
fp	pointer
)	O
)	O
return	O
-	O
1	int
;	O
}	O
return	O
0	int
;	O
}	O
int	O
wget_ocsp_db_save	function
(	O
wget_ocsp_db	struct
*	O
ocsp_db	pointer
)	O
{	O
if	O
(	O
plugin_vtable	pointer
)	O
return	O
plugin_vtable	pointer
->	O
save	pointer
(	O
ocsp_db	pointer
)	O
;	O
int	O
ret	int
;	O
if	O
(	O
!	O
ocsp_db	pointer
||	O
!	O
ocsp_db	pointer
->	O
fname	pointer
||	O
!	O
*	O
ocsp_db	pointer
->	O
fname	pointer
)	O
return	O
-	O
1	int
;	O
char	O
fname_hosts	O
[	O
strlen	function
(	O
ocsp_db	pointer
->	O
fname	pointer
)	O
+	O
6	int
+	O
1	int
]	O
;	O
wget_snprintf	function
(	O
fname_hosts	O
,	O
sizeof	O
(	O
fname_hosts	O
)	O
,	O
"%s_hosts"	pointer
,	O
ocsp_db	pointer
->	O
fname	pointer
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
wget_update_file	function
(	O
fname_hosts	O
,	O
ocsp_db_load_hosts	function
,	O
ocsp_db_save_hosts	function
,	O
ocsp_db	pointer
)	O
)	O
)	O
error_printf	O
(	O
_	O
(	O
"Failed to write to OCSP hosts to '%s'\n"	pointer
)	O
,	O
fname_hosts	O
)	O
;	O
else	O
debug_printf	O
(	O
"Saved OCSP hosts to '%s'\n"	pointer
,	O
fname_hosts	O
)	O
;	O
if	O
(	O
wget_update_file	function
(	O
ocsp_db	pointer
->	O
fname	pointer
,	O
ocsp_db_load_fingerprints	function
,	O
ocsp_db_save_fingerprints	function
,	O
ocsp_db	pointer
)	O
)	O
{	O
error_printf	O
(	O
_	O
(	O
"Failed to write to OCSP fingerprints to '%s'\n"	pointer
)	O
,	O
ocsp_db	pointer
->	O
fname	pointer
)	O
;	O
ret	int
=	O
-	O
1	int
;	O
}	O
else	O
debug_printf	O
(	O
"Saved OCSP fingerprints to '%s'\n"	pointer
,	O
ocsp_db	pointer
->	O
fname	pointer
)	O
;	O
return	O
ret	int
;	O
}	O
wget_ocsp_db	struct
*	O
wget_ocsp_db_init	function
(	O
wget_ocsp_db	struct
*	O
ocsp_db	pointer
,	O
const	O
char	O
*	O
fname	pointer
)	O
{	O
if	O
(	O
plugin_vtable	pointer
)	O
return	O
plugin_vtable	pointer
->	O
init	pointer
(	O
ocsp_db	pointer
,	O
fname	pointer
)	O
;	O
if	O
(	O
fname	pointer
)	O
if	O
(	O
!	O
(	O
fname	pointer
=	O
wget_strdup	function
(	O
fname	pointer
)	O
)	O
)	O
return	O
NULL	O
;	O
wget_hashmap	struct
*	O
fingerprints	pointer
=	O
wget_hashmap_create	function
(	O
16	int
,	O
(	O
wget_hashmap_hash_fn	function
*	O
)	O
hash_ocsp	function
,	O
(	O
wget_hashmap_compare_fn	function
*	O
)	O
compare_ocsp	function
)	O
;	O
wget_hashmap	struct
*	O
hosts	pointer
=	O
wget_hashmap_create	function
(	O
16	int
,	O
(	O
wget_hashmap_hash_fn	function
*	O
)	O
hash_ocsp	function
,	O
(	O
wget_hashmap_compare_fn	function
*	O
)	O
compare_ocsp	function
)	O
;	O
if	O
(	O
!	O
fingerprints	pointer
||	O
!	O
hosts	pointer
)	O
{	O
no_mem	O
:	O
wget_hashmap_free	function
(	O
&	O
hosts	pointer
)	O
;	O
wget_hashmap_free	function
(	O
&	O
fingerprints	pointer
)	O
;	O
xfree	O
(	O
fname	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
if	O
(	O
!	O
ocsp_db	pointer
)	O
{	O
if	O
(	O
!	O
(	O
ocsp_db	pointer
=	O
wget_calloc	function
(	O
1	int
,	O
sizeof	O
(	O
struct	O
wget_ocsp_db_st	struct
)	O
)	O
)	O
)	O
goto	O
no_mem	O
;	O
}	O
else	O
memset	function
(	O
ocsp_db	pointer
,	O
0	int
,	O
sizeof	O
(	O
*	O
ocsp_db	pointer
)	O
)	O
;	O
ocsp_db	pointer
->	O
fname	pointer
=	O
fname	pointer
;	O
wget_hashmap_set_key_destructor	function
(	O
fingerprints	pointer
,	O
(	O
wget_hashmap_key_destructor	function
*	O
)	O
free_ocsp	function
)	O
;	O
wget_hashmap_set_value_destructor	function
(	O
fingerprints	pointer
,	O
(	O
wget_hashmap_value_destructor	function
*	O
)	O
free_ocsp	function
)	O
;	O
ocsp_db	pointer
->	O
fingerprints	pointer
=	O
fingerprints	pointer
;	O
wget_hashmap_set_key_destructor	function
(	O
hosts	pointer
,	O
(	O
wget_hashmap_key_destructor	function
*	O
)	O
free_ocsp	function
)	O
;	O
wget_hashmap_set_value_destructor	function
(	O
hosts	pointer
,	O
(	O
wget_hashmap_value_destructor	function
*	O
)	O
free_ocsp	function
)	O
;	O
ocsp_db	pointer
->	O
hosts	pointer
=	O
hosts	pointer
;	O
wget_thread_mutex_init	function
(	O
&	O
ocsp_db	pointer
->	O
mutex	pointer
)	O
;	O
return	O
(	O
wget_ocsp_db	struct
*	O
)	O
ocsp_db	pointer
;	O
}	O
void	O
wget_ocsp_db_set_fname	function
(	O
wget_ocsp_db	struct
*	O
ocsp_db	pointer
,	O
const	O
char	O
*	O
fname	pointer
)	O
{	O
xfree	O
(	O
ocsp_db	pointer
->	O
fname	pointer
)	O
;	O
ocsp_db	pointer
->	O
fname	pointer
=	O
wget_strdup	function
(	O
fname	pointer
)	O
;	O
}	O
