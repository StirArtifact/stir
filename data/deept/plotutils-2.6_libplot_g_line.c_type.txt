int	O
_API_fline	O
(	O
R___	O
(	O
Plotter	struct
*	O
_plotter	pointer
)	O
double	O
x0	double
,	O
double	O
y0	function
,	O
double	O
x1	double
,	O
double	O
y1	function
)	O
{	O
if	O
(	O
!	O
_plotter	pointer
->	O
data	pointer
->	O
open	enum
)	O
{	O
_plotter	pointer
->	O
error	pointer
(	O
R___	O
(	O
_plotter	pointer
)	O
"fline: invalid operation"	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
!=	O
(	O
plPath	struct
*	O
)	O
NULL	O
&&	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
->	O
type	enum
!=	O
PATH_SEGMENT_LIST	int
||	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
->	O
type	enum
==	O
PATH_SEGMENT_LIST	int
&&	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
->	O
primitive	enum
)	O
)	O
)	O
_API_endpath	O
(	O
S___	O
(	O
_plotter	pointer
)	O
)	O
;	O
if	O
(	O
x0	double
!=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
pos	struct
.	O
x	double
||	O
y0	function
!=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
pos	struct
.	O
y	double
)	O
{	O
if	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
)	O
_API_endpath	O
(	O
S___	O
(	O
_plotter	pointer
)	O
)	O
;	O
_plotter	pointer
->	O
drawstate	pointer
->	O
pos	struct
.	O
x	double
=	O
x0	double
;	O
_plotter	pointer
->	O
drawstate	pointer
->	O
pos	struct
.	O
y	double
=	O
y0	function
;	O
}	O
return	O
_API_fcont	O
(	O
R___	O
(	O
_plotter	pointer
)	O
x1	double
,	O
y1	function
)	O
;	O
}	O
int	O
_API_fcont	O
(	O
R___	O
(	O
Plotter	struct
*	O
_plotter	pointer
)	O
double	O
x	double
,	O
double	O
y	double
)	O
{	O
int	O
prev_num_segments	int
;	O
plPoint	struct
p0	struct
,	O
p1	struct
;	O
if	O
(	O
!	O
_plotter	pointer
->	O
data	pointer
->	O
open	enum
)	O
{	O
_plotter	pointer
->	O
error	pointer
(	O
R___	O
(	O
_plotter	pointer
)	O
"fcont: invalid operation"	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
!=	O
(	O
plPath	struct
*	O
)	O
NULL	O
&&	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
->	O
type	enum
!=	O
PATH_SEGMENT_LIST	int
||	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
->	O
type	enum
==	O
PATH_SEGMENT_LIST	int
&&	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
->	O
primitive	enum
)	O
)	O
)	O
_API_endpath	O
(	O
S___	O
(	O
_plotter	pointer
)	O
)	O
;	O
p0	struct
=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
pos	struct
;	O
p1	struct
.	O
x	double
=	O
x	double
;	O
p1	struct
.	O
y	double
=	O
y	double
;	O
if	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
==	O
(	O
plPath	struct
*	O
)	O
NULL	O
)	O
{	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
=	O
_new_plPath	function
(	O
)	O
;	O
prev_num_segments	int
=	O
0	int
;	O
_add_moveto	function
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
,	O
p0	struct
)	O
;	O
}	O
else	O
prev_num_segments	int
=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
->	O
num_segments	int
;	O
if	O
(	O
_plotter	pointer
->	O
data	pointer
->	O
have_mixed_paths	enum
==	O
false	int
&&	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
->	O
num_segments	int
==	O
2	int
)	O
{	O
_pl_g_maybe_replace_arc	function
(	O
S___	O
(	O
_plotter	pointer
)	O
)	O
;	O
if	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
->	O
num_segments	int
>	O
2	int
)	O
prev_num_segments	int
=	O
0	int
;	O
}	O
_add_line	function
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
,	O
p1	struct
)	O
;	O
_plotter	pointer
->	O
drawstate	pointer
->	O
pos	struct
=	O
p1	struct
;	O
_plotter	pointer
->	O
maybe_prepaint_segments	pointer
(	O
R___	O
(	O
_plotter	pointer
)	O
prev_num_segments	int
)	O
;	O
if	O
(	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
->	O
num_segments	int
>=	O
_plotter	pointer
->	O
data	pointer
->	O
max_unfilled_path_length	int
)	O
&&	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
fill_type	int
==	O
0	int
)	O
&&	O
_plotter	pointer
->	O
path_is_flushable	pointer
(	O
S___	O
(	O
_plotter	pointer
)	O
)	O
)	O
_API_endpath	O
(	O
S___	O
(	O
_plotter	pointer
)	O
)	O
;	O
return	O
0	int
;	O
}	O
void	O
_pl_g_maybe_replace_arc	function
(	O
S___	O
(	O
Plotter	struct
*	O
_plotter	pointer
)	O
)	O
{	O
if	O
(	O
!	O
(	O
_plotter	pointer
->	O
data	pointer
->	O
have_mixed_paths	enum
==	O
false	int
&&	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
->	O
num_segments	int
==	O
2	int
)	O
)	O
return	O
;	O
switch	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
->	O
segments	pointer
[	O
1	int
]	O
.	O
type	enum
)	O
{	O
plPoint	struct
pc	struct
,	O
pd	struct
,	O
p1	struct
;	O
case	O
S_ARC	int
:	O
pc	struct
=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
->	O
segments	pointer
[	O
1	int
]	O
.	O
pc	struct
;	O
p1	struct
=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
->	O
segments	pointer
[	O
1	int
]	O
.	O
p	struct
;	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
->	O
num_segments	int
=	O
1	int
;	O
_add_arc_as_lines	function
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
,	O
pc	struct
,	O
p1	struct
)	O
;	O
break	O
;	O
case	O
S_ELLARC	int
:	O
pc	struct
=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
->	O
segments	pointer
[	O
1	int
]	O
.	O
pc	struct
;	O
p1	struct
=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
->	O
segments	pointer
[	O
1	int
]	O
.	O
p	struct
;	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
->	O
num_segments	int
=	O
1	int
;	O
_add_ellarc_as_lines	function
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
,	O
pc	struct
,	O
p1	struct
)	O
;	O
break	O
;	O
case	O
S_QUAD	int
:	O
pc	struct
=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
->	O
segments	pointer
[	O
1	int
]	O
.	O
pc	struct
;	O
p1	struct
=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
->	O
segments	pointer
[	O
1	int
]	O
.	O
p	struct
;	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
->	O
num_segments	int
=	O
1	int
;	O
_add_bezier2_as_lines	function
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
,	O
pc	struct
,	O
p1	struct
)	O
;	O
break	O
;	O
case	O
S_CUBIC	int
:	O
pc	struct
=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
->	O
segments	pointer
[	O
1	int
]	O
.	O
pc	struct
;	O
pd	struct
=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
->	O
segments	pointer
[	O
1	int
]	O
.	O
pd	struct
;	O
p1	struct
=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
->	O
segments	pointer
[	O
1	int
]	O
.	O
p	struct
;	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
->	O
num_segments	int
=	O
1	int
;	O
_add_bezier3_as_lines	function
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
,	O
pc	struct
,	O
pd	struct
,	O
p1	struct
)	O
;	O
break	O
;	O
default	O
:	O
break	O
;	O
}	O
}	O
