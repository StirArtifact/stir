extern	O
char	O
*	O
find_ignore_dirs	pointer
;	O
extern	O
int	O
num_history_items_recorded	int
;	O
char	O
*	O
profile_name	pointer
;	O
char	O
*	O
global_profile_name	pointer
;	O
char	O
setup_color_string	array
[	O
4096	int
]	O
;	O
char	O
term_color_string	array
[	O
4096	int
]	O
;	O
char	O
color_terminal_string	array
[	O
512	int
]	O
;	O
int	O
startup_left_mode	int
;	O
int	O
startup_right_mode	int
;	O
int	O
saving_setup	int
;	O
static	O
const	O
struct	O
{	O
const	O
char	O
*	O
key	pointer
;	O
sortfn	function
*	O
sort_type	pointer
;	O
}	O
sort_names	array
[	O
]	O
=	O
{	O
{	O
"name"	pointer
,	O
(	O
sortfn	function
*	O
)	O
sort_name	function
}	O
,	O
{	O
"extension"	pointer
,	O
(	O
sortfn	function
*	O
)	O
sort_ext	function
}	O
,	O
{	O
"time"	pointer
,	O
(	O
sortfn	function
*	O
)	O
sort_time	function
}	O
,	O
{	O
"atime"	pointer
,	O
(	O
sortfn	function
*	O
)	O
sort_atime	function
}	O
,	O
{	O
"ctime"	pointer
,	O
(	O
sortfn	function
*	O
)	O
sort_ctime	function
}	O
,	O
{	O
"size"	pointer
,	O
(	O
sortfn	function
*	O
)	O
sort_size	function
}	O
,	O
{	O
"inode"	pointer
,	O
(	O
sortfn	function
*	O
)	O
sort_inode	function
}	O
,	O
{	O
"unsorted"	pointer
,	O
(	O
sortfn	function
*	O
)	O
unsorted	function
}	O
,	O
{	O
0	int
,	O
0	int
}	O
}	O
;	O
static	O
const	O
struct	O
{	O
const	O
char	O
*	O
key	pointer
;	O
int	O
list_type	int
;	O
}	O
list_types	enum
[	O
]	O
=	O
{	O
{	O
"full"	pointer
,	O
list_full	int
}	O
,	O
{	O
"brief"	pointer
,	O
list_brief	int
}	O
,	O
{	O
"long"	pointer
,	O
list_long	int
}	O
,	O
{	O
"user"	pointer
,	O
list_user	int
}	O
,	O
{	O
0	int
,	O
0	int
}	O
}	O
;	O
static	O
const	O
struct	O
{	O
const	O
char	O
*	O
opt_name	pointer
;	O
int	O
opt_type	int
;	O
}	O
panel_types	array
[	O
]	O
=	O
{	O
{	O
"listing"	pointer
,	O
view_listing	int
}	O
,	O
{	O
"quickview"	pointer
,	O
view_quick	int
}	O
,	O
{	O
"info"	pointer
,	O
view_info	int
}	O
,	O
{	O
"tree"	pointer
,	O
view_tree	int
}	O
,	O
{	O
0	int
,	O
0	int
}	O
}	O
;	O
static	O
const	O
struct	O
{	O
const	O
char	O
*	O
opt_name	pointer
;	O
int	O
*	O
opt_addr	pointer
;	O
}	O
layout	array
[	O
]	O
=	O
{	O
{	O
"equal_split"	pointer
,	O
&	O
equal_split	int
}	O
,	O
{	O
"first_panel_size"	pointer
,	O
&	O
first_panel_size	int
}	O
,	O
{	O
"message_visible"	pointer
,	O
&	O
message_visible	int
}	O
,	O
{	O
"keybar_visible"	pointer
,	O
&	O
keybar_visible	int
}	O
,	O
{	O
"xterm_title"	pointer
,	O
&	O
xterm_title	int
}	O
,	O
{	O
"output_lines"	pointer
,	O
&	O
output_lines	int
}	O
,	O
{	O
"command_prompt"	pointer
,	O
&	O
command_prompt	int
}	O
,	O
{	O
"menubar_visible"	pointer
,	O
&	O
menubar_visible	int
}	O
,	O
{	O
"show_mini_info"	pointer
,	O
&	O
show_mini_info	int
}	O
,	O
{	O
"permission_mode"	pointer
,	O
&	O
permission_mode	int
}	O
,	O
{	O
"filetype_mode"	pointer
,	O
&	O
filetype_mode	int
}	O
,	O
{	O
0	int
,	O
0	int
}	O
}	O
;	O
static	O
const	O
struct	O
{	O
const	O
char	O
*	O
opt_name	pointer
;	O
int	O
*	O
opt_addr	pointer
;	O
}	O
int_options	array
[	O
]	O
=	O
{	O
{	O
"show_backups"	pointer
,	O
&	O
show_backups	int
}	O
,	O
{	O
"show_dot_files"	pointer
,	O
&	O
show_dot_files	int
}	O
,	O
{	O
"verbose"	pointer
,	O
&	O
verbose	int
}	O
,	O
{	O
"mark_moves_down"	pointer
,	O
&	O
mark_moves_down	int
}	O
,	O
{	O
"pause_after_run"	pointer
,	O
&	O
pause_after_run	int
}	O
,	O
{	O
"shell_patterns"	pointer
,	O
&	O
easy_patterns	int
}	O
,	O
{	O
"auto_save_setup"	pointer
,	O
&	O
auto_save_setup	int
}	O
,	O
{	O
"auto_menu"	pointer
,	O
&	O
auto_menu	int
}	O
,	O
{	O
"use_internal_view"	pointer
,	O
&	O
use_internal_view	int
}	O
,	O
{	O
"use_internal_edit"	pointer
,	O
&	O
use_internal_edit	int
}	O
,	O
{	O
"clear_before_exec"	pointer
,	O
&	O
clear_before_exec	int
}	O
,	O
{	O
"mix_all_files"	pointer
,	O
&	O
mix_all_files	int
}	O
,	O
{	O
"fast_reload"	pointer
,	O
&	O
fast_reload	int
}	O
,	O
{	O
"fast_reload_msg_shown"	pointer
,	O
&	O
fast_reload_w	int
}	O
,	O
{	O
"confirm_delete"	pointer
,	O
&	O
confirm_delete	int
}	O
,	O
{	O
"confirm_overwrite"	pointer
,	O
&	O
confirm_overwrite	int
}	O
,	O
{	O
"confirm_execute"	pointer
,	O
&	O
confirm_execute	int
}	O
,	O
{	O
"confirm_exit"	pointer
,	O
&	O
confirm_exit	int
}	O
,	O
{	O
"confirm_directory_hotlist_delete"	pointer
,	O
&	O
confirm_directory_hotlist_delete	int
}	O
,	O
{	O
"safe_delete"	pointer
,	O
&	O
safe_delete	int
}	O
,	O
{	O
"mouse_repeat_rate"	pointer
,	O
&	O
mou_auto_repeat	int
}	O
,	O
{	O
"double_click_speed"	pointer
,	O
&	O
double_click_speed	int
}	O
,	O
{	O
"eight_bit_clean"	pointer
,	O
&	O
eight_bit_clean	int
}	O
,	O
{	O
"full_eight_bits"	pointer
,	O
&	O
full_eight_bits	int
}	O
,	O
{	O
"use_8th_bit_as_meta"	pointer
,	O
&	O
use_8th_bit_as_meta	int
}	O
,	O
{	O
"confirm_view_dir"	pointer
,	O
&	O
confirm_view_dir	int
}	O
,	O
{	O
"mouse_move_pages"	pointer
,	O
&	O
mouse_move_pages	int
}	O
,	O
{	O
"mouse_move_pages_viewer"	pointer
,	O
&	O
mouse_move_pages_viewer	int
}	O
,	O
{	O
"fast_refresh"	pointer
,	O
&	O
fast_refresh	int
}	O
,	O
{	O
"navigate_with_arrows"	pointer
,	O
&	O
navigate_with_arrows	int
}	O
,	O
{	O
"drop_menus"	pointer
,	O
&	O
drop_menus	int
}	O
,	O
{	O
"wrap_mode"	pointer
,	O
&	O
global_wrap_mode	int
}	O
,	O
{	O
"old_esc_mode"	pointer
,	O
&	O
old_esc_mode	int
}	O
,	O
{	O
"cd_symlinks"	pointer
,	O
&	O
cd_symlinks	int
}	O
,	O
{	O
"show_all_if_ambiguous"	pointer
,	O
&	O
show_all_if_ambiguous	int
}	O
,	O
{	O
"max_dirt_limit"	pointer
,	O
&	O
max_dirt_limit	int
}	O
,	O
{	O
"torben_fj_mode"	pointer
,	O
&	O
torben_fj_mode	int
}	O
,	O
{	O
"use_file_to_guess_type"	pointer
,	O
&	O
use_file_to_check_type	int
}	O
,	O
{	O
"alternate_plus_minus"	pointer
,	O
&	O
alternate_plus_minus	int
}	O
,	O
{	O
"only_leading_plus_minus"	pointer
,	O
&	O
only_leading_plus_minus	int
}	O
,	O
{	O
"show_output_starts_shell"	pointer
,	O
&	O
output_starts_shell	int
}	O
,	O
{	O
"panel_scroll_pages"	pointer
,	O
&	O
panel_scroll_pages	int
}	O
,	O
{	O
"xtree_mode"	pointer
,	O
&	O
xtree_mode	int
}	O
,	O
{	O
"num_history_items_recorded"	pointer
,	O
&	O
num_history_items_recorded	int
}	O
,	O
{	O
"file_op_compute_totals"	pointer
,	O
&	O
file_op_compute_totals	int
}	O
,	O
{	O
"vfs_timeout"	pointer
,	O
&	O
vfs_timeout	int
}	O
,	O
{	O
"ftpfs_directory_timeout"	pointer
,	O
&	O
ftpfs_directory_timeout	int
}	O
,	O
{	O
"use_netrc"	pointer
,	O
&	O
use_netrc	int
}	O
,	O
{	O
"ftpfs_retry_seconds"	pointer
,	O
&	O
ftpfs_retry_seconds	int
}	O
,	O
{	O
"ftpfs_always_use_proxy"	pointer
,	O
&	O
ftpfs_always_use_proxy	int
}	O
,	O
{	O
"ftpfs_use_passive_connections"	pointer
,	O
&	O
ftpfs_use_passive_connections	int
}	O
,	O
{	O
"ftpfs_use_unix_list_options"	pointer
,	O
&	O
ftpfs_use_unix_list_options	int
}	O
,	O
{	O
"ftpfs_first_cd_then_ls"	pointer
,	O
&	O
ftpfs_first_cd_then_ls	int
}	O
,	O
{	O
"fish_directory_timeout"	pointer
,	O
&	O
fish_directory_timeout	int
}	O
,	O
{	O
"editor_word_wrap_line_length"	pointer
,	O
&	O
option_word_wrap_line_length	int
}	O
,	O
{	O
"editor_key_emulation"	pointer
,	O
&	O
edit_key_emulation	int
}	O
,	O
{	O
"editor_tab_spacing"	pointer
,	O
&	O
option_tab_spacing	int
}	O
,	O
{	O
"editor_fill_tabs_with_spaces"	pointer
,	O
&	O
option_fill_tabs_with_spaces	int
}	O
,	O
{	O
"editor_return_does_auto_indent"	pointer
,	O
&	O
option_return_does_auto_indent	int
}	O
,	O
{	O
"editor_backspace_through_tabs"	pointer
,	O
&	O
option_backspace_through_tabs	int
}	O
,	O
{	O
"editor_fake_half_tabs"	pointer
,	O
&	O
option_fake_half_tabs	int
}	O
,	O
{	O
"editor_option_save_mode"	pointer
,	O
&	O
option_save_mode	int
}	O
,	O
{	O
"editor_option_save_position"	pointer
,	O
&	O
option_save_position	int
}	O
,	O
{	O
"editor_option_auto_para_formatting"	pointer
,	O
&	O
option_auto_para_formatting	int
}	O
,	O
{	O
"editor_option_typewriter_wrap"	pointer
,	O
&	O
option_typewriter_wrap	int
}	O
,	O
{	O
"editor_edit_confirm_save"	pointer
,	O
&	O
edit_confirm_save	int
}	O
,	O
{	O
"editor_syntax_highlighting"	pointer
,	O
&	O
option_syntax_highlighting	int
}	O
,	O
{	O
"nice_rotating_dash"	pointer
,	O
&	O
nice_rotating_dash	int
}	O
,	O
{	O
"horizontal_split"	pointer
,	O
&	O
horizontal_split	int
}	O
,	O
{	O
"mcview_remember_file_position"	pointer
,	O
&	O
mcview_remember_file_position	int
}	O
,	O
{	O
0	int
,	O
0	int
}	O
}	O
;	O
static	O
const	O
struct	O
{	O
const	O
char	O
*	O
opt_name	pointer
;	O
char	O
*	O
*	O
opt_addr	pointer
;	O
const	O
char	O
*	O
opt_defval	pointer
;	O
}	O
str_options	array
[	O
]	O
=	O
{	O
{	O
"editor_backup_extension"	pointer
,	O
&	O
option_backup_ext	pointer
,	O
"~"	pointer
}	O
,	O
{	O
NULL	O
,	O
NULL	O
}	O
}	O
;	O
void	O
panel_save_setup	function
(	O
struct	O
WPanel	struct
*	O
panel	pointer
,	O
const	O
char	O
*	O
section	pointer
)	O
{	O
char	O
buffer	pointer
[	O
BUF_TINY	int
]	O
;	O
int	O
i	array
;	O
g_snprintf	function
(	O
buffer	pointer
,	O
sizeof	O
(	O
buffer	pointer
)	O
,	O
"%d"	pointer
,	O
panel	pointer
->	O
reverse	int
)	O
;	O
save_string	O
(	O
section	pointer
,	O
"reverse"	pointer
,	O
buffer	pointer
,	O
profile_name	pointer
)	O
;	O
g_snprintf	function
(	O
buffer	pointer
,	O
sizeof	O
(	O
buffer	pointer
)	O
,	O
"%d"	pointer
,	O
panel	pointer
->	O
case_sensitive	int
)	O
;	O
save_string	O
(	O
section	pointer
,	O
"case_sensitive"	pointer
,	O
buffer	pointer
,	O
profile_name	pointer
)	O
;	O
for	O
(	O
i	array
=	O
0	int
;	O
sort_names	array
[	O
i	array
]	O
.	O
key	pointer
;	O
i	array
++	O
)	O
if	O
(	O
sort_names	array
[	O
i	array
]	O
.	O
sort_type	pointer
==	O
(	O
sortfn	function
*	O
)	O
panel	pointer
->	O
sort_type	pointer
)	O
{	O
save_string	O
(	O
section	pointer
,	O
"sort_order"	pointer
,	O
sort_names	array
[	O
i	array
]	O
.	O
key	pointer
,	O
profile_name	pointer
)	O
;	O
break	O
;	O
}	O
for	O
(	O
i	array
=	O
0	int
;	O
list_types	enum
[	O
i	array
]	O
.	O
key	pointer
;	O
i	array
++	O
)	O
if	O
(	O
list_types	enum
[	O
i	array
]	O
.	O
list_type	int
==	O
panel	pointer
->	O
list_type	int
)	O
{	O
save_string	O
(	O
section	pointer
,	O
"list_mode"	pointer
,	O
list_types	enum
[	O
i	array
]	O
.	O
key	pointer
,	O
profile_name	pointer
)	O
;	O
break	O
;	O
}	O
save_string	O
(	O
section	pointer
,	O
"user_format"	pointer
,	O
panel	pointer
->	O
user_format	pointer
,	O
profile_name	pointer
)	O
;	O
for	O
(	O
i	array
=	O
0	int
;	O
i	array
<	O
LIST_TYPES	int
;	O
i	array
++	O
)	O
{	O
g_snprintf	function
(	O
buffer	pointer
,	O
sizeof	O
(	O
buffer	pointer
)	O
,	O
"user_status%d"	pointer
,	O
i	array
)	O
;	O
save_string	O
(	O
section	pointer
,	O
buffer	pointer
,	O
panel	pointer
->	O
user_status_format	array
[	O
i	array
]	O
,	O
profile_name	pointer
)	O
;	O
}	O
g_snprintf	function
(	O
buffer	pointer
,	O
sizeof	O
(	O
buffer	pointer
)	O
,	O
"%d"	pointer
,	O
panel	pointer
->	O
user_mini_status	int
)	O
;	O
save_string	O
(	O
section	pointer
,	O
"user_mini_status"	pointer
,	O
buffer	pointer
,	O
profile_name	pointer
)	O
;	O
}	O
void	O
save_layout	function
(	O
void	O
)	O
{	O
char	O
*	O
profile	pointer
;	O
int	O
i	array
;	O
char	O
buffer	pointer
[	O
BUF_TINY	int
]	O
;	O
profile	pointer
=	O
concat_dir_and_file	function
(	O
home_dir	pointer
,	O
PROFILE_NAME	pointer
)	O
;	O
for	O
(	O
i	array
=	O
0	int
;	O
layout	array
[	O
i	array
]	O
.	O
opt_name	pointer
;	O
i	array
++	O
)	O
{	O
g_snprintf	function
(	O
buffer	pointer
,	O
sizeof	O
(	O
buffer	pointer
)	O
,	O
"%d"	pointer
,	O
*	O
layout	array
[	O
i	array
]	O
.	O
opt_addr	pointer
)	O
;	O
save_string	O
(	O
"Layout"	pointer
,	O
layout	array
[	O
i	array
]	O
.	O
opt_name	pointer
,	O
buffer	pointer
,	O
profile	pointer
)	O
;	O
}	O
g_free	function
(	O
profile	pointer
)	O
;	O
}	O
void	O
save_configure	function
(	O
void	O
)	O
{	O
char	O
*	O
profile	pointer
;	O
int	O
i	array
;	O
profile	pointer
=	O
concat_dir_and_file	function
(	O
home_dir	pointer
,	O
PROFILE_NAME	pointer
)	O
;	O
for	O
(	O
i	array
=	O
0	int
;	O
int_options	array
[	O
i	array
]	O
.	O
opt_name	pointer
;	O
i	array
++	O
)	O
set_int	function
(	O
profile	pointer
,	O
int_options	array
[	O
i	array
]	O
.	O
opt_name	pointer
,	O
*	O
int_options	array
[	O
i	array
]	O
.	O
opt_addr	pointer
)	O
;	O
for	O
(	O
i	array
=	O
0	int
;	O
str_options	array
[	O
i	array
]	O
.	O
opt_name	pointer
!=	O
NULL	O
;	O
i	array
++	O
)	O
set_config_string	function
(	O
profile	pointer
,	O
str_options	array
[	O
i	array
]	O
.	O
opt_name	pointer
,	O
*	O
str_options	array
[	O
i	array
]	O
.	O
opt_addr	pointer
)	O
;	O
g_free	function
(	O
profile	pointer
)	O
;	O
}	O
static	O
void	O
panel_save_type	function
(	O
const	O
char	O
*	O
section	pointer
,	O
int	O
type	enum
)	O
{	O
int	O
i	array
;	O
for	O
(	O
i	array
=	O
0	int
;	O
panel_types	array
[	O
i	array
]	O
.	O
opt_name	pointer
;	O
i	array
++	O
)	O
if	O
(	O
panel_types	array
[	O
i	array
]	O
.	O
opt_type	int
==	O
type	enum
)	O
{	O
save_string	O
(	O
section	pointer
,	O
"display"	pointer
,	O
panel_types	array
[	O
i	array
]	O
.	O
opt_name	pointer
,	O
profile_name	pointer
)	O
;	O
break	O
;	O
}	O
}	O
static	O
void	O
save_panel_types	function
(	O
void	O
)	O
{	O
int	O
type	enum
;	O
type	enum
=	O
get_display_type	function
(	O
0	int
)	O
;	O
panel_save_type	function
(	O
"New Left Panel"	pointer
,	O
type	enum
)	O
;	O
if	O
(	O
type	enum
==	O
view_listing	int
)	O
panel_save_setup	function
(	O
left_panel	pointer
,	O
left_panel	pointer
->	O
panel_name	pointer
)	O
;	O
type	enum
=	O
get_display_type	function
(	O
1	int
)	O
;	O
panel_save_type	function
(	O
"New Right Panel"	pointer
,	O
type	enum
)	O
;	O
if	O
(	O
type	enum
==	O
view_listing	int
)	O
panel_save_setup	function
(	O
right_panel	pointer
,	O
right_panel	pointer
->	O
panel_name	pointer
)	O
;	O
}	O
void	O
save_setup	function
(	O
void	O
)	O
{	O
char	O
*	O
profile	pointer
;	O
saving_setup	int
=	O
1	int
;	O
profile	pointer
=	O
concat_dir_and_file	function
(	O
home_dir	pointer
,	O
PROFILE_NAME	pointer
)	O
;	O
save_configure	function
(	O
)	O
;	O
save_layout	function
(	O
)	O
;	O
save_string	O
(	O
"Dirs"	pointer
,	O
"other_dir"	pointer
,	O
get_other_type	function
(	O
)	O
==	O
view_listing	int
?	O
other_panel	O
->	O
cwd	short
:	O
"."	pointer
,	O
profile	pointer
)	O
;	O
if	O
(	O
current_panel	pointer
!=	O
NULL	O
)	O
WritePrivateProfileString	function
(	O
"Dirs"	pointer
,	O
"current_is_left"	pointer
,	O
get_current_index	function
(	O
)	O
==	O
0	int
?	O
"1"	pointer
:	O
"0"	pointer
,	O
profile	pointer
)	O
;	O
save_hotlist	function
(	O
)	O
;	O
save_panelize	function
(	O
)	O
;	O
save_panel_types	function
(	O
)	O
;	O
WritePrivateProfileString	function
(	O
"Misc"	pointer
,	O
"ftpfs_password"	pointer
,	O
ftpfs_anonymous_passwd	pointer
,	O
profile	pointer
)	O
;	O
if	O
(	O
ftpfs_proxy_host	pointer
)	O
WritePrivateProfileString	function
(	O
"Misc"	pointer
,	O
"ftp_proxy_host"	pointer
,	O
ftpfs_proxy_host	pointer
,	O
profile	pointer
)	O
;	O
g_free	function
(	O
profile	pointer
)	O
;	O
saving_setup	int
=	O
0	int
;	O
}	O
void	O
panel_load_setup	function
(	O
WPanel	struct
*	O
panel	pointer
,	O
const	O
char	O
*	O
section	pointer
)	O
{	O
int	O
i	array
;	O
char	O
buffer	pointer
[	O
BUF_TINY	int
]	O
;	O
panel	pointer
->	O
reverse	int
=	O
load_int	O
(	O
section	pointer
,	O
"reverse"	pointer
,	O
0	int
)	O
;	O
panel	pointer
->	O
case_sensitive	int
=	O
load_int	O
(	O
section	pointer
,	O
"case_sensitive"	pointer
,	O
OS_SORT_CASE_SENSITIVE_DEFAULT	int
)	O
;	O
load_string	O
(	O
section	pointer
,	O
"sort_order"	pointer
,	O
"name"	pointer
,	O
buffer	pointer
,	O
sizeof	O
(	O
buffer	pointer
)	O
)	O
;	O
panel	pointer
->	O
sort_type	pointer
=	O
(	O
sortfn	function
*	O
)	O
sort_name	function
;	O
for	O
(	O
i	array
=	O
0	int
;	O
sort_names	array
[	O
i	array
]	O
.	O
key	pointer
;	O
i	array
++	O
)	O
if	O
(	O
g_strcasecmp	function
(	O
sort_names	array
[	O
i	array
]	O
.	O
key	pointer
,	O
buffer	pointer
)	O
==	O
0	int
)	O
{	O
panel	pointer
->	O
sort_type	pointer
=	O
sort_names	array
[	O
i	array
]	O
.	O
sort_type	pointer
;	O
break	O
;	O
}	O
load_string	O
(	O
section	pointer
,	O
"list_mode"	pointer
,	O
"full"	pointer
,	O
buffer	pointer
,	O
sizeof	O
(	O
buffer	pointer
)	O
)	O
;	O
panel	pointer
->	O
list_type	int
=	O
list_full	int
;	O
for	O
(	O
i	array
=	O
0	int
;	O
list_types	enum
[	O
i	array
]	O
.	O
key	pointer
;	O
i	array
++	O
)	O
if	O
(	O
g_strcasecmp	function
(	O
list_types	enum
[	O
i	array
]	O
.	O
key	pointer
,	O
buffer	pointer
)	O
==	O
0	int
)	O
{	O
panel	pointer
->	O
list_type	int
=	O
list_types	enum
[	O
i	array
]	O
.	O
list_type	int
;	O
break	O
;	O
}	O
g_free	function
(	O
panel	pointer
->	O
user_format	pointer
)	O
;	O
panel	pointer
->	O
user_format	pointer
=	O
g_strdup	function
(	O
get_profile_string	function
(	O
section	pointer
,	O
"user_format"	pointer
,	O
DEFAULT_USER_FORMAT	pointer
,	O
profile_name	pointer
)	O
)	O
;	O
for	O
(	O
i	array
=	O
0	int
;	O
i	array
<	O
LIST_TYPES	int
;	O
i	array
++	O
)	O
{	O
g_free	function
(	O
panel	pointer
->	O
user_status_format	array
[	O
i	array
]	O
)	O
;	O
g_snprintf	function
(	O
buffer	pointer
,	O
sizeof	O
(	O
buffer	pointer
)	O
,	O
"user_status%d"	pointer
,	O
i	array
)	O
;	O
panel	pointer
->	O
user_status_format	array
[	O
i	array
]	O
=	O
g_strdup	function
(	O
get_profile_string	function
(	O
section	pointer
,	O
buffer	pointer
,	O
DEFAULT_USER_FORMAT	pointer
,	O
profile_name	pointer
)	O
)	O
;	O
}	O
panel	pointer
->	O
user_mini_status	int
=	O
load_int	O
(	O
section	pointer
,	O
"user_mini_status"	pointer
,	O
0	int
)	O
;	O
}	O
static	O
void	O
load_layout	function
(	O
char	O
*	O
profile_name	pointer
)	O
{	O
int	O
i	array
;	O
for	O
(	O
i	array
=	O
0	int
;	O
layout	array
[	O
i	array
]	O
.	O
opt_name	pointer
;	O
i	array
++	O
)	O
*	O
layout	array
[	O
i	array
]	O
.	O
opt_addr	pointer
=	O
load_int	O
(	O
"Layout"	pointer
,	O
layout	array
[	O
i	array
]	O
.	O
opt_name	pointer
,	O
*	O
layout	array
[	O
i	array
]	O
.	O
opt_addr	pointer
)	O
;	O
}	O
static	O
int	O
load_mode	function
(	O
const	O
char	O
*	O
section	pointer
)	O
{	O
char	O
buffer	pointer
[	O
20	int
]	O
;	O
int	O
i	array
;	O
int	O
mode	int
=	O
view_listing	int
;	O
load_string	O
(	O
section	pointer
,	O
"display"	pointer
,	O
"listing"	pointer
,	O
buffer	pointer
,	O
sizeof	O
(	O
buffer	pointer
)	O
)	O
;	O
for	O
(	O
i	array
=	O
0	int
;	O
panel_types	array
[	O
i	array
]	O
.	O
opt_name	pointer
;	O
i	array
++	O
)	O
if	O
(	O
g_strcasecmp	function
(	O
panel_types	array
[	O
i	array
]	O
.	O
opt_name	pointer
,	O
buffer	pointer
)	O
==	O
0	int
)	O
{	O
mode	int
=	O
panel_types	array
[	O
i	array
]	O
.	O
opt_type	int
;	O
break	O
;	O
}	O
return	O
mode	int
;	O
}	O
static	O
char	O
*	O
do_load_string	function
(	O
const	O
char	O
*	O
s	pointer
,	O
const	O
char	O
*	O
ss	pointer
,	O
const	O
char	O
*	O
def	pointer
)	O
{	O
char	O
*	O
buffer	pointer
=	O
g_malloc	function
(	O
BUF_SMALL	int
)	O
;	O
char	O
*	O
p	pointer
;	O
load_string	O
(	O
s	pointer
,	O
ss	pointer
,	O
def	pointer
,	O
buffer	pointer
,	O
BUF_SMALL	int
)	O
;	O
p	pointer
=	O
g_strdup	function
(	O
buffer	pointer
)	O
;	O
g_free	function
(	O
buffer	pointer
)	O
;	O
return	O
p	pointer
;	O
}	O
char	O
*	O
setup_init	function
(	O
void	O
)	O
{	O
char	O
*	O
profile	pointer
;	O
char	O
*	O
inifile	pointer
;	O
if	O
(	O
profile_name	pointer
)	O
return	O
profile_name	pointer
;	O
profile	pointer
=	O
concat_dir_and_file	function
(	O
home_dir	pointer
,	O
PROFILE_NAME	pointer
)	O
;	O
if	O
(	O
!	O
exist_file	function
(	O
profile	pointer
)	O
)	O
{	O
inifile	pointer
=	O
concat_dir_and_file	function
(	O
mc_home	pointer
,	O
"mc.ini"	pointer
)	O
;	O
if	O
(	O
exist_file	function
(	O
inifile	pointer
)	O
)	O
{	O
g_free	function
(	O
profile	pointer
)	O
;	O
profile	pointer
=	O
inifile	pointer
;	O
}	O
else	O
g_free	function
(	O
inifile	pointer
)	O
;	O
}	O
profile_name	pointer
=	O
profile	pointer
;	O
return	O
profile	pointer
;	O
}	O
void	O
load_setup	function
(	O
void	O
)	O
{	O
char	O
*	O
profile	pointer
;	O
int	O
i	array
;	O
profile	pointer
=	O
setup_init	function
(	O
)	O
;	O
global_profile_name	pointer
=	O
concat_dir_and_file	function
(	O
mc_home	pointer
,	O
"mc.lib"	pointer
)	O
;	O
for	O
(	O
i	array
=	O
0	int
;	O
int_options	array
[	O
i	array
]	O
.	O
opt_name	pointer
;	O
i	array
++	O
)	O
*	O
int_options	array
[	O
i	array
]	O
.	O
opt_addr	pointer
=	O
get_int	function
(	O
profile	pointer
,	O
int_options	array
[	O
i	array
]	O
.	O
opt_name	pointer
,	O
*	O
int_options	array
[	O
i	array
]	O
.	O
opt_addr	pointer
)	O
;	O
for	O
(	O
i	array
=	O
0	int
;	O
str_options	array
[	O
i	array
]	O
.	O
opt_name	pointer
!=	O
NULL	O
;	O
i	array
++	O
)	O
*	O
str_options	array
[	O
i	array
]	O
.	O
opt_addr	pointer
=	O
get_config_string	function
(	O
profile	pointer
,	O
str_options	array
[	O
i	array
]	O
.	O
opt_name	pointer
,	O
str_options	array
[	O
i	array
]	O
.	O
opt_defval	pointer
)	O
;	O
load_layout	function
(	O
profile	pointer
)	O
;	O
load_panelize	function
(	O
)	O
;	O
startup_left_mode	int
=	O
load_mode	function
(	O
"New Left Panel"	pointer
)	O
;	O
startup_right_mode	int
=	O
load_mode	function
(	O
"New Right Panel"	pointer
)	O
;	O
if	O
(	O
startup_left_mode	int
!=	O
view_listing	int
&&	O
startup_right_mode	int
!=	O
view_listing	int
)	O
startup_left_mode	int
=	O
view_listing	int
;	O
if	O
(	O
!	O
other_dir	pointer
)	O
{	O
char	O
*	O
buffer	pointer
;	O
buffer	pointer
=	O
(	O
char	O
*	O
)	O
g_malloc	function
(	O
MC_MAXPATHLEN	O
)	O
;	O
load_string	O
(	O
"Dirs"	pointer
,	O
"other_dir"	pointer
,	O
"."	pointer
,	O
buffer	pointer
,	O
MC_MAXPATHLEN	O
)	O
;	O
if	O
(	O
vfs_file_is_local	function
(	O
buffer	pointer
)	O
)	O
other_dir	pointer
=	O
buffer	pointer
;	O
else	O
g_free	function
(	O
buffer	pointer
)	O
;	O
}	O
boot_current_is_left	int
=	O
GetPrivateProfileInt	function
(	O
"Dirs"	pointer
,	O
"current_is_left"	pointer
,	O
1	int
,	O
profile	pointer
)	O
;	O
ftpfs_proxy_host	pointer
=	O
do_load_string	function
(	O
"Misc"	pointer
,	O
"ftp_proxy_host"	pointer
,	O
"gate"	pointer
)	O
;	O
load_string	O
(	O
"Misc"	pointer
,	O
"find_ignore_dirs"	pointer
,	O
""	pointer
,	O
setup_color_string	array
,	O
sizeof	O
(	O
setup_color_string	array
)	O
)	O
;	O
if	O
(	O
setup_color_string	array
[	O
0	int
]	O
)	O
find_ignore_dirs	pointer
=	O
g_strconcat	function
(	O
":"	pointer
,	O
setup_color_string	array
,	O
":"	pointer
,	O
(	O
char	O
*	O
)	O
NULL	O
)	O
;	O
load_string	O
(	O
"Colors"	pointer
,	O
"base_color"	pointer
,	O
""	pointer
,	O
setup_color_string	array
,	O
sizeof	O
(	O
setup_color_string	array
)	O
)	O
;	O
load_string	O
(	O
"Colors"	pointer
,	O
getenv	function
(	O
"TERM"	pointer
)	O
,	O
""	pointer
,	O
term_color_string	array
,	O
sizeof	O
(	O
term_color_string	array
)	O
)	O
;	O
load_string	O
(	O
"Colors"	pointer
,	O
"color_terminals"	pointer
,	O
""	pointer
,	O
color_terminal_string	array
,	O
sizeof	O
(	O
color_terminal_string	array
)	O
)	O
;	O
profile_clean_section	function
(	O
"Temporal:New Left Panel"	pointer
,	O
profile_name	pointer
)	O
;	O
profile_clean_section	function
(	O
"Temporal:New Right Panel"	pointer
,	O
profile_name	pointer
)	O
;	O
ftpfs_init_passwd	function
(	O
)	O
;	O
}	O
char	O
*	O
load_anon_passwd	function
(	O
)	O
{	O
char	O
buffer	pointer
[	O
255	int
]	O
;	O
load_string	O
(	O
"Misc"	pointer
,	O
"ftpfs_password"	pointer
,	O
""	pointer
,	O
buffer	pointer
,	O
sizeof	O
(	O
buffer	pointer
)	O
)	O
;	O
if	O
(	O
buffer	pointer
[	O
0	int
]	O
)	O
return	O
g_strdup	function
(	O
buffer	pointer
)	O
;	O
else	O
return	O
0	int
;	O
}	O
void	O
done_setup	function
(	O
void	O
)	O
{	O
g_free	function
(	O
profile_name	pointer
)	O
;	O
g_free	function
(	O
global_profile_name	pointer
)	O
;	O
done_hotlist	function
(	O
)	O
;	O
done_panelize	function
(	O
)	O
;	O
}	O
static	O
void	O
load_keys_from_section	function
(	O
const	O
char	O
*	O
terminal	pointer
,	O
const	O
char	O
*	O
profile_name	pointer
)	O
{	O
char	O
*	O
section_name	pointer
;	O
void	O
*	O
profile_keys	pointer
;	O
char	O
*	O
key	pointer
,	O
*	O
value	pointer
,	O
*	O
valcopy	pointer
;	O
int	O
key_code	int
;	O
if	O
(	O
!	O
terminal	pointer
)	O
return	O
;	O
section_name	pointer
=	O
g_strconcat	function
(	O
"terminal:"	pointer
,	O
terminal	pointer
,	O
(	O
char	O
*	O
)	O
NULL	O
)	O
;	O
profile_keys	pointer
=	O
profile_init_iterator	function
(	O
section_name	pointer
,	O
profile_name	pointer
)	O
;	O
g_free	function
(	O
section_name	pointer
)	O
;	O
while	O
(	O
profile_keys	pointer
)	O
{	O
profile_keys	pointer
=	O
profile_iterator_next	function
(	O
profile_keys	pointer
,	O
&	O
key	pointer
,	O
&	O
value	pointer
)	O
;	O
if	O
(	O
g_strcasecmp	function
(	O
key	pointer
,	O
"copy"	pointer
)	O
==	O
0	int
)	O
{	O
load_keys_from_section	function
(	O
value	pointer
,	O
profile_name	pointer
)	O
;	O
continue	O
;	O
}	O
key_code	int
=	O
lookup_key	pointer
(	O
key	pointer
)	O
;	O
if	O
(	O
key_code	int
)	O
{	O
valcopy	pointer
=	O
convert_controls	function
(	O
value	pointer
)	O
;	O
define_sequence	function
(	O
key_code	int
,	O
valcopy	pointer
,	O
MCKEY_NOACTION	int
)	O
;	O
g_free	function
(	O
valcopy	pointer
)	O
;	O
}	O
}	O
}	O
void	O
load_key_defs	function
(	O
void	O
)	O
{	O
load_keys_from_section	function
(	O
"general"	pointer
,	O
global_profile_name	pointer
)	O
;	O
load_keys_from_section	function
(	O
getenv	function
(	O
"TERM"	pointer
)	O
,	O
global_profile_name	pointer
)	O
;	O
load_keys_from_section	function
(	O
"general"	pointer
,	O
profile_name	pointer
)	O
;	O
load_keys_from_section	function
(	O
getenv	function
(	O
"TERM"	pointer
)	O
,	O
profile_name	pointer
)	O
;	O
free_profile_name	function
(	O
global_profile_name	pointer
)	O
;	O
}	O
