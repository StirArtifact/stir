size_t	long
mu_stream_default_buffer_size	long
=	O
MU_STREAM_DEFBUFSIZ	int
;	O
static	O
int	O
_stream_read_unbuffered	function
(	O
mu_stream_t	pointer
stream	pointer
,	O
void	O
*	O
buf	pointer
,	O
size_t	long
size	long
,	O
int	O
full_read	int
,	O
size_t	long
*	O
pnread	pointer
)	O
;	O
static	O
int	O
_stream_write_unbuffered	function
(	O
mu_stream_t	pointer
stream	pointer
,	O
const	O
void	O
*	O
buf	pointer
,	O
size_t	long
size	long
,	O
int	O
full_write	int
,	O
size_t	long
*	O
pnwritten	pointer
)	O
;	O
static	O
void	O
_stream_setflag	function
(	O
struct	O
_mu_stream	struct
*	O
stream	pointer
,	O
int	O
flag	int
)	O
{	O
_stream_event	O
(	O
stream	pointer
,	O
_MU_STR_EVENT_SETFLAG	int
,	O
flag	int
,	O
NULL	O
)	O
;	O
stream	pointer
->	O
flags	int
|=	O
flag	int
;	O
}	O
static	O
void	O
_stream_clrflag	function
(	O
struct	O
_mu_stream	struct
*	O
stream	pointer
,	O
int	O
flag	int
)	O
{	O
_stream_event	O
(	O
stream	pointer
,	O
_MU_STR_EVENT_CLRFLAG	int
,	O
flag	int
,	O
NULL	O
)	O
;	O
stream	pointer
->	O
flags	int
&=	O
~	O
flag	int
;	O
}	O
int	O
mu_stream_seterr	function
(	O
struct	O
_mu_stream	struct
*	O
stream	pointer
,	O
int	O
code	int
,	O
int	O
perm	int
)	O
{	O
stream	pointer
->	O
last_err	int
=	O
code	int
;	O
switch	O
(	O
code	int
)	O
{	O
case	O
0	int
:	O
case	O
EAGAIN	int
:	O
case	O
EINTR	int
:	O
case	O
ENOSYS	int
:	O
case	O
EINPROGRESS	int
:	O
break	O
;	O
default	O
:	O
if	O
(	O
perm	int
)	O
_stream_setflag	function
(	O
stream	pointer
,	O
_MU_STR_ERR	int
)	O
;	O
}	O
return	O
code	int
;	O
}	O
void	O
_mu_stream_cleareof	function
(	O
mu_stream_t	pointer
str	pointer
)	O
{	O
_stream_clrflag	function
(	O
str	pointer
,	O
_MU_STR_EOF	int
)	O
;	O
}	O
void	O
_mu_stream_seteof	function
(	O
mu_stream_t	pointer
str	pointer
)	O
{	O
_stream_setflag	function
(	O
str	pointer
,	O
_MU_STR_EOF	int
)	O
;	O
}	O
static	O
int	O
_stream_fill_buffer	function
(	O
struct	O
_mu_stream	struct
*	O
stream	pointer
)	O
{	O
size_t	long
n	int
;	O
size_t	long
rdn	long
;	O
int	O
rc	int
=	O
0	int
;	O
char	O
c	char
;	O
switch	O
(	O
stream	pointer
->	O
buftype	enum
)	O
{	O
case	O
mu_buffer_none	int
:	O
return	O
0	int
;	O
case	O
mu_buffer_full	int
:	O
rc	int
=	O
_stream_read_unbuffered	function
(	O
stream	pointer
,	O
stream	pointer
->	O
buffer	pointer
,	O
stream	pointer
->	O
bufsize	long
,	O
0	int
,	O
&	O
stream	pointer
->	O
level	int
)	O
;	O
break	O
;	O
case	O
mu_buffer_line	int
:	O
for	O
(	O
n	int
=	O
0	int
;	O
n	int
<	O
stream	pointer
->	O
bufsize	long
&&	O
(	O
rc	int
=	O
_stream_read_unbuffered	function
(	O
stream	pointer
,	O
&	O
c	char
,	O
1	int
,	O
0	int
,	O
&	O
rdn	long
)	O
)	O
==	O
0	int
;	O
)	O
{	O
if	O
(	O
rdn	long
==	O
0	int
)	O
{	O
_stream_setflag	function
(	O
stream	pointer
,	O
_MU_STR_EOF	int
)	O
;	O
break	O
;	O
}	O
stream	pointer
->	O
buffer	pointer
[	O
n	int
++	O
]	O
=	O
c	char
;	O
if	O
(	O
c	char
==	O
'\n'	O
)	O
break	O
;	O
}	O
stream	pointer
->	O
level	int
=	O
n	int
;	O
break	O
;	O
}	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
stream	pointer
->	O
pos	long
=	O
0	int
;	O
_stream_event	O
(	O
stream	pointer
,	O
_MU_STR_EVENT_FILLBUF	int
,	O
stream	pointer
->	O
level	int
,	O
_stream_curp	O
(	O
stream	pointer
)	O
)	O
;	O
}	O
return	O
rc	int
;	O
}	O
static	O
int	O
_stream_buffer_full_p	function
(	O
struct	O
_mu_stream	struct
*	O
stream	pointer
)	O
{	O
switch	O
(	O
stream	pointer
->	O
buftype	enum
)	O
{	O
case	O
mu_buffer_none	int
:	O
break	O
;	O
case	O
mu_buffer_line	int
:	O
return	O
_stream_buffer_is_full	O
(	O
stream	pointer
)	O
||	O
memchr	function
(	O
stream	pointer
->	O
buffer	pointer
,	O
'\n'	O
,	O
stream	pointer
->	O
level	int
)	O
!=	O
NULL	O
;	O
case	O
mu_buffer_full	int
:	O
return	O
_stream_buffer_is_full	O
(	O
stream	pointer
)	O
;	O
}	O
return	O
0	int
;	O
}	O
enum	O
{	O
FLUSH_WRITE	int
,	O
FLUSH_RDWR	int
}	O
;	O
static	O
int	O
_stream_flush_buffer	function
(	O
struct	O
_mu_stream	struct
*	O
stream	pointer
,	O
int	O
what	int
)	O
{	O
int	O
rc	int
;	O
if	O
(	O
stream	pointer
->	O
flags	int
&	O
_MU_STR_DIRTY	int
)	O
{	O
if	O
(	O
(	O
stream	pointer
->	O
flags	int
&	O
MU_STREAM_SEEK	int
)	O
&&	O
stream	pointer
->	O
seek	pointer
)	O
{	O
mu_off_t	long
off	long
;	O
rc	int
=	O
_stream_seek	O
(	O
stream	pointer
,	O
stream	pointer
->	O
offset	long
,	O
&	O
off	long
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
}	O
if	O
(	O
(	O
rc	int
=	O
_stream_write_unbuffered	function
(	O
stream	pointer
,	O
stream	pointer
->	O
buffer	pointer
,	O
stream	pointer
->	O
level	int
,	O
1	int
,	O
NULL	O
)	O
)	O
)	O
return	O
rc	int
;	O
_stream_event	O
(	O
stream	pointer
,	O
_MU_STR_EVENT_FLUSHBUF	int
,	O
stream	pointer
->	O
level	int
,	O
stream	pointer
->	O
buffer	pointer
)	O
;	O
_stream_clrflag	function
(	O
stream	pointer
,	O
_MU_STR_DIRTY	int
)	O
;	O
if	O
(	O
stream	pointer
->	O
pos	long
<	O
stream	pointer
->	O
level	int
)	O
memmove	function
(	O
stream	pointer
->	O
buffer	pointer
,	O
stream	pointer
->	O
buffer	pointer
+	O
stream	pointer
->	O
pos	long
,	O
stream	pointer
->	O
level	int
-	O
stream	pointer
->	O
pos	long
)	O
;	O
stream	pointer
->	O
offset	long
+=	O
stream	pointer
->	O
pos	long
;	O
stream	pointer
->	O
level	int
-=	O
stream	pointer
->	O
pos	long
;	O
stream	pointer
->	O
pos	long
=	O
0	int
;	O
}	O
if	O
(	O
what	int
)	O
{	O
stream	pointer
->	O
offset	long
+=	O
stream	pointer
->	O
level	int
;	O
stream	pointer
->	O
pos	long
=	O
stream	pointer
->	O
level	int
=	O
0	int
;	O
}	O
return	O
0	int
;	O
}	O
mu_stream_t	pointer
_mu_stream_create	function
(	O
size_t	long
size	long
,	O
int	O
flags	int
)	O
{	O
struct	O
_mu_stream	struct
*	O
str	pointer
;	O
if	O
(	O
size	long
<	O
sizeof	O
(	O
str	pointer
)	O
)	O
abort	function
(	O
)	O
;	O
str	pointer
=	O
mu_zalloc	function
(	O
size	long
)	O
;	O
str	pointer
->	O
flags	int
=	O
flags	int
&	O
~	O
(	O
_MU_STR_INTERN_MASK	int
&	O
~	O
_MU_STR_OPEN	int
)	O
;	O
mu_stream_ref	function
(	O
str	pointer
)	O
;	O
return	O
str	pointer
;	O
}	O
void	O
mu_stream_destroy	function
(	O
mu_stream_t	pointer
*	O
pstream	pointer
)	O
{	O
if	O
(	O
pstream	pointer
)	O
{	O
mu_stream_t	pointer
str	pointer
=	O
*	O
pstream	pointer
;	O
if	O
(	O
str	pointer
&&	O
(	O
str	pointer
->	O
ref_count	int
==	O
0	int
||	O
--	O
str	pointer
->	O
ref_count	int
==	O
0	int
)	O
)	O
{	O
mu_stream_close	function
(	O
str	pointer
)	O
;	O
if	O
(	O
str	pointer
->	O
buftype	enum
!=	O
mu_buffer_none	int
)	O
{	O
free	function
(	O
str	pointer
->	O
buffer	pointer
)	O
;	O
str	pointer
->	O
buffer	pointer
=	O
NULL	O
;	O
str	pointer
->	O
buftype	enum
=	O
mu_buffer_none	int
;	O
}	O
if	O
(	O
str	pointer
->	O
done	pointer
)	O
str	pointer
->	O
done	pointer
(	O
str	pointer
)	O
;	O
if	O
(	O
str	pointer
->	O
destroy	pointer
)	O
str	pointer
->	O
destroy	pointer
(	O
str	pointer
)	O
;	O
else	O
free	function
(	O
str	pointer
)	O
;	O
*	O
pstream	pointer
=	O
NULL	O
;	O
}	O
}	O
}	O
void	O
mu_stream_get_flags	function
(	O
mu_stream_t	pointer
str	pointer
,	O
int	O
*	O
pflags	pointer
)	O
{	O
*	O
pflags	pointer
=	O
str	pointer
->	O
flags	int
&	O
~	O
_MU_STR_INTERN_MASK	int
;	O
}	O
void	O
mu_stream_ref	function
(	O
mu_stream_t	pointer
stream	pointer
)	O
{	O
stream	pointer
->	O
ref_count	int
++	O
;	O
}	O
void	O
mu_stream_unref	function
(	O
mu_stream_t	pointer
stream	pointer
)	O
{	O
mu_stream_destroy	function
(	O
&	O
stream	pointer
)	O
;	O
}	O
static	O
void	O
_stream_init	function
(	O
mu_stream_t	pointer
stream	pointer
)	O
{	O
if	O
(	O
stream	pointer
->	O
statmask	int
)	O
memset	function
(	O
stream	pointer
->	O
statbuf	array
,	O
0	int
,	O
_MU_STREAM_STAT_MAX	int
*	O
sizeof	O
(	O
stream	pointer
->	O
statbuf	array
[	O
0	int
]	O
)	O
)	O
;	O
stream	pointer
->	O
flags	int
&=	O
~	O
_MU_STR_INTERN_MASK	int
;	O
_stream_setflag	function
(	O
stream	pointer
,	O
_MU_STR_OPEN	int
)	O
;	O
stream	pointer
->	O
offset	long
=	O
0	int
;	O
stream	pointer
->	O
level	int
=	O
stream	pointer
->	O
pos	long
=	O
0	int
;	O
stream	pointer
->	O
last_err	int
=	O
0	int
;	O
}	O
int	O
mu_stream_open	function
(	O
mu_stream_t	pointer
stream	pointer
)	O
{	O
int	O
rc	int
;	O
if	O
(	O
stream	pointer
->	O
flags	int
&	O
_MU_STR_OPEN	int
)	O
return	O
MU_ERR_OPEN	O
;	O
_bootstrap_event	O
(	O
stream	pointer
)	O
;	O
if	O
(	O
stream	pointer
->	O
open	pointer
)	O
{	O
if	O
(	O
(	O
rc	int
=	O
stream	pointer
->	O
open	pointer
(	O
stream	pointer
)	O
)	O
)	O
return	O
mu_stream_seterr	function
(	O
stream	pointer
,	O
rc	int
,	O
1	int
)	O
;	O
}	O
_stream_init	function
(	O
stream	pointer
)	O
;	O
if	O
(	O
(	O
stream	pointer
->	O
flags	int
&	O
(	O
MU_STREAM_APPEND	int
|	O
MU_STREAM_SEEK	int
)	O
)	O
==	O
(	O
MU_STREAM_APPEND	int
|	O
MU_STREAM_SEEK	int
)	O
&&	O
(	O
rc	int
=	O
mu_stream_seek	function
(	O
stream	pointer
,	O
0	int
,	O
MU_SEEK_END	int
,	O
NULL	O
)	O
)	O
)	O
return	O
mu_stream_seterr	function
(	O
stream	pointer
,	O
rc	int
,	O
1	int
)	O
;	O
return	O
0	int
;	O
}	O
const	O
char	O
*	O
mu_stream_strerror	function
(	O
mu_stream_t	pointer
stream	pointer
,	O
int	O
rc	int
)	O
{	O
const	O
char	O
*	O
str	pointer
;	O
if	O
(	O
!	O
stream	pointer
)	O
return	O
mu_strerror	function
(	O
rc	int
)	O
;	O
if	O
(	O
stream	pointer
->	O
error_string	pointer
)	O
str	pointer
=	O
stream	pointer
->	O
error_string	pointer
(	O
stream	pointer
,	O
rc	int
)	O
;	O
else	O
str	pointer
=	O
mu_strerror	function
(	O
rc	int
)	O
;	O
return	O
str	pointer
;	O
}	O
int	O
mu_stream_err	function
(	O
mu_stream_t	pointer
stream	pointer
)	O
{	O
return	O
stream	pointer
->	O
flags	int
&	O
_MU_STR_ERR	int
;	O
}	O
int	O
mu_stream_last_error	function
(	O
mu_stream_t	pointer
stream	pointer
)	O
{	O
return	O
stream	pointer
->	O
last_err	int
;	O
}	O
void	O
mu_stream_clearerr	function
(	O
mu_stream_t	pointer
stream	pointer
)	O
{	O
stream	pointer
->	O
last_err	int
=	O
0	int
;	O
_stream_clrflag	function
(	O
stream	pointer
,	O
_MU_STR_ERR	int
)	O
;	O
}	O
int	O
mu_stream_eof	function
(	O
mu_stream_t	pointer
stream	pointer
)	O
{	O
return	O
(	O
stream	pointer
->	O
flags	int
&	O
_MU_STR_EOF	int
)	O
&&	O
(	O
stream	pointer
->	O
pos	long
==	O
stream	pointer
->	O
level	int
)	O
;	O
}	O
int	O
mu_stream_is_open	function
(	O
mu_stream_t	pointer
stream	pointer
)	O
{	O
return	O
stream	pointer
->	O
flags	int
&	O
_MU_STR_OPEN	int
;	O
}	O
int	O
mu_stream_seek	function
(	O
mu_stream_t	pointer
stream	pointer
,	O
mu_off_t	long
offset	long
,	O
int	O
whence	int
,	O
mu_off_t	long
*	O
pres	pointer
)	O
{	O
int	O
rc	int
;	O
mu_off_t	long
size	long
;	O
_bootstrap_event	O
(	O
stream	pointer
)	O
;	O
if	O
(	O
!	O
(	O
stream	pointer
->	O
flags	int
&	O
_MU_STR_OPEN	int
)	O
)	O
{	O
if	O
(	O
stream	pointer
->	O
open	pointer
)	O
return	O
MU_ERR_NOT_OPEN	O
;	O
_stream_init	function
(	O
stream	pointer
)	O
;	O
}	O
if	O
(	O
!	O
stream	pointer
->	O
seek	pointer
)	O
return	O
mu_stream_seterr	function
(	O
stream	pointer
,	O
ENOSYS	int
,	O
0	int
)	O
;	O
if	O
(	O
!	O
(	O
stream	pointer
->	O
flags	int
&	O
MU_STREAM_SEEK	int
)	O
)	O
return	O
mu_stream_seterr	function
(	O
stream	pointer
,	O
EACCES	int
,	O
1	int
)	O
;	O
switch	O
(	O
whence	int
)	O
{	O
case	O
MU_SEEK_SET	int
:	O
break	O
;	O
case	O
MU_SEEK_CUR	int
:	O
if	O
(	O
offset	long
==	O
0	int
)	O
{	O
*	O
pres	pointer
=	O
stream	pointer
->	O
offset	long
+	O
stream	pointer
->	O
pos	long
;	O
return	O
0	int
;	O
}	O
offset	long
+=	O
stream	pointer
->	O
offset	long
+	O
stream	pointer
->	O
pos	long
;	O
break	O
;	O
case	O
MU_SEEK_END	int
:	O
rc	int
=	O
mu_stream_size	function
(	O
stream	pointer
,	O
&	O
size	long
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
offset	long
+=	O
size	long
;	O
break	O
;	O
default	O
:	O
return	O
mu_stream_seterr	function
(	O
stream	pointer
,	O
EINVAL	int
,	O
1	int
)	O
;	O
}	O
if	O
(	O
!	O
(	O
stream	pointer
->	O
buftype	enum
==	O
mu_buffer_none	int
?	O
(	O
offset	long
==	O
stream	pointer
->	O
offset	long
)	O
:	O
(	O
stream	pointer
->	O
offset	long
<=	O
offset	long
&&	O
offset	long
<	O
stream	pointer
->	O
offset	long
+	O
stream	pointer
->	O
level	int
)	O
)	O
)	O
{	O
if	O
(	O
(	O
rc	int
=	O
_stream_flush_buffer	function
(	O
stream	pointer
,	O
FLUSH_RDWR	int
)	O
)	O
)	O
return	O
rc	int
;	O
if	O
(	O
stream	pointer
->	O
offset	long
!=	O
offset	long
)	O
{	O
rc	int
=	O
_stream_seek	O
(	O
stream	pointer
,	O
offset	long
,	O
&	O
stream	pointer
->	O
offset	long
)	O
;	O
if	O
(	O
rc	int
==	O
ESPIPE	int
)	O
return	O
rc	int
;	O
if	O
(	O
rc	int
)	O
return	O
mu_stream_seterr	function
(	O
stream	pointer
,	O
rc	int
,	O
1	int
)	O
;	O
}	O
_mu_stream_cleareof	function
(	O
stream	pointer
)	O
;	O
}	O
else	O
if	O
(	O
stream	pointer
->	O
buftype	enum
!=	O
mu_buffer_none	int
)	O
stream	pointer
->	O
pos	long
=	O
offset	long
-	O
stream	pointer
->	O
offset	long
;	O
_mu_stream_cleareof	function
(	O
stream	pointer
)	O
;	O
if	O
(	O
pres	pointer
)	O
*	O
pres	pointer
=	O
stream	pointer
->	O
offset	long
+	O
stream	pointer
->	O
pos	long
;	O
return	O
0	int
;	O
}	O
static	O
int	O
_stream_skip_input_bytes	function
(	O
mu_stream_t	pointer
stream	pointer
,	O
mu_off_t	long
count	long
,	O
mu_off_t	long
*	O
pres	pointer
)	O
{	O
mu_off_t	long
pos	long
;	O
int	O
rc	int
=	O
0	int
;	O
if	O
(	O
!	O
(	O
stream	pointer
->	O
flags	int
&	O
MU_STREAM_READ	int
)	O
)	O
return	O
mu_stream_seterr	function
(	O
stream	pointer
,	O
EACCES	int
,	O
1	int
)	O
;	O
if	O
(	O
count	long
)	O
{	O
if	O
(	O
stream	pointer
->	O
buftype	enum
==	O
mu_buffer_none	int
)	O
{	O
for	O
(	O
pos	long
=	O
0	int
;	O
pos	long
<	O
count	long
;	O
pos	long
++	O
)	O
{	O
char	O
c	char
;	O
size_t	long
nrd	long
;	O
rc	int
=	O
mu_stream_read	function
(	O
stream	pointer
,	O
&	O
c	char
,	O
1	int
,	O
&	O
nrd	long
)	O
;	O
if	O
(	O
nrd	long
==	O
0	int
)	O
rc	int
=	O
ESPIPE	int
;	O
if	O
(	O
rc	int
)	O
break	O
;	O
}	O
}	O
else	O
{	O
for	O
(	O
pos	long
=	O
0	int
;	O
;	O
)	O
{	O
if	O
(	O
pos	long
||	O
stream	pointer
->	O
level	int
==	O
0	int
)	O
{	O
if	O
(	O
(	O
rc	int
=	O
_stream_flush_buffer	function
(	O
stream	pointer
,	O
FLUSH_RDWR	int
)	O
)	O
)	O
return	O
rc	int
;	O
rc	int
=	O
_stream_fill_buffer	function
(	O
stream	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
break	O
;	O
if	O
(	O
stream	pointer
->	O
level	int
==	O
0	int
)	O
{	O
rc	int
=	O
ESPIPE	int
;	O
break	O
;	O
}	O
}	O
if	O
(	O
pos	long
<=	O
count	long
&&	O
count	long
<	O
pos	long
+	O
stream	pointer
->	O
level	int
)	O
{	O
stream	pointer
->	O
pos	long
=	O
count	long
-	O
pos	long
;	O
rc	int
=	O
0	int
;	O
break	O
;	O
}	O
pos	long
+=	O
stream	pointer
->	O
level	int
;	O
}	O
}	O
}	O
if	O
(	O
pres	pointer
)	O
*	O
pres	pointer
=	O
stream	pointer
->	O
offset	long
+	O
stream	pointer
->	O
pos	long
;	O
return	O
rc	int
;	O
}	O
int	O
mu_stream_skip_input_bytes	function
(	O
mu_stream_t	pointer
stream	pointer
,	O
mu_off_t	long
count	long
,	O
mu_off_t	long
*	O
pres	pointer
)	O
{	O
int	O
rc	int
;	O
int	O
seek_flag	int
=	O
stream	pointer
->	O
flags	int
&	O
MU_STREAM_SEEK	int
;	O
stream	pointer
->	O
flags	int
&=	O
~	O
MU_STREAM_SEEK	int
;	O
rc	int
=	O
_stream_skip_input_bytes	function
(	O
stream	pointer
,	O
count	long
,	O
pres	pointer
)	O
;	O
stream	pointer
->	O
flags	int
|=	O
seek_flag	int
;	O
return	O
rc	int
;	O
}	O
int	O
mu_stream_set_buffer	function
(	O
mu_stream_t	pointer
stream	pointer
,	O
enum	O
mu_buffer_type	enum
type	int
,	O
size_t	long
size	long
)	O
{	O
_bootstrap_event	O
(	O
stream	pointer
)	O
;	O
if	O
(	O
size	long
==	O
0	int
)	O
size	long
=	O
mu_stream_default_buffer_size	long
;	O
if	O
(	O
stream	pointer
->	O
setbuf_hook	pointer
)	O
{	O
int	O
rc	int
=	O
stream	pointer
->	O
setbuf_hook	pointer
(	O
stream	pointer
,	O
type	int
,	O
size	long
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
}	O
if	O
(	O
stream	pointer
->	O
buffer	pointer
)	O
{	O
mu_stream_flush	function
(	O
stream	pointer
)	O
;	O
free	function
(	O
stream	pointer
->	O
buffer	pointer
)	O
;	O
}	O
stream	pointer
->	O
buftype	enum
=	O
type	int
;	O
if	O
(	O
type	int
==	O
mu_buffer_none	int
)	O
{	O
stream	pointer
->	O
buffer	pointer
=	O
NULL	O
;	O
return	O
0	int
;	O
}	O
stream	pointer
->	O
buffer	pointer
=	O
malloc	function
(	O
size	long
)	O
;	O
if	O
(	O
stream	pointer
->	O
buffer	pointer
==	O
NULL	O
)	O
{	O
stream	pointer
->	O
buftype	enum
=	O
mu_buffer_none	int
;	O
return	O
mu_stream_seterr	function
(	O
stream	pointer
,	O
ENOMEM	int
,	O
1	int
)	O
;	O
}	O
stream	pointer
->	O
bufsize	long
=	O
size	long
;	O
stream	pointer
->	O
pos	long
=	O
0	int
;	O
stream	pointer
->	O
level	int
=	O
0	int
;	O
return	O
0	int
;	O
}	O
int	O
mu_stream_get_buffer	function
(	O
mu_stream_t	pointer
stream	pointer
,	O
struct	O
mu_buffer_query	struct
*	O
qry	pointer
)	O
{	O
qry	pointer
->	O
buftype	enum
=	O
stream	pointer
->	O
buftype	enum
;	O
qry	pointer
->	O
bufsize	long
=	O
stream	pointer
->	O
bufsize	long
;	O
return	O
0	int
;	O
}	O
static	O
int	O
_stream_read_unbuffered	function
(	O
mu_stream_t	pointer
stream	pointer
,	O
void	O
*	O
buf	pointer
,	O
size_t	long
size	long
,	O
int	O
full_read	int
,	O
size_t	long
*	O
pnread	pointer
)	O
{	O
int	O
rc	int
;	O
size_t	long
nread	long
;	O
if	O
(	O
!	O
stream	pointer
->	O
read	pointer
)	O
return	O
mu_stream_seterr	function
(	O
stream	pointer
,	O
ENOSYS	int
,	O
0	int
)	O
;	O
if	O
(	O
!	O
(	O
stream	pointer
->	O
flags	int
&	O
MU_STREAM_READ	int
)	O
)	O
return	O
mu_stream_seterr	function
(	O
stream	pointer
,	O
EACCES	int
,	O
1	int
)	O
;	O
if	O
(	O
stream	pointer
->	O
flags	int
&	O
_MU_STR_ERR	int
)	O
return	O
stream	pointer
->	O
last_err	int
;	O
if	O
(	O
mu_stream_eof	function
(	O
stream	pointer
)	O
||	O
size	long
==	O
0	int
)	O
{	O
if	O
(	O
pnread	pointer
)	O
*	O
pnread	pointer
=	O
0	int
;	O
return	O
0	int
;	O
}	O
if	O
(	O
full_read	int
)	O
{	O
size_t	long
rdbytes	long
;	O
nread	long
=	O
0	int
;	O
while	O
(	O
size	long
>	O
0	int
&&	O
(	O
rc	int
=	O
_stream_read	O
(	O
stream	pointer
,	O
buf	pointer
,	O
size	long
,	O
&	O
rdbytes	long
)	O
)	O
==	O
0	int
)	O
{	O
if	O
(	O
rdbytes	long
==	O
0	int
)	O
{	O
_stream_setflag	function
(	O
stream	pointer
,	O
_MU_STR_EOF	int
)	O
;	O
break	O
;	O
}	O
buf	pointer
+=	O
rdbytes	long
;	O
nread	long
+=	O
rdbytes	long
;	O
size	long
-=	O
rdbytes	long
;	O
_stream_stat_incr	O
(	O
stream	pointer
,	O
MU_STREAM_STAT_IN	int
,	O
rdbytes	long
)	O
;	O
}	O
if	O
(	O
size	long
&&	O
rc	int
)	O
rc	int
=	O
mu_stream_seterr	function
(	O
stream	pointer
,	O
rc	int
,	O
0	int
)	O
;	O
}	O
else	O
{	O
rc	int
=	O
_stream_read	O
(	O
stream	pointer
,	O
buf	pointer
,	O
size	long
,	O
&	O
nread	long
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
if	O
(	O
nread	long
==	O
0	int
)	O
_stream_setflag	function
(	O
stream	pointer
,	O
_MU_STR_EOF	int
)	O
;	O
_stream_stat_incr	O
(	O
stream	pointer
,	O
MU_STREAM_STAT_IN	int
,	O
nread	long
)	O
;	O
}	O
mu_stream_seterr	function
(	O
stream	pointer
,	O
rc	int
,	O
rc	int
!=	O
0	int
)	O
;	O
}	O
if	O
(	O
pnread	pointer
)	O
*	O
pnread	pointer
=	O
nread	long
;	O
return	O
rc	int
;	O
}	O
static	O
int	O
_stream_write_unbuffered	function
(	O
mu_stream_t	pointer
stream	pointer
,	O
const	O
void	O
*	O
buf	pointer
,	O
size_t	long
size	long
,	O
int	O
full_write	int
,	O
size_t	long
*	O
pnwritten	pointer
)	O
{	O
int	O
rc	int
;	O
size_t	long
nwritten	long
;	O
if	O
(	O
!	O
stream	pointer
->	O
write	pointer
)	O
return	O
mu_stream_seterr	function
(	O
stream	pointer
,	O
ENOSYS	int
,	O
0	int
)	O
;	O
if	O
(	O
!	O
(	O
stream	pointer
->	O
flags	int
&	O
(	O
MU_STREAM_WRITE	int
|	O
MU_STREAM_APPEND	int
)	O
)	O
)	O
return	O
mu_stream_seterr	function
(	O
stream	pointer
,	O
EACCES	int
,	O
1	int
)	O
;	O
if	O
(	O
stream	pointer
->	O
flags	int
&	O
_MU_STR_ERR	int
)	O
return	O
stream	pointer
->	O
last_err	int
;	O
if	O
(	O
size	long
==	O
0	int
)	O
{	O
if	O
(	O
pnwritten	pointer
)	O
*	O
pnwritten	pointer
=	O
0	int
;	O
return	O
0	int
;	O
}	O
if	O
(	O
full_write	int
)	O
{	O
size_t	long
wrbytes	long
;	O
const	O
char	O
*	O
bufp	pointer
=	O
buf	pointer
;	O
nwritten	long
=	O
0	int
;	O
while	O
(	O
size	long
>	O
0	int
&&	O
(	O
rc	int
=	O
_stream_write	O
(	O
stream	pointer
,	O
bufp	pointer
,	O
size	long
,	O
&	O
wrbytes	long
)	O
)	O
==	O
0	int
)	O
{	O
if	O
(	O
wrbytes	long
==	O
0	int
)	O
{	O
rc	int
=	O
EIO	int
;	O
break	O
;	O
}	O
bufp	pointer
+=	O
wrbytes	long
;	O
nwritten	long
+=	O
wrbytes	long
;	O
size	long
-=	O
wrbytes	long
;	O
_stream_stat_incr	O
(	O
stream	pointer
,	O
MU_STREAM_STAT_OUT	int
,	O
wrbytes	long
)	O
;	O
}	O
}	O
else	O
{	O
rc	int
=	O
_stream_write	O
(	O
stream	pointer
,	O
buf	pointer
,	O
size	long
,	O
&	O
nwritten	long
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
_stream_stat_incr	O
(	O
stream	pointer
,	O
MU_STREAM_STAT_OUT	int
,	O
nwritten	long
)	O
;	O
}	O
_stream_setflag	function
(	O
stream	pointer
,	O
_MU_STR_WRT	int
)	O
;	O
if	O
(	O
pnwritten	pointer
)	O
*	O
pnwritten	pointer
=	O
nwritten	long
;	O
mu_stream_seterr	function
(	O
stream	pointer
,	O
rc	int
,	O
rc	int
!=	O
0	int
)	O
;	O
return	O
rc	int
;	O
}	O
int	O
mu_stream_read	function
(	O
mu_stream_t	pointer
stream	pointer
,	O
void	O
*	O
buf	pointer
,	O
size_t	long
size	long
,	O
size_t	long
*	O
pread	pointer
)	O
{	O
_bootstrap_event	O
(	O
stream	pointer
)	O
;	O
if	O
(	O
!	O
(	O
stream	pointer
->	O
flags	int
&	O
_MU_STR_OPEN	int
)	O
)	O
{	O
if	O
(	O
stream	pointer
->	O
open	pointer
)	O
return	O
MU_ERR_NOT_OPEN	O
;	O
_stream_init	function
(	O
stream	pointer
)	O
;	O
}	O
if	O
(	O
stream	pointer
->	O
buftype	enum
==	O
mu_buffer_none	int
)	O
{	O
size_t	long
nread	long
=	O
0	int
;	O
int	O
rc	int
=	O
_stream_read_unbuffered	function
(	O
stream	pointer
,	O
buf	pointer
,	O
size	long
,	O
!	O
pread	pointer
,	O
&	O
nread	long
)	O
;	O
stream	pointer
->	O
offset	long
+=	O
nread	long
;	O
if	O
(	O
pread	pointer
)	O
*	O
pread	pointer
=	O
nread	long
;	O
return	O
rc	int
;	O
}	O
else	O
{	O
char	O
*	O
bufp	pointer
=	O
buf	pointer
;	O
size_t	long
nbytes	long
=	O
0	int
;	O
int	O
rc	int
;	O
while	O
(	O
size	long
)	O
{	O
size_t	long
n	int
;	O
if	O
(	O
stream	pointer
->	O
pos	long
==	O
stream	pointer
->	O
level	int
)	O
{	O
if	O
(	O
(	O
rc	int
=	O
_stream_flush_buffer	function
(	O
stream	pointer
,	O
FLUSH_RDWR	int
)	O
)	O
)	O
{	O
if	O
(	O
nbytes	long
)	O
break	O
;	O
return	O
rc	int
;	O
}	O
if	O
(	O
(	O
rc	int
=	O
_stream_fill_buffer	function
(	O
stream	pointer
)	O
)	O
)	O
{	O
if	O
(	O
nbytes	long
)	O
break	O
;	O
return	O
rc	int
;	O
}	O
if	O
(	O
stream	pointer
->	O
level	int
==	O
0	int
)	O
break	O
;	O
}	O
n	int
=	O
size	long
;	O
if	O
(	O
n	int
>	O
stream	pointer
->	O
level	int
-	O
stream	pointer
->	O
pos	long
)	O
n	int
=	O
stream	pointer
->	O
level	int
-	O
stream	pointer
->	O
pos	long
;	O
memcpy	function
(	O
bufp	pointer
,	O
_stream_curp	O
(	O
stream	pointer
)	O
,	O
n	int
)	O
;	O
stream	pointer
->	O
pos	long
+=	O
n	int
;	O
nbytes	long
+=	O
n	int
;	O
bufp	pointer
+=	O
n	int
;	O
size	long
-=	O
n	int
;	O
if	O
(	O
stream	pointer
->	O
buftype	enum
==	O
mu_buffer_line	int
&&	O
bufp	pointer
[	O
-	O
1	int
]	O
==	O
'\n'	O
)	O
break	O
;	O
}	O
if	O
(	O
pread	pointer
)	O
*	O
pread	pointer
=	O
nbytes	long
;	O
}	O
return	O
0	int
;	O
}	O
int	O
_stream_scandelim	function
(	O
mu_stream_t	pointer
stream	pointer
,	O
char	O
*	O
buf	pointer
,	O
size_t	long
size	long
,	O
int	O
delim	int
,	O
size_t	long
*	O
pnread	pointer
)	O
{	O
int	O
rc	int
=	O
0	int
;	O
size_t	long
nread	long
=	O
0	int
;	O
size	long
--	O
;	O
if	O
(	O
size	long
==	O
0	int
)	O
return	O
MU_ERR_BUFSPACE	O
;	O
while	O
(	O
size	long
)	O
{	O
char	O
*	O
p	pointer
,	O
*	O
q	pointer
;	O
size_t	long
len	long
;	O
if	O
(	O
stream	pointer
->	O
pos	long
==	O
stream	pointer
->	O
level	int
)	O
{	O
if	O
(	O
(	O
rc	int
=	O
_stream_flush_buffer	function
(	O
stream	pointer
,	O
FLUSH_RDWR	int
)	O
)	O
)	O
break	O
;	O
if	O
(	O
(	O
rc	int
=	O
_stream_fill_buffer	function
(	O
stream	pointer
)	O
)	O
||	O
stream	pointer
->	O
level	int
==	O
0	int
)	O
break	O
;	O
}	O
q	pointer
=	O
_stream_curp	O
(	O
stream	pointer
)	O
;	O
len	long
=	O
stream	pointer
->	O
level	int
-	O
stream	pointer
->	O
pos	long
;	O
p	pointer
=	O
memchr	function
(	O
q	pointer
,	O
delim	int
,	O
len	long
)	O
;	O
if	O
(	O
p	pointer
)	O
len	long
=	O
p	pointer
-	O
q	pointer
+	O
1	int
;	O
if	O
(	O
len	long
>	O
size	long
)	O
len	long
=	O
size	long
;	O
memcpy	function
(	O
buf	pointer
,	O
_stream_curp	O
(	O
stream	pointer
)	O
,	O
len	long
)	O
;	O
stream	pointer
->	O
pos	long
+=	O
len	long
;	O
buf	pointer
+=	O
len	long
;	O
size	long
-=	O
len	long
;	O
nread	long
+=	O
len	long
;	O
if	O
(	O
p	pointer
)	O
break	O
;	O
}	O
*	O
buf	pointer
=	O
0	int
;	O
*	O
pnread	pointer
=	O
nread	long
;	O
return	O
rc	int
;	O
}	O
static	O
int	O
_stream_readdelim	function
(	O
mu_stream_t	pointer
stream	pointer
,	O
char	O
*	O
buf	pointer
,	O
size_t	long
size	long
,	O
int	O
delim	int
,	O
size_t	long
*	O
pread	pointer
)	O
{	O
int	O
rc	int
;	O
char	O
c	char
;	O
size_t	long
n	int
=	O
0	int
,	O
rdn	long
;	O
size	long
--	O
;	O
if	O
(	O
size	long
==	O
0	int
)	O
return	O
MU_ERR_BUFSPACE	O
;	O
for	O
(	O
n	int
=	O
0	int
;	O
n	int
<	O
size	long
&&	O
(	O
rc	int
=	O
mu_stream_read	function
(	O
stream	pointer
,	O
&	O
c	char
,	O
1	int
,	O
&	O
rdn	long
)	O
)	O
==	O
0	int
&&	O
rdn	long
;	O
)	O
{	O
*	O
buf	pointer
++	O
=	O
c	char
;	O
n	int
++	O
;	O
if	O
(	O
c	char
==	O
delim	int
)	O
break	O
;	O
}	O
*	O
buf	pointer
=	O
0	int
;	O
if	O
(	O
pread	pointer
)	O
*	O
pread	pointer
=	O
n	int
;	O
return	O
rc	int
;	O
}	O
int	O
mu_stream_readdelim	function
(	O
mu_stream_t	pointer
stream	pointer
,	O
char	O
*	O
buf	pointer
,	O
size_t	long
size	long
,	O
int	O
delim	int
,	O
size_t	long
*	O
pread	pointer
)	O
{	O
int	O
rc	int
;	O
_bootstrap_event	O
(	O
stream	pointer
)	O
;	O
if	O
(	O
size	long
==	O
0	int
)	O
return	O
EINVAL	int
;	O
if	O
(	O
!	O
(	O
stream	pointer
->	O
flags	int
&	O
_MU_STR_OPEN	int
)	O
)	O
{	O
if	O
(	O
stream	pointer
->	O
open	pointer
)	O
return	O
MU_ERR_NOT_OPEN	O
;	O
_stream_init	function
(	O
stream	pointer
)	O
;	O
}	O
if	O
(	O
stream	pointer
->	O
buftype	enum
==	O
mu_buffer_none	int
)	O
{	O
if	O
(	O
stream	pointer
->	O
readdelim	pointer
)	O
{	O
size_t	long
nread	long
;	O
rc	int
=	O
stream	pointer
->	O
readdelim	pointer
(	O
stream	pointer
,	O
buf	pointer
,	O
size	long
,	O
delim	int
,	O
&	O
nread	long
)	O
;	O
if	O
(	O
pread	pointer
)	O
*	O
pread	pointer
=	O
nread	long
;	O
stream	pointer
->	O
offset	long
+=	O
nread	long
;	O
}	O
else	O
rc	int
=	O
_stream_readdelim	function
(	O
stream	pointer
,	O
buf	pointer
,	O
size	long
,	O
delim	int
,	O
pread	pointer
)	O
;	O
}	O
else	O
{	O
if	O
(	O
(	O
rc	int
=	O
_stream_flush_buffer	function
(	O
stream	pointer
,	O
FLUSH_WRITE	int
)	O
)	O
)	O
return	O
rc	int
;	O
rc	int
=	O
_stream_scandelim	function
(	O
stream	pointer
,	O
buf	pointer
,	O
size	long
,	O
delim	int
,	O
pread	pointer
)	O
;	O
}	O
return	O
rc	int
;	O
}	O
int	O
mu_stream_readline	function
(	O
mu_stream_t	pointer
stream	pointer
,	O
char	O
*	O
buf	pointer
,	O
size_t	long
size	long
,	O
size_t	long
*	O
pread	pointer
)	O
{	O
return	O
mu_stream_readdelim	function
(	O
stream	pointer
,	O
buf	pointer
,	O
size	long
,	O
'\n'	O
,	O
pread	pointer
)	O
;	O
}	O
int	O
mu_stream_getdelim	function
(	O
mu_stream_t	pointer
stream	pointer
,	O
char	O
*	O
*	O
pbuf	pointer
,	O
size_t	long
*	O
psize	pointer
,	O
int	O
delim	int
,	O
size_t	long
*	O
pread	pointer
)	O
{	O
int	O
rc	int
;	O
char	O
*	O
lineptr	pointer
=	O
*	O
pbuf	pointer
;	O
size_t	long
n	int
=	O
*	O
psize	pointer
;	O
size_t	long
cur_len	long
=	O
0	int
;	O
_bootstrap_event	O
(	O
stream	pointer
)	O
;	O
if	O
(	O
!	O
(	O
stream	pointer
->	O
flags	int
&	O
_MU_STR_OPEN	int
)	O
)	O
{	O
if	O
(	O
stream	pointer
->	O
open	pointer
)	O
return	O
MU_ERR_NOT_OPEN	O
;	O
_stream_init	function
(	O
stream	pointer
)	O
;	O
}	O
if	O
(	O
(	O
rc	int
=	O
_stream_flush_buffer	function
(	O
stream	pointer
,	O
FLUSH_WRITE	int
)	O
)	O
)	O
return	O
rc	int
;	O
if	O
(	O
lineptr	pointer
==	O
NULL	O
||	O
n	int
==	O
0	int
)	O
{	O
char	O
*	O
new_lineptr	pointer
;	O
n	int
=	O
120	int
;	O
new_lineptr	pointer
=	O
realloc	function
(	O
lineptr	pointer
,	O
n	int
)	O
;	O
if	O
(	O
new_lineptr	pointer
==	O
NULL	O
)	O
return	O
ENOMEM	int
;	O
lineptr	pointer
=	O
new_lineptr	pointer
;	O
}	O
for	O
(	O
;	O
;	O
)	O
{	O
size_t	long
rdn	long
;	O
if	O
(	O
cur_len	long
+	O
1	int
>=	O
n	int
)	O
{	O
size_t	long
needed_max	long
=	O
SSIZE_MAX	O
<	O
SIZE_MAX	O
?	O
(	O
size_t	long
)	O
SSIZE_MAX	O
+	O
1	int
:	O
SIZE_MAX	O
;	O
size_t	long
needed	long
=	O
2	int
*	O
n	int
+	O
1	int
;	O
char	O
*	O
new_lineptr	pointer
;	O
if	O
(	O
needed_max	long
<	O
needed	long
)	O
needed	long
=	O
needed_max	long
;	O
if	O
(	O
cur_len	long
+	O
1	int
>=	O
needed	long
)	O
{	O
rc	int
=	O
EOVERFLOW	int
;	O
break	O
;	O
}	O
new_lineptr	pointer
=	O
realloc	function
(	O
lineptr	pointer
,	O
needed	long
)	O
;	O
if	O
(	O
new_lineptr	pointer
==	O
NULL	O
)	O
{	O
rc	int
=	O
ENOMEM	int
;	O
break	O
;	O
}	O
lineptr	pointer
=	O
new_lineptr	pointer
;	O
n	int
=	O
needed	long
;	O
}	O
if	O
(	O
stream	pointer
->	O
readdelim	pointer
)	O
rc	int
=	O
stream	pointer
->	O
readdelim	pointer
(	O
stream	pointer
,	O
lineptr	pointer
+	O
cur_len	long
,	O
n	int
-	O
cur_len	long
,	O
delim	int
,	O
&	O
rdn	long
)	O
;	O
else	O
if	O
(	O
stream	pointer
->	O
buftype	enum
!=	O
mu_buffer_none	int
)	O
rc	int
=	O
_stream_scandelim	function
(	O
stream	pointer
,	O
lineptr	pointer
+	O
cur_len	long
,	O
n	int
-	O
cur_len	long
,	O
delim	int
,	O
&	O
rdn	long
)	O
;	O
else	O
rc	int
=	O
mu_stream_read	function
(	O
stream	pointer
,	O
lineptr	pointer
+	O
cur_len	long
,	O
1	int
,	O
&	O
rdn	long
)	O
;	O
if	O
(	O
rc	int
||	O
rdn	long
==	O
0	int
)	O
break	O
;	O
cur_len	long
+=	O
rdn	long
;	O
if	O
(	O
lineptr	pointer
[	O
cur_len	long
-	O
1	int
]	O
==	O
delim	int
)	O
break	O
;	O
}	O
lineptr	pointer
[	O
cur_len	long
]	O
=	O
'\0'	O
;	O
*	O
pbuf	pointer
=	O
lineptr	pointer
;	O
*	O
psize	pointer
=	O
n	int
;	O
if	O
(	O
pread	pointer
)	O
*	O
pread	pointer
=	O
cur_len	long
;	O
return	O
rc	int
;	O
}	O
int	O
mu_stream_getline	function
(	O
mu_stream_t	pointer
stream	pointer
,	O
char	O
*	O
*	O
pbuf	pointer
,	O
size_t	long
*	O
psize	pointer
,	O
size_t	long
*	O
pread	pointer
)	O
{	O
return	O
mu_stream_getdelim	function
(	O
stream	pointer
,	O
pbuf	pointer
,	O
psize	pointer
,	O
'\n'	O
,	O
pread	pointer
)	O
;	O
}	O
int	O
mu_stream_write	function
(	O
mu_stream_t	pointer
stream	pointer
,	O
const	O
void	O
*	O
buf	pointer
,	O
size_t	long
size	long
,	O
size_t	long
*	O
pnwritten	pointer
)	O
{	O
int	O
rc	int
=	O
0	int
;	O
_bootstrap_event	O
(	O
stream	pointer
)	O
;	O
if	O
(	O
!	O
(	O
stream	pointer
->	O
flags	int
&	O
_MU_STR_OPEN	int
)	O
)	O
{	O
if	O
(	O
stream	pointer
->	O
open	pointer
)	O
return	O
MU_ERR_NOT_OPEN	O
;	O
_stream_init	function
(	O
stream	pointer
)	O
;	O
}	O
if	O
(	O
stream	pointer
->	O
buftype	enum
==	O
mu_buffer_none	int
)	O
{	O
size_t	long
nwritten	long
;	O
rc	int
=	O
_stream_write_unbuffered	function
(	O
stream	pointer
,	O
buf	pointer
,	O
size	long
,	O
!	O
pnwritten	pointer
,	O
&	O
nwritten	long
)	O
;	O
stream	pointer
->	O
offset	long
+=	O
nwritten	long
;	O
if	O
(	O
pnwritten	pointer
)	O
*	O
pnwritten	pointer
=	O
nwritten	long
;	O
}	O
else	O
{	O
size_t	long
nbytes	long
=	O
0	int
;	O
const	O
char	O
*	O
bufp	pointer
=	O
buf	pointer
;	O
while	O
(	O
1	int
)	O
{	O
size_t	long
n	int
;	O
if	O
(	O
_stream_buffer_full_p	function
(	O
stream	pointer
)	O
&&	O
(	O
rc	int
=	O
_stream_flush_buffer	function
(	O
stream	pointer
,	O
FLUSH_RDWR	int
)	O
)	O
)	O
break	O
;	O
if	O
(	O
size	long
==	O
0	int
)	O
break	O
;	O
n	int
=	O
_stream_buffer_freespace	O
(	O
stream	pointer
)	O
;	O
if	O
(	O
n	int
>	O
size	long
)	O
n	int
=	O
size	long
;	O
memcpy	function
(	O
_stream_curp	O
(	O
stream	pointer
)	O
,	O
bufp	pointer
,	O
n	int
)	O
;	O
stream	pointer
->	O
pos	long
+=	O
n	int
;	O
if	O
(	O
stream	pointer
->	O
pos	long
>	O
stream	pointer
->	O
level	int
)	O
stream	pointer
->	O
level	int
=	O
stream	pointer
->	O
pos	long
;	O
nbytes	long
+=	O
n	int
;	O
bufp	pointer
+=	O
n	int
;	O
size	long
-=	O
n	int
;	O
_stream_setflag	function
(	O
stream	pointer
,	O
_MU_STR_DIRTY	int
)	O
;	O
}	O
if	O
(	O
pnwritten	pointer
)	O
*	O
pnwritten	pointer
=	O
nbytes	long
;	O
else	O
if	O
(	O
nbytes	long
<	O
size	long
)	O
{	O
rc	int
=	O
EIO	int
;	O
mu_stream_seterr	function
(	O
stream	pointer
,	O
rc	int
,	O
1	int
)	O
;	O
}	O
}	O
return	O
rc	int
;	O
}	O
int	O
mu_stream_writeline	function
(	O
mu_stream_t	pointer
stream	pointer
,	O
const	O
char	O
*	O
buf	pointer
,	O
size_t	long
size	long
)	O
{	O
int	O
rc	int
;	O
if	O
(	O
(	O
rc	int
=	O
mu_stream_write	function
(	O
stream	pointer
,	O
buf	pointer
,	O
size	long
,	O
NULL	O
)	O
)	O
==	O
0	int
)	O
rc	int
=	O
mu_stream_write	function
(	O
stream	pointer
,	O
"\r\n"	pointer
,	O
2	int
,	O
NULL	O
)	O
;	O
return	O
rc	int
;	O
}	O
int	O
mu_stream_flush	function
(	O
mu_stream_t	pointer
stream	pointer
)	O
{	O
int	O
rc	int
;	O
if	O
(	O
!	O
stream	pointer
)	O
return	O
EINVAL	int
;	O
_bootstrap_event	O
(	O
stream	pointer
)	O
;	O
if	O
(	O
!	O
(	O
stream	pointer
->	O
flags	int
&	O
_MU_STR_OPEN	int
)	O
)	O
{	O
if	O
(	O
stream	pointer
->	O
open	pointer
)	O
return	O
MU_ERR_NOT_OPEN	O
;	O
_stream_init	function
(	O
stream	pointer
)	O
;	O
}	O
rc	int
=	O
_stream_flush_buffer	function
(	O
stream	pointer
,	O
FLUSH_RDWR	int
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
if	O
(	O
(	O
stream	pointer
->	O
flags	int
&	O
_MU_STR_WRT	int
)	O
&&	O
stream	pointer
->	O
flush	pointer
)	O
return	O
stream	pointer
->	O
flush	pointer
(	O
stream	pointer
)	O
;	O
_stream_clrflag	function
(	O
stream	pointer
,	O
_MU_STR_WRT	int
)	O
;	O
return	O
0	int
;	O
}	O
int	O
mu_stream_close	function
(	O
mu_stream_t	pointer
stream	pointer
)	O
{	O
int	O
rc	int
=	O
0	int
;	O
if	O
(	O
!	O
stream	pointer
)	O
return	O
EINVAL	int
;	O
if	O
(	O
!	O
(	O
stream	pointer
->	O
flags	int
&	O
_MU_STR_OPEN	int
)	O
)	O
return	O
MU_ERR_NOT_OPEN	O
;	O
mu_stream_flush	function
(	O
stream	pointer
)	O
;	O
if	O
(	O
stream	pointer
->	O
ref_count	int
>	O
1	int
)	O
return	O
0	int
;	O
_stream_event	O
(	O
stream	pointer
,	O
_MU_STR_EVENT_CLOSE	int
,	O
0	int
,	O
NULL	O
)	O
;	O
if	O
(	O
stream	pointer
->	O
close	pointer
)	O
rc	int
=	O
stream	pointer
->	O
close	pointer
(	O
stream	pointer
)	O
;	O
_stream_clrflag	function
(	O
stream	pointer
,	O
_MU_STR_OPEN	int
)	O
;	O
return	O
rc	int
;	O
}	O
int	O
mu_stream_size	function
(	O
mu_stream_t	pointer
stream	pointer
,	O
mu_off_t	long
*	O
psize	pointer
)	O
{	O
int	O
rc	int
;	O
mu_off_t	long
size	long
;	O
_bootstrap_event	O
(	O
stream	pointer
)	O
;	O
if	O
(	O
!	O
(	O
stream	pointer
->	O
flags	int
&	O
_MU_STR_OPEN	int
)	O
)	O
{	O
if	O
(	O
stream	pointer
->	O
open	pointer
)	O
return	O
MU_ERR_NOT_OPEN	O
;	O
_stream_init	function
(	O
stream	pointer
)	O
;	O
}	O
if	O
(	O
!	O
stream	pointer
->	O
size	long
)	O
return	O
mu_stream_seterr	function
(	O
stream	pointer
,	O
ENOSYS	int
,	O
0	int
)	O
;	O
rc	int
=	O
stream	pointer
->	O
size	long
(	O
stream	pointer
,	O
&	O
size	long
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
if	O
(	O
stream	pointer
->	O
buftype	enum
!=	O
mu_buffer_none	int
&&	O
stream	pointer
->	O
offset	long
==	O
size	long
)	O
size	long
+=	O
stream	pointer
->	O
level	int
;	O
*	O
psize	pointer
=	O
size	long
;	O
}	O
return	O
mu_stream_seterr	function
(	O
stream	pointer
,	O
rc	int
,	O
rc	int
!=	O
0	int
)	O
;	O
}	O
int	O
mu_stream_ioctl	function
(	O
mu_stream_t	pointer
stream	pointer
,	O
int	O
family	int
,	O
int	O
opcode	int
,	O
void	O
*	O
ptr	pointer
)	O
{	O
int	O
rc	int
;	O
_bootstrap_event	O
(	O
stream	pointer
)	O
;	O
if	O
(	O
(	O
rc	int
=	O
_stream_flush_buffer	function
(	O
stream	pointer
,	O
FLUSH_WRITE	int
)	O
)	O
)	O
return	O
rc	int
;	O
if	O
(	O
stream	pointer
->	O
ctl	pointer
==	O
NULL	O
)	O
return	O
ENOSYS	int
;	O
return	O
stream	pointer
->	O
ctl	pointer
(	O
stream	pointer
,	O
family	int
,	O
opcode	int
,	O
ptr	pointer
)	O
;	O
}	O
int	O
mu_stream_wait	function
(	O
mu_stream_t	pointer
stream	pointer
,	O
int	O
*	O
pflags	pointer
,	O
struct	O
timeval	struct
*	O
tvp	pointer
)	O
{	O
int	O
flg	int
=	O
0	int
;	O
if	O
(	O
stream	pointer
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
_bootstrap_event	O
(	O
stream	pointer
)	O
;	O
if	O
(	O
(	O
*	O
pflags	pointer
)	O
&	O
MU_STREAM_READY_RD	int
&&	O
stream	pointer
->	O
buftype	enum
!=	O
mu_buffer_none	int
&&	O
stream	pointer
->	O
pos	long
<	O
stream	pointer
->	O
level	int
)	O
{	O
flg	int
=	O
MU_STREAM_READY_RD	int
;	O
*	O
pflags	pointer
&=	O
~	O
MU_STREAM_READY_RD	int
;	O
}	O
if	O
(	O
stream	pointer
->	O
wait	pointer
)	O
{	O
int	O
rc	int
;	O
if	O
(	O
flg	int
&&	O
*	O
pflags	pointer
==	O
0	int
)	O
rc	int
=	O
0	int
;	O
else	O
rc	int
=	O
stream	pointer
->	O
wait	pointer
(	O
stream	pointer
,	O
pflags	pointer
,	O
tvp	pointer
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
*	O
pflags	pointer
|=	O
flg	int
;	O
return	O
rc	int
;	O
}	O
return	O
ENOSYS	int
;	O
}	O
int	O
mu_stream_truncate	function
(	O
mu_stream_t	pointer
stream	pointer
,	O
mu_off_t	long
size	long
)	O
{	O
_bootstrap_event	O
(	O
stream	pointer
)	O
;	O
if	O
(	O
!	O
(	O
stream	pointer
->	O
flags	int
&	O
_MU_STR_OPEN	int
)	O
)	O
{	O
if	O
(	O
stream	pointer
->	O
open	pointer
)	O
return	O
MU_ERR_NOT_OPEN	O
;	O
_stream_init	function
(	O
stream	pointer
)	O
;	O
}	O
if	O
(	O
stream	pointer
->	O
truncate	pointer
)	O
{	O
int	O
rc	int
;	O
if	O
(	O
(	O
rc	int
=	O
_stream_flush_buffer	function
(	O
stream	pointer
,	O
FLUSH_RDWR	int
)	O
)	O
)	O
return	O
rc	int
;	O
return	O
stream	pointer
->	O
truncate	pointer
(	O
stream	pointer
,	O
size	long
)	O
;	O
}	O
return	O
ENOSYS	int
;	O
}	O
int	O
mu_stream_shutdown	function
(	O
mu_stream_t	pointer
stream	pointer
,	O
int	O
how	int
)	O
{	O
int	O
rc	int
;	O
_bootstrap_event	O
(	O
stream	pointer
)	O
;	O
if	O
(	O
!	O
(	O
stream	pointer
->	O
flags	int
&	O
_MU_STR_OPEN	int
)	O
)	O
{	O
if	O
(	O
stream	pointer
->	O
open	pointer
)	O
return	O
MU_ERR_NOT_OPEN	O
;	O
_stream_init	function
(	O
stream	pointer
)	O
;	O
}	O
rc	int
=	O
mu_stream_flush	function
(	O
stream	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
if	O
(	O
stream	pointer
->	O
shutdown	pointer
)	O
return	O
stream	pointer
->	O
shutdown	pointer
(	O
stream	pointer
,	O
how	int
)	O
;	O
return	O
0	int
;	O
}	O
int	O
mu_stream_set_flags	function
(	O
mu_stream_t	pointer
stream	pointer
,	O
int	O
fl	int
)	O
{	O
if	O
(	O
stream	pointer
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
stream	pointer
->	O
flags	int
|=	O
(	O
fl	int
&	O
~	O
_MU_STR_INTERN_MASK	int
)	O
;	O
return	O
0	int
;	O
}	O
int	O
mu_stream_clr_flags	function
(	O
mu_stream_t	pointer
stream	pointer
,	O
int	O
fl	int
)	O
{	O
if	O
(	O
stream	pointer
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
stream	pointer
->	O
flags	int
&=	O
~	O
(	O
fl	int
&	O
~	O
_MU_STR_INTERN_MASK	int
)	O
;	O
return	O
0	int
;	O
}	O
int	O
mu_stream_set_stat	function
(	O
mu_stream_t	pointer
stream	pointer
,	O
int	O
statmask	int
,	O
mu_stream_stat_buffer	array
statbuf	array
)	O
{	O
if	O
(	O
stream	pointer
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
if	O
(	O
!	O
statbuf	array
)	O
statmask	int
=	O
0	int
;	O
stream	pointer
->	O
statmask	int
=	O
statmask	int
;	O
stream	pointer
->	O
statbuf	array
=	O
statbuf	array
;	O
if	O
(	O
stream	pointer
->	O
statbuf	array
)	O
memset	function
(	O
stream	pointer
->	O
statbuf	array
,	O
0	int
,	O
_MU_STREAM_STAT_MAX	int
*	O
sizeof	O
(	O
stream	pointer
->	O
statbuf	array
[	O
0	int
]	O
)	O
)	O
;	O
return	O
0	int
;	O
}	O
int	O
mu_stream_get_stat	function
(	O
mu_stream_t	pointer
stream	pointer
,	O
int	O
*	O
pstatmask	pointer
,	O
mu_off_t	long
*	O
*	O
pstatbuf	pointer
)	O
{	O
if	O
(	O
stream	pointer
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
*	O
pstatmask	pointer
=	O
stream	pointer
->	O
statmask	int
;	O
*	O
pstatbuf	pointer
=	O
stream	pointer
->	O
statbuf	array
;	O
return	O
0	int
;	O
}	O
