const	O
char	O
cusub_rcsid	array
[	O
]	O
=	O
"$Id: cusub.c,v 1.27 2002/03/05 19:10:42 ian Rel $"	pointer
;	O
static	O
char	O
bSeof	char
;	O
static	O
char	O
bStstp	char
;	O
static	O
const	O
char	O
*	O
zsport_line	function
P	O
(	O
(	O
const	O
struct	O
uuconf_port	struct
*	O
qport	pointer
)	O
)	O
;	O
static	O
void	O
uscu_child	function
P	O
(	O
(	O
struct	O
sconnection	struct
*	O
qconn	pointer
,	O
int	O
opipe	int
)	O
)	O
;	O
static	O
RETSIGTYPE	void
uscu_child_handler	function
P	O
(	O
(	O
int	O
isig	int
)	O
)	O
;	O
static	O
RETSIGTYPE	void
uscu_alarm	function
P	O
(	O
(	O
int	O
isig	int
)	O
)	O
;	O
static	O
int	O
cscu_escape	function
P	O
(	O
(	O
char	O
*	O
pbcmd	pointer
,	O
const	O
char	O
*	O
zlocalname	pointer
)	O
)	O
;	O
static	O
RETSIGTYPE	void
uscu_alarm_kill	function
P	O
(	O
(	O
int	O
isig	int
)	O
)	O
;	O
static	O
const	O
char	O
*	O
zsport_line	function
(	O
qport	pointer
)	O
const	O
struct	O
uuconf_port	struct
*	O
qport	pointer
;	O
{	O
const	O
char	O
*	O
zline	pointer
;	O
if	O
(	O
qport	pointer
==	O
NULL	O
)	O
return	O
NULL	O
;	O
switch	O
(	O
qport	pointer
->	O
uuconf_ttype	enum
)	O
{	O
default	O
:	O
case	O
UUCONF_PORTTYPE_STDIN	int
:	O
return	O
NULL	O
;	O
case	O
UUCONF_PORTTYPE_MODEM	int
:	O
zline	pointer
=	O
qport	pointer
->	O
uuconf_u	union
.	O
uuconf_smodem	struct
.	O
uuconf_zdevice	pointer
;	O
break	O
;	O
case	O
UUCONF_PORTTYPE_DIRECT	int
:	O
zline	pointer
=	O
qport	pointer
->	O
uuconf_u	union
.	O
uuconf_sdirect	struct
.	O
uuconf_zdevice	pointer
;	O
break	O
;	O
case	O
UUCONF_PORTTYPE_TCP	int
:	O
case	O
UUCONF_PORTTYPE_TLI	int
:	O
case	O
UUCONF_PORTTYPE_PIPE	int
:	O
return	O
NULL	O
;	O
}	O
if	O
(	O
zline	pointer
==	O
NULL	O
)	O
zline	pointer
=	O
qport	pointer
->	O
uuconf_zname	pointer
;	O
return	O
zline	pointer
;	O
}	O
boolean	int
fsysdep_port_access	function
(	O
qport	pointer
)	O
struct	O
uuconf_port	struct
*	O
qport	pointer
;	O
{	O
const	O
char	O
*	O
zline	pointer
;	O
char	O
*	O
zfree	pointer
;	O
boolean	int
fret	int
;	O
zline	pointer
=	O
zsport_line	function
(	O
qport	pointer
)	O
;	O
if	O
(	O
zline	pointer
==	O
NULL	O
)	O
return	O
TRUE	O
;	O
zfree	pointer
=	O
NULL	O
;	O
if	O
(	O
*	O
zline	pointer
!=	O
'/'	O
)	O
{	O
zfree	pointer
=	O
zbufalc	function
(	O
sizeof	O
"/dev/"	pointer
+	O
strlen	function
(	O
zline	pointer
)	O
)	O
;	O
sprintf	function
(	O
zfree	pointer
,	O
"/dev/%s"	pointer
,	O
zline	pointer
)	O
;	O
zline	pointer
=	O
zfree	pointer
;	O
}	O
fret	int
=	O
access	function
(	O
zline	pointer
,	O
R_OK	int
|	O
W_OK	int
)	O
==	O
0	int
;	O
ubuffree	function
(	O
zfree	pointer
)	O
;	O
return	O
fret	int
;	O
}	O
boolean	int
fsysdep_port_is_line	function
(	O
qport	pointer
,	O
zline	pointer
)	O
struct	O
uuconf_port	struct
*	O
qport	pointer
;	O
const	O
char	O
*	O
zline	pointer
;	O
{	O
const	O
char	O
*	O
zpline	pointer
;	O
char	O
*	O
zfree1	pointer
,	O
*	O
zfree2	pointer
;	O
boolean	int
fret	int
;	O
zpline	pointer
=	O
zsport_line	function
(	O
qport	pointer
)	O
;	O
if	O
(	O
zpline	pointer
==	O
NULL	O
)	O
return	O
FALSE	O
;	O
if	O
(	O
strcmp	function
(	O
zline	pointer
,	O
zpline	pointer
)	O
==	O
0	int
)	O
return	O
TRUE	O
;	O
zfree1	pointer
=	O
NULL	O
;	O
zfree2	pointer
=	O
NULL	O
;	O
if	O
(	O
*	O
zline	pointer
!=	O
'/'	O
)	O
{	O
zfree1	pointer
=	O
zbufalc	function
(	O
sizeof	O
"/dev/"	pointer
+	O
strlen	function
(	O
zline	pointer
)	O
)	O
;	O
sprintf	function
(	O
zfree1	pointer
,	O
"/dev/%s"	pointer
,	O
zline	pointer
)	O
;	O
zline	pointer
=	O
zfree1	pointer
;	O
}	O
if	O
(	O
*	O
zpline	pointer
!=	O
'/'	O
)	O
{	O
zfree2	pointer
=	O
zbufalc	function
(	O
sizeof	O
"/dev/"	pointer
+	O
strlen	function
(	O
zpline	pointer
)	O
)	O
;	O
sprintf	function
(	O
zfree2	pointer
,	O
"/dev/%s"	pointer
,	O
zpline	pointer
)	O
;	O
zpline	pointer
=	O
zfree2	pointer
;	O
}	O
fret	int
=	O
strcmp	function
(	O
zline	pointer
,	O
zpline	pointer
)	O
==	O
0	int
;	O
ubuffree	function
(	O
zfree1	pointer
)	O
;	O
ubuffree	function
(	O
zfree2	pointer
)	O
;	O
return	O
fret	int
;	O
}	O
static	O
volatile	O
pid_t	int
iSchild	int
;	O
static	O
int	O
oSpipe	int
;	O
boolean	int
fsysdep_cu_init	function
(	O
qconn	pointer
)	O
struct	O
sconnection	struct
*	O
qconn	pointer
;	O
{	O
int	O
ai	array
[	O
2	int
]	O
;	O
while	O
(	O
iPrecend	int
!=	O
iPrecstart	int
)	O
{	O
char	O
*	O
z	pointer
;	O
int	O
c	long
;	O
z	pointer
=	O
abPrecbuf	array
+	O
iPrecstart	int
;	O
if	O
(	O
iPrecend	int
>	O
iPrecstart	int
)	O
c	long
=	O
iPrecend	int
-	O
iPrecstart	int
;	O
else	O
c	long
=	O
CRECBUFLEN	O
-	O
iPrecstart	int
;	O
iPrecstart	int
=	O
(	O
iPrecstart	int
+	O
c	long
)	O
%	O
CRECBUFLEN	O
;	O
while	O
(	O
c	long
>	O
0	int
)	O
{	O
int	O
cwrote	int
;	O
cwrote	int
=	O
write	function
(	O
1	int
,	O
z	pointer
,	O
c	long
)	O
;	O
if	O
(	O
cwrote	int
<=	O
0	int
)	O
{	O
if	O
(	O
cwrote	int
<	O
0	int
)	O
ulog	function
(	O
LOG_ERROR	int
,	O
"write: %s"	pointer
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
else	O
ulog	function
(	O
LOG_ERROR	int
,	O
"Line disconnected"	pointer
)	O
;	O
return	O
FALSE	O
;	O
}	O
c	long
-=	O
cwrote	int
;	O
z	pointer
+=	O
cwrote	int
;	O
}	O
}	O
if	O
(	O
pipe	function
(	O
ai	array
)	O
<	O
0	int
)	O
{	O
ulog	function
(	O
LOG_ERROR	int
,	O
"pipe: %s"	pointer
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
return	O
FALSE	O
;	O
}	O
iSchild	int
=	O
ixsfork	function
(	O
)	O
;	O
if	O
(	O
iSchild	int
<	O
0	int
)	O
{	O
ulog	function
(	O
LOG_ERROR	int
,	O
"fork: %s"	pointer
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
return	O
FALSE	O
;	O
}	O
if	O
(	O
iSchild	int
==	O
0	int
)	O
{	O
(	O
void	O
)	O
close	function
(	O
ai	array
[	O
0	int
]	O
)	O
;	O
uscu_child	function
(	O
qconn	pointer
,	O
ai	array
[	O
1	int
]	O
)	O
;	O
}	O
(	O
void	O
)	O
close	function
(	O
ai	array
[	O
1	int
]	O
)	O
;	O
oSpipe	int
=	O
ai	array
[	O
0	int
]	O
;	O
return	O
TRUE	O
;	O
}	O
boolean	int
fsysdep_cu	function
(	O
qconn	pointer
,	O
pbcmd	pointer
,	O
zlocalname	pointer
)	O
struct	O
sconnection	struct
*	O
qconn	pointer
;	O
char	O
*	O
pbcmd	pointer
;	O
const	O
char	O
*	O
zlocalname	pointer
;	O
{	O
boolean	int
fstart	int
;	O
char	O
b	char
;	O
int	O
c	long
;	O
fstart	int
=	O
TRUE	O
;	O
while	O
(	O
TRUE	O
)	O
{	O
if	O
(	O
fsysdep_catch	O
(	O
)	O
)	O
usysdep_start_catch	O
(	O
)	O
;	O
else	O
{	O
ulog	function
(	O
LOG_ERROR	int
,	O
(	O
const	O
char	O
*	O
)	O
NULL	O
)	O
;	O
return	O
FALSE	O
;	O
}	O
c	long
=	O
read	function
(	O
0	int
,	O
&	O
b	char
,	O
1	int
)	O
;	O
usysdep_end_catch	O
(	O
)	O
;	O
if	O
(	O
c	long
<=	O
0	int
)	O
break	O
;	O
if	O
(	O
fstart	int
&&	O
b	char
==	O
*	O
zCuvar_escape	pointer
&&	O
b	char
!=	O
'\0'	O
)	O
{	O
c	long
=	O
cscu_escape	function
(	O
pbcmd	pointer
,	O
zlocalname	pointer
)	O
;	O
if	O
(	O
c	long
<=	O
0	int
)	O
break	O
;	O
if	O
(	O
*	O
pbcmd	pointer
!=	O
b	char
)	O
{	O
write	function
(	O
1	int
,	O
pbcmd	pointer
,	O
1	int
)	O
;	O
if	O
(	O
*	O
pbcmd	pointer
==	O
bSeof	char
)	O
*	O
pbcmd	pointer
=	O
'.'	O
;	O
if	O
(	O
*	O
pbcmd	pointer
==	O
bStstp	char
)	O
*	O
pbcmd	pointer
=	O
'z'	O
;	O
return	O
TRUE	O
;	O
}	O
}	O
if	O
(	O
!	O
fconn_write	function
(	O
qconn	pointer
,	O
&	O
b	char
,	O
(	O
size_t	long
)	O
1	int
)	O
)	O
return	O
FALSE	O
;	O
fstart	int
=	O
strchr	function
(	O
zCuvar_eol	pointer
,	O
b	char
)	O
!=	O
NULL	O
;	O
}	O
if	O
(	O
c	long
<	O
0	int
)	O
{	O
if	O
(	O
errno	O
!=	O
EINTR	int
)	O
ulog	function
(	O
LOG_ERROR	int
,	O
"read: %s"	pointer
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
else	O
ulog	function
(	O
LOG_ERROR	int
,	O
(	O
const	O
char	O
*	O
)	O
NULL	O
)	O
;	O
return	O
FALSE	O
;	O
}	O
ulog	function
(	O
LOG_ERROR	int
,	O
"End of file on terminal"	pointer
)	O
;	O
return	O
FALSE	O
;	O
}	O
volatile	O
sig_atomic_t	int
fScu_alarm	int
;	O
static	O
RETSIGTYPE	void
uscu_alarm	function
(	O
isig	int
)	O
int	O
isig	int
ATTRIBUTE_UNUSED	O
;	O
{	O
fScu_alarm	int
=	O
TRUE	O
;	O
}	O
static	O
int	O
cscu_escape	function
(	O
pbcmd	pointer
,	O
zlocalname	pointer
)	O
char	O
*	O
pbcmd	pointer
;	O
const	O
char	O
*	O
zlocalname	pointer
;	O
{	O
CATCH_PROTECT	O
int	O
c	long
;	O
write	function
(	O
1	int
,	O
zCuvar_escape	pointer
,	O
1	int
)	O
;	O
fScu_alarm	int
=	O
FALSE	O
;	O
usset_signal	function
(	O
SIGALRM	int
,	O
uscu_alarm	function
,	O
TRUE	O
,	O
(	O
boolean	int
*	O
)	O
NULL	O
)	O
;	O
if	O
(	O
fsysdep_catch	O
(	O
)	O
)	O
{	O
usysdep_start_catch	O
(	O
)	O
;	O
alarm	function
(	O
1	int
)	O
;	O
}	O
c	long
=	O
0	int
;	O
while	O
(	O
TRUE	O
)	O
{	O
if	O
(	O
fScu_alarm	int
)	O
{	O
char	O
b	char
;	O
fScu_alarm	int
=	O
FALSE	O
;	O
b	char
=	O
'['	O
;	O
write	function
(	O
1	int
,	O
&	O
b	char
,	O
1	int
)	O
;	O
write	function
(	O
1	int
,	O
zlocalname	pointer
,	O
strlen	function
(	O
zlocalname	pointer
)	O
)	O
;	O
b	char
=	O
']'	O
;	O
write	function
(	O
1	int
,	O
&	O
b	char
,	O
1	int
)	O
;	O
}	O
if	O
(	O
c	long
<=	O
0	int
)	O
c	long
=	O
read	function
(	O
0	int
,	O
pbcmd	pointer
,	O
1	int
)	O
;	O
if	O
(	O
c	long
>=	O
0	int
||	O
errno	O
!=	O
EINTR	int
)	O
{	O
usysdep_end_catch	O
(	O
)	O
;	O
usset_signal	function
(	O
SIGALRM	int
,	O
SIG_IGN	O
,	O
TRUE	O
,	O
(	O
boolean	int
*	O
)	O
NULL	O
)	O
;	O
alarm	function
(	O
0	int
)	O
;	O
return	O
c	long
;	O
}	O
}	O
}	O
static	O
volatile	O
sig_atomic_t	int
iSsend_sig	int
;	O
static	O
RETSIGTYPE	void
uscu_alarm_kill	function
(	O
isig	int
)	O
int	O
isig	int
ATTRIBUTE_UNUSED	O
;	O
{	O
(	O
void	O
)	O
kill	function
(	O
iSchild	int
,	O
iSsend_sig	int
)	O
;	O
alarm	function
(	O
1	int
)	O
;	O
}	O
boolean	int
fsysdep_cu_copy	function
(	O
fcopy	int
)	O
boolean	int
fcopy	int
;	O
{	O
int	O
ierr	int
;	O
int	O
c	long
;	O
usset_signal	function
(	O
SIGALRM	int
,	O
uscu_alarm_kill	function
,	O
TRUE	O
,	O
(	O
boolean	int
*	O
)	O
NULL	O
)	O
;	O
if	O
(	O
fcopy	int
)	O
iSsend_sig	int
=	O
SIGUSR1	int
;	O
else	O
iSsend_sig	int
=	O
SIGUSR2	int
;	O
uscu_alarm_kill	function
(	O
SIGALRM	int
)	O
;	O
alarm	function
(	O
1	int
)	O
;	O
while	O
(	O
TRUE	O
)	O
{	O
char	O
b	char
;	O
c	long
=	O
read	function
(	O
oSpipe	int
,	O
&	O
b	char
,	O
1	int
)	O
;	O
if	O
(	O
c	long
>	O
0	int
)	O
DEBUG_MESSAGE1	O
(	O
DEBUG_INCOMING	O
,	O
"fsysdep_cu_copy: Got '%d'"	pointer
,	O
b	char
)	O
;	O
if	O
(	O
(	O
c	long
<	O
0	int
&&	O
errno	O
!=	O
EINTR	int
)	O
||	O
c	long
==	O
0	int
||	O
(	O
c	long
>	O
0	int
&&	O
b	char
==	O
(	O
fcopy	int
?	O
CHILD_STARTED	O
:	O
CHILD_STOPPED	O
)	O
)	O
)	O
break	O
;	O
}	O
ierr	int
=	O
errno	O
;	O
usset_signal	function
(	O
SIGALRM	int
,	O
SIG_IGN	O
,	O
TRUE	O
,	O
(	O
boolean	int
*	O
)	O
NULL	O
)	O
;	O
alarm	function
(	O
0	int
)	O
;	O
if	O
(	O
c	long
>	O
0	int
)	O
return	O
TRUE	O
;	O
if	O
(	O
c	long
==	O
0	int
)	O
ulog	function
(	O
LOG_ERROR	int
,	O
"EOF on child pipe"	pointer
)	O
;	O
else	O
ulog	function
(	O
LOG_ERROR	int
,	O
"read: %s"	pointer
,	O
strerror	function
(	O
ierr	int
)	O
)	O
;	O
return	O
FALSE	O
;	O
}	O
boolean	int
fsysdep_cu_finish	function
(	O
)	O
{	O
(	O
void	O
)	O
close	function
(	O
oSpipe	int
)	O
;	O
if	O
(	O
kill	function
(	O
iSchild	int
,	O
SIGTERM	int
)	O
<	O
0	int
)	O
{	O
if	O
(	O
errno	O
!=	O
ESRCH	int
)	O
ulog	function
(	O
LOG_ERROR	int
,	O
"kill: %s"	pointer
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
}	O
usset_signal	function
(	O
SIGALRM	int
,	O
uscu_alarm_kill	function
,	O
TRUE	O
,	O
(	O
boolean	int
*	O
)	O
NULL	O
)	O
;	O
iSsend_sig	int
=	O
SIGKILL	int
;	O
alarm	function
(	O
2	int
)	O
;	O
(	O
void	O
)	O
ixswait	function
(	O
(	O
unsigned	O
long	O
)	O
iSchild	int
,	O
"child"	pointer
)	O
;	O
usset_signal	function
(	O
SIGALRM	int
,	O
SIG_IGN	O
,	O
TRUE	O
,	O
(	O
boolean	int
*	O
)	O
NULL	O
)	O
;	O
alarm	function
(	O
0	int
)	O
;	O
return	O
TRUE	O
;	O
}	O
static	O
volatile	O
sig_atomic_t	int
iSchild_sig	int
;	O
static	O
RETSIGTYPE	void
uscu_child_handler	function
(	O
isig	int
)	O
int	O
isig	int
;	O
{	O
iSchild_sig	int
=	O
isig	int
;	O
}	O
static	O
void	O
uscu_child	function
(	O
qconn	pointer
,	O
opipe	int
)	O
struct	O
sconnection	struct
*	O
qconn	pointer
;	O
int	O
opipe	int
;	O
{	O
CATCH_PROTECT	O
int	O
oport	int
;	O
CATCH_PROTECT	O
boolean	int
fstopped	int
,	O
fgot	int
;	O
CATCH_PROTECT	O
int	O
cwrite	int
;	O
CATCH_PROTECT	O
char	O
abbuf	array
[	O
1024	int
]	O
;	O
fgot	int
=	O
FALSE	O
;	O
if	O
(	O
qconn	pointer
->	O
qport	pointer
==	O
NULL	O
)	O
oport	int
=	O
0	int
;	O
else	O
{	O
switch	O
(	O
qconn	pointer
->	O
qport	pointer
->	O
uuconf_ttype	enum
)	O
{	O
default	O
:	O
ulog	function
(	O
LOG_FATAL	int
,	O
"uscu_child: Can't happen"	pointer
)	O
;	O
oport	int
=	O
-	O
1	int
;	O
break	O
;	O
case	O
UUCONF_PORTTYPE_PIPE	int
:	O
fgot	int
=	O
TRUE	O
;	O
case	O
UUCONF_PORTTYPE_STDIN	int
:	O
oport	int
=	O
(	O
(	O
struct	O
ssysdep_conn	struct
*	O
)	O
qconn	pointer
->	O
psysdep	pointer
)	O
->	O
ord	int
;	O
break	O
;	O
case	O
UUCONF_PORTTYPE_MODEM	int
:	O
case	O
UUCONF_PORTTYPE_DIRECT	int
:	O
case	O
UUCONF_PORTTYPE_TCP	int
:	O
case	O
UUCONF_PORTTYPE_TLI	int
:	O
oport	int
=	O
(	O
(	O
struct	O
ssysdep_conn	struct
*	O
)	O
qconn	pointer
->	O
psysdep	pointer
)	O
->	O
o	int
;	O
break	O
;	O
}	O
}	O
(	O
void	O
)	O
fcntl	function
(	O
oport	int
,	O
F_SETFL	int
,	O
fcntl	function
(	O
oport	int
,	O
F_GETFL	int
,	O
0	int
)	O
&	O
~	O
(	O
O_NDELAY	O
|	O
O_NONBLOCK	int
)	O
)	O
;	O
usset_signal	function
(	O
SIGUSR1	int
,	O
uscu_child_handler	function
,	O
TRUE	O
,	O
(	O
boolean	int
*	O
)	O
NULL	O
)	O
;	O
usset_signal	function
(	O
SIGUSR2	int
,	O
uscu_child_handler	function
,	O
TRUE	O
,	O
(	O
boolean	int
*	O
)	O
NULL	O
)	O
;	O
usset_signal	function
(	O
SIGINT	int
,	O
SIG_IGN	O
,	O
TRUE	O
,	O
(	O
boolean	int
*	O
)	O
NULL	O
)	O
;	O
usset_signal	function
(	O
SIGQUIT	int
,	O
SIG_IGN	O
,	O
TRUE	O
,	O
(	O
boolean	int
*	O
)	O
NULL	O
)	O
;	O
usset_signal	function
(	O
SIGPIPE	int
,	O
SIG_DFL	O
,	O
TRUE	O
,	O
(	O
boolean	int
*	O
)	O
NULL	O
)	O
;	O
usset_signal	function
(	O
SIGTERM	int
,	O
uscu_child_handler	function
,	O
TRUE	O
,	O
(	O
boolean	int
*	O
)	O
NULL	O
)	O
;	O
fstopped	int
=	O
FALSE	O
;	O
iSchild_sig	int
=	O
0	int
;	O
cwrite	int
=	O
0	int
;	O
if	O
(	O
fsysdep_catch	O
(	O
)	O
)	O
{	O
usysdep_start_catch	O
(	O
)	O
;	O
}	O
while	O
(	O
TRUE	O
)	O
{	O
int	O
isig	int
;	O
int	O
c	long
;	O
isig	int
=	O
iSchild_sig	int
;	O
iSchild_sig	int
=	O
0	int
;	O
if	O
(	O
isig	int
!=	O
0	int
)	O
{	O
char	O
b	char
;	O
if	O
(	O
isig	int
==	O
SIGTERM	int
)	O
exit	function
(	O
EXIT_SUCCESS	int
)	O
;	O
if	O
(	O
isig	int
==	O
SIGUSR1	int
)	O
{	O
fstopped	int
=	O
FALSE	O
;	O
b	char
=	O
CHILD_STARTED	O
;	O
}	O
else	O
{	O
fstopped	int
=	O
TRUE	O
;	O
b	char
=	O
CHILD_STOPPED	O
;	O
cwrite	int
=	O
0	int
;	O
}	O
c	long
=	O
write	function
(	O
opipe	int
,	O
&	O
b	char
,	O
1	int
)	O
;	O
if	O
(	O
c	long
<	O
0	int
&&	O
(	O
errno	O
==	O
EAGAIN	int
||	O
errno	O
==	O
EWOULDBLOCK	O
||	O
errno	O
==	O
ENODATA	int
)	O
)	O
c	long
=	O
0	int
;	O
if	O
(	O
c	long
<=	O
0	int
)	O
{	O
(	O
void	O
)	O
kill	function
(	O
getppid	function
(	O
)	O
,	O
SIGHUP	int
)	O
;	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
}	O
if	O
(	O
fstopped	int
)	O
pause	function
(	O
)	O
;	O
else	O
if	O
(	O
cwrite	int
>	O
0	int
)	O
{	O
char	O
*	O
zbuf	pointer
;	O
zbuf	pointer
=	O
abbuf	array
;	O
while	O
(	O
cwrite	int
>	O
0	int
)	O
{	O
c	long
=	O
write	function
(	O
1	int
,	O
zbuf	pointer
,	O
cwrite	int
)	O
;	O
if	O
(	O
c	long
<	O
0	int
&&	O
(	O
errno	O
==	O
EAGAIN	int
||	O
errno	O
==	O
EWOULDBLOCK	O
||	O
errno	O
==	O
ENODATA	int
)	O
)	O
c	long
=	O
0	int
;	O
if	O
(	O
c	long
<	O
0	int
&&	O
errno	O
==	O
EINTR	int
)	O
break	O
;	O
if	O
(	O
c	long
<=	O
0	int
)	O
{	O
(	O
void	O
)	O
kill	function
(	O
getppid	function
(	O
)	O
,	O
SIGHUP	int
)	O
;	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
cwrite	int
-=	O
c	long
;	O
zbuf	pointer
+=	O
c	long
;	O
}	O
}	O
else	O
{	O
errno	O
=	O
0	int
;	O
c	long
=	O
read	function
(	O
oport	int
,	O
abbuf	array
,	O
sizeof	O
abbuf	array
)	O
;	O
if	O
(	O
c	long
<	O
0	int
&&	O
(	O
errno	O
==	O
EAGAIN	int
||	O
errno	O
==	O
EWOULDBLOCK	O
||	O
errno	O
==	O
ENODATA	int
)	O
)	O
c	long
=	O
0	int
;	O
if	O
(	O
(	O
c	long
==	O
0	int
&&	O
fgot	int
)	O
||	O
(	O
c	long
<	O
0	int
&&	O
errno	O
!=	O
EINTR	int
)	O
)	O
{	O
(	O
void	O
)	O
kill	function
(	O
getppid	function
(	O
)	O
,	O
SIGHUP	int
)	O
;	O
exit	function
(	O
EXIT_SUCCESS	int
)	O
;	O
}	O
if	O
(	O
c	long
>	O
0	int
)	O
{	O
fgot	int
=	O
TRUE	O
;	O
cwrite	int
=	O
c	long
;	O
}	O
}	O
}	O
}	O
static	O
boolean	int
fSterm	int
;	O
static	O
boolean	int
fSlocalecho	int
;	O
static	O
sterminal	struct
sSterm_orig	struct
;	O
static	O
sterminal	struct
sSterm_new	struct
;	O
static	O
boolean	int
fStstp_ignored	int
;	O
boolean	int
fsysdep_terminal_raw	function
(	O
flocalecho	int
)	O
boolean	int
flocalecho	int
;	O
{	O
fSlocalecho	int
=	O
flocalecho	int
;	O
bSeof	char
=	O
'\004'	O
;	O
bStstp	char
=	O
'\032'	O
;	O
if	O
(	O
!	O
fgetterminfo	O
(	O
0	int
,	O
&	O
sSterm_orig	struct
)	O
)	O
{	O
fSterm	int
=	O
FALSE	O
;	O
return	O
TRUE	O
;	O
}	O
fSterm	int
=	O
TRUE	O
;	O
sSterm_new	struct
=	O
sSterm_orig	struct
;	O
bSeof	char
=	O
sSterm_new	struct
.	O
c_cc	array
[	O
VEOF	int
]	O
;	O
bStstp	char
=	O
sSterm_new	struct
.	O
c_cc	array
[	O
VSUSP	int
]	O
;	O
if	O
(	O
!	O
flocalecho	int
)	O
sSterm_new	struct
.	O
c_lflag	int
&=	O
~	O
(	O
ICANON	int
|	O
IEXTEN	int
|	O
ISIG	int
|	O
ECHO	int
|	O
ECHOE	int
|	O
ECHOK	int
|	O
ECHONL	int
)	O
;	O
else	O
sSterm_new	struct
.	O
c_lflag	int
&=	O
~	O
(	O
ICANON	int
|	O
IEXTEN	int
|	O
ISIG	int
)	O
;	O
sSterm_new	struct
.	O
c_iflag	int
&=	O
~	O
(	O
INLCR	int
|	O
IGNCR	int
|	O
ICRNL	int
|	O
IXON	int
|	O
IXOFF	int
)	O
;	O
sSterm_new	struct
.	O
c_oflag	int
&=	O
~	O
(	O
OPOST	int
)	O
;	O
sSterm_new	struct
.	O
c_cc	array
[	O
VMIN	int
]	O
=	O
1	int
;	O
sSterm_new	struct
.	O
c_cc	array
[	O
VTIME	int
]	O
=	O
0	int
;	O
if	O
(	O
!	O
fsetterminfo	O
(	O
0	int
,	O
&	O
sSterm_new	struct
)	O
)	O
{	O
ulog	function
(	O
LOG_ERROR	int
,	O
"Can't set terminal settings: %s"	pointer
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
return	O
FALSE	O
;	O
}	O
return	O
TRUE	O
;	O
}	O
boolean	int
fsysdep_terminal_restore	function
(	O
)	O
{	O
if	O
(	O
!	O
fSterm	int
)	O
return	O
TRUE	O
;	O
if	O
(	O
!	O
fsetterminfo	O
(	O
0	int
,	O
&	O
sSterm_orig	struct
)	O
)	O
{	O
ulog	function
(	O
LOG_ERROR	int
,	O
"Can't restore terminal: %s"	pointer
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
return	O
FALSE	O
;	O
}	O
return	O
TRUE	O
;	O
}	O
char	O
*	O
zsysdep_terminal_line	function
(	O
zprompt	pointer
)	O
const	O
char	O
*	O
zprompt	pointer
;	O
{	O
CATCH_PROTECT	O
size_t	long
cbuf	long
=	O
0	int
;	O
CATCH_PROTECT	O
char	O
*	O
zbuf	pointer
=	O
NULL	O
;	O
CATCH_PROTECT	O
size_t	long
cgot	long
=	O
0	int
;	O
if	O
(	O
zprompt	pointer
!=	O
NULL	O
&&	O
*	O
zprompt	pointer
!=	O
'\0'	O
)	O
(	O
void	O
)	O
write	function
(	O
1	int
,	O
zprompt	pointer
,	O
strlen	function
(	O
zprompt	pointer
)	O
)	O
;	O
afSignal	array
[	O
INDEXSIG_SIGINT	O
]	O
=	O
0	int
;	O
afSignal	array
[	O
INDEXSIG_SIGQUIT	O
]	O
=	O
0	int
;	O
if	O
(	O
!	O
fsysdep_terminal_restore	function
(	O
)	O
)	O
return	O
NULL	O
;	O
if	O
(	O
fsysdep_catch	O
(	O
)	O
)	O
{	O
usysdep_start_catch	O
(	O
)	O
;	O
cbuf	long
=	O
0	int
;	O
zbuf	pointer
=	O
NULL	O
;	O
cgot	long
=	O
0	int
;	O
}	O
while	O
(	O
TRUE	O
)	O
{	O
char	O
b	char
;	O
int	O
c	long
;	O
if	O
(	O
afSignal	array
[	O
INDEXSIG_SIGINT	O
]	O
||	O
afSignal	array
[	O
INDEXSIG_SIGQUIT	O
]	O
)	O
{	O
usysdep_end_catch	O
(	O
)	O
;	O
ulog	function
(	O
LOG_ERROR	int
,	O
(	O
const	O
char	O
*	O
)	O
NULL	O
)	O
;	O
cgot	long
=	O
0	int
;	O
break	O
;	O
}	O
c	long
=	O
read	function
(	O
0	int
,	O
&	O
b	char
,	O
1	int
)	O
;	O
if	O
(	O
c	long
<	O
0	int
)	O
{	O
if	O
(	O
errno	O
==	O
EINTR	int
)	O
continue	O
;	O
usysdep_end_catch	O
(	O
)	O
;	O
ulog	function
(	O
LOG_ERROR	int
,	O
"read: %s"	pointer
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
(	O
void	O
)	O
fsysdep_terminal_raw	function
(	O
fSlocalecho	int
)	O
;	O
return	O
NULL	O
;	O
}	O
if	O
(	O
c	long
==	O
0	int
)	O
{	O
usysdep_end_catch	O
(	O
)	O
;	O
ulog	function
(	O
LOG_ERROR	int
,	O
"EOF on terminal"	pointer
)	O
;	O
(	O
void	O
)	O
fsysdep_terminal_raw	function
(	O
fSlocalecho	int
)	O
;	O
return	O
NULL	O
;	O
}	O
if	O
(	O
cgot	long
>=	O
cbuf	long
)	O
{	O
char	O
*	O
znew	pointer
;	O
cbuf	long
+=	O
64	int
;	O
znew	pointer
=	O
zbufalc	function
(	O
cbuf	long
)	O
;	O
if	O
(	O
zbuf	pointer
!=	O
NULL	O
)	O
{	O
memcpy	function
(	O
znew	pointer
,	O
zbuf	pointer
,	O
cgot	long
)	O
;	O
ubuffree	function
(	O
zbuf	pointer
)	O
;	O
}	O
zbuf	pointer
=	O
znew	pointer
;	O
}	O
zbuf	pointer
[	O
cgot	long
]	O
=	O
b	char
;	O
++	O
cgot	long
;	O
if	O
(	O
b	char
==	O
'\n'	O
)	O
{	O
usysdep_end_catch	O
(	O
)	O
;	O
break	O
;	O
}	O
}	O
if	O
(	O
cgot	long
>=	O
cbuf	long
)	O
{	O
char	O
*	O
znew	pointer
;	O
++	O
cbuf	long
;	O
znew	pointer
=	O
zbufalc	function
(	O
cbuf	long
)	O
;	O
if	O
(	O
zbuf	pointer
!=	O
NULL	O
)	O
{	O
memcpy	function
(	O
znew	pointer
,	O
zbuf	pointer
,	O
cgot	long
)	O
;	O
ubuffree	function
(	O
zbuf	pointer
)	O
;	O
}	O
zbuf	pointer
=	O
znew	pointer
;	O
}	O
zbuf	pointer
[	O
cgot	long
]	O
=	O
'\0'	O
;	O
if	O
(	O
!	O
fsysdep_terminal_raw	function
(	O
fSlocalecho	int
)	O
)	O
return	O
NULL	O
;	O
return	O
zbuf	pointer
;	O
}	O
boolean	int
fsysdep_terminal_puts	function
(	O
zline	pointer
)	O
const	O
char	O
*	O
zline	pointer
;	O
{	O
char	O
*	O
zalc	pointer
,	O
*	O
zprint	pointer
;	O
size_t	long
clen	long
;	O
if	O
(	O
zline	pointer
==	O
NULL	O
)	O
{	O
zalc	pointer
=	O
zbufalc	function
(	O
2	int
)	O
;	O
clen	long
=	O
0	int
;	O
}	O
else	O
{	O
clen	long
=	O
strlen	function
(	O
zline	pointer
)	O
;	O
zalc	pointer
=	O
zbufalc	function
(	O
clen	long
+	O
2	int
)	O
;	O
memcpy	function
(	O
zalc	pointer
,	O
zline	pointer
,	O
clen	long
)	O
;	O
}	O
if	O
(	O
fSterm	int
)	O
{	O
zalc	pointer
[	O
clen	long
]	O
=	O
'\r'	O
;	O
++	O
clen	long
;	O
}	O
zalc	pointer
[	O
clen	long
]	O
=	O
'\n'	O
;	O
++	O
clen	long
;	O
zprint	pointer
=	O
zalc	pointer
;	O
while	O
(	O
clen	long
>	O
0	int
)	O
{	O
int	O
c	long
;	O
c	long
=	O
write	function
(	O
1	int
,	O
zprint	pointer
,	O
clen	long
)	O
;	O
if	O
(	O
c	long
<=	O
0	int
)	O
{	O
ubuffree	function
(	O
zalc	pointer
)	O
;	O
ulog	function
(	O
LOG_ERROR	int
,	O
"write: %s"	pointer
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
return	O
FALSE	O
;	O
}	O
clen	long
-=	O
c	long
;	O
zprint	pointer
+=	O
c	long
;	O
}	O
ubuffree	function
(	O
zalc	pointer
)	O
;	O
return	O
TRUE	O
;	O
}	O
boolean	int
fsysdep_terminal_signals	function
(	O
faccept	int
)	O
boolean	int
faccept	int
;	O
{	O
if	O
(	O
faccept	int
)	O
sSterm_new	struct
.	O
c_lflag	int
|=	O
ISIG	int
;	O
else	O
sSterm_new	struct
.	O
c_lflag	int
&=	O
~	O
ISIG	int
;	O
if	O
(	O
faccept	int
)	O
usset_signal	function
(	O
SIGTSTP	int
,	O
SIG_IGN	O
,	O
FALSE	O
,	O
&	O
fStstp_ignored	int
)	O
;	O
else	O
if	O
(	O
!	O
fStstp_ignored	int
)	O
usset_signal	function
(	O
SIGTSTP	int
,	O
SIG_DFL	O
,	O
TRUE	O
,	O
(	O
boolean	int
*	O
)	O
NULL	O
)	O
;	O
if	O
(	O
!	O
fsetterminfo	O
(	O
0	int
,	O
&	O
sSterm_new	struct
)	O
)	O
{	O
ulog	function
(	O
LOG_ERROR	int
,	O
"Can't set terminal: %s"	pointer
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
return	O
FALSE	O
;	O
}	O
return	O
TRUE	O
;	O
}	O
boolean	int
fsysdep_shell	function
(	O
qconn	pointer
,	O
zcmd	pointer
,	O
tcmd	enum
)	O
struct	O
sconnection	struct
*	O
qconn	pointer
;	O
const	O
char	O
*	O
zcmd	pointer
;	O
enum	O
tshell_cmd	enum
tcmd	enum
;	O
{	O
const	O
char	O
*	O
azargs	array
[	O
4	int
]	O
;	O
int	O
oread	int
,	O
owrite	int
;	O
int	O
aidescs	pointer
[	O
3	int
]	O
;	O
pid_t	int
ipid	int
;	O
if	O
(	O
tcmd	enum
!=	O
SHELL_NORMAL	int
)	O
azargs	array
[	O
0	int
]	O
=	O
"/bin/sh"	pointer
;	O
else	O
{	O
azargs	array
[	O
0	int
]	O
=	O
getenv	function
(	O
"SHELL"	pointer
)	O
;	O
if	O
(	O
azargs	array
[	O
0	int
]	O
==	O
NULL	O
)	O
azargs	array
[	O
0	int
]	O
=	O
"/bin/sh"	pointer
;	O
}	O
if	O
(	O
zcmd	pointer
==	O
NULL	O
||	O
*	O
zcmd	pointer
==	O
'\0'	O
)	O
azargs	array
[	O
1	int
]	O
=	O
NULL	O
;	O
else	O
{	O
azargs	array
[	O
1	int
]	O
=	O
"-c"	pointer
;	O
azargs	array
[	O
2	int
]	O
=	O
zcmd	pointer
;	O
azargs	array
[	O
3	int
]	O
=	O
NULL	O
;	O
}	O
if	O
(	O
qconn	pointer
->	O
qport	pointer
==	O
NULL	O
)	O
{	O
oread	int
=	O
0	int
;	O
owrite	int
=	O
1	int
;	O
}	O
else	O
{	O
switch	O
(	O
qconn	pointer
->	O
qport	pointer
->	O
uuconf_ttype	enum
)	O
{	O
default	O
:	O
oread	int
=	O
owrite	int
=	O
-	O
1	int
;	O
break	O
;	O
case	O
UUCONF_PORTTYPE_STDIN	int
:	O
case	O
UUCONF_PORTTYPE_PIPE	int
:	O
oread	int
=	O
(	O
(	O
struct	O
ssysdep_conn	struct
*	O
)	O
qconn	pointer
->	O
psysdep	pointer
)	O
->	O
ord	int
;	O
owrite	int
=	O
(	O
(	O
struct	O
ssysdep_conn	struct
*	O
)	O
qconn	pointer
->	O
psysdep	pointer
)	O
->	O
owr	int
;	O
break	O
;	O
case	O
UUCONF_PORTTYPE_MODEM	int
:	O
case	O
UUCONF_PORTTYPE_DIRECT	int
:	O
case	O
UUCONF_PORTTYPE_TCP	int
:	O
case	O
UUCONF_PORTTYPE_TLI	int
:	O
oread	int
=	O
owrite	int
=	O
(	O
(	O
struct	O
ssysdep_conn	struct
*	O
)	O
qconn	pointer
->	O
psysdep	pointer
)	O
->	O
o	int
;	O
break	O
;	O
}	O
}	O
aidescs	pointer
[	O
0	int
]	O
=	O
0	int
;	O
aidescs	pointer
[	O
1	int
]	O
=	O
1	int
;	O
aidescs	pointer
[	O
2	int
]	O
=	O
2	int
;	O
if	O
(	O
tcmd	enum
==	O
SHELL_STDIN_FROM_PORT	int
||	O
tcmd	enum
==	O
SHELL_STDIO_ON_PORT	int
)	O
aidescs	pointer
[	O
0	int
]	O
=	O
oread	int
;	O
if	O
(	O
tcmd	enum
==	O
SHELL_STDOUT_TO_PORT	int
||	O
tcmd	enum
==	O
SHELL_STDIO_ON_PORT	int
)	O
aidescs	pointer
[	O
1	int
]	O
=	O
owrite	int
;	O
ipid	int
=	O
ixsspawn	function
(	O
azargs	array
,	O
aidescs	pointer
,	O
FALSE	O
,	O
TRUE	O
,	O
(	O
const	O
char	O
*	O
)	O
NULL	O
,	O
FALSE	O
,	O
FALSE	O
,	O
(	O
const	O
char	O
*	O
)	O
NULL	O
,	O
(	O
const	O
char	O
*	O
)	O
NULL	O
,	O
(	O
const	O
char	O
*	O
)	O
NULL	O
)	O
;	O
if	O
(	O
ipid	int
<	O
0	int
)	O
{	O
ulog	function
(	O
LOG_ERROR	int
,	O
"ixsspawn (/bin/sh): %s"	pointer
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
return	O
FALSE	O
;	O
}	O
return	O
ixswait	function
(	O
(	O
unsigned	O
long	O
)	O
ipid	int
,	O
"shell"	pointer
)	O
==	O
0	int
;	O
}	O
boolean	int
fsysdep_chdir	function
(	O
zdir	pointer
)	O
const	O
char	O
*	O
zdir	pointer
;	O
{	O
if	O
(	O
zdir	pointer
==	O
NULL	O
||	O
*	O
zdir	pointer
==	O
'\0'	O
)	O
{	O
zdir	pointer
=	O
getenv	function
(	O
"HOME"	pointer
)	O
;	O
if	O
(	O
zdir	pointer
==	O
NULL	O
)	O
{	O
ulog	function
(	O
LOG_ERROR	int
,	O
"HOME not defined"	pointer
)	O
;	O
return	O
FALSE	O
;	O
}	O
}	O
if	O
(	O
chdir	function
(	O
zdir	pointer
)	O
<	O
0	int
)	O
{	O
ulog	function
(	O
LOG_ERROR	int
,	O
"chdir (%s): %s"	pointer
,	O
zdir	pointer
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
return	O
FALSE	O
;	O
}	O
return	O
TRUE	O
;	O
}	O
boolean	int
fsysdep_suspend	function
(	O
)	O
{	O
return	O
kill	function
(	O
getpid	function
(	O
)	O
,	O
SIGTSTP	int
)	O
==	O
0	int
;	O
}	O
