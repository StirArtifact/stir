struct	O
bucket_header	struct
{	O
union	O
mu_opool_bucket	union
*	O
next	pointer
;	O
char	O
*	O
buf	array
;	O
size_t	long
level	int
;	O
size_t	long
size	long
;	O
}	O
;	O
union	O
mu_opool_bucket	union
{	O
struct	O
bucket_header	struct
hdr	struct
;	O
long	O
double	O
align_double	long double
;	O
uintmax_t	long
align_uintmax	long
;	O
void	O
*	O
align_ptr	pointer
;	O
}	O
;	O
struct	O
_mu_opool	struct
{	O
int	O
flags	int
;	O
size_t	long
bucket_size	long
;	O
size_t	long
itr_count	long
;	O
mu_nonlocal_jmp_t	struct
*	O
jmp	pointer
;	O
union	O
mu_opool_bucket	union
*	O
bkt_head	pointer
,	O
*	O
bkt_tail	pointer
;	O
union	O
mu_opool_bucket	union
*	O
bkt_fini	pointer
;	O
}	O
;	O
static	O
union	O
mu_opool_bucket	union
*	O
alloc_bucket	function
(	O
struct	O
_mu_opool	struct
*	O
opool	pointer
,	O
size_t	long
size	long
)	O
{	O
union	O
mu_opool_bucket	union
*	O
p	pointer
=	O
malloc	function
(	O
sizeof	O
(	O
*	O
p	pointer
)	O
+	O
size	long
)	O
;	O
if	O
(	O
!	O
p	pointer
)	O
{	O
if	O
(	O
opool	pointer
->	O
flags	int
&	O
MU_OPOOL_ENOMEMABRT	int
)	O
mu_alloc_die	function
(	O
)	O
;	O
if	O
(	O
opool	pointer
->	O
jmp	pointer
)	O
longjmp	function
(	O
opool	pointer
->	O
jmp	pointer
->	O
buf	array
,	O
ENOMEM	int
)	O
;	O
}	O
else	O
{	O
p	pointer
->	O
hdr	struct
.	O
buf	array
=	O
(	O
char	O
*	O
)	O
(	O
p	pointer
+	O
1	int
)	O
;	O
p	pointer
->	O
hdr	struct
.	O
level	int
=	O
0	int
;	O
p	pointer
->	O
hdr	struct
.	O
size	long
=	O
size	long
;	O
p	pointer
->	O
hdr	struct
.	O
next	pointer
=	O
NULL	O
;	O
}	O
return	O
p	pointer
;	O
}	O
static	O
int	O
alloc_pool	function
(	O
mu_opool_t	pointer
opool	pointer
,	O
size_t	long
size	long
)	O
{	O
union	O
mu_opool_bucket	union
*	O
p	pointer
=	O
alloc_bucket	function
(	O
opool	pointer
,	O
opool	pointer
->	O
bucket_size	long
)	O
;	O
if	O
(	O
!	O
p	pointer
)	O
return	O
ENOMEM	int
;	O
if	O
(	O
opool	pointer
->	O
bkt_tail	pointer
)	O
opool	pointer
->	O
bkt_tail	pointer
->	O
hdr	struct
.	O
next	pointer
=	O
p	pointer
;	O
else	O
opool	pointer
->	O
bkt_head	pointer
=	O
p	pointer
;	O
opool	pointer
->	O
bkt_tail	pointer
=	O
p	pointer
;	O
return	O
0	int
;	O
}	O
static	O
int	O
copy_chars	function
(	O
mu_opool_t	pointer
opool	pointer
,	O
const	O
char	O
*	O
str	pointer
,	O
size_t	long
n	long
,	O
size_t	long
*	O
psize	pointer
)	O
{	O
size_t	long
rest	long
;	O
if	O
(	O
!	O
opool	pointer
->	O
bkt_head	pointer
||	O
opool	pointer
->	O
bkt_tail	pointer
->	O
hdr	struct
.	O
level	int
==	O
opool	pointer
->	O
bkt_tail	pointer
->	O
hdr	struct
.	O
size	long
)	O
if	O
(	O
alloc_pool	function
(	O
opool	pointer
,	O
opool	pointer
->	O
bucket_size	long
)	O
)	O
return	O
ENOMEM	int
;	O
rest	long
=	O
opool	pointer
->	O
bkt_tail	pointer
->	O
hdr	struct
.	O
size	long
-	O
opool	pointer
->	O
bkt_tail	pointer
->	O
hdr	struct
.	O
level	int
;	O
if	O
(	O
n	long
>	O
rest	long
)	O
n	long
=	O
rest	long
;	O
memcpy	function
(	O
opool	pointer
->	O
bkt_tail	pointer
->	O
hdr	struct
.	O
buf	array
+	O
opool	pointer
->	O
bkt_tail	pointer
->	O
hdr	struct
.	O
level	int
,	O
str	pointer
,	O
n	long
)	O
;	O
opool	pointer
->	O
bkt_tail	pointer
->	O
hdr	struct
.	O
level	int
+=	O
n	long
;	O
*	O
psize	pointer
=	O
n	long
;	O
return	O
0	int
;	O
}	O
int	O
mu_opool_create	function
(	O
mu_opool_t	pointer
*	O
pret	pointer
,	O
int	O
flags	int
)	O
{	O
struct	O
_mu_opool	struct
*	O
x	pointer
=	O
malloc	function
(	O
sizeof	O
(	O
x	pointer
[	O
0	int
]	O
)	O
)	O
;	O
if	O
(	O
!	O
x	pointer
)	O
{	O
if	O
(	O
flags	int
&	O
MU_OPOOL_ENOMEMABRT	int
)	O
mu_alloc_die	function
(	O
)	O
;	O
return	O
ENOMEM	int
;	O
}	O
x	pointer
->	O
flags	int
=	O
flags	int
;	O
x	pointer
->	O
bucket_size	long
=	O
MU_OPOOL_BUCKET_SIZE	int
;	O
x	pointer
->	O
itr_count	long
=	O
0	int
;	O
x	pointer
->	O
bkt_head	pointer
=	O
x	pointer
->	O
bkt_tail	pointer
=	O
x	pointer
->	O
bkt_fini	pointer
=	O
NULL	O
;	O
x	pointer
->	O
jmp	pointer
=	O
NULL	O
;	O
*	O
pret	pointer
=	O
x	pointer
;	O
return	O
0	int
;	O
}	O
void	O
mu_opool_setjmp	function
(	O
mu_opool_t	pointer
opool	pointer
,	O
mu_nonlocal_jmp_t	struct
*	O
jmp	pointer
)	O
{	O
if	O
(	O
jmp	pointer
)	O
{	O
jmp	pointer
->	O
next	pointer
=	O
opool	pointer
->	O
jmp	pointer
;	O
opool	pointer
->	O
jmp	pointer
=	O
jmp	pointer
;	O
}	O
else	O
mu_opool_clrjmp	function
(	O
opool	pointer
)	O
;	O
}	O
void	O
mu_opool_clrjmp	function
(	O
mu_opool_t	pointer
opool	pointer
)	O
{	O
if	O
(	O
opool	pointer
->	O
jmp	pointer
)	O
opool	pointer
->	O
jmp	pointer
=	O
opool	pointer
->	O
jmp	pointer
->	O
next	pointer
;	O
}	O
int	O
mu_opool_set_bucket_size	function
(	O
mu_opool_t	pointer
opool	pointer
,	O
size_t	long
size	long
)	O
{	O
if	O
(	O
!	O
opool	pointer
)	O
return	O
EINVAL	int
;	O
opool	pointer
->	O
bucket_size	long
=	O
size	long
;	O
return	O
0	int
;	O
}	O
int	O
mu_opool_get_bucket_size	function
(	O
mu_opool_t	pointer
opool	pointer
,	O
size_t	long
*	O
psize	pointer
)	O
{	O
if	O
(	O
!	O
opool	pointer
||	O
!	O
psize	pointer
)	O
return	O
EINVAL	int
;	O
*	O
psize	pointer
=	O
opool	pointer
->	O
bucket_size	long
;	O
return	O
0	int
;	O
}	O
void	O
mu_opool_clear	function
(	O
mu_opool_t	pointer
opool	pointer
)	O
{	O
if	O
(	O
!	O
opool	pointer
)	O
return	O
;	O
if	O
(	O
opool	pointer
->	O
bkt_tail	pointer
)	O
{	O
opool	pointer
->	O
bkt_tail	pointer
->	O
hdr	struct
.	O
next	pointer
=	O
opool	pointer
->	O
bkt_fini	pointer
;	O
opool	pointer
->	O
bkt_fini	pointer
=	O
opool	pointer
->	O
bkt_head	pointer
;	O
opool	pointer
->	O
bkt_head	pointer
=	O
opool	pointer
->	O
bkt_tail	pointer
=	O
NULL	O
;	O
}	O
}	O
void	O
mu_opool_less	function
(	O
mu_opool_t	pointer
opool	pointer
,	O
size_t	long
sz	long
)	O
{	O
union	O
mu_opool_bucket	union
*	O
p	pointer
;	O
size_t	long
total	long
=	O
0	int
;	O
if	O
(	O
!	O
opool	pointer
)	O
return	O
;	O
for	O
(	O
p	pointer
=	O
opool	pointer
->	O
bkt_head	pointer
;	O
p	pointer
;	O
p	pointer
=	O
p	pointer
->	O
hdr	struct
.	O
next	pointer
)	O
{	O
if	O
(	O
total	long
+	O
p	pointer
->	O
hdr	struct
.	O
level	int
>=	O
sz	long
)	O
{	O
union	O
mu_opool_bucket	union
*	O
t	pointer
;	O
p	pointer
->	O
hdr	struct
.	O
level	int
=	O
sz	long
-	O
total	long
;	O
t	pointer
=	O
p	pointer
->	O
hdr	struct
.	O
next	pointer
;	O
p	pointer
->	O
hdr	struct
.	O
next	pointer
=	O
NULL	O
;	O
while	O
(	O
t	pointer
)	O
{	O
union	O
mu_opool_bucket	union
*	O
next	pointer
=	O
t	pointer
->	O
hdr	struct
.	O
next	pointer
;	O
free	function
(	O
t	pointer
)	O
;	O
t	pointer
=	O
next	pointer
;	O
}	O
break	O
;	O
}	O
total	long
+=	O
p	pointer
->	O
hdr	struct
.	O
level	int
;	O
}	O
}	O
void	O
mu_opool_destroy	function
(	O
mu_opool_t	pointer
*	O
popool	pointer
)	O
{	O
union	O
mu_opool_bucket	union
*	O
p	pointer
;	O
if	O
(	O
popool	pointer
&&	O
*	O
popool	pointer
)	O
{	O
mu_opool_t	pointer
opool	pointer
=	O
*	O
popool	pointer
;	O
mu_opool_clear	function
(	O
opool	pointer
)	O
;	O
for	O
(	O
p	pointer
=	O
opool	pointer
->	O
bkt_fini	pointer
;	O
p	pointer
;	O
)	O
{	O
union	O
mu_opool_bucket	union
*	O
next	pointer
=	O
p	pointer
->	O
hdr	struct
.	O
next	pointer
;	O
free	function
(	O
p	pointer
)	O
;	O
p	pointer
=	O
next	pointer
;	O
}	O
free	function
(	O
opool	pointer
)	O
;	O
*	O
popool	pointer
=	O
NULL	O
;	O
}	O
}	O
int	O
mu_opool_alloc	function
(	O
mu_opool_t	pointer
opool	pointer
,	O
size_t	long
size	long
)	O
{	O
while	O
(	O
size	long
)	O
{	O
size_t	long
rest	long
;	O
if	O
(	O
!	O
opool	pointer
->	O
bkt_head	pointer
||	O
opool	pointer
->	O
bkt_tail	pointer
->	O
hdr	struct
.	O
level	int
==	O
opool	pointer
->	O
bkt_tail	pointer
->	O
hdr	struct
.	O
size	long
)	O
if	O
(	O
alloc_pool	function
(	O
opool	pointer
,	O
opool	pointer
->	O
bucket_size	long
)	O
)	O
return	O
ENOMEM	int
;	O
rest	long
=	O
opool	pointer
->	O
bkt_tail	pointer
->	O
hdr	struct
.	O
size	long
-	O
opool	pointer
->	O
bkt_tail	pointer
->	O
hdr	struct
.	O
level	int
;	O
if	O
(	O
size	long
<	O
rest	long
)	O
rest	long
=	O
size	long
;	O
opool	pointer
->	O
bkt_tail	pointer
->	O
hdr	struct
.	O
level	int
+=	O
rest	long
;	O
size	long
-=	O
rest	long
;	O
}	O
return	O
0	int
;	O
}	O
int	O
mu_opool_append	function
(	O
mu_opool_t	pointer
opool	pointer
,	O
const	O
void	O
*	O
str	pointer
,	O
size_t	long
n	long
)	O
{	O
const	O
char	O
*	O
ptr	pointer
=	O
str	pointer
;	O
while	O
(	O
n	long
)	O
{	O
size_t	long
s	pointer
;	O
if	O
(	O
copy_chars	function
(	O
opool	pointer
,	O
ptr	pointer
,	O
n	long
,	O
&	O
s	pointer
)	O
)	O
return	O
ENOMEM	int
;	O
ptr	pointer
+=	O
s	pointer
;	O
n	long
-=	O
s	pointer
;	O
}	O
return	O
0	int
;	O
}	O
int	O
mu_opool_append_char	function
(	O
mu_opool_t	pointer
opool	pointer
,	O
char	O
c	char
)	O
{	O
return	O
mu_opool_append	function
(	O
opool	pointer
,	O
&	O
c	char
,	O
1	int
)	O
;	O
}	O
int	O
mu_opool_appendz	function
(	O
mu_opool_t	pointer
opool	pointer
,	O
const	O
char	O
*	O
str	pointer
)	O
{	O
return	O
mu_opool_append	function
(	O
opool	pointer
,	O
str	pointer
,	O
strlen	function
(	O
str	pointer
)	O
)	O
;	O
}	O
size_t	long
mu_opool_size	function
(	O
mu_opool_t	pointer
opool	pointer
)	O
{	O
size_t	long
size	long
=	O
0	int
;	O
union	O
mu_opool_bucket	union
*	O
p	pointer
;	O
for	O
(	O
p	pointer
=	O
opool	pointer
->	O
bkt_head	pointer
;	O
p	pointer
;	O
p	pointer
=	O
p	pointer
->	O
hdr	struct
.	O
next	pointer
)	O
size	long
+=	O
p	pointer
->	O
hdr	struct
.	O
level	int
;	O
return	O
size	long
;	O
}	O
size_t	long
mu_opool_copy	function
(	O
mu_opool_t	pointer
opool	pointer
,	O
void	O
*	O
buf	array
,	O
size_t	long
size	long
)	O
{	O
char	O
*	O
cp	pointer
=	O
buf	array
;	O
size_t	long
total	long
=	O
0	int
;	O
union	O
mu_opool_bucket	union
*	O
p	pointer
;	O
for	O
(	O
p	pointer
=	O
opool	pointer
->	O
bkt_head	pointer
;	O
p	pointer
&&	O
total	long
<	O
size	long
;	O
p	pointer
=	O
p	pointer
->	O
hdr	struct
.	O
next	pointer
)	O
{	O
size_t	long
cpsize	long
=	O
size	long
-	O
total	long
;	O
if	O
(	O
cpsize	long
>	O
p	pointer
->	O
hdr	struct
.	O
level	int
)	O
cpsize	long
=	O
p	pointer
->	O
hdr	struct
.	O
level	int
;	O
memcpy	function
(	O
cp	pointer
,	O
p	pointer
->	O
hdr	struct
.	O
buf	array
,	O
cpsize	long
)	O
;	O
cp	pointer
+=	O
cpsize	long
;	O
total	long
+=	O
cpsize	long
;	O
}	O
return	O
total	long
;	O
}	O
int	O
mu_opool_coalesce	function
(	O
mu_opool_t	pointer
opool	pointer
,	O
size_t	long
*	O
psize	pointer
)	O
{	O
size_t	long
size	long
;	O
if	O
(	O
opool	pointer
->	O
itr_count	long
)	O
return	O
MU_ERR_FAILURE	O
;	O
if	O
(	O
opool	pointer
->	O
bkt_head	pointer
&&	O
opool	pointer
->	O
bkt_head	pointer
->	O
hdr	struct
.	O
next	pointer
==	O
NULL	O
)	O
size	long
=	O
opool	pointer
->	O
bkt_head	pointer
->	O
hdr	struct
.	O
level	int
;	O
else	O
{	O
union	O
mu_opool_bucket	union
*	O
bucket	pointer
;	O
union	O
mu_opool_bucket	union
*	O
p	pointer
;	O
size	long
=	O
mu_opool_size	function
(	O
opool	pointer
)	O
;	O
bucket	pointer
=	O
alloc_bucket	function
(	O
opool	pointer
,	O
size	long
)	O
;	O
if	O
(	O
!	O
bucket	pointer
)	O
return	O
ENOMEM	int
;	O
for	O
(	O
p	pointer
=	O
opool	pointer
->	O
bkt_head	pointer
;	O
p	pointer
;	O
)	O
{	O
union	O
mu_opool_bucket	union
*	O
next	pointer
=	O
p	pointer
->	O
hdr	struct
.	O
next	pointer
;	O
memcpy	function
(	O
bucket	pointer
->	O
hdr	struct
.	O
buf	array
+	O
bucket	pointer
->	O
hdr	struct
.	O
level	int
,	O
p	pointer
->	O
hdr	struct
.	O
buf	array
,	O
p	pointer
->	O
hdr	struct
.	O
level	int
)	O
;	O
bucket	pointer
->	O
hdr	struct
.	O
level	int
+=	O
p	pointer
->	O
hdr	struct
.	O
level	int
;	O
free	function
(	O
p	pointer
)	O
;	O
p	pointer
=	O
next	pointer
;	O
}	O
opool	pointer
->	O
bkt_head	pointer
=	O
opool	pointer
->	O
bkt_tail	pointer
=	O
bucket	pointer
;	O
}	O
if	O
(	O
psize	pointer
)	O
*	O
psize	pointer
=	O
size	long
;	O
return	O
0	int
;	O
}	O
void	O
*	O
mu_opool_head	function
(	O
mu_opool_t	pointer
opool	pointer
,	O
size_t	long
*	O
psize	pointer
)	O
{	O
if	O
(	O
psize	pointer
)	O
*	O
psize	pointer
=	O
opool	pointer
->	O
bkt_head	pointer
?	O
opool	pointer
->	O
bkt_head	pointer
->	O
hdr	struct
.	O
level	int
:	O
0	int
;	O
return	O
opool	pointer
->	O
bkt_head	pointer
?	O
opool	pointer
->	O
bkt_head	pointer
->	O
hdr	struct
.	O
buf	array
:	O
NULL	O
;	O
}	O
void	O
*	O
mu_opool_finish	function
(	O
mu_opool_t	pointer
opool	pointer
,	O
size_t	long
*	O
psize	pointer
)	O
{	O
if	O
(	O
mu_opool_coalesce	function
(	O
opool	pointer
,	O
psize	pointer
)	O
)	O
return	O
NULL	O
;	O
mu_opool_clear	function
(	O
opool	pointer
)	O
;	O
return	O
opool	pointer
->	O
bkt_fini	pointer
->	O
hdr	struct
.	O
buf	array
;	O
}	O
void	O
*	O
mu_opool_detach	function
(	O
mu_opool_t	pointer
opool	pointer
,	O
size_t	long
*	O
psize	pointer
)	O
{	O
union	O
mu_opool_bucket	union
*	O
bp	pointer
;	O
if	O
(	O
mu_opool_coalesce	function
(	O
opool	pointer
,	O
psize	pointer
)	O
)	O
return	O
NULL	O
;	O
mu_opool_clear	function
(	O
opool	pointer
)	O
;	O
bp	pointer
=	O
opool	pointer
->	O
bkt_fini	pointer
;	O
opool	pointer
->	O
bkt_fini	pointer
=	O
bp	pointer
->	O
hdr	struct
.	O
next	pointer
;	O
memmove	function
(	O
bp	pointer
,	O
bp	pointer
->	O
hdr	struct
.	O
buf	array
,	O
bp	pointer
->	O
hdr	struct
.	O
level	int
)	O
;	O
return	O
bp	pointer
;	O
}	O
void	O
mu_opool_free	function
(	O
mu_opool_t	pointer
pool	pointer
,	O
void	O
*	O
obj	pointer
)	O
{	O
if	O
(	O
!	O
pool	pointer
)	O
return	O
;	O
if	O
(	O
!	O
obj	pointer
)	O
{	O
if	O
(	O
pool	pointer
->	O
bkt_head	pointer
)	O
mu_opool_finish	function
(	O
pool	pointer
,	O
NULL	O
)	O
;	O
while	O
(	O
pool	pointer
->	O
bkt_fini	pointer
)	O
{	O
union	O
mu_opool_bucket	union
*	O
next	pointer
=	O
pool	pointer
->	O
bkt_fini	pointer
->	O
hdr	struct
.	O
next	pointer
;	O
free	function
(	O
pool	pointer
->	O
bkt_fini	pointer
)	O
;	O
pool	pointer
->	O
bkt_fini	pointer
=	O
next	pointer
;	O
}	O
}	O
else	O
{	O
union	O
mu_opool_bucket	union
*	O
bucket	pointer
=	O
pool	pointer
->	O
bkt_fini	pointer
,	O
*	O
*	O
pprev	pointer
=	O
&	O
pool	pointer
->	O
bkt_fini	pointer
;	O
while	O
(	O
bucket	pointer
)	O
{	O
if	O
(	O
bucket	pointer
->	O
hdr	struct
.	O
buf	array
==	O
obj	pointer
)	O
{	O
*	O
pprev	pointer
=	O
bucket	pointer
->	O
hdr	struct
.	O
next	pointer
;	O
free	function
(	O
bucket	pointer
)	O
;	O
return	O
;	O
}	O
pprev	pointer
=	O
&	O
bucket	pointer
->	O
hdr	struct
.	O
next	pointer
;	O
bucket	pointer
=	O
bucket	pointer
->	O
hdr	struct
.	O
next	pointer
;	O
}	O
}	O
}	O
void	O
*	O
mu_opool_dup	function
(	O
mu_opool_t	pointer
pool	pointer
,	O
void	O
const	O
*	O
data	pointer
,	O
size_t	long
size	long
)	O
{	O
if	O
(	O
mu_opool_append	function
(	O
pool	pointer
,	O
data	pointer
,	O
size	long
)	O
)	O
return	O
NULL	O
;	O
return	O
mu_opool_finish	function
(	O
pool	pointer
,	O
NULL	O
)	O
;	O
}	O
int	O
mu_opool_union	function
(	O
mu_opool_t	pointer
*	O
pdst	pointer
,	O
mu_opool_t	pointer
*	O
psrc	pointer
)	O
{	O
mu_opool_t	pointer
src	pointer
,	O
dst	pointer
;	O
if	O
(	O
!	O
psrc	pointer
)	O
return	O
EINVAL	int
;	O
if	O
(	O
!	O
*	O
psrc	pointer
)	O
return	O
0	int
;	O
src	pointer
=	O
*	O
psrc	pointer
;	O
if	O
(	O
!	O
pdst	pointer
)	O
return	O
EINVAL	int
;	O
if	O
(	O
!	O
*	O
pdst	pointer
)	O
{	O
*	O
pdst	pointer
=	O
src	pointer
;	O
*	O
psrc	pointer
=	O
NULL	O
;	O
return	O
0	int
;	O
}	O
else	O
dst	pointer
=	O
*	O
pdst	pointer
;	O
if	O
(	O
dst	pointer
->	O
bkt_tail	pointer
)	O
dst	pointer
->	O
bkt_tail	pointer
->	O
hdr	struct
.	O
next	pointer
=	O
src	pointer
->	O
bkt_head	pointer
;	O
else	O
dst	pointer
->	O
bkt_head	pointer
=	O
src	pointer
->	O
bkt_head	pointer
;	O
dst	pointer
->	O
bkt_tail	pointer
=	O
src	pointer
->	O
bkt_tail	pointer
;	O
if	O
(	O
src	pointer
->	O
bkt_fini	pointer
)	O
{	O
union	O
mu_opool_bucket	union
*	O
p	pointer
;	O
for	O
(	O
p	pointer
=	O
src	pointer
->	O
bkt_fini	pointer
;	O
p	pointer
->	O
hdr	struct
.	O
next	pointer
;	O
p	pointer
=	O
p	pointer
->	O
hdr	struct
.	O
next	pointer
)	O
;	O
p	pointer
->	O
hdr	struct
.	O
next	pointer
=	O
dst	pointer
->	O
bkt_fini	pointer
;	O
dst	pointer
->	O
bkt_fini	pointer
=	O
src	pointer
->	O
bkt_fini	pointer
;	O
}	O
free	function
(	O
src	pointer
)	O
;	O
*	O
psrc	pointer
=	O
NULL	O
;	O
return	O
0	int
;	O
}	O
struct	O
opool_iterator	struct
{	O
mu_opool_t	pointer
opool	pointer
;	O
union	O
mu_opool_bucket	union
*	O
cur	pointer
;	O
}	O
;	O
static	O
int	O
opitr_first	function
(	O
void	O
*	O
owner	pointer
)	O
{	O
struct	O
opool_iterator	struct
*	O
itr	pointer
=	O
owner	pointer
;	O
itr	pointer
->	O
cur	pointer
=	O
itr	pointer
->	O
opool	pointer
->	O
bkt_head	pointer
;	O
return	O
0	int
;	O
}	O
static	O
int	O
opitr_next	function
(	O
void	O
*	O
owner	pointer
)	O
{	O
struct	O
opool_iterator	struct
*	O
itr	pointer
=	O
owner	pointer
;	O
if	O
(	O
itr	pointer
->	O
cur	pointer
)	O
{	O
itr	pointer
->	O
cur	pointer
=	O
itr	pointer
->	O
cur	pointer
->	O
hdr	struct
.	O
next	pointer
;	O
return	O
0	int
;	O
}	O
return	O
EINVAL	int
;	O
}	O
static	O
int	O
opitr_getitem	function
(	O
void	O
*	O
owner	pointer
,	O
void	O
*	O
*	O
pret	pointer
,	O
const	O
void	O
*	O
*	O
pkey	pointer
)	O
{	O
struct	O
opool_iterator	struct
*	O
itr	pointer
=	O
owner	pointer
;	O
if	O
(	O
!	O
itr	pointer
->	O
cur	pointer
)	O
return	O
MU_ERR_NOENT	O
;	O
*	O
pret	pointer
=	O
itr	pointer
->	O
cur	pointer
->	O
hdr	struct
.	O
buf	array
;	O
if	O
(	O
pkey	pointer
)	O
*	O
(	O
size_t	long
*	O
)	O
pkey	pointer
=	O
itr	pointer
->	O
cur	pointer
->	O
hdr	struct
.	O
level	int
;	O
return	O
0	int
;	O
}	O
static	O
int	O
opitr_finished_p	function
(	O
void	O
*	O
owner	pointer
)	O
{	O
struct	O
opool_iterator	struct
*	O
itr	pointer
=	O
owner	pointer
;	O
return	O
itr	pointer
->	O
cur	pointer
==	O
NULL	O
;	O
}	O
static	O
int	O
opitr_delitem	function
(	O
void	O
*	O
owner	pointer
,	O
void	O
*	O
item	pointer
)	O
{	O
struct	O
opool_iterator	struct
*	O
itr	pointer
=	O
owner	pointer
;	O
return	O
(	O
itr	pointer
->	O
cur	pointer
&&	O
itr	pointer
->	O
cur	pointer
->	O
hdr	struct
.	O
buf	array
==	O
item	pointer
)	O
?	O
MU_ITR_DELITEM_NEXT	int
:	O
MU_ITR_DELITEM_NOTHING	int
;	O
}	O
static	O
int	O
opitr_destroy	function
(	O
mu_iterator_t	pointer
iterator	pointer
,	O
void	O
*	O
data	pointer
)	O
{	O
struct	O
opool_iterator	struct
*	O
itr	pointer
=	O
data	pointer
;	O
if	O
(	O
itr	pointer
->	O
opool	pointer
->	O
itr_count	long
==	O
0	int
)	O
{	O
mu_error	function
(	O
_	O
(	O
"%s: INTERNAL ERROR: zero reference count"	pointer
)	O
,	O
"opool_destroy"	pointer
)	O
;	O
}	O
else	O
itr	pointer
->	O
opool	pointer
->	O
itr_count	long
--	O
;	O
free	function
(	O
data	pointer
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
opitr_data_dup	function
(	O
void	O
*	O
*	O
ptr	pointer
,	O
void	O
*	O
owner	pointer
)	O
{	O
struct	O
opool_iterator	struct
*	O
itr	pointer
=	O
owner	pointer
;	O
*	O
ptr	pointer
=	O
malloc	function
(	O
sizeof	O
(	O
struct	O
opool_iterator	struct
)	O
)	O
;	O
if	O
(	O
*	O
ptr	pointer
==	O
NULL	O
)	O
return	O
ENOMEM	int
;	O
memcpy	function
(	O
*	O
ptr	pointer
,	O
owner	pointer
,	O
sizeof	O
(	O
struct	O
opool_iterator	struct
)	O
)	O
;	O
itr	pointer
->	O
opool	pointer
->	O
itr_count	long
++	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
opitr_itrctl	function
(	O
void	O
*	O
owner	pointer
,	O
enum	O
mu_itrctl_req	enum
req	enum
,	O
void	O
*	O
arg	pointer
)	O
{	O
struct	O
opool_iterator	struct
*	O
itr	pointer
=	O
owner	pointer
;	O
switch	O
(	O
req	enum
)	O
{	O
case	O
mu_itrctl_count	int
:	O
if	O
(	O
!	O
arg	pointer
)	O
return	O
EINVAL	int
;	O
else	O
{	O
size_t	long
n	long
=	O
0	int
;	O
union	O
mu_opool_bucket	union
*	O
p	pointer
;	O
for	O
(	O
p	pointer
=	O
itr	pointer
->	O
opool	pointer
->	O
bkt_head	pointer
;	O
p	pointer
;	O
p	pointer
=	O
p	pointer
->	O
hdr	struct
.	O
next	pointer
)	O
n	long
++	O
;	O
*	O
(	O
size_t	long
*	O
)	O
arg	pointer
=	O
n	long
;	O
}	O
break	O
;	O
default	O
:	O
return	O
ENOSYS	int
;	O
}	O
return	O
0	int
;	O
}	O
int	O
mu_opool_get_iterator	function
(	O
mu_opool_t	pointer
opool	pointer
,	O
mu_iterator_t	pointer
*	O
piterator	pointer
)	O
{	O
mu_iterator_t	pointer
iterator	pointer
;	O
int	O
status	int
;	O
struct	O
opool_iterator	struct
*	O
itr	pointer
;	O
if	O
(	O
!	O
opool	pointer
)	O
return	O
EINVAL	int
;	O
itr	pointer
=	O
calloc	function
(	O
1	int
,	O
sizeof	O
*	O
itr	pointer
)	O
;	O
if	O
(	O
!	O
itr	pointer
)	O
return	O
ENOMEM	int
;	O
itr	pointer
->	O
opool	pointer
=	O
opool	pointer
;	O
itr	pointer
->	O
cur	pointer
=	O
opool	pointer
->	O
bkt_head	pointer
;	O
status	int
=	O
mu_iterator_create	function
(	O
&	O
iterator	pointer
,	O
itr	pointer
)	O
;	O
if	O
(	O
status	int
)	O
{	O
free	function
(	O
itr	pointer
)	O
;	O
return	O
status	int
;	O
}	O
mu_iterator_set_first	function
(	O
iterator	pointer
,	O
opitr_first	function
)	O
;	O
mu_iterator_set_next	function
(	O
iterator	pointer
,	O
opitr_next	function
)	O
;	O
mu_iterator_set_getitem	function
(	O
iterator	pointer
,	O
opitr_getitem	function
)	O
;	O
mu_iterator_set_finished_p	function
(	O
iterator	pointer
,	O
opitr_finished_p	function
)	O
;	O
mu_iterator_set_delitem	function
(	O
iterator	pointer
,	O
opitr_delitem	function
)	O
;	O
mu_iterator_set_destroy	function
(	O
iterator	pointer
,	O
opitr_destroy	function
)	O
;	O
mu_iterator_set_dup	function
(	O
iterator	pointer
,	O
opitr_data_dup	function
)	O
;	O
mu_iterator_set_itrctl	function
(	O
iterator	pointer
,	O
opitr_itrctl	function
)	O
;	O
opool	pointer
->	O
itr_count	long
++	O
;	O
*	O
piterator	pointer
=	O
iterator	pointer
;	O
return	O
0	int
;	O
}	O
