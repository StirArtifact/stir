static	O
char	O
SYSTEM_CONFIGFILE_PREFIX	array
[	O
]	O
=	O
"/gnuitrc."	pointer
;	O
static	O
char	O
USER_CONFIGFILE_PREFIX	array
[	O
]	O
=	O
"/.gnuitrc."	pointer
;	O
static	O
char	O
OLD_USER_CONFIGFILE_PREFIX	array
[	O
]	O
=	O
"/.gitrc."	pointer
;	O
static	O
char	O
*	O
termdir	pointer
;	O
static	O
char	O
*	O
bindir	pointer
;	O
char	O
*	O
login_name	pointer
;	O
char	O
*	O
day_name	array
[	O
]	O
=	O
{	O
"Sun"	pointer
,	O
"Mon"	pointer
,	O
"Tue"	pointer
,	O
"Wed"	pointer
,	O
"Thu"	pointer
,	O
"Fri"	pointer
,	O
"Sat"	pointer
}	O
;	O
char	O
*	O
month_name	array
[	O
]	O
=	O
{	O
"Jan"	pointer
,	O
"Feb"	pointer
,	O
"Mar"	pointer
,	O
"Apr"	pointer
,	O
"May"	pointer
,	O
"Jun"	pointer
,	O
"Jul"	pointer
,	O
"Aug"	pointer
,	O
"Sep"	pointer
,	O
"Oct"	pointer
,	O
"Nov"	pointer
,	O
"Dec"	pointer
}	O
;	O
file_type_info_t	struct
*	O
fti_head	pointer
=	O
NULL	O
;	O
extern	O
void	O
fatal	function
PROTO	O
(	O
(	O
char	O
*	O
)	O
)	O
;	O
void	O
compute_directories	function
(	O
)	O
{	O
char	O
*	O
prefix_relative_bin_dir	pointer
=	O
"/bin"	pointer
;	O
char	O
*	O
prefix_relative_term_dir	pointer
=	O
"/share/gnuit"	pointer
;	O
bindir	pointer
=	O
xmalloc	function
(	O
strlen	function
(	O
PREFIX	pointer
)	O
+	O
strlen	function
(	O
prefix_relative_bin_dir	pointer
)	O
+	O
1	int
)	O
;	O
sprintf	function
(	O
bindir	pointer
,	O
"%s%s"	pointer
,	O
PREFIX	pointer
,	O
prefix_relative_bin_dir	pointer
)	O
;	O
termdir	pointer
=	O
xmalloc	function
(	O
strlen	function
(	O
PREFIX	pointer
)	O
+	O
strlen	function
(	O
prefix_relative_term_dir	pointer
)	O
+	O
1	int
)	O
;	O
sprintf	function
(	O
termdir	pointer
,	O
"%s%s"	pointer
,	O
PREFIX	pointer
,	O
prefix_relative_term_dir	pointer
)	O
;	O
}	O
void	O
update_path	function
(	O
)	O
{	O
char	O
*	O
path	pointer
=	O
getenv	function
(	O
"PATH"	pointer
)	O
;	O
if	O
(	O
path	pointer
==	O
NULL	O
)	O
xsetenv	function
(	O
"PATH"	pointer
,	O
bindir	pointer
)	O
;	O
else	O
{	O
char	O
*	O
new_value	pointer
=	O
xmalloc	function
(	O
strlen	function
(	O
path	pointer
)	O
+	O
1	int
+	O
strlen	function
(	O
bindir	pointer
)	O
+	O
1	int
)	O
;	O
sprintf	function
(	O
new_value	pointer
,	O
"%s:%s"	pointer
,	O
path	pointer
,	O
bindir	pointer
)	O
;	O
xsetenv	function
(	O
"PATH"	pointer
,	O
new_value	pointer
)	O
;	O
xfree	function
(	O
new_value	pointer
)	O
;	O
}	O
}	O
void	O
display_exit_message	function
(	O
signame	pointer
)	O
char	O
*	O
signame	pointer
;	O
{	O
struct	O
tm	struct
*	O
time	struct
=	O
get_local_time	function
(	O
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"%s %d %2d:%02d:%02d %s[%d]: exiting on %s signal\n"	pointer
,	O
month_name	array
[	O
time	struct
->	O
tm_mon	int
]	O
,	O
time	struct
->	O
tm_mday	int
,	O
time	struct
->	O
tm_hour	int
,	O
time	struct
->	O
tm_min	int
,	O
time	struct
->	O
tm_sec	int
,	O
g_program	pointer
,	O
(	O
int	O
)	O
getpid	function
(	O
)	O
,	O
signame	pointer
)	O
;	O
}	O
extern	O
void	O
clean_up	function
PROTO	O
(	O
(	O
)	O
)	O
;	O
RETSIGTYPE	void
fatal_signal	function
(	O
signum	int
)	O
int	O
signum	int
;	O
{	O
clean_up	function
(	O
)	O
;	O
switch	O
(	O
signum	int
)	O
{	O
case	O
SIGTERM	int
:	O
display_exit_message	function
(	O
"TERM"	pointer
)	O
;	O
break	O
;	O
case	O
SIGHUP	int
:	O
case	O
SIGINT	int
:	O
display_exit_message	function
(	O
(	O
signum	int
==	O
SIGHUP	int
)	O
?	O
"HUP"	pointer
:	O
"INT"	pointer
)	O
;	O
break	O
;	O
case	O
SIGSEGV	int
:	O
display_exit_message	function
(	O
"SEGV"	pointer
)	O
;	O
goto	O
ask_report	O
;	O
default	O
:	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: got a stupid signal (%d). Unless it was a joke ...\n"	pointer
,	O
g_program	pointer
,	O
signum	int
)	O
;	O
ask_report	O
:	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: please report to gnuit-dev@gnu.org\n"	pointer
,	O
g_program	pointer
)	O
;	O
break	O
;	O
}	O
exit	function
(	O
signum	int
)	O
;	O
}	O
void	O
configuration_fatal_error	function
(	O
configfile	pointer
)	O
char	O
*	O
configfile	pointer
;	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: installation problem: \n"	pointer
,	O
g_program	pointer
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: cannot find configuration file '%s'.\n\n"	pointer
,	O
g_program	pointer
,	O
configfile	pointer
)	O
;	O
}	O
void	O
configuration_warning	function
(	O
configfile	pointer
)	O
char	O
*	O
configfile	pointer
;	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"\n%s: Cannot open configuration file '%s'.\n"	pointer
,	O
g_program	pointer
,	O
configfile	pointer
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: See the info documentation for details.\n"	pointer
,	O
g_program	pointer
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: If the TERM environment variable is, say, vt102, your\n"	pointer
,	O
g_program	pointer
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: configuration file name is 'gnuitrc.vt102'.\n"	pointer
,	O
g_program	pointer
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: You can copy a configuration file in your home directory\n"	pointer
,	O
g_program	pointer
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: and modify it in order to overwrite the default one.\n"	pointer
,	O
g_program	pointer
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: Add a dot at the start of the file, e.g. '~/.gnuitrc.xterm'.\n"	pointer
,	O
g_program	pointer
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: Try modifying 'gnuitrc.generic'...\n\n"	pointer
,	O
g_program	pointer
)	O
;	O
}	O
void	O
common_configuration_init	function
(	O
)	O
{	O
char	O
*	O
configfile	pointer
=	O
xmalloc	function
(	O
strlen	function
(	O
termdir	pointer
)	O
+	O
1	int
+	O
strlen	function
(	O
SYSTEM_CONFIGFILE_PREFIX	array
)	O
+	O
sizeof	O
(	O
"common"	pointer
)	O
+	O
1	int
)	O
;	O
strcpy	function
(	O
configfile	pointer
,	O
termdir	pointer
)	O
;	O
strcat	function
(	O
configfile	pointer
,	O
SYSTEM_CONFIGFILE_PREFIX	array
)	O
;	O
strcat	function
(	O
configfile	pointer
,	O
"common"	pointer
)	O
;	O
if	O
(	O
configuration_init	function
(	O
configfile	pointer
)	O
==	O
0	int
)	O
{	O
configuration_fatal_error	function
(	O
configfile	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
}	O
int	O
specific_configuration_init	function
(	O
)	O
{	O
char	O
*	O
configfile	pointer
=	O
xmalloc	function
(	O
strlen	function
(	O
g_home	pointer
)	O
+	O
1	int
+	O
strlen	function
(	O
USER_CONFIGFILE_PREFIX	array
)	O
+	O
strlen	function
(	O
tty_type	pointer
)	O
+	O
1	int
)	O
;	O
strcpy	function
(	O
configfile	pointer
,	O
g_home	pointer
)	O
;	O
strcat	function
(	O
configfile	pointer
,	O
USER_CONFIGFILE_PREFIX	array
)	O
;	O
strcat	function
(	O
configfile	pointer
,	O
tty_type	pointer
)	O
;	O
if	O
(	O
configuration_init	function
(	O
configfile	pointer
)	O
==	O
0	int
)	O
{	O
xfree	function
(	O
configfile	pointer
)	O
;	O
configfile	pointer
=	O
xmalloc	function
(	O
strlen	function
(	O
g_home	pointer
)	O
+	O
1	int
+	O
strlen	function
(	O
OLD_USER_CONFIGFILE_PREFIX	array
)	O
+	O
strlen	function
(	O
tty_type	pointer
)	O
+	O
1	int
)	O
;	O
strcpy	function
(	O
configfile	pointer
,	O
g_home	pointer
)	O
;	O
strcat	function
(	O
configfile	pointer
,	O
OLD_USER_CONFIGFILE_PREFIX	array
)	O
;	O
strcat	function
(	O
configfile	pointer
,	O
tty_type	pointer
)	O
;	O
if	O
(	O
configuration_init	function
(	O
configfile	pointer
)	O
==	O
0	int
)	O
{	O
xfree	function
(	O
configfile	pointer
)	O
;	O
configfile	pointer
=	O
xmalloc	function
(	O
strlen	function
(	O
termdir	pointer
)	O
+	O
1	int
+	O
strlen	function
(	O
SYSTEM_CONFIGFILE_PREFIX	array
)	O
+	O
strlen	function
(	O
tty_type	pointer
)	O
+	O
1	int
)	O
;	O
strcpy	function
(	O
configfile	pointer
,	O
termdir	pointer
)	O
;	O
strcat	function
(	O
configfile	pointer
,	O
SYSTEM_CONFIGFILE_PREFIX	array
)	O
;	O
strcat	function
(	O
configfile	pointer
,	O
tty_type	pointer
)	O
;	O
if	O
(	O
configuration_init	function
(	O
configfile	pointer
)	O
==	O
0	int
)	O
{	O
configuration_warning	function
(	O
configfile	pointer
)	O
;	O
xfree	function
(	O
configfile	pointer
)	O
;	O
configfile	pointer
=	O
xmalloc	function
(	O
strlen	function
(	O
termdir	pointer
)	O
+	O
1	int
+	O
strlen	function
(	O
SYSTEM_CONFIGFILE_PREFIX	array
)	O
+	O
sizeof	O
(	O
"generic"	pointer
)	O
+	O
1	int
)	O
;	O
strcpy	function
(	O
configfile	pointer
,	O
termdir	pointer
)	O
;	O
strcat	function
(	O
configfile	pointer
,	O
SYSTEM_CONFIGFILE_PREFIX	array
)	O
;	O
strcat	function
(	O
configfile	pointer
,	O
"generic"	pointer
)	O
;	O
if	O
(	O
configuration_init	function
(	O
configfile	pointer
)	O
==	O
0	int
)	O
{	O
configuration_fatal_error	function
(	O
configfile	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
return	O
0	int
;	O
}	O
}	O
}	O
xfree	function
(	O
configfile	pointer
)	O
;	O
return	O
1	int
;	O
}	O
void	O
use_section	function
(	O
section	pointer
)	O
char	O
*	O
section	pointer
;	O
{	O
char	O
*	O
gitfmprefix	pointer
=	O
"[GITFM-"	pointer
;	O
char	O
*	O
gitprefix	pointer
=	O
"[GIT-"	pointer
;	O
if	O
(	O
configuration_section	function
(	O
section	pointer
)	O
==	O
-	O
1	int
)	O
{	O
if	O
(	O
strncmp	function
(	O
section	pointer
,	O
gitfmprefix	pointer
,	O
strlen	function
(	O
gitfmprefix	pointer
)	O
)	O
==	O
0	int
)	O
{	O
char	O
*	O
newsection	pointer
=	O
xmalloc	function
(	O
strlen	function
(	O
gitprefix	pointer
)	O
+	O
strlen	function
(	O
section	pointer
+	O
strlen	function
(	O
gitprefix	pointer
)	O
)	O
+	O
1	int
)	O
;	O
strcpy	function
(	O
newsection	pointer
,	O
gitprefix	pointer
)	O
;	O
strcat	function
(	O
newsection	pointer
,	O
section	pointer
+	O
strlen	function
(	O
gitfmprefix	pointer
)	O
)	O
;	O
if	O
(	O
configuration_section	function
(	O
newsection	pointer
)	O
!=	O
-	O
1	int
)	O
{	O
xfree	function
(	O
newsection	pointer
)	O
;	O
return	O
;	O
}	O
xfree	function
(	O
newsection	pointer
)	O
;	O
}	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: can't find section %s in the configuration file.\n"	pointer
,	O
g_program	pointer
,	O
section	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
}	O
int	O
get_int_var	function
(	O
var_name	pointer
,	O
default_value	int
)	O
char	O
*	O
var_name	pointer
;	O
int	O
default_value	int
;	O
{	O
char	O
*	O
data	pointer
;	O
configuration_getvarinfo	function
(	O
var_name	pointer
,	O
&	O
data	pointer
,	O
1	int
,	O
DO_SEEK	int
)	O
;	O
return	O
data	pointer
?	O
atoi	function
(	O
data	pointer
)	O
:	O
default_value	int
;	O
}	O
int	O
get_const_var	function
(	O
var_name	pointer
,	O
options	array
,	O
options_no	int
,	O
default_value	int
)	O
char	O
*	O
var_name	pointer
,	O
*	O
options	array
[	O
]	O
;	O
int	O
options_no	int
,	O
default_value	int
;	O
{	O
int	O
i	int
;	O
char	O
*	O
data	pointer
;	O
configuration_getvarinfo	function
(	O
var_name	pointer
,	O
&	O
data	pointer
,	O
1	int
,	O
DO_SEEK	int
)	O
;	O
if	O
(	O
data	pointer
)	O
{	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
options_no	int
;	O
i	int
++	O
)	O
if	O
(	O
strcmp	function
(	O
data	pointer
,	O
options	array
[	O
i	int
]	O
)	O
==	O
0	int
)	O
break	O
;	O
if	O
(	O
i	int
==	O
options_no	int
)	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: invalid %s (%s).\n"	pointer
,	O
g_program	pointer
,	O
var_name	pointer
,	O
data	pointer
)	O
;	O
else	O
return	O
i	int
;	O
}	O
return	O
default_value	int
;	O
}	O
int	O
get_flag_var	function
(	O
var_name	pointer
,	O
default_value	int
)	O
char	O
*	O
var_name	pointer
;	O
int	O
default_value	int
;	O
{	O
char	O
*	O
data	pointer
;	O
configuration_getvarinfo	function
(	O
var_name	pointer
,	O
&	O
data	pointer
,	O
1	int
,	O
DO_SEEK	int
)	O
;	O
if	O
(	O
data	pointer
)	O
{	O
if	O
(	O
strcmp	function
(	O
data	pointer
,	O
"ON"	pointer
)	O
==	O
0	int
)	O
return	O
1	int
;	O
if	O
(	O
strcmp	function
(	O
data	pointer
,	O
"OFF"	pointer
)	O
==	O
0	int
)	O
return	O
0	int
;	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: invalid %s (%s).\n"	pointer
,	O
g_program	pointer
,	O
var_name	pointer
,	O
data	pointer
)	O
;	O
return	O
default_value	int
;	O
}	O
return	O
default_value	int
;	O
}	O
char	O
*	O
get_string_var	function
(	O
var_name	pointer
,	O
default_value	int
)	O
char	O
*	O
var_name	pointer
,	O
*	O
default_value	int
;	O
{	O
char	O
*	O
data	pointer
;	O
configuration_getvarinfo	function
(	O
var_name	pointer
,	O
&	O
data	pointer
,	O
1	int
,	O
DO_SEEK	int
)	O
;	O
if	O
(	O
data	pointer
)	O
return	O
xstrdup	function
(	O
data	pointer
)	O
;	O
return	O
default_value	int
;	O
}	O
void	O
get_colorset_var	function
(	O
charset	pointer
,	O
colorset_name	array
,	O
fields_no	int
)	O
int	O
*	O
charset	pointer
;	O
char	O
*	O
colorset_name	array
[	O
]	O
;	O
int	O
fields_no	int
;	O
{	O
int	O
i	int
,	O
index	function
;	O
char	O
*	O
data	pointer
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
fields_no	int
;	O
i	int
++	O
)	O
{	O
configuration_getvarinfo	function
(	O
colorset_name	array
[	O
i	int
]	O
,	O
&	O
data	pointer
,	O
1	int
,	O
DO_SEEK	int
)	O
;	O
if	O
(	O
data	pointer
)	O
{	O
index	function
=	O
tty_get_color_index	function
(	O
data	pointer
)	O
;	O
if	O
(	O
index	function
==	O
-	O
1	int
)	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: invalid %s (%s).\n"	pointer
,	O
g_program	pointer
,	O
colorset_name	array
[	O
i	int
]	O
,	O
data	pointer
)	O
;	O
else	O
charset	pointer
[	O
i	int
]	O
=	O
index	function
;	O
}	O
}	O
}	O
char	O
*	O
minimize_path	function
(	O
path	pointer
)	O
char	O
*	O
path	pointer
;	O
{	O
char	O
*	O
cpath	pointer
=	O
path	pointer
;	O
char	O
*	O
opath	pointer
=	O
path	pointer
;	O
if	O
(	O
*	O
opath	pointer
==	O
'/'	O
)	O
*	O
cpath	pointer
++	O
=	O
*	O
opath	pointer
++	O
;	O
else	O
fatal	function
(	O
"relative path encountered"	pointer
)	O
;	O
while	O
(	O
*	O
opath	pointer
)	O
{	O
while	O
(	O
*	O
opath	pointer
==	O
'/'	O
||	O
(	O
*	O
opath	pointer
==	O
'.'	O
&&	O
(	O
*	O
(	O
opath	pointer
+	O
1	int
)	O
==	O
'/'	O
||	O
*	O
(	O
opath	pointer
+	O
1	int
)	O
==	O
'\0'	O
)	O
)	O
)	O
opath	pointer
++	O
;	O
if	O
(	O
*	O
opath	pointer
==	O
'.'	O
&&	O
*	O
(	O
opath	pointer
+	O
1	int
)	O
==	O
'.'	O
&&	O
(	O
*	O
(	O
opath	pointer
+	O
2	int
)	O
==	O
'/'	O
||	O
*	O
(	O
opath	pointer
+	O
2	int
)	O
==	O
'\0'	O
)	O
)	O
{	O
if	O
(	O
cpath	pointer
-	O
1	int
!=	O
path	pointer
)	O
{	O
for	O
(	O
cpath	pointer
-=	O
2	int
;	O
*	O
cpath	pointer
!=	O
'/'	O
;	O
cpath	pointer
--	O
)	O
;	O
cpath	pointer
++	O
;	O
}	O
opath	pointer
+=	O
2	int
;	O
continue	O
;	O
}	O
while	O
(	O
*	O
opath	pointer
&&	O
*	O
opath	pointer
!=	O
'/'	O
)	O
*	O
cpath	pointer
++	O
=	O
*	O
opath	pointer
++	O
;	O
if	O
(	O
*	O
opath	pointer
)	O
*	O
cpath	pointer
++	O
=	O
'/'	O
;	O
}	O
if	O
(	O
*	O
(	O
cpath	pointer
-	O
1	int
)	O
==	O
'/'	O
&&	O
cpath	pointer
-	O
path	pointer
>	O
1	int
)	O
cpath	pointer
--	O
;	O
*	O
cpath	pointer
=	O
'\0'	O
;	O
return	O
path	pointer
;	O
}	O
void	O
get_login_name	function
(	O
)	O
{	O
struct	O
passwd	struct
*	O
pwd	pointer
;	O
int	O
euid	int
=	O
geteuid	function
(	O
)	O
;	O
if	O
(	O
(	O
pwd	pointer
=	O
getpwuid	function
(	O
euid	int
)	O
)	O
==	O
NULL	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: OOOPS, I can't get your user name (euid = %d)!\n"	pointer
,	O
g_program	pointer
,	O
euid	int
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: Your account no longer exists or you are a %s"	pointer
,	O
g_program	pointer
,	O
"SYSTEM CRACKER! :-)\n"	pointer
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: Correct the problem and try again.\n"	pointer
,	O
g_program	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
login_name	pointer
=	O
xstrdup	function
(	O
pwd	pointer
->	O
pw_name	pointer
)	O
;	O
}	O
void	O
truncate_long_name	function
(	O
name	pointer
,	O
dest	pointer
,	O
len	int
)	O
char	O
*	O
name	pointer
,	O
*	O
dest	pointer
;	O
int	O
len	int
;	O
{	O
int	O
name_len	int
;	O
switch	O
(	O
len	int
)	O
{	O
case	O
0	int
:	O
break	O
;	O
case	O
1	int
:	O
dest	pointer
[	O
0	int
]	O
=	O
' '	O
;	O
break	O
;	O
case	O
2	int
:	O
dest	pointer
[	O
0	int
]	O
=	O
dest	pointer
[	O
1	int
]	O
=	O
' '	O
;	O
break	O
;	O
case	O
3	int
:	O
dest	pointer
[	O
0	int
]	O
=	O
dest	pointer
[	O
1	int
]	O
=	O
dest	pointer
[	O
2	int
]	O
=	O
' '	O
;	O
break	O
;	O
default	O
:	O
name_len	int
=	O
strlen	function
(	O
name	pointer
)	O
;	O
if	O
(	O
name_len	int
>	O
len	int
)	O
{	O
dest	pointer
[	O
0	int
]	O
=	O
dest	pointer
[	O
1	int
]	O
=	O
dest	pointer
[	O
2	int
]	O
=	O
'.'	O
;	O
memcpy	function
(	O
dest	pointer
+	O
3	int
,	O
name	pointer
+	O
name_len	int
-	O
len	int
+	O
3	int
,	O
len	int
-	O
3	int
)	O
;	O
}	O
else	O
memcpy	function
(	O
dest	pointer
,	O
name	pointer
,	O
name_len	int
)	O
;	O
break	O
;	O
}	O
}	O
char	O
*	O
truncate_string	function
(	O
path	pointer
,	O
temppath	pointer
,	O
len	int
)	O
char	O
*	O
path	pointer
;	O
char	O
*	O
temppath	pointer
;	O
int	O
len	int
;	O
{	O
truncate_long_name	function
(	O
path	pointer
,	O
temppath	pointer
,	O
len	int
-	O
1	int
)	O
;	O
temppath	pointer
[	O
min	O
(	O
len	int
-	O
1	int
,	O
(	O
int	O
)	O
strlen	function
(	O
path	pointer
)	O
)	O
]	O
=	O
'\0'	O
;	O
return	O
temppath	pointer
;	O
}	O
off64_t	long
get_file_length	function
(	O
fd	int
)	O
int	O
fd	int
;	O
{	O
off64_t	long
current	long
,	O
length	long
;	O
current	long
=	O
lseek64	function
(	O
fd	int
,	O
0	int
,	O
SEEK_CUR	int
)	O
;	O
length	long
=	O
lseek64	function
(	O
fd	int
,	O
0	int
,	O
SEEK_END	int
)	O
;	O
lseek64	function
(	O
fd	int
,	O
current	long
,	O
SEEK_SET	int
)	O
;	O
return	O
length	long
;	O
}	O
struct	O
tm	struct
*	O
get_local_time	function
(	O
)	O
{	O
time_t	long
__time	long
;	O
__time	long
=	O
time	struct
(	O
NULL	O
)	O
;	O
return	O
localtime	function
(	O
&	O
__time	long
)	O
;	O
}	O
int	O
xsetenv	function
(	O
variable	pointer
,	O
value	pointer
)	O
char	O
*	O
variable	pointer
;	O
char	O
*	O
value	pointer
;	O
{	O
int	O
result	int
;	O
{	O
char	O
*	O
environment_string	pointer
=	O
xmalloc	function
(	O
strlen	function
(	O
variable	pointer
)	O
+	O
1	int
+	O
strlen	function
(	O
value	pointer
)	O
+	O
1	int
)	O
;	O
sprintf	function
(	O
environment_string	pointer
,	O
"%s=%s"	pointer
,	O
variable	pointer
,	O
value	pointer
)	O
;	O
result	int
=	O
putenv	function
(	O
environment_string	pointer
)	O
;	O
}	O
if	O
(	O
result	int
==	O
-	O
1	int
)	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: warning: cannot add '%s' to environment\n"	pointer
,	O
g_program	pointer
,	O
variable	pointer
)	O
;	O
return	O
result	int
;	O
}	O
void	O
toprintable	function
(	O
string	pointer
,	O
length	long
)	O
char	O
*	O
string	pointer
;	O
size_t	long
length	long
;	O
{	O
size_t	long
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
length	long
;	O
i	int
++	O
)	O
if	O
(	O
!	O
isprint	function
(	O
(	O
int	O
)	O
string	pointer
[	O
i	int
]	O
)	O
)	O
string	pointer
[	O
i	int
]	O
=	O
'?'	O
;	O
}	O
int	O
needs_quotes	function
(	O
string	pointer
,	O
length	long
)	O
char	O
*	O
string	pointer
;	O
size_t	long
length	long
;	O
{	O
size_t	long
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
length	long
;	O
i	int
++	O
)	O
if	O
(	O
!	O
isalnum	function
(	O
(	O
int	O
)	O
string	pointer
[	O
i	int
]	O
)	O
&&	O
string	pointer
[	O
i	int
]	O
!=	O
'.'	O
&&	O
string	pointer
[	O
i	int
]	O
!=	O
'-'	O
&&	O
string	pointer
[	O
i	int
]	O
!=	O
'+'	O
&&	O
string	pointer
[	O
i	int
]	O
!=	O
'='	O
&&	O
string	pointer
[	O
i	int
]	O
!=	O
'~'	O
&&	O
string	pointer
[	O
i	int
]	O
!=	O
'^'	O
&&	O
string	pointer
[	O
i	int
]	O
!=	O
'%'	O
&&	O
string	pointer
[	O
i	int
]	O
!=	O
'@'	O
&&	O
string	pointer
[	O
i	int
]	O
!=	O
'/'	O
&&	O
string	pointer
[	O
i	int
]	O
!=	O
':'	O
&&	O
string	pointer
[	O
i	int
]	O
!=	O
'{'	O
&&	O
string	pointer
[	O
i	int
]	O
!=	O
'}'	O
&&	O
string	pointer
[	O
i	int
]	O
!=	O
','	O
&&	O
string	pointer
[	O
i	int
]	O
!=	O
'_'	O
)	O
return	O
1	int
;	O
return	O
0	int
;	O
}	O
int	O
is_a_bg_command	function
(	O
cmd	pointer
)	O
char	O
*	O
cmd	pointer
;	O
{	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
strlen	function
(	O
cmd	pointer
)	O
-	O
1	int
;	O
i	int
>=	O
0	int
;	O
i	int
--	O
)	O
{	O
if	O
(	O
cmd	pointer
[	O
i	int
]	O
==	O
'&'	O
)	O
return	O
1	int
;	O
if	O
(	O
cmd	pointer
[	O
i	int
]	O
!=	O
' '	O
&&	O
cmd	pointer
[	O
i	int
]	O
!=	O
key_TAB	int
)	O
return	O
0	int
;	O
}	O
return	O
0	int
;	O
}	O
int	O
is_an_empty_command	function
(	O
cmd	pointer
)	O
char	O
*	O
cmd	pointer
;	O
{	O
for	O
(	O
;	O
*	O
cmd	pointer
;	O
cmd	pointer
++	O
)	O
if	O
(	O
*	O
cmd	pointer
!=	O
' '	O
&&	O
*	O
cmd	pointer
!=	O
';'	O
)	O
return	O
0	int
;	O
return	O
1	int
;	O
}	O
void	O
get_file_type_info	function
(	O
)	O
{	O
char	O
*	O
contents	array
[	O
3	int
]	O
;	O
char	O
pattern	pointer
[	O
80	int
]	O
;	O
int	O
brightness	int
,	O
foreground	int
,	O
background	int
;	O
file_type_info_t	struct
*	O
previous	pointer
=	O
NULL	O
,	O
*	O
fti	pointer
,	O
*	O
fti_head1	pointer
=	O
NULL	O
;	O
for	O
(	O
;	O
;	O
)	O
{	O
configuration_getvarinfo	function
(	O
pattern	pointer
,	O
contents	array
,	O
3	int
,	O
NO_SEEK	int
)	O
;	O
if	O
(	O
*	O
pattern	pointer
==	O
'\0'	O
)	O
break	O
;	O
if	O
(	O
contents	array
[	O
0	int
]	O
)	O
foreground	int
=	O
tty_get_color_index	function
(	O
contents	array
[	O
0	int
]	O
)	O
;	O
else	O
foreground	int
=	O
-	O
1	int
;	O
if	O
(	O
contents	array
[	O
1	int
]	O
)	O
background	int
=	O
tty_get_color_index	function
(	O
contents	array
[	O
1	int
]	O
)	O
;	O
else	O
background	int
=	O
-	O
1	int
;	O
if	O
(	O
contents	array
[	O
2	int
]	O
)	O
brightness	int
=	O
tty_get_color_index	function
(	O
contents	array
[	O
2	int
]	O
)	O
;	O
else	O
brightness	int
=	O
-	O
1	int
;	O
fti	pointer
=	O
(	O
file_type_info_t	struct
*	O
)	O
xmalloc	function
(	O
sizeof	O
(	O
file_type_info_t	struct
)	O
)	O
;	O
if	O
(	O
fti_head1	pointer
==	O
NULL	O
)	O
fti_head1	pointer
=	O
previous	pointer
=	O
fti	pointer
;	O
else	O
previous	pointer
->	O
next	pointer
=	O
fti	pointer
;	O
fti	pointer
->	O
pattern	pointer
=	O
xstrdup	function
(	O
pattern	pointer
)	O
;	O
fti	pointer
->	O
foreground	int
=	O
foreground	int
;	O
fti	pointer
->	O
background	int
=	O
background	int
;	O
fti	pointer
->	O
brightness	int
=	O
brightness	int
;	O
fti	pointer
->	O
next	pointer
=	O
NULL	O
;	O
previous	pointer
=	O
fti	pointer
;	O
}	O
if	O
(	O
fti_head1	pointer
)	O
{	O
if	O
(	O
fti_head	pointer
)	O
{	O
previous	pointer
->	O
next	pointer
=	O
fti_head	pointer
;	O
fti_head	pointer
=	O
fti_head1	pointer
;	O
}	O
else	O
fti_head	pointer
=	O
fti_head1	pointer
;	O
}	O
}	O
