void	O
adns__vlprintf	function
(	O
adns_state	pointer
ads	pointer
,	O
const	O
char	O
*	O
fmt	pointer
,	O
va_list	array
al	array
)	O
{	O
ads	pointer
->	O
logfn	pointer
(	O
ads	pointer
,	O
ads	pointer
->	O
logfndata	pointer
,	O
fmt	pointer
,	O
al	array
)	O
;	O
}	O
void	O
adns__lprintf	function
(	O
adns_state	pointer
ads	pointer
,	O
const	O
char	O
*	O
fmt	pointer
,	O
...	O
)	O
{	O
va_list	array
al	array
;	O
va_start	O
(	O
al	array
,	O
fmt	pointer
)	O
;	O
adns__vlprintf	function
(	O
ads	pointer
,	O
fmt	pointer
,	O
al	array
)	O
;	O
va_end	O
(	O
al	array
)	O
;	O
}	O
void	O
adns__vdiag	function
(	O
adns_state	pointer
ads	pointer
,	O
const	O
char	O
*	O
pfx	pointer
,	O
adns_initflags	enum
prevent	enum
,	O
int	O
serv	int
,	O
adns_query	pointer
qu	pointer
,	O
const	O
char	O
*	O
fmt	pointer
,	O
va_list	array
al	array
)	O
{	O
const	O
char	O
*	O
bef	pointer
,	O
*	O
aft	pointer
;	O
vbuf	struct
vb	pointer
;	O
if	O
(	O
!	O
ads	pointer
->	O
logfn	pointer
||	O
(	O
!	O
(	O
ads	pointer
->	O
iflags	enum
&	O
adns_if_debug	int
)	O
&&	O
(	O
!	O
prevent	enum
||	O
(	O
ads	pointer
->	O
iflags	enum
&	O
prevent	enum
)	O
)	O
)	O
)	O
return	O
;	O
if	O
(	O
ads	pointer
->	O
iflags	enum
&	O
adns_if_logpid	int
)	O
{	O
adns__lprintf	function
(	O
ads	pointer
,	O
"adns%s [%ld]: "	pointer
,	O
pfx	pointer
,	O
(	O
long	O
)	O
getpid	function
(	O
)	O
)	O
;	O
}	O
else	O
{	O
adns__lprintf	function
(	O
ads	pointer
,	O
"adns%s: "	pointer
,	O
pfx	pointer
)	O
;	O
}	O
adns__vlprintf	function
(	O
ads	pointer
,	O
fmt	pointer
,	O
al	array
)	O
;	O
bef	pointer
=	O
" ("	pointer
;	O
aft	pointer
=	O
"\n"	pointer
;	O
if	O
(	O
qu	pointer
&&	O
qu	pointer
->	O
query_dgram	pointer
)	O
{	O
adns__vbuf_init	function
(	O
&	O
vb	pointer
)	O
;	O
adns__lprintf	function
(	O
ads	pointer
,	O
"%sQNAME=%s, QTYPE=%s"	pointer
,	O
bef	pointer
,	O
adns__diag_domain	function
(	O
qu	pointer
->	O
ads	pointer
,	O
-	O
1	int
,	O
0	int
,	O
&	O
vb	pointer
,	O
qu	pointer
->	O
query_dgram	pointer
,	O
qu	pointer
->	O
query_dglen	int
,	O
DNS_HDRSIZE	int
)	O
,	O
qu	pointer
->	O
typei	pointer
?	O
qu	pointer
->	O
typei	pointer
->	O
rrtname	pointer
:	O
"<unknown>"	pointer
)	O
;	O
if	O
(	O
qu	pointer
->	O
typei	pointer
&&	O
qu	pointer
->	O
typei	pointer
->	O
fmtname	pointer
)	O
adns__lprintf	function
(	O
ads	pointer
,	O
"(%s)"	pointer
,	O
qu	pointer
->	O
typei	pointer
->	O
fmtname	pointer
)	O
;	O
bef	pointer
=	O
", "	pointer
;	O
aft	pointer
=	O
")\n"	pointer
;	O
adns__vbuf_free	function
(	O
&	O
vb	pointer
)	O
;	O
}	O
if	O
(	O
serv	int
>=	O
0	int
)	O
{	O
adns__lprintf	function
(	O
ads	pointer
,	O
"%sNS=%s"	pointer
,	O
bef	pointer
,	O
inet_ntoa	function
(	O
ads	pointer
->	O
servers	array
[	O
serv	int
]	O
.	O
addr	union
)	O
)	O
;	O
bef	pointer
=	O
", "	pointer
;	O
aft	pointer
=	O
")\n"	pointer
;	O
}	O
adns__lprintf	function
(	O
ads	pointer
,	O
"%s"	pointer
,	O
aft	pointer
)	O
;	O
}	O
void	O
adns__debug	function
(	O
adns_state	pointer
ads	pointer
,	O
int	O
serv	int
,	O
adns_query	pointer
qu	pointer
,	O
const	O
char	O
*	O
fmt	pointer
,	O
...	O
)	O
{	O
va_list	array
al	array
;	O
va_start	O
(	O
al	array
,	O
fmt	pointer
)	O
;	O
adns__vdiag	function
(	O
ads	pointer
,	O
" debug"	pointer
,	O
0	int
,	O
serv	int
,	O
qu	pointer
,	O
fmt	pointer
,	O
al	array
)	O
;	O
va_end	O
(	O
al	array
)	O
;	O
}	O
void	O
adns__warn	function
(	O
adns_state	pointer
ads	pointer
,	O
int	O
serv	int
,	O
adns_query	pointer
qu	pointer
,	O
const	O
char	O
*	O
fmt	pointer
,	O
...	O
)	O
{	O
va_list	array
al	array
;	O
va_start	O
(	O
al	array
,	O
fmt	pointer
)	O
;	O
adns__vdiag	function
(	O
ads	pointer
,	O
" warning"	pointer
,	O
adns_if_noerrprint	int
|	O
adns_if_noserverwarn	int
,	O
serv	int
,	O
qu	pointer
,	O
fmt	pointer
,	O
al	array
)	O
;	O
va_end	O
(	O
al	array
)	O
;	O
}	O
void	O
adns__diag	function
(	O
adns_state	pointer
ads	pointer
,	O
int	O
serv	int
,	O
adns_query	pointer
qu	pointer
,	O
const	O
char	O
*	O
fmt	pointer
,	O
...	O
)	O
{	O
va_list	array
al	array
;	O
va_start	O
(	O
al	array
,	O
fmt	pointer
)	O
;	O
adns__vdiag	function
(	O
ads	pointer
,	O
""	pointer
,	O
adns_if_noerrprint	int
,	O
serv	int
,	O
qu	pointer
,	O
fmt	pointer
,	O
al	array
)	O
;	O
va_end	O
(	O
al	array
)	O
;	O
}	O
void	O
adns__vbuf_init	function
(	O
vbuf	struct
*	O
vb	pointer
)	O
{	O
vb	pointer
->	O
used	int
=	O
vb	pointer
->	O
avail	int
=	O
0	int
;	O
vb	pointer
->	O
buf	pointer
=	O
0	int
;	O
}	O
int	O
adns__vbuf_ensure	function
(	O
vbuf	struct
*	O
vb	pointer
,	O
int	O
want	int
)	O
{	O
void	O
*	O
nb	pointer
;	O
if	O
(	O
vb	pointer
->	O
avail	int
>=	O
want	int
)	O
return	O
1	int
;	O
nb	pointer
=	O
realloc	function
(	O
vb	pointer
->	O
buf	pointer
,	O
want	int
)	O
;	O
if	O
(	O
!	O
nb	pointer
)	O
return	O
0	int
;	O
vb	pointer
->	O
buf	pointer
=	O
nb	pointer
;	O
vb	pointer
->	O
avail	int
=	O
want	int
;	O
return	O
1	int
;	O
}	O
void	O
adns__vbuf_appendq	function
(	O
vbuf	struct
*	O
vb	pointer
,	O
const	O
byte	char
*	O
data	pointer
,	O
int	O
len	int
)	O
{	O
memcpy	function
(	O
vb	pointer
->	O
buf	pointer
+	O
vb	pointer
->	O
used	int
,	O
data	pointer
,	O
len	int
)	O
;	O
vb	pointer
->	O
used	int
+=	O
len	int
;	O
}	O
int	O
adns__vbuf_append	function
(	O
vbuf	struct
*	O
vb	pointer
,	O
const	O
byte	char
*	O
data	pointer
,	O
int	O
len	int
)	O
{	O
int	O
newlen	int
;	O
void	O
*	O
nb	pointer
;	O
newlen	int
=	O
vb	pointer
->	O
used	int
+	O
len	int
;	O
if	O
(	O
vb	pointer
->	O
avail	int
<	O
newlen	int
)	O
{	O
if	O
(	O
newlen	int
<	O
20	int
)	O
newlen	int
=	O
20	int
;	O
newlen	int
<<=	O
1	int
;	O
nb	pointer
=	O
realloc	function
(	O
vb	pointer
->	O
buf	pointer
,	O
newlen	int
)	O
;	O
if	O
(	O
!	O
nb	pointer
)	O
{	O
newlen	int
=	O
vb	pointer
->	O
used	int
+	O
len	int
;	O
nb	pointer
=	O
realloc	function
(	O
vb	pointer
->	O
buf	pointer
,	O
newlen	int
)	O
;	O
}	O
if	O
(	O
!	O
nb	pointer
)	O
return	O
0	int
;	O
vb	pointer
->	O
buf	pointer
=	O
nb	pointer
;	O
vb	pointer
->	O
avail	int
=	O
newlen	int
;	O
}	O
adns__vbuf_appendq	function
(	O
vb	pointer
,	O
data	pointer
,	O
len	int
)	O
;	O
return	O
1	int
;	O
}	O
int	O
adns__vbuf_appendstr	function
(	O
vbuf	struct
*	O
vb	pointer
,	O
const	O
char	O
*	O
data	pointer
)	O
{	O
int	O
l	long
;	O
l	long
=	O
strlen	function
(	O
data	pointer
)	O
;	O
return	O
adns__vbuf_append	function
(	O
vb	pointer
,	O
data	pointer
,	O
l	long
)	O
;	O
}	O
void	O
adns__vbuf_free	function
(	O
vbuf	struct
*	O
vb	pointer
)	O
{	O
free	function
(	O
vb	pointer
->	O
buf	pointer
)	O
;	O
adns__vbuf_init	function
(	O
vb	pointer
)	O
;	O
}	O
const	O
char	O
*	O
adns__diag_domain	function
(	O
adns_state	pointer
ads	pointer
,	O
int	O
serv	int
,	O
adns_query	pointer
qu	pointer
,	O
vbuf	struct
*	O
vb	pointer
,	O
const	O
byte	char
*	O
dgram	pointer
,	O
int	O
dglen	int
,	O
int	O
cbyte	int
)	O
{	O
adns_status	enum
st	enum
;	O
st	enum
=	O
adns__parse_domain	function
(	O
ads	pointer
,	O
serv	int
,	O
qu	pointer
,	O
vb	pointer
,	O
pdf_quoteok	int
,	O
dgram	pointer
,	O
dglen	int
,	O
&	O
cbyte	int
,	O
dglen	int
)	O
;	O
if	O
(	O
st	enum
==	O
adns_s_nomemory	int
)	O
{	O
return	O
"<cannot report domain... out of memory>"	pointer
;	O
}	O
if	O
(	O
st	enum
)	O
{	O
vb	pointer
->	O
used	int
=	O
0	int
;	O
if	O
(	O
!	O
(	O
adns__vbuf_appendstr	function
(	O
vb	pointer
,	O
"<bad format... "	pointer
)	O
&&	O
adns__vbuf_appendstr	function
(	O
vb	pointer
,	O
adns_strerror	function
(	O
st	enum
)	O
)	O
&&	O
adns__vbuf_appendstr	function
(	O
vb	pointer
,	O
">"	pointer
)	O
&&	O
adns__vbuf_append	function
(	O
vb	pointer
,	O
""	pointer
,	O
1	int
)	O
)	O
)	O
{	O
return	O
"<cannot report bad format... out of memory>"	pointer
;	O
}	O
}	O
if	O
(	O
!	O
vb	pointer
->	O
used	int
)	O
{	O
adns__vbuf_appendstr	function
(	O
vb	pointer
,	O
"<truncated ...>"	pointer
)	O
;	O
adns__vbuf_append	function
(	O
vb	pointer
,	O
""	pointer
,	O
1	int
)	O
;	O
}	O
return	O
vb	pointer
->	O
buf	pointer
;	O
}	O
adns_status	enum
adns_rr_info	function
(	O
adns_rrtype	enum
type	enum
,	O
const	O
char	O
*	O
*	O
rrtname_r	pointer
,	O
const	O
char	O
*	O
*	O
fmtname_r	pointer
,	O
int	O
*	O
len_r	pointer
,	O
const	O
void	O
*	O
datap	pointer
,	O
char	O
*	O
*	O
data_r	pointer
)	O
{	O
const	O
typeinfo	struct
*	O
typei	pointer
;	O
vbuf	struct
vb	pointer
;	O
adns_status	enum
st	enum
;	O
typei	pointer
=	O
adns__findtype	function
(	O
type	enum
)	O
;	O
if	O
(	O
!	O
typei	pointer
)	O
return	O
adns_s_unknownrrtype	int
;	O
if	O
(	O
rrtname_r	pointer
)	O
*	O
rrtname_r	pointer
=	O
typei	pointer
->	O
rrtname	pointer
;	O
if	O
(	O
fmtname_r	pointer
)	O
*	O
fmtname_r	pointer
=	O
typei	pointer
->	O
fmtname	pointer
;	O
if	O
(	O
len_r	pointer
)	O
*	O
len_r	pointer
=	O
typei	pointer
->	O
rrsz	int
;	O
if	O
(	O
!	O
datap	pointer
)	O
return	O
adns_s_ok	int
;	O
adns__vbuf_init	function
(	O
&	O
vb	pointer
)	O
;	O
st	enum
=	O
typei	pointer
->	O
convstring	pointer
(	O
&	O
vb	pointer
,	O
datap	pointer
)	O
;	O
if	O
(	O
st	enum
)	O
goto	O
x_freevb	O
;	O
if	O
(	O
!	O
adns__vbuf_append	function
(	O
&	O
vb	pointer
,	O
""	pointer
,	O
1	int
)	O
)	O
{	O
st	enum
=	O
adns_s_nomemory	int
;	O
goto	O
x_freevb	O
;	O
}	O
assert	O
(	O
strlen	function
(	O
vb	pointer
.	O
buf	pointer
)	O
==	O
vb	pointer
.	O
used	int
-	O
1	int
)	O
;	O
*	O
data_r	pointer
=	O
realloc	function
(	O
vb	pointer
.	O
buf	pointer
,	O
vb	pointer
.	O
used	int
)	O
;	O
if	O
(	O
!	O
*	O
data_r	pointer
)	O
*	O
data_r	pointer
=	O
vb	pointer
.	O
buf	pointer
;	O
return	O
adns_s_ok	int
;	O
x_freevb	O
:	O
adns__vbuf_free	function
(	O
&	O
vb	pointer
)	O
;	O
return	O
st	enum
;	O
}	O
static	O
const	O
struct	O
sinfo	struct
{	O
adns_status	enum
st	enum
;	O
const	O
char	O
*	O
abbrev	pointer
;	O
const	O
char	O
*	O
string	pointer
;	O
}	O
sinfos	array
[	O
]	O
=	O
{	O
SINFO	O
(	O
ok	O
,	O
"OK"	pointer
)	O
,	O
SINFO	O
(	O
nomemory	O
,	O
"Out of memory"	pointer
)	O
,	O
SINFO	O
(	O
unknownrrtype	O
,	O
"Query not implemented in DNS library"	pointer
)	O
,	O
SINFO	O
(	O
systemfail	O
,	O
"General resolver or system failure"	pointer
)	O
,	O
SINFO	O
(	O
timeout	struct
,	O
"DNS query timed out"	pointer
)	O
,	O
SINFO	O
(	O
allservfail	O
,	O
"All nameservers failed"	pointer
)	O
,	O
SINFO	O
(	O
norecurse	O
,	O
"Recursion denied by nameserver"	pointer
)	O
,	O
SINFO	O
(	O
invalidresponse	O
,	O
"Nameserver sent bad response"	pointer
)	O
,	O
SINFO	O
(	O
unknownformat	O
,	O
"Nameserver used unknown format"	pointer
)	O
,	O
SINFO	O
(	O
rcodeservfail	O
,	O
"Nameserver reports failure"	pointer
)	O
,	O
SINFO	O
(	O
rcodeformaterror	O
,	O
"Query not understood by nameserver"	pointer
)	O
,	O
SINFO	O
(	O
rcodenotimplemented	O
,	O
"Query not implemented by nameserver"	pointer
)	O
,	O
SINFO	O
(	O
rcoderefused	O
,	O
"Query refused by nameserver"	pointer
)	O
,	O
SINFO	O
(	O
rcodeunknown	O
,	O
"Nameserver sent unknown response code"	pointer
)	O
,	O
SINFO	O
(	O
inconsistent	O
,	O
"Inconsistent resource records in DNS"	pointer
)	O
,	O
SINFO	O
(	O
prohibitedcname	O
,	O
"DNS alias found where canonical name wanted"	pointer
)	O
,	O
SINFO	O
(	O
answerdomaininvalid	O
,	O
"Found syntactically invalid domain name"	pointer
)	O
,	O
SINFO	O
(	O
answerdomaintoolong	O
,	O
"Found overly-long domain name"	pointer
)	O
,	O
SINFO	O
(	O
invaliddata	O
,	O
"Found invalid DNS data"	pointer
)	O
,	O
SINFO	O
(	O
querydomainwrong	O
,	O
"Domain invalid for particular DNS query type"	pointer
)	O
,	O
SINFO	O
(	O
querydomaininvalid	O
,	O
"Domain name is syntactically invalid"	pointer
)	O
,	O
SINFO	O
(	O
querydomaintoolong	O
,	O
"Domain name or component is too long"	pointer
)	O
,	O
SINFO	O
(	O
nxdomain	O
,	O
"No such domain"	pointer
)	O
,	O
SINFO	O
(	O
nodata	O
,	O
"No such data"	pointer
)	O
}	O
;	O
static	O
int	O
si_compar	function
(	O
const	O
void	O
*	O
key	pointer
,	O
const	O
void	O
*	O
elem	pointer
)	O
{	O
const	O
adns_status	enum
*	O
st	enum
=	O
key	pointer
;	O
const	O
struct	O
sinfo	struct
*	O
si	pointer
=	O
elem	pointer
;	O
return	O
*	O
st	enum
<	O
si	pointer
->	O
st	enum
?	O
-	O
1	int
:	O
*	O
st	enum
>	O
si	pointer
->	O
st	enum
?	O
1	int
:	O
0	int
;	O
}	O
static	O
const	O
struct	O
sinfo	struct
*	O
findsinfo	function
(	O
adns_status	enum
st	enum
)	O
{	O
return	O
bsearch	function
(	O
&	O
st	enum
,	O
sinfos	array
,	O
sizeof	O
(	O
sinfos	array
)	O
/	O
sizeof	O
(	O
*	O
sinfos	array
)	O
,	O
sizeof	O
(	O
*	O
sinfos	array
)	O
,	O
si_compar	function
)	O
;	O
}	O
const	O
char	O
*	O
adns_strerror	function
(	O
adns_status	enum
st	enum
)	O
{	O
const	O
struct	O
sinfo	struct
*	O
si	pointer
;	O
si	pointer
=	O
findsinfo	function
(	O
st	enum
)	O
;	O
return	O
si	pointer
->	O
string	pointer
;	O
}	O
const	O
char	O
*	O
adns_errabbrev	function
(	O
adns_status	enum
st	enum
)	O
{	O
const	O
struct	O
sinfo	struct
*	O
si	pointer
;	O
si	pointer
=	O
findsinfo	function
(	O
st	enum
)	O
;	O
return	O
si	pointer
->	O
abbrev	pointer
;	O
}	O
static	O
const	O
struct	O
stinfo	struct
{	O
adns_status	enum
stmax	enum
;	O
const	O
char	O
*	O
abbrev	pointer
;	O
}	O
stinfos	array
[	O
]	O
=	O
{	O
{	O
adns_s_ok	int
,	O
"ok"	pointer
}	O
,	O
STINFO	O
(	O
localfail	O
)	O
,	O
STINFO	O
(	O
remotefail	O
)	O
,	O
STINFO	O
(	O
tempfail	O
)	O
,	O
STINFO	O
(	O
misconfig	O
)	O
,	O
STINFO	O
(	O
misquery	O
)	O
,	O
STINFO	O
(	O
permfail	O
)	O
}	O
;	O
static	O
int	O
sti_compar	function
(	O
const	O
void	O
*	O
key	pointer
,	O
const	O
void	O
*	O
elem	pointer
)	O
{	O
const	O
adns_status	enum
*	O
st	enum
=	O
key	pointer
;	O
const	O
struct	O
stinfo	struct
*	O
sti	pointer
=	O
elem	pointer
;	O
adns_status	enum
here	enum
,	O
min	enum
,	O
max	int
;	O
here	enum
=	O
*	O
st	enum
;	O
min	enum
=	O
(	O
sti	pointer
==	O
stinfos	array
)	O
?	O
0	int
:	O
sti	pointer
[	O
-	O
1	int
]	O
.	O
stmax	enum
+	O
1	int
;	O
max	int
=	O
sti	pointer
->	O
stmax	enum
;	O
return	O
here	enum
<	O
min	enum
?	O
-	O
1	int
:	O
here	enum
>	O
max	int
?	O
1	int
:	O
0	int
;	O
}	O
const	O
char	O
*	O
adns_errtypeabbrev	function
(	O
adns_status	enum
st	enum
)	O
{	O
const	O
struct	O
stinfo	struct
*	O
sti	pointer
;	O
sti	pointer
=	O
bsearch	function
(	O
&	O
st	enum
,	O
stinfos	array
,	O
sizeof	O
(	O
stinfos	array
)	O
/	O
sizeof	O
(	O
*	O
stinfos	array
)	O
,	O
sizeof	O
(	O
*	O
stinfos	array
)	O
,	O
sti_compar	function
)	O
;	O
return	O
sti	pointer
->	O
abbrev	pointer
;	O
}	O
void	O
adns__isort	function
(	O
void	O
*	O
array	array
,	O
int	O
nobjs	int
,	O
int	O
sz	int
,	O
void	O
*	O
tempbuf	pointer
,	O
int	O
(	O
*	O
needswap	pointer
)	O
(	O
void	O
*	O
context	pointer
,	O
const	O
void	O
*	O
a	pointer
,	O
const	O
void	O
*	O
b	pointer
)	O
,	O
void	O
*	O
context	pointer
)	O
{	O
byte	char
*	O
data	pointer
=	O
array	array
;	O
int	O
i	int
,	O
place	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
nobjs	int
;	O
i	int
++	O
)	O
{	O
for	O
(	O
place	int
=	O
i	int
;	O
place	int
>	O
0	int
&&	O
needswap	pointer
(	O
context	pointer
,	O
data	pointer
+	O
(	O
place	int
-	O
1	int
)	O
*	O
sz	int
,	O
data	pointer
+	O
i	int
*	O
sz	int
)	O
;	O
place	int
--	O
)	O
;	O
if	O
(	O
place	int
!=	O
i	int
)	O
{	O
memcpy	function
(	O
tempbuf	pointer
,	O
data	pointer
+	O
i	int
*	O
sz	int
,	O
sz	int
)	O
;	O
memmove	function
(	O
data	pointer
+	O
(	O
place	int
+	O
1	int
)	O
*	O
sz	int
,	O
data	pointer
+	O
place	int
*	O
sz	int
,	O
(	O
i	int
-	O
place	int
)	O
*	O
sz	int
)	O
;	O
memcpy	function
(	O
data	pointer
+	O
place	int
*	O
sz	int
,	O
tempbuf	pointer
,	O
sz	int
)	O
;	O
}	O
}	O
}	O
void	O
adns__sigpipe_protect	function
(	O
adns_state	pointer
ads	pointer
)	O
{	O
sigset_t	struct
toblock	struct
;	O
struct	O
sigaction	struct
sa	struct
;	O
int	O
r	int
;	O
if	O
(	O
ads	pointer
->	O
iflags	enum
&	O
adns_if_nosigpipe	int
)	O
return	O
;	O
sigfillset	function
(	O
&	O
toblock	struct
)	O
;	O
sigdelset	function
(	O
&	O
toblock	struct
,	O
SIGPIPE	int
)	O
;	O
sa	struct
.	O
sa_handler	pointer
=	O
SIG_IGN	O
;	O
sigfillset	function
(	O
&	O
sa	struct
.	O
sa_mask	struct
)	O
;	O
sa	struct
.	O
sa_flags	int
=	O
0	int
;	O
r	int
=	O
sigprocmask	function
(	O
SIG_SETMASK	int
,	O
&	O
toblock	struct
,	O
&	O
ads	pointer
->	O
stdsigmask	struct
)	O
;	O
assert	O
(	O
!	O
r	int
)	O
;	O
r	int
=	O
sigaction	struct
(	O
SIGPIPE	int
,	O
&	O
sa	struct
,	O
&	O
ads	pointer
->	O
stdsigpipe	struct
)	O
;	O
assert	O
(	O
!	O
r	int
)	O
;	O
}	O
void	O
adns__sigpipe_unprotect	function
(	O
adns_state	pointer
ads	pointer
)	O
{	O
int	O
r	int
;	O
if	O
(	O
ads	pointer
->	O
iflags	enum
&	O
adns_if_nosigpipe	int
)	O
return	O
;	O
r	int
=	O
sigaction	struct
(	O
SIGPIPE	int
,	O
&	O
ads	pointer
->	O
stdsigpipe	struct
,	O
0	int
)	O
;	O
assert	O
(	O
!	O
r	int
)	O
;	O
r	int
=	O
sigprocmask	function
(	O
SIG_SETMASK	int
,	O
&	O
ads	pointer
->	O
stdsigmask	struct
,	O
0	int
)	O
;	O
assert	O
(	O
!	O
r	int
)	O
;	O
}	O
